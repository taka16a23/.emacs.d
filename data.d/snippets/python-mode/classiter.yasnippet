# -*- mode: snippet -*-
# name: classiter
# key: classiter
# expand-env: ((yas/indent-line 'fixed) (yas/wrap-around-region 'nil))
# 'r' charactor before the first triple-quote for doctest
# don't want escape sequences - e.g '\n'
# --
class ${1:ClassName}(${2:object}):
    r\"\"\"$3
    \"\"\"

    def __init__(self, $4):
        \"\"\"$5
        ${4:$
        (let* ((indent
                (concat \"\n\" (make-string (current-column) 32)))
               (args
                (mapconcat
                 \'(lambda (x)
                    (if (not (string= (nth 0 x) \"\"))
                        (concat \"- \" (char-to-string 96) (nth 0 x)
                                (char-to-string 96) \":\")))
                 (mapcar
                  \'(lambda (x)
                     (mapcar
                      (lambda (x)
                        (replace-regexp-in-string \"[[:blank:]]*\$\" \"\"
                         (replace-regexp-in-string \"^[[:blank:]]*\" \"\" x))) x))
                  (mapcar \'(lambda (x) (split-string x \"=\"))
                          (split-string yas-text \",\")))
                 indent)))
          (if (string= args \"\")
              (make-string 3 34)
            (mapconcat
             \'identity
             (list \"\" \"Arguments:\" args (make-string 3 34))
             indent)))
        }
        ${4:$
        (mapconcat
         \'(lambda (x)
            (if (not (string= (nth 0 x) \"\"))
                (concat \"self._\" (nth 0 x) \" = \" (nth 0 x))))
         (mapcar
          \'(lambda (x)
             (mapcar
              \'(lambda (x)
                 (replace-regexp-in-string \"[[:blank:]]*$\" \"\"
                  (replace-regexp-in-string \"^[[:blank:]]*\" \"\" x)))
              x))
          (mapcar \'(lambda (x) (split-string x \"=\"))
                  (split-string yas-text \",\")))
         (concat \"\n\" (make-string (current-column) 32)))
        }
        $0
    def __iter__(self):
        r\"\"\"Return iterator object.\"\"\"
        return self

    def __next__(self):
        raise Stopiteration