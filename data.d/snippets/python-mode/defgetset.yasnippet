# -*- mode: snippet -*-
# name: defgetset
# key: defgetset
# condition: (not (py:at-string|comment-p))
# expand-env: ((yas/indent-line 'fixed) (yas/wrap-around-region 'nil))
# --
def get${1:name$(replace-regexp-in-string \"[[:punct:][:blank:]]\" \"_\" yas-text)}(self, $20):
    r\"\"\"SUMMARY

    get$1($20)
    ${20:$
      (let*
        ((indent
            (concat \"\n\" (make-string (current-column) 32)))
           (args
            (mapconcat
             \'(lambda (x)
                (if (not (string= (nth 0 x) \"\"))
                    (concat \"- \" (char-to-string 96) (nth 0 x)
                            (char-to-string 96) \":\")))
             (mapcar
              \'(lambda (x)
                 (mapcar
                  \'(lambda (x)
                     (replace-regexp-in-string \"*\" \"\"
                      (replace-regexp-in-string \"^[[:blank:]]*\" \"\" x)))
                  x))
              (mapcar \'(lambda (x) (split-string x \"=\"))
                      (split-string yas-text \",\")))
             indent)))
      (if (string= args \"\")
          (concat indent \"@Return:\n\" indent \"@Error:\" indent (make-string 3 34))
        (mapconcat
         \'identity
         (list \"\" \"@Arguments:\" args (concat indent \"@Return:\n\" indent \"@Error:\")
         (make-string 3 34))
         indent)))}
    return ${25:self.$27}

def set$1(self, $30):
    r\"\"\"SUMMARY

    set$1($30)
    ${30:$
      (let*
        ((indent
            (concat \"\n\" (make-string (current-column) 32)))
           (args
            (mapconcat
             \'(lambda (x)
                (if (not (string= (nth 0 x) \"\"))
                    (concat \"- \" (char-to-string 96) (nth 0 x)
                            (char-to-string 96) \":\")))
             (mapcar
              \'(lambda (x)
                 (mapcar
                  \'(lambda (x)
                     (replace-regexp-in-string \"*\" \"\"
                      (replace-regexp-in-string \"^[[:blank:]]*\" \"\" x)))
                  x))
              (mapcar \'(lambda (x) (split-string x \"=\"))
                      (split-string yas-text \",\")))
             indent)))
      (if (string= args \"\")
          (concat indent \"@Return:\n\" indent \"@Error:\" indent (make-string 3 34))
        (mapconcat
         \'identity
         (list \"\" \"@Arguments:\" args (concat indent \"@Return:\n\" indent \"@Error:\")
         (make-string 3 34))
         indent)))}
    ${50:pass}$0

$40 = property(get$1, set$1)

