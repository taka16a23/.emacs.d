;;; custom_temp.el ---
;;
;; Copyright (C) 2015 Atami
;;
;; Author: Atami
;; Maintainer:
;; Version:
;; Created: 2015/10/14 02:37:48 (+0900)
;; Last-Updated:
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This file is part of Emacs.
;;
;; This file is free software: you can redistribute it and/or modify it under
;; the terms of the GNU General Public License as published by the Free
;; Software Foundation, either version 3 of the License, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful, but WITHOUT
;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
;; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
;; more details.
;;
;; You should have received a copy of the GNU General Public License along
;; with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;  ===========
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;  ===========
;;
;;
;;; Code:



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; custom_temp.el ends here
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auto-insert-alist
   (append
    (quote
     (("\\.junk.el$" . my-junk-auto-insert-elisp)))
    (quote
     (("\\.el$" . make-header)))
    (quote
     (("__init__\\.py$" . my-auto-insert-init-python)))
    (quote
     (("__main__\\.py$" . my-auto-insert-main-python)))
    (quote
     (("\\.junk\\.py$" . my-junk-auto-insert-python)))
    (quote
     (("test_.+\\.py$" . my-test-auto-insert-python)))
    (quote
     (("setup\\.py$" . my-setup-auto-insert-python)))
    (quote
     (("\\.py$" . my-auto-insert-python)))
    (quote
     (("\\.pyx$" . my-auto-insert-python)))
    (quote
     (("\\.cc$" . my-auto-insert-cpp)))
    (quote
     (("\\.cpp$" . my-auto-insert-cpp)))
    (quote
     (("zsh/scripts/_.+\\.sh$" . my-auto-insert-shscripts)))
    auto-insert-alist))
 '(auto-insert-directory (concat (my-data-dir-join "insert") "/"))
 '(auto-insert-query nil)
 '(auto-revert-interval 7)
 '(auto-save-interval 300)
 '(auto-save-list-file-prefix (my-var-dir-join "auto-save-list/save-"))
 '(auto-save-timeout 10)
 '(backup-by-copying t)
 '(backup-by-copying-when-mismatch t)
 '(bookmark-default-file (my-data-dir-join "bookmarks"))
 '(bookmark-save-flag 1)
 '(cua-mode t nil (cua-base))
 '(delete-by-moving-to-trash t)
 '(delete-old-versions t)
 '(dired-listing-switches
   "-l --all --dired --human-readable --group-directories-first --no-group -g")
 '(dired-no-confirm
   (quote
    (byte-compile chmod chown compress copy hardlink load move print shell symlink touch uncompress)))
 '(diredp-hide-details-initially-flag t)
 '(diredp-wrap-around-flag nil)
 '(eldoc-echo-area-use-multiline-p t)
 '(eldoc-idle-delay 0.7)
 '(enable-local-variables t)
 '(eol-mnemonic-dos "[crlf]")
 '(eol-mnemonic-mac "[cr]")
 '(eol-mnemonic-undecided "[?]")
 '(eol-mnemonic-unix "[lf]")
 '(garbage-collection-messages nil)
 '(indent-tabs-mode nil)
 '(inhibit-eol-conversion nil)
 '(inhibit-startup-echo-area-message t)
 '(inhibit-startup-screen t)
 '(initial-scratch-message nil)
 '(iswitchb-newbuffer nil)
 '(iswitchb-prompt-newbuffer nil)
 '(iswitchb-regexp t)
 '(kept-new-versions 20)
 '(kept-old-versions 1)
 '(kill-do-not-save-duplicates t)
 '(kill-whole-line t)
 '(large-file-warning-threshold 10000000)
 '(ls-lisp-dirs-first t)
 '(ls-lisp-verbosity nil)
 '(max-lisp-eval-depth 4096)
 '(max-specpdl-size 3000)
 '(message-log-max 10000)
 '(org-doing-file "~/.emacs.d/doing.org")
 '(overflow-newline-into-fringe t)
 '(package-selected-packages
   (quote
    (auto-async-byte-compilehljjl w3m virtualenv viewer use-package usage-memo undo-tree unbound tabbar systemd syslog-mode sudo-ext smartrep smart-operator sequential-command scratch-log savekill save-sexp revive recentf-ext quickrun pylint point-undo open-junk-file multiple-cursors multi-term mark-multiple magit log4j-mode linum-off jedi init-loader info+ ht helm-pydoc helm-ls-git helm-c-yasnippet header2 grep-a-lot google-this fuzzy frame-cmds fold-dwim-org flymake-cursor flycheck f expand-region eldoc-extension edit-server edit-list e2wm-term dsvn dired+ cython-mode csv-mode crosshairs crontab-mode column-marker color-moccur c-eldoc bm auto-yasnippet auto-install auto-highlight-symbol auto-complete-clang auto-complete-c-headers auto-async-byte-compile ascii apache-mode ahk-mode)))
 '(process-kill-without-query t)
 '(recentf-auto-cleanup "11:00pm")
 '(recentf-exclude (quote ("recentfile")))
 '(recentf-max-saved-items 400)
 '(recentf-save-file (my-var-dir-join "recentfile"))
 '(require-final-newline t)
 '(safe-local-variable-values
   (quote
    ((no-check-type-miss . t)
     (backup-inhibited)
     (version-control quote never))))
 '(save-place t)
 '(save-place-file (my-var-dir-join "cursor-point-save.el"))
 '(save-place-mode t)
 '(savehist-file (my-var-dir-join "savehist"))
 '(select-enable-clipboard 1)
 '(tab-width 4)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify))
 '(uniquify-ignore-buffers-re "*[^*]+*")
 '(url-configuration-directory (my-data-dir-join "url/"))
 '(use-dialog-box nil)
 '(use-file-dialog nil)
 '(user-full-name "Atami")
 '(vc-command-messages nil)
 '(vc-directory-exclusion-list
   (quote
    ("SCCS" "RCS" "CVS" "MCVS" ".svn" ".git" ".hg" ".bzr" "_MTN" "_darcs" "{arch}" "etc/data")))
 '(version-control (quote numbered))
 '(view-mode-by-default-regexp ".*")
 '(view-mode-by-exclude-regexp "\\(\\.loaddefs.el\\|\\*auto-async-byte-compile\\*\\)")
 '(view-read-only t)
 '(viewer-modeline-color-unwritable "tomato")
 '(viewer-modeline-color-view "DeepPink")
 '(yank-excluded-properties t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(bold ((t (:bold t))))
 '(bold-italic ((t (:italic t :bold t))))
 '(dired-directory ((t :foreground "Green")))
 '(dired-header ((t (:foreground "Green"))))
 '(eldoc-highlight-function-argument ((t (:foreground "yellow" :weight bold))))
 '(font-lock-builtin-face ((t (:foreground "#b0c4de"))))
 '(font-lock-comment-face ((t (:foreground "#ff4500"))))
 '(font-lock-constant-face ((t (:foreground "#66cdaa"))))
 '(font-lock-doc-face ((t (:foreground "#ff4500"))))
 '(font-lock-function-name-face ((t (:foreground "#87cefa" :weight bold))))
 '(font-lock-keyword-face ((t (:foreground "Cyan"))))
 '(font-lock-preprocessor-face ((t (:foreground "#66cdaa"))))
 '(font-lock-reference-face ((t (:foreground "#b0c4de"))))
 '(font-lock-regexp-grouping-:construct ((t (:foreground "#32cd32" :weight bold))))
 '(font-lock-regexp-grouping-backslash ((t (:foreground "#32cd32" :weight bold))))
 '(font-lock-string-face ((t (:foreground "#ffa07a"))))
 '(font-lock-type-face ((t (:foreground "#98fb98"))))
 '(font-lock-variable-name-face ((t (:foreground "#eedd82"))))
 '(font-lock-warning-face ((t (:bold t :foreground "pink"))))
 '(highlight ((t (:background "#36648b"))))
 '(icomplete-first-match ((((class color) (background dark)) :whight bold :foreground "cyan")))
 '(isearch ((t (:background "blue"))))
 '(italic ((t (:italic t))))
 '(primary-selection ((t (:background "blue"))))
 '(region ((t (:background "#1874cd"))))
 '(secondary-selection ((t (:background "#483d8b"))))
 '(show-paren-match-face ((t (:bold t :background "#87cefa" :foreground "white"))) t)
 '(show-paren-mismatch-face ((t (:bold t :background "Red" :foreground "White"))) t)
 '(underline ((t (:underline t))))
 '(zmacs-region ((t (:background "blue")))))
