# $Revision: 70 $
# $LastChangedRevision: 70 $
# $LastChangedDate: 2015-09-29 15:54:28 +0900 (Tue, 29 Sep 2015) $
#
### .zshenv Setting
### {HOME}% echo {HOME}% ln -s .zsh/.zshenv > .zsh/zshenv
##  {HOME}% ln -s .zsh/.zshenv


# <<    TASK    >>
#    set variable hostname = 192.168.1.123
#    C-- = end-of-line

# ==================== GENERAL ==========================
## Color Define
#
fg_B=$'\e[0;30m'      #Black
fg_R=$'\e[0;31m'      #Red
fg_G=$'\e[0;32m'      #Green
fg_BR=$'\e[0;33m'     #BRown
fg_BL=$'\e[0;34m'     #BLue
fg_PU=$'\e[0;35m'     #PUrple
fg_CY=$'\e[0;36m'     #Cyan
fg_LG=$'\e[0;37m'     #LGray
fg_DG=$'\e[1;30m'     #DGray
fg_LR=$'\e[1;31m'     #LRed
fg_LG=$'\e[1;32m'     #LGreen
fg_Y=$'\e[1;33m'      #Yellow
fg_LB=$'\e[1;34m'     #LBlue
fg_P=$'\e[1;35m'      #Pink
fg_LC=$'\e[1;36m'     #LCyan
fg_W=$'\e[1;37m'      #White
#Text Background Colors
bg_R=$'\e[0;41m'      #Red
bg_G=$'\e[0;42m'      #Green
bg_BR=$'\e[0;43m'     #BRown
bg_BL=$'\e[0;44m'     #BLue
bg_PU=$'\e[0;45m'     #PUrple
bg_C=$'\e[0;46m'      #Cyan
bg_GR=$'\e[0;47m'     #GRay
#Attributes
at_normal=$'\e[0m'
at_bold=$'\e[1m'
at_italics=$'\e[3m'
at_underl=$'\e[4m'
at_blink=$'\e[5m'
at_outline=$'\e[6m'
at_reverse=$'\e[7m'
at_nondisp=$'\e[8m'
at_strike=$'\e[9m'
at_boldoff=$'\e[22m'
at_italicsoff=$'\e[23m'
at_underloff=$'\e[24m'
at_blinkoff=$'\e[25m'
at_reverseoff=$'\e[27m'
at_strikeoff=$'\e[29m'

## LANG
#
export LANG=en_US.UTF-8

## PATH
#
PATH+=":${ZDOTDIR}/scripts:${ZDOTDIR}/functions/Completion"

## Editor
#
emacsct=/usr/bin/emacsclient
binnano=/usr/bin/nano

emacs_edit_env () {
    export EDITOR=$emacsct
    export VISUAL=$emacsct
    export ALTERNATE_EDITOR=$binnano
}

nano_edit_env () {
    export EDITOR=$binnano
    export VISUAL=$binnano
    export ALTERNATE_EDITOR=$emacsct
}

case ${HOST} in
    ki|qu|bi|ni|pa)
	if [ -x $emacsct ] ; then
	    emacs_edit_env
	elif [ -x $binnano ] ; then
	    nano_edit_env
        fi
	;;
    *)
	if [ -x $binnano ] ; then
	    nano_edit_env
	fi
	;;
esac

## ibus
#
if [ "$HOST" = "ni" ] ; then
export XMODIRIERS="@im=ibus"
export GTK_IM_MODULE="ibus"
export KDE_IM_MODULE="ibus"
fi


## Umask permission change
#
umask 066

## Auto change directory
#
setopt auto_cd

## Auto directory pushd that you can get dirs list by cd -[tab]
#
setopt auto_pushd

## Command correct edition before each completion attempt
#
setopt correct

## Compacked complete list display
#
setopt list_packed

## No display directory stac when pushed and popd
#
setopt pushd_silent

## No remove postfix slash of command line
#
setopt noautoremoveslash

## No beep sound when complete list displayed
#
# setopt nolistbeep

## Dirctory stack size
#
dirstacksize=20


# ==================== KEYBIND ==========================
## Emacs like keybind
#
bindkey -e

## Binding of cursor movement
#
bindkey '^l' forward-char
bindkey '^j' backward-char
bindkey "ESC-j" emacs-backward-word
bindkey "ESC-l" forward-word
bindkey "^h" beginning-of-line
bindkey "^b" vi-backward-kill-word
bindkey '^_' end-of-line
# bindkey '^\-' end-of-line
bindkey "^[[A" end-of-line
bindkey '^e' describe-key-briefly
bindkey "ESC-^k" up-line-or-history
bindkey "^p" clear-screen

## Historical backward/forward search with linehead string binded to ^K/^N
#
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey '^k' history-beginning-search-backward-end
bindkey '^n' history-beginning-search-forward-end
bindkey "ESC-k" beginning-of-buffer-or-history
bindkey "ESC-n" end-of-buffer-or-history

## Reverse menu completion binded to Shift-Tab
#
bindkey "\e[Z" reverse-menu-complete

## Undo, Redo
#
bindkey "^[u" undo
bindkey "^[r" redo

## Runhelp
#
bindkey "^o" run-help

## Move select menu
#
zstyle ':completion:*:*:*' menu true select
zmodload -i zsh/complist
bindkey -M menuselect "^k" up-line-or-history "^n" down-line-or-history "^j" backward-char "^l" forward-char
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' matcher-list 'm:{A-Z}={a-z}' 'm:{a-z}={A-Z}'
zstyle ':completion:*' users-hosts t1@{219.62.120.21,taka16a23.selfip.com,192.168.1.123}

## Completion Configuration
#
fpath=(${ZDOTDIR}/functions/Completion ${fpath})
autoload -U compinit
compinit


# ====================== HISTORY ========================
## History location & size
#
#case "${USER}" in
#root|t1)
#	case "${HOST}" in
#	    CentOS|t1)
#		HISTFILE=/home/t1/.zsh/.zsh_history
#		;;
#	    *)
#		HISTFILE=${ZDOTDIR}/.zsh_history
#		;;
#        esac
#    ;;
#*)
	HISTFILE=${ZDOTDIR}/.zsh_history
#    ;;
#esac

HISTSIZE=100000
SAVEHIST=10000000

## Ignore duplication command history list
#
setopt hist_ignore_dups

## Share command history data
#
setopt share_history

## Do not enter command lines into the history list if they begin with a blank
#
setopt hist_ignore_space

## Can be edit command after select
#
setopt hist_verify

## History lines are also output with timestamps
#
setopt extended_history


# ===================== PROMPT ==========================
## Color code
# 0  : restore default color  1  : brighter colors
# 4  : underlined text        5  : flashing text

#Forground
# 30 : black                  31 : red
# 32 : green                  33 : yellow (or brown)
# 34 : blue                   35 : purple
# 36 : cyan                   37 : white (or gray)

#Background
# 40 : black                  41 : red
# 42 : green                  43 : yellow (or brown)
# 44 : blue                   45 : purple
# 46 : cyan                   47 : white (or gray)

# autoload colors
# colors

## PROMPT
#
#local time="%W %*"

case "${UID}" in
0) # root
    PROMPT="%B%{[31m%}$(echo ${HOST%%.*} | tr '[a-z]' '[A-Z]') %(!.%{[31m%}%/%{%(?.[31m.[33m)%}#%{[0m%}%b .%{[32m%}%/%{%(?.[32m.[33m)%}$%{[0m%}%b "
    PROMPT2="%B%{[36m%}%_#%{[m%}%b "
    SPROMPT="%B%{[33m%}%r is correct? [n,y,a,e]:%{[m%}%b "
#    [ -n "${REMOTEHOST}${SSH_CONNECTION}" ] &&
#    PROMPT="%B%{[31m%}$(echo ${HOST%%.*} | tr '[a-z]' '[A-Z]')%{[0m%} ${PROMPT}"
    ;;
*) # other user.
    PROMPT="%B%{[31m%}$(echo ${HOST%%.*} | tr '[a-z]' '[A-Z]') %{[32m%}%~%{%(?.[32m.[33m)%}#%{[0m%}%b "
    # prompt of than 2 lines. like while,for,...
    PROMPT2="%B%{[36m%}%_%%%{[m%}%b "
    SPROMPT="%B%{[33m%}%r is correct? [n,y,a,e]:%{[m%}%b "
#    [ -n "${REMOTEHOST}${SSH_CONNECTION}" ] &&
#    PROMPT="%B%{[31m%}$(echo ${HOST%%.*} | tr '[a-z]' '[A-Z]')%{[0m%} ${PROMPT}"
    ;;
esac

## RPROMPT
#
#RPROMPT="%W %*"

## banish RPROMPT if reach right position
#
setopt transient_rprompt


# ==================== TERMINAL =========================
## Multi-term
#
[[ $TERM = "eterm-color" ]] && TERM=xterm-color

## Terminal
#
case "${TERM}" in
xterm|xterm-color|xterm-256color)
    export LSCOLORS=exfxcxdxbxegedabagacad
    export LS_COLORS='di=01;32:ln=36:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
    zstyle ':completion:*' list-colors 'di=01;32' 'ln=36' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34' menu true select
    ;;
linux)
    setterm -blank 0
    ;;
kterm-color)
    stty erase '^H'
    export LSCOLORS=exfxcxdxbxegedabagacad
    export LS_COLORS='di=01;32:ln=36:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
    zstyle ':completion:*' list-colors 'di=01;32' 'ln=36' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34'
    ;;
kterm)
    stty erase '^H'
    ;;
cons25)
    unset LANG
    export LSCOLORS=ExFxCxdxBxegedabagacad
    export LS_COLORS='di=01;32:ln=01;36:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
    zstyle ':completion:*' list-colors 'di=;32;1' 'ln=;36;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'
    ;;
jfbterm-color)
    export LSCOLORS=ExFxCxdxBxegedabagacad
    export LS_COLORS='di=01;32:ln=01;36:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
    zstyle ':completion:*' list-colors 'di=;32;1' 'ln=;36;1' 'so=;32;1' 'ex=31;nn1' 'bd=46;34' 'cd=43;34'
    ;;
linux)
    setterm -blank -powersave off
    ;;
esac

# readonly LSCOLORS
# readonly LS_COLORS


## For Tramp
#
if [ "$TERM" = "dumb" ] ; then
unsetopt zle
unsetopt prompt_cr
unsetopt prompt_subst
unfunction precmd # these two are not
unfunction preexec # working for me
PS1='$ '
fi


# ======================== ALIAS ========================
## Expand aliases before completing
#
setopt complete_aliases     # aliased ls needs if file/dir completions work

## systemd
#
alias sysd="systemd"
alias systemctl="systemctl --no-pager"
alias sysc="systemctl"
compdef sysc=systemctl
alias syc="systemctl"
compdef syc=systemctl
alias syc="systemctl"
compdef syc=systemctl
alias sysda="systemd-analyze"
compdef sysda=systemd-analyze


## Alias ls
#
alias ls=" ls --color"
alias la=" ls -a"
compdef la=ls
alias lf=" ls -F"
compdef lf=ls
alias ll=" ls -lh"
compdef ll=ls
alias lla=" ls -lah"
compdef lla=ls
alias lal=" ls -lah"
compdef lal=ls
alias lsa=" ls -lah"
compdef lsa=ls
alias sl=" ls"
compdef sl=ls
alias lls=" ls"
compdef lls=ls

## Alias lang
#
alias ljp="export LANG=ja_JP.UTF-8"
alias lc="export LANG=C"

## Apt-get Aptitude
##
alias aptso="apt-get source"
alias aptsr="aptitude search"
compdef aptsr=aptitude
alias aptsh="apt-cache show"
compdef aptsh=apt
alias apti="aptitude"
compdef apti=aptitude
alias aptin="aptitude install"
compdef aptin=aptitude
alias aptr="aptitude purge"
alias apta="aptitude autoremove --purge"

## Alias utils
#
alias         du="du -h"
alias         df="df -h"
alias         pg="ps -A | grep"
alias         xm=" xmodmap ~/.zsh/.Xmodmap"

## Alias move directory
#
alias         pp=" popd"
alias        ppp=" popd && popd"
alias       pppp=" popd && popd && popd"
alias         ..=" .."
alias        ...=" ../.."
alias       ....=" ../../.."
alias      .....=" ../../../.."
alias       cd..=" cd .."
alias      cd...=" cd ../../"
alias     cd....=" cd ../../../"
alias    cd.....=" cd ../../../../"
alias         ,,=" popd"
alias        ,,,=" popd && popd"
alias       ,,,,=" popd && popd && popd"

# Global alias
alias -g      NN="> /dev/null"
alias -g      LL="| less"
alias -g      MM="| more"
alias -g      GG="| grep"
alias -g      HH="| head"
alias -g      TT="| tail"
alias -g      CU="| cut"
alias -g      UU="| uniq"
alias -g      RR="| tr"
alias -g      SS="| sort"
# Global Directory
alias -g    work="~/work"
alias -g    junk="~/.emacs.d/var_e/junk/"
alias -g   mydoc="/data/mydoc"
alias -g     emd="~/.emacs.d"
alias -g ebackup="~/.emacs.d/etc/ebackup"
alias -g     dev="~/dev/"
alias -g      WW="~/work/"
alias -g      JJ="/tmp/junk/"
alias -g      EE="~/.emacs.d/"
alias -g      DD="~/dev/"
alias -g      ZZ="~/.zsh/"
alias -g      BB="~/.emacs.d/ebackups/"
alias -g      TM="/tmp/"

## Alias edit
#
alias         em="emacsclient -a emacs"
alias         en="emacsclient -c -n"
alias      emacs="emacs --reverse-video"

## Alias other
alias       hisg="history -i 1 | grep"
alias      hgrep="history -i 1 | grep"
alias    hisgrep="history -i 1 | grep"
alias        his="history -i"
alias         cl=" clear"
alias         px="proxychains "
alias         he="head"
alias       dirs=" dirs -v -l"
alias      sedit="sudoedit"
alias         py="python"
alias   whoistld="whois -h whois.iana.org"
alias bytecompile="emacs -Q -batch -f batch-byte-compile"
alias         sx="startx"

# Suffix Aliases
alias -s     png=eog
alias -s     jpg=eog

## Alias each host
#
case "${HOST}" in
ki | pa*)
	alias lz=" ls -Z"
	;;
esac

## Emacs mini
#
alias emn='emacs -l "~/.emacs.d/base.el" -Q "$@"'

# ====================== FUNCTION =======================
## Backup original file to ".orig"
#
function orig {
    sourcefname="$1"
    origfname=".$1.orig"

    if [ -n "$sourcefname" ] ; then
	if [ -O "$sourcefname" ] ; then
	    cp -p $sourcefname $origfname
	else
	    sudo cp -p $sourcefname $origfname
	fi
    fi

    if [ -e $origfname ]; then
	echo "backup original: "$sourcefname "=>" $origfname
    else
	echo "error"
    fi
}

## Backup file
#
function back {
    sourcefname="$1"
    datestr=$(/bin/date +%Y%m%d%H%M%S)
    backupfname=".$1.$datestr"

    if [ -n "$sourcefname" ] ; then
	if [ -O "$sourcefname" ] ; then
	    cp -p $sourcefname $backupfname
	else
	    sudo cp -p $sourcefname $backupfname
	fi
    fi

    if [ -e $backupfname ] ; then
	echo "backup: "$sourcefname "=>" $backupfname
    else
	echo "error"
    fi
}


## Rsync
#
function dotsync {
    if [  -n "$1"  ] ; then
	rsync -av -r -e "ssh -p 12316 -i /kagi/kagi" --files-from=.dotsync ~/ $1:~/
    fi
}


####                       ####
##           TEST            ##
####                       ####
#tes
_cache_hosts=(localhost $HOST ki ni ro home 192.168.1.1 192.168.1.123 192.168.1.129 192.168.1.100 192.168.1.122 219.62.120.21
)

function dia2codepy {
	  if [ -n "$1" ] ; then
        /usr/bin/dia2code -t python $1
    fi
}

## Predict
#
# autoload predict-on
# predict-on

## search pakage
#
# type cat
# /bin/cat
# dpkg -S /bin/cat
function dpkgs {
    searchbin=$1
    binpath=`type $searchbin | cut -d" " -f3`
    dpkg -S $binpath
}

# Extract archives
ext () {
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xjf $1        ;;
             *.tar.gz)    tar xzf $1     ;;
             *.bz2)       bunzip2 $1       ;;
             *.rar)       rar x $1     ;;
             *.gz)        gunzip $1     ;;
             *.tar)       tar xf $1        ;;
             *.tbz2)      tar xjf $1      ;;
             *.tgz)       tar xzf $1       ;;
             *.zip)       unzip $1     ;;
             *.Z)         uncompress $1  ;;
             *.7z)        7z x $1    ;;
             *)           echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

## add colors to processes for kill completion
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'

zstyle ':completion:*:*:kill:*:processes' command 'ps --forest -A -o pid,user,cmd'
zstyle ':completion:*:processes-names' command 'ps axho command'

zstyle ':completion:*:*:killall:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:*:killall:*:processes' command 'ps --forest -A -o pid,user,cmd'



# source ${ZDOTDIR}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh



## Whatismyip
#
function whatismyip(){
if ! ping -W 5 -c 1 8.8.8.8 > /dev/null 2>&1 ; then
    printf "Network is unreachable\n"
    printf "[ifconfig]\n"
    ifconfig
    return 1
fi

local URL1="ifconfig.me"
local URL2="ip.appspot.com"
if curl="$(type -p curl | cut -d" " -f3)" ; then
    # ifconfig.me/ip
    local _globalip=$($curl $URL1/ip 2> /dev/null)
    local _hostname=$($curl $URL1/host 2> /dev/null)

    if [ -z $_globalip ] || [ -z $_hostname ] ; then
	# ip.appspot.com
	local _globalip=$($curl $URL2 2> /dev/null )
	local _hostname=$(nslookup $_globalip | grep "name" | cut -d" " -f3 | sed 's/\.$//g')
    fi

    if [ ! -z $_globalip ] && [ ! -z $_hostname ] ; then
	printf "WAN:$_globalip\n"
	printf "NAME:$_hostname\n"
	return 0
    else
	printf "Error: Check code\n"
	return 1
    fi
fi
}
