#    -*- mode: org -*-


Archived entries from file /root/.emacs.d/allinone.org


* DONE [#C] types yasnippet
   CLOSED: [2013-09-19 Thu 13:18]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:36
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Bug:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)

2) 対応方法

3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf. [[file:~/.pylib/apropos/__init__.py::"""]]

* DONE [#C] yasnippet python builtin
   CLOSED: [2013-09-19 Thu 13:16]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:37
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Bug:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)

2) 対応方法

3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf. [[file:~/.pylib/apropos/__init__.py]]

* DONE [#C] python first opend buffer not exists ac-source-jedi-direct on ac-sources
   CLOSED: [2013-09-15 Sun 06:03]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:37
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Bug:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)

2) 対応方法

3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf.

* DONE [#C] minimap remove
   CLOSED: [2013-09-15 Sun 06:03]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:37
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Bug:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)

2) 対応方法

3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf. [[file:~/.emacs.d/elisp/plugin/javascript.elc]]

* DONE [#C] e2wm initialize window at save
   CLOSED: [2013-11-24 Sun 07:35]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:37
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Bug:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)

2) 対応方法

3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf.

* DONE [#B] make apropos.py
   CLOSED: [2013-09-19 Thu 04:04]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:37
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Stack:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)
   apropos command is nothing in python
   we have only "pydoc -k"
   not support color

2) 対応方法
   pydoc -k
   elisp apropos

3) 優先順位の根拠
   useable

4) 備考

5) 結果
6) time/ref
    / cf. [[file:~/.emacs.d/allinone.org::*Search%20Document][Search Document]]

* DONE [#C] todo comment を挿入する elisp を作成
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

# TODO (atami): coding elisp for python

    [[file:~/allinone.org::*Rules][Rules]]
    <2012-12-28 Fri>

* DONE [#C] create auto update usb script
  CLOSED: [2013-01-16 00:37]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:
  esky などを参考にし自動で usb 内のソフトを update する
   script を書く

   [[file:~/mydoc/memo/memo.org::*python][python:]]
   <2013-01-04 Fri>

* DONE [#C] UpHander を書き直し
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:
updater/ 以下の file に継承させる。

    [[file:l:/Lib/.pylib/update_usb/update_usb.py::return%20os.path.join(path,%20'*')][file:l:/Lib/.pylib/update_usb/update_usb.py::return os.path.join(path, '*')]]

* DONE [#C] auto generate __all__
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1. insert __all__
   narrow region first (class|def) or whole buffer
   goto max
   search backward


2. check exist __all__ statment.
   if exists __all__ return point
   if not insert __all__ text

3. get __all__ list



4. functions get insert location
   - check exists __all__ in buffer
     if not exists __all__ insert __all__ and return point





    [[file:l:/Lib/.pylib/]]

* DONE [#C] class def 文で self 書き忘れ
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

   [[file:l:/Office/emacs/.emacs.d/allinone.org::*python%20%5B13/223%5D][python {13/223}]]

* DONE [#C] newline indent
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)

2) 対応方法

3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf. [[file:p:/Lib/.pylib/portable/update_usb.py]]

* DONE [#C] py--determine-__all__-point で import 文がないと nil を返してしまう
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)


2) 対応方法

3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf. [[file:p:/Office/emacs/.emacs.d/elisp/mylisp/python-extensions.el::(py--insert-__all__%20(reverse%20all))))][file:p:/Office/emacs/.emacs.d/elisp/mylisp/python-extensions.el::(py--insert-__all__ (reverse all))))]]

* DONE [#C] usb 環境変数 構築
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

   [[file:/pentest/exploits/set/set::reload%20src%20core%20set][file:/pentest/exploits/set/set::reload src core set]]
   <2013-01-04 Fri>

* DONE [#C] python で monthly script を書く
  CLOSED: [2013-03-02 06:21]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

   [[file:/pentest/exploits/set/set::reload%20src%20core%20set][file:/pentest/exploits/set/set::reload src core set]]
   <2013-01-04 Fri>

* DONE [#C] determin import
  CLOSED: [2013-03-02 06:23]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

   [[file:p:/Office/emacs/.emacs.d/elisp/start.d/test_start.el]]

* DONE [#C] create backup script
  CLOSED: [2013-09-02 Mon 06:28]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:
   ki server に upload する backup script を書く

   [[file:~/mydoc/memo/memo.org::*python][python:]]
   <2013-01-04 Fri>

* DONE [#C] snippet class 先頭文字のみ大文字になってしまっている
   CLOSED: [2013-09-03 Tue 14:34]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)

2) 対応方法
   snippet の関数を編集

3) 優先順位の根拠
   余計な手間になっている

4) 備考

5) 結果
6) time/ref
    / cf. [[file:d:/MYTEMP/PyMOTW/wxpython/frame_calc.py::class%20CalcButtonPanel(wx.Panel):][file:d:/MYTEMP/PyMOTW/wxpython/frame_calc.py::class CalcButtonPanel(wx.Panel):]]

* DONE [#C] google bookmark iterator
   CLOSED: [2013-09-06 Fri 15:07]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)

2) 対応方法

3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf. [[file:~/.pylib/daily.py::webpage()]]

* DONE [#B] python interpreter log
   CLOSED: [2013-09-06 Fri 15:27]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)
   log をして永続的にコードを参照できるようにする

2) 対応方法
   ipython startup directory
   %logstart ipython-log.py append

3) 優先順位の根拠
   重要

4) 備考

5) 結果
6) time/ref
    / cf. [[file:p:/Office/emacs/.ipython/profile_default/startup/20-ipython-log.py]]

* DONE [#C] 祝日判定 library 作成
   CLOSED: [2013-11-08 Fri 10:11]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)
   japan holiday が pip にない

2) 対応方法
   c なり他の言語からアルゴリズムを参考にする。

3) 優先順位の根拠


4) 備考

5) 結果
6) time/ref
    / cf.

* DONE [#C] pip install -r pip_ni.txt on king server
   CLOSED: [2013-09-19 Thu 13:12]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)

2) 対応方法

3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf.

* DONE [#C] narrow to regon
   CLOSED: [2013-11-17 Sun 23:16]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:
class def if while

* DONE [#C] import this
   CLOSED: [2013-11-17 Sun 23:15]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)

2) 対応方法

3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf.

    きたないのよりきれいな方がいい

    ごちゃごちゃ難しいのより、白黒はっきりしてるのがいい

    めんどうなのよりかんたんな方がいい

    けど、訳分かんなくなるくらいならめんどうな方がまし

    ネストさせなくていいならしない方がいい

    たくさん詰め込んだのよりスカスカな方がいい

    読みやすさがたいせつなのよ

    特別なこともあるけど掟破りってほどじゃない

    実用性を求めてくと、ちょっとはずれちゃうこともあるけどね

    わざとそうしてるんじゃない限り

    エラーをだまって通すようなことがあっちゃいけません

    あいまいなことをてきとーに処理しちゃいけません

    間違えようのないやり方がひとつだけあるのがいいね

    オランダ人以外には、ちょっと分かりにくかったりしてもね

    やらないよりは今やるべき

    けど今「すぐ」やるならやんない方がいいこともある

    作るものをうまく説明できないようならそれはボツ

    うまく説明できたらたぶんそれがグッド

    ぶらぼーなアイディア名前空間、やっぱこれですね

* DONE [#C] create ChromeBMParse open folder function
   CLOSED: [2013-11-17 Sun 23:34]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)

2) 対応方法

3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf.

* DONE [#B] Help umemo に example を記載し参照出来るようにする。
  CLOSED: [2013-11-17 Sun 23:35]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

   [[file:l:/Office/emacs/.emacs.d/allinone.org::*Runtime%20Features][Runtime Features]]
   <2013-01-19>

* DONE [#B] = operater の入力を smart にする
   CLOSED: [2013-11-17 Sun 23:36]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: python:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)
   関数の引数入力で= を入力時に空白は混ざる。

2) 対応方法
   関数を編集

3) 優先順位の根拠
   余計な手間がなくなる

4) 備考

5) 結果
6) time/ref
    / cf. [[file:d:/MYTEMP/PyMOTW/wxpython/frame_calc.py]]

* DONE
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Emacs:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:
** DONE [#B] snippet mode で return char を表示する

*** 結果
- whitespace.el
  (whitespace-newline-mode)
*** 背景 (問題点)
    yasnippet で 展開したときに return char も展開されて改行
    されてしまう。
*** 対応方法
    whitespace-mode
*** 優先順位の根拠
    ミスが発生する前に
*** 備考
*** time/ref
<2012-11-07 Wed> / cf. [[file:~/.emacs.d/etc/template/snippets/emacs-lisp-mode/global-set-key.yasnippet::name%20global%20set%20key][file:~/.emacs.d/etc/template/snippets/emacs-lisp-mode/global-set-key.yasnippet::name global set key]]
** DONE window move or Split
   window move if not exist window split

   (defun windmove-down-or-split (&optional arg)
   (interactive "P")
   (let ((other-window (windmove-find-other-window 'down)))
   (cond ((null other-window)
   (split-window-vertically))
   (t
   (select-window other-window)))))

   split-window-vertically

   window.el
   windmove.el

   以下を.emacs に追加すると， C-x 2 で上下 2 つに分けた状態と C-x 3 で左右 2 つに分けた状態を M-x
   window-toggle-division で切り替えることができます．

   (defun window-toggle-division ()
   "ウィンドウ 2 分割時に、縦分割<->横分割"
   (interactive)
   (unless (= (count-windows 1) 2)
   (error "ウィンドウが 2 分割されていません。"))
   (let (before-height (other-buf (window-buffer (next-window))))
   (setq before-height (window-height))
   (delete-other-windows)

   (if (= (window-height) before-height)
   (split-window-vertically)
   (split-window-horizontally)
   )

   (switch-to-buffer-other-window other-buf)
   (other-window -1)))


   (setq windmove-wrap-around t)
   [[file:~/.emacs.d/init/mode/org_mode_init.el::setq%20org%20default%20notes%20file%20expand%20file%20name%20memo%20org%20org%20directory][file:~/.emacs.d/init/mode/org_mode_init.el::setq org default notes file expand file name memo org org directory]]
   <2012-09-04 Tue>
** DONE memo.org
   view-mode で開かないようにする。
   (with-current-buffer "hello" (linum-on))
   (let ((buffer (get-buffer-create "hello3")))
   (with-current-buffer buffer
   (view-mode-disable)))


   - solved by this
     (define-key org-remember-mode-map "\C-c\C-c"
     '(lambda () (interactive) (let ((inhibit-read-only t)) (org-remember-finalize))))


     <2011-09-28 Wed>
** DONE \M-h \M-- の挙動の調整
   スペースを含まないようにする

   [[file:~/.emacs.d/elisp/color-theme-6.6.0/themes/color-theme-other.el::defun%20color%20theme%20renegade%20orig%20name%20color%20theme%20renegade][file:~/.emacs.d/elisp/color-theme-6.6.0/themes/color-theme-other.el::defun color theme renegade orig name color theme renegade]]
   <2012-09-24 Mon>

** DONE backup
   現在の ~/.emacs.d/ebackup/ のものを version 管理できるようにする。
   3version まで保存。


   [[file:~/.emacs.d/ebackup/.svn]]
   <2011-09-17 Sat>
** DONE command
   indent-region

   [[file:~/.emacs.d/init/mode_init.el::define%20key%20Info%20mode%20map%20N%20Info%20next][file:~/.emacs.d/init/mode_init.el::define key Info mode map N Info next]]
   <2011-09-17 Sat>
** DONE sdic view-mode
   sdic 後に view-mode を抜けないようにする。

   [[file:/data/mydoc/memo/memo.org]]
   <2011-10-05 Wed>
** DONE scratch to scrap
   scratch で書いた物を残すようにする。
   設計必要
   [[file:~/.emacs.d/init/mode/90_emacs_lisp_mode_init.el::erase%20buffer][file:~/.emacs.d/init/mode/90_emacs_lisp_mode_init.el::erase buffer]]
   <2012-10-16 Tue>
** DONE auto-insert
*** DONE 新規作成時にテンプレを選択できるようにする。
*** DONE 新規作成時に view-mode にならないようにする。


    <2011-09-24 Sat>
** DONE 短形
   C-x r c	clear-rectangle	矩形領域を空白文字に置き換える
   C-x r d	delete-rectangle	矩形領域を削除する
   C-x r o	open-rectangle	空白文字で埋まった矩形領域を挿入する
   C-x r t	string-rectangle	矩形領域を文字列で置き換える
   C-x r k	kill-rectangle	矩形領域を削除してキルリングに追加
   C-x r y	yank-rectangle	キルリングの矩形領域を貼り付ける
   C-x r r	copy-rectangle-to-register	レジスターに矩形領域を登録する
   C-x r i	insert-register	レジスターに登録された矩形領域を貼り付ける

   リージョン選択中に C-<enter> で矩形選択モードになります。 sense-region と同様に C-w や M-w が使えます
   。また、矩形選択中に次のコマンドを打つと、矩形領域に対して操作を行うことができます。

   コマンド                                    動作
   適当なキー 矩形領域の前（または後ろ）にそのまま挿入。 <enter> で挿入位置を変えられる
   M-p        矩形の幅を固定
   M-b        空白文字で埋める。 open-rectangle と同等
   M-s        文字列で置き換える。 string-rectangle と同等
   M-f        1 種類の文字で埋める。 string-rectangle で 1 文字指定したときと同等
   M-i        矩形領域内の数字をインクリメントする
   M-n        矩形領域を連番で埋める。フォーマット指定可

   [[http://tech.kayac.com/archive/divide-dot-emacs.html][.emacs 分割のすゝめ | tech.kayac.com - KAYAC engineers' blog]]
   <2012-09-10 Mon>
** DONE ac-comphist.dat
   change location to ~/.emacs.d/data/


   <2012-09-15 Sat>
** DONE timestamp
   timestamp を auto-complete などでいくつかの format から選択できるようにする。
   [[file:/tmp/junk/2012-09-19-122651.junk.el]]
   <2012-09-19 Wed>
** DONE 書き間違い default => default

   [[file:/tmp/tes.el::setq%20pending%20nconc%20pending%20list%20expand%20file%20name%20file][file:/tmp/tes.el::setq pending nconc pending list expand file name file]]
   <2012-10-23 Tue>
** DONE message の保存上限を上げる

   [[file:~/.emacs.d/base.el::concat%20buffer%20name][file:~/.emacs.d/base.el::concat buffer name]]
   <2012-09-21 Fri>
** DONE [#A] paste したものを自動 indent

*** 背景 (問題点)
"C-v" で paste したら indent がコピーしたものの状態になっている
ため indent しなおさなければならないので手間である
*** 対応方法
- indent-region
- cua
*** 優先順位の根拠
よく使うので
*** 備考
*** time/ref
<2012-11-05 Mon> / cf. [[file:~/mydoc/memo/memo.org::*C%20C][C C++:]]
** DONE dired refresh list command

   [[file:~/.emacs.d/base.el]]
   <2012-09-21 Fri>
** DONE [#B] ; で auto-complete 開始

*** 背景 (問題点)
    ; 入力しても auto-complete が開始されない
*** 対応方法
    auto-complete のソースを読む
*** 優先順位の根拠
    ;;;###autoload の入力を auto-complete でしたいので
*** 備考
*** time/ref
<2012-11-06 Tue> / cf. [[file:~/mydoc/memo/memo.org::*yasnippet][yasnippet]]
** DONE keybind
   - count-lines-region
   - what-cursor-position
** DONE [#B] do not auto recover junk file

1) 結果
   auto-recover-exclude-re で regexp に match した file を除く

2) 背景(問題点)
   junk file が起動時の auto recover で open されてしまう。

3) 対応方法
   起動時に'.junk.'の含まれる file 名を exclude する

4) 優先順位の根拠
   起動時の高速化が見込まれる。

5) 備考
6) time/ref
    / cf. [[file:p:/Lib/.pylib/portable/update_usb.py::choose_update()]]
** DONE [#C] stack todo

1) 結果
   added this buffer
2) 背景(問題点)
   作業中に別の task に着手すると前の作業を忘れてしまうので
   todo を stack できるようにする。
3) 対応方法
   org-remember を使う
4) 優先順位の根拠
   緊急性はない
5) 備考
6) time/ref
    / cf. [[file:p:/Office/emacs/.emacs.d/elisp/plugin/e2wm.el::(defun%20e2wm:pst-window-select-main-command%20()][file:p:/Office/emacs/.emacs.d/elisp/plugin/e2wm.el::(defun e2wm:pst-window-select-main-command ()]]
** DONE anything の list 軽減の為 game (play) の関数などを読み込まないようにする。
   autoload のリストを削除。


   <2012-10-22 Mon>
** DONE anything-moccur の popwin の挙動を調整

   [[file:~/.emacs.d/init/plugin/20_anything_plugin_init.el::anything%20c%20adaptive%20history%20file%20expand%20file%20name%20emacs%20d%20data%20anything%20c%20adaptive%20history][file:~/.emacs.d/init/plugin/20_anything_plugin_init.el::anything c adaptive history file expand file name emacs d data anything c adaptive history]]
   <2012-09-21 Fri>
** DONE auto-save revision

   [[info:emacs:Entering%20Emacs][info:emacs:Entering Emacs]]
   <2012-09-12 Wed>
** DONE yasnippet option parser
   CLOSED: [2013-03-02 06:04]
   action = "store_true"
   などを対応させた入れ子の snippet を書く

   (defun yas/choose-value2 (possibilities)
   "Prompt for a string in the list POSSIBILITIES and return it."
   (unless (or yas/moving-away-p
   yas/modified-p)
   (some #'(lambda (fn)
   (funcall fn "Choose: " (list (funcall (lambda (fnn)
   (funcall fnn "Choose: " possibilities))
   yas/prompt-functions))))
   yas/prompt-functions)))

   (yas/choose-value2 '(yas/choose-value-action default))


   "store_true"



   "action"



   (defun yas/choose-value-action ()
   "Prompt for a string in the list POSSIBILITIES and return it."
   (unless (or yas/moving-away-p
   yas/modified-p)
   (some #'(lambda (fn)
   (funcall fn "Choose: " '("store_true" "store_false")))
   yas/prompt-functions)))

   [[file:~/.emacs.d/elisp/yasnippet/yasnippet.el::defun%20yas%20choose%20value%20possibilities][file:~/.emacs.d/elisp/yasnippet/yasnippet.el::defun yas choose value possibilities]]
   <2012-09-10 Mon>
** DONE windows backup file
   CLOSED: [2013-03-02 06:05]
   make-auto-save-file-name

   [[file:~/.emacs.d/init/subroutines_init.el::For%20Emacs][file:~/.emacs.d/init/subroutines_init.el::For Emacs]]
   <2012-10-19 Fri>
** DONE [#C] setting windows binary
   CLOSED: [2013-03-02 06:19]

1) 結果
2) 背景 (問題点)
   windows での環境を整る
3) 対応方法
   cf. [[http://www.emacswiki.org/emacs/GrepMode][EmacsWiki: Grep Mode]]

4) 優先順位の根拠
5) 備考
6) time/ref
   <2012-12-06 Thu> / cf. [[http://www.emacswiki.org/emacs/GrepMode][EmacsWiki: Grep Mode]]
** DONE [#B] clean backuped files
   CLOSED: [2013-03-02 06:19]

1) 結果
2) 背景(問題点)
   既に存在しない backuped file が大量に残っている。

3) 対応方法
   backup directory 内それぞれの file に、実存しているか確認し
   存在していなければ削除
   midnight などで定期的に実行する。

4) 優先順位の根拠
   逼迫した需要がないもののいずれしなければ容量を圧迫する。
5) 備考
6) time/ref
    / cf. [[file:l:/Office/emacs/.emacs.d/elisp/plugin/auto-complete.el::(make-variable-buffer-local%20'ac-sources)][file:l:/Office/emacs/.emacs.d/elisp/plugin/auto-complete.el::(make-variable-buffer-local 'ac-sources)]]

* DONE [#C] python auto rename built in function like "file" = "file_"
   CLOSED: [2013-11-08 Fri 23:14]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Emacs:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)

2) 対応方法

3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf.

* DONE [#C] hotstring
   CLOSED: [2013-11-08 Fri 23:16]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Emacs:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)

2) 対応方法
   (python . python)
   key hook and append var like this
   "p" input
   p
   "y" input
   py
   "h" input
   pyh
   "ton" input
   pyhton

   match from end by left symbol
   var size is max length of left symbols


3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf. [[file:~/.emacs.d/elisp/mylisp/__python__.el]]

* DONE [#C] C-: C-j iswichb junk files
   CLOSED: [2013-11-17 Sun 23:27]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Emacs:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)

2) 対応方法

3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf. [[file:/tmp/junk/2013-09-30-115833.junk.py::#%20console][file:/tmp/junk/2013-09-30-115833.junk.py::# console]]

* DONE [#C] grep exclude .svn
   CLOSED: [2013-11-17 Sun 23:27]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Emacs:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

1) 背景(問題点)

2) 対応方法

3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf.

* DONE [#C] weekly monthly quarter 統合
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Todo:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

* DONE [#C] linux 差分 backup
  CLOSED: [2013-08-26 Mon 18:08]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Todo:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

* DONE [#A] create python backup script class
  CLOSED: [2013-08-28 Wed 11:09]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Todo:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

* DONE [#A] routines script
   CLOSED: [2013-09-02 Mon 06:39]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Todo:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:
- chrome bookmark
- send mail

* DONE [#C] weekly link
  CLOSED: [2013-09-01 Sun 02:21]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Todo:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

   [[file:~/.emacs.d/allinone.org::*%5B#A%5D%20routines%20script][routines script]]

* DONE [#C] king server auto halt on cron daily
  CLOSED: [2013-09-02 Mon 06:38]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Todo:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:
  backup
  samba
  login

   [[file:~/.pylib/backup_ki_local.py]]

* DONE [#C] pyStartup make class Data as d
  CLOSED: [2013-09-02 Mon 06:38]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Todo:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

   [[file:~/.pylib/pyStartup.py]]

* DONE [#C] logging by auto script
  CLOSED: [2013-09-06 Fri 13:31]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:38
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Todo:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:

   [[file:~/.pylib/ref/CMD/sikuli.py::def%20sikulirun(path):][file:~/.pylib/ref/CMD/sikuli.py::def sikulirun(path):]]

* DONE keepass
  CLOSED: [2013-09-02 Mon 06:35]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:39
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Note:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:
  マスターパスワードをコピー用紙にとらないようにパスワードの使い方の見直し


  <2011-07-31 Sun>

* DONE zsh prompt
  CLOSED: [2013-09-02 Mon 06:37]
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-11-24 Sun 07:39
  :ARCHIVE_FILE: ~/.emacs.d/allinone.org
  :ARCHIVE_OLPATH: Note:
  :ARCHIVE_CATEGORY: allinone
  :ARCHIVE_TODO: DONE
  :END:
  緊急時に記録用のプロンプトを作成
  例えば alias scripts =  "export prompt= ~~~ && scripts" する。

  user@HOST [time]
  directory #

  root の場合 user を赤にし directory も赤にする。

  [[file:~/.zsh/.zshrc::RPROMPT%20W][file:~/.zsh/.zshrc::RPROMPT W]]
  <2011-08-27 Sat>

* DONE [#C] daily excel to gmail 
   CLOSED: [2013-12-03 Tue 16:41]
   :PROPERTIES:
   :Attachments: allinone.org_archive
   :ID:       f0c1ed74-a38e-4118-8a68-a6711d80f89e
   :ARCHIVE_TIME: 2013-12-03 Tue 16:45
   :ARCHIVE_FILE: ~/.emacs.d/allinone.org
   :ARCHIVE_OLPATH: python:
   :ARCHIVE_CATEGORY: allinone
   :ARCHIVE_TODO: DONE
   :END:

1) 背景(問題点)

2) 対応方法

3) 優先順位の根拠

4) 備考

5) 結果
6) time/ref
    / cf. [[http://lists.gnu.org/archive/html/emacs-devel/][emacs-devel Archives]]
