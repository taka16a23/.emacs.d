
* Sat 01 Mar 2014 12:45:35 AM JST
x
* Sat 01 Mar 2014 12:45:36 AM JST
form x
* Sat 01 Mar 2014 12:45:54 AM JST
Connection
* Sat 01 Mar 2014 12:54:50 AM JST
WM_CLASS
* Sat 01 Mar 2014 12:55:30 AM JST
54525998
* Sat 01 Mar 2014 12:58:28 AM JST
PRIMARY = 1
SECONDARY = 2
ARC = 3
ATOM = 4
BITMAP = 5
CARDINAL = 6
COLORMAP = 7
CURSOR = 8
CUT_BUFFER0 = 9
CUT_BUFFER1 = 10
CUT_BUFFER2 = 11
CUT_BUFFER3 = 12
CUT_BUFFER4 = 13
CUT_BUFFER5 = 14
CUT_BUFFER6 = 15
CUT_BUFFER7 = 16
DRAWABLE = 17
FONT = 18
INTEGER = 19
PIXMAP = 20
POINT = 21
RECTANGLE = 22
RESOURCE_MANAGER = 23
RGB_COLOR_MAP = 24
RGB_BEST_MAP = 25
RGB_BLUE_MAP = 26
RGB_DEFAULT_MAP = 27
RGB_GRAY_MAP = 28
RGB_GREEN_MAP = 29
RGB_RED_MAP = 30
STRING = 31
VISUALID = 32
WINDOW = 33
WM_COMMAND = 34
WM_HINTS = 35
WM_CLIENT_MACHINE = 36
WM_ICON_NAME = 37
WM_ICON_SIZE = 38
WM_NAME = 39
WM_NORMAL_HINTS = 40
WM_SIZE_HINTS = 41
WM_ZOOM_HINTS = 42
MIN_SPACE = 43
NORM_SPACE = 44
MAX_SPACE = 45
END_SPACE = 46
SUPERSCRIPT_X = 47
SUPERSCRIPT_Y = 48
SUBSCRIPT_X = 49
SUBSCRIPT_Y = 50
UNDERLINE_POSITION = 51
UNDERLINE_THICKNESS = 52
STRIKEOUT_ASCENT = 53
STRIKEOUT_DESCENT = 54
ITALIC_ANGLE = 55
X_HEIGHT = 56
QUAD_WIDTH = 57
WEIGHT = 58
POINT_SIZE = 59
RESOLUTION = 60
COPYRIGHT = 61
NOTICE = 62
FONT_NAME = 63
FAMILY_NAME = 64
FULL_NAME = 65
CAP_HEIGHT = 66
WM_CLASS = 67
WM_TRANSIENT_FOR = 68
LAST_PREDEFINED = 68

* Sat 01 Mar 2014 01:00:11 AM JST
WM_CLASS
* Sat 01 Mar 2014 01:02:41 AM JST
WM_ICON_NAME
* Sat 01 Mar 2014 01:03:02 AM JST
WM_ICON_NAME
* Sat 01 Mar 2014 01:03:58 AM JST
WM_TRANSIENT_FOR
* Sat 01 Mar 2014 01:04:09 AM JST
WINDOW
* Sat 01 Mar 2014 01:04:28 AM JST
WM_PROTOCOLS
* Sat 01 Mar 2014 01:04:46 AM JST
ATOM
* Sat 01 Mar 2014 01:05:06 AM JST
'WM_COLORMAP_WINDOWS'
* Sat 01 Mar 2014 01:06:06 AM JST
WM_CLIENT_MACHINE
* Sat 01 Mar 2014 01:06:25 AM JST
WM_NORMAL_HINTS
* Sat 01 Mar 2014 01:06:40 AM JST
WM_SIZE_HINTS
* Sat 01 Mar 2014 01:07:54 AM JST
BUILTIN_ATOMS
* Sat 01 Mar 2014 01:09:39 AM JST
c.ext.property.get_full_property(54525998, '_NET_WM_CLASS')
* Sat 01 Mar 2014 01:09:59 AM JST
from xahk.xconnection import Connection as con
c=con()

* Sat 01 Mar 2014 01:10:04 AM JST
c.ext.property.get_full_property(54525998, '_NET_WM_CLASS')
* Sat 01 Mar 2014 01:17:23 AM JST
WM_CLASS
* Sat 01 Mar 2014 01:17:31 AM JST
54525998
* Sat 01 Mar 2014 01:24:14 AM JST
from xahk.xconnection import Connection as con
c=con()

* Sat 01 Mar 2014 01:24:32 AM JST
54525998
* Sat 01 Mar 2014 01:25:46 AM JST
self.get_full_property(window, 'WM_CLASS')
* Sat 01 Mar 2014 01:25:51 AM JST
self.get_full_property(window, 'WM_CLASS')
* Sat 01 Mar 2014 01:33:33 AM JST
string
* Sat 01 Mar 2014 01:34:37 AM JST
net_
* Sat 01 Mar 2014 04:35:35 AM JST
54525998
* Sat 01 Mar 2014 04:36:53 AM JST
net_wm_window_type
* Sat 01 Mar 2014 04:37:50 AM JST
'_NET_WM_WINDOW_TYPE'
* Sat 01 Mar 2014 04:38:35 AM JST
WINDOW_TYPE
* Sat 01 Mar 2014 04:39:10 AM JST
54525998
* Sat 01 Mar 2014 04:41:48 AM JST

* Sat 01 Mar 2014 04:41:48 AM JST

* Sat 01 Mar 2014 04:41:48 AM JST
81788931

* Sat 01 Mar 2014 04:41:51 AM JST
54525998

from xahk.xconnection import Connection as con
c=con()
c.ext.property.get_full_property(54525998, '_NET_WM_CLASS')

* Sat 01 Mar 2014 04:52:26 AM JST
83886083
* Sat 01 Mar 2014 04:52:35 AM JST
83886083
* Sat 01 Mar 2014 04:54:27 AM JST
    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        return list(unpack('I' * self._reply.reply.value_len,
                           self._reply.reply.value.buf()))

* Sat 01 Mar 2014 04:59:34 AM JST
self
                    ._reply
                    .requester
* Sat 01 Mar 2014 04:59:43 AM JST
                    
* Sat 01 Mar 2014 04:59:47 AM JST
                    
* Sat 01 Mar 2014 05:01:58 AM JST
self._reply.requester.display
* Sat 01 Mar 2014 05:02:45 AM JST
atom
* Sat 01 Mar 2014 05:03:08 AM JST
list(unpack('I' * self._reply.reply.value_len,
                           self._reply.reply.value.buf()))
* Sat 01 Mar 2014 05:04:08 AM JST
83886083
* Sat 01 Mar 2014 05:04:30 AM JST
c.ext.property.net_wm_window_type(83886083)
* Sat 01 Mar 2014 05:04:42 AM JST
from xahk.xconnection import Connection as con
c=con()

* Sat 01 Mar 2014 05:04:46 AM JST
c.ext.property.net_wm_window_type(83886083)
* Sat 01 Mar 2014 05:10:11 AM JST
'_NET_WM_DESKTOP'
* Sat 01 Mar 2014 05:12:38 AM JST
482
* Sat 01 Mar 2014 05:21:21 AM JST
83886083
* Sat 01 Mar 2014 05:22:12 AM JST
83886083
* Sat 01 Mar 2014 05:23:10 AM JST
83886083
* Sat 01 Mar 2014 05:24:07 AM JST
83886083
* Sat 01 Mar 2014 05:24:16 AM JST
net_wm_user_tim
* Sat 01 Mar 2014 05:24:25 AM JST
482
* Sat 01 Mar 2014 05:24:30 AM JST
83886083
* Sat 01 Mar 2014 05:25:52 AM JST
net_frame_extents
* Sat 01 Mar 2014 05:26:04 AM JST
83886083
* Sat 01 Mar 2014 05:32:22 AM JST
482
* Sat 01 Mar 2014 05:32:24 AM JST
83886083
* Sat 01 Mar 2014 05:33:19 AM JST
net_supported
* Sat 01 Mar 2014 05:33:26 AM JST
83886083
* Sat 01 Mar 2014 05:34:54 AM JST
83886083
* Sat 01 Mar 2014 05:36:21 AM JST
root
* Sat 01 Mar 2014 05:38:19 AM JST
net_desktop_geometory
* Sat 01 Mar 2014 05:38:27 AM JST
comix
* Sat 01 Mar 2014 05:38:43 AM JST
desktop_geometory
* Sat 01 Mar 2014 05:39:27 AM JST
root
* Sat 01 Mar 2014 05:40:24 AM JST
net_current_desktop
* Sat 01 Mar 2014 05:40:31 AM JST
comix
* Sat 01 Mar 2014 05:41:27 AM JST
net_desktop_name
* Sat 01 Mar 2014 05:43:51 AM JST
comix,
* Sat 01 Mar 2014 05:44:10 AM JST
core.
* Sat 01 Mar 2014 05:44:29 AM JST
'_NET_DESKTOP_NAMES'
* Sat 01 Mar 2014 05:44:55 AM JST
UTF8_STRING[]
* Sat 01 Mar 2014 05:46:30 AM JST
comix
* Sat 01 Mar 2014 05:46:46 AM JST
root
* Sat 01 Mar 2014 05:48:52 AM JST
virtual_roots
* Sat 01 Mar 2014 05:49:17 AM JST
net_supporting_wm_check
* Sat 01 Mar 2014 05:49:25 AM JST
comix
* Sat 01 Mar 2014 05:49:36 AM JST
supporting_wm_check
* Sat 01 Mar 2014 05:50:13 AM JST
net_desktop_layout
* Sat 01 Mar 2014 05:50:23 AM JST
root
* Sat 01 Mar 2014 05:51:06 AM JST
net_showing_desktop
* Sat 01 Mar 2014 05:51:16 AM JST
comix
* Sat 01 Mar 2014 05:51:21 AM JST
showing_desktop
* Sat 01 Mar 2014 06:08:30 AM JST
comix
* Sat 01 Mar 2014 06:10:28 AM JST
WM_HINTS
* Sat 01 Mar 2014 06:18:20 AM JST
core.KillClient
* Sat 01 Mar 2014 03:10:09 PM JST
sbp.check_call(('/bin/sh', '/root/.zsh/scripts/chromeroot'))
* Sat 01 Mar 2014 04:15:48 PM JST

* Sat 01 Mar 2014 04:15:48 PM JST

* Sat 01 Mar 2014 04:15:54 PM JST
    # execfile('/root/.pylib/backup_ni_remote.py')

* Sat 01 Mar 2014 04:16:28 PM JST

* Sat 01 Mar 2014 04:16:28 PM JST

* Sat 01 Mar 2014 04:16:28 PM JST
    # execfile('/root/.pylib/backup_ni_remote.py')

* Sat 01 Mar 2014 05:04:21 PM JST
get_supported
get_client_list
get_client_list_stacking
get_number_of_desktop
get_desktop_geometory
get_desktop_viewport
get_current_desktop
get_desktop_name
get_active_window
get_workarea
get_virtual_roots
get_supporting_wm_check
get_desktop_layout
get_showing_desktop
* Sat 01 Mar 2014 05:05:16 PM JST
482
* Sat 01 Mar 2014 05:06:18 PM JST
from xahk.xconnection import Connection as con
* Sat 01 Mar 2014 05:08:36 PM JST
net_desktop_layout
* Sat 01 Mar 2014 05:09:00 PM JST
net_current_desktop
* Sat 01 Mar 2014 05:17:40 PM JST
get_desktop_num
get_states
get_allowed_actions
get_frame_extents
get_icon
get_pid
get_name
get_class
move
close
kill
* Sat 01 Mar 2014 05:18:16 PM JST
move
close
kill
get_name
get_class
get_pid
get_states
get_desktop_num
get_allowed_actions
get_frame_extents
get_icon
* Sat 01 Mar 2014 05:19:07 PM JST
get_supported
get_client_list
get_client_list_stacking
get_number_of_desktop
get_desktop_geometory
get_desktop_viewport
get_current_desktop
get_desktop_name
get_active_window
get_workarea
get_virtual_roots
get_supporting_wm_check
get_desktop_layout
get_showing_desktop
* Sat 01 Mar 2014 05:21:46 PM JST
desktop_
* Sat 01 Mar 2014 05:21:46 PM JST
net_desktop_
* Sat 01 Mar 2014 05:22:18 PM JST
geometory
* Sat 01 Mar 2014 05:33:05 PM JST
pass
* Sat 01 Mar 2014 05:34:41 PM JST
DisplayName
* Sat 01 Mar 2014 05:36:49 PM JST
@staticmethod
* Sat 01 Mar 2014 05:38:07 PM JST

* Sat 01 Mar 2014 05:38:07 PM JST

* Sat 01 Mar 2014 05:38:07 PM JST
        self.connection = Connection.get_instance(display=self.display)

* Sat 01 Mar 2014 05:38:09 PM JST

* Sat 01 Mar 2014 05:38:09 PM JST

* Sat 01 Mar 2014 05:38:10 PM JST
        self.connection = Connection.get_instance(display=self.display)

* Sat 01 Mar 2014 05:40:12 PM JST
.property.net_wm_window_type(self.window)
* Sat 01 Mar 2014 05:40:59 PM JST
self, 
* Sat 01 Mar 2014 05:41:19 PM JST
ext = CON.get_ext(display=self.display)
* Sat 01 Mar 2014 05:41:57 PM JST
        ext = CON.get_ext(display=self.display)
        return ext.geo.get_geometry(self.window)

* Sat 01 Mar 2014 05:42:06 PM JST
        ext = CON.get_ext(display=self.display)
        return ext.geo.get_geometry(self.window).x

* Sat 01 Mar 2014 05:42:25 PM JST
        ext = CON.get_ext(display=self.display)
        return ext.geo.get_geometry(self.window).y
        

* Sat 01 Mar 2014 05:42:41 PM JST
        ext = CON.get_ext(display=self.display)
        return ext.geo.get_geometry(self.window).height

* Sat 01 Mar 2014 05:42:44 PM JST
height
* Sat 01 Mar 2014 05:44:01 PM JST
get_connection
* Sat 01 Mar 2014 05:45:32 PM JST
ex
* Sat 01 Mar 2014 05:45:33 PM JST
connection.ex
* Sat 01 Mar 2014 05:45:33 PM JST
self.connection.ex
* Sat 01 Mar 2014 05:46:09 PM JST
ext
* Sat 01 Mar 2014 05:46:16 PM JST

* Sat 01 Mar 2014 05:46:16 PM JST

* Sat 01 Mar 2014 05:46:16 PM JST
        ext = CON.get_ext(display=self.display)

* Sat 01 Mar 2014 05:46:21 PM JST
self.extensions
* Sat 01 Mar 2014 05:46:26 PM JST

* Sat 01 Mar 2014 05:46:26 PM JST

* Sat 01 Mar 2014 05:46:26 PM JST
        ext = CON.get_ext(display=self.display)

* Sat 01 Mar 2014 05:46:36 PM JST
self.extensions
* Sat 01 Mar 2014 05:46:41 PM JST

* Sat 01 Mar 2014 05:46:41 PM JST

* Sat 01 Mar 2014 05:46:41 PM JST
        ext = CON.get_ext(display=self.display)

* Sat 01 Mar 2014 05:46:49 PM JST
self.extensions
* Sat 01 Mar 2014 05:46:57 PM JST

* Sat 01 Mar 2014 05:46:57 PM JST

* Sat 01 Mar 2014 05:46:57 PM JST
        ext = CON.get_ext(display=self.display)

* Sat 01 Mar 2014 05:46:59 PM JST

* Sat 01 Mar 2014 05:46:59 PM JST

* Sat 01 Mar 2014 05:46:59 PM JST
        ext = CON.get_ext(display=self.display)

* Sat 01 Mar 2014 05:47:46 PM JST
self.extensions.geo.get_geometry(self.window)
* Sat 01 Mar 2014 05:48:10 PM JST
self.get_geometry()
* Sat 01 Mar 2014 05:48:49 PM JST

* Sat 01 Mar 2014 05:48:49 PM JST

* Sat 01 Mar 2014 05:48:49 PM JST


* Sat 01 Mar 2014 05:51:53 PM JST
SendEvent
* Sat 01 Mar 2014 05:52:55 PM JST
QueryTree
* Sat 01 Mar 2014 05:58:49 PM JST
動的
* Sat 01 Mar 2014 06:00:11 PM JST
import 
* Sat 01 Mar 2014 06:13:00 PM JST
net_wm_allowed_actions
* Sat 01 Mar 2014 06:13:18 PM JST
net_frame_extents
* Sat 01 Mar 2014 06:13:40 PM JST
net_wm_icon
* Sat 01 Mar 2014 06:14:15 PM JST
Window
* Sat 01 Mar 2014 06:15:31 PM JST
109051907
* Sat 01 Mar 2014 06:21:55 PM JST
WindowBase
* Sat 01 Mar 2014 06:22:09 PM JST
109051907
* Sat 01 Mar 2014 06:23:34 PM JST
109051907
* Sat 01 Mar 2014 06:40:19 PM JST
'_NET_WM_ACTION_MINIMIZE'
* Sat 01 Mar 2014 06:44:37 PM JST
from xahk.xconnection import Connection as con
* Sat 01 Mar 2014 06:45:21 PM JST
from xahk.xconnection import Connection as con
* Sat 01 Mar 2014 06:45:48 PM JST
109051907
* Sat 01 Mar 2014 06:46:40 PM JST
_NET_WM_ACTION_MINIMIZ
* Sat 01 Mar 2014 06:46:43 PM JST
_NET_WM_ACTION_MINIMIZE
* Sat 01 Mar 2014 06:48:06 PM JST
_NET_WM_ACTION_MINIMIZE
* Sat 01 Mar 2014 09:55:26 PM JST
    @property
    def property(self, ):
        r"""SUMMARY

        property()

        @Return:
        """
        return self.extensions.property


* Sat 01 Mar 2014 09:55:36 PM JST
extensions.
* Sat 01 Mar 2014 09:57:54 PM JST
get_
* Sat 01 Mar 2014 09:58:01 PM JST
get_
* Sat 01 Mar 2014 09:58:04 PM JST
get_
* Sat 01 Mar 2014 09:58:11 PM JST
get_
* Sat 01 Mar 2014 10:00:04 PM JST
get_window_
* Sat 01 Mar 2014 10:08:35 PM JST
deq=
* Sat 01 Mar 2014 10:11:41 PM JST
_discard_by_limit
* Sat 01 Mar 2014 10:15:51 PM JST
item
* Sat 01 Mar 2014 10:27:24 PM JST
po
* Sat 01 Mar 2014 10:27:24 PM JST
stack.po
* Sat 01 Mar 2014 10:33:04 PM JST
from collections import deque


class Stack(object):
    r"""
    """

    def __init__(self, limit=None):
        r"""

        @Arguments:
        - `limit`:
        """
        self._limit = limit
        self.stack = deque()

    def _resize_stack(self, ):
        r"""SUMMARY

        _resize_stack()

        @Return:
        """
        if self._limit is None:
            return
        while self._limit < len(self.stack):
            self.stack.popleft()

    def push(self, item):
        r"""SUMMARY

        push(item)

        @Arguments:
        - `item`:

        @Return:
        """
        self.stack.append(item)
        self._resize_stack()

    def pop(self):
        r"""SUMMARY

        pop(item)

        @Arguments:
        - `item`:

        @Return:
        """
        return self.stack.pop()

    def isempty(self, ):
        r"""SUMMARY

        isempty()

        @Return:
        """
        return len(self.stack) == 0

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:
        """
        self.stack.clear()

    def __iter__(self, ):
        while len(self):
            yield self.pop()
        raise StopIteration()

    def __len__(self, ):
        return len(self.stack)

    def __repr__(self, ):
        fmt = '{0.__class__.__name__}{1}'.format
        return fmt(self, repr(self.stack).split('deque')[1])

* Sat 01 Mar 2014 10:33:29 PM JST

* Sat 01 Mar 2014 10:33:29 PM JST

* Sat 01 Mar 2014 10:33:29 PM JST
from collections import deque

* Sat 01 Mar 2014 10:34:17 PM JST
stack_position = []
* Sat 01 Mar 2014 10:44:29 PM JST
connection.
* Sat 01 Mar 2014 10:51:32 PM JST
width
* Sat 01 Mar 2014 11:02:32 PM JST
CloseWindow
* Sat 01 Mar 2014 11:02:51 PM JST
client
* Sat 01 Mar 2014 11:03:16 PM JST
ex
* Sat 01 Mar 2014 11:03:18 PM JST
connection.ex
* Sat 01 Mar 2014 11:06:53 PM JST
109051907
* Sat 01 Mar 2014 11:07:23 PM JST
net_number_of_desktop
* Sat 01 Mar 2014 11:07:53 PM JST
net_number_of_desktop
* Sat 01 Mar 2014 11:19:58 PM JST
net_wm_desktop
* Sat 01 Mar 2014 11:20:53 PM JST

* Sat 01 Mar 2014 11:20:53 PM JST

* Sat 01 Mar 2014 11:20:54 PM JST
        # self._stack_geo.push(self.get_geometry())

* Sat 01 Mar 2014 11:21:23 PM JST
class Stack(object):
    r"""
    """

    def __init__(self, limit=None):
        r"""

        @Arguments:
        - `limit`:
        """
        self._limit = limit
        self.stack = deque()

    def _resize_stack(self, ):
        r"""SUMMARY

        _resize_stack()

        @Return:
        """
        if self._limit is None:
            return
        while self._limit < len(self.stack):
            self.stack.popleft()

    def push(self, item):
        r"""SUMMARY

        push(item)

        @Arguments:
        - `item`:

        @Return:
        """
        self.stack.append(item)
        self._resize_stack()

    def pop(self):
        r"""SUMMARY

        pop(item)

        @Arguments:
        - `item`:

        @Return:
        """
        return self.stack.pop()

    def isempty(self, ):
        r"""SUMMARY

        isempty()

        @Return:
        """
        return len(self.stack) == 0

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:
        """
        self.stack.clear()

    def __iter__(self, ):
        while len(self):
            yield self.pop()
        raise StopIteration()

    def __len__(self, ):
        return len(self.stack)

    def __nonzero__(self, ):
        return bool(len(self.stack))

    def __repr__(self, ):
        fmt = '{0.__class__.__name__}{1}'.format
        return fmt(self, repr(self.stack).split('deque')[1])


* Sat 01 Mar 2014 11:23:08 PM JST

* Sat 01 Mar 2014 11:23:08 PM JST

* Sat 01 Mar 2014 11:23:08 PM JST
from collections import deque

* Sat 01 Mar 2014 11:23:11 PM JST

* Sat 01 Mar 2014 11:23:11 PM JST

* Sat 01 Mar 2014 11:23:11 PM JST
from collections import deque

* Sat 01 Mar 2014 11:28:50 PM JST
pass
* Sat 01 Mar 2014 11:36:49 PM JST
net_wm_user_time        
* Sat 01 Mar 2014 11:54:04 PM JST
DestroySubwindows
* Sat 01 Mar 2014 11:55:13 PM JST
pass
* Sat 01 Mar 2014 11:57:58 PM JST
73400333
* Sat 01 Mar 2014 11:59:11 PM JST
73400485
* Sun 02 Mar 2014 12:02:49 AM JST
77594729
* Sun 02 Mar 2014 12:07:28 AM JST
QueryTree
* Sun 02 Mar 2014 12:16:09 AM JST
con = SingleConnection.get_instance(display=self.display)
* Sun 02 Mar 2014 12:17:28 AM JST
self.
* Sun 02 Mar 2014 12:22:08 AM JST
54582753
* Sun 02 Mar 2014 12:23:49 AM JST
r.children[11]
* Sun 02 Mar 2014 12:26:08 AM JST
BadWindow
* Sun 02 Mar 2014 12:28:46 AM JST
for i in r.children:
   .....:     try:
   .....:         print c.ext.property.net_wm_window_type(i)
   .....:     except xcb.xproto.BadWindow:
   .....:         continue
* Sun 02 Mar 2014 12:28:58 AM JST
.....:     
* Sun 02 Mar 2014 12:29:02 AM JST
.....:         
* Sun 02 Mar 2014 12:29:07 AM JST
.....:
* Sun 02 Mar 2014 12:29:09 AM JST
.....:
* Sun 02 Mar 2014 12:29:16 AM JST
for i in r.children:
    try:
        print c.ext.property.net_wm_window_type(i)
    except xcb.xproto.BadWindow:
        continue

* Sun 02 Mar 2014 12:30:51 AM JST
def tes():
    r"""SUMMARY
    
    tes()
    
    @Return:
    """
    for i in r.children:
        try:
            print c.ext.property.net_wm_window_type(i)
        except xcb.xproto.BadWindow:
            continue

* Sun 02 Mar 2014 12:33:09 AM JST
from xahk import xconnection as xc
* Sun 02 Mar 2014 12:33:30 AM JST
xconnection
* Sun 02 Mar 2014 12:33:38 AM JST
from xahk.xconnection import Connection as con
* Sun 02 Mar 2014 12:33:46 AM JST
c=con()
* Sun 02 Mar 2014 12:35:25 AM JST
c.ext.property.net_wm_window_type()
* Sun 02 Mar 2014 12:37:50 AM JST
BadWindow
* Sun 02 Mar 2014 12:38:04 AM JST
def tes():
    r"""SUMMARY
    
    tes()
    
    @Return:
    """
    for i in reply.children:
        try:
            print(c.ext.property.net_wm_window_type(i))
        except xcb.xproto.BadWindow:
            continue
* Sun 02 Mar 2014 12:38:38 AM JST
def tes():
    r"""SUMMARY
    
    tes()
    
    @Return:
    """
    for i in reply.children:
        try:
            print(c.ext.property.net_wm_window_type(i))
        except xcb.xproto.BadWindow:
            continue

* Sun 02 Mar 2014 12:41:22 AM JST
pass
* Sun 02 Mar 2014 12:41:24 AM JST
pass
* Sun 02 Mar 2014 12:54:09 AM JST
'_NET_WM_WINDOW_TYPE_NORMAL'
* Sun 02 Mar 2014 12:54:37 AM JST
atom_name
* Sun 02 Mar 2014 12:55:07 AM JST
'_NET_WM_WINDOW_TYPE_SPLASH'
* Sun 02 Mar 2014 12:55:49 AM JST
'_NET_WM_WINDOW_TYPE_DESKTOP'
* Sun 02 Mar 2014 12:56:19 AM JST
'_NET_WM_WINDOW_TYPE_DOCK'
* Sun 02 Mar 2014 12:56:51 AM JST
'_NET_WM_WINDOW_TYPE_TOOLBAR'
* Sun 02 Mar 2014 12:57:39 AM JST
'_NET_WM_WINDOW_TYPE_MENU'
* Sun 02 Mar 2014 12:58:10 AM JST
'_NET_WM_WINDOW_TYPE_UTILITY'
* Sun 02 Mar 2014 12:58:53 AM JST
'_NET_WM_WINDOW_TYPE_DIALOG'
* Sun 02 Mar 2014 12:59:38 AM JST
'_NET_WM_WINDOW_TYPE_DROPDOWN_MENU'
* Sun 02 Mar 2014 01:01:35 AM JST
'_NET_WM_WINDOW_TYPE_POPUP_MENU'
* Sun 02 Mar 2014 01:02:03 AM JST
'_NET_WM_WINDOW_TYPE_TOOLTIP'
* Sun 02 Mar 2014 01:02:12 AM JST
'_NET_WM_WINDOW_TYPE_NOTIFICATION'
* Sun 02 Mar 2014 01:02:57 AM JST
'_NET_WM_WINDOW_TYPE_COMBO'
* Sun 02 Mar 2014 01:03:26 AM JST
'_NET_WM_WINDOW_TYPE_DND'
* Sun 02 Mar 2014 01:31:35 AM JST
DisplayName, MakeDispatchFromListABC
* Sun 02 Mar 2014 01:34:19 AM JST
WindowNormalType
* Sun 02 Mar 2014 01:34:27 AM JST
WindowSplashType
* Sun 02 Mar 2014 01:34:35 AM JST
WindowDesktopType
* Sun 02 Mar 2014 01:34:44 AM JST
WindowDockType
* Sun 02 Mar 2014 01:34:50 AM JST
WindowToolbarType
* Sun 02 Mar 2014 01:34:55 AM JST
WindowMenuType
* Sun 02 Mar 2014 01:35:01 AM JST
WindowUtilityTyep
* Sun 02 Mar 2014 01:35:17 AM JST
WindowUtilityType
* Sun 02 Mar 2014 01:35:27 AM JST
 WindowDialogType
* Sun 02 Mar 2014 01:35:31 AM JST
    
* Sun 02 Mar 2014 01:35:37 AM JST
WindowDropdownMenuType
* Sun 02 Mar 2014 01:35:44 AM JST
WindowPopupMenuTyep
* Sun 02 Mar 2014 01:35:52 AM JST
WindowPopupMenuType
* Sun 02 Mar 2014 01:35:56 AM JST
WindowTooltipType
* Sun 02 Mar 2014 01:36:01 AM JST
WindowNotificationType
* Sun 02 Mar 2014 01:36:07 AM JST
WindowComboType
* Sun 02 Mar 2014 01:36:12 AM JST
WindowDNDType
* Sun 02 Mar 2014 01:39:08 AM JST
    def get_list(self, ):
        r"""SUMMARY

        get_list()

        @Return:
        """
        return self._types_list

* Sun 02 Mar 2014 01:39:49 AM JST
    def get_key(self, elm):
        r"""SUMMARY

        get_key(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        if hasattr(elm, 'type_name'):
            return self.intern_atom(elm.type_name)
        return None

* Sun 02 Mar 2014 01:40:02 AM JST
    def get_callable(self, elm):
        r"""SUMMARY

        get_callable(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        return elm

* Sun 02 Mar 2014 01:41:44 AM JST
reply=c.core.QueryTree(482).reply()
* Sun 02 Mar 2014 01:44:44 AM JST

* Sun 02 Mar 2014 01:44:44 AM JST

* Sun 02 Mar 2014 01:44:44 AM JST
    @property

* Sun 02 Mar 2014 01:46:44 AM JST
DispatchWindowTypeMaker
* Sun 02 Mar 2014 01:53:18 AM JST
StaticWindow
* Sun 02 Mar 2014 01:53:43 AM JST
WindowBase
* Sun 02 Mar 2014 01:56:46 AM JST
register_missing_func
* Sun 02 Mar 2014 01:58:11 AM JST
register_missing_func
* Sun 02 Mar 2014 01:58:31 AM JST
self.
* Sun 02 Mar 2014 02:03:51 AM JST
DispatchWindowTypeMaker
* Sun 02 Mar 2014 02:08:10 AM JST
from xahk.xconnection import Connection as con
c=con()
* Sun 02 Mar 2014 02:08:25 AM JST
from xahk.xconnection import Connection as con
c=con()
* Sun 02 Mar 2014 02:09:34 AM JST

* Sun 02 Mar 2014 02:09:34 AM JST

* Sun 02 Mar 2014 02:09:34 AM JST
from xahk.window.wtypes import DispatchWindowTypeMaker

* Sun 02 Mar 2014 02:17:38 AM JST
109051907
* Sun 02 Mar 2014 02:19:27 AM JST

* Sun 02 Mar 2014 02:19:27 AM JST

* Sun 02 Mar 2014 02:19:27 AM JST
            try:

* Sun 02 Mar 2014 02:20:07 AM JST
self._dispatcher(types[0], display=self.display)
* Sun 02 Mar 2014 02:20:10 AM JST
0]
* Sun 02 Mar 2014 02:20:10 AM JST
types[0]
* Sun 02 Mar 2014 02:27:13 AM JST
get_pid()
* Sun 02 Mar 2014 02:40:56 AM JST
54525999
* Sun 02 Mar 2014 03:17:51 AM JST

* Sun 02 Mar 2014 03:17:51 AM JST

* Sun 02 Mar 2014 03:17:51 AM JST
        from xahk.xconnection import Connection

* Sun 02 Mar 2014 03:18:05 AM JST

* Sun 02 Mar 2014 03:18:05 AM JST

* Sun 02 Mar 2014 03:18:05 AM JST
        con = Connection.get_instance(display=self.display)

* Sun 02 Mar 2014 03:21:02 AM JST

* Sun 02 Mar 2014 03:21:02 AM JST

* Sun 02 Mar 2014 03:21:02 AM JST
                print('DEBUG-1-client.py')

* Sun 02 Mar 2014 03:21:49 AM JST
54525999
* Sun 02 Mar 2014 03:22:54 AM JST

* Sun 02 Mar 2014 03:22:54 AM JST

* Sun 02 Mar 2014 03:22:55 AM JST
        if reply.children_len:

* Sun 02 Mar 2014 03:23:04 AM JST

* Sun 02 Mar 2014 03:23:04 AM JST

* Sun 02 Mar 2014 03:23:04 AM JST
        # con = SingleConnection.get_instance(display=self.display)

* Sun 02 Mar 2014 03:26:20 AM JST

* Sun 02 Mar 2014 03:26:20 AM JST

* Sun 02 Mar 2014 03:26:20 AM JST
            self.query_tree(winid)

* Sun 02 Mar 2014 03:29:17 AM JST
types = self.con.ext.property.net_wm_window_type(winid)
* Sun 02 Mar 2014 03:29:25 AM JST
winid
* Sun 02 Mar 2014 03:30:25 AM JST
            if types:
                yield self._dispatcher(types[0], winid, display=self.display)
                self.query_tree(winid)
            else:
                yield self._dispatcher(None, winid, display=self.display)
                self.query_tree(winid)

* Sun 02 Mar 2014 03:37:04 AM JST
            types = self.con.ext.property.net_wm_window_type(winid)
            if types:
                yield self._dispatcher(types[0], winid, display=self.display)
                self.query_tree(winid)
            else:
                yield self._dispatcher(None, winid, display=self.display)
                self.query_tree(winid)

* Sun 02 Mar 2014 03:37:28 AM JST
winid
* Sun 02 Mar 2014 03:37:34 AM JST
winid
* Sun 02 Mar 2014 03:37:37 AM JST
winid
* Sun 02 Mar 2014 03:37:57 AM JST

* Sun 02 Mar 2014 03:37:57 AM JST

* Sun 02 Mar 2014 03:37:57 AM JST
            self.query_tree(window)

* Sun 02 Mar 2014 03:37:58 AM JST

* Sun 02 Mar 2014 03:37:58 AM JST

* Sun 02 Mar 2014 03:37:58 AM JST
            self.query_tree(window)

* Sun 02 Mar 2014 03:38:42 AM JST
self.query_tree(winid)
* Sun 02 Mar 2014 03:47:45 AM JST

* Sun 02 Mar 2014 03:47:45 AM JST

* Sun 02 Mar 2014 03:47:45 AM JST
                self.query_tree(winid)

* Sun 02 Mar 2014 03:47:48 AM JST
self.query_tree(winid)
* Sun 02 Mar 2014 03:49:32 AM JST
    def query_tree(self, window):
        r"""SUMMARY

        query_tree(window)

        @Arguments:
        - `window`:

        @Return:
        """
        print('DEBUG-1-client.py')
        types = self.con.ext.property.net_wm_window_type(window)
        if types:
            yield self._dispatcher(types[0], window, display=self.display)
        else:
            yield self._dispatcher(None, window, display=self.display)



        reply = self.con.core.QueryTree(window).reply()
        for winid in reply.children:
            for w in self.query_tree(winid):
                yield w
            # types = self.con.ext.property.net_wm_window_type(winid)
            # if types:
            #     yield self._dispatcher(types[0], winid, display=self.display)
            #     self.query_tree(winid)
            # else:
            #     yield self._dispatcher(None, winid, display=self.display)
            #     self.query_tree(winid)

* Sun 02 Mar 2014 03:50:10 AM JST
    def query_tree(self, window):
        r"""SUMMARY

        query_tree(window)

        @Arguments:
        - `window`:

        @Return:
        """
        print('DEBUG-1-client.py')
        types = self.con.ext.property.net_wm_window_type(window)
        if types:
            yield self._dispatcher(types[0], window, display=self.display)
        else:
            yield self._dispatcher(None, window, display=self.display)



        reply = self.con.core.QueryTree(window).reply()
        for winid in reply.children:
            for w in self.query_tree(winid):
                yield w

* Sun 02 Mar 2014 03:50:43 AM JST

* Sun 02 Mar 2014 03:50:43 AM JST

* Sun 02 Mar 2014 03:50:43 AM JST
        print('DEBUG-1-client.py')

* Sun 02 Mar 2014 04:16:54 AM JST

* Sun 02 Mar 2014 04:16:55 AM JST

* Sun 02 Mar 2014 04:16:55 AM JST
            self.query_tree(winid)

* Sun 02 Mar 2014 04:44:19 AM JST
IterQueryTree
* Sun 02 Mar 2014 02:06:39 PM JST
AtomCache()
* Sun 02 Mar 2014 02:07:12 PM JST

* Sun 02 Mar 2014 02:07:12 PM JST

* Sun 02 Mar 2014 02:07:12 PM JST
        else:   

* Sun 02 Mar 2014 02:07:20 PM JST

* Sun 02 Mar 2014 02:07:20 PM JST

* Sun 02 Mar 2014 02:07:20 PM JST
            self._cache = AtomCache()

* Sun 02 Mar 2014 02:12:29 PM JST
AtomIdentifier
* Sun 02 Mar 2014 02:16:27 PM JST
get_instance
* Sun 02 Mar 2014 02:18:32 PM JST
get_instance
* Sun 02 Mar 2014 02:18:57 PM JST
AtomIdentifier(display=display)
* Sun 02 Mar 2014 02:19:11 PM JST

* Sun 02 Mar 2014 02:19:11 PM JST

* Sun 02 Mar 2014 02:19:11 PM JST
        atom = 

* Sun 02 Mar 2014 02:19:45 PM JST
get_instance
* Sun 02 Mar 2014 02:19:54 PM JST
AtomIdentifier(display=self.display)
* Sun 02 Mar 2014 02:20:01 PM JST

* Sun 02 Mar 2014 02:20:01 PM JST

* Sun 02 Mar 2014 02:20:01 PM JST
        atom = 

* Sun 02 Mar 2014 02:20:10 PM JST
get_instance
* Sun 02 Mar 2014 02:20:16 PM JST
AtomIdentifier(display=self.display)
* Sun 02 Mar 2014 02:20:22 PM JST

* Sun 02 Mar 2014 02:20:22 PM JST

* Sun 02 Mar 2014 02:20:23 PM JST
        atom = 

* Sun 02 Mar 2014 02:20:53 PM JST
get_instance
* Sun 02 Mar 2014 02:21:05 PM JST
atom
* Sun 02 Mar 2014 02:21:10 PM JST
atom.
* Sun 02 Mar 2014 02:21:12 PM JST
atom.
* Sun 02 Mar 2014 02:21:21 PM JST
get_instance
* Sun 02 Mar 2014 02:21:29 PM JST
AtomIdentifier(display=self.display)
* Sun 02 Mar 2014 02:21:33 PM JST

* Sun 02 Mar 2014 02:21:33 PM JST

* Sun 02 Mar 2014 02:21:33 PM JST
        atom = 

* Sun 02 Mar 2014 02:21:47 PM JST
get_instance
* Sun 02 Mar 2014 02:21:51 PM JST
AtomIdentifier(display=self.display)
* Sun 02 Mar 2014 02:21:58 PM JST

* Sun 02 Mar 2014 02:21:58 PM JST

* Sun 02 Mar 2014 02:21:58 PM JST
        atom = AtomIdentifier(display=self.display)

* Sun 02 Mar 2014 02:22:07 PM JST
get_instance
* Sun 02 Mar 2014 02:22:10 PM JST
AtomIdentifier(display=self.display)
* Sun 02 Mar 2014 02:22:15 PM JST

* Sun 02 Mar 2014 02:22:15 PM JST

* Sun 02 Mar 2014 02:22:15 PM JST
        atom = 

* Sun 02 Mar 2014 02:22:40 PM JST
get_instance
* Sun 02 Mar 2014 02:22:44 PM JST
AtomIdentifier(display=self.display)
* Sun 02 Mar 2014 02:22:53 PM JST
AtomIdentifier(display=self.display)
* Sun 02 Mar 2014 02:22:58 PM JST

* Sun 02 Mar 2014 02:22:58 PM JST

* Sun 02 Mar 2014 02:22:58 PM JST
        atom = AtomIdentifier(display=self.display)

* Sun 02 Mar 2014 02:23:08 PM JST
AtomIdentifier.get_instance(display=self.display)
* Sun 02 Mar 2014 02:23:11 PM JST
get_instance
* Sun 02 Mar 2014 02:23:14 PM JST
AtomIdentifier(display=self.display)
* Sun 02 Mar 2014 02:23:19 PM JST

* Sun 02 Mar 2014 02:23:19 PM JST

* Sun 02 Mar 2014 02:23:19 PM JST
        atom = AtomIdentifier(display=self.display)

* Sun 02 Mar 2014 02:23:40 PM JST
get_instance
* Sun 02 Mar 2014 02:28:19 PM JST
get_instance
* Sun 02 Mar 2014 02:28:57 PM JST
get_instance
* Sun 02 Mar 2014 02:28:59 PM JST
                            
* Sun 02 Mar 2014 02:31:58 PM JST
from xahk.xconnection import Connection as con
* Sun 02 Mar 2014 02:32:19 PM JST
get_instance
* Sun 02 Mar 2014 02:32:23 PM JST
get_instance
* Sun 02 Mar 2014 02:32:25 PM JST
.get_instance
* Sun 02 Mar 2014 02:32:25 PM JST
                            .get_instance
* Sun 02 Mar 2014 02:32:30 PM JST
                            
* Sun 02 Mar 2014 02:44:43 PM JST

* Sun 02 Mar 2014 02:44:43 PM JST

* Sun 02 Mar 2014 02:44:43 PM JST
    # __metaclass__ = SingletonConnectionMeta

* Sun 02 Mar 2014 02:44:56 PM JST
SingletonConnectionMeta, 
* Sun 02 Mar 2014 02:46:23 PM JST
DisplayName, MakeDispatchFromListABC
* Sun 02 Mar 2014 02:46:54 PM JST
from dispatcher import MakeDispatchFromListABC
* Sun 02 Mar 2014 02:47:52 PM JST
    def __init__(self, display=None):
        r"""

        @Arguments:
        - `display`:
        """
        DisplayName.__init__(self, display=display)
        self.intern_atom = AtomIdentifier(display=self.display).intern_atom

    def get_list(self, ):
        r"""SUMMARY

        get_list()

        @Return:
        """
        return self._types_list

    def get_key(self, elm):
        r"""SUMMARY

        get_key(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        if hasattr(elm, 'type_name'):
            return self.intern_atom(elm.type_name)
        return None

    def get_callable(self, elm):
        r"""SUMMARY

        get_callable(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        return elm

* Sun 02 Mar 2014 02:48:25 PM JST

* Sun 02 Mar 2014 02:48:25 PM JST

* Sun 02 Mar 2014 02:48:25 PM JST
        return self._types_list

* Sun 02 Mar 2014 02:50:39 PM JST
AtomDispatchBuilder
* Sun 02 Mar 2014 02:51:51 PM JST
from xahk.xconnection import Connection as con
* Sun 02 Mar 2014 02:56:47 PM JST
from xahk.xconnection import Connection as con
* Sun 02 Mar 2014 02:58:22 PM JST
AtomIdentifier, 
* Sun 02 Mar 2014 02:58:26 PM JST

* Sun 02 Mar 2014 02:58:26 PM JST

* Sun 02 Mar 2014 02:58:26 PM JST
from dispatcher import MakeDispatchFromListABC

* Sun 02 Mar 2014 03:39:37 PM JST
class AtomDispatchBuilder(DisplayName, MakeDispatchFromListABC):
    r"""
    """

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `display`:
        """
        DisplayName.__init__(self, display=display)
        self.intern_atom = AtomIdentifier(display=self.display).intern_atom

    def get_list(self, ):
        r"""SUMMARY

        get_list()

        @Return:
        """
        return getattr(self, '_types_list')

    def get_key(self, elm):
        r"""SUMMARY

        get_key(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        if hasattr(elm, 'type_name'):
            return self.intern_atom(elm.type_name)
        return None

    def get_callable(self, elm):
        r"""SUMMARY

        get_callable(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        return elm

* Sun 02 Mar 2014 03:39:46 PM JST

* Sun 02 Mar 2014 03:39:47 PM JST

* Sun 02 Mar 2014 03:39:47 PM JST
from dispatcher import MakeDispatchFromListABC

* Sun 02 Mar 2014 03:39:55 PM JST
from xahk.display import DisplayName
* Sun 02 Mar 2014 03:43:20 PM JST
client
* Sun 02 Mar 2014 03:45:52 PM JST
SingleConnection
* Sun 02 Mar 2014 03:47:43 PM JST
from xahk.xconnection import Connection as con
* Sun 02 Mar 2014 03:49:24 PM JST
Connection.get_instance(display=self.display)
* Sun 02 Mar 2014 03:49:36 PM JST
self.
* Sun 02 Mar 2014 03:49:39 PM JST
self.
* Sun 02 Mar 2014 03:51:25 PM JST
from xahk.xconnection import Connection as con
* Sun 02 Mar 2014 03:52:24 PM JST
109051907
* Sun 02 Mar 2014 03:56:53 PM JST
PropertyHandler
* Sun 02 Mar 2014 03:58:38 PM JST
Connection
* Sun 02 Mar 2014 03:58:53 PM JST
ext.
* Sun 02 Mar 2014 03:58:53 PM JST
con.ext.
* Sun 02 Mar 2014 03:59:08 PM JST
ext.
* Sun 02 Mar 2014 03:59:09 PM JST
con.ext.
* Sun 02 Mar 2014 03:59:47 PM JST
from xahk.xconnection import Connection as con
* Sun 02 Mar 2014 04:05:54 PM JST

* Sun 02 Mar 2014 04:05:54 PM JST

* Sun 02 Mar 2014 04:05:54 PM JST
        from xahk.xconnection import Connection

* Sun 02 Mar 2014 04:08:52 PM JST
from xahk.window.wtypes import WindowTypesDispatchBuilder
* Sun 02 Mar 2014 04:09:03 PM JST
        self._dispatcher = (WindowTypesDispatchBuilder(display=self.display)
                            .make_dispatch())

* Sun 02 Mar 2014 04:09:28 PM JST
    def query_tree(self, window):
        r"""SUMMARY

        query_tree(window)

        @Arguments:
        - `window`:

        @Return:
        """
        reply = self.con.core.QueryTree(window).reply()
        for winid in reply.children:
            types = self.properties.net_wm_window_type(winid)
            if types:
                yield self._dispatcher(types[0], winid, display=self.display)
            else:
                yield self._dispatcher(None, winid, display=self.display)

    def query_recursive_tree(self, window):
        r"""SUMMARY

        query_tree(window)

        @Arguments:
        - `window`:

        @Return:
        """
        types = self.properties.net_wm_window_type(window)
        if types:
            yield self._dispatcher(types[0], window, display=self.display)
        else:
            yield self._dispatcher(None, window, display=self.display)
        reply = self.con.core.QueryTree(window).reply()
        for winid in reply.children:
            for w in self.query_tree(winid):
                yield w

* Sun 02 Mar 2014 04:10:24 PM JST
from xahk.xconnection.singleton import SingleConnection
* Sun 02 Mar 2014 04:10:46 PM JST
SingleConnection.get_instance(display=self.display)
* Sun 02 Mar 2014 04:11:30 PM JST
(SingleConnection.get_instance(display=self.display)
                 .core.QueryTree(window).reply())
* Sun 02 Mar 2014 04:27:01 PM JST
from xahk.xconnection import Connection as con
* Sun 02 Mar 2014 04:37:24 PM JST
109051907
* Sun 02 Mar 2014 04:37:31 PM JST
comix=109051907
* Sun 02 Mar 2014 04:38:15 PM JST
wind
* Sun 02 Mar 2014 04:41:52 PM JST
    def move(self, window, **changes):
        r"""SUMMARY

        configure(window, **changes)

        @Arguments:
        - `window`:
        - `**changes`:

        @Return:
        """
        con = SingleConnection.get_instance(display=self.display)
        mask = 0
        values = []
        for key in ('x', 'y', 'width', 'height'):
            if key not in changes:
                continue
            mask |= getattr(ConfigWindow, key.capitalize())
            values.append(changes[key])
        if mask:
            con.core.ConfigureWindow(window, mask, values)

* Sun 02 Mar 2014 04:42:18 PM JST
from xcb.xproto import ConfigWindow
* Sun 02 Mar 2014 04:42:50 PM JST
    def focus(self, window):
        r"""SUMMARY

        focus(window)

        @Arguments:
        - `window`:

        @Return:
        """
        con = SingleConnection.get_instance(display=self.display)
        con.core.SetInputFocus(InputFocus.PointerRoot, window, Time.CurrentTime)

* Sun 02 Mar 2014 04:43:18 PM JST
from xcb.xproto import ConfigWindow, InputFocus, Time
* Sun 02 Mar 2014 04:43:46 PM JST
g=c.ext.query_recursive_tree(482)
* Sun 02 Mar 2014 04:43:54 PM JST
lis=list(g)
* Sun 02 Mar 2014 04:44:02 PM JST
for i, w in enumerate(lis):
* Sun 02 Mar 2014 04:44:07 PM JST
    print i, w
* Sun 02 Mar 2014 04:44:22 PM JST
from xahk.xconnection import Connection as con
c=con()

* Sun 02 Mar 2014 04:44:28 PM JST
g=c.ext.query_recursive_tree(482)
* Sun 02 Mar 2014 04:44:33 PM JST
lis=list(g)
* Sun 02 Mar 2014 04:44:36 PM JST
for i, w in enumerate(lis):
    print i, w

* Sun 02 Mar 2014 04:45:45 PM JST
client.
* Sun 02 Mar 2014 06:04:05 PM JST
con = SingleConnection.get_instance(display=self.display)
* Sun 02 Mar 2014 06:04:14 PM JST
                 
* Sun 02 Mar 2014 06:04:35 PM JST
con = SingleConnection.get_instance(display=self.display)
* Sun 02 Mar 2014 06:04:46 PM JST
                 
* Sun 02 Mar 2014 06:07:49 PM JST

* Sun 02 Mar 2014 06:07:49 PM JST

* Sun 02 Mar 2014 06:07:49 PM JST
        # self.client = ClientHandler(display=self.display)

* Sun 02 Mar 2014 06:13:06 PM JST
width
* Sun 02 Mar 2014 06:13:09 PM JST
height
* Sun 02 Mar 2014 06:13:44 PM JST
from xahk.xconnection import Connection as con
c=con()

* Sun 02 Mar 2014 06:13:56 PM JST
g=c.ext.query_recursive_tree(482)
lis=list(g)
* Sun 02 Mar 2014 06:15:30 PM JST
comix=109051907
* Sun 02 Mar 2014 06:15:56 PM JST
height
* Sun 02 Mar 2014 06:16:09 PM JST
get_name
* Sun 02 Mar 2014 06:17:40 PM JST
focus
* Sun 02 Mar 2014 06:23:33 PM JST
get_
* Sun 02 Mar 2014 06:23:40 PM JST
get_
* Sun 02 Mar 2014 06:24:08 PM JST

* Sun 02 Mar 2014 06:24:08 PM JST

* Sun 02 Mar 2014 06:24:08 PM JST
    @property

* Sun 02 Mar 2014 06:36:52 PM JST
pass
* Sun 02 Mar 2014 06:37:31 PM JST
pass
* Sun 02 Mar 2014 08:43:12 PM JST
from mygoogle.chrome.chrome import ChromeBMParse
* Sun 02 Mar 2014 08:43:43 PM JST
'【天気】'
* Sun 02 Mar 2014 08:45:14 PM JST
'Summer'
* Sun 02 Mar 2014 08:47:18 PM JST
"【天気】"
* Sun 02 Mar 2014 08:49:59 PM JST
"【天気】"
* Sun 02 Mar 2014 08:53:48 PM JST
trimed.decode('unicode-escape', 'ignore')
* Sun 02 Mar 2014 08:54:05 PM JST

* Sun 02 Mar 2014 08:57:07 PM JST
'【天気】'
* Sun 02 Mar 2014 08:57:22 PM JST

* Sun 02 Mar 2014 08:57:22 PM JST

* Sun 02 Mar 2014 08:57:22 PM JST
                print(trimed)

* Sun 02 Mar 2014 08:57:22 PM JST
                print(trimed)

* Sun 02 Mar 2014 08:57:22 PM JST
                print(trimed)
                # if self._name == trimed.decode('unicode-escape', 'ignore'):

* Sun 02 Mar 2014 08:58:06 PM JST

* Sun 02 Mar 2014 08:58:06 PM JST

* Sun 02 Mar 2014 08:58:06 PM JST
    print('DEBUG-2-daily.py')

* Sun 02 Mar 2014 08:58:07 PM JST

* Sun 02 Mar 2014 08:58:07 PM JST

* Sun 02 Mar 2014 08:58:07 PM JST
    print('DEBUG-1-daily.py')

* Mon 03 Mar 2014 12:08:19 AM JST
wproperty
* Mon 03 Mar 2014 12:14:10 AM JST
        reply = self._connection.core.ListProperties(self._window_id).reply()
        return reply.atoms

* Mon 03 Mar 2014 12:19:51 AM JST
con = SingleConnection.get_instance(display=self.display)
* Mon 03 Mar 2014 12:20:32 AM JST
atom
* Mon 03 Mar 2014 12:22:08 AM JST
list_properties
* Mon 03 Mar 2014 12:23:32 AM JST
connection
* Mon 03 Mar 2014 12:23:47 AM JST

* Mon 03 Mar 2014 12:23:47 AM JST

* Mon 03 Mar 2014 12:23:47 AM JST
        # reply = self.connection.core.ListProperties(self.window).reply()

* Mon 03 Mar 2014 12:23:47 AM JST
        # reply = self.connection.core.ListProperties(self.window).reply()

* Mon 03 Mar 2014 12:23:47 AM JST
        # reply = self.connection.core.ListProperties(self.window).reply()
        # return reply.atoms

* Mon 03 Mar 2014 12:25:29 AM JST
from xahk.xconnection import Connection as con
c=con()

* Mon 03 Mar 2014 12:25:31 AM JST

* Mon 03 Mar 2014 12:25:31 AM JST

* Mon 03 Mar 2014 12:25:31 AM JST

* Mon 03 Mar 2014 12:25:31 AM JST

* Mon 03 Mar 2014 12:25:31 AM JST

* Mon 03 Mar 2014 12:25:31 AM JST

* Mon 03 Mar 2014 12:25:31 AM JST

* Mon 03 Mar 2014 12:25:31 AM JST

* Mon 03 Mar 2014 12:25:31 AM JST

* Mon 03 Mar 2014 12:25:31 AM JST

* Mon 03 Mar 2014 12:25:32 AM JST

* Mon 03 Mar 2014 12:25:41 AM JST
from xahk.xconnection import Connection as con
c=con()

* Mon 03 Mar 2014 12:25:55 AM JST
g=c.ext.query_recursive_tree(482)
lis=list(g)

* Mon 03 Mar 2014 12:33:56 AM JST
from xahk.xconnection import Connection as con
c=con()

g=c.ext.query_recursive_tree(482)
lis=list(g)

for i, w in enumerate(lis):
    print i, w

54525999


comix=109051907
* Mon 03 Mar 2014 12:35:01 AM JST
def getw(win):
    r"""SUMMARY
    
    getw(win)
    
    @Arguments:
    - `win`:
    
    @Return:
    """
    for w in lis:
        if win == int(w):
            return w

* Mon 03 Mar 2014 12:37:13 AM JST
109051907
* Mon 03 Mar 2014 12:37:22 AM JST
comix=109051907
* Mon 03 Mar 2014 12:37:25 AM JST

* Mon 03 Mar 2014 12:37:25 AM JST

* Mon 03 Mar 2014 12:37:25 AM JST

* Mon 03 Mar 2014 12:37:28 AM JST
comix=109051907
* Mon 03 Mar 2014 12:44:56 AM JST
_NET_WM_USER_TIME_WINDOW
* Mon 03 Mar 2014 01:04:32 AM JST
ww.list_properties()
* Mon 03 Mar 2014 01:05:19 AM JST
'WM_CLIENT_MACHINE'
* Mon 03 Mar 2014 01:15:34 AM JST
'_NET_WM_USER_TIME_WINDOW'
* Mon 03 Mar 2014 01:18:18 AM JST
'_NET_WM_USER_TIME_WINDOW'
* Mon 03 Mar 2014 01:22:35 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('_NET_WM_USER_TIME_WINDOW'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:26 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:26 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:26 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:26 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:26 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:26 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:26 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:26 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:27 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:27 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:27 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:27 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:27 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:27 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:27 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:23:27 AM JST
reply=c.core.GetProperty(False, comix, c.ext.atom.identify_atom('WM_CLIENT_MACHINE'), 0, 0, 65535).reply()
* Mon 03 Mar 2014 01:25:21 AM JST
self.get_full_property(window, '_NET_WM_USER_TIME_WINDOW')
* Mon 03 Mar 2014 01:25:50 AM JST
return 
* Mon 03 Mar 2014 01:42:13 AM JST
'WM_LOCALE_NAME'
* Mon 03 Mar 2014 01:45:13 AM JST
'_WIN_WORKSPACE'
* Mon 03 Mar 2014 01:46:12 AM JST

* Mon 03 Mar 2014 01:46:12 AM JST

* Mon 03 Mar 2014 01:46:12 AM JST
    '_WIN_WORKSPACE'      : ('CARDINAL', 32), 

* Mon 03 Mar 2014 01:47:19 AM JST
print 
* Mon 03 Mar 2014 01:48:27 AM JST
'_WIN_STATE'
* Mon 03 Mar 2014 01:49:32 AM JST
print 
* Mon 03 Mar 2014 01:49:34 AM JST
buf()
* Mon 03 Mar 2014 01:49:35 AM JST
value.buf()
* Mon 03 Mar 2014 01:49:35 AM JST
reply.value.buf()
* Mon 03 Mar 2014 01:49:47 AM JST
'_WIN_STATE'
* Mon 03 Mar 2014 01:50:25 AM JST
reply=c.core.GetProperty(False, comix, c.ext.a
* Mon 03 Mar 2014 01:50:25 AM JST
reply=c.core.GetProperty(False, comix, c.ext.a
* Mon 03 Mar 2014 01:50:25 AM JST
reply=c.core.GetProperty(False, comix, c.ext.a
* Mon 03 Mar 2014 01:50:25 AM JST
reply=c.core.GetProperty(False, comix, c.ext.a
* Mon 03 Mar 2014 01:51:47 AM JST
'XdndAware'
* Mon 03 Mar 2014 01:52:02 AM JST
'_MOTIF_DRAG_RECEIVER_INFO'
* Mon 03 Mar 2014 01:52:12 AM JST
'_NET_WM_SYNC_REQUEST_COUNTER'
* Mon 03 Mar 2014 01:52:38 AM JST
'WM_CLIENT_LEADER'
* Mon 03 Mar 2014 01:52:52 AM JST
'WM_PROTOCOLS'
* Mon 03 Mar 2014 01:53:44 AM JST
'XdndAware'
* Mon 03 Mar 2014 01:54:46 AM JST
reply.value.buf()
* Mon 03 Mar 2014 01:55:54 AM JST
'_MOTIF_DRAG_RECEIVER_INFO'
* Mon 03 Mar 2014 01:57:20 AM JST
'_MOTIF_DRAG_RECEIVER_INFO'
* Mon 03 Mar 2014 01:57:25 AM JST
'_NET_WM_SYNC_REQUEST_COUNTER'
* Mon 03 Mar 2014 02:36:24 AM JST
54526004
* Mon 03 Mar 2014 02:39:12 AM JST
get_desktop_number()
* Mon 03 Mar 2014 02:39:36 AM JST
get_frame_extents()
* Mon 03 Mar 2014 02:45:56 AM JST
_NET_WM_STATE_HIDDEN
* Mon 03 Mar 2014 02:48:39 AM JST
extensions.
* Mon 03 Mar 2014 02:55:13 AM JST
_NET_WM_STATE_HIDDEN
* Mon 03 Mar 2014 03:30:24 AM JST
25165828
* Mon 03 Mar 2014 03:32:05 AM JST
height
* Mon 03 Mar 2014 03:32:22 AM JST
25165849
* Mon 03 Mar 2014 03:32:53 AM JST
width
* Mon 03 Mar 2014 03:38:02 AM JST
min_keycode
* Mon 03 Mar 2014 03:38:09 AM JST
roots_len
* Mon 03 Mar 2014 08:18:54 AM JST
#!/usr/bin/env python
# -*- coding: utf-8 -*-

# $Id: wtypes.py 114 2014-03-01 07:11:17Z t1 $
# $Revision: 114 $
# $Date: 2014-03-01 16:11:17 +0900 (Sat, 01 Mar 2014) $
# $Author: t1 $
# $LastChangedBy: t1 $
# $LastChangedDate: 2014-03-01 16:11:17 +0900 (Sat, 01 Mar 2014) $

r"""types -- DESCRIPTION

"""
import sys as _sys
import os as _os

from xahk.display import DisplayName
from xahk.xconnection import Connection as CON
from xahk.xconnection.extensions.atom import AtomDispatchBuilder

# for debug
import cgitb as _cgitb
_cgitb.enable(format='text')


__revision__ = '$Revision: 114 $'
__version__ = '0.1.0'


class WindowAbstract(DisplayName):
    r"""
    """

    def __init__(self, window, display=None):
        r"""SUMMARY

        __init__(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        DisplayName.__init__(self, display=display)
        self.window = window

    def __int__(self, ):
        return self.window

    def __cmp__(self, other):
        pass

    def __repr__(self, ):
        return '{0.__class__.__name__}(window={0.window})'.format(self)


class WindowBase(WindowAbstract):
    r"""
    """

    @property
    def connection(self, ):
        r"""SUMMARY

        connection()

        @Return:
        """
        return CON.get_instance(display=self.display)

    @property
    def extensions(self, ):
        r"""SUMMARY

        extensions()

        @Return:
        """
        return CON.get_ext(display=self.display)

    @property
    def properties(self, ):
        r"""SUMMARY

        properties()

        @Return:
        """
        return self.extensions.properties

    def list_properties(self, ):
        r"""SUMMARY

        list_properties()

        @Return:
        """
        return self.extensions.list_properties(self.window)

    def get_types(self, ):
        r"""SUMMARY

        get_window_type()

        @Return:
        """
        return self.properties.net_wm_window_type(self.window)

    def get_geometry(self, ):
        r"""SUMMARY

        get_geometry()

        @Return:
        """
        return self.extensions.geo.get_geometry(self.window)

    @property
    def x(self, ):
        r"""SUMMARY

        get_x()

        @Return:
        """
        return self.get_geometry().x

    @property
    def y(self, ):
        r"""SUMMARY

        get_y()

        @Return:
        """
        return self.get_geometry().y

    @property
    def height(self, ):
        r"""SUMMARY

        get_height()

        @Return:
        """
        return self.get_geometry().height

    @property
    def width(self, ):
        r"""SUMMARY

        get_width()

        @Return:
        """
        return self.get_geometry().width


class WindowSubBase(WindowBase):
    r"""
    """

    def query_tree(self, ):
        r"""SUMMARY

        query_tree()

        @Return:
        """
        return self.extensions.query_tree(self.window)

    def query_subwindows(self, ):
        r"""SUMMARY

        query_subwindows()

        @Return:
        """
        return self.extensions.query_recursive_tree(self.window)

    def grab(self, ):
        r"""SUMMARY

        grab()

        @Return:
        """
        pass

    def make_subwindow(self, ):
        r"""SUMMARY

        make_subwindow()

        @Return:
        """
        pass

    def destroy_subwindows(self, ):
        r"""SUMMARY

        destroy_subwindows()

        @Return:
        """
        self.connection.core.DestroySubWindows(self.window)


class StaticWindow(WindowSubBase):
    r"""
    """

    def get_supported(self, ):
        r"""SUMMARY

        get_supported()

        @Return:
        """
        return self.properties.net_supported(self.window)

    def get_client_list(self, ):
        r"""SUMMARY

        get_client_list()

        @Return:
        """
        return self.properties.net_client_list(self.window)

    def get_client_list_stacking(self, ):
        r"""SUMMARY

        get_client_list_stacking()

        @Return:
        """
        return self.properties.net_client_list_stacking(self.window)

    def get_number_of_desktops(self, ):
        r"""SUMMARY

        get_number_of_desktops()

        @Return:
        """
        return self.properties.net_number_of_desktops(self.window)

    def get_desktop_geometry(self, ):
        r"""SUMMARY

        get_desktop_geometry()

        @Return:
        """
        return self.properties.net_desktop_geometry(self.window)

    def get_desktop_viewport(self, ):
        r"""SUMMARY

        get_desktop_viewport()

        @Return:
        """
        return self.properties.net_desktop_viewport(self.window)

    def get_current_desktop(self, ):
        r"""SUMMARY

        get_current_desktop()

        @Return:
        """
        return self.properties.net_current_desktop(self.window)

    def get_desktop_name(self, ):
        r"""SUMMARY

        get_desktop_name()

        @Return:
        """
        return self.properties.net_desktop_name(self.window)

    def get_active_window(self, ):
        r"""SUMMARY

        get_active_window()

        @Return:
        """
        return self.properties.net_active_window(self.window)

    def get_workarea(self, ):
        r"""SUMMARY

        get_workarea()

        @Return:
        """
        return self.properties.net_workarea(self.window)

    def get_virtual_roots(self, ):
        r"""SUMMARY

        get_virtual_roots()

        @Return:
        """
        return self.properties.net_virtual_roots(self.window)

    def get_supporting_wm_check(self, ):
        r"""SUMMARY

        get_supporting_wm_check()

        @Return:
        """
        return self.properties.net_supporting_wm_check(self.window)

    def get_desktop_layout(self, ):
        r"""SUMMARY

        get_desktop_layout()

        @Return:
        """
        return self.properties.net_desktop_layout(self.window)

    def get_showing_desktop(self, ):
        r"""SUMMARY

        get_showing_desktop()

        @Return:
        """
        return self.properties.net_showing_desktop(self.window)

    def get_user_time(self, ):
        r"""SUMMARY

        get_user_time()

        @Return:
        """
        return self.properties.net_wm_user_time(self.window)


class DynamicWindow(WindowSubBase):
    r"""
    """

    def move(self, **kwargs):
        r"""SUMMARY

        move(**kwargs)

        @Arguments:
        - `**kwargs`:

        @Return:
        """
        self.extensions.move(self.window, **kwargs)

    def focus(self, ):
        r"""SUMMARY

        focus()

        @Return:
        """
        self.extensions.focus(self.window)

    def close(self, ):
        r"""SUMMARY

        close()

        @Return:
        """
        self.extensions.destroy.close(self.window)

    def kill(self, ):
        r"""SUMMARY

        kill()

        @Return:
        """
        self.connection.core.KillClient(self.window)

    def get_name(self, ):
        r"""SUMMARY

        get_name()

        @Return:
        """
        return self.properties.net_wm_name(self.window)

    def get_class(self, ):
        r"""SUMMARY

        get_class()

        @Return:
        """
        return self.properties.wm_class(self.window)

    def get_pid(self, ):
        r"""SUMMARY

        get_pid()

        @Return:
        """
        return self.properties.net_wm_pid(self.window)

    def get_state(self, ):
        r"""SUMMARY

        get_states()

        @Return:
        """
        return self.properties.net_wm_state(self.window)

    def get_desktop_number(self, ):
        r"""SUMMARY

        get_desktop_num()

        @Return:
        """
        return self.properties.net_wm_desktop(self.window)

    def get_allowed_actions(self, ):
        r"""SUMMARY

        get_allowed_actions()

        @Return:
        """
        return self.properties.net_wm_allowed_actions(self.window)

    def get_frame_extents(self, ):
        r"""SUMMARY

        get_frame_extents()

        @Return:
        """
        return self.properties.net_frame_extents(self.window)

    def get_icon(self, ):
        r"""SUMMARY

        get_icon()

        @Return:
        """
        return self.properties.net_wm_icon(self.window)

    def get_user_window_time(self, ):
        r"""SUMMARY

        get_user_window_time()

        @Return:
        """
        return self.properties.net_wm_user_time_window(self.window)


class WindowSplashType(WindowBase):
    r"""
    """
    type_name = '_NET_WM_WINDOW_TYPE_SPLASH'


class WindowNormalType(DynamicWindow):
    r"""
    """
    type_name = '_NET_WM_WINDOW_TYPE_NORMAL'


class WindowDesktopType(StaticWindow):
    r"""
    """
    type_name = '_NET_WM_WINDOW_TYPE_DESKTOP'


class WindowDockType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]

    type_name = '_NET_WM_WINDOW_TYPE_DOCK'


class WindowToolbarType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_TOOLBAR'


class WindowMenuType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_MENU'


class WindowUtilityType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_UTILITY'


class WindowDialogType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_DIALOG'


class WindowDropdownMenuType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU'


class WindowPopupMenuType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_POPUP_MENU'


class WindowTooltipType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_TOOLTIP'


class WindowNotificationType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_NOTIFICATION'


class WindowComboType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_COMBO'


class WindowDNDType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_DND'


class WindowTypesDispatchBuilder(AtomDispatchBuilder):
    r"""
    """
    missing = WindowBase

    _types_list = (WindowNormalType,
                   WindowSplashType,
                   WindowDesktopType,
                   WindowDockType,
                   WindowToolbarType,
                   WindowMenuType,
                   WindowUtilityType,
                   WindowDialogType,
                   WindowDropdownMenuType,
                   WindowPopupMenuType,
                   WindowTooltipType,
                   WindowNotificationType,
                   WindowComboType,
                   WindowDNDType,)


def _test():
    r"""Test function."""
    return _os.EX_OK

if __name__ == '__main__':
    _sys.exit(_test())



# For Emacs
# Local Variables:
# coding: utf-8
# End:
# types.py ends here

* Mon 03 Mar 2014 08:19:03 AM JST
types
* Mon 03 Mar 2014 08:19:09 AM JST
wtypes
* Mon 03 Mar 2014 08:20:36 AM JST
types
* Mon 03 Mar 2014 08:21:49 AM JST
wtypes
* Mon 03 Mar 2014 08:23:59 AM JST
SUMMARY
* Mon 03 Mar 2014 08:25:37 AM JST

* Mon 03 Mar 2014 08:25:37 AM JST

* Mon 03 Mar 2014 08:25:37 AM JST
# from xahk.xconnection.extensions.client import ClientHandler

* Mon 03 Mar 2014 08:25:55 AM JST
from xcb.xproto import ConfigWindow, InputFocus, Time

from xahk.display import DisplayName
from xahk.xconnection.singleton import SingleConnection
from xahk.xconnection.extensions.atom import AtomIdentifier
from xahk.xconnection.extensions.properties import PropertyHandler, GetGeometry
from xahk.xconnection.extensions.state import StateHandler, DestroyHandler


* Mon 03 Mar 2014 08:26:51 AM JST
pass
* Mon 03 Mar 2014 08:27:23 AM JST
__cla
* Mon 03 Mar 2014 08:27:23 AM JST
self.__cla
* Mon 03 Mar 2014 08:27:28 AM JST
WindowAbstract
* Mon 03 Mar 2014 02:30:46 PM JST
window
* Mon 03 Mar 2014 02:31:23 PM JST
window
* Mon 03 Mar 2014 02:31:25 PM JST
window
* Mon 03 Mar 2014 02:32:24 PM JST
pass
* Mon 03 Mar 2014 02:34:15 PM JST
ac-stop
* Mon 03 Mar 2014 04:24:27 PM JST
    @property
    def connection(self, ):
        r"""SUMMARY

        connection()

        @Return:
        """
        return CON.get_instance(display=self.display)


* Mon 03 Mar 2014 04:28:56 PM JST
    def get_geometry(self, window):
        r"""SUMMARY

        get_geometry(window)

        @Arguments:
        - `window`:

        @Return:
        """
        conn = SingleConnection.get_instance(self.display)

        rep = conn.core.GetGeometry(window).reply()

        pos_x, pos_y, width, height = rep.x, rep.y, rep.width, rep.height

        rep = conn.core.TranslateCoordinates(
            window, rep.root, pos_x, pos_y).reply()

        pos_x = rep.dst_x - (2 * pos_x)
        pos_y = rep.dst_y - (2 * pos_y)

        return GeometryInfo(pos_x, pos_y, width, height)

* Mon 03 Mar 2014 04:29:22 PM JST
class GeometryInfo(object):
    r"""
    """

    __slots__ = ('x', 'y', 'width', 'height', 'time')

    def __init__(self, x, y, width, height):
        r"""

        @Arguments:
        - `x`:
        - `y`:
        - `width`:
        - `height`:
        """
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.time = time.time()

    def __repr__(self, ):
        r"""SUMMARY

        __repr__()

        @Return:
        """
        fmt = ('{0.__class__.__name__}(x={0.x}, y={0.y}, '
               'width={0.width}, height={0.height}, time={0.time})').format
        return fmt(self)


* Mon 03 Mar 2014 04:30:46 PM JST
from xahk.xconnection import Connection as con
c=con()

* Mon 03 Mar 2014 04:31:04 PM JST
comix=109051907
* Mon 03 Mar 2014 04:31:06 PM JST

* Mon 03 Mar 2014 04:31:06 PM JST

* Mon 03 Mar 2014 04:31:06 PM JST

* Mon 03 Mar 2014 04:31:10 PM JST
comix=109051907
* Mon 03 Mar 2014 04:31:54 PM JST
    @property
    def extensions(self, ):
        r"""SUMMARY

        extensions()

        @Return:
        """
        return CON.get_ext(display=self.display)

* Mon 03 Mar 2014 04:33:33 PM JST
return 
* Mon 03 Mar 2014 04:34:28 PM JST
connection
* Mon 03 Mar 2014 04:34:33 PM JST
connection.
* Mon 03 Mar 2014 04:36:13 PM JST
core.
* Mon 03 Mar 2014 04:37:48 PM JST
geo.
* Mon 03 Mar 2014 04:37:54 PM JST
    @property
    def properties(self, ):
        r"""SUMMARY

        properties()

        @Return:
        """
        return self.extensions.properties

* Mon 03 Mar 2014 04:39:00 PM JST
    @property
    def properties(self, ):
        r"""SUMMARY

        properties()

        @Return:
        """
        return self.extensions.properties


* Mon 03 Mar 2014 04:39:04 PM JST
    @property
    def core(self, ):
        r"""SUMMARY

        core()

        @Return:
        """
        return self.connection.core


* Mon 03 Mar 2014 04:41:57 PM JST
core.
* Mon 03 Mar 2014 04:43:20 PM JST
"\C-l" 'ac-stop
* Mon 03 Mar 2014 04:43:58 PM JST
("\t"   'ac-stop)
* Mon 03 Mar 2014 04:46:44 PM JST
Modified
* Mon 03 Mar 2014 04:48:10 PM JST
disable
* Mon 03 Mar 2014 04:48:11 PM JST
to disable
* Mon 03 Mar 2014 04:48:43 PM JST

* Mon 03 Mar 2014 04:48:43 PM JST

* Mon 03 Mar 2014 04:48:43 PM JST
;;    disable tab 

* Mon 03 Mar 2014 04:50:39 PM JST
connection.
* Mon 03 Mar 2014 04:50:57 PM JST
self.
* Mon 03 Mar 2014 04:53:58 PM JST
class WindowAbstract(DisplayName):
    r"""
    """

    def __init__(self, id, display=None):
        r"""SUMMARY

        __init__(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        DisplayName.__init__(self, display=display)
        self.id = id

    def __int__(self, ):
        return self.id

    def __cmp__(self, other):
        if isinstance(other, WindowAbstract):
            return cmp(self.id, other.id)
        return cmp(self.id, other)

    def __repr__(self, ):
        return '{0.__class__.__name__}(id={0.id})'.format(self)

* Mon 03 Mar 2014 04:54:21 PM JST

* Mon 03 Mar 2014 04:54:21 PM JST

* Mon 03 Mar 2014 04:54:21 PM JST
        DisplayName.__init__(self, display=display)

* Mon 03 Mar 2014 04:54:23 PM JST
id
* Mon 03 Mar 2014 04:54:25 PM JST
id
* Mon 03 Mar 2014 04:54:30 PM JST
id
* Mon 03 Mar 2014 04:54:35 PM JST
self.id
* Mon 03 Mar 2014 04:54:53 PM JST
id
* Mon 03 Mar 2014 04:54:56 PM JST
id
* Mon 03 Mar 2014 04:55:00 PM JST
id
* Mon 03 Mar 2014 04:55:01 PM JST
self.id
* Mon 03 Mar 2014 04:55:17 PM JST
id
* Mon 03 Mar 2014 04:55:24 PM JST
id
* Mon 03 Mar 2014 04:55:53 PM JST
extensions
* Mon 03 Mar 2014 04:55:59 PM JST
exten
* Mon 03 Mar 2014 04:56:08 PM JST
id
* Mon 03 Mar 2014 04:56:08 PM JST
self.id
* Mon 03 Mar 2014 04:56:55 PM JST
self.get_full_property(window, '_NET_WM_WINDOW_TYPE')
* Mon 03 Mar 2014 04:58:17 PM JST
'_NET_WM_WINDOW_TYPE'
* Mon 03 Mar 2014 04:58:44 PM JST
extensions
* Mon 03 Mar 2014 04:58:48 PM JST
id
* Mon 03 Mar 2014 04:58:49 PM JST
self.id
* Mon 03 Mar 2014 05:00:26 PM JST
Window(
* Mon 03 Mar 2014 05:06:52 PM JST
DisplayName
* Mon 03 Mar 2014 05:06:54 PM JST
DisplayName
* Mon 03 Mar 2014 05:16:53 PM JST
display
* Mon 03 Mar 2014 05:17:11 PM JST
CON.get_ext(display=self.display)
* Mon 03 Mar 2014 05:17:32 PM JST

* Mon 03 Mar 2014 05:17:33 PM JST

* Mon 03 Mar 2014 05:17:33 PM JST
        # return self.properties.net_wm_window_type(self.id)

* Mon 03 Mar 2014 05:22:39 PM JST
extensions
* Mon 03 Mar 2014 05:22:44 PM JST
extensions
* Mon 03 Mar 2014 05:22:47 PM JST
id
* Mon 03 Mar 2014 05:22:48 PM JST
self.id
* Mon 03 Mar 2014 05:22:50 PM JST
id
* Mon 03 Mar 2014 05:22:50 PM JST
self.id
* Mon 03 Mar 2014 05:31:51 PM JST
get_
* Mon 03 Mar 2014 05:33:47 PM JST
109051907
* Mon 03 Mar 2014 05:36:21 PM JST
return 
* Mon 03 Mar 2014 05:36:29 PM JST
self.window.query_tree()
* Mon 03 Mar 2014 05:36:47 PM JST
self.window.query_recursive_tree()
* Mon 03 Mar 2014 05:36:53 PM JST

* Mon 03 Mar 2014 05:36:53 PM JST

* Mon 03 Mar 2014 05:36:53 PM JST
        return 

* Mon 03 Mar 2014 05:38:44 PM JST
DestroySubWindows
* Mon 03 Mar 2014 05:38:57 PM JST
DestroySubwindows               QueryKeymap                    
* Mon 03 Mar 2014 05:38:59 PM JST
DestroySubwindows
* Mon 03 Mar 2014 05:40:48 PM JST
destroy_sub_windows
* Mon 03 Mar 2014 05:40:57 PM JST
destroy_subwindows
* Mon 03 Mar 2014 05:45:21 PM JST
'_NET_WM_WINDOW_TYPE'
* Mon 03 Mar 2014 05:45:41 PM JST
'_NET_SUPPORTED'
* Mon 03 Mar 2014 06:11:22 PM JST
'_NET_CLIENT_LIST'
* Mon 03 Mar 2014 06:11:54 PM JST
'_NET_CLIENT_LIST_STACKING'
* Mon 03 Mar 2014 06:12:13 PM JST
'_NET_NUMBER_OF_DESKTOPS'
* Mon 03 Mar 2014 06:16:14 PM JST
properties
* Mon 03 Mar 2014 06:16:30 PM JST
'_NET_DESKTOP_GEOMETRY'
* Mon 03 Mar 2014 06:16:33 PM JST
return self.window.get_full_property('
* Mon 03 Mar 2014 06:16:41 PM JST
'_NET_DESKTOP_GEOMETRY'
* Mon 03 Mar 2014 06:16:53 PM JST
get_full_property(window, '_NET_DESKTOP_VIEWPORT')
* Mon 03 Mar 2014 06:17:05 PM JST
window, 
* Mon 03 Mar 2014 06:17:32 PM JST
'_NET_CURRENT_DESKTOP'
* Mon 03 Mar 2014 06:18:02 PM JST
.get_full_property(window, '_NET_DESKTOP_NAMES')
* Mon 03 Mar 2014 06:18:11 PM JST
window, 
* Mon 03 Mar 2014 06:18:19 PM JST
.get_full_property(window, '_NET_ACTIVE_WINDOW')
* Mon 03 Mar 2014 06:18:26 PM JST
window, 
* Mon 03 Mar 2014 06:18:35 PM JST
.get_full_property(window, '_NET_WORKAREA')
* Mon 03 Mar 2014 06:18:43 PM JST
window, 
* Mon 03 Mar 2014 06:19:04 PM JST
.get_full_property(window, '_NET_VIRTUAL_ROOTS')
* Mon 03 Mar 2014 06:19:12 PM JST
window, 
* Mon 03 Mar 2014 06:19:25 PM JST
'_NET_SUPPORTING_WM_CHECK'
* Mon 03 Mar 2014 06:19:53 PM JST
'_NET_DESKTOP_LAYOUT'
* Mon 03 Mar 2014 06:20:09 PM JST
properties.net_desktop_layout(self.id)
* Mon 03 Mar 2014 06:20:27 PM JST
'_NET_DESKTOP_LAYOUT'
* Mon 03 Mar 2014 06:20:44 PM JST
'_NET_DESKTOP_LAYOUT'
* Mon 03 Mar 2014 06:21:25 PM JST
'_NET_WM_USER_TIME'
* Mon 03 Mar 2014 06:22:10 PM JST
    def move(self, window, **changes):
        r"""SUMMARY

        configure(window, **changes)

        @Arguments:
        - `window`:
        - `**changes`:

        @Return:
        """
        con = SingleConnection.get_instance(display=self.display)
        mask = 0
        values = []
        for key in ('x', 'y', 'width', 'height'):
            if key not in changes:
                continue
            mask |= getattr(ConfigWindow, key.capitalize())
            values.append(changes[key])
        if mask:
            con.core.ConfigureWindow(window, mask, values)

* Mon 03 Mar 2014 06:24:21 PM JST
        mask = 0
        values = []
        for key in ('x', 'y', 'width', 'height'):
            if key not in changes:
                continue
            mask |= getattr(ConfigWindow, key.capitalize())
            values.append(changes[key])
        if mask:
            con.core.ConfigureWindow(window, mask, values)

* Mon 03 Mar 2014 06:24:24 PM JST

* Mon 03 Mar 2014 06:24:24 PM JST

* Mon 03 Mar 2014 06:24:24 PM JST
        self.window

* Mon 03 Mar 2014 06:24:32 PM JST
con
* Mon 03 Mar 2014 06:24:48 PM JST
def move(self, **kwargs
* Mon 03 Mar 2014 06:26:01 PM JST
from xcb.xproto import ConfigWindow, InputFocus, Time
* Mon 03 Mar 2014 06:26:45 PM JST
window
* Mon 03 Mar 2014 06:29:37 PM JST
PointerRoot
* Mon 03 Mar 2014 06:30:05 PM JST

* Mon 03 Mar 2014 06:30:05 PM JST

* Mon 03 Mar 2014 06:30:05 PM JST
        self.extensions.focus(self.id)

* Mon 03 Mar 2014 06:39:39 PM JST

* Mon 03 Mar 2014 06:39:39 PM JST

* Mon 03 Mar 2014 06:39:39 PM JST
        self.extensions.destroy.close(self.id)

* Mon 03 Mar 2014 06:40:34 PM JST
KillClient
* Mon 03 Mar 2014 06:40:40 PM JST

* Mon 03 Mar 2014 06:40:40 PM JST

* Mon 03 Mar 2014 06:40:40 PM JST
        self.connection.core.KillClient(self.id)

* Mon 03 Mar 2014 06:41:03 PM JST
'_NET_WM_NAME'
* Mon 03 Mar 2014 06:41:14 PM JST
get_
* Mon 03 Mar 2014 06:41:43 PM JST
'WM_CLASS'
* Mon 03 Mar 2014 06:42:19 PM JST
self.window.get_full_property('WM_CLASS')
* Mon 03 Mar 2014 06:43:29 PM JST
return 
* Mon 03 Mar 2014 06:43:44 PM JST
'_NET_WM_PID'
* Mon 03 Mar 2014 06:43:51 PM JST
get_
* Mon 03 Mar 2014 06:44:35 PM JST
'_NET_WM_STATE'
* Mon 03 Mar 2014 06:45:02 PM JST
states
* Mon 03 Mar 2014 06:45:48 PM JST
'_NET_WM_DESKTOP'
* Mon 03 Mar 2014 06:47:46 PM JST
'_NET_FRAME_EXTENTS'
* Mon 03 Mar 2014 06:48:00 PM JST
'_NET_WM_ICON_NAME'
* Mon 03 Mar 2014 06:48:46 PM JST
'_NET_WM_USER_TIME_WINDOW'
* Mon 03 Mar 2014 06:49:33 PM JST
self.window.get_full_property('_NET_WM_USER_TIME_WINDOW')
* Mon 03 Mar 2014 06:49:53 PM JST
        if result:
            return result[0]
        return result

* Mon 03 Mar 2014 06:50:20 PM JST
'_NET_WM_ALLOWED_ACTIONS'
* Mon 03 Mar 2014 10:49:20 PM JST
    @property
    def name(self, ):
        r"""SUMMARY

        get_name()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_NAME')

    @property
    def wmclass(self, ):
        r"""SUMMARY

        get_class()

        @Return:
        """
        clsstring = self.window.get_full_property('WM_CLASS')
        lis = clsstring.split('\0')
        lis.remove('')
        return lis

    @property
    def pid(self, ):
        r"""SUMMARY

        get_pid()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_PID')


* Mon 03 Mar 2014 10:59:31 PM JST
types 
* Mon 03 Mar 2014 11:00:09 PM JST

* Mon 03 Mar 2014 11:00:09 PM JST

* Mon 03 Mar 2014 11:00:09 PM JST
            if types:

* Mon 03 Mar 2014 11:00:28 PM JST
            if types:
                types = types[0]

* Mon 03 Mar 2014 11:16:57 PM JST
self._dispatcher(types, winid, display=self.display)
* Mon 03 Mar 2014 11:29:06 PM JST
g=c.ext.query_recursive_tree(482)
lis=list(g)

comix=109051907

def getw(win):
    r"""SUMMARY
    
    getw(win)
    
    @Arguments:
    - `win`:
    
    @Return:
    """
    for w in lis:
        if win == int(w):
            return w

* Mon 03 Mar 2014 11:29:46 PM JST
from xahk.xconnection import Connection as con
c=con()

g=c.ext.query_recursive_tree(482)
lis=list(g)

comix=109051907

def getw(win):
    r"""SUMMARY
    
    getw(win)
    
    @Arguments:
    - `win`:
    
    @Return:
    """
    for w in lis:
        if win == int(w):
            return w

* Mon 03 Mar 2014 11:40:07 PM JST
import 
* Mon 03 Mar 2014 11:40:11 PM JST

* Mon 03 Mar 2014 11:40:11 PM JST

* Mon 03 Mar 2014 11:40:11 PM JST
from xahk

* Mon 03 Mar 2014 11:42:21 PM JST
self._windowclass
* Mon 03 Mar 2014 11:42:42 PM JST
self._windowclass(winid, display=self.display)
* Mon 03 Mar 2014 11:58:38 PM JST
class WindowTypesAbstract(object):
    r"""Summery
    """

    def __init__(self, window):
        r"""SUMMARY

        __init__(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        if not isinstance(window, Window):
            # TODO: (Atami) [2014/03/03]
            raise StandardError()
        self.window = window

    def __int__(self, ):
        return int(self.window)

    def __cmp__(self, other):
        if isinstance(other, WindowTypesAbstract):
            return cmp(self.window, other.window)
        return cmp(int(self), other)

    def __repr__(self, ):
        return '{0.__class__.__name__}(window={0.window})'.format(self)


class WindowBase(WindowTypesAbstract):
    r"""
    """

    def list_properties(self, ):
        r"""SUMMARY

        list_properties()

        @Return:
        """
        return self.window.list_properties()

    @property
    def types(self, ):
        r"""SUMMARY

        get_window_type()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_WINDOW_TYPE')

    def get_geometry(self, ):
        r"""SUMMARY

        get_geometry()

        @Return:
        """
        return self.window.get_geometry()

    @property
    def x(self, ):
        r"""SUMMARY

        get_x()

        @Return:
        """
        return self.get_geometry().x

    @property
    def y(self, ):
        r"""SUMMARY

        get_y()

        @Return:
        """
        return self.get_geometry().y

    @property
    def height(self, ):
        r"""SUMMARY

        get_height()

        @Return:
        """
        return self.get_geometry().height

    @property
    def width(self, ):
        r"""SUMMARY

        get_width()

        @Return:
        """
        return self.get_geometry().width


class WindowSubBase(WindowBase):
    r"""
    """

    def query_tree(self, ):
        r"""SUMMARY

        query_tree()

        @Return:
        """
        for win in self.window.query_tree():
            yield win

    def query_subwindows(self, ):
        r"""SUMMARY

        query_subwindows()

        @Return:
        """
        for win in self.window.query_recursive_tree():
            yield win

    def grab(self, ):
        r"""SUMMARY

        grab()

        @Return:
        """
        pass

    def make_subwindow(self, ):
        r"""SUMMARY

        make_subwindow()

        @Return:
        """
        pass

    def destroy_subwindows(self, ):
        r"""SUMMARY

        destroy_subwindows()

        @Return:
        """
        self.window.destroy_subwindows()


class StaticWindow(WindowSubBase):
    r"""
    """

    def get_supported(self, ):
        r"""SUMMARY

        get_supported()

        @Return:
        """
        return self.window.get_full_property('_NET_SUPPORTED')

    def get_client_list(self, ):
        r"""SUMMARY

        get_client_list()

        @Return:
        """
        return self.window.get_full_property('_NET_CLIENT_LIST')

    def get_client_list_stacking(self, ):
        r"""SUMMARY

        get_client_list_stacking()

        @Return:
        """
        return self.window.get_full_property('_NET_CLIENT_LIST_STACKING')

    def get_number_of_desktops(self, ):
        r"""SUMMARY

        get_number_of_desktops()

        @Return:
        """
        return self.window.get_full_property('_NET_NUMBER_OF_DESKTOPS')

    def get_desktop_geometry(self, ):
        r"""SUMMARY

        get_desktop_geometry()

        @Return:
        """
        return self.window.get_full_property('_NET_DESKTOP_GEOMETRY')

    def get_desktop_viewport(self, ):
        r"""SUMMARY

        get_desktop_viewport()

        @Return:
        """
        return self.window.get_full_property('_NET_DESKTOP_VIEWPORT')

    def get_current_desktop(self, ):
        r"""SUMMARY

        get_current_desktop()

        @Return:
        """
        return self.window.get_full_property('_NET_CURRENT_DESKTOP')

    def get_desktop_name(self, ):
        r"""SUMMARY

        get_desktop_name()

        @Return:
        """
        return self.window.get_full_property('_NET_DESKTOP_NAMES')

    def get_active_window(self, ):
        r"""SUMMARY

        get_active_window()

        @Return:
        """
        return self.window.get_full_property('_NET_ACTIVE_WINDOW')

    def get_workarea(self, ):
        r"""SUMMARY

        get_workarea()

        @Return:
        """
        return self.window.get_full_property('_NET_WORKAREA')

    def get_virtual_roots(self, ):
        r"""SUMMARY

        get_virtual_roots()

        @Return:
        """
        return self.window.get_full_property('_NET_VIRTUAL_ROOTS')

    def get_supporting_wm_check(self, ):
        r"""SUMMARY

        get_supporting_wm_check()

        @Return:
        """
        return self.window.get_full_property('_NET_SUPPORTING_WM_CHECK')

    def get_desktop_layout(self, ):
        r"""SUMMARY

        get_desktop_layout()

        @Return:
        """
        return self.window.get_full_property('_NET_DESKTOP_LAYOUT')

    def get_showing_desktop(self, ):
        r"""SUMMARY

        get_showing_desktop()

        @Return:
        """
        return self.window.get_full_property('_NET_DESKTOP_LAYOUT')

    def get_user_time(self, ):
        r"""SUMMARY

        get_user_time()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_USER_TIME')


class DynamicWindow(WindowSubBase):
    r"""
    """

    @property
    def name(self, ):
        r"""SUMMARY

        get_name()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_NAME')

    @property
    def wmclass(self, ):
        r"""SUMMARY

        get_class()

        @Return:
        """
        clsstring = self.window.get_full_property('WM_CLASS')
        lis = clsstring.split('\0')
        lis.remove('')
        return lis

    @property
    def pid(self, ):
        r"""SUMMARY

        get_pid()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_PID')

    def move(self, **changes):
        r"""SUMMARY

        move(**kwargs)

        @Arguments:
        - `**kwargs`:

        @Return:
        """
        mask = 0
        values = []
        for key in ('x', 'y', 'width', 'height'):
            if key not in changes:
                continue
            mask |= getattr(ConfigWindow, key.capitalize())
            values.append(changes[key])
        if mask:
            self.window.core.ConfigureWindow(self.window.id, mask, values)

    def focus(self, ):
        r"""SUMMARY

        focus()

        @Return:
        """
        self.window.core.SetInputFocus(
            InputFocus.PointerRoot, self.window.id, Time.CurrentTime)

    def close(self, ):
        r"""SUMMARY

        close()

        @Return:
        """
        self.window.extensions.destroy.close(self.window.id)

    def kill(self, ):
        r"""SUMMARY

        kill()

        @Return:
        """
        self.window.core.KillClient(self.window.id)

    def list_states(self, ):
        r"""SUMMARY

        get_states()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_STATE')

    def get_desktop_number(self, ):
        r"""SUMMARY

        get_desktop_num()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_DESKTOP')

    def get_frame_extents(self, ):
        r"""SUMMARY

        get_frame_extents()

        @Return:
        """
        return self.window.get_full_property('_NET_FRAME_EXTENTS')

    def get_icon(self, ):
        r"""SUMMARY

        get_icon()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_ICON_NAME')

    def get_user_window_time(self, ):
        r"""SUMMARY

        get_user_window_time()

        @Return:
        """
        result = self.window.get_full_property('_NET_WM_USER_TIME_WINDOW')
        if result:
            return result[0]
        return result

    def list_allowed_actions(self, ):
        r"""SUMMARY

        get_allowed_actions()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_ALLOWED_ACTIONS')


class WindowSplashType(WindowBase):
    r"""
    """
    type_name = '_NET_WM_WINDOW_TYPE_SPLASH'


class WindowNormalType(DynamicWindow):
    r"""
    """
    type_name = '_NET_WM_WINDOW_TYPE_NORMAL'


class WindowDesktopType(StaticWindow):
    r"""
    """
    type_name = '_NET_WM_WINDOW_TYPE_DESKTOP'


class WindowDockType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]

    type_name = '_NET_WM_WINDOW_TYPE_DOCK'


class WindowToolbarType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_TOOLBAR'


class WindowMenuType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_MENU'


class WindowUtilityType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_UTILITY'


class WindowDialogType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_DIALOG'


class WindowDropdownMenuType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU'


class WindowPopupMenuType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_POPUP_MENU'


class WindowTooltipType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_TOOLTIP'


class WindowNotificationType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_NOTIFICATION'


class WindowComboType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_COMBO'


class WindowDNDType(WindowBase):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_DND'


class WindowTypesDispatchBuilder(AtomDispatchBuilder):
    r"""
    """
    missing = WindowBase

    _types_list = (WindowNormalType,
                   WindowSplashType,
                   WindowDesktopType,
                   WindowDockType,
                   WindowToolbarType,
                   WindowMenuType,
                   WindowUtilityType,
                   WindowDialogType,
                   WindowDropdownMenuType,
                   WindowPopupMenuType,
                   WindowTooltipType,
                   WindowNotificationType,
                   WindowComboType,
                   WindowDNDType,)

* Mon 03 Mar 2014 11:58:47 PM JST

* Mon 03 Mar 2014 11:58:47 PM JST

* Mon 03 Mar 2014 11:58:47 PM JST
from xcb.xproto import ConfigWindow, InputFocus, Time

* Mon 03 Mar 2014 11:58:55 PM JST

* Mon 03 Mar 2014 11:58:55 PM JST

* Mon 03 Mar 2014 11:58:55 PM JST
from xahk.xconnection.extensions.atom import AtomDispatchBuilder

* Tue 04 Mar 2014 12:00:47 AM JST
Window
* Tue 04 Mar 2014 12:01:12 AM JST

* Tue 04 Mar 2014 12:01:13 AM JST

* Tue 04 Mar 2014 12:01:13 AM JST
        from xahk.window_types import WindowTypesDispatchBuilder

* Tue 04 Mar 2014 12:44:50 AM JST
deque(
* Tue 04 Mar 2014 12:48:11 AM JST

* Tue 04 Mar 2014 12:48:11 AM JST

* Tue 04 Mar 2014 12:48:11 AM JST
        task = []

* Tue 04 Mar 2014 12:51:02 AM JST
foreign_news
* Tue 04 Mar 2014 12:54:45 AM JST
        if THURSDAY != WEEKDAY:
            self.tasks.remove(create_recipe)

* Tue 04 Mar 2014 12:54:52 AM JST

* Tue 04 Mar 2014 12:54:52 AM JST

* Tue 04 Mar 2014 12:54:52 AM JST
        if THURSDAY != WEEKDAY:

* Tue 04 Mar 2014 12:55:48 AM JST
        if THURSDAY == WEEKDAY:
            self.tasks.remove(foreign_news)
        else:
            self.tasks.remove(create_recipe)
        if SATURDAY != WEEKDAY:
            self.tasks.remove(nation)


* Tue 04 Mar 2014 01:06:22 AM JST
2014-03-04-010453.junk.py
* Tue 04 Mar 2014 01:08:13 AM JST
dirname()
* Tue 04 Mar 2014 01:09:13 AM JST
form 
* Tue 04 Mar 2014 01:15:39 AM JST
.abspath().dirname().joinpath('hello.pickle')
* Tue 04 Mar 2014 01:17:01 AM JST
path(__file__).abspath().dirname() #.joinpath('daily.pickle')
* Tue 04 Mar 2014 01:19:08 AM JST
from path 
* Tue 04 Mar 2014 01:19:33 AM JST
.dirname()
* Tue 04 Mar 2014 01:20:45 AM JST
__file__
* Tue 04 Mar 2014 01:23:14 AM JST
os.path.abspath(FILENAME)
* Tue 04 Mar 2014 01:23:17 AM JST

* Tue 04 Mar 2014 01:23:17 AM JST

* Tue 04 Mar 2014 01:23:17 AM JST
        abspath = 

* Tue 04 Mar 2014 01:26:24 AM JST
        directory = os.path.dirname(os.path.abspath(FILENAME))
        filepath = os.path.join(directory, self.pickle_name)

* Tue 04 Mar 2014 01:26:28 AM JST
self
* Tue 04 Mar 2014 01:26:38 AM JST
filepath
* Tue 04 Mar 2014 01:27:16 AM JST
res = 
* Tue 04 Mar 2014 01:27:40 AM JST
pep381client
* Tue 04 Mar 2014 01:27:40 AM JST
import pep381client
* Tue 04 Mar 2014 01:39:06 AM JST
        
* Tue 04 Mar 2014 01:39:08 AM JST
        
* Tue 04 Mar 2014 01:45:44 AM JST
            
* Tue 04 Mar 2014 01:45:45 AM JST
waiter
* Tue 04 Mar 2014 01:45:50 AM JST
            
* Tue 04 Mar 2014 01:45:51 AM JST
feedly
* Tue 04 Mar 2014 02:01:28 AM JST
self.tasks.popleft()
* Tue 04 Mar 2014 02:03:17 AM JST
self.pickle_name
* Tue 04 Mar 2014 02:03:37 AM JST

* Tue 04 Mar 2014 02:03:37 AM JST

* Tue 04 Mar 2014 02:03:37 AM JST
        directory = os.path.dirname(os.path.abspath(FILENAME))

* Tue 04 Mar 2014 02:03:37 AM JST
        directory = os.path.dirname(os.path.abspath(FILENAME))

* Tue 04 Mar 2014 02:03:37 AM JST
        directory = os.path.dirname(os.path.abspath(FILENAME))
        filepath = os.path.join(directory, Daily.pickle_name)

* Tue 04 Mar 2014 02:03:39 AM JST
filepath
* Tue 04 Mar 2014 02:06:39 AM JST
exists()
* Tue 04 Mar 2014 02:08:29 AM JST
path.path(Daily.pickle_name).exists()
* Tue 04 Mar 2014 02:08:40 AM JST
.exists()
* Tue 04 Mar 2014 02:09:29 AM JST
self, 
* Tue 04 Mar 2014 02:09:33 AM JST
self
* Tue 04 Mar 2014 02:12:20 AM JST
exists
* Tue 04 Mar 2014 02:26:11 AM JST

* Tue 04 Mar 2014 02:26:11 AM JST

* Tue 04 Mar 2014 02:26:11 AM JST
    pfile = path.path(Daily.pickle_name)

* Tue 04 Mar 2014 02:38:03 AM JST

* Tue 04 Mar 2014 02:38:04 AM JST

* Tue 04 Mar 2014 02:38:04 AM JST
                  foreign_news,

* Tue 04 Mar 2014 02:38:05 AM JST
                  foreign_news,

* Tue 04 Mar 2014 02:38:05 AM JST
                  foreign_news,
                  nation,

* Tue 04 Mar 2014 02:51:31 AM JST
tempdir
* Tue 04 Mar 2014 02:53:32 AM JST
None
* Tue 04 Mar 2014 02:56:04 AM JST
self, 
* Tue 04 Mar 2014 02:56:20 AM JST
Daily.
* Tue 04 Mar 2014 02:58:14 AM JST
task
* Tue 04 Mar 2014 03:01:10 AM JST
class TaskList(object):
    r"""SUMMARY
    """

    def __init__(self, tasklist, filepath):
        r"""

        @Arguments:
        - `tasklist`:
        - `filepath`:
        """
        self._tasklist = tasklist
        self._filepath = filepath

    def start(self, ):
        r"""SUMMARY

        start()

        @Return:
        """
        while self._tasklist:
            self._tasklist[0]()
            self.dump()


    def dump(self, ):
        r"""SUMMARY

        dump()

        @Return:
        """
        with open(self._filepath, 'wb') as files:
            cPickle.dump(self, files, cPickle.HIGHEST_PROTOCOL)

    @staticmethod
    def load(filepath):
        r"""SUMMARY

        load(filepath)

        @Arguments:
        - `filepath`:

        @Return:
        """
        return cPickle.load(open(filepath, 'rb'))

    @staticmethod
    def resume(filepath):
        r"""SUMMARY

        resume()

        @Return:
        """
        TaskList.load(filepath).start()



* Tue 04 Mar 2014 03:04:00 AM JST
_tasklist.popleft()
* Tue 04 Mar 2014 03:06:08 AM JST

    def dump(self, ):
        r"""SUMMARY

        dump()

        @Return:
        """
        with open(self._filepath, 'wb') as files:
            cPickle.dump(self, files, cPickle.HIGHEST_PROTOCOL)


* Tue 04 Mar 2014 03:07:17 AM JST
TaskList
* Tue 04 Mar 2014 03:07:58 AM JST
(prepare,
                  rss,
                  # weather,
                  weather2,
                  chrome_move_left_display,
                  webpage,
                  waiter,
                  diary,
                  archive_recipe,
                  # clean_today_recipe,
                  # lotate_recipe_link,
                  # show_next_recipe,
                  # create_recipe,
                  feedly,
                  v2c,
        )
* Tue 04 Mar 2014 03:08:21 AM JST

* Tue 04 Mar 2014 03:08:21 AM JST

* Tue 04 Mar 2014 03:08:21 AM JST
                  # weather,

* Tue 04 Mar 2014 03:08:28 AM JST
        
* Tue 04 Mar 2014 03:08:47 AM JST
'/root/.pylib/daily.pickle'
* Tue 04 Mar 2014 03:08:49 AM JST
pickle_name = '/root/.pylib/daily.pickle'
* Tue 04 Mar 2014 03:11:03 AM JST

* Tue 04 Mar 2014 03:11:03 AM JST

* Tue 04 Mar 2014 03:11:03 AM JST
        task.start()

* Tue 04 Mar 2014 03:11:08 AM JST
task = 
* Tue 04 Mar 2014 03:11:44 AM JST
        if THURSDAY == WEEKDAY:
            self.tasks.remove(foreign_news)
            self.tasks.remove(waiter)
            self.tasks.remove(feedly)
            self.tasks.remove(v2c)
        else:
            # self.tasks.remove(create_recipe)
            pass
        if SATURDAY != WEEKDAY:
            self.tasks.remove(nation)

* Tue 04 Mar 2014 03:12:06 AM JST
            
* Tue 04 Mar 2014 03:12:10 AM JST
    
* Tue 04 Mar 2014 03:12:11 AM JST
        
* Tue 04 Mar 2014 03:12:31 AM JST
self.
* Tue 04 Mar 2014 03:12:33 AM JST
self.
* Tue 04 Mar 2014 03:12:35 AM JST
self.
* Tue 04 Mar 2014 03:12:36 AM JST
self.
* Tue 04 Mar 2014 03:17:50 AM JST

* Tue 04 Mar 2014 03:17:50 AM JST

* Tue 04 Mar 2014 03:17:50 AM JST
        pass

* Tue 04 Mar 2014 03:18:12 AM JST
self.
* Tue 04 Mar 2014 03:26:40 AM JST

* Tue 04 Mar 2014 03:26:41 AM JST

* Tue 04 Mar 2014 03:26:41 AM JST
    # parser.print_usage()

* Tue 04 Mar 2014 03:26:41 AM JST
    # parser.print_usage()

* Tue 04 Mar 2014 03:26:41 AM JST
    # parser.print_usage()
    LOG.info('{0:*^30}'.format(' daily start '))

* Tue 04 Mar 2014 03:26:47 AM JST

* Tue 04 Mar 2014 03:26:47 AM JST

* Tue 04 Mar 2014 03:26:47 AM JST
    # parser.print_usage()

* Tue 04 Mar 2014 03:26:53 AM JST
LOG.info('{0:*^30}'.format(' daily start '))
* Tue 04 Mar 2014 03:27:00 AM JST
start
* Tue 04 Mar 2014 03:31:26 AM JST
foreign_news
* Tue 04 Mar 2014 03:31:29 AM JST

* Tue 04 Mar 2014 03:31:29 AM JST

* Tue 04 Mar 2014 03:31:29 AM JST
        tasks.remove(waiter)

* Tue 04 Mar 2014 03:31:29 AM JST
        tasks.remove(waiter)

* Tue 04 Mar 2014 03:31:29 AM JST
        tasks.remove(waiter)
        tasks.remove(feedly)

* Tue 04 Mar 2014 03:31:30 AM JST
        tasks.remove(waiter)
        tasks.remove(feedly)

* Tue 04 Mar 2014 03:31:30 AM JST
        tasks.remove(waiter)
        tasks.remove(feedly)
        tasks.remove(v2c)

* Tue 04 Mar 2014 03:33:26 AM JST
MANUAL_START = time.strftime('%T')
* Tue 04 Mar 2014 03:33:43 AM JST
manual_start
* Tue 04 Mar 2014 04:05:57 AM JST
window_type_dispatch(
* Tue 04 Mar 2014 04:06:01 AM JST
window_type_dispatch(
* Tue 04 Mar 2014 04:06:01 AM JST
self.window_type_dispatch(
* Tue 04 Mar 2014 04:08:16 AM JST
return 
* Tue 04 Mar 2014 04:08:26 AM JST
self.extensions.query_tree(self.id)
* Tue 04 Mar 2014 04:08:47 AM JST
return 
* Tue 04 Mar 2014 04:08:54 AM JST
self.extensions.query_recursive_tree(self.id)
* Tue 04 Mar 2014 03:48:18 PM JST
cleanDownloads
* Tue 04 Mar 2014 03:48:36 PM JST
cleanBookmarks
* Tue 04 Mar 2014 03:48:52 PM JST
cleanTrash
* Tue 04 Mar 2014 03:49:02 PM JST
preexecute
* Tue 04 Mar 2014 03:49:42 PM JST
backupRemote
* Tue 04 Mar 2014 03:49:53 PM JST
king_pullbackup
* Tue 04 Mar 2014 03:50:09 PM JST
rsync_mirror_data
* Tue 04 Mar 2014 03:50:23 PM JST
reposion_thunar
* Tue 04 Mar 2014 03:50:31 PM JST
             
* Tue 04 Mar 2014 03:51:00 PM JST
vmware
* Tue 04 Mar 2014 03:51:14 PM JST
svn
* Tue 04 Mar 2014 03:51:33 PM JST
waitclosesvn
* Tue 04 Mar 2014 03:54:20 PM JST
def update():
    r"""SUMMARY
    
    update()
    
    @Return:
    """
    

* Tue 04 Mar 2014 03:55:12 PM JST
return
* Tue 04 Mar 2014 03:55:43 PM JST
CHROME_HASH
* Tue 04 Mar 2014 03:55:49 PM JST
hash_
* Tue 04 Mar 2014 03:56:10 PM JST
chrome
* Tue 04 Mar 2014 03:56:19 PM JST
        hash_ = chrome_hash()
        aptupdate()
        chrome_root(hash_)

* Tue 04 Mar 2014 03:56:32 PM JST
hash_ = 
* Tue 04 Mar 2014 03:56:39 PM JST
hash_
* Tue 04 Mar 2014 03:56:49 PM JST

* Tue 04 Mar 2014 03:56:49 PM JST

* Tue 04 Mar 2014 03:56:49 PM JST
    global CHROME_HASH

* Tue 04 Mar 2014 03:56:53 PM JST
CHROME_HASH = 
* Tue 04 Mar 2014 03:57:35 PM JST

* Tue 04 Mar 2014 03:57:35 PM JST

* Tue 04 Mar 2014 03:57:35 PM JST
    global CHROME_HASH

* Tue 04 Mar 2014 04:02:18 PM JST
sbp.Popen(('/usr/sbin/ntpdate', 'ntp.nict.jp'))
* Tue 04 Mar 2014 04:02:49 PM JST

* Tue 04 Mar 2014 04:02:49 PM JST

* Tue 04 Mar 2014 04:02:49 PM JST
CHROME_HASH = None

* Tue 04 Mar 2014 04:07:58 PM JST
    LOGGER.info('waiting close thunar.')
    wm.WinWait().close(klass='Thunar')

* Tue 04 Mar 2014 04:10:09 PM JST
def wait_close_thunar():
    r"""SUMMARY

    wait_close_thunar()

    @Return:
    """
    LOGGER.info('waiting close thunar.')
    wm.WinWait().close(klass='Thunar')


* Tue 04 Mar 2014 04:10:46 PM JST
_wait_close_thunar
* Tue 04 Mar 2014 04:11:09 PM JST

* Tue 04 Mar 2014 04:11:09 PM JST

* Tue 04 Mar 2014 04:11:09 PM JST
             wait_close_thunar,

* Tue 04 Mar 2014 04:16:44 PM JST
def waitclosesvn():
    r"""SUMMARY

    waitclosesvn()

    @Return:
    """
    sleep(60)
    wm.WinWait().close(title='svn_pylib')
    wm.WinWait().close(title='svn_emacsd')

* Tue 04 Mar 2014 04:16:54 PM JST
_waitclosesvn
* Tue 04 Mar 2014 04:17:02 PM JST

* Tue 04 Mar 2014 04:17:02 PM JST

* Tue 04 Mar 2014 04:17:02 PM JST
             waitclosesvn,

* Tue 04 Mar 2014 04:17:20 PM JST
kihalt
* Tue 04 Mar 2014 04:18:23 PM JST
pickle_file = '/tmp/daily.pickle'
* Tue 04 Mar 2014 04:18:29 PM JST
/tmp/daily
* Tue 04 Mar 2014 04:19:58 PM JST
    tasks = [cleanDownloads,
             cleanBookmarks,
             cleanTrash,
             preexecute,
             ntpdate,
             update,
             backupRemote,
             king_pullbackup,
             rsync_mirror_data,
             reposion_thunar,
             vmware,
             svn,
             kihalt,

    ]

* Tue 04 Mar 2014 04:20:45 PM JST

* Tue 04 Mar 2014 04:20:45 PM JST

* Tue 04 Mar 2014 04:20:45 PM JST
    waitclosesvn()

* Tue 04 Mar 2014 04:21:27 PM JST

* Tue 04 Mar 2014 04:21:27 PM JST

* Tue 04 Mar 2014 04:21:28 PM JST
    LOGGER.info('{0:*^40}'.format('* Start Weekly Script. '))

* Tue 04 Mar 2014 04:21:38 PM JST
Start 
* Tue 04 Mar 2014 04:21:46 PM JST
Script
* Tue 04 Mar 2014 04:22:01 PM JST
LOGGER.info('{0:*^40}'.format(' Weekly Resume '))
* Tue 04 Mar 2014 04:22:05 PM JST
Resume
* Tue 04 Mar 2014 04:28:15 PM JST

* Tue 04 Mar 2014 04:28:15 PM JST

* Tue 04 Mar 2014 04:28:15 PM JST
    wm.WinWait().close(title='svn_pylib')

* Tue 04 Mar 2014 04:28:51 PM JST
wm.WinWait().close(title='svn_emacsd')
* Tue 04 Mar 2014 04:28:58 PM JST
sleep(30)
* Tue 04 Mar 2014 04:29:01 PM JST

* Tue 04 Mar 2014 04:29:01 PM JST

* Tue 04 Mar 2014 04:29:01 PM JST
    _waitclosesvn()

* Tue 04 Mar 2014 04:29:48 PM JST
                 
* Tue 04 Mar 2014 04:41:06 PM JST
'start
* Tue 04 Mar 2014 05:00:22 PM JST
sh.
* Tue 04 Mar 2014 05:05:48 PM JST
cryptsetup luksOpen /dev/disk/by-uuid/9016a4ca-f21a-4591-bc24
-447ec4989340 data                                                                   
* Tue 04 Mar 2014 05:05:56 PM JST
cryptsetup luksOpen /dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340 data                                                                   
* Tue 04 Mar 2014 05:05:59 PM JST
cryptsetup luksOpen /dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340 data 
* Tue 04 Mar 2014 05:08:00 PM JST
Enter passphrase for
* Tue 04 Mar 2014 05:08:55 PM JST
pex = pexpect.spawn(
        'cryptsetup luksOpen /dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340 data', maxread=4000)
* Tue 04 Mar 2014 05:09:21 PM JST
'Enter passphrase for'
* Tue 04 Mar 2014 05:11:06 PM JST
'Enter passphrase for'
* Tue 04 Mar 2014 05:11:15 PM JST
/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340
* Tue 04 Mar 2014 05:11:35 PM JST
pex.sendline(getpass('Enter passphrase for /dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340'))
* Tue 04 Mar 2014 05:13:11 PM JST
'Enter passphrase for'
* Tue 04 Mar 2014 05:13:31 PM JST
r'[#\$]'
* Tue 04 Mar 2014 05:13:51 PM JST
if 
* Tue 04 Mar 2014 05:14:09 PM JST
        
* Tue 04 Mar 2014 05:18:37 PM JST
from counter import Counter
* Tue 04 Mar 2014 05:18:49 PM JST
count = Counter(3, exceptclass=PasswordError)
* Tue 04 Mar 2014 05:23:55 PM JST
/dev/sda7 on /media/portable
* Tue 04 Mar 2014 05:29:21 PM JST

* Tue 04 Mar 2014 05:29:22 PM JST

* Tue 04 Mar 2014 05:29:22 PM JST
import path

* Tue 04 Mar 2014 05:30:55 PM JST
'/media/Data'
* Tue 04 Mar 2014 05:31:12 PM JST
import 
* Tue 04 Mar 2014 05:31:30 PM JST
isdir()
* Tue 04 Mar 2014 05:33:03 PM JST
isfile
* Tue 04 Mar 2014 05:38:18 PM JST
# raise error if 3 called
* Tue 04 Mar 2014 05:39:14 PM JST
object
* Tue 04 Mar 2014 05:39:22 PM JST
PasswordError
* Tue 04 Mar 2014 05:42:18 PM JST

* Tue 04 Mar 2014 05:42:18 PM JST

* Tue 04 Mar 2014 05:42:18 PM JST
        count() # raise error if 4 called

* Tue 04 Mar 2014 05:42:26 PM JST
count()
* Tue 04 Mar 2014 05:44:28 PM JST
        self.pex.sendline(getpass('Enter passphrase for {0}: '
                                  .format(CRYPTDISK)))
        expects = ['No key available with this passphrase.',
                   r'[#\$]', 'already exists']
        count = Counter(3, exceptclass=PasswordError)
        while 1:
            index = self.pex.expect(expects)
            if 0 == index:
                count() # raise error if 3 called
                self.pex.sendline(getpass('Enter passphrase for {0}: '
                                          .format(CRYPTDISK)))
                continue
            if index in (1, 2):
                return True

* Tue 04 Mar 2014 05:44:59 PM JST
self.
* Tue 04 Mar 2014 05:45:01 PM JST
self.
* Tue 04 Mar 2014 05:45:17 PM JST
'/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340'
* Tue 04 Mar 2014 05:45:34 PM JST
                              
* Tue 04 Mar 2014 05:45:52 PM JST
CRYPTDISK
* Tue 04 Mar 2014 05:45:54 PM JST
                                      
* Tue 04 Mar 2014 05:46:08 PM JST
True
* Tue 04 Mar 2014 05:46:22 PM JST
return 
* Tue 04 Mar 2014 05:46:42 PM JST

* Tue 04 Mar 2014 05:46:42 PM JST

* Tue 04 Mar 2014 05:46:42 PM JST
    expects = ['Enter passphrase for', r'[#\$]']

* Tue 04 Mar 2014 05:46:58 PM JST
StandardError()
* Tue 04 Mar 2014 05:46:59 PM JST
raise StandardError()
* Tue 04 Mar 2014 05:49:33 PM JST
if not os.path.exists('/dev/mapper/data'):
* Tue 04 Mar 2014 05:50:01 PM JST
    # cryptdisk
    pex = pexpect.spawn('cryptsetup luksOpen '
                        '/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340'
                        ' data', maxread=4000)
    disk = '/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340'
    pex.sendline(getpass('Enter passphrase for {0}: '.format(disk)))
    expects = ['No key available with this passphrase.',
               r'[#\$]', 'already exists']
    count = Counter(3, exceptclass=PasswordError)
    while 1:
        index = pex.expect(expects)
        if 0 == index:
            count() # raise error if 3 called
            pex.sendline(getpass('Enter passphrase for {0}: '.format(disk)))
            continue
        if index in (1, 2):
            break


* Tue 04 Mar 2014 05:50:12 PM JST
    if not os.path.exists('/dev/mapper/data'):
        return -1

* Tue 04 Mar 2014 05:50:19 PM JST
not 
* Tue 04 Mar 2014 05:52:43 PM JST
    mounted = mount()
    for dev, dir_ in (('/dev/sda7', '/media/portable'),
                      ('/dev/sda5', '/media/Data')):
        if '{} on {}'.format(dev, dir_) in mounted:
            continue
        targets = path(dir_)
        if not targets.isdir():
            if targets.exists():
                raise StandardError('File already exists {}'.format(targets))
            targets.mkdir()
        mount(dev, dir_)


* Tue 04 Mar 2014 05:54:28 PM JST
"mounting '{} {}'".format(dev, dir_)
* Tue 04 Mar 2014 05:57:15 PM JST
mounted = mount()
* Tue 04 Mar 2014 05:58:02 PM JST
        if '{} on {}'.format(dev, dir_) in mounted:
            print("already mounting '{} {}'".format(dev, dir_))
            continue
        targets = path(dir_)
        if not targets.isdir():
            if targets.exists():
                raise StandardError('File already exists {}'.format(targets))
            targets.mkdir()
        mount(dev, dir_)
        print("mounting '{} {}'".format(dev, dir_))

* Tue 04 Mar 2014 05:58:12 PM JST
mounted = mount()
* Tue 04 Mar 2014 05:58:29 PM JST

* Tue 04 Mar 2014 05:58:29 PM JST

* Tue 04 Mar 2014 05:58:29 PM JST
        continue

* Tue 04 Mar 2014 05:58:37 PM JST
mounts
* Tue 04 Mar 2014 05:58:53 PM JST

* Tue 04 Mar 2014 05:58:54 PM JST

* Tue 04 Mar 2014 05:58:54 PM JST
    mounted = mount()

* Tue 04 Mar 2014 05:59:22 PM JST
mounts
* Tue 04 Mar 2014 05:59:30 PM JST
'/dev/mapper/data', '/data'
* Tue 04 Mar 2014 06:02:01 PM JST
pexpect.EOF
* Tue 04 Mar 2014 06:34:45 PM JST
Connection
* Tue 04 Mar 2014 06:36:22 PM JST
Connection as CON
* Tue 04 Mar 2014 06:44:51 PM JST
        self._dispatcher = (WindowTypesDispatchBuilder(display=self.display)
                            .make_dispatch())

* Tue 04 Mar 2014 06:45:51 PM JST
self.window_type_dispatch(winid)
* Tue 04 Mar 2014 06:46:28 PM JST
self._windowclass = Window
* Tue 04 Mar 2014 06:46:55 PM JST

* Tue 04 Mar 2014 06:46:55 PM JST

* Tue 04 Mar 2014 06:46:56 PM JST
        from xahk.window import Window

* Tue 04 Mar 2014 06:47:12 PM JST

* Tue 04 Mar 2014 06:47:12 PM JST

* Tue 04 Mar 2014 06:47:12 PM JST
        # TODO: (Atami) [2014/03/03]

* Tue 04 Mar 2014 06:48:17 PM JST
yield self.window_type_dispatch(window)
* Tue 04 Mar 2014 06:49:00 PM JST
xconnection 
* Tue 04 Mar 2014 06:49:14 PM JST
from xahk.xconnection import Connection as CON
* Tue 04 Mar 2014 06:59:54 PM JST

* Tue 04 Mar 2014 06:59:54 PM JST

* Tue 04 Mar 2014 06:59:54 PM JST
WINDOWCLASS = Window

* Tue 04 Mar 2014 11:34:42 PM JST

* Tue 04 Mar 2014 11:34:42 PM JST

* Tue 04 Mar 2014 11:34:42 PM JST
from xahk.xconnection import XCON

* Tue 04 Mar 2014 11:35:16 PM JST
return XCON.get_instance(display=self.display)
* Tue 04 Mar 2014 11:37:51 PM JST
import 
* Tue 04 Mar 2014 11:38:11 PM JST
from xahk.xconnection import Connection as con
* Tue 04 Mar 2014 11:38:15 PM JST
c=con()
* Tue 04 Mar 2014 11:38:52 PM JST
11]: 
* Tue 04 Mar 2014 11:41:17 PM JST
return 
* Tue 04 Mar 2014 11:41:24 PM JST
self.window.get_full_property('_NET_CLIENT_LIST')
* Tue 04 Mar 2014 11:43:01 PM JST
return 
* Tue 04 Mar 2014 11:43:07 PM JST
self.window.get_full_property('_NET_CLIENT_LIST_STACKING')
* Tue 04 Mar 2014 11:43:34 PM JST
get
* Tue 04 Mar 2014 11:43:38 PM JST
get
* Tue 04 Mar 2014 11:47:37 PM JST
from xahk.xconnection import Connection as con
c=con()

* Tue 04 Mar 2014 11:47:45 PM JST
win
* Tue 04 Mar 2014 11:47:53 PM JST
Window
* Tue 04 Mar 2014 11:47:59 PM JST
import Window
* Tue 04 Mar 2014 11:48:00 PM JST
window import Window
* Tue 04 Mar 2014 11:53:11 PM JST
self.window.get_full_property('_NET_ACTIVE_WINDOW')
* Tue 04 Mar 2014 11:54:30 PM JST
type
* Tue 04 Mar 2014 11:54:45 PM JST
sleep(5);
* Tue 04 Mar 2014 11:55:33 PM JST
width
* Tue 04 Mar 2014 11:55:39 PM JST
name
* Tue 04 Mar 2014 11:57:34 PM JST
Window
* Tue 04 Mar 2014 11:58:18 PM JST
type
* Tue 04 Mar 2014 11:58:37 PM JST
WindowNormalType
* Tue 04 Mar 2014 11:59:06 PM JST
name
* Tue 04 Mar 2014 11:59:51 PM JST
net_wm_
* Wed 05 Mar 2014 12:27:14 AM JST
    def list_client_list(self, ):
        r"""SUMMARY

        get_client_list()

        @Return:
        """
        for win in self.window.get_full_property('_NET_CLIENT_LIST'):
            yield self.window.extensions.window_type_dispatch(win)

    def list_client_list_stacking(self, ):
        r"""SUMMARY

        get_client_list_stacking()

        @Return:
        """
        for win in self.window.get_full_property('_NET_CLIENT_LIST_STACKING'):
            yield self.window.extensions.window_type_dispatch(win)


* Wed 05 Mar 2014 12:28:19 AM JST
widt
* Wed 05 Mar 2014 12:29:01 AM JST
get_geometry
* Wed 05 Mar 2014 12:29:15 AM JST
get_desktop_name
* Wed 05 Mar 2014 12:31:27 AM JST
get_geometry()
* Wed 05 Mar 2014 12:31:51 AM JST
get_workarea
* Wed 05 Mar 2014 12:34:26 AM JST
get_virtual_roots()
* Wed 05 Mar 2014 12:34:42 AM JST
root
* Wed 05 Mar 2014 12:36:48 AM JST
desk
* Wed 05 Mar 2014 12:37:20 AM JST
get_desktop_layout()
* Wed 05 Mar 2014 12:37:28 AM JST
root
* Wed 05 Mar 2014 12:37:35 AM JST
get_showing_desktop()
* Wed 05 Mar 2014 12:37:41 AM JST
desk
* Wed 05 Mar 2014 12:38:10 AM JST
get_supported()
* Wed 05 Mar 2014 12:38:19 AM JST
root
* Wed 05 Mar 2014 12:38:57 AM JST
get_number_of_desktops()
* Wed 05 Mar 2014 12:39:05 AM JST
desk
* Wed 05 Mar 2014 12:40:09 AM JST
get_desktop_geometry()
* Wed 05 Mar 2014 12:40:20 AM JST
root
* Wed 05 Mar 2014 12:41:23 AM JST
get_desktop_viewport()
* Wed 05 Mar 2014 12:41:33 AM JST
desk
* Wed 05 Mar 2014 12:41:40 AM JST
get_current_desktop
* Wed 05 Mar 2014 12:42:08 AM JST
get_current_desktop()
* Wed 05 Mar 2014 12:42:18 AM JST
root
* Wed 05 Mar 2014 12:42:48 AM JST
'_NET_DESKTOP_NAMES'
* Wed 05 Mar 2014 12:45:16 AM JST
core.GetProperty(False, 482, )
* Wed 05 Mar 2014 12:45:50 AM JST
'_NET_DESKTOP_NAMES'
* Wed 05 Mar 2014 12:46:25 AM JST
'_NET_DESKTOP_NAMES'
* Wed 05 Mar 2014 12:47:16 AM JST
'UTF8_STRING[]'
* Wed 05 Mar 2014 12:50:44 AM JST
reply
* Wed 05 Mar 2014 12:51:53 AM JST
root
* Wed 05 Mar 2014 12:53:13 AM JST
root
* Wed 05 Mar 2014 12:55:27 AM JST
root
* Wed 05 Mar 2014 12:55:34 AM JST
get_virtual_roots()
* Wed 05 Mar 2014 12:55:43 AM JST
desk
* Wed 05 Mar 2014 12:55:50 AM JST
get_desktop_layout()
* Wed 05 Mar 2014 12:56:01 AM JST
root
* Wed 05 Mar 2014 12:56:05 AM JST
get_showing_desktop()
* Wed 05 Mar 2014 12:56:11 AM JST
desk
* Wed 05 Mar 2014 01:01:44 AM JST
window_types(
* Wed 05 Mar 2014 01:02:11 AM JST
root
* Wed 05 Mar 2014 01:03:30 AM JST
name
* Wed 05 Mar 2014 01:05:00 AM JST
wmclass
* Wed 05 Mar 2014 01:06:38 AM JST
Static
* Wed 05 Mar 2014 01:07:53 AM JST
wmclass
* Wed 05 Mar 2014 01:08:03 AM JST
list_allowed_actions
* Wed 05 Mar 2014 01:09:03 AM JST
get_user_window_time
* Wed 05 Mar 2014 01:09:38 AM JST
query_subwindows
* Wed 05 Mar 2014 01:11:50 AM JST
yield 
* Wed 05 Mar 2014 01:11:53 AM JST
Window(
* Wed 05 Mar 2014 01:11:56 AM JST
Window(
* Wed 05 Mar 2014 01:14:15 AM JST
name
* Wed 05 Mar 2014 01:29:53 AM JST
__file__
* Wed 05 Mar 2014 01:37:23 AM JST

* Wed 05 Mar 2014 01:37:23 AM JST

* Wed 05 Mar 2014 01:37:23 AM JST
        con = Sin

* Wed 05 Mar 2014 01:37:25 AM JST
        con = SingleConnection.get_instance(display=self.display)
* Wed 05 Mar 2014 01:38:18 AM JST
WindowRootType
* Wed 05 Mar 2014 02:14:50 AM JST
    def get_root(self, ):
        r"""SUMMARY

        get_root()

        @Return:
        """
        con = SingleConnection.get_instance(display=self.display)
        return WindowRootType(Window(con.get_setup().roots[0].root))


* Wed 05 Mar 2014 02:16:31 AM JST
        rootwin = self.get_root()
        for win in rootwin.list_client_list():
            yield win

* Wed 05 Mar 2014 02:18:34 AM JST

* Wed 05 Mar 2014 02:18:34 AM JST

* Wed 05 Mar 2014 02:18:34 AM JST
        # self.geo = GetGeometry(display=self.display)

* Wed 05 Mar 2014 02:20:39 AM JST
import 
* Wed 05 Mar 2014 02:23:32 AM JST
print
* Wed 05 Mar 2014 02:25:35 AM JST
Normal
* Wed 05 Mar 2014 02:26:31 AM JST
DynamicWindow
* Wed 05 Mar 2014 02:32:02 AM JST
from xahk.xconnection import Connection as con
c=con()

* Wed 05 Mar 2014 02:34:38 AM JST
from xahk.xconnection import Connection as con
c=con()

* Wed 05 Mar 2014 02:38:53 AM JST
name in ('x', 'y', 'width', 'height')
* Wed 05 Mar 2014 02:38:57 AM JST

* Wed 05 Mar 2014 02:38:57 AM JST

* Wed 05 Mar 2014 02:38:58 AM JST
        if :

* Wed 05 Mar 2014 03:04:54 AM JST
window
* Wed 05 Mar 2014 03:09:04 AM JST
wtype
* Wed 05 Mar 2014 03:09:20 AM JST
name
* Wed 05 Mar 2014 03:09:27 AM JST
wmclass
* Wed 05 Mar 2014 03:09:39 AM JST
id
* Wed 05 Mar 2014 03:09:51 AM JST
pid
* Wed 05 Mar 2014 03:10:00 AM JST
or 
* Wed 05 Mar 2014 05:00:10 AM JST
match_
* Wed 05 Mar 2014 05:01:44 AM JST
name == 
* Wed 05 Mar 2014 05:02:07 AM JST
if 
* Wed 05 Mar 2014 05:02:58 AM JST
list
* Wed 05 Mar 2014 05:08:18 AM JST
types
* Wed 05 Mar 2014 05:11:25 AM JST
self.window.get_full_property('_NET_WM_PID')
* Wed 05 Mar 2014 05:13:11 AM JST
69206121
* Wed 05 Mar 2014 05:17:08 AM JST
        for win in self._winlist:
            if value == getattr(win, attrname, ''):
                yield win

* Wed 05 Mar 2014 05:18:21 AM JST

* Wed 05 Mar 2014 05:18:21 AM JST

* Wed 05 Mar 2014 05:18:21 AM JST
            if value == getattr(win, attrname, ''):

* Wed 05 Mar 2014 05:21:43 AM JST
wmclass
* Wed 05 Mar 2014 05:24:28 AM JST
        for win in self._winlist:
            if value == getattr(win, attrname, ''):
                yield win

* Wed 05 Mar 2014 05:24:40 AM JST
attrname
* Wed 05 Mar 2014 05:24:48 AM JST
value
* Wed 05 Mar 2014 05:24:55 AM JST

* Wed 05 Mar 2014 05:24:55 AM JST

* Wed 05 Mar 2014 05:24:55 AM JST
        return self._iter_match('wmclass', wmclass)

* Wed 05 Mar 2014 05:25:12 AM JST
    def iter_match_wmclass(self, wmclass):
        r"""SUMMARY

        iter_match_wmclass()

        @Return:
        """
        for win in self._winlist:
            if wmclass in getattr(win, 'wmclass', ''):
                yield win

* Wed 05 Mar 2014 05:25:57 AM JST
if wmclass in 
* Wed 05 Mar 2014 05:26:15 AM JST
getattr(win, 'wmclass', '')
* Wed 05 Mar 2014 05:27:33 AM JST

* Wed 05 Mar 2014 05:27:33 AM JST

* Wed 05 Mar 2014 05:27:33 AM JST
        return self._iter_regexp('wmclass', restring)

* Wed 05 Mar 2014 05:27:48 AM JST
if sys.version_info < (2, 4):
    from sets import Set as set

* Wed 05 Mar 2014 05:29:24 AM JST
for win in 
* Wed 05 Mar 2014 05:29:26 AM JST
win
* Wed 05 Mar 2014 05:29:27 AM JST
yield win
* Wed 05 Mar 2014 05:31:52 AM JST
for win in 
* Wed 05 Mar 2014 05:31:53 AM JST
win
* Wed 05 Mar 2014 05:31:53 AM JST
yield win
* Wed 05 Mar 2014 05:33:25 AM JST

* Wed 05 Mar 2014 05:33:28 AM JST
list_append
* Wed 05 Mar 2014 05:33:53 AM JST
win
* Wed 05 Mar 2014 05:33:53 AM JST
yield win
* Wed 05 Mar 2014 05:35:10 AM JST
win
* Wed 05 Mar 2014 05:35:10 AM JST
yield win
* Wed 05 Mar 2014 05:35:49 AM JST
win
* Wed 05 Mar 2014 05:35:49 AM JST
yield win
* Wed 05 Mar 2014 05:36:30 AM JST
win
* Wed 05 Mar 2014 05:36:31 AM JST
yield win
* Wed 05 Mar 2014 05:37:46 AM JST
    '_NET_WM_WINDOW_TYPE_DESKTOP'       : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DOCK'          : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_TOOLBAR'       : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_MENU'          : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_UTILITY'       : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_SPLASH'        : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DIALOG'        : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU' : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_POPUP_MENU'    : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_TOOLTIP'       : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_NOTIFICATION'  : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_COMBO'         : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DND'           : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_NORMAL'        : ('ATOM', 32)

* Wed 05 Mar 2014 05:38:00 AM JST
: ('ATOM', 32)
* Wed 05 Mar 2014 05:38:00 AM JST
: ('ATOM', 32),
* Wed 05 Mar 2014 05:38:00 AM JST
: ('ATOM', 32),
* Wed 05 Mar 2014 05:38:00 AM JST
: ('ATOM', 32),
* Wed 05 Mar 2014 05:38:00 AM JST
: ('ATOM', 32),
* Wed 05 Mar 2014 05:38:00 AM JST
: ('ATOM', 32),
* Wed 05 Mar 2014 05:38:00 AM JST
: ('ATOM', 32),
* Wed 05 Mar 2014 05:38:00 AM JST
: ('ATOM', 32),
* Wed 05 Mar 2014 05:38:00 AM JST
: ('ATOM', 32),
* Wed 05 Mar 2014 05:38:00 AM JST
: ('ATOM', 32),
* Wed 05 Mar 2014 05:38:00 AM JST
: ('ATOM', 32),
* Wed 05 Mar 2014 05:38:00 AM JST
: ('ATOM', 32),
* Wed 05 Mar 2014 05:38:00 AM JST
: ('ATOM', 32),
* Wed 05 Mar 2014 05:38:01 AM JST
: ('ATOM', 32),
* Wed 05 Mar 2014 05:38:06 AM JST
'_NET_WM_WINDOW_TYPE_DESKTOP'       
'_NET_WM_WINDOW_TYPE_DOCK'          
'_NET_WM_WINDOW_TYPE_TOOLBAR'       
'_NET_WM_WINDOW_TYPE_MENU'          
'_NET_WM_WINDOW_TYPE_UTILITY'       
'_NET_WM_WINDOW_TYPE_SPLASH'        
'_NET_WM_WINDOW_TYPE_DIALOG'        
'_NET_WM_WINDOW_TYPE_DROPDOWN_MENU' 
'_NET_WM_WINDOW_TYPE_POPUP_MENU'    
'_NET_WM_WINDOW_TYPE_TOOLTIP'       
'_NET_WM_WINDOW_TYPE_NOTIFICATION'  
'_NET_WM_WINDOW_TYPE_COMBO'         
'_NET_WM_WINDOW_TYPE_DND'           
'_NET_WM_WINDOW_TYPE_NORMAL'        

* Wed 05 Mar 2014 05:39:37 AM JST
list_append
* Wed 05 Mar 2014 05:42:35 AM JST
from xahk.xconnection import Connection as con
c=con()

* Wed 05 Mar 2014 05:45:33 AM JST
'{0.__class__.__name__}()'.format(self, list(self._winlist))
* Wed 05 Mar 2014 05:45:36 AM JST

* Wed 05 Mar 2014 05:45:36 AM JST

* Wed 05 Mar 2014 05:45:36 AM JST
        fmt = 

* Wed 05 Mar 2014 05:46:08 AM JST
str(
* Wed 05 Mar 2014 05:47:56 AM JST
iter_
* Wed 05 Mar 2014 05:48:02 AM JST
iter_
* Wed 05 Mar 2014 05:48:24 AM JST
iter_
* Wed 05 Mar 2014 05:48:33 AM JST
iter_
* Wed 05 Mar 2014 05:48:56 AM JST
iter_
* Wed 05 Mar 2014 05:49:30 AM JST
_iter
* Wed 05 Mar 2014 05:49:51 AM JST
_get_regexp_wins
* Wed 05 Mar 2014 05:50:04 AM JST
iter
* Wed 05 Mar 2014 05:50:15 AM JST
iter_re
* Wed 05 Mar 2014 05:51:31 AM JST
69206121
* Wed 05 Mar 2014 05:57:26 AM JST
'Inbox - takahiroatsumi0517@gmail.com - Icedove Mail/News'
* Wed 05 Mar 2014 06:01:45 AM JST
def get_first_index(iterable):
    r"""SUMMARY

    get_first_index(iterable)

    @Arguments:
    - `iterable`:

    @Return:
    """
    for elm in iterable:
        return elm
    return None

* Wed 05 Mar 2014 06:02:15 AM JST
SUMMARY
* Wed 05 Mar 2014 06:02:42 AM JST
        if not pid:
            return None
        return pid[0]

* Wed 05 Mar 2014 06:03:42 AM JST
: -----
* Wed 05 Mar 2014 06:05:26 AM JST
get_first_index
* Wed 05 Mar 2014 06:08:49 AM JST
ValueList
* Wed 05 Mar 2014 06:11:44 AM JST
list(self) + list(other)
* Wed 05 Mar 2014 06:12:25 AM JST
set(list(self) + list(other))
* Wed 05 Mar 2014 06:13:21 AM JST
from xahk.xconnection import Connection as con
c=con()

* Wed 05 Mar 2014 06:14:02 AM JST
71303186
* Wed 05 Mar 2014 06:15:53 AM JST
48234518
* Wed 05 Mar 2014 06:16:31 AM JST
'_NET_WM_WINDOW_TYPE_NORMAL'
* Wed 05 Mar 2014 06:17:15 AM JST

* Wed 05 Mar 2014 06:17:15 AM JST

* Wed 05 Mar 2014 06:17:15 AM JST
        print(lis)

* Wed 05 Mar 2014 06:17:31 AM JST

* Wed 05 Mar 2014 06:17:31 AM JST

* Wed 05 Mar 2014 06:17:31 AM JST
        print(lis)

* Wed 05 Mar 2014 06:19:53 AM JST
getattr(win, attrname, '')
* Wed 05 Mar 2014 06:20:29 AM JST

* Wed 05 Mar 2014 06:20:29 AM JST

* Wed 05 Mar 2014 06:20:29 AM JST
            print('DEBUG-1-__init__.py {}')

* Wed 05 Mar 2014 06:23:12 AM JST
'qBittorrent v2.9.8'
* Wed 05 Mar 2014 06:23:28 AM JST

* Wed 05 Mar 2014 06:23:28 AM JST

* Wed 05 Mar 2014 06:23:28 AM JST
        print(attrname)

* Wed 05 Mar 2014 06:24:30 AM JST
25165828
* Wed 05 Mar 2014 06:25:41 AM JST
25165828
* Wed 05 Mar 2014 06:25:55 AM JST
'_NET_WM_WINDOW_TYPE_NORMAL'        
* Wed 05 Mar 2014 06:25:58 AM JST
'_NET_WM_WINDOW_TYPE_NORMAL'
* Wed 05 Mar 2014 06:28:47 AM JST
18119
* Wed 05 Mar 2014 06:30:04 AM JST
25165828
* Wed 05 Mar 2014 06:30:41 AM JST
48234518
* Wed 05 Mar 2014 06:37:16 AM JST
c=con()
* Wed 05 Mar 2014 06:37:32 AM JST
name
* Wed 05 Mar 2014 06:37:49 AM JST
'Google-chrome'
* Wed 05 Mar 2014 06:39:36 AM JST
match
* Wed 05 Mar 2014 06:39:44 AM JST
python
* Wed 05 Mar 2014 06:45:13 AM JST
print 
* Wed 05 Mar 2014 06:45:49 AM JST
ピンポイント天気（大津） - ウェザーニュース - Google Chrome
* Wed 05 Mar 2014 06:46:05 AM JST
ピンポイント天気
* Wed 05 Mar 2014 06:46:45 AM JST
name
* Wed 05 Mar 2014 06:48:29 AM JST
function
* Wed 05 Mar 2014 06:48:34 AM JST
callable
* Wed 05 Mar 2014 06:48:54 AM JST
        lis, append = make_list_append()
        for win in self._winlist:
            for wmclass in getattr(win, 'wmclass', ()):
                if re.search(restring, wmclass) is not None:
                    append(win)
        return WindowsList(lis)

* Wed 05 Mar 2014 06:50:52 AM JST
62942457
* Wed 05 Mar 2014 06:54:42 AM JST
        if not isinstance(other, WindowsList):
            raise ValueError()

* Wed 05 Mar 2014 06:57:35 AM JST

* Wed 05 Mar 2014 06:57:35 AM JST

* Wed 05 Mar 2014 06:57:35 AM JST
        isinstance(object, class_or_type_tuple)

* Wed 05 Mar 2014 07:02:56 AM JST
        if not isinstance(other, WindowsList):
            raise ValueError()

* Wed 05 Mar 2014 07:03:53 AM JST
_
* Wed 05 Mar 2014 07:03:54 AM JST
other._
* Wed 05 Mar 2014 07:04:37 AM JST
        if not isinstance(other, (WindowsList, int)):
            raise ValueError()

* Wed 05 Mar 2014 07:04:48 AM JST
lis = self._winlist[:]
* Wed 05 Mar 2014 07:05:50 AM JST
self._winlist.remove(other)
* Wed 05 Mar 2014 07:05:51 AM JST
other
* Wed 05 Mar 2014 04:28:15 PM JST
lis[0].window.extensions.state.above.set(lis[0].window.id)
* Wed 05 Mar 2014 04:28:42 PM JST
c.flush()
* Wed 05 Mar 2014 04:36:26 PM JST
pid
* Wed 05 Mar 2014 05:03:21 PM JST
    @property
    def name(self, ):
        r"""SUMMARY

        get_name()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_NAME')

    @property
    def wmclass(self, ):
        r"""SUMMARY

        get_class()

        @Return:
        """
        clsstring = self.window.get_full_property('WM_CLASS')
        lis = clsstring.split('\0')
        lis.remove('')
        return lis

    @property
    def pid(self, ):
        r"""SUMMARY

        get_pid()

        @Return:
        """
        pid = self.window.get_full_property('_NET_WM_PID')
        return get_first_index(pid)


* Wed 05 Mar 2014 05:03:39 PM JST
    def focus(self, ):
        r"""SUMMARY

        focus()

        @Return:
        """
        self.window.core.SetInputFocus(
            InputFocus.PointerRoot, self.window.id, Time.CurrentTime)


* Wed 05 Mar 2014 05:04:07 PM JST
    def list_states(self, ):
        r"""SUMMARY

        get_states()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_STATE')

    def get_desktop_number(self, ):
        r"""SUMMARY

        get_desktop_num()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_DESKTOP')

    def get_frame_extents(self, ):
        r"""SUMMARY

        get_frame_extents()

        @Return:
        """
        return self.window.get_full_property('_NET_FRAME_EXTENTS')

    def get_icon(self, ):
        r"""SUMMARY

        get_icon()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_ICON_NAME')

    def get_user_window_time(self, ):
        r"""SUMMARY

        get_user_window_time()

        @Return:
        """
        result = self.window.get_full_property('_NET_WM_USER_TIME_WINDOW')
        return get_first_index(result)

    def list_allowed_actions(self, ):
        r"""SUMMARY

        get_allowed_actions()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_ALLOWED_ACTIONS')

* Wed 05 Mar 2014 05:04:47 PM JST
WindowBase
* Wed 05 Mar 2014 05:04:49 PM JST
StandardError
* Wed 05 Mar 2014 05:05:29 PM JST
WindowBase
* Wed 05 Mar 2014 05:06:04 PM JST
    def get_supported(self, ):
        r"""SUMMARY

        get_supported()

        @Return:
        """
        return self.window.get_full_property('_NET_SUPPORTED')

    def get_number_of_desktops(self, ):
        r"""SUMMARY

        get_number_of_desktops()

        @Return:
        """
        return self.window.get_full_property('_NET_NUMBER_OF_DESKTOPS')

    def get_desktop_geometry(self, ):
        r"""SUMMARY

        get_desktop_geometry()

        @Return:
        """
        return self.window.get_full_property('_NET_DESKTOP_GEOMETRY')

    def get_desktop_viewport(self, ):
        r"""SUMMARY

        get_desktop_viewport()

        @Return:
        """
        return self.window.get_full_property('_NET_DESKTOP_VIEWPORT')

    def get_current_desktop(self, ):
        r"""SUMMARY

        get_current_desktop()

        @Return:
        """
        return self.window.get_full_property('_NET_CURRENT_DESKTOP')

    def get_desktop_name(self, ):
        r"""SUMMARY

        get_desktop_name()

        @Return:
        """
        return self.window.get_full_property('_NET_DESKTOP_NAMES')

    def get_active_window(self, ):
        r"""SUMMARY

        get_active_window()

        @Return:
        """
        alist = self.window.get_full_property('_NET_ACTIVE_WINDOW')
        if alist:
            alist.remove(0)
        if not alist:
            return None
        return self.window.extensions.window_type_dispatch(alist[0])

    def get_workarea(self, ):
        r"""SUMMARY

        get_workarea()

        @Return:
        """
        return self.window.get_full_property('_NET_WORKAREA')

    def get_virtual_roots(self, ):
        r"""SUMMARY

        get_virtual_roots()

        @Return:
        """
        return self.window.get_full_property('_NET_VIRTUAL_ROOTS')

    def get_supporting_wm_check(self, ):
        r"""SUMMARY

        get_supporting_wm_check()

        @Return:
        """
        return self.window.get_full_property('_NET_SUPPORTING_WM_CHECK')

    def get_desktop_layout(self, ):
        r"""SUMMARY

        get_desktop_layout()

        @Return:
        """
        return self.window.get_full_property('_NET_DESKTOP_LAYOUT')

    def get_showing_desktop(self, ):
        r"""SUMMARY

        get_showing_desktop()

        @Return:
        """
        return self.window.get_full_property('_NET_DESKTOP_LAYOUT')

    def get_user_time(self, ):
        r"""SUMMARY

        get_user_time()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_USER_TIME')

* Wed 05 Mar 2014 05:06:48 PM JST
DynamicWindow
* Wed 05 Mar 2014 05:06:49 PM JST
DynamicWindow
* Wed 05 Mar 2014 05:06:58 PM JST
DynamicWindow
* Wed 05 Mar 2014 05:15:22 PM JST
from xahk.xconnection import Connection as con
c=con()

* Wed 05 Mar 2014 05:15:48 PM JST
name
* Wed 05 Mar 2014 05:47:01 PM JST
check
* Wed 05 Mar 2014 05:47:01 PM JST
above.check
* Wed 05 Mar 2014 05:47:07 PM JST
above
* Wed 05 Mar 2014 05:55:23 PM JST
maximi
* Wed 05 Mar 2014 05:55:45 PM JST
self_
* Wed 05 Mar 2014 05:59:50 PM JST
toggle
* Wed 05 Mar 2014 06:05:23 PM JST
from xahk.xconnection import Connection as con
c=con()

* Wed 05 Mar 2014 06:05:38 PM JST
from xahk.xconnection import Connection as con
c=con()

* Wed 05 Mar 2014 06:05:42 PM JST
from xahk.xconnection import Connection as con
* Wed 05 Mar 2014 06:07:02 PM JST
name
* Wed 05 Mar 2014 06:07:02 PM JST
4].name
* Wed 05 Mar 2014 09:02:59 PM JST
os.
* Wed 05 Mar 2014 09:03:01 PM JST
exists
* Wed 05 Mar 2014 09:03:04 PM JST
path(self._filepath)
* Wed 05 Mar 2014 10:27:26 PM JST
get_windows
* Wed 05 Mar 2014 10:44:26 PM JST
    geos = [(200, 120, 700, 880), # left display
            (1280, 370, 675, 560), # left down
            (1840, 370, 675, 560), # middle down
            (2400, 370, 675, 560), # right down
            (1840, -100, 575, 560), # middle up
            (2400, -100, 575, 560), # right up
            (1280, -100, 575, 560), # left up
            ]

* Wed 05 Mar 2014 10:44:44 PM JST
bmfolder = '【天気】'
* Wed 05 Mar 2014 10:44:51 PM JST
BMFOLDER
* Wed 05 Mar 2014 10:48:06 PM JST
windows.match_wmclass('google-chrome')
* Wed 05 Mar 2014 10:50:03 PM JST
from mygoogle import chrome
* Wed 05 Mar 2014 10:55:06 PM JST
urls = list(chrome.ChromeBMParse(bmfolder))
* Wed 05 Mar 2014 10:55:18 PM JST
WEATHER_FOLDER
* Wed 05 Mar 2014 10:57:48 PM JST
chrome_opts = CHROME_OPTS + ['--new-window']
* Wed 05 Mar 2014 10:57:56 PM JST
CHROME_OPTS = CHROME_OPTS + ['--new-window']
* Wed 05 Mar 2014 10:57:58 PM JST

* Wed 05 Mar 2014 10:57:58 PM JST

* Wed 05 Mar 2014 10:57:58 PM JST
CHROME_OPTS = CHROME_OPTS + ['--new-window']

* Wed 05 Mar 2014 10:58:21 PM JST
from mygoogle.chrome.variables import DEFAULT_OPTS as CHROME_OPTS
* Wed 05 Mar 2014 10:59:33 PM JST
CHROME_OPTIONS
* Wed 05 Mar 2014 11:00:55 PM JST
sleep
* Wed 05 Mar 2014 11:09:19 PM JST
ピンポイント天気（大津） - ウェザーニュース - Google Chrome
* Wed 05 Mar 2014 11:09:39 PM JST
1280, -100, 575, 560
* Wed 05 Mar 2014 11:10:14 PM JST
'ピンポイント天気（大津） - ウェザーニュース - Google Chrome'
* Wed 05 Mar 2014 11:12:36 PM JST
気象庁 | 天気予報 - Google Chrome
* Wed 05 Mar 2014 11:12:51 PM JST
1840, -100, 575, 560
* Wed 05 Mar 2014 11:14:26 PM JST
雨雲レーダー - ウェザーニュース - Google Chrome
* Wed 05 Mar 2014 11:14:40 PM JST
2400, -100, 575, 560
* Wed 05 Mar 2014 11:15:25 PM JST
気象庁 | 天気図 - Google Chrome
* Wed 05 Mar 2014 11:15:40 PM JST
1280, 370, 675, 560
* Wed 05 Mar 2014 11:16:04 PM JST
衛星画像 - ウェザーニュース - Google Chrome
* Wed 05 Mar 2014 11:16:17 PM JST
1840, 370, 675, 560
* Wed 05 Mar 2014 11:16:40 PM JST
2400, 370, 675, 560
* Wed 05 Mar 2014 11:16:52 PM JST
気象庁 | 異常天候早期警戒情報 - Google Chrome
* Wed 05 Mar 2014 11:17:23 PM JST
The Moon Age Calendar 満月を月齢カレンダーで探そう - Google Chrome
* Wed 05 Mar 2014 11:17:36 PM JST
200, 120, 700, 880
* Wed 05 Mar 2014 11:18:03 PM JST
# right up
* Wed 05 Mar 2014 11:18:11 PM JST
# left down
* Wed 05 Mar 2014 11:18:21 PM JST
# middle down
* Wed 05 Mar 2014 11:18:34 PM JST
# right down
* Wed 05 Mar 2014 11:18:41 PM JST
# left display
* Wed 05 Mar 2014 11:22:28 PM JST
for
* Wed 05 Mar 2014 11:22:57 PM JST
WEATEHR_LIST
* Wed 05 Mar 2014 11:23:06 PM JST
WURLS
* Wed 05 Mar 2014 11:23:25 PM JST
WURLS
* Wed 05 Mar 2014 11:23:36 PM JST
WEATHERS
* Wed 05 Mar 2014 11:23:41 PM JST
urls
* Wed 05 Mar 2014 11:25:30 PM JST
windows.match_name(weathers.name)
* Wed 05 Mar 2014 11:28:15 PM JST
WEATEHRS
* Wed 05 Mar 2014 11:28:45 PM JST
winlis[0].
* Wed 05 Mar 2014 11:31:22 PM JST
weather
* Wed 05 Mar 2014 11:42:20 PM JST
get_geometory()
* Wed 05 Mar 2014 11:42:30 PM JST
get_geometry
* Wed 05 Mar 2014 11:42:47 PM JST
192
* Wed 05 Mar 2014 11:43:03 PM JST
700
* Wed 05 Mar 2014 11:43:29 PM JST
get_geometry()
* Wed 05 Mar 2014 11:44:32 PM JST
575,
* Wed 05 Mar 2014 11:44:39 PM JST
575, 
* Wed 05 Mar 2014 11:44:45 PM JST
575, 
* Wed 05 Mar 2014 11:44:52 PM JST
675, 
* Wed 05 Mar 2014 11:44:57 PM JST
675, 
* Wed 05 Mar 2014 11:45:02 PM JST
675, 
* Wed 05 Mar 2014 11:49:17 PM JST
    GeoWindow('The Moon Age Calendar 満月を月齢カレンダーで探そう'
              ' - Google Chrome',
              200, 75, 950, 830) # left display

* Wed 05 Mar 2014 11:49:21 PM JST
    GeoWindow('気象庁 | 異常天候早期警戒情報 - Google Chrome',
              2400, 370, 560, 675), # right down

* Wed 05 Mar 2014 11:49:24 PM JST
    GeoWindow('衛星画像 - ウェザーニュース - Google Chrome',
              1840, 370, 560, 675), # middle down

* Wed 05 Mar 2014 11:49:28 PM JST
    GeoWindow('気象庁 | 天気図 - Google Chrome',
              1280, 370, 560, 675), # left down

* Wed 05 Mar 2014 11:49:32 PM JST
    GeoWindow('雨雲レーダー - ウェザーニュース - Google Chrome',
              2400, 0, 560, 575), # right up

* Wed 05 Mar 2014 11:49:40 PM JST
    GeoWindow('気象庁 | 天気予報 - Google Chrome',
              1840, 0, 560, 575), # middle up

* Wed 05 Mar 2014 11:52:35 PM JST
weather.name
* Thu 06 Mar 2014 12:08:30 AM JST
'雨雲レーダー - ウェザーニュース - Google Chrome'
* Thu 06 Mar 2014 12:08:36 AM JST
'気象庁 | 天気予報 - Google Chrome'
* Thu 06 Mar 2014 12:08:43 AM JST
'ピンポイント天気（大津） - ウェザーニュース - Google Chrome'
* Thu 06 Mar 2014 12:09:24 AM JST
'雨雲レーダー - ウェザーニュース - Google Chrome'
* Thu 06 Mar 2014 12:09:29 AM JST
'気象庁 | 天気予報 - Google Chrome'
* Thu 06 Mar 2014 12:09:33 AM JST
'ピンポイント天気（大津） - ウェザーニュース - Google Chrome'
* Thu 06 Mar 2014 12:11:37 AM JST
    windows = get_chrome_windows()

* Thu 06 Mar 2014 12:12:02 AM JST
winlis = windows.match_name(weather.name)
* Thu 06 Mar 2014 12:12:06 AM JST
weather
* Thu 06 Mar 2014 12:12:26 AM JST
not 
* Thu 06 Mar 2014 12:13:13 AM JST
WEATEHR_LIST
* Thu 06 Mar 2014 12:19:58 AM JST
winlis[0].set_above()
* Thu 06 Mar 2014 12:20:03 AM JST
winlis[0].flush()
* Thu 06 Mar 2014 12:27:40 AM JST
xcb.xproto
* Thu 06 Mar 2014 12:29:20 AM JST
WEATEHR_LIST[-3:]
* Thu 06 Mar 2014 12:30:04 AM JST

* Thu 06 Mar 2014 12:30:04 AM JST

* Thu 06 Mar 2014 12:30:04 AM JST
BEFORE_WINDOWS = get_chrome_windows()

* Thu 06 Mar 2014 12:30:26 AM JST
weather
* Thu 06 Mar 2014 12:30:36 AM JST
for url in WEATHER_URLS:
    chrome.run(url, options=CHROME_OPTIONS)


* Thu 06 Mar 2014 12:31:02 AM JST
list(chrome.ChromeBMParse(WEATHER_FOLDER))
* Thu 06 Mar 2014 12:31:17 AM JST

* Thu 06 Mar 2014 12:31:17 AM JST

* Thu 06 Mar 2014 12:31:17 AM JST
WEATHER_URLS = list(chrome.ChromeBMParse(WEATHER_FOLDER))

* Thu 06 Mar 2014 12:31:26 AM JST
def open_wheathers():
    r"""SUMMARY
    
    open_wheathers()
    
    @Return:
    """
    urls = list(chrome.ChromeBMParse(WEATHER_FOLDER))
    for url in urls:
        chrome.run(url, options=CHROME_OPTIONS)

    

* Thu 06 Mar 2014 12:49:56 AM JST
(200, 120, 700, 880)
* Thu 06 Mar 2014 12:50:07 AM JST
(1280, 370, 675, 560)
* Thu 06 Mar 2014 12:50:22 AM JST
(1840, 370, 675, 560)
* Thu 06 Mar 2014 12:50:50 AM JST
(2400, 370, 675, 560)
* Thu 06 Mar 2014 12:50:55 AM JST
(1840, -100, 575, 560)
* Thu 06 Mar 2014 12:51:05 AM JST
(2400, -100, 575, 560)
* Thu 06 Mar 2014 12:51:07 AM JST
, # left up
#         
* Thu 06 Mar 2014 12:51:21 AM JST
(1840, -100, 575, 560)
* Thu 06 Mar 2014 12:51:31 AM JST
(2400, -100, 575, 560)
* Thu 06 Mar 2014 12:51:37 AM JST

* Thu 06 Mar 2014 12:51:37 AM JST

* Thu 06 Mar 2014 12:51:37 AM JST
MIDDLE_UP = (1840, -100, 575, 560)

* Thu 06 Mar 2014 12:51:42 AM JST
(1280, -100, 575, 560)
* Thu 06 Mar 2014 12:51:46 AM JST

* Thu 06 Mar 2014 12:52:47 AM JST
560
* Thu 06 Mar 2014 12:52:47 AM JST
560
* Thu 06 Mar 2014 12:52:47 AM JST
560
* Thu 06 Mar 2014 12:52:48 AM JST
560
* Thu 06 Mar 2014 12:52:48 AM JST
560
* Thu 06 Mar 2014 12:52:48 AM JST
560
* Thu 06 Mar 2014 12:53:02 AM JST
LEFT_DOWN
* Thu 06 Mar 2014 12:53:59 AM JST

* Thu 06 Mar 2014 12:53:59 AM JST

* Thu 06 Mar 2014 12:53:59 AM JST
open_wheathers()

* Thu 06 Mar 2014 12:54:06 AM JST
sleep(5)
* Thu 06 Mar 2014 12:54:10 AM JST

* Thu 06 Mar 2014 12:54:10 AM JST

* Thu 06 Mar 2014 12:54:10 AM JST
# wait open

* Thu 06 Mar 2014 12:55:29 AM JST
    windows = get_chrome_windows()
    for wea in WEATEHR_LIST[-3:]:
        winlis = windows.match_name(wea.name)
        if winlis:
            print(winlis[0].name)
            winlis[0].focus()
            winlis[0].set_above()
            winlis[0].flush()
            winlis[0].unset_above()
            winlis[0].flush()

* Thu 06 Mar 2014 12:56:40 AM JST

WEATHER_FOLDER = '【天気】'
CHROME_OPTIONS = CHROME_OPTS + ['--new-window']

* Thu 06 Mar 2014 12:57:42 AM JST

* Thu 06 Mar 2014 12:57:42 AM JST

* Thu 06 Mar 2014 12:57:42 AM JST
                # print('break {}'.format(weather.name))

* Thu 06 Mar 2014 12:57:42 AM JST

* Thu 06 Mar 2014 12:57:42 AM JST

* Thu 06 Mar 2014 12:57:42 AM JST
            # print('take {}'.format(weather.name))

* Thu 06 Mar 2014 12:59:46 AM JST
LEFT_DOWN
* Thu 06 Mar 2014 12:59:58 AM JST
              
* Thu 06 Mar 2014 01:01:04 AM JST
MIDDLE_DOWN
* Thu 06 Mar 2014 01:01:16 AM JST
              
* Thu 06 Mar 2014 01:01:20 AM JST
 # middle down
* Thu 06 Mar 2014 01:01:23 AM JST
 # left down
* Thu 06 Mar 2014 01:01:32 AM JST
LEFT_DOWN
* Thu 06 Mar 2014 01:01:47 AM JST
MIDDLE_DOWN
* Thu 06 Mar 2014 01:01:52 AM JST
RIGHT_DOWN
* Thu 06 Mar 2014 01:01:59 AM JST
              
* Thu 06 Mar 2014 01:02:02 AM JST
 # right down
* Thu 06 Mar 2014 01:02:07 AM JST
RIGHT_UP
* Thu 06 Mar 2014 01:02:25 AM JST
            
* Thu 06 Mar 2014 01:02:27 AM JST
 # right up
* Thu 06 Mar 2014 01:02:37 AM JST
LEFT_UP
* Thu 06 Mar 2014 01:02:51 AM JST
 # left up
* Thu 06 Mar 2014 01:02:56 AM JST
MIDDLE_UP
* Thu 06 Mar 2014 01:03:07 AM JST
 # middle up
* Thu 06 Mar 2014 01:03:08 AM JST
              
* Thu 06 Mar 2014 01:05:20 AM JST
560,
* Thu 06 Mar 2014 01:05:20 AM JST
560,
* Thu 06 Mar 2014 01:05:20 AM JST
560,
* Thu 06 Mar 2014 01:08:13 AM JST
class GeoInfo(object):
    r"""SUMMARY
    """
    __slots__ = ('x', 'y', 'width', 'height')
    
    def __init__(self, x, y, width, height):
        r"""
        
        @Arguments:
        - `x`:
        - `y`:
        - `width`:
        - `height`:
        """
        self.x = x
        self.y = y
        self.width = width
        self.height = height

        

* Thu 06 Mar 2014 01:09:43 AM JST
560
* Thu 06 Mar 2014 01:09:43 AM JST
560
* Thu 06 Mar 2014 01:09:43 AM JST
560
* Thu 06 Mar 2014 01:10:08 AM JST
GeoInfo
* Thu 06 Mar 2014 01:10:08 AM JST
GeoInfo
* Thu 06 Mar 2014 01:10:08 AM JST
GeoInfo
* Thu 06 Mar 2014 01:10:08 AM JST
GeoInfo
* Thu 06 Mar 2014 01:10:08 AM JST
GeoInfo
* Thu 06 Mar 2014 01:10:08 AM JST
GeoInfo
* Thu 06 Mar 2014 01:13:08 AM JST
1840, 370, 560, 675
* Thu 06 Mar 2014 01:13:25 AM JST
675
* Thu 06 Mar 2014 01:13:25 AM JST
560, 675
* Thu 06 Mar 2014 01:13:26 AM JST
370, 560, 675
* Thu 06 Mar 2014 01:13:32 AM JST
675
* Thu 06 Mar 2014 01:13:33 AM JST
560, 675
* Thu 06 Mar 2014 01:13:42 AM JST
675
* Thu 06 Mar 2014 01:14:01 AM JST
2400, 370, 560, 675
* Thu 06 Mar 2014 01:14:26 AM JST
675
* Thu 06 Mar 2014 01:14:26 AM JST
560, 675
* Thu 06 Mar 2014 01:14:27 AM JST
370, 560, 675
* Thu 06 Mar 2014 01:14:27 AM JST
675
* Thu 06 Mar 2014 01:14:27 AM JST
560, 675
* Thu 06 Mar 2014 01:14:27 AM JST
675
* Thu 06 Mar 2014 01:14:51 AM JST
1840,   0, 560, 575
* Thu 06 Mar 2014 01:14:54 AM JST
575
* Thu 06 Mar 2014 01:14:54 AM JST
560, 575
* Thu 06 Mar 2014 01:14:54 AM JST
0, 560, 575
* Thu 06 Mar 2014 01:14:54 AM JST
575
* Thu 06 Mar 2014 01:14:54 AM JST
560, 575
* Thu 06 Mar 2014 01:14:55 AM JST
575
* Thu 06 Mar 2014 01:15:39 AM JST
1280,   0, 560, 575
* Thu 06 Mar 2014 01:15:41 AM JST
575
* Thu 06 Mar 2014 01:15:41 AM JST
560, 575
* Thu 06 Mar 2014 01:15:42 AM JST
0, 560, 575
* Thu 06 Mar 2014 01:15:42 AM JST
575
* Thu 06 Mar 2014 01:15:42 AM JST
560, 575
* Thu 06 Mar 2014 01:15:42 AM JST
575
* Thu 06 Mar 2014 01:15:59 AM JST
2400,   0, 560, 575
* Thu 06 Mar 2014 01:16:01 AM JST
575
* Thu 06 Mar 2014 01:16:01 AM JST
560, 575
* Thu 06 Mar 2014 01:16:01 AM JST
0, 560, 575
* Thu 06 Mar 2014 01:16:01 AM JST
575
* Thu 06 Mar 2014 01:16:01 AM JST
560, 575
* Thu 06 Mar 2014 01:16:01 AM JST
575
* Thu 06 Mar 2014 01:16:22 AM JST
class GeoLeftUp(object):
    r"""SUMMARY
    """
    x = 1280,
    y = 0
    width = 560
    height = 575



* Thu 06 Mar 2014 01:16:33 AM JST
class GeoRightUp(object):
    r"""SUMMARY
    """
    x = 2400,
    y = 0
    width = 560
    height = 575
    

* Thu 06 Mar 2014 01:16:53 AM JST
class GeoMiddleUp(object):
    r"""SUMMARY
    """
    x = 1840,
    y = 0
    width = 560
    height = 575
    

* Thu 06 Mar 2014 01:17:02 AM JST
class GeoRightDown(object):
    r"""SUMMARY
    """
    x = 2400
    y = 370
    width = 560
    height = 675


* Thu 06 Mar 2014 01:17:08 AM JST
class GeoMiddleDown(object):
    r"""SUMMARY
    """
    x = 1840
    y = 370
    width = 560
    height = 675

    

* Thu 06 Mar 2014 01:19:00 AM JST
'ピンポイント天気（大津） - ウェザーニュース - Google Chrome'
* Thu 06 Mar 2014 01:19:59 AM JST
'気象庁 | 天気予報 - Google Chrome',
* Thu 06 Mar 2014 01:20:49 AM JST
'雨雲レーダー - ウェザーニュース - Google Chrome'
* Thu 06 Mar 2014 01:21:34 AM JST
'気象庁 | 天気図 - Google Chrome',
* Thu 06 Mar 2014 01:22:14 AM JST
WeatherSatelight
* Thu 06 Mar 2014 01:22:24 AM JST
Satellite
* Thu 06 Mar 2014 01:22:36 AM JST
'衛星画像 - ウェザーニュース - Google Chrome'
* Thu 06 Mar 2014 01:23:19 AM JST
'気象庁 | 異常天候早期警戒情報 - Google Chrome'
* Thu 06 Mar 2014 01:23:51 AM JST
'The Moon Age Calendar 満月を月齢カレンダーで探そう'
              ' - Google Chrome'
* Thu 06 Mar 2014 01:23:55 AM JST
              
* Thu 06 Mar 2014 01:24:08 AM JST
200, 75, 950, 830
* Thu 06 Mar 2014 01:24:12 AM JST
830
* Thu 06 Mar 2014 01:24:12 AM JST
950, 830
* Thu 06 Mar 2014 01:24:12 AM JST
75, 950, 830
* Thu 06 Mar 2014 01:24:12 AM JST
830
* Thu 06 Mar 2014 01:24:12 AM JST
950, 830
* Thu 06 Mar 2014 01:24:12 AM JST
830
* Thu 06 Mar 2014 01:25:04 AM JST
WeatherPinpoint
* Thu 06 Mar 2014 01:25:07 AM JST
    
* Thu 06 Mar 2014 01:25:14 AM JST
WeatherZenkoku
* Thu 06 Mar 2014 01:25:18 AM JST
WeatherRainRader
* Thu 06 Mar 2014 01:25:22 AM JST
WeatherMapping
* Thu 06 Mar 2014 01:25:26 AM JST
WeatherSatellite
* Thu 06 Mar 2014 01:25:33 AM JST
WeatherWarning
* Thu 06 Mar 2014 01:25:37 AM JST
Moon
* Thu 06 Mar 2014 01:26:12 AM JST
WEATHER_LIST
* Thu 06 Mar 2014 01:26:46 AM JST
WeatherPinpoint
* Thu 06 Mar 2014 01:26:56 AM JST
WeatherZenkoku
* Thu 06 Mar 2014 01:27:00 AM JST
WeatherRainRader
* Thu 06 Mar 2014 01:28:01 AM JST

* Thu 06 Mar 2014 01:28:01 AM JST

* Thu 06 Mar 2014 01:28:01 AM JST
                sleep(0.2)

* Thu 06 Mar 2014 01:33:28 AM JST

* Thu 06 Mar 2014 01:33:28 AM JST

* Thu 06 Mar 2014 01:33:28 AM JST
            print(winlis[0].name)

* Thu 06 Mar 2014 01:33:35 AM JST

* Thu 06 Mar 2014 01:33:35 AM JST

* Thu 06 Mar 2014 01:33:35 AM JST
            winlis[0].focus()

* Thu 06 Mar 2014 01:33:50 AM JST

* Thu 06 Mar 2014 01:33:50 AM JST

* Thu 06 Mar 2014 01:33:50 AM JST
weather_map()

* Thu 06 Mar 2014 01:35:44 AM JST
ids
* Thu 06 Mar 2014 01:35:56 AM JST
ids = 
* Thu 06 Mar 2014 01:35:58 AM JST

* Thu 06 Mar 2014 01:35:58 AM JST

* Thu 06 Mar 2014 01:35:58 AM JST
    LOG.debug('difference ids {}'.format(ids))

* Thu 06 Mar 2014 01:37:01 AM JST

* Thu 06 Mar 2014 01:37:01 AM JST

* Thu 06 Mar 2014 01:37:01 AM JST
    # open weather folder and get window ids

* Thu 06 Mar 2014 01:38:07 AM JST
weather_map
* Thu 06 Mar 2014 01:40:24 AM JST
list_windows()
* Thu 06 Mar 2014 01:40:25 AM JST
ext.list_windows()
* Thu 06 Mar 2014 01:40:25 AM JST
c.ext.list_windows()
* Thu 06 Mar 2014 01:40:43 AM JST
list
* Thu 06 Mar 2014 01:41:35 AM JST

* Thu 06 Mar 2014 01:41:36 AM JST

* Thu 06 Mar 2014 01:41:36 AM JST
            sleep(0.2)

* Thu 06 Mar 2014 01:42:57 AM JST

* Thu 06 Mar 2014 01:42:57 AM JST

* Thu 06 Mar 2014 01:42:57 AM JST
        sleep(3) # for open with exists window

* Thu 06 Mar 2014 01:42:58 AM JST

* Thu 06 Mar 2014 01:42:58 AM JST

* Thu 06 Mar 2014 01:42:59 AM JST
        sleep(3) # for open with exists window

* Thu 06 Mar 2014 01:43:02 AM JST

* Thu 06 Mar 2014 01:43:02 AM JST

* Thu 06 Mar 2014 01:43:02 AM JST
    # weather()

* Thu 06 Mar 2014 01:43:31 AM JST

* Thu 06 Mar 2014 01:43:31 AM JST

* Thu 06 Mar 2014 01:43:31 AM JST
    winwait = wm.WinWait()

* Thu 06 Mar 2014 01:44:08 AM JST

* Thu 06 Mar 2014 01:44:08 AM JST

* Thu 06 Mar 2014 01:44:08 AM JST
import cPickle

* Thu 06 Mar 2014 01:44:10 AM JST

* Thu 06 Mar 2014 01:44:10 AM JST

* Thu 06 Mar 2014 01:44:10 AM JST
import path

* Thu 06 Mar 2014 01:44:14 AM JST

* Thu 06 Mar 2014 01:44:14 AM JST

* Thu 06 Mar 2014 01:44:14 AM JST
import pynotify

* Thu 06 Mar 2014 01:45:12 AM JST
from Xlib import X
from Xlib.display import Display


* Thu 06 Mar 2014 01:45:55 AM JST
   
* Thu 06 Mar 2014 02:55:15 AM JST
print 
* Thu 06 Mar 2014 03:06:33 AM JST
GrabKey
* Thu 06 Mar 2014 03:11:35 AM JST
GrabKey
* Thu 06 Mar 2014 03:27:16 AM JST
Lock
* Thu 06 Mar 2014 03:30:23 AM JST
        addmods = [
            0,
            xcb.xproto.ModMask.Lock,
            xcb.xproto.ModMask._2,
            xcb.xproto.ModMask._2 | xcb.xproto.ModMask.Lock
        ]

* Thu 06 Mar 2014 03:33:08 AM JST
c.core.GrabKey(True, )
* Thu 06 Mar 2014 03:34:01 AM JST
c.core.GrabKey(True, 482, 0|mod)
* Thu 06 Mar 2014 03:34:26 AM JST
xcb.xproto.GrabMode.Async
* Thu 06 Mar 2014 03:34:29 AM JST
xcb.xproto.GrabMode.Async
* Thu 06 Mar 2014 03:34:33 AM JST
c.core.GrabKey(True, 482, 0|mod, 10, xcb.xproto.GrabMode.Async, xcb.xproto.GrabMode.Async)
* Thu 06 Mar 2014 03:34:50 AM JST
c.core.GrabKey(True, 482, 0|mod, 10, xcb.xproto.GrabMode.Async, xcb.xproto.GrabMode.Async)
* Thu 06 Mar 2014 03:35:52 AM JST
True, 
* Thu 06 Mar 2014 03:36:05 AM JST
10
* Thu 06 Mar 2014 03:46:32 AM JST
[xcb.xproto.StackMode.Above if above else xcb.xproto.StackMode.Below]
* Thu 06 Mar 2014 03:46:36 AM JST
above
* Thu 06 Mar 2014 03:46:45 AM JST
xcb.xproto.StackMode.Above
* Thu 06 Mar 2014 03:46:47 AM JST
Above
* Thu 06 Mar 2014 03:49:14 AM JST
xcb.xproto.ConfigWindow.StackMode,
* Thu 06 Mar 2014 03:51:40 AM JST
[xcb.xproto.StackMode.Above if above else xcb.xproto.StackMode.Below]
* Thu 06 Mar 2014 03:52:20 AM JST

* Thu 06 Mar 2014 03:52:20 AM JST

* Thu 06 Mar 2014 03:52:20 AM JST
import xcb.xproto

* Thu 06 Mar 2014 03:52:29 AM JST
ConfigWindow
* Thu 06 Mar 2014 03:52:52 AM JST
xproto.
* Thu 06 Mar 2014 03:52:52 AM JST
xcb.xproto.
* Thu 06 Mar 2014 03:52:56 AM JST
xproto.
* Thu 06 Mar 2014 03:52:56 AM JST
xcb.xproto.
* Thu 06 Mar 2014 03:53:05 AM JST
xproto.
* Thu 06 Mar 2014 03:53:05 AM JST
xcb.xproto.
* Thu 06 Mar 2014 03:53:08 AM JST
            
* Thu 06 Mar 2014 03:57:58 AM JST
from 
* Thu 06 Mar 2014 03:58:52 AM JST
set_above
* Thu 06 Mar 2014 03:59:01 AM JST

* Thu 06 Mar 2014 03:59:01 AM JST

* Thu 06 Mar 2014 03:59:01 AM JST
            winlis[0].unset_above()

* Thu 06 Mar 2014 03:59:01 AM JST
            winlis[0].unset_above()

* Thu 06 Mar 2014 03:59:01 AM JST
            winlis[0].unset_above()
            winlis[0].flush()

* Thu 06 Mar 2014 04:08:34 AM JST
ModMa
* Thu 06 Mar 2014 04:08:37 AM JST
xproto
* Thu 06 Mar 2014 04:12:07 AM JST
xproto.GrabMode.Async
* Thu 06 Mar 2014 04:06:59 PM JST
display = display or ''
* Thu 06 Mar 2014 04:07:06 PM JST
con = Connection(display=display)
* Thu 06 Mar 2014 04:09:16 PM JST
c.ext.get_root()
* Thu 06 Mar 2014 04:09:35 PM JST
r.get_active_window()
* Thu 06 Mar 2014 04:10:51 PM JST
    display = display or ''
    con = Connection(display=display)

* Thu 06 Mar 2014 04:13:12 PM JST
root = con.ext.get_root()
* Thu 06 Mar 2014 04:13:20 PM JST
root.get_active_window()
* Thu 06 Mar 2014 04:18:03 PM JST
xproto
* Thu 06 Mar 2014 04:18:07 PM JST
xcb.
* Thu 06 Mar 2014 04:18:49 PM JST
continue
* Thu 06 Mar 2014 04:19:59 PM JST
monitor_active_window
* Thu 06 Mar 2014 04:20:11 PM JST
get_active_window
* Thu 06 Mar 2014 04:23:07 PM JST
fmt(acwin)
* Thu 06 Mar 2014 04:23:39 PM JST
get_active_window()
* Thu 06 Mar 2014 04:25:31 PM JST
    stdscr = _curses.initscr()
    _curses.noecho()
    _curses.cbreak()

* Thu 06 Mar 2014 04:26:27 PM JST
    onerror = ''
    stdscr = _curses.initscr()
    _curses.noecho()
    _curses.cbreak()

* Thu 06 Mar 2014 04:27:44 PM JST
'* Press "Control c" will exit. *'
* Thu 06 Mar 2014 04:28:03 PM JST

* Thu 06 Mar 2014 04:28:03 PM JST

* Thu 06 Mar 2014 04:28:03 PM JST
            _sys.stdout.write('\r' * 20 + fmt(acwin))

* Thu 06 Mar 2014 04:31:21 PM JST
EX_OK)
* Thu 06 Mar 2014 04:31:21 PM JST
_os.EX_OK)
* Thu 06 Mar 2014 04:31:23 PM JST
EX_OK)
* Thu 06 Mar 2014 04:31:23 PM JST
_os.EX_OK)
* Thu 06 Mar 2014 04:31:23 PM JST
exit(_os.EX_OK)
* Thu 06 Mar 2014 04:31:24 PM JST
_sys.exit(_os.EX_OK)
* Thu 06 Mar 2014 05:18:43 PM JST
http://xcb.freedesktop.org/XcbPythonBinding/
* Thu 06 Mar 2014 05:20:07 PM JST
count
* Thu 06 Mar 2014 05:20:12 PM JST
request
* Thu 06 Mar 2014 05:41:06 PM JST
event = conn.wait_for_event()
* Thu 06 Mar 2014 06:12:10 PM JST
root
* Thu 06 Mar 2014 06:16:06 PM JST
ac)
* Thu 06 Mar 2014 06:16:06 PM JST
int(ac)
* Thu 06 Mar 2014 06:16:13 PM JST
1111111111111111111111111111111111111111111111111111111111
* Thu 06 Mar 2014 06:17:57 PM JST
dispatch_events
* Thu 06 Mar 2014 06:19:44 PM JST
(
    EventMask.EnterWindow | 
    EventMask.FocusChange |
    EventMask.KeyPress |
    EventMask.LeaveWindow |
    EventMask.PropertyChange | 
    EventMask.SubstructureNotify |
    EventMask.SubstructureRedirect)
* Thu 06 Mar 2014 06:19:51 PM JST
EventMask.EnterWindow | 
    EventMask.FocusChange |
    EventMask.KeyPress |
    EventMask.LeaveWindow |
    EventMask.PropertyChange | 
    EventMask.SubstructureNotify |
    EventMask.SubstructureRedirect
* Thu 06 Mar 2014 06:20:13 PM JST

* Thu 06 Mar 2014 06:20:13 PM JST
xproto
* Thu 06 Mar 2014 06:21:50 PM JST
root
* Thu 06 Mar 2014 06:22:47 PM JST
root
* Thu 06 Mar 2014 09:12:08 PM JST
foreign_news
* Thu 06 Mar 2014 09:12:27 PM JST
foreign_news, 
* Thu 06 Mar 2014 09:12:30 PM JST
foreign_news, 
* Thu 06 Mar 2014 09:17:21 PM JST
wait 
* Thu 06 Mar 2014 09:17:21 PM JST
for wait 
* Thu 06 Mar 2014 09:17:39 PM JST

* Thu 06 Mar 2014 09:17:39 PM JST

* Thu 06 Mar 2014 09:17:39 PM JST
        # chrome.run(list(chrome.ChromeBMParse(season)))

* Thu 06 Mar 2014 09:22:27 PM JST
import xahk
* Thu 06 Mar 2014 09:24:12 PM JST
_wait_close_moon
* Thu 06 Mar 2014 09:32:50 PM JST
len(
* Thu 06 Mar 2014 09:33:01 PM JST

* Thu 06 Mar 2014 09:33:01 PM JST

* Thu 06 Mar 2014 09:33:01 PM JST
    sleep(5)

* Thu 06 Mar 2014 11:47:46 PM JST
wait_for_event
* Thu 06 Mar 2014 11:49:47 PM JST
EventDispatcher
* Fri 07 Mar 2014 01:11:28 AM JST
    def grab_key(self, key, modifiers):
        addmods = [
            0,
            xcb.xproto.ModMask.Lock,
            xcb.xproto.ModMask._2,
            xcb.xproto.ModMask._2 | xcb.xproto.ModMask.Lock
        ]

        for mod in addmods:
            XCONN.get_core().GrabKey(
                True,
                self.wid,
                modifiers | mod,
                key,
                xcb.xproto.GrabMode.Async,
                xcb.xproto.GrabMode.Async
            )

* Fri 07 Mar 2014 01:11:37 AM JST
self, 
* Fri 07 Mar 2014 01:12:10 AM JST
get_core()
* Fri 07 Mar 2014 01:12:10 AM JST
XCONN.get_core()
* Fri 07 Mar 2014 01:12:21 AM JST
wid
* Fri 07 Mar 2014 01:12:22 AM JST
self.wid
* Fri 07 Mar 2014 01:12:41 AM JST
    def ungrab_key(self, key, modifiers):
        addmods = [
            0,
            xcb.xproto.ModMask.Lock,
            xcb.xproto.ModMask._2,
            xcb.xproto.ModMask._2 | xcb.xproto.ModMask.Lock
        ]

        for mod in addmods:
            XCONN.get_core().UngrabKey(
                key,
                self.wid,
                modifiers | mod,
            )

* Fri 07 Mar 2014 01:12:48 AM JST
self
* Fri 07 Mar 2014 01:12:53 AM JST
get_core()
* Fri 07 Mar 2014 01:12:54 AM JST
XCONN.get_core()
* Fri 07 Mar 2014 01:13:00 AM JST
wid
* Fri 07 Mar 2014 01:13:00 AM JST
self.wid
* Fri 07 Mar 2014 01:14:40 AM JST
xahk.
* Fri 07 Mar 2014 01:35:08 AM JST
SendEvent
* Fri 07 Mar 2014 01:45:42 AM JST
KeyPressEvent
* Fri 07 Mar 2014 01:57:20 AM JST
https://code.google.com/p/pycompmgr/source/browse/pycompmgr
* Fri 07 Mar 2014 02:03:27 AM JST
56
* Fri 07 Mar 2014 02:10:10 AM JST
autokeyx
* Fri 07 Mar 2014 03:20:21 AM JST
xprotoExtension
* Fri 07 Mar 2014 03:57:15 AM JST
hg pull && hg update default
* Fri 07 Mar 2014 04:21:24 AM JST
xcb.xproto.Time.CurrentTime
* Fri 07 Mar 2014 04:25:31 AM JST
48234518
* Fri 07 Mar 2014 04:26:06 AM JST
PressKey
* Fri 07 Mar 2014 04:26:11 AM JST
c.core.SendEvent(False, 48234518, xcb.xproto.EventMask.KeyPress)
* Fri 07 Mar 2014 04:26:19 AM JST
c.core.SendEvent(False, 48234518, 
* Fri 07 Mar 2014 04:27:46 AM JST
buf = cStringIO.StringIO()
* Fri 07 Mar 2014 04:28:00 AM JST
buf.write(pack('=xB2xII', propagate, destination, event_mask))
* Fri 07 Mar 2014 04:28:03 AM JST
propagate
* Fri 07 Mar 2014 04:28:10 AM JST
48234518
* Fri 07 Mar 2014 04:28:24 AM JST
xcb.xproto.EventMask.KeyPress
* Fri 07 Mar 2014 04:29:08 AM JST
buf.write(str(buffer(array('b', event))))
* Fri 07 Mar 2014 04:34:12 AM JST
'XTEST'
* Fri 07 Mar 2014 04:34:28 AM JST
xtest.FakeInput(display=d,opcode=d.get_extension_major('XTEST'))
* Fri 07 Mar 2014 04:34:41 AM JST
xtest.FakeInput(display=d,opcode=d.get_extension_major('XTEST'))
* Fri 07 Mar 2014 04:35:15 AM JST
xtest.FakeInput(display=d,opcode=d.get_extension_major('XTEST'))
* Fri 07 Mar 2014 04:37:50 AM JST
get_extension_major
* Fri 07 Mar 2014 04:38:20 AM JST
from Xlib.protocol import rq
* Fri 07 Mar 2014 04:41:35 AM JST
KeyPress
* Fri 07 Mar 2014 04:52:23 AM JST
structcode
* Fri 07 Mar 2014 04:58:08 AM JST
get_extension_major
* Fri 07 Mar 2014 04:58:26 AM JST
/usr/share/pyshared/Xlib/
* Fri 07 Mar 2014 04:58:34 AM JST
get_extension_major
* Fri 07 Mar 2014 05:01:40 AM JST
extension_major_opcodes
* Fri 07 Mar 2014 05:02:17 AM JST
140
* Fri 07 Mar 2014 05:09:09 AM JST
c.core.SendEvent(False, 48234518, xcb.xproto.EventMask.KeyRelease, data)
* Fri 07 Mar 2014 05:09:12 AM JST
False
* Fri 07 Mar 2014 05:09:50 AM JST
'\x8c\x02\t\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 07 Mar 2014 05:10:52 AM JST
xcb.Request('\x8c\x02\t\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', 25, True, False)
* Fri 07 Mar 2014 05:10:57 AM JST
xcb.Request('\x8c\x02\t\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', 25, True, False)
* Fri 07 Mar 2014 05:11:57 AM JST
from
* Fri 07 Mar 2014 05:12:34 AM JST
send_request
* Fri 07 Mar 2014 05:12:53 AM JST
c.core.send_request
* Fri 07 Mar 2014 05:13:21 AM JST
import
* Fri 07 Mar 2014 05:13:43 AM JST
xcb.Request
* Fri 07 Mar 2014 05:13:46 AM JST
xcb.Request('\x8c\x02\t\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', 25, True, False)
* Fri 07 Mar 2014 05:15:47 AM JST
FakeInput(display = self.display,
              opcode = self.display.get_extension_major(extname),
              event_type = event_type,
              detail = detail,
              time = time,
              root = root,
              x = x,
              y = y)
* Fri 07 Mar 2014 05:15:57 AM JST
display
* Fri 07 Mar 2014 05:15:57 AM JST
self.display
* Fri 07 Mar 2014 05:15:59 AM JST
extname
* Fri 07 Mar 2014 05:16:05 AM JST
display
* Fri 07 Mar 2014 05:16:06 AM JST
self.display
* Fri 07 Mar 2014 05:16:21 AM JST
detail = detail,
* Fri 07 Mar 2014 05:16:21 AM JST
              detail = detail,
* Fri 07 Mar 2014 05:16:38 AM JST
    FakeInput(display = self.display,
              opcode = self.display.get_extension_major(extname),
              event_type = event_type,
              detail = detail,
              time = time,
              root = root,
              x = x,
              y = y)

* Fri 07 Mar 2014 05:16:48 AM JST
display
* Fri 07 Mar 2014 05:16:48 AM JST
self.display
* Fri 07 Mar 2014 05:16:54 AM JST
extname
* Fri 07 Mar 2014 05:16:58 AM JST
event_type
* Fri 07 Mar 2014 05:16:58 AM JST
event_type = event_type
* Fri 07 Mar 2014 05:17:12 AM JST
detail
* Fri 07 Mar 2014 05:17:15 AM JST
time
* Fri 07 Mar 2014 05:17:31 AM JST
root
* Fri 07 Mar 2014 05:18:12 AM JST
'XTEST'
* Fri 07 Mar 2014 05:18:38 AM JST
extension_major_opcodes
* Fri 07 Mar 2014 05:19:21 AM JST
major_opcode
* Fri 07 Mar 2014 05:20:04 AM JST
X.KeyPress
* Fri 07 Mar 2014 05:21:53 AM JST
Xlib.XK.string_to_keysym(ch)
* Fri 07 Mar 2014 05:22:01 AM JST
from 
* Fri 07 Mar 2014 05:22:10 AM JST
Xlib.XK.string_to_keysym(ch)
* Fri 07 Mar 2014 05:22:32 AM JST
49
* Fri 07 Mar 2014 05:25:39 AM JST
KeyRelease
* Fri 07 Mar 2014 05:27:25 AM JST
Xlib.X.KeyPress
* Fri 07 Mar 2014 05:29:28 AM JST
/usr/lib/python2.7/dist-packages/xcb/__init__.py
* Fri 07 Mar 2014 05:38:28 AM JST
conn(
* Fri 07 Mar 2014 05:39:43 AM JST
_add_ext
* Fri 07 Mar 2014 05:40:24 AM JST
_add_ext?
* Fri 07 Mar 2014 05:43:41 AM JST
cStringIO
* Fri 07 Mar 2014 05:43:51 AM JST
buf = cStringIO.StringIO()
* Fri 07 Mar 2014 05:44:24 AM JST
buf.write(pack('=xx2xBB2xII8xhh7xB', type, detail, time, root, rootX, rootY, deviceid)
* Fri 07 Mar 2014 05:44:57 AM JST
xcb.xproto.EventMask.KeyPress
* Fri 07 Mar 2014 05:45:02 AM JST
detail
* Fri 07 Mar 2014 05:45:09 AM JST
time
* Fri 07 Mar 2014 05:45:12 AM JST
KeyPress
* Fri 07 Mar 2014 05:45:12 AM JST
EventMask.KeyPress
* Fri 07 Mar 2014 05:45:20 AM JST
xcb.xproto.Time.CurrentTime
* Fri 07 Mar 2014 05:45:23 AM JST
root
* Fri 07 Mar 2014 05:45:27 AM JST
rootX
* Fri 07 Mar 2014 05:45:30 AM JST
rootY
* Fri 07 Mar 2014 05:45:52 AM JST
FakeInput
* Fri 07 Mar 2014 05:50:06 AM JST
xcb.xproto.EventMask.KeyPress
* Fri 07 Mar 2014 05:54:39 AM JST
'=xx2xBB2xII8xhh7xB'
* Fri 07 Mar 2014 05:57:03 AM JST
ext.FakeInput(4, 1, 0, root, 0, 0, 0)
* Fri 07 Mar 2014 05:57:03 AM JST
ext.FakeInput(4, 1, 0, root, 0, 0, 0)
* Fri 07 Mar 2014 05:58:41 AM JST
xcb.xproto.EventMask.KeyPress
* Fri 07 Mar 2014 06:00:49 AM JST
'\x00\x00\x00\x00\x01\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 07 Mar 2014 06:00:54 AM JST
                     
* Fri 07 Mar 2014 06:09:31 AM JST
KeyPress
* Fri 07 Mar 2014 06:09:32 AM JST
EventMask.KeyPress
* Fri 07 Mar 2014 06:09:32 AM JST
xproto.EventMask.KeyPress
* Fri 07 Mar 2014 06:09:32 AM JST
xcb.xproto.EventMask.KeyPress
* Fri 07 Mar 2014 06:14:55 AM JST
'\x8c\x02\t\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 07 Mar 2014 06:18:43 AM JST
xproto
* Fri 07 Mar 2014 06:18:56 AM JST
display
* Fri 07 Mar 2014 06:19:01 AM JST
115]: 
* Fri 07 Mar 2014 06:19:04 AM JST
Display
* Fri 07 Mar 2014 06:19:05 AM JST
protocol
* Fri 07 Mar 2014 06:20:01 AM JST
Xlib.ext.xtest.fake_input(dis, Xlib.X.KeyPress, 10)
* Fri 07 Mar 2014 06:20:14 AM JST
Xlib.
* Fri 07 Mar 2014 06:21:14 AM JST
import 
* Fri 07 Mar 2014 06:24:05 AM JST
import xcb, os
from xcb import xproto, xtest

conn = xcb.Connection(os.environ.get("DISPLAY"))
ext = xtest.xtestExtension(conn)

setup = conn.get_setup()
screen = setup.roots[0]
root = screen.root

ext.FakeInput(4, 1, 0, root, 0, 0, 0)
ext.FakeInput(5, 1, 30, root, 0, 0, 0)
* Fri 07 Mar 2014 06:24:09 AM JST

* Fri 07 Mar 2014 06:24:09 AM JST

* Fri 07 Mar 2014 06:24:09 AM JST
import os

* Fri 07 Mar 2014 04:56:15 PM JST
fake_input
* Fri 07 Mar 2014 04:56:41 PM JST
import Xlib
import Xlib.display
import Xlib.X
import Xlib.XK
import Xlib.protocol.event
import Xlib.ext.xtest

* Fri 07 Mar 2014 04:56:54 PM JST
display = Xlib.display.Display()
* Fri 07 Mar 2014 04:57:45 PM JST
import Xlib
import Xlib.display
import Xlib.X
import Xlib.XK
import Xlib.protocol.event
import Xlib.ext.xtest

* Fri 07 Mar 2014 04:57:49 PM JST
display = Xlib.display.Display()
* Fri 07 Mar 2014 04:57:59 PM JST
Xlib.ext.xtest.fake_input(display, Xlib.X.KeyPress, CTRL_L)
* Fri 07 Mar 2014 04:58:02 PM JST
KeyPress
* Fri 07 Mar 2014 04:58:02 PM JST
X.KeyPress
* Fri 07 Mar 2014 04:58:02 PM JST
Xlib.X.KeyPress
* Fri 07 Mar 2014 04:58:05 PM JST
CTRL_L
* Fri 07 Mar 2014 04:59:10 PM JST
display, X.KeyPress, 10
* Fri 07 Mar 2014 04:59:24 PM JST
Xlib.ext.xtest.fake_input(dis, X.KeyPress, 10)
* Fri 07 Mar 2014 05:00:38 PM JST
FakeInput
* Fri 07 Mar 2014 05:03:27 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:30 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:30 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:30 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:30 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:30 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:30 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:30 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:30 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:30 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:30 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:31 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:31 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:31 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:31 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:31 PM JST
get_extension_major
* Fri 07 Mar 2014 05:03:55 PM JST
'\x8c\x02\t\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 07 Mar 2014 05:04:45 PM JST
'\x8c\x02\t\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 07 Mar 2014 05:04:52 PM JST
'\x00\x00\x00\x00\x01\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 07 Mar 2014 05:05:34 PM JST
buf = cStringIO.StringIO()
* Fri 07 Mar 2014 05:06:52 PM JST
'=xx2xBB2xII8xhh7xB'
* Fri 07 Mar 2014 05:07:56 PM JST
'\x00\x00\x00\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 07 Mar 2014 05:09:02 PM JST
'\x8c\x02\t\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 07 Mar 2014 05:09:57 PM JST
'\x00\x00\x00\x00\x01\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 07 Mar 2014 05:11:58 PM JST
True
* Fri 07 Mar 2014 05:12:25 PM JST
'\x8c\x02\t\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 07 Mar 2014 05:13:27 PM JST
False
* Fri 07 Mar 2014 05:13:30 PM JST
False
* Fri 07 Mar 2014 05:58:40 PM JST
FakeInput(type=2,detail=10,time=0,root=)
* Fri 07 Mar 2014 06:30:26 PM JST
Proto
* Fri 07 Mar 2014 06:31:11 PM JST
import sysconfig
* Fri 07 Mar 2014 06:31:45 PM JST
~/.pylib/
* Fri 07 Mar 2014 09:59:02 PM JST
check()
* Fri 07 Mar 2014 09:59:03 PM JST
coo.check()
* Fri 07 Mar 2014 10:43:42 PM JST
ext.FakeInput(4, 1, 0, root, 0, 0, 0)
* Fri 07 Mar 2014 10:45:28 PM JST
import xcb, os
from xcb import xproto, xtest

conn = xcb.Connection(os.environ.get("DISPLAY"))
ext = xtest.xtestExtension(conn)

setup = conn.get_setup()
screen = setup.roots[0]
root = screen.root

ext.FakeInput(4, 1, 0, root, 0, 0, 0)
ext.FakeInput(5, 1, 30, root, 0, 0, 0)
* Fri 07 Mar 2014 10:45:30 PM JST

* Fri 07 Mar 2014 10:45:30 PM JST

* Fri 07 Mar 2014 10:45:31 PM JST
import os

* Fri 07 Mar 2014 10:49:48 PM JST
'\x8c\x02\t\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 07 Mar 2014 10:54:33 PM JST
True
* Fri 07 Mar 2014 11:31:51 PM JST
pack('=xx2xBB2xII8xhh7xB', type, detail, time, root, rootX, rootY, deviceid)
* Fri 07 Mar 2014 11:31:57 PM JST
type
* Fri 07 Mar 2014 11:32:01 PM JST
detail
* Fri 07 Mar 2014 11:32:03 PM JST
time
* Fri 07 Mar 2014 11:32:06 PM JST
rootX
* Fri 07 Mar 2014 11:32:09 PM JST
rootY
* Fri 07 Mar 2014 11:32:10 PM JST
deviceid
* Fri 07 Mar 2014 11:43:55 PM JST
xcb
* Fri 07 Mar 2014 11:43:55 PM JST
import xcb
* Fri 07 Mar 2014 11:45:33 PM JST
check()
* Fri 07 Mar 2014 11:49:00 PM JST
check()
* Sat 08 Mar 2014 12:03:36 AM JST
2, 10, 0, root, 0, 0, 0
* Sat 08 Mar 2014 12:04:27 AM JST
xcb.xtest.xtestExtension.
* Sat 08 Mar 2014 12:14:37 AM JST
False
* Sat 08 Mar 2014 12:15:33 AM JST
kdkdkdkkdkdk
* Sat 08 Mar 2014 12:15:37 AM JST
True
* Sat 08 Mar 2014 12:17:37 AM JST
xtest.xtestExtension()
* Sat 08 Mar 2014 12:17:53 AM JST
key
* Sat 08 Mar 2014 12:17:53 AM JST
xtest.key
* Sat 08 Mar 2014 04:08:51 AM JST
from Xlib import X
from Xlib.display import Display
from Xlib.ext.xtest import fake_input
d = Display()
fake_input(d, X.ButtonPress, 1)
d.sync()
fake_input(d, X.ButtonRelease, 1)
d.sync()
* Sat 08 Mar 2014 04:09:02 AM JST
fake_input(d, X.ButtonPress, 1)
d.sync()
fake_input(d, X.ButtonRelease, 1)
d.sync()

* Sat 08 Mar 2014 04:28:22 AM JST
from Xlib.display import Display
from Xlib.ext.xtest import fake_input

* Sat 08 Mar 2014 04:30:13 AM JST
from Xlib import X
* Sat 08 Mar 2014 04:31:04 AM JST
ButtonPress,
* Sat 08 Mar 2014 04:31:26 AM JST

* Sat 08 Mar 2014 04:31:26 AM JST

* Sat 08 Mar 2014 04:31:26 AM JST
        fake_input(self.display, X.KeyPress, detail, time)

* Sat 08 Mar 2014 04:32:30 AM JST
KeyPress
* Sat 08 Mar 2014 04:47:45 AM JST
CTRL_L = display.keysym_to_keycode(Xlib.XK.XK_Control_L)
ALT_L = display.keysym_to_keycode(Xlib.XK.XK_Alt_L)
SHIFT_L = display.keysym_to_keycode(Xlib.XK.XK_Shift_L)

* Sat 08 Mar 2014 04:48:20 AM JST
CTRL_L
* Sat 08 Mar 2014 04:48:56 AM JST
Xlib.
* Sat 08 Mar 2014 04:48:58 AM JST
Xlib.
* Sat 08 Mar 2014 04:49:04 AM JST
Xlib.
* Sat 08 Mar 2014 04:50:23 AM JST
XK_Control_L
* Sat 08 Mar 2014 04:52:17 AM JST

* Sat 08 Mar 2014 04:52:17 AM JST

* Sat 08 Mar 2014 04:52:17 AM JST
from Xlib import XK

* Sat 08 Mar 2014 04:52:40 AM JST
import Xlib.XK
* Sat 08 Mar 2014 04:55:13 AM JST

* Sat 08 Mar 2014 04:55:13 AM JST

* Sat 08 Mar 2014 04:55:13 AM JST
import Xlib.XK

* Sat 08 Mar 2014 04:55:40 AM JST
XK.
* Sat 08 Mar 2014 04:55:51 AM JST
In [22]: from Xlib import X
from Xlib.display import Display
from Xlib.ext.xtest import fake_input
d = Display()
fake_input(d, X.ButtonPress, 1)
d.sync()
fake_input(d, X.ButtonRelease, 1)
d.sync()

* Sat 08 Mar 2014 04:56:35 AM JST
XK_Control_L
* Sat 08 Mar 2014 04:58:28 AM JST
Xlib.XK.XK_Control_L
* Sat 08 Mar 2014 04:58:44 AM JST
Xlib.
* Sat 08 Mar 2014 04:58:55 AM JST
XK_Control_L
* Sat 08 Mar 2014 11:38:17 AM JST

* Sat 08 Mar 2014 11:38:17 AM JST

* Sat 08 Mar 2014 11:38:17 AM JST
        self._display = display

* Sat 08 Mar 2014 11:38:38 AM JST
None
* Sat 08 Mar 2014 11:38:39 AM JST
display
* Sat 08 Mar 2014 11:39:31 AM JST
In [22]: 
* Sat 08 Mar 2014 11:39:34 AM JST
from Xlib import X
from Xlib.display import Display
from Xlib.ext.xtest import fake_input
d = Display()

* Sat 08 Mar 2014 04:50:07 PM JST
keysym
* Sat 08 Mar 2014 04:52:13 PM JST
__module__
* Sat 08 Mar 2014 04:53:01 PM JST
import sendkeys
* Sat 08 Mar 2014 04:53:05 PM JST
a=sendkeys.Keycode(d, 10)
* Sat 08 Mar 2014 04:53:15 PM JST

from Xlib import X
from Xlib.display import Display
from Xlib.ext.xtest import fake_input
d = Display()

* Sat 08 Mar 2014 04:53:24 PM JST
import sendkeys
a=sendkeys.Keycode(d, 10)

* Sat 08 Mar 2014 04:54:44 PM JST
from Xlib import X
from Xlib.display import Display
from Xlib.ext.xtest import fake_input
d = Display()

* Sat 08 Mar 2014 04:54:49 PM JST
import sendkeys
a=sendkeys.Keycode(d, 10)

* Sat 08 Mar 2014 04:57:00 PM JST
Convert a keycode to a keysym, looking in entry index.
Normally index 0 is unshifted, 1 is shifted, 2 is alt grid, and 3
is shift+alt grid. If that key entry is not bound, X.NoSymbol is
returned.
* Sat 08 Mar 2014 05:09:26 PM JST
self.display.keysym_to_keycode(self.keysym)
* Sat 08 Mar 2014 05:29:54 PM JST
__KEYSYM
* Sat 08 Mar 2014 05:30:16 PM JST
self.display.keycode_to_keysym(self.keycode, index)
* Sat 08 Mar 2014 05:32:00 PM JST
from Xlib import X
from Xlib.display import Display
from Xlib.ext.xtest import fake_input
d = Display()

* Sat 08 Mar 2014 05:32:06 PM JST
import sendkeys
a=sendkeys.Keycode(d, 10)

* Sat 08 Mar 2014 05:33:42 PM JST
__KEYSYM
* Sat 08 Mar 2014 05:33:49 PM JST

* Sat 08 Mar 2014 05:33:49 PM JST

* Sat 08 Mar 2014 05:33:49 PM JST
__KEYSYM = Keysym

* Sat 08 Mar 2014 05:34:43 PM JST
    def __repr__(self, ):
        return '{0.__class__.__name__}({1})'.format(self, int(self))

    def __int__(self, ):
        return self.keycode

* Sat 08 Mar 2014 05:34:47 PM JST
keycode
* Sat 08 Mar 2014 05:41:09 PM JST
    def to_string(self, ):
        r"""SUMMARY
        
        to_string()
        
        @Return:
        """
        return XK.keysym_to_string(self.keysym)


* Sat 08 Mar 2014 05:44:04 PM JST
    def __repr__(self, ):
        return '{0.__class__.__name__}({1})'.format(self, int(self))

    def __int__(self, ):
        return self.keysym

* Sat 08 Mar 2014 05:44:40 PM JST
keysym
* Sat 08 Mar 2014 05:48:49 PM JST
Keystring
* Sat 08 Mar 2014 05:50:04 PM JST
import sendkeys
a=sendkeys.Keycode(d, 10)

* Sat 08 Mar 2014 05:51:03 PM JST
import sendkeys
a=sendkeys.Keycode(d, 10)

* Sat 08 Mar 2014 05:51:09 PM JST
from Xlib import X
from Xlib.display import Display
from Xlib.ext.xtest import fake_input
d = Display()

* Sat 08 Mar 2014 05:51:13 PM JST
import sendkeys
a=sendkeys.Keycode(d, 10)

* Sat 08 Mar 2014 05:53:04 PM JST
keysym
* Sat 08 Mar 2014 05:53:23 PM JST
keysym_to_string
* Sat 08 Mar 2014 05:53:23 PM JST
XK.keysym_to_string
* Sat 08 Mar 2014 05:56:27 PM JST
XK_Control_L
* Sat 08 Mar 2014 05:59:41 PM JST
XK_Shift_L
* Sat 08 Mar 2014 06:03:26 PM JST
XK_Shift_L
* Sat 08 Mar 2014 06:07:15 PM JST
to_string()
* Sat 08 Mar 2014 06:07:15 PM JST
space.to_string()
* Sat 08 Mar 2014 06:07:29 PM JST
Key
* Sat 08 Mar 2014 06:07:47 PM JST
string
* Sat 08 Mar 2014 06:08:06 PM JST
space
* Sat 08 Mar 2014 06:09:56 PM JST
hello
* Sat 08 Mar 2014 06:14:11 PM JST
special_X_keysyms = {
    ' ' : "space",
    '\t' : "Tab",
    '\n' : "Return",  # for some reason this needs to be cr, not lf
    '\r' : "Return",
    '\e' : "Escape",
    '!' : "exclam",
    '#' : "numbersign",
    '%' : "percent",
    '$' : "dollar",
    '&' : "ampersand",
    '"' : "quotedbl",
    '\'' : "apostrophe",
    '(' : "parenleft",
    ')' : "parenright",
    '*' : "asterisk",
    '=' : "equal",
    '+' : "plus",
    ',' : "comma",
    '-' : "minus",
    '.' : "period",
    '/' : "slash",
    ':' : "colon",
    ';' : "semicolon",
    '<' : "less",
    '>' : "greater",
    '?' : "question",
    '@' : "at",
    '[' : "bracketleft",
    ']' : "bracketright",
    '\\' : "backslash",
    '^' : "asciicircum",
    '_' : "underscore",
    '`' : "grave",
    '{' : "braceleft",
    '|' : "bar",
    '}' : "braceright",
    '~' : "asciitilde"
    }

* Sat 08 Mar 2014 06:14:25 PM JST
special_X_keysyms
* Sat 08 Mar 2014 06:15:00 PM JST
SPECIAL_KEY_NAME_MAP
* Sat 08 Mar 2014 06:16:46 PM JST
XK.string_to_keysym(self.string)
* Sat 08 Mar 2014 06:17:19 PM JST
XK.string_to_keysym
* Sat 08 Mar 2014 10:33:23 PM JST
py:in-brackets-p
* Sat 08 Mar 2014 10:34:35 PM JST
()
* Sat 08 Mar 2014 10:35:32 PM JST
(py:in-curly-p)
* Sat 08 Mar 2014 10:37:16 PM JST
py:-:
* Sat 08 Mar 2014 10:39:59 PM JST
    
* Sat 08 Mar 2014 10:40:26 PM JST
    
* Sat 08 Mar 2014 10:44:51 PM JST
(looking-at ",")
* Sat 08 Mar 2014 10:46:26 PM JST
(looking-back "[ \t],")
* Sat 08 Mar 2014 10:46:48 PM JST
(looking-back "[ \t]*,")
* Sat 08 Mar 2014 10:47:01 PM JST
(looking-back "[ \t]+,")
* Sat 08 Mar 2014 10:47:20 PM JST
(looking-back "[ \t]*,")
* Sat 08 Mar 2014 10:47:42 PM JST
(skip-chars-backward " \t")
* Sat 08 Mar 2014 10:48:00 PM JST
(skip-chars-backward " \t")
* Sat 08 Mar 2014 10:48:14 PM JST
(looking-back ",")
* Sat 08 Mar 2014 10:49:59 PM JST
(fixup-whitespace)
* Sat 08 Mar 2014 10:53:05 PM JST
(save-excursion
           (end-of-line)
           (skip-chars-backward " \t")
           (when (not (looking-back ","))
             (insert ",")))
* Sat 08 Mar 2014 10:53:22 PM JST

* Sat 08 Mar 2014 10:53:22 PM JST

* Sat 08 Mar 2014 10:53:22 PM JST
    '$':, 

* Sat 08 Mar 2014 10:53:52 PM JST

* Sat 08 Mar 2014 10:53:52 PM JST

* Sat 08 Mar 2014 10:53:52 PM JST
    '$': ,

* Sat 08 Mar 2014 10:57:31 PM JST

* Sat 08 Mar 2014 10:57:31 PM JST

* Sat 08 Mar 2014 10:57:31 PM JST
    ')'

* Sat 08 Mar 2014 10:58:09 PM JST
  replaces.push_back(std::make_pair(")", "{parenright}"));
  replaces.push_back(std::make_pair("_", "{underscore}"));
  replaces.push_back(std::make_pair("~", "{asciitilde}"));
  replaces.push_back(std::make_pair("|", "{bar}"));
  replaces.push_back(std::make_pair("=", "{equal}"));
  replaces.push_back(std::make_pair("*", "{asterisk}"));
  replaces.push_back(std::make_pair(">", "{less}"));
  replaces.push_back(std::make_pair("<", "{greater}"));
  replaces.push_back(std::make_pair("?", "{question}"));
  replaces.push_back(std::make_pair("-", "{minus}"));
  replaces.push_back(std::make_pair(",", "{comma}"));
  replaces.push_back(std::make_pair(".", "{period}"));
  replaces.push_back(std::make_pair("/", "{slash}"));
  replaces.push_back(std::make_pair("@", "{at}"));
  replaces.push_back(std::make_pair(":", "{colon}"));
  replaces.push_back(std::make_pair(";", "{semicolon}"));
  replaces.push_back(std::make_pair("[", "{braceleft}"));
  replaces.push_back(std::make_pair("]", "{braceright}"));
  replaces.push_back(std::make_pair("\\", "{backslash}"));

* Sat 08 Mar 2014 10:58:11 PM JST
  replaces.push_back(std::make_pair(")", "{parenright}"));
  replaces.push_back(std::make_pair("_", "{underscore}"));
  replaces.push_back(std::make_pair("~", "{asciitilde}"));
  replaces.push_back(std::make_pair("|", "{bar}"));
  replaces.push_back(std::make_pair("=", "{equal}"));
  replaces.push_back(std::make_pair("*", "{asterisk}"));
  replaces.push_back(std::make_pair(">", "{less}"));
  replaces.push_back(std::make_pair("<", "{greater}"));
  replaces.push_back(std::make_pair("?", "{question}"));
  replaces.push_back(std::make_pair("-", "{minus}"));
  replaces.push_back(std::make_pair(",", "{comma}"));
  replaces.push_back(std::make_pair(".", "{period}"));
  replaces.push_back(std::make_pair("/", "{slash}"));
  replaces.push_back(std::make_pair("@", "{at}"));
  replaces.push_back(std::make_pair(":", "{colon}"));
  replaces.push_back(std::make_pair(";", "{semicolon}"));
  replaces.push_back(std::make_pair("[", "{braceleft}"));
  replaces.push_back(std::make_pair("]", "{braceright}"));
  replaces.push_back(std::make_pair("\\", "{backslash}"));

* Sat 08 Mar 2014 10:58:21 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:22 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:23 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:23 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:23 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:23 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:23 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:23 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:23 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:23 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:23 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:23 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:23 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:23 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:23 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:23 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:23 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:24 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:58:24 PM JST
replaces.push_back(std::make_pair(
* Sat 08 Mar 2014 10:59:42 PM JST
')': '{parenright}',
'_': '{underscore}',
'~': '{asciitilde}',
'|': '{bar}',
'=': '{equal}',
'*': '{asterisk}',
'>': '{less}',
'<': '{greater}',
'?': '{question}',
'-': '{minus}',
',': '{comma}',
'.': '{period}',
'/': '{slash}',
'@': '{at}',
':': '{colon}',
';': '{semicolon}',
'[': '{braceleft}',
']': '{braceright}',
'\\': '{backslash}',

* Sat 08 Mar 2014 11:10:56 PM JST
"hello{+}world{{}google\\{"
* Sat 08 Mar 2014 11:13:05 PM JST
colle
* Sat 08 Mar 2014 11:13:14 PM JST
ifrom
* Sat 08 Mar 2014 11:17:39 PM JST
hello
* Sat 08 Mar 2014 11:17:41 PM JST
world
* Sat 08 Mar 2014 11:17:56 PM JST
google
* Sat 08 Mar 2014 11:17:58 PM JST
yahoo
* Sat 08 Mar 2014 11:18:41 PM JST

* Sat 08 Mar 2014 11:18:41 PM JST

* Sat 08 Mar 2014 11:18:41 PM JST
import collections

* Sat 08 Mar 2014 11:20:27 PM JST
    
* Sat 08 Mar 2014 11:22:54 PM JST
s
* Sat 08 Mar 2014 11:22:54 PM JST
from s
* Sat 08 Mar 2014 11:24:57 PM JST
py:narrow-to-curly
* Sat 08 Mar 2014 11:25:48 PM JST
py:narrow-to-curly
* Sat 08 Mar 2014 11:29:44 PM JST
[('{+'  , '{plus'),
                ('\\+' , '{plus'),
                ('{!'  , '{exclam}'),
                ('\\!' , '{exclam}'),
                ('{#'  , '{numbersign}'),
                ('\\#' , '{numbersign}'),
                ('{^'  , '{asciicircum}'),
                ('\\^' , '{asciicircum}'),
                ('{}}' , '{bracketright}'),
                ('{{'  , '{bracketleft}'),
                ('\\{' , '{bracketleft}'),
                ('\\}' , '{bracketright}'),
                ('\"'  , '{quotedbl}'),
                ('$'   , '{dollar}'),
                ('%'   , '{percent}'),
                ('&'   , '{ampersand}'),
                ("'"   , '{apostrophe}'),
                ('`'   , '{quoteleft}'),
                ('('   , '{parenleft}'),
                (')'   , '{parenright}'),
                ('_'   , '{underscore}'),
                ('~'   , '{asciitilde}'),
                ('|'   , '{bar}'),
                ('='   , '{equal}'),
                ('*'   , '{asterisk}'),
                ('>'   , '{less}'),
                ('<'   , '{greater}'),
                ('?'   , '{question}'),
                ('-'   , '{minus}'),
                (','   , '{comma}'),
                ('.'   , '{period}'),
                ('/'   , '{slash}'),
                ('@'   , '{at}'),
                (':'   , '{colon}'),
                (';'   , '{semicolon}'),
                ('['   , '{braceleft}'),
                (']'   , '{braceright}'),
                ('\\'  , '{backslash}'),
                ]
* Sat 08 Mar 2014 11:34:41 PM JST
"hello{+}world{{}google\\{"
* Sat 08 Mar 2014 11:34:43 PM JST
"hello{+}world{{}google\\{"
* Sat 08 Mar 2014 11:42:59 PM JST
"hello{+}world{{}google\\{"
* Sun 09 Mar 2014 12:24:07 AM JST

* Sun 09 Mar 2014 12:24:07 AM JST

* Sun 09 Mar 2014 12:24:08 AM JST
    lis = []

* Sun 09 Mar 2014 12:24:51 AM JST
import listutil
* Sun 09 Mar 2014 12:33:18 AM JST

* Sun 09 Mar 2014 12:33:18 AM JST

* Sun 09 Mar 2014 12:33:18 AM JST
    maxlen = len(line)

* Sun 09 Mar 2014 12:33:49 AM JST
'hello{plus}world{bracketleft}}google{bracketleft}'
* Sun 09 Mar 2014 12:40:13 AM JST
irator
* Sun 09 Mar 2014 12:40:15 AM JST
default
* Sun 09 Mar 2014 12:46:19 AM JST
lis
* Sun 09 Mar 2014 12:46:27 AM JST
result_list
* Sun 09 Mar 2014 12:46:34 AM JST
result_list.
* Sun 09 Mar 2014 12:55:10 AM JST
'hello{plus}world{bracketleft}}google{bracketleft}'
* Sun 09 Mar 2014 12:59:00 AM JST
                           
* Sun 09 Mar 2014 01:00:23 AM JST
sendkeys.replace_line("hello{+}world{{}google\\{")
* Sun 09 Mar 2014 01:14:40 AM JST
sendkeys.parse_line(sendkeys.replace_line("hello{+}world{{}google\\{"))
* Sun 09 Mar 2014 01:14:51 AM JST
sendkeys.
* Sun 09 Mar 2014 01:14:52 AM JST
sendkeys.
* Sun 09 Mar 2014 01:15:37 AM JST
Keystring
* Sun 09 Mar 2014 01:17:53 AM JST
from Xlib.display import Display
* Sun 09 Mar 2014 01:18:10 AM JST
d = Display()
* Sun 09 Mar 2014 01:19:35 AM JST
def _main():
    d = Display()
    token = parse_line(replace_line("hello{+}world{{}google\\{"))
    for str_ in token:
        kstr = Keystring(d, str_)
        sym = kstr.to_keysym()
        code = sym.to_keycode()
        code.press()
        code.release()
        d.sync()
    return 0

* Sun 09 Mar 2014 01:19:47 AM JST
from Xlib.display import Display
* Sun 09 Mar 2014 01:21:43 AM JST
def _main():
    d = Display()
    token = parse_line(replace_line("hello{+}world{{}google\\{"))
    for str_ in token:
        kstr = Keystring(d, str_)
        sym = kstr.to_keysym()
        code = sym.to_keycode()
        code.press()
        code.release()
        d.sync()
    return 0

* Sun 09 Mar 2014 01:21:50 AM JST
from Xlib.display import Display

from sendkeys import parse_line, replace_line, Keystring

* Sun 09 Mar 2014 01:33:55 AM JST
time=0, root=0, x=0, y=0
* Sun 09 Mar 2014 01:34:44 AM JST
time=0, root=0, x=0, y=0
* Sun 09 Mar 2014 01:35:17 AM JST
key_
* Sun 09 Mar 2014 01:36:01 AM JST
time=0, root=0, x=0, y=0
* Sun 09 Mar 2014 01:56:07 AM JST
  shift_keys.push_back("exclam");       // '!'
  shift_keys.push_back("quotedbl");     // '"'
  shift_keys.push_back("numbersign");   // '#'
  shift_keys.push_back("dollar");       // '$'
  shift_keys.push_back("percent");      // '%'
  shift_keys.push_back("ampersand");    // '&'
  shift_keys.push_back("apostrophe");   // '''
  shift_keys.push_back("quoteright");   // '''
  shift_keys.push_back("grave");        // '`'
  shift_keys.push_back("quoteleft");    // '`'
  shift_keys.push_back("parenleft");    // '('
  shift_keys.push_back("parenright");   // ')'
  shift_keys.push_back("underscore");   // '_'
  shift_keys.push_back("plus");         // '+'
  shift_keys.push_back("asciitilde");   // '~'
  shift_keys.push_back("bar");          // '|'
  shift_keys.push_back("bracketleft");  // '{'
  shift_keys.push_back("bracketright"); // '}'
  shift_keys.push_back("equal");        // '='
  shift_keys.push_back("asterisk");     // '*'
  shift_keys.push_back("less");         // '>'
  shift_keys.push_back("greater");      // '<'
  shift_keys.push_back("question");     // '?'

* Sun 09 Mar 2014 02:00:36 AM JST
  shift_keys.push_back("exclam");       // '!'
  shift_keys.push_back("quotedbl");     // '"'
  shift_keys.push_back("numbersign");   // '#'
  shift_keys.push_back("dollar");       // '$'
  shift_keys.push_back("percent");      // '%'
  shift_keys.push_back("ampersand");    // '&'
  shift_keys.push_back("apostrophe");   // '''
  shift_keys.push_back("quoteright");   // '''
  shift_keys.push_back("grave");        // '`'
  shift_keys.push_back("quoteleft");    // '`'
  shift_keys.push_back("parenleft");    // '('
  shift_keys.push_back("parenright");   // ')'
  shift_keys.push_back("underscore");   // '_'
  shift_keys.push_back("plus");         // '+'
  shift_keys.push_back("asciitilde");   // '~'
  shift_keys.push_back("bar");          // '|'
  shift_keys.push_back("bracketleft");  // '{'
  shift_keys.push_back("bracketright"); // '}'
  shift_keys.push_back("equal");        // '='
  shift_keys.push_back("asterisk");     // '*'
  shift_keys.push_back("less");         // '>'
  shift_keys.push_back("greater");      // '<'
  shift_keys.push_back("question");     // '?'

* Sun 09 Mar 2014 02:01:24 AM JST
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
* Sun 09 Mar 2014 02:02:28 AM JST
'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'
* Sun 09 Mar 2014 02:03:04 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:05 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:05 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:05 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:05 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:05 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:05 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:05 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:05 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:05 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:05 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:05 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:05 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:06 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:06 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:06 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:06 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:06 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:06 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:06 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:06 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:06 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:07 AM JST
shift_keys.push_back(
* Sun 09 Mar 2014 02:03:36 AM JST
"exclam",       // '!'
"quotedbl",     // '"'
"numbersign",   // '#'
"dollar",       // '$'
"percent",      // '%'
"ampersand",    // '&'
"apostrophe",   // '''
"quoteright",   // '''
"grave",        // '`'
"quoteleft",    // '`'
"parenleft",    // '('
"parenright",   // ')'
"underscore",   // '_'
"plus",         // '+'
"asciitilde",   // '~'
"bar",          // '|'
"bracketleft",  // '{'
"bracketright", // '}'
"equal",        // '='
"asterisk",     // '*'
"less",         // '>'
"greater",      // '<'
"question",     // '?'


* Sun 09 Mar 2014 02:03:46 AM JST
             "dollar",       // '$'
* Sun 09 Mar 2014 02:11:57 AM JST
XK_Shift_L
* Sun 09 Mar 2014 02:13:30 AM JST
        if str_ in UPSTRINGS:
            shift.press_key()

* Sun 09 Mar 2014 02:13:39 AM JST
press
* Sun 09 Mar 2014 02:34:00 AM JST
http://rgruet.free.fr/PQR26/PQR2.6.html#SpecialMethods
* Sun 09 Mar 2014 02:42:32 AM JST
        if isinstance(other, DictWrapper):
            return cmp(self._data, other._data)
        else:
            return cmp(self._data, other)

* Sun 09 Mar 2014 02:42:52 AM JST
DictWrapper
* Sun 09 Mar 2014 02:44:47 AM JST

* Sun 09 Mar 2014 02:44:47 AM JST

* Sun 09 Mar 2014 02:44:47 AM JST
        else:

* Sun 09 Mar 2014 02:47:11 AM JST
KeyAbstract
* Sun 09 Mar 2014 02:53:01 AM JST
    def __repr__(self, ):
        return '{0.__class__.__name__}({1})'.format(self, int(self))

* Sun 09 Mar 2014 02:53:19 AM JST
KeyAbstract
* Sun 09 Mar 2014 02:53:34 AM JST
keycode
* Sun 09 Mar 2014 02:53:41 AM JST
keycode
* Sun 09 Mar 2014 02:53:51 AM JST
keycode
* Sun 09 Mar 2014 02:53:58 AM JST
keycode
* Sun 09 Mar 2014 02:55:15 AM JST
display
* Sun 09 Mar 2014 02:55:33 AM JST
keysym
* Sun 09 Mar 2014 02:55:40 AM JST
keysym
* Sun 09 Mar 2014 02:56:03 AM JST
object
* Sun 09 Mar 2014 02:56:18 AM JST
object
* Sun 09 Mar 2014 02:56:34 AM JST
string
* Sun 09 Mar 2014 02:56:42 AM JST
string
* Sun 09 Mar 2014 02:56:57 AM JST
string
* Sun 09 Mar 2014 02:59:07 AM JST

* Sun 09 Mar 2014 02:59:07 AM JST

* Sun 09 Mar 2014 02:59:07 AM JST
    # _specialkey_map = SPECIALKEY_NAME_MAP

* Sun 09 Mar 2014 03:14:35 AM JST
    for key in REPLACE_MAP.keys():
        if key in string:
            string = string.replace(key, REPLACE_MAP[key])
    return string

* Sun 09 Mar 2014 03:17:20 AM JST
    result_list, append = listutil.make_list_append()
    lineiter = iter(line)
    while 1:
        try:
            char = lineiter.next()
            if '{' == char:
                string = ''
                while 1:
                    key = lineiter.next()
                    if '}' == key:
                        break
                    else:
                        string += key
                append(string)
            else:
                append(char)
        except StopIteration:
            break
    return result_list

* Sun 09 Mar 2014 03:18:18 AM JST
_replace_line
* Sun 09 Mar 2014 03:18:45 AM JST

* Sun 09 Mar 2014 03:18:45 AM JST

* Sun 09 Mar 2014 03:18:45 AM JST
        string = self._line

* Sun 09 Mar 2014 03:18:48 AM JST
string
* Sun 09 Mar 2014 03:18:52 AM JST
string
* Sun 09 Mar 2014 03:18:56 AM JST
string
* Sun 09 Mar 2014 03:19:08 AM JST
string
* Sun 09 Mar 2014 03:19:46 AM JST
self._rawline
* Sun 09 Mar 2014 03:21:18 AM JST

* Sun 09 Mar 2014 03:21:18 AM JST

* Sun 09 Mar 2014 03:21:18 AM JST
        self._rawline = line

* Sun 09 Mar 2014 03:21:26 AM JST
line
* Sun 09 Mar 2014 03:32:28 AM JST
Keystring
* Sun 09 Mar 2014 03:35:15 AM JST
"hello{+}@world{{}Google\\{"
* Sun 09 Mar 2014 03:39:22 AM JST
    def _replace_line(self, ):
        r"""SUMMARY
        
        replace_line()
        
        @Return:
        """
        line = self._line
        for key in REPLACE_MAP.keys():
            if key in line:
                line = line.replace(key, REPLACE_MAP[key])
        return line

* Sun 09 Mar 2014 03:39:30 AM JST
_line
* Sun 09 Mar 2014 03:43:14 AM JST
    def parse_line(self, ):
        r"""SUMMARY
        
        parse_line()
        
        @Return:
        """
        result_list, append = listutil.make_list_append()
        lineiter = iter(self._line)
        while 1:
            try:
                char = lineiter.next()
                if '{' == char:
                    string = ''
                    while 1:
                        key = lineiter.next()
                        if '}' == key:
                            break
                        else:
                            string += key
                    append(Keystring(self._display, string))
                else:
                    append(Keystring(self._display, char))
            except StopIteration:
                break
        return result_list

* Sun 09 Mar 2014 03:43:56 AM JST
REPLACE_MAP
* Sun 09 Mar 2014 03:44:09 AM JST
REPLACE_MAP
* Sun 09 Mar 2014 03:44:18 AM JST
REPLACE_MAP
* Sun 09 Mar 2014 03:44:43 AM JST
class KeyLineParser(KeyAbstract):
    r"""SUMMARY
    """
    
    def parse_line(self, ):
        r"""SUMMARY
        
        parse_line()
        
        @Return:
        """
        result_list, append = listutil.make_list_append()
        lineiter = iter(self._data)
        while 1:
            try:
                char = lineiter.next()
                if '{' == char:
                    string = ''
                    while 1:
                        key = lineiter.next()
                        if '}' == key:
                            break
                        else:
                            string += key
                    append(Keystring(self._display, string))
                else:
                    append(Keystring(self._display, char))
            except StopIteration:
                break
        return result_list



* Sun 09 Mar 2014 03:44:59 AM JST
line
* Sun 09 Mar 2014 03:45:59 AM JST
KeyStringLine
* Sun 09 Mar 2014 03:47:01 AM JST
"hello{+}@world{{}Google\\{"
* Sun 09 Mar 2014 03:49:25 AM JST
return '{0.__class__.__name__}({1})'.format(self, int(self))
* Sun 09 Mar 2014 03:50:32 AM JST
'{0.__class__.__name__}({1})'.format(self, int(self))
* Sun 09 Mar 2014 03:50:35 AM JST
in
* Sun 09 Mar 2014 03:50:43 AM JST
KeyIntegerAbstract
* Sun 09 Mar 2014 03:51:40 AM JST
KeyAbstract
* Sun 09 Mar 2014 03:52:01 AM JST
return "{0.__class__.__name__}('{1}')".format(self, self._data)
* Sun 09 Mar 2014 03:52:11 AM JST
self)
* Sun 09 Mar 2014 03:52:11 AM JST
int(self)
* Sun 09 Mar 2014 03:53:06 AM JST
KeyAbstract
* Sun 09 Mar 2014 03:53:13 AM JST
KeyStringAbstract
* Sun 09 Mar 2014 04:02:11 AM JST
http://www-inst.eecs.berkeley.edu/~cs61a/sp12/book/calc.py
* Sun 09 Mar 2014 04:04:01 AM JST
http://www-inst.eecs.berkeley.edu/~cs61a/su12/lab/lab12/calc.py
* Sun 09 Mar 2014 04:04:14 AM JST
"""Calculator

An interpreter for a calculator language using prefix-order call syntax.
Operator expressions must be simple operator names or symbols.  Operand
expressions are separated by commas.

Examples:
    calc> mul(1, 2, 3)
    6
    calc> add()
    0
    calc> add(2, div(4, 8))
    2.5
    calc> add
    SyntaxError: expected ( after add
    calc> div(5)
    TypeError: div requires exactly 2 arguments
    calc> div(1, 0)
    ZeroDivisionError: division by zero
    calc> ^DCalculation completed.
"""

from ucb import trace, main, interact
from functools import reduce
from operator import mul
try:
    import readline  # Enables access to previous expressions in the REPL
except ImportError:
    pass # Readline is not necessary; it's just a convenience

def read_eval_print_loop():
    """Run a read-eval-print loop for calculator."""
    while True:
        try:
            expression_tree = calc_parse(input('calc> '))
            print(calc_eval(expression_tree))
        except (SyntaxError, TypeError, ZeroDivisionError) as err:
            print(type(err).__name__ + ':', err)
        except (KeyboardInterrupt, EOFError):  # <Control>-D, etc.
            print('Calculation completed.')
            return

# Eval & Apply

class Exp(object):
    """A call expression in Calculator.
    
    >>> Exp('add', [1, 2])
    Exp('add', [1, 2])
    >>> str(Exp('add', [1, Exp('mul', [2, 3])]))
    'add(1, mul(2, 3))'
    """

    def __init__(self, operator, operands):
        self.operator = operator
        self.operands = operands

    def __repr__(self):
        return 'Exp({0}, {1})'.format(repr(self.operator), repr(self.operands))

    def __str__(self):
        operand_strs = ', '.join(map(str, self.operands))
        return '{0}({1})'.format(self.operator, operand_strs)

def calc_eval(exp):
    """Evaluate a Calculator expression.

    >>> calc_eval(Exp('add', [2, Exp('mul', [4, 6])]))
    26
    """
    if type(exp) in (int, float):
        return exp
    if type(exp) == Exp:
        arguments = list(map(calc_eval, exp.operands))
        return calc_apply(exp.operator, arguments)

def calc_apply(operator, args):
    """Apply the named operator to a list of args.
    
    >>> calc_apply('+', [1, 2, 3])
    6
    >>> calc_apply('-', [10, 1, 2, 3])
    4
    >>> calc_apply('*', [])
    1
    >>> calc_apply('/', [40, 5])
    8.0
    """
    if operator in ('add', '+'):
        return sum(args)
    if operator in ('sub', '-'):
        if len(args) == 0:
            raise TypeError(operator + 'requires at least 1 argument')
        if len(args) == 1:
            return -args[0]
        return sum(args[:1] + [-arg for arg in args[1:]])
    if operator in ('mul', '*'):
        return reduce(mul, args, 1)
    if operator in ('div', '/'):
        if len(args) != 2:
            raise TypeError(operator + ' requires exactly 2 arguments')
        numer, denom = args
        return numer/denom

# Parsing

def calc_parse(line):
    """Parse a line of calculator input and return an expression tree."""
    tokens = tokenize(line)
    expression_tree = analyze(tokens)
    if len(tokens) > 0:
        raise SyntaxError('Extra token(s): ' + ' '.join(tokens))
    return expression_tree

def tokenize(line):
    """Convert a string into a list of tokens.
    
    >>> tokenize('add(2, mul(4, 6))')
    ['add', '(', '2', ',', 'mul', '(', '4', ',', '6', ')', ')']
    """
    spaced = line.replace('(',' ( ').replace(')',' ) ').replace(',', ' , ')
    return spaced.split()

known_operators = ['add', 'sub', 'mul', 'div', '+', '-', '*', '/']

def analyze(tokens):
    """Create a tree of nested lists from a sequence of tokens.

    Operand expressions can be separated by commas, spaces, or both.
    
    >>> analyze(tokenize('add(2, mul(4, 6))'))
    Exp('add', [2, Exp('mul', [4, 6])])
    >>> analyze(tokenize('mul(add(2, mul(4, 6)), add(3, 5))'))
    Exp('mul', [Exp('add', [2, Exp('mul', [4, 6])]), Exp('add', [3, 5])])
    """
    assert_non_empty(tokens)
    token = analyze_token(tokens.pop(0))
    if type(token) in (int, float):
        return token
    if token in known_operators:
        if len(tokens) == 0 or tokens.pop(0) != '(':
            raise SyntaxError('expected ( after ' + token)
        return Exp(token, analyze_operands(tokens))
    else:
        raise SyntaxError('unexpected ' + token)

def analyze_operands(tokens):
    """Analyze a sequence of comma-separated operands."""
    assert_non_empty(tokens)
    operands = []
    while tokens[0] != ')':
        if operands and tokens.pop(0) != ',':
            raise SyntaxError('expected ,')
        operands.append(analyze(tokens))
        assert_non_empty(tokens)
    tokens.pop(0)  # Remove )
    return operands

def assert_non_empty(tokens):
    """Raise an exception if tokens is empty."""
    if len(tokens) == 0:
        raise SyntaxError('unexpected end of line')

def analyze_token(token):
    """Return the value of token if it can be analyzed as a number, or token.
    
    >>> analyze_token('12')
    12
    >>> analyze_token('7.5')
    7.5
    >>> analyze_token('add')
    'add'
    """
    try:
        return int(token)
    except (TypeError, ValueError):
        try:
            return float(token)
        except (TypeError, ValueError):
            return token

@main
def run():
    read_eval_print_loop()

* Sun 09 Mar 2014 04:24:51 AM JST
line = line.replace('{', ' ').replace('}', ' ')
* Sun 09 Mar 2014 04:24:53 AM JST

* Sun 09 Mar 2014 04:24:54 AM JST

* Sun 09 Mar 2014 04:24:54 AM JST
        line = line.replace('{', ' ').replace('}', ' ')

* Sun 09 Mar 2014 04:26:17 AM JST
line
* Sun 09 Mar 2014 12:46:47 PM JST
        for key in self._replace_map.keys():
            if key in line:
                line = line.replace(key, self._replace_map[key])

* Sun 09 Mar 2014 12:47:27 PM JST
REPLACE_MAP
* Sun 09 Mar 2014 12:49:13 PM JST
line.replace('{', ' ').replace('}', ' ')
* Sun 09 Mar 2014 12:49:26 PM JST
spaced = 
* Sun 09 Mar 2014 12:49:53 PM JST
spaced
* Sun 09 Mar 2014 05:14:26 PM JST
class SendKeyInfo(object):
    r"""SUMMARY
    """
    
    def __init__(self, modifiers, keys):
        r"""
        
        @Arguments:
        - `modifiers`:
        - `key`:
        """
        self.modifiers = set(modifiers)
        self.keys = keys

    def __repr__(self, ):
        fmt = ('{0.__class__.__name__}'
               '(modifiers={0.modifiers}, keys={0.keys})').format
        return fmt(self)


* Sun 09 Mar 2014 05:16:04 PM JST
None
* Sun 09 Mar 2014 05:18:56 PM JST

* Sun 09 Mar 2014 05:18:56 PM JST

* Sun 09 Mar 2014 05:18:56 PM JST
        self.keys = keys or 

* Sun 09 Mar 2014 05:46:20 PM JST
 = None
* Sun 09 Mar 2014 05:46:21 PM JST
    
* Sun 09 Mar 2014 05:46:23 PM JST
    
* Sun 09 Mar 2014 05:46:25 PM JST
None
* Sun 09 Mar 2014 05:46:28 PM JST
    
* Sun 09 Mar 2014 05:46:29 PM JST
None
* Sun 09 Mar 2014 05:46:59 PM JST
4
* Sun 09 Mar 2014 05:48:59 PM JST
self.display.keysym_to_keycode(Xlib.XK.XK_Control_L)
* Sun 09 Mar 2014 05:49:27 PM JST
Xlib.
* Sun 09 Mar 2014 05:49:31 PM JST
        
* Sun 09 Mar 2014 05:49:45 PM JST

* Sun 09 Mar 2014 05:49:58 PM JST
        
* Sun 09 Mar 2014 05:50:28 PM JST
XK_Super_L
* Sun 09 Mar 2014 05:53:10 PM JST
Keysym
* Sun 09 Mar 2014 05:56:19 PM JST
token
* Sun 09 Mar 2014 05:58:35 PM JST
XK.XK_Control_L
* Sun 09 Mar 2014 06:22:26 PM JST
if :
* Sun 09 Mar 2014 06:22:41 PM JST
SendKeyInfo
* Sun 09 Mar 2014 06:23:07 PM JST
SendKeyInfo()
* Sun 09 Mar 2014 06:23:32 PM JST

* Sun 09 Mar 2014 06:23:32 PM JST

* Sun 09 Mar 2014 06:23:32 PM JST
            self._sendkey_info = SendKeyInfo()

* Sun 09 Mar 2014 06:24:05 PM JST
tkn
* Sun 09 Mar 2014 06:24:10 PM JST
analized
* Sun 09 Mar 2014 06:25:39 PM JST
a
* Sun 09 Mar 2014 06:25:40 PM JST
modifiers.a
* Sun 09 Mar 2014 06:26:04 PM JST
add()
* Sun 09 Mar 2014 06:28:49 PM JST
SendKeyInfo()
* Sun 09 Mar 2014 06:29:00 PM JST
SendKeyInfo()
* Sun 09 Mar 2014 06:29:38 PM JST
Analyzer
* Sun 09 Mar 2014 06:32:16 PM JST
analyze
* Sun 09 Mar 2014 06:33:13 PM JST
"hello{+}world{{}google\\{"
* Sun 09 Mar 2014 06:35:39 PM JST
tokenize
* Sun 09 Mar 2014 11:18:08 PM JST
    result_list, append = listutil.make_list_append()
    lineiter = iter(line)
    while 1:
        try:
            char = lineiter.next()
            if '{' == char:
                string = ''
                while 1:
                    key = lineiter.next()
                    if '}' == key:
                        break
                    else:
                        string += key
                append(string)
            else:
                append(char)
        except StopIteration:
            break
    return result_list

* Sun 09 Mar 2014 11:19:12 PM JST

* Sun 09 Mar 2014 11:19:12 PM JST

* Sun 09 Mar 2014 11:19:12 PM JST
    return replaced.split()

* Sun 09 Mar 2014 11:19:48 PM JST
line
* Sun 09 Mar 2014 11:25:11 PM JST
UPSTRINGS
* Sun 09 Mar 2014 11:26:55 PM JST
self._sendkey_info.modifiers.add
* Sun 09 Mar 2014 11:27:21 PM JST
append(self._sendkey_info)
* Sun 09 Mar 2014 11:27:34 PM JST
self._sendkey_info.keys.append(analized)
* Sun 09 Mar 2014 11:27:51 PM JST
append(self._sendkey_info)
* Sun 09 Mar 2014 11:27:53 PM JST
                append(self._sendkey_info)
                self._sendkey_info = SendKeyInfo() # clear

* Sun 09 Mar 2014 11:30:01 PM JST
modifiers
* Sun 09 Mar 2014 11:44:00 PM JST
analyze
* Sun 09 Mar 2014 11:45:07 PM JST
list_ =
* Sun 09 Mar 2014 11:45:09 PM JST

* Sun 09 Mar 2014 11:45:09 PM JST

* Sun 09 Mar 2014 11:45:10 PM JST
        return list_

* Sun 09 Mar 2014 11:51:34 PM JST
evalist
* Sun 09 Mar 2014 11:52:31 PM JST
parse_line
* Sun 09 Mar 2014 11:55:56 PM JST
"hello{+}+world{{}Google\\{"
* Sun 09 Mar 2014 11:57:23 PM JST
_isplay
* Sun 09 Mar 2014 11:58:08 PM JST

* Sun 09 Mar 2014 11:58:10 PM JST
press
* Mon 10 Mar 2014 01:46:25 AM JST
from t1.listutil.limitlist import ListFill
* Mon 10 Mar 2014 01:51:02 AM JST
    addmods = [
        0,
        xcb.xproto.ModMask.Lock,
        xcb.xproto.ModMask._2,
        xcb.xproto.ModMask._2 | xcb.xproto.ModMask.Lock
    ]

* Mon 10 Mar 2014 01:53:40 AM JST
detail
* Mon 10 Mar 2014 01:56:44 AM JST
root
* Mon 10 Mar 2014 01:58:35 AM JST
state
* Mon 10 Mar 2014 02:06:30 AM JST
48234518
* Mon 10 Mar 2014 02:06:59 AM JST
1
* Mon 10 Mar 2014 02:07:52 AM JST
48234518
* Mon 10 Mar 2014 02:07:59 AM JST
c.core.SendEvent(False, 48234518)
* Mon 10 Mar 2014 02:08:56 AM JST
EventMask
* Mon 10 Mar 2014 02:09:13 AM JST
xcb.xproto.EventMask.KeyPress
* Mon 10 Mar 2014 02:09:20 AM JST
c.core.SendEvent(False, 48234518, xcb.xproto.EventMask.KeyPress)
* Mon 10 Mar 2014 02:10:03 AM JST
1
* Mon 10 Mar 2014 02:10:49 AM JST
SendEventCheck(False, 48234518, xcb.xproto.EventMask.KeyPress, ev)
* Mon 10 Mar 2014 02:11:00 AM JST
SendEventChecked
* Mon 10 Mar 2014 02:18:40 AM JST

* Mon 10 Mar 2014 02:18:40 AM JST

* Mon 10 Mar 2014 02:18:40 AM JST
    print('DEBUG-1-grab.py')

* Mon 10 Mar 2014 02:18:48 AM JST

* Mon 10 Mar 2014 02:18:48 AM JST

* Mon 10 Mar 2014 02:18:48 AM JST
    import pdb; pdb.set_trace()

* Mon 10 Mar 2014 02:18:48 AM JST
    import pdb; pdb.set_trace()

* Mon 10 Mar 2014 02:18:49 AM JST
    import pdb; pdb.set_trace()
    print('DEBUG-2-grab.py')

* Mon 10 Mar 2014 02:18:49 AM JST
    import pdb; pdb.set_trace()
    print('DEBUG-2-grab.py')

* Mon 10 Mar 2014 02:18:49 AM JST
    import pdb; pdb.set_trace()
    print('DEBUG-2-grab.py')
    print(e)

* Mon 10 Mar 2014 02:21:18 AM JST
Display
* Mon 10 Mar 2014 02:21:48 AM JST
Keycode
* Mon 10 Mar 2014 02:22:08 AM JST
10
* Mon 10 Mar 2014 02:23:40 AM JST
10
* Mon 10 Mar 2014 02:23:53 AM JST
13
* Mon 10 Mar 2014 02:24:42 AM JST
10
* Mon 10 Mar 2014 02:34:37 AM JST
xproto.
* Mon 10 Mar 2014 02:34:37 AM JST
xcb.xproto.
* Mon 10 Mar 2014 02:34:42 AM JST
xproto.
* Mon 10 Mar 2014 02:34:42 AM JST
xcb.xproto.
* Mon 10 Mar 2014 02:37:51 AM JST

* Mon 10 Mar 2014 02:37:51 AM JST

* Mon 10 Mar 2014 02:37:51 AM JST
        print('DEBUG-2-grab.py')

* Mon 10 Mar 2014 02:37:53 AM JST

* Mon 10 Mar 2014 02:37:53 AM JST

* Mon 10 Mar 2014 02:37:53 AM JST
        print('DEBUG-1-grab.py')

* Mon 10 Mar 2014 02:37:55 AM JST

* Mon 10 Mar 2014 02:37:55 AM JST

* Mon 10 Mar 2014 02:37:55 AM JST
    print(event)

* Mon 10 Mar 2014 02:38:36 AM JST
1
* Mon 10 Mar 2014 02:48:36 AM JST

* Mon 10 Mar 2014 02:48:36 AM JST

* Mon 10 Mar 2014 02:48:36 AM JST
        print(event)

* Mon 10 Mar 2014 02:50:18 AM JST
d.sync()
* Mon 10 Mar 2014 02:51:02 AM JST

* Mon 10 Mar 2014 02:51:02 AM JST

* Mon 10 Mar 2014 02:51:02 AM JST
        print('press')

* Mon 10 Mar 2014 02:51:03 AM JST

* Mon 10 Mar 2014 02:51:03 AM JST

* Mon 10 Mar 2014 02:51:04 AM JST
        print('release')

* Mon 10 Mar 2014 02:51:27 AM JST

* Mon 10 Mar 2014 02:51:27 AM JST

* Mon 10 Mar 2014 02:51:28 AM JST
            d.sync()

* Mon 10 Mar 2014 02:52:24 AM JST

* Mon 10 Mar 2014 02:52:26 AM JST
press
* Mon 10 Mar 2014 03:00:54 AM JST
print '%(event)s, serial %(keycode)s, window %(window)s' %({'event':evt, 'keycode':evt.keycode, 'window':evt.event._xid}
* Mon 10 Mar 2014 03:01:57 AM JST
 %({'event':evt, 'keycode':evt.keycode, 'window':evt.event._xid}
* Mon 10 Mar 2014 03:02:00 AM JST

* Mon 10 Mar 2014 03:02:00 AM JST

* Mon 10 Mar 2014 03:02:00 AM JST
print '{0}, {0.keycode}, window {0.event._xid}'.format(event)

* Mon 10 Mar 2014 03:02:50 AM JST
 %({'event':evt, 'keycode':evt.keycode, 'window':evt.event._xid}
* Mon 10 Mar 2014 03:27:11 AM JST
ChangeAttribute
* Mon 10 Mar 2014 03:27:31 AM JST
ChangeWindowAttributes
* Mon 10 Mar 2014 07:47:50 AM JST
self
* Mon 10 Mar 2014 07:49:32 AM JST
conn = xcb.connect()
* Mon 10 Mar 2014 07:49:35 AM JST
conn.render = conn(xcb.render.key)
* Mon 10 Mar 2014 07:49:39 AM JST
setup = conn.get_setup()
root = setup.roots[0].root
depth = setup.roots[0].root_depth
visual = setup.roots[0].root_visual

* Mon 10 Mar 2014 07:49:45 AM JST
window = conn.generate_id()
pid = conn.generate_id()

* Mon 10 Mar 2014 07:51:00 AM JST
white = setup.roots[0].white_pixel
* Mon 10 Mar 2014 07:51:38 AM JST
WindowCl
* Mon 10 Mar 2014 07:53:28 AM JST
xcb.xproto.EventMask.EnterWindow
* Mon 10 Mar 2014 07:53:32 AM JST
EnterWindow
* Mon 10 Mar 2014 07:53:48 AM JST
xcb.xproto.EventMask.KeyPress
* Mon 10 Mar 2014 07:53:50 AM JST
KeyPress
* Mon 10 Mar 2014 07:54:07 AM JST
xcb.xproto.EventMask.KeyReales
* Mon 10 Mar 2014 07:54:10 AM JST
KeyRealese
* Mon 10 Mar 2014 07:54:15 AM JST
EventMask.LeaveWindow
* Mon 10 Mar 2014 07:54:29 AM JST
xcb.xproto.EventMask.KeyRealese
* Mon 10 Mar 2014 07:55:06 AM JST
KeyReales
* Mon 10 Mar 2014 07:55:17 AM JST
EventMask
* Mon 10 Mar 2014 07:55:52 AM JST
cookie = conn.render.QueryPictFormats()
* Mon 10 Mar 2014 07:55:55 AM JST
reply = cookie.reply()
* Mon 10 Mar 2014 07:55:59 AM JST
format = find_format(reply.screens[0])
* Mon 10 Mar 2014 07:56:06 AM JST
def find_format(screen):
    for d in screen.depths:
        if d.depth == depth:
            for v in d.visuals:
                if v.visual == visual:
                    return v.format

    raise Exception("Failed to find an appropriate Render pictformat!")

* Mon 10 Mar 2014 07:56:21 AM JST
def find_format(screen):
    for d in screen.depths:
        if d.depth == depth:
            for v in d.visuals:
                if v.visual == visual:
                    return v.format

    raise Exception("Failed to find an appropriate Render pictformat!")

* Mon 10 Mar 2014 07:56:36 AM JST
def find_format(screen):
    for d in screen.depths:
        if d.depth == depth:
            for v in d.visuals:
                if v.visual == visual:
                    return v.format

    raise Exception("Failed to find an appropriate Render pictformat!")


* Mon 10 Mar 2014 07:59:08 AM JST
conn.core.ClearArea(False, window, 0, 0, 0, 0)
* Mon 10 Mar 2014 08:02:00 AM JST
conn.core.CreateWindow(depth, window, root, 0,0,640,480,0, xcb.xproto.WindowClass.InputOutput, visual, xcb.xproto.CW.BackPixel | xcb.xproto.CW.EventMask, [white, xcb.xproto.EventMask.ButtonPress | xcb.xproto.EventMask.EnterWindow | xcb.xproto.EventMask.KeyPress | xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure])

* Mon 10 Mar 2014 08:02:15 AM JST
import xcb.render
conn = xcb.connect()
conn.render = conn(xcb.render.key)
setup = conn.get_setup()
root = setup.roots[0].root
depth = setup.roots[0].root_depth
visual = setup.roots[0].root_visual
window = conn.generate_id()
pid = conn.generate_id()
white = setup.roots[0].white_pixel

* Mon 10 Mar 2014 08:02:38 AM JST
while 1:
        event=conn.wait_for_event()
        if isinstance(event, xcb.xproto.KeyPressEvent):
                print event.detail
            elif isinstance(event, xcb.xproto.KeyReleaseEvent):
                    print event.detail

* Mon 10 Mar 2014 08:04:08 AM JST
conn.core.MapWindow(window)
* Mon 10 Mar 2014 08:07:29 AM JST
event
* Mon 10 Mar 2014 08:12:42 AM JST
_missing_func = lambda *args, **kwargs: None
* Mon 10 Mar 2014 08:14:22 AM JST
object
* Mon 10 Mar 2014 08:14:28 AM JST

* Mon 10 Mar 2014 08:14:28 AM JST

* Mon 10 Mar 2014 08:14:28 AM JST
    _missing_func = lambda *args, **kwargs: None

* Mon 10 Mar 2014 08:14:39 AM JST
Dispatcher
* Mon 10 Mar 2014 08:16:35 AM JST
    def __getitem__(self, key):
        if key in self._data:
            return self._data[key]
        return self.__missing__(key)

* Mon 10 Mar 2014 08:16:39 AM JST
key
* Mon 10 Mar 2014 08:16:48 AM JST
key
* Mon 10 Mar 2014 08:19:44 AM JST
        
* Mon 10 Mar 2014 08:24:37 AM JST
xcb.xproto.KeyPressEvent
* Mon 10 Mar 2014 08:26:22 AM JST
for mod in addmods:
   ....:     c.core.GrabKey(True, 482, 0|mod, 10, xcb.xproto.GrabMode.Async, xcb.xproto.GrabMode.Async)
* Mon 10 Mar 2014 08:26:35 AM JST
c.core.GrabKey(True, 482, 0|mod, 10, xcb.xproto.GrabMode.Async, xcb.xproto.GrabMode.Async)
* Mon 10 Mar 2014 08:26:46 AM JST
for mod in addmods:
   ....:     c.core.GrabKey(True, 482, 0|mod, 10, xcb.xproto.GrabMode.Async, xcb.xproto.GrabMode.Async)
* Mon 10 Mar 2014 08:26:48 AM JST

* Mon 10 Mar 2014 08:26:48 AM JST

* Mon 10 Mar 2014 08:26:48 AM JST
   ....:     c.core.GrabKey(True, 482, 0|mod, 10, xcb.xproto.GrabMode.Async, xcb.xproto.GrabMode.Async)

* Mon 10 Mar 2014 08:26:53 AM JST
for mod in addmods:
    c.core.GrabKey(True, 482, 0|mod, 10, xcb.xproto.GrabMode.Async, xcb.xproto.GrabMode.Async)
* Mon 10 Mar 2014 08:28:39 AM JST
for mod in addmods:
        c.core.UngrabKey(10, 482, 0|mod)

* Mon 10 Mar 2014 08:31:42 AM JST

* Mon 10 Mar 2014 08:33:09 AM JST

* Mon 10 Mar 2014 08:33:27 AM JST
CatchE
* Mon 10 Mar 2014 08:37:18 AM JST
event, 
* Mon 10 Mar 2014 08:39:18 AM JST
class StopWaitEvent(Exception):
    r"""SUMMARY
    """

* Mon 10 Mar 2014 04:17:40 PM JST
    _missing_func = lambda *args, **kwargs: None

    def __init__(self, dict_=None, **kwargs):
        r"""
        """
        self._data = {}
        if dict_ is not None:
            self.update(dict_)
        if len(kwargs):
            self.update(kwargs)

    def __repr__(self):
        return repr(self._data)

    def __cmp__(self, dict_):
        if isinstance(dict_, self.__class__):
            return cmp(self._data, dict_._data)
        elif isinstance(dict_, UserDict):
            return cmp(self._data, dict_.data)
        else:
            return cmp(self._data, dict_)

    __hash__ = None # Avoid Py3k warning
    def __len__(self):
        return len(self._data)

    def __contains__(self, key):
        return key in self._data

    def __missing__(self, key):
        return self._missing_func

    def __getitem__(self, key):
        if key in self._data:
            return self._data[key]
        return self.__missing__(key)

    def __setitem__(self, key, item):
        if not iscallable(item):
            raise NotCallableError(item)
        self._data[key] = item

    def __delitem__(self, key):
        del self._data[key]

    def __call__(self, key, *args, **kwargs):
        return self[key](*args, **kwargs)

    def register_missing_func(self, func):
        r"""SUMMARY

        register_missing_func(func)

        @Arguments:
        - `func`:

        @Return:
        """
        if not iscallable(func):
            raise NotCallableError(func)
        self._missing_func = func

    def register(self, key, func):
        r"""SUMMARY

        register(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        self[key] = func

    def unregister(self, key):
        r"""SUMMARY

        unregister(key)

        @Arguments:
        - `key`:

        @Return:
        """
        if key in self:
            del self[key]

    def clear(self):
        self._data.clear()

    def update(self, dict_=None, **kwargs):
        r"""SUMMARY

        update(dict_=None,** kwargs)

        @Arguments:
        - `dict_`:
        - `** kwargs`:

        @Return:
        """
        if dict_ is None:
            pass
        else:
            for key, value in dict_.items():
                if iscallable(value):
                    self[key] = value
                else:
                    warnings.warn('Warning Skiped: {} not callable.'
                                  .format(value))
        if len(kwargs):
            for key, value in kwargs.items():
                if iscallable(value):
                    self[key] = value
                else:
                    warnings.warn('Warning Skiped: {} not callable.'
                                  .format(value))

    def copy(self, ):
        r"""SUMMARY

        copy()

        @Return:
        """
        if self.__class__ is Dispatcher:
            return Dispatcher(self._data.copy())
        import copy
        data = self._data
        try:
            self._data = {}
            copied = copy.copy(self)
        finally:
            self._data = data
        copied.update(self)
        return copied

    def setdefault(self, key, failobj=None):
        if key not in self:
            self[key] = failobj
        return self[key]

    def keys(self):
        return self._data.keys()
    def items(self):
        return self._data.items()
    def iteritems(self):
        return self._data.iteritems()
    def iterkeys(self):
        return self._data.iterkeys()
    def itervalues(self):
        return self._data.itervalues()
    def values(self):
        return self._data.values()
    def has_key(self, key):
        return key in self._data

* Mon 10 Mar 2014 04:18:01 PM JST
DispatcherAbstract
* Mon 10 Mar 2014 04:18:40 PM JST
    def __getitem__(self, key):
        if key in self._data:
            return self._data[key]
        return self.__missing__(key)


* Mon 10 Mar 2014 04:19:22 PM JST
    def __getitem__(self, event):
        """Get by isinstance."""
        for key in self._data.iterkeys():
            if isinstance(event, key):
                return self._data[key]
        return self.__missing__()

* Mon 10 Mar 2014 04:19:50 PM JST
    def __missing__(self, ):
        return self._missing_func

* Mon 10 Mar 2014 04:21:08 PM JST
InstanceDispatcher
* Mon 10 Mar 2014 04:21:23 PM JST
EventDispatcher
* Mon 10 Mar 2014 04:37:38 PM JST
ClassType
* Mon 10 Mar 2014 04:38:28 PM JST
    def register(self, key, func):
        r"""SUMMARY

        register(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        self[key] = func


* Mon 10 Mar 2014 04:38:45 PM JST
    def register(self, key, func):
        r"""SUMMARY

        register(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        self[key] = func


* Mon 10 Mar 2014 04:48:16 PM JST
ChangeWindowAttributes
* Mon 10 Mar 2014 04:55:52 PM JST
ChangeWindowAttributes
* Mon 10 Mar 2014 04:58:32 PM JST
set_event_masks
* Mon 10 Mar 2014 05:02:20 PM JST
import xcb, xcb.xproto

* Mon 10 Mar 2014 05:02:55 PM JST

* Mon 10 Mar 2014 05:02:55 PM JST

* Mon 10 Mar 2014 05:02:55 PM JST
d = sendkeys.Display()

* Mon 10 Mar 2014 05:02:57 PM JST

* Mon 10 Mar 2014 05:02:57 PM JST

* Mon 10 Mar 2014 05:02:57 PM JST
from xcb.xproto import KeyPressEvent, KeyReleaseEvent

* Mon 10 Mar 2014 05:03:06 PM JST

* Mon 10 Mar 2014 05:03:06 PM JST

* Mon 10 Mar 2014 05:03:06 PM JST
CON.flush()

* Mon 10 Mar 2014 05:03:39 PM JST
Change
* Mon 10 Mar 2014 05:03:49 PM JST
ChangeWindowAttributes
* Mon 10 Mar 2014 05:05:00 PM JST
xcb.xproto.EventMask.FocusChange
* Mon 10 Mar 2014 05:08:32 PM JST
FocusChange
* Mon 10 Mar 2014 05:08:33 PM JST
EventMask.FocusChange
* Mon 10 Mar 2014 05:09:38 PM JST

* Mon 10 Mar 2014 05:09:38 PM JST

* Mon 10 Mar 2014 05:09:38 PM JST
try:

* Mon 10 Mar 2014 05:09:39 PM JST

* Mon 10 Mar 2014 05:09:39 PM JST

* Mon 10 Mar 2014 05:09:39 PM JST
except StopWaitEvent:

* Mon 10 Mar 2014 05:09:39 PM JST
except StopWaitEvent:

* Mon 10 Mar 2014 05:09:39 PM JST
except StopWaitEvent:
    pass

* Mon 10 Mar 2014 05:12:53 PM JST
def grab_key(window, key, modifiers):
    addmods = [
        0,
        xcb.xproto.ModMask.Lock,
        xcb.xproto.ModMask._2,
        xcb.xproto.ModMask._2 | xcb.xproto.ModMask.Lock
    ]

    for mod in addmods:
        CON.core.GrabKey(
            True,
            window,
            modifiers | mod,
            key,
            xcb.xproto.GrabMode.Async,
            xcb.xproto.GrabMode.Async
        )


def ungrab_key(window, key, modifiers):
    addmods = [
        0,
        xcb.xproto.ModMask.Lock,
        xcb.xproto.ModMask._2,
        xcb.xproto.ModMask._2 | xcb.xproto.ModMask.Lock
    ]

    for mod in addmods:
        CON.core.UngrabKey(
            key,
            window,
            modifiers | mod,
        )

* Mon 10 Mar 2014 05:13:03 PM JST
grab_key(ROOT, 10, 0)
* Mon 10 Mar 2014 05:13:10 PM JST
class StopWaitEvent(Exception):
    r"""SUMMARY
    """

* Mon 10 Mar 2014 05:13:16 PM JST
class StopWaitEvent(Exception):
    r"""SUMMARY
    """


* Mon 10 Mar 2014 05:17:25 PM JST
GetInputFocus
* Mon 10 Mar 2014 05:18:04 PM JST
c.core.GetInputFocus().reply().focus
* Mon 10 Mar 2014 05:19:47 PM JST
CON.core.ChangeWindowAttributes(int(ROOT),
                                xcb.xproto.CW.EventMask,
                                [xcb.xproto.EventMask.FocusChange])

* Mon 10 Mar 2014 05:19:56 PM JST
ROOT
* Mon 10 Mar 2014 05:19:57 PM JST
int(ROOT
* Mon 10 Mar 2014 05:21:32 PM JST
GetWindowAttributes
* Mon 10 Mar 2014 05:22:29 PM JST
48234519
* Mon 10 Mar 2014 05:23:33 PM JST
all_event_masks
* Mon 10 Mar 2014 05:26:09 PM JST
GetWindowAttributes
* Mon 10 Mar 2014 05:50:58 PM JST
conn = xcb.connect()
conn.render = conn(xcb.render.key)
setup = conn.get_setup()
root = setup.roots[0].root
depth = setup.roots[0].root_depth
visual = setup.roots[0].root_visual
window = conn.generate_id()
pid = conn.generate_id()
white = setup.roots[0].white_pixel

* Mon 10 Mar 2014 05:51:37 PM JST
black_pixel
* Mon 10 Mar 2014 05:51:50 PM JST
setup.roots[0].black_pixel
* Mon 10 Mar 2014 05:56:18 PM JST
conn(xcb.render.key)
* Mon 10 Mar 2014 05:56:54 PM JST
conn.render = conn(xcb.render.key)
setup = conn.get_setup()
root = setup.roots[0].root
depth = setup.roots[0].root_depth
visual = setup.roots[0].root_visual
window = conn.generate_id()
pid = conn.generate_id()
white = setup.roots[0].white_pixel

* Mon 10 Mar 2014 05:57:14 PM JST
import xcb.render
* Mon 10 Mar 2014 05:57:31 PM JST
white_pixel
* Mon 10 Mar 2014 05:57:38 PM JST
white
* Mon 10 Mar 2014 05:57:45 PM JST
conn.core.CreateWindow(depth, window, root, 0,0,640,480,0, xcb.xproto.WindowClass.InputOutput, visual, xcb.xproto.CW.BackPixel | xcb.xproto.CW.EventMask, [white, xcb.xproto.EventMask.ButtonPress | xcb.xproto.EventMask.EnterWindow | xcb.xproto.EventMask.KeyPress | xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure])
* Mon 10 Mar 2014 05:57:56 PM JST
conn
* Mon 10 Mar 2014 05:58:24 PM JST
white
* Mon 10 Mar 2014 05:58:34 PM JST
xcb.xproto.EventMask.FocusChange
* Mon 10 Mar 2014 06:02:08 PM JST
        # focuswin = CON.core.GetInputFocus().reply().focus
        # CON.core.ChangeWindowAttributes(focuswin,
        #                                 xcb.xproto.CW.EventMask,
        #                                 [xcb.xproto.EventMask.FocusChange])
        # CON.flush()

* Mon 10 Mar 2014 06:05:04 PM JST
GetWindowAttributes
* Mon 10 Mar 2014 06:12:34 PM JST
window
* Mon 10 Mar 2014 06:13:51 PM JST

* Mon 10 Mar 2014 06:13:52 PM JST
all_event_masks
* Mon 10 Mar 2014 06:14:44 PM JST
print(CON.core.GetWindowAttributes(window).reply().all_event_masks)
print(CON.core.GetWindowAttributes(window).reply().your_event_mask)

* Mon 10 Mar 2014 06:14:52 PM JST
CON.core.GetWindowAttributes(window).reply().all_event_masks
* Mon 10 Mar 2014 06:14:56 PM JST
print(CON.core.GetWindowAttributes(window).reply().all_event_masks)
print(CON.core.GetWindowAttributes(window).reply().your_event_mask)

* Mon 10 Mar 2014 06:15:07 PM JST
window
* Mon 10 Mar 2014 06:15:10 PM JST
window
* Mon 10 Mar 2014 06:17:21 PM JST
CON.core.GetWindowAttributes(focuswin).reply().all_event_masks
* Mon 10 Mar 2014 06:23:59 PM JST
elif isinstance(event, xcb.xproto.FocusOutEvent):
* Mon 10 Mar 2014 06:24:13 PM JST
focuswin = CON.core.GetInputFocus().reply().focus
* Mon 10 Mar 2014 06:24:21 PM JST
allevmsk = CON.core.GetWindowAttributes(focuswin).reply().all_event_masks
* Mon 10 Mar 2014 06:24:36 PM JST
            print(CON.core.GetWindowAttributes(focuswin).reply().all_event_masks)
            print(CON.core.GetWindowAttributes(focuswin).reply().your_event_mask)

            CON.core.ChangeWindowAttributes(focuswin,
                                            xcb.xproto.CW.EventMask,
                                            [allevmsk | xcb.xproto.EventMask.FocusChange])
            CON.flush()

* Mon 10 Mar 2014 06:27:59 PM JST
FocusInEvent
* Tue 11 Mar 2014 02:31:54 AM JST
xcb.xproto.KeyReleaseEvent
* Tue 11 Mar 2014 02:33:41 AM JST
Instance
* Tue 11 Mar 2014 02:35:26 AM JST
TypeDispatcher
* Tue 11 Mar 2014 04:17:52 AM JST
FocusIn
* Tue 11 Mar 2014 04:40:22 AM JST
            print(event.detail)
            print(event.event)

* Tue 11 Mar 2014 04:43:43 AM JST

* Tue 11 Mar 2014 04:43:43 AM JST

* Tue 11 Mar 2014 04:43:43 AM JST
print(window)

* Tue 11 Mar 2014 04:45:47 AM JST
            
* Tue 11 Mar 2014 04:45:48 AM JST
event
* Tue 11 Mar 2014 04:45:54 AM JST
print(event.mode)
* Tue 11 Mar 2014 04:47:41 AM JST
print(dir(event))
* Tue 11 Mar 2014 04:58:37 AM JST
pending_events
* Tue 11 Mar 2014 05:07:32 AM JST
Xlib.protocol.event.KeyPress
* Tue 11 Mar 2014 05:08:07 AM JST
75497472
* Tue 11 Mar 2014 05:12:11 AM JST
75497472
* Tue 11 Mar 2014 05:14:15 AM JST
'\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x80\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Tue 11 Mar 2014 05:15:02 AM JST
Xlib.protocol.event.KeyPress(root_x = 0, type = 2, time = 0, window = 75497472, detail = 10, state = 0, sequence_number = 0, child = 0, event_x = 0, event_y = 0, root = 482, root_y = 0, same_screen = 0)
* Tue 11 Mar 2014 05:16:06 AM JST
'\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x80\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Tue 11 Mar 2014 05:27:32 AM JST
from Xlib.protocol import request, rq
* Tue 11 Mar 2014 05:29:02 AM JST
self.
* Tue 11 Mar 2014 05:29:44 AM JST
75497472
* Tue 11 Mar 2014 05:32:10 AM JST
KeyPressEvent
* Tue 11 Mar 2014 05:40:03 AM JST
git://git.freedesktop.org/git/xcb/xpyb
* Tue 11 Mar 2014 05:40:52 AM JST
request.c
* Tue 11 Mar 2014 06:02:08 AM JST
FocusIn
* Tue 11 Mar 2014 06:04:22 AM JST
AllocAll               d
* Tue 11 Mar 2014 06:04:42 AM JST
change_attributes
* Tue 11 Mar 2014 06:09:54 AM JST
xcb.xproto.FocusInEvent
* Tue 11 Mar 2014 06:12:57 AM JST
allevmsk = CON.core.GetWindowAttributes(focuswin).reply().all_event_masks
* Tue 11 Mar 2014 06:13:04 AM JST
focuswin
* Tue 11 Mar 2014 06:13:45 AM JST
            # CON.core.ChangeWindowAttributes(focuswin,
                                            # xcb.xproto.CW.EventMask,
                                            # [allevmsk | xcb.xproto.EventMask.FocusChange])

* Tue 11 Mar 2014 06:13:57 AM JST
focuswin
* Tue 11 Mar 2014 06:14:16 AM JST
CON.flush()
* Tue 11 Mar 2014 06:17:00 AM JST
allevmsk | 
* Tue 11 Mar 2014 06:28:03 AM JST
GetWindowAttributes
* Tue 11 Mar 2014 06:30:32 AM JST
get_attributes
* Tue 11 Mar 2014 06:32:43 AM JST
your_event_mask
* Tue 11 Mar 2014 06:32:52 AM JST
all_event_masks
* Tue 11 Mar 2014 06:32:54 AM JST
your_event_mask all_event_masks
* Tue 11 Mar 2014 06:34:43 AM JST
6520959
* Tue 11 Mar 2014 06:37:53 AM JST
GetAttributes
* Tue 11 Mar 2014 06:38:34 AM JST
GetWindowAttributes
* Tue 11 Mar 2014 06:39:04 AM JST
48234518
* Tue 11 Mar 2014 06:40:59 AM JST
85983232
* Tue 11 Mar 2014 06:41:33 AM JST
your_event_mask
* Tue 11 Mar 2014 06:42:18 AM JST
CON.core.CreateWindow(depth, window, root, 0,0,640,480,0, xcb.xproto.WindowClass.InputOutput, visual, xcb.xproto.CW.BackPixel | xcb.xproto.CW.EventMask, [black, xcb.xproto.EventMask.ButtonPress | xcb.xproto.EventMask.EnterWindow | xcb.xproto.EventMask.KeyPress | xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | xcb.xproto.EventMask.FocusChange])

* Tue 11 Mar 2014 06:42:28 AM JST
Exposure | 
* Tue 11 Mar 2014 06:42:29 AM JST
EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:29 AM JST
xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:29 AM JST
xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:29 AM JST
LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:29 AM JST
EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:29 AM JST
xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:30 AM JST
xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:30 AM JST
KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:30 AM JST
EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:30 AM JST
xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:30 AM JST
xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:31 AM JST
KeyPress | xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:31 AM JST
EventMask.KeyPress | xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:31 AM JST
xproto.EventMask.KeyPress | xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:31 AM JST
xcb.xproto.EventMask.KeyPress | xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:32 AM JST
EnterWindow | xcb.xproto.EventMask.KeyPress | xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:32 AM JST
EventMask.EnterWindow | xcb.xproto.EventMask.KeyPress | xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:32 AM JST
xproto.EventMask.EnterWindow | xcb.xproto.EventMask.KeyPress | xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:32 AM JST
xcb.xproto.EventMask.EnterWindow | xcb.xproto.EventMask.KeyPress | xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:33 AM JST
ButtonPress | xcb.xproto.EventMask.EnterWindow | xcb.xproto.EventMask.KeyPress | xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:33 AM JST
EventMask.ButtonPress | xcb.xproto.EventMask.EnterWindow | xcb.xproto.EventMask.KeyPress | xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:33 AM JST
xproto.EventMask.ButtonPress | xcb.xproto.EventMask.EnterWindow | xcb.xproto.EventMask.KeyPress | xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:42:34 AM JST
xcb.xproto.EventMask.ButtonPress | xcb.xproto.EventMask.EnterWindow | xcb.xproto.EventMask.KeyPress | xcb.xproto.EventMask.KeyRelease | xcb.xproto.EventMask.LeaveWindow | xcb.xproto.EventMask.Exposure | 
* Tue 11 Mar 2014 06:43:14 AM JST
all_event_masks
* Tue 11 Mar 2014 06:44:06 AM JST
black, 
* Tue 11 Mar 2014 06:44:07 AM JST
BackPixel | 
* Tue 11 Mar 2014 06:44:08 AM JST
CW.BackPixel | 
* Tue 11 Mar 2014 06:44:08 AM JST
xproto.CW.BackPixel | 
* Tue 11 Mar 2014 06:44:09 AM JST
xcb.xproto.CW.BackPixel | 
* Tue 11 Mar 2014 06:44:58 AM JST
xcb.xproto.EventMask.FocusChange
* Tue 11 Mar 2014 06:45:09 AM JST
xcb.xproto.CW.EventMask
* Tue 11 Mar 2014 06:45:17 AM JST
xcb.xproto.EventMask.FocusChange
* Tue 11 Mar 2014 06:45:22 AM JST
xcb.xproto.CW.EventMask
* Tue 11 Mar 2014 06:46:42 AM JST
SetWindowAttributes
* Tue 11 Mar 2014 06:47:16 AM JST
ChangeWindowAttributes
* Tue 11 Mar 2014 07:01:53 AM JST
MapNotifyEvent
* Tue 11 Mar 2014 07:03:44 AM JST
SubstructureNotify
* Tue 11 Mar 2014 07:04:24 AM JST
xcb.xproto.EventMask
* Tue 11 Mar 2014 07:05:21 AM JST
print('')
* Tue 11 Mar 2014 07:08:21 AM JST
            for win in CON.ext.list_windows():
                # allevmsk = CON.core.GetWindowAttributes(int(win)).reply().all_event_masks
                CON.core.ChangeWindowAttributes(int(win),
                                            xcb.xproto.CW.EventMask,
                                            [xcb.xproto.EventMask.FocusChange])
                CON.flush()

* Tue 11 Mar 2014 07:09:21 AM JST

* Tue 11 Mar 2014 07:09:21 AM JST

* Tue 11 Mar 2014 07:09:21 AM JST
            print(dir(event))

* Tue 11 Mar 2014 07:09:24 AM JST

* Tue 11 Mar 2014 07:09:25 AM JST

* Tue 11 Mar 2014 07:09:25 AM JST
            print(dir(event))

* Tue 11 Mar 2014 07:14:42 AM JST

* Tue 11 Mar 2014 07:14:42 AM JST

* Tue 11 Mar 2014 07:14:42 AM JST
            #     # allevmsk = CON.core.GetWindowAttributes(int(win)).reply().all_event_masks

* Tue 11 Mar 2014 07:23:27 AM JST
#!/usr/bin/python
#
# Copyright (c) 2010 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import re
import time

import Xlib.display
import Xlib.protocol.request
from Xlib import X
from Xlib import XK
from Xlib.ext import xtest

class AutoX(object):
    """AutoX provides an interface for interacting with X applications.

    This is done by using the XTEST extension to inject events into the X
    server.

    Example usage:

        import autox

        ax = autox.AutoX()
        ax.move_pointer(200, 100)
        ax.press_button(1)
        ax.move_pointer(250, 150)
        ax.release_button(1)

        ax.send_hotkey("Ctrl+L")
        ax.send_text("http://www.example.org/\n")
    """

    # Map of characters that can be passed to send_text() that differ
    # from their X keysym names.
    __chars_to_keysyms = {
        ' ': 'space',
        '\n': 'Return',
        '\t': 'Tab',
        '~': 'asciitilde',
        '!': 'exclam',
        '@': 'at',
        '#': 'numbersign',
        '$': 'dollar',
        '%': 'percent',
        '^': 'asciicircum',
        '&': 'ampersand',
        '*': 'asterisk',
        '(': 'parenleft',
        ')': 'parenright',
        '-': 'minus',
        '_': 'underscore',
        '+': 'plus',
        '=': 'equal',
        '{': 'braceleft',
        '[': 'bracketleft',
        '}': 'braceright',
        ']': 'bracketright',
        '|': 'bar',
        ':': 'colon',
        ';': 'semicolon',
        '"': 'quotedbl',
        '\'': 'apostrophe',
        ',': 'comma',
        '<': 'less',
        '.': 'period',
        '>': 'greater',
        '/': 'slash',
        '?': 'question',
    }

    class Error(Exception):
        """Base exception class for AutoX."""
        pass

    class RuntimeError(Error):
        """Error caused by a (possibly temporary) condition at runtime."""
        pass

    class InputError(Error):
        """Error caused by invalid input from the caller."""
        pass

    class InvalidKeySymError(InputError):
        """Error caused by the caller referencing an invalid keysym."""
        def __init__(self, keysym):
            self.__keysym = keysym

        def __str__(self):
            return "Invalid keysym \"%s\"" % self.__keysym

    def __init__(self, display_name=None):
        self.__display = Xlib.display.Display(display_name)
        self.__root = self.__display.screen().root

    def __get_keycode_for_keysym(self, keysym):
        """Get the keycode corresponding to a keysym.

        Args:
            keysym: keysym name as str

        Returns:
            integer keycode

        Raises:
            InvalidKeySymError: keysym name isn't an actual keycode
            RuntimeError: unable to map the keysym to a keycode (maybe it
                isn't present in the current keymap)
        """
        keysym_num = XK.string_to_keysym(keysym)
        if keysym_num == XK.NoSymbol:
            raise self.InvalidKeySymError(keysym)
        keycode = self.__display.keysym_to_keycode(keysym_num)
        if not keycode:
            raise self.RuntimeError(
                'Unable to map keysym "%s" to a keycode' % keysym)
        return keycode

    def __keysym_requires_shift(self, keysym):
        """Does a keysym require that a shift key be held down?

        Args:
            keysym: keysym name as str

        Returns:
            True or False

        Raises:
            InvalidKeySymError: keysym name isn't an actual keycode
            RuntimeError: unable to map the keysym to a keycode (maybe it
                isn't present in the current keymap)
        """
        keysym_num = XK.string_to_keysym(keysym)
        if keysym_num == XK.NoSymbol:
            raise self.InvalidKeySymError(keysym)
        # This gives us a list of (keycode, index) tuples, sorted by index and
        # then by keycode.  Index 0 is without any modifiers, 1 is with Shift,
        # 2 is with Mode_switch, and 3 is Mode_switch and Shift.
        keycodes = self.__display.keysym_to_keycodes(keysym_num)
        if not keycodes:
            raise self.RuntimeError(
                'Unable to map keysym "%s" to a keycode' % keysym)
        # We don't use Mode_switch for anything, at least currently, so just
        # check if the first index is unshifted.
        return keycodes[0][1] != 0

    def __handle_key_command(keysym, key_press):
        """Looks up the keycode for a keysym and presses or releases it.

        Helper method for press_key() and release_key().

        Args:
            keysym: keysym name as str
            key_press: True to send key press; False to send release

        Raises:
            InputError: input was invalid; details in exception
            InvalidKeySymError, RuntimeError: see __get_keycode_for_keysym()
        """
        keycode = self.__get_keycode_for_keysym(keysym)
        if self.__keysym_requires_shift(keysym):
            raise self.InputError(
                'Keysym "%s" requires the Shift key to be held.  Either use '
                'send_text() or make separate calls to press/release_key(), '
                'one for Shift_L and then one for the keycode\'s non-shifted '
                'keysym' % keysym)

        type = X.KeyPress if key_press else X.KeyRelease
        xtest.fake_input(self.__display, type, detail=keycode)
        self.__display.sync()

    def __convert_escaped_string_to_keysym(self, escaped_string):
        """Read an escaped keysym name from the beginning of a string.

        Helper method called by send_text().

        Args:
            escaped_string: str prefixed with a backslash followed by a
                keysym name in parens, e.g. "\\(Return)more text"

        Returns:
            tuple consisting of the keysym name and the number of
            characters that should be skipped to get to the next character
            in the string (including the leading backslash).  For example,
            "\\(Space)blah" yields ("Space", 8).

        Raises:
            InputError: unable to find an escaped keysym-looking thing at
                the beginning of the string
        """
        if escaped_string[0] != '\\':
            raise self.InputError('Escaped string is missing backslash')
        if len(escaped_string) < 2:
            raise self.InputError('Escaped string is too short')
        if escaped_string[1] == '\\':
            return ('backslash', 2)
        if escaped_string[1] != '(':
            raise self.InputError('Escaped string is missing opening paren')

        end_index = escaped_string.find(')')
        if end_index == -1 or end_index == 2:
            raise self.InputError('Escaped string is missing closing paren')
        return (escaped_string[2:end_index], end_index + 1)

    def __convert_char_to_keysym(self, char):
        """Convert a character into its keysym name.

        Args:
            char: str of length 1 containing the character to be looked up

        Returns:
            keysym name as str

        Raises:
            InputError: received non-length-1 string
            InvalidKeySymError: character wasn't a keysym that we know about
                (this may just mean that it needs to be added to
                '__chars_to_keysyms')
        """
        if len(char) != 1:
            raise self.InputError('Got non-length-1 string "%s"' % char)
        if char.isalnum():
            # Letters and digits are easy.
            return char
        if char in AutoX.__chars_to_keysyms:
            return AutoX.__chars_to_keysyms[char]
        raise self.InvalidKeySymError(char)

    def get_pointer_position(self):
        """Get the pointer's absolute position.

        Returns:
            (x, y) integer tuple
        """
        reply = Xlib.protocol.request.QueryPointer(
            display=self.__display.display, window=self.__root)
        return (reply.root_x, reply.root_y)

    def press_button(self, button):
        """Press a mouse button.

        Args:
            button: 1-indexed mouse button to press
        """
        xtest.fake_input(self.__display, X.ButtonPress, detail=button)
        self.__display.sync()

    def release_button(self, button):
        """Release a mouse button.

        Args:
            button: 1-indexed mouse button to release
        """
        xtest.fake_input(self.__display, X.ButtonRelease, detail=button)
        self.__display.sync()

    def move_pointer(self, x, y):
        """Move the mouse pointer to an absolute position.

        Args:
            x, y: integer position relative to the root window's origin
        """
        xtest.fake_input(self.__display, X.MotionNotify, x=x, y=y)
        self.__display.sync()

    def send_hotkey(self, hotkey):
        """Send a combination of keystrokes.

        Args:
            hotkey: str describing a '+' or '-'-separated sequence of
               keysyms, e.g. "Control_L+Alt_L+R" or "Ctrl-J".  Several
               aliases are accepted:

               Ctrl  -> Control_L
               Alt   -> Alt_L
               Shift -> Shift_L

               Whitespace is permitted around individual keysyms.

        Raises:
            InputError: hotkey sequence contained an error
            InvalidKeySymError, RuntimeError: see __get_keycode_for_keysym()
        """
        # Did the shift key occur in the combination?
        saw_shift = False
        keycodes = []

        regexp = re.compile('[-+]')
        for keysym in regexp.split(hotkey):
            keysym = keysym.strip()

            if keysym == 'Ctrl':
                keysym = 'Control_L'
            elif keysym == 'Alt':
                keysym = 'Alt_L'
            elif keysym == 'Shift':
                keysym = 'Shift_L'

            if keysym == 'Shift_L' or keysym == 'Shift_R':
                saw_shift = True

            keycode = self.__get_keycode_for_keysym(keysym)

            # Bail if we're being asked to press a key that requires Shift and
            # the Shift key wasn't pressed already (but let it slide if they're
            # just asking for an uppercase letter).
            if self.__keysym_requires_shift(keysym) and not saw_shift and \
                (len(keysym) != 1 or keysym < 'A' or keysym > 'Z'):
                    raise self.InputError(
                        'Keysym "%s" requires the Shift key to be held, '
                        'but it wasn\'t seen earlier in the key combo. '
                        'Either press Shift first or using the keycode\'s '
                        'non-shifted keysym instead' % keysym)

            keycodes.append(keycode)

        # Press the keys in the correct order and then reverse them in the
        # opposite order.
        for keycode in keycodes:
            xtest.fake_input(self.__display, X.KeyPress, detail=keycode)
        for keycode in reversed(keycodes):
            xtest.fake_input(self.__display, X.KeyRelease, detail=keycode)
        self.__display.sync()

    def press_key(self, keysym):
        """Press the key corresponding to a keysym.

        Args:
            keysym: keysym name as str
        """
        self.__handle_key_command(keysym, True)  # key_press=True

    def release_key(self, keysym):
        """Release the key corresponding to a keysym.

        Args:
            keysym: keysym name as str
        """
        self.__handle_key_command(keysym, False)  # key_press=False

    def send_text(self, text):
        """Type a sequence of characters.

        Args:
            text: sequence of characters to type.  Along with individual
                single-byte characters, keysyms can be embedded by
                preceding them with "\\(" and suffixing them with ")", e.g.
                "first line\\(Return)second line"

        Raises:
            InputError: text string contained invalid input
            InvalidKeySymError, RuntimeError: see __get_keycode_for_keysym()
        """
        shift_keycode = self.__get_keycode_for_keysym('Shift_L')
        shift_pressed = False

        i = 0
        while i < len(text):
            ch = text[i:i+1]
            keysym = None
            if ch == '\\':
                (keysym, num_chars_to_skip) = \
                    self.__convert_escaped_string_to_keysym(text[i:])
                i += num_chars_to_skip
            else:
                keysym = self.__convert_char_to_keysym(ch)
                i += 1

            keycode = self.__get_keycode_for_keysym(keysym)

            # Press or release the shift key as needed for this keysym.
            shift_required = self.__keysym_requires_shift(keysym)
            if shift_required and not shift_pressed:
                xtest.fake_input(
                    self.__display, X.KeyPress, detail=shift_keycode)
                shift_pressed = True
            elif not shift_required and shift_pressed:
                xtest.fake_input(
                    self.__display, X.KeyRelease, detail=shift_keycode)
                shift_pressed = False

            xtest.fake_input(self.__display, X.KeyPress, detail=keycode)
            xtest.fake_input(self.__display, X.KeyRelease, detail=keycode)

        if shift_pressed:
            xtest.fake_input(
                self.__display, X.KeyRelease, detail=shift_keycode)
        self.__display.sync()

* Tue 11 Mar 2014 07:38:00 AM JST
xtes
* Tue 11 Mar 2014 07:39:00 AM JST
_xcb_connection
* Tue 11 Mar 2014 07:39:30 AM JST
xtestExtension
* Tue 11 Mar 2014 07:40:48 AM JST
_xcb_connection
* Tue 11 Mar 2014 07:41:01 AM JST
xtestExtension
* Tue 11 Mar 2014 07:41:17 AM JST
xtest.xtestExtension()
* Tue 11 Mar 2014 07:42:20 AM JST
render
* Tue 11 Mar 2014 07:46:50 AM JST
xt=c._xcb_connection(xtest.key)
* Tue 11 Mar 2014 07:47:02 AM JST
xt.FakeInput(2, 10, 0, 482, 0, 0, 0)
* Tue 11 Mar 2014 07:47:07 AM JST
c.flush()
* Tue 11 Mar 2014 07:48:49 AM JST
KeyPress
* Tue 11 Mar 2014 05:41:19 PM JST
xtestExtension
* Tue 11 Mar 2014 05:41:25 PM JST
xtest
* Tue 11 Mar 2014 05:41:29 PM JST
xtestExtension
* Tue 11 Mar 2014 05:42:43 PM JST
2, 15, 0, 482, 0, 0, 0
* Tue 11 Mar 2014 06:30:56 PM JST
braceleft
* Tue 11 Mar 2014 09:53:23 PM JST
reply()
* Tue 11 Mar 2014 09:54:28 PM JST
setup.min_keycode
* Tue 11 Mar 2014 10:13:18 PM JST
get_keyboard_mapping
* Tue 11 Mar 2014 10:13:42 PM JST
info.min_keycode
* Tue 11 Mar 2014 10:14:25 PM JST
d.info.min_keycode
* Tue 11 Mar 2014 10:14:43 PM JST
d.info.min_keycode
* Tue 11 Mar 2014 10:17:17 PM JST
keymap
* Tue 11 Mar 2014 10:17:18 PM JST
update_keymap
* Tue 11 Mar 2014 10:23:50 PM JST
minkeycode
* Tue 11 Mar 2014 10:24:41 PM JST
setup = self.get_setup()
* Tue 11 Mar 2014 10:24:46 PM JST
min_keycode, max_keycode = setup.min_keycode, setup.max_keycode
* Tue 11 Mar 2014 10:24:49 PM JST
setup.min_keycode, setup.max_keycode
* Tue 11 Mar 2014 10:24:59 PM JST
max_key
* Tue 11 Mar 2014 10:25:12 PM JST
first
* Tue 11 Mar 2014 10:25:18 PM JST
count
* Tue 11 Mar 2014 10:26:00 PM JST
minkeycode
* Tue 11 Mar 2014 10:26:06 PM JST
maxkeycode
* Tue 11 Mar 2014 10:27:09 PM JST
sentinel
* Tue 11 Mar 2014 10:27:29 PM JST
coo=c.core.GetKeyboardMapping(setup.min_keycode, setup.max_keycode
* Tue 11 Mar 2014 10:27:29 PM JST
coo=c.core.GetKeyboardMapping(setup.min_keycode, setup.max_keycode
* Tue 11 Mar 2014 10:27:30 PM JST
coo=c.core.GetKeyboardMapping(setup.min_keycode, setup.max_keycode
* Tue 11 Mar 2014 10:27:30 PM JST
coo=c.core.GetKeyboardMapping(setup.min_keycode, setup.max_keycode
* Tue 11 Mar 2014 10:27:30 PM JST
coo=c.core.GetKeyboardMapping(setup.min_keycode, setup.max_keycode
* Tue 11 Mar 2014 10:27:30 PM JST
coo=c.core.GetKeyboardMapping(setup.min_keycode, setup.max_keycode
* Tue 11 Mar 2014 10:27:38 PM JST
keysyms_per_keycode
* Tue 11 Mar 2014 10:30:34 PM JST
x = iter([1,2,3,4,5,6,7,8,9])
* Tue 11 Mar 2014 10:30:42 PM JST
print zip(x, x, x)
* Tue 11 Mar 2014 10:37:35 PM JST
LIST2
* Tue 11 Mar 2014 10:38:15 PM JST
x = iter([1,2,3,4,5,6,7,8,9])
* Tue 11 Mar 2014 10:38:27 PM JST
ListUtil
* Tue 11 Mar 2014 11:01:20 PM JST
Cookie
* Tue 11 Mar 2014 11:01:20 PM JST
xcb.Cookie
* Tue 11 Mar 2014 11:01:36 PM JST

* Tue 11 Mar 2014 11:01:36 PM JST

* Tue 11 Mar 2014 11:01:36 PM JST
import xcb

* Tue 11 Mar 2014 11:03:36 PM JST
get_
* Tue 11 Mar 2014 11:03:46 PM JST
get
* Tue 11 Mar 2014 11:06:07 PM JST
key = xcb.ExtensionKey('XTEST')
* Tue 11 Mar 2014 11:06:22 PM JST
XTEST
* Tue 11 Mar 2014 11:08:47 PM JST
        buf.write(pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, False),
                                 xcb.VoidCookie())

* Tue 11 Mar 2014 11:09:14 PM JST
buf.write(pack('=xx2xBB', first_keycode, count))
* Tue 11 Mar 2014 11:10:10 PM JST
    
* Tue 11 Mar 2014 11:12:45 PM JST
_events = {
}

_errors = {
}

* Tue 11 Mar 2014 11:15:34 PM JST
xahkextension.XAHKExtension
* Tue 11 Mar 2014 11:15:44 PM JST
XAHKExtension
* Tue 11 Mar 2014 11:20:35 PM JST
bigreq.py
  -rw-r--r--   1 6.1K Mar 24  2012 composite.py
  -rw-r--r--   1 4.3K Mar 24  2012 damage.py
  -rw-r--r--   1 5.9K Mar 24  2012 dpms.py
  -rw-r--r--   1  95K Mar 24  2012 glx.py
  -rw-r--r--   1   63 Mar 24  2012 __init__.py
  -rw-r--r--   1  35K Mar 24  2012 randr.py
  -rw-r--r--   1 9.7K Mar 24  2012 record.py
  -rw-r--r--   1  34K Mar 24  2012 render.py
  -rw-r--r--   1 4.6K Mar 24  2012 res.py
  -rw-r--r--   1 5.3K Mar 24  2012 screensaver.py
  -rw-r--r--   1 8.7K Mar 24  2012 shape.py
  -rw-r--r--   1 5.6K Mar 24  2012 shm.py
  -rw-r--r--   1  18K Mar 24  2012 sync.py
  -rw-r--r--   1 3.1K Mar 24  2012 xc_misc.py
  -rw-r--r--   1 4.8K Mar 24  2012 xevie.py
  -rw-r--r--   1  12K Mar 24  2012 xf86dri.py
  -rw-r--r--   1  23K Mar 24  2012 xfixes.py
  -rw-r--r--   1 5.8K Mar 24  2012 xinerama.py
  -rw-r--r--   1  23K Mar 24  2012 xprint.py
  -rw-r--r--   1 123K Feb 18 21:59 xproto.py
  -rw-r--r--   1 3.4K Mar 24  2012 xtest.py
  -rw-r--r--   1 8.6K Mar 24  2012 xvmc.py
  -rw-r--r--   1  22K Mar 24  2012 xv.py

* Tue 11 Mar 2014 11:38:11 PM JST
self._keymap_codes = 
* Tue 11 Mar 2014 11:39:34 PM JST
        code = first_keycode
        for syms in keysyms:
            index = 0
            for sym in syms:
                if sym != X.NoSymbol:
                    if self._keymap_syms.has_key(sym):
                        symcodes = self._keymap_syms[sym]
                        symcodes.append((index, code))
                        symcodes.sort()
                    else:
                        self._keymap_syms[sym] = [(index, code)]

                index = index + 1
            code = code + 1

* Tue 11 Mar 2014 11:39:41 PM JST
NoSymbol
* Tue 11 Mar 2014 11:39:42 PM JST
X.NoSymbol
* Tue 11 Mar 2014 11:43:43 PM JST
{32: [(0, 65), (2, 65)],
 33: [(1, 10), (3, 10)],
 34: [(1, 11), (3, 11)],
 35: [(1, 12), (3, 12)],
 36: [(1, 13), (3, 13)],
 37: [(1, 14), (3, 14)],
 38: [(1, 15), (3, 15)],
 39: [(1, 16), (3, 16)],
 40: [(0, 187), (1, 17), (2, 187), (3, 17)],
 41: [(0, 188), (1, 18), (2, 188), (3, 18)],
 42: [(1, 48), (3, 48)],
 43: [(1, 20), (3, 20)],
 44: [(0, 59), (2, 59)],
 45: [(0, 47), (2, 47)],
 46: [(0, 60), (2, 60)],
 47: [(0, 61), (2, 61)],
 48: [(0, 19), (2, 19)],
 49: [(0, 10), (2, 10)],
 50: [(0, 11), (2, 11)],
 51: [(0, 12), (2, 12)],
 52: [(0, 13), (2, 13)],
 53: [(0, 14), (2, 14)],
 54: [(0, 15), (2, 15)],
 55: [(0, 16), (2, 16)],
 56: [(0, 17), (2, 17)],
 57: [(0, 18), (2, 18)],
 58: [(0, 48), (2, 48)],
 59: [(0, 20), (2, 20)],
 60: [(0, 94), (1, 59), (2, 94), (3, 59)],
 61: [(1, 47), (3, 47)],
 62: [(1, 60), (1, 94), (3, 60), (3, 94)],
 63: [(1, 61), (3, 61)],
 64: [(0, 34), (2, 34)],
 65: [(1, 38), (3, 38)],
 66: [(1, 56), (3, 56)],
 67: [(1, 54), (3, 54)],
 68: [(1, 40), (3, 40)],
 69: [(1, 26), (3, 26)],
 70: [(1, 41), (3, 41)],
 71: [(1, 42), (3, 42)],
 72: [(1, 43), (3, 43)],
 73: [(1, 31), (3, 31)],
 74: [(1, 44), (3, 44)],
 75: [(1, 45), (3, 45)],
 76: [(1, 46), (3, 46)],
 77: [(1, 58), (3, 58)],
 78: [(1, 57), (3, 57)],
 79: [(1, 32), (3, 32)],
 80: [(1, 33), (3, 33)],
 81: [(1, 24), (3, 24)],
 82: [(1, 27), (3, 27)],
 83: [(1, 39), (3, 39)],
 84: [(1, 28), (3, 28)],
 85: [(1, 30), (3, 30)],
 86: [(1, 55), (3, 55)],
 87: [(1, 25), (3, 25)],
 88: [(1, 53), (3, 53)],
 89: [(1, 29), (3, 29)],
 90: [(1, 52), (3, 52)],
 91: [(0, 35), (2, 35)],
 92: [(0, 97), (0, 132), (2, 97), (2, 132)],
 93: [(0, 51), (2, 51)],
 94: [(0, 21), (2, 21)],
 95: [(1, 19), (1, 97), (3, 19), (3, 97)],
 96: [(1, 34), (3, 34)],
 97: [(0, 38), (2, 38)],
 98: [(0, 56), (2, 56)],
 99: [(0, 54), (2, 54)],
 100: [(0, 40), (2, 40)],
 101: [(0, 26), (2, 26)],
 102: [(0, 41), (2, 41)],
 103: [(0, 42), (2, 42)],
 104: [(0, 43), (2, 43)],
 105: [(0, 31), (2, 31)],
 106: [(0, 44), (2, 44)],
 107: [(0, 45), (2, 45)],
 108: [(0, 46), (2, 46)],
 109: [(0, 58), (2, 58)],
 110: [(0, 57), (2, 57)],
 111: [(0, 32), (2, 32)],
 112: [(0, 33), (2, 33)],
 113: [(0, 24), (2, 24)],
 114: [(0, 27), (2, 27)],
 115: [(0, 39), (2, 39)],
 116: [(0, 28), (2, 28)],
 117: [(0, 30), (2, 30)],
 118: [(0, 55), (2, 55)],
 119: [(0, 25), (2, 25)],
 120: [(0, 53), (2, 53)],
 121: [(0, 29), (2, 29)],
 122: [(0, 52), (2, 52)],
 123: [(1, 35), (3, 35)],
 124: [(1, 132), (3, 132), (4, 94), (6, 94)],
 125: [(1, 51), (3, 51)],
 126: [(1, 21), (3, 21)],
 166: [(5, 94)],
 177: [(0, 126), (2, 126)],
 65027: [(0, 92), (2, 92)],
 65056: [(1, 23), (3, 23)],
 65288: [(0, 22), (0, 100), (1, 22), (2, 22), (2, 100), (3, 22)],
 65289: [(0, 23), (2, 23)],
 65290: [(0, 109), (2, 109)],
 65293: [(0, 36), (2, 36)],
 65299: [(0, 127), (2, 127)],
 65300: [(0, 78), (2, 78)],
 65307: [(0, 9), (2, 9)],
 65313: [(1, 49), (3, 49)],
 65316: [(1, 101), (3, 101)],
 65317: [(0, 99), (2, 99)],
 65318: [(0, 98), (2, 98)],
 65319: [(0, 101), (2, 101)],
 65322: [(0, 49), (0, 62), (2, 49), (2, 62)],
 65329: [(0, 130), (2, 130)],
 65332: [(0, 131), (2, 131)],
 65360: [(0, 110), (2, 110)],
 65361: [(0, 113), (2, 113)],
 65362: [(0, 111), (2, 111)],
 65363: [(0, 114), (2, 114)],
 65364: [(0, 116), (2, 116)],
 65365: [(0, 112), (2, 112)],
 65366: [(0, 117), (2, 117)],
 65367: [(0, 115), (2, 115)],
 65377: [(0, 107), (0, 218), (2, 107), (2, 218)],
 65378: [(1, 107), (3, 107)],
 65379: [(0, 118), (2, 118)],
 65381: [(0, 139), (2, 139)],
 65382: [(0, 137), (0, 190), (2, 137), (2, 190)],
 65383: [(0, 135), (2, 135)],
 65384: [(0, 144), (2, 144)],
 65385: [(0, 136), (0, 231), (2, 136), (2, 231)],
 65386: [(0, 146), (2, 146)],
 65387: [(1, 127), (3, 127)],
 65406: [(0, 203), (2, 203)],
 65407: [(0, 77), (2, 77)],
 65421: [(0, 104), (2, 104)],
 65429: [(0, 79), (2, 79)],
 65430: [(0, 83), (2, 83)],
 65431: [(0, 80), (2, 80)],
 65432: [(0, 85), (2, 85)],
 65433: [(0, 88), (2, 88)],
 65434: [(0, 81), (2, 81)],
 65435: [(0, 89), (2, 89)],
 65436: [(0, 87), (2, 87)],
 65437: [(0, 84), (2, 84)],
 65438: [(0, 90), (2, 90)],
 65439: [(0, 91), (2, 91)],
 65450: [(0, 63), (1, 63), (2, 63), (3, 63), (4, 63), (5, 63)],
 65451: [(0, 86), (1, 86), (2, 86), (3, 86), (4, 86), (5, 86)],
 65453: [(0, 82), (1, 82), (2, 82), (3, 82), (4, 82), (5, 82)],
 65454: [(0, 129), (1, 91), (1, 129), (2, 129), (3, 91), (3, 129)],
 65455: [(0, 106), (1, 106), (2, 106), (3, 106), (4, 106), (5, 106)],
 65456: [(1, 90), (3, 90)],
 65457: [(1, 87), (3, 87)],
 65458: [(1, 88), (3, 88)],
 65459: [(1, 89), (3, 89)],
 65460: [(1, 83), (3, 83)],
 65461: [(1, 84), (3, 84)],
 65462: [(1, 85), (3, 85)],
 65463: [(1, 79), (3, 79)],
 65464: [(1, 80), (3, 80)],
 65465: [(1, 81), (3, 81)],
 65469: [(0, 125), (2, 125)],
 65470: [(0, 67), (1, 67), (2, 67), (3, 67), (4, 67), (5, 67)],
 65471: [(0, 68), (1, 68), (2, 68), (3, 68), (4, 68), (5, 68)],
 65472: [(0, 69), (1, 69), (2, 69), (3, 69), (4, 69), (5, 69)],
 65473: [(0, 70), (1, 70), (2, 70), (3, 70), (4, 70), (5, 70)],
 65474: [(0, 71), (1, 71), (2, 71), (3, 71), (4, 71), (5, 71)],
 65475: [(0, 72), (1, 72), (2, 72), (3, 72), (4, 72), (5, 72)],
 65476: [(0, 73), (1, 73), (2, 73), (3, 73), (4, 73), (5, 73)],
 65477: [(0, 74), (1, 74), (2, 74), (3, 74), (4, 74), (5, 74)],
 65478: [(0, 75), (1, 75), (2, 75), (3, 75), (4, 75), (5, 75)],
 65479: [(0, 76), (1, 76), (2, 76), (3, 76), (4, 76), (5, 76)],
 65480: [(0, 95), (1, 95), (2, 95), (3, 95), (4, 95), (5, 95)],
 65481: [(0, 96), (1, 96), (2, 96), (3, 96), (4, 96), (5, 96)],
 65505: [(0, 50), (2, 50)],
 65507: [(0, 37), (0, 66), (2, 37), (2, 66)],
 65508: [(0, 105), (2, 105)],
 65511: [(1, 64), (1, 205), (3, 64), (3, 205)],
 65513: [(0, 64), (0, 102), (1, 204), (2, 64), (2, 102), (3, 204)],
 65515: [(0, 133), (1, 206), (2, 133), (3, 206)],
 65516: [(0, 134), (2, 134)],
 65517: [(1, 207), (3, 207)],
 65518: [(0, 108), (2, 108)],
 65535: [(0, 119), (2, 119)],
 268828528: [(0, 138), (2, 138)],
 268828529: [(0, 140), (2, 140)],
 268828531: [(0, 142), (2, 142)],
 269024769: [(6, 67)],
 269024770: [(6, 68)],
 269024771: [(6, 69)],
 269024772: [(6, 70)],
 269024773: [(6, 71)],
 269024774: [(6, 72)],
 269024775: [(6, 73)],
 269024776: [(6, 74)],
 269024777: [(6, 75)],
 269024778: [(6, 76)],
 269024779: [(6, 95)],
 269024780: [(6, 96)],
 269024800: [(6, 106)],
 269024801: [(6, 63)],
 269024802: [(6, 86)],
 269024803: [(6, 82)],
 269025026: [(0, 233), (2, 233)],
 269025027: [(0, 232), (2, 232)],
 269025028: [(0, 236), (2, 236)],
 269025029: [(0, 238), (2, 238)],
 269025030: [(0, 237), (2, 237)],
 269025041: [(0, 122), (2, 122)],
 269025042: [(0, 121), (2, 121)],
 269025043: [(0, 123), (2, 123)],
 269025044: [(0, 172), (0, 208), (0, 215), (2, 172), (2, 208), (2, 215)],
 269025045: [(0, 174), (2, 174)],
 269025046: [(0, 173), (2, 173)],
 269025047: [(0, 171), (2, 171)],
 269025048: [(0, 180), (2, 180)],
 269025049: [(0, 163), (0, 223), (2, 163), (2, 223)],
 269025051: [(0, 225), (2, 225)],
 269025052: [(0, 175), (2, 175)],
 269025053: [(0, 148), (2, 148)],
 269025062: [(0, 166), (2, 166)],
 269025063: [(0, 167), (2, 167)],
 269025066: [(0, 124), (2, 124)],
 269025067: [(0, 151), (2, 151)],
 269025068: [(0, 169),
  (0, 170),
  (1, 170),
  (1, 174),
  (2, 169),
  (2, 170),
  (3, 170),
  (3, 174)],
 269025069: [(0, 160), (2, 160)],
 269025070: [(0, 158), (2, 158)],
 269025071: [(0, 150), (2, 150)],
 269025072: [(0, 164), (2, 164)],
 269025073: [(0, 209), (1, 172), (2, 209), (3, 172)],
 269025074: [(0, 234), (2, 234)],
 269025075: [(0, 165), (2, 165)],
 269025078: [(0, 229), (2, 229)],
 269025084: [(0, 227), (2, 227)],
 269025086: [(0, 176), (2, 176)],
 269025089: [(0, 156), (2, 156)],
 269025090: [(0, 157), (2, 157)],
 269025091: [(0, 210), (2, 210)],
 269025092: [(0, 211), (2, 211)],
 269025093: [(0, 192), (2, 192)],
 269025094: [(0, 193), (2, 193)],
 269025095: [(0, 194), (2, 194)],
 269025096: [(0, 195), (2, 195)],
 269025097: [(0, 196), (2, 196)],
 269025098: [(0, 128), (2, 128)],
 269025099: [(0, 212), (2, 212)],
 269025110: [(0, 182), (0, 214), (2, 182), (2, 214)],
 269025111: [(0, 141), (2, 141)],
 269025112: [(0, 145), (2, 145)],
 269025113: [(0, 235), (2, 235)],
 269025114: [(0, 159), (2, 159)],
 269025115: [(0, 243), (2, 243)],
 269025117: [(0, 152), (2, 152)],
 269025118: [(0, 228), (2, 228)],
 269025119: [(0, 226), (2, 226)],
 269025125: [(0, 147), (2, 147)],
 269025128: [(0, 189), (2, 189)],
 269025133: [(0, 143), (2, 143)],
 269025134: [(0, 177), (2, 177)],
 269025138: [(0, 240), (2, 240)],
 269025139: [(0, 181), (2, 181)],
 269025140: [(0, 162), (2, 162)],
 269025143: [(0, 242), (2, 242)],
 269025144: [(0, 185), (2, 185)],
 269025145: [(0, 186), (2, 186)],
 269025147: [(0, 153), (0, 239), (2, 153), (2, 239)],
 269025153: [(0, 179), (0, 191), (2, 179), (2, 191)],
 269025162: [(0, 155), (2, 155)],
 269025166: [(0, 224), (2, 224)],
 269025167: [(0, 220), (2, 220)],
 269025168: [(0, 241), (2, 241)],
 269025171: [(0, 244), (2, 244)],
 269025172: [(0, 245), (2, 245)],
 269025173: [(0, 246), (2, 246)],
 269025175: [(0, 216), (2, 216)],
 269025191: [(0, 213), (2, 213)],
 269025193: [(0, 199), (2, 199)],
 269025200: [(0, 200), (2, 200)],
 269025201: [(0, 201), (2, 201)]}
* Tue 11 Mar 2014 11:55:48 PM JST
_keymap_codes
* Tue 11 Mar 2014 11:57:43 PM JST
self._keymap_syms[keysym][0][1]
* Tue 11 Mar 2014 11:58:31 PM JST
map(lambda x: (x[1], x[0]), self._keymap_syms[keysym])
* Wed 12 Mar 2014 12:02:26 AM JST
Convert a keycode to a keysym, looking in entry index.
        Normally index 0 is unshifted, 1 is shifted, 2 is alt grid, and 3
        is shift+alt grid. If that key entry is not bound, X.NoSymbol is
        returned.
* Wed 12 Mar 2014 12:09:29 AM JST
self._keymap_codes[keycode]
* Wed 12 Mar 2014 12:09:57 AM JST

* Wed 12 Mar 2014 12:09:57 AM JST

* Wed 12 Mar 2014 12:09:57 AM JST
            # index <= len(self._keymap_codes[keycode])):

* Wed 12 Mar 2014 12:09:59 AM JST
            # index <= len(self._keymap_codes[keycode])):

* Wed 12 Mar 2014 12:09:59 AM JST
            # index <= len(self._keymap_codes[keycode])):
            return self._keymap_codes[keycode][index]

* Wed 12 Mar 2014 12:10:55 AM JST
10 in 
* Wed 12 Mar 2014 12:18:59 AM JST
XK_exclam
* Wed 12 Mar 2014 12:48:24 AM JST
from xahk.display import DisplayName
* Wed 12 Mar 2014 12:48:32 AM JST
from xahk.xconnection.singleton import SingleConnection
* Wed 12 Mar 2014 12:50:31 AM JST
self._keymap_codes = [()] * 256
* Wed 12 Mar 2014 12:50:36 AM JST
self._keymap_syms = {}
* Wed 12 Mar 2014 12:52:42 AM JST
setup = self.get_setup()
* Wed 12 Mar 2014 12:52:44 AM JST
self
* Wed 12 Mar 2014 12:57:29 AM JST
conn = SingleConnection.get_instance(display=self.display)
* Wed 12 Mar 2014 12:58:01 AM JST
        setup = conn.get_setup()
        first_keycode, count = setup.min_keycode, setup.max_keycode

* Wed 12 Mar 2014 12:58:16 AM JST
first_keycode
* Wed 12 Mar 2014 12:58:21 AM JST
count
* Wed 12 Mar 2014 12:58:35 AM JST
_xcb_
* Wed 12 Mar 2014 12:58:35 AM JST
self._xcb_
* Wed 12 Mar 2014 12:59:31 AM JST
zip(*[iter(reply.keysyms)] * reply.keysyms_per_keycode)
* Wed 12 Mar 2014 12:59:50 AM JST
keysyms = self.get_keyboard_mapping()
* Wed 12 Mar 2014 01:00:53 AM JST

* Wed 12 Mar 2014 01:00:53 AM JST

* Wed 12 Mar 2014 01:00:53 AM JST
        for syms in keysyms:

* Wed 12 Mar 2014 01:01:00 AM JST
        for syms in keysyms:
            index = 0
            for sym in syms:
                if sym != 0:
                    if self._keymap_syms.has_key(sym):
                        symcodes = self._keymap_syms[sym]
                        symcodes.append((index, code))
                        symcodes.sort()
                    else:
                        self._keymap_syms[sym] = [(index, code)]
                index = index + 1
            code = code + 1

* Wed 12 Mar 2014 01:02:02 AM JST
keysym
* Wed 12 Mar 2014 01:02:22 AM JST
    def get_keyboard_mapping(self, ):
        r"""SUMMARY

        get_keyboard_mapping()

        @Return:
        """
        conn = SingleConnection.get_instance(display=self.display)
        setup = conn.get_setup()
        minkeycode, maxkeycode = setup.min_keycode, setup.max_keycode
        reply = conn.core.GetKeyboardMapping(
            minkeycode, maxkeycode - minkeycode + 1).reply()
        return zip(*[iter(reply.keysyms)] * reply.keysyms_per_keycode)


* Wed 12 Mar 2014 01:02:43 AM JST
    def keysym_to_keycode(self, keysym):
        r"""SUMMARY

        keysym_to_keycode(keysym)

        @Arguments:
        - `keysym`:

        @Return:
        """
        if keysym in self._keymap_syms:
            return self._keymap_syms[keysym][0][1]
        return 0

* Wed 12 Mar 2014 01:02:55 AM JST
    def keysym_to_keycodes(self, keysym):
        r"""SUMMARY

        keysym_to_keycodes(keysym)

        @Arguments:
        - `keysym`:

        @Return:
        """
        if keysym in self._keymap_syms:
            return map(lambda x: (x[1], x[0]), self._keymap_syms[keysym])
        return []

* Wed 12 Mar 2014 01:03:05 AM JST
    def keycode_to_keysym(self, keycode, index):
        r"""SUMMARY

        keycode_to_keysym(keycode, index)

        Convert a keycode to a keysym, looking in entry index.
        Normally index 0 is unshifted, 1 is shifted, 2 is alt grid, and 3
        is shift+alt grid. If that key entry is not bound, X.NoSymbol is
        returned.

        @Arguments:
        - `keycode`:
        - `index`:

        @Return:
        """
        if keycode <= len(self._keymap_codes):
            if index <= len(self._keymap_codes[keycode]):
                return self._keymap_codes[keycode][index]
        return 0


* Wed 12 Mar 2014 01:18:55 AM JST
self._display = display
* Wed 12 Mar 2014 01:20:11 AM JST
    def get_keyboard_mapping(self, ):
        r"""SUMMARY

        get_keyboard_mapping()

        @Return:
        """
        conn = SingleConnection.get_instance(display=self.display)
        setup = conn.get_setup()
        minkeycode, maxkeycode = setup.min_keycode, setup.max_keycode
        reply = conn.core.GetKeyboardMapping(
            minkeycode, maxkeycode - minkeycode + 1).reply()
        return zip(*[iter(reply.keysyms)] * reply.keysyms_per_keycode)

* Wed 12 Mar 2014 01:22:20 AM JST
return
* Wed 12 Mar 2014 01:22:44 AM JST
self._keymap_codes[first_keycode:lastcode] = keysyms
* Wed 12 Mar 2014 01:23:03 AM JST
keysyms
* Wed 12 Mar 2014 01:24:07 AM JST
first_keycode
* Wed 12 Mar 2014 01:29:26 AM JST
    def keycode_to_keysym(self, keycode, index):
        r"""SUMMARY

        keycode_to_keysym(keycode, index)

        Convert a keycode to a keysym, looking in entry index.
        Normally index 0 is unshifted, 1 is shifted, 2 is alt grid, and 3
        is shift+alt grid. If that key entry is not bound, X.NoSymbol is
        returned.

        @Arguments:
        - `keycode`:
        - `index`:

        @Return:
        """
        if keycode <= len(self._keymap_codes):
            if index <= len(self._keymap_codes[keycode]):
                return self._keymap_codes[keycode][index]
        return 0

* Wed 12 Mar 2014 01:31:24 AM JST
KeyBoardMapping()
* Wed 12 Mar 2014 01:39:26 AM JST
KeymapCodes
* Wed 12 Mar 2014 01:40:36 AM JST

* Wed 12 Mar 2014 01:40:37 AM JST

* Wed 12 Mar 2014 01:40:37 AM JST
        self._keymap_codes = [()] * 256

* Wed 12 Mar 2014 01:43:01 AM JST

* Wed 12 Mar 2014 01:43:01 AM JST

* Wed 12 Mar 2014 01:43:01 AM JST
        self._keymap_codes[first_keycode:lastcode] = keysyms

* Wed 12 Mar 2014 01:45:26 AM JST
KeyboardMapping
* Wed 12 Mar 2014 01:51:23 AM JST
_keymap_codes
* Wed 12 Mar 2014 01:51:24 AM JST
self._keymap_codes
* Wed 12 Mar 2014 01:55:04 AM JST
KeyboardMapping
* Wed 12 Mar 2014 01:55:41 AM JST

* Wed 12 Mar 2014 01:55:50 AM JST
ConnectionEXT
* Wed 12 Mar 2014 02:06:31 AM JST
exclam')
* Wed 12 Mar 2014 02:06:31 AM JST
get('exclam')
* Wed 12 Mar 2014 02:06:31 AM JST
keysyms.get('exclam')
* Wed 12 Mar 2014 02:18:40 AM JST
65507
* Wed 12 Mar 2014 02:20:13 AM JST
65507
* Wed 12 Mar 2014 02:22:06 AM JST
    # special keysyms
    if keysym in (0, 0x00ffffff):
        raise ConversionError("%d is a special keysym" % keysym)
    # latin-1 keysyms
    elif (0x0020 <= keysym <= 0x007e or 0x00a0 <= keysym <= 0x00ff):
        return unichr(keysym)
    # unicode keysyms
    elif (0x01000100 <= keysym <= 0x0110ffff):
        return unichr(keysym - 0x01000000)
    # legacy keysyms
    elif keysym in keysymdef.legacy_keysyms:
        return unichr(keysymdef.legacy_keysyms[keysym])
    # dunno!
    else:
        raise ConversionError("Unsupported keysym category or legacy keysym: %d" % keysym)

* Wed 12 Mar 2014 02:22:23 AM JST
class ConversionError(Exception):
    pass

* Wed 12 Mar 2014 02:22:35 AM JST
Exception
* Wed 12 Mar 2014 02:23:49 AM JST
def keysym_to_str(keysym):
    """
        convert a keysym to its equivalent character or
        key description and return it.
        Returns an empty for an unknown keysym.
        That's just a shortcut for :mod:`ooxcb.keysymdef`.
    """
    return keysymdef.names.get(keysym, '')

* Wed 12 Mar 2014 02:29:54 AM JST

* Wed 12 Mar 2014 02:29:54 AM JST

* Wed 12 Mar 2014 02:29:54 AM JST
        self._display = display

* Wed 12 Mar 2014 02:30:15 AM JST
    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self._data, other._data)
        return cmp(self._data, other)
        
    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._data == other._data
        return self._data == other

    def __ne__(self, other):
        return not (self == other)

    def __repr__(self, ):
        return '{0.__class__.__name__}({1})'.format(self, int(self))

* Wed 12 Mar 2014 02:30:49 AM JST
class KeyIntegerAbstract(KeyAbstract):
    r"""SUMMARY
    """
    
    def __ini__(self, ):
        return self._data

    def __repr__(self, ):
        return '{0.__class__.__name__}({1})'.format(self, self._data)


class KeyStringAbstract(KeyAbstract):
    r"""SUMMARY
    """
    
    def __str__(self, ):
        return self._data

    def __repr__(self, ):
        return "{0.__class__.__name__}('{1}')".format(self, self._data)

* Wed 12 Mar 2014 02:40:15 AM JST
KeyIntegerAbstract
* Wed 12 Mar 2014 02:42:55 AM JST
0
* Wed 12 Mar 2014 02:42:56 AM JST
index
* Wed 12 Mar 2014 02:51:11 AM JST
conn = Connection.get_instance(display=self.display)
* Wed 12 Mar 2014 02:52:15 AM JST
XK_exclam
* Wed 12 Mar 2014 02:54:08 AM JST
conn.keymap.keysym_to_keycodes(self._data)
* Wed 12 Mar 2014 03:08:59 AM JST
char_
* Wed 12 Mar 2014 03:10:26 AM JST
conn = Connection.get_instance(display=self.display)
* Wed 12 Mar 2014 03:16:48 AM JST

* Wed 12 Mar 2014 03:16:48 AM JST

* Wed 12 Mar 2014 03:16:48 AM JST
        conn = Connection.get_

* Wed 12 Mar 2014 03:16:51 AM JST
        conn = Connection.get_instance(display=self.display)
* Wed 12 Mar 2014 03:19:40 AM JST
conn = Connection.get_instance(display=self.display)
* Wed 12 Mar 2014 03:19:48 AM JST
char_ = conn.keymap.keysym_to_str(self._data)
* Wed 12 Mar 2014 03:20:02 AM JST
string
* Wed 12 Mar 2014 03:20:21 AM JST
display=self.display
* Wed 12 Mar 2014 03:22:13 AM JST
import
* Wed 12 Mar 2014 03:25:26 AM JST
to_keycode()
* Wed 12 Mar 2014 03:26:21 AM JST
    def __repr__(self, ):
        return '{0.__class__.__name__}({1})'.format(self, self._data)

* Wed 12 Mar 2014 03:27:16 AM JST
modstr
* Wed 12 Mar 2014 03:27:27 AM JST
Keycode.
* Wed 12 Mar 2014 03:28:28 AM JST
elfi 
* Wed 12 Mar 2014 03:42:22 AM JST
XK.string_to_keysym
* Wed 12 Mar 2014 03:42:59 AM JST
SPECIALKEY_NAME_MAP = {
    ' ' : "space",
    '\t' : "Tab",
    '\n' : "Return",  # for some reason this needs to be cr, not lf
    '\r' : "Return",
    '\e' : "Escape",
    '!' : "exclam",
    '#' : "numbersign",
    '%' : "percent",
    '$' : "dollar",
    '&' : "ampersand",
    '"' : "quotedbl",
    '\'' : "apostrophe",
    '(' : "parenleft",
    ')' : "parenright",
    '*' : "asterisk",
    '=' : "equal",
    '+' : "plus",
    ',' : "comma",
    '-' : "minus",
    '.' : "period",
    '/' : "slash",
    ':' : "colon",
    ';' : "semicolon",
    '<' : "less",
    '>' : "greater",
    '?' : "question",
    '@' : "at",
    '[' : "bracketleft",
    ']' : "bracketright",
    '\\' : "backslash",
    '^' : "asciicircum",
    '_' : "underscore",
    '`' : "grave",
    '{' : "braceleft",
    '|' : "bar",
    '}' : "braceright",
    '~' : "asciitilde"
    }

* Wed 12 Mar 2014 03:44:04 AM JST
SPECIALCHAR_TO_NAME
* Wed 12 Mar 2014 03:44:41 AM JST
SPECIALCHAR_TO_NAME
* Wed 12 Mar 2014 03:45:04 AM JST
SPECIALCHAR_TO_NAME
* Wed 12 Mar 2014 03:45:29 AM JST
specialchar_to_name
* Wed 12 Mar 2014 03:46:00 AM JST
KeyboardMapping
* Wed 12 Mar 2014 03:46:12 AM JST
specialchar_to_name
* Wed 12 Mar 2014 03:46:28 AM JST
sendkey.Keystring('exclam')
* Wed 12 Mar 2014 03:47:57 AM JST
to_keycode()
* Wed 12 Mar 2014 03:48:07 AM JST
exclam
* Wed 12 Mar 2014 03:56:08 AM JST
conn = Connection.get_instance(display=self.display)
* Wed 12 Mar 2014 03:59:15 AM JST
con.xtest.FakeInput(2, 15, 0, 482, 0, 0, 0)
* Wed 12 Mar 2014 03:59:24 AM JST
c.xtest.FakeInput(self, type, detail, time, root, rootX, rootY, deviceid)
* Wed 12 Mar 2014 03:59:41 AM JST
EventMask
* Wed 12 Mar 2014 04:01:18 AM JST
KeyPress
* Wed 12 Mar 2014 04:05:17 AM JST
time=0, root=None, rootx=0, rooty=0, deviceid=0
* Wed 12 Mar 2014 04:05:25 AM JST
        conn = Connection.get_instance(display=self.display)
        root = root or conn.ext.get_root()
        # TODO: (Atami) [2014/03/12]
        # get KeyPress from xcb
        conn.xtest.FakeInput(2, self._data, time, root, rootx, rooty, deviceid)

* Wed 12 Mar 2014 04:46:16 AM JST
symsde
* Wed 12 Mar 2014 04:46:50 AM JST
keysyms
* Wed 12 Mar 2014 04:46:57 AM JST
keysyms
* Wed 12 Mar 2014 04:49:29 AM JST
keysyms.get('')
* Wed 12 Mar 2014 04:49:51 AM JST
'Control_L'
* Wed 12 Mar 2014 04:50:08 AM JST
display=
* Wed 12 Mar 2014 04:50:11 AM JST
            
* Wed 12 Mar 2014 04:51:29 AM JST

* Wed 12 Mar 2014 04:51:29 AM JST

* Wed 12 Mar 2014 04:51:30 AM JST
    # 

* Wed 12 Mar 2014 04:51:47 AM JST
Control
* Wed 12 Mar 2014 04:52:25 AM JST
                                  
* Wed 12 Mar 2014 04:52:56 AM JST
_load_modifiers
* Wed 12 Mar 2014 04:57:06 AM JST

* Wed 12 Mar 2014 04:57:06 AM JST

* Wed 12 Mar 2014 04:57:06 AM JST
        if not (Keycode.shift_code or Keycode.alt_code):

* Wed 12 Mar 2014 04:57:22 AM JST
self.
* Wed 12 Mar 2014 05:04:16 AM JST
conn.xtest.FakeInput(2, self._data, time, root, rootx, rooty, deviceid)
* Wed 12 Mar 2014 05:06:05 AM JST
        if self.modifier:
            if self.modifier in (1, 3):
                self.shift_code.press_key(time, root, rootx, rooty, deviceid)
            if self.modifier in (2, 3):
                self.alt_code.press_key(time, root, rootx, rooty, deviceid)

* Wed 12 Mar 2014 05:06:13 AM JST
press
* Wed 12 Mar 2014 05:06:17 AM JST
press
* Wed 12 Mar 2014 05:07:24 AM JST
xconnection.
* Wed 12 Mar 2014 05:10:56 AM JST
time=0, root=None, rootx=0, rooty=0, deviceid=0
* Wed 12 Mar 2014 05:11:39 AM JST
None
* Wed 12 Mar 2014 05:11:53 AM JST
    def press_key(self, time=0, root=None, rootx=0, rooty=0, deviceid=0):
        r"""SUMMARY
        
        press_key()
        
        @Return:
        """
        self.to_keycode().press_key(time, root, rootx, rooty, deviceid)

* Wed 12 Mar 2014 05:11:57 AM JST
press
* Wed 12 Mar 2014 05:12:02 AM JST
press
* Wed 12 Mar 2014 05:12:18 AM JST
    def press_key(self, time=0, root=None, rootx=0, rooty=0, deviceid=0):
        r"""SUMMARY

        press_key()

        @Return:
        """
        self.to_keycode().press_key(time, root, rootx, rooty, deviceid)

    def release_key(self, time=0, root=None, rootx=0, rooty=0, deviceid=0):
        r"""SUMMARY

        press_key()

        @Return:
        """
        self.to_keycode().release_key(time, root, rootx, rooty, deviceid)

* Wed 12 Mar 2014 05:13:05 AM JST
press
* Wed 12 Mar 2014 05:28:20 AM JST
Control
* Wed 12 Mar 2014 05:29:50 AM JST
xconnection
* Wed 12 Mar 2014 05:29:54 AM JST
xconnection
* Wed 12 Mar 2014 05:30:36 AM JST
press
* Wed 12 Mar 2014 06:01:23 AM JST
time=0, root=None, rootx=0, rooty=0, deviceid=0
* Wed 12 Mar 2014 07:19:03 AM JST
REPLACE_MAP = OrderedDict([('{+'  , '{plus'          ),
                           ('\\+' , '{plus}'         ),
                           ('{!'  , '{exclam'        ),
                           ('\\!' , '{exclam}'       ),
                           ('{#'  , '{numbersign'    ),
                           ('\\#' , '{numbersign}'   ),
                           ('{^'  , '{asciicircum'   ),
                           ('\\^' , '{asciicircum}'  ),
                           ('{}}' , '{bracketright}' ),
                           ('{{}' , '{bracketleft}'  ),
                           # ('{{'  , '{bracketleft}'  ),
                           ('\\{' , '{bracketleft}'  ),
                           ('\\}' , '{bracketright}' ),
                           ('\"'  , '{quotedbl}'     ),
                           ('$'   , '{dollar}'       ),
                           ('%'   , '{percent}'      ),
                           ('&'   , '{ampersand}'    ),
                           ("'"   , '{apostrophe}'   ),
                           ('`'   , '{quoteleft}'    ),
                           ('('   , '{parenleft}'    ),
                           (')'   , '{parenright}'   ),
                           ('_'   , '{underscore}'   ),
                           ('~'   , '{asciitilde}'   ),
                           ('|'   , '{bar}'          ),
                           ('='   , '{equal}'        ),
                           ('*'   , '{asterisk}'     ),
                           ('>'   , '{less}'         ),
                           ('<'   , '{greater}'      ),
                           ('?'   , '{question}'     ),
                           ('-'   , '{minus}'        ),
                           (','   , '{comma}'        ),
                           ('.'   , '{period}'       ),
                           ('/'   , '{slash}'        ),
                           ('@'   , '{at}'           ),
                           (':'   , '{colon}'        ),
                           (';'   , '{semicolon}'    ),
                           ('['   , '{braceleft}'    ),
                           (']'   , '{braceright}'   ),
                           ('\\'  , '{backslash}'    ),
                           ])

* Wed 12 Mar 2014 07:19:29 AM JST
class SendKeyInfo(object):
    r"""SUMMARY
    """
    
    def __init__(self, modifiers='', keys=None):
        r"""
        
        @Arguments:
        - `modifiers`:
        - `key`:
        """
        self.modifiers = set(modifiers)
        self.keys = keys or []

    def __repr__(self, ):
        fmt = ('{0.__class__.__name__}'
               '(modifiers={1}, keys={0.keys})').format
        return fmt(self, repr(self.modifiers).replace('set', '', 1))

* Wed 12 Mar 2014 07:21:33 AM JST
SendKeyInfo
* Wed 12 Mar 2014 07:21:43 AM JST
Key
* Wed 12 Mar 2014 07:25:03 AM JST
object
* Wed 12 Mar 2014 07:26:44 AM JST
self.
* Wed 12 Mar 2014 07:28:51 AM JST
keysyms.get('Shift_L'), self.display).to_keycode()
* Wed 12 Mar 2014 07:30:16 AM JST
            
* Wed 12 Mar 2014 07:30:39 AM JST
Keysym(keysyms.get('Shift_L'), self.display).to_keycode()
* Wed 12 Mar 2014 07:30:47 AM JST
Shift
* Wed 12 Mar 2014 07:32:14 AM JST
Keysym(keysyms.get('Shift_L'), self.display).to_keycode()
* Wed 12 Mar 2014 07:32:20 AM JST
Shift
* Wed 12 Mar 2014 07:32:27 AM JST
        Analyzer._alt = (
            Keysym(keysyms.get('Alt_L'), self.display).to_keycode())

* Wed 12 Mar 2014 07:32:32 AM JST
Alt
* Wed 12 Mar 2014 07:37:44 AM JST
isinstance
* Wed 12 Mar 2014 07:38:14 AM JST
        if '^' == token:
            return self._ctrl
        elif '+' == token:
            return self._shift
        elif '!' == token:
            return self._alt
        elif '#' == token:
            return self._win
        else:
            return Keystring(self._display, token)

* Wed 12 Mar 2014 07:38:24 AM JST

* Wed 12 Mar 2014 07:38:24 AM JST

* Wed 12 Mar 2014 07:38:24 AM JST
        return

* Wed 12 Mar 2014 07:38:27 AM JST
_display, 
* Wed 12 Mar 2014 07:38:27 AM JST
self._display, 
* Wed 12 Mar 2014 07:42:04 AM JST
KeyCombinations()
* Wed 12 Mar 2014 07:43:03 AM JST
    def __call__(self, token):
        return self.analyze(token)

* Wed 12 Mar 2014 07:46:30 AM JST

* Wed 12 Mar 2014 07:46:30 AM JST

* Wed 12 Mar 2014 07:46:30 AM JST
        self._display = display

* Wed 12 Mar 2014 07:48:23 AM JST
def replacer(line):
    r"""SUMMARY
    
    replacer(line)
    
    @Arguments:
    - `line`:
    
    @Return:
    """
    for key in REPLACE_MAP.keys():
        if key in line:
            line = line.replace(key, REPLACE_MAP[key])
    return line

* Wed 12 Mar 2014 07:48:30 AM JST
def tokenize(line):
    r"""SUMMARY
    
    tokenize(line)
    
    @Arguments:
    - `line`:
    
    @Return:
    """    
    replaced = replacer(line)

    result_list, append = listutil.make_list_append()
    lineiter = iter(replaced)
    while 1:
        try:
            char = lineiter.next()
            if '{' == char:
                string = ''
                while 1:
                    key = lineiter.next()
                    if '}' == key:
                        break
                    else:
                        string += key
                append(string)
            else:
                append(char)
        except StopIteration:
            break
    return result_list

* Wed 12 Mar 2014 07:49:41 AM JST
line
* Wed 12 Mar 2014 07:50:29 AM JST
REPLACE_MAP
* Wed 12 Mar 2014 07:50:42 AM JST
REPLACE_MAP
* Wed 12 Mar 2014 07:51:44 AM JST
_
* Wed 12 Mar 2014 07:51:45 AM JST
self._
* Wed 12 Mar 2014 07:51:47 AM JST
_
* Wed 12 Mar 2014 07:51:47 AM JST
self._
* Wed 12 Mar 2014 07:52:16 AM JST
line
* Wed 12 Mar 2014 07:52:29 AM JST
line
* Wed 12 Mar 2014 07:52:37 AM JST
listutil.
* Wed 12 Mar 2014 07:58:57 AM JST
parse_line
* Wed 12 Mar 2014 08:08:03 AM JST
            for mod in key.modifiers:
                mod.press_key()
            for ky in key.keys:
                ky.press_key()
                ky.release_key()
            for mod in key.modifiers:
                mod.release_key()

* Wed 12 Mar 2014 08:08:47 AM JST
self.
* Wed 12 Mar 2014 08:09:03 AM JST
conn = Connection.get_instance(display=self.display)
* Wed 12 Mar 2014 08:21:56 AM JST

* Wed 12 Mar 2014 08:21:56 AM JST

* Wed 12 Mar 2014 08:21:56 AM JST
                print('DEBUG-1-sendkey.py')

* Wed 12 Mar 2014 08:22:01 AM JST
se=sendkey.KeyLineParser('HelloWorld+yahoo')
* Wed 12 Mar 2014 08:22:32 AM JST
se=sendkey.KeyLineParser('HelloWorld+yahoo')
* Wed 12 Mar 2014 08:24:11 AM JST
Analyzer
* Wed 12 Mar 2014 08:24:15 AM JST
Analyze
* Wed 12 Mar 2014 08:24:21 AM JST
Analyzer
* Wed 12 Mar 2014 08:24:26 AM JST
Analyzer
* Wed 12 Mar 2014 08:24:29 AM JST
Analyzer
* Wed 12 Mar 2014 08:24:32 AM JST
            
* Wed 12 Mar 2014 08:24:34 AM JST
            
* Wed 12 Mar 2014 08:24:35 AM JST
            
* Wed 12 Mar 2014 08:24:37 AM JST
            
* Wed 12 Mar 2014 08:24:45 AM JST

* Wed 12 Mar 2014 08:24:45 AM JST

* Wed 12 Mar 2014 08:24:45 AM JST
        self._loaded = True

* Wed 12 Mar 2014 08:27:57 AM JST
se=sendkey.KeyLineParser('HelloWorld+yahoo')
* Wed 12 Mar 2014 08:28:14 AM JST

* Wed 12 Mar 2014 08:28:14 AM JST

* Wed 12 Mar 2014 08:28:14 AM JST
        print(tokens)

* Wed 12 Mar 2014 08:33:11 AM JST
KeyLineParser
* Wed 12 Mar 2014 08:36:52 AM JST
KeyLineParser
* Wed 12 Mar 2014 08:40:21 AM JST
yahoo
* Wed 12 Mar 2014 08:40:21 AM JST
elloWORLD+!yahoo
* Wed 12 Mar 2014 10:02:20 AM JST
KeyPressEvent
* Wed 12 Mar 2014 10:07:09 AM JST
CON.flush()
* Wed 12 Mar 2014 10:07:36 AM JST
sendkey.Keycode(event.detail).press_key()
* Wed 12 Mar 2014 10:07:42 AM JST
press
* Wed 12 Mar 2014 10:08:33 AM JST

* Wed 12 Mar 2014 10:08:33 AM JST

* Wed 12 Mar 2014 10:08:33 AM JST
        print('DEBUG-1-grab.py')

* Wed 12 Mar 2014 10:08:41 AM JST

* Wed 12 Mar 2014 10:08:41 AM JST

* Wed 12 Mar 2014 10:08:42 AM JST
        print('DEBUG-3-grab.py')

* Wed 12 Mar 2014 10:08:43 AM JST

* Wed 12 Mar 2014 10:08:43 AM JST

* Wed 12 Mar 2014 10:08:43 AM JST
        print('DEBUG-2-grab.py')

* Wed 12 Mar 2014 10:08:48 AM JST
CON.flush()
* Wed 12 Mar 2014 10:12:34 AM JST

* Wed 12 Mar 2014 10:12:34 AM JST

* Wed 12 Mar 2014 10:12:34 AM JST
        print('DEBUG-2-grab.py')

* Wed 12 Mar 2014 10:12:36 AM JST

* Wed 12 Mar 2014 10:12:36 AM JST

* Wed 12 Mar 2014 10:12:36 AM JST
        print('DEBUG-1-grab.py')

* Wed 12 Mar 2014 10:12:48 AM JST

* Wed 12 Mar 2014 10:12:48 AM JST

* Wed 12 Mar 2014 10:12:48 AM JST
        CON.flush()

* Wed 12 Mar 2014 10:12:56 AM JST

* Wed 12 Mar 2014 10:12:56 AM JST

* Wed 12 Mar 2014 10:12:56 AM JST
        CON.flush()

* Wed 12 Mar 2014 10:14:58 AM JST
Keycode(11).press_key()
* Wed 12 Mar 2014 05:38:13 PM JST
from Xlib.display import Display
import Xlib
from Xlib import X
import Xlib.XK
import sys
import signal 
import time
display = None
root = None

def handle_event(event):
    print "handle!"
    if (event.type == X.KeyRelease):
        send_key("x")

# from http://shallowsky.com/software/crikey/pykey-0.1 
def send_key(emulated_key):
    shift_mask = 0 # or Xlib.X.ShiftMask
    window = display.get_input_focus()._data["focus"]
    keysym = Xlib.XK.string_to_keysym(emulated_key)
    keycode = display.keysym_to_keycode(keysym)
    event = Xlib.protocol.event.KeyPress(
        time = int(time.time()),
        root = root,
        window = window,
        same_screen = 0, child = Xlib.X.NONE,
        root_x = 0, root_y = 0, event_x = 0, event_y = 0,
        state = shift_mask,
        detail = keycode
        )
    window.send_event(event, propagate = True)
    event = Xlib.protocol.event.KeyRelease(
        time = int(time.time()),
        root = display.screen().root,
        window = window,
        same_screen = 0, child = Xlib.X.NONE,
        root_x = 0, root_y = 0, event_x = 0, event_y = 0,
        state = shift_mask,
        detail = keycode
        )
    window.send_event(event, propagate = True)

def main():
    # current display
    global display,root
    display = Display()
    root = display.screen().root

    # we tell the X server we want to catch keyPress event
    root.change_attributes(event_mask = X.KeyPressMask|X.KeyReleaseMask)
    # just grab the "1"-key for now
    root.grab_key(10, 0, True,X.GrabModeSync, X.GrabModeSync)

    signal.signal(signal.SIGALRM, lambda a,b:sys.exit(1))
    signal.alarm(10)
    while 1:
        event = display.next_event()
        print "event"
        handle_event(event)
        display.allow_events(X.AsyncKeyboard, X.CurrentTime)            

if __name__ == '__main__':
    main()
* Wed 12 Mar 2014 05:42:12 PM JST
54525974
* Wed 12 Mar 2014 05:47:13 PM JST
54525974
* Wed 12 Mar 2014 05:50:10 PM JST
pack('=xB2xII', propagate, destination, event_mask)
* Wed 12 Mar 2014 05:50:34 PM JST
'\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Wed 12 Mar 2014 05:50:43 PM JST
Xlib.protocol.event.KeyPress(root_x = 0, type = 2, time = 0, window = 54525974, detail = 10, state = 0, sequence_number = 0, child = 0, event_x = 0, event_y = 0, root = 482, root_y = 0, same_screen = 0)
* Wed 12 Mar 2014 06:15:15 PM JST
sendkey.SendKeys('k').sendkeys()
* Wed 12 Mar 2014 06:15:23 PM JST
CON.flush()
* Wed 12 Mar 2014 06:18:00 PM JST
core.GrabKey
* Wed 12 Mar 2014 06:19:31 PM JST
AllowEvents
* Wed 12 Mar 2014 06:20:10 PM JST
AllowEvents(self, mode, time)
* Wed 12 Mar 2014 06:20:30 PM JST
self, 
* Wed 12 Mar 2014 06:20:32 PM JST
mode
* Wed 12 Mar 2014 06:20:34 PM JST
time
* Wed 12 Mar 2014 06:32:44 PM JST
KeyPress(time=0, root=482, window=54525974, same_screen=0, child=0, root_x=0, root_y=0, event_x=0, event_y=0, state=0, detail=11)._bina
* Wed 12 Mar 2014 06:33:05 PM JST
_fields
* Wed 12 Mar 2014 06:35:22 PM JST
import
* Wed 12 Mar 2014 06:38:28 PM JST
req=request.SendEvent(display=d.display, onerror=None, propagate=True, destination=window, event_mask=0, event=kp)
* Wed 12 Mar 2014 06:38:36 PM JST
'\x19\x01\x0b\x00\x16\x00@\x03\x00\x00\x00\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Wed 12 Mar 2014 06:39:42 PM JST
\x19
* Wed 12 Mar 2014 06:39:59 PM JST
struct.unpack('i', '\x19')
* Wed 12 Mar 2014 06:45:27 PM JST
'\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Wed 12 Mar 2014 10:36:18 PM JST
c.core.SendEvent(True, window, 2, '\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
* Wed 12 Mar 2014 10:36:42 PM JST
c.core.SendEvent(True, window, 2, '\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
* Wed 12 Mar 2014 10:38:20 PM JST
struct.pack('B', type_, )
* Wed 12 Mar 2014 10:40:33 PM JST
'\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Wed 12 Mar 2014 10:40:40 PM JST
'\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00'
* Wed 12 Mar 2014 10:45:23 PM JST
'\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Wed 12 Mar 2014 10:49:14 PM JST
'\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Wed 12 Mar 2014 10:58:15 PM JST
struct.
* Thu 13 Mar 2014 04:06:41 AM JST
net_active_window
* Thu 13 Mar 2014 04:11:43 AM JST
sen=sendkey.Sendkey(type_, detail, time_, root, window, child, state)
* Thu 13 Mar 2014 04:12:41 AM JST
        window = CON.ext.properties.net_active_window(482)[0]
        sendkey.Sendkey(2, 10, 0, 482, window, 0, 0).sendkey()

* Thu 13 Mar 2014 04:14:26 AM JST

* Thu 13 Mar 2014 04:14:26 AM JST

* Thu 13 Mar 2014 04:14:26 AM JST
        print('DEBUG-2-grab.py')

* Thu 13 Mar 2014 04:30:32 AM JST
Control
* Thu 13 Mar 2014 04:31:57 AM JST

* Thu 13 Mar 2014 04:31:57 AM JST

* Thu 13 Mar 2014 04:31:57 AM JST
# sendkey.SendKeys('k').sendkeys()

* Thu 13 Mar 2014 04:33:16 AM JST

* Thu 13 Mar 2014 04:33:16 AM JST

* Thu 13 Mar 2014 04:33:16 AM JST
        # print('DEBUG-1-grab.py')

* Thu 13 Mar 2014 04:33:19 AM JST

* Thu 13 Mar 2014 04:33:19 AM JST

* Thu 13 Mar 2014 04:33:19 AM JST
        # sendkey.SendKeys('k').sendkeys()

* Thu 13 Mar 2014 04:33:21 AM JST

* Thu 13 Mar 2014 04:33:21 AM JST

* Thu 13 Mar 2014 04:33:21 AM JST
        # sendkey.Keycode(11).release_key()

* Thu 13 Mar 2014 04:55:02 AM JST
GrabKey
* Thu 13 Mar 2014 06:11:11 AM JST
_press_
* Thu 13 Mar 2014 06:11:40 AM JST
    
* Thu 13 Mar 2014 06:12:49 AM JST
window
* Thu 13 Mar 2014 06:12:49 AM JST
detail, window
* Thu 13 Mar 2014 06:12:53 AM JST
window, 
* Thu 13 Mar 2014 06:13:57 AM JST
state=0
* Thu 13 Mar 2014 06:14:59 AM JST
con = Connection.get_instance()
* Thu 13 Mar 2014 06:15:27 AM JST
net_active_window
* Thu 13 Mar 2014 06:16:30 AM JST
self.struct_code
* Thu 13 Mar 2014 06:17:05 AM JST
self.
* Thu 13 Mar 2014 06:19:01 AM JST
type_, 
* Thu 13 Mar 2014 06:19:04 AM JST
time, 
* Thu 13 Mar 2014 06:19:54 AM JST
root, 
* Thu 13 Mar 2014 06:19:57 AM JST
state
* Thu 13 Mar 2014 06:19:58 AM JST
child, state
* Thu 13 Mar 2014 06:19:58 AM JST
window, child, state
* Thu 13 Mar 2014 06:19:59 AM JST
detail, window, child, state
* Thu 13 Mar 2014 06:20:12 AM JST
object
* Thu 13 Mar 2014 06:20:55 AM JST
con = Connection.get_instance(display=self.display)
* Thu 13 Mar 2014 06:21:19 AM JST
    def press_key(self, detail, state=0, window=None, time=0):
        r"""SUMMARY

        press_key(detail, state=0, window=None, time=0)

        @Arguments:
        - `detail`:
        - `state`:
        - `window`:
        - `time`:

        @Return:
        """
        con = Connection.get_instance(display=self.display)
        window = window or con.ext.properties.net_active_window(self.root)[0]
        event = pack(self.struct_code,
                     self.press_key,
                     detail,
                     self.sequence_number,
                     time,
                     self.root,
                     window,
                     0, # child
                     0, 0, 0, 0, # rootx, rooty, eventx, eventy
                     state,
                     0 # same screen
        )
        con.core.SendEvent(True, window, 0, event)

* Thu 13 Mar 2014 06:21:36 AM JST
press_
* Thu 13 Mar 2014 06:23:21 AM JST
press_key
* Thu 13 Mar 2014 06:23:34 AM JST
    def press_key(self, detail, state=0, window=None, time=0):
        r"""SUMMARY

        press_key(detail, state=0, window=None, time=0)

        @Arguments:
        - `detail`:
        - `state`:
        - `window`:
        - `time`:

        @Return:
        """
        self._sendkey(self.PressKey, detail, state, window, time)


* Thu 13 Mar 2014 06:23:39 AM JST
press
* Thu 13 Mar 2014 06:23:45 AM JST
Press
* Thu 13 Mar 2014 06:24:06 AM JST
    def _sendkey(self, type_, detail, state=0, window=None, time=0):
        r"""SUMMARY

        press_key(detail, state=0, window=None, time=0)

        @Arguments:
        - `detail`:
        - `state`:
        - `window`:
        - `time`:

        @Return:
        """
        con = Connection.get_instance(display=self.display)
        window = window or con.ext.properties.net_active_window(self.root)[0]
        event = pack(self.struct_code,
                     type_,
                     detail,
                     self.sequence_number,
                     time,
                     self.root,
                     window,
                     0, # child
                     0, 0, 0, 0, # rootx, rooty, eventx, eventy
                     state,
                     0 # same screen
        )
        con.core.SendEvent(True, window, 0, event)


* Thu 13 Mar 2014 06:27:39 AM JST

* Thu 13 Mar 2014 06:27:39 AM JST

* Thu 13 Mar 2014 06:27:39 AM JST
from xahk.sendkey import Sendkey

* Thu 13 Mar 2014 06:28:00 AM JST
class Sendkey(DisplayName):
    r"""SUMMARY
    """
    struct_code = '2BH4I5HBx'

    PressKey = 2
    ReleaseKey = 3
    Button1 = 4
    Button2 = 5
    Button3 = 6

    sequence_number = 0

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `type_`:
        - `detail`:
        - `time`:
        - `root`:
        - `window`:
        - `child`:
        - `state`:
        """
        DisplayName.__init__(self, display=display)
        con = Connection.get_instance(display=self.display)
        self.root = con.ext.get_root()

    def _sendkey(self, type_, detail, state=0, window=None, time=0):
        r"""SUMMARY

        press_key(detail, state=0, window=None, time=0)

        @Arguments:
        - `detail`:
        - `state`:
        - `window`:
        - `time`:

        @Return:
        """
        con = Connection.get_instance(display=self.display)
        window = window or con.ext.properties.net_active_window(self.root)[0]
        event = pack(self.struct_code,
                     type_,
                     detail,
                     self.sequence_number,
                     time,
                     self.root,
                     window,
                     0, # child
                     0, 0, 0, 0, # rootx, rooty, eventx, eventy
                     state,
                     0 # same screen
        )
        con.core.SendEvent(True, window, 0, event)

    def press_key(self, detail, state=0, window=None, time=0):
        r"""SUMMARY

        press_key(detail, state=0, window=None, time=0)

        @Arguments:
        - `detail`:
        - `state`:
        - `window`:
        - `time`:

        @Return:
        """
        self._sendkey(self.PressKey, detail, state, window, time)

    def release_key(self, detail, state=0, window=None, time=0):
        r"""SUMMARY

        press_key(detail, state=0, window=None, time=0)

        @Arguments:
        - `detail`:
        - `state`:
        - `window`:
        - `time`:

        @Return:
        """
        self._sendkey(self.ReleaseKey, detail, state, window, time)


* Thu 13 Mar 2014 06:29:59 AM JST
Sendkey
* Thu 13 Mar 2014 06:31:26 AM JST
from xahk.xconnection import Connection
* Thu 13 Mar 2014 06:31:45 AM JST

* Thu 13 Mar 2014 06:31:45 AM JST

* Thu 13 Mar 2014 06:31:45 AM JST
        from xahk.xconnection import Connection

* Thu 13 Mar 2014 06:31:49 AM JST

* Thu 13 Mar 2014 06:31:49 AM JST

* Thu 13 Mar 2014 06:31:49 AM JST
from xahk.xconnection import Connection

* Thu 13 Mar 2014 06:32:47 AM JST
from xahk.xconnection.singleton import SingleConnection
* Thu 13 Mar 2014 06:32:55 AM JST
SingleConnection
* Thu 13 Mar 2014 06:33:20 AM JST

* Thu 13 Mar 2014 06:33:20 AM JST

* Thu 13 Mar 2014 06:33:20 AM JST
        con = Connection.get_instance(display=self.display)

* Thu 13 Mar 2014 06:34:03 AM JST
c.get_setup().roots[0].root
* Thu 13 Mar 2014 06:34:09 AM JST
con.get_setup().roots[0].root
* Thu 13 Mar 2014 06:34:12 AM JST

* Thu 13 Mar 2014 06:34:12 AM JST

* Thu 13 Mar 2014 06:34:12 AM JST
        con.get_setup().roots[0].root

* Thu 13 Mar 2014 06:34:14 AM JST

* Thu 13 Mar 2014 06:34:14 AM JST

* Thu 13 Mar 2014 06:34:14 AM JST
        from xahk.xconnection import Connection

* Thu 13 Mar 2014 06:35:37 AM JST
press
* Thu 13 Mar 2014 06:43:13 AM JST
conn.ext.sendkey.press_key(self._data, self.state, window, time)
* Thu 13 Mar 2014 06:43:20 AM JST
press
* Thu 13 Mar 2014 06:44:27 AM JST
root
* Thu 13 Mar 2014 06:44:48 AM JST
root
* Thu 13 Mar 2014 06:47:06 AM JST
press
* Thu 13 Mar 2014 06:47:26 AM JST
SendKeys
* Thu 13 Mar 2014 06:47:52 AM JST
'HelloWorld+yahoo'
* Thu 13 Mar 2014 06:49:49 AM JST
Keysym(keysyms.get('Shift_L'), self.display).to_keycode()
* Thu 13 Mar 2014 06:50:40 AM JST
from xahk.keysymdef import keysyms
* Thu 13 Mar 2014 06:51:25 AM JST
modifier
* Thu 13 Mar 2014 06:52:13 AM JST
press
* Thu 13 Mar 2014 06:53:55 AM JST
conn.xtest.FakeInput(2, self._data, time, root, rootx, rooty, deviceid)
* Thu 13 Mar 2014 06:55:24 AM JST
rooty
* Thu 13 Mar 2014 06:55:25 AM JST
rootx
* Thu 13 Mar 2014 06:55:26 AM JST
root
* Thu 13 Mar 2014 06:55:31 AM JST
time
* Thu 13 Mar 2014 06:55:32 AM JST
_data
* Thu 13 Mar 2014 06:55:33 AM JST
self._data
* Thu 13 Mar 2014 06:55:36 AM JST
conn.xtest.FakeInput(2, , 0, 482, 0, 0,0)
* Thu 13 Mar 2014 06:56:29 AM JST
conn.xtest.FakeInput(2, , 0, 482, 0, 0,0)
* Thu 13 Mar 2014 06:56:45 AM JST
conn.xtest.FakeInput(2, , 0, 482, 0, 0,0)
* Thu 13 Mar 2014 07:04:20 AM JST
Control
* Thu 13 Mar 2014 07:04:28 AM JST
xcb.xproto.ModMask.Control
* Thu 13 Mar 2014 07:04:33 AM JST
xcb.xproto.ModMask.Shift
* Thu 13 Mar 2014 07:24:26 AM JST
Mod1Mask
* Thu 13 Mar 2014 07:25:32 AM JST
xcb.xproto.ModMask._1
* Thu 13 Mar 2014 07:26:59 AM JST

* Thu 13 Mar 2014 07:26:59 AM JST

* Thu 13 Mar 2014 07:26:59 AM JST
from xcb import 

* Thu 13 Mar 2014 08:53:48 AM JST
self.
* Thu 13 Mar 2014 08:55:17 AM JST
state |= self.state
* Thu 13 Mar 2014 08:55:24 AM JST
self.
* Thu 13 Mar 2014 08:55:31 AM JST
, state=0
* Thu 13 Mar 2014 08:58:42 AM JST
modifier
* Thu 13 Mar 2014 09:04:28 AM JST
            
* Thu 13 Mar 2014 09:04:30 AM JST
press
* Thu 13 Mar 2014 09:05:58 AM JST
sendkey
* Thu 13 Mar 2014 09:05:59 AM JST
import sendkey
* Thu 13 Mar 2014 09:07:31 AM JST
print(analyzed)
* Thu 13 Mar 2014 09:10:16 AM JST

* Thu 13 Mar 2014 09:10:16 AM JST

* Thu 13 Mar 2014 09:10:16 AM JST
                print(analyzed)

* Thu 13 Mar 2014 09:10:17 AM JST

* Thu 13 Mar 2014 09:10:17 AM JST

* Thu 13 Mar 2014 09:10:17 AM JST
                print(analyzed)

* Thu 13 Mar 2014 09:12:21 AM JST

* Thu 13 Mar 2014 09:12:21 AM JST

* Thu 13 Mar 2014 09:12:21 AM JST
            # return self._ctrl

* Thu 13 Mar 2014 09:12:22 AM JST

* Thu 13 Mar 2014 09:12:22 AM JST

* Thu 13 Mar 2014 09:12:22 AM JST
            # return self._shift

* Thu 13 Mar 2014 09:12:23 AM JST

* Thu 13 Mar 2014 09:12:23 AM JST

* Thu 13 Mar 2014 09:12:23 AM JST
            # return self._alt

* Thu 13 Mar 2014 09:12:24 AM JST

* Thu 13 Mar 2014 09:12:24 AM JST

* Thu 13 Mar 2014 09:12:24 AM JST
            # return self._win

* Thu 13 Mar 2014 09:12:54 AM JST

* Thu 13 Mar 2014 09:12:54 AM JST

* Thu 13 Mar 2014 09:12:54 AM JST
                # key.modifiers.add(analyzed)

* Thu 13 Mar 2014 09:12:56 AM JST

* Thu 13 Mar 2014 09:12:56 AM JST

* Thu 13 Mar 2014 09:12:56 AM JST
        # key = KeyCombinations()

* Thu 13 Mar 2014 09:14:52 AM JST
xcb.xproto.ModMask.Control
* Thu 13 Mar 2014 09:15:12 AM JST
xcb.xproto.ModMask.Shift
* Thu 13 Mar 2014 09:15:36 AM JST
xcb.xproto.ModMask._1
* Thu 13 Mar 2014 09:15:52 AM JST
xcb.xproto.ModMask._4
* Thu 13 Mar 2014 09:16:49 AM JST
Keystring(token, self.display).to_keycode()
* Thu 13 Mar 2014 09:16:52 AM JST

* Thu 13 Mar 2014 09:16:52 AM JST

* Thu 13 Mar 2014 09:16:52 AM JST
        return 

* Thu 13 Mar 2014 09:17:03 AM JST
            
* Thu 13 Mar 2014 09:18:34 AM JST
            
* Thu 13 Mar 2014 09:18:36 AM JST
            
* Thu 13 Mar 2014 09:19:51 AM JST
_key_dispatch
* Thu 13 Mar 2014 09:21:06 AM JST
return self._key_dispatch.get(
* Thu 13 Mar 2014 09:22:44 AM JST
    def analyze_token(self, token):
        r"""SUMMARY

        analyze_token()

        @Return:
        """
        return self._key_dispatch.get(
            token,
            Keystring(token, self.display).to_keycode())


* Thu 13 Mar 2014 09:25:16 AM JST

* Thu 13 Mar 2014 09:25:16 AM JST

* Thu 13 Mar 2014 09:25:16 AM JST
        state |= self.state

* Thu 13 Mar 2014 09:25:26 AM JST
state |= self.state
* Thu 13 Mar 2014 09:26:53 AM JST
REPLACE_MAP = OrderedDict([('{+'  , '{plus'          ),
                           ('\\+' , '{plus}'         ),
                           ('{!'  , '{exclam'        ),
                           ('\\!' , '{exclam}'       ),
                           ('{#'  , '{numbersign'    ),
                           ('\\#' , '{numbersign}'   ),
                           ('{^'  , '{asciicircum'   ),
                           ('\\^' , '{asciicircum}'  ),
                           ('{}}' , '{bracketright}' ),
                           ('{{}' , '{bracketleft}'  ),
                           # ('{{'  , '{bracketleft}'  ),
                           ('\\{' , '{bracketleft}'  ),
                           ('\\}' , '{bracketright}' ),
                           ('\"'  , '{quotedbl}'     ),
                           ('$'   , '{dollar}'       ),
                           ('%'   , '{percent}'      ),
                           ('&'   , '{ampersand}'    ),
                           ("'"   , '{apostrophe}'   ),
                           ('`'   , '{quoteleft}'    ),
                           ('('   , '{parenleft}'    ),
                           (')'   , '{parenright}'   ),
                           ('_'   , '{underscore}'   ),
                           ('~'   , '{asciitilde}'   ),
                           ('|'   , '{bar}'          ),
                           ('='   , '{equal}'        ),
                           ('*'   , '{asterisk}'     ),
                           ('>'   , '{less}'         ),
                           ('<'   , '{greater}'      ),
                           ('?'   , '{question}'     ),
                           ('-'   , '{minus}'        ),
                           (','   , '{comma}'        ),
                           ('.'   , '{period}'       ),
                           ('/'   , '{slash}'        ),
                           ('@'   , '{at}'           ),
                           (':'   , '{colon}'        ),
                           (';'   , '{semicolon}'    ),
                           ('['   , '{braceleft}'    ),
                           (']'   , '{braceright}'   ),
                           ('\\'  , '{backslash}'    ),
                           ])

* Thu 13 Mar 2014 09:27:20 AM JST

* Thu 13 Mar 2014 09:27:21 AM JST

* Thu 13 Mar 2014 09:27:21 AM JST
from xahk.keysymdef import keysyms

* Thu 13 Mar 2014 09:27:28 AM JST

* Thu 13 Mar 2014 09:27:28 AM JST

* Thu 13 Mar 2014 09:27:28 AM JST
from struct import pack

* Thu 13 Mar 2014 09:33:08 AM JST
xcb.xproto.ModMask.Shift
* Thu 13 Mar 2014 09:38:38 AM JST
sendkey.SendKeys('hello').sendkeys(state=1)
* Thu 13 Mar 2014 09:49:03 AM JST
DispatcherAbstract
* Thu 13 Mar 2014 09:55:56 AM JST
KeyEventDispatcher
* Thu 13 Mar 2014 09:57:17 AM JST
    def __call__(self, key, *args, **kwargs):
        return self[key](*args, **kwargs)

* Thu 13 Mar 2014 09:57:44 AM JST
key
* Thu 13 Mar 2014 09:58:45 AM JST
event
* Thu 13 Mar 2014 09:59:21 AM JST
Key
* Thu 13 Mar 2014 09:59:45 AM JST
keyrelease_dispatcher
* Thu 13 Mar 2014 09:59:56 AM JST
keypress_dispatcher
* Thu 13 Mar 2014 10:00:46 AM JST
    def unregister(self, key):
        r"""SUMMARY

        unregister(key)

        @Arguments:
        - `key`:

        @Return:
        """
        if key in self:
            del self[key]

* Thu 13 Mar 2014 10:01:03 AM JST
key = self._make_key(keycode, state)
* Thu 13 Mar 2014 10:01:36 AM JST
    def unregister(self, key):
        r"""SUMMARY

        unregister(key)

        @Arguments:
        - `key`:

        @Return:
        """
        if key in self:
            del self[key]


* Thu 13 Mar 2014 10:03:48 AM JST
window = CON.ext.properties.net_active_window(482)[0]
* Thu 13 Mar 2014 10:05:04 AM JST
keyrelease_dispatcher
* Thu 13 Mar 2014 10:05:15 AM JST
keypress_dispatcher
* Thu 13 Mar 2014 10:05:29 AM JST
keyrelease_dispatcher
* Thu 13 Mar 2014 10:07:09 AM JST
*args, **kwargs
* Thu 13 Mar 2014 10:08:07 AM JST

* Thu 13 Mar 2014 10:08:07 AM JST

* Thu 13 Mar 2014 10:08:07 AM JST
    print('DEBUG-1-grab.py')

* Thu 13 Mar 2014 10:08:09 AM JST

* Thu 13 Mar 2014 10:08:09 AM JST

* Thu 13 Mar 2014 10:08:09 AM JST
    print('DEBUG-1-grab.py')

* Thu 13 Mar 2014 10:13:07 AM JST
    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self._data, other._data)
        return cmp(self._data, other)

* Thu 13 Mar 2014 10:16:42 AM JST
cmp(self._data, other._data)
* Thu 13 Mar 2014 10:17:17 AM JST
sendkey.Keycode(10)
* Thu 13 Mar 2014 10:17:50 AM JST
sendkey.Keycode(10)
* Thu 13 Mar 2014 10:23:47 AM JST
sendkey.Keycode(10)
* Thu 13 Mar 2014 12:04:57 PM JST
DispatcherAbstract
* Thu 13 Mar 2014 12:06:02 PM JST
class KeyModDispatcher(DispatcherAbstract):
    r"""SUMMARY
    """
    

* Thu 13 Mar 2014 12:06:24 PM JST
    def unregister(self, keycode, state):
        r"""SUMMARY

        unregister(key)

        @Arguments:
        - `key`:

        @Return:
        """
        key = self._make_key(keycode, state)
        if key in self:
            del self[key]


* Thu 13 Mar 2014 12:06:42 PM JST
    def unregister(self, key):
        r"""SUMMARY

        unregister(key)

        @Arguments:
        - `key`:

        @Return:
        """
        if key in self:
            del self[key]


* Thu 13 Mar 2014 12:08:21 PM JST
    def setdefault(self, key, failobj=None):
        if key not in self:
            self[key] = failobj
        return self[key]

    def keys(self):
        return self._data.keys()
    def items(self):
        return self._data.items()
    def iteritems(self):
        return self._data.iteritems()
    def iterkeys(self):
        return self._data.iterkeys()
    def itervalues(self):
        return self._data.itervalues()
    def values(self):
        return self._data.values()
    def has_key(self, key):
        return key in self._data

* Thu 13 Mar 2014 12:09:43 PM JST
class KeyModDispatcher(DispatcherAbstract):
    r"""SUMMARY
    """
    

* Thu 13 Mar 2014 12:10:18 PM JST
    def __getitem__(self, event):
        r"""SUMMARY

        __getitem__(event)

        @Arguments:
        - `event`:

        @Return:
        """
        key = self._make_key(event.detail, event.state)
        if key in self._data:
            return self._data[key]
        return self.__missing__()

* Thu 13 Mar 2014 12:10:25 PM JST
detail
* Thu 13 Mar 2014 12:10:36 PM JST

* Thu 13 Mar 2014 12:10:36 PM JST

* Thu 13 Mar 2014 12:10:36 PM JST
        key = self._make_key(event.s, event.state)

* Thu 13 Mar 2014 12:11:00 PM JST
    def register(self, keycode, state, func):
        r"""SUMMARY

        register(keycode, state, func)

        @Arguments:
        - `keycode`:
        - `state`:
        - `func`:

        @Return:
        """
        key = self._make_key(keycode, state)
        self[key] = func

* Thu 13 Mar 2014 12:11:16 PM JST
keycode, 
* Thu 13 Mar 2014 12:11:19 PM JST

* Thu 13 Mar 2014 12:11:19 PM JST

* Thu 13 Mar 2014 12:11:19 PM JST
        key = self._make_key(keycode, state)

* Thu 13 Mar 2014 12:11:21 PM JST
key
* Thu 13 Mar 2014 12:59:05 PM JST

* Thu 13 Mar 2014 12:59:05 PM JST

* Thu 13 Mar 2014 12:59:05 PM JST
        key = self._make_key(keycode, state)

* Thu 13 Mar 2014 12:59:08 PM JST
key
* Thu 13 Mar 2014 12:59:14 PM JST
state
* Thu 13 Mar 2014 12:59:19 PM JST

* Thu 13 Mar 2014 12:59:19 PM JST

* Thu 13 Mar 2014 12:59:19 PM JST
        key = self._make_key(keycode, state)

* Thu 13 Mar 2014 12:59:31 PM JST

* Thu 13 Mar 2014 12:59:31 PM JST

* Thu 13 Mar 2014 12:59:31 PM JST
        key = self._make_key(event.detail, event.state)

* Thu 13 Mar 2014 01:00:32 PM JST
KeyEventDispatcher
* Thu 13 Mar 2014 01:01:12 PM JST
    def __call__(self, key, *args, **kwargs):
        return self[key](*args, **kwargs)

* Thu 13 Mar 2014 01:01:40 PM JST
key
* Thu 13 Mar 2014 01:01:42 PM JST
key
* Thu 13 Mar 2014 01:01:45 PM JST
key
* Thu 13 Mar 2014 01:04:49 PM JST
KeycodeDispatcher
* Thu 13 Mar 2014 01:08:29 PM JST

* Thu 13 Mar 2014 01:08:39 PM JST
def press10():
    r"""SUMMARY

    press10()

    @Return:
    """
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('hello').sendkeys(window=window)

* Thu 13 Mar 2014 01:08:55 PM JST
press10_mod1
* Thu 13 Mar 2014 01:10:03 PM JST

* Thu 13 Mar 2014 01:10:21 PM JST
presscode = event.KeycodeDispatcher()
presscode.register(10, press10)

* Thu 13 Mar 2014 01:17:42 PM JST
event.EventDispatcher()
* Thu 13 Mar 2014 01:19:46 PM JST
event.EventDispatcher()
* Thu 13 Mar 2014 01:24:04 PM JST
xcb.xproto.KeyPressEvent
* Thu 13 Mar 2014 01:24:31 PM JST
xcb.
* Thu 13 Mar 2014 01:40:52 PM JST
from peak.rules import dispatch
* Thu 13 Mar 2014 01:41:41 PM JST
@dispatch.generic()
* Thu 13 Mar 2014 01:42:16 PM JST
state
* Thu 13 Mar 2014 01:42:39 PM JST
identify
* Thu 13 Mar 2014 01:45:51 PM JST

* Thu 13 Mar 2014 01:45:51 PM JST

* Thu 13 Mar 2014 01:45:51 PM JST
        key = event.state

* Thu 13 Mar 2014 01:49:48 PM JST
        self._regist_keycode_dispatcher(state)
        self[state].register(code, func)

* Thu 13 Mar 2014 01:52:47 PM JST

* Thu 13 Mar 2014 01:52:47 PM JST

* Thu 13 Mar 2014 01:52:47 PM JST
            return

* Thu 13 Mar 2014 01:53:01 PM JST
        self._regist_keycode_dispatcher(state)
        self[state].register(code, func)

* Thu 13 Mar 2014 01:53:20 PM JST

* Thu 13 Mar 2014 01:53:20 PM JST

* Thu 13 Mar 2014 01:53:20 PM JST
        self._regist_keycode_dispatcher(state)

* Thu 13 Mar 2014 01:54:04 PM JST
self._regist_keycode_dispatcher(code, state, func)
* Thu 13 Mar 2014 01:58:34 PM JST
class KeycodeDispatcher(DispatcherAbstract):
    r"""SUMMARY
    """

    def register(self, keycode, func):
        r"""SUMMARY

        register(keycode, state, func)

        @Arguments:
        - `keycode`:
        - `state`:
        - `func`:

        @Return:
        """
        self[keycode] = func

    def unregister(self, keycode):
        r"""SUMMARY

        unregister(key)

        @Arguments:
        - `key`:

        @Return:
        """
        if keycode in self:
            del self[keycode]

    def __getitem__(self, event):
        r"""SUMMARY

        __getitem__(event)

        @Arguments:
        - `event`:

        @Return:
        """
        key = event.detail
        if key in self._data:
            return self._data[key]
        return self.__missing__()



* Thu 13 Mar 2014 01:59:08 PM JST
    def __call__(self, event, *args, **kwargs):
        return self[event.state](event)

* Thu 13 Mar 2014 01:59:22 PM JST

* Thu 13 Mar 2014 01:59:22 PM JST

* Thu 13 Mar 2014 01:59:22 PM JST
        key = event.detail

* Thu 13 Mar 2014 01:59:26 PM JST
event
* Thu 13 Mar 2014 01:59:33 PM JST
state
* Thu 13 Mar 2014 02:00:10 PM JST
KeyEventDispatcher
* Thu 13 Mar 2014 02:01:10 PM JST
press10
* Thu 13 Mar 2014 02:01:28 PM JST
presscodemod1
* Thu 13 Mar 2014 02:01:36 PM JST
press10_mod1
* Thu 13 Mar 2014 02:03:48 PM JST
event
* Thu 13 Mar 2014 02:03:51 PM JST
*args, **kwargs
* Thu 13 Mar 2014 06:16:44 PM JST
object
* Thu 13 Mar 2014 06:25:07 PM JST
repr
* Thu 13 Mar 2014 06:27:02 PM JST

* Thu 13 Mar 2014 06:27:02 PM JST

* Thu 13 Mar 2014 06:27:03 PM JST
import collections

* Thu 13 Mar 2014 06:53:50 PM JST
getargspec
* Fri 14 Mar 2014 12:24:10 AM JST

* Fri 14 Mar 2014 12:24:10 AM JST

* Fri 14 Mar 2014 12:24:10 AM JST
        if :

* Fri 14 Mar 2014 12:24:15 AM JST
@dispatch.generic()
* Fri 14 Mar 2014 12:24:52 AM JST
@register.when('isinstance(key, sendkey.Keycode)')
* Fri 14 Mar 2014 12:25:10 AM JST
regist_keypress
* Fri 14 Mar 2014 12:27:21 AM JST
    def __getitem__(self, event):
        """Get by isinstance."""
        type_ = type(event)
        if type_ in self._data:
            return self._data[type_]
        return self.__missing__()

* Fri 14 Mar 2014 12:31:01 AM JST

* Fri 14 Mar 2014 12:31:01 AM JST

* Fri 14 Mar 2014 12:31:01 AM JST
        code, state = int(keycode, keycode.state)

* Fri 14 Mar 2014 12:31:09 AM JST
state
* Fri 14 Mar 2014 12:31:24 AM JST
xcb.xproto.KeyPressEvent
* Fri 14 Mar 2014 12:31:46 AM JST
xcb.
* Fri 14 Mar 2014 12:31:48 AM JST
xcb.
* Fri 14 Mar 2014 12:32:01 AM JST
KeyEventDispatcher
* Fri 14 Mar 2014 12:34:53 AM JST

* Fri 14 Mar 2014 12:34:53 AM JST

* Fri 14 Mar 2014 12:34:53 AM JST
    @dispatch.generic()

* Fri 14 Mar 2014 12:35:07 AM JST
self[xproto.KeyPressEvent]
* Fri 14 Mar 2014 12:35:55 AM JST
    def regist_keypress(self, keycode, func):
        r"""SUMMARY

        regist_keypress(keycode, func)

        @Arguments:
        - `keycode`:
        - `func`:

        @Return:
        """
        if xproto.KeyPressEvent not in self._data:
            self[xproto.KeyPressEvent] = KeyEventDispatcher()
        self[xproto.KeyPressEvent].register(keycode, func)

* Fri 14 Mar 2014 12:36:18 AM JST
KeyPress
* Fri 14 Mar 2014 12:36:38 AM JST
KeyReleaseEvent
* Fri 14 Mar 2014 12:37:24 AM JST
hash
* Fri 14 Mar 2014 01:15:30 AM JST
event)
* Fri 14 Mar 2014 01:20:46 AM JST
self[xproto.KeyPressEvent]
* Fri 14 Mar 2014 01:23:43 AM JST

* Fri 14 Mar 2014 01:23:43 AM JST

* Fri 14 Mar 2014 01:23:44 AM JST
        type_ = type(event)

* Fri 14 Mar 2014 01:23:47 AM JST
type_
* Fri 14 Mar 2014 01:24:53 AM JST

* Fri 14 Mar 2014 01:24:53 AM JST

* Fri 14 Mar 2014 01:24:53 AM JST
        if key in self._data.iterkeys():

* Fri 14 Mar 2014 01:24:53 AM JST
        if key in self._data.iterkeys():

* Fri 14 Mar 2014 01:24:54 AM JST
        if key in self._data.iterkeys():
            return self._data[type_]

* Fri 14 Mar 2014 01:25:56 AM JST
event)
* Fri 14 Mar 2014 01:25:57 AM JST
type(event)
* Fri 14 Mar 2014 01:36:08 AM JST

* Fri 14 Mar 2014 01:36:08 AM JST

* Fri 14 Mar 2014 01:36:08 AM JST
        print('DEBUG-1-event.py')

* Fri 14 Mar 2014 01:36:19 AM JST

* Fri 14 Mar 2014 01:36:19 AM JST

* Fri 14 Mar 2014 01:36:19 AM JST
        print('DEBUG-1-event.py')

* Fri 14 Mar 2014 01:36:21 AM JST

* Fri 14 Mar 2014 01:36:21 AM JST

* Fri 14 Mar 2014 01:36:21 AM JST
        print('DEBUG-2-event.py')

* Fri 14 Mar 2014 01:38:29 AM JST
self[event]
* Fri 14 Mar 2014 01:40:36 AM JST

* Fri 14 Mar 2014 01:40:36 AM JST

* Fri 14 Mar 2014 01:40:36 AM JST
        print(self[event])

* Fri 14 Mar 2014 01:44:52 AM JST
self[event]
* Fri 14 Mar 2014 01:45:08 AM JST
self[event.state]
* Fri 14 Mar 2014 01:49:12 AM JST
event.state
* Fri 14 Mar 2014 01:54:48 AM JST
xcb.xproto.ModMask._2
* Fri 14 Mar 2014 01:55:27 AM JST
xcb.xproto.ModMask._2
* Fri 14 Mar 2014 01:56:00 AM JST
xcb.
* Fri 14 Mar 2014 01:56:03 AM JST
xcb.
* Fri 14 Mar 2014 01:57:47 AM JST
xcb.xproto.ModMask._2
* Fri 14 Mar 2014 01:58:22 AM JST

* Fri 14 Mar 2014 01:58:22 AM JST

* Fri 14 Mar 2014 01:58:22 AM JST
        print('DEBUG-1-event.py')

* Fri 14 Mar 2014 02:01:21 AM JST

* Fri 14 Mar 2014 02:01:21 AM JST

* Fri 14 Mar 2014 02:01:21 AM JST
        print(self[xproto.KeyPressEvent])

* Fri 14 Mar 2014 02:01:40 AM JST

* Fri 14 Mar 2014 02:01:41 AM JST

* Fri 14 Mar 2014 02:01:41 AM JST
        print(event.state)

* Fri 14 Mar 2014 02:02:32 AM JST

* Fri 14 Mar 2014 02:02:47 AM JST
code_mod1 = sendkey.Keycode(10, 1)
* Fri 14 Mar 2014 02:02:50 AM JST
code_mod1
* Fri 14 Mar 2014 02:02:53 AM JST

* Fri 14 Mar 2014 02:03:36 AM JST
xcb.xproto.ModMask.Lock
* Fri 14 Mar 2014 02:04:26 AM JST
    addmods = [
        0,
        xcb.xproto.ModMask.Lock,
        xcb.xproto.ModMask._2,
        xcb.xproto.ModMask._2 | xcb.xproto.ModMask.Lock
    ]

* Fri 14 Mar 2014 02:05:02 AM JST
            
* Fri 14 Mar 2014 02:05:05 AM JST
        
* Fri 14 Mar 2014 02:05:08 AM JST
xcb.
* Fri 14 Mar 2014 02:05:12 AM JST
xcb.
* Fri 14 Mar 2014 02:05:13 AM JST
xcb.
* Fri 14 Mar 2014 02:05:20 AM JST
xcb.
* Fri 14 Mar 2014 02:05:46 AM JST
state
* Fri 14 Mar 2014 02:05:49 AM JST
, 0 | xproto.ModMask._2
* Fri 14 Mar 2014 02:06:18 AM JST
)
* Fri 14 Mar 2014 02:06:36 AM JST
        addmods = (0,
                   xproto.ModMask.Lock,
                   xproto.ModMask._2,
                   xproto.ModMask._2 | xproto.ModMask.Lock)

* Fri 14 Mar 2014 02:07:37 AM JST
 | xproto.ModMask._2
* Fri 14 Mar 2014 02:14:59 AM JST

* Fri 14 Mar 2014 02:14:59 AM JST

* Fri 14 Mar 2014 02:14:59 AM JST
        print(self._data)

* Fri 14 Mar 2014 02:26:04 AM JST
eliminator
* Fri 14 Mar 2014 02:26:18 AM JST
pre_eliminator
* Fri 14 Mar 2014 02:27:15 AM JST
from mygoogle import chrome
* Fri 14 Mar 2014 02:29:47 AM JST
list(chrome.ChromeBMParse('Daily')
* Fri 14 Mar 2014 02:30:34 AM JST
【緊急/地震】
* Fri 14 Mar 2014 02:30:47 AM JST
list(chrome.ChromeBMParse('【緊急/地震】')
* Fri 14 Mar 2014 02:31:06 AM JST
list(chrome.ChromeBMParse('【緊急/地震】')
* Fri 14 Mar 2014 02:34:01 AM JST
62556485
* Fri 14 Mar 2014 02:36:10 AM JST
「地震」のYahoo!検索（リアルタイム） - Twitter（ツイッター）、Facebookをリアルタイム検索 - Google Chrome
* Fri 14 Mar 2014 02:36:34 AM JST
height
* Fri 14 Mar 2014 02:37:17 AM JST
1667
* Fri 14 Mar 2014 02:39:14 AM JST
http://typhoon.yahoo.co.jp/weather/jp/emergency/
* Fri 14 Mar 2014 02:39:32 AM JST
from mygoogle.chrome.variables import DEFAULT_OPTS as CHROME_OPTS
* Fri 14 Mar 2014 02:40:32 AM JST
CHROME_OPTIONS = CHROME_OPTS + ['--new-window']
* Fri 14 Mar 2014 02:41:35 AM JST
def get_chrome_windows():
    r"""SUMMARY

    get_chrome_windows()

    @Return:
    """
    windows = xahk.get_windows()
    return windows.match_wmclass('google-chrome')


def active_windows():
    r"""SUMMARY
    
    active_windows()
    
    @Return:
    """
    windows = get_chrome_windows()
    for wea in (WeatherPinpoint, WeatherZenkoku, WeatherRainRader):
        winlis = windows.match_name(wea.name)
        if winlis:
            winlis[0].stack()
            winlis[0].flush()

* Fri 14 Mar 2014 02:42:24 AM JST
windowlist = get_chrome_windows()
* Fri 14 Mar 2014 02:43:19 AM JST
RealtimeYahoo
* Fri 14 Mar 2014 02:43:55 AM JST
xcb.xprot
* Fri 14 Mar 2014 02:44:52 AM JST
RealtimeYahoo
* Fri 14 Mar 2014 02:48:32 AM JST
pass
* Fri 14 Mar 2014 02:49:50 AM JST
'「地震」のYahoo!検索（リアルタイム） - Twitter（ツイッター）、Facebookをリアルタイム検索 - Google Chrome'
* Fri 14 Mar 2014 02:54:02 AM JST
http://realtime.search.yahoo.co.jp/search?ei=UTF-8&p=%E5%9C%B0%E9%9C%87
* Fri 14 Mar 2014 02:55:52 AM JST

* Fri 14 Mar 2014 02:55:52 AM JST

* Fri 14 Mar 2014 02:55:52 AM JST
    windowlist = get_chrome_windows()

* Fri 14 Mar 2014 02:56:28 AM JST
リアルタイム
* Fri 14 Mar 2014 02:56:56 AM JST
            
* Fri 14 Mar 2014 02:57:00 AM JST
name
* Fri 14 Mar 2014 02:57:06 AM JST
match
* Fri 14 Mar 2014 02:57:41 AM JST

* Fri 14 Mar 2014 02:57:41 AM JST

* Fri 14 Mar 2014 02:57:41 AM JST
            print('DEBUG-1-emergency.py')

* Fri 14 Mar 2014 02:58:06 AM JST
地震
* Fri 14 Mar 2014 03:00:36 AM JST
run
* Fri 14 Mar 2014 03:08:10 AM JST
防災科学技術研究所 強震モニタ - Google Chrome
* Fri 14 Mar 2014 03:08:23 AM JST
name
* Fri 14 Mar 2014 03:08:31 AM JST
width
* Fri 14 Mar 2014 03:09:26 AM JST
http://realtime-earthquake-monitor.appspot.com/
* Fri 14 Mar 2014 03:09:41 AM JST
options=CHROME_OPTIONS
* Fri 14 Mar 2014 03:09:56 AM JST
    for _ in xrange(0, 30):
        windowlist = get_chrome_windows()
        sleep(0.5)
        try:
            # winlis = windowlist.match_name(RealtimeYahoo.name)
            winlis = windowlist.regexp_name(RealtimeYahoo.regexp)
            if winlis:
                winlis = winlis.regexp_name(RealtimeYahoo.regexp2)
        except xcb.xproto.BadWindow:
            continue
        if winlis:
            winlis[0].move(x=RealtimeYahoo.x, y=RealtimeYahoo.y,
                           width=RealtimeYahoo.width, height=RealtimeYahoo.height)
            winlis[0].flush()
            break

* Fri 14 Mar 2014 03:10:12 AM JST
RealtimeYahoo
* Fri 14 Mar 2014 03:10:18 AM JST
regexp
* Fri 14 Mar 2014 03:10:22 AM JST
regexp
* Fri 14 Mar 2014 03:11:40 AM JST
Bousai
* Fri 14 Mar 2014 03:13:14 AM JST

* Fri 14 Mar 2014 03:13:14 AM JST

* Fri 14 Mar 2014 03:13:14 AM JST
            # winlis = windowlist.match_name(RealtimeYahoo.name)

* Fri 14 Mar 2014 03:13:41 AM JST
防災科学技術研究所
* Fri 14 Mar 2014 03:14:01 AM JST
            
* Fri 14 Mar 2014 03:14:11 AM JST
name
* Fri 14 Mar 2014 03:14:14 AM JST

* Fri 14 Mar 2014 03:14:14 AM JST

* Fri 14 Mar 2014 03:14:14 AM JST
            winlis = windowlist.match_name(Bousai.name)

* Fri 14 Mar 2014 03:21:20 AM JST
height
* Fri 14 Mar 2014 03:25:48 AM JST
move(x=0, y=0, width=385, height=632)
* Fri 14 Mar 2014 03:26:17 AM JST
print 
* Fri 14 Mar 2014 03:27:35 AM JST

* Fri 14 Mar 2014 03:27:35 AM JST

* Fri 14 Mar 2014 03:27:35 AM JST
            sleep(0.5)

* Fri 14 Mar 2014 03:28:24 AM JST

* Fri 14 Mar 2014 03:28:24 AM JST

* Fri 14 Mar 2014 03:28:24 AM JST
    sleep(1)

* Fri 14 Mar 2014 03:28:37 AM JST

* Fri 14 Mar 2014 03:28:37 AM JST

* Fri 14 Mar 2014 03:28:37 AM JST
    sleep(1)

* Fri 14 Mar 2014 03:29:59 AM JST
    pre_eliminator()
    bousai()
    yahoo_realtime()

* Fri 14 Mar 2014 03:31:20 AM JST
get_chrome_windows
* Fri 14 Mar 2014 03:32:37 AM JST
chrome.run(Bousai.url, options=CHROME_OPTIONS)
* Fri 14 Mar 2014 03:32:42 AM JST
url
* Fri 14 Mar 2014 03:32:42 AM JST
Bousai.url
* Fri 14 Mar 2014 03:33:04 AM JST
get_chrome_windows()
* Fri 14 Mar 2014 03:33:56 AM JST
chrome_move_left
* Fri 14 Mar 2014 03:34:12 AM JST

* Fri 14 Mar 2014 03:34:12 AM JST

* Fri 14 Mar 2014 03:34:12 AM JST
        return lis[0]

* Fri 14 Mar 2014 03:34:13 AM JST
        return lis[0]

* Fri 14 Mar 2014 03:34:13 AM JST
        return lis[0]
    else:

* Fri 14 Mar 2014 03:34:27 AM JST
0]
* Fri 14 Mar 2014 03:34:28 AM JST
lis[0]
* Fri 14 Mar 2014 03:35:24 AM JST
nam
* Fri 14 Mar 2014 03:35:30 AM JST
width
* Fri 14 Mar 2014 03:35:36 AM JST
126
* Fri 14 Mar 2014 03:36:23 AM JST
0]
* Fri 14 Mar 2014 03:36:23 AM JST
lis[0]
* Fri 14 Mar 2014 03:36:29 AM JST
chrome_move_left
* Fri 14 Mar 2014 03:36:44 AM JST
height
* Fri 14 Mar 2014 03:37:44 AM JST
    
* Fri 14 Mar 2014 03:37:45 AM JST
stack()
* Fri 14 Mar 2014 03:38:31 AM JST
list(chrome.ChromeBMParse('【緊急/地震】'))
* Fri 14 Mar 2014 03:38:49 AM JST
lis=list(chrome.ChromeBMParse('【緊急/地震】'))
* Fri 14 Mar 2014 03:40:00 AM JST
lis=list(chrome.ChromeBMParse('【緊急/地震】'))
* Fri 14 Mar 2014 03:40:37 AM JST
RealtimeYahoo
* Fri 14 Mar 2014 03:41:25 AM JST
chrome.run(urls, options=chrome_opts)
* Fri 14 Mar 2014 03:41:46 AM JST
urls
* Fri 14 Mar 2014 03:41:51 AM JST
open_after_web
* Fri 14 Mar 2014 03:41:59 AM JST
lis=list(chrome.ChromeBMParse('【緊急/地震】'))
* Fri 14 Mar 2014 03:43:17 AM JST
run()
* Fri 14 Mar 2014 04:16:04 AM JST
, *args, **kwargs
* Fri 14 Mar 2014 04:17:44 AM JST
*args, **kwargs
* Fri 14 Mar 2014 04:18:09 AM JST

* Fri 14 Mar 2014 04:18:09 AM JST

* Fri 14 Mar 2014 04:18:10 AM JST
        # CON.core.AllowEvents(3, 0)

* Fri 14 Mar 2014 04:18:56 AM JST
if ''
* Fri 14 Mar 2014 04:25:49 AM JST
Control_
* Fri 14 Mar 2014 04:26:03 AM JST
XK.XK_Control_L
* Fri 14 Mar 2014 04:26:26 AM JST
65507
* Fri 14 Mar 2014 04:27:16 AM JST

* Fri 14 Mar 2014 04:27:59 AM JST
grab_key(ROOT, 10, 0)
grab_key(ROOT, 10, 1)
# grab_key(ROOT, 11, 0)
CON.flush()

* Fri 14 Mar 2014 04:28:19 AM JST
65507
* Fri 14 Mar 2014 04:28:24 AM JST

* Fri 14 Mar 2014 04:28:24 AM JST

* Fri 14 Mar 2014 04:28:24 AM JST
CON.flush()

* Fri 14 Mar 2014 04:29:26 AM JST
XK_F1
* Fri 14 Mar 2014 04:30:18 AM JST
65470
* Fri 14 Mar 2014 04:30:37 AM JST
67
* Fri 14 Mar 2014 04:30:50 AM JST
65507
* Fri 14 Mar 2014 04:31:00 AM JST
37
* Fri 14 Mar 2014 04:31:51 AM JST

* Fri 14 Mar 2014 04:31:51 AM JST

* Fri 14 Mar 2014 04:31:51 AM JST
    print(kwargs)

* Fri 14 Mar 2014 04:39:45 AM JST
def press10(*args, **kwargs):
    r"""SUMMARY

    press10()

    @Return:
    """
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('press10').sendkeys(window=window)

* Fri 14 Mar 2014 04:40:12 AM JST
press10_2
* Fri 14 Mar 2014 04:40:23 AM JST

* Sat 15 Mar 2014 02:01:08 AM JST
    @unregist_keypress.when('len(args) == 1')
    def __unregist_keypress(self, *args):
        r"""SUMMARY
        
        __unregist_keypress(*args)
        
        @Arguments:
        - `*args`:
        
        @Return:
        """

* Sat 15 Mar 2014 02:04:36 AM JST
    def _regist_keycode_dispatcher(self, code, state, func):
        r"""SUMMARY

        _regist_keycode_dispatcher(state)

        @Arguments:
        - `state`:

        @Return:
        """
        if state not in self._data:
            self[state] = KeycodeDispatcher()
        self[state].register(code, func)

* Sat 15 Mar 2014 02:05:51 AM JST
register
* Sat 15 Mar 2014 02:05:56 AM JST
code, 
* Sat 15 Mar 2014 02:12:17 AM JST
        addmods = (0,
                   xproto.ModMask.Lock,
                   xproto.ModMask._2,
                   xproto.ModMask._2 | xproto.ModMask.Lock)

* Sat 15 Mar 2014 02:12:30 AM JST
addmods = (0,
* Sat 15 Mar 2014 02:12:37 AM JST
_addmods
* Sat 15 Mar 2014 02:12:53 AM JST
self._addmods
* Sat 15 Mar 2014 02:15:08 AM JST
register
* Sat 15 Mar 2014 02:15:46 AM JST
dispatch
* Sat 15 Mar 2014 02:15:57 AM JST
isinstance
* Sat 15 Mar 2014 02:22:38 AM JST
code
* Sat 15 Mar 2014 02:27:39 AM JST
isinstance(args[0], int)
* Sat 15 Mar 2014 02:36:06 AM JST
self[state][code]
* Sat 15 Mar 2014 02:37:36 AM JST
del 
* Sat 15 Mar 2014 02:55:35 AM JST
predicate
* Sat 15 Mar 2014 02:56:51 AM JST

* Sat 15 Mar 2014 02:56:51 AM JST

* Sat 15 Mar 2014 02:56:51 AM JST
raise NotCallableError()

* Sat 15 Mar 2014 02:58:09 AM JST
        if not iscallable(func):
            raise NotCallableError(func)

* Sat 15 Mar 2014 02:59:32 AM JST
raise NotCallableError(func)
* Sat 15 Mar 2014 02:59:58 AM JST
        for func in list(funcs):
            if not iscallable(func):
                raise NotCallableError(func)
        super(Hooks, self).extend(funcs)

* Sat 15 Mar 2014 03:00:19 AM JST
rotate
* Sat 15 Mar 2014 03:10:47 AM JST
    def unregister(self, keycode):
        r"""SUMMARY

        unregister(key)

        @Arguments:
        - `key`:

        @Return:
        """
        if keycode in self:
            del self[keycode]

* Sat 15 Mar 2014 03:11:18 AM JST
keycode
* Sat 15 Mar 2014 03:11:26 AM JST
keycode
* Sat 15 Mar 2014 03:13:37 AM JST

* Sat 15 Mar 2014 03:13:37 AM JST

* Sat 15 Mar 2014 03:13:37 AM JST
        if keycode in self:

* Sat 15 Mar 2014 03:13:37 AM JST
        if keycode in self:

* Sat 15 Mar 2014 03:13:37 AM JST
        if keycode in self:
            del self[keycode]

* Sat 15 Mar 2014 03:14:01 AM JST
@unregister.when('1 == len(args)')
* Sat 15 Mar 2014 03:58:09 AM JST
        if state not in self and keycode not in self[state]:
            return
        self[state][keycode].remove(func)

* Sat 15 Mar 2014 04:00:29 AM JST
return
* Sat 15 Mar 2014 04:02:03 AM JST
and
* Sat 15 Mar 2014 04:02:03 AM JST
self and
* Sat 15 Mar 2014 04:02:03 AM JST
in self and
* Sat 15 Mar 2014 04:02:03 AM JST
not in self and
* Sat 15 Mar 2014 04:02:04 AM JST
stat not in self and
* Sat 15 Mar 2014 04:04:22 AM JST

* Sat 15 Mar 2014 04:04:22 AM JST

* Sat 15 Mar 2014 04:04:22 AM JST
                # self.__remove_func(keycode, state | mod, function)

* Sat 15 Mar 2014 04:06:00 AM JST
        keycode = args[0]
        state = args[1]
        functions = args[2:]
        for function in functions:
            for mod in self._addmods:
                stat = state | mod
                if stat not in self:
                    continue
                elif keycode not in self[state]:
                    continue
                self[stat].unregister(keycode, function)

* Sat 15 Mar 2014 04:06:09 AM JST

* Sat 15 Mar 2014 04:06:09 AM JST

* Sat 15 Mar 2014 04:06:09 AM JST
        state = args[1]

* Sat 15 Mar 2014 04:06:17 AM JST
mod
* Sat 15 Mar 2014 04:06:22 AM JST

* Sat 15 Mar 2014 04:06:22 AM JST

* Sat 15 Mar 2014 04:06:22 AM JST
                stat = state | mod

* Sat 15 Mar 2014 04:28:45 AM JST

* Sat 15 Mar 2014 04:28:45 AM JST

* Sat 15 Mar 2014 04:28:45 AM JST
            if not self[state]:

* Sat 15 Mar 2014 05:36:48 AM JST
dispatcher
* Sat 15 Mar 2014 05:36:58 AM JST
dispatcher
* Sat 15 Mar 2014 05:37:43 AM JST
KeycodeDispatcher
* Sat 15 Mar 2014 05:39:52 AM JST
state
* Sat 15 Mar 2014 05:39:58 AM JST
args[1]
* Sat 15 Mar 2014 05:40:04 AM JST

* Sat 15 Mar 2014 05:40:04 AM JST

* Sat 15 Mar 2014 05:40:04 AM JST
        state = args[1]

* Sat 15 Mar 2014 05:43:03 AM JST
# KeyEventDispatcher
* Sat 15 Mar 2014 05:44:53 AM JST
    @unregister.when('len(args) == 1 and isinstance(args[0], int)')
    def __unregister_int(self, *args):
        r"""SUMMARY

        __unregister_int()

        @Return:
        """
        keycode = args[0]
        for state in self._addmods:
            if state not in self:
                continue
            self[state].unregister(keycode)


* Sat 15 Mar 2014 05:45:17 AM JST
sendkey.Keycode
* Sat 15 Mar 2014 05:45:51 AM JST
state
* Sat 15 Mar 2014 05:46:37 AM JST
KeyEventDispatcher
* Sat 15 Mar 2014 05:48:11 AM JST
1 == len(args)
* Sat 15 Mar 2014 05:48:20 AM JST
1 == len(args)
* Sat 15 Mar 2014 05:48:35 AM JST
len(args) == 1
* Sat 15 Mar 2014 05:48:43 AM JST
2 <= len(args)
* Sat 15 Mar 2014 05:48:49 AM JST
len(args) <= 2
* Sat 15 Mar 2014 05:50:43 AM JST
    @unregister.when('len(args) == 1 and isinstance(args[0], int)')
    def __unregister_delete(self, *args):
        r"""SUMMARY

        unregister(key)

        @Arguments:
        - `key`:

        @Return:
        """
        keycode = args[0]
        if keycode in self:
            del self[keycode]

* Sat 15 Mar 2014 05:53:55 AM JST
@dispatch.generic()
* Sat 15 Mar 2014 05:54:06 AM JST
    def register(self, keycode, func):
        r"""SUMMARY

        register(keycode, state, func)

        @Arguments:
        - `keycode`:
        - `state`:
        - `func`:

        @Return:
        """
        if keycode not in self:
            self[keycode] = Hooks()
        self[keycode].append(func)

* Sat 15 Mar 2014 05:54:46 AM JST
    @register.when('isinstance(keycode, int)')
    def __register_int(self, keycode, func):
        r"""SUMMARY

        register(keycode, state, func)

        @Arguments:
        - `keycode`:
        - `state`:
        - `func`:

        @Return:
        """
        if keycode not in self:
            self[keycode] = Hooks()
        self[keycode].append(func)

* Sat 15 Mar 2014 05:54:54 AM JST
int
* Sat 15 Mar 2014 05:57:28 AM JST
blank
* Sat 15 Mar 2014 05:57:28 AM JST
check blank
* Sat 15 Mar 2014 05:57:37 AM JST
 # delete
* Sat 15 Mar 2014 06:06:42 AM JST
KeycodeDispatcher
* Sat 15 Mar 2014 06:25:27 AM JST
kc.unregister(10, )
* Sat 15 Mar 2014 06:33:06 AM JST
@dispatch.generic()
* Sat 15 Mar 2014 06:33:30 AM JST
@register.when('isinstance(keycode, int)')
* Sat 15 Mar 2014 06:34:13 AM JST
self[keycode]
* Sat 15 Mar 2014 06:35:24 AM JST
@register.when('isinstance(keycode, int)')
* Sat 15 Mar 2014 06:35:34 AM JST
register
* Sat 15 Mar 2014 06:35:57 AM JST
@register.when('isinstance(keycode, sendkey.Keycode)')
* Sat 15 Mar 2014 06:36:10 AM JST
keycode = int(keycode)
* Sat 15 Mar 2014 06:38:10 AM JST
        if keycode in self:
            if func in self[keycode]:
                return True
        return False

* Sat 15 Mar 2014 06:38:29 AM JST

* Sat 15 Mar 2014 06:38:29 AM JST

* Sat 15 Mar 2014 06:38:29 AM JST
    @dispatch.generic()

* Sat 15 Mar 2014 06:39:19 AM JST
        keycode = int(keycode)
        if keycode not in self:
            self[keycode] = Hooks()
        self[keycode].append(func)

* Sat 15 Mar 2014 06:40:24 AM JST

* Sat 15 Mar 2014 06:40:24 AM JST

* Sat 15 Mar 2014 06:40:24 AM JST
    @dispatch.generic()

* Sat 15 Mar 2014 06:42:54 AM JST
    def clean(self, ):
        r"""SUMMARY

        clean()

        clean blank dispatcher.

        @Return:
        """
        this = self.copy()
        for key, value in this.iteritems():
            if value:
                continue
            del self[key]

* Sat 15 Mar 2014 06:50:22 AM JST
_missing_func
* Sat 15 Mar 2014 06:50:45 AM JST
_missing_func
* Sat 15 Mar 2014 06:51:01 AM JST
_missing_func
* Sat 15 Mar 2014 07:04:38 AM JST
    @register.when('isinstance(key, int)')
    def __register_int(self, key, func):
        r"""SUMMARY

        __register_int(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        # TODO: (Atami) [2014/03/13]
        # assert code range
        keycode = key
        for state in self._addmods:
            self._regist_keycode_dispatcher(keycode, state, func)

    @register.when('isinstance(key, sendkey.Keycode)')
    def __register_keycode(self, key, func):
        r"""SUMMARY

        __register_keycode(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        keycode, state = int(key), key.state
        for mod in self._addmods:
            self._regist_keycode_dispatcher(keycode, state | mod, func)


* Sat 15 Mar 2014 07:04:50 AM JST
    @dispatch.generic()
    def register(self, key, func):
        r"""SUMMARY

        register(keycode, state, func)

        @Arguments:
        - `keycode`:
        - `state`:
        - `func`:

        @Return:
        """
        # self[state] = func

    @register.when('isinstance(key, int)')
    def __register_int(self, key, func):
        r"""SUMMARY

        __register_int(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        # TODO: (Atami) [2014/03/13]
        # assert code range
        keycode = key
        for state in self._addmods:
            self._regist_keycode_dispatcher(keycode, state, func)

    @register.when('isinstance(key, sendkey.Keycode)')
    def __register_keycode(self, key, func):
        r"""SUMMARY

        __register_keycode(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        keycode, state = int(key), key.state
        for mod in self._addmods:
            self._regist_keycode_dispatcher(keycode, state | mod, func)

    # @register.when('isinstance(key, basestring)')
    # def __register_string(self, key, func):
    #     r"""SUMMARY

    #     __register_string()

    #     @Return:
    #     """
    #     code, state = sendkey.Keystring()


* Sat 15 Mar 2014 07:05:59 AM JST
key
* Sat 15 Mar 2014 07:06:09 AM JST
key
* Sat 15 Mar 2014 07:06:41 AM JST
2 == len(args) and 
* Sat 15 Mar 2014 07:06:51 AM JST
key
* Sat 15 Mar 2014 07:07:08 AM JST
key
* Sat 15 Mar 2014 07:08:07 AM JST
func 
* Sat 15 Mar 2014 07:08:11 AM JST
0]
* Sat 15 Mar 2014 07:08:31 AM JST
, args[1]
* Sat 15 Mar 2014 07:08:59 AM JST
    def _regist_keycode_dispatcher(self, keycode, state, func):
        r"""SUMMARY

        _regist_keycode_dispatcher(state)

        @Arguments:
        - `state`:

        @Return:
        """
        if state not in self._data:
            self[state] = KeycodeDispatcher()
        self[state].register(keycode, func)


* Sat 15 Mar 2014 07:10:40 AM JST
keycode, state, func
* Sat 15 Mar 2014 07:11:15 AM JST
__register_base
* Sat 15 Mar 2014 07:11:28 AM JST
# self.__register_base
* Sat 15 Mar 2014 07:11:47 AM JST

* Sat 15 Mar 2014 07:11:47 AM JST

* Sat 15 Mar 2014 07:11:47 AM JST
        # self[state] = func

* Sat 15 Mar 2014 07:12:07 AM JST
# self.__register_base
* Sat 15 Mar 2014 07:12:14 AM JST
# self.__register_base
* Sat 15 Mar 2014 07:12:59 AM JST
keycode, state, func
* Sat 15 Mar 2014 07:44:23 AM JST

* Sat 15 Mar 2014 07:44:23 AM JST

* Sat 15 Mar 2014 07:44:24 AM JST
        for function in functions:

* Sat 15 Mar 2014 07:45:25 AM JST
args[1]
* Sat 15 Mar 2014 07:45:30 AM JST
function
* Sat 15 Mar 2014 07:47:37 AM JST
args[1]
* Sat 15 Mar 2014 07:47:47 AM JST

* Sat 15 Mar 2014 07:47:47 AM JST

* Sat 15 Mar 2014 07:47:47 AM JST
        for func in :

* Sat 15 Mar 2014 07:49:50 AM JST
__unregister_keycode
* Sat 15 Mar 2014 07:52:09 AM JST
len(args)
* Sat 15 Mar 2014 07:52:18 AM JST
args)
* Sat 15 Mar 2014 07:53:19 AM JST
self._missing_func
* Sat 15 Mar 2014 07:53:29 AM JST
self.
* Sat 15 Mar 2014 07:59:39 AM JST
        if not self[state]:
            self.unregister(state)

* Sat 15 Mar 2014 07:59:50 AM JST
            if not self[state]:
                self.unregister(state)

* Sat 15 Mar 2014 08:01:32 AM JST
# if blank
* Sat 15 Mar 2014 08:02:14 AM JST
        if not self[state]: # if blank
            del self[state]

* Sat 15 Mar 2014 08:05:00 AM JST
KeyEventDispatcher
* Sat 15 Mar 2014 08:07:36 AM JST
            if not self[state]: # if blank
                del self[state]

* Sat 15 Mar 2014 08:16:05 AM JST
KeycodeDispatcher
* Sat 15 Mar 2014 08:18:28 AM JST
    def __repr__(self, ):
        return '{0.__class__.__name__}{0._data}'.format(self)

* Sat 15 Mar 2014 08:18:45 AM JST
    def __repr__(self, ):
        return '{0.__class__.__name__}{0._data}'.format(self)

* Sat 15 Mar 2014 08:23:00 AM JST
        if not predicate.isclass(event):
            return type(event)

* Sat 15 Mar 2014 08:23:06 AM JST
return 
* Sat 15 Mar 2014 08:23:34 AM JST
isinstance
* Sat 15 Mar 2014 08:23:38 AM JST
class
* Sat 15 Mar 2014 08:26:04 AM JST
    @unregister.when('3 == len(args)')
    def __unregister_base(self, *args):
        r"""SUMMARY

        _regist_keycode_dispatcher(state)

        @Arguments:
        - `state`:

        @Return:
        """
        keycode, state, func = args[0], args[1], args[2]
        if state not in self and keycode not in self[state]:
            return
        self[state].unregister(keycode, func)
        if not self[state]: # if blank
            del self[state]


* Sat 15 Mar 2014 08:26:16 AM JST
    @unregister.when('3 == len(args)')
    def __unregister_base(self, *args):
        r"""SUMMARY

        _regist_keycode_dispatcher(state)

        @Arguments:
        - `state`:

        @Return:
        """
        keycode, state, func = args[0], args[1], args[2]
        if state not in self and keycode not in self[state]:
            return
        self[state].unregister(keycode, func)
        if not self[state]: # if blank
            del self[state]


* Sat 15 Mar 2014 08:30:04 AM JST
sendkey
* Sat 15 Mar 2014 08:30:16 AM JST
sendkey.
* Sat 15 Mar 2014 08:30:23 AM JST
sendkey.
* Sat 15 Mar 2014 08:37:40 AM JST
regist_
* Sat 15 Mar 2014 08:37:51 AM JST
regist_
* Sat 15 Mar 2014 08:41:01 AM JST

* Sat 15 Mar 2014 08:41:01 AM JST

* Sat 15 Mar 2014 08:41:02 AM JST
    @dispatch.generic()

* Sat 15 Mar 2014 08:41:14 AM JST
unregist_
* Sat 15 Mar 2014 08:45:16 AM JST
    def keypress_unregister(self, *args):
        r"""SUMMARY

        unregist_keypress(*args)

        @Arguments:
        - `*args`:

        @Return:
        """
        if xproto.KeyPressEvent not in self:
            return
        self[xproto.KeyPressEvent].unregister(*args)
        if not self[xproto.KeyPressEvent]:
            del self[xproto.KeyPressEvent]

* Sat 15 Mar 2014 08:45:31 AM JST
KeyReleaseEvent
* Sat 15 Mar 2014 08:47:30 AM JST
EventDispatcher
* Sat 15 Mar 2014 08:52:41 AM JST
Event
* Sat 15 Mar 2014 08:52:51 AM JST
xcb.xproto.KeyPressEvent
* Sat 15 Mar 2014 08:56:44 AM JST
from 
* Sat 15 Mar 2014 08:58:58 AM JST
regist_
* Sat 15 Mar 2014 08:59:06 AM JST
regist_
* Sat 15 Mar 2014 09:01:18 AM JST
'xB2xIIIIhhhhHBx'
* Sat 15 Mar 2014 09:03:44 AM JST
'xB2xIIIIhhhhHBx'
* Sat 15 Mar 2014 09:03:51 AM JST
eventst
* Sat 15 Mar 2014 03:32:29 PM JST
0: Hooks([<function tes1 at 0x9cf4ca4>])}, 2: KeycodeDispatcher{10: Hooks([<function tes1 at 0x9cf4ca4>])}, 18: KeycodeDispatcher{10: Hooks([<function tes1 at 0x9cf4ca4>])}}}

In [23]: ed.keypress_unregister(10, tes1)

In [24]: ek
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-24-6e2fa3900a0f> in <module>()
----> 1 ek

NameError: name 'ek' is not defined

In [25]: ed
Out[25]: EventDispatcher{}

In [26]: 
* Sat 15 Mar 2014 04:31:32 PM JST
down
* Sat 15 Mar 2014 04:34:55 PM JST

* Sat 15 Mar 2014 04:35:10 PM JST
ctrl
* Sat 15 Mar 2014 04:35:58 PM JST
mod1=alt
mod2=numlock
mod3=hiper
mod4=super
mod5=hellohello
* Sat 15 Mar 2014 04:36:12 PM JST
hellohello
* Sat 15 Mar 2014 04:36:38 PM JST
EventMask
* Sat 15 Mar 2014 04:37:23 PM JST
ModMask
* Sat 15 Mar 2014 04:37:39 PM JST
Control
* Sat 15 Mar 2014 04:37:51 PM JST
xcb.xproto.ModMask
* Sat 15 Mar 2014 04:40:05 PM JST
window = CON.ext.properties.net_active_window(482)[0]
* Sat 15 Mar 2014 04:40:07 PM JST
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('press10_mod1').sendkeys(window=window)

* Sat 15 Mar 2014 04:40:29 PM JST

* Sat 15 Mar 2014 04:40:29 PM JST

* Sat 15 Mar 2014 04:40:29 PM JST
        print(dir(event))

* Sat 15 Mar 2014 04:41:50 PM JST

* Sat 15 Mar 2014 04:41:55 PM JST
control
* Sat 15 Mar 2014 04:43:01 PM JST
to_keycode()
* Sat 15 Mar 2014 04:46:47 PM JST
xcb.xproto.ModMask.Control
* Sat 15 Mar 2014 04:46:52 PM JST
control_k
* Sat 15 Mar 2014 04:49:54 PM JST
press_control_k
* Sat 15 Mar 2014 04:55:59 PM JST

* Sat 15 Mar 2014 04:56:00 PM JST

* Sat 15 Mar 2014 04:56:00 PM JST
# dispatch.keypress_register(control, control_l)

* Sat 15 Mar 2014 04:56:01 PM JST

* Sat 15 Mar 2014 04:56:01 PM JST

* Sat 15 Mar 2014 04:56:01 PM JST
# grab_key(ROOT, 37, 0)

* Sat 15 Mar 2014 04:56:03 PM JST

* Sat 15 Mar 2014 04:56:03 PM JST

* Sat 15 Mar 2014 04:56:03 PM JST
# control = sendkey.Keycode(37, 0)

* Sat 15 Mar 2014 05:02:11 PM JST

* Sat 15 Mar 2014 05:02:11 PM JST

* Sat 15 Mar 2014 05:02:11 PM JST
# d = sendkeys.Display()

* Sat 15 Mar 2014 05:31:30 PM JST

* Sat 15 Mar 2014 05:31:30 PM JST

* Sat 15 Mar 2014 05:31:30 PM JST
# import sendkeys

* Sat 15 Mar 2014 05:50:26 PM JST
Keycode(111, state=0)
* Sat 15 Mar 2014 05:51:18 PM JST
press
* Sat 15 Mar 2014 05:51:46 PM JST

* Sat 15 Mar 2014 05:51:46 PM JST

* Sat 15 Mar 2014 05:51:47 PM JST
    # sendkey.Keycode(111, state=0).sendkeys(window=window)

* Sat 15 Mar 2014 05:57:40 PM JST
press_control_k
* Sat 15 Mar 2014 05:59:24 PM JST
press_control_k
* Sat 15 Mar 2014 06:05:25 PM JST
Down
* Sat 15 Mar 2014 10:19:14 PM JST
xcb.xproto.FocusOutEvent
* Sat 15 Mar 2014 10:19:24 PM JST
xcb.xproto.FocusInEvent
* Sat 15 Mar 2014 10:20:47 PM JST
ButtonPress
* Sat 15 Mar 2014 10:20:50 PM JST
ButtonRelease
* Sat 15 Mar 2014 10:20:54 PM JST
MotionNotify
* Sat 15 Mar 2014 10:20:57 PM JST
EnterLeave
* Sat 15 Mar 2014 10:21:02 PM JST
EnterNotify
* Sat 15 Mar 2014 10:21:06 PM JST
LeaveNotify
* Sat 15 Mar 2014 10:21:12 PM JST
Expose
* Sat 15 Mar 2014 10:21:26 PM JST
GraphicsExpose
* Sat 15 Mar 2014 10:21:31 PM JST
NoExpose
* Sat 15 Mar 2014 10:21:36 PM JST
VisibilityNotify
* Sat 15 Mar 2014 10:21:41 PM JST
CreateNotify
* Sat 15 Mar 2014 10:21:46 PM JST
DestroyNotify
* Sat 15 Mar 2014 10:21:50 PM JST
UnmapNotify
* Sat 15 Mar 2014 10:21:55 PM JST
MapNotify
* Sat 15 Mar 2014 10:22:01 PM JST
MapRequest
* Sat 15 Mar 2014 10:22:05 PM JST
ReparentNotify
* Sat 15 Mar 2014 10:22:10 PM JST
ConfigureNotify
* Sat 15 Mar 2014 10:22:14 PM JST
ConfigureRequest
* Sat 15 Mar 2014 10:22:19 PM JST
GravityNotify
* Sat 15 Mar 2014 10:22:23 PM JST
ResizeRequest
* Sat 15 Mar 2014 10:22:31 PM JST
Circulate
* Sat 15 Mar 2014 10:22:37 PM JST
CirculateNotify
* Sat 15 Mar 2014 10:22:41 PM JST
CirculateRequest
* Sat 15 Mar 2014 10:22:45 PM JST
PropertyNotify
* Sat 15 Mar 2014 10:22:52 PM JST
SelectionClear
* Sat 15 Mar 2014 10:22:57 PM JST
SelectionRequest
* Sat 15 Mar 2014 10:23:01 PM JST
SelectionNotify
* Sat 15 Mar 2014 10:23:08 PM JST
ColormapNotify
* Sat 15 Mar 2014 10:23:15 PM JST
MappingNotify
* Sat 15 Mar 2014 10:23:24 PM JST
ClientMessage
* Sat 15 Mar 2014 10:23:28 PM JST
KeymapNotify
* Sat 15 Mar 2014 10:23:37 PM JST
    X.KeyPress:         KeyPress,
    X.KeyRelease:       KeyRelease,
    X.ButtonPress:      ButtonPress,
    X.ButtonRelease:    ButtonRelease,
    X.MotionNotify:     MotionNotify,
    X.EnterNotify:      EnterNotify,
    X.LeaveNotify:      LeaveNotify,
    X.FocusIn:          FocusIn,
    X.FocusOut:         FocusOut,
    X.KeymapNotify:     KeymapNotify,
    X.Expose:           Expose,
    X.GraphicsExpose:   GraphicsExpose,
    X.NoExpose:         NoExpose,
    X.VisibilityNotify: VisibilityNotify,
    X.CreateNotify:     CreateNotify,
    X.DestroyNotify:    DestroyNotify,
    X.UnmapNotify:      UnmapNotify,
    X.MapNotify:        MapNotify,
    X.MapRequest:       MapRequest,
    X.ReparentNotify:   ReparentNotify,
    X.ConfigureNotify:  ConfigureNotify,
    X.ConfigureRequest: ConfigureRequest,
    X.GravityNotify:    GravityNotify,
    X.ResizeRequest:    ResizeRequest,
    X.CirculateNotify:  CirculateNotify,
    X.CirculateRequest: CirculateRequest,
    X.PropertyNotify:   PropertyNotify,
    X.SelectionClear:   SelectionClear,
    X.SelectionRequest: SelectionRequest,
    X.SelectionNotify:  SelectionNotify,
    X.ColormapNotify:   ColormapNotify,
    X.ClientMessage:    ClientMessage,
    X.MappingNotify:    MappingNotify,

* Sun 16 Mar 2014 01:43:14 AM JST
FocusOut
* Sun 16 Mar 2014 02:07:33 AM JST
event.event
* Sun 16 Mar 2014 02:07:52 AM JST
event.mode
* Sun 16 Mar 2014 02:08:06 AM JST
            print('detail: {}'.format(event.detail))
            print('event:  {}'.format(event.event))
            print('mode:   {}'.format(event.mode))

* Sun 16 Mar 2014 02:52:36 AM JST
MotionNotifyEvent
* Sun 16 Mar 2014 02:54:24 AM JST
ButtonMotion
* Sun 16 Mar 2014 02:54:28 AM JST
xcb.xproto.EventMask.ButtonMotion
* Sun 16 Mar 2014 02:54:42 AM JST
D xcb.xproto.EventMask.ButtonMotion
* Sun 16 Mar 2014 02:58:12 AM JST
ButtonMotion
* Sun 16 Mar 2014 02:58:23 AM JST
xcb.xproto.EventMask.ButtonMotion
* Sun 16 Mar 2014 03:01:14 AM JST
PointerMotion
* Sun 16 Mar 2014 04:34:56 AM JST
        if xproto.KeyPressEvent not in self:
            self[xproto.KeyPressEvent] = KeyEventDispatcher()

* Sun 16 Mar 2014 04:35:03 AM JST
KeyPressEvent
* Sun 16 Mar 2014 04:36:08 AM JST
self[xproto.KeyPressEvent].register(*args)
* Sun 16 Mar 2014 04:36:19 AM JST
self[xproto.FocusInEvent]
* Sun 16 Mar 2014 04:36:40 AM JST
register
* Sun 16 Mar 2014 04:37:31 AM JST
args
* Sun 16 Mar 2014 04:37:38 AM JST
.append(*args)
* Sun 16 Mar 2014 04:37:54 AM JST
        if xproto.FocusInEvent not in self:
            self[xproto.FocusInEvent] = Hooks()
        return self[xproto.FocusInEvent]

* Sun 16 Mar 2014 04:38:16 AM JST
args
* Sun 16 Mar 2014 04:47:04 AM JST
MotionNotifyEvent
* Sun 16 Mar 2014 04:47:23 AM JST
NoExposureEvent
* Sun 16 Mar 2014 04:50:44 AM JST
    2 : KeyPressEvent,
    3 : KeyReleaseEvent,
    4 : ButtonPressEvent,
    5 : ButtonReleaseEvent,
    6 : MotionNotifyEvent,
    7 : EnterNotifyEvent,
    8 : LeaveNotifyEvent,
    9 : FocusInEvent,
    10 : FocusOutEvent,
    11 : KeymapNotifyEvent,
    12 : ExposeEvent,
    13 : GraphicsExposureEvent,
    14 : NoExposureEvent,
    15 : VisibilityNotifyEvent,
    16 : CreateNotifyEvent,
    17 : DestroyNotifyEvent,
    18 : UnmapNotifyEvent,
    19 : MapNotifyEvent,
    20 : MapRequestEvent,
    21 : ReparentNotifyEvent,
    22 : ConfigureNotifyEvent,
    23 : ConfigureRequestEvent,
    24 : GravityNotifyEvent,
    25 : ResizeRequestEvent,
    26 : CirculateNotifyEvent,
    27 : CirculateRequestEvent,
    28 : PropertyNotifyEvent,
    29 : SelectionClearEvent,
    30 : SelectionRequestEvent,
    31 : SelectionNotifyEvent,
    32 : ColormapNotifyEvent,
    33 : ClientMessageEvent,
    34 : MappingNotifyEvent,

* Sun 16 Mar 2014 04:51:36 AM JST
funcion
* Sun 16 Mar 2014 04:53:12 AM JST
        if xproto.FocusInEvent not in self:
            self[xproto.FocusInEvent] = Hooks()
        return self[xproto.FocusInEvent]

* Sun 16 Mar 2014 04:53:59 AM JST
        if xproto.FocusInEvent not in self:
            self[xproto.FocusInEvent] = Hooks()
        return self[xproto.FocusInEvent]

* Sun 16 Mar 2014 04:54:34 AM JST
_get_event_property
* Sun 16 Mar 2014 05:06:08 AM JST
UnmapNotifyEvent
* Sun 16 Mar 2014 05:06:57 AM JST
        
* Sun 16 Mar 2014 05:07:16 AM JST
MapNotifyEvent
* Sun 16 Mar 2014 05:07:22 AM JST
        
* Sun 16 Mar 2014 05:07:22 AM JST
ReparentNotifyEvent
* Sun 16 Mar 2014 05:07:28 AM JST
        
* Sun 16 Mar 2014 05:07:51 AM JST
ConfigureNotifyEvent
* Sun 16 Mar 2014 05:07:56 AM JST
        
* Sun 16 Mar 2014 05:07:56 AM JST
t
* Sun 16 Mar 2014 05:08:16 AM JST
        
* Sun 16 Mar 2014 05:08:16 AM JST
ResizeRequestEvent
* Sun 16 Mar 2014 05:08:32 AM JST
ConfigureRequestEvent
* Sun 16 Mar 2014 05:08:40 AM JST
        
* Sun 16 Mar 2014 05:08:40 AM JST
GravityNotifyEvent
* Sun 16 Mar 2014 05:08:48 AM JST
GravityNotifyEvent
* Sun 16 Mar 2014 05:08:52 AM JST
        
* Sun 16 Mar 2014 05:09:08 AM JST
ResizeRequestEvent
* Sun 16 Mar 2014 05:09:10 AM JST
        
* Sun 16 Mar 2014 05:09:10 AM JST
CirculateNotifyEvent
* Sun 16 Mar 2014 05:09:15 AM JST
CirculateNotifyEvent
* Sun 16 Mar 2014 05:09:18 AM JST
        
* Sun 16 Mar 2014 05:09:18 AM JST
CirculateRequestEvent
* Sun 16 Mar 2014 05:09:25 AM JST
SelectionClearEvent
* Sun 16 Mar 2014 05:09:27 AM JST
PropertyNotifyEvent
* Sun 16 Mar 2014 05:09:28 AM JST
        
* Sun 16 Mar 2014 05:09:34 AM JST
SelectionClearEvent
* Sun 16 Mar 2014 05:09:36 AM JST
        
* Sun 16 Mar 2014 05:09:36 AM JST
SelectionRequestEvent
* Sun 16 Mar 2014 05:09:57 AM JST
SelectionRequestEvent
* Sun 16 Mar 2014 05:09:59 AM JST
        
* Sun 16 Mar 2014 05:09:59 AM JST
SelectionNotifyEvent
* Sun 16 Mar 2014 05:10:05 AM JST
SelectionNotifyEvent
* Sun 16 Mar 2014 05:10:07 AM JST
        
* Sun 16 Mar 2014 05:10:17 AM JST
ColormapNotifyEvent
* Sun 16 Mar 2014 05:10:24 AM JST
        
* Sun 16 Mar 2014 05:10:24 AM JST
ClientMessageEvent
* Sun 16 Mar 2014 05:10:28 AM JST
ClientMessageEvent
* Sun 16 Mar 2014 05:10:29 AM JST
        
* Sun 16 Mar 2014 05:10:30 AM JST
MappingNotifyEvent
* Sun 16 Mar 2014 05:10:36 AM JST
MappingNotifyEvent
* Sun 16 Mar 2014 05:10:37 AM JST
        
* Sun 16 Mar 2014 05:12:16 AM JST
CirculateRequestEvent
* Sun 16 Mar 2014 05:12:22 AM JST
        
* Sun 16 Mar 2014 05:12:23 AM JST
PropertyNotifyEvent
* Sun 16 Mar 2014 05:59:40 AM JST
            print('\nfocus out')
            print('detail: {}'.format(event.detail))
            print('event:  {}'.format(event.event))
            print('mode:   {}'.format(event.mode))

* Sun 16 Mar 2014 06:02:17 AM JST
       #     print('\nfocus in')
        #     print('detail: {}'.format(event.detail))
        #     print('event:  {}'.format(event.event))
        #     print('mode:   {}'.format(event.mode))
 
* Sun 16 Mar 2014 06:02:53 AM JST

* Sun 16 Mar 2014 06:04:14 AM JST
print('MotionNotifyEvent')
* Sun 16 Mar 2014 06:26:32 AM JST
GrabButton
* Sun 16 Mar 2014 06:27:07 AM JST
def grab_key(window, key, modifiers):
    addmods = [
        0,
        xcb.xproto.ModMask.Lock,
        xcb.xproto.ModMask._2,
        xcb.xproto.ModMask._2 | xcb.xproto.ModMask.Lock
        ]

    # for mod in addmods:
    CON.core.GrabKey(
            True,
            window,
            modifiers | xcb.xproto.ModMask._2,
            key,
            xcb.xproto.GrabMode.Async,
            xcb.xproto.GrabMode.Async
        )

* Sun 16 Mar 2014 06:28:18 AM JST

* Sun 16 Mar 2014 06:28:18 AM JST

* Sun 16 Mar 2014 06:28:18 AM JST
            modifiers | xcb.xproto.ModMask._2,

* Sun 16 Mar 2014 06:28:31 AM JST

* Sun 16 Mar 2014 06:28:31 AM JST

* Sun 16 Mar 2014 06:28:31 AM JST
            key,

* Sun 16 Mar 2014 06:39:36 AM JST
ButtonPress
* Sun 16 Mar 2014 06:41:58 AM JST
cursor
* Sun 16 Mar 2014 06:42:15 AM JST
cursor
* Sun 16 Mar 2014 06:42:24 AM JST
button
* Sun 16 Mar 2014 06:42:46 AM JST
modifiers
* Sun 16 Mar 2014 06:42:55 AM JST
def grab_button(window, key, modifiers):
    addmods = [
        0,
        xcb.xproto.ModMask.Lock,
        xcb.xproto.ModMask._2,
        xcb.xproto.ModMask._2 | xcb.xproto.ModMask.Lock
        ]

    # for mod in addmods:
    CON.core.GrabButton(
            True, # owner_events
            window, # grab_window
            xcb.xproto.EventMask.ButtonPress, # event_mask
            xcb.xproto.GrabMode.Async, # pointer_mode
            xcb.xproto.GrabMode.Async, # keyboard_mode
            0, # confine_to
            0, # cursor
            key, # button
            modifiers | xcb.xproto.ModMask._2, # modifiers
        )

* Sun 16 Mar 2014 06:43:32 AM JST

* Sun 16 Mar 2014 06:43:32 AM JST

* Sun 16 Mar 2014 06:43:33 AM JST
            True, # owner_events

* Sun 16 Mar 2014 06:43:38 AM JST

* Sun 16 Mar 2014 06:43:38 AM JST

* Sun 16 Mar 2014 06:43:38 AM JST
            xcb.xproto.EventMask.ButtonPress, # event_mask

* Sun 16 Mar 2014 06:43:38 AM JST
            xcb.xproto.EventMask.ButtonPress, # event_mask

* Sun 16 Mar 2014 06:43:39 AM JST
            xcb.xproto.EventMask.ButtonPress, # event_mask
            xcb.xproto.GrabMode.Async, # pointer_mode

* Sun 16 Mar 2014 06:43:39 AM JST
            xcb.xproto.EventMask.ButtonPress, # event_mask
            xcb.xproto.GrabMode.Async, # pointer_mode

* Sun 16 Mar 2014 06:43:39 AM JST
            xcb.xproto.EventMask.ButtonPress, # event_mask
            xcb.xproto.GrabMode.Async, # pointer_mode
            xcb.xproto.GrabMode.Async, # keyboard_mode

* Sun 16 Mar 2014 06:43:39 AM JST
            xcb.xproto.EventMask.ButtonPress, # event_mask
            xcb.xproto.GrabMode.Async, # pointer_mode
            xcb.xproto.GrabMode.Async, # keyboard_mode

* Sun 16 Mar 2014 06:43:39 AM JST
            xcb.xproto.EventMask.ButtonPress, # event_mask
            xcb.xproto.GrabMode.Async, # pointer_mode
            xcb.xproto.GrabMode.Async, # keyboard_mode
            0, # confine_to

* Sun 16 Mar 2014 06:43:40 AM JST
            xcb.xproto.EventMask.ButtonPress, # event_mask
            xcb.xproto.GrabMode.Async, # pointer_mode
            xcb.xproto.GrabMode.Async, # keyboard_mode
            0, # confine_to

* Sun 16 Mar 2014 06:43:40 AM JST
            xcb.xproto.EventMask.ButtonPress, # event_mask
            xcb.xproto.GrabMode.Async, # pointer_mode
            xcb.xproto.GrabMode.Async, # keyboard_mode
            0, # confine_to
            0, # cursor

* Sun 16 Mar 2014 06:43:46 AM JST
grab_button
* Sun 16 Mar 2014 06:44:59 AM JST
def press10_2(*args, **kwargs):
    r"""SUMMARY

    press10()

    @Return:
    """
    print('wwwwww')
* Sun 16 Mar 2014 06:45:06 AM JST
press10_2
* Sun 16 Mar 2014 06:45:13 AM JST
wwwwww
* Sun 16 Mar 2014 06:45:22 AM JST
button_press
* Sun 16 Mar 2014 06:47:11 AM JST
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('{Left}').sendkeys(window=window)

* Sun 16 Mar 2014 06:47:14 AM JST

* Sun 16 Mar 2014 06:47:14 AM JST

* Sun 16 Mar 2014 06:47:14 AM JST
    print('button_pressed')

* Sun 16 Mar 2014 06:49:09 AM JST
def button_press(*args, **kwargs):
    r"""SUMMARY

    press10()

    @Return:
    """
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('^w').sendkeys(window=window)

* Sun 16 Mar 2014 06:49:25 AM JST
middle_button_release
* Sun 16 Mar 2014 06:49:53 AM JST

* Sun 16 Mar 2014 06:52:05 AM JST
def middle_button_release(*args, **kwargs):
    r"""SUMMARY

    press10()

    @Return:
    """
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('^w').sendkeys(window=window)

* Sun 16 Mar 2014 06:52:47 AM JST
48234543
* Sun 16 Mar 2014 06:52:54 AM JST

* Sun 16 Mar 2014 06:57:32 AM JST
def grab_button_press(window, key, modifiers):
    addmods = [
        0,
        xcb.xproto.ModMask.Lock,
        xcb.xproto.ModMask._2,
        xcb.xproto.ModMask._2 | xcb.xproto.ModMask.Lock
        ]

    # for mod in addmods:
    CON.core.GrabButton(
            True, # owner_events
            window, # grab_window
            xcb.xproto.EventMask.ButtonPress, # event_mask
            xcb.xproto.GrabMode.Async, # pointer_mode
            xcb.xproto.GrabMode.Async, # keyboard_mode
            0, # confine_to
            0, # cursor
            key, # button
            modifiers | xcb.xproto.ModMask._2, # modifiers
        )

* Sun 16 Mar 2014 06:57:50 AM JST
grab_button_press
* Sun 16 Mar 2014 06:58:02 AM JST
grab_button_release
* Sun 16 Mar 2014 07:00:59 AM JST
_release
* Sun 16 Mar 2014 07:01:43 AM JST
_release(48234543, 2, 0)

dispatch = event.EventDispatcher()
dispatch.keypress_register(code, press10)
dispatch.keypress_register(code, press10_2)
dispatch.keypress_register(code_mod1, press10_mod1)
dispatch.keypress_register(control_k, press_control_k)
# dispatch.button_press.append(button_press)
dispatch.button_release.append(middle_button_release)

CON.flush()

try:
    while 1:
        event = CON.wait_for_event()
        dispatch(event, this=dispatch)
        CON.flush()
except StopWaitEvent:
* Sun 16 Mar 2014 02:29:18 PM JST
    def _get_event_property(self, event_class):
        r"""SUMMARY

        _get_event_property(event_class)

        internal use

        @Arguments:
        - `event_class`:

        @Return:
        """
        if event_class not in self:
            self[event_class] = Hooks()
        return self[event_class]

* Sun 16 Mar 2014 02:29:50 PM JST
return self._get_event_property(xproto.ButtonPressEvent)
* Sun 16 Mar 2014 02:29:58 PM JST
ButtonPressEvent
* Sun 16 Mar 2014 02:30:13 PM JST
return self._get_event_property(xproto.KeyPressEvent)
* Sun 16 Mar 2014 02:30:24 PM JST
@property
* Sun 16 Mar 2014 03:31:59 PM JST
code = sendkey.Keycode(10, 0)
* Sun 16 Mar 2014 03:32:02 PM JST

* Sun 16 Mar 2014 03:32:02 PM JST

* Sun 16 Mar 2014 03:32:02 PM JST

* Sun 16 Mar 2014 03:32:02 PM JST

* Sun 16 Mar 2014 03:32:02 PM JST

* Sun 16 Mar 2014 03:32:07 PM JST
code = sendkey.Keycode(10, 0)
* Sun 16 Mar 2014 03:53:13 PM JST
def update(d, u):
    for k, v in u.iteritems():
        if isinstance(v, collections.Mapping):
            r = update(d.get(k, {}), v)
            d[k] = r
        else:
            d[k] = u[k]
    return d
* Sun 16 Mar 2014 03:54:06 PM JST
Mapping
* Sun 16 Mar 2014 03:54:06 PM JST
collections.Mapping
* Sun 16 Mar 2014 03:56:12 PM JST
def update(d, u):
    for k, v in u.iteritems():
        if isinstance(v, collections.Mapping):
            r = update(d.get(k, {}), v)
            d[k] = r
        else:
            d[k] = u[k]
    return d
* Sun 16 Mar 2014 03:56:17 PM JST
collections.
* Sun 16 Mar 2014 03:56:24 PM JST
collections.Mapping
* Sun 16 Mar 2014 03:58:04 PM JST
MutableMapping
* Sun 16 Mar 2014 04:00:30 PM JST
Mapping
* Sun 16 Mar 2014 04:02:31 PM JST
DispatcherAbstract
* Sun 16 Mar 2014 04:03:11 PM JST
collections.
* Sun 16 Mar 2014 04:03:26 PM JST
deque
* Sun 16 Mar 2014 04:10:32 PM JST
code1 = sendkey.Keycode(10, 0)
* Sun 16 Mar 2014 04:10:53 PM JST
kd2=event.KeyEventDispatcher()
kd2.register(code, tes2)

* Sun 16 Mar 2014 04:11:04 PM JST
def tes2(*args, **kwargs):
        print('tes2')

* Sun 16 Mar 2014 04:11:19 PM JST
def tes(*args, **kwargs):
        print('hello')

* Sun 16 Mar 2014 04:11:49 PM JST
kd=event.KeyEventDispatcher()
* Sun 16 Mar 2014 04:12:00 PM JST
kd.register(code, tes)
* Sun 16 Mar 2014 04:12:11 PM JST
code = sendkey.Keycode(10, 0)
* Sun 16 Mar 2014 04:12:37 PM JST
def tes1(*args, **kwargs):
    print('hello')

def tes2(*args, **kwargs):
    print('tes2')


code1 = sendkey.Keycode(10, 0)
code2 = sendkey.Keycode(10, 0)

kd1=event.KeyEventDispatcher()
kd1.register(code1, tes)

kd2=event.KeyEventDispatcher()
kd2.register(code2, tes2)

* Sun 16 Mar 2014 04:13:12 PM JST
code1 = sendkey.Keycode(10, 0)
code2 = sendkey.Keycode(10, 0)

kd1=event.KeyEventDispatcher()
kd1.register(code1, tes)

kd2=event.KeyEventDispatcher()
kd2.register(code2, tes2)

* Sun 16 Mar 2014 04:13:21 PM JST
kd1.register(code1, tes1)
* Sun 16 Mar 2014 04:27:57 PM JST

* Sun 16 Mar 2014 04:27:58 PM JST

* Sun 16 Mar 2014 04:27:58 PM JST
            print('DEBUG-1-event.py')

* Sun 16 Mar 2014 04:28:09 PM JST
KeyEventDispatcher
* Sun 16 Mar 2014 04:28:34 PM JST
kd1=event.KeyEventDispatcher()
kd1.register(code1, tes1)

kd2=event.KeyEventDispatcher()
kd2.register(code2, tes2)

* Sun 16 Mar 2014 04:29:21 PM JST

* Sun 16 Mar 2014 04:29:21 PM JST

* Sun 16 Mar 2014 04:29:22 PM JST
            print('DEBUG-2-event.py')

* Sun 16 Mar 2014 04:33:50 PM JST
kd1=event.KeyEventDispatcher()
kd1.register(code1, tes1)

kd2=event.KeyEventDispatcher()
kd2.register(code2, tes2)

* Sun 16 Mar 2014 04:35:19 PM JST
code1 = sendkey.Keycode(10, 0)
code2 = sendkey.Keycode(11, 0)

kd1=event.KeyEventDispatcher()
kd1.register(code1, tes1)

kd2=event.KeyEventDispatcher()
kd2.register(code2, tes2)

* Sun 16 Mar 2014 11:16:59 PM JST
def recursive_update(adict, bdict, default=dict):
    for key, value in bdict.iteritems():
        if isinstance(value, Mapping):
            ret = recursive_update(adict.get(key, default()), value)
            adict[key] = ret
        else:
            adict[key] = bdict[key]
    return adict

* Sun 16 Mar 2014 11:17:09 PM JST

* Sun 16 Mar 2014 11:17:09 PM JST

* Sun 16 Mar 2014 11:17:09 PM JST
from collections import Mapping

* Sun 16 Mar 2014 11:17:34 PM JST
SUMMARY
* Sun 16 Mar 2014 11:18:07 PM JST

* Sun 16 Mar 2014 11:18:07 PM JST

* Sun 16 Mar 2014 11:18:07 PM JST
# from dispatcher import TypeDispatcher as EventDispatcher

* Sun 16 Mar 2014 11:18:29 PM JST
recursive_update
* Sun 16 Mar 2014 11:20:46 PM JST
code1 = sendkey.Keycode(10, 0)
code2 = sendkey.Keycode(11, 0)

kd1=event.KeyEventDispatcher()
kd1.register(code1, tes1)

kd2=event.KeyEventDispatcher()
kd2.register(code2, tes2)

* Sun 16 Mar 2014 11:21:44 PM JST
KeycodeDispatcher
* Sun 16 Mar 2014 11:21:53 PM JST
default=
* Sun 16 Mar 2014 11:22:20 PM JST
kd1=event.KeyEventDispatcher()
* Sun 16 Mar 2014 11:22:26 PM JST
kd2=event.KeyEventDispatcher()
kd2.register(code2, tes2)

* Sun 16 Mar 2014 11:25:25 PM JST
        if not isinstance(other, KeyEventDispatcher):
            raise StandardError()

* Sun 16 Mar 2014 11:25:31 PM JST
recursive_update(self._data, other, KeycodeDispatcher)
* Sun 16 Mar 2014 11:25:55 PM JST

* Sun 16 Mar 2014 11:25:55 PM JST

* Sun 16 Mar 2014 11:25:55 PM JST
        if not isinstance(other, KeyEventDispatcher):

* Sun 16 Mar 2014 11:25:55 PM JST
        if not isinstance(other, KeyEventDispatcher):

* Sun 16 Mar 2014 11:25:55 PM JST
        if not isinstance(other, KeyEventDispatcher):
            raise StandardError()

* Sun 16 Mar 2014 11:26:37 PM JST
kd1=event.KeyEventDispatcher()
kd1.register(code1, tes1)

kd2=event.KeyEventDispatcher()
kd2.register(code2, tes2)

* Sun 16 Mar 2014 11:28:37 PM JST
kd1=event.KeyEventDispatcher()
kd1.register(code1, tes1)

kd2=event.KeyEventDispatcher()
kd2.register(code2, tes2)

* Sun 16 Mar 2014 11:30:02 PM JST
_data = 
* Sun 16 Mar 2014 11:30:03 PM JST
self._data = 
* Sun 16 Mar 2014 11:45:45 PM JST
    def set_title_keymap(self, key, value):
        r"""SUMMARY

        set_title_keymap(key, value)

        @Arguments:
        - `key`:
        - `value`:

        @Return:
        """
        if not isinstance(value, KeyEventDispatcher):
            # TODO: (Atami) [2014/03/16]
            raise StandardError()
        self.window_title_map[key] = value

* Sun 16 Mar 2014 11:45:47 PM JST
        if not isinstance(value, KeyEventDispatcher):
            # TODO: (Atami) [2014/03/16]
            raise StandardError()
        self.window_title_map[key] = value

* Sun 16 Mar 2014 11:45:53 PM JST
window_title_map
* Sun 16 Mar 2014 11:46:08 PM JST
window_class_map
* Mon 17 Mar 2014 04:28:04 AM JST
class KeymapHolder(object):
    r"""SUMMARY
    """
    global_map = EventDispatcher()
    window_title_map = {}
    window_class_map = {}

    def get_title_keymap(self, key, default=None):
        r"""SUMMARY

        get_title_keymap(key)

        @Arguments:
        - `key`:

        @Return:
        """
        return self.window_title_map.get(key, default)

    def get_wmclass_keymap(self, key, default=None):
        r"""SUMMARY

        get_wmclass_keymap(key, default=None)

        @Arguments:
        - `key`:
        - `default`:

        @Return:
        """
        return self.window_title_map.get(key, default)

    def set_title_keymap(self, key, value):
        r"""SUMMARY

        set_title_keymap(key, value)

        @Arguments:
        - `key`:
        - `value`:

        @Return:
        """
        if not isinstance(value, KeyEventDispatcher):
            # TODO: (Atami) [2014/03/16]
            raise StandardError()
        self.window_title_map[key] = value

    def set_wmclass_keymap(self, key, value):
        r"""SUMMARY

        set_wmclass_keymap(key, value)

        @Arguments:
        - `key`:
        - `value`:

        @Return:
        """
        if not isinstance(value, KeyEventDispatcher):
            # TODO: (Atami) [2014/03/16]
            raise StandardError()
        self.window_class_map[key] = value




* Mon 17 Mar 2014 04:28:28 AM JST
globa
* Mon 17 Mar 2014 04:55:38 AM JST
keypress_
* Mon 17 Mar 2014 04:55:40 AM JST
keypress_
* Mon 17 Mar 2014 04:55:43 AM JST
keypress_
* Mon 17 Mar 2014 04:55:46 AM JST
keypress_
* Mon 17 Mar 2014 04:56:20 AM JST
dispatch
* Mon 17 Mar 2014 05:11:54 AM JST
keymap = event.KeyEventDispatcher()
* Mon 17 Mar 2014 05:12:01 AM JST
keymap.register(code, press10)
* Mon 17 Mar 2014 05:12:03 AM JST
press10
* Mon 17 Mar 2014 05:12:55 AM JST
dispatcher = event.EventDispatcher()
* Mon 17 Mar 2014 05:13:03 AM JST
dispatcher.keypress.append(keymap)
* Mon 17 Mar 2014 05:25:09 AM JST
deque
* Mon 17 Mar 2014 05:37:14 AM JST
class EventHooks(Hooks):
    r"""SUMMARY
    """

    def remove_by_type(self, type_):
        r"""SUMMARY

        remove_by_type(type_)

        @Arguments:
        - `type_`:

        @Return:
        """
        for i, value in enumerate(self[:]):
            if type(value) == type_:
                del self[i]

* Mon 17 Mar 2014 05:37:20 AM JST
EventHooks
* Mon 17 Mar 2014 05:38:23 AM JST

* Mon 17 Mar 2014 05:38:23 AM JST

* Mon 17 Mar 2014 05:38:23 AM JST
    _keymap = None

* Mon 17 Mar 2014 05:41:27 AM JST
    def __call__(self, *args, **kwargs):
        self.run_hooks(*args, **kwargs)

* Mon 17 Mar 2014 05:42:47 AM JST
KeyEventHooks
* Mon 17 Mar 2014 05:43:45 AM JST
        if event_class not in self:
            self[event_class] = Hooks()
        return self[event_class]

* Mon 17 Mar 2014 05:43:56 AM JST
KeyEventHooks
* Mon 17 Mar 2014 05:43:58 AM JST
Hooks
* Mon 17 Mar 2014 05:44:03 AM JST
xproto.KeyPressEvent
* Mon 17 Mar 2014 05:44:13 AM JST

* Mon 17 Mar 2014 05:44:13 AM JST

* Mon 17 Mar 2014 05:44:13 AM JST
        return self._get_event_hook()

* Mon 17 Mar 2014 05:44:22 AM JST
        if xproto.KeyPressEvent not in self:
            self[xproto.KeyPressEvent] = KeyEventHooks()
        return self[xproto.KeyPressEvent]

* Mon 17 Mar 2014 05:44:29 AM JST
KeyPressEvent
* Mon 17 Mar 2014 05:44:41 AM JST
KeyPress
* Mon 17 Mar 2014 05:45:06 AM JST

* Mon 17 Mar 2014 05:45:06 AM JST

* Mon 17 Mar 2014 05:45:06 AM JST
        return self._get_event_hook(xproto.KeyPressEvent)

* Mon 17 Mar 2014 05:54:01 AM JST
super(KeyEventHooks, self).__repr__()
* Mon 17 Mar 2014 05:54:41 AM JST
KeyEventHooks
* Mon 17 Mar 2014 05:56:42 AM JST
                  
* Mon 17 Mar 2014 05:58:48 AM JST
.replace('KeyEventHooks',  '', 1)
* Mon 17 Mar 2014 05:58:48 AM JST
                  .replace('KeyEventHooks',  '', 1)
* Mon 17 Mar 2014 06:03:17 AM JST
append
* Mon 17 Mar 2014 06:06:38 AM JST
keymap = event.KeyEventDispatcher()
* Mon 17 Mar 2014 06:08:33 AM JST

* Mon 17 Mar 2014 06:08:41 AM JST
code_mod1
* Mon 17 Mar 2014 06:08:52 AM JST
keycode2
* Mon 17 Mar 2014 06:08:58 AM JST

* Mon 17 Mar 2014 06:09:17 AM JST
keymap = event.KeyEventDispatcher()
* Mon 17 Mar 2014 06:11:17 AM JST

* Mon 17 Mar 2014 06:11:18 AM JST

* Mon 17 Mar 2014 06:11:18 AM JST
keycode2 = sendkey.Keycode(11, 0)

* Mon 17 Mar 2014 06:11:29 AM JST

* Mon 17 Mar 2014 06:11:29 AM JST

* Mon 17 Mar 2014 06:11:29 AM JST
keymap2 = event.KeyEventDispatcher()

* Mon 17 Mar 2014 06:12:09 AM JST
keymap.register(keycode1, press10)
* Mon 17 Mar 2014 06:12:19 AM JST
press10
* Mon 17 Mar 2014 06:13:09 AM JST
press10_2
* Mon 17 Mar 2014 06:13:45 AM JST
keycode1 = sendkey.Keycode(10, 0)
code_mod1 = sendkey.Keycode(10, 1)

control_k = sendkey.Keycode(45, xcb.xproto.ModMask.Control)


# mod1=alt
# mod2=numlock
# mod3=hiper
# mod4=super
# mod5=

grab_key(ROOT, 10, 0)
grab_key(ROOT, 11, 0)

grab_key(ROOT, 10, 1)
grab_key(ROOT, 45, xcb.xproto.ModMask.Control) # C-k

grab_button_release(ROOT, 2, 0)
grab_button_release(48234543, 2, 0)

keymap = event.KeyEventDispatcher()
keymap.register(keycode1, press10)
# keymap.register(code, press10_2)
keymap.register(code_mod1, press10_mod1)
keymap.register(control_k, press_control_k)
# dispatch.button_press.append(button_press)
# dispatch.button_release.append(middle_button_release)


dispatcher = event.EventDispatcher()
dispatcher.keypress.set_keymap(keymap)

* Mon 17 Mar 2014 06:14:45 AM JST
grab_key(ROOT, 10, 0)
grab_key(ROOT, 11, 0)

grab_key(ROOT, 10, 1)
grab_key(ROOT, 45, xcb.xproto.ModMask.Control) # C-k

grab_button_release(ROOT, 2, 0)
grab_button_release(48234543, 2, 0)

* Mon 17 Mar 2014 06:15:13 AM JST
keycode1 = sendkey.Keycode(10, 0)
code_mod1 = sendkey.Keycode(10, 1)

control_k = sendkey.Keycode(45, xcb.xproto.ModMask.Control)

* Mon 17 Mar 2014 06:15:24 AM JST
keymap = event.KeyEventDispatcher()
keymap.register(keycode1, press10)
# keymap.register(code, press10_2)
keymap.register(code_mod1, press10_mod1)
keymap.register(control_k, press_control_k)
# dispatch.button_press.append(button_press)
# dispatch.button_release.append(middle_button_release)

* Mon 17 Mar 2014 06:15:58 AM JST

* Mon 17 Mar 2014 06:16:01 AM JST
press10
* Mon 17 Mar 2014 06:19:08 AM JST
grab_key(ROOT, 10, 0)
grab_key(ROOT, 11, 0)

grab_key(ROOT, 10, 1)
grab_key(ROOT, 45, xcb.xproto.ModMask.Control) # C-k

grab_button_release(ROOT, 2, 0)
grab_button_release(48234543, 2, 0)


# keycode
keycode2 = sendkey.Keycode(11, 0)
keycode1 = sendkey.Keycode(10, 0)
keycode_mod1 = sendkey.Keycode(10, 1)

keycodecontrol_k = sendkey.Keycode(45, xcb.xproto.ModMask.Control)


# keymap
keymap = event.KeyEventDispatcher()
keymap.register(keycode1, press10)
keymap.register(keycode2, replace_keymap)
# keymap.register(code, press10_2)
keymap.register(keycode_mod1, press10_mod1)
keymap.register(keycodecontrol_k, press_control_k)
# dispatch.button_press.append(button_press)
# dispatch.button_release.append(middle_button_release)

keymap2 = event.KeyEventDispatcher()
keymap2.register(keycode1, press10_2)

# mod1=alt
# mod2=numlock
# mod3=hiper
# mod4=super
# mod5=

dispatcher = event.EventDispatcher()
dispatcher.keypress.set_keymap(keymap)



* Mon 17 Mar 2014 06:23:27 AM JST
        if xproto.KeyReleaseEvent not in self:
            self[xproto.KeyReleaseEvent] = KeyEventHooks()
        return self[xproto.KeyReleaseEvent]

* Mon 17 Mar 2014 06:23:34 AM JST
xproto.ButtonPressEvent
* Mon 17 Mar 2014 06:23:56 AM JST

* Mon 17 Mar 2014 06:23:56 AM JST

* Mon 17 Mar 2014 06:23:56 AM JST
        return self._get_event_hook(xproto.ButtonPressEvent)

* Mon 17 Mar 2014 06:24:02 AM JST
        if xproto.ButtonPressEvent not in self:
            self[xproto.ButtonPressEvent] = KeyEventHooks()
        return self[xproto.ButtonPressEvent]

* Mon 17 Mar 2014 06:24:11 AM JST
xproto.ButtonReleaseEvent
* Mon 17 Mar 2014 06:24:24 AM JST

* Mon 17 Mar 2014 06:24:24 AM JST

* Mon 17 Mar 2014 06:24:24 AM JST
        return self._get_event_hook(xproto.ButtonReleaseEvent)

* Mon 17 Mar 2014 06:25:27 AM JST
Hooks
* Mon 17 Mar 2014 06:25:43 AM JST
return self._get_event_hook(xproto.MotionNotifyEvent)
* Mon 17 Mar 2014 06:25:55 AM JST
xproto.KeyPressEvent
* Mon 17 Mar 2014 06:26:09 AM JST
KeyEventHooks
* Mon 17 Mar 2014 06:26:27 AM JST
return self._get_event_hook(xproto.KeyPressEvent, default=KeyEventHooks)
* Mon 17 Mar 2014 06:26:35 AM JST
KeyReleaseEvent
* Mon 17 Mar 2014 06:26:53 AM JST
return self._get_event_hook(xproto.KeyPressEvent, default=KeyEventHooks)
* Mon 17 Mar 2014 06:27:00 AM JST
ButtonPressEvent
* Mon 17 Mar 2014 06:27:12 AM JST
default=
* Mon 17 Mar 2014 06:27:17 AM JST
default=
* Mon 17 Mar 2014 06:27:20 AM JST
            
* Mon 17 Mar 2014 06:27:25 AM JST
default=
* Mon 17 Mar 2014 06:27:36 AM JST
return self._get_event_hook(xproto.ButtonPressEvent, KeyEventHooks)
* Mon 17 Mar 2014 06:27:42 AM JST
KeyEventHooks
* Mon 17 Mar 2014 06:27:47 AM JST
ButtonReleaseEvent
* Mon 17 Mar 2014 06:36:02 AM JST
EventHooks
* Tue 18 Mar 2014 01:57:44 AM JST
    def ungrab_key(self, ):
        r"""SUMMARY

        ungrab_key()

        @Return:
        """


* Tue 18 Mar 2014 01:58:11 AM JST
    def grab_key(self, key, modifiers):
        r"""SUMMARY

        grab_key(key, modifiers)

        @Arguments:
        - `key`:
        - `modifiers`:

        @Return:
        """
        addmods = [0, xproto.ModMask.Lock,
                   xproto.ModMask._2,
                   xproto.ModMask._2 | xproto.ModMask.Lock]
        for mod in addmods:
            self.core.GrabKey(True, self.id,
                              modifiers | mod,
                              key,
                              xproto.GrabMode.Async,
                              xproto.GrabMode.Async)


* Tue 18 Mar 2014 01:58:57 AM JST
    addmods = [
        0,
        xcb.xproto.ModMask.Lock,
        xcb.xproto.ModMask._2,
        xcb.xproto.ModMask._2 | xcb.xproto.ModMask.Lock
    ]

    for mod in addmods:
        CON.core.UngrabKey(
            key,
            window,
            modifiers | mod,
        )

* Tue 18 Mar 2014 01:59:15 AM JST
        
* Tue 18 Mar 2014 01:59:45 AM JST
window
* Tue 18 Mar 2014 01:59:52 AM JST
CON
* Tue 18 Mar 2014 01:59:59 AM JST
xcb.
* Tue 18 Mar 2014 02:00:00 AM JST
xcb.
* Tue 18 Mar 2014 02:00:02 AM JST
xcb.
* Tue 18 Mar 2014 02:00:04 AM JST
xcb.
* Tue 18 Mar 2014 02:00:08 AM JST
                   
* Tue 18 Mar 2014 02:01:07 AM JST
    CON.core.GrabButton(
            True, # owner_events
            window, # grab_window
            xcb.xproto.EventMask.ButtonPress, # event_mask
            xcb.xproto.GrabMode.Async, # pointer_mode
            xcb.xproto.GrabMode.Async, # keyboard_mode
            0, # confine_to
            0, # cursor
            key, # button
            modifiers | xcb.xproto.ModMask._2, # modifiers
        )

* Tue 18 Mar 2014 02:01:15 AM JST
CON
* Tue 18 Mar 2014 02:01:40 AM JST
window
* Tue 18 Mar 2014 02:01:44 AM JST
xcb.
* Tue 18 Mar 2014 02:01:45 AM JST
xcb.
* Tue 18 Mar 2014 02:01:46 AM JST
xcb.
* Tue 18 Mar 2014 02:02:00 AM JST
xcb.
* Tue 18 Mar 2014 02:02:47 AM JST
    def grab_button_press(self, key, modifiers):
        r"""SUMMARY

        grab_button()

        @Return:
        """
        self.core.GrabButton(
            True, # owner_events
            self.id, # grab_window
            xproto.EventMask.ButtonPress, # event_mask
            xproto.GrabMode.Async, # pointer_mode
            xproto.GrabMode.Async, # keyboard_mode
            0, # confine_to
            0, # cursor
            key, # button
            modifiers | xproto.ModMask._2, # modifiers
            )

* Tue 18 Mar 2014 02:03:43 AM JST
    CON.core.UngrabButton(
            key, # button
            window, # grab_window
            modifiers | xcb.xproto.ModMask._2, # modifiers
        )

* Tue 18 Mar 2014 02:03:57 AM JST
CON
* Tue 18 Mar 2014 02:04:03 AM JST
window
* Tue 18 Mar 2014 02:04:19 AM JST
xcb.
* Tue 18 Mar 2014 02:41:09 AM JST
Connection
* Tue 18 Mar 2014 02:42:48 AM JST
        addmods = (0, xproto.ModMask.Lock,
                   xproto.ModMask._2,
                   xproto.ModMask._2 | xproto.ModMask.Lock)
        for mod in addmods:
            self.core.GrabKey(True, self.id,
                              modifiers | mod,
                              key,
                              xproto.GrabMode.Async,
                              xproto.GrabMode.Async)

* Tue 18 Mar 2014 02:42:55 AM JST
self
* Tue 18 Mar 2014 02:44:02 AM JST
modifiers
* Tue 18 Mar 2014 02:44:18 AM JST
key
* Tue 18 Mar 2014 02:44:52 AM JST
conn = Connection.get_instance(display=display)
* Tue 18 Mar 2014 02:45:02 AM JST
        addmods = (0, xproto.ModMask.Lock,
                   xproto.ModMask._2,
                   xproto.ModMask._2 | xproto.ModMask.Lock)

* Tue 18 Mar 2014 02:45:09 AM JST
        for mod in addmods:
            self.core.UngrabKey(
                key,
                self.id,
                modifiers | mod,
            )

* Tue 18 Mar 2014 02:45:15 AM JST
key
* Tue 18 Mar 2014 02:45:26 AM JST
self
* Tue 18 Mar 2014 02:45:35 AM JST
id
* Tue 18 Mar 2014 02:45:35 AM JST
self.id
* Tue 18 Mar 2014 02:45:42 AM JST
modifiers
* Tue 18 Mar 2014 02:45:57 AM JST
 # keycode
* Tue 18 Mar 2014 02:45:58 AM JST
                
* Tue 18 Mar 2014 02:45:59 AM JST
                
* Tue 18 Mar 2014 02:46:00 AM JST
                
* Tue 18 Mar 2014 02:46:02 AM JST
            
* Tue 18 Mar 2014 03:08:00 AM JST
conn = SingleConnection.get_instance(self.display)
* Tue 18 Mar 2014 03:08:38 AM JST
        addmods = (0, xproto.ModMask.Lock,
                   xproto.ModMask._2,
                   xproto.ModMask._2 | xproto.ModMask.Lock)

* Tue 18 Mar 2014 03:09:07 AM JST
        for mod in addmods:
            conn.core.GrabKey(True, window,
                              self.state | mod,
                              self._data, # keycode
                              xproto.GrabMode.Async,
                              xproto.GrabMode.Async)

* Tue 18 Mar 2014 03:09:53 AM JST
state
* Tue 18 Mar 2014 03:09:53 AM JST
self.state
* Tue 18 Mar 2014 03:10:00 AM JST
_data
* Tue 18 Mar 2014 03:10:01 AM JST
self._data
* Tue 18 Mar 2014 03:11:20 AM JST
        conn = SingleConnection.get_instance(self.display)
        addmods = (0, xproto.ModMask.Lock,
                   xproto.ModMask._2,
                   xproto.ModMask._2 | xproto.ModMask.Lock)

* Tue 18 Mar 2014 03:11:28 AM JST
        for mod in addmods:
            conn.core.UngrabKey(self._data, window, self.state | mod)

* Tue 18 Mar 2014 03:11:40 AM JST
_data
* Tue 18 Mar 2014 03:11:41 AM JST
self._data
* Tue 18 Mar 2014 03:11:45 AM JST
state
* Tue 18 Mar 2014 03:11:45 AM JST
self.state
* Tue 18 Mar 2014 03:19:36 AM JST
kc.grab_key(482)
* Tue 18 Mar 2014 03:35:16 AM JST
Keycode
* Tue 18 Mar 2014 03:38:00 AM JST
KeycodeDispatcher
* Tue 18 Mar 2014 03:40:30 AM JST
KeyEventDispatcher
* Tue 18 Mar 2014 03:41:06 AM JST
    def iter_keycode(self, ):
        r"""SUMMARY

        iter_keycode()

        @Return:
        """
        for state, keycodemap in self.iteritems():
            for keycode in keycodemap.iterkeys():
                yield Keycode(keycode, state)


* Tue 18 Mar 2014 03:43:29 AM JST

* Tue 18 Mar 2014 03:43:34 AM JST

* Tue 18 Mar 2014 03:43:38 AM JST

* Tue 18 Mar 2014 03:56:12 AM JST
True, window,
* Tue 18 Mar 2014 03:56:39 AM JST
xproto.GrabMode.Async,
* Tue 18 Mar 2014 03:56:50 AM JST
xproto.GrabMode.Async
* Tue 18 Mar 2014 03:57:16 AM JST
mod
* Tue 18 Mar 2014 04:05:37 AM JST
        for keycode in self.iter_keycode():
            keycode.grab_key(window, display=display)

* Tue 18 Mar 2014 04:08:08 AM JST
from xahk.xconnection import Connection as con
c=con()

* Tue 18 Mar 2014 04:08:29 AM JST
from xahk import sendkey
kc=sendkey.Keycode(10)

* Tue 18 Mar 2014 04:08:41 AM JST
from xahk import event
kd=event.KeycodeDispatcher()

* Tue 18 Mar 2014 04:09:02 AM JST
def tes(*args, **kwargs):
        print('tes')

* Tue 18 Mar 2014 04:10:09 AM JST
kd.register(kc, tes)
* Tue 18 Mar 2014 04:10:33 AM JST
from xahk import sendkey
kc=sendkey.Keycode(10)
from xahk.xconnection import Connection as con
c=con()
from xahk import event
kd=event.KeycodeDispatcher()

def tes(*args, **kwargs):
    print('tes')
kd.register(kc, tes)

* Tue 18 Mar 2014 04:10:43 AM JST
def tes(*args, **kwargs):
    print('tes')

* Tue 18 Mar 2014 04:10:52 AM JST
kd.register(kc, tes)

* Tue 18 Mar 2014 04:11:36 AM JST
kd=event.KeyEventDispatcher()
* Tue 18 Mar 2014 04:11:44 AM JST
kd.register(kc, tes)
* Tue 18 Mar 2014 04:20:58 AM JST
self.
* Tue 18 Mar 2014 04:21:04 AM JST
self.
* Tue 18 Mar 2014 04:21:11 AM JST
self
* Tue 18 Mar 2014 04:21:18 AM JST
self.
* Tue 18 Mar 2014 04:23:29 AM JST
xcb.xproto.ModMask._2
* Tue 18 Mar 2014 04:24:30 AM JST
self.
* Tue 18 Mar 2014 04:24:32 AM JST
state = self.state | xcb.xproto.ModMask._2
* Tue 18 Mar 2014 04:24:44 AM JST
self.
* Tue 18 Mar 2014 04:25:18 AM JST
from xahk import sendkey
from xahk.xconnection import Connection as con
from xahk import event
c=con()
kc=sendkey.Keycode(10)
kd=event.KeyEventDispatcher()

* Tue 18 Mar 2014 04:25:23 AM JST
def tes(*args, **kwargs):
    print('tes')

* Tue 18 Mar 2014 04:25:27 AM JST
kd.register(kc, tes)
* Tue 18 Mar 2014 04:25:48 AM JST
1111111
* Tue 18 Mar 2014 04:26:39 AM JST
kc=sendkey.Keycode(10)
* Tue 18 Mar 2014 04:27:03 AM JST
conn
* Tue 18 Mar 2014 04:27:13 AM JST
conn.flush()
* Tue 18 Mar 2014 04:27:54 AM JST
kd=event.KeyEventDispatcher()
* Tue 18 Mar 2014 04:28:29 AM JST
from xahk import sendkey
from xahk.xconnection import Connection as con
from xahk import event
c=con()
kc=sendkey.Keycode(10)
kd=event.KeyEventDispatcher()

* Tue 18 Mar 2014 04:28:38 AM JST
def tes(*args, **kwargs):
    print('tes')
* Tue 18 Mar 2014 04:28:43 AM JST
kd.register(kc, tes)
* Tue 18 Mar 2014 04:42:02 AM JST

* Tue 18 Mar 2014 04:42:03 AM JST

* Tue 18 Mar 2014 04:42:03 AM JST
# keymap.register(code, press10_2)

* Tue 18 Mar 2014 04:51:08 AM JST
/root/work/xlibcpp/pyx
* Tue 18 Mar 2014 04:52:01 AM JST
CON = xahk.xconnection.Connection(display='')
* Tue 18 Mar 2014 04:52:07 AM JST
CON = 
* Tue 18 Mar 2014 04:52:16 AM JST
conn
* Tue 18 Mar 2014 04:52:26 AM JST

* Tue 18 Mar 2014 04:52:27 AM JST

* Tue 18 Mar 2014 04:52:27 AM JST
        # keymap(event, this=keymap)

* Tue 18 Mar 2014 04:53:04 AM JST
        
* Tue 18 Mar 2014 04:53:09 AM JST
conn
* Tue 18 Mar 2014 04:53:36 AM JST

* Tue 18 Mar 2014 04:53:36 AM JST

* Tue 18 Mar 2014 04:53:36 AM JST
        # event = conn.wait_for_event()

* Tue 18 Mar 2014 04:53:37 AM JST

* Tue 18 Mar 2014 04:53:37 AM JST

* Tue 18 Mar 2014 04:53:37 AM JST
conn = xahk.xconnection.Connection(display='')

* Tue 18 Mar 2014 05:26:20 AM JST
sendkey.SendKeys('^w').sendkeys(window=window)
* Tue 18 Mar 2014 05:27:25 AM JST
window = CON.ext.properties.net_active_window(482)[0]
* Tue 18 Mar 2014 05:27:39 AM JST
send_down
* Tue 18 Mar 2014 05:28:36 AM JST
XK_N
* Tue 18 Mar 2014 05:29:47 AM JST

* Tue 18 Mar 2014 05:29:48 AM JST
keycodecontrol_k
* Tue 18 Mar 2014 05:31:50 AM JST
xcb.xproto.ModMask.Control
* Tue 18 Mar 2014 05:33:13 AM JST
xcb.xproto.ModMask.Control
* Tue 18 Mar 2014 05:33:54 AM JST
XK.XK_N
* Tue 18 Mar 2014 05:33:59 AM JST
sendkey.Keysym(XK.XK_N)
* Tue 18 Mar 2014 05:35:06 AM JST

* Tue 18 Mar 2014 05:35:06 AM JST

* Tue 18 Mar 2014 05:35:06 AM JST
    print('DEBUG-1-grab.py')

* Tue 18 Mar 2014 05:35:24 AM JST
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('{Down}').sendkeys(window=window)

* Tue 18 Mar 2014 05:35:29 AM JST
Down
* Tue 18 Mar 2014 05:35:34 AM JST
send_up
* Tue 18 Mar 2014 05:40:11 AM JST

* Tue 18 Mar 2014 05:40:11 AM JST

* Tue 18 Mar 2014 05:40:11 AM JST
keymap.register(keycode_mod1, press10_mod1)

* Tue 18 Mar 2014 05:40:14 AM JST

* Tue 18 Mar 2014 05:40:14 AM JST

* Tue 18 Mar 2014 05:40:14 AM JST
keycode_mod1 = sendkey.Keycode(10, 1)

* Tue 18 Mar 2014 05:43:21 AM JST
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('{Up}').sendkeys(window=window)

* Tue 18 Mar 2014 05:43:46 AM JST
send_shift_control_T
* Tue 18 Mar 2014 05:44:04 AM JST

* Tue 18 Mar 2014 05:45:21 AM JST

* Tue 18 Mar 2014 05:46:09 AM JST
keycode_control_q
* Tue 18 Mar 2014 05:46:13 AM JST

* Tue 18 Mar 2014 05:50:50 AM JST
XK_Escape
* Tue 18 Mar 2014 05:51:14 AM JST
sendkey.Keycode(10, 0)
* Tue 18 Mar 2014 05:51:30 AM JST
StopWaitEvent
* Tue 18 Mar 2014 05:52:27 AM JST
quit
* Tue 18 Mar 2014 05:52:59 AM JST
# dispatch.button_press.append(button_press)
# dispatch.button_release.append(middle_button_release)


* Tue 18 Mar 2014 05:54:58 AM JST
pass
* Tue 18 Mar 2014 06:07:32 AM JST
grab_button_release(ROOT, 2, 0)
grab_button_release(48234543, 2, 0)



* Tue 18 Mar 2014 06:07:35 AM JST
grab_button_release(ROOT, 2, 0)
grab_button_release(48234543, 2, 0)



* Tue 18 Mar 2014 06:07:47 AM JST
grab_button_release(ROOT, 2, 0)
grab_button_release(48234543, 2, 0)


* Tue 18 Mar 2014 06:19:35 AM JST
    def press_key(self, detail, state=0, window=None, time=0):
        r"""SUMMARY

        press_key(detail, state=0, window=None, time=0)

        @Arguments:
        - `detail`:
        - `state`:
        - `window`:
        - `time`:

        @Return:
        """
        self._sendkey(self.PressKey, detail, state, window, time)

* Tue 18 Mar 2014 06:19:47 AM JST
PressKey
* Tue 18 Mar 2014 06:19:54 AM JST
Button1
* Tue 18 Mar 2014 06:21:04 AM JST
    def press_button_left(self, detail, state=0, window=None, time=0):
        r"""SUMMARY

        press_key(detail, state=0, window=None, time=0)

        @Arguments:
        - `detail`:
        - `state`:
        - `window`:
        - `time`:

        @Return:
        """
        self._sendkey(self.Button1, detail, state, window, time)

* Tue 18 Mar 2014 06:21:30 AM JST
    def press_button_middle(self, detail, state=0, window=None, time=0):
        r"""SUMMARY

        press_key(detail, state=0, window=None, time=0)

        @Arguments:
        - `detail`:
        - `state`:
        - `window`:
        - `time`:

        @Return:
        """
        self._sendkey(self.Button2, detail, state, window, time)

* Tue 18 Mar 2014 06:30:10 AM JST
ButtonPress
* Tue 18 Mar 2014 06:30:33 AM JST
ButtonPress
* Tue 18 Mar 2014 06:30:40 AM JST
Button2
* Tue 18 Mar 2014 06:30:46 AM JST

* Tue 18 Mar 2014 06:30:46 AM JST

* Tue 18 Mar 2014 06:30:46 AM JST
    # Button3 = 6

* Tue 18 Mar 2014 06:30:48 AM JST
PressButton
* Tue 18 Mar 2014 06:31:04 AM JST
Button2
* Tue 18 Mar 2014 06:31:30 AM JST
press_button_middle
* Tue 18 Mar 2014 06:31:49 AM JST
from xahk.xconnection import Connection as con
c=con()

* Tue 18 Mar 2014 06:32:08 AM JST
from xahk.xconnection import Connection as con
c=con()

* Tue 18 Mar 2014 06:36:33 AM JST
from xahk.xconnection import Connection as con
c=con()

* Tue 18 Mar 2014 08:06:49 AM JST
class EventHooks(Hooks):
    r"""SUMMARY
    """

    def remove_by_type(self, type_):
        r"""SUMMARY

        remove_by_type(type_)

        @Arguments:
        - `type_`:

        @Return:
        """
        for i, value in enumerate(self[:]):
            if type(value) == type_:
                del self[i]


class KeyEventHooks(EventHooks):
    r"""SUMMARY
    """

    def __init__(self, *args, **kwargs):
        r"""SUMMARY

        __init__(*args, **kwargs)

        @Arguments:
        - `*args`:
        - `**kwargs`:

        @Return:
        """
        EventHooks.__init__(self, *args, **kwargs)
        self._keymap = None

    def set_keymap(self, keymap):
        r"""SUMMARY

        set_keymap(keymap)

        @Arguments:
        - `keymap`:

        @Return:
        """
        if not isinstance(keymap, KeyEventDispatcher):
            # TODO: (Atami) [2014/03/17]
            raise StandardError()
        self._keymap = keymap

    def get_keymap(self, ):
        r"""SUMMARY

        get_keymap()

        @Return:
        """
        return self._keymap

    def __call__(self, *args, **kwargs):
        if self._keymap:
            self._keymap(*args, **kwargs)
        self.run_hooks(*args, **kwargs)

    def __repr__(self, ):
        fmt = '{0.__class__.__name__}(keymap={0._keymap}, {1})'.format
        values = (super(KeyEventHooks, self).__repr__()
                  .replace('KeyEventHooks',  '', 1))
        return fmt(self, values)



* Tue 18 Mar 2014 08:07:53 AM JST
from hook import Hooks
* Tue 18 Mar 2014 08:08:34 AM JST

* Tue 18 Mar 2014 08:08:34 AM JST

* Tue 18 Mar 2014 08:08:34 AM JST
from hook import Hooks

* Tue 18 Mar 2014 08:08:45 AM JST

* Tue 18 Mar 2014 08:08:45 AM JST

* Tue 18 Mar 2014 08:08:45 AM JST
from xahk.sendkey import Keycode # do not remove

* Tue 18 Mar 2014 08:09:16 AM JST
KeyEventHooks
* Tue 18 Mar 2014 08:10:27 AM JST
import sys as _sys
import os as _os

import predicate

from xcb import xproto
from peak.rules import dispatch
from dispatcher import DispatcherAbstract
from t1.dictutil import recursive_update

from xahk.event.hooks import KeyEventHooks
from xahk.sendkey import Keycode # do not remove


# for debug
import cgitb as _cgitb
_cgitb.enable(format='text')

* Tue 18 Mar 2014 08:11:06 AM JST
class SkipEvent(Exception):
    r"""SUMMARY
    """
    pass


class StopWaitEvent(Exception):
    r"""SUMMARY
    """

class KeycodeDispatcher(DispatcherAbstract):
    r"""SUMMARY
    """
    # TODO: (Atami) [2014/03/13]
    # remove hooks

    _missing_func = Hooks()

    def clean(self, ):
        r"""SUMMARY

        clean()

        clean blank dispatcher.

        @Return:
        """
        this = self.copy()
        for key, value in this.iteritems():
            if value:
                continue
            del self[key]

    def isregisted(self, keycode, func):
        r"""SUMMARY

        isregisted(keycode, func)

        @Arguments:
        - `keycode`:
        - `func`:

        @Return:
        """
        try:
            keycode = int(keycode)
        except ValueError:
            # TODO: (Atami) [2014/03/15]
            raise
        if keycode in self:
            if func in self[keycode]:
                return True
        return False

    def register(self, keycode, func):
        r"""SUMMARY

        register(keycode, state, func)

        @Arguments:
        - `keycode`:
        - `state`:
        - `func`:

        @Return:
        """
        # TODO: (Atami) [2014/03/15]
        # check func argspec and keycode range
        try:
            keycode = int(keycode)
        except ValueError:
            # TODO: (Atami) [2014/03/15]
            raise
        if keycode not in self:
            self[keycode] = Hooks()
        self[keycode].append(func)

    @dispatch.generic()
    def unregister(self, *args):
        r"""SUMMARY

        unregister(key)

        @Arguments:
        - `key`:

        @Return:
        """

    @unregister.when('len(args) == 1')
    def __unregister_delete(self, *args):
        r"""SUMMARY

        unregister(key)

        @Arguments:
        - `key`:

        @Return:
        """
        keycode = int(args[0])
        if keycode in self:
            del self[keycode]

    @unregister.when('2 == len(args)')
    def __unregister_remove(self, *args):
        r"""SUMMARY

        __unregister_remove(*args)

        @Arguments:
        - `*args`:

        @Return:
        """
        keycode, function = int(args[0]), args[1]
        if keycode not in self:
            return
        if function in self[keycode]:
            self[keycode].remove(function) # Hooks.remove
        # delete if blank
        if not self[keycode]:
            self.unregister(keycode)

    def __getitem__(self, key):
        if key in self._data:
            return self._data[key]
        return self._missing_func

    def __repr__(self, ):
        return '{0.__class__.__name__}{0._data}'.format(self)

    def __call__(self, event, *args, **kwargs):
        return self[event.detail](*args, **kwargs)


class KeyEventDispatcher(DispatcherAbstract):
    r"""SUMMARY
    """
    _missing_func = KeycodeDispatcher()

    _addmods = (0, xproto.ModMask.Lock,
               xproto.ModMask._2,
               xproto.ModMask._2 | xproto.ModMask.Lock)

    def clean(self, ):
        r"""SUMMARY

        clean()

        clean blank dispatcher.

        @Return:
        """
        this = self.copy()
        for key, value in this.iteritems():
            if value:
                continue
            del self[key]

    def update(self, other):
        r"""SUMMARY

        update(other)

        @Arguments:
        - `other`:

        @Return:
        """
        if not isinstance(other, KeyEventDispatcher):
            raise StandardError()
        recursive_update(self._data, other, KeycodeDispatcher)

    def iter_keycode(self, ):
        r"""SUMMARY

        iter_keycode()

        @Return:
        """
        for state, keycodemap in self.iteritems():
            for keycode in keycodemap.iterkeys():
                yield Keycode(keycode, state)

    def grab_keys(self, window, display=None):
        r"""SUMMARY

        grab_keys(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        for keycode in self.iter_keycode():
            keycode.grab_key(window, display=display)

    def ungrab_keys(self, window, display=None):
        r"""SUMMARY

        ungrab_keys(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        for keycode in self.iter_keycode():
            keycode.ungrab_key(window, display=display)

    @dispatch.generic()
    def register(self, *args):
        r"""SUMMARY

        register(keycode, state, func)

        @Arguments:
        - `keycode`:
        - `state`:
        - `func`:

        @Return:
        """

    @register.when('3 == len(args)')
    def __register_base(self, *args):
        r"""SUMMARY

        _regist_keycode_dispatcher(state)

        @Arguments:
        - `state`:

        @Return:
        """
        keycode, state, func = args[0], args[1], args[2]
        if state not in self._data:
            self[state] = KeycodeDispatcher()
        self[state].register(keycode, func)

    @register.when('2 == len(args) and isinstance(args[0], int)')
    def __register_int(self, *args):
        r"""SUMMARY

        __register_int(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        # TODO: (Atami) [2014/03/13]
        # assert code range
        keycode, func = args[0], args[1]
        for state in self._addmods:
            self.register(keycode, state, func) # self.__register_base

    @register.when('2 == len(args) and isinstance(args[0], Keycode)')
    def __register_keycode(self, *args):
        r"""SUMMARY

        __register_keycode(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        keycode, func = args[0], args[1]
        keycode, state = int(keycode), keycode.state
        for mod in self._addmods:
            self.register(keycode, state | mod, func) # self.__register_base

    @dispatch.generic()
    def unregister(self, *args):
        r"""SUMMARY

        unregister(*args)

        @Arguments:
        - `*args`:

        @Return:
        """

    @unregister.when('1 == len(args) and isinstance(args[0], int)')
    def __unregister_int(self, *args):
        r"""SUMMARY

        __unregister_int()

        @Return:
        """
        keycode = args[0]
        for state in self._addmods:
            if state not in self:
                continue
            self[state].unregister(keycode)
            if not self[state]: # if blank
                del self[state]

    @unregister.when('1 == len(args) and isinstance(args[0], Keycode)')
    def __unregister_keycode(self, *args):
        r"""SUMMARY

        __unregister_int()

        @Return:
        """
        keycode = args[0]
        for mod in self._addmods:
            state = keycode.state | mod
            if state not in self:
                continue
            self[state].unregister(keycode)
            if not self[state]: # if blank
                del self[state]

    @unregister.when('2 == len(args)')
    def __unregister_function(self, *args):
        r"""SUMMARY

        __unregister_function(*args)

        @Arguments:
        - `*args`:

        @Return:
        """
        keycode, function = args[0], args[1]
        for state in self._addmods:
            if state not in self:
                continue
            elif keycode not in self[state]:
                continue
            # KeycodeDispatcher.unregister
            self[state].unregister(keycode, function)
            if not self[state]: # if blank
                del self[state]

    @unregister.when('3 == len(args)')
    def __unregister_base(self, *args):
        r"""SUMMARY

        _regist_keycode_dispatcher(state)

        @Arguments:
        - `state`:

        @Return:
        """
        keycode, state, func = args[0], args[1], args[2]
        if state not in self and keycode not in self[state]:
            return
        self[state].unregister(keycode, func)
        if not self[state]: # if blank
            del self[state]

    def __getitem__(self, state):
        if state in self._data:
            return self._data[state]
        return self._missing_func

    def __repr__(self, ):
        return '{0.__class__.__name__}{0._data}'.format(self)

    def __call__(self, event, *args, **kwargs):
        return self[event.state](event, *args, **kwargs)


class EventDispatcher(DispatcherAbstract):
    r"""SUMMARY
    """

    def _get_event_hook(self, event_class, default=EventHooks):
        r"""SUMMARY

        _get_event_property(event_class)

        internal use

        @Arguments:
        - `event_class`:

        @Return:
        """
        if event_class not in self:
            self[event_class] = default()
        return self[event_class]

    @property
    def keypress(self, ):
        r"""SUMMARY

        keypress()

        @Return:
        """
        return self._get_event_hook(xproto.KeyPressEvent, KeyEventHooks)

    @property
    def keyrelease(self, ):
        r"""SUMMARY

        keyrelease()

        @Return:
        """
        return self._get_event_hook(xproto.KeyReleaseEvent, KeyEventHooks)

    @property
    def button_press(self, ):
        r"""SUMMARY

        buttonpress(funcion)

        @Arguments:
        - `funcion`:

        @Return:
        """
        return self._get_event_hook(xproto.ButtonPressEvent, KeyEventHooks)

    @property
    def button_release(self, ):
        r"""SUMMARY

        buttonrelease()

        @Return:
        """
        return self._get_event_hook(xproto.ButtonReleaseEvent, KeyEventHooks)

    @property
    def motion_notiry(self, ):
        r"""SUMMARY

        motionnotiry()

        @Return:
        """
        return self._get_event_hook(xproto.MotionNotifyEvent)

    @property
    def enter_notify(self, ):
        r"""SUMMARY

        enternotify()

        @Return:
        """
        return self._get_event_hook(xproto.EnterNotifyEvent)

    @property
    def leave_notify(self, ):
        r"""SUMMARY

        leavenotify()

        @Return:
        """
        return self._get_event_hook(xproto.LeaveNotifyEvent)

    @property
    def focusin(self, ):
        r"""SUMMARY

        focusin_register(*args)

        @Arguments:
        - `*args`:

        @Return:
        """
        return self._get_event_hook(xproto.FocusInEvent)

    @property
    def focusout(self, ):
        r"""SUMMARY

        focusout_register(*args)

        @Arguments:
        - `*args`:

        @Return:
        """
        return self._get_event_hook(xproto.FocusOutEvent)

    @property
    def keymap_notify(self, ):
        r"""SUMMARY

        keymapnotify()

        @Return:
        """
        return self._get_event_hook(xproto.KeymapNotifyEvent)

    @property
    def expose(self, ):
        r"""SUMMARY

        expose()

        @Return:
        """
        return self._get_event_hook(xproto.ExposeEvent)

    @property
    def graphics_exposure(self, ):
        r"""SUMMARY

        graphicsexposure()

        @Return:
        """
        return self._get_event_hook(xproto.GraphicsExposureEvent)

    @property
    def no_exposure(self, ):
        r"""SUMMARY

        noexposure()

        @Return:
        """
        return self._get_event_hook(xproto.NoExposureEvent)

    @property
    def visibility_notify(self, ):
        r"""SUMMARY

        visibilitynotify()

        @Return:
        """
        return self._get_event_hook(xproto.VisibilityNotifyEvent)

    @property
    def create_notify(self, ):
        r"""SUMMARY

        createnotify()

        @Return:
        """
        return self._get_event_hook(xproto.CreateNotifyEvent)

    @property
    def destroy_notify(self, ):
        r"""SUMMARY

        destroynotify()

        @Return:
        """
        return self._get_event_hook(xproto.DestroyNotifyEvent)

    @property
    def unmap_notify(self, ):
        r"""SUMMARY

        unmapnotifyevent()

        @Return:
        """
        return self._get_event_hook(xproto.UnmapNotifyEvent)

    @property
    def map_notify(self, ):
        r"""SUMMARY

        mapnotifyevent()

        @Return:
        """
        return self._get_event_hook(xproto.MapNotifyEvent)

    @property
    def reparent_notify(self, ):
        r"""SUMMARY

        reparentnotifyevent()

        @Return:
        """
        return self._get_event_hook(xproto.ReparentNotifyEvent)

    @property
    def configure_notify(self, ):
        r"""SUMMARY

        configurenotifyevent()

        @Return:
        """
        return self._get_event_hook(xproto.ConfigureNotifyEvent)

    @property
    def configure_request(self, ):
        r"""SUMMARY

        configurerequestevent()

        @Return:
        """
        return self._get_event_hook(xproto.ConfigureRequestEvent)

    @property
    def gravity_notify(self, ):
        r"""SUMMARY

        gravitynotifyevent()

        @Return:
        """
        return self._get_event_hook(xproto.GravityNotifyEvent)

    @property
    def resize_request(self, ):
        r"""SUMMARY

        resizerequestevent()

        @Return:
        """
        return self._get_event_hook(xproto.ResizeRequestEvent)

    @property
    def circulate_lnotify(self, ):
        r"""SUMMARY

        circulatenotifyevent()

        @Return:
        """
        return self._get_event_hook(xproto.CirculateNotifyEvent)

    @property
    def circulate_request(self, ):
        r"""SUMMARY

        circulaterequestevent()

        @Return:
        """
        return self._get_event_hook(xproto.CirculateRequestEvent)

    @property
    def property_notify(self, ):
        r"""SUMMARY

        propertynotifyevent()

        @Return:
        """
        return self._get_event_hook(xproto.PropertyNotifyEvent)

    @property
    def selection_clear(self, ):
        r"""SUMMARY

        selectionclearevent()

        @Return:
        """
        return self._get_event_hook(xproto.SelectionClearEvent)

    @property
    def selection_request(self, ):
        r"""SUMMARY

        selectionrequestevent()

        @Return:
        """
        return self._get_event_hook(xproto.SelectionRequestEvent)

    @property
    def selection_notify(self, ):
        r"""SUMMARY

        selectionnotifyevent()

        @Return:
        """
        return self._get_event_hook(xproto.SelectionNotifyEvent)

    @property
    def colormap_notify(self, ):
        r"""SUMMARY

        colormapnotifyevent()

        @Return:
        """
        return self._get_event_hook(xproto.ColormapNotifyEvent)

    @property
    def client_message(self, ):
        r"""SUMMARY

        clientmessageevent()

        @Return:
        """
        return self._get_event_hook(xproto.ClientMessageEvent)

    @property
    def mapping_notify(self, ):
        r"""SUMMARY

        mappingnotifyevent()

        @Return:
        """
        return self._get_event_hook(xproto.MappingNotifyEvent)

    def __getitem__(self, event):
        """Get by type."""
        if not predicate.isclass(event):
            event = type(event)
        if event in self._data:
            return self._data[event]
        return self.__missing__()

    def __repr__(self, ):
        return '{0.__class__.__name__}{0._data}'.format(self)

    def __call__(self, event, *args, **kwargs):
        kwargs['this'] = self
        return self[event](event, *args, **kwargs)


class KeymapHolder(object):
    r"""SUMMARY
    """
    global_map = EventDispatcher()
    window_title_map = {}
    window_class_map = {}

    def get_title_keymap(self, key, default=None):
        r"""SUMMARY

        get_title_keymap(key)

        @Arguments:
        - `key`:

        @Return:
        """
        return self.window_title_map.get(key, default)

    def get_wmclass_keymap(self, key, default=None):
        r"""SUMMARY

        get_wmclass_keymap(key, default=None)

        @Arguments:
        - `key`:
        - `default`:

        @Return:
        """
        return self.window_title_map.get(key, default)

    def get_global_keymap(self, ):
        r"""SUMMARY

        get_global_keymap()

        @Return:
        """
        return self.global_map

    def set_title_keymap(self, key, value):
        r"""SUMMARY

        set_title_keymap(key, value)

        @Arguments:
        - `key`:
        - `value`:

        @Return:
        """
        if not isinstance(value, KeyEventDispatcher):
            # TODO: (Atami) [2014/03/16]
            raise StandardError()
        self.window_title_map[key] = value

    def set_wmclass_keymap(self, key, value):
        r"""SUMMARY

        set_wmclass_keymap(key, value)

        @Arguments:
        - `key`:
        - `value`:

        @Return:
        """
        if not isinstance(value, KeyEventDispatcher):
            # TODO: (Atami) [2014/03/16]
            raise StandardError()
        self.window_class_map[key] = value


def _test():
    r"""Test function."""
    return _os.EX_OK

if __name__ == '__main__':
    _sys.exit(_test())

* Tue 18 Mar 2014 08:13:07 AM JST
from hook import Hooks
* Tue 18 Mar 2014 08:13:21 AM JST

* Tue 18 Mar 2014 08:13:21 AM JST

* Tue 18 Mar 2014 08:13:22 AM JST
import predicate

* Tue 18 Mar 2014 08:13:39 AM JST
from hook import Hooks
* Tue 18 Mar 2014 08:13:50 AM JST

* Tue 18 Mar 2014 08:13:50 AM JST

* Tue 18 Mar 2014 08:13:50 AM JST
import predicate

* Tue 18 Mar 2014 08:15:56 AM JST
pass
* Tue 18 Mar 2014 08:16:47 AM JST
class SkipEvent(Exception):
    r"""SUMMARY
    """


class StopWaitForEvent(Exception):
    r"""SUMMARY
    """


* Tue 18 Mar 2014 08:18:20 AM JST
XAHKException
* Tue 18 Mar 2014 08:19:00 AM JST
XAHKException
* Tue 18 Mar 2014 08:20:01 AM JST
XAHKBreaker
* Tue 18 Mar 2014 08:21:25 AM JST
XAHKEventBreaker
* Tue 18 Mar 2014 08:22:06 AM JST
SkipEvent
* Tue 18 Mar 2014 08:22:37 AM JST
XAHKSkipEvent
* Tue 18 Mar 2014 08:22:43 AM JST
StopWaitForEvent
* Tue 18 Mar 2014 08:23:34 AM JST
XAHKSkipEvent
* Tue 18 Mar 2014 08:27:25 AM JST
54525974
* Tue 18 Mar 2014 08:27:32 AM JST

* Tue 18 Mar 2014 08:34:53 AM JST
UngrabKeyboard
* Tue 18 Mar 2014 08:36:21 AM JST

* Tue 18 Mar 2014 08:36:22 AM JST

* Tue 18 Mar 2014 08:36:22 AM JST
CON.core.UngrabKeyboard(0)

* Tue 18 Mar 2014 08:38:04 AM JST
def press10(*args, **kwargs):
    r"""SUMMARY

    press10()

    @Return:
    """
    CON.core.UngrabKeyboard(0)
    CON.flush()

* Tue 18 Mar 2014 08:38:09 AM JST

* Tue 18 Mar 2014 08:38:09 AM JST

* Tue 18 Mar 2014 08:38:09 AM JST
    CON.core.UngrabKeyboard(0)

* Tue 18 Mar 2014 08:38:09 AM JST
    CON.core.UngrabKeyboard(0)

* Tue 18 Mar 2014 08:38:09 AM JST
    CON.core.UngrabKeyboard(0)
    CON.flush()

* Tue 18 Mar 2014 08:38:40 AM JST

* Tue 18 Mar 2014 08:38:44 AM JST
send_shift_control_T
* Tue 18 Mar 2014 08:41:31 AM JST

* Tue 18 Mar 2014 08:41:32 AM JST

* Tue 18 Mar 2014 08:41:32 AM JST
from

* Tue 18 Mar 2014 08:41:53 AM JST
event.StopWaitForEvent
* Tue 18 Mar 2014 08:43:27 AM JST
StopWaitForEvent
* Tue 18 Mar 2014 08:43:42 AM JST
event.StopWaitForEvent
* Tue 18 Mar 2014 08:44:33 AM JST
Skip
* Tue 18 Mar 2014 08:45:29 AM JST
XAHKStopWaitForEvent
* Tue 18 Mar 2014 08:46:00 AM JST
XAHKStopWaitForEvent
* Tue 18 Mar 2014 08:48:32 AM JST
dispatcher.keypress.set_keymap
* Tue 18 Mar 2014 08:48:45 AM JST
dispatcher
* Tue 18 Mar 2014 08:48:54 AM JST
set
* Tue 18 Mar 2014 08:53:13 AM JST

* Tue 18 Mar 2014 08:53:13 AM JST

* Tue 18 Mar 2014 08:53:13 AM JST
    keymap

* Tue 18 Mar 2014 08:53:14 AM JST

* Tue 18 Mar 2014 08:53:14 AM JST

* Tue 18 Mar 2014 08:53:14 AM JST
    keymap = kwargs['this'].keypress.get_keymap()

* Tue 18 Mar 2014 08:53:34 AM JST

* Tue 18 Mar 2014 08:53:34 AM JST
press10
* Tue 18 Mar 2014 08:55:37 AM JST

* Tue 18 Mar 2014 08:55:37 AM JST

* Tue 18 Mar 2014 08:55:37 AM JST
    print('DEBUG-1-grab.py')

* Tue 18 Mar 2014 08:57:01 AM JST
XAHKSkipEvent
* Tue 18 Mar 2014 08:57:09 AM JST
XAHKStopWaitForEvent
* Tue 18 Mar 2014 09:53:54 AM JST
    _addmods = (0, xproto.ModMask.Lock,
               xproto.ModMask._2,
               xproto.ModMask._2 | xproto.ModMask.Lock)

* Tue 18 Mar 2014 09:54:10 AM JST
    def clean(self, ):
        r"""SUMMARY

        clean()

        clean blank dispatcher.

        @Return:
        """
        this = self.copy()
        for key, value in this.iteritems():
            if value:
                continue
            del self[key]


* Tue 18 Mar 2014 09:54:20 AM JST
this
* Tue 18 Mar 2014 09:54:38 AM JST
KeyButtonEventDispatcherAbstract
* Tue 18 Mar 2014 09:58:47 AM JST
    def update(self, other):
        r"""SUMMARY

        update(other)

        @Arguments:
        - `other`:

        @Return:
        """
        if not isinstance(other, self.__class__):
            raise StandardError()
        _recursive_update(self._data, other)


* Tue 18 Mar 2014 10:01:46 AM JST
    @dispatch.generic()
    def register(self, *args):
        r"""SUMMARY

        register(keycode, state, func)

        @Arguments:
        - `keycode`:
        - `state`:
        - `func`:

        @Return:
        """

    @register.when('3 == len(args)')
    def __register_base(self, *args):
        r"""SUMMARY

        _regist_keycode_dispatcher(state)

        @Arguments:
        - `state`:

        @Return:
        """
        keycode, state, func = args[0], args[1], args[2]
        if state not in self._data:
            self[state] = KeycodeDispatcher()
        self[state].register(keycode, func)

    @register.when('2 == len(args) and isinstance(args[0], int)')
    def __register_int(self, *args):
        r"""SUMMARY

        __register_int(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        # TODO: (Atami) [2014/03/13]
        # assert code range
        keycode, func = args[0], args[1]
        for state in self._addmods:
            self.register(keycode, state, func) # self.__register_base

* Tue 18 Mar 2014 10:04:52 AM JST
    def __getitem__(self, state):
        if state in self._data:
            return self._data[state]
        return self._missing_func

    def __repr__(self, ):
        return '{0.__class__.__name__}{0._data}'.format(self)

    def __call__(self, event, *args, **kwargs):
        return self[event.state](event, *args, **kwargs)

* Tue 18 Mar 2014 10:10:40 AM JST
key
* Tue 18 Mar 2014 10:10:47 AM JST
key
* Tue 18 Mar 2014 10:10:54 AM JST
key
* Tue 18 Mar 2014 10:13:43 AM JST

* Tue 18 Mar 2014 10:13:43 AM JST

* Tue 18 Mar 2014 10:13:43 AM JST
    _missing_func = DetailDispatcher()

* Tue 18 Mar 2014 10:13:53 AM JST
StateDispatcherAbstract
* Tue 18 Mar 2014 10:17:31 AM JST
KeyIntegerAbstract.__init__(self, data, display)
* Tue 18 Mar 2014 10:17:43 AM JST

* Tue 18 Mar 2014 10:17:43 AM JST

* Tue 18 Mar 2014 10:17:43 AM JST
        self._data = data

* Tue 18 Mar 2014 10:17:44 AM JST

* Tue 18 Mar 2014 10:17:44 AM JST

* Tue 18 Mar 2014 10:17:44 AM JST
        self._display = display

* Tue 18 Mar 2014 10:18:15 AM JST
    def grab_key(self, window, display=None):
        r"""SUMMARY

        grab_key(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        conn = Connection.get_instance(display=display)
        state = self.state | xcb.xproto.ModMask._2
        conn.core.GrabKey(True, window, state, self._data,
                          xproto.GrabMode.Async, xproto.GrabMode.Async)
        conn.flush()

    def ungrab_key(self, window, display=None):
        r"""SUMMARY

        ungrab_key(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        conn = Connection.get_instance(display=display)
        state = self.state | xcb.xproto.ModMask._2
        conn.core.UngrabKey(self._data, window, state)
        conn.flush()

* Tue 18 Mar 2014 10:18:46 AM JST
GrabButton                      UngrabPointer                  
* Tue 18 Mar 2014 10:18:48 AM JST
GrabButton
* Tue 18 Mar 2014 10:23:22 AM JST
xcb.xproto.GrabMode.Async,
* Tue 18 Mar 2014 10:23:33 AM JST
xcb.xproto.GrabMode.Async,
* Tue 18 Mar 2014 10:24:03 AM JST
self._data,
* Tue 18 Mar 2014 10:24:28 AM JST
                          
* Tue 18 Mar 2014 10:25:21 AM JST
state = self.state | xcb.xproto.ModMask._2
* Tue 18 Mar 2014 10:26:13 AM JST
        conn = Connection.get_instance(display=self.display)
        state = self.state | xcb.xproto.ModMask._2
        conn.core.GrabButton(True,
                             window,
                             xproto.EventMask.ButtonPress,
                             xcb.xproto.GrabMode.Async,
                             xcb.xproto.GrabMode.Async,
                             0,
                             0,
                             self._data,
                             state)
        conn.flush()

* Tue 18 Mar 2014 10:29:15 AM JST
    def grab_button_press(self, window):
        r"""SUMMARY

        grab_key(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        self._grab_button(window, xproto.EventMask.ButtonPress)

* Tue 18 Mar 2014 10:29:26 AM JST
ButtonPress
* Tue 18 Mar 2014 10:29:51 AM JST
class ButtonCode(KeyIntegerAbstract):
    r"""SUMMARY
    """

    def __init__(self, data, state=0, display=None):
        r"""

        @Arguments:
        - `data`:
        - `state`:
        - `display`:
        """
        KeyIntegerAbstract.__init__(self, data, display)
        self.state = state

    def _grab_button(self, window, press_or_release):
        r"""SUMMARY

        _grab_button()

        @Return:
        """
        conn = Connection.get_instance(display=self.display)
        state = self.state | xcb.xproto.ModMask._2
        conn.core.GrabButton(True,
                             window,
                             press_or_release,
                             xcb.xproto.GrabMode.Async,
                             xcb.xproto.GrabMode.Async,
                             0,
                             0,
                             self._data,
                             state)
        conn.flush()

    def grab_button_press(self, window):
        r"""SUMMARY

        grab_key(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        self._grab_button(window, xproto.EventMask.ButtonPress)

    def grab_button_release(self, window):
        r"""SUMMARY

        grab_key(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        self._grab_button(window, xproto.EventMask.ButtonRelease)

    def ungrab_key(self, window):
        r"""SUMMARY

        ungrab_key(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        conn = Connection.get_instance(display=self.display)
        state = self.state | xcb.xproto.ModMask._2
        conn.core.UngrabButton(self._data, window, state)
        conn.flush()



* Tue 18 Mar 2014 10:32:15 AM JST
NotImplementedError
* Tue 18 Mar 2014 10:32:43 AM JST
    def __repr__(self, ):
        fmt = '{0.__class__.__name__}({1}, state={0.state})'.format
        return fmt(self, self._data)

    def __ior__(self, other):
        self.state |= other
        return self

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            if (self._data == other._data and self.state == other.state):
                return 0
            return -1
        return cmp(self._data, other)

    def __hash__(self, ):
        return hash(self._data)

* Tue 18 Mar 2014 10:34:05 AM JST
    def __init__(self, data, state=0, display=None):
        r"""SUMMARY

        __init__(data, state=0, display=None)

        @Arguments:
        - `data`:
        - `state`:
        - `display`:

        @Return:
        """
        KeyIntegerAbstract.__init__(self, data, display)
        self.state = state

* Tue 18 Mar 2014 10:34:13 AM JST
CodeAbstract
* Tue 18 Mar 2014 10:34:30 AM JST
    def __repr__(self, ):
        fmt = '{0.__class__.__name__}({1}, state={0.state})'.format
        return fmt(self, self._data)

    def __ior__(self, other):
        self.state |= other
        return self

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            if (self._data == other._data and self.state == other.state):
                return 0
            return -1
        return cmp(self._data, other)

    def __hash__(self, ):
        return hash(self._data)

* Tue 18 Mar 2014 10:34:40 AM JST
CodeAbstract
* Tue 18 Mar 2014 10:35:06 AM JST
impor
* Tue 18 Mar 2014 10:36:07 AM JST
2
* Tue 18 Mar 2014 10:37:12 AM JST
    def _grab_button(self, window, press_or_release):
        r"""SUMMARY

        _grab_button()

        @Return:
        """
        conn = Connection.get_instance(display=self.display)
        state = self.state | xcb.xproto.ModMask._2
        conn.core.GrabButton(True,
                             window,
                             press_or_release,
                             xcb.xproto.GrabMode.Async,
                             xcb.xproto.GrabMode.Async,
                             0,
                             0,
                             self._data,
                             state)
        conn.flush()


* Tue 18 Mar 2014 10:39:33 AM JST

* Tue 18 Mar 2014 10:39:34 AM JST

* Tue 18 Mar 2014 10:39:34 AM JST

* Tue 18 Mar 2014 10:42:01 AM JST

* Tue 18 Mar 2014 10:42:02 AM JST

* Tue 18 Mar 2014 10:42:03 AM JST

        r"""SUMMARY
* Tue 18 Mar 2014 10:44:22 AM JST
# grab_button_release(48234543, 2, 0)

# dispatch.button_press.append(button_press)
dispatcher.button_release.append(middle_button_release)





CON.flush()

try:
    while 1:
* Tue 18 Mar 2014 10:47:14 AM JST
        
* Tue 18 Mar 2014 10:53:54 AM JST

* Tue 18 Mar 2014 10:53:54 AM JST

* Tue 18 Mar 2014 10:53:54 AM JST
dispatcher = event.EventDispatcher()

* Tue 18 Mar 2014 10:54:11 AM JST

* Tue 18 Mar 2014 10:54:12 AM JST

* Tue 18 Mar 2014 10:54:12 AM JST
dispatcher.keypress.set_keymap(keymap)

* Tue 18 Mar 2014 10:57:36 AM JST
    def iter_keycode(self, ):
        r"""SUMMARY

        iter_keycode()

        @Return:
        """
        for state, keycodemap in self.iteritems():
            for keycode in keycodemap.iterkeys():
                yield KeyCode(keycode, state)

* Tue 18 Mar 2014 10:57:59 AM JST
 # do not remove
* Tue 18 Mar 2014 10:58:07 AM JST
KeyCode
* Tue 18 Mar 2014 10:59:21 AM JST
    def grab_keys(self, window, display=None):
        r"""SUMMARY

        grab_keys(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        for keycode in self.iter_keycode():
            keycode.grab_key(window, display=display)

    def ungrab_keys(self, window, display=None):
        r"""SUMMARY

        ungrab_keys(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        for keycode in self.iter_keycode():
            keycode.ungrab_key(window, display=display)


* Tue 18 Mar 2014 11:02:17 AM JST
key
* Tue 18 Mar 2014 11:02:19 AM JST
key
* Tue 18 Mar 2014 11:05:51 AM JST
        for code in self.iter_code():
            code.grab_button(window)

* Tue 18 Mar 2014 11:06:05 AM JST
    def grab_press_buttons(self, window):
        r"""SUMMARY
        
        grab_press_buttons(window)
        
        @Arguments:
        - `window`:
        
        @Return:
        """
        for code in self.iter_code():
            code.grab_press_button(window)

* Tue 18 Mar 2014 11:09:47 AM JST
    @dispatch.generic()
    def register(self, *args):
        r"""SUMMARY

        register(keycode, state, func)

        @Arguments:
        - `keycode`:
        - `state`:
        - `func`:

        @Return:
        """

    @register.when('3 == len(args)')
    def __register_base(self, *args):
        r"""SUMMARY

        _regist_keycode_dispatcher(state)

        @Arguments:
        - `state`:

        @Return:
        """
        keycode, state, func = args[0], args[1], args[2]
        if state not in self._data:
            self[state] = DetailDispatcher()
        self[state].register(keycode, func)

* Tue 18 Mar 2014 11:10:19 AM JST
    @register.when('2 == len(args) and isinstance(args[0], int)')
    def __register_int(self, *args):
        r"""SUMMARY

        __register_int(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        # TODO: (Atami) [2014/03/13]
        # assert code range
        keycode, func = args[0], args[1]
        for state in self._addmods:
            self.register(keycode, state, func) # self.__register_base

* Tue 18 Mar 2014 11:10:54 AM JST
    @register.when('2 == len(args) and isinstance(args[0], KeyCode)')
    def __register_keycode(self, *args):
        r"""SUMMARY

        __register_keycode(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        keycode, func = args[0], args[1]
        keycode, state = int(keycode), keycode.state
        for mod in self._addmods:
            self.register(keycode, state | mod, func) # self.__register_base

* Tue 18 Mar 2014 11:11:01 AM JST
Key
* Tue 18 Mar 2014 11:12:11 AM JST
CodeAbstract
* Tue 18 Mar 2014 11:12:31 AM JST
CodeAbstract
* Tue 18 Mar 2014 11:13:17 AM JST
    @dispatch.generic()
    def register(self, *args):
        r"""SUMMARY

        register(keycode, state, func)

        @Arguments:
        - `keycode`:
        - `state`:
        - `func`:

        @Return:
        """

    @register.when('3 == len(args)')
    def __register_base(self, *args):
        r"""SUMMARY

        _regist_keycode_dispatcher(state)

        @Arguments:
        - `state`:

        @Return:
        """
        keycode, state, func = args[0], args[1], args[2]
        if state not in self._data:
            self[state] = DetailDispatcher()
        self[state].register(keycode, func)

    @register.when('2 == len(args) and isinstance(args[0], int)')
    def __register_int(self, *args):
        r"""SUMMARY

        __register_int(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        # TODO: (Atami) [2014/03/13]
        # assert code range
        keycode, func = args[0], args[1]
        for state in self._addmods:
            self.register(keycode, state, func) # self.__register_base

    @register.when('2 == len(args) and isinstance(args[0], CodeAbstract)')
    def __register_keycode(self, *args):
        r"""SUMMARY

        __register_keycode(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        keycode, func = args[0], args[1]
        keycode, state = int(keycode), keycode.state
        for mod in self._addmods:
            self.register(keycode, state | mod, func) # self.__register_base

    @dispatch.generic()
    def unregister(self, *args):
        r"""SUMMARY

        unregister(*args)

        @Arguments:
        - `*args`:

        @Return:
        """

    @unregister.when('1 == len(args) and isinstance(args[0], int)')
    def __unregister_int(self, *args):
        r"""SUMMARY

        __unregister_int()

        @Return:
        """
        keycode = args[0]
        for state in self._addmods:
            if state not in self:
                continue
            self[state].unregister(keycode)
            if not self[state]: # if blank
                del self[state]

    @unregister.when('1 == len(args) and isinstance(args[0], KeyCode)')
    def __unregister_keycode(self, *args):
        r"""SUMMARY

        __unregister_int()

        @Return:
        """
        keycode = args[0]
        for mod in self._addmods:
            state = keycode.state | mod
            if state not in self:
                continue
            self[state].unregister(keycode)
            if not self[state]: # if blank
                del self[state]

    @unregister.when('2 == len(args)')
    def __unregister_function(self, *args):
        r"""SUMMARY

        __unregister_function(*args)

        @Arguments:
        - `*args`:

        @Return:
        """
        keycode, function = args[0], args[1]
        for state in self._addmods:
            if state not in self:
                continue
            elif keycode not in self[state]:
                continue
            # DetailDispatcher.unregister
            self[state].unregister(keycode, function)
            if not self[state]: # if blank
                del self[state]

    @unregister.when('3 == len(args)')
    def __unregister_base(self, *args):
        r"""SUMMARY

        _regist_keycode_dispatcher(state)

        @Arguments:
        - `state`:

        @Return:
        """
        keycode, state, func = args[0], args[1], args[2]
        if state not in self and keycode not in self[state]:
            return
        self[state].unregister(keycode, func)
        if not self[state]: # if blank
            del self[state]



* Tue 18 Mar 2014 11:13:37 AM JST
Key
* Tue 18 Mar 2014 11:18:07 AM JST

* Tue 18 Mar 2014 11:18:07 AM JST

* Tue 18 Mar 2014 11:18:07 AM JST
print(keymap)

* Tue 18 Mar 2014 11:25:56 AM JST
buttoncode_left
* Tue 18 Mar 2014 11:26:31 AM JST
ButtonEventDispatcher
* Tue 18 Mar 2014 11:26:58 AM JST
buttoncode_left
* Tue 18 Mar 2014 11:27:44 AM JST
print_dummy
* Tue 18 Mar 2014 11:29:19 AM JST
48234543
* Tue 18 Mar 2014 11:29:28 AM JST
buttonmap
* Tue 18 Mar 2014 11:32:27 AM JST

* Tue 18 Mar 2014 11:32:27 AM JST

* Tue 18 Mar 2014 11:32:27 AM JST
# buttonmap

* Tue 18 Mar 2014 11:34:56 AM JST
buttonmap
* Tue 18 Mar 2014 11:41:28 AM JST
ROOT
* Tue 18 Mar 2014 11:43:08 AM JST
54525974
* Tue 18 Mar 2014 11:45:20 AM JST
buttoncode_middle
* Tue 18 Mar 2014 11:47:16 AM JST

* Tue 18 Mar 2014 11:47:16 AM JST

* Tue 18 Mar 2014 11:47:16 AM JST
        print('DEBUG-1-__init__.py')

* Tue 18 Mar 2014 11:47:31 AM JST

* Tue 18 Mar 2014 11:47:31 AM JST

* Tue 18 Mar 2014 11:47:31 AM JST
        print(event)

* Tue 18 Mar 2014 11:50:22 AM JST
buttonmap
* Tue 18 Mar 2014 11:52:13 AM JST
detail
* Tue 18 Mar 2014 11:57:58 AM JST
ButtonReleaseEvent
* Tue 18 Mar 2014 12:00:06 PM JST
dispatch_button_release
* Tue 18 Mar 2014 12:10:48 PM JST

* Tue 18 Mar 2014 12:10:57 PM JST
xcb.xproto.ModMask.Control
* Tue 18 Mar 2014 12:11:05 PM JST
buttoncode_controlleft
* Tue 18 Mar 2014 12:12:03 PM JST

* Tue 18 Mar 2014 12:12:27 PM JST
def print_dummy(*args, **kwargs):
    r"""SUMMARY

    print_fummy(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    print('dummy')

* Tue 18 Mar 2014 12:12:47 PM JST
bitarray.bitarray(272)
* Tue 18 Mar 2014 12:24:19 PM JST
/list 
* Tue 18 Mar 2014 12:25:16 PM JST
http://pypi.python.org/pypi/bitarray/
* Tue 18 Mar 2014 12:28:41 PM JST
import
* Tue 18 Mar 2014 12:28:51 PM JST
ButtonMask
* Tue 18 Mar 2014 12:31:39 PM JST
        conn = Connection.get_instance(display=self.display)
        state = self.state | xcb.xproto.ModMask._2
        conn.core.GrabButton(True,
                             window,
                             press_or_release,
                             xcb.xproto.GrabMode.Async,
                             xcb.xproto.GrabMode.Async,
                             0,
                             0,
                             self._data,
                             state)
        conn.flush()

* Tue 18 Mar 2014 12:31:53 PM JST
ModMask._2
* Tue 18 Mar 2014 02:15:22 PM JST
    @dispatch.generic()
    def register(self, *args):
        r"""SUMMARY

        register(keycode, state, func)

        @Arguments:
        - `keycode`:
        - `state`:
        - `func`:

        @Return:
        """

    @register.when('3 == len(args)')
    def __register_base(self, *args):
        r"""SUMMARY

        _regist_keycode_dispatcher(state)

        @Arguments:
        - `state`:

        @Return:
        """
        keycode, state, func = args[0], args[1], args[2]
        if state not in self._data:
            self[state] = DetailDispatcher()
        self[state].register(keycode, func)

    @register.when('2 == len(args) and isinstance(args[0], int)')
    def __register_int(self, *args):
        r"""SUMMARY

        __register_int(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        # TODO: (Atami) [2014/03/13]
        # assert code range
        keycode, func = args[0], args[1]
        for state in self._addmods:
            self.register(keycode, state, func) # self.__register_base

    @register.when('2 == len(args) and isinstance(args[0], CodeAbstract)')
    def __register_keycode(self, *args):
        r"""SUMMARY

        __register_keycode(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        keycode, func = args[0], args[1]
        keycode, state = int(keycode), keycode.state
        for mod in self._addmods:
            self.register(keycode, state | mod, func) # self.__register_base

    @dispatch.generic()
    def unregister(self, *args):
        r"""SUMMARY

        unregister(*args)

        @Arguments:
        - `*args`:

        @Return:
        """

    @unregister.when('1 == len(args) and isinstance(args[0], int)')
    def __unregister_int(self, *args):
        r"""SUMMARY

        __unregister_int()

        @Return:
        """
        code = args[0]
        for state in self._addmods:
            if state not in self:
                continue
            self[state].unregister(code)
            if not self[state]: # if blank
                del self[state]

    @unregister.when('1 == len(args) and isinstance(args[0], CodeAbstract)')
    def __unregister_code(self, *args):
        r"""SUMMARY

        __unregister_int()

        @Return:
        """
        code = args[0]
        for mod in self._addmods:
            state = code.state | mod
            if state not in self:
                continue
            self[state].unregister(code)
            if not self[state]: # if blank
                del self[state]

    @unregister.when('2 == len(args)')
    def __unregister_function(self, *args):
        r"""SUMMARY

        __unregister_function(*args)

        @Arguments:
        - `*args`:

        @Return:
        """
        code, function = args[0], args[1]
        for state in self._addmods:
            if state not in self:
                continue
            elif code not in self[state]:
                continue
            # DetailDispatcher.unregister
            self[state].unregister(code, function)
            if not self[state]: # if blank
                del self[state]

    @unregister.when('3 == len(args)')
    def __unregister_base(self, *args):
        r"""SUMMARY

        _regist_keycode_dispatcher(state)

        @Arguments:
        - `state`:

        @Return:
        """
        code, state, func = args[0], args[1], args[2]
        if state not in self and code not in self[state]:
            return
        self[state].unregister(code, func)
        if not self[state]: # if blank
            del self[state]

* Tue 18 Mar 2014 02:15:34 PM JST
StateDispatcherBase
* Tue 18 Mar 2014 02:16:03 PM JST
ButtonPressEventDispatcher
* Tue 18 Mar 2014 02:17:56 PM JST
@dispatch.generic()
* Tue 18 Mar 2014 02:18:15 PM JST
    @register.when('3 == len(args)')
    def __register_base(self, *args):
        r"""SUMMARY

        _regist_keycode_dispatcher(state)

        @Arguments:
        - `state`:

        @Return:
        """
        keycode, state, func = args[0], args[1], args[2]
        if state not in self._data:
            self[state] = DetailDispatcher()
        self[state].register(keycode, func)

    @register.when('2 == len(args) and isinstance(args[0], int)')
    def __register_int(self, *args):
        r"""SUMMARY

        __register_int(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        # TODO: (Atami) [2014/03/13]
        # assert code range
        keycode, func = args[0], args[1]
        for state in self._addmods:
            self.register(keycode, state, func) # self.__register_base

    @register.when('2 == len(args) and isinstance(args[0], CodeAbstract)')
    def __register_keycode(self, *args):
        r"""SUMMARY

        __register_keycode(key, func)

        @Arguments:
        - `key`:
        - `func`:

        @Return:
        """
        keycode, func = args[0], args[1]
        keycode, state = int(keycode), keycode.state
        for mod in self._addmods:
            self.register(keycode, state | mod, func) # self.__register_base

* Tue 18 Mar 2014 02:23:05 PM JST
state |= self._button_mod_map.get(code, 0)
* Tue 18 Mar 2014 02:23:24 PM JST
state
* Tue 18 Mar 2014 02:23:43 PM JST
mod
* Tue 18 Mar 2014 02:23:44 PM JST
state | mod
* Tue 18 Mar 2014 02:24:02 PM JST
mod | 
* Tue 18 Mar 2014 02:24:44 PM JST
code, 
* Tue 18 Mar 2014 02:25:49 PM JST
_missing_func = DetailDispatcher()
* Tue 18 Mar 2014 02:26:10 PM JST
    @dispatch.generic()
    def unregister(self, *args):
        r"""SUMMARY

        unregister(*args)

        @Arguments:
        - `*args`:

        @Return:
        """

    @unregister.when('1 == len(args) and isinstance(args[0], int)')
    def __unregister_int(self, *args):
        r"""SUMMARY

        __unregister_int()

        @Return:
        """
        code = args[0]
        for state in self._addmods:
            if state not in self:
                continue
            self[state].unregister(code)
            if not self[state]: # if blank
                del self[state]

    @unregister.when('1 == len(args) and isinstance(args[0], CodeAbstract)')
    def __unregister_code(self, *args):
        r"""SUMMARY

        __unregister_int()

        @Return:
        """
        code = args[0]
        for mod in self._addmods:
            state = code.state | mod
            if state not in self:
                continue
            self[state].unregister(code)
            if not self[state]: # if blank
                del self[state]

    @unregister.when('2 == len(args)')
    def __unregister_function(self, *args):
        r"""SUMMARY

        __unregister_function(*args)

        @Arguments:
        - `*args`:

        @Return:
        """
        code, function = args[0], args[1]
        for state in self._addmods:
            if state not in self:
                continue
            elif code not in self[state]:
                continue
            # DetailDispatcher.unregister
            self[state].unregister(code, function)
            if not self[state]: # if blank
                del self[state]

    @unregister.when('3 == len(args)')
    def __unregister_base(self, *args):
        r"""SUMMARY

        _regist_keycode_dispatcher(state)

        @Arguments:
        - `state`:

        @Return:
        """
        code, state, func = args[0], args[1], args[2]
        if state not in self and code not in self[state]:
            return
        self[state].unregister(code, func)
        if not self[state]: # if blank
            del self[state]

* Tue 18 Mar 2014 02:28:00 PM JST
state |= self._button_mod_map.get(code, 0)
* Tue 18 Mar 2014 02:28:14 PM JST
state |
* Tue 18 Mar 2014 02:28:59 PM JST
mod = self._button_mod_map.get(code, 0)
* Tue 18 Mar 2014 02:29:17 PM JST
buttonmod
* Tue 18 Mar 2014 02:29:38 PM JST
buttonmod = self._button_mod_map.get(code, 0)
* Tue 18 Mar 2014 02:29:48 PM JST
buttonmod
* Tue 18 Mar 2014 02:30:15 PM JST
buttonmod = self._button_mod_map.get(code, 0)
* Tue 18 Mar 2014 02:30:34 PM JST
buttonmod
* Tue 18 Mar 2014 02:31:08 PM JST
ButtonReleaseEventDispatcher
* Tue 18 Mar 2014 02:32:34 PM JST
buttonmap.register
* Tue 18 Mar 2014 02:32:46 PM JST
buttonrelease_map
* Tue 18 Mar 2014 02:33:10 PM JST
print_dummy
* Tue 18 Mar 2014 02:33:17 PM JST
grab_release_buttons(int(ROOT))
* Tue 18 Mar 2014 02:34:10 PM JST
    def iter_code(self, ):
        r"""SUMMARY

        iter_keycode()

        @Return:
        """
        for state, keycodemap in self.iteritems():
            for keycode in keycodemap.iterkeys():
                yield KeyCode(keycode, state)

    def grab_keys(self, window):
        r"""SUMMARY

        grab_keys(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        for keycode in self.iter_code():
            keycode.grab_key(window)

    def ungrab_keys(self, window):
        r"""SUMMARY

        ungrab_keys(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        for keycode in self.iter_code():
            keycode.ungrab_key(window)

* Tue 18 Mar 2014 02:34:56 PM JST
    def iter_code(self, ):
        r"""SUMMARY

        iter_keycode()

        @Return:
        """
        for state, codemap in self.iteritems():
            for code in codemap.iterkeys():
                yield ButtonCode(code, state)

    def grab_buttons(self, window):
        r"""SUMMARY

        grab_keys(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        for code in self.iter_code():
            code.grab_button(window)

    def grab_press_buttons(self, window):
        r"""SUMMARY

        grab_press_buttons(window)

        @Arguments:
        - `window`:

        @Return:
        """
        for code in self.iter_code():
            code.grab_press_button(window)

    def grab_release_buttons(self, window):
        r"""SUMMARY

        grab_press_buttons(window)

        @Arguments:
        - `window`:

        @Return:
        """
        for code in self.iter_code():
            code.grab_release_button(window)

    def ungrab_buttons(self, window):
        r"""SUMMARY

        ungrab_keys(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        for code in self.iter_code():
            code.ungrab_button(window)

* Tue 18 Mar 2014 02:35:21 PM JST
buttonrelease_map
* Tue 18 Mar 2014 02:36:41 PM JST
buttoncode_left
* Tue 18 Mar 2014 02:37:54 PM JST
button_press
* Tue 18 Mar 2014 02:37:59 PM JST
middle_button_release
* Tue 18 Mar 2014 02:38:14 PM JST
buttoncode_middle
* Tue 18 Mar 2014 02:40:01 PM JST

* Tue 18 Mar 2014 02:40:31 PM JST
buttoncode_middle
* Tue 18 Mar 2014 02:40:57 PM JST
null_function
* Tue 18 Mar 2014 02:41:15 PM JST

* Tue 18 Mar 2014 02:41:25 PM JST
buttonrelease_map
* Tue 18 Mar 2014 02:43:04 PM JST

* Tue 18 Mar 2014 02:43:04 PM JST

* Tue 18 Mar 2014 02:43:04 PM JST
            print(ev)

* Tue 18 Mar 2014 02:43:04 PM JST
            print(ev)

* Tue 18 Mar 2014 02:43:04 PM JST
            print(ev)
            print(ev.state)

* Tue 18 Mar 2014 03:24:27 PM JST
CON.core.ChangeWindowAttributes(int(ROOT),
                                xcb.xproto.CW.EventMask,
                                [xcb.xproto.EventMask.FocusChange | xcb.xproto.EventMask.SubstructureNotify])

* Tue 18 Mar 2014 03:25:05 PM JST
    
* Tue 18 Mar 2014 03:25:07 PM JST
xcb.
* Tue 18 Mar 2014 03:25:10 PM JST
xcb.
* Tue 18 Mar 2014 03:25:13 PM JST
xcb.
* Tue 18 Mar 2014 03:25:44 PM JST

* Tue 18 Mar 2014 03:25:44 PM JST

* Tue 18 Mar 2014 03:25:44 PM JST
CON.flush()

* Tue 18 Mar 2014 03:26:13 PM JST
            for win in CON.ext.list_windows():
                CON.core.ChangeWindowAttributes(int(win),
                                            xcb.xproto.CW.EventMask,
                                            [xcb.xproto.EventMask.FocusChange])
                CON.flush()

* Tue 18 Mar 2014 03:27:02 PM JST
            
* Tue 18 Mar 2014 03:27:04 PM JST
xcb.
* Tue 18 Mar 2014 03:27:07 PM JST
                                            
* Tue 18 Mar 2014 03:27:10 PM JST
xcb.
* Tue 18 Mar 2014 03:27:21 PM JST
xproto.EventMask.SubstructureNotify
* Tue 18 Mar 2014 03:27:47 PM JST
set_attributs
* Tue 18 Mar 2014 03:34:05 PM JST
print(event)
* Tue 18 Mar 2014 03:35:12 PM JST
event
* Tue 18 Mar 2014 03:35:18 PM JST
event
* Tue 18 Mar 2014 03:35:34 PM JST
xproto.EventMask.FocusChange
* Tue 18 Mar 2014 03:36:08 PM JST
    for win in CON.ext.list_windows():
        CON.core.ChangeWindowAttributes(
            int(win), xproto.CW.EventMask,
            [xproto.EventMask.FocusChange | xproto.EventMask.SubstructureNotify])
    CON.flush()

* Tue 18 Mar 2014 03:36:22 PM JST

* Tue 18 Mar 2014 03:36:22 PM JST

* Tue 18 Mar 2014 03:36:22 PM JST
CON.flush()

* Tue 18 Mar 2014 03:39:56 PM JST
event.event
* Tue 18 Mar 2014 03:44:33 PM JST
'focus out'
* Tue 18 Mar 2014 03:44:41 PM JST

* Tue 18 Mar 2014 03:44:41 PM JST

* Tue 18 Mar 2014 03:44:41 PM JST
    print('focus out')

* Tue 18 Mar 2014 03:44:57 PM JST
event.event
* Tue 18 Mar 2014 03:45:00 PM JST

* Tue 18 Mar 2014 03:45:00 PM JST

* Tue 18 Mar 2014 03:45:00 PM JST
    print()

* Tue 18 Mar 2014 03:47:06 PM JST
GrabMode
* Tue 18 Mar 2014 03:48:27 PM JST
NotifyMode
* Tue 18 Mar 2014 03:48:41 PM JST
Grab
* Tue 18 Mar 2014 03:51:45 PM JST
event.
* Tue 18 Mar 2014 03:54:06 PM JST
inferior
* Tue 18 Mar 2014 04:00:00 PM JST
CON.core.ChangeWindowAttributes(
    int(ROOT), xproto.CW.EventMask,
    [xproto.EventMask.FocusChange | xproto.EventMask.SubstructureNotify])

* Tue 18 Mar 2014 04:00:09 PM JST
for win in CON.ext.list_windows():
    CON.core.ChangeWindowAttributes(
        int(win), xproto.CW.EventMask,
        [xproto.EventMask.FocusChange | xproto.EventMask.SubstructureNotify])

* Tue 18 Mar 2014 04:00:40 PM JST
int(ROOT)
* Tue 18 Mar 2014 04:00:56 PM JST
dispatcher = event.EventDispatcher()
* Tue 18 Mar 2014 04:01:09 PM JST
try:
    CON.flush()
    while 1:
        try:
            ev = CON.wait_for_event()
            dispatcher(ev)
            CON.flush()
        except event.XAHKSkipEvent:
            print('XAHKSkipEvent!!')
            continue
except event.XAHKStopWaitForEvent:
    print('XAHKStopWaitForEvent!!')
except KeyboardInterrupt:
    pass

* Tue 18 Mar 2014 04:01:22 PM JST
from xahk import event
* Tue 18 Mar 2014 04:01:47 PM JST
dispatcher.map_notify.append(set_attributs)
dispatcher.focusin.append(focusin)
dispatcher.focusout.append(focusout)

* Tue 18 Mar 2014 04:02:10 PM JST
def set_attributs(*args, **kwargs):
    r"""SUMMARY
    
    set_attributs(*args, **kwargs)
    
    @Arguments:
    - `*args`:
    - `**kwargs`:
    
    @Return:
    """
    print('map notify')
    for win in CON.ext.list_windows():
        CON.core.ChangeWindowAttributes(
            int(win), xproto.CW.EventMask,
            [xproto.EventMask.FocusChange | xproto.EventMask.SubstructureNotify])
    CON.flush()

* Tue 18 Mar 2014 04:02:29 PM JST
    print('focus in  {} mode:{} detail:{}'.format(
        event.event, event.mode, event.detail))

* Tue 18 Mar 2014 06:38:54 PM JST
    if event.detail == 2:
        return

* Tue 18 Mar 2014 06:47:12 PM JST
    if event.detail == 2:
        return

* Tue 18 Mar 2014 06:49:21 PM JST

* Tue 18 Mar 2014 06:49:21 PM JST

* Tue 18 Mar 2014 06:49:21 PM JST
    dispatcher = kwargs['this']

* Tue 18 Mar 2014 06:50:22 PM JST
keymap = event.KeyEventDispatcher()
* Tue 18 Mar 2014 06:50:44 PM JST
keymap.register(keycode_control_q, send_shift_control_T)
* Tue 18 Mar 2014 06:52:37 PM JST
dispatcher = kwargs['this']
* Tue 18 Mar 2014 06:54:09 PM JST
54525974
* Tue 18 Mar 2014 06:54:24 PM JST
c.ext.window_type_dispatch(54525974)
* Tue 18 Mar 2014 06:54:28 PM JST
54525974
* Tue 18 Mar 2014 06:56:01 PM JST
31457321
* Tue 18 Mar 2014 06:56:15 PM JST
'Google-chrome'
* Tue 18 Mar 2014 06:57:47 PM JST
chrome_
* Tue 18 Mar 2014 06:58:14 PM JST
event.event
* Tue 18 Mar 2014 07:04:05 PM JST
press
* Tue 18 Mar 2014 10:04:54 PM JST
self
* Tue 18 Mar 2014 10:05:25 PM JST
cls, , , 
* Tue 18 Mar 2014 10:05:25 PM JST
__new__(cls, , , 
* Tue 18 Mar 2014 10:07:50 PM JST
vlaue
* Tue 18 Mar 2014 10:08:08 PM JST
  def __new__(cls):
...         value = len(cls.__members__) + 1
...         obj = object.__new__(cls)
...         obj._value_ = value
...         return obj
* Tue 18 Mar 2014 10:08:12 PM JST
  
* Tue 18 Mar 2014 10:08:16 PM JST
... 
* Tue 18 Mar 2014 10:08:21 PM JST
...
* Tue 18 Mar 2014 10:08:21 PM JST
...
* Tue 18 Mar 2014 10:08:21 PM JST
...
* Tue 18 Mar 2014 10:16:51 PM JST
1 in 
* Tue 18 Mar 2014 11:34:49 PM JST
MON = MONDAY
TUE = TUESDAY
WED = WEDNESDAY
THU = THURSDAY
FRI = FRIDAY
SAT = SATURDAY
SUN = SUNDAY

* Tue 18 Mar 2014 11:35:16 PM JST

* Tue 18 Mar 2014 11:35:23 PM JST

* Tue 18 Mar 2014 11:35:40 PM JST
WEDNESDAY
* Tue 18 Mar 2014 11:35:50 PM JST
THURSDAY
* Tue 18 Mar 2014 11:35:53 PM JST
    
* Tue 18 Mar 2014 11:36:00 PM JST
    
* Tue 18 Mar 2014 11:36:12 PM JST
SUNDAY
* Tue 18 Mar 2014 11:37:39 PM JST
SUMMARY
* Tue 18 Mar 2014 11:37:48 PM JST
    
* Tue 18 Mar 2014 11:40:03 PM JST

* Tue 18 Mar 2014 11:40:03 PM JST

* Tue 18 Mar 2014 11:40:03 PM JST
from Xlib import X

* Tue 18 Mar 2014 11:40:03 PM JST
from Xlib import X

* Tue 18 Mar 2014 11:40:03 PM JST
from Xlib import X
from Xlib.display import Display

* Tue 18 Mar 2014 11:40:16 PM JST

* Tue 18 Mar 2014 11:40:16 PM JST

* Tue 18 Mar 2014 11:40:16 PM JST
import xahk

* Tue 18 Mar 2014 11:40:24 PM JST
datetime,
* Tue 18 Mar 2014 11:41:05 PM JST

* Tue 18 Mar 2014 11:41:05 PM JST
WEEKDAY
* Tue 18 Mar 2014 11:41:06 PM JST
as WEEKDAY
* Tue 18 Mar 2014 11:41:06 PM JST
now_weekday as WEEKDAY
* Tue 18 Mar 2014 11:42:04 PM JST
monday
* Tue 18 Mar 2014 11:42:04 PM JST
Weekday.monday
* Tue 18 Mar 2014 11:42:05 PM JST
dateutil.Weekday.monday
* Tue 18 Mar 2014 11:42:05 PM JST
160]: dateutil.Weekday.monday
* Tue 18 Mar 2014 11:43:02 PM JST
 as WEEKDAY
* Tue 18 Mar 2014 11:43:04 PM JST
now_weekday
* Tue 18 Mar 2014 11:43:52 PM JST
tue
* Tue 18 Mar 2014 11:43:52 PM JST
Weekday.tue
* Tue 18 Mar 2014 11:43:52 PM JST
dateutil.Weekday.tue
* Tue 18 Mar 2014 11:49:39 PM JST
from datetime import *
* Tue 18 Mar 2014 11:56:58 PM JST

* Tue 18 Mar 2014 11:56:58 PM JST

* Tue 18 Mar 2014 11:56:58 PM JST
        datetime.__init__(self, *args, **kwargs)

* Tue 18 Mar 2014 11:57:48 PM JST
Weekdays.monday
* Tue 18 Mar 2014 11:57:50 PM JST
self.weekday
* Wed 19 Mar 2014 12:00:24 AM JST
saturday
* Wed 19 Mar 2014 12:02:15 AM JST
WEEKDAY_JDIC = {MONDAY: u'月',
               TUESDAY: u'火',
               WEDNESDAY: u'水',
               THURSDAY: u'木',
               FRIDAY: u'金',
               SATURDAY: u'土',
               SUNDAY: u'日'}

* Wed 19 Mar 2014 12:03:11 AM JST
onday    = MONDAY
* Wed 19 Mar 2014 12:04:21 AM JST

* Wed 19 Mar 2014 12:04:21 AM JST

* Wed 19 Mar 2014 12:04:21 AM JST
    mon       = MONDAY

* Wed 19 Mar 2014 12:04:22 AM JST

* Wed 19 Mar 2014 12:04:22 AM JST

* Wed 19 Mar 2014 12:04:22 AM JST
    tue       = TUESDAY

* Wed 19 Mar 2014 12:04:22 AM JST

* Wed 19 Mar 2014 12:04:23 AM JST

* Wed 19 Mar 2014 12:04:23 AM JST
    wed       = WEDNESDAY

* Wed 19 Mar 2014 12:04:23 AM JST

* Wed 19 Mar 2014 12:04:23 AM JST

* Wed 19 Mar 2014 12:04:23 AM JST
    thu       = THURSDAY

* Wed 19 Mar 2014 12:04:24 AM JST

* Wed 19 Mar 2014 12:04:24 AM JST

* Wed 19 Mar 2014 12:04:24 AM JST
    fri       = FRIDAY

* Wed 19 Mar 2014 12:04:24 AM JST

* Wed 19 Mar 2014 12:04:24 AM JST

* Wed 19 Mar 2014 12:04:24 AM JST
    sat       = SATURDAY

* Wed 19 Mar 2014 12:04:25 AM JST

* Wed 19 Mar 2014 12:04:25 AM JST

* Wed 19 Mar 2014 12:04:25 AM JST
    sun       = SUNDAY

* Wed 19 Mar 2014 12:07:52 AM JST
    def __int__(self, ):
        return self.weekday

    def __str__(self, ):
        return Weekdays(self.weekday).name


* Wed 19 Mar 2014 12:09:55 AM JST
fmt = 
* Wed 19 Mar 2014 12:10:34 AM JST
datetime
* Wed 19 Mar 2014 12:12:42 AM JST
class Weekdays(IntEnum):
    r"""Enum of Weekdays."""

    Monday    = MONDAY
    Tuesday   = TUESDAY
    Wednesday = WEDNESDAY
    Thursday  = THURSDAY
    Friday    = FRIDAY
    Saturday  = SATURDAY
    Sunday    = SUNDAY

* Wed 19 Mar 2014 12:12:56 AM JST
MONDAY
* Wed 19 Mar 2014 12:12:58 AM JST
TUESDAY
* Wed 19 Mar 2014 12:13:01 AM JST
WEDNESDAY
* Wed 19 Mar 2014 12:13:03 AM JST
THURSDAY
* Wed 19 Mar 2014 12:13:05 AM JST
FRIDAY
* Wed 19 Mar 2014 12:13:08 AM JST
SATURDAY
* Wed 19 Mar 2014 12:13:11 AM JST
SUNDAY
* Wed 19 Mar 2014 12:15:08 AM JST
self.
* Wed 19 Mar 2014 12:15:34 AM JST
self._enums
* Wed 19 Mar 2014 12:16:09 AM JST
Weekday
* Wed 19 Mar 2014 12:21:27 AM JST
weekday()
* Wed 19 Mar 2014 12:24:03 AM JST
print 
* Wed 19 Mar 2014 12:25:22 AM JST

* Wed 19 Mar 2014 12:25:22 AM JST

* Wed 19 Mar 2014 12:25:22 AM JST
now_weekday = datetime.now().weekday

* Wed 19 Mar 2014 12:25:46 AM JST
now_weekday
* Wed 19 Mar 2014 12:26:19 AM JST

* Wed 19 Mar 2014 12:26:19 AM JST

* Wed 19 Mar 2014 12:26:19 AM JST
from t1.dateutil import Weekdays

* Wed 19 Mar 2014 12:28:18 AM JST
dateutil.Weekdays.Monday
* Wed 19 Mar 2014 12:28:20 AM JST
Monday
* Wed 19 Mar 2014 12:28:42 AM JST
Monday,
* Wed 19 Mar 2014 12:29:14 AM JST
Saturday
* Wed 19 Mar 2014 12:29:28 AM JST
Sunday
* Wed 19 Mar 2014 12:30:00 AM JST
            
* Wed 19 Mar 2014 12:30:25 AM JST
Thursday
* Wed 19 Mar 2014 12:30:32 AM JST
Thursday == 
* Wed 19 Mar 2014 12:30:32 AM JST
Weekdays.Thursday == 
* Wed 19 Mar 2014 12:30:39 AM JST
Saturday
* Wed 19 Mar 2014 12:30:48 AM JST
Saturday != 
* Wed 19 Mar 2014 12:30:49 AM JST
Weekdays.Saturday != 
* Wed 19 Mar 2014 12:31:12 AM JST
Wednesday
* Wed 19 Mar 2014 12:31:18 AM JST
Wednesday == 
* Wed 19 Mar 2014 12:31:18 AM JST
Weekdays.Wednesday == 
* Wed 19 Mar 2014 12:31:23 AM JST
Thursday
* Wed 19 Mar 2014 12:31:32 AM JST
Thursday != 
* Wed 19 Mar 2014 12:31:32 AM JST
Weekdays.Thursday != 
* Wed 19 Mar 2014 12:32:12 AM JST
Thursday
* Wed 19 Mar 2014 12:32:21 AM JST
Thursday == 
* Wed 19 Mar 2014 12:32:21 AM JST
Weekdays.Thursday == 
* Wed 19 Mar 2014 12:32:52 AM JST
datetime
* Wed 19 Mar 2014 12:32:56 AM JST

* Wed 19 Mar 2014 12:32:56 AM JST

* Wed 19 Mar 2014 12:32:56 AM JST
from datetime import datetime

* Wed 19 Mar 2014 12:43:45 AM JST
dict
* Wed 19 Mar 2014 12:43:46 AM JST
default dict
* Wed 19 Mar 2014 12:44:41 AM JST
clear()
* Wed 19 Mar 2014 12:44:58 AM JST
delete_all
* Wed 19 Mar 2014 12:48:16 AM JST

* Wed 19 Mar 2014 12:48:16 AM JST

* Wed 19 Mar 2014 12:48:16 AM JST
    - `default`:

* Wed 19 Mar 2014 12:48:41 AM JST
dict
* Wed 19 Mar 2014 12:50:08 AM JST
recursive
* Wed 19 Mar 2014 12:50:09 AM JST
recursive_update
* Wed 19 Mar 2014 01:00:13 AM JST
>>> lis=ListUtil((1,2,3,4,5,6,7,8,9))
* Wed 19 Mar 2014 01:00:23 AM JST
>>> lis.chunks(3)
* Wed 19 Mar 2014 01:00:29 AM JST
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
* Wed 19 Mar 2014 01:00:35 AM JST
>>> lis.chunks(2)
* Wed 19 Mar 2014 01:00:40 AM JST
[[1, 2], [3, 4], [5, 6], [7, 8]]
* Wed 19 Mar 2014 01:01:49 AM JST
SUMMARY
* Wed 19 Mar 2014 01:03:19 AM JST
list
* Wed 19 Mar 2014 01:03:20 AM JST
chunks list
* Wed 19 Mar 2014 01:03:20 AM JST
Make chunks list
* Wed 19 Mar 2014 01:08:13 AM JST
    def __repr__(self, ):
        fmt = '{0.__class__.__name__}({1}, length={0._length})'.format
        return fmt(self, super(LimitList, self).__repr__())

    def __add__(self, other):
        if isinstance(other, LimitList):
            length = self._length + other._length
            return self.__class__(list(self) + list(other), length=length)
        return self.__class__(list(self) + list(other), length=self._length)

    def __radd__(self, other):
        if isinstance(other, LimitList):
            length = self._length + other._length
            return self.__class__(list(other) + list(self), length=length)
        return self.__class__(list(other) + list(self), length=self._length)

    def __iadd__(self, other):
        if self._length < len(self) + len(other):
            raise MaxLimitedError()
        return super(LimitList, self).__iadd__(other)


* Wed 19 Mar 2014 01:24:09 AM JST
absolute()
* Wed 19 Mar 2014 01:24:16 AM JST
exists()
* Wed 19 Mar 2014 01:25:24 AM JST
is_dir()
* Wed 19 Mar 2014 01:33:28 AM JST
relative_to
* Wed 19 Mar 2014 01:35:43 AM JST
relative_to?
* Wed 19 Mar 2014 01:36:46 AM JST
impor
* Wed 19 Mar 2014 01:37:52 AM JST
expanduser
* Wed 19 Mar 2014 01:43:01 AM JST

* Wed 19 Mar 2014 01:43:29 AM JST

* Wed 19 Mar 2014 01:43:29 AM JST

* Wed 19 Mar 2014 01:43:29 AM JST
import path

* Wed 19 Mar 2014 01:43:57 AM JST

* Wed 19 Mar 2014 01:43:57 AM JST

* Wed 19 Mar 2014 01:43:57 AM JST
BASEDIR = os.path.expanduser('~/recipe')

* Wed 19 Mar 2014 02:04:48 AM JST
keymap
* Wed 19 Mar 2014 02:04:59 AM JST
KeyEventDispatcher
* Wed 19 Mar 2014 02:08:01 AM JST
KeyEventDispatcher
* Wed 19 Mar 2014 02:10:42 AM JST
event
* Wed 19 Mar 2014 02:11:13 AM JST
KeyEventDispatcher
* Wed 19 Mar 2014 02:16:08 AM JST

* Wed 19 Mar 2014 02:16:10 AM JST
chrome_keymap
* Wed 19 Mar 2014 02:16:32 AM JST
grab_keys
* Wed 19 Mar 2014 02:21:37 AM JST
event.KeyEventDispatcher()
* Wed 19 Mar 2014 02:30:02 AM JST
dir(
* Wed 19 Mar 2014 02:33:23 AM JST

* Wed 19 Mar 2014 02:33:24 AM JST

* Wed 19 Mar 2014 02:33:24 AM JST
        print(kmap)

* Wed 19 Mar 2014 02:49:55 AM JST

* Wed 19 Mar 2014 02:49:55 AM JST

* Wed 19 Mar 2014 02:49:55 AM JST
        print('DEBUG-1-handler.py')

* Wed 19 Mar 2014 02:49:58 AM JST

* Wed 19 Mar 2014 02:49:58 AM JST

* Wed 19 Mar 2014 02:49:58 AM JST
        print('DEBUG-2-handler.py')

* Wed 19 Mar 2014 03:09:19 AM JST
KeyEventDispatcher
* Wed 19 Mar 2014 03:15:21 AM JST
keymap
* Wed 19 Mar 2014 07:18:23 AM JST
StateDispatcherAbstract
* Wed 19 Mar 2014 07:22:53 AM JST
event.KeyEventDispatcher
* Wed 19 Mar 2014 07:23:56 AM JST
new.update(new)
* Wed 19 Mar 2014 07:34:39 AM JST
new
* Wed 19 Mar 2014 07:36:20 AM JST
    def update(self, other):
        r"""SUMMARY

        update(other)

        @Arguments:
        - `other`:

        @Return:
        """
        if not isinstance(other, self.__class__):
            raise StandardError()
        _recursive_update(self._data, other)

    def copy(self, ):
        r"""SUMMARY

        copy()

        @Return:
        """
        new = self.__class__()
        new.update(self)
        return new


* Wed 19 Mar 2014 07:36:43 AM JST
    def update(self, other):
        r"""SUMMARY

        update(other)

        @Arguments:
        - `other`:

        @Return:
        """
        if not isinstance(other, self.__class__):
            raise StandardError()
        _recursive_update(self._data, other)

    def copy(self, ):
        r"""SUMMARY

        copy()

        @Return:
        """
        new = self.__class__()
        new.update(self)
        return new

* Wed 19 Mar 2014 07:50:38 AM JST
_data
* Wed 19 Mar 2014 07:51:14 AM JST
_data
* Wed 19 Mar 2014 08:00:27 AM JST
middle_button_release
* Wed 19 Mar 2014 08:52:25 AM JST
print('senddown# detail: {0.detail}, state: {0.state}')
* Wed 19 Mar 2014 08:56:17 AM JST
EventHooks
* Wed 19 Mar 2014 08:57:18 AM JST
    def __call__(self, event, *args, **kwargs):
        if self._keymap:
            self._keymap(*args, **kwargs)
        self.run_hooks(event, *args, **kwargs)

* Wed 19 Mar 2014 08:59:12 AM JST
xproto.ModMask.Lock,
* Wed 19 Mar 2014 09:47:15 AM JST

* Wed 19 Mar 2014 09:47:15 AM JST

* Wed 19 Mar 2014 09:47:15 AM JST
        self._keymap.grab_key

* Wed 19 Mar 2014 09:48:26 AM JST
KeyEventHooks
* Wed 19 Mar 2014 09:51:35 AM JST
ev.event
* Wed 19 Mar 2014 09:52:42 AM JST
ev.event
* Wed 19 Mar 2014 09:53:58 AM JST
KeyEventHooks
* Wed 19 Mar 2014 10:13:02 PM JST

* Wed 19 Mar 2014 10:13:02 PM JST

* Wed 19 Mar 2014 10:13:02 PM JST
        print(chrome_keymap)

* Wed 19 Mar 2014 10:16:56 PM JST

* Wed 19 Mar 2014 10:16:56 PM JST

* Wed 19 Mar 2014 10:16:56 PM JST
prin

* Wed 19 Mar 2014 10:26:28 PM JST
print('')
* Wed 19 Mar 2014 10:26:43 PM JST

* Wed 19 Mar 2014 10:26:43 PM JST

* Wed 19 Mar 2014 10:26:43 PM JST
        print(kmap._data)

* Wed 19 Mar 2014 10:26:48 PM JST

* Wed 19 Mar 2014 10:26:48 PM JST

* Wed 19 Mar 2014 10:26:48 PM JST
        print

* Wed 19 Mar 2014 10:27:02 PM JST
keymap
* Wed 19 Mar 2014 10:35:17 PM JST
_data
* Thu 20 Mar 2014 01:08:14 AM JST
kd.register(code, tes)
* Thu 20 Mar 2014 01:33:23 AM JST
dispatcher.keypress.set_keymap(kmap, ev.event)
* Thu 20 Mar 2014 01:33:51 AM JST
kmap
* Thu 20 Mar 2014 04:25:06 PM JST
        if self._globalmap:
            self._globalmap.grab_keys(window)

* Thu 20 Mar 2014 04:25:10 PM JST
        if self._globalmap:
            self._globalmap.grab_keys(window)

* Thu 20 Mar 2014 04:26:57 PM JST
self.
* Thu 20 Mar 2014 04:30:40 PM JST
*args, **kwargs
* Thu 20 Mar 2014 04:33:05 PM JST
_missing_func = lambda *args, **kwargs: None
* Thu 20 Mar 2014 04:33:38 PM JST
lambda *args, **kwargs: None
* Thu 20 Mar 2014 04:33:44 PM JST

* Thu 20 Mar 2014 04:33:44 PM JST

* Thu 20 Mar 2014 04:33:44 PM JST
    _missing_func = lambda *args, **kwargs: None

* Thu 20 Mar 2014 04:34:23 PM JST
self._missing_func
* Thu 20 Mar 2014 09:48:04 PM JST
from t1.dateutil import now_weekday
* Thu 20 Mar 2014 09:50:20 PM JST
14]: 
* Thu 20 Mar 2014 11:14:42 PM JST
from ref import recipe
* Thu 20 Mar 2014 11:14:48 PM JST
recip = recipe.Recipe()
* Thu 20 Mar 2014 11:14:54 PM JST
new, _ = recip.lotate_weeklink()
* Fri 21 Mar 2014 12:20:00 AM JST
ahk_class
* Fri 21 Mar 2014 06:26:59 AM JST
regexp_name
* Fri 21 Mar 2014 06:52:10 AM JST
make_list_append
* Fri 21 Mar 2014 07:04:19 AM JST
        lis, append = make_list_append()
        for win in self._winlist:
            if value == getattr(win, attrname, ''):
                append(win)
        return WindowsList(lis)

* Fri 21 Mar 2014 07:04:23 AM JST
WindowsList
* Fri 21 Mar 2014 07:05:38 AM JST
_winlist
* Fri 21 Mar 2014 07:06:08 AM JST
win
* Fri 21 Mar 2014 07:06:12 AM JST
win
* Fri 21 Mar 2014 07:06:15 AM JST
win
* Fri 21 Mar 2014 07:06:52 AM JST
    def _get_regexp_wins(self, attrname, restring):
        r"""SUMMARY

        _iter_regexp(attrname, )

        @Arguments:
        - `attrname`:


        @Return:
        """
        lis, append = make_list_append()
        for win in self._winlist:
            if re.search(restring, getattr(win, attrname, '')) is not None:
                append(win)
        return WindowsList(lis)

* Fri 21 Mar 2014 07:07:41 AM JST
WindowsList
* Fri 21 Mar 2014 07:08:47 AM JST
    def match_func(self, bool_func):
        r"""SUMMARY

        comfirm(bool_func)

        @Arguments:
        - `bool_func`:

        @Return:
        """
        lis, append = make_list_append()
        for win in self._winlist:
            if bool_func(win):
                append(win)
        return WindowsList(lis)

* Fri 21 Mar 2014 07:08:57 AM JST
win
* Fri 21 Mar 2014 07:08:59 AM JST
win
* Fri 21 Mar 2014 07:09:01 AM JST
win
* Fri 21 Mar 2014 07:09:05 AM JST
WindowsList
* Fri 21 Mar 2014 07:09:25 AM JST
    def __repr__(self, ):
        return '{0.__class__.__name__}({1})'.format(self, list(self._winlist))

    def __iter__(self, ):
        return iter(self._winlist)


* Fri 21 Mar 2014 07:10:51 AM JST
    def __add__(self, other):
        if not isinstance(other, WindowsList):
            raise ValueError()
        return WindowsList(set(list(self) + list(other)))

* Fri 21 Mar 2014 07:10:56 AM JST
WindowsList
* Fri 21 Mar 2014 07:11:18 AM JST
WindowsList
* Fri 21 Mar 2014 07:12:10 AM JST
    def __sub__(self, other):
        if not isinstance(other, (WindowsList, int)):
            raise ValueError()
        lis = self._winlist[:]
        if isinstance(other, int):
            lis.remove(other)
        else:
            for win in other:
                lis.remove(win)
        return WindowsList(lis)

    def __iadd__(self, other):
        if not isinstance(other, WindowsList):
            raise ValueError()
        self._winlist = list(set(self._winlist + list(other)))

    def __isub__(self, other):
        if not isinstance(other, (WindowsList, int)):
            raise ValueError()
        if isinstance(other, int):
            self._winlist.remove(other)
        else:
            for win in other:
                self._winlist.remove(win)

    def __getitem__(self, index):
        return self._winlist[index]

    def __nonzero__(self, ):
        return bool(self._winlist)

    def __contains__(self, num):
        return num in self._winlist

    def __len__(self, ):
        return len(self._winlist)

* Fri 21 Mar 2014 07:12:38 AM JST
WindowsList
* Fri 21 Mar 2014 07:14:20 AM JST
ListFilterAbstract
* Fri 21 Mar 2014 07:15:19 AM JST
object
* Fri 21 Mar 2014 07:25:14 AM JST
    def _match_list(self, attr, value):
        r"""SUMMARY

        _match_list(attr, value)

        @Arguments:
        - `attr`:
        - `value`:

        @Return:
        """
        lis, append = make_list_append()
        for item in self._list:
            if value == getattr(item, attr, ''):
                append(item)
        return self.__class__(lis)

* Fri 21 Mar 2014 07:35:07 AM JST
Keymaps
* Fri 21 Mar 2014 07:35:12 AM JST
ListFilter
* Fri 21 Mar 2014 07:42:46 AM JST
if _sys.version_info < (2, 4):
    from sets import Set as set


* Fri 21 Mar 2014 07:45:53 AM JST
class Keymaps(object):
    r"""SUMMARY
    """

    def __init__(self, keymaps, globalmap=None):
        r"""

        @Arguments:
        - `keymaps`:
        - `globalmap`:
        """
        self._keymaps = keymaps
        self._globalmap = globalmap
        self._missing_func = lambda *args, **kwargs: None

    def set_misisng_function(self, func):
        r"""SUMMARY

        set_misisng_function(func)

        @Arguments:
        - `func`:

        @Return:
        """
        self._missing_func = func

    def grab_keymaps(self, window):
        r"""SUMMARY

        grab_keymaps()

        @Return:
        """
        for keymap in self._keymaps:
            keymap.grab_keys(window)

    def grab_globalmap(self, window):
        r"""SUMMARY

        grab_globalmap(window)

        @Arguments:
        - `window`:

        @Return:
        """
        if self._globalmap:
            self._globalmap.grab_keys(window)

    def grab_keys(self, window):
        r"""SUMMARY

        grab_keys(window)

        @Arguments:
        - `window`:

        @Return:
        """
        self.grab_globalmap(window)
        self.grab_keymaps(window)

    def ungrab_keymaps(self, window):
        r"""SUMMARY

        ungrab_keymaps(window)

        @Arguments:
        - `window`:

        @Return:
        """
        for keymap in self._keymaps:
            keymap.ungrab_keys(window)

    def ungrab_globalmap(self, window):
        r"""SUMMARY

        ungrab_globalmap(window)

        @Arguments:
        - `window`:

        @Return:
        """
        if self._globalmap:
            self._globalmap.ungrab_keys(window)

    def handle_event(self, event, *args, **kwargs):
        r"""SUMMARY

        handle_event(event)

        @Arguments:
        - `event`:

        @Return:
        """
        for keymap in self._keymaps:
            if event.state in keymap and event.detail in keymap[event.state]:
                keymap(event, *args, **kwargs)
                return
        if self._globalmap:
            self._globalmap(event, *args, **kwargs)
            return
        self._missing_func(event, *args, **kwargs)

    def __call__(self, event, *args, **kwargs):
        self.handle_event(event, *args, **kwargs)



* Fri 21 Mar 2014 09:25:40 AM JST
_globalmap
* Fri 21 Mar 2014 09:28:57 AM JST
object
* Fri 21 Mar 2014 09:29:02 AM JST

* Fri 21 Mar 2014 09:29:02 AM JST

* Fri 21 Mar 2014 09:29:02 AM JST
    _list = set()

* Fri 21 Mar 2014 09:34:19 AM JST
 KeymapFilter
* Fri 21 Mar 2014 09:35:21 AM JST
KeyEventDispatcher
* Fri 21 Mar 2014 09:36:32 AM JST
object
* Fri 21 Mar 2014 09:44:50 AM JST

* Fri 21 Mar 2014 09:45:18 AM JST
class Keymap(KeyEventDispatcher):
    r"""SUMMARY
    """
    
    def __init__(self, name=None, wmclass=None, types_name=None,
                 pid=None, id_=None):
        r"""
        """
        self.name = name or ''
        self.wmclass = wmclass or ''
        self.types_name = types_name or ''
        self.pid = pid or 0
        self.id = id_ or 0


class Keymaps(object):
    r"""SUMMARY
    """

    def __init__(self, keymaps, globalmap=None):
        r"""

        @Arguments:
        - `keymaps`:
        - `globalmap`:
        """
        self._keymaps = list(keymaps)
        self._globalmap = globalmap
        self._missing_func = lambda *args, **kwargs: None

    def set_misisng_function(self, func):
        r"""SUMMARY

        set_misisng_function(func)

        @Arguments:
        - `func`:

        @Return:
        """
        self._missing_func = func

    def grab_keymaps(self, window):
        r"""SUMMARY

        grab_keymaps()

        @Return:
        """
        for keymap in self._keymaps:
            keymap.grab_keys(window)

    def grab_globalmap(self, window):
        r"""SUMMARY

        grab_globalmap(window)

        @Arguments:
        - `window`:

        @Return:
        """
        if self._globalmap:
            self._globalmap.grab_keys(window)

    def grab_keys(self, window):
        r"""SUMMARY

        grab_keys(window)

        @Arguments:
        - `window`:

        @Return:
        """
        self.grab_globalmap(window)
        self.grab_keymaps(window)

    def ungrab_keymaps(self, window):
        r"""SUMMARY

        ungrab_keymaps(window)

        @Arguments:
        - `window`:

        @Return:
        """
        for keymap in self._keymaps:
            keymap.ungrab_keys(window)

    def ungrab_globalmap(self, window):
        r"""SUMMARY

        ungrab_globalmap(window)

        @Arguments:
        - `window`:

        @Return:
        """
        if self._globalmap:
            self._globalmap.ungrab_keys(window)

    def handle_event(self, event, *args, **kwargs):
        r"""SUMMARY

        handle_event(event)

        @Arguments:
        - `event`:

        @Return:
        """
        for keymap in self._keymaps:
            if event.state in keymap and event.detail in keymap[event.state]:
                keymap(event, *args, **kwargs)
                return
        if self._globalmap:
            self._globalmap(event, *args, **kwargs)
            return
        self._missing_func(event, *args, **kwargs)

    def __call__(self, event, *args, **kwargs):
        self.handle_event(event, *args, **kwargs)



* Fri 21 Mar 2014 09:46:03 AM JST
set
* Fri 21 Mar 2014 09:52:28 AM JST
add
* Fri 21 Mar 2014 10:06:42 AM JST
    def get_globalmap(self, ):
        r"""SUMMARY
        
        get_globalmap()
        
        @Return:
        """
        return self._globalmap


* Fri 21 Mar 2014 10:06:50 AM JST
    def set_globalmap(self, keymap):
        r"""SUMMARY
        
        set_globalmap(keymap)
        
        @Arguments:
        - `keymap`:
        
        @Return:
        """
        # if not isinstance(keymap, ):
        self._globalmap = keymap

    def get_globalmap(self, ):
        r"""SUMMARY
        
        get_globalmap()
        
        @Return:
        """
        return self._globalmap


* Fri 21 Mar 2014 10:07:15 AM JST
StaticGlobalMap
* Fri 21 Mar 2014 10:09:14 AM JST
StaticGlobalMap
* Fri 21 Mar 2014 10:09:40 AM JST
@staticmethod
* Fri 21 Mar 2014 10:13:12 AM JST

* Fri 21 Mar 2014 10:13:12 AM JST

* Fri 21 Mar 2014 10:13:12 AM JST
    _globalmap = None

* Fri 21 Mar 2014 10:15:31 AM JST
self, 
* Fri 21 Mar 2014 10:16:39 AM JST
@staticmethod
* Fri 21 Mar 2014 10:16:46 AM JST
self
* Fri 21 Mar 2014 10:18:20 AM JST

* Fri 21 Mar 2014 10:18:21 AM JST
event
* Fri 21 Mar 2014 10:19:40 AM JST
keycode_escape, quit
* Fri 21 Mar 2014 10:19:51 AM JST
keymap.register(keycode_control_n, send_down)
* Fri 21 Mar 2014 10:19:55 AM JST
key
* Fri 21 Mar 2014 10:20:16 AM JST
app
* Fri 21 Mar 2014 10:20:16 AM JST
Keymap.app
* Fri 21 Mar 2014 10:22:09 AM JST
'Google-chrome'
* Fri 21 Mar 2014 10:34:04 AM JST
keymaps
* Fri 21 Mar 2014 10:34:57 AM JST
set_global_ma
* Fri 21 Mar 2014 10:37:39 AM JST
grab_keymaps
* Fri 21 Mar 2014 10:39:29 AM JST
'Google-chrome'
* Fri 21 Mar 2014 10:41:23 AM JST
# keymap.KeymapList.append(globalmap)
* Fri 21 Mar 2014 10:41:27 AM JST
globalmap
* Fri 21 Mar 2014 10:42:07 AM JST
keymap.Keymaps(lis, keymap.StaticGlobalMap.get_globalmap())
* Fri 21 Mar 2014 10:42:19 AM JST
keymap
* Fri 21 Mar 2014 10:46:31 AM JST
_keymap_list
* Fri 21 Mar 2014 10:51:31 AM JST

* Fri 21 Mar 2014 10:51:31 AM JST

* Fri 21 Mar 2014 10:51:31 AM JST
        self._globalmap = None

* Fri 21 Mar 2014 10:52:45 AM JST
    def __call__(self, event, *args, **kwargs):
        if self._keymap:
            self._keymap(event, *args, **kwargs)
        self.run_hooks(event, *args, **kwargs)


* Fri 21 Mar 2014 10:53:39 AM JST
111111111111111111111111111111111111111111111111111111111#                            
QU /root/.pylib/xahk#                                                          
QU /root/.pylib/xahk#                   
QU /root/.pylib/xahk# cd ~/work/xlibcpp/pyx/
QU /root/work/xlibcpp/pyx# cd ~/work/xlibcpp/pyx/
QU /root/work/xlibcpp/pyx# python handler.py
DEBUG-1-hooks.py
DEBUG-1-hooks
* Fri 21 Mar 2014 10:55:07 AM JST

* Fri 21 Mar 2014 10:55:07 AM JST

* Fri 21 Mar 2014 10:55:07 AM JST
        self._globalmap = None

* Fri 21 Mar 2014 10:56:10 AM JST

* Fri 21 Mar 2014 10:56:10 AM JST

* Fri 21 Mar 2014 10:56:10 AM JST
            print('DEBUG-2-keymap.py')

* Fri 21 Mar 2014 10:57:48 AM JST

* Fri 21 Mar 2014 10:57:48 AM JST

* Fri 21 Mar 2014 10:57:48 AM JST
keymaps = keymap.Keymaps([], globalmap)

* Fri 21 Mar 2014 10:58:31 AM JST
ke
* Fri 21 Mar 2014 11:00:55 AM JST
    def grab_keys(self, window):
        r"""SUMMARY

        grab_keys(window)

        @Arguments:
        - `window`:

        @Return:
        """
        print('DEBUG-2-keymap.py')
        self.grab_globalmap(window)
        self.grab_keymaps(window)

* Fri 21 Mar 2014 11:01:15 AM JST

* Fri 21 Mar 2014 11:01:15 AM JST

* Fri 21 Mar 2014 11:01:15 AM JST
        print('DEBUG-2-keymap.py')

* Fri 21 Mar 2014 11:08:07 AM JST

* Fri 21 Mar 2014 11:08:11 AM JST
keymaps
* Fri 21 Mar 2014 11:10:26 AM JST
key
* Fri 21 Mar 2014 11:10:28 AM JST
key
* Fri 21 Mar 2014 11:10:33 AM JST
tesmap
* Fri 21 Mar 2014 11:13:39 AM JST
tesmap
* Fri 21 Mar 2014 11:14:30 AM JST

* Fri 21 Mar 2014 11:14:30 AM JST

* Fri 21 Mar 2014 11:14:30 AM JST
tesmap.grab_keys(int(ROOT))

* Fri 21 Mar 2014 11:14:44 AM JST
globalmap.register(keycode1, press10)
* Fri 21 Mar 2014 11:14:48 AM JST
global
* Fri 21 Mar 2014 11:14:59 AM JST
QU /root/.pylib/xahk# 1111111111111111111111111111111111111111111111111111111111
* Fri 21 Mar 2014 11:18:03 AM JST

* Fri 21 Mar 2014 11:18:03 AM JST

* Fri 21 Mar 2014 11:18:03 AM JST
            print('DEBUG-2-__init__.py')

* Fri 21 Mar 2014 11:19:05 AM JST
keycode1
* Fri 21 Mar 2014 11:25:50 AM JST

* Fri 21 Mar 2014 11:25:50 AM JST

* Fri 21 Mar 2014 11:25:50 AM JST
        print('DEBUG-1-sendkey.py')

* Fri 21 Mar 2014 11:27:00 AM JST
Keymap
* Fri 21 Mar 2014 11:28:23 AM JST
Keymap
* Fri 21 Mar 2014 11:31:43 AM JST
xconnection
* Fri 21 Mar 2014 11:31:45 AM JST
xconnection
* Fri 21 Mar 2014 11:39:47 AM JST
#     addmods = [
#         0,
#         xcb.xproto.ModMask.Lock,
#         xcb.xproto.ModMask._2,
#         xcb.xproto.ModMask._2 | xcb.xproto.ModMask.Lock
#         ]

#     # for mod in addmods:
#     CON.core.UngrabButton(
#             key, # button
#             window, # grab_window
#             modifiers | xcb.xproto.ModMask._2, # modifiers
#         )

* Fri 21 Mar 2014 11:45:17 AM JST
, display=''
* Fri 21 Mar 2014 12:07:20 PM JST
keycode1
* Fri 21 Mar 2014 12:08:21 PM JST
CON.flush()
* Fri 21 Mar 2014 12:08:44 PM JST
CON = xahk.xconnection.Connection(display='')

ROOT = CON.ext.get_root()

* Fri 21 Mar 2014 12:09:13 PM JST
import xahk

* Fri 21 Mar 2014 12:09:25 PM JST
CON = xahk.xconnection.Connection(display='')

ROOT = CON.ext.get_root()

* Fri 21 Mar 2014 12:09:42 PM JST
keycode1 = sendkey.KeyCode(10, 0, display='')
* Fri 21 Mar 2014 12:09:53 PM JST
from xahk import sendkey
* Fri 21 Mar 2014 12:12:04 PM JST
ev = CON.wait_for_event()
* Fri 21 Mar 2014 12:15:05 PM JST
sendkey.KeyCode(10, 16, display='')
* Fri 21 Mar 2014 12:15:22 PM JST
sendkey.KeyCode(10, 0, display='').grab_key(482)
* Fri 21 Mar 2014 12:15:28 PM JST

* Fri 21 Mar 2014 12:15:36 PM JST

* Fri 21 Mar 2014 12:17:49 PM JST
xcb.xproto.ModMask._2
* Fri 21 Mar 2014 12:18:33 PM JST
xproto.GrabMode.Async, xproto.GrabMode.Async
* Fri 21 Mar 2014 12:19:02 PM JST
c.core.GrabKey(True, 482, 0, 10, xcb.xproto.GrabMode.Async, xcb.xproto.GrabMode.Async)
* Fri 21 Mar 2014 12:20:51 PM JST
self.
* Fri 21 Mar 2014 12:22:28 PM JST
globalmap
* Fri 21 Mar 2014 12:23:32 PM JST

* Fri 21 Mar 2014 12:23:32 PM JST

* Fri 21 Mar 2014 12:23:32 PM JST
            print('DEBUG-4-keymap.py')

* Fri 21 Mar 2014 12:23:34 PM JST

* Fri 21 Mar 2014 12:23:34 PM JST

* Fri 21 Mar 2014 12:23:34 PM JST
            print('DEBUG-3-keymap.py')

* Fri 21 Mar 2014 12:23:37 PM JST

* Fri 21 Mar 2014 12:23:37 PM JST

* Fri 21 Mar 2014 12:23:37 PM JST
        print('DEBUG-2-keymap.py')

* Fri 21 Mar 2014 12:23:43 PM JST

* Fri 21 Mar 2014 12:23:43 PM JST

* Fri 21 Mar 2014 12:23:43 PM JST
        print('DEBUG-1-keymap.py')

* Fri 21 Mar 2014 12:26:40 PM JST

* Fri 21 Mar 2014 12:26:40 PM JST

* Fri 21 Mar 2014 12:26:40 PM JST
        print('DEBUG-1-hooks.py')

* Fri 21 Mar 2014 12:26:57 PM JST

* Fri 21 Mar 2014 12:26:58 PM JST

* Fri 21 Mar 2014 12:26:58 PM JST
        print(lis)

* Fri 21 Mar 2014 12:30:23 PM JST
net_active_window
* Fri 21 Mar 2014 12:32:20 PM JST
keymap.register(keycode_control_k, send_up)
* Fri 21 Mar 2014 12:32:30 PM JST
key
* Fri 21 Mar 2014 12:33:51 PM JST

* Fri 21 Mar 2014 12:34:00 PM JST
keycode_control_n
* Fri 21 Mar 2014 12:43:56 PM JST
# DISPATCHER
dispatcher = event.EventDispatcher()


* Fri 21 Mar 2014 02:01:57 PM JST
USE_FOREGROUND_WINDOW
* Fri 21 Mar 2014 02:05:37 PM JST
WinExist
* Fri 21 Mar 2014 02:10:02 PM JST
WindowSearch
* Sat 22 Mar 2014 06:31:55 AM JST
abstractmethod
* Sat 22 Mar 2014 06:32:45 AM JST
load_keymap
* Sat 22 Mar 2014 06:33:55 AM JST
@abstractmethod
* Sat 22 Mar 2014 06:42:37 AM JST

* Sat 22 Mar 2014 06:42:37 AM JST

* Sat 22 Mar 2014 06:42:37 AM JST
        self.name = name or ''

* Sat 22 Mar 2014 06:42:37 AM JST
        self.name = name or ''

* Sat 22 Mar 2014 06:42:37 AM JST
        self.name = name or ''
        self.wmclass = wmclass or ''

* Sat 22 Mar 2014 06:42:37 AM JST
        self.name = name or ''
        self.wmclass = wmclass or ''

* Sat 22 Mar 2014 06:42:37 AM JST
        self.name = name or ''
        self.wmclass = wmclass or ''
        self.types_name = types_name or ''

* Sat 22 Mar 2014 06:42:38 AM JST
        self.name = name or ''
        self.wmclass = wmclass or ''
        self.types_name = types_name or ''

* Sat 22 Mar 2014 06:42:38 AM JST
        self.name = name or ''
        self.wmclass = wmclass or ''
        self.types_name = types_name or ''
        self.pid = pid or 0

* Sat 22 Mar 2014 06:42:39 AM JST
        self.name = name or ''
        self.wmclass = wmclass or ''
        self.types_name = types_name or ''
        self.pid = pid or 0

* Sat 22 Mar 2014 06:42:39 AM JST
        self.name = name or ''
        self.wmclass = wmclass or ''
        self.types_name = types_name or ''
        self.pid = pid or 0
        self.id = id_ or 0

* Sat 22 Mar 2014 06:44:27 AM JST
class StaticGlobalMap(object):
    r"""SUMMARY
    """
    
    _globalmap = None

    @staticmethod
    def set_globalmap(keymap):
        r"""SUMMARY
        
        set_globalmap(keymap)
        
        @Arguments:
        - `keymap`:
        
        @Return:
        """
        # if not isinstance(keymap, ):
        StaticGlobalMap._globalmap = keymap

    @staticmethod
    def get_globalmap():
        r"""SUMMARY
        
        get_globalmap()
        
        @Return:
        """
        return StaticGlobalMap._globalmap

    
class KeymapList(object):
    r"""SUMMARY
    """
    _keymap_list = [] # for static

    @staticmethod
    def get_filter():
        r"""SUMMARY
        
        get_filter()
        
        @Return:
        """
        return KeymapsFilter(KeymapList._keymap_list)

    @staticmethod
    def append(keymap):
        r"""SUMMARY
        
        append(keymap)
        
        @Arguments:
        - `keymap`:
        
        @Return:
        """
        KeymapList._keymap_list.append(keymap)

    def __iter__(self, ):
        return iter(self._keymap_list)



* Sat 22 Mar 2014 06:50:31 AM JST
make_list_append
* Sat 22 Mar 2014 06:54:40 AM JST
append
* Sat 22 Mar 2014 06:54:40 AM JST
list_append
* Sat 22 Mar 2014 06:54:41 AM JST
make_list_append
* Sat 22 Mar 2014 07:02:59 AM JST
    def load_keymap(self, ):
        pass

    def ismatch(self, window):
        pass

* Sat 22 Mar 2014 07:03:32 AM JST
    priority = 2

    def load_keymap(self, ):
        pass

    def ismatch(self, window):
        pass

* Sat 22 Mar 2014 07:04:20 AM JST

* Sat 22 Mar 2014 07:04:21 AM JST
ChromeKeymap()
* Sat 22 Mar 2014 07:04:30 AM JST

* Sat 22 Mar 2014 07:04:32 AM JST
Emacs
* Sat 22 Mar 2014 07:11:13 AM JST
super
* Sat 22 Mar 2014 07:11:32 AM JST
value=
* Sat 22 Mar 2014 07:11:39 AM JST
iterable
* Sat 22 Mar 2014 07:13:10 AM JST
__getitem__
* Sat 22 Mar 2014 07:15:00 AM JST
def __setslice__(self, i, j, other):
* Sat 22 Mar 2014 07:15:21 AM JST
def __add__(self, other):
* Sat 22 Mar 2014 07:15:36 AM JST
def __radd__(self, other):
* Sat 22 Mar 2014 07:15:49 AM JST
def __iadd__(self, other):
* Sat 22 Mar 2014 07:16:15 AM JST
def __mul__(self, n):
* Sat 22 Mar 2014 07:16:26 AM JST
def __imul__(self, n):
* Sat 22 Mar 2014 07:18:46 AM JST
extend
* Sat 22 Mar 2014 07:22:31 AM JST

* Sat 22 Mar 2014 07:22:31 AM JST

* Sat 22 Mar 2014 07:22:31 AM JST
        self.sort()

* Sat 22 Mar 2014 07:23:01 AM JST

* Sat 22 Mar 2014 07:23:01 AM JST

* Sat 22 Mar 2014 07:23:01 AM JST
        self.sort()

* Sat 22 Mar 2014 07:24:27 AM JST

* Sat 22 Mar 2014 07:24:27 AM JST

* Sat 22 Mar 2014 07:24:27 AM JST
        self.sort()

* Sat 22 Mar 2014 07:27:04 AM JST
self.__class__(
* Sat 22 Mar 2014 07:28:24 AM JST
s=sortlist.SortedList()
ss=sortlist.SortedList()
s.append(2)
s.append(5)
s.append(7)
ss.append(3)
ss.append(0)
ss.append(39)

* Sat 22 Mar 2014 07:29:46 AM JST
SortedList
* Sat 22 Mar 2014 07:33:02 AM JST
SortedList
* Sat 22 Mar 2014 07:34:18 AM JST
SortedList
* Sat 22 Mar 2014 07:40:48 AM JST
class ChromeKeymap(Keymap):
    r"""SUMMARY
    """
    
    priority = 1

    def load_keymap(self, ):
        pass

    def ismatch(self, window):
        pass


class EmacsKeymap(Keymap):
    r"""SUMMARY
    """
    
    priority = 2

    def load_keymap(self, ):
        pass

    def ismatch(self, window):
        pass
    

class TesKeymap(Keymap):
    r"""SUMMARY
    """
    
    priority = 1

    def load_keymap(self, ):
        pass

    def ismatch(self, window):
        pass
        
        
KeymapList.append(ChromeKeymap())
KeymapList.append(EmacsKeymap())
KeymapList.append(TesKeymap())


* Sat 22 Mar 2014 07:45:20 AM JST
keymap
* Sat 22 Mar 2014 07:56:36 AM JST

* Sat 22 Mar 2014 07:56:36 AM JST

* Sat 22 Mar 2014 07:56:36 AM JST
    priority = 

* Sat 22 Mar 2014 07:57:22 AM JST
keycode_control_k = sendkey.KeyCode(45, xcb.xproto.ModMask.Control) # C-k
keycode_control_n = sendkey.KeyCode(57, xcb.xproto.ModMask.Control) # C-n
keycode_control_q = sendkey.KeyCode(24, xcb.xproto.ModMask.Control) # C-q

* Sat 22 Mar 2014 07:57:42 AM JST

* Sat 22 Mar 2014 07:57:42 AM JST

* Sat 22 Mar 2014 07:57:42 AM JST
        pass

* Sat 22 Mar 2014 07:58:16 AM JST
register
* Sat 22 Mar 2014 07:58:22 AM JST
keycode_control_k
* Sat 22 Mar 2014 07:58:47 AM JST
send_down
* Sat 22 Mar 2014 07:59:01 AM JST
        
* Sat 22 Mar 2014 07:59:07 AM JST
        
* Sat 22 Mar 2014 07:59:17 AM JST
send_shift_control_T
* Sat 22 Mar 2014 07:59:27 AM JST
pass
* Sat 22 Mar 2014 08:01:11 AM JST
    def load_keymap(self, ):
        keycode_control_k = sendkey.KeyCode(45, xcb.xproto.ModMask.Control) # C-k
        keycode_control_n = sendkey.KeyCode(57, xcb.xproto.ModMask.Control) # C-n
        keycode_control_q = sendkey.KeyCode(24, xcb.xproto.ModMask.Control) # C-q
        self.register(keycode_control_k, send_up)
        self.register(keycode_control_n, send_down)
        self.register(keycode_control_q, send_shift_control_T)

    def ismatch(self, window):
        if hasattr(window, 'wmclass') and window.wmclass == 'Google-chrome':
            return True
        return False

* Sat 22 Mar 2014 08:01:20 AM JST

* Sat 22 Mar 2014 08:01:20 AM JST

* Sat 22 Mar 2014 08:01:20 AM JST
keymap.KeymapList.append(ChromeKeymap())

* Sat 22 Mar 2014 08:01:51 AM JST

* Sat 22 Mar 2014 08:01:51 AM JST

* Sat 22 Mar 2014 08:01:52 AM JST
keymap.KeymapList.append(ChromeKeymap())

* Sat 22 Mar 2014 08:02:57 AM JST
class EmacsKeymap(keymap.Keymap):
    r"""SUMMARY
    """

    priority = 2

    def load_keymap(self, ):
        keycode_control_k = sendkey.KeyCode(45, xcb.xproto.ModMask.Control) # C-k
        keycode_control_n = sendkey.KeyCode(57, xcb.xproto.ModMask.Control) # C-n
        keycode_control_q = sendkey.KeyCode(24, xcb.xproto.ModMask.Control) # C-q
        self.register(keycode_control_k, send_up)
        self.register(keycode_control_n, send_down)
        self.register(keycode_control_q, send_shift_control_T)

    def ismatch(self, window):
        if hasattr(window, 'wmclass') and window.wmclass == 'Google-chrome':
            return True
        return False

* Sat 22 Mar 2014 08:03:03 AM JST
Emacs
* Sat 22 Mar 2014 08:03:14 AM JST

* Sat 22 Mar 2014 08:03:14 AM JST

* Sat 22 Mar 2014 08:03:14 AM JST
        if hasattr(window, 'wmclass') and window.wmclass == 'Google-chrome':

* Sat 22 Mar 2014 08:03:18 AM JST

* Sat 22 Mar 2014 08:03:18 AM JST

* Sat 22 Mar 2014 08:03:18 AM JST
        return False

* Sat 22 Mar 2014 08:03:41 AM JST
register(keycode_escape, quit)
* Sat 22 Mar 2014 08:03:56 AM JST
keycode_escape = sendkey.KeyCode(9, 0, display='')
* Sat 22 Mar 2014 08:04:14 AM JST
keycode1 = sendkey.KeyCode(10, 0, display='')
* Sat 22 Mar 2014 08:04:23 AM JST
globalmap.register(keycode1, press10)
* Sat 22 Mar 2014 08:04:30 AM JST
globalmap
* Sat 22 Mar 2014 08:06:55 AM JST

* Sat 22 Mar 2014 08:11:02 AM JST
def quit(*args, **kwargs):
    r"""SUMMARY

    quit(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    raise event.XAHKStopWaitForEvent()


def skip(*args, **kwargs):
    r"""SUMMARY

    skip(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    raise event.XAHKSkipEvent()


def press10(*args, **kwargs):
    r"""SUMMARY

    press10()

    @Return:
    """
    # CON.core.UngrabKeyboard(0)
    # CON.flush()
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('press10').sendkeys(window=window)


def press11(*args, **kwargs):
    r"""SUMMARY

    press10()

    @Return:
    """
    print('press11')


def send_down(event, *args, **kwargs):
    r"""SUMMARY

    send_down(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    print('senddown# detail: {0.detail}, state: {0.state}'.format(event))
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('{Down}').sendkeys(window=window)


def send_up(event, *args, **kwargs):
    r"""SUMMARY

    send_up(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    print('sendup# detail: {0.detail}, state: {0.state}'.format(event))
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('{Up}').sendkeys(window=window)


def send_shift_control_T(*args, **kwargs):
    r"""SUMMARY

    send_shift_control_T(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('+^t').sendkeys(window=window)


def press10_2(*args, **kwargs):
    r"""SUMMARY

    press10()

    @Return:
    """
    print('wwwwww')


def press10_mod1(*args, **kwargs):
    r"""SUMMARY

    press10()

    @Return:
    """
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('press10_mod1').sendkeys(window=window)


def press_control_k(*args, **kwargs):
    r"""SUMMARY

    press_control_k(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('{Left}').sendkeys(window=window)


def replace_keymap(*args, **kwargs):
    r"""SUMMARY

    replace_keymap(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    global keymap2
    if 'this' in kwargs:
        this = kwargs['this']
        this.keypress.set_keymap(keymap2)


def button_press(*args, **kwargs):
    r"""SUMMARY

    press10()

    @Return:
    """
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('^w').sendkeys(window=window)



def middle_button_release(*args, **kwargs):
    r"""SUMMARY

    press10()

    @Return:
    """
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('^w').sendkeys(window=window)


def middle_button_release_dummy(*args, **kwargs):
    r"""SUMMARY

    press10()

    @Return:
    """
    print('dummy')


def print_dummy(*args, **kwargs):
    r"""SUMMARY

    print_fummy(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    print('dummy')

def print_dummy2(*args, **kwargs):
    r"""SUMMARY

    print_fummy(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    print('dummy2')


def null_function(*args, **kwargs):
    r"""SUMMARY

    null_function(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """

def set_attributs(*args, **kwargs):
    r"""SUMMARY

    set_attributs(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    print('map notify')
    for win in CON.ext.list_windows():
        CON.core.ChangeWindowAttributes(
            int(win), xproto.CW.EventMask,
            [xproto.EventMask.FocusChange | xproto.EventMask.SubstructureNotify])
    CON.flush()


def focusin(ev, *args, **kwargs):
    r"""SUMMARY

    focusin(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    if ev.detail == 2:
        return
    # global chrome_keymap, keymap
    print('focus in  {} mode:{} detail:{}'.format(
        ev.event, ev.mode, ev.detail))
    dispatcher = kwargs['this']
    window = CON.ext.window_type_dispatch(ev.event)
    # wmclass = window.wmclass[1]
    fil = keymap.KeymapList.get_matches(window)
    kmap = keymap.Keymaps(fil)
    # if wmclass == 'Google-chrome':
        # lis = fil.match_wmclass('Google-chrome')
        # kmap = keymap.Keymaps(lis, keymap.StaticGlobalMap.get_globalmap())
        # kmap = event.KeyEventDispatcher(keymap)
        # import copy
        # print('DEBUG-1-handler.py')
        # print(keymap)
        # kmap = keymap.copy()
        # print('DEBUG-2-handler.py')
        # print(kmap)
        # # kmap = copy.copy(keymap)
        # # kmap.update(kmap)
        # kmap.update(chrome_keymap)
        # print('DEBUG-3-handler.py')
        # print(kmap)
        # kmap.grab_keys(ev.event)
        # chrome_keymap.grab_keys(event.event)
        # dispatcher.keypress.set_keymap(chrome_keymap)
    dispatcher.keypress.set_keymap(kmap, ev.event)
    # else:
    #     # keymap.grab_keys(ev.event)
    #     # print(keymap)
    #     kmap = keymap.Keymaps([], keymap.StaticGlobalMap.get_globalmap())
    #     dispatcher.keypress.set_keymap(kmap, ev.event)


def focusout(ev, *args, **kwargs):
    r"""SUMMARY

    focusout(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    if ev.detail == 2:
        return
    print('focus out {} mode:{} detail:{}'.format(
        ev.event, ev.mode, ev.detail))
    dispatch = kwargs['this']
    keymap = dispatch.keypress.get_keymap(ev.event)
    # print(keymap)
    # if keymap:
        # keymap.ungrab_keys(ev.event)


* Sat 22 Mar 2014 08:14:53 AM JST

* Sat 22 Mar 2014 08:14:53 AM JST

* Sat 22 Mar 2014 08:14:53 AM JST
    # CON.core.UngrabKeyboard(0)

* Sat 22 Mar 2014 08:14:53 AM JST
    # CON.core.UngrabKeyboard(0)

* Sat 22 Mar 2014 08:14:53 AM JST
    # CON.core.UngrabKeyboard(0)
    # CON.flush()

* Sat 22 Mar 2014 08:15:56 AM JST
'Google-chrome'
* Sat 22 Mar 2014 08:18:31 AM JST
'Google-chrome'
* Sat 22 Mar 2014 08:19:56 AM JST

* Sat 22 Mar 2014 08:19:56 AM JST

* Sat 22 Mar 2014 08:19:56 AM JST
    print(fil)

* Sat 22 Mar 2014 08:19:58 AM JST

* Sat 22 Mar 2014 08:19:58 AM JST

* Sat 22 Mar 2014 08:19:58 AM JST
    # wmclass = window.wmclass[1]

* Sat 22 Mar 2014 08:20:12 AM JST

* Sat 22 Mar 2014 08:20:12 AM JST

* Sat 22 Mar 2014 08:20:12 AM JST
    # global chrome_keymap, keymap

* Sat 22 Mar 2014 08:21:00 AM JST

* Sat 22 Mar 2014 08:21:00 AM JST

* Sat 22 Mar 2014 08:21:00 AM JST
# dispatcher.keypress.set_keymap(tesmap, int(ROOT))

* Sat 22 Mar 2014 08:22:32 AM JST
Keymap
* Sat 22 Mar 2014 08:22:53 AM JST

* Sat 22 Mar 2014 08:22:53 AM JST

* Sat 22 Mar 2014 08:22:53 AM JST
    priority = 20

* Sat 22 Mar 2014 08:23:36 AM JST
class GlobalKeymap(keymap.GlobalKeymapAbstract):
    r"""SUMMARY
    """

    def load_keymap(self, ):
        keycode1 = sendkey.KeyCode(10, 0, display='')
        keycode_escape = sendkey.KeyCode(9, 0, display='')
        self.register(keycode1, press10)
        self.register(keycode_escape, quit)


keymap.KeymapList.append(GlobalKeymap())


* Sat 22 Mar 2014 08:23:51 AM JST

* Sat 22 Mar 2014 08:23:51 AM JST

* Sat 22 Mar 2014 08:23:51 AM JST
# keycode_escape = sendkey.KeyCode(9, 0, display='')

* Sat 22 Mar 2014 08:23:51 AM JST
# keycode_escape = sendkey.KeyCode(9, 0, display='')

* Sat 22 Mar 2014 08:23:51 AM JST
# keycode_escape = sendkey.KeyCode(9, 0, display='')
# keycode1 = sendkey.KeyCode(10, 0, display='')

* Sat 22 Mar 2014 08:25:09 AM JST

* Sat 22 Mar 2014 08:25:09 AM JST

* Sat 22 Mar 2014 08:25:09 AM JST
        self._globalmap = globalmap

* Sat 22 Mar 2014 08:25:21 AM JST

* Sat 22 Mar 2014 08:25:21 AM JST

* Sat 22 Mar 2014 08:25:21 AM JST
        self.grab_globalmap(window)

* Sat 22 Mar 2014 08:25:29 AM JST

* Sat 22 Mar 2014 08:25:29 AM JST

* Sat 22 Mar 2014 08:25:29 AM JST
        self.ungrab_globalmap(window)

* Sat 22 Mar 2014 08:29:57 AM JST
get_
* Sat 22 Mar 2014 08:31:06 AM JST
Keymaps
* Sat 22 Mar 2014 08:31:32 AM JST

* Sat 22 Mar 2014 08:31:32 AM JST

* Sat 22 Mar 2014 08:31:33 AM JST
    kmap = keymap.Keymaps(fil)

* Sat 22 Mar 2014 08:50:05 AM JST

* Sat 22 Mar 2014 08:50:05 AM JST

* Sat 22 Mar 2014 08:50:05 AM JST
# dispatcher.keypress.set_keymap(keymap)

* Sat 22 Mar 2014 08:50:09 AM JST
# dispatcher.button_press.set_keymap(buttonmap)
# dispatcher.button_release.set_keymap(buttonrelease_map)

* Sat 22 Mar 2014 08:54:34 AM JST

* Sat 22 Mar 2014 08:54:34 AM JST

* Sat 22 Mar 2014 08:54:34 AM JST
        state = self.state | xcb.xproto.ModMask._2

* Sat 22 Mar 2014 08:54:36 AM JST

* Sat 22 Mar 2014 08:54:36 AM JST

* Sat 22 Mar 2014 08:54:36 AM JST
        state = self.state | xcb.xproto.ModMask._2

* Sat 22 Mar 2014 08:54:55 AM JST

* Sat 22 Mar 2014 08:54:55 AM JST

* Sat 22 Mar 2014 08:54:55 AM JST
        state = self.state | xcb.xproto.ModMask._2

* Sat 22 Mar 2014 09:01:33 AM JST
ButtonReleaseEventDispatcher
* Sat 22 Mar 2014 09:01:43 AM JST
ButtonPressEventDispatcher
* Sat 22 Mar 2014 09:02:14 AM JST
class Keymap(KeyEventDispatcher):
    r"""SUMMARY
    """
    priority = 10
    
    def __init__(self):
        r"""
        """
        KeyEventDispatcher.__init__(self)
        self.load_keymap()

    @abstractmethod
    def load_keymap(self, ):
        r"""SUMMARY
        
        load_keymap()
        
        @Return:
        """
        
    @abstractmethod
    def ismatch(self, window):
        r"""SUMMARY
        
        ismatch(window)
        
        @Arguments:
        - `window`:
        
        @Return:
        """
        
    def __cmp__(self, other):
        if isinstance(other, Keymap):
            return cmp(self.priority, other.priority)
        return cmp(self, other)

* Sat 22 Mar 2014 09:02:25 AM JST
Ke
* Sat 22 Mar 2014 09:02:49 AM JST
ButtonPressEventDispatcher
* Sat 22 Mar 2014 09:03:44 AM JST
    priority = 10
    
    def __init__(self):
        r"""
        """
        ButtonPressEventDispatcher.__init__(self)
        self.load_keymap()

    @abstractmethod
    def load_keymap(self, ):
        r"""SUMMARY
        
        load_keymap()
        
        @Return:
        """
        
    @abstractmethod
    def ismatch(self, window):
        r"""SUMMARY
        
        ismatch(window)
        
        @Arguments:
        - `window`:
        
        @Return:
        """
        
    def __cmp__(self, other):
        if isinstance(other, Keymap):
            return cmp(self.priority, other.priority)
        return cmp(self, other)

* Sat 22 Mar 2014 09:03:57 AM JST
ButtonReleaseEventDispatcher
* Sat 22 Mar 2014 09:04:56 AM JST
    def ismatch(self, window):
        r"""SUMMARY
        
        ismatch(window)
        
        @Arguments:
        - `window`:
        
        @Return:
        """
        return True

* Sat 22 Mar 2014 09:05:48 AM JST
class GlobalButtonReleaseMapAbstract(ButtonReleaseMap):
    r"""SUMMARY
    """
    
    priority = 9999
    
    def ismatch(self, window):
        r"""SUMMARY
        
        ismatch(window)
        
        @Arguments:
        - `window`:
        
        @Return:
        """
        return True

* Sat 22 Mar 2014 09:08:00 AM JST
class KeymapPressList(object):
    r"""SUMMARY
    """
    _keymap_list = SortedList() # for static

    @staticmethod
    def get_matches(window):
        r"""SUMMARY
        
        get_filter()
        
        @Return:
        """
        lis, append = make_list_append()
        for keymap in KeymapPressList._keymap_list:
            if keymap.ismatch(window):
                append(keymap)
        return Keymaps(lis)

    @staticmethod
    def append(keymap):
        r"""SUMMARY
        
        append(keymap)
        
        @Arguments:
        - `keymap`:
        
        @Return:
        """
        KeymapList._keymap_list.append(keymap)

    def __iter__(self, ):
        return iter(self._keymap_list)

* Sat 22 Mar 2014 09:08:29 AM JST
KeymapReleaseList
* Sat 22 Mar 2014 09:08:45 AM JST
class KeymapReleaseList(object):
    r"""SUMMARY
    """
    _keymap_list = SortedList() # for static

    @staticmethod
    def get_matches(window):
        r"""SUMMARY
        
        get_filter()
        
        @Return:
        """
        lis, append = make_list_append()
        for keymap in KeymapReleaseList._keymap_list:
            if keymap.ismatch(window):
                append(keymap)
        return Keymaps(lis)

    @staticmethod
    def append(keymap):
        r"""SUMMARY
        
        append(keymap)
        
        @Arguments:
        - `keymap`:
        
        @Return:
        """
        KeymapReleaseList._keymap_list.append(keymap)

    def __iter__(self, ):
        return iter(self._keymap_list)

* Sat 22 Mar 2014 09:08:55 AM JST
Keymap
* Sat 22 Mar 2014 09:09:01 AM JST
Keymap
* Sat 22 Mar 2014 09:09:07 AM JST
Keymap
* Sat 22 Mar 2014 09:09:17 AM JST
class ButtonReleaseList(object):
    r"""SUMMARY
    """
    _keymap_list = SortedList() # for static

    @staticmethod
    def get_matches(window):
        r"""SUMMARY
        
        get_filter()
        
        @Return:
        """
        lis, append = make_list_append()
        for keymap in ButtonReleaseList._keymap_list:
            if keymap.ismatch(window):
                append(keymap)
        return Keymaps(lis)

    @staticmethod
    def append(keymap):
        r"""SUMMARY
        
        append(keymap)
        
        @Arguments:
        - `keymap`:
        
        @Return:
        """
        ButtonReleaseList._keymap_list.append(keymap)

    def __iter__(self, ):
        return iter(self._keymap_list)

* Sat 22 Mar 2014 09:09:23 AM JST
ButtonRelease
* Sat 22 Mar 2014 09:09:35 AM JST
ButtonPressList
* Sat 22 Mar 2014 09:12:56 AM JST
buttoncode_middle = sendkey.ButtonCode(2, 0)
* Sat 22 Mar 2014 09:13:25 AM JST
buttonrelease_map.register(buttoncode_middle, middle_button_release)
* Sat 22 Mar 2014 09:13:36 AM JST
buttonrelease_map
* Sat 22 Mar 2014 09:13:50 AM JST
    def ismatch(self, window):
        if hasattr(window, 'wmclass') and 'Google-chrome' in window.wmclass:
            return True
        return False

* Sat 22 Mar 2014 09:14:05 AM JST
keymap.KeymapPressList.append(ChromeKeymap())
* Sat 22 Mar 2014 09:14:12 AM JST
KeymapPress
* Sat 22 Mar 2014 09:15:18 AM JST
class GlobalKeymap(keymap.GlobalKeymapAbstract):
    r"""SUMMARY
    """

    def load_keymap(self, ):
        keycode1 = sendkey.KeyCode(10, 0, display='')
        keycode_escape = sendkey.KeyCode(9, 0, display='')
        self.register(keycode1, press10)
        self.register(keycode_escape, quit)

* Sat 22 Mar 2014 09:15:51 AM JST

* Sat 22 Mar 2014 09:15:51 AM JST

* Sat 22 Mar 2014 09:15:51 AM JST
        keycode1 = sendkey.KeyCode(10, 0, display='')

* Sat 22 Mar 2014 09:15:51 AM JST
        keycode1 = sendkey.KeyCode(10, 0, display='')

* Sat 22 Mar 2014 09:15:51 AM JST
        keycode1 = sendkey.KeyCode(10, 0, display='')
        keycode_escape = sendkey.KeyCode(9, 0, display='')

* Sat 22 Mar 2014 09:15:54 AM JST
        keycode1 = sendkey.KeyCode(10, 0, display='')
        keycode_escape = sendkey.KeyCode(9, 0, display='')

* Sat 22 Mar 2014 09:15:54 AM JST
        keycode1 = sendkey.KeyCode(10, 0, display='')
        keycode_escape = sendkey.KeyCode(9, 0, display='')
        self.register(keycode1, press10)

* Sat 22 Mar 2014 09:15:54 AM JST
        keycode1 = sendkey.KeyCode(10, 0, display='')
        keycode_escape = sendkey.KeyCode(9, 0, display='')
        self.register(keycode1, press10)

* Sat 22 Mar 2014 09:15:54 AM JST
        keycode1 = sendkey.KeyCode(10, 0, display='')
        keycode_escape = sendkey.KeyCode(9, 0, display='')
        self.register(keycode1, press10)
        self.register(keycode_escape, quit)

* Sat 22 Mar 2014 09:16:00 AM JST
buttoncode_middle = sendkey.ButtonCode(2, 0)
* Sat 22 Mar 2014 09:16:08 AM JST
self.register(buttoncode_middle, middle_button_release)
* Sat 22 Mar 2014 09:16:26 AM JST
def middle_button_release(*args, **kwargs):
    r"""SUMMARY

    press10()

    @Return:
    """
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('^w').sendkeys(window=window)

* Sat 22 Mar 2014 09:16:52 AM JST
sendkey.SendKeys('!{F4}').sendkeys(window=window)
* Sat 22 Mar 2014 09:19:17 AM JST
XK_F4
* Sat 22 Mar 2014 09:20:11 AM JST
print 
* Sat 22 Mar 2014 09:26:09 AM JST
xcb.xproto.ModMask
* Sat 22 Mar 2014 09:28:09 AM JST
xcb.
* Sat 22 Mar 2014 09:28:36 AM JST
press_key
* Sat 22 Mar 2014 09:28:52 AM JST
    
* Sat 22 Mar 2014 09:28:54 AM JST
press
* Sat 22 Mar 2014 09:29:09 AM JST
alt4 = sendkey.KeyCode(40, xproto.ModMask._1)
* Sat 22 Mar 2014 09:29:43 AM JST
press
* Sat 22 Mar 2014 09:30:10 AM JST
alt4 = sendkey.KeyCode(70, xproto.ModMask._1)
* Sat 22 Mar 2014 09:30:38 AM JST
alt4.press_key()
* Sat 22 Mar 2014 09:30:46 AM JST
alt4.release_key()
* Sat 22 Mar 2014 09:31:42 AM JST
CON.ext.properties.net_active_window(482)[0]
* Sat 22 Mar 2014 09:32:04 AM JST
58720278
* Sat 22 Mar 2014 09:32:55 AM JST
window_type_dispatch
* Sat 22 Mar 2014 09:33:16 AM JST
CON
* Sat 22 Mar 2014 09:33:35 AM JST
send_close
* Sat 22 Mar 2014 09:35:46 AM JST
Keymap
* Sat 22 Mar 2014 09:38:55 AM JST
ButtonReleaseMap
* Sat 22 Mar 2014 09:39:19 AM JST
ButtonPressEventDispatcher
* Sat 22 Mar 2014 09:42:46 AM JST
ungrab_button
* Sat 22 Mar 2014 09:49:37 AM JST
self._keymaps
* Sat 22 Mar 2014 09:53:30 AM JST
print('sendup# detail: {0.detail}, state: {0.state}'.format(event))
* Sat 22 Mar 2014 09:53:53 AM JST
debug_button_release
* Sat 22 Mar 2014 09:57:13 AM JST
state = self.state | xcb.xproto.ModMask._2
* Sat 22 Mar 2014 09:57:21 AM JST
self.
* Sat 22 Mar 2014 09:59:14 AM JST
sendkey.ButtonCode(2, 0)
* Sat 22 Mar 2014 10:10:45 AM JST

* Sat 22 Mar 2014 10:10:45 AM JST

* Sat 22 Mar 2014 10:10:45 AM JST
        print('DEBUG-1-hooks.py')

* Sat 22 Mar 2014 10:22:00 AM JST

* Sat 22 Mar 2014 10:22:00 AM JST

* Sat 22 Mar 2014 10:22:00 AM JST
        print('DEBUG-1-sendkey.py')

* Sat 22 Mar 2014 10:22:36 AM JST

* Sat 22 Mar 2014 10:22:36 AM JST

* Sat 22 Mar 2014 10:22:36 AM JST
        print(window)

* Sat 22 Mar 2014 10:24:07 AM JST

* Sat 22 Mar 2014 10:24:07 AM JST

* Sat 22 Mar 2014 10:24:08 AM JST
        print(self.state)

* Sat 22 Mar 2014 10:29:50 AM JST

* Sat 22 Mar 2014 10:29:50 AM JST

* Sat 22 Mar 2014 10:29:50 AM JST
                             # 0

* Sat 22 Mar 2014 10:31:40 AM JST
xproto.ButtonMask._2
* Sat 22 Mar 2014 10:34:02 AM JST
512
* Sat 22 Mar 2014 10:43:26 AM JST
sendkey.ButtonCode(2, 512)
* Sat 22 Mar 2014 10:44:48 AM JST

        
* Sat 22 Mar 2014 10:44:49 AM JST

        
* Sat 22 Mar 2014 10:47:01 AM JST

* Sat 22 Mar 2014 10:49:15 AM JST
xproto.ButtonMask._2
* Sat 22 Mar 2014 10:57:23 AM JST

* Sat 22 Mar 2014 10:57:23 AM JST

* Sat 22 Mar 2014 10:57:23 AM JST
            print(code)

* Sat 22 Mar 2014 10:57:27 AM JST

* Sat 22 Mar 2014 10:57:27 AM JST

* Sat 22 Mar 2014 10:57:27 AM JST
                # yield ButtonCode(code, state)

* Sat 22 Mar 2014 10:57:58 AM JST

* Sat 22 Mar 2014 10:57:58 AM JST

* Sat 22 Mar 2014 10:57:58 AM JST
            print(ev)

* Sat 22 Mar 2014 10:58:24 AM JST

* Sat 22 Mar 2014 10:58:24 AM JST

* Sat 22 Mar 2014 10:58:24 AM JST
    print(bmaps)

* Sat 22 Mar 2014 11:01:58 AM JST

* Sat 22 Mar 2014 11:01:58 AM JST

* Sat 22 Mar 2014 11:01:58 AM JST
    print('DEBUG-1-handler2.py')

* Sat 22 Mar 2014 11:07:43 AM JST

* Sat 22 Mar 2014 11:08:48 AM JST
window = CON.ext.properties.net_active_window(482)[0]
* Sat 22 Mar 2014 11:08:52 AM JST
sendkey.SendKeys('+^t').sendkeys(window=window)
* Sat 22 Mar 2014 11:09:03 AM JST
send_control_l
* Sat 22 Mar 2014 11:09:16 AM JST

* Sat 22 Mar 2014 11:20:22 AM JST
def debug_button_release(event, *args, **kwargs):
    r"""SUMMARY
    
    debug_button_release(event, *args, **kwargs)
    
    @Arguments:
    - `event`:
    - `*args`:
    - `**kwargs`:
    
    @Return:
    """
    print('ButtonReleaseEvent: detail: {0.detail}, state: {0.state}'.format(event))

* Sat 22 Mar 2014 11:20:42 AM JST
debug_button_press
* Sat 22 Mar 2014 11:20:45 AM JST

* Sat 22 Mar 2014 02:26:24 PM JST
import xcb, xcb.xproto
from xcb import xproto


import xahk
from xahk import event
from xahk.event import keymap
from xahk import sendkey

CON = xahk.xconnection.Connection(display='')

ROOT = CON.ext.get_root()

* Sat 22 Mar 2014 02:26:56 PM JST
buttoncode_middle = sendkey.ButtonCode(2, 0)
* Sat 22 Mar 2014 02:27:06 PM JST
buttoncode_middle
* Sat 22 Mar 2014 02:27:36 PM JST
try:
    CON.flush()
    while 1:
        try:
            ev = CON.wait_for_event()
            dispatcher(ev)
            CON.flush()
        except event.XAHKSkipEvent:
            print('XAHKSkipEvent!!')
            continue
except event.XAHKStopWaitForEvent:
    print('XAHKStopWaitForEvent!!')
except KeyboardInterrupt:
    pass

* Sat 22 Mar 2014 02:27:42 PM JST

* Sat 22 Mar 2014 02:27:42 PM JST

* Sat 22 Mar 2014 02:27:42 PM JST
            dispatcher(ev)

* Sat 22 Mar 2014 02:31:28 PM JST
print('ButtonReleaseEvent: detail: {0.detail}, state: {0.state}'.format(event))
* Sat 22 Mar 2014 02:34:27 PM JST
xproto.ModMask.Lock,
* Sat 22 Mar 2014 02:34:30 PM JST
xproto.ModMask.Lock
* Sat 22 Mar 2014 02:36:16 PM JST
self.register(code, state | mod, func)
* Sat 22 Mar 2014 02:36:21 PM JST
mod
* Sat 22 Mar 2014 02:36:31 PM JST
self.register(code, state | mod, func)
* Sat 22 Mar 2014 02:36:36 PM JST
mod
* Sat 22 Mar 2014 04:50:32 PM JST
ipaddress
* Sat 22 Mar 2014 04:52:14 PM JST
'http://www.thisip.org/'
* Sat 22 Mar 2014 04:57:39 PM JST

* Sat 22 Mar 2014 04:57:39 PM JST

* Sat 22 Mar 2014 04:57:39 PM JST


* Sat 22 Mar 2014 04:57:57 PM JST
IPv4Address
* Sat 22 Mar 2014 05:00:15 PM JST
ipaddress.IPv4Address
* Sat 22 Mar 2014 05:01:19 PM JST
ipaddress.IPv4Address(unicode(
* Sat 22 Mar 2014 05:02:10 PM JST
import urllib as _urllib
import random as _random
import re as _re

* Sat 22 Mar 2014 05:02:19 PM JST

* Sat 22 Mar 2014 05:02:19 PM JST

* Sat 22 Mar 2014 05:02:19 PM JST
__version__ = '1.0'

* Sat 22 Mar 2014 05:03:09 PM JST
    hosts = ('http://www.whatismyip.com/',
             'http://adresseip.com',
             'http://www.aboutmyip.com/',
             'http://www.ipchicken.com/',
             'http://www.showmyip.com/',
             'http://monip.net/',
             'http://checkrealip.com/',
             'http://ipcheck.rehbein.net/',
             'http://checkmyip.com/',
             'http://www.raffar.com/checkip/',
             'http://www.thisip.org/',
             'http://www.lawrencegoetz.com/programs/ipinfo/',
             'http://www.mantacore.se/whoami/',
             'http://www.edpsciences.org/htbin/ipaddress',
             'http://mwburden.com/cgi-bin/getipaddr',
             'http://checkipaddress.com/',
             'http://www.glowhost.com/support/your.ip.php',
             'http://www.tanziars.com/',
             'http://www.naumann-net.org/',
             'http://www.godwiz.com/',
             'http://checkip.eurodyndns.org/',)

* Sat 22 Mar 2014 05:05:05 PM JST

* Sat 22 Mar 2014 05:05:05 PM JST

* Sat 22 Mar 2014 05:05:05 PM JST
ip_regex = _re.compile("(([0-9]{1,3}\.){3}[0-9]{1,3})")

* Sat 22 Mar 2014 05:05:23 PM JST

* Sat 22 Mar 2014 05:05:23 PM JST

* Sat 22 Mar 2014 05:05:23 PM JST
from MODULE import 

* Sat 22 Mar 2014 05:05:44 PM JST
ip_regex
* Sat 22 Mar 2014 05:17:00 PM JST
exploded
* Sat 22 Mar 2014 05:21:49 PM JST
import 
* Sat 22 Mar 2014 05:22:59 PM JST
ipwhois)
* Sat 22 Mar 2014 05:27:49 PM JST
unicode(
* Sat 22 Mar 2014 05:30:23 PM JST
str(i).encode('ascii')
* Sat 22 Mar 2014 05:30:47 PM JST
'115.177.86.147'
* Sat 22 Mar 2014 05:42:32 PM JST
class GlobalButtonReleaseMap(keymap.GlobalButtonReleaseMapAbstract):
    r"""SUMMARY
    """
    def load_keymap(self, ):
        buttoncode_middle = sendkey.ButtonCode(2, 0)
        self.register(buttoncode_middle, send_close)


keymap.ButtonReleaseList.append(GlobalButtonReleaseMap())

* Sat 22 Mar 2014 05:42:53 PM JST
import xcb, xcb.xproto
from xcb import xproto


import xahk
from xahk import event
from xahk.event import keymap
from xahk import sendkey

* Sat 22 Mar 2014 05:43:05 PM JST
class GlobalButtonReleaseMap(keymap.GlobalButtonReleaseMapAbstract):
    r"""SUMMARY
    """
    def load_keymap(self, ):
        buttoncode_middle = sendkey.ButtonCode(2, 0)
        self.register(buttoncode_middle, send_close)


keymap.ButtonReleaseList.append(GlobalButtonReleaseMap())

* Sat 22 Mar 2014 05:43:42 PM JST
self.register(buttoncode_middle, send_close
* Sat 22 Mar 2014 05:47:52 PM JST
IntEnum
* Sat 22 Mar 2014 05:49:25 PM JST
ButtonMask
* Sat 22 Mar 2014 05:54:56 PM JST
xproto.ButtonIndex._1
* Sat 22 Mar 2014 05:55:02 PM JST
xproto.ButtonIndex._2
* Sat 22 Mar 2014 05:55:27 PM JST
xproto.ButtonIndex._1
* Sat 22 Mar 2014 06:06:50 PM JST
xproto.ButtonIndex._3
* Sat 22 Mar 2014 06:06:57 PM JST
xproto.ButtonIndex._4
* Sat 22 Mar 2014 06:08:23 PM JST
    def __repr__(self, ):
        fmt = '{0.__class__.__name__}({1}, state={0.state})'.format
        return fmt(self, self._data)

* Sat 22 Mar 2014 06:09:07 PM JST
    def __repr__(self, ):
        fmt = '{0.__class__.__name__}({1}, state={0.state})'.format
        return fmt(self, self._data)

* Sat 22 Mar 2014 06:15:58 PM JST
class ChromeButtonReleaseMap(keymap.ButtonReleaseMap):
    r"""SUMMARY
    """
    
    def load_keymap(self, ):
        r"""SUMMARY
        
        load_keymap()
        
        @Return:
        """
        buttoncode_middle = sendkey.ButtonCode(sendkey.Button.middle, 0)
        self.register(buttoncode_middle, middle_button_release)
        
    def ismatch(self, window):
        if hasattr(window, 'wmclass') and 'Google-chrome' in window.wmclass:
            return True
        return False


keymap.ButtonReleaseList.append(ChromeButtonReleaseMap())

* Sat 22 Mar 2014 06:16:56 PM JST
class ChromeButtonReleaseMap(keymap.ButtonReleaseMap):
    r"""SUMMARY
    """
    
    def load_keymap(self, ):
        r"""SUMMARY
        
        load_keymap()
        
        @Return:
        """
        buttoncode_middle = sendkey.ButtonCode(sendkey.Button.middle, 0)
        self.register(buttoncode_middle, middle_button_release)
        
    def ismatch(self, window):
        if hasattr(window, 'wmclass') and 'Google-chrome' in window.wmclass:
            return True
        return False

* Sat 22 Mar 2014 06:17:07 PM JST
keymap.ButtonReleaseList.append(ChromeButtonReleaseMap())
* Sat 22 Mar 2014 06:19:43 PM JST
keymap.ButtonReleaseList._keymap_list
* Sat 22 Mar 2014 06:19:56 PM JST
keymap.ButtonReleaseList.append(ChromeButtonReleaseMap())
* Sat 22 Mar 2014 06:20:21 PM JST
class ChromeButtonReleaseMap(keymap.ButtonReleaseMap):
    r"""SUMMARY
    """
    
    def load_keymap(self, ):
        r"""SUMMARY
        
        load_keymap()
        
        @Return:
        """
        buttoncode_middle = sendkey.ButtonCode(sendkey.Button.middle, 0)
        self.register(buttoncode_middle, middle_button_release)
        
    def ismatch(self, window):
        if hasattr(window, 'wmclass') and 'Google-chrome' in window.wmclass:
            return True
        return False

* Sat 22 Mar 2014 06:20:55 PM JST
class ChromeButtonReleaseMap(keymap.ButtonReleaseMap):
    r"""SUMMARY
    """
    
    def load_keymap(self, ):
        r"""SUMMARY
        
        load_keymap()
        
        @Return:
        """
        buttoncode_middle = sendkey.ButtonCode(sendkey.Button.middle, 0)
        self.register(buttoncode_middle, tes)
        
    def ismatch(self, window):
        if hasattr(window, 'wmclass') and 'Google-chrome' in window.wmclass:
            return True
        return False

* Sat 22 Mar 2014 06:25:51 PM JST
sendkey.Button.middle
* Sat 22 Mar 2014 06:26:57 PM JST
    _addmods = (0, xproto.ModMask.Lock,
               xproto.ModMask._2,
               xproto.ModMask._2 | xproto.ModMask.Lock)

* Sat 22 Mar 2014 06:37:23 PM JST

* Sat 22 Mar 2014 06:37:23 PM JST

* Sat 22 Mar 2014 06:37:23 PM JST
        print(self)

* Sat 22 Mar 2014 06:39:05 PM JST

* Sat 22 Mar 2014 06:39:05 PM JST

* Sat 22 Mar 2014 06:39:05 PM JST
            print(code)

* Sat 22 Mar 2014 06:39:05 PM JST

* Sat 22 Mar 2014 06:39:06 PM JST

* Sat 22 Mar 2014 06:39:06 PM JST
        print(self)

* Sat 22 Mar 2014 06:42:01 PM JST

* Sat 22 Mar 2014 06:50:06 PM JST
sendkey.ButtonCode(sendkey.Button.middle, 0)
* Sat 22 Mar 2014 06:53:23 PM JST
52428846
* Sat 22 Mar 2014 06:58:51 PM JST
482
* Sat 22 Mar 2014 06:58:59 PM JST

* Sat 22 Mar 2014 07:09:10 PM JST

* Sat 22 Mar 2014 07:09:10 PM JST

* Sat 22 Mar 2014 07:09:20 PM JST

* Sat 22 Mar 2014 07:09:20 PM JST

* Sat 22 Mar 2014 07:09:20 PM JST
            print(code)

* Sat 22 Mar 2014 07:09:22 PM JST

* Sat 22 Mar 2014 07:09:22 PM JST

* Sat 22 Mar 2014 07:09:22 PM JST
        print(self)

* Sat 22 Mar 2014 11:27:34 PM JST
/root/.pylib/xahk/xconnection/extensions/properties.py
* Sat 22 Mar 2014 11:31:32 PM JST
xcb.
* Sat 22 Mar 2014 11:42:23 PM JST

* Sat 22 Mar 2014 11:42:23 PM JST

* Sat 22 Mar 2014 11:42:24 PM JST
            print(ev)

* Sat 22 Mar 2014 11:43:39 PM JST
DEBUG
* Sun 23 Mar 2014 05:47:48 AM JST
create_notify
* Sun 23 Mar 2014 05:54:47 AM JST
    window = CON.ext.properties.net_active_window(482)[0]
    window = CON.ext.window_type_dispatch(window)

* Sun 23 Mar 2014 05:54:52 AM JST
    window = CON.ext.properties.net_active_window(482)[0]
* Sun 23 Mar 2014 05:55:48 AM JST
window = CON.ext.window_type_dispatch(window)
* Sun 23 Mar 2014 05:56:31 AM JST
    kmaps = keymap.KeymapPressList.get_matches(window)
    dispatcher.keypress.set_keymap(kmaps, ev.event)

* Sun 23 Mar 2014 05:58:21 AM JST

* Sun 23 Mar 2014 05:58:21 AM JST

* Sun 23 Mar 2014 05:58:21 AM JST
    print(window)

* Sun 23 Mar 2014 05:59:16 AM JST
    bmaps = keymap.ButtonReleaseList.get_matches(window)
    dispatcher.button_release.set_keymap(bmaps, ev.event)

* Sun 23 Mar 2014 05:59:30 AM JST
event
* Sun 23 Mar 2014 05:59:30 AM JST
ev.event
* Sun 23 Mar 2014 05:59:40 AM JST

* Sun 23 Mar 2014 05:59:40 AM JST

* Sun 23 Mar 2014 05:59:40 AM JST
    print(event.window)

* Sun 23 Mar 2014 06:04:57 AM JST
dispatch.button_release.unset_keymaps(ev.event)
* Sun 23 Mar 2014 06:05:08 AM JST
event
* Sun 23 Mar 2014 06:05:08 AM JST
ev.event
* Sun 23 Mar 2014 06:05:31 AM JST
dispatch = kwargs['this']
* Sun 23 Mar 2014 06:37:01 AM JST
INFO
* Sun 23 Mar 2014 06:38:57 AM JST
INFO
* Sun 23 Mar 2014 06:40:21 AM JST
DEBUG
* Sun 23 Mar 2014 06:42:41 AM JST
FATAL
* Sun 23 Mar 2014 06:43:05 AM JST
DEBUG
* Sun 23 Mar 2014 06:43:32 AM JST
DEBUG
* Sun 23 Mar 2014 06:45:12 AM JST
CRITICAL
* Sun 23 Mar 2014 06:45:16 AM JST
INFO
* Sun 23 Mar 2014 06:46:46 AM JST
CRITICAL
* Sun 23 Mar 2014 06:47:09 AM JST
info
* Sun 23 Mar 2014 06:47:25 AM JST
WARNING
* Sun 23 Mar 2014 06:47:39 AM JST
DEBUG
* Sun 23 Mar 2014 06:47:55 AM JST
WARNING
* Sun 23 Mar 2014 06:52:15 AM JST
NOTSET
* Sun 23 Mar 2014 06:53:12 AM JST
+-----------------------+
| Level  |Numeric value |
|--------+--------------|
|CRITICAL|50            |
|--------+--------------|
|ERROR   |40            |
|--------+--------------|
|WARNING |30            |
|--------+--------------|
|INFO    |20            |
|--------+--------------|
|DEBUG   |10            |
|--------+--------------|
|NOTSET  |0             |
+-----------------------+

* Sun 23 Mar 2014 06:53:41 AM JST
# +-----------------------+
# | Level  |Numeric value |
# |--------+--------------|
# |CRITICAL|50            |
# |--------+--------------|
# |ERROR   |40            |
# |--------+--------------|
# |WARNING |30            |
# |--------+--------------|
# |INFO    |20            |
# |--------+--------------|
# |DEBUG   |10            |
# |--------+--------------|
# |NOTSET  |0             |
# +-----------------------+

* Sun 23 Mar 2014 08:03:54 AM JST
import logging
from logging.handlers import RotatingFileHandler
###############################################################################
# +-----------------------+
# | Level  |Numeric value |
# |--------+--------------|
# |CRITICAL|50            |
# |--------+--------------|
# |ERROR   |40            |
# |--------+--------------|
# |WARNING |30            |
# |--------+--------------|
# |INFO    |20            |
# |--------+--------------|
# |DEBUG   |10            |
# |--------+--------------|
# |NOTSET  |0             |
# +-----------------------+
# output log file
LOGNAME = 'handler2'
LOGDIR = '/tmp/'
LOGPATH = os.path.join(LOGDIR, LOGNAME)
_RH = RotatingFileHandler(LOGPATH, 'w', 1024*50, 1)
_RH.setLevel(logging.ERROR)
_RH.setFormatter(logging.Formatter(
    '%(asctime)s;%(name)s;%(module)s %(funcName)s(%(lineno)d);%(levelname)s;'
    '\n   %(message)s'))

# console
_CH = logging.StreamHandler()
_CH.setLevel(logging.DEBUG)

LOG = logging.getLogger('handler2')
LOG.addHandler(_CH)
LOG.addHandler(_RH)
LOG.setLevel(logging.DEBUG)

# exception
def logging_handle_exceptions(excls, value, trcbck):
    r"""Handling exception hook.

    sys.excepthook = logging_handle_exceptions
    """
    import traceback
    if issubclass(excls, KeyboardInterrupt):
        sys.__excepthook__(excls, value, trcbck)
        return
    errortype = 'Error type: {}'.format(excls)
    valuetxt = 'Uncaught exception: {0}'.format(str(value))
    trcbcktxt = ''.join(traceback.format_tb(trcbck))
    LOG.exception('\n'.join([errortype, valuetxt, trcbcktxt]))

sys.excepthook = logging_handle_exceptions
###############################################################################

* Sun 23 Mar 2014 08:04:42 AM JST
handler2
* Sun 23 Mar 2014 08:06:00 AM JST
tmp/
* Sun 23 Mar 2014 08:15:09 AM JST

* Sun 23 Mar 2014 08:15:09 AM JST

* Sun 23 Mar 2014 08:15:14 AM JST

* Sun 23 Mar 2014 08:15:14 AM JST

* Sun 23 Mar 2014 08:15:14 AM JST
        # state = self.state | xcb.xproto.ModMask._2

* Sun 23 Mar 2014 08:15:16 AM JST

* Sun 23 Mar 2014 08:15:16 AM JST

* Sun 23 Mar 2014 08:15:16 AM JST
        # state = self.state | xcb.xproto.ModMask._2

* Sun 23 Mar 2014 08:18:33 AM JST
window = CON.ext.properties.net_active_window(482)[0]
* Sun 23 Mar 2014 08:18:38 AM JST
    window = CON.ext.properties.net_active_window(482)[0]
    window = CON.ext.window_type_dispatch(window)

* Sun 23 Mar 2014 08:23:49 AM JST

* Sun 23 Mar 2014 08:23:49 AM JST

* Sun 23 Mar 2014 08:23:49 AM JST
        # keycode1 = sendkey.KeyCode(10, 0, display='')

* Sun 23 Mar 2014 08:23:50 AM JST

* Sun 23 Mar 2014 08:23:50 AM JST

* Sun 23 Mar 2014 08:23:50 AM JST
        # self.register(keycode1, press10)

* Sun 23 Mar 2014 08:27:17 AM JST
button = 
* Sun 23 Mar 2014 08:27:21 AM JST
keymap = 
* Sun 23 Mar 2014 08:31:32 AM JST
from peak.rules import dispatch
* Sun 23 Mar 2014 08:31:47 AM JST
dispatch
* Sun 23 Mar 2014 08:32:17 AM JST
get_matches
* Sun 23 Mar 2014 08:32:21 AM JST
    def get_matches(window):
        r"""SUMMARY
        
        get_filter()
        
        @Return:
        """
        lis, append = make_list_append()
        for keymap in KeymapPressList._keymap_list:
            if keymap.ismatch(window):
                append(keymap)
        return Keymaps(lis)

* Sun 23 Mar 2014 08:32:28 AM JST
@staticmethod
* Sun 23 Mar 2014 08:32:48 AM JST
@unregister.when('len(args) == 1')
* Sun 23 Mar 2014 08:34:04 AM JST
FundamentalWindow
* Sun 23 Mar 2014 08:35:09 AM JST
FundamentalWindow
* Sun 23 Mar 2014 08:39:28 AM JST
WindowTypesDispatchBuilder
* Sun 23 Mar 2014 08:43:05 AM JST

* Sun 23 Mar 2014 08:43:05 AM JST

* Sun 23 Mar 2014 08:43:05 AM JST
        else:

* Sun 23 Mar 2014 08:43:05 AM JST
        else:

* Sun 23 Mar 2014 08:43:05 AM JST
        else:
            types = None

* Sun 23 Mar 2014 08:44:27 AM JST

* Sun 23 Mar 2014 08:44:27 AM JST

* Sun 23 Mar 2014 08:44:27 AM JST
import re

* Sun 23 Mar 2014 08:44:30 AM JST

* Sun 23 Mar 2014 08:44:30 AM JST

* Sun 23 Mar 2014 08:44:30 AM JST
from peak.rules import dispatch

* Sun 23 Mar 2014 08:44:41 AM JST

* Sun 23 Mar 2014 08:44:41 AM JST

* Sun 23 Mar 2014 08:44:41 AM JST
from xahk.filter import KeymapsFilter

* Sun 23 Mar 2014 08:44:53 AM JST
                        
* Sun 23 Mar 2014 08:45:53 AM JST
KeymapPriority
* Sun 23 Mar 2014 09:07:48 AM JST
get_active_window
* Sun 23 Mar 2014 09:11:17 AM JST
from xahk.xconnection import Connection as con
* Sun 23 Mar 2014 09:14:15 AM JST

* Sun 23 Mar 2014 09:14:15 AM JST

* Sun 23 Mar 2014 09:14:15 AM JST
    window = CON.ext.window_type_dispatch(window)

* Sun 23 Mar 2014 09:14:22 AM JST
CON.ext.get_active_window()
* Sun 23 Mar 2014 09:22:17 AM JST
DisplayName
* Sun 23 Mar 2014 09:22:37 AM JST

* Sun 23 Mar 2014 09:22:37 AM JST

* Sun 23 Mar 2014 09:22:37 AM JST
        self._display = display

* Sun 23 Mar 2014 09:23:31 AM JST
Connection
* Sun 23 Mar 2014 09:26:33 AM JST
NotifyDetail
* Sun 23 Mar 2014 09:27:12 AM JST
    Ancestor = 0
    Virtual = 1
    Inferior = 2
    Nonlinear = 3
    NonlinearVirtual = 4
    Pointer = 5
    PointerRoot = 6
    _None = 7

* Sun 23 Mar 2014 09:32:24 AM JST
    Normal = 0
    Grab = 1
    Ungrab = 2
    WhileGrabbed = 3

* Sun 23 Mar 2014 09:32:31 AM JST
WrapNotifyMode
* Sun 23 Mar 2014 09:34:42 AM JST
        DisplayName.__init__(self, display)
        conn = Connection.get_instance(self.display)

* Sun 23 Mar 2014 09:35:28 AM JST
WrapFocusInEvent
* Sun 23 Mar 2014 09:40:31 AM JST

* Sun 23 Mar 2014 09:40:31 AM JST

* Sun 23 Mar 2014 09:40:31 AM JST
    # window = CON.ext.window_type_dispatch(ev.event)

* Sun 23 Mar 2014 09:47:29 AM JST
WrapFocusEvent
* Sun 23 Mar 2014 09:50:31 AM JST
wrapevent
* Sun 23 Mar 2014 09:51:10 AM JST
event
* Sun 23 Mar 2014 09:51:29 AM JST

* Sun 23 Mar 2014 09:51:29 AM JST

* Sun 23 Mar 2014 09:51:29 AM JST
    # print('focus out {} mode:{} detail:{}'.format(

* Sun 23 Mar 2014 09:51:29 AM JST
    # print('focus out {} mode:{} detail:{}'.format(

* Sun 23 Mar 2014 09:51:29 AM JST
    # print('focus out {} mode:{} detail:{}'.format(
        # ev.event, ev.mode, ev.detail))

* Sun 23 Mar 2014 10:02:29 AM JST
print
* Sun 23 Mar 2014 10:02:55 AM JST
debug
* Sun 23 Mar 2014 10:03:06 AM JST
print
* Sun 23 Mar 2014 10:04:51 AM JST

* Sun 23 Mar 2014 10:04:51 AM JST

* Sun 23 Mar 2014 10:04:51 AM JST
    pass

* Sun 23 Mar 2014 10:09:04 AM JST

* Sun 23 Mar 2014 10:09:04 AM JST

* Sun 23 Mar 2014 10:09:04 AM JST
# dispatcher.keypress.set_keymap(keymaps, int(ROOT))

* Sun 23 Mar 2014 10:09:08 AM JST

* Sun 23 Mar 2014 10:09:08 AM JST

* Sun 23 Mar 2014 10:09:08 AM JST
# dispatcher.keypress.set_keymap(keymaps, int(ROOT))

* Sun 23 Mar 2014 10:09:08 AM JST
# dispatcher.keypress.set_keymap(keymaps, int(ROOT))

* Sun 23 Mar 2014 10:09:08 AM JST
# dispatcher.keypress.set_keymap(keymaps, int(ROOT))
# dispatcher.button_press.set_keymap(buttonmap)

* Sun 23 Mar 2014 10:09:17 AM JST

* Sun 23 Mar 2014 10:09:18 AM JST

* Sun 23 Mar 2014 10:09:18 AM JST
# print(buttonmap)

* Sun 23 Mar 2014 10:14:25 AM JST
WrapNotifyDetail
* Sun 23 Mar 2014 10:14:52 AM JST
wrapevent
* Sun 23 Mar 2014 10:22:47 AM JST
from collections import deque
* Sun 23 Mar 2014 10:29:23 AM JST
eventwrapper
* Sun 23 Mar 2014 10:32:57 AM JST
wrapper
* Sun 23 Mar 2014 10:38:43 AM JST
eventwrapper=None
* Sun 23 Mar 2014 10:39:43 AM JST
iterable=(), maxlen=None, eventwrapper=None
* Sun 23 Mar 2014 10:39:57 AM JST
iterable=(), maxlen=None, eventwrapper=None
* Sun 23 Mar 2014 10:40:02 AM JST
None
* Sun 23 Mar 2014 10:40:04 AM JST
None
* Sun 23 Mar 2014 10:46:46 AM JST

* Sun 23 Mar 2014 10:46:46 AM JST

* Sun 23 Mar 2014 10:46:46 AM JST
    # evt = wrapevent.WrapFocusInEvent(ev)

* Sun 23 Mar 2014 10:46:48 AM JST
    # evt = wrapevent.WrapFocusInEvent(ev)

* Sun 23 Mar 2014 10:46:48 AM JST
    # evt = wrapevent.WrapFocusInEvent(ev)
    evt = ev

* Sun 23 Mar 2014 10:47:58 AM JST
    if ev.detail == wrapevent.WrapNotifyDetail.Inferior:
        return

* Sun 23 Mar 2014 10:48:04 AM JST
return
* Sun 23 Mar 2014 10:48:28 AM JST
event.XAHKSkipEvent
* Sun 23 Mar 2014 10:49:14 AM JST

* Sun 23 Mar 2014 10:49:14 AM JST

* Sun 23 Mar 2014 10:49:14 AM JST
    print(ev)

* Sun 23 Mar 2014 10:49:31 AM JST

* Sun 23 Mar 2014 10:49:31 AM JST

* Sun 23 Mar 2014 10:49:31 AM JST
    print(ev)

* Sun 23 Mar 2014 10:50:48 AM JST
    dispatch = kwargs['this']

    kmaps = keymap.KeymapPressList.get_matches(ev.window)
    dispatch.keypress.set_keymap(kmaps, ev.window)

* Sun 23 Mar 2014 10:51:08 AM JST
focusin
* Sun 23 Mar 2014 10:51:35 AM JST
dispatch = kwargs['this']
* Sun 23 Mar 2014 10:51:41 AM JST
kwargs['this']
* Sun 23 Mar 2014 10:51:45 AM JST

* Sun 23 Mar 2014 10:51:45 AM JST

* Sun 23 Mar 2014 10:51:45 AM JST
    dispatch = kwargs['this']

* Sun 23 Mar 2014 10:51:53 AM JST
def fucusin_button_release_grab(ev, *args, **kwargs):
    r"""SUMMARY

    focusin(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    bmaps = keymap.ButtonReleaseList.get_matches(ev.window)
    kwargs['this'].button_release.set_keymap(bmaps, 482)



* Sun 23 Mar 2014 10:52:03 AM JST
kwargs['this']
* Sun 23 Mar 2014 10:52:07 AM JST

* Sun 23 Mar 2014 10:52:07 AM JST

* Sun 23 Mar 2014 10:52:07 AM JST
    dispatch = 

* Sun 23 Mar 2014 10:52:57 AM JST
focus_skip_when_inferior
* Sun 23 Mar 2014 10:53:56 AM JST
focusin_skip_when_inferior
* Sun 23 Mar 2014 10:54:03 AM JST

* Sun 23 Mar 2014 10:54:09 AM JST
logging_focusin
* Sun 23 Mar 2014 10:54:15 AM JST
focusin_keypress_grab
* Sun 23 Mar 2014 10:54:17 AM JST

* Sun 23 Mar 2014 10:54:31 AM JST
fucusin_button_release_grab
* Sun 23 Mar 2014 10:54:33 AM JST

* Sun 23 Mar 2014 11:18:20 AM JST
sendkey.ButtonCode(sendkey.Button.middle, 0)
* Sun 23 Mar 2014 11:18:49 AM JST
ModMask
* Sun 23 Mar 2014 11:18:58 AM JST
ButtonMask
* Sun 23 Mar 2014 11:19:48 AM JST
xproto.ButtonMask._3
* Sun 23 Mar 2014 11:21:10 AM JST
    window = CON.ext.properties.net_active_window(482)[0]
    sendkey.SendKeys('^w').sendkeys(window=window)

* Sun 23 Mar 2014 11:21:23 AM JST
send_control_tab
* Sun 23 Mar 2014 11:21:47 AM JST
        
* Sun 23 Mar 2014 11:26:45 AM JST
ext.get_active_window()
* Sun 23 Mar 2014 11:27:11 AM JST
c.ext.get_active_window()
* Sun 23 Mar 2014 11:27:16 AM JST
sendkey.SendKeys('^{Tab}').sendkeys(window=window)
* Sun 23 Mar 2014 11:28:54 AM JST
window = CON.ext.get_active_window()
* Sun 23 Mar 2014 11:28:59 AM JST

* Sun 23 Mar 2014 11:28:59 AM JST

* Sun 23 Mar 2014 11:28:59 AM JST
    # window = CON.ext.properties.net_active_window(482)[0]

* Sun 23 Mar 2014 11:28:59 AM JST
    # window = CON.ext.properties.net_active_window(482)[0]

* Sun 23 Mar 2014 11:28:59 AM JST
    # window = CON.ext.properties.net_active_window(482)[0]
    # window = CON.ext.window_type_dispatch(window)

* Sun 23 Mar 2014 11:29:16 AM JST
window = CON.ext.get_active_window()
* Sun 23 Mar 2014 01:08:13 PM JST
import xcb, xcb.xproto
from xcb import xproto


import xahk
from xahk.logger import LOG
from xahk import event
from xahk.event import keymap
from xahk.event import wrapevent
from xahk import sendkey


import os
import sys


CON = xahk.xconnection.Connection(display='')
ROOT = CON.ext.get_root()

* Sun 23 Mar 2014 01:09:37 PM JST
        button_up_right_hold = sendkey.ButtonCode(
            sendkey.Button.wheelup, xproto.ButtonMask._3)

* Sun 23 Mar 2014 01:09:51 PM JST
self.register(button_up_right_hold, send_control_tab)
* Sun 23 Mar 2014 01:09:59 PM JST

* Sun 23 Mar 2014 01:09:59 PM JST

* Sun 23 Mar 2014 01:09:59 PM JST
        self.register(button_up_right_hold, send_control_tab)

* Sun 23 Mar 2014 01:10:01 PM JST
    def ismatch(self, window):
        if hasattr(window, 'wmclass') and 'Google-chrome' in window.wmclass:
            return True
        return False

* Sun 23 Mar 2014 01:10:09 PM JST
keymap.ButtonReleaseList.append(ChromeButtonReleaseMap())
* Sun 23 Mar 2014 01:12:13 PM JST
def fucusin_button_release_grab(ev, *args, **kwargs):
    r"""SUMMARY

    focusin(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    bmaps = keymap.ButtonReleaseList.get_matches(ev.window)
    kwargs['this'].button_release.set_keymap(bmaps, 482)

* Sun 23 Mar 2014 01:13:14 PM JST
fucusin_button_press_grab
* Sun 23 Mar 2014 01:13:27 PM JST

* Sun 23 Mar 2014 01:13:57 PM JST
    
* Sun 23 Mar 2014 01:15:50 PM JST
try:
    CON.flush()
    while 1:
        try:
            ev = CON.wait_for_event()
            LOG.debug(ev)
            dispatcher(ev)
            # CON.flush()
        except event.XAHKSkipEvent:
            LOG.debug('XAHKSkipEvent!!')
            continue
except event.XAHKStopWaitForEvent:
    LOG.info('XAHKStopWaitForEvent!!')
except KeyboardInterrupt:
    LOG.info('KeyboardInterrupted!!')

* Sun 23 Mar 2014 01:16:19 PM JST
dispatcher = event.EventDispatcher()
* Sun 23 Mar 2014 01:16:32 PM JST
dispatcher.map_notify.append(set_attributs)
* Sun 23 Mar 2014 01:17:43 PM JST
        button_up_right_hold = sendkey.ButtonCode(
            sendkey.Button.wheelup, xproto.ButtonMask._3)

* Sun 23 Mar 2014 01:17:57 PM JST
button_up_right_hold
* Sun 23 Mar 2014 01:19:16 PM JST
  
* Sun 23 Mar 2014 01:19:38 PM JST
b = sendkey.ButtonCode(sendkey.Button.wheelup, xproto.ButtonMask._3)
* Sun 23 Mar 2014 01:20:51 PM JST
# sendkey.py ends here

* Sun 23 Mar 2014 01:21:30 PM JST
button_up_right_hold
* Sun 23 Mar 2014 01:26:42 PM JST

* Sun 23 Mar 2014 01:26:42 PM JST

* Sun 23 Mar 2014 01:26:42 PM JST
                # yield ButtonCode(code, state)

* Sun 23 Mar 2014 01:26:45 PM JST

* Sun 23 Mar 2014 01:26:46 PM JST

* Sun 23 Mar 2014 01:26:46 PM JST
            # code.ungrab_button(window)

* Sun 23 Mar 2014 01:26:55 PM JST

* Sun 23 Mar 2014 01:26:55 PM JST

* Sun 23 Mar 2014 01:26:55 PM JST
            # code.grab_release_button(window)

* Sun 23 Mar 2014 01:27:15 PM JST
   _button_mod_map = {1: xproto.ButtonMask._1,
                       2: xproto.ButtonMask._2,
                       3: xproto.ButtonMask._3,
                       4: xproto.ButtonMask._4,
                       5: xproto.ButtonMask._5,
                       }

* Sun 23 Mar 2014 01:28:18 PM JST
window
* Sun 23 Mar 2014 01:28:24 PM JST
window
* Sun 23 Mar 2014 01:29:38 PM JST

* Sun 23 Mar 2014 01:40:48 PM JST
b = sendkey.ButtonCode(sendkey.Button.wheelup, 0)
* Sun 23 Mar 2014 01:41:06 PM JST
b.grab_button(482)
* Sun 23 Mar 2014 01:42:12 PM JST
detail
* Sun 23 Mar 2014 01:42:12 PM JST
ev.detail
* Mon 24 Mar 2014 03:42:24 AM JST
b2 = sendkey.ButtonCode(sendkey.Button.right, 0)
b2.grab_press_button(482)

* Mon 24 Mar 2014 03:50:21 AM JST

* Mon 24 Mar 2014 03:50:21 AM JST

* Mon 24 Mar 2014 03:50:21 AM JST
        print(self)

* Mon 24 Mar 2014 03:57:43 AM JST

* Mon 24 Mar 2014 03:57:44 AM JST

* Mon 24 Mar 2014 03:57:44 AM JST
        print('DEBUG-2-__init__.py')

* Mon 24 Mar 2014 03:59:20 AM JST

* Mon 24 Mar 2014 03:59:20 AM JST

* Mon 24 Mar 2014 03:59:20 AM JST
    print(bmaps)

* Mon 24 Mar 2014 04:03:17 AM JST
def send_control_tab(*args, **kwargs):
    r"""SUMMARY
    
    send_control_tab(*args, **kwargs)
    
    @Arguments:
    - `*args`:
    - `**kwargs`:
    
    @Return:
    """
    print('DEBUG-1-handler2.py')
    window = CON.ext.get_active_window()
    sendkey.SendKeys('^{Tab}').sendkeys(window=window)

* Mon 24 Mar 2014 04:03:19 AM JST

* Mon 24 Mar 2014 04:03:19 AM JST

* Mon 24 Mar 2014 04:03:19 AM JST
    print('DEBUG-1-handler2.py')

* Mon 24 Mar 2014 04:03:22 AM JST
def send_control_tab(*args, **kwargs):
    r"""SUMMARY
    
    send_control_tab(*args, **kwargs)
    
    @Arguments:
    - `*args`:
    - `**kwargs`:
    
    @Return:
    """
    window = CON.ext.get_active_window()
    sendkey.SendKeys('^{Tab}').sendkeys(window=window)

* Mon 24 Mar 2014 04:04:01 AM JST
send_shift_control_tab
* Mon 24 Mar 2014 04:04:14 AM JST

* Mon 24 Mar 2014 04:04:25 AM JST
        button_up_right_hold = sendkey.ButtonCode(
            sendkey.Button.wheelup, xproto.ButtonMask._3)

* Mon 24 Mar 2014 04:04:39 AM JST
button_down_right_hold
* Mon 24 Mar 2014 04:05:56 AM JST
button_up_right_hold
* Mon 24 Mar 2014 04:05:59 AM JST
button_down_right_hold
* Mon 24 Mar 2014 04:07:49 AM JST
event.
* Mon 24 Mar 2014 04:09:38 AM JST
window
* Mon 24 Mar 2014 04:09:46 AM JST
window
* Mon 24 Mar 2014 04:11:36 AM JST
ButtonPressEvent:
* Mon 24 Mar 2014 04:15:54 AM JST
print('')
* Mon 24 Mar 2014 04:18:06 AM JST
event
* Mon 24 Mar 2014 04:18:07 AM JST
event.event
* Mon 24 Mar 2014 04:18:16 AM JST
event
* Mon 24 Mar 2014 04:18:17 AM JST
event.event
* Mon 24 Mar 2014 04:22:37 AM JST
message
* Mon 24 Mar 2014 04:23:05 AM JST
      
* Mon 24 Mar 2014 04:23:05 AM JST
head
* Mon 24 Mar 2014 04:23:09 AM JST
(princ tail)
* Mon 24 Mar 2014 04:32:25 AM JST
regexp
* Mon 24 Mar 2014 04:36:23 AM JST
args
* Mon 24 Mar 2014 04:38:27 AM JST
        
* Mon 24 Mar 2014 04:38:34 AM JST
(expand-auto-yasnippet)
* Mon 24 Mar 2014 05:16:05 AM JST
;;;; auto yasnippet
(autoload 'create-auto-yasnippet "auto-yasnippet" "auto-yasnippet" 'interactive)
(autoload 'expand-auto-yasnippet "auto-yasnippet" "auto-yasnippet" 'interactive)

* Mon 24 Mar 2014 05:17:36 AM JST
(defun auto-yasnippet-ext (start end)
  "Compact command with `create-auto-yasnippet', `expand-auto-yasnippet'.
Do `create-auto-yasnippet' if mark is active.
Else do `expand-auto-yasnippet'.
ARGS: prefix"
  (interactive "r")
  (if mark-active
      (progn
        (save-restriction
          (narrow-to-region start end)
          (create-auto-yasnippet)
          (delete-region (point-min) (point-max)))
        (expand-auto-yasnippet)
        )
    (expand-auto-yasnippet)))


* Mon 24 Mar 2014 05:19:05 AM JST
(define-key ctl-e-map "Y" 'create-auto-yasnippet)
(define-key ctl-e-map "y" 'auto-yasnippet)
(define-key ctl-e-map "\C-y" 'auto-yasnippet)

* Mon 24 Mar 2014 05:19:20 AM JST
map
* Mon 24 Mar 2014 05:19:21 AM JST
map
* Mon 24 Mar 2014 05:19:21 AM JST
map
* Mon 24 Mar 2014 05:19:21 AM JST
e-map
* Mon 24 Mar 2014 05:19:21 AM JST
e-map
* Mon 24 Mar 2014 05:19:21 AM JST
e-map
* Mon 24 Mar 2014 05:19:22 AM JST
ctl-e-map
* Mon 24 Mar 2014 05:19:22 AM JST
ctl-e-map
* Mon 24 Mar 2014 05:19:22 AM JST
ctl-e-map
* Mon 24 Mar 2014 05:19:22 AM JST
key ctl-e-map
* Mon 24 Mar 2014 05:19:22 AM JST
key ctl-e-map
* Mon 24 Mar 2014 05:19:22 AM JST
key ctl-e-map
* Mon 24 Mar 2014 05:19:23 AM JST
define-key ctl-e-map
* Mon 24 Mar 2014 05:19:23 AM JST
define-key ctl-e-map
* Mon 24 Mar 2014 05:19:23 AM JST
define-key ctl-e-map
* Mon 24 Mar 2014 05:28:37 AM JST
ctl
* Mon 24 Mar 2014 05:28:39 AM JST
ctl-e-map
* Mon 24 Mar 2014 05:28:49 AM JST
  ;; auto-yasnippet
  (                  "Y" 'create-auto-yasnippet               )
  (                  "y" 'auto-yasnippet-ext                  )
  (               "\C-y" 'auto-yasnippet-ext                  )

* Mon 24 Mar 2014 05:28:58 AM JST
(define-many-keys ctl-e-map
  ;; auto-yasnippet
  (                  "Y" 'create-auto-yasnippet               )
  (                  "y" 'auto-yasnippet-ext                  )
  (               "\C-y" 'auto-yasnippet-ext                  )
  )


* Mon 24 Mar 2014 05:29:13 AM JST
Prefix C-x map
* Mon 24 Mar 2014 05:31:19 AM JST
Prefix C-e map
* Mon 24 Mar 2014 05:32:16 AM JST
Added
* Mon 24 Mar 2014 05:32:29 AM JST
;; 2014/03/24    Atami  
;;    Created this header. 

* Mon 24 Mar 2014 05:36:32 AM JST
;;;; for command line
;;
;;;###autoload
(defun svn-status-pylib () ;[2014/01/18]
  ""
  (interactive)
  (setq frame-title-format "svn_pylib")
  (force-mode-line-update)
  (svn-status "~/.pylib"))


;;;###autoload
(defun svn-status-emacsd () ;[2014/01/18]
  ""
  (interactive)
  (setq frame-title-format "svn_emacsd")
  (force-mode-line-update)
  (svn-status "~/.emacs.d"))

* Mon 24 Mar 2014 05:47:44 AM JST

* Mon 24 Mar 2014 05:47:44 AM JST

* Mon 24 Mar 2014 05:47:44 AM JST
    # window = CON.ext.get_active_window()

* Mon 24 Mar 2014 05:47:46 AM JST

* Mon 24 Mar 2014 05:47:46 AM JST

* Mon 24 Mar 2014 05:47:46 AM JST
    # window = CON.ext.get_active_window()

* Mon 24 Mar 2014 05:53:46 AM JST

* Mon 24 Mar 2014 05:53:46 AM JST

* Mon 24 Mar 2014 05:53:46 AM JST
    print('map notify')

* Mon 24 Mar 2014 05:58:05 AM JST
def focusin_skip_when_inferior(ev, *args, **kwargs):
    r"""SUMMARY
    
    focus_skip_when_inferior(ev, *args, **kwargs)
    
    @Arguments:
    - `ev`:
    - `*args`:
    - `**kwargs`:
    
    @Return:
    """
    if ev.detail == wrapevent.WrapNotifyDetail.Inferior:
        raise event.XAHKSkipEvent()

* Mon 24 Mar 2014 05:58:50 AM JST
wrapper=wrapevent.WrapFocusInEvent
* Mon 24 Mar 2014 06:00:16 AM JST

* Mon 24 Mar 2014 06:00:16 AM JST

* Mon 24 Mar 2014 06:00:16 AM JST
    print(evt)

* Mon 24 Mar 2014 06:01:02 AM JST
keypress.unset_keymaps(evt.window)
* Mon 24 Mar 2014 06:01:09 AM JST
kwargs['this']
* Mon 24 Mar 2014 06:02:15 AM JST
dispatch.button_release.unset_keymaps(482)
* Mon 24 Mar 2014 06:02:18 AM JST
dispatch.button_press.unset_keymaps(482)
* Mon 24 Mar 2014 06:02:33 AM JST
dispatch
* Mon 24 Mar 2014 06:02:40 AM JST
kwargs['this']
* Mon 24 Mar 2014 06:03:39 AM JST
kwargs['this']
* Mon 24 Mar 2014 06:03:47 AM JST
button_release.unset_keymaps(482)
* Mon 24 Mar 2014 06:04:58 AM JST
dispatcher.focusin.append(focusin_logging)
* Mon 24 Mar 2014 06:05:14 AM JST

* Mon 24 Mar 2014 06:05:24 AM JST
focusout_skip_when_inferior
* Mon 24 Mar 2014 06:05:35 AM JST

* Mon 24 Mar 2014 06:05:36 AM JST
focusout_skip_when_inferior
* Mon 24 Mar 2014 06:05:55 AM JST
focusout_keypress_ungrab
* Mon 24 Mar 2014 06:06:05 AM JST

* Mon 24 Mar 2014 06:06:06 AM JST
focusout_keypress_ungrab
* Mon 24 Mar 2014 06:06:10 AM JST
focusout
* Mon 24 Mar 2014 06:06:12 AM JST
focusout_button_press_ungrab
* Mon 24 Mar 2014 06:06:18 AM JST
focusout
* Mon 24 Mar 2014 06:06:19 AM JST
focusout_button_release_ungrab
* Mon 24 Mar 2014 06:06:21 AM JST

* Mon 24 Mar 2014 06:08:33 AM JST

* Mon 24 Mar 2014 06:08:33 AM JST

* Mon 24 Mar 2014 06:08:33 AM JST
# dispatcher.focusout.append(focusout)

* Mon 24 Mar 2014 06:18:44 AM JST
    def parse_line(self, ):
        r"""SUMMARY

        parse_line()

        @Return:
        """
        tokens = self.get_tokenize()
        return Analyzer(self.display).analyze(tokens)


* Mon 24 Mar 2014 06:28:07 AM JST
CON.flush()
* Mon 24 Mar 2014 06:28:14 AM JST
sendkey.SendKeys('!{F4}').sendkeys()
* Mon 24 Mar 2014 06:46:51 AM JST
DisplayName.__init__(self, display)
* Mon 24 Mar 2014 06:46:57 AM JST

* Mon 24 Mar 2014 06:46:57 AM JST

* Mon 24 Mar 2014 06:46:57 AM JST
        self._event = event

* Mon 24 Mar 2014 06:46:58 AM JST

* Mon 24 Mar 2014 06:46:58 AM JST

* Mon 24 Mar 2014 06:46:58 AM JST
        self._display = display

* Mon 24 Mar 2014 08:00:19 AM JST
 << 1
* Mon 24 Mar 2014 08:00:45 AM JST
1 << 5
* Mon 24 Mar 2014 08:04:30 AM JST
    def or_shift(self, ):
        r"""SUMMARY
        
        or_()
        
        @Return:
        """
        return self._or(self.shift)


* Mon 24 Mar 2014 08:05:19 AM JST
    def or_lock(self, ):
        r"""SUMMARY
        
        or_lock()
        
        @Return:
        """
        return self._or(self.lock)

* Mon 24 Mar 2014 08:05:26 AM JST
    def or_lock(self, ):
        r"""SUMMARY
        
        or_lock()
        
        @Return:
        """
        return self._or(self.lock)

* Mon 24 Mar 2014 08:06:03 AM JST
    def or_control(self, ):
        r"""SUMMARY
        
        or_control()
        
        @Return:
        """
        return self._or(self.control)

* Mon 24 Mar 2014 08:06:55 AM JST
state
* Mon 24 Mar 2014 08:07:22 AM JST
    def __init__(self, state=0):
        r"""

        @Arguments:
        - `state`:
        """
        self.state = state

    def _or(self, num):
        r"""SUMMARY

        _add_state(num)

        @Arguments:
        - `num`:

        @Return:
        """
        return self.__class__(self.state | num)

    def __int__(self, ):
        return self.state

* Mon 24 Mar 2014 08:08:13 AM JST
StateAbstract
* Mon 24 Mar 2014 08:10:57 AM JST
event/
* Mon 24 Mar 2014 08:11:19 AM JST
class StateAbstract(object):
    r"""SUMMARY
    """

    def __init__(self, state=0):
        r"""

        @Arguments:
        - `state`:
        """
        self.state = state

    def _or(self, num):
        r"""SUMMARY

        _add_state(num)

        @Arguments:
        - `num`:

        @Return:
        """
        return self.__class__(self.state | num)

    def __int__(self, ):
        return self.state


class ButtonState(StateAbstract):
    r"""SUMMARY
    """
    shift     = 1
    lock      = 1 << 1
    control   = 1 << 2
    alt       = 1 << 3
    numlock   = 1 << 4
    hiper     = 1 << 5
    super     = 1 << 6
    mod5      = 1 << 7
    left      = 1 << 8
    middle    = 1 << 9
    right     = 1 << 10
    wheelup   = 1 << 11
    wheeldown = 1 << 12

    def or_shift(self, ):
        r"""SUMMARY

        or_()

        @Return:
        """
        return self._or(self.shift)

    def or_lock(self, ):
        r"""SUMMARY

        or_lock()

        @Return:
        """
        return self._or(self.lock)

    def or_control(self, ):
        r"""SUMMARY

        or_control()

        @Return:
        """
        return self._or(self.control)

    def or_alt(self, ):
        r"""SUMMARY

        alt()

        @Return:
        """
        return self._or(self.alt)

    def or_numlock(self, ):
        r"""SUMMARY

        or_numlock()

        @Return:
        """
        return self._or(self.numlock)

    def or_hiper(self, ):
        r"""SUMMARY

        or_hiper()

        @Return:
        """
        return self._or(self.hiper)

    def or_super(self, ):
        r"""SUMMARY

        or_super()

        @Return:
        """
        return self._or(self.super)

    def or_mod5(self, ):
        r"""SUMMARY

        or_mod5()

        @Return:
        """
        return self._or(self.mod5)

    def or_left(self, ):
        r"""SUMMARY

        or_left()

        @Return:
        """
        return self._or(self.left)

    def or_middle(self, ):
        r"""SUMMARY

        or_middle()

        @Return:
        """
        return self._or(self.middle)

    def or_right(self, ):
        r"""SUMMARY

        or_right()

        @Return:
        """
        return self._or(self.right)

    def or_wheelup(self, ):
        r"""SUMMARY

        or_wheelup()

        @Return:
        """
        return self._or(self.wheelup)

    def or_wheeldown(self, ):
        r"""SUMMARY

        or_wheeldown()

        @Return:
        """
        return self._or(self.wheeldown)


* Mon 24 Mar 2014 08:58:43 AM JST
    def or_wheeldown(self, ):
        r"""SUMMARY

        or_wheeldown()

        @Return:
        """
        return self._or(self.wheeldown)

* Mon 24 Mar 2014 09:04:28 AM JST
    
* Mon 24 Mar 2014 09:04:30 AM JST
Control
* Mon 24 Mar 2014 09:06:39 AM JST
1 << 12
* Mon 24 Mar 2014 09:06:53 AM JST
1 << 
* Mon 24 Mar 2014 09:07:14 AM JST
1 << 15
* Mon 24 Mar 2014 09:07:21 AM JST
32768
* Mon 24 Mar 2014 09:18:15 AM JST
    Shift   = 1
    Lock    = 1 << 1
    Control = 1 << 2
    Mod1    = 1 << 3  # alt
    Mod2    = 1 << 4  # numlock
    Mod3    = 1 << 5  # hiper
    Mod4    = 1 << 6  # super
    Mod5    = 1 << 7
    Button1 = 1 << 8  # left
    Button2 = 1 << 9  # middle
    Button3 = 1 << 10 # right
    Button4 = 1 << 11 # wheel up
    Button5 = 1 << 12 # wheel down
    Any     = 1 << 15 # 32768

* Mon 24 Mar 2014 09:18:22 AM JST
Mod1
* Mon 24 Mar 2014 09:18:24 AM JST
Mod2
* Mon 24 Mar 2014 09:18:31 AM JST
Mod3
* Mon 24 Mar 2014 09:18:33 AM JST
Mod4
* Mon 24 Mar 2014 09:18:42 AM JST
Button1
* Mon 24 Mar 2014 09:18:48 AM JST
Button2
* Mon 24 Mar 2014 09:18:54 AM JST
Button3
* Mon 24 Mar 2014 09:18:59 AM JST
Button4
* Mon 24 Mar 2014 09:19:04 AM JST
Button5
* Mon 24 Mar 2014 09:19:19 AM JST
  # alt
* Mon 24 Mar 2014 09:19:23 AM JST
  # numlock
* Mon 24 Mar 2014 09:19:24 AM JST
  # hiper
* Mon 24 Mar 2014 09:19:25 AM JST
  # super
* Mon 24 Mar 2014 09:19:26 AM JST
  # left
* Mon 24 Mar 2014 09:19:28 AM JST
  # middle
* Mon 24 Mar 2014 09:19:29 AM JST
 # right
* Mon 24 Mar 2014 09:19:30 AM JST
 # wheel up
* Mon 24 Mar 2014 09:19:31 AM JST
 # wheel down
* Mon 24 Mar 2014 09:21:40 AM JST
lock
* Mon 24 Mar 2014 09:22:19 AM JST
_mod.
* Mon 24 Mar 2014 10:14:07 AM JST
or
* Mon 24 Mar 2014 10:17:15 AM JST
SUMMARY
* Mon 24 Mar 2014 10:17:19 AM JST
SUMMARY
* Mon 24 Mar 2014 10:22:45 AM JST
${1:$(capitalize text)}
* Mon 24 Mar 2014 10:25:13 AM JST
    def is_button5(self, ):
        r"""SUMMARY

        set_wheeldown()

        @Return:
        """
        return self._is(self._mod.Button5)

* Mon 24 Mar 2014 10:25:33 AM JST
${1:$(capitalize text)}
* Mon 24 Mar 2014 10:27:25 AM JST
http://rgruet.free.fr/PQR26/PQR2.6.html#SpecialMethods
* Mon 24 Mar 2014 10:32:29 AM JST
state.ModMask.Lock
* Mon 24 Mar 2014 10:36:02 AM JST
sta
* Mon 24 Mar 2014 10:49:34 AM JST
    def reset_shift(self, ):
        r"""SUMMARY

        set_wheeldown()

        @Return:
        """
        return self._reset(self._mod.Shift)

    def reset_lock(self, ):
        r"""SUMMARY

        set_wheeldown()

        @Return:
        """
        return self._reset(self._mod.Lock)

    def reset_control(self, ):
        r"""SUMMARY

        set_wheeldown()

        @Return:
        """
        return self._reset(self._mod.Control)

    def reset_mod1(self, ):
        r"""SUMMARY

        set_wheeldown()

        @Return:
        """
        return self._reset(self._mod.Mod1)

    def reset_mod2(self, ):
        r"""SUMMARY

        set_wheeldown()

        @Return:
        """
        return self._reset(self._mod.Mod2)

    def reset_mod3(self, ):
        r"""SUMMARY

        set_wheeldown()

        @Return:
        """
        return self._reset(self._mod.Mod3)

    def reset_mod4(self, ):
        r"""SUMMARY

        set_wheeldown()

        @Return:
        """
        return self._reset(self._mod.Mod4)

    def reset_mod5(self, ):
        r"""SUMMARY

        set_wheeldown()

        @Return:
        """
        return self._reset(self._mod.Mod5)

    def reset_button1(self, ):
        r"""SUMMARY

        set_wheeldown()

        @Return:
        """
        return self._reset(self._mod.Button1)

    def reset_button2(self, ):
        r"""SUMMARY

        set_wheeldown()

        @Return:
        """
        return self._reset(self._mod.Button2)

    def reset_button3(self, ):
        r"""SUMMARY

        set_wheeldown()

        @Return:
        """
        return self._reset(self._mod.Button3)

    def reset_button4(self, ):
        r"""SUMMARY

        set_wheeldown()

        @Return:
        """
        return self._reset(self._mod.Button4)

    def reset_button5(self, ):
        r"""SUMMARY

        set_wheeldown()

        @Return:
        """
        return self._reset(self._mod.Button5)

* Mon 24 Mar 2014 10:56:37 AM JST
bool(
* Mon 24 Mar 2014 11:02:12 AM JST

* Mon 24 Mar 2014 11:02:12 AM JST

* Mon 24 Mar 2014 11:02:12 AM JST
    def __iter__(self, ):

* Mon 24 Mar 2014 11:04:08 AM JST
state.ModMask
* Mon 24 Mar 2014 11:05:52 AM JST
setted 
* Mon 24 Mar 2014 11:08:34 AM JST
set_
* Mon 24 Mar 2014 11:08:34 AM JST
bb.set_
* Mon 24 Mar 2014 11:08:35 AM JST
88]: bb.set_
* Mon 24 Mar 2014 11:14:38 AM JST
reset_shift()
* Mon 24 Mar 2014 11:22:27 AM JST

* Mon 24 Mar 2014 11:22:27 AM JST

* Mon 24 Mar 2014 11:22:27 AM JST
        yield 

* Mon 24 Mar 2014 11:23:12 AM JST
self.__class__(
* Mon 24 Mar 2014 11:25:51 AM JST
    def __repr__(self, ):
        return '{0.__class__.__name__}({0.state})'.format(self)

* Mon 24 Mar 2014 11:39:26 AM JST
x)
* Mon 24 Mar 2014 11:39:26 AM JST
str(x)
* Mon 24 Mar 2014 11:41:59 AM JST
[str(ModMask(mod)).split('ModMask')[1] for mod in self]
* Mon 24 Mar 2014 11:42:11 AM JST

* Mon 24 Mar 2014 11:42:11 AM JST

* Mon 24 Mar 2014 11:42:11 AM JST
        lis, append = make_list_append()

* Mon 24 Mar 2014 11:42:12 AM JST

* Mon 24 Mar 2014 11:42:12 AM JST

* Mon 24 Mar 2014 11:42:12 AM JST
        (append(x) for x in self)

* Mon 24 Mar 2014 11:42:13 AM JST
        (append(x) for x in self)

* Mon 24 Mar 2014 11:42:13 AM JST
        (append(x) for x in self)
        map(append, map(str, map(ModMask, self)))

* Mon 24 Mar 2014 11:44:24 AM JST
'{0.__class__.__name__}({0.state}, {1})'.format
* Mon 24 Mar 2014 11:45:07 AM JST
            
* Mon 24 Mar 2014 11:45:21 AM JST
            
* Mon 24 Mar 2014 12:05:49 PM JST

* Mon 24 Mar 2014 12:05:49 PM JST

* Mon 24 Mar 2014 12:05:49 PM JST
from t1.listutil import make_list_append

* Mon 24 Mar 2014 12:09:11 PM JST
                   
* Mon 24 Mar 2014 12:15:46 PM JST
Button
* Mon 24 Mar 2014 12:16:04 PM JST
Button
* Mon 24 Mar 2014 12:19:17 PM JST
xcb.xproto.ModMask.Shift
* Mon 24 Mar 2014 12:20:12 PM JST
state
* Mon 24 Mar 2014 12:20:21 PM JST
state.
* Mon 24 Mar 2014 12:20:23 PM JST
ModifierMask
* Mon 24 Mar 2014 12:25:06 PM JST

* Mon 24 Mar 2014 12:25:06 PM JST

* Mon 24 Mar 2014 12:25:06 PM JST
        return self.__and__(other)

* Mon 24 Mar 2014 12:25:45 PM JST
.__xor__(other)
* Mon 24 Mar 2014 12:26:29 PM JST
.__or__(other)
* Mon 24 Mar 2014 12:26:48 PM JST
.__lshift__(other)
* Mon 24 Mar 2014 12:27:07 PM JST
.__rshift__(other)
* Mon 24 Mar 2014 12:27:19 PM JST
    def __lshift__(self, other):
        return self.__class__(self.state << other)

    def __rshift__(self, other):
        return self.__class__(self.state >> other)


* Mon 24 Mar 2014 12:27:25 PM JST
    def __lshift__(self, other):
        return self.__class__(self.state << other)

    def __rshift__(self, other):
        return self.__class__(self.state >> other)


* Mon 24 Mar 2014 12:42:57 PM JST
State(ModifierMask.Null)
* Mon 24 Mar 2014 01:06:27 PM JST
DisplayName
* Mon 24 Mar 2014 01:06:37 PM JST
    def __init__(self, event, display=None):
        r"""

        @Arguments:
        - `event`:
        - `display`:
        """
        DisplayName.__init__(self, display)

        self._event = event
        self.state = state.State(event.state)

* Mon 24 Mar 2014 01:06:58 PM JST
None
* Mon 24 Mar 2014 01:09:33 PM JST
        
* Mon 24 Mar 2014 01:14:22 PM JST
conn = Connection.get_instance(self.display)
* Mon 24 Mar 2014 01:14:36 PM JST
conn.ext.window_type_dispatch(event.event)
* Mon 24 Mar 2014 01:17:09 PM JST
WindowRootType
* Mon 24 Mar 2014 01:40:46 PM JST
conn = Connection.get_instance(self.display)
* Mon 24 Mar 2014 01:40:54 PM JST
conn.ext.window_type_dispatch(event.event)
* Mon 24 Mar 2014 01:42:22 PM JST
_window
* Mon 24 Mar 2014 01:43:28 PM JST
WrapNotifyDetail(event.detail)
* Mon 24 Mar 2014 01:44:10 PM JST
detail
* Mon 24 Mar 2014 01:45:53 PM JST

* Mon 24 Mar 2014 01:45:53 PM JST

* Mon 24 Mar 2014 01:45:54 PM JST
        self.window = conn.ext.window_type_dispatch(event.event)

* Mon 24 Mar 2014 01:45:54 PM JST
        self.window = conn.ext.window_type_dispatch(event.event)

* Mon 24 Mar 2014 01:45:54 PM JST
        self.window = conn.ext.window_type_dispatch(event.event)
        self.detail = WrapNotifyDetail(event.detail)

* Mon 24 Mar 2014 01:46:30 PM JST
WrapNotifyMode(event.mode)
* Mon 24 Mar 2014 01:47:43 PM JST

* Mon 24 Mar 2014 01:47:43 PM JST

* Mon 24 Mar 2014 01:47:43 PM JST
        self.mode = WrapNotifyMode(event.mode)

* Mon 24 Mar 2014 01:50:02 PM JST
, None
* Mon 24 Mar 2014 01:50:06 PM JST
self._time
* Mon 24 Mar 2014 01:56:28 PM JST
send
* Mon 24 Mar 2014 01:58:09 PM JST
sendkey
* Mon 24 Mar 2014 01:58:21 PM JST
sendkey.
* Mon 24 Mar 2014 01:58:49 PM JST

* Mon 24 Mar 2014 01:58:49 PM JST

* Mon 24 Mar 2014 01:58:49 PM JST
        self.detail = event.detail

* Mon 24 Mar 2014 02:07:26 PM JST

* Mon 24 Mar 2014 02:07:26 PM JST

* Mon 24 Mar 2014 02:07:26 PM JST
        self.time = event.time

* Mon 24 Mar 2014 02:08:37 PM JST
event.
* Mon 24 Mar 2014 02:09:22 PM JST

* Mon 24 Mar 2014 02:09:22 PM JST

* Mon 24 Mar 2014 02:09:22 PM JST
        self.root = WindowRootType(event.root, display=self.display)

* Mon 24 Mar 2014 02:11:06 PM JST
conn = Connection.get_instance(self.display)
* Mon 24 Mar 2014 02:11:20 PM JST
conn.ext.window_type_dispatch(self.__event.event)
* Mon 24 Mar 2014 02:11:51 PM JST

* Mon 24 Mar 2014 02:11:51 PM JST

* Mon 24 Mar 2014 02:11:51 PM JST
        self.event = conn.ext.window_type_dispatch(event.event)

* Mon 24 Mar 2014 02:18:30 PM JST
self.__event
* Mon 24 Mar 2014 02:20:16 PM JST
        if not self._event:
            conn = Connection.get_instance(self.display)
            self._event = conn.ext.window_type_dispatch(self.__event.event)
        return self._event

* Mon 24 Mar 2014 02:20:32 PM JST
event
* Mon 24 Mar 2014 02:20:44 PM JST

* Mon 24 Mar 2014 02:20:44 PM JST

* Mon 24 Mar 2014 02:20:45 PM JST
        self.child = conn.ext.window_type_dispatch(event.child)

* Mon 24 Mar 2014 02:22:53 PM JST
        if not self._child:
            conn = Connection.get_instance(self.display)
            self._event = conn.ext.window_type_dispatch(self.__event.child)
        return self._child

* Mon 24 Mar 2014 02:23:59 PM JST
        if not self._root_x:
            self._root_x = self.__event.root_x
        return self._root_x

* Mon 24 Mar 2014 02:25:34 PM JST
        if not self._root_y:
            # TODO: (Atami) [2014/03/24]
            self._root_y = self.__event.root_y
        return self._root_y

* Mon 24 Mar 2014 02:25:49 PM JST
root
* Mon 24 Mar 2014 02:26:02 PM JST
    @property
    def event_x(self, ):
        r"""SUMMARY
        
        event_x()
        
        @Return:
        """
        if not self._event_y:
            # TODO: (Atami) [2014/03/24]
            self._event_y = self.__event.event_y
        return self._event_y

* Mon 24 Mar 2014 02:26:25 PM JST

* Mon 24 Mar 2014 02:26:25 PM JST

* Mon 24 Mar 2014 02:26:25 PM JST
        self.event_x = event.event_x

* Mon 24 Mar 2014 02:26:26 PM JST
        self.event_x = event.event_x

* Mon 24 Mar 2014 02:26:26 PM JST
        self.event_x = event.event_x
        self.event_y = event.event_y

* Mon 24 Mar 2014 02:28:44 PM JST

* Mon 24 Mar 2014 02:28:45 PM JST

* Mon 24 Mar 2014 02:28:45 PM JST
        self.state = state.State(event.state)

* Mon 24 Mar 2014 02:31:14 PM JST
_same_screen
* Mon 24 Mar 2014 02:31:56 PM JST

* Mon 24 Mar 2014 02:31:56 PM JST

* Mon 24 Mar 2014 02:31:56 PM JST
        self.same_screen = event.same_screen

* Mon 24 Mar 2014 02:32:01 PM JST

* Mon 24 Mar 2014 02:32:01 PM JST

* Mon 24 Mar 2014 02:32:01 PM JST
        conn = Connection.get_instance(self.display)

* Mon 24 Mar 2014 02:37:31 PM JST
WrapKeyButtonEvent
* Mon 24 Mar 2014 02:37:46 PM JST
    @property
    def keycode(self, ):
        r"""SUMMARY

        keycode()

        @Return:
        """
        return KeyCode(self.detail, self.state, display=self.display)

* Mon 24 Mar 2014 02:38:21 PM JST
Key
* Mon 24 Mar 2014 02:48:17 PM JST
class WrapKeyEvent(WrapKeyButtonEvent):
    r"""SUMMARY
    """

    @property
    def code(self, ):
        r"""SUMMARY

        code()

        @Return:
        """
        return KeyCode(self.detail, self.state, display=self.display)

* Mon 24 Mar 2014 02:53:01 PM JST
    def resend(self, ):
        r"""SUMMARY
        
        resend()
        
        @Return:
        """
        self.code.press_key(time=self.time, window=self.event)

* Mon 24 Mar 2014 02:56:02 PM JST
class WrapButtonEvent(WrapKeyButtonEvent):
    r"""SUMMARY
    """

    @property
    def code(self, ):
        r"""SUMMARY

        keycode()

        @Return:
        """
        return ButtonCode(self.detail, self.state, display=self.display)


* Mon 24 Mar 2014 02:56:37 PM JST
    def resend(self, ):
        r"""SUMMARY

        resend()

        @Return:
        """
        self.code.release_key(time=self.time, window=self.event)

* Mon 24 Mar 2014 02:58:06 PM JST
    def resend(self, ):
        r"""SUMMARY

        resend()

        @Return:
        """
        self.code.press_button(time=self.time, window=self.event)

* Mon 24 Mar 2014 02:58:14 PM JST
press
* Mon 24 Mar 2014 03:15:11 PM JST

* Mon 24 Mar 2014 03:15:11 PM JST

* Mon 24 Mar 2014 03:15:11 PM JST
        conn = Connection.get_instance(self.display)

* Mon 24 Mar 2014 03:17:01 PM JST
WrapButton
* Mon 24 Mar 2014 03:17:59 PM JST
            
* Mon 24 Mar 2014 03:31:06 PM JST
WrapFocusEvent
* Mon 24 Mar 2014 03:33:54 PM JST

* Mon 24 Mar 2014 03:33:54 PM JST

* Mon 24 Mar 2014 03:33:54 PM JST
        print('DEBUG-2-wrapevent.py')

* Mon 24 Mar 2014 03:33:56 PM JST

* Mon 24 Mar 2014 03:33:56 PM JST

* Mon 24 Mar 2014 03:33:56 PM JST
        print('DEBUG-1-wrapevent.py')

* Mon 24 Mar 2014 03:34:12 PM JST
# for debug
import cgitb as _cgitb
_cgitb.enable(format='text')

* Mon 24 Mar 2014 03:37:07 PM JST
event = self._wrapper(event)
* Mon 24 Mar 2014 03:39:15 PM JST
__event
* Mon 24 Mar 2014 03:41:01 PM JST
__event
* Mon 24 Mar 2014 03:42:26 PM JST
__slots__ = ('display', '__event', '_window', '_detail', '_mode')
* Mon 24 Mar 2014 03:42:49 PM JST

* Mon 24 Mar 2014 03:42:49 PM JST

* Mon 24 Mar 2014 03:42:49 PM JST
    __slots__ = ('display', '__event', '_window', '_detail', '_mode')

* Mon 24 Mar 2014 03:42:51 PM JST

* Mon 24 Mar 2014 03:42:51 PM JST

* Mon 24 Mar 2014 03:42:51 PM JST
    __slots__ = ('display', '__event', '_window', '_detail', '_mode')

* Mon 24 Mar 2014 06:34:55 PM JST

* Mon 24 Mar 2014 06:34:55 PM JST

* Mon 24 Mar 2014 06:34:55 PM JST
    print(ev)

* Mon 24 Mar 2014 06:44:07 PM JST

* Mon 24 Mar 2014 06:44:07 PM JST

* Mon 24 Mar 2014 06:44:07 PM JST
        # import pdb; pdb.set_trace()

* Mon 24 Mar 2014 06:44:29 PM JST

* Mon 24 Mar 2014 06:44:29 PM JST

* Mon 24 Mar 2014 06:44:29 PM JST
        print(window)

* Mon 24 Mar 2014 06:44:31 PM JST
int(
* Mon 24 Mar 2014 06:45:12 PM JST

* Mon 24 Mar 2014 06:45:12 PM JST

* Mon 24 Mar 2014 06:45:12 PM JST
    print(int(ev.window))

* Mon 24 Mar 2014 06:52:57 PM JST
10
* Mon 24 Mar 2014 06:52:58 PM JST
base=10
* Mon 24 Mar 2014 06:52:58 PM JST
x, base=10
* Mon 24 Mar 2014 06:56:30 PM JST
TypeError: unsupported operand type(s) for |=: 'int'
* Mon 24 Mar 2014 09:55:27 PM JST
state 
* Mon 24 Mar 2014 09:55:28 PM JST
self.state 
* Mon 24 Mar 2014 09:58:10 PM JST
state.
* Mon 24 Mar 2014 09:58:21 PM JST
int(
* Mon 24 Mar 2014 09:58:26 PM JST
int(
* Mon 24 Mar 2014 09:58:49 PM JST
State(state)
* Mon 24 Mar 2014 09:58:52 PM JST
state
* Mon 24 Mar 2014 09:59:39 PM JST
self.state
* Mon 24 Mar 2014 09:59:49 PM JST

* Mon 24 Mar 2014 09:59:50 PM JST

* Mon 24 Mar 2014 09:59:50 PM JST
        state |= self.state

* Mon 24 Mar 2014 09:59:59 PM JST
state = State(state) | self.state
* Mon 24 Mar 2014 10:17:15 PM JST
get_root
* Mon 24 Mar 2014 10:19:04 PM JST
conn = Connection.get_instance(self.display)
* Mon 24 Mar 2014 10:19:20 PM JST
get_window_type
* Mon 24 Mar 2014 10:55:03 PM JST
make_list_append
* Mon 24 Mar 2014 10:58:33 PM JST
import 
* Mon 24 Mar 2014 10:58:34 PM JST
listutil
* Mon 24 Mar 2014 11:05:25 PM JST
ReprPublic
* Tue 25 Mar 2014 03:09:20 AM JST
time.
* Tue 25 Mar 2014 03:49:36 AM JST
    def __repr__(self, ):
        fmt = ('{0.__class__.__name__}('
               'detail={0.detail}, '
               'time={0.time}, '
               'root={0.root}, '
               'event={0.event}, '
               'child={0.child}, '
               'root_x={0.root_x}, '
               'root_y={0.root_y}, '
               'event_x={0.event_x}, '
               'event_y={0.event_y}, '
               'state={0.state}, '
               'same_screen={0.same_screen}'
               ')').format
        return fmt(self)


* Tue 25 Mar 2014 03:50:14 AM JST
    def __repr__(self, ):
        fmt = ('{0.__class__.__name__}('
               'detail={0.detail}, '
               'time={0.time}, '
               'root={0.root}, '
               'event={0.event}, '
               'child={0.child}, '
               'root_x={0.root_x}, '
               'root_y={0.root_y}, '
               'event_x={0.event_x}, '
               'event_y={0.event_y}, '
               'state={0.state}, '
               'same_screen={0.same_screen}'
               'code={0.code}'
               ')').format
        return fmt(self)

* Tue 25 Mar 2014 03:59:06 AM JST
LOG.debug(event)
* Tue 25 Mar 2014 03:59:11 AM JST

* Tue 25 Mar 2014 03:59:11 AM JST

* Tue 25 Mar 2014 03:59:11 AM JST
    # print(event.child)

* Tue 25 Mar 2014 03:59:12 AM JST

* Tue 25 Mar 2014 03:59:12 AM JST

* Tue 25 Mar 2014 03:59:12 AM JST
    # print('senddown# detail: {0.detail}, state: {0.state}'.format(event))

* Tue 25 Mar 2014 03:59:15 AM JST

* Tue 25 Mar 2014 03:59:15 AM JST

* Tue 25 Mar 2014 03:59:15 AM JST
    # print('sendup# detail: {0.detail}, state: {0.state}'.format(event))

* Tue 25 Mar 2014 04:01:10 AM JST
DEBUG
* Tue 25 Mar 2014 04:02:02 AM JST
ERROR
* Tue 25 Mar 2014 04:02:50 AM JST
DEBUG
* Tue 25 Mar 2014 04:02:52 AM JST
DEBUG
* Tue 25 Mar 2014 04:03:31 AM JST
INFO
* Tue 25 Mar 2014 04:07:19 AM JST

* Tue 25 Mar 2014 04:07:19 AM JST

* Tue 25 Mar 2014 04:07:19 AM JST
            print('DEBUG-1-wrapevent.py')

* Tue 25 Mar 2014 04:50:43 AM JST
object
* Tue 25 Mar 2014 04:50:56 AM JST
    def __init__(self, event, display=None):
        r"""

        @Arguments:
        - `event`:
        - `display`:
        """
        DisplayName.__init__(self, display)
        self._event = event
        self._window = None
        self._detail = None
        self._mode = None

* Tue 25 Mar 2014 04:51:16 AM JST
__slots__ = ('display', '_event', '_window', '_detail', '_mode')
* Tue 25 Mar 2014 04:52:02 AM JST
_detail
* Tue 25 Mar 2014 04:53:33 AM JST
        
* Tue 25 Mar 2014 04:53:39 AM JST
        
* Tue 25 Mar 2014 04:53:45 AM JST
        
* Tue 25 Mar 2014 04:53:52 AM JST
        
* Tue 25 Mar 2014 04:53:54 AM JST
_border_width
* Tue 25 Mar 2014 04:55:16 AM JST
    @property
    def window(self, ):
        if not self._window:
            conn = Connection.get_instance(self.display)
            self._window = conn.ext.window_type_dispatch(self._event.event)
        return self._window

* Tue 25 Mar 2014 04:57:06 AM JST
    @property
    def root_x(self, ):
        r"""SUMMARY

        root_x()

        @Return:
        """
        if not self._root_x:
            # TODO: (Atami) [2014/03/24]
            self._root_x = self.__event.root_x
        return self._root_x

* Tue 25 Mar 2014 04:57:11 AM JST
root_
* Tue 25 Mar 2014 04:57:18 AM JST
_root
* Tue 25 Mar 2014 04:57:21 AM JST
root
* Tue 25 Mar 2014 04:58:10 AM JST
    @property
    def x(self, ):
        r"""SUMMARY

        root_x()

        @Return:
        """
        if not self._x:
            # TODO: (Atami) [2014/03/24]
            self._x = self.__event.x
        return self._x

* Tue 25 Mar 2014 05:02:33 AM JST
WrapCreateNotifyEvent
* Tue 25 Mar 2014 05:10:57 AM JST
    __slots__ = ('display', '_event', '_window', '_x', '_y',
                 '_width', '_height', '_border_width', '_override_redirect')

    def __init__(self, event, display=None):
        r"""

        @Arguments:
        - `event`:
        - `display`:
        """
        DisplayName.__init__(self, display)
        self._event = event
        self._window = None
        self._x = None
        self._y = None
        self._width = None
        self._height = None
        self._border_width = None
        self._override_redirect = None

* Tue 25 Mar 2014 05:16:25 AM JST
self._event
* Tue 25 Mar 2014 05:18:10 AM JST
event
* Tue 25 Mar 2014 05:18:16 AM JST

* Tue 25 Mar 2014 05:18:16 AM JST

* Tue 25 Mar 2014 05:18:16 AM JST
        print(self._event.event)

* Tue 25 Mar 2014 05:19:32 AM JST
        if not self._window:
            conn = Connection.get_instance(self.display)
            self._window = conn.ext.window_type_dispatch(self._event.window)
        return self._window

* Tue 25 Mar 2014 05:19:48 AM JST
window
* Tue 25 Mar 2014 05:19:52 AM JST
window
* Tue 25 Mar 2014 06:10:40 AM JST
release
* Tue 25 Mar 2014 06:11:05 AM JST
press
* Tue 25 Mar 2014 10:42:38 AM JST
import
* Tue 25 Mar 2014 10:51:52 AM JST
'2BH4I5HBx'
* Tue 25 Mar 2014 11:07:35 AM JST

* Tue 25 Mar 2014 11:07:35 AM JST

* Tue 25 Mar 2014 11:07:35 AM JST
        '{0.__}'

* Tue 25 Mar 2014 11:09:08 AM JST
self.__event = event
* Tue 25 Mar 2014 11:09:16 AM JST
event
* Tue 25 Mar 2014 11:09:19 AM JST

* Tue 25 Mar 2014 11:09:20 AM JST

* Tue 25 Mar 2014 11:09:20 AM JST
    # def __repr__(self, ):

* Tue 25 Mar 2014 11:09:45 AM JST
    @property
    def event(self, ):
        r"""SUMMARY

        event()

        @Return:
        """
        if not self._event:
            conn = Connection.get_instance(self.display)
            self._event = conn.ext.window_type_dispatch(self.__event.event)
        return self._event

* Tue 25 Mar 2014 11:10:32 AM JST
    @property
    def event(self, ):
        r"""SUMMARY

        event()

        @Return:
        """
        if not self._event:
            conn = Connection.get_instance(self.display)
            self._event = conn.ext.window_type_dispatch(self.__event.event)
        return self._event

* Tue 25 Mar 2014 11:10:36 AM JST
event
* Tue 25 Mar 2014 11:10:50 AM JST
event
* Tue 25 Mar 2014 11:10:53 AM JST
event
* Tue 25 Mar 2014 11:11:03 AM JST
event
* Tue 25 Mar 2014 11:16:18 AM JST
def focusin_logging(ev, *args, **kwargs):
    r"""SUMMARY
    
    focusin_logging(ev, *args, **kwargs)
    
    @Arguments:
    - `ev`:
    - `*args`:
    - `**kwargs`:
    
    @Return:
    """
    LOG.debug(ev)

* Tue 25 Mar 2014 11:16:38 AM JST
focusin
* Tue 25 Mar 2014 11:16:42 AM JST
button_logging
* Tue 25 Mar 2014 11:17:16 AM JST
def debug_button_press(event, *args, **kwargs):
    r"""SUMMARY

    debug_button_release(event, *args, **kwargs)

    @Arguments:
    - `event`:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    LOG.debug(event)


* Tue 25 Mar 2014 11:17:34 AM JST
def create_notify(event, *args, **kwargs):
    r"""SUMMARY

    create_notify(event, *args, **kwargs)

    @Arguments:
    - `event`:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    LOG.debug(event)

    window = CON.ext.get_active_window()

    dispatcher = kwargs['this']

    kmaps = keymap.KeymapPressList.get_matches(window)
    dispatcher.keypress.set_keymap(kmaps, window)

    dispatcher.button_release.unset_keymaps(482)
    bmaps = keymap.ButtonReleaseList.get_matches(window)
    dispatcher.button_release.set_keymap(bmaps, 482)


* Tue 25 Mar 2014 11:20:21 AM JST
WrapButtonPressEvent(code=ButtonCode(KeyCode(3, state=State(0, [])), state=State(0, []))time
=1970-03-11 14:36:33, root=WindowRootType(window=Window(id=482)), event=WindowRootType(windo
w=Window(id=482)), child=None, root_x=1829, root_y=325, event_x=1829, event_y=325, same_scre
en=1)                                                                                      

* Tue 25 Mar 2014 11:22:12 AM JST
1829
* Tue 25 Mar 2014 11:22:21 AM JST
325
* Tue 25 Mar 2014 11:22:30 AM JST
1829
* Tue 25 Mar 2014 11:22:34 AM JST
325
* Tue 25 Mar 2014 11:29:50 AM JST
from
* Tue 25 Mar 2014 11:30:10 AM JST
EventMask
* Tue 25 Mar 2014 11:31:08 AM JST
True
* Tue 25 Mar 2014 11:33:07 AM JST
False
* Tue 25 Mar 2014 11:35:36 AM JST
54525974
* Tue 25 Mar 2014 11:45:31 AM JST
54525974
* Tue 25 Mar 2014 11:46:57 AM JST
from Xlib.ext.xtest import fake_input
* Tue 25 Mar 2014 11:47:04 AM JST
fake_input(d, X.ButtonPress, 1)
* Tue 25 Mar 2014 11:47:48 AM JST
fake_input(d, X.ButtonPress, 1)
* Tue 25 Mar 2014 11:48:07 AM JST
fake_input(d, X.ButtonRelease, 1)
* Tue 25 Mar 2014 11:50:35 AM JST
fake_input
* Tue 25 Mar 2014 11:50:57 AM JST
display.
* Tue 25 Mar 2014 11:51:15 AM JST
'XTEST'
* Tue 25 Mar 2014 11:51:33 AM JST
FakeInput(display=d.display, opcode=d.display.get_extension_major('XTEST'))
* Tue 25 Mar 2014 11:52:52 AM JST
FakeInput(display=d.display, opcode=d.display.get_extension_major('XTEST'), event_type=X.ButtonPress, detail=1, time=X.CurrentTime, root=X.NONE, x=0, y=0)
* Tue 25 Mar 2014 11:55:24 AM JST
flush
* Tue 25 Mar 2014 11:55:24 AM JST
f.flush
* Tue 25 Mar 2014 11:56:04 AM JST
'\x04\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00%\x07E\x01%\x07E\x01\x00\x00\x00\x00'
* Tue 25 Mar 2014 11:56:11 AM JST
'\x8c\x02\t\x00\x04\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Tue 25 Mar 2014 11:57:58 AM JST
1829
* Tue 25 Mar 2014 11:58:02 AM JST
325
* Tue 25 Mar 2014 11:58:42 AM JST
482
* Tue 25 Mar 2014 11:59:11 AM JST
325
* Tue 25 Mar 2014 11:59:12 AM JST
1829
* Tue 25 Mar 2014 11:59:27 AM JST
X.ButtonPress,
* Tue 25 Mar 2014 12:08:22 PM JST
'\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x17\x00@\x03\x00\x00\x00\x00\x01\x00\x01\x00\x01\x00\x02\x00\x00\x00\x01\x00'
* Tue 25 Mar 2014 12:09:30 PM JST
d.get_input_focus().focus
* Tue 25 Mar 2014 12:12:41 PM JST
d.screen().root
* Tue 25 Mar 2014 12:13:33 PM JST
1829
* Tue 25 Mar 2014 12:13:43 PM JST
325
* Tue 25 Mar 2014 12:13:49 PM JST
325
* Tue 25 Mar 2014 12:14:06 PM JST
d.screen().root
* Tue 25 Mar 2014 01:15:26 PM JST
tra
* Tue 25 Mar 2014 01:15:26 PM JST
root.tra
* Tue 25 Mar 2014 01:15:27 PM JST
182]: root.tra
* Tue 25 Mar 2014 01:21:25 PM JST
svn checkout http://pymouse.googlecode.com/svn/trunk/ pymouse-read-only
* Tue 25 Mar 2014 01:21:47 PM JST
svn checkout http://pymouse.googlecode.com/svn/trunk/@25 pymouse-read-only
* Tue 25 Mar 2014 01:22:36 PM JST
/root/work/xlibcpp/pyx/xlib/pymouse-read-only
* Tue 25 Mar 2014 01:25:48 PM JST

* Tue 25 Mar 2014 01:25:57 PM JST

* Tue 25 Mar 2014 01:28:55 PM JST
X.Button1
* Tue 25 Mar 2014 01:36:40 PM JST
close
* Tue 25 Mar 2014 02:55:55 PM JST
event.ButtonPress
* Tue 25 Mar 2014 02:56:03 PM JST
time=X.CurrentTime,
* Tue 25 Mar 2014 02:56:08 PM JST
root=root,
* Tue 25 Mar 2014 02:56:11 PM JST
window=focus,
* Tue 25 Mar 2014 02:56:14 PM JST
same_screen=1,
* Tue 25 Mar 2014 02:56:18 PM JST
child=X.NONE,
* Tue 25 Mar 2014 02:56:24 PM JST
root_x=x,
* Tue 25 Mar 2014 02:56:43 PM JST
root_y=y,
* Tue 25 Mar 2014 02:56:49 PM JST
event_x=1000,
* Tue 25 Mar 2014 02:56:55 PM JST
event_y=600,
* Tue 25 Mar 2014 02:56:58 PM JST
state=0,
* Tue 25 Mar 2014 02:57:03 PM JST
detail=X.Button1
* Tue 25 Mar 2014 02:57:18 PM JST
'\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x17\x00@\x03\x00\x00\x00\x00\xe8\x03X\x02\xe8\x03X\x02\x00\x00\x01\x00'
* Tue 25 Mar 2014 03:00:55 PM JST
54525974
* Tue 25 Mar 2014 03:01:20 PM JST
'\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\xe8\x03X\x02\xe8\x03X\x02\x00\x00\x01\x00'
* Tue 25 Mar 2014 03:03:17 PM JST
c.core.SendEvent(True, 482, 0, eve)
* Tue 25 Mar 2014 03:03:39 PM JST
54525974
* Tue 25 Mar 2014 03:33:17 PM JST


'\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x17\x00@\x03\x00\x00\x00\x00\xe8\x03X\x02\xe8\x03X\x02\x00\x00\x01\x00'

'\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\xe8\x03X\x02\xe8\x03X\x02\x00\x00\x01\x00'
* Tue 25 Mar 2014 03:33:18 PM JST

* Tue 25 Mar 2014 03:33:18 PM JST

* Tue 25 Mar 2014 03:33:20 PM JST

* Tue 25 Mar 2014 03:33:22 PM JST

* Tue 25 Mar 2014 03:33:23 PM JST

* Tue 25 Mar 2014 03:33:24 PM JST

'\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\xe8\x03X\x02\xe8\x03X\x02\x00\x00\x01\x00'
* Tue 25 Mar 2014 03:36:06 PM JST
83886185
* Tue 25 Mar 2014 03:37:32 PM JST
67108867
* Tue 25 Mar 2014 03:41:44 PM JST
67108867
* Tue 25 Mar 2014 03:41:58 PM JST
sleep(5);
* Tue 25 Mar 2014 03:49:25 PM JST
__event.
* Tue 25 Mar 2014 03:49:34 PM JST
__event.
* Wed 26 Mar 2014 06:12:49 AM JST
        from xahk.xconnection import Connection
        con = Connection.get_instance(display=self.display)
        window = window or con.ext.get_active_window()
        event = pack(self.struct_code,
                     type_,
                     detail,
                     self.sequence_number,
                     time,
                     self.root,
                     window,
                     0, # child
                     0, 0, 0, 0, # rootx, rooty, eventx, eventy
                     state,
                     0 # same screen
        )
        con.core.SendEvent(True, window, 0, event)

* Wed 26 Mar 2014 06:18:42 AM JST
c.ext.sendkey._send(4,1, rootx=0, rooty=0, eventx=1000, eventy=600)
* Wed 26 Mar 2014 06:21:08 AM JST
eve=pack('2BH4I5HBx', 4, 3, 0, 0, 482, 67108867,0,0,0,300,600,0,1)
* Wed 26 Mar 2014 06:21:49 AM JST
54525974
* Wed 26 Mar 2014 06:22:40 AM JST
54525974
* Wed 26 Mar 2014 06:24:36 AM JST
54525974
* Wed 26 Mar 2014 06:27:30 AM JST
eve=pack('2BH4I5HBx', 4, 1, 0, 0, 482, 54525974,0,0,0,300,600,0,1)
* Wed 26 Mar 2014 06:27:42 AM JST
'\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Wed 26 Mar 2014 06:27:48 AM JST
'\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00,\x01X\x02\x00\x00\x01\x00'
* Wed 26 Mar 2014 06:30:07 AM JST
c.core.SendEvent(True, 54525974, 0, eve)
* Wed 26 Mar 2014 06:32:50 AM JST
repr)
* Wed 26 Mar 2014 06:33:33 AM JST
 # rootx, rooty, eventx, eventy
* Wed 26 Mar 2014 06:58:31 AM JST
/usr/lib/python2.7/dist-packages/xcb/__init__.py
* Wed 26 Mar 2014 07:02:58 AM JST
connect()
* Wed 26 Mar 2014 07:03:01 AM JST
c=xcb.
* Wed 26 Mar 2014 07:05:01 AM JST
import xcb
* Wed 26 Mar 2014 07:05:18 AM JST
import cStringIO
from struct import pack, unpack_from
from array import array

* Wed 26 Mar 2014 07:05:38 AM JST

* Wed 26 Mar 2014 07:05:38 AM JST

* Wed 26 Mar 2014 07:05:38 AM JST
from MODULE import 

* Wed 26 Mar 2014 07:06:19 AM JST
class CHAR2B(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.byte1, self.byte2,) = unpack_from('BB', parent, offset)

class POINT(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.x, self.y,) = unpack_from('hh', parent, offset)

class RECTANGLE(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.x, self.y, self.width, self.height,) = unpack_from('hhHH', parent, offset)

class ARC(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.x, self.y, self.width, self.height, self.angle1, self.angle2,) = unpack_from('hhHHhh', parent, offset)

class FORMAT(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.depth, self.bits_per_pixel, self.scanline_pad,) = unpack_from('BBB5x', parent, offset)

class VisualClass:
    StaticGray = 0
    GrayScale = 1
    StaticColor = 2
    PseudoColor = 3
    TrueColor = 4
    DirectColor = 5

class VISUALTYPE(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.visual_id, self._class, self.bits_per_rgb_value, self.colormap_entries, self.red_mask, self.green_mask, self.blue_mask,) = unpack_from('IBBHIII4x', parent, offset)

class DEPTH(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.depth, self.visuals_len,) = unpack_from('BxH4x', parent, offset)
        offset += 8
        self.visuals = xcb.List(parent, offset, self.visuals_len, VISUALTYPE, 24)
        offset += len(self.visuals.buf())
        xcb._resize_obj(self, offset - base)

class EventMask:
    NoEvent = 0
    KeyPress = 1
    KeyRelease = 2
    ButtonPress = 4
    ButtonRelease = 8
    EnterWindow = 16
    LeaveWindow = 32
    PointerMotion = 64
    PointerMotionHint = 128
    Button1Motion = 256
    Button2Motion = 512
    Button3Motion = 1024
    Button4Motion = 2048
    Button5Motion = 4096
    ButtonMotion = 8192
    KeymapState = 16384
    Exposure = 32768
    VisibilityChange = 65536
    StructureNotify = 131072
    ResizeRedirect = 262144
    SubstructureNotify = 524288
    SubstructureRedirect = 1048576
    FocusChange = 2097152
    PropertyChange = 4194304
    ColorMapChange = 8388608
    OwnerGrabButton = 16777216

class BackingStore:
    NotUseful = 0
    WhenMapped = 1
    Always = 2

class SCREEN(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.root, self.default_colormap, self.white_pixel, self.black_pixel, self.current_input_masks, self.width_in_pixels, self.height_in_pixels, self.width_in_millimeters, self.height_in_millimeters, self.min_installed_maps, self.max_installed_maps, self.root_visual, self.backing_stores, self.save_unders, self.root_depth, self.allowed_depths_len,) = unpack_from('IIIIIHHHHHHIBBBB', parent, offset)
        offset += 40
        self.allowed_depths = xcb.List(parent, offset, self.allowed_depths_len, DEPTH, -1)
        offset += len(self.allowed_depths.buf())
        xcb._resize_obj(self, offset - base)

class SetupRequest(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.byte_order, self.protocol_major_version, self.protocol_minor_version, self.authorization_protocol_name_len, self.authorization_protocol_data_len,) = unpack_from('BxHHHH2x', parent, offset)
        offset += 12
        self.authorization_protocol_name = xcb.List(parent, offset, self.authorization_protocol_name_len, 'b', 1)
        offset += len(self.authorization_protocol_name.buf())
        offset += xcb.type_pad(1, offset)
        self.authorization_protocol_data = xcb.List(parent, offset, self.authorization_protocol_data_len, 'b', 1)
        offset += len(self.authorization_protocol_data.buf())
        xcb._resize_obj(self, offset - base)

class SetupFailed(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.status, self.reason_len, self.protocol_major_version, self.protocol_minor_version, self.length,) = unpack_from('BBHHH', parent, offset)
        offset += 8
        self.reason = xcb.List(parent, offset, self.reason_len, 'b', 1)
        offset += len(self.reason.buf())
        xcb._resize_obj(self, offset - base)

class SetupAuthenticate(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.status, self.length,) = unpack_from('B5xH', parent, offset)
        offset += 8
        self.reason = xcb.List(parent, offset, (self.length * 4), 'b', 1)
        offset += len(self.reason.buf())
        xcb._resize_obj(self, offset - base)

class ImageOrder:
    LSBFirst = 0
    MSBFirst = 1

class Setup(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.status, self.protocol_major_version, self.protocol_minor_version, self.length, self.release_number, self.resource_id_base, self.resource_id_mask, self.motion_buffer_size, self.vendor_len, self.maximum_request_length, self.roots_len, self.pixmap_formats_len, self.image_byte_order, self.bitmap_format_bit_order, self.bitmap_format_scanline_unit, self.bitmap_format_scanline_pad, self.min_keycode, self.max_keycode,) = unpack_from('BxHHHIIIIHHBBBBBBBB4x', parent, offset)
        offset += 40
        self.vendor = xcb.List(parent, offset, self.vendor_len, 'b', 1)
        offset += len(self.vendor.buf())
        offset += xcb.type_pad(8, offset)
        self.pixmap_formats = xcb.List(parent, offset, self.pixmap_formats_len, FORMAT, 8)
        offset += len(self.pixmap_formats.buf())
        offset += xcb.type_pad(4, offset)
        self.roots = xcb.List(parent, offset, self.roots_len, SCREEN, -1)
        offset += len(self.roots.buf())
        xcb._resize_obj(self, offset - base)

class ModMask:
    Shift = 1
    Lock = 2
    Control = 4
    _1 = 8
    _2 = 16
    _3 = 32
    _4 = 64
    _5 = 128
    Any = 32768

class KeyButMask:
    Shift = 1
    Lock = 2
    Control = 4
    Mod1 = 8
    Mod2 = 16
    Mod3 = 32
    Mod4 = 64
    Mod5 = 128
    Button1 = 256
    Button2 = 512
    Button3 = 1024
    Button4 = 2048
    Button5 = 4096

class Window:
    _None = 0

class KeyPressEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.time, self.root, self.event, self.child, self.root_x, self.root_y, self.event_x, self.event_y, self.state, self.same_screen,) = unpack_from('xB2xIIIIhhhhHBx', parent, offset)

class KeyReleaseEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.time, self.root, self.event, self.child, self.root_x, self.root_y, self.event_x, self.event_y, self.state, self.same_screen,) = unpack_from('xB2xIIIIhhhhHBx', parent, offset)

class ButtonMask:
    _1 = 256
    _2 = 512
    _3 = 1024
    _4 = 2048
    _5 = 4096
    Any = 32768

class ButtonPressEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.time, self.root, self.event, self.child, self.root_x, self.root_y, self.event_x, self.event_y, self.state, self.same_screen,) = unpack_from('xB2xIIIIhhhhHBx', parent, offset)

class ButtonReleaseEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.time, self.root, self.event, self.child, self.root_x, self.root_y, self.event_x, self.event_y, self.state, self.same_screen,) = unpack_from('xB2xIIIIhhhhHBx', parent, offset)

class Motion:
    Normal = 0
    Hint = 1

class MotionNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.time, self.root, self.event, self.child, self.root_x, self.root_y, self.event_x, self.event_y, self.state, self.same_screen,) = unpack_from('xB2xIIIIhhhhHBx', parent, offset)

class NotifyDetail:
    Ancestor = 0
    Virtual = 1
    Inferior = 2
    Nonlinear = 3
    NonlinearVirtual = 4
    Pointer = 5
    PointerRoot = 6
    _None = 7

class NotifyMode:
    Normal = 0
    Grab = 1
    Ungrab = 2
    WhileGrabbed = 3

class EnterNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.time, self.root, self.event, self.child, self.root_x, self.root_y, self.event_x, self.event_y, self.state, self.mode, self.same_screen_focus,) = unpack_from('xB2xIIIIhhhhHBB', parent, offset)

class LeaveNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.time, self.root, self.event, self.child, self.root_x, self.root_y, self.event_x, self.event_y, self.state, self.mode, self.same_screen_focus,) = unpack_from('xB2xIIIIhhhhHBB', parent, offset)

class FocusInEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.event, self.mode,) = unpack_from('xB2xIB3x', parent, offset)

class FocusOutEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.event, self.mode,) = unpack_from('xB2xIB3x', parent, offset)

class KeymapNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        offset += 1
        self.keys = xcb.List(parent, offset, 31, 'B', 1)

class ExposeEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.window, self.x, self.y, self.width, self.height, self.count,) = unpack_from('xx2xIHHHHH2x', parent, offset)

class GraphicsExposureEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.drawable, self.x, self.y, self.width, self.height, self.minor_opcode, self.count, self.major_opcode,) = unpack_from('xx2xIHHHHHHB3x', parent, offset)

class NoExposureEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.drawable, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class Visibility:
    Unobscured = 0
    PartiallyObscured = 1
    FullyObscured = 2

class VisibilityNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.window, self.state,) = unpack_from('xx2xIB3x', parent, offset)

class CreateNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.parent, self.window, self.x, self.y, self.width, self.height, self.border_width, self.override_redirect,) = unpack_from('xx2xIIhhHHHBx', parent, offset)

class DestroyNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window,) = unpack_from('xx2xII', parent, offset)

class UnmapNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.from_configure,) = unpack_from('xx2xIIB3x', parent, offset)

class MapNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.override_redirect,) = unpack_from('xx2xIIB3x', parent, offset)

class MapRequestEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.parent, self.window,) = unpack_from('xx2xII', parent, offset)

class ReparentNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.parent, self.x, self.y, self.override_redirect,) = unpack_from('xx2xIIIhhB3x', parent, offset)

class ConfigureNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.above_sibling, self.x, self.y, self.width, self.height, self.border_width, self.override_redirect,) = unpack_from('xx2xIIIhhHHHBx', parent, offset)

class ConfigureRequestEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.stack_mode, self.parent, self.window, self.sibling, self.x, self.y, self.width, self.height, self.border_width, self.value_mask,) = unpack_from('xB2xIIIhhHHHH', parent, offset)

class GravityNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.x, self.y,) = unpack_from('xx2xIIhh', parent, offset)

class ResizeRequestEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.window, self.width, self.height,) = unpack_from('xx2xIHH', parent, offset)

class Place:
    OnTop = 0
    OnBottom = 1

class CirculateNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.place,) = unpack_from('xx2xII4xB3x', parent, offset)

class CirculateRequestEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.place,) = unpack_from('xx2xII4xB3x', parent, offset)

class Property:
    NewValue = 0
    Delete = 1

class PropertyNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.window, self.atom, self.time, self.state,) = unpack_from('xx2xIIIB3x', parent, offset)

class SelectionClearEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.time, self.owner, self.selection,) = unpack_from('xx2xIII', parent, offset)

class Time:
    CurrentTime = 0

class Atom:
    _None = 0
    Any = 0
    PRIMARY = 1
    SECONDARY = 2
    ARC = 3
    ATOM = 4
    BITMAP = 5
    CARDINAL = 6
    COLORMAP = 7
    CURSOR = 8
    CUT_BUFFER0 = 9
    CUT_BUFFER1 = 10
    CUT_BUFFER2 = 11
    CUT_BUFFER3 = 12
    CUT_BUFFER4 = 13
    CUT_BUFFER5 = 14
    CUT_BUFFER6 = 15
    CUT_BUFFER7 = 16
    DRAWABLE = 17
    FONT = 18
    INTEGER = 19
    PIXMAP = 20
    POINT = 21
    RECTANGLE = 22
    RESOURCE_MANAGER = 23
    RGB_COLOR_MAP = 24
    RGB_BEST_MAP = 25
    RGB_BLUE_MAP = 26
    RGB_DEFAULT_MAP = 27
    RGB_GRAY_MAP = 28
    RGB_GREEN_MAP = 29
    RGB_RED_MAP = 30
    STRING = 31
    VISUALID = 32
    WINDOW = 33
    WM_COMMAND = 34
    WM_HINTS = 35
    WM_CLIENT_MACHINE = 36
    WM_ICON_NAME = 37
    WM_ICON_SIZE = 38
    WM_NAME = 39
    WM_NORMAL_HINTS = 40
    WM_SIZE_HINTS = 41
    WM_ZOOM_HINTS = 42
    MIN_SPACE = 43
    NORM_SPACE = 44
    MAX_SPACE = 45
    END_SPACE = 46
    SUPERSCRIPT_X = 47
    SUPERSCRIPT_Y = 48
    SUBSCRIPT_X = 49
    SUBSCRIPT_Y = 50
    UNDERLINE_POSITION = 51
    UNDERLINE_THICKNESS = 52
    STRIKEOUT_ASCENT = 53
    STRIKEOUT_DESCENT = 54
    ITALIC_ANGLE = 55
    X_HEIGHT = 56
    QUAD_WIDTH = 57
    WEIGHT = 58
    POINT_SIZE = 59
    RESOLUTION = 60
    COPYRIGHT = 61
    NOTICE = 62
    FONT_NAME = 63
    FAMILY_NAME = 64
    FULL_NAME = 65
    CAP_HEIGHT = 66
    WM_CLASS = 67
    WM_TRANSIENT_FOR = 68

class SelectionRequestEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.time, self.owner, self.requestor, self.selection, self.target, self.property,) = unpack_from('xx2xIIIIII', parent, offset)

class SelectionNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.time, self.requestor, self.selection, self.target, self.property,) = unpack_from('xx2xIIIII', parent, offset)

class ColormapState:
    Uninstalled = 0
    Installed = 1

class Colormap:
    _None = 0

class ColormapNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.window, self.colormap, self.new, self.state,) = unpack_from('xx2xIIBB2x', parent, offset)

class ClientMessageData(xcb.Union):
    def __init__(self, parent, offset, size):
        xcb.Union.__init__(self, parent, offset, size)
        self.data8 = xcb.List(parent, offset, 20, 'B', 1)
        self.data16 = xcb.List(parent, offset, 10, 'H', 2)
        self.data32 = xcb.List(parent, offset, 5, 'I', 4)

class ClientMessageEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.format, self.window, self.type,) = unpack_from('xB2xII', parent, offset)
        offset += 12
        self.data = ClientMessageData(parent, offset, 60)

class Mapping:
    Modifier = 0
    Keyboard = 1
    Pointer = 2

class MappingNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.request, self.first_keycode, self.count,) = unpack_from('xx2xBBBx', parent, offset)

class RequestError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadRequest(xcb.ProtocolException):
    pass

class ValueError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadValue(xcb.ProtocolException):
    pass

class WindowError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadWindow(xcb.ProtocolException):
    pass

class PixmapError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadPixmap(xcb.ProtocolException):
    pass

class AtomError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadAtom(xcb.ProtocolException):
    pass

class CursorError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadCursor(xcb.ProtocolException):
    pass

class FontError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadFont(xcb.ProtocolException):
    pass

class MatchError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadMatch(xcb.ProtocolException):
    pass

class DrawableError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadDrawable(xcb.ProtocolException):
    pass

class AccessError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadAccess(xcb.ProtocolException):
    pass

class AllocError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadAlloc(xcb.ProtocolException):
    pass

class ColormapError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadColormap(xcb.ProtocolException):
    pass

class GContextError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadGContext(xcb.ProtocolException):
    pass

class IDChoiceError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadIDChoice(xcb.ProtocolException):
    pass

class NameError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadName(xcb.ProtocolException):
    pass

class LengthError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadLength(xcb.ProtocolException):
    pass

class ImplementationError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadImplementation(xcb.ProtocolException):
    pass

class WindowClass:
    CopyFromParent = 0
    InputOutput = 1
    InputOnly = 2

class CW:
    BackPixmap = 1
    BackPixel = 2
    BorderPixmap = 4
    BorderPixel = 8
    BitGravity = 16
    WinGravity = 32
    BackingStore = 64
    BackingPlanes = 128
    BackingPixel = 256
    OverrideRedirect = 512
    SaveUnder = 1024
    EventMask = 2048
    DontPropagate = 4096
    Colormap = 8192
    Cursor = 16384

class BackPixmap:
    _None = 0
    ParentRelative = 1

class Gravity:
    BitForget = 0
    WinUnmap = 0
    NorthWest = 1
    North = 2
    NorthEast = 3
    West = 4
    Center = 5
    East = 6
    SouthWest = 7
    South = 8
    SouthEast = 9
    Static = 10

class MapState:
    Unmapped = 0
    Unviewable = 1
    Viewable = 2

class GetWindowAttributesCookie(xcb.Cookie):
    pass

class GetWindowAttributesReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.backing_store, self.visual, self._class, self.bit_gravity, self.win_gravity, self.backing_planes, self.backing_pixel, self.save_under, self.map_is_installed, self.map_state, self.override_redirect, self.colormap, self.all_event_masks, self.your_event_mask, self.do_not_propagate_mask,) = unpack_from('xB2x4xIHBBIIBBBBIIIH2x', parent, offset)

class SetMode:
    Insert = 0
    Delete = 1

class ConfigWindow:
    X = 1
    Y = 2
    Width = 4
    Height = 8
    BorderWidth = 16
    Sibling = 32
    StackMode = 64

class StackMode:
    Above = 0
    Below = 1
    TopIf = 2
    BottomIf = 3
    Opposite = 4

class Circulate:
    RaiseLowest = 0
    LowerHighest = 1

class GetGeometryCookie(xcb.Cookie):
    pass

class GetGeometryReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.depth, self.root, self.x, self.y, self.width, self.height, self.border_width,) = unpack_from('xB2x4xIhhHHH2x', parent, offset)

class QueryTreeCookie(xcb.Cookie):
    pass

class QueryTreeReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.root, self.parent, self.children_len,) = unpack_from('xx2x4xIIH14x', parent, offset)
        offset += 32
        self.children = xcb.List(parent, offset, self.children_len, 'I', 4)

class InternAtomCookie(xcb.Cookie):
    pass

class InternAtomReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.atom,) = unpack_from('xx2x4xI', parent, offset)

class GetAtomNameCookie(xcb.Cookie):
    pass

class GetAtomNameReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.name_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.name = xcb.List(parent, offset, self.name_len, 'b', 1)

class PropMode:
    Replace = 0
    Prepend = 1
    Append = 2

class GetPropertyType:
    Any = 0

class GetPropertyCookie(xcb.Cookie):
    pass

class GetPropertyReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.format, self.type, self.bytes_after, self.value_len,) = unpack_from('xB2x4xIII12x', parent, offset)
        offset += 32
        self.value = xcb.List(parent, offset, (self.value_len * (self.format / 8)), 'B', 1)

class ListPropertiesCookie(xcb.Cookie):
    pass

class ListPropertiesReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.atoms_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.atoms = xcb.List(parent, offset, self.atoms_len, 'I', 4)

class GetSelectionOwnerCookie(xcb.Cookie):
    pass

class GetSelectionOwnerReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.owner,) = unpack_from('xx2x4xI', parent, offset)

class SendEventDest:
    PointerWindow = 0
    ItemFocus = 1

class GrabMode:
    Sync = 0
    Async = 1

class GrabStatus:
    Success = 0
    AlreadyGrabbed = 1
    InvalidTime = 2
    NotViewable = 3
    Frozen = 4

class Cursor:
    _None = 0

class GrabPointerCookie(xcb.Cookie):
    pass

class GrabPointerReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.status,) = unpack_from('xB2x4x', parent, offset)

class ButtonIndex:
    Any = 0
    _1 = 1
    _2 = 2
    _3 = 3
    _4 = 4
    _5 = 5

class GrabKeyboardCookie(xcb.Cookie):
    pass

class GrabKeyboardReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.status,) = unpack_from('xB2x4x', parent, offset)

class Grab:
    Any = 0

class Allow:
    AsyncPointer = 0
    SyncPointer = 1
    ReplayPointer = 2
    AsyncKeyboard = 3
    SyncKeyboard = 4
    ReplayKeyboard = 5
    AsyncBoth = 6
    SyncBoth = 7

class QueryPointerCookie(xcb.Cookie):
    pass

class QueryPointerReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.same_screen, self.root, self.child, self.root_x, self.root_y, self.win_x, self.win_y, self.mask,) = unpack_from('xB2x4xIIhhhhH2x', parent, offset)

class TIMECOORD(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.time, self.x, self.y,) = unpack_from('Ihh', parent, offset)

class GetMotionEventsCookie(xcb.Cookie):
    pass

class GetMotionEventsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.events_len,) = unpack_from('xx2x4xI20x', parent, offset)
        offset += 32
        self.events = xcb.List(parent, offset, self.events_len, TIMECOORD, 8)

class TranslateCoordinatesCookie(xcb.Cookie):
    pass

class TranslateCoordinatesReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.same_screen, self.child, self.dst_x, self.dst_y,) = unpack_from('xB2x4xIhh', parent, offset)

class InputFocus:
    _None = 0
    PointerRoot = 1
    Parent = 2
    FollowKeyboard = 3

class GetInputFocusCookie(xcb.Cookie):
    pass

class GetInputFocusReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.revert_to, self.focus,) = unpack_from('xB2x4xI', parent, offset)

class QueryKeymapCookie(xcb.Cookie):
    pass

class QueryKeymapReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        offset += 8
        self.keys = xcb.List(parent, offset, 32, 'B', 1)

class FontDraw:
    LeftToRight = 0
    RightToLeft = 1

class FONTPROP(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.name, self.value,) = unpack_from('II', parent, offset)

class CHARINFO(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.left_side_bearing, self.right_side_bearing, self.character_width, self.ascent, self.descent, self.attributes,) = unpack_from('hhhhhH', parent, offset)

class QueryFontCookie(xcb.Cookie):
    pass

class QueryFontReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        offset += 8
        self.min_bounds = CHARINFO(parent, offset, 12)
        offset += 12
        offset += 4
        offset += xcb.type_pad(12, offset)
        self.max_bounds = CHARINFO(parent, offset, 12)
        offset += 12
        (self.min_char_or_byte2, self.max_char_or_byte2, self.default_char, self.properties_len, self.draw_direction, self.min_byte1, self.max_byte1, self.all_chars_exist, self.font_ascent, self.font_descent, self.char_infos_len,) = unpack_from('4xHHHHBBBBhhI', parent, offset)
        offset += 24
        offset += xcb.type_pad(8, offset)
        self.properties = xcb.List(parent, offset, self.properties_len, FONTPROP, 8)
        offset += len(self.properties.buf())
        offset += xcb.type_pad(12, offset)
        self.char_infos = xcb.List(parent, offset, self.char_infos_len, CHARINFO, 12)

class QueryTextExtentsCookie(xcb.Cookie):
    pass

class QueryTextExtentsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.draw_direction, self.font_ascent, self.font_descent, self.overall_ascent, self.overall_descent, self.overall_width, self.overall_left, self.overall_right,) = unpack_from('xB2x4xhhhhiii', parent, offset)

class STR(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.name_len,) = unpack_from('B', parent, offset)
        offset += 1
        self.name = xcb.List(parent, offset, self.name_len, 'b', 1)
        offset += len(self.name.buf())
        xcb._resize_obj(self, offset - base)

class ListFontsCookie(xcb.Cookie):
    pass

class ListFontsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.names_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.names = xcb.List(parent, offset, self.names_len, STR, -1)

class ListFontsWithInfoCookie(xcb.Cookie):
    pass

class ListFontsWithInfoReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.name_len,) = unpack_from('xB2x4x', parent, offset)
        offset += 8
        self.min_bounds = CHARINFO(parent, offset, 12)
        offset += 12
        offset += 4
        offset += xcb.type_pad(12, offset)
        self.max_bounds = CHARINFO(parent, offset, 12)
        offset += 12
        (self.min_char_or_byte2, self.max_char_or_byte2, self.default_char, self.properties_len, self.draw_direction, self.min_byte1, self.max_byte1, self.all_chars_exist, self.font_ascent, self.font_descent, self.replies_hint,) = unpack_from('4xHHHHBBBBhhI', parent, offset)
        offset += 24
        offset += xcb.type_pad(8, offset)
        self.properties = xcb.List(parent, offset, self.properties_len, FONTPROP, 8)
        offset += len(self.properties.buf())
        offset += xcb.type_pad(1, offset)
        self.name = xcb.List(parent, offset, self.name_len, 'b', 1)

class GetFontPathCookie(xcb.Cookie):
    pass

class GetFontPathReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.path_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.path = xcb.List(parent, offset, self.path_len, STR, -1)

class GC:
    Function = 1
    PlaneMask = 2
    Foreground = 4
    Background = 8
    LineWidth = 16
    LineStyle = 32
    CapStyle = 64
    JoinStyle = 128
    FillStyle = 256
    FillRule = 512
    Tile = 1024
    Stipple = 2048
    TileStippleOriginX = 4096
    TileStippleOriginY = 8192
    Font = 16384
    SubwindowMode = 32768
    GraphicsExposures = 65536
    ClipOriginX = 131072
    ClipOriginY = 262144
    ClipMask = 524288
    DashOffset = 1048576
    DashList = 2097152
    ArcMode = 4194304

class GX:
    clear = 0
    _and = 1
    andReverse = 2
    copy = 3
    andInverted = 4
    noop = 5
    xor = 6
    _or = 7
    nor = 8
    equiv = 9
    invert = 10
    orReverse = 11
    copyInverted = 12
    orInverted = 13
    nand = 14
    set = 15

class LineStyle:
    Solid = 0
    OnOffDash = 1
    DoubleDash = 2

class CapStyle:
    NotLast = 0
    Butt = 1
    Round = 2
    Projecting = 3

class JoinStyle:
    Miter = 0
    Round = 1
    Bevel = 2

class FillStyle:
    Solid = 0
    Tiled = 1
    Stippled = 2
    OpaqueStippled = 3

class FillRule:
    EvenOdd = 0
    Winding = 1

class SubwindowMode:
    ClipByChildren = 0
    IncludeInferiors = 1

class ArcMode:
    Chord = 0
    PieSlice = 1

class ClipOrdering:
    Unsorted = 0
    YSorted = 1
    YXSorted = 2
    YXBanded = 3

class CoordMode:
    Origin = 0
    Previous = 1

class SEGMENT(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.x1, self.y1, self.x2, self.y2,) = unpack_from('hhhh', parent, offset)

class PolyShape:
    Complex = 0
    Nonconvex = 1
    Convex = 2

class ImageFormat:
    XYBitmap = 0
    XYPixmap = 1
    ZPixmap = 2

class GetImageCookie(xcb.Cookie):
    pass

class GetImageReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.depth, self.visual,) = unpack_from('xB2x4xI20x', parent, offset)
        offset += 32
        self.data = xcb.List(parent, offset, (self.length * 4), 'B', 1)

class ColormapAlloc:
    _None = 0
    All = 1

class ListInstalledColormapsCookie(xcb.Cookie):
    pass

class ListInstalledColormapsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.cmaps_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.cmaps = xcb.List(parent, offset, self.cmaps_len, 'I', 4)

class AllocColorCookie(xcb.Cookie):
    pass

class AllocColorReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.red, self.green, self.blue, self.pixel,) = unpack_from('xx2x4xHHH2xI', parent, offset)

class AllocNamedColorCookie(xcb.Cookie):
    pass

class AllocNamedColorReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.pixel, self.exact_red, self.exact_green, self.exact_blue, self.visual_red, self.visual_green, self.visual_blue,) = unpack_from('xx2x4xIHHHHHH', parent, offset)

class AllocColorCellsCookie(xcb.Cookie):
    pass

class AllocColorCellsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.pixels_len, self.masks_len,) = unpack_from('xx2x4xHH20x', parent, offset)
        offset += 32
        self.pixels = xcb.List(parent, offset, self.pixels_len, 'I', 4)
        offset += len(self.pixels.buf())
        offset += xcb.type_pad(4, offset)
        self.masks = xcb.List(parent, offset, self.masks_len, 'I', 4)

class AllocColorPlanesCookie(xcb.Cookie):
    pass

class AllocColorPlanesReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.pixels_len, self.red_mask, self.green_mask, self.blue_mask,) = unpack_from('xx2x4xH2xIII8x', parent, offset)
        offset += 32
        self.pixels = xcb.List(parent, offset, self.pixels_len, 'I', 4)

class ColorFlag:
    Red = 1
    Green = 2
    Blue = 4

class COLORITEM(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.pixel, self.red, self.green, self.blue, self.flags,) = unpack_from('IHHHBx', parent, offset)

class RGB(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.red, self.green, self.blue,) = unpack_from('HHH2x', parent, offset)

class QueryColorsCookie(xcb.Cookie):
    pass

class QueryColorsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.colors_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.colors = xcb.List(parent, offset, self.colors_len, RGB, 8)

class LookupColorCookie(xcb.Cookie):
    pass

class LookupColorReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.exact_red, self.exact_green, self.exact_blue, self.visual_red, self.visual_green, self.visual_blue,) = unpack_from('xx2x4xHHHHHH', parent, offset)

class Pixmap:
    _None = 0

class Font:
    _None = 0

class QueryShapeOf:
    LargestCursor = 0
    FastestTile = 1
    FastestStipple = 2

class QueryBestSizeCookie(xcb.Cookie):
    pass

class QueryBestSizeReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.width, self.height,) = unpack_from('xx2x4xHH', parent, offset)

class QueryExtensionCookie(xcb.Cookie):
    pass

class QueryExtensionReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.present, self.major_opcode, self.first_event, self.first_error,) = unpack_from('xx2x4xBBBB', parent, offset)

class ListExtensionsCookie(xcb.Cookie):
    pass

class ListExtensionsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.names_len,) = unpack_from('xB2x4x24x', parent, offset)
        offset += 32
        self.names = xcb.List(parent, offset, self.names_len, STR, -1)

class GetKeyboardMappingCookie(xcb.Cookie):
    pass

class GetKeyboardMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.keysyms_per_keycode,) = unpack_from('xB2x4x24x', parent, offset)
        offset += 32
        self.keysyms = xcb.List(parent, offset, self.length, 'I', 4)

class KB:
    KeyClickPercent = 1
    BellPercent = 2
    BellPitch = 4
    BellDuration = 8
    Led = 16
    LedMode = 32
    Key = 64
    AutoRepeatMode = 128

class LedMode:
    Off = 0
    On = 1

class AutoRepeatMode:
    Off = 0
    On = 1
    Default = 2

class GetKeyboardControlCookie(xcb.Cookie):
    pass

class GetKeyboardControlReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.global_auto_repeat, self.led_mask, self.key_click_percent, self.bell_percent, self.bell_pitch, self.bell_duration,) = unpack_from('xB2x4xIBBHH2x', parent, offset)
        offset += 20
        self.auto_repeats = xcb.List(parent, offset, 32, 'B', 1)

class GetPointerControlCookie(xcb.Cookie):
    pass

class GetPointerControlReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.acceleration_numerator, self.acceleration_denominator, self.threshold,) = unpack_from('xx2x4xHHH18x', parent, offset)

class Blanking:
    NotPreferred = 0
    Preferred = 1
    Default = 2

class Exposures:
    NotAllowed = 0
    Allowed = 1
    Default = 2

class GetScreenSaverCookie(xcb.Cookie):
    pass

class GetScreenSaverReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.timeout, self.interval, self.prefer_blanking, self.allow_exposures,) = unpack_from('xx2x4xHHBB18x', parent, offset)

class HostMode:
    Insert = 0
    Delete = 1

class Family:
    Internet = 0
    DECnet = 1
    Chaos = 2
    ServerInterpreted = 5
    Internet6 = 6

class HOST(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.family, self.address_len,) = unpack_from('BxH', parent, offset)
        offset += 4
        self.address = xcb.List(parent, offset, self.address_len, 'B', 1)
        offset += len(self.address.buf())
        xcb._resize_obj(self, offset - base)

class ListHostsCookie(xcb.Cookie):
    pass

class ListHostsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.mode, self.hosts_len,) = unpack_from('xB2x4xH22x', parent, offset)
        offset += 32
        self.hosts = xcb.List(parent, offset, self.hosts_len, HOST, -1)

class AccessControl:
    Disable = 0
    Enable = 1

class CloseDown:
    DestroyAll = 0
    RetainPermanent = 1
    RetainTemporary = 2

class Kill:
    AllTemporary = 0

class ScreenSaver:
    Reset = 0
    Active = 1

class MappingStatus:
    Success = 0
    Busy = 1
    Failure = 2

class SetPointerMappingCookie(xcb.Cookie):
    pass

class SetPointerMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.status,) = unpack_from('xB2x4x', parent, offset)

class GetPointerMappingCookie(xcb.Cookie):
    pass

class GetPointerMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.map_len,) = unpack_from('xB2x4x24x', parent, offset)
        offset += 32
        self.map = xcb.List(parent, offset, self.map_len, 'B', 1)

class MapIndex:
    Shift = 0
    Lock = 1
    Control = 2
    _1 = 3
    _2 = 4
    _3 = 5
    _4 = 6
    _5 = 7

class SetModifierMappingCookie(xcb.Cookie):
    pass

class SetModifierMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.status,) = unpack_from('xB2x4x', parent, offset)

class GetModifierMappingCookie(xcb.Cookie):
    pass

class GetModifierMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.keycodes_per_modifier,) = unpack_from('xB2x4x24x', parent, offset)
        offset += 32
        self.keycodes = xcb.List(parent, offset, (self.keycodes_per_modifier * 8), 'B', 1)

class xprotoExtension(xcb.Extension):

    def CreateWindowChecked(self, depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, True),
                                 xcb.VoidCookie())

    def CreateWindow(self, depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, False),
                                 xcb.VoidCookie())

    def ChangeWindowAttributesChecked(self, window, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, True),
                                 xcb.VoidCookie())

    def ChangeWindowAttributes(self, window, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, False),
                                 xcb.VoidCookie())

    def GetWindowAttributes(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, True),
                                 GetWindowAttributesCookie(),
                                 GetWindowAttributesReply)

    def GetWindowAttributesUnchecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, False),
                                 GetWindowAttributesCookie(),
                                 GetWindowAttributesReply)

    def DestroyWindowChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, True),
                                 xcb.VoidCookie())

    def DestroyWindow(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, False),
                                 xcb.VoidCookie())

    def DestroySubwindowsChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, True),
                                 xcb.VoidCookie())

    def DestroySubwindows(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, False),
                                 xcb.VoidCookie())

    def ChangeSaveSetChecked(self, mode, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, True),
                                 xcb.VoidCookie())

    def ChangeSaveSet(self, mode, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, False),
                                 xcb.VoidCookie())

    def ReparentWindowChecked(self, window, parent, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, True),
                                 xcb.VoidCookie())

    def ReparentWindow(self, window, parent, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, False),
                                 xcb.VoidCookie())

    def MapWindowChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, True),
                                 xcb.VoidCookie())

    def MapWindow(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, False),
                                 xcb.VoidCookie())

    def MapSubwindowsChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, True),
                                 xcb.VoidCookie())

    def MapSubwindows(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, False),
                                 xcb.VoidCookie())

    def UnmapWindowChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, True),
                                 xcb.VoidCookie())

    def UnmapWindow(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, False),
                                 xcb.VoidCookie())

    def UnmapSubwindowsChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, True),
                                 xcb.VoidCookie())

    def UnmapSubwindows(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, False),
                                 xcb.VoidCookie())

    def ConfigureWindowChecked(self, window, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, True),
                                 xcb.VoidCookie())

    def ConfigureWindow(self, window, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, False),
                                 xcb.VoidCookie())

    def CirculateWindowChecked(self, direction, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, True),
                                 xcb.VoidCookie())

    def CirculateWindow(self, direction, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, False),
                                 xcb.VoidCookie())

    def GetGeometry(self, drawable):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, True),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def GetGeometryUnchecked(self, drawable):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, False),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def QueryTree(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, True),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def QueryTreeUnchecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, False),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def InternAtom(self, only_if_exists, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, True),
                                 InternAtomCookie(),
                                 InternAtomReply)

    def InternAtomUnchecked(self, only_if_exists, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, False),
                                 InternAtomCookie(),
                                 InternAtomReply)

    def GetAtomName(self, atom):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, True),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)

    def GetAtomNameUnchecked(self, atom):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, False),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)

    def ChangePropertyChecked(self, mode, window, property, type, format, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, True),
                                 xcb.VoidCookie())

    def ChangeProperty(self, mode, window, property, type, format, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, False),
                                 xcb.VoidCookie())

    def DeletePropertyChecked(self, window, property):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, True),
                                 xcb.VoidCookie())

    def DeleteProperty(self, window, property):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, False),
                                 xcb.VoidCookie())

    def GetProperty(self, delete, window, property, type, long_offset, long_length):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, True),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def GetPropertyUnchecked(self, delete, window, property, type, long_offset, long_length):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, False),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def ListProperties(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, True),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def ListPropertiesUnchecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, False),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def SetSelectionOwnerChecked(self, owner, selection, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, True),
                                 xcb.VoidCookie())

    def SetSelectionOwner(self, owner, selection, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, False),
                                 xcb.VoidCookie())

    def GetSelectionOwner(self, selection):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, True),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def GetSelectionOwnerUnchecked(self, selection):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, False),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def ConvertSelectionChecked(self, requestor, selection, target, property, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, True),
                                 xcb.VoidCookie())

    def ConvertSelection(self, requestor, selection, target, property, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, False),
                                 xcb.VoidCookie())

    def SendEventChecked(self, propagate, destination, event_mask, event):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(array('b', event))))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, True),
                                 xcb.VoidCookie())

    def SendEvent(self, propagate, destination, event_mask, event):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(array('b', event))))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, False),
                                 xcb.VoidCookie())

    def GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, True),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def GrabPointerUnchecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, False),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def UngrabPointerChecked(self, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, True),
                                 xcb.VoidCookie())

    def UngrabPointer(self, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, False),
                                 xcb.VoidCookie())

    def GrabButtonChecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, True),
                                 xcb.VoidCookie())

    def GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, False),
                                 xcb.VoidCookie())

    def UngrabButtonChecked(self, button, grab_window, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, True),
                                 xcb.VoidCookie())

    def UngrabButton(self, button, grab_window, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, False),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrabChecked(self, cursor, time, event_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, True),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrab(self, cursor, time, event_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, False),
                                 xcb.VoidCookie())

    def GrabKeyboard(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, True),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def GrabKeyboardUnchecked(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, False),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def UngrabKeyboardChecked(self, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, True),
                                 xcb.VoidCookie())

    def UngrabKeyboard(self, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, False),
                                 xcb.VoidCookie())

    def GrabKeyChecked(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, True),
                                 xcb.VoidCookie())

    def GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, False),
                                 xcb.VoidCookie())

    def UngrabKeyChecked(self, key, grab_window, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, True),
                                 xcb.VoidCookie())

    def UngrabKey(self, key, grab_window, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, False),
                                 xcb.VoidCookie())

    def AllowEventsChecked(self, mode, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, True),
                                 xcb.VoidCookie())

    def AllowEvents(self, mode, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, False),
                                 xcb.VoidCookie())

    def GrabServerChecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, True),
                                 xcb.VoidCookie())

    def GrabServer(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, False),
                                 xcb.VoidCookie())

    def UngrabServerChecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, True),
                                 xcb.VoidCookie())

    def UngrabServer(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, False),
                                 xcb.VoidCookie())

    def QueryPointer(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, True),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def QueryPointerUnchecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, False),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def GetMotionEvents(self, window, start, stop):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, True),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def GetMotionEventsUnchecked(self, window, start, stop):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, False),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def TranslateCoordinates(self, src_window, dst_window, src_x, src_y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, True),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def TranslateCoordinatesUnchecked(self, src_window, dst_window, src_x, src_y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, False),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def WarpPointerChecked(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, True),
                                 xcb.VoidCookie())

    def WarpPointer(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, False),
                                 xcb.VoidCookie())

    def SetInputFocusChecked(self, revert_to, focus, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, True),
                                 xcb.VoidCookie())

    def SetInputFocus(self, revert_to, focus, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, False),
                                 xcb.VoidCookie())

    def GetInputFocus(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, True),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def GetInputFocusUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, False),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def QueryKeymap(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, True),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def QueryKeymapUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, False),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def OpenFontChecked(self, fid, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, True),
                                 xcb.VoidCookie())

    def OpenFont(self, fid, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, False),
                                 xcb.VoidCookie())

    def CloseFontChecked(self, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, True),
                                 xcb.VoidCookie())

    def CloseFont(self, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, False),
                                 xcb.VoidCookie())

    def QueryFont(self, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, True),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryFontUnchecked(self, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, False),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryTextExtents(self, font, string_len, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=x', ))
        buf.write(pack('=B', (string_len & 1)))
        buf.write(pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, True),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def QueryTextExtentsUnchecked(self, font, string_len, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=x', ))
        buf.write(pack('=B', (string_len & 1)))
        buf.write(pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, False),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def ListFonts(self, max_names, pattern_len, pattern):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, True),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsUnchecked(self, max_names, pattern_len, pattern):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, False),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsWithInfo(self, max_names, pattern_len, pattern):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, True),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def ListFontsWithInfoUnchecked(self, max_names, pattern_len, pattern):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, False),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def SetFontPathChecked(self, font_qty, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, True),
                                 xcb.VoidCookie())

    def SetFontPath(self, font_qty, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, False),
                                 xcb.VoidCookie())

    def GetFontPath(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, True),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def GetFontPathUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, False),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def CreatePixmapChecked(self, depth, pid, drawable, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, True),
                                 xcb.VoidCookie())

    def CreatePixmap(self, depth, pid, drawable, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, False),
                                 xcb.VoidCookie())

    def FreePixmapChecked(self, pixmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, True),
                                 xcb.VoidCookie())

    def FreePixmap(self, pixmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, False),
                                 xcb.VoidCookie())

    def CreateGCChecked(self, cid, drawable, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, True),
                                 xcb.VoidCookie())

    def CreateGC(self, cid, drawable, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, False),
                                 xcb.VoidCookie())

    def ChangeGCChecked(self, gc, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, True),
                                 xcb.VoidCookie())

    def ChangeGC(self, gc, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, False),
                                 xcb.VoidCookie())

    def CopyGCChecked(self, src_gc, dst_gc, value_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, True),
                                 xcb.VoidCookie())

    def CopyGC(self, src_gc, dst_gc, value_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, False),
                                 xcb.VoidCookie())

    def SetDashesChecked(self, gc, dash_offset, dashes_len, dashes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, True),
                                 xcb.VoidCookie())

    def SetDashes(self, gc, dash_offset, dashes_len, dashes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, False),
                                 xcb.VoidCookie())

    def SetClipRectanglesChecked(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, True),
                                 xcb.VoidCookie())

    def SetClipRectangles(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, False),
                                 xcb.VoidCookie())

    def FreeGCChecked(self, gc):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, True),
                                 xcb.VoidCookie())

    def FreeGC(self, gc):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, False),
                                 xcb.VoidCookie())

    def ClearAreaChecked(self, exposures, window, x, y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, True),
                                 xcb.VoidCookie())

    def ClearArea(self, exposures, window, x, y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, False),
                                 xcb.VoidCookie())

    def CopyAreaChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, True),
                                 xcb.VoidCookie())

    def CopyArea(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, False),
                                 xcb.VoidCookie())

    def CopyPlaneChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, True),
                                 xcb.VoidCookie())

    def CopyPlane(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, False),
                                 xcb.VoidCookie())

    def PolyPointChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, True),
                                 xcb.VoidCookie())

    def PolyPoint(self, coordinate_mode, drawable, gc, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, False),
                                 xcb.VoidCookie())

    def PolyLineChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, True),
                                 xcb.VoidCookie())

    def PolyLine(self, coordinate_mode, drawable, gc, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, False),
                                 xcb.VoidCookie())

    def PolySegmentChecked(self, drawable, gc, segments_len, segments):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, True),
                                 xcb.VoidCookie())

    def PolySegment(self, drawable, gc, segments_len, segments):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, False),
                                 xcb.VoidCookie())

    def PolyRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, True),
                                 xcb.VoidCookie())

    def PolyRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, False),
                                 xcb.VoidCookie())

    def PolyArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, True),
                                 xcb.VoidCookie())

    def PolyArc(self, drawable, gc, arcs_len, arcs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, False),
                                 xcb.VoidCookie())

    def FillPolyChecked(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, True),
                                 xcb.VoidCookie())

    def FillPoly(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, False),
                                 xcb.VoidCookie())

    def PolyFillRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, True),
                                 xcb.VoidCookie())

    def PolyFillRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, False),
                                 xcb.VoidCookie())

    def PolyFillArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, True),
                                 xcb.VoidCookie())

    def PolyFillArc(self, drawable, gc, arcs_len, arcs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, False),
                                 xcb.VoidCookie())

    def PutImageChecked(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, True),
                                 xcb.VoidCookie())

    def PutImage(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, False),
                                 xcb.VoidCookie())

    def GetImage(self, format, drawable, x, y, width, height, plane_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, True),
                                 GetImageCookie(),
                                 GetImageReply)

    def GetImageUnchecked(self, format, drawable, x, y, width, height, plane_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, False),
                                 GetImageCookie(),
                                 GetImageReply)

    def PolyText8Checked(self, drawable, gc, x, y, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, True),
                                 xcb.VoidCookie())

    def PolyText8(self, drawable, gc, x, y, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, False),
                                 xcb.VoidCookie())

    def PolyText16Checked(self, drawable, gc, x, y, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, True),
                                 xcb.VoidCookie())

    def PolyText16(self, drawable, gc, x, y, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, False),
                                 xcb.VoidCookie())

    def ImageText8Checked(self, string_len, drawable, gc, x, y, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, True),
                                 xcb.VoidCookie())

    def ImageText8(self, string_len, drawable, gc, x, y, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, False),
                                 xcb.VoidCookie())

    def ImageText16Checked(self, string_len, drawable, gc, x, y, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, True),
                                 xcb.VoidCookie())

    def ImageText16(self, string_len, drawable, gc, x, y, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, False),
                                 xcb.VoidCookie())

    def CreateColormapChecked(self, alloc, mid, window, visual):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, True),
                                 xcb.VoidCookie())

    def CreateColormap(self, alloc, mid, window, visual):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, False),
                                 xcb.VoidCookie())

    def FreeColormapChecked(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, True),
                                 xcb.VoidCookie())

    def FreeColormap(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, False),
                                 xcb.VoidCookie())

    def CopyColormapAndFreeChecked(self, mid, src_cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, True),
                                 xcb.VoidCookie())

    def CopyColormapAndFree(self, mid, src_cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, False),
                                 xcb.VoidCookie())

    def InstallColormapChecked(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, True),
                                 xcb.VoidCookie())

    def InstallColormap(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, False),
                                 xcb.VoidCookie())

    def UninstallColormapChecked(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, True),
                                 xcb.VoidCookie())

    def UninstallColormap(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, False),
                                 xcb.VoidCookie())

    def ListInstalledColormaps(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, True),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def ListInstalledColormapsUnchecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, False),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def AllocColor(self, cmap, red, green, blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, True),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocColorUnchecked(self, cmap, red, green, blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, False),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocNamedColor(self, cmap, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, True),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocNamedColorUnchecked(self, cmap, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, False),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocColorCells(self, contiguous, cmap, colors, planes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, True),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorCellsUnchecked(self, contiguous, cmap, colors, planes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, False),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorPlanes(self, contiguous, cmap, colors, reds, greens, blues):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, True),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def AllocColorPlanesUnchecked(self, contiguous, cmap, colors, reds, greens, blues):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, False),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def FreeColorsChecked(self, cmap, plane_mask, pixels_len, pixels):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, True),
                                 xcb.VoidCookie())

    def FreeColors(self, cmap, plane_mask, pixels_len, pixels):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, False),
                                 xcb.VoidCookie())

    def StoreColorsChecked(self, cmap, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, True),
                                 xcb.VoidCookie())

    def StoreColors(self, cmap, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, False),
                                 xcb.VoidCookie())

    def StoreNamedColorChecked(self, flags, cmap, pixel, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, True),
                                 xcb.VoidCookie())

    def StoreNamedColor(self, flags, cmap, pixel, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, False),
                                 xcb.VoidCookie())

    def QueryColors(self, cmap, pixels_len, pixels):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        buf.write(str(buffer(array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, True),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def QueryColorsUnchecked(self, cmap, pixels_len, pixels):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        buf.write(str(buffer(array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, False),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def LookupColor(self, cmap, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, True),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def LookupColorUnchecked(self, cmap, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, False),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def CreateCursorChecked(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, True),
                                 xcb.VoidCookie())

    def CreateCursor(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, False),
                                 xcb.VoidCookie())

    def CreateGlyphCursorChecked(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, True),
                                 xcb.VoidCookie())

    def CreateGlyphCursor(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, False),
                                 xcb.VoidCookie())

    def FreeCursorChecked(self, cursor):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, True),
                                 xcb.VoidCookie())

    def FreeCursor(self, cursor):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, False),
                                 xcb.VoidCookie())

    def RecolorCursorChecked(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, True),
                                 xcb.VoidCookie())

    def RecolorCursor(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, False),
                                 xcb.VoidCookie())

    def QueryBestSize(self, _class, drawable, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, True),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryBestSizeUnchecked(self, _class, drawable, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, False),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryExtension(self, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xH2x', name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, True),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def QueryExtensionUnchecked(self, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xH2x', name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, False),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def ListExtensions(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, True),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ListExtensionsUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, False),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ChangeKeyboardMappingChecked(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardMapping(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardMapping(self, first_keycode, count):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, True),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def GetKeyboardMappingUnchecked(self, first_keycode, count):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, False),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def ChangeKeyboardControlChecked(self, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardControl(self, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardControl(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, True),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def GetKeyboardControlUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, False),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def BellChecked(self, percent):
        buf = cStringIO.StringIO()
        buf.write(pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, True),
                                 xcb.VoidCookie())

    def Bell(self, percent):
        buf = cStringIO.StringIO()
        buf.write(pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, False),
                                 xcb.VoidCookie())

    def ChangePointerControlChecked(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, True),
                                 xcb.VoidCookie())

    def ChangePointerControl(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, False),
                                 xcb.VoidCookie())

    def GetPointerControl(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, True),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def GetPointerControlUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, False),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def SetScreenSaverChecked(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, True),
                                 xcb.VoidCookie())

    def SetScreenSaver(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, False),
                                 xcb.VoidCookie())

    def GetScreenSaver(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, True),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def GetScreenSaverUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, False),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def ChangeHostsChecked(self, mode, family, address_len, address):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, True),
                                 xcb.VoidCookie())

    def ChangeHosts(self, mode, family, address_len, address):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, False),
                                 xcb.VoidCookie())

    def ListHosts(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, True),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def ListHostsUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, False),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def SetAccessControlChecked(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, True),
                                 xcb.VoidCookie())

    def SetAccessControl(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, False),
                                 xcb.VoidCookie())

    def SetCloseDownModeChecked(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, True),
                                 xcb.VoidCookie())

    def SetCloseDownMode(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, False),
                                 xcb.VoidCookie())

    def KillClientChecked(self, resource):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, True),
                                 xcb.VoidCookie())

    def KillClient(self, resource):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, False),
                                 xcb.VoidCookie())

    def RotatePropertiesChecked(self, window, atoms_len, delta, atoms):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, True),
                                 xcb.VoidCookie())

    def RotateProperties(self, window, atoms_len, delta, atoms):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, False),
                                 xcb.VoidCookie())

    def ForceScreenSaverChecked(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, True),
                                 xcb.VoidCookie())

    def ForceScreenSaver(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, False),
                                 xcb.VoidCookie())

    def SetPointerMapping(self, map_len, map):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', map_len))
        buf.write(str(buffer(array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, True),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def SetPointerMappingUnchecked(self, map_len, map):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', map_len))
        buf.write(str(buffer(array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, False),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def GetPointerMapping(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, True),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def GetPointerMappingUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, False),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def SetModifierMapping(self, keycodes_per_modifier, keycodes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, True),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def SetModifierMappingUnchecked(self, keycodes_per_modifier, keycodes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, False),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def GetModifierMapping(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, True),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def GetModifierMappingUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, False),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def NoOperationChecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, True),
                                 xcb.VoidCookie())

    def NoOperation(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, False),
                                 xcb.VoidCookie())

_events = {
    2 : KeyPressEvent,
    3 : KeyReleaseEvent,
    4 : ButtonPressEvent,
    5 : ButtonReleaseEvent,
    6 : MotionNotifyEvent,
    7 : EnterNotifyEvent,
    8 : LeaveNotifyEvent,
    9 : FocusInEvent,
    10 : FocusOutEvent,
    11 : KeymapNotifyEvent,
    12 : ExposeEvent,
    13 : GraphicsExposureEvent,
    14 : NoExposureEvent,
    15 : VisibilityNotifyEvent,
    16 : CreateNotifyEvent,
    17 : DestroyNotifyEvent,
    18 : UnmapNotifyEvent,
    19 : MapNotifyEvent,
    20 : MapRequestEvent,
    21 : ReparentNotifyEvent,
    22 : ConfigureNotifyEvent,
    23 : ConfigureRequestEvent,
    24 : GravityNotifyEvent,
    25 : ResizeRequestEvent,
    26 : CirculateNotifyEvent,
    27 : CirculateRequestEvent,
    28 : PropertyNotifyEvent,
    29 : SelectionClearEvent,
    30 : SelectionRequestEvent,
    31 : SelectionNotifyEvent,
    32 : ColormapNotifyEvent,
    33 : ClientMessageEvent,
    34 : MappingNotifyEvent,
}

_errors = {
    1 : (RequestError, BadRequest),
    2 : (ValueError, BadValue),
    3 : (WindowError, BadWindow),
    4 : (PixmapError, BadPixmap),
    5 : (AtomError, BadAtom),
    6 : (CursorError, BadCursor),
    7 : (FontError, BadFont),
    8 : (MatchError, BadMatch),
    9 : (DrawableError, BadDrawable),
    10 : (AccessError, BadAccess),
    11 : (AllocError, BadAlloc),
    12 : (ColormapError, BadColormap),
    13 : (GContextError, BadGContext),
    14 : (IDChoiceError, BadIDChoice),
    15 : (NameError, BadName),
    16 : (LengthError, BadLength),
    17 : (ImplementationError, BadImplementation),
}

xcb._add_core(xprotoExtension, Setup, _events, _errors)

* Wed 26 Mar 2014 07:08:47 AM JST
__all__ = [ 'xproto', 'bigreq', 'xc_misc' ]
* Wed 26 Mar 2014 07:35:15 AM JST
create_from_stream
* Wed 26 Mar 2014 07:43:41 AM JST
class VisualClass:
    StaticGray = 0
    GrayScale = 1
    StaticColor = 2
    PseudoColor = 3
    TrueColor = 4
    DirectColor = 5

* Wed 26 Mar 2014 07:44:40 AM JST
class EventMask:
    NoEvent = 0
    KeyPress = 1
    KeyRelease = 2
    ButtonPress = 4
    ButtonRelease = 8
    EnterWindow = 16
    LeaveWindow = 32
    PointerMotion = 64
    PointerMotionHint = 128
    Button1Motion = 256
    Button2Motion = 512
    Button3Motion = 1024
    Button4Motion = 2048
    Button5Motion = 4096
    ButtonMotion = 8192
    KeymapState = 16384
    Exposure = 32768
    VisibilityChange = 65536
    StructureNotify = 131072
    ResizeRedirect = 262144
    SubstructureNotify = 524288
    SubstructureRedirect = 1048576
    FocusChange = 2097152
    PropertyChange = 4194304
    ColorMapChange = 8388608
    OwnerGrabButton = 16777216


* Wed 26 Mar 2014 07:44:50 AM JST
(IntEnum)
* Wed 26 Mar 2014 07:45:22 AM JST
class BackingStore:
    NotUseful = 0
    WhenMapped = 1
    Always = 2

* Wed 26 Mar 2014 07:46:26 AM JST
class ImageOrder:
    LSBFirst = 0
    MSBFirst = 1

* Wed 26 Mar 2014 07:47:06 AM JST
class ModMask:
    Shift = 1
    Lock = 2
    Control = 4
    _1 = 8
    _2 = 16
    _3 = 32
    _4 = 64
    _5 = 128
    Any = 32768

* Wed 26 Mar 2014 07:47:56 AM JST
class KeyButMask:
    Shift = 1
    Lock = 2
    Control = 4
    Mod1 = 8
    Mod2 = 16
    Mod3 = 32
    Mod4 = 64
    Mod5 = 128
    Button1 = 256
    Button2 = 512
    Button3 = 1024
    Button4 = 2048
    Button5 = 4096

* Wed 26 Mar 2014 07:49:44 AM JST
class Window:
    _None = 0

* Wed 26 Mar 2014 07:50:04 AM JST
class ButtonMask:
    _1 = 256
    _2 = 512
    _3 = 1024
    _4 = 2048
    _5 = 4096
    Any = 32768

* Wed 26 Mar 2014 07:50:23 AM JST
class Motion:
    Normal = 0
    Hint = 1

* Wed 26 Mar 2014 07:50:34 AM JST
class NotifyDetail:
    Ancestor = 0
    Virtual = 1
    Inferior = 2
    Nonlinear = 3
    NonlinearVirtual = 4
    Pointer = 5
    PointerRoot = 6
    _None = 7

* Wed 26 Mar 2014 07:50:48 AM JST
class NotifyMode:
    Normal = 0
    Grab = 1
    Ungrab = 2
    WhileGrabbed = 3

* Wed 26 Mar 2014 07:50:56 AM JST
class Visibility:
    Unobscured = 0
    PartiallyObscured = 1
    FullyObscured = 2

* Wed 26 Mar 2014 07:51:09 AM JST
class Place:
    OnTop = 0
    OnBottom = 1

* Wed 26 Mar 2014 07:51:15 AM JST
class Property:
    NewValue = 0
    Delete = 1

* Wed 26 Mar 2014 07:51:22 AM JST
class Time:
    CurrentTime = 0


* Wed 26 Mar 2014 07:51:24 AM JST
class Time:
    CurrentTime = 0

* Wed 26 Mar 2014 07:51:35 AM JST
class Atom:
    _None = 0
    Any = 0
    PRIMARY = 1
    SECONDARY = 2
    ARC = 3
    ATOM = 4
    BITMAP = 5
    CARDINAL = 6
    COLORMAP = 7
    CURSOR = 8
    CUT_BUFFER0 = 9
    CUT_BUFFER1 = 10
    CUT_BUFFER2 = 11
    CUT_BUFFER3 = 12
    CUT_BUFFER4 = 13
    CUT_BUFFER5 = 14
    CUT_BUFFER6 = 15
    CUT_BUFFER7 = 16
    DRAWABLE = 17
    FONT = 18
    INTEGER = 19
    PIXMAP = 20
    POINT = 21
    RECTANGLE = 22
    RESOURCE_MANAGER = 23
    RGB_COLOR_MAP = 24
    RGB_BEST_MAP = 25
    RGB_BLUE_MAP = 26
    RGB_DEFAULT_MAP = 27
    RGB_GRAY_MAP = 28
    RGB_GREEN_MAP = 29
    RGB_RED_MAP = 30
    STRING = 31
    VISUALID = 32
    WINDOW = 33
    WM_COMMAND = 34
    WM_HINTS = 35
    WM_CLIENT_MACHINE = 36
    WM_ICON_NAME = 37
    WM_ICON_SIZE = 38
    WM_NAME = 39
    WM_NORMAL_HINTS = 40
    WM_SIZE_HINTS = 41
    WM_ZOOM_HINTS = 42
    MIN_SPACE = 43
    NORM_SPACE = 44
    MAX_SPACE = 45
    END_SPACE = 46
    SUPERSCRIPT_X = 47
    SUPERSCRIPT_Y = 48
    SUBSCRIPT_X = 49
    SUBSCRIPT_Y = 50
    UNDERLINE_POSITION = 51
    UNDERLINE_THICKNESS = 52
    STRIKEOUT_ASCENT = 53
    STRIKEOUT_DESCENT = 54
    ITALIC_ANGLE = 55
    X_HEIGHT = 56
    QUAD_WIDTH = 57
    WEIGHT = 58
    POINT_SIZE = 59
    RESOLUTION = 60
    COPYRIGHT = 61
    NOTICE = 62
    FONT_NAME = 63
    FAMILY_NAME = 64
    FULL_NAME = 65
    CAP_HEIGHT = 66
    WM_CLASS = 67
    WM_TRANSIENT_FOR = 68

* Wed 26 Mar 2014 07:54:09 AM JST
class ColormapState:
    Uninstalled = 0
    Installed = 1

* Wed 26 Mar 2014 07:54:13 AM JST
class ColormapState:
    Uninstalled = 0
    Installed = 1

class Colormap:
    _None = 0

* Wed 26 Mar 2014 07:54:21 AM JST
class Mapping:
    Modifier = 0
    Keyboard = 1
    Pointer = 2


* Wed 26 Mar 2014 07:55:06 AM JST
class WindowClass:
    CopyFromParent = 0
    InputOutput = 1
    InputOnly = 2

class CW:
    BackPixmap = 1
    BackPixel = 2
    BorderPixmap = 4
    BorderPixel = 8
    BitGravity = 16
    WinGravity = 32
    BackingStore = 64
    BackingPlanes = 128
    BackingPixel = 256
    OverrideRedirect = 512
    SaveUnder = 1024
    EventMask = 2048
    DontPropagate = 4096
    Colormap = 8192
    Cursor = 16384

class BackPixmap:
    _None = 0
    ParentRelative = 1

class Gravity:
    BitForget = 0
    WinUnmap = 0
    NorthWest = 1
    North = 2
    NorthEast = 3
    West = 4
    Center = 5
    East = 6
    SouthWest = 7
    South = 8
    SouthEast = 9
    Static = 10

class MapState:
    Unmapped = 0
    Unviewable = 1
    Viewable = 2


* Wed 26 Mar 2014 07:55:12 AM JST
class SetMode:
    Insert = 0
    Delete = 1

class ConfigWindow:
    X = 1
    Y = 2
    Width = 4
    Height = 8
    BorderWidth = 16
    Sibling = 32
    StackMode = 64

class StackMode:
    Above = 0
    Below = 1
    TopIf = 2
    BottomIf = 3
    Opposite = 4

class Circulate:
    RaiseLowest = 0
    LowerHighest = 1


* Wed 26 Mar 2014 07:55:20 AM JST
class PropMode:
    Replace = 0
    Prepend = 1
    Append = 2

class GetPropertyType:
    Any = 0


* Wed 26 Mar 2014 07:55:29 AM JST
class SendEventDest:
    PointerWindow = 0
    ItemFocus = 1

class GrabMode:
    Sync = 0
    Async = 1

class GrabStatus:
    Success = 0
    AlreadyGrabbed = 1
    InvalidTime = 2
    NotViewable = 3
    Frozen = 4

class Cursor:
    _None = 0


* Wed 26 Mar 2014 07:55:34 AM JST
class ButtonIndex:
    Any = 0
    _1 = 1
    _2 = 2
    _3 = 3
    _4 = 4
    _5 = 5


* Wed 26 Mar 2014 07:56:11 AM JST
class Grab:
    Any = 0

class Allow:
    AsyncPointer = 0
    SyncPointer = 1
    ReplayPointer = 2
    AsyncKeyboard = 3
    SyncKeyboard = 4
    ReplayKeyboard = 5
    AsyncBoth = 6
    SyncBoth = 7

* Wed 26 Mar 2014 07:56:18 AM JST
class InputFocus:
    _None = 0
    PointerRoot = 1
    Parent = 2
    FollowKeyboard = 3

* Wed 26 Mar 2014 07:56:25 AM JST
class FontDraw:
    LeftToRight = 0
    RightToLeft = 1


* Wed 26 Mar 2014 07:56:47 AM JST
class GC:
    Function = 1
    PlaneMask = 2
    Foreground = 4
    Background = 8
    LineWidth = 16
    LineStyle = 32
    CapStyle = 64
    JoinStyle = 128
    FillStyle = 256
    FillRule = 512
    Tile = 1024
    Stipple = 2048
    TileStippleOriginX = 4096
    TileStippleOriginY = 8192
    Font = 16384
    SubwindowMode = 32768
    GraphicsExposures = 65536
    ClipOriginX = 131072
    ClipOriginY = 262144
    ClipMask = 524288
    DashOffset = 1048576
    DashList = 2097152
    ArcMode = 4194304

class GX:
    clear = 0
    _and = 1
    andReverse = 2
    copy = 3
    andInverted = 4
    noop = 5
    xor = 6
    _or = 7
    nor = 8
    equiv = 9
    invert = 10
    orReverse = 11
    copyInverted = 12
    orInverted = 13
    nand = 14
    set = 15

class LineStyle:
    Solid = 0
    OnOffDash = 1
    DoubleDash = 2

class CapStyle:
    NotLast = 0
    Butt = 1
    Round = 2
    Projecting = 3

class JoinStyle:
    Miter = 0
    Round = 1
    Bevel = 2

class FillStyle:
    Solid = 0
    Tiled = 1
    Stippled = 2
    OpaqueStippled = 3

class FillRule:
    EvenOdd = 0
    Winding = 1

class SubwindowMode:
    ClipByChildren = 0
    IncludeInferiors = 1

class ArcMode:
    Chord = 0
    PieSlice = 1

class ClipOrdering:
    Unsorted = 0
    YSorted = 1
    YXSorted = 2
    YXBanded = 3

class CoordMode:
    Origin = 0
    Previous = 1


* Wed 26 Mar 2014 07:56:53 AM JST
class PolyShape:
    Complex = 0
    Nonconvex = 1
    Convex = 2

class ImageFormat:
    XYBitmap = 0
    XYPixmap = 1
    ZPixmap = 2


* Wed 26 Mar 2014 07:57:00 AM JST
class ColormapAlloc:
    _None = 0
    All = 1


* Wed 26 Mar 2014 07:57:08 AM JST
class ColorFlag:
    Red = 1
    Green = 2
    Blue = 4


* Wed 26 Mar 2014 07:57:14 AM JST
class Pixmap:
    _None = 0

class Font:
    _None = 0

class QueryShapeOf:
    LargestCursor = 0
    FastestTile = 1
    FastestStipple = 2


* Wed 26 Mar 2014 07:57:25 AM JST
class KB:
    KeyClickPercent = 1
    BellPercent = 2
    BellPitch = 4
    BellDuration = 8
    Led = 16
    LedMode = 32
    Key = 64
    AutoRepeatMode = 128

class LedMode:
    Off = 0
    On = 1

class AutoRepeatMode:
    Off = 0
    On = 1
    Default = 2


* Wed 26 Mar 2014 07:57:32 AM JST
class Blanking:
    NotPreferred = 0
    Preferred = 1
    Default = 2

class Exposures:
    NotAllowed = 0
    Allowed = 1
    Default = 2


* Wed 26 Mar 2014 07:57:39 AM JST
class HostMode:
    Insert = 0
    Delete = 1

class Family:
    Internet = 0
    DECnet = 1
    Chaos = 2
    ServerInterpreted = 5
    Internet6 = 6


* Wed 26 Mar 2014 07:57:51 AM JST
class AccessControl:
    Disable = 0
    Enable = 1

class CloseDown:
    DestroyAll = 0
    RetainPermanent = 1
    RetainTemporary = 2

class Kill:
    AllTemporary = 0

class ScreenSaver:
    Reset = 0
    Active = 1

class MappingStatus:
    Success = 0
    Busy = 1
    Failure = 2


* Wed 26 Mar 2014 07:58:01 AM JST
class MapIndex:
    Shift = 0
    Lock = 1
    Control = 2
    _1 = 3
    _2 = 4
    _3 = 5
    _4 = 6
    _5 = 7

* Wed 26 Mar 2014 08:05:43 AM JST
c.core.property.get_property_reply(False, 81788974, '_NET_WM_NAME', 'UTF8_STRING', 0, 65535)
* Wed 26 Mar 2014 08:06:04 AM JST
54525974
* Wed 26 Mar 2014 08:08:37 AM JST
False, 
* Wed 26 Mar 2014 08:10:30 AM JST
InternAtom
* Wed 26 Mar 2014 08:10:36 AM JST
GetAtomName
* Wed 26 Mar 2014 08:42:57 AM JST
import xcb
import cStringIO
from struct import pack, unpack_from
from array import array

class CHAR2B(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.byte1, self.byte2,) = unpack_from('BB', parent, offset)

class POINT(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.x, self.y,) = unpack_from('hh', parent, offset)

class RECTANGLE(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.x, self.y, self.width, self.height,) = unpack_from('hhHH', parent, offset)

class ARC(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.x, self.y, self.width, self.height, self.angle1, self.angle2,) = unpack_from('hhHHhh', parent, offset)

class FORMAT(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.depth, self.bits_per_pixel, self.scanline_pad,) = unpack_from('BBB5x', parent, offset)

class VisualClass:
    StaticGray = 0
    GrayScale = 1
    StaticColor = 2
    PseudoColor = 3
    TrueColor = 4
    DirectColor = 5

class VISUALTYPE(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.visual_id, self._class, self.bits_per_rgb_value, self.colormap_entries, self.red_mask, self.green_mask, self.blue_mask,) = unpack_from('IBBHIII4x', parent, offset)

class DEPTH(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.depth, self.visuals_len,) = unpack_from('BxH4x', parent, offset)
        offset += 8
        self.visuals = xcb.List(parent, offset, self.visuals_len, VISUALTYPE, 24)
        offset += len(self.visuals.buf())
        xcb._resize_obj(self, offset - base)

class EventMask:
    NoEvent = 0
    KeyPress = 1
    KeyRelease = 2
    ButtonPress = 4
    ButtonRelease = 8
    EnterWindow = 16
    LeaveWindow = 32
    PointerMotion = 64
    PointerMotionHint = 128
    Button1Motion = 256
    Button2Motion = 512
    Button3Motion = 1024
    Button4Motion = 2048
    Button5Motion = 4096
    ButtonMotion = 8192
    KeymapState = 16384
    Exposure = 32768
    VisibilityChange = 65536
    StructureNotify = 131072
    ResizeRedirect = 262144
    SubstructureNotify = 524288
    SubstructureRedirect = 1048576
    FocusChange = 2097152
    PropertyChange = 4194304
    ColorMapChange = 8388608
    OwnerGrabButton = 16777216

class BackingStore:
    NotUseful = 0
    WhenMapped = 1
    Always = 2

class SCREEN(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.root, self.default_colormap, self.white_pixel, self.black_pixel, self.current_input_masks, self.width_in_pixels, self.height_in_pixels, self.width_in_millimeters, self.height_in_millimeters, self.min_installed_maps, self.max_installed_maps, self.root_visual, self.backing_stores, self.save_unders, self.root_depth, self.allowed_depths_len,) = unpack_from('IIIIIHHHHHHIBBBB', parent, offset)
        offset += 40
        self.allowed_depths = xcb.List(parent, offset, self.allowed_depths_len, DEPTH, -1)
        offset += len(self.allowed_depths.buf())
        xcb._resize_obj(self, offset - base)

class SetupRequest(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.byte_order, self.protocol_major_version, self.protocol_minor_version, self.authorization_protocol_name_len, self.authorization_protocol_data_len,) = unpack_from('BxHHHH2x', parent, offset)
        offset += 12
        self.authorization_protocol_name = xcb.List(parent, offset, self.authorization_protocol_name_len, 'b', 1)
        offset += len(self.authorization_protocol_name.buf())
        offset += xcb.type_pad(1, offset)
        self.authorization_protocol_data = xcb.List(parent, offset, self.authorization_protocol_data_len, 'b', 1)
        offset += len(self.authorization_protocol_data.buf())
        xcb._resize_obj(self, offset - base)

class SetupFailed(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.status, self.reason_len, self.protocol_major_version, self.protocol_minor_version, self.length,) = unpack_from('BBHHH', parent, offset)
        offset += 8
        self.reason = xcb.List(parent, offset, self.reason_len, 'b', 1)
        offset += len(self.reason.buf())
        xcb._resize_obj(self, offset - base)

class SetupAuthenticate(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.status, self.length,) = unpack_from('B5xH', parent, offset)
        offset += 8
        self.reason = xcb.List(parent, offset, (self.length * 4), 'b', 1)
        offset += len(self.reason.buf())
        xcb._resize_obj(self, offset - base)

class ImageOrder:
    LSBFirst = 0
    MSBFirst = 1

class Setup(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.status, self.protocol_major_version, self.protocol_minor_version, self.length, self.release_number, self.resource_id_base, self.resource_id_mask, self.motion_buffer_size, self.vendor_len, self.maximum_request_length, self.roots_len, self.pixmap_formats_len, self.image_byte_order, self.bitmap_format_bit_order, self.bitmap_format_scanline_unit, self.bitmap_format_scanline_pad, self.min_keycode, self.max_keycode,) = unpack_from('BxHHHIIIIHHBBBBBBBB4x', parent, offset)
        offset += 40
        self.vendor = xcb.List(parent, offset, self.vendor_len, 'b', 1)
        offset += len(self.vendor.buf())
        offset += xcb.type_pad(8, offset)
        self.pixmap_formats = xcb.List(parent, offset, self.pixmap_formats_len, FORMAT, 8)
        offset += len(self.pixmap_formats.buf())
        offset += xcb.type_pad(4, offset)
        self.roots = xcb.List(parent, offset, self.roots_len, SCREEN, -1)
        offset += len(self.roots.buf())
        xcb._resize_obj(self, offset - base)

class ModMask:
    Shift = 1
    Lock = 2
    Control = 4
    _1 = 8
    _2 = 16
    _3 = 32
    _4 = 64
    _5 = 128
    Any = 32768

class KeyButMask:
    Shift = 1
    Lock = 2
    Control = 4
    Mod1 = 8
    Mod2 = 16
    Mod3 = 32
    Mod4 = 64
    Mod5 = 128
    Button1 = 256
    Button2 = 512
    Button3 = 1024
    Button4 = 2048
    Button5 = 4096

class Window:
    _None = 0

class KeyPressEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.time, self.root, self.event, self.child, self.root_x, self.root_y, self.event_x, self.event_y, self.state, self.same_screen,) = unpack_from('xB2xIIIIhhhhHBx', parent, offset)

class KeyReleaseEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.time, self.root, self.event, self.child, self.root_x, self.root_y, self.event_x, self.event_y, self.state, self.same_screen,) = unpack_from('xB2xIIIIhhhhHBx', parent, offset)

class ButtonMask:
    _1 = 256
    _2 = 512
    _3 = 1024
    _4 = 2048
    _5 = 4096
    Any = 32768

class ButtonPressEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.time, self.root, self.event, self.child, self.root_x, self.root_y, self.event_x, self.event_y, self.state, self.same_screen,) = unpack_from('xB2xIIIIhhhhHBx', parent, offset)

class ButtonReleaseEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.time, self.root, self.event, self.child, self.root_x, self.root_y, self.event_x, self.event_y, self.state, self.same_screen,) = unpack_from('xB2xIIIIhhhhHBx', parent, offset)

class Motion:
    Normal = 0
    Hint = 1

class MotionNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.time, self.root, self.event, self.child, self.root_x, self.root_y, self.event_x, self.event_y, self.state, self.same_screen,) = unpack_from('xB2xIIIIhhhhHBx', parent, offset)

class NotifyDetail:
    Ancestor = 0
    Virtual = 1
    Inferior = 2
    Nonlinear = 3
    NonlinearVirtual = 4
    Pointer = 5
    PointerRoot = 6
    _None = 7

class NotifyMode:
    Normal = 0
    Grab = 1
    Ungrab = 2
    WhileGrabbed = 3

class EnterNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.time, self.root, self.event, self.child, self.root_x, self.root_y, self.event_x, self.event_y, self.state, self.mode, self.same_screen_focus,) = unpack_from('xB2xIIIIhhhhHBB', parent, offset)

class LeaveNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.time, self.root, self.event, self.child, self.root_x, self.root_y, self.event_x, self.event_y, self.state, self.mode, self.same_screen_focus,) = unpack_from('xB2xIIIIhhhhHBB', parent, offset)

class FocusInEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.event, self.mode,) = unpack_from('xB2xIB3x', parent, offset)

class FocusOutEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.event, self.mode,) = unpack_from('xB2xIB3x', parent, offset)

class KeymapNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        offset += 1
        self.keys = xcb.List(parent, offset, 31, 'B', 1)

class ExposeEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.window, self.x, self.y, self.width, self.height, self.count,) = unpack_from('xx2xIHHHHH2x', parent, offset)

class GraphicsExposureEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.drawable, self.x, self.y, self.width, self.height, self.minor_opcode, self.count, self.major_opcode,) = unpack_from('xx2xIHHHHHHB3x', parent, offset)

class NoExposureEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.drawable, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class Visibility:
    Unobscured = 0
    PartiallyObscured = 1
    FullyObscured = 2

class VisibilityNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.window, self.state,) = unpack_from('xx2xIB3x', parent, offset)

class CreateNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.parent, self.window, self.x, self.y, self.width, self.height, self.border_width, self.override_redirect,) = unpack_from('xx2xIIhhHHHBx', parent, offset)

class DestroyNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window,) = unpack_from('xx2xII', parent, offset)

class UnmapNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.from_configure,) = unpack_from('xx2xIIB3x', parent, offset)

class MapNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.override_redirect,) = unpack_from('xx2xIIB3x', parent, offset)

class MapRequestEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.parent, self.window,) = unpack_from('xx2xII', parent, offset)

class ReparentNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.parent, self.x, self.y, self.override_redirect,) = unpack_from('xx2xIIIhhB3x', parent, offset)

class ConfigureNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.above_sibling, self.x, self.y, self.width, self.height, self.border_width, self.override_redirect,) = unpack_from('xx2xIIIhhHHHBx', parent, offset)

class ConfigureRequestEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.stack_mode, self.parent, self.window, self.sibling, self.x, self.y, self.width, self.height, self.border_width, self.value_mask,) = unpack_from('xB2xIIIhhHHHH', parent, offset)

class GravityNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.x, self.y,) = unpack_from('xx2xIIhh', parent, offset)

class ResizeRequestEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.window, self.width, self.height,) = unpack_from('xx2xIHH', parent, offset)

class Place:
    OnTop = 0
    OnBottom = 1

class CirculateNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.place,) = unpack_from('xx2xII4xB3x', parent, offset)

class CirculateRequestEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.place,) = unpack_from('xx2xII4xB3x', parent, offset)

class Property:
    NewValue = 0
    Delete = 1

class PropertyNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.window, self.atom, self.time, self.state,) = unpack_from('xx2xIIIB3x', parent, offset)

class SelectionClearEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.time, self.owner, self.selection,) = unpack_from('xx2xIII', parent, offset)

class Time:
    CurrentTime = 0

class Atom:
    _None = 0
    Any = 0
    PRIMARY = 1
    SECONDARY = 2
    ARC = 3
    ATOM = 4
    BITMAP = 5
    CARDINAL = 6
    COLORMAP = 7
    CURSOR = 8
    CUT_BUFFER0 = 9
    CUT_BUFFER1 = 10
    CUT_BUFFER2 = 11
    CUT_BUFFER3 = 12
    CUT_BUFFER4 = 13
    CUT_BUFFER5 = 14
    CUT_BUFFER6 = 15
    CUT_BUFFER7 = 16
    DRAWABLE = 17
    FONT = 18
    INTEGER = 19
    PIXMAP = 20
    POINT = 21
    RECTANGLE = 22
    RESOURCE_MANAGER = 23
    RGB_COLOR_MAP = 24
    RGB_BEST_MAP = 25
    RGB_BLUE_MAP = 26
    RGB_DEFAULT_MAP = 27
    RGB_GRAY_MAP = 28
    RGB_GREEN_MAP = 29
    RGB_RED_MAP = 30
    STRING = 31
    VISUALID = 32
    WINDOW = 33
    WM_COMMAND = 34
    WM_HINTS = 35
    WM_CLIENT_MACHINE = 36
    WM_ICON_NAME = 37
    WM_ICON_SIZE = 38
    WM_NAME = 39
    WM_NORMAL_HINTS = 40
    WM_SIZE_HINTS = 41
    WM_ZOOM_HINTS = 42
    MIN_SPACE = 43
    NORM_SPACE = 44
    MAX_SPACE = 45
    END_SPACE = 46
    SUPERSCRIPT_X = 47
    SUPERSCRIPT_Y = 48
    SUBSCRIPT_X = 49
    SUBSCRIPT_Y = 50
    UNDERLINE_POSITION = 51
    UNDERLINE_THICKNESS = 52
    STRIKEOUT_ASCENT = 53
    STRIKEOUT_DESCENT = 54
    ITALIC_ANGLE = 55
    X_HEIGHT = 56
    QUAD_WIDTH = 57
    WEIGHT = 58
    POINT_SIZE = 59
    RESOLUTION = 60
    COPYRIGHT = 61
    NOTICE = 62
    FONT_NAME = 63
    FAMILY_NAME = 64
    FULL_NAME = 65
    CAP_HEIGHT = 66
    WM_CLASS = 67
    WM_TRANSIENT_FOR = 68

class SelectionRequestEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.time, self.owner, self.requestor, self.selection, self.target, self.property,) = unpack_from('xx2xIIIIII', parent, offset)

class SelectionNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.time, self.requestor, self.selection, self.target, self.property,) = unpack_from('xx2xIIIII', parent, offset)

class ColormapState:
    Uninstalled = 0
    Installed = 1

class Colormap:
    _None = 0

class ColormapNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.window, self.colormap, self.new, self.state,) = unpack_from('xx2xIIBB2x', parent, offset)

class ClientMessageData(xcb.Union):
    def __init__(self, parent, offset, size):
        xcb.Union.__init__(self, parent, offset, size)
        self.data8 = xcb.List(parent, offset, 20, 'B', 1)
        self.data16 = xcb.List(parent, offset, 10, 'H', 2)
        self.data32 = xcb.List(parent, offset, 5, 'I', 4)

class ClientMessageEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.format, self.window, self.type,) = unpack_from('xB2xII', parent, offset)
        offset += 12
        self.data = ClientMessageData(parent, offset, 60)

class Mapping:
    Modifier = 0
    Keyboard = 1
    Pointer = 2

class MappingNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.request, self.first_keycode, self.count,) = unpack_from('xx2xBBBx', parent, offset)

class RequestError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadRequest(xcb.ProtocolException):
    pass

class ValueError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadValue(xcb.ProtocolException):
    pass

class WindowError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadWindow(xcb.ProtocolException):
    pass

class PixmapError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadPixmap(xcb.ProtocolException):
    pass

class AtomError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadAtom(xcb.ProtocolException):
    pass

class CursorError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadCursor(xcb.ProtocolException):
    pass

class FontError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadFont(xcb.ProtocolException):
    pass

class MatchError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadMatch(xcb.ProtocolException):
    pass

class DrawableError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadDrawable(xcb.ProtocolException):
    pass

class AccessError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadAccess(xcb.ProtocolException):
    pass

class AllocError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadAlloc(xcb.ProtocolException):
    pass

class ColormapError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadColormap(xcb.ProtocolException):
    pass

class GContextError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadGContext(xcb.ProtocolException):
    pass

class IDChoiceError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadIDChoice(xcb.ProtocolException):
    pass

class NameError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadName(xcb.ProtocolException):
    pass

class LengthError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadLength(xcb.ProtocolException):
    pass

class ImplementationError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadImplementation(xcb.ProtocolException):
    pass

class WindowClass:
    CopyFromParent = 0
    InputOutput = 1
    InputOnly = 2

class CW:
    BackPixmap = 1
    BackPixel = 2
    BorderPixmap = 4
    BorderPixel = 8
    BitGravity = 16
    WinGravity = 32
    BackingStore = 64
    BackingPlanes = 128
    BackingPixel = 256
    OverrideRedirect = 512
    SaveUnder = 1024
    EventMask = 2048
    DontPropagate = 4096
    Colormap = 8192
    Cursor = 16384

class BackPixmap:
    _None = 0
    ParentRelative = 1

class Gravity:
    BitForget = 0
    WinUnmap = 0
    NorthWest = 1
    North = 2
    NorthEast = 3
    West = 4
    Center = 5
    East = 6
    SouthWest = 7
    South = 8
    SouthEast = 9
    Static = 10

class MapState:
    Unmapped = 0
    Unviewable = 1
    Viewable = 2

class GetWindowAttributesCookie(xcb.Cookie):
    pass

class GetWindowAttributesReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.backing_store, self.visual, self._class, self.bit_gravity, self.win_gravity, self.backing_planes, self.backing_pixel, self.save_under, self.map_is_installed, self.map_state, self.override_redirect, self.colormap, self.all_event_masks, self.your_event_mask, self.do_not_propagate_mask,) = unpack_from('xB2x4xIHBBIIBBBBIIIH2x', parent, offset)

class SetMode:
    Insert = 0
    Delete = 1

class ConfigWindow:
    X = 1
    Y = 2
    Width = 4
    Height = 8
    BorderWidth = 16
    Sibling = 32
    StackMode = 64

class StackMode:
    Above = 0
    Below = 1
    TopIf = 2
    BottomIf = 3
    Opposite = 4

class Circulate:
    RaiseLowest = 0
    LowerHighest = 1

class GetGeometryCookie(xcb.Cookie):
    pass

class GetGeometryReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.depth, self.root, self.x, self.y, self.width, self.height, self.border_width,) = unpack_from('xB2x4xIhhHHH2x', parent, offset)

class QueryTreeCookie(xcb.Cookie):
    pass

class QueryTreeReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.root, self.parent, self.children_len,) = unpack_from('xx2x4xIIH14x', parent, offset)
        offset += 32
        self.children = xcb.List(parent, offset, self.children_len, 'I', 4)

class InternAtomCookie(xcb.Cookie):
    pass

class InternAtomReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.atom,) = unpack_from('xx2x4xI', parent, offset)

class GetAtomNameCookie(xcb.Cookie):
    pass

class GetAtomNameReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.name_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.name = xcb.List(parent, offset, self.name_len, 'b', 1)

class PropMode:
    Replace = 0
    Prepend = 1
    Append = 2

class GetPropertyType:
    Any = 0

class GetPropertyCookie(xcb.Cookie):
    pass

class GetPropertyReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.format, self.type, self.bytes_after, self.value_len,) = unpack_from('xB2x4xIII12x', parent, offset)
        offset += 32
        self.value = xcb.List(parent, offset, (self.value_len * (self.format / 8)), 'B', 1)

class ListPropertiesCookie(xcb.Cookie):
    pass

class ListPropertiesReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.atoms_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.atoms = xcb.List(parent, offset, self.atoms_len, 'I', 4)

class GetSelectionOwnerCookie(xcb.Cookie):
    pass

class GetSelectionOwnerReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.owner,) = unpack_from('xx2x4xI', parent, offset)

class SendEventDest:
    PointerWindow = 0
    ItemFocus = 1

class GrabMode:
    Sync = 0
    Async = 1

class GrabStatus:
    Success = 0
    AlreadyGrabbed = 1
    InvalidTime = 2
    NotViewable = 3
    Frozen = 4

class Cursor:
    _None = 0

class GrabPointerCookie(xcb.Cookie):
    pass

class GrabPointerReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.status,) = unpack_from('xB2x4x', parent, offset)

class ButtonIndex:
    Any = 0
    _1 = 1
    _2 = 2
    _3 = 3
    _4 = 4
    _5 = 5

class GrabKeyboardCookie(xcb.Cookie):
    pass

class GrabKeyboardReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.status,) = unpack_from('xB2x4x', parent, offset)

class Grab:
    Any = 0

class Allow:
    AsyncPointer = 0
    SyncPointer = 1
    ReplayPointer = 2
    AsyncKeyboard = 3
    SyncKeyboard = 4
    ReplayKeyboard = 5
    AsyncBoth = 6
    SyncBoth = 7

class QueryPointerCookie(xcb.Cookie):
    pass

class QueryPointerReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.same_screen, self.root, self.child, self.root_x, self.root_y, self.win_x, self.win_y, self.mask,) = unpack_from('xB2x4xIIhhhhH2x', parent, offset)

class TIMECOORD(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.time, self.x, self.y,) = unpack_from('Ihh', parent, offset)

class GetMotionEventsCookie(xcb.Cookie):
    pass

class GetMotionEventsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.events_len,) = unpack_from('xx2x4xI20x', parent, offset)
        offset += 32
        self.events = xcb.List(parent, offset, self.events_len, TIMECOORD, 8)

class TranslateCoordinatesCookie(xcb.Cookie):
    pass

class TranslateCoordinatesReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.same_screen, self.child, self.dst_x, self.dst_y,) = unpack_from('xB2x4xIhh', parent, offset)

class InputFocus:
    _None = 0
    PointerRoot = 1
    Parent = 2
    FollowKeyboard = 3

class GetInputFocusCookie(xcb.Cookie):
    pass

class GetInputFocusReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.revert_to, self.focus,) = unpack_from('xB2x4xI', parent, offset)

class QueryKeymapCookie(xcb.Cookie):
    pass

class QueryKeymapReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        offset += 8
        self.keys = xcb.List(parent, offset, 32, 'B', 1)

class FontDraw:
    LeftToRight = 0
    RightToLeft = 1

class FONTPROP(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.name, self.value,) = unpack_from('II', parent, offset)

class CHARINFO(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.left_side_bearing, self.right_side_bearing, self.character_width, self.ascent, self.descent, self.attributes,) = unpack_from('hhhhhH', parent, offset)

class QueryFontCookie(xcb.Cookie):
    pass

class QueryFontReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        offset += 8
        self.min_bounds = CHARINFO(parent, offset, 12)
        offset += 12
        offset += 4
        offset += xcb.type_pad(12, offset)
        self.max_bounds = CHARINFO(parent, offset, 12)
        offset += 12
        (self.min_char_or_byte2, self.max_char_or_byte2, self.default_char, self.properties_len, self.draw_direction, self.min_byte1, self.max_byte1, self.all_chars_exist, self.font_ascent, self.font_descent, self.char_infos_len,) = unpack_from('4xHHHHBBBBhhI', parent, offset)
        offset += 24
        offset += xcb.type_pad(8, offset)
        self.properties = xcb.List(parent, offset, self.properties_len, FONTPROP, 8)
        offset += len(self.properties.buf())
        offset += xcb.type_pad(12, offset)
        self.char_infos = xcb.List(parent, offset, self.char_infos_len, CHARINFO, 12)

class QueryTextExtentsCookie(xcb.Cookie):
    pass

class QueryTextExtentsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.draw_direction, self.font_ascent, self.font_descent, self.overall_ascent, self.overall_descent, self.overall_width, self.overall_left, self.overall_right,) = unpack_from('xB2x4xhhhhiii', parent, offset)

class STR(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.name_len,) = unpack_from('B', parent, offset)
        offset += 1
        self.name = xcb.List(parent, offset, self.name_len, 'b', 1)
        offset += len(self.name.buf())
        xcb._resize_obj(self, offset - base)

class ListFontsCookie(xcb.Cookie):
    pass

class ListFontsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.names_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.names = xcb.List(parent, offset, self.names_len, STR, -1)

class ListFontsWithInfoCookie(xcb.Cookie):
    pass

class ListFontsWithInfoReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.name_len,) = unpack_from('xB2x4x', parent, offset)
        offset += 8
        self.min_bounds = CHARINFO(parent, offset, 12)
        offset += 12
        offset += 4
        offset += xcb.type_pad(12, offset)
        self.max_bounds = CHARINFO(parent, offset, 12)
        offset += 12
        (self.min_char_or_byte2, self.max_char_or_byte2, self.default_char, self.properties_len, self.draw_direction, self.min_byte1, self.max_byte1, self.all_chars_exist, self.font_ascent, self.font_descent, self.replies_hint,) = unpack_from('4xHHHHBBBBhhI', parent, offset)
        offset += 24
        offset += xcb.type_pad(8, offset)
        self.properties = xcb.List(parent, offset, self.properties_len, FONTPROP, 8)
        offset += len(self.properties.buf())
        offset += xcb.type_pad(1, offset)
        self.name = xcb.List(parent, offset, self.name_len, 'b', 1)

class GetFontPathCookie(xcb.Cookie):
    pass

class GetFontPathReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.path_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.path = xcb.List(parent, offset, self.path_len, STR, -1)

class GC:
    Function = 1
    PlaneMask = 2
    Foreground = 4
    Background = 8
    LineWidth = 16
    LineStyle = 32
    CapStyle = 64
    JoinStyle = 128
    FillStyle = 256
    FillRule = 512
    Tile = 1024
    Stipple = 2048
    TileStippleOriginX = 4096
    TileStippleOriginY = 8192
    Font = 16384
    SubwindowMode = 32768
    GraphicsExposures = 65536
    ClipOriginX = 131072
    ClipOriginY = 262144
    ClipMask = 524288
    DashOffset = 1048576
    DashList = 2097152
    ArcMode = 4194304

class GX:
    clear = 0
    _and = 1
    andReverse = 2
    copy = 3
    andInverted = 4
    noop = 5
    xor = 6
    _or = 7
    nor = 8
    equiv = 9
    invert = 10
    orReverse = 11
    copyInverted = 12
    orInverted = 13
    nand = 14
    set = 15

class LineStyle:
    Solid = 0
    OnOffDash = 1
    DoubleDash = 2

class CapStyle:
    NotLast = 0
    Butt = 1
    Round = 2
    Projecting = 3

class JoinStyle:
    Miter = 0
    Round = 1
    Bevel = 2

class FillStyle:
    Solid = 0
    Tiled = 1
    Stippled = 2
    OpaqueStippled = 3

class FillRule:
    EvenOdd = 0
    Winding = 1

class SubwindowMode:
    ClipByChildren = 0
    IncludeInferiors = 1

class ArcMode:
    Chord = 0
    PieSlice = 1

class ClipOrdering:
    Unsorted = 0
    YSorted = 1
    YXSorted = 2
    YXBanded = 3

class CoordMode:
    Origin = 0
    Previous = 1

class SEGMENT(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.x1, self.y1, self.x2, self.y2,) = unpack_from('hhhh', parent, offset)

class PolyShape:
    Complex = 0
    Nonconvex = 1
    Convex = 2

class ImageFormat:
    XYBitmap = 0
    XYPixmap = 1
    ZPixmap = 2

class GetImageCookie(xcb.Cookie):
    pass

class GetImageReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.depth, self.visual,) = unpack_from('xB2x4xI20x', parent, offset)
        offset += 32
        self.data = xcb.List(parent, offset, (self.length * 4), 'B', 1)

class ColormapAlloc:
    _None = 0
    All = 1

class ListInstalledColormapsCookie(xcb.Cookie):
    pass

class ListInstalledColormapsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.cmaps_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.cmaps = xcb.List(parent, offset, self.cmaps_len, 'I', 4)

class AllocColorCookie(xcb.Cookie):
    pass

class AllocColorReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.red, self.green, self.blue, self.pixel,) = unpack_from('xx2x4xHHH2xI', parent, offset)

class AllocNamedColorCookie(xcb.Cookie):
    pass

class AllocNamedColorReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.pixel, self.exact_red, self.exact_green, self.exact_blue, self.visual_red, self.visual_green, self.visual_blue,) = unpack_from('xx2x4xIHHHHHH', parent, offset)

class AllocColorCellsCookie(xcb.Cookie):
    pass

class AllocColorCellsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.pixels_len, self.masks_len,) = unpack_from('xx2x4xHH20x', parent, offset)
        offset += 32
        self.pixels = xcb.List(parent, offset, self.pixels_len, 'I', 4)
        offset += len(self.pixels.buf())
        offset += xcb.type_pad(4, offset)
        self.masks = xcb.List(parent, offset, self.masks_len, 'I', 4)

class AllocColorPlanesCookie(xcb.Cookie):
    pass

class AllocColorPlanesReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.pixels_len, self.red_mask, self.green_mask, self.blue_mask,) = unpack_from('xx2x4xH2xIII8x', parent, offset)
        offset += 32
        self.pixels = xcb.List(parent, offset, self.pixels_len, 'I', 4)

class ColorFlag:
    Red = 1
    Green = 2
    Blue = 4

class COLORITEM(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.pixel, self.red, self.green, self.blue, self.flags,) = unpack_from('IHHHBx', parent, offset)

class RGB(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.red, self.green, self.blue,) = unpack_from('HHH2x', parent, offset)

class QueryColorsCookie(xcb.Cookie):
    pass

class QueryColorsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.colors_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.colors = xcb.List(parent, offset, self.colors_len, RGB, 8)

class LookupColorCookie(xcb.Cookie):
    pass

class LookupColorReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.exact_red, self.exact_green, self.exact_blue, self.visual_red, self.visual_green, self.visual_blue,) = unpack_from('xx2x4xHHHHHH', parent, offset)

class Pixmap:
    _None = 0

class Font:
    _None = 0

class QueryShapeOf:
    LargestCursor = 0
    FastestTile = 1
    FastestStipple = 2

class QueryBestSizeCookie(xcb.Cookie):
    pass

class QueryBestSizeReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.width, self.height,) = unpack_from('xx2x4xHH', parent, offset)

class QueryExtensionCookie(xcb.Cookie):
    pass

class QueryExtensionReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.present, self.major_opcode, self.first_event, self.first_error,) = unpack_from('xx2x4xBBBB', parent, offset)

class ListExtensionsCookie(xcb.Cookie):
    pass

class ListExtensionsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.names_len,) = unpack_from('xB2x4x24x', parent, offset)
        offset += 32
        self.names = xcb.List(parent, offset, self.names_len, STR, -1)

class GetKeyboardMappingCookie(xcb.Cookie):
    pass

class GetKeyboardMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.keysyms_per_keycode,) = unpack_from('xB2x4x24x', parent, offset)
        offset += 32
        self.keysyms = xcb.List(parent, offset, self.length, 'I', 4)

class KB:
    KeyClickPercent = 1
    BellPercent = 2
    BellPitch = 4
    BellDuration = 8
    Led = 16
    LedMode = 32
    Key = 64
    AutoRepeatMode = 128

class LedMode:
    Off = 0
    On = 1

class AutoRepeatMode:
    Off = 0
    On = 1
    Default = 2

class GetKeyboardControlCookie(xcb.Cookie):
    pass

class GetKeyboardControlReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.global_auto_repeat, self.led_mask, self.key_click_percent, self.bell_percent, self.bell_pitch, self.bell_duration,) = unpack_from('xB2x4xIBBHH2x', parent, offset)
        offset += 20
        self.auto_repeats = xcb.List(parent, offset, 32, 'B', 1)

class GetPointerControlCookie(xcb.Cookie):
    pass

class GetPointerControlReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.acceleration_numerator, self.acceleration_denominator, self.threshold,) = unpack_from('xx2x4xHHH18x', parent, offset)

class Blanking:
    NotPreferred = 0
    Preferred = 1
    Default = 2

class Exposures:
    NotAllowed = 0
    Allowed = 1
    Default = 2

class GetScreenSaverCookie(xcb.Cookie):
    pass

class GetScreenSaverReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.timeout, self.interval, self.prefer_blanking, self.allow_exposures,) = unpack_from('xx2x4xHHBB18x', parent, offset)

class HostMode:
    Insert = 0
    Delete = 1

class Family:
    Internet = 0
    DECnet = 1
    Chaos = 2
    ServerInterpreted = 5
    Internet6 = 6

class HOST(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.family, self.address_len,) = unpack_from('BxH', parent, offset)
        offset += 4
        self.address = xcb.List(parent, offset, self.address_len, 'B', 1)
        offset += len(self.address.buf())
        xcb._resize_obj(self, offset - base)

class ListHostsCookie(xcb.Cookie):
    pass

class ListHostsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.mode, self.hosts_len,) = unpack_from('xB2x4xH22x', parent, offset)
        offset += 32
        self.hosts = xcb.List(parent, offset, self.hosts_len, HOST, -1)

class AccessControl:
    Disable = 0
    Enable = 1

class CloseDown:
    DestroyAll = 0
    RetainPermanent = 1
    RetainTemporary = 2

class Kill:
    AllTemporary = 0

class ScreenSaver:
    Reset = 0
    Active = 1

class MappingStatus:
    Success = 0
    Busy = 1
    Failure = 2

class SetPointerMappingCookie(xcb.Cookie):
    pass

class SetPointerMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.status,) = unpack_from('xB2x4x', parent, offset)

class GetPointerMappingCookie(xcb.Cookie):
    pass

class GetPointerMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.map_len,) = unpack_from('xB2x4x24x', parent, offset)
        offset += 32
        self.map = xcb.List(parent, offset, self.map_len, 'B', 1)

class MapIndex:
    Shift = 0
    Lock = 1
    Control = 2
    _1 = 3
    _2 = 4
    _3 = 5
    _4 = 6
    _5 = 7

class SetModifierMappingCookie(xcb.Cookie):
    pass

class SetModifierMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.status,) = unpack_from('xB2x4x', parent, offset)

class GetModifierMappingCookie(xcb.Cookie):
    pass

class GetModifierMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.keycodes_per_modifier,) = unpack_from('xB2x4x24x', parent, offset)
        offset += 32
        self.keycodes = xcb.List(parent, offset, (self.keycodes_per_modifier * 8), 'B', 1)

class xprotoExtension(xcb.Extension):

    def CreateWindowChecked(self, depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, True),
                                 xcb.VoidCookie())

    def CreateWindow(self, depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, False),
                                 xcb.VoidCookie())

    def ChangeWindowAttributesChecked(self, window, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, True),
                                 xcb.VoidCookie())

    def ChangeWindowAttributes(self, window, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, False),
                                 xcb.VoidCookie())

    def GetWindowAttributes(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, True),
                                 GetWindowAttributesCookie(),
                                 GetWindowAttributesReply)

    def GetWindowAttributesUnchecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, False),
                                 GetWindowAttributesCookie(),
                                 GetWindowAttributesReply)

    def DestroyWindowChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, True),
                                 xcb.VoidCookie())

    def DestroyWindow(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, False),
                                 xcb.VoidCookie())

    def DestroySubwindowsChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, True),
                                 xcb.VoidCookie())

    def DestroySubwindows(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, False),
                                 xcb.VoidCookie())

    def ChangeSaveSetChecked(self, mode, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, True),
                                 xcb.VoidCookie())

    def ChangeSaveSet(self, mode, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, False),
                                 xcb.VoidCookie())

    def ReparentWindowChecked(self, window, parent, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, True),
                                 xcb.VoidCookie())

    def ReparentWindow(self, window, parent, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, False),
                                 xcb.VoidCookie())

    def MapWindowChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, True),
                                 xcb.VoidCookie())

    def MapWindow(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, False),
                                 xcb.VoidCookie())

    def MapSubwindowsChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, True),
                                 xcb.VoidCookie())

    def MapSubwindows(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, False),
                                 xcb.VoidCookie())

    def UnmapWindowChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, True),
                                 xcb.VoidCookie())

    def UnmapWindow(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, False),
                                 xcb.VoidCookie())

    def UnmapSubwindowsChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, True),
                                 xcb.VoidCookie())

    def UnmapSubwindows(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, False),
                                 xcb.VoidCookie())

    def ConfigureWindowChecked(self, window, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, True),
                                 xcb.VoidCookie())

    def ConfigureWindow(self, window, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, False),
                                 xcb.VoidCookie())

    def CirculateWindowChecked(self, direction, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, True),
                                 xcb.VoidCookie())

    def CirculateWindow(self, direction, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, False),
                                 xcb.VoidCookie())

    def GetGeometry(self, drawable):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, True),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def GetGeometryUnchecked(self, drawable):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, False),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def QueryTree(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, True),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def QueryTreeUnchecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, False),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def InternAtom(self, only_if_exists, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, True),
                                 InternAtomCookie(),
                                 InternAtomReply)

    def InternAtomUnchecked(self, only_if_exists, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, False),
                                 InternAtomCookie(),
                                 InternAtomReply)

    def GetAtomName(self, atom):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, True),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)

    def GetAtomNameUnchecked(self, atom):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, False),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)

    def ChangePropertyChecked(self, mode, window, property, type, format, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, True),
                                 xcb.VoidCookie())

    def ChangeProperty(self, mode, window, property, type, format, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, False),
                                 xcb.VoidCookie())

    def DeletePropertyChecked(self, window, property):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, True),
                                 xcb.VoidCookie())

    def DeleteProperty(self, window, property):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, False),
                                 xcb.VoidCookie())

    def GetProperty(self, delete, window, property, type, long_offset, long_length):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, True),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def GetPropertyUnchecked(self, delete, window, property, type, long_offset, long_length):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, False),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def ListProperties(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, True),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def ListPropertiesUnchecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, False),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def SetSelectionOwnerChecked(self, owner, selection, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, True),
                                 xcb.VoidCookie())

    def SetSelectionOwner(self, owner, selection, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, False),
                                 xcb.VoidCookie())

    def GetSelectionOwner(self, selection):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, True),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def GetSelectionOwnerUnchecked(self, selection):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, False),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def ConvertSelectionChecked(self, requestor, selection, target, property, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, True),
                                 xcb.VoidCookie())

    def ConvertSelection(self, requestor, selection, target, property, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, False),
                                 xcb.VoidCookie())

    def SendEventChecked(self, propagate, destination, event_mask, event):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(array('b', event))))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, True),
                                 xcb.VoidCookie())

    def SendEvent(self, propagate, destination, event_mask, event):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(array('b', event))))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, False),
                                 xcb.VoidCookie())

    def GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, True),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def GrabPointerUnchecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, False),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def UngrabPointerChecked(self, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, True),
                                 xcb.VoidCookie())

    def UngrabPointer(self, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, False),
                                 xcb.VoidCookie())

    def GrabButtonChecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, True),
                                 xcb.VoidCookie())

    def GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, False),
                                 xcb.VoidCookie())

    def UngrabButtonChecked(self, button, grab_window, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, True),
                                 xcb.VoidCookie())

    def UngrabButton(self, button, grab_window, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, False),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrabChecked(self, cursor, time, event_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, True),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrab(self, cursor, time, event_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, False),
                                 xcb.VoidCookie())

    def GrabKeyboard(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, True),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def GrabKeyboardUnchecked(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, False),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def UngrabKeyboardChecked(self, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, True),
                                 xcb.VoidCookie())

    def UngrabKeyboard(self, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, False),
                                 xcb.VoidCookie())

    def GrabKeyChecked(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, True),
                                 xcb.VoidCookie())

    def GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, False),
                                 xcb.VoidCookie())

    def UngrabKeyChecked(self, key, grab_window, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, True),
                                 xcb.VoidCookie())

    def UngrabKey(self, key, grab_window, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, False),
                                 xcb.VoidCookie())

    def AllowEventsChecked(self, mode, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, True),
                                 xcb.VoidCookie())

    def AllowEvents(self, mode, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, False),
                                 xcb.VoidCookie())

    def GrabServerChecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, True),
                                 xcb.VoidCookie())

    def GrabServer(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, False),
                                 xcb.VoidCookie())

    def UngrabServerChecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, True),
                                 xcb.VoidCookie())

    def UngrabServer(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, False),
                                 xcb.VoidCookie())

    def QueryPointer(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, True),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def QueryPointerUnchecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, False),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def GetMotionEvents(self, window, start, stop):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, True),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def GetMotionEventsUnchecked(self, window, start, stop):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, False),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def TranslateCoordinates(self, src_window, dst_window, src_x, src_y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, True),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def TranslateCoordinatesUnchecked(self, src_window, dst_window, src_x, src_y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, False),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def WarpPointerChecked(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, True),
                                 xcb.VoidCookie())

    def WarpPointer(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, False),
                                 xcb.VoidCookie())

    def SetInputFocusChecked(self, revert_to, focus, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, True),
                                 xcb.VoidCookie())

    def SetInputFocus(self, revert_to, focus, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, False),
                                 xcb.VoidCookie())

    def GetInputFocus(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, True),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def GetInputFocusUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, False),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def QueryKeymap(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, True),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def QueryKeymapUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, False),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def OpenFontChecked(self, fid, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, True),
                                 xcb.VoidCookie())

    def OpenFont(self, fid, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, False),
                                 xcb.VoidCookie())

    def CloseFontChecked(self, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, True),
                                 xcb.VoidCookie())

    def CloseFont(self, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, False),
                                 xcb.VoidCookie())

    def QueryFont(self, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, True),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryFontUnchecked(self, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, False),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryTextExtents(self, font, string_len, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=x', ))
        buf.write(pack('=B', (string_len & 1)))
        buf.write(pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, True),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def QueryTextExtentsUnchecked(self, font, string_len, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=x', ))
        buf.write(pack('=B', (string_len & 1)))
        buf.write(pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, False),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def ListFonts(self, max_names, pattern_len, pattern):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, True),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsUnchecked(self, max_names, pattern_len, pattern):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, False),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsWithInfo(self, max_names, pattern_len, pattern):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, True),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def ListFontsWithInfoUnchecked(self, max_names, pattern_len, pattern):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, False),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def SetFontPathChecked(self, font_qty, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, True),
                                 xcb.VoidCookie())

    def SetFontPath(self, font_qty, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, False),
                                 xcb.VoidCookie())

    def GetFontPath(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, True),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def GetFontPathUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, False),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def CreatePixmapChecked(self, depth, pid, drawable, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, True),
                                 xcb.VoidCookie())

    def CreatePixmap(self, depth, pid, drawable, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, False),
                                 xcb.VoidCookie())

    def FreePixmapChecked(self, pixmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, True),
                                 xcb.VoidCookie())

    def FreePixmap(self, pixmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, False),
                                 xcb.VoidCookie())

    def CreateGCChecked(self, cid, drawable, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, True),
                                 xcb.VoidCookie())

    def CreateGC(self, cid, drawable, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, False),
                                 xcb.VoidCookie())

    def ChangeGCChecked(self, gc, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, True),
                                 xcb.VoidCookie())

    def ChangeGC(self, gc, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, False),
                                 xcb.VoidCookie())

    def CopyGCChecked(self, src_gc, dst_gc, value_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, True),
                                 xcb.VoidCookie())

    def CopyGC(self, src_gc, dst_gc, value_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, False),
                                 xcb.VoidCookie())

    def SetDashesChecked(self, gc, dash_offset, dashes_len, dashes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, True),
                                 xcb.VoidCookie())

    def SetDashes(self, gc, dash_offset, dashes_len, dashes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, False),
                                 xcb.VoidCookie())

    def SetClipRectanglesChecked(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, True),
                                 xcb.VoidCookie())

    def SetClipRectangles(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, False),
                                 xcb.VoidCookie())

    def FreeGCChecked(self, gc):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, True),
                                 xcb.VoidCookie())

    def FreeGC(self, gc):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, False),
                                 xcb.VoidCookie())

    def ClearAreaChecked(self, exposures, window, x, y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, True),
                                 xcb.VoidCookie())

    def ClearArea(self, exposures, window, x, y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, False),
                                 xcb.VoidCookie())

    def CopyAreaChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, True),
                                 xcb.VoidCookie())

    def CopyArea(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, False),
                                 xcb.VoidCookie())

    def CopyPlaneChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, True),
                                 xcb.VoidCookie())

    def CopyPlane(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, False),
                                 xcb.VoidCookie())

    def PolyPointChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, True),
                                 xcb.VoidCookie())

    def PolyPoint(self, coordinate_mode, drawable, gc, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, False),
                                 xcb.VoidCookie())

    def PolyLineChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, True),
                                 xcb.VoidCookie())

    def PolyLine(self, coordinate_mode, drawable, gc, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, False),
                                 xcb.VoidCookie())

    def PolySegmentChecked(self, drawable, gc, segments_len, segments):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, True),
                                 xcb.VoidCookie())

    def PolySegment(self, drawable, gc, segments_len, segments):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, False),
                                 xcb.VoidCookie())

    def PolyRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, True),
                                 xcb.VoidCookie())

    def PolyRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, False),
                                 xcb.VoidCookie())

    def PolyArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, True),
                                 xcb.VoidCookie())

    def PolyArc(self, drawable, gc, arcs_len, arcs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, False),
                                 xcb.VoidCookie())

    def FillPolyChecked(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, True),
                                 xcb.VoidCookie())

    def FillPoly(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, False),
                                 xcb.VoidCookie())

    def PolyFillRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, True),
                                 xcb.VoidCookie())

    def PolyFillRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, False),
                                 xcb.VoidCookie())

    def PolyFillArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, True),
                                 xcb.VoidCookie())

    def PolyFillArc(self, drawable, gc, arcs_len, arcs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, False),
                                 xcb.VoidCookie())

    def PutImageChecked(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, True),
                                 xcb.VoidCookie())

    def PutImage(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, False),
                                 xcb.VoidCookie())

    def GetImage(self, format, drawable, x, y, width, height, plane_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, True),
                                 GetImageCookie(),
                                 GetImageReply)

    def GetImageUnchecked(self, format, drawable, x, y, width, height, plane_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, False),
                                 GetImageCookie(),
                                 GetImageReply)

    def PolyText8Checked(self, drawable, gc, x, y, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, True),
                                 xcb.VoidCookie())

    def PolyText8(self, drawable, gc, x, y, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, False),
                                 xcb.VoidCookie())

    def PolyText16Checked(self, drawable, gc, x, y, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, True),
                                 xcb.VoidCookie())

    def PolyText16(self, drawable, gc, x, y, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, False),
                                 xcb.VoidCookie())

    def ImageText8Checked(self, string_len, drawable, gc, x, y, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, True),
                                 xcb.VoidCookie())

    def ImageText8(self, string_len, drawable, gc, x, y, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, False),
                                 xcb.VoidCookie())

    def ImageText16Checked(self, string_len, drawable, gc, x, y, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, True),
                                 xcb.VoidCookie())

    def ImageText16(self, string_len, drawable, gc, x, y, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, False),
                                 xcb.VoidCookie())

    def CreateColormapChecked(self, alloc, mid, window, visual):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, True),
                                 xcb.VoidCookie())

    def CreateColormap(self, alloc, mid, window, visual):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, False),
                                 xcb.VoidCookie())

    def FreeColormapChecked(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, True),
                                 xcb.VoidCookie())

    def FreeColormap(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, False),
                                 xcb.VoidCookie())

    def CopyColormapAndFreeChecked(self, mid, src_cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, True),
                                 xcb.VoidCookie())

    def CopyColormapAndFree(self, mid, src_cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, False),
                                 xcb.VoidCookie())

    def InstallColormapChecked(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, True),
                                 xcb.VoidCookie())

    def InstallColormap(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, False),
                                 xcb.VoidCookie())

    def UninstallColormapChecked(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, True),
                                 xcb.VoidCookie())

    def UninstallColormap(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, False),
                                 xcb.VoidCookie())

    def ListInstalledColormaps(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, True),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def ListInstalledColormapsUnchecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, False),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def AllocColor(self, cmap, red, green, blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, True),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocColorUnchecked(self, cmap, red, green, blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, False),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocNamedColor(self, cmap, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, True),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocNamedColorUnchecked(self, cmap, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, False),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocColorCells(self, contiguous, cmap, colors, planes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, True),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorCellsUnchecked(self, contiguous, cmap, colors, planes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, False),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorPlanes(self, contiguous, cmap, colors, reds, greens, blues):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, True),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def AllocColorPlanesUnchecked(self, contiguous, cmap, colors, reds, greens, blues):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, False),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def FreeColorsChecked(self, cmap, plane_mask, pixels_len, pixels):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, True),
                                 xcb.VoidCookie())

    def FreeColors(self, cmap, plane_mask, pixels_len, pixels):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, False),
                                 xcb.VoidCookie())

    def StoreColorsChecked(self, cmap, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, True),
                                 xcb.VoidCookie())

    def StoreColors(self, cmap, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, False),
                                 xcb.VoidCookie())

    def StoreNamedColorChecked(self, flags, cmap, pixel, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, True),
                                 xcb.VoidCookie())

    def StoreNamedColor(self, flags, cmap, pixel, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, False),
                                 xcb.VoidCookie())

    def QueryColors(self, cmap, pixels_len, pixels):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        buf.write(str(buffer(array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, True),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def QueryColorsUnchecked(self, cmap, pixels_len, pixels):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        buf.write(str(buffer(array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, False),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def LookupColor(self, cmap, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, True),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def LookupColorUnchecked(self, cmap, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, False),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def CreateCursorChecked(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, True),
                                 xcb.VoidCookie())

    def CreateCursor(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, False),
                                 xcb.VoidCookie())

    def CreateGlyphCursorChecked(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, True),
                                 xcb.VoidCookie())

    def CreateGlyphCursor(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, False),
                                 xcb.VoidCookie())

    def FreeCursorChecked(self, cursor):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, True),
                                 xcb.VoidCookie())

    def FreeCursor(self, cursor):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, False),
                                 xcb.VoidCookie())

    def RecolorCursorChecked(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, True),
                                 xcb.VoidCookie())

    def RecolorCursor(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, False),
                                 xcb.VoidCookie())

    def QueryBestSize(self, _class, drawable, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, True),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryBestSizeUnchecked(self, _class, drawable, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, False),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryExtension(self, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xH2x', name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, True),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def QueryExtensionUnchecked(self, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xH2x', name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, False),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def ListExtensions(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, True),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ListExtensionsUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, False),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ChangeKeyboardMappingChecked(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardMapping(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardMapping(self, first_keycode, count):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, True),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def GetKeyboardMappingUnchecked(self, first_keycode, count):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, False),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def ChangeKeyboardControlChecked(self, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardControl(self, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardControl(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, True),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def GetKeyboardControlUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, False),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def BellChecked(self, percent):
        buf = cStringIO.StringIO()
        buf.write(pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, True),
                                 xcb.VoidCookie())

    def Bell(self, percent):
        buf = cStringIO.StringIO()
        buf.write(pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, False),
                                 xcb.VoidCookie())

    def ChangePointerControlChecked(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, True),
                                 xcb.VoidCookie())

    def ChangePointerControl(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, False),
                                 xcb.VoidCookie())

    def GetPointerControl(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, True),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def GetPointerControlUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, False),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def SetScreenSaverChecked(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, True),
                                 xcb.VoidCookie())

    def SetScreenSaver(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, False),
                                 xcb.VoidCookie())

    def GetScreenSaver(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, True),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def GetScreenSaverUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, False),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def ChangeHostsChecked(self, mode, family, address_len, address):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, True),
                                 xcb.VoidCookie())

    def ChangeHosts(self, mode, family, address_len, address):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, False),
                                 xcb.VoidCookie())

    def ListHosts(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, True),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def ListHostsUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, False),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def SetAccessControlChecked(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, True),
                                 xcb.VoidCookie())

    def SetAccessControl(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, False),
                                 xcb.VoidCookie())

    def SetCloseDownModeChecked(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, True),
                                 xcb.VoidCookie())

    def SetCloseDownMode(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, False),
                                 xcb.VoidCookie())

    def KillClientChecked(self, resource):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, True),
                                 xcb.VoidCookie())

    def KillClient(self, resource):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, False),
                                 xcb.VoidCookie())

    def RotatePropertiesChecked(self, window, atoms_len, delta, atoms):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, True),
                                 xcb.VoidCookie())

    def RotateProperties(self, window, atoms_len, delta, atoms):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, False),
                                 xcb.VoidCookie())

    def ForceScreenSaverChecked(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, True),
                                 xcb.VoidCookie())

    def ForceScreenSaver(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, False),
                                 xcb.VoidCookie())

    def SetPointerMapping(self, map_len, map):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', map_len))
        buf.write(str(buffer(array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, True),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def SetPointerMappingUnchecked(self, map_len, map):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', map_len))
        buf.write(str(buffer(array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, False),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def GetPointerMapping(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, True),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def GetPointerMappingUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, False),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def SetModifierMapping(self, keycodes_per_modifier, keycodes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, True),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def SetModifierMappingUnchecked(self, keycodes_per_modifier, keycodes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, False),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def GetModifierMapping(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, True),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def GetModifierMappingUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, False),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def NoOperationChecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, True),
                                 xcb.VoidCookie())

    def NoOperation(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, False),
                                 xcb.VoidCookie())

_events = {
    2 : KeyPressEvent,
    3 : KeyReleaseEvent,
    4 : ButtonPressEvent,
    5 : ButtonReleaseEvent,
    6 : MotionNotifyEvent,
    7 : EnterNotifyEvent,
    8 : LeaveNotifyEvent,
    9 : FocusInEvent,
    10 : FocusOutEvent,
    11 : KeymapNotifyEvent,
    12 : ExposeEvent,
    13 : GraphicsExposureEvent,
    14 : NoExposureEvent,
    15 : VisibilityNotifyEvent,
    16 : CreateNotifyEvent,
    17 : DestroyNotifyEvent,
    18 : UnmapNotifyEvent,
    19 : MapNotifyEvent,
    20 : MapRequestEvent,
    21 : ReparentNotifyEvent,
    22 : ConfigureNotifyEvent,
    23 : ConfigureRequestEvent,
    24 : GravityNotifyEvent,
    25 : ResizeRequestEvent,
    26 : CirculateNotifyEvent,
    27 : CirculateRequestEvent,
    28 : PropertyNotifyEvent,
    29 : SelectionClearEvent,
    30 : SelectionRequestEvent,
    31 : SelectionNotifyEvent,
    32 : ColormapNotifyEvent,
    33 : ClientMessageEvent,
    34 : MappingNotifyEvent,
}

_errors = {
    1 : (RequestError, BadRequest),
    2 : (ValueError, BadValue),
    3 : (WindowError, BadWindow),
    4 : (PixmapError, BadPixmap),
    5 : (AtomError, BadAtom),
    6 : (CursorError, BadCursor),
    7 : (FontError, BadFont),
    8 : (MatchError, BadMatch),
    9 : (DrawableError, BadDrawable),
    10 : (AccessError, BadAccess),
    11 : (AllocError, BadAlloc),
    12 : (ColormapError, BadColormap),
    13 : (GContextError, BadGContext),
    14 : (IDChoiceError, BadIDChoice),
    15 : (NameError, BadName),
    16 : (LengthError, BadLength),
    17 : (ImplementationError, BadImplementation),
}

xcb._add_core(xprotoExtension, Setup, _events, _errors)

* Wed 26 Mar 2014 08:58:36 AM JST

* Wed 26 Mar 2014 08:58:37 AM JST

* Wed 26 Mar 2014 08:58:37 AM JST
        print('DEBUG-1-2014-03-26-085242.junk.py')

* Wed 26 Mar 2014 09:02:42 AM JST
getattr(self, '__slots__')
* Wed 26 Mar 2014 09:03:41 AM JST

* Wed 26 Mar 2014 09:03:42 AM JST

* Wed 26 Mar 2014 09:03:42 AM JST
        if name in getattr(self, '__slots__'):

* Wed 26 Mar 2014 09:05:00 AM JST
super(Tes, self).__getattribute__(name)
* Wed 26 Mar 2014 09:05:09 AM JST
name
* Wed 26 Mar 2014 09:05:25 AM JST
not 
* Wed 26 Mar 2014 09:10:14 AM JST

* Wed 26 Mar 2014 09:10:14 AM JST

* Wed 26 Mar 2014 09:10:14 AM JST
        print(name)

* Wed 26 Mar 2014 09:10:35 AM JST
and 
* Wed 26 Mar 2014 09:20:28 AM JST
super(Tes, self).__getattribute__('_unpacked')
* Wed 26 Mar 2014 09:27:11 AM JST
super(Tes, self).__getattribute__('__slots__')
* Wed 26 Mar 2014 09:58:34 AM JST
super(Tes, self).__getattribute__(name)
* Wed 26 Mar 2014 10:00:54 AM JST
self.load()
* Wed 26 Mar 2014 10:01:34 AM JST
super(Tes, self).__getattribute__
* Wed 26 Mar 2014 10:07:22 AM JST
class KeyPressEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.detail, self.time, self.root, self.event, self.child, self.root_x, self.root_y, self.event_x, self.event_y, self.state, self.same_screen,) = unpack_from('xB2xIIIIhhhhHBx', parent, offset)

* Wed 26 Mar 2014 10:08:51 AM JST
from struct import pack, unpack_from
* Wed 26 Mar 2014 10:09:12 AM JST
unpack_from('xB2xIIIIhhhhHBx', parent, offset)
* Wed 26 Mar 2014 10:10:03 AM JST
 self.root = 
* Wed 26 Mar 2014 10:10:06 AM JST
 self.event = 
* Wed 26 Mar 2014 10:10:37 AM JST
_unpacked[2]
* Wed 26 Mar 2014 10:12:34 AM JST
time
* Wed 26 Mar 2014 10:12:37 AM JST
time
* Wed 26 Mar 2014 10:49:42 AM JST
xcb
* Wed 26 Mar 2014 10:49:42 AM JST
from xcb
* Wed 26 Mar 2014 10:50:33 AM JST
Bell
* Wed 26 Mar 2014 11:26:40 AM JST
/root/work/xlibcpp/pyx/xcb/ooxcb-1.2/
* Wed 26 Mar 2014 11:28:49 AM JST
Atom
* Wed 26 Mar 2014 11:46:54 AM JST
/usr/lib/python2.7/dist-packages/
* Wed 26 Mar 2014 11:48:02 AM JST
/usr/share/pyshared/xcb/
* Wed 26 Mar 2014 11:52:35 AM JST
from
* Wed 26 Mar 2014 11:57:38 AM JST
tes
* Wed 26 Mar 2014 12:00:06 PM JST
xcb.
* Wed 26 Mar 2014 12:14:30 PM JST
inatesCookie(),
                                 TranslateCoord
* Wed 26 Mar 2014 12:20:43 PM JST
xcb.xproto.GetAtomName
* Wed 26 Mar 2014 12:21:17 PM JST
xcb.Request(cc, atom)
* Wed 26 Mar 2014 12:21:41 PM JST
atom
* Wed 26 Mar 2014 12:22:42 PM JST
cc, 
* Wed 26 Mar 2014 12:23:59 PM JST
xcb.Request(atom, 17, False, True)
* Wed 26 Mar 2014 12:35:05 PM JST
import xcb
import cStringIO
from struct import pack, unpack_from
from array import array

* Wed 26 Mar 2014 12:36:16 PM JST
    def GetAtomName(self, atom):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, True),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)

* Wed 26 Mar 2014 12:36:45 PM JST
class GetAtomNameCookie(xcb.Cookie):
    pass

class GetAtomNameReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.name_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.name = xcb.List(parent, offset, self.name_len, 'b', 1)

* Wed 26 Mar 2014 12:37:06 PM JST
_events = {
    2 : KeyPressEvent,
    3 : KeyReleaseEvent,
    4 : ButtonPressEvent,
    5 : ButtonReleaseEvent,
    6 : MotionNotifyEvent,
    7 : EnterNotifyEvent,
    8 : LeaveNotifyEvent,
    9 : FocusInEvent,
    10 : FocusOutEvent,
    11 : KeymapNotifyEvent,
    12 : ExposeEvent,
    13 : GraphicsExposureEvent,
    14 : NoExposureEvent,
    15 : VisibilityNotifyEvent,
    16 : CreateNotifyEvent,
    17 : DestroyNotifyEvent,
    18 : UnmapNotifyEvent,
    19 : MapNotifyEvent,
    20 : MapRequestEvent,
    21 : ReparentNotifyEvent,
    22 : ConfigureNotifyEvent,
    23 : ConfigureRequestEvent,
    24 : GravityNotifyEvent,
    25 : ResizeRequestEvent,
    26 : CirculateNotifyEvent,
    27 : CirculateRequestEvent,
    28 : PropertyNotifyEvent,
    29 : SelectionClearEvent,
    30 : SelectionRequestEvent,
    31 : SelectionNotifyEvent,
    32 : ColormapNotifyEvent,
    33 : ClientMessageEvent,
    34 : MappingNotifyEvent,
}

_errors = {
    1 : (RequestError, BadRequest),
    2 : (ValueError, BadValue),
    3 : (WindowError, BadWindow),
    4 : (PixmapError, BadPixmap),
    5 : (AtomError, BadAtom),
    6 : (CursorError, BadCursor),
    7 : (FontError, BadFont),
    8 : (MatchError, BadMatch),
    9 : (DrawableError, BadDrawable),
    10 : (AccessError, BadAccess),
    11 : (AllocError, BadAlloc),
    12 : (ColormapError, BadColormap),
    13 : (GContextError, BadGContext),
    14 : (IDChoiceError, BadIDChoice),
    15 : (NameError, BadName),
    16 : (LengthError, BadLength),
    17 : (ImplementationError, BadImplementation),
}

* Wed 26 Mar 2014 12:38:17 PM JST
class Setup(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.status, self.protocol_major_version, self.protocol_minor_version, self.length, self.release_number, self.resource_id_base, self.resource_id_mask, self.motion_buffer_size, self.vendor_len, self.maximum_request_length, self.roots_len, self.pixmap_formats_len, self.image_byte_order, self.bitmap_format_bit_order, self.bitmap_format_scanline_unit, self.bitmap_format_scanline_pad, self.min_keycode, self.max_keycode,) = unpack_from('BxHHHIIIIHHBBBBBBBB4x', parent, offset)
        offset += 40
        self.vendor = xcb.List(parent, offset, self.vendor_len, 'b', 1)
        offset += len(self.vendor.buf())
        offset += xcb.type_pad(8, offset)
        self.pixmap_formats = xcb.List(parent, offset, self.pixmap_formats_len, FORMAT, 8)
        offset += len(self.pixmap_formats.buf())
        offset += xcb.type_pad(4, offset)
        self.roots = xcb.List(parent, offset, self.roots_len, SCREEN, -1)
        offset += len(self.roots.buf())
        xcb._resize_obj(self, offset - base)

* Wed 26 Mar 2014 12:39:19 PM JST
class FORMAT(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.depth, self.bits_per_pixel, self.scanline_pad,) = unpack_from('BBB5x', parent, offset)

* Wed 26 Mar 2014 12:39:35 PM JST
class SCREEN(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.root, self.default_colormap, self.white_pixel, self.black_pixel, self.current_input_masks, self.width_in_pixels, self.height_in_pixels, self.width_in_millimeters, self.height_in_millimeters, self.min_installed_maps, self.max_installed_maps, self.root_visual, self.backing_stores, self.save_unders, self.root_depth, self.allowed_depths_len,) = unpack_from('IIIIIHHHHHHIBBBB', parent, offset)
        offset += 40
        self.allowed_depths = xcb.List(parent, offset, self.allowed_depths_len, DEPTH, -1)
        offset += len(self.allowed_depths.buf())
        xcb._resize_obj(self, offset - base)


* Wed 26 Mar 2014 12:39:59 PM JST
class DEPTH(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.depth, self.visuals_len,) = unpack_from('BxH4x', parent, offset)
        offset += 8
        self.visuals = xcb.List(parent, offset, self.visuals_len, VISUALTYPE, 24)
        offset += len(self.visuals.buf())
        xcb._resize_obj(self, offset - base)

* Wed 26 Mar 2014 12:40:14 PM JST
class VISUALTYPE(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.visual_id, self._class, self.bits_per_rgb_value, self.colormap_entries, self.red_mask, self.green_mask, self.blue_mask,) = unpack_from('IBBHIII4x', parent, offset)

* Wed 26 Mar 2014 12:41:19 PM JST
xcb._add_core(xprotoExtension, Setup, _events, _errors)
* Wed 26 Mar 2014 12:41:56 PM JST
xcb
* Wed 26 Mar 2014 12:41:56 PM JST
from xcb
* Wed 26 Mar 2014 12:43:30 PM JST
xcb
* Wed 26 Mar 2014 12:43:38 PM JST

* Wed 26 Mar 2014 12:43:38 PM JST

* Wed 26 Mar 2014 12:43:38 PM JST
import xcb

* Wed 26 Mar 2014 12:54:22 PM JST

* Wed 26 Mar 2014 12:54:22 PM JST

* Wed 26 Mar 2014 12:54:22 PM JST
import operator

* Wed 26 Mar 2014 01:07:45 PM JST
int(
* Wed 26 Mar 2014 01:13:12 PM JST
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        _unpacked = unpack_from('xB2xIIIIhhhhHBx', parent, offset)
        self.detail      = _unpacked[0]
        self.time        = _unpacked[1]
        self.root        = _unpacked[2]
        self.event       = _unpacked[3]
        self.child       = _unpacked[4]
        self.root_x      = _unpacked[5]
        self.root_y      = _unpacked[6]
        self.event_x     = _unpacked[7]
        self.event_y     = _unpacked[8]
        self.state       = _unpacked[9]
        self.same_screen = _unpacked[10]

* Wed 26 Mar 2014 01:14:03 PM JST
    r"""SUMMARY
    """

* Wed 26 Mar 2014 01:15:34 PM JST
MotionNotifyEvent
* Wed 26 Mar 2014 01:16:30 PM JST

* Wed 26 Mar 2014 01:16:30 PM JST

* Wed 26 Mar 2014 01:16:31 PM JST
    pass

* Wed 26 Mar 2014 01:16:32 PM JST

* Wed 26 Mar 2014 01:16:32 PM JST

* Wed 26 Mar 2014 01:16:32 PM JST
    pass

* Wed 26 Mar 2014 01:16:33 PM JST

* Wed 26 Mar 2014 01:16:33 PM JST

* Wed 26 Mar 2014 01:16:33 PM JST
    pass

* Wed 26 Mar 2014 01:16:34 PM JST

* Wed 26 Mar 2014 01:16:35 PM JST

* Wed 26 Mar 2014 01:16:35 PM JST
    pass

* Wed 26 Mar 2014 01:19:22 PM JST
        xcb.Event.__init__(self, parent, offset)
        _unpacked = unpack_from('xB2xIIIIhhhhHBx', parent, offset)
        self.detail      = _unpacked[0]
        self.time        = _unpacked[1]
        self.root        = _unpacked[2]
        self.event       = _unpacked[3]
        self.child       = _unpacked[4]
        self.root_x      = _unpacked[5]
        self.root_y      = _unpacked[6]
        self.event_x     = _unpacked[7]
        self.event_y     = _unpacked[8]
        self.state       = _unpacked[9]
        self.same_screen = _unpacked[10]

* Wed 26 Mar 2014 01:27:13 PM JST
state
* Wed 26 Mar 2014 01:27:40 PM JST
Enter
* Wed 26 Mar 2014 01:29:22 PM JST

* Wed 26 Mar 2014 01:29:22 PM JST

* Wed 26 Mar 2014 01:29:22 PM JST
        self._parent = parent

* Wed 26 Mar 2014 01:29:23 PM JST
        self._parent = parent

* Wed 26 Mar 2014 01:29:23 PM JST
        self._parent = parent
        self._offset = offset

* Wed 26 Mar 2014 01:29:28 PM JST
        xcb.Event.__init__(self, parent, offset)
        _unpacked = unpack_from('xB2xIIIIhhhhHBB', parent, offset)

* Wed 26 Mar 2014 01:29:36 PM JST
'xB2xIB3x'
* Wed 26 Mar 2014 01:31:22 PM JST
        
* Wed 26 Mar 2014 01:31:26 PM JST
detail
* Wed 26 Mar 2014 01:31:32 PM JST
        
* Wed 26 Mar 2014 01:31:37 PM JST
event
* Wed 26 Mar 2014 01:33:48 PM JST
class KeymapNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        offset += 1
        self.keys = xcb.List(parent, offset, 31, 'B', 1)


* Wed 26 Mar 2014 01:34:11 PM JST
class ExposeEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.window, self.x, self.y, self.width, self.height, self.count,) = unpack_from('xx2xIHHHHH2x', parent, offset)


* Wed 26 Mar 2014 01:34:24 PM JST
unpack_from('xx2xIHHHHH2x', parent, offset)
* Wed 26 Mar 2014 01:35:20 PM JST
_unpacked[0]
* Wed 26 Mar 2014 01:35:53 PM JST
class GraphicsExposureEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.drawable, self.x, self.y, self.width, self.height, self.minor_opcode, self.count, self.major_opcode,) = unpack_from('xx2xIHHHHHHB3x', parent, offset)

* Wed 26 Mar 2014 01:36:10 PM JST
unpack_from('xx2xIHHHHHHB3x', parent, offset)
* Wed 26 Mar 2014 01:36:50 PM JST
 self.x = 
* Wed 26 Mar 2014 01:36:59 PM JST
drawable
* Wed 26 Mar 2014 01:38:03 PM JST
class NoExposureEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.drawable, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)


* Wed 26 Mar 2014 01:50:37 PM JST
unpack_from('xx2xIHBx', parent, offset)
* Wed 26 Mar 2014 01:54:39 PM JST
    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return pack(self._structcode, self.id)

* Wed 26 Mar 2014 02:12:13 PM JST
class VisibilityNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.window, self.state,) = unpack_from('xx2xIB3x', parent, offset)

* Wed 26 Mar 2014 02:12:25 PM JST
unpack_from('xx2xIB3x', parent, offset)
* Wed 26 Mar 2014 02:12:54 PM JST
_unpacked[0]
* Wed 26 Mar 2014 02:13:13 PM JST
class CreateNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.parent, self.window, self.x, self.y, self.width, self.height, self.border_width, self.override_redirect,) = unpack_from('xx2xIIhhHHHBx', parent, offset)


* Wed 26 Mar 2014 02:13:21 PM JST
unpack_from('xx2xIIhhHHHBx', parent, offset)
* Wed 26 Mar 2014 02:14:17 PM JST
class DestroyNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window,) = unpack_from('xx2xII', parent, offset)


* Wed 26 Mar 2014 02:14:25 PM JST
unpack_from('xx2xII', parent, offset)
* Wed 26 Mar 2014 02:14:44 PM JST
_unpacked
* Wed 26 Mar 2014 02:15:08 PM JST
class UnmapNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.from_configure,) = unpack_from('xx2xIIB3x', parent, offset)


* Wed 26 Mar 2014 02:15:16 PM JST
unpack_from('xx2xIIB3x', parent, offset)
* Wed 26 Mar 2014 02:15:37 PM JST
_unpacked
* Wed 26 Mar 2014 02:15:57 PM JST
class MapNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.override_redirect,) = unpack_from('xx2xIIB3x', parent, offset)


* Wed 26 Mar 2014 02:16:06 PM JST
unpack_from('xx2xIIB3x', parent, offset)
* Wed 26 Mar 2014 02:16:12 PM JST
,) = 
* Wed 26 Mar 2014 02:16:24 PM JST
_unpacked
* Wed 26 Mar 2014 02:16:50 PM JST
class MapRequestEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.parent, self.window,) = unpack_from('xx2xII', parent, offset)


* Wed 26 Mar 2014 02:16:59 PM JST
unpack_from('xx2xII', parent, offset)
* Wed 26 Mar 2014 02:17:18 PM JST
_unpacked
* Wed 26 Mar 2014 02:17:27 PM JST
class ReparentNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.parent, self.x, self.y, self.override_redirect,) = unpack_from('xx2xIIIhhB3x', parent, offset)


* Wed 26 Mar 2014 02:17:34 PM JST
unpack_from('xx2xIIIhhB3x', parent, offset)
* Wed 26 Mar 2014 02:18:25 PM JST

* Wed 26 Mar 2014 02:18:25 PM JST

* Wed 26 Mar 2014 02:18:25 PM JST
                                     _unpacked[6] 

* Wed 26 Mar 2014 02:18:26 PM JST
                                     _unpacked[6] 

* Wed 26 Mar 2014 02:18:26 PM JST
                                     _unpacked[6] 
                                     _unpacked[7] 

* Wed 26 Mar 2014 02:18:44 PM JST
class ConfigureNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.above_sibling, self.x, self.y, self.width, self.height, self.border_width, self.override_redirect,) = unpack_from('xx2xIIIhhHHHBx', parent, offset)


* Wed 26 Mar 2014 02:18:52 PM JST
unpack_from('xx2xIIIhhHHHBx', parent, offset)
* Wed 26 Mar 2014 02:20:14 PM JST
class ConfigureRequestEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.stack_mode, self.parent, self.window, self.sibling, self.x, self.y, self.width, self.height, self.border_width, self.value_mask,) = unpack_from('xB2xIIIhhHHHH', parent, offset)

* Wed 26 Mar 2014 02:20:24 PM JST
 unpack_from('xB2xIIIhhHHHH', parent, offset)
* Wed 26 Mar 2014 02:21:25 PM JST
class GravityNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.x, self.y,) = unpack_from('xx2xIIhh', parent, offset)


* Wed 26 Mar 2014 02:21:32 PM JST
unpack_from('xx2xIIhh', parent, offset)
* Wed 26 Mar 2014 02:22:09 PM JST

* Wed 26 Mar 2014 02:22:09 PM JST

* Wed 26 Mar 2014 02:22:09 PM JST
                      _unpacked[4]

* Wed 26 Mar 2014 02:22:25 PM JST
class ResizeRequestEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.window, self.width, self.height,) = unpack_from('xx2xIHH', parent, offset)


* Wed 26 Mar 2014 02:22:32 PM JST
unpack_from('xx2xIHH', parent, offset)
* Wed 26 Mar 2014 02:24:47 PM JST
class CirculateNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.place,) = unpack_from('xx2xII4xB3x', parent, offset)


* Wed 26 Mar 2014 02:24:55 PM JST
unpack_from('xx2xII4xB3x', parent, offset)
* Wed 26 Mar 2014 02:25:39 PM JST
class CirculateRequestEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.event, self.window, self.place,) = unpack_from('xx2xII4xB3x', parent, offset)


* Wed 26 Mar 2014 02:25:47 PM JST
unpack_from('xx2xII4xB3x', parent, offset)
* Wed 26 Mar 2014 02:26:57 PM JST
class PropertyNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.window, self.atom, self.time, self.state,) = unpack_from('xx2xIIIB3x', parent, offset)

* Wed 26 Mar 2014 02:27:02 PM JST
unpack_from('xx2xIIIB3x', parent, offset)
* Wed 26 Mar 2014 02:27:55 PM JST
class SelectionClearEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.time, self.owner, self.selection,) = unpack_from('xx2xIII', parent, offset)


* Wed 26 Mar 2014 02:28:03 PM JST
unpack_from('xx2xIII', parent, offset)
* Wed 26 Mar 2014 02:28:42 PM JST
class SelectionRequestEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.time, self.owner, self.requestor, self.selection, self.target, self.property,) = unpack_from('xx2xIIIIII', parent, offset)


* Wed 26 Mar 2014 02:28:48 PM JST
unpack_from('xx2xIIIIII', parent, offset)
* Wed 26 Mar 2014 02:30:01 PM JST
class SelectionNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.time, self.requestor, self.selection, self.target, self.property,) = unpack_from('xx2xIIIII', parent, offset)

* Wed 26 Mar 2014 02:30:11 PM JST
unpack_from('xx2xIIIII', parent, offset)
* Wed 26 Mar 2014 02:31:15 PM JST
class ColormapNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.window, self.colormap, self.new, self.state,) = unpack_from('xx2xIIBB2x', parent, offset)


* Wed 26 Mar 2014 02:31:29 PM JST
 = unpack_from('xx2xIIBB2x', parent, offset)
* Wed 26 Mar 2014 02:32:18 PM JST
class ClientMessageData(xcb.Union):
    def __init__(self, parent, offset, size):
        xcb.Union.__init__(self, parent, offset, size)
        self.data8 = xcb.List(parent, offset, 20, 'B', 1)
        self.data16 = xcb.List(parent, offset, 10, 'H', 2)
        self.data32 = xcb.List(parent, offset, 5, 'I', 4)


* Wed 26 Mar 2014 02:33:07 PM JST
class ClientMessageEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.format, self.window, self.type,) = unpack_from('xB2xII', parent, offset)
        offset += 12
        self.data = ClientMessageData(parent, offset, 60)



* Wed 26 Mar 2014 02:33:21 PM JST
unpack_from('xB2xII', parent, offset)
* Wed 26 Mar 2014 02:34:17 PM JST
+= 12
* Wed 26 Mar 2014 02:34:28 PM JST

* Wed 26 Mar 2014 02:34:28 PM JST

* Wed 26 Mar 2014 02:34:28 PM JST
        # offset += 12

* Wed 26 Mar 2014 02:34:41 PM JST
class MappingNotifyEvent(xcb.Event):
    def __init__(self, parent, offset=0):
        xcb.Event.__init__(self, parent, offset)
        (self.request, self.first_keycode, self.count,) = unpack_from('xx2xBBBx', parent, offset)


* Wed 26 Mar 2014 02:34:49 PM JST
unpack_from('xx2xBBBx', parent, offset)
* Wed 26 Mar 2014 02:36:55 PM JST
class RequestError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)


* Wed 26 Mar 2014 02:37:10 PM JST
from xcb import xcb
* Wed 26 Mar 2014 02:37:14 PM JST
from struct import pack, unpack_from

from xcb import xcb

* Wed 26 Mar 2014 02:37:26 PM JST
from xcb import xcb
* Wed 26 Mar 2014 02:37:29 PM JST
from struct import unpack_from

from xcb import xcb

* Wed 26 Mar 2014 02:37:54 PM JST
unpack_from('xx2xIHBx', parent, offset)
* Wed 26 Mar 2014 02:39:33 PM JST
class BadRequest(xcb.ProtocolException):
    pass


* Wed 26 Mar 2014 02:39:41 PM JST
class ValueError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadValue(xcb.ProtocolException):
    pass


* Wed 26 Mar 2014 02:39:52 PM JST
unpack_from('xx2xIHBx', parent, offset)
* Wed 26 Mar 2014 02:40:45 PM JST
class RequestError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        _unpacked = unpack_from('xx2xIHBx', parent, offset)
        self.bad_value =    _unpacked[0] 
        self.minor_opcode = _unpacked[1] 
        self.major_opcode = _unpacked[2] 

* Wed 26 Mar 2014 02:40:52 PM JST
Request
* Wed 26 Mar 2014 02:40:59 PM JST
ErrorBase
* Wed 26 Mar 2014 02:41:45 PM JST
class WindowError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)


* Wed 26 Mar 2014 02:42:07 PM JST
class BadWindow(xcb.ProtocolException):
    pass


* Wed 26 Mar 2014 02:42:39 PM JST
class BadPixmap(xcb.ProtocolException):
    pass


* Wed 26 Mar 2014 02:42:46 PM JST
class AtomError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadAtom(xcb.ProtocolException):
    pass


* Wed 26 Mar 2014 02:43:39 PM JST
class CursorError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadCursor(xcb.ProtocolException):
    pass

class FontError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadFont(xcb.ProtocolException):
    pass

class MatchError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadMatch(xcb.ProtocolException):
    pass

class DrawableError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadDrawable(xcb.ProtocolException):
    pass

class AccessError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadAccess(xcb.ProtocolException):
    pass

class AllocError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadAlloc(xcb.ProtocolException):
    pass

class ColormapError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadColormap(xcb.ProtocolException):
    pass

class GContextError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadGContext(xcb.ProtocolException):
    pass

class IDChoiceError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadIDChoice(xcb.ProtocolException):
    pass

class NameError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadName(xcb.ProtocolException):
    pass

class LengthError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadLength(xcb.ProtocolException):
    pass

class ImplementationError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)
        (self.bad_value, self.minor_opcode, self.major_opcode,) = unpack_from('xx2xIHBx', parent, offset)

class BadImplementation(xcb.ProtocolException):
    pass



* Wed 26 Mar 2014 02:44:19 PM JST
    """
    """

* Wed 26 Mar 2014 02:48:24 PM JST
class GetGeometryCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:48:40 PM JST
class QueryTreeCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:48:47 PM JST
class InternAtomCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:48:54 PM JST
class GetAtomNameCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:49:04 PM JST
class GetPropertyCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:49:12 PM JST
class ListPropertiesCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:49:18 PM JST
class GetSelectionOwnerCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:49:25 PM JST
class GrabPointerCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:49:39 PM JST
class GrabKeyboardCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:49:55 PM JST
class QueryPointerCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:50:05 PM JST
class GetMotionEventsCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:50:12 PM JST
class TranslateCoordinatesCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:50:19 PM JST
class GetInputFocusCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:50:28 PM JST
class QueryKeymapCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:50:36 PM JST
class QueryFontCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:50:43 PM JST
class QueryTextExtentsCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:50:50 PM JST
class ListFontsCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:50:56 PM JST
class ListFontsWithInfoCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:51:02 PM JST
class GetFontPathCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:51:10 PM JST
class GetImageCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:51:16 PM JST
class ListInstalledColormapsCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:51:21 PM JST
class AllocColorCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:51:26 PM JST
class AllocNamedColorCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:51:33 PM JST
class AllocColorCellsCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:51:38 PM JST
class AllocColorPlanesCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:51:46 PM JST
class QueryColorsCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:51:50 PM JST
class LookupColorCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:51:55 PM JST
class QueryBestSizeCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:52:03 PM JST
class QueryExtensionCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:52:08 PM JST
class ListExtensionsCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:52:14 PM JST
class GetKeyboardMappingCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:52:20 PM JST
class GetKeyboardControlCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:52:26 PM JST
class GetPointerControlCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:52:32 PM JST
class GetScreenSaverCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:52:38 PM JST
class ListHostsCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:52:43 PM JST
class SetPointerMappingCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:52:48 PM JST
class GetPointerMappingCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:52:54 PM JST
class SetModifierMappingCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:52:58 PM JST
class GetModifierMappingCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 02:59:55 PM JST
from struct import pack, unpack_from
* Wed 26 Mar 2014 03:00:04 PM JST
class CHAR2B(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.byte1, self.byte2,) = unpack_from('BB', parent, offset)

* Wed 26 Mar 2014 03:00:14 PM JST
unpack_from('BB', parent, offset)
* Wed 26 Mar 2014 03:00:29 PM JST
unpack_from('BB', parent, offset)
* Wed 26 Mar 2014 03:00:52 PM JST
_unpacked[0]
* Wed 26 Mar 2014 03:01:00 PM JST
class POINT(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.x, self.y,) = unpack_from('hh', parent, offset)


* Wed 26 Mar 2014 03:01:05 PM JST
unpack_from('hh', parent, offset)
* Wed 26 Mar 2014 03:01:29 PM JST
_unpacked[0]
* Wed 26 Mar 2014 03:01:47 PM JST
class RECTANGLE(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.x, self.y, self.width, self.height,) = unpack_from('hhHH', parent, offset)


* Wed 26 Mar 2014 03:01:56 PM JST
unpack_from('hhHH', parent, offset)
* Wed 26 Mar 2014 03:02:52 PM JST
_unpacked[2]
* Wed 26 Mar 2014 03:03:03 PM JST
class ARC(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.x, self.y, self.width, self.height, self.angle1, self.angle2,) = unpack_from('hhHHhh', parent, offset)

* Wed 26 Mar 2014 03:03:06 PM JST
class ARC(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.x, self.y, self.width, self.height, self.angle1, self.angle2,) = unpack_from('hhHHhh', parent, offset)


* Wed 26 Mar 2014 03:03:16 PM JST
unpack_from('hhHHhh', parent, offset)
* Wed 26 Mar 2014 03:03:24 PM JST
,) = 
* Wed 26 Mar 2014 03:04:38 PM JST
_unpacked[3]
* Wed 26 Mar 2014 03:05:04 PM JST
class FORMAT(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.depth, self.bits_per_pixel, self.scanline_pad,) = unpack_from('BBB5x', parent, offset)


* Wed 26 Mar 2014 03:05:13 PM JST
unpack_from('BBB5x', parent, offset)
* Wed 26 Mar 2014 03:06:43 PM JST
class VISUALTYPE(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.visual_id, self._class, self.bits_per_rgb_value, self.colormap_entries, self.red_mask, self.green_mask, self.blue_mask,) = unpack_from('IBBHIII4x', parent, offset)


* Wed 26 Mar 2014 03:06:52 PM JST
unpack_from('IBBHIII4x', parent, offset)
* Wed 26 Mar 2014 03:07:28 PM JST
_unpacked[5]
* Wed 26 Mar 2014 03:07:50 PM JST
class DEPTH(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.depth, self.visuals_len,) = unpack_from('BxH4x', parent, offset)
        offset += 8
        self.visuals = xcb.List(parent, offset, self.visuals_len, VISUALTYPE, 24)
        offset += len(self.visuals.buf())
        xcb._resize_obj(self, offset - base)


* Wed 26 Mar 2014 03:08:16 PM JST
unpack_from('BxH4x', parent, offset)
* Wed 26 Mar 2014 03:09:24 PM JST
class SCREEN(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.root, self.default_colormap, self.white_pixel, self.black_pixel, self.current_input_masks, self.width_in_pixels, self.height_in_pixels, self.width_in_millimeters, self.height_in_millimeters, self.min_installed_maps, self.max_installed_maps, self.root_visual, self.backing_stores, self.save_unders, self.root_depth, self.allowed_depths_len,) = unpack_from('IIIIIHHHHHHIBBBB', parent, offset)
        offset += 40
        self.allowed_depths = xcb.List(parent, offset, self.allowed_depths_len, DEPTH, -1)
        offset += len(self.allowed_depths.buf())
        xcb._resize_obj(self, offset - base)


* Wed 26 Mar 2014 03:09:37 PM JST
unpack_from('IIIIIHHHHHHIBBBB', parent, offset)
* Wed 26 Mar 2014 03:10:28 PM JST
_unpacked[6]
* Wed 26 Mar 2014 03:10:35 PM JST
_unpacked[6]
* Wed 26 Mar 2014 03:11:54 PM JST
class SetupRequest(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.byte_order, self.protocol_major_version, self.protocol_minor_version, self.authorization_protocol_name_len, self.authorization_protocol_data_len,) = unpack_from('BxHHHH2x', parent, offset)
        offset += 12
        self.authorization_protocol_name = xcb.List(parent, offset, self.authorization_protocol_name_len, 'b', 1)
        offset += len(self.authorization_protocol_name.buf())
        offset += xcb.type_pad(1, offset)
        self.authorization_protocol_data = xcb.List(parent, offset, self.authorization_protocol_data_len, 'b', 1)
        offset += len(self.authorization_protocol_data.buf())
        xcb._resize_obj(self, offset - base)


* Wed 26 Mar 2014 03:12:08 PM JST
unpack_from('BxHHHH2x', parent, offset)
* Wed 26 Mar 2014 03:12:56 PM JST

* Wed 26 Mar 2014 03:12:56 PM JST

* Wed 26 Mar 2014 03:12:56 PM JST
                                               _unpacked[5]

* Wed 26 Mar 2014 03:12:56 PM JST
                                               _unpacked[5]

* Wed 26 Mar 2014 03:12:56 PM JST
                                               _unpacked[5]
                                               _unpacked[6]

* Wed 26 Mar 2014 03:12:56 PM JST
                                               _unpacked[5]
                                               _unpacked[6]

* Wed 26 Mar 2014 03:12:56 PM JST
                                               _unpacked[5]
                                               _unpacked[6]
                                               _unpacked[7]

* Wed 26 Mar 2014 03:12:56 PM JST
                                               _unpacked[5]
                                               _unpacked[6]
                                               _unpacked[7]

* Wed 26 Mar 2014 03:12:56 PM JST
                                               _unpacked[5]
                                               _unpacked[6]
                                               _unpacked[7]
                                               _unpacked[8]

* Wed 26 Mar 2014 03:13:39 PM JST
class SetupFailed(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.status, self.reason_len, self.protocol_major_version, self.protocol_minor_version, self.length,) = unpack_from('BBHHH', parent, offset)
        offset += 8
        self.reason = xcb.List(parent, offset, self.reason_len, 'b', 1)
        offset += len(self.reason.buf())
        xcb._resize_obj(self, offset - base)


* Wed 26 Mar 2014 03:13:45 PM JST
unpack_from('BBHHH', parent, offset)
* Wed 26 Mar 2014 03:14:50 PM JST
class SetupAuthenticate(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.status, self.length,) = unpack_from('B5xH', parent, offset)
        offset += 8
        self.reason = xcb.List(parent, offset, (self.length * 4), 'b', 1)
        offset += len(self.reason.buf())
        xcb._resize_obj(self, offset - base)


* Wed 26 Mar 2014 03:14:56 PM JST
unpack_from('B5xH', parent, offset)
* Wed 26 Mar 2014 03:15:29 PM JST
class Setup(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.status, self.protocol_major_version, self.protocol_minor_version, self.length, self.release_number, self.resource_id_base, self.resource_id_mask, self.motion_buffer_size, self.vendor_len, self.maximum_request_length, self.roots_len, self.pixmap_formats_len, self.image_byte_order, self.bitmap_format_bit_order, self.bitmap_format_scanline_unit, self.bitmap_format_scanline_pad, self.min_keycode, self.max_keycode,) = unpack_from('BxHHHIIIIHHBBBBBBBB4x', parent, offset)
        offset += 40
        self.vendor = xcb.List(parent, offset, self.vendor_len, 'b', 1)
        offset += len(self.vendor.buf())
        offset += xcb.type_pad(8, offset)
        self.pixmap_formats = xcb.List(parent, offset, self.pixmap_formats_len, FORMAT, 8)
        offset += len(self.pixmap_formats.buf())
        offset += xcb.type_pad(4, offset)
        self.roots = xcb.List(parent, offset, self.roots_len, SCREEN, -1)
        offset += len(self.roots.buf())
        xcb._resize_obj(self, offset - base)


* Wed 26 Mar 2014 03:15:37 PM JST
unpack_from('BxHHHIIIIHHBBBBBBBB4x', parent, offset)
* Wed 26 Mar 2014 03:16:28 PM JST
_unpacked[15]
* Wed 26 Mar 2014 03:16:33 PM JST
_unpacked[16]
* Wed 26 Mar 2014 03:17:51 PM JST
class GetWindowAttributesCookie(xcb.Cookie):
    pass


* Wed 26 Mar 2014 03:18:14 PM JST
class GetWindowAttributesReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.backing_store, self.visual, self._class, self.bit_gravity, self.win_gravity, self.backing_planes, self.backing_pixel, self.save_under, self.map_is_installed, self.map_state, self.override_redirect, self.colormap, self.all_event_masks, self.your_event_mask, self.do_not_propagate_mask,) = unpack_from('xB2x4xIHBBIIBBBBIIIH2x', parent, offset)



* Wed 26 Mar 2014 03:18:25 PM JST
unpack_from('xB2x4xIHBBIIBBBBIIIH2x', parent, offset)
* Wed 26 Mar 2014 03:18:58 PM JST

* Wed 26 Mar 2014 03:18:58 PM JST

* Wed 26 Mar 2014 03:18:58 PM JST
                                        _unpacked[15]

* Wed 26 Mar 2014 03:18:59 PM JST
                                        _unpacked[15]

* Wed 26 Mar 2014 03:18:59 PM JST
                                        _unpacked[15]
                                        _unpacked[16]

* Wed 26 Mar 2014 03:18:59 PM JST
                                        _unpacked[15]
                                        _unpacked[16]

* Wed 26 Mar 2014 03:18:59 PM JST
                                        _unpacked[15]
                                        _unpacked[16]
                                        _unpacked[17]

* Wed 26 Mar 2014 03:19:16 PM JST
class GetGeometryReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.depth, self.root, self.x, self.y, self.width, self.height, self.border_width,) = unpack_from('xB2x4xIhhHHH2x', parent, offset)

* Wed 26 Mar 2014 03:19:21 PM JST
unpack_from('xB2x4xIhhHHH2x', parent, offset)
* Wed 26 Mar 2014 03:19:29 PM JST
,) = 
* Wed 26 Mar 2014 03:19:51 PM JST
_unpacked[5]
* Wed 26 Mar 2014 03:20:13 PM JST
class QueryTreeReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.root, self.parent, self.children_len,) = unpack_from('xx2x4xIIH14x', parent, offset)
        offset += 32
        self.children = xcb.List(parent, offset, self.children_len, 'I', 4)


* Wed 26 Mar 2014 03:20:27 PM JST
unpack_from('xx2x4xIIH14x', parent, offset)
* Wed 26 Mar 2014 03:21:49 PM JST
class InternAtomReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.atom,) = unpack_from('xx2x4xI', parent, offset)


* Wed 26 Mar 2014 03:21:55 PM JST
unpack_from('xx2x4xI', parent, offset)
* Wed 26 Mar 2014 03:22:02 PM JST
,) = 
* Wed 26 Mar 2014 03:22:09 PM JST
_unpacked
* Wed 26 Mar 2014 03:22:17 PM JST
class GetAtomNameReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.name_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.name = xcb.List(parent, offset, self.name_len, 'b', 1)



* Wed 26 Mar 2014 03:22:23 PM JST
unpack_from('xx2x4xH22x', parent, offset)
* Wed 26 Mar 2014 03:22:34 PM JST
,) = 
* Wed 26 Mar 2014 06:43:52 PM JST
class GetPropertyReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.format, self.type, self.bytes_after, self.value_len,) = unpack_from('xB2x4xIII12x', parent, offset)
        offset += 32
        self.value = xcb.List(parent, offset, (self.value_len * (self.format / 8)), 'B', 1)


* Wed 26 Mar 2014 06:44:00 PM JST
unpack_from('xB2x4xIII12x', parent, offset)
* Wed 26 Mar 2014 06:45:21 PM JST
class ListPropertiesReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.atoms_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.atoms = xcb.List(parent, offset, self.atoms_len, 'I', 4)


* Wed 26 Mar 2014 06:45:48 PM JST
class GetSelectionOwnerReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.owner,) = unpack_from('xx2x4xI', parent, offset)



* Wed 26 Mar 2014 06:45:58 PM JST
class GrabPointerReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.status,) = unpack_from('xB2x4x', parent, offset)



* Wed 26 Mar 2014 06:46:07 PM JST
class GrabKeyboardReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.status,) = unpack_from('xB2x4x', parent, offset)



* Wed 26 Mar 2014 06:46:12 PM JST
class QueryPointerReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.same_screen, self.root, self.child, self.root_x, self.root_y, self.win_x, self.win_y, self.mask,) = unpack_from('xB2x4xIIhhhhH2x', parent, offset)


* Wed 26 Mar 2014 06:46:19 PM JST
unpack_from('xB2x4xIIhhhhH2x', parent, offset)
* Wed 26 Mar 2014 06:47:26 PM JST
class TIMECOORD(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.time, self.x, self.y,) = unpack_from('Ihh', parent, offset)


* Wed 26 Mar 2014 06:47:32 PM JST
unpack_from('Ihh', parent, offset)
* Wed 26 Mar 2014 06:48:11 PM JST
class GetMotionEventsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.events_len,) = unpack_from('xx2x4xI20x', parent, offset)
        offset += 32
        self.events = xcb.List(parent, offset, self.events_len, TIMECOORD, 8)


* Wed 26 Mar 2014 06:48:23 PM JST
class TranslateCoordinatesReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.same_screen, self.child, self.dst_x, self.dst_y,) = unpack_from('xB2x4xIhh', parent, offset)



* Wed 26 Mar 2014 06:48:31 PM JST
unpack_from('xB2x4xIhh', parent, offset)
* Wed 26 Mar 2014 06:48:37 PM JST
,) = 
* Wed 26 Mar 2014 06:49:09 PM JST
class GetInputFocusReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.revert_to, self.focus,) = unpack_from('xB2x4xI', parent, offset)


* Wed 26 Mar 2014 06:49:15 PM JST
unpack_from('xB2x4xI', parent, offset)
* Wed 26 Mar 2014 06:49:47 PM JST
class QueryKeymapReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        offset += 8
        self.keys = xcb.List(parent, offset, 32, 'B', 1)



* Wed 26 Mar 2014 06:49:54 PM JST
class FONTPROP(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.name, self.value,) = unpack_from('II', parent, offset)


* Wed 26 Mar 2014 06:50:03 PM JST
unpack_from('II', parent, offset)
* Wed 26 Mar 2014 06:50:47 PM JST
class CHARINFO(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.left_side_bearing, self.right_side_bearing, self.character_width, self.ascent, self.descent, self.attributes,) = unpack_from('hhhhhH', parent, offset)


* Wed 26 Mar 2014 06:50:53 PM JST
unpack_from('hhhhhH', parent, offset)
* Wed 26 Mar 2014 06:51:45 PM JST
class QueryFontReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        offset += 8
        self.min_bounds = CHARINFO(parent, offset, 12)
        offset += 12
        offset += 4
        offset += xcb.type_pad(12, offset)
        self.max_bounds = CHARINFO(parent, offset, 12)
        offset += 12
        (self.min_char_or_byte2, self.max_char_or_byte2, self.default_char, self.properties_len, self.draw_direction, self.min_byte1, self.max_byte1, self.all_chars_exist, self.font_ascent, self.font_descent, self.char_infos_len,) = unpack_from('4xHHHHBBBBhhI', parent, offset)
        offset += 24
        offset += xcb.type_pad(8, offset)
        self.properties = xcb.List(parent, offset, self.properties_len, FONTPROP, 8)
        offset += len(self.properties.buf())
        offset += xcb.type_pad(12, offset)
        self.char_infos = xcb.List(parent, offset, self.char_infos_len, CHARINFO, 12)


* Wed 26 Mar 2014 06:52:01 PM JST
unpack_from('4xHHHHBBBBhhI', parent, offset)
* Wed 26 Mar 2014 06:52:49 PM JST
_unpacked[9]
* Wed 26 Mar 2014 06:53:17 PM JST
class QueryTextExtentsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.draw_direction, self.font_ascent, self.font_descent, self.overall_ascent, self.overall_descent, self.overall_width, self.overall_left, self.overall_right,) = unpack_from('xB2x4xhhhhiii', parent, offset)


* Wed 26 Mar 2014 06:53:23 PM JST
unpack_from('xB2x4xhhhhiii', parent, offset)
* Wed 26 Mar 2014 06:54:11 PM JST
class STR(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.name_len,) = unpack_from('B', parent, offset)
        offset += 1
        self.name = xcb.List(parent, offset, self.name_len, 'b', 1)
        offset += len(self.name.buf())
        xcb._resize_obj(self, offset - base)


* Wed 26 Mar 2014 06:54:26 PM JST
class ListFontsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.names_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.names = xcb.List(parent, offset, self.names_len, STR, -1)


* Wed 26 Mar 2014 06:54:37 PM JST
class ListFontsWithInfoReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.name_len,) = unpack_from('xB2x4x', parent, offset)
        offset += 8
        self.min_bounds = CHARINFO(parent, offset, 12)
        offset += 12
        offset += 4
        offset += xcb.type_pad(12, offset)
        self.max_bounds = CHARINFO(parent, offset, 12)
        offset += 12
        (self.min_char_or_byte2, self.max_char_or_byte2, self.default_char, self.properties_len, self.draw_direction, self.min_byte1, self.max_byte1, self.all_chars_exist, self.font_ascent, self.font_descent, self.replies_hint,) = unpack_from('4xHHHHBBBBhhI', parent, offset)
        offset += 24
        offset += xcb.type_pad(8, offset)
        self.properties = xcb.List(parent, offset, self.properties_len, FONTPROP, 8)
        offset += len(self.properties.buf())
        offset += xcb.type_pad(1, offset)
        self.name = xcb.List(parent, offset, self.name_len, 'b', 1)


* Wed 26 Mar 2014 06:54:50 PM JST
unpack_from('4xHHHHBBBBhhI', parent, offset)
* Wed 26 Mar 2014 06:54:57 PM JST
,) = 
* Wed 26 Mar 2014 06:55:48 PM JST
class GetFontPathReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.path_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.path = xcb.List(parent, offset, self.path_len, STR, -1)



* Wed 26 Mar 2014 06:55:57 PM JST
class SEGMENT(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.x1, self.y1, self.x2, self.y2,) = unpack_from('hhhh', parent, offset)



* Wed 26 Mar 2014 06:56:06 PM JST
unpack_from('hhhh', parent, offset)
* Wed 26 Mar 2014 06:56:35 PM JST
class GetImageReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.depth, self.visual,) = unpack_from('xB2x4xI20x', parent, offset)
        offset += 32
        self.data = xcb.List(parent, offset, (self.length * 4), 'B', 1)


* Wed 26 Mar 2014 06:56:42 PM JST
unpack_from('xB2x4xI20x', parent, offset)
* Wed 26 Mar 2014 06:58:20 PM JST
class ListInstalledColormapsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.cmaps_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.cmaps = xcb.List(parent, offset, self.cmaps_len, 'I', 4)


* Wed 26 Mar 2014 06:58:30 PM JST
class AllocColorReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.red, self.green, self.blue, self.pixel,) = unpack_from('xx2x4xHHH2xI', parent, offset)


* Wed 26 Mar 2014 06:58:38 PM JST
unpack_from('xx2x4xHHH2xI', parent, offset)
* Wed 26 Mar 2014 06:59:15 PM JST
class AllocNamedColorReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.pixel, self.exact_red, self.exact_green, self.exact_blue, self.visual_red, self.visual_green, self.visual_blue,) = unpack_from('xx2x4xIHHHHHH', parent, offset)


* Wed 26 Mar 2014 06:59:23 PM JST
unpack_from('xx2x4xIHHHHHH', parent, offset)
* Wed 26 Mar 2014 06:59:54 PM JST

* Wed 26 Mar 2014 06:59:54 PM JST

* Wed 26 Mar 2014 06:59:54 PM JST
                            _unpacked[7]

* Wed 26 Mar 2014 07:00:10 PM JST
class AllocColorCellsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.pixels_len, self.masks_len,) = unpack_from('xx2x4xHH20x', parent, offset)
        offset += 32
        self.pixels = xcb.List(parent, offset, self.pixels_len, 'I', 4)
        offset += len(self.pixels.buf())
        offset += xcb.type_pad(4, offset)
        self.masks = xcb.List(parent, offset, self.masks_len, 'I', 4)


* Wed 26 Mar 2014 07:00:16 PM JST
unpack_from('xx2x4xHH20x', parent, offset)
* Wed 26 Mar 2014 07:00:51 PM JST
class AllocColorPlanesReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.pixels_len, self.red_mask, self.green_mask, self.blue_mask,) = unpack_from('xx2x4xH2xIII8x', parent, offset)
        offset += 32
        self.pixels = xcb.List(parent, offset, self.pixels_len, 'I', 4)

* Wed 26 Mar 2014 07:00:59 PM JST
unpack_from('xx2x4xH2xIII8x', parent, offset)
* Wed 26 Mar 2014 07:01:41 PM JST
class COLORITEM(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.pixel, self.red, self.green, self.blue, self.flags,) = unpack_from('IHHHBx', parent, offset)


* Wed 26 Mar 2014 07:01:52 PM JST
unpack_from('IHHHBx', parent, offset)
* Wed 26 Mar 2014 07:02:30 PM JST
class RGB(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.red, self.green, self.blue,) = unpack_from('HHH2x', parent, offset)


* Wed 26 Mar 2014 07:02:36 PM JST
unpack_from('HHH2x', parent, offset)
* Wed 26 Mar 2014 07:03:12 PM JST
class QueryColorsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.colors_len,) = unpack_from('xx2x4xH22x', parent, offset)
        offset += 32
        self.colors = xcb.List(parent, offset, self.colors_len, RGB, 8)


* Wed 26 Mar 2014 07:03:18 PM JST
class LookupColorReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.exact_red, self.exact_green, self.exact_blue, self.visual_red, self.visual_green, self.visual_blue,) = unpack_from('xx2x4xHHHHHH', parent, offset)



* Wed 26 Mar 2014 07:03:24 PM JST
unpack_from('xx2x4xHHHHHH', parent, offset)
* Wed 26 Mar 2014 07:04:10 PM JST
class QueryBestSizeReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.width, self.height,) = unpack_from('xx2x4xHH', parent, offset)


* Wed 26 Mar 2014 07:04:14 PM JST
unpack_from('xx2x4xHH', parent, offset)
* Wed 26 Mar 2014 07:04:42 PM JST
class QueryExtensionReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.present, self.major_opcode, self.first_event, self.first_error,) = unpack_from('xx2x4xBBBB', parent, offset)


* Wed 26 Mar 2014 10:36:47 PM JST
class ListExtensionsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.names_len,) = unpack_from('xB2x4x24x', parent, offset)
        offset += 32
        self.names = xcb.List(parent, offset, self.names_len, STR, -1)


* Wed 26 Mar 2014 10:37:00 PM JST
class GetKeyboardMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.keysyms_per_keycode,) = unpack_from('xB2x4x24x', parent, offset)
        offset += 32
        self.keysyms = xcb.List(parent, offset, self.length, 'I', 4)



* Wed 26 Mar 2014 10:37:08 PM JST
class GetKeyboardControlReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.global_auto_repeat, self.led_mask, self.key_click_percent, self.bell_percent, self.bell_pitch, self.bell_duration,) = unpack_from('xB2x4xIBBHH2x', parent, offset)
        offset += 20
        self.auto_repeats = xcb.List(parent, offset, 32, 'B', 1)


* Wed 26 Mar 2014 10:37:17 PM JST
unpack_from('xB2x4xIBBHH2x', parent, offset)
* Wed 26 Mar 2014 10:38:13 PM JST
class GetPointerControlReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.acceleration_numerator, self.acceleration_denominator, self.threshold,) = unpack_from('xx2x4xHHH18x', parent, offset)


* Wed 26 Mar 2014 10:38:20 PM JST
unpack_from('xx2x4xHHH18x', parent, offset)
* Wed 26 Mar 2014 10:38:42 PM JST
unpack_from('xx2x4xHHH18x', parent, offset)
* Wed 26 Mar 2014 10:38:44 PM JST
_unpacked
* Wed 26 Mar 2014 10:39:06 PM JST
class GetScreenSaverReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.timeout, self.interval, self.prefer_blanking, self.allow_exposures,) = unpack_from('xx2x4xHHBB18x', parent, offset)


* Wed 26 Mar 2014 10:39:11 PM JST
unpack_from('xx2x4xHHBB18x', parent, offset)
* Wed 26 Mar 2014 10:39:45 PM JST
class HOST(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.family, self.address_len,) = unpack_from('BxH', parent, offset)
        offset += 4
        self.address = xcb.List(parent, offset, self.address_len, 'B', 1)
        offset += len(self.address.buf())
        xcb._resize_obj(self, offset - base)


* Wed 26 Mar 2014 10:39:56 PM JST
unpack_from('BxH', parent, offset)
* Wed 26 Mar 2014 10:40:29 PM JST
class ListHostsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.mode, self.hosts_len,) = unpack_from('xB2x4xH22x', parent, offset)
        offset += 32
        self.hosts = xcb.List(parent, offset, self.hosts_len, HOST, -1)


* Wed 26 Mar 2014 10:40:35 PM JST
unpack_from('xB2x4xH22x', parent, offset)
* Wed 26 Mar 2014 10:41:09 PM JST
class SetPointerMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.status,) = unpack_from('xB2x4x', parent, offset)


* Wed 26 Mar 2014 10:41:17 PM JST
class GetPointerMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.map_len,) = unpack_from('xB2x4x24x', parent, offset)
        offset += 32
        self.map = xcb.List(parent, offset, self.map_len, 'B', 1)


* Wed 26 Mar 2014 10:41:22 PM JST
class SetModifierMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.status,) = unpack_from('xB2x4x', parent, offset)


* Wed 26 Mar 2014 10:41:28 PM JST
class GetModifierMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.keycodes_per_modifier,) = unpack_from('xB2x4x24x', parent, offset)
        offset += 32
        self.keycodes = xcb.List(parent, offset, (self.keycodes_per_modifier * 8), 'B', 1)


* Thu 27 Mar 2014 04:14:10 AM JST
import sys as _sys
import os as _os
from struct import pack, unpack_from

from xcb import xcb

* Thu 27 Mar 2014 04:14:12 AM JST
from struct import pack, unpack_from

from xcb import xcb

* Thu 27 Mar 2014 04:14:49 AM JST
class xprotoExtension(xcb.Extension):

    def CreateWindowChecked(self, depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, True),
                                 xcb.VoidCookie())

    def CreateWindow(self, depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, False),
                                 xcb.VoidCookie())

    def ChangeWindowAttributesChecked(self, window, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, True),
                                 xcb.VoidCookie())

    def ChangeWindowAttributes(self, window, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, False),
                                 xcb.VoidCookie())

    def GetWindowAttributes(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, True),
                                 GetWindowAttributesCookie(),
                                 GetWindowAttributesReply)

    def GetWindowAttributesUnchecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, False),
                                 GetWindowAttributesCookie(),
                                 GetWindowAttributesReply)

    def DestroyWindowChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, True),
                                 xcb.VoidCookie())

    def DestroyWindow(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, False),
                                 xcb.VoidCookie())

    def DestroySubwindowsChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, True),
                                 xcb.VoidCookie())

    def DestroySubwindows(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, False),
                                 xcb.VoidCookie())

    def ChangeSaveSetChecked(self, mode, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, True),
                                 xcb.VoidCookie())

    def ChangeSaveSet(self, mode, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, False),
                                 xcb.VoidCookie())

    def ReparentWindowChecked(self, window, parent, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, True),
                                 xcb.VoidCookie())

    def ReparentWindow(self, window, parent, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, False),
                                 xcb.VoidCookie())

    def MapWindowChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, True),
                                 xcb.VoidCookie())

    def MapWindow(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, False),
                                 xcb.VoidCookie())

    def MapSubwindowsChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, True),
                                 xcb.VoidCookie())

    def MapSubwindows(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, False),
                                 xcb.VoidCookie())

    def UnmapWindowChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, True),
                                 xcb.VoidCookie())

    def UnmapWindow(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, False),
                                 xcb.VoidCookie())

    def UnmapSubwindowsChecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, True),
                                 xcb.VoidCookie())

    def UnmapSubwindows(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, False),
                                 xcb.VoidCookie())

    def ConfigureWindowChecked(self, window, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, True),
                                 xcb.VoidCookie())

    def ConfigureWindow(self, window, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, False),
                                 xcb.VoidCookie())

    def CirculateWindowChecked(self, direction, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, True),
                                 xcb.VoidCookie())

    def CirculateWindow(self, direction, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, False),
                                 xcb.VoidCookie())

    def GetGeometry(self, drawable):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, True),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def GetGeometryUnchecked(self, drawable):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, False),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def QueryTree(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, True),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def QueryTreeUnchecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, False),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def InternAtom(self, only_if_exists, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, True),
                                 InternAtomCookie(),
                                 InternAtomReply)

    def InternAtomUnchecked(self, only_if_exists, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, False),
                                 InternAtomCookie(),
                                 InternAtomReply)

    def GetAtomName(self, atom):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, True),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)

    def GetAtomNameUnchecked(self, atom):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, False),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)

    def ChangePropertyChecked(self, mode, window, property, type, format, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, True),
                                 xcb.VoidCookie())

    def ChangeProperty(self, mode, window, property, type, format, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, False),
                                 xcb.VoidCookie())

    def DeletePropertyChecked(self, window, property):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, True),
                                 xcb.VoidCookie())

    def DeleteProperty(self, window, property):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, False),
                                 xcb.VoidCookie())

    def GetProperty(self, delete, window, property, type, long_offset, long_length):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, True),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def GetPropertyUnchecked(self, delete, window, property, type, long_offset, long_length):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, False),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def ListProperties(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, True),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def ListPropertiesUnchecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, False),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def SetSelectionOwnerChecked(self, owner, selection, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, True),
                                 xcb.VoidCookie())

    def SetSelectionOwner(self, owner, selection, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, False),
                                 xcb.VoidCookie())

    def GetSelectionOwner(self, selection):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, True),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def GetSelectionOwnerUnchecked(self, selection):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, False),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def ConvertSelectionChecked(self, requestor, selection, target, property, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, True),
                                 xcb.VoidCookie())

    def ConvertSelection(self, requestor, selection, target, property, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, False),
                                 xcb.VoidCookie())

    def SendEventChecked(self, propagate, destination, event_mask, event):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(array('b', event))))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, True),
                                 xcb.VoidCookie())

    def SendEvent(self, propagate, destination, event_mask, event):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(array('b', event))))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, False),
                                 xcb.VoidCookie())

    def GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, True),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def GrabPointerUnchecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, False),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def UngrabPointerChecked(self, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, True),
                                 xcb.VoidCookie())

    def UngrabPointer(self, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, False),
                                 xcb.VoidCookie())

    def GrabButtonChecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, True),
                                 xcb.VoidCookie())

    def GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, False),
                                 xcb.VoidCookie())

    def UngrabButtonChecked(self, button, grab_window, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, True),
                                 xcb.VoidCookie())

    def UngrabButton(self, button, grab_window, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, False),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrabChecked(self, cursor, time, event_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, True),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrab(self, cursor, time, event_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, False),
                                 xcb.VoidCookie())

    def GrabKeyboard(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, True),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def GrabKeyboardUnchecked(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, False),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def UngrabKeyboardChecked(self, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, True),
                                 xcb.VoidCookie())

    def UngrabKeyboard(self, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, False),
                                 xcb.VoidCookie())

    def GrabKeyChecked(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, True),
                                 xcb.VoidCookie())

    def GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, False),
                                 xcb.VoidCookie())

    def UngrabKeyChecked(self, key, grab_window, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, True),
                                 xcb.VoidCookie())

    def UngrabKey(self, key, grab_window, modifiers):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, False),
                                 xcb.VoidCookie())

    def AllowEventsChecked(self, mode, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, True),
                                 xcb.VoidCookie())

    def AllowEvents(self, mode, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, False),
                                 xcb.VoidCookie())

    def GrabServerChecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, True),
                                 xcb.VoidCookie())

    def GrabServer(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, False),
                                 xcb.VoidCookie())

    def UngrabServerChecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, True),
                                 xcb.VoidCookie())

    def UngrabServer(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, False),
                                 xcb.VoidCookie())

    def QueryPointer(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, True),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def QueryPointerUnchecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, False),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def GetMotionEvents(self, window, start, stop):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, True),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def GetMotionEventsUnchecked(self, window, start, stop):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, False),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def TranslateCoordinates(self, src_window, dst_window, src_x, src_y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, True),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def TranslateCoordinatesUnchecked(self, src_window, dst_window, src_x, src_y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, False),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def WarpPointerChecked(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, True),
                                 xcb.VoidCookie())

    def WarpPointer(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, False),
                                 xcb.VoidCookie())

    def SetInputFocusChecked(self, revert_to, focus, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, True),
                                 xcb.VoidCookie())

    def SetInputFocus(self, revert_to, focus, time):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, False),
                                 xcb.VoidCookie())

    def GetInputFocus(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, True),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def GetInputFocusUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, False),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def QueryKeymap(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, True),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def QueryKeymapUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, False),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def OpenFontChecked(self, fid, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, True),
                                 xcb.VoidCookie())

    def OpenFont(self, fid, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, False),
                                 xcb.VoidCookie())

    def CloseFontChecked(self, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, True),
                                 xcb.VoidCookie())

    def CloseFont(self, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, False),
                                 xcb.VoidCookie())

    def QueryFont(self, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, True),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryFontUnchecked(self, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, False),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryTextExtents(self, font, string_len, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=x', ))
        buf.write(pack('=B', (string_len & 1)))
        buf.write(pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, True),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def QueryTextExtentsUnchecked(self, font, string_len, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=x', ))
        buf.write(pack('=B', (string_len & 1)))
        buf.write(pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, False),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def ListFonts(self, max_names, pattern_len, pattern):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, True),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsUnchecked(self, max_names, pattern_len, pattern):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, False),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsWithInfo(self, max_names, pattern_len, pattern):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, True),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def ListFontsWithInfoUnchecked(self, max_names, pattern_len, pattern):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, False),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def SetFontPathChecked(self, font_qty, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, True),
                                 xcb.VoidCookie())

    def SetFontPath(self, font_qty, font):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, False),
                                 xcb.VoidCookie())

    def GetFontPath(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, True),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def GetFontPathUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, False),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def CreatePixmapChecked(self, depth, pid, drawable, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, True),
                                 xcb.VoidCookie())

    def CreatePixmap(self, depth, pid, drawable, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, False),
                                 xcb.VoidCookie())

    def FreePixmapChecked(self, pixmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, True),
                                 xcb.VoidCookie())

    def FreePixmap(self, pixmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, False),
                                 xcb.VoidCookie())

    def CreateGCChecked(self, cid, drawable, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, True),
                                 xcb.VoidCookie())

    def CreateGC(self, cid, drawable, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, False),
                                 xcb.VoidCookie())

    def ChangeGCChecked(self, gc, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, True),
                                 xcb.VoidCookie())

    def ChangeGC(self, gc, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, False),
                                 xcb.VoidCookie())

    def CopyGCChecked(self, src_gc, dst_gc, value_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, True),
                                 xcb.VoidCookie())

    def CopyGC(self, src_gc, dst_gc, value_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, False),
                                 xcb.VoidCookie())

    def SetDashesChecked(self, gc, dash_offset, dashes_len, dashes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, True),
                                 xcb.VoidCookie())

    def SetDashes(self, gc, dash_offset, dashes_len, dashes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, False),
                                 xcb.VoidCookie())

    def SetClipRectanglesChecked(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, True),
                                 xcb.VoidCookie())

    def SetClipRectangles(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, False),
                                 xcb.VoidCookie())

    def FreeGCChecked(self, gc):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, True),
                                 xcb.VoidCookie())

    def FreeGC(self, gc):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, False),
                                 xcb.VoidCookie())

    def ClearAreaChecked(self, exposures, window, x, y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, True),
                                 xcb.VoidCookie())

    def ClearArea(self, exposures, window, x, y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, False),
                                 xcb.VoidCookie())

    def CopyAreaChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, True),
                                 xcb.VoidCookie())

    def CopyArea(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, False),
                                 xcb.VoidCookie())

    def CopyPlaneChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, True),
                                 xcb.VoidCookie())

    def CopyPlane(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, False),
                                 xcb.VoidCookie())

    def PolyPointChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, True),
                                 xcb.VoidCookie())

    def PolyPoint(self, coordinate_mode, drawable, gc, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, False),
                                 xcb.VoidCookie())

    def PolyLineChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, True),
                                 xcb.VoidCookie())

    def PolyLine(self, coordinate_mode, drawable, gc, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, False),
                                 xcb.VoidCookie())

    def PolySegmentChecked(self, drawable, gc, segments_len, segments):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, True),
                                 xcb.VoidCookie())

    def PolySegment(self, drawable, gc, segments_len, segments):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, False),
                                 xcb.VoidCookie())

    def PolyRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, True),
                                 xcb.VoidCookie())

    def PolyRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, False),
                                 xcb.VoidCookie())

    def PolyArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, True),
                                 xcb.VoidCookie())

    def PolyArc(self, drawable, gc, arcs_len, arcs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, False),
                                 xcb.VoidCookie())

    def FillPolyChecked(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, True),
                                 xcb.VoidCookie())

    def FillPoly(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, False),
                                 xcb.VoidCookie())

    def PolyFillRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, True),
                                 xcb.VoidCookie())

    def PolyFillRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, False),
                                 xcb.VoidCookie())

    def PolyFillArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, True),
                                 xcb.VoidCookie())

    def PolyFillArc(self, drawable, gc, arcs_len, arcs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, False),
                                 xcb.VoidCookie())

    def PutImageChecked(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, True),
                                 xcb.VoidCookie())

    def PutImage(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, False),
                                 xcb.VoidCookie())

    def GetImage(self, format, drawable, x, y, width, height, plane_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, True),
                                 GetImageCookie(),
                                 GetImageReply)

    def GetImageUnchecked(self, format, drawable, x, y, width, height, plane_mask):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, False),
                                 GetImageCookie(),
                                 GetImageReply)

    def PolyText8Checked(self, drawable, gc, x, y, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, True),
                                 xcb.VoidCookie())

    def PolyText8(self, drawable, gc, x, y, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, False),
                                 xcb.VoidCookie())

    def PolyText16Checked(self, drawable, gc, x, y, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, True),
                                 xcb.VoidCookie())

    def PolyText16(self, drawable, gc, x, y, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, False),
                                 xcb.VoidCookie())

    def ImageText8Checked(self, string_len, drawable, gc, x, y, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, True),
                                 xcb.VoidCookie())

    def ImageText8(self, string_len, drawable, gc, x, y, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, False),
                                 xcb.VoidCookie())

    def ImageText16Checked(self, string_len, drawable, gc, x, y, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, True),
                                 xcb.VoidCookie())

    def ImageText16(self, string_len, drawable, gc, x, y, string):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, False),
                                 xcb.VoidCookie())

    def CreateColormapChecked(self, alloc, mid, window, visual):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, True),
                                 xcb.VoidCookie())

    def CreateColormap(self, alloc, mid, window, visual):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, False),
                                 xcb.VoidCookie())

    def FreeColormapChecked(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, True),
                                 xcb.VoidCookie())

    def FreeColormap(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, False),
                                 xcb.VoidCookie())

    def CopyColormapAndFreeChecked(self, mid, src_cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, True),
                                 xcb.VoidCookie())

    def CopyColormapAndFree(self, mid, src_cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, False),
                                 xcb.VoidCookie())

    def InstallColormapChecked(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, True),
                                 xcb.VoidCookie())

    def InstallColormap(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, False),
                                 xcb.VoidCookie())

    def UninstallColormapChecked(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, True),
                                 xcb.VoidCookie())

    def UninstallColormap(self, cmap):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, False),
                                 xcb.VoidCookie())

    def ListInstalledColormaps(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, True),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def ListInstalledColormapsUnchecked(self, window):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, False),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def AllocColor(self, cmap, red, green, blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, True),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocColorUnchecked(self, cmap, red, green, blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, False),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocNamedColor(self, cmap, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, True),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocNamedColorUnchecked(self, cmap, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, False),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocColorCells(self, contiguous, cmap, colors, planes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, True),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorCellsUnchecked(self, contiguous, cmap, colors, planes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, False),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorPlanes(self, contiguous, cmap, colors, reds, greens, blues):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, True),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def AllocColorPlanesUnchecked(self, contiguous, cmap, colors, reds, greens, blues):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, False),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def FreeColorsChecked(self, cmap, plane_mask, pixels_len, pixels):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, True),
                                 xcb.VoidCookie())

    def FreeColors(self, cmap, plane_mask, pixels_len, pixels):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, False),
                                 xcb.VoidCookie())

    def StoreColorsChecked(self, cmap, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, True),
                                 xcb.VoidCookie())

    def StoreColors(self, cmap, items_len, items):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, False),
                                 xcb.VoidCookie())

    def StoreNamedColorChecked(self, flags, cmap, pixel, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, True),
                                 xcb.VoidCookie())

    def StoreNamedColor(self, flags, cmap, pixel, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, False),
                                 xcb.VoidCookie())

    def QueryColors(self, cmap, pixels_len, pixels):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        buf.write(str(buffer(array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, True),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def QueryColorsUnchecked(self, cmap, pixels_len, pixels):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cmap))
        buf.write(str(buffer(array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, False),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def LookupColor(self, cmap, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, True),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def LookupColorUnchecked(self, cmap, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, False),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def CreateCursorChecked(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, True),
                                 xcb.VoidCookie())

    def CreateCursor(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, False),
                                 xcb.VoidCookie())

    def CreateGlyphCursorChecked(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, True),
                                 xcb.VoidCookie())

    def CreateGlyphCursor(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, False),
                                 xcb.VoidCookie())

    def FreeCursorChecked(self, cursor):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, True),
                                 xcb.VoidCookie())

    def FreeCursor(self, cursor):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, False),
                                 xcb.VoidCookie())

    def RecolorCursorChecked(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, True),
                                 xcb.VoidCookie())

    def RecolorCursor(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, False),
                                 xcb.VoidCookie())

    def QueryBestSize(self, _class, drawable, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, True),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryBestSizeUnchecked(self, _class, drawable, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, False),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryExtension(self, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xH2x', name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, True),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def QueryExtensionUnchecked(self, name_len, name):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xH2x', name_len))
        buf.write(str(buffer(array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, False),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def ListExtensions(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, True),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ListExtensionsUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, False),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ChangeKeyboardMappingChecked(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardMapping(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardMapping(self, first_keycode, count):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, True),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def GetKeyboardMappingUnchecked(self, first_keycode, count):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, False),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def ChangeKeyboardControlChecked(self, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardControl(self, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardControl(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, True),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def GetKeyboardControlUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, False),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def BellChecked(self, percent):
        buf = cStringIO.StringIO()
        buf.write(pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, True),
                                 xcb.VoidCookie())

    def Bell(self, percent):
        buf = cStringIO.StringIO()
        buf.write(pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, False),
                                 xcb.VoidCookie())

    def ChangePointerControlChecked(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, True),
                                 xcb.VoidCookie())

    def ChangePointerControl(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, False),
                                 xcb.VoidCookie())

    def GetPointerControl(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, True),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def GetPointerControlUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, False),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def SetScreenSaverChecked(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, True),
                                 xcb.VoidCookie())

    def SetScreenSaver(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, False),
                                 xcb.VoidCookie())

    def GetScreenSaver(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, True),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def GetScreenSaverUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, False),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def ChangeHostsChecked(self, mode, family, address_len, address):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, True),
                                 xcb.VoidCookie())

    def ChangeHosts(self, mode, family, address_len, address):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, False),
                                 xcb.VoidCookie())

    def ListHosts(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, True),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def ListHostsUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, False),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def SetAccessControlChecked(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, True),
                                 xcb.VoidCookie())

    def SetAccessControl(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, False),
                                 xcb.VoidCookie())

    def SetCloseDownModeChecked(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, True),
                                 xcb.VoidCookie())

    def SetCloseDownMode(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, False),
                                 xcb.VoidCookie())

    def KillClientChecked(self, resource):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, True),
                                 xcb.VoidCookie())

    def KillClient(self, resource):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, False),
                                 xcb.VoidCookie())

    def RotatePropertiesChecked(self, window, atoms_len, delta, atoms):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, True),
                                 xcb.VoidCookie())

    def RotateProperties(self, window, atoms_len, delta, atoms):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, False),
                                 xcb.VoidCookie())

    def ForceScreenSaverChecked(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, True),
                                 xcb.VoidCookie())

    def ForceScreenSaver(self, mode):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, False),
                                 xcb.VoidCookie())

    def SetPointerMapping(self, map_len, map):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', map_len))
        buf.write(str(buffer(array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, True),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def SetPointerMappingUnchecked(self, map_len, map):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', map_len))
        buf.write(str(buffer(array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, False),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def GetPointerMapping(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, True),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def GetPointerMappingUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, False),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def SetModifierMapping(self, keycodes_per_modifier, keycodes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, True),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def SetModifierMappingUnchecked(self, keycodes_per_modifier, keycodes):
        buf = cStringIO.StringIO()
        buf.write(pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, False),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def GetModifierMapping(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, True),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def GetModifierMappingUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, False),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def NoOperationChecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, True),
                                 xcb.VoidCookie())

    def NoOperation(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, False),
                                 xcb.VoidCookie())

* Thu 27 Mar 2014 04:15:24 AM JST
import cStringIO
* Thu 27 Mar 2014 04:17:40 AM JST
_events = {
    2 : KeyPressEvent,
    3 : KeyReleaseEvent,
    4 : ButtonPressEvent,
    5 : ButtonReleaseEvent,
    6 : MotionNotifyEvent,
    7 : EnterNotifyEvent,
    8 : LeaveNotifyEvent,
    9 : FocusInEvent,
    10 : FocusOutEvent,
    11 : KeymapNotifyEvent,
    12 : ExposeEvent,
    13 : GraphicsExposureEvent,
    14 : NoExposureEvent,
    15 : VisibilityNotifyEvent,
    16 : CreateNotifyEvent,
    17 : DestroyNotifyEvent,
    18 : UnmapNotifyEvent,
    19 : MapNotifyEvent,
    20 : MapRequestEvent,
    21 : ReparentNotifyEvent,
    22 : ConfigureNotifyEvent,
    23 : ConfigureRequestEvent,
    24 : GravityNotifyEvent,
    25 : ResizeRequestEvent,
    26 : CirculateNotifyEvent,
    27 : CirculateRequestEvent,
    28 : PropertyNotifyEvent,
    29 : SelectionClearEvent,
    30 : SelectionRequestEvent,
    31 : SelectionNotifyEvent,
    32 : ColormapNotifyEvent,
    33 : ClientMessageEvent,
    34 : MappingNotifyEvent,
}


* Thu 27 Mar 2014 04:18:14 AM JST
EVENTS
* Thu 27 Mar 2014 04:19:30 AM JST
_errors = {
    1 : (RequestError, BadRequest),
    2 : (ValueError, BadValue),
    3 : (WindowError, BadWindow),
    4 : (PixmapError, BadPixmap),
    5 : (AtomError, BadAtom),
    6 : (CursorError, BadCursor),
    7 : (FontError, BadFont),
    8 : (MatchError, BadMatch),
    9 : (DrawableError, BadDrawable),
    10 : (AccessError, BadAccess),
    11 : (AllocError, BadAlloc),
    12 : (ColormapError, BadColormap),
    13 : (GContextError, BadGContext),
    14 : (IDChoiceError, BadIDChoice),
    15 : (NameError, BadName),
    16 : (LengthError, BadLength),
    17 : (ImplementationError, BadImplementation),
}

* Thu 27 Mar 2014 04:21:17 AM JST
event
* Thu 27 Mar 2014 04:21:22 AM JST

* Thu 27 Mar 2014 04:21:24 AM JST
event
* Thu 27 Mar 2014 04:21:36 AM JST

* Thu 27 Mar 2014 04:21:39 AM JST
error
* Thu 27 Mar 2014 04:21:43 AM JST

* Thu 27 Mar 2014 04:21:45 AM JST
define
* Thu 27 Mar 2014 04:21:52 AM JST

* Thu 27 Mar 2014 04:21:57 AM JST
cooki
* Thu 27 Mar 2014 04:22:58 AM JST
from array import array
* Thu 27 Mar 2014 04:25:03 AM JST
xcb._add_core(xprotoExtension, Setup, _events, _errors)
* Thu 27 Mar 2014 04:27:19 AM JST
xcb
* Thu 27 Mar 2014 04:31:22 AM JST
    def GetAtomName(self, atom):
        buf = StringIO()
        buf.write(pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, True),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)


* Thu 27 Mar 2014 04:31:29 AM JST
atom
* Thu 27 Mar 2014 04:31:32 AM JST
atom
* Thu 27 Mar 2014 05:17:39 AM JST

* Thu 27 Mar 2014 05:17:41 AM JST
pack, 
* Thu 27 Mar 2014 05:17:43 AM JST
, unpack_from
* Thu 27 Mar 2014 05:19:03 AM JST

* Thu 27 Mar 2014 05:19:03 AM JST

* Thu 27 Mar 2014 05:19:03 AM JST
from struct import unpack_from as _unpack_from

* Thu 27 Mar 2014 05:21:34 AM JST
xcb2 
* Thu 27 Mar 2014 05:21:34 AM JST
from xcb2 
* Thu 27 Mar 2014 05:22:20 AM JST

* Thu 27 Mar 2014 05:22:20 AM JST

* Thu 27 Mar 2014 05:22:20 AM JST
_cgitb.enable(format='text')

* Thu 27 Mar 2014 05:22:39 AM JST
_ERRORS
* Thu 27 Mar 2014 05:22:49 AM JST

* Thu 27 Mar 2014 05:22:49 AM JST

* Thu 27 Mar 2014 05:22:49 AM JST
_cgitb.enable(format='text')

* Thu 27 Mar 2014 05:24:53 AM JST

* Thu 27 Mar 2014 05:24:53 AM JST

* Thu 27 Mar 2014 05:24:53 AM JST
__all__ = [ '' ]

* Thu 27 Mar 2014 05:26:14 AM JST
import xcb2, xcb2.xproto
* Thu 27 Mar 2014 05:26:24 AM JST
import xcb2, xcb2.xproto
* Thu 27 Mar 2014 05:28:24 AM JST

* Thu 27 Mar 2014 05:28:25 AM JST

* Thu 27 Mar 2014 05:28:25 AM JST
_cgitb.enable(format='text')

* Thu 27 Mar 2014 05:28:36 AM JST

* Thu 27 Mar 2014 05:28:36 AM JST

* Thu 27 Mar 2014 05:28:37 AM JST
__version__ = '0.1.0'

* Thu 27 Mar 2014 05:29:41 AM JST

* Thu 27 Mar 2014 05:29:41 AM JST

* Thu 27 Mar 2014 05:29:41 AM JST
__version__ = '0.1.0'

* Thu 27 Mar 2014 05:29:52 AM JST

* Thu 27 Mar 2014 05:29:53 AM JST

* Thu 27 Mar 2014 05:29:53 AM JST
__version__ = '0.1.0'

* Thu 27 Mar 2014 05:30:28 AM JST
pack, 
* Thu 27 Mar 2014 05:41:13 AM JST
cc.core
* Thu 27 Mar 2014 05:59:53 AM JST
/root/work/xlibcpp/pyx/xcb/ooxcb-1.2/ooxcb
* Thu 27 Mar 2014 06:00:45 AM JST
import ooxcb.protocol.xproto
* Thu 27 Mar 2014 06:04:43 AM JST
AtomDict
* Thu 27 Mar 2014 06:07:21 AM JST
Connection
* Thu 27 Mar 2014 06:15:56 AM JST
connection
* Thu 27 Mar 2014 06:23:30 AM JST
Any
* Thu 27 Mar 2014 06:27:12 AM JST
    2 : KeyPressEvent,
    3 : KeyReleaseEvent,
    4 : ButtonPressEvent,
    5 : ButtonReleaseEvent,
    6 : MotionNotifyEvent,
    7 : EnterNotifyEvent,
    8 : LeaveNotifyEvent,
    9 : FocusInEvent,
    10 : FocusOutEvent,
    11 : KeymapNotifyEvent,
    12 : ExposeEvent,
    13 : GraphicsExposureEvent,
    14 : NoExposureEvent,
    15 : VisibilityNotifyEvent,
    16 : CreateNotifyEvent,
    17 : DestroyNotifyEvent,
    18 : UnmapNotifyEvent,
    19 : MapNotifyEvent,
    20 : MapRequestEvent,
    21 : ReparentNotifyEvent,
    22 : ConfigureNotifyEvent,
    23 : ConfigureRequestEvent,
    24 : GravityNotifyEvent,
    25 : ResizeRequestEvent,
    26 : CirculateNotifyEvent,
    27 : CirculateRequestEvent,
    28 : PropertyNotifyEvent,
    29 : SelectionClearEvent,
    30 : SelectionRequestEvent,
    31 : SelectionNotifyEvent,
    32 : ColormapNotifyEvent,
    33 : ClientMessageEvent,
    34 : MappingNotifyEvent,

* Thu 27 Mar 2014 06:29:14 AM JST
MappingNotifyEvent
* Thu 27 Mar 2014 06:29:16 AM JST
ClientMessageEvent
* Thu 27 Mar 2014 06:29:16 AM JST
ColormapNotifyEvent
* Thu 27 Mar 2014 06:29:16 AM JST
SelectionNotifyEvent
* Thu 27 Mar 2014 06:29:16 AM JST
SelectionRequestEvent
* Thu 27 Mar 2014 06:29:16 AM JST
SelectionClearEvent
* Thu 27 Mar 2014 06:29:16 AM JST
PropertyNotifyEvent
* Thu 27 Mar 2014 06:29:16 AM JST
CirculateRequestEvent
* Thu 27 Mar 2014 06:29:17 AM JST
CirculateNotifyEvent
* Thu 27 Mar 2014 06:29:17 AM JST
ResizeRequestEvent
* Thu 27 Mar 2014 06:29:17 AM JST
GravityNotifyEvent
* Thu 27 Mar 2014 06:29:17 AM JST
ConfigureRequestEvent
* Thu 27 Mar 2014 06:29:17 AM JST
ConfigureNotifyEvent
* Thu 27 Mar 2014 06:29:17 AM JST
ReparentNotifyEvent
* Thu 27 Mar 2014 06:29:17 AM JST
MapRequestEvent
* Thu 27 Mar 2014 06:29:17 AM JST
MapNotifyEvent
* Thu 27 Mar 2014 06:29:17 AM JST
UnmapNotifyEvent
* Thu 27 Mar 2014 06:29:18 AM JST
DestroyNotifyEvent
* Thu 27 Mar 2014 06:29:18 AM JST
CreateNotifyEvent
* Thu 27 Mar 2014 06:29:18 AM JST
VisibilityNotifyEvent
* Thu 27 Mar 2014 06:29:18 AM JST
NoExposureEvent
* Thu 27 Mar 2014 06:29:18 AM JST
GraphicsExposureEvent
* Thu 27 Mar 2014 06:29:18 AM JST
ExposeEvent
* Thu 27 Mar 2014 06:29:18 AM JST
KeymapNotifyEvent
* Thu 27 Mar 2014 06:29:18 AM JST
FocusOutEvent
* Thu 27 Mar 2014 06:29:18 AM JST
FocusInEvent
* Thu 27 Mar 2014 06:29:19 AM JST
LeaveNotifyEvent
* Thu 27 Mar 2014 06:29:19 AM JST
EnterNotifyEvent
* Thu 27 Mar 2014 06:29:19 AM JST
MotionNotifyEvent
* Thu 27 Mar 2014 06:29:19 AM JST
ButtonReleaseEvent
* Thu 27 Mar 2014 06:29:19 AM JST
ButtonPressEvent
* Thu 27 Mar 2014 06:29:19 AM JST
KeyReleaseEvent
* Thu 27 Mar 2014 06:29:19 AM JST
KeyPressEvent
* Thu 27 Mar 2014 06:29:29 AM JST
34
* Thu 27 Mar 2014 06:29:29 AM JST
33
* Thu 27 Mar 2014 06:29:29 AM JST
32
* Thu 27 Mar 2014 06:29:29 AM JST
31
* Thu 27 Mar 2014 06:29:29 AM JST
30
* Thu 27 Mar 2014 06:29:29 AM JST
29
* Thu 27 Mar 2014 06:29:29 AM JST
28
* Thu 27 Mar 2014 06:29:29 AM JST
27
* Thu 27 Mar 2014 06:29:29 AM JST
26
* Thu 27 Mar 2014 06:29:30 AM JST
25
* Thu 27 Mar 2014 06:29:30 AM JST
24
* Thu 27 Mar 2014 06:29:30 AM JST
23
* Thu 27 Mar 2014 06:29:30 AM JST
22
* Thu 27 Mar 2014 06:29:30 AM JST
21
* Thu 27 Mar 2014 06:29:30 AM JST
20
* Thu 27 Mar 2014 06:29:30 AM JST
19
* Thu 27 Mar 2014 06:29:30 AM JST
18
* Thu 27 Mar 2014 06:29:30 AM JST
17
* Thu 27 Mar 2014 06:29:30 AM JST
16
* Thu 27 Mar 2014 06:29:31 AM JST
15
* Thu 27 Mar 2014 06:29:31 AM JST
14
* Thu 27 Mar 2014 06:29:31 AM JST
13
* Thu 27 Mar 2014 06:29:31 AM JST
12
* Thu 27 Mar 2014 06:29:31 AM JST
11
* Thu 27 Mar 2014 06:29:31 AM JST
10
* Thu 27 Mar 2014 06:29:31 AM JST
9
* Thu 27 Mar 2014 06:29:31 AM JST
8
* Thu 27 Mar 2014 06:29:31 AM JST
7
* Thu 27 Mar 2014 06:29:32 AM JST
6
* Thu 27 Mar 2014 06:29:32 AM JST
5
* Thu 27 Mar 2014 06:29:32 AM JST
4
* Thu 27 Mar 2014 06:29:32 AM JST
3
* Thu 27 Mar 2014 06:29:32 AM JST
2
* Thu 27 Mar 2014 06:38:04 AM JST
StandardError
* Thu 27 Mar 2014 06:38:19 AM JST
buf = _StringIO()
* Thu 27 Mar 2014 06:38:42 AM JST
propagate, destination, event_mask, event
* Thu 27 Mar 2014 06:38:48 AM JST
event
* Thu 27 Mar 2014 06:39:03 AM JST
buf.write(_pack('=xB2xII', propagate, destination, event_mask))
* Thu 27 Mar 2014 06:41:26 AM JST
'2BH4I5HBx'
* Thu 27 Mar 2014 06:44:48 AM JST
time, root, window, child,
* Thu 27 Mar 2014 06:44:58 AM JST
root_x, root_y, event_x, event_y, state, samescreen
* Thu 27 Mar 2014 06:48:57 AM JST
xcb
* Thu 27 Mar 2014 06:50:11 AM JST
    def KeyPress(self, propagate, destination, event_mask,
                 detail, sequence_number, time, root, window, child,
                 root_x, root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY

        KeyPress()

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(_pack('2BH4I5HBx', EventCode.KeyPress,
                        detail, sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen))
        return self.send_request(Request(buf.getvalue(), 25, True, False),
                                 VoidCookie())

* Thu 27 Mar 2014 06:51:29 AM JST
False
* Thu 27 Mar 2014 06:52:23 AM JST
from
* Thu 27 Mar 2014 06:53:51 AM JST
54525974
* Thu 27 Mar 2014 06:55:49 AM JST
    def KeyPress(self, propagate, destination, event_mask,
                 detail, sequence_number, time, root, window, child,
                 root_x, root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY

        KeyPress()

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(_pack('2BH4I5HBx', EventCode.KeyPress,
                        detail, sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen))
        return self.send_request(Request(buf.getvalue(), 25, True, False),
                                 VoidCookie())

* Thu 27 Mar 2014 06:56:08 AM JST
KeyPress
* Thu 27 Mar 2014 06:56:21 AM JST
    def KeyPressChecked(self, propagate, destination, event_mask,
                        detail, sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY

        KeyPress()

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(_pack('2BH4I5HBx', EventCode.KeyPress,
                        detail, sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen))
        return self.send_request(Request(buf.getvalue(), 25, True, True),
                                 VoidCookie())

* Thu 27 Mar 2014 06:56:42 AM JST
KeyRelease
* Thu 27 Mar 2014 06:59:45 AM JST
propagate, destination, event_mask,
                 detail, sequence_number, time, root, window, child,
                 root_x, root_y, event_x, event_y, state, samescreen
* Thu 27 Mar 2014 07:00:10 AM JST
                          
* Thu 27 Mar 2014 07:00:21 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(_pack('2BH4I5HBx', EventCode.KeyPress,
                        detail, sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen))
        return self.send_request(Request(buf.getvalue(), 25, True, False),
                                 VoidCookie())

* Thu 27 Mar 2014 07:01:11 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(_pack('2BH4I5HBx', EventCode.KeyPress,
                        detail, sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen))
        return self.send_request(Request(buf.getvalue(), 25, True, False),
                                 VoidCookie())

* Thu 27 Mar 2014 07:01:58 AM JST
propagate, destination, event_mask,
                 detail, sequence_number, time, root, window, child,
                 root_x, root_y, event_x, event_y, state, samescreen
* Thu 27 Mar 2014 07:02:46 AM JST
Key
* Thu 27 Mar 2014 07:03:01 AM JST
        return self._KeyButtonPointer(
            propagate, destination, event_mask, EventCode.KeyPress,
            detail, sequence_number, time, root, window, child,
            root_x, root_y, event_x, event_y, state, samescreen, False)

* Thu 27 Mar 2014 07:03:06 AM JST
False
* Thu 27 Mar 2014 07:03:22 AM JST
        return self._KeyButtonPointer(
            propagate, destination, event_mask, EventCode.KeyPress,
            detail, sequence_number, time, root, window, child,
            root_x, root_y, event_x, event_y, state, samescreen, True)

* Thu 27 Mar 2014 07:03:29 AM JST
KeyPress
* Thu 27 Mar 2014 07:03:36 AM JST
KeyPress
* Thu 27 Mar 2014 07:03:54 AM JST
        return self._KeyButtonPointer(
            propagate, destination, event_mask, EventCode.ButtonPress,
            detail, sequence_number, time, root, window, child,
            root_x, root_y, event_x, event_y, state, samescreen, True)

* Thu 27 Mar 2014 07:03:57 AM JST
ButtonPress
* Thu 27 Mar 2014 07:04:36 AM JST
True
* Thu 27 Mar 2014 07:05:05 AM JST
KeyRelease
* Thu 27 Mar 2014 07:05:09 AM JST
False
* Thu 27 Mar 2014 07:05:12 AM JST
True
* Thu 27 Mar 2014 07:05:20 AM JST
ButtonReleas
* Thu 27 Mar 2014 07:06:24 AM JST
propagate, destination, event_mask,
                          detail, sequence_number, time, root, window, child,
                          root_x, root_y, event_x, event_y, state, samescreen
* Thu 27 Mar 2014 07:06:39 AM JST
        return self._KeyButtonPointer(
            propagate, destination, event_mask, EventCode.KeyRelease,
            detail, sequence_number, time, root, window, child,
            root_x, root_y, event_x, event_y, state, samescreen, True)

* Thu 27 Mar 2014 07:06:42 AM JST
True
* Thu 27 Mar 2014 07:06:52 AM JST
KeyRelease
* Thu 27 Mar 2014 07:06:56 AM JST
Key
* Thu 27 Mar 2014 07:07:11 AM JST
    def ButtonPress(self, propagate, destination, event_mask,
                          detail, sequence_number, time, root, window, child,
                          root_x, root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY
        
        ButtonPress()
        
        @Return:
        """
        return self._KeyButtonPointer(
            propagate, destination, event_mask, EventCode.ButtonPress,
            detail, sequence_number, time, root, window, child,
            root_x, root_y, event_x, event_y, state, samescreen, False)

* Thu 27 Mar 2014 07:07:23 AM JST
False
* Thu 27 Mar 2014 07:07:35 AM JST
    def ButtonPress(self, propagate, destination, event_mask,
                          detail, sequence_number, time, root, window, child,
                          root_x, root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY
        
        ButtonPress()
        
        @Return:
        """
        return self._KeyButtonPointer(
            propagate, destination, event_mask, EventCode.ButtonPress,
            detail, sequence_number, time, root, window, child,
            root_x, root_y, event_x, event_y, state, samescreen, False)
        
    def ButtonPressChecked(self, propagate, destination, event_mask,
                           detail, sequence_number, time, root, window, child,
                           root_x, root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY
        
        ButtonPress()
        
        @Return:
        """
        return self._KeyButtonPointer(
            propagate, destination, event_mask, EventCode.ButtonPress,
            detail, sequence_number, time, root, window, child,
            root_x, root_y, event_x, event_y, state, samescreen, True)

* Thu 27 Mar 2014 07:07:46 AM JST
                        
* Thu 27 Mar 2014 07:07:48 AM JST
                      
* Thu 27 Mar 2014 07:07:52 AM JST
ButtonPress
* Thu 27 Mar 2014 07:08:08 AM JST
                       
* Thu 27 Mar 2014 07:08:10 AM JST
                         
* Thu 27 Mar 2014 07:08:47 AM JST
ButtonPress
* Thu 27 Mar 2014 07:10:33 AM JST
propagate, destination, event_mask, detail,
                             sequence_number, time, root, window, child, root_x,
                             root_y, event_x, event_y, state, samescreen
* Thu 27 Mar 2014 07:10:39 AM JST
                     
* Thu 27 Mar 2014 07:10:45 AM JST
        return self._KeyButtonPointer(
            propagate, destination, event_mask, EventCode.ButtonRelease,
            detail, sequence_number, time, root, window, child,
            root_x, root_y, event_x, event_y, state, samescreen, True)

* Thu 27 Mar 2014 07:10:49 AM JST
True
* Thu 27 Mar 2014 07:10:58 AM JST
ButtonRelease
* Thu 27 Mar 2014 07:11:12 AM JST
    def MotionNotify(self, propagate, destination, event_mask, detail,
                     sequence_number, time, root, window, child, root_x,
                     root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY
        
        MotionNotify()
        
        @Return:
        """
        return self._KeyButtonPointer(
            propagate, destination, event_mask, EventCode.MotionNotify,
            detail, sequence_number, time, root, window, child,
            root_x, root_y, event_x, event_y, state, samescreen, False)

* Thu 27 Mar 2014 07:11:18 AM JST
False
* Thu 27 Mar 2014 07:11:26 AM JST
                     
* Thu 27 Mar 2014 07:13:08 AM JST
    def EnterNotify(self, ):
        r"""SUMMARY
        
        EnterNotify()
        
        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

* Thu 27 Mar 2014 07:13:16 AM JST
EnterNotify
* Thu 27 Mar 2014 07:13:26 AM JST
$1
* Thu 27 Mar 2014 07:14:44 AM JST
$1
* Thu 27 Mar 2014 07:15:48 AM JST
${1:}
* Thu 27 Mar 2014 07:19:07 AM JST
VisibilityNotify
* Thu 27 Mar 2014 07:19:16 AM JST
CreateNotify
* Thu 27 Mar 2014 07:19:45 AM JST
DestroyNotify
* Thu 27 Mar 2014 07:20:17 AM JST
    def CreateNotify(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def CreateNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

* Thu 27 Mar 2014 07:20:52 AM JST
DestroyNotify
* Thu 27 Mar 2014 07:21:06 AM JST
UnmapNotify
* Thu 27 Mar 2014 07:21:16 AM JST
MapNotify
* Thu 27 Mar 2014 07:21:25 AM JST
MapRequest
* Thu 27 Mar 2014 07:21:35 AM JST
ReparentNotify
* Thu 27 Mar 2014 07:21:45 AM JST
ConfigureNotify
* Thu 27 Mar 2014 07:21:55 AM JST
ConfigureRequest
* Thu 27 Mar 2014 07:22:04 AM JST
GravityNotify
* Thu 27 Mar 2014 07:22:13 AM JST
ResizeRequest
* Thu 27 Mar 2014 07:22:22 AM JST
CirculateNotify
* Thu 27 Mar 2014 07:22:31 AM JST
CirculateRequest
* Thu 27 Mar 2014 07:22:40 AM JST
PropertyNotify
* Thu 27 Mar 2014 07:22:50 AM JST
SelectionClear
* Thu 27 Mar 2014 07:22:59 AM JST
SelectionRequest
* Thu 27 Mar 2014 07:23:12 AM JST
SelectionNotify
* Thu 27 Mar 2014 07:23:20 AM JST
ColormapNotify
* Thu 27 Mar 2014 07:23:29 AM JST
ClientMessage
* Thu 27 Mar 2014 07:23:37 AM JST
MappingNotify
* Thu 27 Mar 2014 07:36:42 AM JST
sendevent_checked
* Thu 27 Mar 2014 07:39:06 AM JST
checked
* Thu 27 Mar 2014 07:39:26 AM JST
propagate, destination, event_mask
* Thu 27 Mar 2014 07:40:15 AM JST
    def _KeyButtonPointer(self, propagate, destination, event_mask, eventcode,
                          detail, sequence_number, time, root, window, child,
                          root_x, root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY

        _KeyButtonPointer()

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(_pack('2BH4I5HBx', eventcode,
                        detail, sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen))
        return self.SendEvent(
            propagate, destination, event_mask, buf.getvalue())

* Thu 27 Mar 2014 07:40:44 AM JST
            
* Thu 27 Mar 2014 07:40:49 AM JST
    
* Thu 27 Mar 2014 07:41:02 AM JST

* Thu 27 Mar 2014 07:41:02 AM JST

* Thu 27 Mar 2014 07:41:02 AM JST
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))

* Thu 27 Mar 2014 07:41:04 AM JST

* Thu 27 Mar 2014 07:41:04 AM JST

* Thu 27 Mar 2014 07:41:05 AM JST
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))

* Thu 27 Mar 2014 07:41:48 AM JST
False
* Thu 27 Mar 2014 07:42:25 AM JST
Checked
* Thu 27 Mar 2014 07:42:30 AM JST
True
* Thu 27 Mar 2014 07:42:44 AM JST
False
* Thu 27 Mar 2014 07:43:09 AM JST
True
* Thu 27 Mar 2014 07:44:10 AM JST
from
* Thu 27 Mar 2014 07:44:44 AM JST
import
* Thu 27 Mar 2014 07:45:06 AM JST
sendevent.SendEvent()
* Thu 27 Mar 2014 07:45:51 AM JST
54525974
* Thu 27 Mar 2014 07:51:33 AM JST
extension
* Thu 27 Mar 2014 07:52:27 AM JST
    @property
    def core(self, ):
        r"""SUMMARY

        core()

        @Return:
        """
        return self.connection.core


* Thu 27 Mar 2014 07:53:55 AM JST
    @property
    def SendEvent(self, ):
        r"""SUMMARY

        sendevent()

        @Return:
        """
        return self.core.SendEvent

    @property
    def SendEventChecked(self, ):
        r"""SUMMARY

        SendEventChecked()

        @Return:
        """
        return self.core.SendEventChecked


* Thu 27 Mar 2014 07:54:06 AM JST
SendEventAbstract
* Thu 27 Mar 2014 07:54:43 AM JST
s.KeyPress(True, 54525974, 0, 10, 0, 0, 482, 54525974, 0, 0,0,0,0, 0, 1)
* Thu 27 Mar 2014 07:54:54 AM JST
s=sendevent.SendEvent(c)
* Thu 27 Mar 2014 07:54:58 AM JST
c=xcb2.connect()
* Thu 27 Mar 2014 07:55:02 AM JST
from xcb2 import sendevent
* Thu 27 Mar 2014 07:55:11 AM JST
from xcb2 import sendevent
c=xcb2.connect()
s=sendevent.SendEvent(c)
s.KeyPress(True, 54525974, 0, 10, 0, 0, 482, 54525974, 0, 0,0,0,0, 0, 1)
* Thu 27 Mar 2014 07:55:25 AM JST
xc
* Thu 27 Mar 2014 07:55:25 AM JST
from xc
* Thu 27 Mar 2014 07:55:44 AM JST
s.KeyPress(True, 54525974, 0, 10, 0, 0, 482, 54525974, 0, 0,0,0,0, 0, 1)
* Thu 27 Mar 2014 07:56:16 AM JST
54525974
* Thu 27 Mar 2014 07:56:28 AM JST
True
* Thu 27 Mar 2014 07:56:36 AM JST
54525974
* Thu 27 Mar 2014 08:01:01 AM JST
Connection
* Thu 27 Mar 2014 08:14:15 AM JST
class SingletonConnectionMeta(type):
    r"""Singleton Connection by display name."""

    _instances = {}

    def __call__(cls, *args, **kwargs):
        if 'display' in kwargs:
            key = kwargs['display']
        else:
            key = ''
        if cls not in cls._instances:
            cls._instances[cls] = {}
        if key not in cls._instances[cls]:
            cls._instances[cls][key] = (super(SingletonConnectionMeta, cls)
                                        .__call__(*args, **kwargs))
        return cls._instances[cls][key]


class SingleConnection(object):
    r"""Singleton Connection by display name.
    """
    __metaclass__ = SingletonConnectionMeta

    def __init__(self, *args, **kwargs):
        r"""
        """
        self._xcb_connection = xcb.connect(*args, **kwargs)

    @staticmethod
    def get_instance(*args, **kwargs):
        r"""SUMMARY

        get_connection()

        @Return:
        """
        return SingleConnection(*args, **kwargs)._xcb_connection

* Thu 27 Mar 2014 08:21:38 AM JST

* Thu 27 Mar 2014 08:21:38 AM JST

* Thu 27 Mar 2014 08:21:38 AM JST
        self._*args = *args

* Thu 27 Mar 2014 08:21:38 AM JST
        self._*args = *args

* Thu 27 Mar 2014 08:21:38 AM JST
        self._*args = *args
        self._**kwargs = **kwargs

* Thu 27 Mar 2014 08:21:44 AM JST
__metaclass__ = SingletonConnectionMeta
* Thu 27 Mar 2014 08:22:35 AM JST
self._connection = xcb2.connect(*args, **kwargs)
* Thu 27 Mar 2014 08:24:24 AM JST
    @staticmethod
    def get_instance(*args, **kwargs):
        r"""SUMMARY

        get_instance()

        @Return:
        """
        return Connection(*args, **kwargs)

* Thu 27 Mar 2014 08:32:51 AM JST
SendEvent
* Thu 27 Mar 2014 08:35:15 AM JST
xcb2
* Thu 27 Mar 2014 08:35:15 AM JST
from xcb2
* Thu 27 Mar 2014 08:35:52 AM JST
import xcb2, xcb2.xproto
from xcb2.xconnection.connection import Connection
from xcb2 import sendevent

* Thu 27 Mar 2014 08:35:55 AM JST
import xcb2, xcb2.xproto
from xcb2.xconnection.connection import Connection

* Thu 27 Mar 2014 08:36:15 AM JST
s.KeyPress(True, 54525974, 0, 10, 0, 0, 482, 54525974, 0, 0,0,0,0, 0, 1)
* Thu 27 Mar 2014 08:39:55 AM JST
    def flush(self, ):
        r"""SUMMARY

        flush()

        @Return:
        """
        self._xcb_connection.flush()

    def disconnect(self, ):
        r"""SUMMARY

        disconnect()

        @Return:
        """
        self._xcb_connection.disconnect()

    def generate_id(self, ):
        r"""SUMMARY

        generate_id()

        @Return:
        """
        return self._xcb_connection.generate_id()

    def get_file_descriptor(self, ):
        r"""SUMMARY

        get_file_descriptor()

        @Return:
        """
        return self._xcb_connection.get_file_descriptor()

    def get_maximum_request_length(self, ):
        r"""SUMMARY

        get_maximum_request_length()

        @Return:
        """
        return self._xcb_connection.get_maximum_request_length()

    def get_setup(self, ):
        r"""SUMMARY

        get_setup()

        @Return:
        """
        return self._xcb_connection.get_setup()

    def has_error(self, ):
        r"""SUMMARY

        has_error()

        @Return:
        """
        return self._xcb_connection.has_error()

    def poll_for_event(self, ):
        r"""SUMMARY

        poll_for_event()

        @Return:
        """
        return self._xcb_connection.poll_for_event()

    @property
    def pref_screen(self, ):
        r"""SUMMARY

        pref_screen()

        @Return:
        """
        return self._xcb_connection.pref_screen

    def prefetch_maximum_request_length(self, ):
        r"""SUMMARY

        prefetch_maximum_request_length()

        @Return:
        """
        return self._xcb_connection.prefetch_maximum_request_length()

    def wait_for_event(self, ):
        r"""SUMMARY

        wait_for_event()

        @Return:
        """
        return self._xcb_connection.wait_for_event()


* Thu 27 Mar 2014 08:40:11 AM JST
_xcb_
* Thu 27 Mar 2014 08:40:14 AM JST
_xcb_
* Thu 27 Mar 2014 08:40:18 AM JST
_xcb_
* Thu 27 Mar 2014 08:40:22 AM JST
_xcb_
* Thu 27 Mar 2014 08:40:24 AM JST
_xcb_
* Thu 27 Mar 2014 08:40:27 AM JST
_xcb_
* Thu 27 Mar 2014 08:40:31 AM JST
_xcb_
* Thu 27 Mar 2014 08:40:34 AM JST
_xcb_
* Thu 27 Mar 2014 08:40:37 AM JST
_xcb_
* Thu 27 Mar 2014 08:40:41 AM JST
_xcb_
* Thu 27 Mar 2014 08:40:45 AM JST
_xcb_
* Thu 27 Mar 2014 08:41:46 AM JST
    def __call__(self, *args, **kwargs):
        return self._xcb_connection.__call__(*args, **kwargs)

* Thu 27 Mar 2014 08:41:54 AM JST
_xcb_
* Thu 27 Mar 2014 08:41:56 AM JST
__call__
* Thu 27 Mar 2014 08:54:52 AM JST
class DataHolder(object):
    r"""
    """

    def __init__(self, data):
        r"""

        @Arguments:
        - `data`:
        """
        self._data = data

    def __repr__(self, ):
        return repr(self._data)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self._data, other._data)
        return cmp(self._data, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._data == other._data
        return self._data == other

    def __ne__(self, other):
        return not (self == other)


class AtomNumber(DataHolder):
    r"""
    """

    def __init__(self, identifier, num):
        r"""

        @Arguments:
        - `num`:
        - `name`:
        """
        DataHolder.__init__(self, num)
        self._identifier = identifier

    def get_atom_name(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return self._identifier.get_atom_name(self._data)

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return request.Atom(self._data).pack()

    def __int__(self, ):
        return self._data

    def __long__(self, ):
        return self._data.__long__()

    def __hash__(self, ):
        return hash(self._data)


class AtomName(DataHolder):
    r"""
    """

    def __init__(self, identifier, name):
        r"""

        @Arguments:
        - `connection`:
        - `name`:
        """
        DataHolder.__init__(self, name)
        self._identifier = identifier

    def intern_atom(self, ):
        r"""SUMMARY

        intern_atom()

        @Return:
        """
        return self._identifier.intern_atom(self._data)

    def name_length(self, ):
        r"""SUMMARY

        name_length()

        @Return:
        """
        return len(self)

    def __iter__(self):
        for i in range(0, len(self)):
            yield self._data[i]
        raise StopIteration()

    def __str__(self, ):
        return self._data

    def __hash__(self, ):
        return hash(self._data)

    def __len__(self, ):
        return len(self._data)


class AtomCache(object):
    r"""
    """

    def __init__(self, dic=None):
        r"""

        @Arguments:
        - `dic`:
        """
        self._dic = dic or {}

    def _add(self, key, value):
        r"""SUMMARY

        _add()

        @Return:
        """
        for arg in (key, value):
            if not isinstance(arg, (int, str)):
                # TODO: (Atami) [2014/02/17]
                raise ValueError(arg)
        self._dic[key] = value

    def dual_add(self, arg1, arg2):
        r"""SUMMARY

        dual_add(arg1, arg2)

        @Arguments:
        - `arg1`:
        - `arg2`:

        @Return:
        """
        self._add(arg1, arg2)
        self._add(arg2, arg1)

    def get(self, key):
        r"""SUMMARY

        get(key)

        @Arguments:
        - `key`:

        @Return:
        """
        if key in self._dic:
            return self._dic[key]
        # TODO: (Atami) [2014/02/17]
        # default return

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:
        """
        self._dic.clear()

    def __contains__(self, key):
        return key in self._dic

    def __repr__(self, ):
        return repr(self._dic)


class AtomPair(object):
    r"""
    """
    __slots__ = ('name', 'atom')

    def __init__(self, name, atom):
        r"""

        @Arguments:
        - `name`:
        - `atom`:
        """
        self.name = name
        self.atom = atom

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return self.atom.pack()

    def __repr__(self, ):
        fmt = "{0.__class__.__name__}(name='{0.name}', atom={0.atom})".format
        return fmt(self)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.atom, other.atom)
        if predicate.isstring(other):
            return cmp(self.name, other)
        if predicate.isint(other):
            return cmp(self.atom, other)
        return False

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.atom == other.atom
        if predicate.isint(other):
            return self.atom == other
        if predicate.isstring(other):
            return self.name == other
        return False

    def __ne__(self, other):
        return not (self == other)

    def __getitem__(self, key):
        return str(self)[key]

    def __str__(self, ):
        return str(self.name)

    def __int__(self, ):
        return int(self.atom)

    def __long__(self, ):
        return long(self.atom)

    def __len__(self, ):
        return len(str(self))

    def __hash__(self, ):
        return hash(self.atom)


class AtomIdentifier(DisplayName):
    r"""
    """

    _static_cache = {}

    # TODO: (Atami) [2014/02/17]
    # behave atom 0

    def __init__(self, display=None, use_cache=True):
        r"""
        """
        DisplayName.__init__(self, display)
        if not self.display in self._static_cache:
            self._static_cache[self.display] = AtomCache()
        self._cache = self._static_cache.get(self.display)
        self._use_cache = use_cache

    def intern_atom(self, name):
        r"""SUMMARY

        intern_atom(name)

        @Arguments:
        - `name`:

        @Return:
        """
        if not isinstance(name, (basestring)):
            # TODO: (Atami) [2014/03/02]
            raise ValueError(name)
        if self._use_cache and name in self._cache:
            return AtomNumber(self, self._cache.get(name))

        connection = SingleConnection.get_instance(display=self.display)
        atom = (connection.core.InternAtom(
            False, len(name), str(name)).reply().atom)
        if self._use_cache:
            self._cache.dual_add(name, atom) # caching
        return AtomNumber(self, atom)

    def get_atom_name(self, atom):
        r"""SUMMARY

        get_atom_name(atom, cache=True)

        @Arguments:
        - `atom`:
        - `cache`:

        @Return:
        """
        if not isinstance(atom, (int)):
            # TODO: (Atami) [2014/03/02]
            raise ValueError(atom)
        if self._use_cache and atom in self._cache:
            return AtomName(self, self._cache.get(atom))

        connection = SingleConnection.get_instance(display=self.display)
        name = str(connection.core.GetAtomName(atom).reply().name.buf())
        if self._use_cache:
            self._cache.dual_add(name, atom)
        return AtomName(self, name)

    @dispatch.generic()
    def identify_atom(self, atom):
        r"""Base generic method of 'identify_atom'"""

    @identify_atom.when('isinstance(atom, AtomPair)')
    def _identify_atom_AtomPair(self, atom):
        r"""SUMMARY

        identify_atom_AtomPair(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        return atom

    @identify_atom.when('isinstance(atom, str)')
    def _identify_atom_str(self, atom):
        r"""SUMMARY

        identify_atom_str(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        return AtomPair(AtomName(self, atom), self.intern_atom(atom))

    @identify_atom.when('isinstance(atom, int)')
    def _identify_atom_int(self, atom):
        r"""SUMMARY

        identify_atom_int(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        return AtomPair(self.get_atom_name(atom), AtomNumber(self, atom))

    @dispatch.generic()
    def get_types(self, atom, default='ANY'):
        r"""SUMMARY

        get_types()

        @Return:
        """
        pass

    @get_types.when('isinstance(atom, str)')
    def _get_types_str(self, atom, default='ANY'):
        r"""SUMMARY

        get_types(name, default='')

        @Arguments:
        - `name`:
        - `default`:

        @Return:
        """
        types_name = ATOMS.get_types(atom, default=default)
        return self.identify_atom(types_name)

    @get_types.when('isinstance(atom, int)')
    def _get_types_int(self, atom, default='ANY'):
        r"""SUMMARY

        _get_types_int()

        @Return:
        """
        types_name = ATOMS.get_types(str(self.identify_atom(atom)),
                                     default=default)
        return self.identify_atom(types_name)

    @get_types.when('isinstance(atom, AtomPair)')
    def _get_types_atompair(self, atom, default='ANY'):
        r"""SUMMARY

        _get_types_atompair(name, default='ANY')

        @Arguments:
        - `name`:
        - `default`:

        @Return:
        """
        types_name = ATOMS.get_types(str(atom), default=default)
        return self.identify_atom(types_name)


class AtomDispatchBuilder(DisplayName, MakeDispatchFromListABC):
    r"""
    """

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `display`:
        """
        DisplayName.__init__(self, display=display)
        self.intern_atom = AtomIdentifier(display=self.display).intern_atom

    def get_list(self, ):
        r"""SUMMARY

        get_list()

        @Return:
        """
        return getattr(self, '_types_list')

    def get_key(self, elm):
        r"""SUMMARY

        get_key(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        if hasattr(elm, 'type_name'):
            return self.intern_atom(elm.type_name)
        return None

    def get_callable(self, elm):
        r"""SUMMARY

        get_callable(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        return elm



* Thu 27 Mar 2014 08:57:15 AM JST
ConnectionAbstract
* Thu 27 Mar 2014 08:57:24 AM JST
ConnectionAbstract
* Thu 27 Mar 2014 08:58:00 AM JST
connection
* Thu 27 Mar 2014 08:58:46 AM JST
connection
* Thu 27 Mar 2014 08:59:15 AM JST
connection
* Thu 27 Mar 2014 08:59:37 AM JST
connection
* Thu 27 Mar 2014 08:59:39 AM JST

* Thu 27 Mar 2014 08:59:39 AM JST

* Thu 27 Mar 2014 08:59:39 AM JST
        connection = SingleConnection.get_instance(display=self.display)

* Thu 27 Mar 2014 09:00:21 AM JST
from peak.rules import dispatch
* Thu 27 Mar 2014 09:00:49 AM JST
ConnectionAbstract
* Thu 27 Mar 2014 09:01:05 AM JST
connection
* Thu 27 Mar 2014 09:01:45 AM JST
from dispatcher import MakeDispatchFromListABC
* Thu 27 Mar 2014 09:08:26 AM JST
import xcb2, xcb2.xproto
from xcb2.xconnection.connection import Connection

* Thu 27 Mar 2014 09:08:48 AM JST
c=Connection()
* Thu 27 Mar 2014 09:08:57 AM JST
from xcb2.xconnection import atom
* Thu 27 Mar 2014 09:09:01 AM JST
a=atom.AtomIdentifier(c)
* Thu 27 Mar 2014 09:09:13 AM JST
import xcb2, xcb2.xproto
from xcb2.xconnection.connection import Connection
from xcb2.xconnection import atom
c=Connection()
a=atom.AtomIdentifier(c)
* Thu 27 Mar 2014 09:09:23 AM JST
connection.
* Thu 27 Mar 2014 09:09:26 AM JST
connection.
* Thu 27 Mar 2014 09:09:30 AM JST
connection.
* Thu 27 Mar 2014 09:58:53 AM JST
ConnectionAbstract
* Thu 27 Mar 2014 09:59:27 AM JST

* Thu 27 Mar 2014 09:59:40 AM JST

* Thu 27 Mar 2014 09:59:41 AM JST

* Thu 27 Mar 2014 09:59:41 AM JST
        self._n_cache = {}

* Thu 27 Mar 2014 09:59:54 AM JST
clear
* Thu 27 Mar 2014 10:03:56 AM JST
            
* Thu 27 Mar 2014 10:04:51 AM JST
self.core.GetAtomName(atom)
* Thu 27 Mar 2014 10:05:33 AM JST
1010101
* Thu 27 Mar 2014 10:06:09 AM JST

* Thu 27 Mar 2014 10:06:09 AM JST

* Thu 27 Mar 2014 10:06:09 AM JST
    @property

* Thu 27 Mar 2014 10:07:04 AM JST
GetAtomNameChecked
* Thu 27 Mar 2014 10:07:05 AM JST
core.GetAtomNameChecked
* Thu 27 Mar 2014 10:07:15 AM JST
GetAtomNameUnchecked
* Thu 27 Mar 2014 10:07:49 AM JST
    def GetAtomName(self, atom):
        r"""SUMMARY
        
        GetAtomNa()
        
        @Return:
        """
        if atom in self._cache:
            return self._cache[atom]
        name = str(self.core.GetAtomName(atom).reply().name.buf())
        self._cache[atom] = name
        return name

* Thu 27 Mar 2014 10:08:18 AM JST
only_if_exists, name_len, name
* Thu 27 Mar 2014 10:10:55 AM JST
.reply().name.buf())
* Thu 27 Mar 2014 10:10:57 AM JST
str(
* Thu 27 Mar 2014 10:11:21 AM JST
.check()
* Thu 27 Mar 2014 10:11:48 AM JST
print 
* Thu 27 Mar 2014 10:11:50 AM JST
.name.buf()
* Thu 27 Mar 2014 10:12:10 AM JST
reply()
* Thu 27 Mar 2014 10:12:32 AM JST
    def InternAtom(self, only_if_exists, name_len, name):
        r"""SUMMARY

        InternAtom()

        @Return:
        """
        if name in self._cache:
            return self._cache[name]
        atom = self.core.InternAtom(only_if_exists, name_len, name).reply().atom
        self._cache[name] = atom
        return atom

* Thu 27 Mar 2014 10:13:08 AM JST
cache_
* Thu 27 Mar 2014 10:17:00 AM JST
class DataHolder(object):
    r"""
    """

    def __init__(self, data):
        r"""

        @Arguments:
        - `data`:
        """
        self._data = data

    def __repr__(self, ):
        return repr(self._data)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self._data, other._data)
        return cmp(self._data, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._data == other._data
        return self._data == other

    def __ne__(self, other):
        return not (self == other)


class AtomNumber(DataHolder):
    r"""
    """

    def __init__(self, identifier, num):
        r"""

        @Arguments:
        - `num`:
        - `name`:
        """
        DataHolder.__init__(self, num)
        self._identifier = identifier

    def get_atom_name(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return self._identifier.get_atom_name(self._data)

    # def pack(self, ):
    #     r"""SUMMARY

    #     pack()

    #     @Return:
    #     """
    #     return request.Atom(self._data).pack()

    def __int__(self, ):
        return self._data

    def __long__(self, ):
        return self._data.__long__()

    def __hash__(self, ):
        return hash(self._data)


class AtomName(DataHolder):
    r"""
    """

    def __init__(self, identifier, name):
        r"""

        @Arguments:
        - `connection`:
        - `name`:
        """
        DataHolder.__init__(self, name)
        self._identifier = identifier

    def intern_atom(self, ):
        r"""SUMMARY

        intern_atom()

        @Return:
        """
        return self._identifier.intern_atom(self._data)

    def name_length(self, ):
        r"""SUMMARY

        name_length()

        @Return:
        """
        return len(self)

    def __iter__(self):
        for i in range(0, len(self)):
            yield self._data[i]
        raise StopIteration()

    def __str__(self, ):
        return self._data

    def __hash__(self, ):
        return hash(self._data)

    def __len__(self, ):
        return len(self._data)



* Thu 27 Mar 2014 10:19:12 AM JST
identifier
* Thu 27 Mar 2014 10:19:38 AM JST
atomcacher
* Thu 27 Mar 2014 10:19:48 AM JST
cacheatom
* Thu 27 Mar 2014 10:20:50 AM JST
    def get_atom_name(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return self._cacheatom.GetAtomName(self._data)


* Thu 27 Mar 2014 10:21:37 AM JST
st
* Thu 27 Mar 2014 10:21:38 AM JST
form st
* Thu 27 Mar 2014 10:23:45 AM JST
_cacheatom
* Thu 27 Mar 2014 10:24:37 AM JST
self._cacheatom.InternAtom(self._data)
* Thu 27 Mar 2014 10:24:47 AM JST
name_
* Thu 27 Mar 2014 10:25:51 AM JST
name
* Thu 27 Mar 2014 10:26:32 AM JST
AtomName(self, name)
* Thu 27 Mar 2014 10:26:37 AM JST
name
* Thu 27 Mar 2014 10:26:44 AM JST
atomname
* Thu 27 Mar 2014 10:27:46 AM JST
name
* Thu 27 Mar 2014 10:28:30 AM JST
atom, 
* Thu 27 Mar 2014 10:28:41 AM JST
        self._cache[atom] = atomname
        self._cache[name] = AtomNumber(self, atom)

* Thu 27 Mar 2014 10:29:01 AM JST
atom
* Thu 27 Mar 2014 10:29:07 AM JST
AtomName(self, name)
* Thu 27 Mar 2014 10:29:14 AM JST
atom
* Thu 27 Mar 2014 10:30:21 AM JST
atom
* Thu 27 Mar 2014 10:30:24 AM JST
atom
* Thu 27 Mar 2014 10:30:27 AM JST
atom
* Thu 27 Mar 2014 10:30:33 AM JST
atom
* Thu 27 Mar 2014 10:30:37 AM JST
atom
* Thu 27 Mar 2014 10:30:41 AM JST
atomname
* Thu 27 Mar 2014 10:31:20 AM JST
        if num in self._cache:
            return self._cache[num]
        name = str(self.core.GetAtomName(num).reply().name.buf())
        self._dual_add(num, name)
        return self.GetAtomName(num)

* Thu 27 Mar 2014 10:31:35 AM JST
atom
* Thu 27 Mar 2014 10:32:50 AM JST
atom
* Thu 27 Mar 2014 10:32:53 AM JST
atom
* Thu 27 Mar 2014 10:33:06 AM JST

* Thu 27 Mar 2014 10:33:06 AM JST

* Thu 27 Mar 2014 10:33:06 AM JST
        self._cache[name] = num

* Thu 27 Mar 2014 10:33:07 AM JST
atom
* Thu 27 Mar 2014 10:33:21 AM JST
only_if_exists, name_len, name
* Thu 27 Mar 2014 10:33:35 AM JST
        if name in self._cache:
            return self._cache[name]
        num = self.core.InternAtom(only_if_exists, name_len, name).reply().atom
        self._dual_add(num, name)
        return self.InternAtom(only_if_exists, name_len, name)

* Thu 27 Mar 2014 10:35:02 AM JST

* Thu 27 Mar 2014 10:35:02 AM JST

* Thu 27 Mar 2014 10:35:02 AM JST
    _static_cache = {}

* Thu 27 Mar 2014 10:44:21 AM JST
get_atom_name
* Thu 27 Mar 2014 10:45:55 AM JST
self.atomcache
* Thu 27 Mar 2014 10:46:08 AM JST

* Thu 27 Mar 2014 10:46:08 AM JST

* Thu 27 Mar 2014 10:46:08 AM JST
        name = self.atomcache.get_atom_name()

* Thu 27 Mar 2014 10:46:18 AM JST
self.atomcache
* Thu 27 Mar 2014 10:46:29 AM JST
AtomName(self.atomcache, atom)
* Thu 27 Mar 2014 10:46:37 AM JST
self.intern_atom(atom)
* Thu 27 Mar 2014 10:46:49 AM JST
atomcache
* Thu 27 Mar 2014 10:46:56 AM JST
intern_atom
* Thu 27 Mar 2014 10:47:17 AM JST
coreatom
* Thu 27 Mar 2014 10:48:54 AM JST
atom
* Thu 27 Mar 2014 10:48:57 AM JST
atom
* Thu 27 Mar 2014 10:49:10 AM JST
        name = AtomName(self.coreatom, atom)
        num = self.coreatom.InternAtom(True, len(atom), atom)
        return AtomPair(name, num)

* Thu 27 Mar 2014 10:49:38 AM JST
name
* Thu 27 Mar 2014 10:49:46 AM JST
InternAtom
* Thu 27 Mar 2014 10:51:32 AM JST
get_atom_name
* Thu 27 Mar 2014 10:52:47 AM JST
intern_atom
* Thu 27 Mar 2014 10:53:21 AM JST
self._data
* Thu 27 Mar 2014 10:53:38 AM JST
True, len(self._data), self._data
* Thu 27 Mar 2014 10:54:29 AM JST
AtomIdentifier
* Thu 27 Mar 2014 10:54:40 AM JST
import xcb2, xcb2.xproto
from xcb2.xconnection.connection import Connection
from xcb2.xconnection import atom
c=Connection()

* Thu 27 Mar 2014 10:54:47 AM JST
a=atom.AtomIdentifier(c)
* Thu 27 Mar 2014 10:55:46 AM JST

* Thu 27 Mar 2014 10:55:46 AM JST

* Thu 27 Mar 2014 10:55:46 AM JST
        # num = AtomNumber(self.coreatom, atom)

* Thu 27 Mar 2014 10:55:47 AM JST

* Thu 27 Mar 2014 10:55:47 AM JST

* Thu 27 Mar 2014 10:55:47 AM JST
        # return AtomPair(self.get_atom_name(atom), AtomNumber(self, atom))

* Thu 27 Mar 2014 10:55:50 AM JST

* Thu 27 Mar 2014 10:55:50 AM JST

* Thu 27 Mar 2014 10:55:50 AM JST
        # name = AtomName(self.coreatom, atom)

* Thu 27 Mar 2014 10:58:16 AM JST

* Thu 27 Mar 2014 10:58:16 AM JST
SendEvent
* Thu 27 Mar 2014 10:58:22 AM JST
sendevent
* Thu 27 Mar 2014 10:58:30 AM JST
AtomIdentifier
* Thu 27 Mar 2014 10:58:45 AM JST
import xcb2, xcb2.xproto
from xcb2.xconnection.connection import Connection
from xcb2.xconnection import atom
c=Connection()

* Thu 27 Mar 2014 10:58:50 AM JST
import xcb2, xcb2.xproto
from xcb2.xconnection.connection import Connection
from xcb2.xconnection import atom
c=Connection()

* Thu 27 Mar 2014 11:00:40 AM JST
import xcb2, xcb2.xproto
from xcb2.xconnection.connection import Connection
from xcb2.xconnection import atom
c=Connection()

* Thu 27 Mar 2014 11:01:57 AM JST
Internal use.
* Thu 27 Mar 2014 11:17:12 AM JST
BUILTIN_ATOMS = {
    'WM_NAME'             : ('STRING' , 8),
    'WM_LOCALE_NAME'      : ('STRING' , 8),
    # 'WM_HINTS'            : ('', ),
    'WM_ICON_NAME'        : ('STRING' , 8),
    'WM_CLASS'            : ('STRING' , 8),
    'WM_TRANSIENT_FOR'    : ('WINDOW' , 32),
    'WM_PROTOCOLS'        : ('ATOM'   , 32),
    'WM_COLORMAP_WINDOWS' : ('WINDOW' , 32),
    'WM_CLIENT_MACHINE'   : ('STRING' , 8),
    # 'WM_NORMAL_HINTS': ('WM_SIZE_HINTS', )
}

* Thu 27 Mar 2014 11:17:22 AM JST
# borrow from pytyle

# property name: ('type', length)

* Thu 27 Mar 2014 11:21:51 AM JST
class Atom8Types_(AtomTypes):
    r"""SUMMARY
    """
    length = 8

* Thu 27 Mar 2014 11:22:22 AM JST
class Atom8Types_(AtomTypes):
    r"""SUMMARY
    """
    length = 8
    

* Thu 27 Mar 2014 11:23:41 AM JST
class AtomTypesSTRING(Atom8Types):
    r"""SUMMARY
    """
    name = 'STRING'

* Thu 27 Mar 2014 11:23:43 AM JST
STRING
* Thu 27 Mar 2014 11:24:06 AM JST
class AtomTypesWINDOW(Atom32Types):
    r"""SUMMARY
    """
    name = 'WINDOW'



* Thu 27 Mar 2014 11:24:08 AM JST
WINDOW
* Thu 27 Mar 2014 11:24:24 AM JST
CARDINAL
* Thu 27 Mar 2014 11:24:56 AM JST
UTF8_STRING[]
* Thu 27 Mar 2014 11:25:39 AM JST
'UTF8_STRING[]'
* Thu 27 Mar 2014 11:25:53 AM JST
'UTF8_STRING'
* Thu 27 Mar 2014 11:27:55 AM JST
class AtomTypesUTF8_STRING(Atom8Types):
    r"""SUMMARY
    """
    name = 'UTF8_STRING'

    
class AtomTypesUTF8_STRING_LIST(Atom8Types):
    r"""SUMMARY
    """
    name = 'UTF8_STRING[]'
    


* Thu 27 Mar 2014 11:29:40 AM JST
AtomTypesSTRING
* Thu 27 Mar 2014 11:29:43 AM JST
('STRING' , 8)
* Thu 27 Mar 2014 11:29:48 AM JST
AtomTypesSTRING
* Thu 27 Mar 2014 11:31:22 AM JST
BASE_ATOMS = {
    'WM_STATE'                   : ('CARDINAL'      , 32),

    '_WIN_WORKSPACE'             : ('CARDINAL'      , 32),
    '_WIN_STATE'                 : ('CARDINAL'      , 32),
    '_NET_SUPPORTED'             : ('ATOM'          , 32),
    '_NET_CLIENT_LIST'           : ('WINDOW'        , 32),
    '_NET_CLIENT_LIST_STACKING'  : ('WINDOW'        , 32),
    '_NET_NUMBER_OF_DESKTOPS'    : ('CARDINAL'      , 32),
    '_NET_DESKTOP_GEOMETRY'      : ('CARDINAL'      , 32),
    '_NET_DESKTOP_VIEWPORT'      : ('CARDINAL'      , 32),
    '_NET_CURRENT_DESKTOP'       : ('CARDINAL'      , 32),
    '_NET_DESKTOP_NAMES'         : ('UTF8_STRING[]' , 8),
    '_NET_ACTIVE_WINDOW'         : ('WINDOW'        , 32),
    '_NET_WORKAREA'              : ('CARDINAL'      , 32),
    '_NET_SUPPORTING_WM_CHECK'   : ('WINDOW'        , 32),
    '_NET_VIRTUAL_ROOTS'         : ('WINDOW'        , 32),
    '_NET_DESKTOP_LAYOUT'        : ('CARDINAL'      , 32),
    '_NET_SHOWING_DESKTOP'       : ('CARDINAL'      , 32),

    '_NET_CLOSE_WINDOW'          : (None            , 0),
    '_NET_MOVERESIZE_WINDOW'     : (None            , 0),
    '_NET_WM_MORERESIZE'         : (None            , 0),
    '_NET_RESTACK_WINDOW'        : (None            , 0),
    '_NET_REQUEST_FRAME_EXTENTS' : ('CARDINAL'      , 32),

    '_NET_WM_NAME'               : ('UTF8_STRING'   , 8),
    '_NET_WM_VISIBLE_NAME'       : ('UTF8_STRING'   , 8),
    '_NET_WM_ICON_NAME'          : ('UTF8_STRING'   , 8),
    '_NET_WM_VISIBLE_ICON_NAME'  : ('UTF8_STRING'   , 8),
    '_NET_WM_DESKTOP'            : ('CARDINAL'      , 32),
    '_NET_WM_WINDOW_TYPE'        : ('ATOM'          , 32),
    '_NET_WM_STATE'              : ('ATOM'          , 32),
    '_NET_WM_ALLOWED_ACTIONS'    : ('ATOM'          , 32),
    '_NET_WM_STRUT'              : ('CARDINAL'      , 32),
    '_NET_WM_STRUT_PARTIAL'      : ('CARDINAL'      , 32),
    '_NET_WM_ICON_GEOMETRY'      : ('CARDINAL'      , 32),
    '_NET_WM_ICON'               : ('CARDINAL'      , 32),
    '_NET_WM_PID'                : ('CARDINAL'      , 32),
    '_NET_WM_HANDLED_ICONS'      : ('CARDINAL'      , 32),
    '_NET_WM_USER_TIME'          : ('CARDINAL'      , 32),
    '_NET_WM_USER_TIME_WINDOW'   : ('CARDINAL'      , 32),
    '_NET_FRAME_EXTENTS'         : ('CARDINAL'      , 32),

    '_OB_APP_TYPE'               : ('UTF8_STRING'   , 8),
}

* Thu 27 Mar 2014 11:31:35 AM JST
AtomTypesSTRING
* Thu 27 Mar 2014 11:33:06 AM JST
WINDOW_TYPES = {
    '_NET_WM_WINDOW_TYPE_DESKTOP'       : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DOCK'          : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_TOOLBAR'       : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_MENU'          : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_UTILITY'       : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_SPLASH'        : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DIALOG'        : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU' : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_POPUP_MENU'    : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_TOOLTIP'       : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_NOTIFICATION'  : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_COMBO'         : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DND'           : ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_NORMAL'        : ('ATOM', 32)
    }

WINDOW_STATES = {
    '_NET_WM_STATE_MODAL'             : ('ATOM', 32),
    '_NET_WM_STATE_STICKY'            : ('ATOM', 32),
    '_NET_WM_STATE_MAXIMIZED_VERT'    : ('ATOM', 32),
    '_NET_WM_STATE_MAXIMIZED_HORZ'    : ('ATOM', 32),
    '_NET_WM_STATE_SHADED'            : ('ATOM', 32),
    '_NET_WM_STATE_SKIP_TASKBAR'      : ('ATOM', 32),
    '_NET_WM_STATE_SKIP_PAGER'        : ('ATOM', 32),
    '_NET_WM_STATE_HIDDEN'            : ('ATOM', 32),
    '_NET_WM_STATE_FULLSCREEN'        : ('ATOM', 32),
    '_NET_WM_STATE_ABOVE'             : ('ATOM', 32),
    '_NET_WM_STATE_BELOW'             : ('ATOM', 32),
    '_NET_WM_STATE_DEMANDS_ATTENTION' : ('ATOM', 32)
}

WINDOW_ALLOWED_ACTIONS = {
    '_NET_WM_ACTION_MOVE'           : ('ATOM', 32),
    '_NET_WM_ACTION_RESIZE'         : ('ATOM', 32),
    '_NET_WM_ACTION_MINIMIZE'       : ('ATOM', 32),
    '_NET_WM_ACTION_SHADE'          : ('ATOM', 32),
    '_NET_WM_ACTION_STICK'          : ('ATOM', 32),
    '_NET_WM_ACTION_MAXIMIZE_HORZ'  : ('ATOM', 32),
    '_NET_WM_ACTION_MAXIMIZE_VERT'  : ('ATOM', 32),
    '_NET_WM_ACTION_FULLSCREEN'     : ('ATOM', 32),
    '_NET_WM_ACTION_CHANGE_DESKTOP' : ('ATOM', 32),
    '_NET_WM_ACTION_CLOSE'          : ('ATOM', 32),
    '_NET_WM_ACTION_ABOVE'          : ('ATOM', 32),
    '_NET_WM_ACTION_BELOW'          : ('ATOM', 32)
}

* Thu 27 Mar 2014 11:34:14 AM JST
AtomTypesWINDOW
* Thu 27 Mar 2014 11:36:01 AM JST
AtomTypesCARDINAL
* Thu 27 Mar 2014 11:37:11 AM JST
AtomTypesUTF8_STRING
* Thu 27 Mar 2014 11:37:45 AM JST
AtomTypesUTF8_STRING_LIST
* Thu 27 Mar 2014 11:38:47 AM JST
AtomTypesUTF8STRING
* Thu 27 Mar 2014 11:38:49 AM JST
AtomTypesUTF8STRINGLIST
* Thu 27 Mar 2014 11:39:16 AM JST
AtomTypesNone
* Thu 27 Mar 2014 11:39:56 AM JST
AtomTypesATOM
* Thu 27 Mar 2014 11:40:34 AM JST
_ATOMS = {}
_ATOMS.update(BUILTIN_ATOMS)
_ATOMS.update(BASE_ATOMS)
_ATOMS.update(WINDOW_TYPES)
_ATOMS.update(WINDOW_STATES)
_ATOMS.update(WINDOW_ALLOWED_ACTIONS)

* Thu 27 Mar 2014 11:41:33 AM JST
class ATOMS(object):
    r"""
    """
    atoms = _ATOMS

    @staticmethod
    def get_types_length(name, default=('ANY', 32)):
        r"""SUMMARY

        get_types_length()

        @Return:
        """
        return ATOMS.atoms.get(name, default)

    @staticmethod
    def get_types(name, default='ANY'):
        r"""SUMMARY

        get_types(default=0)

        @Arguments:
        - `default`:

        @Return:
        """
        return ATOMS.get_types_length(name, (default, 0))[0]

    @staticmethod
    def get_length(name, default=32):
        r"""SUMMARY

        get_length()

        @Return:
        """
        return ATOMS.get_types_length(name, ('ANY', default))[1]

* Thu 27 Mar 2014 11:41:44 AM JST
_ATOMS
* Thu 27 Mar 2014 11:41:55 AM JST
ATOMS
* Thu 27 Mar 2014 11:42:27 AM JST
AtomTypesANY
* Thu 27 Mar 2014 11:45:43 AM JST
AtomTypes
* Thu 27 Mar 2014 11:46:06 AM JST
[1]
* Thu 27 Mar 2014 11:46:14 AM JST
AtomTypesANY
* Thu 27 Mar 2014 11:49:00 AM JST
class AtomTypesAbstract(object):
    r"""SUMMARY
    """
    __slots__ = ('name', 'length')


class Atom0Types(AtomTypesAbstract):
    r"""SUMMARY
    """
    length = 0


class Atom8Types(AtomTypesAbstract):
    r"""SUMMARY
    """
    length = 8


class Atom32Types(AtomTypesAbstract):
    r"""SUMMARY
    """
    length = 32


class AtomTypesSTRING(Atom8Types):
    r"""SUMMARY
    """
    name = 'STRING'


class AtomTypesUTF8STRING(Atom8Types):
    r"""SUMMARY
    """
    name = 'UTF8_STRING'


class AtomTypesUTF8STRINGLIST(Atom8Types):
    r"""SUMMARY
    """
    name = 'UTF8_STRING[]'


class AtomTypesWINDOW(Atom32Types):
    r"""SUMMARY
    """
    name = 'WINDOW'


class AtomTypesATOM(Atom32Types):
    r"""SUMMARY
    """
    name = 'ATOM'


class AtomTypesCARDINAL(Atom32Types):
    r"""SUMMARY
    """
    name = 'CARDINAL'


class AtomTypesANY(Atom32Types):
    r"""SUMMARY
    """
    name = 'ANY'


class AtomTypesNone(Atom0Types):
    r"""SUMMARY
    """
    name = ''


BUILTIN_ATOMS = {
    'WM_NAME'             : AtomTypesSTRING,
    'WM_LOCALE_NAME'      : AtomTypesSTRING,
    # 'WM_HINTS'            : ('', ),
    'WM_ICON_NAME'        : AtomTypesSTRING,
    'WM_CLASS'            : AtomTypesSTRING,
    'WM_TRANSIENT_FOR'    : AtomTypesWINDOW,
    'WM_PROTOCOLS'        : AtomTypesATOM,
    'WM_COLORMAP_WINDOWS' : AtomTypesWINDOW,
    'WM_CLIENT_MACHINE'   : AtomTypesSTRING,
    # 'WM_NORMAL_HINTS': ('WM_SIZE_HINTS', ),
    }

BASE_ATOMS = {
    'WM_STATE'                   : AtomTypesCARDINAL,

    '_WIN_WORKSPACE'             : AtomTypesCARDINAL,
    '_WIN_STATE'                 : AtomTypesCARDINAL,
    '_NET_SUPPORTED'             : AtomTypesATOM,
    '_NET_CLIENT_LIST'           : AtomTypesWINDOW,
    '_NET_CLIENT_LIST_STACKING'  : AtomTypesWINDOW,
    '_NET_NUMBER_OF_DESKTOPS'    : AtomTypesCARDINAL,
    '_NET_DESKTOP_GEOMETRY'      : AtomTypesCARDINAL,
    '_NET_DESKTOP_VIEWPORT'      : AtomTypesCARDINAL,
    '_NET_CURRENT_DESKTOP'       : AtomTypesCARDINAL,
    '_NET_DESKTOP_NAMES'         : AtomTypesUTF8STRINGLIST,
    '_NET_ACTIVE_WINDOW'         : AtomTypesWINDOW,
    '_NET_WORKAREA'              : AtomTypesCARDINAL,
    '_NET_SUPPORTING_WM_CHECK'   : AtomTypesWINDOW,
    '_NET_VIRTUAL_ROOTS'         : AtomTypesWINDOW,
    '_NET_DESKTOP_LAYOUT'        : AtomTypesCARDINAL,
    '_NET_SHOWING_DESKTOP'       : AtomTypesCARDINAL,

    '_NET_CLOSE_WINDOW'          : AtomTypesNone,
    '_NET_MOVERESIZE_WINDOW'     : AtomTypesNone,
    '_NET_WM_MORERESIZE'         : AtomTypesNone,
    '_NET_RESTACK_WINDOW'        : AtomTypesNone,
    '_NET_REQUEST_FRAME_EXTENTS' : AtomTypesCARDINAL,

    '_NET_WM_NAME'               : AtomTypesUTF8STRING,
    '_NET_WM_VISIBLE_NAME'       : AtomTypesUTF8STRING,
    '_NET_WM_ICON_NAME'          : AtomTypesUTF8STRING,
    '_NET_WM_VISIBLE_ICON_NAME'  : AtomTypesUTF8STRING,
    '_NET_WM_DESKTOP'            : AtomTypesCARDINAL,
    '_NET_WM_WINDOW_TYPE'        : AtomTypesATOM,
    '_NET_WM_STATE'              : AtomTypesATOM,
    '_NET_WM_ALLOWED_ACTIONS'    : AtomTypesATOM,
    '_NET_WM_STRUT'              : AtomTypesCARDINAL,
    '_NET_WM_STRUT_PARTIAL'      : AtomTypesCARDINAL,
    '_NET_WM_ICON_GEOMETRY'      : AtomTypesCARDINAL,
    '_NET_WM_ICON'               : AtomTypesCARDINAL,
    '_NET_WM_PID'                : AtomTypesCARDINAL,
    '_NET_WM_HANDLED_ICONS'      : AtomTypesCARDINAL,
    '_NET_WM_USER_TIME'          : AtomTypesCARDINAL,
    '_NET_WM_USER_TIME_WINDOW'   : AtomTypesCARDINAL,
    '_NET_FRAME_EXTENTS'         : AtomTypesCARDINAL,

    '_OB_APP_TYPE'               : AtomTypesUTF8STRING,
    }

WINDOW_TYPES = {
    '_NET_WM_WINDOW_TYPE_DESKTOP'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DOCK'          : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_TOOLBAR'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_MENU'          : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_UTILITY'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_SPLASH'        : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DIALOG'        : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU' : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_POPUP_MENU'    : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_TOOLTIP'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_NOTIFICATION'  : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_COMBO'         : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DND'           : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_NORMAL'        : AtomTypesATOM,
    }

WINDOW_STATES = {
    '_NET_WM_STATE_MODAL'             : AtomTypesATOM,
    '_NET_WM_STATE_STICKY'            : AtomTypesATOM,
    '_NET_WM_STATE_MAXIMIZED_VERT'    : AtomTypesATOM,
    '_NET_WM_STATE_MAXIMIZED_HORZ'    : AtomTypesATOM,
    '_NET_WM_STATE_SHADED'            : AtomTypesATOM,
    '_NET_WM_STATE_SKIP_TASKBAR'      : AtomTypesATOM,
    '_NET_WM_STATE_SKIP_PAGER'        : AtomTypesATOM,
    '_NET_WM_STATE_HIDDEN'            : AtomTypesATOM,
    '_NET_WM_STATE_FULLSCREEN'        : AtomTypesATOM,
    '_NET_WM_STATE_ABOVE'             : AtomTypesATOM,
    '_NET_WM_STATE_BELOW'             : AtomTypesATOM,
    '_NET_WM_STATE_DEMANDS_ATTENTION' : AtomTypesATOM,
    }

WINDOW_ALLOWED_ACTIONS = {
    '_NET_WM_ACTION_MOVE'           : AtomTypesATOM,
    '_NET_WM_ACTION_RESIZE'         : AtomTypesATOM,
    '_NET_WM_ACTION_MINIMIZE'       : AtomTypesATOM,
    '_NET_WM_ACTION_SHADE'          : AtomTypesATOM,
    '_NET_WM_ACTION_STICK'          : AtomTypesATOM,
    '_NET_WM_ACTION_MAXIMIZE_HORZ'  : AtomTypesATOM,
    '_NET_WM_ACTION_MAXIMIZE_VERT'  : AtomTypesATOM,
    '_NET_WM_ACTION_FULLSCREEN'     : AtomTypesATOM,
    '_NET_WM_ACTION_CHANGE_DESKTOP' : AtomTypesATOM,
    '_NET_WM_ACTION_CLOSE'          : AtomTypesATOM,
    '_NET_WM_ACTION_ABOVE'          : AtomTypesATOM,
    '_NET_WM_ACTION_BELOW'          : AtomTypesATOM,
    }


ATOM_TYPES = {}
ATOM_TYPES.update(BUILTIN_ATOMS)
ATOM_TYPES.update(BASE_ATOMS)
ATOM_TYPES.update(WINDOW_TYPES)
ATOM_TYPES.update(WINDOW_STATES)
ATOM_TYPES.update(WINDOW_ALLOWED_ACTIONS)


class AtomTypes(object):
    r"""
    """
    atoms = ATOM_TYPES

    @staticmethod
    def get_types(name, default=AtomTypesANY):
        r"""SUMMARY

        get_types_length()

        @Return:
        """
        return AtomTypes.atoms.get(name, default)

    @staticmethod
    def get_types_name(name, default=AtomTypesANY):
        r"""SUMMARY

        get_types(default=0)

        @Arguments:
        - `default`:

        @Return:
        """
        return AtomTypes.get_types(name, default).name

    @staticmethod
    def get_length(name, default=AtomTypesANY):
        r"""SUMMARY

        get_length()

        @Return:
        """
        return AtomTypes.get_types(name, default).length



* Thu 27 Mar 2014 11:52:17 AM JST
#!/usr/bin/env python
# -*- coding: utf-8 -*-

# $Id: atom.py 114 2014-03-01 07:11:17Z t1 $
# $Revision: 114 $
# $Date: 2014-03-01 16:11:17 +0900 (Sat, 01 Mar 2014) $
# $Author: t1 $
# $LastChangedBy: t1 $
# $LastChangedDate: 2014-03-01 16:11:17 +0900 (Sat, 01 Mar 2014) $

r"""atom -- DESCRIPTION

"""

import sys as _sys
import os as _os

from peak.rules import dispatch

import predicate
from dispatcher import MakeDispatchFromListABC

from xahk.display import DisplayName
from xahk import request
from xahk.xconnection.singleton import SingleConnection
from xahk.xconnection.extensions.atoms import ATOMS

# for debug
import cgitb as _cgitb
_cgitb.enable(format='text')


__revision__ = '$Revision: 114 $'
__version__ = '0.1.0'


class DataHolder(object):
    r"""
    """

    def __init__(self, data):
        r"""

        @Arguments:
        - `data`:
        """
        self._data = data

    def __repr__(self, ):
        return repr(self._data)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self._data, other._data)
        return cmp(self._data, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._data == other._data
        return self._data == other

    def __ne__(self, other):
        return not (self == other)


class AtomNumber(DataHolder):
    r"""
    """

    def __init__(self, identifier, num):
        r"""

        @Arguments:
        - `num`:
        - `name`:
        """
        DataHolder.__init__(self, num)
        self._identifier = identifier

    def get_atom_name(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return self._identifier.get_atom_name(self._data)

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return request.Atom(self._data).pack()

    def __int__(self, ):
        return self._data

    def __long__(self, ):
        return self._data.__long__()

    def __hash__(self, ):
        return hash(self._data)


class AtomName(DataHolder):
    r"""
    """

    def __init__(self, identifier, name):
        r"""

        @Arguments:
        - `connection`:
        - `name`:
        """
        DataHolder.__init__(self, name)
        self._identifier = identifier

    def intern_atom(self, ):
        r"""SUMMARY

        intern_atom()

        @Return:
        """
        return self._identifier.intern_atom(self._data)

    def name_length(self, ):
        r"""SUMMARY

        name_length()

        @Return:
        """
        return len(self)

    def __iter__(self):
        for i in range(0, len(self)):
            yield self._data[i]
        raise StopIteration()

    def __str__(self, ):
        return self._data

    def __hash__(self, ):
        return hash(self._data)

    def __len__(self, ):
        return len(self._data)


class AtomCache(object):
    r"""
    """

    def __init__(self, dic=None):
        r"""

        @Arguments:
        - `dic`:
        """
        self._dic = dic or {}

    def _add(self, key, value):
        r"""SUMMARY

        _add()

        @Return:
        """
        for arg in (key, value):
            if not isinstance(arg, (int, str)):
                # TODO: (Atami) [2014/02/17]
                raise ValueError(arg)
        self._dic[key] = value

    def dual_add(self, arg1, arg2):
        r"""SUMMARY

        dual_add(arg1, arg2)

        @Arguments:
        - `arg1`:
        - `arg2`:

        @Return:
        """
        self._add(arg1, arg2)
        self._add(arg2, arg1)

    def get(self, key):
        r"""SUMMARY

        get(key)

        @Arguments:
        - `key`:

        @Return:
        """
        if key in self._dic:
            return self._dic[key]
        # TODO: (Atami) [2014/02/17]
        # default return

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:
        """
        self._dic.clear()

    def __contains__(self, key):
        return key in self._dic

    def __repr__(self, ):
        return repr(self._dic)


class AtomPair(object):
    r"""
    """
    __slots__ = ('name', 'atom')

    def __init__(self, name, atom):
        r"""

        @Arguments:
        - `name`:
        - `atom`:
        """
        self.name = name
        self.atom = atom

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return self.atom.pack()

    def __repr__(self, ):
        fmt = "{0.__class__.__name__}(name='{0.name}', atom={0.atom})".format
        return fmt(self)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.atom, other.atom)
        if predicate.isstring(other):
            return cmp(self.name, other)
        if predicate.isint(other):
            return cmp(self.atom, other)
        return False

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.atom == other.atom
        if predicate.isint(other):
            return self.atom == other
        if predicate.isstring(other):
            return self.name == other
        return False

    def __ne__(self, other):
        return not (self == other)

    def __getitem__(self, key):
        return str(self)[key]

    def __str__(self, ):
        return str(self.name)

    def __int__(self, ):
        return int(self.atom)

    def __long__(self, ):
        return long(self.atom)

    def __len__(self, ):
        return len(str(self))

    def __hash__(self, ):
        return hash(self.atom)


class AtomIdentifier(DisplayName):
    r"""
    """

    _static_cache = {}

    # TODO: (Atami) [2014/02/17]
    # behave atom 0

    def __init__(self, display=None, use_cache=True):
        r"""
        """
        DisplayName.__init__(self, display)
        if not self.display in self._static_cache:
            self._static_cache[self.display] = AtomCache()
        self._cache = self._static_cache.get(self.display)
        self._use_cache = use_cache

    def intern_atom(self, name):
        r"""SUMMARY

        intern_atom(name)

        @Arguments:
        - `name`:

        @Return:
        """
        if not isinstance(name, (basestring)):
            # TODO: (Atami) [2014/03/02]
            raise ValueError(name)
        if self._use_cache and name in self._cache:
            return AtomNumber(self, self._cache.get(name))

        connection = SingleConnection.get_instance(display=self.display)
        atom = (connection.core.InternAtom(
            False, len(name), str(name)).reply().atom)
        if self._use_cache:
            self._cache.dual_add(name, atom) # caching
        return AtomNumber(self, atom)

    def get_atom_name(self, atom):
        r"""SUMMARY

        get_atom_name(atom, cache=True)

        @Arguments:
        - `atom`:
        - `cache`:

        @Return:
        """
        if not isinstance(atom, (int)):
            # TODO: (Atami) [2014/03/02]
            raise ValueError(atom)
        if self._use_cache and atom in self._cache:
            return AtomName(self, self._cache.get(atom))

        connection = SingleConnection.get_instance(display=self.display)
        name = str(connection.core.GetAtomName(atom).reply().name.buf())
        if self._use_cache:
            self._cache.dual_add(name, atom)
        return AtomName(self, name)

    @dispatch.generic()
    def identify_atom(self, atom):
        r"""Base generic method of 'identify_atom'"""

    @identify_atom.when('isinstance(atom, AtomPair)')
    def _identify_atom_AtomPair(self, atom):
        r"""SUMMARY

        identify_atom_AtomPair(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        return atom

    @identify_atom.when('isinstance(atom, str)')
    def _identify_atom_str(self, atom):
        r"""SUMMARY

        identify_atom_str(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        return AtomPair(AtomName(self, atom), self.intern_atom(atom))

    @identify_atom.when('isinstance(atom, int)')
    def _identify_atom_int(self, atom):
        r"""SUMMARY

        identify_atom_int(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        return AtomPair(self.get_atom_name(atom), AtomNumber(self, atom))

    @dispatch.generic()
    def get_types(self, atom, default='ANY'):
        r"""SUMMARY

        get_types()

        @Return:
        """
        pass

    @get_types.when('isinstance(atom, str)')
    def _get_types_str(self, atom, default='ANY'):
        r"""SUMMARY

        get_types(name, default='')

        @Arguments:
        - `name`:
        - `default`:

        @Return:
        """
        types_name = ATOMS.get_types(atom, default=default)
        return self.identify_atom(types_name)

    @get_types.when('isinstance(atom, int)')
    def _get_types_int(self, atom, default='ANY'):
        r"""SUMMARY

        _get_types_int()

        @Return:
        """
        types_name = ATOMS.get_types(str(self.identify_atom(atom)),
                                     default=default)
        return self.identify_atom(types_name)

    @get_types.when('isinstance(atom, AtomPair)')
    def _get_types_atompair(self, atom, default='ANY'):
        r"""SUMMARY

        _get_types_atompair(name, default='ANY')

        @Arguments:
        - `name`:
        - `default`:

        @Return:
        """
        types_name = ATOMS.get_types(str(atom), default=default)
        return self.identify_atom(types_name)


class AtomDispatchBuilder(DisplayName, MakeDispatchFromListABC):
    r"""
    """

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `display`:
        """
        DisplayName.__init__(self, display=display)
        self.intern_atom = AtomIdentifier(display=self.display).intern_atom

    def get_list(self, ):
        r"""SUMMARY

        get_list()

        @Return:
        """
        return getattr(self, '_types_list')

    def get_key(self, elm):
        r"""SUMMARY

        get_key(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        if hasattr(elm, 'type_name'):
            return self.intern_atom(elm.type_name)
        return None

    def get_callable(self, elm):
        r"""SUMMARY

        get_callable(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        return elm


def _test():
    r"""Test function."""
    return _os.EX_OK

if __name__ == '__main__':
    _sys.exit(_test())



# For Emacs
# Local Variables:
# coding: utf-8
# End:
# atom.py ends here

* Thu 27 Mar 2014 11:53:51 AM JST
AtomTypes
* Thu 27 Mar 2014 11:56:22 AM JST
pass
* Thu 27 Mar 2014 11:56:43 AM JST
AtomTypes
* Thu 27 Mar 2014 12:01:22 PM JST
get_types
* Thu 27 Mar 2014 12:05:01 PM JST
class AtomTypesAbstract(object):
    r"""SUMMARY
    """
    __slots__ = ('name', 'length')


class Atom0Types(AtomTypesAbstract):
    r"""SUMMARY
    """
    length = 0


class Atom8Types(AtomTypesAbstract):
    r"""SUMMARY
    """
    length = 8


class Atom32Types(AtomTypesAbstract):
    r"""SUMMARY
    """
    length = 32


class AtomTypesSTRING(Atom8Types):
    r"""SUMMARY
    """
    name = 'STRING'


class AtomTypesUTF8STRING(Atom8Types):
    r"""SUMMARY
    """
    name = 'UTF8_STRING'


class AtomTypesUTF8STRINGLIST(Atom8Types):
    r"""SUMMARY
    """
    name = 'UTF8_STRING[]'


class AtomTypesWINDOW(Atom32Types):
    r"""SUMMARY
    """
    name = 'WINDOW'


class AtomTypesATOM(Atom32Types):
    r"""SUMMARY
    """
    name = 'ATOM'


class AtomTypesCARDINAL(Atom32Types):
    r"""SUMMARY
    """
    name = 'CARDINAL'


class AtomTypesANY(Atom32Types):
    r"""SUMMARY
    """
    name = 'ANY'


class AtomTypesNone(Atom0Types):
    r"""SUMMARY
    """
    name = ''


BUILTIN_ATOMS = {
    'WM_NAME'             : AtomTypesSTRING,
    'WM_LOCALE_NAME'      : AtomTypesSTRING,
    # 'WM_HINTS'            : ('', ),
    'WM_ICON_NAME'        : AtomTypesSTRING,
    'WM_CLASS'            : AtomTypesSTRING,
    'WM_TRANSIENT_FOR'    : AtomTypesWINDOW,
    'WM_PROTOCOLS'        : AtomTypesATOM,
    'WM_COLORMAP_WINDOWS' : AtomTypesWINDOW,
    'WM_CLIENT_MACHINE'   : AtomTypesSTRING,
    # 'WM_NORMAL_HINTS': ('WM_SIZE_HINTS', ),
    }

BASE_ATOMS = {
    'WM_STATE'                   : AtomTypesCARDINAL,

    '_WIN_WORKSPACE'             : AtomTypesCARDINAL,
    '_WIN_STATE'                 : AtomTypesCARDINAL,
    '_NET_SUPPORTED'             : AtomTypesATOM,
    '_NET_CLIENT_LIST'           : AtomTypesWINDOW,
    '_NET_CLIENT_LIST_STACKING'  : AtomTypesWINDOW,
    '_NET_NUMBER_OF_DESKTOPS'    : AtomTypesCARDINAL,
    '_NET_DESKTOP_GEOMETRY'      : AtomTypesCARDINAL,
    '_NET_DESKTOP_VIEWPORT'      : AtomTypesCARDINAL,
    '_NET_CURRENT_DESKTOP'       : AtomTypesCARDINAL,
    '_NET_DESKTOP_NAMES'         : AtomTypesUTF8STRINGLIST,
    '_NET_ACTIVE_WINDOW'         : AtomTypesWINDOW,
    '_NET_WORKAREA'              : AtomTypesCARDINAL,
    '_NET_SUPPORTING_WM_CHECK'   : AtomTypesWINDOW,
    '_NET_VIRTUAL_ROOTS'         : AtomTypesWINDOW,
    '_NET_DESKTOP_LAYOUT'        : AtomTypesCARDINAL,
    '_NET_SHOWING_DESKTOP'       : AtomTypesCARDINAL,

    '_NET_CLOSE_WINDOW'          : AtomTypesNone,
    '_NET_MOVERESIZE_WINDOW'     : AtomTypesNone,
    '_NET_WM_MORERESIZE'         : AtomTypesNone,
    '_NET_RESTACK_WINDOW'        : AtomTypesNone,
    '_NET_REQUEST_FRAME_EXTENTS' : AtomTypesCARDINAL,

    '_NET_WM_NAME'               : AtomTypesUTF8STRING,
    '_NET_WM_VISIBLE_NAME'       : AtomTypesUTF8STRING,
    '_NET_WM_ICON_NAME'          : AtomTypesUTF8STRING,
    '_NET_WM_VISIBLE_ICON_NAME'  : AtomTypesUTF8STRING,
    '_NET_WM_DESKTOP'            : AtomTypesCARDINAL,
    '_NET_WM_WINDOW_TYPE'        : AtomTypesATOM,
    '_NET_WM_STATE'              : AtomTypesATOM,
    '_NET_WM_ALLOWED_ACTIONS'    : AtomTypesATOM,
    '_NET_WM_STRUT'              : AtomTypesCARDINAL,
    '_NET_WM_STRUT_PARTIAL'      : AtomTypesCARDINAL,
    '_NET_WM_ICON_GEOMETRY'      : AtomTypesCARDINAL,
    '_NET_WM_ICON'               : AtomTypesCARDINAL,
    '_NET_WM_PID'                : AtomTypesCARDINAL,
    '_NET_WM_HANDLED_ICONS'      : AtomTypesCARDINAL,
    '_NET_WM_USER_TIME'          : AtomTypesCARDINAL,
    '_NET_WM_USER_TIME_WINDOW'   : AtomTypesCARDINAL,
    '_NET_FRAME_EXTENTS'         : AtomTypesCARDINAL,

    '_OB_APP_TYPE'               : AtomTypesUTF8STRING,
    }

WINDOW_TYPES = {
    '_NET_WM_WINDOW_TYPE_DESKTOP'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DOCK'          : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_TOOLBAR'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_MENU'          : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_UTILITY'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_SPLASH'        : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DIALOG'        : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU' : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_POPUP_MENU'    : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_TOOLTIP'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_NOTIFICATION'  : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_COMBO'         : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DND'           : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_NORMAL'        : AtomTypesATOM,
    }

WINDOW_STATES = {
    '_NET_WM_STATE_MODAL'             : AtomTypesATOM,
    '_NET_WM_STATE_STICKY'            : AtomTypesATOM,
    '_NET_WM_STATE_MAXIMIZED_VERT'    : AtomTypesATOM,
    '_NET_WM_STATE_MAXIMIZED_HORZ'    : AtomTypesATOM,
    '_NET_WM_STATE_SHADED'            : AtomTypesATOM,
    '_NET_WM_STATE_SKIP_TASKBAR'      : AtomTypesATOM,
    '_NET_WM_STATE_SKIP_PAGER'        : AtomTypesATOM,
    '_NET_WM_STATE_HIDDEN'            : AtomTypesATOM,
    '_NET_WM_STATE_FULLSCREEN'        : AtomTypesATOM,
    '_NET_WM_STATE_ABOVE'             : AtomTypesATOM,
    '_NET_WM_STATE_BELOW'             : AtomTypesATOM,
    '_NET_WM_STATE_DEMANDS_ATTENTION' : AtomTypesATOM,
    }

WINDOW_ALLOWED_ACTIONS = {
    '_NET_WM_ACTION_MOVE'           : AtomTypesATOM,
    '_NET_WM_ACTION_RESIZE'         : AtomTypesATOM,
    '_NET_WM_ACTION_MINIMIZE'       : AtomTypesATOM,
    '_NET_WM_ACTION_SHADE'          : AtomTypesATOM,
    '_NET_WM_ACTION_STICK'          : AtomTypesATOM,
    '_NET_WM_ACTION_MAXIMIZE_HORZ'  : AtomTypesATOM,
    '_NET_WM_ACTION_MAXIMIZE_VERT'  : AtomTypesATOM,
    '_NET_WM_ACTION_FULLSCREEN'     : AtomTypesATOM,
    '_NET_WM_ACTION_CHANGE_DESKTOP' : AtomTypesATOM,
    '_NET_WM_ACTION_CLOSE'          : AtomTypesATOM,
    '_NET_WM_ACTION_ABOVE'          : AtomTypesATOM,
    '_NET_WM_ACTION_BELOW'          : AtomTypesATOM,
    }


ATOM_TYPES = {}
ATOM_TYPES.update(BUILTIN_ATOMS)
ATOM_TYPES.update(BASE_ATOMS)
ATOM_TYPES.update(WINDOW_TYPES)
ATOM_TYPES.update(WINDOW_STATES)
ATOM_TYPES.update(WINDOW_ALLOWED_ACTIONS)


class AtomTypes(object):
    r"""
    """
    atoms = ATOM_TYPES

    @staticmethod
    def get_types(name, default=AtomTypesANY):
        r"""SUMMARY

        get_types_length()

        @Return:
        """
        return AtomTypes.atoms.get(name, default)

    @staticmethod
    def get_types_name(name, default=AtomTypesANY):
        r"""SUMMARY

        get_types(default=0)

        @Arguments:
        - `default`:

        @Return:
        """
        return AtomTypes.get_types(name, default).name

    @staticmethod
    def get_length(name, default=AtomTypesANY):
        r"""SUMMARY

        get_length()

        @Return:
        """
        return AtomTypes.get_types(name, default).length


* Thu 27 Mar 2014 12:06:06 PM JST
ATOM_TYPES
* Thu 27 Mar 2014 12:07:29 PM JST
PropertyAtom
* Thu 27 Mar 2014 12:08:36 PM JST
AtomTypesANY
* Thu 27 Mar 2014 12:08:58 PM JST
PropertyAtom
* Thu 27 Mar 2014 12:24:36 PM JST
class PropertyRequested(object):
    r"""
    """
    __slots__ = ('requester', 'reply', 'delete', 'window',
                 'property', 'type', 'offset', 'length')

    def __init__(self, requester, reply, delete, window,
                 property_, type_, offset, length):
        r"""

        @Arguments:
        - `requester`:
        - `reply`:
        - `delete`:
        - `window`:
        - `property_`:
        - `type_`:
        - `offset`:
        - `length`:
        """
        self.requester = requester
        self.reply = reply
        self.delete = delete
        self.window = window
        self.property = property_
        self.type = type_
        self.offset = offset
        self.length = length

* Thu 27 Mar 2014 12:29:04 PM JST

* Thu 27 Mar 2014 12:29:05 PM JST
ConnectionAbstract
* Thu 27 Mar 2014 12:29:07 PM JST
abstract
* Thu 27 Mar 2014 12:30:52 PM JST
.connection
* Thu 27 Mar 2014 12:34:11 PM JST
self.connection
* Thu 27 Mar 2014 12:55:19 PM JST
class AtomTypesAbstract(object):
    r"""SUMMARY
    """
    __slots__ = ('name', 'length')


class Atom0Types(AtomTypesAbstract):
    r"""SUMMARY
    """
    length = 0


class Atom8Types(AtomTypesAbstract):
    r"""SUMMARY
    """
    length = 8


class Atom32Types(AtomTypesAbstract):
    r"""SUMMARY
    """
    length = 32


class AtomTypesSTRING(Atom8Types):
    r"""SUMMARY
    """
    name = 'STRING'


class AtomTypesUTF8STRING(Atom8Types):
    r"""SUMMARY
    """
    name = 'UTF8_STRING'


class AtomTypesUTF8STRINGLIST(Atom8Types):
    r"""SUMMARY
    """
    name = 'UTF8_STRING[]'


class AtomTypesWINDOW(Atom32Types):
    r"""SUMMARY
    """
    name = 'WINDOW'


class AtomTypesATOM(Atom32Types):
    r"""SUMMARY
    """
    name = 'ATOM'


class AtomTypesCARDINAL(Atom32Types):
    r"""SUMMARY
    """
    name = 'CARDINAL'


class AtomTypesANY(Atom32Types):
    r"""SUMMARY
    """
    name = 'ANY'


class AtomTypesNone(Atom0Types):
    r"""SUMMARY
    """
    name = ''


BUILTIN_ATOMS = {
    'WM_NAME'             : AtomTypesSTRING,
    'WM_LOCALE_NAME'      : AtomTypesSTRING,
    # 'WM_HINTS'            : ('', ),
    'WM_ICON_NAME'        : AtomTypesSTRING,
    'WM_CLASS'            : AtomTypesSTRING,
    'WM_TRANSIENT_FOR'    : AtomTypesWINDOW,
    'WM_PROTOCOLS'        : AtomTypesATOM,
    'WM_COLORMAP_WINDOWS' : AtomTypesWINDOW,
    'WM_CLIENT_MACHINE'   : AtomTypesSTRING,
    # 'WM_NORMAL_HINTS': ('WM_SIZE_HINTS', ),
    }

BASE_ATOMS = {
    'WM_STATE'                   : AtomTypesCARDINAL,

    '_WIN_WORKSPACE'             : AtomTypesCARDINAL,
    '_WIN_STATE'                 : AtomTypesCARDINAL,
    '_NET_SUPPORTED'             : AtomTypesATOM,
    '_NET_CLIENT_LIST'           : AtomTypesWINDOW,
    '_NET_CLIENT_LIST_STACKING'  : AtomTypesWINDOW,
    '_NET_NUMBER_OF_DESKTOPS'    : AtomTypesCARDINAL,
    '_NET_DESKTOP_GEOMETRY'      : AtomTypesCARDINAL,
    '_NET_DESKTOP_VIEWPORT'      : AtomTypesCARDINAL,
    '_NET_CURRENT_DESKTOP'       : AtomTypesCARDINAL,
    '_NET_DESKTOP_NAMES'         : AtomTypesUTF8STRINGLIST,
    '_NET_ACTIVE_WINDOW'         : AtomTypesWINDOW,
    '_NET_WORKAREA'              : AtomTypesCARDINAL,
    '_NET_SUPPORTING_WM_CHECK'   : AtomTypesWINDOW,
    '_NET_VIRTUAL_ROOTS'         : AtomTypesWINDOW,
    '_NET_DESKTOP_LAYOUT'        : AtomTypesCARDINAL,
    '_NET_SHOWING_DESKTOP'       : AtomTypesCARDINAL,

    '_NET_CLOSE_WINDOW'          : AtomTypesNone,
    '_NET_MOVERESIZE_WINDOW'     : AtomTypesNone,
    '_NET_WM_MORERESIZE'         : AtomTypesNone,
    '_NET_RESTACK_WINDOW'        : AtomTypesNone,
    '_NET_REQUEST_FRAME_EXTENTS' : AtomTypesCARDINAL,

    '_NET_WM_NAME'               : AtomTypesUTF8STRING,
    '_NET_WM_VISIBLE_NAME'       : AtomTypesUTF8STRING,
    '_NET_WM_ICON_NAME'          : AtomTypesUTF8STRING,
    '_NET_WM_VISIBLE_ICON_NAME'  : AtomTypesUTF8STRING,
    '_NET_WM_DESKTOP'            : AtomTypesCARDINAL,
    '_NET_WM_WINDOW_TYPE'        : AtomTypesATOM,
    '_NET_WM_STATE'              : AtomTypesATOM,
    '_NET_WM_ALLOWED_ACTIONS'    : AtomTypesATOM,
    '_NET_WM_STRUT'              : AtomTypesCARDINAL,
    '_NET_WM_STRUT_PARTIAL'      : AtomTypesCARDINAL,
    '_NET_WM_ICON_GEOMETRY'      : AtomTypesCARDINAL,
    '_NET_WM_ICON'               : AtomTypesCARDINAL,
    '_NET_WM_PID'                : AtomTypesCARDINAL,
    '_NET_WM_HANDLED_ICONS'      : AtomTypesCARDINAL,
    '_NET_WM_USER_TIME'          : AtomTypesCARDINAL,
    '_NET_WM_USER_TIME_WINDOW'   : AtomTypesCARDINAL,
    '_NET_FRAME_EXTENTS'         : AtomTypesCARDINAL,

    '_OB_APP_TYPE'               : AtomTypesUTF8STRING,
    }

WINDOW_TYPES = {
    '_NET_WM_WINDOW_TYPE_DESKTOP'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DOCK'          : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_TOOLBAR'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_MENU'          : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_UTILITY'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_SPLASH'        : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DIALOG'        : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU' : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_POPUP_MENU'    : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_TOOLTIP'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_NOTIFICATION'  : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_COMBO'         : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DND'           : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_NORMAL'        : AtomTypesATOM,
    }

WINDOW_STATES = {
    '_NET_WM_STATE_MODAL'             : AtomTypesATOM,
    '_NET_WM_STATE_STICKY'            : AtomTypesATOM,
    '_NET_WM_STATE_MAXIMIZED_VERT'    : AtomTypesATOM,
    '_NET_WM_STATE_MAXIMIZED_HORZ'    : AtomTypesATOM,
    '_NET_WM_STATE_SHADED'            : AtomTypesATOM,
    '_NET_WM_STATE_SKIP_TASKBAR'      : AtomTypesATOM,
    '_NET_WM_STATE_SKIP_PAGER'        : AtomTypesATOM,
    '_NET_WM_STATE_HIDDEN'            : AtomTypesATOM,
    '_NET_WM_STATE_FULLSCREEN'        : AtomTypesATOM,
    '_NET_WM_STATE_ABOVE'             : AtomTypesATOM,
    '_NET_WM_STATE_BELOW'             : AtomTypesATOM,
    '_NET_WM_STATE_DEMANDS_ATTENTION' : AtomTypesATOM,
    }

WINDOW_ALLOWED_ACTIONS = {
    '_NET_WM_ACTION_MOVE'           : AtomTypesATOM,
    '_NET_WM_ACTION_RESIZE'         : AtomTypesATOM,
    '_NET_WM_ACTION_MINIMIZE'       : AtomTypesATOM,
    '_NET_WM_ACTION_SHADE'          : AtomTypesATOM,
    '_NET_WM_ACTION_STICK'          : AtomTypesATOM,
    '_NET_WM_ACTION_MAXIMIZE_HORZ'  : AtomTypesATOM,
    '_NET_WM_ACTION_MAXIMIZE_VERT'  : AtomTypesATOM,
    '_NET_WM_ACTION_FULLSCREEN'     : AtomTypesATOM,
    '_NET_WM_ACTION_CHANGE_DESKTOP' : AtomTypesATOM,
    '_NET_WM_ACTION_CLOSE'          : AtomTypesATOM,
    '_NET_WM_ACTION_ABOVE'          : AtomTypesATOM,
    '_NET_WM_ACTION_BELOW'          : AtomTypesATOM,
    }


PROPERTIY_ATOM_MAP = {}
PROPERTIY_ATOM_MAP.update(BUILTIN_ATOMS)
PROPERTIY_ATOM_MAP.update(BASE_ATOMS)
PROPERTIY_ATOM_MAP.update(WINDOW_TYPES)
PROPERTIY_ATOM_MAP.update(WINDOW_STATES)
PROPERTIY_ATOM_MAP.update(WINDOW_ALLOWED_ACTIONS)


class PropertyAtom(object):
    r"""
    """
    atoms = PROPERTIY_ATOM_MAP

    @staticmethod
    def get_types(name):
        r"""SUMMARY

        get_types_length()

        @Return:
        """
        return PropertyAtom.atoms.get(name, AtomTypesANY)

    @staticmethod
    def get_name(name):
        r"""SUMMARY

        get_types(default=0)

        @Arguments:
        - `default`:

        @Return:
        """
        return PropertyAtom.get_types(name).name

    @staticmethod
    def get_length(name):
        r"""SUMMARY

        get_length()

        @Return:
        """
        return PropertyAtom.get_types(name).length



* Thu 27 Mar 2014 12:59:08 PM JST
from abc import ABCMeta, abstractmethod
* Thu 27 Mar 2014 01:04:41 PM JST
    def __init__(self, reply):
        r"""
        """
        self._reply = reply

* Thu 27 Mar 2014 01:04:51 PM JST
__metaclass__ = ABCMeta
* Thu 27 Mar 2014 01:05:04 PM JST
    @abstractmethod
    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        raise NotImplementedError()


* Thu 27 Mar 2014 01:05:18 PM JST
    def get_bytes_after(self, ):
        r"""SUMMARY

        get_bytes_after()

        @Return:
        """
        bytes_after = self._reply.reply.bytes_after
        if bytes_after:
            return (self
                    ._reply
                    .requester
                    .get_property_reply(self._reply.window,
                                        self._reply.property,
                                        self._reply.length,
                                        bytes_after / 4 + 1))
        return None


* Thu 27 Mar 2014 01:06:09 PM JST
    def get_full_value(self, ):
        r"""SUMMARY

        get_full_value()

        @Return:
        """
        value = self.get_value()
        after_value = self.get_bytes_after()
        if after_value:
            value += after_value.get_value()
        return value

* Thu 27 Mar 2014 01:07:06 PM JST
    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        display = self._reply.requester.display
        identifier = AtomIdentifier(display=display).identify_atom
        values = list(unpack('I' * self._reply.reply.value_len,
                             self._reply.reply.value.buf()))
        return [identifier(x) for x in values]

* Thu 27 Mar 2014 01:09:04 PM JST
    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        display = self._reply.requester.display
        identifier = AtomIdentifier(display=display).identify_atom
        values = list(unpack('I' * self._reply.reply.value_len,
                             self._reply.reply.value.buf()))
        return [identifier(x) for x in values]

* Thu 27 Mar 2014 01:10:10 PM JST

* Thu 27 Mar 2014 01:10:10 PM JST

* Thu 27 Mar 2014 01:10:10 PM JST
        display = self._reply.requester.display

* Thu 27 Mar 2014 01:11:27 PM JST
self._reply.requester.atom
* Thu 27 Mar 2014 01:11:33 PM JST

* Thu 27 Mar 2014 01:11:33 PM JST

* Thu 27 Mar 2014 01:11:33 PM JST
        identifier = self._reply.requester.atom

* Thu 27 Mar 2014 01:13:56 PM JST
    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        return list(unpack('I' * self._reply.reply.value_len,
                           self._reply.reply.value.buf()))

* Thu 27 Mar 2014 01:14:38 PM JST
    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        return str(self._reply.reply.value.buf())

* Thu 27 Mar 2014 01:15:25 PM JST
    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        return list(_unpack('I' * self._reply.reply.value_len,
                            self._reply.reply.value.buf()))

* Thu 27 Mar 2014 01:15:40 PM JST
    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        ret = []
        append = ret.append
        chr_ = ''
        for ord_ in self._reply.reply.value:
            if not ord_:
                append(chr_)
                chr_ = ''
            else:
                chr_ += chr(ord)
        return ret

* Thu 27 Mar 2014 01:16:16 PM JST
    def get_value(self, ):
        r"""SUMMARY
        
        get_value()
        
        @Return:
        """
        # TODO: (Atami) [2014/03/27]

* Thu 27 Mar 2014 01:24:04 PM JST
PropertyAtom
* Thu 27 Mar 2014 01:30:21 PM JST
        ConnectionAbstract.__init__(self, connection)
        if not hasattr(self.connection, 'atom'):
            self.connection.atom = AtomIdentifier(self.connection)

* Thu 27 Mar 2014 01:30:45 PM JST
GetPropertyUnchecked
* Thu 27 Mar 2014 01:30:58 PM JST
ListProperties
* Thu 27 Mar 2014 01:31:05 PM JST
ListPropertiesUnchecked
* Thu 27 Mar 2014 01:31:16 PM JST
ChangeProperty
* Thu 27 Mar 2014 01:31:25 PM JST
ChangePropertyChecked
* Thu 27 Mar 2014 01:31:34 PM JST
DeleteProperty
* Thu 27 Mar 2014 01:31:40 PM JST
DeletePropertyChecked
* Thu 27 Mar 2014 01:31:49 PM JST
RotateProperties
* Thu 27 Mar 2014 01:31:56 PM JST
RotatePropertiesChecked
* Thu 27 Mar 2014 01:32:16 PM JST
    @property
    def atom(self, ):
        r"""SUMMARY

        atom()

        @Return:
        """
        return self.connection.atom


* Thu 27 Mar 2014 01:32:32 PM JST
GetProperty
* Thu 27 Mar 2014 01:33:03 PM JST
delete, window, property, type, long_offset, long_length
* Thu 27 Mar 2014 01:35:22 PM JST
property
* Thu 27 Mar 2014 01:35:57 PM JST
        return self.core.GetProperty(delete, window, self.atom(property_),
                                     self.atom(type_), long_offset, long_length)

* Thu 27 Mar 2014 01:36:05 PM JST
delete, window, property_, type_, long_offset,
                    long_length
* Thu 27 Mar 2014 01:36:11 PM JST
                    
* Thu 27 Mar 2014 01:36:22 PM JST
Unchecked
* Thu 27 Mar 2014 01:36:33 PM JST
            
* Thu 27 Mar 2014 01:36:40 PM JST
            
* Thu 27 Mar 2014 01:37:26 PM JST
ChangeProperty
* Thu 27 Mar 2014 01:37:37 PM JST
mode, window, property, type, format, data_len, data
* Thu 27 Mar 2014 01:38:18 PM JST
self.atom(property_), self.atom(type_)
* Thu 27 Mar 2014 01:38:34 PM JST
format_
* Thu 27 Mar 2014 01:38:45 PM JST
data_len, data
* Thu 27 Mar 2014 01:39:41 PM JST
        return self.core.ChangeProperty(mode, window, self.atom(property_),
                                        self.atom(type_), format_, data_len,
                                        data)

* Thu 27 Mar 2014 01:40:00 PM JST
Checked
* Thu 27 Mar 2014 01:40:18 PM JST
mode, window, property_, type_, format_,
                       data_len, data
* Thu 27 Mar 2014 01:40:40 PM JST
DeleteProperty
* Thu 27 Mar 2014 01:40:52 PM JST
window, property
* Thu 27 Mar 2014 01:41:34 PM JST
return self.core.DeleteProperty(window, self.atom(property_))
* Thu 27 Mar 2014 01:41:50 PM JST
window, property_
* Thu 27 Mar 2014 01:42:00 PM JST
RotateProperties
* Thu 27 Mar 2014 01:42:08 PM JST
window, atoms_len, delta, atoms
* Thu 27 Mar 2014 01:42:17 PM JST
core.RotateProperties(self, window, atoms_len, delta, atoms)
* Thu 27 Mar 2014 01:42:26 PM JST
self, 
* Thu 27 Mar 2014 01:42:36 PM JST
return self.core.RotateProperties(window, atoms_len, delta, atoms)
* Thu 27 Mar 2014 01:42:47 PM JST
window, atoms_len, delta, atoms)
* Thu 27 Mar 2014 01:42:56 PM JST
Checked
* Thu 27 Mar 2014 02:15:23 PM JST
'requester', 'reply', 'delete', 'window',
                 'property', 'type', 'offset', 'length'
* Thu 27 Mar 2014 02:17:19 PM JST
        self.requester = requester
        self.reply = reply
        self.delete = delete
        self.window = window
        self.property = property_
        self.type = type_
        self.offset = offset
        self.length = length

* Thu 27 Mar 2014 02:17:33 PM JST
requester, reply, delete, window,
                 property_, type_, offset, length
* Thu 27 Mar 2014 02:18:06 PM JST
_reply
* Thu 27 Mar 2014 02:18:14 PM JST

* Thu 27 Mar 2014 02:18:14 PM JST

* Thu 27 Mar 2014 02:18:14 PM JST
                    ._reply

* Thu 27 Mar 2014 02:18:36 PM JST
_reply.
* Thu 27 Mar 2014 02:18:37 PM JST
_reply.
* Thu 27 Mar 2014 02:18:37 PM JST
_reply.
* Thu 27 Mar 2014 02:18:44 PM JST
                    
* Thu 27 Mar 2014 02:18:47 PM JST
                    
* Thu 27 Mar 2014 02:19:08 PM JST
_reply
* Thu 27 Mar 2014 02:19:14 PM JST
_reply
* Thu 27 Mar 2014 02:19:18 PM JST
_reply
* Thu 27 Mar 2014 02:19:21 PM JST
                            
* Thu 27 Mar 2014 02:19:29 PM JST
_reply
* Thu 27 Mar 2014 02:20:14 PM JST
make_list_append
* Thu 27 Mar 2014 02:20:18 PM JST
make_list_append
* Thu 27 Mar 2014 02:20:40 PM JST
result
* Thu 27 Mar 2014 02:20:46 PM JST

* Thu 27 Mar 2014 02:20:46 PM JST

* Thu 27 Mar 2014 02:20:46 PM JST
        ret = []

* Thu 27 Mar 2014 02:20:46 PM JST
        ret = []

* Thu 27 Mar 2014 02:20:46 PM JST
        ret = []
        append = ret.append

* Thu 27 Mar 2014 02:21:00 PM JST
_reply
* Thu 27 Mar 2014 02:21:03 PM JST
_reply
* Thu 27 Mar 2014 02:21:10 PM JST
_reply.
* Thu 27 Mar 2014 02:29:44 PM JST
type_,
* Thu 27 Mar 2014 02:29:48 PM JST
long_
* Thu 27 Mar 2014 02:29:54 PM JST
long_
* Thu 27 Mar 2014 02:30:07 PM JST
                    
* Thu 27 Mar 2014 02:30:11 PM JST
long_
* Thu 27 Mar 2014 02:30:13 PM JST
long_
* Thu 27 Mar 2014 02:31:10 PM JST
PropertyAtom.get_types(prop)
* Thu 27 Mar 2014 02:31:53 PM JST
return 
* Thu 27 Mar 2014 02:34:03 PM JST
type_,
* Thu 27 Mar 2014 02:34:05 PM JST
                             
* Thu 27 Mar 2014 02:34:09 PM JST
long_
* Thu 27 Mar 2014 02:34:10 PM JST
long_
* Thu 27 Mar 2014 02:34:19 PM JST
        prop = self.atom(property_)
        types = PropertyAtom.get_types(prop)
        reply = self.core.GetProperty(delete, window, self.atom(property_),
                                      self.atom(types.name), offset, length)
        return types(self, reply, delete, window, prop, types, offset, length)

* Thu 27 Mar 2014 02:35:37 PM JST
types(self, reply, delete, window, prop, types, offset, length)
* Thu 27 Mar 2014 02:35:47 PM JST
types(self, reply, delete, window, prop, types, offset, length)
* Thu 27 Mar 2014 02:36:24 PM JST
            
* Thu 27 Mar 2014 02:36:28 PM JST
            
* Thu 27 Mar 2014 02:38:10 PM JST
    def GetProperty(self, delete, window, property_, offset=0, length=10):
        r"""SUMMARY

        GetProperty()

        @Return:
        """
        prop = self.atom(property_)
        types = PropertyAtom.get_types(prop)
        reply = self.core.GetProperty(delete, window, self.atom(property_),
                                      self.atom(types.name), offset, length)
        return types(self, reply, delete, window,
                     prop, types, offset, length).get_value()

* Thu 27 Mar 2014 02:38:48 PM JST
    def GetFullProperty(self, delete, window, property_, offset=0, length=10):
        r"""SUMMARY

        GetProperty()

        @Return:
        """
        prop = self.atom(property_)
        types = PropertyAtom.get_types(prop)
        reply = self.core.GetProperty(delete, window, self.atom(property_),
                                      self.atom(types.name), offset, length)
        return types(self, reply, delete, window,
                     prop, types, offset, length).get_full_value()


* Thu 27 Mar 2014 02:41:31 PM JST
requester
* Thu 27 Mar 2014 02:41:35 PM JST
requester
* Thu 27 Mar 2014 02:41:40 PM JST
requester
* Thu 27 Mar 2014 02:42:00 PM JST
requester
* Thu 27 Mar 2014 02:42:03 PM JST
    
* Thu 27 Mar 2014 02:42:05 PM JST
                                                   
* Thu 27 Mar 2014 02:42:06 PM JST
                                                
* Thu 27 Mar 2014 02:44:47 PM JST
get_property_reply
* Thu 27 Mar 2014 02:45:01 PM JST
    
* Thu 27 Mar 2014 02:45:02 PM JST
                                            
* Thu 27 Mar 2014 02:45:03 PM JST
                                     
* Thu 27 Mar 2014 02:45:19 PM JST
                
* Thu 27 Mar 2014 02:45:20 PM JST
                                            
* Thu 27 Mar 2014 02:45:25 PM JST
    
* Thu 27 Mar 2014 02:45:26 PM JST
                                        
* Thu 27 Mar 2014 02:46:07 PM JST
after_value
* Thu 27 Mar 2014 02:46:38 PM JST
requester
* Thu 27 Mar 2014 02:46:50 PM JST
           
* Thu 27 Mar 2014 02:47:09 PM JST
            
* Thu 27 Mar 2014 02:48:47 PM JST
import xcb2, xcb2.xproto
from xcb2.xconnection.connection import Connection
from xcb2.xconnection import atom
c=Connection()

* Thu 27 Mar 2014 02:50:22 PM JST
True
* Thu 27 Mar 2014 02:50:42 PM JST
'_NET_WM_NAME'
* Thu 27 Mar 2014 02:51:05 PM JST
54525974
* Thu 27 Mar 2014 02:51:56 PM JST
'WM_CLASS'
* Thu 27 Mar 2014 02:53:00 PM JST
            
* Thu 27 Mar 2014 02:53:08 PM JST
.reply()
* Thu 27 Mar 2014 02:53:21 PM JST
            
* Thu 27 Mar 2014 02:53:32 PM JST
.get_full_value()
* Thu 27 Mar 2014 02:53:36 PM JST
.reply()
* Thu 27 Mar 2014 02:54:35 PM JST
from xcb2.xconnection import properties
* Thu 27 Mar 2014 02:54:45 PM JST
import xcb2, xcb2.xproto
from xcb2.xconnection.connection import Connection
from xcb2.xconnection import properties
from xcb2.xconnection import atom
c=Connection()

* Thu 27 Mar 2014 02:55:21 PM JST
54525974
* Thu 27 Mar 2014 02:57:16 PM JST

* Thu 27 Mar 2014 02:57:16 PM JST

* Thu 27 Mar 2014 02:57:16 PM JST
        print('DEBUG-1-properties.py')

* Thu 27 Mar 2014 02:57:38 PM JST

* Thu 27 Mar 2014 02:57:39 PM JST

* Thu 27 Mar 2014 02:57:39 PM JST
        print('DEBUG-1-properties.py')

* Thu 27 Mar 2014 02:57:55 PM JST

* Thu 27 Mar 2014 02:57:55 PM JST

* Thu 27 Mar 2014 02:57:56 PM JST

* Thu 27 Mar 2014 02:57:56 PM JST

* Thu 27 Mar 2014 02:57:56 PM JST
        print(reply)

* Thu 27 Mar 2014 02:57:57 PM JST

* Thu 27 Mar 2014 02:57:58 PM JST

* Thu 27 Mar 2014 02:57:58 PM JST
        print(reply)

* Thu 27 Mar 2014 03:03:13 PM JST

* Thu 27 Mar 2014 03:03:14 PM JST

* Thu 27 Mar 2014 03:03:14 PM JST
        print('DEBUG-1-properties.py')

* Thu 27 Mar 2014 03:03:15 PM JST

* Thu 27 Mar 2014 03:03:15 PM JST

* Thu 27 Mar 2014 03:03:15 PM JST
        print('DEBUG-2-properties.py')

* Thu 27 Mar 2014 03:23:05 PM JST
.get_value()
* Thu 27 Mar 2014 03:23:07 PM JST
                     
* Thu 27 Mar 2014 03:23:13 PM JST
.get_value()
* Thu 27 Mar 2014 03:23:14 PM JST
                     
* Thu 27 Mar 2014 03:23:43 PM JST
delete, window, property_, offset=0, length=10
* Thu 27 Mar 2014 03:24:49 PM JST
        return self.GetProperty(
            delete, window, property_, offset, length).get_full_value()

* Thu 27 Mar 2014 03:25:13 PM JST
        return self.GetProperty(
            delete, window, property_, offset, length).get_full_value()

* Thu 27 Mar 2014 03:27:55 PM JST
import xcb2, xcb2.xproto
from xcb2.xconnection.connection import Connection
from xcb2.xconnection import properties
from xcb2.xconnection import atom
c=Connection()

* Thu 27 Mar 2014 03:28:41 PM JST
54525974
* Thu 27 Mar 2014 03:30:15 PM JST

* Thu 27 Mar 2014 03:30:16 PM JST

* Thu 27 Mar 2014 03:30:16 PM JST
        print(type_)

* Thu 27 Mar 2014 03:40:15 PM JST
emacs\x00Emacs\x00
* Thu 27 Mar 2014 03:42:35 PM JST
ConnectionAbstract
* Thu 27 Mar 2014 03:43:03 PM JST
ConnectionAbstract
* Thu 27 Mar 2014 03:43:22 PM JST
        ConnectionAbstract.__init__(self, connection)
        if not hasattr(self.connection, 'atom'):
            self.connection.atom = AtomIdentifier(self.connection)

* Thu 27 Mar 2014 03:43:29 PM JST

* Thu 27 Mar 2014 03:43:29 PM JST

* Thu 27 Mar 2014 03:43:29 PM JST
        ConnectionAbstract.__init__(self, connection)

* Thu 27 Mar 2014 03:43:31 PM JST
atom
* Thu 27 Mar 2014 03:43:38 PM JST
AtomIdentifier
* Thu 27 Mar 2014 03:43:47 PM JST
atom
* Thu 27 Mar 2014 03:50:18 PM JST
self.property.GetFullProperty(delete, window, 'WM_CLASS')
* Thu 27 Mar 2014 03:53:19 PM JST
self.property.GetFullProperty(delete, window, 'WM_CLASS')
* Thu 27 Mar 2014 03:53:33 PM JST
WM_CLASS
* Thu 27 Mar 2014 03:54:37 PM JST
'WM_LOCALE_NAME'
* Thu 27 Mar 2014 03:54:46 PM JST
    def getWM_NAME(self, window, delete=False):
        r"""SUMMARY

        getWM_NAME(window, delete=False)

        @Arguments:
        - `window`:
        - `delete`:

        @Return:
        """
        return self.property.GetFullProperty(delete, window, 'WM_NAME')

* Thu 27 Mar 2014 03:54:58 PM JST
$1
* Thu 27 Mar 2014 03:55:50 PM JST
WM_ICON_NAME
* Thu 27 Mar 2014 03:56:03 PM JST
WM_TRANSIENT_FOR
* Thu 27 Mar 2014 03:56:09 PM JST
WM_PROTOCOLS
* Thu 27 Mar 2014 03:56:17 PM JST
WM_COLORMAP_WINDOWS
* Thu 27 Mar 2014 03:56:29 PM JST
WM_CLIENT_MACHINE
* Thu 27 Mar 2014 03:56:41 PM JST
WM_STATE
* Thu 27 Mar 2014 03:56:53 PM JST
_WIN_WORKSPACE
* Thu 27 Mar 2014 03:57:01 PM JST
_WIN_STATE
* Thu 27 Mar 2014 03:57:06 PM JST
_NET_SUPPORTED
* Thu 27 Mar 2014 03:57:14 PM JST
_NET_CLIENT_LIST
* Thu 27 Mar 2014 03:57:20 PM JST
_NET_CLIENT_LIST_STACKING
* Thu 27 Mar 2014 03:57:33 PM JST
_NET_NUMBER_OF_DESKTOPS
* Thu 27 Mar 2014 03:57:46 PM JST
_NET_DESKTOP_GEOMETRY
* Thu 27 Mar 2014 03:57:57 PM JST
_NET_DESKTOP_VIEWPORT
* Thu 27 Mar 2014 03:58:07 PM JST
_NET_CURRENT_DESKTOP
* Thu 27 Mar 2014 03:58:21 PM JST
_NET_DESKTOP_NAMES
* Thu 27 Mar 2014 03:58:37 PM JST
_NET_ACTIVE_WINDOW
* Thu 27 Mar 2014 03:58:53 PM JST
_NET_WORKAREA
* Thu 27 Mar 2014 03:59:00 PM JST
_NET_SUPPORTING_WM_CHECK
* Thu 27 Mar 2014 03:59:16 PM JST
_NET_VIRTUAL_ROOTS
* Thu 27 Mar 2014 03:59:26 PM JST
_NET_DESKTOP_LAYOUT
* Thu 27 Mar 2014 03:59:36 PM JST
_NET_SHOWING_DESKTOP
* Thu 27 Mar 2014 03:59:45 PM JST
_NET_CLOSE_WINDOW
* Thu 27 Mar 2014 03:59:51 PM JST
_NET_MOVERESIZE_WINDOW
* Thu 27 Mar 2014 04:00:03 PM JST
_NET_WM_MORERESIZE
* Thu 27 Mar 2014 04:00:12 PM JST
_NET_RESTACK_WINDOW
* Thu 27 Mar 2014 04:00:24 PM JST
_NET_REQUEST_FRAME_EXTENTS
* Thu 27 Mar 2014 04:00:32 PM JST
_NET_WM_NAME
* Thu 27 Mar 2014 04:00:39 PM JST
_NET_WM_VISIBLE_NAME
* Thu 27 Mar 2014 04:00:51 PM JST
_NET_WM_ICON_NAME
* Thu 27 Mar 2014 04:01:00 PM JST
_NET_WM_VISIBLE_ICON_NAME
* Thu 27 Mar 2014 04:01:07 PM JST
_NET_WM_DESKTOP
* Thu 27 Mar 2014 04:01:15 PM JST
_NET_WM_WINDOW_TYPE
* Thu 27 Mar 2014 04:01:20 PM JST
_NET_WM_STATE
* Thu 27 Mar 2014 04:01:27 PM JST
_NET_WM_ALLOWED_ACTIONS
* Thu 27 Mar 2014 04:01:36 PM JST
_NET_WM_STRUT
* Thu 27 Mar 2014 04:01:41 PM JST
_NET_WM_STRUT_PARTIAL
* Thu 27 Mar 2014 04:01:47 PM JST
_NET_WM_ICON_GEOMETRY
* Thu 27 Mar 2014 04:01:56 PM JST
_NET_WM_ICON
* Thu 27 Mar 2014 04:02:09 PM JST
_NET_WM_PID
* Thu 27 Mar 2014 04:02:14 PM JST
_NET_WM_HANDLED_ICONS
* Thu 27 Mar 2014 04:02:22 PM JST
_NET_WM_USER_TIME
* Thu 27 Mar 2014 04:02:29 PM JST
_NET_WM_USER_TIME_WINDOW
* Thu 27 Mar 2014 04:02:38 PM JST
_NET_FRAME_EXTENTS
* Thu 27 Mar 2014 04:02:48 PM JST
_OB_APP_TYPE
* Thu 27 Mar 2014 04:02:53 PM JST
_NET_WM_WINDOW_TYPE_DESKTOP
* Thu 27 Mar 2014 04:07:34 PM JST
        try:
            return self.get_full_property(window, '_NET_WM_WINDOW_TYPE')
        except xproto.BadWindow as err:
            LOG.warning('Warning: {}{}'.format(window, err))
            return None

* Thu 27 Mar 2014 04:08:07 PM JST
        return self.property.GetFullProperty(
            delete, window, '_NET_WM_WINDOW_TYPE')

* Thu 27 Mar 2014 04:08:41 PM JST
xproto
* Thu 27 Mar 2014 04:10:36 PM JST
return 
* Thu 27 Mar 2014 04:12:34 PM JST
Properties
* Thu 27 Mar 2014 04:13:20 PM JST
Properties
* Thu 27 Mar 2014 04:13:51 PM JST
import xcb2, xcb2.xproto
from xcb2.xconnection.connection import Connection

* Thu 27 Mar 2014 04:13:59 PM JST
c=Connection()
* Thu 27 Mar 2014 04:14:24 PM JST
getWM_CLASS
* Thu 27 Mar 2014 04:14:33 PM JST
54525974
* Thu 27 Mar 2014 04:32:09 PM JST
B
* Thu 27 Mar 2014 04:35:31 PM JST
buf = _StringIO()
* Thu 27 Mar 2014 04:36:36 PM JST
buf.write(_pack('BxBH2I', code, format, 
* Thu 27 Mar 2014 04:36:36 PM JST
        buf.write(_pack('BxBH2I', code, format, 
* Thu 27 Mar 2014 04:37:35 PM JST
_array('b', event)
* Thu 27 Mar 2014 04:37:41 PM JST
buf.write(str(buffer(_array('b', event))))
* Thu 27 Mar 2014 04:37:46 PM JST
event
* Thu 27 Mar 2014 04:37:49 PM JST
                        
* Thu 27 Mar 2014 04:39:14 PM JST
        return self.SendEvent(
            propagate, destination, event_mask, buf.getvalue())

* Thu 27 Mar 2014 04:39:21 PM JST

* Thu 27 Mar 2014 04:39:21 PM JST

* Thu 27 Mar 2014 04:39:21 PM JST
        # TODO: (Atami) [2014/03/27]

* Thu 27 Mar 2014 04:39:21 PM JST
        # TODO: (Atami) [2014/03/27]

* Thu 27 Mar 2014 04:39:21 PM JST
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

* Thu 27 Mar 2014 04:39:27 PM JST
propagate, destination, event_mask, 
* Thu 27 Mar 2014 04:39:57 PM JST
self, propagate, destination, event_mask,
                      code, format_, sequence_number, window, atom, data
* Thu 27 Mar 2014 04:40:04 PM JST
self, 
* Thu 27 Mar 2014 04:40:15 PM JST
        buf = _StringIO()
        buf.write(_pack('BxBH2I', code, format_, sequence_number, window, atom))
        buf.write(str(buffer(_array('b', data))))
        return self.SendEvent(
            propagate, destination, event_mask, buf.getvalue())

* Thu 27 Mar 2014 04:42:44 PM JST
EventCode
* Thu 27 Mar 2014 04:43:28 PM JST
code, 
* Thu 27 Mar 2014 04:43:39 PM JST
EventCode.ClientMessage
* Thu 27 Mar 2014 05:05:26 PM JST
'_NET_WM_STATE_FULLSCREEN'
* Thu 27 Mar 2014 05:15:26 PM JST
    MODE_UNSET  = 0
    MODE_SET    = 1
    MODE_TOGGLE = 2

* Thu 27 Mar 2014 05:16:31 PM JST
MODE_
* Thu 27 Mar 2014 05:16:33 PM JST
MODE_
* Thu 27 Mar 2014 05:16:34 PM JST
MODE_
* Thu 27 Mar 2014 05:18:11 PM JST
ConnectionAbstract
* Thu 27 Mar 2014 05:19:17 PM JST
    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)
        if not hasattr(self.connection, 'property'):
            self.connection.property = Property(self.connection)

* Thu 27 Mar 2014 05:19:29 PM JST
    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)
        if not hasattr(self.connection, 'atom'):
            self.connection.atom = AtomIdentifier(self.connection)

    @property
    def atom(self, ):
        r"""SUMMARY

        atom()

        @Return:
        """
        return self.connection.atom

* Thu 27 Mar 2014 05:20:06 PM JST
from xcb2.xconnection.atom import AtomIdentifier
* Thu 27 Mar 2014 05:21:35 PM JST
sendevent
* Thu 27 Mar 2014 05:21:58 PM JST
sendevent
* Thu 27 Mar 2014 05:22:04 PM JST
self.connection.atom = AtomIdentifier(self.connection)
* Thu 27 Mar 2014 05:22:12 PM JST

* Thu 27 Mar 2014 05:22:15 PM JST
AtomIdentifier
* Thu 27 Mar 2014 05:22:22 PM JST
atom
* Thu 27 Mar 2014 05:22:31 PM JST
SendEvent
* Thu 27 Mar 2014 05:22:37 PM JST
atom
* Thu 27 Mar 2014 05:23:06 PM JST
connec
* Fri 28 Mar 2014 05:23:01 AM JST
code, 
* Fri 28 Mar 2014 05:23:02 AM JST
                     code, 
* Fri 28 Mar 2014 05:24:00 AM JST
            
* Fri 28 Mar 2014 11:37:55 AM JST
EventMask
* Fri 28 Mar 2014 11:38:55 AM JST
event_mask,
* Fri 28 Mar 2014 11:45:44 AM JST
import 
* Fri 28 Mar 2014 11:46:45 AM JST
print 
* Fri 28 Mar 2014 11:47:58 AM JST
True
* Fri 28 Mar 2014 11:48:41 AM JST

* Fri 28 Mar 2014 11:48:42 AM JST
IntEnum
* Fri 28 Mar 2014 11:48:46 AM JST
_IntEnum
* Fri 28 Mar 2014 11:49:19 AM JST
Propagate
* Fri 28 Mar 2014 11:50:09 AM JST
propagate, 
* Fri 28 Mar 2014 11:50:42 AM JST
event_mask,
* Fri 28 Mar 2014 11:52:49 AM JST
code, 
* Fri 28 Mar 2014 11:53:06 AM JST
Propagate.FALSE, destination, EventMask.NoEvent, buf.getvalue()
* Fri 28 Mar 2014 11:53:15 AM JST
propagate, 
* Fri 28 Mar 2014 11:53:17 AM JST
event_mask,
* Fri 28 Mar 2014 11:53:21 AM JST
                      
* Fri 28 Mar 2014 12:01:54 PM JST
'WM_DELETE_WINDOW'
* Fri 28 Mar 2014 12:03:26 PM JST
_NET_CLOSE_WINDOW
* Fri 28 Mar 2014 12:03:35 PM JST
WM_PROTOCOLS
* Fri 28 Mar 2014 12:03:45 PM JST
_NET_WM_STATE_HIDDEN
* Fri 28 Mar 2014 12:04:24 PM JST
_NET_WM_STATE_BELOW
* Fri 28 Mar 2014 12:04:39 PM JST
_NET_WM_STATE
* Fri 28 Mar 2014 12:05:24 PM JST
_NET_CLOSE_WINDOW WM_PROTOCOLS _NET_WM_STATE_HIDDEN _NET_WM_STATE_BELOW _NET_WM_STATE
* Fri 28 Mar 2014 12:16:30 PM JST
Atom32Types
* Fri 28 Mar 2014 12:18:53 PM JST
propagate, 
* Fri 28 Mar 2014 12:18:58 PM JST
            
* Fri 28 Mar 2014 12:19:26 PM JST
_NET_WM_STATE
* Fri 28 Mar 2014 12:40:27 PM JST
_NET_WM_STATE
* Fri 28 Mar 2014 12:46:48 PM JST
window
* Fri 28 Mar 2014 12:47:07 PM JST
destination,
* Fri 28 Mar 2014 12:47:08 PM JST
                             
* Fri 28 Mar 2014 12:47:13 PM JST
destination, 
* Fri 28 Mar 2014 12:47:14 PM JST
                      
* Fri 28 Mar 2014 12:47:28 PM JST
destination
* Fri 28 Mar 2014 01:52:03 PM JST

* Fri 28 Mar 2014 01:52:04 PM JST
ConnectionAbstract
* Fri 28 Mar 2014 01:52:06 PM JST
abstract
* Fri 28 Mar 2014 01:52:36 PM JST
PropertyAtom
* Fri 28 Mar 2014 01:54:14 PM JST
from 
* Fri 28 Mar 2014 01:54:24 PM JST
import 
* Fri 28 Mar 2014 01:54:40 PM JST
c=xcb2.xconnection.Connection()
* Fri 28 Mar 2014 01:55:46 PM JST
class AtomTypesAbstract(object):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta
    __slots__ = ('name', 'length', 'parent', 'reply', 'delete', 'window',
                 'property', 'type', 'offset', 'length')

    def __init__(self, parent, reply, delete, window,
                 property_, type_, offset, length):
        r"""
        """
        self.parent = parent
        self.reply = reply
        self.delete = delete
        self.window = window
        self.property = property_
        self.type = type_
        self.offset = offset
        self.length = length

    @abstractmethod
    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        raise NotImplementedError()

    def get_bytes_after(self, ):
        r"""SUMMARY

        get_bytes_after()

        @Return:
        """
        bytes_after = self.reply.bytes_after
        if bytes_after:
            return (
                self.parent.GetProperty(self.delete, self.window, self.property,
                                        self.length, bytes_after / 4 + 1))
        return None

    def get_full_value(self, ):
        r"""SUMMARY

        get_full_value()

        @Return:
        """
        value = self.get_value()
        after_value = self.get_bytes_after()
        if after_value:
            value += after_value
        return value


class Atom0Types(AtomTypesAbstract):
    r"""SUMMARY
    """
    length = 0


class Atom8Types(AtomTypesAbstract):
    r"""SUMMARY
    """
    length = 8

    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        return str(self.reply.value.buf())


class Atom32Types(AtomTypesAbstract):
    r"""SUMMARY
    """
    length = 32

    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        return list(_unpack('I' * self.reply.value_len, self.reply.value.buf()))


class AtomTypesSTRING(Atom8Types):
    r"""SUMMARY
    """
    name = 'STRING'


class AtomTypesUTF8STRING(Atom8Types):
    r"""SUMMARY
    """
    name = 'UTF8_STRING'


class AtomTypesUTF8STRINGLIST(Atom8Types):
    r"""SUMMARY
    """
    name = 'UTF8_STRING[]'

    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        result, append = make_list_append()
        chr_ = ''
        for ord_ in self.reply.value:
            if not ord_:
                append(chr_)
                chr_ = ''
            else:
                chr_ += chr(ord)
        return result


class AtomTypesWINDOW(Atom32Types):
    r"""SUMMARY
    """
    name = 'WINDOW'


class AtomTypesATOM(Atom32Types):
    r"""SUMMARY
    """
    name = 'ATOM'

    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        values = list(
            _unpack('I' * self.reply.value_len, self.reply.value.buf()))
        return [self.parent.atom(x) for x in values]


class AtomTypesCARDINAL(Atom32Types):
    r"""SUMMARY
    """
    name = 'CARDINAL'


class AtomTypesANY(Atom32Types):
    r"""SUMMARY
    """
    name = 'ANY'

    def get_value(self, ):
        r"""SUMMARY

        get_value()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        print('warn...')


class AtomTypesNone(Atom32Types):
    r"""SUMMARY
    """
    name = ''

    def get_value(self, ):
        r"""SUMMARY

        get_value()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]


BUILTIN_ATOMS = {
    'WM_NAME'             : AtomTypesSTRING,
    'WM_LOCALE_NAME'      : AtomTypesSTRING,
    # 'WM_HINTS'            : ('', ),
    'WM_ICON_NAME'        : AtomTypesSTRING,
    'WM_CLASS'            : AtomTypesSTRING,
    'WM_TRANSIENT_FOR'    : AtomTypesWINDOW,
    'WM_PROTOCOLS'        : AtomTypesATOM,
    'WM_COLORMAP_WINDOWS' : AtomTypesWINDOW,
    'WM_CLIENT_MACHINE'   : AtomTypesSTRING,
    # 'WM_NORMAL_HINTS': ('WM_SIZE_HINTS', ),
    }

BASE_ATOMS = {
    'WM_STATE'                   : AtomTypesCARDINAL,

    '_WIN_WORKSPACE'             : AtomTypesCARDINAL,
    '_WIN_STATE'                 : AtomTypesCARDINAL,
    '_NET_SUPPORTED'             : AtomTypesATOM,
    '_NET_CLIENT_LIST'           : AtomTypesWINDOW,
    '_NET_CLIENT_LIST_STACKING'  : AtomTypesWINDOW,
    '_NET_NUMBER_OF_DESKTOPS'    : AtomTypesCARDINAL,
    '_NET_DESKTOP_GEOMETRY'      : AtomTypesCARDINAL,
    '_NET_DESKTOP_VIEWPORT'      : AtomTypesCARDINAL,
    '_NET_CURRENT_DESKTOP'       : AtomTypesCARDINAL,
    '_NET_DESKTOP_NAMES'         : AtomTypesUTF8STRINGLIST,
    '_NET_ACTIVE_WINDOW'         : AtomTypesWINDOW,
    '_NET_WORKAREA'              : AtomTypesCARDINAL,
    '_NET_SUPPORTING_WM_CHECK'   : AtomTypesWINDOW,
    '_NET_VIRTUAL_ROOTS'         : AtomTypesWINDOW,
    '_NET_DESKTOP_LAYOUT'        : AtomTypesCARDINAL,
    '_NET_SHOWING_DESKTOP'       : AtomTypesCARDINAL,

    '_NET_CLOSE_WINDOW'          : AtomTypesNone,
    '_NET_MOVERESIZE_WINDOW'     : AtomTypesNone,
    '_NET_WM_MORERESIZE'         : AtomTypesNone,
    '_NET_RESTACK_WINDOW'        : AtomTypesNone,
    '_NET_REQUEST_FRAME_EXTENTS' : AtomTypesCARDINAL,

    '_NET_WM_NAME'               : AtomTypesUTF8STRING,
    '_NET_WM_VISIBLE_NAME'       : AtomTypesUTF8STRING,
    '_NET_WM_ICON_NAME'          : AtomTypesUTF8STRING,
    '_NET_WM_VISIBLE_ICON_NAME'  : AtomTypesUTF8STRING,
    '_NET_WM_DESKTOP'            : AtomTypesCARDINAL,
    '_NET_WM_WINDOW_TYPE'        : AtomTypesATOM,
    '_NET_WM_STATE'              : AtomTypesATOM,
    '_NET_WM_ALLOWED_ACTIONS'    : AtomTypesATOM,
    '_NET_WM_STRUT'              : AtomTypesCARDINAL,
    '_NET_WM_STRUT_PARTIAL'      : AtomTypesCARDINAL,
    '_NET_WM_ICON_GEOMETRY'      : AtomTypesCARDINAL,
    '_NET_WM_ICON'               : AtomTypesCARDINAL,
    '_NET_WM_PID'                : AtomTypesCARDINAL,
    '_NET_WM_HANDLED_ICONS'      : AtomTypesCARDINAL,
    '_NET_WM_USER_TIME'          : AtomTypesCARDINAL,
    '_NET_WM_USER_TIME_WINDOW'   : AtomTypesCARDINAL,
    '_NET_FRAME_EXTENTS'         : AtomTypesCARDINAL,

    '_OB_APP_TYPE'               : AtomTypesUTF8STRING,
    }

WINDOW_TYPES = {
    '_NET_WM_WINDOW_TYPE_DESKTOP'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DOCK'          : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_TOOLBAR'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_MENU'          : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_UTILITY'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_SPLASH'        : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DIALOG'        : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU' : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_POPUP_MENU'    : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_TOOLTIP'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_NOTIFICATION'  : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_COMBO'         : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DND'           : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_NORMAL'        : AtomTypesATOM,
    }

WINDOW_STATES = {
    '_NET_WM_STATE_MODAL'             : AtomTypesATOM,
    '_NET_WM_STATE_STICKY'            : AtomTypesATOM,
    '_NET_WM_STATE_MAXIMIZED_VERT'    : AtomTypesATOM,
    '_NET_WM_STATE_MAXIMIZED_HORZ'    : AtomTypesATOM,
    '_NET_WM_STATE_SHADED'            : AtomTypesATOM,
    '_NET_WM_STATE_SKIP_TASKBAR'      : AtomTypesATOM,
    '_NET_WM_STATE_SKIP_PAGER'        : AtomTypesATOM,
    '_NET_WM_STATE_HIDDEN'            : AtomTypesATOM,
    '_NET_WM_STATE_FULLSCREEN'        : AtomTypesATOM,
    '_NET_WM_STATE_ABOVE'             : AtomTypesATOM,
    '_NET_WM_STATE_BELOW'             : AtomTypesATOM,
    '_NET_WM_STATE_DEMANDS_ATTENTION' : AtomTypesATOM,
    }

WINDOW_ALLOWED_ACTIONS = {
    '_NET_WM_ACTION_MOVE'           : AtomTypesATOM,
    '_NET_WM_ACTION_RESIZE'         : AtomTypesATOM,
    '_NET_WM_ACTION_MINIMIZE'       : AtomTypesATOM,
    '_NET_WM_ACTION_SHADE'          : AtomTypesATOM,
    '_NET_WM_ACTION_STICK'          : AtomTypesATOM,
    '_NET_WM_ACTION_MAXIMIZE_HORZ'  : AtomTypesATOM,
    '_NET_WM_ACTION_MAXIMIZE_VERT'  : AtomTypesATOM,
    '_NET_WM_ACTION_FULLSCREEN'     : AtomTypesATOM,
    '_NET_WM_ACTION_CHANGE_DESKTOP' : AtomTypesATOM,
    '_NET_WM_ACTION_CLOSE'          : AtomTypesATOM,
    '_NET_WM_ACTION_ABOVE'          : AtomTypesATOM,
    '_NET_WM_ACTION_BELOW'          : AtomTypesATOM,
    }


PROPERTIY_ATOM_MAP = {}
PROPERTIY_ATOM_MAP.update(BUILTIN_ATOMS)
PROPERTIY_ATOM_MAP.update(BASE_ATOMS)
PROPERTIY_ATOM_MAP.update(WINDOW_TYPES)
PROPERTIY_ATOM_MAP.update(WINDOW_STATES)
PROPERTIY_ATOM_MAP.update(WINDOW_ALLOWED_ACTIONS)


class PropertyAtom(object):
    r"""
    """
    atoms = PROPERTIY_ATOM_MAP

    @staticmethod
    def get_types(name):
        r"""SUMMARY

        get_types_length()

        @Return:
        """
        return PropertyAtom.atoms.get(str(name), AtomTypesANY)

    @staticmethod
    def get_name(name):
        r"""SUMMARY

        get_types(default=0)

        @Arguments:
        - `default`:

        @Return:
        """
        return PropertyAtom.get_types(name).name

    @staticmethod
    def get_length(name):
        r"""SUMMARY

        get_length()

        @Return:
        """
        return PropertyAtom.get_types(name).length


* Fri 28 Mar 2014 01:55:57 PM JST
from struct import unpack as _unpack
* Fri 28 Mar 2014 01:56:06 PM JST
from t1.listutil import make_list_append
* Fri 28 Mar 2014 01:56:11 PM JST

* Fri 28 Mar 2014 01:56:11 PM JST

* Fri 28 Mar 2014 01:56:11 PM JST
from abc import ABCMeta, abstractmethod

* Fri 28 Mar 2014 01:56:15 PM JST

* Fri 28 Mar 2014 01:56:15 PM JST

* Fri 28 Mar 2014 01:56:15 PM JST
from struct import unpack as _unpack

* Fri 28 Mar 2014 01:56:16 PM JST

* Fri 28 Mar 2014 01:56:16 PM JST

* Fri 28 Mar 2014 01:56:16 PM JST
from t1.listutil import make_list_append

* Fri 28 Mar 2014 01:56:46 PM JST
properties
* Fri 28 Mar 2014 01:56:50 PM JST

* Fri 28 Mar 2014 01:56:50 PM JST

* Fri 28 Mar 2014 01:56:50 PM JST
# from dispatcher import MakeDispatchFromListABC

* Fri 28 Mar 2014 01:56:51 PM JST

* Fri 28 Mar 2014 01:56:51 PM JST

* Fri 28 Mar 2014 01:56:52 PM JST
# from dispatcher import MakeDispatchFromListABC

* Fri 28 Mar 2014 01:57:19 PM JST
from xcb2.xconnection.atoms import PropertyAtom
* Fri 28 Mar 2014 01:58:02 PM JST
import 
* Fri 28 Mar 2014 02:01:03 PM JST
self._NET_WM_STATE
* Fri 28 Mar 2014 02:01:18 PM JST
            
* Fri 28 Mar 2014 02:01:32 PM JST
format_,
* Fri 28 Mar 2014 02:01:33 PM JST
                     
* Fri 28 Mar 2014 02:06:31 PM JST
class DataMaker(DisplayName):
    r"""
    """
    _structfmt = '5I'

    def __init__(self, display=None):
        r"""SUMMARY

        __init__(display=None)

        @Arguments:
        - `display`:

        @Return:
        """
        DisplayName.__init__(self, display)
        self.data = ListFill(length=5, fill=0)

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return pack(self._structfmt, *self.data)

    def __repr__(self, ):
        r"""SUMMARY

        __repr__()

        @Return:
        """
        return '{0.__class__.__name__}({1})'.format(self, list(self.data))

* Fri 28 Mar 2014 02:07:05 PM JST

* Fri 28 Mar 2014 02:07:05 PM JST

* Fri 28 Mar 2014 02:07:05 PM JST
        DisplayName.__init__(self, display)

* Fri 28 Mar 2014 02:07:07 PM JST
DisplayName
* Fri 28 Mar 2014 02:07:14 PM JST
from t1.listutil.limitlist import ListFill
* Fri 28 Mar 2014 02:07:31 PM JST
'5I'
* Fri 28 Mar 2014 02:07:41 PM JST

* Fri 28 Mar 2014 02:07:41 PM JST

* Fri 28 Mar 2014 02:07:41 PM JST
    _structfmt = '5I'

* Fri 28 Mar 2014 02:07:48 PM JST
from struct import pack
* Fri 28 Mar 2014 02:11:52 PM JST
Data5
* Fri 28 Mar 2014 02:12:17 PM JST
connection.
* Fri 28 Mar 2014 02:12:52 PM JST
import
* Fri 28 Mar 2014 02:18:47 PM JST
    def setdata3(self, num):
        r"""SUMMARY
        
        setdata3(num)
        
        @Arguments:
        - `num`:
        
        @Return:
        """
        self.data[2] = num

* Fri 28 Mar 2014 02:22:54 PM JST
__fill
* Fri 28 Mar 2014 02:23:26 PM JST
__fill()
* Fri 28 Mar 2014 02:25:29 PM JST
    def __getitem__(self, num):
        r"""SUMMARY
        
        __getitem__()
        
        @Return:
        """
        return self.data[num]


* Fri 28 Mar 2014 02:32:47 PM JST
EventData5
* Fri 28 Mar 2014 02:39:49 PM JST
WindowStateMode
* Fri 28 Mar 2014 02:40:19 PM JST
propergate, window, sequence_number, data
* Fri 28 Mar 2014 02:40:34 PM JST
    def UnsetState(self, propergate, window, sequence_number, data):
        r"""SUMMARY
        
        UnsetState(propergate, window, sequence_number, data)
        
        @Arguments:
        - `propergate`:
        - `window`:
        - `sequence_number`:
        - `data`:
        
        @Return:
        """
        data.setdata1(WindowStateMode.Unset)
        self.StateMessage(propergate, window, sequence_number, data.pack())

* Fri 28 Mar 2014 02:40:39 PM JST
Unset
* Fri 28 Mar 2014 02:40:45 PM JST
Uns
* Fri 28 Mar 2014 02:41:22 PM JST
        data.setdata1(WindowStateMode.Set)
        self.StateMessage(propergate, window, sequence_number, data.pack())

* Fri 28 Mar 2014 02:41:44 PM JST
EventData5
* Fri 28 Mar 2014 02:42:18 PM JST
        if not isinstance(data, EventData5):
            # TODO: (Atami) [2014/03/28]
            raise StandardError()

* Fri 28 Mar 2014 02:45:52 PM JST
'_NET_WM_STATE_FULLSCREEN'
* Fri 28 Mar 2014 02:46:50 PM JST
    def SetFullscreen(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        SetFullscreen(propergate, window, sequence_number)

        @Arguments:
        - `propergate`:
        - `window`:
        - `sequence_number`:

        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_FULLSCREEN'))
        self.SetState(propergate, sequence_number, window, data)

* Fri 28 Mar 2014 02:47:05 PM JST
'_NET_WM_STATE_SHADED'
* Fri 28 Mar 2014 02:47:46 PM JST
    def SetShade(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        SetFullscreen(propergate, window, sequence_number)

        @Arguments:
        - `propergate`:
        - `window`:
        - `sequence_number`:

        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_SHADED'))
        self.SetState(propergate, sequence_number, window, data)

* Fri 28 Mar 2014 02:48:25 PM JST
def unset_sj
* Fri 28 Mar 2014 02:49:15 PM JST
'_NET_WM_STATE_ABOVE'
* Fri 28 Mar 2014 02:49:43 PM JST
    def setAbove(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        SetFullscreen(propergate, window, sequence_number)

        @Arguments:
        - `propergate`:
        - `window`:
        - `sequence_number`:

        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_ABOVE'))
        self.setstate(propergate, sequence_number, window, data)

* Fri 28 Mar 2014 02:49:53 PM JST
'_NET_WM_STATE_BELOW'
* Fri 28 Mar 2014 02:50:18 PM JST
    def setbelow(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        SetFullscreen(propergate, window, sequence_number)

        @Arguments:
        - `propergate`:
        - `window`:
        - `sequence_number`:

        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_BELOW'))
        self.setstate(propergate, sequence_number, window, data)

* Fri 28 Mar 2014 02:50:29 PM JST
'_NET_WM_STATE_HIDDEN'
* Fri 28 Mar 2014 02:51:09 PM JST

* Fri 28 Mar 2014 02:51:09 PM JST

* Fri 28 Mar 2014 02:51:09 PM JST
        # TODO: (Atami) [2014/03/28]

* Fri 28 Mar 2014 02:51:09 PM JST
        # TODO: (Atami) [2014/03/28]

* Fri 28 Mar 2014 02:51:09 PM JST
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]

* Fri 28 Mar 2014 02:51:09 PM JST
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]

* Fri 28 Mar 2014 02:51:10 PM JST
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]

* Fri 28 Mar 2014 02:51:10 PM JST
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]

* Fri 28 Mar 2014 02:51:10 PM JST
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]
        #

* Fri 28 Mar 2014 02:51:10 PM JST
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]
        #

* Fri 28 Mar 2014 02:51:10 PM JST
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]
        #
        # TODO: (Atami) [2014/03/28]

* Fri 28 Mar 2014 02:51:10 PM JST
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]
        #
        # TODO: (Atami) [2014/03/28]

* Fri 28 Mar 2014 02:51:10 PM JST
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]
        # TODO: (Atami) [2014/03/28]
        #
        # TODO: (Atami) [2014/03/28]
        FIXME: (Atami) [2014/03/28]

* Fri 28 Mar 2014 02:51:27 PM JST
    def sethide(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        SetFullscreen(propergate, window, sequence_number)

        @Arguments:
        - `propergate`:
        - `window`:
        - `sequence_number`:

        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_HIDDEN'))
        self.setstate(propergate, sequence_number, window, data)

* Fri 28 Mar 2014 02:51:38 PM JST
'_NET_WM_ACTION_MINIMIZE'
* Fri 28 Mar 2014 02:51:54 PM JST
    def setminimize(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        SetFullscreen(propergate, window, sequence_number)

        @Arguments:
        - `propergate`:
        - `window`:
        - `sequence_number`:

        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_ACTION_MINIMIZE'))
        self.setstate(propergate, sequence_number, window, data)

* Fri 28 Mar 2014 02:52:08 PM JST
self.atom('_NET_WM_ACTION_MINIMIZE')
* Fri 28 Mar 2014 02:52:20 PM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Fri 28 Mar 2014 02:52:28 PM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Fri 28 Mar 2014 02:59:17 PM JST
window, propergate=False, sequence_number=0)
* Fri 28 Mar 2014 02:59:22 PM JST
window, propergate=False, sequence_number=0
* Fri 28 Mar 2014 02:59:32 PM JST
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_FULLSCREEN'))
        self.setstate(propergate, sequence_number, window, data)

* Fri 28 Mar 2014 02:59:45 PM JST
    def unsetfullscreen(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY
        
        unsetfullscreen()
        
        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_FULLSCREEN'))
        self.unsetstate(propergate, sequence_number, window, data)

* Fri 28 Mar 2014 03:00:05 PM JST
'_NET_WM_STATE_SHADED'
* Fri 28 Mar 2014 03:00:26 PM JST
    def unsetshade(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY
        
        unsetfullscreen()
        
        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_SHADED'))
        self.unsetstate(propergate, sequence_number, window, data)

* Fri 28 Mar 2014 03:00:39 PM JST
'_NET_WM_STATE_ABOVE'
* Fri 28 Mar 2014 03:00:52 PM JST
    def unsetabove(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY
        
        unsetfullscreen()
        
        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_ABOVE'))
        self.unsetstate(propergate, sequence_number, window, data)

* Fri 28 Mar 2014 03:01:01 PM JST
'_NET_WM_STATE_BELOW'
* Fri 28 Mar 2014 03:01:14 PM JST
    def unsetbelow(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY
        
        unsetfullscreen()
        
        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_BELOW'))
        self.unsetstate(propergate, sequence_number, window, data)

* Fri 28 Mar 2014 03:01:23 PM JST
'_NET_WM_STATE_HIDDEN'
* Fri 28 Mar 2014 03:01:46 PM JST
    def unsethidden(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY
        
        unsetfullscreen()
        
        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_HIDDEN'))
        self.unsetstate(propergate, sequence_number, window, data)

* Fri 28 Mar 2014 03:01:59 PM JST
'_NET_WM_ACTION_MINIMIZE'
* Fri 28 Mar 2014 03:02:20 PM JST
    def setmaximize(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        SetFullscreen(propergate, window, sequence_number)

        @Arguments:
        - `propergate`:
        - `window`:
        - `sequence_number`:

        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_MAXIMIZED_VERT'))
        data.setdata2(self.atom('_NET_WM_STATE_MAXIMIZED_HORZ'))
        self.setstate(propergate, sequence_number, window, data)

* Fri 28 Mar 2014 03:07:28 PM JST
    def unsetfullscreen(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        unsetfullscreen()

        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_FULLSCREEN'))
        self.unsetstate(propergate, sequence_number, window, data)

    def unsetshade(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        unsetfullscreen()

        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_SHADED'))
        self.unsetstate(propergate, sequence_number, window, data)

    def unsetabove(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        unsetfullscreen()

        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_ABOVE'))
        self.unsetstate(propergate, sequence_number, window, data)

    def unsetbelow(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        unsetfullscreen()

        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_BELOW'))
        self.unsetstate(propergate, sequence_number, window, data)

    # TODO: (Atami) [2014/03/28]
    def unsethidden(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        unsetfullscreen()

        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_HIDDEN'))
        self.unsetstate(propergate, sequence_number, window, data)

    def unsetminimize(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        unsetfullscreen()

        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_ACTION_MINIMIZE'))
        self.unsetstate(propergate, sequence_number, window, data)

    def unsetmaximize(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        SetFullscreen(propergate, window, sequence_number)

        @Arguments:
        - `propergate`:
        - `window`:
        - `sequence_number`:

        @Return:
        """
        data = EventData5()
        data.setdata1(self.atom('_NET_WM_STATE_MAXIMIZED_VERT'))
        data.setdata2(self.atom('_NET_WM_STATE_MAXIMIZED_HORZ'))
        self.unsetstate(propergate, sequence_number, window, data)

* Fri 28 Mar 2014 03:07:40 PM JST
unset
* Fri 28 Mar 2014 03:07:45 PM JST
togglefullscreen
* Fri 28 Mar 2014 03:07:47 PM JST
toggle
* Fri 28 Mar 2014 03:10:28 PM JST
WindowState
* Fri 28 Mar 2014 03:11:02 PM JST

* Fri 28 Mar 2014 03:11:08 PM JST
properties
* Fri 28 Mar 2014 03:11:34 PM JST
from xcb2.xconnection.connection import Connection
* Fri 28 Mar 2014 03:11:40 PM JST
c=Connection()
* Fri 28 Mar 2014 03:11:49 PM JST
from xcb2.xconnection.connection import Connection
c=Connection()

* Fri 28 Mar 2014 03:12:49 PM JST
52428804
* Fri 28 Mar 2014 03:15:09 PM JST
window, 
* Fri 28 Mar 2014 03:15:26 PM JST
from xcb2.xconnection.connection import Connection
c=Connection()

* Fri 28 Mar 2014 03:15:50 PM JST
52428804
* Fri 28 Mar 2014 03:18:36 PM JST
'BxBH2I'
* Fri 28 Mar 2014 03:18:42 PM JST
EventCode.ClientMessage
* Fri 28 Mar 2014 03:19:16 PM JST
sequence_number
* Fri 28 Mar 2014 03:19:27 PM JST
sequence_number
* Fri 28 Mar 2014 03:20:36 PM JST
sequence_number, 
* Fri 28 Mar 2014 03:20:55 PM JST

* Fri 28 Mar 2014 03:20:55 PM JST

* Fri 28 Mar 2014 03:20:55 PM JST
        import pdb; pdb.set_trace()

* Fri 28 Mar 2014 03:21:24 PM JST
from xcb2.xconnection.connection import Connection
c=Connection()

* Fri 28 Mar 2014 03:21:52 PM JST
52428804
* Fri 28 Mar 2014 03:23:47 PM JST
propagate
* Fri 28 Mar 2014 03:25:41 PM JST
from xcb2.xconnection.connection import Connection
c=Connection()

* Fri 28 Mar 2014 03:26:55 PM JST
BoolEnum
* Fri 28 Mar 2014 03:27:29 PM JST
False
* Fri 28 Mar 2014 03:27:35 PM JST
BoolEnum
* Fri 28 Mar 2014 03:27:39 PM JST

* Fri 28 Mar 2014 03:27:39 PM JST

* Fri 28 Mar 2014 03:27:39 PM JST
from enum import Enum as _Enum

* Fri 28 Mar 2014 03:27:55 PM JST
52428804
* Fri 28 Mar 2014 03:32:46 PM JST
buf.getvalue()
* Fri 28 Mar 2014 03:33:15 PM JST
'!\x00 \x00\x00\x00\x00\x00\x04\x00 \x03(\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 28 Mar 2014 03:34:19 PM JST
52428804
* Fri 28 Mar 2014 03:35:55 PM JST

* Fri 28 Mar 2014 03:35:55 PM JST

* Fri 28 Mar 2014 03:35:57 PM JST

* Fri 28 Mar 2014 03:36:00 PM JST

* Fri 28 Mar 2014 03:36:00 PM JST

* Fri 28 Mar 2014 03:36:00 PM JST
        print(repr(data))

* Fri 28 Mar 2014 03:36:39 PM JST
'!\x00 \x00\x00\x00\x00\x00\x04\x00 \x03(\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 28 Mar 2014 03:37:16 PM JST

* Fri 28 Mar 2014 03:37:16 PM JST

* Fri 28 Mar 2014 03:37:16 PM JST
        print(repr(data))

* Fri 28 Mar 2014 03:37:18 PM JST

* Fri 28 Mar 2014 03:37:18 PM JST

* Fri 28 Mar 2014 03:37:18 PM JST
        print(repr(data))

* Fri 28 Mar 2014 03:37:24 PM JST
0xffffff
* Fri 28 Mar 2014 03:38:23 PM JST
c.windowstate.setabove(52428804)
* Fri 28 Mar 2014 03:38:31 PM JST
from xcb2.xconnection.connection import Connection
c=Connection()

* Fri 28 Mar 2014 03:38:34 PM JST
c.windowstate.setabove(52428804)
* Fri 28 Mar 2014 03:41:05 PM JST
52428804
* Fri 28 Mar 2014 03:41:27 PM JST
'! \x00\x00\x04\x00 \x03(\x01\x00\x00\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 28 Mar 2014 03:46:32 PM JST

* Fri 28 Mar 2014 03:46:32 PM JST

* Fri 28 Mar 2014 03:46:32 PM JST
        print(repr(obj))

* Fri 28 Mar 2014 03:47:10 PM JST
from xahk.xconnection import Connection as con
* Fri 28 Mar 2014 03:47:27 PM JST
from xahk.xconnection import Connection as con
* Fri 28 Mar 2014 03:47:33 PM JST
xc=con()
* Fri 28 Mar 2014 03:47:39 PM JST
c.ext.state.above.set(52428804)
* Fri 28 Mar 2014 03:47:49 PM JST
from xcb2.xconnection.connection import Connection
c=Connection()

* Fri 28 Mar 2014 03:47:54 PM JST
c.windowstate.setabove(52428804)
* Fri 28 Mar 2014 03:48:42 PM JST
                
* Fri 28 Mar 2014 03:48:45 PM JST
'! \x00\x00\x04\x00 \x03(\x01\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 28 Mar 2014 03:50:08 PM JST
'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 28 Mar 2014 03:51:39 PM JST
atom('_NET_WM_STATE_ABOVE')
* Fri 28 Mar 2014 03:52:45 PM JST
c.atom('_NET_WM_STATE_ABOVE')
* Fri 28 Mar 2014 03:54:01 PM JST
from xcb2.xconnection.connection import Connection
c=Connection()

* Fri 28 Mar 2014 03:54:04 PM JST
c.windowstate.setabove(52428804)
* Fri 28 Mar 2014 03:54:24 PM JST

* Fri 28 Mar 2014 03:54:24 PM JST

* Fri 28 Mar 2014 03:54:24 PM JST
        print(repr(data))

* Fri 28 Mar 2014 03:54:26 PM JST

* Fri 28 Mar 2014 03:54:26 PM JST

* Fri 28 Mar 2014 03:54:26 PM JST
        print(repr(buf.getvalue()))

* Fri 28 Mar 2014 03:55:20 PM JST

* Fri 28 Mar 2014 03:55:20 PM JST

* Fri 28 Mar 2014 03:55:20 PM JST
52428804

* Fri 28 Mar 2014 03:55:21 PM JST
from xcb2.xconnection.connection import Connection
c=Connection()
c.windowstate.setabove(52428804)

* Fri 28 Mar 2014 03:55:51 PM JST
c.windowstate.unsetabove(52428804)
* Fri 28 Mar 2014 03:56:07 PM JST
0xffffff,
* Fri 28 Mar 2014 04:05:11 PM JST
self.property.GetFullProperty(delete, window, '_NET_WM_STATE')
* Fri 28 Mar 2014 04:06:25 PM JST
self.connection.atom
* Fri 28 Mar 2014 04:26:51 PM JST
        ConnectionAbstract.__init__(self, connection)
* Fri 28 Mar 2014 04:27:26 PM JST
self.connection.sendevent = SendEvent(self.connection)
* Fri 28 Mar 2014 04:27:29 PM JST
SendEvent
* Fri 28 Mar 2014 04:27:30 PM JST
sendevent
* Fri 28 Mar 2014 04:27:50 PM JST
Properties
* Fri 28 Mar 2014 04:28:12 PM JST

* Fri 28 Mar 2014 04:28:13 PM JST
SendEvent
* Fri 28 Mar 2014 04:28:18 PM JST
sendevent
* Fri 28 Mar 2014 04:29:08 PM JST
        if not hasattr(self.connection, 'atom'):
            self.connection.atom = AtomIdentifier(self.connection)

* Fri 28 Mar 2014 04:29:24 PM JST
    @property
    def atom(self, ):
        r"""SUMMARY

        atom()

        @Return:
        """
        return self.connection.atom


* Fri 28 Mar 2014 04:29:33 PM JST
atom
* Fri 28 Mar 2014 04:31:34 PM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Fri 28 Mar 2014 04:31:53 PM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Fri 28 Mar 2014 04:31:57 PM JST

* Fri 28 Mar 2014 04:32:08 PM JST
                
* Fri 28 Mar 2014 04:32:41 PM JST
return self.atom('()
* Fri 28 Mar 2014 04:32:48 PM JST
'_NET_WM_STATE_FULLSCREEN'
* Fri 28 Mar 2014 04:33:00 PM JST
self.properties._NET_WM_STATE(window)
* Fri 28 Mar 2014 04:33:39 PM JST
        return (self.atom('_NET_WM_STATE_FULLSCREEN') in
                self.properties._NET_WM_STATE(window))

* Fri 28 Mar 2014 04:33:44 PM JST
'_NET_WM_STATE_SHADED'
* Fri 28 Mar 2014 04:33:49 PM JST
                
* Fri 28 Mar 2014 04:33:57 PM JST
    def isshade(self, window):
        r"""SUMMARY
        
        isshade(window)
        
        @Arguments:
        - `window`:
        
        @Return:
        """
        return (self.atom('_NET_WM_STATE_SHADED') in
                self.properties._NET_WM_STATE(window))

* Fri 28 Mar 2014 04:34:12 PM JST
        return (self.atom('_NET_WM_STATE_SHADED') in
                self.properties._NET_WM_STATE(window))

* Fri 28 Mar 2014 04:34:17 PM JST
'_NET_WM_STATE_ABOVE'
* Fri 28 Mar 2014 04:34:37 PM JST
        return (self.atom('_NET_WM_STATE_ABOVE') in
                self.properties._NET_WM_STATE(window))

* Fri 28 Mar 2014 04:34:42 PM JST
'_NET_WM_STATE_BELOW'
* Fri 28 Mar 2014 04:35:01 PM JST
        return (self.atom('_NET_WM_STATE_BELOW') in
                self.properties._NET_WM_STATE(window))

* Fri 28 Mar 2014 04:35:07 PM JST
'_NET_WM_STATE_HIDDEN'
* Fri 28 Mar 2014 04:36:16 PM JST
CheckState
* Fri 28 Mar 2014 05:03:19 PM JST
class WindowState(ConnectionAbstract):
    r"""SUMMARY
    """

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)
        if not hasattr(self.connection, 'sendevent'):
            self.connection.sendevent = SendEvent(self.connection)
        if not hasattr(self.connection, 'atom'):
            self.connection.atom = AtomIdentifier(self.connection)
        self._NET_WM_STATE = self.atom('_NET_WM_STATE')

    @property
    def atom(self, ):
        r"""SUMMARY

        atom()

        @Return:
        """
        return self.connection.atom

    @property
    def sendevent(self, ):
        r"""SUMMARY

        sendevent()

        @Return:
        """
        return self.connection.sendevent

* Fri 28 Mar 2014 05:03:57 PM JST
WindowState
* Fri 28 Mar 2014 05:04:19 PM JST
'WM_DELETE_WINDOW'
* Fri 28 Mar 2014 05:04:25 PM JST
WM_DELETE_WINDOW
* Fri 28 Mar 2014 05:04:36 PM JST
'_NET_CLOSE_WINDOW'
* Fri 28 Mar 2014 05:04:39 PM JST

* Fri 28 Mar 2014 05:04:45 PM JST
_NET_CLOSE_WINDOW
* Fri 28 Mar 2014 05:05:15 PM JST
        return self.sendevent.ClientMessage(
            self._NET_WM_STATE.format, sequence_number,
            window, self._NET_WM_STATE, data)

* Fri 28 Mar 2014 05:05:53 PM JST
_NET_CLOSE_WINDOW
* Fri 28 Mar 2014 05:06:32 PM JST
data = EventData5()
* Fri 28 Mar 2014 05:07:36 PM JST
CurrentTime
* Fri 28 Mar 2014 05:08:01 PM JST
define.
* Fri 28 Mar 2014 05:08:46 PM JST
'WM_PROTOCOLS'
* Fri 28 Mar 2014 05:09:02 PM JST
WM_PROTOCOLS
* Fri 28 Mar 2014 05:09:33 PM JST
        data = EventData5()
        data.setdata0(Time.CurrentTime)
        return self.sendevent.ClientMessage(
            self._NET_CLOSE_WINDOW.format, 0,
            window, self._NET_CLOSE_WINDOW, data.pack())

* Fri 28 Mar 2014 05:09:40 PM JST
data.setdata1(Time.CurrentTime)
* Fri 28 Mar 2014 05:09:53 PM JST
'WM_DELETE_WINDOW'
* Fri 28 Mar 2014 05:10:11 PM JST
WM_PROTOCOLS
* Fri 28 Mar 2014 05:10:36 PM JST
DestroyWindow
* Fri 28 Mar 2014 05:10:49 PM JST
DestroyWindow
* Fri 28 Mar 2014 05:17:36 PM JST
75497475
* Fri 28 Mar 2014 05:17:49 PM JST
from xcb2.xconnection.connection import Connection
c=Connection()

* Fri 28 Mar 2014 05:18:11 PM JST
75497475
* Fri 28 Mar 2014 05:18:38 PM JST
return
* Fri 28 Mar 2014 05:18:40 PM JST
return 
* Fri 28 Mar 2014 05:26:41 PM JST
windowstate
* Fri 28 Mar 2014 05:46:34 PM JST
from xcb2.xconnection.abstract import ConnectionAbstract
* Fri 28 Mar 2014 05:46:47 PM JST
from xcb2.xproto.define import Time
* Fri 28 Mar 2014 05:46:49 PM JST
Time
* Fri 28 Mar 2014 05:46:58 PM JST
Focu
* Fri 28 Mar 2014 05:47:11 PM JST
InputFocus
* Fri 28 Mar 2014 05:47:26 PM JST
class WindowState(ConnectionAbstract):
    r"""SUMMARY
    """

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)
        if not hasattr(self.connection, 'sendevent'):
            self.connection.sendevent = SendEvent(self.connection)
        if not hasattr(self.connection, 'atom'):
            self.connection.atom = AtomIdentifier(self.connection)
        self._NET_WM_STATE = self.atom('_NET_WM_STATE')

* Fri 28 Mar 2014 05:48:28 PM JST
WindowState
* Fri 28 Mar 2014 05:50:11 PM JST
Focus
* Fri 28 Mar 2014 05:50:33 PM JST
focus
* Fri 28 Mar 2014 05:50:42 PM JST
focus
* Fri 28 Mar 2014 05:51:24 PM JST
Time
* Fri 28 Mar 2014 05:51:25 PM JST
InputFocus, Time
* Fri 28 Mar 2014 05:51:32 PM JST
from xcb2.xproto.define import ConfigWindow
* Fri 28 Mar 2014 05:51:36 PM JST
ConfigWindow
* Fri 28 Mar 2014 05:52:14 PM JST
        mask = 0
        values = []
        for key in ('x', 'y', 'width', 'height'):
            if key not in changes:
                continue
            mask |= getattr(ConfigWindow, key.capitalize())
            values.append(changes[key])
        if mask:
            con.core.ConfigureWindow(window, mask, values)

* Fri 28 Mar 2014 05:52:24 PM JST
con
* Fri 28 Mar 2014 05:53:57 PM JST

* Fri 28 Mar 2014 05:53:58 PM JST
DestroyWindow
* Fri 28 Mar 2014 05:53:58 PM JST
CheckState, DestroyWindow
* Fri 28 Mar 2014 05:53:58 PM JST
WindowState, CheckState, DestroyWindow
* Fri 28 Mar 2014 05:54:01 PM JST
clientmessage
* Fri 28 Mar 2014 05:54:04 PM JST

* Fri 28 Mar 2014 05:54:05 PM JST
Move
* Fri 28 Mar 2014 05:54:08 PM JST
move
* Fri 28 Mar 2014 05:54:15 PM JST
        
* Fri 28 Mar 2014 05:54:16 PM JST
move
* Fri 28 Mar 2014 05:54:20 PM JST
Focus
* Fri 28 Mar 2014 05:54:32 PM JST
from xcb2.xconnection.connection import Connection
c=Connection()

* Fri 28 Mar 2014 05:54:55 PM JST
52428804
* Fri 28 Mar 2014 10:20:16 PM JST
xconnection/
* Fri 28 Mar 2014 10:20:17 PM JST
xahk/xconnection/
* Fri 28 Mar 2014 10:25:25 PM JST
xahk
* Fri 28 Mar 2014 10:27:33 PM JST
CAPI              ExtensionException  Response             __package__
ConnectException  ExtensionKey        Struct               _add_core  
Connection        Iterator            Union                _add_ext   
Cookie            List                VoidCookie           _resize_obj
CopyFromParent    NONE                X_PROTOCOL           connect    
CurrentTime       NoSymbol            X_PROTOCOL_REVISION  popcount   
Error             Protobj             X_TCP_PORT           type_pad   
Event             ProtocolException   __doc__              wrap       
Exception         Reply               __file__           
Extension         Request             __name__          

* Fri 28 Mar 2014 10:27:47 PM JST
__doc__              wrap       
* Fri 28 Mar 2014 10:27:48 PM JST
__file__           
* Fri 28 Mar 2014 10:27:49 PM JST
__name__          
* Fri 28 Mar 2014 10:27:53 PM JST
__package__
* Fri 28 Mar 2014 10:28:39 PM JST
(CAPI, ExtensionException, Response, 
ConnectException, ExtensionKey, Struct, _add_core, 
Connection, Iterator, Union, _add_ext, 
Cookie, List, VoidCookie, _resize_obj, 
CopyFromParent, NONE, X_PROTOCOL, connect, 
CurrentTime, NoSymbol, X_PROTOCOL_REVISION, popcount, 
Error, Protobj, X_TCP_PORT, type_pad, 
Event, ProtocolException, 
Exception, Reply, 
Extension, Request, )

* Fri 28 Mar 2014 10:34:51 PM JST
baseconnect
* Fri 28 Mar 2014 10:35:43 PM JST

* Fri 28 Mar 2014 10:35:43 PM JST

* Fri 28 Mar 2014 10:35:43 PM JST
from xcb.xcb import connect as baseconnect

* Fri 28 Mar 2014 10:49:17 PM JST
xconnection/
* Fri 28 Mar 2014 10:49:18 PM JST
xcb2/xconnection/
* Fri 28 Mar 2014 11:04:30 PM JST
class DisplayName(object):
    r"""
    """

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `display`:
        """
        self.display = display or ''

* Fri 28 Mar 2014 11:04:35 PM JST
DisplayName
* Fri 28 Mar 2014 11:05:36 PM JST
Connection
* Fri 28 Mar 2014 11:05:57 PM JST
    @property
    def connection(self, ):
        r"""SUMMARY

        connection()

        @Return:
        """
        try:
            return XCON.get_instance(display=self.display)
        except NameError:
            from xahk2.xconnection import XCON
            return XCON.get_instance(display=self.display)
        else:
            raise

* Fri 28 Mar 2014 11:06:28 PM JST
Connection
* Fri 28 Mar 2014 11:08:36 PM JST
connection
* Fri 28 Mar 2014 11:09:03 PM JST
    def __int__(self, ):
        return self.id

    def __cmp__(self, other):
        if isinstance(other, WindowAbstract):
            return cmp(self.id, other.id)
        return cmp(self.id, other)

    def __repr__(self, ):
        return '{0.__class__.__name__}(id={0.id})'.format(self)

* Fri 28 Mar 2014 11:12:41 PM JST
62914582
* Fri 28 Mar 2014 11:14:18 PM JST
win_gravity
* Fri 28 Mar 2014 11:14:45 PM JST
    def get_attributes(self, ):
        r"""SUMMARY

        get_attributes()

        @Return:
        """
        return self.core.GetWindowAttributes(self.id).reply()

* Fri 28 Mar 2014 11:17:08 PM JST
    def create_window(self, ):
        r"""SUMMARY

        create_window()

        @Return:
        """

    def destroy(self, ):
        r"""SUMMARY

        destroy()

        @Return:
        """
        self.core.DestroyWindow(self.id)

    def destroy_subwindows(self, ):
        r"""SUMMARY

        destroy_sub_windows()

        @Return:
        """
        self.core.DestroySubwindows(self.id)

    def change_save_set(self, ):
        r"""SUMMARY

        change_save_set()

        @Return:
        """

    def reparent(self, ):
        r"""SUMMARY

        reparent()

        @Return:
        """

    def get_geometry(self, ):
        r"""SUMMARY

        get_geometry()

        @Return:
        """
        return self.extensions.get_geometry(self.id)

    def map(self, ):
        r"""SUMMARY

        map()

        @Return:
        """
        self.core.MapWindow(self.id)

    def unmap(self, ):
        r"""SUMMARY

        unmap()

        @Return:
        """
        self.core.UnmapWindow(self.id)

    def configure(self, mask, values):
        r"""SUMMARY

        configure()

        @Return:
        """
        self.core.ConfigureWindow(self.id, mask, values)

    def raise_window(self, ):
        r"""SUMMARY

        raise_window()

        @Return:
        """

    def query_tree(self, ):
        r"""SUMMARY

        query_tree()

        @Return:
        """
        for win in self.extensions.query_tree(self.id):
            yield win

    def query_recursive_tree(self, ):
        r"""SUMMARY

        query_recursive_tree()

        @Return:
        """
        for win in self.extensions.query_recursive_tree(self.id):
            yield win

    def get_property(self, property_, offset=0, length=10):
        r"""SUMMARY

        get_property()

        @Return:
        """
        return self.properties.get_property(self.id, property_, offset, length)

    def get_full_property(self, property_, offset=0, length=10):
        r"""SUMMARY

        get_full_property(property_, offset=0, length)

        @Arguments:
        - `property_`:
        - `offset`:
        - `length`:

        @Return:
        """
        return self.properties.get_full_property(
            self.id, property_, offset, length)

    def change_proeprty(self, ):
        r"""SUMMARY

        change_proeprty()

        @Return:
        """

    def delete_property(self, ):
        r"""SUMMARY

        delete_property()

        @Return:
        """

    def list_properties(self, ):
        r"""SUMMARY

        list_properties()

        @Return:
        """
        return self.extensions.list_properties(self.id)

    def send_event(self, event_mask, event):
        r"""SUMMARY

        send_event()

        @Return:
        """
        self.core.SendEvent(0, self.id, event_mask, event)

    def grab_pointer(self, ):
        r"""SUMMARY

        grab_pointer()

        @Return:
        """

    def grab_button_press(self, key, modifiers):
        r"""SUMMARY

        grab_button()

        @Return:
        """
        self.core.GrabButton(
            True, # owner_events
            self.id, # grab_window
            xproto.EventMask.ButtonPress, # event_mask
            xproto.GrabMode.Async, # pointer_mode
            xproto.GrabMode.Async, # keyboard_mode
            0, # confine_to
            0, # cursor
            key, # button
            modifiers | xproto.ModMask._2, # modifiers
            )

    def grab_button_release(self, key, modifiers):
        r"""SUMMARY

        grab_button()

        @Return:
        """
        self.core.GrabButton(
            True, # owner_events
            self.id, # grab_window
            xproto.EventMask.ButtonRelease, # event_mask
            xproto.GrabMode.Async, # pointer_mode
            xproto.GrabMode.Async, # keyboard_mode
            0, # confine_to
            0, # cursor
            key, # button
            modifiers | xproto.ModMask._2, # modifiers
            )

    def ungrab_button(self, key, modifiers):
        r"""SUMMARY

        ungrab_button()

        @Return:
        """
        self.core.UngrabButton(
                key, # button
                self.id, # grab_window
                modifiers | xproto.ModMask._2, # modifiers
            )

    def grab_keyboard(self, ):
        r"""SUMMARY

        grab_keyboard()

        @Return:
        """

    def grab_key(self, key, modifiers):
        r"""SUMMARY

        grab_key(key, modifiers)

        @Arguments:
        - `key`:
        - `modifiers`:

        @Return:
        """
        addmods = (0, xproto.ModMask.Lock,
                   xproto.ModMask._2,
                   xproto.ModMask._2 | xproto.ModMask.Lock)
        for mod in addmods:
            self.core.GrabKey(True, self.id,
                              modifiers | mod,
                              key,
                              xproto.GrabMode.Async,
                              xproto.GrabMode.Async)

    def ungrab_key(self, key, modifiers):
        r"""SUMMARY

        ungrab_key()

        @Return:
        """
        addmods = (0, xproto.ModMask.Lock,
                   xproto.ModMask._2,
                   xproto.ModMask._2 | xproto.ModMask.Lock
                   )
        for mod in addmods:
            self.core.UngrabKey(
                key,
                self.id,
                modifiers | mod,
            )

    def query_pointer(self, ):
        r"""SUMMARY

        query_pointer()

        @Return:
        """

    def get_motion_events(self, ):
        r"""SUMMARY

        get_motion_events()

        @Return:
        """

    def translate_coords(self, ):
        r"""SUMMARY

        translate_coords()

        @Return:
        """

    def warp_pointer(self, ):
        r"""SUMMARY

        warp_pointer()

        @Return:
        """

    def set_input_focus(self, ):
        r"""SUMMARY

        set_input_focus()

        @Return:
        """

    def clear_area(self, ):
        r"""SUMMARY

        clear_area()

        @Return:
        """

    def create_colormap(self, ):
        r"""SUMMARY

        create_colormap()

        @Return:
        """

    def list_installed_colormaps(self, ):
        r"""SUMMARY

        list_installed_colormaps()

        @Return:
        """

    def rotate_properties(self, ):
        r"""SUMMARY

        rotate_properties()

        @Return:
        """

* Fri 28 Mar 2014 11:37:05 PM JST
.connection
* Fri 28 Mar 2014 11:38:27 PM JST
GetProperty
* Fri 28 Mar 2014 11:38:50 PM JST
GetProperty
* Fri 28 Mar 2014 11:39:51 PM JST
property_, delete=False, offset=0, length=10
* Fri 28 Mar 2014 11:40:03 PM JST
        return self.connection.property.GetProperty(delete, 
            self.id, property_, offset, length)

* Fri 28 Mar 2014 11:40:27 PM JST
GetFullProperty?
* Fri 28 Mar 2014 11:40:28 PM JST
property.GetFullProperty?
* Fri 28 Mar 2014 11:43:16 PM JST
SendEvent
* Fri 28 Mar 2014 11:47:07 PM JST
class WindowTypesAbstract(object):
    r"""Summery
    """

    def __init__(self, window):
        r"""SUMMARY

        __init__(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        self.window = window

    def __int__(self, ):
        return int(self.window)

    def __cmp__(self, other):
        if isinstance(other, WindowTypesAbstract):
            return cmp(self.window, other.window)
        return cmp(int(self), other)

    def __repr__(self, ):
        return '{0.__class__.__name__}(window={0.window})'.format(self)

* Fri 28 Mar 2014 11:47:16 PM JST
WindowTypesAbstract
* Fri 28 Mar 2014 11:54:33 PM JST
wrapcore
* Fri 28 Mar 2014 11:58:33 PM JST
Core
* Fri 28 Mar 2014 11:58:54 PM JST
from xcb2.xconnection.abstract import ConnectionAbstract
* Fri 28 Mar 2014 11:59:05 PM JST
ConnectionAbstract
* Fri 28 Mar 2014 11:59:21 PM JST
    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)
        if not hasattr(self.connection, 'sendevent'):
            self.connection.sendevent = SendEvent(self.connection)
        if not hasattr(self.connection, 'atom'):
            self.connection.atom = AtomIdentifier(self.connection)

* Fri 28 Mar 2014 11:59:39 PM JST

* Fri 28 Mar 2014 11:59:41 PM JST
abstract
* Fri 28 Mar 2014 11:59:46 PM JST
ConnectionAbstract
* Sat 29 Mar 2014 12:01:32 AM JST
ListPropertiesUnchecked
* Sat 29 Mar 2014 12:01:39 AM JST
    def ListProperties(self, window):
        r"""SUMMARY
        
        ListProperties(window)
        
        @Arguments:
        - `window`:
        
        @Return:
        """
        reply = self.connection.core.ListProperties(window).reply()
        return [self.connection.atom(x) for x in reply.atoms]

* Sat 29 Mar 2014 12:01:42 AM JST
ListPropertiesUnchecked
* Sat 29 Mar 2014 12:01:43 AM JST
ListPropertiesUnchecked
* Sat 29 Mar 2014 12:02:59 AM JST
xproto
* Sat 29 Mar 2014 12:03:49 AM JST
return 
* Sat 29 Mar 2014 12:06:24 AM JST
reply = con.core.QueryTree(window).reply()
* Sat 29 Mar 2014 12:06:27 AM JST
con
* Sat 29 Mar 2014 12:07:02 AM JST
        for winid in reply.children:
            yield self.window_type_dispatch(winid)

* Sat 29 Mar 2014 12:07:29 AM JST
window_type_dispatch
* Sat 29 Mar 2014 12:07:43 AM JST
    def query_recursive_tree(self, window):
        r"""SUMMARY

        query_tree(window)

        @Arguments:
        - `window`:

        @Return:
        """
        yield self.window_type_dispatch(window)
        con = SingleConnection.get_instance(display=self.display)
        reply = con.core.QueryTree(window).reply()
        for winid in reply.children:
            for win in self.query_recursive_tree(winid):
                yield win

* Sat 29 Mar 2014 12:08:06 AM JST
window_type_dispatch()
* Sat 29 Mar 2014 12:08:23 AM JST

* Sat 29 Mar 2014 12:08:23 AM JST

* Sat 29 Mar 2014 12:08:23 AM JST
        con = SingleConnection.get_instance(display=self.display)

* Sat 29 Mar 2014 12:08:25 AM JST
con
* Sat 29 Mar 2014 12:08:38 AM JST
QueryRecursiveTree
* Sat 29 Mar 2014 12:22:35 AM JST
 # return name
* Sat 29 Mar 2014 05:11:32 AM JST
only_if_exists, name_len, name
* Sat 29 Mar 2014 05:12:06 AM JST
name_len
* Sat 29 Mar 2014 05:12:13 AM JST
name_len, 
* Sat 29 Mar 2014 05:12:36 AM JST
return self.atom.InternAtom(only_if_exists, len(name), name)
* Sat 29 Mar 2014 05:15:53 AM JST

* Sat 29 Mar 2014 05:15:54 AM JST
Focus
* Sat 29 Mar 2014 05:15:56 AM JST
focus
* Sat 29 Mar 2014 05:16:50 AM JST
from
* Sat 29 Mar 2014 05:17:16 AM JST
InternAtom
* Sat 29 Mar 2014 05:18:55 AM JST
atom
* Sat 29 Mar 2014 05:18:56 AM JST
core2.atom
* Sat 29 Mar 2014 05:18:56 AM JST
c.core2.atom
* Sat 29 Mar 2014 05:20:09 AM JST
propagate, destination, event_mask, buf.getvalue()
* Sat 29 Mar 2014 05:20:30 AM JST
propagate, destination, event_mask, event
* Sat 29 Mar 2014 05:21:23 AM JST

* Sat 29 Mar 2014 05:21:24 AM JST
CacheAtom
* Sat 29 Mar 2014 05:21:24 AM JST
AtomIdentifier, CacheAtom
* Sat 29 Mar 2014 05:21:28 AM JST
atom
* Sat 29 Mar 2014 05:21:34 AM JST
SendEvent
* Sat 29 Mar 2014 05:23:24 AM JST

* Sat 29 Mar 2014 05:23:24 AM JST
SendEvent
* Sat 29 Mar 2014 05:23:29 AM JST
sendevent
* Sat 29 Mar 2014 05:23:41 AM JST
Property
* Sat 29 Mar 2014 05:42:01 AM JST

* Sat 29 Mar 2014 05:42:01 AM JST
PropertyAtom
* Sat 29 Mar 2014 05:42:04 AM JST
atoms
* Sat 29 Mar 2014 05:43:26 AM JST
coreatom
* Sat 29 Mar 2014 05:43:47 AM JST
coreatom
* Sat 29 Mar 2014 05:47:08 AM JST
self), 
* Sat 29 Mar 2014 05:47:09 AM JST
len(self), 
* Sat 29 Mar 2014 05:47:12 AM JST
self),
* Sat 29 Mar 2014 05:47:12 AM JST
len(self),
* Sat 29 Mar 2014 05:49:06 AM JST
AtomIdentifier, 
* Sat 29 Mar 2014 05:50:39 AM JST

* Sat 29 Mar 2014 05:50:39 AM JST

* Sat 29 Mar 2014 05:50:39 AM JST
from xcb2.xconnection.wrapcore import WrapCore

* Sat 29 Mar 2014 05:55:47 AM JST
import 
* Sat 29 Mar 2014 05:58:52 AM JST

* Sat 29 Mar 2014 05:58:52 AM JST

* Sat 29 Mar 2014 05:58:52 AM JST
from xcb2.xconnection.atom import AtomIdentifier

* Sat 29 Mar 2014 06:03:46 AM JST
sendevent
* Sat 29 Mar 2014 06:03:52 AM JST
SendEvent
* Sat 29 Mar 2014 06:04:27 AM JST
sendevent
* Sat 29 Mar 2014 06:04:33 AM JST
sendevent
* Sat 29 Mar 2014 06:05:39 AM JST
        if not hasattr(self.connection, 'core2'):
            from xcb2.xconnection.wrapcore import WrapCore
            self.connection.core2 = WrapCore(self.connection)

* Sat 29 Mar 2014 06:05:49 AM JST
sendevent
* Sat 29 Mar 2014 06:18:20 AM JST
AtomIdentifier
* Sat 29 Mar 2014 06:42:35 AM JST
from xcb2.xconnection.atom import AtomIdentifier
* Sat 29 Mar 2014 06:42:41 AM JST
self.connection.atom = AtomIdentifier(self.connection)
* Sat 29 Mar 2014 06:42:48 AM JST
connection
* Sat 29 Mar 2014 06:43:04 AM JST
GetAtomName
* Sat 29 Mar 2014 06:43:13 AM JST
GetAtomNameUnchecked
* Sat 29 Mar 2014 06:43:33 AM JST
only_if_exists, 
* Sat 29 Mar 2014 06:45:40 AM JST
self.connection.atom = AtomIdentifier(self.connection)
* Sat 29 Mar 2014 06:45:45 AM JST
AtomIdentifier(self.connection)
* Sat 29 Mar 2014 06:46:31 AM JST
GetAtomName
* Sat 29 Mar 2014 06:47:13 AM JST
only_if_exists, 
* Sat 29 Mar 2014 06:47:39 AM JST
connection.
* Sat 29 Mar 2014 06:47:45 AM JST
connection.
* Sat 29 Mar 2014 06:48:50 AM JST

* Sat 29 Mar 2014 06:48:50 AM JST

* Sat 29 Mar 2014 06:48:50 AM JST
from xcb2.xconnection.atom import CacheAtom

* Sat 29 Mar 2014 06:50:15 AM JST
connection
* Sat 29 Mar 2014 06:50:32 AM JST
atom
* Sat 29 Mar 2014 06:52:36 AM JST
        if not hasattr(self.connection, 'core2'):
            from xcb2.xconnection.wrapcore import WrapCore
            self.connection.core2 = WrapCore(self.connection)

* Sat 29 Mar 2014 06:54:02 AM JST
c=xcb2.connect()
* Sat 29 Mar 2014 06:54:07 AM JST
import xcb2
* Sat 29 Mar 2014 06:54:33 AM JST
import xcb2
c=xcb2.connect()
* Sat 29 Mar 2014 06:55:16 AM JST

* Sat 29 Mar 2014 06:55:16 AM JST

* Sat 29 Mar 2014 06:55:16 AM JST
from xcb2.xconnection.atom import AtomIdentifier

* Sat 29 Mar 2014 06:55:17 AM JST
from xcb2.xconnection.atom import AtomIdentifier

* Sat 29 Mar 2014 06:55:17 AM JST
from xcb2.xconnection.atom import AtomIdentifier
from xcb2.xconnection.sendevent import SendEvent

* Sat 29 Mar 2014 06:56:24 AM JST
PropertyAtom
* Sat 29 Mar 2014 06:56:27 AM JST
from xcb2.xconnection.atoms import PropertyAtom
* Sat 29 Mar 2014 06:56:48 AM JST
    def GetProperty(self, delete, window, property_, offset=0, length=10):
        r"""SUMMARY

        GetProperty()

        @Return:
        """
        prop = self.atom(property_)
        types = PropertyAtom.get_types(prop)
        reply = self.core.GetProperty(
            delete, window, self.atom(property_), self.atom(types.name),
            offset, length).reply()
        return types(self, reply, delete, window, prop, types, offset, length)

    def GetPropertyUnchecked(self, delete, window, property_, offset, length):
        r"""SUMMARY

        GetPropertyUnchecked()

        @Return:
        """
        prop = self.atom(property_)
        types = PropertyAtom.get_types(prop)
        reply = self.core.GetPropertyUnchecked(
            delete, window, self.atom(property_),
            self.atom(types.name), offset, length).reply()
        return types(self, reply, delete, window, prop, types, offset, length)

    def GetFullProperty(self, delete, window, property_, offset=0, length=10):
        r"""SUMMARY

        GetProperty()

        @Return:
        """
        return self.GetProperty(
            delete, window, property_, offset, length).get_full_value()

    def GetFullPropertyUnchecked(self, delete, window, property_,
                                 offset=0, length=10):
        r"""SUMMARY

        GetProperty()

        @Return:
        """
        return self.GetPropertyUnchecked(
            delete, window, property_, offset, length).get_full_value()

* Sat 29 Mar 2014 06:57:43 AM JST
    def ChangeProperty(self, mode, window, property_, type_, format_,
                       data_len, data):
        r"""SUMMARY

        ChangeProperty()

        @Return:
        """
        return self.core.ChangeProperty(mode, window, self.atom(property_),
                                        self.atom(type_), format_, data_len,
                                        data)

    def ChangePropertyChecked(self, mode, window, property_, type_, format_,
                              data_len, data):
        r"""SUMMARY

        ChangePropertyChecked()

        @Return:
        """
        return self.core.ChangePropertyChecked(mode, window,
                                               self.atom(property_),
                                               self.atom(type_), format_,
                                               data_len, data)

    def DeleteProperty(self, window, property_):
        r"""SUMMARY

        DeleteProperty()

        @Return:
        """
        return self.core.DeleteProperty(window, self.atom(property_))

    def DeletePropertyChecked(self, window, property_):
        r"""SUMMARY

        DeletePropertyChecked()

        @Return:
        """
        return self.core.DeletePropertyChecked(window, self.atom(property_))

    def RotateProperties(self, window, atoms_len, delta, atoms):
        r"""SUMMARY

        RotateProperties()

        @Return:
        """
        return self.core.RotateProperties(window, atoms_len, delta, atoms)

    def RotatePropertiesChecked(self, window, atoms_len, delta, atoms):
        r"""SUMMARY

        RotatePropertiesChecked()

        @Return:
        """
        return self.core.RotatePropertiesChecked(window, atoms_len, delta, atoms)

* Sat 29 Mar 2014 06:59:55 AM JST
        if not hasattr(self.connection, 'core2'):
            from xcb2.xconnection.wrapcore import WrapCore
            self.connection.core2 = WrapCore(self.connection)

* Sat 29 Mar 2014 07:00:53 AM JST
property
* Sat 29 Mar 2014 07:02:00 AM JST
D c
* Sat 29 Mar 2014 07:03:10 AM JST
import xcb2
c=xcb2.connect()
* Sat 29 Mar 2014 07:03:57 AM JST
import xcb2
c=xcb2.connect()
* Sat 29 Mar 2014 07:05:08 AM JST

* Sat 29 Mar 2014 07:05:08 AM JST

* Sat 29 Mar 2014 07:05:08 AM JST
# from xcb2.xconnection.atoms import PropertyAtom

* Sat 29 Mar 2014 07:05:26 AM JST

* Sat 29 Mar 2014 07:05:26 AM JST

* Sat 29 Mar 2014 07:05:26 AM JST
# from xcb2.xconnection.properties import Property

* Sat 29 Mar 2014 07:06:32 AM JST
    @property
    def types(self, ):
        r"""SUMMARY
        
        types()
        
        @Return:
        """
        return PropertyAtom.get_types(self.data)


* Sat 29 Mar 2014 07:07:21 AM JST
    @property
* Sat 29 Mar 2014 07:09:06 AM JST
types
* Sat 29 Mar 2014 07:09:56 AM JST
import xcb2
c=xcb2.connect()
* Sat 29 Mar 2014 07:10:38 AM JST
54525974
* Sat 29 Mar 2014 07:11:32 AM JST

* Sat 29 Mar 2014 07:11:32 AM JST

* Sat 29 Mar 2014 07:11:33 AM JST
        # types = PropertyAtom.get_types(prop)

* Sat 29 Mar 2014 07:11:35 AM JST

* Sat 29 Mar 2014 07:11:35 AM JST

* Sat 29 Mar 2014 07:11:35 AM JST
        # types = PropertyAtom.get_types(prop)

* Sat 29 Mar 2014 07:12:04 AM JST
reply
* Sat 29 Mar 2014 07:12:09 AM JST
.reply()
* Sat 29 Mar 2014 07:12:28 AM JST
            
* Sat 29 Mar 2014 07:12:32 AM JST
   
* Sat 29 Mar 2014 07:13:31 AM JST
reply
* Sat 29 Mar 2014 07:13:35 AM JST
.reply()
* Sat 29 Mar 2014 07:13:52 AM JST
            
* Sat 29 Mar 2014 07:31:07 AM JST

* Sat 29 Mar 2014 07:31:07 AM JST

* Sat 29 Mar 2014 07:31:07 AM JST
# from xcb2.xconnection.atoms import PropertyAtom

* Sat 29 Mar 2014 07:35:36 AM JST

* Sat 29 Mar 2014 07:35:37 AM JST

* Sat 29 Mar 2014 07:35:37 AM JST
        # self.atom = AtomIdentifier(self)

* Sat 29 Mar 2014 07:35:37 AM JST
        # self.atom = AtomIdentifier(self)

* Sat 29 Mar 2014 07:35:37 AM JST
        # self.atom = AtomIdentifier(self)
        # self.sendevent = SendEvent(self)

* Sat 29 Mar 2014 07:35:43 AM JST

* Sat 29 Mar 2014 07:35:43 AM JST

* Sat 29 Mar 2014 07:35:43 AM JST
from xcb2.xconnection.sendevent import SendEvent

* Sat 29 Mar 2014 07:35:43 AM JST
from xcb2.xconnection.sendevent import SendEvent

* Sat 29 Mar 2014 07:35:43 AM JST
from xcb2.xconnection.sendevent import SendEvent
from xcb2.xconnection.atom import AtomIdentifier

* Sat 29 Mar 2014 07:36:50 AM JST
import xcb2
c=xcb2.connect()

* Sat 29 Mar 2014 07:39:28 AM JST
BITMAP')
* Sat 29 Mar 2014 07:39:28 AM JST
InternAtom('BITMAP')
* Sat 29 Mar 2014 07:52:55 AM JST
class FundamentalWindow(WindowTypesAbstract):
    r"""
    """

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return self.window.pack()


* Sat 29 Mar 2014 07:53:31 AM JST
    def list_properties(self, ):
        r"""SUMMARY

        list_properties()

        @Return:
        """
        return self.window.list_properties()

    @property
    def types(self, ):
        r"""SUMMARY

        get_window_type()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_WINDOW_TYPE')

    def get_geometry(self, ):
        r"""SUMMARY

        get_geometry()

        @Return:
        """
        return self.window.get_geometry()

    @property
    def x(self, ):
        r"""SUMMARY

        get_x()

        @Return:
        """
        return self.get_geometry().x

    @property
    def y(self, ):
        r"""SUMMARY

        get_y()

        @Return:
        """
        return self.get_geometry().y

    @property
    def height(self, ):
        r"""SUMMARY

        get_height()

        @Return:
        """
        return self.get_geometry().height

    @property
    def width(self, ):
        r"""SUMMARY

        get_width()

        @Return:
        """
        return self.get_geometry().width


class WindowBase(FundamentalWindow):
    r"""
    """

    def query_tree(self, ):
        r"""SUMMARY

        query_tree()

        @Return:
        """
        for win in self.window.query_tree():
            yield win

    def query_subwindows(self, ):
        r"""SUMMARY

        query_subwindows()

        @Return:
        """
        for win in self.window.query_recursive_tree():
            yield win

    def grab(self, ):
        r"""SUMMARY

        grab()

        @Return:
        """
        pass

    def make_subwindow(self, ):
        r"""SUMMARY

        make_subwindow()

        @Return:
        """
        pass

    def destroy_subwindows(self, ):
        r"""SUMMARY

        destroy_subwindows()

        @Return:
        """
        self.window.destroy_subwindows()


class StandardWindow(WindowBase):
    r"""SUMMARY
    """

    @property
    def name(self, ):
        r"""SUMMARY

        get_name()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_NAME')

    @property
    def wmclass(self, ):
        r"""SUMMARY

        get_class()

        @Return:
        """
        clsstring = self.window.get_full_property('WM_CLASS')
        lis = clsstring.split('\0')
        lis.remove('')
        return lis

    @property
    def pid(self, ):
        r"""SUMMARY

        get_pid()

        @Return:
        """
        pid = self.window.get_full_property('_NET_WM_PID')
        return get_first_index(pid)

    def focus(self, ):
        r"""SUMMARY

        focus()

        @Return:
        """
        self.window.core.SetInputFocus(
            InputFocus.PointerRoot, self.window.id, Time.CurrentTime)

    def list_states(self, ):
        r"""SUMMARY

        get_states()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_STATE')

    def get_desktop_number(self, ):
        r"""SUMMARY

        get_desktop_num()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_DESKTOP')

    def get_frame_extents(self, ):
        r"""SUMMARY

        get_frame_extents()

        @Return:
        """
        return self.window.get_full_property('_NET_FRAME_EXTENTS')

    def get_icon(self, ):
        r"""SUMMARY

        get_icon()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_ICON_NAME')

    def get_user_window_time(self, ):
        r"""SUMMARY

        get_user_window_time()

        @Return:
        """
        result = self.window.get_full_property('_NET_WM_USER_TIME_WINDOW')
        return get_first_index(result)

    def list_allowed_actions(self, ):
        r"""SUMMARY

        get_allowed_actions()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_ALLOWED_ACTIONS')

    def set_above(self, ):
        r"""SUMMARY

        set_above()

        @Return:
        """
        self.window.extensions.state.above.set(self.window.id)

    def unset_above(self, ):
        r"""SUMMARY

        unset_above()

        @Return:
        """
        self.window.extensions.state.above.unset(self.window.id)

    def toggle_above(self, ):
        r"""SUMMARY

        toggle_above()

        @Return:
        """
        self.window.extension.state.above.toggle(self.window.id)

    def isabove(self, ):
        r"""SUMMARY

        isabove()

        @Return:
        """
        return self.window.extensions.state.check.isabove(self.window.id)

    def isbelow(self, ):
        r"""SUMMARY

        isbelow()

        @Return:
        """
        return self.window.extensions.state.check.isbelow(self.window.id)

    def isfullscreen(self, ):
        r"""SUMMARY

        isfullscreen()

        @Return:
        """
        return self.window.extensions.state.check.isfullscreen(self.window.id)

    def isshade(self, ):
        r"""SUMMARY

        isshade()

        @Return:
        """
        return self.window.extensions.state.check.isshade(self.window.id)


class StaticWindow(StandardWindow):
    r"""
    """

class DynamicWindow(StandardWindow):
    r"""
    """

    def __setattr__(self, name, value):
        if isinstance(value, int) and name in ('x', 'y', 'width', 'height'):
            if 'x' == name:
                self.move(x=value)
            elif 'y':
                self.move(y=value)
            elif 'width':
                self.move(width=value)
            elif 'height':
                self.move(height=value)
        else:
            super(DynamicWindow, self).__setattr__(name, value)

    def stack(self, above=True):
        r"""SUMMARY

        stack(above)

        @Arguments:
        - `above`:

        @Return:
        """
        self.window.core.ConfigureWindow(
            self.window.id, ConfigWindow.StackMode,
            [StackMode.Above if above else StackMode.Below])

    def move(self, **changes):
        r"""SUMMARY

        move(**kwargs)

        @Arguments:
        - `**kwargs`:

        @Return:
        """
        mask = 0
        values = []
        for key in ('x', 'y', 'width', 'height'):
            if key not in changes:
                continue
            mask |= getattr(ConfigWindow, key.capitalize())
            values.append(changes[key])
        if mask:
            self.window.core.ConfigureWindow(self.window.id, mask, values)

    def close(self, ):
        r"""SUMMARY

        close()

        @Return:
        """
        self.window.extensions.destroy.close(self.window.id)

    def kill(self, ):
        r"""SUMMARY

        kill()

        @Return:
        """
        self.window.core.KillClient(self.window.id)

    def set_maximize(self, ):
        r"""SUMMARY

        set_maximize()

        @Return:
        """
        self.window.extensions.state.maximize.set(self.window.id)

    def unset_maximize(self, ):
        r"""SUMMARY

        unset_maximize()

        @Return:
        """
        self.window.extensions.state.maximize.unset(self.window.id)

    def toggle_maximize(self, ):
        r"""SUMMARY

        toggle_maximize()

        @Return:
        """
        self.window.extensions.state.maximize.toggle(self.window.id)

    def set_fullscreen(self, ):
        r"""SUMMARY

        set_fullscreen()

        @Return:
        """
        self.window.extensions.state.fullscreen.set(self.window.id)

    def unset_fullscreen(self, ):
        r"""SUMMARY

        unset_fullscreen()

        @Return:
        """
        self.window.extensions.state.fullscreen.unset(self.window.id)

    def toggle_fullscreen(self, ):
        r"""SUMMARY

        toggle_fullscreen()

        @Return:
        """
        self.window.extensions.state.fullscreen.toggle(self.window.id)

    def set_below(self, ):
        r"""SUMMARY

        set_below()

        @Return:
        """
        self.window.extensions.state.below.set(self.window.id)

    def unset_below(self, ):
        r"""SUMMARY

        unset_below()

        @Return:
        """
        self.window.extensions.state.below.unset(self.window.id)

    def toggle_below(self, ):
        r"""SUMMARY

        toggle_below()

        @Return:
        """
        self.window.extensions.state.below.toggle(self.window.id)

    def set_shade(self, ):
        r"""SUMMARY

        set_shade()

        @Return:
        """
        self.window.extensions.state.shade.set(self.window.id)

    def unset_shade(self, ):
        r"""SUMMARY

        unset_shade()

        @Return:
        """
        self.window.extensions.state.shade.unset(self.window.id)

    def toggle_shade(self, ):
        r"""SUMMARY

        toggle_shade()

        @Return:
        """
        self.window.extensions.state.shade.toggle(self.window.id)


class WindowSplashType(FundamentalWindow):
    r"""
    """
    type_name = '_NET_WM_WINDOW_TYPE_SPLASH'


class WindowNormalType(DynamicWindow):
    r"""
    """
    type_name = '_NET_WM_WINDOW_TYPE_NORMAL'


class WindowRootType(StaticWindow):
    r"""SUMMARY
    """

    def get_supported(self, ):
        r"""SUMMARY

        get_supported()

        @Return:
        """
        return self.window.get_full_property('_NET_SUPPORTED')

    def get_number_of_desktops(self, ):
        r"""SUMMARY

        get_number_of_desktops()

        @Return:
        """
        return self.window.get_full_property('_NET_NUMBER_OF_DESKTOPS')

    def get_desktop_geometry(self, ):
        r"""SUMMARY

        get_desktop_geometry()

        @Return:
        """
        return self.window.get_full_property('_NET_DESKTOP_GEOMETRY')

    def get_desktop_viewport(self, ):
        r"""SUMMARY

        get_desktop_viewport()

        @Return:
        """
        return self.window.get_full_property('_NET_DESKTOP_VIEWPORT')

    def get_current_desktop(self, ):
        r"""SUMMARY

        get_current_desktop()

        @Return:
        """
        return self.window.get_full_property('_NET_CURRENT_DESKTOP')

    def get_desktop_name(self, ):
        r"""SUMMARY

        get_desktop_name()

        @Return:
        """
        return self.window.get_full_property('_NET_DESKTOP_NAMES')

    def get_active_window(self, ):
        r"""SUMMARY

        get_active_window()

        @Return:
        """
        alist = self.window.get_full_property('_NET_ACTIVE_WINDOW')
        if alist:
            alist.remove(0)
        if not alist:
            return None
        return self.window.extensions.window_type_dispatch(alist[0])

    def get_workarea(self, ):
        r"""SUMMARY

        get_workarea()

        @Return:
        """
        return self.window.get_full_property('_NET_WORKAREA')

    def get_virtual_roots(self, ):
        r"""SUMMARY

        get_virtual_roots()

        @Return:
        """
        return self.window.get_full_property('_NET_VIRTUAL_ROOTS')

    def get_supporting_wm_check(self, ):
        r"""SUMMARY

        get_supporting_wm_check()

        @Return:
        """
        return self.window.get_full_property('_NET_SUPPORTING_WM_CHECK')

    def get_desktop_layout(self, ):
        r"""SUMMARY

        get_desktop_layout()

        @Return:
        """
        return self.window.get_full_property('_NET_DESKTOP_LAYOUT')

    def get_showing_desktop(self, ):
        r"""SUMMARY

        get_showing_desktop()

        @Return:
        """
        return self.window.get_full_property('_NET_DESKTOP_LAYOUT')

    def get_user_time(self, ):
        r"""SUMMARY

        get_user_time()

        @Return:
        """
        return self.window.get_full_property('_NET_WM_USER_TIME')

    def list_client_list(self, ):
        r"""SUMMARY

        get_client_list()

        @Return:
        """
        for win in self.window.get_full_property('_NET_CLIENT_LIST'):
            yield self.window.extensions.window_type_dispatch(win)

    def list_client_list_stacking(self, ):
        r"""SUMMARY

        get_client_list_stacking()

        @Return:
        """
        for win in self.window.get_full_property('_NET_CLIENT_LIST_STACKING'):
            yield self.window.extensions.window_type_dispatch(win)


class WindowDesktopType(StaticWindow):
    r"""
    """
    type_name = '_NET_WM_WINDOW_TYPE_DESKTOP'


class WindowDockType(StaticWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]

    type_name = '_NET_WM_WINDOW_TYPE_DOCK'


class WindowToolbarType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_TOOLBAR'


class WindowMenuType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_MENU'


class WindowUtilityType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_UTILITY'


class WindowDialogType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_DIALOG'


class WindowDropdownMenuType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU'


class WindowPopupMenuType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_POPUP_MENU'


class WindowTooltipType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_TOOLTIP'


class WindowNotificationType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_NOTIFICATION'


class WindowComboType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_COMBO'


class WindowDNDType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_DND'

* Sat 29 Mar 2014 08:14:50 AM JST
Display
* Sat 29 Mar 2014 08:15:47 AM JST
import xcb2
c=xcb2.connect()

* Sat 29 Mar 2014 08:16:28 AM JST
xahk
* Sat 29 Mar 2014 08:16:33 AM JST
display
* Sat 29 Mar 2014 08:17:14 AM JST
form
* Sat 29 Mar 2014 08:19:19 AM JST
int(
* Sat 29 Mar 2014 08:20:43 AM JST
    def __int__(self, ):
        return self._data

* Sat 29 Mar 2014 08:20:55 AM JST
    def __str__(self, ):
        return self._data

* Sat 29 Mar 2014 08:21:24 AM JST
class KeyAbstract(DisplayName):
    r"""SUMMARY
    """

    def __init__(self, data, display=None):
        r"""

        @Arguments:
        - `data`:
        - `display`:
        """
        DisplayName.__init__(self, display)
        self._data = data

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self._data, other._data)
        return cmp(self._data, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._data == other._data
        return self._data == other

    def __ne__(self, other):
        return not (self == other)

    def __repr__(self, ):
        return '{0.__class__.__name__}({1})'.format(self, self._data)

    def __int__(self, ):
        return int(self._data)

    def __str__(self, ):
        return str(self._data)

* Sat 29 Mar 2014 08:21:43 AM JST
    def __int__(self, ):
        return int(self._data)

    def __str__(self, ):
        return str(self._data)

* Sat 29 Mar 2014 08:21:53 AM JST
class KeyAbstract(Display):
    r"""SUMMARY
    """

    def __init__(self, data, display=None):
        r"""

        @Arguments:
        - `data`:
        - `display`:
        """
        Display.__init__(self, display)
        self._data = data

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self._data, other._data)
        return cmp(self._data, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._data == other._data
        return self._data == other

    def __ne__(self, other):
        return not (self == other)

    def __int__(self, ):
        return int(self._data)

    def __str__(self, ):
        return str(self._data)

    def __repr__(self, ):
        return '{0.__class__.__name__}({1})'.format(self, self._data)

# for debug

* Sat 29 Mar 2014 08:21:57 AM JST

* Sat 29 Mar 2014 08:21:57 AM JST

* Sat 29 Mar 2014 08:21:57 AM JST
# for debug

* Sat 29 Mar 2014 08:22:54 AM JST
state
* Sat 29 Mar 2014 08:24:37 AM JST

* Sat 29 Mar 2014 08:24:37 AM JST

* Sat 29 Mar 2014 08:24:37 AM JST
    _structcode = 'H'

* Sat 29 Mar 2014 08:28:22 AM JST
    def __repr__(self, ):
        fmt = '{0.__class__.__name__}({1}, state={0.state})'.format
        return fmt(self, self._data)

* Sat 29 Mar 2014 08:28:31 AM JST
    def __ior__(self, other):
        self.state |= other
        return self

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            if (self._data == other._data and self.state == other.state):
                return 0
            return -1
        return cmp(self._data, other)

    def __hash__(self, ):
        return hash(self._data)

* Sat 29 Mar 2014 08:57:09 AM JST
[()] * 256
* Sat 29 Mar 2014 09:12:47 AM JST
listuti
* Sat 29 Mar 2014 09:15:07 AM JST
from t1.listutil.limitlist import ListFill
* Sat 29 Mar 2014 09:33:05 AM JST
from xcb2.xconnection.abstract import ConnectionAbstract
* Sat 29 Mar 2014 09:33:42 AM JST
SPECIALCHAR_TO_NAME = {
    ' ' : "space",
    '\t' : "Tab",
    '\n' : "Return",  # for some reason this needs to be cr, not lf
    '\r' : "Return",
    '\e' : "Escape",
    '!' : "exclam",
    '#' : "numbersign",
    '%' : "percent",
    '$' : "dollar",
    '&' : "ampersand",
    '"' : "quotedbl",
    '\'' : "apostrophe",
    '(' : "parenleft",
    ')' : "parenright",
    '*' : "asterisk",
    '=' : "equal",
    '+' : "plus",
    ',' : "comma",
    '-' : "minus",
    '.' : "period",
    '/' : "slash",
    ':' : "colon",
    ';' : "semicolon",
    '<' : "less",
    '>' : "greater",
    '?' : "question",
    '@' : "at",
    '[' : "bracketleft",
    ']' : "bracketright",
    '\\' : "backslash",
    '^' : "asciicircum",
    '_' : "underscore",
    '`' : "grave",
    '{' : "braceleft",
    '|' : "bar",
    '}' : "braceright",
    '~' : "asciitilde"
    }

* Sat 29 Mar 2014 09:34:44 AM JST
from t1.listutil.limitlist import ListFill
* Sat 29 Mar 2014 09:35:22 AM JST
class KeymapCodes(DisplayName):
    r"""SUMMARY
    """

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `display`:
        """
        DisplayName.__init__(self, display)
        self._keymap_codes = [()] * 256
        self.get_keyboard_mapping()

    def get_keyboard_mapping(self, ):
        r"""SUMMARY

        get_keyboard_mapping()

        @Return:
        """
        conn = SingleConnection.get_instance(display=self.display)
        setup = conn.get_setup()
        minkeycode, maxkeycode = setup.min_keycode, setup.max_keycode
        lastcode = maxkeycode + minkeycode
        reply = conn.core.GetKeyboardMapping(
            minkeycode, maxkeycode - minkeycode + 1).reply()
        codes = zip(*[iter(reply.keysyms)] * reply.keysyms_per_keycode)
        self._keymap_codes[minkeycode:lastcode] = codes
        return codes

    def keycode_to_keysym(self, keycode, index):
        r"""SUMMARY

        keycode_to_keysym(keycode, index)

        Convert a keycode to a keysym, looking in entry index.
        Normally index 0 is unshifted, 1 is shifted, 2 is alt grid, and 3
        is shift+alt grid. If that key entry is not bound, X.NoSymbol is
        returned.

        @Arguments:
        - `keycode`:
        - `index`:

        @Return:
        """
        if keycode <= len(self._keymap_codes):
            if index < len(self._keymap_codes[keycode]):
                return self._keymap_codes[keycode][index]
        return 0

* Sat 29 Mar 2014 09:36:49 AM JST
DisplayName
* Sat 29 Mar 2014 09:37:00 AM JST
ConnectionAbstract
* Sat 29 Mar 2014 09:37:15 AM JST
display
* Sat 29 Mar 2014 09:39:55 AM JST

* Sat 29 Mar 2014 09:39:55 AM JST

* Sat 29 Mar 2014 09:39:55 AM JST
        conn = SingleConnection.get_instance(display=self.display)

* Sat 29 Mar 2014 09:39:57 AM JST
conn
* Sat 29 Mar 2014 09:40:06 AM JST
conn
* Sat 29 Mar 2014 09:40:52 AM JST
class ConversionError(StandardError):
    pass



* Sat 29 Mar 2014 09:41:24 AM JST
class KeyboardMapping(DisplayName):
    r"""SUMMARY
    """
    specialchar_to_name = SPECIALCHAR_TO_NAME

    def __init__(self, display=None):
        r"""
        """
        DisplayName.__init__(self, display)
        self._keymap_codes = KeymapCodes(display)
        self._keymap_syms = {}
        self._update_keymap()

    def get_keyboard_mapping(self, ):
        r"""SUMMARY

        get_keyboard_mapping()

        @Return:
        """
        return self._keymap_codes.get_keyboard_mapping()

    def keysym_to_keycode(self, keysym):
        r"""SUMMARY

        keysym_to_keycode(keysym)

        @Arguments:
        - `keysym`:

        @Return:
        """
        if keysym in self._keymap_syms:
            return self._keymap_syms[keysym][0][1]
        return 0

    def keysym_to_keycodes(self, keysym):
        r"""SUMMARY

        keysym_to_keycodes(keysym)

        @Arguments:
        - `keysym`:

        @Return:
        """
        if keysym in self._keymap_syms:
            return map(lambda x: (x[1], x[0]), self._keymap_syms[keysym])
        return []

    def keycode_to_keysym(self, keycode, index):
        r"""SUMMARY

        keycode_to_keysym(keycode, index)

        Convert a keycode to a keysym, looking in entry index.
        Normally index 0 is unshifted, 1 is shifted, 2 is alt grid, and 3
        is shift+alt grid. If that key entry is not bound, X.NoSymbol is
        returned.

        @Arguments:
        - `keycode`:
        - `index`:

        @Return:
        """
        return self._keymap_codes.keycode_to_keysym(keycode, index)

    def _update_keymap(self, ):
        r"""SUMMARY

        _update_keymap()

        @Return:
        """
        conn = SingleConnection.get_instance(display=self.display)
        setup = conn.get_setup()
        first_keycode, count = setup.min_keycode, setup.max_keycode
        lastcode = first_keycode + count
        for _, codes in self._keymap_syms.items():
            i = 0
            while i < len(codes):
                code = codes[i][1]
                if code >= first_keycode and code < lastcode:
                    del codes[i]
                else:
                    i = i + 1

        keysyms = self.get_keyboard_mapping()

        code = first_keycode
        for syms in keysyms:
            index = 0
            for sym in syms:
                if sym != 0:
                    if self._keymap_syms.has_key(sym):
                        symcodes = self._keymap_syms[sym]
                        symcodes.append((index, code))
                        symcodes.sort()
                    else:
                        self._keymap_syms[sym] = [(index, code)]
                index = index + 1
            code = code + 1

    def keysym_to_str(self, keysym):
        """
            convert a keysym to its equivalent character or
            key description and return it.
            Returns an empty for an unknown keysym.
            That's just a shortcut for :mod:`ooxcb.keysymdef`.
        """
        return keysymdef.names.get(keysym, '')

    def keysym_to_char(self, keysym):
        r"""SUMMARY

        keysym_to_char(keysym)

        @Arguments:
        - `keysym`:

        @Return:
        """
        # special keysyms
        if keysym in (0, 0x00ffffff):
            raise ConversionError("%d is a special keysym" % keysym)
        # latin-1 keysyms
        elif (0x0020 <= keysym <= 0x007e or 0x00a0 <= keysym <= 0x00ff):
            return unichr(keysym)
        # unicode keysyms
        elif (0x01000100 <= keysym <= 0x0110ffff):
            return unichr(keysym - 0x01000000)
        # legacy keysyms
        elif keysym in keysymdef.legacy_keysyms:
            return unichr(keysymdef.legacy_keysyms[keysym])
        # dunno!
        else:
            raise ConversionError(
                "Unsupported keysym category or legacy keysym: %d" % keysym)

    def str_to_keysym(self, string):
        r"""SUMMARY

        str_keysym(char_)

        @Arguments:
        - `char_`:

        @Return:
        """
        if string in KeyboardMapping.specialchar_to_name:
            string = KeyboardMapping.specialchar_to_name.get(string)
        return keysymdef.keysyms.get(string, '')

* Sat 29 Mar 2014 09:41:31 AM JST
DisplayName
* Sat 29 Mar 2014 09:41:40 AM JST
ConnectionAbstract
* Sat 29 Mar 2014 09:42:10 AM JST

* Sat 29 Mar 2014 09:42:10 AM JST

* Sat 29 Mar 2014 09:42:10 AM JST
        conn = SingleConnection.get_instance(display=self.display)

* Sat 29 Mar 2014 09:42:16 AM JST
conn
* Sat 29 Mar 2014 04:02:22 PM JST
KeyboardMapping
* Sat 29 Mar 2014 04:03:01 PM JST

* Sat 29 Mar 2014 04:29:45 PM JST
key
* Sat 29 Mar 2014 04:32:18 PM JST
state = State(state) | self.state
* Sat 29 Mar 2014 04:32:36 PM JST

* Sat 29 Mar 2014 04:32:36 PM JST

* Sat 29 Mar 2014 04:32:36 PM JST
        self.

* Sat 29 Mar 2014 04:40:13 PM JST

* Sat 29 Mar 2014 04:40:14 PM JST
Display
* Sat 29 Mar 2014 04:40:20 PM JST
define
* Sat 29 Mar 2014 04:41:06 PM JST
root, 
* Sat 29 Mar 2014 04:41:07 PM JST
connection.root, 
* Sat 29 Mar 2014 04:41:07 PM JST
self.connection.root, 
* Sat 29 Mar 2014 04:41:47 PM JST
state
* Sat 29 Mar 2014 04:41:47 PM JST
self.state
* Sat 29 Mar 2014 04:42:11 PM JST
    
* Sat 29 Mar 2014 04:42:13 PM JST
            
* Sat 29 Mar 2014 04:45:31 PM JST
        state = StateCode(state) | self.state
        # TODO: (Atami) [2014/03/29]
        window = window or self.connection.get_active_window()
        # TODO: (Atami) [2014/03/29]
        self.connection.core2.SendEvent.KeyPress(
            False, # propagate
            window, # destination
            0, # event_mask
            self._data, # detail
            0, # sequence_number
            xproto.Time.CurrentTime, # time
            482, # root
            window, # window
            0, # child
            0, # root_x
            0, # root_y
            0, # event_x
            0, # event_y
            state, # state
            1, # samescreen
            )

* Sat 29 Mar 2014 04:47:37 PM JST
Propagate
* Sat 29 Mar 2014 04:52:53 PM JST
xproto.GrabMode.Async, xproto.GrabMode.Async
* Sat 29 Mar 2014 04:54:09 PM JST

* Sat 29 Mar 2014 04:54:10 PM JST

* Sat 29 Mar 2014 04:54:10 PM JST
            xproto,

* Sat 29 Mar 2014 04:54:59 PM JST
GrabKeyChecked
* Sat 29 Mar 2014 04:55:20 PM JST
    def GrabKey(self, owner_events, window, modifiers, key):
        r"""SUMMARY

        GrabKey()

        @Return:
        """
        return self.connection.core.GrabKey(
            owner_events,
            window,
            modifiers,
            key,
            xproto.GrabMode.Async,
            xproto.GrabMode.Async)

* Sat 29 Mar 2014 04:56:36 PM JST
    def UngrabKey(self, key, window, modifiers):
        r"""SUMMARY
        
        UngrabKey(key, window, modifiers)
        
        @Arguments:
        - `key`:
        - `window`:
        - `modifiers`:
        
        @Return:
        """
        return self.connection.core.UngrabKey(key, window, modifiers)


* Sat 29 Mar 2014 04:56:46 PM JST
Checked
* Sat 29 Mar 2014 05:01:10 PM JST
OwnerEvents
* Sat 29 Mar 2014 05:02:08 PM JST
self.connection.flush()
* Sat 29 Mar 2014 05:04:07 PM JST
        # TODO: (Atami) [2014/03/29]
        raise NotImplementedError()

* Sat 29 Mar 2014 05:04:40 PM JST
        # TODO: (Atami) [2014/03/24]
        raise NotImplementedError()

* Sat 29 Mar 2014 05:08:00 PM JST
window
* Sat 29 Mar 2014 05:10:42 PM JST
xproto.GrabMode.Async
* Sat 29 Mar 2014 05:11:56 PM JST
owner_events, window, event_mask, confine_to, cursor, button, modifiers
* Sat 29 Mar 2014 05:12:12 PM JST
        self.connection.core.GrabButton(
            owner_events,
            window,
            event_mask,
            xproto.GrabMode.Async,
            xproto.GrabMode.Async,
            confine_to,
            cursor,
            button,
            modifiers)

* Sat 29 Mar 2014 05:13:21 PM JST
        self.connection.core.GrabButton(
            owner_events,
            window,
            event_mask,
            xproto.GrabMode.Async,
            xproto.GrabMode.Async,
            confine_to,
            cursor,
            button,
            modifiers)

* Sat 29 Mar 2014 05:13:47 PM JST
event_mask
* Sat 29 Mar 2014 05:14:31 PM JST
ButtonPress
* Sat 29 Mar 2014 05:14:44 PM JST
    def GrabPressButton(self, owner_events, window, confine_to,
                        cursor, button, modifiers):
        r"""SUMMARY
        
        GrabPressButton(owner_events, window, confine_to, cursor, button, modifiers)
        
        @Arguments:
        - `owner_events`:
        - `window`:
        - `confine_to`:
        - `cursor`:
        - `button`:
        - `modifiers`:
        
        @Return:
        """
        return self.connection.core.GrabButton(
            owner_events,
            window,
            xproto.EventMask.ButtonPress,
            xproto.GrabMode.Async,
            xproto.GrabMode.Async,
            confine_to,
            cursor,
            button,
            modifiers)

* Sat 29 Mar 2014 05:15:10 PM JST
ButtonPress
* Sat 29 Mar 2014 05:15:31 PM JST
    def GrabPressButton(self, owner_events, window, confine_to,
                        cursor, button, modifiers):
        r"""SUMMARY

        GrabPressButton(owner_events, window, confine_to, cursor, button, modifiers)

        @Arguments:
        - `owner_events`:
        - `window`:
        - `confine_to`:
        - `cursor`:
        - `button`:
        - `modifiers`:

        @Return:
        """
        return self.connection.core.GrabButton(
            owner_events,
            window,
            xproto.EventMask.ButtonPress,
            xproto.GrabMode.Async,
            xproto.GrabMode.Async,
            confine_to,
            cursor,
            button,
            modifiers)

    def GrabReleaseButton(self, owner_events, window, confine_to,
                          cursor, button, modifiers):
        r"""SUMMARY

        GrabPressButton(owner_events, window, confine_to, cursor, button, modifiers)

        @Arguments:
        - `owner_events`:
        - `window`:
        - `confine_to`:
        - `cursor`:
        - `button`:
        - `modifiers`:

        @Return:
        """
        return self.connection.core.GrabButton(
            owner_events,
            window,
            xproto.EventMask.ButtonRelease,
            xproto.GrabMode.Async,
            xproto.GrabMode.Async,
            confine_to,
            cursor,
            button,
            modifiers)

* Sat 29 Mar 2014 05:15:43 PM JST
Checked
* Sat 29 Mar 2014 05:17:47 PM JST
xproto.OwnerEvents.TRUE
* Sat 29 Mar 2014 05:19:13 PM JST
    def __init__(self, data, state=0, display=None):
        r"""

        @Arguments:
        - `data`:
        - `state`:
        - `display`:
        """
        KeyAbstract.__init__(self, data, display)
        self.state = StateCode(state)

* Sat 29 Mar 2014 05:19:45 PM JST
        self.connection.core2.GrabPressButton(
            xproto.OwnerEvents.TRUE,
            window,
            0,
            0,
            self._data,
            self.state)

* Sat 29 Mar 2014 05:22:55 PM JST
        
* Sat 29 Mar 2014 05:28:26 PM JST
    def UngrabButton(self, button, window, modifiers):
        r"""SUMMARY
        
        UngrabButton(button, window, modifiers)
        
        @Arguments:
        - `button`:
        - `window`:
        - `modifiers`:
        
        @Return:
        """
        return self.connection.core.UngrabButton(button, window, modifiers)

* Sat 29 Mar 2014 05:28:35 PM JST
Checked
* Sat 29 Mar 2014 05:31:03 PM JST
    def __repr__(self, ):
        fmt = '{0.__class__.__name__}({1}, state={0.state})'.format
        return fmt(self, str(self._data))

* Sat 29 Mar 2014 05:44:33 PM JST
        if not keycodes:
            # TODO: (Atami) [2014/03/12]
            raise StandardError()

* Sat 29 Mar 2014 05:44:44 PM JST
key
* Sat 29 Mar 2014 05:45:01 PM JST
keyco
* Sat 29 Mar 2014 05:47:36 PM JST
return Keystring(char_, display=self.display)
* Sat 29 Mar 2014 05:49:57 PM JST
        if not keysym:
            # TODO: (Atami) [2014/03/12]
            raise StandardError()

* Sat 29 Mar 2014 05:50:00 PM JST
key
* Sat 29 Mar 2014 05:50:27 PM JST
    def to_keycode(self, ):
        r"""SUMMARY

        to_keycode()

        @Return:
        """
        return self.to_keysym().to_keycode()


* Sat 29 Mar 2014 05:50:37 PM JST
    def press_key(self, time=0, window=None, state=0):
        r"""SUMMARY

        press_key()

        @Return:
        """
        self.to_keycode().press_key(time, window, state)

* Sat 29 Mar 2014 05:50:51 PM JST
    def release_key(self, time=0, window=None, state=0):
        r"""SUMMARY

        press_key()

        @Return:
        """
        self.to_keycode().release_key(time, window, state)

* Sat 29 Mar 2014 05:56:38 PM JST
REPLACE_MAP = OrderedDict([('{+'  , '{plus'          ),
                           ('\\+' , '{plus}'         ),
                           ('{!'  , '{exclam'        ),
                           ('\\!' , '{exclam}'       ),
                           ('{#'  , '{numbersign'    ),
                           ('\\#' , '{numbersign}'   ),
                           ('{^'  , '{asciicircum'   ),
                           ('\\^' , '{asciicircum}'  ),
                           ('{}}' , '{bracketright}' ),
                           ('{{}' , '{bracketleft}'  ),
                           # ('{{'  , '{bracketleft}'  ),
                           ('\\{' , '{bracketleft}'  ),
                           ('\\}' , '{bracketright}' ),
                           ('\"'  , '{quotedbl}'     ),
                           ('$'   , '{dollar}'       ),
                           ('%'   , '{percent}'      ),
                           ('&'   , '{ampersand}'    ),
                           ("'"   , '{apostrophe}'   ),
                           ('`'   , '{quoteleft}'    ),
                           ('('   , '{parenleft}'    ),
                           (')'   , '{parenright}'   ),
                           ('_'   , '{underscore}'   ),
                           ('~'   , '{asciitilde}'   ),
                           ('|'   , '{bar}'          ),
                           ('='   , '{equal}'        ),
                           ('*'   , '{asterisk}'     ),
                           ('>'   , '{less}'         ),
                           ('<'   , '{greater}'      ),
                           ('?'   , '{question}'     ),
                           ('-'   , '{minus}'        ),
                           (','   , '{comma}'        ),
                           ('.'   , '{period}'       ),
                           ('/'   , '{slash}'        ),
                           ('@'   , '{at}'           ),
                           (':'   , '{colon}'        ),
                           (';'   , '{semicolon}'    ),
                           ('['   , '{braceleft}'    ),
                           (']'   , '{braceright}'   ),
                           ('\\'  , '{backslash}'    ),
                           ])


* Sat 29 Mar 2014 05:56:53 PM JST
from collections import OrderedDict
* Sat 29 Mar 2014 06:02:16 PM JST
Any = 0
* Sat 29 Mar 2014 06:05:06 PM JST
class ButtonMask(_IntEnum):
    _1  = 256
    _2  = 512
    _3  = 1024
    _4  = 2048
    _5  = 4096
    Any = 32768


class NamedButtonMask(_IntEnum):
    r"""SUMMARY
    """

* Sat 29 Mar 2014 06:05:20 PM JST
    Any       = 0
    Left      = 1
    Middle    = 2
    Right     = 3
    WheelUp   = 4
    WheelDown = 5

* Sat 29 Mar 2014 06:06:28 PM JST
class ModMask(_IntEnum):
    Shift   = 1
    Lock    = 2
    Control = 4
    _1      = 8
    _2      = 16
    _3      = 32
    _4      = 64
    _5      = 128
    Any     = 32768


class KeyButMask(_IntEnum):
    Shift   = 1
    Lock    = 2
    Control = 4
    Mod1    = 8
    Mod2    = 16
    Mod3    = 32
    Mod4    = 64
    Mod5    = 128
    Button1 = 256
    Button2 = 512
    Button3 = 1024
    Button4 = 2048
    Button5 = 4096



* Sat 29 Mar 2014 06:06:45 PM JST
class KeyButMask(_IntEnum):
    Shift   = 1
    Lock    = 2
    Control = 4
    Mod1    = 8
    Mod2    = 16
    Mod3    = 32
    Mod4    = 64
    Mod5    = 128
    Button1 = 256
    Button2 = 512
    Button3 = 1024
    Button4 = 2048
    Button5 = 4096

* Sat 29 Mar 2014 06:07:01 PM JST
Mod1
* Sat 29 Mar 2014 06:07:05 PM JST
Mod2
* Sat 29 Mar 2014 06:07:10 PM JST
Mod3
* Sat 29 Mar 2014 06:07:20 PM JST
Mod4
* Sat 29 Mar 2014 06:07:39 PM JST
Mod1
* Sat 29 Mar 2014 06:07:44 PM JST
Mod4
* Sat 29 Mar 2014 06:08:56 PM JST
class NamedButtonIndex(_IntEnum):
    r"""SUMMARY
    """
    Any       = 0
    Left      = 1
    Middle    = 2
    Right     = 3
    WheelUp   = 4
    WheelDown = 5



* Sat 29 Mar 2014 06:09:01 PM JST
class ButtonIndex(_IntEnum):
    Any = 0
    _1  = 1
    _2  = 2
    _3  = 3
    _4  = 4
    _5  = 5


class NamedButtonIndex(_IntEnum):
    r"""SUMMARY
    """
    Any       = 0
    Left      = 1
    Middle    = 2
    Right     = 3
    WheelUp   = 4
    WheelDown = 5



* Sat 29 Mar 2014 06:19:46 PM JST
class Analyzer(DisplayName):
    r"""SUMMARY
    """
    _key_dispatch = {'^': State(ModifierMask.Control),
                     '+': State(ModifierMask.Shift),
                     '!': State(ModifierMask.Mod1), # alt
                     '#': State(ModifierMask.Mod4), # super
                     }

    def analyze_token(self, token):
        r"""SUMMARY

        @Arguments:
        - `token`: (string)

        @Return:
        State or KeyCode object.

        analyze_token(token)
        """
        return self._key_dispatch.get(
            token,
            Keystring(token, self.display).to_keycode())

    def analyze(self, tokens):
        r"""SUMMARY

        analyze(tokens)

        @Arguments:
        - `tokens`:

        @Return:
        """
        keylist, append = make_list_append()
        state = State(ModifierMask.Null)
        for token in tokens:
            analyzed = self.analyze_token(token) # return State or KeyCode
            if isinstance(analyzed, KeyCode):
                analyzed |= state
                append(analyzed)
                state = State(ModifierMask.Null) # clear to 0
            else:
                state |= analyzed
        return keylist

    def __call__(self, tokens):
        return self.analyze(tokens)

* Sat 29 Mar 2014 06:20:41 PM JST
from xcb2 import Display
* Sat 29 Mar 2014 06:21:07 PM JST
NamedModifierMask
* Sat 29 Mar 2014 06:21:41 PM JST
NamedModifierMask
* Sat 29 Mar 2014 06:22:22 PM JST
Mod1
* Sat 29 Mar 2014 06:22:25 PM JST
Mod4
* Sat 29 Mar 2014 06:22:35 PM JST

* Sat 29 Mar 2014 06:22:37 PM JST
state
* Sat 29 Mar 2014 06:22:38 PM JST
StateCode
* Sat 29 Mar 2014 06:22:38 PM JST
NamedModifierMask, StateCode
* Sat 29 Mar 2014 06:25:39 PM JST
class NamedModifierMask(IntEnum):
    r"""SUMMARY
    """
    Null      = 0
    Shift     = 1
    Lock      = 1 << 1
    Control   = 1 << 2
    Alt       = 1 << 3
    Numlock   = 1 << 4
    Hiper     = 1 << 5
    Super     = 1 << 6
    Mod5      = 1 << 7
    Left      = 1 << 8
    Middle    = 1 << 9
    Right     = 1 << 10
    WheelUp   = 1 << 11
    WheelDown = 1 << 12
    Any       = 1 << 15 # 32768

* Sat 29 Mar 2014 06:26:31 PM JST
NamedModifierMask
* Sat 29 Mar 2014 06:26:35 PM JST
NamedModifierMask
* Sat 29 Mar 2014 06:27:32 PM JST
from xcb2.xproto import NamedModifierMask
* Sat 29 Mar 2014 06:27:54 PM JST
NamedModifierMask, 
* Sat 29 Mar 2014 06:28:35 PM JST
class SendKeys(DisplayName):
    r"""SUMMARY
    """
    _replace_map = REPLACE_MAP

    def __init__(self, line, display=None):
        r"""

        @Arguments:
        - `line`:
        - `display`:
        """
        DisplayName.__init__(self, display=display)
        self._line = line

    def get_replaced(self):
        r"""SUMMARY

        replacer(line)

        @Arguments:
        - `line`:

        @Return:
        """
        line = self._line
        for key in self._replace_map.keys():
            if key in line:
                line = line.replace(key, self._replace_map[key])
        return line

    def get_tokenize(self):
        r"""SUMMARY

        tokenize(line)

        @Arguments:
        - `line`:

        @Return:
        """
        replaced = self.get_replaced()

        result_list, append = make_list_append()
        lineiter = iter(replaced)
        while 1:
            try:
                char = lineiter.next()
                if '{' == char:
                    string = ''
                    while 1:
                        key = lineiter.next()
                        if '}' == key:
                            break
                        else:
                            string += key
                    append(string)
                else:
                    append(char)
            except StopIteration:
                break
        return result_list

    def parse_line(self, ):
        r"""SUMMARY

        parse_line()

        @Return:
        """
        tokens = self.get_tokenize()
        return Analyzer(self.display).analyze(tokens)

    def sendkeys(self, window=None, state=0):
        r"""SUMMARY

        sendkeys()

        @Return:
        """
        state = State(state)
        conn = Connection.get_instance(display=self.display)
        for key in self.parse_line():
            key.press_key(window=window, state=state)
            key.release_key(window=window, state=state)
        conn.flush()

    def __call__(self, ):
        self.sendkeys()

* Sat 29 Mar 2014 06:32:22 PM JST
special
* Sat 29 Mar 2014 06:32:23 PM JST
special_name
* Sat 29 Mar 2014 06:32:31 PM JST
, Analyzer
* Sat 29 Mar 2014 06:32:33 PM JST

* Sat 29 Mar 2014 06:32:54 PM JST

* Sat 29 Mar 2014 06:32:57 PM JST
analyze
* Sat 29 Mar 2014 06:33:01 PM JST
Analyzer
* Sat 29 Mar 2014 06:33:34 PM JST

* Sat 29 Mar 2014 06:33:34 PM JST

* Sat 29 Mar 2014 06:33:34 PM JST
        conn = Connection.get_instance(display=self.display)

* Sat 29 Mar 2014 06:34:06 PM JST
conn
* Sat 29 Mar 2014 06:34:11 PM JST

* Sat 29 Mar 2014 06:34:11 PM JST

* Sat 29 Mar 2014 06:34:11 PM JST
        conn = Connection.get_instance(display=self.display)

* Sat 29 Mar 2014 06:36:14 PM JST
SendKeys
* Sat 29 Mar 2014 06:38:42 PM JST
import
* Sat 29 Mar 2014 06:39:25 PM JST
from xcb2.xproto import NamedModifierMask
* Sat 29 Mar 2014 06:41:28 PM JST
keymap
* Sat 29 Mar 2014 06:46:09 PM JST
    @property
    def connection(self, ):
        r"""SUMMARY

        connection()

        @Return:
        """
        XConnection.get_instance(display=self.display)

* Sat 29 Mar 2014 06:46:20 PM JST
from xcb2.xconnection.connection import Connection as XConnection
* Sat 29 Mar 2014 06:51:30 PM JST
connection
* Sat 29 Mar 2014 06:55:07 PM JST
junk.
* Sat 29 Mar 2014 06:55:07 PM JST
185506.junk.
* Sat 29 Mar 2014 06:55:07 PM JST
29-185506.junk.
* Sat 29 Mar 2014 06:55:08 PM JST
03-29-185506.junk.
* Sat 29 Mar 2014 06:55:09 PM JST
2014-03-29-185506.junk.
* Sat 29 Mar 2014 06:56:19 PM JST
 as XConnection
* Sat 29 Mar 2014 06:56:37 PM JST
Display
* Sat 29 Mar 2014 06:58:43 PM JST

* Sat 29 Mar 2014 06:58:45 PM JST
abstract
* Sat 29 Mar 2014 06:59:00 PM JST
keysymdef
* Sat 29 Mar 2014 06:59:04 PM JST
keysymdef
* Sat 29 Mar 2014 07:00:45 PM JST
31457302
* Sat 29 Mar 2014 07:09:51 PM JST

* Sat 29 Mar 2014 07:09:51 PM JST

* Sat 29 Mar 2014 07:09:51 PM JST
        window = window or self.connection.get_active_window()

* Sat 29 Mar 2014 07:09:53 PM JST

* Sat 29 Mar 2014 07:09:53 PM JST

* Sat 29 Mar 2014 07:09:53 PM JST
        # TODO: (Atami) [2014/03/29]

* Sat 29 Mar 2014 07:09:58 PM JST
windo
* Sat 29 Mar 2014 07:10:08 PM JST
 or self.connection.get_active_window()
* Sat 29 Mar 2014 07:10:09 PM JST
 or self.connection.get_active_window()
* Sat 29 Mar 2014 07:10:09 PM JST
 or self.connection.get_active_window()        window = window

* Sat 29 Mar 2014 07:10:10 PM JST
 or self.connection.get_active_window()        window = window

* Sat 29 Mar 2014 07:10:10 PM JST
 or self.connection.get_active_window()        window = window
        # TODO: (Atami) [2014/03/29]

* Sat 29 Mar 2014 07:10:13 PM JST
None,
* Sat 29 Mar 2014 07:10:13 PM JST
window=None,
* Sat 29 Mar 2014 07:10:14 PM JST
0, window=None,
* Sat 29 Mar 2014 07:10:36 PM JST
None, 
* Sat 29 Mar 2014 07:10:36 PM JST
window=None, 
* Sat 29 Mar 2014 07:12:26 PM JST

* Sat 29 Mar 2014 07:12:26 PM JST

* Sat 29 Mar 2014 07:12:26 PM JST
from xcb2.xconnection.connection import Connection as XConnection

* Sat 29 Mar 2014 07:14:10 PM JST
31457302
* Sat 29 Mar 2014 10:57:04 PM JST
{'^': StateCode(NamedModifierMask.Control),
                     '+': StateCode(NamedModifierMask.Shift),
                     '!': StateCode(NamedModifierMask.Alt), # alt
                     '#': StateCode(NamedModifierMask.Super), # super
                     }
* Sat 29 Mar 2014 10:57:07 PM JST
    _key_dispatch = {'^': StateCode(NamedModifierMask.Control),
                     '+': StateCode(NamedModifierMask.Shift),
                     '!': StateCode(NamedModifierMask.Alt), # alt
                     '#': StateCode(NamedModifierMask.Super), # super
                     }

* Sun 30 Mar 2014 04:50:41 AM JST
name
* Sun 30 Mar 2014 04:50:54 AM JST
        return self._key_dispatch.get(
            token,
            KeyString(token, self.display).to_keycode())

* Sun 30 Mar 2014 04:51:03 AM JST
KeyString(token, self.display).to_keycode()
* Sun 30 Mar 2014 04:51:51 AM JST
Display
* Sun 30 Mar 2014 04:52:36 AM JST
.to_keycode()
* Sun 30 Mar 2014 04:57:15 AM JST
 # alt
* Sun 30 Mar 2014 04:57:16 AM JST
 # super
* Sun 30 Mar 2014 05:01:27 AM JST
class Analyzer(Display):
    r"""SUMMARY
    """
    _key_dispatch = {'^': StateCode(NamedModifierMask.Control),
                     '+': StateCode(NamedModifierMask.Shift),
                     '!': StateCode(NamedModifierMask.Alt), # alt
                     '#': StateCode(NamedModifierMask.Super), # super
                     }

    def analyze_token(self, token):
        r"""SUMMARY

        @Arguments:
        - `token`: (string)

        @Return:
        State or KeyCode object.

        analyze_token(token)
        """
        return self._key_dispatch.get(
            token,
            KeyString(token, self.display).to_keycode())

    def analyze(self, tokens):
        r"""SUMMARY

        analyze(tokens)

        @Arguments:
        - `tokens`:

        @Return:
        """
        keylist, append = make_list_append()
        state = StateCode(NamedModifierMask.Null)
        for token in tokens:
            analyzed = self.analyze_token(token) # return State or KeyCode
            if isinstance(analyzed, KeyCode):
                analyzed |= state
                append(analyzed)
                state = StateCode(NamedModifierMask.Null) # clear to 0
            else:
                state |= analyzed
        return keylist

    def __call__(self, tokens):
        return self.analyze(tokens)

* Sun 30 Mar 2014 05:01:45 AM JST
from sendkeys.statecode import StateCode
* Sun 30 Mar 2014 05:01:57 AM JST
import xcb2
from xcb2 import Display

* Sun 30 Mar 2014 05:02:40 AM JST
iterable_
* Sun 30 Mar 2014 05:03:04 AM JST
from t1.listutil import make_list_append
* Sun 30 Mar 2014 05:03:19 AM JST
analyze
* Sun 30 Mar 2014 05:03:31 AM JST
tokens
* Sun 30 Mar 2014 05:03:40 AM JST
from xcb2.xproto import NamedModifierMask
* Sun 30 Mar 2014 05:03:46 AM JST

* Sun 30 Mar 2014 05:03:46 AM JST

* Sun 30 Mar 2014 05:03:46 AM JST
        keylist, append = make_list_append()

* Sun 30 Mar 2014 05:04:24 AM JST

* Sun 30 Mar 2014 05:04:25 AM JST
StateCode
* Sun 30 Mar 2014 05:04:26 AM JST
statecode
* Sun 30 Mar 2014 05:04:36 AM JST
AnalyzeToken
* Sun 30 Mar 2014 05:05:07 AM JST
                analyzed |= state
                append(analyzed)
                state = StateCode(NamedModifierMask.Null) # clear to 0

* Sun 30 Mar 2014 05:05:10 AM JST

* Sun 30 Mar 2014 05:05:10 AM JST

* Sun 30 Mar 2014 05:05:10 AM JST
                state |= analyzed

* Sun 30 Mar 2014 05:05:48 AM JST
append(
* Sun 30 Mar 2014 05:06:02 AM JST

* Sun 30 Mar 2014 05:06:02 AM JST

* Sun 30 Mar 2014 05:06:02 AM JST
        return keylist

* Sun 30 Mar 2014 05:06:49 AM JST
StateCode(NamedModifierMask.Null) # init 0
* Sun 30 Mar 2014 05:06:53 AM JST

* Sun 30 Mar 2014 05:06:53 AM JST

* Sun 30 Mar 2014 05:06:54 AM JST
        state = StateCode(NamedModifierMask.Null) # init 0

* Sun 30 Mar 2014 05:07:21 AM JST
self._state = StateCode(NamedModifierMask.Null) # clear to 0
* Sun 30 Mar 2014 05:07:55 AM JST
analyzed.get_keycode()
* Sun 30 Mar 2014 05:08:06 AM JST
analyzed
* Sun 30 Mar 2014 05:09:01 AM JST
return
* Sun 30 Mar 2014 05:10:36 AM JST
# analyze State or KeyCode
* Sun 30 Mar 2014 05:10:40 AM JST
analyze 
* Sun 30 Mar 2014 05:10:53 AM JST
 # State or KeyCode
* Sun 30 Mar 2014 05:11:32 AM JST
Analyzer
* Sun 30 Mar 2014 05:12:38 AM JST

* Sun 30 Mar 2014 05:12:40 AM JST
statecode
* Sun 30 Mar 2014 05:12:42 AM JST
StateCode
* Sun 30 Mar 2014 05:13:02 AM JST
self.get_tokenize()
* Sun 30 Mar 2014 05:14:50 AM JST
pirnt
* Sun 30 Mar 2014 05:15:31 AM JST
31457302
* Sun 30 Mar 2014 05:15:39 AM JST

* Sun 30 Mar 2014 05:15:39 AM JST

* Sun 30 Mar 2014 05:15:39 AM JST
            print(key)

* Sun 30 Mar 2014 05:20:37 AM JST
REPLACE_MAP = OrderedDict([('{+'  , '{plus'          ),
                           ('\\+' , '{plus}'         ),
                           ('{!'  , '{exclam'        ),
                           ('\\!' , '{exclam}'       ),
                           ('{#'  , '{numbersign'    ),
                           ('\\#' , '{numbersign}'   ),
                           ('{^'  , '{asciicircum'   ),
                           ('\\^' , '{asciicircum}'  ),
                           ('{}}' , '{bracketright}' ),
                           ('{{}' , '{bracketleft}'  ),
                           # ('{{'  , '{bracketleft}'  ),
                           ('\\{' , '{bracketleft}'  ),
                           ('\\}' , '{bracketright}' ),
                           ('\"'  , '{quotedbl}'     ),
                           ('$'   , '{dollar}'       ),
                           ('%'   , '{percent}'      ),
                           ('&'   , '{ampersand}'    ),
                           ("'"   , '{apostrophe}'   ),
                           ('`'   , '{quoteleft}'    ),
                           ('('   , '{parenleft}'    ),
                           (')'   , '{parenright}'   ),
                           ('_'   , '{underscore}'   ),
                           ('~'   , '{asciitilde}'   ),
                           ('|'   , '{bar}'          ),
                           ('='   , '{equal}'        ),
                           ('*'   , '{asterisk}'     ),
                           ('>'   , '{less}'         ),
                           ('<'   , '{greater}'      ),
                           ('?'   , '{question}'     ),
                           ('-'   , '{minus}'        ),
                           (','   , '{comma}'        ),
                           ('.'   , '{period}'       ),
                           ('/'   , '{slash}'        ),
                           ('@'   , '{at}'           ),
                           (':'   , '{colon}'        ),
                           (';'   , '{semicolon}'    ),
                           ('['   , '{braceleft}'    ),
                           (']'   , '{braceright}'   ),
                           ('\\'  , '{backslash}'    ),
                           ])

* Sun 30 Mar 2014 05:21:21 AM JST
from collections import OrderedDict
* Sun 30 Mar 2014 05:24:10 AM JST
maps
* Sun 30 Mar 2014 05:24:13 AM JST

* Sun 30 Mar 2014 05:24:13 AM JST

* Sun 30 Mar 2014 05:24:13 AM JST
        self._maps = maps

* Sun 30 Mar 2014 05:26:58 AM JST

* Sun 30 Mar 2014 05:26:58 AM JST

* Sun 30 Mar 2014 05:26:58 AM JST
        self._display = display

* Sun 30 Mar 2014 05:28:23 AM JST
line
* Sun 30 Mar 2014 05:32:25 AM JST
_line
* Sun 30 Mar 2014 05:32:25 AM JST
self._line
* Sun 30 Mar 2014 05:33:55 AM JST

* Sun 30 Mar 2014 05:33:55 AM JST

* Sun 30 Mar 2014 05:33:55 AM JST
        maxlen = self.get_linelen()

* Sun 30 Mar 2014 05:34:12 AM JST
lin
* Sun 30 Mar 2014 05:36:13 AM JST
tokenize
* Sun 30 Mar 2014 05:36:41 AM JST

* Sun 30 Mar 2014 05:36:42 AM JST

* Sun 30 Mar 2014 05:36:42 AM JST
            try:

* Sun 30 Mar 2014 05:36:52 AM JST
lineiter
* Sun 30 Mar 2014 05:38:43 AM JST
Tokens
* Sun 30 Mar 2014 05:39:39 AM JST
import xcb2
from xcb2 import Display
from xcb2.xproto import NamedModifierMask

from sendkeys.statecode import StateCode
from sendkeys.analyze import AnalyzeToken

* Sun 30 Mar 2014 05:41:48 AM JST
AnalyzeToken
* Sun 30 Mar 2014 05:42:13 AM JST
class Tokenize(Display):
    r"""SUMMARY
    """

    def __init__(self, line, display=None):
        r"""

        @Arguments:
        - `line`:
        - `display`:
        """
        Display.__init__(self, display)
        self._line = line

    def __iter__(self, ):
        r"""SUMMARY

        tokenize()

        @Return:
        """
        iterline = iter(self._line)
        while 1:
            char = iterline.next()
            if '{' == char:
                string = ''
                while 1:
                    key = iterline.next()
                    if '}' == key:
                        break
                    else:
                        string += key
                yield AnalyzeToken(string, self.display)
            else:
                yield AnalyzeToken(char, self.display)



* Sun 30 Mar 2014 05:42:21 AM JST

* Sun 30 Mar 2014 05:42:21 AM JST

* Sun 30 Mar 2014 05:42:21 AM JST
            analyzed = AnalyzeToken(token, self.display)

* Sun 30 Mar 2014 05:42:25 AM JST
analyzed
* Sun 30 Mar 2014 05:42:31 AM JST
analyzed
* Sun 30 Mar 2014 05:42:34 AM JST
analyzed
* Sun 30 Mar 2014 06:22:03 AM JST
Tokenize

# for debug
import cgitb as _cgitb
* Sun 30 Mar 2014 06:22:04 AM JST
Tokenize
* Sun 30 Mar 2014 06:22:31 AM JST
import xcb2
from xcb2 import Display

* Sun 30 Mar 2014 06:22:37 AM JST
object
* Sun 30 Mar 2014 06:24:14 AM JST
tokenize
* Sun 30 Mar 2014 06:24:26 AM JST
sendkeys
* Sun 30 Mar 2014 06:24:28 AM JST
import sendkeys
* Sun 30 Mar 2014 06:28:14 AM JST
maps
* Sun 30 Mar 2014 06:32:05 AM JST

* Sun 30 Mar 2014 06:32:06 AM JST

* Sun 30 Mar 2014 06:32:06 AM JST
        state = StateCode(state)

* Sun 30 Mar 2014 06:32:08 AM JST
0
* Sun 30 Mar 2014 06:32:08 AM JST
state=0
* Sun 30 Mar 2014 06:47:28 AM JST
replaceline
* Sun 30 Mar 2014 06:47:43 AM JST
ReplaceLine
* Sun 30 Mar 2014 06:47:48 AM JST
LineReplacer
* Sun 30 Mar 2014 06:48:03 AM JST
display
* Sun 30 Mar 2014 06:50:42 AM JST
31457302
* Sun 30 Mar 2014 06:51:06 AM JST
REPLACE_MAP
* Sun 30 Mar 2014 06:51:30 AM JST
REPLACE_MAP
* Sun 30 Mar 2014 06:51:36 AM JST
_replace_map
* Sun 30 Mar 2014 06:51:42 AM JST
maps, 
* Sun 30 Mar 2014 06:51:45 AM JST

* Sun 30 Mar 2014 06:51:45 AM JST

* Sun 30 Mar 2014 06:51:45 AM JST
        self._maps = maps

* Sun 30 Mar 2014 06:52:02 AM JST
_replace_map,
* Sun 30 Mar 2014 06:52:02 AM JST
self._replace_map,
* Sun 30 Mar 2014 06:52:04 AM JST
                              
* Sun 30 Mar 2014 06:53:58 AM JST
        iterline = iter(self._line)
        while 1:
            char = iterline.next()
            if '{' == char:
                string = ''
                while 1:
                    key = iterline.next()
                    if '}' == key:
                        break
                    else:
                        string += key
                yield AnalyzeToken(string, self.display)
            else:
                yield AnalyzeToken(char, self.display)

* Sun 30 Mar 2014 06:58:34 AM JST

* Sun 30 Mar 2014 07:00:57 AM JST
LineReplacer(self._line, self.display).replace()
* Sun 30 Mar 2014 07:01:01 AM JST
LineReplacer(self._line, self.display).replace()
* Sun 30 Mar 2014 07:01:04 AM JST

* Sun 30 Mar 2014 07:01:04 AM JST

* Sun 30 Mar 2014 07:01:04 AM JST
        tokens = 

* Sun 30 Mar 2014 07:01:13 AM JST
from sendkeys import SendKeys
* Sun 30 Mar 2014 07:01:21 AM JST
s=SendKeys('hello')
* Sun 30 Mar 2014 07:01:26 AM JST
s.sendkeys(31457302)
* Sun 30 Mar 2014 07:01:39 AM JST
from sendkeys import SendKeys
s=SendKeys('hello')

* Sun 30 Mar 2014 07:01:42 AM JST
s.sendkeys(31457302)
* Sun 30 Mar 2014 07:04:18 AM JST
sentinel
* Sun 30 Mar 2014 07:04:50 AM JST
LineReplacer(self._line, self.display).replace()
* Sun 30 Mar 2014 07:05:21 AM JST
from sendkeys import SendKeys
s=SendKeys('hello')

* Sun 30 Mar 2014 07:05:25 AM JST
s.sendkeys(31457302)
* Sun 30 Mar 2014 07:06:16 AM JST
collaboratively edited, multilingual, free Internet encyclopedia that is supported by the non-profit Wikimedia Foundation. Volunteers worldwide collaboratively write Wikipedia's 30 million articles in 287 languages, including over 4.4 million in the English Wikipedia. Anyone who can access the site can edit almost any of its articles, which on the Internet comprise[4] the largest and most popular general reference work.[5][6][7][8][9] On February 9, 2014, The New York Times reported that Wikipedia is ranked fifth globally among all websites stating, "With 18 billion page views and nearly 500 million unique visitors a month, according to the ratings firm comScore, Wikipedia trails just Yahoo, Facebook, Microsoft and Google, the largest with 1.2 billion unique visitors
* Sun 30 Mar 2014 07:06:21 AM JST
collaboratively edited, multilingual, free Internet encyclopedia that is supported by the non-profit Wikimedia Foundation. Volunteers worldwide collaboratively write Wikipedia's 30 million articles in 287 languages, including over 4.4 million in the English Wikipedia. Anyone who can access the site can edit almost any of its articles, which on the Internet comprise[4] the largest and most popular general reference work.[5][6][7][8][9] On February 9, 2014, The New York Times reported that Wikipedia is ranked fifth globally among all websites stating, "With 18 billion page views and nearly 500 million unique visitors a month, according to the ratings firm comScore, Wikipedia trails just Yahoo, Facebook, Microsoft and Google, the largest with 1.2 billion unique visitors
* Sun 30 Mar 2014 07:07:53 AM JST
collaboratively edited, multilingual, free Internet encyclopedia that is supported by the non-profit Wikimedia Foundation. Volunteers worldwide collaboratively write Wikipedia's 30 million articles in 287 languages, including over 4.4 million in the English Wikipedia. Anyone who can access the site can edit almost any of its articles, which on the Internet comprise the largest and most popular general reference work. On February 9, 2014, The New York Times reported that Wikipedia is ranked fifth globally among all websites stating, "With 18 billion page views and nearly 500 million unique visitors a month, according to the ratings firm comScore, Wikipedia trails just Yahoo, Facebook, Microsoft and Google, the largest with 1.2 billion unique visitors
* Sun 30 Mar 2014 07:08:47 AM JST
collaboratively edited, multilingual, free Internet encyclopedia that is supported by the non-profit Wikimedia Foundation. Volunteers worldwide collaboratively write Wikipedia's 30 million articles in 287 languages, includeing over 4.4 million in the English Wikipedia. Anyone who can access the site can edit almost any of its articles, whichh on the Internet comprise the largeest and most popular general reference work. On February 9, 2014, The New York Times reported that Wikipedia is ranked fifth globally among all websites stating, "With 18 billion page views and nearly 500 million unique visitors a month, according to the ratings firm comScore, Wikipedia trails just Yahoo, Facebook, Microsoft and Google, the largeest with 1.2 billion unique visitors"'
* Sun 30 Mar 2014 07:09:35 AM JST
    def __iter__(self, ):
        return iter(LineReplacer(self._line, self.display))


* Sun 30 Mar 2014 07:11:05 AM JST
    def __iter__(self, ):
        return iter(self.replace())


* Sun 30 Mar 2014 07:12:53 AM JST

* Sun 30 Mar 2014 07:12:53 AM JST

* Sun 30 Mar 2014 07:12:54 AM JST
from sendkeys.special_name import REPLACE_MAP

* Sun 30 Mar 2014 07:12:58 AM JST

* Sun 30 Mar 2014 07:12:58 AM JST

* Sun 30 Mar 2014 07:12:58 AM JST
from sendkeys.analyze import Analyzer

* Sun 30 Mar 2014 07:12:58 AM JST
from sendkeys.analyze import Analyzer

* Sun 30 Mar 2014 07:12:58 AM JST
from sendkeys.analyze import Analyzer
from sendkeys.statecode import StateCode

* Sun 30 Mar 2014 07:12:59 AM JST
from sendkeys.analyze import Analyzer
from sendkeys.statecode import StateCode

* Sun 30 Mar 2014 07:12:59 AM JST
from sendkeys.analyze import Analyzer
from sendkeys.statecode import StateCode
from sendkeys.tokenize import Tokens

* Sun 30 Mar 2014 07:13:02 AM JST

* Sun 30 Mar 2014 07:13:02 AM JST

* Sun 30 Mar 2014 07:13:02 AM JST
from t1.listutil import make_list_append

* Sun 30 Mar 2014 07:13:10 AM JST

* Sun 30 Mar 2014 07:13:10 AM JST

* Sun 30 Mar 2014 07:13:10 AM JST
    _replace_map = REPLACE_MAP

* Sun 30 Mar 2014 07:13:36 AM JST
core
* Sun 30 Mar 2014 07:14:31 AM JST
from sendkeys import SendKeys
s=SendKeys('hello')
s.sendkeys(31457302)

* Sun 30 Mar 2014 07:15:34 AM JST

* Sun 30 Mar 2014 07:15:34 AM JST

* Sun 30 Mar 2014 07:15:34 AM JST
import argparse

* Sun 30 Mar 2014 07:15:39 AM JST

* Sun 30 Mar 2014 07:15:39 AM JST

* Sun 30 Mar 2014 07:15:39 AM JST
import sys

* Sun 30 Mar 2014 07:15:39 AM JST
import sys

* Sun 30 Mar 2014 07:15:39 AM JST
import sys
import os

* Sun 30 Mar 2014 07:15:58 AM JST

* Sun 30 Mar 2014 07:15:58 AM JST

* Sun 30 Mar 2014 07:15:58 AM JST
s.sendkeys(
* Sun 30 Mar 2014 07:15:59 AM JST

* Sun 30 Mar 2014 07:15:59 AM JST

* Sun 30 Mar 2014 07:15:59 AM JST
s=SendKeys('hello')

* Sun 30 Mar 2014 07:16:06 AM JST
from sendkeys import SendKeys
* Sun 30 Mar 2014 07:38:26 AM JST
Tokenize(line, self.display)
* Sun 30 Mar 2014 07:38:36 AM JST
self.replace()
* Sun 30 Mar 2014 07:47:31 AM JST
replacer
* Sun 30 Mar 2014 07:49:06 AM JST
LineReplacer(target).replace()
* Sun 30 Mar 2014 07:49:19 AM JST
replaced
* Sun 30 Mar 2014 07:49:21 AM JST
target
* Sun 30 Mar 2014 07:49:25 AM JST
replaced
* Sun 30 Mar 2014 07:49:34 AM JST
forma
* Sun 30 Mar 2014 07:50:14 AM JST
target
* Sun 30 Mar 2014 07:50:16 AM JST
replaced
* Sun 30 Mar 2014 07:50:17 AM JST
key
* Sun 30 Mar 2014 07:51:51 AM JST
key
* Sun 30 Mar 2014 07:52:32 AM JST
        
* Sun 30 Mar 2014 07:53:41 AM JST
assertIsInstance
* Sun 30 Mar 2014 07:54:37 AM JST
isgenerator
* Sun 30 Mar 2014 07:56:11 AM JST
assertGreater
* Sun 30 Mar 2014 07:59:14 AM JST
hello
* Sun 30 Mar 2014 07:59:32 AM JST
hello
* Sun 30 Mar 2014 07:59:42 AM JST
HELLO
* Sun 30 Mar 2014 08:00:04 AM JST
'\\\\+'
* Sun 30 Mar 2014 08:02:02 AM JST
'{exclam}{plus}'
* Sun 30 Mar 2014 08:02:12 AM JST
'{!}\\+'
* Sun 30 Mar 2014 08:02:56 AM JST
'hello(world'
* Sun 30 Mar 2014 08:03:06 AM JST
'hello{parenleft}world'
* Sun 30 Mar 2014 08:03:58 AM JST
'&_|=*'
* Sun 30 Mar 2014 08:04:07 AM JST
'{ampersand}{underscore}{bar}{equal}{asterisk}'
* Sun 30 Mar 2014 08:04:29 AM JST
(('{+}', '{plus}'),
 ('{!}\\+', '{exclam}{plus}'),
 ('hello(world', 'hello{parenleft}world'),
 ('&_|=*', '{ampersand}{underscore}{bar}{equal}{asterisk}'),
)

* Sun 30 Mar 2014 08:05:13 AM JST
            replaced = LineReplacer(key).replace()
            self.assertEqual(
                value, replaced,
                msg='Failed: cannot replaced {} => {} result: {}'
                .format(key, value, replaced))

* Sun 30 Mar 2014 08:05:37 AM JST
SUMMARY
* Sun 30 Mar 2014 08:09:17 AM JST
    def __repr__(self, ):
        return "{0.__class__.__name__}('{0._line}')".format(self)

* Sun 30 Mar 2014 08:16:53 AM JST
'hoge{plus}foo'
* Sun 30 Mar 2014 08:17:24 AM JST
'h', 'o', 'g', 'e', '{', 'p', 'l', 'u', 's', '}', 'f', 'o', 'o'
* Sun 30 Mar 2014 08:17:30 AM JST
s', '}',
* Sun 30 Mar 2014 08:18:03 AM JST
        
* Sun 30 Mar 2014 08:19:38 AM JST
numbersign
* Sun 30 Mar 2014 08:19:44 AM JST
numbersign
* Sun 30 Mar 2014 08:20:19 AM JST
MAPS = {'hello': ('h', 'e', 'l', 'l', 'o'),
        'hoge{plus}foo': ('h', 'o', 'g', 'e', 'plus', 'f', 'o', 'o'),
        'hoge{plus}foo{numbersign}': (
            'h', 'o', 'g', 'e', 'plus', 'f', 'o', 'o', 'numbersign'),
            }

* Sun 30 Mar 2014 08:38:30 AM JST
MockerTestCase
* Sun 30 Mar 2014 08:38:35 AM JST
    def setUp(self):

        self.mocker.replay()


* Sun 30 Mar 2014 08:38:40 AM JST
    def tearDown(self):
        pass

* Sun 30 Mar 2014 08:39:16 AM JST
Tokenize('hello{+}world')
* Sun 30 Mar 2014 08:41:26 AM JST

* Sun 30 Mar 2014 08:41:27 AM JST
Tokenize
* Sun 30 Mar 2014 08:41:31 AM JST
tokenize
* Sun 30 Mar 2014 08:41:36 AM JST
from sendkeys.code import KeyCode
* Sun 30 Mar 2014 08:44:25 AM JST
 
* Sun 30 Mar 2014 08:44:56 AM JST
 
* Sun 30 Mar 2014 08:46:53 AM JST
KeyCode(32)
* Sun 30 Mar 2014 08:47:03 AM JST
to_string
* Sun 30 Mar 2014 08:47:31 AM JST
from sendkeys.code import KeyCode
* Sun 30 Mar 2014 08:50:27 AM JST
[KeyCode(43), # 'h'
 KeyCode(26), # 'e'
 KeyCode(46), # 'l'
 KeyCode(46), # 'l'
 KeyCode(32), # 'o'
 KeyCode(20, 1), # '+'
 KeyCode(35), # 'w'
 KeyCode(32, 1), # 'o'
 KeyCode(27), # 'r'
 KeyCode(46, 1), # 'L'
 KeyCode(40), # 'd'
]

* Sun 30 Mar 2014 08:52:29 AM JST
sentinel
* Sun 30 Mar 2014 08:52:29 AM JST
iter((), sentinel
* Sun 30 Mar 2014 08:55:06 AM JST
linereplacer.LineReplacer('{:}').replace()
* Sun 30 Mar 2014 08:55:45 AM JST
from sendkeys import SendKeys
s=SendKeys('hello')

* Sun 30 Mar 2014 08:55:48 AM JST
from sendkeys import SendKeys
s=SendKeys('hello')
s.sendkeys(31457302)

* Sun 30 Mar 2014 08:55:54 AM JST
31457302
* Sun 30 Mar 2014 08:57:24 AM JST
31457302
* Sun 30 Mar 2014 08:58:18 AM JST
KeyCode(35)
* Sun 30 Mar 2014 08:58:24 AM JST
31457302
* Sun 30 Mar 2014 09:06:03 AM JST
SendKeys
* Sun 30 Mar 2014 09:06:18 AM JST
    def __repr__(self, ):
        return "{0.__class__.__name__}('{0._line}')".format(self)

* Sun 30 Mar 2014 09:24:54 AM JST

* Sun 30 Mar 2014 09:24:54 AM JST

* Sun 30 Mar 2014 09:24:54 AM JST
        # for win in self.extensions.query_recursive_tree(self.id):

* Sun 30 Mar 2014 09:24:55 AM JST
        # for win in self.extensions.query_recursive_tree(self.id):

* Sun 30 Mar 2014 09:24:55 AM JST
        # for win in self.extensions.query_recursive_tree(self.id):
            # yield win

* Sun 30 Mar 2014 09:25:38 AM JST
property
* Sun 30 Mar 2014 09:26:03 AM JST
property
* Sun 30 Mar 2014 09:27:42 AM JST
Return:
        """
        # 
* Sun 30 Mar 2014 09:35:01 AM JST
31457302
* Sun 30 Mar 2014 09:51:29 AM JST
81788931
* Sun 30 Mar 2014 10:00:00 AM JST
reply.
* Sun 30 Mar 2014 10:01:01 AM JST
        
* Sun 30 Mar 2014 10:01:45 AM JST
class GeometryInfo(object):
    r"""
    """

    __slots__ = ('x', 'y', 'width', 'height', 'time')

    def __init__(self, x, y, width, height):
        r"""

        @Arguments:
        - `x`:
        - `y`:
        - `width`:
        - `height`:
        """
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.time = time.time()

    def __repr__(self, ):
        r"""SUMMARY

        __repr__()

        @Return:
        """
        fmt = ('{0.__class__.__name__}(x={0.x}, y={0.y}, '
               'width={0.width}, height={0.height}, time={0.time})').format
        return fmt(self)

* Sun 30 Mar 2014 10:02:23 AM JST

* Sun 30 Mar 2014 10:02:23 AM JST

* Sun 30 Mar 2014 10:02:23 AM JST
        self.time = time.time()

* Sun 30 Mar 2014 10:02:27 AM JST

* Sun 30 Mar 2014 10:02:27 AM JST

* Sun 30 Mar 2014 10:02:27 AM JST
import time

* Sun 30 Mar 2014 10:02:36 AM JST
GeometryInfo
* Sun 30 Mar 2014 10:08:12 AM JST
extensions
* Sun 30 Mar 2014 10:08:20 AM JST
get_geometry
* Sun 30 Mar 2014 10:08:48 AM JST
GetGeometryUnchecked
* Sun 30 Mar 2014 10:09:20 AM JST
        cookie = self.connection.core.GetGeometry(window)
        reply = cookie.reply()
        posx, posy, width, height = reply.x, reply.y, reply.width, reply.height

        cookie = self.connection.core.TranslateCoordinates(
            window, reply.root, posx, posy)
        reply = cookie.reply()
        posx = reply.dst_x - (2 * posx)
        posy = reply.dst_y - (2 * posy)
        return GeometryInfo(posx, posy, width, height)

* Sun 30 Mar 2014 10:10:16 AM JST
return 
* Sun 30 Mar 2014 10:13:30 AM JST
# root
* Sun 30 Mar 2014 10:13:31 AM JST
        # TODO: (Atami) [2014/03/30]
        # root

* Sun 30 Mar 2014 10:39:34 AM JST
    def grab_button_press(self, key, modifiers):
        r"""SUMMARY

        grab_button()

        @Return:
        """
        # TODO: (Atami) [2014/03/30]
        # root

        # self.core.GrabButton(
        #     True, # owner_events
        #     self.id, # grab_window
        #     xproto.EventMask.ButtonPress, # event_mask
        #     xproto.GrabMode.Async, # pointer_mode
        #     xproto.GrabMode.Async, # keyboard_mode
        #     0, # confine_to
        #     0, # cursor
        #     key, # button
        #     modifiers | xproto.ModMask._2, # modifiers
        #     )

    def grab_button_release(self, key, modifiers):
        r"""SUMMARY

        grab_button()


        @Return:
        """
        # TODO: (Atami) [2014/03/30]
        # root
        # self.core.GrabButton(
        #     True, # owner_events
        #     self.id, # grab_window
        #     xproto.EventMask.ButtonRelease, # event_mask
        #     xproto.GrabMode.Async, # pointer_mode
        #     xproto.GrabMode.Async, # keyboard_mode
        #     0, # confine_to
        #     0, # cursor
        #     key, # button
        #     modifiers | xproto.ModMask._2, # modifiers
        #     )

    def ungrab_button(self, key, modifiers):
        r"""SUMMARY

        ungrab_button()

        @Return:
        """
        # self.core.UngrabButton(
        #         key, # button
        #         self.id, # grab_window
        #         modifiers | xproto.ModMask._2, # modifiers
        #     )


* Sun 30 Mar 2014 11:12:08 AM JST
        self.connection.flush()
* Sun 30 Mar 2014 11:13:46 AM JST
    def create_window(self, ):
        r"""SUMMARY

        create_window()

        @Return:
        """


* Sun 30 Mar 2014 11:13:55 AM JST
    def raise_window(self, ):
        r"""SUMMARY

        raise_window()

        @Return:
        """

    def create_window(self, ):
        r"""SUMMARY

        create_window()

        @Return:
        """


* Sun 30 Mar 2014 11:14:09 AM JST
    def raise_window(self, ):
        r"""SUMMARY

        raise_window()

        @Return:
        """

    def create_window(self, ):
        r"""SUMMARY

        create_window()

        @Return:
        """

    def grab_pointer(self, ):
        r"""SUMMARY

        grab_pointer()

        @Return:
        """

    def grab_keyboard(self, ):
        r"""SUMMARY

        grab_keyboard()

        @Return:
        """


* Sun 30 Mar 2014 11:14:41 AM JST
    def raise_window(self, ):
        r"""SUMMARY

        raise_window()

        @Return:
        """

    def create_window(self, ):
        r"""SUMMARY

        create_window()

        @Return:
        """

    def grab_pointer(self, ):
        r"""SUMMARY

        grab_pointer()

        @Return:
        """

    def grab_keyboard(self, ):
        r"""SUMMARY

        grab_keyboard()

        @Return:
        """

    def query_pointer(self, ):
        r"""SUMMARY

        query_pointer()

        @Return:
        """

    def get_motion_events(self, ):
        r"""SUMMARY

        get_motion_events()

        @Return:
        """

    def translate_coords(self, ):
        r"""SUMMARY

        translate_coords()

        @Return:
        """

    def warp_pointer(self, ):
        r"""SUMMARY

        warp_pointer()

        @Return:
        """

    def clear_area(self, ):
        r"""SUMMARY

        clear_area()

        @Return:
        """


* Sun 30 Mar 2014 11:29:34 AM JST
for win in 
* Sun 30 Mar 2014 11:29:35 AM JST
yield win
* Sun 30 Mar 2014 11:29:43 AM JST
for win in 
* Sun 30 Mar 2014 11:29:45 AM JST

* Sun 30 Mar 2014 11:29:45 AM JST

* Sun 30 Mar 2014 11:29:45 AM JST
            yield win

* Sun 30 Mar 2014 11:29:54 AM JST
pass
* Sun 30 Mar 2014 11:50:03 AM JST
core
* Sun 30 Mar 2014 11:51:49 AM JST

* Sun 30 Mar 2014 11:51:49 AM JST

* Sun 30 Mar 2014 11:51:49 AM JST
        # return self.window.get_full_property('_NET_WM_NAME')

* Sun 30 Mar 2014 11:53:32 AM JST
from t1.listutil import get_first_index
* Sun 30 Mar 2014 11:57:30 AM JST

* Sun 30 Mar 2014 11:57:30 AM JST

* Sun 30 Mar 2014 11:57:30 AM JST
        pid = self.window.get_full_property('_NET_WM_PID')

* Sun 30 Mar 2014 11:57:30 AM JST
        pid = self.window.get_full_property('_NET_WM_PID')

* Sun 30 Mar 2014 11:57:30 AM JST
        pid = self.window.get_full_property('_NET_WM_PID')
        return get_first_index(pid)

* Sun 30 Mar 2014 11:58:11 AM JST
id
* Sun 30 Mar 2014 11:58:11 AM JST
window.id
* Sun 30 Mar 2014 11:58:12 AM JST
self.window.id
* Sun 30 Mar 2014 11:59:20 AM JST

* Sun 30 Mar 2014 11:59:21 AM JST

* Sun 30 Mar 2014 11:59:21 AM JST
        return self.window.get_full_property('_NET_WM_STATE')

* Sun 30 Mar 2014 11:59:26 AM JST
core
* Sun 30 Mar 2014 11:59:26 AM JST
window.core
* Sun 30 Mar 2014 12:01:08 PM JST

* Sun 30 Mar 2014 12:01:08 PM JST

* Sun 30 Mar 2014 12:01:08 PM JST
        return self.window.get_full_property('_NET_WM_DESKTOP')

* Sun 30 Mar 2014 12:01:26 PM JST
_NET_FRAME_EXTENTS
* Sun 30 Mar 2014 12:01:45 PM JST

* Sun 30 Mar 2014 12:01:45 PM JST

* Sun 30 Mar 2014 12:01:45 PM JST
        return self.window.get_full_property('_NET_FRAME_EXTENTS')

* Sun 30 Mar 2014 12:01:51 PM JST
_NET_WM_ICON_NAME
* Sun 30 Mar 2014 12:01:57 PM JST
return self.connection.properties.get_NET_FRAME_EXTENTS(int(self))
* Sun 30 Mar 2014 12:02:52 PM JST

* Sun 30 Mar 2014 12:02:52 PM JST

* Sun 30 Mar 2014 12:02:52 PM JST
        return self.window.get_full_property('_NET_WM_ICON_NAME')

* Sun 30 Mar 2014 12:02:58 PM JST
NET_WM_USER_TIME_WINDOW
* Sun 30 Mar 2014 12:03:43 PM JST
NET_WM_USER_TIME_WINDOW
* Sun 30 Mar 2014 12:03:47 PM JST

* Sun 30 Mar 2014 12:03:47 PM JST

* Sun 30 Mar 2014 12:03:47 PM JST
        result = self.window.get_full_property('_NET_WM_USER_TIME_WINDOW')

* Sun 30 Mar 2014 12:03:47 PM JST
        result = self.window.get_full_property('_NET_WM_USER_TIME_WINDOW')

* Sun 30 Mar 2014 12:03:47 PM JST
        result = self.window.get_full_property('_NET_WM_USER_TIME_WINDOW')
        return get_first_index(result)

* Sun 30 Mar 2014 12:03:57 PM JST
NET_WM_ALLOWED_ACTIONS
* Sun 30 Mar 2014 12:04:04 PM JST

* Sun 30 Mar 2014 12:04:04 PM JST

* Sun 30 Mar 2014 12:04:04 PM JST
        return self.window.get_full_property('_NET_WM_ALLOWED_ACTIONS')

* Sun 30 Mar 2014 12:06:30 PM JST
propergate
* Sun 30 Mar 2014 12:06:38 PM JST
sequence_number
* Sun 30 Mar 2014 12:06:45 PM JST

* Sun 30 Mar 2014 12:06:45 PM JST

* Sun 30 Mar 2014 12:06:45 PM JST
        self.window.extensions.state.above.set(self.window.id)

* Sun 30 Mar 2014 12:06:56 PM JST
        self.connection.windowstate.setabove(propergate, int(self),
                                             sequence_number)

* Sun 30 Mar 2014 12:07:11 PM JST
propergate, sequence_number)
* Sun 30 Mar 2014 12:07:23 PM JST
propergate=False, sequence_number=0
* Sun 30 Mar 2014 12:07:29 PM JST

* Sun 30 Mar 2014 12:07:29 PM JST

* Sun 30 Mar 2014 12:07:30 PM JST
        self.window.extensions.state.above.unset(self.window.id)

* Sun 30 Mar 2014 12:09:52 PM JST
propergate, 
* Sun 30 Mar 2014 12:09:53 PM JST
sequence_number
* Sun 30 Mar 2014 12:09:54 PM JST
                                             sequence_number
* Sun 30 Mar 2014 12:10:07 PM JST
propergate, 
* Sun 30 Mar 2014 12:10:09 PM JST
                                               
* Sun 30 Mar 2014 12:16:28 PM JST
self.connection.windowstate.unsetabove(int(self))
* Sun 30 Mar 2014 12:16:49 PM JST

* Sun 30 Mar 2014 12:16:49 PM JST

* Sun 30 Mar 2014 12:16:49 PM JST
        self.window.extension.state.above.toggle(self.window.id)

* Sun 30 Mar 2014 12:17:02 PM JST

* Sun 30 Mar 2014 12:17:02 PM JST

* Sun 30 Mar 2014 12:17:02 PM JST
        return self.window.extensions.state.check.isabove(self.window.id)

* Sun 30 Mar 2014 12:18:14 PM JST
windowstate
* Sun 30 Mar 2014 12:18:26 PM JST

* Sun 30 Mar 2014 12:18:27 PM JST

* Sun 30 Mar 2014 12:18:27 PM JST
        return self.window.extensions.state.check.isabove(self.window.id)

* Sun 30 Mar 2014 12:18:42 PM JST
windowstate
* Sun 30 Mar 2014 12:19:04 PM JST
return self.connection.checkstate.isbelow(int(self))
* Sun 30 Mar 2014 12:20:41 PM JST
connection.
* Sun 30 Mar 2014 12:20:48 PM JST
connection.
* Sun 30 Mar 2014 12:20:57 PM JST
connection.
* Sun 30 Mar 2014 12:21:04 PM JST
connection.
* Sun 30 Mar 2014 12:21:16 PM JST
connection.
* Sun 30 Mar 2014 12:21:19 PM JST
connection.
* Sun 30 Mar 2014 12:21:22 PM JST
connection
* Sun 30 Mar 2014 12:21:24 PM JST
return self.connection
* Sun 30 Mar 2014 12:22:41 PM JST
connection.
* Sun 30 Mar 2014 12:22:45 PM JST
connection.
* Sun 30 Mar 2014 12:22:48 PM JST
connection.
* Sun 30 Mar 2014 12:22:53 PM JST
connection.
* Sun 30 Mar 2014 12:22:58 PM JST
connection.
* Sun 30 Mar 2014 12:23:02 PM JST
connection.
* Sun 30 Mar 2014 12:23:04 PM JST
connection.
* Sun 30 Mar 2014 12:23:07 PM JST
connection.
* Sun 30 Mar 2014 12:23:09 PM JST
connection.
* Sun 30 Mar 2014 12:25:22 PM JST
    def move(self, **changes):
        r"""SUMMARY

        move(**kwargs)

        @Arguments:
        - `**kwargs`:

        @Return:
        """
        mask = 0
        values = []
        for key in ('x', 'y', 'width', 'height'):
            if key not in changes:
                continue
            mask |= getattr(ConfigWindow, key.capitalize())
            values.append(changes[key])
        if mask:
            self.window.core.ConfigureWindow(self.window.id, mask, values)


* Sun 30 Mar 2014 12:28:28 PM JST
checkstate
* Sun 30 Mar 2014 12:31:08 PM JST
window
* Sun 30 Mar 2014 12:31:08 PM JST
self.window
* Sun 30 Mar 2014 12:31:26 PM JST

* Sun 30 Mar 2014 12:31:26 PM JST

* Sun 30 Mar 2014 12:31:26 PM JST
        self.window.extensions.destroy.close(self.window.id)

* Sun 30 Mar 2014 12:31:47 PM JST

* Sun 30 Mar 2014 12:31:47 PM JST

* Sun 30 Mar 2014 12:31:48 PM JST
        self.window.core.KillClient(self.window.id)

* Sun 30 Mar 2014 12:32:26 PM JST
properties.
* Sun 30 Mar 2014 12:32:40 PM JST

* Sun 30 Mar 2014 12:32:40 PM JST

* Sun 30 Mar 2014 12:32:40 PM JST
        self.window.extensions.state.maximize.set(self.window.id)

* Sun 30 Mar 2014 12:32:46 PM JST
self.windowstate.setmaximize(int(self))
* Sun 30 Mar 2014 12:32:51 PM JST

* Sun 30 Mar 2014 12:32:51 PM JST

* Sun 30 Mar 2014 12:32:52 PM JST
        self.window.extensions.state.maximize.unset(self.window.id)

* Sun 30 Mar 2014 12:33:04 PM JST
self.windowstate.unsetmaximize(int(self))
* Sun 30 Mar 2014 12:33:09 PM JST
unset
* Sun 30 Mar 2014 12:33:11 PM JST

* Sun 30 Mar 2014 12:33:11 PM JST

* Sun 30 Mar 2014 12:33:11 PM JST
        self.window.extensions.state.maximize.toggle(self.window.id)

* Sun 30 Mar 2014 12:33:43 PM JST

* Sun 30 Mar 2014 12:33:43 PM JST

* Sun 30 Mar 2014 12:33:43 PM JST
        self.window.extensions.state.fullscreen.set(self.window.id)

* Sun 30 Mar 2014 12:34:02 PM JST

* Sun 30 Mar 2014 12:34:03 PM JST

* Sun 30 Mar 2014 12:34:03 PM JST
        self.window.extensions.state.fullscreen.unset(self.window.id)

* Sun 30 Mar 2014 12:34:13 PM JST
self.windowstate.unsetfullscreen(int(self))
* Sun 30 Mar 2014 12:34:16 PM JST
unset
* Sun 30 Mar 2014 12:34:18 PM JST

* Sun 30 Mar 2014 12:34:18 PM JST

* Sun 30 Mar 2014 12:34:18 PM JST
        self.window.extensions.state.fullscreen.toggle(self.window.id)

* Sun 30 Mar 2014 12:34:25 PM JST
self.windowstate.togglefullscreen(int(self))
* Sun 30 Mar 2014 12:34:29 PM JST
togglefullscreen
* Sun 30 Mar 2014 12:34:34 PM JST

* Sun 30 Mar 2014 12:34:34 PM JST

* Sun 30 Mar 2014 12:34:34 PM JST
        self.window.extensions.state.below.set(self.window.id)

* Sun 30 Mar 2014 12:35:02 PM JST
self.windowstate.setbelow(int(self))
* Sun 30 Mar 2014 12:35:09 PM JST

* Sun 30 Mar 2014 12:35:09 PM JST

* Sun 30 Mar 2014 12:35:09 PM JST
        self.window.extensions.state.below.unset(self.window.id)

* Sun 30 Mar 2014 12:35:21 PM JST
self.windowstate.unsetbelow(int(self))
* Sun 30 Mar 2014 12:35:26 PM JST
unset
* Sun 30 Mar 2014 12:35:30 PM JST

* Sun 30 Mar 2014 12:35:30 PM JST

* Sun 30 Mar 2014 12:35:30 PM JST
        self.window.extensions.state.below.toggle(self.window.id)

* Sun 30 Mar 2014 12:35:37 PM JST
self.windowstate.togglebelow(int(self))
* Sun 30 Mar 2014 12:35:39 PM JST
togglebelow
* Sun 30 Mar 2014 12:35:42 PM JST

* Sun 30 Mar 2014 12:35:42 PM JST

* Sun 30 Mar 2014 12:35:43 PM JST
        self.window.extensions.state.shade.set(self.window.id)

* Sun 30 Mar 2014 12:35:47 PM JST
self.windowstate.setshade(int(self))
* Sun 30 Mar 2014 12:35:52 PM JST

* Sun 30 Mar 2014 12:35:52 PM JST

* Sun 30 Mar 2014 12:35:52 PM JST
        self.window.extensions.state.shade.unset(self.window.id)

* Sun 30 Mar 2014 12:36:02 PM JST
self.windowstate.unsetshade(int(self))
* Sun 30 Mar 2014 12:36:05 PM JST
unset
* Sun 30 Mar 2014 12:36:08 PM JST

* Sun 30 Mar 2014 12:36:08 PM JST

* Sun 30 Mar 2014 12:36:08 PM JST
        self.window.extensions.state.shade.toggle(self.window.id)

* Sun 30 Mar 2014 01:11:58 PM JST
# owner_events
* Sun 30 Mar 2014 01:12:24 PM JST
# confine_to
* Sun 30 Mar 2014 01:12:53 PM JST
key
* Sun 30 Mar 2014 01:13:34 PM JST
        self.connection.core2.GrabPressButton(
            True, # owner_events
            int(self), # window
            0, # confine_to
            0, # cursor
            button,
            modifiers
        )

* Sun 30 Mar 2014 01:13:55 PM JST
key
* Sun 30 Mar 2014 01:14:43 PM JST
key
* Sun 30 Mar 2014 01:14:55 PM JST

* Sun 30 Mar 2014 01:14:55 PM JST

* Sun 30 Mar 2014 01:14:55 PM JST
        # root

* Sun 30 Mar 2014 01:14:57 PM JST

* Sun 30 Mar 2014 01:14:57 PM JST

* Sun 30 Mar 2014 01:14:57 PM JST
        # root

* Sun 30 Mar 2014 01:14:57 PM JST

* Sun 30 Mar 2014 01:14:57 PM JST

* Sun 30 Mar 2014 01:14:57 PM JST
        # TODO: (Atami) [2014/03/30]

* Sun 30 Mar 2014 01:14:59 PM JST

* Sun 30 Mar 2014 01:14:59 PM JST

* Sun 30 Mar 2014 01:15:00 PM JST
        # TODO: (Atami) [2014/03/30]

* Sun 30 Mar 2014 01:15:25 PM JST

* Sun 30 Mar 2014 01:15:26 PM JST

* Sun 30 Mar 2014 01:15:26 PM JST
        return self.window.get_full_property('_NET_SUPPORTED')

* Sun 30 Mar 2014 01:15:50 PM JST
_NET_NUMBER_OF_DESKTOPS
* Sun 30 Mar 2014 01:15:55 PM JST

* Sun 30 Mar 2014 01:15:55 PM JST

* Sun 30 Mar 2014 01:15:55 PM JST
        return self.window.get_full_property('_NET_NUMBER_OF_DESKTOPS')

* Sun 30 Mar 2014 01:16:01 PM JST
_NET_DESKTOP_GEOMETRY
* Sun 30 Mar 2014 01:16:13 PM JST

* Sun 30 Mar 2014 01:16:13 PM JST

* Sun 30 Mar 2014 01:16:14 PM JST
        return self.window.get_full_property('_NET_DESKTOP_GEOMETRY')

* Sun 30 Mar 2014 01:16:18 PM JST
_NET_DESKTOP_VIEWPORT
* Sun 30 Mar 2014 01:16:32 PM JST
elf
* Sun 30 Mar 2014 01:16:35 PM JST

* Sun 30 Mar 2014 01:16:35 PM JST

* Sun 30 Mar 2014 01:16:35 PM JST
        return self.window.get_full_property('_NET_DESKTOP_VIEWPORT')

* Sun 30 Mar 2014 01:16:46 PM JST
_NET_CURRENT_DESKTOP
* Sun 30 Mar 2014 01:16:52 PM JST

* Sun 30 Mar 2014 01:16:52 PM JST

* Sun 30 Mar 2014 01:16:52 PM JST
        return self.window.get_full_property('_NET_CURRENT_DESKTOP')

* Sun 30 Mar 2014 01:17:07 PM JST
_NET_DESKTOP_NAMES
* Sun 30 Mar 2014 01:17:11 PM JST

* Sun 30 Mar 2014 01:17:11 PM JST

* Sun 30 Mar 2014 01:17:11 PM JST
        return self.window.get_full_property('_NET_DESKTOP_NAMES')

* Sun 30 Mar 2014 01:41:41 PM JST
_NET_WORKAREA
* Sun 30 Mar 2014 01:41:47 PM JST

* Sun 30 Mar 2014 01:41:47 PM JST

* Sun 30 Mar 2014 01:41:47 PM JST
        return self.window.get_full_property('_NET_WORKAREA')

* Sun 30 Mar 2014 01:42:01 PM JST
_NET_VIRTUAL_ROOTS
* Sun 30 Mar 2014 01:42:06 PM JST

* Sun 30 Mar 2014 01:42:06 PM JST

* Sun 30 Mar 2014 01:42:06 PM JST
        return self.window.get_full_property('_NET_VIRTUAL_ROOTS')

* Sun 30 Mar 2014 01:42:20 PM JST
_NET_SUPPORTING_WM_CHECK
* Sun 30 Mar 2014 01:42:27 PM JST

* Sun 30 Mar 2014 01:42:27 PM JST

* Sun 30 Mar 2014 01:42:27 PM JST
        return self.window.get_full_property('_NET_SUPPORTING_WM_CHECK')

* Sun 30 Mar 2014 01:42:40 PM JST
_NET_DESKTOP_LAYOUT
* Sun 30 Mar 2014 01:42:44 PM JST

* Sun 30 Mar 2014 01:42:44 PM JST

* Sun 30 Mar 2014 01:42:44 PM JST
        return self.window.get_full_property('_NET_DESKTOP_LAYOUT')

* Sun 30 Mar 2014 01:42:58 PM JST
_NET_DESKTOP_LAYOUT
* Sun 30 Mar 2014 01:43:02 PM JST

* Sun 30 Mar 2014 01:43:02 PM JST

* Sun 30 Mar 2014 01:43:02 PM JST
        return self.window.get_full_property('_NET_DESKTOP_LAYOUT')

* Sun 30 Mar 2014 01:43:15 PM JST
_NET_WM_USER_TIME
* Sun 30 Mar 2014 01:43:20 PM JST

* Sun 30 Mar 2014 01:43:20 PM JST

* Sun 30 Mar 2014 01:43:20 PM JST
        return self.window.get_full_property('_NET_WM_USER_TIME')

* Sun 30 Mar 2014 01:44:04 PM JST
_NET_CLIENT_LIST
* Sun 30 Mar 2014 01:44:23 PM JST
_NET_CLIENT_LIST_STACKING
* Sun 30 Mar 2014 01:46:57 PM JST
window
* Sun 30 Mar 2014 01:48:06 PM JST
Display
* Sun 30 Mar 2014 01:50:31 PM JST
window
* Sun 30 Mar 2014 01:50:47 PM JST
window
* Sun 30 Mar 2014 01:51:05 PM JST
window
* Sun 30 Mar 2014 01:51:12 PM JST
window
* Sun 30 Mar 2014 01:51:17 PM JST
window
* Sun 30 Mar 2014 01:52:26 PM JST
destroywindow
* Sun 30 Mar 2014 02:52:47 PM JST
_NET_WM_WINDOW_TYPE
* Sun 30 Mar 2014 02:52:53 PM JST

* Sun 30 Mar 2014 02:52:53 PM JST

* Sun 30 Mar 2014 02:52:53 PM JST
        return self.window.get_full_property('_NET_WM_WINDOW_TYPE')

* Sun 30 Mar 2014 03:00:41 PM JST
Window
* Sun 30 Mar 2014 03:01:11 PM JST
/usr/share/pyshared/Xlib/
* Sun 30 Mar 2014 03:01:36 PM JST
/usr/share/pyshared/Xlib/xobject
* Sun 30 Mar 2014 03:11:33 PM JST
get_resource_class
* Sun 30 Mar 2014 03:12:41 PM JST
resource_classes
* Sun 30 Mar 2014 03:30:51 PM JST
class WindowTypesDispatchBuilder(AtomDispatchBuilder):
    r"""
    """
    missing = FundamentalWindow

    _types_list = (WindowNormalType,
                   WindowSplashType,
                   WindowDesktopType,
                   WindowDockType,
                   WindowToolbarType,
                   WindowMenuType,
                   WindowUtilityType,
                   WindowDialogType,
                   WindowDropdownMenuType,
                   WindowPopupMenuType,
                   WindowTooltipType,
                   WindowNotificationType,
                   WindowComboType,
                   WindowDNDType,)

* Sun 30 Mar 2014 03:31:59 PM JST
class AtomDispatchBuilder(DisplayName, MakeDispatchFromListABC):
    r"""
    """

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `display`:
        """
        DisplayName.__init__(self, display=display)
        self.intern_atom = AtomIdentifier(display=self.display).intern_atom

    def get_list(self, ):
        r"""SUMMARY

        get_list()

        @Return:
        """
        return getattr(self, '_types_list')

    def get_key(self, elm):
        r"""SUMMARY

        get_key(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        if hasattr(elm, 'type_name'):
            return self.intern_atom(elm.type_name)
        return None

    def get_callable(self, elm):
        r"""SUMMARY

        get_callable(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        return elm

* Sun 30 Mar 2014 03:33:45 PM JST
from dispatcher import MakeDispatchFromListABC
* Sun 30 Mar 2014 03:34:52 PM JST
intern_atom
* Sun 30 Mar 2014 03:35:18 PM JST
Display, MakeDispatchFromListABC
* Sun 30 Mar 2014 03:35:31 PM JST
    def get_list(self, ):
        r"""SUMMARY

        get_list()

        @Return:
        """
        return getattr(self, '_types_list')

    def get_key(self, elm):
        r"""SUMMARY

        get_key(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        if hasattr(elm, 'type_name'):
            return self.connection.core2.atom(elm.type_name)
        return None

    def get_callable(self, elm):
        r"""SUMMARY

        get_callable(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        return elm

* Sun 30 Mar 2014 03:36:43 PM JST
WindowTypesDispatcher
* Sun 30 Mar 2014 03:37:02 PM JST

* Sun 30 Mar 2014 03:37:06 PM JST
keymap
* Sun 30 Mar 2014 03:37:34 PM JST
ConnectionAbstract
* Sun 30 Mar 2014 03:37:58 PM JST
from xcb2.xconnection.abstract import ConnectionAbstract
* Sun 30 Mar 2014 03:38:14 PM JST

* Sun 30 Mar 2014 03:38:14 PM JST

* Sun 30 Mar 2014 03:38:14 PM JST
from xcb2.xconnection.abstract import ConnectionAbstract

* Sun 30 Mar 2014 03:38:18 PM JST
ConnectionAbstract
* Sun 30 Mar 2014 03:38:48 PM JST
WindowTypesDispatcher
* Sun 30 Mar 2014 03:38:55 PM JST
WindowTypesDispatcher
* Sun 30 Mar 2014 03:39:55 PM JST
        if not hasattr(self.connection, 'core2'):
            from xcb2.xconnection.wrapcore import WrapCore
            self.connection.core2 = WrapCore(self.connection)

* Sun 30 Mar 2014 03:55:47 PM JST
import xcb2
* Sun 30 Mar 2014 03:58:38 PM JST

* Sun 30 Mar 2014 03:58:38 PM JST

* Sun 30 Mar 2014 03:58:38 PM JST
import xcb2

* Sun 30 Mar 2014 03:59:24 PM JST
from xcb2.display import Display
* Sun 30 Mar 2014 04:01:01 PM JST
from xcb2.display import Display
from xcb2.xconnection.connection import Connection as XConnection

* Sun 30 Mar 2014 04:04:27 PM JST
from xcb2.display import Display
* Sun 30 Mar 2014 04:17:14 PM JST
ConnectionAbstract
* Sun 30 Mar 2014 04:18:32 PM JST
ConnectionAbstract
* Sun 30 Mar 2014 04:18:42 PM JST

* Sun 30 Mar 2014 04:18:42 PM JST

* Sun 30 Mar 2014 04:18:42 PM JST
        Display.__init__(self, display)

* Sun 30 Mar 2014 04:42:02 PM JST
self.connection.properties.get_NET_WM_WINDOW_TYPE(int(self))
* Sun 30 Mar 2014 04:44:09 PM JST
get_NET_WM_WINDOW_TYPE
* Sun 30 Mar 2014 04:44:16 PM JST
31457302
* Sun 30 Mar 2014 04:44:39 PM JST
get_first_index
* Sun 30 Mar 2014 04:47:18 PM JST
from t1.listutil import get_first_index
* Sun 30 Mar 2014 04:47:23 PM JST
get_first_index
* Sun 30 Mar 2014 04:48:12 PM JST
get_NET_WM_WINDOW_TYPE
* Sun 30 Mar 2014 04:48:16 PM JST
31457302
* Sun 30 Mar 2014 06:37:41 PM JST
WindowNormalType,
                   WindowSplashType,
                   WindowDesktopType,
                   WindowDockType,
                   WindowToolbarType,
                   WindowMenuType,
                   WindowUtilityType,
                   WindowDialogType,
                   WindowDropdownMenuType,
                   WindowPopupMenuType,
                   WindowTooltipType,
                   WindowNotificationType,
                   WindowComboType,
                   WindowDNDType,
* Sun 30 Mar 2014 06:38:05 PM JST
'_NET_WM_WINDOW_TYPE_NORMAL'
* Sun 30 Mar 2014 06:38:29 PM JST
'_NET_WM_WINDOW_TYPE_SPLASH'
* Sun 30 Mar 2014 06:38:45 PM JST
'_NET_NUMBER_OF_DESKTOPS'
* Sun 30 Mar 2014 06:39:11 PM JST
'_NET_WM_WINDOW_TYPE_DESKTOP'
* Sun 30 Mar 2014 06:39:22 PM JST
'_NET_WM_WINDOW_TYPE_DOCK'
* Sun 30 Mar 2014 06:39:31 PM JST
'_NET_WM_WINDOW_TYPE_TOOLBAR'
* Sun 30 Mar 2014 06:39:43 PM JST
'_NET_WM_WINDOW_TYPE_MENU'
* Sun 30 Mar 2014 06:39:53 PM JST
'_NET_WM_WINDOW_TYPE_UTILITY'
* Sun 30 Mar 2014 06:40:05 PM JST
'_NET_WM_WINDOW_TYPE_DIALOG'
* Sun 30 Mar 2014 06:40:16 PM JST
'_NET_WM_WINDOW_TYPE_DROPDOWN_MENU'
* Sun 30 Mar 2014 06:40:24 PM JST
'_NET_WM_WINDOW_TYPE_POPUP_MENU'
* Sun 30 Mar 2014 06:40:34 PM JST
'_NET_WM_WINDOW_TYPE_TOOLTIP'
* Sun 30 Mar 2014 06:40:43 PM JST
'_NET_WM_WINDOW_TYPE_NOTIFICATION'
* Sun 30 Mar 2014 06:40:52 PM JST
'_NET_WM_WINDOW_TYPE_COMBO'
* Sun 30 Mar 2014 06:40:59 PM JST
'_NET_WM_WINDOW_TYPE_DND'
* Sun 30 Mar 2014 11:14:15 PM JST
WINDOW_TYPES
* Sun 30 Mar 2014 11:16:09 PM JST

* Sun 30 Mar 2014 11:16:09 PM JST

* Sun 30 Mar 2014 11:16:10 PM JST
        ConnectionAbstract.__init__(self, connection)

* Sun 30 Mar 2014 11:17:55 PM JST
    @property
    def types(self, ):
        r"""SUMMARY

        get_window_type()

        @Return:
        """
        return self.connection.properties.get_NET_WM_WINDOW_TYPE(int(self))


* Sun 30 Mar 2014 11:18:20 PM JST
self.connection.properties.get_NET_WM_WINDOW_TYPE(int(self))
* Sun 30 Mar 2014 11:18:48 PM JST
WINDOW_TYPES
* Sun 30 Mar 2014 11:21:14 PM JST
31457302
* Sun 30 Mar 2014 11:24:04 PM JST

* Sun 30 Mar 2014 11:24:04 PM JST

* Sun 30 Mar 2014 11:24:04 PM JST
from dispatcher import MakeDispatchFromListABC

* Sun 30 Mar 2014 11:24:45 PM JST
self.
* Sun 30 Mar 2014 11:25:51 PM JST
31457302
* Sun 30 Mar 2014 11:27:30 PM JST

* Sun 30 Mar 2014 11:27:30 PM JST

* Sun 30 Mar 2014 11:27:30 PM JST
from xcb2.xconnection.abstract import ConnectionAbstract

* Mon 31 Mar 2014 06:17:07 AM JST
xconnection
* Mon 31 Mar 2014 06:17:20 AM JST
WindowTypesDispatcher
* Mon 31 Mar 2014 06:17:34 AM JST
Window
* Mon 31 Mar 2014 06:22:32 AM JST
display'
* Mon 31 Mar 2014 06:29:42 AM JST
from xcb2.xconnection.abstract import ConnectionAbstract
* Mon 31 Mar 2014 06:29:51 AM JST
ConnectionAbstract
* Mon 31 Mar 2014 06:30:54 AM JST
ConnectionAbstract
* Mon 31 Mar 2014 06:30:59 AM JST
display
* Mon 31 Mar 2014 06:41:55 AM JST
Windows
* Mon 31 Mar 2014 06:42:56 AM JST
xconnection
* Mon 31 Mar 2014 06:46:03 AM JST
xproto
* Mon 31 Mar 2014 06:53:28 AM JST
self.connection.windows.get_root()
* Mon 31 Mar 2014 06:57:54 AM JST
get_NET_CLIENT_LIST
* Mon 31 Mar 2014 06:58:44 AM JST
get_NET_CLIENT_LIST
* Mon 31 Mar 2014 07:03:19 AM JST

* Mon 31 Mar 2014 07:03:20 AM JST
ConnectionAbstract
* Mon 31 Mar 2014 07:03:24 AM JST
abstract
* Mon 31 Mar 2014 07:03:35 AM JST

* Mon 31 Mar 2014 07:03:35 AM JST

* Mon 31 Mar 2014 07:03:35 AM JST
from xcb2.xconnection.window import Windows

* Mon 31 Mar 2014 07:05:10 AM JST
clients
* Mon 31 Mar 2014 07:09:06 AM JST
get_NET_CLIENT_LIST
* Mon 31 Mar 2014 07:09:26 AM JST
get_NET_CLIENT_LIST_STACKING
* Mon 31 Mar 2014 07:09:54 AM JST
[self.connection.windows(x) for x in clients]
* Mon 31 Mar 2014 07:10:44 AM JST
get_NET_ACTIVE_WINDOW
* Mon 31 Mar 2014 07:12:03 AM JST
from t1.listutil import get_first_index
* Mon 31 Mar 2014 07:12:08 AM JST
[31457302, 0]
* Mon 31 Mar 2014 07:12:21 AM JST
get_first_index
* Mon 31 Mar 2014 07:12:45 AM JST
self.core2.GetFullProperty(
            delete, window, '_NET_ACTIVE_WINDOW')
* Mon 31 Mar 2014 08:37:51 AM JST
class XAHKException(Exception):
    r"""SUMMARY
    """

* Mon 31 Mar 2014 12:35:07 PM JST
self._data + self.state * 100
* Mon 31 Mar 2014 12:36:28 PM JST
from sendkeys.statecode import StateCode
* Mon 31 Mar 2014 12:41:31 PM JST

* Mon 31 Mar 2014 12:41:31 PM JST

* Mon 31 Mar 2014 12:41:31 PM JST
        print(self._data + int(self.state) * 1000)

* Mon 31 Mar 2014 12:42:46 PM JST
ModifierMask
* Mon 31 Mar 2014 12:45:15 PM JST
return 
* Mon 31 Mar 2014 12:45:29 PM JST
return 
* Mon 31 Mar 2014 12:45:38 PM JST
return 
* Mon 31 Mar 2014 12:45:58 PM JST
return
* Mon 31 Mar 2014 12:46:11 PM JST
return
* Mon 31 Mar 2014 12:46:14 PM JST
return
* Mon 31 Mar 2014 12:46:21 PM JST
return
* Mon 31 Mar 2014 12:46:24 PM JST
return
* Mon 31 Mar 2014 12:46:27 PM JST
return
* Mon 31 Mar 2014 12:46:30 PM JST
return
* Mon 31 Mar 2014 12:46:32 PM JST
return
* Mon 31 Mar 2014 12:46:34 PM JST
return
* Mon 31 Mar 2014 12:46:38 PM JST
return
* Mon 31 Mar 2014 12:46:42 PM JST
return
* Mon 31 Mar 2014 12:47:08 PM JST
return
* Mon 31 Mar 2014 12:47:13 PM JST
return
* Mon 31 Mar 2014 12:47:17 PM JST
return
* Mon 31 Mar 2014 12:47:21 PM JST
return
* Mon 31 Mar 2014 12:47:25 PM JST
return
* Mon 31 Mar 2014 12:47:30 PM JST
return
* Mon 31 Mar 2014 12:47:35 PM JST
return
* Mon 31 Mar 2014 12:47:39 PM JST
return
* Mon 31 Mar 2014 12:47:45 PM JST
return
* Mon 31 Mar 2014 12:47:49 PM JST
return
* Mon 31 Mar 2014 12:47:53 PM JST
return
* Mon 31 Mar 2014 12:47:58 PM JST
return
* Mon 31 Mar 2014 12:50:25 PM JST

* Mon 31 Mar 2014 12:50:25 PM JST

* Mon 31 Mar 2014 12:50:25 PM JST
    _modifiers = ModifierMask

* Mon 31 Mar 2014 12:50:35 PM JST
    def __init__(self, state=0):
        r"""

        @Arguments:
        - `state`:
        """
        self.state = int(state)


* Mon 31 Mar 2014 12:50:48 PM JST
    def __int__(self, ):
        return self.state

    def __eq__(self, other):
        return self.state == int(other)

    def __ne__(self, other):
        return self.state != int(other)

    def __hash__(self, ):
        return hash(self.state)

    def __and__(self, other):
        return self.__class__(self.state & int(other))

    def __xor__(self, other):
        return self.__class__(self.state ^ int(other))

    def __or__(self, other):
        return self.__class__(self.state | int(other))

    def __lshift__(self, other):
        return self.__class__(self.state << int(other))

    def __rshift__(self, other):
        return self.__class__(self.state >> int(other))

    def __invert__(self, ):
        return self.__class__(~self.state)

    def __iand__(self, other):
        self.state &= int(other)
        return self

    def __ixor__(self, other):
        self.state ^= int(other)
        return self

    def __ior__(self, other):
        self.state |= int(other)
        return self

    def __ilshift__(self, other):
        self.state <<= int(other)
        return self

    def __irshift__(self, other):
        self.state >>= int(other)
        return self

    def __nonzero__(self, ):
        return bool(self.state)

    def __contains__(self, elt):
        return bool(self.__and__(elt))

    def __repr__(self, ):
        return '{0.__class__.__name__}({0.state})'.format(self)

* Mon 31 Mar 2014 12:51:13 PM JST
    def __repr__(self, ):
        fmt = '{0.__class__.__name__}({0.state}, {1})'.format
        return fmt(self, [str(ModifierMask(mod)).split('.')[1]
                          for mod in self if mod])

    def __iter__(self, ):
        yield self.__class__(0)
        for mod in ModifierMask:
            if self & mod:
                yield self.__class__(mod)
        raise StopIteration()


* Mon 31 Mar 2014 12:51:36 PM JST
    def __iter__(self, ):
        yield self.__class__(0)
        for mod in ModifierMask:
            if self & mod:
                yield self.__class__(mod)
        raise StopIteration()


* Mon 31 Mar 2014 12:51:57 PM JST
StateCodeAbstract
* Mon 31 Mar 2014 12:52:25 PM JST
NamedModifierMask
* Mon 31 Mar 2014 01:57:53 PM JST
from dispatcher import DispatcherAbstract
* Mon 31 Mar 2014 02:04:14 PM JST
arg
* Mon 31 Mar 2014 02:05:45 PM JST
from hook import Hooks
* Mon 31 Mar 2014 02:05:57 PM JST
class EventHooks(Hooks):
    r"""SUMMARY
    """
    def __init__(self, iterable=(), maxlen=None, eventwrapper=None):
        r"""SUMMARY

        __init__(iterable, maxlen=None, eventwraper=None)

        @Arguments:
        - `iterable`:
        - `maxlen`:
        - `eventwraper`:

        @Return:
        """
        Hooks.__init__(self, iterable, maxlen)
        self._wrapper = eventwrapper or (lambda event: event)

    def set_wrapper(self, wrapper):
        r"""SUMMARY

        set_wrapper(wrapper)

        @Arguments:
        - `wrapper`:

        @Return:
        """
        self._wrapper = wrapper

    def remove_by_type(self, type_):
        r"""SUMMARY

        remove_by_type(type_)

        @Arguments:
        - `type_`:

        @Return:
        """
        for i, value in enumerate(self[:]):
            if type(value) == type_:
                del self[i]

    def __call__(self, event, *args, **kwargs):
        event = self._wrapper(event)
        self.run_hooks(event, *args, **kwargs)

* Mon 31 Mar 2014 02:26:08 PM JST
Motion
* Mon 31 Mar 2014 03:13:00 PM JST
self.
* Mon 31 Mar 2014 03:13:50 PM JST
    def __getitem__(self, event):
        """Get by type."""
        if not predicate.isclass(event):
            event = type(event)
        if event in self._data:
            return self._data[event]
        return self.__missing__()

* Mon 31 Mar 2014 03:14:07 PM JST
predicate.
* Mon 31 Mar 2014 03:14:12 PM JST
    def __repr__(self, ):
        return '{0.__class__.__name__}{0._data}'.format(self)

    def __call__(self, event, *args, **kwargs):
        kwargs['this'] = self
        return self[event](event, *args, **kwargs)

* Mon 31 Mar 2014 03:19:08 PM JST

* Mon 31 Mar 2014 03:19:08 PM JST

* Mon 31 Mar 2014 03:19:08 PM JST
        self._wrapper = eventwrapper or (lambda event: event)

* Mon 31 Mar 2014 03:19:18 PM JST

* Mon 31 Mar 2014 03:19:18 PM JST

* Mon 31 Mar 2014 03:19:18 PM JST
        event = self._wrapper(event)

* Mon 31 Mar 2014 03:35:11 PM JST
display
* Mon 31 Mar 2014 03:35:34 PM JST

* Mon 31 Mar 2014 03:35:34 PM JST

* Mon 31 Mar 2014 03:35:34 PM JST
        self._display = display

* Mon 31 Mar 2014 03:38:06 PM JST
    
* Mon 31 Mar 2014 03:38:11 PM JST
    
* Mon 31 Mar 2014 03:38:38 PM JST
        
* Mon 31 Mar 2014 03:38:42 PM JST
        
* Mon 31 Mar 2014 03:38:46 PM JST
        
* Mon 31 Mar 2014 03:38:52 PM JST
        
* Mon 31 Mar 2014 03:38:55 PM JST
        
* Mon 31 Mar 2014 03:39:26 PM JST

* Mon 31 Mar 2014 03:39:34 PM JST
        
* Mon 31 Mar 2014 03:39:40 PM JST
        
* Mon 31 Mar 2014 03:39:45 PM JST
        
* Mon 31 Mar 2014 03:39:51 PM JST
        
* Mon 31 Mar 2014 03:41:55 PM JST
        
* Mon 31 Mar 2014 03:42:03 PM JST
        
* Mon 31 Mar 2014 03:42:07 PM JST
        
* Mon 31 Mar 2014 03:42:14 PM JST

* Mon 31 Mar 2014 03:42:20 PM JST
        
* Mon 31 Mar 2014 03:42:29 PM JST
        
* Mon 31 Mar 2014 03:45:47 PM JST
datetime
* Mon 31 Mar 2014 03:45:48 PM JST

* Mon 31 Mar 2014 03:45:48 PM JST

* Mon 31 Mar 2014 03:45:48 PM JST
import datetime

* Mon 31 Mar 2014 03:47:04 PM JST
(s
* Mon 31 Mar 2014 03:49:01 PM JST
(re-search-forward "import" nil 'noerror)
* Mon 31 Mar 2014 03:49:45 PM JST
(save-excursion
    (save-restriction
      (narrow-to-line)
      (beginning-of-line)
      (re-search-forward "import" nil 'noerror)
      ))
* Mon 31 Mar 2014 03:49:59 PM JST
(not (py:at-string|comment-p))
* Mon 31 Mar 2014 03:50:19 PM JST
(and 
 (not (py:at-string|comment-p))
 (save-excursion
   (save-restriction
     (narrow-to-line)
     (beginning-of-line)
     (re-search-forward "import" nil 'noerror)
     )))
* Mon 31 Mar 2014 03:51:12 PM JST
(and 
 (not (py:at-string|comment-p))
 (save-excursion
   (save-restriction
     (narrow-to-line)
     (beginning-of-line)
     (re-search-forward "import" nil 'noerror)
     )))
* Mon 31 Mar 2014 03:51:22 PM JST
 
* Mon 31 Mar 2014 03:51:24 PM JST
 
* Mon 31 Mar 2014 03:51:25 PM JST
   
* Mon 31 Mar 2014 03:51:33 PM JST
 
* Mon 31 Mar 2014 03:51:34 PM JST
     
* Mon 31 Mar 2014 03:51:36 PM JST
     
* Mon 31 Mar 2014 03:52:53 PM JST

* Mon 31 Mar 2014 03:52:53 PM JST

* Mon 31 Mar 2014 03:52:53 PM JST
from MODULE import 

* Mon 31 Mar 2014 03:57:47 PM JST
    @property
    def root_x(self, ):
        r"""SUMMARY
        
        root_x()
        
        @Return:
        """
        if not self._root_x:
            self._root_x = self.raw_event.root_x
        return self._root_x

* Mon 31 Mar 2014 03:58:48 PM JST
    @property
    def event_y(self, ):
        r"""SUMMARY
        
        event_y()
        
        @Return:
        """
        if not self._event_y:
            self._event_y = self.raw_event.event_y
        return self._event_y

* Mon 31 Mar 2014 04:01:29 PM JST
WrapKeyButtonPoiterEvent
* Mon 31 Mar 2014 04:03:56 PM JST

* Mon 31 Mar 2014 04:03:56 PM JST

* Mon 31 Mar 2014 04:03:56 PM JST
        self._display = display

* Mon 31 Mar 2014 04:06:33 PM JST
self.
* Mon 31 Mar 2014 04:07:05 PM JST
self.connection.windows(event.root)
* Mon 31 Mar 2014 04:07:06 PM JST
root
* Mon 31 Mar 2014 04:07:18 PM JST
self.connection.windows(event.event)
* Mon 31 Mar 2014 04:07:19 PM JST
event
* Mon 31 Mar 2014 04:07:40 PM JST

* Mon 31 Mar 2014 04:07:47 PM JST
        
* Mon 31 Mar 2014 04:07:53 PM JST
root
* Mon 31 Mar 2014 04:07:58 PM JST

* Mon 31 Mar 2014 04:08:59 PM JST
connection
* Mon 31 Mar 2014 04:08:59 PM JST
self.connection
* Mon 31 Mar 2014 04:09:48 PM JST
    __slots__ = ('display', '_event', '__event', '_detail', '_time', '_root',
                 '_child', '_root_x', '_root_y', '_event_x', '_event_y',
                 '_state', '_same_screen')

* Mon 31 Mar 2014 04:10:44 PM JST
    __slots__ = ('display', '_event', '__event', '_detail', '_time', '_root',
                 '_child', '_root_x', '_root_y', '_event_x', '_event_y',
                 '_state', '_same_screen')

* Mon 31 Mar 2014 04:11:46 PM JST
1396249904.311482
* Mon 31 Mar 2014 04:11:52 PM JST
self.
* Mon 31 Mar 2014 04:12:03 PM JST
31457302
* Mon 31 Mar 2014 04:12:17 PM JST

* Mon 31 Mar 2014 04:12:34 PM JST

* Mon 31 Mar 2014 04:13:18 PM JST
from xcb2 import Display
* Mon 31 Mar 2014 04:13:22 PM JST
from datetime import datetime



from xcb2 import Display
from sendkeys.code import KeyCode
from sendkeys.statecode import StateCode

* Mon 31 Mar 2014 04:13:46 PM JST
WrapKeyButtonPoiterEvent
* Mon 31 Mar 2014 04:20:23 PM JST
timeit 
* Mon 31 Mar 2014 04:20:28 PM JST
timeit 
* Mon 31 Mar 2014 04:21:31 PM JST
self._detail = KeyCode(self.raw_event.detail, display=self.display)
* Mon 31 Mar 2014 04:21:41 PM JST
_detail = 
* Mon 31 Mar 2014 04:21:41 PM JST
self._detail = 
* Mon 31 Mar 2014 04:24:16 PM JST
datetime.fromtimestamp(self.raw_event.time)
* Mon 31 Mar 2014 04:24:27 PM JST
self.connection.windows(self.raw_event.root)
* Mon 31 Mar 2014 04:24:30 PM JST

* Mon 31 Mar 2014 04:24:30 PM JST

* Mon 31 Mar 2014 04:24:30 PM JST
        if not self._root:

* Mon 31 Mar 2014 04:24:31 PM JST
        if not self._root:

* Mon 31 Mar 2014 04:24:31 PM JST
        if not self._root:
            self._root = 

* Mon 31 Mar 2014 04:24:37 PM JST
self.connection.windows(self.raw_event.event)
* Mon 31 Mar 2014 04:24:40 PM JST

* Mon 31 Mar 2014 04:24:40 PM JST

* Mon 31 Mar 2014 04:24:40 PM JST
        if not self._event:

* Mon 31 Mar 2014 04:24:40 PM JST
        if not self._event:

* Mon 31 Mar 2014 04:24:40 PM JST
        if not self._event:
            self.connection.windows(self.raw_event.event)

* Mon 31 Mar 2014 04:24:45 PM JST
self.connection.windows(self.raw_event.event)
* Mon 31 Mar 2014 04:24:48 PM JST

* Mon 31 Mar 2014 04:24:48 PM JST

* Mon 31 Mar 2014 04:24:48 PM JST
        if not self._child:

* Mon 31 Mar 2014 04:24:49 PM JST
        if not self._child:

* Mon 31 Mar 2014 04:24:49 PM JST
        if not self._child:
            self._child = 

* Mon 31 Mar 2014 04:24:53 PM JST
self.raw_event.root_x
* Mon 31 Mar 2014 04:24:56 PM JST

* Mon 31 Mar 2014 04:24:56 PM JST

* Mon 31 Mar 2014 04:24:56 PM JST
        if not self._root_x:

* Mon 31 Mar 2014 04:24:56 PM JST
        if not self._root_x:

* Mon 31 Mar 2014 04:24:56 PM JST
        if not self._root_x:
            self._root_x = 

* Mon 31 Mar 2014 04:25:01 PM JST
self.raw_event.root_y
* Mon 31 Mar 2014 04:25:04 PM JST

* Mon 31 Mar 2014 04:25:04 PM JST

* Mon 31 Mar 2014 04:25:04 PM JST
        if not self._root_y:

* Mon 31 Mar 2014 04:25:05 PM JST
        if not self._root_y:

* Mon 31 Mar 2014 04:25:05 PM JST
        if not self._root_y:
            self._root_y = 

* Mon 31 Mar 2014 04:25:08 PM JST
self.raw_event.event_x
* Mon 31 Mar 2014 04:25:11 PM JST

* Mon 31 Mar 2014 04:25:12 PM JST

* Mon 31 Mar 2014 04:25:12 PM JST
        if not self._event_x:

* Mon 31 Mar 2014 04:25:12 PM JST
        if not self._event_x:

* Mon 31 Mar 2014 04:25:12 PM JST
        if not self._event_x:
            self._event_x = 

* Mon 31 Mar 2014 04:25:16 PM JST
self.raw_event.event_y
* Mon 31 Mar 2014 04:25:18 PM JST

* Mon 31 Mar 2014 04:25:18 PM JST

* Mon 31 Mar 2014 04:25:18 PM JST
            self._event_y = 

* Mon 31 Mar 2014 04:25:19 PM JST
            self._event_y = 

* Mon 31 Mar 2014 04:25:19 PM JST
            self._event_y = 
        return self.raw_event.event_y

* Mon 31 Mar 2014 04:25:20 PM JST

* Mon 31 Mar 2014 04:25:20 PM JST

* Mon 31 Mar 2014 04:25:20 PM JST
        if not self._event_y:

* Mon 31 Mar 2014 04:25:25 PM JST
StateCode(self.raw_event.state)
* Mon 31 Mar 2014 04:25:28 PM JST

* Mon 31 Mar 2014 04:25:28 PM JST

* Mon 31 Mar 2014 04:25:28 PM JST
        if not self._state:

* Mon 31 Mar 2014 04:25:28 PM JST
        if not self._state:

* Mon 31 Mar 2014 04:25:28 PM JST
        if not self._state:
            self._state = 

* Mon 31 Mar 2014 04:25:32 PM JST
self.raw_event.same_screen
* Mon 31 Mar 2014 04:25:35 PM JST

* Mon 31 Mar 2014 04:25:36 PM JST

* Mon 31 Mar 2014 04:25:36 PM JST
        if not self._same_screen:

* Mon 31 Mar 2014 04:25:36 PM JST
        if not self._same_screen:

* Mon 31 Mar 2014 04:25:36 PM JST
        if not self._same_screen:
            self._same_screen = 

* Mon 31 Mar 2014 04:45:26 PM JST
    @property
    def code(self, ):
        r"""SUMMARY

        code()

        @Return:
        """
        return KeyCode(self.__event.detail, self.__event.state,
                       display=self.display)

* Mon 31 Mar 2014 04:45:32 PM JST
__event
* Mon 31 Mar 2014 04:45:36 PM JST
__event
* Mon 31 Mar 2014 04:45:39 PM JST
                       
* Mon 31 Mar 2014 04:50:31 PM JST
    def __repr__(self, ):
        fmt = ('{0.__class__.__name__}('
               # 'detail={0.detail}, '
               'code={0.code}'
               'time={0.time}, '
               'root={0.root}, '
               'event={0.event}, '
               'child={0.child}, '
               'root_x={0.root_x}, '
               'root_y={0.root_y}, '
               'event_x={0.event_x}, '
               'event_y={0.event_y}, '
               # 'state={0.state}, '
               'same_screen={0.same_screen}, '
               ')').format
        return fmt(self)

* Mon 31 Mar 2014 04:52:24 PM JST
code
* Mon 31 Mar 2014 04:52:25 PM JST
KeyCode
* Mon 31 Mar 2014 05:01:04 PM JST
class WrapCreateNotifyEvent(Display):
    r"""SUMMARY
    """

    def __init__(self, event, display=None):
        r"""

        @Arguments:
        - `event`:
        - `display`:
        """
        Display.__init__(self, display)
        self.raw_event = event

* Mon 31 Mar 2014 05:01:26 PM JST
WrapEventAbstract
* Mon 31 Mar 2014 05:01:55 PM JST
_event', 
* Mon 31 Mar 2014 05:02:00 PM JST
 '_detail', '_time', '_root',
* Mon 31 Mar 2014 05:02:01 PM JST

* Mon 31 Mar 2014 05:02:01 PM JST

* Mon 31 Mar 2014 05:02:01 PM JST
                 '_child', '_root_x', '_root_y', '_event_x', '_event_y',

* Mon 31 Mar 2014 05:02:02 PM JST
'_state', '_same_screen'
* Mon 31 Mar 2014 05:02:03 PM JST
                 '_state', '_same_screen'
* Mon 31 Mar 2014 05:05:41 PM JST
WrapEventAbstract
* Mon 31 Mar 2014 05:06:11 PM JST

* Mon 31 Mar 2014 05:06:11 PM JST

* Mon 31 Mar 2014 05:06:11 PM JST
    __slots__ = ('display', 'raw_event',)

* Mon 31 Mar 2014 05:07:03 PM JST
self.
* Mon 31 Mar 2014 05:12:04 PM JST
    @property
    def x(self, ):
        r"""SUMMARY
        
        x()
        
        @Return:
        """
        return self.raw_event.x

* Mon 31 Mar 2014 05:12:25 PM JST
return self.raw_event.y
* Mon 31 Mar 2014 05:12:57 PM JST
    @property
    def border_width(self, ):
        r"""SUMMARY

        border_width()

        @Return:
        """
        if not self._border_width:
            self._border_width = self._event.border_width
        return self._border_width

* Mon 31 Mar 2014 05:13:06 PM JST
_border_width = 
* Mon 31 Mar 2014 05:13:10 PM JST

* Mon 31 Mar 2014 05:13:10 PM JST

* Mon 31 Mar 2014 05:13:10 PM JST
        if not self._border_width:

* Mon 31 Mar 2014 05:13:12 PM JST

* Mon 31 Mar 2014 05:13:12 PM JST

* Mon 31 Mar 2014 05:13:12 PM JST
        return self._border_width

* Mon 31 Mar 2014 05:13:13 PM JST
            
* Mon 31 Mar 2014 05:13:34 PM JST
if not :
* Mon 31 Mar 2014 05:59:28 PM JST
class EventHooks(Hooks):
    r"""SUMMARY
    """
    def __init__(self, iterable=(), maxlen=None):
        r"""SUMMARY

        __init__(iterable, maxlen=None, eventwraper=None)

        @Arguments:
        - `iterable`:
        - `maxlen`:
        - `eventwraper`:

        @Return:
        """
        Hooks.__init__(self, iterable, maxlen)

    def remove_by_type(self, type_):
        r"""SUMMARY

        remove_by_type(type_)

        @Arguments:
        - `type_`:

        @Return:
        """
        for i, value in enumerate(self[:]):
            if type(value) == type_:
                del self[i]

    def __call__(self, event, *args, **kwargs):
        self.run_hooks(event, *args, **kwargs)



* Mon 31 Mar 2014 05:59:45 PM JST

* Mon 31 Mar 2014 05:59:45 PM JST

* Mon 31 Mar 2014 05:59:45 PM JST
from hook import Hooks

* Mon 31 Mar 2014 06:00:24 PM JST
from dispatcher import DispatcherAbstract
from xahk.event import hooks


* Mon 31 Mar 2014 06:23:03 PM JST
EventHooks
* Mon 31 Mar 2014 06:23:48 PM JST

* Mon 31 Mar 2014 06:23:48 PM JST

* Mon 31 Mar 2014 06:23:48 PM JST
        self._iterable = iterable

* Mon 31 Mar 2014 06:23:49 PM JST
        self._iterable = iterable

* Mon 31 Mar 2014 06:23:49 PM JST
        self._iterable = iterable
        self._maxlen = maxlen

* Mon 31 Mar 2014 06:39:54 PM JST
_wrapper = eventwrapper or (lambda event: event)
* Mon 31 Mar 2014 06:40:01 PM JST
or (
* Mon 31 Mar 2014 06:40:02 PM JST
eventwrapper or (
* Mon 31 Mar 2014 06:41:08 PM JST
None
* Mon 31 Mar 2014 06:42:20 PM JST
event, *args, **kwargs
* Mon 31 Mar 2014 06:42:36 PM JST
keymap
* Mon 31 Mar 2014 06:44:16 PM JST
class KeyPressHooks(KeyButtonPointerHooks):
    r"""SUMMARY
    """
    _wrapper = wrapevent.WrapKeyPressEvent
    

* Mon 31 Mar 2014 06:44:29 PM JST
Event
* Mon 31 Mar 2014 06:48:10 PM JST
        
* Mon 31 Mar 2014 10:12:36 PM JST
format(hello)
* Mon 31 Mar 2014 10:34:44 PM JST
xproto.KeyPressEvent
* Mon 31 Mar 2014 10:34:58 PM JST
hooks.KeyPressHooks
* Mon 31 Mar 2014 10:35:09 PM JST
xproto.KeyReleaseEvent
* Mon 31 Mar 2014 10:35:22 PM JST
hooks.KeyReleaseHooks
* Mon 31 Mar 2014 10:36:19 PM JST
        
* Mon 31 Mar 2014 10:36:40 PM JST
xproto.ButtonPressEvent
* Mon 31 Mar 2014 10:36:50 PM JST
hooks.ButtonPressHooks
* Mon 31 Mar 2014 10:37:01 PM JST
xproto.ButtonReleaseEvent
* Mon 31 Mar 2014 10:37:33 PM JST
hooks.ButtonReleaseHooks
* Mon 31 Mar 2014 10:37:43 PM JST
xproto.MotionNotifyEvent
* Mon 31 Mar 2014 10:38:37 PM JST
xproto.EnterNotifyEvent
* Mon 31 Mar 2014 10:38:51 PM JST
self[xproto.EnterNotifyEvent] = hooks.EventHooks()
* Mon 31 Mar 2014 10:39:11 PM JST
xproto.LeaveNotifyEvent
* Mon 31 Mar 2014 10:39:21 PM JST
xproto.FocusInEvent
* Mon 31 Mar 2014 10:39:29 PM JST
xproto.FocusOutEvent
* Mon 31 Mar 2014 10:39:36 PM JST
xproto.KeymapNotifyEvent
* Mon 31 Mar 2014 10:39:45 PM JST
xproto.ExposeEvent
* Mon 31 Mar 2014 10:39:53 PM JST
xproto.GraphicsExposureEvent
* Mon 31 Mar 2014 10:40:00 PM JST
xproto.NoExposureEvent
* Mon 31 Mar 2014 10:40:06 PM JST
xproto.VisibilityNotifyEvent
* Mon 31 Mar 2014 10:40:15 PM JST
xproto.CreateNotifyEvent
* Mon 31 Mar 2014 10:40:25 PM JST
xproto.DestroyNotifyEvent
* Mon 31 Mar 2014 10:40:34 PM JST
xproto.UnmapNotifyEvent
* Mon 31 Mar 2014 10:40:42 PM JST
xproto.MapNotifyEvent
* Mon 31 Mar 2014 10:40:49 PM JST
xproto.ReparentNotifyEvent
* Mon 31 Mar 2014 10:40:56 PM JST
xproto.ConfigureNotifyEvent
* Mon 31 Mar 2014 10:41:05 PM JST
xproto.ConfigureRequestEvent
* Mon 31 Mar 2014 10:41:14 PM JST
xproto.GravityNotifyEvent
* Mon 31 Mar 2014 10:41:21 PM JST
xproto.ResizeRequestEvent
* Mon 31 Mar 2014 10:41:28 PM JST
xproto.CirculateNotifyEvent
* Mon 31 Mar 2014 10:41:35 PM JST
xproto.PropertyNotifyEvent
* Mon 31 Mar 2014 10:41:44 PM JST
xproto.SelectionClearEvent
* Mon 31 Mar 2014 10:41:52 PM JST
xproto.SelectionRequestEvent
* Mon 31 Mar 2014 10:42:00 PM JST
xproto.SelectionNotifyEvent
* Mon 31 Mar 2014 10:42:06 PM JST
xproto.ColormapNotifyEvent
* Mon 31 Mar 2014 10:42:13 PM JST
xproto.ClientMessageEvent
* Mon 31 Mar 2014 10:42:21 PM JST
xproto.MappingNotifyEvent
* Mon 31 Mar 2014 10:42:41 PM JST
        self[xproto.KeyPressEvent] = hooks.KeyPressHooks()
        self[xproto.KeyReleaseEvent] = hooks.KeyReleaseHooks()
        self[xproto.ButtonPressEvent] = hooks.ButtonPressHooks()
        self[xproto.ButtonReleaseEvent] = hooks.ButtonReleaseHooks()
        self[xproto.MotionNotifyEvent] = hooks.EventHooks()
        self[xproto.EnterNotifyEvent] = hooks.EventHooks()
        self[xproto.LeaveNotifyEvent] = hooks.EventHooks()
        self[xproto.FocusInEvent] = hooks.EventHooks()
        self[xproto.FocusOutEvent] = hooks.EventHooks()
        self[xproto.KeymapNotifyEvent] = hooks.EventHooks()
        self[xproto.ExposeEvent] = hooks.EventHooks()
        self[xproto.GraphicsExposureEvent] = hooks.EventHooks()
        self[xproto.NoExposureEvent] = hooks.EventHooks()
        self[xproto.VisibilityNotifyEvent] = hooks.EventHooks()
        self[xproto.CreateNotifyEvent] = hooks.EventHooks()
        self[xproto.DestroyNotifyEvent] = hooks.EventHooks()
        self[xproto.UnmapNotifyEvent] = hooks.EventHooks()
        self[xproto.MapNotifyEvent] = hooks.EventHooks()
        self[xproto.ReparentNotifyEvent] = hooks.EventHooks()
        self[xproto.ConfigureNotifyEvent] = hooks.EventHooks()
        self[xproto.ConfigureRequestEvent] = hooks.EventHooks()
        self[xproto.GravityNotifyEvent] = hooks.EventHooks()
        self[xproto.ResizeRequestEvent] = hooks.EventHooks()
        self[xproto.CirculateNotifyEvent] = hooks.EventHooks()
        self[xproto.PropertyNotifyEvent] = hooks.EventHooks()
        self[xproto.SelectionClearEvent] = hooks.EventHooks()
        self[xproto.SelectionRequestEvent] = hooks.EventHooks()
        self[xproto.SelectionNotifyEvent] = hooks.EventHooks()
        self[xproto.ColormapNotifyEvent] = hooks.EventHooks()
        self[xproto.ClientMessageEvent] = hooks.EventHooks()
        self[xproto.MappingNotifyEvent] = hooks.EventHooks()


* Mon 31 Mar 2014 10:44:16 PM JST
self[xproto.KeyPressEvent]
* Mon 31 Mar 2014 10:44:27 PM JST
self[xproto.KeyReleaseEvent]
* Mon 31 Mar 2014 10:44:36 PM JST
self[xproto.ButtonPressEvent]
* Mon 31 Mar 2014 10:44:43 PM JST
                              
* Mon 31 Mar 2014 10:44:46 PM JST
self._get_hook(xproto.ButtonReleaseEvent, hooks.ButtonReleaseHooks)
* Mon 31 Mar 2014 10:44:49 PM JST
self[xproto.ButtonReleaseEvent]
* Mon 31 Mar 2014 10:45:00 PM JST
self[xproto.MotionNotifyEvent]
* Mon 31 Mar 2014 10:45:06 PM JST
self._get_hook(xproto.EnterNotifyEvent)
* Mon 31 Mar 2014 10:45:08 PM JST
self._get_hook(xproto.LeaveNotifyEvent)
* Mon 31 Mar 2014 10:45:11 PM JST
self._get_hook(xproto.FocusInEvent)
* Mon 31 Mar 2014 10:45:13 PM JST
self._get_hook(xproto.FocusOutEvent)
* Mon 31 Mar 2014 10:45:15 PM JST
self._get_hook(xproto.KeymapNotifyEvent)
* Mon 31 Mar 2014 10:45:17 PM JST
self._get_hook(xproto.ExposeEvent)
* Mon 31 Mar 2014 10:45:19 PM JST
self._get_hook(xproto.GraphicsExposureEvent)
* Mon 31 Mar 2014 10:45:25 PM JST
self._get_hook(xproto.NoExposureEvent)
* Mon 31 Mar 2014 10:45:35 PM JST
 self._get_hook(xproto.VisibilityNotifyEvent)
* Mon 31 Mar 2014 10:45:37 PM JST
:
* Mon 31 Mar 2014 10:45:37 PM JST
 self._get_hook(xproto.CreateNotifyEvent)
* Mon 31 Mar 2014 10:45:38 PM JST
:
* Mon 31 Mar 2014 10:45:39 PM JST
 self._get_hook(xproto.DestroyNotifyEvent)
* Mon 31 Mar 2014 10:45:39 PM JST
:
* Mon 31 Mar 2014 10:45:40 PM JST
 self._get_hook(xproto.UnmapNotifyEvent)
* Mon 31 Mar 2014 10:45:40 PM JST
:
* Mon 31 Mar 2014 10:45:40 PM JST
 self._get_hook(xproto.MapNotifyEvent)
* Mon 31 Mar 2014 10:45:40 PM JST
:
* Mon 31 Mar 2014 10:45:41 PM JST
 self._get_hook(xproto.ReparentNotifyEvent)
* Mon 31 Mar 2014 10:45:41 PM JST
:
* Mon 31 Mar 2014 10:45:41 PM JST
 self._get_hook(xproto.ConfigureNotifyEvent)
* Mon 31 Mar 2014 10:45:41 PM JST
:
* Mon 31 Mar 2014 10:45:42 PM JST
 self._get_hook(xproto.ConfigureRequestEvent)
* Mon 31 Mar 2014 10:45:42 PM JST
:
* Mon 31 Mar 2014 10:45:42 PM JST
 self._get_hook(xproto.GravityNotifyEvent)
* Mon 31 Mar 2014 10:45:42 PM JST
:
* Mon 31 Mar 2014 10:45:43 PM JST
 self._get_hook(xproto.ResizeRequestEvent)
* Mon 31 Mar 2014 10:45:43 PM JST
:
* Mon 31 Mar 2014 10:45:43 PM JST
 self._get_hook(xproto.CirculateNotifyEvent)
* Mon 31 Mar 2014 10:45:43 PM JST
:
* Mon 31 Mar 2014 10:45:44 PM JST
 self._get_hook(xproto.PropertyNotifyEvent)
* Mon 31 Mar 2014 10:45:44 PM JST
:
* Mon 31 Mar 2014 10:45:44 PM JST
 self._get_hook(xproto.SelectionClearEvent)
* Mon 31 Mar 2014 10:45:44 PM JST
:
* Mon 31 Mar 2014 10:45:45 PM JST
 self._get_hook(xproto.SelectionRequestEvent)
* Mon 31 Mar 2014 10:45:45 PM JST
:
* Mon 31 Mar 2014 10:45:45 PM JST
 self._get_hook(xproto.SelectionNotifyEvent)
* Mon 31 Mar 2014 10:45:45 PM JST
:
* Mon 31 Mar 2014 10:45:45 PM JST
 self._get_hook(xproto.ColormapNotifyEvent)
* Mon 31 Mar 2014 10:45:45 PM JST
:
* Mon 31 Mar 2014 10:45:45 PM JST
 self._get_hook(xproto.ClientMessageEvent)
* Mon 31 Mar 2014 10:45:46 PM JST
:
* Mon 31 Mar 2014 10:45:46 PM JST
 self._get_hook(xproto.MappingNotifyEvent)
* Mon 31 Mar 2014 10:46:12 PM JST
self[xproto.EnterNotifyEvent]
* Mon 31 Mar 2014 10:47:32 PM JST
self[xproto.LeaveNotifyEvent]
* Mon 31 Mar 2014 10:48:19 PM JST
self[xproto.FocusOutEvent]
* Mon 31 Mar 2014 10:48:39 PM JST
self[xproto.FocusOutEvent]
* Mon 31 Mar 2014 10:48:48 PM JST
self[xproto.KeymapNotifyEvent]
* Mon 31 Mar 2014 10:48:55 PM JST
self[xproto.ExposeEvent]
* Mon 31 Mar 2014 10:49:03 PM JST
self[xproto.GraphicsExposureEvent]
* Mon 31 Mar 2014 10:49:10 PM JST
self[xproto.NoExposureEvent]
* Mon 31 Mar 2014 10:49:16 PM JST
self[xproto.VisibilityNotifyEvent]
* Mon 31 Mar 2014 10:49:24 PM JST
self[xproto.CreateNotifyEvent]
* Mon 31 Mar 2014 10:49:32 PM JST
self[xproto.DestroyNotifyEvent]
* Mon 31 Mar 2014 10:49:38 PM JST
self[xproto.UnmapNotifyEvent]
* Mon 31 Mar 2014 10:49:45 PM JST
self[xproto.MapNotifyEvent]
* Mon 31 Mar 2014 10:49:53 PM JST
self[xproto.ReparentNotifyEvent]
* Mon 31 Mar 2014 10:49:57 PM JST
self[xproto.ConfigureNotifyEvent]
* Mon 31 Mar 2014 10:50:04 PM JST
self[xproto.ConfigureRequestEvent]
* Mon 31 Mar 2014 10:50:10 PM JST
self[xproto.GravityNotifyEvent]
* Mon 31 Mar 2014 10:50:16 PM JST
self[xproto.ResizeRequestEvent]
* Mon 31 Mar 2014 10:50:21 PM JST
self[xproto.CirculateNotifyEvent]
* Mon 31 Mar 2014 10:50:28 PM JST
self[xproto.PropertyNotifyEvent]
* Mon 31 Mar 2014 10:50:32 PM JST
self[xproto.SelectionClearEvent]
* Mon 31 Mar 2014 10:50:40 PM JST
self[xproto.SelectionRequestEvent]
* Mon 31 Mar 2014 10:50:45 PM JST
self[xproto.SelectionNotifyEvent]
* Mon 31 Mar 2014 10:50:51 PM JST
self[xproto.ColormapNotifyEvent]
* Mon 31 Mar 2014 10:50:58 PM JST
self[xproto.ClientMessageEvent]
* Mon 31 Mar 2014 10:51:04 PM JST
self[xproto.MappingNotifyEvent]