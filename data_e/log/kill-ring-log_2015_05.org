
* Fri 01 May 2015 12:22:40 PM JST
QueryTree
* Fri 01 May 2015 12:27:09 PM JST
get_wm_name
* Fri 01 May 2015 12:27:52 PM JST
query_tree
* Fri 01 May 2015 12:28:11 PM JST
query_tree()
* Fri 01 May 2015 12:28:17 PM JST
20971845
* Fri 01 May 2015 01:03:43 PM JST
from SimpleHTTPServer import SimpleHTTPRequestHandler
* Fri 01 May 2015 01:03:50 PM JST
SimpleHTTPRequestHandler
* Fri 01 May 2015 01:07:04 PM JST
    def log_message(self, format, *args):
        """Log an arbitrary message.

        This is used by all other logging functions.  Override
        it if you have specific logging wishes.

        The first argument, FORMAT, is a format string for the
        message to be logged.  If the format string contains
        any % escapes requiring parameters, they should be
        specified as subsequent arguments (it's just like
        printf!).

        The client ip address and current date/time are prefixed to every
        message.

        """

        sys.stderr.write("%s - - [%s] %s\n" %
                         (self.client_address[0],
                          self.log_date_time_string(),
                          format%args))

* Fri 01 May 2015 01:08:34 PM JST
self.client_address[0]
* Fri 01 May 2015 01:08:39 PM JST
self.log_date_time_string()
* Fri 01 May 2015 01:08:51 PM JST
format%args
* Fri 01 May 2015 01:11:21 PM JST
self.client_address[0]
* Fri 01 May 2015 01:11:24 PM JST
self.client_address[0]
* Fri 01 May 2015 01:11:30 PM JST
                                       
* Fri 01 May 2015 01:11:42 PM JST
ERROR
* Fri 01 May 2015 02:38:16 PM JST
get_net_wm_window_type
* Fri 01 May 2015 02:41:11 PM JST
20971846
* Fri 01 May 2015 04:29:33 PM JST
get_net_wm_window_type()
* Fri 01 May 2015 04:29:49 PM JST
20971845
* Fri 01 May 2015 05:01:55 PM JST
parent
* Fri 01 May 2015 05:04:44 PM JST
query_tree()
* Fri 01 May 2015 05:05:51 PM JST
type(
* Sun 03 May 2015 04:37:42 PM JST
from weathermap import weather_map
* Sun 03 May 2015 04:37:49 PM JST
weather2()
* Sun 03 May 2015 04:40:31 PM JST
google_chrome
* Sun 03 May 2015 04:41:36 PM JST
options, 
* Sun 03 May 2015 04:42:00 PM JST
import
* Sun 03 May 2015 04:49:08 PM JST
url,
* Sun 03 May 2015 04:50:18 PM JST
'"/opt/google/chrome/google-chrome {} {}"'.format(url, ' '.join(options))]
* Sun 03 May 2015 04:58:21 PM JST

* Sun 03 May 2015 04:58:21 PM JST

* Sun 03 May 2015 04:58:21 PM JST
from singledispatch import singledispatch

* Sun 03 May 2015 05:00:01 PM JST
['gksu', '-u', 'chromeuser', cmd]
* Sun 03 May 2015 05:02:10 PM JST

* Sun 03 May 2015 05:02:10 PM JST

* Sun 03 May 2015 05:02:10 PM JST
    sleep(100)

* Sun 03 May 2015 05:05:44 PM JST
return 
* Sun 03 May 2015 05:07:46 PM JST
{}
* Sun 03 May 2015 05:09:56 PM JST
http://weathernews.jp/pinpoint/cgi/search_result.fcgi?service=11&lat=35.0144938888889&lon=135.857546111111&ameno=60216&name=%e5%a4%a7%e6%b4%a5&pref=60
* Sun 03 May 2015 05:18:13 PM JST
['-u', 'chromeuser', '/opt/google/chrome/google-chrome "http://weathernews.jp/pinpoint/cgi/search_result.fcgi?service=11\\&lat=35.0144938888889&lon=135.857546111111\\&ameno=60216\\&name=%e5%a4%a7%e6%b4%a5&pref=60"']
* Sun 03 May 2015 05:21:01 PM JST
/opt/google/chrome/google-chrome
* Sun 03 May 2015 05:21:25 PM JST
['gksu', '-u', 'chromeuser', '/opt/google/chrome/google-chrome']
* Sun 03 May 2015 05:25:08 PM JST
, stdout=PIPE, stderr=PIPE
* Sun 03 May 2015 05:28:06 PM JST
            
* Sun 03 May 2015 05:34:04 PM JST
url, 
* Sun 03 May 2015 05:34:04 PM JST
        url, 
* Sun 03 May 2015 05:34:59 PM JST

* Sun 03 May 2015 05:34:59 PM JST

* Sun 03 May 2015 05:34:59 PM JST
    print(cmds)

* Sun 03 May 2015 05:35:00 PM JST

* Sun 03 May 2015 05:35:00 PM JST

* Sun 03 May 2015 05:35:00 PM JST
    # cmds.extend(options)

* Sun 03 May 2015 05:36:12 PM JST

* Sun 03 May 2015 05:36:12 PM JST

* Sun 03 May 2015 05:36:12 PM JST
    # raise ValueError('Must be String or List, url {}'.format(type(url)))

* Sun 03 May 2015 09:13:53 PM JST
is 
* Sun 03 May 2015 09:13:53 PM JST
url is 
* Sun 03 May 2015 09:41:50 PM JST
~/.pylib/mygoogle/chrome/
* Sun 03 May 2015 09:42:03 PM JST

* Sun 03 May 2015 09:42:03 PM JST

* Sun 03 May 2015 09:42:03 PM JST
LANG="en_US.UTF-8"

* Sun 03 May 2015 09:49:06 PM JST

* Sun 03 May 2015 09:49:09 PM JST
or 
* Sun 03 May 2015 09:49:09 PM JST
get_launcher_options() or 
* Sun 03 May 2015 10:37:26 PM JST
sh.google_chrome(url, options, _bg=True)
* Mon 04 May 2015 03:42:55 PM JST
WindowManager
* Mon 04 May 2015 03:44:29 PM JST
class WindowManager(EventDispatcher):
    """Class WindowManager
    """
    # Attributes:
    window = None  # (Window) 
    __observers = None  # (list) 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def find_window(self, spec):
        """function find_window
        
        spec: WindowSpec
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_active_window(self):
        """function get_active_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __destroy_window(self, event):
        """function destroy_window
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __create_window(self, event):
        """function create_window
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __reparent_window(self, event):
        """function reparent_window
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Mon 04 May 2015 03:46:37 PM JST
self
* Mon 04 May 2015 03:47:33 PM JST
from _xahk.display import get_display
* Mon 04 May 2015 03:51:31 PM JST
class Window:
    """Class Window
    """
    # Attributes:
    display = None  # () 
    id = None  # (int) 
    children = None  # (list) 
    parent = None  # () 
    __observers = None  # () 
    __handler = None  # () 
    __is_listening = None  # () 
    
    # Operations
    def get_id(self):
        """function get_id
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def get_name(self):
        """function get_name
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_wmclass(self):
        """function get_wmclass
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_pid(self):
        """function get_pid
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_type(self):
        """function get_type
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_child(self, window):
        """function add_child
        
        window: Window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_child(self, window):
        """function remove_child
        
        window: Window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_children(self):
        """function list_children
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def set_bounds(self, bounds):
        """function set_bounds
        
        bounds: Rect
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_bounds(self):
        """function get_bounds
        
        returns Rect
        """
        return None # should raise NotImplementedError()
    
    def on_event(self, event):
        """function on_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_listening(self):
        """function start_listening
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def stop_listening(self):
        """function stop_listening
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_listening(self):
        """function is_listening
        
        returns bool
        """
        return None # should raise NotImplementedError()
    


* Mon 04 May 2015 03:52:32 PM JST

* Mon 04 May 2015 03:52:32 PM JST

* Mon 04 May 2015 03:52:33 PM JST
    display = None  # () 

* Mon 04 May 2015 03:53:03 PM JST
None  # () 
* Mon 04 May 2015 03:53:27 PM JST
  # () 
* Mon 04 May 2015 03:53:29 PM JST
  # () 
* Mon 04 May 2015 03:53:30 PM JST
Nonel
* Mon 04 May 2015 03:53:38 PM JST
None # should raise NotImplementedError()
* Mon 04 May 2015 04:05:41 PM JST
False, )
* Mon 04 May 2015 04:05:42 PM JST
GetProperty(False, )
* Mon 04 May 2015 04:08:15 PM JST
'_NET_WM_NAME'
* Mon 04 May 2015 04:08:37 PM JST
self._display.core.InternAtom(
            True, len(wm_name), wm_name).reply().atom
* Mon 04 May 2015 04:17:53 PM JST
        name = self._display.core.GetProperty(
            False, self.id, net_wm_name_atom,
            self._display.core.InternAtom(True, 'STRING').reply().atom, 0, 10)

* Mon 04 May 2015 04:19:07 PM JST
UTF8STRING
* Mon 04 May 2015 04:19:14 PM JST
return None # should raise NotImplementedError()
* Mon 04 May 2015 04:19:16 PM JST
name
* Mon 04 May 2015 04:19:17 PM JST
return name
* Mon 04 May 2015 04:19:19 PM JST
name = 
* Mon 04 May 2015 04:19:59 PM JST
self._display.core.GetProperty(
            False, self.id, net_wm_name_atom,
            self._display.core.InternAtom(True, 'STRING').reply().atom, 0, 10).reply().value
* Mon 04 May 2015 04:20:19 PM JST
self._display.core.GetProperty(
            False, self.id, wm_name_atom,
            self._display.core.InternAtom(True, 'UTF8STRING').reply().atom, 0, 10)
* Mon 04 May 2015 04:20:39 PM JST
c.core.InternAtom(True, len('WM_NAME'), 'WM_NAME').reply().atom
* Mon 04 May 2015 04:21:27 PM JST
title
* Mon 04 May 2015 04:21:30 PM JST
56623126
* Mon 04 May 2015 04:24:00 PM JST
value
* Mon 04 May 2015 04:24:43 PM JST
bytes_after
* Mon 04 May 2015 04:25:50 PM JST
56623126
* Mon 04 May 2015 04:26:10 PM JST
'STRING'
* Mon 04 May 2015 04:26:42 PM JST
'UTF8STRING'
* Mon 04 May 2015 04:27:10 PM JST
'UTF8STRING'
* Mon 04 May 2015 04:27:13 PM JST
'STRING'
* Mon 04 May 2015 04:27:18 PM JST
'UTF8STRING'
* Mon 04 May 2015 04:27:23 PM JST
'STRING'
* Mon 04 May 2015 04:28:31 PM JST

* Mon 04 May 2015 04:28:31 PM JST

* Mon 04 May 2015 04:28:32 PM JST

* Mon 04 May 2015 04:28:34 PM JST

* Mon 04 May 2015 04:28:34 PM JST

* Mon 04 May 2015 04:28:34 PM JST
            print('_net')

* Mon 04 May 2015 04:34:06 PM JST
net_wm_name
* Mon 04 May 2015 04:34:46 PM JST
wm_
* Mon 04 May 2015 04:35:38 PM JST
            
* Mon 04 May 2015 04:40:54 PM JST
None # should raise NotImplementedError()
* Mon 04 May 2015 04:44:04 PM JST
prop
* Mon 04 May 2015 04:46:04 PM JST
CARDINAL
* Mon 04 May 2015 04:47:24 PM JST
wm_class_atom
* Mon 04 May 2015 04:48:17 PM JST
None # should raise NotImplementedError()
* Mon 04 May 2015 04:50:22 PM JST
int(w.get_pid(), 16)
* Mon 04 May 2015 04:50:27 PM JST
w.get_pid()
* Mon 04 May 2015 04:51:29 PM JST
w.get_pid()
* Mon 04 May 2015 04:53:03 PM JST
unpack('I', 
* Mon 04 May 2015 05:22:05 PM JST
'_NET_WM_WINDOW_TYPE'
* Mon 04 May 2015 05:24:53 PM JST
None # should raise NotImplementedError()
* Mon 04 May 2015 05:25:24 PM JST
prop
* Mon 04 May 2015 05:26:50 PM JST
None # should raise NotImplementedError()
* Mon 04 May 2015 05:28:24 PM JST
56623126
* Mon 04 May 2015 05:29:15 PM JST
self.
* Mon 04 May 2015 05:30:40 PM JST
d c.core.QueryTree(56623126).reply()
* Mon 04 May 2015 05:30:46 PM JST
w=window.Window(c, 56623126)
* Mon 04 May 2015 05:31:37 PM JST
proeprty
* Mon 04 May 2015 05:32:11 PM JST
return None # should raise NotImplementedError()
* Mon 04 May 2015 05:32:12 PM JST
return None # should raise NotImplementedError()
* Mon 04 May 2015 05:32:14 PM JST
f
* Mon 04 May 2015 05:32:14 PM JST
sle.f
* Mon 04 May 2015 05:32:25 PM JST
return None # should raise NotImplementedError()
* Mon 04 May 2015 05:32:33 PM JST
return None # should raise NotImplementedError()
* Mon 04 May 2015 05:33:03 PM JST
    
* Mon 04 May 2015 05:33:04 PM JST
                         
* Mon 04 May 2015 05:33:05 PM JST
 
* Mon 04 May 2015 05:33:22 PM JST
name
* Mon 04 May 2015 05:34:55 PM JST

* Mon 04 May 2015 05:34:55 PM JST

* Mon 04 May 2015 05:34:57 PM JST

* Mon 04 May 2015 05:34:58 PM JST

* Mon 04 May 2015 05:34:58 PM JST

* Mon 04 May 2015 05:34:58 PM JST
        print(prop)

* Mon 04 May 2015 05:35:02 PM JST
pid
* Mon 04 May 2015 05:35:17 PM JST
wmclass
* Mon 04 May 2015 05:35:58 PM JST
        if prop == '':
            return None

* Mon 04 May 2015 05:43:52 PM JST
class WindowEventDispatcher(EventDispatcher):
    """Class WindowEventDispatcher
    """
    # Attributes:
    __windows = None  # (map) 
    __observers = None  # (list) 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def register_window(self, listener):
        """function register_window
        
        listener: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def unregister_window(self, listener):
        """function unregister_window
        
        listener: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_observer(self, observer):
        """function add_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_observer(self, observer):
        """function remove_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Mon 04 May 2015 05:44:39 PM JST
56623126
* Mon 04 May 2015 05:47:23 PM JST
wmclass
* Tue 05 May 2015 06:37:01 AM JST
# (map) 
* Tue 05 May 2015 06:37:03 AM JST
None  # (map) 
* Tue 05 May 2015 06:37:05 AM JST
None  # (list) 
* Tue 05 May 2015 06:37:13 AM JST
selfl
* Tue 05 May 2015 06:37:55 AM JST
self
* Tue 05 May 2015 06:38:18 AM JST
None # should raise NotImplementedError()
* Tue 05 May 2015 06:38:57 AM JST
xahk/
* Tue 05 May 2015 06:39:58 AM JST
KeyPressEvent
* Tue 05 May 2015 06:40:11 AM JST
KeyPressEvent
* Tue 05 May 2015 06:40:14 AM JST
xproto
* Tue 05 May 2015 06:40:25 AM JST

* Tue 05 May 2015 06:40:25 AM JST

* Tue 05 May 2015 06:40:25 AM JST
        return None # should raise NotImplementedError()

* Tue 05 May 2015 06:40:36 AM JST
KeyPre
* Tue 05 May 2015 06:42:14 AM JST
ExposeEvent
* Tue 05 May 2015 06:42:29 AM JST
GraphicsExposureEvent
* Tue 05 May 2015 06:42:39 AM JST
NoExposureEvent
* Tue 05 May 2015 06:42:46 AM JST
VisibilityNotifyEvent
* Tue 05 May 2015 06:43:01 AM JST
CreateNotifyEvent
* Tue 05 May 2015 06:43:19 AM JST
DestroyNotifyEvent
* Tue 05 May 2015 06:43:34 AM JST
UnmapNotifyEvent
* Tue 05 May 2015 06:43:53 AM JST
MapRequestEvent
* Tue 05 May 2015 06:44:00 AM JST
ReparentNotifyEvent
* Tue 05 May 2015 06:44:08 AM JST
ConfigureNotifyEvent
* Tue 05 May 2015 06:44:24 AM JST
ConfigureRequestEvent
* Tue 05 May 2015 06:44:32 AM JST
GravityNotifyEvent
* Tue 05 May 2015 06:44:43 AM JST
CirculateBase
* Tue 05 May 2015 06:44:49 AM JST
CirculateNotifyEvent
* Tue 05 May 2015 06:44:57 AM JST
CirculateRequestEvent
* Tue 05 May 2015 06:45:03 AM JST
PropertyNotifyEvent
* Tue 05 May 2015 06:45:22 AM JST
ColormapNotifyEvent
* Tue 05 May 2015 06:45:34 AM JST
ClientMessageEvent
* Tue 05 May 2015 06:46:19 AM JST
SelectionClearEvent
* Tue 05 May 2015 06:46:26 AM JST
SelectionRequestEvent
* Tue 05 May 2015 03:36:05 PM JST
find
* Tue 05 May 2015 03:38:52 PM JST
                                  xproto.ExposeEvent,
                                  xproto.GraphicsExposureEvent,
                                  xproto.NoExposureEvent,
                                  xproto.VisibilityNotifyEvent,
                                  # xproto.CreateNotifyEvent,
                                  # xproto.DestroyNotifyEvent,
                                  # xproto.ReparentNotifyEvent,
                                  xproto.UnmapNotifyEvent,
                                  xproto.MapNotifyEvent,
                                  xproto.MapRequestEvent,
                                  xproto.ConfigureNotifyEvent,
                                  xproto.ConfigureRequestEvent,
                                  xproto.GravityNotifyEvent,
                                  xproto.CirculateNotifyEvent,
                                  xproto.CirculateRequestEvent,
                                  xproto.PropertyNotifyEvent,
                                  xproto.ColormapNotifyEvent,
                                  xproto.ClientMessageEvent,
                                  xproto.SelectionClearEvent,
                                  xproto.SelectionRequestEvent,

* Tue 05 May 2015 03:39:11 PM JST
xproto.ExposeEvent,
* Tue 05 May 2015 03:39:34 PM JST
xproto.VisibilityNotifyEvent,
* Tue 05 May 2015 03:39:57 PM JST
                                  xproto.UnmapNotifyEvent,
                                  xproto.MapNotifyEvent,

* Tue 05 May 2015 03:40:14 PM JST
xproto.MapRequestEvent,
* Tue 05 May 2015 03:40:16 PM JST

* Tue 05 May 2015 03:40:16 PM JST

* Tue 05 May 2015 03:40:16 PM JST
                                  xproto.MapRequestEvent,

* Tue 05 May 2015 03:40:33 PM JST
xproto.ConfigureNotifyEvent,
* Tue 05 May 2015 03:40:44 PM JST
xproto.ConfigureRequestEvent,
* Tue 05 May 2015 03:41:04 PM JST

* Tue 05 May 2015 03:41:04 PM JST

* Tue 05 May 2015 03:41:04 PM JST
                                  xproto.GravityNotifyEvent,

* Tue 05 May 2015 03:41:30 PM JST

* Tue 05 May 2015 03:41:30 PM JST

* Tue 05 May 2015 03:41:30 PM JST
                                  xproto.CirculateNotifyEvent,

* Tue 05 May 2015 03:41:50 PM JST

* Tue 05 May 2015 03:41:50 PM JST

* Tue 05 May 2015 03:41:50 PM JST
                                  xproto.CirculateRequestEvent,

* Tue 05 May 2015 03:42:05 PM JST

* Tue 05 May 2015 03:42:05 PM JST

* Tue 05 May 2015 03:42:05 PM JST
                                  xproto.PropertyNotifyEvent,

* Tue 05 May 2015 03:42:16 PM JST

* Tue 05 May 2015 03:42:16 PM JST

* Tue 05 May 2015 03:42:16 PM JST
                                  xproto.ColormapNotifyEvent,

* Tue 05 May 2015 03:42:26 PM JST

* Tue 05 May 2015 03:42:26 PM JST

* Tue 05 May 2015 03:42:26 PM JST
                                  xproto.ClientMessageEvent,

* Tue 05 May 2015 03:43:09 PM JST
xproto.GraphicsExposureEvent,
* Tue 05 May 2015 03:43:16 PM JST
xproto.NoExposureEvent,
* Tue 05 May 2015 03:43:20 PM JST
                          
* Tue 05 May 2015 03:44:22 PM JST
    xproto.SelectionClearEvent,
                                  xproto.SelectionRequestEvent,
    
* Tue 05 May 2015 03:44:31 PM JST
     
* Tue 05 May 2015 03:45:02 PM JST
                        # xproto.CreateNotifyEvent,
                                  # xproto.DestroyNotifyEvent,
                                  # xproto.ReparentNotifyEvent,

* Tue 05 May 2015 03:45:10 PM JST
    
* Tue 05 May 2015 03:47:01 PM JST
None # should raise NotImplementedError()
* Tue 05 May 2015 03:47:38 PM JST
listener
* Tue 05 May 2015 03:47:45 PM JST
return None # should raise NotImplementedError()
* Tue 05 May 2015 03:48:01 PM JST
window
* Tue 05 May 2015 03:48:19 PM JST
listener
* Tue 05 May 2015 03:48:49 PM JST
f_
* Tue 05 May 2015 03:49:14 PM JST
return None # should raise NotImplementedError()
* Tue 05 May 2015 03:49:33 PM JST
window.get_id() 
* Tue 05 May 2015 03:49:45 PM JST
return None # should raise NotImplementedError()
* Tue 05 May 2015 03:49:55 PM JST
return None # should raise NotImplementedError()
* Tue 05 May 2015 03:53:38 PM JST
form 
* Tue 05 May 2015 03:53:57 PM JST
WindowEventDispatcher
* Tue 05 May 2015 03:54:44 PM JST
return None # should raise NotImplementedError()
* Tue 05 May 2015 03:55:00 PM JST
WindowEventDispatcher.get_instance()
* Tue 05 May 2015 03:55:19 PM JST
WindowEventDispatcher.get_instance().register_window(self)
* Tue 05 May 2015 03:57:48 PM JST
return None # should raise NotImplementedError()
* Tue 05 May 2015 04:30:12 PM JST
from _xahk.window_event_dispatcher import WindowEventDispatcher
* Tue 05 May 2015 04:30:17 PM JST
WindowEventDispatcher
* Tue 05 May 2015 04:35:10 PM JST

* Tue 05 May 2015 04:35:10 PM JST

* Tue 05 May 2015 04:35:10 PM JST
    __observers = None  # (list)

* Tue 05 May 2015 04:35:18 PM JST
None # should raise NotImplementedError()
* Tue 05 May 2015 04:37:17 PM JST
None # should raise NotImplementedError()
* Tue 05 May 2015 04:39:29 PM JST
return None # should raise NotImplementedError()
* Tue 05 May 2015 04:46:35 PM JST
from _xahk.windowspec._windowspec import WindowSpec
* Tue 05 May 2015 04:54:42 PM JST
ListDotAvoider
* Tue 05 May 2015 04:54:58 PM JST
from dotavoider import ListDotAvoider
* Tue 05 May 2015 04:55:02 PM JST
ListDotAvoider
* Tue 05 May 2015 05:00:38 PM JST

* Tue 05 May 2015 05:00:38 PM JST

* Tue 05 May 2015 05:00:38 PM JST
        result, append = ListDotAvoider().append

* Tue 05 May 2015 05:00:40 PM JST
None # should raise NotImplementedError()
* Tue 05 May 2015 05:01:59 PM JST
WindowID
* Tue 05 May 2015 05:03:15 PM JST
        def find_window_internal(self, window, winspec):
            result = []
            for win in window.list_children():
                result.extend(find_window_internal(win, winspec))
                if winspec.is_satisfied(win):
                    result.append(win)
            return result

* Tue 05 May 2015 05:04:21 PM JST
find_window(win, spec)
* Tue 05 May 2015 05:04:49 PM JST
self, 
* Tue 05 May 2015 05:04:55 PM JST
find_window(win, spec)
* Tue 05 May 2015 05:04:58 PM JST

* Tue 05 May 2015 05:04:58 PM JST

* Tue 05 May 2015 05:04:59 PM JST
        children = 

* Tue 05 May 2015 05:05:31 PM JST
append
* Tue 05 May 2015 05:05:51 PM JST
result.
* Tue 05 May 2015 05:05:54 PM JST
result.
* Tue 05 May 2015 05:08:31 PM JST
window_id_spec
* Tue 05 May 2015 05:10:09 PM JST
get_title()
* Tue 05 May 2015 05:10:28 PM JST
title
* Tue 05 May 2015 05:10:30 PM JST
56623126L
* Tue 05 May 2015 05:10:32 PM JST
56623126
* Tue 05 May 2015 05:11:18 PM JST
name
* Tue 05 May 2015 05:11:32 PM JST
'qBittorrent v2.9.8'
* Tue 05 May 2015 05:12:52 PM JST
WindowTitleSpec
* Tue 05 May 2015 05:13:57 PM JST
'xfce4-panel'
* Tue 05 May 2015 05:16:46 PM JST
ListDotAvoider
* Tue 05 May 2015 05:16:59 PM JST

* Tue 05 May 2015 05:16:59 PM JST

* Tue 05 May 2015 05:16:59 PM JST
            self.__typecheck(attr)

* Tue 05 May 2015 05:17:22 PM JST
extend
* Tue 05 May 2015 05:17:37 PM JST

* Tue 05 May 2015 05:17:37 PM JST

* Tue 05 May 2015 05:17:37 PM JST
    append = result.append

* Tue 05 May 2015 05:18:23 PM JST
evnet.
* Tue 05 May 2015 05:18:24 PM JST
window = evnet.
* Tue 05 May 2015 05:18:54 PM JST
window = 
* Tue 05 May 2015 05:19:05 PM JST
windows = 
* Tue 05 May 2015 05:20:31 PM JST
window
* Tue 05 May 2015 05:21:45 PM JST

* Tue 05 May 2015 05:21:45 PM JST

* Tue 05 May 2015 05:21:45 PM JST
        return None # should raise NotImplementedError()

* Tue 05 May 2015 05:30:43 PM JST
    def _create_window(self, event):
        """function create_window

        event:

        returns
        """
        windows = self.find_window(WindowIDSpec(event.parent))
        if not windows:
            # TODO: (Atami) [2015/05/05]
            raise StandardError('no parent')
        windows[0].add_child(Window(self._display, event.window))


* Tue 05 May 2015 05:33:13 PM JST
window
* Tue 05 May 2015 05:33:56 PM JST
raise
* Tue 05 May 2015 05:34:25 PM JST

* Tue 05 May 2015 05:34:25 PM JST

* Tue 05 May 2015 05:34:25 PM JST
        return None # should raise NotImplementedError()

* Tue 05 May 2015 05:40:58 PM JST
window
* Tue 05 May 2015 05:41:03 PM JST
window
* Tue 05 May 2015 05:41:07 PM JST
window
* Tue 05 May 2015 05:46:39 PM JST
0]
* Tue 05 May 2015 05:46:39 PM JST
windows[0]
* Tue 05 May 2015 05:52:16 PM JST
return None # should raise NotImplementedError()
* Tue 05 May 2015 06:04:26 PM JST
del
* Tue 05 May 2015 06:04:29 PM JST
del
* Tue 05 May 2015 06:04:32 PM JST
del
* Tue 05 May 2015 06:04:36 PM JST
del
* Tue 05 May 2015 06:07:13 PM JST
EventLoop.get_instance().add_event_dispatcher(self)
* Tue 05 May 2015 06:13:59 PM JST
WindowManager
* Tue 05 May 2015 06:14:00 PM JST
wm=WindowManager
* Tue 05 May 2015 06:14:03 PM JST
xcb
* Tue 05 May 2015 06:14:04 PM JST
from xcb
* Tue 05 May 2015 06:14:09 PM JST
xproto
* Tue 05 May 2015 06:16:56 PM JST
from _xahk.windowmanager import WindowManager
* Tue 05 May 2015 06:17:19 PM JST
wm=WindowManager(c)
* Tue 05 May 2015 06:17:20 PM JST
from _xahk.eventloop import EventLoop
* Tue 05 May 2015 06:17:24 PM JST
wm=WindowManager(c)
* Tue 05 May 2015 06:17:34 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop

* Tue 05 May 2015 06:17:43 PM JST
wm=WindowManager(c)
* Tue 05 May 2015 06:21:25 PM JST
event.parent
* Tue 05 May 2015 06:24:44 PM JST
event.window
* Tue 05 May 2015 06:25:35 PM JST
while 1:
        loop.dispatch_event()

* Tue 05 May 2015 06:25:47 PM JST
c=get_display()
* Tue 05 May 2015 06:25:55 PM JST
loop=EventLoop.get_instance()
* Tue 05 May 2015 06:26:06 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
c=get_display()
wm=WindowManager(c)
loop=EventLoop.get_instance()

* Tue 05 May 2015 06:26:10 PM JST
while 1:
    loop.dispatch_event()

* Tue 05 May 2015 06:38:49 PM JST
display.core.QueryTree(windowid).reply().children
* Tue 05 May 2015 06:40:39 PM JST
window.add_child(cls.create_with_subwindow(wid))
* Tue 05 May 2015 06:43:17 PM JST
Window
* Tue 05 May 2015 06:43:19 PM JST
Window
* Tue 05 May 2015 06:43:23 PM JST
window
* Tue 05 May 2015 06:44:07 PM JST
create_with_subwindow
* Tue 05 May 2015 06:44:07 PM JST
Window.create_with_subwindow
* Tue 05 May 2015 06:47:34 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
c=get_display()
wm=WindowManager(c)
loop=EventLoop.get_instance()

* Tue 05 May 2015 06:47:37 PM JST
while 1:
    loop.dispatch_event()

* Tue 05 May 2015 06:54:22 PM JST
event.
* Tue 05 May 2015 06:54:37 PM JST
event
* Tue 05 May 2015 06:55:44 PM JST

* Tue 05 May 2015 06:55:44 PM JST

* Tue 05 May 2015 06:55:44 PM JST
        print(event.parent)

* Tue 05 May 2015 06:55:44 PM JST

* Tue 05 May 2015 06:55:44 PM JST

* Tue 05 May 2015 06:55:45 PM JST
        print(event.window)

* Wed 06 May 2015 04:22:37 AM JST
on_reparent
* Wed 06 May 2015 04:33:29 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
c=get_display()
wm=WindowManager(c)
loop=EventLoop.get_instance()

* Wed 06 May 2015 04:33:34 AM JST
while 1:
    loop.dispatch_event()

* Wed 06 May 2015 04:34:54 AM JST
debug=
* Wed 06 May 2015 04:35:06 AM JST
DebugWindowManagerObserver
* Wed 06 May 2015 04:35:13 AM JST
wm.add_observer(DebugWindowManagerObserver())
* Wed 06 May 2015 04:35:19 AM JST
from _xahk.window_manager_observer import DebugWindowManagerObserver
* Wed 06 May 2015 10:06:28 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()

* Wed 06 May 2015 10:06:32 AM JST
while 1:
    loop.dispatch_event()

* Wed 06 May 2015 10:09:31 AM JST
39846274
* Wed 06 May 2015 10:18:34 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()

* Wed 06 May 2015 10:18:38 AM JST
while 1:
    loop.dispatch_event()

* Wed 06 May 2015 10:19:16 AM JST
39846282
* Wed 06 May 2015 10:22:05 AM JST
39846290
* Wed 06 May 2015 10:26:14 AM JST
from _xahk.windowspec.window_id_spec import WindowIDSpec
* Wed 06 May 2015 10:26:20 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()

* Wed 06 May 2015 10:26:25 AM JST
while 1:
    loop.dispatch_event()

* Wed 06 May 2015 10:26:48 AM JST
39846298
* Wed 06 May 2015 10:29:13 AM JST
20971930)
* Wed 06 May 2015 10:29:14 AM JST
index(20971930)
* Wed 06 May 2015 10:29:25 AM JST
[w.get_id() for w in 
* Wed 06 May 2015 10:29:59 AM JST
[w.get_id() for w in 
* Wed 06 May 2015 10:30:07 AM JST
get_id()
* Wed 06 May 2015 10:31:28 AM JST
[w.get_id() for w in 
* Wed 06 May 2015 10:33:24 AM JST
39845941
* Wed 06 May 2015 10:38:08 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec, WindowSpec

* Wed 06 May 2015 10:38:15 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec, WindowSpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()

* Wed 06 May 2015 10:39:35 AM JST
from _xahk.windowspec._windowspec import WindowSpec
* Wed 06 May 2015 10:40:06 AM JST
WindowSpec
* Wed 06 May 2015 10:40:09 AM JST

* Wed 06 May 2015 10:40:16 AM JST
from _xahk.windowspec.window_any_spec import WindowAnySpec
* Wed 06 May 2015 10:40:22 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()

* Wed 06 May 2015 10:42:53 AM JST
while 1:
    loop.dispatch_event()

* Wed 06 May 2015 10:43:13 AM JST
39846306
* Wed 06 May 2015 10:44:49 AM JST
            window = self.find_window(WindowIDSpec(event.window))[0]
            oldparent = window.get_parent()
            oldparent.remove_child(window)
            parent.add_child(window)

* Wed 06 May 2015 10:44:53 AM JST
            window = self.find_window(WindowIDSpec(event.window))[0]
            oldparent = window.get_parent()
            oldparent.remove_child(window)
            parent.add_child(window)

* Wed 06 May 2015 10:45:16 AM JST

* Wed 06 May 2015 10:45:16 AM JST

* Wed 06 May 2015 10:45:16 AM JST
            # 

* Wed 06 May 2015 10:47:24 AM JST

* Wed 06 May 2015 10:47:24 AM JST

* Wed 06 May 2015 10:47:24 AM JST
        window = self.find_window(WindowIDSpec(event.window))[0]

* Wed 06 May 2015 10:49:20 AM JST
self.find_window(WindowIDSpec(event.parent))[0]
* Wed 06 May 2015 10:49:26 AM JST
event
* Wed 06 May 2015 10:50:03 AM JST

* Wed 06 May 2015 10:50:03 AM JST

* Wed 06 May 2015 10:50:03 AM JST
            win = event.window

* Wed 06 May 2015 10:50:52 AM JST
        oldparent = window.get_parent()
        oldparent.remove_child(window)
        parent.add_child(window)

* Wed 06 May 2015 10:52:03 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()

* Wed 06 May 2015 10:52:07 AM JST
while 1:
    loop.dispatch_event()

* Wed 06 May 2015 10:53:15 AM JST
            oldparent = window.get_parent()
            oldparent.remove_child(window)
            parent.add_child(window)

* Wed 06 May 2015 11:00:39 AM JST

* Wed 06 May 2015 11:00:39 AM JST

* Wed 06 May 2015 11:00:39 AM JST
            window = self.find_window(WindowIDSpec(event.window))[0]

* Wed 06 May 2015 11:01:39 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec

* Wed 06 May 2015 11:01:43 AM JST
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()

* Wed 06 May 2015 11:01:48 AM JST
while 1:
    loop.dispatch_event()

* Wed 06 May 2015 11:02:44 AM JST

* Wed 06 May 2015 11:02:44 AM JST

* Wed 06 May 2015 11:02:44 AM JST
        parent.add_child(window)

* Wed 06 May 2015 11:03:29 AM JST
self.find_window(WindowIDSpec(event.parent))[0]
* Wed 06 May 2015 11:03:43 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()

* Wed 06 May 2015 11:03:49 AM JST
while 1:
    loop.dispatch_event()

* Wed 06 May 2015 11:05:19 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()

* Wed 06 May 2015 11:05:25 AM JST
while 1:
    loop.dispatch_event()


* Wed 06 May 2015 11:07:47 AM JST
parent
* Wed 06 May 2015 11:08:05 AM JST
parent.children
* Wed 06 May 2015 11:08:25 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()

* Wed 06 May 2015 11:08:30 AM JST
while 1:
    loop.dispatch_event()

* Wed 06 May 2015 11:11:12 AM JST
            
* Wed 06 May 2015 11:11:29 AM JST
hash()
* Wed 06 May 2015 11:11:37 AM JST
in 
* Wed 06 May 2015 11:11:38 AM JST
w in 
* Wed 06 May 2015 11:11:38 AM JST
for w in 
* Wed 06 May 2015 11:11:39 AM JST
w) for w in 
* Wed 06 May 2015 11:11:44 AM JST
print(parent.children)
* Wed 06 May 2015 11:12:01 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()

* Wed 06 May 2015 11:12:05 AM JST
while 1:
    loop.dispatch_event()

* Wed 06 May 2015 11:13:26 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 06 May 2015 11:16:40 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 06 May 2015 11:18:59 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 06 May 2015 11:28:30 AM JST

* Wed 06 May 2015 11:28:30 AM JST

* Wed 06 May 2015 11:28:30 AM JST
            print(windows)

* Wed 06 May 2015 03:53:25 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 06 May 2015 03:54:07 PM JST
create_with_subwindow
* Wed 06 May 2015 03:54:09 PM JST
            
* Wed 06 May 2015 03:54:35 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Wed 06 May 2015 03:58:06 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Wed 06 May 2015 03:59:16 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 06 May 2015 04:03:00 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 06 May 2015 04:06:06 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Wed 06 May 2015 04:20:21 PM JST
windows = self.find_window(WindowIDSpec(event.window))
* Wed 06 May 2015 04:20:29 PM JST
event.
* Wed 06 May 2015 04:21:15 PM JST
        parent = windows[0].get_parent()
        try:
            parent.remove_child(windows[0])

* Wed 06 May 2015 04:21:23 PM JST

* Wed 06 May 2015 04:21:23 PM JST

* Wed 06 May 2015 04:21:23 PM JST
        try:

* Wed 06 May 2015 04:23:29 PM JST
window
* Wed 06 May 2015 04:24:50 PM JST
        try:
            # FIXME: (Atami) [2015/05/06]
            parent = self.find_window(WindowIDSpec(event.parent))[0]
        except IndexError:
            print('Fixing..')
            reply = self._display.core.QueryTree(event.parent).reply()
            parent2 = self.find_window(WindowIDSpec(reply.parent))[0]
            parent2.add_child(Window.create_with_subwindow(
                self._display, event.parent, parent2))
            parent = self.find_window(WindowIDSpec(event.parent))[0]
            # print('window {}, parent {}'.format(event.window, event.parent))

* Wed 06 May 2015 04:26:44 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Wed 06 May 2015 04:29:05 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Wed 06 May 2015 04:29:33 PM JST
parent.children
* Wed 06 May 2015 04:29:49 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 06 May 2015 04:30:11 PM JST

* Wed 06 May 2015 04:30:11 PM JST

* Wed 06 May 2015 04:30:11 PM JST
        print('end')

* Wed 06 May 2015 04:30:13 PM JST

* Wed 06 May 2015 04:30:13 PM JST

* Wed 06 May 2015 04:30:13 PM JST
        # print('start')

* Wed 06 May 2015 04:33:59 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 06 May 2015 04:38:43 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 06 May 2015 04:41:18 PM JST

* Wed 06 May 2015 04:41:18 PM JST

* Wed 06 May 2015 04:41:18 PM JST
        if windows[0] in parent.children:

* Wed 06 May 2015 04:42:42 PM JST

* Wed 06 May 2015 04:42:42 PM JST

* Wed 06 May 2015 04:42:43 PM JST
            # print('window {}, parent {}'.format(event.window, event.parent))

* Wed 06 May 2015 04:43:00 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 06 May 2015 04:45:06 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 06 May 2015 04:45:47 PM JST
from _xahk.windowspec.window_any_spec import WindowAnySpec
* Wed 06 May 2015 04:46:33 PM JST
self.find_window(WindowAnySpec())
* Wed 06 May 2015 04:46:59 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 06 May 2015 04:51:11 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 06 May 2015 04:58:35 PM JST
list(
* Wed 06 May 2015 04:58:52 PM JST
name
* Wed 06 May 2015 05:00:34 PM JST
title
* Wed 06 May 2015 10:40:48 PM JST
wm.iter_wins()
* Wed 06 May 2015 10:48:11 PM JST
113246221
* Wed 06 May 2015 10:51:40 PM JST
113246268
* Wed 06 May 2015 10:52:08 PM JST
113246254
* Wed 06 May 2015 10:52:18 PM JST
113246274
* Wed 06 May 2015 11:54:14 PM JST
title
* Wed 06 May 2015 11:54:54 PM JST
81788932L
* Sat 09 May 2015 03:17:39 AM JST

* Sat 09 May 2015 03:17:40 AM JST

* Sat 09 May 2015 03:17:40 AM JST
        self._parent = parent

* Sat 09 May 2015 03:18:07 AM JST
            
* Sat 09 May 2015 03:19:09 AM JST

* Sat 09 May 2015 03:19:09 AM JST

* Sat 09 May 2015 03:19:09 AM JST
        print('* destroying')

* Sat 09 May 2015 04:28:55 PM JST
class AtomCache:
    """Class AtomCache
    """
    # Attributes:
    __cached_atoms = None  # (map) 
    __uncached_atoms_allowed = None  # (bool) 
    
    # Operations
    def get_atom(self, name):
        """function get_atom
        
        name: str
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def disallow_uncached_atoms(self):
        """function disallow_uncached_atoms
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sat 09 May 2015 04:30:18 PM JST

* Sat 09 May 2015 04:30:18 PM JST

* Sat 09 May 2015 04:30:18 PM JST
        self._names = names

* Sat 09 May 2015 04:30:31 PM JST
None  # (bool) 
* Sat 09 May 2015 04:30:35 PM JST
return None # should raise NotImplementedError()
* Sat 09 May 2015 04:34:13 PM JST
None  # (map) 
* Sat 09 May 2015 04:43:54 PM JST
return None # should raise NotImplementedError()
* Sat 09 May 2015 04:45:18 PM JST
 as AtomCache
* Sat 09 May 2015 04:45:21 PM JST
import
* Sat 09 May 2015 04:45:23 PM JST
from
* Sat 09 May 2015 04:46:38 PM JST
'_NET_WM_STATE'
* Sat 09 May 2015 04:47:12 PM JST
BITMAP
* Sat 09 May 2015 04:47:15 PM JST
STRING
* Sat 09 May 2015 04:47:24 PM JST
'_NET_WM_STATE_STICKY'
* Sat 09 May 2015 04:47:47 PM JST
'_NET_WM_STATE_SHADED'
* Sat 09 May 2015 04:49:05 PM JST
_
* Sat 09 May 2015 04:49:05 PM JST
form _
* Sat 09 May 2015 04:50:25 PM JST
KEY_ATOM_TO_CACHE
* Sat 09 May 2015 04:54:18 PM JST
56623126
* Sat 09 May 2015 04:54:36 PM JST
c.core.InternAtom(True, len('STRING'), 'STRING')
* Sat 09 May 2015 04:55:05 PM JST
c.core.InternAtom(True, len('WM_NAME'), 'WM_NAME').reply().atom
* Sat 09 May 2015 04:56:05 PM JST
/str 
* Sat 09 May 2015 04:58:08 PM JST
_cached_atoms
* Sat 09 May 2015 04:58:12 PM JST
_cached_atoms
* Sat 09 May 2015 04:58:44 PM JST
reply.
* Sat 09 May 2015 05:00:42 PM JST
buf()
* Sat 09 May 2015 05:00:42 PM JST
value.buf()
* Sat 09 May 2015 05:01:03 PM JST
bytes_after
* Sat 09 May 2015 05:03:19 PM JST
        reply = self._display.core.GetProperty(
            False, self.id, prop_atom, type_atom, 0, 20).reply()
        buf = str(reply.value.buf())

* Sat 09 May 2015 05:06:19 PM JST
'_NET_WM_NAME'
* Sat 09 May 2015 05:06:26 PM JST
'UTF8STRING'
* Sat 09 May 2015 05:07:07 PM JST
'WM_NAME'
* Sat 09 May 2015 05:07:11 PM JST
'STRING'
* Sat 09 May 2015 05:07:35 PM JST
56623126
* Sat 09 May 2015 05:08:30 PM JST
form 
* Sat 09 May 2015 05:08:55 PM JST
xcb
* Sat 09 May 2015 05:08:55 PM JST
from xcb
* Sat 09 May 2015 05:09:16 PM JST
56623126
* Sat 09 May 2015 05:11:10 PM JST
Proeprty
* Sat 09 May 2015 05:11:43 PM JST
proeprty
* Sat 09 May 2015 05:13:45 PM JST
56623126
* Sat 09 May 2015 05:13:55 PM JST
c.core.GetProperty(False, 56623126, c.core.InternAtom(True, len('WM_NAME'), 'WM_NAME').reply().atom, c.core.InternAtom(True, len('STRING'), 'STRING').reply().atom, 1, 4).reply().value.buf()
* Sat 09 May 2015 05:14:04 PM JST
buf()
* Sat 09 May 2015 05:14:04 PM JST
value.buf()
* Sat 09 May 2015 05:15:21 PM JST
c.core.GetProperty(False, 56623126, c.core.InternAtom(True, len('WM_NAME'), 'WM_NAME').reply().atom, c.core.InternAtom(True, len('STRING'), 'STRING').reply().atom, 1, 4).reply().bytes_after

* Sat 09 May 2015 05:15:26 PM JST
import xcb, xcb.xproto
c=xcb.connect()

* Sat 09 May 2015 05:15:56 PM JST
56623126
* Sat 09 May 2015 05:18:09 PM JST
reply.bytes_after
* Sat 09 May 2015 05:19:06 PM JST
import xcb, xcb.xproto
c=xcb.connect()

* Sat 09 May 2015 05:19:09 PM JST
_
* Sat 09 May 2015 05:19:09 PM JST
form _
* Sat 09 May 2015 05:19:26 PM JST
56623126
* Sat 09 May 2015 05:19:33 PM JST
from _xahk.window import Window
Window(c, 56623126)
w=Window(c, 56623126)

* Sat 09 May 2015 05:20:41 PM JST
c.core.GetProperty(False, 56623126, c.core.InternAtom(True, len('WM_NAME'), 'WM_NAME').reply().atom, c.core.InternAtom(True, len('STRING'), 'STRING').reply().atom, 1, 4).reply().bytes_after
* Sat 09 May 2015 05:20:56 PM JST
'_NET_WM_NAME'
* Sat 09 May 2015 05:21:07 PM JST
'UTF8STRING'
* Sat 09 May 2015 05:21:24 PM JST
bytes_after
* Sat 09 May 2015 05:21:43 PM JST
bytes_after
* Sat 09 May 2015 05:22:21 PM JST
buf())
* Sat 09 May 2015 05:22:22 PM JST
value.buf())
* Sat 09 May 2015 05:22:27 PM JST
str(
* Sat 09 May 2015 05:22:43 PM JST
proeprty
* Sat 09 May 2015 05:25:15 PM JST
bytes_after
* Sat 09 May 2015 05:30:03 PM JST
_NET_WM_NAME
* Sat 09 May 2015 05:33:25 PM JST
from _xahk.window import Window
Window(c, 56623126)
w=Window(c, 56623126)

* Sat 09 May 2015 05:33:31 PM JST
import xcb, xcb.xproto
c=xcb.connect()

* Sat 09 May 2015 05:33:34 PM JST
Window(c, 56623126)
w=Window(c, 56623126)

* Sat 09 May 2015 06:36:27 PM JST
'_NET_WM_NAME'
* Sat 09 May 2015 06:36:43 PM JST
'UTF8_STRING'
* Sat 09 May 2015 06:37:03 PM JST
'WM_NAME'
* Sat 09 May 2015 06:37:11 PM JST
'STRING'
* Sat 09 May 2015 06:57:55 PM JST
        reply = self._display.core.GetProperty(
            False, self.id, prop, types, offset, length).reply()
        buf = str(reply.value.buf())
        if 0 < reply.bytes_after:
            buf += self._get_property_internal(
                prop, types, length, reply.bytes_after)
        return buf

* Sat 09 May 2015 06:58:27 PM JST
                
* Sat 09 May 2015 06:59:37 PM JST
f
* Sat 09 May 2015 06:59:37 PM JST
sle.f
* Sat 09 May 2015 07:00:39 PM JST
'_NET_WM_PID'
* Sat 09 May 2015 07:00:46 PM JST
_aotm
* Sat 09 May 2015 07:01:18 PM JST
prop
* Sat 09 May 2015 07:01:45 PM JST
'_NET_WM_WINDOW_TYPE'
* Sat 09 May 2015 07:02:10 PM JST
    
* Sat 09 May 2015 07:02:29 PM JST
'_NET_WM_NAME')
* Sat 09 May 2015 07:02:31 PM JST
'_NET_WM_NAME'
* Sat 09 May 2015 07:02:44 PM JST
'UTF8_STRING'
* Sat 09 May 2015 07:02:54 PM JST
'WM_CLASS'
* Sat 09 May 2015 07:03:04 PM JST
'WM_NAME'
* Sat 09 May 2015 07:03:15 PM JST
'_NET_WM_PID'
* Sat 09 May 2015 07:03:24 PM JST
'CARDINAL'
* Sat 09 May 2015 07:03:36 PM JST
'_NET_WM_WINDOW_TYPE'
* Sat 09 May 2015 07:03:47 PM JST
'ATOM'
* Sat 09 May 2015 07:04:09 PM JST

* Sat 09 May 2015 07:04:09 PM JST

* Sat 09 May 2015 07:04:09 PM JST
                     'STRING',

* Sat 09 May 2015 07:04:12 PM JST

* Sat 09 May 2015 07:04:12 PM JST

* Sat 09 May 2015 07:04:12 PM JST
                     'CARDINAL',

* Sat 09 May 2015 07:04:16 PM JST

* Sat 09 May 2015 07:04:17 PM JST

* Sat 09 May 2015 07:04:17 PM JST
                     'UTF8_STRING',

* Sat 09 May 2015 07:04:21 PM JST

* Sat 09 May 2015 07:04:21 PM JST

* Sat 09 May 2015 07:04:21 PM JST
                     'CARDINAL',

* Sat 09 May 2015 07:04:26 PM JST

* Sat 09 May 2015 07:04:26 PM JST

* Sat 09 May 2015 07:04:26 PM JST
                     'WM_NAME',

* Sat 09 May 2015 07:05:18 PM JST
import xcb, xcb.xproto
c=xcb.connect()

from _xahk.window import Window
Window(c, 56623126)
w=Window(c, 56623126)

* Sat 09 May 2015 10:06:56 PM JST
_NET_CLIENT_LIST
* Sat 09 May 2015 10:13:31 PM JST
'_NET_CLIENT_LIST'
* Sat 09 May 2015 10:30:33 PM JST
'\x03\x00\xa0\x01\x04\x00\x80\x01\x19\x00\x80\x01\x04\x00\xc0\x02\x16\x00`\x03\xd9\x00\x00\x03\x01\x00\xe0\x03'
* Sat 09 May 2015 10:39:34 PM JST
56623126
* Sat 09 May 2015 10:39:45 PM JST
c.core.InternAtom(True, len('WM_NAME'), 'WM_NAME').reply().atom, c.core.InternAtom(True, len('STRING'), 'STRING').reply().atom
* Sat 09 May 2015 10:42:05 PM JST
buf += 
* Sat 09 May 2015 10:42:51 PM JST
get_result()
* Sat 09 May 2015 10:43:47 PM JST
    def get_atom(self, ):
        r"""SUMMARY

        get_atom()

        @Return:

        @Error:
        """
        return self._atom

    def catch_reply(self, reply):
        r"""SUMMARY

        catch_reply(reply)

        @Arguments:
        - `reply`:

        @Return:

        @Error:
        """
        self._result.extend(_unpack('I' * reply.value_len, reply.value.buf()))

    def get_result(self, ):
        r"""SUMMARY

        get_result()

        @Return:

        @Error:
        """
        return self._result

* Sat 09 May 2015 10:44:08 PM JST
value_len, 
* Sat 09 May 2015 10:44:09 PM JST
reply.value_len, 
* Sat 09 May 2015 10:44:09 PM JST
I' * reply.value_len, 
* Sat 09 May 2015 10:44:09 PM JST
_unpack('I' * reply.value_len, 
* Sat 09 May 2015 10:44:10 PM JST
extend(_unpack('I' * reply.value_len, 
* Sat 09 May 2015 10:44:20 PM JST
reply.value.buf()
* Sat 09 May 2015 10:44:45 PM JST
TypeString
* Sat 09 May 2015 10:45:05 PM JST
    
* Sat 09 May 2015 10:45:19 PM JST
TypeString(self._atom_cache.get_atom('UTF8_STRING'))
* Sat 09 May 2015 10:45:41 PM JST
            
* Sat 09 May 2015 10:45:42 PM JST
            
* Sat 09 May 2015 10:46:12 PM JST

* Sat 09 May 2015 10:46:12 PM JST

* Sat 09 May 2015 10:46:12 PM JST
        return types

* Sat 09 May 2015 10:46:28 PM JST
name = 
* Sat 09 May 2015 10:46:32 PM JST
name.
* Sat 09 May 2015 10:46:48 PM JST
types.get_result()
* Sat 09 May 2015 10:46:59 PM JST
types = TypeString(self._atom_cache.get_atom('UTF8_STRING'))
* Sat 09 May 2015 10:47:11 PM JST
'STRING'
* Sat 09 May 2015 10:47:24 PM JST
return 
* Sat 09 May 2015 10:47:25 PM JST
        
* Sat 09 May 2015 10:48:02 PM JST

* Sat 09 May 2015 10:48:02 PM JST

* Sat 09 May 2015 10:48:02 PM JST
Window(c, 56623126)

* Sat 09 May 2015 10:48:04 PM JST
import xcb, xcb.xproto
c=xcb.connect()

from _xahk.window import Window
w=Window(c, 56623126)

* Sat 09 May 2015 10:48:41 PM JST
self._atom_cache.get_atom('STRING')
* Sat 09 May 2015 10:48:48 PM JST
prop = 
* Sat 09 May 2015 10:48:49 PM JST
        
* Sat 09 May 2015 10:48:55 PM JST
prop
* Sat 09 May 2015 10:49:54 PM JST
self._atom_cache.get_atom('CARDINAL')
* Sat 09 May 2015 10:50:01 PM JST
                                 
* Sat 09 May 2015 10:50:04 PM JST
prop = 
* Sat 09 May 2015 10:50:09 PM JST
prop
* Sat 09 May 2015 10:50:56 PM JST
if not 
* Sat 09 May 2015 10:51:14 PM JST
types.get_result()
* Sat 09 May 2015 10:51:44 PM JST
self._atom_cache.get_atom('ATOM')
* Sat 09 May 2015 10:51:49 PM JST
            
* Sat 09 May 2015 10:51:50 PM JST
            
* Sat 09 May 2015 10:51:53 PM JST
prop = 
* Sat 09 May 2015 10:52:29 PM JST

* Sat 09 May 2015 10:52:29 PM JST

* Sat 09 May 2015 10:52:29 PM JST
        # buf = str(reply.value.buf())

* Sat 09 May 2015 10:54:27 PM JST
w=Window(c, 56623126)
* Sat 09 May 2015 10:54:32 PM JST
56623126
* Sat 09 May 2015 10:54:49 PM JST
get_property
* Sat 09 May 2015 10:54:50 PM JST
root.get_property
* Sat 09 May 2015 10:55:14 PM JST
Type32
* Sat 09 May 2015 10:55:34 PM JST
_NET_CLIENT_LIST
* Sat 09 May 2015 10:55:40 PM JST
'WINDOW'
* Sat 09 May 2015 10:58:00 PM JST
'_NET_CLIENT_LIST'
* Sat 09 May 2015 10:59:04 PM JST

* Sat 09 May 2015 10:59:04 PM JST

* Sat 09 May 2015 10:59:04 PM JST
        self._windows = []

* Sat 09 May 2015 10:59:07 PM JST

* Sat 09 May 2015 10:59:07 PM JST

* Sat 09 May 2015 10:59:07 PM JST
        self._observers = []

* Sat 09 May 2015 11:01:57 PM JST
        types = Type32(self._atom_cache.get_atom('WINDOW'))
        self._root.get_property(
            self._atom_cache.get_atom('_NET_CLIENT_LIST'), types)

* Sat 09 May 2015 11:02:08 PM JST
types.get_result()
* Sat 09 May 2015 11:04:08 PM JST
Window(self._display, event.window)
* Sat 09 May 2015 11:04:27 PM JST
            
* Sat 09 May 2015 11:08:02 PM JST
_
* Sat 09 May 2015 11:08:02 PM JST
slerf._
* Sat 09 May 2015 11:08:20 PM JST
self.
* Sat 09 May 2015 11:08:51 PM JST
self._windows
* Sat 09 May 2015 11:10:13 PM JST
65011713
* Sat 09 May 2015 11:14:11 PM JST
        window = self.find_window(WindowIDSpec(event.window))
        if not window:
            return
        self._windows.remove(window[0])
        del window[0]

* Sat 09 May 2015 11:14:23 PM JST
event.
* Sat 09 May 2015 11:15:37 PM JST
result = 
* Sat 09 May 2015 11:15:47 PM JST
notify
* Sun 10 May 2015 01:13:09 AM JST
[1].get_name()
* Sun 10 May 2015 01:13:45 AM JST
unicode(
* Sun 10 May 2015 01:14:23 AM JST
聖剣伝説
* Sun 10 May 2015 01:40:30 AM JST
_NET_ACTIVE_WINDOW
* Sun 10 May 2015 01:41:02 AM JST
        types = Type32(self._atom_cache.get_atom('WINDOW'))
        self._root.get_property(
            self._atom_cache.get_atom('_NET_CLIENT_LIST'), types)
        return types.get_result()

* Sun 10 May 2015 01:42:04 AM JST
types.get_result()[0]
* Sun 10 May 2015 01:42:35 AM JST
return
* Sun 10 May 2015 01:43:17 AM JST
not 
* Sun 10 May 2015 01:43:19 AM JST
None
* Sun 10 May 2015 01:44:05 AM JST
types.get_result()[0]
* Sun 10 May 2015 01:45:09 AM JST
    result, append, extend = ListDotAvoider().getattributes('append', 'extend')
    if spec.is_satisfied(window):
        append(window)

* Sun 10 May 2015 01:45:47 AM JST
find_window(self._windows, spec)
* Sun 10 May 2015 01:46:24 AM JST
extend 
* Sun 10 May 2015 01:46:28 AM JST
        
* Sun 10 May 2015 01:46:33 AM JST
getattributes('append')
* Sun 10 May 2015 01:46:52 AM JST

* Sun 10 May 2015 01:46:52 AM JST

* Sun 10 May 2015 01:46:52 AM JST
        print(types.get_result()[0])

* Sun 10 May 2015 01:48:08 AM JST
    def can_dispatch_event(self, event):
        """function can_dispatch_event

        event:

        returns
        """
        return isinstance(event, (xproto.CreateNotifyEvent,
                                  xproto.DestroyNotifyEvent,
                                  xproto.ReparentNotifyEvent
                                  ))

    def dispatch_event(self, event):
        """function dispatch_event

        event:

        returns
        """
        if isinstance(event, (xproto.CreateNotifyEvent, )):
            self._create_window(event)
        elif isinstance(event, (xproto.DestroyNotifyEvent, )):
            self._destroy_window(event)
        elif isinstance(event, (xproto.ReparentNotifyEvent, )):
            self._reparent_window(event)


* Sun 10 May 2015 01:58:45 AM JST
window
* Sun 10 May 2015 01:58:49 AM JST
window
* Sun 10 May 2015 01:58:55 AM JST
window
* Sun 10 May 2015 01:58:58 AM JST
window
* Sun 10 May 2015 02:04:30 AM JST
    def _client_windows(self, ):
        r"""SUMMARY

        _client_windows()

        @Return:

        @Error:
        """
        types = Type32(self._atom_cache.get_atom('WINDOW'))
        self._root.get_property(
            self._atom_cache.get_atom('_NET_CLIENT_LIST'), types)
        return types.get_result()


* Sun 10 May 2015 02:05:18 AM JST
    def __del__(self):
        """
        INTERNAL COMMENT
        Do not imprement `raise'!!
        """
        EventLoop.get_instance().remove_event_dispatcher(self)


* Sun 10 May 2015 02:05:43 AM JST
                                 
* Sun 10 May 2015 02:06:20 AM JST
 
* Sun 10 May 2015 02:06:22 AM JST
    
* Sun 10 May 2015 02:07:16 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec

* Sun 10 May 2015 02:07:28 AM JST
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()

* Sun 10 May 2015 02:08:10 AM JST
while 1:
    loop.dispatch_event()


* Sun 10 May 2015 02:09:38 AM JST
event.window
* Sun 10 May 2015 02:10:32 AM JST
self._client_windows()
* Sun 10 May 2015 02:14:35 AM JST
self._client_windows()
* Sun 10 May 2015 02:14:39 AM JST
self._client_windows()
* Sun 10 May 2015 02:17:26 AM JST
'_NET_CLIENT_LIST'
* Sun 10 May 2015 02:20:35 AM JST
PropertyNotify
* Sun 10 May 2015 02:20:36 AM JST
xproto
* Sun 10 May 2015 02:29:01 AM JST
GetWindowAttributes
* Sun 10 May 2015 02:30:40 AM JST
c.core.GetWindowAttributes(482).reply().all_event_masks
* Sun 10 May 2015 02:30:48 AM JST
xproto.EventMask.PropertyChange
* Sun 10 May 2015 02:31:22 AM JST

* Sun 10 May 2015 02:31:22 AM JST

* Sun 10 May 2015 02:31:22 AM JST
            print(event)

* Sun 10 May 2015 02:31:43 AM JST
xproto.PropertyNotif
* Sun 10 May 2015 02:31:44 AM JST
xproto.PropertyNotify
* Sun 10 May 2015 02:43:50 AM JST
SetWindowAttributes
* Sun 10 May 2015 02:44:01 AM JST
ChangeWindowAttributes
* Sun 10 May 2015 02:45:25 AM JST
your_event_mask
* Sun 10 May 2015 02:45:52 AM JST
all_event_masks
* Sun 10 May 2015 02:50:13 AM JST
56623126
* Sun 10 May 2015 02:56:27 AM JST
ChangeWindowAttributes
* Sun 10 May 2015 02:59:54 AM JST
c.core.GetWindowAttributes(482).reply().your_event_mask | xproto.EventMask.PropertyChange
* Sun 10 May 2015 03:00:27 AM JST
ChangeWindowAttributes
* Sun 10 May 2015 03:00:28 AM JST
core.ChangeWindowAttributes
* Sun 10 May 2015 03:00:28 AM JST
c.core.ChangeWindowAttributes
* Sun 10 May 2015 03:00:47 AM JST
56623126
* Sun 10 May 2015 03:05:14 AM JST
56623126
* Sun 10 May 2015 03:05:21 AM JST
(56623126, )
* Sun 10 May 2015 03:05:23 AM JST
Change
* Sun 10 May 2015 03:05:27 AM JST
Change
* Sun 10 May 2015 03:05:29 AM JST
56623126
* Sun 10 May 2015 03:05:47 AM JST
all_event_masks
* Sun 10 May 2015 03:06:09 AM JST
56623126
* Sun 10 May 2015 03:06:38 AM JST
Change
* Sun 10 May 2015 03:08:10 AM JST
56623126
* Sun 10 May 2015 03:08:35 AM JST
56623126
* Sun 10 May 2015 03:08:57 AM JST
524288
* Sun 10 May 2015 03:12:20 AM JST
PropertyChange
* Sun 10 May 2015 03:12:21 AM JST
EventMask.PropertyChange
* Sun 10 May 2015 03:12:21 AM JST
xproto.EventMask.PropertyChange
* Sun 10 May 2015 03:13:14 AM JST
'_NET_CLIENT_LIST'
* Sun 10 May 2015 03:13:18 AM JST
348
* Sun 10 May 2015 03:16:42 AM JST
'_NET_CLIENT_LIST'
* Sun 10 May 2015 03:17:45 AM JST

* Sun 10 May 2015 03:17:45 AM JST

* Sun 10 May 2015 03:17:45 AM JST
        eventmask

* Sun 10 May 2015 03:17:50 AM JST
display.get_setup().roots[0].root
* Sun 10 May 2015 03:18:29 AM JST

* Sun 10 May 2015 03:18:29 AM JST

* Sun 10 May 2015 03:18:29 AM JST
        self._net_wm_client_atom = self._atom_cache.get_atom('_NET_CLIENT_LIST')

* Sun 10 May 2015 03:20:00 AM JST
id
* Sun 10 May 2015 03:20:00 AM JST
self.id
* Sun 10 May 2015 03:21:53 AM JST
Change
* Sun 10 May 2015 03:22:21 AM JST
Property
* Sun 10 May 2015 03:22:48 AM JST
Change
* Sun 10 May 2015 03:24:00 AM JST
'_NET_CLIENT_LIST'
* Sun 10 May 2015 03:25:06 AM JST
            
* Sun 10 May 2015 03:25:38 AM JST
and 
* Sun 10 May 2015 03:30:01 AM JST
self._client_windows()
* Sun 10 May 2015 03:30:04 AM JST
_
* Sun 10 May 2015 03:30:06 AM JST
self.
* Sun 10 May 2015 03:30:15 AM JST
self._create_window(event)
* Sun 10 May 2015 03:31:05 AM JST
event
* Sun 10 May 2015 03:31:07 AM JST
event
* Sun 10 May 2015 03:33:10 AM JST
window
* Sun 10 May 2015 03:34:56 AM JST
_windows[]
* Sun 10 May 2015 03:34:57 AM JST
self._windows[]
* Sun 10 May 2015 03:36:04 AM JST
self.
* Sun 10 May 2015 03:36:57 AM JST
event
* Sun 10 May 2015 03:37:05 AM JST

* Sun 10 May 2015 03:37:05 AM JST

* Sun 10 May 2015 03:37:05 AM JST
        print('DEBUG-1-windowmanager.py')

* Sun 10 May 2015 03:37:10 AM JST
event.
* Sun 10 May 2015 03:37:34 AM JST

* Sun 10 May 2015 03:37:34 AM JST

* Sun 10 May 2015 03:37:34 AM JST
        event.window = window

* Sun 10 May 2015 03:37:35 AM JST
event
* Sun 10 May 2015 03:38:00 AM JST
event
* Sun 10 May 2015 03:38:04 AM JST
event
* Sun 10 May 2015 03:38:23 AM JST
even
* Sun 10 May 2015 03:38:28 AM JST
event.
* Sun 10 May 2015 03:38:46 AM JST

* Sun 10 May 2015 03:38:47 AM JST

* Sun 10 May 2015 03:38:47 AM JST
        if self._del_window(window):

* Sun 10 May 2015 03:38:55 AM JST
event
* Sun 10 May 2015 03:38:57 AM JST
            
* Sun 10 May 2015 03:40:00 AM JST

* Sun 10 May 2015 03:40:00 AM JST

* Sun 10 May 2015 03:40:00 AM JST
        print(self._client_windows())

* Sun 10 May 2015 03:40:46 AM JST
event
* Sun 10 May 2015 03:40:51 AM JST
event
* Sun 10 May 2015 03:41:04 AM JST
window
* Sun 10 May 2015 03:41:07 AM JST
event
* Sun 10 May 2015 03:41:23 AM JST
event
* Sun 10 May 2015 03:41:31 AM JST
event
* Sun 10 May 2015 03:41:35 AM JST
event
* Sun 10 May 2015 03:41:38 AM JST
event
* Sun 10 May 2015 03:41:57 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())

* Sun 10 May 2015 03:42:02 AM JST
loop=EventLoop.get_instance()

* Sun 10 May 2015 03:42:06 AM JST
while 1:
    loop.dispatch_event()


* Sun 10 May 2015 03:45:32 AM JST
self._display.core.GetWindowAttributes(
            root).reply().your_event_mask
* Sun 10 May 2015 03:45:40 AM JST
            
* Sun 10 May 2015 03:45:50 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)

* Sun 10 May 2015 03:45:58 AM JST
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()

* Sun 10 May 2015 03:46:03 AM JST
while 1:
    loop.dispatch_event()


* Sun 10 May 2015 03:48:03 AM JST
eventmask
* Sun 10 May 2015 03:48:17 AM JST

* Sun 10 May 2015 03:48:17 AM JST

* Sun 10 May 2015 03:48:17 AM JST
        self._display.flush()

* Sun 10 May 2015 03:48:31 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)

* Sun 10 May 2015 03:48:41 AM JST
wm.add_observer(DebugWindowManagerObserver())
* Sun 10 May 2015 03:48:46 AM JST
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Sun 10 May 2015 03:50:03 AM JST
c.core.ChangeWindowAttributes(482, )
* Sun 10 May 2015 03:54:31 AM JST
eventmask |
* Sun 10 May 2015 03:55:01 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)

* Sun 10 May 2015 03:55:10 AM JST
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Sun 10 May 2015 03:56:09 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)

* Sun 10 May 2015 03:57:47 AM JST

* Sun 10 May 2015 03:57:48 AM JST

* Sun 10 May 2015 03:57:48 AM JST
        EventLoop.get_instance().add_event_dispatcher(self)

* Sun 10 May 2015 03:57:56 AM JST

* Sun 10 May 2015 03:57:56 AM JST

* Sun 10 May 2015 03:57:56 AM JST
        print(root)

* Sun 10 May 2015 03:58:00 AM JST

* Sun 10 May 2015 03:58:00 AM JST

* Sun 10 May 2015 03:58:01 AM JST
        print(eventmask)

* Sun 10 May 2015 03:58:03 AM JST
eventmask
* Sun 10 May 2015 03:58:39 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)

* Sun 10 May 2015 03:58:45 AM JST
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Sun 10 May 2015 03:59:55 AM JST
# before change window attributes
* Sun 10 May 2015 04:02:00 AM JST

* Sun 10 May 2015 04:02:00 AM JST

* Sun 10 May 2015 04:02:00 AM JST
        print('DEBUG-7-windowmanager.py')

* Sun 10 May 2015 04:02:18 AM JST
client_windows
* Sun 10 May 2015 04:02:23 AM JST
client_windows
* Sun 10 May 2015 04:02:41 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Sun 10 May 2015 04:05:06 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Sun 10 May 2015 04:07:17 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Sun 10 May 2015 04:10:40 AM JST

* Sun 10 May 2015 04:10:40 AM JST

* Sun 10 May 2015 04:10:40 AM JST
        print('DEBUG-4-windowmanager.py')

* Sun 10 May 2015 04:19:21 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)

* Sun 10 May 2015 04:20:02 AM JST
wm_client_windows()
* Sun 10 May 2015 04:22:38 AM JST
self._client_windows()
* Sun 10 May 2015 04:22:51 AM JST
_
* Sun 10 May 2015 04:22:51 AM JST
self._
* Sun 10 May 2015 04:23:28 AM JST
_
* Sun 10 May 2015 04:23:28 AM JST
self._
* Sun 10 May 2015 04:24:00 AM JST
len(
* Sun 10 May 2015 04:27:53 AM JST
windows - 
* Sun 10 May 2015 04:28:38 AM JST
isadded
* Sun 10 May 2015 04:29:42 AM JST
_NET_CLIENT_LIST
* Sun 10 May 2015 04:31:53 AM JST
clients - windows
* Sun 10 May 2015 04:32:50 AM JST
list(clients - windows)
* Sun 10 May 2015 04:32:54 AM JST
# _NET_CLIENT_LIST added
* Sun 10 May 2015 04:32:57 AM JST

* Sun 10 May 2015 04:32:57 AM JST

* Sun 10 May 2015 04:32:57 AM JST
        added =  

* Sun 10 May 2015 04:33:52 AM JST
windows - clients
* Sun 10 May 2015 04:34:21 AM JST
# _NET_CLIENT_LIST removed
* Sun 10 May 2015 04:37:42 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Sun 10 May 2015 04:39:33 AM JST
window
* Sun 10 May 2015 04:41:41 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Sun 10 May 2015 04:49:38 AM JST
event
* Sun 10 May 2015 04:49:40 AM JST
event
* Sun 10 May 2015 04:49:43 AM JST
event
* Sun 10 May 2015 04:54:27 AM JST
DestroyWindow
* Sun 10 May 2015 04:55:05 AM JST
xproto.DestroyNotifyEvent
* Sun 10 May 2015 04:56:36 AM JST
if 
* Sun 10 May 2015 04:57:21 AM JST
self.find_windows(WindowIDSpec(window))[0]
* Sun 10 May 2015 05:00:34 AM JST
not 
* Sun 10 May 2015 05:00:47 AM JST
event.atom == self._atom_cache.get_atom('_NET_CLIENT_LIST')
* Sun 10 May 2015 05:01:03 AM JST
False
* Sun 10 May 2015 05:02:25 AM JST
set(self._client_windows())
* Sun 10 May 2015 05:02:30 AM JST
set(self._client_windows())
* Sun 10 May 2015 05:02:40 AM JST
set([w.get_id() for w in self._windows])
* Sun 10 May 2015 05:03:06 AM JST
# _NET_CLIENT_LIST added
* Sun 10 May 2015 05:04:00 AM JST
get_id(
* Sun 10 May 2015 05:04:55 AM JST
self.find_windows(WindowIDSpec(event.window))[0]
* Sun 10 May 2015 05:05:21 AM JST
event.
* Sun 10 May 2015 05:06:13 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Sun 10 May 2015 05:08:16 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Sun 10 May 2015 05:09:39 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Sun 10 May 2015 05:11:31 AM JST
23121418
* Sun 10 May 2015 05:12:35 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec
c=get_display()
wm=WindowManager(c)
wm.add_observer(DebugWindowManagerObserver())
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Sun 10 May 2015 05:13:40 AM JST
while 1:
    loop.dispatch_event()


* Sun 10 May 2015 05:25:27 AM JST
argument
* Sun 10 May 2015 05:36:52 AM JST
self.
* Sun 10 May 2015 05:37:21 AM JST
self.find_windows(WindowIDSpec(window))[0]
* Sun 10 May 2015 05:37:49 AM JST
_
* Sun 10 May 2015 05:37:49 AM JST
self._
* Sun 10 May 2015 05:37:59 AM JST

* Sun 10 May 2015 05:37:59 AM JST

* Sun 10 May 2015 05:37:59 AM JST
        del 

* Tue 19 May 2015 12:49:43 AM JST

* Tue 19 May 2015 12:49:43 AM JST

* Tue 19 May 2015 12:49:43 AM JST
        self._handler = None

* Tue 19 May 2015 12:51:01 AM JST

* Tue 19 May 2015 12:51:01 AM JST

* Tue 19 May 2015 12:51:01 AM JST
from _xahk.window_event_dispatcher import WindowEventDispatcher

* Tue 19 May 2015 12:57:10 AM JST
class Accelerator:
    """Class Accelerator
    """
    # Attributes:
    code = None  # () 
    modifier = None  # () 
    
    # Operations
    def get_code(self):
        """function get_code
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_modifiers(self):
        """function get_modifiers
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_shift_down(self):
        """function is_shift_down
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_ctrl_down(self):
        """function is_ctrl_down
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_alt_down(self):
        """function is_alt_down
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __hash__(self):
        """function __hash__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self):
        """function __eq__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self):
        """function __ne__
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 19 May 2015 12:57:40 AM JST
None # should raise NotImplementedError()
* Tue 19 May 2015 12:57:46 AM JST
None # should raise NotImplementedError()
* Tue 19 May 2015 12:59:07 AM JST
None # should raise NotImplementedError()
* Tue 19 May 2015 12:59:32 AM JST
None # should raise NotImplementedError()
* Tue 19 May 2015 01:00:21 AM JST
self.
* Tue 19 May 2015 01:00:47 AM JST
            
* Tue 19 May 2015 01:01:00 AM JST
None # should raise NotImplementedError()
* Tue 19 May 2015 01:01:37 AM JST
other
* Tue 19 May 2015 01:02:45 AM JST
class KeyCommand:
    """Class KeyCommand
    """
    # Attributes:
    __current_event = None  # () 
    
    # Operations
    def set_current_event(self, event):
        """function set_current_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_down(self):
        """function on_down
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_up(self):
        """function on_up
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 19 May 2015 01:03:02 AM JST
kwargs
* Tue 19 May 2015 01:03:02 AM JST
rgs, **kwargs
* Tue 19 May 2015 01:03:02 AM JST
self, rgs, **kwargs
* Tue 19 May 2015 01:04:55 AM JST
None
* Tue 19 May 2015 01:04:56 AM JST
None
* Tue 19 May 2015 01:05:12 AM JST
Operations
    
    @
* Tue 19 May 2015 01:05:23 AM JST
from
* Tue 19 May 2015 01:05:31 AM JST
ABCMeta
* Tue 19 May 2015 01:05:49 AM JST
    @abstractmethod

* Tue 19 May 2015 01:09:05 AM JST
class KeyBindObserver:
    """Class KeyBindObserver
    """
    # Attributes:
    
    # Operations
    def on_changed_binding(self):
        """function on_changed_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 19 May 2015 01:09:24 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 01:09:50 AM JST
observer
* Tue 19 May 2015 01:11:09 AM JST
class KeyBinder:
    """Class KeyBinder
    """
    # Attributes:
    __display = None  # () 
    __binded_map<(window,Accelerator), cmd> = None  # () 
    
    # Operations
    def bind(self, window, accelerator, cmd):
        """function bind
        
        window: 
        accelerator: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unbind(self, window, accelerator):
        """function unbind
        
        window: 
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear(self):
        """function clear
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_binding(self):
        """function list_binding
        
        returns (window,Accelerator)
        """
        return None # should raise NotImplementedError()
    
    def on_event(self, event):
        """function on_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_down(self):
        """function on_down
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_up(self):
        """function on_up
        
        returns 
        """
        return None # should raise NotImplementedError()

* Tue 19 May 2015 01:12:15 AM JST

* Tue 19 May 2015 01:12:16 AM JST

* Tue 19 May 2015 01:12:16 AM JST
    # __display = None  # () 

* Tue 19 May 2015 01:17:40 AM JST
import 
* Tue 19 May 2015 01:18:33 AM JST
GrabMode.Async
* Tue 19 May 2015 01:18:38 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 01:19:35 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 01:35:13 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 01:36:39 AM JST
None # should raise NotImplementedError()
* Tue 19 May 2015 01:36:57 AM JST
    def list_binding(self):
        """function list_binding

        returns (window,Accelerator)
        """
        return self._binded_map.keys()


* Tue 19 May 2015 01:38:08 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 01:39:40 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 01:42:18 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 01:47:05 AM JST
class KeyBinder:
    """Class KeyBinder
    """
    # Attributes:
    __display = None  # () 
    __binded_map<(window,Accelerator), cmd> = None  # () 
    
    # Operations
    def bind(self, window, accelerator, cmd):
        """function bind
        
        window: 
        accelerator: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unbind(self, window, accelerator):
        """function unbind
        
        window: 
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear(self):
        """function clear
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_binding(self):
        """function list_binding
        
        returns (window,Accelerator)
        """
        return None # should raise NotImplementedError()
    
    def on_event(self, event):
        """function on_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_down(self):
        """function on_down
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_up(self):
        """function on_up
        
        returns 
        """
        return None # should raise NotImplementedError()

* Tue 19 May 2015 01:47:40 AM JST
class KeyBind:
    """Class KeyBind
    """
    # Attributes:
    spec = None  # (WindowSpec) 
    __is_binding = None  # (bool) 
    __bind_map = None  # (<accelerator,cmd>) 
    __observers = None  # (list) 
    
    # Operations
    def is_satisfied_by(self, window):
        """function is_satisfied_by
        
        window: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def register_keybind(self, accelerator, cmd):
        """function register_keybind
        
        accelerator: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unregister_keybind(self, accelerator, cmd):
        """function unregister_keybind
        
        accelerator: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_binding(self):
        """function start_binding
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def stop_binding(self):
        """function stop_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_binding(self):
        """function is_binding
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def add_observer(self, observer):
        """function add_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_observer(self, observer):
        """function remove_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def build_binder(self, binder, window):
        """function build_binder
        
        binder: 
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 19 May 2015 01:48:38 AM JST
kwargs
* Tue 19 May 2015 01:49:03 AM JST
None # should raise NotImplementedError()
* Tue 19 May 2015 01:50:34 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 01:50:55 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 01:52:28 AM JST
None # should raise NotImplementedError()
* Tue 19 May 2015 01:52:40 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 01:52:42 AM JST
sl
* Tue 19 May 2015 01:52:56 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 01:54:11 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 01:58:20 AM JST
from KeyBind import KeyBind
from EventDispatcher import EventDispatcher
from KeyBindObserver import KeyBindObserver
from WindowManagerObserver import WindowManagerObserver
from KeyBinder import KeyBinder

class KeyBindService(WindowManagerObserver, KeyBindObserver, EventDispatcher):
    """Class KeyBindService
    """
    # Attributes:
    __keybinder = None  # (KeyBinder) 
    __binders = None  # (list) 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_binder(self, binder):
        """function add_binder
        
        binder: KeyBinder
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_binder(self, binder):
        """function remove_binder
        
        binder: Keybinder
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_changed_binding(self):
        """function on_changed_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_created_window(self, window):
        """function on_created_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_destroyed_window(self, window_id):
        """function on_destroyed_window
        
        window_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_binding(self):
        """function list_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __refresh_binding(self):
        """function refresh_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 19 May 2015 02:01:37 AM JST
_keybinder = []
* Tue 19 May 2015 02:03:45 AM JST
self.
* Tue 19 May 2015 02:03:47 AM JST
self
* Tue 19 May 2015 02:03:51 AM JST
self
* Tue 19 May 2015 02:04:16 AM JST
None # should raise NotImplementedError()
* Tue 19 May 2015 02:05:32 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 02:05:42 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 02:06:08 AM JST
None # should raise NotImplementedError()
* Tue 19 May 2015 02:06:09 AM JST
f_
* Tue 19 May 2015 02:06:10 AM JST
sle.f_
* Tue 19 May 2015 02:06:29 AM JST
_binded_map
* Tue 19 May 2015 02:08:29 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 02:08:55 AM JST
None # should raise NotImplementedError()
* Tue 19 May 2015 02:22:21 AM JST
class Event:
    """Class Event
    """
    # Attributes:
    
    # Operations
    def is_key_event(self):
        """function is_key_event
        
        returns bool
        """
        return None # should raise NotImplementedError()
    


* Tue 19 May 2015 02:22:44 AM JST
None # should raise NotImplementedError()
* Tue 19 May 2015 02:24:19 AM JST
from Event import Event

class KeyEvent(Event):
    """Class KeyEvent
    """
    # Attributes:
    window = None  # () 
    accelerator = None  # () 
    
    # Operations
    def is_down(self):
        """function is_down
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def is_up(self):
        """function is_up
        
        returns bool
        """
        return None # should raise NotImplementedError()
    


* Tue 19 May 2015 02:27:50 AM JST
from _xahk.windowspec.window_id_spec import WindowIDSpec
* Tue 19 May 2015 02:29:11 AM JST

* Tue 19 May 2015 02:29:11 AM JST

* Tue 19 May 2015 02:29:11 AM JST
    window = None  # ()

* Tue 19 May 2015 02:29:56 AM JST
WindowMa
* Tue 19 May 2015 02:32:36 AM JST
window
* Tue 19 May 2015 02:34:19 AM JST
__
* Tue 19 May 2015 02:34:20 AM JST
Event.__
* Tue 19 May 2015 02:35:08 AM JST
Accelerator(self._event.detail, self._event.state)
* Tue 19 May 2015 02:35:57 AM JST
None # should raise NotImplementedError()
* Tue 19 May 2015 02:36:23 AM JST
None # should raise NotImplementedError()
* Tue 19 May 2015 02:37:18 AM JST
form 
* Tue 19 May 2015 02:38:56 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 02:43:49 AM JST
self._refresh_binding()
* Tue 19 May 2015 02:44:01 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 02:45:40 AM JST
self.
* Tue 19 May 2015 02:47:58 AM JST
            for bind in self._binders:
                if bind.is_satisfied_by(window):
                    bind.buid_binder(self._keybinder, window)

* Tue 19 May 2015 02:49:15 AM JST
        for bind in self._binders:
            if bind.is_satisfied_by(window):
                bind.buid_binder(self._keybinder, window)

* Tue 19 May 2015 02:49:40 AM JST
            if bind.is_satisfied_by(window):
                bind.buid_binder(self._keybinder, window)

* Tue 19 May 2015 02:50:08 AM JST
_bind_matched_window
* Tue 19 May 2015 02:50:50 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 02:54:33 AM JST
_binders
* Tue 19 May 2015 02:55:12 AM JST

* Tue 19 May 2015 02:55:12 AM JST

* Tue 19 May 2015 02:55:12 AM JST
        return None # should raise NotImplementedError()

* Tue 19 May 2015 03:00:32 AM JST
KeyBindSe
* Tue 19 May 2015 03:00:48 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 03:00:50 AM JST
self.
* Tue 19 May 2015 03:01:29 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 03:01:51 AM JST
self.
* Tue 19 May 2015 03:05:29 AM JST

* Tue 19 May 2015 03:05:30 AM JST

* Tue 19 May 2015 03:05:30 AM JST
        if binder in self._binders:

* Tue 19 May 2015 03:09:10 AM JST
print
* Tue 19 May 2015 03:10:50 AM JST
56623126
* Tue 19 May 2015 03:11:44 AM JST
KeyBind
* Tue 19 May 2015 03:11:45 AM JST
keybind
* Tue 19 May 2015 03:13:18 AM JST
KeyDebug
* Tue 19 May 2015 03:13:19 AM JST
keycommand
* Tue 19 May 2015 03:13:28 AM JST
accelerator
* Tue 19 May 2015 03:13:38 AM JST
Accelerator
* Tue 19 May 2015 03:13:39 AM JST
accelerator
* Tue 19 May 2015 03:13:44 AM JST
Window
* Tue 19 May 2015 03:14:17 AM JST
56623126
* Tue 19 May 2015 03:15:19 AM JST
KeyCommand
* Tue 19 May 2015 03:17:17 AM JST
(self._code, self._modifier)
* Tue 19 May 2015 03:23:07 AM JST
from _xahk.keycommand import KeyDebug
* Tue 19 May 2015 03:23:11 AM JST
KeyDebug
* Tue 19 May 2015 03:23:13 AM JST
keycommand
* Tue 19 May 2015 03:23:44 AM JST
a
* Tue 19 May 2015 03:27:03 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec

* Tue 19 May 2015 03:27:09 AM JST
kbind=KeyBind(WindowIDSpec(56623126))

* Tue 19 May 2015 03:27:15 AM JST
kbind.register_keybind(Accelerator(38), KeyDebug)

* Tue 19 May 2015 03:27:25 AM JST
kbind.start_binding()

* Tue 19 May 2015 03:27:29 AM JST
from _xahk.keybindservice import KeyBindService

* Tue 19 May 2015 03:27:46 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.keybindservice import KeyBindService

* Tue 19 May 2015 03:27:50 AM JST
kbind=KeyBind(WindowIDSpec(56623126))
kbind.register_keybind(Accelerator(38), KeyDebug)
kbind.start_binding()

* Tue 19 May 2015 03:28:15 AM JST
a
* Tue 19 May 2015 03:28:52 AM JST

* Tue 19 May 2015 03:28:52 AM JST

* Tue 19 May 2015 03:28:52 AM JST
        print(self._binded_map)

* Tue 19 May 2015 03:29:11 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.display import get_display
from _xahk.eventloop import EventLoop
from _xahk.window_manager_observer import DebugWindowManagerObserver
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_any_spec import WindowAnySpec

* Tue 19 May 2015 03:29:23 AM JST
c=get_display()

* Tue 19 May 2015 03:29:33 AM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Tue 19 May 2015 03:29:51 AM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Tue 19 May 2015 03:30:08 AM JST
from _xahk.eventloop import EventLoop

* Tue 19 May 2015 03:32:19 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

* Tue 19 May 2015 03:32:31 AM JST
kbind=KeyBind(WindowIDSpec(56623126))
kbind.register_keybind(Accelerator(38), KeyDebug)
kbind.start_binding()

* Tue 19 May 2015 03:32:46 AM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Tue 19 May 2015 03:33:46 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

kbind=KeyBind(WindowIDSpec(56623126))
kbind.register_keybind(Accelerator(38), KeyDebug)
kbind.start_binding()

* Tue 19 May 2015 03:33:52 AM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Tue 19 May 2015 03:35:38 AM JST
EventLoop
* Tue 19 May 2015 03:37:07 AM JST
_
* Tue 19 May 2015 03:37:07 AM JST
self._
* Tue 19 May 2015 03:37:26 AM JST
EventLoop.get_instance().
* Tue 19 May 2015 03:38:27 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

kbind=KeyBind(WindowIDSpec(56623126))
kbind.register_keybind(Accelerator(38), KeyDebug)
kbind.start_binding()


loop=EventLoop.get_instance()

* Tue 19 May 2015 03:38:31 AM JST
while 1:
    loop.dispatch_event()


* Tue 19 May 2015 03:39:00 AM JST

* Tue 19 May 2015 03:39:00 AM JST

* Tue 19 May 2015 03:39:00 AM JST
        print('DEBUG-1-keybinder.py')

* Tue 19 May 2015 03:39:01 AM JST

* Tue 19 May 2015 03:39:01 AM JST

* Tue 19 May 2015 03:39:01 AM JST
            print('DEBUG-2-keybinder.py')

* Tue 19 May 2015 03:39:01 AM JST

* Tue 19 May 2015 03:39:02 AM JST

* Tue 19 May 2015 03:39:02 AM JST
            print('DEBUG-3-keybinder.py')

* Tue 19 May 2015 03:39:03 AM JST

* Tue 19 May 2015 03:39:03 AM JST

* Tue 19 May 2015 03:39:03 AM JST
        print('DEBUG-4-keybinder.py')

* Tue 19 May 2015 03:39:04 AM JST

* Tue 19 May 2015 03:39:04 AM JST

* Tue 19 May 2015 03:39:04 AM JST
            print('DEBUG-5-keybinder.py')

* Tue 19 May 2015 03:39:06 AM JST

* Tue 19 May 2015 03:39:06 AM JST

* Tue 19 May 2015 03:39:06 AM JST
        print('DEBUG-6-keybinder.py')

* Tue 19 May 2015 03:39:08 AM JST

* Tue 19 May 2015 03:39:08 AM JST

* Tue 19 May 2015 03:39:08 AM JST
            print('DEBUG-7-keybinder.py')

* Tue 19 May 2015 03:39:14 AM JST
(event.window, event.accelerator)
* Tue 19 May 2015 03:39:40 AM JST
(event.window, event.accelerator)
* Tue 19 May 2015 03:45:53 AM JST
a
* Tue 19 May 2015 03:45:54 AM JST
self.a
* Tue 19 May 2015 03:46:27 AM JST
slf.
* Tue 19 May 2015 03:49:19 AM JST
self.
* Tue 19 May 2015 03:56:43 AM JST
f
* Tue 19 May 2015 03:56:43 AM JST
sle.f
* Tue 19 May 2015 03:57:01 AM JST
_window
* Tue 19 May 2015 03:57:01 AM JST
other._window
* Tue 19 May 2015 04:04:40 AM JST
event.keytarget
* Tue 19 May 2015 04:04:46 AM JST
                
* Tue 19 May 2015 04:04:48 AM JST
                
* Tue 19 May 2015 04:05:05 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

kbind=KeyBind(WindowIDSpec(56623126))
kbind.register_keybind(Accelerator(38), KeyDebug)
kbind.start_binding()


* Tue 19 May 2015 04:05:09 AM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Tue 19 May 2015 04:05:39 AM JST
event.keytarget
* Tue 19 May 2015 04:05:58 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

kbind=KeyBind(WindowIDSpec(56623126))
kbind.register_keybind(Accelerator(38), KeyDebug)
kbind.start_binding()


loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Tue 19 May 2015 04:07:47 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

kbind=KeyBind(WindowIDSpec(56623126))
kbind.register_keybind(Accelerator(38), KeyDebug)
kbind.start_binding()


loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Tue 19 May 2015 04:08:32 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

kbind=KeyBind(WindowIDSpec(56623126))
kbind.register_keybind(Accelerator(38), KeyDebug)
kbind.start_binding()


loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Tue 19 May 2015 04:10:01 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

kbind=KeyBind(WindowIDSpec(56623126))
kbind.register_keybind(Accelerator(38), KeyDebug)
kbind.start_binding()


loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Tue 19 May 2015 04:12:48 AM JST
(event.window, event.accelerator)
* Tue 19 May 2015 04:13:58 AM JST

* Tue 19 May 2015 04:13:58 AM JST

* Tue 19 May 2015 04:13:58 AM JST
from _xahk.keytarget import KeyTarget

* Tue 19 May 2015 04:14:11 AM JST

* Tue 19 May 2015 04:14:11 AM JST

* Tue 19 May 2015 04:14:11 AM JST
from _xahk.keytarget import KeyTarget

* Tue 19 May 2015 04:14:34 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

kbind=KeyBind(WindowIDSpec(56623126))
kbind.register_keybind(Accelerator(38), KeyDebug)
kbind.start_binding()


loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Tue 19 May 2015 04:14:43 AM JST

* Tue 19 May 2015 04:14:43 AM JST

* Tue 19 May 2015 04:14:43 AM JST
        print('DEBUG-1-keybindservice.py')

* Tue 19 May 2015 04:14:45 AM JST

* Tue 19 May 2015 04:14:45 AM JST

* Tue 19 May 2015 04:14:45 AM JST
        print('DEBUG-2-keybindservice.py')

* Tue 19 May 2015 04:15:01 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

kbind=KeyBind(WindowIDSpec(56623126))
kbind.register_keybind(Accelerator(38), KeyDebug)
kbind.start_binding()


loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Tue 19 May 2015 04:25:37 AM JST
while 1:
    loop.dispatch_event()

* Tue 19 May 2015 04:37:10 AM JST
return None # should raise NotImplementedError()
* Tue 19 May 2015 04:37:18 AM JST
pass
* Tue 19 May 2015 04:37:24 AM JST

* Tue 19 May 2015 04:37:24 AM JST

* Tue 19 May 2015 04:37:24 AM JST
    # Attributes:

* Tue 19 May 2015 04:38:44 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

kbind=KeyBind(WindowIDSpec(56623126))
kbind.register_keybind(Accelerator(38), KeyDebug())
kbind.start_binding()


loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Tue 19 May 2015 04:52:45 AM JST

* Tue 19 May 2015 04:52:45 AM JST

* Tue 19 May 2015 04:52:45 AM JST
        self._counter += 1

* Tue 19 May 2015 04:53:25 AM JST
f_key
* Tue 19 May 2015 04:53:25 AM JST
sle.f_key
* Tue 19 May 2015 04:55:28 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

kbind=KeyBind(WindowIDSpec(56623126))
kbind.register_keybind(Accelerator(38), KeyDebug(kbind))
kbind.start_binding()


loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Tue 19 May 2015 05:02:36 AM JST
from _xahk.windowmanager import WindowManager
* Tue 19 May 2015 05:04:29 AM JST
Wndow
* Tue 19 May 2015 05:05:21 AM JST
self.
* Tue 19 May 2015 05:05:59 AM JST

* Tue 19 May 2015 05:06:11 AM JST
WindowWMClassSpec
* Tue 19 May 2015 05:06:16 AM JST

* Tue 19 May 2015 05:06:59 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

* Tue 19 May 2015 05:07:10 AM JST
kbind=KeyBind(WindowWMClassSpec('emacs'))
kbind.register_keybind(Accelerator(38), KeyDebug(kbind))
kbind.start_binding()

* Tue 19 May 2015 05:07:20 AM JST
kbind
* Tue 19 May 2015 05:07:22 AM JST
kbind.register_keybind(Accelerator(38), KeyDebug())
* Tue 19 May 2015 05:07:25 AM JST
kbind.start_binding()

* Tue 19 May 2015 05:07:29 AM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Tue 19 May 2015 05:08:51 AM JST
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

* Tue 19 May 2015 05:09:05 AM JST
WindowWMClassSpec('emacs')
* Tue 19 May 2015 05:09:14 AM JST
from _xahk.windowmanager import WindowManager

* Tue 19 May 2015 05:09:19 AM JST
from _xahk.windowmanager import WindowManager
* Tue 19 May 2015 05:09:37 AM JST
WindowWMClassSpec('emacs')
* Tue 19 May 2015 05:10:42 AM JST
kbind=KeyBind(WindowWMClassSpec('emacs'))
kbind.register_keybind(Accelerator(38), KeyDebug())
kbind.start_binding()

* Tue 19 May 2015 05:10:47 AM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Tue 19 May 2015 05:13:15 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

# kbind=KeyBind(WindowIDSpec(56623126))

kbind=KeyBind(WindowWMClassSpec('emacs'))
kbind.register_keybind(Accelerator(38), KeyDebug())
kbind.start_binding()


loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Tue 19 May 2015 05:13:54 AM JST

* Tue 19 May 2015 05:13:54 AM JST

* Tue 19 May 2015 05:13:54 AM JST
        print(window)

* Tue 19 May 2015 05:13:55 AM JST

* Tue 19 May 2015 05:13:55 AM JST

* Tue 19 May 2015 05:13:55 AM JST
        print(window)

* Tue 19 May 2015 05:20:09 AM JST
print(self._keybinder._binded_map)
* Tue 19 May 2015 05:20:29 AM JST
from _xahk.windowmanager import WindowManager
from _xahk.keybind import KeyBind
from _xahk.keycommand import KeyDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.keybindservice import KeyBindService
from _xahk.eventloop import EventLoop

# kbind=KeyBind(WindowIDSpec(56623126))

kbind=KeyBind(WindowWMClassSpec('emacs'))
kbind.register_keybind(Accelerator(38), KeyDebug())
kbind.start_binding()


loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Tue 19 May 2015 05:22:17 AM JST

* Tue 19 May 2015 05:22:18 AM JST

* Tue 19 May 2015 05:22:18 AM JST
        print(self._keybinder._binded_map)

* Tue 19 May 2015 05:22:20 AM JST

* Tue 19 May 2015 05:22:20 AM JST

* Tue 19 May 2015 05:22:20 AM JST
        print(self._keybinder._binded_map)

* Tue 19 May 2015 01:10:38 PM JST
unset SESSION_MANAGER
exec /etc/X11/xinit/xinitrc

[ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup
[ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources
# xsetroot -solid grey
vncconfig -iconic &
x-terminal-emulator -geometry 80×24+10+10 -ls -title “$VNCDESKTOP Desktop” &
x-window-manager &
startxfce4
* Tue 19 May 2015 01:14:38 PM JST
exec xfce4-session &
* Tue 19 May 2015 01:31:50 PM JST
#!/bin/sh

vncconfig -iconic &
unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS
OS=`uname -s`
if [ $OS = 'Linux' ]; then
  case "$WINDOWMANAGER" in
    *gnome*)
      if [ -e /etc/SuSE-release ]; then
        PATH=$PATH:/opt/gnome/bin
        export PATH
      fi
      ;;
  esac
fi
if [ -x /etc/X11/xinit/xinitrc ]; then
  exec /etc/X11/xinit/xinitrc
fi
if [ -f /etc/X11/xinit/xinitrc ]; then
  exec sh /etc/X11/xinit/xinitrc
fi
[ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources
xsetroot -solid grey
#xterm -geometry 80x24+10+10 -ls -title "$VNCDESKTOP Desktop" &
#twm &
/usr/bin/xfce4-session &
* Wed 20 May 2015 06:07:25 PM JST
class BindCandidate:
    """Class BindCandidate
    """
    # Attributes:
    spec = None  # (WindowSpec) 
    __registry = None  # (<accelerator,cmd>) 
    __observers = None  # (list) 
    
    # Operations
    def get_window_spec(self, window):
        """function get_window_spec
        
        window: 
        
        returns WindowSpec
        """
        return None # should raise NotImplementedError()
    
    def register_bind(self, accelerator, cmd):
        """function register_bind
        
        accelerator: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unregister_bind(self, accelerator):
        """function unregister_bind
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_observer(self, observer):
        """function add_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_observer(self, observer):
        """function remove_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iteritems(self):
        """function iteritems
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def items(self):
        """function items
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 20 May 2015 06:09:59 PM JST

* Wed 20 May 2015 06:09:59 PM JST

* Wed 20 May 2015 06:09:59 PM JST
    spec = None  # (WindowSpec)

* Wed 20 May 2015 06:10:24 PM JST

* Wed 20 May 2015 06:10:24 PM JST

* Wed 20 May 2015 06:10:24 PM JST
    __registry = None  # (<accelerator,cmd>)

* Wed 20 May 2015 06:10:24 PM JST
    __registry = None  # (<accelerator,cmd>)

* Wed 20 May 2015 06:10:24 PM JST
    __registry = None  # (<accelerator,cmd>)
    __observers = None  # (list)

* Wed 20 May 2015 06:12:35 PM JST
window
* Wed 20 May 2015 06:12:39 PM JST
None # should raise NotImplementedError()
* Wed 20 May 2015 06:13:32 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 06:14:09 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 06:15:17 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 06:15:41 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 06:15:53 PM JST
obser
* Wed 20 May 2015 06:15:53 PM JST
append(obser
* Wed 20 May 2015 06:16:17 PM JST
None # should raise NotImplementedError()
* Wed 20 May 2015 06:16:23 PM JST
lsef.
* Wed 20 May 2015 06:16:52 PM JST
iter(self., sentinel)
* Wed 20 May 2015 06:17:14 PM JST
None # should raise NotImplementedError()
* Wed 20 May 2015 06:21:15 PM JST
windowspec
* Wed 20 May 2015 06:24:58 PM JST
class BindManager(WindowManagerObserver, KeyBindObserver):
    """Class BindManager
    """
    # Attributes:
    __listener = None  # (InputBindListener) 
    __candidates = None  # (list) 
    __is_managing = None  # (bool) 
    
    # Operations
    def create_keybind(self):
        """function create_keybind
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def create_mouse(self):
        """function create_mouse
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_candidate(self, candidate):
        """function add_candidate
        
        candidate: BindCandidate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_candidate(self, candidate):
        """function remove_candidate
        
        candidate: BindCandidate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def has_candidate(self, candidate):
        """function has_candidate
        
        candidate: BindCandidate
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def on_changed_bind_registry(self):
        """function on_changed_bind_registry
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_created_window(self, window):
        """function on_created_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_destroyed_window(self, window_id):
        """function on_destroyed_window
        
        window_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def refresh_binding(self):
        """function refresh_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_management(self):
        """function start_management
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def stop_management(self):
        """function stop_management
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __bind_to_windows(self, windows, candidate):
        """function bind_to_windows
        
        windows: 
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __bind_to_window(self, window, candidate):
        """function bind_to_window
        
        window: 
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 20 May 2015 06:27:00 PM JST

* Wed 20 May 2015 06:27:00 PM JST

* Wed 20 May 2015 06:27:00 PM JST
from _xahk.keybind_observ import 

* Wed 20 May 2015 06:27:32 PM JST

class BindCandidateObserver:
    """Class BindCandidateObserver
    """
    # Attributes:
    
    # Operations
    def on_changed_bind_registry(self):
        """function on_changed_bind_registry
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 20 May 2015 06:30:52 PM JST
class BindManager(WindowManagerObserver, BindCandidateObserver):
    """Class BindManager
    """
    # Attributes:
    __listener = None  # (InputBindListener) 
    __candidates = None  # (list) 
    __is_managing = None  # (bool) 
    
    # Operations
    def create_keybind(self):
        """function create_keybind
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def create_mouse(self):
        """function create_mouse
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_candidate(self, candidate):
        """function add_candidate
        
        candidate: BindCandidate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_candidate(self, candidate):
        """function remove_candidate
        
        candidate: BindCandidate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def has_candidate(self, candidate):
        """function has_candidate
        
        candidate: BindCandidate
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def on_changed_bind_registry(self):
        """function on_changed_bind_registry
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_created_window(self, window):
        """function on_created_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_destroyed_window(self, window_id):
        """function on_destroyed_window
        
        window_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def refresh_binding(self):
        """function refresh_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_management(self):
        """function start_management
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def stop_management(self):
        """function stop_management
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __bind_to_windows(self, windows, candidate):
        """function bind_to_windows
        
        windows: 
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __bind_to_window(self, window, candidate):
        """function bind_to_window
        
        window: 
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()

* Wed 20 May 2015 06:31:06 PM JST
form 
* Wed 20 May 2015 06:32:38 PM JST
@classmethod
* Wed 20 May 2015 06:33:56 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 06:34:09 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 06:34:21 PM JST
None # should raise NotImplementedError()
* Wed 20 May 2015 06:34:45 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 06:36:20 PM JST
_
* Wed 20 May 2015 06:36:20 PM JST
form _
* Wed 20 May 2015 06:37:18 PM JST
WindowManager
* Wed 20 May 2015 06:38:23 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 06:38:49 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 06:38:52 PM JST
self.
* Wed 20 May 2015 06:39:13 PM JST
WindowManager.get_instance().add_observer(self)
* Wed 20 May 2015 06:39:55 PM JST
self._is_managing
* Wed 20 May 2015 06:40:40 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 06:49:37 PM JST
windows, 
* Wed 20 May 2015 06:49:47 PM JST

* Wed 20 May 2015 06:49:47 PM JST

* Wed 20 May 2015 06:49:47 PM JST
        return None # should raise NotImplementedError()

* Wed 20 May 2015 06:50:07 PM JST
    def refresh_binding(self):
        """function refresh_binding

        returns
        """
        self._listener.clear()
        for candidate in self._candidates:
            self._bind_to_windows(candidate)


* Wed 20 May 2015 06:50:58 PM JST
candidate.get_window_spec()
* Wed 20 May 2015 06:51:59 PM JST

* Wed 20 May 2015 06:51:59 PM JST

* Wed 20 May 2015 06:51:59 PM JST
        return None # should raise NotImplementedError()

* Wed 20 May 2015 06:54:46 PM JST

* Wed 20 May 2015 06:54:46 PM JST

* Wed 20 May 2015 06:54:46 PM JST
        return None # should raise NotImplementedError()

* Wed 20 May 2015 06:58:57 PM JST

* Wed 20 May 2015 06:58:57 PM JST

* Wed 20 May 2015 06:58:57 PM JST
        return None # should raise NotImplementedError()

* Wed 20 May 2015 09:51:03 PM JST
class InputBindListener(EventDispatcher):
    """Class InputBindListener
    """
    # Attributes:
    __display = None  # () 
    __binding = None  # (<(window, code, modifier), cmd>) 
    __is_listening = None  # (bool) 
    __observers = None  # (list) 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_listening(self):
        """function start_listening
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def stop_listening(self):
        """function stop_listening
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear(self):
        """function clear
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def bind(self, window, code, modifier, cmd):
        """function bind
        
        window: 
        code: 
        modifier: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unbind(self, window, code, modifier):
        """function unbind
        
        window: 
        code: 
        modifier: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def flush(self):
        """function flush
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_binding(self):
        """function list_binding
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def add_observer(self, observer):
        """function add_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_observer(self, observer):
        """function remove_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_cmds(self):
        """function list_cmds
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iteritems(self):
        """function iteritems
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def items(self):
        """function items
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __grab(self, window, code, modifier):
        """function grab
        
        window: 
        code: 
        modifier: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ungrab(self, window, code, modifier):
        """function ungrab
        
        window: 
        code: 
        modifier: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 20 May 2015 09:52:05 PM JST
from _xahk.eventloop import EventLoop
* Wed 20 May 2015 09:52:35 PM JST

* Wed 20 May 2015 09:52:35 PM JST

* Wed 20 May 2015 09:52:35 PM JST
    __display = None  # ()

* Wed 20 May 2015 09:52:40 PM JST
f_is
* Wed 20 May 2015 09:52:43 PM JST
slef
* Wed 20 May 2015 09:53:40 PM JST
self
* Wed 20 May 2015 09:53:58 PM JST
form 
* Wed 20 May 2015 09:54:19 PM JST
cls._instance
* Wed 20 May 2015 09:54:22 PM JST
 # should raise NotImplementedError()
* Wed 20 May 2015 09:55:18 PM JST
None # should raise NotImplementedError()
* Wed 20 May 2015 09:56:19 PM JST
None # should raise NotImplementedError()
* Wed 20 May 2015 09:56:23 PM JST
Eve
* Wed 20 May 2015 09:58:11 PM JST

* Wed 20 May 2015 09:58:11 PM JST

* Wed 20 May 2015 09:58:11 PM JST
        return None # should raise NotImplementedError()

* Wed 20 May 2015 09:58:33 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 09:58:55 PM JST
    def _grab(self, window, code, modifier):
        """function grab

        window:
        code:
        modifier:

        returns
        """
        return None # should raise NotImplementedError()

    def _ungrab(self, window, code, modifier):
        """function ungrab

        window:
        code:
        modifier:

        returns
        """
        return None # should raise NotImplementedError()


* Wed 20 May 2015 10:00:00 PM JST
self.
* Wed 20 May 2015 10:00:22 PM JST
code
* Wed 20 May 2015 10:00:47 PM JST
GrabKey
* Wed 20 May 2015 10:01:23 PM JST
            
* Wed 20 May 2015 10:01:28 PM JST
            
* Wed 20 May 2015 10:01:35 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 10:02:21 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 10:02:34 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 10:03:25 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 10:04:12 PM JST
(window, code, modifier)
* Wed 20 May 2015 10:05:55 PM JST
        for observer in self._observers:
            observer.on_grab(window, code, modifier)

* Wed 20 May 2015 10:07:27 PM JST
self.
* Wed 20 May 2015 10:08:09 PM JST
_
* Wed 20 May 2015 10:08:10 PM JST
self._
* Wed 20 May 2015 10:08:27 PM JST
        for observer in self._observers:
            observer.on_binding(window, code, modifier, cmd)


* Wed 20 May 2015 10:08:35 PM JST
cmd
* Wed 20 May 2015 10:08:52 PM JST
        for observer in self._observers:
            observer.on_binding(window, code, modifier, cmd)


* Wed 20 May 2015 10:09:14 PM JST
cmd
* Wed 20 May 2015 10:09:21 PM JST
on_binding
* Wed 20 May 2015 10:09:30 PM JST
modifier
* Wed 20 May 2015 10:09:30 PM JST
code, modifier
* Wed 20 May 2015 10:09:30 PM JST
window, code, modifier
* Wed 20 May 2015 10:09:44 PM JST
None # should raise NotImplementedError()
* Wed 20 May 2015 10:10:01 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 10:10:13 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 10:11:23 PM JST
None # should raise NotImplementedError()
* Wed 20 May 2015 10:11:56 PM JST
None # should raise NotImplementedError()
* Wed 20 May 2015 10:12:05 PM JST
None # should raise NotImplementedError()
* Wed 20 May 2015 10:12:11 PM JST
iterite
* Wed 20 May 2015 10:14:10 PM JST
    def __init__(self, event):
        r"""

        @Arguments:
        - `event`:
        """
        super(KeyEvent, self).__init__(event)
        self._accelerator = None

    # Operations
    @property
    def window(self, ):
        r"""SUMMARY

        window()

        @Return:

        @Error:
        """
        return WindowManager.get_instance().find_windows(
            WindowIDSpec(self._event.event))[0]

    @property
    def accelerator(self, ):
        r"""SUMMARY

        accelerator()

        @Return:

        @Error:
        """
        if self._accelerator is None:
            self._accelerator = Accelerator(self._event.detail, self._event.state)
        return self._accelerator

    def is_down(self):
        """function is_down

        returns bool
        """
        return isinstance(self._event, (xproto.KeyPressEvent, ))

    def is_up(self):
        """function is_up

        returns bool
        """
        return isinstance(self._event, (xproto.KeyReleaseEvent, ))

* Wed 20 May 2015 10:14:17 PM JST
Key
* Wed 20 May 2015 10:15:44 PM JST
return None # should raise NotImplementedError()
* Wed 20 May 2015 10:15:50 PM JST
get_id()
* Wed 20 May 2015 10:15:56 PM JST
            
* Wed 20 May 2015 10:16:06 PM JST
get_id()
* Wed 20 May 2015 10:18:54 PM JST
eventobj = 
* Wed 20 May 2015 10:20:04 PM JST
_missing_bind()
* Wed 20 May 2015 10:20:05 PM JST
self._missing_bind()
* Wed 20 May 2015 10:20:23 PM JST
pass
* Wed 20 May 2015 10:21:22 PM JST
evobj = 
* Wed 20 May 2015 10:21:26 PM JST
isisntance
* Wed 20 May 2015 10:21:53 PM JST
Event
* Wed 20 May 2015 10:22:10 PM JST
Key
* Wed 20 May 2015 10:25:07 PM JST
er
* Wed 20 May 2015 10:25:11 PM JST
as 
* Wed 20 May 2015 10:25:28 PM JST
KeyboardInterrupt()
* Wed 20 May 2015 10:26:23 PM JST
Error
* Wed 20 May 2015 10:27:10 PM JST
(event.window, event.detail, event.state)
* Wed 20 May 2015 10:28:11 PM JST
        cmd = self._binding.get((event.window, event.detail, event.state), None)
        if cmd is None:
            return

* Wed 20 May 2015 10:28:36 PM JST
Exception
* Wed 20 May 2015 10:32:06 PM JST

* Wed 20 May 2015 10:32:06 PM JST

* Wed 20 May 2015 10:32:06 PM JST
    # __binding = None  # (<(window, code, modifier), cmd>)

* Wed 20 May 2015 10:35:27 PM JST
    def _grab(self, window, code, modifier):
        """function grab

        window:
        code:
        modifier:

        returns
        """
        self._display.core.GrabKey(
            True, window, modifier, code, GrabMode.Async, GrabMode.Async)
        for observer in self._observers:
            observer.on_grab(window, code, modifier)

    def _ungrab(self, window, code, modifier):
        """function ungrab

        window:
        code:
        modifier:

        returns
        """
        self._display.core.UngrabKey(code, window, modifier)
        for observer in self._observers:
            observer.on_ungrab(window, code, modifier)


* Wed 20 May 2015 10:36:49 PM JST
        self._display.core.GrabKey(
            True, window, modifier, code, GrabMode.Async, GrabMode.Async)

* Wed 20 May 2015 10:37:16 PM JST
        self._display.core.UngrabKey(code, window, modifier)

* Wed 20 May 2015 10:40:12 PM JST
        self._display.core.GrabKey(
            True, window, modifier, code, GrabMode.Async, GrabMode.Async)
        super(KeyBindListener, self)._grab(window, code, modifier)

* Wed 20 May 2015 10:46:11 PM JST
GrabMode.Async, GrabMode.Async
* Wed 20 May 2015 10:47:04 PM JST
        self._display.core.GrabButton(
            True, window, EventMask.ButtonPress, GrabMode.Async, GrabMode.Async,
            0, 0, code, modifier)

* Wed 20 May 2015 10:49:00 PM JST
Butotn
* Wed 20 May 2015 10:49:25 PM JST
KeyBindListener
* Wed 20 May 2015 10:50:18 PM JST
None # should raise NotImplementedError()
* Wed 20 May 2015 10:50:25 PM JST
Bin
* Wed 20 May 2015 10:52:04 PM JST
        if self._is_managing:
            self.refresh_binding()

* Wed 20 May 2015 11:09:10 PM JST
keybind
* Wed 20 May 2015 11:09:46 PM JST
KeyBind
* Wed 20 May 2015 11:11:04 PM JST
KeyDebug
* Wed 20 May 2015 11:11:24 PM JST
keybindservice
* Wed 20 May 2015 11:11:38 PM JST
KeyBindService
* Wed 20 May 2015 11:12:44 PM JST
Key
* Wed 20 May 2015 11:13:28 PM JST
Key
* Wed 20 May 2015 11:13:36 PM JST

* Wed 20 May 2015 11:13:36 PM JST

* Wed 20 May 2015 11:13:36 PM JST
kbind.start_binding()

* Wed 20 May 2015 11:14:11 PM JST

* Wed 20 May 2015 11:14:11 PM JST

* Wed 20 May 2015 11:14:11 PM JST
bmanager=BindManager.create_keybind()

* Wed 20 May 2015 11:16:11 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.bindcandidate import BindCandidate
from _xahk.input_command import InputDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.bindmanager import BindManager
from _xahk.eventloop import EventLoop

* Wed 20 May 2015 11:16:22 PM JST
kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_keybind(Accelerator(38), InputDebug())
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()

* Wed 20 May 2015 11:17:10 PM JST
kbind.register_bind(Accelerator(38), InputDebug())
* Wed 20 May 2015 11:17:18 PM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 20 May 2015 11:19:03 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.bindcandidate import BindCandidate
from _xahk.input_command import InputDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.bindmanager import BindManager
from _xahk.eventloop import EventLoop

* Wed 20 May 2015 11:19:09 PM JST
kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), InputDebug())
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()

* Wed 20 May 2015 11:20:00 PM JST
                
* Wed 20 May 2015 11:20:20 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.bindcandidate import BindCandidate
from _xahk.input_command import InputDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.bindmanager import BindManager
from _xahk.eventloop import EventLoop

* Wed 20 May 2015 11:20:27 PM JST
kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), InputDebug())
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()
                                              

* Wed 20 May 2015 11:20:32 PM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 20 May 2015 11:22:01 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.bindcandidate import BindCandidate
from _xahk.input_command import InputDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.bindmanager import BindManager
from _xahk.eventloop import EventLoop
                                         

kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), InputDebug())
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()

* Wed 20 May 2015 11:22:07 PM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 20 May 2015 11:23:14 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.bindcandidate import BindCandidate
from _xahk.input_command import InputDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.bindmanager import BindManager
from _xahk.eventloop import EventLoop
                                         

kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), InputDebug())
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()

* Wed 20 May 2015 11:23:18 PM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Wed 20 May 2015 11:23:49 PM JST
window
* Wed 20 May 2015 11:24:08 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.bindcandidate import BindCandidate
from _xahk.input_command import InputDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.bindmanager import BindManager
from _xahk.eventloop import EventLoop
                                         

kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), InputDebug())
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()
                                              

* Wed 20 May 2015 11:24:13 PM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Wed 20 May 2015 11:31:04 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.bindcandidate import BindCandidate
from _xahk.input_command import InputDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.bindmanager import BindManager
from _xahk.eventloop import EventLoop
                                         

kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), InputDebug())
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()
                                              

* Wed 20 May 2015 11:31:09 PM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Wed 20 May 2015 11:32:18 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.bindcandidate import BindCandidate
from _xahk.input_command import InputDebug
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.bindmanager import BindManager
from _xahk.eventloop import EventLoop
                                         

kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), InputDebug())
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()

* Wed 20 May 2015 11:32:44 PM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Wed 20 May 2015 11:35:44 PM JST
XSendkey
* Wed 20 May 2015 11:37:17 PM JST
from sendkeys.core import SendKeys
* Wed 20 May 2015 11:37:48 PM JST
56623126
* Wed 20 May 2015 11:38:57 PM JST
SendKeys('b').sendkeys(56623126)
* Wed 20 May 2015 11:39:03 PM JST
from sendkeys.core import SendKeys
* Wed 20 May 2015 11:40:09 PM JST
from sendkeys.core import SendKeys
* Wed 20 May 2015 11:40:32 PM JST
line
* Wed 20 May 2015 11:42:25 PM JST
from _xahk.windowmanager import WindowManager
from _xahk.bindcandidate import BindCandidate
from _xahk.input_command import InputDebug, SendKeyCommand
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.bindmanager import BindManager
from _xahk.eventloop import EventLoop

* Wed 20 May 2015 11:42:33 PM JST
kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), SendKeyCommand('b'))
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()

* Wed 20 May 2015 11:42:38 PM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Wed 20 May 2015 11:42:52 PM JST
bbbbbbbb
* Wed 20 May 2015 11:54:18 PM JST
KeySend
* Wed 20 May 2015 11:57:33 PM JST
KeySend
* Wed 20 May 2015 11:57:34 PM JST
xsend.KeySend
* Thu 21 May 2015 12:00:28 AM JST
parse
* Thu 21 May 2015 12:00:38 AM JST
from _xsendkey import scanner
* Thu 21 May 2015 01:18:02 AM JST
bindcandidate
* Thu 21 May 2015 01:18:52 AM JST
bindmanager
* Thu 21 May 2015 01:20:39 AM JST
windowmanager
* Thu 21 May 2015 01:42:35 AM JST
self.
* Thu 21 May 2015 01:45:12 AM JST
pass
* Thu 21 May 2015 01:45:13 AM JST
self.
* Thu 21 May 2015 01:51:11 AM JST

* Thu 21 May 2015 01:51:11 AM JST

* Thu 21 May 2015 01:51:11 AM JST
Exception

* Thu 21 May 2015 01:53:05 AM JST
from _xahk.window_manager import WindowManager
from _xahk.bind_canwindowmanagerdidate import BindCandidate
from _xahk.input_command import InputDebug, SendKeyCommand
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.bind_manager import BindManager
from _xahk.eventloop import EventLoop

* Thu 21 May 2015 01:53:38 AM JST
from _xahk.window_manager import WindowManager
from _xahk.bind_candidate import BindCandidate
from _xahk.input_command import InputDebug, SendKeyCommand
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.bind_manager import BindManager
from _xahk.eventloop import EventLoop

* Thu 21 May 2015 01:53:45 AM JST
kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), SendKeyCommand('b'))
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()

* Thu 21 May 2015 01:53:54 AM JST
WindowManager
* Thu 21 May 2015 01:54:05 AM JST
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Thu 21 May 2015 01:54:23 AM JST
parent
* Thu 21 May 2015 01:55:10 AM JST

* Thu 21 May 2015 01:55:10 AM JST

* Thu 21 May 2015 01:55:11 AM JST
        print(offset)

* Thu 21 May 2015 01:55:13 AM JST
parent
* Thu 21 May 2015 01:55:35 AM JST

* Thu 21 May 2015 01:55:35 AM JST

* Thu 21 May 2015 01:55:35 AM JST
        print(repr(str(parent)))

* Thu 21 May 2015 01:56:07 AM JST
'\x1c\x00o\x00\xe2\x01\x00\x00]\x01\x00\x00\x9cR\xcb^\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00o\x00\x00\x00'
* Thu 21 May 2015 01:57:08 AM JST
xcb.xproto.PropertyNotifyEvent('
* Thu 21 May 2015 01:57:14 AM JST
'\x1c\x00o\x00\xe2\x01\x00\x00]\x01\x00\x00\x9cR\xcb^\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00o\x00\x00\x00'
* Thu 21 May 2015 01:57:32 AM JST
a
* Thu 21 May 2015 01:58:27 AM JST
.get_atom('_NET_CLIENT_LIST'):
* Thu 21 May 2015 01:59:01 AM JST
xcb.xproto.PropertyNotifyEvent('\x1c\x00o\x00\xe2\x01\x00\x00]\x01\x00\x00\x9cR\xcb^\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00o\x00\x00\x00')
* Thu 21 May 2015 02:00:36 AM JST
'\x1c\x00o\x00\xe2\x01\x00\x00\\\x01\x00\x00\x97W\xcb^\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00o\x00\x00\x00'
* Thu 21 May 2015 02:00:56 AM JST
'\x1c\x00o\x00\xe2\x01\x00\x00\x89\x01\x00\x00\x97W\xcb^\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00o\x00\x00\x00'
* Thu 21 May 2015 02:01:15 AM JST
'\x1c\x00o\x00\xe2\x01\x00\x00]\x01\x00\x00\xa2W\xcb^\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00o\x00\x00\x00'

* Thu 21 May 2015 02:01:32 AM JST
xcb.xproto.PropertyNotifyEvent('\x1c\x00o\x00\xe2\x01\x00\x00]\x01\x00\x00\xa2W\xcb^\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00o\x00\x00\x00'
)
* Thu 21 May 2015 02:03:56 AM JST
parent
* Thu 21 May 2015 02:04:29 AM JST
from _xahk.window_manager import WindowManager
from _xahk.bind_candidate import BindCandidate
from _xahk.input_command import InputDebug, SendKeyCommand
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.bind_manager import BindManager
from _xahk.eventloop import EventLoop

kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), SendKeyCommand('b'))
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()
                                              
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()

* Thu 21 May 2015 02:04:42 AM JST
a
* Thu 21 May 2015 02:04:57 AM JST
'\x02&c\x00\x92\xd2\xd3^\xe2\x01\x00\x00\x16\x00`\x03+\x00`\x03\xa1\tl\x03\xa1\x04V\x03\x00\x00\x01\x00c\x00\x00\x00'
* Thu 21 May 2015 02:09:07 AM JST
xcb.xproto.PropertyNotifyEvent('\x1c\x00o\x00\xe2\x01\x00\x00]\x01\x00\x00\xa2W\xcb^\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00o\x00\x00\x00')
* Thu 21 May 2015 02:09:17 AM JST
from _xahk.window_manager import WindowManager
* Thu 21 May 2015 02:09:40 AM JST
'_NET_CLIENT_LIST'
* Thu 21 May 2015 02:10:53 AM JST
\xe2\x01
* Thu 21 May 2015 02:12:04 AM JST
\x1c\x00o\x00\
* Thu 21 May 2015 02:12:30 AM JST
\xe2\x01\x00
* Thu 21 May 2015 02:12:40 AM JST
\x00]
* Thu 21 May 2015 02:13:12 AM JST
\x01\x00\x00\xa2W
* Thu 21 May 2015 02:13:33 AM JST
parent
* Thu 21 May 2015 02:14:17 AM JST
from _xahk.window_manager import WindowManager
from _xahk.bind_candidate import BindCandidate
from _xahk.input_command import InputDebug, SendKeyCommand
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.bind_manager import BindManager
from _xahk.eventloop import EventLoop

kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), SendKeyCommand('b'))
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()
                                              
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Thu 21 May 2015 02:14:40 AM JST
'\x1c\x00n\x00\xe2\x01\x00\x00]\x01\x00\x00\xb1\xf8\xdc^\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00n\x00\x00\x00'
'\x1c\x00n\x00\xe2\x01\x00\x00\x1a\x01\x00\x00\xb5\xf8\xdc^\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00n\x00\x00\x00'
'\x1c\x00n\x00\xe2\x01\x00\x00\x1a\x01\x00\x00\xbd\xf8\xdc^\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00n\x00\x00\x00'

* Thu 21 May 2015 02:14:50 AM JST
'\x1c\x00c\x00\xe2\x01\x00\x00]\x01\x00\x00\xe5\xca\xdc^\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00c\x00\x00\x00'
* Thu 21 May 2015 02:15:28 AM JST
a
* Thu 21 May 2015 02:15:40 AM JST
'\x1c\x00c\x00\xe2\x01\x00\x00\\\x01\x00\x00\x87\xce\xdc^\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00c\x00\x00\x00'
* Thu 21 May 2015 02:15:53 AM JST
'\x1c\x00c\x00\xe2\x01\x00\x00\\\x01\x00\x00\x87\xce\xdc^\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00c\x00\x00\x00'
* Thu 21 May 2015 02:16:00 AM JST

* Thu 21 May 2015 02:16:01 AM JST

* Thu 21 May 2015 02:16:03 AM JST

* Thu 21 May 2015 02:16:03 AM JST

* Thu 21 May 2015 02:16:03 AM JST
        print(repr(str(parent)))

* Thu 21 May 2015 02:23:03 AM JST
def simple_teswindow():
    r"""SUMMARY

    simple_teswindow()

    @Return:
    """
    con = xcb.connect()
    con.render = con(xcb.render.key)

    setup = con.get_setup()
    root = setup.roots[0].root
    depth = setup.roots[0].root_depth
    visual = setup.roots[0].root_visual
    white = setup.roots[0].white_pixel

    window = con.generate_id()

    con.core.CreateWindow(depth, window, root,
                          0, 0, 640, 480, 0,
                          xcb.xproto.WindowClass.InputOutput,
                          visual,
                          xcb.xproto.CW.BackPixel | xcb.xproto.CW.EventMask,
                          [white, xcb.xproto.EventMask.Exposure |
                           xcb.xproto.EventMask.KeyPress])
    xa_wm_name = con.core.InternAtom(
        False, len('WM_NAME'), 'WM_NAME').reply().atom
    xa_net_wm_name = con.core.InternAtom(
        False, len('_NET_WM_NAME'), '_NET_WM_NAME').reply().atom
    xa_wmclass = con.core.InternAtom(
        False, len('WM_CLASS'), 'WM_CLASS').reply().atom
    xa_utf8_string = con.core.InternAtom(
        False, len('UTF8_STRING'), 'UTF8_STRING').reply().atom

    xa_net_wm_window_type = con.core.InternAtom(
        False, len('_NET_WM_WINDOW_TYPE'), '_NET_WM_WINDOW_TYPE').reply().atom
    xa_normal = con.core.InternAtom(
        False, len('_NET_WM_WINDOW_TYPE_NORMAL'),
        '_NET_WM_WINDOW_TYPE_NORMAL').reply().atom
    xa_atom = con.core.InternAtom(False, len('ATOM'), 'ATOM').reply().atom
    xa_string = con.core.InternAtom(False, len('STRING'), 'STRING').reply().atom

    con.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
                            xa_net_wm_name, xa_utf8_string, 8, len(NAME), NAME)

    con.core.ChangeProperty(
        xcb.xproto.PropMode.Replace, window, xa_wmclass, xa_string,
        8, len(WMCLASS), WMCLASS)

    data = struct.pack('I', xa_normal)

    con.core.ChangeProperty(
        xcb.xproto.PropMode.Replace, window, xa_net_wm_window_type,
        xa_atom, 32, 1, data)
    con.core.MapWindow(window)
    con.flush()
    return window

* Thu 21 May 2015 02:23:45 AM JST
NAME = 'TestName'
WMCLASS = 'testclass\x00TestClass\x00'
* Thu 21 May 2015 02:24:43 AM JST
self.
* Thu 21 May 2015 02:25:30 AM JST
    def test_created_window(self, ):
        windowid = simple_teswindow()
        self.skipTest('Not Implemented')


* Thu 21 May 2015 02:25:55 AM JST
self.wm = WindowManager.get_instance()
* Thu 21 May 2015 02:26:04 AM JST
window
* Thu 21 May 2015 02:26:42 AM JST

* Thu 21 May 2015 02:26:42 AM JST

* Thu 21 May 2015 02:26:42 AM JST
    con = xcb.connect()

* Thu 21 May 2015 02:26:58 AM JST
con = 
* Thu 21 May 2015 02:27:17 AM JST
pass
* Thu 21 May 2015 02:28:03 AM JST
cls.conn = xcb.connect()
* Thu 21 May 2015 02:29:04 AM JST
form 
* Thu 21 May 2015 02:32:49 AM JST
import xcb.render
* Thu 21 May 2015 02:40:10 AM JST
from _xahk.window_manager import WindowManager
* Thu 21 May 2015 02:40:29 AM JST
_client_window()
* Thu 21 May 2015 02:42:40 AM JST
from _xahk.eventloop import EventLoop
* Thu 21 May 2015 02:49:26 AM JST
EventLoop.get_instance().dispatch_event()
* Thu 21 May 2015 02:49:33 AM JST
simple_teswindow(self.conn)
* Thu 21 May 2015 02:50:00 AM JST
self.wm.find_windows(WindowIDSpec(self.dummy_id))
* Thu 21 May 2015 02:50:07 AM JST
dummy_id
* Thu 21 May 2015 02:50:08 AM JST
self.dummy_id
* Thu 21 May 2015 02:50:25 AM JST
self.conn.core.DestroyWindow(self.dummy_id)
* Thu 21 May 2015 02:50:27 AM JST
dummy_id
* Thu 21 May 2015 02:50:27 AM JST
self.dummy_id
* Thu 21 May 2015 02:50:46 AM JST
EventLoop.get_instance().dispatch_event()
* Thu 21 May 2015 02:50:51 AM JST
self.assertTrue(self.wm.find_windows(WindowIDSpec(wid)))
* Thu 21 May 2015 02:53:57 AM JST
flush()
* Thu 21 May 2015 02:56:40 AM JST
wid
* Thu 21 May 2015 02:56:52 AM JST
wid
* Thu 21 May 2015 02:58:20 AM JST
window
* Thu 21 May 2015 02:58:22 AM JST
notify_
* Thu 21 May 2015 03:00:32 AM JST
get_id()
* Thu 21 May 2015 03:00:43 AM JST
window
* Thu 21 May 2015 03:01:01 AM JST
delwin
* Thu 21 May 2015 03:01:12 AM JST
destroying
* Thu 21 May 2015 03:05:32 AM JST
WindowManager._instance
* Thu 21 May 2015 04:38:25 AM JST
Pieace
* Thu 21 May 2015 08:55:36 AM JST
KEY_L)
* Thu 21 May 2015 08:55:36 AM JST
uinput.KEY_L)
* Thu 21 May 2015 09:12:04 AM JST
PyKeyboard
* Thu 21 May 2015 09:13:37 AM JST
from pykeyboard import PyKeyboard
* Thu 21 May 2015 09:18:22 AM JST
Control_L
* Thu 21 May 2015 09:18:54 AM JST

* Thu 21 May 2015 09:18:58 AM JST
k.press_key('Control_L')
* Thu 21 May 2015 09:19:03 AM JST
k.press
* Thu 21 May 2015 09:19:03 AM JST
k.press
* Thu 21 May 2015 09:19:03 AM JST
k.press
* Thu 21 May 2015 09:22:01 AM JST
_key('Control_L')
* Thu 21 May 2015 09:48:00 AM JST
c.core.SendEvent.ButtonPress(0,54525974,1,0,0,482,54525974,0,0,0,75,130,0,1)
* Thu 21 May 2015 09:48:10 AM JST
c.core.SendEvent.ButtonPress(0,54525974,1,0,0,482,54525974,0,0,0,75,130,0,1)
* Thu 21 May 2015 09:48:16 AM JST
c.core.SendEvent.ButtonPress(0,54525974,1,0,0,482,54525974,0,0,0,75,130,0,1)
* Thu 21 May 2015 09:48:54 AM JST
active_window()
* Thu 21 May 2015 09:49:11 AM JST
56623126
* Thu 21 May 2015 09:49:15 AM JST
c.core.SendEvent.ButtonPress(0,54525974,1,0,0,482,54525974,0,0,0,75,130,0,1)
* Thu 21 May 2015 09:49:25 AM JST
SendEvent.
* Thu 21 May 2015 09:49:30 AM JST
(0,54525974,1,0,0,482,54525974,0,0,0,75,130,0,1)
* Thu 21 May 2015 09:54:43 AM JST
EventMask.ButtonPress
* Thu 21 May 2015 09:55:15 AM JST
56623126
* Thu 21 May 2015 09:56:10 AM JST
c.core.SendEvent(False, 56623126, xcb.xproto.EventMask.ButtonPress, )
* Thu 21 May 2015 09:56:17 AM JST
c.core.SendEvent(False, 56623126, xcb.xproto.EventMask.ButtonPress, )
* Thu 21 May 2015 09:58:17 AM JST
56623126
* Thu 21 May 2015 09:59:01 AM JST
56623126
* Thu 21 May 2015 09:59:57 AM JST
KeyPress
* Thu 21 May 2015 09:59:57 AM JST
EventCode.KeyPress
* Thu 21 May 2015 09:59:57 AM JST
xproto.EventCode.KeyPress
* Thu 21 May 2015 09:59:58 AM JST
xcb.xproto.EventCode.KeyPress
* Thu 21 May 2015 10:00:03 AM JST
'\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00`\x03\x00\x00\x00\x00d\x00d\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 21 May 2015 10:00:09 AM JST
c.core.SendEvent(False, 56623126, xcb.xproto.EventMask.ButtonPress, )
* Thu 21 May 2015 10:00:27 AM JST
c.core.SendEvent(False, 56623126, xcb.xproto.EventMask.ButtonPress, )
* Thu 21 May 2015 10:00:36 AM JST
'\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00`\x03\x00\x00\x00\x00d\x00d\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 21 May 2015 10:01:46 AM JST
pack('BBH4I5HBx', 4, 1, 0, 0, 482, 56623126, 0, 100, 100, 0, 0, 0, 0)
* Thu 21 May 2015 10:05:16 AM JST
56623126
* Thu 21 May 2015 10:06:11 AM JST
482
* Thu 21 May 2015 10:06:13 AM JST
56623126
* Thu 21 May 2015 10:06:19 AM JST
100
* Thu 21 May 2015 10:06:21 AM JST
100
* Thu 21 May 2015 10:06:40 AM JST
pack('BBH4I5HBx', code, detail, seq, time, root, window, child, rootx, rooty, eventx, eventy, state, samescreen)
* Thu 21 May 2015 10:13:26 AM JST
rooty
* Thu 21 May 2015 10:14:22 AM JST
c.core.SendEvent.ButtonPress(0,54525974,1,0,0,482,54525974,0,0,0,75,130,0,1)
* Thu 21 May 2015 10:14:26 AM JST
54525974
* Thu 21 May 2015 10:14:28 AM JST
56623126
* Thu 21 May 2015 10:15:40 AM JST
ButtonRelease
* Thu 21 May 2015 10:16:01 AM JST
c.core.SendEvent.ButtonRelease
* Thu 21 May 2015 10:16:41 AM JST
c.core.SendEvent.ButtonRelease(0,65011716, 3,0,0,482,65011716,0,150,150,0,0,0,1)
* Thu 21 May 2015 10:16:49 AM JST
65011716
* Thu 21 May 2015 10:16:52 AM JST
65011716
* Thu 21 May 2015 10:25:38 AM JST
c.core.SendEvent(False, 56623126, xcb.xproto.EventMask.ButtonRelease, pack('BBH4I5HBx', code, detail, seq, time, root, window, child, rootx, rooty, eventx, eventy, state, samescreen))
* Thu 21 May 2015 10:25:50 AM JST
samescreen
* Thu 21 May 2015 10:26:16 AM JST
rooty
* Thu 21 May 2015 10:26:18 AM JST
rootx
* Thu 21 May 2015 10:27:11 AM JST
SendEvent
* Thu 21 May 2015 10:27:22 AM JST
SendEventChecked
* Thu 21 May 2015 10:27:48 AM JST
56623126
* Thu 21 May 2015 10:27:53 AM JST
eventx
* Thu 21 May 2015 10:27:55 AM JST
eventy
* Thu 21 May 2015 10:33:14 AM JST
ButtonIndex
* Thu 21 May 2015 10:40:16 AM JST
sendkey
* Thu 21 May 2015 10:47:20 AM JST
56623126
* Thu 21 May 2015 10:49:51 AM JST
23068676
* Thu 21 May 2015 10:51:51 AM JST
c.core.SendEventChecked(False, window, xcb.xproto.EventMask.ButtonPress, pack('BBH4I5HBx', code, detail, seq, time, root, window, child, rootx, rooty, eventx, eventy, state, 1))
* Thu 21 May 2015 10:57:42 AM JST
c.core.SendEvent(False, window, xcb.xproto.EventMask.ButtonPress, pack('BBH4I5HBx', 4, 3, 0, 0, 482, window, 0, 0, 0, 100, 100, 0, 1))
* Thu 21 May 2015 10:59:41 AM JST
c.core.SendEvent(False, window, xcb.xproto.EventMask.ButtonPress, pack('BBH4I5HBx', 4, 3, 0, 0, 482, window, 0, 0, 0, 100, 100, 0, 1)
* Thu 21 May 2015 11:00:39 AM JST
23068676
* Thu 21 May 2015 11:00:47 AM JST
window=23068676
* Thu 21 May 2015 11:00:53 AM JST
c.core.SendEvent(False, window, xcb.xproto.EventMask.ButtonPress, pack('BBH4I5HBx', 4, 3, 0, 0, 482, window, 0, 0, 0, 100, 100, 0, 1)
* Thu 21 May 2015 11:02:00 AM JST
c.core.SendEvent(False, window, xcb.xproto.EventMask.ButtonPress, pack('BBH4I5HBx', 4, 3, 0, 0, 482, window, 0, 100, 100, 0, 0, 0, 1))
* Thu 21 May 2015 11:03:00 AM JST
c.core.SendEvent(False, window, xcb.xproto.EventMask.ButtonPress, pack('BBH4I5HBx', 4, 3, 0, 0, 482, window, 0, 100, 100, 0, 0, 0, 1))
* Thu 21 May 2015 11:03:03 AM JST
window=23068676
* Thu 21 May 2015 11:04:36 AM JST
window=23068676
* Fri 22 May 2015 12:03:35 AM JST
from _xahk.window_manager import WindowManager
from _xahk.bind_candidate import BindCandidate
from _xahk.input_command import InputDebug, SendKeyCommand
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.bind_manager import BindManager
from _xahk.eventloop import EventLoop
kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), SendKeyCommand('b'))
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()
loop=EventLoop.get_instance()
while 1:
        loop.dispatch_event()

* Fri 22 May 2015 12:06:01 AM JST
from _xahk.window_manager import WindowManager
from _xahk.bind_candidate import BindCandidate
from _xahk.input_command import InputDebug, SendKeyCommand
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.bind_manager import BindManager
from _xahk.eventloop import EventLoop
kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), SendKeyCommand('b'))
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()
loop=EventLoop.get_instance()

* Fri 22 May 2015 12:06:27 AM JST
while 1:
    loop.dispatch_event()

* Fri 22 May 2015 12:06:58 AM JST
        
* Fri 22 May 2015 12:07:06 AM JST
root_x
* Fri 22 May 2015 01:15:19 AM JST
hello')
* Fri 22 May 2015 01:15:20 AM JST
typewrite('hello')
* Fri 22 May 2015 03:14:36 AM JST
c.core.QueryPointer()
* Fri 22 May 2015 03:14:39 AM JST
c.core.QueryPointer()
* Fri 22 May 2015 03:14:43 AM JST
_x
* Fri 22 May 2015 03:14:43 AM JST
form _x
* Fri 22 May 2015 03:15:29 AM JST
56623126
* Fri 22 May 2015 03:16:04 AM JST
root_y
* Fri 22 May 2015 03:18:25 AM JST
class XPieces:
    """Class XPieces
    """
    # Attributes:
    display = None  # () 
    modifiers = None  # (Modifiers) 
    
    # Operations
    def press(self, window = None, x = 0, y = 0):
        """function press
        
        window: int
        x: 
        y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def release(self, window = None, x = 0, y = 0):
        """function release
        
        window: int
        x: 
        y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def press_impl(self, window, x, y):
        """function press_impl
        
        window: 
        x: 
        y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def release_impl(self, window, x, y):
        """function release_impl
        
        window: 
        x: 
        y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def tap(self, window = None, x = 0, y = 0):
        """function tap
        
        window: Window
        x: 
        y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_modifier(self, modifier):
        """function add_modifier
        
        modifier: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_modifier(self, modifier):
        """function remove_modifier
        
        modifier: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_modifiers(self, mod):
        """function set_modifiers
        
        mod: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_modifiers(self):
        """function get_modifiers
        
        returns Modifiers
        """
        return None # should raise NotImplementedError()
    


* Fri 22 May 2015 03:19:59 AM JST
display, 
* Fri 22 May 2015 03:20:00 AM JST

* Fri 22 May 2015 03:20:00 AM JST

* Fri 22 May 2015 03:20:00 AM JST
        self._display = display

* Fri 22 May 2015 03:20:11 AM JST
return None # should raise NotImplementedError()
* Fri 22 May 2015 03:20:27 AM JST
return None # should raise NotImplementedError()
* Fri 22 May 2015 03:20:30 AM JST
press
* Fri 22 May 2015 03:20:43 AM JST
return None # should raise NotImplementedError()
* Fri 22 May 2015 03:20:46 AM JST
return None # should raise NotImplementedError()
* Fri 22 May 2015 03:20:48 AM JST
pas
* Fri 22 May 2015 03:20:53 AM JST
pass
* Fri 22 May 2015 03:21:15 AM JST
None
* Fri 22 May 2015 03:21:20 AM JST
None
* Fri 22 May 2015 03:21:22 AM JST
None
* Fri 22 May 2015 03:21:31 AM JST
return None # should raise NotImplementedError()
* Fri 22 May 2015 03:22:11 AM JST
return None # should raise NotImplementedError()
* Fri 22 May 2015 03:22:21 AM JST
return None # should raise NotImplementedError()
* Fri 22 May 2015 03:22:24 AM JST
_
* Fri 22 May 2015 03:22:25 AM JST
self._
* Fri 22 May 2015 03:23:06 AM JST
return None # should raise NotImplementedError()
* Fri 22 May 2015 03:23:28 AM JST
None # should raise NotImplementedError()
* Fri 22 May 2015 03:25:36 AM JST
display
* Fri 22 May 2015 03:25:36 AM JST
0, display
* Fri 22 May 2015 03:26:19 AM JST
xproto
* Fri 22 May 2015 03:32:22 AM JST
from enum import IntEnum as _IntEnum


class EventCode(_IntEnum):
    r"""SUMMARY
    """
    KeyPress         = 2
    KeyRelease       = 3
    ButtonPress      = 4
    ButtonRelease    = 5
    MotionNotify     = 6
    EnterNotify      = 7
    LeaveNotify      = 8
    FocusIn          = 9
    FocusOut         = 10
    KeymapNotify     = 11
    Expose           = 12
    GraphicsExposure = 13
    NoExposure       = 14
    VisibilityNotify = 15
    CreateNotify     = 16
    DestroyNotify    = 17
    UnmapNotify      = 18
    MapNotify        = 19
    MapRequest       = 20
    ReparentNotify   = 21
    ConfigureNotify  = 22
    ConfigureRequest = 23
    GravityNotify    = 24
    ResizeRequest    = 25
    CirculateNotify  = 26
    CirculateRequest = 27
    PropertyNotify   = 28
    SelectionClear   = 29
    SelectionRequest = 30
    SelectionNotify  = 31
    ColormapNotify   = 32
    ClientMessage    = 33
    MappingNotify    = 34

* Fri 22 May 2015 03:32:54 AM JST
EventCode
* Fri 22 May 2015 03:33:47 AM JST
EventCode
* Fri 22 May 2015 03:34:27 AM JST
ButtonPress
* Fri 22 May 2015 03:36:45 AM JST
f
* Fri 22 May 2015 03:36:46 AM JST
sle.f
* Fri 22 May 2015 03:37:18 AM JST
get
* Fri 22 May 2015 03:37:18 AM JST
core.get
* Fri 22 May 2015 03:37:45 AM JST
c.get_setup().roots[0].root
* Fri 22 May 2015 03:37:49 AM JST
get_setup().roots[0].root
* Fri 22 May 2015 03:39:39 AM JST
root
* Fri 22 May 2015 03:39:39 AM JST
0].root
* Fri 22 May 2015 03:39:39 AM JST
roots[0].root
* Fri 22 May 2015 03:39:39 AM JST
get_setup().roots[0].root
* Fri 22 May 2015 03:39:39 AM JST
display.get_setup().roots[0].root
* Fri 22 May 2015 03:39:40 AM JST
self.display.get_setup().roots[0].root
* Fri 22 May 2015 03:40:51 AM JST
y, 
* Fri 22 May 2015 03:40:51 AM JST
x, y, 
* Fri 22 May 2015 03:41:06 AM JST
root
* Fri 22 May 2015 03:41:29 AM JST
roots
* Fri 22 May 2015 03:42:20 AM JST
                                    
* Fri 22 May 2015 03:42:21 AM JST
                                    
* Fri 22 May 2015 03:42:47 AM JST
pack('BBH4I5HBx',
                                         EventCode.KeyPress,
                                         self.code,
                                         self.sequence,
                                         self.time,
                                         self.root,
                                         window,
                                         self.child,
                                         self.rootx,
                                         self.rooty,
                                         x,
                                         y,
                                         self.modifier,
                                         self.samescreen)
* Fri 22 May 2015 03:42:50 AM JST
                                         
* Fri 22 May 2015 03:42:52 AM JST
                                 
* Fri 22 May 2015 03:42:54 AM JST
                                         
* Fri 22 May 2015 03:43:01 AM JST
                               
* Fri 22 May 2015 03:43:49 AM JST
        event = pack('BBH4I5HBx', EventCode.KeyPress, self.code, self.sequence,
                     self.time, self.root, window, self.child, self.rootx,
                     self.rooty, x, y, self.modifier, self.samescreen)
        self.display.core.SendEvent(False, window, EventMask.KeyPress, event)

* Fri 22 May 2015 03:44:34 AM JST
self._modifier = modifier
* Fri 22 May 2015 03:44:45 AM JST
f
* Fri 22 May 2015 03:44:45 AM JST
lse.f
* Fri 22 May 2015 03:44:56 AM JST
    sequence = 0
    time = 0
    _root = None
    child = 0
    rootx = 0
    rooty = 0
    samescreen = 1

* Fri 22 May 2015 03:45:04 AM JST
    @property
    def root(self, ):
        r"""SUMMARY

        root()

        @Return:

        @Error:
        """
        if self._root is None:
            XKey._root = self.display.get_setup().roots[0].root
        return self._root

* Fri 22 May 2015 03:45:30 AM JST
XKey
* Fri 22 May 2015 03:47:49 AM JST
        event = pack('BBH4I5HBx', EventCode.KeyRelease, self.code, self.sequence,
                     self.time, self.root, window, self.child, self.rootx,
                     self.rooty, x, y, self.modifier, self.samescreen)

* Fri 22 May 2015 03:47:54 AM JST
KeyRelease
* Fri 22 May 2015 03:48:13 AM JST
        self.display.core.SendEvent(False, window, EventMask.KeyRelease, event)

* Fri 22 May 2015 03:48:16 AM JST
KeyRelease
* Fri 22 May 2015 03:48:45 AM JST
        event = pack('BBH4I5HBx', EventCode.ButtonPress, self.code,
                     self.sequence, self.time, self.root, window, self.child,
                     self.rootx, self.rooty, x, y, self.modifier,
                     self.samescreen)
        self.display.core.SendEvent(False, window, EventMask.ButtonPress, event)

* Fri 22 May 2015 03:51:05 AM JST
press()
* Fri 22 May 2015 03:51:05 AM JST
k.press()
* Fri 22 May 2015 03:51:31 AM JST
56623126
* Fri 22 May 2015 03:52:45 AM JST
class Piece(object):
    """Class XPiece
    """
    # Attributes:
    def __init__(self, modifier=0):
        r"""

        @Arguments:
        - `display`:
        - `modifier`:
        """
        self.modifier = modifier

    # Operations
    def press(self, window, x=0, y=0):
        """function press

        window: int
        x:
        y:

        returns
        """
        self.press_impl(window, x, y)

    def release(self, window, x=0, y=0):
        """function release

        window: int
        x:
        y:

        returns
        """
        self.release_impl(window, x, y)

    def press_impl(self, window, x, y):
        """function press_impl

        window:
        x:
        y:

        returns
        """
        raise NotImplementedError()

    def release_impl(self, window, x, y):
        """function release_impl

        window:
        x:
        y:

        returns
        """
        raise NotImplementedError()

    def tap(self, window, x=0, y=0):
        """function tap

        window: Window
        x:
        y:

        returns
        """
        self.press(window, x, y)
        self.release(window, x, y)

    def add_modifier(self, modifier):
        """function add_modifier

        modifier:

        returns
        """
        self.modifier |= modifier

    def remove_modifier(self, modifier):
        """function remove_modifier

        modifier:

        returns
        """
        self.modifier ^= modifier

    def set_modifiers(self, modifier):
        """function set_modifiers

        mod: int

        returns None
        """
        self.modifier = modifier

    def get_modifiers(self):
        """function get_modifiers

        returns Modifiers
        """
        return self.modifier

* Fri 22 May 2015 03:54:20 AM JST
class XPiece(Piece):
    r"""XPiece

    XPiece is a Piece.
    Responsibility:
    """
    sequence = 0
    time = 0
    _root = None
    child = 0
    rootx = 0
    rooty = 0
    samescreen = 1

    def __init__(self, modifier=0):
        r"""

        @Arguments:
        - `modifier`:
        """
        super(XPiece, self).__init__(modifier)
        self.display = get_display()

    @property
    def root(self, ):
        r"""SUMMARY

        root()

        @Return:

        @Error:
        """
        if self._root is None:
            XPiece._root = self.display.get_setup().roots[0].root
        return self._root

* Fri 22 May 2015 03:54:30 AM JST
from _xahk.display import get_display
* Fri 22 May 2015 03:54:36 AM JST
from xcb.xproto import EventMask
from _xahk.eventcode import EventCode

* Fri 22 May 2015 03:54:47 AM JST
_
* Fri 22 May 2015 03:54:47 AM JST
form _
* Fri 22 May 2015 03:55:46 AM JST
class XKey(XPiece):
    r"""XKey

    XKey is a XPieces.
    Responsibility:
    """

    def __init__(self, code, modifier=0):
        r"""

        @Arguments:
        - `code`:
        - `modifier`:
        """
        super(XKey, self).__init__(modifier)
        self.code = code

    def press_impl(self, window, x, y):
        r"""SUMMARY

        press_impl(window, x, y)

        @Arguments:
        - `window`:
        - `x`:
        - `y`:

        @Return:

        @Error:
        """
        event = pack('BBH4I5HBx', EventCode.KeyPress, self.code, self.sequence,
                     self.time, self.root, window, self.child, self.rootx,
                     self.rooty, x, y, self.modifier, self.samescreen)
        self.display.core.SendEvent(False, window, EventMask.KeyPress, event)

    def release_impl(self, window, x, y):
        r"""SUMMARY

        release_impl(window, x, y)

        @Arguments:
        - `window`:
        - `x`:
        - `y`:

        @Return:

        @Error:
        """
        event = pack('BBH4I5HBx', EventCode.KeyRelease, self.code, self.sequence,
                     self.time, self.root, window, self.child, self.rootx,
                     self.rooty, x, y, self.modifier, self.samescreen)
        self.display.core.SendEvent(False, window, EventMask.KeyRelease, event)


class XButton(XPiece):
    r"""XButton

    XButton is a XPiece.
    Responsibility:
    """
    def __init__(self, code, modifier=0):
        r"""

        @Arguments:
        - `code`:
        - `modifier`:
        """
        super(XButton, self).__init__(modifier)
        self.code = code

    def press_impl(self, window, x, y):
        r"""SUMMARY

        press_impl(window, x, y)

        @Arguments:
        - `window`:
        - `x`:
        - `y`:

        @Return:

        @Error:
        """
        event = pack('BBH4I5HBx', EventCode.ButtonPress, self.code,
                     self.sequence, self.time, self.root, window, self.child,
                     self.rootx, self.rooty, x, y, self.modifier,
                     self.samescreen)
        self.display.core.SendEvent(False, window, EventMask.ButtonPress, event)

    def release_impl(self, window, x, y):
        r"""SUMMARY

        release_impl(window, x, y)

        @Arguments:
        - `window`:
        - `x`:
        - `y`:

        @Return:

        @Error:
        """
        event = pack('BBH4I5HBx', EventCode.ButtonRelease, self.code,
                     self.sequence, self.time, self.root, window, self.child,
                     self.rootx, self.rooty, x, y, self.modifier,
                     self.samescreen)
        self.display.core.SendEvent(
            False, window, EventMask.ButtonRelease, event)

* Fri 22 May 2015 03:57:47 AM JST
    def get_modifiers(self):
        """function get_modifiers

        returns Modifiers
        """
        return self.modifier


* Fri 22 May 2015 04:00:20 AM JST
from _xahk.window_manager import WindowManager
* Fri 22 May 2015 04:00:40 AM JST
56623126
* Fri 22 May 2015 04:00:44 AM JST
emacs=56623126
* Fri 22 May 2015 04:04:34 AM JST
56623126
* Fri 22 May 2015 04:11:59 AM JST
    Shift     = 1
    Lock      = 2
    Control   = 4
    Alt       = 8
    Mod2      = 16
    Mod3      = 32
    Super     = 64
    Mod5      = 128
    Left      = 256
    Middle    = 512
    Right     = 1024
    WheelUp   = 2048
    WheelDown = 4096

* Fri 22 May 2015 04:12:25 AM JST
    Null      = 0
    Shift     = 1
    Lock      = 1 << 1
    Control   = 1 << 2
    Alt       = 1 << 3
    Numlock   = 1 << 4
    Hiper     = 1 << 5
    Super     = 1 << 6
    Mod5      = 1 << 7
    Left      = 1 << 8
    Middle    = 1 << 9
    Right     = 1 << 10
    WheelUp   = 1 << 11
    WheelDown = 1 << 12
    Any       = 1 << 15 # 32768

* Fri 22 May 2015 04:12:36 AM JST
2048
* Fri 22 May 2015 04:13:23 AM JST

* Fri 22 May 2015 04:13:26 AM JST
4096
* Fri 22 May 2015 04:22:18 AM JST
56623126
* Fri 22 May 2015 04:23:30 AM JST
X11Piece
* Fri 22 May 2015 04:24:02 AM JST
56623126
* Fri 22 May 2015 04:26:07 AM JST
from _xahk.piece.x11_piece import X11Key
* Fri 22 May 2015 04:26:24 AM JST
k=X11Key(38)
* Fri 22 May 2015 04:26:34 AM JST
from _xahk.piece.x11_piece import X11Key
k=X11Key(38)

* Fri 22 May 2015 04:26:42 AM JST
56623126
* Fri 22 May 2015 04:26:50 AM JST
display
* Fri 22 May 2015 04:27:47 AM JST
56623126
* Fri 22 May 2015 04:28:19 AM JST
56623126
* Fri 22 May 2015 04:29:32 AM JST
k=X11Key(38)
* Fri 22 May 2015 04:29:48 AM JST

* Fri 22 May 2015 04:29:49 AM JST

* Fri 22 May 2015 04:29:49 AM JST
    _root = None

* Fri 22 May 2015 04:29:59 AM JST
self.display.get_setup().roots[0].root
* Fri 22 May 2015 04:39:56 AM JST
from _xahk.window_manager import WindowManager
* Fri 22 May 2015 04:40:24 AM JST
23068676
* Fri 22 May 2015 04:40:34 AM JST
23068676
* Fri 22 May 2015 04:40:39 AM JST
from _xahk.piece.x11_piece import X11Key
* Fri 22 May 2015 04:41:25 AM JST
23068676
* Fri 22 May 2015 04:57:14 AM JST
None # should raise NotImplementedError()
* Fri 22 May 2015 04:57:39 AM JST
56623126
* Fri 22 May 2015 04:58:15 AM JST
width
* Fri 22 May 2015 04:58:40 AM JST
_
* Fri 22 May 2015 04:58:40 AM JST
form _
* Fri 22 May 2015 05:00:08 AM JST
23068676
* Fri 22 May 2015 05:00:15 AM JST
height
* Fri 22 May 2015 05:01:39 AM JST
23068676
* Fri 22 May 2015 05:03:03 AM JST
ConfigureWindow
* Fri 22 May 2015 05:11:49 AM JST
23068676
* Fri 22 May 2015 05:12:08 AM JST
TranslateCoordinates
* Fri 22 May 2015 05:12:38 AM JST
23068676
* Fri 22 May 2015 05:15:35 AM JST
dst_y
* Fri 22 May 2015 05:19:11 AM JST
Display
* Fri 22 May 2015 05:19:13 AM JST
display
* Fri 22 May 2015 05:19:26 AM JST
Window
* Fri 22 May 2015 05:19:28 AM JST
window
* Fri 22 May 2015 05:19:37 AM JST
Drawable
* Fri 22 May 2015 05:19:51 AM JST
23068676
* Fri 22 May 2015 05:26:03 AM JST
23068676
* Fri 22 May 2015 05:31:14 AM JST
Window()
* Fri 22 May 2015 05:35:24 AM JST
from _xahk.window_manager import WindowManager
* Fri 22 May 2015 05:36:05 AM JST
Reply
* Fri 22 May 2015 05:36:22 AM JST
wm=WindowManager.get_instance()
* Fri 22 May 2015 05:37:16 AM JST
width
* Fri 22 May 2015 05:37:41 AM JST
44)
* Fri 22 May 2015 05:37:41 AM JST
b', 44)
* Fri 22 May 2015 05:37:42 AM JST
pack('b', 44)
* Fri 22 May 2015 05:39:03 AM JST
_NET_CLIENT_LIST
* Fri 22 May 2015 05:40:36 AM JST
changed 
* Fri 22 May 2015 05:48:03 AM JST
EventMask
* Fri 22 May 2015 05:48:13 AM JST
ConfigWindow
* Fri 22 May 2015 05:48:33 AM JST
form 
* Fri 22 May 2015 05:48:57 AM JST
bounds
* Fri 22 May 2015 05:51:23 AM JST
return None # should raise NotImplementedError()
* Fri 22 May 2015 05:51:40 AM JST
D c.core
* Fri 22 May 2015 05:51:41 AM JST
D c.core
* Fri 22 May 2015 05:52:37 AM JST
from _xahk.window_manager import WindowManager
* Fri 22 May 2015 05:55:14 AM JST
23068676
* Fri 22 May 2015 05:55:47 AM JST
border_width
* Fri 22 May 2015 05:56:14 AM JST
23068676
* Fri 22 May 2015 05:56:37 AM JST
c.core.TranslateCoordinates(23068676, 482, )
* Fri 22 May 2015 05:56:46 AM JST
depth
* Fri 22 May 2015 05:56:51 AM JST
c.core.GetGeometry(23068676).reply().x
* Fri 22 May 2015 05:56:53 AM JST
c.core.TranslateCoordinates(23068676, 482, )
* Fri 22 May 2015 05:57:18 AM JST
child
* Fri 22 May 2015 05:58:09 AM JST
same_screen
* Fri 22 May 2015 05:59:45 AM JST
dst_x
* Fri 22 May 2015 05:59:45 AM JST
reply.dst_x
* Fri 22 May 2015 05:59:48 AM JST
dst_y
* Fri 22 May 2015 05:59:49 AM JST
reply.dst_y
* Fri 22 May 2015 06:00:01 AM JST
rep.dst_x
* Fri 22 May 2015 06:00:13 AM JST
from _xahk.window_manager import WindowManager
wm=WindowManager.get_instance()
sleep(2);wm.get_active_window()
sleep(2);w=wm.get_active_window()

* Fri 22 May 2015 06:00:18 AM JST

* Fri 22 May 2015 06:00:18 AM JST

* Fri 22 May 2015 06:00:18 AM JST
sleep(2);wm.get_active_window()

* Fri 22 May 2015 06:00:29 AM JST
r=w.get_bounds()

* Fri 22 May 2015 06:00:33 AM JST
w.set_bounds(r)

* Fri 22 May 2015 06:00:43 AM JST
from _xahk.window_manager import WindowManager
wm=WindowManager.get_instance()
sleep(2);w=wm.get_active_window()
r=w.get_bounds()

* Fri 22 May 2015 06:00:54 AM JST
r=w.get_bounds()
* Fri 22 May 2015 06:23:12 AM JST
_NET_WM_STATE_FULLSCREEN
* Fri 22 May 2015 06:38:35 AM JST
23068676
* Fri 22 May 2015 07:55:13 AM JST
get_property
* Fri 22 May 2015 07:56:57 AM JST
w.get_property(404, 4)
* Fri 22 May 2015 07:59:04 AM JST
23068676
* Fri 22 May 2015 08:00:53 AM JST
CARDINAL
* Fri 22 May 2015 08:01:15 AM JST
list(
* Fri 22 May 2015 08:05:19 AM JST
WM_CHANGE_STATE
* Fri 22 May 2015 08:06:59 AM JST
_NET_WM_STATE_HIDDEN
* Fri 22 May 2015 08:15:04 AM JST
Xatom.h
* Fri 22 May 2015 08:17:09 AM JST
/usr/share/pyshared/
* Fri 22 May 2015 08:22:20 AM JST
NormalState = 1
IconicState = 3

* Fri 22 May 2015 08:30:49 AM JST
"WM_CHANGE_STATE"
* Fri 22 May 2015 08:33:50 AM JST
23068676
* Fri 22 May 2015 08:36:57 AM JST
   1     33                              code
     1     CARD8                           format
     2     CARD16                          sequence number
     4     WINDOW                          window
     4     ATOM                            type
     20                                    data
* Fri 22 May 2015 08:42:02 AM JST
15Status XIconifyWindow(Display *dpy, Window w, int screen)
16{
17    XClientMessageEvent ev;
18    Atom prop;
19
20    prop = XInternAtom(dpy, "WM_CHANGE_STATE", False);
21    if(prop == None)
22	return False;
23
24    ev.type = ClientMessage;
25    ev.window = w;
26    ev.message_type = prop;
27    ev.format = 32;
28    ev.data.l[0] = IconicState;
29    return XSendEvent(dpy, RootWindow(dpy, screen), False,
30			SubstructureRedirectMask|SubstructureNotifyMask,
31			(XEvent *)&ev);
32}
33
* Fri 22 May 2015 08:42:06 AM JST
True
* Fri 22 May 2015 08:42:34 AM JST
c.core.SendEvent(False, 482, )
* Fri 22 May 2015 08:43:29 AM JST
false
* Fri 22 May 2015 08:45:01 AM JST
data=pack('5I', 3,0,0,0,0)
data
c.core.InternAtom(False, len("WM_CHANGE_STATE"), "WM_CHANGE_STATE")
c.core.InternAtom(False, len("WM_CHANGE_STATE"), "WM_CHANGE_STATE").reply().atom
mtype=pack('I', 402)
mtype
fmt=pack('B', 32)
fmt
win=pack('I', 23068676)
win
client=pack('B', 33)
client
mask=pack('I',0xffffff)
mask
code
client
client + fmt
seq=pack('H', 0)
seq
client + fmt + seq + win + mtype
client + fmt + seq + win + mtype + data
dat=client + fmt + seq + win + mtype + data
c.core.SendEvent?
mask
c.core.SendEvent(False, 482, 0xffffff, dat)
c.flush()

* Fri 22 May 2015 08:54:31 AM JST
ZoomState = 2
* Fri 22 May 2015 08:54:51 AM JST
InactiveState = 4
* Fri 22 May 2015 08:55:01 AM JST
WithdrawnState = 0
* Fri 22 May 2015 08:55:57 AM JST
WM_CHANGE_STATE
* Fri 22 May 2015 08:58:30 AM JST
from cStringIO import StringIO
* Fri 22 May 2015 08:58:44 AM JST

* Fri 22 May 2015 08:58:44 AM JST

* Fri 22 May 2015 08:58:44 AM JST
from cStringIO import StringIO

* Fri 22 May 2015 08:59:48 AM JST
form 
* Fri 22 May 2015 09:06:40 AM JST
WM_CHANGE_STATE
* Fri 22 May 2015 09:08:02 AM JST
SubstructureRedirectMask|SubstructureNotifyMask
* Fri 22 May 2015 09:08:29 AM JST
SubstructureRedirect
* Fri 22 May 2015 09:08:38 AM JST
SubstructureNotify
* Fri 22 May 2015 09:09:03 AM JST
            
* Fri 22 May 2015 09:10:34 AM JST
from _xahk.window_manager import WindowManager
wm=WindowManager.get_instance()

* Fri 22 May 2015 09:12:33 AM JST
'WM_CHANGE_STATE'
* Fri 22 May 2015 09:12:35 AM JST
w._atom_cache.get_atom('
* Fri 22 May 2015 09:12:41 AM JST
'WM_CHANGE_STATE'
* Fri 22 May 2015 09:15:33 AM JST
ChangingWindowState
* Fri 22 May 2015 09:33:07 AM JST
_NET_WM_STATE_HIDDEN
* Fri 22 May 2015 09:38:34 AM JST
23068676
* Fri 22 May 2015 09:38:49 AM JST
c.core.GetProperty(False, 23068676, )
* Fri 22 May 2015 09:38:55 AM JST
c.core.GetProperty(False, 23068676, )
* Fri 22 May 2015 09:39:18 AM JST
_NET_WM_STATE
* Fri 22 May 2015 09:39:44 AM JST
23068676
* Fri 22 May 2015 09:40:29 AM JST
value_len
* Fri 22 May 2015 09:42:19 AM JST
_NET_WM_STATE
* Fri 22 May 2015 09:43:27 AM JST
list(
* Fri 22 May 2015 09:43:52 AM JST
str(
* Fri 22 May 2015 09:44:07 AM JST
'}\x01\x00\x00'
* Fri 22 May 2015 09:44:16 AM JST
'_NET_WM_STATE_HIDDEN'
* Fri 22 May 2015 09:44:27 AM JST
w._atom_cache.get_atom('
* Fri 22 May 2015 09:44:33 AM JST
'_NET_WM_STATE_HIDDEN'
* Fri 22 May 2015 09:45:42 AM JST
self.
* Fri 22 May 2015 09:46:02 AM JST
293
* Fri 22 May 2015 09:46:40 AM JST
str(
* Fri 22 May 2015 09:46:48 AM JST
value.
* Fri 22 May 2015 09:46:50 AM JST
format
* Fri 22 May 2015 09:46:57 AM JST
ReplyType32
* Fri 22 May 2015 09:49:23 AM JST
293
* Fri 22 May 2015 09:50:50 AM JST
'_NET_WM_STATE'
* Fri 22 May 2015 09:51:07 AM JST
salef.
* Fri 22 May 2015 09:51:44 AM JST
'_NET_WM_STATE_HIDDEN'
* Fri 22 May 2015 09:53:20 AM JST
from _xahk.window_manager import WindowManager
wm=WindowManager.get_instance()
sleep(2);w=wm.get_active_window()

* Fri 22 May 2015 09:56:13 AM JST
        event = StringIO()
        # code, format, sequence_number, window, message type, data
        event.write(_pack('BBHII5I', EventCode.ClientMessage, 32, 0, self.id,
                          self._atom_cache.get_atom('WM_CHANGE_STATE'),
                          ChangingWindowState.ICONIC_STATE, 0, 0, 0, 0))
        self._display.core.SendEventChecked(
            False, self._root,
            # EventMask.SubstructureRedirect | EventMask.SubstructureNotify,
            0xffffff, event.getvalue())

* Fri 22 May 2015 09:56:20 AM JST
ICONIC
* Fri 22 May 2015 09:56:40 AM JST

    def show(self, ):
        r"""SUMMARY

        show()

        @Return:

        @Error:
        """
        event = StringIO()
        # code, format, sequence_number, window, message type, data
        event.write(_pack('BBHII5I', EventCode.ClientMessage, 32, 0, self.id,
                          self._atom_cache.get_atom('WM_CHANGE_STATE'),
                          ChangingWindowState.NORMAL_STATE, 0, 0, 0, 0))
        self._display.core.SendEventChecked(
            False, self._root,
            # EventMask.SubstructureRedirect | EventMask.SubstructureNotify,
            0xffffff, event.getvalue())

* Fri 22 May 2015 09:58:07 AM JST
from _xahk.window_manager import WindowManager
wm=WindowManager.get_instance()
sleep(2);w=wm.get_active_window()

* Fri 22 May 2015 11:11:04 PM JST
class X11DesktopHandler(EventDispatcher):
    """Class X11DesktopHandler
    """
    # Attributes:
    __current_window = None  # () 
    __display = None  # () 
    __atom_cache = None  # () 
    __observers = None  # () 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def activate_window(self, window):
        """function activate_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def deactivate_window(self, window):
        """function deactivate_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_active_window(self, window):
        """function is_active_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_observer(self, observer):
        """function add_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_observer(self, observer):
        """function remove_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_changed_active_window(self):
        """function notify_changed_active_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 22 May 2015 11:11:07 PM JST
from EventDispatcher import EventDispatcher

class X11DesktopHandler(EventDispatcher):
    """Class X11DesktopHandler
    """
    # Attributes:
    __current_window = None  # () 
    __display = None  # () 
    __atom_cache = None  # () 
    __observers = None  # () 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def activate_window(self, window):
        """function activate_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def deactivate_window(self, window):
        """function deactivate_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_active_window(self, window):
        """function is_active_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_observer(self, observer):
        """function add_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_observer(self, observer):
        """function remove_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_changed_active_window(self):
        """function notify_changed_active_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 22 May 2015 11:12:30 PM JST
return None # should raise NotImplementedError()
* Fri 22 May 2015 11:13:58 PM JST
None
* Fri 22 May 2015 11:13:58 PM JST
None  # ()
* Fri 22 May 2015 11:17:58 PM JST
  # ()
* Fri 22 May 2015 11:18:22 PM JST
  # ()
* Fri 22 May 2015 11:18:30 PM JST
  # ()
* Fri 22 May 2015 11:18:31 PM JST
None  # ()
* Fri 22 May 2015 11:18:33 PM JST
None
* Fri 22 May 2015 11:19:03 PM JST
_NET_ACTIVE_WINDOW
* Fri 22 May 2015 11:22:25 PM JST
form 
* Fri 22 May 2015 11:25:58 PM JST
Event
* Fri 22 May 2015 11:26:16 PM JST
frm 
* Fri 22 May 2015 11:28:39 PM JST
None # should raise NotImplementedError()
* Fri 22 May 2015 11:29:12 PM JST
PropertyNotifyEvent
* Fri 22 May 2015 11:33:23 PM JST
'_NET_ACTIVE_WINDOW'
* Fri 22 May 2015 11:33:56 PM JST
                
* Fri 22 May 2015 11:42:51 PM JST
self._atom_cache.get_atom('_NET_ACTIVE_WINDOW')
* Fri 22 May 2015 11:44:24 PM JST
'_NET_ACTIVE_WINDOW'
* Fri 22 May 2015 11:45:05 PM JST
buf()
* Fri 22 May 2015 11:45:06 PM JST
value.buf()
* Fri 22 May 2015 11:47:24 PM JST
str(c.core.GetProperty(False, 482, w._atom_cache.get_atom('_NET_ACTIVE_WINDOW'), w._atom_cache.get_atom('WINDOW'), 0, 10).reply().value.buf())
* Fri 22 May 2015 11:49:17 PM JST
32
* Fri 22 May 2015 11:49:19 PM JST
_aotm.
* Fri 22 May 2015 11:53:18 PM JST

* Fri 22 May 2015 11:53:18 PM JST

* Fri 22 May 2015 11:53:18 PM JST
        return None # should raise NotImplementedError()

* Fri 22 May 2015 11:53:24 PM JST
return None # should raise NotImplementedError()
* Fri 22 May 2015 11:54:25 PM JST
None # should raise NotImplementedError()
* Fri 22 May 2015 11:54:36 PM JST
return None # should raise NotImplementedError()
* Fri 22 May 2015 11:54:45 PM JST
return None # should raise NotImplementedError()
* Fri 22 May 2015 11:59:16 PM JST

* Fri 22 May 2015 11:59:16 PM JST

* Fri 22 May 2015 11:59:16 PM JST
from struct import unpack

* Sat 23 May 2015 12:00:44 AM JST
EventCode
* Sat 23 May 2015 12:01:08 AM JST
self.
* Sat 23 May 2015 12:01:29 AM JST
_root
* Sat 23 May 2015 12:01:29 AM JST
self._root
* Sat 23 May 2015 12:01:43 AM JST
self._atom_cache.get_atom('WM_CHANGE_STATE')
* Sat 23 May 2015 12:03:29 AM JST
            
* Sat 23 May 2015 12:04:00 AM JST
# EventMask.SubstructureRedirect | EventMask.SubstructureNotify,
* Sat 23 May 2015 12:04:08 AM JST
        
* Sat 23 May 2015 12:04:22 AM JST
return None # should raise NotImplementedError()
* Sat 23 May 2015 12:05:24 AM JST
X11DesktopHandler
* Sat 23 May 2015 12:05:48 AM JST
23068676
* Sat 23 May 2015 12:07:47 AM JST
None
* Sat 23 May 2015 12:09:10 AM JST
SetInputFocus
* Sat 23 May 2015 12:09:43 AM JST
23068676
* Sat 23 May 2015 12:14:00 AM JST
~/.pylib/_xahk/
* Sat 23 May 2015 12:21:07 AM JST
import pywo
* Sat 23 May 2015 12:22:32 AM JST
0xffffff
* Sat 23 May 2015 12:28:01 AM JST
'_NET_ACTIVE_WINDOW'
* Sat 23 May 2015 12:28:26 AM JST
#EventMask.SubstructureRedirect,
* Sat 23 May 2015 12:31:20 AM JST

* Sat 23 May 2015 12:31:20 AM JST

* Sat 23 May 2015 12:31:20 AM JST
        # XLowerWindow

* Sat 23 May 2015 12:31:57 AM JST
XLowerWindow
* Sat 23 May 2015 12:36:09 AM JST
X11DesktopHandler.get_instance().activate_window(self.id)
* Sat 23 May 2015 12:36:13 AM JST
activate_window
* Sat 23 May 2015 12:44:23 AM JST
        event = StringIO()
        # code, format, sequence_number, window, message type, data
        event.write(_pack('BBHII5I', EventCode.ClientMessage, 32, 0, self.id,
                          self._atom_cache.get_atom('WM_CHANGE_STATE'),
                          ChangingWindowState.NORMAL_STATE, 0, 0, 0, 0))
        self._display.core.SendEventChecked(
            False, self._root,
            # EventMask.SubstructureRedirect | EventMask.SubstructureNotify,
            0xffffff, event.getvalue())

* Sat 23 May 2015 12:44:35 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT',
                      '_NET_WM_STATE_MAXIMIZED_HORZ'
* Sat 23 May 2015 12:45:03 AM JST
'_NET_WM_STATE'
* Sat 23 May 2015 12:45:42 AM JST
class WindowStateMode(_IntEnum):
    r"""SUMMARY
    """
    Unset  = 0
    Set    = 1
    Toggle = 2

* Sat 23 May 2015 12:48:52 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Sat 23 May 2015 12:48:56 AM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Sat 23 May 2015 12:49:05 AM JST
self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT')
* Sat 23 May 2015 12:49:10 AM JST
_NET_WM_STATE_MAXIMIZED_HORZ
* Sat 23 May 2015 12:50:23 AM JST
_root
* Sat 23 May 2015 12:51:37 AM JST
 | EventMask.SubstructureNotify,
* Sat 23 May 2015 12:52:42 AM JST
from _xahk.window_manager import WindowManager
* Sat 23 May 2015 12:52:53 AM JST
sleep(1);
* Sat 23 May 2015 12:54:23 AM JST

* Sat 23 May 2015 12:54:23 AM JST

* Sat 23 May 2015 12:54:23 AM JST
            # 0xffffff,

* Sat 23 May 2015 12:54:26 AM JST
            
* Sat 23 May 2015 12:59:20 AM JST
        reply = ReplyType32(self._atom_cache.get_atom('ATOM'))
        self.get_property(self._atom_cache.get_atom('_NET_WM_STATE'), reply)
        return (self._atom_cache.get_atom('_NET_WM_STATE_HIDDEN')
                in reply.get_result())

* Sat 23 May 2015 12:59:59 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT')
* Sat 23 May 2015 01:00:09 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Sat 23 May 2015 01:00:26 AM JST
self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT')
                in reply.get_result()
* Sat 23 May 2015 01:00:35 AM JST
               
* Sat 23 May 2015 01:01:27 AM JST
from _xahk.window_manager import WindowManager
wm=WindowManager.get_instance()
sleep(2);w=wm.get_active_window()

* Sat 23 May 2015 01:03:17 AM JST
        event = StringIO()
        # code, format, sequence_number, window, message type, data
        event.write(_pack('BBHII5I', EventCode.ClientMessage, 32, 0, self.id,
                          self._atom_cache.get_atom('_NET_WM_STATE'),
                          WindowStateMode.Set,
                          self._atom_cache.get_atom(
                              '_NET_WM_STATE_MAXIMIZED_VERT'),
                          self._atom_cache.get_atom(
                              '_NET_WM_STATE_MAXIMIZED_HORZ'), 0, 0))
        self._display.core.SendEventChecked(
            False, self._root, EventMask.SubstructureRedirect, event.getvalue())

* Sat 23 May 2015 01:10:06 AM JST
    def maximize(self, ):
        r"""SUMMARY

        maximize()

        @Return:

        @Error:
        """
        event = StringIO()
        # code, format, sequence_number, window, message type, data
        event.write(_pack('BBHII5I', EventCode.ClientMessage, 32, 0, self.id,
                          self._atom_cache.get_atom('_NET_WM_STATE'),
                          WindowStateMode.Set,
                          self._atom_cache.get_atom(
                              '_NET_WM_STATE_MAXIMIZED_VERT'),
                          self._atom_cache.get_atom(
                              '_NET_WM_STATE_MAXIMIZED_HORZ'), 0, 0))
        self._display.core.SendEventChecked(
            False, self._root, EventMask.SubstructureRedirect, event.getvalue())

    def is_maximized(self, ):
        r"""SUMMARY

        is_maximized()

        @Return:

        @Error:
        """
        reply = ReplyType32(self._atom_cache.get_atom('ATOM'))
        self.get_property(self._atom_cache.get_atom('_NET_WM_STATE'), reply)
        return (self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT')
                in reply.get_result()
                and self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_HORZ')
                in reply.get_result())

    def restore(self, ):
        r"""SUMMARY

        restore()

        @Return:

        @Error:
        """
        event = StringIO()
        # code, format, sequence_number, window, message type, data
        event.write(_pack('BBHII5I', EventCode.ClientMessage, 32, 0, self.id,
                          self._atom_cache.get_atom('_NET_WM_STATE'),
                          WindowStateMode.Unset,
                          self._atom_cache.get_atom(
                              '_NET_WM_STATE_MAXIMIZED_VERT'),
                          self._atom_cache.get_atom(
                              '_NET_WM_STATE_MAXIMIZED_HORZ'), 0, 0))
        self._display.core.SendEventChecked(
            False, self._root, EventMask.SubstructureRedirect, event.getvalue())
        if self.is_minimized():
            # TODO: (Atami) [2015/05/23]
            self.show()

* Sat 23 May 2015 01:14:01 AM JST
        event = StringIO()
        # code, format, sequence_number, window, message type, data
        event.write(_pack('BBHII5I', EventCode.ClientMessage, 32, 0, self.id,
                          self._atom_cache.get_atom('_NET_WM_STATE'),
                          WindowStateMode.Unset,
                          self._atom_cache.get_atom(
                              '_NET_WM_STATE_MAXIMIZED_VERT'),
                          self._atom_cache.get_atom(
                              '_NET_WM_STATE_MAXIMIZED_HORZ'), 0, 0))
        self._display.core.SendEventChecked(
            False, self._root, EventMask.SubstructureRedirect, event.getvalue())

* Sat 23 May 2015 01:14:22 AM JST
'_NET_WM_STATE_ABOVE'
* Sat 23 May 2015 01:14:39 AM JST
'_NET_WM_STATE_BELOW'
* Sat 23 May 2015 01:14:56 AM JST
'_NET_WM_STATE_ABOVE'
* Sat 23 May 2015 01:15:01 AM JST
                              
* Sat 23 May 2015 01:16:10 AM JST
        reply = ReplyType32(self._atom_cache.get_atom('ATOM'))
        self.get_property(self._atom_cache.get_atom('_NET_WM_STATE'), reply)
        return (self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT')
                in reply.get_result()
                and self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_HORZ')
                in reply.get_result())

* Sat 23 May 2015 01:16:20 AM JST
in reply.get_result()
* Sat 23 May 2015 01:16:26 AM JST
'_NET_WM_STATE_ABOVE'
* Sat 23 May 2015 01:16:30 AM JST
                
* Sat 23 May 2015 01:43:13 AM JST
'_NET_WM_STATE_FULLSCREEN'
* Sat 23 May 2015 01:43:58 AM JST
        event = StringIO()
        # code, format, sequence_number, window, message type, data
        event.write(_pack('BBHII5I', EventCode.ClientMessage, 32, 0, self.id,
                          self._atom_cache.get_atom('_NET_WM_STATE'),
                          always_on_top,
                          self._atom_cache.get_atom('_NET_WM_STATE_ABOVE'),
                          0, 0, 0))
        self._display.core.SendEventChecked(
            False, self._root, EventMask.SubstructureRedirect, event.getvalue())

* Sat 23 May 2015 01:44:10 AM JST
always_on_top
* Sat 23 May 2015 01:44:21 AM JST
'_NET_WM_STATE_FULLSCREEN'
* Sat 23 May 2015 01:44:44 AM JST
        reply = ReplyType32(self._atom_cache.get_atom('ATOM'))
        self.get_property(self._atom_cache.get_atom('_NET_WM_STATE'), reply)
        return (self._atom_cache.get_atom('_NET_WM_STATE_ABOVE')
                in reply.get_result())

* Sat 23 May 2015 01:45:11 AM JST
'_NET_WM_STATE_FULLSCREEN'
* Sat 23 May 2015 02:13:43 AM JST
    def set_always_on_top(self, always_on_top=True):
        r"""SUMMARY

        set_always_on_top(always_on_top)

        @Arguments:
        - `always_on_top`:

        @Return:

        @Error:
        """
        event = StringIO()
        # code, format, sequence_number, window, message type, data
        event.write(_pack('BBHII5I', EventCode.ClientMessage, 32, 0, self.id,
                          self._atom_cache.get_atom('_NET_WM_STATE'),
                          always_on_top,
                          self._atom_cache.get_atom('_NET_WM_STATE_ABOVE'),
                          0, 0, 0))
        self._display.core.SendEventChecked(
            False, self._root, EventMask.SubstructureRedirect, event.getvalue())

    def is_always_on_top(self, ):
        r"""SUMMARY

        is_always_on_top()

        @Return:

        @Error:
        """
        reply = ReplyType32(self._atom_cache.get_atom('ATOM'))
        self.get_property(self._atom_cache.get_atom('_NET_WM_STATE'), reply)
        return (self._atom_cache.get_atom('_NET_WM_STATE_ABOVE')
                in reply.get_result())


* Sat 23 May 2015 02:13:58 AM JST
is_always_on_
* Sat 23 May 2015 02:14:05 AM JST
bottom
* Sat 23 May 2015 02:14:53 AM JST
set_always_on_bottom(always_on_top
* Sat 23 May 2015 02:15:01 AM JST
bottom
* Sat 23 May 2015 02:15:21 AM JST
'_NET_WM_STATE_BELOW'
* Sat 23 May 2015 02:19:14 AM JST
DestroyWindow
* Sat 23 May 2015 02:23:09 AM JST
DestroyWindow?
* Sat 23 May 2015 02:25:26 AM JST
xcb.xproto.PropMode
* Sat 23 May 2015 02:45:41 AM JST
self._display.core.DestroyWindow(self.id)
* Sat 23 May 2015 02:47:32 AM JST
        event = StringIO()
        # code, format, sequence_number, window, message type, data
        event.write(_pack('BBHII5I', EventCode.ClientMessage, 32, 0, self.id,
                          self._atom_cache.get_atom('_NET_WM_STATE'),
                          always_on_top,
                          self._atom_cache.get_atom('_NET_WM_STATE_ABOVE'),
                          0, 0, 0))
        self._display.core.SendEventChecked(
            False, self._root, EventMask.SubstructureRedirect, event.getvalue())

* Sat 23 May 2015 02:47:45 AM JST
'_NET_CLOSE_WINDOW'
* Sat 23 May 2015 02:48:04 AM JST
always_on_top
* Sat 23 May 2015 02:48:08 AM JST
                          
* Sat 23 May 2015 02:48:09 AM JST
                          
* Sat 23 May 2015 02:49:04 AM JST
_root
* Sat 23 May 2015 02:50:14 AM JST
        event = StringIO()
        # code, format, sequence_number, window, message type, data
        event.write(_pack('BBHII5I', EventCode.ClientMessage, 32, 0, self.id,
                          self._atom_cache.get_atom('_NET_CLOSE_WINDOW'),
                          0, 0, 0, 0, 0))
        self._display.core.SendEventChecked(
            False, self.id, 0xffffff, event.getvalue())

* Sat 23 May 2015 02:52:38 AM JST
'WM_PROTOCOLS
* Sat 23 May 2015 02:52:41 AM JST
'WM_PROTOCOLS'
* Sat 23 May 2015 02:53:31 AM JST
WM_DELETE_WINDOW
* Sat 23 May 2015 03:02:39 AM JST
        self._display.core.ConfigureWindow(
            self._id,
            ConfigWindow.X | ConfigWindow.Y |
            ConfigWindow.Width | ConfigWindow.Height,
            [rect.x, rect.y, rect.width, rect.height])

* Sat 23 May 2015 03:02:46 AM JST

* Sat 23 May 2015 03:02:46 AM JST

* Sat 23 May 2015 03:02:46 AM JST
            ConfigWindow.X | ConfigWindow.Y |

* Sat 23 May 2015 03:02:51 AM JST
y, 
* Sat 23 May 2015 03:02:51 AM JST
rect.y, 
* Sat 23 May 2015 03:02:52 AM JST
x, rect.y, 
* Sat 23 May 2015 03:02:52 AM JST
rect.x, rect.y, 
* Sat 23 May 2015 03:02:55 AM JST
rect
* Sat 23 May 2015 03:02:58 AM JST
rect
* Sat 23 May 2015 03:05:01 AM JST
name
* Sat 23 May 2015 03:05:57 AM JST
    def set_window_title(self, title):
        r"""SUMMARY

        set_window_title(title)

        @Arguments:
        - `title`:

        @Return:

        @Error:
        """
        self._display.core.ChangeProperty(
            PropMode.Replace, self.id, self._atom_cache.get_atom('_NET_WM_NAME'),
            self._atom_cache.get_atom('UTF8_STRING'), 8, len(title), title)


* Sat 23 May 2015 03:10:05 AM JST
self._dispaly.flush()
* Sat 23 May 2015 03:10:12 AM JST
self._display.flush()
* Sat 23 May 2015 03:12:56 AM JST
SendEventChecked
* Sat 23 May 2015 03:13:10 AM JST
            
* Sat 23 May 2015 03:13:13 AM JST
            
* Sat 23 May 2015 03:14:09 AM JST
sleep(2);w=wm.get_active_window()
* Sat 23 May 2015 03:14:25 AM JST
sleep(2);
* Sat 23 May 2015 03:14:35 AM JST
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
* Sat 23 May 2015 03:14:54 AM JST
from _xahk.windowspec.window_title_spec import WindowTitleSpec
* Sat 23 May 2015 03:15:08 AM JST
sleep(2);
* Sat 23 May 2015 03:15:11 AM JST
get_active_window()
* Sat 23 May 2015 03:15:24 AM JST
from _xahk.windowspec.window_title_spec import WindowTitleSpec
* Sat 23 May 2015 03:15:28 AM JST
WindowTitleSpec
* Sat 23 May 2015 03:15:43 AM JST
w=wm.find_windows(WindowTitleSpec('Comix'))[0]
* Sat 23 May 2015 03:26:56 AM JST
self.
* Sat 23 May 2015 03:26:57 AM JST
bounds = self.
* Sat 23 May 2015 03:30:09 AM JST
WITHDRAWN_STATE
* Sat 23 May 2015 03:32:13 AM JST

* Sat 23 May 2015 03:32:13 AM JST

* Sat 23 May 2015 03:32:13 AM JST
        # raise NotImplementedError()

* Sat 23 May 2015 03:32:41 AM JST
        event = StringIO()
        # code, format, sequence_number, window, message type, data
        event.write(_pack('BBHII5I', EventCode.ClientMessage, 32, 0, self.id,
                          self._atom_cache.get_atom('WM_CHANGE_STATE'),
                          ChangingWindowState.ICONIC_STATE, 0, 0, 0, 0))
        self._display.core.SendEvent(False, self._root,
            # EventMask.SubstructureRedirect | EventMask.SubstructureNotify,
            0xffffff, event.getvalue())
        self._display.flush()

* Sat 23 May 2015 03:32:59 AM JST
ICONIC_STATE
* Sat 23 May 2015 03:36:15 AM JST
        event = StringIO()
        # code, format, sequence_number, window, message type, data
        event.write(_pack('BBHII5I', EventCode.ClientMessage, 32, 0, self.id,
                          self._atom_cache.get_atom('_NET_WM_STATE'),
                          always_on_top,
                          self._atom_cache.get_atom('_NET_WM_STATE_ABOVE'),
                          0, 0, 0))
        self._display.core.SendEvent(
            False, self._root, EventMask.SubstructureRedirect, event.getvalue())
        self._display.flush()

* Sat 23 May 2015 03:37:02 AM JST
'_NET_WM_STATE_SHADED'
* Sat 23 May 2015 03:37:07 AM JST
always_on_top
* Sat 23 May 2015 03:37:36 AM JST
        reply = ReplyType32(self._atom_cache.get_atom('ATOM'))
        self.get_property(self._atom_cache.get_atom('_NET_WM_STATE'), reply)
        return (self._atom_cache.get_atom('_NET_WM_STATE_FULLSCREEN')
                in reply.get_result())

* Sat 23 May 2015 03:37:46 AM JST
'_NET_WM_STATE_SHADED'
* Sat 23 May 2015 03:38:11 AM JST
        X11DesktopHandler.get_instance().activate_window(self.id)
        self._display.flush()

* Sat 23 May 2015 03:40:30 AM JST
data
* Sat 23 May 2015 03:40:33 AM JST
data
* Sat 23 May 2015 03:40:36 AM JST
data
* Sat 23 May 2015 03:41:39 AM JST
# EventMask.SubstructureRedirect | EventMask.SubstructureNotify,
* Sat 23 May 2015 03:42:28 AM JST
EventMask.SubstructureRedirect
* Sat 23 May 2015 03:43:03 AM JST
EventMask.SubstructureRedirect, event.getvalue()
* Sat 23 May 2015 03:43:22 AM JST
        self.send_event(
            False, self._root, EventMask.SubstructureRedirect, event.getvalue())

* Sat 23 May 2015 03:44:02 AM JST
SubstructureRedirect
* Sat 23 May 2015 03:44:02 AM JST
EventMask.SubstructureRedirect
* Sat 23 May 2015 03:44:09 AM JST
# EventMask.SubstructureRedirect | EventMask.SubstructureNotify,
* Sat 23 May 2015 03:44:24 AM JST
        self.send_event(
            False, self._root, EventMask.SubstructureRedirect, event.getvalue())

* Sat 23 May 2015 03:44:30 AM JST
_root
* Sat 23 May 2015 03:44:35 AM JST
0xffffff
* Sat 23 May 2015 03:44:52 AM JST
self.send_event(False, self.id, 0xffffff, event.getvalue())
* Sat 23 May 2015 03:44:56 AM JST

* Sat 23 May 2015 03:44:57 AM JST

* Sat 23 May 2015 03:44:57 AM JST
        # self._display.core.SendEvent(False, self.id, 0xffffff, event.getvalue())

* Sat 23 May 2015 03:51:04 AM JST
event = StringIO()
* Sat 23 May 2015 03:51:27 AM JST
EventCode.ClientMessage
* Sat 23 May 2015 03:51:52 AM JST
window, 
* Sat 23 May 2015 03:51:54 AM JST
window,
* Sat 23 May 2015 03:53:27 AM JST
# code, format, sequence_number, window, message type, data
* Sat 23 May 2015 03:53:44 AM JST
data
* Sat 23 May 2015 03:54:29 AM JST
ChangingWindowState.ICONIC_STATE, 0, 0, 0, 0
* Sat 23 May 2015 03:54:49 AM JST
f
* Sat 23 May 2015 03:54:49 AM JST
sle.f
* Sat 23 May 2015 03:55:08 AM JST
0xffffff
* Sat 23 May 2015 03:55:23 AM JST
self._atom_cache.get_atom('WM_CHANGE_STATE')
* Sat 23 May 2015 03:55:43 AM JST
event
* Sat 23 May 2015 03:55:44 AM JST
event
* Sat 23 May 2015 03:55:48 AM JST
event
* Sat 23 May 2015 03:57:08 AM JST
EventMask.SubstructureRedirect | EventMask.SubstructureNotify
* Sat 23 May 2015 03:57:46 AM JST
            
* Sat 23 May 2015 03:57:59 AM JST
            
* Sat 23 May 2015 03:58:01 AM JST

* Sat 23 May 2015 03:58:01 AM JST

* Sat 23 May 2015 03:58:01 AM JST
        # EventMask.SubstructureRedirect | EventMask.SubstructureNotify,

* Sat 23 May 2015 03:58:49 AM JST
ChangingWindowState.NORMAL_STATE, 0, 0, 0, 0
* Sat 23 May 2015 03:59:05 AM JST
        self._send_client_message(
            self._root,
            EventMask.SubstructureRedirect | EventMask.SubstructureNotify,
            self._atom_cache.get_atom('WM_CHANGE_STATE'), data.getvalue())

* Sat 23 May 2015 04:00:13 AM JST
WindowStateMode.Set,
                          self._atom_cache.get_atom(
                              '_NET_WM_STATE_MAXIMIZED_VERT'),
                          self._atom_cache.get_atom(
                              '_NET_WM_STATE_MAXIMIZED_HORZ'), 0, 0
* Sat 23 May 2015 04:00:22 AM JST
            
* Sat 23 May 2015 04:00:27 AM JST
            
* Sat 23 May 2015 04:00:30 AM JST
            
* Sat 23 May 2015 04:00:46 AM JST
        self._send_client_message(
            self._root,
            EventMask.SubstructureRedirect | EventMask.SubstructureNotify,
            self._atom_cache.get_atom('WM_CHANGE_STATE'), data.getvalue())

* Sat 23 May 2015 04:01:00 AM JST
self._atom_cache.get_atom('_NET_WM_STATE')
* Sat 23 May 2015 04:01:08 AM JST
            
* Sat 23 May 2015 04:06:36 AM JST
always_on_top
* Sat 23 May 2015 04:06:42 AM JST
self._atom_cache.get_atom('_NET_WM_STATE_ABOVE')
* Sat 23 May 2015 04:06:56 AM JST
0, 0, 0
* Sat 23 May 2015 04:07:00 AM JST
                         
* Sat 23 May 2015 04:07:08 AM JST
send_clie
* Sat 23 May 2015 04:07:57 AM JST
EventMask.SubstructureRedirect
* Sat 23 May 2015 04:08:03 AM JST
self._atom_cache.get_atom('_NET_WM_STATE')
* Sat 23 May 2015 04:09:34 AM JST
always_on_bottom
* Sat 23 May 2015 04:09:39 AM JST
self._atom_cache.get_atom('_NET_WM_STATE_BELOW')
* Sat 23 May 2015 04:09:56 AM JST
_client_
* Sat 23 May 2015 04:10:19 AM JST
EventMask.SubstructureRedirect
* Sat 23 May 2015 04:10:30 AM JST
self._atom_cache.get_atom('_NET_WM_STATE')
* Sat 23 May 2015 04:11:13 AM JST
event
* Sat 23 May 2015 04:11:39 AM JST
fullscreen
* Sat 23 May 2015 04:11:47 AM JST
self._atom_cache.get_atom('_NET_WM_STATE_FULLSCREEN')
* Sat 23 May 2015 04:12:14 AM JST
EventMask.SubstructureRedirect
* Sat 23 May 2015 04:12:19 AM JST
self._atom_cache.get_atom('_NET_WM_STATE')
* Sat 23 May 2015 04:13:07 AM JST
shade
* Sat 23 May 2015 04:13:12 AM JST
self._atom_cache.get_atom('_NET_WM_STATE_SHADED')
* Sat 23 May 2015 04:13:38 AM JST
EventMask.SubstructureRedirect
* Sat 23 May 2015 04:13:56 AM JST
event.getvalue()
* Sat 23 May 2015 04:14:03 AM JST
self._atom_cache.get_atom('_NET_WM_STATE')
* Sat 23 May 2015 04:14:15 AM JST
event
* Sat 23 May 2015 04:15:05 AM JST
write(
* Sat 23 May 2015 04:15:05 AM JST
event.write(
* Sat 23 May 2015 04:15:22 AM JST
ChangingWindowState.WITHDRAWN_STATE, 0, 0, 0, 0
* Sat 23 May 2015 04:15:39 AM JST
sle.
* Sat 23 May 2015 04:15:57 AM JST
self._atom_cache.get_atom('WM_CHANGE_STATE')
* Sat 23 May 2015 04:16:47 AM JST
self._atom_cache.get_atom('_NET_CLOSE_WINDOW')
* Sat 23 May 2015 04:16:51 AM JST
0, 0, 0, 0, 0
* Sat 23 May 2015 04:16:58 AM JST
_client_windows
* Sat 23 May 2015 04:17:20 AM JST
0xffffff
* Sat 23 May 2015 04:17:28 AM JST
self._atom_cache.get_atom('_NET_CLOSE_WINDOW')
* Sat 23 May 2015 04:18:00 AM JST
        data = StringIO()
        data.write(_pack('5I', 0, 0, 0, 0, 0))
        self._send_client_message(self.id, 0xffffff,
                                  self._atom_cache.get_atom('_NET_CLOSE_WINDOW'),
                                  data.getvalue())
        self._display.flush()

* Sat 23 May 2015 04:18:10 AM JST
'WM_PROTOCOLS'
* Sat 23 May 2015 04:18:17 AM JST
self._atom_cache.get_atom('WM_DELETE_WINDOW')
* Sat 23 May 2015 05:30:51 AM JST
from _xahk.piece.x11_piece import X11Key
* Sat 23 May 2015 05:31:59 AM JST
accelerator
* Sat 23 May 2015 05:37:02 AM JST
self.key.flush()
* Sat 23 May 2015 05:38:47 AM JST
from _xahk.piece.x11_piece import X11Key
k=X11Key(38)

* Sat 23 May 2015 05:39:07 AM JST
56623126
* Sat 23 May 2015 05:39:23 AM JST
emacs=56623126
qbit=23068676

* Sat 23 May 2015 05:39:41 AM JST
from _xahk.piece.x11_piece import X11Key
k=X11Key(38)

from _xahk.window_manager import WindowManager
from _xahk.bind_candidate import BindCandidate
from _xahk.input_command import InputDebug, SendKeyCommand
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.windowspec.window_title_spec import WindowTitleSpec
from _xahk.bind_manager import BindManager
from _xahk.eventloop import EventLoop
kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), SendKeyCommand('b'))
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Sat 23 May 2015 05:39:49 AM JST
emacs=56623126
qbit=23068676

from _xahk.piece.x11_piece import X11Key
k=X11Key(38)

from _xahk.window_manager import WindowManager
from _xahk.bind_candidate import BindCandidate
from _xahk.input_command import InputDebug, SendKeyCommand
from _xahk.accelerator import Accelerator
from _xahk.windowspec.window_id_spec import WindowIDSpec
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
from _xahk.windowspec.window_title_spec import WindowTitleSpec
from _xahk.bind_manager import BindManager
from _xahk.eventloop import EventLoop
kbind=BindCandidate(WindowWMClassSpec('emacs'))
kbind.register_bind(Accelerator(38), SendKeyCommand('b'))
bmanager=BindManager.create_keybind()
bmanager.add_candidate(kbind)
bmanager.start_management()
loop=EventLoop.get_instance()
while 1:
    loop.dispatch_event()


* Sat 23 May 2015 05:40:18 AM JST
from _xahk.windowspec.window_id_spec import WindowIDSpec
* Sat 23 May 2015 05:40:52 AM JST
window
* Sat 23 May 2015 05:40:54 AM JST
window_any_spec
* Sat 23 May 2015 05:41:00 AM JST
WindowIDSpec
* Sat 23 May 2015 05:41:05 AM JST

* Sat 23 May 2015 05:41:05 AM JST

* Sat 23 May 2015 05:41:05 AM JST
from _xahk.windowspec.window_any_spec import WindowAnySpec

* Sat 23 May 2015 05:41:22 AM JST
from _xahk.bind_candidate import BindCandidate
* Sat 23 May 2015 05:42:35 AM JST
DOWNKEY
* Sat 23 May 2015 05:43:44 AM JST
from _xahk.bind_manager import BindManager
* Sat 23 May 2015 05:43:47 AM JST

* Sat 23 May 2015 05:43:47 AM JST

* Sat 23 May 2015 05:43:47 AM JST
from _xahk.bind_manager import BindManager

* Sat 23 May 2015 05:43:57 AM JST
bmanager=BindManager.create_keybind()
* Sat 23 May 2015 05:44:18 AM JST
bmanager.add_candidate(kbind)
* Sat 23 May 2015 05:44:23 AM JST
global_candidate
* Sat 23 May 2015 05:44:28 AM JST
bmanager.start_management()
* Sat 23 May 2015 05:44:35 AM JST
from _xahk.eventloop import EventLoop
* Sat 23 May 2015 05:44:38 AM JST

* Sat 23 May 2015 05:44:38 AM JST

* Sat 23 May 2015 05:44:38 AM JST
from _xahk.eventloop import EventLoop

* Sat 23 May 2015 05:44:46 AM JST
while 1:
loop.dispatch_event()

* Sat 23 May 2015 05:44:59 AM JST
loop=EventLoop.get_instance()
* Sat 23 May 2015 05:50:10 AM JST

* Sat 23 May 2015 05:50:11 AM JST
X11Key
* Sat 23 May 2015 05:50:13 AM JST
x11_piece
* Sat 23 May 2015 05:50:47 AM JST
N_KEY_ACCE
* Sat 23 May 2015 05:55:01 AM JST

* Sat 23 May 2015 05:55:01 AM JST

* Sat 23 May 2015 05:55:01 AM JST
        print('DEBUG-1-input_bind_listener.py')

* Sat 23 May 2015 05:56:06 AM JST

* Sat 23 May 2015 05:56:06 AM JST

* Sat 23 May 2015 05:56:06 AM JST
        print(event)

* Sat 23 May 2015 05:56:38 AM JST
isinstance(event, (
            KeyPressEvent, KeyReleaseEvent, ButtonPressEvent, ButtonReleaseEvent))
* Sat 23 May 2015 05:58:44 AM JST

* Sat 23 May 2015 05:58:44 AM JST

* Sat 23 May 2015 05:58:44 AM JST
raise StandardError()

* Sat 23 May 2015 05:58:54 AM JST

* Sat 23 May 2015 05:58:54 AM JST

* Sat 23 May 2015 05:58:54 AM JST
from sendkeys.core import SendKeys

* Sat 23 May 2015 06:00:34 AM JST

* Sat 23 May 2015 06:00:34 AM JST

* Sat 23 May 2015 06:00:35 AM JST
        print('DEBUG-1-xahk_handle1.py')

* Sat 23 May 2015 06:00:36 AM JST

* Sat 23 May 2015 06:00:36 AM JST

* Sat 23 May 2015 06:00:36 AM JST
        print('DEBUG-1-xahk_handle1.py')

* Sat 23 May 2015 06:00:39 AM JST

* Sat 23 May 2015 06:00:39 AM JST

* Sat 23 May 2015 06:00:39 AM JST
        print('DEBUG-2-xahk_handle1.py')

* Sat 23 May 2015 06:00:48 AM JST

* Sat 23 May 2015 06:00:48 AM JST

* Sat 23 May 2015 06:00:48 AM JST
        print('DEBUG-1-input_bind_listener.py')

* Sat 23 May 2015 06:01:16 AM JST

* Sat 23 May 2015 06:01:16 AM JST

* Sat 23 May 2015 06:01:16 AM JST
        print('DEBUG-1-input_command.py')

* Sat 23 May 2015 06:04:16 AM JST
N_KEY_ACCE = Accelerator(57, Modifier.Control)
* Sat 23 May 2015 06:04:18 AM JST

* Sat 23 May 2015 06:04:18 AM JST

* Sat 23 May 2015 06:04:18 AM JST
N_KEY_ACCE = Accelerator(57, Modifier.Control)

* Sat 23 May 2015 06:07:10 AM JST
Modifier.Control
* Sat 23 May 2015 06:07:20 AM JST
Modifier.Control
* Sat 23 May 2015 06:07:55 AM JST
J_KEY_
* Sat 23 May 2015 06:07:59 AM JST
L_KEY_
* Sat 23 May 2015 06:07:59 AM JST
K_KEY_
* Sat 23 May 2015 06:07:59 AM JST
N_KEY_
* Sat 23 May 2015 06:08:14 AM JST

* Sat 23 May 2015 06:08:17 AM JST
DOWN
* Sat 23 May 2015 06:08:27 AM JST

* Sat 23 May 2015 06:08:35 AM JST
UP
* Sat 23 May 2015 06:08:38 AM JST

* Sat 23 May 2015 06:08:43 AM JST
LEFT
* Sat 23 May 2015 06:10:08 AM JST

* Sat 23 May 2015 06:10:08 AM JST

* Sat 23 May 2015 06:10:08 AM JST
        self.key.display.flush()

* Sat 23 May 2015 06:14:00 AM JST
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
* Sat 23 May 2015 06:14:21 AM JST
WindowWMClassSpec('emacs')
* Sat 23 May 2015 06:16:11 AM JST
N_CTRL_KEY_ACCE
* Sat 23 May 2015 06:16:14 AM JST

* Sat 23 May 2015 06:16:22 AM JST

* Sat 23 May 2015 06:16:28 AM JST

* Sat 23 May 2015 06:16:49 AM JST
N_CTRL_KEY_ACCE
* Sat 23 May 2015 06:16:58 AM JST
N_CTRL_KEY_CMD
* Sat 23 May 2015 06:17:03 AM JST

* Sat 23 May 2015 06:17:05 AM JST
_CTRL_KEY_ACCE, N_CTRL_KEY_CMD)
* Sat 23 May 2015 06:17:11 AM JST

* Sat 23 May 2015 06:17:17 AM JST

* Sat 23 May 2015 06:17:25 AM JST

* Sat 23 May 2015 06:17:27 AM JST
global
* Sat 23 May 2015 06:20:30 AM JST

* Sat 23 May 2015 06:20:30 AM JST

* Sat 23 May 2015 06:20:30 AM JST
        self.key.press(event.window.get_id())

* Sat 23 May 2015 06:21:47 AM JST

* Sat 23 May 2015 06:21:50 AM JST
poll
* Sat 23 May 2015 06:24:04 AM JST

* Sat 23 May 2015 06:24:04 AM JST

* Sat 23 May 2015 06:24:04 AM JST
        self.key.press(event.window.get_id())

* Sat 23 May 2015 06:25:06 AM JST
tes2
* Sat 23 May 2015 06:28:19 AM JST

* Sat 23 May 2015 06:28:19 AM JST
WindowWMClassSpec
* Sat 23 May 2015 06:28:24 AM JST
window_wmclass_spec
* Sat 23 May 2015 06:30:17 AM JST
WindowAnySpec
* Sat 23 May 2015 06:37:20 AM JST
'Google-chrome'
* Sat 23 May 2015 06:38:13 AM JST
Modifier.Control
* Sat 23 May 2015 06:38:46 AM JST
E_CTRL_KEY_ACCE
* Sat 23 May 2015 06:38:58 AM JST

* Sat 23 May 2015 06:38:58 AM JST

* Sat 23 May 2015 06:38:58 AM JST
L_CTRL_KEY_CMD = KeyCommand(L_CTRL_KEY_ACCE)

* Sat 23 May 2015 06:40:28 AM JST
Modifier.Control
* Sat 23 May 2015 06:40:33 AM JST
Control
* Sat 23 May 2015 06:40:40 AM JST
T_SHIFT_CTRL_KEY_ACCE
* Sat 23 May 2015 06:41:56 AM JST
Modifier.Control
* Sat 23 May 2015 06:42:36 AM JST

* Sat 23 May 2015 06:42:38 AM JST
E_CTRL_KEY_ACCE
* Sat 23 May 2015 06:42:45 AM JST
L_CTRL_KEY_CMD
* Sat 23 May 2015 06:44:44 AM JST
Open_as_secre
* Sat 23 May 2015 06:44:54 AM JST
Open
* Sat 23 May 2015 06:45:08 AM JST
KeyCommand
* Sat 23 May 2015 06:47:25 AM JST
5
* Sat 23 May 2015 06:47:27 AM JST
57
* Sat 23 May 2015 06:48:13 AM JST
Modifier.Control
* Sat 23 May 2015 06:48:31 AM JST
sef.
* Sat 23 May 2015 06:49:24 AM JST

* Sat 23 May 2015 06:49:26 AM JST
press
* Sat 23 May 2015 06:49:43 AM JST
        self.ctrl_l.press(event.window.get_id())
        self.ctrl_l.release(event.window.get_id())

* Sat 23 May 2015 06:52:16 AM JST
event.window.get_id()
* Sat 23 May 2015 06:52:21 AM JST
.tap(event.window.get_id())
* Sat 23 May 2015 06:52:25 AM JST

* Sat 23 May 2015 06:52:25 AM JST

* Sat 23 May 2015 06:52:25 AM JST
        self.ctrl_c.press(event.window.get_id())

* Sat 23 May 2015 06:52:35 AM JST
.tap(event.window.get_id())
* Sat 23 May 2015 06:52:52 AM JST

* Sat 23 May 2015 06:52:52 AM JST

* Sat 23 May 2015 06:52:52 AM JST
        self.ctrl_l.press(event.window.get_id())

* Sat 23 May 2015 06:52:55 AM JST
self.ctrl_l.display.flush()
* Sat 23 May 2015 06:53:02 AM JST

* Sat 23 May 2015 06:53:04 AM JST
tap(event.window.get_id())
* Sat 23 May 2015 06:55:19 AM JST
KeyCommand(DOWN_ACCE)
* Sat 23 May 2015 06:55:29 AM JST

* Sat 23 May 2015 06:55:29 AM JST

* Sat 23 May 2015 06:55:29 AM JST
DOWN_KEY_CMD = 

* Sat 23 May 2015 06:55:37 AM JST
KeyCommand(DOWN_ACCE)
* Sat 23 May 2015 06:55:43 AM JST
KeyCommand(UP_ACCE)
* Sat 23 May 2015 06:55:52 AM JST
KeyCommand(LEFT_ACCE)
* Sat 23 May 2015 06:56:00 AM JST
KeyCommand(RIGHT_ACCE)
* Sat 23 May 2015 06:56:06 AM JST
N_CTRL_KEY_CMD
* Sat 23 May 2015 06:56:18 AM JST
KeyCommand(L_CTRL_KEY_ACCE)
* Sat 23 May 2015 06:56:27 AM JST
KeyCommand(T_SHIFT_CTRL_KEY_ACCE)
* Sat 23 May 2015 06:56:43 AM JST
KeyCommand(T_SHIFT_CTRL_KEY_ACCE)
* Sat 23 May 2015 07:00:11 AM JST
from _xahk.window_manager import WindowManager
* Sat 23 May 2015 07:00:18 AM JST

* Sat 23 May 2015 07:00:18 AM JST
WindowManager
* Sat 23 May 2015 07:00:18 AM JST
import WindowManager
* Sat 23 May 2015 07:00:19 AM JST
window_manager import WindowManager
* Sat 23 May 2015 07:00:36 AM JST
WindowManagerObserver
* Sat 23 May 2015 07:02:28 AM JST
'Google-chrome'
* Sat 23 May 2015 07:03:41 AM JST
Modifier.Control
* Sat 23 May 2015 07:05:14 AM JST
widow.
* Sat 23 May 2015 07:05:22 AM JST
WindowManager.get_instance().add_observer(self)
* Sat 23 May 2015 07:05:26 AM JST
add
* Sat 23 May 2015 07:15:05 AM JST
self.ctrl_l.display.flush()
* Sat 23 May 2015 07:15:18 AM JST
ctrl_l
* Sat 23 May 2015 07:15:23 AM JST

* Sat 23 May 2015 07:15:23 AM JST

* Sat 23 May 2015 07:15:23 AM JST
        print('DEBUG-3-xahk_handle1.py')

* Sat 23 May 2015 07:15:49 AM JST

* Sat 23 May 2015 07:15:49 AM JST

* Sat 23 May 2015 07:15:49 AM JST
        print(window.get_title())

* Sat 23 May 2015 07:15:50 AM JST

* Sat 23 May 2015 07:15:50 AM JST

* Sat 23 May 2015 07:15:50 AM JST
        print('DEBUG-2-xahk_handle1.py')

* Sat 23 May 2015 07:16:46 AM JST

* Sat 23 May 2015 07:16:46 AM JST

* Sat 23 May 2015 07:16:46 AM JST
        # sleep(2)

* Sat 23 May 2015 07:20:48 AM JST
WindowWMClassSpec('Google-chrome')
* Sat 23 May 2015 07:22:47 AM JST
Modifier.Control
* Sat 23 May 2015 07:31:22 AM JST
class KeyCommand(InputCommand):
    r"""KeyCommand

    KeyCommand is a ImputCommand.
    Responsibility:
    """
    __slots__ = ('key', )

    def __init__(self, accelerator):
        r"""

        @Arguments:
        - `accelerator`:
        """
        super(KeyCommand, self).__init__()
        self.key = X11Key(accelerator.get_code(), accelerator.get_modifiers())

    def on_down(self, event):
        r"""SUMMARY

        on_down(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        self.key.press(event.window.get_id())

    def on_up(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        self.key.release(event.window.get_id())
        self.key.display.flush()

* Sat 23 May 2015 07:32:01 AM JST
self.key.press(event.window.get_id())
* Sat 23 May 2015 07:33:29 AM JST
(event.event, event.detail, event.state)
* Sat 23 May 2015 07:35:05 AM JST

* Sat 23 May 2015 07:35:05 AM JST

* Sat 23 May 2015 07:35:05 AM JST
        print(event)

* Sat 23 May 2015 07:35:06 AM JST

* Sat 23 May 2015 07:35:06 AM JST

* Sat 23 May 2015 07:35:06 AM JST
        print((event.event, event.detail, event.state))

* Sat 23 May 2015 07:41:10 AM JST
Middle
* Sat 23 May 2015 07:41:10 AM JST
Modifier.Middle
* Sat 23 May 2015 07:41:13 AM JST
Middle
* Sat 23 May 2015 07:41:14 AM JST
Modifier
* Sat 23 May 2015 07:44:17 AM JST
class
* Sat 23 May 2015 07:45:16 AM JST
    
* Sat 23 May 2015 07:47:20 AM JST
                         
* Sat 23 May 2015 07:47:51 AM JST
                         
* Sat 23 May 2015 07:47:53 AM JST
Right
* Sat 23 May 2015 07:47:59 AM JST
Right
* Sat 23 May 2015 07:48:03 AM JST
                         
* Sat 23 May 2015 07:48:07 AM JST
WheelUp
* Sat 23 May 2015 07:51:57 AM JST
InputBindListener
* Sat 23 May 2015 07:52:23 AM JST
InputBindListener
* Sat 23 May 2015 07:52:30 AM JST
ButtonIndex
* Sat 23 May 2015 07:55:00 AM JST
from _xahk.piece.modifier import Modifier
* Sat 23 May 2015 07:59:47 AM JST
grabpress
* Sat 23 May 2015 08:02:24 AM JST
grabs
* Sat 23 May 2015 08:05:04 AM JST
window
* Sat 23 May 2015 08:05:30 AM JST
window
* Sat 23 May 2015 08:05:42 AM JST
window
* Sat 23 May 2015 08:07:02 AM JST
(event.event, event.detail, event.state)
* Sat 23 May 2015 10:13:33 AM JST
~/.pylib/_xahk/
* Sat 23 May 2015 10:22:18 AM JST
XQueryPointer
* Sat 23 May 2015 10:24:17 AM JST
root_x
* Sat 23 May 2015 10:25:33 AM JST
child
* Sat 23 May 2015 10:25:52 AM JST
mask
* Sat 23 May 2015 10:26:46 AM JST
56623126
* Sat 23 May 2015 10:26:57 AM JST
root_x
* Sat 23 May 2015 10:27:14 AM JST
root_x
* Sat 23 May 2015 10:41:21 AM JST
press
* Sat 23 May 2015 10:41:22 AM JST
press_master
* Sat 23 May 2015 10:42:21 AM JST
fake
* Sat 23 May 2015 10:42:22 AM JST
fake_core_button
* Sat 23 May 2015 10:44:55 AM JST
XRefreshKeyboardMapping
* Sat 23 May 2015 10:54:57 AM JST
fake
* Sat 23 May 2015 10:55:00 AM JST
fake_core_button
* Sat 23 May 2015 10:56:01 AM JST
fake
* Sat 23 May 2015 10:56:02 AM JST
fake_click
* Sat 23 May 2015 09:30:54 PM JST
from _xahk.piece.x11_piece import X11Key
* Sat 23 May 2015 09:45:36 PM JST
from _xahk.piece.modifier import Modifier
* Sat 23 May 2015 09:46:10 PM JST
press
* Sat 23 May 2015 09:48:15 PM JST
23068676
* Sat 23 May 2015 09:50:12 PM JST
WarpPointer
* Sat 23 May 2015 09:51:44 PM JST
c.core.WarpPointer(0, 482, 0, 0, 0, 0, 200, 100
* Sat 23 May 2015 09:54:07 PM JST
23068676
* Sat 23 May 2015 09:55:20 PM JST
23068676
* Sat 23 May 2015 10:17:03 PM JST
FakeInput
* Sat 23 May 2015 10:19:55 PM JST
window
* Sat 23 May 2015 10:20:07 PM JST
window
* Sat 23 May 2015 10:20:19 PM JST
b.press(23068676, 190, 450)
* Sat 23 May 2015 10:20:38 PM JST
from _xahk.piece.x11_piece import X11Key

* Sat 23 May 2015 10:20:41 PM JST
X11Key
* Sat 23 May 2015 10:20:57 PM JST
from _xahk.piece.x11_piece import X11Button
* Sat 23 May 2015 10:21:02 PM JST
b=X11Button(1)
* Sat 23 May 2015 10:21:12 PM JST
23068676, 190, 450
* Sat 23 May 2015 10:21:39 PM JST
23068676
* Sun 24 May 2015 02:34:40 AM JST
root
* Sun 24 May 2015 02:36:34 AM JST
xproto
* Sun 24 May 2015 02:37:26 AM JST
xproto.
* Sun 24 May 2015 02:37:27 AM JST
xproto.
* Sun 24 May 2015 02:37:34 AM JST
xproto.
* Sun 24 May 2015 02:37:44 AM JST
from xcb.xproto import EventMask
* Sun 24 May 2015 02:38:07 AM JST
EventMask.ButtonPress
* Sun 24 May 2015 02:39:14 AM JST
self._display.core.ChangeWindowAttributes(
* Sun 24 May 2015 02:39:36 AM JST
EventMask.ButtonPress | EventMask.ButtonRelease
* Sun 24 May 2015 02:40:08 AM JST
        eventmask = self._display.core.GetWindowAttributes(
            root).reply().your_event_mask

* Sun 24 May 2015 02:40:17 AM JST
root
* Sun 24 May 2015 02:40:25 AM JST
self._display.core.GetWindowAttributes(
                win.get_id()).reply().your_event_mask
* Sun 24 May 2015 02:40:30 AM JST
                
* Sun 24 May 2015 02:40:31 AM JST

* Sun 24 May 2015 02:40:31 AM JST

* Sun 24 May 2015 02:40:31 AM JST
            eventmask = 

* Sun 24 May 2015 02:42:29 AM JST

* Sun 24 May 2015 02:42:32 AM JST
_root
* Sun 24 May 2015 02:42:32 AM JST
self._root
* Sun 24 May 2015 02:42:39 AM JST

* Sun 24 May 2015 02:42:41 AM JST
_root
* Sun 24 May 2015 02:42:42 AM JST
self._root
* Sun 24 May 2015 02:44:55 AM JST
            
* Sun 24 May 2015 02:45:24 AM JST

        self._atom_cache = AtomCache(self._display, KATOM_TO_CACHE_FOR_MANAGER)
        self._windows = [
            Window(self._display, wid) for wid in self._client_windows()]
        self._observers = []

* Sun 24 May 2015 08:39:37 AM JST
EventMask.ButtonPress
* Sun 24 May 2015 08:40:23 AM JST
parent
* Sun 24 May 2015 09:47:10 AM JST
56623126
* Sun 24 May 2015 09:47:16 AM JST
child
* Sun 24 May 2015 09:54:16 AM JST
'WIN_OBSERVER'
* Sun 24 May 2015 10:10:26 AM JST
56623126
* Sun 24 May 2015 10:10:42 AM JST
ChangeWindowProperty
* Sun 24 May 2015 10:10:53 AM JST
ChangeProperty
* Sun 24 May 2015 10:11:24 AM JST
PropMode
* Sun 24 May 2015 10:12:26 AM JST
"XAHK_WINDOW_OBSERVERS"
* Sun 24 May 2015 10:12:49 AM JST
False
* Sun 24 May 2015 10:13:31 AM JST
c.core.ChangeProperty(xcb.xproto.PropMode.Append, c.core.InternAtom(False, len("XAHK_WINDOW_OBSERVERS"), "XAHK_WINDOW_OBSERVERS").atom, c.core.InternAtom(True, len('INTEGER'), 'INTEGER').atom, 32, )
* Sun 24 May 2015 10:13:34 AM JST
c.core.ChangeProperty(xcb.xproto.PropMode.Append, c.core.InternAtom(False, len("XAHK_WINDOW_OBSERVERS"), "XAHK_WINDOW_OBSERVERS").atom, c.core.InternAtom(True, len('INTEGER'), 'INTEGER').atom, 32, )
* Sun 24 May 2015 10:14:09 AM JST
'\x01\x00\x00\x00'
* Sun 24 May 2015 10:14:15 AM JST
c.core.ChangeProperty(xcb.xproto.PropMode.Append, c.core.InternAtom(False, len("XAHK_WINDOW_OBSERVERS"), "XAHK_WINDOW_OBSERVERS").atom, c.core.InternAtom(True, len('INTEGER'), 'INTEGER').atom, 32, )
* Sun 24 May 2015 10:14:25 AM JST
'\x01\x00\x00\x00'
* Sun 24 May 2015 10:15:02 AM JST
56623126
* Sun 24 May 2015 10:15:19 AM JST
56623126
* Sun 24 May 2015 12:03:48 PM JST

* Sun 24 May 2015 12:03:48 PM JST

* Sun 24 May 2015 12:03:48 PM JST
        self._display.flush()

* Sun 24 May 2015 12:03:51 PM JST

* Sun 24 May 2015 12:03:51 PM JST

* Sun 24 May 2015 12:03:51 PM JST
        self._display.flush()

* Sun 24 May 2015 12:03:53 PM JST

* Sun 24 May 2015 12:03:53 PM JST

* Sun 24 May 2015 12:03:53 PM JST
        self._display.flush()

* Sun 24 May 2015 12:03:55 PM JST

* Sun 24 May 2015 12:03:55 PM JST

* Sun 24 May 2015 12:03:55 PM JST
        self._display.flush()

* Sun 24 May 2015 12:04:00 PM JST

* Sun 24 May 2015 12:04:00 PM JST

* Sun 24 May 2015 12:04:00 PM JST
        self._display.flush()

* Sun 24 May 2015 12:04:10 PM JST

* Sun 24 May 2015 12:04:10 PM JST

* Sun 24 May 2015 12:04:10 PM JST
        self._display.flush()

* Sun 24 May 2015 12:04:12 PM JST

* Sun 24 May 2015 12:04:12 PM JST

* Sun 24 May 2015 12:04:12 PM JST
        self._display.flush()

* Sun 24 May 2015 12:04:13 PM JST

* Sun 24 May 2015 12:04:14 PM JST

* Sun 24 May 2015 12:04:14 PM JST
        self._display.flush()

* Sun 24 May 2015 12:04:16 PM JST

* Sun 24 May 2015 12:04:16 PM JST

* Sun 24 May 2015 12:04:16 PM JST
        self._display.flush()

* Sun 24 May 2015 12:04:18 PM JST

* Sun 24 May 2015 12:04:18 PM JST

* Sun 24 May 2015 12:04:18 PM JST
        self._display.flush()

* Sun 24 May 2015 12:04:20 PM JST

* Sun 24 May 2015 12:04:20 PM JST

* Sun 24 May 2015 12:04:20 PM JST
        self._display.flush()

* Sun 24 May 2015 12:04:22 PM JST

* Sun 24 May 2015 12:04:22 PM JST

* Sun 24 May 2015 12:04:22 PM JST
        self._display.flush()

* Sun 24 May 2015 12:04:25 PM JST

* Sun 24 May 2015 12:04:25 PM JST

* Sun 24 May 2015 12:04:25 PM JST
        self._display.flush()

* Sun 24 May 2015 12:04:27 PM JST

* Sun 24 May 2015 12:04:28 PM JST

* Sun 24 May 2015 12:04:28 PM JST
        self._display.flush()

* Sun 24 May 2015 12:04:29 PM JST

* Sun 24 May 2015 12:04:29 PM JST

* Sun 24 May 2015 12:04:29 PM JST
        self._display.flush()

* Sun 24 May 2015 12:04:35 PM JST

* Sun 24 May 2015 12:04:36 PM JST

* Sun 24 May 2015 12:04:36 PM JST
        self._display.flush()

* Sun 24 May 2015 12:04:37 PM JST

* Sun 24 May 2015 12:04:38 PM JST

* Sun 24 May 2015 12:04:38 PM JST
        self._display.flush()

* Sun 24 May 2015 12:04:39 PM JST

* Sun 24 May 2015 12:04:39 PM JST

* Sun 24 May 2015 12:04:39 PM JST
        self._display.flush()

* Sun 24 May 2015 02:13:07 PM JST
w=wm.find_windows(WindowTitleSpec('Comix'))[0]

* Sun 24 May 2015 02:13:49 PM JST
        self._windows = [
            Window(self._display, wid) for wid in self._client_windows()]

* Sun 24 May 2015 02:14:27 PM JST
display.get_setup().roots[0].root
* Sun 24 May 2015 02:14:30 PM JST

* Sun 24 May 2015 02:14:30 PM JST

* Sun 24 May 2015 02:14:30 PM JST
        root = 

* Sun 24 May 2015 02:16:23 PM JST
73400324
* Sun 24 May 2015 02:19:41 PM JST
from _xahk.piece.x11_piece import X11Button
* Sun 24 May 2015 02:19:45 PM JST
b=X11Button(1)
* Sun 24 May 2015 02:20:06 PM JST
73400324
* Sun 24 May 2015 02:20:52 PM JST
root
* Sun 24 May 2015 02:20:52 PM JST
self.root
* Sun 24 May 2015 02:20:57 PM JST
root
* Sun 24 May 2015 02:20:57 PM JST
self.root
* Sun 24 May 2015 02:21:48 PM JST
73400324
* Sun 24 May 2015 02:30:09 PM JST
close()
* Sun 24 May 2015 02:32:37 PM JST
FakeInput
* Sun 24 May 2015 02:37:15 PM JST
self.xtest.FakeInput(event.Event.KeyPressEvent, e.detail, xcb.xproto.Time.CurrentTime, self.root, e.root_x, e.root_y, 0)
* Sun 24 May 2015 02:37:45 PM JST
self.xtest = conn(xcb.xtest.key)
* Sun 24 May 2015 02:38:51 PM JST
xproto
* Sun 24 May 2015 02:40:14 PM JST
from _xahk.eventcode import EventCode
* Sun 24 May 2015 02:40:20 PM JST
c.xtest.FakeInput(xcb.xproto.ButtonPress, 1, 0, 482, 100, 100, 0)
* Sun 24 May 2015 02:40:24 PM JST
c.xtest.FakeInput(xcb.xproto.ButtonPress, 1, 0, 482, 100, 100, 0)
* Sun 24 May 2015 02:40:27 PM JST
from _xahk.eventcode import EventCode
* Sun 24 May 2015 02:40:32 PM JST
c.xtest.FakeInput(xcb.xproto.ButtonPress, 1, 0, 482, 100, 100, 0)
* Sun 24 May 2015 02:40:35 PM JST
ButtonPress
* Sun 24 May 2015 02:40:36 PM JST
xproto.ButtonPress
* Sun 24 May 2015 02:40:36 PM JST
xcb.xproto.ButtonPress
* Mon 25 May 2015 04:42:02 AM JST
XRefreshKeyboardMapping
* Mon 25 May 2015 04:42:24 AM JST
handle_enter_leave
* Mon 25 May 2015 04:48:38 AM JST
current_app_window
* Mon 25 May 2015 06:42:28 AM JST
xcb.xproto.EventMask.EnterWindow
* Mon 25 May 2015 06:42:52 AM JST
xproto.
* Mon 25 May 2015 06:42:53 AM JST
xcb.xproto.
* Mon 25 May 2015 06:43:18 AM JST
EnterWindow
* Mon 25 May 2015 06:43:19 AM JST
EventMask.EnterWindow
* Mon 25 May 2015 06:43:19 AM JST
eventmask
                                       | EventMask.EnterWindow
* Mon 25 May 2015 06:43:21 AM JST
                                       
* Mon 25 May 2015 06:44:01 AM JST
self._root = Window(self._display, display.get_setup().roots[0].root)
* Mon 25 May 2015 06:44:15 AM JST
        eventmask = self._display.core.GetWindowAttributes(
            self._root).reply().your_event_mask
        self._display.core.ChangeWindowAttributes(
            self._root, CW.EventMask, [EventMask.PropertyChange | eventmask])

* Mon 25 May 2015 06:44:28 AM JST
Window(
* Mon 25 May 2015 06:44:32 AM JST
_display, 
* Mon 25 May 2015 06:44:33 AM JST
self._display, 
* Mon 25 May 2015 06:45:33 AM JST

* Mon 25 May 2015 06:45:33 AM JST

* Mon 25 May 2015 06:45:33 AM JST
            print(event)

* Mon 25 May 2015 06:45:59 AM JST
EnterNotifyEvent
* Mon 25 May 2015 06:46:45 AM JST
EnterNotifyEvent
* Mon 25 May 2015 06:48:22 AM JST
EnterNotifyEvent
* Mon 25 May 2015 06:50:28 AM JST
window
* Mon 25 May 2015 06:53:02 AM JST
ChangeWindowAttributes
* Mon 25 May 2015 06:56:46 AM JST
get_
* Mon 25 May 2015 07:00:16 AM JST
        # tmporary test
        from xcb.xproto import CW, EventMask
        self._root = display.get_setup().roots[0].root
        eventmask = self._display.core.GetWindowAttributes(
            self._root).reply().your_event_mask
        self._display.core.ChangeWindowAttributes(
            self._root, CW.EventMask, [EventMask.PropertyChange | eventmask
                                       | EventMask.EnterWindow])
        from _xahk.window_manager import WindowManager
        for win in WindowManager.get_instance().list_windows():
            evmsk = self._display.core.GetWindowAttributes(win).reply().your_event_mask
            self._display.core.ChangeWindowAttributes(
                win, CW.EventMask, [EventMask.EnterWindow | evmsk])

        self._display.flush()

* Mon 25 May 2015 07:04:36 AM JST
Inferior
* Mon 25 May 2015 07:04:54 AM JST
class NotifyDetail(_IntEnum):
    Ancestor         = 0
    Virtual          = 1
    Inferior         = 2
    Nonlinear        = 3
    NonlinearVirtual = 4
    Pointer          = 5
    PointerRoot      = 6
    _None            = 7

* Mon 25 May 2015 07:06:23 AM JST
from xcb.xproto import GrabMode, EventMask
* Mon 25 May 2015 07:06:29 AM JST
GrabMode, 
* Mon 25 May 2015 07:06:45 AM JST
from _xahk.eventdispatcher import EventDispatcher
from _xahk.eventloop import EventLoop

* Mon 25 May 2015 07:06:49 AM JST
from _xahk.display import get_display
* Mon 25 May 2015 07:07:53 AM JST
_instance == 
* Mon 25 May 2015 07:08:42 AM JST
isis
* Mon 25 May 2015 07:12:09 AM JST
        eventmask = self._display.core.GetWindowAttributes(
            self._root).reply().your_event_mask

* Mon 25 May 2015 07:12:43 AM JST
        self._display.core.ChangeWindowAttributes(
            self._root, CW.EventMask, [EventMask.PropertyChange | eventmask])

* Mon 25 May 2015 07:13:10 AM JST
from _xahk.atom_cache import AtomCache
* Mon 25 May 2015 07:14:01 AM JST
'_NET_CLIENT_LIST'
* Mon 25 May 2015 07:14:06 AM JST
'WINDOW'
* Mon 25 May 2015 07:14:10 AM JST
KATOM_TO_CACHE_FOR_MOUSE_BIND_LISTENER
* Mon 25 May 2015 07:14:24 AM JST
from _xahk.window import Window, ReplyType32
* Mon 25 May 2015 07:16:32 AM JST
_NET_CLIENT_LIST
* Mon 25 May 2015 07:18:25 AM JST

* Mon 25 May 2015 07:18:25 AM JST

* Mon 25 May 2015 07:18:25 AM JST
        self._current_windows = 

* Mon 25 May 2015 07:19:29 AM JST
PropertyNotifyEvent
* Mon 25 May 2015 07:19:59 AM JST
PropertyNotifyEvent
* Mon 25 May 2015 07:19:59 AM JST
CW, PropertyNotifyEvent
* Mon 25 May 2015 07:22:55 AM JST
        mask = self._display.core.GetWindowAttributes(
            window).reply().your_event_mask
        self._display.core.ChangeWindowAttributes(
            window, CW.EventMask, [EventMask.EnterWindow | mask])
        self._display.flush()

* Mon 25 May 2015 07:23:21 AM JST
Window
* Mon 25 May 2015 07:24:23 AM JST
form 
* Mon 25 May 2015 07:24:36 AM JST
MouseBindListener
* Mon 25 May 2015 07:25:05 AM JST

* Mon 25 May 2015 07:25:05 AM JST

* Mon 25 May 2015 07:25:05 AM JST
        if isinstance(event, (EnterNotifyEvent, )):

* Mon 25 May 2015 07:30:56 AM JST
NotifyDetail
* Mon 25 May 2015 07:39:01 AM JST
from _xahk.window import Window
* Mon 25 May 2015 07:42:53 AM JST

* Mon 25 May 2015 07:42:53 AM JST

* Mon 25 May 2015 07:42:53 AM JST
        print(window)

* Mon 25 May 2015 07:45:54 AM JST
title
* Mon 25 May 2015 07:46:23 AM JST
on_created_window
* Mon 25 May 2015 07:46:38 AM JST

* Mon 25 May 2015 07:46:38 AM JST

* Mon 25 May 2015 07:46:39 AM JST
        WindowManager.get_instance().add_observer(self)

* Mon 25 May 2015 07:47:01 AM JST

* Mon 25 May 2015 07:47:01 AM JST

* Mon 25 May 2015 07:47:02 AM JST
        WindowManager.get_instance().add_observer(self)

* Mon 25 May 2015 07:50:32 AM JST

* Mon 25 May 2015 07:50:32 AM JST

* Mon 25 May 2015 07:50:32 AM JST
        print('DEBUG-1-window_manager.py')

* Mon 25 May 2015 07:50:33 AM JST

* Mon 25 May 2015 07:50:33 AM JST

* Mon 25 May 2015 07:50:33 AM JST
        print('DEBUG-1-window_manager.py')

* Mon 25 May 2015 07:51:19 AM JST
PropertyNotifyEvent
* Mon 25 May 2015 07:51:55 AM JST

* Mon 25 May 2015 07:51:55 AM JST

* Mon 25 May 2015 07:51:55 AM JST
        print('DEBUG-1-window_manager.py')

* Mon 25 May 2015 07:52:33 AM JST
            
* Mon 25 May 2015 07:52:55 AM JST
PropertyNotifyEvent
* Mon 25 May 2015 07:53:31 AM JST
EventMask.PropertyChange
* Mon 25 May 2015 07:54:17 AM JST
ChangeWindowAttributes
* Mon 25 May 2015 07:54:46 AM JST
EventMask.PropertyChange
* Mon 25 May 2015 07:56:32 AM JST
all_event_mask
* Mon 25 May 2015 07:57:14 AM JST
        eventmask = self._display.core.GetWindowAttributes(
            self._root).reply().your_event_mask
        self._display.core.ChangeWindowAttributes(
            self._root, CW.EventMask, [EventMask.PropertyChange | eventmask])

* Mon 25 May 2015 07:57:26 AM JST
_root
* Mon 25 May 2015 07:57:27 AM JST
self._root
* Mon 25 May 2015 07:57:31 AM JST
PropertyChange
* Mon 25 May 2015 07:57:32 AM JST
EventMask.PropertyChange
* Mon 25 May 2015 07:57:35 AM JST
_root
* Mon 25 May 2015 07:57:36 AM JST
self._root
* Mon 25 May 2015 07:58:37 AM JST
EventMask.PropertyChange
* Mon 25 May 2015 08:09:20 AM JST
class NotifyMode(_IntEnum):
    Normal       = 0
    Grab         = 1
    Ungrab       = 2
    WhileGrabbed = 3

* Mon 25 May 2015 08:31:39 AM JST
        if event.detail == NotifyDetail.Inferior:
            return
        if event.mode == NotifyMode.Grab:
            return

* Mon 25 May 2015 08:31:46 AM JST
return 
* Mon 25 May 2015 08:33:40 AM JST
self._current_window.title
* Mon 25 May 2015 08:34:24 AM JST
27262979
* Mon 25 May 2015 08:35:04 AM JST
child
* Mon 25 May 2015 08:35:53 AM JST
20971845
* Mon 25 May 2015 08:36:31 AM JST
27262979
* Mon 25 May 2015 08:43:42 AM JST
21915913
* Mon 25 May 2015 08:44:37 AM JST
21915913
* Mon 25 May 2015 08:47:04 AM JST
c.core.QueryPointer(482).reply().child
* Mon 25 May 2015 08:47:45 AM JST
f_
* Mon 25 May 2015 08:47:45 AM JST
sle.f_
* Mon 25 May 2015 08:47:46 AM JST
sef.
* Mon 25 May 2015 08:47:51 AM JST
f_
* Mon 25 May 2015 08:47:51 AM JST
sle.f_
* Mon 25 May 2015 08:52:32 AM JST

* Mon 25 May 2015 08:52:32 AM JST

* Mon 25 May 2015 08:52:32 AM JST
        print(window)

* Mon 25 May 2015 08:52:42 AM JST

* Mon 25 May 2015 08:52:42 AM JST

* Mon 25 May 2015 08:52:42 AM JST
        print(self._current_widow)

* Mon 25 May 2015 08:52:48 AM JST
        print('{} {}'.format(self._current_window.title, self._current_window.id))

* Mon 25 May 2015 08:53:16 AM JST
Window(self._display, event.event)
* Mon 25 May 2015 08:53:19 AM JST

* Mon 25 May 2015 08:53:19 AM JST

* Mon 25 May 2015 08:53:19 AM JST
        self._current_window = 

* Mon 25 May 2015 08:53:52 AM JST

* Mon 25 May 2015 08:53:52 AM JST

* Mon 25 May 2015 08:53:52 AM JST
                self._current_window = win

* Mon 25 May 2015 08:59:40 AM JST
NotifyDetail.Inferior
* Mon 25 May 2015 08:59:51 AM JST
NotifyMode.Grab
* Mon 25 May 2015 03:23:25 PM JST
c.core.GrabButton(False, 482, xcb.xproto.EventMask.ButtonPress, 1, 1, )
* Mon 25 May 2015 03:24:04 PM JST
c.rawconnection.core.GrabButton(False, 482, xcb2.xproto.EventMask.ButtonPress, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async, 0, 0, xcb2.xproto.NamedButtonIndex.Middle, xcb2.xproto.NamedKeyButMask.Lock)
* Mon 25 May 2015 03:24:15 PM JST
Lock
* Mon 25 May 2015 03:24:15 PM JST
NamedKeyButMask.Lock
* Mon 25 May 2015 03:24:15 PM JST
xproto.NamedKeyButMask.Lock
* Mon 25 May 2015 03:24:16 PM JST
xcb.xproto.NamedKeyButMask.Lock
* Mon 25 May 2015 03:24:25 PM JST
Middle
* Mon 25 May 2015 03:24:25 PM JST
NamedButtonIndex.Middle
* Mon 25 May 2015 03:24:25 PM JST
xproto.NamedButtonIndex.Middle
* Mon 25 May 2015 03:24:26 PM JST
xcb2.xproto.NamedButtonIndex.Middle
* Mon 25 May 2015 03:24:51 PM JST
rawconnection.
* Tue 26 May 2015 09:50:34 AM JST
c.core.GrabButton(False, 482, xcb.xproto.EventMask.ButtonPress, xcb.xproto.GrabMode.Async, xcb.xproto.GrabMode.Async, 0, 0, 1, 0)
* Tue 26 May 2015 09:50:45 AM JST
(False, 482, xcb.xproto.EventMask.ButtonPress, xcb.xproto.GrabMode.Async, xcb.xproto.GrabMode.Async, 0, 0, 1, 0)
* Tue 26 May 2015 10:10:02 AM JST
GrabMotion
* Tue 26 May 2015 10:14:59 AM JST
c.core.GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode)
* Tue 26 May 2015 10:15:05 AM JST
c.core.GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time)
* Tue 26 May 2015 10:15:13 AM JST
c.core.GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers)
* Tue 26 May 2015 11:51:08 AM JST
obser
* Tue 26 May 2015 11:55:35 AM JST
clear()
* Tue 26 May 2015 01:58:25 PM JST
c.core.GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers)

* Tue 26 May 2015 01:58:28 PM JST
c.core.GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers)

* Wed 27 May 2015 07:51:21 AM JST
class BindCandidate(Observable):
    """Class BindCandidate
    """
    # Attributes:
    spec = None  # () 
    __registry = None  # (<accelerator, cmd>) 
    
    # Operations
    def is_satisfied(self, window):
        """function is_satisfied
        
        window: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def build_listener(self, listener, window):
        """function build_listener
        
        listener: 
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def register_bind(self, accelerator, cmd):
        """function register_bind
        
        accelerator: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unregister_bind(self, accelerator):
        """function unregister_bind
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 27 May 2015 07:52:25 AM JST

* Wed 27 May 2015 07:52:25 AM JST

* Wed 27 May 2015 07:52:25 AM JST
    spec = None  # () 

* Wed 27 May 2015 07:52:50 AM JST
return 
* Wed 27 May 2015 07:52:52 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 07:53:01 AM JST
widnow
* Wed 27 May 2015 07:53:43 AM JST

* Wed 27 May 2015 07:53:43 AM JST

* Wed 27 May 2015 07:53:43 AM JST
        return None # should raise NotImplementedError()

* Wed 27 May 2015 07:53:48 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 07:54:32 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 07:56:01 AM JST

* Wed 27 May 2015 07:56:01 AM JST

* Wed 27 May 2015 07:56:01 AM JST
        super(BindCandidate, self).__init__()

* Wed 27 May 2015 07:58:06 AM JST
self._notify_changed_registry()
* Wed 27 May 2015 07:59:33 AM JST
class KeyBindManager(BindCandidateObserver, WindowManagerObserver):
    """Class KeyBindManager
    """
    # Attributes:
    is_binding = None  # (bool) 
    __listener = None  # (KeyBindListener) 
    __candidates = None  # (list) 
    
    # Operations
    def start_management(self):
        """function start_management
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def stop_management(self):
        """function stop_management
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def update_binding(self):
        """function update_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def entry_candidate(self, candidate):
        """function entry_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def withdraw_candidate(self, candidate):
        """function withdraw_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def has_candidate(self, candidate):
        """function has_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def counts_candidate(self):
        """function counts_candidate
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def elect_candidates(self, window):
        """function elect_candidates
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_created_window(self, window):
        """function on_created_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_destroyed_window(self, window_id):
        """function on_destroyed_window
        
        window_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_chaged_bind_registry(self):
        """function on_chaged_bind_registry
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 27 May 2015 08:00:56 AM JST
_
* Wed 27 May 2015 08:00:57 AM JST
lsef._
* Wed 27 May 2015 08:01:02 AM JST
None  # (bool) 
* Wed 27 May 2015 08:01:07 AM JST
self.
* Wed 27 May 2015 08:01:40 AM JST
class KeyBindListener(Observable, EventDispatcher):
    """Class KeyBindListener
    """
    # Attributes:
    __display = None  # () 
    __binding = None  # (<(Window, code, modifier), cmd>) 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_event(self, event):
        """function on_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def bind(self, window, code, modifiers, cmd):
        """function bind
        
        window: 
        code: 
        modifiers: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unbind(self, window, code, modifiers):
        """function unbind
        
        window: 
        code: 
        modifiers: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear_binding(self):
        """function clear_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_binding(self):
        """function list_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_cmds(self):
        """function list_cmds
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iteritems(self):
        """function iteritems
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def items(self):
        """function items
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __grab(self, window, code, modifiers):
        """function grab
        
        window: 
        code: 
        modifiers: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ungrab(self, window, code, modifiers):
        """function ungrab
        
        window: 
        code: 
        modifiers: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 27 May 2015 08:02:32 AM JST

* Wed 27 May 2015 08:02:32 AM JST

* Wed 27 May 2015 08:02:32 AM JST
    __display = None  # () 

* Wed 27 May 2015 08:04:10 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 08:05:48 AM JST

* Wed 27 May 2015 08:05:48 AM JST

* Wed 27 May 2015 08:05:48 AM JST
        return None # should raise NotImplementedError()

* Wed 27 May 2015 08:06:26 AM JST
from _xahk.event import KeyEvent
* Wed 27 May 2015 08:13:49 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 08:14:51 AM JST
GrabMode
* Wed 27 May 2015 08:15:12 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 08:15:24 AM JST
GrabKey?
* Wed 27 May 2015 08:16:33 AM JST

* Wed 27 May 2015 08:16:33 AM JST

* Wed 27 May 2015 08:16:33 AM JST
        return None # should raise NotImplementedError()

* Wed 27 May 2015 08:17:43 AM JST
        for observer in self._observers:
            observer.on_binded_key(target, cmd)

* Wed 27 May 2015 08:17:50 AM JST
cmd
* Wed 27 May 2015 08:18:35 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 08:19:52 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 08:20:01 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 08:20:10 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 08:20:23 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 08:21:15 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 08:21:24 AM JST
    def clear_binding(self):
        """function clear_binding

        returns
        """
        for window, code, modifiers in self.list_binding():
            self.unbind(window, code, modifiers)


* Wed 27 May 2015 08:22:13 AM JST
_is
* Wed 27 May 2015 08:22:47 AM JST
_self
* Wed 27 May 2015 08:24:21 AM JST
            
* Wed 27 May 2015 08:26:49 AM JST
class KeyBindListenerObserver:
    """Class KeyBindListenerObserver
    """
    # Attributes:
    
    # Operations
    def on_binded_key(self, target, cmd):
        """function on_binded_key
        
        target: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_unbinded_key(self, target):
        """function on_unbinded_key
        
        target: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 27 May 2015 08:27:47 AM JST
None  # (KeyBindListener)
* Wed 27 May 2015 08:28:26 AM JST
None  # (list)
* Wed 27 May 2015 08:30:04 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 08:30:14 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 08:30:20 AM JST
_canddate
* Wed 27 May 2015 08:30:31 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 08:30:43 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 08:31:22 AM JST
from dotavoider import ListDotAvoider
* Wed 27 May 2015 08:31:27 AM JST
ListDotAvoider
* Wed 27 May 2015 08:31:38 AM JST
ListDotAvoider
* Wed 27 May 2015 08:32:43 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 08:34:46 AM JST
self.
* Wed 27 May 2015 08:35:03 AM JST
self.
* Wed 27 May 2015 08:35:26 AM JST
on_chaged_bind_registry
* Wed 27 May 2015 08:35:37 AM JST
# on_chaged_bind_registry
* Wed 27 May 2015 08:35:49 AM JST
        if self._is_managing:
            self.refresh_binding()

* Wed 27 May 2015 08:36:01 AM JST
refresh
* Wed 27 May 2015 08:36:05 AM JST
        if self.is_managing:
            self.update_binding()

* Wed 27 May 2015 08:36:28 AM JST
        return None # should raise NotImplementedError()

* Wed 27 May 2015 08:38:20 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 08:38:23 AM JST
self.is_managing
* Wed 27 May 2015 08:38:32 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 08:38:35 AM JST
WInd
* Wed 27 May 2015 08:38:48 AM JST
# on_created_window
* Wed 27 May 2015 08:38:58 AM JST
# on_created_window
* Wed 27 May 2015 08:39:13 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 08:39:46 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 08:43:31 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 08:44:05 AM JST
    def entry_candidate(self, candidate):
        """function entry_candidate

        candidate:

        returns
        """
        self._candidates.append(candidate)
        candidate.add_observer(self) # on_chaged_bind_registry
        if self.is_managing:
            self.update_binding()

    def withdraw_candidate(self, candidate):
        """function withdraw_candidate

        candidate:

        returns
        """
        self._candidates.remove(candidate)
        candidate.remove_observer(self) # on_chaged_bind_registry
        if self.is_managing:
            self.update_binding()

    def has_candidate(self, candidate):
        """function has_candidate

        candidate:

        returns
        """
        return candidate in self._candidates

    def counts_candidate(self):
        """function counts_candidate

        returns int
        """
        return len(self._candidates)

    def elect_candidates(self, window):
        """function elect_candidates

        window:

        returns
        """
        result, append = ListDotAvoider().append
        for candidate in self._candidates:
            if candidate.is_satisfied(window):
                append(candidate)
        return result

* Wed 27 May 2015 08:44:25 AM JST
    def stop_management(self):
        """function stop_management

        returns
        """
        if self.is_managing:
            # on_created_window
            WindowManager.get_instance().remove_observer(self)

    def update_binding(self):
        """function update_binding

        returns
        """
        self._listener.clear_binding()
        for window in WindowManager.get_instance().list_windows():
            self._bind_to_window(window)
        self._listener.flush()


* Wed 27 May 2015 08:44:43 AM JST
    def start_management(self):
        """function start_management

        returns bool
        """
        if not self.is_managing:
            WindowManager.get_instance().add_observer(self) # on_created_window
            self.is_managing = True
            self.update_binding()
        return self.is_managing

    def stop_management(self):
        """function stop_management

        returns
        """
        if self.is_managing:
            # on_created_window
            WindowManager.get_instance().remove_observer(self)


* Wed 27 May 2015 08:46:21 AM JST
        for window, code, modifiers in self._listener.list_binding():
            if window == window_id:
                self._listener.unbind(window, code, modifiers)
        self._listener.flush()

* Wed 27 May 2015 08:46:29 AM JST

* Wed 27 May 2015 08:46:30 AM JST

* Wed 27 May 2015 08:46:30 AM JST
        #

* Wed 27 May 2015 08:46:59 AM JST
handle 
* Wed 27 May 2015 08:51:14 AM JST
window: {}, code: {}, modifiers: {}
* Wed 27 May 2015 08:51:26 AM JST
target[0], target[1], target[2]
* Wed 27 May 2015 08:52:25 AM JST
from _xahk.windowspec._windowspec import WindowSpec
* Wed 27 May 2015 08:52:36 AM JST
class ExcludeWindowSpec(WindowSpec):
    r"""ExcludeWindowSpec

    ExcludeWindowSpec is a WindowSpec.
    Responsibility:
    """
    def is_satisfied(self, window):
        r"""SUMMARY

        is_satisfied(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        return 'emacs' not in window.get_wmclass()

* Wed 27 May 2015 08:52:46 AM JST
class KeyCommand(InputCommand):
    r"""KeyCommand

    KeyCommand is a ImputCommand.
    Responsibility:
    """
    __slots__ = ('key', )

    def __init__(self, accelerator):
        r"""

        @Arguments:
        - `accelerator`:
        """
        super(KeyCommand, self).__init__()
        self.key = X11Key(accelerator.get_code(), accelerator.get_modifiers())

    def on_down(self, event):
        r"""SUMMARY

        on_down(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        self.key.press(event.window.get_id())

    def on_up(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        self.key.release(event.window.get_id())
        self.key.display.flush()

* Wed 27 May 2015 08:52:58 AM JST
class ChromeOpenSecret(InputCommand, WindowManagerObserver):
    r"""ChromeOpenSecret

    ChromeOpenSecret is a InputCommand.
    Responsibility:
    """
    def __init__(self, ):
        r"""
        """
        self.ctrl_l = X11Key(46, Modifier.Control)
        self.ctrl_c = X11Key(54, Modifier.Control)
        self.shift_ctrl_n = X11Key(57, Modifier.Shift | Modifier.Control)
        self.ctrl_v = X11Key(55, Modifier.Control)
        self.ret = X11Key(36)

    def on_up(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        self.ctrl_l.tap(event.window.get_id())
        self.ctrl_l.display.flush()
        sleep(0.1)
        self.ctrl_c.tap(event.window.get_id())
        self.ctrl_c.display.flush()
        WindowManager.get_instance().add_observer(self)
        sleep(0.1)
        self.shift_ctrl_n.tap(event.window.get_id())
        self.shift_ctrl_n.display.flush()

    def on_created_window(self, window):
        r"""SUMMARY

        on_created_window(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        if 'Google-chrome' not in window.get_wmclass():
            return
        self.ctrl_v.tap(window.get_id())
        self.ctrl_v.display.flush()
        self.ret.tap(window.get_id())
        self.ret.display.flush()
        WindowManager.get_instance().remove_observer(self)

* Wed 27 May 2015 08:53:16 AM JST
from _xahk.piece.x11_piece import X11Key
* Wed 27 May 2015 08:53:22 AM JST
from _xahk.piece.modifier import Modifier
* Wed 27 May 2015 08:53:25 AM JST
from _xahk.accelerator import Accelerator
* Wed 27 May 2015 08:53:32 AM JST
from _xahk.window_manager import WindowManager
* Wed 27 May 2015 08:53:42 AM JST
from _xahk.input_bind_listener import ButtonIndex
* Wed 27 May 2015 08:53:46 AM JST
from _xahk.eventloop import EventLoop
* Wed 27 May 2015 08:53:51 AM JST
from _xahk.input_command import InputCommand
* Wed 27 May 2015 08:54:02 AM JST
from _xahk.window_manager_observer import WindowManagerObserver
* Wed 27 May 2015 08:54:29 AM JST
from time import sleep
* Wed 27 May 2015 08:54:44 AM JST
DOWN_ACCE = Accelerator(116)
UP_ACCE = Accelerator(111)
LEFT_ACCE = Accelerator(113)
RIGHT_ACCE = Accelerator(114)
L_KEY_ACCE = Accelerator(46)
N_CTRL_KEY_ACCE = Accelerator(57, Modifier.Control)
K_CTRL_KEY_ACCE = Accelerator(45, Modifier.Control)
L_CTRL_KEY_ACCE = Accelerator(46, Modifier.Control)
J_CTRL_KEY_ACCE = Accelerator(44, Modifier.Control)
E_CTRL_KEY_ACCE = Accelerator(26, Modifier.Control)
Q_CTRL_KEY_ACCE = Accelerator(24, Modifier.Control)
W_CTRL_KEY_ACCE = Accelerator(25, Modifier.Control)
T_SHIFT_CTRL_KEY_ACCE = Accelerator(28, Modifier.Shift | Modifier.Control)
N_SUPER_KEY_ACCE = Accelerator(57, Modifier.Super)

* Wed 27 May 2015 08:54:58 AM JST
# Global KeyBind but exclude emacs
global_candidate = BindCandidate(ExcludeWindowSpec())
global_candidate.register_bind(N_CTRL_KEY_ACCE, KeyCommand(DOWN_ACCE))
global_candidate.register_bind(K_CTRL_KEY_ACCE, KeyCommand(UP_ACCE))
global_candidate.register_bind(J_CTRL_KEY_ACCE, KeyCommand(LEFT_ACCE))
global_candidate.register_bind(L_CTRL_KEY_ACCE, KeyCommand(RIGHT_ACCE))

* Wed 27 May 2015 08:55:14 AM JST
from _xahk.bind_candidate import BindCandidate
* Wed 27 May 2015 08:55:36 AM JST
chrome_candidate = BindCandidate(WindowWMClassSpec('Google-chrome'))
chrome_candidate.register_bind(E_CTRL_KEY_ACCE, KeyCommand(L_CTRL_KEY_ACCE))
chrome_candidate.register_bind(Q_CTRL_KEY_ACCE, KeyCommand(T_SHIFT_CTRL_KEY_ACCE))

* Wed 27 May 2015 08:56:06 AM JST
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec
* Wed 27 May 2015 08:56:40 AM JST
BindManager
* Wed 27 May 2015 08:56:49 AM JST
from _xahk.keybind_manager import KeyBindManager
* Wed 27 May 2015 08:58:03 AM JST
key_bind_manager.add_candidate(global_candidate)
key_bind_manager.add_candidate(emacs_candidate)
key_bind_manager.add_candidate(chrome_candidate)

* Wed 27 May 2015 08:58:17 AM JST
KEY_BIND_MANAGER
* Wed 27 May 2015 08:58:22 AM JST
add
* Wed 27 May 2015 08:58:43 AM JST
loop=EventLoop.get_instance()

try:
    while 1:
        loop.dispatch_event()
        sleep(0.1)
except KeyboardInterrupt:
    print('Keybaord Interrupted!!')


get_display().disconnect()

* Wed 27 May 2015 08:58:50 AM JST
from _xahk.display import get_display
* Wed 27 May 2015 09:03:13 AM JST
# debug
KeyBindListener.get_instance().add_observer(DebugKeyBindListenerObserver())

* Wed 27 May 2015 09:03:30 AM JST
# debug
KeyBindListener.get_instance().add_observer(DebugKeyBindListenerObserver())

* Wed 27 May 2015 09:06:05 AM JST
title
* Wed 27 May 2015 09:09:05 AM JST
c.core.GrabButton
* Wed 27 May 2015 09:09:15 AM JST
from _xahk.window_manager import WindowManager
* Wed 27 May 2015 09:09:23 AM JST
list_
* Wed 27 May 2015 09:10:37 AM JST
75497473
* Wed 27 May 2015 09:10:55 AM JST
from _xahk.window_manager import WindowManager

* Wed 27 May 2015 09:11:01 AM JST
w=WindowManager.get_instance().list_windows()[-1]

* Wed 27 May 2015 09:11:06 AM JST
a[(w, 1, 0)] = 1111

* Wed 27 May 2015 09:11:09 AM JST
a[(75497473, 1, 0)]

* Wed 27 May 2015 09:11:20 AM JST
from _xahk.window_manager import WindowManager
w=WindowManager.get_instance().list_windows()[-1]
a[(w, 1, 0)] = 1111

* Wed 27 May 2015 09:11:29 AM JST
a={}
* Wed 27 May 2015 09:11:35 AM JST
a[(w, 1, 0)] = 1111
* Wed 27 May 2015 09:11:47 AM JST
a[()]
* Wed 27 May 2015 09:11:49 AM JST
a[(75497473, 1, 0)]
* Wed 27 May 2015 09:13:02 AM JST
from _xahk.window_manager import WindowManager
w=WindowManager.get_instance().list_windows()[-1]
a={}
a[(w, 1, 0)] = 1111

* Wed 27 May 2015 09:13:06 AM JST
a[(75497473, 1, 0)]
* Wed 27 May 2015 09:13:39 AM JST
from _xahk.window_manager import WindowManager
w=WindowManager.get_instance().list_windows()[-1]
a={}
a[(w, 1, 0)] = 1111

* Wed 27 May 2015 09:13:46 AM JST
a[(75497473, 1, 0)]

* Wed 27 May 2015 09:14:10 AM JST
from _xahk.window_manager import WindowManager
w=WindowManager.get_instance().list_windows()[-1]
a={}
a[(w, 1, 0)] = 1111
a[(75497473, 1, 0)]

* Wed 27 May 2015 09:14:31 AM JST
from _xahk.window_manager import WindowManager
w=WindowManager.get_instance().list_windows()[-1]
a={}
a[(w, 1, 0)] = 1111
a[(75497473, 1, 0)]

* Wed 27 May 2015 09:15:31 AM JST
emacs_candidate = BindCandidate(WindowWMClassSpec('emacs'))
* Wed 27 May 2015 09:15:42 AM JST
# Emacs KeyBind
emacs_candidate = BindCandidate(WindowWMClassSpec('emacs'))

* Wed 27 May 2015 09:15:54 AM JST
# chrome

* Wed 27 May 2015 09:15:58 AM JST
chrome_candidate.register_bind(N_SUPER_KEY_ACCE, ChromeOpenSecret())
* Wed 27 May 2015 10:03:41 AM JST
self._listener.clear_binding()
* Wed 27 May 2015 10:06:39 AM JST

* Wed 27 May 2015 10:06:40 AM JST
_windowspec
* Wed 27 May 2015 10:06:45 AM JST
WindowSpec
* Wed 27 May 2015 10:07:05 AM JST
_window
* Wed 27 May 2015 10:07:11 AM JST
window_id_
* Wed 27 May 2015 10:07:21 AM JST

* Wed 27 May 2015 10:07:22 AM JST
window_id_spec
* Wed 27 May 2015 10:07:28 AM JST
WindowIDSpec
* Wed 27 May 2015 10:07:34 AM JST

* Wed 27 May 2015 10:07:40 AM JST
WindowTitleSpec
* Wed 27 May 2015 10:07:58 AM JST
WindowWMClassSpec
* Wed 27 May 2015 10:08:03 AM JST
_windowspec
* Wed 27 May 2015 10:08:12 AM JST

* Wed 27 May 2015 10:08:12 AM JST

* Wed 27 May 2015 10:08:12 AM JST
from _xahk.windowspec.window_wmclass_spec import WindowWMClassSpec

* Wed 27 May 2015 10:09:41 AM JST
 *.py
QU /root/.pylib/_xahk/uml# dia2code -t python eventdispatcher.dia
warning: unnamed association between EventDispatcher and EventLoop
warning: unnamed association between EventObserver and EventLoop
warning: unnamed association between Keyboardlock and EventLoop
warning: unnamed association between WindowManagerObserver and WindowManager
warning: unnamed association between BindCandidate and BindManager
warning: unnamed association between BindCandidateObserver and BindCandidate
warning: unnamed association between InputBindListener and BindManager
warning: unnamed association between InputBindListenerObserver and InputBindListener
warning: unnamed association between DesktopHandlerObserver and X11DesktopHandler
QU /root/.pylib/_xahk/uml# ls
Accelerator.py                EventObserver.py              taskbar.dia
atomcache.dia                 global_input_listener.dia     tmp.dia
BindCandidateObserver.py      InputBindListenerObserver.py  undo.dia
BindCandidate.py              InputBindListener.py          window.dia
BindManager.py                inputcommand.dia              windowmanager.dia
build                         InputCommand.py               WindowManagerObserver.py
DesktopHandlerObserver.py     inputlistener.dia             WindowManager.py
event2.dia                    KeyBindListener.py            WindowMove.dia
event.dia                     Keyboardlock.py               windowspec.dia
eventdispatcher.dia           layout.dia                    windowstate.dia
eventdispatcher.dia.autosave  MouseBindListener.py          X11DesktopHandler.py
EventDispatcher.py            pieace.dia                    XAHKWindow.dia
EventLoop.py                  platform_event_sorce.dia
QU /root/.pylib/_xahk/uml# em X11DesktopHandler.py&
[1] 4508
QU /root/.pylib/_xahk/uml# Waiting for Emacs...

[1]  + done       emacsclient -a emacs X11DesktopHandler.py
QU /root/.pylib/_xahk/uml# cd /media/Data/MYTEMP/
QU /media/Data/MYTEMP# cd src
QU /media/Data/MYTEMP/src# ls
AutoHotkey      chromium  gps          osl-osl.tar.gz
awesome-3.4.13  doxyhtml  osl-osl.tar  Python-2.0.1.tgz
QU /media/Data/MYTEMP/src# cd chromium/
QU /media/Data/MYTEMP/src/chromium# ls
Android.mk       codereview.settings  LICENSE                  sdch
android_webview  components           LICENSE.chromium_os      skia
apps             content              media                    sql
ash              courgette            mojo                     storage
AUTHORS          crypto               native_client_sdk        styleguide
base             dbus                 net                      sync
blink            DEPS                 OWNERS                   testing
breakpad         device               pdf                      third_party
build            extensions           ppapi                    tools
BUILD.gn         gin                  PRESUBMIT.py             ui
cc               google_apis          PRESUBMIT_test_mocks.py  url
chrome           google_update        PRESUBMIT_test.py        WATCHLISTS
chromecast       gpu                  printing                 webkit
chrome_elf       ios                  remoting                 win8
chromeos         ipc                  rlz
cloud_print      jingle               sandbox
QU /media/Data/MYTEMP/src/chromium# ..
QU /media/Data/MYTEMP/src# ls
AutoHotkey      chromium  gps          osl-osl.tar.gz
awesome-3.4.13  doxyhtml  osl-osl.tar  Python-2.0.1.tgz
QU /media/Data/MYTEMP/src# cd chromium/
QU /media/Data/MYTEMP/src/chromium# ls
Android.mk       codereview.settings  LICENSE                  sdch
android_webview  components           LICENSE.chromium_os      skia
apps             content              media                    sql
ash              courgette            mojo                     storage
AUTHORS          crypto               native_client_sdk        styleguide
base             dbus                 net                      sync
blink            DEPS                 OWNERS                   testing
breakpad         device               pdf                      third_party
build            extensions           ppapi                    tools
BUILD.gn         gin                  PRESUBMIT.py             ui
cc               google_apis          PRESUBMIT_test_mocks.py  url
chrome           google_update        PRESUBMIT_test.py        WATCHLISTS
chromecast       gpu                  printing                 webkit
chrome_elf       ios                  remoting                 win8
chromeos         ipc                  rlz
cloud_print      jingle               sandbox
QU /media/Data/MYTEMP/src/chromium# la
.                cloud_print          ios                      sandbox
..               codereview.settings  ipc                      sdch
Android.mk       components           jingle                   skia
android_webview  content              LICENSE                  sql
apps             courgette            LICENSE.chromium_os      storage
ash              crypto               media                    styleguide
AUTHORS          dbus                 mojo                     sync
base             DEPS                 native_client_sdk        testing
blink            device               net                      third_party
breakpad         extensions           OWNERS                   tools
build            gin                  pdf                      ui
BUILD.gn         .git                 ppapi                    url
cc               .gitattributes       PRESUBMIT.py             WATCHLISTS
chrome           .gitignore           PRESUBMIT_test_mocks.py  webkit
chromecast       .gn                  PRESUBMIT_test.py        win8
chrome_elf       google_apis          printing
chromeos         google_update        remoting
.clang-format    gpu                  rlz
QU /media/Data/MYTEMP/src/chromium# ..
QU /media/Data/MYTEMP/src# ls
AutoHotkey      chromium  gps          osl-osl.tar.gz
awesome-3.4.13  doxyhtml  osl-osl.tar  Python-2.0.1.tgz
QU /media/Data/MYTEMP/src# la
.   AutoHotkey      chromium  gps          osl-osl.tar.gz
..  awesome-3.4.13  doxyhtml  osl-osl.tar  Python-2.0.1.tgz
QU /media/Data/MYTEMP/src#                     
QU /media/Data/MYTEMP/src# cd chromium/
QU /media/Data/MYTEMP/src/chromium# ls
Android.mk       codereview.settings  LICENSE                  sdch
android_webview  components           LICENSE.chromium_os      skia
apps             content              media                    sql
ash              courgette            mojo                     storage
AUTHORS          crypto               native_client_sdk        styleguide
base             dbus                 net                      sync
blink            DEPS                 OWNERS                   testing
breakpad         device               pdf                      third_party
build            extensions           ppapi                    tools
BUILD.gn         gin                  PRESUBMIT.py             ui
cc               google_apis          PRESUBMIT_test_mocks.py  url
chrome           google_update        PRESUBMIT_test.py        WATCHLISTS
chromecast       gpu                  printing                 webkit
chrome_elf       ios                  remoting                 win8
chromeos         ipc                  rlz
cloud_print      jingle               sandbox
QU /media/Data/MYTEMP/src/chromium# ..
QU /media/Data/MYTEMP/src# ls
AutoHotkey      chromium  gps          osl-osl.tar.gz
awesome-3.4.13  doxyhtml  osl-osl.tar  Python-2.0.1.tgz
QU /media/Data/MYTEMP/src# find . -type f -name "chrome.conf"
^N^N^C
QU /media/Data/MYTEMP/src# cd chromium/
QU /media/Data/MYTEMP/src/chromium# cd chrome/
QU /media/Data/MYTEMP/src/chromium/chrome# ls
android                                chrome_syzygy.gyp
angle_end2end_tests.isolate            chrome_syzygy.gypi
angle_unittests.isolate                chrome_tests.gni
app                                    chrome_tests.gypi
app_installer                          chrome_tests_unit.gypi
app_shim                               chrome.user32.delay.imports
browser                                chrome_utility.gypi
browser_tests.isolate                  chrome_watcher
BUILD.gn                               chrome_web_ui_mojo_bindings.gyp
child                                  common
chrome_android.gypi                    common_constants.gyp
chrome_android_paks.gypi               DEPS
chrome_browser_chromeos.gypi           docs
chrome_browser_extensions.gypi         gles2_conform_test.isolate
chrome_browser.gypi                    gl_tests.isolate
chrome_browser_ui.gypi                 installer
chrome_browser_ui_views.gyp            interactive_ui_tests.isolate
chrome_child.gypi                      js_unittest_rules.gypi
chrome_common.gypi                     js_unittest_vars.gypi
chrome_debugger.gypi                   metro_utils.gypi
chrome_dll_bundle.gypi                 nacl
chrome_dll.gypi                        OWNERS
chrome_exe.gypi                        plugin
chrome.gyp                             policy.gypi
chrome_installer.gypi                  policy_templates.gypi
chrome_installer_util.gypi             PRESUBMIT.py
chrome_ios_bundle_resources.gypi       renderer
chrome.isolate                         service
chrome_nibs.gyp                        sync_integration_tests.isolate
chrome_nibs.gypi                       tab_capture_end2end_tests.isolate
chrome_plugin.gypi                     telemetry_gpu_test.isolate
chrome_process_finder.gypi             telemetry.isolate
chrome_renderer.gypi                   test
chrome_repack_chrome_100_percent.gypi  third_party
chrome_repack_chrome_200_percent.gypi  tools
chrome_repack_chrome_300_percent.gypi  unit_tests.isolate
chrome_repack_locales.gni              utility
chrome_repack_locales.gypi             VERSION
chrome_repack_resources.gypi           version.gni
chrome_resources.gyp                   version.h.in
chrome_shell.gypi                      version_resource_rules.gypi
chrome_shell_test_apk.isolate
QU /media/Data/MYTEMP/src/chromium/chrome# cd
QU /root# cd .pylib/_xahk/uml/
QU /root/.pylib/_xahk/uml# ls
Accelerator.py             global_input_listener.dia     taskbar.dia
atomcache.dia              InputBindListenerObserver.py  tmp.dia
BindCandidateObserver.py   InputBindListener.py          undo.dia
BindCandidate.py           inputcommand.dia              window.dia
BindManager.py             InputCommand.py               windowmanager.dia
build                      inputlistener.dia             WindowManagerObserver.py
DesktopHandlerObserver.py  keybind.dia                   WindowManager.py
event2.dia                 KeyBindListener.py            WindowMove.dia
event.dia                  Keyboardlock.py               windowspec.dia
eventdispatcher.dia        layout.dia                    windowstate.dia
EventDispatcher.py         MouseBindListener.py          X11DesktopHandler.py
EventLoop.py               pieace.dia                    XAHKWindow.dia
EventObserver.py           platform_event_sorce.dia
QU /root/.pylib/_xahk/uml# rm *.py
QU /root/.pylib/_xahk/uml# ls
atomcache.dia              inputlistener.dia         undo.dia
build                      keybind.dia               window.dia
event2.dia                 layout.dia                windowmanager.dia
event.dia                  pieace.dia                WindowMove.dia
eventdispatcher.dia        platform_event_sorce.dia  windowspec.dia
global_input_listener.dia  taskbar.dia               windowstate.dia
inputcommand.dia           tmp.dia                   XAHKWindow.dia
QU /root/.pylib/_xahk/uml# dia2code -t python keybind.dia        
warning: unnamed association between BindCandidate and KeyBindManager
warning: unnamed association between KeyBindListener and KeyBindManager
warning: unnamed association between BindCandidateObserver and BindCandidate
QU /root/.pylib/_xahk/uml# ls
atomcache.dia              inputlistener.dia           tmp.dia
BindCandidateObserver.py   keybind.dia                 undo.dia
BindCandidate.py           KeyBindListenerObserver.py  window.dia
build                      KeyBindListener.py          windowmanager.dia
event2.dia                 KeyBindManager.py           WindowManagerObserver.py
event.dia                  layout.dia                  WindowMove.dia
eventdispatcher.dia        Observable.py               windowspec.dia
EventDispatcher.py         pieace.dia                  windowstate.dia
global_input_listener.dia  platform_event_sorce.dia    XAHKWindow.dia
inputcommand.dia           taskbar.dia
QU /root/.pylib/_xahk/uml# em BindCandidate.py&
[1] 10515
QU /root/.pylib/_xahk/uml# Waiting for Emacs...

[1]  + done       emacsclient -a emacs BindCandidate.py
QU /root/.pylib/_xahk/uml# em KeyBindManager.py&
[1] 10840
QU /root/.pylib/_xahk/uml# Waiting for Emacs...
QU /root/.pylib/_xahk/uml# em KeyBindListener.py&
[2] 10963
QU /root/.pylib/_xahk/uml# Waiting for Emacs...

[2]  + done       emacsclient -a emacs KeyBindListener.py
QU /root/.pylib/_xahk/uml# em KeyBindListenerObserver.py&
[2] 11740
QU /root/.pylib/_xahk/uml# Waiting for Emacs...

[2]  + done       emacsclient -a emacs KeyBindListenerObserver.py
QU /root/.pylib/_xahk/uml# dia
* Wed 27 May 2015 10:10:29 AM JST
class CursorHandler(EventDispatcher):
    """Class CursorHandler
    """
    # Attributes:
    __under_window = None  # (Window) 
    __observers = None  # (list) 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_under_window(self):
        """function get_under_window
        
        returns Window
        """
        return None # should raise NotImplementedError()
    
    def on_created_window(self, window):
        """function on_created_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_observer(self, observer):
        """function add_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_observer(self, observer):
        """function remove_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __update_under_window(self):
        """function update_under_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __set_under_window(self):
        """function set_under_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __change_window_attributes(self, window):
        """function change_window_attributes
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 27 May 2015 10:10:46 AM JST
event
* Wed 27 May 2015 10:11:51 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 10:15:55 AM JST
class NotifyDetail(_IntEnum):
    Ancestor         = 0
    Virtual          = 1
    Inferior         = 2
    Nonlinear        = 3
    NonlinearVirtual = 4
    Pointer          = 5
    PointerRoot      = 6
    _None            = 7


class NotifyMode(_IntEnum):
    Normal       = 0
    Grab         = 1
    Ungrab       = 2
    WhileGrabbed = 3

* Wed 27 May 2015 10:16:25 AM JST
NotifyDetail              
* Wed 27 May 2015 10:16:46 AM JST
NotifyDetail              
* Wed 27 May 2015 10:16:55 AM JST
NotifyMode
* Wed 27 May 2015 10:17:43 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 10:18:28 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 10:18:40 AM JST

* Wed 27 May 2015 10:18:40 AM JST
get_display
* Wed 27 May 2015 10:18:40 AM JST
import get_display
* Wed 27 May 2015 10:18:41 AM JST
display import get_display
* Wed 27 May 2015 10:19:20 AM JST
uname
* Wed 27 May 2015 10:20:12 AM JST
self._root = self._display.get_setup().roots[0].root
* Wed 27 May 2015 10:20:46 AM JST

* Wed 27 May 2015 10:20:47 AM JST

* Wed 27 May 2015 10:20:47 AM JST
    __observers = None  # (list)

* Wed 27 May 2015 10:20:51 AM JST
self._root = self._display.get_setup().roots[0].root
* Wed 27 May 2015 10:21:03 AM JST
from _xahk.window_manager import WindowManager
* Wed 27 May 2015 10:21:11 AM JST
from _xahk.window_manager_observer import WindowManagerObserver

* Wed 27 May 2015 10:21:16 AM JST
from _xahk.eventloop import EventLoop
* Wed 27 May 2015 10:21:22 AM JST
KATOM_TO_CACHE_FOR_MOUSE_BIND_LISTENER = ['_NET_CLIENT_LIST', 'WINDOW']
* Wed 27 May 2015 10:21:43 AM JST
        for win in WindowManager.get_instance().list_windows():
            self._set_attr(win)

* Wed 27 May 2015 10:22:06 AM JST
_set_attr
* Wed 27 May 2015 10:22:13 AM JST
WindowManager.get_instance().add_observer(self)
* Wed 27 May 2015 10:22:19 AM JST
EventLoop.get_instance().add_event_dispatcher(self)
* Wed 27 May 2015 10:22:42 AM JST
        eventmask = self._display.core.GetWindowAttributes(
            482).reply().your_event_mask
        self._display.core.ChangeWindowAttributes(
            482, CW.EventMask, [EventMask.PropertyChange | eventmask])
        self._refresh()

* Wed 27 May 2015 10:23:00 AM JST
self)

        #### 
* Wed 27 May 2015 10:23:07 AM JST

* Wed 27 May 2015 10:23:07 AM JST

* Wed 27 May 2015 10:23:07 AM JST
        # TODO: (Atami) [2015/05/27]

* Wed 27 May 2015 10:23:07 AM JST
        # TODO: (Atami) [2015/05/27]

* Wed 27 May 2015 10:23:08 AM JST
        # TODO: (Atami) [2015/05/27]
        # TODO: (Atami) [2015/05/27]

* Wed 27 May 2015 10:24:01 AM JST
EventMask, EnterNotifyEvent, CW
* Wed 27 May 2015 10:24:07 AM JST
EnterNotifyEvent, 
* Wed 27 May 2015 10:24:20 AM JST
WindowManagerObserver
* Wed 27 May 2015 10:25:32 AM JST
_update_under_window
* Wed 27 May 2015 10:25:50 AM JST
  # (Window)
* Wed 27 May 2015 10:26:35 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 10:27:50 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 10:28:16 AM JST
child = self._display.core.QueryPointer(self._root).reply().child
* Wed 27 May 2015 10:28:23 AM JST
windows = self._display.core.QueryTree(child).reply().children
* Wed 27 May 2015 10:28:45 AM JST
self._display.core.QueryPointer(self._root).reply().child
* Wed 27 May 2015 10:29:00 AM JST

* Wed 27 May 2015 10:29:00 AM JST

* Wed 27 May 2015 10:29:01 AM JST
        child = 

* Wed 27 May 2015 10:29:56 AM JST
        mask = self._display.core.GetWindowAttributes(
            window).reply().your_event_mask
        self._display.core.ChangeWindowAttributes(
            window, CW.EventMask, [EventMask.EnterWindow | mask])
        self._display.flush()

* Wed 27 May 2015 10:32:48 AM JST
class CursorHandlerObserver:
    """Class CursorHandlerObserver
    """
    # Attributes:
    
    # Operations
    def on_changed_under_window(self, under_window):
        """function on_changed_under_window
        
        under_window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 27 May 2015 10:34:09 AM JST
class MouseBindManager(BindCandidateObserver, CursorHandlerObserver):
    """Class MouseBindManager
    """
    # Attributes:
    is_managing = None  # (bool) 
    __listener = None  # (MouseBindListener) 
    __candidates = None  # (list) 
    
    # Operations
    def start_management(self):
        """function start_management
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def stop_management(self):
        """function stop_management
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def update_binding(self):
        """function update_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def entry_candidate(self, candidate):
        """function entry_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def withdraw_candidate(self, candidate):
        """function withdraw_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def has_candidate(self, candidate):
        """function has_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def counts_candidate(self):
        """function counts_candidate
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def elect_candidates(self, window):
        """function elect_candidates
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_chaged_bind_registry(self):
        """function on_chaged_bind_registry
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_changed_under_window(self, under_window):
        """function on_changed_under_window
        
        under_window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 27 May 2015 10:34:23 AM JST
BindCandidateObserver
* Wed 27 May 2015 10:37:08 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 10:37:48 AM JST
sle.
* Wed 27 May 2015 10:37:58 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 10:38:30 AM JST
    def entry_candidate(self, candidate):
        """function entry_candidate

        candidate:

        returns
        """
        self._candidates.append(candidate)
        candidate.add_observer(self) # on_chaged_bind_registry
        if self.is_managing:
            self.update_binding()

* Wed 27 May 2015 10:38:40 AM JST
    def withdraw_candidate(self, candidate):
        """function withdraw_candidate

        candidate:

        returns
        """
        self._candidates.remove(candidate)
        candidate.remove_observer(self) # on_chaged_bind_registry
        if self.is_managing:
            self.update_binding()

* Wed 27 May 2015 10:38:46 AM JST
    def has_candidate(self, candidate):
        """function has_candidate

        candidate:

        returns
        """
        return candidate in self._candidates

* Wed 27 May 2015 10:38:54 AM JST
    def counts_candidate(self):
        """function counts_candidate

        returns int
        """
        return len(self._candidates)

* Wed 27 May 2015 10:39:01 AM JST
    def elect_candidates(self, window):
        """function elect_candidates

        window:

        returns
        """
        result, append = ListDotAvoider().append
        for candidate in self._candidates:
            if candidate.is_satisfied(window):
                append(candidate)
        return result

* Wed 27 May 2015 10:39:07 AM JST
from dotavoider import ListDotAvoider
* Wed 27 May 2015 10:39:24 AM JST
    def on_chaged_bind_registry(self):
        """function on_chaged_bind_registry

        returns
        """
        if self.is_managing:
            self.update_binding()

* Wed 27 May 2015 10:40:22 AM JST
        if self.is_managing:
            self.update_binding()

* Wed 27 May 2015 10:42:26 AM JST
_bind_to_
* Wed 27 May 2015 10:42:26 AM JST
self._bind_to_
* Wed 27 May 2015 10:43:35 AM JST
_root
* Wed 27 May 2015 10:43:54 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 10:46:29 AM JST
Inferior
* Wed 27 May 2015 10:48:46 AM JST
from EventDispatcher import EventDispatcher
from Observable import Observable

class MouseBindListener(Observable, EventDispatcher):
    """Class MouseBindListener
    """
    # Attributes:
    root = None  # () 
    is_listening = None  # (bool) 
    __display = None  # () 
    __binding = None  # (<(Window, code, modifier), cmd>) 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def bind(self, window, code, modifiers, cmd):
        """function bind
        
        window: 
        code: 
        modifiers: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unbind(self, window, code, modifiers):
        """function unbind
        
        window: 
        code: 
        modifiers: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear_binding(self):
        """function clear_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_binding(self):
        """function list_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_cmds(self):
        """function list_cmds
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iteritems(self):
        """function iteritems
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def items(self):
        """function items
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_listening(self):
        """function start_listening
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def stop_listening(self):
        """function stop_listening
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def flush(self):
        """function flush
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_root_window(self):
        """function get_root_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __grab(self, window, code, modifiers):
        """function grab
        
        window: 
        code: 
        modifiers: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ungrab(self, window, code, modifiers):
        """function ungrab
        
        window: 
        code: 
        modifiers: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 27 May 2015 10:49:05 AM JST
Observabl
* Wed 27 May 2015 10:49:40 AM JST
Display
* Wed 27 May 2015 10:50:19 AM JST
defnit
* Wed 27 May 2015 10:50:21 AM JST
cls
* Wed 27 May 2015 10:50:27 AM JST
None
* Wed 27 May 2015 10:50:32 AM JST
None
* Wed 27 May 2015 10:50:45 AM JST
get_
* Wed 27 May 2015 10:50:51 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 10:52:01 AM JST

* Wed 27 May 2015 10:52:01 AM JST

* Wed 27 May 2015 10:52:01 AM JST
    root = None  # ()

* Wed 27 May 2015 10:52:04 AM JST

* Wed 27 May 2015 10:52:04 AM JST

* Wed 27 May 2015 10:52:04 AM JST
    __display = None  # ()

* Wed 27 May 2015 10:52:23 AM JST
None  # (<(Window, code, modifier), cmd>)
* Wed 27 May 2015 10:52:58 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 10:53:06 AM JST
KeyPressE
* Wed 27 May 2015 10:53:58 AM JST
            # TODO: (Atami) [2015/05/27]
            # call missing cmd
            print('DEBUG-1-keybind_listener.py')
            return

* Wed 27 May 2015 10:54:01 AM JST

* Wed 27 May 2015 10:54:01 AM JST

* Wed 27 May 2015 10:54:01 AM JST
            print('DEBUG-1-keybind_listener.py')

* Wed 27 May 2015 10:54:05 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 10:54:15 AM JST
from _xahk.event import KeyEvent
* Wed 27 May 2015 10:54:17 AM JST
KeyEvent
* Wed 27 May 2015 10:54:36 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 10:56:39 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 10:56:46 AM JST
modidfier
* Wed 27 May 2015 10:58:05 AM JST

* Wed 27 May 2015 10:58:05 AM JST

* Wed 27 May 2015 10:58:05 AM JST
        - `cmd`:

* Wed 27 May 2015 10:58:22 AM JST
modidfiers
* Wed 27 May 2015 10:59:26 AM JST
return self._binding.keys()
* Wed 27 May 2015 10:59:34 AM JST
return 
* Wed 27 May 2015 10:59:38 AM JST
return self._binding.values()
* Wed 27 May 2015 10:59:44 AM JST
return self._binding.iteritems()
* Wed 27 May 2015 10:59:49 AM JST
return self._binding.items()
* Wed 27 May 2015 11:00:02 AM JST
    def clear_binding(self):
        """function clear_binding

        returns
        """
        for window, code, modifiers in self.list_binding():
            self.unbind(window, code, modifiers)

* Wed 27 May 2015 11:00:12 AM JST

* Wed 27 May 2015 11:00:12 AM JST

* Wed 27 May 2015 11:00:12 AM JST
        return None # should raise NotImplementedError()

* Wed 27 May 2015 11:00:36 AM JST
None # should raise NotImplementedError()
* Wed 27 May 2015 11:00:49 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 11:03:41 AM JST
        self._display.core.GrabButton(
            False, window, EventMask.ButtonPress, GrabMode.Async, GrabMode.Async,
            0, 0, code, modifiers)

* Wed 27 May 2015 11:03:53 AM JST
            
* Wed 27 May 2015 11:03:56 AM JST
            
* Wed 27 May 2015 11:04:03 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 11:04:15 AM JST
GrabButton?
* Wed 27 May 2015 11:04:31 AM JST
        return None # should raise NotImplementedError()

* Wed 27 May 2015 11:04:35 AM JST
_dispaly
* Wed 27 May 2015 11:04:56 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 11:05:48 AM JST
return None # should raise NotImplementedError()
* Wed 27 May 2015 11:05:50 AM JST
self.
* Wed 27 May 2015 11:06:15 AM JST
    def __del__(self):
        """
        INTERNAL COMMENT
        Do not imprement `raise'!!
        """
        self.stop_listening()

* Wed 27 May 2015 11:06:33 AM JST
self.start_listening()
* Wed 27 May 2015 11:08:02 AM JST

class MouseBindListenerObserver:
    """Class MouseBindListenerObserver
    """
    # Attributes:
    
    # Operations
    def on_binded_button(self, target, cmd):
        """function on_binded_button
        
        target: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_unbinded_button(self, target):
        """function on_unbinded_button
        
        target: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 27 May 2015 11:08:19 AM JST
MouseBindLi
* Wed 27 May 2015 11:08:48 AM JST
    def on_binded_key(self, target, cmd):
        r"""SUMMARY

        on_binded_key(target, cmd)

        @Arguments:
        - `target`:
        - `cmd`:

        @Return:

        @Error:
        """
        print('Bind TO\n'
              'window: ({0.wmclass}, {0.id}), code: {1}, modifiers: {2} to {3}'
              .format(target[0], target[1], target[2], cmd))

    def on_unbinded_key(self, target):
        r"""SUMMARY

        on_unbinded_key(target)

        @Arguments:
        - `target`:

        @Return:

        @Error:
        """
        print('Unbind TO\nwindow: {}, code: {}, modifiers: {}'
              .format(target[0], target[1], target[2]))
* Wed 27 May 2015 11:10:44 AM JST
form 
* Wed 27 May 2015 11:11:41 AM JST
DebugMouseBindListener
* Wed 27 May 2015 11:11:48 AM JST
DebugMouseBindListenerObserver
* Wed 27 May 2015 11:12:24 AM JST
MIDDLE_BUTTON_ACCE = Accelerator(ButtonIndex.Middle, )
* Wed 27 May 2015 11:12:33 AM JST
from _xahk.input_bind_listener import ButtonIndex
* Wed 27 May 2015 11:12:50 AM JST
class ButtonIndex(_IntEnum):
    r"""ButtonIndex

    ButtonIndex is a _IntEnum.
    Responsibility:
    """
    Left = 1
    Middle = 2
    Right = 3
    WheelUp = 4
    WheelDown = 5

* Wed 27 May 2015 11:13:42 AM JST
chrome_mouse_candidate = BindCandidate(WindowWMClassSpec('Google-chrome'))
* Wed 27 May 2015 11:13:54 AM JST
chrome_mouse_candidate.register_bind(
    MIDDLE_BUTTON_ACCE, KeyCommandForMouse(W_CTRL_KEY_ACCE))

* Wed 27 May 2015 11:14:13 AM JST
class KeyCommandForMouse(InputCommand):
    r"""KeyCommand

    KeyCommand is a ImputCommand.
    Responsibility:
    """
    __slots__ = ('key', )

    def __init__(self, accelerator):
        r"""

        @Arguments:
        - `accelerator`:
        """
        super(KeyCommandForMouse, self).__init__()
        self.key = X11Key(accelerator.get_code(), accelerator.get_modifiers())

    def on_down(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        self.key.press(event.window.get_id())
        self.key.release(event.window.get_id())
        self.key.display.flush()

    def on_up(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        print('DEBUG-1-xahk_handle1.py')

* Wed 27 May 2015 11:14:34 AM JST
# mouse bind
mouse_bind_manager = BindManager.create_mousebind()
mouse_bind_manager.add_candidate(chrome_mouse_candidate)
mouse_bind_manager.start_management()

* Wed 27 May 2015 11:16:26 AM JST
# debug
MouseBindListener.get_instance().add_observer(DebugMouseBindListenerObserver())

* Wed 27 May 2015 11:20:17 AM JST
self.
* Wed 27 May 2015 11:26:58 AM JST

* Wed 27 May 2015 11:26:58 AM JST

* Wed 27 May 2015 11:26:59 AM JST

* Wed 27 May 2015 11:26:59 AM JST

* Wed 27 May 2015 11:26:59 AM JST
        print(result)

* Wed 27 May 2015 11:29:07 AM JST
(event.event, event.detail, event.state)
* Wed 27 May 2015 11:31:09 AM JST

* Wed 27 May 2015 11:31:09 AM JST

* Wed 27 May 2015 11:31:09 AM JST
        print('DEBUG-2-mousebind_listener.py')

* Wed 27 May 2015 11:31:41 AM JST

* Wed 27 May 2015 11:31:41 AM JST

* Wed 27 May 2015 11:31:41 AM JST
            print(candidate)

* Wed 27 May 2015 11:32:01 AM JST
event.detai
* Wed 27 May 2015 11:32:03 AM JST
event.detail
* Wed 27 May 2015 11:32:28 AM JST
NotifyDetail
* Wed 27 May 2015 11:33:35 AM JST
class NotifyDetail(_IntEnum):
    Ancestor         = 0
    Virtual          = 1
    Inferior         = 2
    Nonlinear        = 3
    NonlinearVirtual = 4
    Pointer          = 5
    PointerRoot      = 6
    _None            = 7

* Wed 27 May 2015 11:34:07 AM JST
_MouseBindListener
* Wed 27 May 2015 11:34:07 AM JST
as _MouseBindListener
* Wed 27 May 2015 11:34:07 AM JST
MouseBindListener as _MouseBindListener
* Wed 27 May 2015 11:34:15 AM JST
NotifyDetail, 
* Wed 27 May 2015 11:34:37 AM JST
event.detail
* Wed 27 May 2015 11:34:59 AM JST

* Wed 27 May 2015 11:34:59 AM JST

* Wed 27 May 2015 11:34:59 AM JST
        print('under window {}'.format(under_window.wmclass))

* Wed 27 May 2015 11:35:14 AM JST

* Wed 27 May 2015 11:35:14 AM JST

* Wed 27 May 2015 11:35:14 AM JST
            print('DEBUG-1-mousebind_manager.py')

* Wed 27 May 2015 11:35:21 AM JST

* Wed 27 May 2015 11:35:21 AM JST

* Wed 27 May 2015 11:35:21 AM JST
        print(NotifyDetail(event.detail))

* Wed 27 May 2015 11:35:22 AM JST

* Wed 27 May 2015 11:35:22 AM JST

* Wed 27 May 2015 11:35:22 AM JST
        print(NotifyDetail(event.detail))

* Wed 27 May 2015 11:37:02 AM JST

* Wed 27 May 2015 11:37:02 AM JST

* Wed 27 May 2015 11:37:02 AM JST
        print(NotifyDetail(event.detail))

* Wed 27 May 2015 11:38:51 AM JST

* Wed 27 May 2015 11:38:51 AM JST

* Wed 27 May 2015 11:38:51 AM JST
        print(window)

* Wed 27 May 2015 11:39:31 AM JST
self._listener.flush()
* Wed 27 May 2015 11:40:09 AM JST
print(self._binding)
* Wed 27 May 2015 11:41:17 AM JST

* Wed 27 May 2015 11:41:17 AM JST

* Wed 27 May 2015 11:41:17 AM JST
        print(self._binding)

* Wed 27 May 2015 11:46:23 AM JST
class ButtonIndex(_IntEnum):
    r"""ButtonIndex

    ButtonIndex is a _IntEnum.
    Responsibility:
    """
    Left = 1
    Middle = 2
    Right = 3
    WheelUp = 4
    WheelDown = 5

* Wed 27 May 2015 11:47:03 AM JST
{ButtonIndex.Left: Modifier.Left,
                         ButtonIndex.Middle: Modifier.Middle,
                         ButtonIndex.Right: Modifier.Right,
                         ButtonIndex.WheelUp: Modifier.WheelUp,
                         ButtonIndex.WheelDown: Modifier.WheelDown,
                         }
* Wed 27 May 2015 11:47:24 AM JST
from _xahk.piece.modifier import Modifier
* Wed 27 May 2015 11:47:38 AM JST

* Wed 27 May 2015 11:47:38 AM JST

* Wed 27 May 2015 11:47:38 AM JST
        print(self._binding)

* Wed 27 May 2015 11:47:41 AM JST

* Wed 27 May 2015 11:47:41 AM JST

* Wed 27 May 2015 11:47:41 AM JST
        print(self._binding)

* Wed 27 May 2015 11:49:33 AM JST
        for mods in (modifiers, modifiers | self._release_modifier.get(code, 0)):

* Wed 27 May 2015 11:54:18 AM JST
(window, code, mods)
* Wed 27 May 2015 11:56:33 AM JST
(event.event, event.detail, event.state)
* Wed 27 May 2015 11:57:37 AM JST

* Wed 27 May 2015 11:57:37 AM JST

* Wed 27 May 2015 11:57:37 AM JST
        print((event.event, event.detail, event.state))

* Wed 27 May 2015 11:57:37 AM JST
        print((event.event, event.detail, event.state))

* Wed 27 May 2015 11:57:37 AM JST
        print((event.event, event.detail, event.state))
        print(self._binding)

* Wed 27 May 2015 11:58:32 AM JST

* Wed 27 May 2015 11:58:32 AM JST

* Wed 27 May 2015 11:58:32 AM JST
        print(cmd)

* Wed 27 May 2015 12:01:34 PM JST
Key
* Wed 27 May 2015 12:06:19 PM JST

* Wed 27 May 2015 12:06:19 PM JST

* Wed 27 May 2015 12:06:20 PM JST
        print('DEBUG-2-xahk_handle3.py')

* Wed 27 May 2015 12:06:43 PM JST
_
* Wed 27 May 2015 12:06:43 PM JST
form _
* Wed 27 May 2015 12:07:14 PM JST
event.
* Wed 27 May 2015 12:07:15 PM JST
event.
* Wed 27 May 2015 12:10:31 PM JST
button
* Wed 27 May 2015 12:10:57 PM JST

* Wed 27 May 2015 12:10:57 PM JST

* Wed 27 May 2015 12:10:57 PM JST
        print('DEBUG-1-mousebind_listener.py')

* Wed 27 May 2015 12:17:23 PM JST
global_key_candidate = BindCandidate(ExcludeWindowSpec())
* Wed 27 May 2015 12:18:02 PM JST
global_key_candidate = BindCandidate(ExcludeWindowSpec())
* Wed 27 May 2015 12:18:26 PM JST
ExcludeWindowSpec
* Wed 27 May 2015 12:20:51 PM JST
Window
* Wed 27 May 2015 12:21:33 PM JST
window = CursorHandler.get_instance().get_under_window()
* Wed 27 May 2015 12:22:17 PM JST
ToggleAlwaysTop
* Wed 27 May 2015 12:26:24 PM JST
Modifier
* Wed 27 May 2015 12:27:05 PM JST
                        
* Wed 27 May 2015 12:29:49 PM JST
except XAHKStopRunning:
    print('Stopping Running')

* Wed 27 May 2015 12:30:22 PM JST

* Wed 27 May 2015 12:30:23 PM JST

* Wed 27 May 2015 12:30:29 PM JST
L_CTRL_KEY_ACCE, KeyCommand(RIGHT_ACCE))
* Wed 27 May 2015 12:31:54 PM JST
global_key_candi
* Wed 27 May 2015 12:32:03 PM JST
global
* Wed 27 May 2015 12:32:58 PM JST
Any
* Wed 27 May 2015 12:33:06 PM JST

* Wed 27 May 2015 12:33:06 PM JST

* Wed 27 May 2015 12:33:06 PM JST
exclue_emacs_key_candidate.register_bind(ESC_SHIFT_KEY_ACCE, QuitCommand())

* Wed 27 May 2015 12:33:10 PM JST
exclue_emacs_key_candidate
* Wed 27 May 2015 12:33:13 PM JST
global_key_candidate
* Wed 27 May 2015 12:33:29 PM JST
KEY_BIND_MANAGER
* Wed 27 May 2015 12:41:53 PM JST
Toggle
* Wed 27 May 2015 12:43:07 PM JST
self.
* Wed 27 May 2015 12:43:07 PM JST
not self.
* Wed 27 May 2015 12:44:48 PM JST
CursorHandlerObserver
* Wed 27 May 2015 12:45:32 PM JST
print
* Wed 27 May 2015 12:46:32 PM JST
Under
* Wed 27 May 2015 12:49:19 PM JST
DebugKeyBindListenerObserver
* Wed 27 May 2015 12:49:28 PM JST
KeyBindListenerObserver
* Wed 27 May 2015 12:51:06 PM JST
cla.
* Wed 27 May 2015 12:52:12 PM JST
target
* Wed 27 May 2015 12:54:59 PM JST
({}-{}, {}, {}) to {}
* Wed 27 May 2015 12:55:06 PM JST
target[0].id, target[0].wmclass[0], target[1], target[2], cmd)
* Wed 27 May 2015 12:55:24 PM JST
cmd
* Wed 27 May 2015 12:59:23 PM JST
DebugMouseBindListenerObserver
* Wed 27 May 2015 12:59:30 PM JST
MouseBindListenerObserver
* Wed 27 May 2015 01:00:12 PM JST
        print('KeyBind ({}-{}, {}, {}) to {}'.format(
            target[0].id, target[0].wmclass[0], target[1], target[2], cmd))

* Wed 27 May 2015 01:00:19 PM JST
Key
* Wed 27 May 2015 01:00:46 PM JST
    def on_unbinded_button(self, target):
        r"""SUMMARY

        on_unbinded_key(target)

        @Arguments:
        - `target`:

        @Return:

        @Error:
        """
        print('Mouse Unbind TO\nwindow: {}, code: {}, modifiers: {}'
              .format(target[0], target[1], target[2]))

* Wed 27 May 2015 01:01:04 PM JST
({}, {}, {})
* Wed 27 May 2015 01:01:08 PM JST
              
* Wed 27 May 2015 01:01:56 PM JST

* Wed 27 May 2015 01:01:56 PM JST

* Wed 27 May 2015 01:01:56 PM JST
MouseBindListener.get_instance().add_observer(DebugMouseBindListenerObserver())

* Wed 27 May 2015 01:03:53 PM JST
F1_SSHIFT
* Wed 27 May 2015 01:04:17 PM JST

* Wed 27 May 2015 01:04:20 PM JST
ESC
* Wed 27 May 2015 01:04:25 PM JST
QuitCommand
* Wed 27 May 2015 01:10:38 PM JST
Mouse
* Wed 27 May 2015 01:10:41 PM JST
Unbind
* Wed 27 May 2015 01:10:44 PM JST
Key
* Wed 27 May 2015 01:10:48 PM JST
Mouse
* Wed 27 May 2015 01:13:07 PM JST
{0}-{1:10}, {2:3}, {3}
* Wed 27 May 2015 01:17:34 PM JST
{1:17}
* Wed 27 May 2015 01:17:40 PM JST
{1:17}
* Wed 27 May 2015 01:19:23 PM JST
target[0].wmclass[0]
* Wed 27 May 2015 01:20:19 PM JST
{2:3}
* Wed 27 May 2015 01:22:19 PM JST

* Wed 27 May 2015 01:22:19 PM JST

* Wed 27 May 2015 01:22:19 PM JST
            print((event.event, event.detail, event.state))

* Wed 27 May 2015 01:24:24 PM JST

* Wed 27 May 2015 01:24:24 PM JST

* Wed 27 May 2015 01:24:24 PM JST
        print('under window {}'.format(under_window.wmclass))

* Wed 27 May 2015 01:25:52 PM JST
CursorHandler.get_instance()
* Wed 27 May 2015 01:26:08 PM JST
CursorHandler.get_instance().get_under_window()
* Wed 27 May 2015 01:26:59 PM JST
under
* Wed 27 May 2015 01:27:23 PM JST
self._under_window = (under_window.id, under_window.wmclass[0])
* Wed 27 May 2015 01:27:27 PM JST
under_
* Wed 27 May 2015 01:27:29 PM JST
under_
* Wed 27 May 2015 01:27:39 PM JST
(under_window.id, under_window.wmclass[0])
* Wed 27 May 2015 01:28:16 PM JST

* Wed 27 May 2015 01:28:16 PM JST

* Wed 27 May 2015 01:28:16 PM JST
        self._under_window = (under_window.id, under_window.wmclass[0])

* Wed 27 May 2015 01:28:31 PM JST
Cursor 
* Wed 27 May 2015 01:28:32 PM JST
Changed Cursor 
* Wed 27 May 2015 01:29:06 PM JST
        print('Under the Window Changed ({}) to ({})'
              .format(under_window.id, under_window.wmclass[0]))

* Wed 27 May 2015 01:29:37 PM JST
under
* Wed 27 May 2015 01:30:30 PM JST

* Wed 27 May 2015 01:30:31 PM JST

* Wed 27 May 2015 01:30:31 PM JST
        self._set_under_window(under_window)

* Wed 27 May 2015 01:31:22 PM JST
Changed
* Wed 27 May 2015 01:37:20 PM JST


* Wed 27 May 2015 01:38:28 PM JST

* Wed 27 May 2015 01:38:31 PM JST
SHIFT_LEFT
* Wed 27 May 2015 01:39:45 PM JST
KeyCommandForMouse
* Wed 27 May 2015 01:44:03 PM JST
RIGHT_
* Wed 27 May 2015 01:46:23 PM JST
chrome_mouse_candidate.register_bind(
    MIDDLE_BUTTON_ACCE, KeyCommandForMouse(W_CTRL_KEY_ACCE))

* Wed 27 May 2015 01:46:27 PM JST
MIDDLE_BUTTON_ACCE
* Wed 27 May 2015 01:46:35 PM JST
W_CTRL_KEY_ACCE
* Wed 27 May 2015 01:46:47 PM JST

* Wed 27 May 2015 01:47:57 PM JST

* Wed 27 May 2015 01:48:04 PM JST
Shift | 
* Wed 27 May 2015 01:48:04 PM JST
Modifier.Shift | 
* Wed 27 May 2015 01:48:19 PM JST
chrome_mouse_candidate.register_bind(
    WHEELUP_RIGHT_BUTTON_ACCE, KeyCommandForMouse(TAB_CTRL_SHIFT_ACCE))

* Wed 27 May 2015 01:51:41 PM JST
xproto.NamedKeyButMask.WheelUp
* Wed 27 May 2015 01:51:59 PM JST
Modifier.
* Wed 27 May 2015 01:52:19 PM JST
Modifier.WheelUp
* Wed 27 May 2015 01:56:36 PM JST

* Wed 27 May 2015 01:56:36 PM JST

* Wed 27 May 2015 01:56:36 PM JST
        pass

* Wed 27 May 2015 01:56:50 PM JST

* Wed 27 May 2015 01:56:50 PM JST

* Wed 27 May 2015 01:56:50 PM JST
        print('DEBUG-2-xahk_handle3.py')

* Wed 27 May 2015 01:56:52 PM JST

* Wed 27 May 2015 01:56:53 PM JST

* Wed 27 May 2015 01:56:53 PM JST
        print('DEBUG-3-xahk_handle3.py')

* Wed 27 May 2015 01:59:42 PM JST
core.
* Wed 27 May 2015 01:59:42 PM JST
c.core.
* Wed 27 May 2015 02:02:12 PM JST
c.core.GrabButton(False, 482, xcb.xproto.EventMask.ButtonPress, 1,1,0,0,4, )
* Wed 27 May 2015 02:02:26 PM JST
import xcb,xcb.xproto;c=xcb.connect()
c.core.GrabButton?
c.core.GrabButton(False, 482, xcb.xproto.EventMask.ButtonPress, 1,1,0,0,4, 1)
c.flush()

* Wed 27 May 2015 02:05:49 PM JST
    
* Wed 27 May 2015 02:05:51 PM JST
    
* Wed 27 May 2015 02:30:34 PM JST
QueryTree
* Wed 27 May 2015 02:32:20 PM JST
self.
* Wed 27 May 2015 02:36:01 PM JST

* Wed 27 May 2015 02:36:02 PM JST

* Wed 27 May 2015 02:36:02 PM JST
        sleep(1)

* Wed 27 May 2015 02:37:52 PM JST

* Wed 27 May 2015 02:37:52 PM JST

* Wed 27 May 2015 02:37:52 PM JST
        print('DEBUG-1-window_manager.py')

* Wed 27 May 2015 02:38:16 PM JST
EventMask.PropertyChange
* Wed 27 May 2015 02:39:28 PM JST
482
* Wed 27 May 2015 02:39:32 PM JST
482
* Wed 27 May 2015 02:39:40 PM JST
ChangeWindowAttributes
* Wed 27 May 2015 02:45:07 PM JST
        self._display.core.ChangeWindowAttributes(
            self._root, CW.EventMask, [EventMask.PropertyChange | eventmask])

* Wed 27 May 2015 02:45:13 PM JST
self._
* Wed 27 May 2015 02:45:17 PM JST
_root
* Wed 27 May 2015 02:45:18 PM JST
self._root
* Wed 27 May 2015 02:46:00 PM JST
eventmask
* Wed 27 May 2015 02:54:27 PM JST

* Wed 27 May 2015 02:54:27 PM JST

* Wed 27 May 2015 02:54:28 PM JST
        print('DEBUG-2-xahk_handle3.py')

* Wed 27 May 2015 02:54:29 PM JST

* Wed 27 May 2015 02:54:29 PM JST

* Wed 27 May 2015 02:54:29 PM JST
        print('DEBUG-2-xahk_handle3.py')

* Wed 27 May 2015 02:56:59 PM JST

* Wed 27 May 2015 02:56:59 PM JST

* Wed 27 May 2015 02:56:59 PM JST
        print(self.key._code)

* Wed 27 May 2015 02:57:09 PM JST
Key
* Wed 27 May 2015 02:57:12 PM JST
Key
* Wed 27 May 2015 04:13:18 PM JST
        CursorHandler.get_instance().add_observer(self)
        KeyBindListener.get_instance().add_observer(self)
        MouseBindListener.get_instance().add_observer(self)

* Wed 27 May 2015 04:39:33 PM JST
EventMask.ButtonRelease
* Wed 27 May 2015 04:40:55 PM JST
pass
* Wed 27 May 2015 04:41:30 PM JST
print('DEBUG-2-xahk_handle3.py')
* Wed 27 May 2015 04:59:08 PM JST
grab
* Wed 27 May 2015 05:01:42 PM JST
Modifier
* Wed 27 May 2015 05:01:43 PM JST
from _xahk.piece.modifier import Modifier
* Wed 27 May 2015 05:02:21 PM JST
xproto.
* Wed 27 May 2015 05:02:22 PM JST
xcb.
* Wed 27 May 2015 05:02:28 PM JST

* Wed 27 May 2015 05:02:28 PM JST

* Wed 27 May 2015 05:02:28 PM JST
c.core.GrabButton?             

* Wed 27 May 2015 05:02:34 PM JST
EventMask.ButtonPress
* Wed 27 May 2015 05:02:36 PM JST
ButtonPress
* Wed 27 May 2015 05:03:21 PM JST

* Wed 27 May 2015 05:03:21 PM JST

* Wed 27 May 2015 05:03:21 PM JST
from _xahk.piece.modifier import Modifier
* Wed 27 May 2015 05:04:24 PM JST
from _xahk.piece.modifier import Modifier
from xcb.xproto import EventMask
c.core.GrabButton(False, 482, EventMask.ButtonPress | EventMask.ButtonRelease,
                         1,1,0,0,4, Modifier.Right)

* Wed 27 May 2015 05:04:27 PM JST
c.flush()                      
* Wed 27 May 2015 05:04:45 PM JST
c.core.GrabButton(False, 482, EventMask.ButtonPress | EventMask.ButtonRelease,
                         1,1,0,0,4, Modifier.Right)

* Wed 27 May 2015 05:04:49 PM JST
Right
* Wed 27 May 2015 05:04:49 PM JST
Modifier.Right
* Wed 27 May 2015 05:04:53 PM JST
c.core.GrabButton(False, 482, EventMask.ButtonPress | EventMask.ButtonRelease,
                         1,1,0,0,4, 0)

* Wed 27 May 2015 05:04:59 PM JST
c.core.GrabButton(False, 482, EventMask.ButtonPress | EventMask.ButtonRelease,
                         1,1,0,0,4, 0)

c.flush()
* Wed 27 May 2015 05:08:02 PM JST
c.core.GrabButton(False, 482, EventMask.ButtonPress | EventMask.ButtonRelease,
                         1,1,0,0,4, Modifier.Right)

* Wed 27 May 2015 05:08:18 PM JST
c.core.GrabButton(False, 482, EventMask.ButtonPress | EventMask.ButtonRelease,
                         1,1,0,0,4, Modifier.Right | Modifier.WheelUp)

* Wed 27 May 2015 05:08:34 PM JST
c.flush() 

* Wed 27 May 2015 05:09:36 PM JST
while 1:
        print c.wait_for_event()

* Wed 27 May 2015 05:09:45 PM JST
c.core.GrabButton(False, 482, EventMask.ButtonPress | EventMask.ButtonRelease,
                         1,1,0,0,4, Modifier.Right)

* Wed 27 May 2015 05:09:48 PM JST
Right
* Wed 27 May 2015 05:09:48 PM JST
Modifier.Right
* Wed 27 May 2015 05:09:51 PM JST
c.core.GrabButton(False, 482, EventMask.ButtonPress | EventMask.ButtonRelease,
                         1,1,0,0,4, 0)

* Wed 27 May 2015 05:09:56 PM JST
c.flush() 

* Wed 27 May 2015 05:10:16 PM JST
while 1:
    print c.wait_for_event()

* Wed 27 May 2015 05:13:47 PM JST
c.core.GrabButton(False, 482, EventMask.ButtonPress | EventMask.ButtonRelease,
                         1,1,0,0,4, 0)

* Wed 27 May 2015 05:30:40 PM JST

* Wed 27 May 2015 05:30:40 PM JST

* Wed 27 May 2015 05:30:41 PM JST
        self.key.release(window.get_id())

* Wed 27 May 2015 05:30:47 PM JST
window = CursorHandler.get_instance().get_under_window()
* Wed 27 May 2015 05:30:55 PM JST
get_id()
* Wed 27 May 2015 05:31:01 PM JST
self.key.display.flush()
* Wed 27 May 2015 05:33:19 PM JST
self.key.display.flush()
* Wed 27 May 2015 05:34:05 PM JST
class KeyCommand(InputCommand):
    r"""KeyCommand

    KeyCommand is a ImputCommand.
    Responsibility:
    """
    __slots__ = ('key', )

    def __init__(self, accelerator):
        r"""

        @Arguments:
        - `accelerator`:
        """
        super(KeyCommand, self).__init__()
        self.key = X11Key(accelerator.get_code(), accelerator.get_modifiers())

    def on_down(self, event):
        r"""SUMMARY

        on_down(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        self.key.press(event.window.get_id())
        self.key.display.flush()

    def on_up(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        self.key.release(event.window.get_id())
        self.key.display.flush()

    def __str__(self):
        return ('{0}({1.code}, {1.modifiers})'
                .format(super(KeyCommand, self).__str__(), self.key))

* Wed 27 May 2015 05:34:12 PM JST
Key
* Wed 27 May 2015 05:34:23 PM JST
Key
* Wed 27 May 2015 05:34:26 PM JST
key
* Wed 27 May 2015 05:34:47 PM JST
key
* Wed 27 May 2015 05:34:49 PM JST
key
* Wed 27 May 2015 05:34:54 PM JST
key
* Wed 27 May 2015 05:34:56 PM JST
key
* Wed 27 May 2015 05:35:01 PM JST
Key
* Wed 27 May 2015 05:35:09 PM JST
key
* Wed 27 May 2015 05:36:25 PM JST
event.
* Wed 27 May 2015 05:37:41 PM JST
    @property
    def x(self, ):
        r"""SUMMARY

        x()

        @Return:

        @Error:
        """
        return self._event.event_x

    @property
    def y(self, ):
        r"""SUMMARY

        y()

        @Return:

        @Error:
        """
        return self._event.event_y

* Wed 27 May 2015 05:38:03 PM JST
event.x, event.y
* Wed 27 May 2015 05:42:22 PM JST
returnslef.
* Wed 27 May 2015 05:42:40 PM JST
    @property
    def root(self, ):
        r"""SUMMARY

        root()

        @Return:

        @Error:
        """
        return self._event.root

* Wed 27 May 2015 05:44:17 PM JST
x
* Wed 27 May 2015 05:44:17 PM JST
event.x
* Wed 27 May 2015 05:44:19 PM JST
y
* Wed 27 May 2015 05:44:20 PM JST
event.y
* Wed 27 May 2015 05:44:25 PM JST
        rep = self.button.display.core.TranslateCoordinates(
            event.window, event.root, event.x, event.y).reply()
        newx = -(rep.dst_x - (2 * event.x))
        newy = -(rep.dst_y - (2 * event.y))

* Wed 27 May 2015 05:44:54 PM JST
InputCommand
* Wed 27 May 2015 05:45:51 PM JST
    _release_modifier = {ButtonIndex.Left: Modifier.Left,
                         ButtonIndex.Middle: Modifier.Middle,
                         ButtonIndex.Right: Modifier.Right,
                         ButtonIndex.WheelUp: Modifier.WheelUp,
                         ButtonIndex.WheelDown: Modifier.WheelDown,
                         }

* Wed 27 May 2015 05:46:32 PM JST
from _xahk.piece.modifier import Modifier
* Wed 27 May 2015 05:46:46 PM JST
class ButtonIndex(_IntEnum):
    r"""ButtonIndex

    ButtonIndex is a _IntEnum.
    Responsibility:
    """
    Left = 1
    Middle = 2
    Right = 3
    WheelUp = 4
    WheelDown = 5

* Wed 27 May 2015 05:48:45 PM JST
get_id()
* Wed 27 May 2015 05:48:49 PM JST
get_id()
* Wed 27 May 2015 05:48:54 PM JST
self.button.release(event.window, event.x, event.y)
* Wed 27 May 2015 05:49:04 PM JST
x
* Wed 27 May 2015 05:49:05 PM JST
event.x
* Wed 27 May 2015 05:49:07 PM JST
y
* Wed 27 May 2015 05:49:07 PM JST
event.y
* Wed 27 May 2015 05:49:50 PM JST

* Wed 27 May 2015 05:49:51 PM JST

* Wed 27 May 2015 05:49:51 PM JST
        print('DEBUG-3-xahk_handle3.py')

* Wed 27 May 2015 05:49:53 PM JST
        self.button.release(event.window, newx, newy)

* Wed 27 May 2015 05:50:37 PM JST
        print('DEBUG-2-xahk_handle3.py')
        rep = self.button.display.core.TranslateCoordinates(
            event.window, event.root, event.x, event.y).reply()
        newx = -(rep.dst_x - (2 * event.x))
        newy = -(rep.dst_y - (2 * event.y))
        self.button.press(event.window, newx, newy)
        self.button.release(event.window, newx, newy)
        self.button.display.flush()

* Wed 27 May 2015 05:51:33 PM JST
event
* Wed 27 May 2015 05:59:29 PM JST
from _xahk.piece.x11_piece import X11Key, X11Button
* Wed 27 May 2015 06:02:24 PM JST
press
* Wed 27 May 2015 06:02:51 PM JST
73400324
* Wed 27 May 2015 06:03:23 PM JST
window = CursorHandler.get_instance().get_under_window()
* Wed 27 May 2015 06:03:47 PM JST
event.
* Wed 27 May 2015 06:03:49 PM JST
event.
* Wed 27 May 2015 06:04:29 PM JST
event
* Wed 27 May 2015 06:04:30 PM JST
win_x, event
* Wed 27 May 2015 06:05:20 PM JST

* Wed 27 May 2015 06:05:20 PM JST

* Wed 27 May 2015 06:05:20 PM JST
        window = CursorHandler.get_instance().get_under_window()

* Wed 27 May 2015 06:05:36 PM JST
root
* Wed 27 May 2015 06:05:36 PM JST
event.root
* Wed 27 May 2015 06:06:41 PM JST
TranslateCoordinates
* Wed 27 May 2015 06:08:17 PM JST
event.
* Wed 27 May 2015 06:09:20 PM JST
window,
* Wed 27 May 2015 06:10:59 PM JST
75497473
* Wed 27 May 2015 06:11:18 PM JST
75497473
* Wed 27 May 2015 06:11:30 PM JST
press
* Wed 27 May 2015 06:13:28 PM JST

* Wed 27 May 2015 06:13:28 PM JST

* Wed 27 May 2015 06:13:29 PM JST
        print((event.x, event.y))

* Wed 27 May 2015 06:15:18 PM JST

* Wed 27 May 2015 06:15:18 PM JST

* Wed 27 May 2015 06:15:18 PM JST
        print('DEBUG-2-xahk_handle3.py')

* Wed 27 May 2015 06:24:35 PM JST
window
* Wed 27 May 2015 06:24:39 PM JST
window
* Wed 27 May 2015 06:25:45 PM JST
newx
* Wed 27 May 2015 06:25:49 PM JST
newy
* Wed 27 May 2015 06:25:52 PM JST
newx
* Wed 27 May 2015 06:25:54 PM JST
newy
* Wed 27 May 2015 06:27:09 PM JST
root
* Wed 27 May 2015 06:27:09 PM JST
self.root
* Wed 27 May 2015 06:27:16 PM JST
root
* Wed 27 May 2015 06:27:16 PM JST
self.root
* Wed 27 May 2015 06:27:19 PM JST
windwo
* Wed 27 May 2015 06:30:47 PM JST
        self.display.core.SendEvent(
            False, self.root, EventMask.ButtonPress, event)

* Wed 27 May 2015 06:30:53 PM JST
root
* Wed 27 May 2015 06:30:54 PM JST
self.root
* Wed 27 May 2015 06:31:02 PM JST
        self.display.core.SendEvent(
            False, self.root, EventMask.ButtonRelease, event)

* Wed 27 May 2015 06:31:07 PM JST
root
* Wed 27 May 2015 06:31:07 PM JST
self.root
* Wed 27 May 2015 06:32:27 PM JST
        window = CursorHandler.get_instance().get_under_window()
        rep = self.button.display.core.TranslateCoordinates(
            window, event.window, event.x, event.y).reply()
        newx = -(rep.dst_x - (2 * event.x))
        newy = -(rep.dst_y - (2 * event.y))
        print((window, newx, newy))
        self.button.press(window, newx, newy)
        self.button.release(window, newx, newy)
        self.button.display.flush()

* Wed 27 May 2015 06:32:48 PM JST

* Wed 27 May 2015 06:32:48 PM JST

* Wed 27 May 2015 06:32:48 PM JST
        print((window, newx, newy))

* Wed 27 May 2015 06:33:25 PM JST
        window = CursorHandler.get_instance().get_under_window()
        rep = self.button.display.core.TranslateCoordinates(
            window, event.window, event.x, event.y).reply()
        newx = -(rep.dst_x - (2 * event.x))
        newy = -(rep.dst_y - (2 * event.y))
        self.button.press(window, newx, newy)
        self.button.release(window, newx, newy)
        self.button.display.flush()

* Wed 27 May 2015 06:37:42 PM JST
KeyCommandForMouseChrome
* Wed 27 May 2015 06:55:34 PM JST
Accelerator(25, Modifier.Control)
* Wed 27 May 2015 06:56:50 PM JST
from _xahk.window_manager import WindowManager
* Wed 27 May 2015 06:57:27 PM JST
'All - Google Chrome'
* Wed 27 May 2015 06:58:08 PM JST
        if 'All - Google Chrome' == event.window.title:
            pass
        else:
            super(KeyCommandForMouseChromeMiddleButton, self).on_up(event)

* Wed 27 May 2015 06:58:11 PM JST

* Wed 27 May 2015 06:58:11 PM JST

* Wed 27 May 2015 06:58:11 PM JST
            super(KeyCommandForMouseChromeMiddleButton, self).on_up(event)

* Wed 27 May 2015 06:58:20 PM JST
self.key = X11Key(accelerator.get_code(), accelerator.get_modifiers())
* Wed 27 May 2015 06:58:47 PM JST
key = 
* Wed 27 May 2015 06:58:50 PM JST
get_code()
* Wed 27 May 2015 06:58:50 PM JST
accelerator.get_code()
* Wed 27 May 2015 06:59:13 PM JST
pass
* Wed 27 May 2015 06:59:52 PM JST
pass
* Wed 27 May 2015 06:59:55 PM JST
            self.shift_a.press(event.window)
            self.shift.display.flush()

* Wed 27 May 2015 07:00:20 PM JST
KeyCommandForMouseChromeMiddleButton
* Wed 27 May 2015 07:00:44 PM JST
chrome_mouse_candidate.register_bind(
    MIDDLE_BUTTON_ACCE, KeyCommandForMouse(W_CTRL_KEY_ACCE))

* Wed 27 May 2015 07:00:48 PM JST
KeyCommandForMouseChromeMiddleButton
* Wed 27 May 2015 07:02:28 PM JST

* Wed 27 May 2015 07:02:28 PM JST

* Wed 27 May 2015 07:02:29 PM JST
            print('DEBUG-2-xahk_handle3.py')

* Wed 27 May 2015 07:02:37 PM JST
event.window.title
* Wed 27 May 2015 07:02:43 PM JST
        print('DEBUG-2-xahk_handle3.py')
        print(event.window.title)

* Wed 27 May 2015 07:03:56 PM JST
window = CursorHandler.get_instance().get_under_window()
* Wed 27 May 2015 07:04:12 PM JST
event.
* Wed 27 May 2015 07:04:17 PM JST
window = CursorHandler.get_instance().get_under_window()
* Wed 27 May 2015 07:04:30 PM JST
event.
* Wed 27 May 2015 07:05:52 PM JST
event.
* Wed 27 May 2015 07:05:55 PM JST
event.
* Wed 27 May 2015 07:06:16 PM JST

* Wed 27 May 2015 07:06:16 PM JST

* Wed 27 May 2015 07:06:17 PM JST
        else:

* Wed 27 May 2015 07:06:29 PM JST
sleep(3)
* Wed 27 May 2015 07:06:32 PM JST

* Wed 27 May 2015 07:06:33 PM JST

* Wed 27 May 2015 07:06:33 PM JST
        else:

* Wed 27 May 2015 07:07:19 PM JST

* Wed 27 May 2015 07:07:19 PM JST

* Wed 27 May 2015 07:07:20 PM JST
            print('DEBUG-3-xahk_handle3.py')

* Wed 27 May 2015 07:07:21 PM JST

* Wed 27 May 2015 07:07:21 PM JST

* Wed 27 May 2015 07:07:22 PM JST
            print('DEBUG-2-xahk_handle3.py')

* Wed 27 May 2015 07:07:27 PM JST

* Wed 27 May 2015 07:07:27 PM JST

* Wed 27 May 2015 07:07:27 PM JST
            sleep(3)

* Wed 27 May 2015 07:08:33 PM JST

* Wed 27 May 2015 07:08:34 PM JST

* Wed 27 May 2015 07:08:34 PM JST
        super(KeyCommandForMouseChromeMiddleButton, self).on_up(event)

* Wed 27 May 2015 08:57:00 PM JST
BadWindow
* Wed 27 May 2015 08:57:31 PM JST
self.shift_a.release(window)
* Wed 27 May 2015 08:57:42 PM JST

* Wed 27 May 2015 08:57:43 PM JST

* Wed 27 May 2015 08:57:43 PM JST
                print('DEBUG-2-xahk_handle3.py')

* Wed 27 May 2015 08:57:43 PM JST
                print('DEBUG-2-xahk_handle3.py')

* Wed 27 May 2015 08:57:43 PM JST
                print('DEBUG-2-xahk_handle3.py')
                self.shift_a.press(window)

* Wed 27 May 2015 08:57:45 PM JST

* Wed 27 May 2015 08:57:45 PM JST

* Wed 27 May 2015 08:57:45 PM JST
                print('DEBUG-2-xahk_handle3.py')

* Wed 27 May 2015 09:05:36 PM JST
[w.wmclass for w in WindowManager.get_instance().list_windows()]
* Wed 27 May 2015 09:05:49 PM JST
from _xahk.window_manager import WindowManager
* Wed 27 May 2015 09:06:41 PM JST
from _xahk.window_manager import WindowManager;
* Wed 27 May 2015 09:07:05 PM JST

* Wed 27 May 2015 09:07:05 PM JST

* Wed 27 May 2015 09:07:05 PM JST
        print(wm_classes)

* Wed 27 May 2015 09:07:49 PM JST
wm_classes.remove('')
* Thu 28 May 2015 03:42:25 AM JST
ChangeWindowAttributes
* Thu 28 May 2015 07:53:57 AM JST
from _xahk.window_manager import WindowManager
* Thu 28 May 2015 07:54:30 AM JST
[w.title for w in WindowManager.get_instance().list_windows()]
* Thu 28 May 2015 07:54:38 AM JST
from _xahk.window_manager import WindowManager
* Thu 28 May 2015 07:54:53 AM JST
from _xahk.window_manager import WindowManager
[w.title for w in WindowManager.get_instance().list_windows()]
* Thu 28 May 2015 07:55:12 AM JST
46137348
* Thu 28 May 2015 07:56:30 AM JST
RaiseLowest
* Thu 28 May 2015 07:59:33 AM JST
46137348
* Thu 28 May 2015 08:41:55 AM JST
junk/
* Thu 28 May 2015 08:41:56 AM JST
e/junk/
* Thu 28 May 2015 08:41:56 AM JST
var_e/junk/
* Thu 28 May 2015 08:41:56 AM JST
d/var_e/junk/
* Thu 28 May 2015 08:41:57 AM JST
emacs
* Thu 28 May 2015 08:45:48 AM JST
def logging_handle_exceptions(excls, value, trcbck):
    r"""Handling exception hook.

    sys.excepthook = logging_handle_exceptions
    """
    import traceback
    if issubclass(excls, KeyboardInterrupt):
        sys.__excepthook__(excls, value, trcbck)
        return
    errortype = 'Error type: {}'.format(excls)
    valuetxt = 'Uncaught exception: {0}'.format(str(value))
    trcbcktxt = ''.join(traceback.format_tb(trcbck))
    LOG.exception('\n'.join([errortype, valuetxt, trcbcktxt]))
    # for debug
    os.system('modprobe pcspkr')
    os.system('/usr/bin/beep -f 100 -l 700')
    os.system('rmmod pcspkr')
sys.excepthook = logging_handle_exceptions

* Thu 28 May 2015 08:46:11 AM JST
exception
* Thu 28 May 2015 08:46:11 AM JST
LOG.exception
* Thu 28 May 2015 08:49:28 AM JST
Downloads/
* Thu 28 May 2015 10:05:05 AM JST
WindowError
* Thu 28 May 2015 10:05:18 AM JST
pass
* Thu 28 May 2015 10:05:33 AM JST
_WindowError
* Thu 28 May 2015 10:07:32 AM JST
    os.system('modprobe pcspkr')
    os.system('/usr/bin/beep -f 100 -l 700')
    os.system('rmmod pcspkr')

* Thu 28 May 2015 10:07:51 AM JST
modprobe pcspkr
* Thu 28 May 2015 10:07:57 AM JST
/usr/bin/beep -f 100 -l 700
* Thu 28 May 2015 10:08:33 AM JST
rmmod pcspkr
* Thu 28 May 2015 12:31:04 PM JST
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 100 -l 350')
            os.system('rmmod pcspkr')
            print(err)

* Thu 28 May 2015 01:31:17 PM JST
    def on_down(self, event):
        r"""SUMMARY
        
        on_down(event)
        
        @Arguments:
        - `event`:
        
        @Return:

        @Error:
        """
        window = CursorHandler.get_instance().get_under_window()
        try:
            if 'All - Google Chrome' == window.title:
                self.shift_a.press(window)
                self.shift_a.release(window)
                self.shift_a.display.flush()
                sleep(3)
        except (WindowError, BadWindow) as err:
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 100 -l 350')
            os.system('rmmod pcspkr')
            print(err)
        super(KeyCommandForMouseChromeMiddleButton, self).on_up(event)
        super(KeyCommandForMouseChromeMiddleButton, self).on_down(event)

* Thu 28 May 2015 01:31:30 PM JST

* Thu 28 May 2015 01:31:30 PM JST

* Thu 28 May 2015 01:31:30 PM JST
                self.shift_a.release(window)

* Thu 28 May 2015 01:31:35 PM JST

* Thu 28 May 2015 01:31:36 PM JST

* Thu 28 May 2015 01:31:36 PM JST
                sleep(3)

* Thu 28 May 2015 01:31:46 PM JST
        super(KeyCommandForMouseChromeMiddleButton, self).on_up(event)
        super(KeyCommandForMouseChromeMiddleButton, self).on_down(event)

* Thu 28 May 2015 01:33:15 PM JST

* Thu 28 May 2015 01:33:15 PM JST

* Thu 28 May 2015 01:33:15 PM JST
                sleep(3)

* Thu 28 May 2015 01:33:36 PM JST
press
* Thu 28 May 2015 02:26:50 PM JST

class Drawable:
    """Class Drawable
    """
    # Attributes:
    __display = None  # () 
    __id = None  # () 
    
    # Operations
    def get_geometry(self):
        """function get_geometry
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_geometry_unchecked(self):
        """function get_geometry_unchecked
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Thu 28 May 2015 02:28:17 PM JST
return 
* Thu 28 May 2015 02:28:19 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:28:36 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:29:08 PM JST
class Window(Drawable):
    """Class Window
    """
    # Attributes:
    
    # Operations
    def send_event(self, propagate, event_mask, event):
        """function send_event
        
        propagate: 
        event_mask: 
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def send_event_checked(self, propagate, event_mask, event):
        """function send_event_checked
        
        propagate: 
        event_mask: 
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def destroy(self):
        """function destroy
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def destroy_checked(self):
        """function destroy_checked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def create_window(self, depth, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        """function create_window
        
        depth: 
        parent: 
        x: 
        y: 
        width: 
        height: 
        border_width: 
        _class: 
        visual: 
        value_mask: 
        value_list: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def create_window_checked(self, depth, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        """function create_window_checked
        
        depth: 
        parent: 
        x: 
        y: 
        width: 
        height: 
        border_width: 
        _class: 
        visual: 
        value_mask: 
        value_list: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def change_attributes(self, value_mask, value_list):
        """function change_attributes
        
        value_mask: 
        value_list: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def change_attributes_checked(self, value_mask, value_list):
        """function change_attributes_checked
        
        value_mask: 
        value_list: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_attributes(self):
        """function get_attributes
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_attributes_unchecked(self):
        """function get_attributes_unchecked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def destroy_subwindows(self):
        """function destroy_subwindows
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def destroy_subwindows_checked(self):
        """function destroy_subwindows_checked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def change_save_set(self, mode):
        """function change_save_set
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def change_save_set_checked(self, mode):
        """function change_save_set_checked
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def reparent(self, parent, x, y):
        """function reparent
        
        parent: 
        x: 
        y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def reparent_checked(self, parent, x, y):
        """function reparent_checked
        
        parent: 
        x: 
        y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def map(self):
        """function map
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def map_checked(self):
        """function map_checked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def map_subwindows(self):
        """function map_subwindows
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def map_subwindows_checked(self):
        """function map_subwindows_checked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unmap(self):
        """function unmap
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unmap_checked(self):
        """function unmap_checked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unmap_subwindows(self):
        """function unmap_subwindows
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unmap_subwindows_checked(self):
        """function unmap_subwindows_checked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def configure(self, value_mask, value_list):
        """function configure
        
        value_mask: 
        value_list: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def configure_checked(self, value_mask, value_list):
        """function configure_checked
        
        value_mask: 
        value_list: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def circulate(self, diretion):
        """function circulate
        
        diretion: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def circulate_checked(self, direction):
        """function circulate_checked
        
        direction: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def query_tree(self):
        """function query_tree
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def query_tree_unchecked(self):
        """function query_tree_unchecked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def change_property(self, mode, property, type, format, data_len, data):
        """function change_property
        
        mode: 
        property: 
        type: 
        format: 
        data_len: 
        data: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def change_property_checked(self, mode, property, type, format, data_len, data):
        """function change_property_checked
        
        mode: 
        property: 
        type: 
        format: 
        data_len: 
        data: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def delete_property(self, property):
        """function delete_property
        
        property: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def delete_property_checked(self, property):
        """function delete_property_checked
        
        property: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_property(self, delete, property, type, long_offset, long_length):
        """function get_property
        
        delete: 
        property: 
        type: 
        long_offset: 
        long_length: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_property_unchecked(self, delete, property, type, long_offset, long_length):
        """function get_property_unchecked
        
        delete: 
        property: 
        type: 
        long_offset: 
        long_length: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_properties(self):
        """function list_properties
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_properties_unchecked(self):
        """function list_properties_unchecked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_selection_owner(self, owner, time):
        """function set_selection_owner
        
        owner: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_selection_owner_checked(self, owner, time):
        """function set_selection_owner_checked
        
        owner: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_selection_owner(self):
        """function get_selection_owner
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_selection_owner_unchecked(self):
        """function get_selection_owner_unchecked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def convert_selection(self, requestor, target, property, time):
        """function convert_selection
        
        requestor: 
        target: 
        property: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def convert_selection_checked(self, requestor, target, property, time):
        """function convert_selection_checked
        
        requestor: 
        target: 
        property: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_pointer(self, owner_events, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        """function grab_pointer
        
        owner_events: 
        event_mask: 
        pointer_mode: 
        keyboard_mode: 
        confine_to: 
        cursor: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_pointer_unchecked(self, owner_events, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        """function grab_pointer_unchecked
        
        owner_events: 
        event_mask: 
        pointer_mode: 
        keyboard_mode: 
        confine_to: 
        cursor: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def ungrab_poiter(self, time):
        """function ungrab_poiter
        
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def ungrab_pointer_checked(self):
        """function ungrab_pointer_checked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_button(self, owner_events, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        """function grab_button
        
        owner_events: 
        event_mask: 
        pointer_mode: 
        keyboard_mode: 
        confine_to: 
        cursor: 
        button: 
        modifiers: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_butotn_checked(self, owner_events, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        """function grab_butotn_checked
        
        owner_events: 
        event_mask: 
        pointer_mode: 
        keyboard_mode: 
        confine_to: 
        cursor: 
        button: 
        modifiers: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def ungrab_button(self, button, modifeirs):
        """function ungrab_button
        
        button: 
        modifeirs: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def ungrab_button_checked(self, button, modifiers):
        """function ungrab_button_checked
        
        button: 
        modifiers: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_keyboard(self, owner_events, time, pointer_mode, keyboard_mode):
        """function grab_keyboard
        
        owner_events: 
        time: 
        pointer_mode: 
        keyboard_mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_keyboard_unchecked(self, owner_events, time, pointer_mode, keyboard_mode):
        """function grab_keyboard_unchecked
        
        owner_events: 
        time: 
        pointer_mode: 
        keyboard_mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def ungrab_keyboard(self, time):
        """function ungrab_keyboard
        
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def ungrab_keyboard_checked(self, time):
        """function ungrab_keyboard_checked
        
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_key(self, owner_events, modifiers, key, pointer_mode, keyboard_mode):
        """function grab_key
        
        owner_events: 
        modifiers: 
        key: 
        pointer_mode: 
        keyboard_mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_key_checked(self, owner_events, modifiers, key, pointer_mode, keyboard_mode):
        """function grab_key_checked
        
        owner_events: 
        modifiers: 
        key: 
        pointer_mode: 
        keyboard_mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def query_pointer(self):
        """function query_pointer
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def query_pointer_unchecked(self):
        """function query_pointer_unchecked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_motion_events(self, start, stop):
        """function get_motion_events
        
        start: 
        stop: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_motion_events_unchecked(self, start, stop):
        """function get_motion_events_unchecked
        
        start: 
        stop: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def translate_coordinates(self, src_window, src_x, src_y):
        """function translate_coordinates
        
        src_window: 
        src_x: 
        src_y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def translate_coordinates_unchecked(self, src_window, src_x, src_y):
        """function translate_coordinates_unchecked
        
        src_window: 
        src_x: 
        src_y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def warp_pointer(self, src_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        """function warp_pointer
        
        src_window: 
        src_x: 
        src_y: 
        src_width: 
        src_height: 
        dst_x: 
        dst_y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def warp_pointer_checked(self, src_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        """function warp_pointer_checked
        
        src_window: 
        src_x: 
        src_y: 
        src_width: 
        src_height: 
        dst_x: 
        dst_y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_input_focus(self, revert_to, time):
        """function set_input_focus
        
        revert_to: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_input_focus_checked(self, revert_to, time):
        """function set_input_focus_checked
        
        revert_to: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear_area(self, exposures, x, y, width, height):
        """function clear_area
        
        exposures: 
        x: 
        y: 
        width: 
        height: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear_area_checked(self, exposures, x, y, width, height):
        """function clear_area_checked
        
        exposures: 
        x: 
        y: 
        width: 
        height: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_installed_colormaps(self):
        """function list_installed_colormaps
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_installed_colormaps_unchecked(self):
        """function list_installed_colormaps_unchecked
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Thu 28 May 2015 02:33:01 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:33:02 PM JST
f
* Thu 28 May 2015 02:33:02 PM JST
sle.f
* Thu 28 May 2015 02:33:34 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:34:53 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:35:09 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:35:56 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:36:00 PM JST
core
* Thu 28 May 2015 02:36:00 PM JST
self.core
* Thu 28 May 2015 02:37:04 PM JST
depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list
* Thu 28 May 2015 02:37:14 PM JST
wid
* Thu 28 May 2015 02:37:41 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:37:43 PM JST
self.
* Thu 28 May 2015 02:38:13 PM JST
depth, self.id, parent, x, y, width, height, border_width,
            _class, visual, value_mask, value_list
* Thu 28 May 2015 02:38:36 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:38:38 PM JST
self.
* Thu 28 May 2015 02:38:51 PM JST
window, value_mask, value_list
* Thu 28 May 2015 02:38:55 PM JST
window
* Thu 28 May 2015 02:39:03 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:39:14 PM JST
i
* Thu 28 May 2015 02:39:18 PM JST
self.
* Thu 28 May 2015 02:39:25 PM JST
window, value_mask, value_list
* Thu 28 May 2015 02:39:27 PM JST
window
* Thu 28 May 2015 02:39:43 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:39:47 PM JST
self.
* Thu 28 May 2015 02:40:02 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:41:04 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:41:06 PM JST
self.
* Thu 28 May 2015 02:41:21 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:41:22 PM JST
self.
* Thu 28 May 2015 02:42:57 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:43:15 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:43:40 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:44:03 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:44:28 PM JST
one # should raise NotImplementedError()
* Thu 28 May 2015 02:44:42 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:44:59 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:45:10 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:45:34 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:45:52 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:46:16 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:46:57 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:47:11 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:47:35 PM JST
fid
* Thu 28 May 2015 02:47:35 PM JST
sle.fid
* Thu 28 May 2015 02:47:49 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:48:27 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:48:48 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:49:28 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:49:39 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:50:20 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:50:34 PM JST
mode, window, property, type, format, data_len, data
* Thu 28 May 2015 02:50:40 PM JST
window
* Thu 28 May 2015 02:51:16 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:51:30 PM JST
mode, self.id, property, type, format, data_len, data
* Thu 28 May 2015 02:51:40 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:52:00 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:52:03 PM JST
self.
* Thu 28 May 2015 02:52:29 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:52:48 PM JST
delete, window, property, type, long_offset, long_length
* Thu 28 May 2015 02:52:55 PM JST
window
* Thu 28 May 2015 02:53:15 PM JST
        return self.display.core.GetProperty(
            delete, self.id, property, type, long_offset, long_length)

* Thu 28 May 2015 02:53:36 PM JST
return 
* Thu 28 May 2015 02:54:03 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:54:28 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:55:06 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:55:31 PM JST
self.display.core.SetSelectionOwner(owner, self.id, time)
* Thu 28 May 2015 02:55:54 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:56:14 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:57:04 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:57:06 PM JST
self.
* Thu 28 May 2015 02:57:35 PM JST
        return self.display.core.ConvertSelection(
            requestor, self.id, target, property, time)

* Thu 28 May 2015 02:57:53 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 02:58:20 PM JST
owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time
* Thu 28 May 2015 02:58:32 PM JST
grab_window
* Thu 28 May 2015 02:58:47 PM JST
        return self.display.core.GrabPointer(
            owner_events, self.id, event_mask, pointer_mode, keyboard_mode,
            confine_to, cursor, time)

* Thu 28 May 2015 02:59:19 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:00:54 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:01:19 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:01:21 PM JST
self.
* Thu 28 May 2015 03:01:47 PM JST
owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers
* Thu 28 May 2015 03:01:53 PM JST
grab_window
* Thu 28 May 2015 03:02:28 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:02:33 PM JST
        return self.display.core.GrabButton(
            owner_events, self.id, event_mask, pointer_mode, keyboard_mode,
            confine_to, cursor, button, modifiers)

* Thu 28 May 2015 03:02:55 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:03:38 PM JST
return self.display.core.UngrabButton(button, self.id, modifiers)
* Thu 28 May 2015 03:03:57 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:04:13 PM JST
owner_events, grab_window, time, pointer_mode, keyboard_mode
* Thu 28 May 2015 03:04:30 PM JST
grab_window
* Thu 28 May 2015 03:04:48 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:05:09 PM JST
owner_events, self.id, time, pointer_mode, keyboard_mode
* Thu 28 May 2015 03:05:27 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:05:47 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:06:04 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:06:27 PM JST
owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode
* Thu 28 May 2015 03:07:09 PM JST
        return self.display.core.GrabKey(
            owner_events, grab_window, modifiers, key, pointer_mode,
            keyboard_mode)

* Thu 28 May 2015 03:07:19 PM JST
            
* Thu 28 May 2015 03:07:31 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:07:39 PM JST
Grab
* Thu 28 May 2015 03:07:43 PM JST
return self.display.core.
* Thu 28 May 2015 03:07:46 PM JST
        return self.display.core.GrabKey(
            owner_events, self.id, modifiers, key, pointer_mode, keyboard_mode)

* Thu 28 May 2015 03:08:11 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:08:24 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:08:53 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:09:13 PM JST
return self.display.core.GetMotionEvents(self.id, start, stop)
* Thu 28 May 2015 03:09:30 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:09:51 PM JST
self.
* Thu 28 May 2015 03:10:09 PM JST
        return self.display.core.TranslateCoordinates(
            src_window, self.id, src_x, src_y)

* Thu 28 May 2015 03:10:32 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:10:35 PM JST
self.
* Thu 28 May 2015 03:11:41 PM JST
        return self.display.core.WarpPointer(
            src_window, self.id, src_x, src_y, src_width, src_height,
            dst_x, dst_y)

* Thu 28 May 2015 03:12:00 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:12:12 PM JST
id
* Thu 28 May 2015 03:12:12 PM JST
self.id
* Thu 28 May 2015 03:12:22 PM JST
return self.display.core.SetInputFocus(revert_to, self.id, time)
* Thu 28 May 2015 03:12:59 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:13:09 PM JST
exposures, window, x, y, width, height
* Thu 28 May 2015 03:13:13 PM JST
window
* Thu 28 May 2015 03:13:51 PM JST
        return self.display.core.ClearArea(
            exposures, self.id, x, y, width, height)

* Thu 28 May 2015 03:14:01 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:14:16 PM JST
return self.display.core.ListInstalledColormaps(self.id)
* Thu 28 May 2015 03:16:06 PM JST
from Window import Window

class WindowClient:
    """Class WindowClient
    """
    # Attributes:
    display = None  # () 
    window = None  # (Window) 
    __atom_cache = None  # (AtomCache) 
    
    # Operations
    def get_id(self):
        """function get_id
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_title(self):
        """function get_title
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_title(self, title):
        """function set_title
        
        title: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_wmclass(self):
        """function get_wmclass
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_pid(self):
        """function get_pid
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_type(self):
        """function get_type
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_bounds(self):
        """function get_bounds
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_bounds(self, rectangle):
        """function set_bounds
        
        rectangle: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_size(self, size):
        """function set_size
        
        size: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def move(self, point):
        """function move
        
        point: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def minimize(self):
        """function minimize
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_minimized(self):
        """function is_minimized
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def show(self):
        """function show
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def maximize(self, mode):
        """function maximize
        
        mode: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_maximized(self):
        """function is_maximized
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def restore(self):
        """function restore
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def activate(self):
        """function activate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_active(self):
        """function is_active
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_always_on_top(self, mode):
        """function set_always_on_top
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_always_on_top(self):
        """function is_always_on_top
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def set_always_on_bottom(self, mode):
        """function set_always_on_bottom
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_always_on_bottom(self):
        """function is_always_on_bottom
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_fullscreened(self, mode):
        """function set_fullscreened
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_fullscreen(self):
        """function is_fullscreen
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_shade(self, mode):
        """function set_shade
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_shaded(self):
        """function is_shaded
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def hide(self):
        """function hide
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def close(self):
        """function close
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def delete(self):
        """function delete
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def destroy(self):
        """function destroy
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def move_cursor_to(self, point):
        """function move_cursor_to
        
        point: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def deactivate(self):
        """function deactivate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def raise(self):
        """function raise
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def lower(self):
        """function lower
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __send_client_message(self, target, mask, types, data):
        """function send_client_message
        
        target: 
        mask: 
        types: 
        data: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Thu 28 May 2015 03:21:56 PM JST
wid
* Thu 28 May 2015 03:22:36 PM JST
xahk/
* Thu 28 May 2015 03:26:44 PM JST
sef.
* Thu 28 May 2015 03:27:40 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 03:28:37 PM JST
'UTF8_STRING'
* Thu 28 May 2015 03:28:49 PM JST
'_NET_WM_NAME'
* Thu 28 May 2015 03:28:56 PM JST
'STRING'
* Thu 28 May 2015 03:29:01 PM JST
        
* Thu 28 May 2015 03:29:06 PM JST
'WM_NAME'
* Thu 28 May 2015 03:34:07 PM JST
_atom
* Thu 28 May 2015 03:34:08 PM JST
self._atom
* Thu 28 May 2015 03:35:00 PM JST
delete, property, type, long_offset, long_length
* Thu 28 May 2015 03:37:15 PM JST
self._atom_cache.get_atom('_NET_WM_NAME'), self._atom_cache.get_atom('UTF8_STRING')
* Thu 28 May 2015 03:37:23 PM JST
net_name
* Thu 28 May 2015 03:37:33 PM JST
self._atom_cache.get_atom('UTF8_STRING')
* Thu 28 May 2015 03:37:49 PM JST
'UTF8_STRING'
* Thu 28 May 2015 03:37:53 PM JST
'_NET_WM_NAME'
* Thu 28 May 2015 03:38:22 PM JST

* Thu 28 May 2015 03:38:22 PM JST

* Thu 28 May 2015 03:38:22 PM JST
        delete, property, type, long_offset, long_length

* Thu 28 May 2015 03:42:56 PM JST
reply2 = 
* Thu 28 May 2015 03:44:22 PM JST
20
* Thu 28 May 2015 03:45:51 PM JST

* Thu 28 May 2015 03:45:51 PM JST

* Thu 28 May 2015 03:45:51 PM JST
            return result

* Thu 28 May 2015 03:46:00 PM JST
result 
* Thu 28 May 2015 03:46:05 PM JST
re
* Thu 28 May 2015 03:46:06 PM JST
not re
* Thu 28 May 2015 03:46:37 PM JST
self._atom_cache.get_atom('_NET_WM_NAME')
* Thu 28 May 2015 03:47:04 PM JST
'WM_NAME'
* Thu 28 May 2015 03:47:31 PM JST
self._atom_cache.get_atom('WM_NAME')
* Thu 28 May 2015 03:47:35 PM JST
WM_NAME
* Thu 28 May 2015 03:48:07 PM JST
        reply = self.window.get_property(False, net_name, a_utf, 0, length)
        result += str(reply.value.buf())
        if reply.bytes_after:
            result += str(self.window.get_property(
                False, net_name, a_utf, length, reply.bytes_after))

* Thu 28 May 2015 03:48:16 PM JST
net
* Thu 28 May 2015 03:52:14 PM JST
'_NET_WM_NAME'
* Thu 28 May 2015 03:52:34 PM JST
self._atom_cache.get_atom('_NET_WM_NAME')
* Thu 28 May 2015 03:53:45 PM JST
return None # should raise NotImplementedError()
* Thu 28 May 2015 04:02:16 PM JST
None # should raise NotImplementedError()
* Thu 28 May 2015 04:03:35 PM JST
atom_
* Thu 28 May 2015 04:04:24 PM JST
_unpack('I' * reply.value_len, reply.value.buf())
* Thu 28 May 2015 04:05:13 PM JST
'_NET_WM_PID'
* Thu 28 May 2015 06:28:18 PM JST
75497473
* Thu 28 May 2015 06:31:02 PM JST
print 
* Thu 28 May 2015 06:31:29 PM JST
c.core.GetProperty(False, 75497473, c.core.InternAtom(False, len('_NET_WM_PID'), '_NET_WM_PID').reply().atom, c.core.InternAtom(False, len('CARDINAL'), 'CARDINAL').reply().atom, 0, 20).reply().value.buf()
* Thu 28 May 2015 06:32:02 PM JST
print 
* Thu 28 May 2015 06:42:17 PM JST
struct.unpack('I'*rep.value_len, 
* Fri 29 May 2015 06:05:16 AM JST
from userint import UserInt
from wxcb.protocol.xproto.define import NamedModifierMask


class Modifiers(UserInt):
    r"""Modifiers

    Modifiers is a UserInt.
    Responsibility:
    """

    def pack(self, ):
        r"""Convert state to C short structs.

        @Return:
        (str)

        pack()

        >>> Modifiers(1).pack()
        '\x01\x00'
        """
        return _pack('H', self)

    def clear(self, ):
        r"""Clear state to 0.

        @Return:
        None

        clear()

        >>> mod = Modifiers(1)
        >>> mod.clear()
        >>> mod == Modifiers(0)
        True
        """
        self.set(0)

    def add(self, mod):
        r"""SUMMARY

        add(mod)

        @Arguments:
        - `mod`:

        @Return:

        @Error:
        """
        self._value |= mod

    def remove(self, mod):
        r"""SUMMARY

        remove(mod)

        @Arguments:
        - `mod`:

        @Return:

        @Error:
        """
        self._value ^= mod

    def isflaged(self, mod):
        r"""SUMMARY

        isflaged(mod)

        @Arguments:
        - `mod`:

        @Return:

        @Error:
        """
        return (self._value & mod) != 0

    def __iter__(self):
        yield self.__class__(0)
        for mod in NamedModifierMask:
            if (self & mod) != 0:
                yield self.__class__(mod)
        raise StopIteration()

    def __repr__(self, ):
        return '{0.__class__.__name__}({1}, "{2:b}", {3})'.format(
            self, int(self), int(self),
            [str(NamedModifierMask(mod)).split('.')[1] for mod in self if mod])

    def __str__(self, ):
        return '{0:b}'.format(self._value)

* Fri 29 May 2015 06:06:41 AM JST

* Fri 29 May 2015 06:06:50 AM JST
protocol
* Fri 29 May 2015 06:43:39 AM JST

* Fri 29 May 2015 06:43:40 AM JST
prop
* Fri 29 May 2015 06:43:58 AM JST
            
* Fri 29 May 2015 06:44:08 AM JST
                                         
* Fri 29 May 2015 06:49:08 AM JST
self.
* Fri 29 May 2015 06:49:48 AM JST
from _xahk.window_manager import WindowManager
[w.title for w in WindowManager.get_instance().list_windows()]
* Fri 29 May 2015 06:49:57 AM JST
from _xahk.window_manager import WindowManager
[(w.title, w.id) for w in WindowManager.get_instance().list_windows()]
* Fri 29 May 2015 06:50:09 AM JST
from _xahk.window_manager import WindowManager
[(w.title, w.id) for w in WindowManager.get_instance().list_windows()]
* Fri 29 May 2015 06:51:21 AM JST
50331865
* Fri 29 May 2015 06:52:34 AM JST
'_NET_WM_NAME'
* Fri 29 May 2015 06:52:44 AM JST
'UTF8_STRING'
* Fri 29 May 2015 06:54:20 AM JST
    def get_property(self, delete, prop, types, offset=0, length=20):
        r"""SUMMARY

        get_property(delete, prop, types, offset=0, length=20)

        @Arguments:
        - `delete`:
        - `prop`:
        - `types`:
        - `offset`:
        - `length`:

        @Return:

        @Error:
        """
        reply = self.window.get_property(delete,
                                         self._atom_cache.get_atom(prop),
                                         self._atom_cache.get_atom(types),
                                         offset, length).reply()
        if reply.bytes_after:
            after_reply = self.get_property(
                delete, prop, types, length, reply.bytes_after)
            reply.value += after_reply.value
            reply.value_len += after_reply.value_len
            reply.bytes_after = after_reply.bytes_after
            return reply
        return reply

* Fri 29 May 2015 06:55:16 AM JST
'_NET_WM_NAME'
* Fri 29 May 2015 06:55:20 AM JST
'UTF8_STRING'
* Fri 29 May 2015 06:55:51 AM JST
str(reply.value.buf())
* Fri 29 May 2015 06:57:09 AM JST
'WM_NAME'
* Fri 29 May 2015 06:57:12 AM JST
'STRING'
* Fri 29 May 2015 06:57:42 AM JST
self.get_property(False, 'WM_NAME', 'STRING')
* Fri 29 May 2015 06:57:53 AM JST
self.get_property(False, 'WM_NAME', 'STRING').value.buf()
* Fri 29 May 2015 06:58:00 AM JST

* Fri 29 May 2015 06:58:00 AM JST

* Fri 29 May 2015 06:58:00 AM JST
        reply2 = self.get_property(False, 'WM_NAME', 'STRING')

* Fri 29 May 2015 07:00:40 AM JST
            
* Fri 29 May 2015 07:01:09 AM JST
'_NET_WM_NAME'
* Fri 29 May 2015 07:01:14 AM JST
'UTF8_STRING'
* Fri 29 May 2015 07:01:51 AM JST
sle.
* Fri 29 May 2015 07:01:56 AM JST
get_proeprty(
* Fri 29 May 2015 07:02:07 AM JST
'WM_CLASS'
* Fri 29 May 2015 07:02:11 AM JST
'STRING'
* Fri 29 May 2015 07:04:05 AM JST
'_NET_WM_PID'
* Fri 29 May 2015 07:04:09 AM JST
'CARDINAL'
* Fri 29 May 2015 07:05:03 AM JST
w.get_property(False, '_NET_WM_NAME', 'UTF8_STRING')
* Fri 29 May 2015 07:05:36 AM JST
reply
* Fri 29 May 2015 07:06:19 AM JST
50331865
* Fri 29 May 2015 07:07:17 AM JST
c.core.InternAtom(False, len('_NET_WM_PID'), '_NET_WM_PID').reply().atom,
* Fri 29 May 2015 07:08:08 AM JST
(False, 50331865, c.core.InternAtom(False, len('_NET_WM_PID'), '_NET_WM_PID').reply().atom, c.core.InternAtom(False, len('_NET_WM_PID'), 'CARDINAL').reply().atom, 0, 2)
* Fri 29 May 2015 07:08:27 AM JST
'CARDINAL'
* Fri 29 May 2015 07:10:24 AM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 07:11:00 AM JST
'_NET_WM_WINDOW_TYPE'
* Fri 29 May 2015 07:11:05 AM JST
'ATOM'
* Fri 29 May 2015 07:12:01 AM JST
unpack('I' * reply.value_len, reply.value.buf())
* Fri 29 May 2015 07:12:14 AM JST
reply
* Fri 29 May 2015 07:12:27 AM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 07:20:02 AM JST
return None # should raise NotImplementedError()
* Fri 29 May 2015 07:21:59 AM JST
pass
* Fri 29 May 2015 07:22:31 AM JST
_i
* Fri 29 May 2015 07:22:32 AM JST
self._i
* Fri 29 May 2015 07:25:10 AM JST
display
* Fri 29 May 2015 07:25:11 AM JST
window.display
* Fri 29 May 2015 07:26:53 AM JST
        newx = reply.dst_x - (2 * geo.x)
        newy = reply.dst_y - (2 * geo.y)
        return Rectangle(newx, newy, geo.width, geo.height)

* Fri 29 May 2015 07:29:06 AM JST
retc.
* Fri 29 May 2015 07:29:22 AM JST

* Fri 29 May 2015 07:29:22 AM JST

* Fri 29 May 2015 07:29:22 AM JST
        return None # should raise NotImplementedError()

* Fri 29 May 2015 07:30:50 AM JST
get_width(
* Fri 29 May 2015 07:30:58 AM JST

* Fri 29 May 2015 07:30:58 AM JST

* Fri 29 May 2015 07:30:58 AM JST
        return None # should raise NotImplementedError()

* Fri 29 May 2015 07:31:34 AM JST
        self.window.configure(ConfigWindow.Width|ConfigWindow.Height,
                              [size.width, size.height])

* Fri 29 May 2015 07:31:48 AM JST
size
* Fri 29 May 2015 07:31:52 AM JST
size
* Fri 29 May 2015 07:31:57 AM JST
width
* Fri 29 May 2015 07:31:59 AM JST
height
* Fri 29 May 2015 07:32:01 AM JST
Width
* Fri 29 May 2015 07:32:03 AM JST
Height
* Fri 29 May 2015 07:32:12 AM JST
    def set_size(self, size):
        """function set_size

        size:

        returns
        """
        self.window.configure(ConfigWindow.Width|ConfigWindow.Height,
                              [size.width, size.height])


* Fri 29 May 2015 07:39:57 AM JST
Change
* Fri 29 May 2015 07:40:32 AM JST
class ChangingWindowState(_IntEnum):
    r"""ChangingWindowState

    ChangingWindowState is a _IntEnum.
    Responsibility:
    """
    WITHDRAWN_STATE = 0
    NORMAL_STATE = 1
    ZOOM_STATE = 2
    ICONIC_STATE = 3
    INACTIVE_STATE = 4

* Fri 29 May 2015 07:41:01 AM JST
ChangeWindow
* Fri 29 May 2015 07:41:30 AM JST
ChangingWindowState.ICONIC_STATE, 0, 0, 0, 0
* Fri 29 May 2015 07:43:02 AM JST
EventCode.ClientMessage, 32, 0, self.id, types
* Fri 29 May 2015 07:43:15 AM JST
event.write(data)
* Fri 29 May 2015 07:43:37 AM JST
from _xahk.eventcode import EventCode
* Fri 29 May 2015 07:45:00 AM JST
core
* Fri 29 May 2015 07:45:56 AM JST
xahk/
* Fri 29 May 2015 07:46:40 AM JST
# code, format, sequence_number, window, messagetype
* Fri 29 May 2015 07:47:23 AM JST
event
* Fri 29 May 2015 07:54:39 AM JST
f
* Fri 29 May 2015 07:54:39 AM JST
sle.f
* Fri 29 May 2015 07:54:43 AM JST

* Fri 29 May 2015 07:54:43 AM JST

* Fri 29 May 2015 07:54:43 AM JST
        root = self.display.get_setup().roots[0].root

* Fri 29 May 2015 07:55:05 AM JST
from _wm.window_client import WindowClient
from _xahk.display import get_display
c=get_display()
w=WindowClient(c, 50331865)

* Fri 29 May 2015 07:55:21 AM JST
root
* Fri 29 May 2015 07:55:22 AM JST
w.root
* Fri 29 May 2015 07:55:43 AM JST
display.get_setup().roots[0].root
* Fri 29 May 2015 08:00:57 AM JST
types, 
* Fri 29 May 2015 08:00:59 AM JST
target, 
* Fri 29 May 2015 08:01:11 AM JST
target, 
* Fri 29 May 2015 08:17:34 AM JST
from _xahk.window_manager import WindowManager
[(w.title, w.id) for w in WindowManager.get_instance().list_windows()]
* Fri 29 May 2015 08:17:40 AM JST
50331865)
* Fri 29 May 2015 08:17:43 AM JST
50331865
* Fri 29 May 2015 08:19:49 AM JST
1048576
* Fri 29 May 2015 08:19:58 AM JST
524288
* Fri 29 May 2015 08:21:15 AM JST
False, )
* Fri 29 May 2015 08:21:16 AM JST
SendEvent(False, )
* Fri 29 May 2015 08:21:27 AM JST
'WM_CHANGE_STATE'
* Fri 29 May 2015 08:21:37 AM JST
524288
* Fri 29 May 2015 08:21:37 AM JST
1048576|524288
* Fri 29 May 2015 08:22:04 AM JST
1048576|524288
* Fri 29 May 2015 08:22:34 AM JST
False
* Fri 29 May 2015 08:22:43 AM JST
50331865
* Fri 29 May 2015 08:23:02 AM JST
True
* Fri 29 May 2015 08:23:25 AM JST
False
* Fri 29 May 2015 08:24:01 AM JST
data
* Fri 29 May 2015 08:24:08 AM JST
return None # should raise NotImplementedError()
* Fri 29 May 2015 08:26:33 AM JST
WM_CHANGE_STATE
* Fri 29 May 2015 08:27:22 AM JST
from _xahk.display import get_display
c=get_display()
w=WindowClient(c, 50331865)

* Fri 29 May 2015 08:27:44 AM JST
from _wm.window_client import WindowClient
from _xahk.display import get_display
c=get_display()
w=WindowClient(c, 50331865)

* Fri 29 May 2015 08:30:32 AM JST
unpack('I' * reply.value_len, reply.value.buf())
* Fri 29 May 2015 08:30:47 AM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 08:32:23 AM JST
EventMask.SubstructureRedirect | EventMask.SubstructureNotify
* Fri 29 May 2015 08:32:43 AM JST
self._atom_cache.get_atom('WM_CHANGE_STATE')
* Fri 29 May 2015 08:32:53 AM JST

* Fri 29 May 2015 08:32:53 AM JST

* Fri 29 May 2015 08:32:53 AM JST
        return None # should raise NotImplementedError()

* Fri 29 May 2015 08:33:21 AM JST
        data = StringIO()
        data.write(_pack(
            '5I', maximize,
            self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT'),
            self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_HORZ'), 0, 0))
        self._send_client_message(
            self._root, EventMask.SubstructureRedirect,
            self._atom_cache.get_atom('_NET_WM_STATE'), data.getvalue())

* Fri 29 May 2015 08:33:27 AM JST
maximize
* Fri 29 May 2015 08:34:51 AM JST
class WindowStateMode(_IntEnum):
    r"""SUMMARY
    """
    Unset  = 0
    Set    = 1
    Toggle = 2

* Fri 29 May 2015 08:34:58 AM JST
WindowStateMode
* Fri 29 May 2015 08:35:27 AM JST
_root, 
* Fri 29 May 2015 08:35:27 AM JST
self._root, 
* Fri 29 May 2015 08:35:40 AM JST
            
* Fri 29 May 2015 08:35:45 AM JST
            
* Fri 29 May 2015 08:36:27 AM JST
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
        atoms = unpack('I' * reply.value_len, reply.value.buf())
        return self._atom_cache.get_atom('_NET_WM_STATE_HIDDEN') in atoms

* Fri 29 May 2015 08:36:50 AM JST
_NET_WM_STATE_MAXIMIZED_VERT
* Fri 29 May 2015 08:37:20 AM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Fri 29 May 2015 08:39:36 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Fri 29 May 2015 08:39:41 AM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Fri 29 May 2015 08:40:44 AM JST

* Fri 29 May 2015 08:40:44 AM JST

* Fri 29 May 2015 08:40:44 AM JST
        return None # should raise NotImplementedError()

* Fri 29 May 2015 08:41:21 AM JST
            
* Fri 29 May 2015 08:42:00 AM JST
        self.maximize(False)
        if self.is_minimized():
            # TODO: (Atami) [2015/05/23]
            self.show()

* Fri 29 May 2015 08:42:05 AM JST
False
* Fri 29 May 2015 08:43:27 AM JST
Strin
* Fri 29 May 2015 08:43:27 AM JST
event = Strin
* Fri 29 May 2015 08:43:30 AM JST
Data
* Fri 29 May 2015 08:43:53 AM JST
self._atom_cache.get_atom('_NET_ACTIVE_WINDOW')
* Fri 29 May 2015 08:44:25 AM JST
EventMask.SubstructureRedirect | EventMask.SubstructureNotify
* Fri 29 May 2015 08:44:39 AM JST
self._atom_cache.get_atom('_NET_ACTIVE_WINDOW')
* Fri 29 May 2015 08:44:48 AM JST

* Fri 29 May 2015 08:44:48 AM JST

* Fri 29 May 2015 08:44:48 AM JST
        return None # should raise NotImplementedError()

* Fri 29 May 2015 08:45:08 AM JST
from _wm.window_client import WindowClient
from _xahk.display import get_display
c=get_display()
w=WindowClient(c, 50331865)

* Fri 29 May 2015 08:46:58 AM JST
Transl
* Fri 29 May 2015 08:46:58 AM JST
core.Transl
* Fri 29 May 2015 08:47:49 AM JST
display, 
* Fri 29 May 2015 08:47:49 AM JST
self.display, 
* Fri 29 May 2015 08:47:49 AM JST
Window(self.display, 
* Fri 29 May 2015 09:12:41 AM JST
'_NET_ACTIVE_WINDOW'
* Fri 29 May 2015 09:13:56 AM JST
self._atom_cache.get_atom('_NET_ACTIVE_WINDOW')
* Fri 29 May 2015 09:14:38 AM JST
self.
* Fri 29 May 2015 09:14:50 AM JST
_NET_ACTIVE_WINDOW
* Fri 29 May 2015 09:15:49 AM JST
c.core.GetProperty(False,482, c.core.InternAtom(False, len('_NET_ACTIVE_WINDOW'), '_NET_ACTIVE_WINDOW').reply().atom, c.core.InternAtom(False, len('WINDOW'), 'WINDOW').reply().atom, 0, 1).reply().value.buf()
* Fri 29 May 2015 09:16:10 AM JST
c.core.GetProperty(False,482, c.core.InternAtom(False, len('_NET_ACTIVE_WINDOW'), '_NET_ACTIVE_WINDOW').reply().atom, c.core.InternAtom(False, len('WINDOW'), 'WINDOW').reply().atom, 0, 1).reply().value.buf()
* Fri 29 May 2015 09:16:54 AM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 09:19:08 AM JST

    def deactivate(self):
        """function deactivate

        returns
        """
        return None # should raise NotImplementedError()


* Fri 29 May 2015 09:20:26 AM JST
self._atom_cache.get_atom('_NET_WM_STATE_ABOVE')
* Fri 29 May 2015 09:20:51 AM JST
EventMask.SubstructureRedirect,
* Fri 29 May 2015 09:20:59 AM JST
self._atom_cache.get_atom('_NET_WM_STATE'),
* Fri 29 May 2015 09:21:21 AM JST

* Fri 29 May 2015 09:21:21 AM JST

* Fri 29 May 2015 09:21:21 AM JST
        return None # should raise NotImplementedError()

* Fri 29 May 2015 09:23:10 AM JST
self._atom_cache.get_atom('_NET_WM_STATE')
* Fri 29 May 2015 09:23:25 AM JST
get_atom(
* Fri 29 May 2015 09:23:26 AM JST
_atom_cache.get_atom(
* Fri 29 May 2015 09:23:26 AM JST
self._atom_cache.get_atom(
* Fri 29 May 2015 09:23:39 AM JST
            
* Fri 29 May 2015 09:23:59 AM JST
atoms = unpack('I' * reply.value_len, reply.value.buf())
* Fri 29 May 2015 09:24:22 AM JST
self._atom_cache.get_atom('_NET_WM_STATE_ABOVE')
* Fri 29 May 2015 09:25:05 AM JST
        data = StringIO()
        data.write('5I', mode, self._atom_cache.get_atom('_NET_WM_STATE_ABOVE'),
                   0, 0, 0)
        self._send_client_message(
            EventMask.SubstructureRedirect,
            self._atom_cache.get_atom('_NET_WM_STATE'),
            data.getvalue())

* Fri 29 May 2015 09:25:36 AM JST
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
        atoms = unpack('I' * reply.value_len, reply.value.buf())
        return self._atom_cache.get_atom('_NET_WM_STATE_ABOVE') in atoms

* Fri 29 May 2015 09:26:22 AM JST
        data = StringIO()
        data.write('5I', mode, self._atom_cache.get_atom('_NET_WM_STATE_BELOW'),
                   0, 0, 0)
        self._send_client_message(
            EventMask.SubstructureRedirect,
            self._atom_cache.get_atom('_NET_WM_STATE'),
            data.getvalue())

* Fri 29 May 2015 09:26:49 AM JST
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
        atoms = unpack('I' * reply.value_len, reply.value.buf())
        return self._atom_cache.get_atom('_NET_WM_STATE_BELOW') in atoms

* Fri 29 May 2015 09:27:07 AM JST
        data = StringIO()
        data.write('5I', mode,
                   self._atom_cache.get_atom('_NET_WM_STATE_FULLSCREEN'),
                   0, 0, 0)
        self._send_client_message(
            EventMask.SubstructureRedirect,
            self._atom_cache.get_atom('_NET_WM_STATE'),
            data.getvalue())

* Fri 29 May 2015 09:27:27 AM JST
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
        atoms = unpack('I' * reply.value_len, reply.value.buf())
        return self._atom_cache.get_atom('_NET_WM_STATE_FULLSCREEN') in atoms

* Fri 29 May 2015 09:27:45 AM JST
        # TODO: (Atami) [2015/05/23]
        data = StringIO()
        data.write(_pack('5I', ChangingWindowState.WITHDRAWN_STATE, 0, 0, 0, 0))
        self._send_client_message(self._root, 0xffffff,
                                  self._atom_cache.get_atom('WM_CHANGE_STATE'),
                                  data.getvalue())

* Fri 29 May 2015 09:28:50 AM JST
self._atom_cache.get_atom('WM_CHANGE_STATE')
* Fri 29 May 2015 09:29:00 AM JST
data.getvalue()
* Fri 29 May 2015 09:29:05 AM JST
return None # should raise NotImplementedError()
* Fri 29 May 2015 09:29:35 AM JST
        data = StringIO()
        data.write(_pack('5I', 0, 0, 0, 0, 0))
        self._send_client_message(self.id, 0xffffff,
                                  self._atom_cache.get_atom('_NET_CLOSE_WINDOW'),
                                  data.getvalue())

* Fri 29 May 2015 09:29:48 AM JST
id, 
* Fri 29 May 2015 09:29:48 AM JST
self.id, 
* Fri 29 May 2015 09:30:09 AM JST
        data = StringIO()
        data.write(_pack('5I', self._atom_cache.get_atom('WM_DELETE_WINDOW'),
                         0, 0, 0, 0))
        self._send_client_message(self.id, 0xffffff,
                                  self._atom_cache.get_atom('WM_PROTOCOLS'),
                                  data.getvalue())

* Fri 29 May 2015 09:30:20 AM JST
id, 
* Fri 29 May 2015 09:30:20 AM JST
self.id, 
* Fri 29 May 2015 09:30:29 AM JST
return None # should raise NotImplementedError()
* Fri 29 May 2015 09:30:30 AM JST
f
* Fri 29 May 2015 09:30:31 AM JST
sle.f
* Fri 29 May 2015 09:30:52 AM JST
return None # should raise NotImplementedError()
* Fri 29 May 2015 09:30:54 AM JST
f
* Fri 29 May 2015 09:30:55 AM JST
s
* Fri 29 May 2015 09:30:55 AM JST
sle.s
* Fri 29 May 2015 09:31:09 AM JST
move_cursor_to
* Fri 29 May 2015 09:33:39 AM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 09:35:45 AM JST
raunder window
* Fri 29 May 2015 09:37:37 AM JST
ConfigWindow
* Fri 29 May 2015 09:38:29 AM JST
return 
* Fri 29 May 2015 09:38:35 AM JST
return None # should raise NotImplementedError()
* Fri 29 May 2015 09:39:24 AM JST
from _wm.window_client import WindowClient
from _xahk.display import get_display
c=get_display()
w=WindowClient(c, 50331865)

* Fri 29 May 2015 10:01:48 AM JST
'_NET_WM_NAME', 'UTF8_STRING'
* Fri 29 May 2015 10:01:58 AM JST
'WM_NAME', 'STRING'
* Fri 29 May 2015 10:02:06 AM JST
'_NET_WM_NAME', 'UTF8_STRING'
* Fri 29 May 2015 10:02:17 AM JST
'WM_CLASS', 'STRING'
* Fri 29 May 2015 10:02:28 AM JST
'_NET_WM_PID', 'CARDINAL'
* Fri 29 May 2015 10:02:36 AM JST
'_NET_WM_WINDOW_TYPE', 'ATOM'
* Fri 29 May 2015 10:02:46 AM JST
'WM_CHANGE_STATE'
* Fri 29 May 2015 10:02:52 AM JST
'_NET_WM_STATE', 'ATOM'
* Fri 29 May 2015 10:02:58 AM JST
'_NET_WM_STATE_HIDDEN'
* Fri 29 May 2015 10:03:04 AM JST
'WM_CHANGE_STATE'
* Fri 29 May 2015 10:03:09 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Fri 29 May 2015 10:03:12 AM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Fri 29 May 2015 10:03:18 AM JST
'_NET_WM_STATE'
* Fri 29 May 2015 10:03:24 AM JST
'_NET_WM_STATE', 'ATOM'
* Fri 29 May 2015 10:03:31 AM JST
'_NET_ACTIVE_WINDOW'
* Fri 29 May 2015 10:03:37 AM JST
'WINDOW'
* Fri 29 May 2015 10:03:43 AM JST
'_NET_WM_STATE_ABOVE'
* Fri 29 May 2015 10:03:48 AM JST
'_NET_WM_STATE'
* Fri 29 May 2015 10:03:55 AM JST
'_NET_WM_STATE', 'ATOM'
* Fri 29 May 2015 10:04:00 AM JST
'_NET_WM_STATE_ABOVE'
* Fri 29 May 2015 10:04:05 AM JST
'_NET_WM_STATE_BELOW'
* Fri 29 May 2015 10:04:12 AM JST
'_NET_WM_STATE'
* Fri 29 May 2015 10:04:17 AM JST
'_NET_WM_STATE', 'ATOM'
* Fri 29 May 2015 10:04:23 AM JST
'_NET_WM_STATE_BELOW'
* Fri 29 May 2015 10:04:28 AM JST
'_NET_WM_STATE_FULLSCREEN'
* Fri 29 May 2015 10:04:34 AM JST
'_NET_WM_STATE_FULLSCREEN'
* Fri 29 May 2015 10:04:39 AM JST
'_NET_WM_STATE_SHADED'
* Fri 29 May 2015 10:05:00 AM JST
'_NET_WM_STATE_SHADED'
* Fri 29 May 2015 10:05:06 AM JST
'WM_CHANGE_STATE'
* Fri 29 May 2015 10:05:11 AM JST
'_NET_CLOSE_WINDOW'
* Fri 29 May 2015 10:05:18 AM JST
'WM_DELETE_WINDOW'
* Fri 29 May 2015 10:05:22 AM JST
'WM_PROTOCOLS'
* Fri 29 May 2015 10:06:19 AM JST
'_NET_WM_NAME'
'UTF8_STRING'
'WM_NAME'
'STRING'
'WM_CLASS'
'_NET_WM_PID'
'CARDINAL'
'_NET_WM_WINDOW_TYPE'
'ATOM'
'WM_CHANGE_STATE'
'_NET_WM_STATE'
'_NET_WM_STATE_HIDDEN'
'_NET_WM_STATE_MAXIMIZED_VERT'
'_NET_WM_STATE_MAXIMIZED_HORZ'
'_NET_ACTIVE_WINDOW'
'WINDOW'
'_NET_WM_STATE_ABOVE'
'_NET_WM_STATE_BELOW'
'_NET_WM_STATE_FULLSCREEN'
'_NET_WM_STATE_SHADED'
'_NET_CLOSE_WINDOW'
'WM_DELETE_WINDOW'
'WM_PROTOCOLS'

* Fri 29 May 2015 10:07:51 AM JST

* Fri 29 May 2015 10:07:51 AM JST

* Fri 29 May 2015 10:07:51 AM JST
    '_NET_ACTIVE_WINDOW', 

* Fri 29 May 2015 10:07:55 AM JST

* Fri 29 May 2015 10:07:55 AM JST

* Fri 29 May 2015 10:07:56 AM JST
    '_NET_WM_NAME', 

* Fri 29 May 2015 10:09:33 AM JST
types
* Fri 29 May 2015 10:09:37 AM JST
reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
* Fri 29 May 2015 10:09:40 AM JST
_NET_WM_STATE'
* Fri 29 May 2015 10:09:41 AM JST
False, '_NET_WM_STATE'
* Fri 29 May 2015 10:09:52 AM JST
atoms = unpack('I' * reply.value_len, reply.value.buf())
* Fri 29 May 2015 10:10:02 AM JST
'_NET_WM_STATE'
* Fri 29 May 2015 10:10:11 AM JST
return self._atom_cache.get_atom('_NET_WM_STATE_HIDDEN') in atoms
* Fri 29 May 2015 10:11:22 AM JST
state
* Fri 29 May 2015 10:11:25 AM JST
state
* Fri 29 May 2015 10:11:26 AM JST

* Fri 29 May 2015 10:11:26 AM JST

* Fri 29 May 2015 10:11:26 AM JST
        - `state`:

* Fri 29 May 2015 10:11:36 AM JST
atoms = 
* Fri 29 May 2015 10:11:38 AM JST

* Fri 29 May 2015 10:11:38 AM JST

* Fri 29 May 2015 10:11:38 AM JST
        return self._atom_cache.get_atom(state) in atoms

* Fri 29 May 2015 10:11:59 AM JST

* Fri 29 May 2015 10:11:59 AM JST

* Fri 29 May 2015 10:11:59 AM JST
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')

* Fri 29 May 2015 10:12:01 AM JST
unpack('I' * reply.value_len, reply.value.buf())
* Fri 29 May 2015 10:35:54 AM JST
Transl
* Fri 29 May 2015 02:00:17 PM JST
class RootWidow:
    """Class RootWidow
    """
    # Attributes:
    display = None  # () 
    window = None  # (Window) 
    __atom_cache = None  # () 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_id(self):
        """function get_id
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def client_list_stacking(self):
        """function client_list_stacking
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def client_list(self):
        """function client_list
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_work_space(self):
        """function get_work_space
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_desktop_names(self):
        """function get_desktop_names
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_active_window(self):
        """function get_active_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_current_desktop(self):
        """function get_current_desktop
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_desktop_geometry(self):
        """function get_desktop_geometry
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_supported(self):
        """function list_supported
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_workarea(self):
        """function get_workarea
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def number_of_desktops(self):
        """function number_of_desktops
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def count_workspace(self):
        """function count_workspace
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 29 May 2015 02:00:30 PM JST
objetc
* Fri 29 May 2015 02:03:52 PM JST
sef.
* Fri 29 May 2015 02:04:32 PM JST
KATOM_TO_CACHE_FOR_ROOT
* Fri 29 May 2015 02:04:52 PM JST
is
* Fri 29 May 2015 02:05:06 PM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 02:05:14 PM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 02:07:59 PM JST
'_NET_CLIENT_LIST'
* Fri 29 May 2015 02:10:04 PM JST
'_NET_CLIENT_LIST'
* Fri 29 May 2015 02:10:15 PM JST
'WINDOW'
* Fri 29 May 2015 02:10:23 PM JST
'_NET_ACTIVE_WINDOW'
* Fri 29 May 2015 02:11:51 PM JST
        reply = self.window.get_property(delete,
                                         self._atom_cache.get_atom(prop),
                                         self._atom_cache.get_atom(types),
                                         offset, length).reply()
        if reply.bytes_after:
            after_reply = self.get_property(
                delete, prop, types, length, reply.bytes_after)
            reply.value += after_reply.value
            reply.value_len += after_reply.value_len
            reply.bytes_after = after_reply.bytes_after
            return reply
        return reply

* Fri 29 May 2015 02:12:10 PM JST
get_proeprty
* Fri 29 May 2015 02:12:25 PM JST
'_NET_CLIENT_LIST'
* Fri 29 May 2015 02:13:01 PM JST
unpack('I' * reply.value_len, reply.value.buf())
* Fri 29 May 2015 02:14:22 PM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 02:18:58 PM JST
'_NET_CLIENT_LIST_STACKING'
* Fri 29 May 2015 02:19:09 PM JST
'_NET_CLIENT_LIST'
* Fri 29 May 2015 02:19:45 PM JST
un
* Fri 29 May 2015 02:19:45 PM JST
ids = un
* Fri 29 May 2015 02:19:52 PM JST
ids = unpack('I' * reply.value_len, reply.value.buf())
* Fri 29 May 2015 02:20:06 PM JST
return [Window(self.display, id_) for id_ in ids]
* Fri 29 May 2015 02:20:29 PM JST
get_proeprty()
* Fri 29 May 2015 02:21:07 PM JST
_WIN_WORKSPACE
* Fri 29 May 2015 02:21:17 PM JST
ids = unpack('I' * reply.value_len, reply.value.buf())
* Fri 29 May 2015 02:21:27 PM JST
unpack('I' * reply.value_len, reply.value.buf())
* Fri 29 May 2015 02:21:30 PM JST

* Fri 29 May 2015 02:21:30 PM JST

* Fri 29 May 2015 02:21:30 PM JST
        ids = 

* Fri 29 May 2015 02:23:31 PM JST
_NET_DESKTOP_NAMES
* Fri 29 May 2015 02:23:41 PM JST
'_NET_DESKTOP_NAMES', 'UTF8_STRING'
* Fri 29 May 2015 02:24:06 PM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 02:26:23 PM JST
        ids = unpack('I' * reply.value_len, reply.value.buf())
        return [Window(self.display, id_) for id_ in ids]

* Fri 29 May 2015 02:27:58 PM JST
_) for id_ in ids]
* Fri 29 May 2015 02:29:56 PM JST
_NET_CURRENT_DESKTOP
* Fri 29 May 2015 02:30:11 PM JST
'_NET_CURRENT_DESKTOP',
* Fri 29 May 2015 02:30:48 PM JST
unpack('I' * reply.value_len, reply.value.buf())
* Fri 29 May 2015 02:30:58 PM JST
work
* Fri 29 May 2015 02:31:34 PM JST
unpack('I' * reply.value_len, reply.value.buf())
* Fri 29 May 2015 02:31:58 PM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 02:34:07 PM JST
_NET_DESKTOP_GEOMETRY
* Fri 29 May 2015 02:34:22 PM JST
unpack('I' * reply.value_len, reply.value.buf())
* Fri 29 May 2015 02:34:35 PM JST
from _wm.root_window import RootWindow
r=RootWindow.get_instance()

* Fri 29 May 2015 02:34:59 PM JST
return
* Fri 29 May 2015 02:36:01 PM JST
Rectangle
* Fri 29 May 2015 02:36:12 PM JST
Point
* Fri 29 May 2015 02:36:28 PM JST
Dimension
* Fri 29 May 2015 02:37:04 PM JST
reply = self.get_property(False, '_NET_DESKTOP_GEOMETRY', 'CARDINAL')
* Fri 29 May 2015 02:37:21 PM JST
_NET_SUPPORTED
* Fri 29 May 2015 02:38:03 PM JST
unpack('I' * reply.value_len, reply.value.buf())
* Fri 29 May 2015 02:38:48 PM JST
_NET_WORKAREA
* Fri 29 May 2015 02:38:59 PM JST
geometry = unpack('I' * reply.value_len, reply.value.buf())
* Fri 29 May 2015 02:39:07 PM JST
geometry = 
* Fri 29 May 2015 02:40:29 PM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 02:41:17 PM JST
_NET_NUMBER_OF_DESKTOPS
* Fri 29 May 2015 02:41:35 PM JST
unpack('I' * reply.value_len, reply.value.buf())
* Fri 29 May 2015 02:41:47 PM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 02:41:56 PM JST
        reply = self.get_property(False, '_NET_NUMBER_OF_DESKTOPS', 'CARDINAL')
        num = unpack('I' * reply.value_len, reply.value.buf())
        if not num:
            return None

* Fri 29 May 2015 02:42:03 PM JST
num
* Fri 29 May 2015 02:42:05 PM JST
num
* Fri 29 May 2015 02:42:28 PM JST
_WIN_WORKSPACE_COUNT
* Fri 29 May 2015 02:42:34 PM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 02:44:49 PM JST
'_WIN_WORKSPACE'
* Fri 29 May 2015 02:45:10 PM JST
'_NET_DESKTOP_GEOMETRY'
* Fri 29 May 2015 02:45:19 PM JST
'_NET_SUPPORTED'
* Fri 29 May 2015 02:45:25 PM JST
'_NET_WORKAREA'
* Fri 29 May 2015 02:45:31 PM JST
'_NET_NUMBER_OF_DESKTOPS'
* Fri 29 May 2015 02:45:38 PM JST
, '_WIN_WORKSPACE_COUNT'
* Fri 29 May 2015 02:46:44 PM JST
_WIN_WORKSPACE
* Fri 29 May 2015 02:49:07 PM JST
_NET_CLIENT_LIST
* Fri 29 May 2015 02:51:47 PM JST
仮想デスクトップの数
* Fri 29 May 2015 02:52:53 PM JST
現在の仮想デスクトップ
* Fri 29 May 2015 02:52:57 PM JST

* Fri 29 May 2015 02:52:57 PM JST

* Fri 29 May 2015 02:52:57 PM JST
    '_NET_CURRENT_DESKTOP', # 現在の仮想デスクトップ

* Fri 29 May 2015 02:54:28 PM JST
_NET_WM_DESKTOP
* Fri 29 May 2015 02:54:47 PM JST
クライアントがどの仮想デスクトップに属しているか
* Fri 29 May 2015 02:57:56 PM JST
zip(*[iter(rep.keysyms)] * rep.keysyms_per_keycode)
* Fri 29 May 2015 02:59:44 PM JST
                
* Fri 29 May 2015 02:59:51 PM JST

* Fri 29 May 2015 02:59:51 PM JST

* Fri 29 May 2015 02:59:51 PM JST
        # return Rectangle(rect[0], rect[1], rect[2], rect[3])

* Fri 29 May 2015 03:08:01 PM JST
from _xahk.display import get_display
* Fri 29 May 2015 03:08:07 PM JST
from _xahk.display import get_display
* Fri 29 May 2015 03:08:11 PM JST
from _wm.root_window import RootWindow
* Fri 29 May 2015 03:09:02 PM JST
str(reply.value.buf())
* Fri 29 May 2015 03:10:16 PM JST
str
* Fri 29 May 2015 03:11:59 PM JST
unicode
* Fri 29 May 2015 03:32:28 PM JST
display
* Fri 29 May 2015 03:36:34 PM JST
self.root.get_active_window()
* Fri 29 May 2015 03:37:36 PM JST
Drawable
* Fri 29 May 2015 03:43:38 PM JST
ClientWindow
* Fri 29 May 2015 03:43:40 PM JST
WIndow
* Fri 29 May 2015 03:43:45 PM JST
client_window
* Fri 29 May 2015 03:44:18 PM JST
class WindowManager:
    """Class WindowManager
    """
    # Attributes:
    root = None  # (RootWindow) 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_active_window(self):
        """function get_active_window
        
        returns WindowClient
        """
        return None # should raise NotImplementedError()
    
    def list_windows(self, filter):
        """function list_windows
        
        filter: None
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def window_exists(self, window):
        """function window_exists
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 29 May 2015 03:45:19 PM JST
self
* Fri 29 May 2015 03:45:43 PM JST
cls._instance
* Fri 29 May 2015 03:46:53 PM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 03:47:03 PM JST
self.root.get_active_window()
* Fri 29 May 2015 03:47:21 PM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 03:47:34 PM JST
self.
* Fri 29 May 2015 03:47:58 PM JST
list_client_
* Fri 29 May 2015 03:48:09 PM JST
None # should raise NotImplementedError()
* Fri 29 May 2015 03:49:09 PM JST
filter
* Fri 29 May 2015 03:49:10 PM JST
if filter
* Fri 29 May 2015 03:49:12 PM JST
                
* Fri 29 May 2015 03:49:33 PM JST
[WindowClient(w) for w in self.root.client_list_stacking()]
* Fri 29 May 2015 03:50:56 PM JST
WindowManager
* Fri 29 May 2015 03:52:34 PM JST
from _wm.window_manager import WindowManager
wm=WindowManager.get_instance()

* Fri 29 May 2015 03:52:41 PM JST
from _wm.window_manager import WindowManager
wm=WindowManager.get_instance()

* Fri 29 May 2015 03:52:51 PM JST
title
* Fri 29 May 2015 04:00:49 PM JST
_NET_SUPPORTING_WM_CHECK
* Fri 29 May 2015 04:01:00 PM JST
'_NET_SUPPORTING_WM_CHECK'
* Fri 29 May 2015 04:02:10 PM JST
        reply = self.get_property(False, '_WIN_WORKSPACE', 'CARDINAL', length=1)
        work_space = unpack('I' * reply.value_len, reply.value.buf())
        if not work_space:
            return None
        return work_space[0]

* Fri 29 May 2015 04:02:22 PM JST
'_NET_SUPPORTING_WM_CHECK'
* Fri 29 May 2015 04:02:45 PM JST
work_space
* Fri 29 May 2015 04:02:47 PM JST
work_space
* Fri 29 May 2015 04:03:19 PM JST
from _xahk.display import get_display
from _wm.root_window import RootWindow

* Fri 29 May 2015 04:04:57 PM JST
from _wm.window_manager import WindowManager
wm=WindowManager.get_instance()

* Fri 29 May 2015 04:08:03 PM JST
self.root.get_supporting_wm_check_window()
* Fri 29 May 2015 04:08:26 PM JST
wm.root.get_supporting_wm_check_window()
* Fri 29 May 2015 04:08:35 PM JST
wm.get_name()
* Fri 29 May 2015 04:08:42 PM JST
from _wm.window_manager import WindowManager
wm=WindowManager.get_instance()
wm.get_name()
* Fri 29 May 2015 04:26:18 PM JST
_NET_DESKTOP_VIEWPORT
* Fri 29 May 2015 04:26:46 PM JST
sef.
* Fri 29 May 2015 04:26:57 PM JST
_NET_DESKTOP_VIEWPORT
* Fri 29 May 2015 04:27:29 PM JST
        geometry = unpack('I' * reply.value_len, reply.value.buf())
        if len(geometry) < 2:
            return None
        return Dimension(geometry[0], geometry[1])

* Fri 29 May 2015 04:27:34 PM JST
geometry
* Fri 29 May 2015 04:27:40 PM JST
geometry
* Fri 29 May 2015 04:27:54 PM JST
Dimension
* Fri 29 May 2015 04:27:57 PM JST
geometry
* Fri 29 May 2015 04:28:00 PM JST
geometry
* Fri 29 May 2015 04:28:32 PM JST
pass
* Fri 29 May 2015 04:29:34 PM JST
width
* Fri 29 May 2015 04:30:28 PM JST
get
* Fri 29 May 2015 04:30:32 PM JST
get
* Fri 29 May 2015 04:30:34 PM JST
get
* Fri 29 May 2015 04:30:38 PM JST
get
* Fri 29 May 2015 04:31:21 PM JST
list_workarea()
* Fri 29 May 2015 04:31:33 PM JST
False, '_NET_WORKAREA', 'CARDINAL'
* Fri 29 May 2015 04:31:48 PM JST
value_len
* Fri 29 May 2015 04:32:24 PM JST
from _wm.window_manager import WindowManager
wm=WindowManager.get_instance()

* Fri 29 May 2015 04:35:28 PM JST
'_NET_WORKAREA', 'CARDINAL'
* Fri 29 May 2015 04:36:34 PM JST
/usr/lib/python2.7/dist-packages/xcb/__init__.py
* Fri 29 May 2015 04:37:22 PM JST
list(
* Fri 29 May 2015 04:42:54 PM JST
reply.value
* Fri 29 May 2015 04:43:32 PM JST
reply.value.buf()
* Fri 29 May 2015 04:45:28 PM JST
self.get_property(False, 'WM_NAME', 'STRING').value
* Fri 29 May 2015 04:46:00 PM JST
array('B', self.get_property(False, 'WM_NAME', 'STRING').value)
* Fri 29 May 2015 04:46:07 PM JST

* Fri 29 May 2015 04:46:07 PM JST

* Fri 29 May 2015 04:46:07 PM JST
        buf = 

* Fri 29 May 2015 04:46:18 PM JST
from _wm.window_manager import WindowManager
wm=WindowManager.get_instance()
* Fri 29 May 2015 04:51:17 PM JST
WindowClient
* Fri 29 May 2015 04:52:09 PM JST
from _wm.window_manager import WindowManager
wm=WindowManager.get_instance()

* Fri 29 May 2015 05:02:06 PM JST
xahk/
* Fri 29 May 2015 05:02:27 PM JST
_xahk.
* Fri 29 May 2015 05:02:27 PM JST
_xahk.
* Fri 29 May 2015 05:02:27 PM JST
_xahk.
* Fri 29 May 2015 05:02:27 PM JST
_xahk.
* Fri 29 May 2015 05:02:27 PM JST
_xahk.
* Fri 29 May 2015 05:06:12 PM JST
cookies = []
* Fri 29 May 2015 05:06:50 PM JST
self._display.core.InternAtom(
                False, len(name), name)
* Fri 29 May 2015 05:06:53 PM JST
                
* Fri 29 May 2015 05:07:11 PM JST
self.
* Fri 29 May 2015 05:07:12 PM JST
self._cached_atoms[name] = cookie.reply().atom
* Fri 29 May 2015 05:07:29 PM JST
from _wm.window_manager import WindowManager
wm=WindowManager.get_instance()
wm.get_name()
* Fri 29 May 2015 05:07:56 PM JST

* Fri 29 May 2015 05:07:56 PM JST

* Fri 29 May 2015 05:07:56 PM JST
        # cookie_map = {}

* Fri 29 May 2015 05:39:22 PM JST
*args
* Fri 29 May 2015 09:10:00 PM JST
 #, NotifyDetail
* Fri 29 May 2015 09:11:17 PM JST

* Fri 29 May 2015 09:11:17 PM JST

* Fri 29 May 2015 09:11:17 PM JST
from time import sleep

* Fri 29 May 2015 09:12:34 PM JST
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 100 -l 350')
            os.system('rmmod pcspkr')

* Fri 29 May 2015 09:15:07 PM JST
NotifyDetail
* Fri 29 May 2015 09:15:19 PM JST

* Fri 29 May 2015 09:15:19 PM JST

* Fri 29 May 2015 09:15:19 PM JST
from _xahk.mouse_bind_listener import NotifyDetail

* Fri 29 May 2015 09:20:55 PM JST
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 100 -l 350')
            os.system('rmmod pcspkr')

* Fri 29 May 2015 09:22:14 PM JST
NotifyDetail
* Fri 29 May 2015 09:22:19 PM JST

* Fri 29 May 2015 09:22:19 PM JST

* Fri 29 May 2015 09:22:19 PM JST
from _xahk.mouse_bind_listener import NotifyDetail

* Fri 29 May 2015 09:24:57 PM JST

* Fri 29 May 2015 09:24:57 PM JST

* Fri 29 May 2015 09:24:57 PM JST
        print('DEBUG-1-window_manager.py')

* Fri 29 May 2015 09:25:16 PM JST
self._client_windows()
* Fri 29 May 2015 09:32:50 PM JST

* Fri 29 May 2015 09:32:50 PM JST

* Fri 29 May 2015 09:32:50 PM JST
            print(self._client_windows())

* Fri 29 May 2015 09:32:50 PM JST
            print(self._client_windows())

* Fri 29 May 2015 09:32:50 PM JST
            print(self._client_windows())
            print(self._windows)

* Sat 30 May 2015 06:39:41 AM JST
54525974
* Sat 30 May 2015 01:25:32 PM JST
self.
* Sat 30 May 2015 01:25:38 PM JST
sys.
* Sat 30 May 2015 01:26:41 PM JST
exceptho
* Sat 30 May 2015 01:26:42 PM JST
sys.exceptho
* Sat 30 May 2015 01:27:00 PM JST
None
* Sat 30 May 2015 01:27:33 PM JST
self.func = sys.excepthook
* Sat 30 May 2015 01:28:02 PM JST
self.
* Sat 30 May 2015 01:28:41 PM JST
if
* Sat 30 May 2015 01:28:58 PM JST
sys.excepthook
* Sat 30 May 2015 01:30:13 PM JST
Excep
* Sat 30 May 2015 01:30:17 PM JST
_hook
* Sat 30 May 2015 01:30:58 PM JST
excls, value, trcbck
* Sat 30 May 2015 01:31:12 PM JST
    import traceback
    if issubclass(excls, KeyboardInterrupt):
        sys.__excepthook__(excls, value, trcbck)
        return
    errortype = 'Error type: {}'.format(excls)
    valuetxt = 'Uncaught exception: {0}'.format(str(value))
    trcbcktxt = ''.join(traceback.format_tb(trcbck))
    print('\n'.join([errortype, valuetxt, trcbcktxt]))

* Sat 30 May 2015 01:32:14 PM JST
_hoo
* Sat 30 May 2015 01:32:53 PM JST
excls, value, trcbck
* Sat 30 May 2015 01:33:10 PM JST
    os.system('modprobe pcspkr')
    os.system('/usr/bin/beep -f 100 -l 700')
    os.system('rmmod pcspkr')

* Sat 30 May 2015 01:34:46 PM JST
riase
* Sat 30 May 2015 01:36:10 PM JST

* Sat 30 May 2015 01:36:10 PM JST

* Sat 30 May 2015 01:36:10 PM JST
raise StandardError('hello')

* Sat 30 May 2015 01:38:56 PM JST
modprobe pcspkr
* Sat 30 May 2015 01:39:29 PM JST
modprobe pcspkr
* Sat 30 May 2015 01:44:22 PM JST
            
* Sat 30 May 2015 01:44:45 PM JST
riase 
* Sat 30 May 2015 01:45:43 PM JST

* Sat 30 May 2015 01:45:44 PM JST

* Sat 30 May 2015 01:45:44 PM JST
raise StandardError()

* Sat 30 May 2015 01:48:10 PM JST
100
* Sat 30 May 2015 01:48:10 PM JST
delay=100
* Sat 30 May 2015 01:48:11 PM JST
2, delay=100
* Sat 30 May 2015 01:48:11 PM JST
repeat=2, delay=100
* Sat 30 May 2015 01:49:44 PM JST

* Sat 30 May 2015 01:49:44 PM JST

* Sat 30 May 2015 01:49:44 PM JST
import traceback

* Sat 30 May 2015 01:49:55 PM JST
logging_handle_exceptions
* Sat 30 May 2015 01:54:48 PM JST
from excepthook._print import PrintExceptionHook
* Sat 30 May 2015 01:55:27 PM JST
definit
* Sat 30 May 2015 01:56:11 PM JST
        import traceback
        if issubclass(excls, KeyboardInterrupt):
            sys.__excepthook__(excls, value, trcbck)
            return

* Sat 30 May 2015 01:56:20 PM JST
        import traceback
        if issubclass(excls, KeyboardInterrupt):
            sys.__excepthook__(excls, value, trcbck)
            return
        errortype = 'Error type: {}'.format(excls)
        valuetxt = 'Uncaught exception: {0}'.format(str(value))
        trcbcktxt = ''.join(traceback.format_tb(trcbck))

* Sat 30 May 2015 01:56:51 PM JST
'\n'.join([errortype, valuetxt, trcbcktxt])
* Sat 30 May 2015 01:57:43 PM JST
from
* Sat 30 May 2015 01:58:00 PM JST

* Sat 30 May 2015 01:58:00 PM JST

* Sat 30 May 2015 01:58:00 PM JST
from excepthook._logging import LoggingExceptionHook

* Sat 30 May 2015 02:41:04 PM JST
'xfce4-terminal'
* Sat 30 May 2015 02:42:13 PM JST
'xfce4-terminal' == window.get_title()
* Sat 30 May 2015 02:43:36 PM JST
not 
* Sat 30 May 2015 05:47:47 PM JST
WindowManager
* Sat 30 May 2015 05:47:54 PM JST

* Sat 30 May 2015 05:47:54 PM JST

* Sat 30 May 2015 05:47:54 PM JST
    _instance = None

* Sat 30 May 2015 05:47:58 PM JST
root
* Sat 30 May 2015 05:48:03 PM JST
root
* Sat 30 May 2015 05:48:10 PM JST
RootWindow.get_instance()
* Sat 30 May 2015 05:49:23 PM JST
        win = self._root.get_supporting_wm_check_window()
        if not win:
            return ''

* Sat 30 May 2015 05:49:25 PM JST
        win = self._root.get_supporting_wm_check_window()
        if not win:
            return ''
        return WindowClient(win).title

* Sat 30 May 2015 05:49:29 PM JST
title
* Sat 30 May 2015 05:57:25 PM JST
get_display().disconnect()

* Sat 30 May 2015 06:00:08 PM JST
import os
import sys
import logging
from path import Path
from logging.handlers import RotatingFileHandler

* Sat 30 May 2015 06:00:12 PM JST

* Sat 30 May 2015 06:00:12 PM JST

* Sat 30 May 2015 06:00:12 PM JST
import os

* Sat 30 May 2015 06:04:51 PM JST

* Sat 30 May 2015 06:04:51 PM JST

* Sat 30 May 2015 06:04:51 PM JST
    print('exiting')

* Sat 30 May 2015 06:04:58 PM JST
FATAL
* Sat 30 May 2015 06:05:29 PM JST
DEBUG
* Sat 30 May 2015 06:05:37 PM JST
DEBUG
* Sat 30 May 2015 06:06:07 PM JST
FATAL
* Sat 30 May 2015 06:06:11 PM JST
FATAL
* Sat 30 May 2015 09:24:14 PM JST
modprobe pcspkr
* Sat 30 May 2015 09:24:22 PM JST
/usr/bin/beep -f 50 -l 350
* Sat 30 May 2015 09:24:31 PM JST
/usr/bin/beep -f 300 -l 350
* Sat 30 May 2015 09:25:33 PM JST
/usr/bin/beep -f 1000 -l 100 -r 2 -d 0.5
* Sun 31 May 2015 02:00:50 PM JST
Window
* Sun 31 May 2015 02:38:51 PM JST
handler
* Sun 31 May 2015 02:39:14 PM JST
xpro
* Sun 31 May 2015 02:39:28 PM JST
self.
* Sun 31 May 2015 02:39:31 PM JST
isisntanc
* Sun 31 May 2015 03:02:22 PM JST
target[0].wmclass
* Sun 31 May 2015 03:02:35 PM JST
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 100 -l 350')
            os.system('rmmod pcspkr')

* Sun 31 May 2015 04:35:19 PM JST
oberver
* Sun 31 May 2015 04:35:40 PM JST

* Sun 31 May 2015 04:35:40 PM JST

* Sun 31 May 2015 04:35:40 PM JST
        self._event_handlers = []

* Sun 31 May 2015 04:39:59 PM JST
                                  
* Sun 31 May 2015 04:46:55 PM JST
            # xproto.KeyPressEvent,
                                  # xproto.KeyReleaseEvent,
                                  # xproto.ButtonPressEvent,
                                  # xproto.ButtonReleaseEvent,
                                  # xproto.MotionNotifyEvent,
                                  # xproto.EnterNotifyEvent,
                                  # xproto.LeaveNotifyEvent,
                                  # xproto.FocusInEvent,
                                  # xproto.FocusOutEvent,
                                  # xproto.ExposeEvent,
                                  # xproto.GraphicsExposureEvent,
                                  # xproto.NoExposureEvent,
                                  # xproto.VisibilityNotifyEvent,

* Sun 31 May 2015 04:47:20 PM JST

* Sun 31 May 2015 04:47:20 PM JST

* Sun 31 May 2015 04:47:20 PM JST
                                  # xproto.MapRequestEvent,

* Sun 31 May 2015 04:47:25 PM JST
                                  # xproto.MapRequestEvent,
                                  # xproto.GravityNotifyEvent,

* Sun 31 May 2015 04:47:28 PM JST
                                  # xproto.MapRequestEvent,
                                  # xproto.GravityNotifyEvent,
                                  # xproto.CirculateNotifyEvent,

* Sun 31 May 2015 04:47:32 PM JST
                                  # xproto.MapRequestEvent,
                                  # xproto.GravityNotifyEvent,
                                  # xproto.CirculateNotifyEvent,
                                  # xproto.SelectionClearEvent,
                                  # xproto.SelectionRequestEvent,
                                  # xproto.ColormapNotifyEvent,
                                  # xproto.MappingNotifyEvent,
                                  # xproto.ClientMessageEvent,

* Sun 31 May 2015 04:51:41 PM JST
pass
* Sun 31 May 2015 05:01:24 PM JST
StructureNotifyMask