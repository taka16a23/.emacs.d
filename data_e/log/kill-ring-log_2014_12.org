
* Mon 01 Dec 2014 01:41:16 AM JST
recv_exit_status
* Mon 01 Dec 2014 03:10:34 AM JST
import pexpect
* Mon 01 Dec 2014 03:44:50 AM JST
expect_list?
* Mon 01 Dec 2014 04:53:10 AM JST
open
* Mon 01 Dec 2014 04:53:11 AM JST
import open
* Mon 01 Dec 2014 04:57:46 AM JST
/usr/local/lib/python2.7/dist-packages/
* Mon 01 Dec 2014 04:58:03 AM JST
currency
* Mon 01 Dec 2014 04:58:04 AM JST
import currency
* Mon 01 Dec 2014 05:28:15 AM JST
pycurrency
* Mon 01 Dec 2014 05:36:37 AM JST
recv_exit_status
* Mon 01 Dec 2014 05:43:55 AM JST
connect
* Mon 01 Dec 2014 05:45:15 AM JST
recv_ready
* Mon 01 Dec 2014 05:49:03 AM JST
recv_stderr_ready
* Mon 01 Dec 2014 05:59:56 AM JST
recv_ready
* Mon 01 Dec 2014 06:00:05 AM JST
recv_stderr_ready
* Mon 01 Dec 2014 06:03:30 AM JST
exit_status
* Mon 01 Dec 2014 06:05:23 AM JST
exec_command
* Mon 01 Dec 2014 06:14:41 AM JST
recv_stderr_ready
* Mon 01 Dec 2014 06:49:41 AM JST
/usr/share/doc/python-paramiko/examples.
* Mon 01 Dec 2014 06:55:28 AM JST
taka16.no-ip.info
* Mon 01 Dec 2014 07:19:25 AM JST
settimeou
* Mon 01 Dec 2014 04:47:24 PM JST
invoke_shell()
* Mon 01 Dec 2014 04:50:13 PM JST
makefile
* Mon 01 Dec 2014 05:32:34 PM JST
0)
* Mon 01 Dec 2014 05:32:35 PM JST
settimeout(0)
* Mon 01 Dec 2014 09:33:26 PM JST

* Mon 01 Dec 2014 09:33:26 PM JST

* Mon 01 Dec 2014 09:33:26 PM JST
    time = ''

* Mon 01 Dec 2014 09:33:32 PM JST
ActivityTime
* Mon 01 Dec 2014 09:33:40 PM JST

* Mon 01 Dec 2014 09:33:40 PM JST

* Mon 01 Dec 2014 09:33:40 PM JST
    time = ''

* Mon 01 Dec 2014 09:33:43 PM JST
ActivityTime
* Mon 01 Dec 2014 09:33:46 PM JST

* Mon 01 Dec 2014 09:33:47 PM JST

* Mon 01 Dec 2014 09:33:47 PM JST
    @staticmethod

* Tue 02 Dec 2014 02:37:58 AM JST
class Shell :
	'''(NULL)'''
	def __init__(self) :
		pass
	def read (self) :
		# returns 
		pass
	def write (self, line) :
		# returns 
		pass
	def exit_status (self) :
		# returns 
		pass

* Tue 02 Dec 2014 02:38:57 AM JST
@abstractmethod
* Tue 02 Dec 2014 02:39:34 AM JST

* Tue 02 Dec 2014 02:39:34 AM JST

* Tue 02 Dec 2014 02:39:34 AM JST
        # returns

* Tue 02 Dec 2014 02:39:35 AM JST

* Tue 02 Dec 2014 02:39:35 AM JST

* Tue 02 Dec 2014 02:39:35 AM JST
        # returns

* Tue 02 Dec 2014 02:39:36 AM JST

* Tue 02 Dec 2014 02:39:36 AM JST

* Tue 02 Dec 2014 02:39:36 AM JST
        # returns

* Tue 02 Dec 2014 02:40:24 AM JST
class PexShell (Shell) :
	'''(NULL)'''
	def __init__(self) :
		self.shell = None # 
		pass
	def read (self) :
		# returns 
		pass
	def write (self, line) :
		# returns 
		pass
	def exit_status (self) :
		# returns 
		pass

* Tue 02 Dec 2014 02:40:45 AM JST
None #
* Tue 02 Dec 2014 02:40:47 AM JST

* Tue 02 Dec 2014 02:40:48 AM JST

* Tue 02 Dec 2014 02:40:48 AM JST
		pass

* Tue 02 Dec 2014 02:40:52 AM JST

* Tue 02 Dec 2014 02:40:52 AM JST

* Tue 02 Dec 2014 02:40:53 AM JST
		# returns 

* Tue 02 Dec 2014 02:40:54 AM JST

* Tue 02 Dec 2014 02:40:54 AM JST

* Tue 02 Dec 2014 02:40:54 AM JST
		# returns 

* Tue 02 Dec 2014 02:40:55 AM JST

* Tue 02 Dec 2014 02:40:56 AM JST

* Tue 02 Dec 2014 02:40:56 AM JST
		# returns 

* Tue 02 Dec 2014 02:41:55 AM JST
class SSHShell (Shell) :
	'''(NULL)'''
	def __init__(self) :
		self.shell = None # 
		pass
	def read (self) :
		# returns 
		pass
	def write (self, line) :
		# returns 
		pass
	def exit_status (self) :
		# returns 
		pass

* Tue 02 Dec 2014 02:44:28 AM JST
_ssh
* Tue 02 Dec 2014 02:47:27 AM JST

* Tue 02 Dec 2014 02:47:28 AM JST

* Tue 02 Dec 2014 02:47:28 AM JST
        pass

* Tue 02 Dec 2014 02:47:31 AM JST
None #
* Tue 02 Dec 2014 02:47:36 AM JST

* Tue 02 Dec 2014 02:47:36 AM JST

* Tue 02 Dec 2014 02:47:36 AM JST
        # returns

* Tue 02 Dec 2014 02:47:38 AM JST

* Tue 02 Dec 2014 02:47:38 AM JST

* Tue 02 Dec 2014 02:47:38 AM JST
        # returns

* Tue 02 Dec 2014 02:47:40 AM JST

* Tue 02 Dec 2014 02:47:40 AM JST

* Tue 02 Dec 2014 02:47:40 AM JST
        # returns

* Tue 02 Dec 2014 02:47:53 AM JST
pass
* Tue 02 Dec 2014 02:48:45 AM JST
pass
* Tue 02 Dec 2014 02:48:50 AM JST
return 
* Tue 02 Dec 2014 02:49:52 AM JST
end
* Tue 02 Dec 2014 02:49:52 AM JST
start, end
* Tue 02 Dec 2014 02:53:40 AM JST
separate
* Tue 02 Dec 2014 02:53:43 AM JST
separate
* Tue 02 Dec 2014 02:59:59 AM JST

* Tue 02 Dec 2014 02:59:59 AM JST

* Tue 02 Dec 2014 02:59:59 AM JST
        self._shell

* Tue 02 Dec 2014 03:00:07 AM JST
def
* Tue 02 Dec 2014 03:01:51 AM JST

* Tue 02 Dec 2014 03:01:51 AM JST

* Tue 02 Dec 2014 03:01:51 AM JST
        self._

* Tue 02 Dec 2014 03:02:50 AM JST

* Tue 02 Dec 2014 03:02:50 AM JST

* Tue 02 Dec 2014 03:02:50 AM JST
import os

* Tue 02 Dec 2014 03:03:08 AM JST

* Tue 02 Dec 2014 03:03:09 AM JST

* Tue 02 Dec 2014 03:03:09 AM JST
class

* Tue 02 Dec 2014 03:05:16 AM JST
from 
* Tue 02 Dec 2014 03:06:44 AM JST
        @Return:
        
        @Error:

* Tue 02 Dec 2014 03:06:53 AM JST
Time
* Tue 02 Dec 2014 03:07:26 AM JST
sent 
* Tue 02 Dec 2014 03:07:26 AM JST
be sent 
* Tue 02 Dec 2014 03:07:27 AM JST
could be sent 
* Tue 02 Dec 2014 03:07:27 AM JST
data could be sent 
* Tue 02 Dec 2014 03:07:28 AM JST
no data could be sent 
* Tue 02 Dec 2014 03:07:28 AM JST
if no data could be sent 
* Tue 02 Dec 2014 03:07:32 AM JST
    def name(self, ):
        r"""SUMMARY
        
        name()
        
        @Return:
        
        @Error:
        """

* Tue 02 Dec 2014 03:09:31 AM JST
recv
* Tue 02 Dec 2014 03:09:37 AM JST
self
* Tue 02 Dec 2014 03:09:38 AM JST
if :
* Tue 02 Dec 2014 03:12:18 AM JST
pass
* Tue 02 Dec 2014 03:14:32 AM JST
    """
    """

* Tue 02 Dec 2014 03:15:48 AM JST
_shell.
* Tue 02 Dec 2014 03:19:07 AM JST
class Script :
	'''(NULL)'''
	def __init__(self) :
		self.receiver = None # 
		pass
	def execute (self, shell) :
		# returns 
		pass

* Tue 02 Dec 2014 03:19:33 AM JST
None # 
* Tue 02 Dec 2014 03:19:38 AM JST

* Tue 02 Dec 2014 03:19:38 AM JST

* Tue 02 Dec 2014 03:19:38 AM JST
		pass

* Tue 02 Dec 2014 03:19:46 AM JST

* Tue 02 Dec 2014 03:19:47 AM JST

* Tue 02 Dec 2014 03:19:47 AM JST
		# returns 

* Tue 02 Dec 2014 03:20:08 AM JST
form
* Tue 02 Dec 2014 03:20:32 AM JST
abc 
* Tue 02 Dec 2014 03:20:43 AM JST
abc import ABCMeta, abstractmethod
* Tue 02 Dec 2014 03:21:16 AM JST
abc 
* Tue 02 Dec 2014 03:23:07 AM JST
abc
* Tue 02 Dec 2014 03:25:33 AM JST
(and (not (py:at-string|comment-p)) (not (equal (this-command-keys-vector) [32])))
* Tue 02 Dec 2014 03:29:32 AM JST
class Decrypt (Script) :
	'''(NULL)'''
	def __init__(self) :
		pass
	def execute (self, shell) :
		# returns 
		pass
class Reboot (Script) :
	'''(NULL)'''
	def __init__(self) :
		pass
	def execute (self, shell) :
		# returns 
		pass
class Update (Script) :
	'''(NULL)'''
	def __init__(self) :
		pass
	def execute (self, shell) :
		# returns 
		pass

* Tue 02 Dec 2014 03:29:47 AM JST
class TCPDump (Script) :
	'''(NULL)'''
	def __init__(self) :
		pass
	def execute (self, shell) :
		# returns 
		pass
class WakeOnLan (Script) :
	'''(NULL)'''
	def __init__(self) :
		pass
	def execute (self, shell) :
		# returns 
		pass

* Tue 02 Dec 2014 03:30:35 AM JST

* Tue 02 Dec 2014 03:30:35 AM JST

* Tue 02 Dec 2014 03:30:35 AM JST
        # returns

* Tue 02 Dec 2014 03:30:37 AM JST

* Tue 02 Dec 2014 03:30:37 AM JST

* Tue 02 Dec 2014 03:30:37 AM JST
        # returns

* Tue 02 Dec 2014 03:30:38 AM JST

* Tue 02 Dec 2014 03:30:39 AM JST

* Tue 02 Dec 2014 03:30:39 AM JST
        # returns

* Tue 02 Dec 2014 03:30:40 AM JST

* Tue 02 Dec 2014 03:30:40 AM JST

* Tue 02 Dec 2014 03:30:40 AM JST
        # returns

* Tue 02 Dec 2014 03:30:42 AM JST

* Tue 02 Dec 2014 03:30:42 AM JST

* Tue 02 Dec 2014 03:30:42 AM JST
        # returns

* Tue 02 Dec 2014 03:30:44 AM JST
    """

* Tue 02 Dec 2014 03:30:46 AM JST
    """
    """

* Tue 02 Dec 2014 03:41:28 AM JST
pass
* Tue 02 Dec 2014 03:43:49 AM JST
self._shell.exit_status()
* Tue 02 Dec 2014 04:03:03 AM JST

* Tue 02 Dec 2014 04:03:04 AM JST

* Tue 02 Dec 2014 04:03:04 AM JST
|1|4bxohzv0HJ2TmZCznj3joDtubIQ=|fphTcrgfW0PHZZhnkIBzSnIGO8o= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del

* Tue 02 Dec 2014 04:03:04 AM JST
|1|4bxohzv0HJ2TmZCznj3joDtubIQ=|fphTcrgfW0PHZZhnkIBzSnIGO8o= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del

* Tue 02 Dec 2014 04:03:04 AM JST
|1|4bxohzv0HJ2TmZCznj3joDtubIQ=|fphTcrgfW0PHZZhnkIBzSnIGO8o= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del
|1|/P845vipbxYjtuOccUtMkBMUZYw=|aq21JmIGBci6ydg+QloHVTA5htE= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Tue 02 Dec 2014 04:03:04 AM JST
|1|4bxohzv0HJ2TmZCznj3joDtubIQ=|fphTcrgfW0PHZZhnkIBzSnIGO8o= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del
|1|/P845vipbxYjtuOccUtMkBMUZYw=|aq21JmIGBci6ydg+QloHVTA5htE= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Tue 02 Dec 2014 04:03:04 AM JST
|1|4bxohzv0HJ2TmZCznj3joDtubIQ=|fphTcrgfW0PHZZhnkIBzSnIGO8o= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del
|1|/P845vipbxYjtuOccUtMkBMUZYw=|aq21JmIGBci6ydg+QloHVTA5htE= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|2hf6W7CncZNCB+h3+8Y0T14WZyA=|QtLaICg8YhWsHlgDwoGJrvWZ86E= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Tue 02 Dec 2014 04:03:04 AM JST
|1|4bxohzv0HJ2TmZCznj3joDtubIQ=|fphTcrgfW0PHZZhnkIBzSnIGO8o= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del
|1|/P845vipbxYjtuOccUtMkBMUZYw=|aq21JmIGBci6ydg+QloHVTA5htE= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|2hf6W7CncZNCB+h3+8Y0T14WZyA=|QtLaICg8YhWsHlgDwoGJrvWZ86E= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Tue 02 Dec 2014 04:03:04 AM JST
|1|4bxohzv0HJ2TmZCznj3joDtubIQ=|fphTcrgfW0PHZZhnkIBzSnIGO8o= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del
|1|/P845vipbxYjtuOccUtMkBMUZYw=|aq21JmIGBci6ydg+QloHVTA5htE= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|2hf6W7CncZNCB+h3+8Y0T14WZyA=|QtLaICg8YhWsHlgDwoGJrvWZ86E= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|6YyWbcNaeOyawLHimc7lEBRX3YQ=|Lwqnfw8vz/etccR5/7/5T4Lq5eI= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Tue 02 Dec 2014 04:05:04 AM JST

* Tue 02 Dec 2014 04:05:04 AM JST

* Tue 02 Dec 2014 04:05:04 AM JST
|1|cMywkQPzWf4rWX80+w++sb5tOR8=|/GzOSEgBy9uzGmv8E+UuDQcJyqQ= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Tue 02 Dec 2014 04:11:46 AM JST

* Tue 02 Dec 2014 04:11:46 AM JST

* Tue 02 Dec 2014 04:11:46 AM JST
|1|nw/J0uBeTFJLdhLH0vu+MGOafo8=|Mw+ptWjyh5l/FBZvzGhWYS6pFPc= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Tue 02 Dec 2014 04:11:46 AM JST
|1|nw/J0uBeTFJLdhLH0vu+MGOafo8=|Mw+ptWjyh5l/FBZvzGhWYS6pFPc= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Tue 02 Dec 2014 04:11:46 AM JST
|1|nw/J0uBeTFJLdhLH0vu+MGOafo8=|Mw+ptWjyh5l/FBZvzGhWYS6pFPc= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|/B6xic81FSZ5xb0cfyGUY7hMWls=|C9Ir2/saZyK4SR4fIhI2oJ0To/g= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Tue 02 Dec 2014 04:11:46 AM JST
|1|nw/J0uBeTFJLdhLH0vu+MGOafo8=|Mw+ptWjyh5l/FBZvzGhWYS6pFPc= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|/B6xic81FSZ5xb0cfyGUY7hMWls=|C9Ir2/saZyK4SR4fIhI2oJ0To/g= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Tue 02 Dec 2014 04:11:46 AM JST
|1|nw/J0uBeTFJLdhLH0vu+MGOafo8=|Mw+ptWjyh5l/FBZvzGhWYS6pFPc= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|/B6xic81FSZ5xb0cfyGUY7hMWls=|C9Ir2/saZyK4SR4fIhI2oJ0To/g= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|FNc7fLRvIq7IvW7FMa+ntyD8U+Y=|TX8mfeb2leY4jO9NWb7WyHMao9g= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Tue 02 Dec 2014 04:18:40 AM JST
from agent import AgentUtils
* Tue 02 Dec 2014 04:39:46 AM JST
\x08\x08\x08
* Tue 02 Dec 2014 05:03:43 AM JST
sh=ki._ssh.invoke_shell()
* Tue 02 Dec 2014 05:13:10 AM JST
/usr/share/doc/python-paramiko/examples/
* Tue 02 Dec 2014 05:24:55 AM JST
class AgentUtils(object):
    """
    """
    def __init__(self, kagi, kagiMD5):
        r"""SUMMARY

        __init__(kagi, kagiMD5)

        @Arguments:
        - `kagi`:
        - `kagiMD5`:

        @Return:
        """
        self.kagi = kagi
        self.kagiMD5 = kagiMD5

    def haskeyring(self):
        """Check key in agent.
        """
        return self._haskeyring(self.kagiMD5)

    def _haskeyring(self, md5):
        """Check key in agent.
        """
        keys = self.get_keys()
        if not keys:
            return False
        return (md5 in [x.get_fingerprint() for x in keys])

    def get_keys(self):
        """summary
        """
        return _paramiko.Agent().get_keys()

    def add_keys(self):
        """summary
        """
        add_keys(self.kagi)

* Tue 02 Dec 2014 05:25:28 AM JST
import paramiko as _paramiko


if 'nt' == _os.name:
    from .nt_agent import add_keys

elif 'posix' == _os.name:
    from .posix_agent import add_keys

else:
    raise NotImplementedError('not supported {.name} environment'.format(_os))


* Tue 02 Dec 2014 05:25:42 AM JST

* Tue 02 Dec 2014 05:25:42 AM JST

* Tue 02 Dec 2014 05:25:42 AM JST
import os as _os

* Tue 02 Dec 2014 05:25:57 AM JST
AgentUtils
* Tue 02 Dec 2014 05:27:09 AM JST
add_keys
* Tue 02 Dec 2014 05:27:16 AM JST
add_keys
* Tue 02 Dec 2014 05:29:52 AM JST

* Tue 02 Dec 2014 05:29:52 AM JST

* Tue 02 Dec 2014 05:29:52 AM JST
from agent import AgentUtils, add_keys

* Tue 02 Dec 2014 05:49:44 AM JST
vt100
* Tue 02 Dec 2014 06:21:15 AM JST
readlines()
* Tue 02 Dec 2014 06:21:24 AM JST
closed
* Tue 02 Dec 2014 06:21:32 AM JST
newlines
* Tue 02 Dec 2014 06:24:11 AM JST

* Tue 02 Dec 2014 06:24:14 AM JST
recv_exit_status
* Tue 02 Dec 2014 06:27:45 AM JST
sudo: no tty present and no askpass program specified\n
* Tue 02 Dec 2014 07:04:39 AM JST
read()
* Tue 02 Dec 2014 08:15:12 AM JST
script
* Tue 02 Dec 2014 08:31:52 AM JST

* Tue 02 Dec 2014 08:31:52 AM JST

* Tue 02 Dec 2014 08:31:52 AM JST
        client.write('reboot')

* Tue 02 Dec 2014 08:33:52 AM JST
cla
* Tue 02 Dec 2014 08:37:09 AM JST
self
* Tue 02 Dec 2014 08:37:25 AM JST
repr(
* Tue 02 Dec 2014 08:37:38 AM JST
replace?
* Tue 02 Dec 2014 08:37:38 AM JST
''.replace?
* Tue 02 Dec 2014 08:45:58 AM JST
pass
* Tue 02 Dec 2014 08:48:04 AM JST
pass
* Tue 02 Dec 2014 08:48:17 AM JST
std
* Tue 02 Dec 2014 08:58:33 AM JST
'ls')
* Tue 02 Dec 2014 08:58:34 AM JST
exec_command('ls')
* Tue 02 Dec 2014 09:02:18 AM JST
readlines()
* Tue 02 Dec 2014 09:06:03 AM JST
receiver
* Tue 02 Dec 2014 09:06:04 AM JST
self.receiver
* Tue 02 Dec 2014 09:06:17 AM JST
channel
* Tue 02 Dec 2014 04:23:50 PM JST
'/bin/echo exitstatus=$?=\r\n\r\nexitstatus=127=\r\n$ $ '
* Tue 02 Dec 2014 05:08:12 PM JST
rs=r._ssh.invoke_ssh()
* Tue 02 Dec 2014 05:12:25 PM JST
set
* Tue 02 Dec 2014 05:16:13 PM JST
read()
* Tue 02 Dec 2014 05:16:16 PM JST
after
* Tue 02 Dec 2014 05:17:57 PM JST
pr.sendline('/bin/ls /bin')
* Tue 02 Dec 2014 05:18:05 PM JST
pr=pexpect.spawn('ssh ro')
* Tue 02 Dec 2014 05:19:14 PM JST
befoer
* Tue 02 Dec 2014 06:02:49 PM JST

* Tue 02 Dec 2014 06:03:09 PM JST
http://atztogo.hatenablog.com/entry/2013/06/11/102737
* Tue 02 Dec 2014 06:05:19 PM JST
shell=spur.SshShell('192.168.1.1', username='root',password=)
* Tue 02 Dec 2014 06:39:40 PM JST
paramikohandler
* Tue 02 Dec 2014 06:41:02 PM JST
paramikohandler/
* Tue 02 Dec 2014 06:41:59 PM JST
    def exit_status(self):
        self.write('echo $?\r\n')
        recv = self.read()
        return


* Tue 02 Dec 2014 06:48:02 PM JST
'/bin/echo exitstatus=$?=\r\n\r\nexitstatus=127=\r\n$ $ '
* Tue 02 Dec 2014 06:48:30 PM JST
'echo exitstatus=$?=\r\nexitstatus=0=\r\nroot@ro:~# \r\nroot@ro:~# '
* Tue 02 Dec 2014 06:48:59 PM JST
splitline()
* Tue 02 Dec 2014 06:51:14 PM JST
shell.read()
* Tue 02 Dec 2014 06:51:17 PM JST

* Tue 02 Dec 2014 06:51:17 PM JST

* Tue 02 Dec 2014 06:51:17 PM JST
        recv = shell.read()

* Tue 02 Dec 2014 06:51:44 PM JST
not 
* Tue 02 Dec 2014 06:51:45 PM JST
continue
* Tue 02 Dec 2014 06:52:28 PM JST
'exitstatus')
* Tue 02 Dec 2014 06:52:28 PM JST
remove('exitstatus')
* Tue 02 Dec 2014 06:53:07 PM JST
lis
* Tue 02 Dec 2014 06:54:19 PM JST
                
* Tue 02 Dec 2014 06:54:20 PM JST
exitstatus
* Tue 02 Dec 2014 06:55:18 PM JST
exi
* Tue 02 Dec 2014 06:55:19 PM JST
got exi
* Tue 02 Dec 2014 06:56:12 PM JST

* Tue 02 Dec 2014 06:56:12 PM JST

* Tue 02 Dec 2014 06:56:12 PM JST
        self._receiver = receiver

* Tue 02 Dec 2014 07:15:56 PM JST
class Reboot(Script):
    """
    """
    def execute(self, shell):
        _, out, err = shell.exec_command('/sbin/reboot')
        if out.channel.recv_ready() and self.receiver:
            self.receiver.append(out.readlines())
        elif err.channel.recv_ready():
            raise StandardError(err.read())



* Tue 02 Dec 2014 07:20:47 PM JST
MyServer
* Tue 02 Dec 2014 07:20:54 PM JST
mymachine
* Tue 02 Dec 2014 07:23:10 PM JST

* Tue 02 Dec 2014 07:23:10 PM JST

* Tue 02 Dec 2014 07:23:10 PM JST
revision__ = "$Revision$"

* Tue 02 Dec 2014 07:23:11 PM JST
revision__ = "$Revision$"

* Tue 02 Dec 2014 07:28:21 PM JST

* Tue 02 Dec 2014 07:28:21 PM JST

* Tue 02 Dec 2014 07:28:21 PM JST
revision__ = "$Revision$"

* Tue 02 Dec 2014 07:31:12 PM JST
class Decrypt(Script):
    """
    """
    def execute(self, shell):
        pass



* Tue 02 Dec 2014 07:31:47 PM JST
class TCPDump(Script):
    """
    """
    def execute(self, shell):
        pass



* Tue 02 Dec 2014 07:32:08 PM JST
class WakeOnLan(Script):
    """
    """
    def execute(self, shell):
        pass

* Tue 02 Dec 2014 07:33:40 PM JST
class AptUpdate(Script):
    """
    """
    def execute(self, shell):
        pass


* Tue 02 Dec 2014 09:55:45 PM JST
self.
* Tue 02 Dec 2014 09:57:05 PM JST
object
* Tue 02 Dec 2014 09:57:20 PM JST

* Tue 02 Dec 2014 09:57:20 PM JST

* Tue 02 Dec 2014 09:57:20 PM JST
        self._time = time

* Tue 02 Dec 2014 09:57:50 PM JST
_
* Tue 02 Dec 2014 09:57:50 PM JST
0._
* Tue 02 Dec 2014 09:58:19 PM JST
fromat
* Tue 02 Dec 2014 09:59:08 PM JST
*args
* Tue 02 Dec 2014 10:43:29 PM JST
script/
* Tue 02 Dec 2014 10:45:13 PM JST
from t1.socketutil import HostName
* Tue 02 Dec 2014 10:45:20 PM JST
class
* Tue 02 Dec 2014 10:47:29 PM JST
host
* Tue 02 Dec 2014 10:47:33 PM JST
port
* Tue 02 Dec 2014 10:47:35 PM JST
user
* Tue 02 Dec 2014 10:47:37 PM JST
kagi
* Wed 03 Dec 2014 12:19:26 AM JST
~/.pylib/portscan/
* Wed 03 Dec 2014 12:38:52 AM JST
# Network services, Internet style
#
# Note that it is presently the policy of IANA to assign a single well-known
# port number for both TCP and UDP; hence, officially ports have two entries
# even if the protocol doesn't support UDP operations.
#
# Updated from http://www.iana.org/assignments/port-numbers and other
# sources like http://www.freebsd.org/cgi/cvsweb.cgi/src/etc/services .
# New ports will be added on request if they have been officially assigned
# by IANA and used in the real-world or are needed by a debian package.
# If you need a huge list of used numbers please install the nmap package.

tcpmux		1/tcp				# TCP port service multiplexer
echo		7/tcp
echo		7/udp
discard		9/tcp		sink null
discard		9/udp		sink null
systat		11/tcp		users
daytime		13/tcp
daytime		13/udp
netstat		15/tcp
qotd		17/tcp		quote
msp		18/tcp				# message send protocol
msp		18/udp
chargen		19/tcp		ttytst source
chargen		19/udp		ttytst source
ftp-data	20/tcp
ftp		21/tcp
fsp		21/udp		fspd
ssh		22/tcp				# SSH Remote Login Protocol
ssh		22/udp
telnet		23/tcp
smtp		25/tcp		mail
time		37/tcp		timserver
time		37/udp		timserver
rlp		39/udp		resource	# resource location
nameserver	42/tcp		name		# IEN 116
whois		43/tcp		nicname
tacacs		49/tcp				# Login Host Protocol (TACACS)
tacacs		49/udp
re-mail-ck	50/tcp				# Remote Mail Checking Protocol
re-mail-ck	50/udp
domain		53/tcp				# Domain Name Server
domain		53/udp
mtp		57/tcp				# deprecated
tacacs-ds	65/tcp				# TACACS-Database Service
tacacs-ds	65/udp
bootps		67/tcp				# BOOTP server
bootps		67/udp
bootpc		68/tcp				# BOOTP client
bootpc		68/udp
tftp		69/udp
gopher		70/tcp				# Internet Gopher
gopher		70/udp
rje		77/tcp		netrjs
finger		79/tcp
http		80/tcp		www		# WorldWideWeb HTTP
http		80/udp				# HyperText Transfer Protocol
link		87/tcp		ttylink
kerberos	88/tcp		kerberos5 krb5 kerberos-sec	# Kerberos v5
kerberos	88/udp		kerberos5 krb5 kerberos-sec	# Kerberos v5
supdup		95/tcp
hostnames	101/tcp		hostname	# usually from sri-nic
iso-tsap	102/tcp		tsap		# part of ISODE
acr-nema	104/tcp		dicom		# Digital Imag. & Comm. 300
acr-nema	104/udp		dicom
csnet-ns	105/tcp		cso-ns		# also used by CSO name server
csnet-ns	105/udp		cso-ns
rtelnet		107/tcp				# Remote Telnet
rtelnet		107/udp
pop2		109/tcp		postoffice pop-2 # POP version 2
pop2		109/udp		pop-2
pop3		110/tcp		pop-3		# POP version 3
pop3		110/udp		pop-3
sunrpc		111/tcp		portmapper	# RPC 4.0 portmapper
sunrpc		111/udp		portmapper
auth		113/tcp		authentication tap ident
sftp		115/tcp
uucp-path	117/tcp
nntp		119/tcp		readnews untp	# USENET News Transfer Protocol
ntp		123/tcp
ntp		123/udp				# Network Time Protocol
pwdgen		129/tcp				# PWDGEN service
pwdgen		129/udp
loc-srv		135/tcp		epmap		# Location Service
loc-srv		135/udp		epmap
netbios-ns	137/tcp				# NETBIOS Name Service
netbios-ns	137/udp
netbios-dgm	138/tcp				# NETBIOS Datagram Service
netbios-dgm	138/udp
netbios-ssn	139/tcp				# NETBIOS session service
netbios-ssn	139/udp
imap2		143/tcp		imap		# Interim Mail Access P 2 and 4
imap2		143/udp		imap
snmp		161/tcp				# Simple Net Mgmt Protocol
snmp		161/udp
snmp-trap	162/tcp		snmptrap	# Traps for SNMP
snmp-trap	162/udp		snmptrap
cmip-man	163/tcp				# ISO mgmt over IP (CMOT)
cmip-man	163/udp
cmip-agent	164/tcp
cmip-agent	164/udp
mailq		174/tcp			# Mailer transport queue for Zmailer
mailq		174/udp
xdmcp		177/tcp				# X Display Mgr. Control Proto
xdmcp		177/udp
nextstep	178/tcp		NeXTStep NextStep	# NeXTStep window
nextstep	178/udp		NeXTStep NextStep	#  server
bgp		179/tcp				# Border Gateway Protocol
bgp		179/udp
prospero	191/tcp				# Cliff Neuman's Prospero
prospero	191/udp
irc		194/tcp				# Internet Relay Chat
irc		194/udp
smux		199/tcp				# SNMP Unix Multiplexer
smux		199/udp
at-rtmp		201/tcp				# AppleTalk routing
at-rtmp		201/udp
at-nbp		202/tcp				# AppleTalk name binding
at-nbp		202/udp
at-echo		204/tcp				# AppleTalk echo
at-echo		204/udp
at-zis		206/tcp				# AppleTalk zone information
at-zis		206/udp
qmtp		209/tcp				# Quick Mail Transfer Protocol
qmtp		209/udp
z3950		210/tcp		wais		# NISO Z39.50 database
z3950		210/udp		wais
ipx		213/tcp				# IPX
ipx		213/udp
imap3		220/tcp				# Interactive Mail Access
imap3		220/udp				# Protocol v3
pawserv		345/tcp				# Perf Analysis Workbench
pawserv		345/udp
zserv		346/tcp				# Zebra server
zserv		346/udp
fatserv		347/tcp				# Fatmen Server
fatserv		347/udp
rpc2portmap	369/tcp
rpc2portmap	369/udp				# Coda portmapper
codaauth2	370/tcp
codaauth2	370/udp				# Coda authentication server
clearcase	371/tcp		Clearcase
clearcase	371/udp		Clearcase
ulistserv	372/tcp				# UNIX Listserv
ulistserv	372/udp
ldap		389/tcp			# Lightweight Directory Access Protocol
ldap		389/udp
imsp		406/tcp			# Interactive Mail Support Protocol
imsp		406/udp
svrloc		427/tcp				# Server Location
svrloc		427/udp
https		443/tcp				# http protocol over TLS/SSL
https		443/udp
snpp		444/tcp				# Simple Network Paging Protocol
snpp		444/udp
microsoft-ds	445/tcp				# Microsoft Naked CIFS
microsoft-ds	445/udp
kpasswd		464/tcp
kpasswd		464/udp
saft		487/tcp			# Simple Asynchronous File Transfer
saft		487/udp
isakmp		500/tcp			# IPsec - Internet Security Association
isakmp		500/udp			#  and Key Management Protocol
rtsp		554/tcp			# Real Time Stream Control Protocol
rtsp		554/udp
nqs		607/tcp				# Network Queuing system
nqs		607/udp
npmp-local	610/tcp		dqs313_qmaster		# npmp-local / DQS
npmp-local	610/udp		dqs313_qmaster
npmp-gui	611/tcp		dqs313_execd		# npmp-gui / DQS
npmp-gui	611/udp		dqs313_execd
hmmp-ind	612/tcp		dqs313_intercell	# HMMP Indication / DQS
hmmp-ind	612/udp		dqs313_intercell
asf-rmcp	623/udp		# ASF Remote Management and Control Protocol
qmqp		628/tcp
qmqp		628/udp
ipp		631/tcp				# Internet Printing Protocol
ipp		631/udp
#
# UNIX specific services
#
exec		512/tcp
biff		512/udp		comsat
login		513/tcp
who		513/udp		whod
shell		514/tcp		cmd		# no passwords used
syslog		514/udp
printer		515/tcp		spooler		# line printer spooler
talk		517/udp
ntalk		518/udp
route		520/udp		router routed	# RIP
timed		525/udp		timeserver
tempo		526/tcp		newdate
courier		530/tcp		rpc
conference	531/tcp		chat
netnews		532/tcp		readnews
netwall		533/udp				# for emergency broadcasts
gdomap		538/tcp				# GNUstep distributed objects
gdomap		538/udp
uucp		540/tcp		uucpd		# uucp daemon
klogin		543/tcp				# Kerberized `rlogin' (v5)
kshell		544/tcp		krcmd		# Kerberized `rsh' (v5)
dhcpv6-client	546/tcp
dhcpv6-client	546/udp
dhcpv6-server	547/tcp
dhcpv6-server	547/udp
afpovertcp	548/tcp				# AFP over TCP
afpovertcp	548/udp
idfp		549/tcp
idfp		549/udp
remotefs	556/tcp		rfs_server rfs	# Brunhoff remote filesystem
nntps		563/tcp		snntp		# NNTP over SSL
nntps		563/udp		snntp
submission	587/tcp				# Submission [RFC4409]
submission	587/udp
ldaps		636/tcp				# LDAP over SSL
ldaps		636/udp
tinc		655/tcp				# tinc control port
tinc		655/udp
silc		706/tcp
silc		706/udp
kerberos-adm	749/tcp				# Kerberos `kadmin' (v5)
#
webster		765/tcp				# Network dictionary
webster		765/udp
rsync		873/tcp
rsync		873/udp
ftps-data	989/tcp				# FTP over SSL (data)
ftps		990/tcp
telnets		992/tcp				# Telnet over SSL
telnets		992/udp
imaps		993/tcp				# IMAP over SSL
imaps		993/udp
ircs		994/tcp				# IRC over SSL
ircs		994/udp
pop3s		995/tcp				# POP-3 over SSL
pop3s		995/udp
#
# From ``Assigned Numbers'':
#
#> The Registered Ports are not controlled by the IANA and on most systems
#> can be used by ordinary user processes or programs executed by ordinary
#> users.
#
#> Ports are used in the TCP [45,106] to name the ends of logical
#> connections which carry long term conversations.  For the purpose of
#> providing services to unknown callers, a service contact port is
#> defined.  This list specifies the port used by the server process as its
#> contact port.  While the IANA can not control uses of these ports it
#> does register or list uses of these ports as a convienence to the
#> community.
#
socks		1080/tcp			# socks proxy server
socks		1080/udp
proofd		1093/tcp
proofd		1093/udp
rootd		1094/tcp
rootd		1094/udp
openvpn		1194/tcp
openvpn		1194/udp
rmiregistry	1099/tcp			# Java RMI Registry
rmiregistry	1099/udp
kazaa		1214/tcp
kazaa		1214/udp
nessus		1241/tcp			# Nessus vulnerability
nessus		1241/udp			#  assessment scanner
lotusnote	1352/tcp	lotusnotes	# Lotus Note
lotusnote	1352/udp	lotusnotes
ms-sql-s	1433/tcp			# Microsoft SQL Server
ms-sql-s	1433/udp
ms-sql-m	1434/tcp			# Microsoft SQL Monitor
ms-sql-m	1434/udp
ingreslock	1524/tcp
ingreslock	1524/udp
prospero-np	1525/tcp			# Prospero non-privileged
prospero-np	1525/udp
datametrics	1645/tcp	old-radius
datametrics	1645/udp	old-radius
sa-msg-port	1646/tcp	old-radacct
sa-msg-port	1646/udp	old-radacct
kermit		1649/tcp
kermit		1649/udp
groupwise	1677/tcp
groupwise	1677/udp
l2f		1701/tcp	l2tp
l2f		1701/udp	l2tp
radius		1812/tcp
radius		1812/udp
radius-acct	1813/tcp	radacct		# Radius Accounting
radius-acct	1813/udp	radacct
msnp		1863/tcp			# MSN Messenger
msnp		1863/udp
unix-status	1957/tcp			# remstats unix-status server
log-server	1958/tcp			# remstats log server
remoteping	1959/tcp			# remstats remoteping server
cisco-sccp	2000/tcp			# Cisco SCCP
cisco-sccp	2000/udp
search		2010/tcp	ndtp
pipe-server	2010/tcp	pipe_server
nfs		2049/tcp			# Network File System
nfs		2049/udp			# Network File System
gnunet		2086/tcp
gnunet		2086/udp
rtcm-sc104	2101/tcp			# RTCM SC-104 IANA 1/29/99
rtcm-sc104	2101/udp
gsigatekeeper	2119/tcp
gsigatekeeper	2119/udp
gris		2135/tcp		# Grid Resource Information Server
gris		2135/udp
cvspserver	2401/tcp			# CVS client/server operations
cvspserver	2401/udp
venus		2430/tcp			# codacon port
venus		2430/udp			# Venus callback/wbc interface
venus-se	2431/tcp			# tcp side effects
venus-se	2431/udp			# udp sftp side effect
codasrv		2432/tcp			# not used
codasrv		2432/udp			# server port
codasrv-se	2433/tcp			# tcp side effects
codasrv-se	2433/udp			# udp sftp side effect
mon		2583/tcp			# MON traps
mon		2583/udp
dict		2628/tcp			# Dictionary server
dict		2628/udp
f5-globalsite	2792/tcp
f5-globalsite	2792/udp
gsiftp		2811/tcp
gsiftp		2811/udp
gpsd		2947/tcp
gpsd		2947/udp
gds-db		3050/tcp	gds_db		# InterBase server
gds-db		3050/udp	gds_db
icpv2		3130/tcp	icp		# Internet Cache Protocol
icpv2		3130/udp	icp
iscsi-target	3260/tcp
mysql		3306/tcp
mysql		3306/udp
nut		3493/tcp			# Network UPS Tools
nut		3493/udp
distcc		3632/tcp			# distributed compiler
distcc		3632/udp
daap		3689/tcp			# Digital Audio Access Protocol
daap		3689/udp
svn		3690/tcp	subversion	# Subversion protocol
svn		3690/udp	subversion
suucp		4031/tcp			# UUCP over SSL
suucp		4031/udp
sysrqd		4094/tcp			# sysrq daemon
sysrqd		4094/udp
sieve		4190/tcp			# ManageSieve Protocol
epmd		4369/tcp			# Erlang Port Mapper Daemon
epmd		4369/udp
remctl		4373/tcp		# Remote Authenticated Command Service
remctl		4373/udp
f5-iquery	4353/tcp			# F5 iQuery
f5-iquery	4353/udp
iax		4569/tcp			# Inter-Asterisk eXchange
iax		4569/udp
mtn		4691/tcp			# monotone Netsync Protocol
mtn		4691/udp
radmin-port	4899/tcp			# RAdmin Port
radmin-port	4899/udp
rfe		5002/udp			# Radio Free Ethernet
rfe		5002/tcp
mmcc		5050/tcp	# multimedia conference control tool (Yahoo IM)
mmcc		5050/udp
sip		5060/tcp			# Session Initiation Protocol
sip		5060/udp
sip-tls		5061/tcp
sip-tls		5061/udp
aol		5190/tcp			# AIM
aol		5190/udp
xmpp-client	5222/tcp	jabber-client	# Jabber Client Connection
xmpp-client	5222/udp	jabber-client
xmpp-server	5269/tcp	jabber-server	# Jabber Server Connection
xmpp-server	5269/udp	jabber-server
cfengine	5308/tcp
cfengine	5308/udp
mdns		5353/tcp			# Multicast DNS
mdns		5353/udp
postgresql	5432/tcp	postgres	# PostgreSQL Database
postgresql	5432/udp	postgres
freeciv		5556/tcp	rptp		# Freeciv gameplay
freeciv		5556/udp
amqp		5672/tcp
amqp		5672/udp
amqp		5672/sctp
ggz		5688/tcp			# GGZ Gaming Zone
ggz		5688/udp
x11		6000/tcp	x11-0		# X Window System
x11		6000/udp	x11-0
x11-1		6001/tcp
x11-1		6001/udp
x11-2		6002/tcp
x11-2		6002/udp
x11-3		6003/tcp
x11-3		6003/udp
x11-4		6004/tcp
x11-4		6004/udp
x11-5		6005/tcp
x11-5		6005/udp
x11-6		6006/tcp
x11-6		6006/udp
x11-7		6007/tcp
x11-7		6007/udp
gnutella-svc	6346/tcp			# gnutella
gnutella-svc	6346/udp
gnutella-rtr	6347/tcp			# gnutella
gnutella-rtr	6347/udp
sge-qmaster	6444/tcp	sge_qmaster	# Grid Engine Qmaster Service
sge-qmaster	6444/udp	sge_qmaster
sge-execd	6445/tcp	sge_execd	# Grid Engine Execution Service
sge-execd	6445/udp	sge_execd
mysql-proxy	6446/tcp			# MySQL Proxy
mysql-proxy	6446/udp
afs3-fileserver 7000/tcp	bbs		# file server itself
afs3-fileserver 7000/udp	bbs
afs3-callback	7001/tcp			# callbacks to cache managers
afs3-callback	7001/udp
afs3-prserver	7002/tcp			# users & groups database
afs3-prserver	7002/udp
afs3-vlserver	7003/tcp			# volume location database
afs3-vlserver	7003/udp
afs3-kaserver	7004/tcp			# AFS/Kerberos authentication
afs3-kaserver	7004/udp
afs3-volser	7005/tcp			# volume managment server
afs3-volser	7005/udp
afs3-errors	7006/tcp			# error interpretation service
afs3-errors	7006/udp
afs3-bos	7007/tcp			# basic overseer process
afs3-bos	7007/udp
afs3-update	7008/tcp			# server-to-server updater
afs3-update	7008/udp
afs3-rmtsys	7009/tcp			# remote cache manager service
afs3-rmtsys	7009/udp
font-service	7100/tcp	xfs		# X Font Service
font-service	7100/udp	xfs
http-alt	8080/tcp	webcache	# WWW caching service
http-alt	8080/udp
bacula-dir	9101/tcp			# Bacula Director
bacula-dir	9101/udp
bacula-fd	9102/tcp			# Bacula File Daemon
bacula-fd	9102/udp
bacula-sd	9103/tcp			# Bacula Storage Daemon
bacula-sd	9103/udp
xmms2		9667/tcp	# Cross-platform Music Multiplexing System
xmms2		9667/udp
nbd		10809/tcp			# Linux Network Block Device
zabbix-agent	10050/tcp			# Zabbix Agent
zabbix-agent	10050/udp
zabbix-trapper	10051/tcp			# Zabbix Trapper
zabbix-trapper	10051/udp
amanda		10080/tcp			# amanda backup services
amanda		10080/udp
hkp		11371/tcp			# OpenPGP HTTP Keyserver
hkp		11371/udp
bprd		13720/tcp			# VERITAS NetBackup
bprd		13720/udp
bpdbm		13721/tcp			# VERITAS NetBackup
bpdbm		13721/udp
bpjava-msvc	13722/tcp			# BP Java MSVC Protocol
bpjava-msvc	13722/udp
vnetd		13724/tcp			# Veritas Network Utility
vnetd		13724/udp
bpcd		13782/tcp			# VERITAS NetBackup
bpcd		13782/udp
vopied		13783/tcp			# VERITAS NetBackup
vopied		13783/udp
dcap		22125/tcp			# dCache Access Protocol
gsidcap		22128/tcp			# GSI dCache Access Protocol
wnn6		22273/tcp			# wnn6
wnn6		22273/udp

#
# Datagram Delivery Protocol services
#
rtmp		1/ddp			# Routing Table Maintenance Protocol
nbp		2/ddp			# Name Binding Protocol
echo		4/ddp			# AppleTalk Echo Protocol
zip		6/ddp			# Zone Information Protocol

#=========================================================================
# The remaining port numbers are not as allocated by IANA.
#=========================================================================

# Kerberos (Project Athena/MIT) services
# Note that these are for Kerberos v4, and are unofficial.  Sites running
# v4 should uncomment these and comment out the v5 entries above.
#
kerberos4	750/udp		kerberos-iv kdc	# Kerberos (server)
kerberos4	750/tcp		kerberos-iv kdc
kerberos-master	751/udp		kerberos_master	# Kerberos authentication
kerberos-master	751/tcp
passwd-server	752/udp		passwd_server	# Kerberos passwd server
krb-prop	754/tcp		krb_prop krb5_prop hprop # Kerberos slave propagation
krbupdate	760/tcp		kreg		# Kerberos registration
console		782/tcp				# Conserver
swat		901/tcp				# swat
kpop		1109/tcp			# Pop with Kerberos
knetd		2053/tcp			# Kerberos de-multiplexor
zephyr-srv	2102/udp			# Zephyr server
zephyr-clt	2103/udp			# Zephyr serv-hm connection
zephyr-hm	2104/udp			# Zephyr hostmanager
eklogin		2105/tcp			# Kerberos encrypted rlogin
# Hmmm. Are we using Kv4 or Kv5 now? Worrying.
# The following is probably Kerberos v5  --- ajt@debian.org (11/02/2000)
kx		2111/tcp			# X over Kerberos
iprop		2121/tcp			# incremental propagation
#
# Unofficial but necessary (for NetBSD) services
#
supfilesrv	871/tcp				# SUP server
supfiledbg	1127/tcp			# SUP debugging

#
# Services added for the Debian GNU/Linux distribution
#
linuxconf	98/tcp				# LinuxConf
poppassd	106/tcp				# Eudora
poppassd	106/udp
ssmtp		465/tcp		smtps		# SMTP over SSL
moira-db	775/tcp		moira_db	# Moira database
moira-update	777/tcp		moira_update	# Moira update protocol
moira-ureg	779/udp		moira_ureg	# Moira user registration
spamd		783/tcp				# spamassassin daemon
omirr		808/tcp		omirrd		# online mirror
omirr		808/udp		omirrd
customs		1001/tcp			# pmake customs server
customs		1001/udp
skkserv		1178/tcp			# skk jisho server port
predict		1210/udp			# predict -- satellite tracking
rmtcfg		1236/tcp			# Gracilis Packeten remote config server
wipld		1300/tcp			# Wipl network monitor
xtel		1313/tcp			# french minitel
xtelw		1314/tcp			# french minitel
support		1529/tcp			# GNATS
cfinger		2003/tcp			# GNU Finger
frox		2121/tcp			# frox: caching ftp proxy
ninstall	2150/tcp			# ninstall service
ninstall	2150/udp
zebrasrv	2600/tcp			# zebra service
zebra		2601/tcp			# zebra vty
ripd		2602/tcp			# ripd vty (zebra)
ripngd		2603/tcp			# ripngd vty (zebra)
ospfd		2604/tcp			# ospfd vty (zebra)
bgpd		2605/tcp			# bgpd vty (zebra)
ospf6d		2606/tcp			# ospf6d vty (zebra)
ospfapi		2607/tcp			# OSPF-API
isisd		2608/tcp			# ISISd vty (zebra)
afbackup	2988/tcp			# Afbackup system
afbackup	2988/udp
afmbackup	2989/tcp			# Afmbackup system
afmbackup	2989/udp
xtell		4224/tcp			# xtell server
fax		4557/tcp			# FAX transmission service (old)
hylafax		4559/tcp			# HylaFAX client-server protocol (new)
distmp3		4600/tcp			# distmp3host daemon
munin		4949/tcp	lrrd		# Munin
enbd-cstatd	5051/tcp			# ENBD client statd
enbd-sstatd	5052/tcp			# ENBD server statd
pcrd		5151/tcp			# PCR-1000 Daemon
noclog		5354/tcp			# noclogd with TCP (nocol)
noclog		5354/udp			# noclogd with UDP (nocol)
hostmon		5355/tcp			# hostmon uses TCP (nocol)
hostmon		5355/udp			# hostmon uses UDP (nocol)
rplay		5555/udp			# RPlay audio service
nrpe		5666/tcp			# Nagios Remote Plugin Executor
nsca		5667/tcp			# Nagios Agent - NSCA
mrtd		5674/tcp			# MRT Routing Daemon
bgpsim		5675/tcp			# MRT Routing Simulator
canna		5680/tcp			# cannaserver
sane-port	6566/tcp	sane saned	# SANE network scanner daemon
ircd		6667/tcp			# Internet Relay Chat
zope-ftp	8021/tcp			# zope management by ftp
tproxy		8081/tcp			# Transparent Proxy
omniorb		8088/tcp			# OmniORB
omniorb		8088/udp
clc-build-daemon 8990/tcp			# Common lisp build daemon
xinetd		9098/tcp
mandelspawn	9359/udp	mandelbrot	# network mandelbrot
git		9418/tcp			# Git Version Control System
zope		9673/tcp			# zope server
webmin		10000/tcp
kamanda		10081/tcp			# amanda backup services (Kerberos)
kamanda		10081/udp
amandaidx	10082/tcp			# amanda backup services
amidxtape	10083/tcp			# amanda backup services
smsqp		11201/tcp			# Alamin SMS gateway
smsqp		11201/udp
xpilot		15345/tcp			# XPilot Contact Port
xpilot		15345/udp
sgi-cmsd	17001/udp		# Cluster membership services daemon
sgi-crsd	17002/udp
sgi-gcd		17003/udp			# SGI Group membership daemon
sgi-cad		17004/tcp			# Cluster Admin daemon
isdnlog		20011/tcp			# isdn logging system
isdnlog		20011/udp
vboxd		20012/tcp			# voice box system
vboxd		20012/udp
binkp		24554/tcp			# binkp fidonet protocol
asp		27374/tcp			# Address Search Protocol
asp		27374/udp
csync2		30865/tcp			# cluster synchronization tool
dircproxy	57000/tcp			# Detachable IRC Proxy
tfido		60177/tcp			# fidonet EMSI over telnet
fido		60179/tcp			# fidonet EMSI over TCP

# Local services

* Wed 03 Dec 2014 12:40:11 AM JST

* Wed 03 Dec 2014 12:40:11 AM JST

* Wed 03 Dec 2014 12:40:11 AM JST
#

* Wed 03 Dec 2014 12:41:55 AM JST
# TCP port service multiplexer
* Wed 03 Dec 2014 12:41:58 AM JST
# message send protocol
* Wed 03 Dec 2014 12:41:59 AM JST
# SSH Remote Login Protocol
* Wed 03 Dec 2014 12:41:59 AM JST
# resource location
* Wed 03 Dec 2014 12:42:00 AM JST
# IEN 116
* Wed 03 Dec 2014 12:42:00 AM JST
# Login Host Protocol (TACACS)
* Wed 03 Dec 2014 12:42:00 AM JST
# Remote Mail Checking Protocol
* Wed 03 Dec 2014 12:42:01 AM JST
# Domain Name Server
* Wed 03 Dec 2014 12:42:01 AM JST
# deprecated
* Wed 03 Dec 2014 12:42:01 AM JST
# TACACS-Database Service
* Wed 03 Dec 2014 12:42:01 AM JST
# BOOTP server
* Wed 03 Dec 2014 12:42:01 AM JST
# BOOTP client
* Wed 03 Dec 2014 12:42:02 AM JST
# Internet Gopher
* Wed 03 Dec 2014 12:42:02 AM JST
# WorldWideWeb HTTP
* Wed 03 Dec 2014 12:42:02 AM JST
# HyperText Transfer Protocol
* Wed 03 Dec 2014 12:42:02 AM JST
# Kerberos v5
* Wed 03 Dec 2014 12:42:02 AM JST
# Kerberos v5
* Wed 03 Dec 2014 12:42:03 AM JST
# usually from sri-nic
* Wed 03 Dec 2014 12:42:03 AM JST
# part of ISODE
* Wed 03 Dec 2014 12:42:03 AM JST
# Digital Imag. & Comm. 300
* Wed 03 Dec 2014 12:42:03 AM JST
# also used by CSO name server
* Wed 03 Dec 2014 12:42:04 AM JST
# Remote Telnet
* Wed 03 Dec 2014 12:42:04 AM JST
# POP version 2
* Wed 03 Dec 2014 12:42:04 AM JST
# POP version 3
* Wed 03 Dec 2014 12:42:04 AM JST
# RPC 4.0 portmapper
* Wed 03 Dec 2014 12:42:04 AM JST
# USENET News Transfer Protocol
* Wed 03 Dec 2014 12:42:05 AM JST
# Network Time Protocol
* Wed 03 Dec 2014 12:42:05 AM JST
# PWDGEN service
* Wed 03 Dec 2014 12:42:05 AM JST
# Location Service
* Wed 03 Dec 2014 12:42:05 AM JST
# NETBIOS Name Service
* Wed 03 Dec 2014 12:42:05 AM JST
# NETBIOS Datagram Service
* Wed 03 Dec 2014 12:42:06 AM JST
# NETBIOS session service
* Wed 03 Dec 2014 12:42:06 AM JST
# Interim Mail Access P 2 and 4
* Wed 03 Dec 2014 12:42:06 AM JST
# Simple Net Mgmt Protocol
* Wed 03 Dec 2014 12:42:06 AM JST
# Traps for SNMP
* Wed 03 Dec 2014 12:42:06 AM JST
# ISO mgmt over IP (CMOT)
* Wed 03 Dec 2014 12:42:07 AM JST
# Mailer transport queue for Zmailer
* Wed 03 Dec 2014 12:42:07 AM JST
# X Display Mgr. Control Proto
* Wed 03 Dec 2014 12:42:07 AM JST
# NeXTStep window
* Wed 03 Dec 2014 12:42:07 AM JST
#  server
* Wed 03 Dec 2014 12:42:07 AM JST
# Border Gateway Protocol
* Wed 03 Dec 2014 12:42:08 AM JST
# Cliff Neuman's Prospero
* Wed 03 Dec 2014 12:42:08 AM JST
# Internet Relay Chat
* Wed 03 Dec 2014 12:42:08 AM JST
# SNMP Unix Multiplexer
* Wed 03 Dec 2014 12:42:08 AM JST
# AppleTalk routing
* Wed 03 Dec 2014 12:42:09 AM JST
# AppleTalk name binding
* Wed 03 Dec 2014 12:42:09 AM JST
# AppleTalk echo
* Wed 03 Dec 2014 12:42:09 AM JST
# AppleTalk zone information
* Wed 03 Dec 2014 12:42:09 AM JST
# Quick Mail Transfer Protocol
* Wed 03 Dec 2014 12:42:09 AM JST
# NISO Z39.50 database
* Wed 03 Dec 2014 12:42:09 AM JST
# IPX
* Wed 03 Dec 2014 12:42:10 AM JST
# Interactive Mail Access
* Wed 03 Dec 2014 12:42:10 AM JST
# Protocol v3
* Wed 03 Dec 2014 12:42:10 AM JST
# Perf Analysis Workbench
* Wed 03 Dec 2014 12:42:10 AM JST
# Zebra server
* Wed 03 Dec 2014 12:42:10 AM JST
# Fatmen Server
* Wed 03 Dec 2014 12:42:11 AM JST
# Coda portmapper
* Wed 03 Dec 2014 12:42:11 AM JST
# Coda authentication server
* Wed 03 Dec 2014 12:42:11 AM JST
# UNIX Listserv
* Wed 03 Dec 2014 12:42:11 AM JST
# Lightweight Directory Access Protocol
* Wed 03 Dec 2014 12:42:12 AM JST
# Interactive Mail Support Protocol
* Wed 03 Dec 2014 12:42:12 AM JST
# Server Location
* Wed 03 Dec 2014 12:42:12 AM JST
# http protocol over TLS/SSL
* Wed 03 Dec 2014 12:42:12 AM JST
# Simple Network Paging Protocol
* Wed 03 Dec 2014 12:42:12 AM JST
# Microsoft Naked CIFS
* Wed 03 Dec 2014 12:42:13 AM JST
# Simple Asynchronous File Transfer
* Wed 03 Dec 2014 12:42:13 AM JST
# IPsec - Internet Security Association
* Wed 03 Dec 2014 12:42:13 AM JST
#  and Key Management Protocol
* Wed 03 Dec 2014 12:42:13 AM JST
# Real Time Stream Control Protocol
* Wed 03 Dec 2014 12:42:14 AM JST
# Network Queuing system
* Wed 03 Dec 2014 12:42:14 AM JST
# npmp-local / DQS
* Wed 03 Dec 2014 12:42:14 AM JST
# npmp-gui / DQS
* Wed 03 Dec 2014 12:42:14 AM JST
# HMMP Indication / DQS
* Wed 03 Dec 2014 12:42:15 AM JST
# ASF Remote Management and Control Protocol
* Wed 03 Dec 2014 12:42:15 AM JST
# Internet Printing Protocol
* Wed 03 Dec 2014 12:42:15 AM JST
# no passwords used
* Wed 03 Dec 2014 12:42:15 AM JST
# line printer spooler
* Wed 03 Dec 2014 12:42:16 AM JST
# RIP
* Wed 03 Dec 2014 12:42:16 AM JST
# for emergency broadcasts
* Wed 03 Dec 2014 12:42:16 AM JST
# GNUstep distributed objects
* Wed 03 Dec 2014 12:42:16 AM JST
# uucp daemon
* Wed 03 Dec 2014 12:42:17 AM JST
# Kerberized `rlogin' (v5)
* Wed 03 Dec 2014 12:42:17 AM JST
# Kerberized `rsh' (v5)
* Wed 03 Dec 2014 12:42:17 AM JST
# AFP over TCP
* Wed 03 Dec 2014 12:42:17 AM JST
# Brunhoff remote filesystem
* Wed 03 Dec 2014 12:42:17 AM JST
# NNTP over SSL
* Wed 03 Dec 2014 12:42:18 AM JST
# Submission [RFC4409]
* Wed 03 Dec 2014 12:42:18 AM JST
# LDAP over SSL
* Wed 03 Dec 2014 12:42:18 AM JST
# tinc control port
* Wed 03 Dec 2014 12:42:18 AM JST
# Kerberos `kadmin' (v5)
* Wed 03 Dec 2014 12:42:19 AM JST
# Network dictionary
* Wed 03 Dec 2014 12:42:19 AM JST
# FTP over SSL (data)
* Wed 03 Dec 2014 12:42:19 AM JST
# Telnet over SSL
* Wed 03 Dec 2014 12:42:19 AM JST
# IMAP over SSL
* Wed 03 Dec 2014 12:42:19 AM JST
# IRC over SSL
* Wed 03 Dec 2014 12:42:19 AM JST
# POP-3 over SSL
* Wed 03 Dec 2014 12:42:19 AM JST
# socks proxy server
* Wed 03 Dec 2014 12:42:19 AM JST
# Java RMI Registry
* Wed 03 Dec 2014 12:42:19 AM JST
# Nessus vulnerability
* Wed 03 Dec 2014 12:42:19 AM JST
#  assessment scanner
* Wed 03 Dec 2014 12:42:19 AM JST
# Lotus Note
* Wed 03 Dec 2014 12:42:20 AM JST
# Microsoft SQL Server
* Wed 03 Dec 2014 12:42:20 AM JST
# Microsoft SQL Monitor
* Wed 03 Dec 2014 12:42:20 AM JST
# Prospero non-privileged
* Wed 03 Dec 2014 12:42:20 AM JST
# Radius Accounting
* Wed 03 Dec 2014 12:42:20 AM JST
# MSN Messenger
* Wed 03 Dec 2014 12:42:20 AM JST
# remstats unix-status server
* Wed 03 Dec 2014 12:42:20 AM JST
# remstats log server
* Wed 03 Dec 2014 12:42:20 AM JST
# remstats remoteping server
* Wed 03 Dec 2014 12:42:20 AM JST
# Cisco SCCP
* Wed 03 Dec 2014 12:42:20 AM JST
# Network File System
* Wed 03 Dec 2014 12:42:20 AM JST
# Network File System
* Wed 03 Dec 2014 12:42:20 AM JST
# RTCM SC-104 IANA 1/29/99
* Wed 03 Dec 2014 12:42:21 AM JST
# Grid Resource Information Server
* Wed 03 Dec 2014 12:42:21 AM JST
# CVS client/server operations
* Wed 03 Dec 2014 12:42:21 AM JST
# codacon port
* Wed 03 Dec 2014 12:42:21 AM JST
# Venus callback/wbc interface
* Wed 03 Dec 2014 12:42:21 AM JST
# tcp side effects
* Wed 03 Dec 2014 12:42:21 AM JST
# udp sftp side effect
* Wed 03 Dec 2014 12:42:21 AM JST
# not used
* Wed 03 Dec 2014 12:42:21 AM JST
# server port
* Wed 03 Dec 2014 12:42:21 AM JST
# tcp side effects
* Wed 03 Dec 2014 12:42:21 AM JST
# udp sftp side effect
* Wed 03 Dec 2014 12:42:21 AM JST
# MON traps
* Wed 03 Dec 2014 12:42:21 AM JST
# Dictionary server
* Wed 03 Dec 2014 12:42:22 AM JST
# InterBase server
* Wed 03 Dec 2014 12:42:22 AM JST
# Internet Cache Protocol
* Wed 03 Dec 2014 12:42:22 AM JST
# Network UPS Tools
* Wed 03 Dec 2014 12:42:22 AM JST
# distributed compiler
* Wed 03 Dec 2014 12:42:22 AM JST
# Digital Audio Access Protocol
* Wed 03 Dec 2014 12:42:23 AM JST
# Subversion protocol
* Wed 03 Dec 2014 12:42:23 AM JST
# UUCP over SSL
* Wed 03 Dec 2014 12:42:23 AM JST
# sysrq daemon
* Wed 03 Dec 2014 12:42:23 AM JST
# ManageSieve Protocol
* Wed 03 Dec 2014 12:42:23 AM JST
# Erlang Port Mapper Daemon
* Wed 03 Dec 2014 12:42:24 AM JST
# Remote Authenticated Command Service
* Wed 03 Dec 2014 12:42:24 AM JST
# F5 iQuery
* Wed 03 Dec 2014 12:42:24 AM JST
# Inter-Asterisk eXchange
* Wed 03 Dec 2014 12:42:24 AM JST
# monotone Netsync Protocol
* Wed 03 Dec 2014 12:42:24 AM JST
# RAdmin Port
* Wed 03 Dec 2014 12:42:25 AM JST
# Radio Free Ethernet
* Wed 03 Dec 2014 12:42:25 AM JST
# multimedia conference control tool (Yahoo IM)
* Wed 03 Dec 2014 12:42:25 AM JST
# Session Initiation Protocol
* Wed 03 Dec 2014 12:42:25 AM JST
# AIM
* Wed 03 Dec 2014 12:42:26 AM JST
# Jabber Client Connection
* Wed 03 Dec 2014 12:42:26 AM JST
# Jabber Server Connection
* Wed 03 Dec 2014 12:42:26 AM JST
# Multicast DNS
* Wed 03 Dec 2014 12:42:26 AM JST
# PostgreSQL Database
* Wed 03 Dec 2014 12:42:26 AM JST
# Freeciv gameplay
* Wed 03 Dec 2014 12:42:27 AM JST
# GGZ Gaming Zone
* Wed 03 Dec 2014 12:42:27 AM JST
# X Window System
* Wed 03 Dec 2014 12:42:27 AM JST
# gnutella
* Wed 03 Dec 2014 12:42:27 AM JST
# gnutella
* Wed 03 Dec 2014 12:42:27 AM JST
# Grid Engine Qmaster Service
* Wed 03 Dec 2014 12:42:28 AM JST
# Grid Engine Execution Service
* Wed 03 Dec 2014 12:42:28 AM JST
# MySQL Proxy
* Wed 03 Dec 2014 12:42:28 AM JST
# file server itself
* Wed 03 Dec 2014 12:42:28 AM JST
# callbacks to cache managers
* Wed 03 Dec 2014 12:42:28 AM JST
# users & groups database
* Wed 03 Dec 2014 12:42:29 AM JST
# volume location database
* Wed 03 Dec 2014 12:42:29 AM JST
# AFS/Kerberos authentication
* Wed 03 Dec 2014 12:42:29 AM JST
# volume managment server
* Wed 03 Dec 2014 12:42:29 AM JST
# error interpretation service
* Wed 03 Dec 2014 12:42:29 AM JST
# basic overseer process
* Wed 03 Dec 2014 12:42:30 AM JST
# server-to-server updater
* Wed 03 Dec 2014 12:42:30 AM JST
# remote cache manager service
* Wed 03 Dec 2014 12:42:30 AM JST
# X Font Service
* Wed 03 Dec 2014 12:42:30 AM JST
# WWW caching service
* Wed 03 Dec 2014 12:42:31 AM JST
# Bacula Director
* Wed 03 Dec 2014 12:42:31 AM JST
# Bacula File Daemon
* Wed 03 Dec 2014 12:42:31 AM JST
# Bacula Storage Daemon
* Wed 03 Dec 2014 12:42:31 AM JST
# Cross-platform Music Multiplexing System
* Wed 03 Dec 2014 12:42:31 AM JST
# Linux Network Block Device
* Wed 03 Dec 2014 12:42:32 AM JST
# Zabbix Agent
* Wed 03 Dec 2014 12:42:32 AM JST
# Zabbix Trapper
* Wed 03 Dec 2014 12:42:32 AM JST
# amanda backup services
* Wed 03 Dec 2014 12:42:32 AM JST
# OpenPGP HTTP Keyserver
* Wed 03 Dec 2014 12:42:32 AM JST
# VERITAS NetBackup
* Wed 03 Dec 2014 12:42:33 AM JST
# VERITAS NetBackup
* Wed 03 Dec 2014 12:42:33 AM JST
# BP Java MSVC Protocol
* Wed 03 Dec 2014 12:42:33 AM JST
# Veritas Network Utility
* Wed 03 Dec 2014 12:42:33 AM JST
# VERITAS NetBackup
* Wed 03 Dec 2014 12:42:34 AM JST
# VERITAS NetBackup
* Wed 03 Dec 2014 12:42:34 AM JST
# dCache Access Protocol
* Wed 03 Dec 2014 12:42:34 AM JST
# GSI dCache Access Protocol
* Wed 03 Dec 2014 12:42:35 AM JST
# wnn6
* Wed 03 Dec 2014 12:42:35 AM JST
# Routing Table Maintenance Protocol
* Wed 03 Dec 2014 12:42:35 AM JST
# Name Binding Protocol
* Wed 03 Dec 2014 12:42:35 AM JST
# AppleTalk Echo Protocol
* Wed 03 Dec 2014 12:42:35 AM JST
# Zone Information Protocol
* Wed 03 Dec 2014 12:42:36 AM JST
# Kerberos (server)
* Wed 03 Dec 2014 12:42:36 AM JST
# Kerberos authentication
* Wed 03 Dec 2014 12:42:36 AM JST
# Kerberos passwd server
* Wed 03 Dec 2014 12:42:36 AM JST
# Kerberos slave propagation
* Wed 03 Dec 2014 12:42:37 AM JST
# Kerberos registration
* Wed 03 Dec 2014 12:42:37 AM JST
# Conserver
* Wed 03 Dec 2014 12:42:37 AM JST
# swat
* Wed 03 Dec 2014 12:42:37 AM JST
# Pop with Kerberos
* Wed 03 Dec 2014 12:42:37 AM JST
# Kerberos de-multiplexor
* Wed 03 Dec 2014 12:42:38 AM JST
# Zephyr server
* Wed 03 Dec 2014 12:42:38 AM JST
# Zephyr serv-hm connection
* Wed 03 Dec 2014 12:42:38 AM JST
# Zephyr hostmanager
* Wed 03 Dec 2014 12:42:38 AM JST
# Kerberos encrypted rlogin
* Wed 03 Dec 2014 12:42:39 AM JST
# X over Kerberos
* Wed 03 Dec 2014 12:42:39 AM JST
# incremental propagation
* Wed 03 Dec 2014 12:42:39 AM JST
# SUP server
* Wed 03 Dec 2014 12:42:39 AM JST
# SUP debugging
* Wed 03 Dec 2014 12:42:40 AM JST
# LinuxConf
* Wed 03 Dec 2014 12:42:40 AM JST
# Eudora
* Wed 03 Dec 2014 12:42:40 AM JST
# SMTP over SSL
* Wed 03 Dec 2014 12:42:40 AM JST
# Moira database
* Wed 03 Dec 2014 12:42:41 AM JST
# Moira update protocol
* Wed 03 Dec 2014 12:42:41 AM JST
# Moira user registration
* Wed 03 Dec 2014 12:42:41 AM JST
# spamassassin daemon
* Wed 03 Dec 2014 12:42:41 AM JST
# online mirror
* Wed 03 Dec 2014 12:42:42 AM JST
# pmake customs server
* Wed 03 Dec 2014 12:42:42 AM JST
# skk jisho server port
* Wed 03 Dec 2014 12:42:42 AM JST
# predict -- satellite tracking
* Wed 03 Dec 2014 12:42:42 AM JST
# Gracilis Packeten remote config server
* Wed 03 Dec 2014 12:42:42 AM JST
# Wipl network monitor
* Wed 03 Dec 2014 12:42:43 AM JST
# french minitel
* Wed 03 Dec 2014 12:42:43 AM JST
# french minitel
* Wed 03 Dec 2014 12:42:43 AM JST
# GNATS
* Wed 03 Dec 2014 12:42:43 AM JST
# GNU Finger
* Wed 03 Dec 2014 12:42:44 AM JST
# frox: caching ftp proxy
* Wed 03 Dec 2014 12:42:44 AM JST
# ninstall service
* Wed 03 Dec 2014 12:42:44 AM JST
# zebra service
* Wed 03 Dec 2014 12:42:44 AM JST
# zebra vty
* Wed 03 Dec 2014 12:42:44 AM JST
# ripd vty (zebra)
* Wed 03 Dec 2014 12:42:45 AM JST
# ripngd vty (zebra)
* Wed 03 Dec 2014 12:42:45 AM JST
# ospfd vty (zebra)
* Wed 03 Dec 2014 12:42:45 AM JST
# bgpd vty (zebra)
* Wed 03 Dec 2014 12:42:45 AM JST
# ospf6d vty (zebra)
* Wed 03 Dec 2014 12:42:46 AM JST
# OSPF-API
* Wed 03 Dec 2014 12:42:46 AM JST
# ISISd vty (zebra)
* Wed 03 Dec 2014 12:42:46 AM JST
# Afbackup system
* Wed 03 Dec 2014 12:42:46 AM JST
# Afmbackup system
* Wed 03 Dec 2014 12:42:47 AM JST
# xtell server
* Wed 03 Dec 2014 12:42:47 AM JST
# FAX transmission service (old)
* Wed 03 Dec 2014 12:42:47 AM JST
# HylaFAX client-server protocol (new)
* Wed 03 Dec 2014 12:42:47 AM JST
# distmp3host daemon
* Wed 03 Dec 2014 12:42:47 AM JST
# Munin
* Wed 03 Dec 2014 12:42:47 AM JST
# ENBD client statd
* Wed 03 Dec 2014 12:42:47 AM JST
# ENBD server statd
* Wed 03 Dec 2014 12:42:47 AM JST
# PCR-1000 Daemon
* Wed 03 Dec 2014 12:42:47 AM JST
# noclogd with TCP (nocol)
* Wed 03 Dec 2014 12:42:47 AM JST
# noclogd with UDP (nocol)
* Wed 03 Dec 2014 12:42:47 AM JST
# hostmon uses TCP (nocol)
* Wed 03 Dec 2014 12:42:47 AM JST
# hostmon uses UDP (nocol)
* Wed 03 Dec 2014 12:42:48 AM JST
# RPlay audio service
* Wed 03 Dec 2014 12:42:48 AM JST
# Nagios Remote Plugin Executor
* Wed 03 Dec 2014 12:42:48 AM JST
# Nagios Agent - NSCA
* Wed 03 Dec 2014 12:42:48 AM JST
# MRT Routing Daemon
* Wed 03 Dec 2014 12:42:48 AM JST
# MRT Routing Simulator
* Wed 03 Dec 2014 12:42:48 AM JST
# cannaserver
* Wed 03 Dec 2014 12:42:48 AM JST
# SANE network scanner daemon
* Wed 03 Dec 2014 12:42:48 AM JST
# Internet Relay Chat
* Wed 03 Dec 2014 12:42:48 AM JST
# zope management by ftp
* Wed 03 Dec 2014 12:42:48 AM JST
# Transparent Proxy
* Wed 03 Dec 2014 12:42:48 AM JST
# OmniORB
* Wed 03 Dec 2014 12:42:48 AM JST
# Common lisp build daemon
* Wed 03 Dec 2014 12:42:48 AM JST
# network mandelbrot
* Wed 03 Dec 2014 12:42:48 AM JST
# Git Version Control System
* Wed 03 Dec 2014 12:42:49 AM JST
# zope server
* Wed 03 Dec 2014 12:42:49 AM JST
# amanda backup services (Kerberos)
* Wed 03 Dec 2014 12:42:49 AM JST
# amanda backup services
* Wed 03 Dec 2014 12:42:49 AM JST
# amanda backup services
* Wed 03 Dec 2014 12:42:49 AM JST
# Alamin SMS gateway
* Wed 03 Dec 2014 12:42:49 AM JST
# XPilot Contact Port
* Wed 03 Dec 2014 12:42:49 AM JST
# Cluster membership services daemon
* Wed 03 Dec 2014 12:42:49 AM JST
# SGI Group membership daemon
* Wed 03 Dec 2014 12:42:49 AM JST
# Cluster Admin daemon
* Wed 03 Dec 2014 12:42:49 AM JST
# isdn logging system
* Wed 03 Dec 2014 12:42:49 AM JST
# voice box system
* Wed 03 Dec 2014 12:42:49 AM JST
# binkp fidonet protocol
* Wed 03 Dec 2014 12:42:49 AM JST
# Address Search Protocol
* Wed 03 Dec 2014 12:42:50 AM JST
# cluster synchronization tool
* Wed 03 Dec 2014 12:42:50 AM JST
# Detachable IRC Proxy
* Wed 03 Dec 2014 12:42:50 AM JST
# fidonet EMSI over telnet
* Wed 03 Dec 2014 12:42:50 AM JST
# fidonet EMSI over TCP
* Wed 03 Dec 2014 12:44:43 AM JST
                               

* Wed 03 Dec 2014 12:44:43 AM JST
                               

* Wed 03 Dec 2014 12:44:43 AM JST
                             

* Wed 03 Dec 2014 12:44:44 AM JST
                             

* Wed 03 Dec 2014 12:44:44 AM JST


* Wed 03 Dec 2014 12:44:44 AM JST
                                 

* Wed 03 Dec 2014 12:44:44 AM JST
                               

* Wed 03 Dec 2014 12:44:44 AM JST


* Wed 03 Dec 2014 12:44:44 AM JST
                               

* Wed 03 Dec 2014 12:44:44 AM JST


* Wed 03 Dec 2014 12:44:44 AM JST
                             

* Wed 03 Dec 2014 12:44:44 AM JST
                             

* Wed 03 Dec 2014 12:44:44 AM JST
                             

* Wed 03 Dec 2014 12:44:44 AM JST


* Wed 03 Dec 2014 12:44:44 AM JST
                             

* Wed 03 Dec 2014 12:44:45 AM JST


* Wed 03 Dec 2014 12:44:45 AM JST
                             

* Wed 03 Dec 2014 12:44:45 AM JST


* Wed 03 Dec 2014 12:44:45 AM JST
                               

* Wed 03 Dec 2014 12:44:45 AM JST
                             

* Wed 03 Dec 2014 12:44:45 AM JST
                             

* Wed 03 Dec 2014 12:44:45 AM JST


* Wed 03 Dec 2014 12:44:45 AM JST
                             

* Wed 03 Dec 2014 12:44:45 AM JST


* Wed 03 Dec 2014 12:44:45 AM JST
                                

* Wed 03 Dec 2014 12:44:45 AM JST
                                  

* Wed 03 Dec 2014 12:44:45 AM JST
	mandelbrot                
* Wed 03 Dec 2014 12:44:45 AM JST


* Wed 03 Dec 2014 12:44:45 AM JST
/tcpmandelspawn              	9359/udp
* Wed 03 Dec 2014 12:44:45 AM JST


* Wed 03 Dec 2014 12:44:46 AM JST
                              

* Wed 03 Dec 2014 12:44:46 AM JST
                              

* Wed 03 Dec 2014 12:44:46 AM JST
                              

* Wed 03 Dec 2014 12:44:46 AM JST
                                

* Wed 03 Dec 2014 12:44:46 AM JST
	sane saned                  
* Wed 03 Dec 2014 12:44:46 AM JST
                                

* Wed 03 Dec 2014 12:44:46 AM JST
                              

* Wed 03 Dec 2014 12:44:46 AM JST
                                

* Wed 03 Dec 2014 12:44:46 AM JST
                                

* Wed 03 Dec 2014 12:44:46 AM JST
                                

* Wed 03 Dec 2014 12:44:46 AM JST
                                

* Wed 03 Dec 2014 12:44:46 AM JST
                              

* Wed 03 Dec 2014 12:44:46 AM JST
                              

* Wed 03 Dec 2014 12:44:46 AM JST
                              

* Wed 03 Dec 2014 12:44:46 AM JST
                              

* Wed 03 Dec 2014 12:44:47 AM JST
                                

* Wed 03 Dec 2014 12:44:47 AM JST
                            

* Wed 03 Dec 2014 12:44:47 AM JST
                            

* Wed 03 Dec 2014 12:44:47 AM JST
	lrrd                          
* Wed 03 Dec 2014 12:44:47 AM JST
                              

* Wed 03 Dec 2014 12:44:47 AM JST
                              

* Wed 03 Dec 2014 12:44:47 AM JST
                                  

* Wed 03 Dec 2014 12:44:47 AM JST
                                

* Wed 03 Dec 2014 12:44:47 AM JST


* Wed 03 Dec 2014 12:44:47 AM JST
                              

* Wed 03 Dec 2014 12:44:47 AM JST


* Wed 03 Dec 2014 12:44:47 AM JST
                              

* Wed 03 Dec 2014 12:44:47 AM JST
                                

* Wed 03 Dec 2014 12:44:47 AM JST
                              

* Wed 03 Dec 2014 12:44:47 AM JST
                              

* Wed 03 Dec 2014 12:44:48 AM JST
                                

* Wed 03 Dec 2014 12:44:48 AM JST
                                

* Wed 03 Dec 2014 12:44:48 AM JST
                              

* Wed 03 Dec 2014 12:44:48 AM JST
                                

* Wed 03 Dec 2014 12:44:48 AM JST
                                

* Wed 03 Dec 2014 12:44:48 AM JST
                              

* Wed 03 Dec 2014 12:44:48 AM JST


* Wed 03 Dec 2014 12:44:48 AM JST
                              

* Wed 03 Dec 2014 12:44:48 AM JST
                                

* Wed 03 Dec 2014 12:44:48 AM JST
                              

* Wed 03 Dec 2014 12:44:48 AM JST
                              

* Wed 03 Dec 2014 12:44:48 AM JST
                                

* Wed 03 Dec 2014 12:44:48 AM JST
                                

* Wed 03 Dec 2014 12:44:48 AM JST
                                

* Wed 03 Dec 2014 12:44:48 AM JST
                              

* Wed 03 Dec 2014 12:44:48 AM JST
                              

* Wed 03 Dec 2014 12:44:49 AM JST
                              

* Wed 03 Dec 2014 12:44:49 AM JST


* Wed 03 Dec 2014 12:44:49 AM JST
                              

* Wed 03 Dec 2014 12:44:49 AM JST
		omirrd
* Wed 03 Dec 2014 12:44:49 AM JST
		omirrd                        
* Wed 03 Dec 2014 12:44:49 AM JST
                                 

* Wed 03 Dec 2014 12:44:49 AM JST
		moira_ureg                
* Wed 03 Dec 2014 12:44:49 AM JST
		moira_update            
* Wed 03 Dec 2014 12:44:49 AM JST
		moira_db                    
* Wed 03 Dec 2014 12:44:49 AM JST
		smtps                         
* Wed 03 Dec 2014 12:44:49 AM JST


* Wed 03 Dec 2014 12:44:49 AM JST
                               

* Wed 03 Dec 2014 12:44:49 AM JST
                                

* Wed 03 Dec 2014 12:44:49 AM JST
                            

* Wed 03 Dec 2014 12:44:49 AM JST
                             

* Wed 03 Dec 2014 12:44:50 AM JST
                                

* Wed 03 Dec 2014 12:44:50 AM JST
                                  

* Wed 03 Dec 2014 12:44:50 AM JST
                              

* Wed 03 Dec 2014 12:44:50 AM JST
                              

* Wed 03 Dec 2014 12:44:50 AM JST
                            

* Wed 03 Dec 2014 12:44:50 AM JST
                            

* Wed 03 Dec 2014 12:44:50 AM JST
                                

* Wed 03 Dec 2014 12:44:50 AM JST
                                

* Wed 03 Dec 2014 12:44:50 AM JST
                                 

* Wed 03 Dec 2014 12:44:50 AM JST
                               

* Wed 03 Dec 2014 12:44:50 AM JST
		kreg                        
* Wed 03 Dec 2014 12:44:50 AM JST
		krb_prop krb5_prop hprop    
* Wed 03 Dec 2014 12:44:50 AM JST
		passwd_server           
* Wed 03 Dec 2014 12:44:50 AM JST


* Wed 03 Dec 2014 12:44:51 AM JST
		kerberos_master       
* Wed 03 Dec 2014 12:44:51 AM JST
		kerberos-iv kdc
* Wed 03 Dec 2014 12:44:51 AM JST
		kerberos-iv kdc             
* Wed 03 Dec 2014 12:44:51 AM JST
                                     

* Wed 03 Dec 2014 12:44:51 AM JST
                                   

* Wed 03 Dec 2014 12:44:51 AM JST
                                     

* Wed 03 Dec 2014 12:44:51 AM JST
                                   

* Wed 03 Dec 2014 12:44:51 AM JST


* Wed 03 Dec 2014 12:44:51 AM JST
                               

* Wed 03 Dec 2014 12:44:51 AM JST
                             

* Wed 03 Dec 2014 12:44:51 AM JST
                               

* Wed 03 Dec 2014 12:44:51 AM JST


* Wed 03 Dec 2014 12:44:51 AM JST
                             

* Wed 03 Dec 2014 12:44:51 AM JST


* Wed 03 Dec 2014 12:44:51 AM JST
                               

* Wed 03 Dec 2014 12:44:52 AM JST


* Wed 03 Dec 2014 12:44:52 AM JST
                               

* Wed 03 Dec 2014 12:44:52 AM JST


* Wed 03 Dec 2014 12:44:52 AM JST
                           

* Wed 03 Dec 2014 12:44:52 AM JST


* Wed 03 Dec 2014 12:44:52 AM JST
                               

* Wed 03 Dec 2014 12:44:52 AM JST


* Wed 03 Dec 2014 12:44:52 AM JST
                               

* Wed 03 Dec 2014 12:44:52 AM JST


* Wed 03 Dec 2014 12:44:52 AM JST
                                 

* Wed 03 Dec 2014 12:44:52 AM JST


* Wed 03 Dec 2014 12:44:52 AM JST
                             

* Wed 03 Dec 2014 12:44:52 AM JST


* Wed 03 Dec 2014 12:44:52 AM JST
                       

* Wed 03 Dec 2014 12:44:52 AM JST


* Wed 03 Dec 2014 12:44:53 AM JST
                         

* Wed 03 Dec 2014 12:44:53 AM JST
                                 

* Wed 03 Dec 2014 12:44:53 AM JST


* Wed 03 Dec 2014 12:44:53 AM JST
                                

* Wed 03 Dec 2014 12:44:53 AM JST


* Wed 03 Dec 2014 12:44:53 AM JST
                              

* Wed 03 Dec 2014 12:44:53 AM JST


* Wed 03 Dec 2014 12:44:53 AM JST
                              

* Wed 03 Dec 2014 12:44:53 AM JST


* Wed 03 Dec 2014 12:44:53 AM JST
                            

* Wed 03 Dec 2014 12:44:53 AM JST


* Wed 03 Dec 2014 12:44:53 AM JST
	webcache                    
* Wed 03 Dec 2014 12:44:53 AM JST
	xfs
* Wed 03 Dec 2014 12:44:53 AM JST
	xfs                     
* Wed 03 Dec 2014 12:44:53 AM JST


* Wed 03 Dec 2014 12:44:54 AM JST
                            

* Wed 03 Dec 2014 12:44:54 AM JST


* Wed 03 Dec 2014 12:44:54 AM JST
                            

* Wed 03 Dec 2014 12:44:54 AM JST


* Wed 03 Dec 2014 12:44:54 AM JST
                              

* Wed 03 Dec 2014 12:44:54 AM JST


* Wed 03 Dec 2014 12:44:54 AM JST
                            

* Wed 03 Dec 2014 12:44:54 AM JST


* Wed 03 Dec 2014 12:44:54 AM JST
                            

* Wed 03 Dec 2014 12:44:54 AM JST


* Wed 03 Dec 2014 12:44:54 AM JST
                          

* Wed 03 Dec 2014 12:44:54 AM JST


* Wed 03 Dec 2014 12:44:54 AM JST
                          

* Wed 03 Dec 2014 12:44:54 AM JST


* Wed 03 Dec 2014 12:44:55 AM JST
                          

* Wed 03 Dec 2014 12:44:55 AM JST


* Wed 03 Dec 2014 12:44:55 AM JST
                          

* Wed 03 Dec 2014 12:44:55 AM JST
-callback            	7001/tcpafs3-callback            	7001/udpafs3-prserver            	7002/tcpafs3-prserver            	7002/udpafs3-vlserver            	7003/tcpafs3-vlserver            	7003/udpafs3-kaserver            	7004/tcpafs3-kaserver            	7004/udpafs3-volser              	7005/tcpafs3-volser              	7005/udpafs3-errors              	7006/tcpafs3-errors              	7006/udpafs3-bos                 	7007/tcpafs3-bos                 	7007/udpafs3-update              	7008/tcpafs3-update              	7008/udpafs3-rmtsys              	7009/tcpafs3-rmtsys              	7009/udpfont-service             	7100/tcp
* Wed 03 Dec 2014 12:44:55 AM JST
-fileserver 7000/udp 	bbs
* Wed 03 Dec 2014 12:44:55 AM JST


* Wed 03 Dec 2014 12:44:55 AM JST
                            

* Wed 03 Dec 2014 12:44:55 AM JST
	sge_execd
* Wed 03 Dec 2014 12:44:55 AM JST
	sge_execd                   
* Wed 03 Dec 2014 12:44:55 AM JST
	sge_qmaster
* Wed 03 Dec 2014 12:44:55 AM JST
	sge_qmaster               
* Wed 03 Dec 2014 12:44:55 AM JST


* Wed 03 Dec 2014 12:44:55 AM JST
                          

* Wed 03 Dec 2014 12:44:55 AM JST


* Wed 03 Dec 2014 12:44:56 AM JST
                          

* Wed 03 Dec 2014 12:44:56 AM JST


* Wed 03 Dec 2014 12:44:56 AM JST


* Wed 03 Dec 2014 12:44:56 AM JST


* Wed 03 Dec 2014 12:44:56 AM JST


* Wed 03 Dec 2014 12:44:56 AM JST


* Wed 03 Dec 2014 12:44:56 AM JST


* Wed 03 Dec 2014 12:44:56 AM JST


* Wed 03 Dec 2014 12:44:56 AM JST


* Wed 03 Dec 2014 12:44:56 AM JST


* Wed 03 Dec 2014 12:44:56 AM JST


* Wed 03 Dec 2014 12:44:56 AM JST


* Wed 03 Dec 2014 12:44:56 AM JST


* Wed 03 Dec 2014 12:44:56 AM JST


* Wed 03 Dec 2014 12:44:56 AM JST


* Wed 03 Dec 2014 12:44:57 AM JST
	x11-0
* Wed 03 Dec 2014 12:44:57 AM JST
	x11-0                           
* Wed 03 Dec 2014 12:44:57 AM JST


* Wed 03 Dec 2014 12:44:57 AM JST
                                  

* Wed 03 Dec 2014 12:44:57 AM JST


* Wed 03 Dec 2014 12:44:57 AM JST


* Wed 03 Dec 2014 12:44:57 AM JST


* Wed 03 Dec 2014 12:46:09 AM JST
                               

* Wed 03 Dec 2014 12:46:09 AM JST
                               

* Wed 03 Dec 2014 12:46:09 AM JST
                             

* Wed 03 Dec 2014 12:46:09 AM JST
                             

* Wed 03 Dec 2014 12:46:09 AM JST


* Wed 03 Dec 2014 12:46:09 AM JST
                                 

* Wed 03 Dec 2014 12:46:09 AM JST
                               

* Wed 03 Dec 2014 12:46:09 AM JST


* Wed 03 Dec 2014 12:46:10 AM JST
                               

* Wed 03 Dec 2014 12:46:10 AM JST


* Wed 03 Dec 2014 12:46:10 AM JST
                             

* Wed 03 Dec 2014 12:46:10 AM JST
                             

* Wed 03 Dec 2014 12:46:10 AM JST
                             

* Wed 03 Dec 2014 12:46:10 AM JST


* Wed 03 Dec 2014 12:46:10 AM JST
                             

* Wed 03 Dec 2014 12:46:10 AM JST


* Wed 03 Dec 2014 12:46:10 AM JST
                             

* Wed 03 Dec 2014 12:46:10 AM JST


* Wed 03 Dec 2014 12:46:10 AM JST
                               

* Wed 03 Dec 2014 12:46:10 AM JST
                             

* Wed 03 Dec 2014 12:46:10 AM JST
                             

* Wed 03 Dec 2014 12:46:10 AM JST


* Wed 03 Dec 2014 12:46:10 AM JST
                             

* Wed 03 Dec 2014 12:46:11 AM JST


* Wed 03 Dec 2014 12:46:11 AM JST
                                

* Wed 03 Dec 2014 12:46:11 AM JST
                                  

* Wed 03 Dec 2014 12:46:11 AM JST
	mandelbrot                
* Wed 03 Dec 2014 12:46:11 AM JST


* Wed 03 Dec 2014 12:46:11 AM JST
                       

* Wed 03 Dec 2014 12:46:11 AM JST


* Wed 03 Dec 2014 12:46:11 AM JST
                              

* Wed 03 Dec 2014 12:46:11 AM JST
                              

* Wed 03 Dec 2014 12:46:11 AM JST
                              

* Wed 03 Dec 2014 12:46:11 AM JST
                                

* Wed 03 Dec 2014 12:46:11 AM JST
	sane saned                  
* Wed 03 Dec 2014 12:46:11 AM JST
                                

* Wed 03 Dec 2014 12:46:11 AM JST
                              

* Wed 03 Dec 2014 12:46:11 AM JST
                                

* Wed 03 Dec 2014 12:46:12 AM JST
                                

* Wed 03 Dec 2014 12:46:12 AM JST
                                

* Wed 03 Dec 2014 12:46:12 AM JST
                                

* Wed 03 Dec 2014 12:46:12 AM JST
                              

* Wed 03 Dec 2014 12:46:12 AM JST
                              

* Wed 03 Dec 2014 12:46:12 AM JST
                              

* Wed 03 Dec 2014 12:46:12 AM JST
                              

* Wed 03 Dec 2014 12:46:12 AM JST
                                

* Wed 03 Dec 2014 12:46:12 AM JST
                            

* Wed 03 Dec 2014 12:46:12 AM JST
                            

* Wed 03 Dec 2014 12:46:12 AM JST
	lrrd                          
* Wed 03 Dec 2014 12:46:12 AM JST
                              

* Wed 03 Dec 2014 12:46:12 AM JST
                              

* Wed 03 Dec 2014 12:46:12 AM JST
                                  

* Wed 03 Dec 2014 12:46:12 AM JST
                                

* Wed 03 Dec 2014 12:46:13 AM JST


* Wed 03 Dec 2014 12:46:13 AM JST
                              

* Wed 03 Dec 2014 12:46:13 AM JST


* Wed 03 Dec 2014 12:46:13 AM JST
                              

* Wed 03 Dec 2014 12:46:13 AM JST
                                

* Wed 03 Dec 2014 12:46:13 AM JST
                              

* Wed 03 Dec 2014 12:46:13 AM JST
                              

* Wed 03 Dec 2014 12:46:13 AM JST
                                

* Wed 03 Dec 2014 12:46:13 AM JST
                                

* Wed 03 Dec 2014 12:46:13 AM JST
                              

* Wed 03 Dec 2014 12:46:13 AM JST
                                

* Wed 03 Dec 2014 12:46:13 AM JST
                                

* Wed 03 Dec 2014 12:46:13 AM JST
                              

* Wed 03 Dec 2014 12:46:13 AM JST


* Wed 03 Dec 2014 12:46:14 AM JST
                              

* Wed 03 Dec 2014 12:46:14 AM JST
                                

* Wed 03 Dec 2014 12:46:14 AM JST
                              

* Wed 03 Dec 2014 12:46:14 AM JST
                              

* Wed 03 Dec 2014 12:46:14 AM JST
                                

* Wed 03 Dec 2014 12:46:14 AM JST
                                

* Wed 03 Dec 2014 12:46:14 AM JST
                                

* Wed 03 Dec 2014 12:46:14 AM JST
                              

* Wed 03 Dec 2014 12:46:14 AM JST
                              

* Wed 03 Dec 2014 12:46:14 AM JST
                              

* Wed 03 Dec 2014 12:46:14 AM JST


* Wed 03 Dec 2014 12:46:14 AM JST
                              

* Wed 03 Dec 2014 12:46:14 AM JST
		omirrd
* Wed 03 Dec 2014 12:46:14 AM JST
		omirrd                        
* Wed 03 Dec 2014 12:46:14 AM JST
                                 

* Wed 03 Dec 2014 12:46:15 AM JST
		moira_ureg                
* Wed 03 Dec 2014 12:46:15 AM JST
		moira_update            
* Wed 03 Dec 2014 12:46:15 AM JST
		moira_db                    
* Wed 03 Dec 2014 12:46:15 AM JST
		smtps                         
* Wed 03 Dec 2014 12:46:15 AM JST


* Wed 03 Dec 2014 12:46:15 AM JST
                               

* Wed 03 Dec 2014 12:46:15 AM JST
                                

* Wed 03 Dec 2014 12:46:15 AM JST
                            

* Wed 03 Dec 2014 12:46:15 AM JST
                             

* Wed 03 Dec 2014 12:46:15 AM JST
                                

* Wed 03 Dec 2014 12:46:15 AM JST
                                  

* Wed 03 Dec 2014 12:46:16 AM JST
                              

* Wed 03 Dec 2014 12:46:16 AM JST
                              

* Wed 03 Dec 2014 12:46:16 AM JST
                            

* Wed 03 Dec 2014 12:46:16 AM JST
                            

* Wed 03 Dec 2014 12:46:16 AM JST
                                

* Wed 03 Dec 2014 12:46:16 AM JST
                                

* Wed 03 Dec 2014 12:46:16 AM JST
                                 

* Wed 03 Dec 2014 12:46:16 AM JST
                               

* Wed 03 Dec 2014 12:46:16 AM JST
		kreg                        
* Wed 03 Dec 2014 12:46:16 AM JST
		krb_prop krb5_prop hprop    
* Wed 03 Dec 2014 12:46:16 AM JST
		passwd_server           
* Wed 03 Dec 2014 12:46:16 AM JST


* Wed 03 Dec 2014 12:46:16 AM JST
		kerberos_master       
* Wed 03 Dec 2014 12:46:16 AM JST
		kerberos-iv kdc
* Wed 03 Dec 2014 12:46:16 AM JST
		kerberos-iv kdc             
* Wed 03 Dec 2014 12:46:17 AM JST
                                     

* Wed 03 Dec 2014 12:46:17 AM JST
                                   

* Wed 03 Dec 2014 12:46:17 AM JST
                                     

* Wed 03 Dec 2014 12:46:17 AM JST
                                   

* Wed 03 Dec 2014 12:46:17 AM JST


* Wed 03 Dec 2014 12:46:17 AM JST
                               

* Wed 03 Dec 2014 12:46:17 AM JST
                             

* Wed 03 Dec 2014 12:46:17 AM JST
                               

* Wed 03 Dec 2014 12:46:17 AM JST


* Wed 03 Dec 2014 12:46:17 AM JST
                             

* Wed 03 Dec 2014 12:46:17 AM JST


* Wed 03 Dec 2014 12:46:17 AM JST
                               

* Wed 03 Dec 2014 12:46:17 AM JST


* Wed 03 Dec 2014 12:46:17 AM JST
                               

* Wed 03 Dec 2014 12:46:17 AM JST


* Wed 03 Dec 2014 12:46:18 AM JST
                           

* Wed 03 Dec 2014 12:46:18 AM JST


* Wed 03 Dec 2014 12:46:18 AM JST
                               

* Wed 03 Dec 2014 12:46:18 AM JST


* Wed 03 Dec 2014 12:46:18 AM JST
                               

* Wed 03 Dec 2014 12:46:18 AM JST


* Wed 03 Dec 2014 12:46:18 AM JST
                                 

* Wed 03 Dec 2014 12:46:18 AM JST


* Wed 03 Dec 2014 12:46:18 AM JST
                             

* Wed 03 Dec 2014 12:46:18 AM JST


* Wed 03 Dec 2014 12:46:18 AM JST
                       

* Wed 03 Dec 2014 12:46:18 AM JST


* Wed 03 Dec 2014 12:46:18 AM JST
                         

* Wed 03 Dec 2014 12:46:18 AM JST
                                 

* Wed 03 Dec 2014 12:46:19 AM JST


* Wed 03 Dec 2014 12:46:19 AM JST
                                

* Wed 03 Dec 2014 12:46:19 AM JST


* Wed 03 Dec 2014 12:46:19 AM JST
                              

* Wed 03 Dec 2014 12:46:19 AM JST


* Wed 03 Dec 2014 12:46:19 AM JST
                              

* Wed 03 Dec 2014 12:46:19 AM JST


* Wed 03 Dec 2014 12:46:19 AM JST
                            

* Wed 03 Dec 2014 12:46:19 AM JST


* Wed 03 Dec 2014 12:46:19 AM JST
	webcache                    
* Wed 03 Dec 2014 12:46:19 AM JST
	xfs
* Wed 03 Dec 2014 12:46:19 AM JST
	xfs                     
* Wed 03 Dec 2014 12:46:19 AM JST


* Wed 03 Dec 2014 12:46:19 AM JST
                            

* Wed 03 Dec 2014 12:46:19 AM JST


* Wed 03 Dec 2014 12:46:20 AM JST
                            

* Wed 03 Dec 2014 12:46:20 AM JST


* Wed 03 Dec 2014 12:46:20 AM JST
                              

* Wed 03 Dec 2014 12:46:20 AM JST


* Wed 03 Dec 2014 12:46:20 AM JST
                            

* Wed 03 Dec 2014 12:46:20 AM JST


* Wed 03 Dec 2014 12:46:20 AM JST
                            

* Wed 03 Dec 2014 12:46:20 AM JST


* Wed 03 Dec 2014 12:46:20 AM JST
                          

* Wed 03 Dec 2014 12:46:20 AM JST


* Wed 03 Dec 2014 12:46:20 AM JST
                          

* Wed 03 Dec 2014 12:46:20 AM JST


* Wed 03 Dec 2014 12:46:20 AM JST
                          

* Wed 03 Dec 2014 12:46:20 AM JST


* Wed 03 Dec 2014 12:46:20 AM JST
                          

* Wed 03 Dec 2014 12:46:21 AM JST
 	bbs
* Wed 03 Dec 2014 12:46:21 AM JST
 	bbs                   
* Wed 03 Dec 2014 12:46:21 AM JST


* Wed 03 Dec 2014 12:46:21 AM JST
                            

* Wed 03 Dec 2014 12:46:21 AM JST
	sge_execd
* Wed 03 Dec 2014 12:46:21 AM JST
	sge_execd                   
* Wed 03 Dec 2014 12:46:21 AM JST
	sge_qmaster
* Wed 03 Dec 2014 12:46:21 AM JST
	sge_qmaster               
* Wed 03 Dec 2014 12:46:21 AM JST


* Wed 03 Dec 2014 12:46:21 AM JST
                          

* Wed 03 Dec 2014 12:46:21 AM JST


* Wed 03 Dec 2014 12:46:21 AM JST
                          

* Wed 03 Dec 2014 12:46:21 AM JST


* Wed 03 Dec 2014 12:46:21 AM JST


* Wed 03 Dec 2014 12:46:21 AM JST


* Wed 03 Dec 2014 12:46:22 AM JST


* Wed 03 Dec 2014 12:46:22 AM JST


* Wed 03 Dec 2014 12:46:22 AM JST


* Wed 03 Dec 2014 12:46:22 AM JST


* Wed 03 Dec 2014 12:46:22 AM JST


* Wed 03 Dec 2014 12:46:22 AM JST


* Wed 03 Dec 2014 12:46:22 AM JST


* Wed 03 Dec 2014 12:46:22 AM JST


* Wed 03 Dec 2014 12:46:22 AM JST


* Wed 03 Dec 2014 12:46:22 AM JST


* Wed 03 Dec 2014 12:46:22 AM JST


* Wed 03 Dec 2014 12:46:22 AM JST
	x11-0
* Wed 03 Dec 2014 12:46:22 AM JST
	x11-0                           
* Wed 03 Dec 2014 12:46:22 AM JST


* Wed 03 Dec 2014 12:46:22 AM JST
                                  

* Wed 03 Dec 2014 12:46:23 AM JST


* Wed 03 Dec 2014 12:46:23 AM JST


* Wed 03 Dec 2014 12:46:23 AM JST


* Wed 03 Dec 2014 12:46:23 AM JST


* Wed 03 Dec 2014 12:46:23 AM JST
	rptp                        
* Wed 03 Dec 2014 12:46:23 AM JST
	postgres
* Wed 03 Dec 2014 12:46:23 AM JST
	postgres                  
* Wed 03 Dec 2014 12:46:23 AM JST


* Wed 03 Dec 2014 12:46:23 AM JST
                                

* Wed 03 Dec 2014 12:46:23 AM JST


* Wed 03 Dec 2014 12:46:23 AM JST


* Wed 03 Dec 2014 12:46:23 AM JST
	jabber-server
* Wed 03 Dec 2014 12:46:23 AM JST
	jabber-server             
* Wed 03 Dec 2014 12:46:24 AM JST
	jabber-client
* Wed 03 Dec 2014 12:46:24 AM JST
	jabber-client             
* Wed 03 Dec 2014 12:46:24 AM JST


* Wed 03 Dec 2014 12:46:24 AM JST
                                  

* Wed 03 Dec 2014 12:46:24 AM JST


* Wed 03 Dec 2014 12:46:24 AM JST


* Wed 03 Dec 2014 12:46:24 AM JST


* Wed 03 Dec 2014 12:46:24 AM JST
                                  

* Wed 03 Dec 2014 12:46:24 AM JST


* Wed 03 Dec 2014 12:46:24 AM JST
                                

* Wed 03 Dec 2014 12:46:24 AM JST


* Wed 03 Dec 2014 12:46:24 AM JST
                                  

* Wed 03 Dec 2014 12:46:24 AM JST


* Wed 03 Dec 2014 12:46:24 AM JST
                            

* Wed 03 Dec 2014 12:46:24 AM JST


* Wed 03 Dec 2014 12:46:25 AM JST
                                  

* Wed 03 Dec 2014 12:46:25 AM JST


* Wed 03 Dec 2014 12:46:25 AM JST
                                  

* Wed 03 Dec 2014 12:46:25 AM JST


* Wed 03 Dec 2014 12:46:25 AM JST
                              

* Wed 03 Dec 2014 12:46:25 AM JST


* Wed 03 Dec 2014 12:46:25 AM JST
                              

* Wed 03 Dec 2014 12:46:25 AM JST


* Wed 03 Dec 2014 12:46:25 AM JST
                                

* Wed 03 Dec 2014 12:46:25 AM JST
                                

* Wed 03 Dec 2014 12:46:25 AM JST


* Wed 03 Dec 2014 12:46:25 AM JST
                              

* Wed 03 Dec 2014 12:46:25 AM JST


* Wed 03 Dec 2014 12:46:25 AM JST
                                

* Wed 03 Dec 2014 12:46:25 AM JST
	subversion
* Wed 03 Dec 2014 12:46:26 AM JST
	subversion                      
* Wed 03 Dec 2014 12:46:26 AM JST


* Wed 03 Dec 2014 12:46:26 AM JST
                                

* Wed 03 Dec 2014 12:46:26 AM JST


* Wed 03 Dec 2014 12:46:26 AM JST
                              

* Wed 03 Dec 2014 12:46:26 AM JST


* Wed 03 Dec 2014 12:46:26 AM JST
                                  

* Wed 03 Dec 2014 12:46:26 AM JST


* Wed 03 Dec 2014 12:46:26 AM JST


* Wed 03 Dec 2014 12:46:26 AM JST


* Wed 03 Dec 2014 12:46:26 AM JST
	icp
* Wed 03 Dec 2014 12:46:26 AM JST
	icp                           
* Wed 03 Dec 2014 12:46:26 AM JST
	gds_db
* Wed 03 Dec 2014 12:46:27 AM JST
	gds_db                      
* Wed 03 Dec 2014 12:46:27 AM JST


* Wed 03 Dec 2014 12:46:27 AM JST


* Wed 03 Dec 2014 12:46:27 AM JST


* Wed 03 Dec 2014 12:46:27 AM JST


* Wed 03 Dec 2014 12:46:27 AM JST


* Wed 03 Dec 2014 12:46:27 AM JST


* Wed 03 Dec 2014 12:46:27 AM JST


* Wed 03 Dec 2014 12:46:27 AM JST
                                

* Wed 03 Dec 2014 12:46:27 AM JST


* Wed 03 Dec 2014 12:46:27 AM JST
                                  

* Wed 03 Dec 2014 12:46:27 AM JST
                            

* Wed 03 Dec 2014 12:46:27 AM JST
                            

* Wed 03 Dec 2014 12:46:27 AM JST
                              

* Wed 03 Dec 2014 12:46:27 AM JST
                              

* Wed 03 Dec 2014 12:46:28 AM JST
                              

* Wed 03 Dec 2014 12:46:28 AM JST
                              

* Wed 03 Dec 2014 12:46:28 AM JST
                                

* Wed 03 Dec 2014 12:46:28 AM JST
                                

* Wed 03 Dec 2014 12:46:28 AM JST


* Wed 03 Dec 2014 12:46:28 AM JST
                            

* Wed 03 Dec 2014 12:46:28 AM JST


* Wed 03 Dec 2014 12:46:28 AM JST
                                

* Wed 03 Dec 2014 12:46:28 AM JST


* Wed 03 Dec 2014 12:46:28 AM JST


* Wed 03 Dec 2014 12:46:29 AM JST


* Wed 03 Dec 2014 12:46:29 AM JST
                            

* Wed 03 Dec 2014 12:46:29 AM JST


* Wed 03 Dec 2014 12:46:29 AM JST


* Wed 03 Dec 2014 12:46:29 AM JST
                                  

* Wed 03 Dec 2014 12:46:29 AM JST
                                  

* Wed 03 Dec 2014 12:46:29 AM JST
	pipe_server
* Wed 03 Dec 2014 12:46:29 AM JST
	ndtp
* Wed 03 Dec 2014 12:46:29 AM JST


* Wed 03 Dec 2014 12:46:29 AM JST
                            

* Wed 03 Dec 2014 12:46:29 AM JST
                            

* Wed 03 Dec 2014 12:46:29 AM JST
                            

* Wed 03 Dec 2014 12:46:29 AM JST
                            

* Wed 03 Dec 2014 12:46:29 AM JST


* Wed 03 Dec 2014 12:46:29 AM JST
                                

* Wed 03 Dec 2014 12:46:29 AM JST
	radacct
* Wed 03 Dec 2014 12:46:30 AM JST
	radacct                   
* Wed 03 Dec 2014 12:46:30 AM JST


* Wed 03 Dec 2014 12:46:30 AM JST


* Wed 03 Dec 2014 12:46:30 AM JST
	l2tp
* Wed 03 Dec 2014 12:46:30 AM JST
	l2tp
* Wed 03 Dec 2014 12:46:30 AM JST


* Wed 03 Dec 2014 12:46:30 AM JST


* Wed 03 Dec 2014 12:46:30 AM JST


* Wed 03 Dec 2014 12:46:30 AM JST


* Wed 03 Dec 2014 12:46:30 AM JST
	old-radacct
* Wed 03 Dec 2014 12:46:30 AM JST
	old-radacct
* Wed 03 Dec 2014 12:46:30 AM JST
	old-radius
* Wed 03 Dec 2014 12:46:30 AM JST
	old-radius
* Wed 03 Dec 2014 12:46:30 AM JST


* Wed 03 Dec 2014 12:46:30 AM JST
                            

* Wed 03 Dec 2014 12:46:31 AM JST


* Wed 03 Dec 2014 12:46:31 AM JST


* Wed 03 Dec 2014 12:46:31 AM JST


* Wed 03 Dec 2014 12:46:31 AM JST
                              

* Wed 03 Dec 2014 12:46:31 AM JST


* Wed 03 Dec 2014 12:46:31 AM JST
                              

* Wed 03 Dec 2014 12:46:31 AM JST
	lotusnotes
* Wed 03 Dec 2014 12:46:31 AM JST
	lotusnotes                  
* Wed 03 Dec 2014 12:46:31 AM JST
                              

* Wed 03 Dec 2014 12:46:31 AM JST
                              

* Wed 03 Dec 2014 12:46:31 AM JST


* Wed 03 Dec 2014 12:46:31 AM JST


* Wed 03 Dec 2014 12:46:32 AM JST


* Wed 03 Dec 2014 12:46:32 AM JST
                            

* Wed 03 Dec 2014 12:46:32 AM JST


* Wed 03 Dec 2014 12:46:32 AM JST


* Wed 03 Dec 2014 12:46:32 AM JST


* Wed 03 Dec 2014 12:46:32 AM JST


* Wed 03 Dec 2014 12:46:32 AM JST


* Wed 03 Dec 2014 12:46:32 AM JST


* Wed 03 Dec 2014 12:46:32 AM JST


* Wed 03 Dec 2014 12:46:32 AM JST
                                

* Wed 03 Dec 2014 12:46:32 AM JST


* Wed 03 Dec 2014 12:46:32 AM JST
                                 

* Wed 03 Dec 2014 12:46:33 AM JST


* Wed 03 Dec 2014 12:46:33 AM JST
                                 

* Wed 03 Dec 2014 12:46:33 AM JST


* Wed 03 Dec 2014 12:46:33 AM JST
                                 

* Wed 03 Dec 2014 12:46:33 AM JST


* Wed 03 Dec 2014 12:46:33 AM JST
                               

* Wed 03 Dec 2014 12:46:33 AM JST


* Wed 03 Dec 2014 12:46:33 AM JST
                               

* Wed 03 Dec 2014 12:46:33 AM JST


* Wed 03 Dec 2014 12:46:33 AM JST


* Wed 03 Dec 2014 12:46:33 AM JST


* Wed 03 Dec 2014 12:46:33 AM JST
                               

* Wed 03 Dec 2014 12:46:33 AM JST
                           

* Wed 03 Dec 2014 12:46:33 AM JST


* Wed 03 Dec 2014 12:46:33 AM JST


* Wed 03 Dec 2014 12:46:34 AM JST


* Wed 03 Dec 2014 12:46:34 AM JST
                                 

* Wed 03 Dec 2014 12:46:34 AM JST


* Wed 03 Dec 2014 12:46:34 AM JST
                                 

* Wed 03 Dec 2014 12:46:34 AM JST


* Wed 03 Dec 2014 12:46:34 AM JST
                             

* Wed 03 Dec 2014 12:46:34 AM JST
		snntp
* Wed 03 Dec 2014 12:46:34 AM JST
		snntp                         
* Wed 03 Dec 2014 12:46:34 AM JST
		rfs_server rfs              
* Wed 03 Dec 2014 12:46:34 AM JST


* Wed 03 Dec 2014 12:46:34 AM JST


* Wed 03 Dec 2014 12:46:34 AM JST


* Wed 03 Dec 2014 12:46:34 AM JST
                             

* Wed 03 Dec 2014 12:46:34 AM JST


* Wed 03 Dec 2014 12:46:35 AM JST


* Wed 03 Dec 2014 12:46:35 AM JST


* Wed 03 Dec 2014 12:46:35 AM JST


* Wed 03 Dec 2014 12:46:35 AM JST
		krcmd                       
* Wed 03 Dec 2014 12:46:35 AM JST
                               

* Wed 03 Dec 2014 12:46:35 AM JST
		uucpd                         
* Wed 03 Dec 2014 12:46:35 AM JST


* Wed 03 Dec 2014 12:46:35 AM JST
                               

* Wed 03 Dec 2014 12:46:35 AM JST
                               

* Wed 03 Dec 2014 12:46:35 AM JST
		readnews
* Wed 03 Dec 2014 12:46:35 AM JST
		chat
* Wed 03 Dec 2014 12:46:35 AM JST
		rpc
* Wed 03 Dec 2014 12:46:35 AM JST
		newdate
* Wed 03 Dec 2014 12:46:35 AM JST
		timeserver
* Wed 03 Dec 2014 12:46:35 AM JST
		router routed                 
* Wed 03 Dec 2014 12:46:36 AM JST


* Wed 03 Dec 2014 12:46:36 AM JST


* Wed 03 Dec 2014 12:46:36 AM JST
		spooler                     
* Wed 03 Dec 2014 12:46:36 AM JST


* Wed 03 Dec 2014 12:46:36 AM JST
		cmd                           
* Wed 03 Dec 2014 12:46:36 AM JST
		whod
* Wed 03 Dec 2014 12:46:36 AM JST


* Wed 03 Dec 2014 12:46:36 AM JST
		comsat
* Wed 03 Dec 2014 12:46:36 AM JST


* Wed 03 Dec 2014 12:46:36 AM JST


* Wed 03 Dec 2014 12:46:36 AM JST
                                   

* Wed 03 Dec 2014 12:46:36 AM JST


* Wed 03 Dec 2014 12:46:36 AM JST


* Wed 03 Dec 2014 12:46:36 AM JST
                               

* Wed 03 Dec 2014 12:46:36 AM JST
		dqs313_intercell
* Wed 03 Dec 2014 12:46:37 AM JST
		dqs313_intercell            
* Wed 03 Dec 2014 12:46:37 AM JST
		dqs313_execd
* Wed 03 Dec 2014 12:46:37 AM JST
		dqs313_execd                
* Wed 03 Dec 2014 12:46:37 AM JST
		dqs313_qmaster
* Wed 03 Dec 2014 12:46:37 AM JST
		dqs313_qmaster            
* Wed 03 Dec 2014 12:46:37 AM JST


* Wed 03 Dec 2014 12:46:37 AM JST
                                   

* Wed 03 Dec 2014 12:46:37 AM JST


* Wed 03 Dec 2014 12:46:37 AM JST
                                 

* Wed 03 Dec 2014 12:46:37 AM JST
                               

* Wed 03 Dec 2014 12:46:37 AM JST
                               

* Wed 03 Dec 2014 12:46:37 AM JST


* Wed 03 Dec 2014 12:46:37 AM JST
                                 

* Wed 03 Dec 2014 12:46:37 AM JST


* Wed 03 Dec 2014 12:46:37 AM JST


* Wed 03 Dec 2014 12:46:38 AM JST


* Wed 03 Dec 2014 12:46:38 AM JST
                           

* Wed 03 Dec 2014 12:46:38 AM JST


* Wed 03 Dec 2014 12:46:38 AM JST
                                 

* Wed 03 Dec 2014 12:46:38 AM JST


* Wed 03 Dec 2014 12:46:38 AM JST
                                 

* Wed 03 Dec 2014 12:46:38 AM JST


* Wed 03 Dec 2014 12:46:38 AM JST
                               

* Wed 03 Dec 2014 12:46:38 AM JST


* Wed 03 Dec 2014 12:46:38 AM JST
                                 

* Wed 03 Dec 2014 12:46:38 AM JST


* Wed 03 Dec 2014 12:46:38 AM JST
                                 

* Wed 03 Dec 2014 12:46:38 AM JST


* Wed 03 Dec 2014 12:46:38 AM JST
                               

* Wed 03 Dec 2014 12:46:39 AM JST
		Clearcase
* Wed 03 Dec 2014 12:46:39 AM JST
		Clearcase
* Wed 03 Dec 2014 12:46:39 AM JST
                               

* Wed 03 Dec 2014 12:46:39 AM JST


* Wed 03 Dec 2014 12:46:39 AM JST
                             

* Wed 03 Dec 2014 12:46:39 AM JST


* Wed 03 Dec 2014 12:46:39 AM JST


* Wed 03 Dec 2014 12:46:39 AM JST
                               

* Wed 03 Dec 2014 12:46:39 AM JST


* Wed 03 Dec 2014 12:46:39 AM JST
                                 

* Wed 03 Dec 2014 12:46:39 AM JST


* Wed 03 Dec 2014 12:46:39 AM JST
                               

* Wed 03 Dec 2014 12:46:39 AM JST
                                 

* Wed 03 Dec 2014 12:46:39 AM JST
                                 

* Wed 03 Dec 2014 12:46:39 AM JST


* Wed 03 Dec 2014 12:46:40 AM JST
                                   

* Wed 03 Dec 2014 12:46:40 AM JST
		wais
* Wed 03 Dec 2014 12:46:40 AM JST
		wais                          
* Wed 03 Dec 2014 12:46:40 AM JST


* Wed 03 Dec 2014 12:46:40 AM JST
                                 

* Wed 03 Dec 2014 12:46:40 AM JST


* Wed 03 Dec 2014 12:46:40 AM JST
                               

* Wed 03 Dec 2014 12:46:40 AM JST


* Wed 03 Dec 2014 12:46:40 AM JST
                               

* Wed 03 Dec 2014 12:46:40 AM JST


* Wed 03 Dec 2014 12:46:40 AM JST
                               

* Wed 03 Dec 2014 12:46:40 AM JST


* Wed 03 Dec 2014 12:46:40 AM JST
                               

* Wed 03 Dec 2014 12:46:40 AM JST


* Wed 03 Dec 2014 12:46:41 AM JST
                                 

* Wed 03 Dec 2014 12:46:41 AM JST


* Wed 03 Dec 2014 12:46:41 AM JST
                                   

* Wed 03 Dec 2014 12:46:41 AM JST


* Wed 03 Dec 2014 12:46:41 AM JST
                               

* Wed 03 Dec 2014 12:46:41 AM JST


* Wed 03 Dec 2014 12:46:41 AM JST
                                   

* Wed 03 Dec 2014 12:46:41 AM JST
		NeXTStep NextStep           
* Wed 03 Dec 2014 12:46:41 AM JST
		NeXTStep NextStep           
* Wed 03 Dec 2014 12:46:41 AM JST


* Wed 03 Dec 2014 12:46:41 AM JST
                                 

* Wed 03 Dec 2014 12:46:42 AM JST


* Wed 03 Dec 2014 12:46:42 AM JST
                                 

* Wed 03 Dec 2014 12:46:42 AM JST


* Wed 03 Dec 2014 12:46:42 AM JST


* Wed 03 Dec 2014 12:46:42 AM JST


* Wed 03 Dec 2014 12:46:42 AM JST
                               

* Wed 03 Dec 2014 12:46:42 AM JST
		snmptrap
* Wed 03 Dec 2014 12:46:42 AM JST
		snmptrap                    
* Wed 03 Dec 2014 12:46:42 AM JST


* Wed 03 Dec 2014 12:46:42 AM JST
                                 

* Wed 03 Dec 2014 12:46:42 AM JST
		imap
* Wed 03 Dec 2014 12:46:42 AM JST
		imap                          
* Wed 03 Dec 2014 12:46:42 AM JST


* Wed 03 Dec 2014 12:46:42 AM JST
                             

* Wed 03 Dec 2014 12:46:43 AM JST


* Wed 03 Dec 2014 12:46:43 AM JST
                             

* Wed 03 Dec 2014 12:46:43 AM JST


* Wed 03 Dec 2014 12:46:43 AM JST
                             

* Wed 03 Dec 2014 12:46:43 AM JST
		epmap
* Wed 03 Dec 2014 12:46:43 AM JST
		epmap                       
* Wed 03 Dec 2014 12:46:43 AM JST


* Wed 03 Dec 2014 12:46:43 AM JST
                               

* Wed 03 Dec 2014 12:46:43 AM JST
                                   

* Wed 03 Dec 2014 12:46:43 AM JST


* Wed 03 Dec 2014 12:46:43 AM JST
		readnews untp                 
* Wed 03 Dec 2014 12:46:43 AM JST


* Wed 03 Dec 2014 12:46:43 AM JST


* Wed 03 Dec 2014 12:46:43 AM JST
		authentication tap ident
* Wed 03 Dec 2014 12:46:43 AM JST
		portmapper
* Wed 03 Dec 2014 12:46:44 AM JST
		portmapper                  
* Wed 03 Dec 2014 12:46:44 AM JST
		pop-3
* Wed 03 Dec 2014 12:46:44 AM JST
		pop-3                         
* Wed 03 Dec 2014 12:46:44 AM JST
		pop-2
* Wed 03 Dec 2014 12:46:44 AM JST
		postoffice pop-2              
* Wed 03 Dec 2014 12:46:44 AM JST


* Wed 03 Dec 2014 12:46:44 AM JST
                               

* Wed 03 Dec 2014 12:46:44 AM JST
		cso-ns
* Wed 03 Dec 2014 12:46:44 AM JST
		cso-ns                      
* Wed 03 Dec 2014 12:46:44 AM JST
		dicom
* Wed 03 Dec 2014 12:46:44 AM JST
		dicom                       
* Wed 03 Dec 2014 12:46:44 AM JST
		tsap                        
* Wed 03 Dec 2014 12:46:44 AM JST
		hostname                    
* Wed 03 Dec 2014 12:46:44 AM JST


* Wed 03 Dec 2014 12:46:44 AM JST
		kerberos5 krb5 kerberos-sec	
* Wed 03 Dec 2014 12:46:45 AM JST
		kerberos5 krb5 kerberos-sec	
* Wed 03 Dec 2014 12:46:45 AM JST
		ttylink
* Wed 03 Dec 2014 12:46:45 AM JST
                                  

* Wed 03 Dec 2014 12:46:45 AM JST
		www                           
* Wed 03 Dec 2014 12:46:45 AM JST


* Wed 03 Dec 2014 12:46:45 AM JST
		netrjs
* Wed 03 Dec 2014 12:46:45 AM JST


* Wed 03 Dec 2014 12:46:45 AM JST
                                

* Wed 03 Dec 2014 12:46:45 AM JST


* Wed 03 Dec 2014 12:46:45 AM JST


* Wed 03 Dec 2014 12:46:45 AM JST
                                

* Wed 03 Dec 2014 12:46:45 AM JST


* Wed 03 Dec 2014 12:46:45 AM JST
                                

* Wed 03 Dec 2014 12:46:45 AM JST


* Wed 03 Dec 2014 12:46:46 AM JST
                                

* Wed 03 Dec 2014 12:46:46 AM JST
                                    

* Wed 03 Dec 2014 12:46:46 AM JST


* Wed 03 Dec 2014 12:46:46 AM JST
                                

* Wed 03 Dec 2014 12:46:46 AM JST


* Wed 03 Dec 2014 12:46:46 AM JST
                              

* Wed 03 Dec 2014 12:46:46 AM JST


* Wed 03 Dec 2014 12:46:46 AM JST
                                

* Wed 03 Dec 2014 12:46:46 AM JST
		nicname
* Wed 03 Dec 2014 12:46:46 AM JST
		name                      
* Wed 03 Dec 2014 12:46:46 AM JST
		resource                        
* Wed 03 Dec 2014 12:46:46 AM JST
		timserver
* Wed 03 Dec 2014 12:46:46 AM JST
		timserver
* Wed 03 Dec 2014 12:46:46 AM JST
		mail
* Wed 03 Dec 2014 12:46:47 AM JST


* Wed 03 Dec 2014 12:46:47 AM JST


* Wed 03 Dec 2014 12:46:47 AM JST
                                    

* Wed 03 Dec 2014 12:46:47 AM JST
		fspd
* Wed 03 Dec 2014 12:46:47 AM JST


* Wed 03 Dec 2014 12:46:47 AM JST


* Wed 03 Dec 2014 12:46:47 AM JST
		ttytst source
* Wed 03 Dec 2014 12:46:47 AM JST
		ttytst source
* Wed 03 Dec 2014 12:46:47 AM JST


* Wed 03 Dec 2014 12:46:47 AM JST
                                    

* Wed 03 Dec 2014 12:46:47 AM JST
		quote
* Wed 03 Dec 2014 12:46:47 AM JST


* Wed 03 Dec 2014 12:46:47 AM JST


* Wed 03 Dec 2014 12:46:47 AM JST


* Wed 03 Dec 2014 12:46:47 AM JST
		users
* Wed 03 Dec 2014 12:46:48 AM JST
		sink null
* Wed 03 Dec 2014 12:46:48 AM JST
		sink null
* Wed 03 Dec 2014 12:46:48 AM JST


* Wed 03 Dec 2014 12:46:48 AM JST


* Wed 03 Dec 2014 12:46:48 AM JST
                                 

* Wed 03 Dec 2014 12:47:54 AM JST
                               

* Wed 03 Dec 2014 12:47:54 AM JST
                               

* Wed 03 Dec 2014 12:47:54 AM JST
                             

* Wed 03 Dec 2014 12:47:54 AM JST
                             

* Wed 03 Dec 2014 12:47:54 AM JST


* Wed 03 Dec 2014 12:47:54 AM JST
                                 

* Wed 03 Dec 2014 12:47:54 AM JST
                               

* Wed 03 Dec 2014 12:47:54 AM JST


* Wed 03 Dec 2014 12:47:54 AM JST
                               

* Wed 03 Dec 2014 12:47:54 AM JST


* Wed 03 Dec 2014 12:47:54 AM JST
                             

* Wed 03 Dec 2014 12:47:54 AM JST
                             

* Wed 03 Dec 2014 12:47:54 AM JST
                             

* Wed 03 Dec 2014 12:47:55 AM JST


* Wed 03 Dec 2014 12:47:55 AM JST
                             

* Wed 03 Dec 2014 12:47:55 AM JST


* Wed 03 Dec 2014 12:47:55 AM JST
                             

* Wed 03 Dec 2014 12:47:55 AM JST


* Wed 03 Dec 2014 12:47:55 AM JST
                               

* Wed 03 Dec 2014 12:47:55 AM JST
                             

* Wed 03 Dec 2014 12:47:55 AM JST
                             

* Wed 03 Dec 2014 12:47:55 AM JST


* Wed 03 Dec 2014 12:47:55 AM JST
                             

* Wed 03 Dec 2014 12:47:55 AM JST


* Wed 03 Dec 2014 12:47:55 AM JST
                                

* Wed 03 Dec 2014 12:47:55 AM JST
                                  

* Wed 03 Dec 2014 12:47:55 AM JST
	mandelbrot                
* Wed 03 Dec 2014 12:47:55 AM JST


* Wed 03 Dec 2014 12:47:56 AM JST
                       

* Wed 03 Dec 2014 12:47:56 AM JST


* Wed 03 Dec 2014 12:47:56 AM JST
                              

* Wed 03 Dec 2014 12:47:56 AM JST
                              

* Wed 03 Dec 2014 12:47:56 AM JST
                              

* Wed 03 Dec 2014 12:47:56 AM JST
                                

* Wed 03 Dec 2014 12:47:56 AM JST
	sane saned                  
* Wed 03 Dec 2014 12:47:56 AM JST
                                

* Wed 03 Dec 2014 12:47:56 AM JST
                              

* Wed 03 Dec 2014 12:47:56 AM JST
                                

* Wed 03 Dec 2014 12:47:56 AM JST
                                

* Wed 03 Dec 2014 12:47:56 AM JST
                                

* Wed 03 Dec 2014 12:47:56 AM JST
                                

* Wed 03 Dec 2014 12:47:56 AM JST
                              

* Wed 03 Dec 2014 12:47:57 AM JST
                              

* Wed 03 Dec 2014 12:47:57 AM JST
                              

* Wed 03 Dec 2014 12:47:57 AM JST
                              

* Wed 03 Dec 2014 12:47:57 AM JST
                                

* Wed 03 Dec 2014 12:47:57 AM JST
                            

* Wed 03 Dec 2014 12:47:57 AM JST
                            

* Wed 03 Dec 2014 12:47:57 AM JST
	lrrd                          
* Wed 03 Dec 2014 12:47:57 AM JST
                              

* Wed 03 Dec 2014 12:47:57 AM JST
                              

* Wed 03 Dec 2014 12:47:57 AM JST
                                  

* Wed 03 Dec 2014 12:47:57 AM JST
                                

* Wed 03 Dec 2014 12:47:57 AM JST


* Wed 03 Dec 2014 12:47:57 AM JST
                              

* Wed 03 Dec 2014 12:47:57 AM JST


* Wed 03 Dec 2014 12:47:57 AM JST
                              

* Wed 03 Dec 2014 12:47:58 AM JST
                                

* Wed 03 Dec 2014 12:47:58 AM JST
                              

* Wed 03 Dec 2014 12:47:58 AM JST
                              

* Wed 03 Dec 2014 12:47:58 AM JST
                                

* Wed 03 Dec 2014 12:47:58 AM JST
                                

* Wed 03 Dec 2014 12:47:58 AM JST
                              

* Wed 03 Dec 2014 12:47:58 AM JST
                                

* Wed 03 Dec 2014 12:47:58 AM JST
                                

* Wed 03 Dec 2014 12:47:58 AM JST
                              

* Wed 03 Dec 2014 12:47:58 AM JST


* Wed 03 Dec 2014 12:47:58 AM JST
                              

* Wed 03 Dec 2014 12:47:58 AM JST
                                

* Wed 03 Dec 2014 12:47:58 AM JST
                              

* Wed 03 Dec 2014 12:47:58 AM JST
                              

* Wed 03 Dec 2014 12:47:58 AM JST
                                

* Wed 03 Dec 2014 12:47:59 AM JST
                                

* Wed 03 Dec 2014 12:47:59 AM JST
                                

* Wed 03 Dec 2014 12:47:59 AM JST
                              

* Wed 03 Dec 2014 12:47:59 AM JST
                              

* Wed 03 Dec 2014 12:47:59 AM JST
                              

* Wed 03 Dec 2014 12:47:59 AM JST


* Wed 03 Dec 2014 12:47:59 AM JST
                              

* Wed 03 Dec 2014 12:47:59 AM JST
		omirrd
* Wed 03 Dec 2014 12:47:59 AM JST
		omirrd                        
* Wed 03 Dec 2014 12:47:59 AM JST
                                 

* Wed 03 Dec 2014 12:48:00 AM JST
		moira_ureg                
* Wed 03 Dec 2014 12:48:00 AM JST
		moira_update            
* Wed 03 Dec 2014 12:48:00 AM JST
		moira_db                    
* Wed 03 Dec 2014 12:48:00 AM JST
		smtps                         
* Wed 03 Dec 2014 12:48:00 AM JST


* Wed 03 Dec 2014 12:48:00 AM JST
                               

* Wed 03 Dec 2014 12:48:00 AM JST
                                

* Wed 03 Dec 2014 12:48:00 AM JST
                            

* Wed 03 Dec 2014 12:48:00 AM JST
                             

* Wed 03 Dec 2014 12:48:00 AM JST
                                

* Wed 03 Dec 2014 12:48:00 AM JST
                                  

* Wed 03 Dec 2014 12:48:00 AM JST
                              

* Wed 03 Dec 2014 12:48:00 AM JST
                              

* Wed 03 Dec 2014 12:48:00 AM JST
                            

* Wed 03 Dec 2014 12:48:00 AM JST
                            

* Wed 03 Dec 2014 12:48:01 AM JST
                                

* Wed 03 Dec 2014 12:48:01 AM JST
                                

* Wed 03 Dec 2014 12:48:01 AM JST
                                 

* Wed 03 Dec 2014 12:48:01 AM JST
                               

* Wed 03 Dec 2014 12:48:01 AM JST
		kreg                        
* Wed 03 Dec 2014 12:48:01 AM JST
		krb_prop krb5_prop hprop    
* Wed 03 Dec 2014 12:48:01 AM JST
		passwd_server           
* Wed 03 Dec 2014 12:48:01 AM JST


* Wed 03 Dec 2014 12:48:01 AM JST
		kerberos_master       
* Wed 03 Dec 2014 12:48:01 AM JST
		kerberos-iv kdc
* Wed 03 Dec 2014 12:48:01 AM JST
		kerberos-iv kdc             
* Wed 03 Dec 2014 12:48:01 AM JST
                                     

* Wed 03 Dec 2014 12:48:01 AM JST
                                   

* Wed 03 Dec 2014 12:48:01 AM JST
                                     

* Wed 03 Dec 2014 12:48:01 AM JST
                                   

* Wed 03 Dec 2014 12:48:02 AM JST


* Wed 03 Dec 2014 12:48:02 AM JST
                               

* Wed 03 Dec 2014 12:48:02 AM JST
                             

* Wed 03 Dec 2014 12:48:02 AM JST
                               

* Wed 03 Dec 2014 12:48:02 AM JST


* Wed 03 Dec 2014 12:48:02 AM JST
                             

* Wed 03 Dec 2014 12:48:02 AM JST


* Wed 03 Dec 2014 12:48:02 AM JST
                               

* Wed 03 Dec 2014 12:48:02 AM JST


* Wed 03 Dec 2014 12:48:02 AM JST
                               

* Wed 03 Dec 2014 12:48:02 AM JST


* Wed 03 Dec 2014 12:48:02 AM JST
                           

* Wed 03 Dec 2014 12:48:02 AM JST


* Wed 03 Dec 2014 12:48:02 AM JST
                               

* Wed 03 Dec 2014 12:48:03 AM JST


* Wed 03 Dec 2014 12:48:03 AM JST
                               

* Wed 03 Dec 2014 12:48:03 AM JST


* Wed 03 Dec 2014 12:48:03 AM JST
                                 

* Wed 03 Dec 2014 12:48:03 AM JST


* Wed 03 Dec 2014 12:48:03 AM JST
                             

* Wed 03 Dec 2014 12:48:03 AM JST


* Wed 03 Dec 2014 12:48:03 AM JST
                       

* Wed 03 Dec 2014 12:48:03 AM JST


* Wed 03 Dec 2014 12:48:03 AM JST
                         

* Wed 03 Dec 2014 12:48:03 AM JST
                                 

* Wed 03 Dec 2014 12:48:03 AM JST


* Wed 03 Dec 2014 12:48:03 AM JST
                                

* Wed 03 Dec 2014 12:48:03 AM JST


* Wed 03 Dec 2014 12:48:03 AM JST
                              

* Wed 03 Dec 2014 12:48:03 AM JST


* Wed 03 Dec 2014 12:48:04 AM JST
                              

* Wed 03 Dec 2014 12:48:04 AM JST


* Wed 03 Dec 2014 12:48:04 AM JST
                            

* Wed 03 Dec 2014 12:48:04 AM JST


* Wed 03 Dec 2014 12:48:04 AM JST
	webcache                    
* Wed 03 Dec 2014 12:48:04 AM JST
	xfs
* Wed 03 Dec 2014 12:48:04 AM JST
	xfs                     
* Wed 03 Dec 2014 12:48:04 AM JST


* Wed 03 Dec 2014 12:48:04 AM JST
                            

* Wed 03 Dec 2014 12:48:04 AM JST


* Wed 03 Dec 2014 12:48:04 AM JST
                            

* Wed 03 Dec 2014 12:48:04 AM JST


* Wed 03 Dec 2014 12:48:04 AM JST
                              

* Wed 03 Dec 2014 12:48:04 AM JST


* Wed 03 Dec 2014 12:48:05 AM JST
                            

* Wed 03 Dec 2014 12:48:05 AM JST


* Wed 03 Dec 2014 12:48:05 AM JST
                            

* Wed 03 Dec 2014 12:48:05 AM JST


* Wed 03 Dec 2014 12:48:05 AM JST
                          

* Wed 03 Dec 2014 12:48:05 AM JST


* Wed 03 Dec 2014 12:48:05 AM JST
                          

* Wed 03 Dec 2014 12:48:05 AM JST


* Wed 03 Dec 2014 12:48:05 AM JST
                          

* Wed 03 Dec 2014 12:48:05 AM JST


* Wed 03 Dec 2014 12:48:05 AM JST
                          

* Wed 03 Dec 2014 12:48:05 AM JST
 	bbs
* Wed 03 Dec 2014 12:48:05 AM JST
 	bbs                   
* Wed 03 Dec 2014 12:48:05 AM JST


* Wed 03 Dec 2014 12:48:05 AM JST
                            

* Wed 03 Dec 2014 12:48:06 AM JST
	sge_execd
* Wed 03 Dec 2014 12:48:06 AM JST
	sge_execd                   
* Wed 03 Dec 2014 12:48:06 AM JST
	sge_qmaster
* Wed 03 Dec 2014 12:48:06 AM JST
	sge_qmaster               
* Wed 03 Dec 2014 12:48:06 AM JST


* Wed 03 Dec 2014 12:48:06 AM JST
                          

* Wed 03 Dec 2014 12:48:06 AM JST


* Wed 03 Dec 2014 12:48:06 AM JST
                          

* Wed 03 Dec 2014 12:48:06 AM JST


* Wed 03 Dec 2014 12:48:06 AM JST


* Wed 03 Dec 2014 12:48:06 AM JST


* Wed 03 Dec 2014 12:48:06 AM JST


* Wed 03 Dec 2014 12:48:06 AM JST


* Wed 03 Dec 2014 12:48:06 AM JST


* Wed 03 Dec 2014 12:48:06 AM JST


* Wed 03 Dec 2014 12:48:07 AM JST


* Wed 03 Dec 2014 12:48:07 AM JST


* Wed 03 Dec 2014 12:48:07 AM JST


* Wed 03 Dec 2014 12:48:07 AM JST


* Wed 03 Dec 2014 12:48:07 AM JST


* Wed 03 Dec 2014 12:48:07 AM JST


* Wed 03 Dec 2014 12:48:07 AM JST


* Wed 03 Dec 2014 12:48:07 AM JST
	x11-0
* Wed 03 Dec 2014 12:48:07 AM JST
	x11-0                           
* Wed 03 Dec 2014 12:48:07 AM JST


* Wed 03 Dec 2014 12:48:07 AM JST
                                  

* Wed 03 Dec 2014 12:48:07 AM JST


* Wed 03 Dec 2014 12:48:07 AM JST


* Wed 03 Dec 2014 12:48:07 AM JST


* Wed 03 Dec 2014 12:48:07 AM JST


* Wed 03 Dec 2014 12:48:08 AM JST
	rptp                        
* Wed 03 Dec 2014 12:48:08 AM JST
	postgres
* Wed 03 Dec 2014 12:48:08 AM JST
	postgres                  
* Wed 03 Dec 2014 12:48:08 AM JST


* Wed 03 Dec 2014 12:48:08 AM JST
                                

* Wed 03 Dec 2014 12:48:08 AM JST


* Wed 03 Dec 2014 12:48:08 AM JST


* Wed 03 Dec 2014 12:48:08 AM JST
	jabber-server
* Wed 03 Dec 2014 12:48:08 AM JST
	jabber-server             
* Wed 03 Dec 2014 12:48:09 AM JST
	jabber-client
* Wed 03 Dec 2014 12:48:09 AM JST
	jabber-client             
* Wed 03 Dec 2014 12:48:09 AM JST


* Wed 03 Dec 2014 12:48:09 AM JST
                                  

* Wed 03 Dec 2014 12:48:09 AM JST


* Wed 03 Dec 2014 12:48:09 AM JST


* Wed 03 Dec 2014 12:48:09 AM JST


* Wed 03 Dec 2014 12:48:09 AM JST
                                  

* Wed 03 Dec 2014 12:48:09 AM JST


* Wed 03 Dec 2014 12:48:09 AM JST
                                

* Wed 03 Dec 2014 12:48:09 AM JST


* Wed 03 Dec 2014 12:48:09 AM JST
                                  

* Wed 03 Dec 2014 12:48:09 AM JST


* Wed 03 Dec 2014 12:48:09 AM JST
                            

* Wed 03 Dec 2014 12:48:09 AM JST


* Wed 03 Dec 2014 12:48:10 AM JST
                                  

* Wed 03 Dec 2014 12:48:10 AM JST


* Wed 03 Dec 2014 12:48:10 AM JST
                                  

* Wed 03 Dec 2014 12:48:10 AM JST


* Wed 03 Dec 2014 12:48:10 AM JST
                              

* Wed 03 Dec 2014 12:48:10 AM JST


* Wed 03 Dec 2014 12:48:10 AM JST
                              

* Wed 03 Dec 2014 12:48:10 AM JST


* Wed 03 Dec 2014 12:48:10 AM JST
                                

* Wed 03 Dec 2014 12:48:10 AM JST
                                

* Wed 03 Dec 2014 12:48:10 AM JST


* Wed 03 Dec 2014 12:48:10 AM JST
                              

* Wed 03 Dec 2014 12:48:10 AM JST


* Wed 03 Dec 2014 12:48:10 AM JST
                                

* Wed 03 Dec 2014 12:48:10 AM JST
	subversion
* Wed 03 Dec 2014 12:48:11 AM JST
	subversion                      
* Wed 03 Dec 2014 12:48:11 AM JST


* Wed 03 Dec 2014 12:48:11 AM JST
                                

* Wed 03 Dec 2014 12:48:11 AM JST


* Wed 03 Dec 2014 12:48:11 AM JST
                              

* Wed 03 Dec 2014 12:48:11 AM JST


* Wed 03 Dec 2014 12:48:11 AM JST
                                  

* Wed 03 Dec 2014 12:48:11 AM JST


* Wed 03 Dec 2014 12:48:11 AM JST


* Wed 03 Dec 2014 12:48:11 AM JST


* Wed 03 Dec 2014 12:48:11 AM JST
	icp
* Wed 03 Dec 2014 12:48:11 AM JST
	icp                           
* Wed 03 Dec 2014 12:48:11 AM JST
	gds_db
* Wed 03 Dec 2014 12:48:11 AM JST
	gds_db                      
* Wed 03 Dec 2014 12:48:12 AM JST


* Wed 03 Dec 2014 12:48:12 AM JST


* Wed 03 Dec 2014 12:48:12 AM JST


* Wed 03 Dec 2014 12:48:12 AM JST


* Wed 03 Dec 2014 12:48:12 AM JST


* Wed 03 Dec 2014 12:48:12 AM JST


* Wed 03 Dec 2014 12:48:12 AM JST


* Wed 03 Dec 2014 12:48:12 AM JST
                                

* Wed 03 Dec 2014 12:48:12 AM JST


* Wed 03 Dec 2014 12:48:12 AM JST
                                  

* Wed 03 Dec 2014 12:48:13 AM JST
                            

* Wed 03 Dec 2014 12:48:13 AM JST
                            

* Wed 03 Dec 2014 12:48:13 AM JST
                              

* Wed 03 Dec 2014 12:48:13 AM JST
                              

* Wed 03 Dec 2014 12:48:13 AM JST
                              

* Wed 03 Dec 2014 12:48:13 AM JST
                              

* Wed 03 Dec 2014 12:48:13 AM JST
                                

* Wed 03 Dec 2014 12:48:13 AM JST
                                

* Wed 03 Dec 2014 12:48:13 AM JST


* Wed 03 Dec 2014 12:48:13 AM JST
                            

* Wed 03 Dec 2014 12:48:13 AM JST


* Wed 03 Dec 2014 12:48:13 AM JST
                                

* Wed 03 Dec 2014 12:48:13 AM JST


* Wed 03 Dec 2014 12:48:13 AM JST


* Wed 03 Dec 2014 12:48:14 AM JST


* Wed 03 Dec 2014 12:48:14 AM JST
                            

* Wed 03 Dec 2014 12:48:14 AM JST


* Wed 03 Dec 2014 12:48:14 AM JST


* Wed 03 Dec 2014 12:48:14 AM JST
                                  

* Wed 03 Dec 2014 12:48:14 AM JST
                                  

* Wed 03 Dec 2014 12:48:14 AM JST
	pipe_server
* Wed 03 Dec 2014 12:48:14 AM JST
	ndtp
* Wed 03 Dec 2014 12:48:14 AM JST


* Wed 03 Dec 2014 12:48:14 AM JST
                            

* Wed 03 Dec 2014 12:48:14 AM JST
                            

* Wed 03 Dec 2014 12:48:14 AM JST
                            

* Wed 03 Dec 2014 12:48:14 AM JST
                            

* Wed 03 Dec 2014 12:48:14 AM JST


* Wed 03 Dec 2014 12:48:14 AM JST
                                

* Wed 03 Dec 2014 12:48:15 AM JST
	radacct
* Wed 03 Dec 2014 12:48:15 AM JST
	radacct                   
* Wed 03 Dec 2014 12:48:15 AM JST


* Wed 03 Dec 2014 12:48:15 AM JST


* Wed 03 Dec 2014 12:48:15 AM JST
	l2tp
* Wed 03 Dec 2014 12:48:15 AM JST
	l2tp
* Wed 03 Dec 2014 12:48:15 AM JST


* Wed 03 Dec 2014 12:48:15 AM JST


* Wed 03 Dec 2014 12:48:15 AM JST


* Wed 03 Dec 2014 12:48:15 AM JST


* Wed 03 Dec 2014 12:48:15 AM JST
	old-radacct
* Wed 03 Dec 2014 12:48:15 AM JST
	old-radacct
* Wed 03 Dec 2014 12:48:15 AM JST
	old-radius
* Wed 03 Dec 2014 12:48:15 AM JST
	old-radius
* Wed 03 Dec 2014 12:48:16 AM JST


* Wed 03 Dec 2014 12:48:16 AM JST
                            

* Wed 03 Dec 2014 12:48:16 AM JST


* Wed 03 Dec 2014 12:48:16 AM JST


* Wed 03 Dec 2014 12:48:16 AM JST


* Wed 03 Dec 2014 12:48:16 AM JST
                              

* Wed 03 Dec 2014 12:48:16 AM JST


* Wed 03 Dec 2014 12:48:16 AM JST
                              

* Wed 03 Dec 2014 12:48:16 AM JST
	lotusnotes
* Wed 03 Dec 2014 12:48:16 AM JST
	lotusnotes                  
* Wed 03 Dec 2014 12:48:16 AM JST
                              

* Wed 03 Dec 2014 12:48:16 AM JST
                              

* Wed 03 Dec 2014 12:48:16 AM JST


* Wed 03 Dec 2014 12:48:16 AM JST


* Wed 03 Dec 2014 12:48:17 AM JST


* Wed 03 Dec 2014 12:48:17 AM JST
                            

* Wed 03 Dec 2014 12:48:17 AM JST


* Wed 03 Dec 2014 12:48:17 AM JST


* Wed 03 Dec 2014 12:48:17 AM JST


* Wed 03 Dec 2014 12:48:17 AM JST


* Wed 03 Dec 2014 12:48:17 AM JST


* Wed 03 Dec 2014 12:48:17 AM JST


* Wed 03 Dec 2014 12:48:17 AM JST


* Wed 03 Dec 2014 12:48:17 AM JST
                                

* Wed 03 Dec 2014 12:48:17 AM JST


* Wed 03 Dec 2014 12:48:17 AM JST
                                 

* Wed 03 Dec 2014 12:48:17 AM JST


* Wed 03 Dec 2014 12:48:17 AM JST
                                 

* Wed 03 Dec 2014 12:48:17 AM JST


* Wed 03 Dec 2014 12:48:18 AM JST
                                 

* Wed 03 Dec 2014 12:48:18 AM JST


* Wed 03 Dec 2014 12:48:18 AM JST
                               

* Wed 03 Dec 2014 12:48:18 AM JST


* Wed 03 Dec 2014 12:48:18 AM JST
                               

* Wed 03 Dec 2014 12:48:18 AM JST


* Wed 03 Dec 2014 12:48:18 AM JST


* Wed 03 Dec 2014 12:48:18 AM JST


* Wed 03 Dec 2014 12:48:18 AM JST
                               

* Wed 03 Dec 2014 12:48:18 AM JST
                           

* Wed 03 Dec 2014 12:48:18 AM JST


* Wed 03 Dec 2014 12:48:18 AM JST


* Wed 03 Dec 2014 12:48:18 AM JST


* Wed 03 Dec 2014 12:48:18 AM JST
                                 

* Wed 03 Dec 2014 12:48:18 AM JST


* Wed 03 Dec 2014 12:48:19 AM JST
                                 

* Wed 03 Dec 2014 12:48:19 AM JST


* Wed 03 Dec 2014 12:48:19 AM JST
                             

* Wed 03 Dec 2014 12:48:19 AM JST
		snntp
* Wed 03 Dec 2014 12:48:19 AM JST
		snntp                         
* Wed 03 Dec 2014 12:48:19 AM JST
		rfs_server rfs              
* Wed 03 Dec 2014 12:48:19 AM JST


* Wed 03 Dec 2014 12:48:19 AM JST


* Wed 03 Dec 2014 12:48:19 AM JST


* Wed 03 Dec 2014 12:48:19 AM JST
                             

* Wed 03 Dec 2014 12:48:19 AM JST


* Wed 03 Dec 2014 12:48:19 AM JST


* Wed 03 Dec 2014 12:48:19 AM JST


* Wed 03 Dec 2014 12:48:19 AM JST


* Wed 03 Dec 2014 12:48:19 AM JST
		krcmd                       
* Wed 03 Dec 2014 12:48:20 AM JST
                               

* Wed 03 Dec 2014 12:48:20 AM JST
		uucpd                         
* Wed 03 Dec 2014 12:48:20 AM JST


* Wed 03 Dec 2014 12:48:20 AM JST
                               

* Wed 03 Dec 2014 12:48:20 AM JST
                               

* Wed 03 Dec 2014 12:48:20 AM JST
		readnews
* Wed 03 Dec 2014 12:48:20 AM JST
		chat
* Wed 03 Dec 2014 12:48:20 AM JST
		rpc
* Wed 03 Dec 2014 12:48:20 AM JST
		newdate
* Wed 03 Dec 2014 12:48:20 AM JST
		timeserver
* Wed 03 Dec 2014 12:48:20 AM JST
		router routed                 
* Wed 03 Dec 2014 12:48:20 AM JST


* Wed 03 Dec 2014 12:48:20 AM JST


* Wed 03 Dec 2014 12:48:20 AM JST
		spooler                     
* Wed 03 Dec 2014 12:48:21 AM JST


* Wed 03 Dec 2014 12:48:21 AM JST
		cmd                           
* Wed 03 Dec 2014 12:48:21 AM JST
		whod
* Wed 03 Dec 2014 12:48:21 AM JST


* Wed 03 Dec 2014 12:48:21 AM JST
		comsat
* Wed 03 Dec 2014 12:48:21 AM JST


* Wed 03 Dec 2014 12:48:21 AM JST


* Wed 03 Dec 2014 12:48:21 AM JST
                                   

* Wed 03 Dec 2014 12:48:21 AM JST


* Wed 03 Dec 2014 12:48:21 AM JST


* Wed 03 Dec 2014 12:48:21 AM JST
                               

* Wed 03 Dec 2014 12:48:21 AM JST
		dqs313_intercell
* Wed 03 Dec 2014 12:48:21 AM JST
		dqs313_intercell            
* Wed 03 Dec 2014 12:48:21 AM JST
		dqs313_execd
* Wed 03 Dec 2014 12:48:21 AM JST
		dqs313_execd                
* Wed 03 Dec 2014 12:48:22 AM JST
		dqs313_qmaster
* Wed 03 Dec 2014 12:48:22 AM JST
		dqs313_qmaster            
* Wed 03 Dec 2014 12:48:22 AM JST


* Wed 03 Dec 2014 12:48:22 AM JST
                                   

* Wed 03 Dec 2014 12:48:22 AM JST


* Wed 03 Dec 2014 12:48:22 AM JST
                                 

* Wed 03 Dec 2014 12:48:22 AM JST
                               

* Wed 03 Dec 2014 12:48:22 AM JST
                               

* Wed 03 Dec 2014 12:48:22 AM JST


* Wed 03 Dec 2014 12:48:22 AM JST
                                 

* Wed 03 Dec 2014 12:48:22 AM JST


* Wed 03 Dec 2014 12:48:22 AM JST


* Wed 03 Dec 2014 12:48:22 AM JST


* Wed 03 Dec 2014 12:48:22 AM JST
                           

* Wed 03 Dec 2014 12:48:23 AM JST


* Wed 03 Dec 2014 12:48:23 AM JST
                                 

* Wed 03 Dec 2014 12:48:23 AM JST


* Wed 03 Dec 2014 12:48:23 AM JST
                                 

* Wed 03 Dec 2014 12:48:23 AM JST


* Wed 03 Dec 2014 12:48:23 AM JST
                               

* Wed 03 Dec 2014 12:48:23 AM JST


* Wed 03 Dec 2014 12:48:23 AM JST
                                 

* Wed 03 Dec 2014 12:48:23 AM JST


* Wed 03 Dec 2014 12:48:23 AM JST
                                 

* Wed 03 Dec 2014 12:48:23 AM JST


* Wed 03 Dec 2014 12:48:23 AM JST
                               

* Wed 03 Dec 2014 12:48:23 AM JST
		Clearcase
* Wed 03 Dec 2014 12:48:23 AM JST
		Clearcase
* Wed 03 Dec 2014 12:48:24 AM JST
                               

* Wed 03 Dec 2014 12:48:24 AM JST


* Wed 03 Dec 2014 12:48:24 AM JST
                             

* Wed 03 Dec 2014 12:48:24 AM JST


* Wed 03 Dec 2014 12:48:24 AM JST


* Wed 03 Dec 2014 12:48:24 AM JST
                               

* Wed 03 Dec 2014 12:48:24 AM JST


* Wed 03 Dec 2014 12:48:24 AM JST
                                 

* Wed 03 Dec 2014 12:48:24 AM JST


* Wed 03 Dec 2014 12:48:24 AM JST
                               

* Wed 03 Dec 2014 12:48:24 AM JST
                                 

* Wed 03 Dec 2014 12:48:24 AM JST
                                 

* Wed 03 Dec 2014 12:48:24 AM JST


* Wed 03 Dec 2014 12:48:24 AM JST
                                   

* Wed 03 Dec 2014 12:48:24 AM JST
		wais
* Wed 03 Dec 2014 12:48:25 AM JST
		wais                          
* Wed 03 Dec 2014 12:48:25 AM JST


* Wed 03 Dec 2014 12:48:25 AM JST
                                 

* Wed 03 Dec 2014 12:48:25 AM JST


* Wed 03 Dec 2014 12:48:25 AM JST
                               

* Wed 03 Dec 2014 12:48:25 AM JST


* Wed 03 Dec 2014 12:48:25 AM JST
                               

* Wed 03 Dec 2014 12:48:25 AM JST


* Wed 03 Dec 2014 12:48:25 AM JST
                               

* Wed 03 Dec 2014 12:48:25 AM JST


* Wed 03 Dec 2014 12:48:25 AM JST
                               

* Wed 03 Dec 2014 12:48:26 AM JST


* Wed 03 Dec 2014 12:48:26 AM JST
                                 

* Wed 03 Dec 2014 12:48:26 AM JST


* Wed 03 Dec 2014 12:48:26 AM JST
                                   

* Wed 03 Dec 2014 12:48:26 AM JST


* Wed 03 Dec 2014 12:48:26 AM JST
                               

* Wed 03 Dec 2014 12:48:26 AM JST


* Wed 03 Dec 2014 12:48:26 AM JST
                                   

* Wed 03 Dec 2014 12:48:26 AM JST
		NeXTStep NextStep           
* Wed 03 Dec 2014 12:48:26 AM JST
		NeXTStep NextStep           
* Wed 03 Dec 2014 12:48:26 AM JST


* Wed 03 Dec 2014 12:48:26 AM JST
                                 

* Wed 03 Dec 2014 12:48:26 AM JST


* Wed 03 Dec 2014 12:48:26 AM JST
                                 

* Wed 03 Dec 2014 12:48:27 AM JST


* Wed 03 Dec 2014 12:48:27 AM JST


* Wed 03 Dec 2014 12:48:27 AM JST


* Wed 03 Dec 2014 12:48:27 AM JST
                               

* Wed 03 Dec 2014 12:48:27 AM JST
		snmptrap
* Wed 03 Dec 2014 12:48:27 AM JST
		snmptrap                    
* Wed 03 Dec 2014 12:48:27 AM JST


* Wed 03 Dec 2014 12:48:27 AM JST
                                 

* Wed 03 Dec 2014 12:48:27 AM JST
		imap
* Wed 03 Dec 2014 12:48:27 AM JST
		imap                          
* Wed 03 Dec 2014 12:48:27 AM JST


* Wed 03 Dec 2014 12:48:27 AM JST
                             

* Wed 03 Dec 2014 12:48:27 AM JST


* Wed 03 Dec 2014 12:48:27 AM JST
                             

* Wed 03 Dec 2014 12:48:27 AM JST


* Wed 03 Dec 2014 12:48:28 AM JST
                             

* Wed 03 Dec 2014 12:48:28 AM JST
		epmap
* Wed 03 Dec 2014 12:48:28 AM JST
		epmap                       
* Wed 03 Dec 2014 12:48:28 AM JST


* Wed 03 Dec 2014 12:48:28 AM JST
                               

* Wed 03 Dec 2014 12:48:28 AM JST
                                   

* Wed 03 Dec 2014 12:48:28 AM JST


* Wed 03 Dec 2014 12:48:28 AM JST
		readnews untp                 
* Wed 03 Dec 2014 12:48:28 AM JST


* Wed 03 Dec 2014 12:48:28 AM JST


* Wed 03 Dec 2014 12:48:28 AM JST
		authentication tap ident
* Wed 03 Dec 2014 12:48:28 AM JST
		portmapper
* Wed 03 Dec 2014 12:48:28 AM JST
		portmapper                  
* Wed 03 Dec 2014 12:48:28 AM JST
		pop-3
* Wed 03 Dec 2014 12:48:29 AM JST
		pop-3                         
* Wed 03 Dec 2014 12:48:29 AM JST
		pop-2
* Wed 03 Dec 2014 12:48:29 AM JST
		postoffice pop-2              
* Wed 03 Dec 2014 12:48:29 AM JST


* Wed 03 Dec 2014 12:48:29 AM JST
                               

* Wed 03 Dec 2014 12:48:29 AM JST
		cso-ns
* Wed 03 Dec 2014 12:48:29 AM JST
		cso-ns                      
* Wed 03 Dec 2014 12:48:29 AM JST
		dicom
* Wed 03 Dec 2014 12:48:29 AM JST
		dicom                       
* Wed 03 Dec 2014 12:48:29 AM JST
		tsap                        
* Wed 03 Dec 2014 12:48:29 AM JST
		hostname                    
* Wed 03 Dec 2014 12:48:29 AM JST


* Wed 03 Dec 2014 12:48:29 AM JST
		kerberos5 krb5 kerberos-sec	
* Wed 03 Dec 2014 12:48:29 AM JST
		kerberos5 krb5 kerberos-sec	
* Wed 03 Dec 2014 12:48:30 AM JST
		ttylink
* Wed 03 Dec 2014 12:48:30 AM JST
                                  

* Wed 03 Dec 2014 12:48:30 AM JST
		www                           
* Wed 03 Dec 2014 12:48:30 AM JST


* Wed 03 Dec 2014 12:48:30 AM JST
		netrjs
* Wed 03 Dec 2014 12:48:30 AM JST


* Wed 03 Dec 2014 12:48:30 AM JST
                                

* Wed 03 Dec 2014 12:48:30 AM JST


* Wed 03 Dec 2014 12:48:30 AM JST


* Wed 03 Dec 2014 12:48:30 AM JST
                                

* Wed 03 Dec 2014 12:48:30 AM JST


* Wed 03 Dec 2014 12:48:30 AM JST
                                

* Wed 03 Dec 2014 12:48:30 AM JST


* Wed 03 Dec 2014 12:48:30 AM JST
                                

* Wed 03 Dec 2014 12:48:31 AM JST
                                    

* Wed 03 Dec 2014 12:48:31 AM JST


* Wed 03 Dec 2014 12:48:31 AM JST
                                

* Wed 03 Dec 2014 12:48:31 AM JST


* Wed 03 Dec 2014 12:48:31 AM JST
                              

* Wed 03 Dec 2014 12:48:31 AM JST


* Wed 03 Dec 2014 12:48:31 AM JST
                                

* Wed 03 Dec 2014 12:48:31 AM JST
		nicname
* Wed 03 Dec 2014 12:48:31 AM JST
		name                      
* Wed 03 Dec 2014 12:48:31 AM JST
		resource                        
* Wed 03 Dec 2014 12:48:31 AM JST
		timserver
* Wed 03 Dec 2014 12:48:31 AM JST
		timserver
* Wed 03 Dec 2014 12:48:31 AM JST
		mail
* Wed 03 Dec 2014 12:48:31 AM JST


* Wed 03 Dec 2014 12:48:31 AM JST


* Wed 03 Dec 2014 12:48:32 AM JST
                                    

* Wed 03 Dec 2014 12:48:32 AM JST
		fspd
* Wed 03 Dec 2014 12:48:32 AM JST


* Wed 03 Dec 2014 12:48:32 AM JST


* Wed 03 Dec 2014 12:48:32 AM JST
		ttytst source
* Wed 03 Dec 2014 12:48:32 AM JST
		ttytst source
* Wed 03 Dec 2014 12:48:32 AM JST


* Wed 03 Dec 2014 12:48:32 AM JST
                                    

* Wed 03 Dec 2014 12:48:32 AM JST
		quote
* Wed 03 Dec 2014 12:48:32 AM JST


* Wed 03 Dec 2014 12:48:32 AM JST


* Wed 03 Dec 2014 12:48:32 AM JST


* Wed 03 Dec 2014 12:48:32 AM JST
		users
* Wed 03 Dec 2014 12:48:32 AM JST
		sink null
* Wed 03 Dec 2014 12:48:33 AM JST
		sink null
* Wed 03 Dec 2014 12:48:33 AM JST


* Wed 03 Dec 2014 12:48:33 AM JST


* Wed 03 Dec 2014 12:48:33 AM JST
                                 

* Wed 03 Dec 2014 12:53:39 AM JST
tcpmux                   1/tcp
    2 echo                     7/tcp
    4 discard                  9/tcp
    6 systat                   11/tcp
    7 daytime                  13/tcp
    9 netstat                  15/tcp
   10 qotd                     17/tcp
   11 msp                      18/tcp
   13 chargen                  19/tcp
   15 ftp-data                 20/tcp
   16 ftp                      21/tcp
   18 ssh                      22/tcp
   20 telnet                   23/tcp
   21 smtp                     25/tcp
   22 time                     37/tcp
   25 nameserver               42/tcp
   26 whois                    43/tcp
   27 tacacs                   49/tcp
   29 re-mail-ck               50/tcp
   31 domain                   53/tcp
   33 mtp                      57/tcp
   34 tacacs-ds                65/tcp
   36 bootps                   67/tcp
   38 bootpc                   68/tcp
   41 gopher                   70/tcp
   43 rje                      77/tcp
   44 finger                   79/tcp
   45 http                     80/tcp
   47 link                     87/tcp
   48 kerberos                 88/tcp
   50 supdup                   95/tcp
   51 hostnames                101/tcp
   52 iso-tsap                 102/tcp
   53 acr-nema                 104/tcp
   55 csnet-ns                 105/tcp
   57 rtelnet                  107/tcp
   59 pop2                     109/tcp
   61 pop3                     110/tcp
   63 sunrpc                   111/tcp
   65 auth                     113/tcp
   66 sftp                     115/tcp
   67 uucp-path                117/tcp
   68 nntp                     119/tcp
   69 ntp                      123/tcp
   71 pwdgen                   129/tcp
   73 loc-srv                  135/tcp
   75 netbios-ns               137/tcp
   77 netbios-dgm              138/tcp
   79 netbios-ssn              139/tcp
   81 imap2                    143/tcp
   83 snmp                     161/tcp
   85 snmp-trap                162/tcp
   87 cmip-man                 163/tcp
   89 cmip-agent               164/tcp
   91 mailq                    174/tcp
   93 xdmcp                    177/tcp
   95 nextstep                 178/tcp
   97 bgp                      179/tcp
   99 prospero                 191/tcp
  101 irc                      194/tcp
  103 smux                     199/tcp
  105 at-rtmp                  201/tcp
  107 at-nbp                   202/tcp
  109 at-echo                  204/tcp
  111 at-zis                   206/tcp
  113 qmtp                     209/tcp
  115 z3950                    210/tcp
  117 ipx                      213/tcp
  119 imap3                    220/tcp
  121 pawserv                  345/tcp
  123 zserv                    346/tcp
  125 fatserv                  347/tcp
  127 rpc2portmap              369/tcp
  129 codaauth2                370/tcp
  131 clearcase                371/tcp
  133 ulistserv                372/tcp
  135 ldap                     389/tcp
  137 imsp                     406/tcp
  139 svrloc                   427/tcp
  141 https                    443/tcp
  143 snpp                     444/tcp
  145 microsoft-ds             445/tcp
  147 kpasswd                  464/tcp
  149 saft                     487/tcp
  151 isakmp                   500/tcp
  153 rtsp                     554/tcp
  155 nqs                      607/tcp
  157 npmp-local               610/tcp
  159 npmp-gui                 611/tcp
  161 hmmp-ind                 612/tcp
  164 qmqp                     628/tcp
  166 ipp                      631/tcp
  168 exec                     512/tcp
  170 login                    513/tcp
  172 shell                    514/tcp
  174 printer                  515/tcp
  179 tempo                    526/tcp
  180 courier                  530/tcp
  181 conference               531/tcp
  182 netnews                  532/tcp
  184 gdomap                   538/tcp
  186 uucp                     540/tcp
  187 klogin                   543/tcp
  188 kshell                   544/tcp
  189 dhcpv6-client            546/tcp
  191 dhcpv6-server            547/tcp
  193 afpovertcp               548/tcp
  194 afpovertcp               548/udp
  195 idfp                     549/tcp
  197 remotefs                 556/tcp
  198 nntps                    563/tcp
  200 submission               587/tcp
  202 ldaps                    636/tcp
  204 tinc                     655/tcp
  206 silc                     706/tcp
  208 kerberos-adm             749/tcp
  209 webster                  765/tcp
  211 rsync                    873/tcp
  213 ftps-data                989/tcp
  214 ftps                     990/tcp
  215 telnets                  992/tcp
  217 imaps                    993/tcp
  219 ircs                     994/tcp
  221 pop3s                    995/tcp
  223 socks                    1080/tcp
  225 proofd                   1093/tcp
  227 rootd                    1094/tcp
  229 openvpn                  1194/tcp
  231 rmiregistry              1099/tcp
  233 kazaa                    1214/tcp
  235 nessus                   1241/tcp
  237 lotusnote                1352/tcp
  239 ms-sql-s                 1433/tcp
  241 ms-sql-m                 1434/tcp
  243 ingreslock               1524/tcp
  245 prospero-np              1525/tcp
  247 datametrics              1645/tcp
  249 sa-msg-port              1646/tcp
  251 kermit                   1649/tcp
  253 groupwise                1677/tcp
  255 l2f                      1701/tcp
  257 radius                   1812/tcp
  259 radius-acct              1813/tcp
  261 msnp                     1863/tcp
  263 unix-status              1957/tcp
  264 log-server               1958/tcp
  265 remoteping               1959/tcp
  266 cisco-sccp               2000/tcp
  268 search                   2010/tcp
  269 pipe-server              2010/tcp
  270 nfs                      2049/tcp
  272 gnunet                   2086/tcp
  274 rtcm-sc104               2101/tcp
  276 gsigatekeeper            2119/tcp
  278 gris                     2135/tcp
  280 cvspserver               2401/tcp
  282 venus                    2430/tcp
  284 venus-se                 2431/tcp
  286 codasrv                  2432/tcp
  288 codasrv-se               2433/tcp
  290 mon                      2583/tcp
  292 dict                     2628/tcp
  294 f5-globalsite            2792/tcp
  296 gsiftp                   2811/tcp
  298 gpsd                     2947/tcp
  300 gds-db                   3050/tcp
  302 icpv2                    3130/tcp
  304 iscsi-target             3260/tcp
  305 mysql                    3306/tcp
  307 nut                      3493/tcp
  309 distcc                   3632/tcp
  311 daap                     3689/tcp
  313 svn                      3690/tcp
  315 suucp                    4031/tcp
  317 sysrqd                   4094/tcp
  319 sieve                    4190/tcp
  320 epmd                     4369/tcp
  322 remctl                   4373/tcp
  324 f5-iquery                4353/tcp
  326 iax                      4569/tcp
  328 mtn                      4691/tcp
  330 radmin-port              4899/tcp
  333 rfe                      5002/tcp
  334 mmcc                     5050/tcp
  336 sip                      5060/tcp
  338 sip-tls                  5061/tcp
  340 aol                      5190/tcp
  342 xmpp-client              5222/tcp
  344 xmpp-server              5269/tcp
  346 cfengine                 5308/tcp
  348 mdns                     5353/tcp
  350 postgresql               5432/tcp
  352 freeciv                  5556/tcp
  354 amqp                     5672/tcp
  357 ggz                      5688/tcp
  359 x11                      6000/tcp
  361 x11-1                    6001/tcp
  363 x11-2                    6002/tcp
  365 x11-3                    6003/tcp
  367 x11-4                    6004/tcp
  369 x11-5                    6005/tcp
  371 x11-6                    6006/tcp
  373 x11-7                    6007/tcp
  375 gnutella-svc             6346/tcp
  377 gnutella-rtr             6347/tcp
  379 sge-qmaster              6444/tcp
  381 sge-execd                6445/tcp
  383 mysql-proxy              6446/tcp
  385 afs3-fileserver            7000/tcp
  387 afs3-callback            7001/tcp
  389 afs3-prserver            7002/tcp
  391 afs3-vlserver            7003/tcp
  393 afs3-kaserver            7004/tcp
  395 afs3-volser              7005/tcp
  397 afs3-errors              7006/tcp
  399 afs3-bos                 7007/tcp
  401 afs3-update              7008/tcp
  403 afs3-rmtsys              7009/tcp
  405 font-service             7100/tcp
  407 http-alt                 8080/tcp
  409 bacula-dir               9101/tcp
  411 bacula-fd                9102/tcp
  413 bacula-sd                9103/tcp
  415 xmms2                    9667/tcp
  417 nbd                      10809/tcp
  418 zabbix-agent             10050/tcp
  420 zabbix-trapper           10051/tcp
  422 amanda                   10080/tcp
  424 hkp                      11371/tcp
  426 bprd                     13720/tcp
  428 bpdbm                    13721/tcp
  430 bpjava-msvc              13722/tcp
  432 vnetd                    13724/tcp
  434 bpcd                     13782/tcp
  436 vopied                   13783/tcp
  438 dcap                     22125/tcp
  439 gsidcap                  22128/tcp
  440 wnn6                     22273/tcp
  447 kerberos4                750/tcp
  449 kerberos-master          751/tcp
  451 krb-prop                 754/tcp
  452 krbupdate                760/tcp
  453 console                  782/tcp
  454 swat                     901/tcp
  455 kpop                     1109/tcp
  456 knetd                    2053/tcp
  460 eklogin                  2105/tcp
  461 kx                       2111/tcp
  462 iprop                    2121/tcp
  463 supfilesrv               871/tcp
  464 supfiledbg               1127/tcp
  465 linuxconf                98/tcp
  466 poppassd                 106/tcp
  468 ssmtp                    465/tcp
  469 moira-db                 775/tcp
  470 moira-update             777/tcp
  472 spamd                    783/tcp
  473 omirr                    808/tcp
  475 customs                  1001/tcp
  477 skkserv                  1178/tcp
  479 rmtcfg                   1236/tcp
  480 wipld                    1300/tcp
  481 xtel                     1313/tcp
  482 xtelw                    1314/tcp
  483 support                  1529/tcp
  484 cfinger                  2003/tcp
  485 frox                     2121/tcp
  486 ninstall                 2150/tcp
  488 zebrasrv                 2600/tcp
  489 zebra                    2601/tcp
  490 ripd                     2602/tcp
  491 ripngd                   2603/tcp
  492 ospfd                    2604/tcp
  493 bgpd                     2605/tcp
  494 ospf6d                   2606/tcp
  495 ospfapi                  2607/tcp
  496 isisd                    2608/tcp
  497 afbackup                 2988/tcp
  499 afmbackup                2989/tcp
  501 xtell                    4224/tcp
  502 fax                      4557/tcp
  503 hylafax                  4559/tcp
  504 distmp3                  4600/tcp
  505 munin                    4949/tcp
  506 enbd-cstatd              5051/tcp
  507 enbd-sstatd              5052/tcp
  508 pcrd                     5151/tcp
  509 noclog                   5354/tcp
  511 hostmon                  5355/tcp
  514 nrpe                     5666/tcp
  515 nsca                     5667/tcp
  516 mrtd                     5674/tcp
  517 bgpsim                   5675/tcp
  518 canna                    5680/tcp
  519 sane-port                6566/tcp
  520 ircd                     6667/tcp
  521 zope-ftp                 8021/tcp
  522 tproxy                   8081/tcp
  523 omniorb                  8088/tcp
  525 clc-build-daemon           8990/tcp
  526 xinetd                   9098/tcp
  528 git                      9418/tcp
  529 zope                     9673/tcp
  530 webmin                   10000/tcp
  531 kamanda                  10081/tcp
  533 amandaidx                10082/tcp
  534 amidxtape                10083/tcp
  535 smsqp                    11201/tcp
  537 xpilot                   15345/tcp
  542 sgi-cad                  17004/tcp
  543 isdnlog                  20011/tcp
  545 vboxd                    20012/tcp
  547 binkp                    24554/tcp
  548 asp                      27374/tcp
  550 csync2                   30865/tcp
  551 dircproxy                57000/tcp
  552 tfido                    60177/tcp
  553 fido                     60179/tcp
* Wed 03 Dec 2014 12:53:58 AM JST

* Wed 03 Dec 2014 12:53:58 AM JST

* Wed 03 Dec 2014 12:53:58 AM JST
tcpmux                   1/tcp

* Wed 03 Dec 2014 12:54:12 AM JST
553 
* Wed 03 Dec 2014 12:54:12 AM JST
552 
* Wed 03 Dec 2014 12:54:12 AM JST
551 
* Wed 03 Dec 2014 12:54:12 AM JST
550 
* Wed 03 Dec 2014 12:54:12 AM JST
548 
* Wed 03 Dec 2014 12:54:12 AM JST
547 
* Wed 03 Dec 2014 12:54:12 AM JST
545 
* Wed 03 Dec 2014 12:54:12 AM JST
543 
* Wed 03 Dec 2014 12:54:12 AM JST
542 
* Wed 03 Dec 2014 12:54:13 AM JST
537 
* Wed 03 Dec 2014 12:54:13 AM JST
535 
* Wed 03 Dec 2014 12:54:13 AM JST
534 
* Wed 03 Dec 2014 12:54:13 AM JST
533 
* Wed 03 Dec 2014 12:54:13 AM JST
531 
* Wed 03 Dec 2014 12:54:13 AM JST
530 
* Wed 03 Dec 2014 12:54:13 AM JST
529 
* Wed 03 Dec 2014 12:54:13 AM JST
528 
* Wed 03 Dec 2014 12:54:13 AM JST
526 
* Wed 03 Dec 2014 12:54:13 AM JST
525 
* Wed 03 Dec 2014 12:54:13 AM JST
523 
* Wed 03 Dec 2014 12:54:13 AM JST
522 
* Wed 03 Dec 2014 12:54:13 AM JST
521 
* Wed 03 Dec 2014 12:54:13 AM JST
520 
* Wed 03 Dec 2014 12:54:13 AM JST
519 
* Wed 03 Dec 2014 12:54:14 AM JST
518 
* Wed 03 Dec 2014 12:54:14 AM JST
517 
* Wed 03 Dec 2014 12:54:14 AM JST
516 
* Wed 03 Dec 2014 12:54:14 AM JST
515 
* Wed 03 Dec 2014 12:54:14 AM JST
514 
* Wed 03 Dec 2014 12:54:14 AM JST
511 
* Wed 03 Dec 2014 12:54:14 AM JST
509 
* Wed 03 Dec 2014 12:54:14 AM JST
508 
* Wed 03 Dec 2014 12:54:14 AM JST
507 
* Wed 03 Dec 2014 12:54:14 AM JST
506 
* Wed 03 Dec 2014 12:54:14 AM JST
505 
* Wed 03 Dec 2014 12:54:14 AM JST
504 
* Wed 03 Dec 2014 12:54:14 AM JST
503 
* Wed 03 Dec 2014 12:54:14 AM JST
502 
* Wed 03 Dec 2014 12:54:15 AM JST
501 
* Wed 03 Dec 2014 12:54:15 AM JST
499 
* Wed 03 Dec 2014 12:54:15 AM JST
497 
* Wed 03 Dec 2014 12:54:15 AM JST
496 
* Wed 03 Dec 2014 12:54:15 AM JST
495 
* Wed 03 Dec 2014 12:54:15 AM JST
494 
* Wed 03 Dec 2014 12:54:15 AM JST
493 
* Wed 03 Dec 2014 12:54:15 AM JST
492 
* Wed 03 Dec 2014 12:54:15 AM JST
491 
* Wed 03 Dec 2014 12:54:15 AM JST
490 
* Wed 03 Dec 2014 12:54:15 AM JST
489 
* Wed 03 Dec 2014 12:54:15 AM JST
488 
* Wed 03 Dec 2014 12:54:15 AM JST
486 
* Wed 03 Dec 2014 12:54:15 AM JST
485 
* Wed 03 Dec 2014 12:54:16 AM JST
484 
* Wed 03 Dec 2014 12:54:16 AM JST
483 
* Wed 03 Dec 2014 12:54:16 AM JST
482 
* Wed 03 Dec 2014 12:54:16 AM JST
481 
* Wed 03 Dec 2014 12:54:16 AM JST
480 
* Wed 03 Dec 2014 12:54:16 AM JST
479 
* Wed 03 Dec 2014 12:54:16 AM JST
477 
* Wed 03 Dec 2014 12:54:16 AM JST
475 
* Wed 03 Dec 2014 12:54:16 AM JST
473 
* Wed 03 Dec 2014 12:54:16 AM JST
472 
* Wed 03 Dec 2014 12:54:17 AM JST
470 
* Wed 03 Dec 2014 12:54:17 AM JST
469 
* Wed 03 Dec 2014 12:54:17 AM JST
468 
* Wed 03 Dec 2014 12:54:17 AM JST
466 
* Wed 03 Dec 2014 12:54:17 AM JST
465 
* Wed 03 Dec 2014 12:54:17 AM JST
464 
* Wed 03 Dec 2014 12:54:17 AM JST
463 
* Wed 03 Dec 2014 12:54:17 AM JST
462 
* Wed 03 Dec 2014 12:54:17 AM JST
461 
* Wed 03 Dec 2014 12:54:17 AM JST
460 
* Wed 03 Dec 2014 12:54:17 AM JST
456 
* Wed 03 Dec 2014 12:54:17 AM JST
455 
* Wed 03 Dec 2014 12:54:17 AM JST
454 
* Wed 03 Dec 2014 12:54:17 AM JST
453 
* Wed 03 Dec 2014 12:54:17 AM JST
452 
* Wed 03 Dec 2014 12:54:17 AM JST
451 
* Wed 03 Dec 2014 12:54:18 AM JST
449 
* Wed 03 Dec 2014 12:54:18 AM JST
447 
* Wed 03 Dec 2014 12:54:18 AM JST
440 
* Wed 03 Dec 2014 12:54:18 AM JST
439 
* Wed 03 Dec 2014 12:54:18 AM JST
438 
* Wed 03 Dec 2014 12:54:18 AM JST
436 
* Wed 03 Dec 2014 12:54:18 AM JST
434 
* Wed 03 Dec 2014 12:54:18 AM JST
432 
* Wed 03 Dec 2014 12:54:18 AM JST
430 
* Wed 03 Dec 2014 12:54:18 AM JST
428 
* Wed 03 Dec 2014 12:54:18 AM JST
426 
* Wed 03 Dec 2014 12:54:18 AM JST
424 
* Wed 03 Dec 2014 12:54:18 AM JST
422 
* Wed 03 Dec 2014 12:54:18 AM JST
420 
* Wed 03 Dec 2014 12:54:19 AM JST
418 
* Wed 03 Dec 2014 12:54:19 AM JST
417 
* Wed 03 Dec 2014 12:54:19 AM JST
415 
* Wed 03 Dec 2014 12:54:19 AM JST
413 
* Wed 03 Dec 2014 12:54:19 AM JST
411 
* Wed 03 Dec 2014 12:54:19 AM JST
409 
* Wed 03 Dec 2014 12:54:19 AM JST
407 
* Wed 03 Dec 2014 12:54:19 AM JST
405 
* Wed 03 Dec 2014 12:54:19 AM JST
403 
* Wed 03 Dec 2014 12:54:19 AM JST
401 
* Wed 03 Dec 2014 12:54:19 AM JST
399 
* Wed 03 Dec 2014 12:54:19 AM JST
397 
* Wed 03 Dec 2014 12:54:20 AM JST
395 
* Wed 03 Dec 2014 12:54:20 AM JST
393 
* Wed 03 Dec 2014 12:54:20 AM JST
391 
* Wed 03 Dec 2014 12:54:20 AM JST
389 
* Wed 03 Dec 2014 12:54:20 AM JST
387 
* Wed 03 Dec 2014 12:54:20 AM JST
385 
* Wed 03 Dec 2014 12:54:20 AM JST
383 
* Wed 03 Dec 2014 12:54:21 AM JST
381 
* Wed 03 Dec 2014 12:54:21 AM JST
379 
* Wed 03 Dec 2014 12:54:21 AM JST
377 
* Wed 03 Dec 2014 12:54:22 AM JST
375 
* Wed 03 Dec 2014 12:54:22 AM JST
373 
* Wed 03 Dec 2014 12:54:22 AM JST
371 
* Wed 03 Dec 2014 12:54:22 AM JST
369 
* Wed 03 Dec 2014 12:54:22 AM JST
367 
* Wed 03 Dec 2014 12:54:22 AM JST
365 
* Wed 03 Dec 2014 12:54:22 AM JST
363 
* Wed 03 Dec 2014 12:54:23 AM JST
361 
* Wed 03 Dec 2014 12:54:23 AM JST
359 
* Wed 03 Dec 2014 12:54:23 AM JST
357 
* Wed 03 Dec 2014 12:54:23 AM JST
354 
* Wed 03 Dec 2014 12:54:24 AM JST
352 
* Wed 03 Dec 2014 12:54:24 AM JST
350 
* Wed 03 Dec 2014 12:54:24 AM JST
348 
* Wed 03 Dec 2014 12:54:24 AM JST
346 
* Wed 03 Dec 2014 12:54:24 AM JST
344 
* Wed 03 Dec 2014 12:54:24 AM JST
342 
* Wed 03 Dec 2014 12:54:25 AM JST
340 
* Wed 03 Dec 2014 12:54:25 AM JST
338 
* Wed 03 Dec 2014 12:54:25 AM JST
336 
* Wed 03 Dec 2014 12:54:25 AM JST
334 
* Wed 03 Dec 2014 12:54:25 AM JST
333 
* Wed 03 Dec 2014 12:54:25 AM JST
330 
* Wed 03 Dec 2014 12:54:25 AM JST
328 
* Wed 03 Dec 2014 12:54:25 AM JST
326 
* Wed 03 Dec 2014 12:54:25 AM JST
324 
* Wed 03 Dec 2014 12:54:26 AM JST
322 
* Wed 03 Dec 2014 12:54:26 AM JST
320 
* Wed 03 Dec 2014 12:54:26 AM JST
319 
* Wed 03 Dec 2014 12:54:26 AM JST
317 
* Wed 03 Dec 2014 12:54:26 AM JST
315 
* Wed 03 Dec 2014 12:54:26 AM JST
313 
* Wed 03 Dec 2014 12:54:26 AM JST
311 
* Wed 03 Dec 2014 12:54:26 AM JST
309 
* Wed 03 Dec 2014 12:54:26 AM JST
307 
* Wed 03 Dec 2014 12:54:26 AM JST
305 
* Wed 03 Dec 2014 12:54:26 AM JST
304 
* Wed 03 Dec 2014 12:54:26 AM JST
302 
* Wed 03 Dec 2014 12:54:26 AM JST
300 
* Wed 03 Dec 2014 12:54:26 AM JST
298 
* Wed 03 Dec 2014 12:54:27 AM JST
296 
* Wed 03 Dec 2014 12:54:27 AM JST
294 
* Wed 03 Dec 2014 12:54:27 AM JST
292 
* Wed 03 Dec 2014 12:54:27 AM JST
290 
* Wed 03 Dec 2014 12:54:27 AM JST
288 
* Wed 03 Dec 2014 12:54:27 AM JST
286 
* Wed 03 Dec 2014 12:54:27 AM JST
284 
* Wed 03 Dec 2014 12:54:27 AM JST
282 
* Wed 03 Dec 2014 12:54:27 AM JST
280 
* Wed 03 Dec 2014 12:54:27 AM JST
278 
* Wed 03 Dec 2014 12:54:27 AM JST
276 
* Wed 03 Dec 2014 12:54:27 AM JST
274 
* Wed 03 Dec 2014 12:54:27 AM JST
272 
* Wed 03 Dec 2014 12:54:27 AM JST
270 
* Wed 03 Dec 2014 12:54:27 AM JST
269 
* Wed 03 Dec 2014 12:54:28 AM JST
268 
* Wed 03 Dec 2014 12:54:28 AM JST
266 
* Wed 03 Dec 2014 12:54:28 AM JST
265 
* Wed 03 Dec 2014 12:54:28 AM JST
264 
* Wed 03 Dec 2014 12:54:28 AM JST
263 
* Wed 03 Dec 2014 12:54:28 AM JST
261 
* Wed 03 Dec 2014 12:54:28 AM JST
259 
* Wed 03 Dec 2014 12:54:28 AM JST
257 
* Wed 03 Dec 2014 12:54:28 AM JST
255 
* Wed 03 Dec 2014 12:54:28 AM JST
253 
* Wed 03 Dec 2014 12:54:28 AM JST
251 
* Wed 03 Dec 2014 12:54:28 AM JST
249 
* Wed 03 Dec 2014 12:54:28 AM JST
247 
* Wed 03 Dec 2014 12:54:28 AM JST
245 
* Wed 03 Dec 2014 12:54:28 AM JST
243 
* Wed 03 Dec 2014 12:54:29 AM JST
241 
* Wed 03 Dec 2014 12:54:29 AM JST
239 
* Wed 03 Dec 2014 12:54:29 AM JST
237 
* Wed 03 Dec 2014 12:54:29 AM JST
235 
* Wed 03 Dec 2014 12:54:29 AM JST
233 
* Wed 03 Dec 2014 12:54:29 AM JST
231 
* Wed 03 Dec 2014 12:54:29 AM JST
229 
* Wed 03 Dec 2014 12:54:29 AM JST
227 
* Wed 03 Dec 2014 12:54:29 AM JST
225 
* Wed 03 Dec 2014 12:54:29 AM JST
223 
* Wed 03 Dec 2014 12:54:30 AM JST
221 
* Wed 03 Dec 2014 12:54:30 AM JST
219 
* Wed 03 Dec 2014 12:54:30 AM JST
217 
* Wed 03 Dec 2014 12:54:30 AM JST
215 
* Wed 03 Dec 2014 12:54:30 AM JST
214 
* Wed 03 Dec 2014 12:54:30 AM JST
213 
* Wed 03 Dec 2014 12:54:30 AM JST
211 
* Wed 03 Dec 2014 12:54:30 AM JST
209 
* Wed 03 Dec 2014 12:54:30 AM JST
208 
* Wed 03 Dec 2014 12:54:31 AM JST
206 
* Wed 03 Dec 2014 12:54:31 AM JST
204 
* Wed 03 Dec 2014 12:54:31 AM JST
202 
* Wed 03 Dec 2014 12:54:31 AM JST
200 
* Wed 03 Dec 2014 12:54:31 AM JST
198 
* Wed 03 Dec 2014 12:54:31 AM JST
197 
* Wed 03 Dec 2014 12:54:31 AM JST
195 
* Wed 03 Dec 2014 12:54:31 AM JST
194 
* Wed 03 Dec 2014 12:54:31 AM JST
193 
* Wed 03 Dec 2014 12:54:31 AM JST
191 
* Wed 03 Dec 2014 12:54:31 AM JST
189 
* Wed 03 Dec 2014 12:54:31 AM JST
188 
* Wed 03 Dec 2014 12:54:31 AM JST
187 
* Wed 03 Dec 2014 12:54:31 AM JST
186 
* Wed 03 Dec 2014 12:54:31 AM JST
184 
* Wed 03 Dec 2014 12:54:31 AM JST
182 
* Wed 03 Dec 2014 12:54:32 AM JST
181 
* Wed 03 Dec 2014 12:54:32 AM JST
180 
* Wed 03 Dec 2014 12:54:32 AM JST
179 
* Wed 03 Dec 2014 12:54:32 AM JST
174 
* Wed 03 Dec 2014 12:54:32 AM JST
172 
* Wed 03 Dec 2014 12:54:32 AM JST
170 
* Wed 03 Dec 2014 12:54:32 AM JST
168 
* Wed 03 Dec 2014 12:54:32 AM JST
166 
* Wed 03 Dec 2014 12:54:32 AM JST
164 
* Wed 03 Dec 2014 12:54:32 AM JST
161 
* Wed 03 Dec 2014 12:54:32 AM JST
159 
* Wed 03 Dec 2014 12:54:32 AM JST
157 
* Wed 03 Dec 2014 12:54:32 AM JST
155 
* Wed 03 Dec 2014 12:54:32 AM JST
153 
* Wed 03 Dec 2014 12:54:32 AM JST
151 
* Wed 03 Dec 2014 12:54:33 AM JST
149 
* Wed 03 Dec 2014 12:54:33 AM JST
147 
* Wed 03 Dec 2014 12:54:33 AM JST
145 
* Wed 03 Dec 2014 12:54:33 AM JST
143 
* Wed 03 Dec 2014 12:54:33 AM JST
141 
* Wed 03 Dec 2014 12:54:33 AM JST
139 
* Wed 03 Dec 2014 12:54:33 AM JST
137 
* Wed 03 Dec 2014 12:54:33 AM JST
135 
* Wed 03 Dec 2014 12:54:33 AM JST
133 
* Wed 03 Dec 2014 12:54:33 AM JST
131 
* Wed 03 Dec 2014 12:54:33 AM JST
129 
* Wed 03 Dec 2014 12:54:33 AM JST
127 
* Wed 03 Dec 2014 12:54:33 AM JST
125 
* Wed 03 Dec 2014 12:54:33 AM JST
123 
* Wed 03 Dec 2014 12:54:34 AM JST
121 
* Wed 03 Dec 2014 12:54:34 AM JST
119 
* Wed 03 Dec 2014 12:54:34 AM JST
117 
* Wed 03 Dec 2014 12:54:34 AM JST
115 
* Wed 03 Dec 2014 12:54:34 AM JST
113 
* Wed 03 Dec 2014 12:54:34 AM JST
111 
* Wed 03 Dec 2014 12:54:34 AM JST
109 
* Wed 03 Dec 2014 12:54:34 AM JST
107 
* Wed 03 Dec 2014 12:54:34 AM JST
105 
* Wed 03 Dec 2014 12:54:34 AM JST
103 
* Wed 03 Dec 2014 12:54:34 AM JST
101 
* Wed 03 Dec 2014 12:54:34 AM JST
99 
* Wed 03 Dec 2014 12:54:34 AM JST
97 
* Wed 03 Dec 2014 12:54:34 AM JST
95 
* Wed 03 Dec 2014 12:54:35 AM JST
93 
* Wed 03 Dec 2014 12:54:35 AM JST
91 
* Wed 03 Dec 2014 12:54:35 AM JST
89 
* Wed 03 Dec 2014 12:54:35 AM JST
87 
* Wed 03 Dec 2014 12:54:35 AM JST
85 
* Wed 03 Dec 2014 12:54:35 AM JST
83 
* Wed 03 Dec 2014 12:54:35 AM JST
81 
* Wed 03 Dec 2014 12:54:35 AM JST
79 
* Wed 03 Dec 2014 12:54:35 AM JST
77 
* Wed 03 Dec 2014 12:54:36 AM JST
75 
* Wed 03 Dec 2014 12:54:36 AM JST
73 
* Wed 03 Dec 2014 12:54:36 AM JST
71 
* Wed 03 Dec 2014 12:54:36 AM JST
69 
* Wed 03 Dec 2014 12:54:36 AM JST
68 
* Wed 03 Dec 2014 12:54:36 AM JST
67 
* Wed 03 Dec 2014 12:54:36 AM JST
66 
* Wed 03 Dec 2014 12:54:36 AM JST
65 
* Wed 03 Dec 2014 12:54:36 AM JST
63 
* Wed 03 Dec 2014 12:54:36 AM JST
61 
* Wed 03 Dec 2014 12:54:36 AM JST
59 
* Wed 03 Dec 2014 12:54:36 AM JST
57 
* Wed 03 Dec 2014 12:54:36 AM JST
55 
* Wed 03 Dec 2014 12:54:36 AM JST
53 
* Wed 03 Dec 2014 12:54:37 AM JST
52 
* Wed 03 Dec 2014 12:54:37 AM JST
51 
* Wed 03 Dec 2014 12:54:37 AM JST
50 
* Wed 03 Dec 2014 12:54:37 AM JST
48 
* Wed 03 Dec 2014 12:54:37 AM JST
47 
* Wed 03 Dec 2014 12:54:37 AM JST
45 
* Wed 03 Dec 2014 12:54:37 AM JST
44 
* Wed 03 Dec 2014 12:54:37 AM JST
43 
* Wed 03 Dec 2014 12:54:37 AM JST
41 
* Wed 03 Dec 2014 12:54:37 AM JST
38 
* Wed 03 Dec 2014 12:54:37 AM JST
36 
* Wed 03 Dec 2014 12:54:37 AM JST
34 
* Wed 03 Dec 2014 12:54:37 AM JST
33 
* Wed 03 Dec 2014 12:54:37 AM JST
31 
* Wed 03 Dec 2014 12:54:38 AM JST
29 
* Wed 03 Dec 2014 12:54:38 AM JST
27 
* Wed 03 Dec 2014 12:54:38 AM JST
26 
* Wed 03 Dec 2014 12:54:38 AM JST
25 
* Wed 03 Dec 2014 12:54:38 AM JST
22 
* Wed 03 Dec 2014 12:54:38 AM JST
21 
* Wed 03 Dec 2014 12:54:38 AM JST
20 
* Wed 03 Dec 2014 12:54:38 AM JST
18 
* Wed 03 Dec 2014 12:54:38 AM JST
16 
* Wed 03 Dec 2014 12:54:38 AM JST
15 
* Wed 03 Dec 2014 12:54:38 AM JST
13 
* Wed 03 Dec 2014 12:54:38 AM JST
11 
* Wed 03 Dec 2014 12:54:39 AM JST
10 
* Wed 03 Dec 2014 12:54:39 AM JST
9 
* Wed 03 Dec 2014 12:54:39 AM JST
7 
* Wed 03 Dec 2014 12:54:39 AM JST
6 
* Wed 03 Dec 2014 12:54:39 AM JST
4 
* Wed 03 Dec 2014 12:54:39 AM JST
2 
* Wed 03 Dec 2014 12:55:36 AM JST

* Wed 03 Dec 2014 12:55:36 AM JST

* Wed 03 Dec 2014 12:55:36 AM JST
  afpovertcp               548/udp

* Wed 03 Dec 2014 12:56:54 AM JST
tcp
* Wed 03 Dec 2014 12:56:55 AM JST
tcp
* Wed 03 Dec 2014 12:56:55 AM JST
tcp
* Wed 03 Dec 2014 12:56:55 AM JST
tcp
* Wed 03 Dec 2014 12:56:55 AM JST
tcp
* Wed 03 Dec 2014 12:56:55 AM JST
tcp
* Wed 03 Dec 2014 12:56:56 AM JST
tcp
* Wed 03 Dec 2014 12:56:56 AM JST
tcp
* Wed 03 Dec 2014 12:56:56 AM JST
tcp
* Wed 03 Dec 2014 12:56:56 AM JST
tcp
* Wed 03 Dec 2014 12:56:56 AM JST
tcp
* Wed 03 Dec 2014 12:56:56 AM JST
tcp
* Wed 03 Dec 2014 12:56:56 AM JST
tcp
* Wed 03 Dec 2014 12:56:56 AM JST
tcp
* Wed 03 Dec 2014 12:56:56 AM JST
tcp
* Wed 03 Dec 2014 12:56:56 AM JST
tcp
* Wed 03 Dec 2014 12:56:56 AM JST
tcp
* Wed 03 Dec 2014 12:56:56 AM JST
tcp
* Wed 03 Dec 2014 12:56:56 AM JST
tcp
* Wed 03 Dec 2014 12:56:56 AM JST
tcp
* Wed 03 Dec 2014 12:56:56 AM JST
tcp
* Wed 03 Dec 2014 12:56:57 AM JST
tcp
* Wed 03 Dec 2014 12:56:57 AM JST
tcp
* Wed 03 Dec 2014 12:56:57 AM JST
tcp
* Wed 03 Dec 2014 12:56:57 AM JST
tcp
* Wed 03 Dec 2014 12:56:57 AM JST
tcp
* Wed 03 Dec 2014 12:56:57 AM JST
tcp
* Wed 03 Dec 2014 12:56:57 AM JST
tcp
* Wed 03 Dec 2014 12:56:57 AM JST
tcp
* Wed 03 Dec 2014 12:56:57 AM JST
tcp
* Wed 03 Dec 2014 12:56:57 AM JST
tcp
* Wed 03 Dec 2014 12:56:57 AM JST
tcp
* Wed 03 Dec 2014 12:56:58 AM JST
tcp
* Wed 03 Dec 2014 12:56:58 AM JST
tcp
* Wed 03 Dec 2014 12:56:58 AM JST
tcp
* Wed 03 Dec 2014 12:56:58 AM JST
tcp
* Wed 03 Dec 2014 12:56:58 AM JST
tcp
* Wed 03 Dec 2014 12:56:58 AM JST
tcp
* Wed 03 Dec 2014 12:56:58 AM JST
tcp
* Wed 03 Dec 2014 12:56:58 AM JST
tcp
* Wed 03 Dec 2014 12:56:58 AM JST
tcp
* Wed 03 Dec 2014 12:56:58 AM JST
tcp
* Wed 03 Dec 2014 12:56:58 AM JST
tcp
* Wed 03 Dec 2014 12:56:58 AM JST
tcp
* Wed 03 Dec 2014 12:56:58 AM JST
tcp
* Wed 03 Dec 2014 12:56:58 AM JST
tcp
* Wed 03 Dec 2014 12:56:58 AM JST
tcp
* Wed 03 Dec 2014 12:56:59 AM JST
tcp
* Wed 03 Dec 2014 12:56:59 AM JST
tcp
* Wed 03 Dec 2014 12:56:59 AM JST
tcp
* Wed 03 Dec 2014 12:56:59 AM JST
tcp
* Wed 03 Dec 2014 12:56:59 AM JST
tcp
* Wed 03 Dec 2014 12:56:59 AM JST
tcp
* Wed 03 Dec 2014 12:56:59 AM JST
tcp
* Wed 03 Dec 2014 12:56:59 AM JST
tcp
* Wed 03 Dec 2014 12:56:59 AM JST
tcp
* Wed 03 Dec 2014 12:56:59 AM JST
tcp
* Wed 03 Dec 2014 12:56:59 AM JST
tcp
* Wed 03 Dec 2014 12:56:59 AM JST
tcp
* Wed 03 Dec 2014 12:56:59 AM JST
tcp
* Wed 03 Dec 2014 12:56:59 AM JST
tcp
* Wed 03 Dec 2014 12:56:59 AM JST
tcp
* Wed 03 Dec 2014 12:57:00 AM JST
tcp
* Wed 03 Dec 2014 12:57:00 AM JST
tcp
* Wed 03 Dec 2014 12:57:00 AM JST
tcp
* Wed 03 Dec 2014 12:57:00 AM JST
tcp
* Wed 03 Dec 2014 12:57:00 AM JST
tcp
* Wed 03 Dec 2014 12:57:00 AM JST
tcp
* Wed 03 Dec 2014 12:57:00 AM JST
tcp
* Wed 03 Dec 2014 12:57:00 AM JST
tcp
* Wed 03 Dec 2014 12:57:00 AM JST
tcp
* Wed 03 Dec 2014 12:57:00 AM JST
tcp
* Wed 03 Dec 2014 12:57:00 AM JST
tcp
* Wed 03 Dec 2014 12:57:00 AM JST
tcp
* Wed 03 Dec 2014 12:57:00 AM JST
tcp
* Wed 03 Dec 2014 12:57:00 AM JST
tcp
* Wed 03 Dec 2014 12:57:00 AM JST
tcp
* Wed 03 Dec 2014 12:57:01 AM JST
tcp
* Wed 03 Dec 2014 12:57:01 AM JST
tcp
* Wed 03 Dec 2014 12:57:01 AM JST
tcp
* Wed 03 Dec 2014 12:57:01 AM JST
tcp
* Wed 03 Dec 2014 12:57:01 AM JST
tcp
* Wed 03 Dec 2014 12:57:01 AM JST
tcp
* Wed 03 Dec 2014 12:57:01 AM JST
tcp
* Wed 03 Dec 2014 12:57:01 AM JST
tcp
* Wed 03 Dec 2014 12:57:01 AM JST
tcp
* Wed 03 Dec 2014 12:57:01 AM JST
tcp
* Wed 03 Dec 2014 12:57:01 AM JST
tcp
* Wed 03 Dec 2014 12:57:01 AM JST
tcp
* Wed 03 Dec 2014 12:57:01 AM JST
tcp
* Wed 03 Dec 2014 12:57:01 AM JST
tcp
* Wed 03 Dec 2014 12:57:01 AM JST
tcp
* Wed 03 Dec 2014 12:57:02 AM JST
tcp
* Wed 03 Dec 2014 12:57:02 AM JST
tcp
* Wed 03 Dec 2014 12:57:02 AM JST
tcp
* Wed 03 Dec 2014 12:57:02 AM JST
tcp
* Wed 03 Dec 2014 12:57:02 AM JST
tcp
* Wed 03 Dec 2014 12:57:02 AM JST
tcp
* Wed 03 Dec 2014 12:57:02 AM JST
tcp
* Wed 03 Dec 2014 12:57:02 AM JST
tcp
* Wed 03 Dec 2014 12:57:02 AM JST
tcp
* Wed 03 Dec 2014 12:57:02 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:03 AM JST
tcp
* Wed 03 Dec 2014 12:57:04 AM JST
tcp
* Wed 03 Dec 2014 12:57:04 AM JST
tcp
* Wed 03 Dec 2014 12:57:04 AM JST
tcp
* Wed 03 Dec 2014 12:57:04 AM JST
tcp
* Wed 03 Dec 2014 12:57:04 AM JST
tcp
* Wed 03 Dec 2014 12:57:04 AM JST
tcp
* Wed 03 Dec 2014 12:57:04 AM JST
tcp
* Wed 03 Dec 2014 12:57:04 AM JST
tcp
* Wed 03 Dec 2014 12:57:04 AM JST
tcp
* Wed 03 Dec 2014 12:57:04 AM JST
tcp
* Wed 03 Dec 2014 12:57:04 AM JST
tcp
* Wed 03 Dec 2014 12:57:04 AM JST
tcp
* Wed 03 Dec 2014 12:57:04 AM JST
tcp
* Wed 03 Dec 2014 12:57:04 AM JST
tcp
* Wed 03 Dec 2014 12:57:04 AM JST
tcp
* Wed 03 Dec 2014 12:57:05 AM JST
tcp
* Wed 03 Dec 2014 12:57:05 AM JST
tcp
* Wed 03 Dec 2014 12:57:05 AM JST
tcp
* Wed 03 Dec 2014 12:57:05 AM JST
tcp
* Wed 03 Dec 2014 12:57:05 AM JST
tcp
* Wed 03 Dec 2014 12:57:05 AM JST
tcp
* Wed 03 Dec 2014 12:57:05 AM JST
tcp
* Wed 03 Dec 2014 12:57:05 AM JST
tcp
* Wed 03 Dec 2014 12:57:05 AM JST
tcp
* Wed 03 Dec 2014 12:57:05 AM JST
tcp
* Wed 03 Dec 2014 12:57:05 AM JST
tcp
* Wed 03 Dec 2014 12:57:06 AM JST
tcp
* Wed 03 Dec 2014 12:57:06 AM JST
tcp
* Wed 03 Dec 2014 12:57:06 AM JST
tcp
* Wed 03 Dec 2014 12:57:06 AM JST
tcp
* Wed 03 Dec 2014 12:57:06 AM JST
tcp
* Wed 03 Dec 2014 12:57:06 AM JST
tcp
* Wed 03 Dec 2014 12:57:06 AM JST
tcp
* Wed 03 Dec 2014 12:57:06 AM JST
tcp
* Wed 03 Dec 2014 12:57:06 AM JST
tcp
* Wed 03 Dec 2014 12:57:06 AM JST
tcp
* Wed 03 Dec 2014 12:57:06 AM JST
tcp
* Wed 03 Dec 2014 12:57:06 AM JST
tcp
* Wed 03 Dec 2014 12:57:06 AM JST
tcp
* Wed 03 Dec 2014 12:57:06 AM JST
tcp
* Wed 03 Dec 2014 12:57:06 AM JST
tcp
* Wed 03 Dec 2014 12:57:07 AM JST
tcp
* Wed 03 Dec 2014 12:57:07 AM JST
tcp
* Wed 03 Dec 2014 12:57:07 AM JST
tcp
* Wed 03 Dec 2014 12:57:07 AM JST
tcp
* Wed 03 Dec 2014 12:57:07 AM JST
tcp
* Wed 03 Dec 2014 12:57:07 AM JST
tcp
* Wed 03 Dec 2014 12:57:07 AM JST
tcp
* Wed 03 Dec 2014 12:57:07 AM JST
tcp
* Wed 03 Dec 2014 12:57:07 AM JST
tcp
* Wed 03 Dec 2014 12:57:07 AM JST
tcp
* Wed 03 Dec 2014 12:57:08 AM JST
tcp
* Wed 03 Dec 2014 12:57:08 AM JST
tcp
* Wed 03 Dec 2014 12:57:08 AM JST
tcp
* Wed 03 Dec 2014 12:57:08 AM JST
tcp
* Wed 03 Dec 2014 12:57:08 AM JST
tcp
* Wed 03 Dec 2014 12:57:08 AM JST
tcp
* Wed 03 Dec 2014 12:57:08 AM JST
tcp
* Wed 03 Dec 2014 12:57:08 AM JST
tcp
* Wed 03 Dec 2014 12:57:08 AM JST
tcp
* Wed 03 Dec 2014 12:57:08 AM JST
tcp
* Wed 03 Dec 2014 12:57:08 AM JST
tcp
* Wed 03 Dec 2014 12:57:08 AM JST
tcp
* Wed 03 Dec 2014 12:57:08 AM JST
tcp
* Wed 03 Dec 2014 12:57:08 AM JST
tcp
* Wed 03 Dec 2014 12:57:08 AM JST
tcp
* Wed 03 Dec 2014 12:57:09 AM JST
tcp
* Wed 03 Dec 2014 12:57:09 AM JST
tcp
* Wed 03 Dec 2014 12:57:09 AM JST
tcp
* Wed 03 Dec 2014 12:57:09 AM JST
tcp
* Wed 03 Dec 2014 12:57:09 AM JST
tcp
* Wed 03 Dec 2014 12:57:09 AM JST
tcp
* Wed 03 Dec 2014 12:57:09 AM JST
tcp
* Wed 03 Dec 2014 12:57:09 AM JST
tcp
* Wed 03 Dec 2014 12:57:09 AM JST
tcp
* Wed 03 Dec 2014 12:57:09 AM JST
tcp
* Wed 03 Dec 2014 12:57:09 AM JST
tcp
* Wed 03 Dec 2014 12:57:09 AM JST
tcp
* Wed 03 Dec 2014 12:57:09 AM JST
tcp
* Wed 03 Dec 2014 12:57:09 AM JST
tcp
* Wed 03 Dec 2014 12:57:09 AM JST
tcp
* Wed 03 Dec 2014 12:57:10 AM JST
tcp
* Wed 03 Dec 2014 12:57:10 AM JST
tcp
* Wed 03 Dec 2014 12:57:10 AM JST
tcp
* Wed 03 Dec 2014 12:57:10 AM JST
tcp
* Wed 03 Dec 2014 12:57:10 AM JST
tcp
* Wed 03 Dec 2014 12:57:10 AM JST
tcp
* Wed 03 Dec 2014 12:57:10 AM JST
tcp
* Wed 03 Dec 2014 12:57:10 AM JST
tcp
* Wed 03 Dec 2014 12:57:10 AM JST
tcp
* Wed 03 Dec 2014 12:57:10 AM JST
tcp
* Wed 03 Dec 2014 12:57:10 AM JST
tcp
* Wed 03 Dec 2014 12:57:10 AM JST
tcp
* Wed 03 Dec 2014 12:57:10 AM JST
tcp
* Wed 03 Dec 2014 12:57:10 AM JST
tcp
* Wed 03 Dec 2014 12:57:10 AM JST
tcp
* Wed 03 Dec 2014 12:57:11 AM JST
tcp
* Wed 03 Dec 2014 12:57:11 AM JST
tcp
* Wed 03 Dec 2014 12:57:11 AM JST
tcp
* Wed 03 Dec 2014 12:57:11 AM JST
tcp
* Wed 03 Dec 2014 12:57:11 AM JST
tcp
* Wed 03 Dec 2014 12:57:11 AM JST
tcp
* Wed 03 Dec 2014 12:57:11 AM JST
tcp
* Wed 03 Dec 2014 12:57:11 AM JST
tcp
* Wed 03 Dec 2014 12:57:11 AM JST
tcp
* Wed 03 Dec 2014 12:57:11 AM JST
tcp
* Wed 03 Dec 2014 12:57:11 AM JST
tcp
* Wed 03 Dec 2014 12:57:11 AM JST
tcp
* Wed 03 Dec 2014 12:57:11 AM JST
tcp
* Wed 03 Dec 2014 12:57:11 AM JST
tcp
* Wed 03 Dec 2014 12:57:11 AM JST
tcp
* Wed 03 Dec 2014 12:57:12 AM JST
tcp
* Wed 03 Dec 2014 12:57:12 AM JST
tcp
* Wed 03 Dec 2014 12:57:12 AM JST
tcp
* Wed 03 Dec 2014 12:57:12 AM JST
tcp
* Wed 03 Dec 2014 12:57:12 AM JST
tcp
* Wed 03 Dec 2014 12:57:12 AM JST
tcp
* Wed 03 Dec 2014 12:57:12 AM JST
tcp
* Wed 03 Dec 2014 12:57:12 AM JST
tcp
* Wed 03 Dec 2014 12:57:12 AM JST
tcp
* Wed 03 Dec 2014 12:57:12 AM JST
tcp
* Wed 03 Dec 2014 12:57:13 AM JST
tcp
* Wed 03 Dec 2014 12:57:13 AM JST
tcp
* Wed 03 Dec 2014 12:57:13 AM JST
tcp
* Wed 03 Dec 2014 12:57:13 AM JST
tcp
* Wed 03 Dec 2014 12:57:13 AM JST
tcp
* Wed 03 Dec 2014 12:57:13 AM JST
tcp
* Wed 03 Dec 2014 12:57:13 AM JST
tcp
* Wed 03 Dec 2014 12:57:13 AM JST
tcp
* Wed 03 Dec 2014 12:57:13 AM JST
tcp
* Wed 03 Dec 2014 12:57:13 AM JST
tcp
* Wed 03 Dec 2014 12:57:13 AM JST
tcp
* Wed 03 Dec 2014 12:57:13 AM JST
tcp
* Wed 03 Dec 2014 12:57:13 AM JST
tcp
* Wed 03 Dec 2014 12:57:13 AM JST
tcp
* Wed 03 Dec 2014 12:57:13 AM JST
tcp
* Wed 03 Dec 2014 12:57:14 AM JST
tcp
* Wed 03 Dec 2014 12:57:14 AM JST
tcp
* Wed 03 Dec 2014 12:57:14 AM JST
tcp
* Wed 03 Dec 2014 12:57:14 AM JST
tcp
* Wed 03 Dec 2014 12:57:14 AM JST
tcp
* Wed 03 Dec 2014 12:57:14 AM JST
tcp
* Wed 03 Dec 2014 12:57:14 AM JST
tcp
* Wed 03 Dec 2014 12:57:14 AM JST
tcp
* Wed 03 Dec 2014 12:57:14 AM JST
tcp
* Wed 03 Dec 2014 12:57:14 AM JST
tcp
* Wed 03 Dec 2014 12:57:14 AM JST
tcp
* Wed 03 Dec 2014 12:57:14 AM JST
tcp
* Wed 03 Dec 2014 12:57:14 AM JST
tcp
* Wed 03 Dec 2014 12:57:14 AM JST
tcp
* Wed 03 Dec 2014 12:57:14 AM JST
tcp
* Wed 03 Dec 2014 12:57:15 AM JST
tcp
* Wed 03 Dec 2014 12:57:15 AM JST
tcp
* Wed 03 Dec 2014 12:57:15 AM JST
tcp
* Wed 03 Dec 2014 12:57:15 AM JST
tcp
* Wed 03 Dec 2014 12:57:15 AM JST
tcp
* Wed 03 Dec 2014 12:57:15 AM JST
tcp
* Wed 03 Dec 2014 12:57:15 AM JST
tcp
* Wed 03 Dec 2014 12:57:15 AM JST
tcp
* Wed 03 Dec 2014 12:57:15 AM JST
tcp
* Wed 03 Dec 2014 12:57:15 AM JST
tcp
* Wed 03 Dec 2014 12:57:15 AM JST
tcp
* Wed 03 Dec 2014 12:57:15 AM JST
tcp
* Wed 03 Dec 2014 12:57:15 AM JST
tcp
* Wed 03 Dec 2014 12:57:15 AM JST
tcp
* Wed 03 Dec 2014 12:57:15 AM JST
tcp
* Wed 03 Dec 2014 12:57:16 AM JST
tcp
* Wed 03 Dec 2014 12:57:16 AM JST
tcp
* Wed 03 Dec 2014 12:57:16 AM JST
tcp
* Wed 03 Dec 2014 12:57:16 AM JST
tcp
* Wed 03 Dec 2014 12:57:16 AM JST
tcp
* Wed 03 Dec 2014 12:57:16 AM JST
tcp
* Wed 03 Dec 2014 12:57:16 AM JST
tcp
* Wed 03 Dec 2014 12:57:16 AM JST
tcp
* Wed 03 Dec 2014 12:57:16 AM JST
tcp
* Wed 03 Dec 2014 12:57:16 AM JST
tcp
* Wed 03 Dec 2014 12:57:16 AM JST
tcp
* Wed 03 Dec 2014 12:57:16 AM JST
tcp
* Wed 03 Dec 2014 12:57:16 AM JST
tcp
* Wed 03 Dec 2014 12:57:16 AM JST
tcp
* Wed 03 Dec 2014 12:57:16 AM JST
tcp
* Wed 03 Dec 2014 12:57:17 AM JST
tcp
* Wed 03 Dec 2014 12:57:17 AM JST
tcp
* Wed 03 Dec 2014 12:57:17 AM JST
tcp
* Wed 03 Dec 2014 12:57:17 AM JST
tcp
* Wed 03 Dec 2014 12:57:17 AM JST
tcp
* Wed 03 Dec 2014 12:57:17 AM JST
tcp
* Wed 03 Dec 2014 12:57:17 AM JST
tcp
* Wed 03 Dec 2014 12:57:17 AM JST
tcp
* Wed 03 Dec 2014 12:57:17 AM JST
tcp
* Wed 03 Dec 2014 12:57:17 AM JST
tcp
* Wed 03 Dec 2014 12:57:18 AM JST
tcp
* Wed 03 Dec 2014 12:57:18 AM JST
tcp
* Wed 03 Dec 2014 12:57:18 AM JST
tcp
* Wed 03 Dec 2014 12:57:18 AM JST
tcp
* Wed 03 Dec 2014 12:57:18 AM JST
tcp
* Wed 03 Dec 2014 12:57:18 AM JST
tcp
* Wed 03 Dec 2014 12:57:18 AM JST
tcp
* Wed 03 Dec 2014 12:58:36 AM JST
7:
* Wed 03 Dec 2014 12:58:51 AM JST
9:
* Wed 03 Dec 2014 12:58:52 AM JST
11:
* Wed 03 Dec 2014 12:58:52 AM JST
13:
* Wed 03 Dec 2014 12:58:53 AM JST
15:
* Wed 03 Dec 2014 12:58:53 AM JST
17:
* Wed 03 Dec 2014 12:58:53 AM JST
18:
* Wed 03 Dec 2014 12:58:54 AM JST
19:
* Wed 03 Dec 2014 12:58:54 AM JST
20:
* Wed 03 Dec 2014 12:58:54 AM JST
21:
* Wed 03 Dec 2014 12:58:54 AM JST
22:
* Wed 03 Dec 2014 12:58:54 AM JST
23:
* Wed 03 Dec 2014 12:58:54 AM JST
25:
* Wed 03 Dec 2014 12:58:55 AM JST
37:
* Wed 03 Dec 2014 12:58:55 AM JST
42:
* Wed 03 Dec 2014 12:58:55 AM JST
43:
* Wed 03 Dec 2014 12:58:55 AM JST
49:
* Wed 03 Dec 2014 12:58:55 AM JST
50:
* Wed 03 Dec 2014 12:58:56 AM JST
53:
* Wed 03 Dec 2014 12:58:56 AM JST
57:
* Wed 03 Dec 2014 12:58:56 AM JST
65:
* Wed 03 Dec 2014 12:58:56 AM JST
67:
* Wed 03 Dec 2014 12:58:56 AM JST
68:
* Wed 03 Dec 2014 12:58:56 AM JST
70:
* Wed 03 Dec 2014 12:58:57 AM JST
77:
* Wed 03 Dec 2014 12:58:57 AM JST
79:
* Wed 03 Dec 2014 12:58:57 AM JST
80:
* Wed 03 Dec 2014 12:58:57 AM JST
87:
* Wed 03 Dec 2014 12:58:58 AM JST
88:
* Wed 03 Dec 2014 12:58:58 AM JST
95:
* Wed 03 Dec 2014 12:58:58 AM JST
101:
* Wed 03 Dec 2014 12:58:58 AM JST
102:
* Wed 03 Dec 2014 12:58:58 AM JST
104:
* Wed 03 Dec 2014 12:58:58 AM JST
105:
* Wed 03 Dec 2014 12:58:58 AM JST
107:
* Wed 03 Dec 2014 12:58:59 AM JST
109:
* Wed 03 Dec 2014 12:58:59 AM JST
110:
* Wed 03 Dec 2014 12:58:59 AM JST
111:
* Wed 03 Dec 2014 12:58:59 AM JST
113:
* Wed 03 Dec 2014 12:58:59 AM JST
115:
* Wed 03 Dec 2014 12:59:00 AM JST
117:
* Wed 03 Dec 2014 12:59:00 AM JST
119:
* Wed 03 Dec 2014 12:59:00 AM JST
123:
* Wed 03 Dec 2014 12:59:00 AM JST
129:
* Wed 03 Dec 2014 12:59:00 AM JST
135:
* Wed 03 Dec 2014 12:59:00 AM JST
137:
* Wed 03 Dec 2014 12:59:01 AM JST
138:
* Wed 03 Dec 2014 12:59:01 AM JST
139:
* Wed 03 Dec 2014 12:59:01 AM JST
143:
* Wed 03 Dec 2014 12:59:01 AM JST
161:
* Wed 03 Dec 2014 12:59:01 AM JST
162:
* Wed 03 Dec 2014 12:59:02 AM JST
163:
* Wed 03 Dec 2014 12:59:02 AM JST
164:
* Wed 03 Dec 2014 12:59:02 AM JST
174:
* Wed 03 Dec 2014 12:59:02 AM JST
177:
* Wed 03 Dec 2014 12:59:02 AM JST
178:
* Wed 03 Dec 2014 12:59:03 AM JST
179:
* Wed 03 Dec 2014 12:59:03 AM JST
191:
* Wed 03 Dec 2014 12:59:03 AM JST
194:
* Wed 03 Dec 2014 12:59:03 AM JST
199:
* Wed 03 Dec 2014 12:59:03 AM JST
201:
* Wed 03 Dec 2014 12:59:03 AM JST
202:
* Wed 03 Dec 2014 12:59:04 AM JST
204:
* Wed 03 Dec 2014 12:59:04 AM JST
206:
* Wed 03 Dec 2014 12:59:04 AM JST
209:
* Wed 03 Dec 2014 12:59:04 AM JST
210:
* Wed 03 Dec 2014 12:59:04 AM JST
213:
* Wed 03 Dec 2014 12:59:04 AM JST
220:
* Wed 03 Dec 2014 12:59:04 AM JST
345:
* Wed 03 Dec 2014 12:59:04 AM JST
346:
* Wed 03 Dec 2014 12:59:04 AM JST
347:
* Wed 03 Dec 2014 12:59:05 AM JST
369:
* Wed 03 Dec 2014 12:59:05 AM JST
370:
* Wed 03 Dec 2014 12:59:05 AM JST
371:
* Wed 03 Dec 2014 12:59:05 AM JST
372:
* Wed 03 Dec 2014 12:59:05 AM JST
389:
* Wed 03 Dec 2014 12:59:05 AM JST
406:
* Wed 03 Dec 2014 12:59:05 AM JST
427:
* Wed 03 Dec 2014 12:59:05 AM JST
443:
* Wed 03 Dec 2014 12:59:05 AM JST
444:
* Wed 03 Dec 2014 12:59:05 AM JST
445:
* Wed 03 Dec 2014 12:59:06 AM JST
464:
* Wed 03 Dec 2014 12:59:06 AM JST
487:
* Wed 03 Dec 2014 12:59:06 AM JST
500:
* Wed 03 Dec 2014 12:59:06 AM JST
554:
* Wed 03 Dec 2014 12:59:06 AM JST
607:
* Wed 03 Dec 2014 12:59:06 AM JST
610:
* Wed 03 Dec 2014 12:59:06 AM JST
611:
* Wed 03 Dec 2014 12:59:06 AM JST
612:
* Wed 03 Dec 2014 12:59:06 AM JST
628:
* Wed 03 Dec 2014 12:59:07 AM JST
631:
* Wed 03 Dec 2014 12:59:07 AM JST
512:
* Wed 03 Dec 2014 12:59:07 AM JST
513:
* Wed 03 Dec 2014 12:59:07 AM JST
514:
* Wed 03 Dec 2014 12:59:08 AM JST
515:
* Wed 03 Dec 2014 12:59:08 AM JST
526:
* Wed 03 Dec 2014 12:59:08 AM JST
530:
* Wed 03 Dec 2014 12:59:08 AM JST
531:
* Wed 03 Dec 2014 12:59:08 AM JST
532:
* Wed 03 Dec 2014 12:59:08 AM JST
538:
* Wed 03 Dec 2014 12:59:08 AM JST
540:
* Wed 03 Dec 2014 12:59:09 AM JST
543:
* Wed 03 Dec 2014 12:59:09 AM JST
544:
* Wed 03 Dec 2014 12:59:09 AM JST
546:
* Wed 03 Dec 2014 12:59:09 AM JST
547:
* Wed 03 Dec 2014 12:59:09 AM JST
548:
* Wed 03 Dec 2014 12:59:09 AM JST
549:
* Wed 03 Dec 2014 12:59:09 AM JST
556:
* Wed 03 Dec 2014 12:59:09 AM JST
563:
* Wed 03 Dec 2014 12:59:09 AM JST
587:
* Wed 03 Dec 2014 12:59:09 AM JST
636:
* Wed 03 Dec 2014 12:59:09 AM JST
655:
* Wed 03 Dec 2014 12:59:10 AM JST
706:
* Wed 03 Dec 2014 12:59:10 AM JST
749:
* Wed 03 Dec 2014 12:59:10 AM JST
765:
* Wed 03 Dec 2014 12:59:10 AM JST
873:
* Wed 03 Dec 2014 12:59:10 AM JST
989:
* Wed 03 Dec 2014 12:59:10 AM JST
990:
* Wed 03 Dec 2014 12:59:11 AM JST
992:
* Wed 03 Dec 2014 12:59:11 AM JST
993:
* Wed 03 Dec 2014 12:59:11 AM JST
994:
* Wed 03 Dec 2014 12:59:12 AM JST
995:
* Wed 03 Dec 2014 12:59:12 AM JST
1080:
* Wed 03 Dec 2014 12:59:12 AM JST
1093:
* Wed 03 Dec 2014 12:59:12 AM JST
1094:
* Wed 03 Dec 2014 12:59:13 AM JST
1194:
* Wed 03 Dec 2014 12:59:13 AM JST
1099:
* Wed 03 Dec 2014 12:59:13 AM JST
1214:
* Wed 03 Dec 2014 12:59:13 AM JST
1241:
* Wed 03 Dec 2014 12:59:13 AM JST
1352:
* Wed 03 Dec 2014 12:59:13 AM JST
1433:
* Wed 03 Dec 2014 12:59:14 AM JST
1434:
* Wed 03 Dec 2014 12:59:14 AM JST
1524:
* Wed 03 Dec 2014 12:59:14 AM JST
1525:
* Wed 03 Dec 2014 12:59:14 AM JST
1645:
* Wed 03 Dec 2014 12:59:14 AM JST
1646:
* Wed 03 Dec 2014 12:59:15 AM JST
1649:
* Wed 03 Dec 2014 12:59:15 AM JST
1677:
* Wed 03 Dec 2014 12:59:15 AM JST
1701:
* Wed 03 Dec 2014 12:59:15 AM JST
1812:
* Wed 03 Dec 2014 12:59:15 AM JST
1813:
* Wed 03 Dec 2014 12:59:16 AM JST
1863:
* Wed 03 Dec 2014 12:59:16 AM JST
1957:
* Wed 03 Dec 2014 12:59:16 AM JST
1958:
* Wed 03 Dec 2014 12:59:16 AM JST
1959:
* Wed 03 Dec 2014 12:59:16 AM JST
2000:
* Wed 03 Dec 2014 12:59:17 AM JST
2010:
* Wed 03 Dec 2014 12:59:17 AM JST
2010:
* Wed 03 Dec 2014 12:59:17 AM JST
2049:
* Wed 03 Dec 2014 12:59:17 AM JST
2086:
* Wed 03 Dec 2014 12:59:17 AM JST
2101:
* Wed 03 Dec 2014 12:59:18 AM JST
2119:
* Wed 03 Dec 2014 12:59:18 AM JST
2135:
* Wed 03 Dec 2014 12:59:18 AM JST
2401:
* Wed 03 Dec 2014 12:59:18 AM JST
2430:
* Wed 03 Dec 2014 12:59:18 AM JST
2431:
* Wed 03 Dec 2014 12:59:19 AM JST
2432:
* Wed 03 Dec 2014 12:59:19 AM JST
2433:
* Wed 03 Dec 2014 12:59:19 AM JST
2583:
* Wed 03 Dec 2014 12:59:19 AM JST
2628:
* Wed 03 Dec 2014 12:59:19 AM JST
2792:
* Wed 03 Dec 2014 12:59:20 AM JST
2811:
* Wed 03 Dec 2014 12:59:20 AM JST
2947:
* Wed 03 Dec 2014 12:59:20 AM JST
3050:
* Wed 03 Dec 2014 12:59:20 AM JST
3130:
* Wed 03 Dec 2014 12:59:20 AM JST
3260:
* Wed 03 Dec 2014 12:59:21 AM JST
3306:
* Wed 03 Dec 2014 12:59:21 AM JST
3493:
* Wed 03 Dec 2014 12:59:21 AM JST
3632:
* Wed 03 Dec 2014 12:59:21 AM JST
3689:
* Wed 03 Dec 2014 12:59:21 AM JST
3690:
* Wed 03 Dec 2014 12:59:22 AM JST
4031:
* Wed 03 Dec 2014 12:59:22 AM JST
4094:
* Wed 03 Dec 2014 12:59:22 AM JST
4190:
* Wed 03 Dec 2014 12:59:22 AM JST
4369:
* Wed 03 Dec 2014 12:59:22 AM JST
4373:
* Wed 03 Dec 2014 12:59:23 AM JST
4353:
* Wed 03 Dec 2014 12:59:23 AM JST
4569:
* Wed 03 Dec 2014 12:59:23 AM JST
4691:
* Wed 03 Dec 2014 12:59:23 AM JST
4899:
* Wed 03 Dec 2014 12:59:24 AM JST
5002:
* Wed 03 Dec 2014 12:59:24 AM JST
5050:
* Wed 03 Dec 2014 12:59:24 AM JST
5060:
* Wed 03 Dec 2014 12:59:24 AM JST
5061:
* Wed 03 Dec 2014 12:59:24 AM JST
5190:
* Wed 03 Dec 2014 12:59:25 AM JST
5222:
* Wed 03 Dec 2014 12:59:25 AM JST
5269:
* Wed 03 Dec 2014 12:59:25 AM JST
5308:
* Wed 03 Dec 2014 12:59:25 AM JST
5353:
* Wed 03 Dec 2014 12:59:25 AM JST
5432:
* Wed 03 Dec 2014 12:59:26 AM JST
5556:
* Wed 03 Dec 2014 12:59:26 AM JST
5672:
* Wed 03 Dec 2014 12:59:26 AM JST
5688:
* Wed 03 Dec 2014 12:59:26 AM JST
6000:
* Wed 03 Dec 2014 12:59:27 AM JST
6001:
* Wed 03 Dec 2014 12:59:27 AM JST
6002:
* Wed 03 Dec 2014 12:59:27 AM JST
6003:
* Wed 03 Dec 2014 12:59:27 AM JST
6004:
* Wed 03 Dec 2014 12:59:27 AM JST
6005:
* Wed 03 Dec 2014 12:59:28 AM JST
6006:
* Wed 03 Dec 2014 12:59:28 AM JST
6007:
* Wed 03 Dec 2014 12:59:28 AM JST
6346:
* Wed 03 Dec 2014 12:59:28 AM JST
6347:
* Wed 03 Dec 2014 12:59:29 AM JST
6444:
* Wed 03 Dec 2014 12:59:29 AM JST
6445:
* Wed 03 Dec 2014 12:59:29 AM JST
6446:
* Wed 03 Dec 2014 12:59:29 AM JST
7000:
* Wed 03 Dec 2014 12:59:29 AM JST
7001:
* Wed 03 Dec 2014 12:59:30 AM JST
7002:
* Wed 03 Dec 2014 12:59:30 AM JST
7003:
* Wed 03 Dec 2014 12:59:30 AM JST
7004:
* Wed 03 Dec 2014 12:59:30 AM JST
7005:
* Wed 03 Dec 2014 12:59:30 AM JST
7006:
* Wed 03 Dec 2014 12:59:31 AM JST
7007:
* Wed 03 Dec 2014 12:59:31 AM JST
7008:
* Wed 03 Dec 2014 12:59:31 AM JST
7009:
* Wed 03 Dec 2014 12:59:31 AM JST
7100:
* Wed 03 Dec 2014 12:59:32 AM JST
8080:
* Wed 03 Dec 2014 12:59:32 AM JST
9101:
* Wed 03 Dec 2014 12:59:32 AM JST
9102:
* Wed 03 Dec 2014 12:59:32 AM JST
9103:
* Wed 03 Dec 2014 12:59:32 AM JST
9667:
* Wed 03 Dec 2014 12:59:33 AM JST
10809:
* Wed 03 Dec 2014 12:59:33 AM JST
10050:
* Wed 03 Dec 2014 12:59:33 AM JST
10051:
* Wed 03 Dec 2014 12:59:33 AM JST
10080:
* Wed 03 Dec 2014 12:59:34 AM JST
11371:
* Wed 03 Dec 2014 12:59:34 AM JST
13720:
* Wed 03 Dec 2014 12:59:34 AM JST
13721:
* Wed 03 Dec 2014 12:59:34 AM JST
13722:
* Wed 03 Dec 2014 12:59:34 AM JST
13724:
* Wed 03 Dec 2014 12:59:35 AM JST
13782:
* Wed 03 Dec 2014 12:59:35 AM JST
13783:
* Wed 03 Dec 2014 12:59:35 AM JST
22125:
* Wed 03 Dec 2014 12:59:35 AM JST
22128:
* Wed 03 Dec 2014 12:59:36 AM JST
22273:
* Wed 03 Dec 2014 12:59:36 AM JST
750:
* Wed 03 Dec 2014 12:59:36 AM JST
751:
* Wed 03 Dec 2014 12:59:36 AM JST
754:
* Wed 03 Dec 2014 12:59:36 AM JST
760:
* Wed 03 Dec 2014 12:59:37 AM JST
782:
* Wed 03 Dec 2014 12:59:37 AM JST
901:
* Wed 03 Dec 2014 12:59:37 AM JST
1109:
* Wed 03 Dec 2014 12:59:37 AM JST
2053:
* Wed 03 Dec 2014 12:59:37 AM JST
2105:
* Wed 03 Dec 2014 12:59:38 AM JST
2111:
* Wed 03 Dec 2014 12:59:38 AM JST
2121:
* Wed 03 Dec 2014 12:59:38 AM JST
871:
* Wed 03 Dec 2014 12:59:38 AM JST
1127:
* Wed 03 Dec 2014 12:59:39 AM JST
98:
* Wed 03 Dec 2014 12:59:39 AM JST
106:
* Wed 03 Dec 2014 12:59:39 AM JST
465:
* Wed 03 Dec 2014 12:59:39 AM JST
775:
* Wed 03 Dec 2014 12:59:39 AM JST
777:
* Wed 03 Dec 2014 12:59:39 AM JST
783:
* Wed 03 Dec 2014 12:59:39 AM JST
808:
* Wed 03 Dec 2014 12:59:39 AM JST
1001:
* Wed 03 Dec 2014 12:59:39 AM JST
1178:
* Wed 03 Dec 2014 12:59:39 AM JST
1236:
* Wed 03 Dec 2014 12:59:39 AM JST
1300:
* Wed 03 Dec 2014 12:59:40 AM JST
1313:
* Wed 03 Dec 2014 12:59:40 AM JST
1314:
* Wed 03 Dec 2014 12:59:40 AM JST
1529:
* Wed 03 Dec 2014 12:59:40 AM JST
2003:
* Wed 03 Dec 2014 12:59:41 AM JST
2121:
* Wed 03 Dec 2014 12:59:41 AM JST
2150:
* Wed 03 Dec 2014 12:59:41 AM JST
2600:
* Wed 03 Dec 2014 12:59:42 AM JST
2601:
* Wed 03 Dec 2014 12:59:42 AM JST
2602:
* Wed 03 Dec 2014 12:59:42 AM JST
2603:
* Wed 03 Dec 2014 12:59:42 AM JST
2604:
* Wed 03 Dec 2014 12:59:42 AM JST
2605:
* Wed 03 Dec 2014 12:59:42 AM JST
2606:
* Wed 03 Dec 2014 12:59:42 AM JST
2607:
* Wed 03 Dec 2014 12:59:42 AM JST
2608:
* Wed 03 Dec 2014 12:59:42 AM JST
2988:
* Wed 03 Dec 2014 12:59:42 AM JST
2989:
* Wed 03 Dec 2014 12:59:43 AM JST
4224:
* Wed 03 Dec 2014 12:59:43 AM JST
4557:
* Wed 03 Dec 2014 12:59:43 AM JST
4559:
* Wed 03 Dec 2014 12:59:43 AM JST
4600:
* Wed 03 Dec 2014 12:59:43 AM JST
4949:
* Wed 03 Dec 2014 12:59:43 AM JST
5051:
* Wed 03 Dec 2014 12:59:43 AM JST
5052:
* Wed 03 Dec 2014 12:59:43 AM JST
5151:
* Wed 03 Dec 2014 12:59:43 AM JST
5354:
* Wed 03 Dec 2014 12:59:43 AM JST
5355:
* Wed 03 Dec 2014 12:59:43 AM JST
5666:
* Wed 03 Dec 2014 12:59:44 AM JST
5667:
* Wed 03 Dec 2014 12:59:44 AM JST
5674:
* Wed 03 Dec 2014 12:59:44 AM JST
5675:
* Wed 03 Dec 2014 12:59:44 AM JST
5680:
* Wed 03 Dec 2014 12:59:44 AM JST
6566:
* Wed 03 Dec 2014 12:59:44 AM JST
6667:
* Wed 03 Dec 2014 12:59:44 AM JST
8021:
* Wed 03 Dec 2014 12:59:44 AM JST
8081:
* Wed 03 Dec 2014 12:59:44 AM JST
8088:
* Wed 03 Dec 2014 12:59:44 AM JST
8990:
* Wed 03 Dec 2014 12:59:45 AM JST
9098:
* Wed 03 Dec 2014 12:59:45 AM JST
9418:
* Wed 03 Dec 2014 12:59:45 AM JST
9673:
* Wed 03 Dec 2014 12:59:45 AM JST
10000:
* Wed 03 Dec 2014 12:59:45 AM JST
10081:
* Wed 03 Dec 2014 12:59:45 AM JST
10082:
* Wed 03 Dec 2014 12:59:45 AM JST
10083:
* Wed 03 Dec 2014 12:59:45 AM JST
11201:
* Wed 03 Dec 2014 12:59:45 AM JST
15345:
* Wed 03 Dec 2014 12:59:45 AM JST
17004:
* Wed 03 Dec 2014 12:59:45 AM JST
20011:
* Wed 03 Dec 2014 12:59:46 AM JST
20012:
* Wed 03 Dec 2014 12:59:46 AM JST
24554:
* Wed 03 Dec 2014 12:59:46 AM JST
27374:
* Wed 03 Dec 2014 12:59:46 AM JST
30865:
* Wed 03 Dec 2014 12:59:46 AM JST
57000:
* Wed 03 Dec 2014 12:59:46 AM JST
60177:
* Wed 03 Dec 2014 12:59:46 AM JST
60179:
* Wed 03 Dec 2014 12:59:46 AM JST
fido",                     
* Wed 03 Dec 2014 12:59:46 AM JST
60179: "
* Wed 03 Dec 2014 12:59:46 AM JST
fido",                      
* Wed 03 Dec 2014 12:59:47 AM JST
60179: " 
* Wed 03 Dec 2014 12:59:47 AM JST
fido",                       
* Wed 03 Dec 2014 12:59:47 AM JST
60179: "  
* Wed 03 Dec 2014 12:59:47 AM JST
fido",                        
* Wed 03 Dec 2014 12:59:47 AM JST
60179: "   
* Wed 03 Dec 2014 12:59:47 AM JST
fido",                         
* Wed 03 Dec 2014 12:59:47 AM JST
60179: "    
* Wed 03 Dec 2014 12:59:47 AM JST
fido",                          
* Wed 03 Dec 2014 12:59:47 AM JST
60179: "     
* Wed 03 Dec 2014 12:59:47 AM JST
fido",                           
* Wed 03 Dec 2014 12:59:47 AM JST
60179: "      
* Wed 03 Dec 2014 12:59:48 AM JST
fido",                            
* Wed 03 Dec 2014 12:59:48 AM JST
60179: "       
* Wed 03 Dec 2014 12:59:48 AM JST
fido",                             
* Wed 03 Dec 2014 12:59:48 AM JST
60179: "        
* Wed 03 Dec 2014 12:59:48 AM JST
fido",                              
* Wed 03 Dec 2014 12:59:48 AM JST
60179: "         
* Wed 03 Dec 2014 12:59:48 AM JST
fido",                               
* Wed 03 Dec 2014 12:59:48 AM JST
60179: "          
* Wed 03 Dec 2014 12:59:48 AM JST
fido",                                
* Wed 03 Dec 2014 12:59:48 AM JST
60179: "           
* Wed 03 Dec 2014 12:59:48 AM JST
fido",                                 
* Wed 03 Dec 2014 12:59:49 AM JST
60179: "            
* Wed 03 Dec 2014 12:59:49 AM JST
fido",                                  
* Wed 03 Dec 2014 12:59:49 AM JST
60179: "             
* Wed 03 Dec 2014 12:59:49 AM JST
fido",                                   
* Wed 03 Dec 2014 12:59:49 AM JST
60179: "              
* Wed 03 Dec 2014 12:59:49 AM JST
fido",                                    
* Wed 03 Dec 2014 12:59:49 AM JST
60179: "               
* Wed 03 Dec 2014 12:59:49 AM JST
fido",                                     
* Wed 03 Dec 2014 12:59:49 AM JST
60179: "                
* Wed 03 Dec 2014 12:59:49 AM JST
fido",                                      
* Wed 03 Dec 2014 12:59:50 AM JST
60179: "                 
* Wed 03 Dec 2014 12:59:50 AM JST
fido",                                       
* Wed 03 Dec 2014 12:59:50 AM JST
60179: "                  
* Wed 03 Dec 2014 12:59:50 AM JST
fido",                                        
* Wed 03 Dec 2014 12:59:50 AM JST
60179: "                   
* Wed 03 Dec 2014 12:59:50 AM JST
fido",                                         
* Wed 03 Dec 2014 12:59:50 AM JST
60179: "                    
* Wed 03 Dec 2014 12:59:50 AM JST
fido",                                          
* Wed 03 Dec 2014 12:59:51 AM JST
60179: "                     
* Wed 03 Dec 2014 12:59:51 AM JST
fido",                                           
* Wed 03 Dec 2014 12:59:51 AM JST
60179: "                      
* Wed 03 Dec 2014 01:01:06 AM JST
7: "echo",                     
9: "discard",                  
11: "systat",                   
13: "daytime",                  
15: "netstat",                  
17: "qotd",                     
18: "msp",                      
19: "chargen",                  
20: "ftp-data",                 
21: "ftp",                      
22: "ssh",                      
23: "telnet",                   
25: "smtp",                     
37: "time",                     
42: "nameserver",               
43: "whois",                    
49: "tacacs",                   
50: "re-mail-ck",               
53: "domain",                   
57: "mtp",                      
65: "tacacs-ds",                
67: "bootps",                   
68: "bootpc",                   
70: "gopher",                   
77: "rje",                      
79: "finger",                   
80: "http",                     
87: "link",                     
88: "kerberos",                 
95: "supdup",                   
98: "linuxconf",                
101: "hostnames",                
102: "iso-tsap",                 
104: "acr-nema",                 
105: "csnet-ns",                 
106: "poppassd",                 
107: "rtelnet",                  
109: "pop2",                     
110: "pop3",                     
111: "sunrpc",                   
113: "auth",                     
115: "sftp",                     
117: "uucp-path",                
119: "nntp",                     
123: "ntp",                      
129: "pwdgen",                   
135: "loc-srv",                  
137: "netbios-ns",               
138: "netbios-dgm",              
139: "netbios-ssn",              
143: "imap2",                    
161: "snmp",                     
162: "snmp-trap",                
163: "cmip-man",                 
164: "cmip-agent",               
174: "mailq",                    
177: "xdmcp",                    
178: "nextstep",                 
179: "bgp",                      
191: "prospero",                 
194: "irc",                      
199: "smux",                     
201: "at-rtmp",                  
202: "at-nbp",                   
204: "at-echo",                  
206: "at-zis",                   
209: "qmtp",                     
210: "z3950",                    
213: "ipx",                      
220: "imap3",                    
345: "pawserv",                  
346: "zserv",                    
347: "fatserv",                  
369: "rpc2portmap",              
370: "codaauth2",                
371: "clearcase",                
372: "ulistserv",                
389: "ldap",                     
406: "imsp",                     
427: "svrloc",                   
443: "https",                    
444: "snpp",                     
445: "microsoft-ds",             
464: "kpasswd",                  
465: "ssmtp",                    
487: "saft",                     
500: "isakmp",                   
512: "exec",                     
513: "login",                    
514: "shell",                    
515: "printer",                  
526: "tempo",                    
530: "courier",                  
531: "conference",               
532: "netnews",                  
538: "gdomap",                   
540: "uucp",                     
543: "klogin",                   
544: "kshell",                   
546: "dhcpv6-client",            
547: "dhcpv6-server",            
548: "afpovertcp",               
549: "idfp",                     
554: "rtsp",                     
556: "remotefs",                 
563: "nntps",                    
587: "submission",               
607: "nqs",                      
610: "npmp-local",               
611: "npmp-gui",                 
612: "hmmp-ind",                 
628: "qmqp",                     
631: "ipp",                      
636: "ldaps",                    
655: "tinc",                     
706: "silc",                     
749: "kerberos-adm",             
750: "kerberos4",                
751: "kerberos-master",          
754: "krb-prop",                 
760: "krbupdate",                
765: "webster",                  
775: "moira-db",                 
777: "moira-update",             
782: "console",                  
783: "spamd",                    
808: "omirr",                    
871: "supfilesrv",               
873: "rsync",                    
901: "swat",                     
989: "ftps-data",                
990: "ftps",                     
992: "telnets",                  
993: "imaps",                    
994: "ircs",                     
995: "pop3s",                    
1001: "customs",                  
1080: "socks",                    
1093: "proofd",                   
1094: "rootd",                    
1099: "rmiregistry",              
1109: "kpop",                     
1127: "supfiledbg",               
1178: "skkserv",                  
1194: "openvpn",                  
1214: "kazaa",                    
1236: "rmtcfg",                   
1241: "nessus",                   
1300: "wipld",                    
1313: "xtel",                     
1314: "xtelw",                    
1352: "lotusnote",                
1433: "ms-sql-s",                 
1434: "ms-sql-m",                 
1524: "ingreslock",               
1525: "prospero-np",              
1529: "support",                  
1645: "datametrics",              
1646: "sa-msg-port",              
1649: "kermit",                   
1677: "groupwise",                
1701: "l2f",                      
1812: "radius",                   
1813: "radius-acct",              
1863: "msnp",                     
1957: "unix-status",              
1958: "log-server",               
1959: "remoteping",               
2000: "cisco-sccp",               
2003: "cfinger",                  
2010: "search",                   
2010: "pipe-server",              
2049: "nfs",                      
2053: "knetd",                    
2086: "gnunet",                   
2101: "rtcm-sc104",               
2105: "eklogin",                  
2111: "kx",                       
2119: "gsigatekeeper",            
2121: "iprop",                    
2121: "frox",                     
2135: "gris",                     
2150: "ninstall",                 
2401: "cvspserver",               
2430: "venus",                    
2431: "venus-se",                 
2432: "codasrv",                  
2433: "codasrv-se",               
2583: "mon",                      
2600: "zebrasrv",                 
2601: "zebra",                    
2602: "ripd",                     
2603: "ripngd",                   
2604: "ospfd",                    
2605: "bgpd",                     
2606: "ospf6d",                   
2607: "ospfapi",                  
2608: "isisd",                    
2628: "dict",                     
2792: "f5-globalsite",            
2811: "gsiftp",                   
2947: "gpsd",                     
2988: "afbackup",                 
2989: "afmbackup",                
3050: "gds-db",                   
3130: "icpv2",                    
3260: "iscsi-target",             
3306: "mysql",                    
3493: "nut",                      
3632: "distcc",                   
3689: "daap",                     
3690: "svn",                      
4031: "suucp",                    
4094: "sysrqd",                   
4190: "sieve",                    
4224: "xtell",                    
4353: "f5-iquery",                
4369: "epmd",                     
4373: "remctl",                   
4557: "fax",                      
4559: "hylafax",                  
4569: "iax",                      
4600: "distmp3",                  
4691: "mtn",                      
4899: "radmin-port",              
4949: "munin",                    
5002: "rfe",                      
5050: "mmcc",                     
5051: "enbd-cstatd",              
5052: "enbd-sstatd",              
5060: "sip",                      
5061: "sip-tls",                  
5151: "pcrd",                     
5190: "aol",                      
5222: "xmpp-client",              
5269: "xmpp-server",              
5308: "cfengine",                 
5353: "mdns",                     
5354: "noclog",                   
5355: "hostmon",                  
5432: "postgresql",               
5556: "freeciv",                  
5666: "nrpe",                     
5667: "nsca",                     
5672: "amqp",                     
5674: "mrtd",                     
5675: "bgpsim",                   
5680: "canna",                    
5688: "ggz",                      
6000: "x11",                      
6001: "x11-1",                    
6002: "x11-2",                    
6003: "x11-3",                    
6004: "x11-4",                    
6005: "x11-5",                    
6006: "x11-6",                    
6007: "x11-7",                    
6346: "gnutella-svc",             
6347: "gnutella-rtr",             
6444: "sge-qmaster",              
6445: "sge-execd",                
6446: "mysql-proxy",              
6566: "sane-port",                
6667: "ircd",                     
7000: "afs3-fileserver",            
7001: "afs3-callback",            
7002: "afs3-prserver",            
7003: "afs3-vlserver",            
7004: "afs3-kaserver",            
7005: "afs3-volser",              
7006: "afs3-errors",              
7007: "afs3-bos",                 
7008: "afs3-update",              
7009: "afs3-rmtsys",              
7100: "font-service",             
8021: "zope-ftp",                 
8080: "http-alt",                 
8081: "tproxy",                   
8088: "omniorb",                  
8990: "clc-build-daemon",           
9098: "xinetd",                   
9101: "bacula-dir",               
9102: "bacula-fd",                
9103: "bacula-sd",                
9418: "git",                      
9667: "xmms2",                    
9673: "zope",                     
10000: "webmin",                   
10050: "zabbix-agent",             
10051: "zabbix-trapper",           
10080: "amanda",                   
10081: "kamanda",                  
10082: "amandaidx",                
10083: "amidxtape",                
10809: "nbd",                      
11201: "smsqp",                    
11371: "hkp",                      
13720: "bprd",                     
13721: "bpdbm",                    
13722: "bpjava-msvc",              
13724: "vnetd",                    
13782: "bpcd",                     
13783: "vopied",                   
15345: "xpilot",                   
17004: "sgi-cad",                  
20011: "isdnlog",                  
20012: "vboxd",                    
22125: "dcap",                     
22128: "gsidcap",                  
22273: "wnn6",                     
24554: "binkp",                    
27374: "asp",                      
30865: "csync2",                   
57000: "dircproxy",                
60177: "tfido",                    
60179: "fido",                                            

* Wed 03 Dec 2014 01:03:27 AM JST
    3 echo                     7/udp
    5 discard                  9/udp
    8 daytime                  13/udp
   12 msp                      18/udp
   14 chargen                  19/udp
   17 fsp                      21/udp
   19 ssh                      22/udp
   23 time                     37/udp
   24 rlp                      39/udp
   28 tacacs                   49/udp
   30 re-mail-ck               50/udp
   32 domain                   53/udp
   35 tacacs-ds                65/udp
   37 bootps                   67/udp
   39 bootpc                   68/udp
   40 tftp                     69/udp
   42 gopher                   70/udp
   46 http                     80/udp
   49 kerberos                 88/udp
   54 acr-nema                 104/udp
   56 csnet-ns                 105/udp
   58 rtelnet                  107/udp
   60 pop2                     109/udp
   62 pop3                     110/udp
   64 sunrpc                   111/udp
   70 ntp                      123/udp
   72 pwdgen                   129/udp
   74 loc-srv                  135/udp
   76 netbios-ns               137/udp
   78 netbios-dgm              138/udp
   80 netbios-ssn              139/udp
   82 imap2                    143/udp
   84 snmp                     161/udp
   86 snmp-trap                162/udp
   88 cmip-man                 163/udp
   90 cmip-agent               164/udp
   92 mailq                    174/udp
   94 xdmcp                    177/udp
   96 nextstep                 178/udp
   98 bgp                      179/udp
  100 prospero                 191/udp
  102 irc                      194/udp
  104 smux                     199/udp
  106 at-rtmp                  201/udp
  108 at-nbp                   202/udp
  110 at-echo                  204/udp
  112 at-zis                   206/udp
  114 qmtp                     209/udp
  116 z3950                    210/udp
  118 ipx                      213/udp
  120 imap3                    220/udp
  122 pawserv                  345/udp
  124 zserv                    346/udp
  126 fatserv                  347/udp
  128 rpc2portmap              369/udp
  130 codaauth2                370/udp
  132 clearcase                371/udp
  134 ulistserv                372/udp
  136 ldap                     389/udp
  138 imsp                     406/udp
  140 svrloc                   427/udp
  142 https                    443/udp
  144 snpp                     444/udp
  146 microsoft-ds             445/udp
  148 kpasswd                  464/udp
  150 saft                     487/udp
  152 isakmp                   500/udp
  154 rtsp                     554/udp
  156 nqs                      607/udp
  158 npmp-local               610/udp
  160 npmp-gui                 611/udp
  162 hmmp-ind                 612/udp
  163 asf-rmcp                 623/udp
  165 qmqp                     628/udp
  167 ipp                      631/udp
  169 biff                     512/udp
  171 who                      513/udp
  173 syslog                   514/udp
  175 talk                     517/udp
  176 ntalk                    518/udp
  177 route                    520/udp
  178 timed                    525/udp
  183 netwall                  533/udp
  185 gdomap                   538/udp
  190 dhcpv6-client            546/udp
  192 dhcpv6-server            547/udp
  194 afpovertcp               548/udp
  196 idfp                     549/udp
  199 nntps                    563/udp
  201 submission               587/udp
  203 ldaps                    636/udp
  205 tinc                     655/udp
  207 silc                     706/udp
  210 webster                  765/udp
  212 rsync                    873/udp
  216 telnets                  992/udp
  218 imaps                    993/udp
  220 ircs                     994/udp
  222 pop3s                    995/udp
  224 socks                    1080/udp
  226 proofd                   1093/udp
  228 rootd                    1094/udp
  230 openvpn                  1194/udp
  232 rmiregistry              1099/udp
  234 kazaa                    1214/udp
  236 nessus                   1241/udp
  238 lotusnote                1352/udp
  240 ms-sql-s                 1433/udp
  242 ms-sql-m                 1434/udp
  244 ingreslock               1524/udp
  246 prospero-np              1525/udp
  248 datametrics              1645/udp
  250 sa-msg-port              1646/udp
  252 kermit                   1649/udp
  254 groupwise                1677/udp
  256 l2f                      1701/udp
  258 radius                   1812/udp
  260 radius-acct              1813/udp
  262 msnp                     1863/udp
  267 cisco-sccp               2000/udp
  271 nfs                      2049/udp
  273 gnunet                   2086/udp
  275 rtcm-sc104               2101/udp
  277 gsigatekeeper            2119/udp
  279 gris                     2135/udp
  281 cvspserver               2401/udp
  283 venus                    2430/udp
  285 venus-se                 2431/udp
  287 codasrv                  2432/udp
  289 codasrv-se               2433/udp
  291 mon                      2583/udp
  293 dict                     2628/udp
  295 f5-globalsite            2792/udp
  297 gsiftp                   2811/udp
  299 gpsd                     2947/udp
  301 gds-db                   3050/udp
  303 icpv2                    3130/udp
  306 mysql                    3306/udp
  308 nut                      3493/udp
  310 distcc                   3632/udp
  312 daap                     3689/udp
  314 svn                      3690/udp
  316 suucp                    4031/udp
  318 sysrqd                   4094/udp
  321 epmd                     4369/udp
  323 remctl                   4373/udp
  325 f5-iquery                4353/udp
  327 iax                      4569/udp
  329 mtn                      4691/udp
  331 radmin-port              4899/udp
  332 rfe                      5002/udp
  335 mmcc                     5050/udp
  337 sip                      5060/udp
  339 sip-tls                  5061/udp
  341 aol                      5190/udp
  343 xmpp-client              5222/udp
  345 xmpp-server              5269/udp
  347 cfengine                 5308/udp
  349 mdns                     5353/udp
  351 postgresql               5432/udp
  353 freeciv                  5556/udp
  355 amqp                     5672/udp
  358 ggz                      5688/udp
  360 x11                      6000/udp
  362 x11-1                    6001/udp
  364 x11-2                    6002/udp
  366 x11-3                    6003/udp
  368 x11-4                    6004/udp
  370 x11-5                    6005/udp
  372 x11-6                    6006/udp
  374 x11-7                    6007/udp
  376 gnutella-svc             6346/udp
  378 gnutella-rtr             6347/udp
  380 sge-qmaster              6444/udp
  382 sge-execd                6445/udp
  384 mysql-proxy              6446/udp
  386 afs3-fileserver            7000/udp
  388 afs3-callback            7001/udp
  390 afs3-prserver            7002/udp
  392 afs3-vlserver            7003/udp
  394 afs3-kaserver            7004/udp
  396 afs3-volser              7005/udp
  398 afs3-errors              7006/udp
  400 afs3-bos                 7007/udp
  402 afs3-update              7008/udp
  404 afs3-rmtsys              7009/udp
  406 font-service             7100/udp
  408 http-alt                 8080/udp
  410 bacula-dir               9101/udp
  412 bacula-fd                9102/udp
  414 bacula-sd                9103/udp
  416 xmms2                    9667/udp
  419 zabbix-agent             10050/udp
  421 zabbix-trapper           10051/udp
  423 amanda                   10080/udp
  425 hkp                      11371/udp
  427 bprd                     13720/udp
  429 bpdbm                    13721/udp
  431 bpjava-msvc              13722/udp
  433 vnetd                    13724/udp
  435 bpcd                     13782/udp
  437 vopied                   13783/udp
  441 wnn6                     22273/udp
  446 kerberos4                750/udp
  448 kerberos-master          751/udp
  450 passwd-server            752/udp
  457 zephyr-srv               2102/udp
  458 zephyr-clt               2103/udp
  459 zephyr-hm                2104/udp
  467 poppassd                 106/udp
  471 moira-ureg               779/udp
  474 omirr                    808/udp
  476 customs                  1001/udp
  478 predict                  1210/udp
  487 ninstall                 2150/udp
  498 afbackup                 2988/udp
  500 afmbackup                2989/udp
  510 noclog                   5354/udp
  512 hostmon                  5355/udp
  513 rplay                    5555/udp
  524 omniorb                  8088/udp
  527 mandelspawn              9359/udp
  532 kamanda                  10081/udp
  536 smsqp                    11201/udp
  538 xpilot                   15345/udp
  539 sgi-cmsd                 17001/udp
  540 sgi-crsd                 17002/udp
  541 sgi-gcd                  17003/udp
  544 isdnlog                  20011/udp
  546 vboxd                    20012/udp
  549 asp                      27374/udp
* Wed 03 Dec 2014 01:03:55 AM JST
549 
* Wed 03 Dec 2014 01:03:55 AM JST
546 
* Wed 03 Dec 2014 01:03:55 AM JST
544 
* Wed 03 Dec 2014 01:03:55 AM JST
541 
* Wed 03 Dec 2014 01:03:55 AM JST
540 
* Wed 03 Dec 2014 01:03:55 AM JST
539 
* Wed 03 Dec 2014 01:03:55 AM JST
538 
* Wed 03 Dec 2014 01:03:56 AM JST
536 
* Wed 03 Dec 2014 01:03:56 AM JST
532 
* Wed 03 Dec 2014 01:03:56 AM JST
527 
* Wed 03 Dec 2014 01:03:56 AM JST
524 
* Wed 03 Dec 2014 01:03:56 AM JST
513 
* Wed 03 Dec 2014 01:03:56 AM JST
512 
* Wed 03 Dec 2014 01:03:56 AM JST
510 
* Wed 03 Dec 2014 01:03:56 AM JST
500 
* Wed 03 Dec 2014 01:03:56 AM JST
498 
* Wed 03 Dec 2014 01:03:56 AM JST
487 
* Wed 03 Dec 2014 01:03:56 AM JST
478 
* Wed 03 Dec 2014 01:03:56 AM JST
476 
* Wed 03 Dec 2014 01:03:56 AM JST
474 
* Wed 03 Dec 2014 01:03:57 AM JST
471 
* Wed 03 Dec 2014 01:03:57 AM JST
467 
* Wed 03 Dec 2014 01:03:57 AM JST
459 
* Wed 03 Dec 2014 01:03:57 AM JST
458 
* Wed 03 Dec 2014 01:03:57 AM JST
457 
* Wed 03 Dec 2014 01:03:57 AM JST
450 
* Wed 03 Dec 2014 01:03:57 AM JST
448 
* Wed 03 Dec 2014 01:03:57 AM JST
446 
* Wed 03 Dec 2014 01:03:57 AM JST
441 
* Wed 03 Dec 2014 01:03:57 AM JST
437 
* Wed 03 Dec 2014 01:03:57 AM JST
435 
* Wed 03 Dec 2014 01:03:57 AM JST
433 
* Wed 03 Dec 2014 01:03:57 AM JST
431 
* Wed 03 Dec 2014 01:03:57 AM JST
429 
* Wed 03 Dec 2014 01:03:58 AM JST
427 
* Wed 03 Dec 2014 01:03:58 AM JST
425 
* Wed 03 Dec 2014 01:03:58 AM JST
423 
* Wed 03 Dec 2014 01:03:58 AM JST
421 
* Wed 03 Dec 2014 01:03:58 AM JST
419 
* Wed 03 Dec 2014 01:03:58 AM JST
416 
* Wed 03 Dec 2014 01:03:58 AM JST
414 
* Wed 03 Dec 2014 01:03:58 AM JST
412 
* Wed 03 Dec 2014 01:03:58 AM JST
410 
* Wed 03 Dec 2014 01:03:58 AM JST
408 
* Wed 03 Dec 2014 01:03:58 AM JST
406 
* Wed 03 Dec 2014 01:03:58 AM JST
404 
* Wed 03 Dec 2014 01:03:59 AM JST
402 
* Wed 03 Dec 2014 01:03:59 AM JST
400 
* Wed 03 Dec 2014 01:03:59 AM JST
398 
* Wed 03 Dec 2014 01:03:59 AM JST
396 
* Wed 03 Dec 2014 01:03:59 AM JST
394 
* Wed 03 Dec 2014 01:03:59 AM JST
392 
* Wed 03 Dec 2014 01:03:59 AM JST
390 
* Wed 03 Dec 2014 01:03:59 AM JST
388 
* Wed 03 Dec 2014 01:03:59 AM JST
386 
* Wed 03 Dec 2014 01:04:00 AM JST
384 
* Wed 03 Dec 2014 01:04:00 AM JST
382 
* Wed 03 Dec 2014 01:04:00 AM JST
380 
* Wed 03 Dec 2014 01:04:00 AM JST
378 
* Wed 03 Dec 2014 01:04:00 AM JST
376 
* Wed 03 Dec 2014 01:04:00 AM JST
374 
* Wed 03 Dec 2014 01:04:00 AM JST
372 
* Wed 03 Dec 2014 01:04:00 AM JST
370 
* Wed 03 Dec 2014 01:04:00 AM JST
368 
* Wed 03 Dec 2014 01:04:00 AM JST
366 
* Wed 03 Dec 2014 01:04:00 AM JST
364 
* Wed 03 Dec 2014 01:04:00 AM JST
362 
* Wed 03 Dec 2014 01:04:00 AM JST
360 
* Wed 03 Dec 2014 01:04:00 AM JST
358 
* Wed 03 Dec 2014 01:04:01 AM JST
355 
* Wed 03 Dec 2014 01:04:01 AM JST
353 
* Wed 03 Dec 2014 01:04:01 AM JST
351 
* Wed 03 Dec 2014 01:04:01 AM JST
349 
* Wed 03 Dec 2014 01:04:01 AM JST
347 
* Wed 03 Dec 2014 01:04:01 AM JST
345 
* Wed 03 Dec 2014 01:04:01 AM JST
343 
* Wed 03 Dec 2014 01:04:01 AM JST
341 
* Wed 03 Dec 2014 01:04:01 AM JST
339 
* Wed 03 Dec 2014 01:04:01 AM JST
337 
* Wed 03 Dec 2014 01:04:01 AM JST
335 
* Wed 03 Dec 2014 01:04:01 AM JST
332 
* Wed 03 Dec 2014 01:04:01 AM JST
331 
* Wed 03 Dec 2014 01:04:02 AM JST
329 
* Wed 03 Dec 2014 01:04:02 AM JST
327 
* Wed 03 Dec 2014 01:04:02 AM JST
325 
* Wed 03 Dec 2014 01:04:02 AM JST
323 
* Wed 03 Dec 2014 01:04:02 AM JST
321 
* Wed 03 Dec 2014 01:04:02 AM JST
318 
* Wed 03 Dec 2014 01:04:02 AM JST
316 
* Wed 03 Dec 2014 01:04:02 AM JST
314 
* Wed 03 Dec 2014 01:04:02 AM JST
312 
* Wed 03 Dec 2014 01:04:03 AM JST
310 
* Wed 03 Dec 2014 01:04:03 AM JST
308 
* Wed 03 Dec 2014 01:04:03 AM JST
306 
* Wed 03 Dec 2014 01:04:03 AM JST
303 
* Wed 03 Dec 2014 01:04:03 AM JST
301 
* Wed 03 Dec 2014 01:04:03 AM JST
299 
* Wed 03 Dec 2014 01:04:03 AM JST
297 
* Wed 03 Dec 2014 01:04:03 AM JST
295 
* Wed 03 Dec 2014 01:04:03 AM JST
293 
* Wed 03 Dec 2014 01:04:03 AM JST
291 
* Wed 03 Dec 2014 01:04:04 AM JST
289 
* Wed 03 Dec 2014 01:04:04 AM JST
287 
* Wed 03 Dec 2014 01:04:04 AM JST
285 
* Wed 03 Dec 2014 01:04:04 AM JST
283 
* Wed 03 Dec 2014 01:04:04 AM JST
281 
* Wed 03 Dec 2014 01:04:04 AM JST
279 
* Wed 03 Dec 2014 01:04:04 AM JST
277 
* Wed 03 Dec 2014 01:04:04 AM JST
275 
* Wed 03 Dec 2014 01:04:04 AM JST
273 
* Wed 03 Dec 2014 01:04:04 AM JST
271 
* Wed 03 Dec 2014 01:04:04 AM JST
267 
* Wed 03 Dec 2014 01:04:04 AM JST
262 
* Wed 03 Dec 2014 01:04:04 AM JST
260 
* Wed 03 Dec 2014 01:04:04 AM JST
258 
* Wed 03 Dec 2014 01:04:05 AM JST
256 
* Wed 03 Dec 2014 01:04:05 AM JST
254 
* Wed 03 Dec 2014 01:04:05 AM JST
252 
* Wed 03 Dec 2014 01:04:05 AM JST
250 
* Wed 03 Dec 2014 01:04:05 AM JST
248 
* Wed 03 Dec 2014 01:04:05 AM JST
246 
* Wed 03 Dec 2014 01:04:05 AM JST
244 
* Wed 03 Dec 2014 01:04:05 AM JST
242 
* Wed 03 Dec 2014 01:04:05 AM JST
240 
* Wed 03 Dec 2014 01:04:05 AM JST
238 
* Wed 03 Dec 2014 01:04:05 AM JST
236 
* Wed 03 Dec 2014 01:04:05 AM JST
234 
* Wed 03 Dec 2014 01:04:05 AM JST
232 
* Wed 03 Dec 2014 01:04:06 AM JST
230 
* Wed 03 Dec 2014 01:04:06 AM JST
228 
* Wed 03 Dec 2014 01:04:06 AM JST
226 
* Wed 03 Dec 2014 01:04:06 AM JST
224 
* Wed 03 Dec 2014 01:04:06 AM JST
222 
* Wed 03 Dec 2014 01:04:06 AM JST
220 
* Wed 03 Dec 2014 01:04:06 AM JST
218 
* Wed 03 Dec 2014 01:04:06 AM JST
216 
* Wed 03 Dec 2014 01:04:07 AM JST
212 
* Wed 03 Dec 2014 01:04:07 AM JST
210 
* Wed 03 Dec 2014 01:04:07 AM JST
207 
* Wed 03 Dec 2014 01:04:07 AM JST
205 
* Wed 03 Dec 2014 01:04:07 AM JST
203 
* Wed 03 Dec 2014 01:04:07 AM JST
201 
* Wed 03 Dec 2014 01:04:07 AM JST
199 
* Wed 03 Dec 2014 01:04:07 AM JST
196 
* Wed 03 Dec 2014 01:04:07 AM JST
194 
* Wed 03 Dec 2014 01:04:07 AM JST
192 
* Wed 03 Dec 2014 01:04:07 AM JST
190 
* Wed 03 Dec 2014 01:04:07 AM JST
185 
* Wed 03 Dec 2014 01:04:07 AM JST
183 
* Wed 03 Dec 2014 01:04:08 AM JST
178 
* Wed 03 Dec 2014 01:04:08 AM JST
177 
* Wed 03 Dec 2014 01:04:08 AM JST
176 
* Wed 03 Dec 2014 01:04:08 AM JST
175 
* Wed 03 Dec 2014 01:04:08 AM JST
173 
* Wed 03 Dec 2014 01:04:08 AM JST
171 
* Wed 03 Dec 2014 01:04:08 AM JST
169 
* Wed 03 Dec 2014 01:04:08 AM JST
167 
* Wed 03 Dec 2014 01:04:08 AM JST
165 
* Wed 03 Dec 2014 01:04:08 AM JST
163 
* Wed 03 Dec 2014 01:04:08 AM JST
162 
* Wed 03 Dec 2014 01:04:08 AM JST
160 
* Wed 03 Dec 2014 01:04:08 AM JST
158 
* Wed 03 Dec 2014 01:04:08 AM JST
156 
* Wed 03 Dec 2014 01:04:09 AM JST
154 
* Wed 03 Dec 2014 01:04:09 AM JST
152 
* Wed 03 Dec 2014 01:04:09 AM JST
150 
* Wed 03 Dec 2014 01:04:09 AM JST
148 
* Wed 03 Dec 2014 01:04:09 AM JST
146 
* Wed 03 Dec 2014 01:04:09 AM JST
144 
* Wed 03 Dec 2014 01:04:09 AM JST
142 
* Wed 03 Dec 2014 01:04:09 AM JST
140 
* Wed 03 Dec 2014 01:04:09 AM JST
138 
* Wed 03 Dec 2014 01:04:09 AM JST
136 
* Wed 03 Dec 2014 01:04:09 AM JST
134 
* Wed 03 Dec 2014 01:04:09 AM JST
132 
* Wed 03 Dec 2014 01:04:09 AM JST
130 
* Wed 03 Dec 2014 01:04:10 AM JST
128 
* Wed 03 Dec 2014 01:04:10 AM JST
126 
* Wed 03 Dec 2014 01:04:10 AM JST
124 
* Wed 03 Dec 2014 01:04:10 AM JST
122 
* Wed 03 Dec 2014 01:04:10 AM JST
120 
* Wed 03 Dec 2014 01:04:10 AM JST
118 
* Wed 03 Dec 2014 01:04:10 AM JST
116 
* Wed 03 Dec 2014 01:04:11 AM JST
114 
* Wed 03 Dec 2014 01:04:11 AM JST
112 
* Wed 03 Dec 2014 01:04:11 AM JST
110 
* Wed 03 Dec 2014 01:04:11 AM JST
108 
* Wed 03 Dec 2014 01:04:11 AM JST
106 
* Wed 03 Dec 2014 01:04:11 AM JST
104 
* Wed 03 Dec 2014 01:04:11 AM JST
102 
* Wed 03 Dec 2014 01:04:11 AM JST
100 
* Wed 03 Dec 2014 01:04:11 AM JST
98 
* Wed 03 Dec 2014 01:04:11 AM JST
96 
* Wed 03 Dec 2014 01:04:11 AM JST
94 
* Wed 03 Dec 2014 01:04:11 AM JST
92 
* Wed 03 Dec 2014 01:04:12 AM JST
90 
* Wed 03 Dec 2014 01:04:12 AM JST
88 
* Wed 03 Dec 2014 01:04:12 AM JST
86 
* Wed 03 Dec 2014 01:04:12 AM JST
84 
* Wed 03 Dec 2014 01:04:12 AM JST
82 
* Wed 03 Dec 2014 01:04:12 AM JST
80 
* Wed 03 Dec 2014 01:04:12 AM JST
78 
* Wed 03 Dec 2014 01:04:12 AM JST
76 
* Wed 03 Dec 2014 01:04:12 AM JST
74 
* Wed 03 Dec 2014 01:04:12 AM JST
72 
* Wed 03 Dec 2014 01:04:12 AM JST
70 
* Wed 03 Dec 2014 01:04:12 AM JST
64 
* Wed 03 Dec 2014 01:04:12 AM JST
62 
* Wed 03 Dec 2014 01:04:13 AM JST
60 
* Wed 03 Dec 2014 01:04:13 AM JST
58 
* Wed 03 Dec 2014 01:04:13 AM JST
56 
* Wed 03 Dec 2014 01:04:13 AM JST
54 
* Wed 03 Dec 2014 01:04:13 AM JST
49 
* Wed 03 Dec 2014 01:04:13 AM JST
46 
* Wed 03 Dec 2014 01:04:13 AM JST
42 
* Wed 03 Dec 2014 01:04:13 AM JST
40 
* Wed 03 Dec 2014 01:04:13 AM JST
39 
* Wed 03 Dec 2014 01:04:13 AM JST
37 
* Wed 03 Dec 2014 01:04:13 AM JST
35 
* Wed 03 Dec 2014 01:04:13 AM JST
32 
* Wed 03 Dec 2014 01:04:13 AM JST
30 
* Wed 03 Dec 2014 01:04:14 AM JST
28 
* Wed 03 Dec 2014 01:04:14 AM JST
24 
* Wed 03 Dec 2014 01:04:14 AM JST
23 
* Wed 03 Dec 2014 01:04:14 AM JST
19 
* Wed 03 Dec 2014 01:04:14 AM JST
17 
* Wed 03 Dec 2014 01:04:14 AM JST
14 
* Wed 03 Dec 2014 01:04:14 AM JST
12 
* Wed 03 Dec 2014 01:04:14 AM JST
8 
* Wed 03 Dec 2014 01:04:14 AM JST
5 
* Wed 03 Dec 2014 01:04:15 AM JST
3 
* Wed 03 Dec 2014 01:05:08 AM JST
udp 
* Wed 03 Dec 2014 01:05:08 AM JST
udp
* Wed 03 Dec 2014 01:05:08 AM JST
udp
* Wed 03 Dec 2014 01:05:08 AM JST
udp
* Wed 03 Dec 2014 01:05:08 AM JST
udp
* Wed 03 Dec 2014 01:05:08 AM JST
udp
* Wed 03 Dec 2014 01:05:08 AM JST
udp
* Wed 03 Dec 2014 01:05:08 AM JST
udp
* Wed 03 Dec 2014 01:05:08 AM JST
udp
* Wed 03 Dec 2014 01:05:09 AM JST
udp
* Wed 03 Dec 2014 01:05:09 AM JST
udp
* Wed 03 Dec 2014 01:05:09 AM JST
udp
* Wed 03 Dec 2014 01:05:09 AM JST
udp
* Wed 03 Dec 2014 01:05:09 AM JST
udp
* Wed 03 Dec 2014 01:05:09 AM JST
udp
* Wed 03 Dec 2014 01:05:09 AM JST
udp
* Wed 03 Dec 2014 01:05:09 AM JST
udp
* Wed 03 Dec 2014 01:05:09 AM JST
udp
* Wed 03 Dec 2014 01:05:09 AM JST
udp
* Wed 03 Dec 2014 01:05:09 AM JST
udp
* Wed 03 Dec 2014 01:05:09 AM JST
udp
* Wed 03 Dec 2014 01:05:09 AM JST
udp
* Wed 03 Dec 2014 01:05:09 AM JST
udp
* Wed 03 Dec 2014 01:05:10 AM JST
udp
* Wed 03 Dec 2014 01:05:10 AM JST
udp
* Wed 03 Dec 2014 01:05:10 AM JST
udp
* Wed 03 Dec 2014 01:05:10 AM JST
udp
* Wed 03 Dec 2014 01:05:10 AM JST
udp
* Wed 03 Dec 2014 01:05:10 AM JST
udp
* Wed 03 Dec 2014 01:05:10 AM JST
udp
* Wed 03 Dec 2014 01:05:10 AM JST
udp
* Wed 03 Dec 2014 01:05:10 AM JST
udp
* Wed 03 Dec 2014 01:05:10 AM JST
udp
* Wed 03 Dec 2014 01:05:10 AM JST
udp
* Wed 03 Dec 2014 01:05:10 AM JST
udp
* Wed 03 Dec 2014 01:05:11 AM JST
udp
* Wed 03 Dec 2014 01:05:11 AM JST
udp
* Wed 03 Dec 2014 01:05:11 AM JST
udp
* Wed 03 Dec 2014 01:05:11 AM JST
udp
* Wed 03 Dec 2014 01:05:11 AM JST
udp
* Wed 03 Dec 2014 01:05:11 AM JST
udp
* Wed 03 Dec 2014 01:05:11 AM JST
udp
* Wed 03 Dec 2014 01:05:11 AM JST
udp
* Wed 03 Dec 2014 01:05:11 AM JST
udp
* Wed 03 Dec 2014 01:05:11 AM JST
udp
* Wed 03 Dec 2014 01:05:11 AM JST
udp
* Wed 03 Dec 2014 01:05:11 AM JST
udp
* Wed 03 Dec 2014 01:05:12 AM JST
udp
* Wed 03 Dec 2014 01:05:12 AM JST
udp
* Wed 03 Dec 2014 01:05:12 AM JST
udp
* Wed 03 Dec 2014 01:05:12 AM JST
udp
* Wed 03 Dec 2014 01:05:12 AM JST
udp
* Wed 03 Dec 2014 01:05:12 AM JST
udp
* Wed 03 Dec 2014 01:05:12 AM JST
udp
* Wed 03 Dec 2014 01:05:12 AM JST
udp
* Wed 03 Dec 2014 01:05:12 AM JST
udp
* Wed 03 Dec 2014 01:05:12 AM JST
udp
* Wed 03 Dec 2014 01:05:12 AM JST
udp
* Wed 03 Dec 2014 01:05:12 AM JST
udp
* Wed 03 Dec 2014 01:05:12 AM JST
udp
* Wed 03 Dec 2014 01:05:13 AM JST
udp
* Wed 03 Dec 2014 01:05:13 AM JST
udp
* Wed 03 Dec 2014 01:05:13 AM JST
udp
* Wed 03 Dec 2014 01:05:13 AM JST
udp
* Wed 03 Dec 2014 01:05:13 AM JST
udp
* Wed 03 Dec 2014 01:05:13 AM JST
udp
* Wed 03 Dec 2014 01:05:13 AM JST
udp
* Wed 03 Dec 2014 01:05:13 AM JST
udp
* Wed 03 Dec 2014 01:05:13 AM JST
udp
* Wed 03 Dec 2014 01:05:13 AM JST
udp
* Wed 03 Dec 2014 01:05:13 AM JST
udp
* Wed 03 Dec 2014 01:05:13 AM JST
udp
* Wed 03 Dec 2014 01:05:13 AM JST
udp
* Wed 03 Dec 2014 01:05:13 AM JST
udp
* Wed 03 Dec 2014 01:05:13 AM JST
udp
* Wed 03 Dec 2014 01:05:14 AM JST
udp
* Wed 03 Dec 2014 01:05:14 AM JST
udp
* Wed 03 Dec 2014 01:05:14 AM JST
udp
* Wed 03 Dec 2014 01:05:14 AM JST
udp
* Wed 03 Dec 2014 01:05:14 AM JST
udp
* Wed 03 Dec 2014 01:05:14 AM JST
udp
* Wed 03 Dec 2014 01:05:14 AM JST
udp
* Wed 03 Dec 2014 01:05:14 AM JST
udp
* Wed 03 Dec 2014 01:05:14 AM JST
udp
* Wed 03 Dec 2014 01:05:15 AM JST
udp
* Wed 03 Dec 2014 01:05:15 AM JST
udp
* Wed 03 Dec 2014 01:05:15 AM JST
udp
* Wed 03 Dec 2014 01:05:15 AM JST
udp
* Wed 03 Dec 2014 01:05:15 AM JST
udp
* Wed 03 Dec 2014 01:05:15 AM JST
udp
* Wed 03 Dec 2014 01:05:15 AM JST
udp
* Wed 03 Dec 2014 01:05:15 AM JST
udp
* Wed 03 Dec 2014 01:05:15 AM JST
udp
* Wed 03 Dec 2014 01:05:15 AM JST
udp
* Wed 03 Dec 2014 01:05:15 AM JST
udp
* Wed 03 Dec 2014 01:05:15 AM JST
udp
* Wed 03 Dec 2014 01:05:15 AM JST
udp
* Wed 03 Dec 2014 01:05:15 AM JST
udp
* Wed 03 Dec 2014 01:05:16 AM JST
udp
* Wed 03 Dec 2014 01:05:16 AM JST
udp
* Wed 03 Dec 2014 01:05:16 AM JST
udp
* Wed 03 Dec 2014 01:05:16 AM JST
udp
* Wed 03 Dec 2014 01:05:16 AM JST
udp
* Wed 03 Dec 2014 01:05:16 AM JST
udp
* Wed 03 Dec 2014 01:05:16 AM JST
udp
* Wed 03 Dec 2014 01:05:16 AM JST
udp
* Wed 03 Dec 2014 01:05:16 AM JST
udp
* Wed 03 Dec 2014 01:05:16 AM JST
udp
* Wed 03 Dec 2014 01:05:16 AM JST
udp
* Wed 03 Dec 2014 01:05:16 AM JST
udp
* Wed 03 Dec 2014 01:05:16 AM JST
udp
* Wed 03 Dec 2014 01:05:16 AM JST
udp
* Wed 03 Dec 2014 01:05:17 AM JST
udp
* Wed 03 Dec 2014 01:05:17 AM JST
udp
* Wed 03 Dec 2014 01:05:17 AM JST
udp
* Wed 03 Dec 2014 01:05:17 AM JST
udp
* Wed 03 Dec 2014 01:05:17 AM JST
udp
* Wed 03 Dec 2014 01:05:17 AM JST
udp
* Wed 03 Dec 2014 01:05:17 AM JST
udp
* Wed 03 Dec 2014 01:05:17 AM JST
udp
* Wed 03 Dec 2014 01:05:17 AM JST
udp
* Wed 03 Dec 2014 01:05:17 AM JST
udp
* Wed 03 Dec 2014 01:05:17 AM JST
udp
* Wed 03 Dec 2014 01:05:17 AM JST
udp
* Wed 03 Dec 2014 01:05:18 AM JST
udp
* Wed 03 Dec 2014 01:05:18 AM JST
udp
* Wed 03 Dec 2014 01:05:18 AM JST
udp
* Wed 03 Dec 2014 01:05:18 AM JST
udp
* Wed 03 Dec 2014 01:05:18 AM JST
udp
* Wed 03 Dec 2014 01:05:18 AM JST
udp
* Wed 03 Dec 2014 01:05:18 AM JST
udp
* Wed 03 Dec 2014 01:05:18 AM JST
udp
* Wed 03 Dec 2014 01:05:18 AM JST
udp
* Wed 03 Dec 2014 01:05:18 AM JST
udp
* Wed 03 Dec 2014 01:05:18 AM JST
udp
* Wed 03 Dec 2014 01:05:18 AM JST
udp
* Wed 03 Dec 2014 01:05:19 AM JST
udp
* Wed 03 Dec 2014 01:05:19 AM JST
udp
* Wed 03 Dec 2014 01:05:19 AM JST
udp
* Wed 03 Dec 2014 01:05:19 AM JST
udp
* Wed 03 Dec 2014 01:05:19 AM JST
udp
* Wed 03 Dec 2014 01:05:19 AM JST
udp
* Wed 03 Dec 2014 01:05:19 AM JST
udp
* Wed 03 Dec 2014 01:05:19 AM JST
udp
* Wed 03 Dec 2014 01:05:19 AM JST
udp
* Wed 03 Dec 2014 01:05:19 AM JST
udp
* Wed 03 Dec 2014 01:05:19 AM JST
udp
* Wed 03 Dec 2014 01:05:19 AM JST
udp
* Wed 03 Dec 2014 01:05:19 AM JST
udp
* Wed 03 Dec 2014 01:05:19 AM JST
udp
* Wed 03 Dec 2014 01:05:20 AM JST
udp
* Wed 03 Dec 2014 01:05:20 AM JST
udp
* Wed 03 Dec 2014 01:05:20 AM JST
udp
* Wed 03 Dec 2014 01:05:20 AM JST
udp
* Wed 03 Dec 2014 01:05:20 AM JST
udp
* Wed 03 Dec 2014 01:05:20 AM JST
udp
* Wed 03 Dec 2014 01:05:20 AM JST
udp
* Wed 03 Dec 2014 01:05:20 AM JST
udp
* Wed 03 Dec 2014 01:05:20 AM JST
udp
* Wed 03 Dec 2014 01:05:20 AM JST
udp
* Wed 03 Dec 2014 01:05:21 AM JST
udp
* Wed 03 Dec 2014 01:05:21 AM JST
udp
* Wed 03 Dec 2014 01:05:21 AM JST
udp
* Wed 03 Dec 2014 01:05:21 AM JST
udp
* Wed 03 Dec 2014 01:05:21 AM JST
udp
* Wed 03 Dec 2014 01:05:21 AM JST
udp
* Wed 03 Dec 2014 01:05:21 AM JST
udp
* Wed 03 Dec 2014 01:05:21 AM JST
udp
* Wed 03 Dec 2014 01:05:21 AM JST
udp
* Wed 03 Dec 2014 01:05:22 AM JST
udp
* Wed 03 Dec 2014 01:05:22 AM JST
udp
* Wed 03 Dec 2014 01:05:22 AM JST
udp
* Wed 03 Dec 2014 01:05:22 AM JST
udp
* Wed 03 Dec 2014 01:05:22 AM JST
udp
* Wed 03 Dec 2014 01:05:22 AM JST
udp
* Wed 03 Dec 2014 01:05:22 AM JST
udp
* Wed 03 Dec 2014 01:05:22 AM JST
udp
* Wed 03 Dec 2014 01:05:22 AM JST
udp
* Wed 03 Dec 2014 01:05:22 AM JST
udp
* Wed 03 Dec 2014 01:05:22 AM JST
udp
* Wed 03 Dec 2014 01:05:22 AM JST
udp
* Wed 03 Dec 2014 01:05:22 AM JST
udp
* Wed 03 Dec 2014 01:05:22 AM JST
udp
* Wed 03 Dec 2014 01:05:23 AM JST
udp
* Wed 03 Dec 2014 01:05:23 AM JST
udp
* Wed 03 Dec 2014 01:05:23 AM JST
udp
* Wed 03 Dec 2014 01:05:23 AM JST
udp
* Wed 03 Dec 2014 01:05:23 AM JST
udp
* Wed 03 Dec 2014 01:05:23 AM JST
udp
* Wed 03 Dec 2014 01:05:23 AM JST
udp
* Wed 03 Dec 2014 01:05:23 AM JST
udp
* Wed 03 Dec 2014 01:05:23 AM JST
udp
* Wed 03 Dec 2014 01:05:23 AM JST
udp
* Wed 03 Dec 2014 01:05:23 AM JST
udp
* Wed 03 Dec 2014 01:05:23 AM JST
udp
* Wed 03 Dec 2014 01:05:23 AM JST
udp
* Wed 03 Dec 2014 01:05:23 AM JST
udp
* Wed 03 Dec 2014 01:05:23 AM JST
udp
* Wed 03 Dec 2014 01:05:24 AM JST
udp
* Wed 03 Dec 2014 01:05:24 AM JST
udp
* Wed 03 Dec 2014 01:05:24 AM JST
udp
* Wed 03 Dec 2014 01:05:24 AM JST
udp
* Wed 03 Dec 2014 01:05:24 AM JST
udp
* Wed 03 Dec 2014 01:05:24 AM JST
udp
* Wed 03 Dec 2014 01:05:24 AM JST
udp
* Wed 03 Dec 2014 01:05:24 AM JST
udp
* Wed 03 Dec 2014 01:05:24 AM JST
udp
* Wed 03 Dec 2014 01:05:24 AM JST
udp
* Wed 03 Dec 2014 01:05:24 AM JST
udp
* Wed 03 Dec 2014 01:05:24 AM JST
udp
* Wed 03 Dec 2014 01:05:24 AM JST
udp
* Wed 03 Dec 2014 01:05:24 AM JST
udp
* Wed 03 Dec 2014 01:05:25 AM JST
udp
* Wed 03 Dec 2014 01:05:25 AM JST
udp
* Wed 03 Dec 2014 01:05:25 AM JST
udp
* Wed 03 Dec 2014 01:05:25 AM JST
udp
* Wed 03 Dec 2014 01:05:25 AM JST
udp
* Wed 03 Dec 2014 01:05:25 AM JST
udp
* Wed 03 Dec 2014 01:05:25 AM JST
udp
* Wed 03 Dec 2014 01:05:25 AM JST
udp
* Wed 03 Dec 2014 01:05:25 AM JST
udp
* Wed 03 Dec 2014 01:05:26 AM JST
udp
* Wed 03 Dec 2014 01:05:26 AM JST
udp
* Wed 03 Dec 2014 01:05:26 AM JST
udp
* Wed 03 Dec 2014 01:05:26 AM JST
udp
* Wed 03 Dec 2014 01:05:26 AM JST
udp
* Wed 03 Dec 2014 01:05:26 AM JST
udp
* Wed 03 Dec 2014 01:05:26 AM JST
udp
* Wed 03 Dec 2014 01:05:26 AM JST
udp
* Wed 03 Dec 2014 01:05:26 AM JST
udp
* Wed 03 Dec 2014 01:05:26 AM JST
udp
* Wed 03 Dec 2014 01:06:16 AM JST
7:
* Wed 03 Dec 2014 01:06:24 AM JST
9:
* Wed 03 Dec 2014 01:06:24 AM JST
13:
* Wed 03 Dec 2014 01:06:25 AM JST
18:
* Wed 03 Dec 2014 01:06:25 AM JST
19:
* Wed 03 Dec 2014 01:06:25 AM JST
21:
* Wed 03 Dec 2014 01:06:25 AM JST
22:
* Wed 03 Dec 2014 01:06:25 AM JST
37:
* Wed 03 Dec 2014 01:06:25 AM JST
39:
* Wed 03 Dec 2014 01:06:26 AM JST
49:
* Wed 03 Dec 2014 01:06:26 AM JST
50:
* Wed 03 Dec 2014 01:06:26 AM JST
53:
* Wed 03 Dec 2014 01:06:26 AM JST
65:
* Wed 03 Dec 2014 01:06:26 AM JST
67:
* Wed 03 Dec 2014 01:06:26 AM JST
68:
* Wed 03 Dec 2014 01:06:26 AM JST
69:
* Wed 03 Dec 2014 01:06:26 AM JST
70:
* Wed 03 Dec 2014 01:06:27 AM JST
80:
* Wed 03 Dec 2014 01:06:27 AM JST
88:
* Wed 03 Dec 2014 01:06:27 AM JST
104:
* Wed 03 Dec 2014 01:06:27 AM JST
105:
* Wed 03 Dec 2014 01:06:27 AM JST
107:
* Wed 03 Dec 2014 01:06:27 AM JST
109:
* Wed 03 Dec 2014 01:06:28 AM JST
110:
* Wed 03 Dec 2014 01:06:28 AM JST
111:
* Wed 03 Dec 2014 01:06:28 AM JST
123:
* Wed 03 Dec 2014 01:06:28 AM JST
129:
* Wed 03 Dec 2014 01:06:28 AM JST
135:
* Wed 03 Dec 2014 01:06:28 AM JST
137:
* Wed 03 Dec 2014 01:06:28 AM JST
138:
* Wed 03 Dec 2014 01:06:28 AM JST
139:
* Wed 03 Dec 2014 01:06:29 AM JST
143:
* Wed 03 Dec 2014 01:06:29 AM JST
161:
* Wed 03 Dec 2014 01:06:29 AM JST
162:
* Wed 03 Dec 2014 01:06:29 AM JST
163:
* Wed 03 Dec 2014 01:06:29 AM JST
164:
* Wed 03 Dec 2014 01:06:29 AM JST
174:
* Wed 03 Dec 2014 01:06:30 AM JST
177:
* Wed 03 Dec 2014 01:06:30 AM JST
178:
* Wed 03 Dec 2014 01:06:30 AM JST
179:
* Wed 03 Dec 2014 01:06:30 AM JST
191:
* Wed 03 Dec 2014 01:06:30 AM JST
194:
* Wed 03 Dec 2014 01:06:30 AM JST
199:
* Wed 03 Dec 2014 01:06:30 AM JST
201:
* Wed 03 Dec 2014 01:06:30 AM JST
202:
* Wed 03 Dec 2014 01:06:31 AM JST
204:
* Wed 03 Dec 2014 01:06:31 AM JST
206:
* Wed 03 Dec 2014 01:06:31 AM JST
209:
* Wed 03 Dec 2014 01:06:31 AM JST
210:
* Wed 03 Dec 2014 01:06:31 AM JST
213:
* Wed 03 Dec 2014 01:06:31 AM JST
220:
* Wed 03 Dec 2014 01:06:31 AM JST
345:
* Wed 03 Dec 2014 01:06:31 AM JST
346:
* Wed 03 Dec 2014 01:06:32 AM JST
347:
* Wed 03 Dec 2014 01:06:32 AM JST
369:
* Wed 03 Dec 2014 01:06:32 AM JST
370:
* Wed 03 Dec 2014 01:06:32 AM JST
371:
* Wed 03 Dec 2014 01:06:32 AM JST
372:
* Wed 03 Dec 2014 01:06:32 AM JST
389:
* Wed 03 Dec 2014 01:06:33 AM JST
406:
* Wed 03 Dec 2014 01:06:33 AM JST
427:
* Wed 03 Dec 2014 01:06:33 AM JST
443:
* Wed 03 Dec 2014 01:06:33 AM JST
444:
* Wed 03 Dec 2014 01:06:33 AM JST
445:
* Wed 03 Dec 2014 01:06:33 AM JST
464:
* Wed 03 Dec 2014 01:06:33 AM JST
487:
* Wed 03 Dec 2014 01:06:33 AM JST
500:
* Wed 03 Dec 2014 01:06:34 AM JST
554:
* Wed 03 Dec 2014 01:06:34 AM JST
607:
* Wed 03 Dec 2014 01:06:34 AM JST
610:
* Wed 03 Dec 2014 01:06:34 AM JST
611:
* Wed 03 Dec 2014 01:06:34 AM JST
612:
* Wed 03 Dec 2014 01:06:34 AM JST
623:
* Wed 03 Dec 2014 01:06:34 AM JST
628:
* Wed 03 Dec 2014 01:06:34 AM JST
631:
* Wed 03 Dec 2014 01:06:35 AM JST
512:
* Wed 03 Dec 2014 01:06:35 AM JST
513:
* Wed 03 Dec 2014 01:06:35 AM JST
514:
* Wed 03 Dec 2014 01:06:35 AM JST
517:
* Wed 03 Dec 2014 01:06:35 AM JST
518:
* Wed 03 Dec 2014 01:06:35 AM JST
520:
* Wed 03 Dec 2014 01:06:36 AM JST
525:
* Wed 03 Dec 2014 01:06:36 AM JST
533:
* Wed 03 Dec 2014 01:06:36 AM JST
538:
* Wed 03 Dec 2014 01:06:36 AM JST
546:
* Wed 03 Dec 2014 01:06:36 AM JST
547:
* Wed 03 Dec 2014 01:06:36 AM JST
548:
* Wed 03 Dec 2014 01:06:36 AM JST
549:
* Wed 03 Dec 2014 01:06:36 AM JST
563:
* Wed 03 Dec 2014 01:06:37 AM JST
587:
* Wed 03 Dec 2014 01:06:37 AM JST
636:
* Wed 03 Dec 2014 01:06:37 AM JST
655:
* Wed 03 Dec 2014 01:06:37 AM JST
706:
* Wed 03 Dec 2014 01:06:37 AM JST
765:
* Wed 03 Dec 2014 01:06:37 AM JST
873:
* Wed 03 Dec 2014 01:06:37 AM JST
992:
* Wed 03 Dec 2014 01:06:37 AM JST
993:
* Wed 03 Dec 2014 01:06:38 AM JST
994:
* Wed 03 Dec 2014 01:06:38 AM JST
995:
* Wed 03 Dec 2014 01:06:38 AM JST
1080:
* Wed 03 Dec 2014 01:06:38 AM JST
1093:
* Wed 03 Dec 2014 01:06:38 AM JST
1094:
* Wed 03 Dec 2014 01:06:39 AM JST
1194:
* Wed 03 Dec 2014 01:06:39 AM JST
1099:
* Wed 03 Dec 2014 01:06:39 AM JST
1214:
* Wed 03 Dec 2014 01:06:39 AM JST
1241:
* Wed 03 Dec 2014 01:06:39 AM JST
1352:
* Wed 03 Dec 2014 01:06:39 AM JST
1433:
* Wed 03 Dec 2014 01:06:39 AM JST
1434:
* Wed 03 Dec 2014 01:06:40 AM JST
1524:
* Wed 03 Dec 2014 01:06:40 AM JST
1525:
* Wed 03 Dec 2014 01:06:40 AM JST
1645:
* Wed 03 Dec 2014 01:06:40 AM JST
1646:
* Wed 03 Dec 2014 01:06:40 AM JST
1649:
* Wed 03 Dec 2014 01:06:40 AM JST
1677:
* Wed 03 Dec 2014 01:06:40 AM JST
1701:
* Wed 03 Dec 2014 01:06:40 AM JST
1812:
* Wed 03 Dec 2014 01:06:41 AM JST
1813:
* Wed 03 Dec 2014 01:06:41 AM JST
1863:
* Wed 03 Dec 2014 01:06:41 AM JST
2000:
* Wed 03 Dec 2014 01:06:41 AM JST
2049:
* Wed 03 Dec 2014 01:06:41 AM JST
2086:
* Wed 03 Dec 2014 01:06:41 AM JST
2101:
* Wed 03 Dec 2014 01:06:41 AM JST
2119:
* Wed 03 Dec 2014 01:06:41 AM JST
2135:
* Wed 03 Dec 2014 01:06:42 AM JST
2401:
* Wed 03 Dec 2014 01:06:42 AM JST
2430:
* Wed 03 Dec 2014 01:06:42 AM JST
2431:
* Wed 03 Dec 2014 01:06:42 AM JST
2432:
* Wed 03 Dec 2014 01:06:42 AM JST
2433:
* Wed 03 Dec 2014 01:06:42 AM JST
2583:
* Wed 03 Dec 2014 01:06:43 AM JST
2628:
* Wed 03 Dec 2014 01:06:43 AM JST
2792:
* Wed 03 Dec 2014 01:06:43 AM JST
2811:
* Wed 03 Dec 2014 01:06:43 AM JST
2947:
* Wed 03 Dec 2014 01:06:43 AM JST
3050:
* Wed 03 Dec 2014 01:06:43 AM JST
3130:
* Wed 03 Dec 2014 01:06:43 AM JST
3306:
* Wed 03 Dec 2014 01:06:43 AM JST
3493:
* Wed 03 Dec 2014 01:06:44 AM JST
3632:
* Wed 03 Dec 2014 01:06:44 AM JST
3689:
* Wed 03 Dec 2014 01:06:44 AM JST
3690:
* Wed 03 Dec 2014 01:06:44 AM JST
4031:
* Wed 03 Dec 2014 01:06:44 AM JST
4094:
* Wed 03 Dec 2014 01:06:44 AM JST
4369:
* Wed 03 Dec 2014 01:06:44 AM JST
4373:
* Wed 03 Dec 2014 01:06:44 AM JST
4353:
* Wed 03 Dec 2014 01:06:45 AM JST
4569:
* Wed 03 Dec 2014 01:06:45 AM JST
4691:
* Wed 03 Dec 2014 01:06:45 AM JST
4899:
* Wed 03 Dec 2014 01:06:45 AM JST
5002:
* Wed 03 Dec 2014 01:06:45 AM JST
5050:
* Wed 03 Dec 2014 01:06:45 AM JST
5060:
* Wed 03 Dec 2014 01:06:45 AM JST
5061:
* Wed 03 Dec 2014 01:06:46 AM JST
5190:
* Wed 03 Dec 2014 01:06:46 AM JST
5222:
* Wed 03 Dec 2014 01:06:46 AM JST
5269:
* Wed 03 Dec 2014 01:06:46 AM JST
5308:
* Wed 03 Dec 2014 01:06:46 AM JST
5353:
* Wed 03 Dec 2014 01:06:46 AM JST
5432:
* Wed 03 Dec 2014 01:06:46 AM JST
5556:
* Wed 03 Dec 2014 01:06:47 AM JST
5672:
* Wed 03 Dec 2014 01:06:47 AM JST
5688:
* Wed 03 Dec 2014 01:06:47 AM JST
6000:
* Wed 03 Dec 2014 01:06:47 AM JST
6001:
* Wed 03 Dec 2014 01:06:47 AM JST
6002:
* Wed 03 Dec 2014 01:06:47 AM JST
6003:
* Wed 03 Dec 2014 01:06:47 AM JST
6004:
* Wed 03 Dec 2014 01:06:47 AM JST
6005:
* Wed 03 Dec 2014 01:06:48 AM JST
6006:
* Wed 03 Dec 2014 01:06:48 AM JST
6007:
* Wed 03 Dec 2014 01:06:48 AM JST
6346:
* Wed 03 Dec 2014 01:06:48 AM JST
6347:
* Wed 03 Dec 2014 01:06:48 AM JST
6444:
* Wed 03 Dec 2014 01:06:48 AM JST
6445:
* Wed 03 Dec 2014 01:06:48 AM JST
6446:
* Wed 03 Dec 2014 01:06:48 AM JST
7000:
* Wed 03 Dec 2014 01:06:49 AM JST
7001:
* Wed 03 Dec 2014 01:06:49 AM JST
7002:
* Wed 03 Dec 2014 01:06:49 AM JST
7003:
* Wed 03 Dec 2014 01:06:49 AM JST
7004:
* Wed 03 Dec 2014 01:06:49 AM JST
7005:
* Wed 03 Dec 2014 01:06:50 AM JST
7006:
* Wed 03 Dec 2014 01:06:50 AM JST
7007:
* Wed 03 Dec 2014 01:06:50 AM JST
7008:
* Wed 03 Dec 2014 01:06:50 AM JST
7009:
* Wed 03 Dec 2014 01:06:50 AM JST
7100:
* Wed 03 Dec 2014 01:06:50 AM JST
8080:
* Wed 03 Dec 2014 01:06:50 AM JST
9101:
* Wed 03 Dec 2014 01:06:50 AM JST
9102:
* Wed 03 Dec 2014 01:06:50 AM JST
9103:
* Wed 03 Dec 2014 01:06:51 AM JST
9667:
* Wed 03 Dec 2014 01:06:51 AM JST
10050:
* Wed 03 Dec 2014 01:06:51 AM JST
10051:
* Wed 03 Dec 2014 01:06:51 AM JST
10080:
* Wed 03 Dec 2014 01:06:51 AM JST
11371:
* Wed 03 Dec 2014 01:06:52 AM JST
13720:
* Wed 03 Dec 2014 01:06:52 AM JST
13721:
* Wed 03 Dec 2014 01:06:52 AM JST
13722:
* Wed 03 Dec 2014 01:06:52 AM JST
13724:
* Wed 03 Dec 2014 01:06:52 AM JST
13782:
* Wed 03 Dec 2014 01:06:52 AM JST
13783:
* Wed 03 Dec 2014 01:06:52 AM JST
22273:
* Wed 03 Dec 2014 01:06:52 AM JST
750:
* Wed 03 Dec 2014 01:06:53 AM JST
751:
* Wed 03 Dec 2014 01:06:53 AM JST
752:
* Wed 03 Dec 2014 01:06:53 AM JST
2102:
* Wed 03 Dec 2014 01:06:53 AM JST
2103:
* Wed 03 Dec 2014 01:06:53 AM JST
2104:
* Wed 03 Dec 2014 01:06:53 AM JST
106:
* Wed 03 Dec 2014 01:06:54 AM JST
779:
* Wed 03 Dec 2014 01:06:54 AM JST
808:
* Wed 03 Dec 2014 01:06:54 AM JST
1001:
* Wed 03 Dec 2014 01:06:54 AM JST
1210:
* Wed 03 Dec 2014 01:06:54 AM JST
2150:
* Wed 03 Dec 2014 01:06:54 AM JST
2988:
* Wed 03 Dec 2014 01:06:54 AM JST
2989:
* Wed 03 Dec 2014 01:06:54 AM JST
5354:
* Wed 03 Dec 2014 01:06:55 AM JST
5355:
* Wed 03 Dec 2014 01:06:55 AM JST
5555:
* Wed 03 Dec 2014 01:06:55 AM JST
8088:
* Wed 03 Dec 2014 01:06:55 AM JST
9359:
* Wed 03 Dec 2014 01:06:55 AM JST
10081:
* Wed 03 Dec 2014 01:06:55 AM JST
11201:
* Wed 03 Dec 2014 01:06:55 AM JST
15345:
* Wed 03 Dec 2014 01:06:55 AM JST
17001:
* Wed 03 Dec 2014 01:06:55 AM JST
17002:
* Wed 03 Dec 2014 01:06:56 AM JST
17003:
* Wed 03 Dec 2014 01:06:56 AM JST
20011:
* Wed 03 Dec 2014 01:06:56 AM JST
20012:
* Wed 03 Dec 2014 01:06:56 AM JST
27374:
* Wed 03 Dec 2014 01:06:56 AM JST
asp",                      
* Wed 03 Dec 2014 01:06:56 AM JST
27374: "
* Wed 03 Dec 2014 01:06:56 AM JST
asp",                       
* Wed 03 Dec 2014 01:06:57 AM JST
27374: " 
* Wed 03 Dec 2014 01:06:57 AM JST
asp",                        
* Wed 03 Dec 2014 01:06:57 AM JST
27374: "  
* Wed 03 Dec 2014 01:06:57 AM JST
asp",                         
* Wed 03 Dec 2014 01:06:57 AM JST
27374: "   
* Wed 03 Dec 2014 01:06:57 AM JST
asp",                          
* Wed 03 Dec 2014 01:06:57 AM JST
27374: "    
* Wed 03 Dec 2014 01:06:58 AM JST
asp",                           
* Wed 03 Dec 2014 01:06:58 AM JST
27374: "     
* Wed 03 Dec 2014 01:06:58 AM JST
asp",                            
* Wed 03 Dec 2014 01:06:58 AM JST
27374: "      
* Wed 03 Dec 2014 01:06:58 AM JST
asp",                             
* Wed 03 Dec 2014 01:06:58 AM JST
27374: "       
* Wed 03 Dec 2014 01:06:58 AM JST
asp",                              
* Wed 03 Dec 2014 01:06:58 AM JST
27374: "        
* Wed 03 Dec 2014 01:06:58 AM JST
asp",                               
* Wed 03 Dec 2014 01:06:59 AM JST
27374: "         
* Wed 03 Dec 2014 01:06:59 AM JST
asp",                                
* Wed 03 Dec 2014 01:06:59 AM JST
27374: "          
* Wed 03 Dec 2014 01:06:59 AM JST
asp",                                 
* Wed 03 Dec 2014 01:06:59 AM JST
27374: "           
* Wed 03 Dec 2014 01:06:59 AM JST
asp",                                  
* Wed 03 Dec 2014 01:06:59 AM JST
27374: "            
* Wed 03 Dec 2014 01:06:59 AM JST
asp",                                   
* Wed 03 Dec 2014 01:06:59 AM JST
27374: "             
* Wed 03 Dec 2014 01:07:00 AM JST
asp",                                    
* Wed 03 Dec 2014 01:07:00 AM JST
27374: "              
* Wed 03 Dec 2014 01:07:00 AM JST
asp",                                     
* Wed 03 Dec 2014 01:07:00 AM JST
27374: "               
* Wed 03 Dec 2014 01:07:00 AM JST
asp",                                      
* Wed 03 Dec 2014 01:07:00 AM JST
27374: "                
* Wed 03 Dec 2014 01:07:00 AM JST
asp",                                       
* Wed 03 Dec 2014 01:07:00 AM JST
27374: "                 
* Wed 03 Dec 2014 01:07:00 AM JST
asp",                                        
* Wed 03 Dec 2014 01:07:01 AM JST
27374: "                  
* Wed 03 Dec 2014 01:07:01 AM JST
asp",                                         
* Wed 03 Dec 2014 01:07:01 AM JST
27374: "                   
* Wed 03 Dec 2014 01:07:01 AM JST
asp",                                          
* Wed 03 Dec 2014 01:07:01 AM JST
27374: "                    
* Wed 03 Dec 2014 01:07:01 AM JST
asp",                                           
* Wed 03 Dec 2014 01:07:02 AM JST
27374: "                     
* Wed 03 Dec 2014 01:07:02 AM JST
asp",                                            
* Wed 03 Dec 2014 01:07:02 AM JST
27374: "                      
* Wed 03 Dec 2014 01:07:02 AM JST
asp",                                             
* Wed 03 Dec 2014 01:07:02 AM JST
27374: "                       
* Wed 03 Dec 2014 01:07:02 AM JST
asp",                                              
* Wed 03 Dec 2014 01:07:02 AM JST
27374: "                        
* Wed 03 Dec 2014 01:07:02 AM JST
asp",                                               
* Wed 03 Dec 2014 01:07:03 AM JST
27374: "                         
* Wed 03 Dec 2014 01:07:03 AM JST
asp",                                                
* Wed 03 Dec 2014 01:07:03 AM JST
27374: "                          
* Wed 03 Dec 2014 01:07:03 AM JST
asp",                                                 
* Wed 03 Dec 2014 01:07:03 AM JST
27374: "                           
* Wed 03 Dec 2014 01:07:03 AM JST
asp",                                                  
* Wed 03 Dec 2014 01:07:03 AM JST
27374: "                            
* Wed 03 Dec 2014 01:07:03 AM JST
asp",                                                   
* Wed 03 Dec 2014 01:07:04 AM JST
27374: "                             
* Wed 03 Dec 2014 01:07:04 AM JST
asp",                                                    
* Wed 03 Dec 2014 01:07:04 AM JST
27374: "                              
* Wed 03 Dec 2014 01:07:04 AM JST
asp",                                                     
* Wed 03 Dec 2014 01:07:04 AM JST
27374: "                               
* Wed 03 Dec 2014 01:07:04 AM JST
asp",                                                      
* Wed 03 Dec 2014 01:07:04 AM JST
27374: "                                
* Wed 03 Dec 2014 01:07:05 AM JST
asp",                                                       
* Wed 03 Dec 2014 01:07:05 AM JST
27374: "                                 
* Wed 03 Dec 2014 01:07:05 AM JST
asp",
* Wed 03 Dec 2014 01:07:05 AM JST
asp", 
* Wed 03 Dec 2014 01:07:05 AM JST
asp",  
* Wed 03 Dec 2014 01:07:05 AM JST
asp",   
* Wed 03 Dec 2014 01:07:05 AM JST
asp",    
* Wed 03 Dec 2014 01:07:05 AM JST
asp",     
* Wed 03 Dec 2014 01:07:06 AM JST
asp",      
* Wed 03 Dec 2014 01:07:06 AM JST
asp",       
* Wed 03 Dec 2014 01:07:06 AM JST
asp",        
* Wed 03 Dec 2014 01:07:06 AM JST
asp",         
* Wed 03 Dec 2014 01:07:06 AM JST
asp",          
* Wed 03 Dec 2014 01:07:06 AM JST
asp",           
* Wed 03 Dec 2014 01:07:06 AM JST
asp",            
* Wed 03 Dec 2014 01:07:07 AM JST
asp",             
* Wed 03 Dec 2014 01:07:07 AM JST
asp",              
* Wed 03 Dec 2014 01:07:07 AM JST
asp",               
* Wed 03 Dec 2014 01:07:07 AM JST
asp",                
* Wed 03 Dec 2014 01:07:07 AM JST
asp",                 
* Wed 03 Dec 2014 01:07:07 AM JST
asp",                  
* Wed 03 Dec 2014 01:07:08 AM JST
asp",                   
* Wed 03 Dec 2014 01:07:08 AM JST
asp",                    
* Wed 03 Dec 2014 01:07:08 AM JST
asp",                     
* Wed 03 Dec 2014 01:07:08 AM JST
asp",                      
* Wed 03 Dec 2014 01:07:08 AM JST
asp",                       
* Wed 03 Dec 2014 01:07:08 AM JST
asp",                        
* Wed 03 Dec 2014 01:07:08 AM JST
asp",                         
* Wed 03 Dec 2014 01:07:08 AM JST
asp",                          
* Wed 03 Dec 2014 01:07:09 AM JST
asp",                           
* Wed 03 Dec 2014 01:07:09 AM JST
asp",                            
* Wed 03 Dec 2014 01:07:09 AM JST
asp",                             
* Wed 03 Dec 2014 01:07:09 AM JST
asp",                              
* Wed 03 Dec 2014 01:07:09 AM JST
asp",                               
* Wed 03 Dec 2014 01:07:09 AM JST
asp",                                
* Wed 03 Dec 2014 01:07:09 AM JST
asp",                                 
* Wed 03 Dec 2014 01:07:09 AM JST
asp",                                  
* Wed 03 Dec 2014 01:07:10 AM JST
asp",                                   
* Wed 03 Dec 2014 01:07:10 AM JST
asp",                                    
* Wed 03 Dec 2014 01:07:10 AM JST
asp",                                     
* Wed 03 Dec 2014 01:07:10 AM JST
asp",                                      
* Wed 03 Dec 2014 01:07:10 AM JST
asp",                                       
* Wed 03 Dec 2014 01:07:10 AM JST
asp",                                        
* Wed 03 Dec 2014 01:07:10 AM JST
asp",                                         
* Wed 03 Dec 2014 01:07:11 AM JST
asp",                                          
* Wed 03 Dec 2014 01:07:11 AM JST
asp",                                           
* Wed 03 Dec 2014 01:07:11 AM JST
asp",                                            
* Wed 03 Dec 2014 01:07:11 AM JST
asp",                                             
* Wed 03 Dec 2014 01:07:11 AM JST
asp",                                              
* Wed 03 Dec 2014 01:07:11 AM JST
asp",                                               
* Wed 03 Dec 2014 01:07:11 AM JST
asp",                                                
* Wed 03 Dec 2014 01:07:12 AM JST
asp",                                                 
* Wed 03 Dec 2014 01:07:12 AM JST
asp",                                                  
* Wed 03 Dec 2014 01:07:12 AM JST
asp",                                                   
* Wed 03 Dec 2014 01:07:12 AM JST
asp",                                                    
* Wed 03 Dec 2014 01:07:12 AM JST
asp",                                                     
* Wed 03 Dec 2014 01:07:13 AM JST
asp",                                                      
* Wed 03 Dec 2014 01:07:13 AM JST
asp",                                                       
* Wed 03 Dec 2014 01:07:13 AM JST
asp",                                                        
* Wed 03 Dec 2014 01:07:13 AM JST
asp",                                                         
* Wed 03 Dec 2014 01:07:13 AM JST
asp",                                                          
* Wed 03 Dec 2014 01:07:13 AM JST
asp",                                                           
* Wed 03 Dec 2014 01:07:13 AM JST
asp",                                                            
* Wed 03 Dec 2014 01:07:14 AM JST
asp",                                                             
* Wed 03 Dec 2014 01:07:14 AM JST
asp",                                                              
* Wed 03 Dec 2014 01:07:14 AM JST
asp",                                                               
* Wed 03 Dec 2014 01:07:14 AM JST
asp",                                                                
* Wed 03 Dec 2014 01:07:14 AM JST
asp",                                                                 
* Wed 03 Dec 2014 01:07:14 AM JST
asp",                                                                  
* Wed 03 Dec 2014 01:07:14 AM JST
asp",                                                                   
* Wed 03 Dec 2014 01:07:15 AM JST
asp",                                                                    
* Wed 03 Dec 2014 01:07:15 AM JST
asp",                                                                     
* Wed 03 Dec 2014 01:07:15 AM JST
asp",                                                                      
* Wed 03 Dec 2014 01:07:15 AM JST
asp",                                                                       
* Wed 03 Dec 2014 01:07:15 AM JST
asp",                                                                        
* Wed 03 Dec 2014 01:07:15 AM JST
asp",                                                                         
* Wed 03 Dec 2014 01:07:15 AM JST
asp",                                                                          
* Wed 03 Dec 2014 01:07:16 AM JST
asp",                                                                           
* Wed 03 Dec 2014 01:07:16 AM JST
asp",                                                                            
* Wed 03 Dec 2014 01:07:16 AM JST
asp",                                                                             
* Wed 03 Dec 2014 01:07:16 AM JST
asp",                                                                              
* Wed 03 Dec 2014 01:07:16 AM JST
asp",                                                                               
* Wed 03 Dec 2014 01:07:16 AM JST
asp",                                                                                
* Wed 03 Dec 2014 01:07:16 AM JST
asp",                                                                                 
* Wed 03 Dec 2014 01:07:17 AM JST
asp",                                                                                  
* Wed 03 Dec 2014 01:07:17 AM JST
asp",                                                                                   
* Wed 03 Dec 2014 01:07:17 AM JST
asp",                                                                                    
* Wed 03 Dec 2014 01:07:17 AM JST
asp",                                                                                     
* Wed 03 Dec 2014 01:07:17 AM JST
asp",                                                                                      
* Wed 03 Dec 2014 01:07:18 AM JST
asp",                                                                                       
* Wed 03 Dec 2014 01:07:18 AM JST
asp",                                                                                        
* Wed 03 Dec 2014 01:07:18 AM JST
asp",                                                                                         
* Wed 03 Dec 2014 01:07:18 AM JST
asp",                                                                                          
* Wed 03 Dec 2014 01:07:19 AM JST
asp",                                                                                           
* Wed 03 Dec 2014 01:07:19 AM JST
asp",                                                                                            
* Wed 03 Dec 2014 01:07:19 AM JST
asp",                                                                                             
* Wed 03 Dec 2014 01:07:19 AM JST
asp",                                                                                              
* Wed 03 Dec 2014 01:07:19 AM JST
master",          
* Wed 03 Dec 2014 01:07:19 AM JST
server",            
* Wed 03 Dec 2014 01:07:19 AM JST
srv",               
* Wed 03 Dec 2014 01:07:19 AM JST
clt",               
* Wed 03 Dec 2014 01:07:20 AM JST
hm",                
* Wed 03 Dec 2014 01:07:20 AM JST
poppassd",                 
* Wed 03 Dec 2014 01:07:20 AM JST
ureg",               
* Wed 03 Dec 2014 01:07:20 AM JST
omirr",                    
* Wed 03 Dec 2014 01:07:20 AM JST
customs",                  
* Wed 03 Dec 2014 01:07:20 AM JST
predict",                  
* Wed 03 Dec 2014 01:07:20 AM JST
ninstall",                 
* Wed 03 Dec 2014 01:07:21 AM JST
afbackup",                 
* Wed 03 Dec 2014 01:07:21 AM JST
afmbackup",                
* Wed 03 Dec 2014 01:07:21 AM JST
noclog",                   
* Wed 03 Dec 2014 01:07:21 AM JST
hostmon",                  
* Wed 03 Dec 2014 01:07:21 AM JST
rplay",                    
* Wed 03 Dec 2014 01:07:21 AM JST
omniorb",                  
* Wed 03 Dec 2014 01:07:21 AM JST
mandelspawn",              
* Wed 03 Dec 2014 01:07:21 AM JST
kamanda",                  
* Wed 03 Dec 2014 01:07:22 AM JST
smsqp",                    
* Wed 03 Dec 2014 01:07:22 AM JST
xpilot",                   
* Wed 03 Dec 2014 01:07:22 AM JST
cmsd",                 
* Wed 03 Dec 2014 01:07:22 AM JST
crsd",                 
* Wed 03 Dec 2014 01:07:22 AM JST
gcd",                  
* Wed 03 Dec 2014 01:07:22 AM JST
isdnlog",                  
* Wed 03 Dec 2014 01:07:22 AM JST
vboxd",                    
* Wed 03 Dec 2014 01:07:22 AM JST
20012: "
* Wed 03 Dec 2014 01:07:23 AM JST
vboxd",                     
* Wed 03 Dec 2014 01:07:23 AM JST
20012: " 
* Wed 03 Dec 2014 01:07:23 AM JST
vboxd",                      
* Wed 03 Dec 2014 01:07:24 AM JST
20012: "  
* Wed 03 Dec 2014 01:07:24 AM JST
vboxd",                       
* Wed 03 Dec 2014 01:07:24 AM JST
20012: "   
* Wed 03 Dec 2014 01:07:24 AM JST
vboxd",                        
* Wed 03 Dec 2014 01:07:24 AM JST
20012: "    
* Wed 03 Dec 2014 01:07:24 AM JST
vboxd",                         
* Wed 03 Dec 2014 01:07:24 AM JST
20012: "     
* Wed 03 Dec 2014 01:07:25 AM JST
vboxd",                          
* Wed 03 Dec 2014 01:07:25 AM JST
20012: "      
* Wed 03 Dec 2014 01:07:25 AM JST
vboxd",                           
* Wed 03 Dec 2014 01:07:25 AM JST
20012: "       
* Wed 03 Dec 2014 01:07:25 AM JST
vboxd",                            
* Wed 03 Dec 2014 01:07:25 AM JST
20012: "        
* Wed 03 Dec 2014 01:07:25 AM JST
vboxd",                             
* Wed 03 Dec 2014 01:07:26 AM JST
20012: "         
* Wed 03 Dec 2014 01:07:26 AM JST
vboxd",                              
* Wed 03 Dec 2014 01:07:26 AM JST
20012: "          
* Wed 03 Dec 2014 01:07:26 AM JST
vboxd",                               
* Wed 03 Dec 2014 01:07:26 AM JST
20012: "           
* Wed 03 Dec 2014 01:07:26 AM JST
vboxd",                                
* Wed 03 Dec 2014 01:07:27 AM JST
20012: "            
* Wed 03 Dec 2014 01:07:27 AM JST
vboxd",                                 
* Wed 03 Dec 2014 01:07:27 AM JST
20012: "             
* Wed 03 Dec 2014 01:07:27 AM JST
vboxd",                                  
* Wed 03 Dec 2014 01:07:27 AM JST
20012: "              
* Wed 03 Dec 2014 01:07:27 AM JST
vboxd",                                   
* Wed 03 Dec 2014 01:07:27 AM JST
20012: "               
* Wed 03 Dec 2014 01:07:28 AM JST
vboxd",                                    
* Wed 03 Dec 2014 01:07:28 AM JST
20012: "                
* Wed 03 Dec 2014 01:07:28 AM JST
vboxd",                                     
* Wed 03 Dec 2014 01:07:28 AM JST
20012: "                 
* Wed 03 Dec 2014 01:07:28 AM JST
vboxd",                                      
* Wed 03 Dec 2014 01:07:28 AM JST
20012: "                  
* Wed 03 Dec 2014 01:07:28 AM JST
vboxd",                                       
* Wed 03 Dec 2014 01:07:29 AM JST
20012: "                   
* Wed 03 Dec 2014 01:07:29 AM JST
vboxd",                                        
* Wed 03 Dec 2014 01:07:29 AM JST
20012: "                    
* Wed 03 Dec 2014 01:07:29 AM JST
vboxd",                                         
* Wed 03 Dec 2014 01:07:30 AM JST
20012: "                     
* Wed 03 Dec 2014 01:07:30 AM JST
vboxd",                                          
* Wed 03 Dec 2014 01:07:30 AM JST
20012: "                      
* Wed 03 Dec 2014 01:07:30 AM JST
vboxd",                                           
* Wed 03 Dec 2014 01:07:30 AM JST
20012: "                       
* Wed 03 Dec 2014 01:07:30 AM JST
vboxd",                                            
* Wed 03 Dec 2014 01:07:31 AM JST
20012: "                        
* Wed 03 Dec 2014 01:07:31 AM JST
vboxd",                                             
* Wed 03 Dec 2014 01:07:31 AM JST
20012: "                         
* Wed 03 Dec 2014 01:07:31 AM JST
vboxd",                                              
* Wed 03 Dec 2014 01:07:31 AM JST
20012: "                          
* Wed 03 Dec 2014 01:07:31 AM JST
vboxd",                                               
* Wed 03 Dec 2014 01:07:31 AM JST
20012: "                           
* Wed 03 Dec 2014 01:07:32 AM JST
vboxd",                                                
* Wed 03 Dec 2014 01:07:32 AM JST
20012: "                            
* Wed 03 Dec 2014 01:07:32 AM JST
vboxd",                                                 
* Wed 03 Dec 2014 01:07:32 AM JST
20012: "                             
* Wed 03 Dec 2014 01:07:32 AM JST
vboxd",                                                  
* Wed 03 Dec 2014 01:07:32 AM JST
20012: "                              
* Wed 03 Dec 2014 01:07:32 AM JST
vboxd",                                                   
* Wed 03 Dec 2014 01:07:33 AM JST
20012: "                               
* Wed 03 Dec 2014 01:07:33 AM JST
vboxd",                                                    
* Wed 03 Dec 2014 01:07:33 AM JST
20012: "                                
* Wed 03 Dec 2014 01:07:33 AM JST
vboxd",                                                     
* Wed 03 Dec 2014 01:07:33 AM JST
20012: "                                 
* Wed 03 Dec 2014 01:07:33 AM JST
kerberos4",                
* Wed 03 Dec 2014 01:07:34 AM JST
kerberos-
* Wed 03 Dec 2014 01:07:34 AM JST
passwd-
* Wed 03 Dec 2014 01:07:34 AM JST
zephyr-
* Wed 03 Dec 2014 01:07:34 AM JST
zephyr-
* Wed 03 Dec 2014 01:07:34 AM JST
zephyr-
* Wed 03 Dec 2014 01:07:34 AM JST
106: "
* Wed 03 Dec 2014 01:07:35 AM JST
moira-
* Wed 03 Dec 2014 01:07:35 AM JST
808: "
* Wed 03 Dec 2014 01:07:35 AM JST
1001: "
* Wed 03 Dec 2014 01:07:35 AM JST
1210: "
* Wed 03 Dec 2014 01:07:35 AM JST
2150: "
* Wed 03 Dec 2014 01:07:35 AM JST
2988: "
* Wed 03 Dec 2014 01:07:35 AM JST
2989: "
* Wed 03 Dec 2014 01:07:36 AM JST
5354: "
* Wed 03 Dec 2014 01:07:36 AM JST
5355: "
* Wed 03 Dec 2014 01:07:36 AM JST
5555: "
* Wed 03 Dec 2014 01:07:36 AM JST
8088: "
* Wed 03 Dec 2014 01:07:36 AM JST
9359: "
* Wed 03 Dec 2014 01:07:36 AM JST
10081: "
* Wed 03 Dec 2014 01:07:36 AM JST
11201: "
* Wed 03 Dec 2014 01:07:36 AM JST
15345: "
* Wed 03 Dec 2014 01:07:36 AM JST
sgi-
* Wed 03 Dec 2014 01:07:37 AM JST
sgi-
* Wed 03 Dec 2014 01:07:37 AM JST
sgi-
* Wed 03 Dec 2014 01:07:37 AM JST
20011: "
* Wed 03 Dec 2014 01:07:37 AM JST
vboxd",
* Wed 03 Dec 2014 01:07:37 AM JST
vboxd", 
* Wed 03 Dec 2014 01:07:37 AM JST
vboxd",  
* Wed 03 Dec 2014 01:07:37 AM JST
vboxd",   
* Wed 03 Dec 2014 01:07:38 AM JST
vboxd",    
* Wed 03 Dec 2014 01:07:38 AM JST
vboxd",     
* Wed 03 Dec 2014 01:07:38 AM JST
vboxd",      
* Wed 03 Dec 2014 01:07:38 AM JST
vboxd",       
* Wed 03 Dec 2014 01:07:38 AM JST
vboxd",        
* Wed 03 Dec 2014 01:07:39 AM JST
vboxd",         
* Wed 03 Dec 2014 01:07:39 AM JST
vboxd",          
* Wed 03 Dec 2014 01:07:39 AM JST
vboxd",           
* Wed 03 Dec 2014 01:07:39 AM JST
vboxd",            
* Wed 03 Dec 2014 01:07:39 AM JST
vboxd",             
* Wed 03 Dec 2014 01:07:39 AM JST
vboxd",              
* Wed 03 Dec 2014 01:07:39 AM JST
vboxd",               
* Wed 03 Dec 2014 01:07:40 AM JST
vboxd",                
* Wed 03 Dec 2014 01:07:40 AM JST
vboxd",                 
* Wed 03 Dec 2014 01:07:40 AM JST
vboxd",                  
* Wed 03 Dec 2014 01:07:40 AM JST
vboxd",                   
* Wed 03 Dec 2014 01:07:41 AM JST
vboxd",                    
* Wed 03 Dec 2014 01:07:41 AM JST
vboxd",                     
* Wed 03 Dec 2014 01:07:41 AM JST
vboxd",                      
* Wed 03 Dec 2014 01:07:41 AM JST
vboxd",                       
* Wed 03 Dec 2014 01:07:41 AM JST
vboxd",                        
* Wed 03 Dec 2014 01:07:41 AM JST
vboxd",                         
* Wed 03 Dec 2014 01:07:41 AM JST
vboxd",                          
* Wed 03 Dec 2014 01:07:42 AM JST
vboxd",                           
* Wed 03 Dec 2014 01:07:42 AM JST
vboxd",                            
* Wed 03 Dec 2014 01:07:42 AM JST
vboxd",                             
* Wed 03 Dec 2014 01:07:42 AM JST
vboxd",                              
* Wed 03 Dec 2014 01:07:42 AM JST
vboxd",                               
* Wed 03 Dec 2014 01:07:42 AM JST
vboxd",                                
* Wed 03 Dec 2014 01:07:42 AM JST
vboxd",                                 
* Wed 03 Dec 2014 01:07:43 AM JST
vboxd",                                  
* Wed 03 Dec 2014 01:07:43 AM JST
vboxd",                                   
* Wed 03 Dec 2014 01:07:43 AM JST
vboxd",                                    
* Wed 03 Dec 2014 01:07:43 AM JST
vboxd",                                     
* Wed 03 Dec 2014 01:07:43 AM JST
vboxd",                                      
* Wed 03 Dec 2014 01:07:44 AM JST
vboxd",                                       
* Wed 03 Dec 2014 01:07:44 AM JST
vboxd",                                        
* Wed 03 Dec 2014 01:07:44 AM JST
vboxd",                                         
* Wed 03 Dec 2014 01:07:44 AM JST
vboxd",                                          
* Wed 03 Dec 2014 01:07:44 AM JST
vboxd",                                           
* Wed 03 Dec 2014 01:07:44 AM JST
vboxd",                                            
* Wed 03 Dec 2014 01:07:44 AM JST
vboxd",                                             
* Wed 03 Dec 2014 01:07:45 AM JST
vboxd",                                              
* Wed 03 Dec 2014 01:07:45 AM JST
vboxd",                                               
* Wed 03 Dec 2014 01:07:45 AM JST
vboxd",                                                
* Wed 03 Dec 2014 01:07:45 AM JST
vboxd",                                                 
* Wed 03 Dec 2014 01:07:45 AM JST
vboxd",                                                  
* Wed 03 Dec 2014 01:07:45 AM JST
vboxd",                                                   
* Wed 03 Dec 2014 01:07:45 AM JST
vboxd",                                                    
* Wed 03 Dec 2014 01:07:46 AM JST
vboxd",                                                     
* Wed 03 Dec 2014 01:07:46 AM JST
vboxd",                                                      
* Wed 03 Dec 2014 01:07:46 AM JST
vboxd",                                                       
* Wed 03 Dec 2014 01:07:46 AM JST
vboxd",                                                        
* Wed 03 Dec 2014 01:07:47 AM JST
vboxd",                                                         
* Wed 03 Dec 2014 01:07:47 AM JST
vboxd",                                                          
* Wed 03 Dec 2014 01:07:47 AM JST
vboxd",                                                           
* Wed 03 Dec 2014 01:07:47 AM JST
vboxd",                                                            
* Wed 03 Dec 2014 01:07:47 AM JST
vboxd",                                                             
* Wed 03 Dec 2014 01:07:47 AM JST
vboxd",                                                              
* Wed 03 Dec 2014 01:07:47 AM JST
vboxd",                                                               
* Wed 03 Dec 2014 01:07:48 AM JST
vboxd",                                                                
* Wed 03 Dec 2014 01:07:48 AM JST
vboxd",                                                                 
* Wed 03 Dec 2014 01:07:48 AM JST
vboxd",                                                                  
* Wed 03 Dec 2014 01:07:48 AM JST
vboxd",                                                                   
* Wed 03 Dec 2014 01:07:48 AM JST
vboxd",                                                                    
* Wed 03 Dec 2014 01:07:48 AM JST
vboxd",                                                                     
* Wed 03 Dec 2014 01:07:48 AM JST
vboxd",                                                                      
* Wed 03 Dec 2014 01:07:49 AM JST
vboxd",                                                                       
* Wed 03 Dec 2014 01:07:49 AM JST
vboxd",                                                                        
* Wed 03 Dec 2014 01:07:49 AM JST
vboxd",                                                                         
* Wed 03 Dec 2014 01:07:49 AM JST
vboxd",                                                                          
* Wed 03 Dec 2014 01:07:49 AM JST
vboxd",                                                                           
* Wed 03 Dec 2014 01:07:49 AM JST
vboxd",                                                                            
* Wed 03 Dec 2014 01:07:49 AM JST
vboxd",                                                                             
* Wed 03 Dec 2014 01:07:50 AM JST
vboxd",                                                                              
* Wed 03 Dec 2014 01:07:50 AM JST
vboxd",                                                                               
* Wed 03 Dec 2014 01:07:50 AM JST
vboxd",                                                                                
* Wed 03 Dec 2014 01:07:50 AM JST
vboxd",                                                                                 
* Wed 03 Dec 2014 01:07:50 AM JST
vboxd",                                                                                  
* Wed 03 Dec 2014 01:07:50 AM JST
vboxd",                                                                                   
* Wed 03 Dec 2014 01:07:50 AM JST
vboxd",                                                                                    
* Wed 03 Dec 2014 01:07:51 AM JST
vboxd",                                                                                     
* Wed 03 Dec 2014 01:07:51 AM JST
vboxd",                                                                                      
* Wed 03 Dec 2014 01:07:51 AM JST
vboxd",                                                                                       
* Wed 03 Dec 2014 01:07:51 AM JST
vboxd",                                                                                        
* Wed 03 Dec 2014 01:07:51 AM JST
vboxd",                                                                                         
* Wed 03 Dec 2014 01:07:51 AM JST
vboxd",                                                                                          
* Wed 03 Dec 2014 01:07:52 AM JST
vboxd",                                                                                           
* Wed 03 Dec 2014 01:07:52 AM JST
vboxd",                                                                                            
* Wed 03 Dec 2014 01:07:52 AM JST
750: "
* Wed 03 Dec 2014 01:07:52 AM JST
751: "
* Wed 03 Dec 2014 01:07:52 AM JST
752: "
* Wed 03 Dec 2014 01:07:53 AM JST
2102: "
* Wed 03 Dec 2014 01:07:53 AM JST
2103: "
* Wed 03 Dec 2014 01:07:53 AM JST
2104: "
* Wed 03 Dec 2014 01:07:53 AM JST
poppassd",                  
* Wed 03 Dec 2014 01:07:53 AM JST
779: "
* Wed 03 Dec 2014 01:07:53 AM JST
omirr",                     
* Wed 03 Dec 2014 01:07:53 AM JST
customs",                   
* Wed 03 Dec 2014 01:07:53 AM JST
predict",                   
* Wed 03 Dec 2014 01:07:54 AM JST
ninstall",                  
* Wed 03 Dec 2014 01:07:54 AM JST
afbackup",                  
* Wed 03 Dec 2014 01:07:54 AM JST
afmbackup",                 
* Wed 03 Dec 2014 01:07:54 AM JST
noclog",                    
* Wed 03 Dec 2014 01:07:54 AM JST
hostmon",                   
* Wed 03 Dec 2014 01:07:54 AM JST
rplay",                     
* Wed 03 Dec 2014 01:07:54 AM JST
omniorb",                   
* Wed 03 Dec 2014 01:07:54 AM JST
mandelspawn",               
* Wed 03 Dec 2014 01:07:55 AM JST
kamanda",                   
* Wed 03 Dec 2014 01:07:55 AM JST
smsqp",                     
* Wed 03 Dec 2014 01:07:55 AM JST
xpilot",                    
* Wed 03 Dec 2014 01:07:55 AM JST
17001: "
* Wed 03 Dec 2014 01:07:55 AM JST
17002: "
* Wed 03 Dec 2014 01:07:55 AM JST
17003: "
* Wed 03 Dec 2014 01:07:55 AM JST
isdnlog",                   
* Wed 03 Dec 2014 01:07:56 AM JST
20011: " 
* Wed 03 Dec 2014 01:07:56 AM JST
isdnlog",                    
* Wed 03 Dec 2014 01:07:56 AM JST
20011: "  
* Wed 03 Dec 2014 01:07:56 AM JST
isdnlog",                     
* Wed 03 Dec 2014 01:07:56 AM JST
20011: "   
* Wed 03 Dec 2014 01:07:57 AM JST
isdnlog",                      
* Wed 03 Dec 2014 01:07:57 AM JST
20011: "    
* Wed 03 Dec 2014 01:07:57 AM JST
isdnlog",                       
* Wed 03 Dec 2014 01:07:57 AM JST
20011: "     
* Wed 03 Dec 2014 01:07:58 AM JST
isdnlog",                        
* Wed 03 Dec 2014 01:07:58 AM JST
20011: "      
* Wed 03 Dec 2014 01:07:58 AM JST
isdnlog",                         
* Wed 03 Dec 2014 01:07:58 AM JST
20011: "       
* Wed 03 Dec 2014 01:07:58 AM JST
isdnlog",                          
* Wed 03 Dec 2014 01:07:58 AM JST
20011: "        
* Wed 03 Dec 2014 01:07:58 AM JST
isdnlog",                           
* Wed 03 Dec 2014 01:07:59 AM JST
20011: "         
* Wed 03 Dec 2014 01:07:59 AM JST
isdnlog",                            
* Wed 03 Dec 2014 01:07:59 AM JST
20011: "          
* Wed 03 Dec 2014 01:07:59 AM JST
isdnlog",                             
* Wed 03 Dec 2014 01:07:59 AM JST
20011: "           
* Wed 03 Dec 2014 01:07:59 AM JST
isdnlog",                              
* Wed 03 Dec 2014 01:07:59 AM JST
20011: "            
* Wed 03 Dec 2014 01:08:00 AM JST
isdnlog",                               
* Wed 03 Dec 2014 01:08:00 AM JST
20011: "             
* Wed 03 Dec 2014 01:08:00 AM JST
isdnlog",                                
* Wed 03 Dec 2014 01:08:00 AM JST
20011: "              
* Wed 03 Dec 2014 01:08:00 AM JST
isdnlog",                                 
* Wed 03 Dec 2014 01:08:00 AM JST
20011: "               
* Wed 03 Dec 2014 01:08:00 AM JST
isdnlog",                                  
* Wed 03 Dec 2014 01:08:01 AM JST
20011: "                
* Wed 03 Dec 2014 01:08:01 AM JST
isdnlog",                                   
* Wed 03 Dec 2014 01:08:01 AM JST
20011: "                 
* Wed 03 Dec 2014 01:08:01 AM JST
isdnlog",                                    
* Wed 03 Dec 2014 01:08:01 AM JST
20011: "                  
* Wed 03 Dec 2014 01:08:01 AM JST
isdnlog",                                     
* Wed 03 Dec 2014 01:08:01 AM JST
20011: "                   
* Wed 03 Dec 2014 01:08:02 AM JST
isdnlog",                                      
* Wed 03 Dec 2014 01:08:02 AM JST
20011: "                    
* Wed 03 Dec 2014 01:08:02 AM JST
isdnlog",                                       
* Wed 03 Dec 2014 01:08:02 AM JST
20011: "                     
* Wed 03 Dec 2014 01:08:03 AM JST
isdnlog",                                        
* Wed 03 Dec 2014 01:08:03 AM JST
20011: "                      
* Wed 03 Dec 2014 01:08:03 AM JST
isdnlog",                                         
* Wed 03 Dec 2014 01:08:03 AM JST
20011: "                       
* Wed 03 Dec 2014 01:08:03 AM JST
isdnlog",                                          
* Wed 03 Dec 2014 01:08:04 AM JST
20011: "                        
* Wed 03 Dec 2014 01:08:04 AM JST
isdnlog",                                           
* Wed 03 Dec 2014 01:08:04 AM JST
20011: "                         
* Wed 03 Dec 2014 01:08:04 AM JST
isdnlog",                                            
* Wed 03 Dec 2014 01:08:04 AM JST
20011: "                          
* Wed 03 Dec 2014 01:08:04 AM JST
isdnlog",                                             
* Wed 03 Dec 2014 01:08:04 AM JST
20011: "                           
* Wed 03 Dec 2014 01:08:04 AM JST
isdnlog",                                              
* Wed 03 Dec 2014 01:08:05 AM JST
20011: "                            
* Wed 03 Dec 2014 01:08:05 AM JST
isdnlog",                                               
* Wed 03 Dec 2014 01:08:05 AM JST
20011: "                             
* Wed 03 Dec 2014 01:08:05 AM JST
isdnlog",                                                
* Wed 03 Dec 2014 01:08:05 AM JST
20011: "                              
* Wed 03 Dec 2014 01:08:05 AM JST
isdnlog",                                                 
* Wed 03 Dec 2014 01:08:06 AM JST
20011: "                               
* Wed 03 Dec 2014 01:08:06 AM JST
isdnlog",                                                  
* Wed 03 Dec 2014 01:08:06 AM JST
20011: "                                
* Wed 03 Dec 2014 01:08:06 AM JST
isdnlog",                                                   
* Wed 03 Dec 2014 01:08:06 AM JST
20011: "                                 
* Wed 03 Dec 2014 01:08:06 AM JST
asp",
* Wed 03 Dec 2014 01:08:06 AM JST
27374: "                                  
* Wed 03 Dec 2014 01:08:07 AM JST
isdnlog",
* Wed 03 Dec 2014 01:08:07 AM JST
isdnlog", 
* Wed 03 Dec 2014 01:08:07 AM JST
isdnlog",  
* Wed 03 Dec 2014 01:08:07 AM JST
isdnlog",   
* Wed 03 Dec 2014 01:08:07 AM JST
isdnlog",    
* Wed 03 Dec 2014 01:08:07 AM JST
isdnlog",     
* Wed 03 Dec 2014 01:08:07 AM JST
isdnlog",      
* Wed 03 Dec 2014 01:08:08 AM JST
isdnlog",       
* Wed 03 Dec 2014 01:08:08 AM JST
isdnlog",        
* Wed 03 Dec 2014 01:08:08 AM JST
isdnlog",         
* Wed 03 Dec 2014 01:08:08 AM JST
isdnlog",          
* Wed 03 Dec 2014 01:08:09 AM JST
isdnlog",           
* Wed 03 Dec 2014 01:08:09 AM JST
isdnlog",            
* Wed 03 Dec 2014 01:08:09 AM JST
isdnlog",             
* Wed 03 Dec 2014 01:08:09 AM JST
isdnlog",              
* Wed 03 Dec 2014 01:08:09 AM JST
isdnlog",               
* Wed 03 Dec 2014 01:08:09 AM JST
isdnlog",                
* Wed 03 Dec 2014 01:08:10 AM JST
isdnlog",                 
* Wed 03 Dec 2014 01:08:10 AM JST
isdnlog",                  
* Wed 03 Dec 2014 01:08:10 AM JST
isdnlog",                   
* Wed 03 Dec 2014 01:08:10 AM JST
isdnlog",                    
* Wed 03 Dec 2014 01:08:10 AM JST
isdnlog",                     
* Wed 03 Dec 2014 01:08:10 AM JST
isdnlog",                      
* Wed 03 Dec 2014 01:08:10 AM JST
isdnlog",                       
* Wed 03 Dec 2014 01:08:11 AM JST
isdnlog",                        
* Wed 03 Dec 2014 01:08:11 AM JST
isdnlog",                         
* Wed 03 Dec 2014 01:08:11 AM JST
isdnlog",                          
* Wed 03 Dec 2014 01:08:11 AM JST
isdnlog",                           
* Wed 03 Dec 2014 01:08:11 AM JST
isdnlog",                            
* Wed 03 Dec 2014 01:08:11 AM JST
isdnlog",                             
* Wed 03 Dec 2014 01:08:11 AM JST
isdnlog",                              
* Wed 03 Dec 2014 01:08:12 AM JST
isdnlog",                               
* Wed 03 Dec 2014 01:08:12 AM JST
isdnlog",                                
* Wed 03 Dec 2014 01:08:12 AM JST
isdnlog",                                 
* Wed 03 Dec 2014 01:08:12 AM JST
isdnlog",                                  
* Wed 03 Dec 2014 01:08:12 AM JST
isdnlog",                                   
* Wed 03 Dec 2014 01:08:12 AM JST
isdnlog",                                    
* Wed 03 Dec 2014 01:08:12 AM JST
isdnlog",                                     
* Wed 03 Dec 2014 01:08:13 AM JST
isdnlog",                                      
* Wed 03 Dec 2014 01:08:13 AM JST
isdnlog",                                       
* Wed 03 Dec 2014 01:08:13 AM JST
isdnlog",                                        
* Wed 03 Dec 2014 01:08:13 AM JST
isdnlog",                                         
* Wed 03 Dec 2014 01:08:13 AM JST
isdnlog",                                          
* Wed 03 Dec 2014 01:08:14 AM JST
isdnlog",                                           
* Wed 03 Dec 2014 01:08:14 AM JST
isdnlog",                                            
* Wed 03 Dec 2014 01:08:14 AM JST
isdnlog",                                             
* Wed 03 Dec 2014 01:08:14 AM JST
isdnlog",                                              
* Wed 03 Dec 2014 01:08:15 AM JST
isdnlog",                                               
* Wed 03 Dec 2014 01:08:15 AM JST
isdnlog",                                                
* Wed 03 Dec 2014 01:08:15 AM JST
isdnlog",                                                 
* Wed 03 Dec 2014 01:08:15 AM JST
isdnlog",                                                  
* Wed 03 Dec 2014 01:08:15 AM JST
isdnlog",                                                   
* Wed 03 Dec 2014 01:08:15 AM JST
isdnlog",                                                    
* Wed 03 Dec 2014 01:08:15 AM JST
isdnlog",                                                     
* Wed 03 Dec 2014 01:08:16 AM JST
isdnlog",                                                      
* Wed 03 Dec 2014 01:08:16 AM JST
isdnlog",                                                       
* Wed 03 Dec 2014 01:08:16 AM JST
isdnlog",                                                        
* Wed 03 Dec 2014 01:08:16 AM JST
isdnlog",                                                         
* Wed 03 Dec 2014 01:08:16 AM JST
isdnlog",                                                          
* Wed 03 Dec 2014 01:08:16 AM JST
isdnlog",                                                           
* Wed 03 Dec 2014 01:08:16 AM JST
isdnlog",                                                            
* Wed 03 Dec 2014 01:08:17 AM JST
isdnlog",                                                             
* Wed 03 Dec 2014 01:08:17 AM JST
isdnlog",                                                              
* Wed 03 Dec 2014 01:08:17 AM JST
isdnlog",                                                               
* Wed 03 Dec 2014 01:08:17 AM JST
isdnlog",                                                                
* Wed 03 Dec 2014 01:08:17 AM JST
isdnlog",                                                                 
* Wed 03 Dec 2014 01:08:17 AM JST
isdnlog",                                                                  
* Wed 03 Dec 2014 01:08:18 AM JST
isdnlog",                                                                   
* Wed 03 Dec 2014 01:08:18 AM JST
isdnlog",                                                                    
* Wed 03 Dec 2014 01:08:18 AM JST
isdnlog",                                                                     
* Wed 03 Dec 2014 01:08:18 AM JST
isdnlog",                                                                      
* Wed 03 Dec 2014 01:08:18 AM JST
isdnlog",                                                                       
* Wed 03 Dec 2014 01:08:18 AM JST
isdnlog",                                                                        
* Wed 03 Dec 2014 01:08:18 AM JST
isdnlog",                                                                         
* Wed 03 Dec 2014 01:08:19 AM JST
isdnlog",                                                                          
* Wed 03 Dec 2014 01:08:19 AM JST
isdnlog",                                                                           
* Wed 03 Dec 2014 01:08:19 AM JST
isdnlog",                                                                            
* Wed 03 Dec 2014 01:08:19 AM JST
isdnlog",                                                                             
* Wed 03 Dec 2014 01:08:19 AM JST
isdnlog",                                                                              
* Wed 03 Dec 2014 01:08:20 AM JST
isdnlog",                                                                               
* Wed 03 Dec 2014 01:08:20 AM JST
isdnlog",                                                                                
* Wed 03 Dec 2014 01:08:20 AM JST
isdnlog",                                                                                 
* Wed 03 Dec 2014 01:08:20 AM JST
isdnlog",                                                                                  
* Wed 03 Dec 2014 01:08:20 AM JST
isdnlog",                                                                                   
* Wed 03 Dec 2014 01:08:20 AM JST
isdnlog",                                                                                    
* Wed 03 Dec 2014 01:08:21 AM JST
isdnlog",                                                                                     
* Wed 03 Dec 2014 01:08:21 AM JST
isdnlog",                                                                                      
* Wed 03 Dec 2014 01:08:21 AM JST
isdnlog",                                                                                       
* Wed 03 Dec 2014 01:08:21 AM JST
isdnlog",                                                                                        
* Wed 03 Dec 2014 01:08:21 AM JST
isdnlog",                                                                                         
* Wed 03 Dec 2014 01:08:21 AM JST
isdnlog",                                                                                          
* Wed 03 Dec 2014 01:08:22 AM JST
20012: "                                  
* Wed 03 Dec 2014 01:08:22 AM JST
kerberos4",                 
* Wed 03 Dec 2014 01:08:22 AM JST
master",           
* Wed 03 Dec 2014 01:08:22 AM JST
server",             
* Wed 03 Dec 2014 01:08:22 AM JST
srv",                
* Wed 03 Dec 2014 01:08:22 AM JST
clt",                
* Wed 03 Dec 2014 01:08:23 AM JST
hm",                 
* Wed 03 Dec 2014 01:08:23 AM JST
106: " 
* Wed 03 Dec 2014 01:08:23 AM JST
ureg",                
* Wed 03 Dec 2014 01:08:23 AM JST
808: " 
* Wed 03 Dec 2014 01:08:23 AM JST
1001: " 
* Wed 03 Dec 2014 01:08:23 AM JST
1210: " 
* Wed 03 Dec 2014 01:08:23 AM JST
2150: " 
* Wed 03 Dec 2014 01:08:23 AM JST
2988: " 
* Wed 03 Dec 2014 01:08:24 AM JST
2989: " 
* Wed 03 Dec 2014 01:08:24 AM JST
5354: " 
* Wed 03 Dec 2014 01:08:24 AM JST
5355: " 
* Wed 03 Dec 2014 01:08:24 AM JST
5555: " 
* Wed 03 Dec 2014 01:08:24 AM JST
8088: " 
* Wed 03 Dec 2014 01:08:24 AM JST
9359: " 
* Wed 03 Dec 2014 01:08:24 AM JST
10081: " 
* Wed 03 Dec 2014 01:08:25 AM JST
11201: " 
* Wed 03 Dec 2014 01:08:25 AM JST
15345: " 
* Wed 03 Dec 2014 01:08:25 AM JST
cmsd",                  
* Wed 03 Dec 2014 01:08:25 AM JST
crsd",                  
* Wed 03 Dec 2014 01:08:25 AM JST
gcd",                   
* Wed 03 Dec 2014 01:08:26 AM JST
sgi- 
* Wed 03 Dec 2014 01:08:26 AM JST
17003: " 
* Wed 03 Dec 2014 01:08:26 AM JST
gcd",                    
* Wed 03 Dec 2014 01:08:26 AM JST
sgi-  
* Wed 03 Dec 2014 01:08:26 AM JST
17003: "  
* Wed 03 Dec 2014 01:08:26 AM JST
gcd",                     
* Wed 03 Dec 2014 01:08:26 AM JST
sgi-   
* Wed 03 Dec 2014 01:08:27 AM JST
17003: "   
* Wed 03 Dec 2014 01:08:27 AM JST
gcd",                      
* Wed 03 Dec 2014 01:08:27 AM JST
sgi-    
* Wed 03 Dec 2014 01:08:27 AM JST
17003: "    
* Wed 03 Dec 2014 01:08:27 AM JST
gcd",                       
* Wed 03 Dec 2014 01:08:27 AM JST
sgi-     
* Wed 03 Dec 2014 01:08:28 AM JST
17003: "     
* Wed 03 Dec 2014 01:08:28 AM JST
gcd",                        
* Wed 03 Dec 2014 01:08:28 AM JST
sgi-      
* Wed 03 Dec 2014 01:08:28 AM JST
17003: "      
* Wed 03 Dec 2014 01:08:28 AM JST
gcd",                         
* Wed 03 Dec 2014 01:08:28 AM JST
sgi-       
* Wed 03 Dec 2014 01:08:28 AM JST
17003: "       
* Wed 03 Dec 2014 01:08:29 AM JST
gcd",                          
* Wed 03 Dec 2014 01:08:29 AM JST
sgi-        
* Wed 03 Dec 2014 01:08:29 AM JST
17003: "        
* Wed 03 Dec 2014 01:08:29 AM JST
gcd",                           
* Wed 03 Dec 2014 01:08:29 AM JST
sgi-         
* Wed 03 Dec 2014 01:08:29 AM JST
17003: "         
* Wed 03 Dec 2014 01:08:29 AM JST
gcd",                            
* Wed 03 Dec 2014 01:08:30 AM JST
sgi-          
* Wed 03 Dec 2014 01:08:30 AM JST
17003: "          
* Wed 03 Dec 2014 01:08:30 AM JST
gcd",                             
* Wed 03 Dec 2014 01:08:30 AM JST
sgi-           
* Wed 03 Dec 2014 01:08:31 AM JST
17003: "           
* Wed 03 Dec 2014 01:08:31 AM JST
gcd",                              
* Wed 03 Dec 2014 01:08:31 AM JST
sgi-            
* Wed 03 Dec 2014 01:08:31 AM JST
17003: "            
* Wed 03 Dec 2014 01:08:31 AM JST
gcd",                               
* Wed 03 Dec 2014 01:08:31 AM JST
sgi-             
* Wed 03 Dec 2014 01:08:31 AM JST
17003: "             
* Wed 03 Dec 2014 01:08:32 AM JST
gcd",                                
* Wed 03 Dec 2014 01:08:32 AM JST
sgi-              
* Wed 03 Dec 2014 01:08:32 AM JST
17003: "              
* Wed 03 Dec 2014 01:08:32 AM JST
gcd",                                 
* Wed 03 Dec 2014 01:08:32 AM JST
sgi-               
* Wed 03 Dec 2014 01:08:32 AM JST
17003: "               
* Wed 03 Dec 2014 01:08:32 AM JST
gcd",                                  
* Wed 03 Dec 2014 01:08:33 AM JST
sgi-                
* Wed 03 Dec 2014 01:08:33 AM JST
17003: "                
* Wed 03 Dec 2014 01:08:33 AM JST
gcd",                                   
* Wed 03 Dec 2014 01:08:33 AM JST
sgi-                 
* Wed 03 Dec 2014 01:08:33 AM JST
17003: "                 
* Wed 03 Dec 2014 01:08:33 AM JST
gcd",                                    
* Wed 03 Dec 2014 01:08:34 AM JST
sgi-                  
* Wed 03 Dec 2014 01:08:34 AM JST
17003: "                  
* Wed 03 Dec 2014 01:08:34 AM JST
gcd",                                     
* Wed 03 Dec 2014 01:08:34 AM JST
sgi-                   
* Wed 03 Dec 2014 01:08:34 AM JST
17003: "                   
* Wed 03 Dec 2014 01:08:34 AM JST
gcd",                                      
* Wed 03 Dec 2014 01:08:34 AM JST
sgi-                    
* Wed 03 Dec 2014 01:08:35 AM JST
17003: "                    
* Wed 03 Dec 2014 01:08:35 AM JST
gcd",                                       
* Wed 03 Dec 2014 01:08:35 AM JST
sgi-                     
* Wed 03 Dec 2014 01:08:35 AM JST
17003: "                     
* Wed 03 Dec 2014 01:08:35 AM JST
gcd",                                        
* Wed 03 Dec 2014 01:08:36 AM JST
sgi-                      
* Wed 03 Dec 2014 01:08:36 AM JST
17003: "                      
* Wed 03 Dec 2014 01:08:36 AM JST
gcd",                                         
* Wed 03 Dec 2014 01:08:36 AM JST
sgi-                       
* Wed 03 Dec 2014 01:08:37 AM JST
17003: "                       
* Wed 03 Dec 2014 01:08:37 AM JST
gcd",                                          
* Wed 03 Dec 2014 01:08:37 AM JST
sgi-                        
* Wed 03 Dec 2014 01:08:37 AM JST
17003: "                        
* Wed 03 Dec 2014 01:08:37 AM JST
gcd",                                           
* Wed 03 Dec 2014 01:08:37 AM JST
sgi-                         
* Wed 03 Dec 2014 01:08:38 AM JST
17003: "                         
* Wed 03 Dec 2014 01:08:38 AM JST
gcd",                                            
* Wed 03 Dec 2014 01:08:38 AM JST
sgi-                          
* Wed 03 Dec 2014 01:08:38 AM JST
17003: "                          
* Wed 03 Dec 2014 01:08:38 AM JST
gcd",                                             
* Wed 03 Dec 2014 01:08:38 AM JST
sgi-                           
* Wed 03 Dec 2014 01:08:38 AM JST
17003: "                           
* Wed 03 Dec 2014 01:08:39 AM JST
gcd",                                              
* Wed 03 Dec 2014 01:08:39 AM JST
sgi-                            
* Wed 03 Dec 2014 01:08:39 AM JST
17003: "                            
* Wed 03 Dec 2014 01:08:39 AM JST
gcd",                                               
* Wed 03 Dec 2014 01:08:39 AM JST
sgi-                             
* Wed 03 Dec 2014 01:08:39 AM JST
17003: "                             
* Wed 03 Dec 2014 01:08:39 AM JST
gcd",                                                
* Wed 03 Dec 2014 01:08:40 AM JST
sgi-                              
* Wed 03 Dec 2014 01:08:40 AM JST
17003: "                              
* Wed 03 Dec 2014 01:08:40 AM JST
gcd",                                                 
* Wed 03 Dec 2014 01:08:40 AM JST
sgi-                               
* Wed 03 Dec 2014 01:08:40 AM JST
17003: "                               
* Wed 03 Dec 2014 01:08:40 AM JST
gcd",                                                  
* Wed 03 Dec 2014 01:08:41 AM JST
sgi-                                
* Wed 03 Dec 2014 01:08:41 AM JST
17003: "                                
* Wed 03 Dec 2014 01:08:41 AM JST
gcd",                                                   
* Wed 03 Dec 2014 01:08:41 AM JST
sgi-                                 
* Wed 03 Dec 2014 01:08:41 AM JST
17003: "                                 
* Wed 03 Dec 2014 01:08:42 AM JST
gcd",                                                    
* Wed 03 Dec 2014 01:08:42 AM JST
sgi-                                  
* Wed 03 Dec 2014 01:08:42 AM JST
17003: "                                  
* Wed 03 Dec 2014 01:08:42 AM JST
gcd",                                                     
* Wed 03 Dec 2014 01:08:42 AM JST
sgi-                                   
* Wed 03 Dec 2014 01:08:42 AM JST
17003: "                                   
* Wed 03 Dec 2014 01:08:42 AM JST
gcd",                                                      
* Wed 03 Dec 2014 01:08:43 AM JST
sgi-                                    
* Wed 03 Dec 2014 01:08:43 AM JST
17003: "                                    
* Wed 03 Dec 2014 01:08:43 AM JST
gcd",                                                       
* Wed 03 Dec 2014 01:08:43 AM JST
sgi-                                     
* Wed 03 Dec 2014 01:08:43 AM JST
17003: "                                     
* Wed 03 Dec 2014 01:08:43 AM JST
sgi-                                      
* Wed 03 Dec 2014 01:08:43 AM JST
17003: "                                      
* Wed 03 Dec 2014 01:08:44 AM JST
sgi-                                       
* Wed 03 Dec 2014 01:08:44 AM JST
17003: "                                       
* Wed 03 Dec 2014 01:08:44 AM JST
sgi-                                        
* Wed 03 Dec 2014 01:08:44 AM JST
17003: "                                        
* Wed 03 Dec 2014 01:08:44 AM JST
sgi-                                         
* Wed 03 Dec 2014 01:08:44 AM JST
17003: "                                         
* Wed 03 Dec 2014 01:08:44 AM JST
sgi-                                          
* Wed 03 Dec 2014 01:08:45 AM JST
17003: "                                          
* Wed 03 Dec 2014 01:08:45 AM JST
sgi-                                           
* Wed 03 Dec 2014 01:08:45 AM JST
17003: "                                           
* Wed 03 Dec 2014 01:08:45 AM JST
sgi-                                            
* Wed 03 Dec 2014 01:08:45 AM JST
17003: "                                            
* Wed 03 Dec 2014 01:08:45 AM JST
sgi-                                             
* Wed 03 Dec 2014 01:08:46 AM JST
17003: "                                             
* Wed 03 Dec 2014 01:08:46 AM JST
sgi-                                              
* Wed 03 Dec 2014 01:08:46 AM JST
17003: "                                              
* Wed 03 Dec 2014 01:08:46 AM JST
sgi-                                               
* Wed 03 Dec 2014 01:08:46 AM JST
17003: "                                               
* Wed 03 Dec 2014 01:08:47 AM JST
sgi-                                                
* Wed 03 Dec 2014 01:08:47 AM JST
17003: "                                                
* Wed 03 Dec 2014 01:08:47 AM JST
sgi-                                                 
* Wed 03 Dec 2014 01:08:47 AM JST
17003: "                                                 
* Wed 03 Dec 2014 01:08:47 AM JST
sgi-                                                  
* Wed 03 Dec 2014 01:08:47 AM JST
17003: "                                                  
* Wed 03 Dec 2014 01:08:47 AM JST
sgi-                                                   
* Wed 03 Dec 2014 01:08:48 AM JST
17003: "                                                   
* Wed 03 Dec 2014 01:08:48 AM JST
sgi-                                                    
* Wed 03 Dec 2014 01:08:48 AM JST
17003: "                                                    
* Wed 03 Dec 2014 01:08:48 AM JST
sgi-                                                     
* Wed 03 Dec 2014 01:08:49 AM JST
17003: "
* Wed 03 Dec 2014 01:08:49 AM JST
17003: " 
* Wed 03 Dec 2014 01:08:49 AM JST
17003: "  
* Wed 03 Dec 2014 01:08:49 AM JST
17003: "   
* Wed 03 Dec 2014 01:08:49 AM JST
17003: "    
* Wed 03 Dec 2014 01:08:49 AM JST
17003: "     
* Wed 03 Dec 2014 01:08:49 AM JST
17003: "      
* Wed 03 Dec 2014 01:08:50 AM JST
17003: "       
* Wed 03 Dec 2014 01:08:50 AM JST
17003: "        
* Wed 03 Dec 2014 01:08:50 AM JST
17003: "         
* Wed 03 Dec 2014 01:08:50 AM JST
17003: "          
* Wed 03 Dec 2014 01:08:50 AM JST
17003: "           
* Wed 03 Dec 2014 01:08:50 AM JST
17003: "            
* Wed 03 Dec 2014 01:08:50 AM JST
17003: "             
* Wed 03 Dec 2014 01:08:51 AM JST
17003: "              
* Wed 03 Dec 2014 01:08:51 AM JST
17003: "               
* Wed 03 Dec 2014 01:08:51 AM JST
17003: "                
* Wed 03 Dec 2014 01:08:51 AM JST
17003: "                 
* Wed 03 Dec 2014 01:08:52 AM JST
17003: "                  
* Wed 03 Dec 2014 01:08:52 AM JST
17003: "                   
* Wed 03 Dec 2014 01:08:52 AM JST
17003: "                    
* Wed 03 Dec 2014 01:08:52 AM JST
17003: "                     
* Wed 03 Dec 2014 01:08:52 AM JST
17003: "                      
* Wed 03 Dec 2014 01:08:52 AM JST
17003: "                       
* Wed 03 Dec 2014 01:08:52 AM JST
17003: "                        
* Wed 03 Dec 2014 01:08:53 AM JST
17003: "                         
* Wed 03 Dec 2014 01:08:53 AM JST
17003: "                          
* Wed 03 Dec 2014 01:08:53 AM JST
17003: "                           
* Wed 03 Dec 2014 01:08:53 AM JST
17003: "                            
* Wed 03 Dec 2014 01:08:53 AM JST
17003: "                             
* Wed 03 Dec 2014 01:08:53 AM JST
17003: "                              
* Wed 03 Dec 2014 01:08:53 AM JST
17003: "                               
* Wed 03 Dec 2014 01:08:54 AM JST
17003: "                                
* Wed 03 Dec 2014 01:08:54 AM JST
17003: "                                 
* Wed 03 Dec 2014 01:08:54 AM JST
17003: "                                  
* Wed 03 Dec 2014 01:08:54 AM JST
17003: "                                   
* Wed 03 Dec 2014 01:08:54 AM JST
17003: "                                    
* Wed 03 Dec 2014 01:08:54 AM JST
17003: "                                     
* Wed 03 Dec 2014 01:08:54 AM JST
17003: "                                      
* Wed 03 Dec 2014 01:08:55 AM JST
17003: "                                       
* Wed 03 Dec 2014 01:08:55 AM JST
17003: "                                        
* Wed 03 Dec 2014 01:08:55 AM JST
17003: "                                         
* Wed 03 Dec 2014 01:08:55 AM JST
17003: "                                          
* Wed 03 Dec 2014 01:08:55 AM JST
17003: "                                           
* Wed 03 Dec 2014 01:08:55 AM JST
17003: "                                            
* Wed 03 Dec 2014 01:08:55 AM JST
17003: "                                             
* Wed 03 Dec 2014 01:08:56 AM JST
17003: "                                              
* Wed 03 Dec 2014 01:08:56 AM JST
17003: "                                               
* Wed 03 Dec 2014 01:08:56 AM JST
17003: "                                                
* Wed 03 Dec 2014 01:08:56 AM JST
17003: "                                                 
* Wed 03 Dec 2014 01:08:56 AM JST
17003: "                                                  
* Wed 03 Dec 2014 01:08:57 AM JST
17003: "                                                   
* Wed 03 Dec 2014 01:08:57 AM JST
17003: "                                                    
* Wed 03 Dec 2014 01:08:57 AM JST
17003: "                                                     
* Wed 03 Dec 2014 01:08:57 AM JST
17003: "                                                      
* Wed 03 Dec 2014 01:08:57 AM JST
17003: "                                                       
* Wed 03 Dec 2014 01:08:58 AM JST
17003: "                                                        
* Wed 03 Dec 2014 01:08:58 AM JST
17003: "                                                         
* Wed 03 Dec 2014 01:08:58 AM JST
17003: "                                                          
* Wed 03 Dec 2014 01:08:58 AM JST
17003: "                                                           
* Wed 03 Dec 2014 01:08:58 AM JST
17003: "                                                            
* Wed 03 Dec 2014 01:08:58 AM JST
17003: "                                                             
* Wed 03 Dec 2014 01:08:58 AM JST
17003: "                                                              
* Wed 03 Dec 2014 01:08:59 AM JST
17003: "                                                               
* Wed 03 Dec 2014 01:08:59 AM JST
17003: "                                                                
* Wed 03 Dec 2014 01:08:59 AM JST
17003: "                                                                 
* Wed 03 Dec 2014 01:08:59 AM JST
17003: "                                                                  
* Wed 03 Dec 2014 01:08:59 AM JST
17003: "                                                                   
* Wed 03 Dec 2014 01:08:59 AM JST
17003: "                                                                    
* Wed 03 Dec 2014 01:08:59 AM JST
17003: "                                                                     
* Wed 03 Dec 2014 01:09:00 AM JST
17003: "                                                                      
* Wed 03 Dec 2014 01:09:00 AM JST
17003: "                                                                       
* Wed 03 Dec 2014 01:09:00 AM JST
17003: "                                                                        
* Wed 03 Dec 2014 01:09:00 AM JST
17003: "                                                                         
* Wed 03 Dec 2014 01:09:00 AM JST
17003: "                                                                          
* Wed 03 Dec 2014 01:09:00 AM JST
17003: "                                                                           
* Wed 03 Dec 2014 01:09:01 AM JST
17003: "                                                                            
* Wed 03 Dec 2014 01:09:01 AM JST
17003: "                                                                             
* Wed 03 Dec 2014 01:09:01 AM JST
17003: "                                                                              
* Wed 03 Dec 2014 01:09:01 AM JST
17003: "                                                                               
* Wed 03 Dec 2014 01:09:01 AM JST
17003: "                                                                                
* Wed 03 Dec 2014 01:09:02 AM JST
17003: "                                                                                 
* Wed 03 Dec 2014 01:09:02 AM JST
17003: "                                                                                  
* Wed 03 Dec 2014 01:09:02 AM JST
17003: "                                                                                   
* Wed 03 Dec 2014 01:09:02 AM JST
17003: "                                                                                    
* Wed 03 Dec 2014 01:09:03 AM JST
17003: "                                                                                     
* Wed 03 Dec 2014 01:09:03 AM JST
17003: "                                                                                      
* Wed 03 Dec 2014 01:09:03 AM JST
17003: "                                                                                       
* Wed 03 Dec 2014 01:09:03 AM JST
17003: "                                                                                        
* Wed 03 Dec 2014 01:09:03 AM JST
17003: "                                                                                         
* Wed 03 Dec 2014 01:09:03 AM JST
17003: "                                                                                          
* Wed 03 Dec 2014 01:09:03 AM JST
17003: "                                                                                           
* Wed 03 Dec 2014 01:09:04 AM JST
vboxd",
* Wed 03 Dec 2014 01:09:04 AM JST
asp", 
* Wed 03 Dec 2014 01:09:04 AM JST
750: " 
* Wed 03 Dec 2014 01:09:04 AM JST
kerberos- 
* Wed 03 Dec 2014 01:09:04 AM JST
passwd- 
* Wed 03 Dec 2014 01:09:04 AM JST
zephyr- 
* Wed 03 Dec 2014 01:09:04 AM JST
zephyr- 
* Wed 03 Dec 2014 01:09:05 AM JST
zephyr- 
* Wed 03 Dec 2014 01:09:05 AM JST
poppassd",                   
* Wed 03 Dec 2014 01:09:05 AM JST
moira- 
* Wed 03 Dec 2014 01:09:05 AM JST
omirr",                      
* Wed 03 Dec 2014 01:09:05 AM JST
customs",                    
* Wed 03 Dec 2014 01:09:05 AM JST
predict",                    
* Wed 03 Dec 2014 01:09:05 AM JST
ninstall",                   
* Wed 03 Dec 2014 01:09:06 AM JST
afbackup",                   
* Wed 03 Dec 2014 01:09:06 AM JST
afmbackup",                  
* Wed 03 Dec 2014 01:09:06 AM JST
noclog",                     
* Wed 03 Dec 2014 01:09:06 AM JST
hostmon",                    
* Wed 03 Dec 2014 01:09:06 AM JST
rplay",                      
* Wed 03 Dec 2014 01:09:06 AM JST
omniorb",                    
* Wed 03 Dec 2014 01:09:06 AM JST
mandelspawn",                
* Wed 03 Dec 2014 01:09:06 AM JST
kamanda",                    
* Wed 03 Dec 2014 01:09:07 AM JST
smsqp",                      
* Wed 03 Dec 2014 01:09:07 AM JST
xpilot",                     
* Wed 03 Dec 2014 01:09:07 AM JST
sgi- 
* Wed 03 Dec 2014 01:09:07 AM JST
sgi- 
* Wed 03 Dec 2014 01:09:07 AM JST
gcd",
* Wed 03 Dec 2014 01:09:08 AM JST
gcd", 
* Wed 03 Dec 2014 01:09:08 AM JST
gcd",  
* Wed 03 Dec 2014 01:09:08 AM JST
gcd",   
* Wed 03 Dec 2014 01:09:08 AM JST
gcd",    
* Wed 03 Dec 2014 01:09:08 AM JST
gcd",     
* Wed 03 Dec 2014 01:09:08 AM JST
gcd",      
* Wed 03 Dec 2014 01:09:09 AM JST
gcd",       
* Wed 03 Dec 2014 01:09:09 AM JST
gcd",        
* Wed 03 Dec 2014 01:09:09 AM JST
gcd",         
* Wed 03 Dec 2014 01:09:09 AM JST
gcd",          
* Wed 03 Dec 2014 01:09:09 AM JST
gcd",           
* Wed 03 Dec 2014 01:09:09 AM JST
gcd",            
* Wed 03 Dec 2014 01:09:09 AM JST
gcd",             
* Wed 03 Dec 2014 01:09:09 AM JST
gcd",              
* Wed 03 Dec 2014 01:09:10 AM JST
gcd",               
* Wed 03 Dec 2014 01:09:10 AM JST
gcd",                
* Wed 03 Dec 2014 01:09:10 AM JST
gcd",                 
* Wed 03 Dec 2014 01:09:10 AM JST
gcd",                  
* Wed 03 Dec 2014 01:09:10 AM JST
gcd",                   
* Wed 03 Dec 2014 01:09:10 AM JST
gcd",                    
* Wed 03 Dec 2014 01:09:11 AM JST
gcd",                     
* Wed 03 Dec 2014 01:09:11 AM JST
gcd",                      
* Wed 03 Dec 2014 01:09:11 AM JST
gcd",                       
* Wed 03 Dec 2014 01:09:11 AM JST
gcd",                        
* Wed 03 Dec 2014 01:09:11 AM JST
gcd",                         
* Wed 03 Dec 2014 01:09:11 AM JST
gcd",                          
* Wed 03 Dec 2014 01:09:11 AM JST
gcd",                           
* Wed 03 Dec 2014 01:09:12 AM JST
gcd",                            
* Wed 03 Dec 2014 01:09:12 AM JST
gcd",                             
* Wed 03 Dec 2014 01:09:12 AM JST
gcd",                              
* Wed 03 Dec 2014 01:09:12 AM JST
gcd",                               
* Wed 03 Dec 2014 01:09:13 AM JST
gcd",                                
* Wed 03 Dec 2014 01:09:13 AM JST
gcd",                                 
* Wed 03 Dec 2014 01:09:13 AM JST
gcd",                                  
* Wed 03 Dec 2014 01:09:13 AM JST
gcd",                                   
* Wed 03 Dec 2014 01:09:13 AM JST
gcd",                                    
* Wed 03 Dec 2014 01:09:13 AM JST
gcd",                                     
* Wed 03 Dec 2014 01:09:14 AM JST
gcd",                                      
* Wed 03 Dec 2014 01:09:14 AM JST
gcd",                                       
* Wed 03 Dec 2014 01:09:14 AM JST
gcd",                                        
* Wed 03 Dec 2014 01:09:14 AM JST
gcd",                                         
* Wed 03 Dec 2014 01:09:14 AM JST
gcd",                                          
* Wed 03 Dec 2014 01:09:15 AM JST
gcd",                                           
* Wed 03 Dec 2014 01:09:15 AM JST
gcd",                                            
* Wed 03 Dec 2014 01:09:15 AM JST
gcd",                                             
* Wed 03 Dec 2014 01:09:15 AM JST
gcd",                                              
* Wed 03 Dec 2014 01:09:15 AM JST
gcd",                                               
* Wed 03 Dec 2014 01:09:15 AM JST
gcd",                                                
* Wed 03 Dec 2014 01:09:15 AM JST
gcd",                                                 
* Wed 03 Dec 2014 01:09:16 AM JST
gcd",                                                  
* Wed 03 Dec 2014 01:09:16 AM JST
gcd",                                                   
* Wed 03 Dec 2014 01:09:16 AM JST
gcd",                                                    
* Wed 03 Dec 2014 01:09:16 AM JST
gcd",                                                     
* Wed 03 Dec 2014 01:09:16 AM JST
gcd",                                                      
* Wed 03 Dec 2014 01:09:16 AM JST
gcd",                                                       
* Wed 03 Dec 2014 01:09:17 AM JST
gcd",                                                        
* Wed 03 Dec 2014 01:09:17 AM JST
gcd",                                                         
* Wed 03 Dec 2014 01:09:17 AM JST
gcd",                                                          
* Wed 03 Dec 2014 01:09:17 AM JST
gcd",                                                           
* Wed 03 Dec 2014 01:09:17 AM JST
gcd",                                                            
* Wed 03 Dec 2014 01:09:17 AM JST
gcd",                                                             
* Wed 03 Dec 2014 01:09:18 AM JST
gcd",                                                              
* Wed 03 Dec 2014 01:09:18 AM JST
gcd",                                                               
* Wed 03 Dec 2014 01:09:18 AM JST
gcd",                                                                
* Wed 03 Dec 2014 01:09:18 AM JST
gcd",                                                                 
* Wed 03 Dec 2014 01:09:19 AM JST
gcd",                                                                  
* Wed 03 Dec 2014 01:09:19 AM JST
gcd",                                                                   
* Wed 03 Dec 2014 01:09:19 AM JST
gcd",                                                                    
* Wed 03 Dec 2014 01:09:19 AM JST
gcd",                                                                     
* Wed 03 Dec 2014 01:09:19 AM JST
gcd",                                                                      
* Wed 03 Dec 2014 01:09:19 AM JST
gcd",                                                                       
* Wed 03 Dec 2014 01:09:19 AM JST
gcd",                                                                        
* Wed 03 Dec 2014 01:09:20 AM JST
gcd",                                                                         
* Wed 03 Dec 2014 01:09:20 AM JST
gcd",                                                                          
* Wed 03 Dec 2014 01:09:20 AM JST
gcd",                                                                           
* Wed 03 Dec 2014 01:09:20 AM JST
gcd",                                                                            
* Wed 03 Dec 2014 01:09:20 AM JST
gcd",                                                                             
* Wed 03 Dec 2014 01:09:20 AM JST
gcd",                                                                              
* Wed 03 Dec 2014 01:09:20 AM JST
gcd",                                                                               
* Wed 03 Dec 2014 01:09:21 AM JST
gcd",                                                                                
* Wed 03 Dec 2014 01:09:21 AM JST
gcd",                                                                                 
* Wed 03 Dec 2014 01:09:21 AM JST
gcd",                                                                                  
* Wed 03 Dec 2014 01:09:21 AM JST
gcd",                                                                                   
* Wed 03 Dec 2014 01:09:21 AM JST
gcd",                                                                                    
* Wed 03 Dec 2014 01:09:21 AM JST
gcd",                                                                                     
* Wed 03 Dec 2014 01:09:22 AM JST
gcd",                                                                                      
* Wed 03 Dec 2014 01:09:22 AM JST
gcd",                                                                                       
* Wed 03 Dec 2014 01:09:22 AM JST
gcd",                                                                                        
* Wed 03 Dec 2014 01:09:22 AM JST
gcd",                                                                                         
* Wed 03 Dec 2014 01:09:22 AM JST
gcd",                                                                                          
* Wed 03 Dec 2014 01:09:22 AM JST
gcd",                                                                                           
* Wed 03 Dec 2014 01:09:22 AM JST
gcd",                                                                                            
* Wed 03 Dec 2014 01:09:23 AM JST
gcd",                                                                                             
* Wed 03 Dec 2014 01:09:23 AM JST
gcd",                                                                                              
* Wed 03 Dec 2014 01:09:23 AM JST
isdnlog",
* Wed 03 Dec 2014 01:09:24 AM JST
20011: "                                  
* Wed 03 Dec 2014 01:09:24 AM JST
20012: "                                   
* Wed 03 Dec 2014 01:09:24 AM JST
27374: "                                   
* Wed 03 Dec 2014 01:09:24 AM JST
17002: " 
* Wed 03 Dec 2014 01:09:24 AM JST
crsd",                   
* Wed 03 Dec 2014 01:09:24 AM JST
sgi-  
* Wed 03 Dec 2014 01:09:24 AM JST
17002: "  
* Wed 03 Dec 2014 01:09:25 AM JST
crsd",                    
* Wed 03 Dec 2014 01:09:25 AM JST
sgi-   
* Wed 03 Dec 2014 01:09:25 AM JST
17002: "   
* Wed 03 Dec 2014 01:09:25 AM JST
crsd",                     
* Wed 03 Dec 2014 01:09:25 AM JST
sgi-    
* Wed 03 Dec 2014 01:09:25 AM JST
17002: "    
* Wed 03 Dec 2014 01:09:26 AM JST
crsd",                      
* Wed 03 Dec 2014 01:09:26 AM JST
sgi-     
* Wed 03 Dec 2014 01:09:26 AM JST
17002: "     
* Wed 03 Dec 2014 01:09:26 AM JST
crsd",                       
* Wed 03 Dec 2014 01:09:26 AM JST
sgi-      
* Wed 03 Dec 2014 01:09:26 AM JST
17002: "      
* Wed 03 Dec 2014 01:09:26 AM JST
crsd",                        
* Wed 03 Dec 2014 01:09:27 AM JST
sgi-       
* Wed 03 Dec 2014 01:09:27 AM JST
17002: "       
* Wed 03 Dec 2014 01:09:27 AM JST
crsd",                         
* Wed 03 Dec 2014 01:09:27 AM JST
sgi-        
* Wed 03 Dec 2014 01:09:27 AM JST
17002: "        
* Wed 03 Dec 2014 01:09:28 AM JST
crsd",                          
* Wed 03 Dec 2014 01:09:28 AM JST
sgi-         
* Wed 03 Dec 2014 01:09:28 AM JST
17002: "         
* Wed 03 Dec 2014 01:09:29 AM JST
crsd",                           
* Wed 03 Dec 2014 01:09:29 AM JST
sgi-          
* Wed 03 Dec 2014 01:09:29 AM JST
17002: "          
* Wed 03 Dec 2014 01:09:29 AM JST
crsd",                            
* Wed 03 Dec 2014 01:09:29 AM JST
sgi-           
* Wed 03 Dec 2014 01:09:29 AM JST
17002: "           
* Wed 03 Dec 2014 01:09:29 AM JST
crsd",                             
* Wed 03 Dec 2014 01:09:30 AM JST
sgi-            
* Wed 03 Dec 2014 01:09:30 AM JST
17002: "            
* Wed 03 Dec 2014 01:09:30 AM JST
crsd",                              
* Wed 03 Dec 2014 01:09:30 AM JST
sgi-             
* Wed 03 Dec 2014 01:09:30 AM JST
17002: "             
* Wed 03 Dec 2014 01:09:30 AM JST
crsd",                               
* Wed 03 Dec 2014 01:09:31 AM JST
sgi-              
* Wed 03 Dec 2014 01:09:31 AM JST
17002: "              
* Wed 03 Dec 2014 01:09:31 AM JST
crsd",                                
* Wed 03 Dec 2014 01:09:31 AM JST
sgi-               
* Wed 03 Dec 2014 01:09:31 AM JST
17002: "               
* Wed 03 Dec 2014 01:09:31 AM JST
crsd",                                 
* Wed 03 Dec 2014 01:09:32 AM JST
sgi-                
* Wed 03 Dec 2014 01:09:32 AM JST
17002: "                
* Wed 03 Dec 2014 01:09:32 AM JST
crsd",                                  
* Wed 03 Dec 2014 01:09:32 AM JST
sgi-                 
* Wed 03 Dec 2014 01:09:32 AM JST
17002: "                 
* Wed 03 Dec 2014 01:09:32 AM JST
crsd",                                   
* Wed 03 Dec 2014 01:09:32 AM JST
sgi-                  
* Wed 03 Dec 2014 01:09:33 AM JST
17002: "                  
* Wed 03 Dec 2014 01:09:33 AM JST
crsd",                                    
* Wed 03 Dec 2014 01:09:33 AM JST
sgi-                   
* Wed 03 Dec 2014 01:09:33 AM JST
17002: "                   
* Wed 03 Dec 2014 01:09:33 AM JST
crsd",                                     
* Wed 03 Dec 2014 01:09:33 AM JST
sgi-                    
* Wed 03 Dec 2014 01:09:34 AM JST
17002: "                    
* Wed 03 Dec 2014 01:09:34 AM JST
crsd",                                      
* Wed 03 Dec 2014 01:09:34 AM JST
sgi-                     
* Wed 03 Dec 2014 01:09:34 AM JST
17002: "                     
* Wed 03 Dec 2014 01:09:34 AM JST
crsd",                                       
* Wed 03 Dec 2014 01:09:35 AM JST
sgi-                      
* Wed 03 Dec 2014 01:09:35 AM JST
17002: "                      
* Wed 03 Dec 2014 01:09:35 AM JST
crsd",                                        
* Wed 03 Dec 2014 01:09:35 AM JST
sgi-                       
* Wed 03 Dec 2014 01:09:35 AM JST
17002: "                       
* Wed 03 Dec 2014 01:09:35 AM JST
crsd",                                         
* Wed 03 Dec 2014 01:09:35 AM JST
sgi-                        
* Wed 03 Dec 2014 01:09:36 AM JST
17002: "                        
* Wed 03 Dec 2014 01:09:36 AM JST
crsd",                                          
* Wed 03 Dec 2014 01:09:36 AM JST
sgi-                         
* Wed 03 Dec 2014 01:09:36 AM JST
17002: "                         
* Wed 03 Dec 2014 01:09:36 AM JST
crsd",                                           
* Wed 03 Dec 2014 01:09:36 AM JST
sgi-                          
* Wed 03 Dec 2014 01:09:37 AM JST
17002: "                          
* Wed 03 Dec 2014 01:09:37 AM JST
crsd",                                            
* Wed 03 Dec 2014 01:09:37 AM JST
sgi-                           
* Wed 03 Dec 2014 01:09:37 AM JST
17002: "                           
* Wed 03 Dec 2014 01:09:37 AM JST
crsd",                                             
* Wed 03 Dec 2014 01:09:37 AM JST
sgi-                            
* Wed 03 Dec 2014 01:09:38 AM JST
17002: "                            
* Wed 03 Dec 2014 01:09:38 AM JST
crsd",                                              
* Wed 03 Dec 2014 01:09:38 AM JST
sgi-                             
* Wed 03 Dec 2014 01:09:38 AM JST
17002: "                             
* Wed 03 Dec 2014 01:09:38 AM JST
crsd",                                               
* Wed 03 Dec 2014 01:09:38 AM JST
sgi-                              
* Wed 03 Dec 2014 01:09:38 AM JST
17002: "                              
* Wed 03 Dec 2014 01:09:39 AM JST
crsd",                                                
* Wed 03 Dec 2014 01:09:39 AM JST
sgi-                               
* Wed 03 Dec 2014 01:09:39 AM JST
17002: "                               
* Wed 03 Dec 2014 01:09:39 AM JST
crsd",                                                 
* Wed 03 Dec 2014 01:09:40 AM JST
sgi-                                
* Wed 03 Dec 2014 01:09:40 AM JST
17002: "                                
* Wed 03 Dec 2014 01:09:40 AM JST
crsd",                                                  
* Wed 03 Dec 2014 01:09:40 AM JST
sgi-                                 
* Wed 03 Dec 2014 01:09:40 AM JST
17002: "                                 
* Wed 03 Dec 2014 01:09:41 AM JST
crsd",                                                   
* Wed 03 Dec 2014 01:09:41 AM JST
sgi-                                  
* Wed 03 Dec 2014 01:09:41 AM JST
17002: "                                  
* Wed 03 Dec 2014 01:09:41 AM JST
crsd",                                                    
* Wed 03 Dec 2014 01:09:41 AM JST
sgi-                                   
* Wed 03 Dec 2014 01:09:41 AM JST
17002: "                                   
* Wed 03 Dec 2014 01:09:41 AM JST
crsd",                                                     
* Wed 03 Dec 2014 01:09:42 AM JST
sgi-                                    
* Wed 03 Dec 2014 01:09:42 AM JST
17002: "                                    
* Wed 03 Dec 2014 01:09:42 AM JST
crsd",                                                      
* Wed 03 Dec 2014 01:09:42 AM JST
sgi-                                     
* Wed 03 Dec 2014 01:09:42 AM JST
17002: "                                     
* Wed 03 Dec 2014 01:09:42 AM JST
sgi-                                      
* Wed 03 Dec 2014 01:09:42 AM JST
17002: "                                      
* Wed 03 Dec 2014 01:09:43 AM JST
sgi-                                       
* Wed 03 Dec 2014 01:09:43 AM JST
17002: "                                       
* Wed 03 Dec 2014 01:09:43 AM JST
sgi-                                        
* Wed 03 Dec 2014 01:09:43 AM JST
17002: "                                        
* Wed 03 Dec 2014 01:09:43 AM JST
sgi-                                         
* Wed 03 Dec 2014 01:09:43 AM JST
17002: "                                         
* Wed 03 Dec 2014 01:09:44 AM JST
sgi-                                          
* Wed 03 Dec 2014 01:09:44 AM JST
17002: "                                          
* Wed 03 Dec 2014 01:09:44 AM JST
sgi-                                           
* Wed 03 Dec 2014 01:09:44 AM JST
17002: "                                           
* Wed 03 Dec 2014 01:09:45 AM JST
sgi-                                            
* Wed 03 Dec 2014 01:09:45 AM JST
17002: "                                            
* Wed 03 Dec 2014 01:09:45 AM JST
sgi-                                             
* Wed 03 Dec 2014 01:09:45 AM JST
17002: "                                             
* Wed 03 Dec 2014 01:09:45 AM JST
sgi-                                              
* Wed 03 Dec 2014 01:09:45 AM JST
17002: "                                              
* Wed 03 Dec 2014 01:09:45 AM JST
sgi-                                               
* Wed 03 Dec 2014 01:09:46 AM JST
17002: "                                               
* Wed 03 Dec 2014 01:09:46 AM JST
sgi-                                                
* Wed 03 Dec 2014 01:09:46 AM JST
17002: "                                                
* Wed 03 Dec 2014 01:09:46 AM JST
sgi-                                                 
* Wed 03 Dec 2014 01:09:46 AM JST
17002: "                                                 
* Wed 03 Dec 2014 01:09:46 AM JST
sgi-                                                  
* Wed 03 Dec 2014 01:09:47 AM JST
17002: "                                                  
* Wed 03 Dec 2014 01:09:47 AM JST
sgi-                                                   
* Wed 03 Dec 2014 01:09:47 AM JST
17002: "                                                   
* Wed 03 Dec 2014 01:09:47 AM JST
sgi-                                                    
* Wed 03 Dec 2014 01:09:47 AM JST
17002: "                                                    
* Wed 03 Dec 2014 01:09:47 AM JST
sgi-                                                     
* Wed 03 Dec 2014 01:09:47 AM JST
17002: "
* Wed 03 Dec 2014 01:09:48 AM JST
17002: " 
* Wed 03 Dec 2014 01:09:48 AM JST
17002: "  
* Wed 03 Dec 2014 01:09:48 AM JST
17002: "   
* Wed 03 Dec 2014 01:09:48 AM JST
17002: "    
* Wed 03 Dec 2014 01:09:48 AM JST
17002: "     
* Wed 03 Dec 2014 01:09:49 AM JST
17002: "      
* Wed 03 Dec 2014 01:09:49 AM JST
17002: "       
* Wed 03 Dec 2014 01:09:49 AM JST
17002: "        
* Wed 03 Dec 2014 01:09:49 AM JST
17002: "         
* Wed 03 Dec 2014 01:09:49 AM JST
17002: "          
* Wed 03 Dec 2014 01:09:50 AM JST
17002: "           
* Wed 03 Dec 2014 01:09:50 AM JST
17002: "            
* Wed 03 Dec 2014 01:09:50 AM JST
17002: "             
* Wed 03 Dec 2014 01:09:50 AM JST
17002: "              
* Wed 03 Dec 2014 01:09:50 AM JST
17002: "               
* Wed 03 Dec 2014 01:09:50 AM JST
17002: "                
* Wed 03 Dec 2014 01:09:50 AM JST
17002: "                 
* Wed 03 Dec 2014 01:09:51 AM JST
17002: "                  
* Wed 03 Dec 2014 01:09:51 AM JST
17002: "                   
* Wed 03 Dec 2014 01:09:51 AM JST
17002: "                    
* Wed 03 Dec 2014 01:09:51 AM JST
17002: "                     
* Wed 03 Dec 2014 01:09:51 AM JST
17002: "                      
* Wed 03 Dec 2014 01:09:51 AM JST
17002: "                       
* Wed 03 Dec 2014 01:09:52 AM JST
17002: "                        
* Wed 03 Dec 2014 01:09:52 AM JST
17002: "                         
* Wed 03 Dec 2014 01:09:52 AM JST
17002: "                          
* Wed 03 Dec 2014 01:09:52 AM JST
17002: "                           
* Wed 03 Dec 2014 01:09:52 AM JST
17002: "                            
* Wed 03 Dec 2014 01:09:52 AM JST
17002: "                             
* Wed 03 Dec 2014 01:09:52 AM JST
17002: "                              
* Wed 03 Dec 2014 01:09:53 AM JST
17002: "                               
* Wed 03 Dec 2014 01:09:53 AM JST
17002: "                                
* Wed 03 Dec 2014 01:09:53 AM JST
17002: "                                 
* Wed 03 Dec 2014 01:09:53 AM JST
17002: "                                  
* Wed 03 Dec 2014 01:09:53 AM JST
17002: "                                   
* Wed 03 Dec 2014 01:09:54 AM JST
17002: "                                    
* Wed 03 Dec 2014 01:09:54 AM JST
17002: "                                     
* Wed 03 Dec 2014 01:09:54 AM JST
17002: "                                      
* Wed 03 Dec 2014 01:09:54 AM JST
17002: "                                       
* Wed 03 Dec 2014 01:09:54 AM JST
17002: "                                        
* Wed 03 Dec 2014 01:09:55 AM JST
17002: "                                         
* Wed 03 Dec 2014 01:09:55 AM JST
17002: "                                          
* Wed 03 Dec 2014 01:09:55 AM JST
17002: "                                           
* Wed 03 Dec 2014 01:09:55 AM JST
17002: "                                            
* Wed 03 Dec 2014 01:09:55 AM JST
17002: "                                             
* Wed 03 Dec 2014 01:09:55 AM JST
17002: "                                              
* Wed 03 Dec 2014 01:09:56 AM JST
17002: "                                               
* Wed 03 Dec 2014 01:09:56 AM JST
17002: "                                                
* Wed 03 Dec 2014 01:09:56 AM JST
17002: "                                                 
* Wed 03 Dec 2014 01:09:56 AM JST
17002: "                                                  
* Wed 03 Dec 2014 01:09:56 AM JST
17002: "                                                   
* Wed 03 Dec 2014 01:09:56 AM JST
17002: "                                                    
* Wed 03 Dec 2014 01:09:56 AM JST
17002: "                                                     
* Wed 03 Dec 2014 01:09:57 AM JST
17002: "                                                      
* Wed 03 Dec 2014 01:09:57 AM JST
17002: "                                                       
* Wed 03 Dec 2014 01:09:57 AM JST
17002: "                                                        
* Wed 03 Dec 2014 01:09:57 AM JST
17002: "                                                         
* Wed 03 Dec 2014 01:09:57 AM JST
17002: "                                                          
* Wed 03 Dec 2014 01:09:57 AM JST
17002: "                                                           
* Wed 03 Dec 2014 01:09:58 AM JST
17002: "                                                            
* Wed 03 Dec 2014 01:09:58 AM JST
17002: "                                                             
* Wed 03 Dec 2014 01:09:58 AM JST
17002: "                                                              
* Wed 03 Dec 2014 01:09:58 AM JST
17002: "                                                               
* Wed 03 Dec 2014 01:09:58 AM JST
17002: "                                                                
* Wed 03 Dec 2014 01:09:58 AM JST
17002: "                                                                 
* Wed 03 Dec 2014 01:09:58 AM JST
17002: "                                                                  
* Wed 03 Dec 2014 01:09:59 AM JST
17002: "                                                                   
* Wed 03 Dec 2014 01:09:59 AM JST
17002: "                                                                    
* Wed 03 Dec 2014 01:09:59 AM JST
17002: "                                                                     
* Wed 03 Dec 2014 01:10:00 AM JST
17002: "                                                                      
* Wed 03 Dec 2014 01:10:00 AM JST
17002: "                                                                       
* Wed 03 Dec 2014 01:10:00 AM JST
17002: "                                                                        
* Wed 03 Dec 2014 01:10:00 AM JST
17002: "                                                                         
* Wed 03 Dec 2014 01:10:00 AM JST
17002: "                                                                          
* Wed 03 Dec 2014 01:10:00 AM JST
17002: "                                                                           
* Wed 03 Dec 2014 01:10:00 AM JST
17002: "                                                                            
* Wed 03 Dec 2014 01:10:01 AM JST
17002: "                                                                             
* Wed 03 Dec 2014 01:10:01 AM JST
17002: "                                                                              
* Wed 03 Dec 2014 01:10:01 AM JST
17002: "                                                                               
* Wed 03 Dec 2014 01:10:01 AM JST
17002: "                                                                                
* Wed 03 Dec 2014 01:10:01 AM JST
17002: "                                                                                 
* Wed 03 Dec 2014 01:10:01 AM JST
17002: "                                                                                  
* Wed 03 Dec 2014 01:10:01 AM JST
17002: "                                                                                   
* Wed 03 Dec 2014 01:10:02 AM JST
17002: "                                                                                    
* Wed 03 Dec 2014 01:10:02 AM JST
17002: "                                                                                     
* Wed 03 Dec 2014 01:10:02 AM JST
17002: "                                                                                      
* Wed 03 Dec 2014 01:10:02 AM JST
17002: "                                                                                       
* Wed 03 Dec 2014 01:10:02 AM JST
17002: "                                                                                        
* Wed 03 Dec 2014 01:10:02 AM JST
17002: "                                                                                         
* Wed 03 Dec 2014 01:10:03 AM JST
17002: "                                                                                          
* Wed 03 Dec 2014 01:10:03 AM JST
17002: "                                                                                           
* Wed 03 Dec 2014 01:10:03 AM JST
17003: "
* Wed 03 Dec 2014 01:10:03 AM JST
gcd",
* Wed 03 Dec 2014 01:10:03 AM JST
crsd",
* Wed 03 Dec 2014 01:10:03 AM JST
crsd", 
* Wed 03 Dec 2014 01:10:03 AM JST
crsd",  
* Wed 03 Dec 2014 01:10:04 AM JST
crsd",   
* Wed 03 Dec 2014 01:10:04 AM JST
crsd",    
* Wed 03 Dec 2014 01:10:04 AM JST
crsd",     
* Wed 03 Dec 2014 01:10:04 AM JST
crsd",      
* Wed 03 Dec 2014 01:10:05 AM JST
crsd",       
* Wed 03 Dec 2014 01:10:05 AM JST
crsd",        
* Wed 03 Dec 2014 01:10:05 AM JST
crsd",         
* Wed 03 Dec 2014 01:10:05 AM JST
crsd",          
* Wed 03 Dec 2014 01:10:05 AM JST
crsd",           
* Wed 03 Dec 2014 01:10:05 AM JST
crsd",            
* Wed 03 Dec 2014 01:10:06 AM JST
crsd",             
* Wed 03 Dec 2014 01:10:06 AM JST
crsd",              
* Wed 03 Dec 2014 01:10:06 AM JST
crsd",               
* Wed 03 Dec 2014 01:10:06 AM JST
crsd",                
* Wed 03 Dec 2014 01:10:06 AM JST
crsd",                 
* Wed 03 Dec 2014 01:10:07 AM JST
crsd",                  
* Wed 03 Dec 2014 01:10:07 AM JST
crsd",                   
* Wed 03 Dec 2014 01:10:07 AM JST
crsd",                    
* Wed 03 Dec 2014 01:10:07 AM JST
crsd",                     
* Wed 03 Dec 2014 01:10:07 AM JST
crsd",                      
* Wed 03 Dec 2014 01:10:07 AM JST
crsd",                       
* Wed 03 Dec 2014 01:10:08 AM JST
crsd",                        
* Wed 03 Dec 2014 01:10:08 AM JST
crsd",                         
* Wed 03 Dec 2014 01:10:08 AM JST
crsd",                          
* Wed 03 Dec 2014 01:10:08 AM JST
crsd",                           
* Wed 03 Dec 2014 01:10:08 AM JST
crsd",                            
* Wed 03 Dec 2014 01:10:08 AM JST
crsd",                             
* Wed 03 Dec 2014 01:10:08 AM JST
crsd",                              
* Wed 03 Dec 2014 01:10:09 AM JST
crsd",                               
* Wed 03 Dec 2014 01:10:09 AM JST
crsd",                                
* Wed 03 Dec 2014 01:10:09 AM JST
crsd",                                 
* Wed 03 Dec 2014 01:10:09 AM JST
crsd",                                  
* Wed 03 Dec 2014 01:10:10 AM JST
crsd",                                   
* Wed 03 Dec 2014 01:10:10 AM JST
crsd",                                    
* Wed 03 Dec 2014 01:10:10 AM JST
crsd",                                     
* Wed 03 Dec 2014 01:10:10 AM JST
crsd",                                      
* Wed 03 Dec 2014 01:10:10 AM JST
crsd",                                       
* Wed 03 Dec 2014 01:10:10 AM JST
crsd",                                        
* Wed 03 Dec 2014 01:10:11 AM JST
crsd",                                         
* Wed 03 Dec 2014 01:10:11 AM JST
crsd",                                          
* Wed 03 Dec 2014 01:10:11 AM JST
crsd",                                           
* Wed 03 Dec 2014 01:10:11 AM JST
crsd",                                            
* Wed 03 Dec 2014 01:10:11 AM JST
crsd",                                             
* Wed 03 Dec 2014 01:10:11 AM JST
crsd",                                              
* Wed 03 Dec 2014 01:10:11 AM JST
crsd",                                               
* Wed 03 Dec 2014 01:10:12 AM JST
crsd",                                                
* Wed 03 Dec 2014 01:10:12 AM JST
crsd",                                                 
* Wed 03 Dec 2014 01:10:12 AM JST
crsd",                                                  
* Wed 03 Dec 2014 01:10:12 AM JST
crsd",                                                   
* Wed 03 Dec 2014 01:10:12 AM JST
crsd",                                                    
* Wed 03 Dec 2014 01:10:12 AM JST
crsd",                                                     
* Wed 03 Dec 2014 01:10:13 AM JST
crsd",                                                      
* Wed 03 Dec 2014 01:10:13 AM JST
crsd",                                                       
* Wed 03 Dec 2014 01:10:13 AM JST
crsd",                                                        
* Wed 03 Dec 2014 01:10:13 AM JST
crsd",                                                         
* Wed 03 Dec 2014 01:10:13 AM JST
crsd",                                                          
* Wed 03 Dec 2014 01:10:13 AM JST
crsd",                                                           
* Wed 03 Dec 2014 01:10:13 AM JST
crsd",                                                            
* Wed 03 Dec 2014 01:10:14 AM JST
crsd",                                                             
* Wed 03 Dec 2014 01:10:14 AM JST
crsd",                                                              
* Wed 03 Dec 2014 01:10:14 AM JST
crsd",                                                               
* Wed 03 Dec 2014 01:10:14 AM JST
crsd",                                                                
* Wed 03 Dec 2014 01:10:15 AM JST
crsd",                                                                 
* Wed 03 Dec 2014 01:10:15 AM JST
crsd",                                                                  
* Wed 03 Dec 2014 01:10:15 AM JST
crsd",                                                                   
* Wed 03 Dec 2014 01:10:15 AM JST
crsd",                                                                    
* Wed 03 Dec 2014 01:10:15 AM JST
crsd",                                                                     
* Wed 03 Dec 2014 01:10:15 AM JST
crsd",                                                                      
* Wed 03 Dec 2014 01:10:16 AM JST
crsd",                                                                       
* Wed 03 Dec 2014 01:10:16 AM JST
crsd",                                                                        
* Wed 03 Dec 2014 01:10:16 AM JST
crsd",                                                                         
* Wed 03 Dec 2014 01:10:16 AM JST
crsd",                                                                          
* Wed 03 Dec 2014 01:10:16 AM JST
crsd",                                                                           
* Wed 03 Dec 2014 01:10:16 AM JST
crsd",                                                                            
* Wed 03 Dec 2014 01:10:16 AM JST
crsd",                                                                             
* Wed 03 Dec 2014 01:10:17 AM JST
crsd",                                                                              
* Wed 03 Dec 2014 01:10:17 AM JST
crsd",                                                                               
* Wed 03 Dec 2014 01:10:17 AM JST
crsd",                                                                                
* Wed 03 Dec 2014 01:10:17 AM JST
crsd",                                                                                 
* Wed 03 Dec 2014 01:10:17 AM JST
crsd",                                                                                  
* Wed 03 Dec 2014 01:10:17 AM JST
crsd",                                                                                   
* Wed 03 Dec 2014 01:10:18 AM JST
crsd",                                                                                    
* Wed 03 Dec 2014 01:10:18 AM JST
crsd",                                                                                     
* Wed 03 Dec 2014 01:10:18 AM JST
crsd",                                                                                      
* Wed 03 Dec 2014 01:10:18 AM JST
crsd",                                                                                       
* Wed 03 Dec 2014 01:10:18 AM JST
crsd",                                                                                        
* Wed 03 Dec 2014 01:10:18 AM JST
crsd",                                                                                         
* Wed 03 Dec 2014 01:10:18 AM JST
crsd",                                                                                          
* Wed 03 Dec 2014 01:10:19 AM JST
crsd",                                                                                           
* Wed 03 Dec 2014 01:10:19 AM JST
crsd",                                                                                            
* Wed 03 Dec 2014 01:10:19 AM JST
crsd",                                                                                             
* Wed 03 Dec 2014 01:10:20 AM JST
sgi-                                                      
* Wed 03 Dec 2014 01:10:20 AM JST
17001: " 
* Wed 03 Dec 2014 01:10:20 AM JST
cmsd",                   
* Wed 03 Dec 2014 01:10:20 AM JST
sgi-  
* Wed 03 Dec 2014 01:10:20 AM JST
17001: "  
* Wed 03 Dec 2014 01:10:20 AM JST
cmsd",                    
* Wed 03 Dec 2014 01:10:21 AM JST
sgi-   
* Wed 03 Dec 2014 01:10:21 AM JST
17001: "   
* Wed 03 Dec 2014 01:10:21 AM JST
cmsd",                     
* Wed 03 Dec 2014 01:10:21 AM JST
sgi-    
* Wed 03 Dec 2014 01:10:21 AM JST
17001: "    
* Wed 03 Dec 2014 01:10:21 AM JST
cmsd",                      
* Wed 03 Dec 2014 01:10:22 AM JST
sgi-     
* Wed 03 Dec 2014 01:10:22 AM JST
17001: "     
* Wed 03 Dec 2014 01:10:22 AM JST
cmsd",                       
* Wed 03 Dec 2014 01:10:22 AM JST
sgi-      
* Wed 03 Dec 2014 01:10:22 AM JST
17001: "      
* Wed 03 Dec 2014 01:10:22 AM JST
cmsd",                        
* Wed 03 Dec 2014 01:10:23 AM JST
sgi-       
* Wed 03 Dec 2014 01:10:23 AM JST
17001: "       
* Wed 03 Dec 2014 01:10:23 AM JST
cmsd",                         
* Wed 03 Dec 2014 01:10:23 AM JST
sgi-        
* Wed 03 Dec 2014 01:10:23 AM JST
17001: "        
* Wed 03 Dec 2014 01:10:23 AM JST
cmsd",                          
* Wed 03 Dec 2014 01:10:23 AM JST
sgi-         
* Wed 03 Dec 2014 01:10:24 AM JST
17001: "         
* Wed 03 Dec 2014 01:10:24 AM JST
cmsd",                           
* Wed 03 Dec 2014 01:10:24 AM JST
sgi-          
* Wed 03 Dec 2014 01:10:24 AM JST
17001: "          
* Wed 03 Dec 2014 01:10:25 AM JST
cmsd",                            
* Wed 03 Dec 2014 01:10:25 AM JST
sgi-           
* Wed 03 Dec 2014 01:10:25 AM JST
17001: "           
* Wed 03 Dec 2014 01:10:25 AM JST
cmsd",                             
* Wed 03 Dec 2014 01:10:25 AM JST
sgi-            
* Wed 03 Dec 2014 01:10:25 AM JST
17001: "            
* Wed 03 Dec 2014 01:10:26 AM JST
cmsd",                              
* Wed 03 Dec 2014 01:10:26 AM JST
sgi-             
* Wed 03 Dec 2014 01:10:26 AM JST
17001: "             
* Wed 03 Dec 2014 01:10:26 AM JST
cmsd",                               
* Wed 03 Dec 2014 01:10:26 AM JST
sgi-              
* Wed 03 Dec 2014 01:10:26 AM JST
17001: "              
* Wed 03 Dec 2014 01:10:27 AM JST
cmsd",                                
* Wed 03 Dec 2014 01:10:27 AM JST
sgi-               
* Wed 03 Dec 2014 01:10:27 AM JST
17001: "               
* Wed 03 Dec 2014 01:10:27 AM JST
cmsd",                                 
* Wed 03 Dec 2014 01:10:27 AM JST
sgi-                
* Wed 03 Dec 2014 01:10:27 AM JST
17001: "                
* Wed 03 Dec 2014 01:10:27 AM JST
cmsd",                                  
* Wed 03 Dec 2014 01:10:28 AM JST
sgi-                 
* Wed 03 Dec 2014 01:10:28 AM JST
17001: "                 
* Wed 03 Dec 2014 01:10:28 AM JST
cmsd",                                   
* Wed 03 Dec 2014 01:10:28 AM JST
sgi-                  
* Wed 03 Dec 2014 01:10:28 AM JST
17001: "                  
* Wed 03 Dec 2014 01:10:28 AM JST
cmsd",                                    
* Wed 03 Dec 2014 01:10:29 AM JST
sgi-                   
* Wed 03 Dec 2014 01:10:29 AM JST
17001: "                   
* Wed 03 Dec 2014 01:10:29 AM JST
cmsd",                                     
* Wed 03 Dec 2014 01:10:29 AM JST
sgi-                    
* Wed 03 Dec 2014 01:10:29 AM JST
17001: "                    
* Wed 03 Dec 2014 01:10:30 AM JST
cmsd",                                      
* Wed 03 Dec 2014 01:10:30 AM JST
sgi-                     
* Wed 03 Dec 2014 01:10:30 AM JST
17001: "                     
* Wed 03 Dec 2014 01:10:30 AM JST
cmsd",                                       
* Wed 03 Dec 2014 01:10:31 AM JST
sgi-                      
* Wed 03 Dec 2014 01:10:31 AM JST
17001: "                      
* Wed 03 Dec 2014 01:10:31 AM JST
cmsd",                                        
* Wed 03 Dec 2014 01:10:31 AM JST
sgi-                       
* Wed 03 Dec 2014 01:10:31 AM JST
17001: "                       
* Wed 03 Dec 2014 01:10:31 AM JST
cmsd",                                         
* Wed 03 Dec 2014 01:10:31 AM JST
sgi-                        
* Wed 03 Dec 2014 01:10:32 AM JST
17001: "                        
* Wed 03 Dec 2014 01:10:32 AM JST
cmsd",                                          
* Wed 03 Dec 2014 01:10:32 AM JST
sgi-                         
* Wed 03 Dec 2014 01:10:32 AM JST
17001: "                         
* Wed 03 Dec 2014 01:10:33 AM JST
cmsd",                                           
* Wed 03 Dec 2014 01:10:33 AM JST
sgi-                          
* Wed 03 Dec 2014 01:10:33 AM JST
17001: "                          
* Wed 03 Dec 2014 01:10:33 AM JST
cmsd",                                            
* Wed 03 Dec 2014 01:10:33 AM JST
sgi-                           
* Wed 03 Dec 2014 01:10:33 AM JST
17001: "                           
* Wed 03 Dec 2014 01:10:33 AM JST
cmsd",                                             
* Wed 03 Dec 2014 01:10:34 AM JST
sgi-                            
* Wed 03 Dec 2014 01:10:34 AM JST
17001: "                            
* Wed 03 Dec 2014 01:10:34 AM JST
cmsd",                                              
* Wed 03 Dec 2014 01:10:34 AM JST
sgi-                             
* Wed 03 Dec 2014 01:10:34 AM JST
17001: "                             
* Wed 03 Dec 2014 01:10:34 AM JST
cmsd",                                               
* Wed 03 Dec 2014 01:10:35 AM JST
sgi-                              
* Wed 03 Dec 2014 01:10:35 AM JST
17001: "                              
* Wed 03 Dec 2014 01:10:35 AM JST
cmsd",                                                
* Wed 03 Dec 2014 01:10:35 AM JST
sgi-                               
* Wed 03 Dec 2014 01:10:36 AM JST
17001: "                               
* Wed 03 Dec 2014 01:10:36 AM JST
cmsd",                                                 
* Wed 03 Dec 2014 01:10:36 AM JST
sgi-                                
* Wed 03 Dec 2014 01:10:36 AM JST
17001: "                                
* Wed 03 Dec 2014 01:10:36 AM JST
cmsd",                                                  
* Wed 03 Dec 2014 01:10:36 AM JST
sgi-                                 
* Wed 03 Dec 2014 01:10:37 AM JST
17001: "                                 
* Wed 03 Dec 2014 01:10:37 AM JST
cmsd",                                                   
* Wed 03 Dec 2014 01:10:37 AM JST
sgi-                                  
* Wed 03 Dec 2014 01:10:37 AM JST
17001: "                                  
* Wed 03 Dec 2014 01:10:37 AM JST
cmsd",                                                    
* Wed 03 Dec 2014 01:10:37 AM JST
sgi-                                   
* Wed 03 Dec 2014 01:10:37 AM JST
17001: "                                   
* Wed 03 Dec 2014 01:10:37 AM JST
cmsd",                                                     
* Wed 03 Dec 2014 01:10:38 AM JST
sgi-                                    
* Wed 03 Dec 2014 01:10:38 AM JST
17001: "                                    
* Wed 03 Dec 2014 01:10:38 AM JST
cmsd",                                                      
* Wed 03 Dec 2014 01:10:38 AM JST
sgi-                                     
* Wed 03 Dec 2014 01:10:38 AM JST
17001: "                                     
* Wed 03 Dec 2014 01:10:38 AM JST
sgi-                                      
* Wed 03 Dec 2014 01:10:39 AM JST
17001: "                                      
* Wed 03 Dec 2014 01:10:39 AM JST
sgi-                                       
* Wed 03 Dec 2014 01:10:39 AM JST
17001: "                                       
* Wed 03 Dec 2014 01:10:39 AM JST
sgi-                                        
* Wed 03 Dec 2014 01:10:39 AM JST
17001: "                                        
* Wed 03 Dec 2014 01:10:40 AM JST
sgi-                                         
* Wed 03 Dec 2014 01:10:40 AM JST
17001: "                                         
* Wed 03 Dec 2014 01:10:40 AM JST
sgi-                                          
* Wed 03 Dec 2014 01:10:40 AM JST
17001: "                                          
* Wed 03 Dec 2014 01:10:40 AM JST
sgi-                                           
* Wed 03 Dec 2014 01:10:41 AM JST
17001: "                                           
* Wed 03 Dec 2014 01:10:41 AM JST
sgi-                                            
* Wed 03 Dec 2014 01:10:41 AM JST
17001: "                                            
* Wed 03 Dec 2014 01:10:41 AM JST
sgi-                                             
* Wed 03 Dec 2014 01:10:41 AM JST
17001: "                                             
* Wed 03 Dec 2014 01:10:41 AM JST
sgi-                                              
* Wed 03 Dec 2014 01:10:41 AM JST
17001: "                                              
* Wed 03 Dec 2014 01:10:42 AM JST
sgi-                                               
* Wed 03 Dec 2014 01:10:42 AM JST
17001: "                                               
* Wed 03 Dec 2014 01:10:42 AM JST
sgi-                                                
* Wed 03 Dec 2014 01:10:42 AM JST
17001: "                                                
* Wed 03 Dec 2014 01:10:42 AM JST
sgi-                                                 
* Wed 03 Dec 2014 01:10:42 AM JST
17001: "                                                 
* Wed 03 Dec 2014 01:10:43 AM JST
sgi-                                                  
* Wed 03 Dec 2014 01:10:43 AM JST
17001: "                                                  
* Wed 03 Dec 2014 01:10:43 AM JST
sgi-                                                   
* Wed 03 Dec 2014 01:10:43 AM JST
17001: "                                                   
* Wed 03 Dec 2014 01:10:43 AM JST
sgi-                                                    
* Wed 03 Dec 2014 01:10:43 AM JST
17001: "                                                    
* Wed 03 Dec 2014 01:10:44 AM JST
sgi-                                                     
* Wed 03 Dec 2014 01:10:44 AM JST
17001: "
* Wed 03 Dec 2014 01:10:44 AM JST
17001: " 
* Wed 03 Dec 2014 01:10:44 AM JST
17001: "  
* Wed 03 Dec 2014 01:10:45 AM JST
17001: "   
* Wed 03 Dec 2014 01:10:45 AM JST
17001: "    
* Wed 03 Dec 2014 01:10:45 AM JST
17001: "     
* Wed 03 Dec 2014 01:10:45 AM JST
17001: "      
* Wed 03 Dec 2014 01:10:46 AM JST
17001: "       
* Wed 03 Dec 2014 01:10:46 AM JST
17001: "        
* Wed 03 Dec 2014 01:10:46 AM JST
17001: "         
* Wed 03 Dec 2014 01:10:46 AM JST
17001: "          
* Wed 03 Dec 2014 01:10:46 AM JST
17001: "           
* Wed 03 Dec 2014 01:10:46 AM JST
17001: "            
* Wed 03 Dec 2014 01:10:46 AM JST
17001: "             
* Wed 03 Dec 2014 01:10:47 AM JST
17001: "              
* Wed 03 Dec 2014 01:10:47 AM JST
17001: "               
* Wed 03 Dec 2014 01:10:47 AM JST
17001: "                
* Wed 03 Dec 2014 01:10:47 AM JST
17001: "                 
* Wed 03 Dec 2014 01:10:47 AM JST
17001: "                  
* Wed 03 Dec 2014 01:10:47 AM JST
17001: "                   
* Wed 03 Dec 2014 01:10:48 AM JST
17001: "                    
* Wed 03 Dec 2014 01:10:48 AM JST
17001: "                     
* Wed 03 Dec 2014 01:10:48 AM JST
17001: "                      
* Wed 03 Dec 2014 01:10:48 AM JST
17001: "                       
* Wed 03 Dec 2014 01:10:48 AM JST
17001: "                        
* Wed 03 Dec 2014 01:10:48 AM JST
17001: "                         
* Wed 03 Dec 2014 01:10:49 AM JST
17001: "                          
* Wed 03 Dec 2014 01:10:49 AM JST
17001: "                           
* Wed 03 Dec 2014 01:10:49 AM JST
17001: "                            
* Wed 03 Dec 2014 01:10:49 AM JST
17001: "                             
* Wed 03 Dec 2014 01:10:49 AM JST
17001: "                              
* Wed 03 Dec 2014 01:10:49 AM JST
17001: "                               
* Wed 03 Dec 2014 01:10:50 AM JST
17001: "                                
* Wed 03 Dec 2014 01:10:50 AM JST
17001: "                                 
* Wed 03 Dec 2014 01:10:50 AM JST
17001: "                                  
* Wed 03 Dec 2014 01:10:50 AM JST
17001: "                                   
* Wed 03 Dec 2014 01:10:50 AM JST
17001: "                                    
* Wed 03 Dec 2014 01:10:51 AM JST
17001: "                                     
* Wed 03 Dec 2014 01:10:51 AM JST
17001: "                                      
* Wed 03 Dec 2014 01:10:51 AM JST
17001: "                                       
* Wed 03 Dec 2014 01:10:51 AM JST
17001: "                                        
* Wed 03 Dec 2014 01:10:51 AM JST
17001: "                                         
* Wed 03 Dec 2014 01:10:51 AM JST
17001: "                                          
* Wed 03 Dec 2014 01:10:51 AM JST
17001: "                                           
* Wed 03 Dec 2014 01:10:52 AM JST
17001: "                                            
* Wed 03 Dec 2014 01:10:52 AM JST
17001: "                                             
* Wed 03 Dec 2014 01:10:52 AM JST
17001: "                                              
* Wed 03 Dec 2014 01:10:52 AM JST
17001: "                                               
* Wed 03 Dec 2014 01:10:52 AM JST
17001: "                                                
* Wed 03 Dec 2014 01:10:52 AM JST
17001: "                                                 
* Wed 03 Dec 2014 01:10:52 AM JST
17001: "                                                  
* Wed 03 Dec 2014 01:10:52 AM JST
17001: "                                                   
* Wed 03 Dec 2014 01:10:53 AM JST
17001: "                                                    
* Wed 03 Dec 2014 01:10:53 AM JST
17001: "                                                     
* Wed 03 Dec 2014 01:10:53 AM JST
17001: "                                                      
* Wed 03 Dec 2014 01:10:53 AM JST
17001: "                                                       
* Wed 03 Dec 2014 01:10:53 AM JST
17001: "                                                        
* Wed 03 Dec 2014 01:10:53 AM JST
17001: "                                                         
* Wed 03 Dec 2014 01:10:53 AM JST
17001: "                                                          
* Wed 03 Dec 2014 01:10:54 AM JST
17001: "                                                           
* Wed 03 Dec 2014 01:10:54 AM JST
17001: "                                                            
* Wed 03 Dec 2014 01:10:54 AM JST
17001: "                                                             
* Wed 03 Dec 2014 01:10:54 AM JST
17001: "                                                              
* Wed 03 Dec 2014 01:10:54 AM JST
17001: "                                                               
* Wed 03 Dec 2014 01:10:55 AM JST
17001: "                                                                
* Wed 03 Dec 2014 01:10:55 AM JST
17001: "                                                                 
* Wed 03 Dec 2014 01:10:55 AM JST
17001: "                                                                  
* Wed 03 Dec 2014 01:10:55 AM JST
17001: "                                                                   
* Wed 03 Dec 2014 01:10:55 AM JST
17001: "                                                                    
* Wed 03 Dec 2014 01:10:55 AM JST
17001: "                                                                     
* Wed 03 Dec 2014 01:10:55 AM JST
17001: "                                                                      
* Wed 03 Dec 2014 01:10:55 AM JST
17001: "                                                                       
* Wed 03 Dec 2014 01:10:56 AM JST
17001: "                                                                        
* Wed 03 Dec 2014 01:10:56 AM JST
17001: "                                                                         
* Wed 03 Dec 2014 01:10:56 AM JST
17001: "                                                                          
* Wed 03 Dec 2014 01:10:56 AM JST
17001: "                                                                           
* Wed 03 Dec 2014 01:10:56 AM JST
17001: "                                                                            
* Wed 03 Dec 2014 01:10:56 AM JST
17001: "                                                                             
* Wed 03 Dec 2014 01:10:56 AM JST
17001: "                                                                              
* Wed 03 Dec 2014 01:10:57 AM JST
17001: "                                                                               
* Wed 03 Dec 2014 01:10:57 AM JST
17001: "                                                                                
* Wed 03 Dec 2014 01:10:57 AM JST
17001: "                                                                                 
* Wed 03 Dec 2014 01:10:57 AM JST
17001: "                                                                                  
* Wed 03 Dec 2014 01:10:57 AM JST
17001: "                                                                                   
* Wed 03 Dec 2014 01:10:57 AM JST
17001: "                                                                                    
* Wed 03 Dec 2014 01:10:57 AM JST
17001: "                                                                                     
* Wed 03 Dec 2014 01:10:57 AM JST
17001: "                                                                                      
* Wed 03 Dec 2014 01:10:58 AM JST
17001: "                                                                                       
* Wed 03 Dec 2014 01:10:58 AM JST
17001: "                                                                                        
* Wed 03 Dec 2014 01:10:58 AM JST
17001: "                                                                                         
* Wed 03 Dec 2014 01:10:59 AM JST
17001: "                                                                                          
* Wed 03 Dec 2014 01:10:59 AM JST
17001: "                                                                                           
* Wed 03 Dec 2014 01:10:59 AM JST
17002: "
* Wed 03 Dec 2014 01:10:59 AM JST
gcd", 
* Wed 03 Dec 2014 01:10:59 AM JST
cmsd",
* Wed 03 Dec 2014 01:10:59 AM JST
cmsd", 
* Wed 03 Dec 2014 01:10:59 AM JST
cmsd",  
* Wed 03 Dec 2014 01:10:59 AM JST
cmsd",   
* Wed 03 Dec 2014 01:11:00 AM JST
cmsd",    
* Wed 03 Dec 2014 01:11:00 AM JST
cmsd",     
* Wed 03 Dec 2014 01:11:00 AM JST
cmsd",      
* Wed 03 Dec 2014 01:11:00 AM JST
cmsd",       
* Wed 03 Dec 2014 01:11:00 AM JST
cmsd",        
* Wed 03 Dec 2014 01:11:00 AM JST
cmsd",         
* Wed 03 Dec 2014 01:11:00 AM JST
cmsd",          
* Wed 03 Dec 2014 01:11:01 AM JST
cmsd",           
* Wed 03 Dec 2014 01:11:01 AM JST
cmsd",            
* Wed 03 Dec 2014 01:11:01 AM JST
cmsd",             
* Wed 03 Dec 2014 01:11:01 AM JST
cmsd",              
* Wed 03 Dec 2014 01:11:01 AM JST
cmsd",               
* Wed 03 Dec 2014 01:11:01 AM JST
cmsd",                
* Wed 03 Dec 2014 01:11:01 AM JST
cmsd",                 
* Wed 03 Dec 2014 01:11:01 AM JST
cmsd",                  
* Wed 03 Dec 2014 01:11:02 AM JST
cmsd",                   
* Wed 03 Dec 2014 01:11:02 AM JST
cmsd",                    
* Wed 03 Dec 2014 01:11:02 AM JST
cmsd",                     
* Wed 03 Dec 2014 01:11:02 AM JST
cmsd",                      
* Wed 03 Dec 2014 01:11:02 AM JST
cmsd",                       
* Wed 03 Dec 2014 01:11:03 AM JST
cmsd",                        
* Wed 03 Dec 2014 01:11:03 AM JST
cmsd",                         
* Wed 03 Dec 2014 01:11:03 AM JST
cmsd",                          
* Wed 03 Dec 2014 01:11:03 AM JST
cmsd",                           
* Wed 03 Dec 2014 01:11:03 AM JST
cmsd",                            
* Wed 03 Dec 2014 01:11:03 AM JST
cmsd",                             
* Wed 03 Dec 2014 01:11:03 AM JST
cmsd",                              
* Wed 03 Dec 2014 01:11:03 AM JST
cmsd",                               
* Wed 03 Dec 2014 01:11:04 AM JST
cmsd",                                
* Wed 03 Dec 2014 01:11:04 AM JST
cmsd",                                 
* Wed 03 Dec 2014 01:11:04 AM JST
cmsd",                                  
* Wed 03 Dec 2014 01:11:04 AM JST
cmsd",                                   
* Wed 03 Dec 2014 01:11:04 AM JST
cmsd",                                    
* Wed 03 Dec 2014 01:11:04 AM JST
cmsd",                                     
* Wed 03 Dec 2014 01:11:04 AM JST
cmsd",                                      
* Wed 03 Dec 2014 01:11:04 AM JST
cmsd",                                       
* Wed 03 Dec 2014 01:11:05 AM JST
cmsd",                                        
* Wed 03 Dec 2014 01:11:05 AM JST
cmsd",                                         
* Wed 03 Dec 2014 01:11:05 AM JST
cmsd",                                          
* Wed 03 Dec 2014 01:11:05 AM JST
cmsd",                                           
* Wed 03 Dec 2014 01:11:05 AM JST
cmsd",                                            
* Wed 03 Dec 2014 01:11:05 AM JST
cmsd",                                             
* Wed 03 Dec 2014 01:11:05 AM JST
cmsd",                                              
* Wed 03 Dec 2014 01:11:06 AM JST
cmsd",                                               
* Wed 03 Dec 2014 01:11:06 AM JST
cmsd",                                                
* Wed 03 Dec 2014 01:11:06 AM JST
cmsd",                                                 
* Wed 03 Dec 2014 01:11:06 AM JST
cmsd",                                                  
* Wed 03 Dec 2014 01:11:06 AM JST
cmsd",                                                   
* Wed 03 Dec 2014 01:11:06 AM JST
cmsd",                                                    
* Wed 03 Dec 2014 01:11:07 AM JST
cmsd",                                                     
* Wed 03 Dec 2014 01:11:07 AM JST
cmsd",                                                      
* Wed 03 Dec 2014 01:11:07 AM JST
cmsd",                                                       
* Wed 03 Dec 2014 01:11:07 AM JST
cmsd",                                                        
* Wed 03 Dec 2014 01:11:07 AM JST
cmsd",                                                         
* Wed 03 Dec 2014 01:11:07 AM JST
cmsd",                                                          
* Wed 03 Dec 2014 01:11:07 AM JST
cmsd",                                                           
* Wed 03 Dec 2014 01:11:08 AM JST
cmsd",                                                            
* Wed 03 Dec 2014 01:11:08 AM JST
cmsd",                                                             
* Wed 03 Dec 2014 01:11:08 AM JST
cmsd",                                                              
* Wed 03 Dec 2014 01:11:08 AM JST
cmsd",                                                               
* Wed 03 Dec 2014 01:11:08 AM JST
cmsd",                                                                
* Wed 03 Dec 2014 01:11:08 AM JST
cmsd",                                                                 
* Wed 03 Dec 2014 01:11:08 AM JST
cmsd",                                                                  
* Wed 03 Dec 2014 01:11:08 AM JST
cmsd",                                                                   
* Wed 03 Dec 2014 01:11:09 AM JST
cmsd",                                                                    
* Wed 03 Dec 2014 01:11:09 AM JST
cmsd",                                                                     
* Wed 03 Dec 2014 01:11:09 AM JST
cmsd",                                                                      
* Wed 03 Dec 2014 01:11:09 AM JST
cmsd",                                                                       
* Wed 03 Dec 2014 01:11:09 AM JST
cmsd",                                                                        
* Wed 03 Dec 2014 01:11:09 AM JST
cmsd",                                                                         
* Wed 03 Dec 2014 01:11:09 AM JST
cmsd",                                                                          
* Wed 03 Dec 2014 01:11:09 AM JST
cmsd",                                                                           
* Wed 03 Dec 2014 01:11:10 AM JST
cmsd",                                                                            
* Wed 03 Dec 2014 01:11:10 AM JST
cmsd",                                                                             
* Wed 03 Dec 2014 01:11:10 AM JST
cmsd",                                                                              
* Wed 03 Dec 2014 01:11:10 AM JST
cmsd",                                                                               
* Wed 03 Dec 2014 01:11:10 AM JST
cmsd",                                                                                
* Wed 03 Dec 2014 01:11:11 AM JST
cmsd",                                                                                 
* Wed 03 Dec 2014 01:11:11 AM JST
cmsd",                                                                                  
* Wed 03 Dec 2014 01:11:11 AM JST
cmsd",                                                                                   
* Wed 03 Dec 2014 01:11:11 AM JST
cmsd",                                                                                    
* Wed 03 Dec 2014 01:11:11 AM JST
cmsd",                                                                                     
* Wed 03 Dec 2014 01:11:11 AM JST
cmsd",                                                                                      
* Wed 03 Dec 2014 01:11:12 AM JST
cmsd",                                                                                       
* Wed 03 Dec 2014 01:11:12 AM JST
cmsd",                                                                                        
* Wed 03 Dec 2014 01:11:12 AM JST
cmsd",                                                                                         
* Wed 03 Dec 2014 01:11:12 AM JST
cmsd",                                                                                          
* Wed 03 Dec 2014 01:11:12 AM JST
cmsd",                                                                                           
* Wed 03 Dec 2014 01:11:12 AM JST
cmsd",                                                                                            
* Wed 03 Dec 2014 01:11:12 AM JST
cmsd",                                                                                             
* Wed 03 Dec 2014 01:11:12 AM JST
crsd",
* Wed 03 Dec 2014 01:11:13 AM JST
17003: " 
* Wed 03 Dec 2014 01:11:13 AM JST
sgi-                                                       
* Wed 03 Dec 2014 01:11:13 AM JST
15345: "  
* Wed 03 Dec 2014 01:11:13 AM JST
xpilot",                      
* Wed 03 Dec 2014 01:11:13 AM JST
15345: "   
* Wed 03 Dec 2014 01:11:13 AM JST
xpilot",                       
* Wed 03 Dec 2014 01:11:13 AM JST
15345: "    
* Wed 03 Dec 2014 01:11:14 AM JST
xpilot",                        
* Wed 03 Dec 2014 01:11:14 AM JST
15345: "     
* Wed 03 Dec 2014 01:11:14 AM JST
xpilot",                         
* Wed 03 Dec 2014 01:11:14 AM JST
15345: "      
* Wed 03 Dec 2014 01:11:14 AM JST
xpilot",                          
* Wed 03 Dec 2014 01:11:14 AM JST
15345: "       
* Wed 03 Dec 2014 01:11:15 AM JST
xpilot",                           
* Wed 03 Dec 2014 01:11:15 AM JST
15345: "        
* Wed 03 Dec 2014 01:11:15 AM JST
xpilot",                            
* Wed 03 Dec 2014 01:11:15 AM JST
15345: "         
* Wed 03 Dec 2014 01:11:15 AM JST
xpilot",                             
* Wed 03 Dec 2014 01:11:15 AM JST
15345: "          
* Wed 03 Dec 2014 01:11:15 AM JST
xpilot",                              
* Wed 03 Dec 2014 01:11:15 AM JST
15345: "           
* Wed 03 Dec 2014 01:11:16 AM JST
xpilot",                               
* Wed 03 Dec 2014 01:11:16 AM JST
15345: "            
* Wed 03 Dec 2014 01:11:16 AM JST
xpilot",                                
* Wed 03 Dec 2014 01:11:16 AM JST
15345: "             
* Wed 03 Dec 2014 01:11:16 AM JST
xpilot",                                 
* Wed 03 Dec 2014 01:11:16 AM JST
15345: "              
* Wed 03 Dec 2014 01:11:16 AM JST
xpilot",                                  
* Wed 03 Dec 2014 01:11:17 AM JST
15345: "               
* Wed 03 Dec 2014 01:11:17 AM JST
xpilot",                                   
* Wed 03 Dec 2014 01:11:17 AM JST
15345: "                
* Wed 03 Dec 2014 01:11:17 AM JST
xpilot",                                    
* Wed 03 Dec 2014 01:11:17 AM JST
15345: "                 
* Wed 03 Dec 2014 01:11:17 AM JST
xpilot",                                     
* Wed 03 Dec 2014 01:11:17 AM JST
15345: "                  
* Wed 03 Dec 2014 01:11:17 AM JST
xpilot",                                      
* Wed 03 Dec 2014 01:11:18 AM JST
15345: "                   
* Wed 03 Dec 2014 01:11:18 AM JST
xpilot",                                       
* Wed 03 Dec 2014 01:11:18 AM JST
15345: "                    
* Wed 03 Dec 2014 01:11:18 AM JST
xpilot",                                        
* Wed 03 Dec 2014 01:11:18 AM JST
15345: "                     
* Wed 03 Dec 2014 01:11:19 AM JST
xpilot",                                         
* Wed 03 Dec 2014 01:11:19 AM JST
15345: "                      
* Wed 03 Dec 2014 01:11:19 AM JST
xpilot",                                          
* Wed 03 Dec 2014 01:11:19 AM JST
15345: "                       
* Wed 03 Dec 2014 01:11:19 AM JST
xpilot",                                           
* Wed 03 Dec 2014 01:11:19 AM JST
15345: "                        
* Wed 03 Dec 2014 01:11:19 AM JST
xpilot",                                            
* Wed 03 Dec 2014 01:11:19 AM JST
15345: "                         
* Wed 03 Dec 2014 01:11:20 AM JST
xpilot",                                             
* Wed 03 Dec 2014 01:11:20 AM JST
15345: "                          
* Wed 03 Dec 2014 01:11:20 AM JST
xpilot",                                              
* Wed 03 Dec 2014 01:11:20 AM JST
15345: "                           
* Wed 03 Dec 2014 01:11:20 AM JST
xpilot",                                               
* Wed 03 Dec 2014 01:11:20 AM JST
15345: "                            
* Wed 03 Dec 2014 01:11:20 AM JST
xpilot",                                                
* Wed 03 Dec 2014 01:11:20 AM JST
15345: "                             
* Wed 03 Dec 2014 01:11:21 AM JST
xpilot",                                                 
* Wed 03 Dec 2014 01:11:21 AM JST
15345: "                              
* Wed 03 Dec 2014 01:11:21 AM JST
xpilot",                                                  
* Wed 03 Dec 2014 01:11:21 AM JST
15345: "                               
* Wed 03 Dec 2014 01:11:21 AM JST
xpilot",                                                   
* Wed 03 Dec 2014 01:11:21 AM JST
15345: "                                
* Wed 03 Dec 2014 01:11:21 AM JST
xpilot",                                                    
* Wed 03 Dec 2014 01:11:22 AM JST
15345: "                                 
* Wed 03 Dec 2014 01:11:22 AM JST
xpilot",
* Wed 03 Dec 2014 01:11:22 AM JST
xpilot", 
* Wed 03 Dec 2014 01:11:22 AM JST
xpilot",  
* Wed 03 Dec 2014 01:11:22 AM JST
xpilot",   
* Wed 03 Dec 2014 01:11:23 AM JST
xpilot",    
* Wed 03 Dec 2014 01:11:23 AM JST
xpilot",     
* Wed 03 Dec 2014 01:11:23 AM JST
xpilot",      
* Wed 03 Dec 2014 01:11:23 AM JST
xpilot",       
* Wed 03 Dec 2014 01:11:23 AM JST
xpilot",        
* Wed 03 Dec 2014 01:11:23 AM JST
xpilot",         
* Wed 03 Dec 2014 01:11:23 AM JST
xpilot",          
* Wed 03 Dec 2014 01:11:23 AM JST
xpilot",           
* Wed 03 Dec 2014 01:11:24 AM JST
xpilot",            
* Wed 03 Dec 2014 01:11:24 AM JST
xpilot",             
* Wed 03 Dec 2014 01:11:24 AM JST
xpilot",              
* Wed 03 Dec 2014 01:11:24 AM JST
xpilot",               
* Wed 03 Dec 2014 01:11:24 AM JST
xpilot",                
* Wed 03 Dec 2014 01:11:25 AM JST
xpilot",                 
* Wed 03 Dec 2014 01:11:25 AM JST
xpilot",                  
* Wed 03 Dec 2014 01:11:25 AM JST
xpilot",                   
* Wed 03 Dec 2014 01:11:25 AM JST
xpilot",                    
* Wed 03 Dec 2014 01:11:25 AM JST
xpilot",                     
* Wed 03 Dec 2014 01:11:25 AM JST
xpilot",                      
* Wed 03 Dec 2014 01:11:25 AM JST
xpilot",                       
* Wed 03 Dec 2014 01:11:25 AM JST
xpilot",                        
* Wed 03 Dec 2014 01:11:26 AM JST
xpilot",                         
* Wed 03 Dec 2014 01:11:26 AM JST
xpilot",                          
* Wed 03 Dec 2014 01:11:26 AM JST
xpilot",                           
* Wed 03 Dec 2014 01:11:26 AM JST
xpilot",                            
* Wed 03 Dec 2014 01:11:26 AM JST
xpilot",                             
* Wed 03 Dec 2014 01:11:26 AM JST
xpilot",                              
* Wed 03 Dec 2014 01:11:26 AM JST
xpilot",                               
* Wed 03 Dec 2014 01:11:27 AM JST
xpilot",                                
* Wed 03 Dec 2014 01:11:27 AM JST
xpilot",                                 
* Wed 03 Dec 2014 01:11:27 AM JST
xpilot",                                  
* Wed 03 Dec 2014 01:11:27 AM JST
xpilot",                                   
* Wed 03 Dec 2014 01:11:27 AM JST
xpilot",                                    
* Wed 03 Dec 2014 01:11:27 AM JST
xpilot",                                     
* Wed 03 Dec 2014 01:11:28 AM JST
xpilot",                                      
* Wed 03 Dec 2014 01:11:28 AM JST
xpilot",                                       
* Wed 03 Dec 2014 01:11:28 AM JST
xpilot",                                        
* Wed 03 Dec 2014 01:11:28 AM JST
xpilot",                                         
* Wed 03 Dec 2014 01:11:28 AM JST
xpilot",                                          
* Wed 03 Dec 2014 01:11:28 AM JST
xpilot",                                           
* Wed 03 Dec 2014 01:11:28 AM JST
xpilot",                                            
* Wed 03 Dec 2014 01:11:29 AM JST
xpilot",                                             
* Wed 03 Dec 2014 01:11:29 AM JST
xpilot",                                              
* Wed 03 Dec 2014 01:11:29 AM JST
xpilot",                                               
* Wed 03 Dec 2014 01:11:29 AM JST
xpilot",                                                
* Wed 03 Dec 2014 01:11:29 AM JST
xpilot",                                                 
* Wed 03 Dec 2014 01:11:29 AM JST
xpilot",                                                  
* Wed 03 Dec 2014 01:11:29 AM JST
xpilot",                                                   
* Wed 03 Dec 2014 01:11:29 AM JST
xpilot",                                                    
* Wed 03 Dec 2014 01:11:30 AM JST
xpilot",                                                     
* Wed 03 Dec 2014 01:11:30 AM JST
xpilot",                                                      
* Wed 03 Dec 2014 01:11:30 AM JST
xpilot",                                                       
* Wed 03 Dec 2014 01:11:30 AM JST
xpilot",                                                        
* Wed 03 Dec 2014 01:11:30 AM JST
xpilot",                                                         
* Wed 03 Dec 2014 01:11:30 AM JST
xpilot",                                                          
* Wed 03 Dec 2014 01:11:30 AM JST
xpilot",                                                           
* Wed 03 Dec 2014 01:11:30 AM JST
xpilot",                                                            
* Wed 03 Dec 2014 01:11:31 AM JST
xpilot",                                                             
* Wed 03 Dec 2014 01:11:31 AM JST
xpilot",                                                              
* Wed 03 Dec 2014 01:11:31 AM JST
xpilot",                                                               
* Wed 03 Dec 2014 01:11:31 AM JST
xpilot",                                                                
* Wed 03 Dec 2014 01:11:31 AM JST
xpilot",                                                                 
* Wed 03 Dec 2014 01:11:32 AM JST
xpilot",                                                                  
* Wed 03 Dec 2014 01:11:32 AM JST
xpilot",                                                                   
* Wed 03 Dec 2014 01:11:32 AM JST
xpilot",                                                                    
* Wed 03 Dec 2014 01:11:32 AM JST
xpilot",                                                                     
* Wed 03 Dec 2014 01:11:32 AM JST
xpilot",                                                                      
* Wed 03 Dec 2014 01:11:32 AM JST
xpilot",                                                                       
* Wed 03 Dec 2014 01:11:32 AM JST
xpilot",                                                                        
* Wed 03 Dec 2014 01:11:32 AM JST
xpilot",                                                                         
* Wed 03 Dec 2014 01:11:33 AM JST
xpilot",                                                                          
* Wed 03 Dec 2014 01:11:33 AM JST
xpilot",                                                                           
* Wed 03 Dec 2014 01:11:33 AM JST
xpilot",                                                                            
* Wed 03 Dec 2014 01:11:33 AM JST
xpilot",                                                                             
* Wed 03 Dec 2014 01:11:33 AM JST
xpilot",                                                                              
* Wed 03 Dec 2014 01:11:33 AM JST
xpilot",                                                                               
* Wed 03 Dec 2014 01:11:33 AM JST
xpilot",                                                                                
* Wed 03 Dec 2014 01:11:34 AM JST
xpilot",                                                                                 
* Wed 03 Dec 2014 01:11:34 AM JST
xpilot",                                                                                  
* Wed 03 Dec 2014 01:11:34 AM JST
xpilot",                                                                                   
* Wed 03 Dec 2014 01:11:34 AM JST
xpilot",                                                                                    
* Wed 03 Dec 2014 01:11:34 AM JST
xpilot",                                                                                     
* Wed 03 Dec 2014 01:11:34 AM JST
xpilot",                                                                                      
* Wed 03 Dec 2014 01:11:34 AM JST
xpilot",                                                                                       
* Wed 03 Dec 2014 01:11:35 AM JST
xpilot",                                                                                        
* Wed 03 Dec 2014 01:11:35 AM JST
xpilot",                                                                                         
* Wed 03 Dec 2014 01:11:35 AM JST
xpilot",                                                                                          
* Wed 03 Dec 2014 01:11:35 AM JST
xpilot",                                                                                           
* Wed 03 Dec 2014 01:11:35 AM JST
17001: "
* Wed 03 Dec 2014 01:11:35 AM JST
cmsd",
* Wed 03 Dec 2014 01:11:36 AM JST
11201: "  
* Wed 03 Dec 2014 01:11:36 AM JST
smsqp",                       
* Wed 03 Dec 2014 01:11:36 AM JST
11201: "   
* Wed 03 Dec 2014 01:11:36 AM JST
smsqp",                        
* Wed 03 Dec 2014 01:11:36 AM JST
11201: "    
* Wed 03 Dec 2014 01:11:36 AM JST
smsqp",                         
* Wed 03 Dec 2014 01:11:36 AM JST
11201: "     
* Wed 03 Dec 2014 01:11:37 AM JST
smsqp",                          
* Wed 03 Dec 2014 01:11:37 AM JST
11201: "      
* Wed 03 Dec 2014 01:11:37 AM JST
smsqp",                           
* Wed 03 Dec 2014 01:11:37 AM JST
11201: "       
* Wed 03 Dec 2014 01:11:37 AM JST
smsqp",                            
* Wed 03 Dec 2014 01:11:37 AM JST
11201: "        
* Wed 03 Dec 2014 01:11:38 AM JST
smsqp",                             
* Wed 03 Dec 2014 01:11:38 AM JST
11201: "         
* Wed 03 Dec 2014 01:11:38 AM JST
smsqp",                              
* Wed 03 Dec 2014 01:11:38 AM JST
11201: "          
* Wed 03 Dec 2014 01:11:38 AM JST
smsqp",                               
* Wed 03 Dec 2014 01:11:38 AM JST
11201: "           
* Wed 03 Dec 2014 01:11:38 AM JST
smsqp",                                
* Wed 03 Dec 2014 01:11:39 AM JST
11201: "            
* Wed 03 Dec 2014 01:11:39 AM JST
smsqp",                                 
* Wed 03 Dec 2014 01:11:39 AM JST
11201: "             
* Wed 03 Dec 2014 01:11:39 AM JST
smsqp",                                  
* Wed 03 Dec 2014 01:11:39 AM JST
11201: "              
* Wed 03 Dec 2014 01:11:40 AM JST
smsqp",                                   
* Wed 03 Dec 2014 01:11:40 AM JST
11201: "               
* Wed 03 Dec 2014 01:11:40 AM JST
smsqp",                                    
* Wed 03 Dec 2014 01:11:40 AM JST
11201: "                
* Wed 03 Dec 2014 01:11:40 AM JST
smsqp",                                     
* Wed 03 Dec 2014 01:11:40 AM JST
11201: "                 
* Wed 03 Dec 2014 01:11:41 AM JST
smsqp",                                      
* Wed 03 Dec 2014 01:11:41 AM JST
11201: "                  
* Wed 03 Dec 2014 01:11:41 AM JST
smsqp",                                       
* Wed 03 Dec 2014 01:11:41 AM JST
11201: "                   
* Wed 03 Dec 2014 01:11:41 AM JST
smsqp",                                        
* Wed 03 Dec 2014 01:11:41 AM JST
11201: "                    
* Wed 03 Dec 2014 01:11:41 AM JST
smsqp",                                         
* Wed 03 Dec 2014 01:11:42 AM JST
11201: "                     
* Wed 03 Dec 2014 01:11:42 AM JST
smsqp",                                          
* Wed 03 Dec 2014 01:11:42 AM JST
11201: "                      
* Wed 03 Dec 2014 01:11:42 AM JST
smsqp",                                           
* Wed 03 Dec 2014 01:11:42 AM JST
11201: "                       
* Wed 03 Dec 2014 01:11:42 AM JST
smsqp",                                            
* Wed 03 Dec 2014 01:11:43 AM JST
11201: "                        
* Wed 03 Dec 2014 01:11:43 AM JST
smsqp",                                             
* Wed 03 Dec 2014 01:11:43 AM JST
11201: "                         
* Wed 03 Dec 2014 01:11:43 AM JST
smsqp",                                              
* Wed 03 Dec 2014 01:11:44 AM JST
11201: "                          
* Wed 03 Dec 2014 01:11:44 AM JST
smsqp",                                               
* Wed 03 Dec 2014 01:11:44 AM JST
11201: "                           
* Wed 03 Dec 2014 01:11:44 AM JST
smsqp",                                                
* Wed 03 Dec 2014 01:11:44 AM JST
11201: "                            
* Wed 03 Dec 2014 01:11:44 AM JST
smsqp",                                                 
* Wed 03 Dec 2014 01:11:45 AM JST
11201: "                             
* Wed 03 Dec 2014 01:11:45 AM JST
smsqp",                                                  
* Wed 03 Dec 2014 01:11:45 AM JST
11201: "                              
* Wed 03 Dec 2014 01:11:45 AM JST
smsqp",                                                   
* Wed 03 Dec 2014 01:11:45 AM JST
11201: "                               
* Wed 03 Dec 2014 01:11:45 AM JST
smsqp",                                                    
* Wed 03 Dec 2014 01:11:45 AM JST
11201: "                                
* Wed 03 Dec 2014 01:11:45 AM JST
smsqp",                                                     
* Wed 03 Dec 2014 01:11:46 AM JST
11201: "                                 
* Wed 03 Dec 2014 01:11:46 AM JST
15345: "                                  
* Wed 03 Dec 2014 01:11:46 AM JST
smsqp",
* Wed 03 Dec 2014 01:11:46 AM JST
smsqp", 
* Wed 03 Dec 2014 01:11:46 AM JST
smsqp",  
* Wed 03 Dec 2014 01:11:46 AM JST
smsqp",   
* Wed 03 Dec 2014 01:11:47 AM JST
smsqp",    
* Wed 03 Dec 2014 01:11:47 AM JST
smsqp",     
* Wed 03 Dec 2014 01:11:47 AM JST
smsqp",      
* Wed 03 Dec 2014 01:11:47 AM JST
smsqp",       
* Wed 03 Dec 2014 01:11:47 AM JST
smsqp",        
* Wed 03 Dec 2014 01:11:47 AM JST
smsqp",         
* Wed 03 Dec 2014 01:11:47 AM JST
smsqp",          
* Wed 03 Dec 2014 01:11:47 AM JST
smsqp",           
* Wed 03 Dec 2014 01:11:48 AM JST
smsqp",            
* Wed 03 Dec 2014 01:11:48 AM JST
smsqp",             
* Wed 03 Dec 2014 01:11:48 AM JST
smsqp",              
* Wed 03 Dec 2014 01:11:48 AM JST
smsqp",               
* Wed 03 Dec 2014 01:11:48 AM JST
smsqp",                
* Wed 03 Dec 2014 01:11:49 AM JST
smsqp",                 
* Wed 03 Dec 2014 01:11:49 AM JST
smsqp",                  
* Wed 03 Dec 2014 01:11:49 AM JST
smsqp",                   
* Wed 03 Dec 2014 01:11:49 AM JST
smsqp",                    
* Wed 03 Dec 2014 01:11:49 AM JST
smsqp",                     
* Wed 03 Dec 2014 01:11:49 AM JST
smsqp",                      
* Wed 03 Dec 2014 01:11:49 AM JST
smsqp",                       
* Wed 03 Dec 2014 01:11:50 AM JST
smsqp",                        
* Wed 03 Dec 2014 01:11:50 AM JST
smsqp",                         
* Wed 03 Dec 2014 01:11:50 AM JST
smsqp",                          
* Wed 03 Dec 2014 01:11:50 AM JST
smsqp",                           
* Wed 03 Dec 2014 01:11:51 AM JST
smsqp",                            
* Wed 03 Dec 2014 01:11:51 AM JST
smsqp",                             
* Wed 03 Dec 2014 01:11:51 AM JST
smsqp",                              
* Wed 03 Dec 2014 01:11:51 AM JST
smsqp",                               
* Wed 03 Dec 2014 01:11:51 AM JST
smsqp",                                
* Wed 03 Dec 2014 01:11:52 AM JST
smsqp",                                 
* Wed 03 Dec 2014 01:11:52 AM JST
smsqp",                                  
* Wed 03 Dec 2014 01:11:52 AM JST
smsqp",                                   
* Wed 03 Dec 2014 01:11:52 AM JST
smsqp",                                    
* Wed 03 Dec 2014 01:11:52 AM JST
smsqp",                                     
* Wed 03 Dec 2014 01:11:52 AM JST
smsqp",                                      
* Wed 03 Dec 2014 01:11:52 AM JST
smsqp",                                       
* Wed 03 Dec 2014 01:11:53 AM JST
smsqp",                                        
* Wed 03 Dec 2014 01:11:53 AM JST
smsqp",                                         
* Wed 03 Dec 2014 01:11:53 AM JST
smsqp",                                          
* Wed 03 Dec 2014 01:11:53 AM JST
smsqp",                                           
* Wed 03 Dec 2014 01:11:54 AM JST
smsqp",                                            
* Wed 03 Dec 2014 01:11:54 AM JST
smsqp",                                             
* Wed 03 Dec 2014 01:11:54 AM JST
smsqp",                                              
* Wed 03 Dec 2014 01:11:54 AM JST
smsqp",                                               
* Wed 03 Dec 2014 01:11:54 AM JST
smsqp",                                                
* Wed 03 Dec 2014 01:11:54 AM JST
smsqp",                                                 
* Wed 03 Dec 2014 01:11:55 AM JST
smsqp",                                                  
* Wed 03 Dec 2014 01:11:55 AM JST
smsqp",                                                   
* Wed 03 Dec 2014 01:11:55 AM JST
smsqp",                                                    
* Wed 03 Dec 2014 01:11:55 AM JST
smsqp",                                                     
* Wed 03 Dec 2014 01:11:55 AM JST
smsqp",                                                      
* Wed 03 Dec 2014 01:11:55 AM JST
smsqp",                                                       
* Wed 03 Dec 2014 01:11:55 AM JST
smsqp",                                                        
* Wed 03 Dec 2014 01:11:56 AM JST
smsqp",                                                         
* Wed 03 Dec 2014 01:11:56 AM JST
smsqp",                                                          
* Wed 03 Dec 2014 01:11:56 AM JST
smsqp",                                                           
* Wed 03 Dec 2014 01:11:56 AM JST
smsqp",                                                            
* Wed 03 Dec 2014 01:11:56 AM JST
smsqp",                                                             
* Wed 03 Dec 2014 01:11:56 AM JST
smsqp",                                                              
* Wed 03 Dec 2014 01:11:56 AM JST
smsqp",                                                               
* Wed 03 Dec 2014 01:11:56 AM JST
smsqp",                                                                
* Wed 03 Dec 2014 01:11:57 AM JST
smsqp",                                                                 
* Wed 03 Dec 2014 01:11:57 AM JST
smsqp",                                                                  
* Wed 03 Dec 2014 01:11:57 AM JST
smsqp",                                                                   
* Wed 03 Dec 2014 01:11:57 AM JST
smsqp",                                                                    
* Wed 03 Dec 2014 01:11:57 AM JST
smsqp",                                                                     
* Wed 03 Dec 2014 01:11:58 AM JST
smsqp",                                                                      
* Wed 03 Dec 2014 01:11:58 AM JST
smsqp",                                                                       
* Wed 03 Dec 2014 01:11:58 AM JST
smsqp",                                                                        
* Wed 03 Dec 2014 01:11:58 AM JST
smsqp",                                                                         
* Wed 03 Dec 2014 01:11:58 AM JST
smsqp",                                                                          
* Wed 03 Dec 2014 01:11:59 AM JST
smsqp",                                                                           
* Wed 03 Dec 2014 01:11:59 AM JST
smsqp",                                                                            
* Wed 03 Dec 2014 01:11:59 AM JST
smsqp",                                                                             
* Wed 03 Dec 2014 01:11:59 AM JST
smsqp",                                                                              
* Wed 03 Dec 2014 01:11:59 AM JST
smsqp",                                                                               
* Wed 03 Dec 2014 01:11:59 AM JST
smsqp",                                                                                
* Wed 03 Dec 2014 01:12:00 AM JST
smsqp",                                                                                 
* Wed 03 Dec 2014 01:12:00 AM JST
smsqp",                                                                                  
* Wed 03 Dec 2014 01:12:00 AM JST
smsqp",                                                                                   
* Wed 03 Dec 2014 01:12:00 AM JST
smsqp",                                                                                    
* Wed 03 Dec 2014 01:12:00 AM JST
smsqp",                                                                                     
* Wed 03 Dec 2014 01:12:00 AM JST
smsqp",                                                                                      
* Wed 03 Dec 2014 01:12:00 AM JST
smsqp",                                                                                       
* Wed 03 Dec 2014 01:12:01 AM JST
smsqp",                                                                                        
* Wed 03 Dec 2014 01:12:01 AM JST
smsqp",                                                                                         
* Wed 03 Dec 2014 01:12:01 AM JST
smsqp",                                                                                          
* Wed 03 Dec 2014 01:12:01 AM JST
smsqp",                                                                                           
* Wed 03 Dec 2014 01:12:01 AM JST
smsqp",                                                                                            
* Wed 03 Dec 2014 01:12:01 AM JST
cmsd", 
* Wed 03 Dec 2014 01:12:02 AM JST
10081: "  
* Wed 03 Dec 2014 01:12:02 AM JST
kamanda",                     
* Wed 03 Dec 2014 01:12:02 AM JST
10081: "   
* Wed 03 Dec 2014 01:12:02 AM JST
kamanda",                      
* Wed 03 Dec 2014 01:12:02 AM JST
10081: "    
* Wed 03 Dec 2014 01:12:02 AM JST
kamanda",                       
* Wed 03 Dec 2014 01:12:02 AM JST
10081: "     
* Wed 03 Dec 2014 01:12:03 AM JST
kamanda",                        
* Wed 03 Dec 2014 01:12:03 AM JST
10081: "      
* Wed 03 Dec 2014 01:12:03 AM JST
kamanda",                         
* Wed 03 Dec 2014 01:12:03 AM JST
10081: "       
* Wed 03 Dec 2014 01:12:04 AM JST
kamanda",                          
* Wed 03 Dec 2014 01:12:04 AM JST
10081: "        
* Wed 03 Dec 2014 01:12:04 AM JST
kamanda",                           
* Wed 03 Dec 2014 01:12:04 AM JST
10081: "         
* Wed 03 Dec 2014 01:12:04 AM JST
kamanda",                            
* Wed 03 Dec 2014 01:12:04 AM JST
10081: "          
* Wed 03 Dec 2014 01:12:04 AM JST
kamanda",                             
* Wed 03 Dec 2014 01:12:05 AM JST
10081: "           
* Wed 03 Dec 2014 01:12:05 AM JST
kamanda",                              
* Wed 03 Dec 2014 01:12:05 AM JST
10081: "            
* Wed 03 Dec 2014 01:12:05 AM JST
kamanda",                               
* Wed 03 Dec 2014 01:12:05 AM JST
10081: "             
* Wed 03 Dec 2014 01:12:05 AM JST
kamanda",                                
* Wed 03 Dec 2014 01:12:05 AM JST
10081: "              
* Wed 03 Dec 2014 01:12:06 AM JST
kamanda",                                 
* Wed 03 Dec 2014 01:12:06 AM JST
10081: "               
* Wed 03 Dec 2014 01:12:06 AM JST
kamanda",                                  
* Wed 03 Dec 2014 01:12:06 AM JST
10081: "                
* Wed 03 Dec 2014 01:12:06 AM JST
kamanda",                                   
* Wed 03 Dec 2014 01:12:06 AM JST
10081: "                 
* Wed 03 Dec 2014 01:12:07 AM JST
kamanda",                                    
* Wed 03 Dec 2014 01:12:07 AM JST
10081: "                  
* Wed 03 Dec 2014 01:12:07 AM JST
kamanda",                                     
* Wed 03 Dec 2014 01:12:07 AM JST
10081: "                   
* Wed 03 Dec 2014 01:12:07 AM JST
kamanda",                                      
* Wed 03 Dec 2014 01:12:07 AM JST
10081: "                    
* Wed 03 Dec 2014 01:12:07 AM JST
kamanda",                                       
* Wed 03 Dec 2014 01:12:08 AM JST
10081: "                     
* Wed 03 Dec 2014 01:12:08 AM JST
kamanda",                                        
* Wed 03 Dec 2014 01:12:08 AM JST
10081: "                      
* Wed 03 Dec 2014 01:12:08 AM JST
kamanda",                                         
* Wed 03 Dec 2014 01:12:08 AM JST
10081: "                       
* Wed 03 Dec 2014 01:12:08 AM JST
kamanda",                                          
* Wed 03 Dec 2014 01:12:08 AM JST
10081: "                        
* Wed 03 Dec 2014 01:12:08 AM JST
kamanda",                                           
* Wed 03 Dec 2014 01:12:09 AM JST
10081: "                         
* Wed 03 Dec 2014 01:12:09 AM JST
kamanda",                                            
* Wed 03 Dec 2014 01:12:09 AM JST
10081: "                          
* Wed 03 Dec 2014 01:12:09 AM JST
kamanda",                                             
* Wed 03 Dec 2014 01:12:09 AM JST
10081: "                           
* Wed 03 Dec 2014 01:12:09 AM JST
kamanda",                                              
* Wed 03 Dec 2014 01:12:10 AM JST
10081: "                            
* Wed 03 Dec 2014 01:12:10 AM JST
kamanda",                                               
* Wed 03 Dec 2014 01:12:10 AM JST
10081: "                             
* Wed 03 Dec 2014 01:12:10 AM JST
kamanda",                                                
* Wed 03 Dec 2014 01:12:10 AM JST
10081: "                              
* Wed 03 Dec 2014 01:12:10 AM JST
kamanda",                                                 
* Wed 03 Dec 2014 01:12:11 AM JST
10081: "                               
* Wed 03 Dec 2014 01:12:11 AM JST
kamanda",                                                  
* Wed 03 Dec 2014 01:12:11 AM JST
10081: "                                
* Wed 03 Dec 2014 01:12:11 AM JST
kamanda",                                                   
* Wed 03 Dec 2014 01:12:11 AM JST
10081: "                                 
* Wed 03 Dec 2014 01:12:11 AM JST
xpilot",
* Wed 03 Dec 2014 01:12:11 AM JST
15345: "                                   
* Wed 03 Dec 2014 01:12:12 AM JST
kamanda",
* Wed 03 Dec 2014 01:12:12 AM JST
kamanda", 
* Wed 03 Dec 2014 01:12:12 AM JST
kamanda",  
* Wed 03 Dec 2014 01:12:12 AM JST
kamanda",   
* Wed 03 Dec 2014 01:12:12 AM JST
kamanda",    
* Wed 03 Dec 2014 01:12:12 AM JST
kamanda",     
* Wed 03 Dec 2014 01:12:12 AM JST
kamanda",      
* Wed 03 Dec 2014 01:12:13 AM JST
kamanda",       
* Wed 03 Dec 2014 01:12:13 AM JST
kamanda",        
* Wed 03 Dec 2014 01:12:13 AM JST
kamanda",         
* Wed 03 Dec 2014 01:12:13 AM JST
kamanda",          
* Wed 03 Dec 2014 01:12:13 AM JST
kamanda",           
* Wed 03 Dec 2014 01:12:13 AM JST
kamanda",            
* Wed 03 Dec 2014 01:12:13 AM JST
kamanda",             
* Wed 03 Dec 2014 01:12:14 AM JST
kamanda",              
* Wed 03 Dec 2014 01:12:14 AM JST
kamanda",               
* Wed 03 Dec 2014 01:12:14 AM JST
kamanda",                
* Wed 03 Dec 2014 01:12:14 AM JST
kamanda",                 
* Wed 03 Dec 2014 01:12:14 AM JST
kamanda",                  
* Wed 03 Dec 2014 01:12:15 AM JST
kamanda",                   
* Wed 03 Dec 2014 01:12:15 AM JST
kamanda",                    
* Wed 03 Dec 2014 01:12:15 AM JST
kamanda",                     
* Wed 03 Dec 2014 01:12:15 AM JST
kamanda",                      
* Wed 03 Dec 2014 01:12:15 AM JST
kamanda",                       
* Wed 03 Dec 2014 01:12:15 AM JST
kamanda",                        
* Wed 03 Dec 2014 01:12:15 AM JST
kamanda",                         
* Wed 03 Dec 2014 01:12:16 AM JST
kamanda",                          
* Wed 03 Dec 2014 01:12:16 AM JST
kamanda",                           
* Wed 03 Dec 2014 01:12:16 AM JST
kamanda",                            
* Wed 03 Dec 2014 01:12:16 AM JST
kamanda",                             
* Wed 03 Dec 2014 01:12:16 AM JST
kamanda",                              
* Wed 03 Dec 2014 01:12:16 AM JST
kamanda",                               
* Wed 03 Dec 2014 01:12:17 AM JST
kamanda",                                
* Wed 03 Dec 2014 01:12:17 AM JST
kamanda",                                 
* Wed 03 Dec 2014 01:12:17 AM JST
kamanda",                                  
* Wed 03 Dec 2014 01:12:17 AM JST
kamanda",                                   
* Wed 03 Dec 2014 01:12:17 AM JST
kamanda",                                    
* Wed 03 Dec 2014 01:12:17 AM JST
kamanda",                                     
* Wed 03 Dec 2014 01:12:17 AM JST
kamanda",                                      
* Wed 03 Dec 2014 01:12:18 AM JST
kamanda",                                       
* Wed 03 Dec 2014 01:12:18 AM JST
kamanda",                                        
* Wed 03 Dec 2014 01:12:18 AM JST
kamanda",                                         
* Wed 03 Dec 2014 01:12:19 AM JST
kamanda",                                          
* Wed 03 Dec 2014 01:12:19 AM JST
kamanda",                                           
* Wed 03 Dec 2014 01:12:19 AM JST
kamanda",                                            
* Wed 03 Dec 2014 01:12:19 AM JST
kamanda",                                             
* Wed 03 Dec 2014 01:12:19 AM JST
kamanda",                                              
* Wed 03 Dec 2014 01:12:19 AM JST
kamanda",                                               
* Wed 03 Dec 2014 01:12:19 AM JST
kamanda",                                                
* Wed 03 Dec 2014 01:12:19 AM JST
kamanda",                                                 
* Wed 03 Dec 2014 01:12:20 AM JST
kamanda",                                                  
* Wed 03 Dec 2014 01:12:20 AM JST
kamanda",                                                   
* Wed 03 Dec 2014 01:12:20 AM JST
kamanda",                                                    
* Wed 03 Dec 2014 01:12:20 AM JST
kamanda",                                                     
* Wed 03 Dec 2014 01:12:20 AM JST
kamanda",                                                      
* Wed 03 Dec 2014 01:12:20 AM JST
kamanda",                                                       
* Wed 03 Dec 2014 01:12:20 AM JST
kamanda",                                                        
* Wed 03 Dec 2014 01:12:21 AM JST
kamanda",                                                         
* Wed 03 Dec 2014 01:12:21 AM JST
kamanda",                                                          
* Wed 03 Dec 2014 01:12:21 AM JST
kamanda",                                                           
* Wed 03 Dec 2014 01:12:21 AM JST
kamanda",                                                            
* Wed 03 Dec 2014 01:12:21 AM JST
kamanda",                                                             
* Wed 03 Dec 2014 01:12:21 AM JST
kamanda",                                                              
* Wed 03 Dec 2014 01:12:21 AM JST
kamanda",                                                               
* Wed 03 Dec 2014 01:12:22 AM JST
kamanda",                                                                
* Wed 03 Dec 2014 01:12:22 AM JST
kamanda",                                                                 
* Wed 03 Dec 2014 01:12:22 AM JST
kamanda",                                                                  
* Wed 03 Dec 2014 01:12:22 AM JST
kamanda",                                                                   
* Wed 03 Dec 2014 01:12:22 AM JST
kamanda",                                                                    
* Wed 03 Dec 2014 01:12:23 AM JST
kamanda",                                                                     
* Wed 03 Dec 2014 01:12:23 AM JST
kamanda",                                                                      
* Wed 03 Dec 2014 01:12:23 AM JST
kamanda",                                                                       
* Wed 03 Dec 2014 01:12:23 AM JST
kamanda",                                                                        
* Wed 03 Dec 2014 01:12:23 AM JST
kamanda",                                                                         
* Wed 03 Dec 2014 01:12:23 AM JST
kamanda",                                                                          
* Wed 03 Dec 2014 01:12:23 AM JST
kamanda",                                                                           
* Wed 03 Dec 2014 01:12:24 AM JST
kamanda",                                                                            
* Wed 03 Dec 2014 01:12:24 AM JST
kamanda",                                                                             
* Wed 03 Dec 2014 01:12:24 AM JST
kamanda",                                                                              
* Wed 03 Dec 2014 01:12:24 AM JST
kamanda",                                                                               
* Wed 03 Dec 2014 01:12:24 AM JST
kamanda",                                                                                
* Wed 03 Dec 2014 01:12:24 AM JST
kamanda",                                                                                 
* Wed 03 Dec 2014 01:12:25 AM JST
kamanda",                                                                                  
* Wed 03 Dec 2014 01:12:25 AM JST
kamanda",                                                                                   
* Wed 03 Dec 2014 01:12:25 AM JST
kamanda",                                                                                    
* Wed 03 Dec 2014 01:12:25 AM JST
kamanda",                                                                                     
* Wed 03 Dec 2014 01:12:25 AM JST
kamanda",                                                                                      
* Wed 03 Dec 2014 01:12:25 AM JST
kamanda",                                                                                       
* Wed 03 Dec 2014 01:18:51 AM JST
echo                     7/udp
discard                  9/udp
daytime                  13/udp
msp                      18/udp
chargen                  19/udp
fsp                      21/udp
ssh                      22/udp
time                     37/udp
rlp                      39/udp
tacacs                   49/udp
re-mail-ck               50/udp
domain                   53/udp
tacacs-ds                65/udp
bootps                   67/udp
bootpc                   68/udp
tftp                     69/udp
gopher                   70/udp
http                     80/udp
kerberos                 88/udp
acr-nema                 104/udp
csnet-ns                 105/udp
rtelnet                  107/udp
pop2                     109/udp
pop3                     110/udp
sunrpc                   111/udp
ntp                      123/udp
pwdgen                   129/udp
loc-srv                  135/udp
netbios-ns               137/udp
netbios-dgm              138/udp
netbios-ssn              139/udp
imap2                    143/udp
snmp                     161/udp
snmp-trap                162/udp
cmip-man                 163/udp
cmip-agent               164/udp
mailq                    174/udp
xdmcp                    177/udp
nextstep                 178/udp
bgp                      179/udp
prospero                 191/udp
irc                      194/udp
smux                     199/udp
at-rtmp                  201/udp
at-nbp                   202/udp
at-echo                  204/udp
at-zis                   206/udp
qmtp                     209/udp
z3950                    210/udp
ipx                      213/udp
imap3                    220/udp
pawserv                  345/udp
zserv                    346/udp
fatserv                  347/udp
rpc2portmap              369/udp
codaauth2                370/udp
clearcase                371/udp
ulistserv                372/udp
ldap                     389/udp
imsp                     406/udp
svrloc                   427/udp
https                    443/udp
snpp                     444/udp
microsoft-ds             445/udp
kpasswd                  464/udp
saft                     487/udp
isakmp                   500/udp
rtsp                     554/udp
nqs                      607/udp
npmp-local               610/udp
npmp-gui                 611/udp
hmmp-ind                 612/udp
asf-rmcp                 623/udp
qmqp                     628/udp
ipp                      631/udp
biff                     512/udp
who                      513/udp
syslog                   514/udp
talk                     517/udp
ntalk                    518/udp
route                    520/udp
timed                    525/udp
netwall                  533/udp
gdomap                   538/udp
dhcpv6-client            546/udp
dhcpv6-server            547/udp
afpovertcp               548/udp
idfp                     549/udp
nntps                    563/udp
submission               587/udp
ldaps                    636/udp
tinc                     655/udp
silc                     706/udp
webster                  765/udp
rsync                    873/udp
telnets                  992/udp
imaps                    993/udp
ircs                     994/udp
pop3s                    995/udp
socks                    1080/udp
proofd                   1093/udp
rootd                    1094/udp
openvpn                  1194/udp
rmiregistry              1099/udp
kazaa                    1214/udp
nessus                   1241/udp
lotusnote                1352/udp
ms-sql-s                 1433/udp
ms-sql-m                 1434/udp
ingreslock               1524/udp
prospero-np              1525/udp
datametrics              1645/udp
sa-msg-port              1646/udp
kermit                   1649/udp
groupwise                1677/udp
l2f                      1701/udp
radius                   1812/udp
radius-acct              1813/udp
msnp                     1863/udp
cisco-sccp               2000/udp
nfs                      2049/udp
gnunet                   2086/udp
rtcm-sc104               2101/udp
gsigatekeeper            2119/udp
gris                     2135/udp
cvspserver               2401/udp
venus                    2430/udp
venus-se                 2431/udp
codasrv                  2432/udp
codasrv-se               2433/udp
mon                      2583/udp
dict                     2628/udp
f5-globalsite            2792/udp
gsiftp                   2811/udp
gpsd                     2947/udp
gds-db                   3050/udp
icpv2                    3130/udp
mysql                    3306/udp
nut                      3493/udp
distcc                   3632/udp
daap                     3689/udp
svn                      3690/udp
suucp                    4031/udp
sysrqd                   4094/udp
epmd                     4369/udp
remctl                   4373/udp
f5-iquery                4353/udp
iax                      4569/udp
mtn                      4691/udp
radmin-port              4899/udp
rfe                      5002/udp
mmcc                     5050/udp
sip                      5060/udp
sip-tls                  5061/udp
aol                      5190/udp
xmpp-client              5222/udp
xmpp-server              5269/udp
cfengine                 5308/udp
mdns                     5353/udp
postgresql               5432/udp
freeciv                  5556/udp
amqp                     5672/udp
ggz                      5688/udp
x11                      6000/udp
x11-1                    6001/udp
x11-2                    6002/udp
x11-3                    6003/udp
x11-4                    6004/udp
x11-5                    6005/udp
x11-6                    6006/udp
x11-7                    6007/udp
gnutella-svc             6346/udp
gnutella-rtr             6347/udp
sge-qmaster              6444/udp
sge-execd                6445/udp
mysql-proxy              6446/udp
afs3-fileserver            7000/udp
afs3-callback            7001/udp
afs3-prserver            7002/udp
afs3-vlserver            7003/udp
afs3-kaserver            7004/udp
afs3-volser              7005/udp
afs3-errors              7006/udp
afs3-bos                 7007/udp
afs3-update              7008/udp
afs3-rmtsys              7009/udp
font-service             7100/udp
http-alt                 8080/udp
bacula-dir               9101/udp
bacula-fd                9102/udp
bacula-sd                9103/udp
xmms2                    9667/udp
zabbix-agent             10050/udp
zabbix-trapper           10051/udp
amanda                   10080/udp
hkp                      11371/udp
bprd                     13720/udp
bpdbm                    13721/udp
bpjava-msvc              13722/udp
vnetd                    13724/udp
bpcd                     13782/udp
vopied                   13783/udp
wnn6                     22273/udp
kerberos4                750/udp
kerberos-master          751/udp
passwd-server            752/udp
zephyr-srv               2102/udp
zephyr-clt               2103/udp
zephyr-hm                2104/udp
poppassd                 106/udp
moira-ureg               779/udp
omirr                    808/udp
customs                  1001/udp
predict                  1210/udp
ninstall                 2150/udp
afbackup                 2988/udp
afmbackup                2989/udp
noclog                   5354/udp
hostmon                  5355/udp
rplay                    5555/udp
omniorb                  8088/udp
mandelspawn              9359/udp
kamanda                  10081/udp
smsqp                    11201/udp
xpilot                   15345/udp
sgi-cmsd                 17001/udp
sgi-crsd                 17002/udp
sgi-gcd                  17003/udp
isdnlog                  20011/udp
vboxd                    20012/udp
asp                      27374/udp

* Wed 03 Dec 2014 01:19:20 AM JST
udp
* Wed 03 Dec 2014 01:19:20 AM JST
udp
* Wed 03 Dec 2014 01:19:20 AM JST
udp
* Wed 03 Dec 2014 01:19:20 AM JST
udp
* Wed 03 Dec 2014 01:19:20 AM JST
udp
* Wed 03 Dec 2014 01:19:20 AM JST
udp
* Wed 03 Dec 2014 01:19:21 AM JST
udp
* Wed 03 Dec 2014 01:19:21 AM JST
udp
* Wed 03 Dec 2014 01:19:21 AM JST
udp
* Wed 03 Dec 2014 01:19:21 AM JST
udp
* Wed 03 Dec 2014 01:19:21 AM JST
udp
* Wed 03 Dec 2014 01:19:21 AM JST
udp
* Wed 03 Dec 2014 01:19:21 AM JST
udp
* Wed 03 Dec 2014 01:19:21 AM JST
udp
* Wed 03 Dec 2014 01:19:21 AM JST
udp
* Wed 03 Dec 2014 01:19:21 AM JST
udp
* Wed 03 Dec 2014 01:19:21 AM JST
udp
* Wed 03 Dec 2014 01:19:21 AM JST
udp
* Wed 03 Dec 2014 01:19:21 AM JST
udp
* Wed 03 Dec 2014 01:19:21 AM JST
udp
* Wed 03 Dec 2014 01:19:22 AM JST
udp
* Wed 03 Dec 2014 01:19:22 AM JST
udp
* Wed 03 Dec 2014 01:19:22 AM JST
udp
* Wed 03 Dec 2014 01:19:22 AM JST
udp
* Wed 03 Dec 2014 01:19:22 AM JST
udp
* Wed 03 Dec 2014 01:19:22 AM JST
udp
* Wed 03 Dec 2014 01:19:22 AM JST
udp
* Wed 03 Dec 2014 01:19:22 AM JST
udp
* Wed 03 Dec 2014 01:19:22 AM JST
udp
* Wed 03 Dec 2014 01:19:22 AM JST
udp
* Wed 03 Dec 2014 01:19:22 AM JST
udp
* Wed 03 Dec 2014 01:19:22 AM JST
udp
* Wed 03 Dec 2014 01:19:22 AM JST
udp
* Wed 03 Dec 2014 01:19:22 AM JST
udp
* Wed 03 Dec 2014 01:19:22 AM JST
udp
* Wed 03 Dec 2014 01:19:23 AM JST
udp
* Wed 03 Dec 2014 01:19:23 AM JST
udp
* Wed 03 Dec 2014 01:19:23 AM JST
udp
* Wed 03 Dec 2014 01:19:23 AM JST
udp
* Wed 03 Dec 2014 01:19:23 AM JST
udp
* Wed 03 Dec 2014 01:19:23 AM JST
udp
* Wed 03 Dec 2014 01:19:23 AM JST
udp
* Wed 03 Dec 2014 01:19:23 AM JST
udp
* Wed 03 Dec 2014 01:19:23 AM JST
udp
* Wed 03 Dec 2014 01:19:23 AM JST
udp
* Wed 03 Dec 2014 01:19:23 AM JST
udp
* Wed 03 Dec 2014 01:19:23 AM JST
udp
* Wed 03 Dec 2014 01:19:23 AM JST
udp
* Wed 03 Dec 2014 01:19:23 AM JST
udp
* Wed 03 Dec 2014 01:19:24 AM JST
udp
* Wed 03 Dec 2014 01:19:24 AM JST
udp
* Wed 03 Dec 2014 01:19:24 AM JST
udp
* Wed 03 Dec 2014 01:19:24 AM JST
udp
* Wed 03 Dec 2014 01:19:24 AM JST
udp
* Wed 03 Dec 2014 01:19:24 AM JST
udp
* Wed 03 Dec 2014 01:19:24 AM JST
udp
* Wed 03 Dec 2014 01:19:24 AM JST
udp
* Wed 03 Dec 2014 01:19:24 AM JST
udp
* Wed 03 Dec 2014 01:19:24 AM JST
udp
* Wed 03 Dec 2014 01:19:24 AM JST
udp
* Wed 03 Dec 2014 01:19:24 AM JST
udp
* Wed 03 Dec 2014 01:19:24 AM JST
udp
* Wed 03 Dec 2014 01:19:24 AM JST
udp
* Wed 03 Dec 2014 01:19:24 AM JST
udp
* Wed 03 Dec 2014 01:19:25 AM JST
udp
* Wed 03 Dec 2014 01:19:25 AM JST
udp
* Wed 03 Dec 2014 01:19:25 AM JST
udp
* Wed 03 Dec 2014 01:19:25 AM JST
udp
* Wed 03 Dec 2014 01:19:25 AM JST
udp
* Wed 03 Dec 2014 01:19:25 AM JST
udp
* Wed 03 Dec 2014 01:19:25 AM JST
udp
* Wed 03 Dec 2014 01:19:25 AM JST
udp
* Wed 03 Dec 2014 01:19:25 AM JST
udp
* Wed 03 Dec 2014 01:19:25 AM JST
udp
* Wed 03 Dec 2014 01:19:25 AM JST
udp
* Wed 03 Dec 2014 01:19:26 AM JST
udp
* Wed 03 Dec 2014 01:19:26 AM JST
udp
* Wed 03 Dec 2014 01:19:26 AM JST
udp
* Wed 03 Dec 2014 01:19:26 AM JST
udp
* Wed 03 Dec 2014 01:19:26 AM JST
udp
* Wed 03 Dec 2014 01:19:26 AM JST
udp
* Wed 03 Dec 2014 01:19:26 AM JST
udp
* Wed 03 Dec 2014 01:19:26 AM JST
udp
* Wed 03 Dec 2014 01:19:26 AM JST
udp
* Wed 03 Dec 2014 01:19:26 AM JST
udp
* Wed 03 Dec 2014 01:19:27 AM JST
udp
* Wed 03 Dec 2014 01:19:27 AM JST
udp
* Wed 03 Dec 2014 01:19:27 AM JST
udp
* Wed 03 Dec 2014 01:19:27 AM JST
udp
* Wed 03 Dec 2014 01:19:27 AM JST
udp
* Wed 03 Dec 2014 01:19:27 AM JST
udp
* Wed 03 Dec 2014 01:19:27 AM JST
udp
* Wed 03 Dec 2014 01:19:27 AM JST
udp
* Wed 03 Dec 2014 01:19:27 AM JST
udp
* Wed 03 Dec 2014 01:19:27 AM JST
udp
* Wed 03 Dec 2014 01:19:27 AM JST
udp
* Wed 03 Dec 2014 01:19:27 AM JST
udp
* Wed 03 Dec 2014 01:19:27 AM JST
udp
* Wed 03 Dec 2014 01:19:27 AM JST
udp
* Wed 03 Dec 2014 01:19:27 AM JST
udp
* Wed 03 Dec 2014 01:19:28 AM JST
udp
* Wed 03 Dec 2014 01:19:28 AM JST
udp
* Wed 03 Dec 2014 01:19:28 AM JST
udp
* Wed 03 Dec 2014 01:19:28 AM JST
udp
* Wed 03 Dec 2014 01:19:28 AM JST
udp
* Wed 03 Dec 2014 01:19:28 AM JST
udp
* Wed 03 Dec 2014 01:19:28 AM JST
udp
* Wed 03 Dec 2014 01:19:28 AM JST
udp
* Wed 03 Dec 2014 01:19:28 AM JST
udp
* Wed 03 Dec 2014 01:19:28 AM JST
udp
* Wed 03 Dec 2014 01:19:28 AM JST
udp
* Wed 03 Dec 2014 01:19:28 AM JST
udp
* Wed 03 Dec 2014 01:19:28 AM JST
udp
* Wed 03 Dec 2014 01:19:28 AM JST
udp
* Wed 03 Dec 2014 01:19:28 AM JST
udp
* Wed 03 Dec 2014 01:19:29 AM JST
udp
* Wed 03 Dec 2014 01:19:29 AM JST
udp
* Wed 03 Dec 2014 01:19:29 AM JST
udp
* Wed 03 Dec 2014 01:19:29 AM JST
udp
* Wed 03 Dec 2014 01:19:29 AM JST
udp
* Wed 03 Dec 2014 01:19:29 AM JST
udp
* Wed 03 Dec 2014 01:19:29 AM JST
udp
* Wed 03 Dec 2014 01:19:29 AM JST
udp
* Wed 03 Dec 2014 01:19:29 AM JST
udp
* Wed 03 Dec 2014 01:19:29 AM JST
udp
* Wed 03 Dec 2014 01:19:29 AM JST
udp
* Wed 03 Dec 2014 01:19:29 AM JST
udp
* Wed 03 Dec 2014 01:19:29 AM JST
udp
* Wed 03 Dec 2014 01:19:29 AM JST
udp
* Wed 03 Dec 2014 01:19:29 AM JST
udp
* Wed 03 Dec 2014 01:19:30 AM JST
udp
* Wed 03 Dec 2014 01:19:30 AM JST
udp
* Wed 03 Dec 2014 01:19:30 AM JST
udp
* Wed 03 Dec 2014 01:19:30 AM JST
udp
* Wed 03 Dec 2014 01:19:30 AM JST
udp
* Wed 03 Dec 2014 01:19:30 AM JST
udp
* Wed 03 Dec 2014 01:19:30 AM JST
udp
* Wed 03 Dec 2014 01:19:30 AM JST
udp
* Wed 03 Dec 2014 01:19:30 AM JST
udp
* Wed 03 Dec 2014 01:19:30 AM JST
udp
* Wed 03 Dec 2014 01:19:30 AM JST
udp
* Wed 03 Dec 2014 01:19:30 AM JST
udp
* Wed 03 Dec 2014 01:19:30 AM JST
udp
* Wed 03 Dec 2014 01:19:30 AM JST
udp
* Wed 03 Dec 2014 01:19:30 AM JST
udp
* Wed 03 Dec 2014 01:19:31 AM JST
udp
* Wed 03 Dec 2014 01:19:31 AM JST
udp
* Wed 03 Dec 2014 01:19:31 AM JST
udp
* Wed 03 Dec 2014 01:19:31 AM JST
udp
* Wed 03 Dec 2014 01:19:31 AM JST
udp
* Wed 03 Dec 2014 01:19:31 AM JST
udp
* Wed 03 Dec 2014 01:19:31 AM JST
udp
* Wed 03 Dec 2014 01:19:31 AM JST
udp
* Wed 03 Dec 2014 01:19:31 AM JST
udp
* Wed 03 Dec 2014 01:19:31 AM JST
udp
* Wed 03 Dec 2014 01:19:31 AM JST
udp
* Wed 03 Dec 2014 01:19:31 AM JST
udp
* Wed 03 Dec 2014 01:19:31 AM JST
udp
* Wed 03 Dec 2014 01:19:31 AM JST
udp
* Wed 03 Dec 2014 01:19:32 AM JST
udp
* Wed 03 Dec 2014 01:19:32 AM JST
udp
* Wed 03 Dec 2014 01:19:32 AM JST
udp
* Wed 03 Dec 2014 01:19:32 AM JST
udp
* Wed 03 Dec 2014 01:19:32 AM JST
udp
* Wed 03 Dec 2014 01:19:32 AM JST
udp
* Wed 03 Dec 2014 01:19:32 AM JST
udp
* Wed 03 Dec 2014 01:19:32 AM JST
udp
* Wed 03 Dec 2014 01:19:32 AM JST
udp
* Wed 03 Dec 2014 01:19:32 AM JST
udp
* Wed 03 Dec 2014 01:19:32 AM JST
udp
* Wed 03 Dec 2014 01:19:33 AM JST
udp
* Wed 03 Dec 2014 01:19:33 AM JST
udp
* Wed 03 Dec 2014 01:19:33 AM JST
udp
* Wed 03 Dec 2014 01:19:33 AM JST
udp
* Wed 03 Dec 2014 01:19:33 AM JST
udp
* Wed 03 Dec 2014 01:19:33 AM JST
udp
* Wed 03 Dec 2014 01:19:33 AM JST
udp
* Wed 03 Dec 2014 01:19:33 AM JST
udp
* Wed 03 Dec 2014 01:19:33 AM JST
udp
* Wed 03 Dec 2014 01:19:33 AM JST
udp
* Wed 03 Dec 2014 01:19:33 AM JST
udp
* Wed 03 Dec 2014 01:19:33 AM JST
udp
* Wed 03 Dec 2014 01:19:33 AM JST
udp
* Wed 03 Dec 2014 01:19:33 AM JST
udp
* Wed 03 Dec 2014 01:19:33 AM JST
udp
* Wed 03 Dec 2014 01:19:34 AM JST
udp
* Wed 03 Dec 2014 01:19:34 AM JST
udp
* Wed 03 Dec 2014 01:19:34 AM JST
udp
* Wed 03 Dec 2014 01:19:34 AM JST
udp
* Wed 03 Dec 2014 01:19:34 AM JST
udp
* Wed 03 Dec 2014 01:19:34 AM JST
udp
* Wed 03 Dec 2014 01:19:34 AM JST
udp
* Wed 03 Dec 2014 01:19:34 AM JST
udp
* Wed 03 Dec 2014 01:19:34 AM JST
udp
* Wed 03 Dec 2014 01:19:34 AM JST
udp
* Wed 03 Dec 2014 01:19:34 AM JST
udp
* Wed 03 Dec 2014 01:19:34 AM JST
udp
* Wed 03 Dec 2014 01:19:34 AM JST
udp
* Wed 03 Dec 2014 01:19:34 AM JST
udp
* Wed 03 Dec 2014 01:19:35 AM JST
udp
* Wed 03 Dec 2014 01:19:35 AM JST
udp
* Wed 03 Dec 2014 01:19:35 AM JST
udp
* Wed 03 Dec 2014 01:19:35 AM JST
udp
* Wed 03 Dec 2014 01:19:35 AM JST
udp
* Wed 03 Dec 2014 01:19:35 AM JST
udp
* Wed 03 Dec 2014 01:19:35 AM JST
udp
* Wed 03 Dec 2014 01:19:35 AM JST
udp
* Wed 03 Dec 2014 01:19:35 AM JST
udp
* Wed 03 Dec 2014 01:19:35 AM JST
udp
* Wed 03 Dec 2014 01:19:35 AM JST
udp
* Wed 03 Dec 2014 01:19:35 AM JST
udp
* Wed 03 Dec 2014 01:19:35 AM JST
udp
* Wed 03 Dec 2014 01:19:35 AM JST
udp
* Wed 03 Dec 2014 01:19:36 AM JST
udp
* Wed 03 Dec 2014 01:19:36 AM JST
udp
* Wed 03 Dec 2014 01:19:36 AM JST
udp
* Wed 03 Dec 2014 01:19:36 AM JST
udp
* Wed 03 Dec 2014 01:19:36 AM JST
udp
* Wed 03 Dec 2014 01:19:36 AM JST
udp
* Wed 03 Dec 2014 01:19:36 AM JST
udp
* Wed 03 Dec 2014 01:19:36 AM JST
udp
* Wed 03 Dec 2014 01:19:36 AM JST
udp
* Wed 03 Dec 2014 01:19:36 AM JST
udp
* Wed 03 Dec 2014 01:19:36 AM JST
udp
* Wed 03 Dec 2014 01:19:36 AM JST
udp
* Wed 03 Dec 2014 01:19:36 AM JST
udp
* Wed 03 Dec 2014 01:19:36 AM JST
udp
* Wed 03 Dec 2014 01:19:36 AM JST
udp
* Wed 03 Dec 2014 01:19:37 AM JST
udp
* Wed 03 Dec 2014 01:19:37 AM JST
udp
* Wed 03 Dec 2014 01:19:37 AM JST
udp
* Wed 03 Dec 2014 01:20:23 AM JST
7:
* Wed 03 Dec 2014 01:20:40 AM JST
9:
* Wed 03 Dec 2014 01:20:40 AM JST
13:
* Wed 03 Dec 2014 01:20:40 AM JST
18:
* Wed 03 Dec 2014 01:20:40 AM JST
19:
* Wed 03 Dec 2014 01:20:40 AM JST
21:
* Wed 03 Dec 2014 01:20:40 AM JST
22:
* Wed 03 Dec 2014 01:20:40 AM JST
37:
* Wed 03 Dec 2014 01:20:40 AM JST
39:
* Wed 03 Dec 2014 01:20:40 AM JST
49:
* Wed 03 Dec 2014 01:20:40 AM JST
50:
* Wed 03 Dec 2014 01:20:40 AM JST
53:
* Wed 03 Dec 2014 01:20:41 AM JST
65:
* Wed 03 Dec 2014 01:20:41 AM JST
67:
* Wed 03 Dec 2014 01:20:41 AM JST
68:
* Wed 03 Dec 2014 01:20:41 AM JST
69:
* Wed 03 Dec 2014 01:20:41 AM JST
70:
* Wed 03 Dec 2014 01:20:41 AM JST
80:
* Wed 03 Dec 2014 01:20:41 AM JST
88:
* Wed 03 Dec 2014 01:20:41 AM JST
104:
* Wed 03 Dec 2014 01:20:41 AM JST
105:
* Wed 03 Dec 2014 01:20:41 AM JST
107:
* Wed 03 Dec 2014 01:20:41 AM JST
109:
* Wed 03 Dec 2014 01:20:42 AM JST
110:
* Wed 03 Dec 2014 01:20:42 AM JST
111:
* Wed 03 Dec 2014 01:20:42 AM JST
123:
* Wed 03 Dec 2014 01:20:42 AM JST
129:
* Wed 03 Dec 2014 01:20:42 AM JST
135:
* Wed 03 Dec 2014 01:20:42 AM JST
137:
* Wed 03 Dec 2014 01:20:42 AM JST
138:
* Wed 03 Dec 2014 01:20:43 AM JST
139:
* Wed 03 Dec 2014 01:20:43 AM JST
143:
* Wed 03 Dec 2014 01:20:43 AM JST
161:
* Wed 03 Dec 2014 01:20:43 AM JST
162:
* Wed 03 Dec 2014 01:20:43 AM JST
163:
* Wed 03 Dec 2014 01:20:43 AM JST
164:
* Wed 03 Dec 2014 01:20:43 AM JST
174:
* Wed 03 Dec 2014 01:20:43 AM JST
177:
* Wed 03 Dec 2014 01:20:43 AM JST
178:
* Wed 03 Dec 2014 01:20:44 AM JST
179:
* Wed 03 Dec 2014 01:20:44 AM JST
191:
* Wed 03 Dec 2014 01:20:44 AM JST
194:
* Wed 03 Dec 2014 01:20:44 AM JST
199:
* Wed 03 Dec 2014 01:20:44 AM JST
201:
* Wed 03 Dec 2014 01:20:44 AM JST
202:
* Wed 03 Dec 2014 01:20:44 AM JST
204:
* Wed 03 Dec 2014 01:20:44 AM JST
206:
* Wed 03 Dec 2014 01:20:44 AM JST
209:
* Wed 03 Dec 2014 01:20:45 AM JST
210:
* Wed 03 Dec 2014 01:20:45 AM JST
213:
* Wed 03 Dec 2014 01:20:45 AM JST
220:
* Wed 03 Dec 2014 01:20:45 AM JST
345:
* Wed 03 Dec 2014 01:20:45 AM JST
346:
* Wed 03 Dec 2014 01:20:45 AM JST
347:
* Wed 03 Dec 2014 01:20:45 AM JST
369:
* Wed 03 Dec 2014 01:20:45 AM JST
370:
* Wed 03 Dec 2014 01:20:45 AM JST
371:
* Wed 03 Dec 2014 01:20:45 AM JST
372:
* Wed 03 Dec 2014 01:20:45 AM JST
389:
* Wed 03 Dec 2014 01:20:46 AM JST
406:
* Wed 03 Dec 2014 01:20:46 AM JST
427:
* Wed 03 Dec 2014 01:20:46 AM JST
443:
* Wed 03 Dec 2014 01:20:46 AM JST
444:
* Wed 03 Dec 2014 01:20:46 AM JST
445:
* Wed 03 Dec 2014 01:20:46 AM JST
464:
* Wed 03 Dec 2014 01:20:46 AM JST
487:
* Wed 03 Dec 2014 01:20:46 AM JST
500:
* Wed 03 Dec 2014 01:20:46 AM JST
554:
* Wed 03 Dec 2014 01:20:46 AM JST
607:
* Wed 03 Dec 2014 01:20:47 AM JST
610:
* Wed 03 Dec 2014 01:20:47 AM JST
611:
* Wed 03 Dec 2014 01:20:47 AM JST
612:
* Wed 03 Dec 2014 01:20:47 AM JST
623:
* Wed 03 Dec 2014 01:20:47 AM JST
628:
* Wed 03 Dec 2014 01:20:47 AM JST
631:
* Wed 03 Dec 2014 01:20:47 AM JST
512:
* Wed 03 Dec 2014 01:20:47 AM JST
513:
* Wed 03 Dec 2014 01:20:47 AM JST
514:
* Wed 03 Dec 2014 01:20:47 AM JST
517:
* Wed 03 Dec 2014 01:20:47 AM JST
518:
* Wed 03 Dec 2014 01:20:47 AM JST
520:
* Wed 03 Dec 2014 01:20:48 AM JST
525:
* Wed 03 Dec 2014 01:20:48 AM JST
533:
* Wed 03 Dec 2014 01:20:48 AM JST
538:
* Wed 03 Dec 2014 01:20:48 AM JST
546:
* Wed 03 Dec 2014 01:20:48 AM JST
547:
* Wed 03 Dec 2014 01:20:48 AM JST
548:
* Wed 03 Dec 2014 01:20:48 AM JST
549:
* Wed 03 Dec 2014 01:20:48 AM JST
563:
* Wed 03 Dec 2014 01:20:48 AM JST
587:
* Wed 03 Dec 2014 01:20:48 AM JST
636:
* Wed 03 Dec 2014 01:20:49 AM JST
655:
* Wed 03 Dec 2014 01:20:49 AM JST
706:
* Wed 03 Dec 2014 01:20:49 AM JST
765:
* Wed 03 Dec 2014 01:20:49 AM JST
873:
* Wed 03 Dec 2014 01:20:49 AM JST
992:
* Wed 03 Dec 2014 01:20:49 AM JST
993:
* Wed 03 Dec 2014 01:20:49 AM JST
994:
* Wed 03 Dec 2014 01:20:49 AM JST
995:
* Wed 03 Dec 2014 01:20:49 AM JST
1080:
* Wed 03 Dec 2014 01:20:49 AM JST
1093:
* Wed 03 Dec 2014 01:20:49 AM JST
1094:
* Wed 03 Dec 2014 01:20:50 AM JST
1194:
* Wed 03 Dec 2014 01:20:50 AM JST
1099:
* Wed 03 Dec 2014 01:20:50 AM JST
1214:
* Wed 03 Dec 2014 01:20:50 AM JST
1241:
* Wed 03 Dec 2014 01:20:50 AM JST
1352:
* Wed 03 Dec 2014 01:20:50 AM JST
1433:
* Wed 03 Dec 2014 01:20:50 AM JST
1434:
* Wed 03 Dec 2014 01:20:50 AM JST
1524:
* Wed 03 Dec 2014 01:20:50 AM JST
1525:
* Wed 03 Dec 2014 01:20:50 AM JST
1645:
* Wed 03 Dec 2014 01:20:50 AM JST
1646:
* Wed 03 Dec 2014 01:20:50 AM JST
1649:
* Wed 03 Dec 2014 01:20:51 AM JST
1677:
* Wed 03 Dec 2014 01:20:51 AM JST
1701:
* Wed 03 Dec 2014 01:20:51 AM JST
1812:
* Wed 03 Dec 2014 01:20:51 AM JST
1813:
* Wed 03 Dec 2014 01:20:51 AM JST
1863:
* Wed 03 Dec 2014 01:20:51 AM JST
2000:
* Wed 03 Dec 2014 01:20:52 AM JST
2049:
* Wed 03 Dec 2014 01:20:52 AM JST
2086:
* Wed 03 Dec 2014 01:20:52 AM JST
2101:
* Wed 03 Dec 2014 01:20:52 AM JST
2119:
* Wed 03 Dec 2014 01:20:52 AM JST
2135:
* Wed 03 Dec 2014 01:20:52 AM JST
2401:
* Wed 03 Dec 2014 01:20:52 AM JST
2430:
* Wed 03 Dec 2014 01:20:52 AM JST
2431:
* Wed 03 Dec 2014 01:20:52 AM JST
2432:
* Wed 03 Dec 2014 01:20:52 AM JST
2433:
* Wed 03 Dec 2014 01:20:52 AM JST
2583:
* Wed 03 Dec 2014 01:20:53 AM JST
2628:
* Wed 03 Dec 2014 01:20:53 AM JST
2792:
* Wed 03 Dec 2014 01:20:53 AM JST
2811:
* Wed 03 Dec 2014 01:20:53 AM JST
2947:
* Wed 03 Dec 2014 01:20:53 AM JST
3050:
* Wed 03 Dec 2014 01:20:53 AM JST
3130:
* Wed 03 Dec 2014 01:20:53 AM JST
3306:
* Wed 03 Dec 2014 01:20:53 AM JST
3493:
* Wed 03 Dec 2014 01:20:53 AM JST
3632:
* Wed 03 Dec 2014 01:20:53 AM JST
3689:
* Wed 03 Dec 2014 01:20:54 AM JST
3690:
* Wed 03 Dec 2014 01:20:54 AM JST
4031:
* Wed 03 Dec 2014 01:20:54 AM JST
4094:
* Wed 03 Dec 2014 01:20:54 AM JST
4369:
* Wed 03 Dec 2014 01:20:54 AM JST
4373:
* Wed 03 Dec 2014 01:20:54 AM JST
4353:
* Wed 03 Dec 2014 01:20:54 AM JST
4569:
* Wed 03 Dec 2014 01:20:54 AM JST
4691:
* Wed 03 Dec 2014 01:20:54 AM JST
4899:
* Wed 03 Dec 2014 01:20:54 AM JST
5002:
* Wed 03 Dec 2014 01:20:54 AM JST
5050:
* Wed 03 Dec 2014 01:20:55 AM JST
5060:
* Wed 03 Dec 2014 01:20:55 AM JST
5061:
* Wed 03 Dec 2014 01:20:55 AM JST
5190:
* Wed 03 Dec 2014 01:20:55 AM JST
5222:
* Wed 03 Dec 2014 01:20:55 AM JST
5269:
* Wed 03 Dec 2014 01:20:55 AM JST
5308:
* Wed 03 Dec 2014 01:20:55 AM JST
5353:
* Wed 03 Dec 2014 01:20:55 AM JST
5432:
* Wed 03 Dec 2014 01:20:55 AM JST
5556:
* Wed 03 Dec 2014 01:20:55 AM JST
5672:
* Wed 03 Dec 2014 01:20:55 AM JST
5688:
* Wed 03 Dec 2014 01:20:56 AM JST
6000:
* Wed 03 Dec 2014 01:20:56 AM JST
6001:
* Wed 03 Dec 2014 01:20:56 AM JST
6002:
* Wed 03 Dec 2014 01:20:56 AM JST
6003:
* Wed 03 Dec 2014 01:20:56 AM JST
6004:
* Wed 03 Dec 2014 01:20:56 AM JST
6005:
* Wed 03 Dec 2014 01:20:56 AM JST
6006:
* Wed 03 Dec 2014 01:20:56 AM JST
6007:
* Wed 03 Dec 2014 01:20:56 AM JST
6346:
* Wed 03 Dec 2014 01:20:57 AM JST
6347:
* Wed 03 Dec 2014 01:20:57 AM JST
6444:
* Wed 03 Dec 2014 01:20:57 AM JST
6445:
* Wed 03 Dec 2014 01:20:57 AM JST
6446:
* Wed 03 Dec 2014 01:20:57 AM JST
7000:
* Wed 03 Dec 2014 01:20:57 AM JST
7001:
* Wed 03 Dec 2014 01:20:57 AM JST
7002:
* Wed 03 Dec 2014 01:20:57 AM JST
7003:
* Wed 03 Dec 2014 01:20:57 AM JST
7004:
* Wed 03 Dec 2014 01:20:58 AM JST
7005:
* Wed 03 Dec 2014 01:20:58 AM JST
7006:
* Wed 03 Dec 2014 01:20:58 AM JST
7007:
* Wed 03 Dec 2014 01:20:58 AM JST
7008:
* Wed 03 Dec 2014 01:20:58 AM JST
7009:
* Wed 03 Dec 2014 01:20:58 AM JST
7100:
* Wed 03 Dec 2014 01:20:58 AM JST
8080:
* Wed 03 Dec 2014 01:20:58 AM JST
9101:
* Wed 03 Dec 2014 01:20:58 AM JST
9102:
* Wed 03 Dec 2014 01:20:58 AM JST
9103:
* Wed 03 Dec 2014 01:20:59 AM JST
9667:
* Wed 03 Dec 2014 01:20:59 AM JST
10050:
* Wed 03 Dec 2014 01:20:59 AM JST
10051:
* Wed 03 Dec 2014 01:20:59 AM JST
10080:
* Wed 03 Dec 2014 01:20:59 AM JST
11371:
* Wed 03 Dec 2014 01:20:59 AM JST
13720:
* Wed 03 Dec 2014 01:20:59 AM JST
13721:
* Wed 03 Dec 2014 01:20:59 AM JST
13722:
* Wed 03 Dec 2014 01:20:59 AM JST
13724:
* Wed 03 Dec 2014 01:20:59 AM JST
13782:
* Wed 03 Dec 2014 01:21:00 AM JST
13783:
* Wed 03 Dec 2014 01:21:00 AM JST
22273:
* Wed 03 Dec 2014 01:21:00 AM JST
750:
* Wed 03 Dec 2014 01:21:00 AM JST
751:
* Wed 03 Dec 2014 01:21:00 AM JST
752:
* Wed 03 Dec 2014 01:21:00 AM JST
2102:
* Wed 03 Dec 2014 01:21:00 AM JST
2103:
* Wed 03 Dec 2014 01:21:00 AM JST
2104:
* Wed 03 Dec 2014 01:21:00 AM JST
106:
* Wed 03 Dec 2014 01:21:00 AM JST
779:
* Wed 03 Dec 2014 01:21:01 AM JST
808:
* Wed 03 Dec 2014 01:21:01 AM JST
1001:
* Wed 03 Dec 2014 01:21:01 AM JST
1210:
* Wed 03 Dec 2014 01:21:01 AM JST
2150:
* Wed 03 Dec 2014 01:21:01 AM JST
2988:
* Wed 03 Dec 2014 01:21:01 AM JST
2989:
* Wed 03 Dec 2014 01:21:01 AM JST
5354:
* Wed 03 Dec 2014 01:21:01 AM JST
5355:
* Wed 03 Dec 2014 01:21:01 AM JST
5555:
* Wed 03 Dec 2014 01:21:02 AM JST
8088:
* Wed 03 Dec 2014 01:21:02 AM JST
9359:
* Wed 03 Dec 2014 01:21:02 AM JST
10081:
* Wed 03 Dec 2014 01:21:02 AM JST
11201:
* Wed 03 Dec 2014 01:21:02 AM JST
15345:
* Wed 03 Dec 2014 01:21:02 AM JST
17001:
* Wed 03 Dec 2014 01:21:02 AM JST
17002:
* Wed 03 Dec 2014 01:21:02 AM JST
17003:
* Wed 03 Dec 2014 01:21:02 AM JST
20011:
* Wed 03 Dec 2014 01:21:02 AM JST
20012:
* Wed 03 Dec 2014 01:21:14 AM JST
27374:
* Wed 03 Dec 2014 01:21:20 AM JST
7: "echo",                     
9: "discard",                  
13: "daytime",                  
18: "msp",                      
19: "chargen",                  
21: "fsp",                      
22: "ssh",                      
37: "time",                     
39: "rlp",                      
49: "tacacs",                   
50: "re-mail-ck",               
53: "domain",                   
65: "tacacs-ds",                
67: "bootps",                   
68: "bootpc",                   
69: "tftp",                     
70: "gopher",                   
80: "http",                     
88: "kerberos",                 
104: "acr-nema",                 
105: "csnet-ns",                 
107: "rtelnet",                  
109: "pop2",                     
110: "pop3",                     
111: "sunrpc",                   
123: "ntp",                      
129: "pwdgen",                   
135: "loc-srv",                  
137: "netbios-ns",               
138: "netbios-dgm",              
139: "netbios-ssn",              
143: "imap2",                    
161: "snmp",                     
162: "snmp-trap",                
163: "cmip-man",                 
164: "cmip-agent",               
174: "mailq",                    
177: "xdmcp",                    
178: "nextstep",                 
179: "bgp",                      
191: "prospero",                 
194: "irc",                      
199: "smux",                     
201: "at-rtmp",                  
202: "at-nbp",                   
204: "at-echo",                  
206: "at-zis",                   
209: "qmtp",                     
210: "z3950",                    
213: "ipx",                      
220: "imap3",                    
345: "pawserv",                  
346: "zserv",                    
347: "fatserv",                  
369: "rpc2portmap",              
370: "codaauth2",                
371: "clearcase",                
372: "ulistserv",                
389: "ldap",                     
406: "imsp",                     
427: "svrloc",                   
443: "https",                    
444: "snpp",                     
445: "microsoft-ds",             
464: "kpasswd",                  
487: "saft",                     
500: "isakmp",                   
554: "rtsp",                     
607: "nqs",                      
610: "npmp-local",               
611: "npmp-gui",                 
612: "hmmp-ind",                 
623: "asf-rmcp",                 
628: "qmqp",                     
631: "ipp",                      
512: "biff",                     
513: "who",                      
514: "syslog",                   
517: "talk",                     
518: "ntalk",                    
520: "route",                    
525: "timed",                    
533: "netwall",                  
538: "gdomap",                   
546: "dhcpv6-client",            
547: "dhcpv6-server",            
548: "afpovertcp",               
549: "idfp",                     
563: "nntps",                    
587: "submission",               
636: "ldaps",                    
655: "tinc",                     
706: "silc",                     
765: "webster",                  
873: "rsync",                    
992: "telnets",                  
993: "imaps",                    
994: "ircs",                     
995: "pop3s",                    
1080: "socks",                    
1093: "proofd",                   
1094: "rootd",                    
1194: "openvpn",                  
1099: "rmiregistry",              
1214: "kazaa",                    
1241: "nessus",                   
1352: "lotusnote",                
1433: "ms-sql-s",                 
1434: "ms-sql-m",                 
1524: "ingreslock",               
1525: "prospero-np",              
1645: "datametrics",              
1646: "sa-msg-port",              
1649: "kermit",                   
1677: "groupwise",                
1701: "l2f",                      
1812: "radius",                   
1813: "radius-acct",              
1863: "msnp",                     
2000: "cisco-sccp",               
2049: "nfs",                      
2086: "gnunet",                   
2101: "rtcm-sc104",               
2119: "gsigatekeeper",            
2135: "gris",                     
2401: "cvspserver",               
2430: "venus",                    
2431: "venus-se",                 
2432: "codasrv",                  
2433: "codasrv-se",               
2583: "mon",                      
2628: "dict",                     
2792: "f5-globalsite",            
2811: "gsiftp",                   
2947: "gpsd",                     
3050: "gds-db",                   
3130: "icpv2",                    
3306: "mysql",                    
3493: "nut",                      
3632: "distcc",                   
3689: "daap",                     
3690: "svn",                      
4031: "suucp",                    
4094: "sysrqd",                   
4369: "epmd",                     
4373: "remctl",                   
4353: "f5-iquery",                
4569: "iax",                      
4691: "mtn",                      
4899: "radmin-port",              
5002: "rfe",                      
5050: "mmcc",                     
5060: "sip",                      
5061: "sip-tls",                  
5190: "aol",                      
5222: "xmpp-client",              
5269: "xmpp-server",              
5308: "cfengine",                 
5353: "mdns",                     
5432: "postgresql",               
5556: "freeciv",                  
5672: "amqp",                     
5688: "ggz",                      
6000: "x11",                      
6001: "x11-1",                    
6002: "x11-2",                    
6003: "x11-3",                    
6004: "x11-4",                    
6005: "x11-5",                    
6006: "x11-6",                    
6007: "x11-7",                    
6346: "gnutella-svc",             
6347: "gnutella-rtr",             
6444: "sge-qmaster",              
6445: "sge-execd",                
6446: "mysql-proxy",              
7000: "afs3-fileserver",            
7001: "afs3-callback",            
7002: "afs3-prserver",            
7003: "afs3-vlserver",            
7004: "afs3-kaserver",            
7005: "afs3-volser",              
7006: "afs3-errors",              
7007: "afs3-bos",                 
7008: "afs3-update",              
7009: "afs3-rmtsys",              
7100: "font-service",             
8080: "http-alt",                 
9101: "bacula-dir",               
9102: "bacula-fd",                
9103: "bacula-sd",                
9667: "xmms2",                    
10050: "zabbix-agent",             
10051: "zabbix-trapper",           
10080: "amanda",                   
11371: "hkp",                      
13720: "bprd",                     
13721: "bpdbm",                    
13722: "bpjava-msvc",              
13724: "vnetd",                    
13782: "bpcd",                     
13783: "vopied",                   
22273: "wnn6",                     
750: "kerberos4",                
751: "kerberos-master",          
752: "passwd-server",            
2102: "zephyr-srv",               
2103: "zephyr-clt",               
2104: "zephyr-hm",                
106: "poppassd",                 
779: "moira-ureg",               
808: "omirr",                    
1001: "customs",                  
1210: "predict",                  
2150: "ninstall",                 
2988: "afbackup",                 
2989: "afmbackup",                
5354: "noclog",                   
5355: "hostmon",                  
5555: "rplay",                    
8088: "omniorb",                  
9359: "mandelspawn",              
10081: "kamanda",                  
11201: "smsqp",                    
15345: "xpilot",                   
17001: "sgi-cmsd",                 
17002: "sgi-crsd",                 
17003: "sgi-gcd",                  
20011: "isdnlog",                  
20012: "vboxd",                    
27374: "asp",                      

* Wed 03 Dec 2014 01:21:59 AM JST
7: "echo",                     
9: "discard",                  
13: "daytime",                  
18: "msp",                      
19: "chargen",                  
21: "fsp",                      
22: "ssh",                      
37: "time",                     
39: "rlp",                      
49: "tacacs",                   
50: "re-mail-ck",               
53: "domain",                   
65: "tacacs-ds",                
67: "bootps",                   
68: "bootpc",                   
69: "tftp",                     
70: "gopher",                   
80: "http",                     
88: "kerberos",                 
104: "acr-nema",                 
105: "csnet-ns",                 
106: "poppassd",                 
107: "rtelnet",                  
109: "pop2",                     
110: "pop3",                     
111: "sunrpc",                   
123: "ntp",                      
129: "pwdgen",                   
135: "loc-srv",                  
137: "netbios-ns",               
138: "netbios-dgm",              
139: "netbios-ssn",              
143: "imap2",                    
161: "snmp",                     
162: "snmp-trap",                
163: "cmip-man",                 
164: "cmip-agent",               
174: "mailq",                    
177: "xdmcp",                    
178: "nextstep",                 
179: "bgp",                      
191: "prospero",                 
194: "irc",                      
199: "smux",                     
201: "at-rtmp",                  
202: "at-nbp",                   
204: "at-echo",                  
206: "at-zis",                   
209: "qmtp",                     
210: "z3950",                    
213: "ipx",                      
220: "imap3",                    
345: "pawserv",                  
346: "zserv",                    
347: "fatserv",                  
369: "rpc2portmap",              
370: "codaauth2",                
371: "clearcase",                
372: "ulistserv",                
389: "ldap",                     
406: "imsp",                     
427: "svrloc",                   
443: "https",                    
444: "snpp",                     
445: "microsoft-ds",             
464: "kpasswd",                  
487: "saft",                     
500: "isakmp",                   
512: "biff",                     
513: "who",                      
514: "syslog",                   
517: "talk",                     
518: "ntalk",                    
520: "route",                    
525: "timed",                    
533: "netwall",                  
538: "gdomap",                   
546: "dhcpv6-client",            
547: "dhcpv6-server",            
548: "afpovertcp",               
549: "idfp",                     
554: "rtsp",                     
563: "nntps",                    
587: "submission",               
607: "nqs",                      
610: "npmp-local",               
611: "npmp-gui",                 
612: "hmmp-ind",                 
623: "asf-rmcp",                 
628: "qmqp",                     
631: "ipp",                      
636: "ldaps",                    
655: "tinc",                     
706: "silc",                     
750: "kerberos4",                
751: "kerberos-master",          
752: "passwd-server",            
765: "webster",                  
779: "moira-ureg",               
808: "omirr",                    
873: "rsync",                    
992: "telnets",                  
993: "imaps",                    
994: "ircs",                     
995: "pop3s",                    
1001: "customs",                  
1080: "socks",                    
1093: "proofd",                   
1094: "rootd",                    
1099: "rmiregistry",              
1194: "openvpn",                  
1210: "predict",                  
1214: "kazaa",                    
1241: "nessus",                   
1352: "lotusnote",                
1433: "ms-sql-s",                 
1434: "ms-sql-m",                 
1524: "ingreslock",               
1525: "prospero-np",              
1645: "datametrics",              
1646: "sa-msg-port",              
1649: "kermit",                   
1677: "groupwise",                
1701: "l2f",                      
1812: "radius",                   
1813: "radius-acct",              
1863: "msnp",                     
2000: "cisco-sccp",               
2049: "nfs",                      
2086: "gnunet",                   
2101: "rtcm-sc104",               
2102: "zephyr-srv",               
2103: "zephyr-clt",               
2104: "zephyr-hm",                
2119: "gsigatekeeper",            
2135: "gris",                     
2150: "ninstall",                 
2401: "cvspserver",               
2430: "venus",                    
2431: "venus-se",                 
2432: "codasrv",                  
2433: "codasrv-se",               
2583: "mon",                      
2628: "dict",                     
2792: "f5-globalsite",            
2811: "gsiftp",                   
2947: "gpsd",                     
2988: "afbackup",                 
2989: "afmbackup",                
3050: "gds-db",                   
3130: "icpv2",                    
3306: "mysql",                    
3493: "nut",                      
3632: "distcc",                   
3689: "daap",                     
3690: "svn",                      
4031: "suucp",                    
4094: "sysrqd",                   
4353: "f5-iquery",                
4369: "epmd",                     
4373: "remctl",                   
4569: "iax",                      
4691: "mtn",                      
4899: "radmin-port",              
5002: "rfe",                      
5050: "mmcc",                     
5060: "sip",                      
5061: "sip-tls",                  
5190: "aol",                      
5222: "xmpp-client",              
5269: "xmpp-server",              
5308: "cfengine",                 
5353: "mdns",                     
5354: "noclog",                   
5355: "hostmon",                  
5432: "postgresql",               
5555: "rplay",                    
5556: "freeciv",                  
5672: "amqp",                     
5688: "ggz",                      
6000: "x11",                      
6001: "x11-1",                    
6002: "x11-2",                    
6003: "x11-3",                    
6004: "x11-4",                    
6005: "x11-5",                    
6006: "x11-6",                    
6007: "x11-7",                    
6346: "gnutella-svc",             
6347: "gnutella-rtr",             
6444: "sge-qmaster",              
6445: "sge-execd",                
6446: "mysql-proxy",              
7000: "afs3-fileserver",            
7001: "afs3-callback",            
7002: "afs3-prserver",            
7003: "afs3-vlserver",            
7004: "afs3-kaserver",            
7005: "afs3-volser",              
7006: "afs3-errors",              
7007: "afs3-bos",                 
7008: "afs3-update",              
7009: "afs3-rmtsys",              
7100: "font-service",             
8080: "http-alt",                 
8088: "omniorb",                  
9101: "bacula-dir",               
9102: "bacula-fd",                
9103: "bacula-sd",                
9359: "mandelspawn",              
9667: "xmms2",                    
10050: "zabbix-agent",             
10051: "zabbix-trapper",           
10080: "amanda",                   
10081: "kamanda",                  
11201: "smsqp",                    
11371: "hkp",                      
13720: "bprd",                     
13721: "bpdbm",                    
13722: "bpjava-msvc",              
13724: "vnetd",                    
13782: "bpcd",                     
13783: "vopied",                   
15345: "xpilot",                   
17001: "sgi-cmsd",                 
17002: "sgi-crsd",                 
17003: "sgi-gcd",                  
20011: "isdnlog",                  
20012: "vboxd",                    
22273: "wnn6",                     
27374: "asp",                      

* Wed 03 Dec 2014 01:22:51 AM JST
        
* Wed 03 Dec 2014 01:26:42 AM JST
    # Attributes:
    _min = None  # () 
    _max = None  # () 
    
    # Operations
    def __add__(self, port):
        """function __add__
        
        port: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __and__(self, other):
        """function __and__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __div__(self, other):
        """function __div__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __divmod__(self, other):
        """function __divmod__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __lshift__(self, other):
        """function __lshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __mod__(self, other):
        """function __mod__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __mul__(self, other):
        """function __mul__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __or__(self, other):
        """function __or__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __radd__(self, other):
        """function __radd__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __pow__(self, other):
        """function __pow__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rand__(self, other):
        """function __rand__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rdiv__(self, other):
        """function __rdiv__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rdivmod__(self, other):
        """function __rdivmod__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rlshift__(self, other):
        """function __rlshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rmod__(self, other):
        """function __rmod__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rmul__(self, other):
        """function __rmul__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ror__(self, other):
        """function __ror__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rpow__(self, other):
        """function __rpow__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rrshift__(self, other):
        """function __rrshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rshift__(self, other):
        """function __rshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rsub__(self, other):
        """function __rsub__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rxor__(self, other):
        """function __rxor__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __sub__(self, other):
        """function __sub__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __xor__(self, other):
        """function __xor__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __check_range(self, port):
        """function check_range
        
        port: 
        
        returns 
        """
        return None # should raise NotImplementedError()

* Wed 03 Dec 2014 01:26:57 AM JST
None  # () 
* Wed 03 Dec 2014 01:27:04 AM JST
None  # () 
* Wed 03 Dec 2014 01:29:39 AM JST

* Wed 03 Dec 2014 01:29:39 AM JST

* Wed 03 Dec 2014 01:29:40 AM JST
        self._port = port

* Wed 03 Dec 2014 01:34:10 AM JST
= 65536
* Wed 03 Dec 2014 01:38:09 AM JST

* Wed 03 Dec 2014 01:38:09 AM JST

* Wed 03 Dec 2014 01:38:09 AM JST
        return None # should raise NotImplementedError()

* Wed 03 Dec 2014 01:39:08 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 01:39:25 AM JST
self
* Wed 03 Dec 2014 01:39:38 AM JST
int()
* Wed 03 Dec 2014 01:40:02 AM JST
super(Port, self).__add__(int(port))
* Wed 03 Dec 2014 01:41:05 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 01:41:18 AM JST
other
* Wed 03 Dec 2014 01:41:34 AM JST
port
* Wed 03 Dec 2014 01:41:39 AM JST
port
* Wed 03 Dec 2014 01:42:33 AM JST

* Wed 03 Dec 2014 01:42:33 AM JST

* Wed 03 Dec 2014 01:42:33 AM JST
        return

* Wed 03 Dec 2014 01:43:22 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 01:45:51 AM JST
self)
* Wed 03 Dec 2014 01:45:52 AM JST
int(self)
* Wed 03 Dec 2014 01:45:52 AM JST
num = int(self)
* Wed 03 Dec 2014 01:46:09 AM JST

* Wed 03 Dec 2014 01:46:09 AM JST

* Wed 03 Dec 2014 01:46:10 AM JST
        super(Port, self).__iadd__(int(other))

* Wed 03 Dec 2014 01:48:24 AM JST
numerator
* Wed 03 Dec 2014 01:51:08 AM JST
self = 
* Wed 03 Dec 2014 01:52:17 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 01:53:00 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 01:54:33 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 01:55:25 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 01:56:52 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 01:57:37 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 01:58:33 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 02:31:04 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 02:33:32 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 02:34:16 AM JST
__cla
* Wed 03 Dec 2014 02:34:55 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 02:37:47 AM JST
self.__class__(super)
* Wed 03 Dec 2014 02:41:13 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 02:41:55 AM JST
__cla
* Wed 03 Dec 2014 02:41:55 AM JST
self.__cla
* Wed 03 Dec 2014 02:44:03 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 02:44:39 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 02:46:00 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 02:46:32 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 02:49:18 AM JST
    def _check_range(self, port):
        """function check_range

        port:

        returns
        """
        if port < self.min or self.max < port:
            # TODO: (Atami) [2014/12/03]
            raise StandardError()


* Wed 03 Dec 2014 02:49:49 AM JST
port 
* Wed 03 Dec 2014 02:50:01 AM JST

* Wed 03 Dec 2014 02:50:01 AM JST

* Wed 03 Dec 2014 02:50:03 AM JST

* Wed 03 Dec 2014 02:50:03 AM JST

* Wed 03 Dec 2014 02:50:03 AM JST
        if isinstance:

* Wed 03 Dec 2014 02:50:49 AM JST
    def __repr__(self):
        """function __repr__

        returns
        """
        return '{0.__class__.__name__}({0})'.format(self)


* Wed 03 Dec 2014 02:52:41 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 02:53:58 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 02:54:02 AM JST
self.
* Wed 03 Dec 2014 02:54:20 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 02:55:03 AM JST
None
* Wed 03 Dec 2014 02:55:19 AM JST
None # should raise NotImplementedError()
* Wed 03 Dec 2014 02:55:37 AM JST
__class__
* Wed 03 Dec 2014 03:02:27 AM JST
from socket import socket, AF_INET, SOCK_STREAM
* Wed 03 Dec 2014 03:02:41 AM JST
socket.
* Wed 03 Dec 2014 03:03:30 AM JST
socke
* Wed 03 Dec 2014 03:03:30 AM JST
from socke
* Wed 03 Dec 2014 03:03:40 AM JST
socket(socket.AF_INET, socket.SOCK_STREAM)
* Wed 03 Dec 2014 03:03:50 AM JST
socket(AF_INET, SOCK_STREAM)
* Wed 03 Dec 2014 03:10:45 AM JST
socket.
* Wed 03 Dec 2014 03:10:55 AM JST
retur
* Wed 03 Dec 2014 03:13:55 AM JST
port
* Wed 03 Dec 2014 03:16:42 AM JST
socketutil/
* Wed 03 Dec 2014 03:16:43 AM JST
t1/socketutil/
* Wed 03 Dec 2014 03:17:11 AM JST

* Wed 03 Dec 2014 03:17:11 AM JST

* Wed 03 Dec 2014 03:17:11 AM JST
from t1.socketutil.port import Port, TCPPort, UDPPort

* Wed 03 Dec 2014 03:18:29 AM JST
TCPPort
* Wed 03 Dec 2014 03:20:10 AM JST
TCPPort
* Wed 03 Dec 2014 03:20:59 AM JST
self
* Wed 03 Dec 2014 03:22:10 AM JST
kagi
* Wed 03 Dec 2014 03:38:59 AM JST
'taka16.no-ip.info'
* Wed 03 Dec 2014 03:39:31 AM JST
12316
* Wed 03 Dec 2014 03:40:15 AM JST
'root'
* Wed 03 Dec 2014 03:40:45 AM JST
'~/.ssh/kagi'
* Wed 03 Dec 2014 04:15:23 AM JST
socket.socket(socket.AF_INET, socket.SOCK_STREAM)
* Wed 03 Dec 2014 04:15:58 AM JST
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((host, self))
        return sock

* Wed 03 Dec 2014 04:16:02 AM JST

* Wed 03 Dec 2014 04:16:03 AM JST

* Wed 03 Dec 2014 04:16:03 AM JST
        return sock

* Wed 03 Dec 2014 04:17:46 AM JST
    def connect_ex(self, host, timeout=None):
        r"""SUMMARY
        
        connect_ex(host)
        
        @Arguments:
        - `host`:
        
        @Return:

        @Error:
        """
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        if timeout:
            sock.settimeout(timeout)
        return sock.connect_ex((host, self))

* Wed 03 Dec 2014 04:18:08 AM JST
socket.SOCK_DGRAM
* Wed 03 Dec 2014 06:34:47 PM JST
'rb'))
* Wed 03 Dec 2014 06:34:48 PM JST
mode='rb'))
* Wed 03 Dec 2014 06:36:21 PM JST
PORT
* Wed 03 Dec 2014 06:36:22 PM JST
p
* Wed 03 Dec 2014 06:36:22 PM JST
CLOSE_p
* Wed 03 Dec 2014 06:45:55 PM JST
get_name()
* Wed 03 Dec 2014 06:46:00 PM JST
name
* Wed 03 Dec 2014 06:58:56 PM JST
agent.Agent().get_keys()[0].get_fingerprint()
* Wed 03 Dec 2014 07:01:31 PM JST
SSH_AUTH_SOCK
* Wed 03 Dec 2014 07:04:46 PM JST
get_fingerprint()
* Wed 03 Dec 2014 07:05:44 PM JST
get_name()
* Wed 03 Dec 2014 07:07:36 PM JST
get_base64()
* Thu 04 Dec 2014 01:49:50 AM JST
netifaces
* Thu 04 Dec 2014 01:51:42 AM JST
1]
* Thu 04 Dec 2014 01:51:43 AM JST
interfaces()[-1]
* Thu 04 Dec 2014 01:56:17 AM JST

* Thu 04 Dec 2014 01:56:35 AM JST
http://stackoverflow.com/questions/3764291/checking-network-connection
* Thu 04 Dec 2014 04:53:02 AM JST
http://download.xnview.com/XnViewMP-linux.deb
* Thu 04 Dec 2014 04:53:58 AM JST
deb')
* Thu 04 Dec 2014 04:54:00 AM JST
Path(
* Thu 04 Dec 2014 04:54:16 AM JST
Path(
* Thu 04 Dec 2014 04:54:34 AM JST
DEST
* Thu 04 Dec 2014 04:55:07 AM JST
from pySmartDL import SmartDL
* Thu 04 Dec 2014 05:05:18 AM JST
from mypath import MyArchive
* Thu 04 Dec 2014 05:05:45 AM JST
from mypath import MyArchive
* Thu 04 Dec 2014 05:09:08 AM JST
/usr/bin/xnview
* Thu 04 Dec 2014 05:09:31 AM JST
/opt/XnView/XnView
* Thu 04 Dec 2014 05:14:21 AM JST
WhatsNew.txt
* Thu 04 Dec 2014 05:15:20 AM JST
Path('/opt/XnView/WhatsNew.txt')
* Thu 04 Dec 2014 05:18:47 AM JST
'Changelog 0.70:\r\n'
* Thu 04 Dec 2014 05:19:30 AM JST
.split()
* Thu 04 Dec 2014 05:20:11 AM JST
'Changelog 0.70:\r\n'
* Thu 04 Dec 2014 05:20:44 AM JST
'Changelog 0.70:\r\n'
* Thu 04 Dec 2014 05:21:47 AM JST
"[0-9]+\\.[0-9]+"
* Thu 04 Dec 2014 05:22:30 AM JST
'Changelog 0.70:\r\n'
* Thu 04 Dec 2014 05:23:15 AM JST
'Changelog 0.70:\r\n'
* Thu 04 Dec 2014 05:23:42 AM JST
'Changelog 0.70:\r\n'
* Thu 04 Dec 2014 05:24:01 AM JST
string
* Thu 04 Dec 2014 05:25:10 AM JST
"[0-9]+\.[0-9]+"
* Thu 04 Dec 2014 05:26:58 AM JST
version = 
* Thu 04 Dec 2014 05:28:48 AM JST
pth
* Thu 04 Dec 2014 05:32:51 AM JST
copy
* Thu 04 Dec 2014 05:37:24 AM JST
Path('/tmp').joinpath(f.name)
* Thu 04 Dec 2014 05:37:36 AM JST
Path('/tmp').joinpath(f.name)
* Thu 04 Dec 2014 05:38:52 AM JST
Path(u'WhatsNew0.70.txt')
* Thu 04 Dec 2014 05:39:11 AM JST
Path(u'WhatsNew0.70.txt')
* Thu 04 Dec 2014 05:40:42 AM JST
parent
* Thu 04 Dec 2014 05:40:53 AM JST
path
* Thu 04 Dec 2014 05:41:52 AM JST
fff.basename + 'tes' + fff.ext
* Thu 04 Dec 2014 05:42:20 AM JST
basename
* Thu 04 Dec 2014 05:43:22 AM JST

* Thu 04 Dec 2014 05:43:23 AM JST

* Thu 04 Dec 2014 05:43:23 AM JST
    ext = src.ext

* Thu 04 Dec 2014 05:43:23 AM JST
    ext = src.ext

* Thu 04 Dec 2014 05:43:23 AM JST
    ext = src.ext
    newname = name + version

* Thu 04 Dec 2014 05:43:25 AM JST

* Thu 04 Dec 2014 05:43:25 AM JST

* Thu 04 Dec 2014 05:43:25 AM JST
    name = src.basename

* Thu 04 Dec 2014 05:45:16 AM JST
WhatsNew0.70tes.txt
* Thu 04 Dec 2014 05:49:49 AM JST
path
* Thu 04 Dec 2014 11:17:05 AM JST
'Password: '
* Thu 04 Dec 2014 11:19:11 AM JST
form 
* Thu 04 Dec 2014 11:22:34 AM JST
definit
* Thu 04 Dec 2014 11:25:19 AM JST
image
* Thu 04 Dec 2014 11:28:47 AM JST

* Thu 04 Dec 2014 11:28:50 AM JST
CmdlinePassGetter
* Thu 04 Dec 2014 11:30:19 AM JST

* Thu 04 Dec 2014 11:30:19 AM JST

* Thu 04 Dec 2014 11:30:19 AM JST
from getpass import getpass

* Thu 04 Dec 2014 11:31:10 AM JST

* Thu 04 Dec 2014 11:31:10 AM JST

* Thu 04 Dec 2014 11:31:10 AM JST
from getpass import getpass

* Thu 04 Dec 2014 11:34:44 AM JST
*
* Thu 04 Dec 2014 11:35:20 AM JST
getpasswd
* Thu 04 Dec 2014 11:35:31 AM JST

* Thu 04 Dec 2014 11:35:33 AM JST
CmdlinePassGetter
* Thu 04 Dec 2014 11:35:40 AM JST
EasyGUIPassGetter
* Thu 04 Dec 2014 11:39:59 AM JST
get
* Thu 04 Dec 2014 11:39:59 AM JST
form get
* Thu 04 Dec 2014 11:40:26 AM JST
from getpasswd import getpasswd
* Thu 04 Dec 2014 11:43:12 AM JST
inputpass
* Thu 04 Dec 2014 11:43:18 AM JST

* Thu 04 Dec 2014 11:43:18 AM JST

* Thu 04 Dec 2014 11:43:18 AM JST
import subprocess as _sbp

* Thu 04 Dec 2014 02:31:18 PM JST
pass
* Thu 04 Dec 2014 02:31:38 PM JST

* Thu 04 Dec 2014 02:31:38 PM JST

* Thu 04 Dec 2014 02:31:38 PM JST
from easygui import passwordbox

* Thu 04 Dec 2014 02:32:52 PM JST
try:
   ....:     import dakjk
   ....: except ImportError as err:
   ....:     pass
* Thu 04 Dec 2014 02:33:01 PM JST
....: 
* Thu 04 Dec 2014 02:33:03 PM JST
....: 
* Thu 04 Dec 2014 02:33:06 PM JST
....:
* Thu 04 Dec 2014 02:33:11 PM JST
try:
    import dakjk
except ImportError as err:
    pass

* Thu 04 Dec 2014 02:35:34 PM JST
args
* Thu 04 Dec 2014 02:37:22 PM JST
sys.exc_info
* Thu 04 Dec 2014 02:39:39 PM JST
ImportError
* Thu 04 Dec 2014 02:47:06 PM JST

* Thu 04 Dec 2014 02:47:06 PM JST

* Thu 04 Dec 2014 02:47:06 PM JST
try:

* Thu 04 Dec 2014 02:51:10 PM JST
error
* Thu 04 Dec 2014 02:53:14 PM JST
logtes2()
* Thu 04 Dec 2014 02:53:42 PM JST
import logging
from path import Path
from logging.handlers import RotatingFileHandler

* Thu 04 Dec 2014 02:53:48 PM JST
 as _sys
* Thu 04 Dec 2014 02:53:49 PM JST
 as _os
* Thu 04 Dec 2014 02:54:30 PM JST
LOG
* Thu 04 Dec 2014 02:56:01 PM JST
Error
* Thu 04 Dec 2014 02:56:25 PM JST
DEBUG
* Thu 04 Dec 2014 02:56:46 PM JST
FATAL
* Thu 04 Dec 2014 02:57:24 PM JST

* Thu 04 Dec 2014 02:57:26 PM JST
FATAL
* Thu 04 Dec 2014 03:04:07 PM JST

* Thu 04 Dec 2014 03:04:07 PM JST

* Thu 04 Dec 2014 03:04:07 PM JST
        self._parent = parent

* Thu 04 Dec 2014 03:04:07 PM JST
        self._parent = parent

* Thu 04 Dec 2014 03:04:07 PM JST
        self._parent = parent
        self._id = id

* Thu 04 Dec 2014 03:08:02 PM JST
MyClass
* Thu 04 Dec 2014 03:08:40 PM JST
WXPassBox
* Thu 04 Dec 2014 03:13:21 PM JST
import wx

class Frame(wx.Frame):
    def __init__(self,*args,**kwargs):
        wx.Frame.__init__(self,*args,**kwargs)
        panel= wx.Panel(self)
        self.password_shown= False

        sizer= wx.BoxSizer(wx.VERTICAL)
        self.password_sizer= wx.BoxSizer(wx.HORIZONTAL)
        self.text_password= wx.TextCtrl(panel,style=wx.TE_PASSWORD)
        self.password_sizer.Add(self.text_password,0,wx.ALL,5)
        self.text_no_password= wx.TextCtrl(panel)
        self.text_no_password.Hide()
        self.password_sizer.Add(self.text_no_password,0,wx.ALL,5)
        sizer.Add(self.password_sizer)
        self.button= wx.Button(panel,-1,"Toggle Password")
        sizer.Add(self.button,0,wx.ALL,5)
        self.button.Bind(wx.EVT_BUTTON,self.OnButton)
        panel.SetSizer(sizer)

        self.Show()

    def OnButton(self,event):
        self.text_password.Show(self.password_shown)
        self.text_no_password.Show(not self.password_shown)
        if not self.password_shown:
            self.text_no_password.SetValue(self.text_password.GetValue())
            self.text_no_password.SetFocus()
        else:
            self.text_password.SetValue(self.text_no_password.GetValue())
            self.text_password.SetFocus()
        self.text_password.GetParent().Layout()
        self.password_shown= not self.password_shown


if __name__ == "__main__":
    app= wx.App(0)
    Frame(None)
    app.MainLoop()
* Thu 04 Dec 2014 03:15:36 PM JST
class LoginDialog(wx.Dialog):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Dialog.__init__(self, None, title="Login")

        self.mainSizer = wx.BoxSizer(wx.VERTICAL)
        btnSizer = wx.BoxSizer(wx.HORIZONTAL)

        userLbl = wx.StaticText(self, label="Username:")
        userTxt = wx.TextCtrl(self)
        self.addWidgets(userLbl, userTxt)

        passLbl = wx.StaticText(self, label="Password:")
        passTxt = wx.TextCtrl(self, style=wx.TE_PASSWORD)
        self.addWidgets(passLbl, passTxt)

        okBtn = wx.Button(self, wx.ID_OK)
        btnSizer.Add(okBtn, 0, wx.CENTER|wx.ALL, 5)
        cancelBtn = wx.Button(self, wx.ID_CANCEL)
        btnSizer.Add(cancelBtn, 0, wx.CENTER|wx.ALL, 5)

        self.mainSizer.Add(btnSizer, 0, wx.CENTER)
        self.SetSizer(self.mainSizer)

    #----------------------------------------------------------------------
    def addWidgets(self, lbl, txt):
        """
        """
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer.Add(lbl, 0, wx.ALL|wx.CENTER, 5)
        sizer.Add(txt, 1, wx.EXPAND|wx.ALL, 5)
        self.mainSizer.Add(sizer, 0, wx.EXPAND)

if __name__ == "__main__":
    app = wx.App(False)
    dlg = LoginDialog()
    dlg.ShowModal()
    dlg.Destroy()
    app.MainLoop()
* Thu 04 Dec 2014 03:23:16 PM JST
wx.TE_PASSWORD
* Thu 04 Dec 2014 03:29:04 PM JST
app = wx.App(False)
* Thu 04 Dec 2014 03:30:45 PM JST

* Thu 04 Dec 2014 03:30:45 PM JST

* Thu 04 Dec 2014 03:30:45 PM JST
        global pwd

* Thu 04 Dec 2014 03:31:01 PM JST
PASSWORD
* Thu 04 Dec 2014 03:31:28 PM JST
passwd()
* Thu 04 Dec 2014 03:40:34 PM JST
defaultValue
* Thu 04 Dec 2014 03:41:07 PM JST
message
* Thu 04 Dec 2014 03:42:56 PM JST
# | wx.CENTRE
* Thu 04 Dec 2014 03:43:08 PM JST
None
* Thu 04 Dec 2014 03:56:17 PM JST
wx.TextEntryDialog
* Thu 04 Dec 2014 04:53:52 PM JST
max
* Thu 04 Dec 2014 04:54:14 PM JST

* Thu 04 Dec 2014 04:54:14 PM JST

* Thu 04 Dec 2014 04:54:14 PM JST
import tesclass2

* Fri 05 Dec 2014 01:27:36 AM JST

* Fri 05 Dec 2014 01:27:36 AM JST

* Fri 05 Dec 2014 01:27:36 AM JST
import sys

* Fri 05 Dec 2014 01:30:07 AM JST
    app = wx.App(False)
    box2 = wx.TextEntryDialog(
        parent=None, message='Enter Password', caption='Password',
        defaultValue='',
        style=wx.TE_PASSWORD | wx.OK | wx.CANCEL, pos=wx.Point(1, 1))

* Fri 05 Dec 2014 01:30:32 AM JST
defaultValue=''
* Fri 05 Dec 2014 01:30:37 AM JST
_defualt
* Fri 05 Dec 2014 01:30:48 AM JST
    pwd = ''
    if box2.ShowModal() == wx.ID_OK:
        pwd = box2.GetValue()
    box2.Destroy()
    app.MainLoop()
    return pwd

* Fri 05 Dec 2014 01:32:13 AM JST
WXPassGetter
* Fri 05 Dec 2014 01:32:41 AM JST
WXPassGetter
* Fri 05 Dec 2014 01:35:17 AM JST
from getpasswd import WXPassGetter
w=WXPassGetter()
w.getpass()

* Fri 05 Dec 2014 01:36:19 AM JST
xrange
* Fri 05 Dec 2014 01:36:31 AM JST
1
* Fri 05 Dec 2014 01:36:55 AM JST
from getpasswd import WXPassGetter
w=WXPassGetter()
w.getpass()

* Fri 05 Dec 2014 01:37:40 AM JST
wx.Point(self.x, self.y)
* Fri 05 Dec 2014 01:37:54 AM JST
self.
* Fri 05 Dec 2014 01:37:55 AM JST
self.
* Fri 05 Dec 2014 01:37:56 AM JST

* Fri 05 Dec 2014 01:37:56 AM JST

* Fri 05 Dec 2014 01:37:56 AM JST
        self.x = x

* Fri 05 Dec 2014 01:37:57 AM JST
        self.x = x

* Fri 05 Dec 2014 01:37:57 AM JST
        self.x = x
        self.y = y

* Fri 05 Dec 2014 01:40:30 AM JST
from peak.rules import dispatch
* Fri 05 Dec 2014 01:44:01 AM JST
from peak.rules import dispatch
* Fri 05 Dec 2014 01:44:03 AM JST
dispatch
* Fri 05 Dec 2014 01:44:11 AM JST
dispatch
* Fri 05 Dec 2014 01:44:12 AM JST
from peak.rules import dispatch
* Fri 05 Dec 2014 01:44:14 AM JST
dispatch
* Fri 05 Dec 2014 01:44:16 AM JST
rules
* Fri 05 Dec 2014 01:51:24 AM JST
from peak.rules import dispatch
* Fri 05 Dec 2014 01:53:10 AM JST
args[0]
* Fri 05 Dec 2014 01:59:46 AM JST
and 
* Fri 05 Dec 2014 01:59:46 AM JST
kwargs) and 
* Fri 05 Dec 2014 01:59:46 AM JST
len(kwargs) and 
* Fri 05 Dec 2014 01:59:51 AM JST
and
* Fri 05 Dec 2014 02:00:45 AM JST
kwargs.get('y'None)
* Fri 05 Dec 2014 02:00:51 AM JST

* Fri 05 Dec 2014 02:00:51 AM JST

* Fri 05 Dec 2014 02:00:51 AM JST
        y = 

* Fri 05 Dec 2014 02:01:13 AM JST
or 
* Fri 05 Dec 2014 02:01:14 AM JST
x or 
* Fri 05 Dec 2014 02:01:14 AM JST
x = x or 
* Fri 05 Dec 2014 02:07:46 AM JST
from getpasswd import WXPassGetter
w=WXPassGetter()
w.getpass()

* Fri 05 Dec 2014 02:07:48 AM JST
from getpasswd import WXPassGetter
w=WXPassGetter()

* Fri 05 Dec 2014 02:09:13 AM JST
.when
* Fri 05 Dec 2014 02:09:34 AM JST
setpoint
* Fri 05 Dec 2014 02:09:55 AM JST
__
* Fri 05 Dec 2014 02:10:21 AM JST
from getpasswd import WXPassGetter
w=WXPassGetter()

* Fri 05 Dec 2014 02:13:45 AM JST
w.setpoint(wx.Point(2000, 500))
* Fri 05 Dec 2014 02:14:06 AM JST
setpoint(x=10)
* Fri 05 Dec 2014 02:14:14 AM JST
setpoint(x=500, y=200)
* Fri 05 Dec 2014 02:14:25 AM JST
setpoint(1000, 300)
* Fri 05 Dec 2014 02:16:17 AM JST
warn
* Fri 05 Dec 2014 02:18:43 AM JST
from getpasswd import WXPassGetter
w=WXPassGetter()

* Fri 05 Dec 2014 02:20:53 AM JST
from getpasswd import WXPassGetter
w=WXPassGetter()

* Fri 05 Dec 2014 02:21:51 AM JST
_
* Fri 05 Dec 2014 02:21:51 AM JST
self._
* Fri 05 Dec 2014 02:21:57 AM JST
None
* Fri 05 Dec 2014 02:22:19 AM JST
_
* Fri 05 Dec 2014 02:22:42 AM JST
from getpasswd import WXPassGetter
w=WXPassGetter()

* Fri 05 Dec 2014 02:24:58 AM JST
class PassGetter(object):
    r"""PassGetter

    PassGetter is a object.
    Responsibility:
    """
    __metaclass__ = ABCMeta

    @abstractmethod
    def getpass(self, prompt='Password: '):
        pass



* Fri 05 Dec 2014 02:25:10 AM JST
from abc import ABCMeta, abstractmethod
* Fri 05 Dec 2014 02:25:32 AM JST

* Fri 05 Dec 2014 02:25:33 AM JST

* Fri 05 Dec 2014 02:25:33 AM JST
from abc import ABCMeta, abstractmethod

* Fri 05 Dec 2014 02:25:38 AM JST

* Fri 05 Dec 2014 02:25:38 AM JST

* Fri 05 Dec 2014 02:25:38 AM JST
from getpass import getpass

* Fri 05 Dec 2014 02:25:48 AM JST
class CmdlinePassGetter(PassGetter):
    r"""CmdlinePassGetter

    CmdlinePassGetter is a PassGetter.
    Responsibility:
    """
    def __init__(self, stream=None):
        r"""

        @Arguments:
        - `stream`:
        """
        self._stream = stream

    def getpass(self, prompt='Password: '):
        r"""SUMMARY

        getpass(prompt='Password: ')

        @Arguments:
        - `prompt`:

        @Return:

        @Error:
        """
        return getpass(prompt, self._stream)

    def getstream(self, ):
        r"""SUMMARY

        getstream()

        @Return:

        @Error:
        """
        return self._stream

    def setstream(self, stream=None):
        r"""SUMMARY

        setstream(stream=None)

        @Arguments:
        - `stream`:

        @Return:

        @Error:
        """
        self._stream = stream




* Fri 05 Dec 2014 02:26:48 AM JST
from easygui import passwordbox
* Fri 05 Dec 2014 02:26:53 AM JST

* Fri 05 Dec 2014 02:26:53 AM JST

* Fri 05 Dec 2014 02:26:53 AM JST
from easygui import passwordbox

* Fri 05 Dec 2014 02:27:00 AM JST
class EasyGUIPassGetter(PassGetter):
    r"""EasyGUIPassGetter

    EasyGUIPassGetter is a PassGetter.
    Responsibility:
    """
    def __init__(self, title='Input password', default='',
                 image=None, root=None):
        r"""

        @Arguments:
        - `title`:
        - `default`:
        - `image`:
        - `root`:
        """
        self._title = title
        self._default = default
        self._image = image
        self._root = root

    def gettitle(self, ):
        r"""SUMMARY

        gettitle()

        @Return:

        @Error:
        """
        return self._title

    def settitle(self, title='Input password'):
        r"""SUMMARY

        settitle(title='Input password')

        @Arguments:
        - `title`:

        @Return:

        @Error:
        """
        self._title = title

    def getdefault(self, ):
        r"""SUMMARY

        getdefault()

        @Return:

        @Error:
        """
        return self._default

    def setdefault(self, default=''):
        r"""SUMMARY

        setdefault(default='')

        @Arguments:
        - `default`:

        @Return:

        @Error:
        """
        self._default = default

    def getimage(self, ):
        r"""SUMMARY

        getimage()

        @Return:

        @Error:
        """
        return self._image

    def setimage(self, image=None):
        r"""SUMMARY

        setimage(image=None)

        @Arguments:
        - `image`:

        @Return:

        @Error:
        """
        self._image = image

    def getroot(self, ):
        r"""SUMMARY

        getroot()

        @Return:

        @Error:
        """
        return self._root

    def setroot(self, root=None):
        r"""SUMMARY

        setroot(root=None)

        @Arguments:
        - `root`:

        @Return:

        @Error:
        """
        self._root = root

    def getpass(self, prompt='Password: '):
        r"""SUMMARY

        getpass(prompt='Password: ')

        @Arguments:
        - `prompt`:

        @Return:

        @Error:
        """
        return passwordbox(msg=prompt, title=self._title, default=self._default,
                           image=self._image, root=self._root)



* Fri 05 Dec 2014 02:27:19 AM JST
pass
* Fri 05 Dec 2014 02:28:09 AM JST
passwd
* Fri 05 Dec 2014 02:31:10 AM JST
_getter
* Fri 05 Dec 2014 02:31:25 AM JST
_getter
* Fri 05 Dec 2014 02:32:05 AM JST
_getter
* Fri 05 Dec 2014 02:36:57 AM JST
CmdlinePassGetter, EasyGUIPassGetter, WXPassGetter
* Fri 05 Dec 2014 02:37:01 AM JST
CmdlinePassGetter, EasyGUIPassGetter, WXPassGetter
* Fri 05 Dec 2014 02:37:47 AM JST
from getpasswd import WXPassGetter
* Fri 05 Dec 2014 02:37:54 AM JST
WXPassGetter
* Fri 05 Dec 2014 02:38:31 AM JST
hello'
* Fri 05 Dec 2014 02:40:45 AM JST

* Fri 05 Dec 2014 02:40:45 AM JST

* Fri 05 Dec 2014 02:40:45 AM JST
LOG.addHandler(_RH)

* Fri 05 Dec 2014 02:41:01 AM JST

* Fri 05 Dec 2014 02:41:01 AM JST

* Fri 05 Dec 2014 02:41:01 AM JST
import os

* Fri 05 Dec 2014 02:42:06 AM JST

* Fri 05 Dec 2014 02:42:06 AM JST

* Fri 05 Dec 2014 02:42:06 AM JST
    print(err)

* Fri 05 Dec 2014 02:44:12 AM JST

* Fri 05 Dec 2014 02:44:12 AM JST

* Fri 05 Dec 2014 02:44:12 AM JST
    print(err)

* Fri 05 Dec 2014 02:46:02 AM JST
from getpasswd import *
* Fri 05 Dec 2014 02:47:09 AM JST
easygui
* Fri 05 Dec 2014 02:47:13 AM JST
from getpasswd import *
* Fri 05 Dec 2014 02:48:04 AM JST
EasyGUIPassGetter
* Fri 05 Dec 2014 02:48:32 AM JST
/usr/lib/python2.7/dist-packages/
* Fri 05 Dec 2014 02:49:12 AM JST
from getpasswd import *
* Fri 05 Dec 2014 02:50:33 AM JST
from getpasswd import *
* Fri 05 Dec 2014 05:04:00 AM JST
uncompress
* Fri 05 Dec 2014 05:04:48 AM JST
/usr/share/doc/python-paramiko/examples/
* Fri 05 Dec 2014 05:05:25 AM JST
ssh -f -N -i ~/.ssh/kagi -p 12316 -L 12316:192.168.1.123:12316 root@taka16.no-ip.in
fo > /dev/null 
* Fri 05 Dec 2014 05:06:37 AM JST
ssh -f -N -i ~/.ssh/kagi -p 12316 -L 12316:192.168.1.123:12316 root@taka16.no-ip.in
fo > /dev/null 
* Fri 05 Dec 2014 05:06:44 AM JST
-r host
* Fri 05 Dec 2014 05:08:13 AM JST
/usr/share/doc/python-paramiko/examples/
* Fri 05 Dec 2014 05:10:14 AM JST
root@taka16.no-ip.in
* Fri 05 Dec 2014 05:43:12 AM JST
1)
* Fri 05 Dec 2014 05:43:13 AM JST
Window(1)
* Fri 05 Dec 2014 05:45:05 AM JST
FindWindowByLabel
* Fri 05 Dec 2014 05:45:17 AM JST
'xfce4-terminal'
* Fri 05 Dec 2014 06:11:48 AM JST
"""
Sample script showing how to do local port forwarding over paramiko.

This script connects to the requested SSH server and sets up local port
forwarding (the openssh -L option) from a local port through a tunneled
connection to a destination reachable from the SSH server machine.
"""

import getpass
import os
import socket
import select
import SocketServer
import sys
from optparse import OptionParser

import paramiko

SSH_PORT = 22
DEFAULT_PORT = 4000

g_verbose = True


class ForwardServer (SocketServer.ThreadingTCPServer):
    daemon_threads = True
    allow_reuse_address = True
    

class Handler (SocketServer.BaseRequestHandler):

    def handle(self):
        try:
            chan = self.ssh_transport.open_channel('direct-tcpip',
                                                   (self.chain_host, self.chain_port),
                                                   self.request.getpeername())
        except Exception, e:
            verbose('Incoming request to %s:%d failed: %s' % (self.chain_host,
                                                              self.chain_port,
                                                              repr(e)))
            return
        if chan is None:
            verbose('Incoming request to %s:%d was rejected by the SSH server.' %
                    (self.chain_host, self.chain_port))
            return

        verbose('Connected!  Tunnel open %r -> %r -> %r' % (self.request.getpeername(),
                                                            chan.getpeername(), (self.chain_host, self.chain_port)))
        while True:
            r, w, x = select.select([self.request, chan], [], [])
            if self.request in r:
                data = self.request.recv(1024)
                if len(data) == 0:
                    break
                chan.send(data)
            if chan in r:
                data = chan.recv(1024)
                if len(data) == 0:
                    break
                self.request.send(data)
        chan.close()
        self.request.close()
        verbose('Tunnel closed from %r' % (self.request.getpeername(),))


def forward_tunnel(local_port, remote_host, remote_port, transport):
    # this is a little convoluted, but lets me configure things for the Handler
    # object.  (SocketServer doesn't give Handlers any way to access the outer
    # server normally.)
    class SubHander (Handler):
        chain_host = remote_host
        chain_port = remote_port
        ssh_transport = transport
    ForwardServer(('', local_port), SubHander).serve_forever()


def verbose(s):
    if g_verbose:
        print s


HELP = """\
Set up a forward tunnel across an SSH server, using paramiko. A local port
(given with -p) is forwarded across an SSH session to an address:port from
the SSH server. This is similar to the openssh -L option.
"""


def get_host_port(spec, default_port):
    "parse 'hostname:22' into a host and port, with the port optional"
    args = (spec.split(':', 1) + [default_port])[:2]
    args[1] = int(args[1])
    return args[0], args[1]


def parse_options():
    global g_verbose
    
    parser = OptionParser(usage='usage: %prog [options] <ssh-server>[:<server-port>]',
                          version='%prog 1.0', description=HELP)
    parser.add_option('-q', '--quiet', action='store_false', dest='verbose', default=True,
                      help='squelch all informational output')
    parser.add_option('-p', '--local-port', action='store', type='int', dest='port',
                      default=DEFAULT_PORT,
                      help='local port to forward (default: %d)' % DEFAULT_PORT)
    parser.add_option('-u', '--user', action='store', type='string', dest='user',
                      default=getpass.getuser(),
                      help='username for SSH authentication (default: %s)' % getpass.getuser())
    parser.add_option('-K', '--key', action='store', type='string', dest='keyfile',
                      default=None,
                      help='private key file to use for SSH authentication')
    parser.add_option('', '--no-key', action='store_false', dest='look_for_keys', default=True,
                      help='don\'t look for or use a private key file')
    parser.add_option('-P', '--password', action='store_true', dest='readpass', default=False,
                      help='read password (for key or password auth) from stdin')
    parser.add_option('-r', '--remote', action='store', type='string', dest='remote', default=None, metavar='host:port',
                      help='remote host and port to forward to')
    options, args = parser.parse_args()

    if len(args) != 1:
        parser.error('Incorrect number of arguments.')
    if options.remote is None:
        parser.error('Remote address required (-r).')
    
    g_verbose = options.verbose
    server_host, server_port = get_host_port(args[0], SSH_PORT)
    remote_host, remote_port = get_host_port(options.remote, SSH_PORT)
    return options, (server_host, server_port), (remote_host, remote_port)


def main():
    options, server, remote = parse_options()
    
    password = None
    if options.readpass:
        password = getpass.getpass('Enter SSH password: ')
    
    client = paramiko.SSHClient()
    client.load_system_host_keys()
    client.set_missing_host_key_policy(paramiko.WarningPolicy())

    verbose('Connecting to ssh host %s:%d ...' % (server[0], server[1]))
    try:
        client.connect(server[0], server[1], username=options.user, key_filename=options.keyfile,
                       look_for_keys=options.look_for_keys, password=password)
    except Exception, e:
        print '*** Failed to connect to %s:%d: %r' % (server[0], server[1], e)
        sys.exit(1)

    verbose('Now forwarding port %d to %s:%d ...' % (options.port, remote[0], remote[1]))

    try:
        forward_tunnel(options.port, remote[0], remote[1], client.get_transport())
    except KeyboardInterrupt:
        print 'C-c: Port forwarding stopped.'
        sys.exit(0)


if __name__ == '__main__':
    main()

* Fri 05 Dec 2014 06:12:07 AM JST

* Fri 05 Dec 2014 06:12:07 AM JST

* Fri 05 Dec 2014 06:12:07 AM JST
    main()

* Fri 05 Dec 2014 06:13:04 AM JST
                
* Fri 05 Dec 2014 06:13:14 AM JST
                
* Fri 05 Dec 2014 06:13:15 AM JST
                                
* Fri 05 Dec 2014 06:13:48 AM JST
                
* Fri 05 Dec 2014 06:16:52 AM JST

* Fri 05 Dec 2014 06:16:52 AM JST

* Fri 05 Dec 2014 06:16:52 AM JST
import os as _os

* Fri 05 Dec 2014 06:16:56 AM JST
import getpass
import os
import socket
import select
import SocketServer
import sys
from optparse import OptionParser

import paramiko

* Fri 05 Dec 2014 06:17:05 AM JST

* Fri 05 Dec 2014 06:17:05 AM JST

* Fri 05 Dec 2014 06:17:05 AM JST
import sys as _sys

* Fri 05 Dec 2014 05:26:44 PM JST
          
* Fri 05 Dec 2014 05:26:46 PM JST
chain_host
* Fri 05 Dec 2014 05:26:49 PM JST
chain_port, 
* Fri 05 Dec 2014 05:26:49 PM JST
self.chain_port, 
* Fri 05 Dec 2014 05:27:37 PM JST
{0.chain_host}:{0.chain_port}
* Fri 05 Dec 2014 05:27:48 PM JST
                
* Fri 05 Dec 2014 05:27:51 PM JST
chain_host
* Fri 05 Dec 2014 05:27:54 PM JST
chain_port
* Fri 05 Dec 2014 05:27:54 PM JST
self.chain_port
* Fri 05 Dec 2014 05:28:01 PM JST
                
* Fri 05 Dec 2014 05:28:43 PM JST
fromat
* Fri 05 Dec 2014 05:28:49 PM JST
            
* Fri 05 Dec 2014 05:30:09 PM JST
"""
Sample script showing how to do local port forwarding over paramiko.

This script connects to the requested SSH server and sets up local port
forwarding (the openssh -L option) from a local port through a tunneled
connection to a destination reachable from the SSH server machine.
"""


* Fri 05 Dec 2014 05:32:47 PM JST
import logging
from path import Path
from logging.handlers import RotatingFileHandler

* Fri 05 Dec 2014 05:33:49 PM JST
DEBUG
* Fri 05 Dec 2014 05:33:52 PM JST
DEBUG
* Fri 05 Dec 2014 05:33:56 PM JST
DEBUG
* Fri 05 Dec 2014 05:34:20 PM JST
'Incoming request to {0.chain_host}:{0.chain_port} failed: {1}'
                .format(self, repr(e))
* Fri 05 Dec 2014 05:34:43 PM JST
'Incoming request to {0.chain_host}:{0.chain_port} was rejected by the SSH server.'.format(self)
* Fri 05 Dec 2014 05:34:51 PM JST

* Fri 05 Dec 2014 05:34:51 PM JST

* Fri 05 Dec 2014 05:34:51 PM JST
            verbose()

* Fri 05 Dec 2014 05:35:13 PM JST
'Connected!  Tunnel open {0} -> {1} -> {2}'.format(
                self.request.getpeername(), chan.getpeername(),
                (self.chain_host, self.chain_port))
* Fri 05 Dec 2014 05:35:15 PM JST

* Fri 05 Dec 2014 05:35:15 PM JST

* Fri 05 Dec 2014 05:35:15 PM JST
        verbose()

* Fri 05 Dec 2014 05:35:26 PM JST
'Tunnel closed from {}'.format(self.request.getpeername())
* Fri 05 Dec 2014 05:35:28 PM JST

* Fri 05 Dec 2014 05:35:28 PM JST

* Fri 05 Dec 2014 05:35:28 PM JST
        verbose()

* Fri 05 Dec 2014 05:36:15 PM JST
verbose
* Fri 05 Dec 2014 05:36:42 PM JST
verbose
* Fri 05 Dec 2014 05:37:04 PM JST
print 
* Fri 05 Dec 2014 05:38:41 PM JST
print 
* Fri 05 Dec 2014 05:47:46 PM JST
"""\
Set up a forward tunnel across an SSH server, using paramiko. A local port
(given with -p) is forwarded across an SSH session to an address:port from
the SSH server. This is similar to the openssh -L option.
"""
* Fri 05 Dec 2014 05:49:47 PM JST
INFO
* Fri 05 Dec 2014 05:49:59 PM JST
info
* Fri 05 Dec 2014 05:50:04 PM JST
info
* Fri 05 Dec 2014 05:50:17 PM JST
info
* Fri 05 Dec 2014 05:56:16 PM JST
LOG.info('C-c: Port forwarding stopped.')
* Fri 05 Dec 2014 06:00:58 PM JST

* Fri 05 Dec 2014 06:00:58 PM JST

* Fri 05 Dec 2014 06:00:58 PM JST
g_verbose = True

* Fri 05 Dec 2014 06:01:10 PM JST

* Fri 05 Dec 2014 06:01:10 PM JST

* Fri 05 Dec 2014 06:01:10 PM JST
    global g_verbose

* Fri 05 Dec 2014 06:01:52 PM JST

* Fri 05 Dec 2014 06:01:52 PM JST

* Fri 05 Dec 2014 06:01:52 PM JST
    g_verbose = options.verbose

* Fri 05 Dec 2014 06:02:16 PM JST
                      
* Fri 05 Dec 2014 06:02:41 PM JST
        
* Fri 05 Dec 2014 06:04:08 PM JST
argparse.ArgumentParser
* Fri 05 Dec 2014 06:05:12 PM JST
"""\
Set up a forward tunnel across an SSH server, using paramiko. A local port
(given with -p) is forwarded across an SSH session to an address:port from
the SSH server. This is similar to the openssh -L option.
"""
* Fri 05 Dec 2014 06:05:28 PM JST
    
* Fri 05 Dec 2014 06:07:43 PM JST
    pass
* Fri 05 Dec 2014 06:09:09 PM JST
    parser.add_argument('--version',
                        dest='version',
                        action='version',
                        version=__version__,
                        help='Version Strings.')

* Fri 05 Dec 2014 06:11:56 PM JST

* Fri 05 Dec 2014 06:11:56 PM JST

* Fri 05 Dec 2014 06:11:56 PM JST
        version=__version__, 

* Fri 05 Dec 2014 06:16:35 PM JST
DEFAULT_PORT
* Fri 05 Dec 2014 06:18:48 PM JST
port
* Fri 05 Dec 2014 06:18:49 PM JST
options.port
* Fri 05 Dec 2014 06:27:22 PM JST
    parser.add_option('-u', '--user',
                      action='store',
                      type='string',
                      dest='user',
                      default=USER,
                      help=('username for SSH authentication (default: {})'
                            .format(getpass.getuser())))

* Fri 05 Dec 2014 06:35:31 PM JST
debug
* Fri 05 Dec 2014 06:37:22 PM JST
info
* Fri 05 Dec 2014 06:41:23 PM JST
"""
Sample script showing how to do local port forwarding over paramiko.

This script connects to the requested SSH server and sets up local port
forwarding (the openssh -L option) from a local port through a tunneled
connection to a destination reachable from the SSH server machine.
"""

* Fri 05 Dec 2014 06:41:56 PM JST
/usr/share/doc/python-paramiko/examples/
* Fri 05 Dec 2014 06:42:28 PM JST
import getpass
import os
import socket
import select
import SocketServer
import sys
from optparse import OptionParser

import paramiko

SSH_PORT = 22
DEFAULT_PORT = 4000

g_verbose = True


class ForwardServer (SocketServer.ThreadingTCPServer):
    daemon_threads = True
    allow_reuse_address = True
    

class Handler (SocketServer.BaseRequestHandler):

    def handle(self):
        try:
            chan = self.ssh_transport.open_channel('direct-tcpip',
                                                   (self.chain_host, self.chain_port),
                                                   self.request.getpeername())
        except Exception, e:
            verbose('Incoming request to %s:%d failed: %s' % (self.chain_host,
                                                              self.chain_port,
                                                              repr(e)))
            return
        if chan is None:
            verbose('Incoming request to %s:%d was rejected by the SSH server.' %
                    (self.chain_host, self.chain_port))
            return

        verbose('Connected!  Tunnel open %r -> %r -> %r' % (self.request.getpeername(),
                                                            chan.getpeername(), (self.chain_host, self.chain_port)))
        while True:
            r, w, x = select.select([self.request, chan], [], [])
            if self.request in r:
                data = self.request.recv(1024)
                if len(data) == 0:
                    break
                chan.send(data)
            if chan in r:
                data = chan.recv(1024)
                if len(data) == 0:
                    break
                self.request.send(data)
        chan.close()
        self.request.close()
        verbose('Tunnel closed from %r' % (self.request.getpeername(),))


def forward_tunnel(local_port, remote_host, remote_port, transport):
    # this is a little convoluted, but lets me configure things for the Handler
    # object.  (SocketServer doesn't give Handlers any way to access the outer
    # server normally.)
    class SubHander (Handler):
        chain_host = remote_host
        chain_port = remote_port
        ssh_transport = transport
    ForwardServer(('', local_port), SubHander).serve_forever()


def verbose(s):
    if g_verbose:
        print s


HELP = """\
Set up a forward tunnel across an SSH server, using paramiko. A local port
(given with -p) is forwarded across an SSH session to an address:port from
the SSH server. This is similar to the openssh -L option.
"""


def get_host_port(spec, default_port):
    "parse 'hostname:22' into a host and port, with the port optional"
    args = (spec.split(':', 1) + [default_port])[:2]
    args[1] = int(args[1])
    return args[0], args[1]


def parse_options():
    global g_verbose
    
    parser = OptionParser(usage='usage: %prog [options] <ssh-server>[:<server-port>]',
                          version='%prog 1.0', description=HELP)
    parser.add_option('-q', '--quiet', action='store_false', dest='verbose', default=True,
                      help='squelch all informational output')
    parser.add_option('-p', '--local-port', action='store', type='int', dest='port',
                      default=DEFAULT_PORT,
                      help='local port to forward (default: %d)' % DEFAULT_PORT)
    parser.add_option('-u', '--user', action='store', type='string', dest='user',
                      default=getpass.getuser(),
                      help='username for SSH authentication (default: %s)' % getpass.getuser())
    parser.add_option('-K', '--key', action='store', type='string', dest='keyfile',
                      default=None,
                      help='private key file to use for SSH authentication')
    parser.add_option('', '--no-key', action='store_false', dest='look_for_keys', default=True,
                      help='don\'t look for or use a private key file')
    parser.add_option('-P', '--password', action='store_true', dest='readpass', default=False,
                      help='read password (for key or password auth) from stdin')
    parser.add_option('-r', '--remote', action='store', type='string', dest='remote', default=None, metavar='host:port',
                      help='remote host and port to forward to')
    options, args = parser.parse_args()

    if len(args) != 1:
        parser.error('Incorrect number of arguments.')
    if options.remote is None:
        parser.error('Remote address required (-r).')
    
    g_verbose = options.verbose
    server_host, server_port = get_host_port(args[0], SSH_PORT)
    remote_host, remote_port = get_host_port(options.remote, SSH_PORT)
    return options, (server_host, server_port), (remote_host, remote_port)


def main():
    options, server, remote = parse_options()
    
    password = None
    if options.readpass:
        password = getpass.getpass('Enter SSH password: ')
    
    client = paramiko.SSHClient()
    client.load_system_host_keys()
    client.set_missing_host_key_policy(paramiko.WarningPolicy())

    verbose('Connecting to ssh host %s:%d ...' % (server[0], server[1]))
    try:
        client.connect(server[0], server[1], username=options.user, key_filename=options.keyfile,
                       look_for_keys=options.look_for_keys, password=password)
    except Exception, e:
        print '*** Failed to connect to %s:%d: %r' % (server[0], server[1], e)
        sys.exit(1)

    verbose('Now forwarding port %d to %s:%d ...' % (options.port, remote[0], remote[1]))

    try:
        forward_tunnel(options.port, remote[0], remote[1], client.get_transport())
    except KeyboardInterrupt:
        print 'C-c: Port forwarding stopped.'
        sys.exit(0)


if __name__ == '__main__':
    main()

* Fri 05 Dec 2014 06:42:51 PM JST
# for debug
import cgitb as _cgitb
_cgitb.enable(format='text')


__revision__ = '$Revision$'
__version__ = '0.1.0'


* Fri 05 Dec 2014 06:43:23 PM JST
class ForwardServer(SocketServer.ThreadingTCPServer):
    daemon_threads = True
    allow_reuse_address = True

* Fri 05 Dec 2014 06:44:48 PM JST

* Fri 05 Dec 2014 06:44:48 PM JST

* Fri 05 Dec 2014 06:44:48 PM JST
LOGPATH = 

* Fri 05 Dec 2014 06:44:51 PM JST

* Fri 05 Dec 2014 06:44:51 PM JST

* Fri 05 Dec 2014 06:44:51 PM JST
LOG.addHandler(_RH)

* Fri 05 Dec 2014 06:44:56 PM JST

* Fri 05 Dec 2014 06:44:56 PM JST

* Fri 05 Dec 2014 06:44:56 PM JST
# output log file

* Fri 05 Dec 2014 06:45:19 PM JST
INFO
* Fri 05 Dec 2014 06:45:27 PM JST
DEBUG
* Fri 05 Dec 2014 06:46:55 PM JST

* Fri 05 Dec 2014 06:46:55 PM JST

* Fri 05 Dec 2014 06:46:55 PM JST
from logging.handlers import RotatingFileHandler

* Fri 05 Dec 2014 06:46:56 PM JST

* Fri 05 Dec 2014 06:46:56 PM JST

* Fri 05 Dec 2014 06:46:56 PM JST
from logging.handlers import RotatingFileHandler

* Fri 05 Dec 2014 06:46:57 PM JST

* Fri 05 Dec 2014 06:46:57 PM JST

* Fri 05 Dec 2014 06:46:57 PM JST
from path import Path

* Fri 05 Dec 2014 06:47:00 PM JST

* Fri 05 Dec 2014 06:47:00 PM JST

* Fri 05 Dec 2014 06:47:00 PM JST
import os

* Fri 05 Dec 2014 06:47:08 PM JST

* Fri 05 Dec 2014 06:47:08 PM JST

* Fri 05 Dec 2014 06:47:08 PM JST
import sys

* Fri 05 Dec 2014 06:47:24 PM JST
class Handler(SocketServer.BaseRequestHandler):

    def handle(self):
        try:
            chan = self.ssh_transport.open_channel(
                'direct-tcpip', (self.chain_host, self.chain_port),
                self.request.getpeername())
        except Exception, e:
            LOG.debug(
                'Incoming request to {0.chain_host}:{0.chain_port} failed: {1}'
                .format(self, repr(e)))
            return
        if chan is None:
            LOG.debug('Incoming request to {0.chain_host}:{0.chain_port} was rejected by the SSH server.'.format(self))
            return
        LOG.debug('Connected!  Tunnel open {0} -> {1} -> {2}'.format(
                self.request.getpeername(), chan.getpeername(),
                (self.chain_host, self.chain_port)))
        while True:
            r, w, x = select.select([self.request, chan], [], [])
            if self.request in r:
                data = self.request.recv(1024)
                if len(data) == 0:
                    break
                chan.send(data)
            if chan in r:
                data = chan.recv(1024)
                if len(data) == 0:
                    break
                self.request.send(data)
        chan.close()
        self.request.close()
        LOG.info('Tunnel closed from {}'.format(self.request.getpeername()))

* Fri 05 Dec 2014 06:49:59 PM JST
                
* Fri 05 Dec 2014 06:50:25 PM JST
185020
* Fri 05 Dec 2014 06:50:26 PM JST
05-185020
* Fri 05 Dec 2014 06:50:26 PM JST
12-05-185020
* Fri 05 Dec 2014 06:50:27 PM JST
2014-12-05-185020
* Fri 05 Dec 2014 06:50:56 PM JST

* Fri 05 Dec 2014 06:50:56 PM JST

* Fri 05 Dec 2014 06:50:56 PM JST
LOG.addHandler(_RH)

* Fri 05 Dec 2014 06:51:02 PM JST

* Fri 05 Dec 2014 06:51:02 PM JST

* Fri 05 Dec 2014 06:51:03 PM JST
from logging.handlers import RotatingFileHandler

* Fri 05 Dec 2014 06:51:08 PM JST

* Fri 05 Dec 2014 06:51:08 PM JST

* Fri 05 Dec 2014 06:51:08 PM JST
from path import Path

* Fri 05 Dec 2014 06:52:35 PM JST
NOTSET
* Fri 05 Dec 2014 06:52:39 PM JST
INFO
* Fri 05 Dec 2014 06:52:42 PM JST
DEBUG
* Fri 05 Dec 2014 06:53:57 PM JST
"ERROR" 
* Fri 05 Dec 2014 06:55:04 PM JST
"NOTSET" 
* Fri 05 Dec 2014 06:55:14 PM JST
"DEBUG" 
* Fri 05 Dec 2014 06:55:25 PM JST
"INFO" 
* Fri 05 Dec 2014 06:55:32 PM JST
"WARN" 
* Fri 05 Dec 2014 06:55:54 PM JST
"NOTSET" "DEBUG" "INFO" "WARN" "ERROR" "FATAL"
* Fri 05 Dec 2014 06:59:16 PM JST
                      
* Fri 05 Dec 2014 06:59:17 PM JST
        
* Fri 05 Dec 2014 06:59:19 PM JST
        
* Fri 05 Dec 2014 07:02:32 PM JST
default
* Fri 05 Dec 2014 07:05:06 PM JST

* Fri 05 Dec 2014 07:05:06 PM JST

* Fri 05 Dec 2014 07:05:06 PM JST
                        required=False,

* Fri 05 Dec 2014 07:05:09 PM JST
True
* Fri 05 Dec 2014 07:05:14 PM JST
False
* Fri 05 Dec 2014 07:06:01 PM JST

* Fri 05 Dec 2014 07:06:01 PM JST

* Fri 05 Dec 2014 07:06:01 PM JST
                    required=False,

* Fri 05 Dec 2014 07:06:16 PM JST
parser
* Fri 05 Dec 2014 07:06:48 PM JST
v', 
* Fri 05 Dec 2014 07:11:08 PM JST
parser.add_mutually_exclusive_group()
* Fri 05 Dec 2014 07:11:15 PM JST
group
* Fri 05 Dec 2014 07:11:58 PM JST
verbose
* Fri 05 Dec 2014 07:12:11 PM JST
True
* Fri 05 Dec 2014 07:12:18 PM JST
    
* Fri 05 Dec 2014 07:12:19 PM JST
verbose
* Fri 05 Dec 2014 09:54:57 PM JST

* Fri 05 Dec 2014 09:54:57 PM JST

* Fri 05 Dec 2014 09:54:57 PM JST
                    required=False,

* Fri 05 Dec 2014 09:55:51 PM JST

* Fri 05 Dec 2014 09:55:52 PM JST

* Fri 05 Dec 2014 09:55:52 PM JST
                        required=False,

* Fri 05 Dec 2014 09:56:32 PM JST
    parser = _predef_options()
    opts = parser.parse_args()

* Fri 05 Dec 2014 09:57:14 PM JST
parser
* Fri 05 Dec 2014 09:57:21 PM JST
parser.error('Incorrect number of arguments.')
* Fri 05 Dec 2014 09:58:57 PM JST
parser
* Fri 05 Dec 2014 09:59:01 PM JST
parser
* Fri 05 Dec 2014 09:59:51 PM JST
add_mutually_exclusive_group
* Fri 05 Dec 2014 10:01:31 PM JST
Incorrect 
* Fri 05 Dec 2014 10:02:17 PM JST
parser = argparse.ArgumentParser(description=""" """)
* Fri 05 Dec 2014 10:02:30 PM JST
    parser.add_argument('--version',
                        dest='version',
                        action='version',
                        version=__version__,
                        help='Version Strings.')

* Fri 05 Dec 2014 10:04:08 PM JST
prog
* Fri 05 Dec 2014 10:04:44 PM JST
parse_known_args
* Fri 05 Dec 2014 10:09:35 PM JST
'sshforward'
* Fri 05 Dec 2014 10:12:48 PM JST

* Fri 05 Dec 2014 10:12:48 PM JST

* Fri 05 Dec 2014 10:12:48 PM JST
        log = logging.getLogger('sshforward')

* Fri 05 Dec 2014 10:12:57 PM JST
LOG.info('Connecting to ssh host {0}:{1} ...'.format(server[0], server[1]))
* Fri 05 Dec 2014 10:13:13 PM JST
        client.connect(server[0], server[1],
                       username=options.user, key_filename=options.keyfile,
                       look_for_keys=options.look_for_keys, password=password)

* Fri 05 Dec 2014 10:13:23 PM JST
        LOG.error('*** Failed to connect to {0}:{1}: {3}'
                  .format(server[0], server[1], e))
        sys.exit(1)

    LOG.info('Now forwarding port {0} to {1}:{2} ...'
             .format(LOCAL_PORT, remote[0], remote[1]))

* Fri 05 Dec 2014 10:13:41 PM JST
LOCAL_PORT
* Fri 05 Dec 2014 10:14:14 PM JST
LOG.info('C-c: Port forwarding stop.')
* Fri 05 Dec 2014 10:15:17 PM JST
LOG.info('C-c: Port forwarding stopped.')
* Fri 05 Dec 2014 10:25:44 PM JST

* Fri 05 Dec 2014 10:25:44 PM JST

* Fri 05 Dec 2014 10:25:44 PM JST
    parser.error('hello')

* Fri 05 Dec 2014 10:39:26 PM JST

* Fri 05 Dec 2014 10:39:26 PM JST

* Fri 05 Dec 2014 10:39:26 PM JST
                        const=None,

* Fri 05 Dec 2014 10:39:28 PM JST
                        const=None,

* Fri 05 Dec 2014 10:39:28 PM JST
                        const=None,
                        default=None,

* Fri 05 Dec 2014 10:39:32 PM JST
                        const=None,
                        default=None,

* Fri 05 Dec 2014 10:39:32 PM JST
                        const=None,
                        default=None,
                        type=None,

* Fri 05 Dec 2014 10:39:34 PM JST

* Fri 05 Dec 2014 10:39:34 PM JST

* Fri 05 Dec 2014 10:39:34 PM JST
                        choices=None,

* Fri 05 Dec 2014 10:39:36 PM JST

* Fri 05 Dec 2014 10:39:36 PM JST

* Fri 05 Dec 2014 10:39:36 PM JST
                        # (yas/expand-link "argparse_other_options" t)

* Fri 05 Dec 2014 10:39:37 PM JST

* Fri 05 Dec 2014 10:39:37 PM JST

* Fri 05 Dec 2014 10:39:37 PM JST
                        required=False,

* Fri 05 Dec 2014 10:39:45 PM JST

* Fri 05 Dec 2014 10:39:45 PM JST

* Fri 05 Dec 2014 10:39:45 PM JST
    print(opts.integers)

* Fri 05 Dec 2014 10:39:47 PM JST

* Fri 05 Dec 2014 10:39:47 PM JST

* Fri 05 Dec 2014 10:39:47 PM JST
    print(dir(opts))

* Fri 05 Dec 2014 10:40:27 PM JST

* Fri 05 Dec 2014 10:40:27 PM JST

* Fri 05 Dec 2014 10:40:27 PM JST
                        # (yas/expand-link "argparse_other_options" t)

* Fri 05 Dec 2014 10:40:29 PM JST

* Fri 05 Dec 2014 10:40:29 PM JST

* Fri 05 Dec 2014 10:40:29 PM JST
                        dest='hello',

* Fri 05 Dec 2014 10:41:01 PM JST

* Fri 05 Dec 2014 10:41:01 PM JST

* Fri 05 Dec 2014 10:41:02 PM JST
    print(opts.verbose)

* Fri 05 Dec 2014 10:41:02 PM JST
    print(opts.verbose)

* Fri 05 Dec 2014 10:41:02 PM JST
    print(opts.verbose)
    print(opts.quiet)

* Fri 05 Dec 2014 10:43:01 PM JST
argpars
* Fri 05 Dec 2014 10:43:34 PM JST
hello
* Fri 05 Dec 2014 10:43:43 PM JST
hello
* Fri 05 Dec 2014 10:45:22 PM JST
store
* Fri 05 Dec 2014 10:45:40 PM JST

* Fri 05 Dec 2014 10:45:41 PM JST

* Fri 05 Dec 2014 10:45:41 PM JST
                        nargs=1,

* Fri 05 Dec 2014 10:45:45 PM JST

* Fri 05 Dec 2014 10:45:45 PM JST

* Fri 05 Dec 2014 10:45:45 PM JST
                        type=str,

* Fri 05 Dec 2014 10:49:50 PM JST
hello
* Fri 05 Dec 2014 10:49:53 PM JST
world
* Fri 05 Dec 2014 10:54:41 PM JST
metavar
* Fri 05 Dec 2014 10:55:55 PM JST
                        
* Fri 05 Dec 2014 10:57:57 PM JST
add_argument
* Fri 05 Dec 2014 10:58:04 PM JST
add_arg
* Fri 05 Dec 2014 10:58:05 PM JST
parser.add_arg
* Fri 05 Dec 2014 11:02:13 PM JST
${15:metavar=${16:'${17:description usage}'},
                        }
* Fri 05 Dec 2014 11:02:22 PM JST
                        
* Fri 05 Dec 2014 11:06:20 PM JST

* Fri 05 Dec 2014 11:06:20 PM JST

* Fri 05 Dec 2014 11:06:20 PM JST
                        dest='sshserver',

* Fri 05 Dec 2014 11:08:00 PM JST

* Fri 05 Dec 2014 11:08:00 PM JST

* Fri 05 Dec 2014 11:08:00 PM JST
                        required=True,

* Fri 05 Dec 2014 11:18:39 PM JST

* Fri 05 Dec 2014 11:18:39 PM JST

* Fri 05 Dec 2014 11:18:39 PM JST
argparse_add_argument    return parser

* Fri 05 Dec 2014 11:22:30 PM JST
required
* Fri 05 Dec 2014 11:26:30 PM JST
A lot of messages.
* Fri 05 Dec 2014 11:38:39 PM JST
(make-string (current-column) 32)
* Fri 05 Dec 2014 11:43:53 PM JST
(let* ((lis (mapcar '(lambda (x) (replace-regexp-in-string "[\"' ]" "" x))
                    (split-string text ",")))
       (n 0)
       (length (length lis))
       matched)
  (unless (eq "" (car lis))
    (while (< n length)
      (when (string-match "^--" (nth n lis))
        (setq matched (substring (nth n lis) 2)))
      (incf n))
    (setq n 0)
    (unless matched
      (while (< n length)
        (when (string-match "^-" (nth n lis))
          (setq matched (substring (nth n lis) 1)))
        (incf n)))
    (unless matched
      (setq matched (car lis)))
    (replace-regexp-in-string "-" "_" matched))
  )
* Fri 05 Dec 2014 11:45:58 PM JST
(unless (eq "" (car lis))
* Fri 05 Dec 2014 11:47:38 PM JST
    
* Fri 05 Dec 2014 11:47:45 PM JST
(unless (eq "" (car lis))
    (while (< n length)
      (when (string-match "^-" (nth n lis))
        (setq matched (substring (nth n lis) 2)))
      (incf n))
    (setq n 0))
* Sat 06 Dec 2014 12:02:01 AM JST
    parser.add_option('-r', '--remote',
                      action='store',
                      type='string',
                      dest='remote',
                      default=None,
                      metavar='host:port',
                      help='remote host and port to forward to')

* Sat 06 Dec 2014 12:02:34 AM JST
add_argument
* Sat 06 Dec 2014 12:02:42 AM JST
                        
* Sat 06 Dec 2014 12:07:43 AM JST
parser.add_argument(${1:'-v', '--verbose'},
        dest='${1:$(let* ((lis (mapcar '(lambda (x) (replace-regexp-in-string "[\"' ]" "" x))
                    (split-string text ",")))
       (n 0)
       (length (length lis))
       matched)
  (unless (eq "" (car lis))
    (while (< n length)
      (when (string-match "^--" (nth n lis))
        (setq matched (substring (nth n lis) 2)))
      (incf n))
    (setq n 0)
    (unless matched
      (while (< n length)
        (when (string-match "^-" (nth n lis))
          (setq matched (substring (nth n lis) 1)))
        (incf n)))
    (unless matched
      (setq matched (car lis)))
    (replace-regexp-in-string "-" "_" matched))
  )}',
        action='store',
        ${20:nargs=${25:None$$(yas/choose-value '("None"
                                        "argparse.OPTIONAL"
                                        "argparse.ZERO_OR_MORE"
                                        "argparse.ONE_OR_MORE"
                                        "argparse.REMAINDER"
                                        "0" "1" "2" "3" "4" "5"
                                        "6" "7" "8" "9"))},
        }${30:const=${35:None},
        }${40:default=${45:None},
        }${50:type=${55:None},
        }${60:choices=${65:None},
        }${70:require=${75:False$(yas/choose-value '("False" "True"))},
        }# (yas/expand-link "argparse_other_options" t)
        ${80:metavar=${85:'${86:description usage}'},
        }${90:help=${95:'${96:A lot of messages.}'}})


* Sat 06 Dec 2014 12:07:47 AM JST
# -*- mode: snippet -*-
# name: store
# key: argparse_add_argument
# condition: (not (py:at-string|comment-p))
# --
parser.add_argument(${1:'-v', '--verbose'},
        dest='${1:$(let* ((lis (mapcar '(lambda (x) (replace-regexp-in-string "[\"' ]" "" x))
                    (split-string text ",")))
       (n 0)
       (length (length lis))
       matched)
  (unless (eq "" (car lis))
    (while (< n length)
      (when (string-match "^--" (nth n lis))
        (setq matched (substring (nth n lis) 2)))
      (incf n))
    (setq n 0)
    (unless matched
      (while (< n length)
        (when (string-match "^-" (nth n lis))
          (setq matched (substring (nth n lis) 1)))
        (incf n)))
    (unless matched
      (setq matched (car lis)))
    (replace-regexp-in-string "-" "_" matched))
  )}',
        action='store',
        ${20:nargs=${25:None$$(yas/choose-value '("None"
                                        "argparse.OPTIONAL"
                                        "argparse.ZERO_OR_MORE"
                                        "argparse.ONE_OR_MORE"
                                        "argparse.REMAINDER"
                                        "0" "1" "2" "3" "4" "5"
                                        "6" "7" "8" "9"))},
        }${30:const=${35:None},
        }${40:default=${45:None},
        }${50:type=${55:None},
        }${60:choices=${65:None},
        }${70:require=${75:False$(yas/choose-value '("False" "True"))},
        }# (yas/expand-link "argparse_other_options" t)
        ${80:metavar=${85:'${86:description usage}'},
        }${90:help=${95:'${96:A lot of messages.}'}})

        # (yas/expand-link "argparse_add_argument" t)$0

* Sat 06 Dec 2014 12:13:02 AM JST

* Sat 06 Dec 2014 12:13:02 AM JST

* Sat 06 Dec 2014 12:13:02 AM JST
|1|G1SepqRGNTsEhZucO3HSKdWGl0E=|K9BzLm53K6iHxQTm1pe9g23qdes= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del

* Sat 06 Dec 2014 12:13:02 AM JST
|1|G1SepqRGNTsEhZucO3HSKdWGl0E=|K9BzLm53K6iHxQTm1pe9g23qdes= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del

* Sat 06 Dec 2014 12:13:02 AM JST
|1|G1SepqRGNTsEhZucO3HSKdWGl0E=|K9BzLm53K6iHxQTm1pe9g23qdes= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del
|1|Otd12cqewwVIWECBi9iAetckji0=|OiI78VWP5Ar9jd3yB22wWa+VaUE= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Sat 06 Dec 2014 12:13:03 AM JST
|1|G1SepqRGNTsEhZucO3HSKdWGl0E=|K9BzLm53K6iHxQTm1pe9g23qdes= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del
|1|Otd12cqewwVIWECBi9iAetckji0=|OiI78VWP5Ar9jd3yB22wWa+VaUE= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Sat 06 Dec 2014 12:13:03 AM JST
|1|G1SepqRGNTsEhZucO3HSKdWGl0E=|K9BzLm53K6iHxQTm1pe9g23qdes= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del
|1|Otd12cqewwVIWECBi9iAetckji0=|OiI78VWP5Ar9jd3yB22wWa+VaUE= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|ahBVIGyFwKwWD+nfNb4v99D7sH4=|nDQFNzmt+yG9wB/sVW3iblik40w= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Sat 06 Dec 2014 12:13:03 AM JST
|1|G1SepqRGNTsEhZucO3HSKdWGl0E=|K9BzLm53K6iHxQTm1pe9g23qdes= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del
|1|Otd12cqewwVIWECBi9iAetckji0=|OiI78VWP5Ar9jd3yB22wWa+VaUE= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|ahBVIGyFwKwWD+nfNb4v99D7sH4=|nDQFNzmt+yG9wB/sVW3iblik40w= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Sat 06 Dec 2014 12:13:03 AM JST
|1|G1SepqRGNTsEhZucO3HSKdWGl0E=|K9BzLm53K6iHxQTm1pe9g23qdes= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del
|1|Otd12cqewwVIWECBi9iAetckji0=|OiI78VWP5Ar9jd3yB22wWa+VaUE= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|ahBVIGyFwKwWD+nfNb4v99D7sH4=|nDQFNzmt+yG9wB/sVW3iblik40w= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|Uu3Tp4jNoMXhqy9P3ITuiwob+dY=|ENDhqC+sey4csfP+eqwUDZBaog4= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Sat 06 Dec 2014 12:13:03 AM JST
|1|G1SepqRGNTsEhZucO3HSKdWGl0E=|K9BzLm53K6iHxQTm1pe9g23qdes= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del
|1|Otd12cqewwVIWECBi9iAetckji0=|OiI78VWP5Ar9jd3yB22wWa+VaUE= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|ahBVIGyFwKwWD+nfNb4v99D7sH4=|nDQFNzmt+yG9wB/sVW3iblik40w= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|Uu3Tp4jNoMXhqy9P3ITuiwob+dY=|ENDhqC+sey4csfP+eqwUDZBaog4= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Sat 06 Dec 2014 12:13:03 AM JST
|1|G1SepqRGNTsEhZucO3HSKdWGl0E=|K9BzLm53K6iHxQTm1pe9g23qdes= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCe3TSuCusfQc68As4vHWjIOstb/LRkor7FsFHBUCA5p7BUvdI6Mr89+falhWIk9iZbIn3j7omj+uIdpUOJ+i2bfkB2Keyz26vVYiMMVfU7TRCQixeurlceVWLyED+sF+0F7d5u4/IhbUTZ/tnDfbChmWer15rkMln+quzaIr0LTwk/I7i5L5Od3aB/gZtnwaeKheW92lDHYbaAbOcwFMBthPlD01XXvxbQbmhg/c+9qYJQ5WQtbhPdrBcnzGb8G1d3n60XZZQ+sgy2gCvqum3Kzud+A1RJJMKYKn4l5BI6WrlAZKHEv/ZyycLjajuOHFRb1dd96KrUH8gFSknv3del
|1|Otd12cqewwVIWECBi9iAetckji0=|OiI78VWP5Ar9jd3yB22wWa+VaUE= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|ahBVIGyFwKwWD+nfNb4v99D7sH4=|nDQFNzmt+yG9wB/sVW3iblik40w= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|Uu3Tp4jNoMXhqy9P3ITuiwob+dY=|ENDhqC+sey4csfP+eqwUDZBaog4= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=
|1|sX6zoZbq/m6oawSGlHcwMza/U30=|Um2rgepm8IqfaMZf3eAgl3Ms4Cc= ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgnng1zVtCW88gnxbiUrdKKyuymnCFBn6tiz/Aut6zEVlKMlbjvX01xgZw3w016I+U/6HbufFC7FJp4OeqhtzHBNBmuGDESIOZfg2TUk2MjkoXey2vtC4zS4dAEpVgpR8MDY2HawTFVhuFksDlmlCgEy7yT+8WEo9FzsrFmW5JS+OhLE=

* Sat 06 Dec 2014 12:21:57 AM JST

* Sat 06 Dec 2014 12:21:57 AM JST

* Sat 06 Dec 2014 12:21:57 AM JST
                        default=None,

* Sat 06 Dec 2014 12:23:01 AM JST
    parser.add_argument('-r', '--remote',
                        action='store',
                        dest='remote',
                        type='string',
                        # require=True,
                        metavar='host:port',
                        help='remote host and port to forward to')


* Sat 06 Dec 2014 12:24:31 AM JST

* Sat 06 Dec 2014 12:24:31 AM JST

* Sat 06 Dec 2014 12:24:31 AM JST
    parser

* Sat 06 Dec 2014 12:26:04 AM JST
    parser.add_argument('sshserver',
                        dest='sshserver',
                        action='store',
                        type=str,
                        # (yas/expand-link "argparse_other_options" t)
                        metavar='ssh-server[:server_port]',
                        help='A lot of messages.')

* Sat 06 Dec 2014 12:27:00 AM JST

* Sat 06 Dec 2014 12:27:00 AM JST

* Sat 06 Dec 2014 12:27:01 AM JST
                        dest='sshserver',

* Sat 06 Dec 2014 12:29:55 AM JST
        
* Sat 06 Dec 2014 12:30:28 AM JST
    parser.add_argument('sshserver',
                        action='store',
                        type=str,
                        # (yas/expand-link "argparse_other_options" t)
                        metavar='ssh-server[:server_port]',
                        help='A lot of messages.')

    parser.add_argument('-r', '--remote',
                        action='store',
                        dest='remote',
                        type=str,
                        required=True,
                        metavar='host:port',
                        help='remote host and port to forward to')


* Sat 06 Dec 2014 12:32:08 AM JST
    parser.add_option('-p', '--local-port',
                      action='store', type='int', dest='port',
                      default=DEFAULT_PORT,
                      help='local port to forward (default: %d)' % DEFAULT_PORT)
    parser.add_option('-u', '--user',
                      action='store',
                      type='string',
                      dest='user',
                      default=getpass.getuser(),
                      help='username for SSH authentication (default: %s)' % getpass.getuser())
    parser.add_option('-K', '--key',
                      action='store',
                      type='string',
                      dest='keyfile',
                      default=None,
                      help='private key file to use for SSH authentication')
    parser.add_option('', '--no-key',
                      action='store_false',
                      dest='look_for_keys',
                      default=True,
                      help='don\'t look for or use a private key file')
    parser.add_option('-P', '--password',
                      action='store_true',
                      dest='readpass',
                      default=False,
                      help='read password (for key or password auth) from stdin')

* Sat 06 Dec 2014 12:32:31 AM JST
add_option
* Sat 06 Dec 2014 12:32:36 AM JST
add_argument
* Sat 06 Dec 2014 12:43:44 AM JST
nargs=argparse.ZERO_OR_MORE,
* Sat 06 Dec 2014 12:48:33 AM JST

* Sat 06 Dec 2014 12:48:33 AM JST

* Sat 06 Dec 2014 12:48:33 AM JST
                        nargs=argparse.ZERO_OR_MORE,

* Sat 06 Dec 2014 12:49:35 AM JST
    server_host, server_port = get_host_port(args[0], SSH_PORT)
    remote_host, remote_port = get_host_port(options.remote, SSH_PORT)

* Sat 06 Dec 2014 12:50:02 AM JST
0]
* Sat 06 Dec 2014 12:50:03 AM JST
args[0]
* Sat 06 Dec 2014 12:50:40 AM JST
server_port
* Sat 06 Dec 2014 12:50:40 AM JST
server_host, server_port
* Sat 06 Dec 2014 12:50:58 AM JST

* Sat 06 Dec 2014 12:50:58 AM JST

* Sat 06 Dec 2014 12:50:58 AM JST
    options, server, remote = parse_options()

* Sat 06 Dec 2014 12:53:15 AM JST

* Sat 06 Dec 2014 12:53:15 AM JST

* Sat 06 Dec 2014 12:53:15 AM JST
    options, server, remote = parse_options()

* Sat 06 Dec 2014 12:54:38 AM JST
                       
* Sat 06 Dec 2014 12:54:43 AM JST
            
* Sat 06 Dec 2014 12:55:43 AM JST

* Sat 06 Dec 2014 12:55:43 AM JST

* Sat 06 Dec 2014 12:55:43 AM JST
    remote, rport = get_host_port(opts.remote, SSH_PORT)

* Sat 06 Dec 2014 12:56:51 AM JST
remote
* Sat 06 Dec 2014 12:56:51 AM JST
to remote
* Sat 06 Dec 2014 12:56:51 AM JST
connect to remote
* Sat 06 Dec 2014 12:57:04 AM JST
            
* Sat 06 Dec 2014 12:57:41 AM JST

QU /root/.pylib# python forward.py --user=root -p 12316 -r 192.168.1.123:12316 taka16.no-ip6
info:12316
* Sat 06 Dec 2014 01:02:56 AM JST
DEFAULT_PORT
* Sat 06 Dec 2014 01:08:15 AM JST
"""\
Set up a forward tunnel across an SSH server, using paramiko. A local port
(given with -p) is forwarded across an SSH session to an address:port from
the SSH server. This is similar to the openssh -L option.
"""
* Sat 06 Dec 2014 01:09:26 AM JST

* Sat 06 Dec 2014 01:09:26 AM JST

* Sat 06 Dec 2014 01:09:26 AM JST
from optparse import OptionParser

* Sat 06 Dec 2014 01:09:35 AM JST

* Sat 06 Dec 2014 01:09:35 AM JST

* Sat 06 Dec 2014 01:09:35 AM JST
import os

* Sat 06 Dec 2014 01:09:38 AM JST
import os

* Sat 06 Dec 2014 01:09:38 AM JST
import os
import socket

* Sat 06 Dec 2014 01:09:56 AM JST

* Sat 06 Dec 2014 01:09:56 AM JST

* Sat 06 Dec 2014 01:09:56 AM JST
g_verbose = True

* Sat 06 Dec 2014 01:14:53 AM JST
class
* Sat 06 Dec 2014 01:15:00 AM JST

* Sat 06 Dec 2014 01:15:01 AM JST

* Sat 06 Dec 2014 01:15:01 AM JST
from abc import ABCMeta, abstractmethod

* Sat 06 Dec 2014 01:21:04 AM JST
                      
* Sat 06 Dec 2014 01:21:30 AM JST
                      
* Sat 06 Dec 2014 01:23:37 AM JST
        def get_chain_host(self, ):
            return self.chain_host
        def get_chain_port(self, ):
            return self.chain_port
        def get_ssh_transport(self):
            return self.ssh_transport

* Sat 06 Dec 2014 01:26:15 AM JST

* Sat 06 Dec 2014 01:26:15 AM JST

* Sat 06 Dec 2014 01:26:15 AM JST
    __metaclass__ = ABCMeta

* Sat 06 Dec 2014 01:26:18 AM JST

* Sat 06 Dec 2014 01:26:18 AM JST

* Sat 06 Dec 2014 01:26:18 AM JST
    @abstractmethod

* Sat 06 Dec 2014 01:26:19 AM JST

* Sat 06 Dec 2014 01:26:19 AM JST

* Sat 06 Dec 2014 01:26:19 AM JST
    @abstractmethod

* Sat 06 Dec 2014 01:26:20 AM JST

* Sat 06 Dec 2014 01:26:20 AM JST

* Sat 06 Dec 2014 01:26:20 AM JST
    @abstractmethod

* Sat 06 Dec 2014 01:26:22 AM JST
pass
* Sat 06 Dec 2014 01:26:31 AM JST
raise NotImplementedError()
* Sat 06 Dec 2014 01:26:40 AM JST

* Sat 06 Dec 2014 01:26:40 AM JST

* Sat 06 Dec 2014 01:26:40 AM JST
from abc import ABCMeta, abstractmethod

* Sat 06 Dec 2014 01:27:21 AM JST
chan
* Sat 06 Dec 2014 01:27:21 AM JST
self.chan
* Sat 06 Dec 2014 01:29:09 AM JST
self.
* Sat 06 Dec 2014 01:30:39 AM JST
        try:
            self.chan = self.get_ssh_transport().open_channel(
                'direct-tcpip',
                (self.get_chain_host(), self.get_chain_port()),
                self.request.getpeername())
        except Exception, err:
            LOG.debug('Incoming request to {0}:{1} failed: {2}'
                      .format(self.get_chain_host(), self.get_chain_port(),
                              repr(err)))
            return

* Sat 06 Dec 2014 01:30:59 AM JST

* Sat 06 Dec 2014 01:31:00 AM JST

* Sat 06 Dec 2014 01:31:00 AM JST
        LOG.info('Tunnel closed from {}'.format(self.request.getpeername()))

* Sat 06 Dec 2014 01:34:00 AM JST

* Sat 06 Dec 2014 01:34:01 AM JST

* Sat 06 Dec 2014 01:34:01 AM JST
        # self.chan.close()

* Sat 06 Dec 2014 01:34:01 AM JST
        # self.chan.close()

* Sat 06 Dec 2014 01:34:01 AM JST
        # self.chan.close()
        # self.request.close()

* Sat 06 Dec 2014 01:34:28 AM JST
debug
* Sat 06 Dec 2014 01:34:54 AM JST
debug
* Sat 06 Dec 2014 01:35:07 AM JST
debug
* Sat 06 Dec 2014 01:36:04 AM JST
return
* Sat 06 Dec 2014 01:38:03 AM JST
kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk
* Sat 06 Dec 2014 01:39:23 AM JST
def getsubhandler(transport):
    r"""SUMMARY

    getsubhandler(transport)

    @Arguments:
    - `transport`:

    @Return:

    @Error:
    """
    class SubHandler(Handler):
        r"""SubHandler

        SubHandler is a Handler.
        Responsibility:
        """
        chain_host = 'taka16.no-ip.info'
        chain_port = 12316
        ssh_transport = transport
        def get_chain_host(self, ):
            return self.chain_host
        def get_chain_port(self, ):
            return self.chain_port
        def get_ssh_transport(self):
            return self.ssh_transport
    return SubHandler




* Sat 06 Dec 2014 01:40:30 AM JST
    parser.add_argument('-P', '--password',
                        action='store_true',
                        dest='readpass',
                        default=False,
                        help=('read password (for key or password auth) '
                        'from stdin'))

* Sat 06 Dec 2014 01:41:20 AM JST
taka16.no-ip.info
* Sat 06 Dec 2014 01:42:34 AM JST
sshhost, sport
* Sat 06 Dec 2014 01:42:51 AM JST
    parser = _predef_options()
    opts = parser.parse_args()

* Sat 06 Dec 2014 01:43:17 AM JST
sshhost, sport
* Sat 06 Dec 2014 01:44:34 AM JST
remote = 
* Sat 06 Dec 2014 01:45:02 AM JST
client.get_transport()
* Sat 06 Dec 2014 01:46:35 AM JST
ForwardServer(('', local_port), SubHander).serve_forever()
* Sat 06 Dec 2014 01:46:42 AM JST
local_port
* Sat 06 Dec 2014 01:46:47 AM JST
SubHander
* Sat 06 Dec 2014 01:46:51 AM JST

* Sat 06 Dec 2014 01:46:51 AM JST

* Sat 06 Dec 2014 01:46:52 AM JST
        forward_tunnel(

* Sat 06 Dec 2014 01:46:52 AM JST
        forward_tunnel(

* Sat 06 Dec 2014 01:46:52 AM JST
        forward_tunnel(
            opts.port, remote[0], remote[1], client.get_transport())

* Sat 06 Dec 2014 01:48:28 AM JST
12316
* Sat 06 Dec 2014 01:48:30 AM JST

* Sat 06 Dec 2014 01:48:30 AM JST

* Sat 06 Dec 2014 01:48:30 AM JST
    sport = 12316

* Sat 06 Dec 2014 01:54:31 AM JST
    # verbose
    if opts.verbose and opts.quiet:
        parser.error(
            '("-v", "--verbose") and ("-q", "--quiet") exclusive options')
    log = logging.getLogger('sshforward')
    if opts.verbose:
        log.setLevel(logging.DEBUG)
        log.debug('Debug mode.')
    if opts.quiet:
        log.setLevel(logging.ERROR)

* Sat 06 Dec 2014 01:54:52 AM JST

* Sat 06 Dec 2014 01:54:52 AM JST

* Sat 06 Dec 2014 01:54:52 AM JST
    # verbose

* Sat 06 Dec 2014 01:55:03 AM JST
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-v', '--verbose',
                       dest='verbose',
                       action='store_true',
                       default=False,
                       # (yas/expand-link "argparse_other_options" t)
                       help='A lot of messages.')

    group.add_argument('-q', '--quiet',
                       dest='quiet',
                       action='store_true',
                       default=False,
                       # (yas/expand-link "argparse_other_options" t)
                       help='A lot of messages.')


* Sat 06 Dec 2014 01:56:12 AM JST

* Sat 06 Dec 2014 01:56:12 AM JST

* Sat 06 Dec 2014 01:56:12 AM JST
import os

* Sat 06 Dec 2014 01:56:14 AM JST

* Sat 06 Dec 2014 01:56:14 AM JST

* Sat 06 Dec 2014 01:56:15 AM JST
from optparse import OptionParser

* Sat 06 Dec 2014 01:56:38 AM JST
DEBUG
* Sat 06 Dec 2014 01:57:00 AM JST
_RH = RotatingFileHandler(unicode(LOGPATH), 'w', 1024*50, 1)
_RH.setLevel(logging.INFO)
_RH.setFormatter(logging.Formatter(
    '%(asctime)s;%(name)s;%(module)s %(funcName)s(%(lineno)d);%(levelname)s;'
    '\n   %(message)s'))


* Sat 06 Dec 2014 01:58:50 AM JST
INFO
* Sat 06 Dec 2014 02:00:02 AM JST
set
* Sat 06 Dec 2014 02:00:03 AM JST
log.set
* Sat 06 Dec 2014 02:00:16 AM JST
setforwar
* Sat 06 Dec 2014 02:00:21 AM JST
logging.DEBUG
* Sat 06 Dec 2014 02:00:25 AM JST
forwardlog.setLevel(logging.DEBUG)
* Sat 06 Dec 2014 02:01:05 AM JST
LOG.addHandler(_RH)
* Sat 06 Dec 2014 02:01:24 AM JST
LOG
* Sat 06 Dec 2014 02:02:02 AM JST
mymachine.
* Sat 06 Dec 2014 02:02:04 AM JST
forwar
* Sat 06 Dec 2014 02:02:52 AM JST

* Sat 06 Dec 2014 02:02:52 AM JST

* Sat 06 Dec 2014 02:02:52 AM JST
        forwardlog.setLevel(logging.ERROR)

* Sat 06 Dec 2014 02:02:53 AM JST

* Sat 06 Dec 2014 02:02:53 AM JST

* Sat 06 Dec 2014 02:02:53 AM JST
        forwardlog.setLevel(logging.DEBUG)

* Sat 06 Dec 2014 02:03:01 AM JST
    forwardlog = logging.getLogger('sshforward')
    forwardlog.addHandler(_RH)

* Sat 06 Dec 2014 02:03:42 AM JST

* Sat 06 Dec 2014 02:03:42 AM JST

* Sat 06 Dec 2014 02:03:42 AM JST
    log = logging.getLogger('sshforward')

* Sat 06 Dec 2014 02:03:45 AM JST
log
* Sat 06 Dec 2014 02:03:47 AM JST
log
* Sat 06 Dec 2014 02:03:49 AM JST
log
* Sat 06 Dec 2014 02:03:52 AM JST
log
* Sat 06 Dec 2014 02:09:39 AM JST
True
* Sat 06 Dec 2014 02:10:22 AM JST

* Sat 06 Dec 2014 02:10:22 AM JST

* Sat 06 Dec 2014 02:10:22 AM JST
SSH_PORT = 22

* Sat 06 Dec 2014 02:10:35 AM JST
USER
* Sat 06 Dec 2014 02:10:45 AM JST

* Sat 06 Dec 2014 02:10:45 AM JST

* Sat 06 Dec 2014 02:10:45 AM JST
USER = 'root'

* Sat 06 Dec 2014 02:14:50 AM JST
chan= 
* Sat 06 Dec 2014 02:14:54 AM JST
open_channel?
* Sat 06 Dec 2014 02:22:30 AM JST
argparse
* Sat 06 Dec 2014 02:23:27 AM JST
if 'nt' == _os.name:
    from nt_agent import add_keys
elif 'posix' == _os.name:
    from posix_agent import add_keys
else:
    raise NotImplementedError('not supported {.name} environment'.format(_os))

* Sat 06 Dec 2014 02:24:08 AM JST
LOGPATH = Path('/var/log/tunnelToKing.log')
* Sat 06 Dec 2014 02:24:51 AM JST
apth
* Sat 06 Dec 2014 02:25:05 AM JST
tmp/
* Sat 06 Dec 2014 02:26:09 AM JST
pathjoin
* Sat 06 Dec 2014 02:27:22 AM JST
.joinpath(LOGFILE)
* Sat 06 Dec 2014 02:31:33 AM JST
/root/.pylib/mymachine/king
* Sat 06 Dec 2014 02:31:46 AM JST
tunnelToKing.py
* Sat 06 Dec 2014 03:08:22 AM JST
get_process_list
* Sat 06 Dec 2014 03:10:47 AM JST
cmdline()
* Sat 06 Dec 2014 03:13:09 AM JST
p=sbp.Popen(('python', '/root/.pylib/mymachine/king/tunnelToKing.py'))
* Sat 06 Dec 2014 03:13:59 AM JST
psutil.get_process_list()
* Sat 06 Dec 2014 03:15:35 AM JST
p=sbp.Popen(('/root/.pylib/mymachine/king/tunnelToKing'))
* Sat 06 Dec 2014 03:15:44 AM JST
li=[x for x in psutil.get_process_list() if x.name() == 'tunnelToKing']
* Sat 06 Dec 2014 03:15:52 AM JST
psutil.get_process_list()
* Sat 06 Dec 2014 03:15:58 AM JST
import psutil
* Sat 06 Dec 2014 03:16:10 AM JST
li=[x for x in psutil.get_process_list() if x.name() == 'python']
* Sat 06 Dec 2014 03:16:20 AM JST
li[0].cmdline()
li[1].cmdline()
li[2].cmdline()
li[3].cmdline()
li[4].cmdline()
li[5].cmdline()
li[6].cmdline()

* Sat 06 Dec 2014 03:16:29 AM JST
import psutil
p=sbp.Popen(('/root/.pylib/mymachine/king/tunnelToKing'))

* Sat 06 Dec 2014 03:16:36 AM JST
li=[x for x in psutil.get_process_list() if x.name() == 'tunnelToKing']
* Sat 06 Dec 2014 03:16:42 AM JST
li=[x for x in psutil.get_process_list() if x.name() == 'python']
* Sat 06 Dec 2014 03:16:48 AM JST
li[0].cmdline()
li[1].cmdline()
li[2].cmdline()
li[3].cmdline()
li[4].cmdline()
li[5].cmdline()
li[6].cmdline()

* Sat 06 Dec 2014 03:18:05 AM JST
cmdline()
* Sat 06 Dec 2014 05:02:21 AM JST
get_pid_list
* Sat 06 Dec 2014 05:02:34 AM JST
Process
* Sun 07 Dec 2014 06:22:15 PM JST
paramiko.AutoAddPolicy()
* Sun 07 Dec 2014 11:15:03 PM JST
os.environ['SSH_AUTH_SOCK']
* Sun 07 Dec 2014 11:19:29 PM JST
ki')
* Sun 07 Dec 2014 11:19:29 PM JST
lookup('ki')
* Sun 07 Dec 2014 11:19:42 PM JST
king/
* Sun 07 Dec 2014 11:19:43 PM JST
pylib/king/
* Mon 08 Dec 2014 04:56:38 AM JST
c.InteractiveShellApp.exec_lines.append(
    '%logstart "~/.zsh/ipython.log.py" append')

* Mon 08 Dec 2014 04:58:03 AM JST
paramiko.PKey.from_private_key_file('/root/.ssh/kagi', )
* Mon 08 Dec 2014 05:02:25 AM JST
paramiko.RSAKey.from_private_key_file(str(p))
* Mon 08 Dec 2014 05:02:35 AM JST
'/root/.ssh/kagi'
* Mon 08 Dec 2014 05:02:50 AM JST
getpass
* Mon 08 Dec 2014 05:09:50 AM JST
from paramiko import agent
* Mon 08 Dec 2014 05:10:01 AM JST
agent.Agent().get_keys()
* Mon 08 Dec 2014 05:12:14 AM JST
get_keys()
* Mon 08 Dec 2014 05:13:15 AM JST
sign_ssh_data
* Mon 08 Dec 2014 05:20:20 AM JST
ssh = paramiko.SSHClient()
* Mon 08 Dec 2014 05:20:24 AM JST
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
* Mon 08 Dec 2014 05:20:28 AM JST
ssh.connect('192.168.1.1', username='root', key_filename='/root/.ssh/kagi')
* Mon 08 Dec 2014 05:24:29 AM JST
a=agent.Agent()
* Mon 08 Dec 2014 05:26:29 AM JST
AgentKey
* Mon 08 Dec 2014 05:47:57 AM JST
verify_ssh_sig?
* Mon 08 Dec 2014 05:48:15 AM JST
sign_ssh_data
* Mon 08 Dec 2014 08:55:18 AM JST
/usr/local/lib/python2.7/dist-packages/paramiko/
* Mon 08 Dec 2014 08:56:19 AM JST
SSHConfig
* Mon 08 Dec 2014 09:24:43 AM JST
paramiko.SSHClient()
* Mon 08 Dec 2014 09:27:08 AM JST
taka16.no-ip.info
* Mon 08 Dec 2014 09:44:38 AM JST
s=paramiko.SSHClient()
* Mon 08 Dec 2014 06:20:49 PM JST
_transport
* Mon 08 Dec 2014 06:21:15 PM JST
_conecc
* Mon 08 Dec 2014 06:21:34 PM JST
open_sftp()
* Mon 08 Dec 2014 06:21:35 PM JST
_ssh.open_sftp()
* Mon 08 Dec 2014 06:21:47 PM JST
_ssh.
* Mon 08 Dec 2014 06:22:55 PM JST
open_sftp()
* Tue 09 Dec 2014 08:49:11 AM JST
config
* Tue 09 Dec 2014 08:51:38 AM JST
    def __init__(self, dict=None, **kwargs):

* Tue 09 Dec 2014 08:52:03 AM JST
None
* Tue 09 Dec 2014 08:55:47 AM JST

* Tue 09 Dec 2014 08:55:48 AM JST

* Tue 09 Dec 2014 08:55:48 AM JST
import UserDict

* Tue 09 Dec 2014 08:57:06 AM JST
self.
* Tue 09 Dec 2014 08:57:13 AM JST
        if dic is not None:
            self.update(dic)

* Tue 09 Dec 2014 09:02:24 AM JST

* Tue 09 Dec 2014 09:02:24 AM JST

* Tue 09 Dec 2014 09:02:24 AM JST
        print('DEBUG-1-2014-12-09-084848.junk.py')

* Tue 09 Dec 2014 09:02:25 AM JST

* Tue 09 Dec 2014 09:02:25 AM JST

* Tue 09 Dec 2014 09:02:25 AM JST
        print('DEBUG-2-2014-12-09-084848.junk.py')

* Tue 09 Dec 2014 09:02:26 AM JST

* Tue 09 Dec 2014 09:02:26 AM JST

* Tue 09 Dec 2014 09:02:26 AM JST
        print('DEBUG-3-2014-12-09-084848.junk.py')

* Tue 09 Dec 2014 09:02:27 AM JST

* Tue 09 Dec 2014 09:02:27 AM JST

* Tue 09 Dec 2014 09:02:27 AM JST
        print('DEBUG-4-2014-12-09-084848.junk.py')

* Tue 09 Dec 2014 09:02:28 AM JST

* Tue 09 Dec 2014 09:02:28 AM JST

* Tue 09 Dec 2014 09:02:28 AM JST
        print('DEBUG-5-2014-12-09-084848.junk.py')

* Tue 09 Dec 2014 09:02:43 AM JST
Path(u'~/.ssh/config').expand()
* Tue 09 Dec 2014 09:12:33 AM JST
a=paramiko.SSHConfig()
* Tue 09 Dec 2014 10:47:38 PM JST
t
* Tue 09 Dec 2014 10:51:17 PM JST
keys()
* Tue 09 Dec 2014 11:24:34 PM JST
os.path.expanduser('~/.ssh/known_hosts')
* Tue 09 Dec 2014 11:27:32 PM JST
info
* Tue 09 Dec 2014 11:27:32 PM JST
ip.info
* Tue 09 Dec 2014 11:27:33 PM JST
no-ip.info
* Tue 09 Dec 2014 11:27:34 PM JST
taka16.no-ip.info
* Wed 10 Dec 2014 09:17:14 PM JST
class V2C(Task):
    r"""V2C

    V2C is a Task.
    Responsibility:
    """

    def execute(self, ):
        r"""SUMMARY

        execute()

        @Return:

        @Error:
        """
        LOG.info('* Do v2c')
        sbp.Popen('/opt/v2c/v2c')
        sleep(2)
        # filepath = sikuli.SKL_FILE.get('v2c', None)
        # if filepath:
        #     sikuli.sikulirun(filepath)



* Thu 11 Dec 2014 03:59:14 AM JST
'squelch all informational output'
* Thu 11 Dec 2014 04:20:51 AM JST
so
* Thu 11 Dec 2014 04:20:51 AM JST
from so
* Thu 11 Dec 2014 04:32:20 AM JST

class HostPort:
    """Class HostPort
    """
    # Attributes:
    host = None  # (HostName) 
    port = None  # (TCPPort) 
    
    # Operations
    def gethost(self):
        """function gethost
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def sethost(self, hostname):
        """function sethost
        
        hostname: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def getport(self):
        """function getport
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def setport(self, port):
        """function setport
        
        port: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Thu 11 Dec 2014 04:33:49 AM JST
port
* Thu 11 Dec 2014 04:34:38 AM JST
from t1.socketutil import HostName
* Thu 11 Dec 2014 04:34:47 AM JST
host
* Thu 11 Dec 2014 04:35:54 AM JST
socket.gethostbyname(self)
* Thu 11 Dec 2014 04:35:56 AM JST

* Thu 11 Dec 2014 04:35:56 AM JST

* Thu 11 Dec 2014 04:35:57 AM JST
        self._ipv4 = 

* Thu 11 Dec 2014 04:36:03 AM JST
socket.getfqdn(self)
* Thu 11 Dec 2014 04:36:05 AM JST

* Thu 11 Dec 2014 04:36:05 AM JST

* Thu 11 Dec 2014 04:36:05 AM JST
        self._fqdn = 

* Thu 11 Dec 2014 04:36:08 AM JST
False
* Thu 11 Dec 2014 04:36:08 AM JST
force=False
* Thu 11 Dec 2014 04:36:53 AM JST
gethostbyname
* Thu 11 Dec 2014 04:37:25 AM JST
getfqdn
* Thu 11 Dec 2014 04:37:43 AM JST
from t1.socketutil import HostName
* Thu 11 Dec 2014 04:38:13 AM JST
gethostbyname()
* Thu 11 Dec 2014 04:38:49 AM JST
None # should raise NotImplementedError()
* Thu 11 Dec 2014 04:38:51 AM JST
return
* Thu 11 Dec 2014 04:39:06 AM JST
return None # should raise NotImplementedError()
* Thu 11 Dec 2014 04:39:18 AM JST
host
* Thu 11 Dec 2014 04:39:26 AM JST
HostName(host)
* Thu 11 Dec 2014 04:39:30 AM JST
HostName(host)
* Thu 11 Dec 2014 04:39:41 AM JST
TCPPort(port)
* Thu 11 Dec 2014 04:39:47 AM JST
None # should raise NotImplementedError()
* Thu 11 Dec 2014 04:39:54 AM JST
return None # should raise NotImplementedError()
* Thu 11 Dec 2014 04:40:45 AM JST
getfqdn()
* Thu 11 Dec 2014 04:41:03 AM JST
str(
* Thu 11 Dec 2014 04:43:31 AM JST
from HostPort import HostPort

class SSHHost:
    """Class SSHHost
    """
    # Attributes:
    hostport = None  # (HostPort) 
    user = None  # () 
    key = None  # () 
    
    # Operations
    def getport(self):
        """function getport
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def setport(self, port):
        """function setport
        
        port: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def gethost(self):
        """function gethost
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def sethost(self, hostname):
        """function sethost
        
        hostname: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def getkey(self):
        """function getkey
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def setkey(self, keypath):
        """function setkey
        
        keypath: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def getuser(self):
        """function getuser
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def setuser(self, user):
        """function setuser
        
        user: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Thu 11 Dec 2014 04:47:27 AM JST
None # should raise NotImplementedError()
* Thu 11 Dec 2014 04:47:41 AM JST
return None # should raise NotImplementedError()
* Thu 11 Dec 2014 04:48:05 AM JST
None # should raise NotImplementedError()
* Thu 11 Dec 2014 04:48:14 AM JST
None # should raise NotImplementedError()
* Thu 11 Dec 2014 04:48:23 AM JST
return 
* Thu 11 Dec 2014 04:48:34 AM JST
None # should raise NotImplementedError()
* Thu 11 Dec 2014 04:49:09 AM JST
return None # should raise NotImplementedError()
* Thu 11 Dec 2014 04:49:21 AM JST
None # should raise NotImplementedError()
* Thu 11 Dec 2014 04:49:26 AM JST
return None # should raise NotImplementedError()
* Thu 11 Dec 2014 04:49:52 AM JST

* Thu 11 Dec 2014 04:49:52 AM JST

* Thu 11 Dec 2014 04:49:52 AM JST
        if user:

* Thu 11 Dec 2014 04:50:09 AM JST

* Thu 11 Dec 2014 04:50:09 AM JST

* Thu 11 Dec 2014 04:50:09 AM JST
        self._user = user or getuser()

* Thu 11 Dec 2014 04:50:44 AM JST
from SSHHost import SSHHost

class PortForward:
    """Class PortForward
    """
    # Attributes:
    sshhost = None  # (SSHHost) 
    target = None  # (HostName) 
    
    # Operations
    def spawn(self, localport, targetport):
        """function spawn
        
        localport: 
        targetport: 
        
        returns Process
        """
        return None # should raise NotImplementedError()
    
    def serve_forever(self, localport, targetport):
        """function serve_forever
        
        localport: 
        targetport: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_process(self):
        """function list_process
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_sshhost(self):
        """function get_sshhost
        
        returns SSHHost
        """
        return None # should raise NotImplementedError()
    
    def set_sshhost(self, host):
        """function set_sshhost
        
        host: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_target(self):
        """function get_target
        
        returns HostName
        """
        return None # should raise NotImplementedError()
    
    def set_target(self, host):
        """function set_target
        
        host: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_sshuser(self):
        """function get_sshuser
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_sshuser(self, user):
        """function set_sshuser
        
        user: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_sshport(self):
        """function get_sshport
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_sshport(self, port):
        """function set_sshport
        
        port: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_sshkey(self):
        """function get_sshkey
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_sshkey(self, keypath):
        """function set_sshkey
        
        keypath: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Thu 11 Dec 2014 04:51:57 AM JST

* Thu 11 Dec 2014 04:51:57 AM JST

* Thu 11 Dec 2014 04:51:57 AM JST
        self._

* Thu 11 Dec 2014 04:51:59 AM JST
sshhost
* Thu 11 Dec 2014 04:52:18 AM JST

* Thu 11 Dec 2014 04:52:19 AM JST

* Thu 11 Dec 2014 04:52:19 AM JST
        self._sshport = sshport

* Thu 11 Dec 2014 04:52:19 AM JST
        self._sshport = sshport

* Thu 11 Dec 2014 04:52:19 AM JST
        self._sshport = sshport
        self._user = user

* Thu 11 Dec 2014 04:52:19 AM JST
        self._sshport = sshport
        self._user = user

* Thu 11 Dec 2014 04:52:19 AM JST
        self._sshport = sshport
        self._user = user
        self._key = key

* Thu 11 Dec 2014 04:52:37 AM JST
None # should raise NotImplementedError()
* Thu 11 Dec 2014 04:52:56 AM JST
return None # should raise NotImplementedError()
* Thu 11 Dec 2014 04:53:06 AM JST
None # should raise NotImplementedError()
* Thu 11 Dec 2014 04:53:12 AM JST
_sshhost.
* Thu 11 Dec 2014 04:54:13 AM JST
from sshforward.hostport import HostPort
* Thu 11 Dec 2014 04:54:20 AM JST
from t1.socketutil import HostName
* Thu 11 Dec 2014 04:54:40 AM JST
return None # should raise NotImplementedError()
* Thu 11 Dec 2014 05:00:14 AM JST
socket.
* Thu 11 Dec 2014 05:01:14 AM JST
"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$"
* Thu 11 Dec 2014 05:02:13 AM JST
scanner
* Thu 11 Dec 2014 05:06:17 AM JST
None # should raise NotImplementedError()
* Thu 11 Dec 2014 05:06:28 AM JST
return None # should raise NotImplementedError()
* Thu 11 Dec 2014 05:06:56 AM JST
None # should raise NotImplementedError()
* Thu 11 Dec 2014 05:07:08 AM JST
return None # should raise NotImplementedError()
* Thu 11 Dec 2014 05:07:33 AM JST
None # should raise NotImplementedError()
* Thu 11 Dec 2014 05:08:04 AM JST
self._key
* Thu 11 Dec 2014 05:08:12 AM JST
self._key = keypath
* Thu 11 Dec 2014 05:16:28 AM JST
_sshhost
* Thu 11 Dec 2014 05:16:40 AM JST
getkey
* Thu 11 Dec 2014 05:16:45 AM JST
_sshhost.
* Thu 11 Dec 2014 05:21:30 AM JST
        opts = []
        opts.append('-p {}'.format(localport))
        opts.append('-u {}'.format(self.get_sshuser()))
        key = self.get_sshkey()
        if key:
            opts.append('-k')
        opts.append('-r {}:{}'.format(self.get_target(), targetport))
        opts.append('{}:{}'.format(self.get_sshhost(), self.get_sshport()))

* Thu 11 Dec 2014 05:25:15 AM JST
__file__
* Thu 11 Dec 2014 05:25:43 AM JST
__file__
* Thu 11 Dec 2014 05:26:40 AM JST
basename()
* Thu 11 Dec 2014 05:27:00 AM JST
Path(__file__).dirname()
* Thu 11 Dec 2014 05:28:08 AM JST
sshforwarder
* Thu 11 Dec 2014 05:28:28 AM JST
sshforwarder
* Thu 11 Dec 2014 05:28:34 AM JST

* Thu 11 Dec 2014 05:28:34 AM JST

* Thu 11 Dec 2014 05:28:34 AM JST
        filepath = Path(__file__).dirname().joinpath('sshforwarder.py')

* Thu 11 Dec 2014 05:29:07 AM JST
python 
* Thu 11 Dec 2014 05:29:25 AM JST
 {}
* Thu 11 Dec 2014 05:29:44 AM JST
sshforwarder.__file__
* Thu 11 Dec 2014 05:30:07 AM JST
self.get_sshuser()
* Thu 11 Dec 2014 05:30:27 AM JST
self.get_sshkey()
* Thu 11 Dec 2014 05:32:21 AM JST

* Thu 11 Dec 2014 05:32:22 AM JST

* Thu 11 Dec 2014 05:32:22 AM JST
from path import Path

* Thu 11 Dec 2014 05:32:35 AM JST
sbp
* Thu 11 Dec 2014 05:36:49 AM JST
None # should raise NotImplementedError()
* Thu 11 Dec 2014 05:37:06 AM JST
sbp.
* Thu 11 Dec 2014 05:47:43 AM JST
not 
* Thu 11 Dec 2014 05:48:30 AM JST
get_process_list   
* Thu 11 Dec 2014 05:51:35 AM JST
psutil.
* Thu 11 Dec 2014 05:52:06 AM JST
get_proce
* Thu 11 Dec 2014 05:52:34 AM JST
iter_process
* Thu 11 Dec 2014 05:54:23 AM JST
psutil.
* Thu 11 Dec 2014 05:55:06 AM JST
__file__
* Thu 11 Dec 2014 05:55:06 AM JST
sshforwarder.__file__
* Thu 11 Dec 2014 05:55:53 AM JST
fpath
* Thu 11 Dec 2014 05:56:07 AM JST
None # should raise NotImplementedError()
* Thu 11 Dec 2014 05:56:14 AM JST

* Thu 11 Dec 2014 05:56:14 AM JST

* Thu 11 Dec 2014 05:56:14 AM JST
        fpath = sshforwarder.__file__

* Thu 11 Dec 2014 06:04:21 AM JST
class ForwardServer(SocketServer.ThreadingTCPServer):
    daemon_threads = True
    allow_reuse_address = True


class Handler(SocketServer.BaseRequestHandler):

    chan = None

    def get_chain_host(self, ):
        raise NotImplementedError()

    def get_chain_port(self, ):
        raise NotImplementedError()

    def get_ssh_transport(self, ):
        raise NotImplementedError()

    def setup(self, ):
        r"""SUMMARY

        setup()

        @Return:

        @Error:
        """
        try:
            self.chan = self.get_ssh_transport().open_channel(
                'direct-tcpip',
                (self.get_chain_host(), self.get_chain_port()),
                self.request.getpeername())
        except Exception, err:
            self.chan = None
            LOG.error('Incoming request to {0}:{1} failed: {2}'
                      .format(self.get_chain_host(), self.get_chain_port(),
                              repr(err)))

    def handle(self):
        if self.chan is None:
            LOG.warn('Incoming request to {0}:{1}'
                      ' was rejected by the SSH server.'
                      .format(self.get_chain_host(), self.get_chain_port()))
            return
        LOG.info('Connected!  Tunnel open {0} -> {1} -> {2}'
                  .format(self.request.getpeername(),
                          self.chan.getpeername(),
                          (self.get_chain_host(), self.get_chain_port())))
        while 1:
            r, w, x = select.select([self.request, self.chan], [], [])
            if self.request in r:
                data = self.request.recv(1024)
                if len(data) == 0:
                    break
                self.chan.send(data)
            if self.chan in r:
                data = self.chan.recv(1024)
                if len(data) == 0:
                    break
                self.request.send(data)

    def finish(self, ):
        r"""SUMMARY

        finish()

        @Return:

        @Error:
        """
        if self.chan:
            self.chan.close()
        if self.request:
            self.request.close()
        LOG.info('Tunnel closed from {}'.format(self.request.getpeername()))

* Thu 11 Dec 2014 06:04:47 AM JST
import SocketServer

* Thu 11 Dec 2014 06:05:00 AM JST
###############################################################################
# console
_CH = logging.StreamHandler()
_CH.setLevel(logging.INFO)

LOG = logging.getLogger('sshforward')
LOG.setLevel(logging.INFO)
LOG.addHandler(_CH)

# exception
def logging_handle_exceptions(excls, value, trcbck):
    r"""Handling exception hook.

    sys.excepthook = logging_handle_exceptions
    """
    import traceback
    if issubclass(excls, KeyboardInterrupt):
        sys.__excepthook__(excls, value, trcbck)
        return
    errortype = 'Error type: {}'.format(excls)
    valuetxt = 'Uncaught exception: {0}'.format(str(value))
    trcbcktxt = ''.join(traceback.format_tb(trcbck))
    LOG.exception('\n'.join([errortype, valuetxt, trcbcktxt]))

sys.excepthook = logging_handle_exceptions
###############################################################################

* Thu 11 Dec 2014 06:05:07 AM JST
import logging

* Thu 11 Dec 2014 06:05:21 AM JST
import sys
* Thu 11 Dec 2014 06:05:38 AM JST
import select
* Thu 11 Dec 2014 06:06:22 AM JST
ForwardRequestHandler
* Thu 11 Dec 2014 06:06:32 AM JST
ForwardRequestHandler
* Thu 11 Dec 2014 06:06:52 AM JST
def forward_tunnel(local_port, remote_host, remote_port, transport):
    # this is a little convoluted, but lets me configure things for the Handler
    # object.  (SocketServer doesn't give Handlers any way to access the outer
    # server normally.)
    class SubHander (Handler):
        chain_host = remote_host
        chain_port = remote_port
        ssh_transport = transport
        def get_chain_host(self, ):
            return self.chain_host
        def get_chain_port(self, ):
            return self.chain_port
        def get_ssh_transport(self):
            return self.ssh_transport

    ForwardServer(('', local_port), SubHander).serve_forever()

* Thu 11 Dec 2014 06:12:26 AM JST
import sys
import logging


###############################################################################
# console
_CH = logging.StreamHandler()
_CH.setLevel(logging.INFO)

LOG = logging.getLogger('sshforward')
LOG.setLevel(logging.INFO)
LOG.addHandler(_CH)

# exception
def logging_handle_exceptions(excls, value, trcbck):
    r"""Handling exception hook.

    sys.excepthook = logging_handle_exceptions
    """
    import traceback
    if issubclass(excls, KeyboardInterrupt):
        sys.__excepthook__(excls, value, trcbck)
        return
    errortype = 'Error type: {}'.format(excls)
    valuetxt = 'Uncaught exception: {0}'.format(str(value))
    trcbcktxt = ''.join(traceback.format_tb(trcbck))
    LOG.exception('\n'.join([errortype, valuetxt, trcbcktxt]))

sys.excepthook = logging_handle_exceptions
###############################################################################

* Thu 11 Dec 2014 06:12:41 AM JST
form 
* Thu 11 Dec 2014 06:13:20 AM JST
ForwardServer
* Thu 11 Dec 2014 06:14:02 AM JST

* Thu 11 Dec 2014 06:14:02 AM JST
forward_tunnel
* Thu 11 Dec 2014 06:14:04 AM JST
server
* Thu 11 Dec 2014 06:14:19 AM JST

* Thu 11 Dec 2014 06:14:19 AM JST

* Thu 11 Dec 2014 06:14:19 AM JST
    log = logging.getLogger('sshforward')

* Thu 11 Dec 2014 06:14:22 AM JST
log
* Thu 11 Dec 2014 06:14:24 AM JST
log
* Thu 11 Dec 2014 06:14:26 AM JST
log
* Thu 11 Dec 2014 06:14:32 AM JST
log
* Thu 11 Dec 2014 06:14:56 AM JST
log
* Thu 11 Dec 2014 06:15:00 AM JST
log
* Thu 11 Dec 2014 06:15:01 AM JST
log
* Thu 11 Dec 2014 06:15:11 AM JST
import sys
import logging

* Thu 11 Dec 2014 06:16:45 AM JST
return None # should raise NotImplementedError()
* Thu 11 Dec 2014 06:17:10 AM JST
targetport
* Thu 11 Dec 2014 06:18:02 AM JST
self.get_sshport()
* Thu 11 Dec 2014 06:19:10 AM JST
client.set_missing_host_key_policy(paramiko.WarningPolicy())
* Thu 11 Dec 2014 06:19:14 AM JST
Warning
* Thu 11 Dec 2014 06:20:33 AM JST
clien
* Thu 11 Dec 2014 06:20:39 AM JST
    try:
        client.connect(
            server, sport, username=opts.user, key_filename=opts.keyfile,
            look_for_keys=opts.look_for_keys, password=password)
    except Exception, err:
        LOG.error('*** Failed to connect to {0}:{1}: {3}'
                  .format(server, sport, err))
        sys.exit(1)

* Thu 11 Dec 2014 06:21:16 AM JST
server
* Thu 11 Dec 2014 06:21:38 AM JST
sport
* Thu 11 Dec 2014 06:21:54 AM JST
self.get_sshport()
* Thu 11 Dec 2014 06:23:43 AM JST
                 
* Thu 11 Dec 2014 06:24:53 AM JST
            
* Thu 11 Dec 2014 06:26:13 AM JST
            
* Thu 11 Dec 2014 06:26:27 AM JST
pass
* Thu 11 Dec 2014 06:26:43 AM JST

* Thu 11 Dec 2014 06:26:43 AM JST

* Thu 11 Dec 2014 06:26:43 AM JST
        try:

* Thu 11 Dec 2014 06:27:35 AM JST

* Thu 11 Dec 2014 06:27:35 AM JST

* Thu 11 Dec 2014 06:27:35 AM JST
    remote, rport = get_host_port(opts.remote, SSH_PORT)

* Thu 11 Dec 2014 06:28:54 AM JST

* Thu 11 Dec 2014 06:28:56 AM JST
forward_tunnel
* Thu 11 Dec 2014 06:29:03 AM JST
server 
* Thu 11 Dec 2014 06:30:51 AM JST
from sshforward import portforward
p=portforward.PortForward('taka16.no-ip.info', '192.168.1.123', sshport=12316, user='root', key='/root/.ssh/kagi')

* Thu 11 Dec 2014 06:31:41 AM JST
str(
* Thu 11 Dec 2014 06:34:39 AM JST

* Thu 11 Dec 2014 06:34:39 AM JST

* Thu 11 Dec 2014 06:34:39 AM JST
import sys

* Thu 11 Dec 2014 06:36:53 AM JST
portforwa
* Thu 11 Dec 2014 06:37:48 AM JST
    forwarder = portforward.PortForward()
* Thu 11 Dec 2014 06:37:51 AM JST

* Thu 11 Dec 2014 06:37:51 AM JST

* Thu 11 Dec 2014 06:37:51 AM JST
    forwarder = portforward.PortForward()

* Thu 11 Dec 2014 06:38:39 AM JST

* Thu 11 Dec 2014 06:38:39 AM JST

* Thu 11 Dec 2014 06:38:39 AM JST
    forwarder = portforward.PortForward(server, remote, sport)

* Thu 11 Dec 2014 06:40:15 AM JST
        
* Thu 11 Dec 2014 06:41:49 AM JST
    
* Thu 11 Dec 2014 06:41:51 AM JST
        
* Thu 11 Dec 2014 06:42:08 AM JST
    forwarder.serve_forever(opts.port, rport,
                            look_for_keys=opts.look_for_keys,
                            passwd=password)

* Thu 11 Dec 2014 06:42:39 AM JST
    except Exception, err:
        LOG.error('*** Failed to connect to {0}:{1}: {3}'
                  .format(server, sport, err))
        sys.exit(1)

* Thu 11 Dec 2014 06:44:21 AM JST
remote
* Thu 11 Dec 2014 06:44:49 AM JST
remote
* Thu 11 Dec 2014 06:45:03 AM JST
remote
* Thu 11 Dec 2014 06:47:57 AM JST
from sshforward 
* Thu 11 Dec 2014 06:48:14 AM JST
from sshforward import portforward
* Thu 11 Dec 2014 06:48:22 AM JST
p=portforward.PortForward('taka16.no-ip.info', '192.168.1.123', sshport=12316, user='root', key='/root/.ssh/kagi')
p.serve_forever(4444, 12316)

* Thu 11 Dec 2014 06:48:33 AM JST
p.spawn(4442, 12316)

* Thu 11 Dec 2014 06:48:43 AM JST
form 
* Thu 11 Dec 2014 06:48:53 AM JST
PortFor
* Thu 11 Dec 2014 06:48:55 AM JST
import PortFor
* Thu 11 Dec 2014 06:48:56 AM JST
portforward import PortFor
* Thu 11 Dec 2014 06:51:26 AM JST
portforward
* Thu 11 Dec 2014 06:51:41 AM JST
portforward.
* Thu 11 Dec 2014 06:54:30 AM JST
sshforward 
* Thu 11 Dec 2014 06:54:31 AM JST
from sshforward 
* Thu 11 Dec 2014 06:54:32 AM JST
PortForward
* Thu 11 Dec 2014 06:54:43 AM JST
sshportforward
* Thu 11 Dec 2014 06:55:40 AM JST
portforward
* Thu 11 Dec 2014 06:56:00 AM JST
from sshforward import PortForward
* Thu 11 Dec 2014 06:56:03 AM JST
from sshforward import PortForward
* Thu 11 Dec 2014 06:57:16 AM JST
__revision__ = "$Revision$"
__version__ = "0.1.0"

* Thu 11 Dec 2014 06:58:39 AM JST
p=portforward.PortForward('taka16.no-ip.info', '192.168.1.123', sshport=12316, user='root', key='/root/.ssh/kagi')

* Thu 11 Dec 2014 06:58:46 AM JST
portforward.
* Thu 11 Dec 2014 06:58:48 AM JST
p=PortForward('taka16.no-ip.info', '192.168.1.123', sshport=12316, user='root', key='/root/.ssh/kagi')

* Thu 11 Dec 2014 06:58:51 AM JST
p.spawn(4442, 12316)
* Thu 11 Dec 2014 06:58:59 AM JST

* Thu 11 Dec 2014 06:58:59 AM JST

* Thu 11 Dec 2014 06:59:00 AM JST
# from sshforward.server import forward_tunnel

* Thu 11 Dec 2014 06:59:37 AM JST

* Thu 11 Dec 2014 06:59:38 AM JST

* Thu 11 Dec 2014 06:59:38 AM JST
    # forward

* Thu 11 Dec 2014 06:59:43 AM JST
    forwarder = sshportforward.PortForward(
        sshserver, target, sshport=sshport, user=opts.user, key=opts.keyfile)

* Thu 11 Dec 2014 06:59:50 AM JST
    forwarder = sshportforward.PortForward(
        sshserver, target, sshport=sshport, user=opts.user, key=opts.keyfile)

* Thu 11 Dec 2014 06:59:53 AM JST

* Thu 11 Dec 2014 06:59:53 AM JST

* Thu 11 Dec 2014 06:59:53 AM JST
    # connect to host

* Thu 11 Dec 2014 06:59:55 AM JST

* Thu 11 Dec 2014 06:59:56 AM JST

* Thu 11 Dec 2014 06:59:56 AM JST
        # forward_tunnel(opts.port, remote, rport, client.get_transport())

* Thu 11 Dec 2014 07:00:08 AM JST

* Thu 11 Dec 2014 07:00:08 AM JST

* Thu 11 Dec 2014 07:00:08 AM JST
# import paramiko

* Thu 11 Dec 2014 07:03:15 AM JST
ssh
* Thu 11 Dec 2014 07:03:15 AM JST
form ssh
* Thu 11 Dec 2014 07:03:37 AM JST

* Thu 11 Dec 2014 07:03:39 AM JST
server
* Thu 11 Dec 2014 07:03:40 AM JST
forward_tunnel
* Thu 11 Dec 2014 07:03:47 AM JST
StandardError
* Thu 11 Dec 2014 07:04:09 AM JST

* Thu 11 Dec 2014 07:04:09 AM JST

* Thu 11 Dec 2014 07:04:09 AM JST
            # TODO: (Atami) [2014/12/11]

* Thu 11 Dec 2014 07:08:54 AM JST
sbp.
* Thu 11 Dec 2014 07:08:56 AM JST
sbp.
* Thu 11 Dec 2014 07:19:14 AM JST
from paramiko import SSHConfig
from path import Path


class KingParameter(dict):
    r"""KingParameter

    KingParameter is a dict.
    Responsibility:
    """
    name = 'ki'
    config = Path('~/.ssh/config').expand()
    default = {'hostname': '127.0.0.1',
               'identityfile': ['~/.ssh/kagi'],
               'port': '12316',
               'user': 't1',
               }

    def __init__(self, dic=None, **kwargs):
        dict.__init__(self, **kwargs)
        self.update(self.default)
        config = SSHConfig()
        config.parse(self.config.open('rb'))
        self.update(config.lookup(self.name))
        if dic is not None:
            self.update(dic)

* Thu 11 Dec 2014 07:20:21 AM JST

* Thu 11 Dec 2014 07:20:21 AM JST

* Thu 11 Dec 2014 07:20:21 AM JST
    config = 

* Thu 11 Dec 2014 07:20:30 AM JST
Path('~/.ssh/config').expand()
* Thu 11 Dec 2014 07:20:42 AM JST
.expand()
* Thu 11 Dec 2014 07:22:39 AM JST

* Thu 11 Dec 2014 07:22:39 AM JST

* Thu 11 Dec 2014 07:22:39 AM JST
        config = SSHConfig()

* Thu 11 Dec 2014 07:22:43 AM JST

* Thu 11 Dec 2014 07:22:43 AM JST

* Thu 11 Dec 2014 07:22:43 AM JST
        config.parse(self.config.open('rb'))

* Thu 11 Dec 2014 07:22:48 AM JST
config
* Thu 11 Dec 2014 07:22:55 AM JST

* Thu 11 Dec 2014 07:22:55 AM JST

* Thu 11 Dec 2014 07:22:55 AM JST
    config = Path('~/.ssh/config').expand()

* Thu 11 Dec 2014 07:23:32 AM JST
CONFIGPATH = Path('~/.ssh/config').expand()
* Thu 11 Dec 2014 07:23:36 AM JST
from paramiko import SSHConfig


CONFIGPATH = Path('~/.ssh/config').expand()
CONFIG = SSHConfig()

* Thu 11 Dec 2014 07:23:40 AM JST
if CONFIGPATH.exists():
    CONFIG.parse(CONFIGPATH.open('rb'))

* Thu 11 Dec 2014 07:24:15 AM JST
    default = {'hostname': '127.0.0.1',
               'identityfile': ['~/.ssh/kagi'],
               'port': '12316',
               'user': 't1',
               }

* Thu 11 Dec 2014 07:24:23 AM JST
'taka16.no-ip.info'
* Thu 11 Dec 2014 07:25:37 AM JST
    def __init__(self, dic=None, **kwargs):
        dict.__init__(self, **kwargs)
        self.update(self.default)
        self.update(CONFIG.lookup(self.name))
        if dic is not None:
            self.update(dic)

* Thu 11 Dec 2014 07:26:17 AM JST
class
* Thu 11 Dec 2014 07:30:02 AM JST
impo
* Thu 11 Dec 2014 07:31:20 AM JST
client
* Thu 11 Dec 2014 07:32:09 AM JST
set_missing_host_key_policy
* Thu 11 Dec 2014 07:32:51 AM JST

* Thu 11 Dec 2014 07:32:51 AM JST

* Thu 11 Dec 2014 07:32:51 AM JST
        if policy is not None:

* Thu 11 Dec 2014 07:32:57 AM JST
policy
* Thu 11 Dec 2014 07:33:29 AM JST
load_host_keys
* Thu 11 Dec 2014 07:33:37 AM JST

* Thu 11 Dec 2014 07:33:38 AM JST
load_system_host_keys
* Thu 11 Dec 2014 07:34:41 AM JST
param.get('hostname')
* Thu 11 Dec 2014 07:35:00 AM JST
username
* Thu 11 Dec 2014 07:35:59 AM JST
param.get('identityfile')
* Thu 11 Dec 2014 07:36:49 AM JST

* Thu 11 Dec 2014 07:36:50 AM JST

* Thu 11 Dec 2014 07:36:50 AM JST
        key = 

* Thu 11 Dec 2014 07:36:51 AM JST

* Thu 11 Dec 2014 07:36:51 AM JST

* Thu 11 Dec 2014 07:36:51 AM JST
        host = param.get('hostname')

* Thu 11 Dec 2014 07:37:04 AM JST
param.get('identityfile', [None, ])[0]
* Thu 11 Dec 2014 07:38:14 AM JST

* Thu 11 Dec 2014 07:38:14 AM JST

* Thu 11 Dec 2014 07:38:14 AM JST
        key = param.get('identityfile', [None, ])[0]

* Thu 11 Dec 2014 07:38:25 AM JST
                          
* Thu 11 Dec 2014 07:39:39 AM JST
        self._ssh = SSHClient()
        self._ssh.load_system_host_keys()
        self._ssh.set_missing_host_key_policy(RejectPolicy())
        param = self.get_parameter()
        self._ssh.connect(hostname=param.get('hostname'),
                          port=param.get('port'),
                          username=param.get('user'),
                          key_filename=param.get('identityfile', [None,])[0],
                          password=password,
                          timeout=timeout,
                          allow_agent=True,
                          compress=compress)

* Thu 11 Dec 2014 07:39:46 AM JST
_
* Thu 11 Dec 2014 07:39:46 AM JST
self._
* Thu 11 Dec 2014 07:39:48 AM JST
_
* Thu 11 Dec 2014 07:39:48 AM JST
self._
* Thu 11 Dec 2014 07:39:50 AM JST
_ss
* Thu 11 Dec 2014 07:39:51 AM JST
_
* Thu 11 Dec 2014 07:39:52 AM JST
self._
* Thu 11 Dec 2014 07:39:54 AM JST
_
* Thu 11 Dec 2014 07:39:54 AM JST
self._
* Thu 11 Dec 2014 07:42:03 AM JST
shell
* Thu 11 Dec 2014 07:42:14 AM JST
    def get_shell(self, ):
        r"""SUMMARY
        
        get_shell()
        
        @Return:

        @Error:
        """
        return self._ssh.invoke_shell()


* Thu 11 Dec 2014 07:43:01 AM JST
/usr/share/doc/python-paramiko/examples/
* Thu 11 Dec 2014 07:43:18 AM JST
form 
* Thu 11 Dec 2014 07:43:36 AM JST
interactive_shell
* Thu 11 Dec 2014 07:48:36 AM JST
sef.
* Thu 11 Dec 2014 07:52:06 AM JST
sftp = self.open_sftp()
* Thu 11 Dec 2014 07:52:55 AM JST
srcpath
* Thu 11 Dec 2014 07:53:16 AM JST
self
* Thu 11 Dec 2014 07:53:45 AM JST
key
* Thu 11 Dec 2014 07:53:49 AM JST
sftp = self.open_sftp()
* Thu 11 Dec 2014 07:55:13 AM JST
self.open_sftp()
* Thu 11 Dec 2014 07:55:16 AM JST

* Thu 11 Dec 2014 07:55:16 AM JST

* Thu 11 Dec 2014 07:55:16 AM JST
        sftp = self.open_sftp()

* Thu 11 Dec 2014 07:55:20 AM JST
self.open_sftp()
* Thu 11 Dec 2014 07:55:23 AM JST

* Thu 11 Dec 2014 07:55:23 AM JST

* Thu 11 Dec 2014 07:55:23 AM JST
        sftp = self.open_sftp()

* Thu 11 Dec 2014 07:55:26 AM JST
self.open_sftp()
* Thu 11 Dec 2014 07:55:28 AM JST

* Thu 11 Dec 2014 07:55:28 AM JST

* Thu 11 Dec 2014 07:55:28 AM JST
        sftp = self.open_sftp()

* Thu 11 Dec 2014 07:56:53 AM JST
self
* Thu 11 Dec 2014 08:06:00 AM JST
1024
* Thu 11 Dec 2014 08:17:06 AM JST
socket
* Thu 11 Dec 2014 08:17:06 AM JST
t1.socket
* Thu 11 Dec 2014 08:17:24 AM JST
para
* Thu 11 Dec 2014 08:17:43 AM JST
self.get_parameter().get('port')
* Thu 11 Dec 2014 08:18:15 AM JST
self.get_parameter()
* Thu 11 Dec 2014 08:18:48 AM JST
Flase
* Thu 11 Dec 2014 08:20:34 AM JST

* Thu 11 Dec 2014 08:20:34 AM JST

* Thu 11 Dec 2014 08:20:34 AM JST
        # TODO: (Atami) [2014/12/11]

* Thu 11 Dec 2014 08:20:34 AM JST
        # TODO: (Atami) [2014/12/11]

* Thu 11 Dec 2014 08:20:34 AM JST
        # TODO: (Atami) [2014/12/11]
        # TODO: (Atami) [2014/12/11]

* Thu 11 Dec 2014 08:20:37 AM JST

* Thu 11 Dec 2014 08:20:37 AM JST

* Thu 11 Dec 2014 08:20:37 AM JST
        # TODO: (Atami) [2014/12/11]

* Thu 11 Dec 2014 08:24:45 AM JST

* Thu 11 Dec 2014 08:24:45 AM JST
SSHShell
* Thu 11 Dec 2014 08:24:52 AM JST
Reboot
* Thu 11 Dec 2014 08:24:54 AM JST
shell
* Thu 11 Dec 2014 08:25:43 AM JST

* Thu 11 Dec 2014 08:25:43 AM JST

* Thu 11 Dec 2014 08:25:43 AM JST
from mypc.script.shell import SSHShell

* Thu 11 Dec 2014 08:32:51 AM JST
from knock import knock
* Thu 11 Dec 2014 08:33:29 AM JST
self.get_parameter()
* Thu 11 Dec 2014 08:33:36 AM JST
.get('hostname')
* Thu 11 Dec 2014 08:33:56 AM JST
[12317, 12318, 12319]
* Thu 11 Dec 2014 08:34:52 AM JST
knock(self.get_parameter().get('hostname'), [12317, 12318, 12319])
* Thu 11 Dec 2014 08:35:16 AM JST
[12317, 12318, 12319]
* Thu 11 Dec 2014 08:35:20 AM JST
knock
* Thu 11 Dec 2014 08:35:28 AM JST
[12313, 12314, 12315]
* Thu 11 Dec 2014 08:36:44 AM JST
rook
* Thu 11 Dec 2014 08:37:38 AM JST
password=None, timeout=None, compress=False
* Thu 11 Dec 2014 08:43:53 AM JST
        _, out, err = shell.exec_command('/sbin/reboot')
        if out.channel.recv_ready() and self.receiver:
            self.receiver.append(out.readlines())
        elif err.channel.recv_ready():
            raise StandardError(err.read())

* Thu 11 Dec 2014 08:43:58 AM JST
shell
* Thu 11 Dec 2014 08:44:36 AM JST
self.receiver.append(
* Thu 11 Dec 2014 08:45:46 AM JST
o.channel.recv_ready()
* Thu 11 Dec 2014 08:46:31 AM JST
exit_status_ready
* Thu 11 Dec 2014 08:46:50 AM JST
recv_exit_status     
* Thu 11 Dec 2014 08:47:18 AM JST
readlines()
* Thu 11 Dec 2014 08:48:32 AM JST
    def reboot(self, ):
        r"""SUMMARY

        reboot()

        @Return:

        @Error:
        """
        _, out, err = self._ssh.exec_command('/sbin/reboot')
        if out.channel.exit_status_ready():
            return out.channel.recv_exit_status()
        elif err.channel.recv_ready():
            raise StandardError(err.read())



* Thu 11 Dec 2014 08:49:44 AM JST
        _, out, err = self._ssh.exec_command('/sbin/reboot')
        if out.channel.exit_status_ready():
            return out.channel.recv_exit_status()
        elif err.channel.recv_ready():
            raise StandardError(err.read())

* Thu 11 Dec 2014 08:49:55 AM JST
reboot
* Thu 11 Dec 2014 08:57:03 AM JST
192.168.1.255
* Thu 11 Dec 2014 08:57:30 AM JST
00:1D:73:1A:C0:9C
* Thu 11 Dec 2014 08:58:50 AM JST
'echo exitstatus=$?='
* Thu 11 Dec 2014 08:59:06 AM JST
        for line in shell.read().splitlines():
            if line.startswith(('exitstatus')):
                lis = line.split('=')
                lis.remove('exitstatus')
                lis.remove('')
                status = int(lis[0])

* Thu 11 Dec 2014 09:05:58 AM JST
MAC = '00:1D:73:1A:C0:9C'
* Thu 11 Dec 2014 09:06:26 AM JST
class RookParameter(dict):
    r"""RookParameter

    RookParameter is a dict.
    Responsibility:
    """
    name = 'ro'
    default = {'hostname': 'taka16.no-ip.info',
               'identityfile': ['~/.ssh/kagi'],
               'port': '12316',
               'user': 'root',
               'mac': '00:1D:73:1A:C0:9C',
               }

    def __init__(self, dic=None, **kwargs):
        dict.__init__(self, **kwargs)
        self.update(self.default)
        self.update(CONFIG.lookup(self.name))
        if dic is not None:
            self.update(dic)



* Thu 11 Dec 2014 09:06:58 AM JST
MAC = '00:01:80:61:d8:47'
* Thu 11 Dec 2014 09:07:10 AM JST
mac
* Thu 11 Dec 2014 09:11:21 AM JST
ready_re
* Thu 11 Dec 2014 09:11:54 AM JST

* Thu 11 Dec 2014 09:11:54 AM JST

* Thu 11 Dec 2014 09:11:54 AM JST
from mypc.script.script import Reboot

* Thu 11 Dec 2014 09:12:40 AM JST
self._ssh.invoke_shell()
* Thu 11 Dec 2014 09:13:05 AM JST
if 
* Thu 11 Dec 2014 09:13:10 AM JST
shell.recv_ready()
* Thu 11 Dec 2014 09:13:13 AM JST

* Thu 11 Dec 2014 09:13:14 AM JST

* Thu 11 Dec 2014 09:13:14 AM JST
:

* Thu 11 Dec 2014 09:44:00 AM JST
"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
* Thu 11 Dec 2014 09:44:41 AM JST
"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$"
* Thu 11 Dec 2014 09:46:41 AM JST
addresss_
* Thu 11 Dec 2014 09:49:54 AM JST
HostName.address_regex.match('111')
* Thu 11 Dec 2014 10:24:25 AM JST
SSH
* Thu 11 Dec 2014 10:24:27 AM JST
Shell
* Thu 11 Dec 2014 10:24:29 AM JST

* Thu 11 Dec 2014 10:24:30 AM JST

* Thu 11 Dec 2014 10:24:30 AM JST
from abc import ABCMeta, abstractmethod

* Thu 11 Dec 2014 10:26:43 AM JST
line
* Thu 11 Dec 2014 10:27:44 AM JST
linesep
* Thu 11 Dec 2014 10:27:48 AM JST
linesep
* Thu 11 Dec 2014 10:27:53 AM JST
recvsep
* Thu 11 Dec 2014 10:27:56 AM JST
recvsep
* Thu 11 Dec 2014 10:29:54 AM JST
n')
* Thu 11 Dec 2014 10:30:03 AM JST
replace?
* Thu 11 Dec 2014 10:34:12 AM JST
Time
* Thu 11 Dec 2014 10:34:13 AM JST
import
* Thu 11 Dec 2014 10:34:13 AM JST
paramiko import
* Thu 11 Dec 2014 10:36:40 AM JST
line == 
* Thu 11 Dec 2014 10:39:11 AM JST
        try:
            recv = self.read()
        except timeout as err:
            pass

* Thu 11 Dec 2014 10:40:57 AM JST
write
* Thu 11 Dec 2014 10:41:15 AM JST
self.
* Thu 11 Dec 2014 10:42:18 AM JST

* Thu 11 Dec 2014 10:42:18 AM JST

* Thu 11 Dec 2014 10:42:18 AM JST
        self.write(self.sendsep)

* Thu 11 Dec 2014 10:43:06 AM JST
recv = 
* Thu 11 Dec 2014 10:49:17 AM JST
read()
* Thu 11 Dec 2014 10:57:47 AM JST
self.write(self.sendsep)
* Thu 11 Dec 2014 11:05:39 AM JST
exitstatus=
* Thu 11 Dec 2014 11:06:10 AM JST
shell.read()
* Thu 11 Dec 2014 11:22:11 AM JST
self.get_shell()
* Thu 11 Dec 2014 11:22:17 AM JST
Shell(self.get_shell())
* Thu 11 Dec 2014 11:22:36 AM JST
shell = 
* Thu 11 Dec 2014 11:22:38 AM JST

* Thu 11 Dec 2014 11:22:38 AM JST

* Thu 11 Dec 2014 11:22:38 AM JST
        return shell

* Thu 11 Dec 2014 05:21:19 PM JST
'/usr/sbin/wol -i 192.168.1.255 {0}'
* Thu 11 Dec 2014 05:24:35 PM JST
self.cmdfmt.format(self._macaddr)
* Thu 11 Dec 2014 05:24:37 PM JST

* Thu 11 Dec 2014 05:24:37 PM JST

* Thu 11 Dec 2014 05:24:37 PM JST
        cmdline = 

* Thu 11 Dec 2014 05:28:23 PM JST
'00:1D:73:1A:C0:9C'
* Thu 11 Dec 2014 05:28:26 PM JST
00:1D:73:1A:C0:9C
* Thu 11 Dec 2014 05:31:05 PM JST
Script.__init__(self, receiver)
* Thu 11 Dec 2014 05:37:17 PM JST
'00:1D:73:1A:C0:9C'
* Thu 11 Dec 2014 05:43:07 PM JST
shell.read()
* Thu 11 Dec 2014 11:28:35 PM JST
'00:1D:73:1A:C0:9C'
* Thu 11 Dec 2014 11:30:12 PM JST
'00:1D:73:1A:C0:9C'
* Thu 11 Dec 2014 11:31:42 PM JST
groups
* Fri 12 Dec 2014 05:29:03 AM JST
ismac?
* Fri 12 Dec 2014 05:29:11 AM JST
'00:1D:73:1A:C0:9C'
* Fri 12 Dec 2014 06:27:45 AM JST
class Script(object):
    """
    """
    __metaclass__ = ABCMeta

    def __init__(self, receiver=None):
        self.receiver = receiver

    @abstractmethod
    def execute(self, shell):
        pass



* Fri 12 Dec 2014 06:27:49 AM JST

* Fri 12 Dec 2014 06:27:49 AM JST

* Fri 12 Dec 2014 06:27:49 AM JST
from abc import ABCMeta, abstractmethod

* Fri 12 Dec 2014 06:28:00 AM JST
class GetExitStatus(Script):
    r"""GetExitStatus

    GetExitStatus is a Script.
    Responsibility:
    """
    def __init__(self, receiver):
        r"""

        @Arguments:
        - `receiver`:
        """
        Script.__init__(self, receiver)

    def execute(self, shell):
        r"""SUMMARY

        execute(shell)

        @Arguments:
        - `shell`:

        @Return:
        None is Failed.
        int type.

        @Error:
        """
        shell.write('echo exitstatus=$?=')
        status = None
        for line in shell.read().splitlines():
            if line.startswith(('exitstatus')):
                lis = line.split('=')
                lis.remove('exitstatus')
                lis.remove('')
                status = int(lis[0])
        self.receiver.append(status)



* Fri 12 Dec 2014 06:29:09 AM JST
from ieeemac import Mac

class WakeOnLan(Script):
    r"""WakeOnLan

    WakeOnLan is a Script.
    Responsibility:
    """
    cmdfmt = '/usr/sbin/wol -i 192.168.1.255 {0}'

    def __init__(self, macaddr, receiver=None):
        r"""

        @Arguments:
        - `macaddr`:
        - `receiver`:
        """
        Script.__init__(self, receiver)
        self._macaddr = Mac(macaddr)

    def execute(self, shell):
        r"""SUMMARY

        execute(shell)

        @Arguments:
        - `shell`:

        @Return:

        @Error:
        """
        shell.write(self.cmdfmt.format(self._macaddr))
        recv = shell.read()
        if self.receiver is None:
            return
        self.receiver.append(recv)



* Fri 12 Dec 2014 06:31:17 AM JST
wol=WakeOnLan('00:1D:73:1A:C0:9C',recv)
wol.execute(ssh)

* Fri 12 Dec 2014 06:32:50 AM JST
00:1D:73:1A:C0:9C
* Fri 12 Dec 2014 06:36:24 AM JST
mac =
* Fri 12 Dec 2014 06:36:44 AM JST
Mac(macaddr)
* Fri 12 Dec 2014 08:02:02 AM JST
broadcast()
* Fri 12 Dec 2014 08:02:22 AM JST
netmask
* Fri 12 Dec 2014 08:02:23 AM JST
ip.netmask
* Fri 12 Dec 2014 08:04:41 AM JST
/usr/lib/python2.7/dist-packages/
* Fri 12 Dec 2014 08:04:47 AM JST
https://github.com/haypo/python-ipy
* Fri 12 Dec 2014 08:08:12 AM JST
version
* Fri 12 Dec 2014 08:10:00 AM JST
unicode(ipaddr)
* Fri 12 Dec 2014 08:12:36 AM JST
import IPy
* Fri 12 Dec 2014 08:12:37 AM JST
IPy
* Fri 12 Dec 2014 08:16:28 AM JST
getcmdline
* Fri 12 Dec 2014 08:18:51 AM JST
'ping -w 1 -c 1 192.168.1.129'
* Fri 12 Dec 2014 08:21:40 AM JST
pin=Ping('192.168.1.129', recv)
pin.execute(ssh)

* Fri 12 Dec 2014 08:22:49 AM JST
ssh.write('ping -w 1 -c 1 192.
* Fri 12 Dec 2014 08:22:54 AM JST
from mypc.script.scripts.ping import Ping
* Fri 12 Dec 2014 08:24:57 AM JST
from mypc.script.scripts.ping import Ping
pin=Ping('192.168.1.129', recv)

* Fri 12 Dec 2014 08:25:09 AM JST
pin.execute(ssh)
* Fri 12 Dec 2014 09:33:15 AM JST
kish=ki._ssh.invoke_shell()

* Fri 12 Dec 2014 09:33:21 AM JST
kissh=Shell(kish, sendsep='\r\n')
* Fri 12 Dec 2014 09:33:33 AM JST
kissh.write('ls /bin')
* Fri 12 Dec 2014 09:34:31 AM JST
'l\x08ls /bin\r\r\n\x1b[0m\x1b[01;32mbash\x1b[0m          \x1b[01;32mdir\x1b[0m            \x1b[01;36mlessfile\x1b[0m        \x1b[01;32mopenvt\x1b[0m      \x1b[01;32mtempfile\x1b[0m\r\n\x1b[01;32mbunzip2\x1b[0m       \x1b[01;32mdmesg\x1b[0m          \x1b[01;32mlesskey\x1b[0m         \x1b[01;36mpidof\x1b[0m       \x1b[01;32mtouch\x1b[0m\r\n\x1b[01;32mbusybox\x1b[0m       \x1b[01;32mdnsdomainname\x1b[0m  \x1b[01;32mlesspipe\x1b[0m        \x1b[37;41mping\x1b[0m        \x1b[01;32mtrue\x1b[0m\r\n\x1b[01;32mbzcat\x1b[0m         \x1b[01;32mdomainname\x1b[0m     \x1b[01;32mln\x1b[0m              \x1b[37;41mping6\x1b[0m       \x1b[01;32mulockmgr_server\x1b[0m\r\n\x1b[01;36mbzcmp\x1b[0m         \x1b[01;32mdumpkeys\x1b[0m       \x1b[01;32mloadkeys\x1b[0m        \x1b[01;32mps\x1b[0m          \x1b[37;41mumount\x1b[0m\r\n\x1b[01;32mbzdiff\x1b[0m        \x1b[01;32mecho\x1b[0m           \x1b[01;32mlogin\x1b[0m           \x1b[01;32mpwd\x1b[0m         \x1b[01;32muname\x1b[0m\r\n\x1b[01;36mbzegrep\x1b[0m       \x1b[01;32megrep\x1b[0m          \x1b[01;32mls\x1b[0m              \x1b[01;36mrbash\x1b[0m       \x1b[01;32muncompress\x1b[0m\r\n\x1b[01;32mbzexe\x1b[0m         \x1b[01;32mfalse\x1b[0m          \x1b[01;32mlsblk\x1b[0m           \x1b[01;32mreadlink\x1b[0m    \x1b[01;32municode_start\x1b[0m\r\n\x1b[01;36mbzfgrep\x1b[0m       \x1b[01;32mfgconsole\x1b[0m      \x1b[01;36mlsmod\x1b[0m           \x1b[01;32mrm\x1b[0m          \x1b[01;32mvdir\x1b[0m\r\n\x1b[01;32mbzgrep\x1b[0m        \x1b[01;32mfgrep\x1b[0m          \x1b[01;32mmkdir\x1b[0m           \x1b[01;32mrmdir\x1b[0m       \x1b[01;32mwhich\x1b[0m\r\n\x1b[01;32mbzip2\x1b[0m         \x1b[01;32mfindmnt\x1b[0m        \x1b[01;32mmknod\x1b[0m           \x1b[01;36mrnano\x1b[0m       \x1b[01;32mypdomainname\x1b[0m\r\n\x1b[01;32mbzip2recover\x1b[0m  \x1b[01;32mfuser\x1b[0m          \x1b[01;32mmktemp\x1b[0m          \x1b[01;32mrun-parts\x1b[0m   \x1b[01;32mzcat\x1b[0m\r\n\x1b[01;36mbzless\x1b[0m        \x1b[37;41mfusermount\x1b[0m     \x1b[01;32mmore\x1b[0m            \x1b[01;36mrzsh\x1b[0m        \x1b[01;32mzcmp\x1b[0m\r\n\x1b[01;32mbzmore\x1b[0m        \x1b[01;32mgrep\x1b[0m           \x1b[37;41mmount\x1b[0m           \x1b[01;32msed\x1b[0m         \x1b[01;32mzdiff\x1b[0m\r\n\x1b[01;32mcat\x1b[0m           \x1b[01;32mgunzip\x1b[0m         \x1b[01;32mmountpoint\x1b[0m      \x1b[01;32msetfont\x1b[0m     \x1b[01;32mzegrep\x1b[0m\r\n\x1b[01;32mchgrp\x1b[0m         \x1b[01;32mgzexe\x1b[0m          \x1b[01;36mmt\x1b[0m              \x1b[01;32msetupcon\x1b[0m    \x1b[01;32mzfgrep\x1b[0m\r\n\x1b[01;32mchmod\x1b[0m         \x1b[01;32mgzip\x1b[0m           \x1b[01;32mmt-gnu\x1b[0m          \x1b[01;36msh\x1b[0m          \x1b[01;32mzforce\x1b[0m\r\n\x1b[01;32mchown\x1b[0m         \x1b[01;32mhostname\x1b[0m       \x1b[01;32mmv\x1b[0m              \x1b[01;36msh.distrib\x1b[0m  \x1b[01;32mzgrep\x1b[0m\r\n\x1b[01;32mchvt\x1b[0m          \x1b[01;32mip\x1b[0m             \x1b[01;32mnano\x1b[0m            \x1b[01;32msleep\x1b[0m       \x1b[01;32mzless\x1b[0m\r\n\x1b[01;32mcp\x1b[0m            \x1b[01;32mkbd_mode\x1b[0m       \x1b[01;36mnc\x1b[0m              \x1b[01;32mss\x1b[0m          \x1b[01;32mzmore\x1b[0m\r\n\x1b[01;32mcpio\x1b[0m          \x1b[01;32mkill\x1b[0m           \x1b[01;32mnc.traditional\x1b[0m  \x1b[01;32mstty\x1b[0m        \x1b[01;32mznew\x1b[0m\r\n\x1b[01;32mdash\x1b[0m          \x1b[01;32mkmod\x1b[0m           \x1b[01;36mnetcat\x1b[0m          \x1b[37;41msu\x1b[0m          \x1b[01;36mzsh\x1b[0m\r\n\x1b[01;32mdate\x1b[0m          \x1b[01;36mksh\x1b[0m            \x1b[01;32mnetstat\x1b[0m         \x1b[01;32msync\x1b[0m        \x1b[01;32mzsh4\x1b[0m\r\n\x1b[01;32mdd\x1b[0m            \x1b[01;32mless\x1b[0m           \x1b[01;32mnisdomainname\x1b[0m   \x1b[01;32mtailf\x1b[0m\r\n\x1b[01;32mdf\x1b[0m            \x1b[01;32mlessecho\x1b[0m       \x1b[01;36mopen\x1b[0m            \x1b[01;32mtar\x1b[0m\r\n\x1b[1m\x1b[7m%\x1b[m\x1b[1m\x1b[0m                                                                               \r \r\r\x1b[0m\x1b[m\x1b[m\x1b[J\x1b[1m\x1b[31mKI \x1b[32m~\x1b[32m#\x1b[0m\x1b[0m \x1b[K'
* Fri 12 Dec 2014 09:34:47 AM JST
\x1b[01;32
* Fri 12 Dec 2014 09:34:50 AM JST
\x1b[01;32m
* Fri 12 Dec 2014 09:35:16 AM JST
\x1b[0m
* Fri 12 Dec 2014 09:35:30 AM JST
\x1b[37;41
* Fri 12 Dec 2014 09:35:37 AM JST
\x1b[01;36
* Fri 12 Dec 2014 09:50:33 AM JST

* Fri 12 Dec 2014 09:50:33 AM JST

* Fri 12 Dec 2014 09:50:33 AM JST
from getpass import getpass

* Fri 12 Dec 2014 09:50:35 AM JST
from getpasswd import getpasswd
* Fri 12 Dec 2014 09:51:07 AM JST
r'[sudo] password'
* Fri 12 Dec 2014 09:54:52 AM JST
FailedSudoError
* Fri 12 Dec 2014 09:58:29 AM JST
prompt = 
* Fri 12 Dec 2014 09:58:43 AM JST
prompt
* Fri 12 Dec 2014 09:59:16 AM JST

* Fri 12 Dec 2014 09:59:16 AM JST

* Fri 12 Dec 2014 09:59:16 AM JST
        self._receiver = receiver

* Fri 12 Dec 2014 10:00:06 AM JST
prompt
* Fri 12 Dec 2014 10:02:40 AM JST
kish=ki._ssh.invoke_shell()
* Fri 12 Dec 2014 10:02:46 AM JST
kissh=Shell(kish)
* Fri 12 Dec 2014 10:02:53 AM JST
kissh=Shell(kish, sendsep='\r\n')
* Fri 12 Dec 2014 10:02:59 AM JST
kissh.read()
* Fri 12 Dec 2014 10:04:43 AM JST
kissh.write('sudo ls /')
* Fri 12 Dec 2014 10:04:51 AM JST
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, sendsep='\r\n')
kissh.read()

* Fri 12 Dec 2014 10:04:59 AM JST
kissh.write('sudo ls /')
* Fri 12 Dec 2014 10:08:15 AM JST
incorrect password
* Fri 12 Dec 2014 10:08:51 AM JST
kissh.write('sudo ls /')
* Fri 12 Dec 2014 10:10:51 AM JST
kissh.write('sudo ls /')
* Fri 12 Dec 2014 10:10:53 AM JST

* Fri 12 Dec 2014 10:10:53 AM JST

* Fri 12 Dec 2014 10:10:53 AM JST
kissh.write('sudo ls /')
* Fri 12 Dec 2014 10:10:57 AM JST
sudo.execute(kissh)
* Fri 12 Dec 2014 10:11:15 AM JST
from mypc.script.scripts._abstract import Sudo
sudo=Sudo(recv)
* Fri 12 Dec 2014 10:11:43 AM JST
kissh.write('sudo ls /')
* Fri 12 Dec 2014 10:11:46 AM JST
sudo.execute(kissh)
* Fri 12 Dec 2014 10:17:45 AM JST

* Fri 12 Dec 2014 10:17:47 AM JST
DequeReceiver
* Fri 12 Dec 2014 10:20:57 AM JST

* Fri 12 Dec 2014 10:20:58 AM JST

* Fri 12 Dec 2014 10:20:58 AM JST
        self._receiver = receiver

* Fri 12 Dec 2014 10:21:00 AM JST

* Fri 12 Dec 2014 10:21:00 AM JST

* Fri 12 Dec 2014 10:21:00 AM JST
        receiver = DequeReceiver()

* Fri 12 Dec 2014 10:21:03 AM JST

* Fri 12 Dec 2014 10:21:04 AM JST

* Fri 12 Dec 2014 10:21:04 AM JST
from mypc.script.receiver import DequeReceiver

* Fri 12 Dec 2014 10:27:50 AM JST
w
* Fri 12 Dec 2014 10:27:51 AM JST
available w
* Fri 12 Dec 2014 10:27:51 AM JST
key available w
* Fri 12 Dec 2014 10:27:52 AM JST
No key available w
* Fri 12 Dec 2014 10:30:10 AM JST
self.
* Fri 12 Dec 2014 10:32:13 AM JST
already exists
* Fri 12 Dec 2014 10:34:21 AM JST
receiver
* Fri 12 Dec 2014 10:34:22 AM JST
self.receiver
* Fri 12 Dec 2014 10:35:11 AM JST
No key available with this passphrase.
* Fri 12 Dec 2014 10:35:44 AM JST
FailedPasswordError
* Fri 12 Dec 2014 10:36:00 AM JST
Failed
* Fri 12 Dec 2014 10:36:16 AM JST
FailedScriptError
* Fri 12 Dec 2014 10:37:47 AM JST
/dev/mapper/VG-data data_crypt
* Fri 12 Dec 2014 10:38:14 AM JST
data 
* Fri 12 Dec 2014 10:38:14 AM JST
VG
* Fri 12 Dec 2014 10:38:15 AM JST
mapper/VG
* Fri 12 Dec 2014 10:38:15 AM JST
dev/mapper/VG
* Fri 12 Dec 2014 10:42:24 AM JST

* Fri 12 Dec 2014 10:42:25 AM JST

* Fri 12 Dec 2014 10:42:25 AM JST
        sleep(2)

* Fri 12 Dec 2014 10:42:41 AM JST
# wait password prompt
* Fri 12 Dec 2014 10:43:38 AM JST
from mypc.script.scripts.decrypt import Decrypt
d=Decrypt(crypt,mapper,recv)

* Fri 12 Dec 2014 10:43:52 AM JST

* Fri 12 Dec 2014 10:43:52 AM JST

* Fri 12 Dec 2014 10:43:53 AM JST
recv=
* Fri 12 Dec 2014 10:45:15 AM JST
from king import King
ki=King()
ki.connect()
kish=ki._ssh.invoke_shell()
from mypc.script.shell import Shell
kissh=Shell(kish)
kissh.read()
recv=[]
from mypc.script.scripts.decrypt import Decrypt

* Fri 12 Dec 2014 10:45:22 AM JST
d=Decrypt(crypt,mapper,recv)
* Fri 12 Dec 2014 10:45:43 AM JST
/dev/mapper/VG-data
* Fri 12 Dec 2014 10:45:51 AM JST
crypt='/dev/mapper/VG-data'
* Fri 12 Dec 2014 10:46:08 AM JST
data_crypt
* Fri 12 Dec 2014 10:46:35 AM JST
mapper='data_crypt'
* Fri 12 Dec 2014 10:46:38 AM JST
d=Decrypt(crypt,mapper,recv)
* Fri 12 Dec 2014 10:47:37 AM JST
read()
* Fri 12 Dec 2014 10:48:09 AM JST
kissh=Shell(kish, '\r\n')
* Fri 12 Dec 2014 10:48:19 AM JST
kissh.read()
* Fri 12 Dec 2014 10:49:11 AM JST
d.execute(kissh)
* Fri 12 Dec 2014 10:51:35 AM JST

* Fri 12 Dec 2014 10:51:35 AM JST

* Fri 12 Dec 2014 10:51:35 AM JST
        self.receiver.append(recv)

* Fri 12 Dec 2014 10:53:13 AM JST
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()    

* Fri 12 Dec 2014 10:53:58 AM JST
from mypc.script.scripts._abstract import Sudo
* Fri 12 Dec 2014 10:54:04 AM JST
Sudo(receiver=self.receiver).execute(shell)
* Fri 12 Dec 2014 10:54:17 AM JST
shell
* Fri 12 Dec 2014 10:54:20 AM JST
from mypc.script.scripts._abstract import Sudo
Sudo(receiver=recv).execute(kissh)

* Fri 12 Dec 2014 10:54:22 AM JST

from mypc.script.scripts._abstract import Sudo
Sudo(receiver=recv).execute(kissh)

* Fri 12 Dec 2014 10:54:26 AM JST
from mypc.script.scripts._abstract import Sudo
Sudo(receiver=recv).execute(kissh)

* Fri 12 Dec 2014 10:54:29 AM JST
Sudo(receiver=recv).execute(kissh)
* Fri 12 Dec 2014 10:55:09 AM JST
kissh.write('sudo ls /')
* Fri 12 Dec 2014 10:55:11 AM JST
kissh.write('sudo ls /')
sudo.execute(kissh)

* Fri 12 Dec 2014 10:55:15 AM JST
kissh.write('sudo ls /')
* Fri 12 Dec 2014 10:55:20 AM JST
kissh.write('sudo ls /')
Sudo(receiver=recv).execute(kissh)

* Fri 12 Dec 2014 10:56:57 AM JST
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()    

* Fri 12 Dec 2014 10:57:17 AM JST
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()    

* Fri 12 Dec 2014 10:57:24 AM JST
kissh.write('sudo ls /')
* Fri 12 Dec 2014 10:58:03 AM JST
ls /'
* Fri 12 Dec 2014 10:59:27 AM JST
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()    

* Fri 12 Dec 2014 10:59:35 AM JST
kissh.write('sudo ls /')
* Fri 12 Dec 2014 11:02:09 AM JST
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()    
kissh.write('sudo ls /')

* Fri 12 Dec 2014 11:03:42 AM JST
getpasswd(self._prompt)
* Fri 12 Dec 2014 11:05:33 AM JST
line
* Fri 12 Dec 2014 11:05:37 AM JST
print
* Fri 12 Dec 2014 11:06:34 AM JST
from mypc.script.shell import Shell
* Fri 12 Dec 2014 11:06:42 AM JST
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
* Fri 12 Dec 2014 11:06:47 AM JST
kissh.read()    
* Fri 12 Dec 2014 11:07:33 AM JST
kissh.read()    
* Fri 12 Dec 2014 11:07:38 AM JST
kissh.write('sudo ls /')
* Fri 12 Dec 2014 11:08:57 AM JST

* Fri 12 Dec 2014 11:08:57 AM JST

* Fri 12 Dec 2014 11:08:57 AM JST
        print('DEBUG-1-shell.py {}'.format(line))

* Fri 12 Dec 2014 05:05:35 PM JST
from _abstract import Script, Sudo,
* Fri 12 Dec 2014 05:13:13 PM JST

* Fri 12 Dec 2014 05:13:13 PM JST

* Fri 12 Dec 2014 05:13:13 PM JST
        self._receiver = receiver

* Fri 12 Dec 2014 09:41:04 PM JST
'/usr/bin/sudo /bin/mount'
* Fri 12 Dec 2014 10:03:06 PM JST
cmdline =
* Fri 12 Dec 2014 10:03:11 PM JST

* Fri 12 Dec 2014 10:03:11 PM JST

* Fri 12 Dec 2014 10:03:11 PM JST
        return 

* Fri 12 Dec 2014 10:03:14 PM JST
        
* Fri 12 Dec 2014 10:03:41 PM JST
                         
* Fri 12 Dec 2014 10:05:11 PM JST
receiver=None
* Fri 12 Dec 2014 10:05:54 PM JST
device
* Fri 12 Dec 2014 10:17:32 PM JST
receiver
* Fri 12 Dec 2014 10:17:33 PM JST
self.receiver
* Fri 12 Dec 2014 10:18:34 PM JST
receiver
* Fri 12 Dec 2014 10:33:27 PM JST
form 
* Fri 12 Dec 2014 10:35:04 PM JST
receiver
* Fri 12 Dec 2014 10:35:28 PM JST
receiver
* Fri 12 Dec 2014 10:35:38 PM JST

* Fri 12 Dec 2014 10:35:38 PM JST

* Fri 12 Dec 2014 10:35:39 PM JST
        self._receiver = receiver

* Fri 12 Dec 2014 10:38:31 PM JST
def
* Fri 12 Dec 2014 10:38:48 PM JST
GetExitStatus
* Fri 12 Dec 2014 10:44:22 PM JST
read()
* Fri 12 Dec 2014 10:48:25 PM JST
lis
* Fri 12 Dec 2014 10:49:16 PM JST
GetExitStatus
* Fri 12 Dec 2014 10:50:29 PM JST
line
* Fri 12 Dec 2014 10:52:25 PM JST
from king import King
from mypc.script.shell import Shell
from mypc.script.scripts.decrypt import Decrypt
from mypc.script.scripts._abstract import Sudo

* Fri 12 Dec 2014 10:52:36 PM JST
abstract
* Fri 12 Dec 2014 10:52:38 PM JST
Sudo
* Fri 12 Dec 2014 10:52:44 PM JST
from king import King
from mypc.script.shell import Shell
from mypc.script.scripts.decrypt import Decrypt
from mypc.script.scripts.test import Test

* Fri 12 Dec 2014 10:53:02 PM JST
ki=King()               
ki.connect()            
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()            
recv=[]                 

* Fri 12 Dec 2014 10:54:35 PM JST

* Fri 12 Dec 2014 10:54:35 PM JST

* Fri 12 Dec 2014 10:54:35 PM JST
Sudo(receiver=recv).execute(kissh)

* Fri 12 Dec 2014 10:54:43 PM JST
from king import King
from mypc.script.shell import Shell
from mypc.script.scripts.decrypt import Decrypt
from mypc.script.scripts.test import Test
ki=King()               
ki.connect()            
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()            
recv=[]                 
                        
                        
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()    
kissh.write('sudo ls /')

* Fri 12 Dec 2014 11:34:00 PM JST
from king import King
from mypc.script.shell import Shell
from mypc.script.scripts.decrypt import Decrypt
from mypc.script.scripts.test import Test
ki=King()               
ki.connect()            
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()            
recv=[]                 

* Fri 12 Dec 2014 11:35:40 PM JST
'echo exitstatus=$?='
* Fri 12 Dec 2014 11:37:36 PM JST
startswith('exitstatus')
* Fri 12 Dec 2014 11:38:11 PM JST
shell.read()
* Fri 12 Dec 2014 11:38:26 PM JST
shell.read()
* Fri 12 Dec 2014 11:39:05 PM JST
from mypc.script.scripts.test import Test
t=Test(recv, ('-d', '/'))
t.execute(kissh)

* Fri 12 Dec 2014 11:39:18 PM JST
from king import King
from mypc.script.shell import Shell
from mypc.script.scripts.decrypt import Decrypt
from mypc.script.scripts.test import Test
ki=King()               
ki.connect()            
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()            
recv=[]                 

* Fri 12 Dec 2014 11:39:25 PM JST

* Fri 12 Dec 2014 11:39:25 PM JST

* Fri 12 Dec 2014 11:39:25 PM JST
from mypc.script.scripts.test import Test

* Fri 12 Dec 2014 11:39:28 PM JST
from king import King
from mypc.script.shell import Shell
from mypc.script.scripts.decrypt import Decrypt
from mypc.script.scripts.test import Test
ki=King()               
ki.connect()            
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()            
recv=[]                 

t=Test(recv, ('-d', '/'))

* Fri 12 Dec 2014 11:40:02 PM JST
t.execute(kissh)
* Fri 12 Dec 2014 11:40:40 PM JST

* Fri 12 Dec 2014 11:40:40 PM JST

* Fri 12 Dec 2014 11:40:40 PM JST
        shell.clear()

* Fri 12 Dec 2014 11:42:31 PM JST
from king import King
from mypc.script.shell import Shell
from mypc.script.scripts.decrypt import Decrypt
from mypc.script.scripts.test import Test
ki=King()               
ki.connect()            
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()            
recv=[]                 

t=Test(recv, ('-d', '/'))

* Fri 12 Dec 2014 11:42:37 PM JST
t.execute(kissh)
* Fri 12 Dec 2014 11:42:56 PM JST

* Fri 12 Dec 2014 11:42:56 PM JST

* Fri 12 Dec 2014 11:42:56 PM JST
        sleep(0.5)

* Fri 12 Dec 2014 11:43:10 PM JST
from mypc.script.scripts.test import Test

* Fri 12 Dec 2014 11:43:25 PM JST
t=Test(recv, ('-d', '/'))

* Fri 12 Dec 2014 11:43:28 PM JST
t.execute(kissh)

* Fri 12 Dec 2014 11:43:39 PM JST

* Fri 12 Dec 2014 11:43:39 PM JST

* Fri 12 Dec 2014 11:43:39 PM JST
        print(recvd)

* Fri 12 Dec 2014 11:43:48 PM JST

* Fri 12 Dec 2014 11:43:48 PM JST

* Fri 12 Dec 2014 11:43:48 PM JST
        print(result)

* Fri 12 Dec 2014 11:44:05 PM JST
shell.read()
* Fri 12 Dec 2014 11:44:08 PM JST

* Fri 12 Dec 2014 11:44:08 PM JST

* Fri 12 Dec 2014 11:44:08 PM JST
        result = 

* Sat 13 Dec 2014 12:44:31 AM JST
tes = 
* Sat 13 Dec 2014 12:48:24 AM JST
        if recv.pop() == True:
            if not self.receiver is None:
                self.receiver.append(True)
            return

* Sat 13 Dec 2014 12:49:34 AM JST
'/dev/mapper/data_crypt'
* Sat 13 Dec 2014 12:51:26 AM JST
'/dev/mapper/VG-data'
* Sat 13 Dec 2014 12:51:32 AM JST
'data_crypt'
* Sat 13 Dec 2014 12:52:32 AM JST
            from . import mount
            mount.Mount(recv, '/dev/mapper/data_crypt', '/data')

* Sat 13 Dec 2014 12:59:30 AM JST

* Sat 13 Dec 2014 12:59:30 AM JST

* Sat 13 Dec 2014 12:59:30 AM JST
        recv.append(True)

* Sat 13 Dec 2014 01:00:07 AM JST

* Sat 13 Dec 2014 01:00:07 AM JST

* Sat 13 Dec 2014 01:00:07 AM JST
from mypc.script.scripts.test import Test

* Sat 13 Dec 2014 01:00:28 AM JST
from king import King
from mypc.script.shell import Shell
from mypc.script.scripts.decrypt import Decrypt, KingDiskDecrypt
ki=King()               
ki.connect()            
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()            
recv=[]                 

* Sat 13 Dec 2014 01:01:18 AM JST
KingDiskDecrypt().execute(kissh)
* Sat 13 Dec 2014 01:06:09 AM JST
from mypc.script.scripts.decrypt import Decrypt, KingDiskDecrypt
* Sat 13 Dec 2014 01:06:57 AM JST
recv.pop()
* Sat 13 Dec 2014 01:07:06 AM JST
print(recv.pop())
* Sat 13 Dec 2014 01:08:36 AM JST

* Sat 13 Dec 2014 01:08:36 AM JST

* Sat 13 Dec 2014 01:08:36 AM JST
                print(lis)

* Sat 13 Dec 2014 01:16:48 AM JST
from mypc.script.scripts.decrypt import Decrypt, KingDiskDecrypt
* Sat 13 Dec 2014 01:16:50 AM JST
KingDiskDecrypt
* Sat 13 Dec 2014 01:16:50 AM JST
Decrypt, KingDiskDecrypt
* Sat 13 Dec 2014 01:17:09 AM JST
'/dev/mapper/data_crypt', '/data'
* Sat 13 Dec 2014 01:17:48 AM JST
from king import King
from mypc.script.shell import Shell
from mypc.script.scripts.decrypt import Decrypt, KingDiskDecrypt
ki=King()               
ki.connect()            
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()            
recv=[]                 

* Sat 13 Dec 2014 01:17:57 AM JST
KingDiskDecrypt().execute(kissh)

* Sat 13 Dec 2014 01:19:25 AM JST
from king import King
from mypc.script.shell import Shell
from mypc.script.scripts.decrypt import Decrypt, KingDiskDecrypt
ki=King()               
ki.connect()            
kish=ki._ssh.invoke_shell()
kissh=Shell(kish, '\r\n')
kissh.read()            
recv=[]                 

* Sat 13 Dec 2014 01:19:31 AM JST
KingDiskDecrypt().execute(kissh)
* Sat 13 Dec 2014 01:31:02 AM JST
not
* Sat 13 Dec 2014 01:31:22 AM JST
recv, 
* Sat 13 Dec 2014 01:33:31 AM JST
from mypc.script.scripts.decrypt import Decrypt, KingDiskDecrypt
* Sat 13 Dec 2014 01:34:46 AM JST
print(
* Sat 13 Dec 2014 01:37:22 AM JST
crypt
* Sat 13 Dec 2014 01:47:05 AM JST
from mypc.script.scripts.wol import WakeOnLan
* Sat 13 Dec 2014 01:48:35 AM JST

* Sat 13 Dec 2014 01:48:35 AM JST

* Sat 13 Dec 2014 01:48:35 AM JST
from mypc.script.scripts.wol import WakeOnLan

* Sat 13 Dec 2014 02:18:40 AM JST
/root/.pylib/mypc
* Sat 13 Dec 2014 02:41:37 AM JST
Re
* Sat 13 Dec 2014 02:41:47 AM JST
DequeReceiver
* Sat 13 Dec 2014 02:42:27 AM JST
param = RookParameter()
* Sat 13 Dec 2014 02:42:35 AM JST
Rook
* Sat 13 Dec 2014 02:42:46 AM JST
    def get_parameter(self, ):
        r"""SUMMARY

        get_parameter()

        @Return:

        @Error:
        """
        return self.param


* Sat 13 Dec 2014 02:43:34 AM JST
self.get_parameter().get('mac')
* Sat 13 Dec 2014 02:47:23 AM JST
    def get_shell(self, ):
        r"""SUMMARY

        get_shell()

        @Return:

        @Error:
        """
        return self._ssh.invoke_shell()


* Sat 13 Dec 2014 02:48:06 AM JST
    def script(self, script):
        r"""SUMMARY

        script(script)

        @Arguments:
        - `script`:

        @Return:

        @Error:
        """
        shell = Shell(self.get_shell())
        shell.clear()
        script.execute(shell)


* Sat 13 Dec 2014 02:48:34 AM JST
Shell(
* Sat 13 Dec 2014 02:48:35 AM JST
n')
* Sat 13 Dec 2014 02:48:37 AM JST

* Sat 13 Dec 2014 02:48:37 AM JST

* Sat 13 Dec 2014 02:48:38 AM JST
        shell.clear()

* Sat 13 Dec 2014 02:48:49 AM JST

* Sat 13 Dec 2014 02:48:49 AM JST

* Sat 13 Dec 2014 02:48:49 AM JST
        shell = self.get_shell()

* Sat 13 Dec 2014 02:48:57 AM JST

* Sat 13 Dec 2014 02:48:57 AM JST

* Sat 13 Dec 2014 02:48:57 AM JST
        self.script()

* Sat 13 Dec 2014 02:49:01 AM JST

* Sat 13 Dec 2014 02:49:01 AM JST

* Sat 13 Dec 2014 02:49:01 AM JST
        wol.execute(shell)

* Sat 13 Dec 2014 02:57:00 AM JST
port
* Sat 13 Dec 2014 02:57:19 AM JST
r.connect()
* Sat 13 Dec 2014 02:58:29 AM JST
param.get('port')
* Sat 13 Dec 2014 02:58:45 AM JST
from mypc.client import *
* Sat 13 Dec 2014 02:58:53 AM JST
r=Rook()

* Sat 13 Dec 2014 02:58:58 AM JST
p=scripts.Ping('192.168.1.123',recv)
* Sat 13 Dec 2014 02:59:02 AM JST
r.connect()
* Sat 13 Dec 2014 02:59:08 AM JST
r.script(p)
* Sat 13 Dec 2014 02:59:18 AM JST
from mypc.client import *
r=Rook()
p=scripts.Ping('192.168.1.123',recv)
r.connect()

* Sat 13 Dec 2014 02:59:35 AM JST
r.connect()

* Sat 13 Dec 2014 02:59:40 AM JST
r.script(p)
* Sat 13 Dec 2014 02:59:47 AM JST
p=scripts.Ping('192.168.1.123',recv)
* Sat 13 Dec 2014 02:59:54 AM JST
r.script(p)
* Sat 13 Dec 2014 03:03:40 AM JST
r.script(p)
* Sat 13 Dec 2014 03:03:52 AM JST
p=scripts.Ping('192.168.1.123',recv)
* Sat 13 Dec 2014 03:03:55 AM JST
p.setip('192.168.1.129')
* Sat 13 Dec 2014 03:07:18 AM JST
False
* Sat 13 Dec 2014 03:07:18 AM JST
return False
* Sat 13 Dec 2014 03:07:30 AM JST
return 
* Sat 13 Dec 2014 03:11:58 AM JST
_router
* Sat 13 Dec 2014 03:12:27 AM JST
from mypc.client import *
* Sat 13 Dec 2014 03:20:32 AM JST
'\r\nroot@ro:~# ping -w 1 -c 1 192.168.1.129\r\nPING 192.168.1.129 (192.168.1.129): 56 data bytes\r\n64 bytes from 192.168.1.129: seq=0 ttl=64 time=1.311 ms\r\n\r\n--- 192.168.1.129 ping statistics ---\r\n1 packets transmitted, 1 packets received, 0% packet loss\r\nround-trip min/avg/max = 1.311/1.311/1.311 ms\r\nroot@ro:~# '
* Sat 13 Dec 2014 03:20:50 AM JST
root@ro:~# ping -w 1 -c 1 192.168.1.129
PING 192.168.1.129 (192.168.1.129): 56 data bytes
64 bytes from 192.168.1.129: seq=0 ttl=64 time=1.311 ms

--- 192.168.1.129 ping statistics ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max = 1.311/1.311/1.311 ms
root@ro:~#
* Sat 13 Dec 2014 03:21:46 AM JST
'\r\nroot@ro:~# ping -w 1 -c 1 192.168.1.123\r\nPING 192.168.1.123 (192.168.1.123): 56 data bytes\r\n'
* Sat 13 Dec 2014 03:21:58 AM JST
root@ro:~# ping -w 1 -c 1 192.168.1.123
PING 192.168.1.123 (192.168.1.123): 56 data bytes

* Sat 13 Dec 2014 03:43:41 AM JST
PortForward
* Sat 13 Dec 2014 03:43:50 AM JST
PortForward
* Sat 13 Dec 2014 03:45:48 AM JST
rook
* Sat 13 Dec 2014 03:45:54 AM JST
routerparam
* Sat 13 Dec 2014 03:48:32 AM JST
from mypc.param import KingParameter, RookParameter
* Sat 13 Dec 2014 03:48:56 AM JST
'identityfile'
* Sat 13 Dec 2014 03:50:02 AM JST
'taka16.no-ip.info',
* Sat 13 Dec 2014 03:50:06 AM JST
'taka16.no-ip.info'
* Sat 13 Dec 2014 03:50:34 AM JST
hostname
* Sat 13 Dec 2014 03:50:57 AM JST
'12316'
* Sat 13 Dec 2014 03:51:15 AM JST
'/root/.ssh/kagi'
* Sat 13 Dec 2014 04:00:05 AM JST
PortForward(
            sshhost=routerparam.get('hostname'),
            target=kingparam.get('localip'),
            sshport=routerparam.get('port'),
            user=routerparam.get('user'),
            key=routerparam.get('identityfile')[0])
* Sat 13 Dec 2014 04:00:37 AM JST
self._router.get_parameter()
* Sat 13 Dec 2014 04:00:59 AM JST
self.get_parameter()
* Sat 13 Dec 2014 04:01:12 AM JST

* Sat 13 Dec 2014 04:01:12 AM JST

* Sat 13 Dec 2014 04:01:12 AM JST
        routerparam = self._router.get_parameter()

* Sat 13 Dec 2014 04:11:03 AM JST
sshforward/
* Sat 13 Dec 2014 04:12:17 AM JST
exepath = sshforwarder.__file__
* Sat 13 Dec 2014 04:12:37 AM JST
kingforwarder
* Sat 13 Dec 2014 04:12:40 AM JST
king
* Sat 13 Dec 2014 04:12:47 AM JST
ssh
* Sat 13 Dec 2014 04:13:07 AM JST
KingPortForwarder
* Sat 13 Dec 2014 04:14:42 AM JST
getportforward
* Sat 13 Dec 2014 04:15:18 AM JST
import 
* Sat 13 Dec 2014 04:16:18 AM JST
from mypc.client import King
ki=King()

* Sat 13 Dec 2014 04:16:20 AM JST
from mypc.client import King
ki=King()
ki.isportforward()

* Sat 13 Dec 2014 04:18:07 AM JST
ki.isportforward()
* Sat 13 Dec 2014 05:17:31 AM JST
this
* Sat 13 Dec 2014 05:18:00 AM JST
print 
* Sat 13 Dec 2014 05:40:18 AM JST
.IsFullySpecified()
* Sat 13 Dec 2014 07:05:50 AM JST
tkinter
* Sat 13 Dec 2014 07:22:16 AM JST
ThunarWMHandle
* Sat 13 Dec 2014 07:23:50 AM JST
23128352
* Sat 13 Dec 2014 07:29:51 AM JST
/share/pyshared/gtk-2.0/gtk/
* Sat 13 Dec 2014 07:32:04 AM JST
wmclass_class
* Sat 13 Dec 2014 07:37:27 AM JST
23128352
* Sat 13 Dec 2014 08:16:57 AM JST
http://rgruet.free.fr/PQR26/PQR2.6.html#SpecialMethods
* Sat 13 Dec 2014 08:59:12 AM JST

class Side:
    """Class Side
    """
    # Attributes:
    val = None  # () 
    
    # Operations
    def get(self):
        """function get
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def set(self, value):
        """function set
        
        value: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __cmp__(self, other):
        """function __cmp__
        
        other: 
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __lt__(self, other):
        """function __lt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __le__(self, other):
        """function __le__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __gt__(self, other):
        """function __gt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ge__(self, other):
        """function __ge__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __hash__(self):
        """function __hash__
        
        returns long
        """
        return None # should raise NotImplementedError()
    
    def __nonzero__(self):
        """function __nonzero__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __add__(self, other):
        """function __add__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __sub__(self, other):
        """function __sub__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __mul__(self, other):
        """function __mul__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __div__(self, other):
        """function __div__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __pow__(self, other):
        """function __pow__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __and__(self, other):
        """function __and__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __xor__(self, other):
        """function __xor__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __or__(self, other):
        """function __or__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __lshift__(self, other):
        """function __lshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rshift__(self, other):
        """function __rshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __neg__(self):
        """function __neg__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __pos__(self):
        """function __pos__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __invert__(self, other):
        """function __invert__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __iadd__(self, other):
        """function __iadd__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __isub__(self, other):
        """function __isub__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __imul__(self, other):
        """function __imul__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __idiv__(self, other):
        """function __idiv__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ipow__(self, other):
        """function __ipow__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __iand__(self, other):
        """function __iand__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ixor__(self, other):
        """function __ixor__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ior__(self, other):
        """function __ior__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ilshift__(self, other):
        """function __ilshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __irshift__(self, other):
        """function __irshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __int__(self):
        """function __int__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __long__(self):
        """function __long__
        
        returns long
        """
        return None # should raise NotImplementedError()
    
    def __float__(self):
        """function __float__
        
        returns float
        """
        return None # should raise NotImplementedError()
    
    def __complex__(self):
        """function __complex__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __oct__(self):
        """function __oct__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __hex__(self):
        """function __hex__
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sat 13 Dec 2014 09:01:23 AM JST

class Side:
    """Class Side
    """
    # Attributes:
    val = None  # () 
    
    # Operations
    def get(self):
        """function get
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def set(self, value):
        """function set
        
        value: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __cmp__(self, other):
        """function __cmp__
        
        other: 
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __lt__(self, other):
        """function __lt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __le__(self, other):
        """function __le__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __gt__(self, other):
        """function __gt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ge__(self, other):
        """function __ge__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __hash__(self):
        """function __hash__
        
        returns long
        """
        return None # should raise NotImplementedError()
    
    def __nonzero__(self):
        """function __nonzero__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __add__(self, other):
        """function __add__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __sub__(self, other):
        """function __sub__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __mul__(self, other):
        """function __mul__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __div__(self, other):
        """function __div__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __pow__(self, other):
        """function __pow__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __and__(self, other):
        """function __and__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __xor__(self, other):
        """function __xor__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __or__(self, other):
        """function __or__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __lshift__(self, other):
        """function __lshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rshift__(self, other):
        """function __rshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __neg__(self):
        """function __neg__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __pos__(self):
        """function __pos__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __invert__(self, other):
        """function __invert__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __iadd__(self, other):
        """function __iadd__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __isub__(self, other):
        """function __isub__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __imul__(self, other):
        """function __imul__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __idiv__(self, other):
        """function __idiv__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ipow__(self, other):
        """function __ipow__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __iand__(self, other):
        """function __iand__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ixor__(self, other):
        """function __ixor__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ior__(self, other):
        """function __ior__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ilshift__(self, other):
        """function __ilshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __irshift__(self, other):
        """function __irshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __int__(self):
        """function __int__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __long__(self):
        """function __long__
        
        returns long
        """
        return None # should raise NotImplementedError()
    
    def __float__(self):
        """function __float__
        
        returns float
        """
        return None # should raise NotImplementedError()
    
    def __complex__(self):
        """function __complex__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __oct__(self):
        """function __oct__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __hex__(self):
        """function __hex__
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sat 13 Dec 2014 09:02:02 AM JST
class Height(Side):
    """Class Height
    """
    # Attributes:
    
    # Operations


* Sat 13 Dec 2014 09:02:13 AM JST
class Width(Side):
    """Class Width
    """
    # Attributes:
    
    # Operations


* Sat 13 Dec 2014 09:03:10 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 09:03:37 AM JST
return None # should raise NotImplementedError()
* Sat 13 Dec 2014 09:03:49 AM JST
value
* Sat 13 Dec 2014 09:04:09 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 09:05:42 AM JST
@Error:
* Sat 13 Dec 2014 09:06:42 AM JST
None
* Sat 13 Dec 2014 09:06:44 AM JST

* Sat 13 Dec 2014 09:06:44 AM JST

* Sat 13 Dec 2014 09:06:44 AM JST
        returns None

* Sat 13 Dec 2014 09:12:48 AM JST
integer
* Sat 13 Dec 2014 09:16:49 AM JST
TypeError('{}.__init__() must be int type. got: {}'
                            .format(value, integer))
* Sat 13 Dec 2014 09:16:58 AM JST
integer
* Sat 13 Dec 2014 09:17:29 AM JST
integer
* Sat 13 Dec 2014 09:17:49 AM JST
TypeError('{}.__init__() must be int type. got: {}'
                            .format(type(value), type(integer)))
* Sat 13 Dec 2014 09:17:56 AM JST
integer
* Sat 13 Dec 2014 09:19:10 AM JST
__name__
* Sat 13 Dec 2014 09:33:45 AM JST
value)
* Sat 13 Dec 2014 09:33:46 AM JST
int(value)
* Sat 13 Dec 2014 09:34:50 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 09:41:11 AM JST
self._value
* Sat 13 Dec 2014 09:41:16 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 09:43:09 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 09:52:00 AM JST
        if isinstance(other, (int, self.__class__)):
            return cmp(self._value, int(other))

* Sat 13 Dec 2014 09:52:16 AM JST
_value, 
* Sat 13 Dec 2014 09:52:16 AM JST
self._value, 
* Sat 13 Dec 2014 09:52:17 AM JST
cmp(self._value, 
* Sat 13 Dec 2014 09:52:34 AM JST
other
* Sat 13 Dec 2014 09:54:12 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 09:54:57 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 09:55:19 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 09:56:10 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 09:56:24 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 09:56:26 AM JST
_vlaue
* Sat 13 Dec 2014 09:57:01 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 09:57:14 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 09:58:51 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:00:41 AM JST
self.
* Sat 13 Dec 2014 10:01:42 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:02:07 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:02:31 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:02:54 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:03:49 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:04:06 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:04:48 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:05:33 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:06:05 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:06:24 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:06:54 AM JST
self.__cla
* Sat 13 Dec 2014 10:07:01 AM JST
_
* Sat 13 Dec 2014 10:07:02 AM JST
self._
* Sat 13 Dec 2014 10:07:37 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:07:58 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:08:44 AM JST
.__class__(self._value ~ self._cast(other))
* Sat 13 Dec 2014 10:09:26 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:09:51 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:10:06 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:10:26 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:12:48 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:13:09 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:13:22 AM JST
self._value ^ 
* Sat 13 Dec 2014 10:13:30 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:14:16 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:14:37 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:14:56 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:15:04 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:15:11 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:15:21 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:15:29 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:15:45 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:15:55 AM JST
None # should raise NotImplementedError()
* Sat 13 Dec 2014 10:18:06 AM JST
Side
* Sat 13 Dec 2014 10:26:44 AM JST
type(value)
* Sat 13 Dec 2014 10:32:17 AM JST
Height(0)
* Sat 13 Dec 2014 10:32:35 AM JST
type(
* Sat 13 Dec 2014 10:35:25 AM JST
Type
* Sat 13 Dec 2014 10:37:50 AM JST
            raise TypeError(str(err).replace(": 'int'", ": '{}'".format(
                self.__class__.__name__)))

* Sat 13 Dec 2014 10:37:59 AM JST
        try:
            return self.__class__(self._value - self._cast(other))
        except TypeError as err:
            raise TypeError(str(err).replace(": 'int'", ": '{}'".format(
                self.__class__.__name__)))

* Sat 13 Dec 2014 10:38:15 AM JST
return self.__class__(self._value * self._cast(other))
* Sat 13 Dec 2014 10:38:23 AM JST
return self.__class__(self._value / self._cast(other))
* Sat 13 Dec 2014 10:38:32 AM JST
return self.__class__(self._value ** self._cast(other))
* Sat 13 Dec 2014 10:39:03 AM JST
return self.__class__(self._value & self._cast(other))
* Sat 13 Dec 2014 10:39:08 AM JST
return self.__class__(self._value ^ self._cast(other))
* Sat 13 Dec 2014 10:39:17 AM JST
return self.__class__(self._value | self._cast(other))
* Sat 13 Dec 2014 10:39:21 AM JST
return self.__class__(self._value << self._cast(other))
* Sat 13 Dec 2014 10:39:25 AM JST
return self.__class__(self._value >> self._cast(other))
* Sat 13 Dec 2014 10:40:08 AM JST
self._value
* Sat 13 Dec 2014 10:40:33 AM JST

* Sat 13 Dec 2014 10:40:33 AM JST

* Sat 13 Dec 2014 10:40:33 AM JST
        other:

* Sat 13 Dec 2014 10:41:21 AM JST
        self._value += self._cast(other)
        return self

* Sat 13 Dec 2014 10:41:28 AM JST
            
* Sat 13 Dec 2014 10:41:36 AM JST
        self._value -= self._cast(other)
        return self

* Sat 13 Dec 2014 10:41:58 AM JST

* Sat 13 Dec 2014 10:41:58 AM JST

* Sat 13 Dec 2014 10:41:58 AM JST
            return self

* Sat 13 Dec 2014 10:42:03 AM JST

* Sat 13 Dec 2014 10:42:03 AM JST

* Sat 13 Dec 2014 10:42:03 AM JST
            return self

* Sat 13 Dec 2014 10:42:14 AM JST
        self._value *= self._cast(other)
        return self

* Sat 13 Dec 2014 10:42:29 AM JST

* Sat 13 Dec 2014 10:42:29 AM JST

* Sat 13 Dec 2014 10:42:29 AM JST
            return self

* Sat 13 Dec 2014 10:42:42 AM JST
        self._value /= self._cast(other)
        return self

* Sat 13 Dec 2014 10:42:58 AM JST

* Sat 13 Dec 2014 10:42:58 AM JST

* Sat 13 Dec 2014 10:42:58 AM JST
            return self

* Sat 13 Dec 2014 10:43:05 AM JST
        self._value **= self._cast(other)
        return self

* Sat 13 Dec 2014 10:43:12 AM JST

* Sat 13 Dec 2014 10:43:12 AM JST

* Sat 13 Dec 2014 10:43:12 AM JST
    return self

* Sat 13 Dec 2014 10:43:35 AM JST
        self._value &= self._cast(other)

* Sat 13 Dec 2014 10:43:47 AM JST
        self._value ^= self._cast(other)

* Sat 13 Dec 2014 10:43:56 AM JST
self._value |= self._cast(other)
* Sat 13 Dec 2014 10:44:06 AM JST
self._value <<= self._cast(other)
* Sat 13 Dec 2014 10:44:12 AM JST
self._value >>= self._cast(other)
* Sat 13 Dec 2014 10:44:55 AM JST
from xahk2.obj.side import *
* Sat 13 Dec 2014 11:14:21 AM JST
pass
* Sat 13 Dec 2014 11:15:27 AM JST
Side, 
* Sat 13 Dec 2014 11:21:28 AM JST
self.assertEqual(self.default, self.side.get())
* Sat 13 Dec 2014 11:21:31 AM JST
default
* Sat 13 Dec 2014 11:21:36 AM JST
self.default
* Sat 13 Dec 2014 11:34:41 AM JST

* Sat 13 Dec 2014 11:35:14 AM JST
        
* Sat 13 Dec 2014 11:35:26 AM JST
int
* Sat 13 Dec 2014 11:39:22 AM JST

* Sat 13 Dec 2014 11:41:43 AM JST
Height
* Sat 13 Dec 2014 11:41:45 AM JST
Width
* Sat 13 Dec 2014 11:42:14 AM JST

* Sat 13 Dec 2014 11:42:32 AM JST

* Sat 13 Dec 2014 11:42:51 AM JST

* Sat 13 Dec 2014 11:42:58 AM JST

* Sat 13 Dec 2014 06:36:43 PM JST



    def
* Sat 13 Dec 2014 06:36:54 PM JST
__eq__
* Sat 13 Dec 2014 06:37:03 PM JST
__ne__
* Sat 13 Dec 2014 06:37:13 PM JST
__hash__
* Sat 13 Dec 2014 06:37:27 PM JST
__nonzero__
* Sat 13 Dec 2014 06:37:38 PM JST
__add__
* Sat 13 Dec 2014 06:37:46 PM JST
__sub__
* Sat 13 Dec 2014 06:37:56 PM JST
__mul__
* Sat 13 Dec 2014 06:38:05 PM JST
__div__
* Sat 13 Dec 2014 06:38:16 PM JST
__pow__
* Sat 13 Dec 2014 06:38:25 PM JST
__and__
* Sat 13 Dec 2014 06:38:33 PM JST
__xor__
* Sat 13 Dec 2014 06:38:44 PM JST
__or__
* Sat 13 Dec 2014 06:38:53 PM JST
__lshift__
* Sat 13 Dec 2014 06:39:01 PM JST
__rshift__
* Sat 13 Dec 2014 06:39:09 PM JST
__neg__
* Sat 13 Dec 2014 06:39:16 PM JST
__pos__
* Sat 13 Dec 2014 06:39:25 PM JST
__invert__
* Sat 13 Dec 2014 06:39:32 PM JST
__iadd__
* Sat 13 Dec 2014 06:39:44 PM JST
__isub__
* Sat 13 Dec 2014 06:39:56 PM JST
__imul__
* Sat 13 Dec 2014 06:40:06 PM JST
__idiv__
* Sat 13 Dec 2014 06:40:16 PM JST
__ipow__
* Sat 13 Dec 2014 06:40:26 PM JST
__iand__
* Sat 13 Dec 2014 06:40:36 PM JST
__ixor__
* Sat 13 Dec 2014 06:40:50 PM JST
__ior__
* Sat 13 Dec 2014 06:41:02 PM JST
__ilshift__
* Sat 13 Dec 2014 06:41:12 PM JST
__irshift__
* Sat 13 Dec 2014 06:41:21 PM JST
__int__
* Sat 13 Dec 2014 06:41:30 PM JST
__long__
* Sat 13 Dec 2014 06:41:39 PM JST
__float__
* Sat 13 Dec 2014 06:41:47 PM JST
__complex__
* Sat 13 Dec 2014 06:41:54 PM JST
__oct__
* Sat 13 Dec 2014 06:42:04 PM JST
__hex__
* Sat 13 Dec 2014 06:42:30 PM JST
dp-pycode-navi-sub-ipython
* Sat 13 Dec 2014 06:43:00 PM JST
           
* Sat 13 Dec 2014 06:43:18 PM JST
           
* Sat 13 Dec 2014 06:43:21 PM JST
           ("M-R"     . e2wm:navi-right-command)
* Sat 13 Dec 2014 06:44:03 PM JST
           
* Sat 13 Dec 2014 06:44:13 PM JST
           
* Sat 13 Dec 2014 06:44:43 PM JST
           
* Sat 13 Dec 2014 06:45:03 PM JST
           
* Sat 13 Dec 2014 06:45:19 PM JST
           
* Sat 13 Dec 2014 06:45:29 PM JST

* Sat 13 Dec 2014 06:45:30 PM JST

* Sat 13 Dec 2014 06:45:30 PM JST
           ("M-D"     . e2wm:navi-main-command)

* Sat 13 Dec 2014 06:46:34 PM JST
           
* Sat 13 Dec 2014 09:48:46 PM JST
pass
* Sat 13 Dec 2014 09:49:17 PM JST
        
* Sat 13 Dec 2014 09:50:06 PM JST
pass
* Sat 13 Dec 2014 09:50:23 PM JST
self.assertTrue(self.side < 1)
* Sat 13 Dec 2014 09:51:48 PM JST
pass
* Sat 13 Dec 2014 09:52:24 PM JST
pass
* Sat 13 Dec 2014 09:52:40 PM JST
        
* Sat 13 Dec 2014 09:55:44 PM JST
pass
* Sat 13 Dec 2014 09:57:12 PM JST
self.
* Sat 13 Dec 2014 09:57:22 PM JST
        self.ass
* Sat 13 Dec 2014 09:57:23 PM JST
0
* Sat 13 Dec 2014 09:57:24 PM JST
side <= 0
* Sat 13 Dec 2014 09:57:24 PM JST
self.side <= 0
* Sat 13 Dec 2014 09:57:33 PM JST

* Sat 13 Dec 2014 09:57:44 PM JST
self.assertFalse(side.Side( - 
* Sat 13 Dec 2014 10:02:16 PM JST

* Sat 13 Dec 2014 10:03:12 PM JST
self.side <= 
* Sat 13 Dec 2014 10:04:04 PM JST
        
* Sat 13 Dec 2014 10:05:23 PM JST
        
* Sat 13 Dec 2014 10:05:37 PM JST

* Sat 13 Dec 2014 10:05:41 PM JST

* Sat 13 Dec 2014 10:05:41 PM JST

* Sat 13 Dec 2014 10:05:41 PM JST
        self.assertTrue(self.side > -1)

* Sat 13 Dec 2014 10:05:43 PM JST

* Sat 13 Dec 2014 10:05:43 PM JST

* Sat 13 Dec 2014 10:05:43 PM JST
        self.assertTrue(self.side > -1)

* Sat 13 Dec 2014 10:05:51 PM JST

* Sat 13 Dec 2014 10:05:51 PM JST

* Sat 13 Dec 2014 10:05:51 PM JST
        self.assertTrue(self.side > -1)

* Sat 13 Dec 2014 10:05:54 PM JST

* Sat 13 Dec 2014 10:08:06 PM JST

* Sat 13 Dec 2014 10:08:17 PM JST
        
* Sat 13 Dec 2014 10:08:44 PM JST

* Sat 13 Dec 2014 10:10:38 PM JST

* Sat 13 Dec 2014 10:10:46 PM JST

* Sat 13 Dec 2014 10:12:31 PM JST
pass
* Sat 13 Dec 2014 10:12:56 PM JST

* Sat 13 Dec 2014 10:14:37 PM JST
        
* Sat 13 Dec 2014 10:19:35 PM JST
pass
* Sat 13 Dec 2014 10:23:14 PM JST
pass
* Sat 13 Dec 2014 10:23:23 PM JST
self.
* Sat 13 Dec 2014 10:25:17 PM JST
pass
* Sat 13 Dec 2014 10:26:26 PM JST
side
* Sat 13 Dec 2014 10:26:39 PM JST
side
* Sat 13 Dec 2014 10:30:11 PM JST
pass
* Sat 13 Dec 2014 10:30:53 PM JST
got
* Sat 13 Dec 2014 10:30:59 PM JST
expects
* Sat 13 Dec 2014 10:31:02 PM JST
got
* Sat 13 Dec 2014 10:33:41 PM JST
self.assertEqual(expects, got)
* Sat 13 Dec 2014 10:34:30 PM JST
got
* Sat 13 Dec 2014 10:34:33 PM JST
expects
* Sat 13 Dec 2014 10:37:19 PM JST
w
* Sat 13 Dec 2014 10:38:16 PM JST
        expects = -1
        got = self.side - 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        got = self.side - side.Side(1)
        self.assertEqual(expects, got)
        with self.assertRaises(TypeError):
            self.side - '1'

* Sat 13 Dec 2014 10:56:40 PM JST
self._value * self._cast(other)
* Sat 13 Dec 2014 11:02:15 PM JST
 or 0
* Sat 13 Dec 2014 11:08:23 PM JST

* Sat 13 Dec 2014 11:08:24 PM JST

* Sat 13 Dec 2014 11:08:24 PM JST
        return other

* Sat 13 Dec 2014 11:14:52 PM JST
self.side + '1'
* Sat 13 Dec 2014 11:15:21 PM JST

* Sat 13 Dec 2014 11:15:22 PM JST

* Sat 13 Dec 2014 11:15:22 PM JST
        self.side + '1'

* Sun 14 Dec 2014 12:13:02 AM JST

* Sun 14 Dec 2014 12:18:23 AM JST
unsupported operand type(s) for +: 'Side' and 'str'
* Sun 14 Dec 2014 12:19:56 AM JST

* Sun 14 Dec 2014 12:19:56 AM JST

* Sun 14 Dec 2014 12:19:56 AM JST
        return other

* Sun 14 Dec 2014 12:20:06 AM JST

* Sun 14 Dec 2014 12:20:06 AM JST

* Sun 14 Dec 2014 12:20:06 AM JST
        try:

* Sun 14 Dec 2014 12:20:17 AM JST

* Sun 14 Dec 2014 12:20:17 AM JST

* Sun 14 Dec 2014 12:20:17 AM JST
        try:

* Sun 14 Dec 2014 12:20:22 AM JST

* Sun 14 Dec 2014 12:20:22 AM JST

* Sun 14 Dec 2014 12:20:22 AM JST
        try:

* Sun 14 Dec 2014 12:20:29 AM JST

* Sun 14 Dec 2014 12:20:29 AM JST

* Sun 14 Dec 2014 12:20:29 AM JST
        try:

* Sun 14 Dec 2014 12:20:34 AM JST

* Sun 14 Dec 2014 12:20:34 AM JST

* Sun 14 Dec 2014 12:20:34 AM JST
        try:

* Sun 14 Dec 2014 12:20:39 AM JST

* Sun 14 Dec 2014 12:20:39 AM JST

* Sun 14 Dec 2014 12:20:39 AM JST
        try:

* Sun 14 Dec 2014 12:20:45 AM JST

* Sun 14 Dec 2014 12:20:45 AM JST

* Sun 14 Dec 2014 12:20:45 AM JST
        try:

* Sun 14 Dec 2014 12:20:49 AM JST

* Sun 14 Dec 2014 12:20:49 AM JST

* Sun 14 Dec 2014 12:20:49 AM JST
        try:

* Sun 14 Dec 2014 12:20:54 AM JST

* Sun 14 Dec 2014 12:20:54 AM JST

* Sun 14 Dec 2014 12:20:54 AM JST
        try:

* Sun 14 Dec 2014 12:21:22 AM JST
-self._value
* Sun 14 Dec 2014 12:21:32 AM JST
+self._value
* Sun 14 Dec 2014 12:21:40 AM JST
~self._value
* Sun 14 Dec 2014 12:21:48 AM JST

* Sun 14 Dec 2014 12:21:48 AM JST

* Sun 14 Dec 2014 12:21:48 AM JST
        try:

* Sun 14 Dec 2014 12:21:56 AM JST

* Sun 14 Dec 2014 12:21:56 AM JST

* Sun 14 Dec 2014 12:21:56 AM JST
        try:

* Sun 14 Dec 2014 12:22:01 AM JST

* Sun 14 Dec 2014 12:22:02 AM JST

* Sun 14 Dec 2014 12:22:02 AM JST
        try:

* Sun 14 Dec 2014 12:22:06 AM JST

* Sun 14 Dec 2014 12:22:06 AM JST

* Sun 14 Dec 2014 12:22:06 AM JST
        try:

* Sun 14 Dec 2014 12:22:13 AM JST

* Sun 14 Dec 2014 12:22:13 AM JST

* Sun 14 Dec 2014 12:22:13 AM JST
        try:

* Sun 14 Dec 2014 12:22:17 AM JST

* Sun 14 Dec 2014 12:22:17 AM JST

* Sun 14 Dec 2014 12:22:17 AM JST
        try:

* Sun 14 Dec 2014 12:22:21 AM JST

* Sun 14 Dec 2014 12:22:21 AM JST

* Sun 14 Dec 2014 12:22:21 AM JST
        try:

* Sun 14 Dec 2014 12:22:31 AM JST

* Sun 14 Dec 2014 12:22:31 AM JST

* Sun 14 Dec 2014 12:22:31 AM JST
        try:

* Sun 14 Dec 2014 12:22:36 AM JST

* Sun 14 Dec 2014 12:22:36 AM JST

* Sun 14 Dec 2014 12:22:36 AM JST
        try:

* Sun 14 Dec 2014 12:22:41 AM JST

* Sun 14 Dec 2014 12:22:41 AM JST

* Sun 14 Dec 2014 12:22:41 AM JST
        try:

* Sun 14 Dec 2014 12:24:15 AM JST
assertIsInstance(
* Sun 14 Dec 2014 12:24:15 AM JST
self.assertIsInstance(
* Sun 14 Dec 2014 12:24:16 AM JST
str)
* Sun 14 Dec 2014 12:28:00 AM JST
a
* Sun 14 Dec 2014 12:28:00 AM JST
slfe.a
* Sun 14 Dec 2014 12:28:39 AM JST
        with self.assertRaises(TypeError):
            self.side < '1'

* Sun 14 Dec 2014 12:59:03 AM JST
raise TypeError('unsupported type {}'.format(type(other)))
* Sun 14 Dec 2014 01:12:52 AM JST
return 
* Sun 14 Dec 2014 01:13:09 AM JST
unsupported operand type(s) for -:
* Sun 14 Dec 2014 01:14:51 AM JST
        if isinstance(other, (int, self.__class__)):
            return self.__class__(self._value + int(other))
        TypeError("unsupported operand type(s) for +: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

* Sun 14 Dec 2014 01:15:08 AM JST

* Sun 14 Dec 2014 01:15:08 AM JST

* Sun 14 Dec 2014 01:15:08 AM JST
        return self.__class__(self._value - self._cast(other))

* Sun 14 Dec 2014 01:52:32 AM JST
raise 
* Sun 14 Dec 2014 01:53:02 AM JST
        if isinstance(other, (int, self.__class__)):
            return self.__class__(self._value - int(other))
        raise TypeError("unsupported operand type(s) for -: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

* Sun 14 Dec 2014 01:56:39 AM JST
return self.__class__(self._value  int(other))
* Sun 14 Dec 2014 02:28:13 AM JST
        if isinstance(other, (int, self.__class__)):
            self._value += int(other)
            return self
        raise TypeError("unsupported operand type(s) for +=: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

* Sun 14 Dec 2014 02:28:36 AM JST
        if isinstance(other, (int, self.__class__)):
            self._value += int(other)
            return self
        raise TypeError("unsupported operand type(s) for +=: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

* Sun 14 Dec 2014 02:28:52 AM JST
        if isinstance(other, (int, self.__class__)):
            self._value *= int(other)
            return self
        raise TypeError("unsupported operand type(s) for *=: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

* Sun 14 Dec 2014 02:31:47 AM JST

* Sun 14 Dec 2014 02:35:06 AM JST
        expects = 0
        got = self.side * 2
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side * side.Side(2)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side * '1'

* Sun 14 Dec 2014 02:36:32 AM JST
        expects = 0
        got = self.side / 2
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side / side.Side(2)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side / '1'

* Sun 14 Dec 2014 02:37:09 AM JST
        expects = 0
        got = self.side ** 2
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side ** side.Side(2)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side ** '1'

* Sun 14 Dec 2014 02:39:45 AM JST
        expects = 0
        got = self.side & 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side & side.Side(2)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side & '1'


* Sun 14 Dec 2014 02:40:50 AM JST
        expects = 1
        got = self.side ^ 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side ^ side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side ^ '1'


* Sun 14 Dec 2014 02:41:40 AM JST
        expects = 1
        got = self.side | 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side | side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side | '1'


* Sun 14 Dec 2014 02:42:46 AM JST
        expects = 0
        got = self.side << 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side << side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side << '1'

* Sun 14 Dec 2014 02:43:24 AM JST
        expects = 0
        got = self.side >> 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side >> side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side >> '1'

* Sun 14 Dec 2014 02:44:05 AM JST
 >> 1
* Sun 14 Dec 2014 02:44:21 AM JST
 >> side.Side(1)
* Sun 14 Dec 2014 02:44:55 AM JST
        expects = -1
        self.side = side.Side(1)
        got = -self.side
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)

* Sun 14 Dec 2014 02:51:54 AM JST
        expects = -1
        self.side = side.Side(-1)
        got = +self.side
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)

* Sun 14 Dec 2014 02:55:42 AM JST
        expects = 1
        got = self.side + 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side + side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side + '1'

* Sun 14 Dec 2014 02:56:03 AM JST
self.side +
* Sun 14 Dec 2014 02:56:13 AM JST
got
* Sun 14 Dec 2014 02:56:25 AM JST
got
* Sun 14 Dec 2014 02:57:01 AM JST
got = 
* Sun 14 Dec 2014 02:57:09 AM JST
got
* Sun 14 Dec 2014 02:57:31 AM JST
        expects = 1
        self.side +=  1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        expects += 1
        self.side += side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side += '1'


* Sun 14 Dec 2014 02:58:14 AM JST
        expects = -1
        self.side -=  1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        expects -= 1
        self.side -= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side -= '1'


* Sun 14 Dec 2014 02:58:56 AM JST
        expects = 0
        self.side *=  1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        expects *= 1
        self.side *= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side *= '1'


* Sun 14 Dec 2014 02:59:41 AM JST
        expects = 0
        self.side /=  1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        expects /= 1
        self.side /= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side /= '1'


* Sun 14 Dec 2014 02:59:47 AM JST

* Sun 14 Dec 2014 02:59:47 AM JST

* Sun 14 Dec 2014 02:59:47 AM JST
        pass

* Sun 14 Dec 2014 03:00:17 AM JST
        expects = 0
        self.side **=  1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        expects **= 1
        self.side **= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side **= '1'


* Sun 14 Dec 2014 03:00:46 AM JST
        expects = 0
        got = self.side & 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side & side.Side(2)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side & '1'


* Sun 14 Dec 2014 03:01:03 AM JST
got = 
* Sun 14 Dec 2014 03:01:09 AM JST
got
* Sun 14 Dec 2014 03:01:20 AM JST
got = 
* Sun 14 Dec 2014 03:01:28 AM JST
got
* Sun 14 Dec 2014 03:01:32 AM JST
got
* Sun 14 Dec 2014 03:02:23 AM JST
        expects = 1
        got = self.side ^ 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side ^ side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side ^ '1'


* Sun 14 Dec 2014 03:02:40 AM JST
got = 
* Sun 14 Dec 2014 03:02:43 AM JST
got
* Sun 14 Dec 2014 03:02:48 AM JST
got
* Sun 14 Dec 2014 03:02:56 AM JST
got = 
* Sun 14 Dec 2014 03:03:06 AM JST
got
* Sun 14 Dec 2014 03:04:10 AM JST
expects
* Sun 14 Dec 2014 03:04:43 AM JST
        expects = 1
        got = self.side | 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side | side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side | '1'

* Sun 14 Dec 2014 03:04:56 AM JST
got = 
* Sun 14 Dec 2014 03:05:05 AM JST
got
* Sun 14 Dec 2014 03:06:51 AM JST
got
* Sun 14 Dec 2014 03:06:58 AM JST
got = 
* Sun 14 Dec 2014 03:07:09 AM JST
got
* Sun 14 Dec 2014 03:08:17 AM JST
        expects = 1
        self.side |= 1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        self.side |= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side |= '1'

* Sun 14 Dec 2014 03:09:10 AM JST
        expects = 0
        self.side <<= 1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        self.side <<= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side <<= '1'


* Sun 14 Dec 2014 03:10:48 AM JST
        self.assertEqual(0, int(self.side))
        self.assertIsInstance(int(self.side), int)


* Sun 14 Dec 2014 03:11:18 AM JST
        self.assertEqual(0, long(self.side))
        self.assertIsInstance(long(self.side), long)


* Sun 14 Dec 2014 03:11:26 AM JST
long
* Sun 14 Dec 2014 03:11:29 AM JST
long
* Sun 14 Dec 2014 03:11:33 AM JST
long
* Sun 14 Dec 2014 03:12:20 AM JST
        self.assertEqual(0.0, float(self.side))
        self.assertIsInstance(float(self.side), float)


* Sun 14 Dec 2014 03:12:34 AM JST
float
* Sun 14 Dec 2014 03:12:38 AM JST
float
* Sun 14 Dec 2014 03:12:41 AM JST
float
* Sun 14 Dec 2014 03:13:13 AM JST
        self.assertEqual(complex(0), complex(self.side))
        self.assertIsInstance(complex(self.side), complex)


* Sun 14 Dec 2014 03:13:17 AM JST
complex
* Sun 14 Dec 2014 03:13:21 AM JST
complex
* Sun 14 Dec 2014 03:13:23 AM JST
complex
* Sun 14 Dec 2014 03:13:25 AM JST
complex
* Sun 14 Dec 2014 03:14:26 AM JST

* Sun 14 Dec 2014 03:14:26 AM JST

* Sun 14 Dec 2014 03:14:26 AM JST
        self.assertIsInstance(oct(self.side), oct)

* Sun 14 Dec 2014 03:14:35 AM JST
self.assertEqual(oct(0), oct(self.side))
* Sun 14 Dec 2014 03:14:40 AM JST
oct
* Sun 14 Dec 2014 03:14:43 AM JST
oct
* Sun 14 Dec 2014 03:19:28 AM JST
            class Dummy(object):
                def __int__(self):
                    return 'a'

* Sun 14 Dec 2014 03:20:47 AM JST
int(value)
* Sun 14 Dec 2014 03:20:57 AM JST

* Sun 14 Dec 2014 03:20:57 AM JST

* Sun 14 Dec 2014 03:20:57 AM JST
        integer = int(value)

* Sun 14 Dec 2014 03:22:43 AM JST
TypeError
* Sun 14 Dec 2014 03:23:29 AM JST
        with self.assertRaises(Exception):
            self.side.set('a')

* Sun 14 Dec 2014 03:27:37 AM JST
side
* Sun 14 Dec 2014 03:27:37 AM JST
side = side
* Sun 14 Dec 2014 03:28:08 AM JST
expects
* Sun 14 Dec 2014 03:28:10 AM JST
got
* Sun 14 Dec 2014 03:33:51 AM JST
    def test___cmp__(self, ):
        self.assertEqual(cmp(self.side, 0), 0)
        self.assertEqual(cmp(self.side, 1), -1)
        self.assertEqual(cmp(self.side, -1), 1)
        self.assertEqual(cmp(self.side, side.Side(0)), 0)
        self.assertEqual(cmp(self.side, side.Side(1)), -1)
        self.assertEqual(cmp(self.side, side.Side(-1)), 1)

    def test___lt__(self, ):
        self.assertTrue(self.side < 1)
        self.assertTrue(self.side < side.Side(1))
        self.assertFalse(self.side < -1)
        self.assertFalse(self.side < side.Side(-1))

    def test___le__(self, ):
        self.assertTrue(self.side <= 1)
        self.assertTrue(self.side <= side.Side(1))
        self.assertTrue(self.side <= 0)
        self.assertTrue(self.side <= side.Side(0))
        self.assertFalse(self.side <= -1)
        self.assertFalse(self.side <= side.Side(-1))

    def test___gt__(self, ):
        self.assertTrue(self.side > -1)
        self.assertTrue(self.side > side.Side(-1))
        self.assertFalse(self.side > 1)
        self.assertFalse(self.side > side.Side(1))

    def test___ge__(self, ):
        self.assertTrue(self.side >= -1)
        self.assertTrue(self.side >= side.Side(-1))
        self.assertTrue(self.side >= 0)
        self.assertTrue(self.side >= side.Side(0))
        self.assertFalse(self.side >= 1)
        self.assertFalse(self.side >= side.Side(1))

    def test___eq__(self, ):
        self.assertTrue(self.side == 0)
        self.assertTrue(self.side == side.Side(0))
        self.assertFalse(self.side == 1)
        self.assertFalse(self.side == side.Side(1))

    def test___ne__(self, ):
        self.assertTrue(self.side != 1)
        self.assertTrue(self.side != side.Side(1))
        self.assertFalse(self.side != 0)
        self.assertFalse(self.side != side.Side(0))

* Sun 14 Dec 2014 03:35:11 AM JST
    def test___add__(self, ):
        expects = 1
        got = self.side + 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side + side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side + '1'

    def test___sub__(self, ):
        expects = -1
        got = self.side - 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side - side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side - '1'

    def test___mul__(self, ):
        expects = 0
        got = self.side * 2
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side * side.Side(2)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side * '1'

    def test___div__(self, ):
        expects = 0
        got = self.side / 2
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side / side.Side(2)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side / '1'

    def test___pow__(self, ):
        expects = 0
        got = self.side ** 2
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side ** side.Side(2)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side ** '1'

    def test___and__(self, ):
        expects = 0
        got = self.side & 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side & side.Side(2)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side & '1'

    def test___xor__(self, ):
        expects = 1
        got = self.side ^ 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side ^ side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side ^ '1'

    def test___or__(self, ):
        expects = 1
        got = self.side | 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side | side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side | '1'

    def test___lshift__(self, ):
        expects = 0
        got = self.side << 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side << side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side << '1'

    def test___rshift__(self, ):
        expects = 0
        got = self.side >> 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side >> side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side >> '1'

    def test___neg__(self, ):
        expects = -1
        self.side = side.Side(1)
        got = -self.side
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)

    def test___pos__(self, ):
        expects = -1
        self.side = side.Side(-1)
        got = +self.side
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)

    def test___invert__(self, ):
        expects = -2
        self.side = side.Side(1)
        got = ~self.side
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)

    def test___iadd__(self, ):
        expects = 1
        self.side +=  1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        expects += 1
        self.side += side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side += '1'

    def test___isub__(self, ):
        expects = -1
        self.side -=  1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        expects -= 1
        self.side -= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side -= '1'

    def test___imul__(self, ):
        expects = 0
        self.side *=  1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        expects *= 1
        self.side *= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side *= '1'

    def test___idiv__(self, ):
        expects = 0
        self.side /=  1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        expects /= 1
        self.side /= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side /= '1'

    def test___ipow__(self, ):
        expects = 0
        self.side **=  1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        expects **= 1
        self.side **= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side **= '1'

    def test___iand__(self, ):
        expects = 0
        self.side &= 1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        self.side &= side.Side(2)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side &= '1'

    def test___ixor__(self, ):
        expects = 1
        self.side ^= 1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        self.side ^= side.Side(1)
        self.assertEqual(0, self.side)
        #
        with self.assertRaises(TypeError):
            self.side ^= '1'

    def test___ior__(self, ):
        expects = 1
        self.side |= 1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        self.side |= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side |= '1'

    def test___ilshift__(self, ):
        expects = 0
        self.side <<= 1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        self.side <<= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side <<= '1'

    def test___irshift__(self, ):
        expects = 0
        self.side >>= 1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        self.side >>= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side >>= '1'

* Sun 14 Dec 2014 03:35:25 AM JST
pass
* Sun 14 Dec 2014 03:35:33 AM JST
        pass
* Sun 14 Dec 2014 03:35:41 AM JST
        pass


* Sun 14 Dec 2014 03:35:50 AM JST
        pass

* Sun 14 Dec 2014 03:37:34 AM JST
slf.
* Sun 14 Dec 2014 03:37:46 AM JST
pass
* Sun 14 Dec 2014 03:38:59 AM JST
pass
* Sun 14 Dec 2014 03:39:21 AM JST
Height
* Sun 14 Dec 2014 03:42:05 AM JST
        self.assertEqual(0, cmp(self.height, Height(self.default)))
        self.assertNotEqual(0, cmp(self.height, Width()))

* Sun 14 Dec 2014 03:42:44 AM JST

* Sun 14 Dec 2014 03:42:45 AM JST

* Sun 14 Dec 2014 03:42:45 AM JST
        self.assertTrue(0, cmp(self.height, Height(self.default)))

* Sun 14 Dec 2014 03:42:45 AM JST
        self.assertTrue(0, cmp(self.height, Height(self.default)))

* Sun 14 Dec 2014 03:42:45 AM JST
        self.assertTrue(0, cmp(self.height, Height(self.default)))
        self.assertNotEqual(0, cmp(self.height, Width()))

* Sun 14 Dec 2014 03:43:25 AM JST
pass
* Sun 14 Dec 2014 03:43:28 AM JST
self.assertFalse(self.height < self.width)
* Sun 14 Dec 2014 03:43:34 AM JST
self.assertFalse(self.height <= self.width)
* Sun 14 Dec 2014 03:43:41 AM JST
self.assertFalse(self.height > self.width)
* Sun 14 Dec 2014 03:43:49 AM JST
self.assertFalse(self.height >= self.width)
* Sun 14 Dec 2014 03:44:00 AM JST
self.assertFalse(self.height == self.width)
* Sun 14 Dec 2014 03:45:11 AM JST
from xahk2.obj.side import *
* Sun 14 Dec 2014 03:45:18 AM JST
Heigh(0)
* Sun 14 Dec 2014 03:52:49 AM JST
pas
* Sun 14 Dec 2014 03:53:35 AM JST
        with self.assertRaises(TypeError):
            self.height + self.width


* Sun 14 Dec 2014 03:53:56 AM JST
        with self.assertRaises(TypeError):
            self.height / self.width


* Sun 14 Dec 2014 03:54:21 AM JST
        with self.assertRaises(TypeError):
            self.height & self.width


* Sun 14 Dec 2014 03:54:30 AM JST
        with self.assertRaises(TypeError):
            self.height ^ self.width


* Sun 14 Dec 2014 03:54:41 AM JST
        with self.assertRaises(TypeError):
            self.height | self.width


* Sun 14 Dec 2014 03:54:48 AM JST
        with self.assertRaises(TypeError):
            self.height << self.width


* Sun 14 Dec 2014 03:55:09 AM JST
        with self.assertRaises(TypeError):
            self.height >> self.width


* Sun 14 Dec 2014 03:55:18 AM JST
        with self.assertRaises(TypeError):
            self.height += self.width


* Sun 14 Dec 2014 03:55:26 AM JST
        with self.assertRaises(TypeError):
            self.height -= self.width


* Sun 14 Dec 2014 03:55:41 AM JST
        with self.assertRaises(TypeError):
            self.height /= self.width


* Sun 14 Dec 2014 03:55:49 AM JST
        with self.assertRaises(TypeError):
            self.height **= self.width


* Sun 14 Dec 2014 03:56:00 AM JST
        with self.assertRaises(TypeError):
            self.height &= self.width


* Sun 14 Dec 2014 04:01:39 AM JST
TestHeight
* Sun 14 Dec 2014 04:49:33 AM JST
Get()
* Sun 14 Dec 2014 04:49:57 AM JST
s=wx.Size(100,0)
* Sun 14 Dec 2014 05:07:29 AM JST

class Size:
    """Class Size
    """
    # Attributes:
    width = None  # (Width) 
    height = None  # (Height) 
    
    # Operations
    def get_height(self):
        """function get_height
        
        returns Height
        """
        return None # should raise NotImplementedError()
    
    def set_height(self, height):
        """function set_height
        
        height: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_width(self):
        """function get_width
        
        returns Width
        """
        return None # should raise NotImplementedError()
    
    def set_width(self, width):
        """function set_width
        
        width: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set(self, *args, **kwargs):
        """function set
        
        *args: 
        **kwargs: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get(self):
        """function get
        
        returns tuple
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __len__(self):
        """function __len__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, key):
        """function __getitem__
        
        key: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, index, val):
        """function __setitem__
        
        index: 
        val: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __nonzero__(self):
        """function __nonzero__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __add__(self, other):
        """function __add__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __sub__(self, other):
        """function __sub__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 14 Dec 2014 05:09:16 AM JST

* Sun 14 Dec 2014 05:09:16 AM JST

* Sun 14 Dec 2014 05:09:16 AM JST
        self._args = args

* Sun 14 Dec 2014 05:09:16 AM JST
        self._args = args

* Sun 14 Dec 2014 05:09:16 AM JST
        self._args = args
        self._kwargs = kwargs

* Sun 14 Dec 2014 05:09:29 AM JST
None  # (Width) 
* Sun 14 Dec 2014 05:09:35 AM JST
None  # (Height) 
* Sun 14 Dec 2014 05:18:59 AM JST
100,
* Sun 14 Dec 2014 05:19:45 AM JST
Size(100,h=0)
* Sun 14 Dec 2014 05:20:03 AM JST
Size(h=0)
* Sun 14 Dec 2014 05:20:14 AM JST
Size(100, height=0)
* Sun 14 Dec 2014 05:20:29 AM JST
Size(100)
* Sun 14 Dec 2014 05:20:35 AM JST
Size(100, 0)
* Sun 14 Dec 2014 05:27:45 AM JST
2 < len(args) + len(kwargs)
* Sun 14 Dec 2014 05:28:18 AM JST
                
* Sun 14 Dec 2014 05:32:00 AM JST
or 
* Sun 14 Dec 2014 05:32:01 AM JST
height or 
* Sun 14 Dec 2014 05:32:03 AM JST
or 
* Sun 14 Dec 2014 05:32:04 AM JST
width or 
* Sun 14 Dec 2014 05:35:25 AM JST
if width is None
* Sun 14 Dec 2014 05:35:30 AM JST
raise TypeError("'width is an invalid keyward argument.'")
* Sun 14 Dec 2014 05:36:37 AM JST
        self.width = side.Width(width)
        self.height = side.Height(height)

* Sun 14 Dec 2014 05:36:45 AM JST
width
* Sun 14 Dec 2014 05:36:46 AM JST
height
* Sun 14 Dec 2014 05:37:35 AM JST
if width is not None:
* Sun 14 Dec 2014 05:37:42 AM JST
width
* Sun 14 Dec 2014 05:38:05 AM JST
        arglen = len(args) + len(kwargs)
        if 2 < arglen:
            raise TypeError('{} take at most 2 arguments ({} given)'
                            .format(self.__class__.__name__, arglen))
        width, height = kwargs.get('width', None), kwargs.get('height', None)
        # parse args
        if args:
            # Size(100, width=100)
            if width is None:
                raise TypeError("'width is an invalid keyward argument.'")
            width = args[0]
        if len(args) == 2:
            height = args[1]
        if width is not None:
            self.width.set(width)
        if height is not None:
            self.height.set(height)

* Sun 14 Dec 2014 05:40:25 AM JST
raise TypeError("'width is an invalid keyward argument.'")
* Sun 14 Dec 2014 05:41:45 AM JST
width is not None
* Sun 14 Dec 2014 05:41:55 AM JST
raise TypeError("'width is an invalid keyward argument.'")
* Sun 14 Dec 2014 05:42:00 AM JST

* Sun 14 Dec 2014 05:42:00 AM JST

* Sun 14 Dec 2014 05:42:00 AM JST
        # Size(100, width=100)

* Sun 14 Dec 2014 05:42:21 AM JST
None # should raise NotImplementedError()
* Sun 14 Dec 2014 05:43:43 AM JST
Size(width=100, height=100)
* Sun 14 Dec 2014 05:43:46 AM JST
Size(100, height=100)
* Sun 14 Dec 2014 05:43:51 AM JST
Size(height=100)
* Sun 14 Dec 2014 05:43:55 AM JST
Size(100)
* Sun 14 Dec 2014 05:44:01 AM JST
Size(100, 100)
* Sun 14 Dec 2014 05:52:03 AM JST
        Size(width=100, height=100)
        Size(100, height=100)
        Size(height=100)
        Size(100)
        Size(100, 100)

* Sun 14 Dec 2014 05:52:28 AM JST
Size
* Sun 14 Dec 2014 05:52:29 AM JST
Size
* Sun 14 Dec 2014 05:52:29 AM JST
Size
* Sun 14 Dec 2014 05:52:29 AM JST
Size
* Sun 14 Dec 2014 05:52:29 AM JST
Size
* Sun 14 Dec 2014 05:53:01 AM JST
None # should raise NotImplementedError()
* Sun 14 Dec 2014 05:56:05 AM JST
None # should raise NotImplementedError()
* Sun 14 Dec 2014 05:56:21 AM JST
return None # should raise NotImplementedError()
* Sun 14 Dec 2014 05:56:36 AM JST
None # should raise NotImplementedError()
* Sun 14 Dec 2014 05:57:23 AM JST
return None # should raise NotImplementedError()
* Sun 14 Dec 2014 05:57:56 AM JST
set
* Sun 14 Dec 2014 05:58:05 AM JST
set
* Sun 14 Dec 2014 05:59:35 AM JST
None # should raise NotImplementedError()
* Sun 14 Dec 2014 06:00:13 AM JST
None # should raise NotImplementedError()
* Sun 14 Dec 2014 06:00:25 AM JST
None # should raise NotImplementedError()
* Sun 14 Dec 2014 06:00:36 AM JST
key
* Sun 14 Dec 2014 06:00:39 AM JST
key
* Sun 14 Dec 2014 06:00:44 AM JST
key
* Sun 14 Dec 2014 06:01:08 AM JST
width.
* Sun 14 Dec 2014 06:01:53 AM JST
None # should raise NotImplementedError()
* Sun 14 Dec 2014 06:55:18 AM JST
return 
* Sun 14 Dec 2014 06:55:21 AM JST
None # should raise NotImplementedError()
* Sun 14 Dec 2014 06:57:25 AM JST
tup[0]
* Sun 14 Dec 2014 06:57:43 AM JST
None # should raise NotImplementedError()
* Sun 14 Dec 2014 07:00:13 AM JST
Size
* Sun 14 Dec 2014 07:05:02 AM JST
Size
* Sun 14 Dec 2014 07:05:03 AM JST
wx.Size
* Sun 14 Dec 2014 07:06:31 AM JST
other
* Sun 14 Dec 2014 07:06:46 AM JST

* Sun 14 Dec 2014 07:06:46 AM JST

* Sun 14 Dec 2014 07:06:46 AM JST
        tup = tuple(other)

* Sun 14 Dec 2014 07:08:05 AM JST
None # should raise NotImplementedError()
* Sun 14 Dec 2014 07:11:53 AM JST
        width = self.width + other[0]
        height = self.height + other[1]
        return self.__class__(width, height)

* Sun 14 Dec 2014 07:16:41 AM JST
        width = self.width - other[0]
        height = self.height - other[1]
        return self.__class__(width, height)

* Sun 14 Dec 2014 07:16:50 AM JST
width = 
* Sun 14 Dec 2014 07:16:56 AM JST
height = 
* Sun 14 Dec 2014 07:17:02 AM JST
.__class__(width, height)
* Sun 14 Dec 2014 07:17:15 AM JST
        self.width += other[0]
        self.height += other[1]
        return self

* Sun 14 Dec 2014 07:28:05 AM JST
self.get()
* Sun 14 Dec 2014 07:31:10 AM JST
key
* Sun 14 Dec 2014 07:46:52 AM JST
asser
* Sun 14 Dec 2014 07:46:53 AM JST
self.asser
* Sun 14 Dec 2014 07:47:10 AM JST
self.assertEqual(expects, self.size.get_height())
* Sun 14 Dec 2014 07:47:33 AM JST
self.
* Sun 14 Dec 2014 07:47:37 AM JST
self.assertEqual(expects, self.size.get_height())
* Sun 14 Dec 2014 07:48:09 AM JST
assert
* Sun 14 Dec 2014 07:48:23 AM JST
self.assertEqual(expects, self.size.get_width())
* Sun 14 Dec 2014 07:52:25 AM JST

* Sun 14 Dec 2014 07:52:33 AM JST
self.size.set(width=100, height=100)
* Sun 14 Dec 2014 07:52:36 AM JST
width=
* Sun 14 Dec 2014 07:52:47 AM JST
        self.assertEqual(100, self.size.get_width())
        self.assertEqual(100, self.size.get_height())

* Sun 14 Dec 2014 07:52:57 AM JST
self.size.set(200, height=200)
* Sun 14 Dec 2014 07:53:05 AM JST
200, 
* Sun 14 Dec 2014 07:53:09 AM JST
self.assertEqual(200, self.size.get_height())
* Sun 14 Dec 2014 07:53:25 AM JST
self.size.set(height=300)
* Sun 14 Dec 2014 07:53:27 AM JST
height=
* Sun 14 Dec 2014 07:53:34 AM JST
self.assertEqual(200, self.size.get_width())
* Sun 14 Dec 2014 07:53:53 AM JST
self.size.set(400)
* Sun 14 Dec 2014 07:54:04 AM JST
        self.assertEqual(200, self.size.get_width())
        self.assertEqual(200, self.size.get_height())

* Sun 14 Dec 2014 07:55:21 AM JST
        self.assertEqual(500, self.size.get_width())
        self.assertEqual(500, self.size.get_height())

* Sun 14 Dec 2014 08:00:10 AM JST
self.
* Sun 14 Dec 2014 08:02:19 AM JST
got
* Sun 14 Dec 2014 08:02:59 AM JST
__nonzero__
* Sun 14 Dec 2014 08:03:11 AM JST
__eq__
* Sun 14 Dec 2014 08:03:21 AM JST
__ne__
* Sun 14 Dec 2014 08:03:30 AM JST
__add__
* Sun 14 Dec 2014 08:03:39 AM JST
__sub__
* Sun 14 Dec 2014 08:03:48 AM JST
__iadd__
* Sun 14 Dec 2014 08:03:58 AM JST
__isub__
* Sun 14 Dec 2014 08:04:08 AM JST
__iter__
* Sun 14 Dec 2014 08:04:16 AM JST
__delitem__
* Sun 14 Dec 2014 08:57:51 AM JST
pass
* Sun 14 Dec 2014 08:58:17 AM JST
pass
* Sun 14 Dec 2014 08:58:26 AM JST
        
* Sun 14 Dec 2014 08:58:55 AM JST

* Sun 14 Dec 2014 09:29:09 AM JST
        expects1 = 0
        expects2 = 0
        self.assertEqual(expects1, self.size[0])
        self.assertEqual(expects2, self.size[1])

* Sun 14 Dec 2014 09:30:24 AM JST
pass
* Sun 14 Dec 2014 09:31:08 AM JST
self.size
* Sun 14 Dec 2014 09:31:27 AM JST
pass
* Sun 14 Dec 2014 09:32:06 AM JST

* Sun 14 Dec 2014 09:33:07 AM JST
        
* Sun 14 Dec 2014 09:33:51 AM JST
pass
* Sun 14 Dec 2014 09:35:26 AM JST
self.
* Sun 14 Dec 2014 09:35:27 AM JST
self.assertEqual((10, 10), got)
* Sun 14 Dec 2014 09:35:55 AM JST
self.assertIsInstance(got, Size)
* Sun 14 Dec 2014 09:37:10 AM JST
        got = self.size + (10, 10)
        self.assertIsInstance(got, Size)
        self.assertEqual((10, 10), got)
        got = self.size + Size(10, 10)
        self.assertIsInstance(got, Size)
        self.assertEqual((10, 10), got)

* Sun 14 Dec 2014 09:39:34 AM JST
        got = self.size + (10, 10)
        self.assertIsInstance(got, Size)
        self.assertEqual((10, 10), got)
        got = self.size + Size(10, 10)
        self.assertIsInstance(got, Size)
        self.assertEqual((10, 10), got)

* Sun 14 Dec 2014 09:39:54 AM JST
got = 
* Sun 14 Dec 2014 09:40:00 AM JST
got
* Sun 14 Dec 2014 09:40:03 AM JST

* Sun 14 Dec 2014 09:40:03 AM JST

* Sun 14 Dec 2014 09:40:03 AM JST
        self.assertIsInstance(self., Size)

* Sun 14 Dec 2014 09:40:05 AM JST
got
* Sun 14 Dec 2014 09:40:14 AM JST
got = 
* Sun 14 Dec 2014 09:40:15 AM JST

* Sun 14 Dec 2014 09:40:15 AM JST

* Sun 14 Dec 2014 09:40:15 AM JST
        self.assertIsInstance(got, Size)

* Sun 14 Dec 2014 09:40:20 AM JST
got
* Sun 14 Dec 2014 09:40:39 AM JST
        self.size += (10, 10)
        self.assertEqual((10, 10), self.size)
        self.size += Size(10, 10)
        self.assertEqual((20, 20), self.size)

* Sun 14 Dec 2014 09:41:43 AM JST
pass
* Sun 14 Dec 2014 09:42:07 AM JST
self.size += (10, 10)
* Sun 14 Dec 2014 09:45:33 AM JST
pass
* Sun 14 Dec 2014 09:45:38 AM JST
self.size += (10, 20)
* Sun 14 Dec 2014 09:45:42 AM JST
self.
* Sun 14 Dec 2014 09:46:31 AM JST
self.assertEqual(0, self.size[0])
* Sun 14 Dec 2014 10:23:57 AM JST
class Coordinate:
    """Class Coordinate
    """
    # Attributes:
    value = None  # () 
    
    # Operations
    def get(self):
        """function get
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def set(self, value):
        """function set
        
        value: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __cmp__(self, other):
        """function __cmp__
        
        other: 
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __lt__(self, other):
        """function __lt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __le__(self, other):
        """function __le__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __gt__(self, other):
        """function __gt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ge__(self, other):
        """function __ge__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __hash__(self):
        """function __hash__
        
        returns long
        """
        return None # should raise NotImplementedError()
    
    def __nonzero__(self):
        """function __nonzero__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __add__(self, other):
        """function __add__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __sub__(self, other):
        """function __sub__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __mul__(self, other):
        """function __mul__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __div__(self, other):
        """function __div__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __pow__(self, other):
        """function __pow__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __and__(self, other):
        """function __and__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __xor__(self, other):
        """function __xor__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __or__(self, other):
        """function __or__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __lshift__(self, other):
        """function __lshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rshift__(self, other):
        """function __rshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __neg__(self):
        """function __neg__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __pos__(self):
        """function __pos__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __invert__(self, other):
        """function __invert__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __iadd__(self, other):
        """function __iadd__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __isub__(self, other):
        """function __isub__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __imul__(self, other):
        """function __imul__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __idiv__(self, other):
        """function __idiv__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ipow__(self, other):
        """function __ipow__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __iand__(self, other):
        """function __iand__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ixor__(self, other):
        """function __ixor__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ior__(self, other):
        """function __ior__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ilshift__(self, other):
        """function __ilshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __irshift__(self, other):
        """function __irshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __int__(self):
        """function __int__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __long__(self):
        """function __long__
        
        returns long
        """
        return None # should raise NotImplementedError()
    
    def __float__(self):
        """function __float__
        
        returns float
        """
        return None # should raise NotImplementedError()
    
    def __complex__(self):
        """function __complex__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __oct__(self):
        """function __oct__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __hex__(self):
        """function __hex__
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 14 Dec 2014 10:24:08 AM JST
class XCoordinate(Coordinate):
    """Class XCoordinate
    """
    # Attributes:
    val = None  # () 
    
    # Operations


* Sun 14 Dec 2014 10:24:16 AM JST
class YCoordinate(Coordinate):
    """Class YCoordinate
    """
    # Attributes:
    val = None  # () 
    
    # Operations


* Sun 14 Dec 2014 10:25:09 AM JST
    def __init__(self, value=0):
        r"""

        @Arguments:
        - `value`:
        """
        self._value = None
        self.set(value)

    # Operations
    def get(self):
        """function get

        returns int
        """
        return self._value

    def set(self, value):
        """function set

        @Arguments:
        - `value`:

        @Return: None

        @Error: TypeError
        """
        self._value = int(value)

    def __repr__(self):
        """function __repr__

        returns str
        """
        return '{0.__class__.__name__}({0._value})'.format(self)

    def __str__(self):
        """function __str__

        returns str
        """
        return str(self._value)

    def _cast(self, other):
        r"""SUMMARY

        _cast(other)

        @Arguments:
        - `other`:

        @Return:

        @Error:
        """
        if isinstance(other, (int, self.__class__)):
            return int(other)
        return other

    def __cmp__(self, other):
        """function __cmp__

        other:

        returns int
        """
        return cmp(self._value, self._cast(other))

    def __lt__(self, other):
        """function __lt__

        other:

        returns bool
        """
        return self._value < self._cast(other)

    def __le__(self, other):
        """function __le__

        other:

        returns bool
        """
        return self._value <= self._cast(other)

    def __gt__(self, other):
        """function __gt__

        other:

        returns bool
        """
        return self._value > self._cast(other)

    def __ge__(self, other):
        """function __ge__

        other:

        returns bool
        """
        return self._value >= self._cast(other)

    def __eq__(self, other):
        """function __eq__

        other:

        returns bool
        """
        return self._value == self._cast(other)

    def __ne__(self, other):
        """function __ne__

        other:

        returns bool
        """
        return self._value != self._cast(other)

    def __hash__(self):
        """function __hash__

        returns long
        """
        return hash(self._value)

    def __nonzero__(self):
        """function __nonzero__

        returns bool
        """
        return bool(self._value)

    def __add__(self, other):
        """function __add__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            return self.__class__(self._value + int(other))
        raise TypeError("unsupported operand type(s) for +: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __sub__(self, other):
        """function __sub__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            return self.__class__(self._value - int(other))
        raise TypeError("unsupported operand type(s) for -: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __mul__(self, other):
        """function __mul__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            return self.__class__(self._value * int(other))
        raise TypeError("unsupported operand type(s) for *: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __div__(self, other):
        """function __div__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            return self.__class__(self._value / int(other))
        raise TypeError("unsupported operand type(s) for /: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __pow__(self, other):
        """function __pow__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            return self.__class__(self._value ** int(other))
        raise TypeError("unsupported operand type(s) for **: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __and__(self, other):
        """function __and__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            return self.__class__(self._value & int(other))
        raise TypeError("unsupported operand type(s) for &: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __xor__(self, other):
        """function __xor__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            return self.__class__(self._value ^ int(other))
        raise TypeError("unsupported operand type(s) for ^: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __or__(self, other):
        """function __or__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            return self.__class__(self._value | int(other))
        raise TypeError("unsupported operand type(s) for |: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __lshift__(self, other):
        """function __lshift__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            return self.__class__(self._value << int(other))
        raise TypeError("unsupported operand type(s) for : '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __rshift__(self, other):
        """function __rshift__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            return self.__class__(self._value >> int(other))
        raise TypeError("unsupported operand type(s) for : '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __neg__(self):
        """function __neg__

        returns
        """
        self._value = self._cast(-self._value)
        return self

    def __pos__(self):
        """function __pos__

        returns
        """
        self._value = self._cast(+self._value)
        return self

    def __invert__(self, ):
        """function __invert__

        returns
        """
        self._value = self._cast(~self._value)
        return self

    def __iadd__(self, other):
        """function __iadd__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            self._value += int(other)
            return self
        raise TypeError("unsupported operand type(s) for +=: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __isub__(self, other):
        """function __isub__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            self._value -= int(other)
            return self
        raise TypeError("unsupported operand type(s) for -=: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __imul__(self, other):
        """function __imul__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            self._value *= int(other)
            return self
        raise TypeError("unsupported operand type(s) for *=: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __idiv__(self, other):
        """function __idiv__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            self._value /= int(other)
            return self
        raise TypeError("unsupported operand type(s) for /=: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __ipow__(self, other):
        """function __ipow__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            self._value **= int(other)
            return self
        raise TypeError("unsupported operand type(s) for **=: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __iand__(self, other):
        """function __iand__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            self._value &= int(other)
            return self
        raise TypeError("unsupported operand type(s) for &=: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __ixor__(self, other):
        """function __ixor__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            self._value ^= int(other)
            return self
        raise TypeError("unsupported operand type(s) for ^=: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __ior__(self, other):
        """function __ior__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            self._value |= int(other)
            return self
        raise TypeError("unsupported operand type(s) for |=: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __ilshift__(self, other):
        """function __ilshift__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            self._value <<= int(other)
            return self
        raise TypeError("unsupported operand type(s) for <<=: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __irshift__(self, other):
        """function __irshift__

        other:

        returns
        """
        if isinstance(other, (int, self.__class__)):
            self._value >>= int(other)
            return self
        raise TypeError("unsupported operand type(s) for >>=: '{}' and '{}'"
                  .format(self.__class__.__name__, other.__class__.__name__))

    def __int__(self):
        """function __int__

        returns int
        """
        return self._value

    def __long__(self):
        """function __long__

        returns long
        """
        return long(self._value)

    def __float__(self):
        """function __float__

        returns float
        """
        return float(self._value)

    def __complex__(self):
        """function __complex__

        returns
        """
        return complex(self._value)

    def __oct__(self):
        """function __oct__

        returns
        """
        return oct(self._value)

    def __hex__(self):
        """function __hex__

        returns
        """
        return hex(self._value)

* Sun 14 Dec 2014 10:29:24 AM JST
from mocker import *
from xahk2.xobj import side, Height, Width


class TestSide(MockerTestCase):
    @classmethod
    def setUpClass(cls):
        cls.default = 0

    def setUp(self):
        self.side = side.Side(self.default)
        self.mocker.replay()

    def test_get(self, ):
        self.assertEqual(self.default, self.side.get())

    def test_set(self, ):
        expects = 1
        self.side.set(expects)
        self.assertEqual(expects, self.side.get())
        with self.assertRaises(Exception):
            self.side.set('a')
        with self.assertRaises(Exception):
            self.side.set(object)

    def test___repr__(self, ):
        expects = '{}({})'.format(self.side.__class__.__name__, self.default)
        self.assertEqual(expects, repr(self.side))

    def test___str__(self, ):
        expects = str(self.default)
        self.assertEqual(expects, str(self.side))

    def test__cast(self, ):
        self.assertIsInstance(self.side._cast(1), int)
        self.assertIsInstance(self.side._cast(side.Side(0)), int)
        self.assertIsInstance(self.side._cast('1'), str)

    def test___cmp__(self, ):
        self.assertEqual(cmp(self.side, 0), 0)
        self.assertEqual(cmp(self.side, 1), -1)
        self.assertEqual(cmp(self.side, -1), 1)
        self.assertEqual(cmp(self.side, side.Side(0)), 0)
        self.assertEqual(cmp(self.side, side.Side(1)), -1)
        self.assertEqual(cmp(self.side, side.Side(-1)), 1)

    def test___lt__(self, ):
        self.assertTrue(self.side < 1)
        self.assertTrue(self.side < side.Side(1))
        self.assertFalse(self.side < -1)
        self.assertFalse(self.side < side.Side(-1))

    def test___le__(self, ):
        self.assertTrue(self.side <= 1)
        self.assertTrue(self.side <= side.Side(1))
        self.assertTrue(self.side <= 0)
        self.assertTrue(self.side <= side.Side(0))
        self.assertFalse(self.side <= -1)
        self.assertFalse(self.side <= side.Side(-1))

    def test___gt__(self, ):
        self.assertTrue(self.side > -1)
        self.assertTrue(self.side > side.Side(-1))
        self.assertFalse(self.side > 1)
        self.assertFalse(self.side > side.Side(1))

    def test___ge__(self, ):
        self.assertTrue(self.side >= -1)
        self.assertTrue(self.side >= side.Side(-1))
        self.assertTrue(self.side >= 0)
        self.assertTrue(self.side >= side.Side(0))
        self.assertFalse(self.side >= 1)
        self.assertFalse(self.side >= side.Side(1))

    def test___eq__(self, ):
        self.assertTrue(self.side == 0)
        self.assertTrue(self.side == side.Side(0))
        self.assertFalse(self.side == 1)
        self.assertFalse(self.side == side.Side(1))

    def test___ne__(self, ):
        self.assertTrue(self.side != 1)
        self.assertTrue(self.side != side.Side(1))
        self.assertFalse(self.side != 0)
        self.assertFalse(self.side != side.Side(0))

    def test___hash__(self, ):
        self.assertEqual(hash(0), hash(self.side))
        self.assertEqual(hash(1), hash(side.Side(1)))

    def test___nonzero__(self, ):
        self.assertFalse(self.side)
        self.assertTrue(side.Side(1))

    def test___add__(self, ):
        expects = 1
        got = self.side + 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side + side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side + '1'

    def test___sub__(self, ):
        expects = -1
        got = self.side - 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side - side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side - '1'

    def test___mul__(self, ):
        expects = 0
        got = self.side * 2
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side * side.Side(2)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side * '1'

    def test___div__(self, ):
        expects = 0
        got = self.side / 2
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side / side.Side(2)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side / '1'

    def test___pow__(self, ):
        expects = 0
        got = self.side ** 2
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side ** side.Side(2)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side ** '1'

    def test___and__(self, ):
        expects = 0
        got = self.side & 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side & side.Side(2)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side & '1'

    def test___xor__(self, ):
        expects = 1
        got = self.side ^ 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side ^ side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side ^ '1'

    def test___or__(self, ):
        expects = 1
        got = self.side | 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side | side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side | '1'

    def test___lshift__(self, ):
        expects = 0
        got = self.side << 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side << side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side << '1'

    def test___rshift__(self, ):
        expects = 0
        got = self.side >> 1
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)
        #
        got = self.side >> side.Side(1)
        self.assertEqual(expects, got)
        #
        with self.assertRaises(TypeError):
            self.side >> '1'

    def test___neg__(self, ):
        expects = -1
        self.side = side.Side(1)
        got = -self.side
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)

    def test___pos__(self, ):
        expects = -1
        self.side = side.Side(-1)
        got = +self.side
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)

    def test___invert__(self, ):
        expects = -2
        self.side = side.Side(1)
        got = ~self.side
        self.assertEqual(expects, got)
        self.assertIsInstance(got, side.Side)

    def test___iadd__(self, ):
        expects = 1
        self.side +=  1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        expects += 1
        self.side += side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side += '1'

    def test___isub__(self, ):
        expects = -1
        self.side -=  1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        expects -= 1
        self.side -= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side -= '1'

    def test___imul__(self, ):
        expects = 0
        self.side *=  1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        expects *= 1
        self.side *= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side *= '1'

    def test___idiv__(self, ):
        expects = 0
        self.side /=  1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        expects /= 1
        self.side /= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side /= '1'

    def test___ipow__(self, ):
        expects = 0
        self.side **=  1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        expects **= 1
        self.side **= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side **= '1'

    def test___iand__(self, ):
        expects = 0
        self.side &= 1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        self.side &= side.Side(2)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side &= '1'

    def test___ixor__(self, ):
        expects = 1
        self.side ^= 1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        self.side ^= side.Side(1)
        self.assertEqual(0, self.side)
        #
        with self.assertRaises(TypeError):
            self.side ^= '1'

    def test___ior__(self, ):
        expects = 1
        self.side |= 1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        self.side |= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side |= '1'

    def test___ilshift__(self, ):
        expects = 0
        self.side <<= 1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        self.side <<= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side <<= '1'

    def test___irshift__(self, ):
        expects = 0
        self.side >>= 1
        self.assertEqual(expects, self.side)
        self.assertIsInstance(self.side, side.Side)
        #
        self.side >>= side.Side(1)
        self.assertEqual(expects, self.side)
        #
        with self.assertRaises(TypeError):
            self.side >>= '1'

    def test___int__(self, ):
        self.assertEqual(0, int(self.side))
        self.assertIsInstance(int(self.side), int)

    def test___long__(self, ):
        self.assertEqual(0, long(self.side))
        self.assertIsInstance(long(self.side), long)

    def test___float__(self, ):
        self.assertEqual(0.0, float(self.side))
        self.assertIsInstance(float(self.side), float)

    def test___complex__(self, ):
        self.assertEqual(complex(0), complex(self.side))
        self.assertIsInstance(complex(self.side), complex)

    def test___oct__(self, ):
        self.assertEqual(oct(0), oct(self.side))

    def test___hex__(self, ):
        self.assertEqual(hex(0), hex(self.side))

    def test_null_arg(self, ):
        sideobj = side.Side()
        self.assertEqual(0, sideobj)

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass


class TestHeight(MockerTestCase):
    """2014/12/14"""
    @classmethod
    def setUpClass(cls):
        cls.default = 0

    def setUp(self):
        self.target = Height(self.default)
        self.other = Width(self.default)
        self.mocker.replay()

    def test___add__(self, ):
        with self.assertRaises(TypeError):
            self.target + self.other

    def test___sub__(self, ):
        with self.assertRaises(TypeError):
            self.target - self.other

    def test___mul__(self, ):
        with self.assertRaises(TypeError):
            self.target * self.other

    def test___div__(self, ):
        with self.assertRaises(TypeError):
            self.target / self.other

    def test___pow__(self, ):
        with self.assertRaises(TypeError):
            self.target ** self.other

    def test___and__(self, ):
        with self.assertRaises(TypeError):
            self.target & self.other

    def test___xor__(self, ):
        with self.assertRaises(TypeError):
            self.target ^ self.other

    def test___or__(self, ):
        with self.assertRaises(TypeError):
            self.target | self.other

    def test___lshift__(self, ):
        with self.assertRaises(TypeError):
            self.target << self.other

    def test___rshift__(self, ):
        with self.assertRaises(TypeError):
            self.target >> self.other

    def test___iadd__(self, ):
        with self.assertRaises(TypeError):
            self.target += self.other

    def test___isub__(self, ):
        with self.assertRaises(TypeError):
            self.target -= self.other

    def test___imul__(self, ):
        with self.assertRaises(TypeError):
            self.target *= self.other

    def test___idiv__(self, ):
        with self.assertRaises(TypeError):
            self.target /= self.other

    def test___ipow__(self, ):
        with self.assertRaises(TypeError):
            self.target **= self.other

    def test___iand__(self, ):
        with self.assertRaises(TypeError):
            self.target &= self.other

    def test___ixor__(self, ):
        with self.assertRaises(TypeError):
            self.target ^= self.other

    def test___ior__(self, ):
        with self.assertRaises(TypeError):
            self.target |= self.other

    def test___ilshift__(self, ):
        with self.assertRaises(TypeError):
            self.target <<= self.other

    def test___irshift__(self, ):
        with self.assertRaises(TypeError):
            self.target >>= self.other

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass


class TestWidth(TestHeight):
    """2014/12/14"""

    def setUp(self):
        self.target = Width(self.default)
        self.other = Height(self.default)
        self.mocker.replay()

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass

* Sun 14 Dec 2014 10:29:48 AM JST
side
* Sun 14 Dec 2014 10:29:59 AM JST
coordinate
* Sun 14 Dec 2014 10:30:10 AM JST
Height
* Sun 14 Dec 2014 10:30:13 AM JST
Widt
* Sun 14 Dec 2014 10:30:36 AM JST
Coordinate
* Sun 14 Dec 2014 10:31:50 AM JST
Height
* Sun 14 Dec 2014 10:31:56 AM JST
Width
* Sun 14 Dec 2014 10:32:11 AM JST
Width
* Sun 14 Dec 2014 10:32:17 AM JST
Height
* Sun 14 Dec 2014 06:04:15 PM JST
    def test_set_float_trancation(self, ):
        self.side.set(1.5)
        self.assertEqual(1, self.side.get())


* Sun 14 Dec 2014 06:04:45 PM JST
side
* Sun 14 Dec 2014 06:04:50 PM JST
side
* Sun 14 Dec 2014 06:16:08 PM JST
Korea, Democratic People's Republic of
* Sun 14 Dec 2014 06:21:46 PM JST
nmap -v -PN -sL -iL tes.list
* Mon 15 Dec 2014 12:29:06 AM JST
self.width * other[0]
* Mon 15 Dec 2014 12:29:14 AM JST
self.height * other[1]
* Mon 15 Dec 2014 12:29:18 AM JST

* Mon 15 Dec 2014 12:29:18 AM JST

* Mon 15 Dec 2014 12:29:18 AM JST
        width = self.width * other[0]

* Mon 15 Dec 2014 12:29:18 AM JST
        width = self.width * other[0]

* Mon 15 Dec 2014 12:29:18 AM JST
        width = self.width * other[0]
        height = self.height * other[1]

* Mon 15 Dec 2014 12:29:30 AM JST
self.width - other[0]
* Mon 15 Dec 2014 12:29:36 AM JST
self.height - other[1]
* Mon 15 Dec 2014 12:29:40 AM JST

* Mon 15 Dec 2014 12:29:40 AM JST

* Mon 15 Dec 2014 12:29:40 AM JST
        width = self.width - other[0]

* Mon 15 Dec 2014 12:29:40 AM JST
        width = self.width - other[0]

* Mon 15 Dec 2014 12:29:40 AM JST
        width = self.width - other[0]
        height = self.height - other[1]

* Mon 15 Dec 2014 12:29:45 AM JST
self.width + other[0]
* Mon 15 Dec 2014 12:29:51 AM JST
self.height + other[1]
* Mon 15 Dec 2014 12:29:55 AM JST

* Mon 15 Dec 2014 12:29:55 AM JST

* Mon 15 Dec 2014 12:29:55 AM JST
        width = self.width + other[0]

* Mon 15 Dec 2014 12:29:55 AM JST
        width = self.width + other[0]

* Mon 15 Dec 2014 12:29:55 AM JST
        width = self.width + other[0]
        height = self.height + other[1]

* Mon 15 Dec 2014 12:30:17 AM JST
self.width * other[0], self.height * other[1]
* Mon 15 Dec 2014 12:30:45 AM JST
        self.width -= other[0]
        self.height -= other[1]
        return self

* Mon 15 Dec 2014 12:31:32 AM JST
        self.width *= other[0]
        self.height *= other[1]
        return self

* Mon 15 Dec 2014 12:32:32 AM JST
(defun py:* (n) ;[2014/02/25]
  "Wrap smart-operator-*.
N"
  (interactive "p")
  (cond ((py:at-string|comment-p) (self-insert-command n))
        ((py:in-parameter-p) (self-insert-command n))
        (t (smart-operator-*))))
* Mon 15 Dec 2014 12:32:40 AM JST
(defun py:- (n) ;[2014/05/14]
  "Wrap smart-operator--.
N"
  (interactive "p")
  (cond (buffer-read-only (my-forward-seq))
        ((py:at-string|comment-p) (self-insert-command n))
        (t (smart-operator--)))
  )
* Mon 15 Dec 2014 12:33:04 AM JST
py:+
* Mon 15 Dec 2014 12:34:31 AM JST
;must bind in smart-operator_plugin_start.el
* Mon 15 Dec 2014 12:37:18 AM JST
  
* Mon 15 Dec 2014 12:38:56 AM JST
(defun py:+ (n) ;[2014/05/14]
  "Wrap smart-operator--.
N"
  (interactive "p")
  (cond (buffer-read-only (my-forward-seq))
        ((py:at-string|comment-p) (self-insert-command n))
        (t (smart-operator-+)))
  )
* Mon 15 Dec 2014 12:39:42 AM JST
(defun py:/ (n) ;[2014/05/14]
  "Wrap smart-operator--.
N"
  (interactive "p")
  (cond (buffer-read-only (my-forward-seq))
        ((py:at-string|comment-p) (self-insert-command n))
        (t (smart-operator-/)))
  )
* Mon 15 Dec 2014 12:41:42 AM JST
http://rgruet.free.fr/PQR26/PQR2.6.html#SpecialMethods
* Mon 15 Dec 2014 12:42:32 AM JST
(defun py:% (n) ;[2014/05/14]
  "Wrap smart-operator--.
N"
  (interactive "p")
  (cond (buffer-read-only (my-forward-seq))
        ((py:at-string|comment-p) (self-insert-command n))
        (t (smart-operator-%)))
  )

* Mon 15 Dec 2014 12:42:45 AM JST
(defun py:> (n) ;[2014/05/14]
  "Wrap smart-operator--.
N"
  (interactive "p")
  (cond (buffer-read-only (my-forward-seq))
        ((py:at-string|comment-p) (self-insert-command n))
        (t (smart-operator->)))
  )
* Mon 15 Dec 2014 12:45:47 AM JST
  
* Mon 15 Dec 2014 12:46:00 AM JST
  
* Mon 15 Dec 2014 12:46:25 AM JST
  
* Mon 15 Dec 2014 12:46:30 AM JST
  
* Mon 15 Dec 2014 12:49:45 AM JST
py:+
* Mon 15 Dec 2014 12:49:59 AM JST
py:/
* Mon 15 Dec 2014 12:50:04 AM JST
py:%
* Mon 15 Dec 2014 12:50:15 AM JST
py:>
* Mon 15 Dec 2014 12:50:21 AM JST
py:<
* Mon 15 Dec 2014 12:50:59 AM JST
py:+, py:/, py:%, py:>, py:<
* Mon 15 Dec 2014 12:51:11 AM JST
py:+
* Mon 15 Dec 2014 12:51:56 AM JST
`self-insert-command' if at string or comment.
* Mon 15 Dec 2014 12:59:34 AM JST
        self.assertIsInstance(got, Size)
        self.assertEqual((-10, -20), got)

* Mon 15 Dec 2014 12:59:39 AM JST
        self.assertIsInstance(got, Size)
        self.assertEqual((20, 60), got)

* Mon 15 Dec 2014 01:08:03 AM JST
from Point import Point

class Point:
    """Class Point
    """
    # Attributes:
    x = None  # (XCoordinate) 
    y = None  # (YCoordinate) 
    
    # Operations
    def get(self):
        """function get
        
        returns tuple
        """
        return None # should raise NotImplementedError()
    
    def set(self, *args, **kwargs):
        """function set
        
        *args: 
        **kwargs: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_x(self):
        """function get_x
        
        returns XCoordinate
        """
        return None # should raise NotImplementedError()
    
    def set_x(self, x):
        """function set_x
        
        x: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_y(self):
        """function get_y
        
        returns YCoordinate
        """
        return None # should raise NotImplementedError()
    
    def set_y(self, y):
        """function set_y
        
        y: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __len__(self):
        """function __len__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self):
        """function __eq__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self):
        """function __ne__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __add__(self):
        """function __add__
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def __sub__(self):
        """function __sub__
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def __iadd__(self, other):
        """function __iadd__
        
        other: 
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def __isub__(self, other):
        """function __isub__
        
        other: 
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, index):
        """function __getitem__
        
        index: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, index, val):
        """function __setitem__
        
        index: 
        val: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Mon 15 Dec 2014 01:08:16 AM JST

* Mon 15 Dec 2014 01:08:16 AM JST

* Mon 15 Dec 2014 01:08:16 AM JST
from Point import Point

* Mon 15 Dec 2014 01:10:05 AM JST

* Mon 15 Dec 2014 01:10:05 AM JST

* Mon 15 Dec 2014 01:10:05 AM JST
        self._args = args

* Mon 15 Dec 2014 01:10:05 AM JST
        self._args = args

* Mon 15 Dec 2014 01:10:05 AM JST
        self._args = args
        self._kwargs = kwargs

* Mon 15 Dec 2014 01:10:47 AM JST
None # should raise NotImplementedError()
* Mon 15 Dec 2014 01:19:52 AM JST
return None # should raise NotImplementedError()
* Mon 15 Dec 2014 01:19:56 AM JST
arglen = len(args) + len(kwargs)
* Mon 15 Dec 2014 01:20:12 AM JST
        if 2 < arglen:
            raise TypeError('{} take at most 2 arguments ({} given)'
                            .format(self.__class__.__name__, arglen))

* Mon 15 Dec 2014 01:20:37 AM JST
width, height = kwargs.get('width', None), kwargs.get('height', None)
* Mon 15 Dec 2014 01:20:41 AM JST
width
* Mon 15 Dec 2014 01:20:44 AM JST
height
* Mon 15 Dec 2014 01:20:47 AM JST
width
* Mon 15 Dec 2014 01:20:52 AM JST
height
* Mon 15 Dec 2014 01:21:09 AM JST
        # parse args
        if args:
            # Size(100, width=100)
            if width is not None:
                raise TypeError("'width is an invalid keyward argument.'")
            width = args[0]

* Mon 15 Dec 2014 01:21:15 AM JST
width
* Mon 15 Dec 2014 01:21:21 AM JST
width
* Mon 15 Dec 2014 01:21:35 AM JST
width
* Mon 15 Dec 2014 01:21:57 AM JST
        if len(args) == 2:
            height = args[1]

* Mon 15 Dec 2014 01:22:05 AM JST
height
* Mon 15 Dec 2014 01:22:12 AM JST
        if width is not None:
            self.set_width(width)

* Mon 15 Dec 2014 01:22:16 AM JST
        if width is not None:
            self.set_width(width)
        if height is not None:
            self.set_height(height)

* Mon 15 Dec 2014 01:22:21 AM JST
width
* Mon 15 Dec 2014 01:22:28 AM JST
width
* Mon 15 Dec 2014 01:22:32 AM JST
height
* Mon 15 Dec 2014 01:22:40 AM JST
height
* Mon 15 Dec 2014 01:22:54 AM JST
None # should raise NotImplementedError()
* Mon 15 Dec 2014 01:23:22 AM JST
return None # should raise NotImplementedError()
* Mon 15 Dec 2014 01:23:33 AM JST
None # should raise NotImplementedError()
* Mon 15 Dec 2014 01:23:41 AM JST
return None # should raise NotImplementedError()
* Mon 15 Dec 2014 01:26:13 AM JST
str((int(self.width), int(self.height)))
* Mon 15 Dec 2014 01:26:17 AM JST
width
* Mon 15 Dec 2014 01:26:19 AM JST
height
* Mon 15 Dec 2014 01:26:27 AM JST
None # should raise NotImplementedError()
* Mon 15 Dec 2014 01:27:10 AM JST
None # should raise NotImplementedError()
* Mon 15 Dec 2014 01:27:33 AM JST
None # should raise NotImplementedError()
* Mon 15 Dec 2014 01:30:10 AM JST
None # should raise NotImplementedError()
* Mon 15 Dec 2014 01:30:39 AM JST
None # should raise NotImplementedError()
* Mon 15 Dec 2014 01:31:06 AM JST
self.__class__(self.x + other[0], self.y + other[1])
* Mon 15 Dec 2014 01:32:19 AM JST
None # should raise NotImplementedError()
* Mon 15 Dec 2014 01:32:25 AM JST
        self.x += other[0]
        self.y += other[1]
        return self

* Mon 15 Dec 2014 01:32:46 AM JST
return self.get()[index]
* Mon 15 Dec 2014 01:32:55 AM JST
self[index].set(val)
* Mon 15 Dec 2014 01:33:25 AM JST
    def __nonzero__(self):
        """function __nonzero__

        returns
        """
        return not (self.width == 0 and self.height == 0)

* Mon 15 Dec 2014 01:33:33 AM JST
width
* Mon 15 Dec 2014 01:33:36 AM JST
height
* Mon 15 Dec 2014 01:34:36 AM JST
    def __iter__(self):
        return iter(self.get())

    def __delitem__(self, index):
        self.get()[index].set(0)

* Mon 15 Dec 2014 01:41:25 AM JST
    def get(self, ):
        """function get

        returns tuple
        """
        return (self.x, self.y)

    def set(self, *args, **kwargs):
        """function set

        *args:
        **kwargs:

        returns None
        """
        arglen = len(args) + len(kwargs)
        if 2 < arglen:
            raise TypeError('{} take at most 2 arguments ({} given)'
                            .format(self.__class__.__name__, arglen))
        x, y = kwargs.get('x', None), kwargs.get('y', None)
        # parse args
        if args:
            # Size(100, width=100)
            if x is not None:
                raise TypeError("'x is an invalid keyward argument.'")
            x = args[0]
        if len(args) == 2:
            y = args[1]
        if x is not None:
            self.set_x(x)
        if y is not None:
            self.set_y(y)

    def get_x(self):
        """function get_x

        returns XCoordinate
        """
        return self.x

    def set_x(self, x):
        """function set_x

        x:

        returns None
        """
        self.x.set(x)

    def get_y(self):
        """function get_y

        returns YCoordinate
        """
        return self.y

    def set_y(self, y):
        """function set_y

        y:

        returns None
        """
        self.y.set(y)

    def __str__(self):
        """function __str__

        returns str
        """
        return str((int(self.x), int(self.y)))

    def __repr__(self):
        """function __repr__

        returns str
        """
        return '{0.__class__.__name__}(x={0.x}, y={0.y})'.format(self)

    def __len__(self):
        """function __len__

        returns int
        """
        return len(self.get())

    def __eq__(self, other):
        """function __eq__

        returns bool
        """
        return (int(self.x), int(self.y)) == (int(other[0]), int(other[1]))

    def __ne__(self, other):
        """function __ne__

        returns bool
        """
        return not self == other

    def __add__(self, other):
        """function __add__

        returns Point
        """
        return self.__class__(self.x + other[0], self.y + other[1])

    def __sub__(self, other):
        """function __sub__

        returns Point
        """
        return self.__class__(self.x - other[0], self.y - other[1])

    def __iadd__(self, other):
        """function __iadd__

        other:

        returns Point
        """
        self.x += other[0]
        self.y += other[1]
        return self

    def __isub__(self, other):
        """function __isub__

        other:

        returns Point
        """
        self.x -= other[0]
        self.y -= other[1]
        return self

    def __getitem__(self, index):
        """function __getitem__

        index:

        returns
        """
        return self.get()[index]

    def __setitem__(self, index, val):
        """function __setitem__

        index:
        val:

        returns
        """
        self[index].set(val)

    def __nonzero__(self):
        """function __nonzero__

        returns
        """
        return not (self.x == 0 and self.y == 0)

    def __iter__(self):
        return iter(self.get())

    def __delitem__(self, index):
        self.get()[index].set(0)

* Mon 15 Dec 2014 01:41:38 AM JST
test
* Mon 15 Dec 2014 01:42:45 AM JST
test_
* Mon 15 Dec 2014 01:43:27 AM JST
pass
* Mon 15 Dec 2014 01:47:03 AM JST
pass
* Mon 15 Dec 2014 01:47:42 AM JST
pass
* Mon 15 Dec 2014 01:48:36 AM JST
self.assertIsInstance(got, tuple)
* Mon 15 Dec 2014 01:50:54 AM JST
pass
* Mon 15 Dec 2014 01:52:09 AM JST
pass
* Mon 15 Dec 2014 01:53:30 AM JST
self.assertEqual(self.x, self.point.get_x())
* Mon 15 Dec 2014 01:53:41 AM JST
        expects = 30
        self.point.set(expects)
        self.assertEqual(expects, self.point.get_x())

* Mon 15 Dec 2014 02:13:35 AM JST
        self.size.set(width=100, height=100)
        self.assertEqual(100, self.size.get_width())
        self.assertEqual(100, self.size.get_height())
        self.size.set(200, height=200)
        self.assertEqual(200, self.size.get_width())
        self.assertEqual(200, self.size.get_height())
        self.size.set(height=300)
        self.assertEqual(300, self.size.get_height())
        self.size.set(400)
        self.assertEqual(400, self.size.get_width())
        self.size.set(500, 500)
        self.assertEqual(500, self.size.get_width())
        self.assertEqual(500, self.size.get_height())
        # error
        with self.assertRaises(TypeError):
            self.size.set(100, 100, 100)
        with self.assertRaises(TypeError):
            self.size.set(100, width=100)

* Mon 15 Dec 2014 02:13:46 AM JST
width
* Mon 15 Dec 2014 02:13:49 AM JST
height
* Mon 15 Dec 2014 03:00:57 AM JST
pass
* Mon 15 Dec 2014 03:01:22 AM JST
self.
* Mon 15 Dec 2014 03:01:48 AM JST
pass
* Mon 15 Dec 2014 03:03:14 AM JST
pass
* Mon 15 Dec 2014 03:31:34 AM JST
        
* Mon 15 Dec 2014 03:32:39 AM JST
pass
* Mon 15 Dec 2014 03:32:43 AM JST
        expects = (self.x, self.y)
        self.assertTrue(self.point == expects)
        self.assertTrue(self.point == point.Point(self.x, self.y))

* Mon 15 Dec 2014 03:32:51 AM JST
x
* Mon 15 Dec 2014 03:32:51 AM JST
self.x
* Mon 15 Dec 2014 03:32:54 AM JST
y
* Mon 15 Dec 2014 03:32:54 AM JST
self.y
* Mon 15 Dec 2014 03:33:04 AM JST
(100, 200)
* Mon 15 Dec 2014 03:33:30 AM JST

* Mon 15 Dec 2014 03:33:30 AM JST

* Mon 15 Dec 2014 03:33:30 AM JST
        expects = (100, 200)

* Mon 15 Dec 2014 03:33:54 AM JST
pass
* Mon 15 Dec 2014 03:36:18 AM JST
        self.assertIsInstance(got, point.Point)
        self.assertEqual((11, 25), got)

* Mon 15 Dec 2014 03:36:28 AM JST
        got = self.point + (1, 5)
        self.assertIsInstance(got, point.Point)
        self.assertEqual((11, 25), got)
        got = self.point + point.Point(1, 5)
        self.assertIsInstance(got, point.Point)
        self.assertEqual((11, 25), got)

* Mon 15 Dec 2014 03:37:07 AM JST
pass
* Mon 15 Dec 2014 03:37:20 AM JST
self.assertEqual((11, 25), got)
* Mon 15 Dec 2014 03:37:24 AM JST
got
* Mon 15 Dec 2014 03:37:32 AM JST
        self.point += (1, 5)
        self.assertEqual((11, 25), self.point)

* Mon 15 Dec 2014 03:38:01 AM JST
pass
* Mon 15 Dec 2014 03:38:13 AM JST
self.assertEqual((9, 15), got)
* Mon 15 Dec 2014 03:38:16 AM JST
self.assertEqual((9, 15), got)
* Mon 15 Dec 2014 03:38:25 AM JST
got
* Mon 15 Dec 2014 03:38:40 AM JST
        self.point += point.Point(1, 5)
        self.assertEqual((12, 30), self.point)

* Mon 15 Dec 2014 03:39:07 AM JST
pass
* Mon 15 Dec 2014 03:39:17 AM JST
        
* Mon 15 Dec 2014 03:39:27 AM JST
        self.assertEqual(expects1, self.size[0])
        self.assertEqual(expects2, self.size[1])
        with self.assertRaises(IndexError):
            self.size[3]

* Mon 15 Dec 2014 03:39:31 AM JST
size
* Mon 15 Dec 2014 03:39:34 AM JST
size
* Mon 15 Dec 2014 03:39:38 AM JST
size
* Mon 15 Dec 2014 03:39:57 AM JST
pass
* Mon 15 Dec 2014 03:40:18 AM JST
        self.size[0] = expects1
        self.size[1] = expects2
        self.assertEqual(expects1, self.size[0])
        self.assertEqual(expects2, self.size[1])
        with self.assertRaises(IndexError):
            self.size[3] = 10

* Mon 15 Dec 2014 03:40:27 AM JST
size
* Mon 15 Dec 2014 03:40:29 AM JST
size
* Mon 15 Dec 2014 03:40:34 AM JST
size
* Mon 15 Dec 2014 03:41:46 AM JST
        self.assertFalse(bool(self.size))
        self.size[0] = 100
        self.assertTrue(bool(self.size))

* Mon 15 Dec 2014 03:42:00 AM JST
size
* Mon 15 Dec 2014 03:42:02 AM JST
size
* Mon 15 Dec 2014 03:42:05 AM JST
size
* Mon 15 Dec 2014 03:46:16 AM JST
got = list(iter(self.size))
* Mon 15 Dec 2014 03:46:18 AM JST
pass
* Mon 15 Dec 2014 03:46:22 AM JST
got = list(iter(self.size))
* Mon 15 Dec 2014 03:46:24 AM JST
size
* Mon 15 Dec 2014 03:46:57 AM JST
self.assertListEqual(expects, got)
* Mon 15 Dec 2014 03:47:05 AM JST
pass
* Mon 15 Dec 2014 03:47:17 AM JST
self.assertEqual(0, self.size[0])
* Mon 15 Dec 2014 03:47:21 AM JST
size
* Mon 15 Dec 2014 03:47:26 AM JST
        del self.size[1]
        self.assertEqual(0, self.size[1])

* Mon 15 Dec 2014 03:47:33 AM JST
size
* Mon 15 Dec 2014 03:47:36 AM JST
size
* Mon 15 Dec 2014 03:51:16 AM JST
2147483647
* Mon 15 Dec 2014 03:54:07 AM JST
self.assertEqual(expects, self.coord.get())
* Mon 15 Dec 2014 03:56:07 AM JST
        with self.assertRaises(Exception):
            self.coord.set('a')
        with self.assertRaises(Exception):
            self.coord.set(object)

* Mon 15 Dec 2014 03:56:42 AM JST
Exception
* Mon 15 Dec 2014 03:56:51 AM JST
Exception
* Mon 15 Dec 2014 03:56:56 AM JST
        with self.assertRaises(TypeError):
            self.coord.set(object)

* Mon 15 Dec 2014 04:00:07 AM JST
function 
* Mon 15 Dec 2014 04:02:14 AM JST
function 
* Mon 15 Dec 2014 04:03:00 AM JST

* Mon 15 Dec 2014 04:03:00 AM JST

* Mon 15 Dec 2014 04:03:00 AM JST
        set(100) -> 

* Mon 15 Dec 2014 04:05:11 AM JST
object
* Mon 15 Dec 2014 06:52:12 AM JST
set_width, 
* Mon 15 Dec 2014 06:55:28 AM JST
    width = property(get_width, set_width,
                     doc='See `get_width` and `set_width`')
    height = property(get_height, set_height,
                      doc='See `get_height` and `set_height`')


* Mon 15 Dec 2014 06:55:38 AM JST
    def get_width(self):
        """function get_width

        returns Width
        """
        return self.width

    def set_width(self, width):
        """function set_width

        width:

        returns
        """
        self.width.set(width)


* Mon 15 Dec 2014 06:58:39 AM JST
from xahk2.xobj import Size
s=Size()

* Mon 15 Dec 2014 06:58:55 AM JST
from xahk2.xobj import Size
s=Size()

* Mon 15 Dec 2014 07:21:13 AM JST
r=wx.Rect(10,20,30,40)
* Mon 15 Dec 2014 10:14:31 AM JST
GetTopRight()
* Mon 15 Dec 2014 11:18:01 AM JST
200))
* Mon 15 Dec 2014 11:18:01 AM JST
100, 200))
* Mon 15 Dec 2014 11:18:35 AM JST
self.point.rotate()
* Mon 15 Dec 2014 11:18:39 AM JST

* Mon 15 Dec 2014 11:18:39 AM JST

* Mon 15 Dec 2014 11:18:39 AM JST
        self.assertEqual(expects, self.point.rotate())

* Mon 15 Dec 2014 11:19:17 AM JST
expects
* Mon 15 Dec 2014 11:46:00 AM JST
wx.Rect(30, 50, 30, 40)
* Tue 16 Dec 2014 02:13:59 AM JST
Dimension
* Tue 16 Dec 2014 02:15:03 AM JST
size
* Tue 16 Dec 2014 02:17:13 AM JST
size
* Tue 16 Dec 2014 02:17:20 AM JST
Size
* Tue 16 Dec 2014 02:18:03 AM JST

* Tue 16 Dec 2014 02:18:05 AM JST
point
* Tue 16 Dec 2014 02:18:09 AM JST
Point
* Tue 16 Dec 2014 02:19:32 AM JST
Size
* Tue 16 Dec 2014 02:19:37 AM JST
size
* Tue 16 Dec 2014 02:27:46 AM JST

* Tue 16 Dec 2014 02:28:12 AM JST
https://docs.oracle.com/javase/7/docs/api/java/awt/Dimension.html
* Tue 16 Dec 2014 02:31:05 AM JST
Dimension
* Tue 16 Dec 2014 02:35:51 AM JST
self.
* Tue 16 Dec 2014 02:38:56 AM JST
self.assertEqual(100, self.dimension.get_width())
* Tue 16 Dec 2014 02:39:02 AM JST
        self.assertEqual(100, self.dimension.get_width())
        self.assertEqual(100, self.dimension.get_height())

* Tue 16 Dec 2014 03:06:55 AM JST
https://docs.oracle.com/javase/7/docs/api/java/awt/Rectangle.html
* Tue 16 Dec 2014 03:09:03 AM JST
function 
* Tue 16 Dec 2014 03:09:17 AM JST
SUMMARY
* Tue 16 Dec 2014 03:09:33 AM JST

* Tue 16 Dec 2014 03:09:33 AM JST

* Tue 16 Dec 2014 03:09:33 AM JST
        x:

* Tue 16 Dec 2014 03:09:35 AM JST
None
* Tue 16 Dec 2014 03:09:38 AM JST

* Tue 16 Dec 2014 03:09:38 AM JST

* Tue 16 Dec 2014 03:09:38 AM JST
        returns 

* Tue 16 Dec 2014 03:14:22 AM JST
Dimension
* Tue 16 Dec 2014 03:14:27 AM JST
dimension
* Tue 16 Dec 2014 03:16:40 AM JST
function 
* Tue 16 Dec 2014 03:16:51 AM JST
function 
* Tue 16 Dec 2014 03:19:39 AM JST
# TODO: (Atami) [2014/12/16]
# document

* Tue 16 Dec 2014 03:27:27 AM JST
import 
* Tue 16 Dec 2014 04:23:45 AM JST
self.__class__(-self.get_x(), -self.get_y())
* Tue 16 Dec 2014 05:07:40 AM JST
Intersect
* Tue 16 Dec 2014 06:19:59 AM JST
1))
* Tue 16 Dec 2014 06:19:59 AM JST
1,1))
* Tue 16 Dec 2014 06:20:00 AM JST
1,1,1))
* Tue 16 Dec 2014 06:20:00 AM JST
1,1,1,1))
* Tue 16 Dec 2014 06:20:01 AM JST
Rect(1,1,1,1))
* Tue 16 Dec 2014 06:20:01 AM JST
wx.Rect(1,1,1,1))
* Tue 16 Dec 2014 06:20:01 AM JST
Union(wx.Rect(1,1,1,1))
* Tue 16 Dec 2014 06:22:49 AM JST
GetBottom
* Tue 16 Dec 2014 07:26:58 AM JST
from Rectangle import Rectangle

class Rectangle:
    """Class Rectangle
    """
    # Attributes:
    dimension = None  # (Dimension) 
    point = None  # (Point) 
    
    # Operations
    def get(self):
        """function get
        
        returns tuple
        """
        return None # should raise NotImplementedError()
    
    def set(self, x, y, width, height):
        """function set
        
        x: 
        y: 
        width: 
        height: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_location(self):
        """function get_location
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def set_location(self, point):
        """function set_location
        
        point: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_x(self):
        """function get_x
        
        returns XCoordinate
        """
        return None # should raise NotImplementedError()
    
    def set_x(self, newx):
        """function set_x
        
        newx: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_y(self):
        """function get_y
        
        returns YCoordinate
        """
        return None # should raise NotImplementedError()
    
    def set_y(self, newy):
        """function set_y
        
        newy: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_size(self):
        """function get_size
        
        returns Size
        """
        return None # should raise NotImplementedError()
    
    def set_size(self, size):
        """function set_size
        
        size: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_width(self):
        """function get_width
        
        returns Width
        """
        return None # should raise NotImplementedError()
    
    def set_width(self, newwidth):
        """function set_width
        
        newwidth: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_height(self):
        """function get_height
        
        returns Height
        """
        return None # should raise NotImplementedError()
    
    def set_height(self, newheight):
        """function set_height
        
        newheight: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def isempty(self):
        """function isempty
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def grow(self, dx = 0, dy = 0):
        """function grow
        
        dx: int
        dy: int
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def offset(self):
        """function offset
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def union(self, rectangle):
        """function union
        
        rectangle: 
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def intersection(self, rectangle):
        """function intersection
        
        rectangle: 
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def intersects(self, rectangle):
        """function intersects
        
        rectangle: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def centerin(self, rectangle):
        """function centerin
        
        rectangle: 
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def get_top_left(self):
        """function get_top_left
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def set_top_left(self, *args, **kwargs):
        """function set_top_left
        
        *args: 
        **kwargs: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_bottom_right(self):
        """function get_bottom_right
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def set_bottom_right(self, *args, **kwargs):
        """function set_bottom_right
        
        *args: 
        **kwargs: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_bottom_left(self):
        """function get_bottom_left
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def set_bottom_left(self, *args, **kwargs):
        """function set_bottom_left
        
        *args: 
        **kwargs: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_top_right(self):
        """function get_top_right
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def set_top_right(self, *args, **kwargs):
        """function set_top_right
        
        *args: 
        **kwargs: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_left(self):
        """function get_left
        
        returns XCoordinate
        """
        return None # should raise NotImplementedError()
    
    def set_left(self, left):
        """function set_left
        
        left: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_right(self):
        """function get_right
        
        returns XCoordinate
        """
        return None # should raise NotImplementedError()
    
    def set_right(self, x):
        """function set_right
        
        x: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_bottom(self):
        """function get_bottom
        
        returns YCoordinate
        """
        return None # should raise NotImplementedError()
    
    def set_bottom(self, y):
        """function set_bottom
        
        y: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __nonzero__(self):
        """function __nonzero__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __len__(self):
        """function __len__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, index):
        """function __getitem__
        
        index: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, index, val):
        """function __setitem__
        
        index: int
        val: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __add__(self, other):
        """function __add__
        
        other: 
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def __iadd__(self, other):
        """function __iadd__
        
        other: 
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __sub__(self, other):
        """function __sub__
        
        other: 
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def __isub__(self, other):
        """function __isub__
        
        other: 
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def __contains__(self, val):
        """function __contains__
        
        val: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    


* Tue 16 Dec 2014 07:27:00 AM JST
from Rectangle import Rectangle

class Rectangle:
    """Class Rectangle
    """
    # Attributes:
    dimension = None  # (Dimension) 
    point = None  # (Point) 
    
    # Operations
    def get(self):
        """function get
        
        returns tuple
        """
        return None # should raise NotImplementedError()
    
    def set(self, x, y, width, height):
        """function set
        
        x: 
        y: 
        width: 
        height: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_location(self):
        """function get_location
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def set_location(self, point):
        """function set_location
        
        point: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_x(self):
        """function get_x
        
        returns XCoordinate
        """
        return None # should raise NotImplementedError()
    
    def set_x(self, newx):
        """function set_x
        
        newx: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_y(self):
        """function get_y
        
        returns YCoordinate
        """
        return None # should raise NotImplementedError()
    
    def set_y(self, newy):
        """function set_y
        
        newy: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_size(self):
        """function get_size
        
        returns Size
        """
        return None # should raise NotImplementedError()
    
    def set_size(self, size):
        """function set_size
        
        size: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_width(self):
        """function get_width
        
        returns Width
        """
        return None # should raise NotImplementedError()
    
    def set_width(self, newwidth):
        """function set_width
        
        newwidth: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_height(self):
        """function get_height
        
        returns Height
        """
        return None # should raise NotImplementedError()
    
    def set_height(self, newheight):
        """function set_height
        
        newheight: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def isempty(self):
        """function isempty
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def grow(self, dx = 0, dy = 0):
        """function grow
        
        dx: int
        dy: int
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def offset(self):
        """function offset
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def union(self, rectangle):
        """function union
        
        rectangle: 
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def intersection(self, rectangle):
        """function intersection
        
        rectangle: 
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def intersects(self, rectangle):
        """function intersects
        
        rectangle: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def centerin(self, rectangle):
        """function centerin
        
        rectangle: 
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def get_top_left(self):
        """function get_top_left
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def set_top_left(self, *args, **kwargs):
        """function set_top_left
        
        *args: 
        **kwargs: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_bottom_right(self):
        """function get_bottom_right
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def set_bottom_right(self, *args, **kwargs):
        """function set_bottom_right
        
        *args: 
        **kwargs: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_bottom_left(self):
        """function get_bottom_left
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def set_bottom_left(self, *args, **kwargs):
        """function set_bottom_left
        
        *args: 
        **kwargs: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_top_right(self):
        """function get_top_right
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def set_top_right(self, *args, **kwargs):
        """function set_top_right
        
        *args: 
        **kwargs: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_left(self):
        """function get_left
        
        returns XCoordinate
        """
        return None # should raise NotImplementedError()
    
    def set_left(self, left):
        """function set_left
        
        left: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_right(self):
        """function get_right
        
        returns XCoordinate
        """
        return None # should raise NotImplementedError()
    
    def set_right(self, x):
        """function set_right
        
        x: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_bottom(self):
        """function get_bottom
        
        returns YCoordinate
        """
        return None # should raise NotImplementedError()
    
    def set_bottom(self, y):
        """function set_bottom
        
        y: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __nonzero__(self):
        """function __nonzero__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __len__(self):
        """function __len__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, index):
        """function __getitem__
        
        index: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, index, val):
        """function __setitem__
        
        index: int
        val: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __add__(self, other):
        """function __add__
        
        other: 
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def __iadd__(self, other):
        """function __iadd__
        
        other: 
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __sub__(self, other):
        """function __sub__
        
        other: 
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def __isub__(self, other):
        """function __isub__
        
        other: 
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def __contains__(self, val):
        """function __contains__
        
        val: 
        
        returns bool
        """
        return None # should raise NotImplementedError()

* Tue 16 Dec 2014 07:27:29 AM JST

* Tue 16 Dec 2014 07:27:29 AM JST

* Tue 16 Dec 2014 07:27:29 AM JST
from Rectangle import Rectangle

* Tue 16 Dec 2014 07:33:26 AM JST
('a', '()
* Tue 16 Dec 2014 07:35:24 AM JST
Dimension
* Tue 16 Dec 2014 07:35:32 AM JST
Dimension()
* Tue 16 Dec 2014 07:36:01 AM JST
Height, Width
* Tue 16 Dec 2014 07:36:09 AM JST
Dimension
* Tue 16 Dec 2014 07:36:14 AM JST
XCoordinate, YCoordinate
* Tue 16 Dec 2014 07:36:18 AM JST
Point
* Tue 16 Dec 2014 07:37:45 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 07:41:52 AM JST

* Tue 16 Dec 2014 07:41:52 AM JST
point
* Tue 16 Dec 2014 07:42:00 AM JST
None  # (Point)
* Tue 16 Dec 2014 07:42:13 AM JST
None  # (Dimension)
* Tue 16 Dec 2014 07:57:41 AM JST
peak.rules
* Tue 16 Dec 2014 07:58:52 AM JST
dispatch
* Tue 16 Dec 2014 08:04:40 AM JST
from peak.rules import abstract
* Tue 16 Dec 2014 08:10:03 AM JST
                    
* Tue 16 Dec 2014 08:10:04 AM JST
                    
* Tue 16 Dec 2014 08:10:08 AM JST
                    
* Tue 16 Dec 2014 08:10:37 AM JST
Rectangle
* Tue 16 Dec 2014 08:11:05 AM JST
rectangle
* Tue 16 Dec 2014 08:12:15 AM JST
from xahk2.xobj import Rectangle
* Tue 16 Dec 2014 08:15:25 AM JST
set.
* Tue 16 Dec 2014 08:15:45 AM JST
from xahk2.xobj import Rectangle
* Tue 16 Dec 2014 08:16:32 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 08:21:24 AM JST
from peak.rules import dispatch
* Tue 16 Dec 2014 08:21:49 AM JST
set, 
* Tue 16 Dec 2014 08:25:19 AM JST
ar)
* Tue 16 Dec 2014 08:25:20 AM JST
isinstance(ar)
* Tue 16 Dec 2014 08:25:32 AM JST
len(
* Tue 16 Dec 2014 08:25:48 AM JST
args[0]
* Tue 16 Dec 2014 08:26:24 AM JST
from xahk2.xobj import Rectangle
* Tue 16 Dec 2014 08:27:38 AM JST

* Tue 16 Dec 2014 08:27:38 AM JST

* Tue 16 Dec 2014 08:27:38 AM JST
    @dispatch.generic()

* Tue 16 Dec 2014 08:27:42 AM JST

* Tue 16 Dec 2014 08:27:42 AM JST

* Tue 16 Dec 2014 08:27:42 AM JST
from peak.rules import dispatch

* Tue 16 Dec 2014 08:29:41 AM JST
                        
* Tue 16 Dec 2014 08:30:47 AM JST
kwargs.get('x', None)
* Tue 16 Dec 2014 08:32:15 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 08:32:19 AM JST
newx, newy, width, height
* Tue 16 Dec 2014 09:36:40 AM JST
Rectangle()
Constructs a new Rectangle whose upper-left corner is at (0, 0) in the coordinate space, and whose width and height are both zero.
Rectangle(Dimension d)
Constructs a new Rectangle whose top left corner is (0, 0) and whose width and height are specified by the Dimension argument.
Rectangle(int width, int height)
Constructs a new Rectangle whose upper-left corner is at (0, 0) in the coordinate space, and whose width and height are specified by the arguments of the same name.
Rectangle(int x, int y, int width, int height)
Constructs a new Rectangle whose upper-left corner is specified as (x,y) and whose width and height are specified by the arguments of the same name.
Rectangle(Point p)
Constructs a new Rectangle whose upper-left corner is the specified Point, and whose width and height are both zero.
Rectangle(Point p, Dimension d)
Constructs a new Rectangle whose upper-left corner is specified by the Point argument, and whose width and height are specified by the Dimension argument.
Rectangle(Rectangle r)
* Tue 16 Dec 2014 09:36:49 AM JST
Rectangle
* Tue 16 Dec 2014 09:37:02 AM JST
Rectangle
* Tue 16 Dec 2014 09:37:23 AM JST
Rectangle
* Tue 16 Dec 2014 09:37:29 AM JST
Rectangle
* Tue 16 Dec 2014 09:37:35 AM JST
Rectangle
* Tue 16 Dec 2014 10:18:50 AM JST
dimension
* Tue 16 Dec 2014 10:19:04 AM JST
dimension
* Tue 16 Dec 2014 10:30:43 AM JST
if points is not None or rect is not NOne:
* Tue 16 Dec 2014 10:47:47 AM JST
dotavoider
* Tue 16 Dec 2014 10:47:47 AM JST
import dotavoider
* Tue 16 Dec 2014 10:47:48 AM JST
dotavoider import dotavoider
* Tue 16 Dec 2014 10:47:48 AM JST
from dotavoider import dotavoider
* Tue 16 Dec 2014 10:48:37 AM JST
from dotavoider 
* Tue 16 Dec 2014 10:48:58 AM JST
, append= dotavoider.DotAvoider([]).append
* Tue 16 Dec 2014 10:49:03 AM JST

* Tue 16 Dec 2014 10:49:03 AM JST

* Tue 16 Dec 2014 10:49:03 AM JST
import dotavoider

* Tue 16 Dec 2014 10:52:40 AM JST
Type
* Tue 16 Dec 2014 10:54:40 AM JST
new
* Tue 16 Dec 2014 10:54:40 AM JST
if new
* Tue 16 Dec 2014 10:56:50 AM JST
        
* Tue 16 Dec 2014 10:56:52 AM JST
newy
* Tue 16 Dec 2014 10:56:54 AM JST
newy
* Tue 16 Dec 2014 10:57:01 AM JST
        
* Tue 16 Dec 2014 10:57:03 AM JST
width
* Tue 16 Dec 2014 10:57:06 AM JST
width
* Tue 16 Dec 2014 10:58:54 AM JST
(newx is not None or newy is not None)
* Tue 16 Dec 2014 11:02:43 AM JST
size
* Tue 16 Dec 2014 11:04:30 AM JST
newy or arguments[1]
* Tue 16 Dec 2014 11:04:32 AM JST

* Tue 16 Dec 2014 11:04:32 AM JST

* Tue 16 Dec 2014 11:04:32 AM JST
        newy = 

* Tue 16 Dec 2014 11:04:36 AM JST
height
* Tue 16 Dec 2014 11:04:39 AM JST
height or arguments[3]
* Tue 16 Dec 2014 11:04:42 AM JST

* Tue 16 Dec 2014 11:04:42 AM JST

* Tue 16 Dec 2014 11:04:42 AM JST
         = 

* Tue 16 Dec 2014 11:06:56 AM JST
set
* Tue 16 Dec 2014 11:06:56 AM JST
point.set
* Tue 16 Dec 2014 11:07:23 AM JST

* Tue 16 Dec 2014 11:07:23 AM JST

* Tue 16 Dec 2014 11:07:23 AM JST
        return newx, newy, width, height

* Tue 16 Dec 2014 11:07:47 AM JST
from xahk2.xobj import Rectangle
r=Rectangle()

* Tue 16 Dec 2014 11:10:45 AM JST

* Tue 16 Dec 2014 11:10:45 AM JST

* Tue 16 Dec 2014 11:10:45 AM JST
        print(rect)

* Tue 16 Dec 2014 11:12:39 AM JST
else:
* Tue 16 Dec 2014 11:14:37 AM JST
if size is not None
* Tue 16 Dec 2014 11:14:48 AM JST
if rect is not None
* Tue 16 Dec 2014 11:17:11 AM JST
point.
* Tue 16 Dec 2014 11:17:56 AM JST
point
* Tue 16 Dec 2014 11:20:46 AM JST
        if rect is not None and (boolpoint or boolsize):
            raise TypeError()

* Tue 16 Dec 2014 11:20:51 AM JST
        if points is not None:
            self.point.set(points)

* Tue 16 Dec 2014 11:30:30 AM JST
_
* Tue 16 Dec 2014 11:30:31 AM JST
self._
* Tue 16 Dec 2014 11:30:34 AM JST
__
* Tue 16 Dec 2014 11:30:34 AM JST
rect.__
* Tue 16 Dec 2014 11:30:37 AM JST
.format()
* Tue 16 Dec 2014 11:30:38 AM JST
                        .format()
* Tue 16 Dec 2014 11:33:30 AM JST
is not None
* Tue 16 Dec 2014 11:33:35 AM JST
 is not None
* Tue 16 Dec 2014 11:34:04 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 11:34:20 AM JST
point
* Tue 16 Dec 2014 11:34:28 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 11:34:47 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 11:34:57 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 11:35:09 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 11:35:17 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 11:35:27 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 11:35:35 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 11:35:48 AM JST
size
* Tue 16 Dec 2014 11:36:01 AM JST
*args, **kwargs
* Tue 16 Dec 2014 11:36:08 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 11:36:42 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 11:36:57 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 11:37:16 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 11:37:32 AM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 11:38:27 AM JST
from xahk2.xobj import Rectangle
r=Rectangle()

* Tue 16 Dec 2014 11:38:30 AM JST
from xahk2.xobj import Rectangle
r=Rectangle()

* Tue 16 Dec 2014 11:40:03 AM JST
None
* Tue 16 Dec 2014 11:40:04 AM JST
None,None
* Tue 16 Dec 2014 11:47:00 AM JST
point
* Tue 16 Dec 2014 11:47:09 AM JST
kwargs.get('point', None)
* Tue 16 Dec 2014 11:49:20 AM JST
        if point is not None and (x is not None or y is not None):
            raise TypeError('Exclusive point and x, y')

* Tue 16 Dec 2014 11:49:46 AM JST
width
* Tue 16 Dec 2014 12:01:57 PM JST
        for val1, val2 in zip((newx, newy, width, height), arguments):
            if val1 is not None and val2 is not None:
                raise TypeError('duplicate parameter {}, {}'.format(val1, val2))

* Tue 16 Dec 2014 12:02:03 PM JST
height
* Tue 16 Dec 2014 12:02:04 PM JST
width, height
* Tue 16 Dec 2014 12:02:05 PM JST
newy, width, height
* Tue 16 Dec 2014 12:02:05 PM JST
newx, newy, width, height
* Tue 16 Dec 2014 12:02:32 PM JST
x, newy = newx or arguments[0], newy or arguments[1]
* Tue 16 Dec 2014 12:02:39 PM JST
new
* Tue 16 Dec 2014 12:02:41 PM JST
new
* Tue 16 Dec 2014 12:02:44 PM JST
new
* Tue 16 Dec 2014 12:03:16 PM JST
form 
* Tue 16 Dec 2014 12:03:35 PM JST
1)
* Tue 16 Dec 2014 12:03:36 PM JST
set
* Tue 16 Dec 2014 12:04:06 PM JST
None
* Tue 16 Dec 2014 12:04:06 PM JST
None,None
* Tue 16 Dec 2014 12:04:51 PM JST
        if points is not None:
            self.point.set(points)

* Tue 16 Dec 2014 12:05:07 PM JST
point.
* Tue 16 Dec 2014 12:05:41 PM JST
            
* Tue 16 Dec 2014 12:06:58 PM JST
        
* Tue 16 Dec 2014 12:07:03 PM JST
        
* Tue 16 Dec 2014 12:07:08 PM JST

* Tue 16 Dec 2014 12:07:19 PM JST
        
* Tue 16 Dec 2014 12:08:00 PM JST
Point(1, 1)
* Tue 16 Dec 2014 12:08:08 PM JST
 -> Point(x=1, y=1)
* Tue 16 Dec 2014 12:11:09 PM JST
        for arg in args:
            if isinstance(arg, (self.__class__, )):
                if point is not None:
                    raise TypeError(
                        '{0.__class__.__name__} duplicated in args and kwargs')
                point = arg
            else:
                arguments.append(arg)

* Tue 16 Dec 2014 12:11:16 PM JST
point
* Tue 16 Dec 2014 12:11:43 PM JST
point
* Tue 16 Dec 2014 12:11:57 PM JST
        while 2 != len(arguments):
            arguments.append(None)

* Tue 16 Dec 2014 12:12:05 PM JST
        for val1, val2 in zip((x, y), arguments):
            if val1 is not None and val2 is not None:
                raise TypeError('duplicate parameter {}, {}'.format(val1, val2))

* Tue 16 Dec 2014 12:12:27 PM JST
x, y = x or arguments[0], y or arguments[1]
* Tue 16 Dec 2014 12:12:34 PM JST
heigh
* Tue 16 Dec 2014 12:13:14 PM JST
        if point is not None and (x is not None or y is not None):
            raise TypeError('Exclusive point and x, y')

* Tue 16 Dec 2014 12:13:18 PM JST
point
* Tue 16 Dec 2014 12:13:31 PM JST
point
* Tue 16 Dec 2014 12:13:53 PM JST
        if point is not None:
            self.set_x(point.get_x())
            self.set_y(point.get_y())

* Tue 16 Dec 2014 12:13:56 PM JST
point
* Tue 16 Dec 2014 12:14:04 PM JST
point
* Tue 16 Dec 2014 12:14:16 PM JST
point
* Tue 16 Dec 2014 12:16:44 PM JST
with
* Tue 16 Dec 2014 12:17:55 PM JST
with
* Tue 16 Dec 2014 12:18:35 PM JST
x=
* Tue 16 Dec 2014 12:18:45 PM JST
        with self.assertRaises(TypeError):
            self.dimension.set(1, Dimension())

* Tue 16 Dec 2014 12:18:48 PM JST
1, 
* Tue 16 Dec 2014 12:20:34 PM JST

* Tue 16 Dec 2014 12:21:02 PM JST
        with self.assertRaises(TypeError):
            self.point.set(100, x=100)

* Tue 16 Dec 2014 12:21:20 PM JST
        with self.assertRaises(TypeError):
            self.point.set(100, point.Point())

* Tue 16 Dec 2014 12:21:23 PM JST
100, 
* Tue 16 Dec 2014 12:21:28 PM JST
        with self.assertRaises(TypeError):
            self.point.set(point.Point(), 100)

* Tue 16 Dec 2014 12:24:13 PM JST
set
* Tue 16 Dec 2014 12:24:14 PM JST
point.set
* Tue 16 Dec 2014 12:24:21 PM JST
dimension.
* Tue 16 Dec 2014 12:24:36 PM JST
point.
* Tue 16 Dec 2014 12:24:42 PM JST
dimension.
* Tue 16 Dec 2014 12:26:20 PM JST
from xahk2.xobj import Rectangle
r=Rectangle()

* Tue 16 Dec 2014 12:26:38 PM JST
r=Rectangle()
* Tue 16 Dec 2014 12:27:50 PM JST
int
* Tue 16 Dec 2014 12:28:01 PM JST
width
* Tue 16 Dec 2014 12:28:03 PM JST
height
* Tue 16 Dec 2014 12:28:19 PM JST
0
* Tue 16 Dec 2014 12:28:39 PM JST

* Tue 16 Dec 2014 12:28:39 PM JST

* Tue 16 Dec 2014 12:28:39 PM JST
        set(Point(), Dimension())

* Tue 16 Dec 2014 12:28:47 PM JST
        set(Rectangle())
        set(rectangle=Rectangle())

* Tue 16 Dec 2014 12:29:07 PM JST
dimen
* Tue 16 Dec 2014 12:44:01 PM JST
get_
* Tue 16 Dec 2014 12:44:01 PM JST
point.get_
* Tue 16 Dec 2014 12:44:01 PM JST
self.point.get_
* Tue 16 Dec 2014 12:44:03 PM JST
set_x
* Tue 16 Dec 2014 12:44:03 PM JST
point.set_x
* Tue 16 Dec 2014 12:46:59 PM JST
set_x(
* Tue 16 Dec 2014 12:46:59 PM JST
self.set_x(
* Tue 16 Dec 2014 12:47:07 PM JST
set_y(
* Tue 16 Dec 2014 12:47:07 PM JST
self.set_y(
* Tue 16 Dec 2014 12:47:14 PM JST
set_width()
* Tue 16 Dec 2014 12:47:15 PM JST
self.set_width()
* Tue 16 Dec 2014 12:47:53 PM JST
None # should raise NotImplementedError()
* Tue 16 Dec 2014 12:56:20 PM JST
newy 
* Tue 16 Dec 2014 12:58:25 PM JST
if
* Tue 16 Dec 2014 12:59:28 PM JST
Exception
* Tue 16 Dec 2014 12:59:30 PM JST
Error
* Tue 16 Dec 2014 12:59:37 PM JST

* Tue 16 Dec 2014 12:59:37 PM JST

* Tue 16 Dec 2014 12:59:37 PM JST
Except

* Tue 16 Dec 2014 01:00:13 PM JST
StandardError
* Tue 16 Dec 2014 01:00:25 PM JST
__class__
* Tue 16 Dec 2014 01:03:05 PM JST
BaseException
 +-- SystemExit
 +-- KeyboardInterrupt
 +-- GeneratorExit
 +-- Exception
      +-- StopIteration
      +-- StandardError
      |    +-- BufferError
      |    +-- ArithmeticError
      |    |    +-- FloatingPointError
      |    |    +-- OverflowError
      |    |    +-- ZeroDivisionError
      |    +-- AssertionError
      |    +-- AttributeError
      |    +-- EnvironmentError
      |    |    +-- IOError
      |    |    +-- OSError
      |    |         +-- WindowsError (Windows)
      |    |         +-- VMSError (VMS)
      |    +-- EOFError
      |    +-- ImportError
      |    +-- LookupError
      |    |    +-- IndexError
      |    |    +-- KeyError
      |    +-- MemoryError
      |    +-- NameError
      |    |    +-- UnboundLocalError
      |    +-- ReferenceError
      |    +-- RuntimeError
      |    |    +-- NotImplementedError
      |    +-- SyntaxError
      |    |    +-- IndentationError
      |    |         +-- TabError
      |    +-- SystemError
      |    +-- TypeError
      |    +-- ValueError
      |         +-- UnicodeError
      |              +-- UnicodeDecodeError
      |              +-- UnicodeEncodeError
      |              +-- UnicodeTranslateError
      +-- Warning
           +-- DeprecationWarning
           +-- PendingDeprecationWarning
           +-- RuntimeWarning
           +-- SyntaxWarning
           +-- UserWarning
           +-- FutureWarning
     +-- ImportWarning
     +-- UnicodeWarning
     +-- BytesWarning

* Tue 16 Dec 2014 01:04:32 PM JST
ValueError
* Tue 16 Dec 2014 01:12:10 PM JST

* Tue 16 Dec 2014 01:12:10 PM JST

* Tue 16 Dec 2014 01:12:10 PM JST
        # 

* Tue 16 Dec 2014 01:12:17 PM JST

* Tue 16 Dec 2014 01:12:33 PM JST
        grow(dx=10, dy=10)

* Tue 16 Dec 2014 01:40:18 PM JST
kwargs
* Tue 16 Dec 2014 01:42:15 PM JST
kargs
* Tue 16 Dec 2014 01:43:00 PM JST

* Tue 16 Dec 2014 01:43:01 PM JST

* Tue 16 Dec 2014 01:43:01 PM JST
        dx, dy = kwargs.get('dx', None), kwargs.get('dy', None)

* Tue 16 Dec 2014 01:43:25 PM JST
args
* Tue 16 Dec 2014 01:43:46 PM JST
pass
* Tue 16 Dec 2014 01:44:05 PM JST
default()
* Tue 16 Dec 2014 01:45:36 PM JST
arguments.setdefault('dx', args[0])
* Tue 16 Dec 2014 10:09:14 PM JST
from distutils.core import setup
* Tue 16 Dec 2014 10:22:43 PM JST
overloa
* Tue 16 Dec 2014 10:22:44 PM JST
import overloa
* Tue 16 Dec 2014 10:22:52 PM JST
loverlo
* Tue 16 Dec 2014 10:28:49 PM JST
None
* Wed 17 Dec 2014 12:10:15 AM JST
~/.emacs.d/elisp/plugin/
* Wed 17 Dec 2014 12:27:07 AM JST

* Wed 17 Dec 2014 12:27:07 AM JST

* Wed 17 Dec 2014 12:27:07 AM JST
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:07 AM JST
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:07 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:07 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:07 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:08 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:08 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]
    # FIXME: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:10 AM JST

* Wed 17 Dec 2014 12:27:10 AM JST

* Wed 17 Dec 2014 12:27:10 AM JST
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:13 AM JST

* Wed 17 Dec 2014 12:27:13 AM JST

* Wed 17 Dec 2014 12:27:13 AM JST
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:13 AM JST
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:13 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:19 AM JST

* Wed 17 Dec 2014 12:27:19 AM JST

* Wed 17 Dec 2014 12:27:19 AM JST
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:19 AM JST
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:19 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:19 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:20 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:25 AM JST

* Wed 17 Dec 2014 12:27:25 AM JST

* Wed 17 Dec 2014 12:27:25 AM JST
# TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:25 AM JST
# TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:25 AM JST
# TODO: (Atami) [2014/12/17]
# TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:28 AM JST

* Wed 17 Dec 2014 12:27:28 AM JST

* Wed 17 Dec 2014 12:27:28 AM JST
# TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:32 AM JST

* Wed 17 Dec 2014 12:27:32 AM JST

* Wed 17 Dec 2014 12:27:32 AM JST
# FIXME: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:39 AM JST

* Wed 17 Dec 2014 12:27:39 AM JST

* Wed 17 Dec 2014 12:27:39 AM JST
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:39 AM JST
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:39 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:39 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:39 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:39 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:40 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:40 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:40 AM JST
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:27:43 AM JST

* Wed 17 Dec 2014 12:27:43 AM JST

* Wed 17 Dec 2014 12:27:43 AM JST
    # TODO: (Atami) [2014/12/17]

* Wed 17 Dec 2014 12:28:06 AM JST
BUG" "WARNING" "KLUDGE
* Wed 17 Dec 2014 12:37:23 AM JST
E0102
* Wed 17 Dec 2014 12:45:34 AM JST
(file-name-as-directory (concat my-data-dir   "log"))
* Wed 17 Dec 2014 12:46:41 AM JST
(expand-file-name "pylint" my-data-dir)
* Wed 17 Dec 2014 12:47:19 AM JST
flycheck-pylintrc
* Wed 17 Dec 2014 12:47:56 AM JST

* Wed 17 Dec 2014 12:47:56 AM JST

* Wed 17 Dec 2014 12:47:56 AM JST
    print(arg)

* Wed 17 Dec 2014 12:49:49 AM JST
TODO
* Wed 17 Dec 2014 12:52:58 AM JST
python-pylint
* Wed 17 Dec 2014 12:55:38 AM JST
flycheck-pylintrc
* Wed 17 Dec 2014 01:01:03 AM JST
#disable-checker=
* Wed 17 Dec 2014 01:01:07 AM JST
E0102
* Wed 17 Dec 2014 01:01:55 AM JST
flycheck-checker
* Wed 17 Dec 2014 01:33:30 AM JST

* Wed 17 Dec 2014 01:33:30 AM JST

* Wed 17 Dec 2014 01:33:30 AM JST
    hello

* Wed 17 Dec 2014 01:33:31 AM JST

* Wed 17 Dec 2014 01:33:31 AM JST

* Wed 17 Dec 2014 01:33:31 AM JST
    0 / 2

* Wed 17 Dec 2014 01:33:31 AM JST
    0 / 2

* Wed 17 Dec 2014 01:33:31 AM JST
    0 / 2
    2 / 0

* Wed 17 Dec 2014 01:41:38 AM JST

* Wed 17 Dec 2014 01:41:39 AM JST

* Wed 17 Dec 2014 01:41:39 AM JST
@overload((float, long))

* Wed 17 Dec 2014 01:41:40 AM JST

* Wed 17 Dec 2014 01:41:40 AM JST

* Wed 17 Dec 2014 01:41:40 AM JST
@overload((int, str))

* Wed 17 Dec 2014 01:43:59 AM JST
python-pylint
* Wed 17 Dec 2014 01:44:24 AM JST
flycheck-checker: python-pylint
* Wed 17 Dec 2014 01:44:37 AM JST
flycheck-pylintrc
* Wed 17 Dec 2014 01:49:17 AM JST
E0102
* Wed 17 Dec 2014 01:50:28 AM JST
flycheck-checker: python-pylint
* Wed 17 Dec 2014 01:50:37 AM JST
flycheck-checker: python-pylint
* Wed 17 Dec 2014 01:50:56 AM JST
flyche
* Wed 17 Dec 2014 01:51:24 AM JST
# For Emacs
# Local Variables:
# coding: utf-8
# flycheck-checker: python-pylint
# End:
# 2014-12-16-222236.junk.py ends here

* Wed 17 Dec 2014 01:51:28 AM JST
# For Emacs
# Local Variables:
# coding: utf-8
# flycheck-checker: python-pylint
# End:
# 2014-12-16-222236.junk.py ends here

* Wed 17 Dec 2014 01:52:57 AM JST
#
* Wed 17 Dec 2014 01:55:54 AM JST
# For Emacs
# Local Variables:
# coding: utf-8
# flycheck-checker: python-pylint
# End:
# 2014-12-16-222236.junk.py ends here

* Wed 17 Dec 2014 01:55:56 AM JST
# For Emacs
# Local Variables:
# coding: utf-8
# flycheck-checker: python-pylint
# End:
# 2014-12-16-222236.junk.py ends here

* Wed 17 Dec 2014 01:58:42 AM JST
(setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)
* Wed 17 Dec 2014 01:58:49 AM JST
checkdoc
* Wed 17 Dec 2014 01:58:49 AM JST
lisp-checkdoc
* Wed 17 Dec 2014 01:58:50 AM JST
emacs-lisp-checkdoc
* Wed 17 Dec 2014 01:59:01 AM JST
python-flake8
* Wed 17 Dec 2014 02:01:01 AM JST
flycheck-disabled-checkers '(python-flake8)
* Wed 17 Dec 2014 02:01:12 AM JST

* Wed 17 Dec 2014 02:01:12 AM JST

* Wed 17 Dec 2014 02:01:12 AM JST
  ;; (setq-default flycheck-disabled-checkers '(python-flake8))

* Wed 17 Dec 2014 02:18:53 AM JST
(flycheck-define-checker python-pylint
  "A Python syntax and style checker using Pylint.

This syntax checker requires Pylint 1.0 or newer.

See URL `http://www.pylint.org/'."
  ;; -r n disables the scoring report
  :command ("pylint" "-r" "n"
            "--msg-template" "{path}:{line}:{column}:{C}:{msg_id}:{msg}"
            (config-file "--rcfile" flycheck-pylintrc)
            ;; Need `source-inplace' for relative imports (e.g. `from .foo
            ;; import bar'), see https://github.com/flycheck/flycheck/issues/280
            source-inplace)
  :error-filter
  (lambda (errors)
    (flycheck-sanitize-errors (flycheck-increment-error-columns errors)))
  :error-patterns
  ((error line-start (file-name) ":" line ":" column ":"
          (or "E" "F") ":"
          (id (one-or-more (not (any ":")))) ":"
          (message) line-end)
   (warning line-start (file-name) ":" line ":" column ":"
            (or "W" "R") ":"
            (id (one-or-more (not (any ":")))) ":"
            (message) line-end)
   (info line-start (file-name) ":" line ":" column ":"
         "C:" (id (one-or-more (not (any ":")))) ":"
         (message) line-end))
  :modes python-mode)

* Wed 17 Dec 2014 02:20:11 AM JST
config
* Wed 17 Dec 2014 02:20:13 AM JST
config-file
* Wed 17 Dec 2014 02:21:44 AM JST
python-mypylint
* Wed 17 Dec 2014 02:22:50 AM JST
flycheck-checker
* Wed 17 Dec 2014 02:24:58 AM JST
flycheck-pylintrc
* Wed 17 Dec 2014 02:32:03 AM JST
python-pylint
* Wed 17 Dec 2014 02:32:53 AM JST
python-pycompile
* Wed 17 Dec 2014 02:35:33 AM JST
(flycheck-pylintrc (expand-file-name ".pylint" my-data-dir))
* Wed 17 Dec 2014 02:39:05 AM JST
python-pylint
* Wed 17 Dec 2014 02:42:00 AM JST
flycheck-pylintrc
* Wed 17 Dec 2014 02:42:25 AM JST
(flycheck-define-checker python-pylint
  "A Python syntax and style checker using Pylint.

This syntax checker requires Pylint 1.0 or newer.

See URL `http://www.pylint.org/'."
  ;; -r n disables the scoring report
  :command ("pylint" "-r" "n"
            "--msg-template" "{path}:{line}:{column}:{C}:{msg_id}:{msg}"
            (config-file "--rcfile" flycheck-pylintrc)
            ;; Need `source-inplace' for relative imports (e.g. `from .foo
            ;; import bar'), see https://github.com/flycheck/flycheck/issues/280
            source-inplace)
  :error-filter
  (lambda (errors)
    (flycheck-sanitize-errors (flycheck-increment-error-columns errors)))
  :error-patterns
  ((error line-start (file-name) ":" line ":" column ":"
          (or "E" "F") ":"
          (id (one-or-more (not (any ":")))) ":"
          (message) line-end)
   (warning line-start (file-name) ":" line ":" column ":"
            (or "W" "R") ":"
            (id (one-or-more (not (any ":")))) ":"
            (message) line-end)
   (info line-start (file-name) ":" line ":" column ":"
         "C:" (id (one-or-more (not (any ":")))) ":"
         (message) line-end))
  :modes python-mode)

* Wed 17 Dec 2014 02:42:40 AM JST
"--rcfile" flycheck-pylintrc
* Wed 17 Dec 2014 02:43:22 AM JST
E0102
* Wed 17 Dec 2014 02:43:58 AM JST
(flycheck-define-checker python-pylint
  "A Python syntax and style checker using Pylint.

This syntax checker requires Pylint 1.0 or newer.

See URL `http://www.pylint.org/'."
  ;; -r n disables the scoring report
  :command ("pylint" "-r" "n" "-d" "E0102"
            "--msg-template" "{path}:{line}:{column}:{C}:{msg_id}:{msg}"
            (config-file "--rcfile" flycheck-pylintrc)
            ;; Need `source-inplace' for relative imports (e.g. `from .foo
            ;; import bar'), see https://github.com/flycheck/flycheck/issues/280
            source-inplace)
  :error-filter
  (lambda (errors)
    (flycheck-sanitize-errors (flycheck-increment-error-columns errors)))
  :error-patterns
  ((error line-start (file-name) ":" line ":" column ":"
          (or "E" "F") ":"
          (id (one-or-more (not (any ":")))) ":"
          (message) line-end)
   (warning line-start (file-name) ":" line ":" column ":"
            (or "W" "R") ":"
            (id (one-or-more (not (any ":")))) ":"
            (message) line-end)
   (info line-start (file-name) ":" line ":" column ":"
         "C:" (id (one-or-more (not (any ":")))) ":"
         (message) line-end))
  :modes python-mode)
* Wed 17 Dec 2014 02:45:38 AM JST
overwrite
* Wed 17 Dec 2014 03:46:57 AM JST
getBound()
* Wed 17 Dec 2014 10:21:32 AM JST
get_bounds
* Wed 17 Dec 2014 10:21:40 AM JST
get_bounds
* Wed 17 Dec 2014 10:21:57 AM JST
    def set_bounds(self, x, y, width, height):
        """function set_bounds
        
        x: 
        y: 
        width: 
        height: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    

* Wed 17 Dec 2014 10:22:20 AM JST
    def set_location(self, point):
        """function set_location
        
        point: Point
        
        returns None
        """
        return None # should raise NotImplementedError()
    

* Wed 17 Dec 2014 10:22:27 AM JST
kwargs
* Wed 17 Dec 2014 10:22:28 AM JST
args, **kwargs
* Wed 17 Dec 2014 10:22:36 AM JST
args
* Wed 17 Dec 2014 10:22:39 AM JST
self.point.set(*, **kwargs)
* Wed 17 Dec 2014 10:23:16 AM JST
width, height
* Wed 17 Dec 2014 10:23:24 AM JST
self.dimension.set(*args, **kwargs)
* Wed 17 Dec 2014 10:23:37 AM JST
    def set_size(self, size):
        """function set_size
        
        size: Dimension
        
        returns None
        """
        return None # should raise NotImplementedError()

* Wed 17 Dec 2014 10:23:51 AM JST
(0, 0, 0, 0) == self.get()
* Wed 17 Dec 2014 10:24:02 AM JST
    def grow(self, dx = 0, dy = 0):
        """function grow
        
        dx: int
        dy: int
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def grow(self, point):
        """function grow
        
        point: Point
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()

* Wed 17 Dec 2014 10:25:26 AM JST
    def set_top_left(self, x):
        """function set_top_left
        
        x: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_top_left(self, point):
        """function set_top_left
        
        point: Point
        
        returns None
        """
        return None # should raise NotImplementedError()
    

* Wed 17 Dec 2014 10:25:40 AM JST
    def set_bottom_right(self, x, y):
        """function set_bottom_right
        
        x: int
        y: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_bottom_right(self, point):
        """function set_bottom_right
        
        point: Point
        
        returns None
        """
        return None # should raise NotImplementedError()
    

* Wed 17 Dec 2014 10:25:50 AM JST
    def set_bottom_left(self, x, y):
        """function set_bottom_left
        
        x: int
        y: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_bottom_left(self, point):
        """function set_bottom_left
        
        point: Point
        
        returns None
        """
        return None # should raise NotImplementedError()
    

* Wed 17 Dec 2014 10:26:04 AM JST
    def set_top_right(self, x, y):
        """function set_top_right
        
        x: int
        y: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_top_right(self, point):
        """function set_top_right
        
        point: Point
        
        returns None
        """
        return None # should raise NotImplementedError()
    

* Wed 17 Dec 2014 10:33:48 AM JST
    def __contains__(self, rect):
        """function __contains__
        
        rect: Rectangle
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __contains__(self, x, y):
        """function __contains__
        
        x: int
        y: int
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __contains__(self, point):
        """function __contains__
        
        point: Point
        
        returns bool
        """
        return None # should raise NotImplementedError()

* Wed 17 Dec 2014 10:35:32 AM JST
callable
* Wed 17 Dec 2014 10:37:00 AM JST
    def set_bounds(self, rect):
        """function set_bounds
        
        rect: Rectangle
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_location(self):

* Wed 17 Dec 2014 10:37:04 AM JST
    def set_bounds(self, rect):
        """function set_bounds
        
        rect: Rectangle
        
        returns None
        """
        return None # should raise NotImplementedError()

* Wed 17 Dec 2014 10:40:12 AM JST
Hight
* Wed 17 Dec 2014 10:41:20 AM JST

* Wed 17 Dec 2014 10:41:20 AM JST

* Wed 17 Dec 2014 10:41:20 AM JST
        return None # should raise NotImplementedError()

* Wed 17 Dec 2014 10:42:02 AM JST
size
* Wed 17 Dec 2014 10:42:25 AM JST
@overload()
* Wed 17 Dec 2014 10:44:03 AM JST

* Wed 17 Dec 2014 10:44:03 AM JST

* Wed 17 Dec 2014 10:44:03 AM JST
    @overload()

* Wed 17 Dec 2014 10:45:16 AM JST
from xahk2.xobj.rectangle import Rectangle
Rectangle()

* Wed 17 Dec 2014 10:48:27 AM JST
from . 
* Wed 17 Dec 2014 10:48:28 AM JST
from . 
* Wed 17 Dec 2014 10:48:30 AM JST
from . 
* Wed 17 Dec 2014 10:48:32 AM JST
from . 
* Wed 17 Dec 2014 10:49:01 AM JST
xahk2.xobj.side
* Wed 17 Dec 2014 10:49:04 AM JST
xahk2.xobj.
* Wed 17 Dec 2014 10:51:04 AM JST
xahk2.xobj
* Wed 17 Dec 2014 10:51:54 AM JST
side
* Wed 17 Dec 2014 10:52:09 AM JST
side
* Wed 17 Dec 2014 10:52:10 AM JST
side
* Wed 17 Dec 2014 10:52:18 AM JST
coordinate
* Wed 17 Dec 2014 10:52:26 AM JST
coordinate.
* Wed 17 Dec 2014 10:52:28 AM JST
coordinate.
* Wed 17 Dec 2014 10:52:31 AM JST
              
* Wed 17 Dec 2014 10:52:33 AM JST
              
* Wed 17 Dec 2014 10:53:00 AM JST
point
* Wed 17 Dec 2014 10:53:08 AM JST
dimension
* Wed 17 Dec 2014 10:53:15 AM JST
point.
* Wed 17 Dec 2014 10:53:16 AM JST
dimension.
* Wed 17 Dec 2014 10:53:22 AM JST
point.
* Wed 17 Dec 2014 10:53:24 AM JST
dimension.
* Wed 17 Dec 2014 10:53:40 AM JST
Rectangle()
* Wed 17 Dec 2014 10:56:46 AM JST
    @overload(Rectangle, (XCoordinate, int, None), (YCoordinate, int, None),
              (Width, int, None), (Height, int, None))

* Wed 17 Dec 2014 10:56:57 AM JST
XCoordinate, 
* Wed 17 Dec 2014 10:56:58 AM JST
Rectangle, (XCoordinate, 
* Wed 17 Dec 2014 10:57:01 AM JST
None)
* Wed 17 Dec 2014 10:57:15 AM JST
None)
* Wed 17 Dec 2014 10:57:17 AM JST
Width, 
* Wed 17 Dec 2014 10:57:49 AM JST
from xahk2.xobj.rectangle import Rectangle
Rectangle()
r=Rectangle()
r.set_bounds(1)
r.set_bounds(1,2)
r.set_bounds(1,2,3)
r.set_bounds(1,2,3,4)

* Wed 17 Dec 2014 10:57:56 AM JST

* Wed 17 Dec 2014 10:57:56 AM JST

* Wed 17 Dec 2014 10:57:56 AM JST
r.set_bounds(1)

* Wed 17 Dec 2014 10:57:56 AM JST
r.set_bounds(1)

* Wed 17 Dec 2014 10:57:56 AM JST
r.set_bounds(1)
r.set_bounds(1,2)

* Wed 17 Dec 2014 10:57:56 AM JST
r.set_bounds(1)
r.set_bounds(1,2)

* Wed 17 Dec 2014 10:57:56 AM JST
r.set_bounds(1)
r.set_bounds(1,2)
r.set_bounds(1,2,3)

* Wed 17 Dec 2014 10:57:58 AM JST

* Wed 17 Dec 2014 10:57:58 AM JST

* Wed 17 Dec 2014 10:57:58 AM JST
Rectangle()

* Wed 17 Dec 2014 10:57:59 AM JST
from xahk2.xobj.rectangle import Rectangle
r=Rectangle()

* Wed 17 Dec 2014 10:58:09 AM JST
Rectangle, 
* Wed 17 Dec 2014 10:58:15 AM JST
r.set_bounds(1,2,3,4)
* Wed 17 Dec 2014 10:59:10 AM JST
from whatever import _
* Wed 17 Dec 2014 10:59:46 AM JST
from xahk2.xobj.rectangle import Rectangle
r=Rectangle()

* Wed 17 Dec 2014 11:00:31 AM JST
r.set_bounds(1,2,3,4)
* Wed 17 Dec 2014 11:31:36 AM JST
arg
* Wed 17 Dec 2014 11:33:05 AM JST
key
* Wed 17 Dec 2014 11:33:45 AM JST
class
* Wed 17 Dec 2014 11:34:42 AM JST
Rectangle
* Wed 17 Dec 2014 11:34:50 AM JST
                if key in arguments:
                    raise TypeError()

* Wed 17 Dec 2014 11:35:02 AM JST
arguments.setdefault('size', arg)
* Wed 17 Dec 2014 11:35:05 AM JST
size
* Wed 17 Dec 2014 11:35:20 AM JST
arguments
* Wed 17 Dec 2014 11:35:23 AM JST
                if key in arguments:
                    raise TypeError()

* Wed 17 Dec 2014 11:35:28 AM JST
key
* Wed 17 Dec 2014 11:35:31 AM JST
size
* Wed 17 Dec 2014 11:35:34 AM JST
key
* Wed 17 Dec 2014 11:35:37 AM JST
key
* Wed 17 Dec 2014 11:38:51 AM JST
point
* Wed 17 Dec 2014 11:39:57 AM JST
rect
* Wed 17 Dec 2014 11:51:42 AM JST
args
* Wed 17 Dec 2014 11:51:50 AM JST
keywords
* Wed 17 Dec 2014 12:03:23 PM JST
el
* Wed 17 Dec 2014 12:05:10 PM JST
pass
* Wed 17 Dec 2014 12:05:43 PM JST
        
* Wed 17 Dec 2014 12:06:12 PM JST

* Wed 17 Dec 2014 12:06:14 PM JST
width
* Wed 17 Dec 2014 12:06:17 PM JST
Width
* Wed 17 Dec 2014 12:08:06 PM JST
self.
* Wed 17 Dec 2014 12:09:40 PM JST
(100, 200, 300, 400)
* Wed 17 Dec 2014 12:10:31 PM JST
100
* Wed 17 Dec 2014 12:10:34 PM JST
        
* Wed 17 Dec 2014 12:10:41 PM JST

* Wed 17 Dec 2014 12:10:50 PM JST

* Wed 17 Dec 2014 12:13:08 PM JST
    def test_set_bounds_int(self, ):
        x, y, w, h = 100, 200, 300, 400
        self.rect.set_bounds(x, y, w, h)
        self.assertEqual(x, self.rect.get_x())
        self.assertEqual(y, self.rect.get_y())
        self.assertEqual(w, self.rect.get_width())
        self.assertEqual(h, self.rect.get_height())
        

* Wed 17 Dec 2014 12:14:41 PM JST

* Wed 17 Dec 2014 12:14:41 PM JST

* Wed 17 Dec 2014 12:14:41 PM JST
    deft

* Wed 17 Dec 2014 12:15:00 PM JST
        y = 
* Wed 17 Dec 2014 12:15:13 PM JST

* Wed 17 Dec 2014 12:15:43 PM JST
        self.assertEqual(x, self.rect.get_x())
        self.assertEqual(y, self.rect.get_y())
        self.assertEqual(w, self.rect.get_width())
        self.assertEqual(h, self.rect.get_height())

* Wed 17 Dec 2014 12:16:41 PM JST
x, y, w, h = 100, 200, 300, 400
* Wed 17 Dec 2014 12:17:28 PM JST
100, 200, 300, 400
* Wed 17 Dec 2014 12:18:09 PM JST

* Wed 17 Dec 2014 12:18:09 PM JST

* Wed 17 Dec 2014 12:18:10 PM JST
        cls.x2, cls.y2, cls.width2, cls.height2 = 100, 200, 300, 400

* Wed 17 Dec 2014 12:18:13 PM JST
x
* Wed 17 Dec 2014 12:18:13 PM JST
self.x
* Wed 17 Dec 2014 12:18:38 PM JST

* Wed 17 Dec 2014 12:18:38 PM JST

* Wed 17 Dec 2014 12:18:38 PM JST
        x, y, w, h = 100, 200, 300, 400

* Wed 17 Dec 2014 12:20:41 PM JST

* Wed 17 Dec 2014 12:20:42 PM JST

* Wed 17 Dec 2014 12:20:42 PM JST
        x, y, w, h = 100, 200, 300, 400

* Wed 17 Dec 2014 12:21:11 PM JST
self.
* Wed 17 Dec 2014 12:21:19 PM JST
rectangle.Rectangle(self.x2, self.y2, self.w2, self.h2)
* Wed 17 Dec 2014 12:21:25 PM JST

* Wed 17 Dec 2014 12:21:25 PM JST

* Wed 17 Dec 2014 12:21:25 PM JST
        rect = rectangle.Rectangle(self.x2, self.y2, self.w2, self.h2)

* Wed 17 Dec 2014 12:21:31 PM JST
        self.assertEqual(self.x2, self.rect.get_x())
        self.assertEqual(self.y2, self.rect.get_y())
        self.assertEqual(self.w2, self.rect.get_width())
        self.assertEqual(self.h2, self.rect.get_height())

* Wed 17 Dec 2014 12:28:44 PM JST
x
* Wed 17 Dec 2014 12:28:47 PM JST
y2
* Wed 17 Dec 2014 12:28:49 PM JST
w2
* Wed 17 Dec 2014 12:28:52 PM JST
h2
* Wed 17 Dec 2014 12:29:28 PM JST
self.rect = rectangle.Rectangle(self.x, self.y, self.width
* Wed 17 Dec 2014 12:31:07 PM JST
re
* Wed 17 Dec 2014 12:31:07 PM JST
self.re
* Wed 17 Dec 2014 12:31:28 PM JST
x
* Wed 17 Dec 2014 12:31:28 PM JST
self.x
* Wed 17 Dec 2014 12:34:07 PM JST
        self.assertEqual(self.x, self.rect.get_x())
        self.assertEqual(self.y, self.rect.get_y())
        self.assertEqual(self.w, self.rect.get_width())
        self.assertEqual(self.h, self.rect.get_height())

* Wed 17 Dec 2014 12:34:50 PM JST
object
* Wed 17 Dec 2014 12:35:23 PM JST
        self.rect.set_bounds(self.x2, self.y2, self.w2, self.h2)
        self.assertEqual(self.x2, self.rect.get_x())
        self.assertEqual(self.y2, self.rect.get_y())
        self.assertEqual(self.w2, self.rect.get_width())
        self.assertEqual(self.h2, self.rect.get_height())

* Wed 17 Dec 2014 12:45:54 PM JST
duplicate
* Wed 17 Dec 2014 12:53:07 PM JST
expects
* Wed 17 Dec 2014 12:54:41 PM JST
expects = point.Point(self.x, self.y)
* Wed 17 Dec 2014 12:54:51 PM JST
self.assertEqual(expects, self.rect.get_location())
* Wed 17 Dec 2014 12:55:24 PM JST
        self.assertEqual(self.x2, self.rect.get_x())
        self.assertEqual(self.y2, self.rect.get_y())

* Wed 17 Dec 2014 12:55:47 PM JST
x
* Wed 17 Dec 2014 12:55:47 PM JST
self.x
* Wed 17 Dec 2014 12:56:39 PM JST
        expects = point.Point(self.x2, self.y2)
        self.assertEqual(expects, self.rect.get_location())
        self.assertEqual(self.x2, self.rect.get_x())
        self.assertEqual(self.y2, self.rect.get_y())

* Wed 17 Dec 2014 12:58:00 PM JST
point.Point(self.x2, self.y2)
* Wed 17 Dec 2014 12:58:32 PM JST
        self.assertEqual(expects, self.rect.get_location())
        self.assertEqual(self.x2, self.rect.get_x())
        self.assertEqual(self.y2, self.rect.get_y())

* Wed 17 Dec 2014 01:01:12 PM JST
        expects = point.Point(self.x2, self.y2)
        self.rect.set_location(expects)
        self.assertEqual(expects, self.rect.get_location())
        self.assertEqual(self.x2, self.rect.get_x())
        self.assertEqual(self.y2, self.rect.get_y())

* Wed 17 Dec 2014 01:02:58 PM JST
        self.rect.set_x(self.x2)
        self.assertEqual(self.x2, self.rect.get_x())

* Wed 17 Dec 2014 01:03:31 PM JST
self.assertEqual(self.x, self.rect.get_x())
* Wed 17 Dec 2014 01:04:17 PM JST
assert
* Wed 17 Dec 2014 01:04:17 PM JST
self.assert
* Wed 17 Dec 2014 01:06:56 PM JST
lsef.
* Wed 17 Dec 2014 01:07:38 PM JST
        self.rect.set_location(self.x2, self.y2)
        expects = point.Point(self.x2, self.y2)
        self.assertEqual(expects, self.rect.get_location())
        self.assertEqual(self.x2, self.rect.get_x())
        self.assertEqual(self.y2, self.rect.get_y())
        #
        self.rect.set_location(x=self.x, y=self.y)
        expects = point.Point(self.x, self.y)
        self.assertEqual(expects, self.rect.get_location())
        self.assertEqual(self.x, self.rect.get_x())
        self.assertEqual(self.y, self.rect.get_y())

* Wed 17 Dec 2014 01:08:30 PM JST
Point
* Wed 17 Dec 2014 01:08:31 PM JST
point.Point
* Wed 17 Dec 2014 01:09:40 PM JST
dimension.Dimension(self.w2, self.h2)
* Wed 17 Dec 2014 01:09:50 PM JST
        self.assertEqual(expects, self.rect.get_size())
        self.assertEqual(self.w2, self.rect.get_width())
        self.assertEqual(self.h2, self.rect.get_height())

* Wed 17 Dec 2014 01:10:20 PM JST
rec
* Wed 17 Dec 2014 01:10:21 PM JST
self.rec
* Wed 17 Dec 2014 01:10:23 PM JST
expec
* Wed 17 Dec 2014 01:11:07 PM JST
        self.rect.set_y(self.y2)
        self.assertEqual(self.y2, self.rect.get_y())
        self.rect.set_y(self.y)
        self.assertEqual(self.y, self.rect.get_y())

* Wed 17 Dec 2014 01:13:59 PM JST
self.assertEqual(self.w, self.rect.get_width())
* Wed 17 Dec 2014 01:14:52 PM JST
asse
* Wed 17 Dec 2014 01:14:52 PM JST
self.asse
* Wed 17 Dec 2014 01:14:56 PM JST
        self.rect.set_width(self.w2)
        self.assertEqual(self.w2, self.rect.get_width())
        self.rect.set_width(self.w)

* Wed 17 Dec 2014 01:14:59 PM JST
        self.rect.set_width(self.w2)
        self.assertEqual(self.w2, self.rect.get_width())
        self.rect.set_width(self.w)
        self.assertEqual(self.w, self.rect.get_width())

* Wed 17 Dec 2014 01:17:55 PM JST
self.rect.set_bounds(0, 0, 0, 0)
* Wed 17 Dec 2014 01:18:01 PM JST
self.assertTrue(self.rect.isempty())
* Wed 17 Dec 2014 01:23:38 PM JST
(20, 30, 10, 20)
* Wed 17 Dec 2014 01:24:02 PM JST
wx.Rect(0, 10, 50, 60)
* Wed 17 Dec 2014 01:24:18 PM JST
(10, 20, 30, 40)
* Wed 17 Dec 2014 01:24:38 PM JST
self.assertEqual(expects, self.rect.get_bounds())
* Wed 17 Dec 2014 01:25:07 PM JST
        expects = (0, 10, 50, 60)
        self.rect.grow(10, 10)
        self.assertEqual(expects, self.rect.get_bounds())
        expects = (10, 20, 30, 40)
        self.rect.grow(-10, -10)
        self.assertEqual(expects, self.rect.get_bounds())

* Wed 17 Dec 2014 01:31:30 PM JST
reason
* Wed 17 Dec 2014 01:34:06 PM JST
skipTest(${1:'${2:reason}'})
* Wed 17 Dec 2014 01:35:38 PM JST
${3:self.skipTest(${5:'${8:reason}'})}
* Wed 17 Dec 2014 01:37:35 PM JST
reason
* Wed 17 Dec 2014 01:37:52 PM JST
NotImplemented
* Wed 17 Dec 2014 01:38:11 PM JST
Not Implemented
* Wed 17 Dec 2014 01:56:08 PM JST
self.
* Wed 17 Dec 2014 01:56:12 PM JST
self.
* Wed 17 Dec 2014 02:03:09 PM JST
    def test_get_top_right(self, ):
        self.skipTest('Not Implemented')

    def test_set_top_right(self, ):
        self.skipTest('Not Implemented')


* Wed 17 Dec 2014 02:03:28 PM JST
get_top_right
* Wed 17 Dec 2014 02:08:35 PM JST
self.width
* Wed 17 Dec 2014 02:08:44 PM JST
self.x
* Wed 17 Dec 2014 02:24:04 PM JST
expects = point.Point(int(self.w) + int(self.x) - 1, self.y)
* Wed 17 Dec 2014 02:24:18 PM JST
self.y
* Wed 17 Dec 2014 02:25:55 PM JST
        expects = point.Point(int(self.w) + int(self.x) - 1,
                              int(self.h) + int(self.y) - 1)
        self.assertEqual(expects, self.rect.get_bottom_right())

* Wed 17 Dec 2014 02:26:08 PM JST
                              
* Wed 17 Dec 2014 02:32:44 PM JST
self.x 
* Wed 17 Dec 2014 02:40:39 PM JST
self.assertEqual(self.y, self.rect.get_top())
* Wed 17 Dec 2014 02:40:56 PM JST
        self.rect.set_top(self.y2)
        self.assertEqual(self.y2, self.rect.get_top())

* Wed 17 Dec 2014 02:41:14 PM JST
wx.Rect(10, 20, 30, 40)
* Wed 17 Dec 2014 02:45:24 PM JST
get_
* Wed 17 Dec 2014 02:45:25 PM JST
rect.get_
* Wed 17 Dec 2014 02:45:25 PM JST
self.rect.get_
* Wed 17 Dec 2014 02:47:13 PM JST
self.assertEqual(expects, self.rect.get_right())
* Wed 17 Dec 2014 05:54:40 PM JST
        expects = point.Point(self.x2, self.y2)
        self.rect.set_top_left(expect)

* Wed 17 Dec 2014 05:54:52 PM JST
reason
* Wed 17 Dec 2014 06:13:39 PM JST

* Wed 17 Dec 2014 06:16:23 PM JST

* Wed 17 Dec 2014 06:16:29 PM JST
width
* Wed 17 Dec 2014 06:20:00 PM JST
        self.assertEqual(x, self.rect.get_x())
        self.assertEqual(y, self.rect.get_y())
        self.assertEqual(width, self.rect.get_width())
        self.assertEqual(height, self.rect.get_height())

* Wed 17 Dec 2014 06:20:23 PM JST
20
* Wed 17 Dec 2014 06:20:27 PM JST

* Wed 17 Dec 2014 06:20:27 PM JST

* Wed 17 Dec 2014 06:20:27 PM JST
        y = 20

* Wed 17 Dec 2014 06:20:30 PM JST
width
* Wed 17 Dec 2014 06:20:34 PM JST
91
* Wed 17 Dec 2014 06:20:36 PM JST

* Wed 17 Dec 2014 06:20:36 PM JST

* Wed 17 Dec 2014 06:20:36 PM JST
        width = 91

* Wed 17 Dec 2014 06:20:41 PM JST
height
* Wed 17 Dec 2014 06:20:47 PM JST
181
* Wed 17 Dec 2014 06:20:48 PM JST

* Wed 17 Dec 2014 06:20:48 PM JST

* Wed 17 Dec 2014 06:20:49 PM JST
        height = 181

* Wed 17 Dec 2014 06:21:15 PM JST
200
* Wed 17 Dec 2014 06:21:19 PM JST
91
* Wed 17 Dec 2014 06:21:22 PM JST
400
* Wed 17 Dec 2014 06:21:25 PM JST

* Wed 17 Dec 2014 06:21:25 PM JST

* Wed 17 Dec 2014 06:21:25 PM JST
        y = 

* Wed 17 Dec 2014 06:21:25 PM JST
        y = 

* Wed 17 Dec 2014 06:21:25 PM JST
        y = 
        width = 

* Wed 17 Dec 2014 06:21:25 PM JST
        y = 
        width = 

* Wed 17 Dec 2014 06:21:25 PM JST
        y = 
        width = 
        height = 

* Wed 17 Dec 2014 06:23:42 PM JST
self.rect.set_bottom_right((self.x2, self.y2))
* Wed 17 Dec 2014 06:23:49 PM JST
        self.assertEqual(x, self.rect.get_x())
        self.assertEqual(y, self.rect.get_y())
        self.assertEqual(width, self.rect.get_width())
        self.assertEqual(height, self.rect.get_height())

* Wed 17 Dec 2014 06:44:01 PM JST
self
* Wed 17 Dec 2014 06:52:38 PM JST
randam
* Wed 17 Dec 2014 06:52:38 PM JST
import randam
* Wed 17 Dec 2014 06:52:46 PM JST
range
* Wed 17 Dec 2014 06:53:35 PM JST
(-1000, 3000)
* Wed 17 Dec 2014 06:53:37 PM JST
1000
* Wed 17 Dec 2014 06:53:41 PM JST
3000
* Wed 17 Dec 2014 06:53:50 PM JST
1000
* Wed 17 Dec 2014 06:53:53 PM JST
3000
* Wed 17 Dec 2014 06:57:40 PM JST
randrange(min_, max_)
* Wed 17 Dec 2014 06:59:35 PM JST
(newx, newy)
* Wed 17 Dec 2014 07:00:05 PM JST
self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())
* Wed 17 Dec 2014 07:00:07 PM JST

* Wed 17 Dec 2014 07:00:07 PM JST

* Wed 17 Dec 2014 07:00:07 PM JST
        self.skipTest('Not Implemented')

* Wed 17 Dec 2014 07:00:42 PM JST
randrange(min_, max_)
* Wed 17 Dec 2014 07:00:44 PM JST

* Wed 17 Dec 2014 07:00:44 PM JST

* Wed 17 Dec 2014 07:00:44 PM JST
            y = 

* Wed 17 Dec 2014 07:00:51 PM JST
randrange(min_, max_)
* Wed 17 Dec 2014 07:00:53 PM JST

* Wed 17 Dec 2014 07:00:53 PM JST

* Wed 17 Dec 2014 07:00:53 PM JST
            h = 

* Wed 17 Dec 2014 09:47:19 PM JST
min_
* Wed 17 Dec 2014 09:47:22 PM JST
min_
* Wed 17 Dec 2014 09:49:07 PM JST
            x, y = randrange(min_, max_), randrange(min_, max_)
            w, h = randrange(0, max_), randrange(0, max_)
            self.wxrect.Set(x, y, w, h)
            self.rect.set_bounds(x, y, w, h)
            self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())

* Wed 17 Dec 2014 09:49:33 PM JST

* Wed 17 Dec 2014 09:49:33 PM JST

* Wed 17 Dec 2014 09:49:33 PM JST
        min_, max_ = -1000, 3000

* Wed 17 Dec 2014 09:50:31 PM JST
cls
* Wed 17 Dec 2014 09:50:37 PM JST
cls
* Wed 17 Dec 2014 09:50:43 PM JST
cls
* Wed 17 Dec 2014 09:51:37 PM JST
cls
* Wed 17 Dec 2014 09:52:20 PM JST
randrange(self.min, self.max)
* Wed 17 Dec 2014 09:52:26 PM JST
newy 
* Wed 17 Dec 2014 09:55:55 PM JST
        for _ in range(0, 100):
            self.random_set()
            newx = randrange(self.min, self.max)
            newy = randrange(self.min, self.max)
            self.wxrect.SetTopLeft((newx, newy))
            self.rect.set_top_left((newx, newy))
            self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())

* Wed 17 Dec 2014 10:00:55 PM JST
    def test_set_top_left(self, ):
        for _ in range(0, 100):
            self.random_set()
            newx = randrange(self.min, self.max)
            newy = randrange(self.min, self.max)
            self.wxrect.SetTopLeft((newx, newy))
            self.rect.set_top_left((newx, newy))
            self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())

* Wed 17 Dec 2014 10:01:20 PM JST
    def test_set_top_right(self, ):
        for _ in range(0, 100):
            self.random_set()
            newx = randrange(self.min, self.max)
            newy = randrange(self.min, self.max)
            self.wxrect.SetTopRight((newx, newy))
            self.rect.set_top_right((newx, newy))
            self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())


* Wed 17 Dec 2014 10:01:54 PM JST
    def test_set_bottom_left(self, ):
        for _ in range(0, 100):
            self.random_set()
            newx = randrange(self.min, self.max)
            newy = randrange(self.min, self.max)
            self.wxrect.SetBottomLeft((newx, newy))
            self.rect.set_bottom_left((newx, newy))
            self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())


* Wed 17 Dec 2014 10:02:08 PM JST
    def test_set_bottom_right(self, ):
        for _ in range(0, 100):
            self.random_set()
            newx = randrange(self.min, self.max)
            newy = randrange(self.min, self.max)
            self.wxrect.SetBottomRight((newx, newy))
            self.rect.set_bottom_right((newx, newy))
            self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())


* Wed 17 Dec 2014 10:08:26 PM JST
self.x
* Wed 17 Dec 2014 10:08:32 PM JST

* Wed 17 Dec 2014 10:08:41 PM JST

* Wed 17 Dec 2014 10:08:46 PM JST

* Wed 17 Dec 2014 10:09:02 PM JST
        self.assertEqual(self.x, self.rect[0])
        self.assertEqual(self.y, self.rect[1])
        self.assertEqual(self.w, self.rect[2])
        self.assertEqual(self.h, self.rect[3])

* Wed 17 Dec 2014 10:58:47 PM JST
self.assertEqual(expects, self.rect.get_bounds())
* Wed 17 Dec 2014 10:59:01 PM JST
self.
* Wed 17 Dec 2014 10:59:06 PM JST
h
* Wed 17 Dec 2014 10:59:06 PM JST
w, h
* Wed 17 Dec 2014 10:59:07 PM JST
y, w, h
* Wed 17 Dec 2014 10:59:07 PM JST
x, y, w, h
* Wed 17 Dec 2014 10:59:10 PM JST
        
* Wed 17 Dec 2014 10:59:25 PM JST

* Wed 17 Dec 2014 10:59:25 PM JST

* Wed 17 Dec 2014 10:59:25 PM JST
        self.assertEqual(expects, rect.get_bounds())

* Wed 17 Dec 2014 10:59:56 PM JST

* Wed 17 Dec 2014 10:59:56 PM JST

* Wed 17 Dec 2014 10:59:56 PM JST
        self.skipTest('Not Implemented')

* Wed 17 Dec 2014 11:00:09 PM JST

* Wed 17 Dec 2014 11:00:10 PM JST

* Wed 17 Dec 2014 11:00:10 PM JST
        self.skipTest()

* Wed 17 Dec 2014 11:00:12 PM JST
        expects = (self.x + self.x2, self.y + self.y2,
                   self.w + self.w2, self.h + self.h2)

* Wed 17 Dec 2014 11:00:57 PM JST
rectan
* Wed 17 Dec 2014 11:01:23 PM JST
    def test___add__rectangle(self, ):
        expects = (self.x + self.x2, self.y + self.y2,
                   self.w + self.w2, self.h + self.h2)
        rect = rectangle.Rectangle(self.x2, self.y2, self.w2, self.h2)
        got = self.rect + rect

* Wed 17 Dec 2014 11:01:51 PM JST
self.assertEqual(expects, rect.get_bounds())
* Wed 17 Dec 2014 11:01:55 PM JST
rect
* Wed 17 Dec 2014 11:02:59 PM JST
        expects = (self.x + self.x2, self.y + self.y2,
                   self.w + self.w2, self.h + self.h2)

* Wed 17 Dec 2014 11:03:04 PM JST
w2
* Wed 17 Dec 2014 11:03:05 PM JST
self
* Wed 17 Dec 2014 11:03:06 PM JST
self.w 
* Wed 17 Dec 2014 11:03:08 PM JST
h2
* Wed 17 Dec 2014 11:03:10 PM JST
self.h2
* Wed 17 Dec 2014 11:03:12 PM JST
                   
* Wed 17 Dec 2014 11:03:59 PM JST
self.assertEqual(expects, got.get_bounds())
* Wed 17 Dec 2014 11:04:12 PM JST

* Wed 17 Dec 2014 11:04:12 PM JST

* Wed 17 Dec 2014 11:04:12 PM JST
        self.skipTest()

* Wed 17 Dec 2014 11:04:18 PM JST
        expects = (self.x + self.x2, self.y + self.y2,
                   self.w + self.w2, self.h + self.h2)
        rect = rectangle.Rectangle(self.x2, self.y2, self.w2, self.h2)
        got = self.rect + rect
        self.assertEqual(expects, got.get_bounds())

* Wed 17 Dec 2014 11:04:27 PM JST
x2
* Wed 17 Dec 2014 11:04:28 PM JST
self.x2
* Wed 17 Dec 2014 11:04:29 PM JST
expects = (self.x 
* Wed 17 Dec 2014 11:04:31 PM JST
y2
* Wed 17 Dec 2014 11:04:32 PM JST
self.y2
* Wed 17 Dec 2014 11:04:33 PM JST
                   
* Wed 17 Dec 2014 11:04:37 PM JST

* Wed 17 Dec 2014 11:04:37 PM JST

* Wed 17 Dec 2014 11:04:37 PM JST
        rect = rectangle.Rectangle(self.x2, self.y2, self.w2, self.h2)

* Wed 17 Dec 2014 11:05:02 PM JST
rect
* Wed 17 Dec 2014 11:12:32 PM JST
None # should raise NotImplementedError()
* Wed 17 Dec 2014 11:21:03 PM JST
Rectangle
* Wed 17 Dec 2014 11:21:06 PM JST
rectangle
* Wed 17 Dec 2014 11:21:14 PM JST
point.
* Wed 17 Dec 2014 11:24:29 PM JST
        expects = (self.x + self.x2, self.y + self.y2,
                   self.w + self.w2, self.h + self.h2)
        rect = self.rect + (self.x2, self.y2, self.w2, self.h2)
        self.assertEqual(expects, rect.get_bounds())

* Wed 17 Dec 2014 11:24:35 PM JST
rect = 
* Wed 17 Dec 2014 11:24:55 PM JST
None # should raise NotImplementedError()
* Wed 17 Dec 2014 11:25:14 PM JST
        expects = (self.x + self.x2, self.y + self.y2,
                   self.w + self.w2, self.h + self.h2)
        rect = rectangle.Rectangle(self.x2, self.y2, self.w2, self.h2)
        got = self.rect + rect
        self.assertEqual(expects, got.get_bounds())

* Wed 17 Dec 2014 11:25:21 PM JST
got = 
* Wed 17 Dec 2014 11:25:26 PM JST
rectangle.Rectangle(self.x2, self.y2, self.w2, self.h2)
* Wed 17 Dec 2014 11:25:29 PM JST

* Wed 17 Dec 2014 11:25:29 PM JST

* Wed 17 Dec 2014 11:25:29 PM JST
        rect = 

* Wed 17 Dec 2014 11:25:34 PM JST
got
* Wed 17 Dec 2014 11:25:55 PM JST
        expects = (self.x + self.x2, self.y + self.y2, self.w, self.h)
        points = point.Point(self.x2, self.y2)
        got = self.rect + points
        self.assertEqual(expects, got.get_bounds())

* Wed 17 Dec 2014 11:26:18 PM JST
point.Point(self.x2, self.y2)
* Wed 17 Dec 2014 11:26:21 PM JST

* Wed 17 Dec 2014 11:26:21 PM JST

* Wed 17 Dec 2014 11:26:21 PM JST
        points = 

* Wed 17 Dec 2014 11:26:23 PM JST
got = 
* Wed 17 Dec 2014 11:26:25 PM JST
got
* Wed 17 Dec 2014 11:26:41 PM JST
        expects = (self.x, self.y, self.w + self.w2, self.h + self.h2)
        size = dimension.Dimension(self.w2, self.h2)
        got = self.rect + size
        self.assertEqual(expects, got.get_bounds())


* Wed 17 Dec 2014 11:26:59 PM JST
dimension.Dimension(self.w2, self.h2)
* Wed 17 Dec 2014 11:27:01 PM JST

* Wed 17 Dec 2014 11:27:01 PM JST

* Wed 17 Dec 2014 11:27:01 PM JST
        size = 

* Wed 17 Dec 2014 11:27:03 PM JST
got = 
* Wed 17 Dec 2014 11:27:07 PM JST
got
* Wed 17 Dec 2014 11:27:54 PM JST
        expects = (self.x + self.x2, self.y + self.y2,
                   self.w + self.w2, self.h + self.h2)
        self.rect += rectangle.Rectangle(self.x2, self.y2, self.w2, self.h2)
        self.assertEqual(expects, self.rect.get_bounds())

* Wed 17 Dec 2014 11:28:14 PM JST
                   
* Wed 17 Dec 2014 11:28:25 PM JST

* Wed 17 Dec 2014 11:28:25 PM JST

* Wed 17 Dec 2014 11:28:25 PM JST
        self.rect += rectangle.Rectangle(self.x2, self.y2, self.w2, self.h2)

* Wed 17 Dec 2014 11:28:43 PM JST
(self.x, self.y, self.w, self.h)
* Wed 17 Dec 2014 11:28:46 PM JST

* Wed 17 Dec 2014 11:28:46 PM JST

* Wed 17 Dec 2014 11:28:46 PM JST
        expects = (self.x, self.y, self.w, self.h)

* Wed 17 Dec 2014 11:28:57 PM JST

* Wed 17 Dec 2014 11:29:23 PM JST
        self.assertTrue(self.rect == (self.x, self.y, self.w, self.h))
        self.assertFalse(self.rect == (self.x2, self.y2, self.w2, self.h2))

* Wed 17 Dec 2014 11:30:07 PM JST
        self.assertTrue(self.rect == (self.x, self.y, self.w, self.h))
        self.assertFalse(self.rect == (self.x2, self.y2, self.w2, self.h2))

* Wed 17 Dec 2014 11:30:31 PM JST
(self.x, self.y, self.w, 1)
* Wed 17 Dec 2014 11:30:42 PM JST
    def test___sub__(self, ):
        self.skipTest('Not Implemented')


* Wed 17 Dec 2014 11:30:46 PM JST
    def test___sub__(self, ):
        self.skipTest('Not Implemented')

    def test___isub__(self, ):
        self.skipTest('Not Implemented')


* Wed 17 Dec 2014 11:33:02 PM JST
        expects = (self.x + self.x2, self.y + self.y2,
                   self.w + self.w2, self.h + self.h2)
        rect = self.rect + (self.x2, self.y2, self.w2, self.h2)
        self.assertEqual(expects, rect.get_bounds())

* Wed 17 Dec 2014 11:33:49 PM JST
x + 
* Wed 17 Dec 2014 11:33:49 PM JST
self.x + 
* Wed 17 Dec 2014 11:33:55 PM JST
y + 
* Wed 17 Dec 2014 11:33:55 PM JST
self.y + 
* Wed 17 Dec 2014 11:34:00 PM JST
w + 
* Wed 17 Dec 2014 11:34:01 PM JST
self.w + 
* Wed 17 Dec 2014 11:34:06 PM JST
h + 
* Wed 17 Dec 2014 11:34:06 PM JST
self.h + 
* Wed 17 Dec 2014 11:34:40 PM JST
        self.rect.set_bounds((self.x2, self.y2, self.w2, self.h2))
        expects = (self.x2 - self.x, self.y2 - self.y,
                   self.w2 - self.w, self.h2 - self.h)
        rect = self.rect + (self.x, self.y, self.w, self.h)
        self.assertEqual(expects, rect.get_bounds())

* Wed 17 Dec 2014 11:37:01 PM JST
        self.rect.set_bounds((self.x2, self.y2, self.w2, self.h2))
        expects = (self.x2 - self.x, self.y2 - self.y,
                   self.w2 - self.w, self.h2 - self.h)
        rect = self.rect + rectangle.Rectangle(self.x, self.y, self.w, self.h)
        self.assertEqual(expects, rect.get_bounds())

* Wed 17 Dec 2014 11:37:29 PM JST
                   
* Wed 17 Dec 2014 11:37:38 PM JST
Rectangle
* Wed 17 Dec 2014 11:37:38 PM JST
rectangle.Rectangle
* Wed 17 Dec 2014 11:37:58 PM JST
    def test___sub__point(self, ):
        self.rect.set_bounds((self.x2, self.y2, self.w2, self.h2))
        expects = (self.x2 - self.x, self.y2 - self.y, self.w2, self.h2)
        rect = self.rect + point.Point(self.x, self.y)
        self.assertEqual(expects, rect.get_bounds())


* Wed 17 Dec 2014 11:38:31 PM JST
x
* Wed 17 Dec 2014 11:38:31 PM JST
self.x
* Wed 17 Dec 2014 11:38:38 PM JST
Point
* Wed 17 Dec 2014 11:38:39 PM JST
point.Point
* Wed 17 Dec 2014 11:39:52 PM JST
        expects = (self.x + self.x2, self.y + self.y2,
                   self.w + self.w2, self.h + self.h2)
        self.rect += (self.x2, self.y2, self.w2, self.h2)
        self.assertEqual(expects, self.rect.get_bounds())

* Wed 17 Dec 2014 11:40:16 PM JST
None
* Wed 17 Dec 2014 11:40:18 PM JST
None
* Wed 17 Dec 2014 11:40:22 PM JST
 # should raise NotImplementedError()
* Wed 17 Dec 2014 11:40:23 PM JST
None
* Wed 17 Dec 2014 11:40:24 PM JST
None # should raise NotImplementedError()
* Wed 17 Dec 2014 11:41:39 PM JST
    def test___isub__tuple(self, ):
        expects = (self.x + self.x2, self.y + self.y2,
                   self.w + self.w2, self.h + self.h2)
        self.rect -= (self.x2, self.y2, self.w2, self.h2)
        self.assertEqual(expects, self.rect.get_bounds())


* Wed 17 Dec 2014 11:42:36 PM JST
    def test___isub__rectangle(self, ):
        expects = (self.x + self.x2, self.y + self.y2,
                   self.w + self.w2, self.h + self.h2)
        self.rect -= rectangle.Rectangle(self.x2, self.y2, self.w2, self.h2)
        self.assertEqual(expects, self.rect.get_bounds())

* Wed 17 Dec 2014 11:42:46 PM JST
Rectangle
* Wed 17 Dec 2014 11:42:46 PM JST
rectangle.Rectangle
* Wed 17 Dec 2014 11:43:14 PM JST
        expects = (self.x2 - self.x, self.y2 - self.y,
                   self.w2 - self.w, self.h2 - self.h)

* Wed 17 Dec 2014 11:43:32 PM JST
        expects = (self.x2 - self.x, self.y2 - self.y, self.w2, self.h2)

* Wed 17 Dec 2014 11:43:46 PM JST
self.rect.set_bounds((self.x2, self.y2, self.w2, self.h2))
* Wed 17 Dec 2014 11:44:14 PM JST
expects = (self.x2 - self.x, self.y2 - self.y, self.w2, self.h2)
* Wed 17 Dec 2014 11:44:29 PM JST
    def test___isub__point(self, ):
        self.rect.set_bounds((self.x2, self.y2, self.w2, self.h2))
        expects = (self.x2 - self.x, self.y2 - self.y, self.w2, self.h2)
        self.rect -= point.Point(self.x, self.y)
        self.assertEqual(expects, self.rect.get_bounds())


* Wed 17 Dec 2014 11:51:47 PM JST
(2000, 2000)
* Wed 17 Dec 2014 11:55:56 PM JST

* Wed 17 Dec 2014 11:55:56 PM JST

* Wed 17 Dec 2014 11:55:56 PM JST
        self.skipTest('Not Implemented')

* Wed 17 Dec 2014 11:58:27 PM JST
assert
* Wed 17 Dec 2014 11:58:27 PM JST
self.assert
* Wed 17 Dec 2014 11:58:30 PM JST
self.rect.set_bounds((self.x, self.y, self.w2, self.h2))
* Wed 17 Dec 2014 11:58:45 PM JST
# expand window
* Thu 18 Dec 2014 12:02:56 AM JST
        self.assertFalse(rectangle.Rectangle(2000, 2000, 100, 100) in self.rect)
        # expand window
        self.rect.set_bounds((self.x, self.y, self.w2, self.h2))
        self.assertIn(rectangle.Rectangle(20, 30, 100, 100), self.rect)

* Thu 18 Dec 2014 12:03:03 AM JST
rectangle
* Thu 18 Dec 2014 12:03:06 AM JST
Rectangle
* Thu 18 Dec 2014 12:03:19 AM JST
Rectangle
* Thu 18 Dec 2014 12:03:19 AM JST
rectangle.Rectangle
* Thu 18 Dec 2014 12:03:57 AM JST

* Thu 18 Dec 2014 12:03:57 AM JST

* Thu 18 Dec 2014 12:03:59 AM JST

* Thu 18 Dec 2014 12:03:59 AM JST

* Thu 18 Dec 2014 12:03:59 AM JST
    from module import 

* Thu 18 Dec 2014 12:04:17 AM JST

* Thu 18 Dec 2014 12:04:17 AM JST

* Thu 18 Dec 2014 12:04:17 AM JST
import wx

* Thu 18 Dec 2014 12:04:31 AM JST
class TestRectangleByWX(MockerTestCase):
    """2014/12/17"""
    @classmethod
    def setUpClass(cls):
        cls.min, cls.max = -1000, 3000

    def setUp(self):
        self.wxrect = wx.Rect()
        self.rect = rectangle.Rectangle()
        self.mocker.replay()

    def random_set(self, ):
        x, y = randrange(self.min, self.max), randrange(self.min, self.max)
        w, h = randrange(0, self.max), randrange(0, self.max)
        self.wxrect.Set(x, y, w, h)
        self.rect.set_bounds(x, y, w, h)
        self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())

    def test_set_top_left(self, ):
        for _ in range(0, 100):
            self.random_set()
            newx = randrange(self.min, self.max)
            newy = randrange(self.min, self.max)
            self.wxrect.SetTopLeft((newx, newy))
            self.rect.set_top_left((newx, newy))
            self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())

    def test_set_top_left_point(self, ):
        for _ in range(0, 100):
            self.random_set()
            newx = randrange(self.min, self.max)
            newy = randrange(self.min, self.max)
            self.wxrect.SetTopLeft((newx, newy))
            self.rect.set_top_left(point.Point(newx, newy))
            self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())

    def test_set_top_right(self, ):
        for _ in range(0, 100):
            self.random_set()
            newx = randrange(self.min, self.max)
            newy = randrange(self.min, self.max)
            self.wxrect.SetTopRight((newx, newy))
            self.rect.set_top_right(point.Point(newx, newy))
            self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())

    def test_set_top_right_point(self, ):
        for _ in range(0, 100):
            self.random_set()
            newx = randrange(self.min, self.max)
            newy = randrange(self.min, self.max)
            self.wxrect.SetTopRight((newx, newy))
            self.rect.set_top_right((newx, newy))
            self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())

    def test_set_bottom_left(self, ):
        for _ in range(0, 100):
            self.random_set()
            newx = randrange(self.min, self.max)
            newy = randrange(self.min, self.max)
            self.wxrect.SetBottomLeft((newx, newy))
            self.rect.set_bottom_left((newx, newy))
            self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())

    def test_set_bottom_left(self, ):
        for _ in range(0, 100):
            self.random_set()
            newx = randrange(self.min, self.max)
            newy = randrange(self.min, self.max)
            self.wxrect.SetBottomLeft((newx, newy))
            self.rect.set_bottom_left(point.Point(newx, newy))
            self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())

    def test_set_bottom_right(self, ):
        for _ in range(0, 100):
            self.random_set()
            newx = randrange(self.min, self.max)
            newy = randrange(self.min, self.max)
            self.wxrect.SetBottomRight((newx, newy))
            self.rect.set_bottom_right((newx, newy))
            self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())

    def test_set_bottom_right(self, ):
        for _ in range(0, 100):
            self.random_set()
            newx = randrange(self.min, self.max)
            newy = randrange(self.min, self.max)
            self.wxrect.SetBottomRight((newx, newy))
            self.rect.set_bottom_right(point.Point(newx, newy))
            self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass

* Thu 18 Dec 2014 12:57:47 AM JST
r=wx.Rect(10, 20, 30, 40)
* Thu 18 Dec 2014 01:18:48 AM JST
r=wx.Rect(10, 20, 30, 40)
* Thu 18 Dec 2014 02:39:24 AM JST
r.CenterIn(wx.Rect(x2,y2,w2,h2))
* Thu 18 Dec 2014 02:39:34 AM JST
((w2 - w) / 2) + x2
* Thu 18 Dec 2014 02:39:40 AM JST
wx.Rect(235, 380, 30, 40)
* Thu 18 Dec 2014 02:39:46 AM JST
235
* Thu 18 Dec 2014 02:40:08 AM JST
x,y,w,h=10,20,30,40
* Thu 18 Dec 2014 02:40:19 AM JST
r=wx.Rect(x,y,w,h)
* Thu 18 Dec 2014 02:40:23 AM JST
x2,y2,w2,h2=100,200,300,400
* Thu 18 Dec 2014 02:40:54 AM JST
            x, y = randrange(self.min, self.max), randrange(self.min, self.max)
            w, h = randrange(0, self.max), randrange(0, self.max)

* Thu 18 Dec 2014 02:43:12 AM JST
min
* Thu 18 Dec 2014 02:43:13 AM JST
self.min
* Thu 18 Dec 2014 02:43:21 AM JST
max
* Thu 18 Dec 2014 02:43:22 AM JST
self.max
* Thu 18 Dec 2014 02:43:34 AM JST
min
* Thu 18 Dec 2014 02:43:34 AM JST
self.min
* Thu 18 Dec 2014 02:43:43 AM JST
max
* Thu 18 Dec 2014 02:43:44 AM JST
self.max
* Thu 18 Dec 2014 02:44:05 AM JST
max
* Thu 18 Dec 2014 02:44:14 AM JST
self.max
* Thu 18 Dec 2014 02:44:17 AM JST
max
* Thu 18 Dec 2014 02:44:18 AM JST
self.max
* Thu 18 Dec 2014 02:47:33 AM JST
(10, 20, 200, 300)
* Thu 18 Dec 2014 02:51:42 AM JST
            for _ in xrange(0, 50):
                self.wxrect.Set(10, 20, 200, 300)
                self.rect.set_bounds((10, 20, 200, 300))
                x, y = randrange(10, 200), randrange(20, 300)
                w, h = randrange(0, 200), randrange(0, 300)
                rect = rectangle.Rectangle(x, y, w, h)
                wxrect = wx.Rect(x, y, w, h)
                self.assertEqual(self.rect.centering(rect),
                                 wxrect.CenterIn(self.wxrect))

* Thu 18 Dec 2014 02:52:18 AM JST
                x, y = randrange(10, 200), randrange(20, 300)
                w, h = randrange(0, 200), randrange(0, 300)

* Thu 18 Dec 2014 02:52:38 AM JST
(0, 2000)
* Thu 18 Dec 2014 02:52:56 AM JST
x, y, w, h
* Thu 18 Dec 2014 02:53:43 AM JST
                self.wxrect.Set(10, 20, 200, 300)
                self.rect.set_bounds((10, 20, 200, 300))
                x, y = randrange(10, 200), randrange(20, 300)
                w, h = randrange(0, 200), randrange(0, 300)
                rect = rectangle.Rectangle(x, y, w, h)
                wxrect = wx.Rect(x, y, w, h)
                self.assertEqual(self.rect.centering(rect),
                                 wxrect.CenterIn(self.wxrect))

* Thu 18 Dec 2014 02:54:22 AM JST

* Thu 18 Dec 2014 02:54:22 AM JST

* Thu 18 Dec 2014 02:54:22 AM JST
        self.wxrect.Set(10, 20, 200, 300)

* Thu 18 Dec 2014 02:54:51 AM JST
CenterIn
* Thu 18 Dec 2014 02:54:52 AM JST
r
* Thu 18 Dec 2014 02:54:57 AM JST
r=wx.Rect(x,y,w,h)
* Thu 18 Dec 2014 02:55:07 AM JST
r.CenterIn(wx.Rect(x2,y2,w2,h2))
* Thu 18 Dec 2014 02:55:15 AM JST
(235, 380, 30, 40)
* Thu 18 Dec 2014 02:55:26 AM JST
x,y,w,h=10,20,30,40
* Thu 18 Dec 2014 02:55:50 AM JST

* Thu 18 Dec 2014 02:55:50 AM JST

* Thu 18 Dec 2014 02:55:50 AM JST
        x, y = randrange(10, 200), randrange(20, 300)

* Thu 18 Dec 2014 02:55:50 AM JST
        x, y = randrange(10, 200), randrange(20, 300)

* Thu 18 Dec 2014 02:55:50 AM JST
        x, y = randrange(10, 200), randrange(20, 300)
        w, h = randrange(0, 200), randrange(0, 300)

* Thu 18 Dec 2014 02:55:57 AM JST
x2,y2,w2,h2=100,200,300,400
* Thu 18 Dec 2014 02:56:13 AM JST

* Thu 18 Dec 2014 02:56:13 AM JST

* Thu 18 Dec 2014 02:56:13 AM JST
        wxrect = wx.Rect(x, y, w, h)

* Thu 18 Dec 2014 02:56:37 AM JST
                         
* Thu 18 Dec 2014 02:57:33 AM JST
None # should raise NotImplementedError()
* Thu 18 Dec 2014 02:58:47 AM JST
    def test_offset(self, ):
        self.skipTest('Not Implemented')


* Sat 20 Dec 2014 03:01:22 AM JST
0,0,30,30
* Sat 20 Dec 2014 03:01:56 AM JST
10, 10, 20, 20
* Sat 20 Dec 2014 03:02:39 AM JST
0,0,30,30
* Sat 20 Dec 2014 03:02:56 AM JST
10,10,40,40
* Sat 20 Dec 2014 03:03:51 AM JST
10,10,40,40
* Sat 20 Dec 2014 03:07:29 AM JST
    def test_isintersect(self, ):
        expects = (10, 10, 20, 20)
        self.rect.set_bounds((0,0,30,30))
        rect = rectangle.Rectangle(10,10,40,40)
        got = self.rect.intersect(rect)
        self.assertEqual(expects, got.get_bounds())


* Sat 20 Dec 2014 03:09:11 AM JST
(0,0,10,10)
* Sat 20 Dec 2014 03:09:18 AM JST
(100,100,40,40)
* Sat 20 Dec 2014 03:09:28 AM JST

* Sat 20 Dec 2014 03:09:28 AM JST

* Sat 20 Dec 2014 03:09:28 AM JST
        expects = None

* Sat 20 Dec 2014 03:09:37 AM JST
expects, 
* Sat 20 Dec 2014 03:10:04 AM JST
bool
* Sat 20 Dec 2014 03:17:57 AM JST
    def test_offset(self, ):
        self.skipTest('Not Implemented')


* Sat 20 Dec 2014 03:24:42 AM JST
        
* Sat 20 Dec 2014 03:24:47 AM JST

* Sat 20 Dec 2014 03:24:47 AM JST

* Sat 20 Dec 2014 03:24:47 AM JST
        self.skipTest('Not Implemented')

* Sat 20 Dec 2014 03:26:05 AM JST
        self.assertEqual(x, self.rect.get_x())
        self.assertEqual(y, self.rect.get_y())

* Sat 20 Dec 2014 03:40:42 AM JST
        def test_offset(self, ):
            for _ in xrange(0, 50):
                self.random_set()

            self.skipTest('Not Implemented')


* Sat 20 Dec 2014 03:41:10 AM JST
x, y = randrange(10, 200), randrange(20, 300)
* Sat 20 Dec 2014 03:55:55 AM JST
rect
* Sat 20 Dec 2014 03:57:51 AM JST
self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())
* Sat 20 Dec 2014 03:58:05 AM JST
x, y = randrange(-2000, 3000), randrange(-2000, 3000)
* Sat 20 Dec 2014 03:58:17 AM JST
self.rect.offset((x, y))
* Sat 20 Dec 2014 03:58:46 AM JST
self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())
* Sat 20 Dec 2014 03:58:48 AM JST

* Sat 20 Dec 2014 03:58:48 AM JST

* Sat 20 Dec 2014 03:58:48 AM JST
            self.skipTest('Not Implemented')

* Sat 20 Dec 2014 03:59:01 AM JST
        def test_offset(self, ):
            for _ in xrange(0, 50):
                self.random_set()
                x, y = randrange(-2000, 3000), randrange(-2000, 3000)
                self.rect.offset((x, y))
                self.wxrect.Offset(x, y)
                self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())
                x, y = randrange(-2000, 3000), randrange(-2000, 3000)
                self.rect.offset(point.Point(x, y))
                self.wxrect.Offset(wx.Point(x, y))
                self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())


* Sat 20 Dec 2014 04:06:55 AM JST
                x, y = randrange(10, 200), randrange(20, 300)
                w, h = randrange(0, 200), randrange(0, 300)

* Sat 20 Dec 2014 04:07:23 AM JST
                self.wxrect.Set(x, y, w, h)
                self.rect.set_bounds((x, y, w, h))

* Sat 20 Dec 2014 04:07:35 AM JST
                x, y = randrange(10, 200), randrange(20, 300)
                w, h = randrange(0, 200), randrange(0, 300)

* Sat 20 Dec 2014 04:07:49 AM JST
                x2, y2 = randrange(10, 200), randrange(20, 300)
                w2, h2 = randrange(0, 200), randrange(0, 300)
                rect = rectangle.Rectangle(x2, y2, w2, h2)
                wxrect = wx.Rect(x2, y2, w2, h2)

* Sat 20 Dec 2014 04:25:27 AM JST
self.rect.intersect(rect)
* Sat 20 Dec 2014 04:25:35 AM JST
                                     
* Sat 20 Dec 2014 04:25:42 AM JST

* Sat 20 Dec 2014 04:25:42 AM JST

* Sat 20 Dec 2014 04:25:42 AM JST
            self.skipTest('Not Implemented')

* Sat 20 Dec 2014 05:15:20 AM JST

* Sat 20 Dec 2014 05:15:20 AM JST

* Sat 20 Dec 2014 05:15:20 AM JST
    @overload()

* Sat 20 Dec 2014 05:15:22 AM JST

* Sat 20 Dec 2014 05:15:22 AM JST

* Sat 20 Dec 2014 05:15:22 AM JST
    @overload()

* Sat 20 Dec 2014 05:15:27 AM JST

* Sat 20 Dec 2014 05:15:28 AM JST

* Sat 20 Dec 2014 05:15:28 AM JST
    @overload()

* Sat 20 Dec 2014 05:15:36 AM JST

* Sat 20 Dec 2014 05:15:36 AM JST

* Sat 20 Dec 2014 05:15:36 AM JST
    @overload()

* Sat 20 Dec 2014 05:15:38 AM JST

* Sat 20 Dec 2014 05:15:38 AM JST

* Sat 20 Dec 2014 05:15:38 AM JST
    @overload()

* Sat 20 Dec 2014 05:15:47 AM JST

* Sat 20 Dec 2014 05:15:47 AM JST

* Sat 20 Dec 2014 05:15:47 AM JST
    @overload()

* Sat 20 Dec 2014 05:15:49 AM JST

* Sat 20 Dec 2014 05:15:49 AM JST

* Sat 20 Dec 2014 05:15:49 AM JST
    @overload()

* Sat 20 Dec 2014 05:15:54 AM JST

* Sat 20 Dec 2014 05:15:54 AM JST

* Sat 20 Dec 2014 05:15:54 AM JST
    @overload()

* Sat 20 Dec 2014 05:16:12 AM JST

* Sat 20 Dec 2014 05:16:12 AM JST

* Sat 20 Dec 2014 05:16:12 AM JST
    @overload()

* Sat 20 Dec 2014 05:16:15 AM JST

* Sat 20 Dec 2014 05:16:16 AM JST

* Sat 20 Dec 2014 05:16:16 AM JST
    @overload()

* Sat 20 Dec 2014 05:16:18 AM JST

* Sat 20 Dec 2014 05:16:18 AM JST

* Sat 20 Dec 2014 05:16:18 AM JST
    @overload()

* Sat 20 Dec 2014 05:16:22 AM JST

* Sat 20 Dec 2014 05:16:22 AM JST

* Sat 20 Dec 2014 05:16:23 AM JST
    @overload()

* Sat 20 Dec 2014 05:16:27 AM JST

* Sat 20 Dec 2014 05:16:27 AM JST

* Sat 20 Dec 2014 05:16:27 AM JST
    @overload()

* Sat 20 Dec 2014 05:16:35 AM JST

* Sat 20 Dec 2014 05:16:36 AM JST

* Sat 20 Dec 2014 05:16:36 AM JST
    @overload()

* Sat 20 Dec 2014 05:24:50 AM JST

* Sat 20 Dec 2014 05:24:50 AM JST

* Sat 20 Dec 2014 05:24:50 AM JST
from overload import overload

* Sat 20 Dec 2014 05:24:51 AM JST

* Sat 20 Dec 2014 05:24:52 AM JST

* Sat 20 Dec 2014 05:24:52 AM JST
from whatever import _

* Sat 20 Dec 2014 05:30:11 AM JST
value
* Sat 20 Dec 2014 05:30:28 AM JST
tuple()
* Sat 20 Dec 2014 05:37:41 AM JST
dimension
* Sat 20 Dec 2014 05:37:44 AM JST
dimension
* Sat 20 Dec 2014 05:38:11 AM JST
dimension
* Sat 20 Dec 2014 05:38:16 AM JST
dimension
* Sat 20 Dec 2014 05:38:23 AM JST
dimension
* Sat 20 Dec 2014 05:38:28 AM JST
dimension
* Sat 20 Dec 2014 05:38:38 AM JST
dimension
* Sat 20 Dec 2014 05:41:48 AM JST
        
* Sat 20 Dec 2014 05:43:32 AM JST
from xahk2.xobj import Rectangle
Rectangle()
r=Rectangle()
r.set_bounds((1,1,1,1))

* Sat 20 Dec 2014 05:43:35 AM JST

* Sat 20 Dec 2014 05:43:35 AM JST

* Sat 20 Dec 2014 05:43:35 AM JST
Rectangle()

* Sat 20 Dec 2014 05:43:43 AM JST
from xahk2.xobj import Rectangle
r=Rectangle()
r.set_bounds((1,1,1,1))

* Sat 20 Dec 2014 05:43:50 AM JST
r=Rectangle()
* Sat 20 Dec 2014 05:43:54 AM JST
from xahk2.xobj import Rectangle
* Sat 20 Dec 2014 05:46:03 AM JST
r.set_bounds((1,1,1,1))
* Sat 20 Dec 2014 05:46:12 AM JST
Rectangle
* Sat 20 Dec 2014 05:47:05 AM JST
from xahk2.xobj import Rectangle
r=Rectangle()

* Sat 20 Dec 2014 05:47:08 AM JST
r.set_bounds((1,1,1,1))
* Sat 20 Dec 2014 05:47:29 AM JST
r=Rectangle()
* Sat 20 Dec 2014 05:48:20 AM JST
from xahk2.xobj import Rectangle
r=Rectangle()
r.set_bounds((1,1,1,1))

* Sat 20 Dec 2014 05:48:24 AM JST
r=Rectangle()
* Sat 20 Dec 2014 05:49:00 AM JST
__
* Sat 20 Dec 2014 05:51:02 AM JST
TypeError
* Sat 20 Dec 2014 05:51:25 AM JST
isinstance(value, (tuple, list)) and len(value) == 4
* Sat 20 Dec 2014 05:53:05 AM JST

* Sat 20 Dec 2014 05:59:12 AM JST

* Sat 20 Dec 2014 05:59:12 AM JST

* Sat 20 Dec 2014 05:59:12 AM JST
        self.point.set_x(value[0])

* Sat 20 Dec 2014 05:59:13 AM JST
        self.point.set_x(value[0])

* Sat 20 Dec 2014 05:59:13 AM JST
        self.point.set_x(value[0])
        self.point.set_y(value[1])

* Sat 20 Dec 2014 06:02:24 AM JST
None
* Sat 20 Dec 2014 06:02:24 AM JST
return None
* Sat 20 Dec 2014 06:02:35 AM JST
dispatch.
* Sat 20 Dec 2014 06:03:02 AM JST
'isinstance(value, (tuple, list)) and len(value) == 2'
* Sat 20 Dec 2014 06:03:18 AM JST
set_size
* Sat 20 Dec 2014 06:05:18 AM JST
None
* Sat 20 Dec 2014 06:09:58 AM JST

* Sat 20 Dec 2014 06:09:59 AM JST

* Sat 20 Dec 2014 06:09:59 AM JST
        # self.set(*args, **kwargs)

* Sat 20 Dec 2014 06:10:18 AM JST
        self.point = Point()
        self.size = Dimension()

* Sat 20 Dec 2014 06:11:02 AM JST
value[2], value[3]
* Sat 20 Dec 2014 06:11:10 AM JST

* Sat 20 Dec 2014 06:11:10 AM JST

* Sat 20 Dec 2014 06:11:10 AM JST
            width, height = value[2], value[3]

* Sat 20 Dec 2014 06:13:01 AM JST
        self.point = Point()
        self.size = Dimension()

* Sat 20 Dec 2014 06:13:28 AM JST

* Sat 20 Dec 2014 06:13:28 AM JST

* Sat 20 Dec 2014 06:13:28 AM JST
            x, y, width, height, = value[0:3]

* Sat 20 Dec 2014 06:17:19 AM JST
    # def set(self, *args, **kwargs):
    #     """function set

    #     x:
    #     y:
    #     width:
    #     height:

    #     set()
    #     set(0, 0, 0, 0)
    #     set(x=0)
    #     set(x=0, y=0)
    #     set(x=0, y=0, width=0, height=0)
    #     set(Point())
    #     set(Dimension())
    #     set(Point(), Dimension())
    #     set(point=Point())
    #     set(size=Dimension())
    #     set(Rectangle())
    #     set(rectangle=Rectangle())

    #     returns None
    #     """
    #     arglen = len(args) + len(kwargs)
    #     if 4 < arglen:
    #         raise TypeError(
    #             '{} take at most 2 arguments ({} given)\nargs:{}\nkwargs:{}'
    #             .format(self.__class__.__name__, arglen, args, kwargs))

    #     # parse kwargs
    #     newx, newy, width, height, points, size, rect = [
    #         kwargs.get(key, None) for key in (
    #             'x', 'y', 'width', 'height', 'point', 'size', 'rectangle')]
    #     # parse args
    #     arguments = []
    #     for arg in args:
    #         if isinstance(arg, (point.Point, )):
    #             if points is not None or rect is not None:
    #                 raise TypeError(
    #                     'Point and Rectangle are exclusive parameter.')
    #             points = arg
    #         elif isinstance(arg, (dimension.Dimension, )):
    #             if size is not None or rect is not None:
    #                 raise TypeError(
    #                     'Dimension and Rectangle are exclusive parameter')
    #             size = arg
    #         elif isinstance(arg, (self.__class__, )):
    #             if rect is not None or points is not None or size is not None:
    #                 raise TypeError(
    #                     'Rectangle, Point and Size are exclusive parameter.')
    #             rect = arg
    #         else:
    #             arguments.append(arg)
    #     while 4 != len(arguments):
    #         arguments.append(None)
    #     # exclusive
    #     for val1, val2 in zip((newx, newy, width, height), arguments):
    #         if val1 is not None and val2 is not None:
    #             raise TypeError('duplicate parameter {}, {}'.format(val1, val2))
    #     newx, newy = newx or arguments[0], newy or arguments[1]
    #     width, height = width or arguments[2], height or arguments[3]
    #     boolpoint = (newx is not None or newy is not None)
    #     boolsize = (width is not None or height is not None)
    #     if points is not None and boolpoint:
    #         raise TypeError('duplicate parameter x, y, Point')
    #     if size is not None and boolsize:
    #         raise TypeError('duplicate parameter width, height, Size')
    #     if rect is not None and (boolpoint or boolsize):
    #         raise TypeError('duplicate parameter rectangle, Rectangle')
    #     # set
    #     if points is not None:
    #         self.set_location(points)
    #     if size is not None:
    #         self.set_size(size)
    #     if rect is not None:
    #         self.set_location(rect.get_location())
    #         self.set_size(rect.get_size())
    #     self.set_location(newx, newy)
    #     self.set_size(width, height)

* Sat 20 Dec 2014 06:38:49 AM JST
value
* Sat 20 Dec 2014 06:42:51 AM JST
from xahk2.xobj import Rectangle
r=Rectangle()

* Sat 20 Dec 2014 06:43:29 AM JST
        with self.assertRaises(TypeError):
            self.rect.set_bounds(0, 0, rectangle.Rectangle(), 0)

* Sat 20 Dec 2014 06:43:32 AM JST
TypeError
* Sat 20 Dec 2014 06:43:44 AM JST
Expected
* Sat 20 Dec 2014 06:49:41 AM JST
point.
* Sat 20 Dec 2014 06:56:53 AM JST
package
* Sat 20 Dec 2014 06:58:39 AM JST

* Sat 20 Dec 2014 06:58:39 AM JST

* Sat 20 Dec 2014 06:58:41 AM JST

* Sat 20 Dec 2014 06:58:41 AM JST

* Sat 20 Dec 2014 06:58:41 AM JST
      (me

* Sat 20 Dec 2014 06:58:43 AM JST
ELSE
* Sat 20 Dec 2014 06:58:44 AM JST
      
* Sat 20 Dec 2014 07:00:23 AM JST
nosetests-last-package
* Sat 20 Dec 2014 07:03:12 AM JST
  (if (string= package "")
      (setq package nosetests-last-package)
    (setq nosetests-last-package package))

* Sat 20 Dec 2014 07:04:05 AM JST
(if (string= package "")
      (setq package nosetests-last-package)
    (setq nosetests-last-package package))
* Sat 20 Dec 2014 07:19:14 AM JST
google
* Sat 20 Dec 2014 07:21:49 AM JST
package
* Sat 20 Dec 2014 07:21:53 AM JST
package
* Sat 20 Dec 2014 07:21:53 AM JST
last-package
* Sat 20 Dec 2014 07:23:08 AM JST
(read-string "hello: " last-package nil last-package)
* Sat 20 Dec 2014 07:23:19 AM JST
hello
* Sat 20 Dec 2014 07:23:54 AM JST
nosetests-read-package
* Sat 20 Dec 2014 07:27:29 AM JST
package
* Sat 20 Dec 2014 07:27:30 AM JST
last-package
* Sat 20 Dec 2014 07:32:54 AM JST
nosetests-cover-package
* Sat 20 Dec 2014 07:35:14 AM JST
nosetests-cover-package
* Sat 20 Dec 2014 07:37:30 AM JST
(read-string "--cover-package=: " last-package nil last-package)
* Sat 20 Dec 2014 07:37:57 AM JST
hello
* Sat 20 Dec 2014 07:38:02 AM JST
(setq last-package (read-string "--cover-package=: " last-package nil last-package))
* Sat 20 Dec 2014 07:38:23 AM JST
package
* Sat 20 Dec 2014 07:38:23 AM JST
last-package
* Sat 20 Dec 2014 07:38:40 AM JST
nosettests-cover-package
* Sat 20 Dec 2014 07:38:55 AM JST
(setq nosettests-cover-package
        (read-string "--cover-package=: "
                     nosettests-cover-package nil nosettests-cover-package))
* Sat 20 Dec 2014 07:39:27 AM JST
(nosetests-run-buffer args)
* Sat 20 Dec 2014 07:39:34 AM JST
  
* Sat 20 Dec 2014 07:39:42 AM JST
package
* Sat 20 Dec 2014 07:39:43 AM JST
PACKAGE
* Sat 20 Dec 2014 07:40:16 AM JST
[2014/12/20]
* Sat 20 Dec 2014 07:40:41 AM JST
  (interactive "p")
  (setq nosetests-cover-package
        (read-string "--cover-package=: "
                     nosetests-cover-package nil nosetests-cover-package))

* Sat 20 Dec 2014 07:40:51 AM JST
(nosetests-run-all args)
* Sat 20 Dec 2014 07:40:56 AM JST
  
* Sat 20 Dec 2014 07:41:05 AM JST
  (setq nosetests-cover-package
        (read-string "--cover-package=: "
                     nosetests-cover-package nil nosetests-cover-package))

* Sat 20 Dec 2014 07:41:10 AM JST
package
* Sat 20 Dec 2014 07:41:13 AM JST
package
* Sat 20 Dec 2014 07:41:20 AM JST
(nosetests-run-dir args)
* Sat 20 Dec 2014 07:41:24 AM JST
  
* Sat 20 Dec 2014 07:41:36 AM JST
PACKAGE
* Sat 20 Dec 2014 07:41:40 AM JST
PACKAG
* Sat 20 Dec 2014 07:41:53 AM JST
(setq nosetests-cover-package
        (read-string "--cover-package=: "
                     nosetests-cover-package nil nosetests-cover-package))
* Sat 20 Dec 2014 07:42:01 AM JST
(nosetests-run-it args)
* Sat 20 Dec 2014 07:42:05 AM JST
  
* Sat 20 Dec 2014 07:42:56 AM JST
nosetests
* Sat 20 Dec 2014 07:42:57 AM JST
nosetests-run-all-cover-package
* Sat 20 Dec 2014 07:43:07 AM JST
nosetests-run-dir-cover-package
* Sat 20 Dec 2014 07:43:14 AM JST
nosetests-run-it-cover-package
* Sat 20 Dec 2014 07:43:19 AM JST
PACKAGE
* Sat 20 Dec 2014 07:43:25 AM JST
package
* Sat 20 Dec 2014 07:44:54 AM JST
--cover-package=
* Sat 20 Dec 2014 07:45:30 AM JST

* Sat 20 Dec 2014 07:45:30 AM JST

* Sat 20 Dec 2014 07:45:30 AM JST
;;    

* Sat 20 Dec 2014 07:48:09 AM JST

* Sat 20 Dec 2014 07:48:10 AM JST

* Sat 20 Dec 2014 07:48:10 AM JST
        self.skipTest()

* Sat 20 Dec 2014 07:48:13 AM JST
self.
* Sat 20 Dec 2014 07:48:49 AM JST
        self.assertEqual(expects, self.rect.get_size())
        self.assertEqual(self.w2, self.rect.get_width())
        self.assertEqual(self.h2, self.rect.get_height())

* Sat 20 Dec 2014 07:52:08 AM JST

* Sat 20 Dec 2014 07:52:17 AM JST
nosetests-cover-last-package
* Sat 20 Dec 2014 07:53:23 AM JST
                     
* Sat 20 Dec 2014 07:54:50 AM JST
ELSE
* Sat 20 Dec 2014 07:54:54 AM JST
nosetests-cover-last-package
* Sat 20 Dec 2014 07:54:56 AM JST
                                     
* Sat 20 Dec 2014 07:55:26 AM JST
                     
* Sat 20 Dec 2014 07:55:59 AM JST
hello
* Sat 20 Dec 2014 07:56:24 AM JST
(setq nosetests-cover-last-package
        (read-string "--cover-package=: " nosetests-cover-last-package nil ""))
* Sat 20 Dec 2014 07:57:02 AM JST
(let ((nosetests-cover-package (if (string= nosetests-cover-last-package "")
                                     nil nosetests-cover-last-package)))
    (nosetests-run-buffer args))
* Sat 20 Dec 2014 07:57:07 AM JST
(nosetests-run-all args)
* Sat 20 Dec 2014 07:57:10 AM JST
  
* Sat 20 Dec 2014 07:57:15 AM JST
(let ((nosetests-cover-package (if (string= nosetests-cover-last-package "")
                                     nil nosetests-cover-last-package)))
    (nosetests-run-all args))
* Sat 20 Dec 2014 07:57:22 AM JST
(nosetests-run-dir args)
* Sat 20 Dec 2014 07:57:24 AM JST
  
* Sat 20 Dec 2014 07:57:32 AM JST
(let ((nosetests-cover-package (if (string= nosetests-cover-last-package "")
                                     nil nosetests-cover-last-package)))
    (nosetests-run-dir args))
* Sat 20 Dec 2014 07:57:40 AM JST
(nosetests-run-it args)
* Sat 20 Dec 2014 07:57:43 AM JST
  
* Sat 20 Dec 2014 07:58:50 AM JST
nosetests-cover-package nil
* Sat 20 Dec 2014 07:59:59 AM JST
nosetests-run-it-cover-package
* Sat 20 Dec 2014 08:00:09 AM JST
    
* Sat 20 Dec 2014 08:00:17 AM JST
nosetests-run-it
* Sat 20 Dec 2014 08:00:46 AM JST

* Sat 20 Dec 2014 08:00:47 AM JST

* Sat 20 Dec 2014 08:00:47 AM JST
    ("n"        'nosetests-run-it)

* Sat 20 Dec 2014 08:00:49 AM JST
nosetests-run-it-cover-package
* Sat 20 Dec 2014 08:01:32 AM JST
setests-run-all-cover-package
* Sat 20 Dec 2014 08:01:40 AM JST
    
* Sat 20 Dec 2014 08:01:45 AM JST
nosetests-run-all+
* Sat 20 Dec 2014 08:02:08 AM JST

* Sat 20 Dec 2014 08:02:09 AM JST

* Sat 20 Dec 2014 08:02:09 AM JST
    ("\C-n"     'nosetests-run-all+)

* Sat 20 Dec 2014 08:02:19 AM JST
setests-run-all-cover-package
* Sat 20 Dec 2014 08:03:53 AM JST
nosetests-run-all-cover-package
* Sat 20 Dec 2014 08:06:03 AM JST
0, 0, 0, 0
* Sat 20 Dec 2014 08:06:09 AM JST
(10, 0, 0, 0)
* Sat 20 Dec 2014 08:48:10 AM JST
x, y = randrange(-2000, 3000), randrange(-2000, 3000)
* Sat 20 Dec 2014 08:48:15 AM JST
200
* Sat 20 Dec 2014 08:48:18 AM JST
200
* Sat 20 Dec 2014 08:49:36 AM JST

* Sat 20 Dec 2014 08:49:36 AM JST

* Sat 20 Dec 2014 08:49:36 AM JST
                self.skipTest('Not Implemented')

* Sat 20 Dec 2014 08:49:41 AM JST
self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())
* Sat 20 Dec 2014 08:49:59 AM JST
        def test_grow_pos(self, ):
            for _ in xrange(0, 50):
                self.random_set()
                x, y = randrange(0, 3000), randrange(0, 3000)
                self.wxrect.Inflate(x, y)
                self.rect.grow(x, y)
                self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())


* Sat 20 Dec 2014 08:50:17 AM JST
0, 
* Sat 20 Dec 2014 08:51:12 AM JST
-2000
* Sat 20 Dec 2014 08:54:14 AM JST
    #     newx = self.get_x() - dx
    #     newy = self.get_y() - dy
    #     neww = self.get_width() + dx * 2
    #     newh = self.get_height() + dy * 2
    #     if neww < 0:
    #         neww = 0
    #     if newh < 0:
    #         newh = 0
    #     return self.__class__(newx, newy, neww, newh)

* Sat 20 Dec 2014 08:54:36 AM JST

* Sat 20 Dec 2014 08:54:36 AM JST

* Sat 20 Dec 2014 08:54:36 AM JST
        return self.__class__(newx, newy, neww, newh)

* Sat 20 Dec 2014 08:54:38 AM JST

* Sat 20 Dec 2014 08:54:38 AM JST

* Sat 20 Dec 2014 08:54:38 AM JST
        return None # should raise NotImplementedError()

* Sat 20 Dec 2014 09:05:51 AM JST

* Sat 20 Dec 2014 09:05:51 AM JST

* Sat 20 Dec 2014 09:05:51 AM JST
try:

* Sat 20 Dec 2014 09:06:05 AM JST
from random import randrange

import wx


* Sat 20 Dec 2014 09:10:23 AM JST
self.get_width()
* Sat 20 Dec 2014 09:10:30 AM JST
self.get_height()
* Sat 20 Dec 2014 09:15:48 AM JST
(XCoordinate(20), YCoordinate(20), Width(260), Height(260))
* Sat 20 Dec 2014 09:20:29 AM JST
self.rect.get_bounds()
* Sat 20 Dec 2014 09:23:17 AM JST
(XCoordinate(-432), YCoordinate(1763), Width(5340), Height(0))
* Sat 20 Dec 2014 09:23:25 AM JST
1932
* Sat 20 Dec 2014 09:23:34 AM JST
y
-1111
* Sat 20 Dec 2014 09:23:44 AM JST
   - (-432, 1516, 5340, 0)
   + (XCoordinate(-432), YCoordinate(1763), Width(5340), Height(0))

* Sat 20 Dec 2014 09:30:27 AM JST
-432
* Sat 20 Dec 2014 09:30:30 AM JST
1763
* Sat 20 Dec 2014 09:30:34 AM JST
5340
* Sat 20 Dec 2014 09:30:39 AM JST
0
* Sat 20 Dec 2014 09:34:16 AM JST
self.rect.get_bounds()
* Sat 20 Dec 2014 09:34:23 AM JST
self.wxrect.Get()
* Sat 20 Dec 2014 09:36:48 AM JST
self.wxrect.Get(), self.rect.get_bounds()
* Sat 20 Dec 2014 09:38:34 AM JST
python-wxgtk2.8
* Sat 20 Dec 2014 09:48:32 AM JST
self.get_x()
* Sat 20 Dec 2014 09:48:38 AM JST
self.get_y()
* Sat 20 Dec 2014 09:49:15 AM JST
self.wxrect.Get(), self.rect.get_bounds()
* Sat 20 Dec 2014 09:55:00 AM JST
2377, -1185
* Sat 20 Dec 2014 09:55:49 AM JST
from xahk2.xobj import Rectangle
* Sat 20 Dec 2014 09:56:22 AM JST
from xahk2.xobj import Rectangle
r=Rectangle()
r.set_bounds((-3317, 3076, 7268, 0))
r
r.grow(2377, -1185)

* Sat 20 Dec 2014 09:56:26 AM JST

* Sat 20 Dec 2014 09:56:26 AM JST

* Sat 20 Dec 2014 09:56:26 AM JST
r

* Sat 20 Dec 2014 09:56:43 AM JST
from xahk2.xobj import Rectangle
r=Rectangle()
r.set_bounds((-3317, 3076, 7268, 0))

* Sat 20 Dec 2014 09:56:46 AM JST
r.grow(2377, -1185)
* Sat 20 Dec 2014 09:58:22 AM JST
        x, y = randrange(self.min, self.max), randrange(self.min, self.max)
        w, h = randrange(0, self.max), randrange(0, self.max)
        self.wxrect.Set(x, y, w, h)
        self.rect.set_bounds((x, y, w, h))
        self.assertEqual(self.wxrect.Get(), self.rect.get_bounds())

* Sat 20 Dec 2014 09:58:57 AM JST
self.
* Sat 20 Dec 2014 09:59:11 AM JST
self.
* Sat 20 Dec 2014 09:59:16 AM JST
set_bounds
* Sat 20 Dec 2014 09:59:32 AM JST
wxrect.
* Sat 20 Dec 2014 09:59:33 AM JST
self.wxrect.
* Sat 20 Dec 2014 09:59:38 AM JST
self.
* Sat 20 Dec 2014 09:59:40 AM JST
self.
* Sat 20 Dec 2014 09:59:51 AM JST
self.
* Sat 20 Dec 2014 09:59:53 AM JST
self.
* Sat 20 Dec 2014 09:59:55 AM JST
self.
* Sat 20 Dec 2014 09:59:57 AM JST
self.
* Sat 20 Dec 2014 10:02:31 AM JST

* Sat 20 Dec 2014 10:02:31 AM JST

* Sat 20 Dec 2014 10:02:31 AM JST
        for _ in xrange(0, 50):

* Sat 20 Dec 2014 10:03:03 AM JST

* Sat 20 Dec 2014 10:03:04 AM JST

* Sat 20 Dec 2014 10:03:04 AM JST
        sleep(1)

* Sat 20 Dec 2014 10:05:02 AM JST
(752), YCoordinate(-1334), Width(0), Height(5908)
* Sat 20 Dec 2014 10:05:13 AM JST
YCoordinate(
* Sat 20 Dec 2014 10:05:17 AM JST
Width(
* Sat 20 Dec 2014 10:05:20 AM JST
Height(
* Sat 20 Dec 2014 10:05:32 AM JST
-1080, 2505
* Sat 20 Dec 2014 10:14:38 AM JST
752, -1334, 0, 5908
* Sat 20 Dec 2014 10:15:01 AM JST
-1080, 2505
* Sat 20 Dec 2014 10:25:22 AM JST

* Sat 20 Dec 2014 10:25:22 AM JST

* Sat 20 Dec 2014 10:25:22 AM JST
        for _ in xrange(0, 50):

* Sat 20 Dec 2014 10:27:26 AM JST
wxrect.Get(), rect.get_bounds()
* Sat 20 Dec 2014 10:28:07 AM JST
96, -145, 50, 10
* Sat 20 Dec 2014 10:28:34 AM JST
733, -1907
* Sat 20 Dec 2014 10:28:52 AM JST
96, -145, 50, 10
* Sat 20 Dec 2014 10:29:05 AM JST
733, -1907
* Sat 20 Dec 2014 10:30:40 AM JST
-500, 500
* Sat 20 Dec 2014 10:32:23 AM JST
(186, 145, 45, 53)
* Sat 20 Dec 2014 10:32:59 AM JST
rr=wx.Rect(96, -145, 50, 10)
* Sat 20 Dec 2014 10:33:04 AM JST
(186, 145, 45, 53)
* Sat 20 Dec 2014 10:33:18 AM JST
rr.Inflate
* Sat 20 Dec 2014 10:33:25 AM JST
rr=wx.Rect(186, 145, 45, 53)
* Sat 20 Dec 2014 10:33:30 AM JST
rr.Inflate
* Sat 20 Dec 2014 10:33:34 AM JST
(88,-226)
* Sun 21 Dec 2014 07:29:16 AM JST
        if neww < 0:
            neww = 0

* Sun 21 Dec 2014 07:50:17 AM JST
        if newh < 0:
            newh = 0

* Sun 21 Dec 2014 08:03:57 AM JST
self, 
* Sun 21 Dec 2014 08:07:40 AM JST
coord
* Sun 21 Dec 2014 08:08:59 AM JST
self
* Sun 21 Dec 2014 08:13:58 AM JST
from xahk2.xobj import Rectangle
r=Rectangle()

* Sun 21 Dec 2014 08:14:09 AM JST
r=Rectangle(96, -145, 50, 10)
* Sun 21 Dec 2014 08:14:19 AM JST
rr=wx.Rect(96, -145, 50, 10)
* Sun 21 Dec 2014 08:14:37 AM JST
r.grow(733, -1907)
* Sun 21 Dec 2014 08:15:10 AM JST
self.get_width()
* Sun 21 Dec 2014 08:15:15 AM JST
self.get_x()
* Sun 21 Dec 2014 08:15:35 AM JST
add
* Sun 21 Dec 2014 08:17:08 AM JST
from xahk2.xobj import Rectangle
r=Rectangle()
r=Rectangle(96, -145, 50, 10)
r.grow(733, -1907)

* Sun 21 Dec 2014 08:17:17 AM JST
rr=wx.Rect(96, -145, 50, 10)

* Sun 21 Dec 2014 08:17:24 AM JST
rr.Inflate(733, -1907)
* Sun 21 Dec 2014 08:17:33 AM JST
import wx
* Sun 21 Dec 2014 08:17:58 AM JST
from xahk2.xobj import Rectangle
r=Rectangle()
r=Rectangle(96, -145, 50, 10)

* Sun 21 Dec 2014 08:18:03 AM JST

* Sun 21 Dec 2014 08:18:03 AM JST

* Sun 21 Dec 2014 08:18:03 AM JST
r=Rectangle()

* Sun 21 Dec 2014 08:18:07 AM JST
r.grow(733, -1907)
* Sun 21 Dec 2014 08:18:19 AM JST
import wx
rr=wx.Rect(96, -145, 50, 10)

* Sun 21 Dec 2014 08:18:24 AM JST
rr.Inflate(733, -1907)
* Sun 21 Dec 2014 08:22:26 AM JST
Rectangle(x=-637, y=-150, width=1516, height=0)
* Sun 21 Dec 2014 08:22:37 AM JST
wx.Rect(-637, -140, 1516, 0)
* Sun 21 Dec 2014 08:22:58 AM JST
rr=wx.Rect(96, -145, 50, 10)
rr.Inflate(733, -1907)

* Sun 21 Dec 2014 08:23:04 AM JST
rr.Inflate(733, -1907)

* Sun 21 Dec 2014 08:23:17 AM JST
rr.Inflate(-733, -1907)
* Sun 21 Dec 2014 08:23:28 AM JST
r=Rectangle(96, -145, 50, 10)
r.grow(-733, -1907)

* Sun 21 Dec 2014 08:24:49 AM JST
Rectangle(x=71, y=-150, width=0, height=0)
* Sun 21 Dec 2014 08:25:25 AM JST
wx.Rect(121, -140, 0, 0)
* Sun 21 Dec 2014 08:27:29 AM JST
sides
* Sun 21 Dec 2014 08:27:34 AM JST
int(side)
* Sun 21 Dec 2014 08:27:36 AM JST

* Sun 21 Dec 2014 08:27:36 AM JST

* Sun 21 Dec 2014 08:27:36 AM JST
             = 

* Sun 21 Dec 2014 08:27:38 AM JST
coords
* Sun 21 Dec 2014 08:27:43 AM JST
int(coord)
* Sun 21 Dec 2014 08:27:45 AM JST

* Sun 21 Dec 2014 08:27:45 AM JST

* Sun 21 Dec 2014 08:27:45 AM JST
             = 

* Sun 21 Dec 2014 08:30:49 AM JST
adds, sides, coords
* Sun 21 Dec 2014 08:31:10 AM JST
r=Rectangle(96, -145, 50, 10)
r.grow(-733, -1907)

* Sun 21 Dec 2014 08:31:48 AM JST
add)
* Sun 21 Dec 2014 08:31:51 AM JST
int(add)
* Sun 21 Dec 2014 08:31:59 AM JST
adds, 
* Sun 21 Dec 2014 08:32:07 AM JST
sides, coords, adds
* Sun 21 Dec 2014 08:33:55 AM JST
r=Rectangle(96, -145, 50, 10)
* Sun 21 Dec 2014 08:34:04 AM JST
r.grow(-733, -1907)
* Sun 21 Dec 2014 08:35:14 AM JST
sides / 2
* Sun 21 Dec 2014 08:35:37 AM JST
from xahk2.xobj import Rectangle
import wx

* Sun 21 Dec 2014 08:35:42 AM JST
r=Rectangle(96, -145, 50, 10)

* Sun 21 Dec 2014 08:35:45 AM JST
r.grow(-733, -1907)
* Sun 21 Dec 2014 08:42:31 AM JST
r=Rectangle(96, -145, 50, 10)
* Sun 21 Dec 2014 08:42:45 AM JST
rr=wx.Rect(96, -145, 50, 10)
* Sun 21 Dec 2014 08:42:56 AM JST
r.grow(-733, -1907)
* Sun 21 Dec 2014 08:43:04 AM JST
rr.Inflate(-733, -1907)
* Sun 21 Dec 2014 08:43:15 AM JST
733
* Sun 21 Dec 2014 08:43:17 AM JST
1907
* Sun 21 Dec 2014 08:43:20 AM JST
733
* Sun 21 Dec 2014 08:43:22 AM JST
1907
* Sun 21 Dec 2014 08:43:29 AM JST
def grow(x,y):
    r=Rectangle(96, -145, 50, 10)
    rr=wx.Rect(96, -145, 50, 10)
    r.grow(x, y)
    return r, rr.Inflate(x, y)

* Sun 21 Dec 2014 08:43:38 AM JST
-733, -1907
* Sun 21 Dec 2014 08:48:42 AM JST
from xahk2.xobj import Rectangle
import wx

* Sun 21 Dec 2014 08:48:48 AM JST
def grow(x,y):
    r=Rectangle(96, -145, 50, 10)
    rr=wx.Rect(96, -145, 50, 10)
    r.grow(x, y)
    return r, rr.Inflate(x, y)

* Sun 21 Dec 2014 08:48:56 AM JST
-733, -1907
* Sun 21 Dec 2014 08:49:01 AM JST
grow(-733, -1907)
* Sun 21 Dec 2014 08:52:02 AM JST
return (coords - adds), newside
* Sun 21 Dec 2014 08:53:18 AM JST
from xahk2.xobj import Rectangle
import wx

* Sun 21 Dec 2014 08:53:23 AM JST
def grow(x,y):
    r=Rectangle(96, -145, 50, 10)
    rr=wx.Rect(96, -145, 50, 10)
    r.grow(x, y)
    return r, rr.Inflate(x, y)

* Sun 21 Dec 2014 08:53:27 AM JST
grow(-733, -1907)
* Sun 21 Dec 2014 08:53:52 AM JST
default)
* Sun 21 Dec 2014 08:53:54 AM JST
default
* Sun 21 Dec 2014 08:54:02 AM JST
*default
* Sun 21 Dec 2014 08:54:08 AM JST
def grow(x,y,default):
    r=Rectangle(*default)
    rr=wx.Rect(*default)
    r.grow(x, y)
    return r, rr.Inflate(x, y)

* Sun 21 Dec 2014 08:54:27 AM JST
(96, -145, 50, 10)
* Sun 21 Dec 2014 08:55:08 AM JST

* Sun 21 Dec 2014 08:55:08 AM JST

* Sun 21 Dec 2014 08:55:08 AM JST
        print([newy, newh])

* Sun 21 Dec 2014 08:55:10 AM JST

* Sun 21 Dec 2014 08:55:11 AM JST

* Sun 21 Dec 2014 08:55:11 AM JST
                print([coords, adds])

* Sun 21 Dec 2014 08:55:12 AM JST

* Sun 21 Dec 2014 08:55:12 AM JST

* Sun 21 Dec 2014 08:55:12 AM JST
                print('DEBUG-1-rectangle.py')

* Sun 21 Dec 2014 08:55:13 AM JST

* Sun 21 Dec 2014 08:55:13 AM JST

* Sun 21 Dec 2014 08:55:13 AM JST
            print([sides, coords, adds])

* Sun 21 Dec 2014 08:59:14 AM JST
grow(-733, -1907, (96, 145, 50, 10))
* Sun 21 Dec 2014 08:59:43 AM JST
from xahk2.xobj import Rectangle
import wx

* Sun 21 Dec 2014 08:59:49 AM JST
def grow(x,y,default):
    r=Rectangle(*default)
    rr=wx.Rect(*default)
    r.grow(x, y)
    return r, rr.Inflate(x, y)


* Sun 21 Dec 2014 08:59:52 AM JST
grow(-733, -1907, (96, 145, 50, 10))
* Sun 21 Dec 2014 09:05:10 AM JST

* Sun 21 Dec 2014 09:05:19 AM JST

* Sun 21 Dec 2014 09:05:19 AM JST

* Sun 21 Dec 2014 09:05:19 AM JST
            default = [int(x) for x in rect.get_bounds()], wxrect.Get()

* Sun 21 Dec 2014 01:38:00 PM JST
rr=wx.Rect(*default)
* Sun 21 Dec 2014 01:38:05 PM JST
default
* Sun 21 Dec 2014 01:38:09 PM JST
121, -140, 0, 0
* Sun 21 Dec 2014 01:41:06 PM JST
@set_location.when('isinstance(value, (Point,))')
* Sun 21 Dec 2014 01:41:42 PM JST
when(
* Sun 21 Dec 2014 01:41:42 PM JST
set_location.when(
* Sun 21 Dec 2014 01:43:04 PM JST
return None # should raise NotImplementedError()
* Sun 21 Dec 2014 01:43:35 PM JST
(tuple, list)) and len(value) == 2
* Sun 21 Dec 2014 01:44:50 PM JST

* Sun 21 Dec 2014 01:47:44 PM JST
r=Rectangle(*default)
* Sun 21 Dec 2014 01:47:49 PM JST
defau
* Sun 21 Dec 2014 01:49:00 PM JST
from xahk2.xobj import Rectangle
* Sun 21 Dec 2014 01:49:20 PM JST
from xahk2.xobj import Rectangle
* Sun 21 Dec 2014 01:49:55 PM JST
Rectangle(x=71, y=-150, width=0, height=0)
* Sun 21 Dec 2014 01:51:53 PM JST
from xahk2.xobj import Rectangle
* Sun 21 Dec 2014 01:52:35 PM JST
'isinstance(value, (tuple, list)) and len(value) == 2'
* Sun 21 Dec 2014 02:25:33 PM JST
NoApplicableMethods
* Sun 21 Dec 2014 02:26:06 PM JST

* Sun 21 Dec 2014 02:26:06 PM JST

* Sun 21 Dec 2014 02:26:06 PM JST
        returns None

* Sun 21 Dec 2014 02:26:12 PM JST
        offset(Point(10, 10))
        offset((10, 10))


* Sun 21 Dec 2014 02:29:44 PM JST
point.
* Sun 21 Dec 2014 02:33:28 PM JST
self.get_x()
* Sun 21 Dec 2014 02:33:31 PM JST
self.get_width()
* Sun 21 Dec 2014 02:38:23 PM JST
self.
* Sun 21 Dec 2014 02:38:36 PM JST
get
* Sun 21 Dec 2014 02:38:36 PM JST
self.get
* Sun 21 Dec 2014 02:40:03 PM JST
None # should raise NotImplementedError()
* Sun 21 Dec 2014 02:41:14 PM JST
from xahk2.xobj import Rectangle
* Sun 21 Dec 2014 02:48:45 PM JST
    def test_intersect(self, ):
        self.skipTest('Not Implemented')


* Sun 21 Dec 2014 02:50:04 PM JST
x, y = randrange(-500, 500), randrange(-500, 500)
* Sun 21 Dec 2014 02:50:12 PM JST
x, y = randrange(-2000, 3000), randrange(-2000, 3000)
* Sun 21 Dec 2014 02:50:54 PM JST
w, h = randrange(0, 3000), randrange(0, 3000)
* Sun 21 Dec 2014 02:51:11 PM JST
            rect = rectangle.Rectangle(x2, y2, w2, h2)
            wxrect = wx.Rect(x2, y2, w2, h2)

* Sun 21 Dec 2014 02:52:03 PM JST
0,0,30,30
* Sun 21 Dec 2014 02:56:53 PM JST
rect
* Sun 21 Dec 2014 02:59:45 PM JST

* Sun 21 Dec 2014 02:59:45 PM JST

* Sun 21 Dec 2014 02:59:45 PM JST
        self.skipTest('Not Implemented')

* Sun 21 Dec 2014 03:09:32 PM JST
ge
* Sun 21 Dec 2014 03:09:32 PM JST
self.ge
* Sun 21 Dec 2014 03:09:37 PM JST
                   
* Sun 21 Dec 2014 03:10:53 PM JST
None # should raise NotImplementedError()
* Sun 21 Dec 2014 03:13:41 PM JST
None # should raise NotImplementedError()
* Sun 21 Dec 2014 03:14:27 PM JST
get_
* Sun 21 Dec 2014 03:14:27 PM JST
self.get_
* Sun 21 Dec 2014 03:14:36 PM JST
                   
* Sun 21 Dec 2014 03:21:47 PM JST
num1
* Sun 21 Dec 2014 03:21:59 PM JST
num2
* Sun 21 Dec 2014 03:23:27 PM JST
 = min(self.get_right() + 1, rectangle.get_right() + 1)
        newy = max(self.get_y(), rectangle.get_y())
        bottom = min(self.get_bottom() + 1,
* Sun 21 Dec 2014 03:23:30 PM JST
 = min(self.get_right() + 1, rectangle.get_right() + 1)
        newy = max(self.get_y(), rectangle.get_y())
        bottom = min(self.get_bottom() + 1,
* Sun 21 Dec 2014 03:23:41 PM JST
bottom
* Sun 21 Dec 2014 03:23:50 PM JST
                
* Sun 21 Dec 2014 03:24:09 PM JST
Rectangle, None
* Sun 21 Dec 2014 03:24:17 PM JST

* Sun 21 Dec 2014 03:24:17 PM JST

* Sun 21 Dec 2014 03:24:17 PM JST
        rectangle:

* Sun 21 Dec 2014 03:24:19 PM JST

* Sun 21 Dec 2014 03:24:19 PM JST

* Sun 21 Dec 2014 03:24:19 PM JST
        returns Rectangle, None

* Sun 21 Dec 2014 03:28:31 PM JST
        @Arguments:
        - `rectangle`:

        @Return:
        Rectangle, None

        intersect(Rectangle(0, 0, 10, 10))

* Sun 21 Dec 2014 03:28:36 PM JST
rectangle
* Sun 21 Dec 2014 03:28:55 PM JST
rectangle
* Sun 21 Dec 2014 03:29:02 PM JST
rectangle
* Sun 21 Dec 2014 03:29:06 PM JST
rectangle
* Sun 21 Dec 2014 03:29:09 PM JST
rectangle
* Sun 21 Dec 2014 03:29:13 PM JST
rectangle
* Sun 21 Dec 2014 03:29:16 PM JST
rectangle
* Sun 21 Dec 2014 03:30:10 PM JST
'isinstance(value, (tuple, list)) and len(value) == 4'
* Sun 21 Dec 2014 03:43:52 PM JST
wr=wx.Rect(0,0,30,30)
* Sun 21 Dec 2014 03:44:07 PM JST
wr2=wx.Rect(10,10,30,30)
* Sun 21 Dec 2014 03:54:21 PM JST
Offs
* Mon 22 Dec 2014 04:12:05 AM JST
   public Rectangle More ...union(Rectangle r) {
864         long tx2 = this.width;
865         long ty2 = this.height;
866         if ((tx2 | ty2) < 0) {
867             // This rectangle has negative dimensions...
868             // If r has non-negative dimensions then it is the answer.
869             // If r is non-existant (has a negative dimension), then both
870             // are non-existant and we can return any non-existant rectangle
871             // as an answer.  Thus, returning r meets that criterion.
872             // Either way, r is our answer.
873             return new Rectangle(r);
874         }
875         long rx2 = r.width;
876         long ry2 = r.height;
877         if ((rx2 | ry2) < 0) {
878             return new Rectangle(this);
879         }
880         int tx1 = this.x;
881         int ty1 = this.y;
882         tx2 += tx1;
883         ty2 += ty1;
884         int rx1 = r.x;
885         int ry1 = r.y;
886         rx2 += rx1;
887         ry2 += ry1;
888         if (tx1 > rx1) tx1 = rx1;
889         if (ty1 > ry1) ty1 = ry1;
890         if (tx2 < rx2) tx2 = rx2;
891         if (ty2 < ry2) ty2 = ry2;
892         tx2 -= tx1;
893         ty2 -= ty1;
894         // tx2,ty2 will never underflow since both original rectangles
895         // were already proven to be non-empty
896         // they might overflow, though...
897         if (tx2 > Integer.MAX_VALUE) tx2 = Integer.MAX_VALUE;
898         if (ty2 > Integer.MAX_VALUE) ty2 = Integer.MAX_VALUE;
899         return new Rectangle(tx1, ty1, (int) tx2, (int) ty2);
900     }
* Mon 22 Dec 2014 04:16:25 AM JST
self.
* Mon 22 Dec 2014 04:16:44 AM JST
self.get_height()
* Mon 22 Dec 2014 04:16:46 AM JST

* Mon 22 Dec 2014 04:16:46 AM JST

* Mon 22 Dec 2014 04:16:46 AM JST
        height2 = 

* Mon 22 Dec 2014 04:16:55 AM JST
rectangle.get_height()
* Mon 22 Dec 2014 04:16:58 AM JST

* Mon 22 Dec 2014 04:16:58 AM JST

* Mon 22 Dec 2014 04:16:58 AM JST
        height2 = 

* Mon 22 Dec 2014 04:16:58 AM JST

* Mon 22 Dec 2014 04:16:58 AM JST

* Mon 22 Dec 2014 04:16:58 AM JST
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:16:58 AM JST

* Mon 22 Dec 2014 04:16:58 AM JST

* Mon 22 Dec 2014 04:16:58 AM JST
    @dispatch.generic()

* Mon 22 Dec 2014 04:16:59 AM JST
    @dispatch.generic()

* Mon 22 Dec 2014 04:16:59 AM JST
    @dispatch.generic()
    def intersect(self, value):

* Mon 22 Dec 2014 04:16:59 AM JST
    @dispatch.generic()
    def intersect(self, value):

* Mon 22 Dec 2014 04:16:59 AM JST
    @dispatch.generic()
    def intersect(self, value):
        r"""SUMMARY

* Mon 22 Dec 2014 04:16:59 AM JST

* Mon 22 Dec 2014 04:16:59 AM JST

* Mon 22 Dec 2014 04:16:59 AM JST
        intersect(value)

* Mon 22 Dec 2014 04:16:59 AM JST

* Mon 22 Dec 2014 04:16:59 AM JST

* Mon 22 Dec 2014 04:16:59 AM JST
        @Arguments:

* Mon 22 Dec 2014 04:17:00 AM JST
        @Arguments:

* Mon 22 Dec 2014 04:17:00 AM JST
        @Arguments:
        - `value`:

* Mon 22 Dec 2014 04:17:00 AM JST

* Mon 22 Dec 2014 04:17:00 AM JST

* Mon 22 Dec 2014 04:17:00 AM JST
        @Return:

* Mon 22 Dec 2014 04:17:00 AM JST
        @Return:

* Mon 22 Dec 2014 04:17:00 AM JST
        @Return:
        Rectangle, None

* Mon 22 Dec 2014 04:17:00 AM JST

* Mon 22 Dec 2014 04:17:00 AM JST

* Mon 22 Dec 2014 04:17:00 AM JST
        intersect(Rectangle(0, 0, 10, 10))

* Mon 22 Dec 2014 04:17:01 AM JST
        intersect(Rectangle(0, 0, 10, 10))

* Mon 22 Dec 2014 04:17:01 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """

* Mon 22 Dec 2014 04:17:01 AM JST

* Mon 22 Dec 2014 04:17:01 AM JST

* Mon 22 Dec 2014 04:17:01 AM JST
    @intersect.when('isinstance(value, (Rectangle, ))')

* Mon 22 Dec 2014 04:17:01 AM JST
    @intersect.when('isinstance(value, (Rectangle, ))')

* Mon 22 Dec 2014 04:17:01 AM JST
    @intersect.when('isinstance(value, (Rectangle, ))')
    def intersect_rectangle(self, value):

* Mon 22 Dec 2014 04:17:01 AM JST
    @intersect.when('isinstance(value, (Rectangle, ))')
    def intersect_rectangle(self, value):

* Mon 22 Dec 2014 04:17:01 AM JST
    @intersect.when('isinstance(value, (Rectangle, ))')
    def intersect_rectangle(self, value):
        """function intersects

* Mon 22 Dec 2014 04:17:02 AM JST

* Mon 22 Dec 2014 04:17:02 AM JST

* Mon 22 Dec 2014 04:17:02 AM JST
        @Arguments:

* Mon 22 Dec 2014 04:17:02 AM JST
        @Arguments:

* Mon 22 Dec 2014 04:17:02 AM JST
        @Arguments:
        - `rectangle`:

* Mon 22 Dec 2014 04:17:02 AM JST

* Mon 22 Dec 2014 04:17:02 AM JST

* Mon 22 Dec 2014 04:17:02 AM JST
        @Return:

* Mon 22 Dec 2014 04:17:02 AM JST
        @Return:

* Mon 22 Dec 2014 04:17:02 AM JST
        @Return:
        Rectangle, None

* Mon 22 Dec 2014 04:17:03 AM JST

* Mon 22 Dec 2014 04:17:03 AM JST

* Mon 22 Dec 2014 04:17:03 AM JST
        intersect(Rectangle(0, 0, 10, 10))

* Mon 22 Dec 2014 04:17:03 AM JST
        intersect(Rectangle(0, 0, 10, 10))

* Mon 22 Dec 2014 04:17:03 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """

* Mon 22 Dec 2014 04:17:03 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """

* Mon 22 Dec 2014 04:17:03 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """
        newx = max(self.get_x(), value.get_x())

* Mon 22 Dec 2014 04:17:03 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """
        newx = max(self.get_x(), value.get_x())

* Mon 22 Dec 2014 04:17:03 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """
        newx = max(self.get_x(), value.get_x())
        width = min(self.get_right() + 1, value.get_right() + 1)

* Mon 22 Dec 2014 04:17:03 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """
        newx = max(self.get_x(), value.get_x())
        width = min(self.get_right() + 1, value.get_right() + 1)

* Mon 22 Dec 2014 04:17:04 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """
        newx = max(self.get_x(), value.get_x())
        width = min(self.get_right() + 1, value.get_right() + 1)
        newy = max(self.get_y(), value.get_y())

* Mon 22 Dec 2014 04:17:04 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """
        newx = max(self.get_x(), value.get_x())
        width = min(self.get_right() + 1, value.get_right() + 1)
        newy = max(self.get_y(), value.get_y())

* Mon 22 Dec 2014 04:17:04 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """
        newx = max(self.get_x(), value.get_x())
        width = min(self.get_right() + 1, value.get_right() + 1)
        newy = max(self.get_y(), value.get_y())
        height = min(self.get_bottom() + 1, value.get_bottom() + 1)

* Mon 22 Dec 2014 04:17:04 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """
        newx = max(self.get_x(), value.get_x())
        width = min(self.get_right() + 1, value.get_right() + 1)
        newy = max(self.get_y(), value.get_y())
        height = min(self.get_bottom() + 1, value.get_bottom() + 1)

* Mon 22 Dec 2014 04:17:04 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """
        newx = max(self.get_x(), value.get_x())
        width = min(self.get_right() + 1, value.get_right() + 1)
        newy = max(self.get_y(), value.get_y())
        height = min(self.get_bottom() + 1, value.get_bottom() + 1)
        if newx <= width and newy <= height:

* Mon 22 Dec 2014 04:17:04 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """
        newx = max(self.get_x(), value.get_x())
        width = min(self.get_right() + 1, value.get_right() + 1)
        newy = max(self.get_y(), value.get_y())
        height = min(self.get_bottom() + 1, value.get_bottom() + 1)
        if newx <= width and newy <= height:

* Mon 22 Dec 2014 04:17:04 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """
        newx = max(self.get_x(), value.get_x())
        width = min(self.get_right() + 1, value.get_right() + 1)
        newy = max(self.get_y(), value.get_y())
        height = min(self.get_bottom() + 1, value.get_bottom() + 1)
        if newx <= width and newy <= height:
            return self.__class__(

* Mon 22 Dec 2014 04:17:04 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """
        newx = max(self.get_x(), value.get_x())
        width = min(self.get_right() + 1, value.get_right() + 1)
        newy = max(self.get_y(), value.get_y())
        height = min(self.get_bottom() + 1, value.get_bottom() + 1)
        if newx <= width and newy <= height:
            return self.__class__(

* Mon 22 Dec 2014 04:17:05 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """
        newx = max(self.get_x(), value.get_x())
        width = min(self.get_right() + 1, value.get_right() + 1)
        newy = max(self.get_y(), value.get_y())
        height = min(self.get_bottom() + 1, value.get_bottom() + 1)
        if newx <= width and newy <= height:
            return self.__class__(
                newx, newy, width - int(newx), height - int(newy))

* Mon 22 Dec 2014 04:17:05 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """
        newx = max(self.get_x(), value.get_x())
        width = min(self.get_right() + 1, value.get_right() + 1)
        newy = max(self.get_y(), value.get_y())
        height = min(self.get_bottom() + 1, value.get_bottom() + 1)
        if newx <= width and newy <= height:
            return self.__class__(
                newx, newy, width - int(newx), height - int(newy))

* Mon 22 Dec 2014 04:17:05 AM JST
        intersect(Rectangle(0, 0, 10, 10))
        """
        newx = max(self.get_x(), value.get_x())
        width = min(self.get_right() + 1, value.get_right() + 1)
        newy = max(self.get_y(), value.get_y())
        height = min(self.get_bottom() + 1, value.get_bottom() + 1)
        if newx <= width and newy <= height:
            return self.__class__(
                newx, newy, width - int(newx), height - int(newy))
        return None

* Mon 22 Dec 2014 04:17:05 AM JST

* Mon 22 Dec 2014 04:17:05 AM JST

* Mon 22 Dec 2014 04:17:05 AM JST
    @intersect.when('isinstance(value, (tuple, list)) and len(value) == 4')

* Mon 22 Dec 2014 04:17:05 AM JST
    @intersect.when('isinstance(value, (tuple, list)) and len(value) == 4')

* Mon 22 Dec 2014 04:17:05 AM JST
    @intersect.when('isinstance(value, (tuple, list)) and len(value) == 4')
    def intersect_tuple(self, value):

* Mon 22 Dec 2014 04:17:05 AM JST
    @intersect.when('isinstance(value, (tuple, list)) and len(value) == 4')
    def intersect_tuple(self, value):

* Mon 22 Dec 2014 04:17:05 AM JST
    @intersect.when('isinstance(value, (tuple, list)) and len(value) == 4')
    def intersect_tuple(self, value):
        r"""SUMMARY

* Mon 22 Dec 2014 04:17:06 AM JST

* Mon 22 Dec 2014 04:17:06 AM JST

* Mon 22 Dec 2014 04:17:06 AM JST
        intersect_tuple(value)

* Mon 22 Dec 2014 04:17:06 AM JST

* Mon 22 Dec 2014 04:17:06 AM JST

* Mon 22 Dec 2014 04:17:06 AM JST
        @Arguments:

* Mon 22 Dec 2014 04:17:06 AM JST
        @Arguments:

* Mon 22 Dec 2014 04:17:06 AM JST
        @Arguments:
        - `value`:

* Mon 22 Dec 2014 04:17:07 AM JST

* Mon 22 Dec 2014 04:17:07 AM JST

* Mon 22 Dec 2014 04:17:07 AM JST
        @Return:

* Mon 22 Dec 2014 04:17:07 AM JST

* Mon 22 Dec 2014 04:17:07 AM JST

* Mon 22 Dec 2014 04:17:07 AM JST
        @Error:

* Mon 22 Dec 2014 04:17:07 AM JST
        @Error:

* Mon 22 Dec 2014 04:17:07 AM JST
        @Error:
        """

* Mon 22 Dec 2014 04:17:08 AM JST
        @Error:
        """

* Mon 22 Dec 2014 04:17:08 AM JST
        @Error:
        """
        self.intersect(self.__class__(value))

* Mon 22 Dec 2014 04:17:08 AM JST

* Mon 22 Dec 2014 04:17:08 AM JST

* Mon 22 Dec 2014 04:17:08 AM JST
    def centering(self, rectangle):

* Mon 22 Dec 2014 04:17:08 AM JST
    def centering(self, rectangle):

* Mon 22 Dec 2014 04:17:08 AM JST
    def centering(self, rectangle):
        """function centerin

* Mon 22 Dec 2014 04:17:08 AM JST

* Mon 22 Dec 2014 04:17:08 AM JST

* Mon 22 Dec 2014 04:17:08 AM JST
        rectangle:

* Mon 22 Dec 2014 04:17:08 AM JST

* Mon 22 Dec 2014 04:17:09 AM JST

* Mon 22 Dec 2014 04:17:09 AM JST
        returns Rectangle

* Mon 22 Dec 2014 04:17:09 AM JST

* Mon 22 Dec 2014 04:17:09 AM JST

* Mon 22 Dec 2014 04:17:09 AM JST
        x,y,w,h=10,20,30,40

* Mon 22 Dec 2014 04:17:09 AM JST
        x,y,w,h=10,20,30,40

* Mon 22 Dec 2014 04:17:09 AM JST
        x,y,w,h=10,20,30,40
        r=wx.Rect(x,y,w,h)

* Mon 22 Dec 2014 04:17:09 AM JST
        x,y,w,h=10,20,30,40
        r=wx.Rect(x,y,w,h)

* Mon 22 Dec 2014 04:17:09 AM JST
        x,y,w,h=10,20,30,40
        r=wx.Rect(x,y,w,h)
        x2,y2,w2,h2=100,200,300,400

* Mon 22 Dec 2014 04:17:09 AM JST
        x,y,w,h=10,20,30,40
        r=wx.Rect(x,y,w,h)
        x2,y2,w2,h2=100,200,300,400

* Mon 22 Dec 2014 04:17:09 AM JST
        x,y,w,h=10,20,30,40
        r=wx.Rect(x,y,w,h)
        x2,y2,w2,h2=100,200,300,400
        r.CenterIn(wx.Rect(x2,y2,w2,h2))

* Mon 22 Dec 2014 04:17:09 AM JST
        x,y,w,h=10,20,30,40
        r=wx.Rect(x,y,w,h)
        x2,y2,w2,h2=100,200,300,400
        r.CenterIn(wx.Rect(x2,y2,w2,h2))

* Mon 22 Dec 2014 04:17:10 AM JST
        x,y,w,h=10,20,30,40
        r=wx.Rect(x,y,w,h)
        x2,y2,w2,h2=100,200,300,400
        r.CenterIn(wx.Rect(x2,y2,w2,h2))
        wx.Rect(235, 380, 30, 40)

* Mon 22 Dec 2014 04:17:10 AM JST
        x,y,w,h=10,20,30,40
        r=wx.Rect(x,y,w,h)
        x2,y2,w2,h2=100,200,300,400
        r.CenterIn(wx.Rect(x2,y2,w2,h2))
        wx.Rect(235, 380, 30, 40)

* Mon 22 Dec 2014 04:17:10 AM JST
        x,y,w,h=10,20,30,40
        r=wx.Rect(x,y,w,h)
        x2,y2,w2,h2=100,200,300,400
        r.CenterIn(wx.Rect(x2,y2,w2,h2))
        wx.Rect(235, 380, 30, 40)
        ((w2 - w) / 2) + x2

* Mon 22 Dec 2014 04:17:10 AM JST
        x,y,w,h=10,20,30,40
        r=wx.Rect(x,y,w,h)
        x2,y2,w2,h2=100,200,300,400
        r.CenterIn(wx.Rect(x2,y2,w2,h2))
        wx.Rect(235, 380, 30, 40)
        ((w2 - w) / 2) + x2

* Mon 22 Dec 2014 04:17:10 AM JST
        x,y,w,h=10,20,30,40
        r=wx.Rect(x,y,w,h)
        x2,y2,w2,h2=100,200,300,400
        r.CenterIn(wx.Rect(x2,y2,w2,h2))
        wx.Rect(235, 380, 30, 40)
        ((w2 - w) / 2) + x2
        235

* Mon 22 Dec 2014 04:17:10 AM JST
        x,y,w,h=10,20,30,40
        r=wx.Rect(x,y,w,h)
        x2,y2,w2,h2=100,200,300,400
        r.CenterIn(wx.Rect(x2,y2,w2,h2))
        wx.Rect(235, 380, 30, 40)
        ((w2 - w) / 2) + x2
        235

* Mon 22 Dec 2014 04:17:10 AM JST
        x,y,w,h=10,20,30,40
        r=wx.Rect(x,y,w,h)
        x2,y2,w2,h2=100,200,300,400
        r.CenterIn(wx.Rect(x2,y2,w2,h2))
        wx.Rect(235, 380, 30, 40)
        ((w2 - w) / 2) + x2
        235
        """

* Mon 22 Dec 2014 04:17:10 AM JST
        x,y,w,h=10,20,30,40
        r=wx.Rect(x,y,w,h)
        x2,y2,w2,h2=100,200,300,400
        r.CenterIn(wx.Rect(x2,y2,w2,h2))
        wx.Rect(235, 380, 30, 40)
        ((w2 - w) / 2) + x2
        235
        """

* Mon 22 Dec 2014 04:17:10 AM JST
        x,y,w,h=10,20,30,40
        r=wx.Rect(x,y,w,h)
        x2,y2,w2,h2=100,200,300,400
        r.CenterIn(wx.Rect(x2,y2,w2,h2))
        wx.Rect(235, 380, 30, 40)
        ((w2 - w) / 2) + x2
        235
        """
        return Rectangle()

* Mon 22 Dec 2014 04:17:10 AM JST

* Mon 22 Dec 2014 04:17:10 AM JST

* Mon 22 Dec 2014 04:17:10 AM JST
    def get_top_left(self):

* Mon 22 Dec 2014 04:17:11 AM JST
    def get_top_left(self):

* Mon 22 Dec 2014 04:17:11 AM JST
    def get_top_left(self):
        """function get_top_left

* Mon 22 Dec 2014 04:17:11 AM JST

* Mon 22 Dec 2014 04:17:11 AM JST

* Mon 22 Dec 2014 04:17:11 AM JST
        returns Point

* Mon 22 Dec 2014 04:17:11 AM JST
        returns Point

* Mon 22 Dec 2014 04:17:11 AM JST
        returns Point
        """

* Mon 22 Dec 2014 04:17:11 AM JST
        returns Point
        """

* Mon 22 Dec 2014 04:17:11 AM JST
        returns Point
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:11 AM JST

* Mon 22 Dec 2014 04:17:11 AM JST

* Mon 22 Dec 2014 04:17:11 AM JST
    def set_top_left(self, x):

* Mon 22 Dec 2014 04:17:12 AM JST
    def set_top_left(self, x):

* Mon 22 Dec 2014 04:17:12 AM JST
    def set_top_left(self, x):
        """function set_top_left

* Mon 22 Dec 2014 04:17:12 AM JST

* Mon 22 Dec 2014 04:17:12 AM JST

* Mon 22 Dec 2014 04:17:12 AM JST
        x: int

* Mon 22 Dec 2014 04:17:12 AM JST

* Mon 22 Dec 2014 04:17:12 AM JST

* Mon 22 Dec 2014 04:17:12 AM JST
        returns None

* Mon 22 Dec 2014 04:17:12 AM JST
        returns None

* Mon 22 Dec 2014 04:17:12 AM JST
        returns None
        """

* Mon 22 Dec 2014 04:17:12 AM JST
        returns None
        """

* Mon 22 Dec 2014 04:17:13 AM JST
        returns None
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:13 AM JST

* Mon 22 Dec 2014 04:17:13 AM JST

* Mon 22 Dec 2014 04:17:13 AM JST
    # def set_top_left(self, point):

* Mon 22 Dec 2014 04:17:13 AM JST
    # def set_top_left(self, point):

* Mon 22 Dec 2014 04:17:13 AM JST
    # def set_top_left(self, point):
    #     """function set_top_left

* Mon 22 Dec 2014 04:17:13 AM JST

* Mon 22 Dec 2014 04:17:13 AM JST

* Mon 22 Dec 2014 04:17:13 AM JST
    #     point: Point

* Mon 22 Dec 2014 04:17:13 AM JST

* Mon 22 Dec 2014 04:17:13 AM JST

* Mon 22 Dec 2014 04:17:14 AM JST
    #     returns None

* Mon 22 Dec 2014 04:17:14 AM JST
    #     returns None

* Mon 22 Dec 2014 04:17:14 AM JST
    #     returns None
    #     """

* Mon 22 Dec 2014 04:17:14 AM JST
    #     returns None
    #     """

* Mon 22 Dec 2014 04:17:14 AM JST
    #     returns None
    #     """
    #     return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:14 AM JST

* Mon 22 Dec 2014 04:17:14 AM JST

* Mon 22 Dec 2014 04:17:15 AM JST
    def get_bottom_right(self):

* Mon 22 Dec 2014 04:17:15 AM JST
    def get_bottom_right(self):

* Mon 22 Dec 2014 04:17:15 AM JST
    def get_bottom_right(self):
        """function get_bottom_right

* Mon 22 Dec 2014 04:17:15 AM JST

* Mon 22 Dec 2014 04:17:15 AM JST

* Mon 22 Dec 2014 04:17:15 AM JST
        returns Point

* Mon 22 Dec 2014 04:17:15 AM JST
        returns Point

* Mon 22 Dec 2014 04:17:15 AM JST
        returns Point
        """

* Mon 22 Dec 2014 04:17:15 AM JST
        returns Point
        """

* Mon 22 Dec 2014 04:17:15 AM JST
        returns Point
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:15 AM JST

* Mon 22 Dec 2014 04:17:15 AM JST

* Mon 22 Dec 2014 04:17:16 AM JST
    def set_bottom_right(self, x, y):

* Mon 22 Dec 2014 04:17:16 AM JST
    def set_bottom_right(self, x, y):

* Mon 22 Dec 2014 04:17:16 AM JST
    def set_bottom_right(self, x, y):
        """function set_bottom_right

* Mon 22 Dec 2014 04:17:16 AM JST

* Mon 22 Dec 2014 04:17:16 AM JST

* Mon 22 Dec 2014 04:17:16 AM JST
        x: int

* Mon 22 Dec 2014 04:17:16 AM JST
        x: int

* Mon 22 Dec 2014 04:17:16 AM JST
        x: int
        y: int

* Mon 22 Dec 2014 04:17:16 AM JST

* Mon 22 Dec 2014 04:17:17 AM JST

* Mon 22 Dec 2014 04:17:17 AM JST
        returns None

* Mon 22 Dec 2014 04:17:17 AM JST
        returns None

* Mon 22 Dec 2014 04:17:17 AM JST
        returns None
        """

* Mon 22 Dec 2014 04:17:17 AM JST
        returns None
        """

* Mon 22 Dec 2014 04:17:17 AM JST
        returns None
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:17 AM JST

* Mon 22 Dec 2014 04:17:17 AM JST

* Mon 22 Dec 2014 04:17:18 AM JST
    # def set_bottom_right(self, point):

* Mon 22 Dec 2014 04:17:18 AM JST
    # def set_bottom_right(self, point):

* Mon 22 Dec 2014 04:17:18 AM JST
    # def set_bottom_right(self, point):
    #     """function set_bottom_right

* Mon 22 Dec 2014 04:17:18 AM JST

* Mon 22 Dec 2014 04:17:18 AM JST

* Mon 22 Dec 2014 04:17:18 AM JST
    #     point: Point

* Mon 22 Dec 2014 04:17:18 AM JST

* Mon 22 Dec 2014 04:17:18 AM JST

* Mon 22 Dec 2014 04:17:18 AM JST
    #     returns None

* Mon 22 Dec 2014 04:17:19 AM JST
    #     returns None

* Mon 22 Dec 2014 04:17:19 AM JST
    #     returns None
    #     """

* Mon 22 Dec 2014 04:17:19 AM JST
    #     returns None
    #     """

* Mon 22 Dec 2014 04:17:19 AM JST
    #     returns None
    #     """
    #     return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:19 AM JST

* Mon 22 Dec 2014 04:17:19 AM JST

* Mon 22 Dec 2014 04:17:19 AM JST
    def get_bottom_left(self):

* Mon 22 Dec 2014 04:17:19 AM JST
    def get_bottom_left(self):

* Mon 22 Dec 2014 04:17:19 AM JST
    def get_bottom_left(self):
        """function get_bottom_left

* Mon 22 Dec 2014 04:17:19 AM JST

* Mon 22 Dec 2014 04:17:19 AM JST

* Mon 22 Dec 2014 04:17:19 AM JST
        returns Point

* Mon 22 Dec 2014 04:17:20 AM JST
        returns Point

* Mon 22 Dec 2014 04:17:20 AM JST
        returns Point
        """

* Mon 22 Dec 2014 04:17:20 AM JST
        returns Point
        """

* Mon 22 Dec 2014 04:17:20 AM JST
        returns Point
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:20 AM JST

* Mon 22 Dec 2014 04:17:20 AM JST

* Mon 22 Dec 2014 04:17:20 AM JST
    def set_bottom_left(self, x, y):

* Mon 22 Dec 2014 04:17:20 AM JST
    def set_bottom_left(self, x, y):

* Mon 22 Dec 2014 04:17:20 AM JST
    def set_bottom_left(self, x, y):
        """function set_bottom_left

* Mon 22 Dec 2014 04:17:21 AM JST

* Mon 22 Dec 2014 04:17:21 AM JST

* Mon 22 Dec 2014 04:17:21 AM JST
        x: int

* Mon 22 Dec 2014 04:17:21 AM JST
        x: int

* Mon 22 Dec 2014 04:17:21 AM JST
        x: int
        y: int

* Mon 22 Dec 2014 04:17:21 AM JST

* Mon 22 Dec 2014 04:17:21 AM JST

* Mon 22 Dec 2014 04:17:21 AM JST
        returns None

* Mon 22 Dec 2014 04:17:21 AM JST
        returns None

* Mon 22 Dec 2014 04:17:21 AM JST
        returns None
        """

* Mon 22 Dec 2014 04:17:21 AM JST
        returns None
        """

* Mon 22 Dec 2014 04:17:21 AM JST
        returns None
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:22 AM JST

* Mon 22 Dec 2014 04:17:22 AM JST

* Mon 22 Dec 2014 04:17:22 AM JST
    # def set_bottom_left(self, point):

* Mon 22 Dec 2014 04:17:22 AM JST
    # def set_bottom_left(self, point):

* Mon 22 Dec 2014 04:17:23 AM JST
    # def set_bottom_left(self, point):
    #     """function set_bottom_left

* Mon 22 Dec 2014 04:17:23 AM JST

* Mon 22 Dec 2014 04:17:23 AM JST

* Mon 22 Dec 2014 04:17:23 AM JST
    #     point: Point

* Mon 22 Dec 2014 04:17:23 AM JST

* Mon 22 Dec 2014 04:17:23 AM JST

* Mon 22 Dec 2014 04:17:23 AM JST
    #     returns None

* Mon 22 Dec 2014 04:17:23 AM JST
    #     returns None

* Mon 22 Dec 2014 04:17:23 AM JST
    #     returns None
    #     """

* Mon 22 Dec 2014 04:17:23 AM JST
    #     returns None
    #     """

* Mon 22 Dec 2014 04:17:23 AM JST
    #     returns None
    #     """
    #     return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:24 AM JST

* Mon 22 Dec 2014 04:17:24 AM JST

* Mon 22 Dec 2014 04:17:24 AM JST
    def get_top_right(self):

* Mon 22 Dec 2014 04:17:24 AM JST
    def get_top_right(self):

* Mon 22 Dec 2014 04:17:24 AM JST
    def get_top_right(self):
        """function get_top_right

* Mon 22 Dec 2014 04:17:24 AM JST

* Mon 22 Dec 2014 04:17:24 AM JST

* Mon 22 Dec 2014 04:17:24 AM JST
        returns Point

* Mon 22 Dec 2014 04:17:24 AM JST
        returns Point

* Mon 22 Dec 2014 04:17:24 AM JST
        returns Point
        """

* Mon 22 Dec 2014 04:17:24 AM JST
        returns Point
        """

* Mon 22 Dec 2014 04:17:25 AM JST
        returns Point
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:25 AM JST

* Mon 22 Dec 2014 04:17:25 AM JST

* Mon 22 Dec 2014 04:17:25 AM JST
    # def set_top_right(self, x, y):

* Mon 22 Dec 2014 04:17:25 AM JST
    # def set_top_right(self, x, y):

* Mon 22 Dec 2014 04:17:25 AM JST
    # def set_top_right(self, x, y):
    #     """function set_top_right

* Mon 22 Dec 2014 04:17:25 AM JST

* Mon 22 Dec 2014 04:17:25 AM JST

* Mon 22 Dec 2014 04:17:25 AM JST
    #     x: int

* Mon 22 Dec 2014 04:17:25 AM JST
    #     x: int

* Mon 22 Dec 2014 04:17:25 AM JST
    #     x: int
    #     y: int

* Mon 22 Dec 2014 04:17:26 AM JST

* Mon 22 Dec 2014 04:17:26 AM JST

* Mon 22 Dec 2014 04:17:26 AM JST
    #     returns None

* Mon 22 Dec 2014 04:17:26 AM JST
    #     returns None

* Mon 22 Dec 2014 04:17:26 AM JST
    #     returns None
    #     """

* Mon 22 Dec 2014 04:17:26 AM JST
    #     returns None
    #     """

* Mon 22 Dec 2014 04:17:26 AM JST
    #     returns None
    #     """
    #     return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:26 AM JST

* Mon 22 Dec 2014 04:17:26 AM JST

* Mon 22 Dec 2014 04:17:26 AM JST
    def set_top_right(self, point):

* Mon 22 Dec 2014 04:17:26 AM JST
    def set_top_right(self, point):

* Mon 22 Dec 2014 04:17:26 AM JST
    def set_top_right(self, point):
        """function set_top_right

* Mon 22 Dec 2014 04:17:27 AM JST

* Mon 22 Dec 2014 04:17:27 AM JST

* Mon 22 Dec 2014 04:17:27 AM JST
        point: Point

* Mon 22 Dec 2014 04:17:27 AM JST

* Mon 22 Dec 2014 04:17:27 AM JST

* Mon 22 Dec 2014 04:17:27 AM JST
        returns None

* Mon 22 Dec 2014 04:17:27 AM JST
        returns None

* Mon 22 Dec 2014 04:17:27 AM JST
        returns None
        """

* Mon 22 Dec 2014 04:17:27 AM JST
        returns None
        """

* Mon 22 Dec 2014 04:17:27 AM JST
        returns None
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:28 AM JST

* Mon 22 Dec 2014 04:17:28 AM JST

* Mon 22 Dec 2014 04:17:28 AM JST
    def get_top(self, ):

* Mon 22 Dec 2014 04:17:28 AM JST
    def get_top(self, ):

* Mon 22 Dec 2014 04:17:28 AM JST
    def get_top(self, ):
        r"""SUMMARY

* Mon 22 Dec 2014 04:17:28 AM JST

* Mon 22 Dec 2014 04:17:28 AM JST

* Mon 22 Dec 2014 04:17:28 AM JST
        get_top()

* Mon 22 Dec 2014 04:17:28 AM JST

* Mon 22 Dec 2014 04:17:28 AM JST

* Mon 22 Dec 2014 04:17:28 AM JST
        @Return:

* Mon 22 Dec 2014 04:17:29 AM JST

* Mon 22 Dec 2014 04:17:29 AM JST

* Mon 22 Dec 2014 04:17:29 AM JST
        @Error:

* Mon 22 Dec 2014 04:17:29 AM JST
        @Error:

* Mon 22 Dec 2014 04:17:29 AM JST
        @Error:
        """

* Mon 22 Dec 2014 04:17:30 AM JST
        @Error:
        """

* Mon 22 Dec 2014 04:17:30 AM JST
        @Error:
        """
        pass

* Mon 22 Dec 2014 04:17:30 AM JST

* Mon 22 Dec 2014 04:17:30 AM JST

* Mon 22 Dec 2014 04:17:30 AM JST
    def set_top(self, top):

* Mon 22 Dec 2014 04:17:30 AM JST
    def set_top(self, top):

* Mon 22 Dec 2014 04:17:30 AM JST
    def set_top(self, top):
        r"""SUMMARY

* Mon 22 Dec 2014 04:17:30 AM JST

* Mon 22 Dec 2014 04:17:30 AM JST

* Mon 22 Dec 2014 04:17:31 AM JST
        set_top(top)

* Mon 22 Dec 2014 04:17:31 AM JST

* Mon 22 Dec 2014 04:17:31 AM JST

* Mon 22 Dec 2014 04:17:31 AM JST
        @Arguments:

* Mon 22 Dec 2014 04:17:31 AM JST
        @Arguments:

* Mon 22 Dec 2014 04:17:31 AM JST
        @Arguments:
        - `top`:

* Mon 22 Dec 2014 04:17:31 AM JST

* Mon 22 Dec 2014 04:17:31 AM JST

* Mon 22 Dec 2014 04:17:31 AM JST
        @Return:

* Mon 22 Dec 2014 04:17:32 AM JST

* Mon 22 Dec 2014 04:17:32 AM JST

* Mon 22 Dec 2014 04:17:32 AM JST
        @Error:

* Mon 22 Dec 2014 04:17:32 AM JST
        @Error:

* Mon 22 Dec 2014 04:17:32 AM JST
        @Error:
        """

* Mon 22 Dec 2014 04:17:32 AM JST
        @Error:
        """

* Mon 22 Dec 2014 04:17:33 AM JST
        @Error:
        """
        pass

* Mon 22 Dec 2014 04:17:33 AM JST

* Mon 22 Dec 2014 04:17:33 AM JST

* Mon 22 Dec 2014 04:17:33 AM JST
    def get_left(self):

* Mon 22 Dec 2014 04:17:33 AM JST
    def get_left(self):

* Mon 22 Dec 2014 04:17:33 AM JST
    def get_left(self):
        """function get_left

* Mon 22 Dec 2014 04:17:33 AM JST

* Mon 22 Dec 2014 04:17:33 AM JST

* Mon 22 Dec 2014 04:17:34 AM JST
        returns XCoordinate

* Mon 22 Dec 2014 04:17:34 AM JST
        returns XCoordinate

* Mon 22 Dec 2014 04:17:34 AM JST
        returns XCoordinate
        """

* Mon 22 Dec 2014 04:17:34 AM JST
        returns XCoordinate
        """

* Mon 22 Dec 2014 04:17:34 AM JST
        returns XCoordinate
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:34 AM JST

* Mon 22 Dec 2014 04:17:34 AM JST

* Mon 22 Dec 2014 04:17:34 AM JST
    def set_left(self, left):

* Mon 22 Dec 2014 04:17:34 AM JST
    def set_left(self, left):

* Mon 22 Dec 2014 04:17:34 AM JST
    def set_left(self, left):
        """function set_left

* Mon 22 Dec 2014 04:17:34 AM JST

* Mon 22 Dec 2014 04:17:35 AM JST

* Mon 22 Dec 2014 04:17:35 AM JST
        left:

* Mon 22 Dec 2014 04:17:35 AM JST

* Mon 22 Dec 2014 04:17:35 AM JST

* Mon 22 Dec 2014 04:17:35 AM JST
        returns None

* Mon 22 Dec 2014 04:17:35 AM JST
        returns None

* Mon 22 Dec 2014 04:17:35 AM JST
        returns None
        """

* Mon 22 Dec 2014 04:17:35 AM JST
        returns None
        """

* Mon 22 Dec 2014 04:17:35 AM JST
        returns None
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:35 AM JST

* Mon 22 Dec 2014 04:17:35 AM JST

* Mon 22 Dec 2014 04:17:35 AM JST
    def get_right(self):

* Mon 22 Dec 2014 04:17:36 AM JST
    def get_right(self):

* Mon 22 Dec 2014 04:17:36 AM JST
    def get_right(self):
        """function get_right

* Mon 22 Dec 2014 04:17:36 AM JST

* Mon 22 Dec 2014 04:17:36 AM JST

* Mon 22 Dec 2014 04:17:36 AM JST
        returns XCoordinate

* Mon 22 Dec 2014 04:17:36 AM JST
        returns XCoordinate

* Mon 22 Dec 2014 04:17:36 AM JST
        returns XCoordinate
        """

* Mon 22 Dec 2014 04:17:36 AM JST
        returns XCoordinate
        """

* Mon 22 Dec 2014 04:17:36 AM JST
        returns XCoordinate
        """
        return self.get_x() + int(self.get_width()) - 1

* Mon 22 Dec 2014 04:17:36 AM JST

* Mon 22 Dec 2014 04:17:36 AM JST

* Mon 22 Dec 2014 04:17:37 AM JST
    def set_right(self, x):

* Mon 22 Dec 2014 04:17:37 AM JST
    def set_right(self, x):

* Mon 22 Dec 2014 04:17:37 AM JST
    def set_right(self, x):
        """function set_right

* Mon 22 Dec 2014 04:17:37 AM JST

* Mon 22 Dec 2014 04:17:37 AM JST

* Mon 22 Dec 2014 04:17:37 AM JST
        x:

* Mon 22 Dec 2014 04:17:37 AM JST

* Mon 22 Dec 2014 04:17:37 AM JST

* Mon 22 Dec 2014 04:17:37 AM JST
        returns None

* Mon 22 Dec 2014 04:17:38 AM JST
        returns None

* Mon 22 Dec 2014 04:17:38 AM JST
        returns None
        """

* Mon 22 Dec 2014 04:17:38 AM JST
        returns None
        """

* Mon 22 Dec 2014 04:17:38 AM JST
        returns None
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:38 AM JST

* Mon 22 Dec 2014 04:17:38 AM JST

* Mon 22 Dec 2014 04:17:39 AM JST
    def get_bottom(self):

* Mon 22 Dec 2014 04:17:39 AM JST
    def get_bottom(self):

* Mon 22 Dec 2014 04:17:39 AM JST
    def get_bottom(self):
        """function get_bottom

* Mon 22 Dec 2014 04:17:39 AM JST

* Mon 22 Dec 2014 04:17:39 AM JST

* Mon 22 Dec 2014 04:17:39 AM JST
        returns YCoordinate

* Mon 22 Dec 2014 04:17:39 AM JST
        returns YCoordinate

* Mon 22 Dec 2014 04:17:39 AM JST
        returns YCoordinate
        """

* Mon 22 Dec 2014 04:17:39 AM JST
        returns YCoordinate
        """

* Mon 22 Dec 2014 04:17:39 AM JST
        returns YCoordinate
        """
        return self.get_y() + int(self.get_height()) - 1

* Mon 22 Dec 2014 04:17:40 AM JST

* Mon 22 Dec 2014 04:17:40 AM JST

* Mon 22 Dec 2014 04:17:40 AM JST
    def set_bottom(self, y):

* Mon 22 Dec 2014 04:17:40 AM JST
    def set_bottom(self, y):

* Mon 22 Dec 2014 04:17:40 AM JST
    def set_bottom(self, y):
        """function set_bottom

* Mon 22 Dec 2014 04:17:40 AM JST

* Mon 22 Dec 2014 04:17:40 AM JST

* Mon 22 Dec 2014 04:17:40 AM JST
        y:

* Mon 22 Dec 2014 04:17:40 AM JST

* Mon 22 Dec 2014 04:17:40 AM JST

* Mon 22 Dec 2014 04:17:40 AM JST
        returns None

* Mon 22 Dec 2014 04:17:40 AM JST
        returns None

* Mon 22 Dec 2014 04:17:41 AM JST
        returns None
        """

* Mon 22 Dec 2014 04:17:41 AM JST
        returns None
        """

* Mon 22 Dec 2014 04:17:41 AM JST
        returns None
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:41 AM JST

* Mon 22 Dec 2014 04:17:41 AM JST

* Mon 22 Dec 2014 04:17:41 AM JST
    def __nonzero__(self):

* Mon 22 Dec 2014 04:17:41 AM JST
    def __nonzero__(self):

* Mon 22 Dec 2014 04:17:41 AM JST
    def __nonzero__(self):
        """function __nonzero__

* Mon 22 Dec 2014 04:17:41 AM JST

* Mon 22 Dec 2014 04:17:41 AM JST

* Mon 22 Dec 2014 04:17:41 AM JST
        returns bool

* Mon 22 Dec 2014 04:17:42 AM JST
        returns bool

* Mon 22 Dec 2014 04:17:42 AM JST
        returns bool
        """

* Mon 22 Dec 2014 04:17:42 AM JST
        returns bool
        """

* Mon 22 Dec 2014 04:17:42 AM JST
        returns bool
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:42 AM JST

* Mon 22 Dec 2014 04:17:42 AM JST

* Mon 22 Dec 2014 04:17:42 AM JST
    def __str__(self):

* Mon 22 Dec 2014 04:17:42 AM JST
    def __str__(self):

* Mon 22 Dec 2014 04:17:42 AM JST
    def __str__(self):
        """function __str__

* Mon 22 Dec 2014 04:17:43 AM JST

* Mon 22 Dec 2014 04:17:43 AM JST

* Mon 22 Dec 2014 04:17:43 AM JST
        returns str

* Mon 22 Dec 2014 04:17:43 AM JST
        returns str

* Mon 22 Dec 2014 04:17:43 AM JST
        returns str
        """

* Mon 22 Dec 2014 04:17:43 AM JST
        returns str
        """

* Mon 22 Dec 2014 04:17:43 AM JST
        returns str
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:43 AM JST

* Mon 22 Dec 2014 04:17:43 AM JST

* Mon 22 Dec 2014 04:17:43 AM JST
    def __repr__(self):

* Mon 22 Dec 2014 04:17:43 AM JST
    def __repr__(self):

* Mon 22 Dec 2014 04:17:44 AM JST
    def __repr__(self):
        """function __repr__

* Mon 22 Dec 2014 04:17:44 AM JST

* Mon 22 Dec 2014 04:17:44 AM JST

* Mon 22 Dec 2014 04:17:44 AM JST
        returns str

* Mon 22 Dec 2014 04:17:44 AM JST
        returns str

* Mon 22 Dec 2014 04:17:44 AM JST
        returns str
        """

* Mon 22 Dec 2014 04:17:44 AM JST
        returns str
        """

* Mon 22 Dec 2014 04:17:44 AM JST
        returns str
        """
        x, y = self.point.get()

* Mon 22 Dec 2014 04:17:45 AM JST
        returns str
        """
        x, y = self.point.get()

* Mon 22 Dec 2014 04:17:45 AM JST
        returns str
        """
        x, y = self.point.get()
        width, height = self.size.get()

* Mon 22 Dec 2014 04:17:45 AM JST
        returns str
        """
        x, y = self.point.get()
        width, height = self.size.get()

* Mon 22 Dec 2014 04:17:45 AM JST
        returns str
        """
        x, y = self.point.get()
        width, height = self.size.get()
        return ('{0.__class__.__name__}(x={1}, y={2}, width={3}, height={4})'

* Mon 22 Dec 2014 04:17:45 AM JST
        returns str
        """
        x, y = self.point.get()
        width, height = self.size.get()
        return ('{0.__class__.__name__}(x={1}, y={2}, width={3}, height={4})'

* Mon 22 Dec 2014 04:17:45 AM JST
        returns str
        """
        x, y = self.point.get()
        width, height = self.size.get()
        return ('{0.__class__.__name__}(x={1}, y={2}, width={3}, height={4})'
                .format(self, int(x), int(y), int(width), int(height)))

* Mon 22 Dec 2014 04:17:45 AM JST

* Mon 22 Dec 2014 04:17:45 AM JST

* Mon 22 Dec 2014 04:17:45 AM JST
    def __len__(self):

* Mon 22 Dec 2014 04:17:45 AM JST
    def __len__(self):

* Mon 22 Dec 2014 04:17:45 AM JST
    def __len__(self):
        """function __len__

* Mon 22 Dec 2014 04:17:46 AM JST

* Mon 22 Dec 2014 04:17:46 AM JST

* Mon 22 Dec 2014 04:17:46 AM JST
        returns int

* Mon 22 Dec 2014 04:17:46 AM JST
        returns int

* Mon 22 Dec 2014 04:17:46 AM JST
        returns int
        """

* Mon 22 Dec 2014 04:17:46 AM JST
        returns int
        """

* Mon 22 Dec 2014 04:17:46 AM JST
        returns int
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:47 AM JST

* Mon 22 Dec 2014 04:17:47 AM JST

* Mon 22 Dec 2014 04:17:47 AM JST
    def __getitem__(self, index):

* Mon 22 Dec 2014 04:17:47 AM JST
    def __getitem__(self, index):

* Mon 22 Dec 2014 04:17:47 AM JST
    def __getitem__(self, index):
        """function __getitem__

* Mon 22 Dec 2014 04:17:47 AM JST

* Mon 22 Dec 2014 04:17:47 AM JST

* Mon 22 Dec 2014 04:17:47 AM JST
        index: int

* Mon 22 Dec 2014 04:17:47 AM JST

* Mon 22 Dec 2014 04:17:48 AM JST

* Mon 22 Dec 2014 04:17:48 AM JST
        returns

* Mon 22 Dec 2014 04:17:48 AM JST
        returns

* Mon 22 Dec 2014 04:17:48 AM JST
        returns
        """

* Mon 22 Dec 2014 04:17:48 AM JST
        returns
        """

* Mon 22 Dec 2014 04:17:48 AM JST
        returns
        """
        return None # should raise NotImplementedError()

* Mon 22 Dec 2014 04:17:48 AM JST

* Mon 22 Dec 2014 04:17:48 AM JST

* Mon 22 Dec 2014 04:17:48 AM JST
    def __setitem__(self, index, val):

* Mon 22 Dec 2014 04:18:36 AM JST

* Mon 22 Dec 2014 04:18:36 AM JST

* Mon 22 Dec 2014 04:18:36 AM JST
        height2 = 

* Mon 22 Dec 2014 04:22:44 AM JST
rectangle.get_height()
        if (width2 | height2) < 0:
            return self.__class__(self)
        thisx, thisy = self.get_width(), self.get_height()
        
* Mon 22 Dec 2014 04:23:37 AM JST
height2
* Mon 22 Dec 2014 04:23:51 AM JST
width2
* Mon 22 Dec 2014 04:23:58 AM JST
height2
* Mon 22 Dec 2014 04:36:45 AM JST
f                                     
* Mon 22 Dec 2014 04:38:23 AM JST
None # should raise NotImplementedError()
* Mon 22 Dec 2014 04:38:57 AM JST
self.get_width()
* Mon 22 Dec 2014 04:39:00 AM JST
self.get_height()
* Mon 22 Dec 2014 04:39:10 AM JST
self.get_x()
* Mon 22 Dec 2014 04:39:13 AM JST
self.get_y()
* Mon 22 Dec 2014 04:40:13 AM JST
from xahk2.xobj import Rectangle
r=Rectangle()
r=Rectangle(100,100,100,100)
r
r2=Rectangle(50,50,100,100)

* Mon 22 Dec 2014 04:40:27 AM JST
wr=wx.Rect(0,0,10,10)
wr2=wx.Rect(20,20,30,30)
wr.Union(wr2)

* Mon 22 Dec 2014 04:40:31 AM JST

* Mon 22 Dec 2014 04:40:31 AM JST

* Mon 22 Dec 2014 04:40:31 AM JST
r

* Mon 22 Dec 2014 04:40:39 AM JST
from xahk2.xobj import Rectangle
* Mon 22 Dec 2014 04:40:42 AM JST
r=Rectangle(100,100,100,100)
* Mon 22 Dec 2014 04:41:37 AM JST
from xahk2.xobj import Rectangle
r=Rectangle(0,0,30,30)
r2=Rectangle(10,10,30,30)
r.union(r2)

* Mon 22 Dec 2014 04:41:53 AM JST
from xahk2.xobj import Rectangle
r=Rectangle(0,0,30,30)
r2=Rectangle(10,10,30,30)

* Mon 22 Dec 2014 04:42:00 AM JST
from xahk2.xobj import Rectangle
* Mon 22 Dec 2014 04:44:43 AM JST
from xahk2.xobj import Rectangle
* Mon 22 Dec 2014 04:46:55 AM JST
    def union(self, rectangle):
        """function union

        rectangle:

        returns Rectangle
        """
        thisw, thish = int(self.get_width()), int(self.get_height())
        if (thisw | thish) < 0:
            return self.__class__(rectangle)
        rectw, recth = rectangle.get_width(), rectangle.get_height()
        if (rectw | recth) < 0:
            return self.__class__(self)
        thisx, thisy = int(self.get_x()), int(self.get_y())
        thisw += thisx
        thish += thisy

        rectx = rectangle.get_x()
        recty = rectangle.get_y()
        rectw += rectx
        recth += recty
        if thisx > rectx:
            thisx = rectx
        if thisy > recty:
            thisy = recty
        if thisw < rectw:
            thisw = rectw
        if thish < recth:
            thish = recth
        thisw -= thisx
        thish -= thisy
        return self.__class__(thisx, thisy, thisw, thish)


* Mon 22 Dec 2014 04:48:22 AM JST
r=Rectangle(0,0,30,30)
r2=Rectangle(10,10,30,30)

* Mon 22 Dec 2014 04:48:24 AM JST
r.union(r2)
* Mon 22 Dec 2014 04:49:54 AM JST
rectangle.get_width()
* Mon 22 Dec 2014 04:49:57 AM JST
rectangle.get_height()
* Mon 22 Dec 2014 04:50:10 AM JST
rectangle.get_x()
* Mon 22 Dec 2014 04:50:14 AM JST
rectangle.get_y()
* Mon 22 Dec 2014 04:50:47 AM JST
from xahk2.xobj import Rectangle
* Mon 22 Dec 2014 04:51:01 AM JST
from xahk2.xobj import Rectangle
* Mon 22 Dec 2014 04:52:15 AM JST
@intersect.when
* Mon 22 Dec 2014 04:52:59 AM JST
'isinstance(value, (self.__class__, ))'
* Mon 22 Dec 2014 04:53:24 AM JST
from xahk2.xobj import Rectangle
* Mon 22 Dec 2014 05:14:57 AM JST
recty
* Mon 22 Dec 2014 05:15:03 AM JST
int(rectangle.get_y())
* Mon 22 Dec 2014 05:15:05 AM JST

* Mon 22 Dec 2014 05:15:05 AM JST

* Mon 22 Dec 2014 05:15:05 AM JST
        recty = int(rectangle.get_y())

* Mon 22 Dec 2014 05:59:40 AM JST
object
* Mon 22 Dec 2014 06:00:38 AM JST
str(self._value)
* Mon 22 Dec 2014 06:05:16 AM JST
sup
* Mon 22 Dec 2014 06:07:40 AM JST
self
* Mon 22 Dec 2014 06:10:35 AM JST
super(Coordinate, self).__iadd__(other)
* Mon 22 Dec 2014 06:10:57 AM JST
from xahk2.xobj import Rectangle
* Mon 22 Dec 2014 06:10:59 AM JST
Rectangle
* Mon 22 Dec 2014 06:13:59 AM JST
from xahk2.xobj import XCoordinate
* Mon 22 Dec 2014 06:14:05 AM JST
x=XCoordinate(1)
* Mon 22 Dec 2014 06:14:08 AM JST
x+=1
* Mon 22 Dec 2014 06:14:18 AM JST
from xahk2.xobj import XCoordinate
x=XCoordinate(1)

* Mon 22 Dec 2014 06:14:21 AM JST
x+=1
* Mon 22 Dec 2014 06:15:01 AM JST
from xahk2.xobj import XCoordinate
x=XCoordinate(1)

* Mon 22 Dec 2014 06:15:05 AM JST
x+=1
* Mon 22 Dec 2014 06:16:22 AM JST
from xahk2.xobj import XCoordinate
x=XCoordinate(1)

* Mon 22 Dec 2014 06:16:27 AM JST
x+=1
* Mon 22 Dec 2014 06:17:30 AM JST
from xahk2.xobj import XCoordinate
x=XCoordinate(1)

* Mon 22 Dec 2014 06:20:51 AM JST

* Mon 22 Dec 2014 06:20:51 AM JST

* Mon 22 Dec 2014 06:20:51 AM JST
        # self._value = self._cast(-self._value)

* Mon 22 Dec 2014 06:20:54 AM JST

* Mon 22 Dec 2014 06:20:54 AM JST

* Mon 22 Dec 2014 06:20:55 AM JST
        # self._value = self._cast(+self._value)

* Mon 22 Dec 2014 06:20:57 AM JST

* Mon 22 Dec 2014 06:20:57 AM JST

* Mon 22 Dec 2014 06:20:57 AM JST
        # self._value = self._cast(~self._value)

* Mon 22 Dec 2014 06:24:58 AM JST
set(
* Mon 22 Dec 2014 06:30:53 AM JST
from xahk2.xobj import XCoordinate
x=XCoordinate(1)
* Mon 22 Dec 2014 06:35:32 AM JST
imag
* Mon 22 Dec 2014 06:40:37 AM JST
self._value |= int(other)
* Mon 22 Dec 2014 06:40:48 AM JST
            self._value ^= int(other)
            return self

* Mon 22 Dec 2014 06:41:02 AM JST
            self._value &= int(other)
            return self

* Mon 22 Dec 2014 06:41:14 AM JST
            self._value **= int(other)
            return self

* Mon 22 Dec 2014 06:41:26 AM JST
            self._value /= int(other)
            return self

* Mon 22 Dec 2014 06:41:37 AM JST
            self._value *= int(other)
            return self

* Mon 22 Dec 2014 06:41:57 AM JST
            self._value -= int(other)
            return self

* Mon 22 Dec 2014 06:42:09 AM JST
            self._value += int(other)
            return self

* Mon 22 Dec 2014 06:43:29 AM JST

* Mon 22 Dec 2014 06:43:32 AM JST
_cast(
* Mon 22 Dec 2014 06:43:33 AM JST
self._cast(
* Mon 22 Dec 2014 06:43:40 AM JST

* Mon 22 Dec 2014 06:43:44 AM JST
_cast(
* Mon 22 Dec 2014 06:43:44 AM JST
self._cast(
* Mon 22 Dec 2014 06:43:51 AM JST
return self.__class__(self._value >> int(other))
* Mon 22 Dec 2014 06:44:03 AM JST
return self.__class__(self._value << int(other))
* Mon 22 Dec 2014 06:44:13 AM JST
return self.__class__(self._value | int(other))
* Mon 22 Dec 2014 06:44:21 AM JST
return self.__class__(self._value ^ int(other))
* Mon 22 Dec 2014 06:44:28 AM JST
return self.__class__(self._value & int(other))
* Mon 22 Dec 2014 06:44:36 AM JST
return self.__class__(self._value ** int(other))
* Mon 22 Dec 2014 06:44:44 AM JST
return self.__class__(self._value / int(other))
* Mon 22 Dec 2014 06:44:52 AM JST
return self.__class__(self._value * int(other))
* Mon 22 Dec 2014 06:44:58 AM JST
return self.__class__(self._value - int(other))
* Mon 22 Dec 2014 06:45:04 AM JST
return self.__class__(self._value + int(other))
* Mon 22 Dec 2014 06:45:23 AM JST

* Mon 22 Dec 2014 06:45:28 AM JST
_cast
* Mon 22 Dec 2014 06:45:29 AM JST
self._cast
* Mon 22 Dec 2014 06:45:33 AM JST

* Mon 22 Dec 2014 06:45:37 AM JST
_cast
* Mon 22 Dec 2014 06:45:37 AM JST
self._cast
* Mon 22 Dec 2014 06:45:44 AM JST

* Mon 22 Dec 2014 06:45:46 AM JST
_cast
* Mon 22 Dec 2014 06:45:46 AM JST
self._cast
* Mon 22 Dec 2014 06:45:52 AM JST

* Mon 22 Dec 2014 06:45:56 AM JST
_cast
* Mon 22 Dec 2014 06:45:56 AM JST
self._cast
* Mon 22 Dec 2014 06:46:02 AM JST

* Mon 22 Dec 2014 06:46:05 AM JST
_cast
* Mon 22 Dec 2014 06:46:06 AM JST
self._cast
* Mon 22 Dec 2014 06:46:10 AM JST

* Mon 22 Dec 2014 06:46:15 AM JST
_cast
* Mon 22 Dec 2014 06:46:15 AM JST
self._cast
* Mon 22 Dec 2014 06:46:22 AM JST

* Mon 22 Dec 2014 06:46:26 AM JST
_cast
* Mon 22 Dec 2014 06:46:26 AM JST
self._cast
* Mon 22 Dec 2014 06:58:10 AM JST
        self.assertEqual(expects, got)
        self.assertIsInstance(got, Coordinate)

* Mon 22 Dec 2014 06:59:11 AM JST
        for num in (1, Coordinate(1), '1'):
            got = self.coord + num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, Coordinate)

* Mon 22 Dec 2014 06:59:43 AM JST
        for num in (1, Coordinate(1), '1'):
            got = self.coord - num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, Coordinate)

* Mon 22 Dec 2014 07:00:13 AM JST
        for num in (1, Coordinate(1), '1'):
            got = self.coord * num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, Coordinate)

* Mon 22 Dec 2014 07:00:44 AM JST
        for num in (1, Coordinate(1), '1'):
            got = self.coord / num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, Coordinate)

* Mon 22 Dec 2014 07:01:11 AM JST
        for num in (1, Coordinate(1), '1'):
            got = self.coord ** num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, Coordinate)

* Mon 22 Dec 2014 07:04:02 AM JST
got = 
* Mon 22 Dec 2014 07:04:11 AM JST
got
* Mon 22 Dec 2014 07:04:16 AM JST
got
* Mon 22 Dec 2014 07:05:56 AM JST
        expects = 1
        for num in (1, Coordinate(1), '1'):
            self.coord += num
            self.assertEqual(expects, self.coord)
            self.assertIsInstance(self.coord, Coordinate)
            expects += 1

* Mon 22 Dec 2014 07:06:45 AM JST

* Mon 22 Dec 2014 07:06:45 AM JST

* Mon 22 Dec 2014 07:06:45 AM JST
        expects = 1

* Mon 22 Dec 2014 07:06:47 AM JST

* Mon 22 Dec 2014 07:06:47 AM JST

* Mon 22 Dec 2014 07:06:47 AM JST
        expects = 1

* Mon 22 Dec 2014 07:07:04 AM JST
        for num in (1, Coordinate(1), '1'):
            self.coord /= num
            self.assertEqual(expects, self.coord)
            self.assertIsInstance(self.coord, Coordinate)
            expects /= 1

* Mon 22 Dec 2014 07:09:30 AM JST

* Mon 22 Dec 2014 07:09:30 AM JST

* Mon 22 Dec 2014 07:09:30 AM JST
        expects = 1

* Mon 22 Dec 2014 07:43:28 AM JST
from xahk2.xobj import XCoordinate
x=XCoordinate(1)

* Mon 22 Dec 2014 07:45:48 AM JST
from xahk2.xobj import XCoordinate
x=XCoordinate(1)

* Mon 22 Dec 2014 07:50:27 AM JST
__
* Mon 22 Dec 2014 07:50:27 AM JST
self.__
* Mon 22 Dec 2014 07:52:14 AM JST
other
* Mon 22 Dec 2014 07:53:13 AM JST
defr
* Mon 22 Dec 2014 07:54:43 AM JST

* Mon 22 Dec 2014 07:54:43 AM JST

* Mon 22 Dec 2014 07:54:43 AM JST
        # return cmp(self._value, self._cast(other))

* Mon 22 Dec 2014 07:54:45 AM JST

* Mon 22 Dec 2014 07:54:45 AM JST

* Mon 22 Dec 2014 07:54:45 AM JST
        # return self._value < self._cast(other)

* Mon 22 Dec 2014 07:54:47 AM JST

* Mon 22 Dec 2014 07:54:47 AM JST

* Mon 22 Dec 2014 07:54:47 AM JST
        # return self._value <= self._cast(other)

* Mon 22 Dec 2014 07:54:49 AM JST

* Mon 22 Dec 2014 07:54:49 AM JST

* Mon 22 Dec 2014 07:54:49 AM JST
        # return self._value > self._cast(other)

* Mon 22 Dec 2014 07:54:52 AM JST

* Mon 22 Dec 2014 07:54:52 AM JST

* Mon 22 Dec 2014 07:54:52 AM JST
        # return self._value >= self._cast(other)

* Mon 22 Dec 2014 07:54:56 AM JST

* Mon 22 Dec 2014 07:54:56 AM JST

* Mon 22 Dec 2014 07:54:56 AM JST
        # return self._value == self._cast(other)

* Mon 22 Dec 2014 07:54:57 AM JST

* Mon 22 Dec 2014 07:54:57 AM JST

* Mon 22 Dec 2014 07:54:58 AM JST
        # return self._value != self._cast(other)

* Mon 22 Dec 2014 08:16:28 AM JST

* Mon 22 Dec 2014 08:16:28 AM JST

* Mon 22 Dec 2014 08:16:28 AM JST
        # self._value = self._cast(-self._value)

* Mon 22 Dec 2014 08:16:30 AM JST

* Mon 22 Dec 2014 08:16:30 AM JST

* Mon 22 Dec 2014 08:16:30 AM JST
        # self._value = self._cast(+self._value)

* Mon 22 Dec 2014 08:16:31 AM JST

* Mon 22 Dec 2014 08:16:31 AM JST

* Mon 22 Dec 2014 08:16:31 AM JST
        # self._value = self._cast(~self._value)

* Mon 22 Dec 2014 08:17:49 AM JST
function 
* Mon 22 Dec 2014 08:17:52 AM JST
function 
* Mon 22 Dec 2014 08:18:00 AM JST
function 
* Mon 22 Dec 2014 08:18:07 AM JST
str
* Mon 22 Dec 2014 08:18:10 AM JST

* Mon 22 Dec 2014 08:18:10 AM JST

* Mon 22 Dec 2014 08:18:10 AM JST
        returns str

* Mon 22 Dec 2014 08:18:11 AM JST
        returns str

* Mon 22 Dec 2014 08:18:11 AM JST
        returns str
        """

* Mon 22 Dec 2014 08:18:27 AM JST
str
* Mon 22 Dec 2014 08:18:33 AM JST
returns 
* Mon 22 Dec 2014 08:18:34 AM JST
        returns 
* Mon 22 Dec 2014 08:18:49 AM JST
int
* Mon 22 Dec 2014 08:19:04 AM JST
bool
* Mon 22 Dec 2014 08:19:13 AM JST
function 
* Mon 22 Dec 2014 08:19:17 AM JST
function 
* Mon 22 Dec 2014 08:19:23 AM JST
returns 
* Mon 22 Dec 2014 08:19:23 AM JST
        returns 
* Mon 22 Dec 2014 08:19:27 AM JST
function 
* Mon 22 Dec 2014 08:19:39 AM JST
function 
* Mon 22 Dec 2014 08:19:45 AM JST
bool
* Mon 22 Dec 2014 08:19:58 AM JST
function 
* Mon 22 Dec 2014 08:20:05 AM JST
bool
* Mon 22 Dec 2014 08:20:12 AM JST
function 
* Mon 22 Dec 2014 08:20:17 AM JST
bool
* Mon 22 Dec 2014 08:20:24 AM JST
function 
* Mon 22 Dec 2014 08:20:28 AM JST
long
* Mon 22 Dec 2014 08:20:39 AM JST
bool
* Mon 22 Dec 2014 08:20:41 AM JST
function 
* Mon 22 Dec 2014 08:20:48 AM JST
function 
* Mon 22 Dec 2014 08:21:22 AM JST
SUMMARY
* Mon 22 Dec 2014 08:21:35 AM JST
function 
* Mon 22 Dec 2014 08:21:51 AM JST
SUMMARY__
* Mon 22 Dec 2014 08:21:59 AM JST
function 
* Mon 22 Dec 2014 08:22:13 AM JST
SUMMARY
* Mon 22 Dec 2014 08:22:23 AM JST
function 
* Mon 22 Dec 2014 08:22:34 AM JST
SUMMARY
* Mon 22 Dec 2014 08:22:43 AM JST
function 
* Mon 22 Dec 2014 08:22:52 AM JST
SUMMARY
* Mon 22 Dec 2014 08:23:02 AM JST
function 
* Mon 22 Dec 2014 08:23:11 AM JST
SUMMARY
* Mon 22 Dec 2014 08:23:18 AM JST
function 
* Mon 22 Dec 2014 08:23:31 AM JST
SUMMARY
* Mon 22 Dec 2014 08:23:40 AM JST
function 
* Mon 22 Dec 2014 08:23:49 AM JST
SUMMARY
* Mon 22 Dec 2014 08:23:56 AM JST
function 
* Mon 22 Dec 2014 08:24:08 AM JST
SUMMARY
* Mon 22 Dec 2014 08:24:16 AM JST
function 
* Mon 22 Dec 2014 08:24:17 AM JST
__rshift__
* Mon 22 Dec 2014 08:24:26 AM JST
SUMMARY
* Mon 22 Dec 2014 08:24:36 AM JST
function 
* Mon 22 Dec 2014 08:24:45 AM JST
function 
* Mon 22 Dec 2014 08:24:51 AM JST

* Mon 22 Dec 2014 08:24:51 AM JST

* Mon 22 Dec 2014 08:24:51 AM JST
        returns

* Mon 22 Dec 2014 08:25:02 AM JST
function 
* Mon 22 Dec 2014 08:25:10 AM JST
function 
* Mon 22 Dec 2014 08:25:17 AM JST
function 
* Mon 22 Dec 2014 08:25:28 AM JST
function 
* Mon 22 Dec 2014 08:25:42 AM JST
function 
* Mon 22 Dec 2014 08:25:49 AM JST
function 
* Mon 22 Dec 2014 08:25:58 AM JST
function 
* Mon 22 Dec 2014 08:26:04 AM JST
function 
* Mon 22 Dec 2014 08:26:16 AM JST
function 
* Mon 22 Dec 2014 08:26:23 AM JST
function 
* Mon 22 Dec 2014 08:26:33 AM JST
function 
* Mon 22 Dec 2014 08:26:41 AM JST
function 
* Mon 22 Dec 2014 08:26:48 AM JST
function 
* Mon 22 Dec 2014 08:26:53 AM JST
function 
* Mon 22 Dec 2014 08:26:58 AM JST
function 
* Mon 22 Dec 2014 08:27:05 AM JST
float
* Mon 22 Dec 2014 08:27:13 AM JST
long
* Mon 22 Dec 2014 08:27:19 AM JST
int
* Mon 22 Dec 2014 08:27:55 AM JST
function 
* Mon 22 Dec 2014 08:27:59 AM JST
function 
* Mon 22 Dec 2014 08:38:52 AM JST
.format(self.__class__.__name__)
* Mon 22 Dec 2014 08:39:09 AM JST
__doc__
* Mon 22 Dec 2014 08:41:29 AM JST
        """__add__

        @Arguments:
        - `other`:

        @Return: Coordinate
        """

* Mon 22 Dec 2014 08:46:53 AM JST
int
* Mon 22 Dec 2014 08:46:57 AM JST

* Mon 22 Dec 2014 08:46:57 AM JST

* Mon 22 Dec 2014 08:46:57 AM JST
        returns int

* Mon 22 Dec 2014 08:46:57 AM JST
        returns int

* Mon 22 Dec 2014 08:46:57 AM JST
        returns int
        """

* Mon 22 Dec 2014 08:47:03 AM JST
int
* Mon 22 Dec 2014 08:47:10 AM JST
self, 
* Mon 22 Dec 2014 08:47:14 AM JST
value
* Mon 22 Dec 2014 08:53:31 AM JST

* Mon 22 Dec 2014 08:53:31 AM JST

* Mon 22 Dec 2014 08:53:32 AM JST
Exception

* Mon 22 Dec 2014 08:57:08 AM JST
class Coordinate(object):
    """Class Coordinate
    """
    # Attributes:
    def __init__(self, value=0):
        r"""

        @Arguments:
        - `value`:
        """
        self._value = None
        self.set(value)

    # Operations
    def get(self):
        """get

        @Return: int

        get()
        """
        return self._value

    def set(self, value):
        """set

        @Arguments:
        - `value`:

        @Return: None

        @Error: TypeError, ValueError

        set(0)
        """
        self._value = int(value)

    def __repr__(self):
        return '{0.__class__.__name__}({0._value})'.format(self)

    def __str__(self):
        return str(self._value)

    def __cmp__(self, other):
        return cmp(self._value, int(other))

    def __lt__(self, other):
        return self._value < int(other)

    def __le__(self, other):
        return self._value <= int(other)

    def __gt__(self, other):
        return self._value > int(other)

    def __ge__(self, other):
        return self._value >= int(other)

    def __eq__(self, other):
        return self._value == int(other)

    def __ne__(self, other):
        return self._value != int(other)

    def __hash__(self):
        return hash(self._value)

    def __nonzero__(self):
        return bool(self._value)

    def __add__(self, other):
        return self.__class__(self._value + int(other))

    def __radd__(self, other):
        return other + int(self)

    def __sub__(self, other):
        return self.__class__(self._value - int(other))

    def __rsub__(self, other):
        return other - int(self)

    def __mul__(self, other):
        return self.__class__(self._value * int(other))

    def __rmul__(self, other):
        return other * int(self)

    def __div__(self, other):
        return self.__class__(self._value / int(other))

    def __rdiv__(self, other):
        return other / int(self)

    def __pow__(self, other):
        return self.__class__(self._value ** int(other))

    def __rpow__(self, other):
        return other ** int(self)

    def __and__(self, other):
        return self.__class__(self._value & int(other))

    def __rand__(self, other):
        return other & int(self)

    def __xor__(self, other):
        return self.__class__(self._value ^ int(other))

    def __rxor__(self, other):
        return other ^ int(self)

    def __or__(self, other):
        return self.__class__(self._value | int(other))

    def __ror__(self, other):
        return other | int(self)

    def __lshift__(self, other):
        return self.__class__(self._value << int(other))

    def __rlshift__(self, other):
        return other << int(self)

    def __rshift__(self, other):
        return self.__class__(self._value >> int(other))

    def __rrshift__(self, other):
        return other >> int(self)

    def __neg__(self, ):
        self._value = -self._value
        return self

    def __pos__(self):
        self._value = +self._value
        return self

    def __invert__(self, ):
        self._value = ~self._value
        return self

    def __iadd__(self, other):
        self._value += int(other)
        return self

    def __isub__(self, other):
        self._value -= int(other)
        return self

    def __imul__(self, other):
        self._value *= int(other)
        return self

    def __idiv__(self, other):
        self._value /= int(other)
        return self

    def __ipow__(self, other):
        self._value **= int(other)
        return self

    def __iand__(self, other):
        self._value &= int(other)
        return self

    def __ixor__(self, other):
        self._value ^= int(other)
        return self

    def __ior__(self, other):
        self._value |= int(other)
        return self

    def __ilshift__(self, other):
        self._value <<= int(other)
        return self

    def __irshift__(self, other):
        self._value >>= int(other)
        return self

    def __int__(self):
        return self._value

    def __long__(self):
        return long(self._value)

    def __float__(self):
        return float(self._value)

    def __complex__(self):
        return complex(self._value)

    def __oct__(self):
        return oct(self._value)

    def __hex__(self):
        return hex(self._value)

* Mon 22 Dec 2014 08:57:35 AM JST
Coordinate
* Mon 22 Dec 2014 08:57:38 AM JST
Coordinate
* Mon 22 Dec 2014 09:01:29 AM JST
UserInt
* Mon 22 Dec 2014 09:01:32 AM JST
userint
* Mon 22 Dec 2014 09:01:35 AM JST
Side
* Mon 22 Dec 2014 09:01:44 AM JST
userint.UserInt
* Mon 22 Dec 2014 09:04:20 AM JST
Coordinate
* Mon 22 Dec 2014 09:04:26 AM JST
userint.UserInt
* Mon 22 Dec 2014 09:05:42 AM JST
class TestSide(MockerTestCase):
    @classmethod
    def setUpClass(cls):
        cls.default = 0

    def setUp(self):
        self.coord = Coordinate(self.default)
        self.mocker.replay()

    def test_get(self, ):
        self.assertEqual(self.default, self.coord.get())

    def test_set(self, ):
        expects = 1
        self.coord.set(expects)
        self.assertEqual(expects, self.coord.get())

    def test_set_float(self, ):
        expects = 1
        self.coord.set(1.9)
        self.assertEqual(expects, self.coord.get())

    def test_set_exception(self, ):
        with self.assertRaises(ValueError):
            self.coord.set('a')

        for obj in (object, object()):
            with self.assertRaises(TypeError):
                self.coord.set(obj)

    def test_set_float_trancation(self, ):
        self.coord.set(1.5)
        self.assertEqual(1, self.coord.get())

    def test___repr__(self, ):
        expects = '{}({})'.format(self.coord.__class__.__name__, self.default)
        self.assertEqual(expects, repr(self.coord))

    def test___str__(self, ):
        expects = str(self.default)
        self.assertEqual(expects, str(self.coord))

    def test___cmp__(self, ):
        self.assertEqual(cmp(self.coord, 0), 0)
        self.assertEqual(cmp(self.coord, 1), -1)
        self.assertEqual(cmp(self.coord, -1), 1)
        self.assertEqual(cmp(self.coord, Coordinate(0)), 0)
        self.assertEqual(cmp(self.coord, Coordinate(1)), -1)
        self.assertEqual(cmp(self.coord, Coordinate(-1)), 1)

    def test___lt__(self, ):
        self.assertTrue(self.coord < 1)
        self.assertTrue(self.coord < Coordinate(1))
        self.assertFalse(self.coord < -1)
        self.assertFalse(self.coord < Coordinate(-1))

    def test___le__(self, ):
        self.assertTrue(self.coord <= 1)
        self.assertTrue(self.coord <= Coordinate(1))
        self.assertTrue(self.coord <= 0)
        self.assertTrue(self.coord <= Coordinate(0))
        self.assertFalse(self.coord <= -1)
        self.assertFalse(self.coord <= Coordinate(-1))

    def test___gt__(self, ):
        self.assertTrue(self.coord > -1)
        self.assertTrue(self.coord > Coordinate(-1))
        self.assertFalse(self.coord > 1)
        self.assertFalse(self.coord > Coordinate(1))

    def test___ge__(self, ):
        self.assertTrue(self.coord >= -1)
        self.assertTrue(self.coord >= Coordinate(-1))
        self.assertTrue(self.coord >= 0)
        self.assertTrue(self.coord >= Coordinate(0))
        self.assertFalse(self.coord >= 1)
        self.assertFalse(self.coord >= Coordinate(1))

    def test___eq__(self, ):
        self.assertTrue(self.coord == 0)
        self.assertTrue(self.coord == Coordinate(0))
        self.assertFalse(self.coord == 1)
        self.assertFalse(self.coord == Coordinate(1))

    def test___ne__(self, ):
        self.assertTrue(self.coord != 1)
        self.assertTrue(self.coord != Coordinate(1))
        self.assertFalse(self.coord != 0)
        self.assertFalse(self.coord != Coordinate(0))

    def test___hash__(self, ):
        self.assertEqual(hash(0), hash(self.coord))
        self.assertEqual(hash(1), hash(Coordinate(1)))

    def test___nonzero__(self, ):
        self.assertFalse(self.coord)
        self.assertTrue(Coordinate(1))

    def test___add__(self, ):
        expects = 1
        for num in (1, Coordinate(1), '1'):
            got = self.coord + num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, Coordinate)

    def test___sub__(self, ):
        expects = -1
        for num in (1, Coordinate(1), '1'):
            got = self.coord - num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, Coordinate)

    def test___mul__(self, ):
        expects = 0
        for num in (1, Coordinate(1), '1'):
            got = self.coord * num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, Coordinate)

    def test___div__(self, ):
        expects = 0
        for num in (1, Coordinate(1), '1'):
            got = self.coord / num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, Coordinate)

    def test___pow__(self, ):
        expects = 0
        for num in (1, Coordinate(1), '1'):
            got = self.coord ** num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, Coordinate)

    def test___and__(self, ):
        expects = 0
        for num in (1, Coordinate(1), '1'):
            got = self.coord & num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, Coordinate)

    def test___xor__(self, ):
        expects = 1
        for num in (1, Coordinate(1), '1'):
            got = self.coord ^ num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, Coordinate)

    def test___or__(self, ):
        expects = 1
        for num in (1, Coordinate(1), '1'):
            got = self.coord | num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, Coordinate)

    def test___lshift__(self, ):
        expects = 0
        for num in (1, Coordinate(1), '1'):
            got = self.coord << num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, Coordinate)

    def test___rshift__(self, ):
        expects = 0
        for num in (1, Coordinate(1), '1'):
            got = self.coord >> num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, Coordinate)

    def test___neg__(self, ):
        expects = -1
        self.coord = Coordinate(1)
        got = -self.coord
        self.assertEqual(expects, got)
        self.assertIsInstance(got, Coordinate)

    def test___pos__(self, ):
        expects = -1
        self.coord = Coordinate(-1)
        got = +self.coord
        self.assertEqual(expects, got)
        self.assertIsInstance(got, Coordinate)

    def test___invert__(self, ):
        expects = -2
        self.coord = Coordinate(1)
        got = ~self.coord
        self.assertEqual(expects, got)
        self.assertIsInstance(got, Coordinate)

    def test___iadd__(self, ):
        expects = 1
        for num in (1, Coordinate(1), '1'):
            self.coord += num
            self.assertEqual(expects, self.coord)
            self.assertIsInstance(self.coord, Coordinate)
            expects += 1

    def test___isub__(self, ):
        expects = -1
        for num in (1, Coordinate(1), '1'):
            self.coord -= num
            self.assertEqual(expects, self.coord)
            self.assertIsInstance(self.coord, Coordinate)
            expects -= 1

    def test___imul__(self, ):
        expects = 0
        for num in (1, Coordinate(1), '1'):
            self.coord *= num
            self.assertEqual(expects, self.coord)
            self.assertIsInstance(self.coord, Coordinate)
            expects *= 1

    def test___idiv__(self, ):
        expects = 0
        for num in (1, Coordinate(1), '1'):
            self.coord /= num
            self.assertEqual(expects, self.coord)
            self.assertIsInstance(self.coord, Coordinate)
            expects /= 1

    def test___ipow__(self, ):
        expects = 0
        for num in (1, Coordinate(1), '1'):
            self.coord **= num
            self.assertEqual(expects, self.coord)
            self.assertIsInstance(self.coord, Coordinate)
            expects **= 1

    def test___iand__(self, ):
        expects = 0
        for num in (1, Coordinate(1), '1'):
            self.coord &= num
            self.assertEqual(expects, self.coord)
            self.assertIsInstance(self.coord, Coordinate)
            expects &= 1

    def test___ixor__(self, ):
        expects = 1
        for num in (1, Coordinate(1), '1'):
            self.coord ^= num
            self.assertEqual(expects, self.coord)
            self.assertIsInstance(self.coord, Coordinate)
            expects ^= 1

    def test___ior__(self, ):
        expects = 1
        for num in (1, Coordinate(1), '1'):
            self.coord |= num
            self.assertEqual(expects, self.coord)
            self.assertIsInstance(self.coord, Coordinate)
            expects |= 1

    def test___ilshift__(self, ):
        expects = 0
        for num in (1, Coordinate(1), '1'):
            self.coord <<= num
            self.assertEqual(expects, self.coord)
            self.assertIsInstance(self.coord, Coordinate)
            expects <<= 1

    def test___irshift__(self, ):
        expects = 0
        for num in (1, Coordinate(1), '1'):
            self.coord >>= num
            self.assertEqual(expects, self.coord)
            self.assertIsInstance(self.coord, Coordinate)
            expects >>= 1

    def test___int__(self, ):
        self.assertEqual(0, int(self.coord))
        self.assertIsInstance(int(self.coord), int)

    def test___long__(self, ):
        self.assertEqual(0, long(self.coord))
        self.assertIsInstance(long(self.coord), long)

    def test___float__(self, ):
        self.assertEqual(0.0, float(self.coord))
        self.assertIsInstance(float(self.coord), float)

    def test___complex__(self, ):
        self.assertEqual(complex(0), complex(self.coord))
        self.assertIsInstance(complex(self.coord), complex)

    def test___oct__(self, ):
        self.assertEqual(oct(0), oct(self.coord))

    def test___hex__(self, ):
        self.assertEqual(hex(0), hex(self.coord))

    def test_null_arg(self, ):
        sideobj = Coordinate()
        self.assertEqual(0, sideobj)

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass

* Mon 22 Dec 2014 09:09:04 AM JST
Coordinate, 
* Mon 22 Dec 2014 09:10:03 AM JST
side,
* Mon 22 Dec 2014 09:17:05 AM JST
xahk
* Mon 22 Dec 2014 09:17:29 AM JST
r=Rectangle()
* Mon 22 Dec 2014 10:59:06 AM JST
int(
* Mon 22 Dec 2014 10:59:09 AM JST
int(
* Mon 22 Dec 2014 10:59:14 AM JST
int(
* Mon 22 Dec 2014 10:59:17 AM JST
int(
* Mon 22 Dec 2014 10:59:21 AM JST
int(
* Mon 22 Dec 2014 10:59:24 AM JST
int
* Mon 22 Dec 2014 10:59:27 AM JST
int(
* Mon 22 Dec 2014 10:59:31 AM JST
int(
* Mon 22 Dec 2014 11:03:54 AM JST
300, 400
* Mon 22 Dec 2014 11:04:08 AM JST
100, 200, 300, 400
* Mon 22 Dec 2014 11:05:24 AM JST
(10, 20, 390, 580)
* Mon 22 Dec 2014 11:15:38 AM JST
calc
* Mon 22 Dec 2014 11:20:46 AM JST
wx.Rect(*rect1)
* Mon 22 Dec 2014 11:24:37 AM JST

* Mon 22 Dec 2014 11:24:37 AM JST

* Mon 22 Dec 2014 11:24:37 AM JST
    return

* Mon 22 Dec 2014 11:26:57 AM JST
((253, 3204, 124, 64), (1234, 55, 1587, 2935), (253, 55, 2568, 3213)),
((1212, 4278, 2317, 8), (-1274, 2373, 2063, 1486), (-1274, 2373, 4803, 1913)),
((-698, 1894, 1385, 2730), (239, 2739, 894, 4093), (-698, 1894, 1831, 4938)),
((2912, 4400, 3551, 3132), (2659, 850, 1161, 3718), (2659, 850, 3804, 6682)),
((-226, 160, 4902, 2734), (-781, 1208, 1242, 2548), (-781, 160, 5457, 3596)),
((-883, -1744, 2444, 685), (-695, 998, 675, 3513), (-883, -1744, 2444, 6255)),
((1699, 2686, 1685, 2422), (3642, 4740, 2296, 2120), (1699, 2686, 4239, 4174)),
((2590, -23, 1505, 4229), (-1763, 895, 720, 3331), (-1763, -23, 5858, 4249)),
((1354, 4829, 2778, 3299), (4155, 1749, 3253, 4406), (1354, 1749, 6054, 6379)),
((722, 1081, 851, 1795), (-719, 4259, 1953, 4004), (-719, 1081, 2292, 7182)),
((-1428, -48, 2094, 4192), (-803, -1299, 1382, 2761), (-1428, -1299, 2094, 5443)),
((-876, 2286, 617, 983), (4747, 2441, 77, 3191), (-876, 2286, 5700, 3346)),
((194, 1751, 3465, 2407), (123, 4859, 883, 502), (123, 1751, 3536, 3610)),
((2501, -1274, 707, 542), (4505, -1280, 3853, 514), (2501, -1280, 5857, 548)),
((-406, -1784, 4757, 1041), (1236, 4843, 1490, 1653), (-406, -1784, 4757, 8280)),
((960, 3425, 2144, 660), (2310, -1058, 1881, 4615), (960, -1058, 3231, 5143)),
((3931, 2349, 317, 3554), (1173, 198, 4650, 1584), (1173, 198, 4650, 5705)),
((920, 623, 799, 2492), (1157, -160, 4379, 1527), (920, -160, 4616, 3275)),
((4315, 968, 1889, 1407), (2755, 984, 4854, 1100), (2755, 968, 4854, 1407)),
((-1215, 4752, 3234, 1458), (3187, 3044, 4394, 3013), (-1215, 3044, 8796, 3166)),
((4650, 4205, 4843, 493), (3778, 4348, 3591, 1022), (3778, 4205, 5715, 1165)),
((-939, 926, 2934, 999), (-427, 1321, 168, 2874), (-939, 926, 2934, 3269)),
((2729, 4515, 3123, 2458), (4266, 2472, 4181, 86), (2729, 2472, 5718, 4501)),
((-1111, -384, 2267, 4971), (4181, 4404, 3820, 146), (-1111, -384, 9112, 4971)),
((-727, 2330, 3227, 21), (3932, 2533, 2262, 237), (-727, 2330, 6921, 440)),
((2854, 4036, 3997, 1386), (-1239, 256, 3698, 1468), (-1239, 256, 8090, 5166)),
((3901, -75, 2019, 2451), (1920, 529, 4849, 2070), (1920, -75, 4849, 2674)),
((1128, -134, 3831, 2497), (-1183, 3104, 1168, 152), (-1183, -134, 6142, 3390)),
((-1587, 3308, 3794, 3880), (4670, 4448, 1349, 3735), (-1587, 3308, 7606, 4875)),
((3414, 144, 2372, 885), (-442, -1989, 772, 619), (-442, -1989, 6228, 3018)),
((688, 492, 1188, 277), (-594, 1914, 3811, 2296), (-594, 492, 3811, 3718)),
((-115, 1069, 46, 4396), (1383, 4187, 4513, 4674), (-115, 1069, 6011, 7792)),
((970, 2730, 2113, 2590), (1720, 32, 2503, 1586), (970, 32, 3253, 5288)),
((4110, 4792, 1786, 4339), (4505, 1230, 4500, 4054), (4110, 1230, 4895, 7901)),
((536, -1809, 762, 4263), (4194, 540, 4649, 2201), (536, -1809, 8307, 4550)),
((3313, -1089, 184, 876), (4623, 2003, 2385, 4886), (3313, -1089, 3695, 7978)),
((1580, -874, 2733, 4735), (3829, -1081, 3000, 990), (1580, -1081, 5249, 4942)),
((3180, 441, 2281, 2686), (4000, 2787, 2533, 3604), (3180, 441, 3353, 5950)),
((4505, -56, 1618, 3840), (779, 3671, 2206, 390), (779, -56, 5344, 4117)),
((3564, 1459, 4574, 4720), (-159, 1860, 622, 2032), (-159, 1459, 8297, 4720)),
((4064, -1667, 3998, 2454), (3478, 3756, 746, 4896), (3478, -1667, 4584, 10319)),
((1596, -679, 1578, 3370), (4927, 2804, 3545, 1511), (1596, -679, 6876, 4994)),
((761, 1490, 3901, 2652), (4385, 4775, 3048, 2795), (761, 1490, 6672, 6080)),
((886, -334, 2089, 2833), (-986, 151, 954, 3356), (-986, -334, 3961, 3841)),
((-1440, -1683, 473, 4129), (3481, 351, 4479, 3250), (-1440, -1683, 9400, 5284)),
((-796, 1453, 792, 105), (3219, 2090, 1114, 4652), (-796, 1453, 5129, 5289)),
((835, 3093, 636, 2019), (819, 2895, 2788, 4404), (819, 2895, 2788, 4404)),
((1503, 2175, 3926, 195), (716, 1232, 461, 2258), (716, 1232, 4713, 2258)),
((-1157, -782, 4808, 1946), (1023, 4338, 721, 2270), (-1157, -782, 4808, 7390)),
((4013, 3276, 649, 1484), (341, 93, 3003, 1642), (341, 93, 4321, 4667)),

* Mon 22 Dec 2014 11:32:27 AM JST
((253, 3204, 124, 64), (1234, 55, 1587, 2935), (253, 55, 2568, 3213)),
((1212, 4278, 2317, 8), (-1274, 2373, 2063, 1486), (-1274, 2373, 4803, 1913)),
((-698, 1894, 1385, 2730), (239, 2739, 894, 4093), (-698, 1894, 1831, 4938)),
((2912, 4400, 3551, 3132), (2659, 850, 1161, 3718), (2659, 850, 3804, 6682)),
((-226, 160, 4902, 2734), (-781, 1208, 1242, 2548), (-781, 160, 5457, 3596)),
((-883, -1744, 2444, 685), (-695, 998, 675, 3513), (-883, -1744, 2444, 6255)),
((1699, 2686, 1685, 2422), (3642, 4740, 2296, 2120), (1699, 2686, 4239, 4174)),
((2590, -23, 1505, 4229), (-1763, 895, 720, 3331), (-1763, -23, 5858, 4249)),
((1354, 4829, 2778, 3299), (4155, 1749, 3253, 4406), (1354, 1749, 6054, 6379)),
((722, 1081, 851, 1795), (-719, 4259, 1953, 4004), (-719, 1081, 2292, 7182)),
((-1428, -48, 2094, 4192), (-803, -1299, 1382, 2761), (-1428, -1299, 2094, 5443)),
((-876, 2286, 617, 983), (4747, 2441, 77, 3191), (-876, 2286, 5700, 3346)),
((194, 1751, 3465, 2407), (123, 4859, 883, 502), (123, 1751, 3536, 3610)),
((2501, -1274, 707, 542), (4505, -1280, 3853, 514), (2501, -1280, 5857, 548)),
((-406, -1784, 4757, 1041), (1236, 4843, 1490, 1653), (-406, -1784, 4757, 8280)),
((960, 3425, 2144, 660), (2310, -1058, 1881, 4615), (960, -1058, 3231, 5143)),
((3931, 2349, 317, 3554), (1173, 198, 4650, 1584), (1173, 198, 4650, 5705)),
((920, 623, 799, 2492), (1157, -160, 4379, 1527), (920, -160, 4616, 3275)),
((4315, 968, 1889, 1407), (2755, 984, 4854, 1100), (2755, 968, 4854, 1407)),
((-1215, 4752, 3234, 1458), (3187, 3044, 4394, 3013), (-1215, 3044, 8796, 3166)),
((4650, 4205, 4843, 493), (3778, 4348, 3591, 1022), (3778, 4205, 5715, 1165)),
((-939, 926, 2934, 999), (-427, 1321, 168, 2874), (-939, 926, 2934, 3269)),
((2729, 4515, 3123, 2458), (4266, 2472, 4181, 86), (2729, 2472, 5718, 4501)),
((-1111, -384, 2267, 4971), (4181, 4404, 3820, 146), (-1111, -384, 9112, 4971)),
((-727, 2330, 3227, 21), (3932, 2533, 2262, 237), (-727, 2330, 6921, 440)),
((2854, 4036, 3997, 1386), (-1239, 256, 3698, 1468), (-1239, 256, 8090, 5166)),
((3901, -75, 2019, 2451), (1920, 529, 4849, 2070), (1920, -75, 4849, 2674)),
((1128, -134, 3831, 2497), (-1183, 3104, 1168, 152), (-1183, -134, 6142, 3390)),
((-1587, 3308, 3794, 3880), (4670, 4448, 1349, 3735), (-1587, 3308, 7606, 4875)),
((3414, 144, 2372, 885), (-442, -1989, 772, 619), (-442, -1989, 6228, 3018)),
((688, 492, 1188, 277), (-594, 1914, 3811, 2296), (-594, 492, 3811, 3718)),
((-115, 1069, 46, 4396), (1383, 4187, 4513, 4674), (-115, 1069, 6011, 7792)),
((970, 2730, 2113, 2590), (1720, 32, 2503, 1586), (970, 32, 3253, 5288)),
((4110, 4792, 1786, 4339), (4505, 1230, 4500, 4054), (4110, 1230, 4895, 7901)),
((536, -1809, 762, 4263), (4194, 540, 4649, 2201), (536, -1809, 8307, 4550)),
((3313, -1089, 184, 876), (4623, 2003, 2385, 4886), (3313, -1089, 3695, 7978)),
((1580, -874, 2733, 4735), (3829, -1081, 3000, 990), (1580, -1081, 5249, 4942)),
((3180, 441, 2281, 2686), (4000, 2787, 2533, 3604), (3180, 441, 3353, 5950)),
((4505, -56, 1618, 3840), (779, 3671, 2206, 390), (779, -56, 5344, 4117)),
((3564, 1459, 4574, 4720), (-159, 1860, 622, 2032), (-159, 1459, 8297, 4720)),
((4064, -1667, 3998, 2454), (3478, 3756, 746, 4896), (3478, -1667, 4584, 10319)),
((1596, -679, 1578, 3370), (4927, 2804, 3545, 1511), (1596, -679, 6876, 4994)),
((761, 1490, 3901, 2652), (4385, 4775, 3048, 2795), (761, 1490, 6672, 6080)),
((886, -334, 2089, 2833), (-986, 151, 954, 3356), (-986, -334, 3961, 3841)),
((-1440, -1683, 473, 4129), (3481, 351, 4479, 3250), (-1440, -1683, 9400, 5284)),
((-796, 1453, 792, 105), (3219, 2090, 1114, 4652), (-796, 1453, 5129, 5289)),
((835, 3093, 636, 2019), (819, 2895, 2788, 4404), (819, 2895, 2788, 4404)),
((1503, 2175, 3926, 195), (716, 1232, 461, 2258), (716, 1232, 4713, 2258)),
((-1157, -782, 4808, 1946), (1023, 4338, 721, 2270), (-1157, -782, 4808, 7390)),
((4013, 3276, 649, 1484), (341, 93, 3003, 1642), (341, 93, 4321, 4667)),

* Mon 22 Dec 2014 11:33:00 AM JST
        
* Mon 22 Dec 2014 11:33:06 AM JST
            
* Mon 22 Dec 2014 11:33:08 AM JST
        
* Mon 22 Dec 2014 11:33:36 AM JST
             
* Mon 22 Dec 2014 11:36:02 AM JST
             
* Mon 22 Dec 2014 11:39:55 AM JST
    def test_union_50(self, ):
        precalc = [((253, 3204, 124, 64),
                    (1234, 55, 1587, 2935),
                    (253, 55, 2568, 3213)),
                   ((1212, 4278, 2317, 8),
                    (-1274, 2373, 2063, 1486),
                    (-1274, 2373, 4803, 1913)),
                   ((-698, 1894, 1385, 2730),
                    (239, 2739, 894, 4093),
                    (-698, 1894, 1831, 4938)),
                   ((2912, 4400, 3551, 3132),
                    (2659, 850, 1161, 3718),
                    (2659, 850, 3804, 6682)),
                   ((-226, 160, 4902, 2734),
                    (-781, 1208, 1242, 2548),
                    (-781, 160, 5457, 3596)),
                   ((-883, -1744, 2444, 685),
                    (-695, 998, 675, 3513),
                    (-883, -1744, 2444, 6255)),
                   ((1699, 2686, 1685, 2422),
                    (3642, 4740, 2296, 2120),
                    (1699, 2686, 4239, 4174)),
                   ((2590, -23, 1505, 4229),
                    (-1763, 895, 720, 3331),
                    (-1763, -23, 5858, 4249)),
                   ((1354, 4829, 2778, 3299),
                    (4155, 1749, 3253, 4406),
                    (1354, 1749, 6054, 6379)),
                   ((722, 1081, 851, 1795),
                    (-719, 4259, 1953, 4004),
                    (-719, 1081, 2292, 7182)),
                   ((-1428, -48, 2094, 4192),
                    (-803, -1299, 1382, 2761),
                    (-1428, -1299, 2094, 5443)),
                   ((-876, 2286, 617, 983),
                    (4747, 2441, 77, 3191),
                    (-876, 2286, 5700, 3346)),
                   ((194, 1751, 3465, 2407),
                    (123, 4859, 883, 502),
                    (123, 1751, 3536, 3610)),
                   ((2501, -1274, 707, 542),
                    (4505, -1280, 3853, 514),
                    (2501, -1280, 5857, 548)),
                  ((-406, -1784, 4757, 1041),
                   (1236, 4843, 1490, 1653),
                   (-406, -1784, 4757, 8280)),
((960, 3425, 2144, 660), (2310, -1058, 1881, 4615), (960, -1058, 3231, 5143)),
((3931, 2349, 317, 3554), (1173, 198, 4650, 1584), (1173, 198, 4650, 5705)),
((920, 623, 799, 2492), (1157, -160, 4379, 1527), (920, -160, 4616, 3275)),
((4315, 968, 1889, 1407), (2755, 984, 4854, 1100), (2755, 968, 4854, 1407)),
((-1215, 4752, 3234, 1458), (3187, 3044, 4394, 3013), (-1215, 3044, 8796, 3166)),
((4650, 4205, 4843, 493), (3778, 4348, 3591, 1022), (3778, 4205, 5715, 1165)),
((-939, 926, 2934, 999), (-427, 1321, 168, 2874), (-939, 926, 2934, 3269)),
((2729, 4515, 3123, 2458), (4266, 2472, 4181, 86), (2729, 2472, 5718, 4501)),
((-1111, -384, 2267, 4971), (4181, 4404, 3820, 146), (-1111, -384, 9112, 4971)),
((-727, 2330, 3227, 21), (3932, 2533, 2262, 237), (-727, 2330, 6921, 440)),
((2854, 4036, 3997, 1386), (-1239, 256, 3698, 1468), (-1239, 256, 8090, 5166)),
((3901, -75, 2019, 2451), (1920, 529, 4849, 2070), (1920, -75, 4849, 2674)),
((1128, -134, 3831, 2497), (-1183, 3104, 1168, 152), (-1183, -134, 6142, 3390)),
((-1587, 3308, 3794, 3880), (4670, 4448, 1349, 3735), (-1587, 3308, 7606, 4875)),
((3414, 144, 2372, 885), (-442, -1989, 772, 619), (-442, -1989, 6228, 3018)),
((688, 492, 1188, 277), (-594, 1914, 3811, 2296), (-594, 492, 3811, 3718)),
((-115, 1069, 46, 4396), (1383, 4187, 4513, 4674), (-115, 1069, 6011, 7792)),
((970, 2730, 2113, 2590), (1720, 32, 2503, 1586), (970, 32, 3253, 5288)),
((4110, 4792, 1786, 4339), (4505, 1230, 4500, 4054), (4110, 1230, 4895, 7901)),
((536, -1809, 762, 4263), (4194, 540, 4649, 2201), (536, -1809, 8307, 4550)),
((3313, -1089, 184, 876), (4623, 2003, 2385, 4886), (3313, -1089, 3695, 7978)),
((1580, -874, 2733, 4735), (3829, -1081, 3000, 990), (1580, -1081, 5249, 4942)),
((3180, 441, 2281, 2686), (4000, 2787, 2533, 3604), (3180, 441, 3353, 5950)),
((4505, -56, 1618, 3840), (779, 3671, 2206, 390), (779, -56, 5344, 4117)),
((3564, 1459, 4574, 4720), (-159, 1860, 622, 2032), (-159, 1459, 8297, 4720)),
((4064, -1667, 3998, 2454), (3478, 3756, 746, 4896), (3478, -1667, 4584, 10319)),
((1596, -679, 1578, 3370), (4927, 2804, 3545, 1511), (1596, -679, 6876, 4994)),
((761, 1490, 3901, 2652), (4385, 4775, 3048, 2795), (761, 1490, 6672, 6080)),
((886, -334, 2089, 2833), (-986, 151, 954, 3356), (-986, -334, 3961, 3841)),
((-1440, -1683, 473, 4129), (3481, 351, 4479, 3250), (-1440, -1683, 9400, 5284)),
((-796, 1453, 792, 105), (3219, 2090, 1114, 4652), (-796, 1453, 5129, 5289)),
((835, 3093, 636, 2019), (819, 2895, 2788, 4404), (819, 2895, 2788, 4404)),
((1503, 2175, 3926, 195), (716, 1232, 461, 2258), (716, 1232, 4713, 2258)),
((-1157, -782, 4808, 1946), (1023, 4338, 721, 2270), (-1157, -782, 4808, 7390)),
((4013, 3276, 649, 1484), (341, 93, 3003, 1642), (341, 93, 4321, 4667)),
]

* Mon 22 Dec 2014 11:40:54 AM JST

* Mon 22 Dec 2014 11:40:54 AM JST

* Mon 22 Dec 2014 11:40:54 AM JST
            def test_union_50(self, ):

* Mon 22 Dec 2014 11:41:01 AM JST
                    
* Mon 22 Dec 2014 11:41:03 AM JST
                   
* Mon 22 Dec 2014 11:41:04 AM JST
         
* Mon 22 Dec 2014 11:41:05 AM JST
                    
* Mon 22 Dec 2014 11:41:07 AM JST
                   
* Mon 22 Dec 2014 11:41:08 AM JST
        
* Mon 22 Dec 2014 11:41:10 AM JST
                    
* Mon 22 Dec 2014 11:41:12 AM JST
                   
* Mon 22 Dec 2014 11:41:14 AM JST
      
* Mon 22 Dec 2014 11:41:15 AM JST
                    
* Mon 22 Dec 2014 11:41:17 AM JST
                   
* Mon 22 Dec 2014 11:41:19 AM JST
    
* Mon 22 Dec 2014 11:41:20 AM JST
                    
* Mon 22 Dec 2014 11:41:21 AM JST
                   
* Mon 22 Dec 2014 11:41:23 AM JST
  
* Mon 22 Dec 2014 11:41:24 AM JST
                    
* Mon 22 Dec 2014 11:41:25 AM JST
                   
* Mon 22 Dec 2014 11:41:26 AM JST
 
* Mon 22 Dec 2014 11:41:27 AM JST
                    
* Mon 22 Dec 2014 11:41:29 AM JST
                   
* Mon 22 Dec 2014 11:41:30 AM JST
 
* Mon 22 Dec 2014 11:41:31 AM JST
                    
* Mon 22 Dec 2014 11:41:32 AM JST
                   
* Mon 22 Dec 2014 11:41:34 AM JST
                    
* Mon 22 Dec 2014 11:41:36 AM JST
                    
* Mon 22 Dec 2014 11:41:37 AM JST
                   
* Mon 22 Dec 2014 11:41:39 AM JST
                    
* Mon 22 Dec 2014 11:41:40 AM JST
                    
* Mon 22 Dec 2014 11:41:41 AM JST
                   
* Mon 22 Dec 2014 11:41:43 AM JST
                    
* Mon 22 Dec 2014 11:41:44 AM JST
                    
* Mon 22 Dec 2014 11:41:46 AM JST
                   
* Mon 22 Dec 2014 11:41:48 AM JST
precalc = [((253, 3204, 124, 64), (1234, 55, 1587, 2935), (253, 55, 2568, 3213)), ((1212, 4278, 2317, 8), (-1274, 2373, 2063, 1486), (-1274, 2373, 4803, 1913)), ((-698, 1894, 1385, 2730), (239, 2739, 894, 4093), (-698, 1894, 1831, 4938)), ((2912, 4400, 3551, 3132), (2659, 850, 1161, 3718), (2659, 850, 3804, 6682)), ((-226, 160, 4902, 2734), (-781, 1208, 1242, 2548), (-781, 160, 5457, 3596)), ((-883, -1744, 2444, 685), (-695, 998, 675, 3513), (-883, -1744, 2444, 6255)), ((1699, 2686, 1685, 2422), (3642, 4740, 2296, 2120), (1699, 2686, 4239, 4174)), ((2590, -23, 1505, 4229), (-1763, 895, 720, 3331), (-1763, -23, 5858, 4249)), ((1354, 4829, 2778, 3299), (4155, 1749, 3253, 4406), (1354, 1749, 6054, 6379)), ((722, 1081, 851, 1795), (-719, 4259, 1953, 4004), (-719, 1081, 2292, 7182)), ((-1428, -48, 2094, 4192), (-803, -1299, 1382, 2761), (-1428, -1299, 2094, 5443)), ((-876, 2286, 617, 983),
* Mon 22 Dec 2014 11:41:52 AM JST
                    
* Mon 22 Dec 2014 11:41:54 AM JST
                   
* Mon 22 Dec 2014 11:41:55 AM JST
                    
* Mon 22 Dec 2014 11:41:56 AM JST
                    
* Mon 22 Dec 2014 11:41:57 AM JST
                   
* Mon 22 Dec 2014 11:41:59 AM JST
                    
* Mon 22 Dec 2014 11:42:02 AM JST
                  
* Mon 22 Dec 2014 11:42:04 AM JST
                   
* Mon 22 Dec 2014 11:49:26 AM JST
r=wx.Rect(*getrect())

* Mon 22 Dec 2014 12:09:31 PM JST
57.73.250.189
* Mon 22 Dec 2014 12:23:11 PM JST
        thisw, thish = self.get_width(), self.get_height()
        if (thisw | thish) < 0:
            return self.__class__(rectangle)
        rectw, recth = rectangle.get_width(), rectangle.get_height()
        if (rectw | recth) < 0:
            return self.__class__(self)

        thisx, thisy = self.get_x(), self.get_y()
        thisw += thisx
        thish += thisy

        rectx, recty = rectangle.get_x(), rectangle.get_y()
        rectw += rectx
        recth += recty
        if rectx < thisx:
            thisx = rectx
        if recty < thisy:
            thisy = recty
        if thisw < rectw:
            thisw = rectw
        if thish < recth:
            thish = recth
        thisw -= thisx
        thish -= thisy
        return self.__class__(thisx, thisy, thisw, thish)

* Mon 22 Dec 2014 12:23:19 PM JST
rectangle
* Mon 22 Dec 2014 12:24:47 PM JST
rect
* Mon 22 Dec 2014 12:24:49 PM JST
rect
* Mon 22 Dec 2014 12:24:54 PM JST
rect
* Mon 22 Dec 2014 12:24:57 PM JST
rect
* Mon 22 Dec 2014 12:25:03 PM JST
rect
* Mon 22 Dec 2014 12:25:06 PM JST
rect
* Mon 22 Dec 2014 12:56:40 PM JST
rect
* Mon 22 Dec 2014 12:56:43 PM JST
rect
* Mon 22 Dec 2014 12:56:50 PM JST
rect
* Mon 22 Dec 2014 12:56:53 PM JST
rect
* Mon 22 Dec 2014 12:56:55 PM JST
rect
* Mon 22 Dec 2014 12:56:59 PM JST
rect
* Mon 22 Dec 2014 12:57:06 PM JST
rect
* Mon 22 Dec 2014 12:57:10 PM JST
rect
* Mon 22 Dec 2014 12:57:35 PM JST
rect
* Mon 22 Dec 2014 12:57:37 PM JST
rect
* Mon 22 Dec 2014 12:57:40 PM JST
rect
* Mon 22 Dec 2014 12:57:42 PM JST
rect
* Mon 22 Dec 2014 01:07:34 PM JST
dispatch.
* Mon 22 Dec 2014 01:07:45 PM JST
'isinstance(value, (tuple, list)) and len(value) == 4'
* Mon 22 Dec 2014 01:09:04 PM JST
otherheight
* Mon 22 Dec 2014 01:09:17 PM JST
otherx
* Mon 22 Dec 2014 01:09:20 PM JST
othery
* Mon 22 Dec 2014 01:09:51 PM JST
value[0]
* Mon 22 Dec 2014 01:09:55 PM JST
value[1]
* Mon 22 Dec 2014 01:10:10 PM JST
'isinstance(value, (self.__class__, ))'
* Mon 22 Dec 2014 01:10:27 PM JST
rectangle
* Mon 22 Dec 2014 01:11:16 PM JST
value[0]
* Mon 22 Dec 2014 01:12:27 PM JST
(0, 0, 10, 10)
* Mon 22 Dec 2014 01:50:31 PM JST
    x = property(get_x, set_y)
    y = property(get_y, set_y)
    width = property(get_width, set_width)
    height = property(get_height, set_height)

* Mon 22 Dec 2014 01:50:59 PM JST

* Mon 22 Dec 2014 01:50:59 PM JST

* Mon 22 Dec 2014 01:50:59 PM JST

* Mon 22 Dec 2014 01:52:35 PM JST

* Mon 22 Dec 2014 01:52:36 PM JST

* Mon 22 Dec 2014 01:52:36 PM JST
    size = property(get_size, set_size)

* Mon 22 Dec 2014 02:53:37 PM JST
size
* Mon 22 Dec 2014 02:58:23 PM JST
size
* Mon 22 Dec 2014 02:58:39 PM JST
size
* Mon 22 Dec 2014 02:58:45 PM JST
size
* Mon 22 Dec 2014 03:02:33 PM JST
_point
* Mon 22 Dec 2014 03:02:38 PM JST
set(
* Mon 22 Dec 2014 03:02:48 PM JST
set(
* Mon 22 Dec 2014 03:05:14 PM JST
_point
* Mon 22 Dec 2014 03:05:17 PM JST
_point
* Mon 22 Dec 2014 03:05:23 PM JST
_point
* Mon 22 Dec 2014 03:05:29 PM JST
_point
* Mon 22 Dec 2014 03:05:36 PM JST
_point
* Mon 22 Dec 2014 03:07:31 PM JST

* Mon 22 Dec 2014 03:07:31 PM JST

* Mon 22 Dec 2014 03:07:31 PM JST
        offset(value)

* Mon 22 Dec 2014 03:08:42 PM JST
self.x + value[0]
* Mon 22 Dec 2014 03:08:51 PM JST
self.y + value[1]
* Mon 22 Dec 2014 03:09:09 PM JST
get_x()
* Mon 22 Dec 2014 03:11:53 PM JST
    size = property(get_size, set_size)
    location = property(get_location, set_location)
    x = property(get_x, set_y)
    y = property(get_y, set_y)
    width = property(get_width, set_width)
    height = property(get_height, set_height)


* Mon 22 Dec 2014 03:12:17 PM JST
function 
* Mon 22 Dec 2014 03:12:21 PM JST
function 
* Mon 22 Dec 2014 03:12:48 PM JST
return 
* Mon 22 Dec 2014 03:13:01 PM JST
location
* Mon 22 Dec 2014 03:13:14 PM JST
_dimension
* Mon 22 Dec 2014 03:13:33 PM JST
size
* Mon 22 Dec 2014 03:13:42 PM JST
size
* Mon 22 Dec 2014 03:13:50 PM JST
return 
* Mon 22 Dec 2014 03:13:53 PM JST
size
* Mon 22 Dec 2014 03:14:07 PM JST
location
* Mon 22 Dec 2014 03:14:12 PM JST
_dimension
* Mon 22 Dec 2014 03:14:17 PM JST
location
* Mon 22 Dec 2014 03:14:21 PM JST
location
* Mon 22 Dec 2014 03:14:25 PM JST
location
* Mon 22 Dec 2014 03:15:11 PM JST
return 
* Mon 22 Dec 2014 03:15:15 PM JST
return 
* Mon 22 Dec 2014 03:16:32 PM JST
from xahk2.xobj import Rectangle
r=Rectangle()

* Mon 22 Dec 2014 03:17:03 PM JST
    size = property(get_size, set_size)
    location = property(get_location, set_location)
    x = property(get_x, set_y)
    y = property(get_y, set_y)
    width = property(get_width, set_width)
    height = property(get_height, set_height)


* Mon 22 Dec 2014 03:19:43 PM JST
get_
* Mon 22 Dec 2014 03:19:47 PM JST
get_
* Mon 22 Dec 2014 03:19:50 PM JST
get_
* Mon 22 Dec 2014 03:20:14 PM JST
get_
* Mon 22 Dec 2014 03:33:43 PM JST
None # should raise NotImplementedError()
* Mon 22 Dec 2014 03:33:48 PM JST
return None # should raise NotImplementedError()
* Mon 22 Dec 2014 03:35:43 PM JST
int(
* Mon 22 Dec 2014 03:35:45 PM JST
get_
* Mon 22 Dec 2014 03:39:31 PM JST
pass
* Mon 22 Dec 2014 03:39:42 PM JST
pas
* Mon 22 Dec 2014 03:40:11 PM JST
get_
* Mon 22 Dec 2014 03:40:14 PM JST
int(
* Mon 22 Dec 2014 03:40:19 PM JST
get_
* Mon 22 Dec 2014 03:44:49 PM JST
return None # should raise NotImplementedError()
* Mon 22 Dec 2014 03:45:49 PM JST
r=Rectangle()
* Mon 22 Dec 2014 03:48:44 PM JST
return None # should raise NotImplementedError()
* Mon 22 Dec 2014 03:59:30 PM JST
get_
* Mon 22 Dec 2014 03:59:42 PM JST
get_
* Mon 22 Dec 2014 03:59:51 PM JST
get_
* Mon 22 Dec 2014 03:59:53 PM JST
get_
* Mon 22 Dec 2014 04:02:11 PM JST
int(
* Mon 22 Dec 2014 04:02:14 PM JST
int(
* Mon 22 Dec 2014 04:02:17 PM JST
                
* Mon 22 Dec 2014 04:03:10 PM JST
get_
* Mon 22 Dec 2014 04:03:14 PM JST
get_
* Mon 22 Dec 2014 04:04:30 PM JST
Size
* Mon 22 Dec 2014 04:04:40 PM JST
Dimension
* Mon 22 Dec 2014 04:07:41 PM JST
set
* Mon 22 Dec 2014 04:07:48 PM JST
set
* Mon 22 Dec 2014 04:07:50 PM JST
_point
* Mon 22 Dec 2014 04:10:08 PM JST
size
* Mon 22 Dec 2014 04:10:17 PM JST
size
* Mon 22 Dec 2014 04:10:22 PM JST
size
* Mon 22 Dec 2014 04:10:30 PM JST
size
* Mon 22 Dec 2014 04:11:54 PM JST
int(
* Mon 22 Dec 2014 04:11:57 PM JST
int(
* Mon 22 Dec 2014 04:12:00 PM JST
int(
* Mon 22 Dec 2014 04:12:06 PM JST
get_
* Mon 22 Dec 2014 04:12:08 PM JST
get_
* Mon 22 Dec 2014 04:12:13 PM JST
get_
* Mon 22 Dec 2014 04:12:17 PM JST
get_
* Mon 22 Dec 2014 10:19:58 PM JST
return 
* Mon 22 Dec 2014 10:20:00 PM JST
None # should raise NotImplementedError()
* Mon 22 Dec 2014 10:20:08 PM JST
None # should raise NotImplementedError()
* Mon 22 Dec 2014 10:20:30 PM JST
self.get_bounds()
* Mon 22 Dec 2014 10:21:29 PM JST
None # should raise NotImplementedError()
* Mon 22 Dec 2014 10:21:56 PM JST
index
* Mon 22 Dec 2014 10:23:30 PM JST
return None # should raise NotImplementedError()
* Mon 22 Dec 2014 10:23:41 PM JST

* Mon 22 Dec 2014 10:23:42 PM JST

* Mon 22 Dec 2014 10:23:42 PM JST
        if :

* Mon 22 Dec 2014 10:23:46 PM JST
        if 0 == index:
            return self.x
        elif 1 == index:
            return self.y
        elif 2 == index:
            return self.width
        elif 3 == index:
            return self.height
        else:
            raise IndexError()

* Mon 22 Dec 2014 10:24:11 PM JST
return 
* Mon 22 Dec 2014 10:24:16 PM JST
return 
* Mon 22 Dec 2014 10:24:22 PM JST
return 
* Mon 22 Dec 2014 10:24:28 PM JST
return 
* Mon 22 Dec 2014 10:26:32 PM JST
None # should raise NotImplementedError()
* Mon 22 Dec 2014 10:27:56 PM JST
return None # should raise NotImplementedError()
* Mon 22 Dec 2014 10:28:18 PM JST
'isinstance(value, (tuple, list)) and len(value) == 4'
* Mon 22 Dec 2014 10:29:30 PM JST
self.location = value
* Mon 22 Dec 2014 10:29:35 PM JST

* Mon 22 Dec 2014 10:29:36 PM JST

* Mon 22 Dec 2014 10:29:36 PM JST
    @dispatch.generic()

* Mon 22 Dec 2014 10:31:25 PM JST
right = 
* Mon 22 Dec 2014 10:31:27 PM JST
None # should raise NotImplementedError()
* Mon 22 Dec 2014 10:31:55 PM JST
point.
* Mon 22 Dec 2014 10:32:15 PM JST
Point(self.right, self.top)
* Mon 22 Dec 2014 10:32:20 PM JST
Point(self.right, self.top)
* Mon 22 Dec 2014 10:33:52 PM JST
None # should raise NotImplementedError()
* Mon 22 Dec 2014 10:34:39 PM JST
bottom
* Mon 22 Dec 2014 10:39:23 PM JST
point
* Mon 22 Dec 2014 10:39:29 PM JST
return None # should raise NotImplementedError()
* Mon 22 Dec 2014 10:40:01 PM JST
self.left = value[0]
* Mon 22 Dec 2014 10:59:18 PM JST
pass
* Mon 22 Dec 2014 11:01:07 PM JST
wx.Rect(10, 200, 91, 40)
* Mon 22 Dec 2014 11:01:15 PM JST
 
* Mon 22 Dec 2014 11:01:16 PM JST
wr.SetTopRight((100,200))
* Mon 22 Dec 2014 11:02:07 PM JST
y
* Mon 22 Dec 2014 11:02:08 PM JST
x, y
* Mon 22 Dec 2014 11:02:12 PM JST
return None # should raise NotImplementedError()
* Mon 22 Dec 2014 11:02:33 PM JST
ue
* Mon 22 Dec 2014 11:02:34 PM JST
val - ue
* Mon 22 Dec 2014 11:02:54 PM JST
y
* Mon 22 Dec 2014 11:02:55 PM JST
x, y
* Mon 22 Dec 2014 11:02:58 PM JST
return None # should raise NotImplementedError()
* Mon 22 Dec 2014 11:13:35 PM JST
817     public Rectangle More ...intersection(Rectangle r) {
818         int tx1 = this.x;
819         int ty1 = this.y;
820         int rx1 = r.x;
821         int ry1 = r.y;
822         long tx2 = tx1; tx2 += this.width;
823         long ty2 = ty1; ty2 += this.height;
824         long rx2 = rx1; rx2 += r.width;
825         long ry2 = ry1; ry2 += r.height;
826         if (tx1 < rx1) tx1 = rx1;
827         if (ty1 < ry1) ty1 = ry1;
828         if (tx2 > rx2) tx2 = rx2;
829         if (ty2 > ry2) ty2 = ry2;
830         tx2 -= tx1;
831         ty2 -= ty1;
832         // tx2,ty2 will never overflow (they will never be
833         // larger than the smallest of the two source w,h)
834         // they might underflow, though...
835         if (tx2 < Integer.MIN_VALUE) tx2 = Integer.MIN_VALUE;
836         if (ty2 < Integer.MIN_VALUE) ty2 = Integer.MIN_VALUE;
837         return new Rectangle(tx1, ty1, (int) tx2, (int) ty2);
838     }
* Tue 23 Dec 2014 05:28:18 AM JST

* Tue 23 Dec 2014 05:28:18 AM JST

* Tue 23 Dec 2014 05:28:19 AM JST
        otherx, othery = value[0], value[1]

* Tue 23 Dec 2014 05:28:45 AM JST
self.width
* Tue 23 Dec 2014 05:28:52 AM JST
self.height
* Tue 23 Dec 2014 05:28:56 AM JST

* Tue 23 Dec 2014 05:28:56 AM JST

* Tue 23 Dec 2014 05:28:56 AM JST
        right += self.width

* Tue 23 Dec 2014 05:28:56 AM JST
        right += self.width

* Tue 23 Dec 2014 05:28:57 AM JST
        right += self.width
        bottom += self.height

* Tue 23 Dec 2014 05:30:35 AM JST
right
* Tue 23 Dec 2014 05:35:34 AM JST
0,0,30,30
* Tue 23 Dec 2014 05:35:43 AM JST
10,10,40,40
* Tue 23 Dec 2014 05:37:44 AM JST
0,0,10,10
* Tue 23 Dec 2014 05:37:53 AM JST
100,100,40,40
* Tue 23 Dec 2014 05:38:49 AM JST
0,0,10,10
* Tue 23 Dec 2014 05:38:57 AM JST
100,100,40,40
* Tue 23 Dec 2014 05:53:18 AM JST
781     public boolean More ...intersects(Rectangle r) {
782         int tw = this.width;
783         int th = this.height;
784         int rw = r.width;
785         int rh = r.height;
786         if (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0) {
787             return false;
788         }
789         int tx = this.x;
790         int ty = this.y;
791         int rx = r.x;
792         int ry = r.y;
793         rw += rx;
794         rh += ry;
795         tw += tx;
796         th += ty;
797         //      overflow || intersect
798         return ((rw < rx || rw > tx) &&
799                 (rh < ry || rh > ty) &&
800                 (tw < tx || tw > rx) &&
801                 (th < ty || th > ry));
802     }

* Tue 23 Dec 2014 05:53:51 AM JST
thish
* Tue 23 Dec 2014 05:58:59 AM JST
others
* Tue 23 Dec 2014 05:59:57 AM JST
isinstance(value, (self.__class__, ))
* Tue 23 Dec 2014 06:00:13 AM JST
when(isinstance(value, (self.__class__, )))
* Tue 23 Dec 2014 06:00:33 AM JST
'isinstance(value, (self.__class__, ))'
* Tue 23 Dec 2014 06:00:58 AM JST
'isinstance(value, (self.__class__, ))'
* Tue 23 Dec 2014 06:01:14 AM JST
'isinstance(value, (self.__class__, ))'
* Tue 23 Dec 2014 06:01:38 AM JST

* Tue 23 Dec 2014 06:01:38 AM JST

* Tue 23 Dec 2014 06:01:38 AM JST
        thisw, thish, otherw, otherh = self.width, self.height, value.width, value.height

* Tue 23 Dec 2014 06:01:50 AM JST
width
* Tue 23 Dec 2014 06:01:53 AM JST
height
* Tue 23 Dec 2014 06:02:02 AM JST
                                        
* Tue 23 Dec 2014 06:02:06 AM JST
            
* Tue 23 Dec 2014 06:02:55 AM JST
other
* Tue 23 Dec 2014 06:06:43 AM JST
otherw >
* Tue 23 Dec 2014 06:07:23 AM JST
other
* Tue 23 Dec 2014 06:07:48 AM JST
thisw
* Tue 23 Dec 2014 06:08:12 AM JST
this
* Tue 23 Dec 2014 06:08:57 AM JST
'isinstance(value, (tuple, list)) and len(value) == 4'
* Tue 23 Dec 2014 06:09:33 AM JST
'isinstance(value, (tuple, list)) and len(value) == 4'
* Tue 23 Dec 2014 06:09:38 AM JST
'isinstance(value, (self.__class__, ))'
* Tue 23 Dec 2014 06:17:43 AM JST
self.rect.intersect(rect)
* Tue 23 Dec 2014 06:17:58 AM JST

* Tue 23 Dec 2014 06:17:58 AM JST

* Tue 23 Dec 2014 06:17:58 AM JST
        got = self.rect.intersect(rect)

* Tue 23 Dec 2014 06:18:01 AM JST

* Tue 23 Dec 2014 06:18:01 AM JST

* Tue 23 Dec 2014 06:18:01 AM JST
        got = self.rect.intersect(rect)

* Tue 23 Dec 2014 06:18:53 AM JST
    def test_intersect(self, ):
        expects = (10, 10, 20, 20)
        self.rect.set_bounds((0,0,30,30))
        rect = rectangle.Rectangle(10,10,40,40)
        got = self.rect.intersect(rect)
        self.assertEqual(expects, got.get_bounds())


* Tue 23 Dec 2014 06:19:30 AM JST
self.rect.intersect(rect)
* Tue 23 Dec 2014 06:19:33 AM JST

* Tue 23 Dec 2014 06:19:33 AM JST

* Tue 23 Dec 2014 06:19:33 AM JST
        self.assertEqual(expects, got.get_bounds())

* Tue 23 Dec 2014 06:19:35 AM JST

* Tue 23 Dec 2014 06:19:35 AM JST

* Tue 23 Dec 2014 06:19:35 AM JST
        got = self.rect.intersect(rect)

* Tue 23 Dec 2014 06:19:40 AM JST

* Tue 23 Dec 2014 06:19:41 AM JST

* Tue 23 Dec 2014 06:19:41 AM JST
        expects = (10, 10, 20, 20)

* Tue 23 Dec 2014 06:22:16 AM JST

* Tue 23 Dec 2014 06:22:16 AM JST

* Tue 23 Dec 2014 06:22:16 AM JST
            else:

* Tue 23 Dec 2014 06:23:56 AM JST
self.wxrect.Intersects(wxrect)
* Tue 23 Dec 2014 06:23:59 AM JST

* Tue 23 Dec 2014 06:23:59 AM JST

* Tue 23 Dec 2014 06:23:59 AM JST
             is False:

* Tue 23 Dec 2014 06:24:04 AM JST
self.wxrect.Intersects(wxrect)
* Tue 23 Dec 2014 06:25:40 AM JST
        for _ in xrange(0, 50):
            self.random_set()
            x, y = randrange(-2000, 3000), randrange(-2000, 3000)
            w, h = randrange(0, 3000), randrange(0, 3000)
            rect = rectangle.Rectangle(x, y, w, h)
            wxrect = wx.Rect(x, y, w, h)
            self.assertEqual(self.wxrect.Intersects(wxrect),
                             self.rect.intersects(rect))

* Tue 23 Dec 2014 06:37:56 AM JST
self.wxrect.Intersects(wxrect)
* Tue 23 Dec 2014 06:38:11 AM JST
self.rect.intersects(rect)
* Tue 23 Dec 2014 06:42:48 AM JST
                    
* Tue 23 Dec 2014 06:42:50 AM JST
                    
* Tue 23 Dec 2014 06:42:52 AM JST
                    
* Tue 23 Dec 2014 06:44:02 AM JST
((otherw < otherx || otherw > thisx) &&
799                 (otherh < othery || otherh > thisy) &&
800                 (thisw < thisx || thisw > otherx) &&
801                 (thish < thisy || thish > othery))
* Tue 23 Dec 2014 06:44:12 AM JST
799
* Tue 23 Dec 2014 06:44:14 AM JST
800 
* Tue 23 Dec 2014 06:44:15 AM JST
801
* Tue 23 Dec 2014 07:39:56 AM JST

* Tue 23 Dec 2014 07:39:56 AM JST

* Tue 23 Dec 2014 07:39:56 AM JST
        if :

* Tue 23 Dec 2014 07:40:20 AM JST
get_
* Tue 23 Dec 2014 07:40:27 AM JST
get_bottom()
* Tue 23 Dec 2014 07:41:50 AM JST
right
* Tue 23 Dec 2014 07:44:46 AM JST
self.__class__()
* Tue 23 Dec 2014 07:48:55 AM JST
width
* Tue 23 Dec 2014 07:49:30 AM JST
value[0], value[1], value[2], value[3]
* Tue 23 Dec 2014 07:50:51 AM JST

* Tue 23 Dec 2014 07:50:51 AM JST

* Tue 23 Dec 2014 07:50:51 AM JST
        # return self.intersects((value.x, value.y, value.width, value.height))

* Tue 23 Dec 2014 07:51:12 AM JST

* Tue 23 Dec 2014 07:51:12 AM JST

* Tue 23 Dec 2014 07:51:12 AM JST
        # return self.intersect((value.x, value.y, value.width, value.height))

* Tue 23 Dec 2014 07:56:31 AM JST
this
* Tue 23 Dec 2014 07:56:38 AM JST
this
* Tue 23 Dec 2014 07:58:01 AM JST
right, bottom
* Tue 23 Dec 2014 07:58:08 AM JST
self.right, self.bottom
* Tue 23 Dec 2014 07:58:10 AM JST

* Tue 23 Dec 2014 07:58:10 AM JST

* Tue 23 Dec 2014 07:58:10 AM JST
         = 

* Tue 23 Dec 2014 07:59:14 AM JST
thisx, thisy, r
* Tue 23 Dec 2014 07:59:25 AM JST
other
* Tue 23 Dec 2014 07:59:33 AM JST
other
* Tue 23 Dec 2014 08:06:23 AM JST
this
* Tue 23 Dec 2014 08:06:33 AM JST
this
* Tue 23 Dec 2014 08:24:36 AM JST

* Tue 23 Dec 2014 08:24:36 AM JST

* Tue 23 Dec 2014 08:24:36 AM JST
        x2 = max(, )

* Tue 23 Dec 2014 08:29:08 AM JST
max(thisx + thisw, otherx + otherw)
* Tue 23 Dec 2014 08:29:14 AM JST

* Tue 23 Dec 2014 08:29:14 AM JST

* Tue 23 Dec 2014 08:29:14 AM JST
        x2 = 

* Tue 23 Dec 2014 08:29:17 AM JST
max(thisy + thish, othery + otherh)
* Tue 23 Dec 2014 08:29:21 AM JST

* Tue 23 Dec 2014 08:29:21 AM JST

* Tue 23 Dec 2014 08:29:22 AM JST
        y2 = 

* Tue 23 Dec 2014 08:29:36 AM JST
width
* Tue 23 Dec 2014 08:29:39 AM JST
height
* Tue 23 Dec 2014 08:37:22 AM JST
GetRight
* Tue 23 Dec 2014 08:47:44 AM JST
SetBottomRight
* Tue 23 Dec 2014 09:09:22 AM JST
wxCoord
* Tue 23 Dec 2014 09:10:23 AM JST
wxCoord
* Tue 23 Dec 2014 09:17:17 AM JST
hei
* Tue 23 Dec 2014 09:30:42 AM JST
side
* Tue 23 Dec 2014 09:30:46 AM JST
coord
* Tue 23 Dec 2014 09:30:51 AM JST
add
* Tue 23 Dec 2014 09:36:38 AM JST

* Tue 23 Dec 2014 09:36:38 AM JST

* Tue 23 Dec 2014 09:36:38 AM JST
        return Rectangle()

* Tue 23 Dec 2014 09:36:57 AM JST
'isinstance(value, (self.__class__, ))'
* Tue 23 Dec 2014 09:37:36 AM JST
'isinstance(value, (tuple, list)) and len(value) == 4'
* Tue 23 Dec 2014 09:40:01 AM JST
            
* Tue 23 Dec 2014 09:42:24 AM JST
self.
* Tue 23 Dec 2014 09:43:04 AM JST
self.width
* Tue 23 Dec 2014 09:43:10 AM JST
self.height
* Tue 23 Dec 2014 09:44:52 AM JST
value[1]
* Tue 23 Dec 2014 09:45:25 AM JST
int(
* Tue 23 Dec 2014 09:45:27 AM JST
int
* Tue 23 Dec 2014 09:45:28 AM JST
int
* Tue 23 Dec 2014 09:45:30 AM JST
int(
* Tue 23 Dec 2014 09:45:32 AM JST
int(
* Tue 23 Dec 2014 09:48:53 AM JST
self.
* Tue 23 Dec 2014 09:49:00 AM JST
self.
* Tue 23 Dec 2014 09:50:01 AM JST
.get_bounds()
* Tue 23 Dec 2014 09:50:07 AM JST
.Get()
* Tue 23 Dec 2014 10:07:30 AM JST
'isinstance(value, (self.__class__, ))'
* Tue 23 Dec 2014 10:07:40 AM JST

* Tue 23 Dec 2014 10:07:40 AM JST

* Tue 23 Dec 2014 10:07:40 AM JST
        return Rectangle()

* Tue 23 Dec 2014 10:07:51 AM JST
dispatch.
* Tue 23 Dec 2014 10:08:00 AM JST
'isinstance(value, (self.__class__, ))'
* Tue 23 Dec 2014 10:13:03 AM JST
__add__rectangle
* Tue 23 Dec 2014 10:14:00 AM JST
'isinstance(value, (tuple, list)) and len(value) == 4'
* Tue 23 Dec 2014 10:14:09 AM JST
'isinstance(value, (self.__class__, ))'
* Tue 23 Dec 2014 10:15:17 AM JST
            
* Tue 23 Dec 2014 10:17:22 AM JST
result
* Tue 23 Dec 2014 10:17:47 AM JST
self.
* Tue 23 Dec 2014 10:34:20 AM JST
value
* Tue 23 Dec 2014 10:34:23 AM JST
value
* Tue 23 Dec 2014 10:34:55 AM JST
value
* Tue 23 Dec 2014 10:37:15 AM JST
10, 20, 390, 580
* Tue 23 Dec 2014 10:39:49 AM JST
(10, 20, 390, 580)
* Tue 23 Dec 2014 10:40:47 AM JST
__eq__.
* Tue 23 Dec 2014 10:40:57 AM JST
return None # should raise NotImplementedError()
* Tue 23 Dec 2014 10:41:16 AM JST
'isinstance(other, (tuple, list)) and len(other) == 4'
* Tue 23 Dec 2014 10:42:55 AM JST
'isinstance(other, (self.__class__, ))'
* Tue 23 Dec 2014 10:43:31 AM JST
get_
* Tue 23 Dec 2014 10:43:32 AM JST
other.get_
* Tue 23 Dec 2014 10:43:32 AM JST
get_y(), other.get_
* Tue 23 Dec 2014 10:43:33 AM JST
other.get_y(), other.get_
* Tue 23 Dec 2014 10:43:33 AM JST
get_x(), other.get_y(), other.get_
* Tue 23 Dec 2014 10:43:33 AM JST
other.get_x(), other.get_y(), other.get_
* Tue 23 Dec 2014 10:44:42 AM JST
None # should raise NotImplementedError()
* Tue 23 Dec 2014 10:44:46 AM JST
other
* Tue 23 Dec 2014 11:43:55 AM JST
__contains__
* Tue 23 Dec 2014 11:44:03 AM JST
rect
* Tue 23 Dec 2014 11:44:05 AM JST
return None # should raise NotImplementedError()
* Tue 23 Dec 2014 11:44:24 AM JST
isinstance(other, (tuple, list)) and len(other) == 4
* Tue 23 Dec 2014 11:44:38 AM JST
elm
* Tue 23 Dec 2014 11:44:41 AM JST
other
* Tue 23 Dec 2014 11:44:44 AM JST
other
* Tue 23 Dec 2014 11:47:52 AM JST
isinstance(other, (self.__class__, ))
* Tue 23 Dec 2014 11:48:01 AM JST
elm
* Tue 23 Dec 2014 11:48:05 AM JST
other
* Tue 23 Dec 2014 11:50:08 AM JST
elm
* Tue 23 Dec 2014 11:50:28 AM JST
(value.get_x(), value.get_y()) in self
* Tue 23 Dec 2014 11:52:01 AM JST
get_x()
* Tue 23 Dec 2014 11:52:09 AM JST
get_y
* Tue 23 Dec 2014 11:53:03 AM JST
elm
* Tue 23 Dec 2014 12:00:50 PM JST
(bottomright.get_x(), bottomright.get_y()) in self
* Tue 23 Dec 2014 12:01:05 PM JST

* Tue 23 Dec 2014 12:01:05 PM JST

* Tue 23 Dec 2014 12:01:05 PM JST
        return (value.get_top_left(), value.get_bottom_right()) in self

* Tue 23 Dec 2014 12:02:20 PM JST
in 
* Tue 23 Dec 2014 12:06:17 PM JST

* Tue 23 Dec 2014 12:06:18 PM JST

* Tue 23 Dec 2014 12:06:18 PM JST
        self.rect.set_bounds((self.x, self.y, self.w2, self.h2))

* Tue 23 Dec 2014 12:06:22 PM JST

* Tue 23 Dec 2014 12:06:22 PM JST

* Tue 23 Dec 2014 12:06:22 PM JST
        # expand window

* Tue 23 Dec 2014 12:07:29 PM JST

* Tue 23 Dec 2014 12:07:29 PM JST

* Tue 23 Dec 2014 12:07:29 PM JST
        self.rect.set_bounds((self.x, self.y, self.w2, self.h2))

* Tue 23 Dec 2014 12:07:30 PM JST

* Tue 23 Dec 2014 12:07:30 PM JST

* Tue 23 Dec 2014 12:07:30 PM JST
        # expand window

* Tue 23 Dec 2014 12:10:10 PM JST

* Tue 23 Dec 2014 12:10:10 PM JST

* Tue 23 Dec 2014 12:10:11 PM JST
        # expand window

* Tue 23 Dec 2014 12:10:11 PM JST
        # expand window

* Tue 23 Dec 2014 12:10:11 PM JST
        # expand window
        self.rect.set_bounds((self.x, self.y, self.w2, self.h2))

* Tue 23 Dec 2014 12:11:47 PM JST

* Tue 23 Dec 2014 12:11:51 PM JST
2000
* Tue 23 Dec 2014 12:11:54 PM JST
2000
* Tue 23 Dec 2014 12:12:05 PM JST
        
* Tue 23 Dec 2014 12:12:13 PM JST
15, 25
* Tue 23 Dec 2014 12:12:25 PM JST
        
* Tue 23 Dec 2014 12:12:30 PM JST
2000
* Tue 23 Dec 2014 12:12:42 PM JST

* Tue 23 Dec 2014 12:12:42 PM JST

* Tue 23 Dec 2014 12:12:42 PM JST
        self.assertNotIn(point.Point(15, 25), self.rect)

* Tue 23 Dec 2014 12:12:49 PM JST

* Tue 23 Dec 2014 12:12:49 PM JST

* Tue 23 Dec 2014 12:12:49 PM JST
        self.assertFalse((15, 25) in self.rect)

* Tue 23 Dec 2014 12:18:28 PM JST

* Tue 23 Dec 2014 12:18:28 PM JST

* Tue 23 Dec 2014 12:18:28 PM JST
            self.x = val

* Tue 23 Dec 2014 12:18:33 PM JST

* Tue 23 Dec 2014 12:18:33 PM JST

* Tue 23 Dec 2014 12:18:34 PM JST
            self.y = val

* Tue 23 Dec 2014 12:18:41 PM JST

* Tue 23 Dec 2014 12:18:41 PM JST

* Tue 23 Dec 2014 12:18:41 PM JST
            self.width = val

* Tue 23 Dec 2014 12:18:47 PM JST

* Tue 23 Dec 2014 12:18:47 PM JST

* Tue 23 Dec 2014 12:18:47 PM JST
            self.height = val

* Tue 23 Dec 2014 12:21:03 PM JST
        self.rect.set_bounds((0, 0, 0, 0))
        self.assertTrue(self.rect.isempty())
        self.rect.set_bounds((10, 0, 0, 0))
        self.assertFalse(self.rect.isempty())

* Tue 23 Dec 2014 12:22:41 PM JST
(int(x) for x in self.get_bounds())
* Tue 23 Dec 2014 12:23:53 PM JST
0, 0, 0, 0
* Tue 23 Dec 2014 12:28:12 PM JST
10, 59
* Tue 23 Dec 2014 12:43:21 PM JST
from xahk2.xobj import Rectangle
r=Rectangle()

* Tue 23 Dec 2014 12:43:30 PM JST
import wx
wr=wx.Rect(10,20,30,40)

* Tue 23 Dec 2014 12:44:01 PM JST
wr.SetBottomLeft((100,200))
* Tue 23 Dec 2014 12:44:06 PM JST
r.set_bottom_left((100,200))
* Tue 23 Dec 2014 12:44:20 PM JST
from xahk2.xobj import Rectangle
import wx
r=Rectangle(10,20,30,40)    
r.set_bottom_left((100,200))

* Tue 23 Dec 2014 12:52:59 PM JST
from xahk2.xobj import Rectangle
import wx
r=Rectangle(10,20,30,40)    
r.set_bottom_left((100,200))
* Tue 23 Dec 2014 12:53:18 PM JST
wr=wx.Rect(10,20,30,40)     
wr.SetBottomLeft((100,200)) 

* Tue 23 Dec 2014 12:57:49 PM JST
wr=wx.Rect(10,20,30,40)     
* Tue 23 Dec 2014 12:59:38 PM JST
r=Rectangle(10,20,30,40)    
* Tue 23 Dec 2014 01:02:40 PM JST

* Tue 23 Dec 2014 01:02:40 PM JST

* Tue 23 Dec 2014 01:02:40 PM JST
        self.set_right(value[0])

* Tue 23 Dec 2014 01:02:40 PM JST
        self.set_right(value[0])

* Tue 23 Dec 2014 01:02:40 PM JST
        self.set_right(value[0])
        self.set_top(value[1])

* Tue 23 Dec 2014 01:04:18 PM JST
(39, 20)
* Tue 23 Dec 2014 01:10:37 PM JST
10, 20, 30, 381
* Tue 23 Dec 2014 01:11:17 PM JST
381
* Tue 23 Dec 2014 01:12:04 PM JST
        self.assertEqual(x, self.rect.get_x())
        self.assertEqual(y, self.rect.get_y())
        self.assertEqual(width, self.rect.get_width())
        self.assertEqual(height, self.rect.get_height())

* Tue 23 Dec 2014 01:12:19 PM JST
expects
* Tue 23 Dec 2014 01:12:28 PM JST

* Tue 23 Dec 2014 01:12:28 PM JST

* Tue 23 Dec 2014 01:12:28 PM JST
        self.assertEqual(expects, self.rect.get_bottom())

* Tue 23 Dec 2014 01:13:05 PM JST
59
* Tue 23 Dec 2014 01:13:23 PM JST
39
* Tue 23 Dec 2014 01:13:37 PM JST
        self.assertEqual(x, self.rect.get_x())
        self.assertEqual(y, self.rect.get_y())
        self.assertEqual(width, self.rect.get_width())
        self.assertEqual(height, self.rect.get_height())

* Tue 23 Dec 2014 01:14:20 PM JST

* Tue 23 Dec 2014 01:14:20 PM JST

* Tue 23 Dec 2014 01:14:20 PM JST
        self.rect.set_top(self.y)

* Tue 23 Dec 2014 01:14:29 PM JST
        self.assertEqual(x, self.rect.get_x())
        self.assertEqual(y, self.rect.get_y())
        self.assertEqual(width, self.rect.get_width())
        self.assertEqual(height, self.rect.get_height())

* Tue 23 Dec 2014 01:15:02 PM JST
10, 20, 191, 40
* Tue 23 Dec 2014 01:15:14 PM JST

* Tue 23 Dec 2014 01:15:14 PM JST

* Tue 23 Dec 2014 01:15:14 PM JST
        expects = int(self.w2) - int(self.x) + 1

* Tue 23 Dec 2014 01:21:48 PM JST
    def get_top(self, ):
        r"""SUMMARY

        get_top()

        @Return:

        @Error:
        """
        return self.y

    def set_top(self, top):
        r"""SUMMARY

        set_top(top)

        @Arguments:
        - `top`:

        @Return:

        @Error:
        """
        self.y = top

    def get_left(self):
        """function get_left

        returns XCoordinate
        """
        return self.x

    def set_left(self, left):
        """function set_left

        left:

        returns None
        """
        self.x = left

    def get_right(self):
        """function get_right

        returns XCoordinate
        """
        return self.x + self.width - 1

    def set_right(self, right):
        """function set_right

        x:

        returns None
        """
        self.width = right - self.x + 1

    def get_bottom(self):
        """function get_bottom

        returns YCoordinate
        """
        return self.y + self.height - 1

    def set_bottom(self, y):
        """function set_bottom

        y:

        returns None
        """
        self.height = y - self.y + 1

    top = property(get_top, set_top)
    bottom = property(get_bottom, set_bottom)
    left = property(get_left, set_left)
    right = property(get_right, set_right)

* Tue 23 Dec 2014 01:24:30 PM JST

* Tue 23 Dec 2014 01:24:30 PM JST

* Tue 23 Dec 2014 01:24:30 PM JST
        self.x = left

* Tue 23 Dec 2014 01:25:04 PM JST

* Tue 23 Dec 2014 01:25:04 PM JST

* Tue 23 Dec 2014 01:25:04 PM JST
        self.y = top

* Tue 23 Dec 2014 01:25:31 PM JST
right - self.x + 1
* Tue 23 Dec 2014 01:25:33 PM JST

* Tue 23 Dec 2014 01:25:33 PM JST

* Tue 23 Dec 2014 01:25:33 PM JST
        self.width = right - self.x + 1

* Tue 23 Dec 2014 01:25:43 PM JST
y - self.y + 1
* Tue 23 Dec 2014 01:25:44 PM JST

* Tue 23 Dec 2014 01:25:44 PM JST

* Tue 23 Dec 2014 01:25:44 PM JST
        self.height = y - self.y + 1

* Tue 23 Dec 2014 01:26:03 PM JST

* Tue 23 Dec 2014 01:26:03 PM JST

* Tue 23 Dec 2014 01:26:03 PM JST
        self.location = value

* Tue 23 Dec 2014 01:26:13 PM JST
value[0]
* Tue 23 Dec 2014 01:26:15 PM JST

* Tue 23 Dec 2014 01:26:15 PM JST

* Tue 23 Dec 2014 01:26:15 PM JST
        self.right = 

* Tue 23 Dec 2014 01:26:21 PM JST
value[1]
* Tue 23 Dec 2014 01:26:23 PM JST

* Tue 23 Dec 2014 01:26:23 PM JST

* Tue 23 Dec 2014 01:26:23 PM JST
        self.bottom = 

* Tue 23 Dec 2014 01:26:30 PM JST

* Tue 23 Dec 2014 01:26:30 PM JST

* Tue 23 Dec 2014 01:26:30 PM JST
        self.set_lef

* Tue 23 Dec 2014 01:26:39 PM JST
value[0]
* Tue 23 Dec 2014 01:26:41 PM JST

* Tue 23 Dec 2014 01:26:41 PM JST

* Tue 23 Dec 2014 01:26:41 PM JST
        self.right = 

* Tue 23 Dec 2014 01:26:46 PM JST
value[1]
* Tue 23 Dec 2014 01:26:48 PM JST

* Tue 23 Dec 2014 01:26:48 PM JST

* Tue 23 Dec 2014 01:26:48 PM JST
        self.top = 

* Tue 23 Dec 2014 01:34:29 PM JST
r=Rectangle(10,20,30,40)    

* Tue 23 Dec 2014 01:34:35 PM JST
from xahk2.xobj import Rectangle
import wx
r=Rectangle(10,20,30,40)    

* Tue 23 Dec 2014 01:38:21 PM JST
nosetests-run-it-cover-package
* Tue 23 Dec 2014 01:39:15 PM JST
(when (and (list-matched-buffers "^\\*gud")
             (y-or-n-p "'*gud' kill buffer?"))
    (kill-some-gud-buffers))
* Tue 23 Dec 2014 01:39:19 PM JST
  
* Tue 23 Dec 2014 01:39:31 PM JST
nosetests-run-it-cover-package+
* Tue 23 Dec 2014 01:39:41 PM JST
;;;###autoload
* Tue 23 Dec 2014 01:39:53 PM JST
;;;###autoload
(defun nosetests-run-it-cover-package+ (args) ;[2014/12/23]
  "ARGS"
  (interactive "p")
  (when (and (list-matched-buffers "^\\*gud")
             (y-or-n-p "'*gud' kill buffer?"))
    (kill-some-gud-buffers))
  (nosetests-run-it-cover-package args))

* Tue 23 Dec 2014 01:41:39 PM JST
self.
* Tue 23 Dec 2014 01:41:57 PM JST
self.
* Tue 23 Dec 2014 01:43:15 PM JST
self.
* Tue 23 Dec 2014 01:47:10 PM JST
wxHORIZONTAL
* Tue 23 Dec 2014 01:48:13 PM JST
0x0004
* Tue 23 Dec 2014 01:50:13 PM JST
wxBOTH
* Tue 23 Dec 2014 01:52:01 PM JST
dir=
* Tue 23 Dec 2014 01:53:39 PM JST
Enum
* Tue 23 Dec 2014 01:54:56 PM JST
Orientation
* Tue 23 Dec 2014 01:55:43 PM JST
, dir=Orientation.both
* Tue 23 Dec 2014 01:57:51 PM JST
Orientation
* Tue 23 Dec 2014 01:58:12 PM JST
both
* Tue 23 Dec 2014 01:58:18 PM JST
horizontal
* Tue 23 Dec 2014 02:00:05 PM JST
ver
* Tue 23 Dec 2014 02:00:23 PM JST
value[0] + (value[2] - self.width) / 2
* Tue 23 Dec 2014 02:01:40 PM JST
value[1] + (value[3] - self.height) / 2
* Tue 23 Dec 2014 02:02:07 PM JST
                              
* Tue 23 Dec 2014 02:03:04 PM JST
            
* Tue 23 Dec 2014 02:10:15 PM JST
self.rect.centerin(rect).get_bounds()
* Tue 23 Dec 2014 02:10:30 PM JST
self.wxrect.CenterIn(wxrect).Get()
* Tue 23 Dec 2014 02:10:40 PM JST
(117 - 200) / 2
* Tue 23 Dec 2014 02:10:58 PM JST
(117 - 200)
* Tue 23 Dec 2014 02:15:14 PM JST
assertAlmostEquals
* Tue 23 Dec 2014 02:16:30 PM JST
self.rect.centerin(rect).get_bounds()
* Tue 23 Dec 2014 02:16:40 PM JST
self.wxrect.CenterIn(wxrect).Get()
* Tue 23 Dec 2014 02:16:59 PM JST

* Tue 23 Dec 2014 02:17:05 PM JST

* Tue 23 Dec 2014 02:17:10 PM JST

* Tue 23 Dec 2014 02:18:45 PM JST
10
* Tue 23 Dec 2014 02:18:45 PM JST
base=10
* Tue 23 Dec 2014 02:18:45 PM JST
x, base=10
* Tue 23 Dec 2014 02:22:43 PM JST
from __future__ import division
* Tue 23 Dec 2014 02:26:37 PM JST
self.rect.centerin(rect).get_bounds()
* Tue 23 Dec 2014 02:26:43 PM JST
self.wxrect.CenterIn(wxrect).Get()
* Tue 23 Dec 2014 02:29:40 PM JST
(75 - 200) / 2
* Tue 23 Dec 2014 02:29:50 PM JST
(75 - 200)
* Tue 23 Dec 2014 02:31:30 PM JST
41 + (75 - 200) / 2
* Tue 23 Dec 2014 02:32:04 PM JST
math.floor((75 - 200) / 2.0)
* Tue 23 Dec 2014 02:32:16 PM JST
(75 - 200) / 2.0
* Tue 23 Dec 2014 02:33:59 PM JST
floor
* Tue 23 Dec 2014 02:33:59 PM JST
math.floor
* Tue 23 Dec 2014 02:36:24 PM JST
cut off after the decimal point
* Tue 23 Dec 2014 02:36:26 PM JST
# cut off after the decimal point
* Tue 23 Dec 2014 02:36:38 PM JST
(value[2] - self.width) / 2.0
* Tue 23 Dec 2014 02:36:46 PM JST
(value[3] - self.height) / 2.0
* Tue 23 Dec 2014 02:38:33 PM JST

* Tue 23 Dec 2014 02:38:33 PM JST

* Tue 23 Dec 2014 02:38:33 PM JST
            # cut off after the decimal point

* Tue 23 Dec 2014 02:38:36 PM JST

* Tue 23 Dec 2014 02:38:36 PM JST

* Tue 23 Dec 2014 02:38:37 PM JST
            # cut off after the decimal point

* Tue 23 Dec 2014 02:38:48 PM JST

* Tue 23 Dec 2014 02:38:48 PM JST

* Tue 23 Dec 2014 02:38:48 PM JST
            # cut off after the decimal point

* Tue 23 Dec 2014 02:39:41 PM JST
(value[3] - self.height) / 2
* Tue 23 Dec 2014 02:42:11 PM JST
self.rect.centerin(rect).get_bounds()
* Tue 23 Dec 2014 02:42:16 PM JST
self.wxrect.CenterIn(wxrect).Get()
* Tue 23 Dec 2014 02:42:32 PM JST
(rect.height - self.rect.height)
* Tue 23 Dec 2014 02:44:47 PM JST
# cut off after the decimal point
* Tue 23 Dec 2014 02:45:01 PM JST

* Tue 23 Dec 2014 02:45:01 PM JST

* Tue 23 Dec 2014 02:45:02 PM JST
            # got = self.rect.centerin(rect).get_bounds()

* Tue 23 Dec 2014 02:45:02 PM JST
            # got = self.rect.centerin(rect).get_bounds()

* Tue 23 Dec 2014 02:45:02 PM JST
            # got = self.rect.centerin(rect).get_bounds()
            # expects = self.wxrect.CenterIn(wxrect).Get()

* Tue 23 Dec 2014 02:45:02 PM JST

* Tue 23 Dec 2014 02:45:02 PM JST

* Tue 23 Dec 2014 02:45:03 PM JST
            # self.assertAlmostEquals(int(got[0]), expects[0])

* Tue 23 Dec 2014 02:45:03 PM JST
            # self.assertAlmostEquals(int(got[0]), expects[0])

* Tue 23 Dec 2014 02:45:03 PM JST
            # self.assertAlmostEquals(int(got[0]), expects[0])
            # self.assertAlmostEquals(int(got[1]), expects[1])

* Tue 23 Dec 2014 02:45:03 PM JST
            # self.assertAlmostEquals(int(got[0]), expects[0])
            # self.assertAlmostEquals(int(got[1]), expects[1])

* Tue 23 Dec 2014 02:45:03 PM JST
            # self.assertAlmostEquals(int(got[0]), expects[0])
            # self.assertAlmostEquals(int(got[1]), expects[1])
            # self.assertAlmostEquals(int(got[2]), expects[2])

* Tue 23 Dec 2014 02:45:03 PM JST
            # self.assertAlmostEquals(int(got[0]), expects[0])
            # self.assertAlmostEquals(int(got[1]), expects[1])
            # self.assertAlmostEquals(int(got[2]), expects[2])

* Tue 23 Dec 2014 02:45:03 PM JST
            # self.assertAlmostEquals(int(got[0]), expects[0])
            # self.assertAlmostEquals(int(got[1]), expects[1])
            # self.assertAlmostEquals(int(got[2]), expects[2])
            # self.assertAlmostEquals(int(got[3]), expects[3])

* Tue 23 Dec 2014 02:46:27 PM JST
self.
* Tue 23 Dec 2014 02:47:03 PM JST
    # def test_intersect(self, ):
    #     for _ in xrange(0, 50):
    #         x, y = randrange(0, 3000), randrange(0, 3000)
    #         w, h = randrange(0, 3000), randrange(0, 3000)
    #         self.wxrect.Set(x, y, w, h)
    #         self.rect.set_bounds((x, y, w, h))
    #         x2, y2 = randrange(0, 3000), randrange(20, 300)
    #         w2, h2 = randrange(0, 200), randrange(0, 300)
    #         rect = rectangle.Rectangle(x2, y2, w2, h2)
    #         wxrect = wx.Rect(x2, y2, w2, h2)
    #         gotrect = self.rect.intersect(rect)
    #         if self.wxrect.Intersects(wxrect):
    #             self.assertEqual(gotrect, self.wxrect.Intersect(wxrect))
    #         else:
    #             self.assertIsNone(gotrect)


* Tue 23 Dec 2014 03:13:16 PM JST
    def test___add__(self, ):
        expects = 1
        for num in (1, userint.UserInt(1), '1'):
            got = self.integer + num
            self.assertEqual(expects, got)
            self.assertIsInstance(got, userint.UserInt)


* Tue 23 Dec 2014 03:13:27 PM JST
self.integer
* Tue 23 Dec 2014 03:14:11 PM JST

* Tue 23 Dec 2014 03:14:11 PM JST

* Tue 23 Dec 2014 03:14:11 PM JST
            self.assertIsInstance(got, userint.UserInt)

* Tue 23 Dec 2014 03:15:22 PM JST
    def test___radd__(self, ):
        expects = 1
        for num in (1, userint.UserInt(1)):
            got =  num + self.integer
            self.assertEqual(expects, got)


* Tue 23 Dec 2014 03:15:50 PM JST
    def test___rmul__(self, ):
        expects = 1
        for num in (1, userint.UserInt(1)):
            got =  num * self.integer
            self.assertEqual(expects, got)


* Tue 23 Dec 2014 03:17:56 PM JST
userint.UserInt(self.default)
* Tue 23 Dec 2014 03:18:10 PM JST
default
* Tue 23 Dec 2014 03:18:10 PM JST
self.default
* Tue 23 Dec 2014 03:21:24 PM JST
    def test___rdiv__(self, ):
        self.integer = userint.UserInt(1)
        expects = 1
        for num in (1, userint.UserInt(1)):
            got =  num / self.integer
            self.assertEqual(expects, got)

* Tue 23 Dec 2014 03:21:52 PM JST
num /
* Tue 23 Dec 2014 03:22:34 PM JST
    def __rand__(self, other):
        return other & int(self)


* Tue 23 Dec 2014 03:22:49 PM JST
    def test___rmul__(self, ):
        expects = 0
        for num in (1, userint.UserInt(1)):
            got =  num * self.integer
            self.assertEqual(expects, got)


* Tue 23 Dec 2014 03:23:13 PM JST
self.integer = userint.UserInt(2)
* Tue 23 Dec 2014 03:24:15 PM JST
    def test___rand__(self, ):
        self.integer = userint.UserInt(1)
        expects = 1
        for num in (1, userint.UserInt(1)):
            got =  num & self.integer
            self.assertEqual(expects, got)


* Tue 23 Dec 2014 03:24:57 PM JST
    def test___rxor__(self, ):
        self.integer = userint.UserInt(1)
        expects = 0
        for num in (1, userint.UserInt(1)):
            got =  num ^ self.integer
            self.assertEqual(expects, got)


* Tue 23 Dec 2014 03:25:02 PM JST
    def test___rxor__(self, ):
        self.integer = userint.UserInt(1)
        expects = 0
        for num in (1, userint.UserInt(1)):
            got =  num ^ self.integer
            self.assertEqual(expects, got)


* Tue 23 Dec 2014 03:25:39 PM JST
    def test___ror__(self, ):
        self.integer = userint.UserInt(1)
        expects = 1
        for num in (1, userint.UserInt(1)):
            got =  num | self.integer
            self.assertEqual(expects, got)


* Tue 23 Dec 2014 03:26:42 PM JST
    def test___rlshift__(self, ):
        self.integer = userint.UserInt(1)
        expects = 2
        for num in (1, userint.UserInt(1)):
            got =  num << self.integer
            self.assertEqual(expects, got)


* Tue 23 Dec 2014 03:33:48 PM JST
'^\\.', '^_', '^setup\\.py$'
* Tue 23 Dec 2014 03:36:17 PM JST
(nosetest-ignore-file '("^\\." "^_" "^setup\\.py$" "^flycheck"))
* Tue 23 Dec 2014 03:37:00 PM JST
nosetests-ignore-file
* Tue 23 Dec 2014 03:37:31 PM JST
"^\\." "^_" "^setup\\.py$" "^flycheck"
* Tue 23 Dec 2014 03:37:52 PM JST
nosetests-ignore-file
* Tue 23 Dec 2014 03:38:32 PM JST
nosetests-ignore-file
* Tue 23 Dec 2014 03:40:25 PM JST
(s-join "," nosetests-ignore-file)
* Tue 23 Dec 2014 03:42:39 PM JST
nosetests-ignore-file
* Tue 23 Dec 2014 03:44:13 PM JST
(mapcar (lambda (x) (format "--ignore-files=%s" x)) nosetests-ignore-file)
* Tue 23 Dec 2014 03:45:21 PM JST
(mapcar (lambda (x)
                          (format "--ignore-files=%s" x)) nosetests-ignore-file)
* Tue 23 Dec 2014 03:45:40 PM JST
                               
* Tue 23 Dec 2014 03:47:10 PM JST
`nosetests-ignore-file'
* Tue 23 Dec 2014 03:48:05 PM JST
(s-join " " (mapcar
                             (lambda (x) (format "--ignore-files=%s" x))
                             nosetests-ignore-file))
* Tue 23 Dec 2014 03:49:58 PM JST
(s-join " " (mapcar
                             (lambda (x) (format "--ignore-files=%s" x))
                             nosetests-ignore-file))
* Tue 23 Dec 2014 03:50:09 PM JST
--exclude=%s
* Tue 23 Dec 2014 03:50:23 PM JST
nosetests-exclude
* Tue 23 Dec 2014 03:50:31 PM JST
                
* Tue 23 Dec 2014 03:50:34 PM JST
(s-join " " (mapcar
                             (lambda (x) (format "--exclude=%s" x))
                             nosetests-exclude))
* Tue 23 Dec 2014 03:50:41 PM JST
"--include=%s"
* Tue 23 Dec 2014 03:50:49 PM JST
nosetests-include
* Tue 23 Dec 2014 03:50:55 PM JST
                
* Tue 23 Dec 2014 03:51:33 PM JST
Usage: nosetests [options]

Options:
  -h, --help            show this help message and exit
  -V, --version         Output nose version and exit
  -p, --plugins         Output list of available plugins and exit. Combine with higher
                        verbosity for greater detail
  -v, --verbose         Be more verbose. [NOSE_VERBOSE]
  --verbosity=VERBOSITY
                        Set verbosity; --verbosity=2 is the same as -v
  -q, --quiet           Be less verbose
  -c FILES, --config=FILES
                        Load configuration from config file(s). May be specified multiple
                        times; in that case, all config files will be loaded and combined
  -w WHERE, --where=WHERE
                        Look for tests in this directory. May be specified multiple times.
                        The first directory passed will be used as the working directory,
                        in place of the current working directory, which is the default.
                        Others will be added to the list of tests to execute. [NOSE_WHERE]
  --py3where=PY3WHERE   Look for tests in this directory under Python 3.x. Functions the
                        same as 'where', but only applies if running under Python 3.x or
                        above.  Note that, if present under 3.x, this option completely
                        replaces any directories specified with 'where', so the 'where'
                        option becomes ineffective. [NOSE_PY3WHERE]
  -m REGEX, --match=REGEX, --testmatch=REGEX
                        Files, directories, function names, and class names that match
                        this regular expression are considered tests.  Default:
                        (?:^|[\b_\./-])[Tt]est [NOSE_TESTMATCH]
  --tests=NAMES         Run these tests (comma-separated list). This argument is useful
                        mainly from configuration files; on the command line, just pass
                        the tests to run as additional arguments with no switch.
  -l DEBUG, --debug=DEBUG
                        Activate debug logging for one or more systems. Available debug
                        loggers: nose, nose.importer, nose.inspector, nose.plugins,
                        nose.result and nose.selector. Separate multiple names with a
                        comma.
  --debug-log=FILE      Log debug messages to this file (default: sys.stderr)
  --logging-config=FILE, --log-config=FILE
                        Load logging config from this file -- bypasses all other logging
                        config settings.
  -I REGEX, --ignore-files=REGEX
                        Completely ignore any file that matches this regular expression.
                        Takes precedence over any other settings or plugins. Specifying
                        this option will replace the default setting. Specify this option
                        multiple times to add more regular expressions [NOSE_IGNORE_FILES]
  -e REGEX, --exclude=REGEX
                        Don't run tests that match regular expression [NOSE_EXCLUDE]
  -i REGEX, --include=REGEX
                        This regular expression will be applied to files, directories,
                        function names, and class names for a chance to include additional
                        tests that do not match TESTMATCH.  Specify this option multiple
                        times to add more regular expressions [NOSE_INCLUDE]
  -x, --stop            Stop running tests after the first error or failure
  -P, --no-path-adjustment
                        Don't make any changes to sys.path when loading tests
                        [NOSE_NOPATH]
  --exe                 Look for tests in python modules that are executable. Normal
                        behavior is to exclude executable modules, since they may not be
                        import-safe [NOSE_INCLUDE_EXE]
  --noexe               DO NOT look for tests in python modules that are executable. (The
                        default on the windows platform is to do so.)
  --traverse-namespace  Traverse through all path entries of a namespace package
  --first-package-wins, --first-pkg-wins, --1st-pkg-wins
                        nose's importer will normally evict a package from sys.modules if
                        it sees a package with the same name in a different location. Set
                        this option to disable that behavior.
  --no-byte-compile     Prevent nose from byte-compiling the source into .pyc files while
                        nose is scanning for and running tests.
  --rednose             enable colour output (alternatively, set $NOSE_REDNOSE=1)
  --no-color            disable colour output
  --force-color         force colour output when not using a TTY (alternatively, set
                        $NOSE_REDNOSE_COLOR=force)
  --immediate           print errors and failures as they happen, as well as at the end
  -a ATTR, --attr=ATTR  Run only tests that have attributes specified by ATTR [NOSE_ATTR]
  -A EXPR, --eval-attr=EXPR
                        Run only tests for whose attributes the Python expression EXPR
                        evaluates to True [NOSE_EVAL_ATTR]
  -s, --nocapture       Don't capture stdout (any stdout output will be printed
                        immediately) [NOSE_NOCAPTURE]
  --nologcapture        Disable logging capture plugin. Logging configurtion will be left
                        intact. [NOSE_NOLOGCAPTURE]
  --logging-format=FORMAT
                        Specify custom format to print statements. Uses the same format as
                        used by standard logging handlers. [NOSE_LOGFORMAT]
  --logging-datefmt=FORMAT
                        Specify custom date/time format to print statements. Uses the same
                        format as used by standard logging handlers. [NOSE_LOGDATEFMT]
  --logging-filter=FILTER
                        Specify which statements to filter in/out. By default, everything
                        is captured. If the output is too verbose, use this option to
                        filter out needless output. Example: filter=foo will capture
                        statements issued ONLY to  foo or foo.what.ever.sub but not foobar
                        or other logger. Specify multiple loggers with comma:
                        filter=foo,bar,baz. If any logger name is prefixed with a minus,
                        eg filter=-foo, it will be excluded rather than included. Default:
                        exclude logging messages from nose itself (-nose).
                        [NOSE_LOGFILTER]
  --logging-clear-handlers
                        Clear all other logging handlers
  --logging-level=LOGCAPTURE_LEVEL
                        Set the log level to capture
  --with-coverage       Enable plugin Coverage:  Activate a coverage report using Ned
                        Batchelder's coverage module.  [NOSE_WITH_COVERAGE]
  --cover-package=PACKAGE
                        Restrict coverage output to selected packages [NOSE_COVER_PACKAGE]
  --cover-erase         Erase previously collected coverage statistics before run
  --cover-tests         Include test modules in coverage report [NOSE_COVER_TESTS]
  --cover-min-percentage=COVER_MIN_PERCENTAGE
                        Minimum percentage of coverage for teststo pass
                        [NOSE_COVER_MIN_PERCENTAGE]
  --cover-inclusive     Include all python files under working directory in coverage
                        report.  Useful for discovering holes in test coverage if not all
                        files are imported by the test suite. [NOSE_COVER_INCLUSIVE]
  --cover-html          Produce HTML coverage information
  --cover-html-dir=DIR  Produce HTML coverage information in dir
  --cover-branches      Include branch coverage in coverage report [NOSE_COVER_BRANCHES]
  --cover-xml           Produce XML coverage information
  --cover-xml-file=FILE
                        Produce XML coverage information in file
  --pdb                 Drop into debugger on errors
  --pdb-failures        Drop into debugger on failures
  --no-deprecated       Disable special handling of DeprecatedTest exceptions.
  --with-doctest        Enable plugin Doctest:  Activate doctest plugin to find and run
                        doctests in non-test modules.  [NOSE_WITH_DOCTEST]
  --doctest-tests       Also look for doctests in test modules. Note that classes, methods
                        and functions should have either doctests or non-doctest tests,
                        not both. [NOSE_DOCTEST_TESTS]
  --doctest-extension=EXT
                        Also look for doctests in files with this extension
                        [NOSE_DOCTEST_EXTENSION]
  --doctest-result-variable=VAR
                        Change the variable name set to the result of the last interpreter
                        command from the default '_'. Can be used to avoid conflicts with
                        the _() function used for text translation.
                        [NOSE_DOCTEST_RESULT_VAR]
  --doctest-fixtures=SUFFIX
                        Find fixtures for a doctest file in module with this name appended
                        to the base name of the doctest file
  --doctest-options=OPTIONS
                        Specify options to pass to doctest. Eg.
                        '+ELLIPSIS,+NORMALIZE_WHITESPACE'
  --with-isolation      Enable plugin IsolationPlugin:  Activate the isolation plugin to
                        isolate changes to external modules to a single test module or
                        package. The isolation plugin resets the contents of sys.modules
                        after each test module or package runs to its state before the
                        test. PLEASE NOTE that this plugin should not be used with the
                        coverage plugin, or in any other case where module reloading may
                        produce undesirable side-effects.  [NOSE_WITH_ISOLATION]
  -d, --detailed-errors, --failure-detail
                        Add detail to error output by attempting to evaluate failed
                        asserts [NOSE_DETAILED_ERRORS]
  --with-profile        Enable plugin Profile:  Use this plugin to run tests using the
                        hotshot profiler.   [NOSE_WITH_PROFILE]
  --profile-sort=SORT   Set sort order for profiler output
  --profile-stats-file=FILE
                        Profiler stats file; default is a new temp file on each run
  --profile-restrict=RESTRICT
                        Restrict profiler output. See help for pstats.Stats for details
  --no-skip             Disable special handling of SkipTest exceptions.
  --with-id             Enable plugin TestId:  Activate to add a test id (like #1) to each
                        test name output. Activate with --failed to rerun failing tests
                        only.  [NOSE_WITH_ID]
  --id-file=FILE        Store test ids found in test runs in this file. Default is the
                        file .noseids in the working directory.
  --failed              Run the tests that failed in the last test run.
  --processes=NUM       Spread test run among this many processes. Set a number equal to
                        the number of processors or cores in your machine for best
                        results. Pass a negative number to have the number of processes
                        automatically set to the number of cores. Passing 0 means to
                        disable parallel testing. Default is 0 unless NOSE_PROCESSES is
                        set. [NOSE_PROCESSES]
  --process-timeout=SECONDS
                        Set timeout for return of results from each test runner process.
                        Default is 10. [NOSE_PROCESS_TIMEOUT]
  --process-restartworker
                        If set, will restart each worker process once their tests are
                        done, this helps control memory leaks from killing the system.
                        [NOSE_PROCESS_RESTARTWORKER]
  --with-xunit          Enable plugin Xunit: This plugin provides test results in the
                        standard XUnit XML format. [NOSE_WITH_XUNIT]
  --xunit-file=FILE     Path to xml file to store the xunit report in. Default is
                        nosetests.xml in the working directory [NOSE_XUNIT_FILE]
  --all-modules         Enable plugin AllModules: Collect tests from all python modules.
                        [NOSE_ALL_MODULES]
  --collect-only        Enable collect-only:  Collect and output test names only, don't
                        run any tests.  [COLLECT_ONLY]

* Tue 23 Dec 2014 03:52:13 PM JST
(s-join " " (mapcar
                             (lambda (x) (format "--exclude=%s" x))
                             nosetests-exclude))
* Tue 23 Dec 2014 03:52:26 PM JST
"--where=%s"
* Tue 23 Dec 2014 03:52:34 PM JST
                
* Tue 23 Dec 2014 03:52:41 PM JST
                             
* Tue 23 Dec 2014 03:52:46 PM JST
                             
* Tue 23 Dec 2014 03:52:49 PM JST
                             
* Tue 23 Dec 2014 03:54:18 PM JST
(if nosetests-where
                (s-join " " (mapcar (lambda (x) (format "--where=%s" x))
                             nosetests-exclude)) "")
* Tue 23 Dec 2014 03:54:43 PM JST
                             
* Tue 23 Dec 2014 03:56:21 PM JST
string
* Tue 23 Dec 2014 03:56:59 PM JST
string
* Tue 23 Dec 2014 03:57:32 PM JST
`nosetests-where'
* Tue 23 Dec 2014 03:57:50 PM JST
`nosetests-where'
* Tue 23 Dec 2014 03:58:12 PM JST

* Tue 23 Dec 2014 03:58:12 PM JST

* Tue 23 Dec 2014 03:58:12 PM JST
(defvar nosetests-where nil)

* Tue 23 Dec 2014 03:58:15 PM JST

* Tue 23 Dec 2014 03:58:15 PM JST

* Tue 23 Dec 2014 03:58:15 PM JST
(defvar nosetests-ignore-file nil)

* Tue 23 Dec 2014 04:02:03 PM JST
nosetests-ignore-file
* Tue 23 Dec 2014 04:06:10 PM JST
    r"""Rectangle
    
    Rectangle is a object.
    Responsibility: 
    """

* Tue 23 Dec 2014 04:08:14 PM JST
Public MethodConstructorRectangle() : void
 Public MethodConstructorRectangle(Point) : void
 Public MethodConstructorRectangle(Dimension) : void
 Public MethodConstructorRectangle(Rectangle) : void
 Public MethodConstructorRectangle(Point, Dimension) : void
 Public MethodConstructorRectangle(int, int) : void
 Public MethodConstructorRectangle(int, int, int, int) : void
* Tue 23 Dec 2014 04:08:24 PM JST
Public MethodConstructor
* Tue 23 Dec 2014 04:08:26 PM JST
Public MethodConstructor
* Tue 23 Dec 2014 04:08:26 PM JST
Public MethodConstructor
* Tue 23 Dec 2014 04:08:26 PM JST
Public MethodConstructor
* Tue 23 Dec 2014 04:08:26 PM JST
Public MethodConstructor
* Tue 23 Dec 2014 04:08:26 PM JST
Public MethodConstructor
* Tue 23 Dec 2014 04:08:34 PM JST
MethodConstructor
* Tue 23 Dec 2014 04:08:35 PM JST
Public MethodConstructor
* Tue 23 Dec 2014 04:08:41 PM JST
 : void
* Tue 23 Dec 2014 04:08:43 PM JST
 : void
* Tue 23 Dec 2014 04:08:44 PM JST
 : void
* Tue 23 Dec 2014 04:08:45 PM JST
 : void
* Tue 23 Dec 2014 04:08:47 PM JST
 : void
* Tue 23 Dec 2014 04:08:49 PM JST
 : void
* Tue 23 Dec 2014 04:08:52 PM JST
 : void
* Tue 23 Dec 2014 10:11:28 PM JST
psexists
* Tue 23 Dec 2014 10:11:41 PM JST
from mytemp.mypsutil import waitbusy, waitclose
* Tue 23 Dec 2014 10:11:46 PM JST
waitclose
* Tue 23 Dec 2014 10:11:46 PM JST
waitbusy, waitclose
* Tue 23 Dec 2014 10:12:03 PM JST
exe
* Tue 23 Dec 2014 10:12:03 PM JST
sleipnir.exe
* Tue 23 Dec 2014 10:12:15 PM JST
chrome
* Tue 23 Dec 2014 10:15:13 PM JST
from ref.CMD import icedove, sleipnir
* Tue 23 Dec 2014 10:15:30 PM JST
ReLaunchSleipnir
* Tue 23 Dec 2014 10:15:55 PM JST

* Tue 23 Dec 2014 10:15:55 PM JST

* Tue 23 Dec 2014 10:15:55 PM JST
        # if not exists sleipnir, reexecute

* Tue 23 Dec 2014 10:15:56 PM JST

* Tue 23 Dec 2014 10:15:56 PM JST

* Tue 23 Dec 2014 10:15:56 PM JST
        # TODO: (Atami) [2014/12/23]

* Tue 23 Dec 2014 10:22:10 PM JST
width
* Tue 23 Dec 2014 10:22:12 PM JST
height
* Tue 23 Dec 2014 10:53:34 PM JST

* Tue 23 Dec 2014 10:53:34 PM JST

* Tue 23 Dec 2014 10:53:34 PM JST
                x, y = arg.get_x(), arg.get_y()

* Tue 23 Dec 2014 11:08:30 PM JST

* Tue 23 Dec 2014 11:08:30 PM JST

* Tue 23 Dec 2014 11:08:30 PM JST
        x, y, w, h = None, None, None, None

* Tue 23 Dec 2014 11:09:03 PM JST
        if 4 < len(args) or 4 < len(kwargs):
            raise TypeError()

* Tue 23 Dec 2014 11:20:54 PM JST
                
* Wed 24 Dec 2014 06:31:07 AM JST
Rectangle(int, int)
* Wed 24 Dec 2014 07:05:28 AM JST
args, 
* Wed 24 Dec 2014 08:51:19 AM JST
kwargs.
* Wed 24 Dec 2014 08:52:18 AM JST
self
* Wed 24 Dec 2014 08:59:16 AM JST
    @__init__.when('len(args) == 1 and isinstance(args[0], Point)')
    def __init__len1(self, *args, **kwargs):
        r"""

        @Arguments:
        - `args`:
        - `kwargs`:
        """
        self._point = Point(args[0].get_x(), args[0].get_y())
        self._dimension = Dimension(0, 0)

* Wed 24 Dec 2014 08:59:20 AM JST
Point
* Wed 24 Dec 2014 08:59:34 AM JST
w, h = [kwargs.get(x, 0) for x in ('x', 'y', 'w', 'h')]
* Wed 24 Dec 2014 08:59:48 AM JST
y', 
* Wed 24 Dec 2014 08:59:49 AM JST
x', 'y', 
* Wed 24 Dec 2014 09:06:09 AM JST
w, h = [kwargs.get(x, 0) for x in ('w', 'h')]
* Wed 24 Dec 2014 09:08:16 AM JST
Type
* Wed 24 Dec 2014 09:12:15 AM JST
        if 'width' in kwargs or 'height' in kwargs:
            raise TypeError()
        x, y = [kwargs.get(x, 0) for x in ('x', 'y')]

* Wed 24 Dec 2014 09:12:24 AM JST
height
* Wed 24 Dec 2014 09:12:32 AM JST
x', 
* Wed 24 Dec 2014 09:12:45 AM JST
x, 
* Wed 24 Dec 2014 09:21:08 AM JST
args[0], y
* Wed 24 Dec 2014 09:21:11 AM JST
w, h
* Wed 24 Dec 2014 09:21:30 AM JST
self, 
* Wed 24 Dec 2014 09:21:41 AM JST
x, y
* Wed 24 Dec 2014 09:21:45 AM JST
args[0].get_width(), args[0].get_height()
* Wed 24 Dec 2014 09:22:12 AM JST
args[0].get_x(), args[0].get_y()
* Wed 24 Dec 2014 09:22:16 AM JST
w, h
* Wed 24 Dec 2014 09:22:19 AM JST

* Wed 24 Dec 2014 09:22:19 AM JST

* Wed 24 Dec 2014 09:22:19 AM JST
        self._point = Point(args[0].get_x(), args[0].get_y())

* Wed 24 Dec 2014 09:22:19 AM JST
        self._point = Point(args[0].get_x(), args[0].get_y())

* Wed 24 Dec 2014 09:22:19 AM JST
        self._point = Point(args[0].get_x(), args[0].get_y())
        self._dimension = Dimension(w, h)

* Wed 24 Dec 2014 09:22:24 AM JST
sldf.
* Wed 24 Dec 2014 09:22:31 AM JST
x, y
* Wed 24 Dec 2014 09:22:35 AM JST
w, h
* Wed 24 Dec 2014 09:22:45 AM JST

* Wed 24 Dec 2014 09:22:45 AM JST

* Wed 24 Dec 2014 09:22:45 AM JST
        self._point = Point(x, y)

* Wed 24 Dec 2014 09:22:45 AM JST
        self._point = Point(x, y)

* Wed 24 Dec 2014 09:22:45 AM JST
        self._point = Point(x, y)
        self._dimension = Dimension(w, h)

* Wed 24 Dec 2014 09:23:20 AM JST
Rectangle()
* Wed 24 Dec 2014 09:23:25 AM JST
Rectangle
* Wed 24 Dec 2014 09:23:38 AM JST
10)
* Wed 24 Dec 2014 09:23:38 AM JST
10,10)
* Wed 24 Dec 2014 09:23:39 AM JST
Point(10,10)
* Wed 24 Dec 2014 09:27:09 AM JST
isinstance()
* Wed 24 Dec 2014 09:27:44 AM JST
10),
* Wed 24 Dec 2014 09:27:44 AM JST
10,10),
* Wed 24 Dec 2014 09:27:45 AM JST
Dimension(10,10),
* Wed 24 Dec 2014 09:28:12 AM JST
        
* Wed 24 Dec 2014 10:01:34 AM JST
        if 'width' in kwargs or 'height' in kwargs:
            raise TypeError()
        x, y = [kwargs.get(x, 0) for x in ('x', 'y')]
        self.__init__(x, y, args[0].get_width(), args[0].get_height())

* Wed 24 Dec 2014 10:02:18 AM JST

* Wed 24 Dec 2014 10:02:18 AM JST

* Wed 24 Dec 2014 10:02:18 AM JST
        x, y = [kwargs.get(x, 0) for x in ('x', 'y')]

* Wed 24 Dec 2014 10:02:25 AM JST
args[0]
* Wed 24 Dec 2014 10:51:16 AM JST
        
* Wed 24 Dec 2014 10:52:14 AM JST
        if ('x' in kwargs or 'y' in kwargs or
            'width' in kwargs or 'height' in kwargs):
            raise TypeError()

* Wed 24 Dec 2014 10:53:19 AM JST
    @__init__.when('len(args) == 2 '
                   'and isinstance(args[0], Point) '
                   'and isinstance(args[1], Dimension)')
    def __init__(self, *args, **kwargs):
        r"""

        @Arguments:
        - `args`:
        - `kwargs`:
        """
        if ('x' in kwargs or 'y' in kwargs or
            'width' in kwargs or 'height' in kwargs):
            raise TypeError()
        self.__init__(args[0].get_x(), args[0].get_y(),
                      args[1].get_width(), args[1].get_height())


* Wed 24 Dec 2014 10:54:15 AM JST
Point
* Wed 24 Dec 2014 10:54:17 AM JST
Dimension
* Wed 24 Dec 2014 10:54:36 AM JST
    @__init__.when('len(args) == 2 '
                   'and isinstance(args[0], Dimension) '
                   'and isinstance(args[1], Point)')
    def __init__len2_dimension_point(self, *args, **kwargs):
        r"""

        @Arguments:
        - `args`:
        - `kwargs`:
        """
        if ('x' in kwargs or 'y' in kwargs or
            'width' in kwargs or 'height' in kwargs):
            raise TypeError()
        self.__init__(args[1].get_x(), args[1].get_y(),
                      args[0].get_width(), args[0].get_height())

* Wed 24 Dec 2014 10:54:44 AM JST
Dimension
* Wed 24 Dec 2014 10:54:45 AM JST
Point
* Wed 24 Dec 2014 10:54:57 AM JST
get_x()
* Wed 24 Dec 2014 10:54:59 AM JST
get_y()
* Wed 24 Dec 2014 10:55:04 AM JST
                      
* Wed 24 Dec 2014 10:55:13 AM JST
            
* Wed 24 Dec 2014 10:55:18 AM JST
            
* Wed 24 Dec 2014 10:55:28 AM JST
x, y = [kwargs.get(x, 0) for x in ('x', 'y')]
* Wed 24 Dec 2014 10:55:55 AM JST
w, h = [kwargs.get(x, 0) for x in ('w', 'h')]
* Wed 24 Dec 2014 10:57:18 AM JST
w, h = [kwargs.get(x, 0) for x in ('wdth
* Wed 24 Dec 2014 10:58:19 AM JST
5
* Wed 24 Dec 2014 10:58:19 AM JST
width=5
* Wed 24 Dec 2014 11:02:24 AM JST
self.
* Wed 24 Dec 2014 11:04:46 AM JST
            
* Wed 24 Dec 2014 11:05:02 AM JST
Rectangle
* Wed 24 Dec 2014 11:05:48 AM JST
Height, Width
* Wed 24 Dec 2014 11:05:51 AM JST
Dimension
* Wed 24 Dec 2014 11:05:55 AM JST
XCoordinate, YCoordinate
* Wed 24 Dec 2014 11:05:59 AM JST
Point
* Wed 24 Dec 2014 11:06:01 AM JST
Rectangle
* Wed 24 Dec 2014 11:06:22 AM JST
    
* Wed 24 Dec 2014 11:07:09 AM JST
YCoordinate, Point, Rectangle

* Wed 24 Dec 2014 11:07:13 AM JST
Height, Width, Dimension, XCoordinate,
* Wed 24 Dec 2014 11:23:00 AM JST
Height, Width, Dimension, XCoordinate, YCoordinate,\
    Point, Rectangle
* Wed 24 Dec 2014 12:03:56 PM JST
1,
* Wed 24 Dec 2014 12:03:56 PM JST
1,1,
* Wed 24 Dec 2014 12:07:34 PM JST
Rectangle(Point)
* Wed 24 Dec 2014 12:07:44 PM JST

* Wed 24 Dec 2014 12:07:44 PM JST

* Wed 24 Dec 2014 12:07:44 PM JST
        Rectangle(Point, )

* Wed 24 Dec 2014 12:07:46 PM JST
Rectangle(Dimension)
* Wed 24 Dec 2014 12:08:54 PM JST

* Wed 24 Dec 2014 12:08:54 PM JST

* Wed 24 Dec 2014 12:08:54 PM JST
        Rectangle(Dimension, x=10, y=10)

* Wed 24 Dec 2014 12:08:55 PM JST

* Wed 24 Dec 2014 12:08:55 PM JST

* Wed 24 Dec 2014 12:08:55 PM JST
        Rectangle(Dimension, x=10, y=10)

* Wed 24 Dec 2014 12:13:30 PM JST
Orientation
* Wed 24 Dec 2014 12:13:48 PM JST
Orientation
* Wed 24 Dec 2014 12:14:13 PM JST

* Wed 24 Dec 2014 12:14:13 PM JST

* Wed 24 Dec 2014 12:14:13 PM JST
from xahk2.xobj.coordinate import XCoorYdinate, YCoordinate

* Wed 24 Dec 2014 12:14:28 PM JST

* Wed 24 Dec 2014 12:14:28 PM JST

* Wed 24 Dec 2014 12:14:28 PM JST
from xahk2.xobj.side import Width, Height

* Wed 24 Dec 2014 12:17:36 PM JST
expects = (0, 0, 0, 0)
* Wed 24 Dec 2014 12:19:50 PM JST
(((0, 0, 0, 0), rectangle.Rectangle().get_bounds()))
* Wed 24 Dec 2014 12:21:24 PM JST

* Wed 24 Dec 2014 12:21:33 PM JST
y
* Wed 24 Dec 2014 12:21:33 PM JST
self.y
* Wed 24 Dec 2014 12:21:47 PM JST
            
* Wed 24 Dec 2014 12:21:48 PM JST
      
* Wed 24 Dec 2014 12:21:51 PM JST

* Wed 24 Dec 2014 12:21:54 PM JST
width
* Wed 24 Dec 2014 12:21:54 PM JST
self.width
* Wed 24 Dec 2014 12:22:00 PM JST
width
* Wed 24 Dec 2014 12:22:00 PM JST
self.width
* Wed 24 Dec 2014 12:22:01 PM JST
width=self.width
* Wed 24 Dec 2014 12:22:38 PM JST

* Wed 24 Dec 2014 12:22:44 PM JST
height
* Wed 24 Dec 2014 12:22:46 PM JST
height
* Wed 24 Dec 2014 12:22:46 PM JST
self.height
* Wed 24 Dec 2014 12:22:57 PM JST
height
* Wed 24 Dec 2014 12:22:57 PM JST
self.height
* Wed 24 Dec 2014 12:22:59 PM JST
0
* Wed 24 Dec 2014 12:23:02 PM JST
0
* Wed 24 Dec 2014 12:24:35 PM JST
                  
* Wed 24 Dec 2014 12:24:44 PM JST

* Wed 24 Dec 2014 12:24:44 PM JST

* Wed 24 Dec 2014 12:24:44 PM JST
        expects = (0, 0, 0, 0)

* Wed 24 Dec 2014 12:24:45 PM JST
        expects = (0, 0, 0, 0)

* Wed 24 Dec 2014 12:24:45 PM JST
        expects = (0, 0, 0, 0)
        got = rectangle.Rectangle().get_bounds()

* Wed 24 Dec 2014 12:30:34 PM JST
x
* Wed 24 Dec 2014 12:30:34 PM JST
self.x
* Wed 24 Dec 2014 12:33:54 PM JST
point.Point(self.x, self.y)
* Wed 24 Dec 2014 12:34:02 PM JST
        with self.assertRaises(TypeError):
            rectangle.Rectangle(point.Point(self.x, self.y), x=10)

* Wed 24 Dec 2014 12:34:21 PM JST
        with self.assertRaises(TypeError):
            rectangle.Rectangle(point.Point(self.x, self.y), y=10)

* Wed 24 Dec 2014 12:36:58 PM JST
        expects = (self.x, self.y, 0, 0)
        got = rectangle.Rectangle(point.Point(self.x, self.y))
        self.assertEqual(expects, got.get_bounds())

* Wed 24 Dec 2014 12:37:17 PM JST
        expects = (self.x, self.y, self.w, 0)
        got = rectangle.Rectangle(point.Point(self.x, self.y), width=self.w)
        self.assertEqual(expects, got.get_bounds())

* Wed 24 Dec 2014 12:37:20 PM JST
w
* Wed 24 Dec 2014 12:37:20 PM JST
self.w
* Wed 24 Dec 2014 12:37:25 PM JST
w
* Wed 24 Dec 2014 12:37:26 PM JST
self.w
* Wed 24 Dec 2014 12:37:27 PM JST
width
* Wed 24 Dec 2014 12:37:36 PM JST
        expects = (self.x, self.y, 0, self.h)
        got = rectangle.Rectangle(point.Point(self.x, self.y), height=self.h)
        self.assertEqual(expects, got.get_bounds())

* Wed 24 Dec 2014 12:38:57 PM JST
        expects = (self.x, self.y, 0, 0)
        got = rectangle.Rectangle(point.Point(self.x, self.y))
        self.assertEqual(expects, got.get_bounds())
        expects = (self.x, self.y, self.w, 0)
        got = rectangle.Rectangle(point.Point(self.x, self.y), width=self.w)
        self.assertEqual(expects, got.get_bounds())
        expects = (self.x, self.y, 0, self.h)
        got = rectangle.Rectangle(point.Point(self.x, self.y), height=self.h)
        self.assertEqual(expects, got.get_bounds())
        expects = (self.x, self.y, self.w, self.h)
        got = rectangle.Rectangle(
            point.Point(self.x, self.y), width=self.w, height=self.h)
        self.assertEqual(expects, got.get_bounds())

        with self.assertRaises(TypeError):
            rectangle.Rectangle(point.Point(self.x, self.y), x=10)
        with self.assertRaises(TypeError):
            rectangle.Rectangle(point.Point(self.x, self.y), y=10)
        with self.assertRaises(TypeError):
            rectangle.Rectangle(point.Point(self.x, self.y), x=10, y=10)


* Wed 24 Dec 2014 12:39:33 PM JST
x
* Wed 24 Dec 2014 12:39:33 PM JST
self.x
* Wed 24 Dec 2014 12:39:36 PM JST
y
* Wed 24 Dec 2014 12:39:36 PM JST
self.y
* Wed 24 Dec 2014 12:39:38 PM JST
0
* Wed 24 Dec 2014 12:39:41 PM JST
0
* Wed 24 Dec 2014 12:40:00 PM JST
y
* Wed 24 Dec 2014 12:40:01 PM JST
self.y
* Wed 24 Dec 2014 12:40:13 PM JST
width
* Wed 24 Dec 2014 12:42:41 PM JST
x
* Wed 24 Dec 2014 12:42:41 PM JST
self.x
* Wed 24 Dec 2014 12:42:57 PM JST
height
* Wed 24 Dec 2014 12:43:15 PM JST
width
* Wed 24 Dec 2014 12:43:19 PM JST
h
* Wed 24 Dec 2014 12:43:23 PM JST
height
* Wed 24 Dec 2014 12:44:41 PM JST

* Wed 24 Dec 2014 12:44:41 PM JST

* Wed 24 Dec 2014 12:44:41 PM JST
        size = 

* Wed 24 Dec 2014 12:48:07 PM JST

* Wed 24 Dec 2014 12:48:07 PM JST

* Wed 24 Dec 2014 12:48:08 PM JST
        self.skipTest()

* Wed 24 Dec 2014 12:48:59 PM JST
        got = rectangle.Rectangle(size, x=self.x)
        self.assertEqual(expects, got.get_bounds())

* Wed 24 Dec 2014 12:49:07 PM JST
self.assertEqual(expects, got.get_bounds())
* Wed 24 Dec 2014 12:49:39 PM JST
        with self.assertRaises(TypeError):
            rectangle.Rectangle(self.rect, x=10)

* Wed 24 Dec 2014 12:50:34 PM JST

* Wed 24 Dec 2014 12:50:34 PM JST

* Wed 24 Dec 2014 12:50:34 PM JST
        self.skipTest()

* Wed 24 Dec 2014 12:51:02 PM JST
self.x
* Wed 24 Dec 2014 12:51:15 PM JST
self.assertEqual(expects, got.get_bounds())
* Wed 24 Dec 2014 12:51:25 PM JST
        expects = (int(self.x), 0, 0, 0)
        got = rectangle.Rectangle(int(self.x))
        self.assertEqual(expects, got.get_bounds())

* Wed 24 Dec 2014 12:53:08 PM JST
        expects = (int(self.x), 0, 0, 0)
        got = rectangle.Rectangle(int(self.x))
        self.assertEqual(expects, got.get_bounds())

* Wed 24 Dec 2014 12:54:13 PM JST
        expects = (int(self.x), self.y, 0, 0)
        got = rectangle.Rectangle(int(self.x), y=self.y)
        self.assertEqual(expects, got.get_bounds())
        

* Wed 24 Dec 2014 12:54:16 PM JST
y
* Wed 24 Dec 2014 12:54:16 PM JST
self.y
* Wed 24 Dec 2014 12:54:20 PM JST
y
* Wed 24 Dec 2014 12:54:28 PM JST
        expects = (int(self.x), 0, self.w, 0)
        got = rectangle.Rectangle(int(self.x), width=self.w)
        self.assertEqual(expects, got.get_bounds())
        

* Wed 24 Dec 2014 12:54:31 PM JST
w
* Wed 24 Dec 2014 12:54:31 PM JST
self.w
* Wed 24 Dec 2014 12:54:36 PM JST
w
* Wed 24 Dec 2014 12:54:36 PM JST
self.w
* Wed 24 Dec 2014 12:54:39 PM JST
width
* Wed 24 Dec 2014 12:55:48 PM JST
        expects = (int(self.x), 0, 0, 0)
        got = rectangle.Rectangle(int(self.x))
        self.assertEqual(expects, got.get_bounds())

* Wed 24 Dec 2014 12:55:52 PM JST
int(
* Wed 24 Dec 2014 12:55:54 PM JST
0
* Wed 24 Dec 2014 12:55:57 PM JST
0
* Wed 24 Dec 2014 12:57:44 PM JST
        expects = (self.x, self.y, self.w, self.h)
        got = rectangle.Rectangle(points, size)
        self.assertEqual(expects, got.get_bounds())

* Wed 24 Dec 2014 12:58:53 PM JST
rectangle.Rectangle(points, size)
* Wed 24 Dec 2014 12:59:00 PM JST
        with self.assertRaises(TypeError):
            rectangle.Rectangle(points, size, x=10)

* Wed 24 Dec 2014 12:59:09 PM JST
        with self.assertRaises(TypeError):
            rectangle.Rectangle(points, size, width=10)

* Wed 24 Dec 2014 01:01:19 PM JST
nosetests-turn-on-pdb
* Wed 24 Dec 2014 01:01:51 PM JST
nosetests-pdb
* Wed 24 Dec 2014 01:04:29 PM JST
(defvar nosetests-eval-after-load-hook nil
  "Hook for nosetests `eval-after-load'.")
(add-hook 'nosetests-eval-after-load-hook 'nosetests-mode-custom-predefine)
(add-hook 'nosetests-eval-after-load-hook 'nosetests-mode-predefine 'append)
(add-hook 'nosetests-eval-after-load-hook 'nosetests-mode-map-predefine 'append)
(add-hook 'nosetests-eval-after-load-hook 'nosetests-mode-face-predefine 'append)
(run-hooks-after-load "nosetests" 'nosetests-eval-after-load-hook)


* Wed 24 Dec 2014 01:06:15 PM JST
;;;###autoload
(defun nosetests-mode-custom-predefine ()
  "For `eval-after-load' nosetests customize."
  (message "eval-after-load: \"nosetests\" customizing..")
  (custom-set-variables
   '(nosetests-verbose-level 3)
   '(nosetests-exe t)
   '(nosetests-rednose t)
   '(nosetests-with-coverage t)
   '(nosetests-pdb t)
   '(nosetests-pdb-failures t)
   '(nosetests-failure-detail t)
   '(nosetests-with-id t)))

;;;###autoload
(defun nosetests-mode-predefine ()
  "For `eval-after-load' nosetests function."
  (message "eval-after-load: \"nosetests\" setting..")
  )

;;;###autoload
(defun nosetests-mode-map-predefine ()
  "For nosetests key bindings."
  (interactive)
  (unless (called-interactively-p 'interactive)
    (message "eval-after-load: \"nosetests\" keymaping.."))

  )

;;;###autoload
(defun nosetests-mode-face-predefine ()
  "For nosetests face."
  (message "eval-after-load: \"nosetests\" Setting faces..")
  )

* Wed 24 Dec 2014 01:07:18 PM JST
'(nosetests-ignore-file (list "^\\." "^_" "^setup\\.py$" "^flycheck"))
* Wed 24 Dec 2014 01:07:33 PM JST
   
* Wed 24 Dec 2014 01:08:34 PM JST
Modified: `python-mode-custom-predefine'
* Wed 24 Dec 2014 01:08:45 PM JST
remove
* Wed 24 Dec 2014 01:08:55 PM JST
`nosetests-ignore-file'
* Wed 24 Dec 2014 01:09:52 PM JST
;;;###autoload
(defun nosetests-run-all+ (args) ;[2014/09/10]
  ""
  (interactive "p")
  (when (and (list-matched-buffers "^\\*gud")
             (y-or-n-p "'*gud' kill buffer?"))
    (kill-some-gud-buffers))
  (nosetests-run-all args))

;;;###autoload
(defun nosetests-run-it-cover-package+ (args) ;[2014/12/23]
  "ARGS"
  (interactive "p")
  (when (and (list-matched-buffers "^\\*gud")
             (y-or-n-p "'*gud' kill buffer?"))
    (kill-some-gud-buffers))
  (nosetests-run-it-cover-package args))

;;;###autoload
(defun nosetests-run-all-cover-package+ (args) ;[2014/12/23]
  "ARGS"
  (interactive "p")
  (when (and (list-matched-buffers "^\\*gud")
             (y-or-n-p "'*gud' kill buffer?"))
    (kill-some-gud-buffers))
  (nosetests-run-all-cover-package args))

* Wed 24 Dec 2014 01:14:48 PM JST
        points = point.Point(self.x, self.y)
        size = dimension.Dimension(self.w, self.h)

        expects = (self.x, self.y, self.w, self.h)
        got = rectangle.Rectangle(points, size)
        self.assertEqual(expects, got.get_bounds())

        with self.assertRaises(TypeError):
            rectangle.Rectangle(points, size, x=10)
        with self.assertRaises(TypeError):
            rectangle.Rectangle(points, size, y=10)
        with self.assertRaises(TypeError):
            rectangle.Rectangle(points, size, width=10)
        with self.assertRaises(TypeError):
            rectangle.Rectangle(points, size, height=10)

* Wed 24 Dec 2014 01:15:04 PM JST
points, 
* Wed 24 Dec 2014 01:15:15 PM JST
points, 
* Wed 24 Dec 2014 01:15:20 PM JST
points, 
* Wed 24 Dec 2014 01:15:23 PM JST
points, 
* Wed 24 Dec 2014 01:15:28 PM JST
points, 
* Wed 24 Dec 2014 01:17:46 PM JST
width
* Wed 24 Dec 2014 01:17:50 PM JST
height
* Wed 24 Dec 2014 01:18:42 PM JST
self.assertEqual(expects, got.get_bounds())
* Wed 24 Dec 2014 01:19:23 PM JST
        expects = (self.x, self.y, 0, 0)
        got = rectangle.Rectangle(self.x, self.y)
        self.assertEqual(expects, got.get_bounds())

* Wed 24 Dec 2014 01:19:41 PM JST
        expects = (self.x, self.y, self.w, 0)
        got = rectangle.Rectangle(self.x, self.y, width=self.w)
        self.assertEqual(expects, got.get_bounds())

* Wed 24 Dec 2014 01:19:43 PM JST
w
* Wed 24 Dec 2014 01:19:44 PM JST
self.w
* Wed 24 Dec 2014 01:19:50 PM JST
width
* Wed 24 Dec 2014 01:19:55 PM JST
        expects = (self.x, self.y, 0, self.h)
        got = rectangle.Rectangle(self.x, self.y, height=self.h)
        self.assertEqual(expects, got.get_bounds())

* Wed 24 Dec 2014 01:21:25 PM JST
        with self.assertRaises(TypeError):
            rectangle.Rectangle(size, points, x=10)

* Wed 24 Dec 2014 01:21:32 PM JST
points
* Wed 24 Dec 2014 01:21:35 PM JST
size
* Wed 24 Dec 2014 01:21:42 PM JST
        with self.assertRaises(TypeError):
            rectangle.Rectangle(self.x, self.y, x=10)

* Wed 24 Dec 2014 01:21:48 PM JST
        with self.assertRaises(TypeError):
            rectangle.Rectangle(self.x, self.y, y=10)

* Wed 24 Dec 2014 01:23:18 PM JST
UserInt
* Wed 24 Dec 2014 01:24:00 PM JST
(int, UserInt)
* Wed 24 Dec 2014 01:26:01 PM JST
slf.
* Wed 24 Dec 2014 01:26:05 PM JST
self.
* Wed 24 Dec 2014 01:26:17 PM JST
self.
* Wed 24 Dec 2014 01:26:43 PM JST
self.assertEqual(expects, got.get_bounds())
* Wed 24 Dec 2014 01:27:18 PM JST
rectangle.Rectangle(point.Point(self.x, self.y), self.w, self.h)
* Wed 24 Dec 2014 01:28:07 PM JST
        expects = (self.x, self.y, self.w, self.h)
        got = rectangle.Rectangle(point.Point(self.x, self.y), self.w, self.h)
        self.assertEqual(expects, got.get_bounds())
        with self.assertRaises(TypeError):
            rectangle.Rectangle(
                point.Point(self.x, self.y), self.w, self.h, width=10)

* Wed 24 Dec 2014 01:28:30 PM JST
Point(
* Wed 24 Dec 2014 01:28:31 PM JST
point.Point(
* Wed 24 Dec 2014 01:30:06 PM JST
expects = (self.x, self.y, self.w, self.h)
* Wed 24 Dec 2014 01:30:18 PM JST
        got = rectangle.Rectangle(
            self.x, self.y, dimension.Dimension(self.w, self.h))

* Wed 24 Dec 2014 01:30:24 PM JST
Dimension(
* Wed 24 Dec 2014 01:30:24 PM JST
dimension.Dimension(
* Wed 24 Dec 2014 01:30:27 PM JST
            
* Wed 24 Dec 2014 01:30:45 PM JST
        got = rectangle.Rectangle(
            self.x, self.y, dimension.Dimension(self.w, self.h))

* Wed 24 Dec 2014 01:30:50 PM JST
Dimension(
* Wed 24 Dec 2014 01:30:50 PM JST
dimension.Dimension(
* Wed 24 Dec 2014 01:30:52 PM JST
            
* Wed 24 Dec 2014 01:30:57 PM JST
self.assertEqual(expects, got.get_bounds())
* Wed 24 Dec 2014 01:31:26 PM JST
        if len(kwargs):
            raise TypeError()

* Wed 24 Dec 2014 01:31:37 PM JST
        with self.assertRaises(TypeError):
            rectangle.Rectangle(
                self.x, self.y, dimension.Dimension(self.w, self.h), width=10)

* Wed 24 Dec 2014 01:31:53 PM JST
                
* Wed 24 Dec 2014 01:44:55 PM JST

* Wed 24 Dec 2014 01:44:55 PM JST

* Wed 24 Dec 2014 01:44:55 PM JST
from time import sleep

* Wed 24 Dec 2014 01:54:00 PM JST
Rectangle()
* Wed 24 Dec 2014 01:54:03 PM JST
r"""Rectangle()
* Wed 24 Dec 2014 01:56:57 PM JST
int(
* Wed 24 Dec 2014 01:58:57 PM JST
Dimen
* Wed 24 Dec 2014 02:02:18 PM JST
tuple
* Wed 24 Dec 2014 02:02:20 PM JST

* Wed 24 Dec 2014 02:02:20 PM JST

* Wed 24 Dec 2014 02:02:20 PM JST
        @returns 

* Wed 24 Dec 2014 02:03:10 PM JST
Point
* Wed 24 Dec 2014 02:03:14 PM JST

* Wed 24 Dec 2014 02:03:14 PM JST

* Wed 24 Dec 2014 02:03:14 PM JST
        returns 

* Wed 24 Dec 2014 02:03:23 PM JST
function 
* Wed 24 Dec 2014 02:03:59 PM JST
XCoordinate
* Wed 24 Dec 2014 02:04:01 PM JST

* Wed 24 Dec 2014 02:04:01 PM JST

* Wed 24 Dec 2014 02:04:01 PM JST
        returns 

* Wed 24 Dec 2014 02:04:09 PM JST
None
* Wed 24 Dec 2014 02:04:19 PM JST
YCoordinate
* Wed 24 Dec 2014 02:04:21 PM JST

* Wed 24 Dec 2014 02:04:21 PM JST

* Wed 24 Dec 2014 02:04:21 PM JST
        returns 

* Wed 24 Dec 2014 02:04:28 PM JST
None
* Wed 24 Dec 2014 02:04:36 PM JST
function 
* Wed 24 Dec 2014 02:04:38 PM JST
function
* Wed 24 Dec 2014 02:04:43 PM JST
function 
* Wed 24 Dec 2014 02:05:06 PM JST
Width
* Wed 24 Dec 2014 02:05:55 PM JST

* Wed 24 Dec 2014 02:05:55 PM JST

* Wed 24 Dec 2014 02:05:55 PM JST
        returns 

* Wed 24 Dec 2014 02:06:03 PM JST
None
* Wed 24 Dec 2014 02:06:17 PM JST
Height
* Wed 24 Dec 2014 02:06:19 PM JST

* Wed 24 Dec 2014 02:06:19 PM JST

* Wed 24 Dec 2014 02:06:19 PM JST
        returns 

* Wed 24 Dec 2014 02:06:24 PM JST
function 
* Wed 24 Dec 2014 02:06:27 PM JST
function 
* Wed 24 Dec 2014 02:06:55 PM JST
function
* Wed 24 Dec 2014 02:07:04 PM JST
None
* Wed 24 Dec 2014 02:07:22 PM JST
bool
* Wed 24 Dec 2014 02:07:23 PM JST

* Wed 24 Dec 2014 02:07:23 PM JST

* Wed 24 Dec 2014 02:07:24 PM JST
        returns 

* Wed 24 Dec 2014 02:07:30 PM JST
function 
* Wed 24 Dec 2014 02:07:33 PM JST
function 
* Wed 24 Dec 2014 02:07:49 PM JST
function 
* Wed 24 Dec 2014 02:08:02 PM JST
int
* Wed 24 Dec 2014 02:08:10 PM JST
Rectangle
* Wed 24 Dec 2014 02:08:34 PM JST
function 
* Wed 24 Dec 2014 02:08:54 PM JST
function 
* Wed 24 Dec 2014 02:09:16 PM JST
function 
* Wed 24 Dec 2014 02:09:19 PM JST
function 
* Wed 24 Dec 2014 02:10:08 PM JST
XCoordinate
* Wed 24 Dec 2014 02:10:10 PM JST

* Wed 24 Dec 2014 02:10:10 PM JST

* Wed 24 Dec 2014 02:10:10 PM JST
        returns 

* Wed 24 Dec 2014 02:10:13 PM JST
function 
* Wed 24 Dec 2014 02:10:32 PM JST
None
* Wed 24 Dec 2014 02:10:44 PM JST
function 
* Wed 24 Dec 2014 02:10:49 PM JST
returns 
* Wed 24 Dec 2014 02:11:00 PM JST
None
* Wed 24 Dec 2014 02:11:03 PM JST

* Wed 24 Dec 2014 02:11:03 PM JST

* Wed 24 Dec 2014 02:11:03 PM JST
        x:

* Wed 24 Dec 2014 02:11:03 PM JST

* Wed 24 Dec 2014 02:11:03 PM JST

* Wed 24 Dec 2014 02:11:03 PM JST
        returns 

* Wed 24 Dec 2014 02:11:08 PM JST
function 
* Wed 24 Dec 2014 02:11:11 PM JST
function 
* Wed 24 Dec 2014 02:11:14 PM JST
returns 
* Wed 24 Dec 2014 02:11:15 PM JST
        returns 
* Wed 24 Dec 2014 02:11:25 PM JST
None
* Wed 24 Dec 2014 02:11:28 PM JST

* Wed 24 Dec 2014 02:11:28 PM JST

* Wed 24 Dec 2014 02:11:28 PM JST
        y:

* Wed 24 Dec 2014 02:11:28 PM JST

* Wed 24 Dec 2014 02:11:28 PM JST

* Wed 24 Dec 2014 02:11:28 PM JST
        returns 

* Wed 24 Dec 2014 02:11:36 PM JST
returns 
* Wed 24 Dec 2014 02:11:47 PM JST
None
* Wed 24 Dec 2014 02:11:57 PM JST
returns 
* Wed 24 Dec 2014 02:12:54 PM JST
returns 
* Wed 24 Dec 2014 02:13:09 PM JST
None
* Wed 24 Dec 2014 02:14:00 PM JST
Point
* Wed 24 Dec 2014 02:14:02 PM JST

* Wed 24 Dec 2014 02:14:02 PM JST

* Wed 24 Dec 2014 02:14:02 PM JST
        returns 

* Wed 24 Dec 2014 02:14:15 PM JST
None
* Wed 24 Dec 2014 03:14:08 PM JST
Rectangle
* Wed 24 Dec 2014 03:20:29 PM JST
__doc__
* Wed 24 Dec 2014 03:20:33 PM JST
print 
* Wed 24 Dec 2014 03:22:22 PM JST
Application
* Wed 24 Dec 2014 03:22:49 PM JST
NoApplicableMethods
* Wed 24 Dec 2014 03:24:01 PM JST

* Wed 24 Dec 2014 03:24:01 PM JST

* Wed 24 Dec 2014 03:24:01 PM JST
        @Error NoApplicableMethods:

* Wed 24 Dec 2014 03:24:35 PM JST
Error
* Wed 24 Dec 2014 03:24:37 PM JST
Error
* Wed 24 Dec 2014 03:25:02 PM JST
0)
* Wed 24 Dec 2014 03:25:03 PM JST
0
* Wed 24 Dec 2014 03:25:04 PM JST
0,0
* Wed 24 Dec 2014 03:25:04 PM JST
0,0,0
* Wed 24 Dec 2014 03:25:56 PM JST
Constract
* Wed 24 Dec 2014 03:26:00 PM JST
new
* Wed 24 Dec 2014 03:29:48 PM JST
raise
* Wed 24 Dec 2014 03:30:38 PM JST
http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/awt/Rectangle.java#Rectangle
* Wed 24 Dec 2014 03:31:13 PM JST
http://qt-project.org/doc/qt-4.8/qrect.html
* Wed 24 Dec 2014 03:33:15 PM JST
# TODO: (Atami) [2014/12/24]
# write document
# ref. http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/awt/Rectangle.java#Rectangle
# http://qt-project.org/doc/qt-4.8/qrect.html

* Wed 24 Dec 2014 03:39:27 PM JST
/usr/share/pyshared/Xlib/xobject/
* Wed 24 Dec 2014 03:48:17 PM JST

* Wed 24 Dec 2014 04:02:33 PM JST
wxWindowBase
* Wed 24 Dec 2014 04:03:34 PM JST
wxWindowMSW
* Wed 24 Dec 2014 04:05:56 PM JST
wxWindowBase
* Wed 24 Dec 2014 04:26:03 PM JST
wx.GetTopLevelWindows()
* Wed 24 Dec 2014 04:28:57 PM JST
wx.GetApp().GetTopWindow() 
* Wed 24 Dec 2014 04:36:52 PM JST
utils.h
* Wed 24 Dec 2014 04:42:22 PM JST
connect()
* Wed 24 Dec 2014 04:44:17 PM JST
core
* Wed 24 Dec 2014 04:46:13 PM JST
get_wm_name()
* Wed 24 Dec 2014 09:56:34 PM JST
HWND
* Wed 24 Dec 2014 09:59:35 PM JST
past
* Wed 24 Dec 2014 09:59:40 PM JST
hello
* Wed 24 Dec 2014 10:04:08 PM JST
clipboard.paste()
* Thu 25 Dec 2014 05:49:45 AM JST
clipboard_get
* Thu 25 Dec 2014 05:49:59 AM JST
hello
* Thu 25 Dec 2014 09:24:28 AM JST
NoSymbol
* Thu 25 Dec 2014 03:30:53 PM JST
title
* Thu 25 Dec 2014 03:31:04 PM JST
wm_class
* Thu 25 Dec 2014 03:35:11 PM JST
pid
* Thu 25 Dec 2014 03:35:13 PM JST
森村はずき
* Thu 25 Dec 2014 03:36:16 PM JST
cc.root.client_list().to_types()[-1]
* Thu 25 Dec 2014 04:26:03 PM JST

* Thu 25 Dec 2014 04:26:04 PM JST

* Thu 25 Dec 2014 04:26:04 PM JST
# binding: "keybinding"

* Thu 25 Dec 2014 04:26:04 PM JST
# binding: "keybinding"

* Thu 25 Dec 2014 04:26:04 PM JST
# binding: "keybinding"
# expand-env: ((some-var some-value))

* Thu 25 Dec 2014 04:26:20 PM JST
# condition: (and (not (py:at-string|comment-p)) (not (py:in-square-p)))
* Thu 25 Dec 2014 04:26:39 PM JST
`(progn (end-of-line) (skip-chars-backward " \t") (unless (eq (char-before) 58) (insert ":")))`
* Thu 25 Dec 2014 04:26:57 PM JST

* Thu 25 Dec 2014 04:26:58 PM JST

* Thu 25 Dec 2014 04:26:58 PM JST
except :
* Thu 25 Dec 2014 09:48:06 PM JST
stack, 
* Thu 25 Dec 2014 10:14:31 PM JST
https://sites.google.com/site/autohotkeyjp/reference/commands/index_mouse
* Thu 25 Dec 2014 10:15:13 PM JST
SetMouseDelay
* Thu 25 Dec 2014 10:15:28 PM JST
MouseGetPos
* Thu 25 Dec 2014 10:15:31 PM JST
Mouse
* Thu 25 Dec 2014 10:15:37 PM JST
Move
* Thu 25 Dec 2014 10:15:45 PM JST
ClickDrag
* Thu 25 Dec 2014 10:15:54 PM JST
Click
* Thu 25 Dec 2014 10:19:13 PM JST
キーボードやマウス、ジ |
  * 変更履歴                  | KeyWait              | ョイスティックのボタン |
  * ファイル置き場            |                      | が押される/離されるま  |
  * このサイトについて        |                      | で待機
* Thu 25 Dec 2014 10:30:43 PM JST
キー入力の記憶バッファ
* Thu 25 Dec 2014 10:30:50 PM JST

* Thu 25 Dec 2014 10:30:50 PM JST

* Thu 25 Dec 2014 10:30:50 PM JST
  キー入力の記憶バッファ

* Thu 25 Dec 2014 10:32:16 PM JST
                                BackSpaceによる打ち直し                        
                                                                               
                                ホットストリングの監視は、BackSpaceによる修正を
                                考慮する。                                     
                                例えば、 br{BackSpace}twは btwにマッチする。   
                                他の非文字キーは無視され、監視内容はリセットさ 
                                れる。                                         
                                                                               
                                マウスクリックが行われた場合も、監視内容はリセ 
                                ットされる。                                   

* Thu 25 Dec 2014 10:32:38 PM JST
    
* Thu 25 Dec 2014 10:32:40 PM JST

* Thu 25 Dec 2014 10:32:40 PM JST

* Thu 25 Dec 2014 10:32:40 PM JST
  ホットストリングの監視は、BackSpaceによる修正を考慮する。                                     

* Thu 25 Dec 2014 10:32:51 PM JST
  
* Thu 25 Dec 2014 10:32:53 PM JST
  
* Thu 25 Dec 2014 10:33:00 PM JST
  
* Thu 25 Dec 2014 10:33:30 PM JST
                                テキスト入力欄以外での動作                     
                                                                               
                                ホットストリングはテキストが入力できない場所で 
                                もまったく同様に動作する。                     
                                自動入力されるキーによって予期せぬ動作になる場 
                                合もあるので注意が必要。                       

* Thu 25 Dec 2014 10:33:52 PM JST
  
* Thu 25 Dec 2014 10:33:55 PM JST
  
* Thu 25 Dec 2014 10:34:56 PM JST
                文字数の上限                                   
                                                                               
                                ホットストリングとして使える文字数の上限は40文 
                                字。                                           
                                置換後の文字列は1行の長さの上限である16,383まで
                                可能。
* Thu 25 Dec 2014 10:35:11 PM JST
  
* Thu 25 Dec 2014 10:35:15 PM JST
  
* Fri 26 Dec 2014 07:33:37 AM JST
hello.
* Fri 26 Dec 2014 07:37:52 AM JST
hello
* Fri 26 Dec 2014 07:38:16 AM JST
t=Tes('a')
* Fri 26 Dec 2014 08:09:25 AM JST
特定のキーが押されたときに任意の処理を行わせることが出来る。
* Fri 26 Dec 2014 08:09:38 AM JST
キーの組み合わせにも割り当てられる。
* Fri 26 Dec 2014 08:21:43 AM JST
key
* Fri 26 Dec 2014 08:23:13 AM JST
特定のキーが押されたときに任意の処理を行わせることが出来る。
* Fri 26 Dec 2014 08:46:20 AM JST
  特定のキーが押されたときに任意の処理を行わせることが出来る。
    "Ctrl + c" などのキーの組み合わせにも割り当てられる。

  - Remap

* Fri 26 Dec 2014 09:30:48 AM JST
キーが押されたときに別のキーを押したのと同じ動作にする
* Fri 26 Dec 2014 09:31:36 AM JST
操作自動化機能
* Fri 26 Dec 2014 09:31:53 AM JST
キーボードやマウスの操作を自動で行ったり、ウィンドウの状態を変化させたりする
* Fri 26 Dec 2014 09:32:26 AM JST
Sendコマンドでキーボード操作を発生させることが出来る。
一連のキー入力をまとめて送信したり、キーを押し下げたままにしたりすることも可能。
* Fri 26 Dec 2014 09:38:32 AM JST
ウィンドウ、コントロールの操作
* Fri 26 Dec 2014 09:38:44 AM JST
キーボード・マウスの操作
* Fri 26 Dec 2014 10:52:16 AM JST
Parse
* Fri 26 Dec 2014 11:18:23 AM JST
KeyEvent
* Fri 26 Dec 2014 05:27:35 PM JST
      SendKey, 振舞: Key, modifier を送信する。
          set_modifiers:
          set_key:
              int: by keycode
              str: key

* Fri 26 Dec 2014 05:29:07 PM JST
* Sendkey
  任意の key を送信する。
  set keydelay
  Sendkeyコマンドでキーボード操作を発生させることが出来る。
  一連のキー入力をまとめて送信したり、
  キーを押し下げたままにしたりすることも可能。

  キーボードやマウス、ジョイスティックのボタンが押される/離されるまで待機

  - Commons 共痛点
      SendKeys, 振舞: SendKey を送信する。
          delay: key ごとのインターバルタイム。
      Parseline string line を分析する。

  - Difference
      SendKey, 振舞: Key, modifier を送信する。
          set_modifiers:
          set_key:
              int: by keycode
              str: key
      Key

  SendKey
    XSendKey, WinSendKey, MacSendKey
    set_modifiers
    send

  SendKeys : list
    set_delay
    send

  ParseSendKey
      ParseBrace
          ParseClickOption
          ParseKeyOption
          ParseUnicodeOption


  class Mouse
        SetMouseDelay
        GetPos
        Move
        ClickDrag
        Click


* Fri 26 Dec 2014 05:50:19 PM JST
set_
* Fri 26 Dec 2014 05:51:25 PM JST
set_down
* Fri 26 Dec 2014 05:51:26 PM JST
set_up,
* Fri 26 Dec 2014 05:58:37 PM JST
Orientation
* Fri 26 Dec 2014 05:58:50 PM JST
Orientation
* Fri 26 Dec 2014 05:59:17 PM JST
Orientation
* Fri 26 Dec 2014 06:06:10 PM JST
(defun py:% (n) ;[2014/05/14]
  "Wrap smart-operator-%.
N"
  (interactive "p")
  (cond (buffer-read-only (my-forward-seq))
        ((py:at-string|comment-p) (self-insert-command n))
        (t (smart-operator-%)))
  )
* Fri 26 Dec 2014 06:07:40 PM JST
(defun py:& (n) ;[2014/05/14]
  "Wrap smart-operator-%.
N"
  (interactive "p")
  (cond (buffer-read-only (my-forward-seq))
        ((py:at-string|comment-p) (self-insert-command n))
        (t (smart-operator-&)))
  )
* Fri 26 Dec 2014 06:08:26 PM JST
(defun py:? (n) ;[2014/05/14]
  "Wrap smart-operator-%.
N"
  (interactive "p")
  (cond (buffer-read-only (my-forward-seq))
        ((py:at-string|comment-p) (self-insert-command n))
        (t (smart-operator-?)))
  )
* Fri 26 Dec 2014 06:09:13 PM JST
\,
* Fri 26 Dec 2014 06:10:02 PM JST
(defun py:\, (n) ;[2014/05/14]
  "Wrap smart-operator-%.
N"
  (interactive "p")
  (cond (buffer-read-only (my-forward-seq))
        ((py:at-string|comment-p) (self-insert-command n))
        (t (smart-operator-\,)))
  )
* Fri 26 Dec 2014 06:11:35 PM JST
py:\,
* Fri 26 Dec 2014 06:12:09 PM JST
py:?
* Fri 26 Dec 2014 06:12:19 PM JST
`py:?'
* Fri 26 Dec 2014 06:12:29 PM JST
py:|
* Fri 26 Dec 2014 06:12:48 PM JST
Wrap smart-operator and Do `self-insert-command' if at string or comment.
* Fri 26 Dec 2014 06:13:53 PM JST
    
* Fri 26 Dec 2014 06:14:04 PM JST
    
* Fri 26 Dec 2014 06:14:10 PM JST
    
* Fri 26 Dec 2014 06:14:26 PM JST
py:|
* Fri 26 Dec 2014 06:14:41 PM JST
    
* Fri 26 Dec 2014 06:14:57 PM JST
;must bind in smart-operator_plugin_start.el
* Fri 26 Dec 2014 06:15:12 PM JST
; "
* Fri 26 Dec 2014 06:15:16 PM JST
   ; "
* Fri 26 Dec 2014 06:15:24 PM JST
must bind in smart-operator_plugin_start.el
* Fri 26 Dec 2014 06:15:25 PM JST
must bind in smart-operator_plugin_start.el
* Fri 26 Dec 2014 06:15:27 PM JST
must bind in smart-operator_plugin_start.el
* Fri 26 Dec 2014 06:15:29 PM JST
 "
* Fri 26 Dec 2014 06:15:33 PM JST
; "
* Fri 26 Dec 2014 06:22:31 PM JST
  
* Fri 26 Dec 2014 06:22:42 PM JST
  
* Fri 26 Dec 2014 06:22:51 PM JST
  
* Fri 26 Dec 2014 06:22:56 PM JST
  
* Fri 26 Dec 2014 06:24:07 PM JST
define-key smart-operator-mode-map
* Fri 26 Dec 2014 06:26:05 PM JST

* Fri 26 Dec 2014 06:26:05 PM JST

* Fri 26 Dec 2014 06:26:06 PM JST
        hello = 

* Fri 26 Dec 2014 06:26:11 PM JST

* Fri 26 Dec 2014 06:26:11 PM JST

* Fri 26 Dec 2014 06:26:11 PM JST
        hello 

* Sat 27 Dec 2014 12:19:07 AM JST
Send
* Sat 27 Dec 2014 12:40:49 AM JST
    Key
        Keycode
        Modifier


* Sat 27 Dec 2014 12:42:36 AM JST
    def send(value=KeyBehave.both)
        if value & KeyBehave.down != 0:
            down()
        if value & KeyBehave.up != 0:
            up()

* Sat 27 Dec 2014 12:42:43 AM JST
    def send(value=KeyBehave.both)
        if value & KeyBehave.down != 0:
            down()
        if value & KeyBehave.up != 0:
            up()

* Sat 27 Dec 2014 12:42:53 AM JST
        def send(value=KeyBehave.both)
            if value & KeyBehave.down != 0:
                down()
            if value & KeyBehave.up != 0:
                up()


* Sat 27 Dec 2014 12:42:59 AM JST
both
* Sat 27 Dec 2014 12:42:59 AM JST
KeyBehave.both
* Sat 27 Dec 2014 12:43:00 AM JST
value=KeyBehave.both
* Sat 27 Dec 2014 12:43:03 AM JST
value
* Sat 27 Dec 2014 12:55:21 AM JST
    KeyBehave(Enum):
        up=4
        down=8
        both= up|down


* Sat 27 Dec 2014 12:56:15 AM JST

* Sat 27 Dec 2014 12:56:15 AM JST

* Sat 27 Dec 2014 12:56:15 AM JST
    Behave

* Sat 27 Dec 2014 08:34:30 AM JST
to01()
* Sat 27 Dec 2014 08:34:39 AM JST
tostring()
* Sat 27 Dec 2014 08:34:47 AM JST
tobytes()
* Sat 27 Dec 2014 08:35:02 AM JST
pack()
* Sat 27 Dec 2014 08:35:04 AM JST
0001'
* Sat 27 Dec 2014 08:35:29 AM JST
bitarray.bitarray(2
* Sat 27 Dec 2014 09:43:50 AM JST
down
* Sat 27 Dec 2014 09:43:56 AM JST
up
* Sat 27 Dec 2014 09:52:57 AM JST

* Sat 27 Dec 2014 09:52:57 AM JST

* Sat 27 Dec 2014 09:52:57 AM JST
    send

* Sat 27 Dec 2014 09:53:02 AM JST
XSendKey, WinSendKey, MacSendKey
* Sat 27 Dec 2014 09:53:17 AM JST

* Sat 27 Dec 2014 09:53:17 AM JST

* Sat 27 Dec 2014 09:53:17 AM JST
    XSendKey, WinSendKey, MacSendKey

* Sat 27 Dec 2014 09:53:25 AM JST
set_modifiers
* Sat 27 Dec 2014 09:53:42 AM JST

* Sat 27 Dec 2014 09:53:43 AM JST

* Sat 27 Dec 2014 09:53:43 AM JST
    set_modifiers

* Sat 27 Dec 2014 09:55:56 AM JST
set_modifiers, 
* Sat 27 Dec 2014 09:56:12 AM JST
set_behave
* Sat 27 Dec 2014 09:56:39 AM JST
set_behave: 
* Sat 27 Dec 2014 09:56:57 AM JST
, Enum(down, up)
* Sat 27 Dec 2014 09:59:56 AM JST
set_key
* Sat 27 Dec 2014 10:00:06 AM JST

* Sat 27 Dec 2014 10:00:06 AM JST

* Sat 27 Dec 2014 10:00:06 AM JST
  SendKey

* Sat 27 Dec 2014 10:00:09 AM JST

* Sat 27 Dec 2014 10:00:10 AM JST

* Sat 27 Dec 2014 10:00:10 AM JST
      Key

* Sat 27 Dec 2014 03:56:03 PM JST
.emacs.d/data_e/snippets/python-mode:
* Sat 27 Dec 2014 03:56:08 PM JST
work/
* Sat 27 Dec 2014 06:13:43 PM JST
backup_ni_remote.py --restore
* Sat 27 Dec 2014 11:51:45 PM JST
_keymap_codes
* Sat 27 Dec 2014 11:59:36 PM JST
maxkeycode - minkeycode + 1
* Sat 27 Dec 2014 11:59:42 PM JST

* Sat 27 Dec 2014 11:59:42 PM JST

* Sat 27 Dec 2014 11:59:42 PM JST
            count = 

* Sun 28 Dec 2014 12:00:12 AM JST
            
* Sun 28 Dec 2014 11:50:26 AM JST
_dict =
* Sun 28 Dec 2014 11:50:26 AM JST
self._dict =
* Sun 28 Dec 2014 11:51:14 AM JST
class CodeToSyms:
    """Class CodeToSyms
    """
    # Attributes:
    symslen = None  # (int) 
    __dict = None  # (dict) 
    
    # Operations
    def from_display(self, display_name = ':0.0', mincode = None, maxcode = None):
        """function from_display
        
        display_name: str
        mincode: int
        maxcode: int
        
        returns CodeToSyms
        """
        return None # should raise NotImplementedError()
    
    def set(self, code, syms):
        """function set
        
        code: int
        syms: list
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_syms(self, syms, mincode):
        """function set_syms
        
        syms: list
        mincode: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def code_to_syms(self):
        """function code_to_syms
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def code_to_sym(self, code, modifier):
        """function code_to_sym
        
        code: int
        modifier: int
        
        returns Keysym
        """
        return None # should raise NotImplementedError()
    
    def clear(self):
        """function clear
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def copy(self):
        """function copy
        
        returns CodeToSyms
        """
        return None # should raise NotImplementedError()
    
    def update(self, dict):
        """function update
        
        dict: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def codes(self):
        """function codes
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def listsyms(self):
        """function listsyms
        
        returns lsit
        """
        return None # should raise NotImplementedError()
    
    def itercodes(self):
        """function itercodes
        
        returns generator
        """
        return None # should raise NotImplementedError()
    
    def itersyms(self):
        """function itersyms
        
        returns generator
        """
        return None # should raise NotImplementedError()
    
    def items(self):
        """function items
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def iteritems(self):
        """function iteritems
        
        returns generator
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, code, syms):
        """function __setitem__
        
        code: int
        syms: list
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, code):
        """function __getitem__
        
        code: int
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def __delitem__(self, code):
        """function __delitem__
        
        code: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __len__(self):
        """function __len__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __cmp__(self, other):
        """function __cmp__
        
        other: 
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __hash__(self):
        """function __hash__
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __contains__(self, code):
        """function __contains__
        
        code: int
        
        returns bool
        """
        return None # should raise NotImplementedError()
    


* Sun 28 Dec 2014 11:51:59 AM JST
None  # (int) 
* Sun 28 Dec 2014 11:52:05 AM JST
symlen
* Sun 28 Dec 2014 11:52:18 AM JST
None  # (dict) 
* Sun 28 Dec 2014 11:59:55 AM JST
value
* Sun 28 Dec 2014 12:01:12 PM JST
value
* Sun 28 Dec 2014 12:01:18 PM JST
    def __repr__(self):
        return '{0.__class__.__name__}({0._value})'.format(self)

* Sun 28 Dec 2014 12:02:03 PM JST

* Sun 28 Dec 2014 12:02:25 PM JST
code
* Sun 28 Dec 2014 12:02:59 PM JST
return None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:03:19 PM JST
self[Keycode(code)] = [Keysym(x) for x in syms]
* Sun 28 Dec 2014 12:03:50 PM JST
[Keysym(x) for x in syms]
* Sun 28 Dec 2014 12:04:58 PM JST
zip(*[iter(rep.keysyms)] * rep.keysyms_per_keycode)
* Sun 28 Dec 2014 12:05:09 PM JST
key
* Sun 28 Dec 2014 12:05:09 PM JST
rep.key
* Sun 28 Dec 2014 12:06:31 PM JST
zip(*[iter(syms)] * self.symslen)
* Sun 28 Dec 2014 12:07:29 PM JST
zip(*[iter(syms)] * self.symslen
* Sun 28 Dec 2014 12:09:16 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:09:32 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:10:23 PM JST

* Sun 28 Dec 2014 12:10:23 PM JST

* Sun 28 Dec 2014 12:10:23 PM JST
        if :

* Sun 28 Dec 2014 12:10:25 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:10:50 PM JST
return None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:11:42 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:11:47 PM JST
codes
* Sun 28 Dec 2014 12:11:51 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:11:59 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:12:08 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:12:26 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:12:34 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:12:48 PM JST
return None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:12:49 PM JST
self.
* Sun 28 Dec 2014 12:12:58 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:13:18 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:14:33 PM JST
pformat(dict(self))
* Sun 28 Dec 2014 12:14:43 PM JST
impor
* Sun 28 Dec 2014 12:15:20 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:15:42 PM JST
# Avoid Py3k warning
* Sun 28 Dec 2014 12:15:54 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:16:15 PM JST
self
* Sun 28 Dec 2014 12:17:13 PM JST
xcb
* Sun 28 Dec 2014 12:17:14 PM JST
xcb
* Sun 28 Dec 2014 12:17:15 PM JST
from  import 
* Sun 28 Dec 2014 12:18:38 PM JST
con
* Sun 28 Dec 2014 12:18:40 PM JST

* Sun 28 Dec 2014 12:18:40 PM JST

* Sun 28 Dec 2014 12:18:40 PM JST
        setup = con.get_setup()

* Sun 28 Dec 2014 12:19:44 PM JST
maxcode or setup.max_keycode
* Sun 28 Dec 2014 12:19:46 PM JST

* Sun 28 Dec 2014 12:19:46 PM JST

* Sun 28 Dec 2014 12:19:46 PM JST
        max_ = maxcode or setup.max_keycode

* Sun 28 Dec 2014 12:20:57 PM JST
connection
* Sun 28 Dec 2014 12:20:58 PM JST
self.connection
* Sun 28 Dec 2014 12:22:43 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 12:23:45 PM JST
CodeToSyms
* Sun 28 Dec 2014 02:00:48 PM JST

* Sun 28 Dec 2014 02:00:48 PM JST

* Sun 28 Dec 2014 02:00:48 PM JST
        self.symslen = int(symlen)

* Sun 28 Dec 2014 02:00:51 PM JST
symlen
* Sun 28 Dec 2014 02:01:07 PM JST
rep.keysyms_per_keycode
* Sun 28 Dec 2014 02:01:29 PM JST
zip(*[iter(syms)] * self.symslen)
* Sun 28 Dec 2014 02:01:36 PM JST
symslen
* Sun 28 Dec 2014 02:01:37 PM JST
self.symslen
* Sun 28 Dec 2014 02:01:38 PM JST
rep.keysyms_per_keycode
* Sun 28 Dec 2014 02:03:04 PM JST
zip(*[iter(rep.keysyms)] * rep.keysyms_per_keycode)
* Sun 28 Dec 2014 02:03:09 PM JST
zip(*[iter(rep.keysyms)] * rep.keysyms_per_keycode)
* Sun 28 Dec 2014 02:11:44 PM JST
from sendkeys2.xsendkey.codetosyms import CodeToSyms
CodeToSyms.from_display()
code=CodeToSyms.from_display()

* Sun 28 Dec 2014 02:11:50 PM JST

* Sun 28 Dec 2014 02:11:50 PM JST

* Sun 28 Dec 2014 02:11:51 PM JST
CodeToSyms.from_display()

* Sun 28 Dec 2014 02:11:52 PM JST
from sendkeys2.xsendkey.codetosyms import CodeToSyms
code=CodeToSyms.from_display()

* Sun 28 Dec 2014 02:13:06 PM JST
code=CodeToSyms.from_display()
* Sun 28 Dec 2014 02:14:21 PM JST
from_display()
* Sun 28 Dec 2014 02:15:17 PM JST
None
* Sun 28 Dec 2014 02:15:55 PM JST
syms
* Sun 28 Dec 2014 02:16:11 PM JST
from sendkeys2.xsendkey.codetosyms import CodeToSyms
code=CodeToSyms.from_display()

* Sun 28 Dec 2014 02:16:44 PM JST
CodeToSyms.from_display()
* Sun 28 Dec 2014 02:17:29 PM JST
_value
* Sun 28 Dec 2014 02:18:16 PM JST
from sendkeys2.xsendkey.codetosyms import CodeToSyms
code=CodeToSyms.from_display()

* Sun 28 Dec 2014 02:18:39 PM JST

* Sun 28 Dec 2014 02:18:40 PM JST

* Sun 28 Dec 2014 02:18:40 PM JST
            print('DEBUG-1-codetosyms.py')

* Sun 28 Dec 2014 02:18:44 PM JST
syms or []
* Sun 28 Dec 2014 02:18:46 PM JST

* Sun 28 Dec 2014 02:18:46 PM JST

* Sun 28 Dec 2014 02:18:46 PM JST
            keysyms = syms or []

* Sun 28 Dec 2014 02:24:48 PM JST
1
* Sun 28 Dec 2014 02:24:49 PM JST
base=1
* Sun 28 Dec 2014 02:24:49 PM JST
x, base=1
* Sun 28 Dec 2014 02:24:54 PM JST
self._value == other
* Sun 28 Dec 2014 03:22:37 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 03:25:22 PM JST
_dict
* Sun 28 Dec 2014 03:25:24 PM JST
self._dict
* Sun 28 Dec 2014 03:26:04 PM JST
_dict
* Sun 28 Dec 2014 03:26:04 PM JST
self._dict
* Sun 28 Dec 2014 03:26:10 PM JST
pass
* Sun 28 Dec 2014 03:34:09 PM JST

* Sun 28 Dec 2014 03:34:09 PM JST

* Sun 28 Dec 2014 03:34:10 PM JST
        return None # should raise NotImplementedError()

* Sun 28 Dec 2014 03:35:41 PM JST
from sendkeys2.xsendkey.codetosyms import CodeToSyms
code=CodeToSyms.from_display()

* Sun 28 Dec 2014 03:37:32 PM JST
None # should raise NotImplementedError()
* Sun 28 Dec 2014 03:52:49 PM JST
set_defau
* Sun 28 Dec 2014 03:53:41 PM JST
from sendkeys2.xsendkey.codetosyms import CodeToSyms
code=CodeToSyms.from_display()

* Sun 28 Dec 2014 03:54:26 PM JST
self.
* Sun 28 Dec 2014 03:54:27 PM JST
itn(self.
* Sun 28 Dec 2014 03:54:30 PM JST
slf.
* Sun 28 Dec 2014 03:54:36 PM JST
    def __int__(self):
        return int(self._value)

* Sun 28 Dec 2014 03:55:01 PM JST
from sendkeys2.xsendkey.codetosyms import CodeToSyms
code=CodeToSyms.from_display()

* Sun 28 Dec 2014 03:56:49 PM JST
import warning
* Sun 28 Dec 2014 03:57:12 PM JST
import warning
* Sun 28 Dec 2014 04:00:46 PM JST
from sendkeys2.xsendkey.codetosyms import CodeToSyms
code=CodeToSyms.from_display()

* Sun 28 Dec 2014 04:04:56 PM JST
        i, j = max(i, 0), max(j, 0)
        if j < i:
            i, j = j, i

* Sun 28 Dec 2014 04:07:02 PM JST
self
* Sun 28 Dec 2014 04:08:14 PM JST
from sendkeys2.xsendkey.codetosyms import CodeToSyms
code=CodeToSyms.from_display()

* Sun 28 Dec 2014 04:09:19 PM JST
zip(*[iter(rep.keysyms)] * rep.keysyms_per_keycode)
* Sun 28 Dec 2014 04:09:22 PM JST

* Sun 28 Dec 2014 04:09:23 PM JST

* Sun 28 Dec 2014 04:09:23 PM JST
        symzipped = 

* Sun 28 Dec 2014 04:15:12 PM JST
buffer
* Sun 28 Dec 2014 04:15:13 PM JST
get-buffer
* Sun 28 Dec 2014 04:15:20 PM JST
rege
* Sun 28 Dec 2014 04:16:12 PM JST
ELSE
* Sun 28 Dec 2014 04:16:13 PM JST
(get-buffer "*IPython*")
* Sun 28 Dec 2014 04:16:19 PM JST
me)
* Sun 28 Dec 2014 04:17:49 PM JST
(e2wm:dp-pycode-navi-sub-ipython)
* Sun 28 Dec 2014 04:18:59 PM JST
e2wm:dp-pycode-navi-sub-ipython
* Sun 28 Dec 2014 04:20:55 PM JST
      
* Sun 28 Dec 2014 04:21:19 PM JST
  
* Sun 28 Dec 2014 04:21:21 PM JST
    
* Sun 28 Dec 2014 04:21:31 PM JST
e2wm:dp-pycode-navi-relaunch-sub-ipython
* Sun 28 Dec 2014 04:22:44 PM JST
 
* Sun 28 Dec 2014 04:29:35 PM JST
(kill-buffer-query-functions)
* Sun 28 Dec 2014 04:30:56 PM JST
kill-matching-buffers
* Sun 28 Dec 2014 04:36:41 PM JST
e2wm:dp-pycode-navi-relaunch-sub-ipython
* Sun 28 Dec 2014 04:42:30 PM JST
        i, j = max(i, 0), max(j, 0)
        if j < i:
            i, j = j, i

* Sun 28 Dec 2014 04:42:48 PM JST
        for code, syms in zip(xrange(i, j + 1), seq):
            self[code] = syms

* Sun 28 Dec 2014 04:43:01 PM JST
        for code in xrange(i, j + 1):
            try:
                new.setdefault(code, self[code])
            except KeyError as _err:
                warnings.warn(str(_err))
        return new

* Sun 28 Dec 2014 04:43:07 PM JST

* Sun 28 Dec 2014 04:43:07 PM JST

* Sun 28 Dec 2014 04:43:07 PM JST
        return new

* Sun 28 Dec 2014 04:43:16 PM JST
code, 
* Sun 28 Dec 2014 04:43:17 PM JST
setdefault(code, 
* Sun 28 Dec 2014 04:43:18 PM JST
new.setdefault(code, 
* Sun 28 Dec 2014 04:56:16 PM JST
keycode_to_keysym
* Sun 28 Dec 2014 04:59:56 PM JST

* Sun 28 Dec 2014 04:59:56 PM JST

* Sun 28 Dec 2014 04:59:56 PM JST
        if :

* Sun 28 Dec 2014 04:59:59 PM JST
        if self.state.isshift():
            index += 1
        if self.state.isalt():
            index += 2

* Sun 28 Dec 2014 05:25:40 PM JST
NamedModifierMask
* Sun 28 Dec 2014 05:25:53 PM JST
from xcb3.xproto import NamedModifierMask
* Sun 28 Dec 2014 05:26:33 PM JST
NamedModifierMask
* Sun 28 Dec 2014 05:26:43 PM JST
from xcb3.xproto import NamedModifierMask
* Sun 28 Dec 2014 05:29:32 PM JST
(NamedModifierMask.Shift & modifiers) != 0:
* Sun 28 Dec 2014 05:29:35 PM JST
Shift
* Sun 28 Dec 2014 05:31:28 PM JST
modifiers
* Sun 28 Dec 2014 05:32:55 PM JST
from sendkeys2.xsendkey.codetosyms import CodeToSyms
code=CodeToSyms.from_display()

* Sun 28 Dec 2014 05:49:26 PM JST
def __getitem__(self, ${1:key}):
    return $0
* Sun 28 Dec 2014 05:50:04 PM JST
# expand-env: ((yas/indent-line 'fixed) (yas/wrap-around-region 'nil))
* Sun 28 Dec 2014 05:50:08 PM JST
# condition: (not (py:at-string|comment-p))
# expand-env: ((yas/indent-line 'fixed) (yas/wrap-around-region 'nil))

* Sun 28 Dec 2014 05:52:01 PM JST
# condition: (not (py:at-string|comment-p))
# expand-env: ((yas/indent-line 'fixed) (yas/wrap-around-region 'nil))

* Sun 28 Dec 2014 05:52:07 PM JST
def __getslice__(self, ${1:${10:i}, ${20:j}}):
    return $0
* Sun 28 Dec 2014 05:56:48 PM JST
_dict
* Sun 28 Dec 2014 10:26:27 PM JST
int
* Sun 28 Dec 2014 10:26:31 PM JST
list
* Sun 28 Dec 2014 10:28:25 PM JST
codeto
* Sun 28 Dec 2014 10:30:17 PM JST
obj = 
* Sun 28 Dec 2014 10:39:16 PM JST
self.
* Sun 28 Dec 2014 10:39:25 PM JST
[0, 0, 0, 0, 0, 0, 0]
* Sun 28 Dec 2014 10:39:48 PM JST
ins
* Sun 28 Dec 2014 10:39:49 PM JST
self
* Sun 28 Dec 2014 10:40:42 PM JST
self.assertEqual(syms, self.inst[code])
* Sun 28 Dec 2014 10:44:07 PM JST
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]

* Sun 28 Dec 2014 10:44:12 PM JST
self.inst.set(code, syms)
* Sun 28 Dec 2014 10:44:18 PM JST
self.assertEqual(syms, self.inst[code])
* Sun 28 Dec 2014 10:44:23 PM JST
code]
* Sun 28 Dec 2014 10:46:13 PM JST
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code, syms)

* Sun 28 Dec 2014 10:47:05 PM JST
        
* Sun 28 Dec 2014 10:47:34 PM JST
from xcb2.xproto import NamedModifierMask
* Sun 28 Dec 2014 10:47:42 PM JST
NamedModifierMask
* Sun 28 Dec 2014 10:48:07 PM JST
        self.assertEqual(2, self.inst.code_to_sym(
            1, modifiers=NamedModifierMask.Shift))

* Sun 28 Dec 2014 10:48:29 PM JST
Shift
* Sun 28 Dec 2014 10:48:36 PM JST
        self.assertEqual(3, self.inst.code_to_sym(
            1, modifiers=NamedModifierMask.Alt))

* Sun 28 Dec 2014 10:48:47 PM JST
from xcb2.xproto import NamedModifierMask
* Sun 28 Dec 2014 10:49:02 PM JST
NamedModifierMask
* Sun 28 Dec 2014 10:49:29 PM JST
        self.assertEqual(3, self.inst.code_to_sym(
            1, modifiers=NamedModifierMask.Alt))

* Sun 28 Dec 2014 10:49:53 PM JST
NamedModifierMask.Shift
* Sun 28 Dec 2014 10:51:35 PM JST
smart-operator-self-insert-command
* Sun 28 Dec 2014 10:54:19 PM JST
        code = 1
        syms = [1, 2, 3, 4, 0, 0, 0]
        self.inst.set(code, syms)

* Sun 28 Dec 2014 10:54:58 PM JST
self.inst
* Sun 28 Dec 2014 10:56:17 PM JST
ains
* Sun 28 Dec 2014 10:56:32 PM JST
self.assertFalse(bool(self.inst))
* Sun 28 Dec 2014 10:57:55 PM JST
        code = 1
        syms = [1, 2, 3, 4, 0, 0, 0]
        self.inst.set(code, syms)

* Sun 28 Dec 2014 10:58:20 PM JST
insti
* Sun 28 Dec 2014 11:02:50 PM JST
        code = 1
        syms = [1, 2, 3, 4, 0, 0, 0]
        self.inst.set(code, syms)

* Sun 28 Dec 2014 11:03:09 PM JST
codetosyms.CodeToSyms()
* Sun 28 Dec 2014 11:04:08 PM JST
self.
* Sun 28 Dec 2014 11:04:57 PM JST
codetosyms.CodeToSyms()
* Sun 28 Dec 2014 11:05:16 PM JST
self.
* Sun 28 Dec 2014 11:05:23 PM JST
inst
* Sun 28 Dec 2014 11:06:10 PM JST
self.skipTest()
* Sun 28 Dec 2014 11:06:16 PM JST
        code = 1
        syms = [1, 2, 3, 4, 0, 0, 0]
        self.inst.set(code, syms)

* Sun 28 Dec 2014 11:06:24 PM JST
        
* Sun 28 Dec 2014 11:06:25 PM JST
code
* Sun 28 Dec 2014 11:06:28 PM JST
        
* Sun 28 Dec 2014 11:07:23 PM JST
        code = 1
        syms = [1, 2, 3, 4, 0, 0, 0]
        self.inst.set(code, syms)

* Sun 28 Dec 2014 11:07:37 PM JST
        
* Sun 28 Dec 2014 11:08:30 PM JST
        code = 1
        syms = [1, 2, 3, 4, 0, 0, 0]
        self.inst.set(code, syms)
        self.inst.set(2, syms)
        self.inst.set(3, syms)
        self.assertListEqual([1, 2, 3], self.inst.codes())

* Sun 28 Dec 2014 11:08:36 PM JST
self.inst.codes()
* Sun 28 Dec 2014 11:09:00 PM JST
    def test_listsyms(self, ):
        code = 1
        syms = [1, 2, 3, 4, 0, 0, 0]
        self.inst.set(code, syms)
        self.inst.set(2, syms)
        self.assertListEqual([syms, syms], self.inst.listsyms())

* Sun 28 Dec 2014 11:09:12 PM JST
self.inst.listsyms()
* Sun 28 Dec 2014 11:09:21 PM JST
list
* Sun 28 Dec 2014 11:10:01 PM JST
    def test_itersyms(self, ):
        code = 1
        syms = [1, 2, 3, 4, 0, 0, 0]
        self.inst.set(code, syms)
        self.inst.set(2, syms)
        self.assertListEqual([syms, syms], list(self.inst.itersyms()))


* Sun 28 Dec 2014 11:10:16 PM JST

* Sun 28 Dec 2014 11:10:16 PM JST

* Sun 28 Dec 2014 11:10:16 PM JST
        self.assertListEqual([syms, syms], list(self.inst.itersyms()))

* Sun 28 Dec 2014 11:11:03 PM JST
    def test_items(self, ):
        code = 1
        syms = [1, 2, 3, 4, 0, 0, 0]
        self.inst.set(code, syms)
        self.inst.set(2, syms)
        self.assertListEqual([(1, syms), (2, syms)], self.inst.items())

* Sun 28 Dec 2014 11:11:16 PM JST
self.inst.iteritems()
* Mon 29 Dec 2014 10:32:06 AM JST
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code, syms)

* Mon 29 Dec 2014 10:32:27 AM JST

* Mon 29 Dec 2014 10:32:27 AM JST

* Mon 29 Dec 2014 10:32:27 AM JST
        self.inst.set(code, syms)

* Mon 29 Dec 2014 10:33:54 AM JST
self.inst.codes()[0]
* Mon 29 Dec 2014 10:37:58 AM JST
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]

* Mon 29 Dec 2014 10:40:36 AM JST
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code, syms)

* Mon 29 Dec 2014 10:42:31 AM JST
assert
* Mon 29 Dec 2014 10:42:32 AM JST
self.assert
* Mon 29 Dec 2014 10:42:41 AM JST
self.assertIn(code, self.inst)
* Mon 29 Dec 2014 10:43:23 AM JST
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code, syms)

* Mon 29 Dec 2014 10:43:30 AM JST
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]

* Mon 29 Dec 2014 10:43:39 AM JST
self.inst.set(code, syms)
* Mon 29 Dec 2014 10:44:05 AM JST
assert
* Mon 29 Dec 2014 10:46:38 AM JST
        code2 = 2
        syms2 = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code, syms)

* Mon 29 Dec 2014 10:50:30 AM JST
self.inst.set(code2, syms2)
* Mon 29 Dec 2014 10:50:32 AM JST

* Mon 29 Dec 2014 10:50:35 AM JST
code:
* Mon 29 Dec 2014 10:51:04 AM JST
    def test___getslice__(self, ):
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code, syms)
        code2 = 2
        syms2 = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code2, syms2)
        expects = {code: syms, code2: syms2,}
        self.assertEqual(expects, self.inst[code:code2 + 1])
        self.assertEqual(expects, self.inst[code2 + 1:code])

* Mon 29 Dec 2014 10:51:39 AM JST

* Mon 29 Dec 2014 10:51:39 AM JST

* Mon 29 Dec 2014 10:51:40 AM JST
        self.assertEqual(expects, self.inst[code2 + 1:code])

* Mon 29 Dec 2014 10:53:13 AM JST
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code, syms)
        code2 = 3
        syms2 = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code2, syms2)
        expects = {code: syms, code2: syms2,}
        self.assertEqual(expects, self.inst[code:code2 + 1])

* Mon 29 Dec 2014 10:53:18 AM JST

* Mon 29 Dec 2014 10:53:18 AM JST

* Mon 29 Dec 2014 10:53:18 AM JST
        self.inst.set(code, syms)

* Mon 29 Dec 2014 10:53:52 AM JST

* Mon 29 Dec 2014 10:53:52 AM JST

* Mon 29 Dec 2014 10:53:52 AM JST
        code2 = 3

* Mon 29 Dec 2014 10:54:06 AM JST
[0, 0, 0, 0, 0, 0, 0]
* Mon 29 Dec 2014 10:54:08 AM JST

* Mon 29 Dec 2014 10:54:08 AM JST

* Mon 29 Dec 2014 10:54:08 AM JST
        syms2 = [0, 0, 0, 0, 0, 0, 0]

* Mon 29 Dec 2014 10:59:06 AM JST
        code, code2 = 1, 2
        syms, syms2 = [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]
        self.inst[code:code2] = [syms, syms2]

* Mon 29 Dec 2014 10:59:15 AM JST

* Mon 29 Dec 2014 10:59:15 AM JST

* Mon 29 Dec 2014 10:59:15 AM JST
        self.skipTest('Not Implemented')

* Mon 29 Dec 2014 10:59:24 AM JST
self.
* Mon 29 Dec 2014 11:01:16 AM JST
        code, code2 = 1, 2
        syms, syms2 = [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]
        self.inst[code:code2] = [syms, syms2]

* Mon 29 Dec 2014 11:06:11 AM JST
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code, syms)

* Mon 29 Dec 2014 11:06:59 AM JST
'CodeToSyms({Keycode(1): [Keysym(0),\n              Keysym(0),\n              Keysym(0),\n              Keysym(0),\n              Keysym(0),\n              Keysym(0),\n              Keysym(0)]})'
* Mon 29 Dec 2014 11:07:34 AM JST
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code, syms)

* Mon 29 Dec 2014 11:08:42 AM JST
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code, syms)

* Mon 29 Dec 2014 11:09:14 AM JST

* Mon 29 Dec 2014 11:09:19 AM JST
code
* Mon 29 Dec 2014 11:09:51 AM JST
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code, syms)

* Mon 29 Dec 2014 11:13:56 AM JST
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code, syms)
        code2 = 2
        syms2 = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code2, syms2)
        expects = {code: syms, code2: syms2,}

* Mon 29 Dec 2014 11:14:32 AM JST
expects,
* Mon 29 Dec 2014 11:15:47 AM JST
codetosyms.CodeToSyms()
* Mon 29 Dec 2014 11:17:09 AM JST
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code, syms)
        code2 = 2
        syms2 = [0, 0, 0, 0, 0, 0, 0]
        self.inst.set(code2, syms2)

* Mon 29 Dec 2014 11:22:45 AM JST
        code, code2 = 1, 2
        syms, syms2 = [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]
        self.inst[code:code2] = [syms, syms2]
        expects = {code: syms, code2: syms2,}

* Mon 29 Dec 2014 11:23:03 AM JST

* Mon 29 Dec 2014 11:23:03 AM JST

* Mon 29 Dec 2014 11:23:03 AM JST
        self.inst[code:code2] = [syms, syms2]

* Mon 29 Dec 2014 11:23:23 AM JST
self.
* Mon 29 Dec 2014 11:24:12 AM JST
self.assertEqual(expects, self.inst)
* Mon 29 Dec 2014 11:24:24 AM JST
self.
* Mon 29 Dec 2014 11:25:51 AM JST
codetosyms.CodeToSyms(expects)
* Mon 29 Dec 2014 11:25:52 AM JST
expects
* Mon 29 Dec 2014 12:30:51 PM JST
        code = 1
        syms = [0, 0, 0, 0, 0, 0, 0]
        self.inst[code] = syms
        self.assertIsInstance(self.inst.codes()[0], keycode.Keycode)
        for sym in self.inst[code]:
            self.assertIsInstance(sym, keysym.Keysym)

* Mon 29 Dec 2014 12:32:17 PM JST

* Mon 29 Dec 2014 12:32:17 PM JST

* Mon 29 Dec 2014 12:32:17 PM JST
        syms = [0, 0, 0, 0, 0, 0, 0]

* Mon 29 Dec 2014 12:32:18 PM JST
        syms = [0, 0, 0, 0, 0, 0, 0]

* Mon 29 Dec 2014 12:32:18 PM JST
        syms = [0, 0, 0, 0, 0, 0, 0]
        self.inst[code] = syms

* Mon 29 Dec 2014 12:32:21 PM JST
self.
* Mon 29 Dec 2014 12:32:28 PM JST
self.
* Mon 29 Dec 2014 12:37:17 PM JST
    def test___setslice__(self, ):
        code, code2 = 1, 2
        syms, syms2 = [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]
        self.inst[code:code2] = [syms, syms2]
        expects = {code: syms, code2: syms2,}
        self.assertEqual(expects, self.inst[code:code2 + 1])


* Mon 29 Dec 2014 12:37:21 PM JST
code
* Mon 29 Dec 2014 12:37:35 PM JST
    def test___delslice__(self, ):
        code, code2 = 1, 2
        syms, syms2 = [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]
        self.inst[code:code2] = [syms, syms2]
        expects = {}
        del self.inst[code:code2 + 1]
        self.assertEqual(expects, self.inst)

* Mon 29 Dec 2014 12:41:40 PM JST
code2 + 1
* Mon 29 Dec 2014 01:04:02 PM JST
list
* Mon 29 Dec 2014 04:51:13 PM JST
class Keycode:
    """Class Keycode
    """
    # Attributes:
    __value = None  # (int) 
    
    # Operations
    def get(self):
        """function get
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def set(self, value):
        """function set
        
        value: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __cmp__(self, other):
        """function __cmp__
        
        other: 
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __lt__(self, other):
        """function __lt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __le__(self, other):
        """function __le__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __gt__(self, other):
        """function __gt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ge__(self, other):
        """function __ge__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __hash__(self):
        """function __hash__
        
        returns long
        """
        return None # should raise NotImplementedError()
    
    def __nonzero__(self):
        """function __nonzero__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __add__(self, other):
        """function __add__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __radd__(self, other):
        """function __radd__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __iadd__(self, other):
        """function __iadd__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __sub__(self, other):
        """function __sub__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __rsub__(self, other):
        """function __rsub__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __isub__(self, other):
        """function __isub__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __mull__(self, other):
        """function __mull__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __rmull__(self, other):
        """function __rmull__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __imull__(self, other):
        """function __imull__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __div__(self, other):
        """function __div__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __rdiv__(self, other):
        """function __rdiv__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __idiv__(self, other):
        """function __idiv__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __pow__(self, other):
        """function __pow__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __rpow__(self, other):
        """function __rpow__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __ipow__(self, other):
        """function __ipow__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __and__(self, other):
        """function __and__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __rand__(self, other):
        """function __rand__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __iand__(self, other):
        """function __iand__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __xor__(self, other):
        """function __xor__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __rxor__(self, other):
        """function __rxor__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __ixor__(self, other):
        """function __ixor__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __lshift__(self, other):
        """function __lshift__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __rlshift__(self, other):
        """function __rlshift__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __ilshift__(self, other):
        """function __ilshift__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __rshift__(self, other):
        """function __rshift__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __rrshift__(self, other):
        """function __rrshift__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __irshift__(self, other):
        """function __irshift__
        
        other: 
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __neg__(self):
        """function __neg__
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __pos__(self):
        """function __pos__
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __invert__(self):
        """function __invert__
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def __int__(self):
        """function __int__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __long__(self):
        """function __long__
        
        returns long
        """
        return None # should raise NotImplementedError()
    
    def __float__(self):
        """function __float__
        
        returns float
        """
        return None # should raise NotImplementedError()
    
    def __complex__(self):
        """function __complex__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __oct__(self):
        """function __oct__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __hex__(self):
        """function __hex__
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Mon 29 Dec 2014 04:51:54 PM JST
    def __repr__(self):
        return '{0.__class__.__name__}({0._value})'.format(self)

    def __hash__(self, ):
        return hash(self._value)

    def __eq__(self, other):
        if isinstance(other, (int, self.__class__)):
            return self._value == int(other)
        return False

    def __ne__(self, other):
        return not self == other

    def __int__(self):
        return int(self._value)

* Mon 29 Dec 2014 04:52:59 PM JST
    def __repr__(self):
        return '{0.__class__.__name__}({0._value})'.format(self)

    def __hash__(self, ):
        return hash(self._value)

    def __eq__(self, other):
        if isinstance(other, (int, self.__class__)):
            return self._value == int(other)
        return False

    def __ne__(self, other):
        return not self == other


* Mon 29 Dec 2014 04:53:19 PM JST
    def __init__(self, value):
        r"""

        @Arguments:
        - `value`:
        """
        self._value = int(value)


* Mon 29 Dec 2014 04:53:38 PM JST
None # should raise NotImplementedError()
* Mon 29 Dec 2014 04:53:43 PM JST
return None # should raise NotImplementedError()
* Mon 29 Dec 2014 04:53:52 PM JST
value)
* Mon 29 Dec 2014 04:53:53 PM JST
int(value)
* Mon 29 Dec 2014 04:54:08 PM JST
None # should raise NotImplementedError()
* Mon 29 Dec 2014 04:54:55 PM JST
1 < 
* Mon 29 Dec 2014 04:55:14 PM JST
None # should raise NotImplementedError()
* Mon 29 Dec 2014 04:57:43 PM JST
None # should raise NotImplementedError()
* Mon 29 Dec 2014 04:58:07 PM JST
        if isinstance(other, (int, self.__class__)):
            return self._value < int(other)
        return self._value < other

* Mon 29 Dec 2014 05:01:23 PM JST
        if isinstance(other, (int, self.__class__)):
            return self._value <= int(other)
        return self._value <= other

* Mon 29 Dec 2014 05:01:32 PM JST
        if isinstance(other, (int, self.__class__)):
            return self._value > int(other)
        return self._value > other

* Mon 29 Dec 2014 05:02:37 PM JST
    def __add__(self, other):
        return self.__class__(self._value + int(other))

    def __radd__(self, other):
        return other + int(self)

* Mon 29 Dec 2014 05:02:45 PM JST
    def __sub__(self, other):
        return self.__class__(self._value - int(other))

    def __rsub__(self, other):
        return other - int(self)

* Mon 29 Dec 2014 05:03:09 PM JST
    def __mul__(self, other):
        return self.__class__(self._value * int(other))

    def __rmul__(self, other):
        return other * int(self)

* Mon 29 Dec 2014 05:03:16 PM JST
    def __div__(self, other):
        return self.__class__(self._value / int(other))

    def __rdiv__(self, other):
        return other / int(self)

* Mon 29 Dec 2014 05:03:23 PM JST
    def __pow__(self, other):
        return self.__class__(self._value ** int(other))

    def __rpow__(self, other):
        return other ** int(self)

* Mon 29 Dec 2014 05:03:33 PM JST
    def __and__(self, other):
        return self.__class__(self._value & int(other))

    def __rand__(self, other):
        return other & int(self)

* Mon 29 Dec 2014 05:03:41 PM JST
    def __xor__(self, other):
        return self.__class__(self._value ^ int(other))

    def __rxor__(self, other):
        return other ^ int(self)

* Mon 29 Dec 2014 05:04:08 PM JST
    def __or__(self, other):
        return self.__class__(self._value | int(other))

    def __ror__(self, other):
        return other | int(self)

* Mon 29 Dec 2014 05:04:21 PM JST
    def __lshift__(self, other):
        return self.__class__(self._value << int(other))

    def __rlshift__(self, other):
        return other << int(self)

* Mon 29 Dec 2014 05:04:30 PM JST
    def __rshift__(self, other):
        return self.__class__(self._value >> int(other))

    def __rrshift__(self, other):
        return other >> int(self)

* Mon 29 Dec 2014 05:04:40 PM JST
    def __neg__(self, ):
        self._value = -self._value
        return self

    def __pos__(self):
        self._value = +self._value
        return self

* Mon 29 Dec 2014 05:04:58 PM JST
    def __invert__(self, ):
        self._value = ~self._value
        return self

* Mon 29 Dec 2014 05:05:28 PM JST
    def __iadd__(self, other):
        self._value += int(other)
        return self

* Mon 29 Dec 2014 05:05:34 PM JST
    def __isub__(self, other):
        self._value -= int(other)
        return self

* Mon 29 Dec 2014 05:05:40 PM JST
    def __imul__(self, other):
        self._value *= int(other)
        return self


* Mon 29 Dec 2014 05:05:47 PM JST
    def __idiv__(self, other):
        self._value /= int(other)
        return self

* Mon 29 Dec 2014 05:05:52 PM JST
    def __ipow__(self, other):
        self._value **= int(other)
        return self

* Mon 29 Dec 2014 05:06:01 PM JST
    def __iand__(self, other):
        self._value &= int(other)
        return self

* Mon 29 Dec 2014 05:06:09 PM JST
    def __ixor__(self, other):
        self._value ^= int(other)
        return self


* Mon 29 Dec 2014 05:06:17 PM JST
    def __ilshift__(self, other):
        self._value <<= int(other)
        return self

* Mon 29 Dec 2014 05:06:23 PM JST
    def __irshift__(self, other):
        self._value >>= int(other)
        return self

* Mon 29 Dec 2014 05:06:31 PM JST
    def __long__(self):
        return long(self._value)


* Mon 29 Dec 2014 05:06:36 PM JST
    def __float__(self):
        return float(self._value)


* Mon 29 Dec 2014 05:06:40 PM JST
    def __complex__(self):
        return complex(self._value)


* Mon 29 Dec 2014 05:06:44 PM JST
    def __oct__(self):
        return oct(self._value)


* Mon 29 Dec 2014 05:06:49 PM JST
    def __hex__(self):
        return hex(self._value)


* Mon 29 Dec 2014 05:06:59 PM JST
~self._value
* Mon 29 Dec 2014 05:07:11 PM JST
self._value = 
* Mon 29 Dec 2014 05:07:12 PM JST
+self._value
* Mon 29 Dec 2014 05:07:17 PM JST
-self._value
* Mon 29 Dec 2014 05:07:58 PM JST
self._value >> int(other)
* Mon 29 Dec 2014 05:08:24 PM JST
self._value << int(other)
* Mon 29 Dec 2014 05:08:40 PM JST
self._value ^= int(other)
* Mon 29 Dec 2014 05:09:01 PM JST
self._value & int(other)
* Mon 29 Dec 2014 05:09:18 PM JST
self._value **= int(other)
* Mon 29 Dec 2014 05:09:29 PM JST
self._value /= int(other)
* Mon 29 Dec 2014 05:09:38 PM JST
self._value *= int(other)
* Mon 29 Dec 2014 05:09:47 PM JST
self._value -= int(other)
* Mon 29 Dec 2014 05:09:54 PM JST
self._value += int(other)
* Mon 29 Dec 2014 05:24:45 PM JST
int(value)
* Mon 29 Dec 2014 05:28:08 PM JST
    def __pos__(self):
        self._value = +self._value
        return self


* Mon 29 Dec 2014 05:28:15 PM JST
    def __iadd__(self, other):
        self._value += int(other)
        return self


* Mon 29 Dec 2014 05:29:49 PM JST
    def __iand__(self, other):
        self._value &= int(other)
        return self


* Mon 29 Dec 2014 05:30:48 PM JST
self._value += int(other)
* Mon 29 Dec 2014 05:30:57 PM JST
xsendkey
* Mon 29 Dec 2014 05:30:58 PM JST
sendkeys2.xsendkey
* Mon 29 Dec 2014 05:34:29 PM JST
self._value -= int(other)
* Mon 29 Dec 2014 05:34:53 PM JST
self._value *= int(other)
* Mon 29 Dec 2014 05:35:03 PM JST
self._value /= int(other)
* Mon 29 Dec 2014 05:35:11 PM JST
self._value **= int(other)
* Mon 29 Dec 2014 05:35:18 PM JST
self._value &= int(other)
* Mon 29 Dec 2014 05:35:25 PM JST
self._value ^= int(other)
* Mon 29 Dec 2014 05:35:33 PM JST
self._value |= int(other)
* Mon 29 Dec 2014 05:35:41 PM JST
self._value <<= int(other)
* Mon 29 Dec 2014 05:35:53 PM JST
self._value >>= int(other)
* Mon 29 Dec 2014 05:36:01 PM JST
_value = 
* Mon 29 Dec 2014 05:36:06 PM JST
_value = 
* Mon 29 Dec 2014 05:36:08 PM JST
self.
* Mon 29 Dec 2014 05:36:13 PM JST
_value = 
* Mon 29 Dec 2014 05:41:57 PM JST
        if isinstance(other, (int, self.__class__)):
            return self._value == int(other)
        return False

* Mon 29 Dec 2014 05:43:54 PM JST
other
* Mon 29 Dec 2014 05:43:57 PM JST
other
* Mon 29 Dec 2014 05:43:59 PM JST
other
* Mon 29 Dec 2014 05:54:39 PM JST
object
* Mon 29 Dec 2014 05:54:39 PM JST
1<object
* Mon 29 Dec 2014 06:22:21 PM JST
return not self == other
* Mon 29 Dec 2014 06:24:10 PM JST
return self._value == int(other)
* Mon 29 Dec 2014 09:42:02 PM JST
int
* Mon 29 Dec 2014 09:45:28 PM JST
self._cast(other)
* Mon 29 Dec 2014 10:05:25 PM JST
from . 
* Mon 29 Dec 2014 10:05:48 PM JST
xobj.
* Mon 29 Dec 2014 10:05:48 PM JST
xahk2.xobj.
* Mon 29 Dec 2014 10:05:58 PM JST
from . 
* Mon 29 Dec 2014 10:10:58 PM JST
object
* Mon 29 Dec 2014 10:14:19 PM JST

* Mon 29 Dec 2014 10:14:19 PM JST

* Mon 29 Dec 2014 10:14:19 PM JST
    # Attributes:

* Mon 29 Dec 2014 10:24:17 PM JST
KeyboardMapping
* Mon 29 Dec 2014 10:24:36 PM JST
KeyboardMapping()
* Mon 29 Dec 2014 10:24:37 PM JST
k=KeyboardMapping()
* Mon 29 Dec 2014 10:24:42 PM JST
xcb
* Mon 29 Dec 2014 10:24:42 PM JST
from xcb
* Mon 29 Dec 2014 10:25:39 PM JST
_keymap_syms
* Mon 29 Dec 2014 10:58:18 PM JST
object
* Mon 29 Dec 2014 10:59:20 PM JST
0x00ffffff
* Mon 29 Dec 2014 11:01:09 PM JST
return (0x0020 <= self <= 0x007e or 0x00a0 <= self <= 0x00ff)
* Mon 29 Dec 2014 11:04:05 PM JST
from xcb2 import NoSymbol
* Mon 29 Dec 2014 11:04:30 PM JST
return self == NoSymbol
* Mon 29 Dec 2014 11:11:10 PM JST
X11/keysymdef.h
* Mon 29 Dec 2014 11:17:09 PM JST
/usr/include/X11/
* Mon 29 Dec 2014 11:35:43 PM JST
if line.find('#define') >= 0:
* Mon 29 Dec 2014 11:35:50 PM JST
from path import Path
p=Path('/usr/include/X11/keysymdef.h')

* Mon 29 Dec 2014 11:35:57 PM JST
f=p.open()

* Mon 29 Dec 2014 11:37:20 PM JST
imo
* Mon 29 Dec 2014 11:41:32 PM JST
defregex
* Mon 29 Dec 2014 11:43:53 PM JST
from cStringIO import StringIO
* Mon 29 Dec 2014 11:48:13 PM JST

* Mon 29 Dec 2014 11:48:13 PM JST

* Mon 29 Dec 2014 11:48:13 PM JST
    from cStringIO import StringIO

* Mon 29 Dec 2014 11:48:24 PM JST

* Mon 29 Dec 2014 11:48:24 PM JST

* Mon 29 Dec 2014 11:48:24 PM JST
    defines = StringIO()

* Mon 29 Dec 2014 11:48:26 PM JST

* Mon 29 Dec 2014 11:48:26 PM JST

* Mon 29 Dec 2014 11:48:26 PM JST
    defines.seek(0)

* Mon 29 Dec 2014 11:48:29 PM JST
write
* Mon 29 Dec 2014 11:48:31 PM JST

* Mon 29 Dec 2014 11:48:31 PM JST

* Mon 29 Dec 2014 11:48:31 PM JST
    print(defines.readlines())

* Mon 29 Dec 2014 11:52:36 PM JST
'0xffffff'
* Mon 29 Dec 2014 11:53:42 PM JST
isdigit()
* Mon 29 Dec 2014 11:55:20 PM JST
hex(
* Tue 30 Dec 2014 12:02:13 AM JST
line.split()
* Tue 30 Dec 2014 10:21:29 AM JST
Keysymdef
* Tue 30 Dec 2014 10:32:53 AM JST
"ニ"
* Tue 30 Dec 2014 10:33:55 AM JST
to_code
* Tue 30 Dec 2014 10:34:40 AM JST
to_key()
* Tue 30 Dec 2014 10:51:20 AM JST
import keyboardmapping as mapping
* Tue 30 Dec 2014 10:51:58 AM JST
KeyboardMappingHolder
* Tue 30 Dec 2014 03:21:49 PM JST
get_windowc
* Tue 30 Dec 2014 03:23:26 PM JST
import wm
* Tue 30 Dec 2014 03:24:20 PM JST
title
* Tue 30 Dec 2014 03:24:33 PM JST
klass
* Tue 30 Dec 2014 03:24:55 PM JST
title
* Tue 30 Dec 2014 03:24:59 PM JST
77594929
* Tue 30 Dec 2014 03:28:30 PM JST
NamedButtonIndex.Left
* Tue 30 Dec 2014 03:29:28 PM JST
77594929
* Tue 30 Dec 2014 03:34:58 PM JST
list(wm.iter_wins())[-3].title
* Tue 30 Dec 2014 03:35:22 PM JST
title
* Tue 30 Dec 2014 03:35:30 PM JST
77594840
* Tue 30 Dec 2014 03:35:54 PM JST
press
* Tue 30 Dec 2014 03:36:23 PM JST
press
* Tue 30 Dec 2014 03:41:41 PM JST
get_geometry
* Tue 30 Dec 2014 03:49:38 PM JST
b.press(77594840, 40,30)
b.release(77594840, 40,30)
b.flush()

* Tue 30 Dec 2014 06:33:34 PM JST
NamedButtonIndex.Right
* Tue 30 Dec 2014 06:33:54 PM JST
NamedButtonIndex.WheelDown
* Tue 30 Dec 2014 06:34:12 PM JST
b=ButtonCode(1)
* Tue 30 Dec 2014 06:34:18 PM JST
NamedButtonIndex.WheelDown
* Tue 30 Dec 2014 06:34:37 PM JST
b.press(77594929, 100,100)
b.release(77594929, 100,100)

* Tue 30 Dec 2014 06:37:58 PM JST
Left
* Tue 30 Dec 2014 06:38:55 PM JST
Right
* Tue 30 Dec 2014 10:13:44 PM JST
list(wm.iter_wins())[-4].title
* Tue 30 Dec 2014 10:14:04 PM JST
title
* Tue 30 Dec 2014 10:14:07 PM JST
65011716
* Tue 30 Dec 2014 10:15:19 PM JST
100
* Tue 30 Dec 2014 10:16:34 PM JST
Left
* Tue 30 Dec 2014 10:23:09 PM JST
65011716
* Tue 30 Dec 2014 10:26:09 PM JST
KeyPress
* Tue 30 Dec 2014 10:31:11 PM JST
c.core.SendEvent.ButtonPress
* Tue 30 Dec 2014 10:31:22 PM JST
propagate,win,b,ti,child,root,win2,rootx,rooty,evx,evy,state,same
* Tue 30 Dec 2014 10:31:33 PM JST
c.core.SendEvent.ButtonRelease
* Tue 30 Dec 2014 10:31:41 PM JST
propagate,win,b,ti,child,root,win2,rootx,rooty,evx,evy,state,same
* Tue 30 Dec 2014 10:31:58 PM JST
65011716
* Tue 30 Dec 2014 10:34:36 PM JST
0,65011716, 3,0,0,482,65011716,0,0,0,150,150,0,1
* Tue 30 Dec 2014 10:35:32 PM JST
0,65011716,3,0,0,482,65011716,0,0,0,150,150,0,1
* Tue 30 Dec 2014 10:38:30 PM JST
child,
* Tue 30 Dec 2014 10:43:28 PM JST
20
* Tue 30 Dec 2014 10:51:53 PM JST
kwargs[EventDispatcher.event]
* Tue 30 Dec 2014 10:54:03 PM JST

* Tue 30 Dec 2014 10:54:04 PM JST

* Tue 30 Dec 2014 10:54:04 PM JST
    print('DEBUG-2-handler6.py')

* Tue 30 Dec 2014 10:54:04 PM JST
    print('DEBUG-2-handler6.py')

* Tue 30 Dec 2014 10:54:04 PM JST
    print('DEBUG-2-handler6.py')
    print(kwargs[EventDispatcher.event])

* Tue 30 Dec 2014 10:55:07 PM JST
kwargs[EventDispatcher.event]
* Tue 30 Dec 2014 10:55:45 PM JST

* Tue 30 Dec 2014 10:55:45 PM JST

* Tue 30 Dec 2014 10:55:45 PM JST
    print('DEBUG-2-handler6.py')

* Tue 30 Dec 2014 10:55:45 PM JST
    print('DEBUG-2-handler6.py')

* Tue 30 Dec 2014 10:55:46 PM JST
    print('DEBUG-2-handler6.py')
    print(kwargs[EventDispatcher.event])

* Tue 30 Dec 2014 10:56:44 PM JST
kwargs[EventDispatcher.event]
* Tue 30 Dec 2014 11:01:03 PM JST

* Tue 30 Dec 2014 11:01:03 PM JST

* Tue 30 Dec 2014 11:01:04 PM JST
    print('DEBUG-2-handler6.py')

* Tue 30 Dec 2014 11:01:04 PM JST
    print('DEBUG-2-handler6.py')

* Tue 30 Dec 2014 11:01:04 PM JST
    print('DEBUG-2-handler6.py')
    print(kwargs[EventDispatcher.event])

* Tue 30 Dec 2014 11:01:31 PM JST
rabKey WindowNormalType(window=54525953)
** FocusIn >> name:"XButtonEvent(3) manual page - Google Chrome", wmclass:Google-chrome ()Google-chrome, pid:psutil.Process(pid=7564, name='chrome'), id:"54525953"
11 ConfigureNotifyEvent
12 ConfigureNotifyEvent
13 EnterNotifyEvent
** EnterNotifyEventHooks EnterNotifyEvent
GrabButton WindowRootType(window=482)
GrabButton WindowRootType(window=482)
GrabButton WindowRootType(window=482)
14 ConfigureNotifyEvent
15 ConfigureNotifyEvent
16 KeyPressEvent
** KeyPressEventHooks KeyPressEvent
DEBUG-2-handler6.py
WrapKeyPressEvent(detail=26, code=26, time=1979-03-19 20:30:28, root=WindowRootType(window=482), event=WindowNormalType(window=54525953), child=WindowNormalType(window=54525953), root_x=2149, root_y=705, event_x=552, event_y=617, state=<4 ['Control']>, same_screen=1, )
17 KeyReleaseEvent
18 KeyReleaseEvent
19 KeyPressEvent
** KeyPressEventHooks KeyPressEvent
DEBUG-2-handler6.py
WrapKeyPressEvent(detail=26, code=26, time=1979-03-20 09:59:28, root=WindowRootType(window=482), event=WindowNormalType(window=54525953), child=WindowNormalType(window=54525953), root_x=1670, root_y=666, event_x=73, event_y=578, state=<4 ['Control']>, same_screen=1, )
20 KeyReleaseEvent
21 KeyReleaseEvent
22 KeyPressEvent
** KeyPressEventHooks KeyPressEvent
DEBUG-2-handler6.py
WrapKeyPressEvent(detail=26, code=26, time=1979-03-20 11:13:16, root=WindowRootType(window=482), event=WindowNormalType(window=54525953), child=WindowNormalType(window=54525953), root_x=2385, root_y=730, event_x=788, event_y=642, state=<4 ['Control']>, same_screen=1, )
23 KeyReleaseEvent
24 KeyReleaseEvent
25 EnterNotifyEvent
** EnterNotifyEventHooks EnterNotifyEvent
GrabButton WindowRootType(window=482)
GrabButton WindowRootType(window=482)
26 EnterNotifyEvent
** EnterNotifyEventHooks EnterNotifyEvent
GrabButton WindowRootType(window=482)
GrabButton WindowRootType(window=482)
27 EnterNotifyEvent
** EnterNotifyEventHooks EnterNotifyEvent
GrabButton WindowRootType(window=482)
GrabButton WindowRootType(window=482)
28 EnterNotifyEvent
** EnterNotifyEventHooks EnterNotifyEvent
GrabButton WindowRootType(window=482)
GrabButton WindowRootType(window=482)
29 ConfigureNotifyEvent
30 EnterNotifyEvent
** EnterNotifyEventHooks EnterNotifyEvent
GrabButton WindowRootType(window=482)
GrabButton WindowRootType(window=482)
31 ConfigureNotifyEvent
32 EnterNotifyEvent
** EnterNotifyEventHooks EnterNotifyEvent
GrabButton WindowRootType(window=482)
GrabButton WindowRootType(window=482)
33 CreateNotifyEvent
34 ConfigureNotifyEvent
35 MapNotifyEvent
** MapNotifyEventHooks MapNotifyEvent
*** override redirect 1
*** override redirect 1
*** override redirect 1
*** override redirect 1
36 KeyPressEvent
** KeyPressEventHooks KeyPressEvent
DEBUG-2-handler6.py
WrapKeyPressEvent(detail=26, code=26, time=1979-03-20 14:30:06, root=WindowRootType(window=482), event=WindowNormalType(window=54525953), child=WindowNormalType(window=54525953), root_x=2959, root_y=1049, event_x=1362, event_y=961, state=<4 ['Control']>, same_screen=1, )

* Tue 30 Dec 2014 11:23:08 PM JST
SendKeys
* Tue 30 Dec 2014 11:23:56 PM JST
65011716
* Tue 30 Dec 2014 11:24:00 PM JST
65011716
* Tue 30 Dec 2014 11:24:21 PM JST
65011716
* Tue 30 Dec 2014 11:24:39 PM JST
65011716
* Tue 30 Dec 2014 11:39:17 PM JST
position()
* Tue 30 Dec 2014 11:43:13 PM JST
sleep(3);
* Wed 31 Dec 2014 12:01:12 AM JST
core
* Wed 31 Dec 2014 12:24:10 AM JST
import ooxcb.protocol.xproto
* Wed 31 Dec 2014 12:26:11 AM JST
0)
* Wed 31 Dec 2014 12:26:12 AM JST
8,0)
* Wed 31 Dec 2014 12:26:12 AM JST
get_keysym(8,0)
* Wed 31 Dec 2014 12:26:12 AM JST
keysyms.get_keysym(8,0)
* Wed 31 Dec 2014 01:17:44 AM JST
connect
* Wed 31 Dec 2014 01:17:45 AM JST
xcb2.connect
* Wed 31 Dec 2014 05:43:03 AM JST
button(0,65011716,3,0,0,482,65011716,0,30,30,150,150,0,1)
* Wed 31 Dec 2014 05:45:02 AM JST
list(wm.iter_wins())[-4].title
* Wed 31 Dec 2014 05:45:26 AM JST
48234518
* Wed 31 Dec 2014 05:47:24 AM JST
title
* Wed 31 Dec 2014 05:47:27 AM JST
85983236
* Wed 31 Dec 2014 06:13:33 AM JST
85983236
* Wed 31 Dec 2014 06:13:41 AM JST
85983236
* Wed 31 Dec 2014 11:42:46 AM JST
list(wm.iter_wins())[-6].title
* Wed 31 Dec 2014 11:42:55 AM JST
titl
* Wed 31 Dec 2014 11:42:58 AM JST
85983236
* Wed 31 Dec 2014 11:43:14 AM JST
600
* Wed 31 Dec 2014 11:43:20 AM JST
482