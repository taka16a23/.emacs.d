
* Tue 02 Sep 2014 05:05:42 PM JST
_revision__ = "$Revision$"
* Tue 02 Sep 2014 05:06:42 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 05:06:51 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 05:06:55 PM JST
_
* Tue 02 Sep 2014 05:06:56 PM JST
self._
* Tue 02 Sep 2014 05:06:56 PM JST
return self._
* Tue 02 Sep 2014 05:07:21 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 05:07:37 PM JST
should 
* Tue 02 Sep 2014 05:07:37 PM JST
None # should 
* Tue 02 Sep 2014 05:07:37 PM JST
return None # should 
* Tue 02 Sep 2014 05:07:41 PM JST
return None # should 
* Tue 02 Sep 2014 05:12:58 PM JST
_ip
* Tue 02 Sep 2014 05:12:59 PM JST
self._ip
* Tue 02 Sep 2014 05:13:00 PM JST
_ip
* Tue 02 Sep 2014 05:13:01 PM JST
self._ip
* Tue 02 Sep 2014 05:28:15 PM JST
@abstractmethod
* Tue 02 Sep 2014 05:30:27 PM JST

* Tue 02 Sep 2014 05:30:27 PM JST

* Tue 02 Sep 2014 05:30:27 PM JST
    number = None  # ()

* Tue 02 Sep 2014 05:30:36 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 05:30:50 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 05:30:52 PM JST
self.
* Tue 02 Sep 2014 05:30:52 PM JST
return self.
* Tue 02 Sep 2014 05:34:46 PM JST
    def __init__(self, port):
        r"""

        @Arguments:
        - `port`:
        """
        self._number = port

    # Operations
    def get(self):
        """function get

        returns
        """
        return self._number

    def set(self, port):
        """function set

        returns
        """
        self._number = port


* Tue 02 Sep 2014 05:35:43 PM JST
TCPPort
* Tue 02 Sep 2014 05:35:47 PM JST

* Tue 02 Sep 2014 05:35:52 PM JST
TCP
* Tue 02 Sep 2014 05:36:47 PM JST
ipadder
* Tue 02 Sep 2014 05:37:11 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 05:37:18 PM JST
 None # should raise NotImplementedError()
* Tue 02 Sep 2014 05:38:56 PM JST
self.
* Tue 02 Sep 2014 05:39:38 PM JST
from .ip import IP
from .port import TCPPort


class Address:
    """Class Address
    """
    # Attributes:
    def __init__(self, ipadder, port):
        r"""

        @Arguments:
        - `ipadder`:
        - `port`:
        """
        self._ipadder = IP(ipadder)
        self._port = TCPPort(port)

    # Operations
    def set_host(self, ipadder):
        r"""SUMMARY

        set_host(ipadder)

        @Arguments:
        - `ipadder`:

        @Return:

        @Error:
        """
        self._ipadder = ipadder

    def get_host(self):
        """function get_host

        returns
        """
        return self._ipadder

    def set_port(self, port):
        r"""SUMMARY

        set_port(port)

        @Arguments:
        - `port`:

        @Return:

        @Error:
        """
        self._port = port

    def get_port(self):
        """function get_port

        returns
        """
        return self._port

* Tue 02 Sep 2014 05:40:11 PM JST
from abc import ABCMeta, abstractmethod


class Port:
    """Abstract class Port
    """
    __metaclass__ = ABCMeta
    # Attributes:

    # Operations
    @abstractmethod
    def get(self):
        """function get

        returns
        """
        raise NotImplementedError()

    @abstractmethod
    def set(self):
        """function set

        returns
        """
        raise NotImplementedError()

    @abstractmethod
    def __int__(self):
        """function __int__

        returns
        """
        raise NotImplementedError()

* Tue 02 Sep 2014 05:40:41 PM JST
#!/usr/bin/env python
# -*- coding: utf-8 -*-

# $Id$
# $Revision$
# $Date$
# $Author$
# $LastChangedBy$
# $LastChangedDate$

r"""port -- DESCRIPTION

"""

* Tue 02 Sep 2014 05:40:55 PM JST

# For Emacs
# Local Variables:
# coding: utf-8
# End:
# port.py ends here

* Tue 02 Sep 2014 05:41:10 PM JST
#!/usr/bin/env python
# -*- coding: utf-8 -*-

# $Id$
# $Revision$
# $Date$
# $Author$
# $LastChangedBy$
# $LastChangedDate$

r"""port -- DESCRIPTION

"""

* Tue 02 Sep 2014 05:41:21 PM JST

# For Emacs
# Local Variables:
# coding: utf-8
# End:
# port.py ends here

* Tue 02 Sep 2014 05:41:41 PM JST
#!/usr/bin/env python
# -*- coding: utf-8 -*-

# $Id$
# $Revision$
# $Date$
# $Author$
# $LastChangedBy$
# $LastChangedDate$

r"""UDPPort -- DESCRIPTION

"""

* Tue 02 Sep 2014 05:41:47 PM JST
UDPPort
* Tue 02 Sep 2014 05:41:57 PM JST

# For Emacs
# Local Variables:
# coding: utf-8
# End:
# port.py ends here

* Tue 02 Sep 2014 05:42:02 PM JST
port
* Tue 02 Sep 2014 05:42:15 PM JST
#!/usr/bin/env python
# -*- coding: utf-8 -*-

# $Id$
# $Revision$
# $Date$
# $Author$
# $LastChangedBy$
# $LastChangedDate$

r"""UDPPort -- DESCRIPTION

"""

* Tue 02 Sep 2014 05:42:18 PM JST
UDPPort
* Tue 02 Sep 2014 05:42:26 PM JST

# For Emacs
# Local Variables:
# coding: utf-8
# End:
# port.py ends here

* Tue 02 Sep 2014 05:42:30 PM JST
port
* Tue 02 Sep 2014 05:46:06 PM JST
super(, self).()
* Tue 02 Sep 2014 05:46:41 PM JST

* Tue 02 Sep 2014 05:46:41 PM JST

* Tue 02 Sep 2014 05:46:41 PM JST
        super(, self).()

* Tue 02 Sep 2014 06:08:17 PM JST
from Connection import Connection

class Director:
    """Abstract class Director
    """
    # Attributes:
    
    # Operations
    def direct(self):
        """function direct
        
        returns 
        """
        raise NotImplementedError()
    


* Tue 02 Sep 2014 06:09:04 PM JST

* Tue 02 Sep 2014 06:09:04 PM JST

* Tue 02 Sep 2014 06:09:04 PM JST
from Connection import Connection

* Tue 02 Sep 2014 06:09:37 PM JST

* Tue 02 Sep 2014 06:09:37 PM JST

* Tue 02 Sep 2014 06:09:37 PM JST
    # Attributes:

* Tue 02 Sep 2014 06:17:36 PM JST
from SocketBuilder import SocketBuilder
from .director import Director


class SocketDirector(Director):
    """Class SocketDirector
    """
    # Attributes:
    __socketbuilder = None  # ()

    # Operations
    def direct(self):
        """function direct

        returns
        """
        return None # should raise NotImplementedError()

    def set_socketbuilder(self):
        """function set_socketbuilder

        returns
        """
        return None # should raise NotImplementedError()

    def get_socketbuilder(self):
        """function get_socketbuilder

        returns
        """
        return None # should raise NotImplementedError()

* Tue 02 Sep 2014 06:19:38 PM JST

* Tue 02 Sep 2014 06:19:38 PM JST

* Tue 02 Sep 2014 06:19:38 PM JST
    __socketbuilder = None  # ()

* Tue 02 Sep 2014 06:20:03 PM JST

* Tue 02 Sep 2014 06:20:03 PM JST

* Tue 02 Sep 2014 06:20:03 PM JST
from SocketBuilder import SocketBuilder

* Tue 02 Sep 2014 06:20:14 PM JST
return None # should raise NotImplementedError()
* Tue 02 Sep 2014 06:20:24 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 06:22:50 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 06:23:59 PM JST

* Tue 02 Sep 2014 06:23:59 PM JST

* Tue 02 Sep 2014 06:23:59 PM JST
from Authenticator import Authenticator

* Tue 02 Sep 2014 06:24:02 PM JST
from Director import Director

class LoginDirector(Director):
    """Class LoginDirector
    """
    # Attributes:
    authenticator = None  # () 
    
    # Operations
    def direct(self):
        """function direct
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_authenticator(self):
        """function set_authenticator
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_authenticator(self):
        """function get_authenticator
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 02 Sep 2014 06:26:12 PM JST

* Tue 02 Sep 2014 06:26:12 PM JST

* Tue 02 Sep 2014 06:26:12 PM JST
    authenticator = None  # ()

* Tue 02 Sep 2014 06:26:19 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 06:26:21 PM JST
return None # should raise NotImplementedError()
* Tue 02 Sep 2014 06:26:35 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 06:26:43 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 06:27:32 PM JST

* Tue 02 Sep 2014 06:27:32 PM JST

* Tue 02 Sep 2014 06:27:32 PM JST
        return 

* Tue 02 Sep 2014 06:36:38 PM JST

* Tue 02 Sep 2014 06:36:38 PM JST

* Tue 02 Sep 2014 06:36:38 PM JST
    __builders = None  # ()

* Tue 02 Sep 2014 06:37:12 PM JST
return None # should raise NotImplementedError()
* Tue 02 Sep 2014 06:38:05 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 06:38:14 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 06:38:56 PM JST
build_
* Tue 02 Sep 2014 06:40:58 PM JST
from .Director import Director


class CommandDirector(Director):
    """Class CommandDirector
    """
    # Attributes:
    def __init__(self, builder):
        r"""

        @Arguments:
        - `builder`:
        """
        self._builder = builder

    # Operations
    def direct(self):
        """function direct

        returns
        """
        self._builder.build_command_type()
        self._builder.build_parameter()
        return self._builder.get_result()

    def set_builder(self, builder):
        """function set_builder

        returns
        """
        self._builder = builder

    def get_builder(self):
        """function get_builder

        returns
        """
        return self._builder

* Tue 02 Sep 2014 07:05:33 PM JST

* Tue 02 Sep 2014 07:05:34 PM JST
commanddirector
* Tue 02 Sep 2014 07:05:43 PM JST
CommandDirector
* Tue 02 Sep 2014 07:05:45 PM JST

* Tue 02 Sep 2014 07:05:48 PM JST
logindirector
* Tue 02 Sep 2014 07:05:52 PM JST
LoginDirector
* Tue 02 Sep 2014 07:09:35 PM JST

class SocketBuilder:
    """Abstract class SocketBuilder
    """
    # Attributes:
    
    # Operations
    def create_socket(self):
        """function create_socket
        
        returns 
        """
        raise NotImplementedError()
    
    def connect(self):
        """function connect
        
        returns 
        """
        raise NotImplementedError()
    


* Tue 02 Sep 2014 07:10:46 PM JST

* Tue 02 Sep 2014 07:10:47 PM JST

* Tue 02 Sep 2014 07:10:47 PM JST
    # Attributes:

* Tue 02 Sep 2014 07:11:04 PM JST
@abstractmethod
* Tue 02 Sep 2014 07:12:36 PM JST
from Address import Address
from SocketBuilder import SocketBuilder

class AquosSocketBuilder(SocketBuilder):
    """Class AquosSocketBuilder
    """
    # Attributes:
    __address = None  # () 
    __socket = None  # () 
    
    # Operations
    def create_socket(self):
        """function create_socket
        
        returns socket
        """
        return None # should raise NotImplementedError()
    
    def connect(self):
        """function connect
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_socket(self):
        """function get_socket
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_address(self):
        """function get_address
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_address(self):
        """function set_address
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 02 Sep 2014 07:14:44 PM JST

* Tue 02 Sep 2014 07:14:44 PM JST

* Tue 02 Sep 2014 07:14:44 PM JST
    __address = None  # ()

* Tue 02 Sep 2014 07:14:44 PM JST
    __address = None  # ()

* Tue 02 Sep 2014 07:14:44 PM JST
    __address = None  # ()
    __socket = None  # ()

* Tue 02 Sep 2014 07:15:34 PM JST
return None # should raise NotImplementedError()
* Tue 02 Sep 2014 07:15:54 PM JST
socket.
* Tue 02 Sep 2014 07:16:07 PM JST
from socket 
* Tue 02 Sep 2014 07:16:58 PM JST
return None # should raise NotImplementedError()
* Tue 02 Sep 2014 07:17:41 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 07:17:50 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 07:18:02 PM JST
None # should raise NotImplementedError()
* Tue 02 Sep 2014 07:18:05 PM JST
return None # should raise NotImplementedError()
* Tue 02 Sep 2014 09:57:33 PM JST
AquosSocketBuilder
* Tue 02 Sep 2014 11:19:58 PM JST
socket.socket(socket.AF_INET, socket.SOCK_STREAM)
* Tue 02 Sep 2014 11:21:24 PM JST

* Tue 02 Sep 2014 11:21:24 PM JST

* Tue 02 Sep 2014 11:21:24 PM JST
revision__ = "$Revision$"

* Tue 02 Sep 2014 11:21:27 PM JST

* Tue 02 Sep 2014 11:21:27 PM JST

* Tue 02 Sep 2014 11:21:27 PM JST

* Tue 02 Sep 2014 11:21:30 PM JST

* Tue 02 Sep 2014 11:21:30 PM JST

* Tue 02 Sep 2014 11:21:30 PM JST
__version__ = "0.1.0"

* Tue 02 Sep 2014 11:27:18 PM JST
socket._socketobject
* Tue 02 Sep 2014 11:27:27 PM JST
socket._socketobject
* Tue 02 Sep 2014 11:27:44 PM JST
_socketobject
* Tue 02 Sep 2014 11:27:44 PM JST
socket._socketobject
* Tue 02 Sep 2014 11:29:39 PM JST

* Tue 02 Sep 2014 11:29:39 PM JST

* Tue 02 Sep 2014 11:29:39 PM JST
    def test_name(self, ):

* Tue 02 Sep 2014 11:39:58 PM JST
server
* Tue 02 Sep 2014 11:44:01 PM JST
pass
* Tue 02 Sep 2014 11:48:24 PM JST
self, 
* Tue 02 Sep 2014 11:49:27 PM JST
, 54321
* Tue 02 Sep 2014 11:49:29 PM JST
PORT 
* Tue 02 Sep 2014 11:49:35 PM JST
PORT
* Tue 02 Sep 2014 11:52:56 PM JST
cls.dest.
* Tue 02 Sep 2014 11:57:00 PM JST
            
* Tue 02 Sep 2014 11:57:06 PM JST
            
* Tue 02 Sep 2014 11:57:15 PM JST
        
* Tue 02 Sep 2014 11:57:20 PM JST
                              
* Tue 02 Sep 2014 11:57:34 PM JST
            
* Tue 02 Sep 2014 11:58:37 PM JST
HOST = '127.0.0.1'
* Tue 02 Sep 2014 11:58:46 PM JST
HOST =
* Tue 02 Sep 2014 11:58:50 PM JST
HOST
* Tue 02 Sep 2014 11:58:57 PM JST
HOST
* Tue 02 Sep 2014 11:59:08 PM JST
hello'
* Tue 02 Sep 2014 11:59:17 PM JST
RESPONCE
* Wed 03 Sep 2014 12:03:04 AM JST
def handle(sock, address):
    sock.sendall(RESPONCE)

* Wed 03 Sep 2014 12:04:07 AM JST
socket.AF_INET, socket.SOCK_STREAM
* Wed 03 Sep 2014 12:07:36 AM JST

* Wed 03 Sep 2014 12:07:37 AM JST

* Wed 03 Sep 2014 12:07:37 AM JST
        self.assert

* Wed 03 Sep 2014 12:09:30 AM JST
Address
* Wed 03 Sep 2014 12:09:40 AM JST
Address
* Wed 03 Sep 2014 12:11:02 AM JST
Address
* Wed 03 Sep 2014 12:11:53 AM JST
self.
* Wed 03 Sep 2014 06:07:36 PM JST

class ConnectionAbstract:
    """Interface ConnectionAbstract
    """
    # Attributes:
    
    # Operations
    def send(self, order):
        """function send
        
        order: 
        
        returns 
        """
        raise NotImplementedError()
    


* Wed 03 Sep 2014 06:08:06 PM JST

* Wed 03 Sep 2014 06:08:06 PM JST

* Wed 03 Sep 2014 06:08:06 PM JST
    # Attributes:

* Wed 03 Sep 2014 06:08:50 PM JST
from Order import Order
from .connectionabstract import ConnectionAbstract


class Connection(ConnectionAbstract):
    """Class Connection
    """
    # Attributes:
    __socket = None  # () 
    __account = None  # () 
    
    # Operations
    def send(self, order):
        """function send
        
        order: 
        
        returns Reciever
        """
        return None # should raise NotImplementedError()
    
    def close(self):
        """function close
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_socket(self):
        """function get_socket
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_socket(self):
        """function set_socket
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_account(self):
        """function get_account
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_account(self):
        """function set_account
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __login(self, account):
        """function login
        
        account: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __create_socket(self, address):
        """function create_socket
        
        address: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 03 Sep 2014 11:37:38 PM JST
class Authenticator:
    """Abstract class Authenticator
    """
    # Attributes:
    
    # Operations
    def auth_user(self):
        """function auth_user
        
        returns 
        """
        raise NotImplementedError()
    
    def auth_password(self):
        """function auth_password
        
        returns 
        """
        raise NotImplementedError()

* Wed 03 Sep 2014 11:41:33 PM JST

class Order:
    """Abstract class Order
    """
    # Attributes:
    
    # Operations
    def get_orderline(self):
        """function get_orderline
        
        returns 
        """
        raise NotImplementedError()
    
    def receive(self, string):
        """function receive
        
        string: 
        
        returns 
        """
        raise NotImplementedError()
    


* Wed 03 Sep 2014 11:42:20 PM JST
Abstract
* Wed 03 Sep 2014 11:42:25 PM JST

* Wed 03 Sep 2014 11:42:25 PM JST

* Wed 03 Sep 2014 11:42:25 PM JST
    # Attributes:

* Wed 03 Sep 2014 11:43:12 PM JST
from .order import Order

class CommandOrder(Order):
    """Class CommandOrder
    """
    # Attributes:
    command = None  # () 
    
    # Operations
    def get_orderline(self):
        """function get_orderline
        
        returns string
        """
        return None # should raise NotImplementedError()
    
    def receive(self, string):
        """function receive
        
        string: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_command(self):
        """function set_command
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_command(self):
        """function get_command
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 03 Sep 2014 11:44:07 PM JST
None # should raise NotImplementedError()
* Wed 03 Sep 2014 11:44:16 PM JST
get_commandli
* Wed 03 Sep 2014 11:46:06 PM JST
class Receiver:
    """Abstract class Receiver
    """
    # Attributes:
    
    # Operations
    def set_recieved(self):
        """function set_recieved
        
        returns 
        """
        raise NotImplementedError()
    
    def get_recieved(self):
        """function get_recieved
        
        returns 
        """
        raise NotImplementedError()
    
    def issuccess(self):
        """function issuccess
        
        returns 
        """
        raise NotImplementedError()
    


* Wed 03 Sep 2014 11:46:40 PM JST
@abstractmethod
* Wed 03 Sep 2014 11:48:51 PM JST
from Receiver import Receiver

class CommandReceiver(Receiver):
    """Class CommandReceiver
    """
    # Attributes:
    

    recieved = None  # () 
    command = None  # () 
    
    # Operations
    def set_recieved(self):
        """function set_recieved
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_recieved(self):
        """function get_recieved
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def issuccess(self):
        """function issuccess
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def get_command(self):
        """function get_command
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_command(self):
        """function set_command
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 03 Sep 2014 11:50:01 PM JST
return None # should raise NotImplementedError()
* Wed 03 Sep 2014 11:50:39 PM JST
None
* Wed 03 Sep 2014 11:50:59 PM JST
None # should raise NotImplementedError()
* Wed 03 Sep 2014 11:53:18 PM JST
None # should raise NotImplementedError()
* Wed 03 Sep 2014 11:54:27 PM JST

* Wed 03 Sep 2014 11:54:27 PM JST

* Wed 03 Sep 2014 11:54:27 PM JST
        return 

* Wed 03 Sep 2014 11:55:31 PM JST
None # should raise NotImplementedError()
* Wed 03 Sep 2014 11:55:38 PM JST
return None # should raise NotImplementedError()
* Wed 03 Sep 2014 11:57:29 PM JST
from Receiver import Receiver

class AuthUserReceiver(Receiver):
    """Class AuthUserReceiver
    """
    # Attributes:
    recieved = None  # () 
    
    # Operations
    def set_recieved(self, string):
        """function set_recieved
        
        string: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_recieved(self):
        """function get_recieved
        
        returns string
        """
        return None # should raise NotImplementedError()
    
    def issuccess(self):
        """function issuccess
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def get_expect(self):
        """function get_expect
        
        returns string
        """
        return None # should raise NotImplementedError()
    

* Wed 03 Sep 2014 11:58:03 PM JST

* Wed 03 Sep 2014 11:58:03 PM JST

* Wed 03 Sep 2014 11:58:03 PM JST
    recieved = None  # () 

* Wed 03 Sep 2014 11:58:43 PM JST
string
* Wed 03 Sep 2014 11:58:57 PM JST
None # should raise NotImplementedError()
* Wed 03 Sep 2014 11:59:07 PM JST
return None # should raise NotImplementedError()
* Wed 03 Sep 2014 11:59:21 PM JST
None # should raise NotImplementedError()
* Wed 03 Sep 2014 11:59:57 PM JST
\r\nPassword:
* Thu 04 Sep 2014 12:00:04 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:00:32 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:00:50 AM JST
self.success_code
* Thu 04 Sep 2014 12:00:55 AM JST
self.success_code
* Thu 04 Sep 2014 12:01:18 AM JST
from Receiver import Receiver

class AuthPasswordReceiver(Receiver):
    """Class AuthPasswordReceiver
    """
    # Attributes:
    recieved = None  # () 
    
    # Operations
    def set_recieved(self):
        """function set_recieved
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_recieved(self):
        """function get_recieved
        
        returns string
        """
        return None # should raise NotImplementedError()
    
    def issuccess(self):
        """function issuccess
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def get_expect(self):
        """function get_expect
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Thu 04 Sep 2014 12:02:22 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:02:37 AM JST
return 
* Thu 04 Sep 2014 12:02:40 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:03:46 AM JST
'\r\n'
* Thu 04 Sep 2014 12:04:50 AM JST
self.get_expect()
* Thu 04 Sep 2014 12:05:08 AM JST
return None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:05:15 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:05:28 AM JST
expect
* Thu 04 Sep 2014 12:10:09 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:10:32 AM JST
command, 
* Thu 04 Sep 2014 12:10:51 AM JST
string
* Thu 04 Sep 2014 12:11:00 AM JST
string
* Thu 04 Sep 2014 12:12:26 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:12:26 AM JST
return None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:12:41 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:13:14 AM JST
from Order import Order

class AuthUserOrder(Order):
    """Class AuthUserOrder
    """
    # Attributes:
    user = None  # () 
    
    # Operations
    def get_orderline(self):
        """function get_orderline
        
        returns string
        """
        return None # should raise NotImplementedError()
    
    def receive(self, string):
        """function receive
        
        string: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_user(self):
        """function set_user
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_user(self):
        """function get_user
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Thu 04 Sep 2014 12:15:02 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:15:51 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:16:02 AM JST
string
* Thu 04 Sep 2014 12:16:20 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:16:22 AM JST
self.
* Thu 04 Sep 2014 12:16:23 AM JST
return self.
* Thu 04 Sep 2014 12:16:35 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:16:50 AM JST
from Order import Order

class AuthPasswordOrder(Order):
    """Class AuthPasswordOrder
    """
    # Attributes:
    password = None  # () 
    
    # Operations
    def get_orderline(self):
        """function get_orderline
        
        returns string
        """
        return None # should raise NotImplementedError()
    
    def receive(self, string):
        """function receive
        
        string: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_password(self):
        """function set_password
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_password(self):
        """function get_password
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Thu 04 Sep 2014 12:17:21 AM JST

* Thu 04 Sep 2014 12:17:21 AM JST

* Thu 04 Sep 2014 12:17:21 AM JST
    password = None  # () 

* Thu 04 Sep 2014 12:17:26 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:18:06 AM JST
string
* Thu 04 Sep 2014 12:18:15 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:18:47 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:18:47 AM JST
return None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:19:03 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:19:46 AM JST
CommandReceiver
* Thu 04 Sep 2014 12:19:53 AM JST

* Thu 04 Sep 2014 12:19:54 AM JST
CommandReceiver
* Thu 04 Sep 2014 12:19:56 AM JST
commandreceiver
* Thu 04 Sep 2014 12:20:14 AM JST

* Thu 04 Sep 2014 12:20:18 AM JST
authuserorder
* Thu 04 Sep 2014 12:20:42 AM JST
AuthUserOrder
* Thu 04 Sep 2014 12:22:40 AM JST

* Thu 04 Sep 2014 12:22:40 AM JST

* Thu 04 Sep 2014 12:22:40 AM JST
from Receiver import Receiver

* Thu 04 Sep 2014 12:22:40 AM JST
from Receiver import Receiver

* Thu 04 Sep 2014 12:22:40 AM JST
from Receiver import Receiver
from Order import Order

* Thu 04 Sep 2014 12:22:44 AM JST
from .authenticator import Authenticator


class AquosAuthenticator(Authenticator):
    """Class AquosAuthenticator
    """
    # Attributes:
    def __init__(self, connection, account):
        r"""

        @Arguments:
        - `connection`:
        - `account`:
        """
        self._connection = connection
        self._account = account

    # Operations
    def auth_user(self):
        """function auth_user

        returns
        """
        return None # should raise NotImplementedError()

    def auth_password(self):
        """function auth_password

        returns
        """
        return None # should raise NotImplementedError()

    def set_connection(self):
        """function set_connection

        returns
        """
        return None # should raise NotImplementedError()

    def get_connection(self):
        """function get_connection

        returns
        """
        return None # should raise NotImplementedError()

* Thu 04 Sep 2014 12:24:10 AM JST

* Thu 04 Sep 2014 12:24:10 AM JST

* Thu 04 Sep 2014 12:24:10 AM JST
from .authenticator import Authenticator

* Thu 04 Sep 2014 12:24:15 AM JST
LoginDirector
* Thu 04 Sep 2014 12:24:46 AM JST

* Thu 04 Sep 2014 12:24:46 AM JST

* Thu 04 Sep 2014 12:24:46 AM JST
        LoginDirector

* Thu 04 Sep 2014 12:24:47 AM JST

* Thu 04 Sep 2014 12:24:48 AM JST

* Thu 04 Sep 2014 12:24:48 AM JST
from ..director import LoginDirector

* Thu 04 Sep 2014 12:25:42 AM JST
Authenticator
* Thu 04 Sep 2014 12:29:36 AM JST

* Thu 04 Sep 2014 12:29:36 AM JST

* Thu 04 Sep 2014 12:29:36 AM JST
        return None # should raise NotImplementedError()

* Thu 04 Sep 2014 12:30:09 AM JST
received = 
* Thu 04 Sep 2014 12:30:40 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:31:55 AM JST
received
* Thu 04 Sep 2014 12:32:22 AM JST

* Thu 04 Sep 2014 12:32:22 AM JST

* Thu 04 Sep 2014 12:32:22 AM JST
        return 

* Thu 04 Sep 2014 12:33:03 AM JST
is
* Thu 04 Sep 2014 12:33:06 AM JST
received.
* Thu 04 Sep 2014 12:33:22 AM JST

* Thu 04 Sep 2014 12:33:22 AM JST

* Thu 04 Sep 2014 12:33:22 AM JST
        return 

* Thu 04 Sep 2014 12:33:56 AM JST
sen
* Thu 04 Sep 2014 12:33:56 AM JST
_command.sen
* Thu 04 Sep 2014 12:34:40 AM JST

* Thu 04 Sep 2014 12:34:40 AM JST

* Thu 04 Sep 2014 12:34:40 AM JST
            raise StandardError()

* Thu 04 Sep 2014 12:35:42 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:35:43 AM JST
return None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:35:58 AM JST
None # should raise NotImplementedError()
* Thu 04 Sep 2014 12:36:17 AM JST

* Thu 04 Sep 2014 12:56:31 AM JST
commandorder
* Thu 04 Sep 2014 01:02:56 AM JST
pass
* Thu 04 Sep 2014 01:03:43 AM JST
'POWR1   '
* Thu 04 Sep 2014 01:04:45 AM JST
cls
* Thu 04 Sep 2014 01:08:34 AM JST
            
* Thu 04 Sep 2014 01:35:42 AM JST
    def test_get_orderline(self, ):
        expect = USER + '\n'
        got = self.order.get_orderline()
        self.assertEqual(expect, got,
                         msg='Failed: expect: \{}, got: \{}'.format(expect, got))

* Thu 04 Sep 2014 01:35:48 AM JST
USER
* Thu 04 Sep 2014 01:36:24 AM JST
    def test_receive(self, ):
        got = self.order.receive('')
        self.assertIsInstance(got, AuthUserReceiver)

* Thu 04 Sep 2014 01:36:47 AM JST
    def test_set_user(self, ):
        newuser = 'newuser'
        self.order.set_user(newuser)
        self.assertEqual(newuser, self.order._user)

    def test_get_user(self, ):
        got = self.order.get_user()
        self.assertEqual(USER, got)

* Thu 04 Sep 2014 01:37:21 AM JST
USER
* Thu 04 Sep 2014 02:31:31 AM JST
self.receiver.set_received('ERR\n')
* Thu 04 Sep 2014 02:32:11 AM JST
assert
* Thu 04 Sep 2014 02:32:28 AM JST
assertRaises
* Thu 04 Sep 2014 02:37:45 AM JST
'\r\nPassword:'
* Thu 04 Sep 2014 02:41:14 AM JST
_receivednew
* Thu 04 Sep 2014 02:41:14 AM JST
receiver._receivednew
* Thu 04 Sep 2014 02:41:14 AM JST
self.receiver._receivednew
* Thu 04 Sep 2014 02:41:15 AM JST
msg=self.receiver._receivednew
* Thu 04 Sep 2014 02:43:59 AM JST
self.assertEqual(DUMMYRECEIVE, self.receiver.get_received())
* Thu 04 Sep 2014 02:44:59 AM JST
asser
* Thu 04 Sep 2014 02:46:08 AM JST
authpasswordreceiver
* Thu 04 Sep 2014 02:51:34 AM JST
'\r\n'
* Thu 04 Sep 2014 02:55:01 AM JST
assert
* Thu 04 Sep 2014 03:01:44 AM JST
self.receiver.set_received
* Fri 05 Sep 2014 12:22:24 PM JST
/media/portable/system/FRDPortable/App/FreeRapidDownloader/
* Fri 05 Sep 2014 12:23:18 PM JST
import proxylist
* Fri 05 Sep 2014 12:23:30 PM JST
from ref.url import PROXY
* Fri 05 Sep 2014 12:23:36 PM JST
proxylist.parse_pxurl(PROXY['speed'])
* Fri 05 Sep 2014 12:23:49 PM JST
proxylist.parse_pxurl(PROXY['anonymous'])
* Fri 05 Sep 2014 01:16:47 PM JST
class ParameterAbstract:
    """Abstract class ParameterAbstract
    """
    # Attributes:
    
    # Operations
    def get(self):
        """function get
        
        returns 
        """
        raise NotImplementedError()
    
    def set(self):
        """function set
        
        returns 
        """
        raise NotImplementedError()
    


* Fri 05 Sep 2014 01:17:09 PM JST

* Fri 05 Sep 2014 01:17:09 PM JST

* Fri 05 Sep 2014 01:17:09 PM JST
    # Attributes:

* Fri 05 Sep 2014 01:17:38 PM JST
@abstractmethod
* Fri 05 Sep 2014 01:18:06 PM JST

class Parameter:
    """Interface Parameter
    """
    # Attributes:
    
    # Operations
    def set(self):
        """function set
        
        returns 
        """
        raise NotImplementedError()
    
    def get(self):
        """function get
        
        returns 
        """
        raise NotImplementedError()
    


* Fri 05 Sep 2014 01:23:29 PM JST

class LeftAligner:
    """Abstract class LeftAligner
    """
    # Attributes:
    
    # Operations
    def align(self):
        """function align
        
        returns 
        """
        raise NotImplementedError()
    


* Fri 05 Sep 2014 01:23:51 PM JST

* Fri 05 Sep 2014 01:23:51 PM JST

* Fri 05 Sep 2014 01:23:51 PM JST
    # Attributes:

* Fri 05 Sep 2014 01:24:00 PM JST
Abstract
* Fri 05 Sep 2014 01:24:04 PM JST
Abstract
* Fri 05 Sep 2014 01:24:14 PM JST
, abstractmethod
* Fri 05 Sep 2014 01:25:32 PM JST
fill=' ', 
* Fri 05 Sep 2014 01:26:54 PM JST

* Fri 05 Sep 2014 01:26:54 PM JST

* Fri 05 Sep 2014 01:26:54 PM JST
    __fill = None  # () 

* Fri 05 Sep 2014 01:26:55 PM JST
    __fill = None  # () 

* Fri 05 Sep 2014 01:26:55 PM JST
    __fill = None  # () 
    __length = None  # () 

* Fri 05 Sep 2014 01:27:00 PM JST
from length4leftalign import Length4LeftAlign

class LeftAlign:
    """Class LeftAlign
    """
    # Attributes:
    def __init__(self, length, fill=' '):
        r"""
        
        @Arguments:
        - `length`:
        - `fill`:
        """
        self._length = length
        self._fill = fill
    
    # Operations
    def set_fill(self):
        """function set_fill
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_fill(self):
        """function get_fill
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_length(self):
        """function set_length
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_length(self):
        """function get_length
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def align(self):
        """function align
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 05 Sep 2014 01:27:23 PM JST
return None # should raise NotImplementedError()
* Fri 05 Sep 2014 01:27:37 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 01:27:42 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 01:27:43 PM JST
return None # should raise NotImplementedError()
* Fri 05 Sep 2014 01:28:01 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 01:30:40 PM JST
make_
* Fri 05 Sep 2014 01:30:59 PM JST
.format
* Fri 05 Sep 2014 01:31:33 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 01:35:35 PM JST
_make_format().format(arg)
* Fri 05 Sep 2014 01:37:09 PM JST

* Fri 05 Sep 2014 01:37:09 PM JST

* Fri 05 Sep 2014 01:37:10 PM JST
from .length4leftalign import Length4LeftAlign

* Fri 05 Sep 2014 01:37:16 PM JST
LeftAlign
* Fri 05 Sep 2014 01:41:01 PM JST
from .leftaligner import LeftAligner


class Length4LeftAlign(LeftAligner):
    """Class Length4LeftAlign
    """
    # Attributes:
    def __init__(self, fill=' '):
        r"""
        
        @Arguments:
        - `fill`:
        """
        self._fill = fill
        
    

    __aligner = None  # () 
    
    # Operations
    def align(self):
        """function align
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 05 Sep 2014 01:41:19 PM JST
_fill = fill
* Fri 05 Sep 2014 01:41:48 PM JST

* Fri 05 Sep 2014 01:41:49 PM JST

* Fri 05 Sep 2014 01:41:49 PM JST
    __aligner = None  # () 

* Fri 05 Sep 2014 01:42:10 PM JST
length
* Fri 05 Sep 2014 01:43:52 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 01:46:42 PM JST
Length4LeftAlign
* Fri 05 Sep 2014 01:47:15 PM JST
NotImplementedError()
* Fri 05 Sep 2014 01:47:16 PM JST
raise NotImplementedError()
* Fri 05 Sep 2014 01:57:21 PM JST

class Verifier:
    """Abstract class Verifier
    """
    # Attributes:
    
    # Operations
    def verify(self, value):
        """function verify
        
        value: 
        
        returns bool
        """
        raise NotImplementedError()
    


* Fri 05 Sep 2014 01:58:01 PM JST

* Fri 05 Sep 2014 01:58:01 PM JST

* Fri 05 Sep 2014 01:58:01 PM JST
    # Attributes:

* Fri 05 Sep 2014 01:59:31 PM JST
from Verifier import Verifier

class NumbersVerifer(Verifier):
    """Class NumbersVerifer
    """
    # Attributes:
    __numbers = None  # (list) 
    
    # Operations
    def verify(self):
        """function verify
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_numbers(self):
        """function set_numbers
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_numbers(self):
        """function get_numbers
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 05 Sep 2014 02:01:00 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 02:01:22 PM JST
return None # should raise NotImplementedError()
* Fri 05 Sep 2014 02:01:33 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 02:02:34 PM JST
from Verifier import Verifier

class RangeVerifer(Verifier):
    """Class RangeVerifer
    """
    # Attributes:
    def __init__(self, min, max):
        r"""
        
        @Arguments:
        - `min`:
        - `max`:
        """
        self._min = min
        self._max = max
    
    # Operations
    def verify(self):
        """function verify
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_min(self):
        """function set_min
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_min(self):
        """function get_min
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_max(self):
        """function set_max
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_max(self):
        """function get_max
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 05 Sep 2014 02:03:09 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 02:03:38 PM JST
return None # should raise NotImplementedError()
* Fri 05 Sep 2014 02:03:47 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 02:03:51 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 02:03:53 PM JST
_
* Fri 05 Sep 2014 02:03:53 PM JST
self._
* Fri 05 Sep 2014 02:03:54 PM JST
return self._
* Fri 05 Sep 2014 02:04:07 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 02:04:29 PM JST
from Verifier import Verifier

class MinusVerifer(Verifier):
    """Class MinusVerifer
    """
    # Attributes:
    
    # Operations
    def verify(self):
        """function verify
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 05 Sep 2014 02:12:49 PM JST
_minus = 
* Fri 05 Sep 2014 02:13:06 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 02:13:49 PM JST
from Verifier import Verifier

class QuesionVerifer(Verifier):
    """Class QuesionVerifer
    """
    # Attributes:
    
    # Operations
    def verify(self):
        """function verify
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 05 Sep 2014 02:13:59 PM JST

* Fri 05 Sep 2014 02:13:59 PM JST

* Fri 05 Sep 2014 02:13:59 PM JST
    # Attributes:

* Fri 05 Sep 2014 02:14:09 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 02:14:12 PM JST
_
* Fri 05 Sep 2014 02:14:12 PM JST
self._
* Fri 05 Sep 2014 02:14:28 PM JST
from Verifier import Verifier

class SpaceVerifier(Verifier):
    """Class SpaceVerifier
    """
    # Attributes:
    
    # Operations
    def verify(self):
        """function verify
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 05 Sep 2014 02:14:39 PM JST

* Fri 05 Sep 2014 02:14:39 PM JST

* Fri 05 Sep 2014 02:14:39 PM JST
    # Attributes:

* Fri 05 Sep 2014 02:14:48 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 02:14:53 PM JST
self.
* Fri 05 Sep 2014 02:14:53 PM JST
return self.
* Fri 05 Sep 2014 02:15:26 PM JST

* Fri 05 Sep 2014 02:15:26 PM JST
SpaceVerifier
* Fri 05 Sep 2014 02:15:28 PM JST
spaceverifier 
* Fri 05 Sep 2014 02:17:18 PM JST
Verifer
* Fri 05 Sep 2014 02:18:30 PM JST
(grep-edit-finish-edit)
* Fri 05 Sep 2014 02:23:44 PM JST
grep-edit-finish-save
* Fri 05 Sep 2014 02:24:35 PM JST
  
* Fri 05 Sep 2014 02:24:47 PM JST
;;;###autoload
* Fri 05 Sep 2014 02:24:54 PM JST
grep
* Fri 05 Sep 2014 02:24:55 PM JST
grep-edit-finish-save
* Fri 05 Sep 2014 02:31:21 PM JST
    
* Fri 05 Sep 2014 02:34:31 PM JST

class ValueVerifierAbstract:
    """Abstract class ValueVerifierAbstract
    """
    # Attributes:
    
    # Operations
    def verify(self):
        """function verify
        
        returns 
        """
        raise NotImplementedError()
    


* Fri 05 Sep 2014 02:35:19 PM JST
from Verifier import Verifier
from ValueVerifierAbstract import ValueVerifierAbstract

class ValueVerifier(ValueVerifierAbstract):
    """Class ValueVerifier
    """
    # Attributes:
    verifiers = None  # () 
    
    # Operations
    def get_verifiers(self):
        """function get_verifiers
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_verifiers(self):
        """function set_verifiers
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def verify(self):
        """function verify
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 05 Sep 2014 02:35:37 PM JST

* Fri 05 Sep 2014 02:35:37 PM JST

* Fri 05 Sep 2014 02:35:37 PM JST
from Verifier import Verifier

* Fri 05 Sep 2014 02:36:05 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 02:36:18 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 02:36:22 PM JST
_
* Fri 05 Sep 2014 02:36:23 PM JST
self
* Fri 05 Sep 2014 02:36:23 PM JST
return self
* Fri 05 Sep 2014 02:36:36 PM JST
None # should raise NotImplementedError()
* Fri 05 Sep 2014 04:01:55 PM JST
from Command import Command

class ParameterHandler:
    """Abstract class ParameterHandler
    """
    # Attributes:
    
    # Operations
    def get_parameter(self):
        """function get_parameter
        
        returns 
        """
        raise NotImplementedError()
    


* Fri 05 Sep 2014 04:02:27 PM JST

* Fri 05 Sep 2014 04:02:27 PM JST

* Fri 05 Sep 2014 04:02:27 PM JST
from Command import Command

* Fri 05 Sep 2014 04:02:38 PM JST

* Fri 05 Sep 2014 04:02:38 PM JST

* Fri 05 Sep 2014 04:02:38 PM JST
    # Attributes:

* Fri 05 Sep 2014 04:03:20 PM JST
from ValueVerifierAbstract import ValueVerifierAbstract
from ParameterAbstract import ParameterAbstract
from ParameterHandler import ParameterHandler

class AnyParameterHandler(ParameterHandler):
    """Class AnyParameterHandler
    """
    # Attributes:
    parameter = None  # () 
    verifier = None  # () 
    
    # Operations
    def set_parameter(self):
        """function set_parameter
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_parameter(self):
        """function get_parameter
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_value(self):
        """function get_value
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_value(self):
        """function set_value
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def isverify(self):
        """function isverify
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 05 Sep 2014 04:04:07 PM JST

* Fri 05 Sep 2014 04:04:07 PM JST

* Fri 05 Sep 2014 04:04:07 PM JST
from ParameterAbstract import ParameterAbstract

* Fri 05 Sep 2014 06:05:24 PM JST

* Fri 05 Sep 2014 06:05:25 PM JST

* Fri 05 Sep 2014 06:05:25 PM JST
    parameter = None  # ()

* Fri 05 Sep 2014 06:06:01 PM JST
from . import 
* Fri 05 Sep 2014 06:07:06 PM JST
Verifiers
* Sat 06 Sep 2014 12:11:31 AM JST

* Sat 06 Sep 2014 12:11:31 AM JST

* Sat 06 Sep 2014 12:11:31 AM JST
from .valueverifierabstract import ValueVerifierAbstract

* Sat 06 Sep 2014 12:12:03 AM JST
ValueVerifier
* Sat 06 Sep 2014 12:15:29 AM JST
SingletonMeta
* Sat 06 Sep 2014 12:16:54 AM JST
    _instance = None
    def __new__(class_, *args, **kwargs):
        if not isinstance(class_._instance, class_):
            class_._instance = object.__new__(class_, *args, **kwargs)
        return class_._instance

* Sat 06 Sep 2014 12:17:24 AM JST
from aquostv.parameter.verifier import 
* Sat 06 Sep 2014 12:18:29 AM JST
    __instance = None
    def __new__(class_, *args, **kwargs):
        if not isinstance(class_.__instance, class_):
            class_.__instance = object.__new__(class_, *args, **kwargs)
        return class_.__instance

* Sat 06 Sep 2014 12:19:50 AM JST

* Sat 06 Sep 2014 12:19:50 AM JST

* Sat 06 Sep 2014 12:19:50 AM JST
    verifier = None  # ()

* Sat 06 Sep 2014 12:19:52 AM JST

* Sat 06 Sep 2014 12:19:52 AM JST

* Sat 06 Sep 2014 12:19:52 AM JST
    verifier = None  # ()

* Sat 06 Sep 2014 12:20:56 AM JST
return None # should raise NotImplementedError()
* Sat 06 Sep 2014 12:21:05 AM JST
None # should raise NotImplementedError()
* Sat 06 Sep 2014 12:21:26 AM JST
None # should raise NotImplementedError()
* Sat 06 Sep 2014 12:21:49 AM JST
None # should raise NotImplementedError()
* Sat 06 Sep 2014 12:22:36 AM JST
None # should raise NotImplementedError()
* Sat 06 Sep 2014 12:22:41 AM JST
None # should raise NotImplementedError()
* Sat 06 Sep 2014 12:22:41 AM JST
None # should raise NotImplementedError()        return 

* Sat 06 Sep 2014 12:22:43 PM JST
from AnyParameterHandler import AnyParameterHandler

class NumbersParameterHandler(AnyParameterHandler):
    """Class NumbersParameterHandler
    """
    # Attributes:
    parameter = None  # () 
    verifier = None  # () 
    
    # Operations
    def get_numbers(self):
        """function get_numbers
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def next(self):
        """function next
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def prev(self):
        """function prev
        
        returns 
        """
        return None # should raise NotImplementedError()
    

* Sat 06 Sep 2014 01:07:24 PM JST
from . import verifier
* Sat 06 Sep 2014 03:35:55 PM JST
    _verifier = verifier.ValueVerifier(
        verifier.QuesionVerifer(),
        verifier.SpaceVerifier(),
        verifier.MinusVerifier(),
        )

* Sat 06 Sep 2014 03:36:09 PM JST
            
* Sat 06 Sep 2014 03:36:10 PM JST
            
* Sat 06 Sep 2014 03:37:22 PM JST
verifier.ValueVerifier(
            verifier.QuesionVerifer(), verifier.SpaceVerifier(),
            verifier.MinusVerifier(),)
* Sat 06 Sep 2014 03:38:01 PM JST
    def _get_value_verifier(self, ):
        r"""SUMMARY

        _get_verifiers()

        @Return:

        @Error:
        """
        return verifier.ValueVerifier(
            verifier.QuesionVerifer(), verifier.SpaceVerifier(),
            verifier.MinusVerifier(),)

* Sat 06 Sep 2014 03:39:38 PM JST
verifier.ValueVerifier(
            verifier.QuesionVerifer(), verifier.SpaceVerifier(),
            verifier.MinusVerifier(),)
* Sat 06 Sep 2014 03:43:27 PM JST

* Sat 06 Sep 2014 03:43:27 PM JST

* Sat 06 Sep 2014 03:43:27 PM JST
from . import verifier

* Sat 06 Sep 2014 03:43:45 PM JST

* Sat 06 Sep 2014 03:43:45 PM JST

* Sat 06 Sep 2014 03:43:45 PM JST
from . import verifier

* Sat 06 Sep 2014 05:03:35 PM JST
E
* Sat 06 Sep 2014 05:03:41 PM JST
junk
* Sat 06 Sep 2014 05:03:41 PM JST
170338.junk
* Sat 06 Sep 2014 05:03:41 PM JST
06-170338.junk
* Sat 06 Sep 2014 05:03:41 PM JST
09-06-170338.junk
* Sat 06 Sep 2014 05:03:42 PM JST
2014-09-06-170338.junk
* Sat 06 Sep 2014 05:04:06 PM JST

* Sat 06 Sep 2014 05:04:06 PM JST

* Sat 06 Sep 2014 05:04:06 PM JST
        pass

* Sat 06 Sep 2014 05:04:30 PM JST
__
* Sat 06 Sep 2014 05:04:31 PM JST
Tes.__
* Sat 06 Sep 2014 05:04:37 PM JST
world
* Sat 06 Sep 2014 05:09:44 PM JST
, abstractmethod
* Sat 06 Sep 2014 05:12:14 PM JST

* Sat 06 Sep 2014 05:12:14 PM JST

* Sat 06 Sep 2014 05:12:14 PM JST
from abc import ABCMeta, abstractmethod

* Sat 06 Sep 2014 05:12:49 PM JST

* Sat 06 Sep 2014 05:12:49 PM JST

* Sat 06 Sep 2014 05:12:49 PM JST
    __metaclass__ = ABCMeta

* Sat 06 Sep 2014 05:12:51 PM JST

* Sat 06 Sep 2014 05:12:51 PM JST

* Sat 06 Sep 2014 05:12:51 PM JST
    @abstractmethod

* Sat 06 Sep 2014 05:12:58 PM JST

* Sat 06 Sep 2014 05:12:58 PM JST

* Sat 06 Sep 2014 05:12:58 PM JST
    @abstractmethod

* Sat 06 Sep 2014 05:14:21 PM JST
.Parameter
* Sat 06 Sep 2014 05:15:32 PM JST
.get()
* Sat 06 Sep 2014 05:16:43 PM JST
parameterhandler
* Sat 06 Sep 2014 05:16:59 PM JST
verifier
* Sat 06 Sep 2014 05:17:08 PM JST
verifier
* Sat 06 Sep 2014 05:17:11 PM JST

* Sat 06 Sep 2014 05:17:11 PM JST

* Sat 06 Sep 2014 05:17:11 PM JST
        self._parameter = Parameter(parameter)

* Sat 06 Sep 2014 05:17:56 PM JST

* Sat 06 Sep 2014 05:17:56 PM JST

* Sat 06 Sep 2014 05:17:56 PM JST
from .parameter import Parameter

* Sat 06 Sep 2014 05:18:49 PM JST

* Sat 06 Sep 2014 05:18:49 PM JST

* Sat 06 Sep 2014 05:18:49 PM JST
        # super(AnyParameterHandler, self).__init__(param)

* Sat 06 Sep 2014 05:23:21 PM JST
get_parameter
* Sat 06 Sep 2014 05:25:13 PM JST

* Sat 06 Sep 2014 05:25:13 PM JST

* Sat 06 Sep 2014 05:25:13 PM JST
        super

* Sat 06 Sep 2014 05:33:28 PM JST
leftaligner
* Sat 06 Sep 2014 05:36:05 PM JST
AnyParameterHandler
* Sat 06 Sep 2014 05:40:00 PM JST
from . import parameterhandler
from . import verifier

* Sat 06 Sep 2014 05:40:08 PM JST
parameterhandler.ParameterHandler
* Sat 06 Sep 2014 05:40:17 PM JST
verifier
* Sat 06 Sep 2014 05:40:19 PM JST
Verifier
* Sat 06 Sep 2014 05:41:04 PM JST
from . import parameterhandler
from . import verifier

* Sat 06 Sep 2014 05:41:16 PM JST
parameterhandler.ParameterHandler
* Sat 06 Sep 2014 05:42:00 PM JST

* Sat 06 Sep 2014 05:42:00 PM JST

* Sat 06 Sep 2014 05:42:01 PM JST
        self._numbers = numbers

* Sat 06 Sep 2014 05:42:05 PM JST
        self._verifier = verifier.ValueVerifier(
            [verifier.SpaceVerifier(),
             verifier.QuesionVerifier(),
             verifier.MinusVerifier()])

* Sat 06 Sep 2014 05:45:45 PM JST
None # should raise NotImplementedError()
* Sat 06 Sep 2014 05:53:12 PM JST
.sort()
* Sat 06 Sep 2014 05:53:30 PM JST
sort()
* Sat 06 Sep 2014 05:53:41 PM JST
len()
* Sat 06 Sep 2014 05:53:43 PM JST
.index(3)
* Sat 06 Sep 2014 05:53:45 PM JST
[1,2,3]
* Sat 06 Sep 2014 05:54:08 PM JST
self._get_numbers_obj().get_numbers()
* Sat 06 Sep 2014 05:54:24 PM JST

* Sat 06 Sep 2014 05:54:24 PM JST

* Sat 06 Sep 2014 05:54:24 PM JST
        numbers.sort()

* Sat 06 Sep 2014 05:55:17 PM JST
get_
* Sat 06 Sep 2014 05:55:25 PM JST
        param = self._parameter.get()
        if not param.replace(' ', '').isdigit():
            raise StandardError()

* Sat 06 Sep 2014 05:58:51 PM JST

* Sat 06 Sep 2014 05:58:51 PM JST

* Sat 06 Sep 2014 05:58:51 PM JST
        if num:

* Sat 06 Sep 2014 06:01:50 PM JST
self.index(num)
* Sat 06 Sep 2014 06:01:54 PM JST

* Sat 06 Sep 2014 06:01:54 PM JST

* Sat 06 Sep 2014 06:01:54 PM JST
        index = 

* Sat 06 Sep 2014 06:01:57 PM JST
self.index(num)
* Sat 06 Sep 2014 06:02:00 PM JST

* Sat 06 Sep 2014 06:02:00 PM JST

* Sat 06 Sep 2014 06:02:00 PM JST
        index = 

* Sat 06 Sep 2014 06:02:26 PM JST

* Sat 06 Sep 2014 06:02:26 PM JST

* Sat 06 Sep 2014 06:02:26 PM JST
        param = self._get_digit_value()

* Sat 06 Sep 2014 06:02:27 PM JST
        param = self._get_digit_value()

* Sat 06 Sep 2014 06:02:27 PM JST
        param = self._get_digit_value()
        numbers = self.get_numbers()

* Sat 06 Sep 2014 06:04:40 PM JST
    def set_value(self, value):
        """function set_value

        returns
        """
        if not self.isverify(value):
            # TODO: (Atami) [2014/09/06]
            raise StandardError()
        self.get_parameter().set(value)

* Sat 06 Sep 2014 06:05:15 PM JST
    def set_value(self, value):
        """function set_value

        returns
        """
        if not self.isverify(value):
            # TODO: (Atami) [2014/09/06]
            raise StandardError()
        self.get_parameter().set(value)

    def isverify(self, value):
        """function isverify

        returns
        """
        return self._verifier.verify(value)

* Sat 06 Sep 2014 06:05:57 PM JST
_get_digit_value
* Sat 06 Sep 2014 06:06:18 PM JST

* Sat 06 Sep 2014 06:06:18 PM JST

* Sat 06 Sep 2014 06:06:18 PM JST
        return None # should raise NotImplementedError()

* Sat 06 Sep 2014 06:06:42 PM JST
        value = self._get_digit_value()
        numobj = self._get_numbers_obj()
        self.set_value(numobj.next(value))

* Sat 06 Sep 2014 06:07:46 PM JST
NumbersParameterHandler
* Sat 06 Sep 2014 06:14:30 PM JST
align
* Sat 06 Sep 2014 06:14:36 PM JST
parameter
* Sat 06 Sep 2014 06:14:56 PM JST
parameterabstract
* Sat 06 Sep 2014 06:15:10 PM JST
length4leftalign
* Sun 07 Sep 2014 01:05:55 AM JST
Length4LeftAlign
* Sun 07 Sep 2014 01:08:24 AM JST
length4leftalign
* Sun 07 Sep 2014 01:08:32 AM JST
length4leftalign
* Sun 07 Sep 2014 01:17:12 AM JST
se
* Sun 07 Sep 2014 01:17:12 AM JST
parameter.se
* Sun 07 Sep 2014 01:17:12 AM JST
self.parameter.se
* Sun 07 Sep 2014 01:18:41 AM JST
Use of super on an old style class
* Sun 07 Sep 2014 01:21:35 AM JST

* Sun 07 Sep 2014 01:21:35 AM JST

* Sun 07 Sep 2014 01:21:35 AM JST
        Para

* Sun 07 Sep 2014 01:22:06 AM JST
parameter.Parameter
* Sun 07 Sep 2014 01:22:53 AM JST
        if not self._verifier.verify(param):
            # TODO: (Atami) [2014/09/07]
            raise StandardError()

* Sun 07 Sep 2014 01:25:17 AM JST
from . import parameter
from . import verifier

* Sun 07 Sep 2014 01:25:43 AM JST
    def __init__(self, param):
        r"""

        @Arguments:
        - `parameter`:
        """
        self._verifier = verifier.ValueVerifier(
            [verifier.SpaceVerifier(),
             verifier.QuesionVerifier(),
             verifier.MinusVerifier()])
        # check verify
        if not self._verifier.verify(param):
            # TODO: (Atami) [2014/09/07]
            raise StandardError()
        parameter.Parameter.__init__(self, parameter)

* Sun 07 Sep 2014 01:27:12 AM JST
    def get_verifier(self, ):
        r"""SUMMARY

        get_verifier()

        @Return:

        @Error:
        """
        return self._verifier


* Sun 07 Sep 2014 01:28:07 AM JST
parameter
* Sun 07 Sep 2014 01:28:16 AM JST
Parameter
* Sun 07 Sep 2014 01:28:16 AM JST
parameter.Parameter
* Sun 07 Sep 2014 01:33:15 AM JST
        if not self._verifier.verify(param):
            # TODO: (Atami) [2014/09/07]
            raise StandardError()

* Sun 07 Sep 2014 01:33:51 AM JST
        if not self._verifier.verify(param):
            # TODO: (Atami) [2014/09/07]
            raise StandardError()

* Sun 07 Sep 2014 01:36:07 AM JST
parameter.Parameter
* Sun 07 Sep 2014 01:36:41 AM JST
        if not self._verifier.verify(param):
            # TODO: (Atami) [2014/09/07]
            raise StandardError()

* Sun 07 Sep 2014 01:36:45 AM JST

* Sun 07 Sep 2014 01:36:45 AM JST

* Sun 07 Sep 2014 01:36:45 AM JST
        # check verify

* Sun 07 Sep 2014 01:37:34 AM JST
RangeParameter
* Sun 07 Sep 2014 01:58:12 AM JST
        param = self.get_value()
        if not isinstance(param, int):
            raise StandardError()
        self.set(param + 1)

* Sun 07 Sep 2014 02:09:25 AM JST
        param = self.get_value()
        if not isinstance(param, int):
            raise StandardError()

* Sun 07 Sep 2014 02:09:45 AM JST
param = self._get_int_value()
* Sun 07 Sep 2014 02:10:48 AM JST
from . import parameter
from . import verifier

* Sun 07 Sep 2014 02:10:56 AM JST
class RangeParameter(parameter.Parameter):
    r"""RangeParameter

    RangeParameter is a parameter.Parameter.
    Responsibility:
    """
    def __init__(self, param, min_, max_):
        r"""

        @Arguments:
        - `parameter`:
        """
        self._verifier = verifier.ValueVerifier(
            [verifier.SpaceVerifier(),
             verifier.QuesionVerifier(),
             verifier.MinusVerifier(),
             verifier.RangeVerifier(min_, max_)])
        # check verify
        self._verify(param)
        parameter.Parameter.__init__(self, param)

    def _verify(self, param):
        r"""SUMMARY

        _verify(param)

        @Arguments:
        - `param`:

        @Return:

        @Error:
        """
        if not self._verifier.verify(param):
            # TODO: (Atami) [2014/09/07]
            raise StandardError()

    def set(self, param):
        r"""SUMMARY

        set(param)

        @Arguments:
        - `param`:

        @Return:

        @Error:
        """
        self._verify(param)
        parameter.Parameter.set(self, param)

    def get_verifer(self, ):
        r"""SUMMARY

        get()

        @Return:

        @Error:
        """
        return self._verifier

    def _get_int_value(self, ):
        r"""SUMMARY

        _get_int_value()

        @Return:

        @Error:
        """
        param = self.get_value()
        if not isinstance(param, int):
            raise StandardError()
        return param

    def increment(self, ):
        r"""SUMMARY

        increment()

        @Return:

        @Error:
        """
        param = self._get_int_value()
        self.set(param + 1)

    def decrement(self, ):
        r"""SUMMARY

        decrement()

        @Return:

        @Error:
        """
        param = self._get_int_value()
        self.set(param - 1)

* Sun 07 Sep 2014 02:11:45 AM JST
increment
* Sun 07 Sep 2014 02:11:52 AM JST
decrement
* Sun 07 Sep 2014 02:13:24 AM JST
RangeVerifier
* Sun 07 Sep 2014 03:37:48 PM JST
    def __add__(self):
        """function __add__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __and__(self):
        """function __and__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __cmp__(self):
        """function __cmp__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __div__(self):
        """function __div__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __divmod__(self):
        """function __divmod__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __float__(self):
        """function __float__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __floordiv__(self):
        """function __floordiv__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __hash__(self):
        """function __hash__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __hex__(self):
        """function __hex__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __index__(self):
        """function __index__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __int__(self):
        """function __int__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __invert__(self):
        """function __invert__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __long__(self):
        """function __long__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __lshift__(self):
        """function __lshift__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __mod__(self):
        """function __mod__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __mul__(self):
        """function __mul__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __neg__(self):
        """function __neg__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __nonzero__(self):
        """function __nonzero__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __oct__(self):
        """function __oct__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __or__(self):
        """function __or__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __radd__(self):
        """function __radd__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rand__(self):
        """function __rand__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rdiv__(self):
        """function __rdiv__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rdivmod__(self):
        """function __rdivmod__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __reduce__(self):
        """function __reduce__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rfloordiv__(self):
        """function __rfloordiv__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rlshift__(self):
        """function __rlshift__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rmod__(self):
        """function __rmod__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rmul__(self):
        """function __rmul__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ror__(self):
        """function __ror__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rrshift__(self):
        """function __rrshift__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rshift__(self):
        """function __rshift__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rsub__(self):
        """function __rsub__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __sub__(self):
        """function __sub__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __xor__(self):
        """function __xor__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get(self):
        """function get
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set(self, param):
        """function set
        
        param: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def ___get_int_value(self):
        """function _get_int_value
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __align(self):
        """function align
        
        returns 
        """
        return None # should raise NotImplementedError()

* Sun 07 Sep 2014 03:39:51 PM JST
        param = self._parameter.replace(' ', '')
        if param.isdigit():
            return int(param)

* Sun 07 Sep 2014 03:40:05 PM JST
int(param)
* Sun 07 Sep 2014 03:40:07 PM JST

* Sun 07 Sep 2014 03:40:07 PM JST

* Sun 07 Sep 2014 03:40:07 PM JST
            return 

* Sun 07 Sep 2014 03:43:40 PM JST
None # should raise NotImplementedError()
* Sun 07 Sep 2014 03:49:19 PM JST
    def __add__(self, other):
        """function __add__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __and__(self, other):
        """function __and__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __cmp__(self, other):
        """function __cmp__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __div__(self, other):
        """function __div__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __divmod__(self, other):
        """function __divmod__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __float__(self, other):
        """function __float__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __floordiv__(self, other):
        """function __floordiv__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __hash__(self):
        """function __hash__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __hex__(self):
        """function __hex__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __index__(self):
        """function __index__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __int__(self):
        """function __int__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __invert__(self):
        """function __invert__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __long__(self):
        """function __long__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __lshift__(self):
        """function __lshift__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __mod__(self, other):
        """function __mod__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __mul__(self, other):
        """function __mul__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __neg__(self):
        """function __neg__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __nonzero__(self):
        """function __nonzero__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __oct__(self):
        """function __oct__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __or__(self):
        """function __or__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __radd__(self, other):
        """function __radd__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rand__(self, other):
        """function __rand__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rdiv__(self, other):
        """function __rdiv__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rdivmod__(self, other):
        """function __rdivmod__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __reduce__(self, other):
        """function __reduce__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rfloordiv__(self):
        """function __rfloordiv__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rlshift__(self):
        """function __rlshift__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rmod__(self, other):
        """function __rmod__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rmul__(self, other):
        """function __rmul__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ror__(self):
        """function __ror__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rrshift__(self):
        """function __rrshift__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rshift__(self):
        """function __rshift__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rsub__(self, other):
        """function __rsub__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __sub__(self, other):
        """function __sub__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __xor__(self):
        """function __xor__
        
        returns 
        """
        return None # should raise NotImplementedError()

* Sun 07 Sep 2014 04:21:09 PM JST
from singledispatch import singledispatch
* Sun 07 Sep 2014 04:21:59 PM JST

* Sun 07 Sep 2014 04:21:59 PM JST

* Sun 07 Sep 2014 04:21:59 PM JST
        super(Parameter, self).__add__()

* Sun 07 Sep 2014 04:24:03 PM JST
self._get_int_value()
* Sun 07 Sep 2014 04:24:09 PM JST

* Sun 07 Sep 2014 04:24:09 PM JST

* Sun 07 Sep 2014 04:24:09 PM JST
        param =

* Sun 07 Sep 2014 04:45:37 PM JST
None # should raise NotImplementedError()
* Sun 07 Sep 2014 04:50:17 PM JST
None # should raise NotImplementedError()
* Sun 07 Sep 2014 04:51:38 PM JST
None # should raise NotImplementedError()
* Sun 07 Sep 2014 04:55:18 PM JST
None # should raise NotImplementedError()
* Sun 07 Sep 2014 04:55:59 PM JST
self._parameter.replace(' ', '')
* Sun 07 Sep 2014 05:01:20 PM JST
self._get_int_value()
* Sun 07 Sep 2014 05:02:13 PM JST
None # should raise NotImplementedError()
* Sun 07 Sep 2014 05:02:44 PM JST
        if not isinstance(other, int):
            raise TypeError()

* Sun 07 Sep 2014 05:04:15 PM JST

* Sun 07 Sep 2014 05:04:15 PM JST

* Sun 07 Sep 2014 05:04:15 PM JST
        super(Parameter, self).__neg__()

* Sun 07 Sep 2014 05:10:38 PM JST
None # should raise NotImplementedError()
* Sun 07 Sep 2014 05:11:08 PM JST
    def __sub__(self, other):
        """function __sub__

        other:

        returns
        """
        return

* Sun 07 Sep 2014 05:11:29 PM JST
    def __sub__(self, other):
        """function __sub__

        other:

        returns
        """
        return


* Sun 07 Sep 2014 05:11:37 PM JST
@singledispatch
* Sun 07 Sep 2014 05:11:55 PM JST
None # should raise NotImplementedError()
* Sun 07 Sep 2014 05:12:29 PM JST

* Sun 07 Sep 2014 05:12:29 PM JST

* Sun 07 Sep 2014 05:12:29 PM JST
    @__sub__.register(int)

* Sun 07 Sep 2014 05:12:32 PM JST
        if not isinstance(other, int):
            raise TypeError()

* Sun 07 Sep 2014 05:13:07 PM JST
self.__class__(self._get_int_value() + other)
* Sun 07 Sep 2014 05:15:58 PM JST
self.
* Sun 07 Sep 2014 05:16:03 PM JST
reuturn
* Sun 07 Sep 2014 05:17:47 PM JST
None # should raise NotImplementedError()
* Sun 07 Sep 2014 05:20:11 PM JST
Parameter
* Sun 07 Sep 2014 05:22:07 PM JST

* Sun 07 Sep 2014 05:22:08 PM JST

* Sun 07 Sep 2014 05:22:08 PM JST
        return

* Sun 07 Sep 2014 05:22:50 PM JST
singledispatch
* Sun 07 Sep 2014 05:25:07 PM JST
pass
* Sun 07 Sep 2014 05:26:02 PM JST
from aquostv.parameter.parameter import Parameter
* Sun 07 Sep 2014 05:27:21 PM JST
return self.__class__(self._get_int_value() + other)
* Sun 07 Sep 2014 05:27:36 PM JST
return 
* Sun 07 Sep 2014 05:27:57 PM JST
return self.concat(other)
* Sun 07 Sep 2014 05:28:10 PM JST

* Sun 07 Sep 2014 05:28:11 PM JST

* Sun 07 Sep 2014 05:28:11 PM JST
    @singledispatch

* Sun 07 Sep 2014 05:28:16 PM JST

* Sun 07 Sep 2014 05:28:16 PM JST

* Sun 07 Sep 2014 05:28:16 PM JST
from singledispatch import singledispatch

* Sun 07 Sep 2014 05:28:48 PM JST
from aquostv.parameter.parameter import Parameter
* Sun 07 Sep 2014 05:44:51 PM JST

* Sun 07 Sep 2014 05:44:51 PM JST

* Sun 07 Sep 2014 05:44:52 PM JST
        super(Parameter, self).__iadd__()

* Sun 07 Sep 2014 05:45:13 PM JST

* Sun 07 Sep 2014 05:45:13 PM JST

* Sun 07 Sep 2014 05:45:13 PM JST
        return 

* Sun 07 Sep 2014 05:46:05 PM JST

* Sun 07 Sep 2014 05:46:06 PM JST

* Sun 07 Sep 2014 05:46:06 PM JST

* Sun 07 Sep 2014 05:46:08 PM JST

* Sun 07 Sep 2014 05:46:08 PM JST

* Sun 07 Sep 2014 05:46:08 PM JST
        super(Parameter, self).__isub__()

* Sun 07 Sep 2014 05:46:12 PM JST
return 
* Sun 07 Sep 2014 05:46:15 PM JST
        if not isinstance(other, int):
            raise TypeError()

* Sun 07 Sep 2014 05:46:58 PM JST
defi
* Sun 07 Sep 2014 05:50:22 PM JST
Parameter
* Sun 07 Sep 2014 05:50:37 PM JST
RangeParameter
* Sun 07 Sep 2014 05:55:23 PM JST
D 
* Sun 07 Sep 2014 05:56:59 PM JST

* Sun 07 Sep 2014 05:57:00 PM JST

* Sun 07 Sep 2014 05:57:00 PM JST
        self._verifiers = verifiers

* Sun 07 Sep 2014 05:59:48 PM JST
verifier
* Sun 07 Sep 2014 06:02:47 PM JST
from abstract import SingletonMeta
* Sun 07 Sep 2014 06:03:06 PM JST
class MinusVerifier(Verifier):
    """Class MinusVerifier
    """
    # Singleton
    __instance = None
    def __new__(class_, *args, **kwargs):
        if not isinstance(class_.__instance, class_):
            class_.__instance = object.__new__(class_, *args, **kwargs)
        return class_.__instance

    # Operations
    def get_name(self, ):
        r"""SUMMARY

        get_name()

        @Return:

        @Error:
        """
        return '-'

    def verify(self, value):
        """function verify

        returns
        """
        return '-' == value

* Sun 07 Sep 2014 06:03:55 PM JST

* Sun 07 Sep 2014 06:03:55 PM JST

* Sun 07 Sep 2014 06:03:55 PM JST
from abstract import SingletonMeta

* Sun 07 Sep 2014 06:04:09 PM JST
class QuesionVerifier(Verifier):
    """Class QuesionVerifier
    """
    # Singleton
    __instance = None
    def __new__(class_, *args, **kwargs):
        if not isinstance(class_.__instance, class_):
            class_.__instance = object.__new__(class_, *args, **kwargs)
        return class_.__instance

    # Operations
    def get_name(self, ):
        r"""SUMMARY

        get_name()

        @Return:

        @Error:
        """
        return '?'

    def verify(self, value):
        """function verify

        returns
        """
        return '?' == value

* Sun 07 Sep 2014 06:04:23 PM JST
class_
* Sun 07 Sep 2014 06:05:12 PM JST
class SpaceVerifier(Verifier):
    """Class SpaceVerifier
    """
    # Singleton
    __instance = None
    def __new__(class_, *args, **kwargs):
        if not isinstance(class_.__instance, class_):
            class_.__instance = object.__new__(class_, *args, **kwargs)
        return class_.__instance

    # Operations
    def verify(self, value):
        """function verify

        returns
        """
        return ' ' == value

* Sun 07 Sep 2014 06:06:33 PM JST
class NumbersVerifier(verifier.Verifier):
    """Class NumbersVerifer
    """
    # Attributes:
    def __init__(self, numbers=[]):
        r"""

        @Arguments:
        - `numbers`:
        """
        self._numbers = numbers

    # Operations
    def get_name(self, ):
        r"""SUMMARY

        get_name()

        @Return:

        @Error:
        """
        return 'numbers'

    def verify(self, value):
        """function verify

        returns
        """
        return value in self._numbers

    def set_numbers(self, numbers):
        """function set_numbers

        returns
        """
        self._numbers = numbers

    def get_numbers(self):
        """function get_numbers

        returns
        """
        return self._numbers

    def next(self, num):
        r"""SUMMARY

        next(num)

        @Arguments:
        - `num`:

        @Return:

        @Error:
        """
        return self._numbers[self.index(num) + 1]

    def prev(self, num):
        r"""SUMMARY

        prev(num)

        @Arguments:
        - `num`:

        @Return:

        @Error:
        """
        return self._numbers[self.index(num) - 1]

    def index(self, num):
        r"""SUMMARY

        index(num)

        @Arguments:
        - `num`:

        @Return:

        @Error:
        """
        return self._numbers.index(num)

    def __len__(self):
        return len(self._numbers)

* Sun 07 Sep 2014 06:06:43 PM JST
verifier.
* Sun 07 Sep 2014 06:07:33 PM JST
numbers
* Sun 07 Sep 2014 06:09:22 PM JST
class RangeVerifier(verifier.Verifier):
    """Class RangeVerifier
    """
    # Attributes:
    def __init__(self, min, max):
        r"""

        @Arguments:
        - `min`:
        - `max`:
        """
        self._min = min
        self._max = max

    # Operations
    def get_name(self, ):
        r"""SUMMARY

        get_name()

        @Return:

        @Error:
        """
        return 'range'

    def verify(self, value):
        """function verify

        returns
        """
        return self._min <= value <= self._max

    def set_min(self, min):
        """function set_min

        returns
        """
        self._min = min

    def get_min(self):
        """function get_min

        returns
        """
        return self._min

    def set_max(self, max):
        """function set_max

        returns
        """
        self._max = max

    def get_max(self):
        """function get_max

        returns
        """
        return self._max

* Sun 07 Sep 2014 06:09:27 PM JST
verifier.
* Sun 07 Sep 2014 06:14:19 PM JST
Verifier', 
* Sun 07 Sep 2014 06:15:34 PM JST
verifier
* Sun 07 Sep 2014 06:23:19 PM JST
from abc import ABCMeta, abstractmethod


class ValueVerifierAbstract:
    """Abstract class ValueVerifierAbstract
    """
    __metaclass__ = ABCMeta

    # Operations
    @abstractmethod
    def verify(self):
        raise NotImplementedError()

* Sun 07 Sep 2014 06:23:28 PM JST

* Sun 07 Sep 2014 06:23:28 PM JST

* Sun 07 Sep 2014 06:23:28 PM JST
from .valueverifierabstract import ValueVerifierAbstract

* Sun 07 Sep 2014 11:49:52 PM JST
index()
* Sun 07 Sep 2014 11:51:50 PM JST
val
* Sun 07 Sep 2014 11:53:06 PM JST
Parameter
* Sun 07 Sep 2014 11:58:32 PM JST

* Sun 07 Sep 2014 11:58:32 PM JST

* Sun 07 Sep 2014 11:58:32 PM JST
        super(Parameter, self).__pos__()

* Sun 07 Sep 2014 11:59:52 PM JST

* Sun 07 Sep 2014 11:59:52 PM JST

* Sun 07 Sep 2014 11:59:52 PM JST
        super(Parameter, self).__neg__()

* Mon 08 Sep 2014 12:00:25 AM JST
p=Parameter('1')
* Mon 08 Sep 2014 12:00:51 AM JST
p=Parameter('1')
* Mon 08 Sep 2014 12:02:02 AM JST
int(param)
* Mon 08 Sep 2014 12:02:15 AM JST
expect 
* Mon 08 Sep 2014 12:03:59 AM JST
self._get_trimed()
* Mon 08 Sep 2014 12:04:03 AM JST

* Mon 08 Sep 2014 12:04:03 AM JST

* Mon 08 Sep 2014 12:04:03 AM JST
        param = 

* Mon 08 Sep 2014 12:04:07 AM JST
int(self._get_trimed())
* Mon 08 Sep 2014 12:04:10 AM JST

* Mon 08 Sep 2014 12:04:10 AM JST

* Mon 08 Sep 2014 12:04:10 AM JST
            digit = 

* Mon 08 Sep 2014 12:04:15 AM JST
int(self._get_trimed())
* Mon 08 Sep 2014 12:04:24 AM JST
        try:
            return int(self._get_trimed())
        except ValueError:
            raise StandardError()

* Mon 08 Sep 2014 12:04:33 AM JST
int(self._get_trimed())
* Mon 08 Sep 2014 12:11:35 AM JST

* Mon 08 Sep 2014 12:11:35 AM JST

* Mon 08 Sep 2014 12:11:36 AM JST
                self.set(digit)

* Mon 08 Sep 2014 05:46:09 AM JST
from Parameter import Parameter

class Parameter:
    """Class Parameter
    """
    # Attributes:
    __parameter = None  # (string) 
    
    # Operations
    def get(self):
        """function get
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set(self, param):
        """function set
        
        param: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __add__(self, other):
        """function __add__
        
        other: 
        
        returns Parameter
        """
        return None # should raise NotImplementedError()
    
    def __sub__(self, other):
        """function __sub__
        
        other: 
        
        returns Parameter
        """
        return None # should raise NotImplementedError()
    
    def __int__(self):
        """function __int__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __long__(self):
        """function __long__
        
        returns long
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns string
        """
        return None # should raise NotImplementedError()
    
    def __cmp__(self, other):
        """function __cmp__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __div__(self, other):
        """function __div__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __hash__(self):
        """function __hash__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns string
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, key):
        """function __getitem__
        
        key: int
        
        returns string
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, key, val):
        """function __setitem__
        
        key: int
        val: string
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __lt__(self, other):
        """function __lt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __le__(self, other):
        """function __le__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __gt__(self, other):
        """function __gt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ge__(self, other):
        """function __ge__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __pos__(self):
        """function __pos__
        
        returns Parameter
        """
        return None # should raise NotImplementedError()
    
    def __neg__(self):
        """function __neg__
        
        returns Parameter
        """
        return None # should raise NotImplementedError()
    
    def __iadd__(self, other):
        """function __iadd__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __isub__(self, other):
        """function __isub__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __imul__(self, other):
        """function __imul__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __idiv__(self, other):
        """function __idiv__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ilshift__(self, other):
        """function __ilshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __irshift__(self, other):
        """function __irshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __lshift__(self, other):
        """function __lshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __rshift__(self, other):
        """function __rshift__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __delitem__(self, key):
        """function __delitem__
        
        key: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __contains__(self):
        """function __contains__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __iter__(self):
        """function __iter__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __setslice__(self, i, j, seq):
        """function __setslice__
        
        i: int
        j: int
        seq: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __getslice__(self, i, j):
        """function __getslice__
        
        i: int
        j: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def ___get_trimed(self):
        """function _get_trimed
        
        returns string
        """
        return None # should raise NotImplementedError()
    


* Mon 08 Sep 2014 05:46:22 AM JST

* Mon 08 Sep 2014 05:46:22 AM JST

* Mon 08 Sep 2014 05:46:22 AM JST
from Parameter import Parameter

* Mon 08 Sep 2014 05:47:43 AM JST
parameter
* Mon 08 Sep 2014 05:48:15 AM JST
return None # should raise NotImplementedError()
* Mon 08 Sep 2014 05:50:17 AM JST
param
* Mon 08 Sep 2014 12:33:53 PM JST
None # should raise NotImplementedError()
* Mon 08 Sep 2014 12:35:36 PM JST
.ljust(4, ' ')
* Mon 08 Sep 2014 12:35:40 PM JST

* Mon 08 Sep 2014 12:35:40 PM JST

* Mon 08 Sep 2014 12:35:40 PM JST
        parameter = parameter

* Mon 08 Sep 2014 12:37:11 PM JST
_length, ' '
* Mon 08 Sep 2014 12:37:13 PM JST
_length, ' '
* Mon 08 Sep 2014 12:39:33 PM JST
error
* Mon 08 Sep 2014 12:43:19 PM JST
ParameterLenghtError
* Mon 08 Sep 2014 12:44:56 PM JST
None
* Mon 08 Sep 2014 12:49:20 PM JST
None # should raise NotImplementedError()
* Mon 08 Sep 2014 12:53:29 PM JST
None # should raise NotImplementedError()
* Mon 08 Sep 2014 01:23:12 PM JST
param = int(other)
* Mon 08 Sep 2014 01:23:33 PM JST
param = 
* Mon 08 Sep 2014 01:23:40 PM JST
int(self) + int(other)
* Mon 08 Sep 2014 01:23:59 PM JST
self.__class__(int(self) + int(other))
* Mon 08 Sep 2014 01:27:55 PM JST

* Mon 08 Sep 2014 01:27:55 PM JST

* Mon 08 Sep 2014 01:27:55 PM JST
        self._parameter[key] = value

* Mon 08 Sep 2014 01:27:57 PM JST

* Mon 08 Sep 2014 01:27:57 PM JST

* Mon 08 Sep 2014 01:27:57 PM JST
        return self

* Mon 08 Sep 2014 01:28:01 PM JST
__setitem__
* Mon 08 Sep 2014 01:36:13 PM JST
None # should raise NotImplementedError()
* Mon 08 Sep 2014 01:37:02 PM JST
None # should raise NotImplementedError()
* Mon 08 Sep 2014 01:37:19 PM JST
None # should raise NotImplementedError()
* Mon 08 Sep 2014 01:37:31 PM JST
return int(self) > int(other)
* Mon 08 Sep 2014 01:38:37 PM JST
None # should raise NotImplementedError()
* Mon 08 Sep 2014 01:39:38 PM JST
None # should raise NotImplementedError()
* Mon 08 Sep 2014 01:40:35 PM JST
int(self) + int(other)
* Mon 08 Sep 2014 01:40:37 PM JST

* Mon 08 Sep 2014 01:40:37 PM JST

* Mon 08 Sep 2014 01:40:37 PM JST
        param = 

* Mon 08 Sep 2014 01:40:42 PM JST
        self.set(int(self) + int(other))
        return self

* Mon 08 Sep 2014 01:41:32 PM JST
self.set(int(self) - int(other))
* Mon 08 Sep 2014 01:41:44 PM JST
self.set(int(self) * int(other))
* Mon 08 Sep 2014 01:41:50 PM JST
        self.set(int(self) * int(other))
        return self

* Mon 08 Sep 2014 01:42:19 PM JST
None # should raise NotImplementedError()
* Mon 08 Sep 2014 01:42:47 PM JST
int(
* Mon 08 Sep 2014 01:42:52 PM JST
int(self) << other
* Mon 08 Sep 2014 01:42:54 PM JST

* Mon 08 Sep 2014 01:42:54 PM JST

* Mon 08 Sep 2014 01:42:54 PM JST
        param = 

* Mon 08 Sep 2014 01:42:58 PM JST
return self.__class__(int(self) << other)
* Mon 08 Sep 2014 04:18:46 PM JST
key] = ' '
* Mon 08 Sep 2014 04:19:37 PM JST
None # should raise NotImplementedError()
* Mon 08 Sep 2014 04:19:55 PM JST
None # should raise NotImplementedError()
* Mon 08 Sep 2014 04:22:32 PM JST
list('abcd')[0:2]
* Mon 08 Sep 2014 04:24:47 PM JST
param = 
* Mon 08 Sep 2014 04:24:55 PM JST
param
* Mon 08 Sep 2014 04:25:57 PM JST
param
* Mon 08 Sep 2014 04:26:26 PM JST

* Mon 08 Sep 2014 04:26:26 PM JST

* Mon 08 Sep 2014 04:26:26 PM JST
        return 

* Mon 08 Sep 2014 04:27:06 PM JST
None # should raise NotImplementedError()
* Mon 08 Sep 2014 04:29:20 PM JST
parameter
* Mon 08 Sep 2014 04:33:08 PM JST

* Mon 08 Sep 2014 04:33:08 PM JST

* Mon 08 Sep 2014 04:33:09 PM JST
    def

* Mon 08 Sep 2014 05:22:03 PM JST
set
* Mon 08 Sep 2014 05:25:01 PM JST
param
* Mon 08 Sep 2014 05:25:34 PM JST
para
* Mon 08 Sep 2014 05:25:34 PM JST
self.para
* Mon 08 Sep 2014 05:26:08 PM JST
self.
* Mon 08 Sep 2014 05:26:13 PM JST
param
* Mon 08 Sep 2014 05:26:38 PM JST
        self.param.set(1)
        got = int(self.param)
        self.assertIsInstance(got, int)
        self.param.set('?')
        with self.assertRaises(ValueError) as _err:
            int(self.param)

* Mon 08 Sep 2014 05:29:34 PM JST
self
* Mon 08 Sep 2014 05:30:42 PM JST
        got = self.param + 1
        self.assertEqual('2   ', got,
                         msg='Failed: Parameter.__add__ expect: \{}, got: \{}'
                         .format('2   ', got))

* Mon 08 Sep 2014 05:30:51 PM JST
        got = self.param + '1'
        self.assertEqual('2   ', got,
                         msg='Failed: Parameter.__add__ expect: \{}, got: \{}'
                         .format('2   ', got))

* Mon 08 Sep 2014 05:31:47 PM JST
self.param + ' 
* Mon 08 Sep 2014 05:32:02 PM JST
        got = self.param + '-1'
        self.assertEqual('0   ', got,
                         msg='Failed: Parameter.__add__ expect: \{}, got: \{}'
                         .format('2   ', got))

* Mon 08 Sep 2014 05:33:54 PM JST
        self.param.set(1)
        # int 1
        got = self.param + 1
        self.assertEqual('2   ', got,
                         msg='Failed: Parameter.__add__ expect: \{}, got: \{}'
                         .format('2   ', got))
        # string '1'
        got = self.param + '1'
        self.assertEqual('2   ', got,
                         msg='Failed: Parameter.__add__ expect: \{}, got: \{}'
                         .format('2   ', got))
        # '-1'
        got = self.param + '-1'
        self.assertEqual('0   ', got,
                         msg='Failed: Parameter.__add__ expect: \{}, got: \{}'
                         .format('2   ', got))
        # Parameter object
        got = self.param + parameter.Parameter(1)
        self.assertEqual('2   ', got,
                         msg='Failed: Parameter.__add__ expect: \{}, got: \{}'
                         .format('2   ', got))
        with self.assertRaises(ValueError) as _err:
            self.param + '?'

* Mon 08 Sep 2014 05:37:33 PM JST
__lt__
* Mon 08 Sep 2014 05:37:44 PM JST
    def test___lt__(self, ):
        pass

* Mon 08 Sep 2014 05:37:46 PM JST
    def test___lt__(self, ):
        pass
        

* Mon 08 Sep 2014 05:39:45 PM JST
pass
* Mon 08 Sep 2014 05:40:03 PM JST
got = 
* Mon 08 Sep 2014 05:40:11 PM JST
self.
* Mon 08 Sep 2014 05:40:17 PM JST
para
* Mon 08 Sep 2014 05:40:17 PM JST
self.para
* Mon 08 Sep 2014 05:42:00 PM JST
self.
* Mon 08 Sep 2014 05:43:30 PM JST

* Mon 08 Sep 2014 05:43:30 PM JST

* Mon 08 Sep 2014 05:43:30 PM JST
    def

* Mon 08 Sep 2014 05:43:32 PM JST
pass
* Mon 08 Sep 2014 05:44:16 PM JST

* Mon 08 Sep 2014 05:44:16 PM JST

* Mon 08 Sep 2014 05:44:16 PM JST
        self.assert

* Mon 08 Sep 2014 05:45:00 PM JST
got = cmp(self.param, parameter.Parameter(1))
* Mon 08 Sep 2014 05:45:03 PM JST
1)
* Mon 08 Sep 2014 05:45:03 PM JST
Parameter(1)
* Mon 08 Sep 2014 05:45:03 PM JST
parameter.Parameter(1)
* Mon 08 Sep 2014 05:45:10 PM JST

* Mon 08 Sep 2014 05:45:10 PM JST

* Mon 08 Sep 2014 05:45:10 PM JST
        self.

* Mon 08 Sep 2014 05:45:12 PM JST
        self.assertEqual(expect, got,
                         msg='Failed: Parameter.__cmp__ expect: \{}, got: \{}'
                         .format(expect, got))

* Mon 08 Sep 2014 05:47:18 PM JST
pass
* Mon 08 Sep 2014 05:47:43 PM JST
assert
* Mon 08 Sep 2014 05:47:43 PM JST
self.assert
* Mon 08 Sep 2014 05:48:24 PM JST
asser
* Mon 08 Sep 2014 05:48:25 PM JST
got
* Mon 08 Sep 2014 05:49:01 PM JST
pass
* Mon 08 Sep 2014 05:50:56 PM JST
pass
* Mon 08 Sep 2014 05:52:25 PM JST
pass
* Mon 08 Sep 2014 05:53:34 PM JST
asser
* Mon 08 Sep 2014 05:53:35 PM JST
self.asser
* Mon 08 Sep 2014 05:53:46 PM JST
val
* Mon 08 Sep 2014 05:54:06 PM JST
                             
* Mon 08 Sep 2014 05:54:25 PM JST
                             
* Mon 08 Sep 2014 05:54:33 PM JST
                
* Mon 08 Sep 2014 05:54:59 PM JST
pass
* Mon 08 Sep 2014 05:55:31 PM JST
got = 
* Mon 08 Sep 2014 05:56:07 PM JST
param
* Mon 08 Sep 2014 05:59:24 PM JST

* Mon 08 Sep 2014 05:59:24 PM JST

* Mon 08 Sep 2014 05:59:25 PM JST
        # self._parameter[key] = value

* Mon 08 Sep 2014 05:59:59 PM JST
pass
* Mon 08 Sep 2014 06:09:31 PM JST
pass
* Mon 08 Sep 2014 06:17:10 PM JST
pass
* Mon 08 Sep 2014 06:17:34 PM JST
0 < 
* Mon 08 Sep 2014 06:18:01 PM JST
pass
* Mon 08 Sep 2014 10:17:24 PM JST
pass
* Mon 08 Sep 2014 10:17:47 PM JST
pass
* Mon 08 Sep 2014 10:18:08 PM JST
pass
* Mon 08 Sep 2014 10:19:02 PM JST
+self.param
* Mon 08 Sep 2014 10:20:44 PM JST
Parameter
* Mon 08 Sep 2014 10:40:22 PM JST
pass
* Mon 08 Sep 2014 10:51:36 PM JST
pass
* Mon 08 Sep 2014 10:52:23 PM JST
        self.param.set(1)
        # int 1
        got = self.param + 1
        self.assertEqual('2   ', got,
                         msg='Failed: Parameter.__add__ expect: \{}, got: \{}'
                         .format('2   ', got))
        # string '1'
        got = self.param + '1'
        self.assertEqual('2   ', got,
                         msg='Failed: Parameter.__add__ expect: \{}, got: \{}'
                         .format('2   ', got))
        # '-1'
        got = self.param + '-1'
        self.assertEqual('0   ', got,
                         msg='Failed: Parameter.__add__ expect: \{}, got: \{}'
                         .format('0   ', got))
        # Parameter object
        got = self.param + parameter.Parameter(1)
        self.assertEqual('2   ', got,
                         msg='Failed: Parameter.__add__ expect: \{}, got: \{}'
                         .format('2   ', got))
        with self.assertRaises(ValueError) as _err:
            self.param + '?'

* Mon 08 Sep 2014 10:52:31 PM JST

* Mon 08 Sep 2014 10:52:31 PM JST

* Mon 08 Sep 2014 10:52:31 PM JST
        self.param.set(1)

* Mon 08 Sep 2014 10:52:43 PM JST
got = 
* Mon 08 Sep 2014 10:52:48 PM JST
got
* Mon 08 Sep 2014 10:53:00 PM JST
got = 
* Mon 08 Sep 2014 10:53:06 PM JST
got
* Mon 08 Sep 2014 10:53:16 PM JST
got
* Mon 08 Sep 2014 10:53:20 PM JST
got
* Mon 08 Sep 2014 10:53:24 PM JST
got
* Mon 08 Sep 2014 10:53:51 PM JST
para
* Mon 08 Sep 2014 10:53:52 PM JST
self.para
* Mon 08 Sep 2014 10:54:16 PM JST
got = 
* Mon 08 Sep 2014 10:54:36 PM JST
got = 
* Mon 08 Sep 2014 11:04:28 PM JST
other
* Mon 08 Sep 2014 11:05:09 PM JST
self.param.set(1)
* Mon 08 Sep 2014 11:06:53 PM JST
        self.param.set(2)
        # int 1
        got = self.param - 1
        self.assertEqual('1   ', got,
                         msg='Failed: Parameter.__add__ expect: \{}, got: \{}'
                         .format('1   ', got))
        # string '1'
        got = self.param - '1'
        self.assertEqual('1   ', got,
                         msg='Failed: Parameter.__add__ expect: \{}, got: \{}'
                         .format('1   ', got))
        # '-1'
        got = self.param - '-1'
        self.assertEqual('3   ', got,
                         msg='Failed: Parameter.__add__ expect: \{}, got: \{}'
                         .format('3   ', got))
        # Parameter object
        got = self.param - parameter.Parameter(1)
        self.assertEqual('1   ', got,
                         msg='Failed: Parameter.__add__ expect: \{}, got: \{}'
                         .format('1   ', got))
        with self.assertRaises(ValueError) as _err:
            self.param - '?'

* Mon 08 Sep 2014 11:07:31 PM JST
self.param.set(2)
* Mon 08 Sep 2014 11:07:43 PM JST
got = 
* Mon 08 Sep 2014 11:08:09 PM JST
got = 
* Mon 08 Sep 2014 11:08:25 PM JST
self.param.set(2)
* Mon 08 Sep 2014 11:08:33 PM JST
self.param =
* Mon 08 Sep 2014 11:08:37 PM JST
got = 
* Mon 08 Sep 2014 11:08:50 PM JST
got = 
* Mon 08 Sep 2014 11:12:59 PM JST
pass
* Mon 08 Sep 2014 11:14:11 PM JST
got
* Mon 08 Sep 2014 11:14:37 PM JST
            
* Mon 08 Sep 2014 11:16:38 PM JST
pass
* Mon 08 Sep 2014 11:17:34 PM JST
param
* Mon 08 Sep 2014 11:17:35 PM JST
self.param
* Mon 08 Sep 2014 11:18:22 PM JST
pass
* Mon 08 Sep 2014 11:18:58 PM JST
param
* Mon 08 Sep 2014 11:18:58 PM JST
self.param
* Mon 08 Sep 2014 11:19:23 PM JST
            
* Mon 08 Sep 2014 11:19:36 PM JST
pass
* Mon 08 Sep 2014 11:20:23 PM JST
            
* Mon 08 Sep 2014 11:21:57 PM JST
self.param[0:2] = ['1', '2']
* Mon 08 Sep 2014 11:24:41 PM JST
pass
* Mon 08 Sep 2014 11:25:05 PM JST
asser
* Mon 08 Sep 2014 11:25:05 PM JST
self.asser
* Mon 08 Sep 2014 11:29:46 PM JST

* Mon 08 Sep 2014 11:29:47 PM JST

* Mon 08 Sep 2014 11:29:47 PM JST
        self._parameter[key] = self._fill

* Mon 08 Sep 2014 11:32:18 PM JST
self.param.set(1)
* Tue 09 Sep 2014 08:42:38 AM JST
._cmdtype
* Tue 09 Sep 2014 08:42:38 AM JST
other._cmdtype
* Tue 09 Sep 2014 08:44:24 AM JST
other
* Tue 09 Sep 2014 08:46:59 AM JST
    def __ne__(self, other):
        
        return self._cmdtype != other._cmdtype 

* Tue 09 Sep 2014 08:47:32 AM JST
._cmdtype 
* Tue 09 Sep 2014 08:50:51 AM JST
assert
* Tue 09 Sep 2014 08:50:51 AM JST
self.assert
* Tue 09 Sep 2014 08:51:38 AM JST
got = 
* Tue 09 Sep 2014 08:57:13 AM JST
'1   '
* Tue 09 Sep 2014 09:00:42 AM JST
commandtype.CommandType(self.expect))
* Tue 09 Sep 2014 09:02:51 AM JST
self.
* Tue 09 Sep 2014 09:02:53 AM JST
self.
* Tue 09 Sep 2014 09:13:00 AM JST
string
* Tue 09 Sep 2014 09:14:18 AM JST
self._check_length(cmdtype)
* Tue 09 Sep 2014 09:15:02 AM JST
self.
* Tue 09 Sep 2014 09:15:28 AM JST
        with self.assertRaises(ValueError):
            self.cmdtype.get('TESTCMD')

* Tue 09 Sep 2014 04:45:41 PM JST
self
* Tue 09 Sep 2014 04:46:10 PM JST
_
* Tue 09 Sep 2014 04:46:11 PM JST
self._
* Tue 09 Sep 2014 04:46:16 PM JST

* Tue 09 Sep 2014 04:46:16 PM JST

* Tue 09 Sep 2014 04:46:16 PM JST
        super(Command, self).__add__()

* Tue 09 Sep 2014 04:48:46 PM JST
self.
* Tue 09 Sep 2014 04:49:12 PM JST
            
* Tue 09 Sep 2014 04:49:58 PM JST
self.get_command() == other
* Tue 09 Sep 2014 04:53:00 PM JST
command
* Tue 09 Sep 2014 04:54:52 PM JST

* Tue 09 Sep 2014 04:54:52 PM JST

* Tue 09 Sep 2014 04:54:52 PM JST
from .. import command

* Tue 09 Sep 2014 04:55:00 PM JST
command.
* Tue 09 Sep 2014 04:57:11 PM JST
pass
* Tue 09 Sep 2014 04:57:13 PM JST
self.
* Tue 09 Sep 2014 04:58:38 PM JST
param
* Tue 09 Sep 2014 04:58:52 PM JST
param
* Tue 09 Sep 2014 05:00:16 PM JST
cmdtype
* Tue 09 Sep 2014 05:00:17 PM JST
self.cmdtype
* Tue 09 Sep 2014 05:00:17 PM JST
expect = self.cmdtype
* Tue 09 Sep 2014 05:03:55 PM JST
got = 
* Tue 09 Sep 2014 05:11:07 PM JST
__name__
* Tue 09 Sep 2014 05:11:08 PM JST
__class__.__name__
* Tue 09 Sep 2014 05:11:27 PM JST
.__class__.__name__
* Tue 09 Sep 2014 05:13:03 PM JST
self.cmd == Command(CommandType('POWR'), Parameter(1))
* Tue 09 Sep 2014 05:13:06 PM JST

* Tue 09 Sep 2014 05:13:06 PM JST

* Tue 09 Sep 2014 05:13:06 PM JST
        got = 

* Tue 09 Sep 2014 05:13:08 PM JST

* Tue 09 Sep 2014 05:14:27 PM JST
        self.assertTrue(self.cmd == Command(CommandType('POWR'), Parameter(1)))
        self.assertTrue(self.cmd == 'POWR1   ')
        self.assertFalse(self.cmd == Command(CommandType('INPT'), Parameter(1)))
        self.assertFalse(self.cmd == 'INPT1   ')

* Tue 09 Sep 2014 05:15:13 PM JST
!
* Tue 09 Sep 2014 05:20:29 PM JST
(dolist (buffer LIST)

  )

* Tue 09 Sep 2014 05:20:37 PM JST
LIST
* Tue 09 Sep 2014 05:21:43 PM JST
    
* Tue 09 Sep 2014 05:21:44 PM JST
      
* Tue 09 Sep 2014 05:21:57 PM JST
(let ((re "^\\*gud"))
  (dolist (buffer (buffer-list))
    (with-current-buffer buffer
      (when (string-match re (buffer-name)))
      (message "killing %s" (buffer-name) )
      (kill-buffer buf))))

* Tue 09 Sep 2014 05:22:24 PM JST
(defun kill-some-gud-buffers () ;[2014/09/09]
  ""
  (interactive)
  (let ((re "^\\*gud"))
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (string-match re (buffer-name)))
        (message "killing %s" (buffer-name) )
        (kill-buffer buf)))))
* Tue 09 Sep 2014 05:26:35 PM JST
(dolist (buf (buffer-list))
      (with-current-buffer buf
        (when (string-match re (buffer-name))
          (message "killing %s" (buffer-name))
          (kill-buffer buf))))
* Tue 09 Sep 2014 05:27:32 PM JST
  
* Tue 09 Sep 2014 05:28:05 PM JST
kill-some-buffers-by-regexp
* Tue 09 Sep 2014 05:29:17 PM JST
(defun kill-some-buffers-by-regexp (re) ;[2014/09/09]
  "RE"
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when (string-match re (buffer-name))
        (message "killing %s" (buffer-name))
        (kill-buffer buf)))))

(defun kill-some-buffers-by-extension (ext) ;[2013/11/25] [2014/09/09]
  "EXT"
  (interactive "sExtension: ")
  (let ((re (format "\\.%s\\'" ext)))
    (message "kill-buffer by %s" re)
    (kill-some-buffers-by-regexp re)
    (message "Finished." )))


* Tue 09 Sep 2014 05:50:51 PM JST
command.
* Tue 09 Sep 2014 06:07:40 PM JST
Command
* Tue 09 Sep 2014 06:11:53 PM JST
command.CommandType('POWR')
* Tue 09 Sep 2014 06:11:58 PM JST
command.CommandType('POWR')
* Tue 09 Sep 2014 06:12:09 PM JST
command.Parameter(' ')
* Tue 09 Sep 2014 06:32:22 PM JST
self._command = command.Command()
* Tue 09 Sep 2014 06:33:20 PM JST
parameter
* Tue 09 Sep 2014 06:36:51 PM JST
set_parameter(' '
* Tue 09 Sep 2014 06:37:13 PM JST
class ITVDCommandBuilder(CommandBuilder):
    r"""ITVDCommandBuilder
    
    ITVDCommandBuilder is a CommandBuilder.
    Responsibility: 
    """
    def build_command_type(self, ):
        r"""SUMMARY
        
        build_command_type()
        
        @Return:

        @Error:
        """
        self._command.set_cmdtype('ITVD')

    def build_parameter(self, ):
        r"""SUMMARY
        
        build_parameter()
        
        @Return:

        @Error:
        """
        self._command.set_parameter(parameter.Parameter(' '))

* Tue 09 Sep 2014 06:37:24 PM JST
parameter
* Tue 09 Sep 2014 06:37:32 PM JST
class ITVDCommandBuilder(CommandBuilder):
    r"""ITVDCommandBuilder
    
    ITVDCommandBuilder is a CommandBuilder.
    Responsibility: 
    """
    def build_command_type(self, ):
        r"""SUMMARY
        
        build_command_type()
        
        @Return:

        @Error:
        """
        self._command.set_cmdtype('ITVD')

    def build_parameter(self, ):
        r"""SUMMARY
        
        build_parameter()
        
        @Return:

        @Error:
        """
        self._command.set_parameter(command.Parameter(' '))



* Tue 09 Sep 2014 06:37:37 PM JST
ITVD
* Tue 09 Sep 2014 06:37:40 PM JST
$1
* Tue 09 Sep 2014 10:05:41 PM JST
self._builder
* Tue 09 Sep 2014 10:05:54 PM JST
self.get_builder()
* Tue 09 Sep 2014 10:28:48 PM JST
_command
* Tue 09 Sep 2014 10:28:48 PM JST
self._command
* Tue 09 Sep 2014 10:29:36 PM JST
cmd
* Tue 09 Sep 2014 10:46:15 PM JST
self.
* Tue 09 Sep 2014 10:47:05 PM JST
get_para
* Tue 09 Sep 2014 10:47:21 PM JST

* Tue 09 Sep 2014 10:47:21 PM JST

* Tue 09 Sep 2014 10:47:21 PM JST
        self.get_builder().build_command_type(cmd)

* Tue 09 Sep 2014 10:47:21 PM JST
        self.get_builder().build_command_type(cmd)

* Tue 09 Sep 2014 10:47:21 PM JST
        self.get_builder().build_command_type(cmd)
        self.get_builder().build_parameter(cmd)

* Tue 09 Sep 2014 10:48:19 PM JST
cmd.set_cmdtype(
* Tue 09 Sep 2014 10:48:42 PM JST
cmd.set_parameter(
* Tue 09 Sep 2014 10:51:25 PM JST
command.CommandType(
* Tue 09 Sep 2014 11:02:30 PM JST

* Tue 09 Sep 2014 11:02:30 PM JST

* Tue 09 Sep 2014 11:02:31 PM JST
        self.commandtype = command.CommandType('POWR')

* Tue 09 Sep 2014 11:03:36 PM JST
Para
* Tue 09 Sep 2014 11:03:36 PM JST
command.Para
* Tue 09 Sep 2014 11:03:37 PM JST
got = command.Para
* Tue 09 Sep 2014 11:03:52 PM JST

* Tue 09 Sep 2014 11:03:53 PM JST

* Tue 09 Sep 2014 11:03:53 PM JST
        got = self.

* Tue 09 Sep 2014 11:06:42 PM JST
self
* Tue 09 Sep 2014 11:07:13 PM JST
self.
* Tue 09 Sep 2014 11:08:31 PM JST
self.
* Tue 09 Sep 2014 11:08:59 PM JST
get_
* Tue 09 Sep 2014 11:12:21 PM JST

* Tue 09 Sep 2014 11:12:21 PM JST

* Tue 09 Sep 2014 11:12:21 PM JST
        self.cmdtype = 'INPT'

* Tue 09 Sep 2014 11:12:40 PM JST
command.CommandType(self.cmdtype)
* Tue 09 Sep 2014 11:14:03 PM JST
'POWR'
* Tue 09 Sep 2014 11:14:08 PM JST

* Tue 09 Sep 2014 11:14:08 PM JST

* Tue 09 Sep 2014 11:14:09 PM JST
        self.cmdtype = 'POWR'

* Tue 09 Sep 2014 11:14:14 PM JST
    def get_commandtype(self, ):
        return command.CommandType('POWR')

    def get_parameter(self, ):
        return command.Parameter(' ')


* Tue 09 Sep 2014 11:14:42 PM JST
command.CommandType('POWR')
* Tue 09 Sep 2014 11:15:01 PM JST
get_commandtype()
* Tue 09 Sep 2014 11:15:12 PM JST
command
* Tue 09 Sep 2014 11:15:12 PM JST
self.command
* Tue 09 Sep 2014 11:21:14 PM JST
class TestITGDCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'ITGD'
        self.builder = commandbuilder.ITGDCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:22:52 PM JST
IAVD
* Tue 09 Sep 2014 11:22:58 PM JST
class TestITVDCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'ITVD'
        self.builder = commandbuilder.ITVDCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:23:02 PM JST
IAVD
* Tue 09 Sep 2014 11:23:25 PM JST
class TestIAVDCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'IAVD'
        self.builder = commandbuilder.IAVDCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:23:33 PM JST
IDEG
* Tue 09 Sep 2014 11:24:02 PM JST
class TestITGDCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'ITGD'
        self.builder = commandbuilder.ITGDCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:24:12 PM JST
CBSD
* Tue 09 Sep 2014 11:24:28 PM JST
class TestITGDCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'ITGD'
        self.builder = commandbuilder.ITGDCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:24:33 PM JST
CCSD
* Tue 09 Sep 2014 11:24:48 PM JST
CTBD
* Tue 09 Sep 2014 11:24:52 PM JST
class TestITGDCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'ITGD'
        self.builder = commandbuilder.ITGDCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:25:03 PM JST
CTBD
* Tue 09 Sep 2014 11:25:16 PM JST
CHUP
* Tue 09 Sep 2014 11:25:20 PM JST
class TestITGDCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'ITGD'
        self.builder = commandbuilder.ITGDCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:25:24 PM JST
CHUP
* Tue 09 Sep 2014 11:25:38 PM JST
CHDW
* Tue 09 Sep 2014 11:25:41 PM JST
class TestITGDCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'ITGD'
        self.builder = commandbuilder.ITGDCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:25:44 PM JST
CHDW
* Tue 09 Sep 2014 11:26:00 PM JST
class TestCHDWCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'CHDW'
        self.builder = commandbuilder.CHDWCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:26:05 PM JST
INP4
* Tue 09 Sep 2014 11:26:30 PM JST
class TestCHDWCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'CHDW'
        self.builder = commandbuilder.CHDWCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:26:33 PM JST
AVMD
* Tue 09 Sep 2014 11:26:49 PM JST
VOLM
* Tue 09 Sep 2014 11:26:51 PM JST
class TestCHDWCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'CHDW'
        self.builder = commandbuilder.CHDWCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:27:02 PM JST
VOLM
* Tue 09 Sep 2014 11:27:16 PM JST
HPOS
* Tue 09 Sep 2014 11:27:22 PM JST
class TestCHDWCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'CHDW'
        self.builder = commandbuilder.CHDWCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:27:33 PM JST
HPOS
* Tue 09 Sep 2014 11:27:49 PM JST
class TestCHDWCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'CHDW'
        self.builder = commandbuilder.CHDWCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:27:56 PM JST
VPOS
* Tue 09 Sep 2014 11:28:26 PM JST
class TestCHDWCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'CHDW'
        self.builder = commandbuilder.CHDWCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:28:29 PM JST
CLCK
* Tue 09 Sep 2014 11:28:44 PM JST
class TestCHDWCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'CHDW'
        self.builder = commandbuilder.CHDWCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:28:47 PM JST
PHSE
* Tue 09 Sep 2014 11:29:05 PM JST
class TestCHDWCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'CHDW'
        self.builder = commandbuilder.CHDWCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:29:07 PM JST
WIDE
* Tue 09 Sep 2014 11:29:23 PM JST
MUTE
* Tue 09 Sep 2014 11:29:25 PM JST
class TestCHDWCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'CHDW'
        self.builder = commandbuilder.CHDWCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:29:27 PM JST
MUTE
* Tue 09 Sep 2014 11:29:47 PM JST
class TestCHDWCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'CHDW'
        self.builder = commandbuilder.CHDWCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:29:50 PM JST
ACSU
* Tue 09 Sep 2014 11:30:04 PM JST
ACHA
* Tue 09 Sep 2014 11:30:07 PM JST
class TestCHDWCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'CHDW'
        self.builder = commandbuilder.CHDWCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:30:11 PM JST
ACHA
* Tue 09 Sep 2014 11:30:23 PM JST
OFTM
* Tue 09 Sep 2014 11:30:27 PM JST
class TestCHDWCommandBuilder(TestPOWRCommandBuilder):
    """2014/09/09"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self, ):
        self.cmdtype = 'CHDW'
        self.builder = commandbuilder.CHDWCommandBuilder()
        self.mocker.replay()

    def get_parameter(self, ):
        return command.Parameter(' ')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass



* Tue 09 Sep 2014 11:30:34 PM JST
OFTM
* Tue 09 Sep 2014 11:39:04 PM JST
Command
* Tue 09 Sep 2014 11:39:59 PM JST
ITGD
* Tue 09 Sep 2014 11:45:35 PM JST
builder = commandbuilder.POWRCommandBuilder()
* Tue 09 Sep 2014 11:45:41 PM JST
self.director.set_builder(builder)
* Tue 09 Sep 2014 11:46:02 PM JST
direc
* Tue 09 Sep 2014 11:46:02 PM JST
self.direc
* Tue 09 Sep 2014 11:46:54 PM JST
            
* Wed 10 Sep 2014 12:04:33 AM JST
director
* Wed 10 Sep 2014 12:08:12 AM JST
    def _build_commands(self, ):
        r"""SUMMARY
        
        _build_commands()
        
        @Return:

        @Error:
        """
        

* Wed 10 Sep 2014 12:08:29 AM JST
    def register(self, cmd):
        r"""SUMMARY
        
        register(cmd)
        
        @Arguments:
        - `cmd`:
        
        @Return:

        @Error:
        """
        pass

    def unregister(self, cmdtype):
        r"""SUMMARY
        
        unregister(cmdtype)
        
        @Arguments:
        - `cmdtype`:
        
        @Return:

        @Error:
        """
        pass


* Wed 10 Sep 2014 12:08:39 AM JST
pass
* Wed 10 Sep 2014 12:10:57 AM JST
                    
* Wed 10 Sep 2014 12:10:58 AM JST
ITGDCommandBuilder()
* Wed 10 Sep 2014 12:11:04 AM JST
                    
* Wed 10 Sep 2014 12:11:06 AM JST
ITVDCommandBuilder()
* Wed 10 Sep 2014 12:11:26 AM JST
class POWRCommandBuilder / class POWRCommandBuilder
class POWRCommandBuilder / build_command_type
class POWRCommandBuilder / build_parameter
class ITGDCommandBuilder / class ITGDCommandBuilder
class ITGDCommandBuilder / build_command_type
class ITGDCommandBuilder / build_parameter
class ITVDCommandBuilder / class ITVDCommandBuilder
class ITVDCommandBuilder / build_command_type
class ITVDCommandBuilder / build_parameter
class IAVDCommandBuilder / class IAVDCommandBuilder
class IAVDCommandBuilder / build_command_type
class IAVDCommandBuilder / build_parameter
class IDEGCommandBuilder / class IDEGCommandBuilder
class IDEGCommandBuilder / build_command_type
class IDEGCommandBuilder / build_parameter
class CBSDCommandBuilder / class CBSDCommandBuilder
class CBSDCommandBuilder / build_command_type
class CBSDCommandBuilder / build_parameter
class CCSDCommandBuilder / class CCSDCommandBuilder
class CCSDCommandBuilder / build_command_type
class CCSDCommandBuilder / build_parameter
class CTBDCommandBuilder / class CTBDCommandBuilder
class CTBDCommandBuilder / build_command_type
class CTBDCommandBuilder / build_parameter
class CHUPCommandBuilder / class CHUPCommandBuilder
class CHUPCommandBuilder / build_command_type
class CHUPCommandBuilder / build_parameter
class CHDWCommandBuilder / class CHDWCommandBuilder
class CHDWCommandBuilder / build_command_type
class CHDWCommandBuilder / build_parameter
class INP4CommandBuilder / class INP4CommandBuilder
class INP4CommandBuilder / build_command_type
class INP4CommandBuilder / build_parameter
class AVMDCommandBuilder / class AVMDCommandBuilder
class AVMDCommandBuilder / build_command_type
class AVMDCommandBuilder / build_parameter
class VOLMCommandBuilder / class VOLMCommandBuilder
class VOLMCommandBuilder / build_command_type
class VOLMCommandBuilder / build_parameter
class HPOSCommandBuilder / class HPOSCommandBuilder
class HPOSCommandBuilder / build_command_type
class HPOSCommandBuilder / build_parameter
class VPOSCommandBuilder / class VPOSCommandBuilder
class VPOSCommandBuilder / build_command_type
class VPOSCommandBuilder / build_parameter
class CLCKCommandBuilder / class CLCKCommandBuilder
class CLCKCommandBuilder / build_command_type
class CLCKCommandBuilder / build_parameter
class PHSECommandBuilder / class PHSECommandBuilder
class PHSECommandBuilder / build_command_type
class PHSECommandBuilder / build_parameter
class WIDECommandBuilder / class WIDECommandBuilder
class WIDECommandBuilder / build_command_type
class WIDECommandBuilder / build_parameter
class MUTECommandBuilder / class MUTECommandBuilder
class MUTECommandBuilder / build_command_type
class MUTECommandBuilder / build_parameter
class ACSUCommandBuilder / class ACSUCommandBuilder
class ACSUCommandBuilder / build_command_type
class ACSUCommandBuilder / build_parameter
class ACHACommandBuilder / class ACHACommandBuilder
class ACHACommandBuilder / build_command_type
class ACHACommandBuilder / build_parameter
class OFTMCommandBuilder / class OFTMCommandBuilder
class OFTMCommandBuilder / build_command_type
class OFTMCommandBuilder / build_parameter

* Wed 10 Sep 2014 12:11:41 AM JST
class 
* Wed 10 Sep 2014 12:11:42 AM JST
class 
* Wed 10 Sep 2014 12:11:42 AM JST
class 
* Wed 10 Sep 2014 12:11:42 AM JST
class 
* Wed 10 Sep 2014 12:11:42 AM JST
class 
* Wed 10 Sep 2014 12:11:42 AM JST
class 
* Wed 10 Sep 2014 12:11:42 AM JST
class 
* Wed 10 Sep 2014 12:11:42 AM JST
class 
* Wed 10 Sep 2014 12:11:42 AM JST
class 
* Wed 10 Sep 2014 12:11:42 AM JST
class 
* Wed 10 Sep 2014 12:11:42 AM JST
class 
* Wed 10 Sep 2014 12:11:42 AM JST
class 
* Wed 10 Sep 2014 12:11:42 AM JST
class 
* Wed 10 Sep 2014 12:11:42 AM JST
class 
* Wed 10 Sep 2014 12:11:42 AM JST
class 
* Wed 10 Sep 2014 12:11:43 AM JST
class 
* Wed 10 Sep 2014 12:11:43 AM JST
class 
* Wed 10 Sep 2014 12:11:43 AM JST
class 
* Wed 10 Sep 2014 12:11:43 AM JST
class 
* Wed 10 Sep 2014 12:11:43 AM JST
class 
* Wed 10 Sep 2014 12:11:43 AM JST
class 
* Wed 10 Sep 2014 12:11:43 AM JST
class 
* Wed 10 Sep 2014 12:11:43 AM JST
class 
* Wed 10 Sep 2014 12:11:43 AM JST
class 
* Wed 10 Sep 2014 12:11:43 AM JST
class 
* Wed 10 Sep 2014 12:11:43 AM JST
class 
* Wed 10 Sep 2014 12:11:43 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:44 AM JST
class 
* Wed 10 Sep 2014 12:11:45 AM JST
class 
* Wed 10 Sep 2014 12:11:45 AM JST
class 
* Wed 10 Sep 2014 12:11:45 AM JST
class 
* Wed 10 Sep 2014 12:11:45 AM JST
class 
* Wed 10 Sep 2014 12:11:45 AM JST
class 
* Wed 10 Sep 2014 12:11:45 AM JST
class 
* Wed 10 Sep 2014 12:11:45 AM JST
class 
* Wed 10 Sep 2014 12:11:45 AM JST
class 
* Wed 10 Sep 2014 12:11:45 AM JST
class 
* Wed 10 Sep 2014 12:11:45 AM JST
class 
* Wed 10 Sep 2014 12:11:45 AM JST
class 
* Wed 10 Sep 2014 12:11:45 AM JST
class 
* Wed 10 Sep 2014 12:11:45 AM JST
class 
* Wed 10 Sep 2014 12:11:45 AM JST
class 
* Wed 10 Sep 2014 12:11:45 AM JST
class 
* Wed 10 Sep 2014 12:11:46 AM JST
class 
* Wed 10 Sep 2014 12:11:46 AM JST
class 
* Wed 10 Sep 2014 12:11:46 AM JST
class 
* Wed 10 Sep 2014 12:11:46 AM JST
class 
* Wed 10 Sep 2014 12:11:46 AM JST
class 
* Wed 10 Sep 2014 12:11:46 AM JST
class 
* Wed 10 Sep 2014 12:11:48 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:49 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:49 AM JST
 / class OFTMCommandBuilder
* Wed 10 Sep 2014 12:11:49 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:49 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:49 AM JST
 / class ACHACommandBuilder
* Wed 10 Sep 2014 12:11:49 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:49 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:49 AM JST
 / class ACSUCommandBuilder
* Wed 10 Sep 2014 12:11:49 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:49 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:49 AM JST
 / class MUTECommandBuilder
* Wed 10 Sep 2014 12:11:49 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:49 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:49 AM JST
 / class WIDECommandBuilder
* Wed 10 Sep 2014 12:11:49 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:49 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:50 AM JST
 / class PHSECommandBuilder
* Wed 10 Sep 2014 12:11:50 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:50 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:50 AM JST
 / class CLCKCommandBuilder
* Wed 10 Sep 2014 12:11:50 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:50 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:50 AM JST
 / class VPOSCommandBuilder
* Wed 10 Sep 2014 12:11:50 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:50 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:50 AM JST
 / class HPOSCommandBuilder
* Wed 10 Sep 2014 12:11:50 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:50 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:50 AM JST
 / class VOLMCommandBuilder
* Wed 10 Sep 2014 12:11:50 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:51 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:51 AM JST
 / class AVMDCommandBuilder
* Wed 10 Sep 2014 12:11:51 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:51 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:51 AM JST
 / class INP4CommandBuilder
* Wed 10 Sep 2014 12:11:51 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:51 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:51 AM JST
 / class CHDWCommandBuilder
* Wed 10 Sep 2014 12:11:51 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:51 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:51 AM JST
 / class CHUPCommandBuilder
* Wed 10 Sep 2014 12:11:51 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:52 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:52 AM JST
 / class CTBDCommandBuilder
* Wed 10 Sep 2014 12:11:52 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:52 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:52 AM JST
 / class CCSDCommandBuilder
* Wed 10 Sep 2014 12:11:52 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:52 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:52 AM JST
 / class CBSDCommandBuilder
* Wed 10 Sep 2014 12:11:52 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:52 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:52 AM JST
 / class IDEGCommandBuilder
* Wed 10 Sep 2014 12:11:52 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:52 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:52 AM JST
 / class IAVDCommandBuilder
* Wed 10 Sep 2014 12:11:52 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:52 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:52 AM JST
 / class ITVDCommandBuilder
* Wed 10 Sep 2014 12:11:53 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:53 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:53 AM JST
 / class ITGDCommandBuilder
* Wed 10 Sep 2014 12:11:53 AM JST
 / build_parameter
* Wed 10 Sep 2014 12:11:53 AM JST
 / build_command_type
* Wed 10 Sep 2014 12:11:53 AM JST
 / class POWRCommandBuilder
* Wed 10 Sep 2014 12:12:13 AM JST
POWRCommandBuilder
ITGDCommandBuilder
ITVDCommandBuilder
IAVDCommandBuilder
IDEGCommandBuilder
CBSDCommandBuilder
CCSDCommandBuilder
CTBDCommandBuilder
CHUPCommandBuilder
CHDWCommandBuilder
INP4CommandBuilder
AVMDCommandBuilder
VOLMCommandBuilder
HPOSCommandBuilder
VPOSCommandBuilder
CLCKCommandBuilder
PHSECommandBuilder
WIDECommandBuilder
MUTECommandBuilder
ACSUCommandBuilder
ACHACommandBuilder
OFTMCommandBuilder

* Wed 10 Sep 2014 12:13:03 AM JST
commandbuilder.POWRCommandBuilder(),
commandbuilder.ITGDCommandBuilder(),
commandbuilder.ITVDCommandBuilder(),
commandbuilder.IAVDCommandBuilder(),
commandbuilder.IDEGCommandBuilder(),
commandbuilder.CBSDCommandBuilder(),
commandbuilder.CCSDCommandBuilder(),
commandbuilder.CTBDCommandBuilder(),
commandbuilder.CHUPCommandBuilder(),
commandbuilder.CHDWCommandBuilder(),
commandbuilder.INP4CommandBuilder(),
commandbuilder.AVMDCommandBuilder(),
commandbuilder.VOLMCommandBuilder(),
commandbuilder.HPOSCommandBuilder(),
commandbuilder.VPOSCommandBuilder(),
commandbuilder.CLCKCommandBuilder(),
commandbuilder.PHSECommandBuilder(),
commandbuilder.WIDECommandBuilder(),
commandbuilder.MUTECommandBuilder(),
commandbuilder.ACSUCommandBuilder(),
commandbuilder.ACHACommandBuilder(),
commandbuilder.OFTMCommandBuilder(),

* Wed 10 Sep 2014 12:13:12 AM JST
commandbuilder.ITGDCommandBuilder(),
* Wed 10 Sep 2014 12:15:23 AM JST
pass
* Wed 10 Sep 2014 12:16:01 AM JST
pass
* Wed 10 Sep 2014 12:17:03 AM JST
commandprototype
* Wed 10 Sep 2014 12:21:58 AM JST
pass
* Wed 10 Sep 2014 04:29:56 AM JST
commandbuilder
* Wed 10 Sep 2014 04:31:26 AM JST
from . import commandbuilder
* Wed 10 Sep 2014 04:34:08 AM JST

* Wed 10 Sep 2014 04:34:08 AM JST

* Wed 10 Sep 2014 04:34:08 AM JST
        command = command.Command()

* Wed 10 Sep 2014 04:35:23 AM JST

* Wed 10 Sep 2014 04:35:23 AM JST

* Wed 10 Sep 2014 04:35:23 AM JST
from .. import command

* Wed 10 Sep 2014 04:37:18 AM JST
        director = commandbuilder.CommandBuildDirector()
        cmd = director.set_builder(commandbuilder.POWRCommandBuilder())
        self.assertNotEqual(cmd, self.proto._prototypes['POWR'])

* Wed 10 Sep 2014 04:37:56 AM JST
cmd = 
* Wed 10 Sep 2014 04:39:10 AM JST

* Wed 10 Sep 2014 04:39:10 AM JST

* Wed 10 Sep 2014 04:39:10 AM JST
        self.assertNotEqual(cmd, self.proto._prototypes['POWR'])

* Wed 10 Sep 2014 04:40:01 AM JST
cmd
* Wed 10 Sep 2014 04:42:00 AM JST
nosetests-run-all
* Wed 10 Sep 2014 04:43:40 AM JST
    
* Wed 10 Sep 2014 04:43:44 AM JST
nosetests-run-all
* Wed 10 Sep 2014 04:43:53 AM JST
;;;###autoload
* Wed 10 Sep 2014 04:44:00 AM JST
nosetests-run-all+
* Wed 10 Sep 2014 04:45:12 AM JST
args
* Wed 10 Sep 2014 04:47:58 AM JST
Comma
* Wed 10 Sep 2014 04:50:31 AM JST
cmd = hash(
* Wed 10 Sep 2014 04:50:32 AM JST
hash(
* Wed 10 Sep 2014 04:50:41 AM JST
self.proto.clone('POWR').get_parameter()
* Wed 10 Sep 2014 04:50:53 AM JST
clone
* Wed 10 Sep 2014 04:55:11 AM JST
hash
* Wed 10 Sep 2014 04:55:12 AM JST
hash
* Wed 10 Sep 2014 05:01:11 AM JST
'POWR',
'ITGD',
'ITVD',
'IAVD',
'IDEG',
'CBSD',
'CCSD',
'CTBD',
'CHUP',
'CHDW',
'INP4',
'AVMD',
'VOLM',
'HPOS',
'VPOS',
'CLCK',
'PHSE',
'WIDE',
'MUTE',
'ACSU',
'ACHA',
'OFTM',
		
* Wed 10 Sep 2014 05:04:56 AM JST
        lis = ['POWR', 'ITGD', 'ITVD', 'IAVD', 'IDEG', 'CBSD', 'CCSD', 'CTBD',
               'CHUP', 'CHDW', 'INP4', 'AVMD', 'VOLM', 'HPOS', 'VPOS', 'CLCK',
               'PHSE', 'WIDE', 'MUTE', 'ACSU', 'ACHA', 'OFTM', ]

* Wed 10 Sep 2014 05:06:10 AM JST
ctype
* Wed 10 Sep 2014 05:06:14 AM JST
.get_cmdtype()
* Wed 10 Sep 2014 05:15:41 AM JST
_director = commandbuilder.CommandBuildDirector()
* Wed 10 Sep 2014 05:15:51 AM JST
self._
* Wed 10 Sep 2014 05:15:53 AM JST
_
* Wed 10 Sep 2014 05:15:54 AM JST
self._
* Wed 10 Sep 2014 05:26:21 AM JST
CommandType
* Wed 10 Sep 2014 05:26:24 AM JST
Co
* Wed 10 Sep 2014 05:26:25 AM JST
command.Co
* Wed 10 Sep 2014 05:28:41 AM JST
        lis = ['POWR', 'ITGD', 'ITVD', 'IAVD', 'IDEG', 'CBSD', 'CCSD', 'CTBD',
               'CHUP', 'CHDW', 'INP4', 'AVMD', 'VOLM', 'HPOS', 'VPOS', 'CLCK',
               'PHSE', 'WIDE', 'MUTE', 'ACSU', 'ACHA', 'OFTM', ]

* Wed 10 Sep 2014 05:28:59 AM JST

* Wed 10 Sep 2014 05:28:59 AM JST

* Wed 10 Sep 2014 05:28:59 AM JST
        cmdtype = 'POWR'

* Wed 10 Sep 2014 05:30:45 AM JST
        lis = ['POWR', 'ITGD', 'ITVD', 'IAVD', 'IDEG', 'CBSD', 'CCSD', 'CTBD',
               'CHUP', 'CHDW', 'INP4', 'AVMD', 'VOLM', 'HPOS', 'VPOS', 'CLCK',
               'PHSE', 'WIDE', 'MUTE', 'ACSU', 'ACHA', 'OFTM', ]

* Wed 10 Sep 2014 05:30:58 AM JST
        candi = self.proto.list_candidate()
        for cmdtype in lis:
            self.assertIn(cmdtype, candi)

* Wed 10 Sep 2014 05:31:04 AM JST
proto
* Wed 10 Sep 2014 05:35:56 AM JST
command
* Wed 10 Sep 2014 05:35:57 AM JST
parameter
* Wed 10 Sep 2014 05:36:02 AM JST
parameter
* Wed 10 Sep 2014 05:36:15 AM JST
parameter
* Wed 10 Sep 2014 05:36:23 AM JST
parameter
* Wed 10 Sep 2014 05:36:32 AM JST
parameter
* Wed 10 Sep 2014 05:36:37 AM JST
parameter
* Wed 10 Sep 2014 05:36:50 AM JST
parameter
* Wed 10 Sep 2014 05:36:56 AM JST
parameter
* Wed 10 Sep 2014 05:37:02 AM JST
parameter
* Wed 10 Sep 2014 05:38:40 AM JST
command
* Wed 10 Sep 2014 05:40:57 AM JST
command
* Wed 10 Sep 2014 05:46:36 AM JST

* Wed 10 Sep 2014 05:46:36 AM JST

* Wed 10 Sep 2014 05:46:36 AM JST
from Order import Order

* Wed 10 Sep 2014 05:47:12 AM JST

* Wed 10 Sep 2014 05:47:12 AM JST

* Wed 10 Sep 2014 05:47:12 AM JST
from .connectionabstract import ConnectionAbstract

* Wed 10 Sep 2014 05:51:17 AM JST
socketbui
* Wed 10 Sep 2014 05:53:44 AM JST
socketbuilder.AquosSocketBuilder(ip, port)
* Wed 10 Sep 2014 05:54:04 AM JST
socket
* Wed 10 Sep 2014 05:54:20 AM JST

* Wed 10 Sep 2014 05:54:20 AM JST

* Wed 10 Sep 2014 05:54:20 AM JST
    __socket = None  # ()

* Wed 10 Sep 2014 05:54:20 AM JST
    __socket = None  # ()

* Wed 10 Sep 2014 05:54:20 AM JST
    __socket = None  # ()
    __account = None  # ()

* Wed 10 Sep 2014 05:55:35 AM JST
authenticator
* Wed 10 Sep 2014 05:56:25 AM JST
authenticator 
* Wed 10 Sep 2014 05:56:43 AM JST
AquosAuthenticator
* Wed 10 Sep 2014 05:58:29 AM JST
account
* Wed 10 Sep 2014 05:59:24 AM JST
account
* Wed 10 Sep 2014 05:59:27 AM JST

* Wed 10 Sep 2014 05:59:27 AM JST

* Wed 10 Sep 2014 05:59:27 AM JST
        self._account = account

* Wed 10 Sep 2014 05:59:40 AM JST
_account
* Wed 10 Sep 2014 06:00:46 AM JST
_account
* Wed 10 Sep 2014 06:01:34 AM JST
None # should raise NotImplementedError()
* Wed 10 Sep 2014 06:01:57 AM JST
None # should raise NotImplementedError()
* Wed 10 Sep 2014 06:02:28 AM JST
self._socket.send(order.get_orderline())
* Wed 10 Sep 2014 06:02:43 AM JST
get
* Wed 10 Sep 2014 06:03:06 AM JST
import
* Wed 10 Sep 2014 06:04:07 AM JST
        logindirector = director.LoginDirector(
            authenticator.AquosAuthenticator(self))
        logindirector.direct()

* Wed 10 Sep 2014 06:04:33 AM JST
account
* Wed 10 Sep 2014 01:58:31 PM JST
Director
* Wed 10 Sep 2014 01:58:52 PM JST
director
* Wed 10 Sep 2014 01:58:56 PM JST
.Director
* Wed 10 Sep 2014 01:59:46 PM JST
class LoginDirector(director.Director):
    """Class LoginDirector
    """
    # Attributes:
    def __init__(self, authenticator):
        r"""SUMMARY

        __init__(authenticator)

        @Arguments:
        - `authenticator`:

        @Return:

        @Error:
        """
        self._authenticator = authenticator

    # Operations
    def direct(self):
        """function direct

        returns
        """
        self._authenticator.auth_user()
        self._authenticator.auth_password()

    def set_authenticator(self, authenticator):
        """function set_authenticator

        returns
        """
        self._authenticator = authenticator

    def get_authenticator(self):
        """function get_authenticator

        returns
        """
        return self._authenticator

* Wed 10 Sep 2014 01:59:56 PM JST
director.
* Wed 10 Sep 2014 02:00:04 PM JST
class SocketDirector(director.Director):
    """Class SocketDirector
    """
    # Attributes:
    def __init__(self, builder):
        r"""

        @Arguments:
        - `builder`:
        """
        self._builder = builder

    # Operations
    def direct(self):
        """function direct

        returns
        """
        self._builder.create_socket()
        self._builder.connect()
        return self._builder.get_result()

    def set_socketbuilder(self, builder):
        """function set_socketbuilder

        returns
        """
        self._builder = builder

    def get_socketbuilder(self):
        """function get_socketbuilder

        returns
        """
        return self._builder

* Wed 10 Sep 2014 02:00:14 PM JST
director.
* Wed 10 Sep 2014 02:00:25 PM JST
class CommandDirector(Director):
    """Class CommandDirector
    """
    # Attributes:
    def __init__(self, builder):
        r"""

        @Arguments:
        - `builder`:
        """
        self._builder = builder

    # Operations
    def direct(self):
        """function direct

        returns
        """
        self._builder.build_command_type()
        self._builder.build_parameter()
        return self._builder.get_result()

    def set_builder(self, builder):
        """function set_builder

        returns
        """
        self._builder = builder

    def get_builder(self):
        """function get_builder

        returns
        """
        return self._builder

* Wed 10 Sep 2014 02:05:43 PM JST
return 
* Wed 10 Sep 2014 02:08:44 PM JST
None # should raise NotImplementedError()
* Wed 10 Sep 2014 02:22:34 PM JST
None # should raise NotImplementedError()
* Wed 10 Sep 2014 02:22:34 PM JST
return None # should raise NotImplementedError()
* Wed 10 Sep 2014 02:22:53 PM JST
None # should raise NotImplementedError()
* Wed 10 Sep 2014 02:22:55 PM JST
return None # should raise NotImplementedError()
* Wed 10 Sep 2014 02:23:43 PM JST
        socketdirector = director.SocketDirector(
            socketbuilder.AquosSocketBuilder(ip, port))
        self._socket = socketdirector.direct()

* Wed 10 Sep 2014 02:24:41 PM JST
return None # should raise NotImplementedError()
* Wed 10 Sep 2014 03:56:29 PM JST
class AquosSocketBuilder(SocketBuilder):
    """Class AquosSocketBuilder
    """
    # Attributes:
    def __init__(self, ip, port):
        r"""

        @Arguments:
        - `ip`:
        - `port`:
        """
        self._address = Address(ip, port)
        self._socket = None

    # Operations
    def create_socket(self):
        """function create_socket

        returns socket
        """
        self._socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    def connect(self):
        """function connect

        returns
        """
        self._socket.connect((self._address.get_host().get(),
                              self._address.get_port().get()))

    def get_result(self):
        """function get_socket

        returns
        """
        return self._socket

    def get_address(self):
        """function get_address

        returns
        """
        return self._address

    def set_address(self, address):
        """function set_address

        returns
        """
        self._address = address

* Wed 10 Sep 2014 03:56:42 PM JST
import socket
from ..address import Address
from .socketbuilder import SocketBuilder

* Wed 10 Sep 2014 03:56:58 PM JST

* Wed 10 Sep 2014 03:56:58 PM JST

* Wed 10 Sep 2014 03:56:58 PM JST
from .socketbuilder import SocketBuilder

* Wed 10 Sep 2014 03:57:08 PM JST
address
* Wed 10 Sep 2014 03:57:08 PM JST
Address
* Wed 10 Sep 2014 03:58:24 PM JST
from .authenticator import Authenticator
from .. import order


class AquosAuthenticator(Authenticator):
    """Class AquosAuthenticator
    """
    # Attributes:
    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        - `account`:
        """
        self._connection = connection

    # Operations
    def _send(self, orderobj):
        r"""SUMMARY

        _send(orderobj)

        @Arguments:
        - `orderobj`:

        @Return:

        @Error:
        """
        received = self._connection.send(orderobj)
        if not received.issuccess():
            raise StandardError()

    def auth_user(self):
        """function auth_user

        returns
        """
        orderobj = order.AuthUserOrder(
            self._connection.get_account().get_user())
        self._send(orderobj)

    def auth_password(self):
        """function auth_password

        returns
        """
        orderobj = order.AuthPasswordOrder(
            self._connection.get_account().get_password())
        self._send(orderobj)

    def set_connection(self, connection):
        """function set_connection

        returns
        """
        self._connection = connection

    def get_connection(self):
        """function get_connection

        returns
        """
        return self._connection

* Wed 10 Sep 2014 03:58:33 PM JST
from .authenticator import Authenticator
from .. import order


* Wed 10 Sep 2014 03:58:41 PM JST

* Wed 10 Sep 2014 03:58:41 PM JST

* Wed 10 Sep 2014 03:58:41 PM JST
from .authenticator import Authenticator

* Wed 10 Sep 2014 03:59:17 PM JST
authenticator/
* Wed 10 Sep 2014 04:07:12 PM JST
command
* Wed 10 Sep 2014 04:08:36 PM JST
CommandOrder
* Wed 10 Sep 2014 04:18:06 PM JST
        gen = commandgenerator.CommandGenerator()
        for cmdtype in gen.list_candidate():
            self._cmds[cmdtype] = gen.generate(cmdtype)

* Wed 10 Sep 2014 04:18:12 PM JST

* Wed 10 Sep 2014 04:18:12 PM JST

* Wed 10 Sep 2014 04:18:12 PM JST
        for cmdtype in gen.list_candidate():

* Wed 10 Sep 2014 04:32:40 PM JST
connection
* Wed 10 Sep 2014 04:46:32 PM JST
authpasswordorder
* Wed 10 Sep 2014 04:46:38 PM JST

* Wed 10 Sep 2014 04:46:38 PM JST

* Wed 10 Sep 2014 04:46:38 PM JST
from ..authpasswordreceiver import AuthPasswordReceiver

* Wed 10 Sep 2014 04:46:47 PM JST
order.
* Wed 10 Sep 2014 04:47:07 PM JST
order
* Wed 10 Sep 2014 04:47:23 PM JST

* Wed 10 Sep 2014 04:47:23 PM JST

* Wed 10 Sep 2014 04:47:23 PM JST
from ..authuserreceiver import AuthUserReceiver

* Wed 10 Sep 2014 04:47:26 PM JST
AuthUserOrder
* Wed 10 Sep 2014 04:47:47 PM JST
AuthUserReceiver
* Wed 10 Sep 2014 04:47:50 PM JST
order
* Wed 10 Sep 2014 04:48:15 PM JST
CommandReceiver
* Wed 10 Sep 2014 04:48:42 PM JST
commandorder
* Wed 10 Sep 2014 04:48:44 PM JST
CommandOrder
* Wed 10 Sep 2014 04:48:46 PM JST

* Wed 10 Sep 2014 04:48:46 PM JST

* Wed 10 Sep 2014 04:48:46 PM JST
from ..commandreceiver import CommandReceiver

* Wed 10 Sep 2014 04:48:58 PM JST
order.
* Wed 10 Sep 2014 04:53:30 PM JST
import itertools
* Wed 10 Sep 2014 04:54:20 PM JST
itertools
* Wed 10 Sep 2014 04:54:20 PM JST
import itertools
* Wed 10 Sep 2014 04:54:36 PM JST
itertools.
* Wed 10 Sep 2014 04:54:37 PM JST
itertools.
* Wed 10 Sep 2014 04:54:38 PM JST
                
* Wed 10 Sep 2014 04:56:35 PM JST
itertools.chain.from_iterable(itertools.product(['a', 'b', 'c'], repeat=2))
* Wed 10 Sep 2014 04:56:37 PM JST
from 
* Wed 10 Sep 2014 05:00:34 PM JST
chain.from_iterable(product(charset, repeat=i)
* Wed 10 Sep 2014 05:00:38 PM JST
charset
* Wed 10 Sep 2014 10:08:01 PM JST

class UserInput:
    """Abstract class UserInput
    """
    # Attributes:
    
    # Operations
    def input(self):
        """function input
        
        returns string
        """
        raise NotImplementedError()
    


* Wed 10 Sep 2014 10:08:42 PM JST

* Wed 10 Sep 2014 10:08:42 PM JST

* Wed 10 Sep 2014 10:08:42 PM JST
    # Attributes:

* Wed 10 Sep 2014 10:09:32 PM JST
class CommandlineUserInput(UserInput):
    """Class CommandlineUserInput
    """
    # Attributes:
    __username = None  # (string) 
    
    # Operations
    def input(self):
        """function input
        
        returns string
        """
        return None # should raise NotImplementedError()
    
    def setusername(self, username):
        """function setusername
        
        username: string
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def getusername(self):
        """function getusername
        
        returns string
        """
        return None # should raise NotImplementedError()

* Wed 10 Sep 2014 10:10:12 PM JST
class ConsoleUserInput(UserInput):
    """Class ConsoleUserInput
    """
    # Attributes:
    __prompt = None  # (string) 
    
    # Operations
    def input(self):
        """function input
        
        returns string
        """
        return None # should raise NotImplementedError()
    
    def setprompt(self, prompt):
        """function setprompt
        
        prompt: string
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def getprompt(self):
        """function getprompt
        
        returns string
        """
        return None # should raise NotImplementedError()

* Wed 10 Sep 2014 10:10:23 PM JST
class FileUserInput(UserInput):
    """Class FileUserInput
    """
    # Attributes:
    __path = None  # (string) 
    
    # Operations
    def input(self):
        """function input
        
        returns string
        """
        return None # should raise NotImplementedError()
    
    def setpath(self, path):
        """function setpath
        
        path: string
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def getpath(self):
        """function getpath
        
        returns string
        """
        return None # should raise NotImplementedError()

* Wed 10 Sep 2014 10:10:34 PM JST
class GUIUserInput(UserInput):
    """Class GUIUserInput
    """
    # Attributes:
    __message = None  # (string) 
    
    # Operations
    def input(self):
        """function input
        
        returns string
        """
        return None # should raise NotImplementedError()

* Wed 10 Sep 2014 10:12:05 PM JST
None # should raise NotImplementedError()
* Wed 10 Sep 2014 10:12:53 PM JST
return None # should raise NotImplementedError()
* Wed 10 Sep 2014 10:13:15 PM JST
None # should raise NotImplementedError()
* Wed 10 Sep 2014 10:13:45 PM JST
None # should raise NotImplementedError()
* Wed 10 Sep 2014 10:14:32 PM JST
None # should raise NotImplementedError()
* Wed 10 Sep 2014 10:14:33 PM JST
return None # should raise NotImplementedError()
* Wed 10 Sep 2014 10:14:40 PM JST
None # should raise NotImplementedError()
* Wed 10 Sep 2014 10:30:33 PM JST
None # should raise NotImplementedError()
* Wed 10 Sep 2014 10:35:34 PM JST
from 
* Wed 10 Sep 2014 10:35:43 PM JST
easygui
* Wed 10 Sep 2014 10:41:32 PM JST
text
* Wed 10 Sep 2014 10:41:38 PM JST
text
* Wed 10 Sep 2014 10:45:03 PM JST
enterbox(msg=self._msg, title=self._title, default=self._default)
* Wed 10 Sep 2014 10:45:07 PM JST

* Wed 10 Sep 2014 10:45:07 PM JST

* Wed 10 Sep 2014 10:45:07 PM JST
        got = 

* Wed 10 Sep 2014 10:45:36 PM JST
def
* Wed 10 Sep 2014 10:46:02 PM JST
title
* Wed 10 Sep 2014 10:46:11 PM JST
default
* Wed 10 Sep 2014 10:52:58 PM JST

* Wed 10 Sep 2014 10:52:58 PM JST

* Wed 10 Sep 2014 10:52:58 PM JST
from UserInput import UserInput

* Wed 10 Sep 2014 10:53:01 PM JST

class UserInputer:
    """Class UserInputer
    """
    # Attributes:
    __inputer = None  # (UserInput) 
    
    # Operations
    def get_inputer(self):
        """function get_inputer
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_inputer(self, inputer):
        """function set_inputer
        
        inputer: UserInput
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def input(self):
        """function input
        
        returns string
        """
        return None # should raise NotImplementedError()
    


* Wed 10 Sep 2014 10:53:50 PM JST
None # should raise NotImplementedError()
* Wed 10 Sep 2014 10:54:05 PM JST
None # should raise NotImplementedError()
* Wed 10 Sep 2014 11:23:05 PM JST
userin
* Wed 10 Sep 2014 11:23:28 PM JST
pass
* Wed 10 Sep 2014 11:23:34 PM JST
sa
* Wed 10 Sep 2014 11:23:34 PM JST
self.sa
* Wed 10 Sep 2014 11:26:45 PM JST
self.
* Wed 10 Sep 2014 11:26:49 PM JST
userinput.UserInput()
* Wed 10 Sep 2014 11:46:22 PM JST

* Wed 10 Sep 2014 11:46:22 PM JST

* Wed 10 Sep 2014 11:46:22 PM JST
        self.u

* Wed 10 Sep 2014 11:48:49 PM JST
CommandlineUserInput
* Wed 10 Sep 2014 11:49:25 PM JST
MockerTestCase
* Wed 10 Sep 2014 11:50:04 PM JST
Test
* Thu 11 Sep 2014 12:09:44 AM JST
assertSkip
* Thu 11 Sep 2014 12:11:59 AM JST

* Thu 11 Sep 2014 12:11:59 AM JST

* Thu 11 Sep 2014 12:12:00 AM JST
        self.uinput = self.get_obj()

* Thu 11 Sep 2014 12:12:10 AM JST
self.
* Thu 11 Sep 2014 12:12:13 AM JST
self.
* Thu 11 Sep 2014 12:12:16 AM JST
self.
* Thu 11 Sep 2014 12:21:17 AM JST
return userinput.CommandlineUserInput(self.sampletext)
* Thu 11 Sep 2014 12:23:49 AM JST
TestCommandlineUserInput
* Thu 11 Sep 2014 12:27:42 AM JST
self.mocker.count(0, None)
* Thu 11 Sep 2014 12:33:58 AM JST
import
* Thu 11 Sep 2014 12:34:07 AM JST
input
* Thu 11 Sep 2014 12:37:24 AM JST
username
* Thu 11 Sep 2014 12:37:31 AM JST
username
* Thu 11 Sep 2014 12:38:07 AM JST
username
* Thu 11 Sep 2014 12:38:11 AM JST
_username
* Thu 11 Sep 2014 03:20:30 AM JST
MockerTestCase
* Thu 11 Sep 2014 03:22:12 AM JST
from tempfile 
* Thu 11 Sep 2014 03:23:54 AM JST
tempfile.gettempdir()
* Thu 11 Sep 2014 03:24:41 AM JST

* Thu 11 Sep 2014 03:24:41 AM JST

* Thu 11 Sep 2014 03:24:41 AM JST
        tmpfile = os.path.join(tempfile.gettempdir(), 'testfile.txt')

* Thu 11 Sep 2014 03:29:09 AM JST

* Thu 11 Sep 2014 03:29:09 AM JST

* Thu 11 Sep 2014 03:29:09 AM JST
        cls.

* Thu 11 Sep 2014 03:29:19 AM JST
cls.sampletext
* Thu 11 Sep 2014 03:33:34 AM JST
File
* Thu 11 Sep 2014 03:34:19 AM JST
comma
* Thu 11 Sep 2014 03:35:04 AM JST
tmpfile
* Thu 11 Sep 2014 03:36:50 AM JST
fileobj.readline().replace('\n', '')
* Thu 11 Sep 2014 03:37:13 AM JST
fileobj
* Thu 11 Sep 2014 03:41:00 AM JST
pass
* Thu 11 Sep 2014 03:41:22 AM JST
exist
* Thu 11 Sep 2014 03:42:59 AM JST

* Thu 11 Sep 2014 03:42:59 AM JST

* Thu 11 Sep 2014 03:42:59 AM JST
        # TestCommandlineUserInput.setUpClass(cls)

* Thu 11 Sep 2014 03:43:51 AM JST

* Thu 11 Sep 2014 03:43:51 AM JST

* Thu 11 Sep 2014 03:43:51 AM JST
        print(self.sampletext)

* Thu 11 Sep 2014 03:44:53 AM JST
 + '\n'
* Thu 11 Sep 2014 05:55:41 AM JST
    def get_obj(self, ):
        return userinput.FileUserInput(self.tmppath)

    def setUp(self):
        self.uinput = self.get_obj()
        self.mocker.replay()

* Thu 11 Sep 2014 05:55:47 AM JST
File
* Thu 11 Sep 2014 05:56:07 AM JST
pass
* Thu 11 Sep 2014 05:56:08 AM JST
self.
* Thu 11 Sep 2014 05:56:45 AM JST
        expect = self.sampletext
        got = self.uinput.input()
        self.assertEqual(expect, got, msg='Failed: {} expect: \{}, got: \{}'
                         .format(self.uinput.__class__.__name__, expect, got))

* Thu 11 Sep 2014 06:00:52 AM JST
TestCommandlineUserInput
* Thu 11 Sep 2014 06:01:11 AM JST
        self.uinput = self.get_obj()
        dummyinput = self.mocker.replace('__builtin__.input')
        dummyinput(ANY)
        self.mocker.result(self.sampletext)
        self.mocker.count(0, None)
        self.mocker.replay()

* Thu 11 Sep 2014 06:01:27 AM JST

* Thu 11 Sep 2014 06:01:27 AM JST

* Thu 11 Sep 2014 06:01:27 AM JST
        self.mocker.replay()

* Thu 11 Sep 2014 06:14:43 AM JST
b"
* Thu 11 Sep 2014 06:16:55 AM JST
(dolist (buf (buffer-list))
    (with-current-buffer buf
      (when (string-match re (buffer-name))
        (message "killing %s" (buffer-name))
        (kill-buffer buf))))
* Thu 11 Sep 2014 06:17:19 AM JST
  
* Thu 11 Sep 2014 06:17:20 AM JST
    
* Thu 11 Sep 2014 06:17:57 AM JST
          
* Thu 11 Sep 2014 06:19:12 AM JST
;;;###autoload
* Thu 11 Sep 2014 06:20:00 AM JST
(kill-buffer buf)
* Thu 11 Sep 2014 06:20:36 AM JST
;[2014/09/11]
* Thu 11 Sep 2014 06:21:50 AM JST
(y-or-n-p "'*gud' kill buffer?")
* Thu 11 Sep 2014 06:30:52 AM JST
pass
* Thu 11 Sep 2014 06:31:12 AM JST
pass
* Thu 11 Sep 2014 06:32:17 AM JST
asser
* Thu 11 Sep 2014 06:33:21 AM JST
        got = self.uinput.getcmdline()
        self.assertEqual(
            expect, got,
            msg='Failed: CommandlineUserInput.setcmdline expect: \{}, got: \{}'
            .format(expect, got))

* Thu 11 Sep 2014 06:36:55 AM JST
self.uinput = userinput.CommandlineUserInput(self.sampletext)
* Thu 11 Sep 2014 06:37:01 AM JST
cls.sampletext = 'sampletext'
* Thu 11 Sep 2014 06:37:35 AM JST
cls.sampletext = 'sampletext'
* Thu 11 Sep 2014 06:37:48 AM JST
TestSample
* Thu 11 Sep 2014 06:38:29 AM JST
Commandline
* Thu 11 Sep 2014 06:38:43 AM JST
pass
* Thu 11 Sep 2014 06:38:54 AM JST
got = 
* Thu 11 Sep 2014 06:39:24 AM JST
self.
* Thu 11 Sep 2014 06:39:43 AM JST
        self.assertEqual(
            expect, got,
            msg='Failed: CommandlineUserInput.setcmdline expect: \{}, got: \{}'
            .format(expect, got))

* Thu 11 Sep 2014 06:39:50 AM JST
Commandline
* Thu 11 Sep 2014 06:40:23 AM JST
'anothertext'
* Thu 11 Sep 2014 06:40:36 AM JST
    def test_getcmdline(self, ):
        expect = self.sampletext
        got = self.uinput.getcmdline()
        self.assertEqual(
            expect, got,
            msg='Failed: CommandlineUserInput.getcmdline expect: \{}, got: \{}'
            .format(expect, got))


* Thu 11 Sep 2014 06:40:57 AM JST
ConsoleUserInput
* Thu 11 Sep 2014 06:42:03 AM JST
self.uinput = userinput.ConsoleUserInput(self.sampletext)
* Thu 11 Sep 2014 06:42:08 AM JST
Console
* Thu 11 Sep 2014 06:42:24 AM JST
        expect = 'anothertext'
        self.uinput.setprompt(expect)
        got = self.uinput.getprompt()
        self.assertEqual(
            expect, got,
            msg='Failed: ConsoleUserInput.setprompt expect: \{}, got: \{}'
            .format(expect, got))

* Thu 11 Sep 2014 06:42:41 AM JST
Console
* Thu 11 Sep 2014 06:42:55 AM JST
    def test_getcmdline(self, ):
        expect = self.sampletext
        got = self.uinput.getprompt()
        self.assertEqual(
            expect, got,
            msg='Failed: ConsoleUserInput.getcmdline expect: \{}, got: \{}'
            .format(expect, got))


* Thu 11 Sep 2014 06:43:05 AM JST
Console
* Thu 11 Sep 2014 06:44:20 AM JST
class Test$1(${2:MockerTestCase}):
    """`(format-time-string "%Y/%m/%d")`"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self):
        self.mocker.replay()

    def test_$3(self):
        ${4:pass}
        $0

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass

* Thu 11 Sep 2014 06:46:09 AM JST
self.uinput = userinput.FileUserInput(self.sampletext)
* Thu 11 Sep 2014 06:46:21 AM JST
File
* Thu 11 Sep 2014 06:46:46 AM JST
pass
* Thu 11 Sep 2014 06:46:56 AM JST
        expect = 'anothertext'
        self.uinput.setpath(expect)
        got = self.uinput.getpath()
        self.assertEqual(
            expect, got,
            msg='Failed: FileUserInput.setpath expect: \{}, got: \{}'
            .format(expect, got))

* Thu 11 Sep 2014 06:47:20 AM JST
File
* Thu 11 Sep 2014 06:47:50 AM JST
        got = self.uinput.getpath()
        self.assertEqual(
            expect, got,
            msg='Failed: FileUserInput.getpath expect: \{}, got: \{}'
            .format(expect, got))


* Thu 11 Sep 2014 06:48:01 AM JST
File
* Thu 11 Sep 2014 06:48:27 AM JST
    def test_set_msg(self):
        expect = 'anothertext'
        self.uinput.set_msg(expect)
        got = self.uinput.get_msg()
        self.assertEqual(
            expect, got,
            msg='Failed: GUIUserInput.set_msg expect: \{}, got: \{}'
            .format(expect, got))

    def test_get_msg(self, ):
        expect = self.sampletext
        got = self.uinput.get_msg()
        self.assertEqual(
            expect, got,
            msg='Failed: GUIUserInput.get_msg expect: \{}, got: \{}'
            .format(expect, got))


* Thu 11 Sep 2014 06:48:55 AM JST
title
* Thu 11 Sep 2014 06:49:03 AM JST
    def test_set_title(self):
        expect = 'anothertext'
        self.uinput.set_title(expect)
        got = self.uinput.get_title()
        self.assertEqual(
            expect, got,
            msg='Failed: GUIUserInput.set_title expect: \{}, got: \{}'
            .format(expect, got))

    def test_get_title(self, ):
        expect = self.sampletext
        got = self.uinput.get_title()
        self.assertEqual(
            expect, got,
            msg='Failed: GUIUserInput.get_title expect: \{}, got: \{}'
            .format(expect, got))


* Thu 11 Sep 2014 06:50:32 AM JST

* Thu 11 Sep 2014 06:50:39 AM JST
UserInput
* Thu 11 Sep 2014 06:51:03 AM JST
ConsoleUserInput
* Thu 11 Sep 2014 06:51:08 AM JST
FileUserInput
* Thu 11 Sep 2014 06:51:13 AM JST
GUIUserInput
* Thu 11 Sep 2014 06:52:56 AM JST
pass
* Thu 11 Sep 2014 06:53:09 AM JST

* Thu 11 Sep 2014 06:55:30 AM JST
userinputer
* Thu 11 Sep 2014 06:56:24 AM JST
userinput.
* Thu 11 Sep 2014 06:56:30 AM JST
userinput.
* Thu 11 Sep 2014 06:56:51 AM JST
userinputer
* Thu 11 Sep 2014 06:58:00 AM JST
expect
* Thu 11 Sep 2014 06:58:25 AM JST
self.
* Thu 11 Sep 2014 06:58:47 AM JST

* Thu 11 Sep 2014 06:58:48 AM JST

* Thu 11 Sep 2014 06:58:48 AM JST
        self.assertIsIn

* Thu 11 Sep 2014 06:58:54 AM JST
FileUserInput('')
* Thu 11 Sep 2014 06:59:49 AM JST
self.
* Thu 11 Sep 2014 03:50:07 PM JST
https://forum.btcsec.com/index.php?/topic/9426-gmail-meniai-parol/
* Thu 11 Sep 2014 05:28:52 PM JST
        if sys.version_info >= (3,0):

* Thu 11 Sep 2014 05:31:54 PM JST
        dummyinput = self.mocker.replace('__builtin__.input')
        dummyinput(ANY)
        self.mocker.result(self.sampletext)
        self.mocker.count(0, None)

* Thu 11 Sep 2014 05:33:01 PM JST
        dummyrawinput = self.mocker.replace('__builtin__.raw_input')
        dummyinput(ANY)

* Thu 11 Sep 2014 05:33:13 PM JST
mocker.result(
* Thu 11 Sep 2014 05:33:15 PM JST
mocker.result
* Thu 11 Sep 2014 05:34:02 PM JST
        dummyrawinput = self.mocker.replace('__builtin__.raw_input')
        dummyrawinput(ANY)

* Thu 11 Sep 2014 05:34:05 PM JST
        self.mocker.result(self.sampletext)
        self.mocker.count(0, None)

* Thu 11 Sep 2014 05:38:46 PM JST
raw_input() does not exist in Python 3.x
* Thu 11 Sep 2014 05:44:23 PM JST
to
* Thu 11 Sep 2014 05:44:24 PM JST
tries to
* Thu 11 Sep 2014 05:47:26 PM JST
if sys.version_info <= (3, 0):
    import __builtin__
    input = __builtin__.raw_input

* Thu 11 Sep 2014 05:48:14 PM JST
safeinput
* Thu 11 Sep 2014 05:48:24 PM JST
# python 2
# input: tries to run input.
#        if input 1 to return 1
#        if input A to return "A"
# python 3
# input: like old raw_input on python 2
#        if input 1 to return "1"
#        if input A to return "A"

# python2 "input" == python3 "eval(input())"
# raw_input() does not exist in Python 3.x
# python3 "input" == python2 "raw_input"

* Thu 11 Sep 2014 05:49:14 PM JST

* Thu 11 Sep 2014 05:49:14 PM JST

* Thu 11 Sep 2014 05:49:14 PM JST
import sys

* Thu 11 Sep 2014 05:49:17 PM JST
safeinput
* Fri 12 Sep 2014 12:27:03 AM JST
self
* Fri 12 Sep 2014 12:32:58 AM JST
self.
* Fri 12 Sep 2014 12:56:35 AM JST
confirm.ConsoleConfirm(' ')
* Fri 12 Sep 2014 12:57:42 AM JST

* Fri 12 Sep 2014 12:57:42 AM JST

* Fri 12 Sep 2014 12:57:55 AM JST
confirm = confirm.ConsoleConfirm(' ')
* Fri 12 Sep 2014 12:58:26 AM JST
acceptables
* Fri 12 Sep 2014 12:59:20 AM JST
confirm.get_acceptables()
* Fri 12 Sep 2014 12:59:23 AM JST

* Fri 12 Sep 2014 12:59:23 AM JST

* Fri 12 Sep 2014 12:59:23 AM JST
        length = len()

* Fri 12 Sep 2014 01:11:34 AM JST
            rinput(ANY)
            self.mocker.result(key)

* Fri 12 Sep 2014 01:26:00 AM JST
asser
* Fri 12 Sep 2014 01:26:32 AM JST
got = self.confirm.get_acceptables()
* Fri 12 Sep 2014 01:28:39 AM JST
        got = self.confirm.get_acceptables()
        self.assertListEqual(got, self.acceptables)

* Fri 12 Sep 2014 01:29:07 AM JST
    def test_set_acceptables(self, ):
        expect = ['y', 'n']
        self.confirm.set_acceptables(expect)
        got = self.confirm.get_acceptables()
        self.assertListEqual(expect, got)

* Fri 12 Sep 2014 01:30:12 AM JST
N',
* Fri 12 Sep 2014 01:35:00 AM JST

* Fri 12 Sep 2014 01:35:00 AM JST

* Fri 12 Sep 2014 01:35:00 AM JST
        self.assertEqual

* Fri 12 Sep 2014 01:36:12 AM JST
        self.prompt = 'hello'
        self.acceptables = ['y', 'yes']
        self.disacceptables = ['n', 'no']

* Fri 12 Sep 2014 01:36:16 AM JST
self
* Fri 12 Sep 2014 01:36:18 AM JST
self
* Fri 12 Sep 2014 01:36:18 AM JST
self
* Fri 12 Sep 2014 01:42:45 AM JST
tkMessageBox.askyesno
* Fri 12 Sep 2014 01:43:34 AM JST
self.mocker.result(key)
* Fri 12 Sep 2014 01:43:41 AM JST
key
* Fri 12 Sep 2014 01:43:44 AM JST
        
* Fri 12 Sep 2014 01:43:46 AM JST
True
* Fri 12 Sep 2014 01:43:51 AM JST
askyesno(ANY)
* Fri 12 Sep 2014 01:46:02 AM JST
pass
* Fri 12 Sep 2014 01:46:55 AM JST
pass
* Fri 12 Sep 2014 01:47:10 AM JST
        
* Fri 12 Sep 2014 01:49:06 AM JST
got = 
* Fri 12 Sep 2014 01:51:40 AM JST
assert
* Fri 12 Sep 2014 01:51:40 AM JST
self.assert
* Fri 12 Sep 2014 01:51:58 AM JST
        self.assertEqual(expect, got,
                         msg='Failed: GUIConfirm.set_title expect: \{}, got: \{}'
                         .format(expect, got))

* Fri 12 Sep 2014 02:05:10 AM JST
    class DummyTrueConfirm(object):
        def confirm(self, ):
            return True

    class DummyFalseConfirm(object):
        def confirm(self, ):
            return False


* Fri 12 Sep 2014 02:08:34 AM JST
    class DummyTrueConfirm(object):
        def confirm(self, ):
            return True

    class DummyFalseConfirm(object):
        def confirm(self, ):
            return False
    

* Fri 12 Sep 2014 02:09:08 AM JST
        got = self.confirmer.get_confirmer()
        self.assertIsInstance(got, DummyTrueConfirm)

* Fri 12 Sep 2014 02:50:06 AM JST
acceptables = 
* Fri 12 Sep 2014 02:53:35 AM JST
UserInputer(ConsoleUserInput(self._prompt)).input()
* Fri 12 Sep 2014 02:56:41 AM JST
import 
* Fri 12 Sep 2014 02:57:07 AM JST
confirm
* Fri 12 Sep 2014 02:57:19 AM JST
ConsoleConfirm
* Fri 12 Sep 2014 02:58:12 AM JST

* Fri 12 Sep 2014 02:58:13 AM JST

* Fri 12 Sep 2014 02:58:13 AM JST
        while 1:

* Fri 12 Sep 2014 02:59:47 AM JST
rinput(ANY)
* Fri 12 Sep 2014 02:59:54 AM JST
self.mocker.result(key)
* Fri 12 Sep 2014 02:59:57 AM JST
key
* Fri 12 Sep 2014 03:00:42 AM JST
self.assertIsNone(self.confirm.confirm())
* Fri 12 Sep 2014 03:00:55 AM JST
self.mocker.result('Nothing')
* Fri 12 Sep 2014 03:01:04 AM JST
askyesno(ANY)
* Fri 12 Sep 2014 03:02:53 AM JST
self.
* Fri 12 Sep 2014 03:03:35 AM JST
self.
* Fri 12 Sep 2014 03:05:17 AM JST
confirm
* Fri 12 Sep 2014 03:05:28 AM JST
confirm.
* Fri 12 Sep 2014 03:05:34 AM JST
confirm.
* Fri 12 Sep 2014 03:06:30 AM JST
from confirm.confirm import ConsoleConfirm,
* Fri 12 Sep 2014 03:06:42 AM JST
ConsoleConfirm, 
* Fri 12 Sep 2014 03:06:45 AM JST
from confirm.confirm import GUIConfirm
* Fri 12 Sep 2014 03:10:54 AM JST
        for key in self.acceptables:
            self.assertEqual(key.lower(), self.confirm._input())

* Fri 12 Sep 2014 03:11:21 AM JST
'Nothing'
* Fri 12 Sep 2014 03:22:57 AM JST

* Fri 12 Sep 2014 03:22:57 AM JST

* Fri 12 Sep 2014 03:22:57 AM JST
        from confirm.confirm import ConsoleConfirm

* Fri 12 Sep 2014 03:23:01 AM JST
    @classmethod
    def setUpClass(cls):
        cls.prompt = 'hello'
        cls.acceptables = ['y', 'yes']
        cls.disacceptables = ['n', 'no']


* Fri 12 Sep 2014 03:23:10 AM JST
    def setUp(self):
        self.confirm = ConsoleConfirm(
            self.prompt, self.acceptables, self.disacceptables)
        rinput = self.mocker.replace('__builtin__.raw_input')
        for key in self.confirm.get_acceptables():
            rinput(ANY)
            self.mocker.result(key)
        for key in self.confirm.get_disacceptables():
            rinput(ANY)
            self.mocker.result(key)
        rinput(ANY)
        self.mocker.result('Nothing')
        self.mocker.replay()

* Fri 12 Sep 2014 03:23:20 AM JST
    def test__input(self, ):
        for key in self.acceptables:
            self.assertEqual(key.lower(), self.confirm._input())
        for key in self.disacceptables:
            self.assertEqual(key.lower(), self.confirm._input())
        self.confirm._input()

* Fri 12 Sep 2014 03:23:35 AM JST

* Fri 12 Sep 2014 03:23:35 AM JST

* Fri 12 Sep 2014 03:23:35 AM JST
        self.confirm._input()

* Fri 12 Sep 2014 03:27:59 AM JST
    def test_confirm(self, ):
        for _ in self.confirm.get_acceptables():
            self.assertTrue(self.confirm.confirm())
        for _ in self.confirm.get_disacceptables():
            self.assertFalse(self.confirm.confirm())
        self.assertIsNone(self.confirm.confirm())


* Fri 12 Sep 2014 03:29:53 AM JST
    @classmethod
    def setUpClass(cls):
        cls.title = 'TestTitle'
        cls.msg = 'TestMessage'


* Fri 12 Sep 2014 03:30:01 AM JST
    def setUp(self):
        self.confirm = GUIConfirm(self.title, self.msg)
        askyesno = self.mocker.replace('tkMessageBox.askyesno')
        askyesno(ANY)
        self.mocker.result(True)
        askyesno(ANY)
        self.mocker.result(False)
        askyesno(ANY)
        self.mocker.result('Nothing')
        self.mocker.replay()


* Fri 12 Sep 2014 03:30:11 AM JST
    def test_confirm(self):
        self.assertTrue(self.confirm.confirm())
        self.assertFalse(self.confirm.confirm())
        self.assertIsNone(self.confirm.confirm())


* Fri 12 Sep 2014 03:33:11 AM JST
    import Tkinter
    import tkMessageBox

* Fri 12 Sep 2014 03:37:49 AM JST
self
* Fri 12 Sep 2014 03:39:00 AM JST
confirm
* Fri 12 Sep 2014 03:41:10 AM JST
0.2.0
* Fri 12 Sep 2014 03:41:31 AM JST
ConsoleConfirm, GUIConfirm
* Fri 12 Sep 2014 03:41:47 AM JST
Confirmer
* Fri 12 Sep 2014 03:46:22 AM JST
DotAvoider
* Fri 12 Sep 2014 03:47:37 AM JST
avoider
* Fri 12 Sep 2014 04:18:29 AM JST
getattr(obj, mthd)
* Fri 12 Sep 2014 04:19:02 AM JST
[getattr(obj, mthd) for mthd in method]
* Fri 12 Sep 2014 04:19:18 AM JST
[getattr(obj, mthd) for mthd in method]
* Fri 12 Sep 2014 04:19:28 AM JST

* Fri 12 Sep 2014 04:19:28 AM JST

* Fri 12 Sep 2014 04:19:28 AM JST
    lis = 

* Fri 12 Sep 2014 05:59:31 PM JST
from dateutil.relativedelta import relativedelta, MO
* Fri 12 Sep 2014 06:00:20 PM JST
relativedelta
* Fri 12 Sep 2014 06:00:46 PM JST
from datetime import date, timedelta
* Fri 12 Sep 2014 09:11:49 PM JST

* Fri 12 Sep 2014 09:11:49 PM JST

* Fri 12 Sep 2014 09:11:49 PM JST
  -rw-------  1 5.5K Sep 12 03:35 confirm.pyc

* Sat 13 Sep 2014 03:01:11 AM JST
'/media/portable/system'
* Mon 15 Sep 2014 05:52:29 PM JST
[x for x in lis[:] if (self._start <= x <= self._end)]
* Tue 16 Sep 2014 02:36:59 AM JST
from DayName import DayName

class Offday:
    """Class Offday
    """
    # Attributes:
    __name = None  # () 
    __date = None  # () 
    
    # Operations
    def get_name(self):
        """function get_name
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_name(self):
        """function set_name
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_date(self):
        """function get_date
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_date(self):
        """function set_date
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __cmp__(self):
        """function __cmp__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __lt__(self, other):
        """function __lt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __le__(self, other):
        """function __le__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __gt__(self, other):
        """function __gt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ge__(self, other):
        """function __ge__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __hash__(self):
        """function __hash__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
* Tue 16 Sep 2014 02:38:45 AM JST
from DayName import DayName

class Offday:
    """Class Offday
    """
    # Attributes:
    __name = None  # () 
    __date = None  # () 
    
    # Operations
    def get_name(self):
        """function get_name
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_name(self):
        """function set_name
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_date(self):
        """function get_date
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_date(self):
        """function set_date
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __cmp__(self):
        """function __cmp__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __lt__(self, other):
        """function __lt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __le__(self, other):
        """function __le__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __gt__(self, other):
        """function __gt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ge__(self, other):
        """function __ge__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __hash__(self):
        """function __hash__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
* Tue 16 Sep 2014 02:39:07 AM JST
from DayName import DayName

class Offday:
    """Class Offday
    """
    # Attributes:
    __name = None  # () 
    __date = None  # () 
    
    # Operations
    def get_name(self):
        """function get_name
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_name(self):
        """function set_name
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_date(self):
        """function get_date
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_date(self):
        """function set_date
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __cmp__(self):
        """function __cmp__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __lt__(self, other):
        """function __lt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __le__(self, other):
        """function __le__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __gt__(self, other):
        """function __gt__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ge__(self, other):
        """function __ge__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __hash__(self):
        """function __hash__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
* Tue 16 Sep 2014 02:39:19 AM JST

* Tue 16 Sep 2014 02:39:19 AM JST

* Tue 16 Sep 2014 02:39:19 AM JST
from DayName import DayName

* Tue 16 Sep 2014 02:41:30 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 02:43:05 AM JST
self._names[self._namekey]
* Tue 16 Sep 2014 02:43:15 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 02:43:16 AM JST
return None # should raise NotImplementedError()
* Tue 16 Sep 2014 02:43:22 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 02:43:27 AM JST
return None # should raise NotImplementedError()
* Tue 16 Sep 2014 02:43:59 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 02:44:19 AM JST
self.__class__
* Tue 16 Sep 2014 02:48:14 AM JST
    def __ne__(self, other):
        """function __ne__

        other:

        returns bool
        """
        return None # should raise NotImplementedError()


* Tue 16 Sep 2014 02:48:21 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 02:48:52 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 02:49:15 AM JST
self.
* Tue 16 Sep 2014 02:50:35 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 02:51:30 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 02:52:37 AM JST
        if isinstance(other, self.__class__):
            return self._date < other.get_date()
        return self._date < other

* Tue 16 Sep 2014 02:54:15 AM JST
        if isinstance(other, self.__class__):
            return self._date <= other.get_date()
        return self._date <= other

* Tue 16 Sep 2014 02:54:25 AM JST
        if isinstance(other, self.__class__):
            return self._date > other.get_date()
        return self._date > other

* Tue 16 Sep 2014 02:55:32 AM JST

class DayName:
    """Class DayName
    """
    # Attributes:
    __names = None  # (dict) 
    
    # Operations
    def __eq__(self, other):
        """function __eq__
        
        other: str
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __hash__(self):
        """function __hash__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __add__(self, other):
        """function __add__
        
        other: 
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __iadd__(self):
        """function __iadd__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __len__(self):
        """function __len__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, key):
        """function __getitem__
        
        key: int
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def get_name(self):
        """function get_name
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def get_local_name(self):
        """function get_local_name
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iternames(self):
        """function iternames
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def listnames(self):
        """function listnames
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def listkeys(self):
        """function listkeys
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iterkeys(self):
        """function iterkeys
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 16 Sep 2014 02:56:13 AM JST
name
* Tue 16 Sep 2014 02:57:04 AM JST

* Tue 16 Sep 2014 02:57:04 AM JST

* Tue 16 Sep 2014 02:57:04 AM JST
        self._local = local

* Tue 16 Sep 2014 02:57:04 AM JST
        self._local = local

* Tue 16 Sep 2014 02:57:05 AM JST
        self._local = local
        self._args = args

* Tue 16 Sep 2014 03:00:27 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:00:55 AM JST
self._name.itervalues()
* Tue 16 Sep 2014 03:01:05 AM JST

* Tue 16 Sep 2014 03:01:05 AM JST

* Tue 16 Sep 2014 03:01:05 AM JST
            for name in :

* Tue 16 Sep 2014 03:01:06 AM JST
            for name in :

* Tue 16 Sep 2014 03:01:06 AM JST
            for name in :
                if name == other:

* Tue 16 Sep 2014 03:01:12 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:02:40 AM JST
            
* Tue 16 Sep 2014 03:02:56 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:03:16 AM JST
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    

* Tue 16 Sep 2014 03:03:22 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:06:27 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:06:37 AM JST
self
* Tue 16 Sep 2014 03:06:55 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:07:09 AM JST
_name
* Tue 16 Sep 2014 03:07:53 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:07:57 AM JST
self
* Tue 16 Sep 2014 03:08:07 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:08:50 AM JST
None
* Tue 16 Sep 2014 03:09:20 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:10:02 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:10:21 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:10:31 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:38:47 AM JST
from Offday import Offday

class OffdayList:
    """Class OffdayList
    """
    # Attributes:
    __sortedlist = None  # () 
    
    # Operations
    def between(self, start, end):
        """function between
        
        start: 
        end: 
        
        returns SortedList
        """
        return None # should raise NotImplementedError()
    
    def __contains__(self):
        """function __contains__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def append(self, item):
        """function append
        
        item: 
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def insert(self, index, item):
        """function insert
        
        index: int
        item: Holida
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, index, item):
        """function __setitem__
        
        index: int
        item: 
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def __delitem__(self, index):
        """function __delitem__
        
        index: int
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def __setslice__(self, start, end, itrable):
        """function __setslice__
        
        start: int
        end: int
        itrable: 
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def __add__(self, other):
        """function __add__
        
        other: 
        
        returns SortedList
        """
        return None # should raise NotImplementedError()
    
    def __radd__(self, other):
        """function __radd__
        
        other: 
        
        returns SortedList
        """
        return None # should raise NotImplementedError()
    
    def __iadd__(self, other):
        """function __iadd__
        
        other: 
        
        returns SortedList
        """
        return None # should raise NotImplementedError()
    
    def __mull__(self, num):
        """function __mull__
        
        num: int
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def __imul__(self, other):
        """function __imul__
        
        other: 
        
        returns SortedList
        """
        return None # should raise NotImplementedError()
    
    def append(self, item):
        """function append
        
        item: 
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def insert(self, index, item):
        """function insert
        
        index: 
        item: 
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def pop(self, i):
        """function pop
        
        i: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove(self, item):
        """function remove
        
        item: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def extend(self, other):
        """function extend
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __getslice__(self, start, end):
        """function __getslice__
        
        start: int,date
        end: int,date
        
        returns HolidayList
        """
        return None # should raise NotImplementedError()
    


* Tue 16 Sep 2014 03:39:00 AM JST

* Tue 16 Sep 2014 03:39:00 AM JST

* Tue 16 Sep 2014 03:39:00 AM JST
from Offday import Offday

* Tue 16 Sep 2014 03:43:05 AM JST
    def remove(self, item):
        """function remove
        
        item: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def extend(self, other):
        """function extend
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    

* Tue 16 Sep 2014 03:45:21 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:46:38 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:46:49 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:47:21 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:48:20 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:48:34 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:49:33 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:49:46 AM JST
return None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:51:37 AM JST
b', ]
* Tue 16 Sep 2014 03:52:03 AM JST
return 
* Tue 16 Sep 2014 03:52:16 AM JST
return None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:54:34 AM JST
return None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:58:57 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:59:18 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 03:59:31 AM JST
self._sortedlist
* Tue 16 Sep 2014 04:00:59 AM JST
OffdayList
* Tue 16 Sep 2014 04:35:35 AM JST
pass
* Tue 16 Sep 2014 04:36:28 AM JST
                       
* Tue 16 Sep 2014 04:36:46 AM JST
                       
* Tue 16 Sep 2014 04:36:54 AM JST
                       
* Tue 16 Sep 2014 04:37:05 AM JST
                       
* Tue 16 Sep 2014 04:37:16 AM JST
                       
* Tue 16 Sep 2014 04:44:06 AM JST

* Tue 16 Sep 2014 04:44:16 AM JST
                       
* Tue 16 Sep 2014 04:44:31 AM JST

* Tue 16 Sep 2014 04:44:39 AM JST
                       
* Tue 16 Sep 2014 04:44:45 AM JST
                       
* Tue 16 Sep 2014 04:45:27 AM JST
                       
* Tue 16 Sep 2014 04:46:30 AM JST
['a', 'b', 'c', 'e']
* Tue 16 Sep 2014 04:47:25 AM JST
rando
* Tue 16 Sep 2014 04:47:41 AM JST
random
* Tue 16 Sep 2014 04:47:59 AM JST
random
* Tue 16 Sep 2014 04:48:05 AM JST
random
* Tue 16 Sep 2014 04:51:38 AM JST
offdaylist
* Tue 16 Sep 2014 04:51:42 AM JST
self.daylist
* Tue 16 Sep 2014 04:53:21 AM JST
offdaylist
* Tue 16 Sep 2014 05:04:06 AM JST
OffdayList
* Tue 16 Sep 2014 05:06:01 AM JST

* Tue 16 Sep 2014 05:06:02 AM JST

* Tue 16 Sep 2014 05:06:02 AM JST
        super(OffdayList, self).__index__()

* Tue 16 Sep 2014 05:08:24 AM JST
item, *args
* Tue 16 Sep 2014 05:11:52 AM JST
self.daylist
* Tue 16 Sep 2014 05:25:11 AM JST
OffdayList(
* Tue 16 Sep 2014 05:25:12 AM JST
            
* Tue 16 Sep 2014 05:35:20 AM JST
date(2000, 1, 2)
* Tue 16 Sep 2014 05:35:25 AM JST
date(2000, 5, 2)
* Tue 16 Sep 2014 05:52:05 AM JST
date(2000, 1,1)
* Tue 16 Sep 2014 05:53:40 AM JST
offdaylist
* Tue 16 Sep 2014 05:55:32 AM JST
daylist = [Offday('a', date(2000, 1, 1)),
                       Offday('b', date(2000, 2, 1)),
                       Offday('c', date(2000, 3, 1)),
                       Offday('d', date(2000, 4, 1)),
                       Offday('e', date(2000, 5, 1)),
                       Offday('f', date(2000, 6, 1)),
                       Offday('g', date(2000, 7, 1)),
                       Offday('h', date(2000, 8, 1)),
                       Offday('i', date(2000, 9, 1)),
                       Offday('j', date(2000, 11, 1)),
                       Offday('j', date(2000, 12, 1)),
                       Offday('i', date(2001, 10, 1)),
        ]
* Tue 16 Sep 2014 05:59:03 AM JST
x >= start and x <= end
* Tue 16 Sep 2014 05:59:10 AM JST

* Tue 16 Sep 2014 05:59:10 AM JST

* Tue 16 Sep 2014 05:59:10 AM JST
        x >= start and x <= end

* Tue 16 Sep 2014 06:14:29 AM JST
Offday('a', date(2000, 1, 1))
* Tue 16 Sep 2014 06:16:07 AM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 06:16:11 AM JST
self.
* Tue 16 Sep 2014 06:18:38 AM JST
self.
* Tue 16 Sep 2014 06:18:42 AM JST
expect = self.daylist[:]
* Tue 16 Sep 2014 06:19:19 AM JST
self.assertListEqual(expect, list(self.offdaylist))
* Tue 16 Sep 2014 06:21:41 AM JST
Offday('g', date(2000, 7, 1))
* Tue 16 Sep 2014 06:21:51 AM JST
expect = self.daylist[:]
* Tue 16 Sep 2014 06:22:31 AM JST
assert
* Tue 16 Sep 2014 06:22:31 AM JST
self.assert
* Tue 16 Sep 2014 06:23:09 AM JST
self.assertListEqual(expect, list(self.offdaylist))
* Tue 16 Sep 2014 06:23:48 AM JST
Offday('x', date(2000, 1, 15))
* Tue 16 Sep 2014 06:24:19 AM JST
Offday('x', date(2000, 1, 15))
* Tue 16 Sep 2014 06:24:35 AM JST
expect = self.daylist[:]
* Tue 16 Sep 2014 06:27:44 AM JST

* Tue 16 Sep 2014 06:28:42 AM JST
self.assertListEqual(expect, list(self.offdaylist))
* Tue 16 Sep 2014 06:40:17 AM JST
Offday('x', date(2000, 1, 15))
* Tue 16 Sep 2014 06:40:33 AM JST
expect = self.daylist[:]
* Tue 16 Sep 2014 06:41:59 AM JST
self.assertListEqual(expect, list(self.offdaylist))
* Tue 16 Sep 2014 06:42:58 AM JST
expect = self.daylist[:]
* Tue 16 Sep 2014 06:44:42 AM JST
self.assertListEqual(expect, list(self.offdaylist))
* Tue 16 Sep 2014 06:50:08 AM JST
        ext1 = Offday('x', date(2000, 1, 15))
        ext2 = Offday('x', date(2000, 2, 15))
        expect = self.daylist[:]
        expect.insert(2, ext2)
        expect.insert(1, ext1)

* Tue 16 Sep 2014 06:52:59 AM JST
self.assertListEqual(expect, list(self.offdaylist))
* Tue 16 Sep 2014 07:01:10 AM JST
list(
* Tue 16 Sep 2014 07:02:34 AM JST
self._sortedlist + other
* Tue 16 Sep 2014 07:03:16 AM JST
list(
* Tue 16 Sep 2014 07:03:20 AM JST
other
* Tue 16 Sep 2014 07:03:50 AM JST
got
* Tue 16 Sep 2014 07:14:59 AM JST
ext1 = Offday('x', date(2000, 1, 15))
* Tue 16 Sep 2014 07:15:04 AM JST
expect = self.daylist[:]
* Tue 16 Sep 2014 07:17:33 AM JST
self.assertListEqual(expect, list(got))
* Tue 16 Sep 2014 07:17:39 AM JST
got
* Tue 16 Sep 2014 07:18:38 AM JST
list(self.offdaylist)
* Tue 16 Sep 2014 07:18:57 AM JST
self.offdaylist
* Tue 16 Sep 2014 07:28:19 AM JST
expect = self.daylist[:]
* Tue 16 Sep 2014 07:30:27 AM JST
self.assertListEqual(expect, list(self.offdaylist))
* Tue 16 Sep 2014 07:57:16 AM JST
self
* Tue 16 Sep 2014 07:57:21 AM JST
dayl
* Tue 16 Sep 2014 07:57:35 AM JST
self.
* Tue 16 Sep 2014 08:02:12 AM JST
Offday('h', date(2000, 8, 1))
* Tue 16 Sep 2014 05:00:15 PM JST
TypeError: can't compare datetime.date to str
* Tue 16 Sep 2014 05:12:38 PM JST
DayName("New Year's Day", "元旦")
* Tue 16 Sep 2014 05:12:55 PM JST
date(2000, 1, 1)
* Tue 16 Sep 2014 05:13:05 PM JST
                             
* Tue 16 Sep 2014 05:19:56 PM JST
"Emperor's Birthday"
* Tue 16 Sep 2014 05:20:35 PM JST
u'天皇誕生日'
* Tue 16 Sep 2014 05:20:54 PM JST

* Tue 16 Sep 2014 05:20:54 PM JST

* Tue 16 Sep 2014 05:20:54 PM JST
        self.asser

* Tue 16 Sep 2014 05:20:57 PM JST
        self.assertEqual(self.dayname, got,
                         msg='Failed: Offday.get_name expect: \{}, got: \{}'
                         .format(self.dayname, got))

* Tue 16 Sep 2014 05:21:36 PM JST
dayname
* Tue 16 Sep 2014 05:21:36 PM JST
self.dayname
* Tue 16 Sep 2014 05:23:24 PM JST
get
* Tue 16 Sep 2014 05:30:20 PM JST
"New Year's Day"
* Tue 16 Sep 2014 05:30:45 PM JST
"元旦"
* Tue 16 Sep 2014 05:31:11 PM JST
self
* Tue 16 Sep 2014 05:31:13 PM JST
self
* Tue 16 Sep 2014 05:32:38 PM JST
Offday(self.dayname, self.date)
* Tue 16 Sep 2014 05:35:17 PM JST
DayName("Emperor's Birthday", u'天皇誕生日')
* Tue 16 Sep 2014 05:37:58 PM JST

* Tue 16 Sep 2014 05:37:58 PM JST

* Tue 16 Sep 2014 05:37:58 PM JST
        dayname = 

* Tue 16 Sep 2014 05:38:24 PM JST
                         
* Tue 16 Sep 2014 05:39:10 PM JST
        
* Tue 16 Sep 2014 05:39:41 PM JST
        
* Tue 16 Sep 2014 05:40:26 PM JST

* Tue 16 Sep 2014 05:40:34 PM JST

* Tue 16 Sep 2014 05:40:41 PM JST

* Tue 16 Sep 2014 05:40:48 PM JST
        
* Tue 16 Sep 2014 05:43:04 PM JST
DayName
* Tue 16 Sep 2014 05:47:06 PM JST
offday
* Tue 16 Sep 2014 05:47:12 PM JST
dayname
* Tue 16 Sep 2014 05:49:59 PM JST
        offday2 = Offday(self.dayname, self.date)
        self.assertTrue(self.offday == offday2)
        self.assertTrue(self.offday == self.dayname)
        self.assertTrue(self.offday == self.enname)
        self.assertTrue(self.offday == self.jpname)
        self.assertTrue(self.offday == self.date)

        enname = "Emperor's Birthday"
        jpname = u'天皇誕生日'
        dayname = DayName(enname, jpname)
        date2 = date(2000, 12, 23)
        offday3 = Offday(dayname, date2)
        self.assertFalse(self.offday == enname)
        self.assertFalse(self.offday == jpname)
        self.assertFalse(self.offday == dayname)
        self.assertFalse(self.offday == date2)
        self.assertFalse(self.offday == offday3)

* Tue 16 Sep 2014 05:51:18 PM JST
'{0.__class__.__name__}(_name="{1}", _date={0._date})'
* Tue 16 Sep 2014 05:59:54 PM JST
        enname = "Emperor's Birthday"
        jpname = u'天皇誕生日'
        dayname = DayName(enname, jpname)
        date2 = date(2000, 12, 23)
        offday3 = Offday(dayname, date2)

* Tue 16 Sep 2014 06:00:01 PM JST

* Tue 16 Sep 2014 06:00:01 PM JST

* Tue 16 Sep 2014 06:00:01 PM JST
        day = date(2000, 12, 23)

* Tue 16 Sep 2014 06:00:25 PM JST

* Tue 16 Sep 2014 06:00:26 PM JST
offday3
* Tue 16 Sep 2014 06:04:57 PM JST
date2 = date(2000, 12, 23)
* Tue 16 Sep 2014 06:05:23 PM JST
Offday(dayname, date2)
* Tue 16 Sep 2014 06:05:47 PM JST
        
* Tue 16 Sep 2014 06:06:12 PM JST
        enname = "Emperor's Birthday"
        jpname = u'天皇誕生日'
        dayname = DayName(enname, jpname)
        date2 = date(2000, 12, 23)
        offday3 = Offday(dayname, date2)
        self.assertTrue(self.offday < offday3)
        self.assertTrue(self.offday < date2)
        date3 = date(1999, 12, 23)
        offday4 = Offday(dayname, date3)
        self.assertFalse(self.offday < offday4)
        self.assertFalse(self.offday < date3)
        with self.assertRaises(TypeError):
            self.offday < jpname

* Tue 16 Sep 2014 06:09:41 PM JST

* Tue 16 Sep 2014 06:09:41 PM JST

* Tue 16 Sep 2014 06:09:42 PM JST
    deft

* Tue 16 Sep 2014 06:10:31 PM JST
        enname = "Emperor's Birthday"
        jpname = u'天皇誕生日'
        dayname = DayName(enname, jpname)
        date2 = date(2000, 12, 23)
        offday3 = Offday(dayname, date2)
        self.assertTrue(self.offday < offday3)
        self.assertTrue(self.offday < date2)
        date3 = date(1999, 12, 23)
        offday4 = Offday(dayname, date3)
        self.assertFalse(self.offday < offday4)
        self.assertFalse(self.offday < date3)
        with self.assertRaises(TypeError):
            self.offday < jpname

* Tue 16 Sep 2014 06:11:40 PM JST
        
* Tue 16 Sep 2014 06:11:41 PM JST
offday
* Tue 16 Sep 2014 06:14:02 PM JST
        enname = "Emperor's Birthday"
        jpname = u'天皇誕生日'
        dayname = DayName(enname, jpname)
        date2 = date(2000, 12, 23)
        offday3 = Offday(dayname, date2)
        self.assertFalse(self.offday > offday3)
        self.assertFalse(self.offday > date2)
        date3 = date(1999, 12, 23)
        offday4 = Offday(dayname, date3)
        self.assertTrue(self.offday > offday4)
        self.assertTrue(self.offday > date3)
        with self.assertRaises(TypeError):
            self.offday < jpname

* Tue 16 Sep 2014 06:15:37 PM JST
        
* Tue 16 Sep 2014 06:15:45 PM JST
offday
* Tue 16 Sep 2014 06:35:31 PM JST
        cls.enname = "New Year's Day"
        cls.jpname = "元旦"
        cls.dayname = DayName(cls.enname, cls.jpname)

* Tue 16 Sep 2014 06:35:41 PM JST

* Tue 16 Sep 2014 06:35:41 PM JST

* Tue 16 Sep 2014 06:35:41 PM JST
        cls.dayname = DayName(cls.enname, cls.jpname)

* Tue 16 Sep 2014 06:35:43 PM JST

* Tue 16 Sep 2014 06:35:43 PM JST

* Tue 16 Sep 2014 06:35:43 PM JST
        cls.dayname = DayName(cls.enname, cls.jpname)

* Tue 16 Sep 2014 06:35:46 PM JST
cls
* Tue 16 Sep 2014 06:35:49 PM JST
cls
* Tue 16 Sep 2014 06:35:51 PM JST
cls
* Tue 16 Sep 2014 06:36:25 PM JST
    def get_name(self):
        """function get_name
        
        returns str
        """
        return str(self)
    
    def get_local_name(self):
        """function get_local_name
        
        returns 
        """
        return self._names.get(self.localkey, None)
    
    def iternames(self):
        """function iternames
        
        returns 
        """
        return self._names.itervalues()
    
    def listnames(self):
        """function listnames
        
        returns 
        """
        return self._names.values()
    
    def listkeys(self):
        """function listkeys
        
        returns 
        """
        return self._names.keys()
    
    def iterkeys(self):
        """function iterkeys
        
        returns 
        """
        return self._names.iterkeys()

* Tue 16 Sep 2014 06:41:25 PM JST
self.dayname.iternames()
* Tue 16 Sep 2014 09:56:22 PM JST

* Tue 16 Sep 2014 09:56:22 PM JST

* Tue 16 Sep 2014 09:56:22 PM JST
        expect = []

* Tue 16 Sep 2014 09:56:24 PM JST
        expect = [self.enname, self.jpname]
        got = list(self.dayname.iternames())
        expect.sort()
        got.sort()
        self.assertListEqual(expect, got)

* Tue 16 Sep 2014 09:59:34 PM JST
    def test_listkeys(self, ):
        expect = [self.dayname.namekey, self.dayname.localkey]
        got = self.dayname.listkeys()
        expect.sort()
        got.sort()
        self.assertListEqual(expect, got)

* Tue 16 Sep 2014 09:59:48 PM JST
self.dayname.iterkeys()
* Tue 16 Sep 2014 09:59:57 PM JST
list(
* Tue 16 Sep 2014 10:06:50 PM JST
        
* Tue 16 Sep 2014 10:07:04 PM JST
        cls.enname = "New Year's Day"
        cls.jpname = "元旦"

    def setUp(self):
        self.dayname = DayName(self.enname, self.jpname)

* Tue 16 Sep 2014 10:07:10 PM JST

* Tue 16 Sep 2014 10:07:10 PM JST

* Tue 16 Sep 2014 10:07:10 PM JST
    def setUp(self):

* Tue 16 Sep 2014 10:07:14 PM JST
cls.
* Tue 16 Sep 2014 10:07:16 PM JST
cls.
* Tue 16 Sep 2014 10:07:40 PM JST
"Emperor's Birthday"
* Tue 16 Sep 2014 10:07:48 PM JST
'天皇誕生日'
* Tue 16 Sep 2014 10:07:58 PM JST
self.
* Tue 16 Sep 2014 10:08:02 PM JST
self.
* Tue 16 Sep 2014 10:08:04 PM JST
self.
* Tue 16 Sep 2014 10:08:26 PM JST

* Tue 16 Sep 2014 10:08:27 PM JST
enname
* Tue 16 Sep 2014 10:08:31 PM JST

* Tue 16 Sep 2014 10:08:36 PM JST
jpname
* Tue 16 Sep 2014 10:09:59 PM JST
        self.assertTrue(self.dayname == self.dayname)
        self.assertTrue(self.dayname == self.jpname)
        self.assertTrue(self.dayname == self.enname)

        enname = "Emperor's Birthday"
        jpname = '天皇誕生日'
        dayname = DayName(enname, jpname)
        self.assertFalse(self.dayname == enname)
        self.assertFalse(self.dayname == jpname)
        self.assertFalse(self.dayname == dayname)

* Tue 16 Sep 2014 10:56:55 PM JST
        self.dayname = DayName(self.enname, self.jpname)
* Tue 16 Sep 2014 10:57:01 PM JST
self.
* Tue 16 Sep 2014 10:58:16 PM JST
ass
* Tue 16 Sep 2014 10:58:17 PM JST
self.ass
* Tue 16 Sep 2014 10:58:24 PM JST
'Other Name'
* Tue 16 Sep 2014 11:14:56 PM JST
OffdayBuild
* Tue 16 Sep 2014 11:15:15 PM JST

class OffdayBuild:
    """Abstract class OffdayBuild
    """
    # Attributes:
    
    # Operations
    def set_metadata(self, metadata):
        """function set_metadata
        
        metadata: 
        
        returns void
        """
        raise NotImplementedError()
    
    def ismatch(self):
        """function ismatch
        
        returns bool
        """
        raise NotImplementedError()
    
    def build_name(self):
        """function build_name
        
        returns 
        """
        raise NotImplementedError()
    
    def build_date(self):
        """function build_date
        
        returns 
        """
        raise NotImplementedError()
    


* Tue 16 Sep 2014 11:15:45 PM JST
from Metadata import Metadata
from OffdayBuild import OffdayBuild

class OffdayBuilder:
    """Class OffdayBuilder
    """
    # Attributes:
    __builder = None  # (OffdayBuild) 
    __metadata = None  # () 
    
    # Operations
    def get_builder(self):
        """function get_builder
        
        returns HolidayBuild
        """
        return None # should raise NotImplementedError()
    
    def set_builder(self, builder):
        """function set_builder
        
        builder: HolidayBuild
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def build(self):
        """function build
        
        returns Holiday
        """
        return None # should raise NotImplementedError()
    
    def get_metadata(self):
        """function get_metadata
        
        returns Metadata
        """
        return None # should raise NotImplementedError()
    
    def set_metadata(self, Metadata):
        """function set_metadata
        
        Metadata: 
        
        returns void
        """
        return None # should raise NotImplementedError()
    



* Tue 16 Sep 2014 11:15:59 PM JST

* Tue 16 Sep 2014 11:15:59 PM JST

* Tue 16 Sep 2014 11:15:59 PM JST
from Metadata import Metadata

* Tue 16 Sep 2014 11:15:59 PM JST
from Metadata import Metadata

* Tue 16 Sep 2014 11:15:59 PM JST
from Metadata import Metadata
from OffdayBuild import OffdayBuild

* Tue 16 Sep 2014 11:20:05 PM JST
@abstractmethod
* Tue 16 Sep 2014 11:21:50 PM JST

class Metadata:
    """Class Metadata
    """
    # Attributes:
    
    # Operations


* Tue 16 Sep 2014 11:26:31 PM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 11:26:43 PM JST
return None # should raise NotImplementedError()
* Tue 16 Sep 2014 11:27:19 PM JST
return None # should raise NotImplementedError()
* Tue 16 Sep 2014 11:27:30 PM JST
None # should raise NotImplementedError()
* Tue 16 Sep 2014 11:29:17 PM JST
 # should raise NotImplementedError()
* Tue 16 Sep 2014 11:34:16 PM JST

* Tue 16 Sep 2014 11:34:16 PM JST

* Tue 16 Sep 2014 11:34:16 PM JST
        offday = Off

* Tue 16 Sep 2014 11:34:52 PM JST

* Tue 16 Sep 2014 11:34:52 PM JST

* Tue 16 Sep 2014 11:34:52 PM JST
from offday.metadata import Metadata

* Tue 16 Sep 2014 11:53:07 PM JST
_builder.
* Tue 16 Sep 2014 11:56:17 PM JST

* Tue 16 Sep 2014 11:56:17 PM JST

* Tue 16 Sep 2014 11:56:17 PM JST
        self._set_metadata()

* Tue 16 Sep 2014 11:56:39 PM JST

* Tue 16 Sep 2014 11:56:39 PM JST

* Tue 16 Sep 2014 11:56:39 PM JST
        self._set_metadata()

* Wed 17 Sep 2014 01:05:31 AM JST

* Wed 17 Sep 2014 01:05:31 AM JST

* Wed 17 Sep 2014 01:05:31 AM JST
        self._metadata = metadata

* Fri 19 Sep 2014 10:13:32 AM JST
date
* Fri 19 Sep 2014 10:13:32 AM JST
datetime.date
* Fri 19 Sep 2014 11:43:46 AM JST
pass
* Fri 19 Sep 2014 12:14:07 PM JST
datetime.timedelta(1)
* Sat 20 Sep 2014 07:46:59 AM JST
from DayName import DayName

class NamedDate:
    """Class NamedDate
    """
    # Attributes:
    __name = None  # () 
    
    # Operations
    def getname(self):
        """function getname
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def setname(self):
        """function setname
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def getdate(self):
        """function getdate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    


* Sat 20 Sep 2014 07:47:12 AM JST

* Sat 20 Sep 2014 07:47:12 AM JST

* Sat 20 Sep 2014 07:47:12 AM JST
from DayName import DayName

* Sat 20 Sep 2014 07:50:13 AM JST
year
* Sat 20 Sep 2014 07:50:36 AM JST

* Sat 20 Sep 2014 07:50:36 AM JST

* Sat 20 Sep 2014 07:50:36 AM JST
        super(Tes, self).__init__(*args)

* Sat 20 Sep 2014 07:50:37 AM JST
        super(Tes, self).__init__(*args)

* Sat 20 Sep 2014 07:50:38 AM JST
        super(Tes, self).__init__(*args)
        print(args)

* Sat 20 Sep 2014 07:51:06 AM JST
name, 
* Sat 20 Sep 2014 07:52:20 AM JST
name, 
* Sat 20 Sep 2014 07:52:25 AM JST
name, 
* Sat 20 Sep 2014 07:58:16 AM JST
args
* Sat 20 Sep 2014 07:58:36 AM JST
args
* Sat 20 Sep 2014 07:58:42 AM JST
args
* Sat 20 Sep 2014 07:59:34 AM JST
name, 
* Sat 20 Sep 2014 08:00:12 AM JST
type
* Sat 20 Sep 2014 08:00:48 AM JST

* Sat 20 Sep 2014 08:00:48 AM JST

* Sat 20 Sep 2014 08:00:48 AM JST
    __name = None  # () 

* Sat 20 Sep 2014 08:01:11 AM JST
name, 
* Sat 20 Sep 2014 08:01:15 AM JST

* Sat 20 Sep 2014 08:01:15 AM JST

* Sat 20 Sep 2014 08:01:15 AM JST
        self._year = year

* Sat 20 Sep 2014 08:01:15 AM JST
        self._year = year

* Sat 20 Sep 2014 08:01:15 AM JST
        self._year = year
        self._month = month

* Sat 20 Sep 2014 08:01:16 AM JST
        self._year = year
        self._month = month

* Sat 20 Sep 2014 08:01:16 AM JST
        self._year = year
        self._month = month
        self._day = day

* Sat 20 Sep 2014 08:01:27 AM JST
None # should raise NotImplementedError()
* Sat 20 Sep 2014 08:01:32 AM JST
None # should raise NotImplementedError()
* Sat 20 Sep 2014 08:01:32 AM JST
return None # should raise NotImplementedError()
* Sat 20 Sep 2014 08:03:16 AM JST
None # should raise NotImplementedError()
* Sat 20 Sep 2014 08:08:52 AM JST
_name
* Sat 20 Sep 2014 08:08:53 AM JST
self._name
* Sat 20 Sep 2014 08:08:53 AM JST
other == self._name
* Sat 20 Sep 2014 08:09:10 AM JST
None # should raise NotImplementedError()
* Sat 20 Sep 2014 08:09:22 AM JST
None # should raise NotImplementedError()
* Sat 20 Sep 2014 08:10:05 AM JST
NamedDate
* Sat 20 Sep 2014 08:20:43 AM JST
NamedDate
* Sat 20 Sep 2014 08:27:31 AM JST
        self.name = 'New Years Day'
        self.year = 2000
        self.month = 1
        self.day = 1

* Sat 20 Sep 2014 08:27:37 AM JST
self
* Sat 20 Sep 2014 08:27:38 AM JST
self
* Sat 20 Sep 2014 08:27:38 AM JST
self
* Sat 20 Sep 2014 08:27:38 AM JST
self
* Sat 20 Sep 2014 08:31:02 AM JST
self.assertEqual(expect, got)
* Sat 20 Sep 2014 08:32:18 AM JST
self.
* Sat 20 Sep 2014 08:35:37 AM JST
"Emperor's Birthday"
* Sat 20 Sep 2014 08:38:18 AM JST
self.nameddate == 
* Sat 20 Sep 2014 08:40:54 AM JST
other
* Sat 20 Sep 2014 08:45:16 AM JST
self._name == other
* Sat 20 Sep 2014 08:45:18 AM JST

* Sat 20 Sep 2014 08:45:18 AM JST

* Sat 20 Sep 2014 08:45:18 AM JST
        if :

* Sat 20 Sep 2014 08:46:53 AM JST
        self.assertTrue(self.nameddate == self.name)
        self.assertTrue(
            self.nameddate == NamedDate(
                self.name, self.year, self.month, self.day))
        self.assertTrue(self.nameddate == date(self.year, self.month, self.day))
        self.assertFalse(self.nameddate == "Emperor's Birthday")
        self.assertFalse(
            self.nameddate == NamedDate(self.name, 1999, self.month, self.day))
        self.assertFalse(self.nameddate == date(1999, 1, 1))

* Sat 20 Sep 2014 08:47:56 AM JST
True
* Sat 20 Sep 2014 08:48:06 AM JST
true
* Sat 20 Sep 2014 08:48:11 AM JST

* Sat 20 Sep 2014 08:48:11 AM JST

* Sat 20 Sep 2014 08:48:11 AM JST
        False

* Sat 20 Sep 2014 08:59:38 AM JST
month
* Sat 20 Sep 2014 09:01:00 AM JST
1949
* Sat 20 Sep 2014 09:03:26 AM JST

* Sat 20 Sep 2014 09:03:27 AM JST
MetaBuild
* Sat 20 Sep 2014 09:03:28 AM JST
offdaybuild
* Sat 20 Sep 2014 09:03:48 AM JST

* Sat 20 Sep 2014 09:03:48 AM JST

* Sat 20 Sep 2014 09:03:48 AM JST
from offday.metadata import Metadata

* Sat 20 Sep 2014 09:04:52 AM JST
daycalc
* Sat 20 Sep 2014 09:07:46 AM JST
get_metadata()
* Sat 20 Sep 2014 09:12:30 AM JST
self._get_year()
* Sat 20 Sep 2014 09:15:56 AM JST
Abstract
* Sat 20 Sep 2014 09:23:58 AM JST
self.__calc.ismatch(self._get_year())
* Sat 20 Sep 2014 09:25:00 AM JST

* Sat 20 Sep 2014 09:25:00 AM JST

* Sat 20 Sep 2014 09:25:00 AM JST
    # __calc = daycalc.NewYearsDayCalc()

* Sat 20 Sep 2014 09:25:02 AM JST

* Sat 20 Sep 2014 09:25:02 AM JST

* Sat 20 Sep 2014 09:25:02 AM JST
from offday.japan import daycalc

* Sat 20 Sep 2014 09:30:56 AM JST
from solorterm.autumnalequinox import CalcAutumnalEquinox
* Sat 20 Sep 2014 09:31:38 AM JST
'Autumnal Equinox Day'
* Sat 20 Sep 2014 09:32:54 AM JST
return self._metadata.get('year')
* Sat 20 Sep 2014 09:34:12 AM JST
date()
* Sat 20 Sep 2014 09:37:08 AM JST
get
* Sat 20 Sep 2014 09:37:25 AM JST
"Children's Day"
* Sat 20 Sep 2014 09:43:57 AM JST
from dateutil.relativedelta import relativedelta, MO
* Sat 20 Sep 2014 09:45:19 AM JST
'Coming of Age Day'
* Sat 20 Sep 2014 09:46:37 AM JST
relativedelta
* Sat 20 Sep 2014 09:47:09 AM JST
rdelta
* Sat 20 Sep 2014 09:48:14 AM JST
ComingOfAgeDayBuild
* Sat 20 Sep 2014 09:48:33 AM JST
ComingOfAgeDayBuild({'year':2000})
* Sat 20 Sep 2014 09:53:52 AM JST
    start_year = 1949
    month = 5
    day = 3

* Sat 20 Sep 2014 09:55:00 AM JST
'Constitution Memorial Day'
* Sat 20 Sep 2014 04:17:16 PM JST
DayBuild
* Sun 21 Sep 2014 05:33:00 AM JST
deque
* Sun 21 Sep 2014 07:45:44 AM JST
CatchedEvent
* Sun 21 Sep 2014 07:45:47 AM JST
CatchedEvent
* Sun 21 Sep 2014 07:47:36 AM JST
pass
* Sun 21 Sep 2014 07:47:38 AM JST
ma
* Sun 21 Sep 2014 07:47:38 AM JST
self.ma
* Sun 21 Sep 2014 07:52:01 AM JST
list(
* Sun 21 Sep 2014 07:52:21 AM JST
[str(x) for x in range(1, 6)]
* Sun 21 Sep 2014 07:54:24 AM JST
['1', '2', '3', '4', '5']
* Sun 21 Sep 2014 07:54:45 AM JST
cl
* Sun 21 Sep 2014 07:58:57 AM JST
expect
* Sun 21 Sep 2014 07:59:55 AM JST

* Sun 21 Sep 2014 07:59:56 AM JST

* Sun 21 Sep 2014 07:59:56 AM JST
        elements.reverse()

* Sun 21 Sep 2014 08:02:02 AM JST
['6', '5', '4', '3', '2']
* Sun 21 Sep 2014 08:03:26 AM JST
        for x in elements:
            self.catcher.catch(x)

* Sun 21 Sep 2014 08:03:31 AM JST
elements
* Sun 21 Sep 2014 08:04:02 AM JST
self._catch_list(self.orders)
* Sun 21 Sep 2014 08:04:20 AM JST
        got = self.catcher.list()
        self.assertListEqual(expect, got)

* Sun 21 Sep 2014 08:06:23 AM JST
self.assertEqual(self.maxlen, len(self.catcher))
* Sun 21 Sep 2014 08:07:48 AM JST
self._catch_list(self.orders)
* Sun 21 Sep 2014 08:13:29 AM JST
        with self.assertRaises(NotCatchedEventError):
            self.catcher.getlatest()

* Sun 21 Sep 2014 08:13:34 AM JST
getlatest()
* Sun 21 Sep 2014 08:18:52 AM JST
self.catcher._reset_deque(expect, self.maxlen)
* Sun 21 Sep 2014 08:18:57 AM JST
maxlen
* Sun 21 Sep 2014 08:18:57 AM JST
self.maxlen
* Sun 21 Sep 2014 08:25:29 AM JST

* Sun 21 Sep 2014 08:25:29 AM JST

* Sun 21 Sep 2014 08:25:29 AM JST
        self.assertEqual

* Sun 21 Sep 2014 08:25:39 AM JST
self.
* Sun 21 Sep 2014 08:26:30 AM JST

* Sun 21 Sep 2014 08:26:30 AM JST

* Sun 21 Sep 2014 08:26:30 AM JST
        self.assertListEqual(list1, list2, msg='Failed: ')

* Sun 21 Sep 2014 08:28:59 AM JST
'1'
* Sun 21 Sep 2014 08:30:38 AM JST
self._catch_list(self.orders)
* Sun 21 Sep 2014 08:30:45 AM JST
_catch
* Sun 21 Sep 2014 08:30:45 AM JST
self._catch
* Sun 21 Sep 2014 08:31:21 AM JST
        got = self.catcher.list()
        self.assertListEqual(expect, got)

* Sun 21 Sep 2014 08:31:38 AM JST
self.
* Sun 21 Sep 2014 08:31:53 AM JST
        expect = self.orders[:]
        expect.reverse()

* Sun 21 Sep 2014 08:32:48 AM JST
maxlen = self.maxlen + 1
* Sun 21 Sep 2014 08:34:53 AM JST
'99'
* Sun 21 Sep 2014 08:34:58 AM JST

* Sun 21 Sep 2014 08:34:59 AM JST

* Sun 21 Sep 2014 08:34:59 AM JST
        added = '99'

* Sun 21 Sep 2014 08:36:17 AM JST
self.
* Sun 21 Sep 2014 08:37:05 AM JST
self.assertFalse(beforelen == afterlen)
* Sun 21 Sep 2014 08:37:40 AM JST
        expect = self.orders[:]
        expect.reverse()
        self._catch_list(self.orders)
        got = self.catcher.list()
        self.assertListEqual(expect, got)

* Sun 21 Sep 2014 08:38:13 AM JST
self.
* Sun 21 Sep 2014 08:40:26 AM JST
self._catch_list(self.orders)
* Sun 21 Sep 2014 08:41:28 AM JST
assert
* Sun 21 Sep 2014 08:41:28 AM JST
self.assert
* Sun 21 Sep 2014 08:42:27 AM JST
        expect = self.catcher.list()
        got = catcher.list()
        self.assertListEqual(expect, got)

* Sun 21 Sep 2014 08:44:34 AM JST
maxlen
* Sun 21 Sep 2014 08:46:50 AM JST
expectlis
* Sun 21 Sep 2014 08:47:55 AM JST
_catch_lis
* Sun 21 Sep 2014 08:51:29 AM JST
self._catch_list(expectlis)
* Sun 21 Sep 2014 08:51:37 AM JST
expectlis
* Sun 21 Sep 2014 08:54:03 AM JST
got
* Sun 21 Sep 2014 08:54:57 AM JST
self._catch_list(self.orders)
* Sun 21 Sep 2014 08:56:11 AM JST
self.orders
* Sun 21 Sep 2014 08:56:42 AM JST
cach
* Sun 21 Sep 2014 08:56:43 AM JST
self.cach
* Sun 21 Sep 2014 08:57:55 AM JST
        self._catch_list(self.orders)
        expect = self.orders[:]
        expect.reverse()

* Sun 21 Sep 2014 08:57:58 AM JST
        self._catch_list(self.orders)
        expect = self.orders[:]
        expect.reverse()
        got = list(self.catcher)

* Sun 21 Sep 2014 08:58:02 AM JST
        self._catch_list(self.orders)
        expect = self.orders[:]
        expect.reverse()

* Sun 21 Sep 2014 08:58:08 AM JST
expect
* Sun 21 Sep 2014 08:58:10 AM JST
expect
* Sun 21 Sep 2014 09:00:42 AM JST
self._catch_list(self.orders)
* Sun 21 Sep 2014 09:01:46 AM JST

class NotCatchedEventError(IndexError):
    r"""NotCatchedEventError
    
    NotCatchedEventError is a IndexError.
    Responsibility: 
    """
    pass


class CatchedEvent:
    """Class CatchedEvent
    """
    # Attributes:
    __deque = None  # (collections.deque) 
    
    # Operations
    def getlatest(self):
        """function getlatest
        
        returns event
        """
        return None # should raise NotImplementedError()
    
    def list(self):
        """function list
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def catch(self, event):
        """function catch
        
        event: 
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def getmaxlen(self):
        """function getmaxlen
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def setmaxlen(self, num):
        """function setmaxlen
        
        num: int
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def clear(self):
        """function clear
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __iter__(self):
        """function __iter__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self):
        """function __getitem__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def _reset_deque(self, iterable, maxlen):
        """function reset_deque
        
        iterable: 
        maxlen: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 21 Sep 2014 09:02:13 AM JST
None  # (collections.deque) 
* Sun 21 Sep 2014 09:02:36 AM JST
collections.
* Sun 21 Sep 2014 09:03:09 AM JST

* Sun 21 Sep 2014 09:03:09 AM JST

* Sun 21 Sep 2014 09:03:09 AM JST
        self._maxlen = maxlen or 

* Sun 21 Sep 2014 09:05:49 AM JST
return None # should raise NotImplementedError()
* Sun 21 Sep 2014 09:07:12 AM JST
None # should raise NotImplementedError()
* Sun 21 Sep 2014 09:07:25 AM JST
return None # should raise NotImplementedError()
* Sun 21 Sep 2014 09:07:42 AM JST
None # should raise NotImplementedError()
* Sun 21 Sep 2014 09:08:07 AM JST
self._deque = deque(self._deque, maxlen)
* Sun 21 Sep 2014 09:08:12 AM JST

* Sun 21 Sep 2014 09:08:12 AM JST

* Sun 21 Sep 2014 09:08:12 AM JST
        return None # should raise NotImplementedError()

* Sun 21 Sep 2014 09:08:38 AM JST
return None # should raise NotImplementedError()
* Sun 21 Sep 2014 09:09:50 AM JST
None # should raise NotImplementedError()
* Sun 21 Sep 2014 09:10:16 AM JST
None # should raise NotImplementedError()
* Sun 21 Sep 2014 09:10:28 AM JST
        try:
            return self._deque[0]
        except IndexError as _err:
            raise NotCatchedEventError(str(_err))

* Sun 21 Sep 2014 09:11:07 AM JST

* Sun 21 Sep 2014 09:11:07 AM JST

* Sun 21 Sep 2014 09:11:07 AM JST
        return self._deque[key]

* Sun 21 Sep 2014 09:13:47 AM JST
CatchedEvent
* Sun 21 Sep 2014 09:14:10 AM JST
c=CatchedEvent()
* Sun 21 Sep 2014 09:16:18 AM JST
from mocker import *
* Sun 21 Sep 2014 09:16:23 AM JST
MockerTestCase
* Sun 21 Sep 2014 09:17:47 AM JST
countTestCases
* Sun 21 Sep 2014 09:18:11 AM JST
MockerTestCase
* Sun 21 Sep 2014 09:25:04 AM JST
    def test___init__global(self, ):
        expect = self.orders[:]
        expect.reverse()
        self._catch_list(self.orders)
        catcher = CatchedEvent()
        got = catcher.list()
        self.assertListEqual(expect, got)


* Sun 21 Sep 2014 09:25:23 AM JST
    def setUpClass(cls):
        cls.maxlen = 5
        cls.orders = [str(x) for x in range(1, 6)]

    def setUp(self):
        self.catcher = CatchedEvent(self.maxlen)
        self.catcher.clear()
        self.mocker.replay()

* Sun 21 Sep 2014 09:25:42 AM JST
    def _catch_list(self, lis):
        for x in lis:
            self.catcher.catch(x)


* Sun 21 Sep 2014 09:26:21 AM JST
class TestCatchedEventBase(MockerTestCase):
    """2014/09/21"""
    @classmethod
    def setUpClass(cls):
        cls.maxlen = 5
        cls.orders = [str(x) for x in range(1, 6)]

    def setUp(self):
        self.catcher = CatchedEvent(self.maxlen)
        self.catcher.clear()
        self.mocker.replay()

    def _catch_list(self, lis):
        for x in lis:
            self.catcher.catch(x)

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass

* Sun 21 Sep 2014 09:26:32 AM JST
TestCatchedEventBase
* Sun 21 Sep 2014 09:27:02 AM JST
TestCatchedEventBase
* Sun 21 Sep 2014 09:27:25 AM JST
    def test___init__global(self, ):
        expect = self.orders[:]
        expect.reverse()
        self._catch_list(self.orders)
        catcher = CatchedEvent()
        got = catcher.list()
        self.assertListEqual(expect, got)

* Sun 21 Sep 2014 09:27:42 AM JST
TestCatchedEventBase
* Sun 21 Sep 2014 09:28:05 AM JST

* Sun 21 Sep 2014 09:28:05 AM JST

* Sun 21 Sep 2014 09:28:05 AM JST
    @classmethod

* Sun 21 Sep 2014 09:28:13 AM JST
    def test___init__global(self, ):
        expect = self.orders[:]
        expect.reverse()
        self._catch_list(self.orders)
        catcher = CatchedEvent()
        got = catcher.list()
        self.assertListEqual(expect, got)


* Sun 21 Sep 2014 09:35:09 AM JST

* Sun 21 Sep 2014 09:35:09 AM JST

* Sun 21 Sep 2014 09:35:09 AM JST
        sleep(10)

* Sun 21 Sep 2014 09:39:31 AM JST
__metaclass__ = SingletonMeta
* Sun 21 Sep 2014 09:40:39 AM JST

* Sun 21 Sep 2014 09:40:39 AM JST

* Sun 21 Sep 2014 09:40:39 AM JST
    _deque = deque([], 5)

* Sun 21 Sep 2014 09:40:45 AM JST

* Sun 21 Sep 2014 09:40:45 AM JST

* Sun 21 Sep 2014 09:40:46 AM JST
    # Operations

* Sun 21 Sep 2014 09:41:45 AM JST

* Sun 21 Sep 2014 09:41:45 AM JST

* Sun 21 Sep 2014 09:41:45 AM JST
from time import sleep

* Sun 21 Sep 2014 09:49:31 AM JST
'6'
* Sun 21 Sep 2014 09:51:50 AM JST
self
* Sun 21 Sep 2014 09:51:56 AM JST
self
* Sun 21 Sep 2014 09:54:51 AM JST
    def test_setmaxlen(self, ):
        expect = self.maxlen + 1
        self.catcher.setmaxlen(expect)
        got = self.catcher.getmaxlen()
        self.assertEqual(expect, got)
        #
        expectlis = self.orders[:]
        expectlis.append('99')
        self._catch_list(expectlis)
        expectlis.reverse()
        del expectlis[-1]
        expectlen = expect - 1
        self.catcher.setmaxlen(expectlen)
        gotlen = len(self.catcher)
        self.assertEqual(expectlen, gotlen)
        gotlis = self.catcher.list()
        self.assertListEqual(expectlis, gotlis)


* Sun 21 Sep 2014 09:58:53 AM JST
[1, 2, 3, 4, 5]
* Sun 21 Sep 2014 09:59:02 AM JST
list(
* Sun 21 Sep 2014 09:59:15 AM JST
['1', '2', '3', '4', '5']
* Sun 21 Sep 2014 09:59:38 AM JST
[str(x) for x in range(1, 6)]
* Sun 21 Sep 2014 09:59:47 AM JST
['5', '4', '3', '2', '1']
* Sun 21 Sep 2014 10:00:14 AM JST
# ['99', '5', '4', '3', '2', '1']
* Sun 21 Sep 2014 10:03:52 AM JST
    def test_setmaxlen(self, ):
        expect = self.maxlen + 1
        self.catcher.setmaxlen(expect)
        got = self.catcher.getmaxlen()
        self.assertEqual(expect, got)
        #
        expectlis = self.orders[:]
        expectlis.append('99') # ['1', '2', '3', '4', '5', '99']
        self._catch_list(expectlis)
        expectlis.reverse() # ['99', '5', '4', '3', '2', '1']
        del expectlis[-1] # ['99', '5', '4', '3', '2']
        expectlen = expect - 1 # 5
        self.catcher.setmaxlen(expectlen)
        gotlen = len(self.catcher)
        self.assertEqual(expectlen, gotlen)
        gotlis = self.catcher.list()
        self.assertListEqual(expectlis, gotlis)


* Tue 23 Sep 2014 03:57:12 AM JST
p
* Tue 23 Sep 2014 05:00:54 AM JST
from pythonutils import OrderedDict
* Tue 23 Sep 2014 09:18:42 AM JST
a
* Tue 23 Sep 2014 09:18:43 AM JST
self.a
* Tue 23 Sep 2014 09:19:33 AM JST
object
* Tue 23 Sep 2014 10:05:05 AM JST

* Tue 23 Sep 2014 10:05:05 AM JST

* Tue 23 Sep 2014 10:05:05 AM JST
from collections import 

* Tue 23 Sep 2014 11:24:28 AM JST

class Command:
    """Abstract class Command
    """
    # Attributes:
    
    # Operations
    def execute(self):
        """function execute
        
        returns 
        """
        raise NotImplementedError()
    


* Tue 23 Sep 2014 11:25:54 AM JST
from collections import Mapping
from abc import ABCMeta, abstractmethod


class Invoker:
    r"""Invoker

    Invoker is a object.
    Responsibility:
    """
    __metaclass__ = ABCMeta

    @abstractmethod
    def execute(self, ):
        raise NotImplementedError()


class DispatchInvoker(Invoker, Mapping):
    r"""DispatchInvoker

    DispatchInvoker is a Invoker, Mapping.
    Responsibility:
    """

* Tue 23 Sep 2014 11:26:54 AM JST
from Invoker import Invoker
from Mapping import Mapping

class DispatchInvoker(Mapping, Invoker):
    """Class DispatchInvoker
    """
    # Attributes:
    __dict = None  # () 
    __keyholder = None  # () 
    
    # Operations
    def execute(self):
        """function execute
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def regist(self, key, executer):
        """function regist
        
        key: 
        executer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unregist(self, key):
        """function unregist
        
        key: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear(self):
        """function clear
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def update(self, dict = None, kwargs):
        """function update
        
        dict: 
        kwargs: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def copy(self):
        """function copy
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, key, item):
        """function __setitem__
        
        key: 
        item: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, key):
        """function __getitem__
        
        key: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __delitem__(self, key):
        """function __delitem__
        
        key: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __contains__(self, key):
        """function __contains__
        
        key: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __len__(self):
        """function __len__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __iter__(self):
        """function __iter__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __call__(self):
        """function __call__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __getkey(self):
        """function getkey
        
        returns 
        """
        return None # should raise NotImplementedError()

* Tue 23 Sep 2014 11:27:07 AM JST

* Tue 23 Sep 2014 11:27:07 AM JST

* Tue 23 Sep 2014 11:27:07 AM JST
from Invoker import Invoker

* Tue 23 Sep 2014 11:27:10 AM JST
from Invoker import Invoker

* Tue 23 Sep 2014 11:27:10 AM JST
from Invoker import Invoker
from Mapping import Mapping

* Tue 23 Sep 2014 11:27:13 AM JST

* Tue 23 Sep 2014 11:27:13 AM JST

* Tue 23 Sep 2014 11:27:13 AM JST
from Invoker import Invoker

* Tue 23 Sep 2014 11:27:53 AM JST
Mapping
* Tue 23 Sep 2014 11:28:00 AM JST

* Tue 23 Sep 2014 11:28:00 AM JST

* Tue 23 Sep 2014 11:28:00 AM JST
from collections import Mapping

* Tue 23 Sep 2014 11:29:31 AM JST
up
* Tue 23 Sep 2014 11:29:31 AM JST
_dict.up
* Tue 23 Sep 2014 11:29:53 AM JST
dict_, 
* Tue 23 Sep 2014 11:31:56 AM JST
class HookInvoker(Invoker):
    """Class HookInvoker
    """
    # Attributes:
    __deque = None  # (deque) 
    
    # Operations
    def execute(self):
        """function execute
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def setfirst(self, cmd):
        """function setfirst
        
        cmd: 
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def setend(self, cmd):
        """function setend
        
        cmd: 
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def insert(self, index, cmd):
        """function insert
        
        index: int
        cmd: 
        
        returns void
        """
        return None # should raise NotImplementedError()
    
    def clear(self):
        """function clear
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def popfirst(self):
        """function popfirst
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def popend(self):
        """function popend
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove(self, cmd):
        """function remove
        
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def reverse(self):
        """function reverse
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __call__(self):
        """function __call__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __delitem__(self, index):
        """function __delitem__
        
        index: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, index):
        """function __getitem__
        
        index: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, index, item):
        """function __setitem__
        
        index: 
        item: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 23 Sep 2014 11:39:19 AM JST
return 
* Tue 23 Sep 2014 11:39:20 AM JST
None # should raise NotImplementedError()
* Tue 23 Sep 2014 11:39:24 AM JST

* Tue 23 Sep 2014 11:39:24 AM JST

* Tue 23 Sep 2014 11:39:24 AM JST
        return 

* Tue 23 Sep 2014 11:40:23 AM JST
None # should raise NotImplementedError()
* Tue 23 Sep 2014 11:40:44 AM JST
    def _getkey(self):
        """function getkey

        returns
        """
        return self._keyholder.get()

* Tue 23 Sep 2014 12:05:26 PM JST
raise AttributeError(item)
* Tue 23 Sep 2014 12:05:50 PM JST
item
* Tue 23 Sep 2014 12:06:43 PM JST
None # should raise NotImplementedError()
* Tue 23 Sep 2014 12:06:53 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 12:07:13 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 12:07:31 PM JST
executer
* Tue 23 Sep 2014 12:07:34 PM JST
executer
* Tue 23 Sep 2014 12:07:38 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 12:35:49 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 12:36:59 PM JST
None # should raise NotImplementedError()
* Tue 23 Sep 2014 12:37:08 PM JST
None # should raise NotImplementedError()
* Tue 23 Sep 2014 12:37:34 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 12:39:31 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 12:39:36 PM JST
None # should raise NotImplementedError()
* Tue 23 Sep 2014 12:46:02 PM JST
kwargs
* Tue 23 Sep 2014 12:46:46 PM JST

* Tue 23 Sep 2014 12:46:46 PM JST

* Tue 23 Sep 2014 12:46:46 PM JST
        return None # should raise NotImplementedError()

* Tue 23 Sep 2014 12:50:51 PM JST

* Tue 23 Sep 2014 12:50:51 PM JST

* Tue 23 Sep 2014 12:50:51 PM JST
        return None # should raise NotImplementedError()

* Tue 23 Sep 2014 12:50:58 PM JST
deepcopy(self._dict)
* Tue 23 Sep 2014 12:51:00 PM JST

* Tue 23 Sep 2014 12:51:00 PM JST

* Tue 23 Sep 2014 12:51:00 PM JST
        dic = 

* Tue 23 Sep 2014 12:52:55 PM JST

* Tue 23 Sep 2014 12:52:55 PM JST

* Tue 23 Sep 2014 12:52:55 PM JST
from

* Tue 23 Sep 2014 12:53:38 PM JST

* Tue 23 Sep 2014 12:53:38 PM JST

* Tue 23 Sep 2014 12:53:39 PM JST
        self._iterable = iterable

* Tue 23 Sep 2014 12:53:39 PM JST
        self._iterable = iterable

* Tue 23 Sep 2014 12:53:39 PM JST
        self._iterable = iterable
        self._max_ = max_

* Tue 23 Sep 2014 12:54:42 PM JST
None
* Tue 23 Sep 2014 12:55:06 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 12:55:31 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 12:55:43 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 01:10:20 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 01:11:07 PM JST
cmd
* Tue 23 Sep 2014 01:11:10 PM JST
in
* Tue 23 Sep 2014 01:11:10 PM JST
index].in
* Tue 23 Sep 2014 01:11:30 PM JST
None # should raise NotImplementedError()
* Tue 23 Sep 2014 01:11:31 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 01:12:18 PM JST
None # should raise NotImplementedError()
* Tue 23 Sep 2014 01:12:54 PM JST
None # should raise NotImplementedError()
* Tue 23 Sep 2014 01:13:06 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 01:13:19 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 01:14:36 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 01:14:45 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 01:14:59 PM JST
self._deque[index]
* Tue 23 Sep 2014 01:15:06 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 01:18:19 PM JST

* Tue 23 Sep 2014 01:18:20 PM JST

* Tue 23 Sep 2014 01:18:20 PM JST
        super(HookInvoker, self).__iadd__()

* Tue 23 Sep 2014 01:18:30 PM JST

* Tue 23 Sep 2014 01:18:31 PM JST

* Tue 23 Sep 2014 01:18:31 PM JST

* Tue 23 Sep 2014 01:18:31 PM JST

* Tue 23 Sep 2014 01:18:31 PM JST
        super(HookInvoker, self).__imul__()

* Tue 23 Sep 2014 01:19:19 PM JST

* Tue 23 Sep 2014 01:19:19 PM JST

* Tue 23 Sep 2014 01:19:19 PM JST
        super(HookInvoker, self).__mul__()

* Tue 23 Sep 2014 01:19:59 PM JST

* Tue 23 Sep 2014 01:19:59 PM JST

* Tue 23 Sep 2014 01:19:59 PM JST
        super(HookInvoker, self).__rmul__()

* Tue 23 Sep 2014 10:04:43 PM JST
self._deque
* Tue 23 Sep 2014 10:04:48 PM JST
other._deque
* Tue 23 Sep 2014 10:04:53 PM JST
_deque
* Tue 23 Sep 2014 10:05:28 PM JST
list(self) == list(other)
* Tue 23 Sep 2014 10:06:11 PM JST
        if isinstance(other, self.__class__):
            return list(self) >= list(other)
        return self._deque >= other

* Tue 23 Sep 2014 10:06:24 PM JST
        if isinstance(other, self.__class__):
            return list(self) > list(other)
        return self._deque > other

* Tue 23 Sep 2014 10:06:48 PM JST
        if isinstance(other, self.__class__):
            return list(self) <= list(other)
        return self._deque <= other

* Tue 23 Sep 2014 10:07:01 PM JST
    def __ne__(self, other):
        return self._deque != other._deque


* Tue 23 Sep 2014 10:07:20 PM JST
._deque
* Tue 23 Sep 2014 10:10:26 PM JST
    def __repr__(self):
        return '{0.__class__.__name__}({1})'.format(self, list(self))

    def __str__(self):
        return repr(self)

* Tue 23 Sep 2014 10:12:00 PM JST
_deque
* Tue 23 Sep 2014 10:12:09 PM JST
self._deque += other
* Tue 23 Sep 2014 10:13:27 PM JST
self._deque * other
* Tue 23 Sep 2014 10:33:33 PM JST

class KeyHolder:
    """Class KeyHolder
    """
    # Attributes:
    
    # Operations
    def get(self):
        """function get
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set(self, key):
        """function set
        
        key: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 23 Sep 2014 10:33:50 PM JST
return None # should raise NotImplementedError()
* Tue 23 Sep 2014 10:33:58 PM JST
raise NotImplementedError()
* Tue 23 Sep 2014 10:34:04 PM JST

* Tue 23 Sep 2014 10:34:04 PM JST

* Tue 23 Sep 2014 10:34:04 PM JST
    # Attributes:

* Tue 23 Sep 2014 10:34:35 PM JST
@abstractmethod
* Tue 23 Sep 2014 10:41:31 PM JST
class
* Tue 23 Sep 2014 10:43:56 PM JST
reciever
* Tue 23 Sep 2014 10:45:44 PM JST
    def execute(self, ):
        self._receiver.add(self.getstr())


* Tue 23 Sep 2014 10:50:15 PM JST
        
* Tue 23 Sep 2014 10:51:11 PM JST
        
* Tue 23 Sep 2014 10:52:07 PM JST

* Tue 23 Sep 2014 10:52:07 PM JST

* Tue 23 Sep 2014 10:52:07 PM JST
        self.invo

* Tue 23 Sep 2014 10:52:22 PM JST
Reciever
* Tue 23 Sep 2014 10:55:34 PM JST
self.invoker.execute()
* Tue 23 Sep 2014 11:19:12 PM JST
        dummy1 = Dummy1Command(self.receiver)
        dummy2 = Dummy2Command(self.receiver)

* Tue 23 Sep 2014 11:19:18 PM JST
self
* Tue 23 Sep 2014 11:19:24 PM JST

* Tue 23 Sep 2014 11:19:24 PM JST

* Tue 23 Sep 2014 11:19:24 PM JST
        self.receiver = Reciever()

* Tue 23 Sep 2014 11:19:28 PM JST
self
* Tue 23 Sep 2014 11:19:31 PM JST
self
* Tue 23 Sep 2014 11:19:34 PM JST
self
* Tue 23 Sep 2014 11:19:44 PM JST

* Tue 23 Sep 2014 11:19:45 PM JST

* Tue 23 Sep 2014 11:19:45 PM JST
        selfdummy1 = Dummy1Command(self.receiver)

* Tue 23 Sep 2014 11:19:45 PM JST
        selfdummy1 = Dummy1Command(self.receiver)

* Tue 23 Sep 2014 11:19:45 PM JST
        selfdummy1 = Dummy1Command(self.receiver)
        dummy2 = Dummy2Command(self.receiver)

* Tue 23 Sep 2014 11:20:17 PM JST
        cls.receiver = Reciever()
        cls.dummy1 = Dummy1Command(cls.receiver)
        cls.dummy2 = Dummy2Command(cls.receiver)

* Tue 23 Sep 2014 11:20:28 PM JST
cls
* Tue 23 Sep 2014 11:20:30 PM JST
cls
* Tue 23 Sep 2014 11:20:32 PM JST
cls
* Tue 23 Sep 2014 11:20:36 PM JST
cls
* Tue 23 Sep 2014 11:20:38 PM JST
cls
* Tue 23 Sep 2014 11:22:02 PM JST
invo
* Tue 23 Sep 2014 11:22:02 PM JST
self.invo
* Tue 23 Sep 2014 11:22:56 PM JST
class Dummy2Command(Dummy1Command):
    def getstr(self, ):
        return 'dummy2'

* Tue 23 Sep 2014 11:23:12 PM JST

* Tue 23 Sep 2014 11:23:53 PM JST
        
* Tue 23 Sep 2014 11:23:56 PM JST
        
* Tue 23 Sep 2014 11:25:08 PM JST

* Tue 23 Sep 2014 11:25:08 PM JST

* Tue 23 Sep 2014 11:25:08 PM JST
        self.invo

* Tue 23 Sep 2014 11:25:10 PM JST
        self.invoker.setend(self.dummy1)
        self.invoker.setend(self.dummy2)

* Tue 23 Sep 2014 11:25:59 PM JST

* Tue 23 Sep 2014 11:26:00 PM JST

* Tue 23 Sep 2014 11:26:00 PM JST
        self.a

* Tue 23 Sep 2014 11:26:02 PM JST
        self.assertListEqual(expects, got)
* Tue 23 Sep 2014 11:26:23 PM JST
        
* Tue 23 Sep 2014 11:27:07 PM JST
        self.invoker.setend(self.dummy1)
        self.invoker.setend(self.dummy2)
        self.invoker.setend(self.dummy3)

* Tue 23 Sep 2014 11:27:43 PM JST
self.assertListEqual(expects, got)
* Tue 23 Sep 2014 11:28:13 PM JST
        self.invoker.setend(self.dummy1)
        self.invoker.setend(self.dummy2)
        self.invoker.setend(self.dummy3)

* Tue 23 Sep 2014 11:28:36 PM JST
        expects = [self.dummy1, self.dummy2, self.dummy3]
        got = list(self.invoker)
        self.assertListEqual(expects, got)

* Tue 23 Sep 2014 11:29:05 PM JST
expects = [self.dummy1, self.dummy2, self.dummy3]
* Tue 23 Sep 2014 11:29:11 PM JST
dummy1, 
* Tue 23 Sep 2014 11:29:12 PM JST
self.dummy1, 
* Tue 23 Sep 2014 11:29:17 PM JST
got = list(self.invoker)
* Tue 23 Sep 2014 11:29:23 PM JST
self.assertListEqual(expects, got)
* Tue 23 Sep 2014 11:29:49 PM JST
        self.invoker.setend(self.dummy1)
        self.invoker.setend(self.dummy2)
        self.invoker.setend(self.dummy3)
        expects = [self.dummy1, self.dummy2, self.dummy3]
        got = list(self.invoker)
        self.assertListEqual(expects, got)
        # main

* Tue 23 Sep 2014 11:30:02 PM JST
expects2 = [self.dummy2, self.dummy3]
* Tue 23 Sep 2014 11:30:09 PM JST
expects = [self.dummy1, self.dummy2, self.dummy3]
* Tue 23 Sep 2014 11:30:22 PM JST
        got2 = list(self.invoker)
        self.assertListEqual(expects2, got2)

* Tue 23 Sep 2014 11:30:59 PM JST
        self.invoker.setend(self.dummy1)
        self.invoker.setend(self.dummy2)
        self.invoker.setend(self.dummy3)
        expects = [self.dummy1, self.dummy2, self.dummy3]
        got = list(self.invoker)
        self.assertListEqual(expects, got)
        # main

* Tue 23 Sep 2014 11:31:37 PM JST
        got2 = list(self.invoker)
        self.assertListEqual(expects2, got2)

* Tue 23 Sep 2014 11:32:11 PM JST
        self.invoker.setend(self.dummy1)
        self.invoker.setend(self.dummy2)
        self.invoker.setend(self.dummy3)
        expects = [self.dummy1, self.dummy2, self.dummy3]
        got = list(self.invoker)
        self.assertListEqual(expects, got)
        # main

* Tue 23 Sep 2014 11:32:51 PM JST
self.
* Tue 23 Sep 2014 11:32:59 PM JST
self.assertListEqual(expects, got)
* Tue 23 Sep 2014 11:33:27 PM JST
        expects = [self.dummy1.getstr(), self.dummy2.getstr(),
                   self.dummy3.getstr()]
        self.invoker.setend(self.dummy1)
        self.invoker.setend(self.dummy2)
        self.invoker.setend(self.dummy3)
        self.assertIsNone(self.invoker.execute())
        got = self.receiver.getresult()
        self.assertListEqual(expects, got)

* Tue 23 Sep 2014 11:34:41 PM JST
        self.invoker.setend(self.dummy1)
        self.invoker.setend(self.dummy2)
        self.invoker.setend(self.dummy3)
        expects = [self.dummy1, self.dummy2, self.dummy3]
        got = list(self.invoker)
        self.assertListEqual(expects, got)
        # main

* Tue 23 Sep 2014 11:36:23 PM JST
        self.invoker.setend(self.dummy1)
        self.invoker.setend(self.dummy2)
        self.invoker.setend(self.dummy3)

* Tue 23 Sep 2014 11:36:39 PM JST
        self.invoker.setend(self.dummy1)
        self.invoker.setend(self.dummy2)
        self.invoker.setend(self.dummy3)
        expects = [self.dummy1, self.dummy2, self.dummy3]
        got = list(self.invoker)
        self.assertListEqual(expects, got)

* Tue 23 Sep 2014 11:37:06 PM JST
self._add_dummys()
* Tue 23 Sep 2014 11:40:25 PM JST
self
* Tue 23 Sep 2014 11:40:40 PM JST
self.assertListEqual(expects, got)
* Tue 23 Sep 2014 11:46:44 PM JST
self.
* Tue 23 Sep 2014 11:46:44 PM JST
got = self.
* Tue 23 Sep 2014 11:48:18 PM JST
        self._add_dummys()
        # main

* Tue 23 Sep 2014 11:48:51 PM JST
self.dummy1,
* Tue 23 Sep 2014 11:49:05 PM JST
self.assertListEqual(expects, got)
* Tue 23 Sep 2014 11:51:32 PM JST
        self._add_dummys()
        # main

* Tue 23 Sep 2014 11:52:25 PM JST
self.assertListEqual(expects, got)
* Tue 23 Sep 2014 11:52:49 PM JST
HookInvoker([self.dummy2, self.dummy3])
* Tue 23 Sep 2014 11:53:04 PM JST
HookInvoker(
* Tue 23 Sep 2014 11:53:13 PM JST
self.invoker[1:3]
* Tue 23 Sep 2014 11:54:31 PM JST
        self._add_dummys()
        # main

* Tue 23 Sep 2014 11:59:59 PM JST

* Wed 24 Sep 2014 12:00:00 AM JST

* Wed 24 Sep 2014 12:00:00 AM JST
        self.assertEqual(expects, got)

* Wed 24 Sep 2014 12:00:35 AM JST
        expects = 'HookInvoker([])'
        got = repr(self.invoker)
        self.assertEqual(expects, got)

* Wed 24 Sep 2014 12:03:21 AM JST
_add_dummys
* Wed 24 Sep 2014 12:03:42 AM JST
        self.invoker.setend(self.dummy1)
        self.invoker.setend(self.dummy2)
        self.invoker.setend(self.dummy3)

* Wed 24 Sep 2014 12:03:54 AM JST
self.
* Wed 24 Sep 2014 12:03:55 AM JST
self.
* Wed 24 Sep 2014 12:03:55 AM JST
self.
* Wed 24 Sep 2014 12:05:37 AM JST
invo
* Wed 24 Sep 2014 12:05:37 AM JST
self.invo
* Wed 24 Sep 2014 12:05:41 AM JST
expects
* Wed 24 Sep 2014 12:06:08 AM JST
self
* Wed 24 Sep 2014 12:07:16 AM JST
list(range(1, 8))
* Wed 24 Sep 2014 12:08:06 AM JST
self._deque
* Wed 24 Sep 2014 12:08:17 AM JST
self._deque
* Wed 24 Sep 2014 12:54:05 AM JST
        self._add_dummys()
        invoker = HookInvoker()
        invoker.setend(self.dummy1)
        invoker.setend(self.dummy2)
        invoker.setend(self.dummy3)
        self.assertTrue(self.invoker==invoker)
        invoker.setend(self.dummy1)
        self.assertFalse(self.invoker==invoker)
        expects = [self.dummy1, self.dummy2, self.dummy3]
        self.assertTrue(self.invoker==expects)
        expects.append(self.dummy1)
        self.assertFalse(self.invoker==expects)

* Wed 24 Sep 2014 12:55:39 AM JST
self._add_dummys()
* Wed 24 Sep 2014 12:55:41 AM JST
        self._add_dummys()
        invoker = HookInvoker()
        invoker.setend(self.dummy1)
        invoker.setend(self.dummy2)
        invoker.setend(self.dummy3)

* Wed 24 Sep 2014 12:56:18 AM JST
self.assertTrue(self.invoker >= invoker)
* Wed 24 Sep 2014 12:56:23 AM JST
invoker.setend(self.dummy3)
* Wed 24 Sep 2014 12:56:27 AM JST
self.assertTrue(self.invoker >= invoker)
* Wed 24 Sep 2014 12:56:38 AM JST
expects = [self.dummy1, self.dummy2, self.dummy3]
* Wed 24 Sep 2014 12:57:06 AM JST
self.assertTrue(self.invoker >= expects)
* Wed 24 Sep 2014 12:57:23 AM JST
, self.dummy3
* Wed 24 Sep 2014 12:57:28 AM JST
        
* Wed 24 Sep 2014 12:58:18 AM JST
        self._add_dummys()
        invoker = HookInvoker()
        self.assertTrue(self.invoker >= invoker)
        invoker.setend(self.dummy1)
        invoker.setend(self.dummy2)
        invoker.setend(self.dummy3)
        self.assertTrue(self.invoker >= invoker)
        invoker.setend(self.dummy3)
        self.assertFalse(self.invoker >= invoker)
        expects = [self.dummy1, self.dummy2]
        self.assertTrue(self.invoker >= expects)
        expects.append(self.dummy3)
        self.assertTrue(self.invoker >= expects)
        expects.append(self.dummy1)
        self.assertFalse(self.invoker >= expects)

* Wed 24 Sep 2014 12:59:17 AM JST
    def test___ge__(self, ):
        self._add_dummys()
        invoker = HookInvoker()
        self.assertTrue(self.invoker >= invoker)
        invoker.setend(self.dummy1)
        invoker.setend(self.dummy2)
        invoker.setend(self.dummy3)
        self.assertTrue(self.invoker >= invoker)
        invoker.setend(self.dummy3)
        self.assertFalse(self.invoker >= invoker)
        expects = [self.dummy1, self.dummy2]
        self.assertTrue(self.invoker >= expects)
        expects.append(self.dummy3)
        self.assertTrue(self.invoker >= expects)
        expects.append(self.dummy1)
        self.assertFalse(self.invoker >= expects)


* Wed 24 Sep 2014 12:59:58 AM JST
self.assertFalse(self.invoker < invoker)
* Wed 24 Sep 2014 01:01:34 AM JST

* Wed 24 Sep 2014 01:01:35 AM JST

* Wed 24 Sep 2014 01:01:35 AM JST
        self.assertTrue(self.invoker < invoker)

* Wed 24 Sep 2014 01:01:39 AM JST
    def test___lt__(self, ):
        self._add_dummys()
        invoker = HookInvoker()
        self.assertFalse(self.invoker < invoker)
        invoker.setend(self.dummy1)
        invoker.setend(self.dummy2)
        invoker.setend(self.dummy3)
        self.assertFalse(self.invoker < invoker)
        invoker.setend(self.dummy3)
        self.assertTrue(self.invoker < invoker)

        expects = [self.dummy1, self.dummy2]
        self.assertFalse(self.invoker < expects)
        expects.append(self.dummy3)
        self.assertFalse(self.invoker < expects)
        expects.append(self.dummy1)
        self.assertTrue(self.invoker < expects)


* Wed 24 Sep 2014 01:03:23 AM JST
[self.dummy1, self.dummy2]
* Wed 24 Sep 2014 01:03:40 AM JST
assert
* Wed 24 Sep 2014 01:03:41 AM JST
self.assert
* Wed 24 Sep 2014 01:03:48 AM JST
[self.dummy1, self.dummy2, self.dummy3]
* Wed 24 Sep 2014 01:05:24 AM JST
invoker = HookInvoker()
* Wed 24 Sep 2014 01:55:46 AM JST

* Wed 24 Sep 2014 01:55:46 AM JST

* Wed 24 Sep 2014 01:55:46 AM JST
from

* Wed 24 Sep 2014 01:58:55 AM JST
def
* Wed 24 Sep 2014 02:00:38 AM JST

* Wed 24 Sep 2014 02:00:39 AM JST

* Wed 24 Sep 2014 02:00:39 AM JST
        self.dummy1 = 

* Wed 24 Sep 2014 02:00:41 AM JST
        self.dummy1 = Dummy1Command(self.receiver)
        self.dummy2 = Dummy2Command(self.receiver)
        self.dummy3 = Dummy3Command(self.receiver)

* Wed 24 Sep 2014 02:02:57 AM JST

* Wed 24 Sep 2014 02:03:01 AM JST
        
* Wed 24 Sep 2014 02:03:19 AM JST
pass
* Wed 24 Sep 2014 02:04:23 AM JST
invo
* Wed 24 Sep 2014 02:05:05 AM JST
        self.dummy1 = Dummy1Command(self.receiver)
        self.dummy2 = Dummy2Command(self.receiver)
        self.dummy3 = Dummy3Command(self.receiver)

        self.invoker = DispatchInvoker(self.keyholder)
        self.invoker.regist(self.dummy1.getstr(), self)
        self.invoker.regist(self.dummy2.getstr(), self)
        self.invoker.regist(self.dummy3.getstr(), self)
        self.mocker.replay()

    def test_execute(self):
        expects = [self.dummy2.getstr()]
        self.keyholder.set(self.dummy2.getstr())
        self.invoker.execute()
        got = self.receiver.getresult()
        self.assertListEqual(expects, got)

* Wed 24 Sep 2014 02:08:00 AM JST
self.keyholder.set(self.dummy2.getstr())
* Wed 24 Sep 2014 02:08:09 AM JST
self.invoker.execute()
* Wed 24 Sep 2014 02:08:12 AM JST
        self.invoker.execute()
        got = self.receiver.getresult()
        self.assertListEqual(expects, got)

* Wed 24 Sep 2014 04:15:02 AM JST
self.invoker = DispatchInvoker(self.keyholder)
* Wed 24 Sep 2014 04:15:06 AM JST
self.
* Wed 24 Sep 2014 04:15:11 AM JST
invoker.regist(self.dummy1.getstr(), self.dummy1)
* Wed 24 Sep 2014 04:15:36 AM JST
self.dummy1.getstr()
* Wed 24 Sep 2014 04:15:45 AM JST
self.dummy1
* Wed 24 Sep 2014 04:19:39 AM JST
invoker[expects.getstr()]
* Wed 24 Sep 2014 04:19:47 AM JST
expects
* Wed 24 Sep 2014 04:20:06 AM JST
self.invoker[self.dummy1.getstr()] == self.dummy1
* Wed 24 Sep 2014 04:20:37 AM JST
self.dummy1.getstr()
* Wed 24 Sep 2014 04:21:00 AM JST
self.dummy1.getstr()
* Wed 24 Sep 2014 04:21:10 AM JST
self.assertTrue(self.dummy1.getstr() in self.invoker)
* Wed 24 Sep 2014 04:22:05 AM JST
in
* Wed 24 Sep 2014 04:22:06 AM JST
self.in
* Wed 24 Sep 2014 04:22:25 AM JST
self.assertFalse(0==len(self.invoker))
* Wed 24 Sep 2014 04:24:01 AM JST
        self.assertFalse(0==len(self.invoker))
        self.invoker.clear()
        self.assertTrue(0==len(self.invoker))

* Wed 24 Sep 2014 04:24:55 AM JST
{self.dummy1.getstr(): self.dummy1,
                             self.dummy2.getstr(): self.dummy2,}
* Wed 24 Sep 2014 04:25:03 AM JST
                
* Wed 24 Sep 2014 04:25:15 AM JST
self.assertTrue(self.dummy1.getstr() in self.invoker)
* Wed 24 Sep 2014 04:25:20 AM JST
        
* Wed 24 Sep 2014 04:25:47 AM JST
    def test_update_dic(self, ):
        self.assertFalse(0==len(self.invoker))
        self.invoker.clear()
        self.assertTrue(0==len(self.invoker))
        # Main
        dic = {self.dummy1.getstr(): self.dummy1,
               self.dummy2.getstr(): self.dummy2,}
        self.invoker.update(dic)
        self.assertTrue(self.dummy1.getstr() in self.invoker)
        self.assertTrue(self.dummy2.getstr() in self.invoker)

* Wed 24 Sep 2014 04:26:04 AM JST
dic
* Wed 24 Sep 2014 04:27:14 AM JST

* Wed 24 Sep 2014 04:27:14 AM JST

* Wed 24 Sep 2014 04:27:15 AM JST
        if is:

* Wed 24 Sep 2014 05:09:19 AM JST
{'yahoo': 1}
* Wed 24 Sep 2014 05:13:56 AM JST
DummyOBJ()
* Wed 24 Sep 2014 05:14:54 AM JST
        class DummyOBJ(object):
            pass

        dummyobj = DummyOBJ()

* Wed 24 Sep 2014 05:15:17 AM JST
self.assertTrue(0==len(self.invoker))
* Wed 24 Sep 2014 05:15:26 AM JST

* Wed 24 Sep 2014 05:15:26 AM JST

* Wed 24 Sep 2014 05:15:26 AM JST
        self.assertFalse(0==len(self.invoker))

* Wed 24 Sep 2014 05:15:30 AM JST

* Wed 24 Sep 2014 05:15:30 AM JST

* Wed 24 Sep 2014 05:15:30 AM JST
        self.assertFalse(0==len(self.invoker))

* Wed 24 Sep 2014 05:16:15 AM JST
self.dummy1.getstr()
* Wed 24 Sep 2014 05:16:24 AM JST
self.dummy1
* Wed 24 Sep 2014 05:16:37 AM JST
expects
* Wed 24 Sep 2014 05:17:35 AM JST
self.invoker[expects.getstr()]
* Wed 24 Sep 2014 05:17:42 AM JST
self.dummy1
* Wed 24 Sep 2014 05:17:43 AM JST
expects = self.dummy1
* Wed 24 Sep 2014 05:17:52 AM JST

* Wed 24 Sep 2014 05:17:52 AM JST

* Wed 24 Sep 2014 05:17:52 AM JST
        self.

* Wed 24 Sep 2014 05:17:54 AM JST
self.assertEqual(expects, got)
* Wed 24 Sep 2014 05:18:14 AM JST
got = self.invoker[expects.getstr()]
* Wed 24 Sep 2014 05:18:17 AM JST
got =
* Wed 24 Sep 2014 05:18:27 AM JST
expects
* Wed 24 Sep 2014 05:18:54 AM JST
self.assertFalse(self.dummy1.getstr() in self.invoker)
* Wed 24 Sep 2014 05:19:25 AM JST

* Wed 24 Sep 2014 05:19:25 AM JST

* Wed 24 Sep 2014 05:19:25 AM JST
        self.assertTrue(self.dumm)

* Wed 24 Sep 2014 05:19:27 AM JST
self.assertTrue(self.dummy1.getstr() in self.invoker)
* Wed 24 Sep 2014 05:19:51 AM JST
self
* Wed 24 Sep 2014 05:20:45 AM JST
self
* Wed 24 Sep 2014 05:21:17 AM JST
list1
* Wed 24 Sep 2014 05:21:21 AM JST
list2
* Wed 24 Sep 2014 05:21:42 AM JST
        expects = [self.dummy2.getstr()]
        self.keyholder.set(self.dummy2.getstr())
        self.invoker.execute()
        got = self.receiver.getresult()
        self.assertListEqual(expects, got)
        # dispatch
        expects2 = [self.dummy2.getstr(), self.dummy3.getstr()]
        self.keyholder.set(self.dummy3.getstr())
        self.invoker.execute()
        got2 = self.receiver.getresult()
        self.assertListEqual(expects2, got2)

* Wed 24 Sep 2014 05:21:53 AM JST
execute
* Wed 24 Sep 2014 05:22:00 AM JST
execute
* Wed 24 Sep 2014 05:24:50 AM JST
DispatchInvoker({{Dummy1Command(dummy1)}})
* Wed 24 Sep 2014 05:25:28 AM JST
from pattern.command.command import Command
from pattern.command.invoker import HookInvoker, DispatchInvoker
from pattern.command.keyholder import KeyHolder


class DummyKeyHolder(KeyHolder):
    def __init__(self, ):
        self.key = ''
        
    def get(self, ):
        return self.key

    def set(self, key):
        self.key = key


class Reciever(object):
    def __init__(self, ):
        self._results = []
        
    def add(self, result):
        self._results.append(result)

    def getresult(self, ):
        return self._results


class Dummy1Command(Command):
    
    def __init__(self, receiver):
        self._receiver = receiver

    def getstr(self, ):
        return 'dummy1'

    def execute(self, ):
        self._receiver.add(self.getstr())

    def __repr__(self):
        return '{0.__class__.__name__}({1})'.format(self, self.getstr())


class Dummy2Command(Dummy1Command):
    def getstr(self, ):
        return 'dummy2'


class Dummy3Command(Dummy1Command):
    def getstr(self, ):
        return 'dummy3'



* Wed 24 Sep 2014 05:25:49 AM JST
keyholder = DummyKeyHolder()
* Wed 24 Sep 2014 05:25:54 AM JST
receiver = Reciever()
* Wed 24 Sep 2014 05:25:58 AM JST
dummy1 = Dummy1Command(self.receiver)
* Wed 24 Sep 2014 05:26:05 AM JST
dummy2 = Dummy2Command(self.receiver)
* Wed 24 Sep 2014 05:26:07 AM JST
self.
* Wed 24 Sep 2014 05:26:11 AM JST
dummy3 = Dummy3Command(self.receiver)
* Wed 24 Sep 2014 05:26:13 AM JST
self.
* Wed 24 Sep 2014 05:26:17 AM JST
invoker = DispatchInvoker(self.keyholder)
* Wed 24 Sep 2014 05:26:20 AM JST
self.
* Wed 24 Sep 2014 05:26:24 AM JST
invoker.regist(self.dummy1.getstr(), self.dummy1)
* Wed 24 Sep 2014 05:26:26 AM JST
self.
* Wed 24 Sep 2014 05:26:28 AM JST
self.
* Wed 24 Sep 2014 05:28:30 AM JST
__name__
* Wed 24 Sep 2014 05:28:30 AM JST
__class__.__name__
* Wed 24 Sep 2014 05:28:31 AM JST
0.__class__.__name__
* Wed 24 Sep 2014 05:29:01 AM JST
invoker.regist(self.dummy2.getstr(), self.dummy2)
* Wed 24 Sep 2014 05:29:04 AM JST
self.
* Wed 24 Sep 2014 05:29:07 AM JST
self.
* Wed 24 Sep 2014 05:29:10 AM JST
invoker.regist(self.dummy3.getstr(), self.dummy3)
* Wed 24 Sep 2014 05:29:14 AM JST
self.
* Wed 24 Sep 2014 05:29:17 AM JST
self.
* Wed 24 Sep 2014 05:29:25 AM JST
DispatchInvoker({'dummy2': Dummy2Command(dummy2), 'dummy3': Dummy3Command(dummy3), 'dummy1': Dummy1Command(dummy1)})
* Wed 24 Sep 2014 05:30:30 AM JST
        expects = ("DispatchInvoker({'dummy2': Dummy2Command(dummy2),"
        " 'dummy3': Dummy3Command(dummy3), 'dummy1': Dummy1Command(dummy1)})")
        got = repr(self.invoker)
        self.assertEqual(expects, got)

* Wed 24 Sep 2014 05:30:34 AM JST
repr
* Wed 24 Sep 2014 08:53:29 AM JST
result
* Wed 24 Sep 2014 08:53:31 AM JST
result
* Wed 24 Sep 2014 08:54:45 AM JST
Dummy1
* Wed 24 Sep 2014 08:54:49 AM JST
Dummy2
* Wed 24 Sep 2014 08:54:55 AM JST
Dummy1
* Wed 24 Sep 2014 08:55:47 AM JST

* Wed 24 Sep 2014 08:55:47 AM JST

* Wed 24 Sep 2014 08:55:48 AM JST
    def

* Wed 24 Sep 2014 08:55:54 AM JST
    def __repr__(self):
        return '{0.__class__.__name__}'.format(self)

* Wed 24 Sep 2014 08:56:06 AM JST
    def __repr__(self):
        return '{0.__class__.__name__}'.format(self)

* Wed 24 Sep 2014 08:56:56 AM JST
Dummy3
* Wed 24 Sep 2014 08:57:00 AM JST
Dummy1
* Wed 24 Sep 2014 08:57:04 AM JST
    def __init__(self, receiver):
        self._receiver = receiver

    def execute(self, ):
        self._receiver.undo()

    def __repr__(self):
        return '{0.__class__.__name__}'.format(self)

* Wed 24 Sep 2014 08:57:44 AM JST
Dummy1
* Wed 24 Sep 2014 08:57:47 AM JST
Dummy2
* Wed 24 Sep 2014 08:57:50 AM JST
Dummy3
* Wed 24 Sep 2014 08:57:59 AM JST
dummy1
* Wed 24 Sep 2014 08:58:01 AM JST
dummy2
* Wed 24 Sep 2014 08:58:03 AM JST
dummy3
* Wed 24 Sep 2014 08:58:51 AM JST
dummy1
* Wed 24 Sep 2014 08:58:53 AM JST
dummy2
* Wed 24 Sep 2014 08:58:56 AM JST
dummy3
* Wed 24 Sep 2014 08:59:45 AM JST
dummy1
* Wed 24 Sep 2014 09:00:00 AM JST
dummy2
* Wed 24 Sep 2014 09:00:06 AM JST
dummy3
* Wed 24 Sep 2014 09:00:38 AM JST
[self.clear, self.do, self.redo]
* Wed 24 Sep 2014 09:02:38 AM JST

* Wed 24 Sep 2014 09:02:38 AM JST

* Wed 24 Sep 2014 09:02:39 AM JST
            expects.append(x.getstr())

* Wed 24 Sep 2014 09:05:06 AM JST
                        
* Wed 24 Sep 2014 09:05:10 AM JST
zip(
* Wed 24 Sep 2014 09:06:23 AM JST

* Wed 24 Sep 2014 09:06:23 AM JST

* Wed 24 Sep 2014 09:06:23 AM JST
        expects = ['done']

* Wed 24 Sep 2014 09:14:26 AM JST
undo
* Wed 24 Sep 2014 09:14:40 AM JST
done'
* Wed 24 Sep 2014 09:15:17 AM JST
self._results
* Wed 24 Sep 2014 09:18:08 AM JST
['done', 'done']
* Wed 24 Sep 2014 09:19:22 AM JST
dummy1
* Wed 24 Sep 2014 09:21:46 AM JST
dummy1
* Wed 24 Sep 2014 09:21:48 AM JST
dummy2
* Wed 24 Sep 2014 09:22:46 AM JST
dummy1
* Wed 24 Sep 2014 09:23:02 AM JST
dummy1
* Wed 24 Sep 2014 09:23:08 AM JST
dummy1
* Wed 24 Sep 2014 09:23:19 AM JST
dummy2
* Wed 24 Sep 2014 09:23:22 AM JST
dummy2
* Wed 24 Sep 2014 09:23:37 AM JST

* Wed 24 Sep 2014 09:23:37 AM JST

* Wed 24 Sep 2014 09:23:37 AM JST
        dic = {'do': self.do,

* Wed 24 Sep 2014 09:23:38 AM JST
        dic = {'do': self.do,

* Wed 24 Sep 2014 09:23:38 AM JST
        dic = {'do': self.do,
               'undo': self.undo,}

* Wed 24 Sep 2014 09:25:31 AM JST
dummy1
* Wed 24 Sep 2014 09:25:33 AM JST
dummy1
* Wed 24 Sep 2014 09:25:36 AM JST
getstr()
* Wed 24 Sep 2014 09:25:36 AM JST
expects.getstr()
* Wed 24 Sep 2014 09:26:42 AM JST
dummy1
* Wed 24 Sep 2014 09:27:56 AM JST
getstr()
* Wed 24 Sep 2014 09:27:57 AM JST
dummy1.getstr()
* Wed 24 Sep 2014 09:28:00 AM JST
self.dummy1.getstr()
* Wed 24 Sep 2014 09:28:56 AM JST
dummy1
* Wed 24 Sep 2014 09:29:00 AM JST
dummy2
* Wed 24 Sep 2014 09:29:04 AM JST
dummy3
* Wed 24 Sep 2014 09:31:21 AM JST
undo
* Wed 24 Sep 2014 09:32:04 AM JST
Dummy2
* Wed 24 Sep 2014 09:32:14 AM JST
dummy3
* Wed 24 Sep 2014 09:32:17 AM JST
Dummy3
* Wed 24 Sep 2014 09:32:24 AM JST
dummy1
* Wed 24 Sep 2014 09:32:28 AM JST
Dummy1
* Wed 24 Sep 2014 09:32:54 AM JST
expects = ("DispatchInvoker({'do': DoCommand,"
        " 'clear': ClearCommand, 'undo': UndoCommand})")
* Wed 24 Sep 2014 09:33:15 AM JST
dummy1
* Wed 24 Sep 2014 09:33:17 AM JST
dummy2
* Wed 24 Sep 2014 09:33:19 AM JST
dummy3
* Wed 24 Sep 2014 09:33:23 AM JST
Dummy1
* Wed 24 Sep 2014 09:33:27 AM JST
Dummy2
* Wed 24 Sep 2014 09:33:32 AM JST
Dummy3
* Wed 24 Sep 2014 09:33:54 AM JST
dummy1
* Wed 24 Sep 2014 09:33:57 AM JST
dummy2
* Wed 24 Sep 2014 09:34:06 AM JST
dummy3
* Wed 24 Sep 2014 09:34:15 AM JST
dummy1
* Wed 24 Sep 2014 09:34:18 AM JST
dummy2
* Wed 24 Sep 2014 09:34:25 AM JST
dummy3
* Wed 24 Sep 2014 09:36:45 AM JST
getstr()
* Wed 24 Sep 2014 09:36:45 AM JST
dummy1.getstr()
* Wed 24 Sep 2014 09:36:46 AM JST
self.dummy1.getstr()
* Wed 24 Sep 2014 09:37:02 AM JST
                   
* Wed 24 Sep 2014 09:37:11 AM JST
dummy1
* Wed 24 Sep 2014 09:37:28 AM JST
dummy2
* Wed 24 Sep 2014 09:37:30 AM JST
dummy3
* Wed 24 Sep 2014 09:38:12 AM JST
        
* Wed 24 Sep 2014 09:38:40 AM JST
        expects = ['done']
        self.invoker.setend(self.clear)
        self.invoker.setend(self.do)
        self.invoker.setend(self.do)
        self.invoker.setend(self.undo)
        self.assertIsNone(self.invoker.execute())
        got = self.receiver.getresult()
        self.assertListEqual(expects, got)

* Wed 24 Sep 2014 09:40:15 AM JST
dummy1
* Wed 24 Sep 2014 09:40:22 AM JST
dummy2
* Wed 24 Sep 2014 09:40:54 AM JST
self.clear
* Wed 24 Sep 2014 09:40:59 AM JST
self.do
* Wed 24 Sep 2014 09:41:35 AM JST
dummy1
* Wed 24 Sep 2014 09:41:40 AM JST
dummy2
* Wed 24 Sep 2014 09:41:47 AM JST
dummy3
* Wed 24 Sep 2014 09:42:22 AM JST
    def _add_dummys(self, ):
        r"""SUMMARY
        
        _add_dummys()
        
        @Return:

        @Error:
        """
        self.invoker.setend(self.clear)
        self.invoker.setend(self.do)
        self.invoker.setend(self.undo)
        expects = [self.clear, self.do, self.undo]
        got = list(self.invoker)
        self.assertListEqual(expects, got)


* Wed 24 Sep 2014 09:42:57 AM JST
_add_dummys
* Wed 24 Sep 2014 09:43:45 AM JST
clear
* Wed 24 Sep 2014 09:43:52 AM JST
do, 
* Wed 24 Sep 2014 09:44:01 AM JST
clear
* Wed 24 Sep 2014 09:44:03 AM JST
undo
* Wed 24 Sep 2014 09:45:06 AM JST
dummy1
* Wed 24 Sep 2014 09:45:25 AM JST
dummy2
* Wed 24 Sep 2014 09:45:44 AM JST
dummy3
* Wed 24 Sep 2014 09:49:16 AM JST
do=self.do, undo=self.undo
* Wed 24 Sep 2014 09:49:52 AM JST
        self.assertTrue('do' in self.invoker)
        self.assertTrue('undo' in self.invoker)

* Wed 24 Sep 2014 09:49:57 AM JST
self.
* Wed 24 Sep 2014 09:49:59 AM JST
self.
* Wed 24 Sep 2014 09:50:39 AM JST
invoker = DispatchInvoker(self.keyholder, do=self.do, undo=self.undo)
* Wed 24 Sep 2014 09:50:43 AM JST
        dic = {'do': self.do,
               'undo': self.undo,}

* Wed 24 Sep 2014 09:51:07 AM JST
        self.assertTrue('do' in self.invoker)
        self.assertTrue('undo' in self.invoker)

* Fri 26 Sep 2014 08:26:48 AM JST
{'yahoo': 1}
* Fri 26 Sep 2014 09:36:28 AM JST
-1267296259
* Fri 26 Sep 2014 09:44:13 AM JST
self.
* Fri 26 Sep 2014 10:44:00 AM JST

class Accepter:
    """Abstract class Accepter
    """
    # Attributes:
    
    # Operations
    def accept_redact(self, redactor):
        """function accept_redact
        
        redactor: 
        
        returns 
        """
        raise NotImplementedError()
    


* Fri 26 Sep 2014 10:44:29 AM JST
from
* Fri 26 Sep 2014 10:46:00 AM JST

* Fri 26 Sep 2014 10:46:02 AM JST
invoker
* Fri 26 Sep 2014 10:46:05 AM JST

* Fri 26 Sep 2014 10:46:07 AM JST
command
* Fri 26 Sep 2014 10:48:59 AM JST
from pattern import command
* Fri 26 Sep 2014 10:50:15 AM JST
from pattern import command
* Fri 26 Sep 2014 10:58:46 AM JST
from Key import Key
from XAHKHook import XAHKHook

class Redactor:
    """Abstract class Redactor
    """
    # Attributes:
    __key = None  # () 
    
    # Operations
    def redact(self, dispatcher):
        """function redact
        
        dispatcher: EventDispatcher
        
        returns 
        """
        raise NotImplementedError()
    
    def redact(self, hook):
        """function redact
        
        hook: XAHKHook
        
        returns 
        """
        raise NotImplementedError()
    
    def getkey(self):
        """function getkey
        
        returns 
        """
        raise NotImplementedError()
    
    def setkey(self, key):
        """function setkey
        
        key: Key
        
        returns 
        """
        raise NotImplementedError()
    


* Fri 26 Sep 2014 11:00:13 AM JST

* Fri 26 Sep 2014 11:00:13 AM JST

* Fri 26 Sep 2014 11:00:13 AM JST
from dispatch import 

* Fri 26 Sep 2014 11:00:16 AM JST
from 
* Fri 26 Sep 2014 11:00:29 AM JST
dispatch
* Fri 26 Sep 2014 11:03:06 AM JST
singledispatch
* Fri 26 Sep 2014 11:06:08 AM JST
XAHKDispatcher
* Fri 26 Sep 2014 11:06:39 AM JST
accepter
* Fri 26 Sep 2014 11:07:03 AM JST
@abstractmethod
* Fri 26 Sep 2014 11:07:27 AM JST
abstractmethod
* Fri 26 Sep 2014 11:08:21 AM JST
raise NotImplementedError()
* Fri 26 Sep 2014 11:08:31 AM JST
raise NotImplementedError()
* Fri 26 Sep 2014 11:14:16 AM JST
None
* Fri 26 Sep 2014 11:14:16 AM JST
target=None
* Fri 26 Sep 2014 11:14:18 AM JST
None
* Fri 26 Sep 2014 11:14:22 AM JST

* Fri 26 Sep 2014 11:14:22 AM JST

* Fri 26 Sep 2014 11:14:22 AM JST
        self._key = key

* Fri 26 Sep 2014 11:24:14 AM JST
break
* Fri 26 Sep 2014 11:25:59 AM JST
@redact.register(accepter.XAHKHook)
* Fri 26 Sep 2014 11:26:43 AM JST
@redact.register(accepter.XAHKHook)
* Fri 26 Sep 2014 11:26:54 AM JST
XAHKHook
* Fri 26 Sep 2014 11:51:24 AM JST
None
* Fri 26 Sep 2014 11:51:25 AM JST
target=None
* Fri 26 Sep 2014 11:51:27 AM JST

* Fri 26 Sep 2014 11:51:27 AM JST

* Fri 26 Sep 2014 11:51:27 AM JST
        self._key = key

* Fri 26 Sep 2014 12:05:13 PM JST
del 
* Fri 26 Sep 2014 12:07:56 PM JST
self._target
* Fri 26 Sep 2014 12:08:03 PM JST
self
* Fri 26 Sep 2014 12:08:37 PM JST

* Fri 26 Sep 2014 12:08:37 PM JST

* Fri 26 Sep 2014 12:08:37 PM JST
                return       

* Fri 26 Sep 2014 12:12:39 PM JST
@redact.register(accepter.XAHKHook)
* Fri 26 Sep 2014 12:15:42 PM JST
executable
* Fri 26 Sep 2014 12:16:05 PM JST
executable
* Fri 26 Sep 2014 12:33:46 PM JST
register
* Fri 26 Sep 2014 12:35:45 PM JST
accepter.
* Fri 26 Sep 2014 12:38:24 PM JST
dispatcher.
* Fri 26 Sep 2014 12:39:39 PM JST
redactor
* Fri 26 Sep 2014 12:49:50 PM JST
from xahk2.redactor import redactor
redactor.ClearRegisteredRedactor
r=redactor.ClearRegisteredRedactor()

* Fri 26 Sep 2014 12:49:59 PM JST

* Fri 26 Sep 2014 12:49:59 PM JST

* Fri 26 Sep 2014 12:49:59 PM JST
redactor.ClearRegisteredRedactor

* Fri 26 Sep 2014 12:50:31 PM JST
from xahk2.redactor import redactor
* Fri 26 Sep 2014 12:50:34 PM JST
redactor.ClearRegisteredRedactor()
* Fri 26 Sep 2014 12:51:28 PM JST

* Fri 26 Sep 2014 12:51:28 PM JST

* Fri 26 Sep 2014 12:51:28 PM JST
    @abstractmethod

* Fri 26 Sep 2014 12:51:29 PM JST

* Fri 26 Sep 2014 12:51:29 PM JST

* Fri 26 Sep 2014 12:51:29 PM JST
    @abstractmethod

* Fri 26 Sep 2014 12:51:31 PM JST

* Fri 26 Sep 2014 12:51:31 PM JST

* Fri 26 Sep 2014 12:51:31 PM JST
    @abstractmethod

* Fri 26 Sep 2014 12:53:03 PM JST
from xahk2.redactor import redactor
r=redactor.ClearRegisteredRedactor()
* Fri 26 Sep 2014 12:53:59 PM JST
pass
* Fri 26 Sep 2014 12:54:28 PM JST
from xahk2.redactor import redactor
r=redactor.ClearRegisteredRedactor()
* Fri 26 Sep 2014 12:54:51 PM JST
raise NotImplementedError()
* Fri 26 Sep 2014 12:56:00 PM JST
from peak.rules import dispatch
* Fri 26 Sep 2014 12:56:28 PM JST
@dispatch.generic()
* Fri 26 Sep 2014 12:56:49 PM JST
register
* Fri 26 Sep 2014 12:56:52 PM JST
accepter.XAHKDispatcher
* Fri 26 Sep 2014 12:57:14 PM JST
dispatcher
* Fri 26 Sep 2014 12:57:37 PM JST
dispatcher
* Fri 26 Sep 2014 12:57:41 PM JST
register
* Fri 26 Sep 2014 12:57:45 PM JST
accepter.XAHKHook
* Fri 26 Sep 2014 12:58:04 PM JST
hook
* Fri 26 Sep 2014 12:58:10 PM JST
hook
* Fri 26 Sep 2014 12:58:14 PM JST
hook
* Fri 26 Sep 2014 12:58:18 PM JST
for obj in obj:
* Fri 26 Sep 2014 12:58:24 PM JST
hook
* Fri 26 Sep 2014 12:58:30 PM JST
obj
* Fri 26 Sep 2014 12:58:52 PM JST
@redact.when('isinstance(obj, accepter.XAHKDispatcher)')
* Fri 26 Sep 2014 12:59:00 PM JST
singledispatch
* Fri 26 Sep 2014 12:59:09 PM JST
dispatcher
* Fri 26 Sep 2014 12:59:19 PM JST
dispatcher
* Fri 26 Sep 2014 12:59:35 PM JST
@redact.when('isinstance(obj, accepter.XAHKDispatcher)')
* Fri 26 Sep 2014 12:59:37 PM JST
dispatcher
* Fri 26 Sep 2014 12:59:42 PM JST
dispatcher
* Fri 26 Sep 2014 12:59:49 PM JST
singledispatch
* Fri 26 Sep 2014 01:00:03 PM JST
@redact.when('isinstance(obj, accepter.XAHKDispatcher)')
* Fri 26 Sep 2014 01:00:05 PM JST
dispatcher
* Fri 26 Sep 2014 01:00:08 PM JST
singledispatch
* Fri 26 Sep 2014 01:00:18 PM JST
dispatcher
* Fri 26 Sep 2014 01:00:31 PM JST
@redact.when('isinstance(obj, accepter.XAHKHook)')
* Fri 26 Sep 2014 01:01:13 PM JST
hook
* Fri 26 Sep 2014 01:01:19 PM JST
hook
* Fri 26 Sep 2014 01:01:50 PM JST
from xahk2.redactor import redactor
r=redactor.ClearRegisteredRedactor()
* Fri 26 Sep 2014 01:07:44 PM JST
from xahk2.redactor import redactor
r=redactor.ClearRegisteredRedactor()

* Fri 26 Sep 2014 01:07:48 PM JST
from xahk2.redactor.accepter import XAHKHook
* Fri 26 Sep 2014 01:07:54 PM JST
h=XAHKHook()
* Fri 26 Sep 2014 01:08:05 PM JST
h.setend('1')
* Fri 26 Sep 2014 01:08:08 PM JST
r.redact(h)
* Fri 26 Sep 2014 01:08:15 PM JST
from xahk2.redactor import redactor
r=redactor.ClearRegisteredRedactor()
from xahk2.redactor.accepter import XAHKHook
h=XAHKHook()
h.setend('1')

* Fri 26 Sep 2014 01:08:19 PM JST
r.redact(h)
* Fri 26 Sep 2014 01:08:49 PM JST
obj
* Fri 26 Sep 2014 01:08:54 PM JST
obj
* Fri 26 Sep 2014 01:09:03 PM JST
from xahk2.redactor import redactor
r=redactor.ClearRegisteredRedactor()
from xahk2.redactor.accepter import XAHKHook
h=XAHKHook()
h.setend('1')

* Fri 26 Sep 2014 01:09:06 PM JST
r.redact(h)
* Fri 26 Sep 2014 01:09:15 PM JST
obj
* Fri 26 Sep 2014 01:09:21 PM JST
obj
* Fri 26 Sep 2014 01:09:35 PM JST
obj
* Fri 26 Sep 2014 01:09:40 PM JST
obj
* Fri 26 Sep 2014 01:09:53 PM JST
obj
* Fri 26 Sep 2014 01:09:57 PM JST
obj
* Fri 26 Sep 2014 01:10:02 PM JST
obj
* Fri 26 Sep 2014 01:10:06 PM JST
obj
* Fri 26 Sep 2014 01:10:18 PM JST
obj
* Fri 26 Sep 2014 01:10:24 PM JST
elm
* Fri 26 Sep 2014 01:10:27 PM JST
elm
* Fri 26 Sep 2014 01:10:29 PM JST
elm
* Fri 26 Sep 2014 01:10:33 PM JST
obj
* Fri 26 Sep 2014 01:10:44 PM JST
obj
* Fri 26 Sep 2014 01:10:51 PM JST
obj
* Fri 26 Sep 2014 01:10:58 PM JST
obj
* Fri 26 Sep 2014 01:35:45 PM JST

* Fri 26 Sep 2014 01:35:45 PM JST

* Fri 26 Sep 2014 01:35:45 PM JST
    @redact.when('isinstance(obj, accepter.XAHKHook)')

* Fri 26 Sep 2014 01:36:23 PM JST
@redact.when('isinstance(obj, accepter.XAHKDispatcher)')
* Fri 26 Sep 2014 01:36:36 PM JST

* Fri 26 Sep 2014 01:36:36 PM JST

* Fri 26 Sep 2014 01:36:36 PM JST
    @abstractmethod

* Fri 26 Sep 2014 01:36:41 PM JST
abstractmethod
* Fri 26 Sep 2014 01:36:59 PM JST
from xahk2.redactor import redactor
r=redactor.ClearRegisteredRedactor()
from xahk2.redactor.accepter import XAHKHook
h=XAHKHook()
h.setend('1')

* Fri 26 Sep 2014 01:37:05 PM JST
r.redact(h)
* Fri 26 Sep 2014 01:37:50 PM JST

* Fri 26 Sep 2014 01:37:50 PM JST

* Fri 26 Sep 2014 01:37:50 PM JST
    @redact.when('isinstance(obj, accepter.XAHKHook)')

* Fri 26 Sep 2014 01:38:02 PM JST

* Fri 26 Sep 2014 01:38:02 PM JST

* Fri 26 Sep 2014 01:38:02 PM JST
    @redact.when('isinstance(obj, accepter.XAHKDispatcher)')

* Fri 26 Sep 2014 01:38:44 PM JST

* Fri 26 Sep 2014 01:38:44 PM JST

* Fri 26 Sep 2014 01:38:44 PM JST
    @dispatch.generic()

* Fri 26 Sep 2014 01:38:46 PM JST

* Fri 26 Sep 2014 01:38:47 PM JST

* Fri 26 Sep 2014 01:38:47 PM JST
    # @singledispatch

* Fri 26 Sep 2014 01:38:52 PM JST
@abstractmethod
* Fri 26 Sep 2014 01:39:53 PM JST
from xahk2.redactor import redactor
r=redactor.ClearRegisteredRedactor()
from xahk2.redactor.accepter import XAHKHook
h=XAHKHook()
h.setend('1')

* Fri 26 Sep 2014 01:41:06 PM JST
from xahk2.redactor import redactor
r=redactor.ClearRegisteredRedactor()
from xahk2.redactor.accepter import XAHKHook
h=XAHKHook()
h.setend('1')

* Fri 26 Sep 2014 01:41:12 PM JST
r.redact(h)
* Fri 26 Sep 2014 01:48:17 PM JST
from xahk2.redactor import redactor
r=redactor.ClearRegisteredRedactor()
from xahk2.redactor.accepter import XAHKHook
h=XAHKHook()
h.setend('1')

* Fri 26 Sep 2014 01:48:22 PM JST
r.redact(h)
* Fri 26 Sep 2014 02:29:10 PM JST
NotImplementedError()
* Fri 26 Sep 2014 02:29:10 PM JST
raise NotImplementedError()
* Fri 26 Sep 2014 02:33:49 PM JST

class Key:
    """Abstract class Key
    """
    # Attributes:
    
    # Operations
    def __hash__(self):
        """function __hash__
        
        returns 
        """
        raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns 
        """
        raise NotImplementedError()
    


* Fri 26 Sep 2014 02:34:43 PM JST
@abstractmethod
* Fri 26 Sep 2014 02:34:56 PM JST

* Fri 26 Sep 2014 02:34:56 PM JST

* Fri 26 Sep 2014 02:34:56 PM JST
    # Attributes:

* Fri 26 Sep 2014 02:37:22 PM JST
class EventKey(Key):
    """Class EventKey
    """
    # Attributes:
    __eventkey = None  # () 
    
    # Operations
    def get(self):
        """function get
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set(self):
        """function set
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __hash__(self):
        """function __hash__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 26 Sep 2014 02:37:42 PM JST
class EventKeyDict:
    """Class EventKeyDict
    """
    # Attributes:
    __dict = None  # () 
    
    # Operations
    def get(self, key):
        """function get
        
        key: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __contains__(self, item):
        """function __contains__
        
        item: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def copy(self):
        """function copy
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def has_keyname(self, keyname):
        """function has_keyname
        
        keyname: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def eventkeys(self):
        """function eventkeys
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def itereventkeys(self):
        """function itereventkeys
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iterkeynames(self):
        """function iterkeynames
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iteritems(self):
        """function iteritems
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def items(self):
        """function items
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __iter__(self):
        """function __iter__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self):
        """function __getitem__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 26 Sep 2014 02:40:09 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 02:40:23 PM JST
return None # should raise NotImplementedError()
* Fri 26 Sep 2014 02:40:33 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 02:42:38 PM JST
bool(
* Fri 26 Sep 2014 02:42:51 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 02:43:41 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 02:43:59 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 02:45:34 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 02:46:24 PM JST

* Fri 26 Sep 2014 02:46:24 PM JST

* Fri 26 Sep 2014 02:46:24 PM JST
from xcb import 

* Fri 26 Sep 2014 02:49:21 PM JST
from xcb2 import xproto
* Fri 26 Sep 2014 02:49:43 PM JST
xproto.KeyPressEvent
* Fri 26 Sep 2014 02:50:44 PM JST
xproto.KeyReleaseEvent
* Fri 26 Sep 2014 02:51:04 PM JST
'keyrelease': EventKey(xproto.KeyReleaseEvent),
* Fri 26 Sep 2014 02:51:08 PM JST
keyrelease
* Fri 26 Sep 2014 02:51:29 PM JST
xproto.ButtonPressEvent
* Fri 26 Sep 2014 02:51:48 PM JST
xproto.ButtonReleaseEvent
* Fri 26 Sep 2014 02:52:12 PM JST
xproto.MotionNotifyEvent
* Fri 26 Sep 2014 02:52:27 PM JST
xproto.EnterNotifyEvent
* Fri 26 Sep 2014 02:52:43 PM JST
xproto.LeaveNotifyEvent
* Fri 26 Sep 2014 02:53:03 PM JST
xproto.FocusInEvent
* Fri 26 Sep 2014 02:53:21 PM JST
xproto.FocusOutEvent
* Fri 26 Sep 2014 02:53:39 PM JST
xproto.KeymapNotifyEvent
* Fri 26 Sep 2014 02:53:55 PM JST
xproto.ExposeEvent
* Fri 26 Sep 2014 02:54:07 PM JST
xproto.GraphicsExposureEvent
* Fri 26 Sep 2014 02:54:30 PM JST
xproto.NoExposureEvent
* Fri 26 Sep 2014 02:54:44 PM JST
xproto.VisibilityNotifyEvent
* Fri 26 Sep 2014 02:55:01 PM JST
xproto.CreateNotifyEvent
* Fri 26 Sep 2014 02:55:15 PM JST
xproto.DestroyNotifyEvent
* Fri 26 Sep 2014 02:55:33 PM JST
xproto.UnmapNotifyEvent
* Fri 26 Sep 2014 02:55:49 PM JST
xproto.MapNotifyEvent
* Fri 26 Sep 2014 02:56:03 PM JST
xproto.ReparentNotifyEvent
* Fri 26 Sep 2014 02:56:19 PM JST
xproto.ConfigureNotifyEvent
* Fri 26 Sep 2014 02:56:33 PM JST
xproto.ConfigureRequestEvent
* Fri 26 Sep 2014 02:56:55 PM JST
xproto.GravityNotifyEvent
* Fri 26 Sep 2014 02:57:11 PM JST
xproto.ResizeRequestEvent
* Fri 26 Sep 2014 02:57:32 PM JST
xproto.CirculateNotifyEvent
* Fri 26 Sep 2014 02:57:50 PM JST
xproto.PropertyNotifyEvent
* Fri 26 Sep 2014 02:58:14 PM JST
xproto.SelectionClearEvent
* Fri 26 Sep 2014 02:58:28 PM JST
xproto.SelectionRequestEvent
* Fri 26 Sep 2014 02:58:46 PM JST
xproto.SelectionNotifyEvent
* Fri 26 Sep 2014 02:59:01 PM JST
xproto.ColormapNotifyEvent
* Fri 26 Sep 2014 02:59:16 PM JST
xproto.ClientMessageEvent
* Fri 26 Sep 2014 02:59:37 PM JST
xproto.MappingNotifyEvent
* Fri 26 Sep 2014 02:59:56 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 03:00:49 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 03:01:29 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 03:02:08 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 03:02:21 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 03:02:32 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 03:03:21 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 03:04:17 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 03:04:27 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 03:04:38 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 03:04:41 PM JST
self.
* Fri 26 Sep 2014 03:04:52 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 03:05:29 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 03:05:40 PM JST
None # should raise NotImplementedError()
* Fri 26 Sep 2014 03:06:30 PM JST
EventKeyDict
* Fri 26 Sep 2014 03:07:22 PM JST
pprint(
* Fri 26 Sep 2014 03:07:39 PM JST
0._eventkey
* Fri 26 Sep 2014 03:08:46 PM JST
str
* Fri 26 Sep 2014 03:10:57 PM JST
.split("'")[0]
* Fri 26 Sep 2014 04:00:36 PM JST
self._eventkey
* Fri 26 Sep 2014 04:00:49 PM JST
self._eventkey
* Fri 26 Sep 2014 04:00:53 PM JST
other.get()
* Fri 26 Sep 2014 04:01:01 PM JST
self._eventkey
* Fri 26 Sep 2014 04:01:05 PM JST
other
* Fri 26 Sep 2014 04:06:28 PM JST
"{} instance has not attribute 'execute'"
* Fri 26 Sep 2014 04:07:49 PM JST
checkv
* Fri 26 Sep 2014 04:08:29 PM JST
ite
* Fri 26 Sep 2014 04:08:29 PM JST
self.ite
* Fri 26 Sep 2014 04:10:10 PM JST
        for cmd in iterable:
            self._checkvalue(cmd)

* Fri 26 Sep 2014 04:10:13 PM JST
iterable
* Fri 26 Sep 2014 04:15:56 PM JST
        if not hasattr(cmd, 'execute'):
            raise AttributeError(
                "{} instance has not attribute 'execute'".format(cmd))

* Fri 26 Sep 2014 04:16:45 PM JST
item
* Fri 26 Sep 2014 04:21:58 PM JST
"{} instance has not attribute 'execute'"
* Fri 26 Sep 2014 04:26:14 PM JST
mocker.AssertRaisesContextManager
* Fri 26 Sep 2014 04:29:54 PM JST
self.invoker['dummykey'] = dummyobj
* Fri 26 Sep 2014 04:30:33 PM JST

* Fri 26 Sep 2014 04:30:33 PM JST

* Fri 26 Sep 2014 04:30:33 PM JST
        with self.assertRaises(AttributeError) as _err:

* Fri 26 Sep 2014 04:30:35 PM JST
        
* Fri 26 Sep 2014 04:30:42 PM JST
            
* Fri 26 Sep 2014 04:33:18 PM JST
        class DummyOBJ(object):
            def __repr__(self):
                return 'DummyOBJ'
            
        dummyobj = DummyOBJ()

* Fri 26 Sep 2014 04:33:50 PM JST
dummyobj.
* Fri 26 Sep 2014 04:34:12 PM JST
setend
* Fri 26 Sep 2014 04:34:18 PM JST
        with self.assertRaises(AttributeError):
            self.invoker.setfirst(dummyobj)

* Fri 26 Sep 2014 04:34:35 PM JST
        with self.assertRaises(AttributeError):
            self.invoker.setend(dummyobj)

* Fri 26 Sep 2014 04:34:42 PM JST
setend
* Fri 26 Sep 2014 04:35:40 PM JST
        with self.assertRaises(AttributeError):
            self.invoker.insert(0, dummyobj)

* Fri 26 Sep 2014 04:35:43 PM JST
0, 
* Fri 26 Sep 2014 04:35:43 PM JST
insert(0, 
* Fri 26 Sep 2014 04:35:51 PM JST
dummyobj
* Fri 26 Sep 2014 04:36:09 PM JST
self.
* Fri 26 Sep 2014 04:36:20 PM JST
        try:
            self.invoker['dummykey'] = dummyobj
        except AttributeError as _err:
            pass

        expects = (
            "{} instance has not attribute 'execute'".format(repr(dummyobj)))
        got = str(_err)
        self.assertEqual(expects, got)

* Fri 26 Sep 2014 04:36:34 PM JST
dummyobj
* Fri 26 Sep 2014 04:40:21 PM JST
import struct

from xcb2 import xproto

* Fri 26 Sep 2014 04:40:27 PM JST
DUMMY_KEYPRESS = xproto.KeyPressEvent(
    struct.pack('xB2xIIIIhhhhHBx',
                10,       # detail
                0,        # time
                482,      # root
                58720278, # event
                0,        # child
                0,        # root_x
                0,        # root_y
                0,        # event_x
                0,        # event_y
                0,        # state
                0,        # same_screen
                ))

* Fri 26 Sep 2014 04:40:51 PM JST
DUMMY_KEYPRESS
* Fri 26 Sep 2014 04:41:31 PM JST
type(DUMMY_KEYPRESS)
* Fri 26 Sep 2014 04:42:39 PM JST
type(
* Fri 26 Sep 2014 04:42:43 PM JST
type(
* Fri 26 Sep 2014 04:43:02 PM JST
type(
* Sat 27 Sep 2014 10:11:07 AM JST
rep
* Sat 27 Sep 2014 10:11:51 AM JST
get
* Sat 27 Sep 2014 10:11:52 AM JST
_dict.get
* Sat 27 Sep 2014 10:13:42 AM JST

* Sat 27 Sep 2014 10:13:43 AM JST
accepter
* Sat 27 Sep 2014 10:13:56 AM JST
Redactor
* Sat 27 Sep 2014 10:14:00 AM JST
XAHKDispatcher, XAHKHook
* Sat 27 Sep 2014 10:14:22 AM JST
Redactor
* Sat 27 Sep 2014 10:15:25 AM JST
from peak.rules import dispatch
* Sat 27 Sep 2014 10:15:42 AM JST
class RegisterRedactor(Redactor):
    r"""RegisterRedactor
    
    RegisterRedactor is a Redactor.
    Responsibility: 
    """
    def __init__(self, executable, key=None):
        r"""
        
        @Arguments:
        - `key`:
        - `executable`:
        """
        super(RegisterRedactor, self).__init__(key)
        self._executable = executable
        
    def getexe(self, ):
        r"""SUMMARY
        
        getexe()
        
        @Return:

        @Error:
        """
        return self._executable

    def setexe(self, executable):
        r"""SUMMARY
        
        setexe(executable)
        
        @Arguments:
        - `executable`:
        
        @Return:

        @Error:
        """
        self._executable = executable

    @dispatch.generic()
    def redact(self, obj):
        pass

    @redact.when('isinstance(obj, accepter.XAHKDispatcher)')
    def _redact_dispatcher(self, dispatcher):
        r"""SUMMARY
        
        redact_dispatcher(dispatcher)
        
        @Arguments:
        - `dispatcher`:
        
        @Return:

        @Error:
        """
        dispatcher.register(self._key, self._executable)

    @redact.when('isinstance(obj, accepter.XAHKHook)')
    def _redact_hook(self, hook):
        r"""SUMMARY
        
        redact_hook(hook)
        
        @Arguments:
        - `hook`:
        
        @Return:

        @Error:
        """
        hook.setend(self._executable)

* Sat 27 Sep 2014 10:16:14 AM JST
    @dispatch.generic()
    def redact(self, obj):
        pass

    @redact.when('isinstance(obj, accepter.XAHKDispatcher)')
    def _redact_dispatcher(self, dispatcher):
        r"""SUMMARY
        
        redact_dispatcher(dispatcher)
        
        @Arguments:
        - `dispatcher`:
        
        @Return:

        @Error:
        """
        dispatcher.register(self._key, self._executable)

    @redact.when('isinstance(obj, accepter.XAHKHook)')
    def _redact_hook(self, hook):
        r"""SUMMARY
        
        redact_hook(hook)
        
        @Arguments:
        - `hook`:
        
        @Return:

        @Error:
        """
        hook.setend(self._executable)

* Sat 27 Sep 2014 10:16:22 AM JST
accepter.
* Sat 27 Sep 2014 10:16:33 AM JST
accepter.
* Sat 27 Sep 2014 10:17:50 AM JST
xahk2.
* Sat 27 Sep 2014 10:19:45 AM JST

* Sat 27 Sep 2014 10:19:47 AM JST
accepter
* Sat 27 Sep 2014 10:19:50 AM JST
XAHKDispatcher, XAHKHook
* Sat 27 Sep 2014 10:20:48 AM JST
pass
* Sat 27 Sep 2014 10:21:28 AM JST
XAHKH
* Sat 27 Sep 2014 10:23:40 AM JST

* Sat 27 Sep 2014 10:23:40 AM JST

* Sat 27 Sep 2014 10:23:40 AM JST
        self.hook = XAHKHook()

* Sat 27 Sep 2014 10:24:09 AM JST
    @classmethod
    def setUpClass(cls):
        cls.redactor = DummyRedactor()

* Sat 27 Sep 2014 10:24:21 AM JST
TestAccepter
* Sat 27 Sep 2014 10:28:27 AM JST
xahk2.
* Sat 27 Sep 2014 10:29:15 AM JST
EventKeyDict().get('keypress')
* Sat 27 Sep 2014 10:32:17 AM JST
DummyKeyHolder
* Sat 27 Sep 2014 12:09:18 PM JST
self.redactor.key
* Sat 27 Sep 2014 12:15:17 PM JST
pass
* Sat 27 Sep 2014 12:15:38 PM JST
pass
* Sat 27 Sep 2014 12:16:41 PM JST
executable
* Sat 27 Sep 2014 12:17:35 PM JST
expects = 
* Sat 27 Sep 2014 12:17:41 PM JST
dispatcher
* Sat 27 Sep 2014 12:22:00 PM JST
__metaclass__
* Sat 27 Sep 2014 12:23:14 PM JST
_abc_registry              
* Sat 27 Sep 2014 12:53:57 PM JST
from xcb2 import xproto
* Sat 27 Sep 2014 12:54:19 PM JST
pass
* Sat 27 Sep 2014 12:54:23 PM JST
key
* Sat 27 Sep 2014 12:57:32 PM JST
self.
* Sat 27 Sep 2014 12:58:40 PM JST
self.
* Sat 27 Sep 2014 01:02:10 PM JST
xproto.KeyPressEvent
* Sat 27 Sep 2014 01:02:40 PM JST
type(
* Sat 27 Sep 2014 01:02:43 PM JST
type(
* Sat 27 Sep 2014 04:33:20 PM JST
DUMMY_KEYPRESS
* Sat 27 Sep 2014 04:34:57 PM JST
from xahk2.redactor.key import EventKey
* Sat 27 Sep 2014 04:35:09 PM JST
from xahk2.redactor.key import EventKeyDict
* Sat 27 Sep 2014 04:35:18 PM JST
e=EventKeyDict()
* Sat 27 Sep 2014 04:35:58 PM JST
from xcb2 import xproto
* Sat 27 Sep 2014 04:36:09 PM JST
import struct
* Sat 27 Sep 2014 04:36:18 PM JST
DUMMY_KEYPRESS = xproto.KeyPressEvent(
    struct.pack('xB2xIIIIhhhhHBx',
                10,       # detail
                0,        # time
                482,      # root
                58720278, # event
                0,        # child
                0,        # root_x
                0,        # root_y
                0,        # event_x
                0,        # event_y
                0,        # state
                0,        # same_screen
                ))
* Sat 27 Sep 2014 04:36:27 PM JST
DUMMY_KEYPRESS
* Sat 27 Sep 2014 04:36:47 PM JST
from xahk2.redactor.key import *
e=EventKeyDict()
import struct
from xcb2 import xproto
dk = xproto.KeyPressEvent(
                                      struct.pack('xB2xIIIIhhhhHBx',
                                                  10,       # detail
                                                  0,        # time
                                                  482,      # root
                                                  58720278, # event
                                                  0,        # child
                                                  0,        # root_x
                                                  0,        # root_y
                                                  0,        # event_x
                                                  0,        # event_y
                                                  0,        # state
                                                  0,        # same_screen
                                                  ))

* Sat 27 Sep 2014 04:37:53 PM JST
xcb.Event
* Sat 27 Sep 2014 04:38:25 PM JST
xcb3.Event
* Sun 28 Sep 2014 07:49:36 AM JST
self.assertEqual(expects, got)
* Sun 28 Sep 2014 07:50:32 AM JST
xproto.KeyReleaseEvent
* Sun 28 Sep 2014 07:50:53 AM JST
        
* Sun 28 Sep 2014 07:52:26 AM JST
KeyRelease
* Sun 28 Sep 2014 07:54:10 AM JST
'EventKey("KeyPressEvent")'
* Sun 28 Sep 2014 07:54:21 AM JST
'EventKey("KeyPressEvnet")'
* Sun 28 Sep 2014 07:54:52 AM JST
'EventKey("KeyPressEvent")'
* Sun 28 Sep 2014 07:54:59 AM JST
repr
* Sun 28 Sep 2014 07:56:55 AM JST
key
* Sun 28 Sep 2014 07:56:55 AM JST
xproto.key
* Sun 28 Sep 2014 07:56:55 AM JST
key = xproto.key
* Sun 28 Sep 2014 07:57:06 AM JST

* Sun 28 Sep 2014 07:57:06 AM JST

* Sun 28 Sep 2014 07:57:06 AM JST
        self.assert

* Sun 28 Sep 2014 08:03:44 AM JST
    KeyPress         = 2
    KeyRelease       = 3
    ButtonPress      = 4
    ButtonRelease    = 5
    MotionNotify     = 6
    EnterNotify      = 7
    LeaveNotify      = 8
    FocusIn          = 9
    FocusOut         = 10
    KeymapNotify     = 11
    Expose           = 12
    GraphicsExposure = 13
    NoExposure       = 14
    VisibilityNotify = 15
    CreateNotify     = 16
    DestroyNotify    = 17
    UnmapNotify      = 18
    MapNotify        = 19
    MapRequest       = 20
    ReparentNotify   = 21
    ConfigureNotify  = 22
    ConfigureRequest = 23
    GravityNotify    = 24
    ResizeRequest    = 25
    CirculateNotify  = 26
    CirculateRequest = 27
    PropertyNotify   = 28
    SelectionClear   = 29
    SelectionRequest = 30
    SelectionNotify  = 31
    ColormapNotify   = 32
    ClientMessage    = 33
    MappingNotify    = 34

* Sun 28 Sep 2014 08:04:19 AM JST
= 34
* Sun 28 Sep 2014 08:04:19 AM JST
= 33
* Sun 28 Sep 2014 08:04:19 AM JST
= 32
* Sun 28 Sep 2014 08:04:19 AM JST
= 31
* Sun 28 Sep 2014 08:04:19 AM JST
= 30
* Sun 28 Sep 2014 08:04:19 AM JST
= 29
* Sun 28 Sep 2014 08:04:19 AM JST
= 28
* Sun 28 Sep 2014 08:04:19 AM JST
= 27
* Sun 28 Sep 2014 08:04:19 AM JST
= 26
* Sun 28 Sep 2014 08:04:19 AM JST
= 25
* Sun 28 Sep 2014 08:04:19 AM JST
= 24
* Sun 28 Sep 2014 08:04:20 AM JST
= 23
* Sun 28 Sep 2014 08:04:20 AM JST
= 22
* Sun 28 Sep 2014 08:04:20 AM JST
= 21
* Sun 28 Sep 2014 08:04:20 AM JST
= 20
* Sun 28 Sep 2014 08:04:20 AM JST
= 19
* Sun 28 Sep 2014 08:04:20 AM JST
= 18
* Sun 28 Sep 2014 08:04:20 AM JST
= 17
* Sun 28 Sep 2014 08:04:20 AM JST
= 16
* Sun 28 Sep 2014 08:04:20 AM JST
= 15
* Sun 28 Sep 2014 08:04:20 AM JST
= 14
* Sun 28 Sep 2014 08:04:20 AM JST
= 13
* Sun 28 Sep 2014 08:04:20 AM JST
= 12
* Sun 28 Sep 2014 08:04:20 AM JST
= 11
* Sun 28 Sep 2014 08:04:20 AM JST
= 10
* Sun 28 Sep 2014 08:04:20 AM JST
= 9
* Sun 28 Sep 2014 08:04:20 AM JST
= 8
* Sun 28 Sep 2014 08:04:20 AM JST
= 7
* Sun 28 Sep 2014 08:04:21 AM JST
= 6
* Sun 28 Sep 2014 08:04:21 AM JST
= 5
* Sun 28 Sep 2014 08:04:21 AM JST
= 4
* Sun 28 Sep 2014 08:04:21 AM JST
= 3
* Sun 28 Sep 2014 08:04:21 AM JST
= 2
* Sun 28 Sep 2014 08:04:47 AM JST
    
* Sun 28 Sep 2014 08:04:48 AM JST
    
* Sun 28 Sep 2014 08:04:48 AM JST
    
* Sun 28 Sep 2014 08:04:48 AM JST
    
* Sun 28 Sep 2014 08:04:48 AM JST
    
* Sun 28 Sep 2014 08:04:48 AM JST
    
* Sun 28 Sep 2014 08:04:49 AM JST
    
* Sun 28 Sep 2014 08:04:49 AM JST
    
* Sun 28 Sep 2014 08:04:49 AM JST
    
* Sun 28 Sep 2014 08:04:49 AM JST
    
* Sun 28 Sep 2014 08:04:50 AM JST
    
* Sun 28 Sep 2014 08:04:50 AM JST
    
* Sun 28 Sep 2014 08:04:50 AM JST
    
* Sun 28 Sep 2014 08:04:50 AM JST
    
* Sun 28 Sep 2014 08:04:50 AM JST
    
* Sun 28 Sep 2014 08:04:50 AM JST
    
* Sun 28 Sep 2014 08:04:50 AM JST
    
* Sun 28 Sep 2014 08:04:51 AM JST
    
* Sun 28 Sep 2014 08:04:51 AM JST
    
* Sun 28 Sep 2014 08:04:51 AM JST
    
* Sun 28 Sep 2014 08:04:51 AM JST
    
* Sun 28 Sep 2014 08:04:51 AM JST
    
* Sun 28 Sep 2014 08:04:52 AM JST
    
* Sun 28 Sep 2014 08:04:52 AM JST
    
* Sun 28 Sep 2014 08:04:52 AM JST
    
* Sun 28 Sep 2014 08:04:52 AM JST
    
* Sun 28 Sep 2014 08:04:52 AM JST
    
* Sun 28 Sep 2014 08:04:52 AM JST
    
* Sun 28 Sep 2014 08:04:53 AM JST
    
* Sun 28 Sep 2014 08:04:53 AM JST
    
* Sun 28 Sep 2014 08:04:53 AM JST
    
* Sun 28 Sep 2014 08:04:53 AM JST
    
* Sun 28 Sep 2014 08:04:53 AM JST
    
* Sun 28 Sep 2014 08:05:05 AM JST
'KeyPress', 
'KeyRelease', 
'ButtonPress', 
'ButtonRelease', 
'MotionNotify', 
'EnterNotify', 
'LeaveNotify', 
'FocusIn', 
'FocusOut', 
'KeymapNotify', 
'Expose', 
'GraphicsExposure', 
'NoExposure', 
'VisibilityNotify', 
'CreateNotify', 
'DestroyNotify', 
'UnmapNotify', 
'MapNotify', 
'MapRequest', 
'ReparentNotify', 
'ConfigureNotify', 
'ConfigureRequest', 
'GravityNotify', 
'ResizeRequest', 
'CirculateNotify', 
'CirculateRequest', 
'PropertyNotify', 
'SelectionClear', 
'SelectionRequest', 
'SelectionNotify', 
'ColormapNotify', 
'ClientMessage', 
'MappingNotify', 


* Sun 28 Sep 2014 08:07:08 AM JST
KeyEvent
* Sun 28 Sep 2014 08:15:28 AM JST
.lower().replace('event', '')
* Sun 28 Sep 2014 08:15:44 AM JST
key.lower().replace('event', '')
* Sun 28 Sep 2014 08:15:58 AM JST
self._correctname(key)
* Sun 28 Sep 2014 08:16:11 AM JST
key
* Sun 28 Sep 2014 08:20:37 AM JST
EventKeyDict
* Sun 28 Sep 2014 08:21:28 AM JST
self._correctname(key)
* Sun 28 Sep 2014 08:25:17 AM JST
self.dic.get(name)
* Sun 28 Sep 2014 08:25:20 AM JST

* Sun 28 Sep 2014 08:25:20 AM JST

* Sun 28 Sep 2014 08:25:20 AM JST
            evt = 

* Sun 28 Sep 2014 08:25:22 AM JST
        for name in self.allevents:
            self.assertIsInstance(self.dic.get(name), EventKey, msg=name)

* Sun 28 Sep 2014 08:25:25 AM JST
allevents
* Sun 28 Sep 2014 08:25:25 AM JST
self.allevents
* Sun 28 Sep 2014 08:26:21 AM JST
varietykeys = ['KeyPressEvent', 'Keypress', 'KeyPress', 'keypress',
                       ]
* Sun 28 Sep 2014 08:27:15 AM JST
name
* Sun 28 Sep 2014 08:30:52 AM JST
        for name in self.allevents:
            self.assertIsInstance(self.dic.get(name), EventKey, msg=name)

* Sun 28 Sep 2014 08:30:59 AM JST
allevents
* Sun 28 Sep 2014 08:31:00 AM JST
self.allevents
* Sun 28 Sep 2014 08:31:08 AM JST
dic
* Sun 28 Sep 2014 08:31:09 AM JST
self.dic
* Sun 28 Sep 2014 10:25:06 AM JST
        for name in self.allevents:
            self.assertIn(name, self.dic)
        for name in ['noexists', 'Event', 'hello']:
            self.assertNotIn(name, self.dic)

* Sun 28 Sep 2014 10:25:12 AM JST
name, 
* Sun 28 Sep 2014 10:25:27 AM JST
name, 
* Sun 28 Sep 2014 10:27:41 AM JST
form 
* Sun 28 Sep 2014 10:29:05 AM JST
listutil
* Sun 28 Sep 2014 10:29:05 AM JST
t1.listutil
* Sun 28 Sep 2014 10:29:28 AM JST
dotavoider
* Sun 28 Sep 2014 10:30:35 AM JST
from 
* Sun 28 Sep 2014 10:31:42 AM JST
DotAvoider
* Sun 28 Sep 2014 10:32:14 AM JST
eventkeys = self.allevents[:]
* Sun 28 Sep 2014 10:32:57 AM JST
eventkeys
* Sun 28 Sep 2014 10:34:49 AM JST
msg=
* Sun 28 Sep 2014 10:35:15 AM JST
        expects, append = ListDotAvoider().append
        for key in self.allevents[:]:
            append(key.lower())
        expects.sort()
        got = self.dic.keynames()
        got.sort()
        self.assertListEqual(expects, got)

* Sun 28 Sep 2014 10:35:24 AM JST
self.dic.iterkeynames()
* Sun 28 Sep 2014 10:35:52 AM JST
expects, append = ListDotAvoider().append
* Sun 28 Sep 2014 10:36:22 AM JST
    _dict = {'keypress'         : EventKey(xproto.KeyPressEvent),
             'keyrelease'       : EventKey(xproto.KeyReleaseEvent),
             'buttonpress'      : EventKey(xproto.ButtonPressEvent),
             'buttonrelease'    : EventKey(xproto.ButtonReleaseEvent),
             'motionnotify'     : EventKey(xproto.MotionNotifyEvent),
             'enternotify'      : EventKey(xproto.EnterNotifyEvent),
             'leavenotify'      : EventKey(xproto.LeaveNotifyEvent),
             'focusin'          : EventKey(xproto.FocusInEvent),
             'focusout'         : EventKey(xproto.FocusOutEvent),
             'keymapnotify'     : EventKey(xproto.KeymapNotifyEvent),
             'expose'           : EventKey(xproto.ExposeEvent),
             'graphicsexposure' : EventKey(xproto.GraphicsExposureEvent),
             'noexposure'       : EventKey(xproto.NoExposureEvent),
             'visibilitynotify' : EventKey(xproto.VisibilityNotifyEvent),
             'createnotify'     : EventKey(xproto.CreateNotifyEvent),
             'destroynotify'    : EventKey(xproto.DestroyNotifyEvent),
             'unmapnotify'      : EventKey(xproto.UnmapNotifyEvent),
             'mapnotify'        : EventKey(xproto.MapNotifyEvent),
             'reparentnotify'   : EventKey(xproto.ReparentNotifyEvent),
             'configurenotify'  : EventKey(xproto.ConfigureNotifyEvent),
             'configurerequest' : EventKey(xproto.ConfigureRequestEvent),
             'gravitynotify'    : EventKey(xproto.GravityNotifyEvent),
             'resizerequest'    : EventKey(xproto.ResizeRequestEvent),
             'circulatenotify'  : EventKey(xproto.CirculateNotifyEvent),
             'propertynotify'   : EventKey(xproto.PropertyNotifyEvent),
             'selectionclear'   : EventKey(xproto.SelectionClearEvent),
             'selectionrequest' : EventKey(xproto.SelectionRequestEvent),
             'selectionnotify'  : EventKey(xproto.SelectionNotifyEvent),
             'colormapnotify'   : EventKey(xproto.ColormapNotifyEvent),
             'clientmessage'    : EventKey(xproto.ClientMessageEvent),
             'mappingnotify'    : EventKey(xproto.MappingNotifyEvent),
             'maprequest'       : EventKey(xproto.MapRequestEvent),
             'circulaterequest' : EventKey(xproto.CirculateRequestEvent),
             }

* Sun 28 Sep 2014 10:36:26 AM JST

* Sun 28 Sep 2014 10:36:26 AM JST

* Sun 28 Sep 2014 10:36:26 AM JST
             }

* Sun 28 Sep 2014 10:36:33 AM JST
'circulaterequest' : 
* Sun 28 Sep 2014 10:36:33 AM JST
'maprequest'       : 
* Sun 28 Sep 2014 10:36:33 AM JST
'mappingnotify'    : 
* Sun 28 Sep 2014 10:36:33 AM JST
'clientmessage'    : 
* Sun 28 Sep 2014 10:36:34 AM JST
'colormapnotify'   : 
* Sun 28 Sep 2014 10:36:34 AM JST
'selectionnotify'  : 
* Sun 28 Sep 2014 10:36:34 AM JST
'selectionrequest' : 
* Sun 28 Sep 2014 10:36:34 AM JST
'selectionclear'   : 
* Sun 28 Sep 2014 10:36:34 AM JST
'propertynotify'   : 
* Sun 28 Sep 2014 10:36:34 AM JST
'circulatenotify'  : 
* Sun 28 Sep 2014 10:36:34 AM JST
'resizerequest'    : 
* Sun 28 Sep 2014 10:36:34 AM JST
'gravitynotify'    : 
* Sun 28 Sep 2014 10:36:34 AM JST
'configurerequest' : 
* Sun 28 Sep 2014 10:36:34 AM JST
'configurenotify'  : 
* Sun 28 Sep 2014 10:36:34 AM JST
'reparentnotify'   : 
* Sun 28 Sep 2014 10:36:34 AM JST
'mapnotify'        : 
* Sun 28 Sep 2014 10:36:34 AM JST
'unmapnotify'      : 
* Sun 28 Sep 2014 10:36:34 AM JST
'destroynotify'    : 
* Sun 28 Sep 2014 10:36:34 AM JST
'createnotify'     : 
* Sun 28 Sep 2014 10:36:34 AM JST
'visibilitynotify' : 
* Sun 28 Sep 2014 10:36:34 AM JST
'noexposure'       : 
* Sun 28 Sep 2014 10:36:35 AM JST
'graphicsexposure' : 
* Sun 28 Sep 2014 10:36:35 AM JST
'expose'           : 
* Sun 28 Sep 2014 10:36:35 AM JST
'keymapnotify'     : 
* Sun 28 Sep 2014 10:36:35 AM JST
'focusout'         : 
* Sun 28 Sep 2014 10:36:35 AM JST
'focusin'          : 
* Sun 28 Sep 2014 10:36:35 AM JST
'leavenotify'      : 
* Sun 28 Sep 2014 10:36:35 AM JST
'enternotify'      : 
* Sun 28 Sep 2014 10:36:35 AM JST
'motionnotify'     : 
* Sun 28 Sep 2014 10:36:35 AM JST
'buttonrelease'    : 
* Sun 28 Sep 2014 10:36:35 AM JST
'buttonpress'      : 
* Sun 28 Sep 2014 10:36:35 AM JST
'keyrelease'       : 
* Sun 28 Sep 2014 10:36:35 AM JST
_dict = {'keypress'         : 
* Sun 28 Sep 2014 10:36:43 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:44 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:44 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:44 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:44 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:44 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:44 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:44 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:44 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:44 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:44 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:44 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:44 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:44 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:45 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:46 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:46 AM JST
EventKey(
* Sun 28 Sep 2014 10:36:58 AM JST
    xproto.KeyPressEvent,
             xproto.KeyReleaseEvent,
             xproto.ButtonPressEvent,
             xproto.ButtonReleaseEvent,
             xproto.MotionNotifyEvent,
             xproto.EnterNotifyEvent,
             xproto.LeaveNotifyEvent,
             xproto.FocusInEvent,
             xproto.FocusOutEvent,
             xproto.KeymapNotifyEvent,
             xproto.ExposeEvent,
             xproto.GraphicsExposureEvent,
             xproto.NoExposureEvent,
             xproto.VisibilityNotifyEvent,
             xproto.CreateNotifyEvent,
             xproto.DestroyNotifyEvent,
             xproto.UnmapNotifyEvent,
             xproto.MapNotifyEvent,
             xproto.ReparentNotifyEvent,
             xproto.ConfigureNotifyEvent,
             xproto.ConfigureRequestEvent,
             xproto.GravityNotifyEvent,
             xproto.ResizeRequestEvent,
             xproto.CirculateNotifyEvent,
             xproto.PropertyNotifyEvent,
             xproto.SelectionClearEvent,
             xproto.SelectionRequestEvent,
             xproto.SelectionNotifyEvent,
             xproto.ColormapNotifyEvent,
             xproto.ClientMessageEvent,
             xproto.MappingNotifyEvent,
             xproto.MapRequestEvent,
             xproto.CirculateRequestEvent,

* Sun 28 Sep 2014 10:37:57 AM JST

* Sun 28 Sep 2014 10:37:58 AM JST

* Sun 28 Sep 2014 10:37:58 AM JST
        expects, append = ListDotAvoider().append

* Sun 28 Sep 2014 10:38:31 AM JST
    def test_eventkeys(self, ):
        expects = self.keys[:]
        self.keys.sort()
        got = self.dic.eventkeys()
        got.sort()
        self.assertListEqual(expects, got)


* Sun 28 Sep 2014 10:39:13 AM JST
self.dic.eventkeys()
* Sun 28 Sep 2014 10:40:00 AM JST
expects, append = ListDotAvoider().append
* Sun 28 Sep 2014 10:40:07 AM JST
expects
* Sun 28 Sep 2014 10:40:40 AM JST
ListDotAvoider().append
* Sun 28 Sep 2014 10:41:15 AM JST
        for key in self.allevents[:]:
            append(key.lower())

* Sun 28 Sep 2014 10:41:38 AM JST
        for key in self.allevents[:]:
            append(key.lower())

* Sun 28 Sep 2014 10:41:55 AM JST
        for key in self.allevents[:]:
            append(key.lower())

* Sun 28 Sep 2014 10:43:32 AM JST
        expects = self.keys[:]
        self.keys.sort()

* Sun 28 Sep 2014 10:43:40 AM JST
expects
* Sun 28 Sep 2014 10:43:43 AM JST

* Sun 28 Sep 2014 10:43:43 AM JST

* Sun 28 Sep 2014 10:43:43 AM JST
        evkeys, append2 = ListDotAvoider().append

* Sun 28 Sep 2014 10:45:03 AM JST

* Sun 28 Sep 2014 10:45:03 AM JST

* Sun 28 Sep 2014 10:45:03 AM JST
        a = [1, 2, 3]

* Sun 28 Sep 2014 10:45:03 AM JST
        a = [1, 2, 3]

* Sun 28 Sep 2014 10:45:03 AM JST
        a = [1, 2, 3]
        b = [2, 3, 1]

* Sun 28 Sep 2014 10:45:03 AM JST
        a = [1, 2, 3]
        b = [2, 3, 1]

* Sun 28 Sep 2014 10:45:03 AM JST
        a = [1, 2, 3]
        b = [2, 3, 1]
        self.assertListEqual(a, b)

* Sun 28 Sep 2014 10:45:15 AM JST
self.
* Sun 28 Sep 2014 10:45:37 AM JST
knames, append = ListDotAvoider().append
* Sun 28 Sep 2014 10:45:53 AM JST
append
* Sun 28 Sep 2014 10:46:14 AM JST
ListDotAvoider().append
* Sun 28 Sep 2014 10:46:22 AM JST
asser
* Sun 28 Sep 2014 10:46:22 AM JST
self.asser
* Sun 28 Sep 2014 10:46:59 AM JST
evkey
* Sun 28 Sep 2014 10:48:15 AM JST
        
* Sun 28 Sep 2014 10:48:17 AM JST
knames
* Sun 28 Sep 2014 10:48:21 AM JST
knames2
* Sun 28 Sep 2014 10:49:50 AM JST
    def test_items(self, ):
        knames, append = ListDotAvoider().append
        for key in self.allevents[:]:
            append(key.lower())
        knames.sort()
        evkeys = self.keys[:]
        evkeys.sort()

        knames2, knamesappend2 = ListDotAvoider().append
        evkeys2, evkeysappend2 = ListDotAvoider().append
        for name, evkey in self.dic.items():
            knamesappend2(name)
            evkeysappend2(evkey)
        knames2.sort()
        evkeys2.sort()
        self.assertListEqual(knames, knames2)
        self.assertListEqual(evkeys, evkeys2)

* Sun 28 Sep 2014 10:50:59 AM JST
    def test_keynames(self, ):
        expects, append = ListDotAvoider().append
        for key in self.allevents[:]:
            append(key.lower())
        expects.sort()
        got = self.dic.keynames()
        got.sort()
        self.assertListEqual(expects, got)

* Sun 28 Sep 2014 10:51:38 AM JST
.keynames()
* Sun 28 Sep 2014 10:52:00 AM JST
iter(self.dic)
* Sun 28 Sep 2014 10:52:43 AM JST
        for name in self.allevents:
            self.assertIsInstance(self.dic.get(name), EventKey, msg=name)

* Sun 28 Sep 2014 10:53:05 AM JST
        with self.assertRaises(StandardError):
            self.dic.get('noexists')

* Sun 28 Sep 2014 10:55:36 AM JST
        expects = 'EventKeyDict({})'.format(self.dic._dict)
        got = repr(self.dic)
        self.assertEqual(expects, got)

* Sun 28 Sep 2014 10:55:39 AM JST
repr
* Sun 28 Sep 2014 10:56:14 AM JST
self.
* Sun 28 Sep 2014 11:01:05 AM JST
self.dic.items():
* Sun 28 Sep 2014 11:01:39 AM JST
name
* Sun 28 Sep 2014 11:03:12 AM JST
self.dic.items()
* Sun 28 Sep 2014 11:06:00 AM JST

* Sun 28 Sep 2014 11:06:00 AM JST

* Sun 28 Sep 2014 11:06:00 AM JST
        zip(self.dic.items())

* Sun 28 Sep 2014 11:06:46 AM JST
        if isinstance(other, self.__class__):
            return self._eventkey == other.get()
        return self._eventkey == other

* Sun 28 Sep 2014 11:06:54 AM JST
self._eventkey == other.get()
* Sun 28 Sep 2014 11:07:06 AM JST
other.get()
* Sun 28 Sep 2014 11:07:14 AM JST
self._eventkey == other
* Sun 28 Sep 2014 11:07:18 AM JST
other
* Sun 28 Sep 2014 11:11:03 AM JST

* Sun 28 Sep 2014 11:11:03 AM JST

* Sun 28 Sep 2014 11:11:03 AM JST
        self.mocker.replay()

* Sun 28 Sep 2014 11:11:30 AM JST
from pattern.command.keyholder import KeyHolder
* Sun 28 Sep 2014 11:11:34 AM JST
from pattern.command.keyholder import KeyHolder
from xahk2.redactor.key import EventKeyDict

* Sun 28 Sep 2014 11:11:58 AM JST
from pattern.command.command import Command
* Sun 28 Sep 2014 11:12:08 AM JST
from xahk2.redactor.redactor import Redactor
* Sun 28 Sep 2014 11:12:32 AM JST
class DummyKeyHolder(KeyHolder):
    key = EventKeyDict().get('keypress')

    def get(self, ):
        return self.key


class DummyCommand(Command):
    def execute(self, ):
        print('dummy execute')


class DummyRedactor(Redactor):
    executable = DummyCommand()
    key = EventKeyDict().get('keypress')

    @dispatch.generic()
    def redact(self, obj):
        pass

    @redact.when('isinstance(obj, XAHKDispatcher)')
    def _redact_dispatcher(self, dispatcher):
        dispatcher.register(self.key, self.executable)

    @redact.when('isinstance(obj, XAHKHook)')
    def _redact_hook(self, hook):
        hook.setend(self.executable)

* Sun 28 Sep 2014 11:12:40 AM JST
class DummyKeyHolder(KeyHolder):
    key = EventKeyDict().get('keypress')

    def get(self, ):
        return self.key


class DummyCommand(Command):
    def execute(self, ):
        print('dummy execute')

* Sun 28 Sep 2014 11:12:47 AM JST
DummyKeyHolder
* Sun 28 Sep 2014 11:38:36 AM JST
EXERegi
* Sun 28 Sep 2014 11:38:49 AM JST
Redactor
* Sun 28 Sep 2014 11:38:54 AM JST
redactor
* Sun 28 Sep 2014 11:40:30 AM JST
pass
* Sun 28 Sep 2014 11:41:43 AM JST
EventKeyDict().get('keypress')
* Sun 28 Sep 2014 11:43:00 AM JST
pass
* Sun 28 Sep 2014 11:44:09 AM JST
EventKeyDict().get('keypress')
* Sun 28 Sep 2014 11:44:15 AM JST
self.
* Sun 28 Sep 2014 11:44:19 AM JST
self.
* Sun 28 Sep 2014 11:44:24 AM JST
EventKeyDict().get('keypress')
* Sun 28 Sep 2014 11:44:35 AM JST

* Sun 28 Sep 2014 11:44:35 AM JST

* Sun 28 Sep 2014 11:44:35 AM JST
    key = EventKeyDict().get('keypress')

* Sun 28 Sep 2014 11:44:53 AM JST
            
* Sun 28 Sep 2014 11:45:32 AM JST

* Sun 28 Sep 2014 11:45:32 AM JST

* Sun 28 Sep 2014 11:45:32 AM JST
        self.assert

* Sun 28 Sep 2014 11:47:19 AM JST
EventKeyDict()
* Sun 28 Sep 2014 11:47:23 AM JST
EventKeyDict()
* Sun 28 Sep 2014 11:47:53 AM JST
self.redactor.redact(self.dispatcher)
* Sun 28 Sep 2014 11:48:16 AM JST
self
* Sun 28 Sep 2014 11:48:31 AM JST
        expects = self.exe
        got = self.dispatcher.get(self.key)
        self.assertEqual(expects, got)

* Sun 28 Sep 2014 11:48:35 AM JST
self.
* Sun 28 Sep 2014 11:49:04 AM JST
self
* Sun 28 Sep 2014 11:50:44 AM JST
self.redactor.redact(self.dispatcher)
* Sun 28 Sep 2014 11:50:46 AM JST
dispatcher
* Sun 28 Sep 2014 11:51:59 AM JST
self.assertIn(self.exe, self.hook)
* Sun 28 Sep 2014 11:53:14 AM JST
class DummyCommand(Command):
    def execute(self, ):
        print('dummy execute')

* Sun 28 Sep 2014 11:53:35 AM JST
DummyCommand2
* Sun 28 Sep 2014 11:55:32 AM JST
get
* Sun 28 Sep 2014 11:57:37 AM JST
        self.redactor.redact(self.dispatcher)

* Sun 28 Sep 2014 11:57:49 AM JST
self.redactor.redact(self.hook)
* Sun 28 Sep 2014 11:58:22 AM JST
self.redactor = redactor.RegisterRedactor(self.exe, self.key)
* Sun 28 Sep 2014 12:00:45 PM JST
        exe = DummyCommand2()
        self.redactor.setexe(exe)
        self.assertEqual(exe, self.redactor.getexe())

* Sun 28 Sep 2014 12:05:30 PM JST
assert
* Sun 28 Sep 2014 12:05:36 PM JST
Failed
* Sun 28 Sep 2014 12:08:01 PM JST
self.failIfIs(got, None)
* Sun 28 Sep 2014 12:08:05 PM JST
self.assertEqual(self.exe, got)
* Sun 28 Sep 2014 12:09:00 PM JST
self.redactor.redact(self.hook)
* Sun 28 Sep 2014 12:09:10 PM JST
self.assertFalse(bool(self.redactor))
* Sun 28 Sep 2014 12:10:23 PM JST
_target
* Sun 28 Sep 2014 12:12:17 PM JST
        super(TestGetRedactor, self).setUp()
        self._redactor = redactor.RegisterRedactor(self.exe, self.key)
        self._redactor.redact(self.dispatcher)
        self._redactor.redact(self.hook)
        self.redactor = redactor.GetRedactor(self.key, self.exe)

* Sun 28 Sep 2014 12:12:24 PM JST
GetRedactor
* Sun 28 Sep 2014 12:12:38 PM JST

* Sun 28 Sep 2014 12:12:38 PM JST

* Sun 28 Sep 2014 12:12:38 PM JST
        super(TestGetRedactor, self).setUp()

* Sun 28 Sep 2014 12:12:55 PM JST
MockerTestCase
* Sun 28 Sep 2014 12:14:34 PM JST
self.assertTrue(self.key in self.dispatcher)
* Sun 28 Sep 2014 12:14:38 PM JST
key
* Sun 28 Sep 2014 12:14:40 PM JST
dispatcher
* Sun 28 Sep 2014 12:14:48 PM JST
self.redactor.redact(self.dispatcher)
* Sun 28 Sep 2014 12:14:50 PM JST
dispatcher
* Sun 28 Sep 2014 12:14:58 PM JST
self.assertFalse(self.key in self.dispatcher)
* Sun 28 Sep 2014 12:15:01 PM JST
dispatcher
* Sun 28 Sep 2014 12:15:07 PM JST
key
* Sun 28 Sep 2014 12:16:20 PM JST
        exe = DummyCommand2()
        self.redactor.settarget(exe)
        self.assertEqual(exe, self.redactor.gettarget())

* Sun 28 Sep 2014 12:17:45 PM JST
        self._redactor = redactor.RegisterRedactor(self.exe, self.key)
        self._redactor.redact(self.dispatcher)
        self._redactor.redact(self.hook)

* Sun 28 Sep 2014 12:17:48 PM JST
        self._redactor = redactor.RegisterRedactor(self.exe, self.key)
        self._redactor.redact(self.dispatcher)
        self._redactor.redact(self.hook)
        self.redactor = redactor.UnregisterRedactor(self.key, self.exe)

* Sun 28 Sep 2014 12:17:55 PM JST
Unregister
* Sun 28 Sep 2014 12:18:15 PM JST
key
* Sun 28 Sep 2014 12:18:36 PM JST
keylerease
* Sun 28 Sep 2014 12:19:18 PM JST
self._redactor = redactor.RegisterRedactor(self.exe, self.key)
* Sun 28 Sep 2014 12:19:26 PM JST
        self._redactor.redact(self.dispatcher)
        self._redactor.redact(self.hook)

* Sun 28 Sep 2014 12:20:19 PM JST
redact
* Sun 28 Sep 2014 12:20:38 PM JST
        
* Sun 28 Sep 2014 12:20:57 PM JST
        
* Sun 28 Sep 2014 12:22:23 PM JST

* Sun 28 Sep 2014 12:22:23 PM JST

* Sun 28 Sep 2014 12:22:23 PM JST
        self.assert

* Sun 28 Sep 2014 12:24:08 PM JST
co
* Sun 28 Sep 2014 12:24:08 PM JST
form co
* Sun 28 Sep 2014 12:24:47 PM JST
deque
* Sun 28 Sep 2014 12:26:57 PM JST
self.
* Sun 28 Sep 2014 12:28:05 PM JST
invoker.clear()
* Sun 28 Sep 2014 12:28:23 PM JST
self.invoker
* Sun 28 Sep 2014 12:28:28 PM JST
self.invoker
* Sun 28 Sep 2014 12:30:28 PM JST

* Sun 28 Sep 2014 12:30:35 PM JST
self.redactor.redact(self.dispatcher)
* Sun 28 Sep 2014 12:30:38 PM JST
dispatcher
* Sun 28 Sep 2014 12:30:44 PM JST
        self.assertNotIn(self.key, self.dispatcher)
        self.assertNotIn(self.key2, self.dispatcher)

* Sun 28 Sep 2014 12:30:47 PM JST
key
* Sun 28 Sep 2014 12:30:49 PM JST
key2
* Sun 28 Sep 2014 12:32:13 PM JST
self
* Sun 28 Sep 2014 12:33:57 PM JST
self.redactor.redact(self.hook)
* Sun 28 Sep 2014 12:34:10 PM JST
self.redactor.getreceived()
* Mon 29 Sep 2014 08:39:56 AM JST
~/.pylib/sendkey2/
* Tue 30 Sep 2014 10:46:25 AM JST
Ｓ級