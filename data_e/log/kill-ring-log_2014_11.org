
* Sat 08 Nov 2014 03:37:25 PM JST
=self.next

        while self.text[ix] in string.whitespace:
            ix=ix+1
        self.start=ix

        if self.text[ix] in ['(',')','-','+','/','*','\0']:
            self.token=self.text[ix]
            ix=ix+1
* Mon 10 Nov 2014 02:43:03 PM JST

* Thu 13 Nov 2014 11:51:38 AM JST
send 
* Thu 13 Nov 2014 11:51:40 AM JST
press
* Sun 23 Nov 2014 04:47:42 PM JST
recipe
* Sun 23 Nov 2014 04:50:02 PM JST


* Mon 24 Nov 2014 06:22:04 PM JST
is_dir()
* Mon 24 Nov 2014 06:23:01 PM JST
SW-296
* Mon 24 Nov 2014 06:23:15 PM JST
'/data/archive/recipe'
* Mon 24 Nov 2014 06:23:37 PM JST
ARCHIVE_RECIEPE
* Mon 24 Nov 2014 06:24:18 PM JST
ARCHIVE_PATH
* Mon 24 Nov 2014 06:25:31 PM JST
recipe.ARCHIVE_PATH
* Tue 25 Nov 2014 01:42:17 AM JST
uuid
* Tue 25 Nov 2014 01:42:21 AM JST
uuid
* Tue 25 Nov 2014 01:42:40 AM JST
uuid
* Tue 25 Nov 2014 01:45:42 AM JST
                      
* Tue 25 Nov 2014 01:46:19 AM JST
'cryptsetup luksOpen ' + self._disk
* Tue 25 Nov 2014 01:48:26 AM JST
' '.join('cryptsetup', 'luksOpen', self._disk, self._mapped_name)
* Tue 25 Nov 2014 01:48:35 AM JST
                      
* Tue 25 Nov 2014 01:53:49 AM JST
os.path.join('/dev/mapper', self._mapped_name)
* Tue 25 Nov 2014 01:55:04 AM JST
is_dir()
* Tue 25 Nov 2014 02:01:09 AM JST
pex
* Tue 25 Nov 2014 02:04:07 AM JST
    expects = ['No key available with this passphrase.',
               r'[#\$]', 'already exists', pexpect.EOF]

* Tue 25 Nov 2014 02:04:39 AM JST
'/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340'
* Tue 25 Nov 2014 02:07:02 AM JST
['No key available with this passphrase.',
               r'[#\$]', 'already exists', pexpect.EOF]
* Tue 25 Nov 2014 02:07:06 AM JST
                   
* Tue 25 Nov 2014 02:09:20 AM JST
        expects = ['No key available with this passphrase.', r'[#\$]',
                   'already exists', pexpect.EOF]

* Tue 25 Nov 2014 02:21:16 AM JST
os.path.join('/dev/mapper', self._mapped_name)
* Tue 25 Nov 2014 02:25:49 AM JST
'cryptsetup' + 'luksClose' + self.get_mappath()
* Tue 25 Nov 2014 02:25:52 AM JST

* Tue 25 Nov 2014 02:25:52 AM JST

* Tue 25 Nov 2014 02:25:52 AM JST
            pex = pexpect.spawn()

* Tue 25 Nov 2014 02:32:06 AM JST
luksClose
* Tue 25 Nov 2014 02:39:50 AM JST
os.path.join('/dev/mapper', self._mapped_name)
* Tue 25 Nov 2014 02:40:10 AM JST
_mapped_name
* Tue 25 Nov 2014 02:54:37 AM JST
join(
* Tue 25 Nov 2014 02:54:37 AM JST
check_call(' '.join(
* Tue 25 Nov 2014 02:57:57 AM JST
Device data is not active.
* Tue 25 Nov 2014 02:58:08 AM JST
r'[#\$]'
* Tue 25 Nov 2014 02:59:02 AM JST
['Device data is not active.', r'[#\$]']
* Tue 25 Nov 2014 02:59:11 AM JST
r'[#\$]'
* Tue 25 Nov 2014 03:00:08 AM JST
pexpect.EOF
* Tue 25 Nov 2014 03:00:57 AM JST
[r'[#\$]', 'Device data is not active.', pexpect.EOF]
* Tue 25 Nov 2014 03:01:02 AM JST

* Tue 25 Nov 2014 03:01:02 AM JST

* Tue 25 Nov 2014 03:01:02 AM JST
        expects = 

* Tue 25 Nov 2014 03:01:27 AM JST
                
* Tue 25 Nov 2014 03:07:19 AM JST
pex = 
* Tue 25 Nov 2014 03:13:45 AM JST
cryptdisk
* Tue 25 Nov 2014 03:13:47 AM JST
cryptdisk
* Tue 25 Nov 2014 03:15:49 AM JST

* Tue 25 Nov 2014 03:15:49 AM JST

* Tue 25 Nov 2014 03:15:49 AM JST
import subprocess as sbp

* Tue 25 Nov 2014 03:16:02 AM JST
cryptdisk
* Tue 25 Nov 2014 03:16:02 AM JST
cryptdisk.cryptdisk
* Tue 25 Nov 2014 03:16:57 AM JST
'/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340'
* Tue 25 Nov 2014 03:21:22 AM JST
pexpect.spawn('cryptsetup close ' + self.get_name())
* Tue 25 Nov 2014 03:27:23 AM JST
import cryptdisk
d=cryptdisk.DecryptDisk('/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340', 'dat
* Tue 25 Nov 2014 03:31:45 AM JST

* Tue 25 Nov 2014 03:31:45 AM JST

* Tue 25 Nov 2014 03:31:45 AM JST
        ret = 

* Tue 25 Nov 2014 03:32:01 AM JST

* Tue 25 Nov 2014 03:32:01 AM JST

* Tue 25 Nov 2014 03:32:01 AM JST
        pex = pexpect.spawn('cryptsetup close ' + self.get_name())

* Tue 25 Nov 2014 03:33:42 AM JST
check_
* Tue 25 Nov 2014 03:37:21 AM JST
impor
* Tue 25 Nov 2014 03:40:14 AM JST
/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340
* Tue 25 Nov 2014 03:40:42 AM JST
        expects = ['No key available with this passphrase.', r'[#\$]',
                   'already exists', pexpect.EOF]

* Tue 25 Nov 2014 03:44:01 AM JST
        if self.isexists():
            raise StandardError('Device already exists')

* Tue 25 Nov 2014 03:47:03 AM JST
import cryptdisk
d=cryptdisk.DecryptDisk('/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340', 'data')

* Tue 25 Nov 2014 03:49:04 AM JST
' '.join(
            ('cryptsetup', 'luksOpen', self._disk, self._mapped_name)
* Tue 25 Nov 2014 03:49:09 AM JST
            
* Tue 25 Nov 2014 03:49:17 AM JST

* Tue 25 Nov 2014 03:49:17 AM JST

* Tue 25 Nov 2014 03:49:17 AM JST
        print('DEBUG-2-core.py')

* Tue 25 Nov 2014 03:49:19 AM JST

* Tue 25 Nov 2014 03:49:19 AM JST

* Tue 25 Nov 2014 03:49:19 AM JST
        print('DEBUG-1-core.py')

* Tue 25 Nov 2014 03:49:46 AM JST
            
* Tue 25 Nov 2014 03:49:55 AM JST
['No key available with this passphrase.', r'[#\$]',
                   'already exists', pexpect.EOF]
* Tue 25 Nov 2014 03:50:03 AM JST

* Tue 25 Nov 2014 03:50:03 AM JST

* Tue 25 Nov 2014 03:50:04 AM JST
        expects = 

* Tue 25 Nov 2014 03:50:21 AM JST
        pex = pexpect.spawn(
            ' '.join(('cryptsetup', 'luksOpen', self._disk, self._mapped_name)),
            maxread=4000)

* Tue 25 Nov 2014 03:50:38 AM JST
'/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340'
* Tue 25 Nov 2014 03:50:43 AM JST
_mapped_name
* Tue 25 Nov 2014 03:50:43 AM JST
self._mapped_name
* Tue 25 Nov 2014 03:51:09 AM JST
pex.expect(['No key available with this passphrase.', r'[#\$]',
                            'already exists', pexpect.EOF])
* Tue 25 Nov 2014 03:51:49 AM JST

* Tue 25 Nov 2014 03:51:49 AM JST

* Tue 25 Nov 2014 03:51:49 AM JST
        print('DEBUG-3-core.py')

* Tue 25 Nov 2014 03:52:06 AM JST
                
* Tue 25 Nov 2014 03:52:11 AM JST
        
* Tue 25 Nov 2014 03:52:12 AM JST
                 
* Tue 25 Nov 2014 03:54:25 AM JST
sleep(0.1)
* Tue 25 Nov 2014 03:54:38 AM JST
import cryptdisk
d=cryptdisk.DecryptDisk('/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340', 'data')

* Tue 25 Nov 2014 03:55:21 AM JST

* Tue 25 Nov 2014 03:55:21 AM JST

* Tue 25 Nov 2014 03:55:21 AM JST
        sleep(0.1)

* Tue 25 Nov 2014 03:55:22 AM JST

* Tue 25 Nov 2014 03:55:22 AM JST

* Tue 25 Nov 2014 03:55:22 AM JST
        sleep(0.1)

* Tue 25 Nov 2014 03:56:18 AM JST
        pex = pexpect.spawn(
            ' '.join(('cryptsetup', 'open', self._disk, self._mapped_name)))

* Tue 25 Nov 2014 03:56:27 AM JST
'/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340'
* Tue 25 Nov 2014 03:56:39 AM JST
'data'
* Tue 25 Nov 2014 03:57:32 AM JST
pex.sendline(password)
* Tue 25 Nov 2014 03:59:15 AM JST
pex.expect(
                ['No key available with this passphrase.', r'[#\$]',
                 'already exists', pexpect.EOF])
* Tue 25 Nov 2014 03:59:43 AM JST
                
* Tue 25 Nov 2014 03:59:45 AM JST
                 
* Tue 25 Nov 2014 04:00:30 AM JST
pex.expect(['No key available with this passphrase.', r'[#\$]', 'already exists', pexpec
* Tue 25 Nov 2014 04:02:13 AM JST
import cryptdisk
d=cryptdisk.DecryptDisk('/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340', 'data')

* Tue 25 Nov 2014 04:09:55 AM JST
' '.join(('cryptsetup', 'open', self._disk, self._mapped_name))
* Tue 25 Nov 2014 04:11:21 AM JST
maxread=4000
* Tue 25 Nov 2014 04:16:08 AM JST
import cryptdisk
d=cryptdisk.DecryptDisk('/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340', 'data')

* Tue 25 Nov 2014 04:16:32 AM JST

* Tue 25 Nov 2014 04:16:32 AM JST

* Tue 25 Nov 2014 04:16:32 AM JST
        sleep(10)

* Tue 25 Nov 2014 04:20:14 AM JST
import cryptdisk
d=cryptdisk.DecryptDisk('/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340', 'data')

* Tue 25 Nov 2014 04:21:23 AM JST

* Tue 25 Nov 2014 04:21:23 AM JST

* Tue 25 Nov 2014 04:21:23 AM JST
        print('DEBUG-1-core.py')

* Tue 25 Nov 2014 04:21:25 AM JST

* Tue 25 Nov 2014 04:21:25 AM JST

* Tue 25 Nov 2014 04:21:25 AM JST
        print(' '.join(('cryptsetup', 'open', self._disk, self._mapped_name)))

* Tue 25 Nov 2014 04:23:12 AM JST
pex.expect(
                ['No key available with this passphrase.', r'[#\$]',
                 'already exists', pexpect.EOF])
* Tue 25 Nov 2014 04:23:18 AM JST
                
* Tue 25 Nov 2014 04:48:23 AM JST
ret
* Tue 25 Nov 2014 04:48:23 AM JST
1 == ret
* Tue 25 Nov 2014 04:49:22 AM JST

* Tue 25 Nov 2014 04:49:22 AM JST

* Tue 25 Nov 2014 04:49:22 AM JST
        print(ret)

* Tue 25 Nov 2014 04:49:36 AM JST
getpass()
* Tue 25 Nov 2014 04:53:36 AM JST
import cryptdisk
d=cryptdisk.DecryptDisk('/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340', 'data')

* Tue 25 Nov 2014 04:54:52 AM JST
Password: 06DV 187
* Tue 25 Nov 2014 04:55:08 AM JST
import cryptdisk
d=cryptdisk.DecryptDisk('/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340', 'data')

* Tue 25 Nov 2014 05:02:52 AM JST
06DV 187s zuUR. VsFR sPjW mr5m.
* Tue 25 Nov 2014 05:03:31 AM JST

* Tue 25 Nov 2014 05:03:31 AM JST

* Tue 25 Nov 2014 05:03:31 AM JST
        sleep(2)

* Tue 25 Nov 2014 05:03:56 AM JST
import cryptdisk
d=cryptdisk.DecryptDisk('/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340', 'data')

* Tue 25 Nov 2014 05:08:35 AM JST
import cryptdisk
d=cryptdisk.DecryptDisk('/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340', 'data')
d.decrypt('a')

* Tue 25 Nov 2014 05:10:04 AM JST
import cryptdisk
d=cryptdisk.DecryptDisk('/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340', 'data')
d.decrypt('a')

* Tue 25 Nov 2014 05:10:11 AM JST
d.decrypt('a')

* Tue 25 Nov 2014 05:11:15 AM JST
d=cryptdisk.DecryptDisk('/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340', 'data')
* Tue 25 Nov 2014 05:13:11 AM JST

* Tue 25 Nov 2014 05:13:11 AM JST

* Tue 25 Nov 2014 05:13:11 AM JST
        print(password)

* Tue 25 Nov 2014 05:13:17 AM JST

* Tue 25 Nov 2014 05:13:17 AM JST

* Tue 25 Nov 2014 05:13:17 AM JST
        # print(ret)

* Tue 25 Nov 2014 06:12:40 PM JST

* Tue 25 Nov 2014 06:12:40 PM JST

* Tue 25 Nov 2014 06:12:40 PM JST
from getpass import getpass

* Tue 25 Nov 2014 06:12:40 PM JST
from getpass import getpass

* Tue 25 Nov 2014 06:12:40 PM JST
from getpass import getpass
from time import sleep

* Tue 25 Nov 2014 06:18:21 PM JST
'/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340'
* Tue 25 Nov 2014 06:24:05 PM JST
diretcory
* Tue 25 Nov 2014 06:26:09 PM JST
cryp
* Tue 25 Nov 2014 06:26:10 PM JST
cryptdisk = cryp
* Tue 25 Nov 2014 06:26:27 PM JST
'/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340'
* Tue 25 Nov 2014 06:26:43 PM JST

* Tue 25 Nov 2014 06:26:43 PM JST

* Tue 25 Nov 2014 06:26:43 PM JST
    disk = '/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340'

* Tue 25 Nov 2014 06:26:43 PM JST
    disk = '/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340'

* Tue 25 Nov 2014 06:26:43 PM JST
    disk = '/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340'
    mapper_name = 'data'

* Tue 25 Nov 2014 06:28:46 PM JST
from sh import mount
* Tue 25 Nov 2014 06:31:37 PM JST
'/dev/mapper'
* Tue 25 Nov 2014 06:36:02 PM JST
if 
* Tue 25 Nov 2014 06:43:22 PM JST
'/data'
* Tue 25 Nov 2014 06:43:55 PM JST

* Tue 25 Nov 2014 06:50:36 PM JST
self.
* Tue 25 Nov 2014 06:51:19 PM JST
'Enter passphrase for {0}: '
* Tue 25 Nov 2014 06:53:01 PM JST

* Tue 25 Nov 2014 06:53:01 PM JST

* Tue 25 Nov 2014 06:53:02 PM JST
        if not :

* Tue 25 Nov 2014 07:04:11 PM JST
os.path.join('/dev/mapper', self.disk.get_name())
* Tue 25 Nov 2014 07:09:10 PM JST
ismounted(
* Tue 25 Nov 2014 07:10:32 PM JST
pass
* Tue 25 Nov 2014 09:33:09 PM JST
getpass(
                'Enter passphrase for {0}: '.format(self.disk.get_disk()))
* Tue 25 Nov 2014 09:33:21 PM JST
                
* Tue 25 Nov 2014 09:33:36 PM JST
            
* Tue 25 Nov 2014 09:34:06 PM JST
    def _getpassword(self, ):
        r"""SUMMARY

        getpassword()

        @Return:

        @Error:
        """
        return getpass('Enter passphrase for {0}: '.format(self.disk.get_disk()))


* Tue 25 Nov 2014 09:35:17 PM JST
os.path.join('/dev/mapper', self.get_name())
* Tue 25 Nov 2014 09:36:03 PM JST
            
* Tue 25 Nov 2014 09:36:24 PM JST
              
* Tue 25 Nov 2014 09:42:34 PM JST
not self.disk.isexists()
* Tue 25 Nov 2014 09:42:36 PM JST

* Tue 25 Nov 2014 09:42:36 PM JST

* Tue 25 Nov 2014 09:42:36 PM JST
            if :

* Tue 25 Nov 2014 09:45:04 PM JST
from counter import Counter
* Tue 25 Nov 2014 09:45:27 PM JST
class PasswordError(StandardError):
    r"""SUMMARY
    """


* Tue 25 Nov 2014 09:45:46 PM JST
count = Counter(3, exceptclass=PasswordError)
* Tue 25 Nov 2014 09:45:57 PM JST
count() # raise error if 3 called
* Tue 25 Nov 2014 09:51:35 PM JST
'cryptsetup open {} {}'.format(self._disk, self._mapped_name)
* Tue 25 Nov 2014 09:51:42 PM JST
            
* Tue 25 Nov 2014 09:54:40 PM JST

* Tue 25 Nov 2014 09:54:40 PM JST

* Tue 25 Nov 2014 09:54:40 PM JST
import os

* Tue 25 Nov 2014 09:56:19 PM JST
MyArchive
* Tue 25 Nov 2014 10:00:54 PM JST

* Tue 25 Nov 2014 10:00:54 PM JST

* Tue 25 Nov 2014 10:00:54 PM JST
from getpass import getpass

* Tue 25 Nov 2014 10:01:51 PM JST
PROMPT
* Tue 25 Nov 2014 10:02:22 PM JST
${1:'${2:PROMPT}'}
* Tue 25 Nov 2014 10:03:17 PM JST

* Tue 25 Nov 2014 10:03:17 PM JST

* Tue 25 Nov 2014 10:03:17 PM JST
from getpass import getpass

* Tue 25 Nov 2014 10:03:18 PM JST
from getpass import getpass

* Tue 25 Nov 2014 10:03:18 PM JST
from getpass import getpass
from time import sleep

* Tue 25 Nov 2014 10:05:30 PM JST
Path
* Tue 25 Nov 2014 10:08:24 PM JST
Arecipe
* Tue 25 Nov 2014 10:11:57 PM JST
MyArchive().isexists()
* Tue 25 Nov 2014 10:12:09 PM JST
.isexists()
* Tue 25 Nov 2014 10:12:22 PM JST
archive
* Tue 25 Nov 2014 10:12:23 PM JST
data/archive
* Tue 25 Nov 2014 11:16:37 PM JST
_prompt
* Tue 25 Nov 2014 11:27:06 PM JST
easygui.passwordbox
* Tue 25 Nov 2014 11:29:48 PM JST
EasyGUIInputPass
* Tue 25 Nov 2014 11:32:19 PM JST
myarchive.inputpass.egui
* Tue 25 Nov 2014 11:32:26 PM JST
myarchive.inputpass.
* Tue 25 Nov 2014 11:36:11 PM JST
from
* Tue 25 Nov 2014 11:39:43 PM JST
'Enter passphrase for {0}: '.format(self.disk.get_disk())
* Tue 25 Nov 2014 11:41:40 PM JST
MyArchive
* Tue 25 Nov 2014 11:42:27 PM JST
EasyGUIInputPass
* Tue 25 Nov 2014 11:44:54 PM JST
MyArchive
* Tue 25 Nov 2014 11:54:44 PM JST

* Tue 25 Nov 2014 11:54:44 PM JST

* Tue 25 Nov 2014 11:54:44 PM JST
        # return getpass('Enter passphrase for {0}: '.format(self.disk.get_disk()))

* Tue 25 Nov 2014 11:58:24 PM JST

* Tue 25 Nov 2014 11:58:25 PM JST

* Tue 25 Nov 2014 11:58:25 PM JST
import os

* Tue 25 Nov 2014 11:58:25 PM JST
import os

* Tue 25 Nov 2014 11:58:25 PM JST
import os
import sys

* Tue 25 Nov 2014 11:58:39 PM JST
import 
* Tue 25 Nov 2014 11:58:43 PM JST
from ref import recipe
from ref.CMD import thunar

* Wed 26 Nov 2014 12:00:29 AM JST
from ref import recipe
* Wed 26 Nov 2014 12:00:38 AM JST
recipe.ARCHIVE_PATH
* Wed 26 Nov 2014 12:00:47 AM JST
recipe.ARCHIVE_PATH
* Wed 26 Nov 2014 12:02:11 AM JST
archive
* Wed 26 Nov 2014 12:03:18 AM JST

* Wed 26 Nov 2014 12:03:18 AM JST

* Wed 26 Nov 2014 12:03:18 AM JST
thunar.openthunar(str(recipe.ARCHIVE_PATH))

* Wed 26 Nov 2014 12:05:25 AM JST
    archive = MyArchive(inputpass.EasyGUIInputPass(title='CryptedDisk'))
    if not archive.ismounted():
        archive.mount()

* Wed 26 Nov 2014 12:05:40 AM JST

* Wed 26 Nov 2014 12:05:40 AM JST

* Wed 26 Nov 2014 12:05:40 AM JST
    # sleep(30)

* Wed 26 Nov 2014 12:05:41 AM JST

* Wed 26 Nov 2014 12:05:41 AM JST

* Wed 26 Nov 2014 12:05:41 AM JST
    # sleep(30)

* Wed 26 Nov 2014 12:05:52 AM JST

* Wed 26 Nov 2014 12:05:52 AM JST

* Wed 26 Nov 2014 12:05:52 AM JST
import os as _os

* Wed 26 Nov 2014 12:05:56 AM JST

* Wed 26 Nov 2014 12:05:56 AM JST

* Wed 26 Nov 2014 12:05:56 AM JST
    _sys.exit()

* Wed 26 Nov 2014 12:06:04 AM JST

* Wed 26 Nov 2014 12:06:04 AM JST

* Wed 26 Nov 2014 12:06:04 AM JST
import sys as _sys

* Wed 26 Nov 2014 12:10:11 AM JST
ARCHIVE_PATH
* Wed 26 Nov 2014 12:12:30 AM JST

* Wed 26 Nov 2014 12:12:30 AM JST

* Wed 26 Nov 2014 12:12:30 AM JST
import pathlib2

* Wed 26 Nov 2014 12:24:20 AM JST
~/.pylib/ref/
* Wed 26 Nov 2014 12:27:44 AM JST
menulist = os.listdir(self.todaydir)
* Wed 26 Nov 2014 12:27:53 AM JST
        try:
            menulist = os.listdir(self.todaydir)
        except OSError:
            menulist = ()

* Wed 26 Nov 2014 12:28:25 AM JST
self.list_todays()
* Wed 26 Nov 2014 12:28:30 AM JST

* Wed 26 Nov 2014 12:28:30 AM JST

* Wed 26 Nov 2014 12:28:30 AM JST
        menulist = self.list_todays()

* Wed 26 Nov 2014 12:32:20 AM JST
import sys
import os

import logging
from logging.handlers import RotatingFileHandler

from ref import recipe
from ref.CMD import thunar

# for debug
import cgitb
cgitb.enable(format='text')


__revision__ = '$Revision: 23 $'
__version__ = '0.1.0'

###############################################################################
# output log file
LOGNAME = 'recipe'
LOGDIR = '/var/log'
LOGPATH = os.path.join(LOGDIR, LOGNAME)
_RH = RotatingFileHandler(LOGPATH, 'w', 1024*50, 1)
_RH.setLevel(logging.DEBUG)
_RH.setFormatter(logging.Formatter(
    '%(asctime)s;%(name)s;%(module)s %(funcName)s(%(lineno)d);%(levelname)s;'
    '\n   %(message)s'))

# console
_CH = logging.StreamHandler()
_CH.setLevel(logging.DEBUG)

LOG = logging.getLogger('recipe')
LOG.setLevel(logging.DEBUG)
LOG.addHandler(_RH)
LOG.addHandler(_CH)

# exception
def logging_handle_exceptions(excls, value, trcbck):
    r"""Handling exception hook.

    sys.excepthook = logging_handle_exceptions
    """
    import traceback
    if issubclass(excls, KeyboardInterrupt):
        sys.__excepthook__(excls, value, trcbck)
        return
    errortype = 'Error type: {}'.format(excls)
    valuetxt = 'Uncaught exception: {0}'.format(str(value))
    trcbcktxt = ''.join(traceback.format_tb(trcbck))
    LOG.exception('\n'.join([errortype, valuetxt, trcbcktxt]))

sys.excepthook = logging_handle_exceptions
###############################################################################


recipe_latest_path = recipe.Recipe().todaydir
if recipe_latest_path:
    LOG.debug('in recipe latest path')
    thunar.openthunar(recipe_latest_path)

next_recipe = recipe.Recipe().next_recipedir
if next_recipe:
    thunar.openthunar(next_recipe)

* Wed 26 Nov 2014 12:33:02 AM JST
from mygoogle import chrome
* Wed 26 Nov 2014 12:38:42 AM JST
menus, append = ListDotAvoider().append
* Wed 26 Nov 2014 12:38:48 AM JST
menus,
* Wed 26 Nov 2014 12:39:00 AM JST
from dotavoider import ListDotAvoider
* Wed 26 Nov 2014 12:39:28 AM JST
options=CHROME_OPTS
* Wed 26 Nov 2014 12:39:41 AM JST
from mygoogle.chrome.variables import DEFAULT_OPTS as CHROME_OPTS
* Wed 26 Nov 2014 12:42:48 AM JST

* Wed 26 Nov 2014 12:42:48 AM JST

* Wed 26 Nov 2014 12:42:48 AM JST
print(files)

* Wed 26 Nov 2014 12:55:35 AM JST

* Wed 26 Nov 2014 01:06:14 AM JST

* Wed 26 Nov 2014 01:06:14 AM JST

* Wed 26 Nov 2014 01:06:14 AM JST
print(files)

* Wed 26 Nov 2014 01:06:40 AM JST
for
* Wed 26 Nov 2014 01:06:56 AM JST
10 18
* Wed 26 Nov 2014 01:07:07 AM JST

* Wed 26 Nov 2014 01:07:07 AM JST

* Wed 26 Nov 2014 01:07:07 AM JST
10 18 * * * root export DISPLAY=:0 && /usr/bin/python /root/.pylib/recipe.py

* Wed 26 Nov 2014 01:07:20 AM JST
RECIPE = recipe.Recipe()
* Wed 26 Nov 2014 01:07:44 AM JST
RECIPE.todaydir
* Wed 26 Nov 2014 01:07:56 AM JST

* Wed 26 Nov 2014 01:07:56 AM JST

* Wed 26 Nov 2014 01:07:56 AM JST
recipe_latest_path = RECIPE.todaydir

* Wed 26 Nov 2014 01:08:12 AM JST
RECIPE.next_recipedir
* Wed 26 Nov 2014 01:08:19 AM JST

* Wed 26 Nov 2014 01:08:19 AM JST

* Wed 26 Nov 2014 01:08:19 AM JST
next_recipe = RECIPE.next_recipedir

* Wed 26 Nov 2014 01:08:21 AM JST

* Wed 26 Nov 2014 01:08:21 AM JST

* Wed 26 Nov 2014 01:08:22 AM JST
RECIPE = recipe.Recipe()

* Wed 26 Nov 2014 01:08:32 AM JST
RECIPE.list_todays()
* Wed 26 Nov 2014 01:08:40 AM JST

* Wed 26 Nov 2014 01:08:40 AM JST

* Wed 26 Nov 2014 01:08:40 AM JST
recipes = RECIPE.list_todays()

* Wed 26 Nov 2014 01:09:12 AM JST
    @property
    def todaydir(self, ):
        r"""SUMMARY

        todaypath()

        @Return:
        """
        if not self.weekdir:
            return ''
        weekday = self._subdirname.get(datetime.date.today().weekday())
        return os.path.join(self.weekdir, weekday)


* Wed 26 Nov 2014 01:12:35 AM JST
self._subdirname.get(datetime.date.today().weekday())
* Wed 26 Nov 2014 11:34:03 AM JST
weeknum
* Wed 26 Nov 2014 11:34:06 AM JST
week
* Wed 26 Nov 2014 11:45:04 AM JST
WEEK = {MONDAY:     '4mon',
        TUESDAY:    '5tue',
        WEDNESDAY:  '6wed',
        THURSDAY:   '0thu',
        FRIDAY:     '1fri',
        SATURDAY:   '2sta',
        SUNDAY:     '3sun'}

* Wed 26 Nov 2014 11:45:11 AM JST
WEEK = 
* Wed 26 Nov 2014 11:45:14 AM JST
from t1.dateutil import (MONDAY, TUESDAY, WEDNESDAY,

* Wed 26 Nov 2014 11:45:16 AM JST
from t1.dateutil import (MONDAY, TUESDAY, WEDNESDAY,
                         THURSDAY, FRIDAY, SATURDAY, SUNDAY)

* Wed 26 Nov 2014 11:45:47 AM JST
THURSDAY:   0,
        FRIDAY:     1,
        SATURDAY:   2,
        SUNDAY:     3
* Wed 26 Nov 2014 11:48:11 AM JST

* Wed 26 Nov 2014 11:48:11 AM JST

* Wed 26 Nov 2014 11:48:11 AM JST
        WEDNESDAY:  7, 

* Wed 26 Nov 2014 11:48:11 AM JST
        WEDNESDAY:  7, 

* Wed 26 Nov 2014 11:48:11 AM JST
        WEDNESDAY:  7, 
        }

* Wed 26 Nov 2014 11:53:51 AM JST
{THURSDAY:   1,
          FRIDAY:     2,
          SATURDAY:   3,
          SUNDAY:     4,
          MONDAY:     5,
          TUESDAY:    6,
          WEDNESDAY:  7,
          }
* Wed 26 Nov 2014 11:55:46 AM JST
week
* Wed 26 Nov 2014 11:55:55 AM JST
week
* Wed 26 Nov 2014 11:56:36 AM JST
DictUtil
* Wed 26 Nov 2014 11:57:59 AM JST
path
* Wed 26 Nov 2014 11:59:33 AM JST
from t1.dateutil import (MONDAY, TUESDAY, WEDNESDAY,
                         THURSDAY, FRIDAY, SATURDAY, SUNDAY)

* Wed 26 Nov 2014 12:35:40 PM JST
True
* Wed 26 Nov 2014 12:43:47 PM JST
MyWeek().get_number(self._week) + num
* Wed 26 Nov 2014 12:46:38 PM JST
weekindex
* Wed 26 Nov 2014 12:46:38 PM JST
add + weekindex
* Wed 26 Nov 2014 12:47:19 PM JST
THURSDAY
* Wed 26 Nov 2014 12:47:58 PM JST
(MONDAY, TUESDAY, WEDNESDAY,
                         THURSDAY, FRIDAY, SATURDAY, SUNDAY)
* Wed 26 Nov 2014 12:48:03 PM JST
                         
* Wed 26 Nov 2014 12:48:20 PM JST
_weeknum
* Wed 26 Nov 2014 12:51:55 PM JST
FRIDAY
* Wed 26 Nov 2014 12:52:05 PM JST

* Wed 26 Nov 2014 12:52:05 PM JST

* Wed 26 Nov 2014 12:52:05 PM JST
        print(weekindex)

* Wed 26 Nov 2014 12:52:06 PM JST

* Wed 26 Nov 2014 12:52:06 PM JST

* Wed 26 Nov 2014 12:52:07 PM JST
        print(number)

* Wed 26 Nov 2014 12:52:08 PM JST

* Wed 26 Nov 2014 12:52:08 PM JST

* Wed 26 Nov 2014 12:52:08 PM JST
        print(add)

* Wed 26 Nov 2014 12:52:31 PM JST

* Wed 26 Nov 2014 12:52:31 PM JST

* Wed 26 Nov 2014 12:52:31 PM JST
        print(add)

* Wed 26 Nov 2014 12:53:28 PM JST
        myweek = MyWeek()
        weekindex = myweek.get_number(self._week)

* Wed 26 Nov 2014 12:53:40 PM JST
number = weekindex + num
* Wed 26 Nov 2014 12:53:49 PM JST
abs(number) % 7
* Wed 26 Nov 2014 12:53:59 PM JST
return myweek.get_week(add)
* Wed 26 Nov 2014 12:54:04 PM JST
abs(number) % 7
* Wed 26 Nov 2014 12:54:45 PM JST

* Wed 26 Nov 2014 12:54:45 PM JST

* Wed 26 Nov 2014 12:54:45 PM JST
        myweek = MyWeek()

* Wed 26 Nov 2014 12:54:45 PM JST
        myweek = MyWeek()

* Wed 26 Nov 2014 12:54:45 PM JST
        myweek = MyWeek()
        weekindex = myweek.get_number(self._week)

* Wed 26 Nov 2014 12:56:09 PM JST
        myweek = MyWeek()
        weekindex = myweek.get_number(self._week)
        number = weekindex + num
        return myweek.get_week(abs(number) % 7)

* Wed 26 Nov 2014 12:56:23 PM JST
number = weekindex - num
* Wed 26 Nov 2014 12:56:34 PM JST
abs(number) % 7
* Wed 26 Nov 2014 12:56:45 PM JST
add = 7 - add
* Wed 26 Nov 2014 12:56:55 PM JST
add
* Wed 26 Nov 2014 12:57:19 PM JST
weekindex - num
* Wed 26 Nov 2014 12:57:27 PM JST
abs(weekindex - num) % 7
* Wed 26 Nov 2014 12:57:30 PM JST

* Wed 26 Nov 2014 12:57:30 PM JST

* Wed 26 Nov 2014 12:57:30 PM JST
        number = 

* Wed 26 Nov 2014 12:57:30 PM JST
        number = 

* Wed 26 Nov 2014 12:57:30 PM JST
        number = 
        number = 

* Wed 26 Nov 2014 12:57:36 PM JST

* Wed 26 Nov 2014 12:57:36 PM JST

* Wed 26 Nov 2014 12:57:36 PM JST
        myweek = MyWeek()

* Wed 26 Nov 2014 12:57:36 PM JST
        myweek = MyWeek()

* Wed 26 Nov 2014 12:57:36 PM JST
        myweek = MyWeek()
        weekindex = myweek.get_number(self._week)

* Wed 26 Nov 2014 12:57:40 PM JST

* Wed 26 Nov 2014 12:57:40 PM JST

* Wed 26 Nov 2014 12:57:40 PM JST
        else:

* Wed 26 Nov 2014 12:59:09 PM JST
WEDNESDAY
* Wed 26 Nov 2014 12:59:11 PM JST
MONDAY
* Wed 26 Nov 2014 12:59:52 PM JST
THURSDAY
* Wed 26 Nov 2014 12:59:59 PM JST
WEDNESDAY
* Wed 26 Nov 2014 01:00:33 PM JST
weekindex - num
* Wed 26 Nov 2014 01:00:59 PM JST
abs(weekindex - num) % 7
* Wed 26 Nov 2014 01:02:09 PM JST
abs(weekindex - num) % 7
* Wed 26 Nov 2014 01:02:20 PM JST

* Wed 26 Nov 2014 01:02:43 PM JST
WEDNESDAY
* Wed 26 Nov 2014 01:20:46 PM JST

* Wed 26 Nov 2014 01:20:47 PM JST

* Wed 26 Nov 2014 01:20:47 PM JST
        print(abs(weekindex - num) % 7)

* Wed 26 Nov 2014 01:21:30 PM JST
myweek.get_week(number)
* Wed 26 Nov 2014 01:22:45 PM JST
THURSDAY
* Wed 26 Nov 2014 01:22:49 PM JST
WEDNESDAY
* Wed 26 Nov 2014 01:23:58 PM JST
abs(number) % 7
* Wed 26 Nov 2014 01:24:28 PM JST
MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY,
                       SATURDAY, SUNDAY
* Wed 26 Nov 2014 01:25:41 PM JST
weekindex
* Wed 26 Nov 2014 01:26:51 PM JST
weekindex + 
* Wed 26 Nov 2014 01:27:25 PM JST
WEDNESDAY
* Wed 26 Nov 2014 01:28:36 PM JST
abs(number) % 7
* Wed 26 Nov 2014 04:49:01 PM JST
from menu import pathorder
m=pathorder.PathOrder(1, THURSDAY)
m.get_by_week(1)

* Wed 26 Nov 2014 04:49:08 PM JST
from t1.dateutil import (MONDAY, TUESDAY, WEDNESDAY,
                         THURSDAY, FRIDAY, SATURDAY, SUNDAY)

* Wed 26 Nov 2014 04:49:18 PM JST
m=pathorder.PathOrder()
m=pathorder.PathOrder(1, THURSDAY)

* Wed 26 Nov 2014 04:49:31 PM JST
from t1.dateutil import (MONDAY, TUESDAY, WEDNESDAY,
                                 THURSDAY, FRIDAY, SATURDAY, SUNDAY)
m=pathorder.PathOrder()
m=pathorder.PathOrder(1, THURSDAY)

* Wed 26 Nov 2014 04:50:04 PM JST
m=pathorder.PathOrder()
m=pathorder.PathOrder(1, THURSDAY)

* Wed 26 Nov 2014 04:50:12 PM JST
m=pathorder.PathOrder(1, THURSDAY)
* Wed 26 Nov 2014 04:50:15 PM JST

* Wed 26 Nov 2014 04:50:15 PM JST

* Wed 26 Nov 2014 04:50:15 PM JST
m=pathorder.PathOrder()

* Wed 26 Nov 2014 04:50:19 PM JST
from menu import pathorder
* Wed 26 Nov 2014 04:53:11 PM JST
THURSDAY
* Wed 26 Nov 2014 04:53:19 PM JST

* Wed 26 Nov 2014 04:53:20 PM JST

* Wed 26 Nov 2014 04:53:20 PM JST
        # print(abs(number) % 7)

* Wed 26 Nov 2014 04:56:12 PM JST
abs(number) % 7
* Wed 26 Nov 2014 04:56:55 PM JST

* Wed 26 Nov 2014 04:56:55 PM JST

* Wed 26 Nov 2014 04:56:55 PM JST
        if number == :

* Wed 26 Nov 2014 04:57:14 PM JST

* Wed 26 Nov 2014 04:57:14 PM JST

* Wed 26 Nov 2014 04:57:14 PM JST
        print(abs(number) % 7)

* Wed 26 Nov 2014 05:01:46 PM JST

* Wed 26 Nov 2014 05:01:46 PM JST

* Wed 26 Nov 2014 05:01:46 PM JST
        print(number)

* Wed 26 Nov 2014 05:05:25 PM JST
    number = DictUtil({THURSDAY:   0,
                       FRIDAY:     1,
                       SATURDAY:   2,
                       SUNDAY:     3,
                       MONDAY:     4,
                       TUESDAY:    5,
                       WEDNESDAY:  6, })

* Wed 26 Nov 2014 05:06:47 PM JST
weekindex + num
* Wed 26 Nov 2014 05:06:51 PM JST

* Wed 26 Nov 2014 05:06:51 PM JST

* Wed 26 Nov 2014 05:06:51 PM JST
        number = 

* Wed 26 Nov 2014 05:08:50 PM JST

* Wed 26 Nov 2014 05:08:50 PM JST

* Wed 26 Nov 2014 05:08:50 PM JST
        # number = 7 - abs(weekindex - num) % 7

* Wed 26 Nov 2014 05:08:51 PM JST
        # number = 7 - abs(weekindex - num) % 7

* Wed 26 Nov 2014 05:08:51 PM JST
        # number = 7 - abs(weekindex - num) % 7
        print(number)

* Wed 26 Nov 2014 05:08:52 PM JST

* Wed 26 Nov 2014 05:08:52 PM JST

* Wed 26 Nov 2014 05:08:52 PM JST
        # return myweek.get_week(number)

* Wed 26 Nov 2014 05:09:22 PM JST

* Wed 26 Nov 2014 05:09:23 PM JST

* Wed 26 Nov 2014 05:09:23 PM JST
        myweek = MyWeek()

* Wed 26 Nov 2014 05:09:23 PM JST
        myweek = MyWeek()

* Wed 26 Nov 2014 05:09:23 PM JST
        myweek = MyWeek()
        weekindex = myweek.get_number(self._week)

* Wed 26 Nov 2014 05:11:20 PM JST
abs(weekindex + num) % 7
* Wed 26 Nov 2014 05:11:24 PM JST

* Wed 26 Nov 2014 05:11:24 PM JST

* Wed 26 Nov 2014 05:11:24 PM JST
        number = 

* Wed 26 Nov 2014 05:12:06 PM JST
7 - abs(num) % 7
* Wed 26 Nov 2014 05:12:09 PM JST

* Wed 26 Nov 2014 05:12:09 PM JST

* Wed 26 Nov 2014 05:12:09 PM JST
        number = 

* Wed 26 Nov 2014 05:20:39 PM JST
m=pathorder.PathOrder(1, THURSDAY)
* Wed 26 Nov 2014 05:20:42 PM JST
from menu import pathorder
m=pathorder.PathOrder(1, THURSDAY)

* Wed 26 Nov 2014 05:25:28 PM JST
WEEKNUM
* Wed 26 Nov 2014 05:25:51 PM JST
DictUtil({1: 0,
                    2: 1,
                    3: 2,
                    4: 3,})
* Wed 26 Nov 2014 05:28:05 PM JST
self.weekn.get_num(self._weeknum)
* Wed 26 Nov 2014 05:28:18 PM JST
weeknum
* Wed 26 Nov 2014 05:28:40 PM JST
from menu import pathorder
m=pathorder.PathOrder(1, THURSDAY)

* Wed 26 Nov 2014 05:31:36 PM JST
len(self.weekn)
* Wed 26 Nov 2014 05:32:00 PM JST
        if 0 <= num:
            return self._get_by_week_pos(num)
        return self._get_by_week_neg(num)

* Wed 26 Nov 2014 05:32:20 PM JST
from menu import pathorder
m=pathorder.PathOrder(1, THURSDAY)

* Wed 26 Nov 2014 06:21:35 PM JST
from menu import pathorder
m=pathorder.PathOrder(1, THURSDAY)

* Wed 26 Nov 2014 06:23:08 PM JST
self.get_by_weeknum(week)
* Wed 26 Nov 2014 06:23:23 PM JST
self.get_by_week(num)
* Wed 26 Nov 2014 06:26:03 PM JST
self.myweek.get_number(self._week)
* Wed 26 Nov 2014 06:27:39 PM JST
weekday
* Wed 26 Nov 2014 06:31:56 PM JST
weekindex = self.myweek.get_number(self._week)
* Wed 26 Nov 2014 06:37:46 PM JST
        weekindex = self.myweek.get_number(self._week)
        weeknum = weekindex + num / 7
        return self.get_by_weeknum(weeknum), self.get_by_week(num)

* Wed 26 Nov 2014 06:37:55 PM JST
        if 0 <= num:
            return self._get_by_weeknum_pos(num)
        return self._get_by_weeknum_neg(num)

* Wed 26 Nov 2014 06:38:07 PM JST
_get_by_weeknum_pos
* Wed 26 Nov 2014 06:41:22 PM JST
        weekindex = self.myweek.get_number(self._week)
        weeknum = weekindex + num / 7
        return self.get_by_weeknum(weeknum), self.get_by_week(num)

* Wed 26 Nov 2014 06:42:26 PM JST
from menu import pathorder
m=pathorder.PathOrder(1, THURSDAY)

* Wed 26 Nov 2014 09:52:56 PM JST
from mygoogle import chrome
* Wed 26 Nov 2014 09:57:16 PM JST
ひじきの煮物.pdf
* Wed 26 Nov 2014 09:57:26 PM JST
/root/recipe/1/0thu
* Wed 26 Nov 2014 09:57:34 PM JST
ひじきの煮物.pdf
* Wed 26 Nov 2014 10:04:35 PM JST
from
* Wed 26 Nov 2014 10:04:39 PM JST
import
* Wed 26 Nov 2014 10:05:00 PM JST
path
* Wed 26 Nov 2014 10:05:23 PM JST
Path(path)
* Wed 26 Nov 2014 10:10:51 PM JST
list_
* Wed 26 Nov 2014 10:10:55 PM JST
list
* Wed 26 Nov 2014 10:14:59 PM JST
/root/recipe/1/0thu
* Wed 26 Nov 2014 10:15:48 PM JST
m.iter_recipes()
* Wed 26 Nov 2014 10:16:52 PM JST
self._path
* Wed 26 Nov 2014 10:16:59 PM JST
str(self._path)
* Wed 26 Nov 2014 11:04:50 PM JST
basedir
* Wed 26 Nov 2014 11:07:04 PM JST
self.
* Wed 26 Nov 2014 11:17:27 PM JST
from t1.dateutil import (MONDAY, TUESDAY, WEDNESDAY,
                         THURSDAY, FRIDAY, SATURDAY, SUNDAY)

* Wed 26 Nov 2014 11:17:40 PM JST
{MONDAY:     '4mon',
        TUESDAY:    '5tue',
        WEDNESDAY:  '6wed',
        THURSDAY:   '0thu',
        FRIDAY:     '1fri',
        SATURDAY:   '2sta',
        SUNDAY:     '3sun'}
* Wed 26 Nov 2014 11:31:00 PM JST
PathOrder
* Wed 26 Nov 2014 11:31:23 PM JST
PathOrder
* Wed 26 Nov 2014 11:32:11 PM JST
list_
* Wed 26 Nov 2014 11:32:49 PM JST
pathorder.WeekNum.weeknum.keys()
* Wed 26 Nov 2014 11:39:12 PM JST
dirname
* Wed 26 Nov 2014 11:52:04 PM JST
path = self.basedir.joinpath(str(dirname))
* Wed 26 Nov 2014 11:54:01 PM JST
self.basedir
* Wed 26 Nov 2014 11:59:01 PM JST
from menu import manager
m=manager.MenuManager()
m._pave_directory()

* Wed 26 Nov 2014 11:59:07 PM JST
from menu import manager
m=manager.MenuManager()
m._pave_directory()

* Thu 27 Nov 2014 12:01:00 AM JST
pathorder.WeekNum.weeknum.keys()
* Thu 27 Nov 2014 12:01:21 AM JST
self.list_weeknum()
* Thu 27 Nov 2014 12:02:47 AM JST
PosixPath
* Thu 27 Nov 2014 12:03:08 AM JST
, PosixPath
* Thu 27 Nov 2014 12:03:13 AM JST
Posix
* Thu 27 Nov 2014 12:03:38 AM JST

* Thu 27 Nov 2014 12:03:38 AM JST

* Thu 27 Nov 2014 12:03:38 AM JST
            if not path.exists():

* Thu 27 Nov 2014 12:03:52 AM JST

* Thu 27 Nov 2014 12:03:52 AM JST

* Thu 27 Nov 2014 12:03:52 AM JST
                path.mkdir()

* Thu 27 Nov 2014 12:03:56 AM JST
path.
* Thu 27 Nov 2014 12:04:14 AM JST
            # if not path.exists():
            #     path.mkdir()

* Thu 27 Nov 2014 12:05:18 AM JST
Instance of 'PurePath' has no 'exists' member (E1101)
* Thu 27 Nov 2014 12:17:22 AM JST

* Thu 27 Nov 2014 12:17:22 AM JST

* Thu 27 Nov 2014 12:17:22 AM JST
        self._mksubdir()

* Thu 27 Nov 2014 12:18:30 AM JST
from menu import manager
m=manager.MenuManager()

* Thu 27 Nov 2014 12:18:35 AM JST
m._pave_directory()
* Thu 27 Nov 2014 12:18:48 AM JST

* Thu 27 Nov 2014 12:18:49 AM JST

* Thu 27 Nov 2014 12:18:49 AM JST
                print(path)

* Thu 27 Nov 2014 12:19:09 AM JST

* Thu 27 Nov 2014 12:19:09 AM JST

* Thu 27 Nov 2014 12:19:10 AM JST
                logging

* Thu 27 Nov 2014 12:19:23 AM JST
_pave_directory
* Thu 27 Nov 2014 12:23:12 AM JST
make_weeklin
* Thu 27 Nov 2014 12:30:30 AM JST
pass
* Thu 27 Nov 2014 12:33:51 AM JST
sy
* Thu 27 Nov 2014 12:34:45 AM JST
get
* Thu 27 Nov 2014 12:37:45 AM JST
pass
* Thu 27 Nov 2014 12:43:08 AM JST
suffix
* Thu 27 Nov 2014 12:49:16 AM JST
newlink
* Thu 27 Nov 2014 12:49:34 AM JST
newlink
* Thu 27 Nov 2014 12:50:19 AM JST
from menu import manager
m=manager.MenuManager()

* Thu 27 Nov 2014 12:52:06 AM JST
self.get_weekpath().name
* Thu 27 Nov 2014 12:54:25 AM JST
        porder = pathorder.PathOrder(int(self.get_weekpath().name), 1)
        num = porder.get_by_weeknum(num)

* Thu 27 Nov 2014 12:54:35 AM JST
        newlink = self.basedir.joinpath(str(num))

* Thu 27 Nov 2014 12:54:44 AM JST
newlink = 
* Thu 27 Nov 2014 12:55:02 AM JST
newlink
* Thu 27 Nov 2014 12:55:16 AM JST
get_
* Thu 27 Nov 2014 12:55:43 AM JST
self.calc_weeklink(num)
* Thu 27 Nov 2014 12:56:09 AM JST
from menu import manager
m=manager.MenuManager()

* Thu 27 Nov 2014 01:06:00 AM JST
basedir.
* Thu 27 Nov 2014 01:06:01 AM JST
self.basedir.
* Thu 27 Nov 2014 01:10:59 AM JST
    def get_weekpath(self, ):
        r"""SUMMARY

        get_weekpath()

        @Return:

        @Error:
        """
        if not self.get_weeklinkpath().is_symlink():
            return self.basedir.joinpath('1')
        return Path(os.path.realpath(str(self.get_weeklinkpath())))


* Thu 27 Nov 2014 01:11:55 AM JST
from menu import manager
m=manager.MenuManager()

* Thu 27 Nov 2014 01:14:17 AM JST
int(self.get_weekpath().name)
* Thu 27 Nov 2014 01:15:54 AM JST
    def get_today_path(self, ):
        r"""SUMMARY

        get_today_path()

        @Return:

        @Error:
        """
        pass


* Thu 27 Nov 2014 01:19:14 AM JST
get_todaylinkpath
* Thu 27 Nov 2014 01:19:25 AM JST
from menu import manager
m=manager.MenuManager()

* Thu 27 Nov 2014 01:19:28 AM JST
from menu import manager
m=manager.MenuManager()
m.get_todaylinkpath()

* Thu 27 Nov 2014 01:19:53 AM JST
get_todaylinkpath
* Thu 27 Nov 2014 01:20:53 AM JST
        if not self.get_weeklinkpath().is_symlink():
            return self.basedir.joinpath('1')
        return Path(os.path.realpath(str(self.get_weeklinkpath())))

* Thu 27 Nov 2014 01:21:41 AM JST
self.get_weekpath().joinpath('today')
* Thu 27 Nov 2014 01:21:52 AM JST
today
* Thu 27 Nov 2014 01:22:26 AM JST
                  
* Thu 27 Nov 2014 01:23:31 AM JST
        porder = pathorder.PathOrder(self.get_weeknum(), 1)
        num = porder.get_by_weeknum(num)
        return self.basedir.joinpath(str(num))

* Thu 27 Nov 2014 01:26:26 AM JST
m.get_todaylinkpath()

* Thu 27 Nov 2014 01:32:37 AM JST
pass
* Thu 27 Nov 2014 01:35:04 AM JST
weeknum
* Thu 27 Nov 2014 01:39:49 AM JST
self.get_weeknum()
* Thu 27 Nov 2014 01:40:21 AM JST
int(self.get_weeknum())
* Thu 27 Nov 2014 01:41:06 AM JST
self.weeknum.get(self.get_todayname())
* Thu 27 Nov 2014 01:41:38 AM JST
self.get_todayname()
* Thu 27 Nov 2014 01:46:39 AM JST
from menu import manager
m=manager.MenuManager()
m.calc_todaylink(1)
ls
m.lotate_todaylink()

* Thu 27 Nov 2014 01:46:42 AM JST

* Thu 27 Nov 2014 01:46:43 AM JST

* Thu 27 Nov 2014 01:46:43 AM JST
ls

* Thu 27 Nov 2014 01:46:52 AM JST
from menu import manager
m=manager.MenuManager()

* Thu 27 Nov 2014 01:46:59 AM JST
m.calc_todaylink(1)

* Thu 27 Nov 2014 01:47:05 AM JST
m.lotate_todaylink()
* Thu 27 Nov 2014 01:48:05 AM JST
get_today_path
* Thu 27 Nov 2014 01:48:46 AM JST
pass
* Thu 27 Nov 2014 01:49:31 AM JST
week
* Thu 27 Nov 2014 01:49:31 AM JST
self.week
* Thu 27 Nov 2014 01:51:24 AM JST
int(
* Thu 27 Nov 2014 01:51:35 AM JST
        porder = pathorder.PathOrder(
            self.get_weeknum(), self.week.get(self.get_todayname()))

* Thu 27 Nov 2014 01:51:43 AM JST
            
* Thu 27 Nov 2014 01:52:25 AM JST
porder = 
* Thu 27 Nov 2014 01:56:40 AM JST
pass
* Thu 27 Nov 2014 01:58:44 AM JST
from menu import manager
m=manager.MenuManager()

* Thu 27 Nov 2014 01:59:10 AM JST
men
* Thu 27 Nov 2014 02:00:07 AM JST
iter_recipes())
* Thu 27 Nov 2014 02:00:11 AM JST
list(
* Thu 27 Nov 2014 02:01:06 AM JST
weeknum
* Thu 27 Nov 2014 02:01:22 AM JST
print('{} {}'.format(weeknum, todaynum))
* Thu 27 Nov 2014 02:04:06 AM JST

* Thu 27 Nov 2014 02:04:06 AM JST

* Thu 27 Nov 2014 02:04:08 AM JST

* Thu 27 Nov 2014 02:04:12 AM JST

* Thu 27 Nov 2014 02:04:12 AM JST

* Thu 27 Nov 2014 02:04:12 AM JST
        print(weeknum)

* Thu 27 Nov 2014 02:04:13 AM JST

* Thu 27 Nov 2014 02:04:13 AM JST

* Thu 27 Nov 2014 02:04:13 AM JST
        print(weekindex)

* Thu 27 Nov 2014 02:05:26 AM JST
weekindex + 
* Thu 27 Nov 2014 02:05:38 AM JST
get_path()
* Thu 27 Nov 2014 02:06:01 AM JST

* Thu 27 Nov 2014 02:06:01 AM JST

* Thu 27 Nov 2014 02:06:01 AM JST
        print('{} {}'.format(weeknum, todaynum))

* Thu 27 Nov 2014 02:06:02 AM JST

* Thu 27 Nov 2014 02:06:02 AM JST

* Thu 27 Nov 2014 02:06:02 AM JST
        print('{} {}'.format(weeknum2, todaynum2))

* Thu 27 Nov 2014 02:06:15 AM JST
weekindex + 
* Thu 27 Nov 2014 02:06:33 AM JST
/list 
* Thu 27 Nov 2014 02:07:21 AM JST

* Thu 27 Nov 2014 02:07:21 AM JST

* Thu 27 Nov 2014 02:07:21 AM JST
        print(todaynum2)

* Thu 27 Nov 2014 02:13:53 AM JST
from menu import manager
m=manager.MenuManager()

* Thu 27 Nov 2014 02:14:56 AM JST
/list 
* Thu 27 Nov 2014 02:18:49 AM JST
menu
* Thu 27 Nov 2014 02:19:38 AM JST
menu.
* Thu 27 Nov 2014 02:20:03 AM JST
menu
* Thu 27 Nov 2014 02:21:13 AM JST
manager
* Thu 27 Nov 2014 03:25:09 AM JST
    # ice.set_body(('Routines started: {0}\nWEATHER: \nRECIPE: {1}\n'
                  # .format(MANUAL_START, ' '.join(recip.get_today_menus()))))

* Thu 27 Nov 2014 03:26:15 AM JST
daily
* Thu 27 Nov 2014 03:26:15 AM JST
from daily
* Thu 27 Nov 2014 03:28:23 AM JST
_path.
* Thu 27 Nov 2014 03:28:37 AM JST
x.getpath().stem
* Thu 27 Nov 2014 03:30:34 AM JST
menu.MenuManager().get_basepath()
* Thu 27 Nov 2014 03:30:44 AM JST

* Thu 27 Nov 2014 03:30:44 AM JST

* Thu 27 Nov 2014 03:30:44 AM JST
    menu.MenuManager().get_basepath()

* Thu 27 Nov 2014 03:31:24 AM JST
Manager
* Thu 27 Nov 2014 03:32:02 AM JST
mmanager.get_today_path()
* Thu 27 Nov 2014 03:34:23 AM JST
recipe.get_latest_path
* Thu 27 Nov 2014 03:39:40 AM JST
Recipe()
* Thu 27 Nov 2014 03:39:40 AM JST
recipe.Recipe()
* Thu 27 Nov 2014 03:41:25 AM JST
new
* Thu 27 Nov 2014 03:43:42 AM JST
tmp
* Thu 27 Nov 2014 03:45:20 AM JST
from menu import manager
m=manager.MenuManager()

* Thu 27 Nov 2014 03:45:46 AM JST
from menu import manager
m=manager.MenuManager()

* Thu 27 Nov 2014 03:49:15 AM JST

* Thu 27 Nov 2014 03:49:15 AM JST

* Thu 27 Nov 2014 03:49:15 AM JST
import menu

* Thu 27 Nov 2014 03:50:02 AM JST
show_next_recipe
* Thu 27 Nov 2014 03:50:54 AM JST
menu.MenuManager().get_menu(1).get_path()
* Thu 27 Nov 2014 03:53:06 AM JST
def show_next_recipe():
    r"""SUMMARY

    show_next_recipe()

    @Return:
    """
    next_recipe = thunar.ThunarWMHandle(
        str(menu.MenuManager().get_menu(1).get_path()))
    next_recipe.open()
    next_recipe.move(x=1745, y=255, height=575, width=830)
    wm.WinWait().close(klass='Thunar')


* Thu 27 Nov 2014 03:53:14 AM JST
def show_next_recipe():
    r"""SUMMARY

    show_next_recipe()

    @Return:
    """
    next_recipe = thunar.ThunarWMHandle(
        str(menu.MenuManager().get_menu(1).get_path()))
    next_recipe.open()
    next_recipe.move(x=1745, y=255, height=575, width=830)
    wm.WinWait().close(klass='Thunar')



* Thu 27 Nov 2014 03:55:21 AM JST
recipe.ARCHIVE_PATH
* Thu 27 Nov 2014 03:57:03 AM JST
from menu import manager
m=manager.MenuManager()

* Thu 27 Nov 2014 04:27:17 AM JST
clean_today
* Thu 27 Nov 2014 04:27:40 AM JST
    if not WEEKDAY.is_thursday():
        return

* Thu 27 Nov 2014 04:34:34 AM JST

* Thu 27 Nov 2014 04:34:34 AM JST

* Thu 27 Nov 2014 04:34:34 AM JST
             clean_recipe,

* Thu 27 Nov 2014 04:36:19 AM JST

* Thu 27 Nov 2014 04:36:21 AM JST
root
* Thu 27 Nov 2014 04:38:09 AM JST
QU /tmp/recipe# 
* Thu 27 Nov 2014 04:43:25 AM JST
clean_recipe
* Thu 27 Nov 2014 04:49:30 AM JST
menu.MenuManager()
* Thu 27 Nov 2014 04:52:29 AM JST
menu.MenuManager().calc_weeklink(1)
* Thu 27 Nov 2014 05:00:05 AM JST
from ref.CMD import icedove, sleipnir, thunar, sikuli
* Thu 27 Nov 2014 05:00:26 AM JST
from ref import recipe
* Thu 27 Nov 2014 05:00:34 AM JST
thunar.ThunarWMHandle(str(recipe.ARCHIVE_PATH))
* Thu 27 Nov 2014 05:24:45 AM JST
tmp
* Thu 27 Nov 2014 05:36:25 AM JST
from ref.CMD import icedove, sleipnir, thunar, sikuli
* Thu 27 Nov 2014 05:36:35 AM JST
thunar.ThunarWMHandle(str(recipe.ARCHIVE_PATH))
* Thu 27 Nov 2014 05:36:37 AM JST
ARCHIVE_PATH)
* Thu 27 Nov 2014 05:36:38 AM JST
recipe.ARCHIVE_PATH)
* Thu 27 Nov 2014 05:43:08 AM JST
TOAY
* Thu 27 Nov 2014 05:44:23 AM JST
get
* Thu 27 Nov 2014 05:44:24 AM JST
TODAY.get
* Thu 27 Nov 2014 05:47:12 AM JST
TODAYTHUNAR
* Thu 27 Nov 2014 05:48:09 AM JST

* Thu 27 Nov 2014 05:48:09 AM JST

* Thu 27 Nov 2014 05:48:09 AM JST
# if RECIPE.next_recipedir:

* Thu 27 Nov 2014 05:48:37 AM JST
from ref.CMD import icedove, sleipnir, thunar, sikuli
* Thu 27 Nov 2014 05:48:56 AM JST
ThunarWMHandle
* Thu 27 Nov 2014 05:49:04 AM JST
TODAYTHUNAR
* Thu 27 Nov 2014 05:49:23 AM JST
ThunarWMHandle
* Thu 27 Nov 2014 05:50:08 AM JST
TOMORROWTHUNAR
* Thu 27 Nov 2014 05:50:17 AM JST
TOMORROWTHUNAR
* Thu 27 Nov 2014 05:51:45 AM JST
open
* Thu 27 Nov 2014 05:55:41 AM JST
for recipe in TODAY.iter_recipes():
    recipe.show()

* Thu 27 Nov 2014 05:56:02 AM JST
file
* Thu 27 Nov 2014 05:56:02 AM JST
open file
* Thu 27 Nov 2014 05:57:00 AM JST

* Thu 27 Nov 2014 05:57:00 AM JST

* Thu 27 Nov 2014 05:57:00 AM JST
sleep(15)

* Thu 27 Nov 2014 05:58:41 AM JST
from menu import MenuManager
* Thu 27 Nov 2014 05:59:07 AM JST
MANAGER = MenuManager()
TODAY = MANAGER.get_today()

# show today's recipe
for recipe in TODAY.iter_recipes():
    recipe.show()

* Thu 27 Nov 2014 05:59:37 AM JST
TODAYTHUNAR = thunar.ThunarWMHandle(str(TODAY.get_path()))
TODAYTHUNAR.open()

* Thu 27 Nov 2014 05:59:44 AM JST
TODAYTHUNAR = thunar.ThunarWMHandle(str(TODAY.get_path()))
TODAYTHUNAR.open()
TODAYTHUNAR.move(x=1380, y=200, height=560, width=660)

* Thu 27 Nov 2014 05:59:54 AM JST

* Thu 27 Nov 2014 05:59:54 AM JST

* Thu 27 Nov 2014 05:59:54 AM JST
from ref import recipe

* Thu 27 Nov 2014 05:59:55 AM JST

* Thu 27 Nov 2014 05:59:55 AM JST

* Thu 27 Nov 2014 05:59:55 AM JST
import subprocess

* Thu 27 Nov 2014 05:59:56 AM JST

* Thu 27 Nov 2014 05:59:56 AM JST

* Thu 27 Nov 2014 05:59:56 AM JST
import argparse

* Thu 27 Nov 2014 05:59:57 AM JST

* Thu 27 Nov 2014 05:59:57 AM JST

* Thu 27 Nov 2014 05:59:57 AM JST
from time import sleep

* Thu 27 Nov 2014 06:00:09 AM JST

* Thu 27 Nov 2014 06:00:09 AM JST

* Thu 27 Nov 2014 06:00:09 AM JST
from mygoogle import chrome

* Thu 27 Nov 2014 06:00:09 AM JST
from mygoogle import chrome

* Thu 27 Nov 2014 06:00:09 AM JST
from mygoogle import chrome
from mygoogle.chrome.variables import DEFAULT_OPTS as CHROME_OPTS

* Thu 27 Nov 2014 06:00:09 AM JST
from mygoogle import chrome
from mygoogle.chrome.variables import DEFAULT_OPTS as CHROME_OPTS

* Thu 27 Nov 2014 06:00:09 AM JST
from mygoogle import chrome
from mygoogle.chrome.variables import DEFAULT_OPTS as CHROME_OPTS
from dotavoider import ListDotAvoider

* Thu 27 Nov 2014 06:06:29 AM JST
timedelta, 
* Thu 27 Nov 2014 06:06:31 AM JST

* Thu 27 Nov 2014 06:06:31 AM JST

* Thu 27 Nov 2014 06:06:31 AM JST
import shutil

* Thu 27 Nov 2014 06:06:48 AM JST

* Thu 27 Nov 2014 06:06:48 AM JST

* Thu 27 Nov 2014 06:06:48 AM JST
from t1 import osutil

* Thu 27 Nov 2014 06:13:19 AM JST
                 svn_pylib,
                 svn_emacsd,

* Thu 27 Nov 2014 06:13:31 AM JST
def svn_pylib():
    r"""SUMMARY

    svn()

    @Return:
    """
    sbp.Popen(('emacs', '-f', 'svn-status-pylib'))
    sleep(30)
    wm.WinWait().close(title='svn_pylib')


def svn_emacsd():
    r"""SUMMARY

    svn_emacsd()

    @Return:
    """
    sbp.Popen(('emacs', '-f', 'svn-status-emacsd'))
    sleep(30)
    wm.WinWait().close(title='svn_emacsd')



* Thu 27 Nov 2014 06:14:05 AM JST

* Thu 27 Nov 2014 06:14:05 AM JST

* Thu 27 Nov 2014 06:14:05 AM JST
import glob

* Thu 27 Nov 2014 06:14:09 AM JST

* Thu 27 Nov 2014 06:14:09 AM JST

* Thu 27 Nov 2014 06:14:09 AM JST
from confirm import yesnodialog

* Thu 27 Nov 2014 01:40:45 PM JST
false
* Thu 27 Nov 2014 01:42:09 PM JST
/data/.backup/knight_local
* Thu 27 Nov 2014 01:43:41 PM JST
Path('/data/.backup/knight_local').iterdir()
* Thu 27 Nov 2014 01:48:10 PM JST
target
* Thu 27 Nov 2014 01:49:10 PM JST
# 0.1.1: Added notify.

* Thu 27 Nov 2014 03:48:10 PM JST
myba
* Thu 27 Nov 2014 03:49:52 PM JST
        umount
* Thu 27 Nov 2014 04:11:22 PM JST
object
* Thu 27 Nov 2014 04:31:00 PM JST
    disk = cryptdisk.DecryptDisk(
        '/dev/disk/by-uuid/9016a4ca-f21a-4591-bc24-447ec4989340', 'data')

* Thu 27 Nov 2014 04:31:19 PM JST
from pathlib2 import Path
* Thu 27 Nov 2014 04:31:30 PM JST
directory = Path('/data')
* Thu 27 Nov 2014 04:31:55 PM JST
get_passinput
* Thu 27 Nov 2014 04:32:26 PM JST
from myarchive import inputpass
* Thu 27 Nov 2014 04:32:31 PM JST
myarchive
* Thu 27 Nov 2014 04:32:38 PM JST
inputpass.CmdlineInputPass()
* Thu 27 Nov 2014 04:33:00 PM JST

* Thu 27 Nov 2014 04:33:00 PM JST

* Thu 27 Nov 2014 04:33:00 PM JST
    directory = Path('/data')

* Thu 27 Nov 2014 04:33:03 PM JST
pass
* Thu 27 Nov 2014 04:34:32 PM JST
from sh import mount, umount
* Thu 27 Nov 2014 04:34:46 PM JST
pass
* Thu 27 Nov 2014 04:37:55 PM JST
pass
* Thu 27 Nov 2014 04:44:58 PM JST
        count = Counter(times, exceptclass=PasswordError)
        while not self.disk.isexists():
            count() # raise error if times called
            self.disk.decrypt(self._getpassword())

* Thu 27 Nov 2014 04:45:16 PM JST
from counter import Counter
* Thu 27 Nov 2014 04:45:42 PM JST
class PasswordError(StandardError):
    r"""SUMMARY
    """

* Thu 27 Nov 2014 04:46:17 PM JST
    def _getpassword(self, ):
        r"""SUMMARY

        getpassword()

        @Return:

        @Error:
        """
        self._passinputer.set_prompt(
            'Enter passphrase for {0}: '.format(self.disk.get_disk()))
        return self._passinputer.input()

* Thu 27 Nov 2014 04:46:56 PM JST
slfe.
* Thu 27 Nov 2014 04:56:32 PM JST
basedir
* Thu 27 Nov 2014 04:57:01 PM JST
return 
* Thu 27 Nov 2014 04:59:27 PM JST
self.get_path()
* Thu 27 Nov 2014 05:09:26 PM JST
root = data.MyData()
* Thu 27 Nov 2014 05:10:24 PM JST
self.get_root().get_path().joinpath('archive')
* Thu 27 Nov 2014 05:10:51 PM JST
    def pave(self, ):
        r"""SUMMARY

        pave()

        @Return:

        @Error:
        """
        self.get_root().pave()
        path = self.get_path()
        if not path.exists():
            path.mkdir()

    def __str__(self):
        return str(self.get_path())

* Thu 27 Nov 2014 05:11:04 PM JST

* Thu 27 Nov 2014 05:11:04 PM JST
MyArchive
* Thu 27 Nov 2014 05:11:08 PM JST
archiv
* Thu 27 Nov 2014 07:49:17 PM JST
MyArchive
* Thu 27 Nov 2014 07:51:22 PM JST
myarchive.
* Thu 27 Nov 2014 07:51:25 PM JST
ismounted
* Thu 27 Nov 2014 07:51:36 PM JST

* Thu 27 Nov 2014 07:51:37 PM JST

* Thu 27 Nov 2014 07:51:37 PM JST
import myarchive

* Thu 27 Nov 2014 07:51:47 PM JST

* Thu 27 Nov 2014 07:51:47 PM JST

* Thu 27 Nov 2014 07:51:47 PM JST
# from myarchive import MyArchive

* Thu 27 Nov 2014 07:54:02 PM JST

* Thu 27 Nov 2014 07:54:07 PM JST

* Thu 27 Nov 2014 07:54:07 PM JST
# from myarchive import MyArchive, inputpass

* Thu 27 Nov 2014 07:59:36 PM JST
mybackup/
* Thu 27 Nov 2014 10:55:47 PM JST
tasklist/
* Fri 28 Nov 2014 01:12:45 AM JST
world
* Fri 28 Nov 2014 01:12:53 AM JST
hello
* Fri 28 Nov 2014 01:20:06 AM JST
from Task import Task
from deque import deque

class TaskHolder(deque):
    """Class TaskHolder
    """
    # Attributes:
    
    # Operations
    def run(self):
        """function run
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def append(self, task):
        """function append
        
        task: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def appendleft(self, task):
        """function appendleft
        
        task: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def extend(self, tasks):
        """function extend
        
        tasks: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def extendleft(self, tasks):
        """function extendleft
        
        tasks: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __iter__(self):
        """function __iter__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 28 Nov 2014 01:20:28 AM JST
deque
* Fri 28 Nov 2014 01:22:03 AM JST
self.
* Fri 28 Nov 2014 01:22:16 AM JST

* Fri 28 Nov 2014 01:22:16 AM JST

* Fri 28 Nov 2014 01:22:16 AM JST
        return None # should raise NotImplementedError()

* Fri 28 Nov 2014 01:22:34 AM JST
execute
* Fri 28 Nov 2014 01:23:16 AM JST
        return None # should raise NotImplementedError()

* Fri 28 Nov 2014 01:23:21 AM JST
        if not hasattr(task, 'execute'):
            # TODO: (Atami) [2014/11/28]
            raise AttributeError()

* Fri 28 Nov 2014 01:24:05 AM JST
        if not hasattr(task, 'execute'):
            # TODO: (Atami) [2014/11/28]
            raise AttributeError()

* Fri 28 Nov 2014 01:24:15 AM JST
task
* Fri 28 Nov 2014 01:25:02 AM JST
return None # should raise NotImplementedError()
* Fri 28 Nov 2014 01:25:27 AM JST
return None # should raise NotImplementedError()
* Fri 28 Nov 2014 01:32:48 AM JST

* Fri 28 Nov 2014 01:32:48 AM JST

* Fri 28 Nov 2014 01:32:49 AM JST
        return None # should raise NotImplementedError()

* Fri 28 Nov 2014 01:33:03 AM JST
class TaskHandler(object):
    """Class TaskHandler
    """
    # Attributes:
    def __init__(self, taskholder, index=0):
        r"""

        @Arguments:
        - `taskholder`:
        - `index`:
        """
        self._taskholder = taskholder
        self._index = index

    # Operations
    def next(self):
        """function next

        returns
        """
        self._taskholder[self._index].execute()
        self._index += 1
        if len(self._taskholder) >= self._index:
            raise StopIteration()

    def get_taskholder(self, ):
        r"""SUMMARY

        get_taskholder()

        @Return:

        @Error:
        """
        return self._taskholder

    def set_taskholder(self, taskholder):
        r"""SUMMARY

        set_taskholder(taskholder)

        @Arguments:
        - `taskholder`:

        @Return:

        @Error:
        """
        self._taskholder = taskholder

* Fri 28 Nov 2014 01:35:16 AM JST
None # should raise NotImplementedError()
* Fri 28 Nov 2014 01:37:12 AM JST
None # should raise NotImplementedError()
* Fri 28 Nov 2014 02:29:07 AM JST

* Fri 28 Nov 2014 02:29:07 AM JST

* Fri 28 Nov 2014 02:29:07 AM JST
from . import holder

* Fri 28 Nov 2014 02:29:35 AM JST
Holder
* Fri 28 Nov 2014 02:30:24 AM JST
from collections import deque


class TaskHandler(deque):
    """Class TaskHandler
    """
    _attr = 'execute'

    # Operations
    def run(self):
        """function run

        returns
        """
        for tsk in self:
            tsk.execute()

    def _check_attr(self, obj):
        r"""SUMMARY

        _check_attr()

        @Return:

        @Error:
        """
        if not hasattr(obj, self._attr):
            # TODO: (Atami) [2014/11/28]
            raise AttributeError()

    def append(self, task):
        """function append

        task:

        returns
        """
        self._check_attr(task)
        super(TaskHandler, self).append(task)

    def appendleft(self, task):
        """function appendleft

        task:

        returns
        """
        self._check_attr(task)
        super(TaskHandler, self).appendleft(task)

    def extend(self, tasks):
        """function extend

        tasks:

        returns
        """
        for tsk in tasks:
            self.append(tsk)

    def extendleft(self, tasks):
        """function extendleft

        tasks:

        returns
        """
        for tsk in tasks:
            self.appendleft(tsk)

    def __repr__(self):
        """function __repr__

        returns
        """
        return '{0.__class__.__name__}({})'.format(self, list(self))

* Fri 28 Nov 2014 02:40:39 AM JST

* Fri 28 Nov 2014 02:40:41 AM JST
handler
* Fri 28 Nov 2014 03:16:34 AM JST
from .. import task

* Fri 28 Nov 2014 03:16:44 AM JST
handler
* Fri 28 Nov 2014 03:16:58 AM JST
task
* Fri 28 Nov 2014 03:21:44 AM JST
handler
* Fri 28 Nov 2014 03:23:58 AM JST
pass
* Fri 28 Nov 2014 03:25:14 AM JST
DummyTask(self.receiver, 'test1')
* Fri 28 Nov 2014 03:25:24 AM JST
        
* Fri 28 Nov 2014 03:25:29 AM JST
self
* Fri 28 Nov 2014 03:25:31 AM JST
self
* Fri 28 Nov 2014 03:25:40 AM JST

* Fri 28 Nov 2014 03:27:29 AM JST
        
* Fri 28 Nov 2014 03:27:32 AM JST

* Fri 28 Nov 2014 03:28:02 AM JST
self.assertEqual(self.task1, self.handler[0])
* Fri 28 Nov 2014 03:28:17 AM JST
        self.handler.append(self.task2)
        self.assertEqual(self.task2, self.handler[1])

* Fri 28 Nov 2014 03:31:12 AM JST
self.
* Fri 28 Nov 2014 03:32:20 AM JST
expects = [self.task1, self.task2, self.task3]
* Fri 28 Nov 2014 03:40:10 AM JST
TaskHandler([task1, task2, task3])
* Fri 28 Nov 2014 03:40:18 AM JST
TaskHandler([test1, test2, test3])
* Fri 28 Nov 2014 03:42:29 AM JST
TaskHandler([task1, task2, task3])
* Fri 28 Nov 2014 03:44:56 AM JST
'TaskHandler([task1, task2, task3])'
* Fri 28 Nov 2014 03:45:04 AM JST
'TaskHandler([test1, test2, test3])'
* Fri 28 Nov 2014 03:45:11 AM JST
'TaskHandler([task1, task2, task3])'
* Fri 28 Nov 2014 03:45:16 AM JST
'TaskHandler([test1, test2, test3])'
* Fri 28 Nov 2014 03:45:47 AM JST
task
* Fri 28 Nov 2014 03:45:51 AM JST
task
* Fri 28 Nov 2014 03:47:02 AM JST
self.handler
* Fri 28 Nov 2014 03:47:09 AM JST
self.handler
* Fri 28 Nov 2014 03:49:10 AM JST
list((
* Fri 28 Nov 2014 03:51:43 AM JST
_check_attr()
* Fri 28 Nov 2014 03:51:48 AM JST
hello
* Fri 28 Nov 2014 03:51:53 AM JST
        with self.assertRaises(AttributeError):
            self.handler.append('dummy')

* Fri 28 Nov 2014 03:52:01 AM JST
        with self.assertRaises(AttributeError):
            self.handler.appendleft('dummy')

* Fri 28 Nov 2014 03:52:05 AM JST
appendleft
* Fri 28 Nov 2014 03:52:08 AM JST
'dummy'
* Fri 28 Nov 2014 03:52:13 AM JST
        with self.assertRaises(AttributeError):
            self.handler.extend(['dummy'])

* Fri 28 Nov 2014 02:50:37 PM JST
import cPickle
* Fri 28 Nov 2014 02:52:07 PM JST
class TaskPickle:
    """Class TaskPickle
    """
    # Attributes:
    __tasks = None  # () 
    __index = None  # () 
    
    # Operations
    def load(self, filepath):
        """function load
        
        filepath: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def resume(self, filepath):
        """function resume
        
        filepath: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start(self, filepath):
        """function start
        
        filepath: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dump(self, filepath):
        """function dump
        
        filepath: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def finalize(self, filepath):
        """function finalize
        
        filepath: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def execute(self):
        """function execute
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 28 Nov 2014 02:53:18 PM JST
None # should raise NotImplementedError()
* Fri 28 Nov 2014 02:53:43 PM JST
self, 
* Fri 28 Nov 2014 02:53:59 PM JST
self, 
* Fri 28 Nov 2014 02:54:20 PM JST
return None # should raise NotImplementedError()
* Fri 28 Nov 2014 02:55:05 PM JST
_filepa
* Fri 28 Nov 2014 02:55:05 PM JST
self._filepa
* Fri 28 Nov 2014 02:55:10 PM JST
filepath
* Fri 28 Nov 2014 02:55:52 PM JST

* Fri 28 Nov 2014 02:55:52 PM JST

* Fri 28 Nov 2014 02:55:53 PM JST
        return None # should raise NotImplementedError()

* Fri 28 Nov 2014 02:58:41 PM JST

* Fri 28 Nov 2014 02:58:41 PM JST

* Fri 28 Nov 2014 02:58:41 PM JST
        path = Path(filepath)

* Fri 28 Nov 2014 02:58:56 PM JST

* Fri 28 Nov 2014 02:58:56 PM JST

* Fri 28 Nov 2014 02:58:56 PM JST
            path.

* Fri 28 Nov 2014 02:59:11 PM JST

* Fri 28 Nov 2014 02:59:11 PM JST

* Fri 28 Nov 2014 02:59:12 PM JST
        return None # should raise NotImplementedError()

* Fri 28 Nov 2014 02:59:40 PM JST
return None # should raise NotImplementedError()
* Fri 28 Nov 2014 03:00:41 PM JST
return None # should raise NotImplementedError()
* Fri 28 Nov 2014 03:07:41 PM JST

* Fri 28 Nov 2014 03:07:41 PM JST

* Fri 28 Nov 2014 03:07:42 PM JST
        self.finalize(filepath)

* Fri 28 Nov 2014 03:15:03 PM JST
task
* Fri 28 Nov 2014 03:15:05 PM JST
pickle
* Fri 28 Nov 2014 03:15:13 PM JST
taskpickle
* Fri 28 Nov 2014 03:55:16 PM JST
u + 'tmp'
* Fri 28 Nov 2014 03:58:29 PM JST

* Fri 28 Nov 2014 03:58:29 PM JST

* Fri 28 Nov 2014 03:58:29 PM JST
from pathlib2 import Path

* Fri 28 Nov 2014 04:00:47 PM JST
task/
* Fri 28 Nov 2014 04:04:33 PM JST
path
* Fri 28 Nov 2014 04:04:53 PM JST

* Fri 28 Nov 2014 04:04:53 PM JST

* Fri 28 Nov 2014 04:04:53 PM JST
from pathlib2 import Path

* Fri 28 Nov 2014 04:05:01 PM JST
list(
* Fri 28 Nov 2014 04:05:06 PM JST
iter
* Fri 28 Nov 2014 04:07:49 PM JST
Path
* Fri 28 Nov 2014 04:08:54 PM JST
pathlib2
* Fri 28 Nov 2014 04:09:33 PM JST
pathlib2
* Fri 28 Nov 2014 04:11:14 PM JST
pathlib2
* Fri 28 Nov 2014 04:11:33 PM JST
pathlib2
* Fri 28 Nov 2014 04:12:20 PM JST
apth 
* Fri 28 Nov 2014 04:12:35 PM JST
stem
* Fri 28 Nov 2014 04:14:26 PM JST
pathlib2
* Fri 28 Nov 2014 04:15:04 PM JST
namebase
* Fri 28 Nov 2014 04:16:14 PM JST
isfile()
* Fri 28 Nov 2014 04:18:54 PM JST

* Fri 28 Nov 2014 04:18:54 PM JST

* Fri 28 Nov 2014 04:18:54 PM JST
from getpass import getpass

* Fri 28 Nov 2014 04:22:01 PM JST

* Fri 28 Nov 2014 04:22:02 PM JST

* Fri 28 Nov 2014 04:22:02 PM JST
import os

* Fri 28 Nov 2014 04:24:24 PM JST
filepath
* Fri 28 Nov 2014 04:44:01 PM JST
pass
* Fri 28 Nov 2014 04:46:22 PM JST
gettempdir()
* Fri 28 Nov 2014 04:53:20 PM JST
parent
* Fri 28 Nov 2014 04:53:55 PM JST
.joinpath('tes.taskpickle')
* Fri 28 Nov 2014 04:55:11 PM JST
.joinpath('testask.pickle')
* Fri 28 Nov 2014 04:55:34 PM JST
Path(__file__).dirname()
* Fri 28 Nov 2014 04:56:24 PM JST
pickle'
* Fri 28 Nov 2014 04:56:25 PM JST
testask
* Fri 28 Nov 2014 04:58:00 PM JST
No value passed for parameter 'first' in function call
* Fri 28 Nov 2014 04:58:01 PM JST
No value passed for parameter 'first' in function call (E1120)
* Fri 28 Nov 2014 04:58:41 PM JST
joinpath?
* Fri 28 Nov 2014 05:03:13 PM JST
heloo')
* Fri 28 Nov 2014 05:03:14 PM JST
func=
* Fri 28 Nov 2014 05:03:15 PM JST
joinpath(func=
* Fri 28 Nov 2014 05:05:25 PM JST
taskpickle
* Fri 28 Nov 2014 05:07:56 PM JST
E1120
* Fri 28 Nov 2014 05:08:11 PM JST
joinpath
* Fri 28 Nov 2014 05:10:12 PM JST
 # for skip error pylint E1120
* Fri 28 Nov 2014 05:10:59 PM JST
        cls.task1 = DummyTask(cls.receiver, 'test1')
        cls.task2 = DummyTask(cls.receiver, 'test2')
        cls.task3 = DummyTask(cls.receiver, 'test3')

* Fri 28 Nov 2014 05:11:03 PM JST
test
* Fri 28 Nov 2014 05:11:06 PM JST
test
* Fri 28 Nov 2014 05:11:10 PM JST
test
* Fri 28 Nov 2014 05:12:05 PM JST
self._receiver.receive(self._obj)
* Fri 28 Nov 2014 05:15:02 PM JST
tasks
* Fri 28 Nov 2014 05:18:50 PM JST
        cls.receiver = DummyReceiver()
        cls.task1 = DummyTask(cls.receiver, 'task1')
        cls.task2 = DummyTask(cls.receiver, 'task2')
        cls.task3 = DummyTask(cls.receiver, 'task3')
        cls.exiter = DummyTaskExiter(cls.receiver, 'exiter')
        cls.handler = TaskHandler([cls.task1, cls.task2, cls.exiter, cls.task3])

* Fri 28 Nov 2014 05:18:57 PM JST
cls
* Fri 28 Nov 2014 05:18:57 PM JST
cls
* Fri 28 Nov 2014 05:18:58 PM JST
cls
* Fri 28 Nov 2014 05:18:58 PM JST
cls
* Fri 28 Nov 2014 05:18:58 PM JST
cls
* Fri 28 Nov 2014 05:18:58 PM JST
cls
* Fri 28 Nov 2014 05:19:00 PM JST
slef
* Fri 28 Nov 2014 05:19:00 PM JST
slef
* Fri 28 Nov 2014 05:19:00 PM JST
slef
* Fri 28 Nov 2014 05:19:00 PM JST
slef
* Fri 28 Nov 2014 05:19:00 PM JST
slef
* Fri 28 Nov 2014 05:19:00 PM JST
slef
* Fri 28 Nov 2014 05:19:07 PM JST
cls
* Fri 28 Nov 2014 05:19:07 PM JST
cls
* Fri 28 Nov 2014 05:19:07 PM JST
cls
* Fri 28 Nov 2014 05:19:09 PM JST
slef
* Fri 28 Nov 2014 05:19:09 PM JST
slef
* Fri 28 Nov 2014 05:19:09 PM JST
slef
* Fri 28 Nov 2014 05:19:13 PM JST
cls
* Fri 28 Nov 2014 05:19:16 PM JST
cls
* Fri 28 Nov 2014 05:19:19 PM JST
cls.
* Fri 28 Nov 2014 05:19:20 PM JST
cls
* Fri 28 Nov 2014 05:19:23 PM JST
cls
* Fri 28 Nov 2014 05:19:25 PM JST
cls
* Fri 28 Nov 2014 05:20:32 PM JST
msg=
* Fri 28 Nov 2014 05:21:19 PM JST
pass
* Fri 28 Nov 2014 05:21:30 PM JST
cls
* Fri 28 Nov 2014 05:26:12 PM JST
self.taskpickle.dump(str(self.savefile))
* Fri 28 Nov 2014 05:28:52 PM JST
self.taskpickle._index
* Fri 28 Nov 2014 05:28:58 PM JST
tpickle._index
* Fri 28 Nov 2014 05:29:01 PM JST

* Fri 28 Nov 2014 05:29:01 PM JST

* Fri 28 Nov 2014 05:29:01 PM JST
        got = 

* Fri 28 Nov 2014 05:29:02 PM JST

* Fri 28 Nov 2014 05:29:02 PM JST

* Fri 28 Nov 2014 05:29:02 PM JST
        expects = 

* Fri 28 Nov 2014 05:29:16 PM JST
ls
* Fri 28 Nov 2014 05:29:54 PM JST
pass
* Fri 28 Nov 2014 05:30:02 PM JST
        if self.savefile.exists():
            self.savefile.remove()

* Fri 28 Nov 2014 05:30:08 PM JST
self
* Fri 28 Nov 2014 05:30:10 PM JST
self
* Fri 28 Nov 2014 05:34:05 PM JST
exiter, 
* Fri 28 Nov 2014 05:34:06 PM JST
self.exiter, 
* Fri 28 Nov 2014 05:37:42 PM JST
google').
* Fri 28 Nov 2014 05:37:43 PM JST
append('google').
* Fri 28 Nov 2014 05:38:25 PM JST
            
* Fri 28 Nov 2014 05:38:28 PM JST
[self.task1, self.task2, self.task3]
* Fri 28 Nov 2014 05:38:38 PM JST
self.
* Fri 28 Nov 2014 05:38:55 PM JST
self.
* Fri 28 Nov 2014 05:38:56 PM JST
self.
* Fri 28 Nov 2014 05:38:58 PM JST
self.
* Fri 28 Nov 2014 05:39:00 PM JST
self.
* Fri 28 Nov 2014 05:39:16 PM JST
DummyTaskExiter(self.receiver, 'exiter')
* Fri 28 Nov 2014 05:39:30 PM JST

* Fri 28 Nov 2014 05:39:30 PM JST

* Fri 28 Nov 2014 05:39:30 PM JST
        self.exiter = DummyTaskExiter(self.receiver, 'exiter')

* Fri 28 Nov 2014 06:15:44 PM JST
iter
* Fri 28 Nov 2014 06:16:15 PM JST
suffix
* Fri 28 Nov 2014 06:16:18 PM JST
suffix
* Fri 28 Nov 2014 06:16:21 PM JST
suffix
* Fri 28 Nov 2014 06:18:27 PM JST
unicode(
* Fri 28 Nov 2014 06:20:03 PM JST
str
* Fri 28 Nov 2014 06:20:08 PM JST
str
* Fri 28 Nov 2014 06:20:15 PM JST
str
* Fri 28 Nov 2014 09:47:01 PM JST
menu.MenuManager().get_today()
* Fri 28 Nov 2014 09:47:08 PM JST
import menu
* Fri 28 Nov 2014 09:47:15 PM JST
menu.MenuManager().get_today()
* Fri 28 Nov 2014 09:47:24 PM JST
.iter_recipes()
* Fri 28 Nov 2014 09:47:45 PM JST
/list 
* Fri 28 Nov 2014 09:50:00 PM JST
' '.join([unicode(list(menu.MenuManager().get_today().iter_recipes())[0])])
* Fri 28 Nov 2014 09:52:19 PM JST
        if not isinstance(text, (str, unicode)):
            raise ValueError('text must be String type.')

* Fri 28 Nov 2014 09:54:11 PM JST
cmdline
* Fri 28 Nov 2014 09:54:33 PM JST

* Fri 28 Nov 2014 09:54:34 PM JST

* Fri 28 Nov 2014 09:54:34 PM JST
    print(cmdline)

* Fri 28 Nov 2014 09:55:30 PM JST
cmdline.encode('utf-8')
* Fri 28 Nov 2014 10:00:48 PM JST
self.get_today_path()
* Fri 28 Nov 2014 10:01:06 PM JST
self.get_today_path()
* Fri 28 Nov 2014 10:03:35 PM JST
get_today_path()
* Fri 28 Nov 2014 10:08:30 PM JST
self.get_today_path()
* Fri 28 Nov 2014 10:08:33 PM JST
get_today_path().
* Fri 28 Nov 2014 10:08:34 PM JST
self.get_today_path().
* Fri 28 Nov 2014 10:08:53 PM JST

* Fri 28 Nov 2014 10:08:53 PM JST

* Fri 28 Nov 2014 10:08:53 PM JST
            todaylink.symlink(unicode(self.get_today_path()))

* Fri 28 Nov 2014 10:08:57 PM JST

* Fri 28 Nov 2014 10:08:57 PM JST

* Fri 28 Nov 2014 10:08:58 PM JST
            print(self.get_today_path())

* Fri 28 Nov 2014 10:09:18 PM JST
Path('/tmp/tes').symlink(
* Fri 28 Nov 2014 10:09:31 PM JST
unicode(
* Fri 28 Nov 2014 10:11:18 PM JST
get_todaylinkpath()
* Fri 28 Nov 2014 10:11:48 PM JST

* Fri 28 Nov 2014 10:11:48 PM JST

* Fri 28 Nov 2014 10:11:48 PM JST
        todaylink.symlink(unicode(newlink))

* Fri 28 Nov 2014 10:12:08 PM JST
self.get_weekpath()
* Fri 28 Nov 2014 10:12:21 PM JST

* Fri 28 Nov 2014 10:12:21 PM JST

* Fri 28 Nov 2014 10:12:21 PM JST
            weeklink.symlink(self.get_weekpath())

* Fri 28 Nov 2014 10:12:43 PM JST

* Fri 28 Nov 2014 10:12:43 PM JST

* Fri 28 Nov 2014 10:12:43 PM JST
        weeklink.symlink(str(newlink))

* Fri 28 Nov 2014 10:37:34 PM JST
start
* Fri 28 Nov 2014 10:41:51 PM JST

* Fri 28 Nov 2014 10:41:51 PM JST

* Fri 28 Nov 2014 10:41:51 PM JST
        sys.exit(-1)

* Fri 28 Nov 2014 10:50:38 PM JST

* Fri 28 Nov 2014 10:50:38 PM JST

* Fri 28 Nov 2014 10:50:38 PM JST
        self._check_attr(task)

* Fri 28 Nov 2014 10:51:19 PM JST
rotate
* Fri 28 Nov 2014 10:51:56 PM JST
DummyTaskExiter(self.receiver, 'exiter')
* Fri 28 Nov 2014 10:52:01 PM JST

* Fri 28 Nov 2014 10:52:02 PM JST

* Fri 28 Nov 2014 10:52:02 PM JST
        self.handler.append(DummyTaskExiter(self.receiver, 'exiter'))

* Fri 28 Nov 2014 10:52:06 PM JST
# expect [task1, task2, exiter, task3]
* Fri 28 Nov 2014 10:52:31 PM JST
['task1', 'task2', 'exiter']
* Fri 28 Nov 2014 10:56:04 PM JST

* Fri 28 Nov 2014 10:56:04 PM JST

* Fri 28 Nov 2014 10:56:04 PM JST
        print(self.handler)

* Fri 28 Nov 2014 10:58:35 PM JST
self.
* Fri 28 Nov 2014 10:58:39 PM JST
Task
* Fri 28 Nov 2014 11:00:30 PM JST

* Fri 28 Nov 2014 11:00:30 PM JST

* Fri 28 Nov 2014 11:00:30 PM JST
        del self.handler[2]

* Fri 28 Nov 2014 11:16:39 PM JST
~/.pylib/task/
* Fri 28 Nov 2014 11:28:28 PM JST
or 
* Fri 28 Nov 2014 11:28:29 PM JST
index or 
* Fri 28 Nov 2014 11:30:30 PM JST
        return 
* Fri 28 Nov 2014 11:37:12 PM JST

* Fri 28 Nov 2014 11:37:12 PM JST

* Fri 28 Nov 2014 11:37:12 PM JST
        self.handler.clear()

* Fri 28 Nov 2014 11:38:12 PM JST
open('/tmp/tes.pickle','rb')
* Fri 28 Nov 2014 11:38:25 PM JST
open(
* Fri 28 Nov 2014 11:43:29 PM JST
deque(), 
* Fri 28 Nov 2014 11:43:35 PM JST
dump
* Fri 28 Nov 2014 11:45:12 PM JST
cPickle.HIGHEST_PROTOCOL
* Fri 28 Nov 2014 11:52:20 PM JST
sel
* Fri 28 Nov 2014 11:52:32 PM JST

* Fri 28 Nov 2014 11:52:37 PM JST
self.
* Fri 28 Nov 2014 11:52:53 PM JST

* Fri 28 Nov 2014 11:53:00 PM JST
self.
* Fri 28 Nov 2014 11:55:25 PM JST

* Fri 28 Nov 2014 11:55:25 PM JST

* Fri 28 Nov 2014 11:55:25 PM JST
        self.assertEqual(tskpickle._index, tpickle._index)

* Fri 28 Nov 2014 11:57:41 PM JST

* Fri 28 Nov 2014 11:57:41 PM JST

* Fri 28 Nov 2014 11:57:41 PM JST
        # return cPickle.load(open(filepath, 'rb'))

* Sat 29 Nov 2014 12:09:31 AM JST
taskHan
* Sat 29 Nov 2014 12:12:28 AM JST
super(TaskHandler, self)
* Sat 29 Nov 2014 12:13:14 AM JST
from task import TaskHandler
t=TaskHandler()

* Sat 29 Nov 2014 12:13:18 AM JST
class Tes(object):
        def execute():
                pass

* Sat 29 Nov 2014 12:13:30 AM JST
t.append(Tes())

* Sat 29 Nov 2014 12:13:40 AM JST
import cPickle
cPickle.dump(t, open('/tmp/tes3.pickle','wb'))

* Sat 29 Nov 2014 12:13:44 AM JST
cPickle.load(open('/tmp/tes3.pickle', 'rb'))
* Sat 29 Nov 2014 12:13:54 AM JST
from task import TaskHandler
t=TaskHandler()

* Sat 29 Nov 2014 12:13:58 AM JST
class Tes(object):
    def execute():
        pass

* Sat 29 Nov 2014 12:14:03 AM JST
t.append(Tes())
import cPickle
cPickle.dump(t, open('/tmp/tes3.pickle','wb'))

* Sat 29 Nov 2014 12:14:07 AM JST
cPickle.load(open('/tmp/tes3.pickle', 'rb'))
* Sat 29 Nov 2014 12:15:39 AM JST
from task import TaskHandler
t=TaskHandler()
class Tes(object):
    def execute():
        pass

* Sat 29 Nov 2014 12:15:58 AM JST
t.append(Tes())
import cPickle
cPickle.dump(t, open('/tmp/tes3.pickle','wb'))

* Sat 29 Nov 2014 12:16:23 AM JST
from task import TaskHandler
t=TaskHandler()
class Tes(object):
    def execute():
        pass
t.append(Tes())

* Sat 29 Nov 2014 12:16:36 AM JST
class Tes(object):
    def execute():
        pass

* Sat 29 Nov 2014 12:16:39 AM JST
t.append(Tes())
* Sat 29 Nov 2014 12:16:42 AM JST
import cPickle
* Sat 29 Nov 2014 12:16:44 AM JST
import cPickle
cPickle.dump(t, open('/tmp/tes3.pickle','wb'))

* Sat 29 Nov 2014 12:16:47 AM JST
cPickle.load(open('/tmp/tes3.pickle', 'rb'))
* Sat 29 Nov 2014 12:19:07 AM JST
_
* Sat 29 Nov 2014 12:19:07 AM JST
self._
* Sat 29 Nov 2014 12:21:00 AM JST
one
* Sat 29 Nov 2014 12:21:00 AM JST
self.one
* Sat 29 Nov 2014 12:21:31 AM JST

* Sat 29 Nov 2014 12:21:31 AM JST

* Sat 29 Nov 2014 12:21:31 AM JST
            self.onetime = True

* Sat 29 Nov 2014 12:21:35 AM JST

* Sat 29 Nov 2014 12:21:35 AM JST

* Sat 29 Nov 2014 12:21:35 AM JST
    onetime = False

* Sat 29 Nov 2014 12:21:51 AM JST
False
* Sat 29 Nov 2014 12:23:51 AM JST

* Sat 29 Nov 2014 12:23:51 AM JST

* Sat 29 Nov 2014 12:23:51 AM JST
        self.onetime = True

* Sat 29 Nov 2014 12:23:57 AM JST
            
* Sat 29 Nov 2014 12:24:03 AM JST

* Sat 29 Nov 2014 12:24:03 AM JST

* Sat 29 Nov 2014 12:24:03 AM JST
        self.onetime = False # for exiter

* Sat 29 Nov 2014 12:24:06 AM JST

* Sat 29 Nov 2014 12:24:06 AM JST

* Sat 29 Nov 2014 12:24:06 AM JST
        self.onetime = onetime

* Sat 29 Nov 2014 12:24:09 AM JST
onetime
* Sat 29 Nov 2014 12:24:13 AM JST

* Sat 29 Nov 2014 12:24:14 AM JST

* Sat 29 Nov 2014 12:24:14 AM JST
        if self.onetime is False:

* Sat 29 Nov 2014 12:24:23 AM JST
        with self.assertRaises(StandardError):
            self.tskpickle.start(str(self.savefile))

* Sat 29 Nov 2014 12:24:40 AM JST

* Sat 29 Nov 2014 12:24:40 AM JST

* Sat 29 Nov 2014 12:24:40 AM JST
            self.tskpickle.start(str(self.savefile))

* Sat 29 Nov 2014 12:25:45 AM JST
expects = ['task1', 'task2', 'exiter']
* Sat 29 Nov 2014 12:25:50 AM JST
exiter
* Sat 29 Nov 2014 12:26:11 AM JST
self.
* Sat 29 Nov 2014 12:26:32 AM JST
self.assertListEqual(expects, self.receiver.getresult())
* Sat 29 Nov 2014 12:29:36 AM JST
def safetask(tasks, filepath):
    r"""SUMMARY

    safetask(tasks, filepath)

    @Arguments:
    - `tasks`:
    - `filepath`:

    @Return:

    @Error:
    """
    fpath = Path(filepath)
    if fpath.exists():
        TaskPickle.resume(str(fpath))
    else:
        TaskPickle(tasks).start(str(fpath))
    if fpath.exists():
        fpath.remove()

* Sat 29 Nov 2014 01:01:09 AM JST
        cls.directory = str(Path(__file__).dirname())
        cls.savefile = Path(cls.directory).joinpath('task.pickle')

* Sat 29 Nov 2014 01:01:16 AM JST
task
* Sat 29 Nov 2014 01:01:43 AM JST
        self.receiver = DummyReceiver()
        self.task1 = DummyTask(self.receiver, 'task1')
        self.task2 = DummyTask(self.receiver, 'task2')
        self.task3 = DummyTask(self.receiver, 'task3')
        self.handler = TaskHandler([self.task1, self.task2, self.task3])

* Sat 29 Nov 2014 01:04:14 AM JST
expects = ['task1', 'task2', 'exiter']
* Sat 29 Nov 2014 01:04:25 AM JST
self.assertListEqual(expects, self.receiver.getresult())
* Sat 29 Nov 2014 01:10:31 AM JST

* Sat 29 Nov 2014 01:10:31 AM JST

* Sat 29 Nov 2014 01:10:32 AM JST
        expects = ['task1', 'task2', 'exiter']

* Sat 29 Nov 2014 01:11:49 AM JST

* Sat 29 Nov 2014 01:11:49 AM JST

* Sat 29 Nov 2014 01:11:49 AM JST
        # expects = ['task1', 'task2', 'exiter', 'exiter']

* Sat 29 Nov 2014 01:11:49 AM JST
        # expects = ['task1', 'task2', 'exiter', 'exiter']

* Sat 29 Nov 2014 01:11:49 AM JST
        # expects = ['task1', 'task2', 'exiter', 'exiter']
        # self.assertListEqual(expects, self.receiver.getresult())

* Sat 29 Nov 2014 01:14:22 AM JST
self.handler.insert(2, DummyTaskExiter(self.receiver, 'exiter'))
* Sat 29 Nov 2014 01:15:48 AM JST
        expects = ['task1', 'task2', 'exiter']
        self.assertListEqual(expects, self.receiver.getresult())

* Sat 29 Nov 2014 01:21:47 AM JST
        if self.savefile.exists():
            self.savefile.remove()

* Sat 29 Nov 2014 01:24:23 AM JST
iterable
* Sat 29 Nov 2014 01:24:39 AM JST
self.receiver
* Sat 29 Nov 2014 01:30:32 AM JST
        if self.savefile.exists():
            self.savefile.remove()

* Sat 29 Nov 2014 01:32:47 AM JST

* Sat 29 Nov 2014 01:32:47 AM JST

* Sat 29 Nov 2014 01:32:47 AM JST
        self.savefile.touch()

* Sat 29 Nov 2014 01:33:07 AM JST
['task1', 'task2', 'exiter']
* Sat 29 Nov 2014 01:33:09 AM JST
exiter
* Sat 29 Nov 2014 01:33:18 AM JST
self.assertListEqual(expects, self.receiver.getresult())
* Sat 29 Nov 2014 01:33:25 AM JST
safetask
* Sat 29 Nov 2014 01:33:28 AM JST
safetask(self.handler, str(self.savefile))
* Sat 29 Nov 2014 01:41:16 AM JST
handler
* Sat 29 Nov 2014 01:42:14 AM JST

* Sat 29 Nov 2014 01:42:15 AM JST
TaskPickle
* Sat 29 Nov 2014 01:42:19 AM JST
taskpickle
* Sat 29 Nov 2014 01:42:32 AM JST
TaskPickle
* Sat 29 Nov 2014 01:44:13 AM JST
EX_OK
* Sat 29 Nov 2014 01:55:57 AM JST
from tasklist import TaskList
* Sat 29 Nov 2014 01:56:01 AM JST

* Sat 29 Nov 2014 01:56:01 AM JST

* Sat 29 Nov 2014 01:56:01 AM JST
from tasklist import TaskList

* Sat 29 Nov 2014 01:57:20 AM JST
    LOG.info('* Do prepare')
    LOG.info('* Close all thunar.')
    thunar.close_all()

* Sat 29 Nov 2014 02:16:48 AM JST
from t1.dateutil import now_weekday
* Sat 29 Nov 2014 02:16:56 AM JST
now_weekday
* Sat 29 Nov 2014 02:17:12 AM JST
type(
* Sat 29 Nov 2014 02:37:39 AM JST
    LOG.info('* Do rss')

    # run sleipnir
    LOG.debug('Run Sleipnir')
    sleipnir.run()
    sleipnir.wait_sleipnir_window()
    sleipnir.move_sleipnir()
    sleipnir.click_sleipnir_refresh()

* Sat 29 Nov 2014 02:39:48 AM JST
def weather2():
    """SUMMARY

    @Return:
    """
    LOG.info('* Do webpage')

    month = NOW.month
    season = (month in (7, 8, 9, 10) and 'Summer' or
              month in (2, 3, 4) and 'Winter' or None)

    # seasonal open weather page
    if season:
        LOG.debug('{} weather page open.'.format(season))
        chrome.open_folder(season)
        LOG.debug('sleep {} sec for open with exists window'.format(3))
        sleep(5) # wait for open exists window

    # mapping weather window
    LOG.info('Mapping weather window')
    weather_map()



* Sat 29 Nov 2014 02:40:05 AM JST
    while 1:
        sleep(3)
        chromes = get_chrome_windows()
        if not chromes.filter_name(Moon.name):
            break

* Sat 29 Nov 2014 02:40:49 AM JST
WeatherMa
* Sat 29 Nov 2014 02:41:29 AM JST
    while 1:
        sleep(3)
        chromes = get_chrome_windows()
        if not chromes.filter_name(Moon.name):
            break

* Sat 29 Nov 2014 02:42:58 AM JST
Moon
* Sat 29 Nov 2014 02:50:45 AM JST
maxlen = 
* Sat 29 Nov 2014 02:50:50 AM JST
maxlen
* Sat 29 Nov 2014 02:52:05 AM JST
from t1.listutil.limitlist import LimitList
* Sat 29 Nov 2014 02:52:52 AM JST
lis
* Sat 29 Nov 2014 02:54:51 AM JST

* Sat 29 Nov 2014 02:54:56 AM JST
(0, 0, 100, 100),
* Sat 29 Nov 2014 02:54:58 AM JST
              
* Sat 29 Nov 2014 02:54:59 AM JST
              
* Sat 29 Nov 2014 02:55:00 AM JST
              
* Sat 29 Nov 2014 02:55:01 AM JST
              
* Sat 29 Nov 2014 02:56:59 AM JST
[(0, 0, 100, 100),
              (0, 0, 200, 100),
              (0, 0, 300, 100),
              (0, 0, 400, 100),
              (0, 0, 500, 100),
              (0, 0, 600, 100),
              ]
* Sat 29 Nov 2014 02:57:29 AM JST
geolis
* Sat 29 Nov 2014 03:09:16 AM JST
(0, 0, 100, 100)
* Sat 29 Nov 2014 03:09:33 AM JST
(0, 0, 100, 100)
* Sat 29 Nov 2014 03:09:44 AM JST
0, 0, 100, 100
* Sat 29 Nov 2014 03:09:57 AM JST
(0, 0, 100, 100)
* Sat 29 Nov 2014 03:09:59 AM JST
                 
* Sat 29 Nov 2014 03:10:09 AM JST
                 
* Sat 29 Nov 2014 03:35:57 AM JST
time.strftime('%T')
* Sat 29 Nov 2014 03:36:57 AM JST
self
* Sat 29 Nov 2014 03:38:24 AM JST
    LOG.info('* Do webpage')

    month = NOW.month
    season = (month in (7, 8, 9, 10) and 'Summer' or
              month in (2, 3, 4) and 'Winter' or None)

    # seasonal open weather page
    if season:
        LOG.debug('{} weather page open.'.format(season))
        chrome.open_folder(season)
        LOG.debug('sleep {} sec for open with exists window'.format(3))
        sleep(5) # wait for open exists window

    # mapping weather window
    LOG.info('Mapping weather window')
    weather_map()

* Sat 29 Nov 2014 03:40:17 AM JST
datetime.now()
* Sat 29 Nov 2014 03:41:17 AM JST
fo
* Sat 29 Nov 2014 03:41:30 AM JST
datetime.now()
* Sat 29 Nov 2014 03:41:43 AM JST
(month in (7, 8, 9, 10) and 'Summer' or
                  month in (2, 3, 4) and 'Winter' or None)
* Sat 29 Nov 2014 03:41:50 AM JST
month
* Sat 29 Nov 2014 03:42:00 AM JST
datetime.now().month
* Sat 29 Nov 2014 03:42:55 AM JST
(month in (7, 8, 9, 10) and 'Summer' or
                  month in (2, 3, 4) and 'Winter' or None)
* Sat 29 Nov 2014 03:43:01 AM JST
                
* Sat 29 Nov 2014 03:46:51 AM JST
    chrome_win = wm.getwin(psname='chrome')
    if not chrome_win:
        chrome.run(url=[], options=CHROME_OPTS)
    while not chrome_win:
        chrome_win = wm.getwin(psname='chrome')
    chrome_win.move(x=99, y=40, height=938, width=1112)

* Sat 29 Nov 2014 03:51:31 AM JST
    pnir = wm.getwin(confirm=_sleipnir_confirm, psname='Sleipnir.exe')
    if pnir:
        LOG.debug('Sleipnir set above.')
        pnir.above()
        pnir.activate()

    beforeids = list(chrome.iter_chromewinids())
    LOG.debug('webpage: before window ids: {}'.format(beforeids))

    urls = list(chrome.ChromeBMParse('Daily'))
    if not (WEEKDAY.is_saturday() or WEEKDAY.is_sunday() or
            holiday_japan.istoday()):
        urls += list(chrome.ChromeBMParse('Market'))
    chrome_opts = CHROME_OPTS + ['--new-window']
    chrome.run(urls, options=chrome_opts)
    if pnir:
        pnir.activate()
        sleep(20)

    afterids = list(chrome.iter_chromewinids())
    waitids = list(set(afterids) - set(beforeids))
    if pnir:
        LOG.debug('Sleipnir reset above.')
        pnir.reset_above()
        pnir.activate()

    ## wait close sleipnir
    LOG.debug('Waiting close Sleipnir.exe')
    waitclose(sleipnir.BIN, interval=5)

    # winwait = wm.WinWait()
    # while waitids:
    #     if winwait.close(id=waitids[0]):
    #         waitids.pop(0)
    foreign_news()
    nation()

* Sat 29 Nov 2014 03:54:20 AM JST
        ## wait close sleipnir
        LOG.debug('Waiting close Sleipnir.exe')
        waitclose(sleipnir.BIN, interval=5)

* Sat 29 Nov 2014 03:55:49 AM JST
foreign_news()
* Sat 29 Nov 2014 03:56:40 AM JST
nation()
* Sat 29 Nov 2014 04:00:25 AM JST
    if WEEKDAY.is_thursday():
        return
    winwait = wm.WinWait()
    beforeids = list(chrome.iter_chromewinids())
    chrome_opts = CHROME_OPTS + ['--new-window']
    chrome.open_folder('Foreign News', options=chrome_opts, reverse=True)
    afterids = list(chrome.iter_chromewinids())
    waitids = list(set(afterids) - set(beforeids))
    while waitids:
        if winwait.close(id=waitids[0]):
            waitids.pop(0)

* Sat 29 Nov 2014 04:02:21 AM JST
    if WEEKDAY.is_thursday():
        return
    winwait = wm.WinWait()
    beforeids = list(chrome.iter_chromewinids())
    chrome_opts = CHROME_OPTS + ['--new-window']
    chrome.open_folder('Foreign News', options=chrome_opts, reverse=True)
    afterids = list(chrome.iter_chromewinids())
    waitids = list(set(afterids) - set(beforeids))
    while waitids:
        if winwait.close(id=waitids[0]):
            waitids.pop(0)

* Sat 29 Nov 2014 04:03:03 AM JST
now_weekday()
* Sat 29 Nov 2014 04:04:03 AM JST
WEEKDAY
* Sat 29 Nov 2014 04:06:10 AM JST
weekday = now_weekday()
* Sat 29 Nov 2014 04:06:23 AM JST
    if not WEEKDAY.is_saturday():
        return
    if not yesnodialog('Prompt', 'Please Click OK will next: '):
        sys.exit(1)
    chrome_opts = CHROME_OPTS + ['--new-window']
    chrome.open_folder('Nation', options=chrome_opts)

* Sat 29 Nov 2014 04:09:02 AM JST
None
* Sat 29 Nov 2014 04:11:55 AM JST
    LOG.debug('wait cpu below 20%.')
    waitbusy(percent=20.0, interval=5)

* Sat 29 Nov 2014 04:12:10 AM JST

* Sat 29 Nov 2014 04:12:10 AM JST

* Sat 29 Nov 2014 04:12:10 AM JST
TODAY_RECIPE_PATH = recipe.get_latest_path()

* Sat 29 Nov 2014 04:12:50 AM JST
def _sleipnir_confirm(win, **kwargs):
    r"""SUMMARY

    _sleipnir_confirm(win, **args)

    @Arguments:
    - `win`:
    - `**args`:

    @Return:
    """
    if not win:
        return False
    return ((kwargs.get('psname') is not None) and
            (kwargs['psname'] == win.psname))

* Sat 29 Nov 2014 04:15:15 AM JST
recipe.get_latest_path()
* Sat 29 Nov 2014 04:15:24 AM JST
    # create mail form
    ice = icedove.IcedoveMail(to=gmail.DAILY, subject='Daily Routines')
    global MANUAL_START
    todaymenu = menu.MenuManager().get_today()
    recipes = [unicode(x) for x in todaymenu.iter_recipes()]
    ice.set_body((u'Routines started: {0}\nWEATHER: \nRECIPE: {1}\n'
                  .format(MANUAL_START, u' '.join(recipes))))
    cmdline = ice.getcmdline()
    LOG.debug(' '.join(cmdline))
    # cmdline.encode('utf-8')
    os.system(cmdline.encode('utf-8'))

* Sat 29 Nov 2014 04:16:24 AM JST
Acitiviti
* Sat 29 Nov 2014 04:18:04 AM JST
ActivityTime
* Sat 29 Nov 2014 04:18:39 AM JST
cls,
* Sat 29 Nov 2014 04:18:43 AM JST
cls
* Sat 29 Nov 2014 04:19:15 AM JST

* Sat 29 Nov 2014 04:19:15 AM JST

* Sat 29 Nov 2014 04:19:16 AM JST
        global MANUAL_START

* Sat 29 Nov 2014 04:19:19 AM JST
activity_time
* Sat 29 Nov 2014 04:19:40 AM JST
'Routines started: {0}\nWEATHER: \nRECIPE: {1}\n'
* Sat 29 Nov 2014 04:19:45 AM JST
u'Routines started: {0}\nWEATHER: \nRECIPE: {1}\n'
* Sat 29 Nov 2014 04:21:26 AM JST
        todaymenu = menu.MenuManager().get_today()
        recipes = [unicode(x) for x in todaymenu.iter_recipes()]

* Sat 29 Nov 2014 04:21:34 AM JST
recipes =
* Sat 29 Nov 2014 04:22:43 AM JST
ActivityTime.gettime()
* Sat 29 Nov 2014 04:22:49 AM JST

* Sat 29 Nov 2014 04:22:50 AM JST

* Sat 29 Nov 2014 04:22:50 AM JST
        activity_time = ActivityTime.gettime()

* Sat 29 Nov 2014 04:24:25 AM JST

* Sat 29 Nov 2014 04:24:25 AM JST

* Sat 29 Nov 2014 04:24:25 AM JST
        # cmdline.encode('utf-8')

* Sat 29 Nov 2014 04:25:37 AM JST

* Sat 29 Nov 2014 04:25:37 AM JST

* Sat 29 Nov 2014 04:25:37 AM JST
TODAY_RECIPE_PATH = recipe.get_latest_path()

* Sat 29 Nov 2014 04:26:35 AM JST

* Sat 29 Nov 2014 04:26:35 AM JST

* Sat 29 Nov 2014 04:26:35 AM JST
TODAY_RECIPE_PATH = recipe.get_latest_path()

* Sat 29 Nov 2014 04:26:43 AM JST

* Sat 29 Nov 2014 04:26:43 AM JST

* Sat 29 Nov 2014 04:26:43 AM JST
    today_recipe_path = recipe.get_latest_path()

* Sat 29 Nov 2014 04:38:36 AM JST
    mmanager = menu.MenuManager()
    thunar.side_by_side(str(mmanager.get_basepath()),
                        str(mmanager.get_today_path()))
    wm.WinWait().close(klass='Thunar')

* Sat 29 Nov 2014 04:39:23 AM JST

* Sat 29 Nov 2014 04:39:23 AM JST

* Sat 29 Nov 2014 04:39:23 AM JST
        wm.WinWait().close(klass='Thunar')

* Sat 29 Nov 2014 04:40:12 AM JST
    next_recipe = thunar.ThunarWMHandle(
        str(menu.MenuManager().get_menu(1).get_path()))
    next_recipe.open()
    next_recipe.move(x=1745, y=255, height=575, width=830)
    wm.WinWait().close(klass='Thunar')


* Sat 29 Nov 2014 04:42:37 AM JST
now_weekday()
* Sat 29 Nov 2014 04:42:54 AM JST
    if not WEEKDAY.is_thursday():
        return
    LOG.debug('* clear today recipes')
    basepath = menu.MenuManager().calc_weeklink(-1)

    def recur_rm(path):
        r"""SUMMARY

        recur_rm(path)

        @Arguments:
        - `path`:

        @Return:

        @Error:
        """
        if path.is_symlink():
            return
        elif path.is_file():
            try:
                os.remove(str(path))
            except IOError as err:
                LOG.error(err)
        else:
            for pth in path.iterdir():
                recur_rm(pth)
    recur_rm(basepath)

* Sat 29 Nov 2014 04:43:16 AM JST
WEEKDAY
* Sat 29 Nov 2014 04:44:12 AM JST
iter
* Sat 29 Nov 2014 04:44:39 AM JST
.encode('utf-8')
* Sat 29 Nov 2014 04:46:00 AM JST
    LOG.info('* Do lotate_recipe_link')
    recip = menu.MenuManager()
    recip.lotate_todaylink() # one day
    # rotate link if today is wednesday
    if WEEKDAY.is_wednesday():
        old, new = recip.lotate_weeklink() # one week
        LOG.debug('lotate link before {}'.format(old))
        LOG.debug('lotate link after {}'.format(new))

* Sat 29 Nov 2014 04:46:14 AM JST
weekday = now_weekday()
* Sat 29 Nov 2014 04:46:21 AM JST
WEEKDAY
* Sat 29 Nov 2014 04:47:22 AM JST
    if not WEEKDAY.is_thursday():
        return
    LOG.info('We will try create recipe')
    LOG.info('Open URL {}'.format(SEIKYO))
    chrome.run(SEIKYO)
    winwait = wm.WinWait()
    winwait.active(psname='chrome')
    winchrome = wm.getwin(psname='chrome')
    if winchrome:
        winchrome.move(x=1550, y=70) # right display
        winchrome.maximize()

    archivedir = thunar.ThunarWMHandle(str(recipe.ARCHIVE_PATH))
    archivedir.open()
    archivedir.move(x=0, y=0, height=562, width=635)

    geo = {'0thu': (0, 587, 204, 635),
           '1fri': (0, 792, 204, 635),
           '2sta': (643, 0, 204, 629),
           '3sun': (643, 204, 204, 629),
           '4mon': (643, 408, 204, 629),
           '5tue': (643, 612, 204, 629),
           '6wed': (643, 816, 204, 629),
    }

    weekdir = menu.MenuManager().calc_weeklink(1)
    for dirs in weekdir.iterdir():
        name = dirs.name
        if not name in geo:
            continue
        fmanager = thunar.ThunarWMHandle(str(dirs))
        fmanager.open()
        fgeo = geo.get(name)
        fmanager.move(x=fgeo[0], y=fgeo[1], height=fgeo[2], width=fgeo[3])

    winchrome.activate()
    # LOG.info('Run sikuli for seikyo')
    # sklfile = sikuli.SKL_FILE.get('seikyo', None)
    # if sklfile:
        # sikuli.sikulirun(sklfile)

* Sat 29 Nov 2014 04:47:37 AM JST
weekday = now_weekday()
* Sat 29 Nov 2014 04:48:34 AM JST
iter
* Sat 29 Nov 2014 04:49:29 AM JST
str
* Sat 29 Nov 2014 04:52:02 AM JST
    LOG.info('* Do Feedly')
    chrome.run('http://feedly.com/index.html#latest')

* Sat 29 Nov 2014 04:52:40 AM JST
    LOG.info('* Do v2c')
    sbp.Popen('/opt/v2c/v2c')
    sleep(2)
    # filepath = sikuli.SKL_FILE.get('v2c', None)
    # if filepath:
    #     sikuli.sikulirun(filepath)

* Sat 29 Nov 2014 04:57:37 AM JST
prepare
* Sat 29 Nov 2014 04:57:46 AM JST
rss
* Sat 29 Nov 2014 04:58:02 AM JST

* Sat 29 Nov 2014 04:58:04 AM JST
WeatherMap
* Sat 29 Nov 2014 04:58:18 AM JST
WaitCloseWeatherMap
* Sat 29 Nov 2014 04:58:30 AM JST
ActivityTime
* Sat 29 Nov 2014 04:58:50 AM JST
ChromeMoveLeftDisplay
* Sat 29 Nov 2014 04:59:04 AM JST
DailyWebpage
* Sat 29 Nov 2014 04:59:40 AM JST
WaitCloseSleipnir
* Sat 29 Nov 2014 05:00:09 AM JST
ForeignWebpage
* Sat 29 Nov 2014 05:00:24 AM JST
NationWebpage
* Sat 29 Nov 2014 05:00:34 AM JST
WaitWhileBusy
* Sat 29 Nov 2014 05:02:26 AM JST
weekday = now_weekday()
* Sat 29 Nov 2014 05:02:41 AM JST
        if self.weekday.is_thursday():
            return

* Sat 29 Nov 2014 05:07:51 AM JST
Diary
* Sat 29 Nov 2014 05:08:04 AM JST
ArchivingRecipe
* Sat 29 Nov 2014 05:08:15 AM JST
WaitCloseThunar
* Sat 29 Nov 2014 05:08:27 AM JST
ShowNextRecipe
* Sat 29 Nov 2014 05:08:32 AM JST
WaitCloseThunar(),
* Sat 29 Nov 2014 05:08:41 AM JST
LotateRecipeLink
* Sat 29 Nov 2014 05:08:51 AM JST
CreateRecipe
* Sat 29 Nov 2014 05:09:00 AM JST
CleanRecipe
* Sat 29 Nov 2014 05:09:13 AM JST
Feedly
* Sat 29 Nov 2014 05:09:20 AM JST

* Sat 29 Nov 2014 05:09:22 AM JST
V2C
* Sat 29 Nov 2014 05:09:41 AM JST
    weekday = now_weekday()

* Sat 29 Nov 2014 05:10:00 AM JST
        if self.weekday.is_thursday():
            return

* Sat 29 Nov 2014 05:13:30 AM JST
    if os.path.exists(pickle_file):
        LOG.info('{0:*^40}'.format(' Daily Resume '))

* Sat 29 Nov 2014 05:13:48 AM JST
    if os.path.exists(pickle_file):
        LOG.info('{0:*^40}'.format(' Daily Resume '))
        # TaskList.resume(pickle_file)
    else:
        LOG.info('{0:*^40}'.format(' Daily Start '))
        # TaskList(tasks, pickle_file).start()

* Sat 29 Nov 2014 05:16:22 AM JST

* Sat 29 Nov 2014 05:16:22 AM JST

* Sat 29 Nov 2014 05:16:22 AM JST
        # TaskList.resume(pickle_file)

* Sat 29 Nov 2014 05:16:24 AM JST

* Sat 29 Nov 2014 05:16:24 AM JST

* Sat 29 Nov 2014 05:16:24 AM JST
        # TaskList(tasks, pickle_file).start()

* Sat 29 Nov 2014 05:17:09 AM JST
LotateRecipeTodayLink
* Sat 29 Nov 2014 05:18:10 AM JST
        if self.weekday.is_wednesday():
            old, new = recip.lotate_weeklink() # one week
            LOG.debug('lotate link before {}'.format(old))
            LOG.debug('lotate link after {}'.format(new))

* Sat 29 Nov 2014 05:18:20 AM JST
weekday = now_weekday()
* Sat 29 Nov 2014 05:18:27 AM JST
recip = menu.MenuManager()
* Sat 29 Nov 2014 05:18:34 AM JST

* Sat 29 Nov 2014 05:18:34 AM JST

* Sat 29 Nov 2014 05:18:34 AM JST
        # rotate link if today is wednesday

* Sat 29 Nov 2014 05:19:31 AM JST

* Sat 29 Nov 2014 05:19:31 AM JST

* Sat 29 Nov 2014 05:19:31 AM JST
        # wm.WinWait().close(klass='Thunar')

* Sat 29 Nov 2014 05:20:16 AM JST
str
* Sat 29 Nov 2014 05:20:36 AM JST
.encode('utf-8')
* Sat 29 Nov 2014 05:21:28 AM JST
mmanager = menu.MenuManager()
* Sat 29 Nov 2014 05:21:42 AM JST
from ref.CMD import icedove, sleipnir, thunar, sikuli
* Sat 29 Nov 2014 05:21:55 AM JST
unicode(mmanager.get_basepath()).encode('utf-8')
* Sat 29 Nov 2014 05:22:00 AM JST
unicode(mmanager.get_today_path()).encode('utf-8')
* Sat 29 Nov 2014 05:22:05 AM JST
        thunar.side_by_side(
            unicode(mmanager.get_basepath()).encode('utf-8'),
            unicode(mmanager.get_today_path()).encode('utf-8'))

* Sat 29 Nov 2014 05:28:02 AM JST
weekday = now_weekday()
* Sat 29 Nov 2014 05:28:39 AM JST
    
* Sat 29 Nov 2014 05:28:43 AM JST
Prepare()
* Sat 29 Nov 2014 05:28:47 AM JST
    
* Sat 29 Nov 2014 05:28:49 AM JST
ReadRSS()
* Sat 29 Nov 2014 05:29:10 AM JST
append
* Sat 29 Nov 2014 05:30:37 AM JST
ChromeMoveLeftd
* Sat 29 Nov 2014 05:30:38 AM JST
appe
* Sat 29 Nov 2014 05:30:46 AM JST
ChromeMoveLeftDisplay()
* Sat 29 Nov 2014 05:31:17 AM JST
ForeignWebpage()
* Sat 29 Nov 2014 05:32:08 AM JST
NationWebpage()
* Sat 29 Nov 2014 05:33:24 AM JST
ArchivingRecipe()
* Sat 29 Nov 2014 05:33:28 AM JST
WaitCloseThunar()
* Sat 29 Nov 2014 05:33:32 AM JST
append
* Sat 29 Nov 2014 05:33:42 AM JST
ShowNextRecipe
* Sat 29 Nov 2014 05:33:48 AM JST
WaitCloseThunar()
* Sat 29 Nov 2014 05:34:42 AM JST
class CleanRecipe(Task):
    r"""CleanRecipe

    CleanRecipe is a Task.
    Responsibility:
    """
    weekday = now_weekday()

    def execute(self, ):
        r"""SUMMARY

        execute()

        @Return:

        @Error:
        """
        if not self.weekday.is_thursday():
            return
        LOG.debug('* clear today recipes')
        basepath = menu.MenuManager().calc_weeklink(-1)

        def recur_rm(path):
            r"""SUMMARY

            recur_rm(path)

            @Arguments:
            - `path`:

            @Return:

            @Error:
            """
            if path.islink():
                return
            elif path.isfile():
                try:
                    os.remove(unicode(path).encode('utf-8'))
                except IOError as err:
                    LOG.error(err)
            else:
                for pth in path.listdir():
                    recur_rm(pth)
        recur_rm(basepath)

* Sat 29 Nov 2014 05:35:55 AM JST
LotateRecipeTodayLink
* Sat 29 Nov 2014 05:35:59 AM JST

* Sat 29 Nov 2014 05:35:59 AM JST

* Sat 29 Nov 2014 05:35:59 AM JST
    if weekday.is_:

* Sat 29 Nov 2014 05:36:07 AM JST
LotateRecipeWeekLink
* Sat 29 Nov 2014 05:38:24 AM JST
    if weekday.is_thursday():
        tasks.append(CleanRecipe())

* Sat 29 Nov 2014 05:38:52 AM JST
append
* Sat 29 Nov 2014 04:57:36 PM JST
    weekday = now_weekday()
    tasks = TaskHandler()
    tasks.append(Prepare())
    tasks.append(ReadRSS())
    tasks.extend([WeatherMap(), WaitCloseWeatherMap()])
    tasks.append(ActivityTime())
    tasks.append(ChromeMoveLeftDisplay())
    if not weekday.is_thursday():
        tasks.append(ForeignWebpage())
        tasks.append(NationWebpage())
        tasks.append(WaitWhileBusy())
    tasks.append(Diary())
    tasks.extend([ArchivingRecipe(), WaitCloseThunar()])
    tasks.extend([ShowNextRecipe(), WaitCloseThunar()])
    tasks.append(LotateRecipeTodayLink())
    if weekday.is_wednesday():
        tasks.append(LotateRecipeWeekLink())
    if weekday.is_thursday():
        tasks.append(CreateRecipe())
    if weekday.is_thursday():
        tasks.append(CleanRecipe())
    if not weekday.is_thursday():
        tasks.append(Feedly())
        tasks.append(V2C())

* Sat 29 Nov 2014 04:58:25 PM JST
safetask
* Sat 29 Nov 2014 04:59:06 PM JST
resume
* Sat 29 Nov 2014 05:00:40 PM JST

* Sat 29 Nov 2014 05:00:40 PM JST

* Sat 29 Nov 2014 05:00:40 PM JST
    # safetask(tasks, pickle_file)

* Sat 29 Nov 2014 05:02:09 PM JST
pickle_file.exists()
* Sat 29 Nov 2014 05:02:54 PM JST

* Sat 29 Nov 2014 05:02:54 PM JST

* Sat 29 Nov 2014 05:02:54 PM JST
    weekday = now_weekday()

* Sat 29 Nov 2014 05:02:58 PM JST

* Sat 29 Nov 2014 05:02:58 PM JST

* Sat 29 Nov 2014 05:02:59 PM JST
    weekday = now_weekday()

* Sat 29 Nov 2014 05:03:17 PM JST

* Sat 29 Nov 2014 05:03:18 PM JST

* Sat 29 Nov 2014 05:03:18 PM JST
    weekday = now_weekday()

* Sat 29 Nov 2014 05:03:26 PM JST

* Sat 29 Nov 2014 05:03:26 PM JST

* Sat 29 Nov 2014 05:03:26 PM JST
    weekday = now_weekday()

* Sat 29 Nov 2014 05:03:35 PM JST

* Sat 29 Nov 2014 05:03:35 PM JST

* Sat 29 Nov 2014 05:03:35 PM JST
    weekday = now_weekday()

* Sat 29 Nov 2014 05:03:37 PM JST

* Sat 29 Nov 2014 05:03:37 PM JST

* Sat 29 Nov 2014 05:03:37 PM JST
        if self.weekday.is_wednesday():

* Sat 29 Nov 2014 05:04:04 PM JST
menu.MenuManager()
* Sat 29 Nov 2014 05:04:12 PM JST

* Sat 29 Nov 2014 05:04:12 PM JST

* Sat 29 Nov 2014 05:04:12 PM JST
        recip = menu.MenuManager()

* Sat 29 Nov 2014 05:04:14 PM JST

* Sat 29 Nov 2014 05:04:14 PM JST

* Sat 29 Nov 2014 05:04:14 PM JST
    weekday = now_weekday()

* Sat 29 Nov 2014 05:04:47 PM JST
menu.MenuManager()
* Sat 29 Nov 2014 05:04:51 PM JST

* Sat 29 Nov 2014 05:04:51 PM JST

* Sat 29 Nov 2014 05:04:51 PM JST
        recip = menu.MenuManager()

* Sat 29 Nov 2014 05:04:58 PM JST
rotate link if today is wednesday
* Sat 29 Nov 2014 05:05:07 PM JST

* Sat 29 Nov 2014 05:05:07 PM JST

* Sat 29 Nov 2014 05:05:07 PM JST
        # rotate link if today is wednesday

* Sat 29 Nov 2014 05:05:14 PM JST
 # one week
* Sat 29 Nov 2014 05:07:13 PM JST
MenuManager().get_today()
* Sat 29 Nov 2014 05:07:18 PM JST

* Sat 29 Nov 2014 05:07:18 PM JST

* Sat 29 Nov 2014 05:07:18 PM JST
        todaymenu = menu.MenuManager().get_today()

* Sat 29 Nov 2014 05:07:28 PM JST

* Sat 29 Nov 2014 05:07:28 PM JST

* Sat 29 Nov 2014 05:07:28 PM JST
    weekday = now_weekday()

* Sat 29 Nov 2014 05:07:36 PM JST

* Sat 29 Nov 2014 05:07:36 PM JST

* Sat 29 Nov 2014 05:07:36 PM JST
    weekday = now_weekday()

* Sat 29 Nov 2014 05:07:47 PM JST

* Sat 29 Nov 2014 05:07:47 PM JST

* Sat 29 Nov 2014 05:07:47 PM JST
    weekday = now_weekday()

* Sat 29 Nov 2014 05:09:11 PM JST

* Sat 29 Nov 2014 05:09:11 PM JST

* Sat 29 Nov 2014 05:09:11 PM JST
WEEKDAY = now_weekday()

* Sat 29 Nov 2014 05:09:17 PM JST

* Sat 29 Nov 2014 05:09:18 PM JST

* Sat 29 Nov 2014 05:09:18 PM JST
NOW = datetime.now()

* Sat 29 Nov 2014 05:09:21 PM JST

* Sat 29 Nov 2014 05:09:21 PM JST

* Sat 29 Nov 2014 05:09:21 PM JST
MANUAL_START = ''

* Sat 29 Nov 2014 05:09:31 PM JST

* Sat 29 Nov 2014 05:09:31 PM JST

* Sat 29 Nov 2014 05:09:31 PM JST
from tasklist import TaskList

* Sat 29 Nov 2014 05:10:05 PM JST
menu.
* Sat 29 Nov 2014 05:10:15 PM JST
menu.
* Sat 29 Nov 2014 05:10:21 PM JST
menu.
* Sat 29 Nov 2014 05:10:37 PM JST
menu.
* Sat 29 Nov 2014 05:10:51 PM JST
menu.
* Sat 29 Nov 2014 05:11:03 PM JST
menu.
* Sat 29 Nov 2014 05:11:14 PM JST

* Sat 29 Nov 2014 05:11:14 PM JST

* Sat 29 Nov 2014 05:11:15 PM JST
        basepath = MenuManager().calc_weeklink(-1)

* Sat 29 Nov 2014 05:12:21 PM JST

* Sat 29 Nov 2014 05:12:21 PM JST

* Sat 29 Nov 2014 05:12:21 PM JST
import time

* Sat 29 Nov 2014 05:12:32 PM JST
time.
* Sat 29 Nov 2014 05:12:50 PM JST
datetime
* Sat 29 Nov 2014 05:12:50 PM JST
import datetime
* Sat 29 Nov 2014 05:15:37 PM JST
now().
* Sat 29 Nov 2014 05:15:37 PM JST
datetime.now().
* Sat 29 Nov 2014 05:15:51 PM JST
datetime
* Sat 29 Nov 2014 05:15:58 PM JST
datetime.
* Sat 29 Nov 2014 05:16:54 PM JST
get_chrome_windows,
* Sat 29 Nov 2014 05:17:26 PM JST
from task import Task, TaskHandler, TaskPickle
from path import Path


* Sat 29 Nov 2014 05:18:25 PM JST
self
* Sat 29 Nov 2014 05:18:39 PM JST
now_weekday()
* Sat 29 Nov 2014 05:18:53 PM JST
WEEKDAY
* Sat 29 Nov 2014 05:18:59 PM JST
WEEKDAY
* Sat 29 Nov 2014 05:22:07 PM JST
if sys.version_info < (2, 4):
    from sets import Set as set


* Sat 29 Nov 2014 05:24:08 PM JST

* Sat 29 Nov 2014 05:24:08 PM JST

* Sat 29 Nov 2014 05:24:08 PM JST
# from ref.myinfo import gmail

* Sat 29 Nov 2014 05:24:08 PM JST
# from ref.myinfo import gmail

* Sat 29 Nov 2014 05:24:09 PM JST
# from ref.myinfo import gmail
# from ref.url import SEIKYO

* Sat 29 Nov 2014 05:28:43 PM JST
sleipnir
* Sat 29 Nov 2014 05:50:32 PM JST
            LOG.debug('{} weather page open.'.format(self.season))
            chrome.open_folder(self.season)
            LOG.debug('sleep {} sec for open with exists window'.format(3))

* Sat 29 Nov 2014 05:50:35 PM JST
            LOG.debug('{} weather page open.'.format(self.season))
            chrome.open_folder(self.season)
            LOG.debug('sleep {} sec for open with exists window'.format(3))
            sleep(5) # wait for open exists window

* Sat 29 Nov 2014 05:50:44 PM JST
season
* Sat 29 Nov 2014 05:50:45 PM JST
self.season
* Sat 29 Nov 2014 05:50:50 PM JST
'summer'
* Sat 29 Nov 2014 05:50:59 PM JST
'Summer'
* Sat 29 Nov 2014 05:51:29 PM JST
        LOG.debug('{} weather page open.'.format('Summer'))
        chrome.open_folder('Summer')
        LOG.debug('sleep {} sec for open with exists window'.format(3))
        sleep(5) # wait for open exists window

* Sat 29 Nov 2014 05:51:43 PM JST
Summer
* Sat 29 Nov 2014 05:51:47 PM JST
Summer
* Sat 29 Nov 2014 05:52:28 PM JST
datetime.now().month
* Sat 29 Nov 2014 05:52:52 PM JST
7, 8, 9, 10)
* Sat 29 Nov 2014 05:53:22 PM JST
2, 3, 4
* Sat 29 Nov 2014 05:54:27 PM JST

* Sat 29 Nov 2014 05:54:27 PM JST

* Sat 29 Nov 2014 05:54:27 PM JST
        # mapping weather window

* Sat 29 Nov 2014 05:54:59 PM JST

* Sat 29 Nov 2014 05:54:59 PM JST

* Sat 29 Nov 2014 05:54:59 PM JST
        # run sleipnir

* Sat 29 Nov 2014 09:44:05 PM JST
WaitCloseSleipnir
* Sat 29 Nov 2014 10:08:05 PM JST

* Sat 29 Nov 2014 10:08:05 PM JST

* Sat 29 Nov 2014 10:08:05 PM JST
FILENAME = __file__

* Sat 29 Nov 2014 10:09:26 PM JST
join(
* Sat 29 Nov 2014 10:09:27 PM JST
path.join(
* Sat 29 Nov 2014 10:09:27 PM JST
os.path.join(
* Sat 29 Nov 2014 10:09:56 PM JST
isfile()
* Sat 29 Nov 2014 10:10:11 PM JST
path
* Sat 29 Nov 2014 10:11:57 PM JST
unicode(''}
* Sat 29 Nov 2014 10:16:54 PM JST
unicode(''\)
* Sat 29 Nov 2014 10:18:06 PM JST
unicode(''\}}
* Sat 29 Nov 2014 10:18:12 PM JST
unicode(''\}
* Sat 29 Nov 2014 10:18:30 PM JST
unicode(''\)
* Sat 29 Nov 2014 10:19:16 PM JST
hello'
* Sat 29 Nov 2014 10:19:16 PM JST
unicode('hello'
* Sat 29 Nov 2014 10:20:44 PM JST
             
* Sat 29 Nov 2014 10:21:02 PM JST
             
* Sat 29 Nov 2014 10:22:24 PM JST
(make-string 1 41)
* Sat 29 Nov 2014 10:23:00 PM JST
unicode(''}
* Sat 29 Nov 2014 10:24:36 PM JST
41)}
* Sat 29 Nov 2014 10:24:36 PM JST
1 41)}
* Sat 29 Nov 2014 10:24:36 PM JST
string 1 41)}
* Sat 29 Nov 2014 10:24:36 PM JST
make-string 1 41)}
* Sat 29 Nov 2014 10:24:37 PM JST
make-string 1 41)}
* Sat 29 Nov 2014 10:24:37 PM JST
make-string 1 41)}unicode(''${3:$(

* Sat 29 Nov 2014 10:24:53 PM JST
unicode('')
* Sat 29 Nov 2014 10:25:03 PM JST
unicode(''
* Sat 29 Nov 2014 10:25:38 PM JST
$(make-string 1 41)
* Sat 29 Nov 2014 10:27:26 PM JST
daily.log
* Sat 29 Nov 2014 10:27:32 PM JST
Path('/var/log/daily.log')
* Sat 29 Nov 2014 10:27:38 PM JST

* Sat 29 Nov 2014 10:27:38 PM JST

* Sat 29 Nov 2014 10:27:38 PM JST
LOGNAME = Path('daily.log')

* Sat 29 Nov 2014 10:27:38 PM JST
LOGNAME = Path('daily.log')

* Sat 29 Nov 2014 10:27:38 PM JST
LOGNAME = Path('daily.log')
LOGDIR = Path('/var/log/daily.log')

* Sat 29 Nov 2014 10:29:38 PM JST
${3:'${4:/var/log}'}
* Sat 29 Nov 2014 10:30:10 PM JST
${1:'${2:NAME}'}
* Sat 29 Nov 2014 10:30:40 PM JST
${1:${2:NAME}'}
* Sat 29 Nov 2014 10:30:57 PM JST

* Sat 29 Nov 2014 10:30:57 PM JST

* Sat 29 Nov 2014 10:30:58 PM JST
LOGNAME = ${1:'${2:NAME}'}

* Sat 29 Nov 2014 10:30:58 PM JST
LOGNAME = ${1:'${2:NAME}'}

* Sat 29 Nov 2014 10:30:58 PM JST
LOGNAME = ${1:'${2:NAME}'}
LOGDIR = ${3:'${4:/var/log}'}

* Sat 29 Nov 2014 10:37:23 PM JST
self.
* Sat 29 Nov 2014 10:37:31 PM JST
    weekday = now_weekday()
    tasks = TaskHandler()
    tasks.append(Prepare())
    tasks.append(ReadRSS())
    month = datetime.now().month
    if month in (7, 8, 9, 10):
        tasks.append(Summer())
    if month in (2, 3, 4):
        tasks.append(Winter())
    tasks.extend([WeatherMap(), WaitCloseWeatherMap()])
    tasks.append(ActivityTime())
    tasks.append(ChromeMoveLeftDisplay())
    tasks.append(DailyWebpage())
    tasks.append(WaitCloseSleipnir())
    if not weekday.is_thursday():
        tasks.append(ForeignWebpage())
        tasks.append(NationWebpage())
        tasks.append(WaitWhileBusy())
    tasks.append(Diary())
    tasks.extend([ArchivingRecipe(), WaitCloseThunar()])
    tasks.extend([ShowNextRecipe(), WaitCloseThunar()])
    tasks.append(LotateRecipeTodayLink())
    if weekday.is_wednesday():
        tasks.append(LotateRecipeWeekLink())
    if weekday.is_thursday():
        tasks.append(CreateRecipe())
    if weekday.is_thursday():
        tasks.append(CleanRecipe())
    if not weekday.is_thursday():
        tasks.append(Feedly())
        tasks.append(V2C())
    return tasks

* Sat 29 Nov 2014 10:39:05 PM JST
CMD/
* Sat 29 Nov 2014 10:39:05 PM JST
ref/CMD/
* Sat 29 Nov 2014 11:37:10 PM JST
    pickle_f = Path('/tmp/daily.pickle')
    if pickle_f.exists():
        LOG.info('{0:*^40}'.format(' Daily Resume '))
        TaskPickle.resume(unicode(pickle_f))
    else:
        LOG.info('{0:*^40}'.format(' Daily Start '))
        tasks = gettasks()
        TaskPickle(tasks).start(unicode(pickle_f))

    if pickle_f.exists():
        pickle_f.remove()

* Sat 29 Nov 2014 11:37:26 PM JST

* Sat 29 Nov 2014 11:37:26 PM JST

* Sat 29 Nov 2014 11:37:26 PM JST
        pickle_f = Path('/tmp/daily.pickle')

* Sat 29 Nov 2014 11:37:32 PM JST
pickle_f
* Sat 29 Nov 2014 11:37:44 PM JST
pickle_f
* Sat 29 Nov 2014 11:37:52 PM JST
TaskPickle.resume(unicode(self._path))
* Sat 29 Nov 2014 11:38:05 PM JST
LOG.info('{0:*^40}'.format(' Daily Resume '))
* Sat 29 Nov 2014 11:38:20 PM JST
            LOG.info('{0:*^40}'.format(' Daily Start '))
            tasks = gettasks()
            TaskPickle(tasks).start(unicode(pickle_f))

* Sat 29 Nov 2014 11:38:38 PM JST
get
* Sat 29 Nov 2014 11:38:46 PM JST
tasks = 
* Sat 29 Nov 2014 11:38:56 PM JST
self.gettasks()
* Sat 29 Nov 2014 11:38:58 PM JST

* Sat 29 Nov 2014 11:38:58 PM JST

* Sat 29 Nov 2014 11:38:58 PM JST
        self.gettasks()

* Sat 29 Nov 2014 11:39:01 PM JST
pickle_f
* Sat 29 Nov 2014 11:39:36 PM JST
        if pickle_f.exists():
            pickle_f.remove()

* Sat 29 Nov 2014 11:39:49 PM JST
pickle_f
* Sat 29 Nov 2014 11:39:53 PM JST
pickle_f
* Sat 29 Nov 2014 11:40:43 PM JST
TaskHandler()
* Sat 29 Nov 2014 11:40:58 PM JST

* Sat 29 Nov 2014 11:40:58 PM JST

* Sat 29 Nov 2014 11:40:58 PM JST
        tasks = TaskHandler()

* Sat 29 Nov 2014 11:41:32 PM JST

* Sat 29 Nov 2014 11:41:32 PM JST

* Sat 29 Nov 2014 11:41:32 PM JST
        return _tasks

* Sat 29 Nov 2014 11:58:23 PM JST
for
* Sun 30 Nov 2014 12:00:41 AM JST
None
* Sun 30 Nov 2014 12:01:16 AM JST
TaskHandler(tasks)
* Sun 30 Nov 2014 12:01:25 AM JST
TaskHandler(tasks)
* Sun 30 Nov 2014 12:18:20 AM JST
builder
* Sun 30 Nov 2014 12:18:23 AM JST
path
* Sun 30 Nov 2014 12:23:12 AM JST
self.
* Sun 30 Nov 2014 12:31:08 AM JST
self.
* Sun 30 Nov 2014 12:32:14 AM JST
true
* Sun 30 Nov 2014 12:34:38 AM JST
        if not isinstance(builder, TaskBuilder):
            # TODO: (Atami) [2014/11/30]
            raise TypeError()

* Sun 30 Nov 2014 12:37:50 AM JST

* Sun 30 Nov 2014 12:37:51 AM JST

* Sun 30 Nov 2014 12:37:51 AM JST
        self._build_tasks()

* Sun 30 Nov 2014 12:39:19 AM JST
builder
* Sun 30 Nov 2014 12:39:33 AM JST
builder
* Sun 30 Nov 2014 12:39:38 AM JST
builder
* Sun 30 Nov 2014 12:42:07 AM JST

* Sun 30 Nov 2014 12:42:07 AM JST

* Sun 30 Nov 2014 12:42:07 AM JST
from task.builder import TaskBuilder

* Sun 30 Nov 2014 12:59:54 AM JST

* Sun 30 Nov 2014 12:59:54 AM JST

* Sun 30 Nov 2014 12:59:54 AM JST
from task.func import safetask

* Sun 30 Nov 2014 01:02:14 AM JST
        weekday = now_weekday()
        self._tasks.append(Prepare())
        self._tasks.append(ReadRSS())
        month = datetime.now().month
        if month in (7, 8, 9, 10):
            self._tasks.append(Summer())
        if month in (2, 3, 4):
            self._tasks.append(Winter())
        self._tasks.extend([WeatherMap(), WaitCloseWeatherMap()])
        self._tasks.append(ActivityTime())
        self._tasks.append(ChromeMoveLeftDisplay())
        self._tasks.append(DailyWebpage())
        self._tasks.append(WaitCloseSleipnir())
        if not weekday.is_thursday():
            self._tasks.append(ForeignWebpage())
            self._tasks.append(NationWebpage())
            self._tasks.append(WaitWhileBusy())
        self._tasks.append(Diary())
        self._tasks.extend([ArchivingRecipe(), WaitCloseThunar()])
        self._tasks.extend([ShowNextRecipe(), WaitCloseThunar()])
        self._tasks.append(LotateRecipeTodayLink())
        if weekday.is_wednesday():
            self._tasks.append(LotateRecipeWeekLink())
        if weekday.is_thursday():
            self._tasks.append(CreateRecipe())
        if weekday.is_thursday():
            self._tasks.append(CleanRecipe())
        if not weekday.is_thursday():
            self._tasks.append(Feedly())
            self._tasks.append(V2C())

* Sun 30 Nov 2014 01:05:30 AM JST

* Sun 30 Nov 2014 01:05:30 AM JST

* Sun 30 Nov 2014 01:05:30 AM JST
    SafeTask(DailyTaskBuilder(), pickle_f)

* Sun 30 Nov 2014 01:09:15 AM JST
'/tmp/daily.pickle'
* Sun 30 Nov 2014 01:15:09 AM JST
if 
* Sun 30 Nov 2014 01:42:57 AM JST
from ref import recipe, myinfo, url
* Sun 30 Nov 2014 01:43:19 AM JST
from ref.CMD import icedove, sleipnir, thunar, sikuli
* Sun 30 Nov 2014 02:00:14 AM JST
TaskPickle, 
* Sun 30 Nov 2014 02:00:14 AM JST
TaskHandler, TaskPickle, 
* Sun 30 Nov 2014 02:01:53 AM JST
is_t
* Sun 30 Nov 2014 02:01:55 AM JST
not 
* Sun 30 Nov 2014 02:02:26 AM JST
saturday
* Sun 30 Nov 2014 02:05:38 AM JST

* Sun 30 Nov 2014 02:05:38 AM JST

* Sun 30 Nov 2014 02:05:38 AM JST
    # pickle_f = Path('/tmp/daily.pickle')

* Sun 30 Nov 2014 02:08:59 AM JST
logging.getLevelName
* Sun 30 Nov 2014 02:09:03 AM JST
3)
* Sun 30 Nov 2014 02:09:04 AM JST
getLevelName(3)
* Sun 30 Nov 2014 02:12:46 AM JST
Dai
* Sun 30 Nov 2014 02:14:54 AM JST
not self.isdebug()
* Sun 30 Nov 2014 02:15:03 AM JST
not self.isdebug() and 
* Sun 30 Nov 2014 02:15:19 AM JST

* Sun 30 Nov 2014 02:15:19 AM JST

* Sun 30 Nov 2014 02:15:19 AM JST
        ###############################################

* Sun 30 Nov 2014 02:15:21 AM JST

* Sun 30 Nov 2014 02:15:21 AM JST

* Sun 30 Nov 2014 02:15:21 AM JST
        # comment out if debug run

* Sun 30 Nov 2014 02:19:32 AM JST
.encode('utf-8')
* Sun 30 Nov 2014 02:23:43 AM JST
~/.pylib/
* Sun 30 Nov 2014 02:24:38 AM JST
    os.system('modprobe pcspkr')
    os.system('/usr/bin/beep -f 100 -l 700')
    os.system('rmmod pcspkr')

* Sun 30 Nov 2014 02:25:23 AM JST
modprobe
* Sun 30 Nov 2014 02:25:45 AM JST
/usr/bin/beep -f 100 -l 700
* Sun 30 Nov 2014 02:25:54 AM JST
/sbin/modprobe pcspkr
* Sun 30 Nov 2014 02:26:32 AM JST
/usr/bin/beep -f 600 -l 700
* Sun 30 Nov 2014 02:27:08 AM JST
/sbin/rmmod pcspkr
* Sun 30 Nov 2014 02:32:20 AM JST
setting
* Sun 30 Nov 2014 02:33:25 AM JST
'-f', '600', '-l', '700'
* Sun 30 Nov 2014 02:34:27 AM JST
pcspkr
* Sun 30 Nov 2014 02:34:31 AM JST

* Sun 30 Nov 2014 02:34:31 AM JST

* Sun 30 Nov 2014 02:34:32 AM JST
        os.system('/sbin/rmmod pcspkr')

* Sun 30 Nov 2014 02:34:32 AM JST

* Sun 30 Nov 2014 02:34:32 AM JST

* Sun 30 Nov 2014 02:34:32 AM JST
    # os.system('/usr/bin/beep -f 600 -l 700')

* Sun 30 Nov 2014 02:34:34 AM JST

* Sun 30 Nov 2014 02:34:34 AM JST

* Sun 30 Nov 2014 02:34:34 AM JST
        # os.system('/sbin/modprobe pcspkr')

* Sun 30 Nov 2014 02:44:35 AM JST
builder
* Sun 30 Nov 2014 02:44:36 AM JST
self.builder
* Sun 30 Nov 2014 02:46:42 AM JST
DummyTask(DummyReceiver(), 'task1')
* Sun 30 Nov 2014 02:47:55 AM JST
self
* Sun 30 Nov 2014 02:50:56 AM JST
self.builder.gettasks()
* Sun 30 Nov 2014 02:51:53 AM JST
        tasks = self.builder.gettasks()
        self.assertIsInstance(tasks, TaskHandler)
        self.assertEqual(DUMMYTASK, tasks[0])

* Sun 30 Nov 2014 02:52:16 AM JST

* Sun 30 Nov 2014 02:52:16 AM JST

* Sun 30 Nov 2014 02:52:16 AM JST
        self.assertIsInstance(tasks, TaskHandler)

* Sun 30 Nov 2014 02:52:29 AM JST

* Sun 30 Nov 2014 02:52:29 AM JST

* Sun 30 Nov 2014 02:52:29 AM JST
        self.assertEqual(DUMMYTASK, tasks[0])

* Sun 30 Nov 2014 02:56:41 AM JST
safe_
* Sun 30 Nov 2014 02:57:37 AM JST
DummyTask, DummyReceiver
* Sun 30 Nov 2014 02:57:46 AM JST
TaskHandler
* Sun 30 Nov 2014 02:57:55 AM JST
bui
* Sun 30 Nov 2014 02:57:55 AM JST
tests.bui
* Sun 30 Nov 2014 02:59:12 AM JST
        
* Sun 30 Nov 2014 02:59:18 AM JST
        
* Sun 30 Nov 2014 02:59:31 AM JST
, TaskHandler
* Sun 30 Nov 2014 03:00:04 AM JST
pass
* Sun 30 Nov 2014 03:00:49 AM JST
cls.directory = str(Path(__file__).dirname())
* Sun 30 Nov 2014 03:01:12 AM JST
apth
* Sun 30 Nov 2014 03:01:22 AM JST
filepath = ''
* Sun 30 Nov 2014 03:01:53 AM JST
Path(cls.directory).
* Sun 30 Nov 2014 03:03:30 AM JST
        if self.savefile.exists():
            self.savefile.remove()

* Sun 30 Nov 2014 03:03:35 AM JST
pass
* Sun 30 Nov 2014 03:04:03 AM JST
cls
* Sun 30 Nov 2014 03:04:05 AM JST
cls
* Sun 30 Nov 2014 03:04:08 AM JST
        if self.filepath.exists():
            self.filepath.remove()

* Sun 30 Nov 2014 03:04:14 AM JST
self
* Sun 30 Nov 2014 03:04:15 AM JST
self
* Sun 30 Nov 2014 03:04:27 AM JST
        if self.filepath.exists():
            self.filepath.remove()

* Sun 30 Nov 2014 03:10:20 AM JST
path
* Sun 30 Nov 2014 03:10:45 AM JST
self.
* Sun 30 Nov 2014 03:10:48 AM JST

* Sun 30 Nov 2014 03:10:48 AM JST

* Sun 30 Nov 2014 03:10:48 AM JST
        self.assertEqual(expects, , msg=expects)

* Sun 30 Nov 2014 03:10:50 AM JST
expects
* Sun 30 Nov 2014 03:13:22 AM JST
        got = self.safetask.get_path()
        self.assertEqual(self.filepath, got)

* Sun 30 Nov 2014 03:13:26 AM JST
filepath
* Sun 30 Nov 2014 03:15:11 AM JST
task
* Sun 30 Nov 2014 03:16:30 AM JST
        got = self.safetask.get_taskholder()
        self.assertEqual(self.builder, got)

* Sun 30 Nov 2014 03:16:33 AM JST
builder
* Sun 30 Nov 2014 03:16:34 AM JST
self.builder
* Sun 30 Nov 2014 03:35:16 AM JST
/root/.pylib/task/tests/usetest.pickle
* Sun 30 Nov 2014 03:35:46 AM JST
pass
* Sun 30 Nov 2014 03:36:03 AM JST
'/root/.pylib/task/tests/usetest.pickle'
* Sun 30 Nov 2014 03:38:27 AM JST
self.assertFalse(self.filepath.exists())
* Sun 30 Nov 2014 03:39:21 AM JST
getresult()
* Sun 30 Nov 2014 03:40:05 AM JST
'/root/.pylib/task/tests/usetest.pickle'
* Sun 30 Nov 2014 03:40:31 AM JST
_taskhandler
* Sun 30 Nov 2014 03:43:46 AM JST
_taskholder._tasks[0]._receiver.getresult()
* Sun 30 Nov 2014 03:44:37 AM JST
self.safetask._taskholder._tasks[0]
* Sun 30 Nov 2014 03:46:27 AM JST
TaskPickle.load
* Sun 30 Nov 2014 03:46:46 AM JST
testfile
* Sun 30 Nov 2014 03:47:39 AM JST
._taskhandler[0]._receiver.getresult()
* Sun 30 Nov 2014 03:47:49 AM JST

* Sun 30 Nov 2014 03:47:49 AM JST

* Sun 30 Nov 2014 03:47:49 AM JST
        got = self.safetask._taskholder._tasks[0]._receiver.getresult()

* Sun 30 Nov 2014 04:12:29 AM JST
http://stackoverflow.com/questions/6389580/quick-and-easy-trayicon-with-python
* Sun 30 Nov 2014 04:20:00 AM JST
path
* Sun 30 Nov 2014 04:20:17 AM JST
'/var/log'
* Sun 30 Nov 2014 04:20:20 AM JST
weekly.log
* Sun 30 Nov 2014 04:20:25 AM JST

* Sun 30 Nov 2014 04:20:25 AM JST

* Sun 30 Nov 2014 04:20:25 AM JST
LOGNAME = 'weekly.log'

* Sun 30 Nov 2014 04:20:25 AM JST
LOGNAME = 'weekly.log'

* Sun 30 Nov 2014 04:20:25 AM JST
LOGNAME = 'weekly.log'
LOGDIR = '/var/log'

* Sun 30 Nov 2014 04:24:16 AM JST
    # beep
    pcspkr = 'pcspkr' in lsmod()
    if not pcspkr:
        modprobe('pcspkr')
    beep('-f', '600', '-l', '700')
    if not pcspkr:
        rmmod('pcspkr')

* Sun 30 Nov 2014 04:24:33 AM JST

* Sun 30 Nov 2014 04:24:33 AM JST

* Sun 30 Nov 2014 04:24:33 AM JST
    sleep(60)

* Sun 30 Nov 2014 04:25:17 AM JST
from task import Task, TaskBuilder, SafeTask
* Sun 30 Nov 2014 04:29:18 AM JST
expanduser
* Sun 30 Nov 2014 04:29:47 AM JST
expandvars()
* Sun 30 Nov 2014 04:31:00 AM JST
expanduser
* Sun 30 Nov 2014 04:31:01 AM JST
path.expanduser
* Sun 30 Nov 2014 04:31:01 AM JST
os.path.expanduser
* Sun 30 Nov 2014 04:32:04 AM JST
    download_path = Path('~/Downloads').expand()
    for file_ in download_path.listdir('*.torrent'):
        file_.remove_p()

* Sun 30 Nov 2014 04:34:06 AM JST
Path('~/Downloads')
* Sun 30 Nov 2014 04:34:23 AM JST
    LOGGER.info('\n\n{0:#^40}'.format(' Auto clean Downloads '))
    LOGGER.info('Auto clean Downloads')

* Sun 30 Nov 2014 04:38:18 AM JST
    LOGGER.info('Open directory by Thunar')
    thunar.side_by_side(MyArchive().get_path(), '/root/Downloads')

* Sun 30 Nov 2014 04:39:33 AM JST
    try:
        dir_ = '/root'
        LOGGER.info('Open {}'.format(dir_))
        sbp.check_call((thunar.BINPATH, dir_))
    except sbp.CalledProcessError as err:
        msg = 'Failed, retcode: {0}, cmd: {1}, output: {2}'.format(
            err.returncode, err.cmd, err.output)
        LOGGER.error(msg)
    except OSError:
        LOGGER.warning('Failed: OSError'.format(dir_))
    for win in wm.iter_matchwin(psname=thunar.PSNAME):
        win.move(x=1618, y=128, width=975, height=728)
        LOGGER.debug('Thunar {} moved.'.format(dir_))
        win.close()

* Sun 30 Nov 2014 04:40:42 AM JST
self.
* Sun 30 Nov 2014 04:40:52 AM JST
dir_
* Sun 30 Nov 2014 04:40:56 AM JST
dir_
* Sun 30 Nov 2014 04:41:03 AM JST

* Sun 30 Nov 2014 04:41:03 AM JST

* Sun 30 Nov 2014 04:41:03 AM JST
            dir_ = '/root'

* Sun 30 Nov 2014 04:41:11 AM JST
dir_
* Sun 30 Nov 2014 04:41:15 AM JST
dir_
* Sun 30 Nov 2014 04:43:53 AM JST
    LOGGER.info('* Auto Clean Trush.')
    targets = ('/root/.local/share/Trash', '/data/.Trash-0',
                 '/media/Data/.Trash-0')
    LOGGER.debug(targets)
    # do!! remove
    for tgt in targets:
        try:
            if os.path.exists(tgt) and os.path.isdir(tgt):
                shutil.rmtree(tgt)
        except TypeError:
            pass

* Sun 30 Nov 2014 04:44:49 AM JST
('/root/.local/share/Trash', '/data/.Trash-0',
                     '/media/Data/.Trash-0')
* Sun 30 Nov 2014 04:44:52 AM JST
                     
* Sun 30 Nov 2014 04:44:58 AM JST
targets
* Sun 30 Nov 2014 04:45:18 AM JST
tar
* Sun 30 Nov 2014 04:49:58 AM JST
LOGGER.info('\n\n{0:#^40}'.format(' Clean Bookmarks '))
* Sun 30 Nov 2014 05:05:04 AM JST
    sbp.Popen(('emacs', '-f', 'svn-status-pylib'))
    sleep(30)
    wm.WinWait().close(title='svn_pylib')

* Sun 30 Nov 2014 05:06:19 AM JST
        sleep(30)
        wm.WinWait().close(title='svn_pylib')

* Sun 30 Nov 2014 05:07:11 AM JST

* Sun 30 Nov 2014 05:07:11 AM JST

* Sun 30 Nov 2014 05:07:11 AM JST
        sleep(30)

* Sun 30 Nov 2014 05:08:28 AM JST
sbp.Popen(('emacs', '-f', 'svn-status-emacsd'))
* Sun 30 Nov 2014 05:08:59 AM JST
wm.WinWait().close(title='svn_emacsd')
* Sun 30 Nov 2014 05:11:50 AM JST
    with king.King() as ki:
        ki.wol()
        ki.pavedisk()
        if not ki.ismount():
            LOGGER.fatal('Not mounted remote /data.')
            raise StandardError('Not mounted remote /data.')

* Sun 30 Nov 2014 05:12:34 AM JST
sbp.Popen(('/usr/sbin/ntpdate', 'ntp.nict.jp'))
* Sun 30 Nov 2014 05:15:20 AM JST
'/opt/google/chrome/chrome'
* Sun 30 Nov 2014 05:15:30 AM JST
chrome.read_hash('md5')
* Sun 30 Nov 2014 05:15:53 AM JST
chrome
* Sun 30 Nov 2014 05:17:41 AM JST
    LOGGER.info('\n\n{0:#^40}'.format(' Update Knight '))
    try:
        sbp.check_call((CMD.get('apt-get'), 'update'))
        sbp.check_call((CMD.get('apt-get'), '-y', 'upgrade'))
        sbp.check_call((CMD.get('apt-get'), 'clean'))
    except sbp.CalledProcessError, OSError:
        LOGGER.error('Failed: apt-get')

* Sun 30 Nov 2014 05:18:46 AM JST
    if hash_ == _chrome_hash():
        return
    try:
        sbp.check_call(('/bin/sh', '/root/.zsh/scripts/chromeroot'))
    except sbp.CalledProcessError:
        LOGGER.error('Failed chromeroot command')

* Sun 30 Nov 2014 05:19:10 AM JST
hash_
* Sun 30 Nov 2014 05:20:31 AM JST
'md5'
* Sun 30 Nov 2014 05:24:38 AM JST
    LOGGER.info('\n\n{0:#^40}'.format(' Remote backup knight '))
    import backup_ni_remote
    backup_ni_remote.backup()

* Sun 30 Nov 2014 05:24:46 AM JST

* Sun 30 Nov 2014 05:24:46 AM JST

* Sun 30 Nov 2014 05:24:46 AM JST
        import backup_ni_remote

* Sun 30 Nov 2014 05:26:06 AM JST
    LOGGER.info('\n\n{0:#^40}'.format(' Mirroring /data '))
    mrr = mirror.DataMirror(verbose=True)
    mrr.push()
    mrr.pull()

* Sun 30 Nov 2014 05:27:07 AM JST
    LOGGER.info('\n\n{0:#^40}'.format(' vmware '))
    def vmware_service(action):
        r"""SUMMARY

        vmware_service(action)

        @Arguments:
        - `action`:

        @Return:
        """
        try:
            sbp.check_call(('/usr/sbin/service', 'vmware', action))
        except sbp.CalledProcessError as prcss:
            msg = str(prcss)
            if prcss.output:
                msg += '\n\n' + prcss.output
            easygui.msgbox(msg, 'Failed')
            sys.exit(1)
    vmware_service('start')
    sbp.call('/usr/bin/vmware')
    vmware_service('stop')

* Sun 30 Nov 2014 05:28:03 AM JST
1)
* Sun 30 Nov 2014 05:28:04 AM JST
exit(1)
* Sun 30 Nov 2014 05:28:04 AM JST
sys.exit(1)
* Sun 30 Nov 2014 05:29:10 AM JST
    LOGGER.info('\n\n{0:#^40}'.format(' Pull backup king '))
    archive = MyArchive()
    if archive.isexists():
        raise StandardError('{} not exists'.format(archive.get_path()))
    with king.King() as ki:
        ki.wol()
        ki.pavedisk()
        if not ki.isactive():
            sys.exit('kidead')
    import backup_ki_pull
    latest_path = '/data/.backup/king_remote/latest'
    if not os.path.exists(latest_path):
        backup_ki_pull.backup()
    else:
        realpath = os.path.realpath(latest_path)
        fromtimestamp = datetime.datetime.fromtimestamp
        fymonth = fromtimestamp(os.path.getctime(realpath)).strftime('%Y%m')
        nowymonth = datetime.datetime.now().strftime('%Y%m')
        if fymonth < nowymonth:
            backup_ki_pull.backup()
        else:
            LOGGER.info('Did not execute backup king.'
                         '\nBecause of not new monthly date.')

* Sun 30 Nov 2014 05:30:42 AM JST

* Sun 30 Nov 2014 05:30:42 AM JST

* Sun 30 Nov 2014 05:30:42 AM JST
        import backup_ki_pull

* Sun 30 Nov 2014 05:31:13 AM JST
latest_path
* Sun 30 Nov 2014 05:31:34 AM JST
latest_path
* Sun 30 Nov 2014 05:32:18 AM JST
getctime
* Sun 30 Nov 2014 05:32:39 AM JST
realpath
* Sun 30 Nov 2014 05:35:13 AM JST
    LOGGER.info('\n\n{0:#^40}'.format(' king server halting '))
    with king.King() as ki:
        ki.halt()

* Sun 30 Nov 2014 05:38:03 AM JST
    def isdebug(self, ):
        r"""SUMMARY

        isdebug()

        @Return:

        @Error:
        """
        return self._debug


* Sun 30 Nov 2014 05:39:54 AM JST
MannualCleanDownload
* Sun 30 Nov 2014 05:40:34 AM JST
RepositonThunar
* Sun 30 Nov 2014 05:40:36 AM JST
        
* Sun 30 Nov 2014 05:43:23 AM JST

* Sun 30 Nov 2014 05:43:24 AM JST
RepositonThunar()
* Sun 30 Nov 2014 05:43:37 AM JST
        
* Sun 30 Nov 2014 05:43:39 AM JST
CleanTrash()
* Sun 30 Nov 2014 05:44:47 AM JST
        
* Sun 30 Nov 2014 05:44:49 AM JST
CleanBookmarks()
* Sun 30 Nov 2014 05:45:03 AM JST
        
* Sun 30 Nov 2014 05:45:04 AM JST
SVNPylib()
* Sun 30 Nov 2014 05:45:46 AM JST
WaitCloseSVNPylib
* Sun 30 Nov 2014 05:45:47 AM JST
        
* Sun 30 Nov 2014 05:46:11 AM JST
SVNEmacsd
* Sun 30 Nov 2014 05:46:13 AM JST

* Sun 30 Nov 2014 05:46:18 AM JST
WaitCloseSVNPylib
* Sun 30 Nov 2014 05:46:22 AM JST
SVNEmacsd
* Sun 30 Nov 2014 05:46:27 AM JST
self._tasks.append(Sleep(30))
* Sun 30 Nov 2014 05:46:37 AM JST
WaitCloseSVNEmacs
* Sun 30 Nov 2014 05:46:40 AM JST

* Sun 30 Nov 2014 05:49:25 AM JST
        
* Sun 30 Nov 2014 05:49:51 AM JST
NTPDate
* Sun 30 Nov 2014 05:49:55 AM JST

* Sun 30 Nov 2014 05:51:23 AM JST
ChromeHash
* Sun 30 Nov 2014 05:51:27 AM JST

* Sun 30 Nov 2014 05:51:45 AM JST
AptUpdate
* Sun 30 Nov 2014 05:51:46 AM JST

* Sun 30 Nov 2014 05:52:00 AM JST
ChromeRoot
* Sun 30 Nov 2014 05:52:01 AM JST

* Sun 30 Nov 2014 05:52:53 AM JST
BackupRemoteNI
* Sun 30 Nov 2014 05:52:54 AM JST

* Sun 30 Nov 2014 05:53:03 AM JST
RsyncMirrorData
* Sun 30 Nov 2014 05:53:05 AM JST
        
* Sun 30 Nov 2014 05:53:15 AM JST
VMware
* Sun 30 Nov 2014 05:53:17 AM JST

* Sun 30 Nov 2014 05:53:37 AM JST
KingPullBackup
* Sun 30 Nov 2014 05:53:38 AM JST

* Sun 30 Nov 2014 05:53:50 AM JST
KIHalt
* Sun 30 Nov 2014 05:53:51 AM JST

* Sun 30 Nov 2014 05:54:01 AM JST
WeeklyTaskBuilder
* Sun 30 Nov 2014 05:54:03 AM JST

* Sun 30 Nov 2014 05:54:17 AM JST

* Sun 30 Nov 2014 05:54:18 AM JST

* Sun 30 Nov 2014 05:54:18 AM JST
        self._tasks.append(WeeklyTaskBuilder())

* Sun 30 Nov 2014 05:55:39 AM JST
DailyTaskBuilder
* Sun 30 Nov 2014 05:55:58 AM JST
'/tmp/weekly.pickle'
* Sun 30 Nov 2014 06:10:56 AM JST
chrome
* Sun 30 Nov 2014 06:11:23 AM JST
ChromeHash
* Sun 30 Nov 2014 06:12:19 AM JST
chromehsh
* Sun 30 Nov 2014 06:20:04 AM JST
ActivityTime
* Sun 30 Nov 2014 06:21:26 AM JST
activity
* Sun 30 Nov 2014 06:41:40 AM JST

* Sun 30 Nov 2014 06:41:40 AM JST

* Sun 30 Nov 2014 06:41:40 AM JST
from tasklist import TaskList

* Sun 30 Nov 2014 06:41:42 AM JST

* Sun 30 Nov 2014 06:41:42 AM JST

* Sun 30 Nov 2014 06:41:42 AM JST
import shutil

* Sun 30 Nov 2014 06:42:00 AM JST
WaitCloseThunar
* Sun 30 Nov 2014 06:42:24 AM JST

* Sun 30 Nov 2014 06:43:55 AM JST

* Sun 30 Nov 2014 06:43:55 AM JST

* Sun 30 Nov 2014 06:43:55 AM JST
# from myarchive import MyArchive

* Sun 30 Nov 2014 06:44:06 AM JST
import backup_ni_remote
import backup_ki_pull

* Sun 30 Nov 2014 03:25:46 PM JST
inputpass.EasyGUIInputPass(title='CryptedDisk')
* Sun 30 Nov 2014 03:31:34 PM JST
passinputter
* Sun 30 Nov 2014 03:32:19 PM JST
MyArchive()
* Sun 30 Nov 2014 03:32:24 PM JST

* Sun 30 Nov 2014 03:32:24 PM JST

* Sun 30 Nov 2014 03:32:24 PM JST
        archive = MyArchive()

* Sun 30 Nov 2014 04:24:33 PM JST
class SVNPylib(Task):
    r"""SVNPYLIB

    SVNPYLIB is a Task.
    Responsibility:
    """
    def execute(self, ):
        r"""SUMMARY

        execute()

        @Return:

        @Error:
        """
        sbp.Popen(('emacs', '-f', 'svn-status-pylib'))


class Sleep(Task):
    r"""Sleep

    Sleep is a Task.
    Responsibility:
    """
    def __init__(self, times):
        r"""

        @Arguments:
        - `times`:
        """
        self._times = times

    def execute(self, ):
        r"""SUMMARY

        execute()

        @Return:

        @Error:
        """
        sleep(self._times)


class WaitCloseSVNPylib(Task):
    r"""WaitCloseSVNPylib

    WaitCloseSVNPylib is a Task.
    Responsibility:
    """
    def execute(self, ):
        r"""SUMMARY

        execute()

        @Return:

        @Error:
        """
        wm.WinWait().close(title='svn_pylib')


class SVNEmacsd(Task):
    r"""SVNEmacsd

    SVNEmacsd is a Task.
    Responsibility:
    """
    def execute(self, ):
        r"""SUMMARY

        execute()

        @Return:

        @Error:
        """
        sbp.Popen(('emacs', '-f', 'svn-status-emacsd'))


class WaitCloseSVNEmacs(Task):
    r"""WaitCloseSVNEmacs

    WaitCloseSVNEmacs is a Task.
    Responsibility:
    """
    def execute(self, ):
        r"""SUMMARY

        execute()

        @Return:

        @Error:
        """
        wm.WinWait().close(title='svn_emacsd')




* Sun 30 Nov 2014 04:25:31 PM JST
AutoCleanDownloads()
* Sun 30 Nov 2014 04:25:40 PM JST

* Sun 30 Nov 2014 04:25:40 PM JST

* Sun 30 Nov 2014 04:25:40 PM JST
        chromehsh = ChromeHash()

* Sun 30 Nov 2014 04:25:49 PM JST

* Sun 30 Nov 2014 04:25:49 PM JST

* Sun 30 Nov 2014 04:25:49 PM JST
        self._tasks.append(AutoCleanDownloads())

* Sun 30 Nov 2014 04:25:58 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:25:59 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:25:59 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:25:59 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:25:59 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:25:59 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:25:59 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:25:59 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:25:59 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:25:59 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:25:59 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:25:59 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:25:59 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:25:59 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:25:59 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:26:00 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:26:00 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:26:00 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:26:00 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:26:00 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:26:00 PM JST
self._tasks.append(
* Sun 30 Nov 2014 04:27:15 PM JST
                 
* Sun 30 Nov 2014 04:27:43 PM JST
class PreExecute(Task):
    r"""PreExecute

    PreExecute is a Task.
    Responsibility:
    """
    def execute(self, ):
        r"""SUMMARY

        execute()

        @Return:

        @Error:
        """
        with king.King() as ki:
            ki.wol()
            ki.pavedisk()
            if not ki.ismount():
                LOGGER.fatal('Not mounted remote /data.')
                raise StandardError('Not mounted remote /data.')



* Sun 30 Nov 2014 04:27:56 PM JST

* Sun 30 Nov 2014 04:27:56 PM JST

* Sun 30 Nov 2014 04:27:56 PM JST
CHROME_HASH = None

* Sun 30 Nov 2014 04:29:31 PM JST
ki.wol()
* Sun 30 Nov 2014 04:29:35 PM JST
        with king.King() as ki:
            ki.wol()
            ki.pavedisk()
            if not ki.ismount():
                LOGGER.fatal('Not mounted remote /data.')
                raise StandardError('Not mounted remote /data.')

* Sun 30 Nov 2014 04:29:49 PM JST

* Sun 30 Nov 2014 04:29:49 PM JST

* Sun 30 Nov 2014 04:29:49 PM JST
            ki.wol()

* Sun 30 Nov 2014 04:32:40 PM JST
LOGGER.info('\n\n{0:#^40}'.format(' Mirroring /data '))
* Sun 30 Nov 2014 04:32:50 PM JST
        mrr = mirror.DataMirror(verbose=True)
        mrr.push()
        mrr.pull()

* Sun 30 Nov 2014 04:32:53 PM JST

* Sun 30 Nov 2014 04:32:53 PM JST

* Sun 30 Nov 2014 04:32:53 PM JST
        mrr.push()

* Sun 30 Nov 2014 04:32:58 PM JST

* Sun 30 Nov 2014 04:32:58 PM JST

* Sun 30 Nov 2014 04:32:58 PM JST
        mrr.pull()

* Sun 30 Nov 2014 04:33:18 PM JST
                 
* Sun 30 Nov 2014 04:35:40 PM JST
self.
* Sun 30 Nov 2014 04:35:43 PM JST
                self.
* Sun 30 Nov 2014 05:29:50 PM JST
from mypath import MyArchive
* Sun 30 Nov 2014 05:30:29 PM JST
not 
* Sun 30 Nov 2014 05:37:40 PM JST
datetime.date.today()
* Sun 30 Nov 2014 05:37:48 PM JST

* Sun 30 Nov 2014 05:37:48 PM JST

* Sun 30 Nov 2014 05:37:48 PM JST
NOW = datetime.date.today()

* Sun 30 Nov 2014 09:36:57 PM JST
1 barrel
* Sun 30 Nov 2014 10:25:59 PM JST

* Sun 30 Nov 2014 10:25:59 PM JST

* Sun 30 Nov 2014 10:25:59 PM JST
        MyArchive()

* Sun 30 Nov 2014 10:26:20 PM JST
recipe.ARCHIVE_PATH