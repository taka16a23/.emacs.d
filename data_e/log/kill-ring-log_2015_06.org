
* Mon 01 Jun 2015 09:14:38 AM JST
ChangeWindowAttributes
* Mon 01 Jun 2015 09:15:03 AM JST
CW.EventMask
* Mon 01 Jun 2015 09:15:28 AM JST
            
* Mon 01 Jun 2015 09:16:12 AM JST
reply
* Mon 01 Jun 2015 09:18:11 AM JST
            print(event)
            print((event.window, event.x, event.y, event.width, event.height))

* Mon 01 Jun 2015 09:20:06 AM JST
self
* Mon 01 Jun 2015 09:20:11 AM JST
            print('{0.stack_mode} {0.window}, {0.sibling}, {0.x}, {0.y}, {0.width}, {0.height}, {0.border_width}, {0.value_mask}'.format(event))

* Mon 01 Jun 2015 09:20:15 AM JST

* Mon 01 Jun 2015 09:20:15 AM JST

* Mon 01 Jun 2015 09:20:15 AM JST
            print((event.window, event.x, event.y, event.width, event.height))

* Mon 01 Jun 2015 09:23:21 AM JST
73400323)
* Mon 01 Jun 2015 09:23:24 AM JST
73400323
* Mon 01 Jun 2015 09:24:12 AM JST
comix=73400323
from _xahk2.display import get_display
from _xahk2.desktop_window import DesktopWindow
from _xahk2.eventloop import EventLoop
DesktopWindow(get_display(), comix)

* Mon 01 Jun 2015 09:25:07 AM JST
get_display(), comix
* Mon 01 Jun 2015 09:25:21 AM JST
from _xahk2.window_client import WindowClient
* Mon 01 Jun 2015 09:25:25 AM JST
DesktopWindow(WindowClient.from_id(get_display(), comix))
* Mon 01 Jun 2015 09:25:36 AM JST
EventLoop.get_instance().dispatch_event()
* Mon 01 Jun 2015 09:27:20 AM JST
event.
* Mon 01 Jun 2015 09:28:46 AM JST
from _xahk2.root_window import RootWindow
* Mon 01 Jun 2015 09:28:58 AM JST
r=RootWindow(get_display())
* Mon 01 Jun 2015 09:29:35 AM JST
list_windows
* Mon 01 Jun 2015 09:30:26 AM JST
from _xahk2.root_window_client import RootWindowClient
* Mon 01 Jun 2015 09:30:33 AM JST
from _xahk2.root_window_client import RootWindowClient
* Mon 01 Jun 2015 09:30:36 AM JST
r=RootWindowClient()
* Mon 01 Jun 2015 09:30:54 AM JST
[('Desktop', 27262979),
 ('window.dia (/root/.pylib/_wm/uml) - dia-normal', 60817625),
 ('xfce4-terminal', 33554436),
 ('*Diagram1.dia (/root) - dia-normal', 52429017),
 ('dw - File Manager', 23080534),
 ('qBittorrent v2.9.8', 67108868),
 ('X Window System Protocol - Google Chrome', 65011713),
 ('Comix', 73400323),
 ('emacs@qu', 54525974),
 ('xfce4-panel', 25165828),
 ('xfce4-panel', 25165849)]

* Mon 01 Jun 2015 09:31:58 AM JST
        if isinstance(event, (xproto.ConfigureNotifyEvent, )):
            print(event)
            print('{0.event}, {0.window}, {0.above_sibling}, {0.x} {0.y}, {0.width}, {0.height}, {0.boder_width}, {0.override_redirect}'.format(event))

* Mon 01 Jun 2015 09:32:03 AM JST

* Mon 01 Jun 2015 09:32:03 AM JST

* Mon 01 Jun 2015 09:32:03 AM JST
        print(event.window)

* Mon 01 Jun 2015 09:32:04 AM JST

* Mon 01 Jun 2015 09:32:04 AM JST

* Mon 01 Jun 2015 09:32:04 AM JST
        print(event)

* Mon 01 Jun 2015 10:18:25 AM JST
        if isinstance(event, (xproto.ConfigureRequestEvent, )):
            print(event)
            print('{0.stack_mode} {0.window}, {0.sibling}, {0.x}, {0.y}, {0.width}, {0.height}, {0.border_width}, {0.value_mask}'.format(event))

* Mon 01 Jun 2015 10:23:43 AM JST
comix=73400323
from _xahk2.display import get_display
from _xahk2.window_client import WindowClient
from _xahk2.desktop_window import DesktopWindow
from _xahk2.eventloop import EventLoop

DesktopWindow(WindowClient.from_id(get_display(), comix))

* Mon 01 Jun 2015 10:23:48 AM JST
EventLoop.get_instance().dispatch_event()

* Mon 01 Jun 2015 10:27:02 AM JST
comix=73400323
from _xahk2.display import get_display
from _xahk2.window_client import WindowClient

* Mon 01 Jun 2015 10:32:56 AM JST
             
* Mon 01 Jun 2015 10:32:59 AM JST
Substructure
* Mon 01 Jun 2015 10:33:29 AM JST
from 
* Mon 01 Jun 2015 10:34:22 AM JST
ResizeRedirect
* Mon 01 Jun 2015 10:38:02 AM JST
comix=73400323
from _xahk2.display import get_display
from _xahk2.window_client import WindowClient
from _xahk2.desktop_window import DesktopWindow
from _xahk2.eventloop import EventLoop
DesktopWindow(WindowClient.from_id(get_display(), comix))
EventLoop.get_instance().dispatch_event()

* Mon 01 Jun 2015 10:38:10 AM JST
EventLoop.get_instance().dispatch_event()
* Mon 01 Jun 2015 10:39:37 AM JST
from _xahk2.root_window_client import RootWindowClient
r=RootWindowClient()

* Mon 01 Jun 2015 10:40:05 AM JST
[(w.title, w.id) for w in r.list_windows()]
* Mon 01 Jun 2015 10:40:27 AM JST
comix=73400323
from _xahk2.display import get_display
from _xahk2.window_client import WindowClient
from _xahk2.desktop_window import DesktopWindow
from _xahk2.eventloop import EventLoop
DesktopWindow(WindowClient.from_id(get_display(), comix))

* Mon 01 Jun 2015 10:40:32 AM JST
EventLoop.get_instance().dispatch_event()
* Mon 01 Jun 2015 10:40:52 AM JST
xproto.EventMask.ResizeRedirect |
* Mon 01 Jun 2015 10:40:52 AM JST
             
* Mon 01 Jun 2015 10:41:01 AM JST
comix=73400323
from _xahk2.display import get_display
from _xahk2.window_client import WindowClient
from _xahk2.desktop_window import DesktopWindow
from _xahk2.eventloop import EventLoop
DesktopWindow(WindowClient.from_id(get_display(), comix))
EventLoop.get_instance().dispatch_event()

* Mon 01 Jun 2015 10:41:06 AM JST
EventLoop.get_instance().dispatch_event()
* Mon 01 Jun 2015 10:43:39 AM JST
 # StructureNotifyMask
* Mon 01 Jun 2015 10:43:40 AM JST

* Mon 01 Jun 2015 10:43:40 AM JST

* Mon 01 Jun 2015 10:43:40 AM JST
                                  # xproto.ConfigureRequestEvent,

* Mon 01 Jun 2015 10:43:43 AM JST
xproto.ConfigureNotifyEvent,
* Mon 01 Jun 2015 10:43:51 AM JST

* Mon 01 Jun 2015 10:43:51 AM JST

* Mon 01 Jun 2015 10:43:51 AM JST
                                  # xproto.ResizeRequestEvent,

* Mon 01 Jun 2015 10:44:31 AM JST
xproto
* Mon 01 Jun 2015 10:44:38 AM JST
frm 
* Mon 01 Jun 2015 10:45:03 AM JST
xproto.
* Mon 01 Jun 2015 10:46:06 AM JST
            print('{0.event}, {0.window}, {0.above_sibling}, {0.x} {0.y},'
                  ' {0.width}, {0.height}, {0.border_width},'
                  ' {0.override_redirect}'.format(event))

* Mon 01 Jun 2015 10:46:14 AM JST
event)
* Mon 01 Jun 2015 10:46:14 AM JST
print(event)
* Mon 01 Jun 2015 10:46:27 AM JST
_notify_bounds
* Mon 01 Jun 2015 10:47:31 AM JST
xproto.PropertyNotifyEvent
* Mon 01 Jun 2015 10:57:15 AM JST
'_NET_WM_STATE'
* Mon 01 Jun 2015 10:57:46 AM JST

* Mon 01 Jun 2015 10:57:46 AM JST

* Mon 01 Jun 2015 10:57:46 AM JST
        print(mask)

* Mon 01 Jun 2015 10:57:58 AM JST
self.window.display
* Mon 01 Jun 2015 10:58:47 AM JST
'_NET_WM_STATE'
* Mon 01 Jun 2015 10:59:06 AM JST
'_NET_WM_STATE'
* Mon 01 Jun 2015 11:04:01 AM JST
'_NET_WM_NAME'
* Mon 01 Jun 2015 11:05:23 AM JST
event.atom
* Mon 01 Jun 2015 11:05:34 AM JST
self._atom_cache.get_atom('_NET_WM_NAME')
* Mon 01 Jun 2015 11:07:10 AM JST
DesktopWindow(WindowClient.from_id(get_display(), comix))
* Mon 01 Jun 2015 11:07:51 AM JST
'_NET_WM_STATE'
* Mon 01 Jun 2015 11:07:53 AM JST
w.window.get_property(False, '
* Mon 01 Jun 2015 11:07:57 AM JST
'_NET_WM_STATE'
* Mon 01 Jun 2015 11:09:09 AM JST
window
* Mon 01 Jun 2015 11:09:09 AM JST
w.window
* Mon 01 Jun 2015 11:09:11 AM JST
value
* Mon 01 Jun 2015 11:09:47 AM JST
struct.unpack('I'*rep.value_len, rep.value)
* Mon 01 Jun 2015 11:10:52 AM JST
self.
* Mon 01 Jun 2015 11:11:20 AM JST
'_NET_WM_STATE', 'ATOM'
* Mon 01 Jun 2015 11:11:39 AM JST
struct
* Mon 01 Jun 2015 11:11:39 AM JST
import struct
* Mon 01 Jun 2015 12:53:29 PM JST
list
* Mon 01 Jun 2015 12:53:37 PM JST
rep = self.window.window.get_property(False, '_NET_WM_STATE', 'ATOM')
* Mon 01 Jun 2015 12:53:43 PM JST
unpack('I' * rep.value_len, array('B', rep.value))
* Mon 01 Jun 2015 12:56:54 PM JST
pass
* Mon 01 Jun 2015 12:57:27 PM JST
_list_state()
* Mon 01 Jun 2015 12:57:27 PM JST
self._list_state()
* Mon 01 Jun 2015 12:57:46 PM JST
self._list_state()
* Mon 01 Jun 2015 12:58:05 PM JST
unpack('I' * rep.value_len, array('B', rep.value))
* Mon 01 Jun 2015 12:58:10 PM JST
set(
* Mon 01 Jun 2015 01:00:07 PM JST
'_NET_WM_STATE_FULLSCREEN'
* Mon 01 Jun 2015 02:21:46 PM JST
            states = self._list_state()
            added = states - self._current_state
            for state in added:
                self._dispatch_state_notify(state)

* Mon 01 Jun 2015 02:22:41 PM JST
self._atom_cache.get_atom('_NET_WM_STATE_FULLSCREEN')
* Mon 01 Jun 2015 02:22:48 PM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Mon 01 Jun 2015 02:23:01 PM JST
self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT')
* Mon 01 Jun 2015 02:24:20 PM JST
'_NET_WM_STATE_HIDDEN'
* Mon 01 Jun 2015 02:25:32 PM JST
event
* Mon 01 Jun 2015 02:25:34 PM JST
event
* Mon 01 Jun 2015 02:26:46 PM JST
        for observer in self._observers:
            observer.on_window_minimized()

* Mon 01 Jun 2015 02:30:16 PM JST
class DesktopWindowObserver:
    """Class DesktopWindowObserver
    """
    # Attributes:
    
    # Operations
    def on_window_minimized(self):
        """function on_window_minimized
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_window_maximized(self):
        """function on_window_maximized
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_window_activate(self):
        """function on_window_activate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_window_deactivated(self):
        """function on_window_deactivated
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_window_destroyed(self):
        """function on_window_destroyed
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_window_fullscreened(self):
        """function on_window_fullscreened
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_window_bounds_changed(self):
        """function on_window_bounds_changed
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_window_title_changed(self):
        """function on_window_title_changed
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_window_shown(self):
        """function on_window_shown
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_window_hidden(self):
        """function on_window_hidden
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Mon 01 Jun 2015 02:33:32 PM JST
, window
* Mon 01 Jun 2015 02:34:52 PM JST
    def on_window_minimized(self, window):
        """function on_window_minimized

        returns
        """
        return None # should raise NotImplementedError()

    def on_window_maximized(self, window):
        """function on_window_maximized

        returns
        """
        return None # should raise NotImplementedError()


* Mon 01 Jun 2015 02:35:29 PM JST
return None # should raise NotImplementedError()
* Mon 01 Jun 2015 02:36:05 PM JST
print('Window(id={0.id}, title="{0.title}" minimized)')
* Mon 01 Jun 2015 02:36:20 PM JST
print('Window(id={0.id}, title="{0.title}" minimized)'.format(window))
* Mon 01 Jun 2015 02:36:54 PM JST
    def on_window_bounds_changed(self, window):
        """function on_window_bounds_changed

        returns
        """
        return None # should raise NotImplementedError()

* Mon 01 Jun 2015 02:36:57 PM JST
    def on_window_bounds_changed(self, window):
        """function on_window_bounds_changed

        returns
        """
        return None # should raise NotImplementedError()

* Mon 01 Jun 2015 02:38:40 PM JST
event
* Mon 01 Jun 2015 02:39:25 PM JST
event
* Mon 01 Jun 2015 02:40:24 PM JST
return None # should raise NotImplementedError()
* Mon 01 Jun 2015 02:42:12 PM JST
comix=73400323
from _xahk2.display import get_display
from _xahk2.window_client import WindowClient
from _xahk2.desktop_window import DesktopWindow
from _xahk2.eventloop import EventLoop
d=DesktopWindow(WindowClient.from_id(get_display(), comix))

* Mon 01 Jun 2015 02:42:37 PM JST
window
* Mon 01 Jun 2015 02:43:09 PM JST
xah
* Mon 01 Jun 2015 02:43:09 PM JST
form _xah
* Mon 01 Jun 2015 02:43:38 PM JST
DesktopWindow
* Mon 01 Jun 2015 02:44:02 PM JST
DebugDesktopWindowObserver
* Mon 01 Jun 2015 02:44:10 PM JST
comix=73400323
from _xahk2.display import get_display
from _xahk2.window_client import WindowClient
from _xahk2.desktop_window import DesktopWindow
from _xahk2.desktop_window_observer import DebugDesktopWindowObserver
from _xahk2.eventloop import EventLoop
d=DesktopWindow(WindowClient.from_id(get_display(), comix))

* Mon 01 Jun 2015 02:44:13 PM JST
d.add_observer(DebugDesktopWindowObserver())

* Mon 01 Jun 2015 02:44:23 PM JST
EventLoop.get_instance().dispatch_event()
* Mon 01 Jun 2015 02:45:26 PM JST
minimized
* Mon 01 Jun 2015 02:45:30 PM JST
maximized
* Mon 01 Jun 2015 02:49:18 PM JST
xproto.
* Mon 01 Jun 2015 02:50:15 PM JST
_NET_WM_STATE_SHADED
* Mon 01 Jun 2015 02:51:02 PM JST
event
* Mon 01 Jun 2015 02:51:07 PM JST
event
* Mon 01 Jun 2015 02:51:20 PM JST
        if isinstance(event, (xproto.DestroyNotifyEvent, )):
            self._notify_window_destroyed()

* Mon 01 Jun 2015 03:23:51 PM JST
self._root
* Mon 01 Jun 2015 03:26:39 PM JST
on_changed_active_window
* Mon 01 Jun 2015 03:26:54 PM JST
on_changed_active_window
* Mon 01 Jun 2015 03:27:52 PM JST
Observable
* Mon 01 Jun 2015 03:28:11 PM JST

* Mon 01 Jun 2015 03:28:11 PM JST

* Mon 01 Jun 2015 03:28:11 PM JST
        self._observers = []

* Mon 01 Jun 2015 03:34:40 PM JST

* Mon 01 Jun 2015 03:34:40 PM JST

* Mon 01 Jun 2015 03:34:40 PM JST
        self._notify_window_deactivate(self._current_window)

* Mon 01 Jun 2015 03:38:51 PM JST
X11DesktopHandlerObserver
* Mon 01 Jun 2015 03:40:28 PM JST
self
* Mon 01 Jun 2015 03:40:50 PM JST
sef.
* Mon 01 Jun 2015 03:41:18 PM JST
is_ac
* Mon 01 Jun 2015 03:41:18 PM JST
self.is_ac
* Mon 01 Jun 2015 03:42:08 PM JST
sle
* Mon 01 Jun 2015 03:43:12 PM JST
X11DesktopHandler
* Mon 01 Jun 2015 03:44:53 PM JST
    def on_window_activate(self, window):
        """function on_window_activate

        returns
        """
        return None # should raise NotImplementedError()

    def on_window_deactivated(self, window):
        """function on_window_deactivated

        returns
        """
        return None # should raise NotImplementedError()

* Mon 01 Jun 2015 03:45:05 PM JST
return None # should raise NotImplementedError()
* Mon 01 Jun 2015 03:45:34 PM JST
return None # should raise NotImplementedError()
* Mon 01 Jun 2015 03:46:10 PM JST
comix=73400323
from _xahk2.display import get_display
from _xahk2.window_client import WindowClient
from _xahk2.desktop_window import DesktopWindow
from _xahk2.desktop_window_observer import DebugDesktopWindowObserver
from _xahk2.eventloop import EventLoop
d=DesktopWindow(WindowClient.from_id(get_display(), comix))
d.add_observer(DebugDesktopWindowObserver())
EventLoop.get_instance().dispatch_event()

* Mon 01 Jun 2015 03:46:29 PM JST
EventLoop.get_instance().dispatch_event()

* Mon 01 Jun 2015 03:46:34 PM JST
EventLoop.get_instance().dispatch_event()
* Mon 01 Jun 2015 03:48:10 PM JST
get_display
* Mon 01 Jun 2015 03:48:24 PM JST
.get_setup().roots[0].root
* Mon 01 Jun 2015 03:48:33 PM JST
        self._display.core.ChangeWindowAttributes(
            self._root, CW.EventMask,
            [self._display.core.GetWindowAttributes(
                self._root).reply().your_event_mask

* Mon 01 Jun 2015 03:48:36 PM JST
        self._display.core.ChangeWindowAttributes(
            self._root, CW.EventMask,
            [self._display.core.GetWindowAttributes(
                self._root).reply().your_event_mask
             | EventMask.PropertyChange])

* Mon 01 Jun 2015 03:48:42 PM JST
display
* Mon 01 Jun 2015 03:48:43 PM JST
self._display
* Mon 01 Jun 2015 03:48:45 PM JST
  
* Mon 01 Jun 2015 03:48:48 PM JST
self._
* Mon 01 Jun 2015 03:48:49 PM JST
                               
* Mon 01 Jun 2015 03:48:52 PM JST
display
* Mon 01 Jun 2015 03:48:53 PM JST
self._display
* Mon 01 Jun 2015 03:49:00 PM JST
                                                                                            
* Mon 01 Jun 2015 03:49:02 PM JST
self._
* Mon 01 Jun 2015 03:49:12 PM JST
                                                                                            
* Mon 01 Jun 2015 03:49:28 PM JST
from xcb.xproto import CW, EventMask, PropertyNotifyEvent
* Mon 01 Jun 2015 03:49:40 PM JST
comix=73400323
from _xahk2.display import get_display
from _xahk2.window_client import WindowClient
from _xahk2.desktop_window import DesktopWindow
from _xahk2.desktop_window_observer import DebugDesktopWindowObserver
from _xahk2.eventloop import EventLoop
from xcb.xproto import CW, EventMask, PropertyNotifyEvent

* Mon 01 Jun 2015 03:49:57 PM JST
d=DesktopWindow(WindowClient.from_id(get_display(), comix))
d.add_observer(DebugDesktopWindowObserver())
c=get_display()
root=c.get_setup().roots[0].root
c.core.ChangeWindowAttributes(
root, CW.EventMask, [c.core.GetWindowAttributes(root).reply().your_event_mask | EventMask.PropertyChange])

* Mon 01 Jun 2015 03:50:09 PM JST
EventLoop.get_instance().dispatch_event()
* Mon 01 Jun 2015 04:02:00 PM JST
_root, 
* Mon 01 Jun 2015 04:02:00 PM JST
self._root, 
* Mon 01 Jun 2015 04:26:26 PM JST

* Mon 01 Jun 2015 04:26:26 PM JST

* Mon 01 Jun 2015 04:26:26 PM JST
        X11DesktopHandler.get_instance().add_observer(self)

* Mon 01 Jun 2015 04:28:02 PM JST
X11DesktopHandlerObserver
* Mon 01 Jun 2015 04:28:14 PM JST
'_NET_WM_STATE', 'ATOM'
* Mon 01 Jun 2015 04:28:42 PM JST
'WM_NAME'
* Mon 01 Jun 2015 04:28:46 PM JST
'_NET_WM_NAME'
* Mon 01 Jun 2015 04:28:55 PM JST
'_NET_WM_STATE_FULLSCREEN'
* Mon 01 Jun 2015 04:28:59 PM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Mon 01 Jun 2015 04:29:02 PM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Mon 01 Jun 2015 04:29:08 PM JST
'_NET_WM_STATE_HIDDEN'
* Mon 01 Jun 2015 04:29:12 PM JST
'_NET_WM_STATE_SHADED'
* Mon 01 Jun 2015 04:29:17 PM JST
'_NET_WM_STATE',
* Mon 01 Jun 2015 04:29:18 PM JST
    '_NET_WM_STATE',
* Mon 01 Jun 2015 04:29:34 PM JST
                                     
* Mon 01 Jun 2015 04:31:07 PM JST
    def __int__(self):
        return self.id


* Mon 01 Jun 2015 04:31:15 PM JST
    def __eq__(self, other):
        if isinstance(other, (WindowClient, Window)):
            return self.id == other.id
        return self.id == other


* Mon 01 Jun 2015 04:31:23 PM JST
WindowClient
* Mon 01 Jun 2015 04:32:23 PM JST

* Mon 01 Jun 2015 04:32:23 PM JST

* Mon 01 Jun 2015 04:32:23 PM JST
    title = property(get_title)

* Mon 01 Jun 2015 04:33:29 PM JST
pid = property(get_pid)
* Mon 01 Jun 2015 04:33:45 PM JST
type = property(get_type)
* Mon 01 Jun 2015 04:35:20 PM JST
widnow
* Mon 01 Jun 2015 04:35:38 PM JST
    def show(self):
        """function show

        returns
        """
        # TODO: (Atami) [2015/05/29]
        data = StringIO()
        data.write(pack('5I', ChangingWindowState.NORMAL_STATE, 0, 0, 0, 0))
        self._send_client_message(
            EventMask.SubstructureRedirect|EventMask.SubstructureNotify,
            self._atom_cache.get_atom('WM_CHANGE_STATE'), data.get_value())

    def maximize(self, mode=WindowStateMode.Set):
        """function maximize

        mode: int

        returns
        """
        data = StringIO()
        data.write(pack(
            '5I', mode,
            self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT'),
            self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_HORZ'), 0, 0))
        self._send_client_message(
            EventMask.SubstructureRedirect,
            self._atom_cache.get_atom('_NET_WM_STATE'), data.getvalue())

    def is_maximized(self):
        """function is_maximized

        returns
        """
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
        atoms = unpack('I' * reply.value_len, array('B', reply.value).tostring())
        return (
            self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT') in atoms
            and
            self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_HORZ') in atoms)

    def restore(self):
        """function restore

        returns
        """
        self.maximize(WindowStateMode.Unset)
        if self.is_minimized():
            # TODO: (Atami) [2015/05/23]
            self.show()

    def activate(self):
        """function activate

        returns
        """
        data = StringIO()
        data.write(pack('5I', 0, 0, 0, 0, 0))
        self._send_client_message(
            EventMask.SubstructureRedirect|EventMask.SubstructureNotify,
            self._atom_cache.get_atom('_NET_ACTIVE_WINDOW'), data.getvalue())

    def is_active(self):
        """function is_active

        returns
        """
        return self.id == self.root.get_active_window()

    def deactivate(self):
        """function deactivate

        returns
        """
        return None # should raise NotImplementedError()

    def set_always_on_top(self, mode=WindowStateMode.Set):
        """function set_always_on_top

        mode:

        returns
        """
        data = StringIO()
        data.write('5I', mode, self._atom_cache.get_atom('_NET_WM_STATE_ABOVE'),
                   0, 0, 0)
        self._send_client_message(
            EventMask.SubstructureRedirect,
            self._atom_cache.get_atom('_NET_WM_STATE'),
            data.getvalue())

    def is_always_on_top(self):
        """function is_always_on_top

        returns bool
        """
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
        atoms = unpack('I' * reply.value_len, array('B', reply.value).tostring())
        return self._atom_cache.get_atom('_NET_WM_STATE_ABOVE') in atoms

    def set_always_on_bottom(self, mode=WindowStateMode.Set):
        """function set_always_on_bottom

        mode:

        returns
        """
        data = StringIO()
        data.write('5I', mode, self._atom_cache.get_atom('_NET_WM_STATE_BELOW'),
                   0, 0, 0)
        self._send_client_message(
            EventMask.SubstructureRedirect,
            self._atom_cache.get_atom('_NET_WM_STATE'),
            data.getvalue())

    def is_always_on_bottom(self):
        """function is_always_on_bottom

        returns
        """
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
        atoms = unpack('I' * reply.value_len, array('B', reply.value).tostring())
        return self._atom_cache.get_atom('_NET_WM_STATE_BELOW') in atoms

    def set_fullscreen(self, mode=WindowStateMode.Set):
        """function set_fullscreen

        mode:

        returns
        """
        data = StringIO()
        data.write('5I', mode,
                   self._atom_cache.get_atom('_NET_WM_STATE_FULLSCREEN'),
                   0, 0, 0)
        self._send_client_message(
            EventMask.SubstructureRedirect,
            self._atom_cache.get_atom('_NET_WM_STATE'),
            data.getvalue())

    def is_fullscreen(self):
        """function is_fullscreen

        returns
        """
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
        atoms = unpack('I' * reply.value_len, array('B', reply.value).tostring())
        return self._atom_cache.get_atom('_NET_WM_STATE_FULLSCREEN') in atoms

    def set_shade(self, mode):
        """function set_shade

        mode:

        returns
        """
        data = StringIO()
        data.write('5I', mode,
                   self._atom_cache.get_atom('_NET_WM_STATE_SHADED'),
                   0, 0, 0)
        self._send_client_message(
            EventMask.SubstructureRedirect,
            self._atom_cache.get_atom('_NET_WM_STATE'),
            data.getvalue())

    def is_shaded(self):
        """function is_shaded

        returns
        """
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
        atoms = unpack('I' * reply.value_len, array('B', reply.value).tostring())
        return self._atom_cache.get_atom('_NET_WM_STATE_SHADED') in atoms

    def hide(self):
        """function hide

        returns
        """
        # TODO: (Atami) [2015/05/29]
        data = StringIO()
        data.write(pack('5I', ChangingWindowState.WITHDRAWN_STATE, 0, 0, 0, 0))
        self._send_client_message(
            0xffffff, self._atom_cache.get_atom('WM_CHANGE_STATE'),
            data.getvalue())

    def close(self):
        """function close

        returns
        """
        data = StringIO()
        data.write(pack('5I', 0, 0, 0, 0, 0))
        self._send_client_message(0xffffff,
                                  self._atom_cache.get_atom('_NET_CLOSE_WINDOW'),
                                  data.getvalue())

    def delete(self):
        """function delete

        returns
        """
        data = StringIO()
        data.write(pack('5I', self._atom_cache.get_atom('WM_DELETE_WINDOW'),
                         0, 0, 0, 0))
        self._send_client_message(0xffffff,
                                  self._atom_cache.get_atom('WM_PROTOCOLS'),
                                  data.getvalue())

    def destroy(self):
        """function destroy

        returns
        """
        self.window.destroy()

    def move_cursor_to(self, point):
        """function move_cursor_to

        point:

        returns
        """
        # TODO: (Atami) [2015/05/29]
        self.window.warp_pointer(0, 0, 0, 0, 0, point.x, point.y)

    def raise_window(self):
        """function raise

        returns
        """
        self.window.configure(ConfigWindow.StackMode, [StackMode.Above])

    def lower_window(self):
        """function lower

        returns
        """
        self.window.configure(ConfigWindow.StackMode, [StackMode.Below])

    def get_desktop(self, ):
        r"""SUMMARY

        get_desktop()

        @Return:

        @Error:
        """
        # TODO: (Atami) [2015/05/29]
        pass

    def change_desktop(self, ):
        r"""SUMMARY

        change_desktop()

        @Return:

        @Error:
        """
        # TODO: (Atami) [2015/05/29]
        pass

* Mon 01 Jun 2015 04:36:23 PM JST
class WindowStateMode(_IntEnum):
    r"""SUMMARY
    """
    Unset  = 0
    Set    = 1
    Toggle = 2

* Mon 01 Jun 2015 04:36:56 PM JST
_
* Mon 01 Jun 2015 04:36:56 PM JST
form _
* Mon 01 Jun 2015 04:38:20 PM JST
return self.id == self.root.get_active_window()
* Mon 01 Jun 2015 04:38:43 PM JST

* Mon 01 Jun 2015 04:38:43 PM JST

* Mon 01 Jun 2015 04:38:43 PM JST
        self.is_active = self.window.is_active()

* Mon 01 Jun 2015 04:38:52 PM JST
return None # should raise NotImplementedError()
* Mon 01 Jun 2015 04:39:28 PM JST
windwo.
* Mon 01 Jun 2015 04:40:41 PM JST
self.
* Mon 01 Jun 2015 04:41:34 PM JST
windwo.
* Mon 01 Jun 2015 04:41:54 PM JST
pass
* Mon 01 Jun 2015 04:42:07 PM JST
pass
* Mon 01 Jun 2015 04:42:57 PM JST

* Mon 01 Jun 2015 04:42:57 PM JST

* Mon 01 Jun 2015 04:42:57 PM JST
                                  # xproto.UnmapNotifyEvent,

* Mon 01 Jun 2015 05:09:45 PM JST
from _xahk.eventdispatcher import EventDispatcher
* Mon 01 Jun 2015 05:10:15 PM JST
_xahk2
* Mon 01 Jun 2015 05:11:07 PM JST
display
* Mon 01 Jun 2015 05:11:37 PM JST
EventLoop.get_instance().add_event_dispatcher(self)
* Mon 01 Jun 2015 05:14:18 PM JST
CreateNotifyEvent
* Mon 01 Jun 2015 05:14:30 PM JST
PropertyNotifyEvent
* Mon 01 Jun 2015 05:21:56 PM JST
KATOM_TO_CACHE_FOR_WINDOW_MANAGER
* Mon 01 Jun 2015 05:23:36 PM JST
'_NET_CLIENT_LIST'
* Mon 01 Jun 2015 05:31:13 PM JST
self._root.list_windows()
* Mon 01 Jun 2015 05:31:39 PM JST
_client_windo
* Mon 01 Jun 2015 05:32:40 PM JST
self.
* Mon 01 Jun 2015 05:33:10 PM JST
create
* Mon 01 Jun 2015 05:33:27 PM JST
window
* Mon 01 Jun 2015 05:34:40 PM JST
DesktopWindow(window)
* Mon 01 Jun 2015 05:36:05 PM JST
newwin
* Mon 01 Jun 2015 05:36:08 PM JST
new
* Mon 01 Jun 2015 05:37:12 PM JST
10)
* Mon 01 Jun 2015 05:37:12 PM JST
bas
* Mon 01 Jun 2015 05:37:13 PM JST
x, bas
* Mon 01 Jun 2015 05:37:13 PM JST
int(x, bas
* Mon 01 Jun 2015 05:37:39 PM JST
window.get_id()
* Mon 01 Jun 2015 05:37:46 PM JST
window
* Mon 01 Jun 2015 05:45:41 PM JST
        self._windows = set(
            [DesktopWindow(w) for w in self._root.list_windows()])

* Mon 01 Jun 2015 05:46:02 PM JST
sle
* Mon 01 Jun 2015 05:47:34 PM JST
get_supporting_wm_check_window
* Mon 01 Jun 2015 05:48:08 PM JST
sef.
* Mon 01 Jun 2015 05:48:09 PM JST
slf.
* Mon 01 Jun 2015 05:48:48 PM JST
_display.
* Mon 01 Jun 2015 05:48:48 PM JST
self._display.
* Mon 01 Jun 2015 05:49:45 PM JST
'_NET_CLIENT_LIST'
* Mon 01 Jun 2015 06:17:30 PM JST
self
* Mon 01 Jun 2015 06:17:35 PM JST
DesktopWindow
* Mon 01 Jun 2015 06:18:00 PM JST
for w in self._root.list_windows()
* Mon 01 Jun 2015 06:42:01 PM JST
on_created
* Mon 01 Jun 2015 06:42:16 PM JST
on_destroyed_window
* Tue 02 Jun 2015 08:59:41 AM JST
        elif event.atom == self._atom_cache.get_atom('_NET_WM_STATE'):
            self._dispatch_state_notify()

* Tue 02 Jun 2015 09:01:33 AM JST
"elif"
* Tue 02 Jun 2015 09:02:22 AM JST

* Tue 02 Jun 2015 09:02:22 AM JST

* Tue 02 Jun 2015 09:02:22 AM JST
                ("if"       "elif")

* Tue 02 Jun 2015 09:02:22 AM JST
                ("if"       "elif")

* Tue 02 Jun 2015 09:02:22 AM JST
                ("if"       "elif")
                ("elif"     "else")

* Tue 02 Jun 2015 09:04:33 AM JST
title
* Tue 02 Jun 2015 09:06:01 AM JST

* Tue 02 Jun 2015 09:06:01 AM JST

* Tue 02 Jun 2015 09:06:01 AM JST
        title = self._prop_cache.get('title', None)

* Tue 02 Jun 2015 09:06:07 AM JST
self._prop_cache['title']
* Tue 02 Jun 2015 09:07:33 AM JST
'WM_CLASS'
* Tue 02 Jun 2015 09:08:01 AM JST

* Tue 02 Jun 2015 09:08:01 AM JST

* Tue 02 Jun 2015 09:08:01 AM JST
            self._prop_cache['title'] = self.window.get_title()

* Tue 02 Jun 2015 09:09:23 AM JST
self._prop_cache['wmclass']
* Tue 02 Jun 2015 09:09:37 AM JST
        elif event.atom in (self._atom_cache.get_atom('WM_NAME'),
                          self._atom_cache.get_atom('_NET_WM_NAME')):
            self._prop_cache['title'] = self.window.get_title()
            self._notify_title_change()

* Tue 02 Jun 2015 09:11:05 AM JST
get_pid()
* Tue 02 Jun 2015 09:11:06 AM JST
window.get_pid()
* Tue 02 Jun 2015 09:11:06 AM JST
self.window.get_pid()
* Tue 02 Jun 2015 09:11:09 AM JST
self._prop_cache['pid']
* Tue 02 Jun 2015 09:11:33 AM JST
'_NET_WM_WINDOW_TYPE'
* Tue 02 Jun 2015 09:12:13 AM JST
get_type()
* Tue 02 Jun 2015 09:12:13 AM JST
window
* Tue 02 Jun 2015 09:12:14 AM JST
self.window
* Tue 02 Jun 2015 09:12:18 AM JST
self._prop_cache['type']
* Tue 02 Jun 2015 09:17:00 AM JST
'WM_CLASS'
* Tue 02 Jun 2015 09:17:14 AM JST
'_NET_WM_PID'
* Tue 02 Jun 2015 09:17:20 AM JST
'_NET_WM_WINDOW_TYPE'
* Tue 02 Jun 2015 09:19:10 AM JST
rotate
* Tue 02 Jun 2015 09:19:11 AM JST
rotate-text-rotations
* Tue 02 Jun 2015 09:22:03 AM JST
rotate
* Tue 02 Jun 2015 09:22:05 AM JST
rotate-word-at-point
* Tue 02 Jun 2015 09:26:04 AM JST
if :
* Tue 02 Jun 2015 09:29:22 AM JST
"final"
* Tue 02 Jun 2015 09:48:57 AM JST

* Tue 02 Jun 2015 09:48:58 AM JST

* Tue 02 Jun 2015 09:48:58 AM JST
from _xahk2 import 

* Tue 02 Jun 2015 09:49:48 AM JST
from _xahk2.eventloop import EventLoop
from _xahk2.window_manager import WindowManager
wm = WindowManager.get_instance()

* Tue 02 Jun 2015 09:50:12 AM JST
from _xahk2.eventloop import EventLoop
from _xahk2.window_manager import WindowManager
wm = WindowManager.get_instance()

* Tue 02 Jun 2015 09:51:03 AM JST
Change
* Tue 02 Jun 2015 09:51:09 AM JST
Change
* Tue 02 Jun 2015 09:51:47 AM JST
self._windows
* Tue 02 Jun 2015 09:52:47 AM JST
title
* Tue 02 Jun 2015 09:55:48 AM JST
self._notify_window_bounds_changed()
* Tue 02 Jun 2015 09:56:03 AM JST
DesktopWindow
* Tue 02 Jun 2015 09:56:13 AM JST
Desk
* Tue 02 Jun 2015 09:56:23 AM JST
desktop
* Tue 02 Jun 2015 09:56:24 AM JST
desktop_window_observer
* Tue 02 Jun 2015 09:56:36 AM JST
DebugDesktopWindowObserver
* Tue 02 Jun 2015 09:59:41 AM JST
self.
* Tue 02 Jun 2015 10:00:04 AM JST
from _xahk2.eventloop import EventLoop
from _xahk2.window_manager import WindowManager
from _xahk2.desktop_window_observer import DebugDesktopWindowObserver

wm = WindowManager.get_instance()

* Tue 02 Jun 2015 10:00:08 AM JST
wm.list_windows()
* Tue 02 Jun 2015 10:00:17 AM JST
title
* Tue 02 Jun 2015 10:00:28 AM JST
DebugDesktopWindowObserver
* Tue 02 Jun 2015 10:00:53 AM JST
title
* Tue 02 Jun 2015 10:01:05 AM JST
DebugDesktopWindowObserver
* Tue 02 Jun 2015 10:01:31 AM JST
EventLoop.get_instance().dispatch_event()
* Tue 02 Jun 2015 10:02:22 AM JST
        self._counts += 1
        window.set_title('hello {}'.format(self._counts))
        window.window.display.flush()

* Tue 02 Jun 2015 10:03:20 AM JST
from _xahk2.eventloop import EventLoop
from _xahk2.window_manager import WindowManager
from _xahk2.desktop_window_observer import DebugDesktopWindowObserver

wm = WindowManager.get_instance()

* Tue 02 Jun 2015 10:03:24 AM JST
wm.list_windows()
* Tue 02 Jun 2015 10:03:46 AM JST
DebugDesktopWindowObserver
* Tue 02 Jun 2015 10:03:52 AM JST
EventLoop.get_instance().dispatch_event()
* Tue 02 Jun 2015 10:13:18 AM JST
self._prop_cache['bounds']
* Tue 02 Jun 2015 10:13:48 AM JST
mode=WindowStateMode.Set
* Tue 02 Jun 2015 10:13:53 AM JST
mode
* Tue 02 Jun 2015 10:15:00 AM JST

* Tue 02 Jun 2015 10:15:00 AM JST

* Tue 02 Jun 2015 10:15:00 AM JST
            print('DEBUG-1-desktop_window.py')

* Tue 02 Jun 2015 10:15:01 AM JST

* Tue 02 Jun 2015 10:15:01 AM JST

* Tue 02 Jun 2015 10:15:01 AM JST
            print('DEBUG-2-desktop_window.py')

* Tue 02 Jun 2015 10:15:01 AM JST

* Tue 02 Jun 2015 10:15:02 AM JST

* Tue 02 Jun 2015 10:15:02 AM JST
            print('DEBUG-3-desktop_window.py')

* Tue 02 Jun 2015 10:15:02 AM JST

* Tue 02 Jun 2015 10:15:02 AM JST

* Tue 02 Jun 2015 10:15:02 AM JST
            print('DEBUG-4-desktop_window.py')

* Tue 02 Jun 2015 10:15:08 AM JST

* Tue 02 Jun 2015 10:15:08 AM JST

* Tue 02 Jun 2015 10:15:08 AM JST
            print('DEBUG-5-desktop_window.py')

* Tue 02 Jun 2015 10:15:10 AM JST

* Tue 02 Jun 2015 10:15:10 AM JST

* Tue 02 Jun 2015 10:15:10 AM JST
            print('DEBUG-6-desktop_window.py')

* Tue 02 Jun 2015 10:15:11 AM JST

* Tue 02 Jun 2015 10:15:12 AM JST

* Tue 02 Jun 2015 10:15:12 AM JST
            print('DEBUG-7-desktop_window.py')

* Tue 02 Jun 2015 10:15:13 AM JST

* Tue 02 Jun 2015 10:15:13 AM JST

* Tue 02 Jun 2015 10:15:13 AM JST
            print('DEBUG-8-desktop_window.py')

* Tue 02 Jun 2015 10:20:46 AM JST
set(
* Tue 02 Jun 2015 10:20:47 AM JST
            
* Tue 02 Jun 2015 10:22:11 AM JST
_
* Tue 02 Jun 2015 10:22:11 AM JST
self._
* Tue 02 Jun 2015 10:22:39 AM JST
from _xahk2.eventloop import EventLoop
from _xahk2.window_manager import WindowManager
from _xahk2.desktop_window_observer import DebugDesktopWindowObserver

wm = WindowManager.get_instance()
wm.list_windows()

* Tue 02 Jun 2015 10:22:45 AM JST
wm.list_windows()
* Tue 02 Jun 2015 10:23:48 AM JST
DebugDesktopWindowObserver
* Tue 02 Jun 2015 10:23:54 AM JST
EventLoop.get_instance().dispatch_event()
* Tue 02 Jun 2015 10:24:14 AM JST
590, 614, 553, 349
* Tue 02 Jun 2015 01:49:23 PM JST
get_supporting_wm_check_window
* Tue 02 Jun 2015 02:23:35 PM JST
handle_event
* Tue 02 Jun 2015 02:28:24 PM JST
change_attributes
* Tue 02 Jun 2015 03:07:44 PM JST
atom
* Tue 02 Jun 2015 03:09:25 PM JST
self._display.core.InternAtom(
                False, len(name), name)
* Tue 02 Jun 2015 03:09:34 PM JST
                
* Tue 02 Jun 2015 03:10:07 PM JST

* Tue 02 Jun 2015 03:10:07 PM JST

* Tue 02 Jun 2015 03:10:07 PM JST
        cookie_map = {}

* Tue 02 Jun 2015 03:10:59 PM JST
cache_atom
* Tue 02 Jun 2015 03:11:01 PM JST
AtomCa
* Tue 02 Jun 2015 03:11:05 PM JST
Cache
* Tue 02 Jun 2015 03:11:34 PM JST
import xcb,xcb.xproto as xproto;c=xcb.connect()
* Tue 02 Jun 2015 03:15:53 PM JST
class Window(Drawable):
    """Class Window
    """
    # Attributes:
    
    # Operations
    def send_event(self, propagate, event_mask, event):
        """function send_event
        
        propagate: 
        event_mask: 
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def send_event_checked(self, propagate, event_mask, event):
        """function send_event_checked
        
        propagate: 
        event_mask: 
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def destroy(self):
        """function destroy
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def destroy_checked(self):
        """function destroy_checked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def create_window(self, depth, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        """function create_window
        
        depth: 
        parent: 
        x: 
        y: 
        width: 
        height: 
        border_width: 
        _class: 
        visual: 
        value_mask: 
        value_list: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def create_window_checked(self, depth, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        """function create_window_checked
        
        depth: 
        parent: 
        x: 
        y: 
        width: 
        height: 
        border_width: 
        _class: 
        visual: 
        value_mask: 
        value_list: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def change_attributes(self, value_mask, value_list):
        """function change_attributes
        
        value_mask: 
        value_list: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def change_attributes_checked(self, value_mask, value_list):
        """function change_attributes_checked
        
        value_mask: 
        value_list: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_attributes(self):
        """function get_attributes
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_attributes_unchecked(self):
        """function get_attributes_unchecked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def destroy_subwindows(self):
        """function destroy_subwindows
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def destroy_subwindows_checked(self):
        """function destroy_subwindows_checked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def change_save_set(self, mode):
        """function change_save_set
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def change_save_set_checked(self, mode):
        """function change_save_set_checked
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def reparent(self, parent, x, y):
        """function reparent
        
        parent: 
        x: 
        y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def reparent_checked(self, parent, x, y):
        """function reparent_checked
        
        parent: 
        x: 
        y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def map(self):
        """function map
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def map_checked(self):
        """function map_checked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def map_subwindows(self):
        """function map_subwindows
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def map_subwindows_checked(self):
        """function map_subwindows_checked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unmap(self):
        """function unmap
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unmap_checked(self):
        """function unmap_checked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unmap_subwindows(self):
        """function unmap_subwindows
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unmap_subwindows_checked(self):
        """function unmap_subwindows_checked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def configure(self, value_mask, value_list):
        """function configure
        
        value_mask: 
        value_list: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def configure_checked(self, value_mask, value_list):
        """function configure_checked
        
        value_mask: 
        value_list: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def circulate(self, diretion):
        """function circulate
        
        diretion: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def circulate_checked(self, direction):
        """function circulate_checked
        
        direction: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def query_tree(self):
        """function query_tree
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def query_tree_unchecked(self):
        """function query_tree_unchecked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def change_property(self, mode, property, type, format, data_len, data):
        """function change_property
        
        mode: 
        property: 
        type: 
        format: 
        data_len: 
        data: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def change_property_checked(self, mode, property, type, format, data_len, data):
        """function change_property_checked
        
        mode: 
        property: 
        type: 
        format: 
        data_len: 
        data: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def delete_property(self, property):
        """function delete_property
        
        property: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def delete_property_checked(self, property):
        """function delete_property_checked
        
        property: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_property(self, delete, property, type, long_offset, long_length):
        """function get_property
        
        delete: 
        property: 
        type: 
        long_offset: 
        long_length: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_property_unchecked(self, delete, property, type, long_offset, long_length):
        """function get_property_unchecked
        
        delete: 
        property: 
        type: 
        long_offset: 
        long_length: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_properties(self):
        """function list_properties
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_properties_unchecked(self):
        """function list_properties_unchecked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_selection_owner(self, owner, time):
        """function set_selection_owner
        
        owner: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_selection_owner_checked(self, owner, time):
        """function set_selection_owner_checked
        
        owner: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_selection_owner(self):
        """function get_selection_owner
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_selection_owner_unchecked(self):
        """function get_selection_owner_unchecked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def convert_selection(self, requestor, target, property, time):
        """function convert_selection
        
        requestor: 
        target: 
        property: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def convert_selection_checked(self, requestor, target, property, time):
        """function convert_selection_checked
        
        requestor: 
        target: 
        property: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_pointer(self, owner_events, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        """function grab_pointer
        
        owner_events: 
        event_mask: 
        pointer_mode: 
        keyboard_mode: 
        confine_to: 
        cursor: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_pointer_unchecked(self, owner_events, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        """function grab_pointer_unchecked
        
        owner_events: 
        event_mask: 
        pointer_mode: 
        keyboard_mode: 
        confine_to: 
        cursor: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def ungrab_poiter(self, time):
        """function ungrab_poiter
        
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def ungrab_pointer_checked(self):
        """function ungrab_pointer_checked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_button(self, owner_events, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        """function grab_button
        
        owner_events: 
        event_mask: 
        pointer_mode: 
        keyboard_mode: 
        confine_to: 
        cursor: 
        button: 
        modifiers: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_butotn_checked(self, owner_events, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        """function grab_butotn_checked
        
        owner_events: 
        event_mask: 
        pointer_mode: 
        keyboard_mode: 
        confine_to: 
        cursor: 
        button: 
        modifiers: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def ungrab_button(self, button, modifeirs):
        """function ungrab_button
        
        button: 
        modifeirs: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def ungrab_button_checked(self, button, modifiers):
        """function ungrab_button_checked
        
        button: 
        modifiers: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_keyboard(self, owner_events, time, pointer_mode, keyboard_mode):
        """function grab_keyboard
        
        owner_events: 
        time: 
        pointer_mode: 
        keyboard_mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_keyboard_unchecked(self, owner_events, time, pointer_mode, keyboard_mode):
        """function grab_keyboard_unchecked
        
        owner_events: 
        time: 
        pointer_mode: 
        keyboard_mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def ungrab_keyboard(self, time):
        """function ungrab_keyboard
        
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def ungrab_keyboard_checked(self, time):
        """function ungrab_keyboard_checked
        
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_key(self, owner_events, modifiers, key, pointer_mode, keyboard_mode):
        """function grab_key
        
        owner_events: 
        modifiers: 
        key: 
        pointer_mode: 
        keyboard_mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grab_key_checked(self, owner_events, modifiers, key, pointer_mode, keyboard_mode):
        """function grab_key_checked
        
        owner_events: 
        modifiers: 
        key: 
        pointer_mode: 
        keyboard_mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def query_pointer(self):
        """function query_pointer
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def query_pointer_unchecked(self):
        """function query_pointer_unchecked
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_motion_events(self, start, stop):
        """function get_motion_events
        
        start: 
        stop: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_motion_events_unchecked(self, start, stop):
        """function get_motion_events_unchecked
        
        start: 
        stop: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def translate_coordinates(self, dst_window, src_x, src_y):
        """function translate_coordinates
        
        dst_window: 
        src_x: 
        src_y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def translate_coordinates_unchecked(self, dst_window, src_x, src_y):
        """function translate_coordinates_unchecked
        
        dst_window: 
        src_x: 
        src_y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def warp_pointer(self, src_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        """function warp_pointer
        
        src_window: 
        src_x: 
        src_y: 
        src_width: 
        src_height: 
        dst_x: 
        dst_y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def warp_pointer_checked(self, src_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        """function warp_pointer_checked
        
        src_window: 
        src_x: 
        src_y: 
        src_width: 
        src_height: 
        dst_x: 
        dst_y: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_input_focus(self, revert_to, time):
        """function set_input_focus
        
        revert_to: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_input_focus_checked(self, revert_to, time):
        """function set_input_focus_checked
        
        revert_to: 
        time: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear_area(self, exposures, x, y, width, height):
        """function clear_area
        
        exposures: 
        x: 
        y: 
        width: 
        height: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear_area_checked(self, exposures, x, y, width, height):
        """function clear_area_checked
        
        exposures: 
        x: 
        y: 
        width: 
        height: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_installed_colormaps(self):
        """function list_installed_colormaps
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_installed_colormaps_unchecked(self):
        """function list_installed_colormaps_unchecked
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 02 Jun 2015 03:16:08 PM JST
class Drawable:
    """Class Drawable
    """
    # Attributes:
    __display = None  # () 
    __id = None  # () 
    
    # Operations
    def get_display(self):
        """function get_display
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_geometry(self):
        """function get_geometry
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_geometry_unchecked(self):
        """function get_geometry_unchecked
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 02 Jun 2015 03:16:50 PM JST
None # should raise NotImplementedError()
* Tue 02 Jun 2015 03:17:27 PM JST
        if isinstance(other, (Drawable, )):
            return self.id == other.id
        return self.id == other

* Tue 02 Jun 2015 03:17:40 PM JST
    def get_id(self, ):
        r"""SUMMARY

        get_id()

        @Return:

        @Error:
        """
        return self._wid

    id = property(get_id)


* Tue 02 Jun 2015 03:17:55 PM JST
ne # should raise NotImplementedError()
* Tue 02 Jun 2015 03:17:56 PM JST
Noself.
* Tue 02 Jun 2015 03:18:10 PM JST
None # should raise NotImplementedError()
* Tue 02 Jun 2015 03:18:35 PM JST
self.display.core.SendEvent(propagate, self.id, event_mask, event)
* Tue 02 Jun 2015 03:18:51 PM JST
        return self.display.core.SendEventChecked(
            propagate, self.id, event_mask, event)

* Tue 02 Jun 2015 03:18:58 PM JST
        return self.display.core.DestroyWindow(self.id)

* Tue 02 Jun 2015 03:19:06 PM JST
        return self.display.core.DestroyChecked(self.id)

* Tue 02 Jun 2015 03:19:24 PM JST
        return self.display.core.CreateWindow(
            depth, self.id, parent, x, y, width, height, border_width,
            _class, visual, value_mask, value_list)

* Tue 02 Jun 2015 03:19:39 PM JST
        return self.display.core.CreateWindowChecked(
            depth, self.id, parent, x, y, width, height, border_width,
            _class, visual, value_mask, value_list)

* Tue 02 Jun 2015 03:19:46 PM JST
        return self.display.core.ChangeWindowAttributes(
            self.id, value_mask, value_list)

* Tue 02 Jun 2015 03:19:54 PM JST
        return self.display.core.ChangeWindowAttributesChecked(
            self.id, value_mask, value_list)

* Tue 02 Jun 2015 03:19:59 PM JST
        return self.display.core.GetWindowAttributes(self.id)

* Tue 02 Jun 2015 03:20:04 PM JST
        return self.display.core.GetWindowAttributesUnchecked(self.id)

* Tue 02 Jun 2015 03:20:09 PM JST
        return self.display.core.DestroySubwindows(self.id)

* Tue 02 Jun 2015 03:20:10 PM JST
        return None # should raise NotImplementedError()

* Tue 02 Jun 2015 03:20:13 PM JST
        return self.display.core.DestroySubwindows(self.id)

* Tue 02 Jun 2015 03:20:19 PM JST
        return self.display.core.DestroySubwindowsChecked(self.id)

* Tue 02 Jun 2015 03:20:25 PM JST
        return self.display.core.ChangeSaveSet(mode, self.id)

* Tue 02 Jun 2015 03:20:32 PM JST
        return self.display.core.ChangeSaveSetChecked(mode, self.id)

* Tue 02 Jun 2015 03:20:38 PM JST
        return self.display.core.ReparentWindow(self.id, parent, x, y)

* Tue 02 Jun 2015 03:20:45 PM JST
        return self.display.core.ReparentWindowChecked(self.id, parent, x, y)

* Tue 02 Jun 2015 03:20:50 PM JST
        return self.display.core.MapWindow(self.id)

* Tue 02 Jun 2015 03:20:57 PM JST
        return self.display.core.MapWindowChecked(self.id)

* Tue 02 Jun 2015 03:21:05 PM JST
        return self.display.core.MapSubwindows(self.id)

* Tue 02 Jun 2015 03:21:10 PM JST
        return self.display.core.MapSubwindowsChecked(self.id)

* Tue 02 Jun 2015 03:21:16 PM JST
        return self.display.core.UnmapWindow(self.id)

* Tue 02 Jun 2015 03:21:18 PM JST
        return None # should raise NotImplementedError()

* Tue 02 Jun 2015 03:21:21 PM JST
        return self.display.core.UnmapWindow(self.id)

* Tue 02 Jun 2015 03:21:28 PM JST
        return self.display.core.UnmapWindowChecked(self.id)

* Tue 02 Jun 2015 03:21:34 PM JST
        return self.display.core.UnmapSubwindows(self.id)

* Tue 02 Jun 2015 03:21:40 PM JST
        return self.display.core.UnmapSubwindowsChecked(self.id)

* Tue 02 Jun 2015 03:21:45 PM JST
        return self.display.core.ConfigureWindow(self.id, value_mask, value_list)

* Tue 02 Jun 2015 03:21:57 PM JST
        return self.display.core.ConfigureWindowChecked(
            self.id, value_mask, value_list)

* Tue 02 Jun 2015 03:22:06 PM JST
        return self.display.core.CirculateWindow(direction, self.id)

* Tue 02 Jun 2015 03:22:13 PM JST
        return self.display.core.CirculateWindowChecked(direction, self.id)

* Tue 02 Jun 2015 03:22:32 PM JST
        return self.display.core.QueryTree(self.id)

* Tue 02 Jun 2015 03:22:40 PM JST
        return self.display.core.QueryTreeUnchecked(self.id)

* Tue 02 Jun 2015 03:22:47 PM JST
        return self.display.core.ChangeProperty(
            mode, self.id, property, type, format, data_len, data)

* Tue 02 Jun 2015 03:22:57 PM JST
        return self.display.core.ChangePropertyChecked(
            mode, self.id, property, type, format, data_len, data)

* Tue 02 Jun 2015 03:23:04 PM JST
        return self.display.core.DeleteProperty(self.id, property)

* Tue 02 Jun 2015 03:23:09 PM JST
        return self.display.core.DeletePropertyChecked(self.id, property)

* Tue 02 Jun 2015 03:23:19 PM JST
        return self.display.core.GetProperty(
            delete, self.id, property, type, long_offset, long_length)

* Tue 02 Jun 2015 03:23:26 PM JST
        return self.display.core.GetPropertyUnchecked(
            delete, self.id, property, type, long_offset, long_length)

* Tue 02 Jun 2015 03:23:39 PM JST
        return self.display.core.ListProperties(self.id)

* Tue 02 Jun 2015 03:23:45 PM JST
        return self.display.core.ListPropertiesUnchecked(self.id)

* Tue 02 Jun 2015 03:23:51 PM JST
        return self.display.core.SetSelectionOwner(owner, self.id, time)

* Tue 02 Jun 2015 03:23:57 PM JST
        return self.display.core.SetSelectionOwnerChecked(owner, self.id, time)

* Tue 02 Jun 2015 03:24:03 PM JST
        return self.display.core.GetSelectionOwner(self.id)

* Tue 02 Jun 2015 03:24:09 PM JST
        return self.display.core.GetSelectionOwnerUnchecked(self.id)

* Tue 02 Jun 2015 03:24:11 PM JST
        return None # should raise NotImplementedError()

* Tue 02 Jun 2015 03:24:13 PM JST
        return self.display.core.GetSelectionOwnerUnchecked(self.id)

* Tue 02 Jun 2015 03:24:19 PM JST
        return self.display.core.ConvertSelection(
            requestor, self.id, target, property, time)

* Tue 02 Jun 2015 03:24:25 PM JST
        return self.display.core.ConvertSelectionChecked(
            requestor, self.id, target, property, time)

* Tue 02 Jun 2015 03:24:32 PM JST
        return self.display.core.GrabPointer(
            owner_events, self.id, event_mask, pointer_mode, keyboard_mode,
            confine_to, cursor, time)

* Tue 02 Jun 2015 03:24:45 PM JST
        return self.display.core.GrabPointerUnchecked(
            owner_events, self.id, event_mask, pointer_mode, keyboard_mode,
            confine_to, cursor, time)

* Tue 02 Jun 2015 03:24:57 PM JST
        return self.display.core.UngrabPointer(time)

* Tue 02 Jun 2015 03:25:03 PM JST
        return self.display.core.UngrabPointerChecked(time)

* Tue 02 Jun 2015 03:26:11 PM JST
        return self.display.core.GrabButton(
            owner_events, self.id, event_mask, pointer_mode, keyboard_mode,
            confine_to, cursor, button, modifiers)

* Tue 02 Jun 2015 03:26:24 PM JST
        return self.display.core.GrabButtonChecked(
            owner_events, self.id, event_mask, pointer_mode, keyboard_mode,
            confine_to, cursor, button, modifiers)

* Tue 02 Jun 2015 03:26:33 PM JST
        return self.display.core.UngrabButton(button, self.id, modifiers)

* Tue 02 Jun 2015 03:26:38 PM JST
        return self.display.core.UngrabButtonChecked(button, self.id, modifiers)

* Tue 02 Jun 2015 03:27:51 PM JST

* Tue 02 Jun 2015 03:27:51 PM JST

* Tue 02 Jun 2015 03:27:51 PM JST
                        ("modifier")

* Tue 02 Jun 2015 03:28:15 PM JST
        return self.display.core.GrabKeyboard(
            owner_events, self.id, time, pointer_mode, keyboard_mode)

* Tue 02 Jun 2015 03:28:34 PM JST
        return self.display.core.GrabKeyboardUnchecked(
            owner_events, self.id, time, pointer_mode, keyboard_mode)

* Tue 02 Jun 2015 03:28:41 PM JST
        return self.display.core.UngrabKeyboard(time)

* Tue 02 Jun 2015 03:28:47 PM JST
        return self.display.core.UngrabKeyboardChecked(time)

* Tue 02 Jun 2015 03:29:00 PM JST
        return self.display.core.GrabKey(
            owner_events, self.id, modifiers, key, pointer_mode, keyboard_mode)

* Tue 02 Jun 2015 03:29:07 PM JST
        return self.display.core.GrabKey(
            owner_events, self.id, modifiers, key, pointer_mode, keyboard_mode)

* Tue 02 Jun 2015 03:29:17 PM JST
        return self.display.core.QueryPointer(self.id)

* Tue 02 Jun 2015 03:29:22 PM JST
        return self.display.core.QueryPointerUnchecked(self.id)

* Tue 02 Jun 2015 03:29:28 PM JST
        return self.display.core.GetMotionEvents(self.id, start, stop)

* Tue 02 Jun 2015 03:29:34 PM JST
        return self.display.core.GetMotionEventsUnchecked(self.id, start, stop)

* Tue 02 Jun 2015 03:29:41 PM JST
        return self.display.core.TranslateCoordinates(
            src_window, self.id, src_x, src_y)

* Tue 02 Jun 2015 03:29:47 PM JST
src_window, 
* Tue 02 Jun 2015 03:30:01 PM JST
        return self.display.core.TranslateCoordinatesUnchecked(
            src_window, self.id, src_x, src_y)

* Tue 02 Jun 2015 03:30:09 PM JST
src_window, 
* Tue 02 Jun 2015 03:30:32 PM JST
        return self.display.core.WarpPointer(
            src_window, self.id, src_x, src_y, src_width, src_height,
            dst_x, dst_y)

* Tue 02 Jun 2015 03:30:42 PM JST
        return self.display.core.WarpPointerChecked(
            src_window, self.id, src_x, src_y, src_width, src_height,
            dst_x, dst_y)

* Tue 02 Jun 2015 03:30:50 PM JST
        return self.display.core.SetInputFocus(revert_to, self.id, time)

* Tue 02 Jun 2015 03:30:56 PM JST
        return self.display.core.SetInputFocusChecked(revert_to, self.id, time)

* Tue 02 Jun 2015 03:31:03 PM JST
        return self.display.core.ClearArea(
            exposures, self.id, x, y, width, height)

* Tue 02 Jun 2015 03:31:09 PM JST
        return self.display.core.ClearAreaChecked(
            exposures, self.id, x, y, width, height)

* Tue 02 Jun 2015 03:31:16 PM JST
        return self.display.core.ListInstalledColormaps(self.id)

* Tue 02 Jun 2015 03:31:21 PM JST
        return self.display.core.ListInstalledColormapsUnchecked(self.id)

* Tue 02 Jun 2015 03:35:48 PM JST
class WindowClient:
    """Class WindowClient
    """
    # Attributes:
    window = None  # (Window) 
    __atom_cache = None  # (AtomCache) 
    
    # Operations
    def from_id(self, display, id):
        """function from_id
        
        display: 
        id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_display(self):
        """function get_display
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_id(self):
        """function get_id
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_title(self):
        """function get_title
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_title(self, title):
        """function set_title
        
        title: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_wmclass(self):
        """function get_wmclass
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_pid(self):
        """function get_pid
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_type(self):
        """function get_type
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_bounds(self):
        """function get_bounds
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_bounds(self, rectangle):
        """function set_bounds
        
        rectangle: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_size(self, size):
        """function set_size
        
        size: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def move(self, point):
        """function move
        
        point: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def minimize(self):
        """function minimize
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_minimized(self):
        """function is_minimized
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def show(self):
        """function show
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def maximize(self, mode = WindowStateMode.Set):
        """function maximize
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_maximized(self):
        """function is_maximized
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def restore(self):
        """function restore
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def activate(self):
        """function activate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def deactivate(self):
        """function deactivate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_always_on_top(self, mode = WindowStateMode.Set):
        """function set_always_on_top
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_always_on_top(self):
        """function is_always_on_top
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def set_always_on_bottom(self, mode = WindowStateMode.Set):
        """function set_always_on_bottom
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_always_on_bottom(self):
        """function is_always_on_bottom
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_fullscreened(self, mode = WindowStateMode.Set):
        """function set_fullscreened
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_fullscreen(self):
        """function is_fullscreen
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_shade(self, mode = WindowStateMode.Set):
        """function set_shade
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_shaded(self):
        """function is_shaded
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def hide(self):
        """function hide
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def close(self):
        """function close
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def delete(self):
        """function delete
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def destroy(self):
        """function destroy
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def move_cursor_to(self, point):
        """function move_cursor_to
        
        point: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def raise(self):
        """function raise
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def lower(self):
        """function lower
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __send_client_message(self, target, mask, types, data):
        """function send_client_message
        
        target: 
        mask: 
        types: 
        data: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 02 Jun 2015 03:37:30 PM JST
retur
* Tue 02 Jun 2015 03:38:10 PM JST
self.
* Tue 02 Jun 2015 03:38:26 PM JST
form 
* Tue 02 Jun 2015 03:38:55 PM JST
KATOM_TO_CACHE_FOR_WINDOW_CLIENT = [
    'ATOM',
    'CARDINAL',
    'STRING',
    'UTF8_STRING',
    'WINDOW',
    'WM_NAME',
    'WM_CLASS',
    'WM_CHANGE_STATE',
    'WM_DELETE_WINDOW',
    'WM_PROTOCOLS',
    '_NET_WM_NAME',
    '_NET_WM_PID',
    '_NET_WM_WINDOW_TYPE',
    '_NET_WM_STATE',
    '_NET_WM_STATE_HIDDEN',
    '_NET_WM_STATE_MAXIMIZED_VERT',
    '_NET_WM_STATE_MAXIMIZED_HORZ',
    '_NET_WM_STATE_ABOVE',
    '_NET_WM_STATE_BELOW',
    '_NET_WM_STATE_FULLSCREEN',
    '_NET_WM_STATE_SHADED',
    '_NET_ACTIVE_WINDOW',
    '_NET_CLOSE_WINDOW',
    ]

* Tue 02 Jun 2015 03:39:04 PM JST
KATOM_TO_CACHE_FOR_WINDOW_CLIENT
* Tue 02 Jun 2015 03:40:02 PM JST
from enum import IntEnum as _IntEnum
* Tue 02 Jun 2015 03:40:09 PM JST
class WindowStateMode(_IntEnum):
    r"""SUMMARY
    """
    Unset  = 0
    Set    = 1
    Toggle = 2


class ChangingWindowState(_IntEnum):
    r"""ChangingWindowState

    ChangingWindowState is a _IntEnum.
    Responsibility:
    """
    WITHDRAWN_STATE = 0
    NORMAL_STATE = 1
    ZOOM_STATE = 2
    ICONIC_STATE = 3
    INACTIVE_STATE = 4

* Tue 02 Jun 2015 03:40:18 PM JST
KATOM_TO_CACHE_FOR_WINDOW_CLIENT = [
    'ATOM',
    'CARDINAL',
    'STRING',
    'UTF8_STRING',
    'WINDOW',
    'WM_NAME',
    'WM_CLASS',
    'WM_CHANGE_STATE',
    'WM_DELETE_WINDOW',
    'WM_PROTOCOLS',
    '_NET_WM_NAME',
    '_NET_WM_PID',
    '_NET_WM_WINDOW_TYPE',
    '_NET_WM_STATE',
    '_NET_WM_STATE_HIDDEN',
    '_NET_WM_STATE_MAXIMIZED_VERT',
    '_NET_WM_STATE_MAXIMIZED_HORZ',
    '_NET_WM_STATE_ABOVE',
    '_NET_WM_STATE_BELOW',
    '_NET_WM_STATE_FULLSCREEN',
    '_NET_WM_STATE_SHADED',
    '_NET_ACTIVE_WINDOW',
    '_NET_CLOSE_WINDOW',
    ]

* Tue 02 Jun 2015 03:40:28 PM JST
from xcb.xproto import PropMode, ConfigWindow, EventMask, StackMode
* Tue 02 Jun 2015 03:41:20 PM JST
    def __int__(self):
        return self.id

    def __eq__(self, other):
        if isinstance(other, (WindowClient, Window)):
            return self.id == other.id
        return self.id == other

    def __ne__(self, other):
        return not self == other

* Tue 02 Jun 2015 03:41:35 PM JST
None # should raise NotImplementedError()
* Tue 02 Jun 2015 03:41:41 PM JST
None # should raise NotImplementedError()
* Tue 02 Jun 2015 03:42:12 PM JST
    def get_property(self, delete, prop, types, offset=0, length=20):
        r"""SUMMARY

        get_property(delete, prop, types, offset=0, length=20)

        @Arguments:
        - `delete`:
        - `prop`:
        - `types`:
        - `offset`:
        - `length`:

        @Return:

        @Error:
        """
        reply = self.window.get_property(delete,
                                         self._atom_cache.get_atom(prop),
                                         self._atom_cache.get_atom(types),
                                         offset, length).reply()
        if reply.bytes_after:
            after_reply = self.get_property(
                delete, prop, types, length, reply.bytes_after)
            reply.value += after_reply.value
            reply.value_len += after_reply.value_len
            reply.bytes_after = after_reply.bytes_after
            return reply
        return reply

    def change_property(self, mode, prop, types, format, data):
        r"""SUMMARY

        change_property(mode, prop, types, format, data)

        @Arguments:
        - `mode`:
        - `prop`:
        - `types`:
        - `format`:
        - `data`:

        @Return:

        @Error:
        """
        self.window.change_property(mode,
                                    self._atom_cache.get_atom(prop),
                                    self._atom_cache.get_atom(types),
                                    format, len(data), data)

* Tue 02 Jun 2015 03:42:25 PM JST
            
* Tue 02 Jun 2015 03:42:29 PM JST
            
* Tue 02 Jun 2015 03:43:41 PM JST
            
* Tue 02 Jun 2015 03:43:52 PM JST
        reply = self.get_property(False, '_NET_WM_NAME', 'UTF8_STRING')
        if str(array('B', reply.value).tostring()) != '':
            return str(array('B', reply.value).tostring())
        return str(
            array('B', self.get_property(False, 'WM_NAME', 'STRING').value))

* Tue 02 Jun 2015 03:44:24 PM JST
 as _array
* Tue 02 Jun 2015 03:44:25 PM JST
 as _IntEnum
* Tue 02 Jun 2015 03:44:35 PM JST
from cStringIO import StringIO
* Tue 02 Jun 2015 03:44:42 PM JST
from struct import unpack, pack
* Tue 02 Jun 2015 03:44:58 PM JST
from rectangle import Rectangle
* Tue 02 Jun 2015 03:46:09 PM JST

* Tue 02 Jun 2015 03:46:12 PM JST

* Tue 02 Jun 2015 03:46:14 PM JST
atom_cache
* Tue 02 Jun 2015 03:46:14 PM JST
commons.atom_cache
* Tue 02 Jun 2015 03:46:19 PM JST
AtomCache
* Tue 02 Jun 2015 03:47:24 PM JST
.tostring()
* Tue 02 Jun 2015 03:47:34 PM JST
            
* Tue 02 Jun 2015 03:49:09 PM JST
        self.change_property(
            PropMode.Replace, '_NET_WM_NAME', 'UTF8_STRING', 8, title)

* Tue 02 Jun 2015 03:59:16 PM JST
            
* Tue 02 Jun 2015 03:59:18 PM JST
                 
* Tue 02 Jun 2015 03:59:20 PM JST
            
* Tue 02 Jun 2015 04:02:59 PM JST
cookie = 
* Tue 02 Jun 2015 04:03:05 PM JST
        try:
            cookie.check()
            return True
        except (xproto.BadWindow, xproto.BadMatch) as err:
            print(err)
            return False

* Tue 02 Jun 2015 04:04:05 PM JST
title = property(get_title, set_title)
* Tue 02 Jun 2015 04:04:16 PM JST
        reply = self.get_property(False, 'WM_CLASS', 'STRING')
        wmclasses = str(array('B', reply.value).tostring()).split('\x00')
        while '' in wmclasses:
            wmclasses.remove('')
        return wmclasses

    wmclass = property(get_wmclass)

* Tue 02 Jun 2015 04:05:22 PM JST
        reply = self.get_property(False, '_NET_WM_PID', 'CARDINAL', length=1)
        pids = unpack('I' * reply.value_len, array('B', reply.value).tostring())
        if not pids:
            return None
        return pids[0]

    pid = property(get_pid)

* Tue 02 Jun 2015 04:07:09 PM JST
Bad
* Tue 02 Jun 2015 04:11:25 PM JST

* Tue 02 Jun 2015 04:11:25 PM JST

* Tue 02 Jun 2015 04:11:25 PM JST
        try:

* Tue 02 Jun 2015 04:11:41 PM JST
        if reply is None:
            return ''

* Tue 02 Jun 2015 04:11:52 PM JST

* Tue 02 Jun 2015 04:11:52 PM JST

* Tue 02 Jun 2015 04:11:52 PM JST
            return ''

* Tue 02 Jun 2015 04:11:55 PM JST

* Tue 02 Jun 2015 04:11:55 PM JST

* Tue 02 Jun 2015 04:11:55 PM JST
        try:

* Tue 02 Jun 2015 04:11:58 PM JST
        
* Tue 02 Jun 2015 04:12:40 PM JST
        reply = self.get_property(False, '_NET_WM_WINDOW_TYPE', 'ATOM', length=1)
        types = unpack('I' * reply.value_len, array('B', reply.value).tostring())
        if not types:
            return None
        return types[0]

* Tue 02 Jun 2015 04:13:14 PM JST
type = property(get_type)
* Tue 02 Jun 2015 04:13:21 PM JST
        geo = self.window.get_geometry_unchecked().reply()
        reply = self.display.core.TranslateCoordinates(
            self.id, self.root, geo.x, geo.y).reply()
        newx = reply.dst_x - (2 * geo.x)
        newy = reply.dst_y - (2 * geo.y)
        return Rectangle(newx, newy, geo.width, geo.height)

* Tue 02 Jun 2015 04:17:39 PM JST
reply
* Tue 02 Jun 2015 04:17:42 PM JST
reply
* Tue 02 Jun 2015 04:18:18 PM JST
        self.window.configure(
            ConfigWindow.X|ConfigWindow.Y|ConfigWindow.Width|ConfigWindow.Height,
            [rectangle.x, rectangle.y, rectangle.width, rectangle.height])

* Tue 02 Jun 2015 04:21:35 PM JST
            self.window.configure(
                ConfigWindow.X|ConfigWindow.Y|
                ConfigWindow.Width|ConfigWindow.Height,
                [rectangle.x, rectangle.y, rectangle.width, rectangle.height])

* Tue 02 Jun 2015 04:21:43 PM JST
window_client.pyc
  -rwx------   1  20K May 29 15:38 window.py
  -rw-------   1  24K May 29 15:50 window.pyc

* Tue 02 Jun 2015 04:22:41 PM JST
BadValue
* Tue 02 Jun 2015 04:22:42 PM JST
xproto
* Tue 02 Jun 2015 04:23:20 PM JST
        self.window.configure(ConfigWindow.X|ConfigWindow.Y,
                              [point.x, point.y])

* Tue 02 Jun 2015 04:23:32 PM JST
            
* Tue 02 Jun 2015 04:23:38 PM JST
        
* Tue 02 Jun 2015 04:23:44 PM JST
        try:
            cookie.check()
            return True
        except (xproto.BadWindow, xproto.BadMatch) as err:
            return False
        except xproto.BadValue as err:
            # TODO: (Atami) [2015/06/02]
            raise StandardError(err)

* Tue 02 Jun 2015 04:24:43 PM JST
        cookie = self.window.configure_checked(
            ConfigWindow.X|ConfigWindow.Y, [point.x, point.y])
        try:
            cookie.check()
            return True
        except (xproto.BadWindow, xproto.BadMatch) as err:
            return False
        except xproto.BadValue as err:
            # TODO: (Atami) [2015/06/02]
            raise StandardError(err)

* Tue 02 Jun 2015 04:24:48 PM JST
        self.window.configure(ConfigWindow.Width|ConfigWindow.Height,
                              [size.width, size.height])

* Tue 02 Jun 2015 04:25:03 PM JST
            
* Tue 02 Jun 2015 04:25:07 PM JST
        try:
            cookie.check()
            return True
        except (xproto.BadWindow, xproto.BadMatch) as err:
            return False
        except xproto.BadValue as err:
            # TODO: (Atami) [2015/06/02]
            raise StandardError(err)

* Tue 02 Jun 2015 04:25:19 PM JST
    def _send_client_message(self, mask, types, data):
        r"""SUMMARY

        _send_client_message(target, mask, types, data)

        @Arguments:
        - `target`:
        - `mask`:
        - `types`:
        - `data`:

        @Return:

        @Error:
        """
        event = StringIO()
        event.write(
            # code, format, sequence_number, window, messagetype
            pack('BBHII', EventCode.ClientMessage, 32, 0, self.id, types))
        event.write(data)
        self.window.send_event(True, mask, event.getvalue())

* Tue 02 Jun 2015 04:32:57 PM JST
        data = StringIO()
        data.write(pack('5I', ChangingWindowState.ICONIC_STATE, 0, 0, 0, 0))
        self._send_client_message(
            EventMask.SubstructureRedirect|EventMask.SubstructureNotify,
            self._atom_cache.get_atom('WM_CHANGE_STATE'), data.getvalue())

* Tue 02 Jun 2015 04:33:20 PM JST
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
        atoms = unpack('I' * reply.value_len, array('B', reply.value).tostring())
        return self._atom_cache.get_atom('_NET_WM_STATE_HIDDEN') in atoms

* Tue 02 Jun 2015 04:34:38 PM JST
        # TODO: (Atami) [2015/05/29]
        data = StringIO()
        data.write(pack('5I', ChangingWindowState.NORMAL_STATE, 0, 0, 0, 0))
        self._send_client_message(
            EventMask.SubstructureRedirect|EventMask.SubstructureNotify,
            self._atom_cache.get_atom('WM_CHANGE_STATE'), data.get_value())

* Tue 02 Jun 2015 04:34:49 PM JST
        data = StringIO()
        data.write(pack(
            '5I', mode,
            self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT'),
            self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_HORZ'), 0, 0))
        self._send_client_message(
            EventMask.SubstructureRedirect,
            self._atom_cache.get_atom('_NET_WM_STATE'), data.getvalue())

* Tue 02 Jun 2015 04:35:03 PM JST
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
        atoms = unpack('I' * reply.value_len, array('B', reply.value).tostring())
        return (
            self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT') in atoms
            and
            self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_HORZ') in atoms)

* Tue 02 Jun 2015 04:35:32 PM JST
        self.maximize(WindowStateMode.Unset)
        if self.is_minimized():
            # TODO: (Atami) [2015/05/23]
            self.show()

* Tue 02 Jun 2015 04:35:55 PM JST
        data = StringIO()
        data.write(pack('5I', 0, 0, 0, 0, 0))
        self._send_client_message(
            EventMask.SubstructureRedirect|EventMask.SubstructureNotify,
            self._atom_cache.get_atom('_NET_ACTIVE_WINDOW'), data.getvalue())

* Tue 02 Jun 2015 04:36:12 PM JST
        data = StringIO()
        data.write('5I', mode, self._atom_cache.get_atom('_NET_WM_STATE_ABOVE'),
                   0, 0, 0)
        self._send_client_message(
            EventMask.SubstructureRedirect,
            self._atom_cache.get_atom('_NET_WM_STATE'),
            data.getvalue())

* Tue 02 Jun 2015 04:36:44 PM JST
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
        atoms = unpack('I' * reply.value_len, array('B', reply.value).tostring())
        return self._atom_cache.get_atom('_NET_WM_STATE_ABOVE') in atoms

* Tue 02 Jun 2015 04:37:05 PM JST
        data = StringIO()
        data.write('5I', mode, self._atom_cache.get_atom('_NET_WM_STATE_BELOW'),
                   0, 0, 0)
        self._send_client_message(
            EventMask.SubstructureRedirect,
            self._atom_cache.get_atom('_NET_WM_STATE'),
            data.getvalue())

* Tue 02 Jun 2015 04:37:23 PM JST
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
        atoms = unpack('I' * reply.value_len, array('B', reply.value).tostring())
        return self._atom_cache.get_atom('_NET_WM_STATE_BELOW') in atoms

* Tue 02 Jun 2015 04:37:46 PM JST
        data = StringIO()
        data.write('5I', mode,
                   self._atom_cache.get_atom('_NET_WM_STATE_FULLSCREEN'),
                   0, 0, 0)
        self._send_client_message(
            EventMask.SubstructureRedirect,
            self._atom_cache.get_atom('_NET_WM_STATE'),
            data.getvalue())

* Tue 02 Jun 2015 04:38:06 PM JST
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
        atoms = unpack('I' * reply.value_len, array('B', reply.value).tostring())
        return self._atom_cache.get_atom('_NET_WM_STATE_FULLSCREEN') in atoms

* Tue 02 Jun 2015 04:38:28 PM JST
        data = StringIO()
        data.write('5I', mode,
                   self._atom_cache.get_atom('_NET_WM_STATE_SHADED'),
                   0, 0, 0)
        self._send_client_message(
            EventMask.SubstructureRedirect,
            self._atom_cache.get_atom('_NET_WM_STATE'),
            data.getvalue())

* Tue 02 Jun 2015 04:38:32 PM JST
reutrn 
* Tue 02 Jun 2015 04:38:39 PM JST
        reply = self.get_property(False, '_NET_WM_STATE', 'ATOM')
        atoms = unpack('I' * reply.value_len, array('B', reply.value).tostring())
        return self._atom_cache.get_atom('_NET_WM_STATE_SHADED') in atoms

* Tue 02 Jun 2015 04:38:59 PM JST
        # TODO: (Atami) [2015/05/29]
        data = StringIO()
        data.write(pack('5I', ChangingWindowState.WITHDRAWN_STATE, 0, 0, 0, 0))
        self._send_client_message(
            0xffffff, self._atom_cache.get_atom('WM_CHANGE_STATE'),
            data.getvalue())

* Tue 02 Jun 2015 04:39:11 PM JST
        data = StringIO()
        data.write(pack('5I', 0, 0, 0, 0, 0))
        self._send_client_message(0xffffff,
                                  self._atom_cache.get_atom('_NET_CLOSE_WINDOW'),
                                  data.getvalue())

* Tue 02 Jun 2015 04:39:19 PM JST
            
* Tue 02 Jun 2015 04:39:21 PM JST
                     
* Tue 02 Jun 2015 04:39:28 PM JST
        data = StringIO()
        data.write(pack('5I', self._atom_cache.get_atom('WM_DELETE_WINDOW'),
                         0, 0, 0, 0))
        self._send_client_message(0xffffff,
                                  self._atom_cache.get_atom('WM_PROTOCOLS'),
                                  data.getvalue())

* Tue 02 Jun 2015 04:40:36 PM JST
cooki
* Tue 02 Jun 2015 04:41:06 PM JST
return None # should raise NotImplementedError()
* Tue 02 Jun 2015 04:41:20 PM JST
return None # should raise NotImplementedError()
* Tue 02 Jun 2015 04:41:58 PM JST
.check()
* Tue 02 Jun 2015 04:42:24 PM JST
BadWindow.
* Tue 02 Jun 2015 04:43:55 PM JST
try:
* Tue 02 Jun 2015 04:44:12 PM JST
        try:
            cookie.check()
            return True
        except (xproto.BadWindow, xproto.BadMatch) as err:
            return False
        except xproto.BadValue as err:
            # TODO: (Atami) [2015/06/02]
            raise StandardError(err)

* Tue 02 Jun 2015 04:44:26 PM JST
        cookie = self.window.configure_checked(
            ConfigWindow.StackMode, [StackMode.Above])
        try:
            cookie.check()
            return True
        except (xproto.BadWindow, xproto.BadMatch) as err:
            return False
        except xproto.BadValue as err:
            # TODO: (Atami) [2015/06/02]
            raise StandardError(err)

* Tue 02 Jun 2015 04:44:35 PM JST
Above
* Tue 02 Jun 2015 04:44:58 PM JST
change_
* Tue 02 Jun 2015 04:45:51 PM JST
wm.list_windows()
* Tue 02 Jun 2015 04:46:12 PM JST
[(w.title, w.id) for w in wm.list_windows()]
* Tue 02 Jun 2015 04:47:56 PM JST
_NET_WM_DESKTOP
* Tue 02 Jun 2015 04:48:27 PM JST
        if reply is None:
            return None
        pids = unpack('I' * reply.value_len, array('B', reply.value).tostring())
        if not pids:
            return None
        return pids[0]

* Tue 02 Jun 2015 04:49:11 PM JST
pids
* Tue 02 Jun 2015 04:49:14 PM JST
pids[0]
* Tue 02 Jun 2015 04:50:18 PM JST
'_NET_WM_DESKTOP'
* Tue 02 Jun 2015 04:52:22 PM JST
Window
* Tue 02 Jun 2015 04:54:26 PM JST
        try:
            cookie.check()
            return True
        except (xproto.BadWindow, xproto.BadMatch) as err:
            return False
        except xproto.BadValue as err:
            # TODO: (Atami) [2015/06/02]
            raise StandardError(err)

* Tue 02 Jun 2015 04:54:42 PM JST
ConfigWindow.StackMode, [StackMode.Above]
* Tue 02 Jun 2015 04:55:00 PM JST
ConfigWindow.StackMode, [StackMode.Below]
* Tue 02 Jun 2015 04:55:28 PM JST
    def set_bounds(self, rectangle):
        """function set_bounds

        rectangle:

        returns
        """
        cookie = self.window.configure_checked(
                ConfigWindow.X|ConfigWindow.Y|
                ConfigWindow.Width|ConfigWindow.Height,
                [rectangle.x, rectangle.y, rectangle.width, rectangle.height])
        try:
            cookie.check()
            return True
        except (xproto.BadWindow, xproto.BadMatch) as err:
            return False
        except xproto.BadValue as err:
            # TODO: (Atami) [2015/06/02]
            raise StandardError(err)

    def set_size(self, size):
        """function set_size

        size:

        returns
        """
        cookie = self.window.configure_checked(
            ConfigWindow.Width|ConfigWindow.Height, [size.width, size.height])
        try:
            cookie.check()
            return True
        except (xproto.BadWindow, xproto.BadMatch) as err:
            return False
        except xproto.BadValue as err:
            # TODO: (Atami) [2015/06/02]
            raise StandardError(err)

    def move(self, point):
        """function move

        point:

        returns
        """
        cookie = self.window.configure_checked(
            ConfigWindow.X|ConfigWindow.Y, [point.x, point.y])
        try:
            cookie.check()
            return True
        except (xproto.BadWindow, xproto.BadMatch) as err:
            return False
        except xproto.BadValue as err:
            # TODO: (Atami) [2015/06/02]
            raise StandardError(err)


* Tue 02 Jun 2015 04:55:52 PM JST
ConfigWindow.X|ConfigWindow.Y|
                ConfigWindow.Width|ConfigWindow.Height,
                [rectangle.x, rectangle.y, rectangle.width, rectangle.height]
* Tue 02 Jun 2015 04:55:57 PM JST
            
* Tue 02 Jun 2015 04:56:25 PM JST
ConfigWindow.Width|ConfigWindow.Height, [size.width, size.height]
* Tue 02 Jun 2015 04:56:43 PM JST
ConfigWindow.X|ConfigWindow.Y, [point.x, point.y]
* Tue 02 Jun 2015 05:02:46 PM JST
        except (xproto.BadWindow, xproto.BadMatch) as err:
            print(err)
            return False
        except xproto.BadValue as err:
            # TODO: (Atami) [2015/06/02]
            raise StandardError(err)

* Tue 02 Jun 2015 05:03:03 PM JST
return 
* Tue 02 Jun 2015 05:03:20 PM JST
        except (xproto.BadWindow, xproto.BadMatch) as err:
            print(err)
            return False
        except xproto.BadValue as err:
            # TODO: (Atami) [2015/06/02]
            raise StandardError(err)

* Tue 02 Jun 2015 05:03:29 PM JST
cookie = 
* Tue 02 Jun 2015 05:03:46 PM JST
cookie = 
* Tue 02 Jun 2015 05:03:48 PM JST
s
* Tue 02 Jun 2015 05:03:49 PM JST
reutrn 
* Tue 02 Jun 2015 05:11:11 PM JST
Repl
* Tue 02 Jun 2015 05:11:30 PM JST
Prepend
* Tue 02 Jun 2015 05:11:53 PM JST
Replace
* Tue 02 Jun 2015 05:11:56 PM JST
Prepend
* Tue 02 Jun 2015 05:17:41 PM JST

* Tue 02 Jun 2015 05:17:41 PM JST

* Tue 02 Jun 2015 05:17:41 PM JST
        # TODO: (Atami) [2015/06/02]

* Tue 02 Jun 2015 05:18:42 PM JST
    def get_workspace(self, ):
        r"""SUMMARY

        get_desktop()

        @Return:

        @Error:
        """
        reply = self.get_property(False, '_NET_WM_DESKTOP', 'CARDINAL')
        if reply is None:
            return None
        num = unpack('I' * reply.value_len, array('B', reply.value).tostring())
        if not num:
            return None
        return num[0]

    def change_workspace(self, num):
        r"""SUMMARY

        change_desktop(num)

        @Arguments:
        - `num`:

        @Return:

        @Error:
        """
        return self.change_property(
            PropMode.Replace, '_NET_WM_DESKTOP', 'CARDINAL', 32, num)

    workspace = property(get_workspace, change_workspace)

* Tue 02 Jun 2015 05:20:10 PM JST
    def _configure(self, mask, value_list):
        r"""SUMMARY

        _configure(mask, value_list)

        @Arguments:
        - `mask`:
        - `value_list`:

        @Return:

        @Error:
        """
        cookie = self.window.configure_checked(mask, value_list)
        try:
            cookie.check()
            return True
        except (xproto.BadWindow, xproto.BadMatch) as err:
            return False
        except xproto.BadValue as err:
            # TODO: (Atami) [2015/06/02]
            raise StandardError(err)

    def set_bounds(self, rectangle):
        """function set_bounds

        rectangle:

        returns
        """
        return self._configure(
            ConfigWindow.X|ConfigWindow.Y|
            ConfigWindow.Width|ConfigWindow.Height,
            [rectangle.x, rectangle.y, rectangle.width, rectangle.height])

    def set_size(self, size):
        """function set_size

        size:

        returns
        """
        return self._configure(
            ConfigWindow.Width|ConfigWindow.Height, [size.width, size.height])

    def move(self, point):
        """function move

        point:

        returns
        """
        return self._configure(
            ConfigWindow.X|ConfigWindow.Y, [point.x, point.y])

    def raise_window(self):
        """function raise

        returns
        """
        return self._configure(ConfigWindow.StackMode, [StackMode.Above])

    def lower(self):
        """function lower

        returns
        """
        return self._configure(ConfigWindow.StackMode, [StackMode.Below])

* Tue 02 Jun 2015 05:21:41 PM JST
dia
* Tue 02 Jun 2015 05:21:41 PM JST
client.dia
* Tue 02 Jun 2015 05:21:42 PM JST
window_client.dia
* Tue 02 Jun 2015 05:22:16 PM JST
class RootWindow:
    """Class RootWindow
    """
    # Attributes:
    display = None  # () 
    window = None  # (Window) 
    __atom_cache = None  # () 
    
    # Operations
    def get_id(self):
        """function get_id
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def client_list_stacking(self):
        """function client_list_stacking
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def client_list(self):
        """function client_list
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_work_space(self):
        """function get_work_space
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_desktop_names(self):
        """function list_desktop_names
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_active_window(self):
        """function get_active_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_current_desktop(self):
        """function get_current_desktop
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_desktop_geometry(self):
        """function get_desktop_geometry
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_supported(self):
        """function list_supported
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_workarea(self):
        """function list_workarea
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def number_of_desktops(self):
        """function number_of_desktops
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def count_workspace(self):
        """function count_workspace
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_supporting_wm_check_window(self):
        """function get_supporting_wm_check_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 02 Jun 2015 05:32:04 PM JST
data
* Tue 02 Jun 2015 05:32:26 PM JST
ChangingWindowState.ICONIC_STATE, 0, 0, 0, 0
* Tue 02 Jun 2015 05:32:47 PM JST
ChangingWindowState.NORMAL_STATE, 0, 0, 0, 0
* Tue 02 Jun 2015 05:33:10 PM JST
mode,
            self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT'),
            self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_HORZ'), 0, 0
* Tue 02 Jun 2015 05:33:24 PM JST
             
* Tue 02 Jun 2015 05:33:28 PM JST
    
* Tue 02 Jun 2015 05:33:45 PM JST
0, 0, 0, 0, 0
* Tue 02 Jun 2015 05:34:00 PM JST
mode, self._atom_cache.get_atom('_NET_WM_STATE_ABOVE'),
                   0, 0, 0
* Tue 02 Jun 2015 05:34:07 PM JST
                   
* Tue 02 Jun 2015 05:34:34 PM JST
mode, self._atom_cache.get_atom('_NET_WM_STATE_BELOW'),
                   0, 0, 0
* Tue 02 Jun 2015 05:34:38 PM JST
                   
* Tue 02 Jun 2015 05:34:49 PM JST
mode,
                   self._atom_cache.get_atom('_NET_WM_STATE_FULLSCREEN'),
                   0, 0, 0
* Tue 02 Jun 2015 05:34:53 PM JST
                   
* Tue 02 Jun 2015 05:34:55 PM JST
                  
* Tue 02 Jun 2015 05:35:07 PM JST
mode,
                   self._atom_cache.get_atom('_NET_WM_STATE_SHADED'),
                   0, 0, 0
* Tue 02 Jun 2015 05:35:11 PM JST
                   
* Tue 02 Jun 2015 05:35:12 PM JST
                  
* Tue 02 Jun 2015 05:35:22 PM JST
ChangingWindowState.WITHDRAWN_STATE, 0, 0, 0, 0
* Tue 02 Jun 2015 05:35:32 PM JST
0, 0, 0, 0, 0
* Tue 02 Jun 2015 05:35:44 PM JST
self._atom_cache.get_atom('WM_DELETE_WINDOW'),
                         0, 0, 0, 0
* Tue 02 Jun 2015 05:35:52 PM JST
            
* Tue 02 Jun 2015 05:35:56 PM JST
    
* Tue 02 Jun 2015 05:35:58 PM JST
            
* Tue 02 Jun 2015 05:37:50 PM JST
lab
* Tue 02 Jun 2015 05:38:56 PM JST
lsef.
* Tue 02 Jun 2015 05:39:07 PM JST

* Tue 02 Jun 2015 05:39:10 PM JST
window
* Tue 02 Jun 2015 05:39:10 PM JST
wm.window
* Tue 02 Jun 2015 05:39:15 PM JST
Window
* Tue 02 Jun 2015 05:39:45 PM JST
KATOM_TO_CACHE_FOR_ROOT = [
    'CARDINAL',
    'WINDOW',
    'UTF8_STRING',
    '_WIN_WORKSPACE',
    '_WIN_WORKSPACE_COUNT',
    '_NET_CLIENT_LIST',
    '_NET_CLIENT_LIST_STACKING',
    '_NET_ACTIVE_WINDOW',
    '_NET_DESKTOP_NAMES',
    '_NET_DESKTOP_GEOMETRY',
    '_NET_SUPPORTED',
    '_NET_SUPPORTING_WM_CHECK',
    '_NET_WORKAREA',
    '_NET_CURRENT_DESKTOP', # 現在の仮想デスクトップ
    '_NET_NUMBER_OF_DESKTOPS', # 仮想デスクトップの数
    '_NET_DESKTOP_VIEWPORT',
    ]

* Tue 02 Jun 2015 05:39:58 PM JST
                                     
* Tue 02 Jun 2015 05:40:28 PM JST
None # should raise NotImplementedError()
* Tue 02 Jun 2015 05:45:33 PM JST
self
* Tue 02 Jun 2015 05:45:33 PM JST
return self
* Tue 02 Jun 2015 06:44:33 PM JST
None # should raise NotImplementedError()
* Tue 02 Jun 2015 06:46:33 PM JST
class WindowManager:
    """Class WindowManager
    """
    # Attributes:
    root = None  # (RootWindow) 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_name(self):
        """function get_name
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_active_window(self):
        """function get_active_window
        
        returns WindowClient
        """
        return None # should raise NotImplementedError()
    
    def list_windows(self, filter):
        """function list_windows
        
        filter: None
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def window_exists(self, window):
        """function window_exists
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def count_desktops(self):
        """function count_desktops
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_current_desktop(self):
        """function get_current_desktop
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_desktop_size(self):
        """function get_desktop_size
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_workarea(self):
        """function list_workarea
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_viewport(self):
        """function get_viewport
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 02 Jun 2015 06:47:12 PM JST
form 
* Tue 02 Jun 2015 06:49:04 PM JST

* Tue 02 Jun 2015 06:49:05 PM JST
window_client
* Tue 02 Jun 2015 06:49:06 PM JST
wm.window_client
* Tue 02 Jun 2015 06:49:12 PM JST
WindowClient
* Tue 02 Jun 2015 06:49:38 PM JST
KATOM_TO_CACHE_FOR_WINDOW_MANAGER
* Tue 02 Jun 2015 06:50:09 PM JST
        
* Tue 02 Jun 2015 06:50:49 PM JST
'_NET_CLIENT_LIST'
* Tue 02 Jun 2015 06:51:22 PM JST
    'CARDINAL',
    'WINDOW',
    'UTF8_STRING',
    '_WIN_WORKSPACE',
    '_WIN_WORKSPACE_COUNT',
    '_NET_CLIENT_LIST',
    '_NET_CLIENT_LIST_STACKING',
    '_NET_ACTIVE_WINDOW',
    '_NET_DESKTOP_NAMES',
    '_NET_DESKTOP_GEOMETRY',
    '_NET_SUPPORTED',
    '_NET_SUPPORTING_WM_CHECK',
    '_NET_WORKAREA',
    '_NET_CURRENT_DESKTOP', # 現在の仮想デスクトップ
    '_NET_NUMBER_OF_DESKTOPS', # 仮想デスクトップの数
    '_NET_DESKTOP_VIEWPORT',

* Tue 02 Jun 2015 06:52:58 PM JST
'_NET_SUPPORTING_WM_CHECK', 'WINDOW'
* Tue 02 Jun 2015 06:54:09 PM JST
_pack
* Tue 02 Jun 2015 06:54:09 PM JST
as _pack
* Tue 02 Jun 2015 06:54:09 PM JST
pack as _pack
* Tue 02 Jun 2015 06:54:26 PM JST
a
* Tue 02 Jun 2015 06:54:26 PM JST
form a
* Tue 02 Jun 2015 06:54:40 PM JST
window = unpack('I' * reply.value_len, array('B', reply.value).tostring())
* Tue 02 Jun 2015 09:52:59 PM JST
import backup_ni_remote
* Wed 03 Jun 2015 02:07:25 AM JST
pylib/
* Thu 04 Jun 2015 01:12:10 PM JST
window
* Thu 04 Jun 2015 01:13:00 PM JST
self.
* Thu 04 Jun 2015 01:13:58 PM JST
None # should raise NotImplementedError()
* Thu 04 Jun 2015 01:17:02 PM JST
None # should raise NotImplementedError()
* Thu 04 Jun 2015 01:18:46 PM JST
None # should raise NotImplementedError()
* Thu 04 Jun 2015 01:18:51 PM JST
None
* Thu 04 Jun 2015 01:18:56 PM JST
None
* Thu 04 Jun 2015 01:21:34 PM JST
names[0]
* Thu 04 Jun 2015 01:22:15 PM JST
return 
* Thu 04 Jun 2015 01:22:51 PM JST
_unpack('I' * reply.value_len,
                         _array('B', reply.value).tostring())
* Thu 04 Jun 2015 01:22:55 PM JST
                         
* Thu 04 Jun 2015 01:23:53 PM JST
wins
* Thu 04 Jun 2015 01:24:36 PM JST
'_NET_SUPPORTING_WM_CHECK'
* Thu 04 Jun 2015 01:25:14 PM JST
'_NET_ACTIVE_WINDOW'
* Thu 04 Jun 2015 01:25:49 PM JST
wins
* Thu 04 Jun 2015 01:25:56 PM JST
'_NET_CLIENT_LIST_STACKING'
* Thu 04 Jun 2015 01:26:05 PM JST
self._get_property_window('_NET_CLIENT_LIST_STACKING')
* Thu 04 Jun 2015 01:28:58 PM JST
'_NET_CURRENT_DESKTOP'
* Thu 04 Jun 2015 01:32:49 PM JST
self
* Thu 04 Jun 2015 01:33:06 PM JST
value
* Thu 04 Jun 2015 01:33:30 PM JST
num
* Thu 04 Jun 2015 01:33:34 PM JST
None # should raise NotImplementedError()
* Thu 04 Jun 2015 01:34:00 PM JST
_NET_CURRENT_DESKTOP
* Thu 04 Jun 2015 01:34:44 PM JST
'_NET_CURRENT_DESKTOP'
* Thu 04 Jun 2015 01:35:37 PM JST
None # should raise NotImplementedError()
* Thu 04 Jun 2015 01:36:04 PM JST
_NET_DESKTOP_GEOMETRY
* Thu 04 Jun 2015 01:36:24 PM JST
form 
* Thu 04 Jun 2015 01:36:44 PM JST
Rectangle
* Thu 04 Jun 2015 01:37:06 PM JST
_NET_DESKTOP_GEOMETRY
* Thu 04 Jun 2015 01:38:30 PM JST
None # should raise NotImplementedError()
* Thu 04 Jun 2015 01:38:50 PM JST
Point
* Thu 04 Jun 2015 01:39:16 PM JST
'_NET_WORKAREA'
* Thu 04 Jun 2015 01:40:09 PM JST
False, '_NET_WORKAREA', 'CARDINALl
* Thu 04 Jun 2015 01:40:58 PM JST
None # should raise NotImplementedError()
* Thu 04 Jun 2015 01:41:35 PM JST
_NET_DESKTOP_VIEWPORT
* Thu 04 Jun 2015 01:43:24 PM JST
None # should raise NotImplementedError()
* Thu 04 Jun 2015 01:43:56 PM JST
self._get_property_window('_NET_CLIENT_LIST_STACKING')
* Thu 04 Jun 2015 01:45:29 PM JST
import xcb,xcb.xproto;c=xcb.connect()
* Thu 04 Jun 2015 01:45:33 PM JST
from lab.xahk.wm.window_manager import WindowManager
* Thu 04 Jun 2015 01:46:02 PM JST
title
* Thu 04 Jun 2015 01:46:04 PM JST
0].title
* Thu 04 Jun 2015 01:46:04 PM JST
l[0].title
* Thu 04 Jun 2015 01:49:19 PM JST
[(w.title,w.id) for w in l]
* Thu 04 Jun 2015 01:50:12 PM JST
Rectangle
* Thu 04 Jun 2015 01:50:13 PM JST
Rectangle
* Thu 04 Jun 2015 01:51:35 PM JST
title
* Thu 04 Jun 2015 01:54:16 PM JST
Console
* Thu 04 Jun 2015 01:54:37 PM JST
Commandline
* Thu 04 Jun 2015 02:25:05 PM JST
class EventLoop:
    """Class EventLoop
    """
    # Attributes:
    dispatchers = None  # (list) 
    __observers = None  # (list) 
    __overriden_dispatcher = None  # () 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def create_default(self):
        """function create_default
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def current_event(self):
        """function current_event
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self):
        """function dispatch_event
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_event_dispatcher(self, dispatcher):
        """function add_event_dispatcher
        
        dispatcher: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_event_dispatcher(self, dispatcher):
        """function remove_event_dispatcher
        
        dispatcher: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def has_event_dispatcher(self, dispatcher):
        """function has_event_dispatcher
        
        dispatcher: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def add_observer(self, observer):
        """function add_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_observer(self, observer):
        """function remove_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def stop_event_stream(self):
        """function stop_event_stream
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def override_dispatcher(self, dispatcher):
        """function override_dispatcher
        
        dispatcher: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear_overriden_dispatcher(self):
        """function clear_overriden_dispatcher
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __on_dispatcher_list_changed(self):
        """function on_dispatcher_list_changed
        
        returns 
        """
        return None # should raise NotImplementedError()

* Thu 04 Jun 2015 02:27:54 PM JST

* Thu 04 Jun 2015 02:27:54 PM JST

* Thu 04 Jun 2015 02:27:55 PM JST
    __observers = None  # (list) 

* Thu 04 Jun 2015 02:28:20 PM JST
None  # (list) 
* Thu 04 Jun 2015 02:28:30 PM JST
  # () 
* Thu 04 Jun 2015 02:29:06 PM JST
not 
* Thu 04 Jun 2015 02:29:30 PM JST
None # should raise NotImplementedError()
* Thu 04 Jun 2015 02:29:37 PM JST
object
* Thu 04 Jun 2015 02:31:17 PM JST
return None # should raise NotImplementedError()
* Thu 04 Jun 2015 02:31:32 PM JST
return None # should raise NotImplementedError()
* Thu 04 Jun 2015 02:31:45 PM JST
return None # should raise NotImplementedError()
* Thu 04 Jun 2015 02:32:14 PM JST

* Thu 04 Jun 2015 02:32:14 PM JST

* Thu 04 Jun 2015 02:32:14 PM JST
        return None # should raise NotImplementedError()

* Thu 04 Jun 2015 02:32:24 PM JST
self._overriden_dispatcher = dispatcher
* Thu 04 Jun 2015 02:32:31 PM JST
dispatcher
* Thu 04 Jun 2015 02:34:34 PM JST
return None # should raise NotImplementedError()
* Thu 04 Jun 2015 02:34:59 PM JST

* Thu 04 Jun 2015 02:34:59 PM JST

* Thu 04 Jun 2015 02:34:59 PM JST
        Observable.__init__(self)

* Thu 04 Jun 2015 02:35:01 PM JST
Observable
* Thu 04 Jun 2015 02:35:04 PM JST

* Thu 04 Jun 2015 02:35:04 PM JST

* Thu 04 Jun 2015 02:35:04 PM JST
"""

* Thu 04 Jun 2015 02:35:06 PM JST

* Thu 04 Jun 2015 02:35:06 PM JST

* Thu 04 Jun 2015 02:35:06 PM JST
from observer import Observable

* Thu 04 Jun 2015 02:36:40 PM JST
event
* Thu 04 Jun 2015 02:36:54 PM JST
dispatcher
* Thu 04 Jun 2015 02:37:46 PM JST
dispatch_event
* Thu 04 Jun 2015 02:37:46 PM JST
dispatcher.dispatch_event
* Thu 04 Jun 2015 02:39:25 PM JST

class EventObserver:
    """Abstract class EventObserver
    """
    # Attributes:
    
    # Operations
    def before_process_event(self, event):
        """function before_process_event
        
        event: 
        
        returns 
        """
        raise NotImplementedError()
    
    def after_process_event(self, event):
        """function after_process_event
        
        event: 
        
        returns 
        """
        raise NotImplementedError()
    
    def on_registered_dispatcher(self, dispatcher):
        """function on_registered_dispatcher
        
        dispatcher: 
        
        returns 
        """
        raise NotImplementedError()
    


* Thu 04 Jun 2015 02:40:10 PM JST
class EventDispatcher:
    """Abstract class EventDispatcher
    """
    # Attributes:
    
    # Operations
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns bool
        """
        raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        raise NotImplementedError()
    


* Thu 04 Jun 2015 02:40:27 PM JST

* Thu 04 Jun 2015 02:40:27 PM JST

* Thu 04 Jun 2015 02:40:27 PM JST
from a import 

* Thu 04 Jun 2015 02:40:47 PM JST
@abstractmethod
* Thu 04 Jun 2015 03:52:35 PM JST
class DesktopHandler:
    """Class DesktopHandler
    """
    # Attributes:
    __current_window = None  # () 
    __display = None  # () 
    __atom_cache = None  # () 
    __observers = None  # () 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def activate_window(self, window):
        """function activate_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def deactivate_window(self, window):
        """function deactivate_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_active_window(self, window):
        """function is_active_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_observer(self, observer):
        """function add_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_observer(self, observer):
        """function remove_observer
        
        observer: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_changed_active_window(self):
        """function notify_changed_active_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Thu 04 Jun 2015 03:52:57 PM JST

* Thu 04 Jun 2015 03:52:59 PM JST
eventloop
* Thu 04 Jun 2015 03:53:02 PM JST
EventLoop
* Thu 04 Jun 2015 03:53:12 PM JST
form 
* Thu 04 Jun 2015 03:53:44 PM JST
xahk/
* Thu 04 Jun 2015 03:54:19 PM JST
Window
* Thu 04 Jun 2015 03:54:39 PM JST
observable
* Thu 04 Jun 2015 03:57:39 PM JST
Display
* Thu 04 Jun 2015 03:57:46 PM JST
display
* Thu 04 Jun 2015 03:57:50 PM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 10:37:16 AM JST
class DesktopWindow:
    """Class DesktopWindow
    """
    # Attributes:
    window = None  # (WindowClient) 
    __prop_cache = None  # (dict) 
    __atom_cache = None  # () 
    
    # Operations
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __int__(self):
        """function __int__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_title(self):
        """function get_title
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_title(self, title):
        """function set_title
        
        title: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_pid(self):
        """function get_pid
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_type(self):
        """function get_type
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_bounds(self):
        """function get_bounds
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_bounds(self):
        """function set_bounds
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def move(self, point):
        """function move
        
        point: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_size(self, size):
        """function set_size
        
        size: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def minimize(self):
        """function minimize
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_minimized(self):
        """function is_minimized
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def show(self):
        """function show
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def maximize(self):
        """function maximize
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_maximized(self):
        """function is_maximized
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def restore(self):
        """function restore
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def activate(self):
        """function activate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_active(self):
        """function is_active
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def deactivate(self):
        """function deactivate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_always_on_top(self, mode = WindowStateMode.Set):
        """function set_always_on_top
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_always_on_top(self):
        """function is_always_on_top
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_always_on_bottom(self, mode = WindowStateMode.Set):
        """function set_always_on_bottom
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_always_on_bottom(self):
        """function is_always_on_bottom
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_fullscreen(self, mode = WindowStateWindow.Set):
        """function set_fullscreen
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_fullscreened(self):
        """function is_fullscreened
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_shade(self, mode = WindowStateMode.Set):
        """function set_shade
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_shaded(self):
        """function is_shaded
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def hide(self):
        """function hide
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def close(self):
        """function close
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def delete(self):
        """function delete
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def destroy(self):
        """function destroy
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def move_cursor_to(self, point):
        """function move_cursor_to
        
        point: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def raise_window(self):
        """function raise_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def lower_window(self):
        """function lower_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_desktop(self):
        """function get_desktop
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def change_desktop(self):
        """function change_desktop
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __list_current_state(self):
        """function list_current_state
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __dispatch_property_changed(self, event):
        """function dispatch_property_changed
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_state_changed(self):
        """function notify_state_changed
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 05 Jun 2015 10:40:49 AM JST
class DesktopWindow:
    """Class DesktopWindow
    """
    # Attributes:
    window = None  # (WindowClient) 
    __prop_cache = None  # (dict) 
    __atom_cache = None  # () 
    
    # Operations
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __int__(self):
        """function __int__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_title(self):
        """function get_title
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_title(self, title):
        """function set_title
        
        title: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_pid(self):
        """function get_pid
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_type(self):
        """function get_type
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_bounds(self):
        """function get_bounds
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_bounds(self):
        """function set_bounds
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def move(self, point):
        """function move
        
        point: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_size(self, size):
        """function set_size
        
        size: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def minimize(self):
        """function minimize
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_minimized(self):
        """function is_minimized
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def show(self):
        """function show
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def maximize(self):
        """function maximize
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_maximized(self):
        """function is_maximized
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def restore(self):
        """function restore
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def activate(self):
        """function activate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_active(self):
        """function is_active
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def deactivate(self):
        """function deactivate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_always_on_top(self, mode = WindowStateMode.Set):
        """function set_always_on_top
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_always_on_top(self):
        """function is_always_on_top
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_always_on_bottom(self, mode = WindowStateMode.Set):
        """function set_always_on_bottom
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_always_on_bottom(self):
        """function is_always_on_bottom
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_fullscreen(self, mode = WindowStateWindow.Set):
        """function set_fullscreen
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_fullscreened(self):
        """function is_fullscreened
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_shade(self, mode = WindowStateMode.Set):
        """function set_shade
        
        mode: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_shaded(self):
        """function is_shaded
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def hide(self):
        """function hide
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def close(self):
        """function close
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def delete(self):
        """function delete
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def destroy(self):
        """function destroy
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def move_cursor_to(self, point):
        """function move_cursor_to
        
        point: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def raise_window(self):
        """function raise_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def lower_window(self):
        """function lower_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_desktop(self):
        """function get_desktop
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def change_desktop(self):
        """function change_desktop
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __list_current_state(self):
        """function list_current_state
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __dispatch_property_changed(self, event):
        """function dispatch_property_changed
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_state_changed(self):
        """function notify_state_changed
        
        returns 
        """
        return None # should raise NotImplementedError()

* Fri 05 Jun 2015 10:43:22 AM JST
KATOM_TO_CACHE_FOR_DESKTOP_WINDOW = ['ATOM',
                                     'WM_NAME',
                                     'WM_CLASS',
                                     '_NET_WM_NAME',
                                     '_NET_WM_STATE',
                                     '_NET_WM_PID',
                                     '_NET_WM_WINDOW_TYPE',
                                     '_NET_WM_STATE_FULLSCREEN',
                                     '_NET_WM_STATE_MAXIMIZED_VERT',
                                     '_NET_WM_STATE_MAXIMIZED_HORZ',
                                     '_NET_WM_STATE_HIDDEN',
                                     '_NET_WM_STATE_SHADED']


def find_window(event):
    r"""SUMMARY

    find_window(event)

    @Arguments:
    - `event`:

    @Return:

    @Error:
    """
    return event.window

* Fri 05 Jun 2015 10:46:13 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 10:47:47 AM JST
window
* Fri 05 Jun 2015 10:48:21 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 10:50:48 AM JST
    def __list_current_state(self):
        """function list_current_state
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __dispatch_property_changed(self, event):
        """function dispatch_property_changed
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_state_changed(self):
        """function notify_state_changed
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_minimized(self):
        """function notify_minimized
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_maximized(self):
        """function notify_maximized
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_fullscreened(self):
        """function notify_fullscreened
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_shaded(self):
        """function notify_shaded
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_destroyed(self):
        """function notify_destroyed
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_bounds_changed(self):
        """function notify_bounds_changed
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 05 Jun 2015 10:53:17 AM JST

* Fri 05 Jun 2015 10:53:17 AM JST

* Fri 05 Jun 2015 10:53:17 AM JST
        return

* Fri 05 Jun 2015 10:53:57 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 10:54:32 AM JST
        if isinstance(other, (DesktopWindow, )):
            return self.id == other.id
        return self.id == other

* Fri 05 Jun 2015 10:54:48 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 10:55:58 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 10:56:11 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 10:57:17 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 10:57:38 AM JST
sef.
* Fri 05 Jun 2015 10:58:52 AM JST
get_pid
* Fri 05 Jun 2015 10:59:42 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 10:59:46 AM JST
self._prop_cache['type']
* Fri 05 Jun 2015 11:00:32 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:00:36 AM JST
self._prop_cache['bounds']
* Fri 05 Jun 2015 11:00:42 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:00:59 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:01:10 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:01:22 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:01:33 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:01:35 AM JST
f
* Fri 05 Jun 2015 11:01:35 AM JST
sle.f
* Fri 05 Jun 2015 11:01:42 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:02:12 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:02:28 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:02:29 AM JST
f
* Fri 05 Jun 2015 11:02:30 AM JST
sle.f
* Fri 05 Jun 2015 11:02:43 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:02:51 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:02:59 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:03:02 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:03:04 AM JST
f
* Fri 05 Jun 2015 11:03:04 AM JST
sle.f
* Fri 05 Jun 2015 11:03:20 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:03:42 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:03:53 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:04:35 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:04:48 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:05:32 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:05:47 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:06:46 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:07:02 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:07:14 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:07:16 AM JST
f
* Fri 05 Jun 2015 11:07:16 AM JST
sle.f
* Fri 05 Jun 2015 11:07:33 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:07:41 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:07:49 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:08:05 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:08:09 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:08:10 AM JST
f
* Fri 05 Jun 2015 11:08:10 AM JST
lse.f
* Fri 05 Jun 2015 11:08:23 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:08:24 AM JST
f
* Fri 05 Jun 2015 11:08:24 AM JST
lse.f
* Fri 05 Jun 2015 11:08:35 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:08:45 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:09:07 AM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:12:07 AM JST
set(unpack('I' * rep.value_len, array('B', rep.value)))
* Fri 05 Jun 2015 11:14:44 AM JST
_aotm
* Fri 05 Jun 2015 11:19:03 AM JST
sle.
* Fri 05 Jun 2015 11:19:30 AM JST
self.window.get_atom('_NET_WM_PID')
* Fri 05 Jun 2015 11:20:10 AM JST

* Fri 05 Jun 2015 11:20:11 AM JST

* Fri 05 Jun 2015 11:20:11 AM JST
        return None # should raise NotImplementedError()

* Fri 05 Jun 2015 11:20:37 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:21:13 AM JST
states
* Fri 05 Jun 2015 11:21:38 AM JST
'_NET_WM_STATE_FULLSCREEN'
* Fri 05 Jun 2015 11:22:06 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Fri 05 Jun 2015 11:22:22 AM JST
self._atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_HORZ')
* Fri 05 Jun 2015 11:23:07 AM JST
_aotm
* Fri 05 Jun 2015 11:23:18 AM JST
'_NET_WM_STATE_HIDDEN'
* Fri 05 Jun 2015 11:23:43 AM JST
_aotm
* Fri 05 Jun 2015 11:24:02 AM JST
'_NET_WM_STATE_SHADED'
* Fri 05 Jun 2015 11:30:11 AM JST
display
* Fri 05 Jun 2015 11:31:37 AM JST
o
* Fri 05 Jun 2015 11:31:38 AM JST
form o
* Fri 05 Jun 2015 11:31:47 AM JST
object
* Fri 05 Jun 2015 11:32:20 AM JST
    def _notify_title_changed(self, ):
        r"""SUMMARY

        _notify_title_changed()

        @Return:

        @Error:
        """
        for observer in self._observers:
            observer.on_window_title_changed(self)


* Fri 05 Jun 2015 11:32:35 AM JST
        return None # should raise NotImplementedError()

* Fri 05 Jun 2015 11:33:00 AM JST
window.
* Fri 05 Jun 2015 11:33:10 AM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 11:33:11 AM JST
ofr 
* Fri 05 Jun 2015 11:33:41 AM JST
        for observer in self._observers:
            observer.on_window_shaded(self)

* Fri 05 Jun 2015 11:33:48 AM JST
        for observer in self._observers:
            observer.on_window_fullscreened(self)

* Fri 05 Jun 2015 11:33:54 AM JST
        for observer in self._observers:
            observer.on_window_maximized(self)

* Fri 05 Jun 2015 11:34:00 AM JST
        for observer in self._observers:
            observer.on_window_maximized(self)

* Fri 05 Jun 2015 12:20:05 PM JST
class DesktopWindowObserver:
    """Class DesktopWindowObserver
    """
    # Attributes:
    
    # Operations
    def on_window_title_changed(self, window):
        """function on_window_title_changed
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_window_maximized(self, window):
        """function on_window_maximized
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_window_minimized(self, window):
        """function on_window_minimized
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_window_fullscreened(self, window):
        """function on_window_fullscreened
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_window_shaded(self, window):
        """function on_window_shaded
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_window_destroyed(self, window_id):
        """function on_window_destroyed
        
        window_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_window_bouinds_changed(self, window):
        """function on_window_bouinds_changed
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 05 Jun 2015 01:20:10 PM JST
class DesktopManager:
    """Class DesktopManager
    """
    # Attributes:
    __window_manager = None  # () 
    __windows = None  # () 
    __atom_cache = None  # () 
    __active_window = None  # () 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_name(self):
        """function get_name
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_windows(self, filter = bool):
        """function list_windows
        
        filter: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_active_window(self, window):
        """function is_active_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def window_exists(self, window):
        """function window_exists
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def counts_desktops(self):
        """function counts_desktops
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_current_desktop(self):
        """function get_current_desktop
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_desktop_size(self):
        """function get_desktop_size
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_workarea(self):
        """function list_workarea
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_viewport(self):
        """function get_viewport
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __create_window(self, window):
        """function create_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __destroy_window(self, window_id):
        """function destroy_window
        
        window_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_created_window(self, window):
        """function notify_created_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_destroyed_window(self, window_id):
        """function notify_destroyed_window
        
        window_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_changed_active_window(self, window):
        """function notify_changed_active_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()

* Fri 05 Jun 2015 01:21:40 PM JST

* Fri 05 Jun 2015 01:21:40 PM JST

* Fri 05 Jun 2015 01:21:40 PM JST
    __window_manager = None  # () 

* Fri 05 Jun 2015 01:22:54 PM JST

* Fri 05 Jun 2015 01:22:54 PM JST

* Fri 05 Jun 2015 01:22:54 PM JST
    __windows = None  # () 

* Fri 05 Jun 2015 01:23:21 PM JST

* Fri 05 Jun 2015 01:23:21 PM JST

* Fri 05 Jun 2015 01:23:22 PM JST
    __atom_cache = None  # () 

* Fri 05 Jun 2015 01:23:47 PM JST
KATOM_TO_CACHE_FOR_WINDOW_MANAGER = ['_NET_CLIENT_LIST']
* Fri 05 Jun 2015 01:23:59 PM JST
KATOM_TO_CACHE_FOR_DESKTOP_MANAGER
* Fri 05 Jun 2015 01:25:27 PM JST
get_active_window
* Fri 05 Jun 2015 01:25:27 PM JST
self.get_active_window
* Fri 05 Jun 2015 01:27:56 PM JST
self._wm.get_active_window()
* Fri 05 Jun 2015 01:28:43 PM JST

* Fri 05 Jun 2015 01:28:43 PM JST

* Fri 05 Jun 2015 01:28:43 PM JST
    __active_window = None  # () 

* Fri 05 Jun 2015 01:29:03 PM JST
self.
* Fri 05 Jun 2015 01:29:17 PM JST

* Fri 05 Jun 2015 01:29:18 PM JST
atom_cache
* Fri 05 Jun 2015 01:29:20 PM JST
AtomCache
* Fri 05 Jun 2015 01:29:35 PM JST
return 
* Fri 05 Jun 2015 01:29:36 PM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 01:29:43 PM JST

* Fri 05 Jun 2015 01:29:44 PM JST
display
* Fri 05 Jun 2015 01:29:44 PM JST
commons.display
* Fri 05 Jun 2015 01:30:10 PM JST
get_display
* Fri 05 Jun 2015 01:30:14 PM JST

* Fri 05 Jun 2015 01:30:19 PM JST
EventLoop
* Fri 05 Jun 2015 01:30:54 PM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 01:31:23 PM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 01:31:52 PM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 01:31:57 PM JST
window)
* Fri 05 Jun 2015 01:31:57 PM JST
int(window)
* Fri 05 Jun 2015 01:32:11 PM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 01:32:22 PM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 01:32:55 PM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 01:32:56 PM JST
slf.
* Fri 05 Jun 2015 01:33:00 PM JST
curre
* Fri 05 Jun 2015 01:33:08 PM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 01:33:17 PM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 01:33:27 PM JST
None # should raise NotImplementedError()
* Fri 05 Jun 2015 01:33:56 PM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 01:34:16 PM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 01:34:36 PM JST
        return None # should raise NotImplementedError()

* Fri 05 Jun 2015 01:35:19 PM JST
        if not isinstance(event, (PropertyNotifyEvent, )):
            return False
        if event.atom == self._atom_cache.get_atom('_NET_CLIENT_LIST'):
            return True
        return False

* Fri 05 Jun 2015 01:36:01 PM JST
isinstance(event, (PropertyNotifyEvent, ))
* Fri 05 Jun 2015 01:36:05 PM JST

* Fri 05 Jun 2015 01:36:05 PM JST

* Fri 05 Jun 2015 01:36:05 PM JST
        if not isinstance(event, (PropertyNotifyEvent, )):

* Fri 05 Jun 2015 01:37:17 PM JST
'_NET_CLIENT_LIST'
* Fri 05 Jun 2015 01:38:10 PM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 01:38:59 PM JST
    def list_windows(self, filter=bool):
        """function list_windows

        filter:

        returns
        """
        return [w for w in self._windows if filter(w)]

    def is_active_window(self, window):
        """function is_active_window

        window:

        returns
        """
        return window == self._active_window

    def window_exists(self, window):
        """function window_exists

        window:

        returns
        """
        return window in self._windows

    def count_desktops(self):
        """function count_desktops

        returns
        """
        return self._wm.count_desktops()

    def get_current_desktop(self):
        """function get_current_desktop

        returns
        """
        return self._wm.get_current_desktop()

    def get_desktop_size(self):
        """function get_desktop_size

        returns
        """
        return self._wm.get_desktop_size()

    def list_workarea(self):
        """function list_workarea

        returns
        """
        return self._wm.list_workarea()

    def get_viewport(self):
        """function get_viewport

        returns
        """
        return self._wm.get_viewport()


* Fri 05 Jun 2015 01:42:49 PM JST
    def on_changed_active_window(self, ):
        r"""SUMMARY

        on_changed_active_window()

        @Return:

        @Error:
        """


* Fri 05 Jun 2015 01:43:33 PM JST

* Fri 05 Jun 2015 01:43:33 PM JST

* Fri 05 Jun 2015 01:43:33 PM JST
        return None # should raise NotImplementedError()

* Fri 05 Jun 2015 01:43:53 PM JST
get_id()
* Fri 05 Jun 2015 01:43:59 PM JST
get_id()
* Fri 05 Jun 2015 01:43:59 PM JST
get_id()        win_id = window.

* Fri 05 Jun 2015 01:44:10 PM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 01:45:44 PM JST
        active_win = self._wm.get_active_window()
        for window in self._windows:
            if window.id == active_win.id:
                self._active_window = window
                break

* Fri 05 Jun 2015 01:45:54 PM JST

* Fri 05 Jun 2015 01:45:54 PM JST

* Fri 05 Jun 2015 01:45:54 PM JST
        active = self._wm.get_active_window()

* Fri 05 Jun 2015 01:59:27 PM JST
WindowIDSpec
* Fri 05 Jun 2015 02:01:25 PM JST
        active_win = self._wm.get_active_window()
        wins = self.list_windows(WindowIDSpec(active_win.get_id()))
        if not wins:
            # TODO: (Atami) [2015/06/05]
            raise StandardError()
        self._active_window = wins[0]

* Fri 05 Jun 2015 02:45:42 PM JST
    def on_window_title_changed(self, window):
        """function on_window_title_changed

        window:

        returns
        """
        return None # should raise NotImplementedError()

    def on_window_maximized(self, window):
        """function on_window_maximized

        window:

        returns
        """
        return None # should raise NotImplementedError()

    def on_window_minimized(self, window):
        """function on_window_minimized

        window:

        returns
        """
        return None # should raise NotImplementedError()

    def on_window_fullscreened(self, window):
        """function on_window_fullscreened

        window:

        returns
        """
        return None # should raise NotImplementedError()

    def on_window_shaded(self, window):
        """function on_window_shaded

        window:

        returns
        """
        return None # should raise NotImplementedError()

    def on_window_destroyed(self, window_id):
        """function on_window_destroyed

        window_id:

        returns
        """
        return None # should raise NotImplementedError()

    def on_window_bounds_changed(self, window):
        """function on_window_bouinds_changed

        window:

        returns
        """
        return None # should raise NotImplementedError()

* Fri 05 Jun 2015 02:46:52 PM JST
self
* Fri 05 Jun 2015 02:46:55 PM JST

* Fri 05 Jun 2015 02:46:56 PM JST

* Fri 05 Jun 2015 02:46:56 PM JST
        return None # should raise NotImplementedError()

* Fri 05 Jun 2015 02:47:00 PM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 02:47:44 PM JST
print('Window ({0.title}, {0.wmclass}) Maximized')
* Fri 05 Jun 2015 02:47:49 PM JST
Maximized
* Fri 05 Jun 2015 02:47:59 PM JST
print('Window ({0.title}, {0.wmclass}) Minimized')
* Fri 05 Jun 2015 02:48:02 PM JST
Minimized
* Fri 05 Jun 2015 02:48:11 PM JST
print('Window ({0.title}, {0.wmclass}) Fullscreened')
* Fri 05 Jun 2015 02:48:18 PM JST
Fullscreened
* Fri 05 Jun 2015 02:48:27 PM JST
print('Window ({0.title}, {0.wmclass}) Shaded')
* Fri 05 Jun 2015 02:48:33 PM JST
title
* Fri 05 Jun 2015 02:48:38 PM JST
Shaded
* Fri 05 Jun 2015 02:49:41 PM JST
({0.title}, {0.wmclass})
* Fri 05 Jun 2015 02:52:25 PM JST
class DesktopManagerObserver:
    """Class DesktopManagerObserver
    """
    # Attributes:
    
    # Operations
    def on_changed_active_window(self):
        """function on_changed_active_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_created_window(self, window):
        """function on_created_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_destroyed_window(self, window_id):
        """function on_destroyed_window
        
        window_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_changed_desktop(self, desktop_id):
        """function on_changed_desktop
        
        desktop_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 05 Jun 2015 02:53:21 PM JST
    def on_changed_active_window(self):
        """function on_changed_active_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_created_window(self, window):
        """function on_created_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_destroyed_window(self, window_id):
        """function on_destroyed_window
        
        window_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_changed_desktop(self, desktop_id):
        """function on_changed_desktop
        
        desktop_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()

* Fri 05 Jun 2015 02:56:05 PM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 02:56:34 PM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 02:57:02 PM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 02:58:40 PM JST
wm
* Fri 05 Jun 2015 02:58:45 PM JST
wm
* Fri 05 Jun 2015 02:59:01 PM JST
return None # should raise NotImplementedError()
* Fri 05 Jun 2015 02:59:37 PM JST
0.title
* Fri 05 Jun 2015 03:01:05 PM JST
window
* Fri 05 Jun 2015 03:01:05 PM JST
wm.window
* Fri 05 Jun 2015 03:01:11 PM JST
Window
* Fri 05 Jun 2015 03:01:46 PM JST
event
* Fri 05 Jun 2015 03:03:44 PM JST
dispatch_
* Fri 05 Jun 2015 03:03:44 PM JST
loop.dispatch_
* Fri 05 Jun 2015 03:03:46 PM JST
while 1:
* Fri 05 Jun 2015 03:03:47 PM JST
loop=
* Fri 05 Jun 2015 03:05:45 PM JST
la
* Fri 05 Jun 2015 03:05:45 PM JST
form la
* Fri 05 Jun 2015 03:06:52 PM JST
DebugDesktopManagerObserver
* Fri 05 Jun 2015 03:07:12 PM JST
wm.list_windows()
* Fri 05 Jun 2015 03:07:39 PM JST
DebugDesktopWindowObserver()
* Fri 05 Jun 2015 03:07:55 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()

* Fri 05 Jun 2015 03:08:01 PM JST
wm=DesktopManager(c)
wm.add_observer(DebugDesktopManagerObserver())

* Fri 05 Jun 2015 03:09:41 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()

* Fri 05 Jun 2015 03:09:46 PM JST
wm=DesktopManager(c)

* Fri 05 Jun 2015 03:09:55 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()

wm=DesktopManager(c)

* Fri 05 Jun 2015 03:10:14 PM JST
wm.add_observer(DebugDesktopManagerObserver())

* Fri 05 Jun 2015 03:10:48 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()

wm=DesktopManager(c)

* Fri 05 Jun 2015 03:10:51 PM JST
wm.add_observer(DebugDesktopManagerObserver())

* Fri 05 Jun 2015 03:10:56 PM JST
debug=DebugDesktopWindowObserver()

* Fri 05 Jun 2015 03:11:00 PM JST
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 03:11:26 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 03:15:37 PM JST
self._wm.root.window.
* Fri 05 Jun 2015 03:16:13 PM JST
CW.EventMask, [EventMask.PropertyChange | mask]
* Fri 05 Jun 2015 03:16:38 PM JST
root.
* Fri 05 Jun 2015 03:16:40 PM JST
display
* Fri 05 Jun 2015 03:17:02 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()

wm=DesktopManager(c)
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 03:17:34 PM JST
get_window
* Fri 05 Jun 2015 03:18:04 PM JST
set_window
* Fri 05 Jun 2015 03:18:21 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()

wm=DesktopManager(c)

* Fri 05 Jun 2015 03:18:25 PM JST
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 03:18:28 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 03:20:38 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()

wm=DesktopManager(c)

* Fri 05 Jun 2015 03:20:41 PM JST
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 03:22:19 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()

wm=DesktopManager(c)
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 03:22:23 PM JST
EventLoop.get_instance().dispatch_event()
* Fri 05 Jun 2015 03:22:36 PM JST
<xcb.xproto.ConfigureNotifyEvent object at 0x92c594c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c594c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c594c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c594c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c594c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c594c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c594c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c594c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c594c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c592c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c592c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c592c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c592c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c592c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c592c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c592c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c592c>
<xcb.xproto.ConfigureNotifyEvent object at 0x92c592c>

* Fri 05 Jun 2015 03:26:38 PM JST
mask|
* Fri 05 Jun 2015 03:27:12 PM JST
import xcb,xcb.xprot
* Fri 05 Jun 2015 03:27:14 PM JST
import xcb,xcb.xproto;c=xcb.connect()
* Fri 05 Jun 2015 03:28:03 PM JST
mask = self.window.window.get_attributes().reply().your_event_mask
* Fri 05 Jun 2015 03:28:12 PM JST
mask = 
* Fri 05 Jun 2015 03:28:25 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()

wm=DesktopManager(c)
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 03:28:38 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 03:28:59 PM JST
print(self.window.window.get_attributes().reply().your_event_mask)
* Fri 05 Jun 2015 03:29:14 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()

wm=DesktopManager(c)
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 03:29:18 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 03:30:11 PM JST

* Fri 05 Jun 2015 03:30:11 PM JST

* Fri 05 Jun 2015 03:30:11 PM JST
        print(self.window.window.get_attributes().reply().your_event_mask)

* Fri 05 Jun 2015 03:30:11 PM JST

* Fri 05 Jun 2015 03:30:11 PM JST

* Fri 05 Jun 2015 03:30:11 PM JST
        print(event)

* Fri 05 Jun 2015 03:30:13 PM JST

* Fri 05 Jun 2015 03:30:13 PM JST

* Fri 05 Jun 2015 03:30:13 PM JST
        print(self.window.window.get_attributes().reply().your_event_mask)

* Fri 05 Jun 2015 03:30:51 PM JST
self._wm.root.window.get_attributes(
            ).reply().your_event_mask
* Fri 05 Jun 2015 03:30:56 PM JST
            
* Fri 05 Jun 2015 03:31:08 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()

wm=DesktopManager(c)
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 03:31:31 PM JST
EventLoop.get_instance().dispatch_event()
* Fri 05 Jun 2015 03:32:26 PM JST
se.
* Fri 05 Jun 2015 03:34:07 PM JST
import xcb,xcb.xprot
* Fri 05 Jun 2015 03:34:08 PM JST
import xcb,xcb.xproto;c=xcb.connect()
* Fri 05 Jun 2015 03:34:21 PM JST
ChangeWindowAttributesChecked
* Fri 05 Jun 2015 03:35:05 PM JST
        display = self._wm.get_display()
        mask = display.core.GetWindowAttributes(
            self._wm.root).reply().your_event_mask
        cookie = display.core.ChangeWindowAttributesChecked(
            self._wm.root, CW.EventMask, [EventMask.PropertyChange|mask])
        cookie.check()

* Fri 05 Jun 2015 03:35:29 PM JST
root
* Fri 05 Jun 2015 03:35:30 PM JST
_wm.root
* Fri 05 Jun 2015 03:35:42 PM JST
root
* Fri 05 Jun 2015 03:35:43 PM JST
_wm.root
* Fri 05 Jun 2015 03:36:06 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()

wm=DesktopManager(c)

* Fri 05 Jun 2015 03:36:11 PM JST
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 03:36:14 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 03:38:32 PM JST
EventMask.StructureNotify|
* Fri 05 Jun 2015 03:38:55 PM JST
EventMask.StructureNotify|
* Fri 05 Jun 2015 03:39:14 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()

wm=DesktopManager(c)
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 03:39:17 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 03:41:41 PM JST
        mask = display.core.GetWindowAttributes(
            self._wm.root).reply().your_event_mask

* Fri 05 Jun 2015 03:41:46 PM JST
                                        
* Fri 05 Jun 2015 03:41:50 PM JST
display
* Fri 05 Jun 2015 03:41:53 PM JST
root
* Fri 05 Jun 2015 03:41:53 PM JST
wm.root
* Fri 05 Jun 2015 03:41:54 PM JST
self._wm.root
* Fri 05 Jun 2015 03:42:03 PM JST
        cookie = display.core.ChangeWindowAttributesChecked(
            self._wm.root, CW.EventMask,
            [EventMask.StructureNotify|EventMask.PropertyChange|mask])

* Fri 05 Jun 2015 03:42:26 PM JST
                                    
* Fri 05 Jun 2015 03:42:29 PM JST
                                                   
* Fri 05 Jun 2015 03:42:36 PM JST
display
* Fri 05 Jun 2015 03:42:52 PM JST
root
* Fri 05 Jun 2015 03:42:53 PM JST
wm.root
* Fri 05 Jun 2015 03:42:53 PM JST
self._wm.root
* Fri 05 Jun 2015 03:43:12 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager(c)
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 03:43:17 PM JST
mask = c.core.GetWindowAttributes(482).reply().your_event_mask
cookie = c.core.ChangeWindowAttributesChecked(
482, CW.EventMask, [EventMask.PropertyChange|mask])
cookie.check()

* Fri 05 Jun 2015 03:43:24 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 03:44:53 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager(c)
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

#mask = c.core.GetWindowAttributes(482).reply().your_event_mask
cookie = c.core.ChangeWindowAttributesChecked(
482, CW.EventMask, [EventMask.PropertyChange])
cookie.check()

* Fri 05 Jun 2015 03:44:58 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 05:37:46 PM JST
EventMask.StructureNotify
* Fri 05 Jun 2015 05:37:52 PM JST
StructureNotify
* Fri 05 Jun 2015 05:38:10 PM JST
#mask = c.core.GetWindowAttributes(482).reply().your_event_mask
cookie = c.core.ChangeWindowAttributesChecked(
482, CW.EventMask, [EventMask.PropertyChange])
cookie.check()

* Fri 05 Jun 2015 05:38:18 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager(c)
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 05:38:23 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 05:39:25 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager(c)
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 05:39:31 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 05:39:51 PM JST
import xcb,xcb.xprot
* Fri 05 Jun 2015 05:39:53 PM JST
import xcb,xcb.xproto;c=xcb.connect()
* Fri 05 Jun 2015 05:40:12 PM JST
xcb.xproto.EventMask.
* Fri 05 Jun 2015 05:40:30 PM JST

* Fri 05 Jun 2015 05:40:30 PM JST

* Fri 05 Jun 2015 05:40:30 PM JST
        print(mask)

* Fri 05 Jun 2015 05:41:03 PM JST
             
* Fri 05 Jun 2015 05:41:12 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager(c)
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 05:41:16 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 05:42:51 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]



EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 05:42:54 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 05:42:59 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 05:45:15 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]



EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 05:45:18 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 05:45:23 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 05:46:37 PM JST
EventMask.StructureNotify|EventMask.PropertyChange
* Fri 05 Jun 2015 05:46:49 PM JST
xc
* Fri 05 Jun 2015 05:46:50 PM JST
form xc
* Fri 05 Jun 2015 05:47:05 PM JST
xproto.
* Fri 05 Jun 2015 05:47:05 PM JST
xcb.xproto.
* Fri 05 Jun 2015 05:47:08 PM JST
xproto.
* Fri 05 Jun 2015 05:47:08 PM JST
xcb.xproto.
* Fri 05 Jun 2015 05:47:17 PM JST
EventMask.PropertyChange
* Fri 05 Jun 2015 05:47:47 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 05:47:51 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 05:51:14 PM JST

* Fri 05 Jun 2015 05:51:14 PM JST

* Fri 05 Jun 2015 05:51:14 PM JST
        print(self._wm.root.window.get_attributes().reply().your_event_mask)

* Fri 05 Jun 2015 05:53:22 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 05:53:26 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 05:55:15 PM JST
event
* Fri 05 Jun 2015 05:55:17 PM JST
event
* Fri 05 Jun 2015 05:55:48 PM JST
print
* Fri 05 Jun 2015 05:55:56 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 05:56:03 PM JST
EventLoop.get_instance().dispatch_event()
* Fri 05 Jun 2015 05:57:41 PM JST
PropertyNoti
* Fri 05 Jun 2015 05:58:49 PM JST

* Fri 05 Jun 2015 05:58:50 PM JST

* Fri 05 Jun 2015 05:58:50 PM JST
            print('\n')

* Fri 05 Jun 2015 05:59:04 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 05:59:11 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 10:24:48 PM JST

* Fri 05 Jun 2015 10:24:48 PM JST

* Fri 05 Jun 2015 10:24:48 PM JST
            print('DEBUG-1-desktop_manager.py')

* Fri 05 Jun 2015 10:27:09 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 10:27:15 PM JST
EventLoop.get_instance().dispatch_event()
* Fri 05 Jun 2015 10:28:27 PM JST
StructureNotify|
* Fri 05 Jun 2015 10:28:27 PM JST
EventMask.StructureNotify|
* Fri 05 Jun 2015 10:28:35 PM JST
SubstructureNotify|
* Fri 05 Jun 2015 10:28:35 PM JST
EventMask.SubstructureNotify|
* Fri 05 Jun 2015 10:28:37 PM JST
            
* Fri 05 Jun 2015 10:28:44 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 10:28:48 PM JST
EventLoop.get_instance().dispatch_event()
* Fri 05 Jun 2015 10:47:11 PM JST
            
* Fri 05 Jun 2015 11:37:48 PM JST
EventMask.StructureNotify
* Fri 05 Jun 2015 11:38:08 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Fri 05 Jun 2015 11:38:13 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 11:39:20 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 11:39:41 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 05 Jun 2015 11:43:26 PM JST
self.
* Fri 05 Jun 2015 11:45:43 PM JST
print(self._windows)
* Fri 05 Jun 2015 11:52:20 PM JST
Window
* Fri 05 Jun 2015 11:54:15 PM JST
0x1a00003, 0x3600001, 0x2a000d9, 0x2e00016, 0x2200004, 0x1800004, 0x1800019, 0x4800003
* Fri 05 Jun 2015 11:54:26 PM JST
0x1800004, 0x1a00003, 0x1800019, 0x2200004, 0x2e00016, 0x2a000d9, 0x3600001, 0x4800003
* Sat 06 Jun 2015 12:02:52 AM JST
WindowClient
* Sat 06 Jun 2015 12:03:13 AM JST
from lab.xahk.wm.window_client import WindowStateMode, WindowClient
* Sat 06 Jun 2015 12:12:39 AM JST
self._windows
* Sat 06 Jun 2015 12:12:51 AM JST
self._wm.list_windows()
* Sat 06 Jun 2015 11:12:54 AM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

EventLoop.get_instance().dispatch_event()

* Sat 06 Jun 2015 11:13:31 AM JST

* Sat 06 Jun 2015 11:13:32 AM JST
window
* Sat 06 Jun 2015 11:13:33 AM JST
desktop_window
* Sat 06 Jun 2015 11:13:47 AM JST
DesktopWindow
* Sat 06 Jun 2015 11:15:21 AM JST
from lab.xahk.desktop_window import DesktopWindow
from lab.xahk.wm.window_client import WindowClient
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()

* Sat 06 Jun 2015 11:17:25 AM JST
from lab.xahk.desktop_window import DesktopWindow
from lab.xahk.wm.window_client import WindowClient
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()

* Sat 06 Jun 2015 11:19:36 AM JST
in 
* Sat 06 Jun 2015 11:19:36 AM JST
w in 
* Sat 06 Jun 2015 11:19:36 AM JST
for w in 
* Sat 06 Jun 2015 11:19:37 AM JST
get_id() for w in 
* Sat 06 Jun 2015 11:19:37 AM JST
w.get_id() for w in 
* Sat 06 Jun 2015 11:19:41 AM JST
in 
* Sat 06 Jun 2015 11:19:41 AM JST
w in 
* Sat 06 Jun 2015 11:19:41 AM JST
for w in 
* Sat 06 Jun 2015 11:19:42 AM JST
get_id() for w in 
* Sat 06 Jun 2015 11:19:52 AM JST
DesktopWindow(window)
* Sat 06 Jun 2015 11:19:57 AM JST
window
* Sat 06 Jun 2015 11:20:08 AM JST

* Sat 06 Jun 2015 11:20:09 AM JST

* Sat 06 Jun 2015 11:20:09 AM JST
        newwin = DesktopWindow(window)

* Sat 06 Jun 2015 11:20:22 AM JST
newwin
* Sat 06 Jun 2015 11:20:26 AM JST
newwin
* Sat 06 Jun 2015 11:20:31 AM JST

* Sat 06 Jun 2015 11:20:31 AM JST

* Sat 06 Jun 2015 11:20:31 AM JST
        print(newwin)

* Sat 06 Jun 2015 11:21:19 AM JST
from lab.xahk.desktop_window import DesktopWindow
from lab.xahk.wm.window_client import WindowClient
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Sat 06 Jun 2015 11:21:24 AM JST
EventLoop.get_instance().dispatch_event()

* Sat 06 Jun 2015 11:24:29 AM JST
from lab.xahk.desktop_window import DesktopWindow
from lab.xahk.wm.window_client import WindowClient
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Sat 06 Jun 2015 11:24:40 AM JST
EventLoop.get_instance().dispatch_event()

* Sat 06 Jun 2015 11:25:43 AM JST
    def __repr__(self):
        return 'DesktopWindow(id={0.id}, wmclass={0.wmclass})'.format(self)

* Sat 06 Jun 2015 11:25:57 AM JST
Desktop
* Sat 06 Jun 2015 11:26:24 AM JST
from lab.xahk.desktop_window import DesktopWindow
from lab.xahk.wm.window_client import WindowClient
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Sat 06 Jun 2015 11:26:32 AM JST
EventLoop.get_instance().dispatch_event()

* Sat 06 Jun 2015 11:28:35 AM JST
      
* Sat 06 Jun 2015 11:30:36 AM JST
_NET_ACTIVE_WINDOW
* Sat 06 Jun 2015 11:31:28 AM JST
from lab.xahk.desktop_window import DesktopWindow
from lab.xahk.wm.window_client import WindowClient
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Sat 06 Jun 2015 11:31:35 AM JST
EventLoop.get_instance().dispatch_event()

* Sat 06 Jun 2015 11:32:30 AM JST
from lab.xahk.desktop_window import DesktopWindow
from lab.xahk.wm.window_client import WindowClient
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Sat 06 Jun 2015 11:33:04 AM JST
EventLoop.get_instance().dispatch_event()

* Sat 06 Jun 2015 11:43:25 AM JST
from lab.xahk.desktop_window import DesktopWindow
from lab.xahk.wm.window_client import WindowClient
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Sat 06 Jun 2015 11:43:32 AM JST
EventLoop.get_instance().dispatch_event()

* Sat 06 Jun 2015 11:44:58 AM JST
not 
* Sat 06 Jun 2015 11:55:38 AM JST
on_changed_active_window
* Sat 06 Jun 2015 11:58:58 AM JST
X11DesktopHandler
* Sat 06 Jun 2015 11:59:00 AM JST

* Sat 06 Jun 2015 12:02:48 PM JST
    def on_changed_active_window(self, window_id):
        r"""SUMMARY

        on_changed_active_window(window_id)

        @Arguments:
        - `window_id`:

        @Return:

        @Error:
        """
        pass

* Sat 06 Jun 2015 12:02:51 PM JST
pass
* Sat 06 Jun 2015 12:03:00 PM JST
DebugX11DesktopHandlerObserver
* Sat 06 Jun 2015 12:04:57 PM JST
X11DesktopHandler
* Sat 06 Jun 2015 12:05:07 PM JST
DebugX11DesktopHandlerObserver
* Sat 06 Jun 2015 12:05:24 PM JST
from _xahk2.x11_desktop_handler import X11DesktopHandler
from _xahk2.x11_desktop_handler_observer import DebugX11DesktopHandlerObserver
from _xahk2.eventloop import EventLoop

* Sat 06 Jun 2015 12:05:52 PM JST
DebugX11DesktopHandlerObserver
* Sat 06 Jun 2015 12:06:01 PM JST
from _xahk2.x11_desktop_handler import X11DesktopHandler
from _xahk2.x11_desktop_handler_observer import DebugX11DesktopHandlerObserver
from _xahk2.eventloop import EventLoop

* Sat 06 Jun 2015 12:07:03 PM JST
class DebugX11DesktopHandlerObserver(X11DesktopHandlerObserver):
    r"""DebugX11DesktopHandlerObserver

    DebugX11DesktopHandlerObserver is a X11DesktopHandlerObserver.
    Responsibility:
    """
    def on_changed_active_window(self, window_id):
        r"""SUMMARY

        on_changed_active_window(window_id)

        @Arguments:
        - `window_id`:

        @Return:

        @Error:
        """
        print(window_id)

* Sat 06 Jun 2015 12:07:42 PM JST
from _xahk2.x11_desktop_handler import X11DesktopHandler
from _xahk2.x11_desktop_handler_observer import DebugX11DesktopHandlerObserver
from _xahk2.eventloop import EventLoop

* Sat 06 Jun 2015 12:07:46 PM JST
X11DesktopHandler.get_instance().add_observer(DebugX11DesktopHandlerObserver())

* Sat 06 Jun 2015 12:07:52 PM JST
EventLoop.get_instance().dispatch_event()

* Sat 06 Jun 2015 12:09:11 PM JST
from _xahk2.x11_desktop_handler import X11DesktopHandler
from _xahk2.x11_desktop_handler_observer import DebugX11DesktopHandlerObserver
from _xahk2.eventloop import EventLoop

X11DesktopHandler.get_instance().add_observer(DebugX11DesktopHandlerObserver())

* Sat 06 Jun 2015 12:09:14 PM JST
EventLoop.get_instance().dispatch_event()

* Sat 06 Jun 2015 12:17:56 PM JST

* Sat 06 Jun 2015 12:17:57 PM JST

* Sat 06 Jun 2015 12:17:57 PM JST
        print('DEBUG-1-window_manager.py')

* Sat 06 Jun 2015 12:18:20 PM JST

* Sat 06 Jun 2015 12:18:20 PM JST

* Sat 06 Jun 2015 12:18:20 PM JST
        print(active_win)

* Sat 06 Jun 2015 12:19:10 PM JST
from lab.xahk.desktop_window import DesktopWindow
from lab.xahk.wm.window_client import WindowClient
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Sat 06 Jun 2015 12:19:16 PM JST
EventLoop.get_instance().dispatch_event()

* Sat 06 Jun 2015 12:23:04 PM JST
wmclass={0.wmclass}
* Sat 06 Jun 2015 12:23:20 PM JST
EventLoop.get_instance().dispatch_event()

* Sat 06 Jun 2015 12:23:54 PM JST
from lab.xahk.desktop_window import DesktopWindow
from lab.xahk.wm.window_client import WindowClient
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Sat 06 Jun 2015 12:23:58 PM JST
EventLoop.get_instance().dispatch_event()

* Sat 06 Jun 2015 12:24:36 PM JST
{0.title}
* Sat 06 Jun 2015 12:24:43 PM JST
{0.title}
* Sat 06 Jun 2015 12:33:41 PM JST
self._atom_cache.get_atom('_NET_CLIENT_LIST')
* Sat 06 Jun 2015 12:34:08 PM JST
from lab.xahk.desktop_window import DesktopWindow
from lab.xahk.wm.window_client import WindowClient
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver

import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Sat 06 Jun 2015 12:34:13 PM JST
EventLoop.get_instance().dispatch_event()


* Sat 06 Jun 2015 12:36:34 PM JST
from lab.xahk.desktop_window import DesktopWindow
from lab.xahk.wm.window_client import WindowClient
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver

import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Sat 06 Jun 2015 12:36:39 PM JST
EventLoop.get_instance().dispatch_event()

* Sat 06 Jun 2015 12:40:50 PM JST
self._windows
* Sat 06 Jun 2015 12:41:02 PM JST
print(self._windows)
* Sat 06 Jun 2015 03:13:58 PM JST

* Sat 06 Jun 2015 03:13:58 PM JST

* Sat 06 Jun 2015 03:13:58 PM JST
        print(self._windows)

* Sat 06 Jun 2015 03:13:59 PM JST

* Sat 06 Jun 2015 03:13:59 PM JST

* Sat 06 Jun 2015 03:13:59 PM JST
        print(self._windows)

* Sat 06 Jun 2015 03:14:07 PM JST

* Sat 06 Jun 2015 03:14:08 PM JST

* Sat 06 Jun 2015 03:14:08 PM JST
            print('DEBUG-1-desktop_manager.py')

* Sat 06 Jun 2015 03:14:12 PM JST

* Sat 06 Jun 2015 03:14:12 PM JST

* Sat 06 Jun 2015 03:14:12 PM JST
        print('\nDesktopManager {}'.format(event))

* Sat 06 Jun 2015 03:16:10 PM JST
change_attributes_checked
* Sat 06 Jun 2015 03:16:57 PM JST

* Sat 06 Jun 2015 03:16:57 PM JST

* Sat 06 Jun 2015 03:16:57 PM JST
        self._update_active_window()

* Sat 06 Jun 2015 03:17:18 PM JST
from lab.xahk.desktop_window import DesktopWindow
from lab.xahk.wm.window_client import WindowClient
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver

import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]

* Sat 06 Jun 2015 03:17:23 PM JST
EventLoop.get_instance().dispatch_event()

* Sat 06 Jun 2015 03:19:34 PM JST

* Sat 06 Jun 2015 03:19:34 PM JST

* Sat 06 Jun 2015 03:19:35 PM JST
        self.window.get_display().flush()

* Sat 06 Jun 2015 03:21:09 PM JST
EventMask.StructureNotify
* Sat 06 Jun 2015 03:23:33 PM JST

* Sat 06 Jun 2015 03:23:33 PM JST

* Sat 06 Jun 2015 03:23:33 PM JST
        EventLoop.get_instance().add_event_dispatcher(self)

* Sat 06 Jun 2015 03:25:20 PM JST
EventMask.PropertyChange
* Sat 06 Jun 2015 03:25:29 PM JST
xproto.
* Sat 06 Jun 2015 03:25:29 PM JST
xcb.xproto.
* Sat 06 Jun 2015 03:25:31 PM JST
xproto.
* Sat 06 Jun 2015 03:25:31 PM JST
xcb.xproto.
* Sat 06 Jun 2015 03:25:38 PM JST
from xcb.xproto import EventMask, CW
* Sat 06 Jun 2015 03:27:23 PM JST

* Sat 06 Jun 2015 03:27:23 PM JST

* Sat 06 Jun 2015 03:27:23 PM JST
            print(event)

* Sat 06 Jun 2015 03:28:02 PM JST
        EventLoop.get_instance().add_event_dispatcher(self)


* Sat 06 Jun 2015 10:29:16 PM JST
class Cursor:
    """Class Cursor
    """
    # Attributes:
    __display = None  # () 
    __under_window = None  # () 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_under_window(self):
        """function get_under_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_created_window(self, window):
        """function on_created_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __update_under_window(self):
        """function update_under_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __set_under_window(self, window):
        """function set_under_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __change_window_attributes(self, window):
        """function change_window_attributes
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()

* Sat 06 Jun 2015 10:29:55 PM JST
DispatchE
* Sat 06 Jun 2015 10:29:57 PM JST
dispatch_event
* Sat 06 Jun 2015 10:30:06 PM JST
EventDispatcher
* Sat 06 Jun 2015 10:31:24 PM JST
None # should raise NotImplementedError()
* Sat 06 Jun 2015 10:32:28 PM JST
form 
* Sat 06 Jun 2015 10:32:42 PM JST

* Sat 06 Jun 2015 10:32:50 PM JST
DesktopManagerObserver
* Sat 06 Jun 2015 10:34:26 PM JST
DesktopM
* Sat 06 Jun 2015 10:35:54 PM JST
form 
* Sat 06 Jun 2015 10:36:09 PM JST
        if event.detail in (NotifyDetail.Inferior, NotifyDetail.Ancestor):
            return False
        if event.mode == NotifyMode.Grab:
            return False
        return True

* Sat 06 Jun 2015 10:36:22 PM JST
NotifyDetail
* Sat 06 Jun 2015 10:36:29 PM JST
NotifyMode
* Sat 06 Jun 2015 10:37:09 PM JST
return None # should raise NotImplementedError()
* Sat 06 Jun 2015 10:37:29 PM JST
WindowManager
* Sat 06 Jun 2015 10:37:47 PM JST
la
* Sat 06 Jun 2015 10:37:48 PM JST
form la
* Sat 06 Jun 2015 10:38:09 PM JST
DesktopManager.get_instance().list_windows()
* Sat 06 Jun 2015 10:38:50 PM JST
None # should raise NotImplementedError()
* Sat 06 Jun 2015 10:39:05 PM JST
return None # should raise NotImplementedError()
* Sat 06 Jun 2015 10:40:12 PM JST
return None # should raise NotImplementedError()
* Sat 06 Jun 2015 10:40:44 PM JST
        windows = self._display.core.QueryTree(
            self._display.core.QueryPointer(
                self._root).reply().child).reply().children
        for win in WindowManager.get_instance().list_windows():
            if win.get_id() in windows:
                self._set_under_window(win)
                break

* Sat 06 Jun 2015 10:41:20 PM JST
Window
* Sat 06 Jun 2015 10:42:23 PM JST
return None # should raise NotImplementedError()
* Sat 06 Jun 2015 10:42:51 PM JST
Cahnge
* Sat 06 Jun 2015 10:44:37 PM JST
class CursorObserver:
    """Class CursorObserver
    """
    # Attributes:
    
    # Operations
    def on_changed_under_window(self, under_window):
        """function on_changed_under_window
        
        under_window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sat 06 Jun 2015 10:45:36 PM JST
Window
* Sat 06 Jun 2015 10:46:37 PM JST
form 
* Sat 06 Jun 2015 10:46:51 PM JST

* Sat 06 Jun 2015 10:47:42 PM JST
from lab.xahk.desktop_window import DesktopWindow
from lab.xahk.wm.window_client import WindowClient
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
from lab.xahk.cursor import Cursor
from lab.xahk.cursor_observer import DebugCursorObserver

import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]
Cursor.get_instance().add_observer(DebugCursorObserver())

* Sat 06 Jun 2015 10:47:55 PM JST
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

* Sat 06 Jun 2015 10:47:59 PM JST
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask

from lab.xahk.desktop_window import DesktopWindow
from lab.xahk.wm.window_client import WindowClient
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_manager_observer import DebugDesktopManagerObserver
from lab.xahk.desktop_window_observer import DebugDesktopWindowObserver
from lab.xahk.cursor import Cursor
from lab.xahk.cursor_observer import DebugCursorObserver


wm=DesktopManager.get_instance()
wm.add_observer(DebugDesktopManagerObserver())
debug=DebugDesktopWindowObserver()
[w.add_observer(debug) for w in wm.list_windows()]
Cursor.get_instance().add_observer(DebugCursorObserver())

* Sat 06 Jun 2015 10:48:07 PM JST
EventLoop.get_instance().dispatch_event()

* Sun 07 Jun 2015 09:50:21 AM JST
cls
* Sun 07 Jun 2015 09:50:41 AM JST
EventLoop.get_instance().add_event_dispatcher(self)
* Sun 07 Jun 2015 09:51:24 AM JST
DesktopManager.get_instance().add_observer(self)
* Sun 07 Jun 2015 03:24:38 PM JST
class Event:
    """Class Event
    """
    # Attributes:
    __handled = None  # (bool) 
    
    # Operations
    def is_mouse_event(self):
        """function is_mouse_event
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_key_event(self):
        """function is_key_event
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_bounds_changed_event(self):
        """function is_bounds_changed_event
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_input_event(self):
        """function is_input_event
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_window(self):
        """function get_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_handled(self):
        """function is_handled
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_handled(self):
        """function set_handled
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 07 Jun 2015 03:25:08 PM JST
class BoundsChangedEvent(Event):
    """Class BoundsChangedEvent
    """
    # Attributes:
    
    # Operations
    def get_rectangle(self):
        """function get_rectangle
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_point(self):
        """function get_point
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_size(self):
        """function get_size
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_x(self):
        """function get_x
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_y(self):
        """function get_y
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_width(self):
        """function get_width
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_height(self):
        """function get_height
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 07 Jun 2015 03:25:24 PM JST
class InputEvent(Event):
    """Class InputEvent
    """
    # Attributes:
    
    # Operations
    def get_modifiers(self):
        """function get_modifiers
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_time(self):
        """function get_time
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_down(self):
        """function is_down
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_up(self):
        """function is_up
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 07 Jun 2015 03:25:40 PM JST
class KeyEvent(InputEvent):
    """Class KeyEvent
    """
    # Attributes:
    
    # Operations
    def get_key_code(self):
        """function get_key_code
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 07 Jun 2015 03:25:50 PM JST
class MouseEvent(InputEvent):
    """Class MouseEvent
    """
    # Attributes:
    
    # Operations
    def get_button_code(self):
        """function get_button_code
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_point(self):
        """function get_point
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_x(self):
        """function get_x
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_y(self):
        """function get_y
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 07 Jun 2015 03:27:38 PM JST
ConfigureNotifyEvent, 
* Sun 07 Jun 2015 03:27:39 PM JST
xproto 
* Sun 07 Jun 2015 03:27:46 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:27:52 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:27:56 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:28:02 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:28:18 PM JST
False
* Sun 07 Jun 2015 03:28:24 PM JST
event
* Sun 07 Jun 2015 03:28:52 PM JST
False
* Sun 07 Jun 2015 03:30:14 PM JST
False
* Sun 07 Jun 2015 03:30:30 PM JST
False
* Sun 07 Jun 2015 03:30:55 PM JST
ButtonReleaseEvent
* Sun 07 Jun 2015 03:32:28 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:32:33 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:32:34 PM JST
f
* Sun 07 Jun 2015 03:32:35 PM JST
sle.f
* Sun 07 Jun 2015 03:32:43 PM JST
return None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:33:07 PM JST
Rectangle
* Sun 07 Jun 2015 03:33:28 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:34:43 PM JST
super
* Sun 07 Jun 2015 03:37:45 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:37:58 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:37:59 PM JST
f_
* Sun 07 Jun 2015 03:38:00 PM JST
sle.f_
* Sun 07 Jun 2015 03:38:11 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:38:32 PM JST
return self.get_rectangle().get_x()
* Sun 07 Jun 2015 03:39:39 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:40:15 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:40:16 PM JST
self.
* Sun 07 Jun 2015 03:41:01 PM JST
    def __init__(self, event, window):
        r"""

        @Arguments:
        - `event`:
        - `window`:
        """
        Event.__init__(self, event, window)
        self._cache_rect = None

* Sun 07 Jun 2015 03:41:30 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:41:45 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:42:56 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:43:12 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:43:37 PM JST
    def __init__(self, event, window):
        r"""

        @Arguments:
        - `event`:
        - `window`:
        """
        Event.__init__(self, event, window)
        self._cache_rect = None

* Sun 07 Jun 2015 03:44:01 PM JST
Event
* Sun 07 Jun 2015 03:45:26 PM JST
self._cache_point
* Sun 07 Jun 2015 03:45:32 PM JST
None # should raise NotImplementedError()
* Sun 07 Jun 2015 03:45:42 PM JST
self._cache_point.get_x()
* Sun 07 Jun 2015 03:48:53 PM JST
_cache_point
* Sun 07 Jun 2015 03:48:58 PM JST
_cache_point
* Sun 07 Jun 2015 04:58:30 PM JST

* Sun 07 Jun 2015 04:58:41 PM JST
T_SUPER_KEY_ACCE
* Sun 07 Jun 2015 04:58:45 PM JST

* Tue 09 Jun 2015 12:54:12 AM JST
True, 482, 0|mod, 10, xcb.xproto.GrabMode.Async, xcb.xproto.GrabMode.Async
* Tue 09 Jun 2015 12:55:15 AM JST
core.
* Tue 09 Jun 2015 12:55:16 AM JST
c.core.
* Tue 09 Jun 2015 01:12:25 AM JST
start - 
* Tue 09 Jun 2015 01:13:32 AM JST
G
* Tue 09 Jun 2015 01:13:32 AM JST
core.G
* Tue 09 Jun 2015 01:13:33 AM JST
c.core.G
* Tue 09 Jun 2015 01:13:44 AM JST
True, 482, 0, 38, xcb.xproto.GrabMode.Async, xcb.xproto.GrabMode.Async
* Tue 09 Jun 2015 01:14:31 AM JST
start = time.time()
* Tue 09 Jun 2015 01:14:38 AM JST
print(time.time() - start)
* Tue 09 Jun 2015 01:15:20 AM JST
grab1()
* Tue 09 Jun 2015 01:16:20 AM JST
0.747024059296
* Tue 09 Jun 2015 01:16:37 AM JST
first
* Tue 09 Jun 2015 01:16:50 AM JST
0.846740007401
* Tue 09 Jun 2015 01:17:08 AM JST
0.638881921768
* Tue 09 Jun 2015 01:17:16 AM JST
0.63419508934
* Tue 09 Jun 2015 01:32:53 AM JST
import xcb,xcb.xproto;c=xcb.connect()
from xcb.xproto import CW, EventMask


* Tue 09 Jun 2015 01:34:03 AM JST
return self.display.core.UngrabKey(key, self.id, modifiers)
* Tue 09 Jun 2015 01:35:02 AM JST
UngrabKeyChecked
* Tue 09 Jun 2015 01:37:09 AM JST
form 
* Tue 09 Jun 2015 01:37:16 AM JST
dot
* Tue 09 Jun 2015 01:37:16 AM JST
form dot
* Tue 09 Jun 2015 01:39:58 AM JST
    # first try: 0.846740007401
    # secound try: 0.747024059296

* Tue 09 Jun 2015 01:40:05 AM JST
    # first try: 0.638881921768
    # secound try: 0.63419508934

* Tue 09 Jun 2015 01:40:31 AM JST
            
* Tue 09 Jun 2015 01:40:45 AM JST
import xcb,xcb.xproto
c=xcb.connect()


# first try: 0.846740007401
# secound try: 0.747024059296
def grab1():
    start = time.time()
    for _ in xrange(0, 9999):
        c.core.GrabKey(True, 482, 0, 38, xcb.xproto.GrabMode.Async, xcb.xproto.GrabMode.Async)
    c.flush()
    print(time.time() - start)


# first try: 0.638881921768
# secound try: 0.63419508934
def grab2():
    r"""SUMMARY

    grab2()

    @Return:

    @Error:
    """
    cookies = []
    append = cookies.append
    start = time.time()
    for _ in xrange(0, 9999):
        append(c.core.GrabKeyChecked(True, 482, 0, 38, xcb.xproto.GrabMode.Async, xcb.xproto.GrabMode.Async))
    for cookie in cookies:
        cookie.check()
    print(time.time() - start)

* Tue 09 Jun 2015 01:41:30 AM JST
grab
* Tue 09 Jun 2015 01:43:07 AM JST
owner_events, key, modifiers, pointer_mode, keyboard_mode
* Tue 09 Jun 2015 01:54:11 AM JST
owner_events
* Tue 09 Jun 2015 01:54:17 AM JST
owner_events, 
* Tue 09 Jun 2015 01:54:50 AM JST
keyboard_mode
* Tue 09 Jun 2015 01:55:19 AM JST
owner_events, 
* Tue 09 Jun 2015 01:55:22 AM JST

* Tue 09 Jun 2015 01:55:22 AM JST

* Tue 09 Jun 2015 01:55:22 AM JST
        - `owner_events`:

* Tue 09 Jun 2015 01:55:36 AM JST
targets
* Tue 09 Jun 2015 01:55:50 AM JST
targets
* Tue 09 Jun 2015 01:55:56 AM JST
target
* Tue 09 Jun 2015 01:56:04 AM JST
get_owner_events()
* Tue 09 Jun 2015 01:56:04 AM JST
target.get_owner_events()
* Tue 09 Jun 2015 01:56:08 AM JST
target
* Tue 09 Jun 2015 01:56:15 AM JST
target
* Tue 09 Jun 2015 01:56:24 AM JST
GrabMode.Async
* Tue 09 Jun 2015 01:56:34 AM JST
                
* Tue 09 Jun 2015 01:58:03 AM JST
print(
* Tue 09 Jun 2015 01:58:05 AM JST
print(
* Tue 09 Jun 2015 01:58:10 AM JST
print(
* Tue 09 Jun 2015 02:44:28 PM JST
grab_key
* Tue 09 Jun 2015 02:48:43 PM JST
handle_event
* Wed 10 Jun 2015 02:36:33 PM JST
window
* Wed 10 Jun 2015 02:36:47 PM JST
window
* Wed 10 Jun 2015 02:38:29 PM JST
Window
* Wed 10 Jun 2015 02:38:37 PM JST
DesktopManager.get_instance()
* Wed 10 Jun 2015 02:40:25 PM JST
window
* Wed 10 Jun 2015 02:41:04 PM JST
window
* Wed 10 Jun 2015 02:41:07 PM JST
window
* Wed 10 Jun 2015 02:46:47 PM JST
class InputListener:
    """Class InputListener
    """
    # Attributes:
    __handlers = None  # () 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_handler(self, handler):
        """function add_handler
        
        handler: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_handler(self, handler):
        """function remove_handler
        
        handler: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def has_handler(self, handler):
        """function has_handler
        
        handler: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 10 Jun 2015 02:47:40 PM JST
None # should raise NotImplementedError()
* Wed 10 Jun 2015 02:47:53 PM JST
xc
* Wed 10 Jun 2015 02:47:53 PM JST
form xc
* Wed 10 Jun 2015 02:48:16 PM JST
(KeyPressEvent, KeyReleaseEvent,
                        ButtonPressEvent, ButtonReleaseEvent)
* Wed 10 Jun 2015 02:50:19 PM JST
DispatchEvent
* Wed 10 Jun 2015 02:50:35 PM JST
event_dispatcher
* Wed 10 Jun 2015 02:50:42 PM JST
DispatchEvent
* Wed 10 Jun 2015 02:50:47 PM JST
EventDispatcher
* Wed 10 Jun 2015 02:51:02 PM JST

* Wed 10 Jun 2015 02:51:04 PM JST
event_dispatcher
* Wed 10 Jun 2015 02:52:49 PM JST
EventDispatcher
* Wed 10 Jun 2015 02:53:23 PM JST
Button
* Wed 10 Jun 2015 02:55:29 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 02:55:58 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 02:56:06 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 02:56:15 PM JST
None # should raise NotImplementedError()
* Wed 10 Jun 2015 02:58:35 PM JST
class InputHandler:
    """Abstract class InputHandler
    """
    # Attributes:
    
    # Operations
    def can_accept_event(self, event):
        """function can_accept_event
        
        event: 
        
        returns 
        """
        raise NotImplementedError()
    
    def on_event(self, event):
        """function on_event
        
        event: 
        
        returns 
        """
        raise NotImplementedError()
    


* Wed 10 Jun 2015 02:59:21 PM JST
@abstractmethod
* Wed 10 Jun 2015 03:00:27 PM JST
:
* Wed 10 Jun 2015 03:00:30 PM JST
self._handlers
* Wed 10 Jun 2015 03:01:18 PM JST

* Wed 10 Jun 2015 03:01:19 PM JST

* Wed 10 Jun 2015 03:01:19 PM JST
        for handler in [h for h in self._handlers if h.can_accept_event(event)]:

* Wed 10 Jun 2015 03:01:44 PM JST
[h for h in self._handlers if h.can_accept_event(event)]
* Wed 10 Jun 2015 03:01:52 PM JST
                
* Wed 10 Jun 2015 03:03:09 PM JST
class KeyBindListener(Observable, InputHandler):
    """Class KeyBindListener
    """
    # Attributes:
    binding = None  # (<(window,code,modifiers), cmd>) 
    __is_listening = None  # (bool) 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_accept_event(self, event):
        """function can_accept_event
        
        event: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def on_event(self, event):
        """function on_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_listening(self):
        """function start_listening
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def stop_listening(self):
        """function stop_listening
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_listening(self):
        """function is_listening
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def bind(self, window, code, modifiers, cmd):
        """function bind
        
        window: 
        code: 
        modifiers: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unbind(self, window, code, modifiers):
        """function unbind
        
        window: 
        code: 
        modifiers: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_binding(self, window, code, modifiers):
        """function is_binding
        
        window: 
        code: 
        modifiers: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_binding(self):
        """function list_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_cmds(self):
        """function list_cmds
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iteritems(self):
        """function iteritems
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def items(self):
        """function items
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear(self):
        """function clear
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 10 Jun 2015 03:03:19 PM JST
o
* Wed 10 Jun 2015 03:03:19 PM JST
form o
* Wed 10 Jun 2015 03:03:30 PM JST
l
* Wed 10 Jun 2015 03:03:30 PM JST
form l
* Wed 10 Jun 2015 03:04:42 PM JST
    @classmethod
    def get_instance(cls):
        """function get_instance

        returns
        """
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance

* Wed 10 Jun 2015 03:05:43 PM JST
None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:06:28 PM JST
defini
* Wed 10 Jun 2015 03:06:51 PM JST
f_
* Wed 10 Jun 2015 03:06:52 PM JST
sle.f_
* Wed 10 Jun 2015 03:07:34 PM JST
<(window,code,modifiers), cmd>
* Wed 10 Jun 2015 03:08:01 PM JST

* Wed 10 Jun 2015 03:08:07 PM JST
input_handler
* Wed 10 Jun 2015 03:08:10 PM JST
InputHandler
* Wed 10 Jun 2015 03:08:21 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:08:22 PM JST
f
* Wed 10 Jun 2015 03:08:22 PM JST
sle.f
* Wed 10 Jun 2015 03:08:25 PM JST
self.
* Wed 10 Jun 2015 03:09:22 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:09:25 PM JST
InputListener.get_instance().add_handler(self)
* Wed 10 Jun 2015 03:09:28 PM JST
add
* Wed 10 Jun 2015 03:09:33 PM JST
self._is_listening = True
* Wed 10 Jun 2015 03:09:35 PM JST
True
* Wed 10 Jun 2015 03:09:44 PM JST
self._is_listening
* Wed 10 Jun 2015 03:09:55 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:10:22 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:10:23 PM JST
self.
* Wed 10 Jun 2015 03:10:37 PM JST
(window, code, modifiers)
* Wed 10 Jun 2015 03:10:57 PM JST
None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:11:47 PM JST
None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:11:48 PM JST
f
* Wed 10 Jun 2015 03:11:49 PM JST
lse.f
* Wed 10 Jun 2015 03:11:59 PM JST
None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:12:08 PM JST
None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:12:20 PM JST
None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:12:21 PM JST
lsef.
* Wed 10 Jun 2015 03:12:30 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:12:31 PM JST
slfe.
* Wed 10 Jun 2015 03:14:20 PM JST
        for observer in self._observers:
            observer.on_binded(window, code, modifiers, cmd)

* Wed 10 Jun 2015 03:16:34 PM JST
class KeyBindListenerObserver:
    """Class KeyBindListenerObserver
    """
    # Attributes:
    
    # Operations
    def on_binded(self, window, code, modifiers, cms):
        """function on_binded
        
        window: 
        code: 
        modifiers: 
        cms: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_unbinded(self, window, code, modifiers):
        """function on_unbinded
        
        window: 
        code: 
        modifiers: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 10 Jun 2015 03:18:12 PM JST
class BindCandidate(Observable):
    """Class BindCandidate
    """
    # Attributes:
    spec = None  # (WindowSpec) 
    registry = None  # () 
    
    # Operations
    def get_window_spec(self):
        """function get_window_spec
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def register_bind(self):
        """function register_bind
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unregister_bind(self):
        """function unregister_bind
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_binder(self):
        """function list_binder
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 10 Jun 2015 03:18:20 PM JST
o
* Wed 10 Jun 2015 03:18:20 PM JST
form o
* Wed 10 Jun 2015 03:18:22 PM JST
o
* Wed 10 Jun 2015 03:18:22 PM JST
form o
* Wed 10 Jun 2015 03:22:18 PM JST
None  # () 
* Wed 10 Jun 2015 03:22:30 PM JST
None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:22:34 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:23:10 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:23:38 PM JST
None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:23:52 PM JST
keys()
* Wed 10 Jun 2015 03:26:19 PM JST
class BindCandidateObserver:
    """Class BindCandidateObserver
    """
    # Attributes:
    
    # Operations
    def on_changed_candidate(self):
        """function on_changed_candidate
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 10 Jun 2015 03:27:44 PM JST
class KeyBindManager(BindCandidateObserver):
    """Class KeyBindManager
    """
    # Attributes:
    __listener = None  # () 
    __candidates = None  # () 
    __is_managing = None  # () 
    
    # Operations
    def entry_candidate(self, candidate):
        """function entry_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def withdraw_candidate(self, candidate):
        """function withdraw_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def has_candidate(self, candidate):
        """function has_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_created_window(self, window):
        """function on_created_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_destroyed_window(self, window_id):
        """function on_destroyed_window
        
        window_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_management(self):
        """function start_management
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def stop_management(self):
        """function stop_management
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_managing(self):
        """function is_managing
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def update_binding(self):
        """function update_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 10 Jun 2015 03:29:44 PM JST
la
* Wed 10 Jun 2015 03:29:44 PM JST
form la
* Wed 10 Jun 2015 03:30:03 PM JST
Inpu
* Wed 10 Jun 2015 03:30:05 PM JST
InputListener
* Wed 10 Jun 2015 03:31:04 PM JST

* Wed 10 Jun 2015 03:31:04 PM JST

* Wed 10 Jun 2015 03:31:04 PM JST
    __candidates = None  # () 

* Wed 10 Jun 2015 03:31:10 PM JST
None  # () 
* Wed 10 Jun 2015 03:31:32 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:31:51 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:32:24 PM JST
candidate
* Wed 10 Jun 2015 03:32:28 PM JST
None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:33:35 PM JST
self
* Wed 10 Jun 2015 03:33:50 PM JST
Window
* Wed 10 Jun 2015 03:34:04 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:34:07 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:34:09 PM JST
DesktopManager.get_instance().add_observer(self)
* Wed 10 Jun 2015 03:34:23 PM JST
None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:36:44 PM JST
self.update_binding()
* Wed 10 Jun 2015 03:40:59 PM JST
input_listener
* Wed 10 Jun 2015 03:41:08 PM JST
keybind_lis
* Wed 10 Jun 2015 03:41:11 PM JST
InputListener
* Wed 10 Jun 2015 03:41:17 PM JST
KeyBindListener
* Wed 10 Jun 2015 03:42:31 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 03:56:04 PM JST
self
* Wed 10 Jun 2015 04:04:25 PM JST
target
* Wed 10 Jun 2015 04:04:38 PM JST
get_
* Wed 10 Jun 2015 04:04:39 PM JST
accelerator.get_
* Wed 10 Jun 2015 04:06:17 PM JST
targets
* Wed 10 Jun 2015 04:06:23 PM JST
targets
* Wed 10 Jun 2015 04:51:47 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 04:52:36 PM JST
not 
* Wed 10 Jun 2015 04:53:08 PM JST
event.
* Wed 10 Jun 2015 05:00:36 PM JST

* Wed 10 Jun 2015 05:00:37 PM JST
windowspec
* Wed 10 Jun 2015 05:00:45 PM JST
input_
* Wed 10 Jun 2015 05:00:47 PM JST
WindowIDSpec
* Wed 10 Jun 2015 05:00:59 PM JST
listener/
* Wed 10 Jun 2015 05:01:00 PM JST
input_listener/
* Wed 10 Jun 2015 05:01:51 PM JST
accelerator.get_modifiers()
* Wed 10 Jun 2015 05:01:51 PM JST
                                accelerator.get_modifiers()
* Wed 10 Jun 2015 05:02:46 PM JST
return self._registry.items()
* Wed 10 Jun 2015 05:02:50 PM JST
items
* Wed 10 Jun 2015 05:03:22 PM JST
acc
* Wed 10 Jun 2015 05:03:24 PM JST
for  in xrange(0, 1): 
* Wed 10 Jun 2015 05:03:54 PM JST
Window
* Wed 10 Jun 2015 05:04:16 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 05:06:39 PM JST

* Wed 10 Jun 2015 05:06:39 PM JST

* Wed 10 Jun 2015 05:06:39 PM JST
        for candidate in cans:

* Wed 10 Jun 2015 05:06:59 PM JST

* Wed 10 Jun 2015 05:06:59 PM JST

* Wed 10 Jun 2015 05:07:00 PM JST
        window.grab_keys(candidate.list_accelerators())

* Wed 10 Jun 2015 05:16:28 PM JST
UngrabKeyboard
* Wed 10 Jun 2015 05:55:26 PM JST
return None # should raise NotImplementedError()
* Wed 10 Jun 2015 05:56:53 PM JST
        if self.is_managing():
            self.update_binding()

* Wed 10 Jun 2015 05:57:25 PM JST

* Wed 10 Jun 2015 05:57:25 PM JST

* Wed 10 Jun 2015 05:57:25 PM JST
            self.update_binding()

* Wed 10 Jun 2015 10:34:08 PM JST
        cookies, append = ListDotAvoider().append
        for accelerator in accelerators:
            append(self.window.grab_key_checked(
                False, accelerator.get_modifiers(),
                accelerator.get_key(), GrabMode.Async, GrabMode.Async))
        for cookie in cookies:
            cookie.check()

* Wed 10 Jun 2015 10:34:32 PM JST
False, 
* Wed 10 Jun 2015 10:34:40 PM JST
accelerator.get_modifiers(),
* Wed 10 Jun 2015 10:34:43 PM JST
                
* Wed 10 Jun 2015 10:35:15 PM JST
slerf.
* Wed 10 Jun 2015 10:35:17 PM JST
f
* Wed 10 Jun 2015 10:35:18 PM JST
sle.f
* Thu 11 Jun 2015 01:59:52 PM JST
DesktopManagerObserver
* Thu 11 Jun 2015 02:01:53 PM JST
DesktopMa
* Thu 11 Jun 2015 02:07:34 PM JST
KeyBindManager.__managing = self
* Thu 11 Jun 2015 02:07:36 PM JST
self
* Thu 11 Jun 2015 02:32:12 PM JST
[x for x in self.list_binding() if x[0] == window]
* Thu 11 Jun 2015 03:07:05 PM JST
event
* Thu 11 Jun 2015 03:07:07 PM JST
event
* Thu 11 Jun 2015 03:07:38 PM JST

* Thu 11 Jun 2015 03:07:38 PM JST

* Thu 11 Jun 2015 03:07:38 PM JST
        self._cache_window = None

* Thu 11 Jun 2015 03:08:07 PM JST
window
* Thu 11 Jun 2015 03:08:16 PM JST
self._event.event
* Thu 11 Jun 2015 04:41:48 PM JST
input_listener
* Thu 11 Jun 2015 04:42:17 PM JST
listener
* Thu 11 Jun 2015 04:42:18 PM JST
a
* Thu 11 Jun 2015 04:42:18 PM JST
input_a
* Thu 11 Jun 2015 04:42:30 PM JST

* Thu 11 Jun 2015 04:42:31 PM JST
accelerator
* Thu 11 Jun 2015 04:42:38 PM JST
Accelerator
* Thu 11 Jun 2015 04:42:41 PM JST
InputC
* Thu 11 Jun 2015 04:44:22 PM JST
DebugInputCommand()
* Thu 11 Jun 2015 04:44:39 PM JST
Accelerator(38)
* Thu 11 Jun 2015 04:45:18 PM JST

* Thu 11 Jun 2015 04:45:20 PM JST
candidate
* Thu 11 Jun 2015 04:45:20 PM JST
bind_candidate
* Thu 11 Jun 2015 04:45:24 PM JST
bind_
* Thu 11 Jun 2015 04:45:28 PM JST
BindCandidate
* Thu 11 Jun 2015 04:46:44 PM JST

* Thu 11 Jun 2015 04:46:44 PM JST
KeyBindManager
* Thu 11 Jun 2015 04:46:48 PM JST
manager
* Thu 11 Jun 2015 04:46:49 PM JST
keybind_manager
* Thu 11 Jun 2015 04:46:50 PM JST
listener.keybind_manager
* Thu 11 Jun 2015 04:46:50 PM JST
input_listener.keybind_manager
* Thu 11 Jun 2015 04:47:48 PM JST
from lab.xahk.window_spec import WindowWmClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

can=BindCandidate(WindowWmClassSpec('emacs'))
can.register_bind(Accelerator(38), DebugInputCommand())

man=KeyBindManager()
man.entry_candidate(can)
man.start_management()

* Thu 11 Jun 2015 04:48:05 PM JST
from lab.xahk.windowspec import WindowWmClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

* Thu 11 Jun 2015 04:48:41 PM JST
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

* Thu 11 Jun 2015 04:48:45 PM JST
can=BindCandidate(WindowWmClassSpec('emacs'))
can.register_bind(Accelerator(38), DebugInputCommand())

* Thu 11 Jun 2015 04:48:56 PM JST
can=BindCandidate(WindowWMClassSpec('emacs'))
can.register_bind(Accelerator(38), DebugInputCommand())

* Thu 11 Jun 2015 04:49:01 PM JST
man=KeyBindManager()
man.entry_candidate(can)
man.start_management()

* Thu 11 Jun 2015 04:49:30 PM JST
__managing
* Thu 11 Jun 2015 04:49:36 PM JST
_KeyBindManager__managing
* Thu 11 Jun 2015 04:50:29 PM JST
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

can=BindCandidate(WindowWMClassSpec('emacs'))
can.register_bind(Accelerator(38), DebugInputCommand())

* Thu 11 Jun 2015 04:51:18 PM JST
man=KeyBindManager()
man.entry_candidate(can)
man.start_management()

* Thu 11 Jun 2015 04:52:18 PM JST
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

can=BindCandidate(WindowWMClassSpec('emacs'))
can.register_bind(Accelerator(38), DebugInputCommand())

man=KeyBindManager()
man.entry_candidate(can)
man.start_management()

* Thu 11 Jun 2015 04:52:25 PM JST
EventLoop.get_instance().dispatch_event()
* Thu 11 Jun 2015 04:53:09 PM JST
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

can=BindCandidate(WindowWMClassSpec('emacs'))
can.register_bind(Accelerator(38), DebugInputCommand())

man=KeyBindManager()
man.entry_candidate(can)
man.start_management()

* Thu 11 Jun 2015 04:53:16 PM JST
EventLoop.get_instance().dispatch_event()
* Thu 11 Jun 2015 04:54:20 PM JST
can_dispatch_event
* Thu 11 Jun 2015 04:54:55 PM JST
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

can=BindCandidate(WindowWMClassSpec('emacs'))
can.register_bind(Accelerator(38), DebugInputCommand())

man=KeyBindManager()
man.entry_candidate(can)
man.start_management()

* Thu 11 Jun 2015 04:55:09 PM JST
a
* Thu 11 Jun 2015 04:55:26 PM JST
get_instance()
* Thu 11 Jun 2015 04:55:33 PM JST
_dispatchers
* Thu 11 Jun 2015 04:55:47 PM JST
a
* Thu 11 Jun 2015 04:57:12 PM JST
start_listening
* Thu 11 Jun 2015 04:58:03 PM JST
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

can=BindCandidate(WindowWMClassSpec('emacs'))
can.register_bind(Accelerator(24), DebugInputCommand())

man=KeyBindManager()
man.entry_candidate(can)
man.start_management()

* Thu 11 Jun 2015 04:58:09 PM JST
EventLoop.get_instance().dispatch_event()
* Thu 11 Jun 2015 04:58:34 PM JST

* Thu 11 Jun 2015 04:58:34 PM JST

* Thu 11 Jun 2015 04:58:34 PM JST
        print(event)

* Thu 11 Jun 2015 05:01:49 PM JST
    def on_binded(self, window, accelerator, cms):
        """function on_binded

        window:
        code:
        modifiers:
        cms:

        returns
        """
        return None # should raise NotImplementedError()

    def on_unbinded(self, window, accelerator):
        """function on_unbinded

        window:
        code:
        modifiers:

        returns
        """
        return None # should raise NotImplementedError()

* Thu 11 Jun 2015 05:02:01 PM JST
return None # should raise NotImplementedError()
* Thu 11 Jun 2015 05:02:08 PM JST
Window
* Thu 11 Jun 2015 05:02:38 PM JST
print('Binded {} {} {}'.format(window, accelerator, cmd))
* Thu 11 Jun 2015 05:03:10 PM JST
form 
* Thu 11 Jun 2015 05:03:12 PM JST
lab.xahk.eventloop import EventLoop
* Thu 11 Jun 2015 05:03:14 PM JST
from lab.xahk.input_listener.keybind_manager import KeyBindManager
* Thu 11 Jun 2015 05:03:17 PM JST
from 
* Thu 11 Jun 2015 05:03:20 PM JST
manager
* Thu 11 Jun 2015 05:03:27 PM JST
KeyBindManager
* Thu 11 Jun 2015 05:03:45 PM JST

* Thu 11 Jun 2015 05:03:45 PM JST

* Thu 11 Jun 2015 05:03:45 PM JST
from lab.xahk.input_listener.input_command import DebugInputCommand

* Thu 11 Jun 2015 05:04:19 PM JST
key
* Thu 11 Jun 2015 05:04:21 PM JST
key_bind_listener
* Thu 11 Jun 2015 05:04:51 PM JST
DebugKeyBindListenerObserver
* Thu 11 Jun 2015 05:05:02 PM JST
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

# debug
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.key_bind_listener import KeyBindListener
from lab.xahk.input_listener.keybind_key_bind_listener_observer import DebugKeyBindListenerObserver

KeyBindListener.get_instance().add_observer(DebugKeyBindListenerObserver())


can=BindCandidate(WindowWMClassSpec('emacs'))
can.register_bind(Accelerator(24), DebugInputCommand())

man=KeyBindManager()
man.entry_candidate(can)
man.start_management()

* Thu 11 Jun 2015 05:05:16 PM JST
DebugKeyBindListenerObserver
* Thu 11 Jun 2015 05:05:30 PM JST
key
* Thu 11 Jun 2015 05:05:31 PM JST
key_bind_listener_observer
* Thu 11 Jun 2015 05:05:44 PM JST
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

# debug
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.key_bind_listener import KeyBindListener
from lab.xahk.input_listener.key_bind_listener_observer import DebugKeyBindListenerObserver

KeyBindListener.get_instance().add_observer(DebugKeyBindListenerObserver())


can=BindCandidate(WindowWMClassSpec('emacs'))
can.register_bind(Accelerator(24), DebugInputCommand())

man=KeyBindManager()
man.entry_candidate(can)
man.start_management()

* Thu 11 Jun 2015 05:06:44 PM JST
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

# debug
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.key_bind_listener import KeyBindListener
from lab.xahk.input_listener.key_bind_listener_observer import DebugKeyBindListenerObserver

KeyBindListener.get_instance().add_observer(DebugKeyBindListenerObserver())


can=BindCandidate(WindowWMClassSpec('emacs'))
can.register_bind(Accelerator(24), DebugInputCommand())

man=KeyBindManager()
man.entry_candidate(can)
man.start_management()

* Thu 11 Jun 2015 05:28:27 PM JST
EventLoop.get_instance().dispatch_event()
* Thu 11 Jun 2015 05:38:47 PM JST
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

# debug
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.key_bind_listener import KeyBindListener
from lab.xahk.input_listener.key_bind_listener_observer import DebugKeyBindListenerObserver

KeyBindListener.get_instance().add_observer(DebugKeyBindListenerObserver())


can=BindCandidate(WindowWMClassSpec('emacs'))
can.register_bind(Accelerator(24), DebugInputCommand())

man=KeyBindManager()
man.entry_candidate(can)
man.start_management()

* Thu 11 Jun 2015 05:38:52 PM JST
EventLoop.get_instance().dispatch_event()
* Thu 11 Jun 2015 05:41:28 PM JST
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

# debug
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.key_bind_listener import KeyBindListener
from lab.xahk.input_listener.key_bind_listener_observer import DebugKeyBindListenerObserver

KeyBindListener.get_instance().add_observer(DebugKeyBindListenerObserver())


can=BindCandidate(WindowWMClassSpec('emacs'))
can.register_bind(Accelerator(24), DebugInputCommand())

man=KeyBindManager()
man.entry_candidate(can)
man.start_management()

* Thu 11 Jun 2015 05:41:32 PM JST
EventLoop.get_instance().dispatch_event()
* Thu 11 Jun 2015 05:49:31 PM JST
e2wm
* Thu 11 Jun 2015 05:49:32 PM JST
e2wm:dp-pycode-navi-relaunch-sub-ipython
* Thu 11 Jun 2015 05:49:59 PM JST
           
* Thu 11 Jun 2015 05:54:03 PM JST
Buffer "*IPython*" has a running process; kill it?
* Thu 11 Jun 2015 05:57:51 PM JST
set-process-query-on-exit-flag
* Thu 11 Jun 2015 06:07:44 PM JST
e2wm:dp-pycode-navi-sub-ipython
* Thu 11 Jun 2015 06:17:02 PM JST
ipython
* Thu 11 Jun 2015 06:17:13 PM JST
(process-name (car (process-list)))
* Thu 11 Jun 2015 06:19:40 PM JST
      
* Thu 11 Jun 2015 06:19:41 PM JST
        
* Thu 11 Jun 2015 06:19:42 PM JST
          
* Thu 11 Jun 2015 06:27:18 PM JST
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

# debug
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.key_bind_listener import KeyBindListener
from lab.xahk.input_listener.key_bind_listener_observer import DebugKeyBindListenerObserver

KeyBindListener.get_instance().add_observer(DebugKeyBindListenerObserver())


can=BindCandidate(WindowWMClassSpec('emacs'))
can.register_bind(Accelerator(24), DebugInputCommand())

man=KeyBindManager()
man.entry_candidate(can)
man.start_management()

* Thu 11 Jun 2015 06:27:23 PM JST
EventLoop.get_instance().dispatch_event()

* Thu 11 Jun 2015 06:35:38 PM JST
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

# debug
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.key_bind_listener import KeyBindListener
from lab.xahk.input_listener.key_bind_listener_observer import DebugKeyBindListenerObserver

KeyBindListener.get_instance().add_observer(DebugKeyBindListenerObserver())


can=BindCandidate(WindowWMClassSpec('emacs'))
can.register_bind(Accelerator(24), DebugInputCommand())

man=KeyBindManager()
man.entry_candidate(can)
man.start_management()


EventLoop.get_instance().dispatch_event()

* Thu 11 Jun 2015 06:37:34 PM JST
class Debug2InputCommand(DebugInputCommand):
    r"""Debug2InputCommand
    
    Debug2InputCommand is a DebugInputCommand.
    Responsibility: 
    """
    def __init__(self, candidate):
        r"""
        
        @Arguments:
        - `candidate`:
        """
        self._candidate = candidate

* Thu 11 Jun 2015 06:38:32 PM JST
unregister_bind
* Thu 11 Jun 2015 06:40:17 PM JST
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.accelerator import Accelerator
from lab.xahk.input_listener.bind_candidate import BindCandidate
from lab.xahk.input_listener.keybind_manager import KeyBindManager
from lab.xahk.eventloop import EventLoop

# debug
from lab.xahk.input_listener.input_command import DebugInputCommand
from lab.xahk.input_listener.key_bind_listener import KeyBindListener
from lab.xahk.input_listener.key_bind_listener_observer import DebugKeyBindListenerObserver

KeyBindListener.get_instance().add_observer(DebugKeyBindListenerObserver())


class Debug2InputCommand(DebugInputCommand):
    r"""Debug2InputCommand

    Debug2InputCommand is a DebugInputCommand.
    Responsibility:
    """
    def __init__(self, candidate):
        r"""

        @Arguments:
        - `candidate`:
        """
        self._candidate = candidate

    def on_up(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        self._candidate.register_bind(Accelerator(38), DebugInputCommand())


can=BindCandidate(WindowWMClassSpec('emacs'))
can.register_bind(Accelerator(24), Debug2InputCommand(can))

man=KeyBindManager()
man.entry_candidate(can)
man.start_management()

* Thu 11 Jun 2015 06:41:05 PM JST
EventLoop.get_instance().dispatch_event()
* Thu 11 Jun 2015 06:41:42 PM JST
_notify_changed_candidate
* Thu 11 Jun 2015 06:41:51 PM JST
self._notify_changed_candidate()
* Thu 11 Jun 2015 06:42:15 PM JST
EventLoop.get_instance().dispatch_event()

* Thu 11 Jun 2015 06:45:38 PM JST
EventLoop.get_instance().dispatch_event()

* Fri 12 Jun 2015 12:51:08 AM JST
__slots__ = ('_event', '_cache_window', '_handled')
* Fri 12 Jun 2015 01:50:57 AM JST

* Fri 12 Jun 2015 01:50:57 AM JST

* Fri 12 Jun 2015 01:50:57 AM JST
    __slots__ = ('_event', '_cache_window', '_handled', 'window', '_cache_rect')

* Fri 12 Jun 2015 01:51:01 AM JST

* Fri 12 Jun 2015 01:51:01 AM JST

* Fri 12 Jun 2015 01:51:02 AM JST
    __slots__ = ('_event', '_cache_window', '_handled', '_cache_point')

* Fri 12 Jun 2015 01:51:06 AM JST

* Fri 12 Jun 2015 01:51:06 AM JST

* Fri 12 Jun 2015 01:51:06 AM JST
    __slots__ = ('_event', '_cache_window', '_handled')

* Fri 12 Jun 2015 02:06:27 AM JST

In [4]: timeit Slot(1)
1000000 loops, best of 3: 1.21 µs per loop

In [5]: timeit Slop(1)
1000000 loops, best of 3: 1.19 µs per loop

In [6]: 
* Fri 12 Jun 2015 02:10:20 AM JST

* Fri 12 Jun 2015 02:10:30 AM JST
 as GM
* Fri 12 Jun 2015 02:10:31 AM JST
GrabMode as GM
* Fri 12 Jun 2015 02:10:49 AM JST
from xcb.xproto import GrabMode as GM
from xcb.xproto import EventMask as EM

* Fri 12 Jun 2015 02:11:05 AM JST
GrabButton
* Fri 12 Jun 2015 02:11:06 AM JST
core
* Fri 12 Jun 2015 02:11:06 AM JST
c.core
* Fri 12 Jun 2015 02:11:44 AM JST
ButtonIndex
* Fri 12 Jun 2015 02:12:43 AM JST
mask=EM.ButtonPress|EM.ButtonRelease
* Fri 12 Jun 2015 02:13:25 AM JST
c.core.GrabButtonChecked(True, 482, mask, GM.Sync, GM.Async,)
* Fri 12 Jun 2015 02:13:56 AM JST
c.core.GrabButtonChecked(True, 482, mask, GM.Sync, GM.Async, 0, 0, 1, 0)
* Fri 12 Jun 2015 02:15:16 AM JST
while 1:
   ....:     event = c.wait_for_event()
   ....:     print(event)
   ....: 
* Fri 12 Jun 2015 02:15:31 AM JST
1:
....:
* Fri 12 Jun 2015 02:15:39 AM JST
....:
* Fri 12 Jun 2015 02:16:08 AM JST
import xcb,xcb.xproto as xp;c=xcb.connect()
from xcb.xproto import GrabMode as GM
from xcb.xproto import EventMask as EM

* Fri 12 Jun 2015 02:16:15 AM JST
mask=EM.ButtonPress|EM.ButtonRelease
c.core.GrabButtonChecked(True, 482, mask, GM.Async, GM.Async, 0, 0, 1, 0)

* Fri 12 Jun 2015 02:16:33 AM JST
while 1:
     event = c.wait_for_event()
     print(event)

* Fri 12 Jun 2015 02:17:13 AM JST
while 1:
     event = c.wait_for_event()
     print(event)
     print(event.event)
     print(event.child)

* Fri 12 Jun 2015 02:18:32 AM JST
import xcb,xcb.xproto as xp;c=xcb.connect()
from xcb.xproto import GrabMode as GM
from xcb.xproto import EventMask as EM

mask=EM.ButtonPress|EM.ButtonRelease
c.core.GrabButtonChecked(True, 482, mask, GM.Async, GM.Sync, 0, 0, 1, 0).check()

* Fri 12 Jun 2015 02:18:41 AM JST
while 1:
     event = c.wait_for_event()
     print(event)
     print(event.event)
     print(event.child)
 

* Fri 12 Jun 2015 02:19:20 AM JST
True
* Fri 12 Jun 2015 02:19:31 AM JST
import xcb,xcb.xproto as xp;c=xcb.connect()
from xcb.xproto import GrabMode as GM
from xcb.xproto import EventMask as EM

mask=EM.ButtonPress|EM.ButtonRelease
c.core.GrabButtonChecked(False, 482, mask, GM.Async, GM.Async, 0, 0, 1, 0).check()

* Fri 12 Jun 2015 02:19:35 AM JST
while 1:
     event = c.wait_for_event()
     print(event)
     print(event.event)
     print(event.child)

* Fri 12 Jun 2015 02:38:54 AM JST
grab_window   : グラブ中イベントが通知されるウィンドウ
owner_events  : グラブ中に必要のないイベントの扱い
event_mask    : グラブ中に通知するイベント
pointer_mode  : グラブ後のポインタイベントの制御
keyboard_mode : グラブ後のキーボードイベントの制御 
confine_to    : マウスカーソルをその中に制限したいウィンドウ
cursor        : グラブ中に表示するマウスカーソル
time          : タイムスタンプ
* Fri 12 Jun 2015 02:41:20 AM JST
import xcb,xcb.xproto as xp;c=xcb.connect()
from xcb.xproto import GrabMode as GM
from xcb.xproto import EventMask as EM

mask=EM.ButtonPress|EM.ButtonRelease

* Fri 12 Jun 2015 02:42:48 AM JST
get_instance()
* Fri 12 Jun 2015 02:43:06 AM JST
54525974
* Fri 12 Jun 2015 02:44:16 AM JST
mask=EM.ButtonPress|EM.ButtonRelease
* Fri 12 Jun 2015 02:44:30 AM JST
54525974
* Fri 12 Jun 2015 02:45:03 AM JST
while 1:
     event = c.wait_for_event()
     print(event)
     print(event.event)
     print(event.child)

* Fri 12 Jun 2015 02:46:23 AM JST
import xcb,xcb.xproto as xp;c=xcb.connect()
from xcb.xproto import GrabMode as GM
from xcb.xproto import EventMask as EM

mask=EM.ButtonPress|EM.ButtonRelease

* Fri 12 Jun 2015 02:46:27 AM JST
c.core.GrabButtonChecked(False, 482, mask, GM.Async, GM.Async, 0, 0, 1, 0).check()
* Fri 12 Jun 2015 02:46:32 AM JST
54525974
* Fri 12 Jun 2015 02:46:41 AM JST
em=54525974
* Fri 12 Jun 2015 02:46:50 AM JST
while 1:
     event = c.wait_for_event()
     print(event)
     print(event.event)
     print(event.child)
 

* Fri 12 Jun 2015 02:47:51 AM JST

import xcb,xcb.xproto as xp;c=xcb.connect()
from xcb.xproto import GrabMode as GM
from xcb.xproto import EventMask as EM

mask=EM.ButtonPress|EM.ButtonRelease
em=54525974

c.core.GrabButtonChecked(False, 482, mask, GM.Async, GM.Async, 0, 0, 1, 0).check()

* Fri 12 Jun 2015 02:48:02 AM JST
while 1:
     event = c.wait_for_event()
     print(event)
     print(event.event)
     print(event.child)
 

* Fri 12 Jun 2015 02:49:09 AM JST
False を指定するとマウスイベントの通知は grab_window に関してしか行われません。True を指定すると、既にアプリケーションで選択していたイベントはグラブの影響を受けずに通知されます。
* Fri 12 Jun 2015 03:12:20 AM JST
import xcb,xcb.xproto as xp;c=xcb.connect()
from xcb.xproto import GrabMode as GM
from xcb.xproto import EventMask as EM

mask=EM.ButtonPress|EM.ButtonRelease
em=54525974

* Fri 12 Jun 2015 03:12:25 AM JST
c.core.GrabButtonChecked(False, 482, mask, GM.Async, GM.Async, 0, 0, 1, 0).check()

* Fri 12 Jun 2015 03:12:29 AM JST
482
* Fri 12 Jun 2015 03:12:33 AM JST
c.core.GrabButtonChecked(False, em, mask, GM.Async, GM.Async, 0, 0, 1, 0).check()

* Fri 12 Jun 2015 03:12:45 AM JST
while 1:
     event = c.wait_for_event()
     print(event)
     print(event.event)
     print(event.child)
     print('{0.root_x} {0.root_y} {0.event_x} {0.event_y}'.format(event))

* Fri 12 Jun 2015 03:15:57 AM JST

* Fri 12 Jun 2015 03:15:57 AM JST

* Fri 12 Jun 2015 03:15:57 AM JST
     print(event.child)

* Fri 12 Jun 2015 03:16:35 AM JST

* Fri 12 Jun 2015 03:16:35 AM JST

* Fri 12 Jun 2015 03:16:35 AM JST
     print(event.event)

* Fri 12 Jun 2015 03:17:01 AM JST
import xcb,xcb.xproto as xp;c=xcb.connect()
from xcb.xproto import GrabMode as GM
from xcb.xproto import EventMask as EM

mask=EM.ButtonPress|EM.ButtonRelease
em=54525974

c.core.GrabButtonChecked(False, em, mask, GM.Async, GM.Async, 0, 0, 1, 0).check()

* Fri 12 Jun 2015 03:17:06 AM JST
while 1:
     event = c.wait_for_event()
     print(event)
     print('{0.event} {0.root_x} {0.root_y} {0.event_x} {0.event_y}'.format(event))


* Fri 12 Jun 2015 03:34:13 AM JST
    def get_point(self):
        """function get_point

        returns
        """
        if self._cache_point is None:
            self._cache_point = Point(self._event.event_x, self._event.event_y)
        return self._cache_point

    def get_x(self):
        """function get_x

        returns
        """
        return self.get_point().get_x()

    def get_y(self):
        """function get_y

        returns
        """
        return self.get_point().get_y()

* Fri 12 Jun 2015 03:34:52 AM JST
window
* Fri 12 Jun 2015 03:34:56 AM JST
window
* Fri 12 Jun 2015 03:35:05 AM JST
self._cache_point = None
* Fri 12 Jun 2015 03:37:23 AM JST
    def get_point(self):
        """function get_point

        returns
        """
        if self._cache_point is None:
            self._cache_point = Point(self._event.event_x, self._event.event_y)
        return self._cache_point

    def get_x(self):
        """function get_x

        returns
        """
        return self.get_point().get_x()

    def get_y(self):
        """function get_y

        returns
        """
        return self.get_point().get_y()

* Fri 12 Jun 2015 03:38:51 AM JST
event
* Fri 12 Jun 2015 03:38:53 AM JST
event
* Fri 12 Jun 2015 03:46:08 AM JST
    def get_point(self):
        """function get_point

        returns
        """
        if self._cache_point is None:
            self._cache_point = Point(self._event.event_x, self._event.event_y)
        return self._cache_point

    def get_x(self):
        """function get_x

        returns
        """
        return self.get_point().get_x()

    def get_y(self):
        """function get_y

        returns
        """
        return self.get_point().get_y()

    def get_root_point(self):
        """function get_point

        returns
        """
        if self._cache_root_point is None:
            self._cache_root_point = Point(
                self._event.root_x, self._event.root_y)
        return self._cache_root_point

    def get_root_x(self):
        """function get_x

        returns
        """
        return self.get_root_point().get_x()

    def get_root_y(self):
        """function get_y

        returns
        """
        return self.get_root_point().get_y()

* Fri 12 Jun 2015 03:46:31 AM JST
    def __init__(self, event, ):
        r"""

        @Arguments:
        - `event`:
        - `window`:
        """
        Event.__init__(self, event, )
        # self._cache_modifier = None
        self._cache_point = None
        self._cache_root_point = None

* Fri 12 Jun 2015 03:46:47 AM JST

* Fri 12 Jun 2015 03:46:47 AM JST

* Fri 12 Jun 2015 03:46:47 AM JST
        # self._cache_modifier = None

* Fri 12 Jun 2015 03:57:51 AM JST
c.core.GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode)
* Fri 12 Jun 2015 03:58:01 AM JST
c.core.GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers)
* Fri 12 Jun 2015 03:58:55 AM JST
c.core.GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time)
* Fri 12 Jun 2015 08:11:39 AM JST
import xcb,xcb.xproto as xp;c=xcb.connect()
from xcb.xproto import GrabMode as GM
from xcb.xproto import EventMask as EM

mask=EM.ButtonPress|EM.ButtonRelease
em=54525974

c.core.GrabButtonChecked(False, em, mask, GM.Async, GM.Async, 0, 0, 1, 0).check()

* Fri 12 Jun 2015 08:11:47 AM JST
while 1:
     event = c.wait_for_event()
     print(event)
     print('{0.event} {0.root_x} {0.root_y} {0.event_x} {0.event_y}'.format(event))

* Mon 15 Jun 2015 03:07:37 AM JST
c.core.GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode)

c.core.GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers)

c.core.GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time)
* Mon 15 Jun 2015 03:08:07 AM JST
c.core.GrabKeyboard(self, owner_events, grab_window, time, pointer_mode, keyboard_mode)
* Mon 15 Jun 2015 03:08:16 AM JST
c.core.GrabKeyboard(self, owner_events, grab_window, time, pointer_mode, keyboard_mode)
* Mon 15 Jun 2015 03:08:23 AM JST
c.core.GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode)

c.core.GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers)

c.core.GrabKeyboard(self, owner_events, grab_window, time, pointer_mode, keyboard_mode)

c.core.GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time)

* Fri 19 Jun 2015 01:23:56 AM JST
class EventHandler:
    """Class EventHandler
    """
    # Attributes:
    
    # Operations
    def on_event(self, event):
        """function on_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_key_event(self, event):
        """function on_key_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_mouse_event(self, event):
        """function on_mouse_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 19 Jun 2015 01:28:18 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 01:28:20 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 01:28:22 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 02:26:31 AM JST
class EventTarget(EventHandler):
    """Class EventTarget
    """
    # Attributes:
    target_handlers = None  # () 
    pretarget_handlers = None  # () 
    posttarget_handlers = None  # () 
    
    # Operations
    def can_accept_event(self, event):
        """function can_accept_event
        
        event: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def set_target_handler(self, handler):
        """function set_target_handler
        
        handler: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_pretarget_handler(self, handler):
        """function add_pretarget_handler
        
        handler: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def prepend_pretarget_handler(self, handler):
        """function prepend_pretarget_handler
        
        handler: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_pretarget_handler(self, handler):
        """function remove_pretarget_handler
        
        handler: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_posttarget_handler(self, handler):
        """function add_posttarget_handler
        
        handler: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def prepend_posttarget_handler(self, handler):
        """function prepend_posttarget_handler
        
        handler: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_posttarget_handler(self, handler):
        """function remove_posttarget_handler
        
        handler: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_key_event(self, event):
        """function on_key_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_mouse_event(self, event):
        """function on_mouse_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 19 Jun 2015 02:27:54 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 02:28:00 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 02:28:12 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 02:28:45 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 02:29:10 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 02:29:27 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 02:29:28 AM JST
f_
* Fri 19 Jun 2015 02:29:29 AM JST
sle.f_
* Fri 19 Jun 2015 02:29:39 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 02:29:48 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 02:30:09 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 02:30:52 AM JST
        if self._target_handlers is None:
            return
        self._target_handlers.on_key_event(event)

* Fri 19 Jun 2015 03:12:18 AM JST
None
* Fri 19 Jun 2015 03:14:51 AM JST
self._process_event(KeyEvent(event, self))
* Fri 19 Jun 2015 03:14:54 AM JST
Key
* Fri 19 Jun 2015 03:21:21 AM JST
        for target in self.get_pretarget_handlers:
            target.on_event(event)

* Fri 19 Jun 2015 03:26:57 AM JST
class Binder(Observable):
    """Class Binder
    """
    # Attributes:
    accelerators = None  # () 
    
    # Operations
    def bind(self, accelerator, cmd):
        """function bind
        
        accelerator: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unbind(self, accelerator):
        """function unbind
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_accelerators(self):
        """function list_accelerators
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_cmds(self):
        """function list_cmds
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def items(self):
        """function items
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iteritems(self):
        """function iteritems
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear(self):
        """function clear
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 19 Jun 2015 03:27:20 AM JST
None  # () 
* Fri 19 Jun 2015 03:27:38 AM JST
accelerators
* Fri 19 Jun 2015 03:28:22 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 03:28:33 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 03:28:39 AM JST
if
* Fri 19 Jun 2015 03:28:59 AM JST
None # should raise NotImplementedError()
* Fri 19 Jun 2015 03:29:00 AM JST
_
* Fri 19 Jun 2015 03:29:01 AM JST
lsef._
* Fri 19 Jun 2015 03:29:09 AM JST
None # should raise NotImplementedError()
* Fri 19 Jun 2015 03:29:15 AM JST
items
* Fri 19 Jun 2015 03:29:21 AM JST
None # should raise NotImplementedError()
* Fri 19 Jun 2015 03:29:30 AM JST
None # should raise NotImplementedError()
* Fri 19 Jun 2015 03:29:37 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 03:32:24 AM JST

class ListenerObserver:
    """Class ListenerObserver
    """
    # Attributes:
    
    # Operations
    def on_binded(self, accelerator, cmd):
        """function on_binded
        
        accelerator: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_unbinded(self, accelerator):
        """function on_unbinded
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 19 Jun 2015 03:32:34 AM JST
Listener
* Fri 19 Jun 2015 03:33:19 AM JST
obser
* Fri 19 Jun 2015 03:35:38 AM JST
class KeyBinder(Binder, EventTarget):
    """Class KeyBinder
    """
    # Attributes:
    window = None  # () 
    __is_binding = None  # () 
    
    # Operations
    def can_accept_event(self, event):
        """function can_accept_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def grabs(self):
        """function grabs
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def ungrabs(self):
        """function ungrabs
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_binding(self):
        """function start_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def stop_binding(self):
        """function stop_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_binding(self):
        """function is_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_key_event(self, event):
        """function on_key_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 19 Jun 2015 03:36:30 AM JST

* Fri 19 Jun 2015 03:36:33 AM JST
binder
* Fri 19 Jun 2015 03:36:33 AM JST
input_listener.binder
* Fri 19 Jun 2015 03:36:37 AM JST
Binder
* Fri 19 Jun 2015 03:37:36 AM JST
None
* Fri 19 Jun 2015 03:37:39 AM JST
  # () 
* Fri 19 Jun 2015 03:41:15 AM JST
None # should raise NotImplementedError()
* Fri 19 Jun 2015 03:44:56 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 03:45:35 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 03:45:54 AM JST
None # should raise NotImplementedError()
* Fri 19 Jun 2015 03:50:08 AM JST

* Fri 19 Jun 2015 03:50:08 AM JST

* Fri 19 Jun 2015 03:50:08 AM JST
            return

* Fri 19 Jun 2015 03:51:51 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 03:52:21 AM JST
self._window.add_posttarget_handler(self)
* Fri 19 Jun 2015 03:53:03 AM JST

* Fri 19 Jun 2015 03:53:03 AM JST

* Fri 19 Jun 2015 03:53:03 AM JST
        return

* Fri 19 Jun 2015 03:53:38 AM JST
None # should raise NotImplementedError()
* Fri 19 Jun 2015 03:53:39 AM JST
f
* Fri 19 Jun 2015 03:53:40 AM JST
lse.f
* Fri 19 Jun 2015 03:57:26 AM JST
not 
* Fri 19 Jun 2015 03:57:36 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 03:57:41 AM JST
_bin
* Fri 19 Jun 2015 03:57:41 AM JST
self._bin
* Fri 19 Jun 2015 04:05:13 AM JST
class KeyBindManager(BindCandidateObserver):
    """Class KeyBindManager
    """
    # Attributes:
    binders = None  # (list) 
    candidate = None  # () 
    __is_managing = None  # (bool) 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_created_window(self, window):
        """function on_created_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_destroyed_window(self, window_id):
        """function on_destroyed_window
        
        window_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_binder(self, filter):
        """function list_binder
        
        filter: 
        
        returns KeyListener
        """
        return None # should raise NotImplementedError()
    
    def start_managing(self):
        """function start_managing
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def stop_managing(self):
        """function stop_managing
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_managing(self):
        """function is_managing
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def update_binding(self):
        """function update_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_changed_candidate(self):
        """function on_changed_candidate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __create_binder(self, window):
        """function create_binder
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()

* Fri 19 Jun 2015 04:07:56 AM JST

* Fri 19 Jun 2015 04:07:56 AM JST

* Fri 19 Jun 2015 04:07:56 AM JST
    __is_managing = None  # (bool)

* Fri 19 Jun 2015 04:08:33 AM JST
cls._instance
* Fri 19 Jun 2015 04:09:43 AM JST

* Fri 19 Jun 2015 04:09:46 AM JST
BindCandidateObserver
* Fri 19 Jun 2015 04:09:47 AM JST
bind_candidate_observer
* Fri 19 Jun 2015 04:27:38 AM JST
self, 
* Fri 19 Jun 2015 04:29:07 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 04:30:54 AM JST
_is_
* Fri 19 Jun 2015 04:34:26 AM JST

* Fri 19 Jun 2015 04:34:26 AM JST

* Fri 19 Jun 2015 04:34:26 AM JST
        return None # should raise NotImplementedError()

* Fri 19 Jun 2015 04:34:40 AM JST
None # should raise NotImplementedError()
* Fri 19 Jun 2015 04:35:43 AM JST
self._binders
* Fri 19 Jun 2015 04:36:49 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 04:37:05 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 04:37:14 AM JST
None # should raise NotImplementedError()
* Fri 19 Jun 2015 04:37:15 AM JST
f_
* Fri 19 Jun 2015 04:37:16 AM JST
sle.f_
* Fri 19 Jun 2015 04:50:03 AM JST

* Fri 19 Jun 2015 04:50:03 AM JST

* Fri 19 Jun 2015 04:50:03 AM JST
        self._stop_all_binder()

* Fri 19 Jun 2015 04:50:05 AM JST

* Fri 19 Jun 2015 04:50:05 AM JST

* Fri 19 Jun 2015 04:50:05 AM JST
        self._start_all_binder()

* Fri 19 Jun 2015 04:50:18 AM JST
return None # should raise NotImplementedError()
* Fri 19 Jun 2015 04:50:44 AM JST
        if not self.is_managing():
            return

* Fri 19 Jun 2015 04:50:59 AM JST
not 
* Fri 19 Jun 2015 04:51:01 AM JST

* Fri 19 Jun 2015 04:51:01 AM JST

* Fri 19 Jun 2015 04:51:01 AM JST
            return

* Fri 19 Jun 2015 05:05:42 AM JST
DesktopManager.get_instance().add_observer(self)
* Fri 19 Jun 2015 05:05:47 AM JST
add
* Fri 19 Jun 2015 05:06:14 AM JST
desktop
* Fri 19 Jun 2015 05:06:15 AM JST
desktop_manager_observer
* Fri 19 Jun 2015 05:06:38 AM JST
DesktopManagerObserver
* Fri 19 Jun 2015 05:10:35 AM JST
        for window in DesktopManager.get_instance().list_windows():
            self.on_created_window(window)


* Fri 19 Jun 2015 05:12:20 AM JST
.clear()
* Fri 19 Jun 2015 05:12:52 AM JST

* Fri 19 Jun 2015 05:12:52 AM JST

* Fri 19 Jun 2015 05:12:52 AM JST
            del self._binders[:]

* Fri 19 Jun 2015 05:13:02 AM JST

* Fri 19 Jun 2015 05:13:02 AM JST

* Fri 19 Jun 2015 05:13:02 AM JST
        del self._binders[:]

* Fri 19 Jun 2015 05:13:29 AM JST

* Fri 19 Jun 2015 05:13:29 AM JST

* Fri 19 Jun 2015 05:13:29 AM JST
        if self.is_managing():

* Fri 19 Jun 2015 06:04:07 AM JST

* Fri 19 Jun 2015 06:04:08 AM JST

* Fri 19 Jun 2015 06:04:08 AM JST
            make_candidate2(binder, candidate)

* Fri 19 Jun 2015 06:22:58 AM JST
target
* Fri 19 Jun 2015 06:26:32 AM JST

* Fri 19 Jun 2015 06:26:33 AM JST
windowspec
* Fri 19 Jun 2015 06:26:48 AM JST
WindowWMClassSpec
* Fri 19 Jun 2015 06:28:29 AM JST
from lab.xahk.input_listener.keybind_manager import KeyBindManager
* Fri 19 Jun 2015 06:29:12 AM JST
add
* Fri 19 Jun 2015 06:29:15 AM JST
add
* Fri 19 Jun 2015 06:29:19 AM JST
remove
* Fri 19 Jun 2015 06:29:34 AM JST
remove
* Fri 19 Jun 2015 06:30:12 AM JST
from lab.xahk.eventloop import EventLoop
* Fri 19 Jun 2015 06:30:20 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 19 Jun 2015 06:30:25 AM JST

* Fri 19 Jun 2015 06:30:25 AM JST

* Fri 19 Jun 2015 06:30:25 AM JST
from lab.xahk.input_listener.keybind_manager import KeyBindManager

* Fri 19 Jun 2015 06:30:29 AM JST

* Fri 19 Jun 2015 06:30:29 AM JST

* Fri 19 Jun 2015 06:30:29 AM JST
from lab.xahk.input_listener.bind_candidate import BindCandidate

* Fri 19 Jun 2015 06:30:34 AM JST

* Fri 19 Jun 2015 06:30:34 AM JST

* Fri 19 Jun 2015 06:30:34 AM JST
from lab.xahk.windowspec import WindowWMClassSpec

* Fri 19 Jun 2015 06:30:39 AM JST

* Fri 19 Jun 2015 06:30:39 AM JST

* Fri 19 Jun 2015 06:30:39 AM JST
from lab.xahk.accelerator import Accelerator

* Fri 19 Jun 2015 06:30:51 AM JST

* Fri 19 Jun 2015 06:30:51 AM JST

* Fri 19 Jun 2015 06:30:51 AM JST


* Fri 19 Jun 2015 06:30:54 AM JST
from lab.xahk.event_handler import EventHandler
class KeyEventHandler(EventHandler):
    def on_key_event(self, event):
        if event.is_down():
            self.on_down(event)
        elif event.is_up():
            self.on_up(event)

    def on_down(self, event):
        print('DEBUG-1-2015-06-19-062338.junk.py')

    def on_up(self, event):
        print('DEBUG-2-2015-06-19-062338.junk.py')

* Fri 19 Jun 2015 06:31:54 AM JST
  # ()
* Fri 19 Jun 2015 06:31:55 AM JST
None  # ()
* Fri 19 Jun 2015 06:31:57 AM JST
None  # ()
* Fri 19 Jun 2015 06:32:10 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 19 Jun 2015 06:37:19 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 19 Jun 2015 06:38:41 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 19 Jun 2015 06:39:09 AM JST
KeyPressEvent, KeyReleaseEvent
* Fri 19 Jun 2015 06:39:23 AM JST
ButtonPressEvent, ButtonReleaseEvent
* Fri 19 Jun 2015 06:39:56 AM JST
KeyPressEvent, KeyReleaseEvent
* Fri 19 Jun 2015 06:40:33 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 19 Jun 2015 06:41:36 AM JST

* Fri 19 Jun 2015 06:41:37 AM JST

* Fri 19 Jun 2015 06:41:37 AM JST
        print(event)

* Fri 19 Jun 2015 06:42:38 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 19 Jun 2015 06:45:06 AM JST
input_listener
* Fri 19 Jun 2015 06:45:30 AM JST
input_listener
* Fri 19 Jun 2015 06:45:41 AM JST
input_listener
* Fri 19 Jun 2015 06:45:52 AM JST
input_listener
* Fri 19 Jun 2015 06:48:01 AM JST
from lab.xahk.bind.bind_candidate import BindCandidate
from lab.xahk.windowspec import WindowWMClassSpec
can = BindCandidate(WindowWMClassSpec('emacs'))
from lab.xahk.accelerator import Accelerator
from lab.xahk.event_handler import EventHandler
class KeyEventHandler(EventHandler):
    def on_key_event(self, event):
        if event.is_down():
            self.on_down(event)
        elif event.is_up():
            self.on_up(event)

    def on_down(self, event):
        print('DEBUG-1-2015-06-19-062338.junk.py')

    def on_up(self, event):
        print('DEBUG-2-2015-06-19-062338.junk.py')

can.register_bind(Accelerator(24), KeyEventHandler())

from lab.xahk.bind.keybind_manager import KeyBindManager
man = KeyBindManager.get_instance()
man.entry_candidate(can)
man.start_managing()

from lab.xahk.eventloop import EventLoop

* Fri 19 Jun 2015 06:48:13 AM JST

* Fri 19 Jun 2015 06:48:13 AM JST

* Fri 19 Jun 2015 06:48:13 AM JST
        print(window)

* Fri 19 Jun 2015 06:48:24 AM JST
EventLoop.get_instance().dispatch_event()
* Mon 22 Jun 2015 10:51:31 PM JST
client window
* Wed 24 Jun 2015 12:46:17 PM JST
class InputListener(EventTarget, Observable):
    """Class InputListener
    """
    # Attributes:
    window = None  # () 
    __accelerator_map = None  # (dict) 
    __is_listening = None  # () 
    
    # Operations
    def create(self, window):
        """function create
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def register_accelerator(self, accelerator, handler):
        """function register_accelerator
        
        accelerator: 
        handler: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def register_accelerators(self, handler_map):
        """function register_accelerators
        
        handler_map: dict
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unregister_accelerator(self, accelerator):
        """function unregister_accelerator
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unregister_accelerators(self, accelerators):
        """function unregister_accelerators
        
        accelerators: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear_accelerators(self):
        """function clear_accelerators
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_listening(self):
        """function start_listening
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def stop_listening(self):
        """function stop_listening
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_listening(self):
        """function is_listening
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __register_accelerator_impl(self, accelerator):
        """function register_accelerator_impl
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __unregister_accelerator_impl(self, accelerator):
        """function unregister_accelerator_impl
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __register_accelerators_impl(self, accelerators):
        """function register_accelerators_impl
        
        accelerators: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __unregister_accelerators_impl(self, accelerators):
        """function unregister_accelerators_impl
        
        accelerators: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 24 Jun 2015 12:47:39 PM JST

* Wed 24 Jun 2015 12:47:39 PM JST

* Wed 24 Jun 2015 12:47:39 PM JST
    window = None  # () 

* Wed 24 Jun 2015 12:47:45 PM JST
None  # (dict) 
* Wed 24 Jun 2015 12:47:53 PM JST
None  # () 
* Wed 24 Jun 2015 12:48:09 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 12:48:52 PM JST
handler
* Wed 24 Jun 2015 12:49:19 PM JST
f_
* Wed 24 Jun 2015 12:49:19 PM JST
sle.f_
* Wed 24 Jun 2015 12:51:56 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 12:54:16 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 12:55:43 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 12:56:48 PM JST
_no
* Wed 24 Jun 2015 12:56:49 PM JST
self._no
* Wed 24 Jun 2015 12:57:01 PM JST
self.
* Wed 24 Jun 2015 12:57:10 PM JST
_
* Wed 24 Jun 2015 12:57:10 PM JST
self._
* Wed 24 Jun 2015 12:57:41 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:00:02 PM JST
    def can_accept_event(self, event):
        """function can_accept_event

        event:

        returns
        """
        return event.is_key_event()

    def get_window(self, ):
        r"""SUMMARY

        get_window()

        @Return:

        @Error:
        """
        return self._window

* Wed 24 Jun 2015 01:00:44 PM JST
self.
* Wed 24 Jun 2015 01:00:45 PM JST
not 
* Wed 24 Jun 2015 01:00:55 PM JST
stop_listening()
* Wed 24 Jun 2015 01:01:18 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:01:22 PM JST
_
* Wed 24 Jun 2015 01:01:22 PM JST
self._
* Wed 24 Jun 2015 01:01:25 PM JST
sief
* Wed 24 Jun 2015 01:01:56 PM JST
None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:02:05 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:02:21 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:02:22 PM JST
f_
* Wed 24 Jun 2015 01:02:22 PM JST
sle.f_
* Wed 24 Jun 2015 01:02:38 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:02:43 PM JST
ungrab
* Wed 24 Jun 2015 01:02:52 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:04:05 PM JST
sle.
* Wed 24 Jun 2015 01:05:00 PM JST
class KeyListener(InputListener):
    """Class KeyListener
    """
    # Attributes:
    
    # Operations
    def can_accept_event(self, event):
        """function can_accept_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_key_event(self, event):
        """function on_key_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __register_accelerator_impl(self, accelerator):
        """function register_accelerator_impl
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __register_accelerators_impl(self, accelerators):
        """function register_accelerators_impl
        
        accelerators: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __unregister_accelerator_impl(self, accelerator):
        """function unregister_accelerator_impl
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __unregister_accelerators_impl(self, accelerators):
        """function unregister_accelerators_impl
        
        accelerators: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 24 Jun 2015 01:05:38 PM JST
return event.is_key_event()
* Wed 24 Jun 2015 01:07:34 PM JST
self.
* Wed 24 Jun 2015 01:07:36 PM JST
can
* Wed 24 Jun 2015 01:07:58 PM JST

* Wed 24 Jun 2015 01:07:58 PM JST

* Wed 24 Jun 2015 01:07:58 PM JST
    # Attributes:

* Wed 24 Jun 2015 01:08:33 PM JST
            # TODO: (Atami) [2015/06/19]
            # missing

* Wed 24 Jun 2015 01:09:04 PM JST
    def _register_accelerator_impl(self, accelerator):
        """function register_accelerator_impl

        accelerator:

        returns
        """
        self._window.grab_key(accelerator)

    def _unregister_accelerator_impl(self, accelerator):
        """function unregister_accelerator_impl

        accelerator:

        returns
        """
        self._window.ungrab_key(accelerator)

    def _register_accelerators_impl(self, accelerators):
        """function register_accelerators_impl

        accelerators:

        returns
        """
        self._window.grab_keys(accelerators)

    def _unregister_accelerators_impl(self, accelerators):
        """function unregister_accelerators_impl

        accelerators:

        returns
        """
        self._window.ungrabs_key(accelerators)

* Wed 24 Jun 2015 01:09:22 PM JST
self._window.grab_key(accelerator)
* Wed 24 Jun 2015 01:09:29 PM JST

* Wed 24 Jun 2015 01:09:29 PM JST

* Wed 24 Jun 2015 01:09:29 PM JST
        self._window.ungrab_key(accelerator)

* Wed 24 Jun 2015 01:09:30 PM JST

* Wed 24 Jun 2015 01:09:30 PM JST

* Wed 24 Jun 2015 01:09:31 PM JST
        self._window.grab_keys(accelerators)

* Wed 24 Jun 2015 01:09:32 PM JST

* Wed 24 Jun 2015 01:09:32 PM JST

* Wed 24 Jun 2015 01:09:32 PM JST
        self._window.ungrabs_key(accelerators)

* Wed 24 Jun 2015 01:11:44 PM JST
from BindCandidateObserver import BindCandidateObserver

class Candidate:
    """Class Candidate
    """
    # Attributes:
    spec = None  # (WindowSpec) 
    accelerator_map = None  # () 
    
    # Operations
    def is_satisfied(self, listener):
        """function is_satisfied
        
        listener: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def build_listener(self, listener):
        """function build_listener
        
        listener: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_window_spec(self):
        """function get_window_spec
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def register_candidate_accelerator(self, accelerator, cmd):
        """function register_candidate_accelerator
        
        accelerator: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unregister_candidate_accelerator(self, accelerator):
        """function unregister_candidate_accelerator
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_changed_candidate_member(self):
        """function notify_changed_candidate_member
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 24 Jun 2015 01:11:51 PM JST
class Candidate:
    """Class Candidate
    """
    # Attributes:
    spec = None  # (WindowSpec) 
    accelerator_map = None  # () 
    
    # Operations
    def is_satisfied(self, listener):
        """function is_satisfied
        
        listener: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def build_listener(self, listener):
        """function build_listener
        
        listener: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_window_spec(self):
        """function get_window_spec
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def register_candidate_accelerator(self, accelerator, cmd):
        """function register_candidate_accelerator
        
        accelerator: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unregister_candidate_accelerator(self, accelerator):
        """function unregister_candidate_accelerator
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_changed_candidate_member(self):
        """function notify_changed_candidate_member
        
        returns 
        """
        return None # should raise NotImplementedError()

* Wed 24 Jun 2015 01:12:30 PM JST

* Wed 24 Jun 2015 01:12:30 PM JST

* Wed 24 Jun 2015 01:12:30 PM JST
    spec = None  # (WindowSpec) 

* Wed 24 Jun 2015 01:12:38 PM JST
None  # () 
* Wed 24 Jun 2015 01:12:50 PM JST
None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:13:08 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:14:11 PM JST
None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:14:12 PM JST
f
* Wed 24 Jun 2015 01:14:13 PM JST
sle.f
* Wed 24 Jun 2015 01:14:21 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:14:34 PM JST
cmd
* Wed 24 Jun 2015 01:15:42 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:16:12 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:16:29 PM JST
self._notify_changed_candidate_member()
* Wed 24 Jun 2015 01:18:31 PM JST
class BindCandidateObserver:
    """Class BindCandidateObserver
    """
    # Attributes:
    
    # Operations
    def on_changed_candidate_member(self):
        """function on_changed_candidate_member
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 24 Jun 2015 01:19:07 PM JST
class CandidateProxy(BindCandidateObserver):
    """Class CandidateProxy
    """
    # Attributes:
    candidates = None  # (set) 
    
    # Operations
    def build_listener(self, listener):
        """function build_listener
        
        listener: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def add_candidate(self, candidate):
        """function add_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def remove_candidate(self, candidate):
        """function remove_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def has_candidate(self, candidate):
        """function has_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_candidates(self):
        """function list_candidates
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_changed_candidate_member(self):
        """function on_changed_candidate_member
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_changed_candidate(self):
        """function notify_changed_candidate
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 24 Jun 2015 01:20:40 PM JST

* Wed 24 Jun 2015 01:20:40 PM JST

* Wed 24 Jun 2015 01:20:40 PM JST
    candidates = None  # (set) 

* Wed 24 Jun 2015 01:21:04 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:22:27 PM JST
None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:22:41 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:23:08 PM JST
None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:23:33 PM JST
None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:23:34 PM JST
f_
* Wed 24 Jun 2015 01:23:34 PM JST
sle.f_
* Wed 24 Jun 2015 01:25:06 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:26:11 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:26:53 PM JST
_notify_changed_candidate
* Wed 24 Jun 2015 01:27:57 PM JST
class CandidateProxyObserver:
    """Class CandidateProxyObserver
    """
    # Attributes:
    
    # Operations
    def on_changed_candidate(self):
        """function on_changed_candidate
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 24 Jun 2015 01:28:50 PM JST
class KeyBindService(CandidateProxyObserver):
    """Class KeyBindService
    """
    # Attributes:
    __proxy = None  # () 
    __is_binding = None  # () 
    __listeners = None  # () 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_binding(self):
        """function start_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def stop_binding(self):
        """function stop_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_binding(self):
        """function is_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_created_window(self, window):
        """function on_created_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_destroyed_window(self, window):
        """function on_destroyed_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def update_binding(self):
        """function update_binding
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_listeners(self):
        """function list_listeners
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_changed_candidate(self):
        """function on_changed_candidate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_candidate_proxy(self):
        """function get_candidate_proxy
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_candidate_proxy(self, proxy):
        """function set_candidate_proxy
        
        proxy: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __clear_listeners_accelerators(self):
        """function clear_listeners_accelerators
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 24 Jun 2015 01:29:48 PM JST

* Wed 24 Jun 2015 01:29:48 PM JST

* Wed 24 Jun 2015 01:29:48 PM JST
    __proxy = None  # () 

* Wed 24 Jun 2015 01:29:58 PM JST
None  # () 
* Wed 24 Jun 2015 01:30:05 PM JST
None  # () 
* Wed 24 Jun 2015 01:30:51 PM JST

* Wed 24 Jun 2015 01:30:52 PM JST
CandidateProxyObserver
* Wed 24 Jun 2015 01:30:54 PM JST
candidate_proxy_observer
* Wed 24 Jun 2015 01:31:12 PM JST
cls
* Wed 24 Jun 2015 01:31:13 PM JST
clsNone # should raise NotImplementedError()
* Wed 24 Jun 2015 01:31:48 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 01:32:52 PM JST

* Wed 24 Jun 2015 01:32:52 PM JST

* Wed 24 Jun 2015 01:32:52 PM JST
        self.start_listening()

* Wed 24 Jun 2015 01:33:27 PM JST
from lab.xahk.desktop_manager import DesktopManager
from lab.xahk.desktop_manager_observer import DesktopManagerObserver

* Wed 24 Jun 2015 01:33:34 PM JST
DesktopManagerObserver
* Wed 24 Jun 2015 01:35:01 PM JST
self.
* Wed 24 Jun 2015 01:37:17 PM JST
DesktopManager.get_instance().add_observer(self)
* Wed 24 Jun 2015 02:08:43 PM JST

* Wed 24 Jun 2015 02:08:43 PM JST

* Wed 24 Jun 2015 02:08:43 PM JST
        DesktopManager.get_instance().add_observer(self)

* Wed 24 Jun 2015 02:10:55 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 02:11:04 PM JST
None # should raise NotImplementedError()
* Wed 24 Jun 2015 02:11:19 PM JST
form 
* Wed 24 Jun 2015 02:11:23 PM JST

* Wed 24 Jun 2015 02:11:26 PM JST
candidate_proxy
* Wed 24 Jun 2015 02:11:57 PM JST
CandidateProxy
* Wed 24 Jun 2015 02:13:05 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 02:13:48 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 02:14:33 PM JST
window
* Wed 24 Jun 2015 02:14:58 PM JST
None # should raise NotImplementedError()
* Wed 24 Jun 2015 02:15:09 PM JST
_can
* Wed 24 Jun 2015 02:15:15 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 02:16:28 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 02:18:13 PM JST
proxy = 
* Wed 24 Jun 2015 02:18:20 PM JST
    def _clear_listeners_accelerators(self):
        """function clear_listeners_accelerators

        returns
        """
        return None # should raise NotImplementedError()

* Wed 24 Jun 2015 02:18:35 PM JST
None # should raise NotImplementedError()
* Wed 24 Jun 2015 02:18:50 PM JST
list
* Wed 24 Jun 2015 02:18:51 PM JST
ne
* Wed 24 Jun 2015 02:19:17 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 02:20:12 PM JST
return None # should raise NotImplementedError()
* Wed 24 Jun 2015 02:20:57 PM JST
on_created_window
* Wed 24 Jun 2015 02:20:58 PM JST
self.on_created_window
* Wed 24 Jun 2015 02:27:21 PM JST
Observable
* Wed 24 Jun 2015 02:27:43 PM JST
        for observer in self._observers:
            observer.on_created_listener(listener)

* Wed 24 Jun 2015 02:28:29 PM JST

* Wed 24 Jun 2015 02:28:29 PM JST

* Wed 24 Jun 2015 02:28:29 PM JST
                self._listeners.remove(listener)

* Wed 24 Jun 2015 02:28:32 PM JST
listener
* Wed 24 Jun 2015 02:28:36 PM JST

* Wed 24 Jun 2015 02:28:36 PM JST

* Wed 24 Jun 2015 02:28:36 PM JST
                return

* Wed 24 Jun 2015 02:28:46 PM JST
        for observer in self._observers:
            observer.on_created_listener(listener)

* Wed 24 Jun 2015 02:29:41 PM JST
QU /root/.pylib/lab/xahk/uml# em key_listener.dia BindCandidateObserver.py
* Wed 24 Jun 2015 02:29:57 PM JST
class KeyBindServiceObserver:
    """Class KeyBindServiceObserver
    """
    # Attributes:
    
    # Operations
    def on_created_listener(self, listener):
        """function on_created_listener
        
        listener: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_destroyed_listener(self, listener):
        """function on_destroyed_listener
        
        listener: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 24 Jun 2015 02:30:24 PM JST
x
* Wed 24 Jun 2015 02:30:25 PM JST

* Wed 24 Jun 2015 02:30:25 PM JST

* Wed 24 Jun 2015 02:30:25 PM JST
from lab. import 

* Wed 24 Jun 2015 02:32:52 PM JST
    def on_registered_accelerator(self, accelerator, handler):
        r"""SUMMARY

        on_registered_accelerator(accelerator, handler)

        @Arguments:
        - `accelerator`:
        - `handler`:

        @Return:

        @Error:
        """

    def on_unregistered_accelerator(self, accelerator):
        r"""SUMMARY

        on_unregistered_accelerator(accelerator)

        @Arguments:
        - `accelerator`:

        @Return:

        @Error:
        """

* Wed 24 Jun 2015 02:33:18 PM JST
accelerator
* Wed 24 Jun 2015 02:33:49 PM JST

* Wed 24 Jun 2015 02:33:49 PM JST
InputListenerObserver
* Wed 24 Jun 2015 02:33:51 PM JST
input_listener_observer
* Wed 24 Jun 2015 02:34:07 PM JST
KeyBindServiceObserver
* Wed 24 Jun 2015 02:35:19 PM JST

* Wed 24 Jun 2015 02:35:19 PM JST
KeyBindServiceObserver
* Wed 24 Jun 2015 02:39:30 PM JST

* Wed 24 Jun 2015 02:39:32 PM JST
keybind_service
* Wed 24 Jun 2015 02:39:34 PM JST
KeyBindService
* Wed 24 Jun 2015 02:39:53 PM JST
get_pro
* Wed 24 Jun 2015 02:43:44 PM JST
from lab.xahk.windowspec import WindowWMClassSpec
* Wed 24 Jun 2015 02:43:51 PM JST
WindowWMClassSpec('emacs')
* Wed 24 Jun 2015 02:43:58 PM JST
from lab.xahk.event_handler import EventHandler
class KeyEventHandler(EventHandler):
    def on_key_event(self, event):
        if event.is_down():
            self.on_down(event)
        elif event.is_up():
            self.on_up(event)

    def on_down(self, event):
        print('DEBUG-1-2015-06-19-062338.junk.py')

    def on_up(self, event):
        print('DEBUG-2-2015-06-19-062338.junk.py')

* Wed 24 Jun 2015 02:44:24 PM JST
from lab.xahk.accelerator import Accelerator
* Wed 24 Jun 2015 02:44:56 PM JST
Accelerator(24), KeyEventHandler()
* Wed 24 Jun 2015 02:45:10 PM JST
emacs_candidate = Candidate(WindowWMClassSpec('emacs'))
emacs_candidate.register_candidate_accelerator(
    Accelerator(24), KeyEventHandler())



* Wed 24 Jun 2015 02:45:31 PM JST
proxy.
* Wed 24 Jun 2015 02:47:50 PM JST
from lab.xahk.eventloop import EventLoop
EventLoop.get_instance().dispatch_event()

* Wed 24 Jun 2015 02:57:53 PM JST
from lab.xahk.binder.input_listener_observer import InputListenerObserver
from lab.xahk.binder.keybind_service_observer import KeyBindServiceObserver
from lab.xahk.binder.keybind_service import KeyBindService

from lab.xahk.accelerator import Accelerator
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.binder.candidate import Candidate

from lab.xahk.event_handler import EventHandler
class KeyEventHandler(EventHandler):
    def on_key_event(self, event):
        if event.is_down():
            self.on_down(event)
        elif event.is_up():
            self.on_up(event)

    def on_down(self, event):
        print('DEBUG-1-2015-06-19-062338.junk.py')

    def on_up(self, event):
        print('DEBUG-2-2015-06-19-062338.junk.py')


class DebugInputListenerObserver(InputListenerObserver):
    def on_registered_accelerator(self, accelerator, handler):
        print('{}, {}'.format(accelerator, handler))

    def on_unregistered_accelerator(self, accelerator):
        print('{}'.format(accelerator))


class DebugKeyBindServiceObserver(KeyBindServiceObserver):
    def __init__(self, ):
        r"""
        """
        self._observer = DebugInputListenerObserver()
        for listener in KeyBindService.get_instance().list_listeners():
            listener.add_observer(self._observer)

    def on_created_listener(self, listener):
        listener.add_observer(self._observer)


emacs_candidate = Candidate(WindowWMClassSpec('emacs'))
emacs_candidate.register_candidate_accelerator(
    Accelerator(24), KeyEventHandler())

proxy = KeyBindService.get_instance().get_candidate_proxy()
proxy.add_candidate(emacs_candidate)


from lab.xahk.eventloop import EventLoop
* Wed 24 Jun 2015 02:59:50 PM JST
EventLoop.get_instance().dispatch_event()
* Wed 24 Jun 2015 03:01:03 PM JST
self.
* Wed 24 Jun 2015 03:01:13 PM JST
candidate.add_observer(self)
* Wed 24 Jun 2015 03:02:17 PM JST
EventLoop.get_instance().dispatch_event()
* Wed 24 Jun 2015 03:03:26 PM JST
KeyBindService.get_instance()
* Wed 24 Jun 2015 03:03:35 PM JST
list_list
* Wed 24 Jun 2015 03:04:36 PM JST
get_window()
* Wed 24 Jun 2015 03:07:47 PM JST
_accelerator_map
* Wed 24 Jun 2015 03:07:47 PM JST
3]._accelerator_map
* Wed 24 Jun 2015 03:07:47 PM JST
_listeners[-3]._accelerator_map
* Wed 24 Jun 2015 03:08:11 PM JST
EventLoop.get_instance().dispatch_event()
* Wed 24 Jun 2015 03:08:34 PM JST
KeyBindService.get_instance()
* Wed 24 Jun 2015 03:13:30 PM JST
_accelerator_map
* Wed 24 Jun 2015 03:14:47 PM JST
_is_listening
* Wed 24 Jun 2015 03:15:13 PM JST
_target_handlers
* Wed 24 Jun 2015 03:15:28 PM JST
_posttarget_handlers
* Wed 24 Jun 2015 03:17:27 PM JST

* Wed 24 Jun 2015 03:17:27 PM JST

* Wed 24 Jun 2015 03:17:27 PM JST
        print(event)

* Wed 24 Jun 2015 03:18:57 PM JST

* Wed 24 Jun 2015 03:18:57 PM JST

* Wed 24 Jun 2015 03:18:57 PM JST
        print(event)

* Wed 24 Jun 2015 03:22:28 PM JST
from lab.xahk.eventloop import EventLoop
* Wed 24 Jun 2015 03:22:31 PM JST
EventLoop.get_instance().dispatch_event()
* Wed 24 Jun 2015 03:24:05 PM JST

* Wed 24 Jun 2015 03:24:05 PM JST

* Wed 24 Jun 2015 03:24:06 PM JST
            print(target)

* Wed 24 Jun 2015 03:25:11 PM JST
EventLoop.get_instance().dispatch_event()
* Wed 24 Jun 2015 03:27:01 PM JST
EventLoop.get_instance().dispatch_event()
* Wed 24 Jun 2015 03:42:50 PM JST
EventLoop.get_instance().dispatch_event()
* Wed 24 Jun 2015 03:54:54 PM JST

* Wed 24 Jun 2015 03:54:54 PM JST

* Wed 24 Jun 2015 03:54:55 PM JST
        print('DEBUG-1-event_handler.py')

* Wed 24 Jun 2015 03:55:05 PM JST

* Wed 24 Jun 2015 03:55:05 PM JST

* Wed 24 Jun 2015 03:55:05 PM JST
        print('DEBUG-3-2015-06-24-143106.junk.py')

* Wed 24 Jun 2015 03:55:25 PM JST
EventLoop.get_instance().dispatch_event()
* Wed 24 Jun 2015 03:56:18 PM JST
EventLoop.get_instance().dispatch_event()
* Wed 24 Jun 2015 03:58:07 PM JST
EventLoop.get_instance().dispatch_event()
* Wed 24 Jun 2015 04:06:25 PM JST
Key
* Wed 24 Jun 2015 04:06:37 PM JST
Key
* Wed 24 Jun 2015 04:07:19 PM JST
        if event.is_down():
            self.on_down(event)
        elif event.is_up():
            self.on_up(event)

* Wed 24 Jun 2015 04:07:26 PM JST
self._dispatch_input(event)
* Wed 24 Jun 2015 04:07:55 PM JST
from lab.xahk.event_handler import EventHandler


class InputEventHandler(EventHandler):
    def _dispatch_input(self, event):
        if event.is_down():
            self.on_down(event)
        elif event.is_up():
            self.on_up(event)

    def on_mouse_event(self, event):
        self._dispatch_input(event)

    def on_key_event(self, event):
        self._dispatch_input(event)

    def on_down(self, event):
        print('DEBUG on_down')

    def on_up(self, event):
        print('DEBUG on_up')

* Wed 24 Jun 2015 04:08:15 PM JST

* Wed 24 Jun 2015 04:08:15 PM JST

* Wed 24 Jun 2015 04:08:15 PM JST
        print('DEBUG on_down')

* Wed 24 Jun 2015 04:08:40 PM JST
event_handler
* Wed 24 Jun 2015 04:09:24 PM JST
EventLoop.get_instance().dispatch_event()
* Wed 24 Jun 2015 04:11:17 PM JST
EventLoop.get_instance().dispatch_event()
* Wed 24 Jun 2015 04:13:34 PM JST
proxy = KeyBindService.get_instance().get_candidate_proxy()

* Wed 24 Jun 2015 04:13:38 PM JST
proxy.add_candidate(emacs_candidate)

* Wed 24 Jun 2015 04:14:33 PM JST
from lab.xahk.eventloop import EventLoop

* Wed 24 Jun 2015 04:14:36 PM JST
EventLoop.get_instance().dispatch_event()
* Wed 24 Jun 2015 04:14:53 PM JST

* Wed 24 Jun 2015 04:14:53 PM JST

* Wed 24 Jun 2015 04:14:53 PM JST
        print('DEBUG-1-keybind_service.py')

* Wed 24 Jun 2015 09:39:10 PM JST
list_listeners
* Wed 24 Jun 2015 09:40:38 PM JST
from lab.xahk.binder.input_listener_observer import InputListenerObserver
from lab.xahk.binder.keybind_service_observer import KeyBindServiceObserver
from lab.xahk.binder.keybind_service import KeyBindService

from lab.xahk.accelerator import Accelerator
from lab.xahk.windowspec import WindowWMClassSpec
from lab.xahk.binder.candidate import Candidate

from lab.xahk.binder.input_event_handler import InputEventHandler


class DebugInputEventHandler(InputEventHandler):
    def on_down(self, event):
        print('DEBUG on_down')

    def on_up(self, event):
        print('DEBUG on_up')


class DebugInputListenerObserver(InputListenerObserver):
    def on_registered_accelerator(self, accelerator, handler):
        print('{}, {}'.format(accelerator, handler))

    def on_unregistered_accelerator(self, accelerator):
        print('{}'.format(accelerator))


class DebugKeyBindServiceObserver(KeyBindServiceObserver):
    def __init__(self, ):
        r"""
        """
        self._observer = DebugInputListenerObserver()
        for listener in KeyBindService.get_instance().list_listeners():
            listener.add_observer(self._observer)

    def on_created_listener(self, listener):
        listener.add_observer(self._observer)


emacs_candidate = Candidate(WindowWMClassSpec('emacs'))
emacs_candidate.register_candidate_accelerator(
    Accelerator(24), DebugInputEventHandler())

proxy = KeyBindService.get_instance().get_candidate_proxy()
proxy.add_candidate(emacs_candidate)

listeners = proxy.list_listeners()


from lab.xahk.eventloop import EventLoop
EventLoop.get_instance().dispatch_event()

* Wed 24 Jun 2015 09:42:27 PM JST
from lab.xahk.commons.display import get_display
* Wed 24 Jun 2015 09:42:31 PM JST
c = get_display()
* Wed 24 Jun 2015 09:42:40 PM JST
KeyboardGrab?
* Wed 24 Jun 2015 09:46:01 PM JST

* Wed 24 Jun 2015 09:46:01 PM JST

* Wed 24 Jun 2015 09:46:01 PM JST
                print(eve)

* Wed 24 Jun 2015 09:46:12 PM JST
from lab.xahk.eventloop import EventLoop
* Wed 24 Jun 2015 09:46:40 PM JST
from lab.xahk.commons.display import get_display
c = get_display()
* Wed 24 Jun 2015 09:47:09 PM JST
c.core.GrabKeyboard(False, 482, 0, 1,1)
* Wed 24 Jun 2015 09:47:33 PM JST
from lab.xahk.eventloop import EventLoop
* Wed 24 Jun 2015 09:47:52 PM JST
EventLoop.get_instance().dispatch_event()
* Wed 24 Jun 2015 09:52:55 PM JST
from lab.xahk.eventloop import EventLoop
EventLoop.get_instance().dispatch_event()

* Wed 24 Jun 2015 09:54:17 PM JST
from lab.xahk.commons.display import get_display
* Wed 24 Jun 2015 09:54:18 PM JST
from lab.xahk.commons.display import get_display
c = get_display()

* Wed 24 Jun 2015 09:54:47 PM JST
from lab.xahk.commons.display import get_display
from lab.xahk.eventloop import EventLoop
c = get_display()
c.core.GrabKeyboard(True, 482, 0, 1,1)

* Wed 24 Jun 2015 09:55:11 PM JST
c.flush()
* Wed 24 Jun 2015 09:55:27 PM JST

* Wed 24 Jun 2015 09:55:27 PM JST

* Wed 24 Jun 2015 09:55:27 PM JST
def tes():

* Wed 24 Jun 2015 09:55:27 PM JST
def tes():

* Wed 24 Jun 2015 09:55:27 PM JST
def tes():
    c.flush()

* Wed 24 Jun 2015 09:55:30 PM JST
from lab.xahk.commons.display import get_display
from lab.xahk.eventloop import EventLoop
c = get_display()
c.core.GrabKeyboard(True, 482, 0, 1,1)

* Wed 24 Jun 2015 09:55:37 PM JST
EventLoop.get_instance().dispatch_event()
* Wed 24 Jun 2015 09:57:03 PM JST
c = get_display()
c.core.GrabKeyboard(True, 482, 0, 1,1)

* Wed 24 Jun 2015 09:57:27 PM JST
~/.emacs.d/var_e/junk/
* Wed 24 Jun 2015 10:29:53 PM JST
Time                      
* Wed 24 Jun 2015 10:30:56 PM JST
from lab.xahk.commons.display import get_display
* Wed 24 Jun 2015 10:32:44 PM JST

* Wed 24 Jun 2015 10:32:46 PM JST
display
* Wed 24 Jun 2015 10:32:46 PM JST
commons.display
* Wed 24 Jun 2015 10:33:51 PM JST
from lab.xahk.event_dispatcher import EventDispatcher

* Wed 24 Jun 2015 10:34:05 PM JST
from lab.xahk.eventloop import EventLoop
from lab.xahk.event_dispatcher import EventDispatcher

* Wed 24 Jun 2015 10:34:14 PM JST

* Wed 24 Jun 2015 10:34:14 PM JST

* Wed 24 Jun 2015 10:34:14 PM JST
from lab.xahk.commons.display import get_display

* Wed 24 Jun 2015 10:34:19 PM JST
object
* Wed 24 Jun 2015 10:35:04 PM JST
KeyPressEvent, KeyReleaseEvent
* Wed 24 Jun 2015 10:36:08 PM JST
_accelerators
* Wed 24 Jun 2015 10:36:50 PM JST
Accelerator
* Wed 24 Jun 2015 10:38:21 PM JST
root = self._display.get_setup().roots[0].root
* Wed 24 Jun 2015 10:38:29 PM JST
root = 
* Wed 24 Jun 2015 10:38:35 PM JST

* Wed 24 Jun 2015 10:38:35 PM JST

* Wed 24 Jun 2015 10:38:36 PM JST
        root = self._display.get_setup().roots[0].root

* Wed 24 Jun 2015 10:38:38 PM JST
root
* Wed 24 Jun 2015 10:39:24 PM JST
Time.CurrentTime
* Wed 24 Jun 2015 10:39:31 PM JST
        try:
            cookie.check()
        except StandardError as _err:
            # TODO: (Atami) [2015/06/24]
            raise _err

* Wed 24 Jun 2015 10:41:26 PM JST

* Wed 24 Jun 2015 10:41:26 PM JST

* Wed 24 Jun 2015 10:41:26 PM JST
from lab.xahk.commons.display import get_display

* Wed 24 Jun 2015 10:41:34 PM JST
from lab.xahk.eventloop import EventLoop
* Wed 24 Jun 2015 10:42:06 PM JST
EventLoop.get_instance().add_event_dispatcher(self)
* Wed 24 Jun 2015 10:43:15 PM JST
accelerators or [Accelerator(24, 0), ]
* Wed 24 Jun 2015 10:49:03 PM JST
KeyboardLock(get_display())
* Wed 24 Jun 2015 10:51:32 PM JST
UngrabKeyboardChecked
* Wed 24 Jun 2015 10:59:21 PM JST
f
* Wed 24 Jun 2015 10:59:21 PM JST
Lse.f
* Wed 24 Jun 2015 11:00:07 PM JST
start_locking
* Wed 24 Jun 2015 11:00:38 PM JST
KeyboardLock(get_display())
* Wed 24 Jun 2015 11:07:27 PM JST
cookie = 
* Wed 24 Jun 2015 11:07:45 PM JST
self._display.flush()
* Wed 24 Jun 2015 11:07:56 PM JST
cookie = 
* Wed 24 Jun 2015 11:12:03 PM JST
self._stop_keys
* Wed 24 Jun 2015 11:12:10 PM JST
Accelerator(event.detail, event.state) in self._stop_keys
* Wed 24 Jun 2015 11:13:36 PM JST

* Wed 24 Jun 2015 11:13:36 PM JST

* Wed 24 Jun 2015 11:13:36 PM JST
        self._is_locking = True

* Wed 24 Jun 2015 11:13:39 PM JST
self._is_locking = True
* Wed 24 Jun 2015 11:13:42 PM JST
True
* Wed 24 Jun 2015 11:16:29 PM JST
        # if self._lock is None:
        #     self._lock = KeyboardLock(get_display())

* Wed 24 Jun 2015 11:19:13 PM JST

* Wed 24 Jun 2015 11:19:13 PM JST

* Wed 24 Jun 2015 11:19:13 PM JST
        print('DEBUG-1-keyboard_lock.py')

* Wed 24 Jun 2015 11:19:29 PM JST
KeyReleaseEvent
* Wed 24 Jun 2015 11:23:22 PM JST
ModMask
* Wed 24 Jun 2015 11:25:47 PM JST
self.
* Wed 24 Jun 2015 11:27:46 PM JST

* Wed 24 Jun 2015 11:27:46 PM JST

* Wed 24 Jun 2015 11:27:46 PM JST
        self._stop_keys = set(accelerators or [Accelerator(24, 0), ])

* Wed 24 Jun 2015 11:33:45 PM JST
Accelerator(event.detail, event.state)
* Wed 24 Jun 2015 11:34:58 PM JST
ModMask.Lock
* Wed 24 Jun 2015 11:38:14 PM JST
Mod2
* Thu 25 Jun 2015 01:20:26 AM JST
binder/
* Thu 25 Jun 2015 01:20:45 AM JST
binder.
* Thu 25 Jun 2015 01:21:22 AM JST
Bind
* Thu 25 Jun 2015 01:21:25 AM JST
Bind
* Thu 25 Jun 2015 01:21:32 AM JST
bind_
* Thu 25 Jun 2015 01:21:55 AM JST
bind_
* Thu 25 Jun 2015 01:21:58 AM JST
Bind
* Thu 25 Jun 2015 01:22:02 AM JST
Bind
* Thu 25 Jun 2015 01:22:22 AM JST
bind_
* Thu 25 Jun 2015 01:22:40 AM JST
bind_
* Thu 25 Jun 2015 01:50:41 AM JST
key
* Thu 25 Jun 2015 01:50:45 AM JST
key_listener
* Thu 25 Jun 2015 01:50:48 AM JST
key
* Thu 25 Jun 2015 01:51:05 AM JST
from lab.xahk.binder.input_listener import InputListener
* Thu 25 Jun 2015 01:51:20 AM JST
class MouseListener(InputListener):
    """Class MouseListener
    """
    # Attributes:
    
    # Operations
    def can_accept_event(self, event):
        """function can_accept_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_mouse_event(self, event):
        """function on_mouse_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __register_accelerator_impl(self, accelerator):
        """function register_accelerator_impl
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __register_accelerators_impl(self, accelerators):
        """function register_accelerators_impl
        
        accelerators: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __unregister_accelerator_impl(self, accelerator):
        """function unregister_accelerator_impl
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __unregister_accelerators_impl(self, accelerators):
        """function unregister_accelerators_impl
        
        accelerators: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Thu 25 Jun 2015 01:51:41 AM JST
None # should raise NotImplementedError()
* Thu 25 Jun 2015 01:51:56 AM JST
        if not self.can_accept_event(event):
            print('DEBUG-1-key_listener.py')
            return
        cmd = self._accelerator_map.get(event.get_accelerator(), None)
        if cmd is None:
            print('DEBUG-2-key_listener.py')
            # TODO: (Atami) [2015/06/19]
            # missing call
            return
        cmd.on_event(event)

* Thu 25 Jun 2015 01:52:21 AM JST

* Thu 25 Jun 2015 01:52:21 AM JST

* Thu 25 Jun 2015 01:52:21 AM JST
            print('DEBUG-2-key_listener.py')

* Thu 25 Jun 2015 01:52:22 AM JST

* Thu 25 Jun 2015 01:52:22 AM JST

* Thu 25 Jun 2015 01:52:22 AM JST
            print('DEBUG-1-key_listener.py')

* Thu 25 Jun 2015 01:52:32 AM JST
self._window.grab_key(accelerator)
* Thu 25 Jun 2015 01:53:14 AM JST
GrabButton
* Thu 25 Jun 2015 01:54:00 AM JST
accelerator
* Thu 25 Jun 2015 01:56:18 AM JST
owner_events, event_mask, pointer_mode,
                    keyboard_mode, confine_to, cursor, button, modifiers
* Thu 25 Jun 2015 01:57:04 AM JST
owner_events, event_mask, pointer_mode,
                    keyboard_mode, confine_to, cursor, button, modifiers
* Thu 25 Jun 2015 01:57:19 AM JST
        return self.display.core.GrabButton(
            owner_events, self.id, event_mask, pointer_mode,
            keyboard_mode, confine_to, cursor, button, modifiers)

* Thu 25 Jun 2015 01:57:37 AM JST
    def grab_button(self, owner_events, event_mask, pointer_mode,
                    keyboard_mode, confine_to, cursor, button, modifiers):
        r"""SUMMARY
        
        grab_button(owner_events, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers)
        
        @Arguments:
        - `owner_events`:
        - `event_mask`:
        - `pointer_mode`:
        - `keyboard_mode`:
        - `confine_to`:
        - `cursor`:
        - `button`:
        - `modifiers`:
        
        @Return:

        @Error:
        """
        return self.display.core.GrabButton(
            owner_events, self.id, event_mask, pointer_mode,
            keyboard_mode, confine_to, cursor, button, modifiers)

    def grab_button_checked(self, owner_events, event_mask, pointer_mode,
                            keyboard_mode, confine_to, cursor, button,
                            modifiers):
        r"""SUMMARY
        
        grab_button_checked()
        
        @Return:

        @Error:
        """
        return self.display.core.GrabButtonChecked(
            owner_events, self.id, event_mask, pointer_mode,
            keyboard_mode, confine_to, cursor, button, modifiers)
        

* Thu 25 Jun 2015 01:59:04 AM JST
return self.display.core.UngrabButton(button, self.id, modifiers)
* Thu 25 Jun 2015 01:59:20 AM JST
    def ungrab_button(self, button, modifiers):
        r"""SUMMARY
        
        ungrab_button(button, modifiers)
        
        @Arguments:
        - `button`:
        - `modifiers`:
        
        @Return:

        @Error:
        """
        return self.display.core.UngrabButton(button, self.id, modifiers)

    def ungrab_button_checked(self, button, modifiers):
        r"""SUMMARY
        
        ungrab_button_checked(button, modifiers)
        
        @Arguments:
        - `button`:
        - `modifiers`:
        
        @Return:

        @Error:
        """
        return self.display.core.UngrabButtonChecked(
            button, self.id, modifiers)


* Thu 25 Jun 2015 02:01:06 AM JST
ButtonPress
* Thu 25 Jun 2015 02:03:03 AM JST
    def grab_button(self, accelerator):
        r"""SUMMARY
        
        grab_button(accelerator)
        
        @Arguments:
        - `accelerator`:
        
        @Return:

        @Error:
        """
        self.window.grab_button(
            False, EventMask.ButtonPress|EventMask.ButtonRelease,
            GrabMode.Async, GrabMode.Async, 0, 0, accelerator.get_code(),
            accelerator.get_modifiers())


* Thu 25 Jun 2015 02:03:15 AM JST
cookies, append = ListDotAvoider().append
* Thu 25 Jun 2015 02:04:10 AM JST
        
* Thu 25 Jun 2015 02:04:31 AM JST
        for cookie in cookies:
            cookie.check()

* Thu 25 Jun 2015 02:05:15 AM JST
self.display.flush()
* Thu 25 Jun 2015 02:05:31 AM JST
    def grab_button(self, accelerator):
        r"""SUMMARY

        grab_button(accelerator)

        @Arguments:
        - `accelerator`:

        @Return:

        @Error:
        """
        self.window.grab_button(
            False, EventMask.ButtonPress|EventMask.ButtonRelease,
            GrabMode.Async, GrabMode.Async, 0, 0, accelerator.get_code(),
            accelerator.get_modifiers())
        self.display.flush()

    def grab_buttons(self, accelerators):
        r"""SUMMARY

        grab_button(accelerator)

        @Arguments:
        - `accelerator`:

        @Return:

        @Error:
        """
        cookies, append = ListDotAvoider().append
        for accelerator in accelerators:
            append(self.window.grab_button_checked(
                False, EventMask.ButtonPress|EventMask.ButtonRelease,
                GrabMode.Async, GrabMode.Async, 0, 0, accelerator.get_code(),
                accelerator.get_modifiers()))
        for cookie in cookies:
            cookie.check()


* Thu 25 Jun 2015 02:06:00 AM JST
        self.window.ungrab_key(
            accelerator.get_code(), accelerator.get_modifiers())
        self.display.flush()

* Thu 25 Jun 2015 02:06:48 AM JST
        cookies, append = ListDotAvoider().append
        for accelerator in accelerators:
            append(self.window.ungrab_key_checked(
                accelerator.get_code(), accelerator.get_modifiers()))
        for cookie in cookies:
            cookie.check()

* Thu 25 Jun 2015 02:07:08 AM JST
    def ungrab_button(self, accelerator):
        r"""SUMMARY

        ungrab_button(accelerator)

        @Arguments:
        - `accelerator`:

        @Return:

        @Error:
        """
        self.window.ungrab_button(
            accelerator.get_code(), accelerator.get_modifiers())
        self.display.flush()

    def ungrab_buttons(self, accelerators):
        r"""SUMMARY

        ungrab_buttons(accelerators)

        @Arguments:
        - `accelerators`:

        @Return:

        @Error:
        """
        cookies, append = ListDotAvoider().append
        for accelerator in accelerators:
            append(self.window.ungrab_button_checked(
                accelerator.get_code(), accelerator.get_modifiers()))
        for cookie in cookies:
            cookie.check()


* Thu 25 Jun 2015 02:09:57 AM JST
return None # should raise NotImplementedError()
* Thu 25 Jun 2015 02:10:11 AM JST
return None # should raise NotImplementedError()
* Thu 25 Jun 2015 02:10:16 AM JST
grab_
* Thu 25 Jun 2015 02:10:23 AM JST
return None # should raise NotImplementedError()
* Thu 25 Jun 2015 02:11:15 AM JST
from observer import Observable

from lab.xahk.binder.candidate_proxy_observer import CandidateProxyObserver
from lab.xahk.binder.candidate_proxy import CandidateProxy
from lab.xahk.binder.key_listener import KeyListener
from lab.xahk.desktop_manager_observer import DesktopManagerObserver
from lab.xahk.desktop_manager import DesktopManager


class KeyBindService(Observable, CandidateProxyObserver, DesktopManagerObserver):
    """Class KeyBindService
    """
    # Attributes:
    _instance = None

    def __init__(self, proxy):
        r"""

        @Arguments:
        - `proxy`:
        """
        Observable.__init__(self)
        self._proxy = proxy
        self._proxy.add_observer(self)
        self._listeners = []
        self._is_binding = False
        DesktopManager.get_instance().add_observer(self)
        for window in DesktopManager.get_instance().list_windows():
            self.on_created_window(window)
        self.start_binding()

    # Operations
    @classmethod
    def get_instance(cls):
        """function get_instance

        returns
        """
        if cls._instance is None:
            cls._instance = cls(CandidateProxy())
        return cls._instance

    def start_binding(self):
        """function start_binding

        returns
        """
        if self.is_binding():
            return
        for listener in self._listeners:
            listener.start_listening()
        self._is_binding = True
        self.update_binding()

    def stop_binding(self):
        """function stop_binding

        returns
        """
        if not self.is_binding():
            return
        self._clear_listeners_accelerators()
        for listener in self._listeners:
            listener.stop_listening()
        self._is_binding = False

    def is_binding(self):
        """function is_binding

        returns
        """
        return self._is_binding

    def on_created_window(self, window):
        """function on_created_window

        window:

        returns
        """
        listener = KeyListener(window)
        if self.is_binding():
            self._proxy.build_listener(listener)
            listener.start_listening()
        self._listeners.append(listener)
        for observer in self._observers:
            observer.on_created_listener(listener)

    def on_destroyed_window(self, window):
        """function on_destroyed_window

        window:

        returns
        """
        lis = None
        for listener in self._listeners[:]:
            if listener.get_window() == window:
                lis = listener
                break
        self._listeners.remove(lis)
        for observer in self._observers:
            observer.on_destroyed_listener(lis)

    def _clear_listeners_accelerators(self):
        """function clear_listeners_accelerators

        returns
        """
        for listener in self._listeners:
            listener.clear_accelerators()

    def update_binding(self):
        """function update_binding

        returns
        """
        self._clear_listeners_accelerators()
        for listener in self.list_listeners():
            self._proxy.build_listener(listener)

    def list_listeners(self):
        """function list_listeners

        returns
        """
        return self._listeners

    def on_changed_candidate(self):
        """function on_changed_candidate

        returns
        """
        self.update_binding()

    def get_candidate_proxy(self):
        """function get_candidate_proxy

        returns
        """
        return self._proxy

    def set_candidate_proxy(self, proxy):
        """function set_candidate_proxy

        proxy:

        returns
        """
        if self._proxy is not None:
            self._proxy.remove_observer(self)
        self._proxy = proxy
        self._proxy.add_observer(proxy)
        self.on_changed_candidate()

* Thu 25 Jun 2015 02:11:22 AM JST
key_listener
* Thu 25 Jun 2015 02:11:25 AM JST
key
* Thu 25 Jun 2015 02:11:38 AM JST
Key
* Thu 25 Jun 2015 02:11:41 AM JST
Key
* Thu 25 Jun 2015 02:11:58 AM JST
Key
* Thu 25 Jun 2015 02:41:29 AM JST
proxy
* Thu 25 Jun 2015 02:42:25 AM JST
proxy
* Thu 25 Jun 2015 02:58:11 AM JST
proxy 
* Thu 25 Jun 2015 02:58:31 AM JST
        self._listeners = []
        self._is_binding = False
        self._proxy = None
        self.set_candidate_proxy(proxy)

* Thu 25 Jun 2015 02:58:44 AM JST

* Thu 25 Jun 2015 02:58:44 AM JST

* Thu 25 Jun 2015 02:58:44 AM JST
        # self._proxy.add_observer(self)

* Thu 25 Jun 2015 02:59:35 AM JST
EventLoop.get_instance().dispatch_event()
* Thu 25 Jun 2015 02:59:53 AM JST

* Thu 25 Jun 2015 02:59:53 AM JST

* Thu 25 Jun 2015 02:59:53 AM JST
./candidate_proxy.py:16:from lab.xahk.binder.bind_candidate_observer import BindCandidateObserver

* Thu 25 Jun 2015 04:02:40 AM JST
class ButtonIndex(_IntEnum):
    r"""ButtonIndex

    ButtonIndex is a _IntEnum.
    Responsibility:
    """
    Left = 1
    Middle = 2
    Right = 3
    WheelUp = 4
    WheelDown = 5

* Thu 25 Jun 2015 04:02:54 AM JST
from enum import IntEnum as _IntEnum
* Thu 25 Jun 2015 04:03:07 AM JST

* Thu 25 Jun 2015 04:03:09 AM JST
key
* Thu 25 Jun 2015 04:03:12 AM JST
Key
* Thu 25 Jun 2015 04:04:27 AM JST
MIDDLE_BUTTON_ACCE = Accelerator(ButtonIndex.Middle, )
* Thu 25 Jun 2015 04:04:45 AM JST
global_button_candidate = BindCandidate(WindowAnySpec())
* Thu 25 Jun 2015 04:04:50 AM JST
Bind
* Thu 25 Jun 2015 04:05:16 AM JST
emacs_candidate.register_candidate_accelerator(
    Accelerator(38), DebugInputEventHandler())

* Thu 25 Jun 2015 04:05:21 AM JST
global_button_candidate
* Thu 25 Jun 2015 04:05:34 AM JST
Accelerator(ButtonIndex.Middle, )
* Thu 25 Jun 2015 04:06:06 AM JST
mproxy = MouseBindService.get_instance().get_candidate_proxy()

print(mproxy._candidates)


* Thu 25 Jun 2015 04:06:26 AM JST
global_button_candidate
* Thu 25 Jun 2015 04:11:19 AM JST
BadAccess
* Thu 25 Jun 2015 04:11:26 AM JST
AccessError
* Thu 25 Jun 2015 04:11:47 AM JST
BadAccess
* Thu 25 Jun 2015 04:17:18 AM JST
27262979
* Thu 25 Jun 2015 04:18:03 AM JST
c.core.GrabButton(False, 27262979, )
* Thu 25 Jun 2015 04:19:57 AM JST
c.core.GrabButtonChecked(False, 27262979, 4|8, 1,1,0,0, 2, 0).check()
* Thu 25 Jun 2015 04:20:05 AM JST
from lab.xahk.commons.display import get_display
* Thu 25 Jun 2015 04:20:25 AM JST
from lab.xahk.commons.display import get_display
* Thu 25 Jun 2015 04:20:32 AM JST
c = get_display()
* Thu 25 Jun 2015 04:20:36 AM JST
c.core.GrabButtonChecked(False, 27262979, 4|8, 1,1,0,0, 2, 0).check()
* Thu 25 Jun 2015 04:21:38 AM JST
c.core.GrabButtonChecked(False, , 4|8, 1,1,0,0, 2, 0).check()
* Thu 25 Jun 2015 04:21:57 AM JST
from lab.xahk.desktop_manager import DesktopManager
* Thu 25 Jun 2015 04:22:19 AM JST
62914561
* Thu 25 Jun 2015 04:32:11 AM JST
DesktopManager.get_instance().list_windows()
* Thu 25 Jun 2015 04:32:21 AM JST
54525974
* Thu 25 Jun 2015 04:32:44 AM JST
Checked
* Thu 25 Jun 2015 04:33:58 AM JST
54525974
* Thu 25 Jun 2015 04:35:15 AM JST
62914561
* Thu 25 Jun 2015 04:37:21 AM JST
False, 
* Thu 25 Jun 2015 04:37:23 AM JST
0, 
* Thu 25 Jun 2015 04:37:24 AM JST
0,0, 
* Thu 25 Jun 2015 04:37:24 AM JST
1,0,0, 
* Thu 25 Jun 2015 04:37:24 AM JST
1,1,0,0, 
* Thu 25 Jun 2015 04:37:25 AM JST
8, 1,1,0,0, 
* Thu 25 Jun 2015 04:37:25 AM JST
4|8, 1,1,0,0, 
* Thu 25 Jun 2015 04:37:51 AM JST
62914561, 
* Thu 25 Jun 2015 04:51:12 AM JST
False
* Thu 25 Jun 2015 06:51:44 AM JST
event.event, event.detail, event.state
* Thu 25 Jun 2015 06:59:05 AM JST
from lab.xahk.commons.display import get_display
c = get_display()

* Thu 25 Jun 2015 06:59:42 AM JST
self._display.core.QueryTree(event.child).reply().children
* Thu 25 Jun 2015 06:59:46 AM JST
list(self._display.core.QueryTree(event.child).reply().children)
* Thu 25 Jun 2015 07:01:04 AM JST
from lab.xahk.desktop_manager import DesktopManager
DesktopManager.get_instance().list_windows()

* Thu 25 Jun 2015 07:11:32 AM JST
54525974
* Thu 25 Jun 2015 07:11:37 AM JST
62914561
* Thu 25 Jun 2015 08:00:36 AM JST
class KeyCommand(InputCommand):
    r"""KeyCommand

    KeyCommand is a ImputCommand.
    Responsibility:
    """
    __slots__ = ('key', )

    def __init__(self, accelerator):
        r"""

        @Arguments:
        - `accelerator`:
        """
        super(KeyCommand, self).__init__()
        self.key = X11Key(accelerator.get_code(), accelerator.get_modifiers())

    def on_down(self, event):
        r"""SUMMARY

        on_down(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        self.key.press(event.window.get_id())
        self.key.display.flush()

    def on_up(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        self.key.release(event.window.get_id())
        self.key.display.flush()

    def __str__(self):
        return ('{0}({1.code}, {1.modifiers})'
                .format(super(KeyCommand, self).__str__(), self.key))

* Thu 25 Jun 2015 08:00:44 AM JST
Key
* Thu 25 Jun 2015 08:00:50 AM JST

* Thu 25 Jun 2015 08:00:50 AM JST

* Thu 25 Jun 2015 08:00:50 AM JST
    __slots__ = ('key', )

* Thu 25 Jun 2015 08:01:17 AM JST

* Thu 25 Jun 2015 08:01:17 AM JST

* Thu 25 Jun 2015 08:01:17 AM JST
                .format(super(KeyCommand, self).__str__(), self.key))

* Thu 25 Jun 2015 08:03:04 AM JST
F
* Thu 25 Jun 2015 08:03:10 AM JST
Shift
* Thu 25 Jun 2015 08:03:18 AM JST
F1_ALT_KEY_ACCE
* Thu 25 Jun 2015 08:03:20 AM JST

* Thu 25 Jun 2015 08:08:02 AM JST
        print('Warning')
        print('Restarting!!')
        import sys, os
        python = sys.executable
        os.execl(python, python, *sys.argv)

* Thu 25 Jun 2015 08:57:16 PM JST

* Thu 25 Jun 2015 08:57:16 PM JST

* Thu 25 Jun 2015 08:57:16 PM JST
    parser.print_usage()    r"""Main function."""

* Thu 25 Jun 2015 08:57:38 PM JST
    parser = _predef_options()
    opts = parser.parse_args()

* Thu 25 Jun 2015 08:57:44 PM JST
    parser = _predef_options()
    opts = parser.parse_args()

* Thu 25 Jun 2015 08:58:03 PM JST
add_argument('')
* Thu 25 Jun 2015 08:58:05 PM JST
parser
* Thu 25 Jun 2015 08:58:09 PM JST
add_argument
* Thu 25 Jun 2015 09:01:03 PM JST
dest
* Fri 26 Jun 2015 12:26:49 AM JST
from lab.xahk.commons.display import get_display
* Fri 26 Jun 2015 12:27:19 AM JST
c.core.GrabPointer(False, 482, )
* Fri 26 Jun 2015 12:27:31 AM JST
xproto
* Fri 26 Jun 2015 12:28:00 AM JST
EM.ButtonPress
* Fri 26 Jun 2015 12:28:33 AM JST
Button
* Fri 26 Jun 2015 12:29:29 AM JST
from lab.xahk.eventloop import EventLoop
EventLoop.get_instance().dispatch_event()

* Fri 26 Jun 2015 12:29:33 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 26 Jun 2015 12:30:19 AM JST
Key
* Fri 26 Jun 2015 12:30:22 AM JST
Key
* Fri 26 Jun 2015 12:30:28 AM JST
ButtonPressEvent, ButtonReleaseEvent
* Fri 26 Jun 2015 12:31:44 AM JST
from lab.xahk.commons.display import get_display
c=get_display()

* Fri 26 Jun 2015 12:31:52 AM JST
from xcb import xproto

* Fri 26 Jun 2015 12:31:55 AM JST
from xcb.xproto import EventMask as EM

* Fri 26 Jun 2015 12:31:57 AM JST
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion

* Fri 26 Jun 2015 12:32:01 AM JST
c.core.GrabPointer(False, 482, mask, 1,1,0,0,0)
c.flush()

* Fri 26 Jun 2015 12:32:05 AM JST
from lab.xahk.eventloop import EventLoop
EventLoop.get_instance().dispatch_event()

* Fri 26 Jun 2015 12:33:24 AM JST
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion
* Fri 26 Jun 2015 12:33:37 AM JST
from lab.xahk.commons.display import get_display
c=get_display()
from xcb import xproto
from xcb.xproto import EventMask as EM

* Fri 26 Jun 2015 12:33:44 AM JST
Button1Motion
* Fri 26 Jun 2015 12:33:49 AM JST
Button2Motion
* Fri 26 Jun 2015 12:33:55 AM JST
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion|EM.Button1Motion|EM.Button2Motion
* Fri 26 Jun 2015 12:34:04 AM JST
c.core.GrabPointer(False, 482, mask, 1,1,0,0,0)
c.flush()
from lab.xahk.eventloop import EventLoop

* Fri 26 Jun 2015 12:34:09 AM JST
EventLoop.get_instance().dispatch_event()

* Fri 26 Jun 2015 12:34:28 AM JST
event.event
* Fri 26 Jun 2015 12:42:00 AM JST
from lab.xahk.commons.display import get_display
c=get_display()
from xcb import xproto
from xcb.xproto import EventMask as EM
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion|EM.Button1Motion|EM.Button2Motion
c.core.GrabPointer(False, 482, mask, 1,1,0,0,0)
c.flush()
from lab.xahk.eventloop import EventLoop

* Fri 26 Jun 2015 12:42:04 AM JST
EventLoop.get_instance().dispatch_event()

* Fri 26 Jun 2015 04:18:56 AM JST
xproto
* Fri 26 Jun 2015 04:18:57 AM JST
import xproto
* Fri 26 Jun 2015 04:18:57 AM JST
xcb import xproto
* Fri 26 Jun 2015 04:18:57 AM JST
from xcb import xproto
* Fri 26 Jun 2015 04:55:59 AM JST
c.core.SendEvent(True, 482, )
* Fri 26 Jun 2015 04:56:49 AM JST
.SendEvent(True, 482, EM.ButtonPress, buf.getvalue())
* Fri 26 Jun 2015 04:59:17 AM JST
buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 482, 0, 0, 0, 0, 0, 0, 0))
* Fri 26 Jun 2015 05:00:25 AM JST
buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 482, 0, 0, 0, 0, 0, 0, 0))
* Fri 26 Jun 2015 05:01:26 AM JST
from lab.xahk.desktop_manager import DesktopManager
DesktopManager.get_instance().list_windows()

* Fri 26 Jun 2015 05:01:36 AM JST
buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 482, 0, 0, 0, 0, 0, 0, 0))
* Fri 26 Jun 2015 05:01:45 AM JST
54525974
* Fri 26 Jun 2015 05:04:11 AM JST
54525974
* Fri 26 Jun 2015 05:06:52 AM JST
54525974
* Fri 26 Jun 2015 05:07:31 AM JST
54525974
* Fri 26 Jun 2015 05:10:17 AM JST
__pyfile = open('''/tmp/psss-temp.py''');exec(compile(__pyfile.read(), '''/tmp/psss-temp.py''', 'exec'));__pyfile.close()
__pyfile = open('''/tmp/psss-temp.py''');exec(compile(__pyfile.read(), '''/tmp/psss-temp.py''', 'exec'));__pyfile.close()
from xcb import xproto
import xcb
c=xcb.connect()
D c
D c.core
D c
c('xtest')
from xcb import xtest
D xtest
xtest.key
c(xtest.key)
test=c(xtest.key)
D test
test.FakeInput?
from xcb.xproto import EventMask as EM
test.FakeInput(EM.ButotnPress, 1, 0, 482, 0, 0, 0)
test.FakeInput(EM.ButtonPress, 1, 0, 482, 0, 0, 0)
c.flush()
from xcb.xproto import EventCode
from struct import pack
from StringIO import StringIO
buf=StringIO()
buf.write(pack('B', 4, 1, 0, 0, 482, 482, 0, 0, 0, 0, 0, 0, 0))
buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 482, 0, 0, 0, 0, 0, 0, 0))
buf.getvalue()
c
c.core.SendEvent?
EM
D c.core.SendEvent?
D c.core.SendEventD EM
D EM
c.core.SendEvent(True, 482, EM.ButtonPress, buf.getvalue())
c.flush()
D c.core
coo=c.core.SendEventChecked(True, 482, EM.ButtonPress, buf.getvalue())
coo.check()
coo=c.core.SendEventChecked(False, 482, EM.ButtonPress, buf.getvalue())
coo.check()
c.core.SendEventChecked(False, 482, EM.ButtonPress, buf.getvalue()).check()
his

In [43]: from lab.xahk.desktop_manager import DesktopManager
DesktopManager.get_instance().list_windows()


In [44]: Out[44]: 
[DesktopWindow(id=27262979, wmclass=['xfdesktop', 'Xfdesktop']),
 DesktopWindow(id=33554604, wmclass=['xfce4-notes', 'Xfce4-notes']),
 DesktopWindow(id=60817625, wmclass=['dia-normal', 'Dia-normal']),
 DesktopWindow(id=39845892, wmclass=['xfce4-terminal', 'Xfce4-terminal']),
 DesktopWindow(id=23163492, wmclass=['Thunar', 'Thunar']),
 DesktopWindow(id=62914561, wmclass=['Google-chrome ()', 'Google-chrome']),
 DesktopWindow(id=54525974, wmclass=['emacs', 'Emacs']),
 DesktopWindow(id=25165828, wmclass=['xfce4-panel', 'Xfce4-panel']),
 DesktopWindow(id=25165849, wmclass=['xfce4-panel', 'Xfce4-panel'])]

In [45]: 
In [45]: buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 54525974, 0, 0, 0, 0, 0, 0, 0))

In [46]: D buf
__doc__     buflist   isatty  readline   truncate  
__init__    close     len     readlines  write     
__iter__    closed    next    seek       writelines
__module__  flush     pos     softspace
buf         getvalue  read    tell    

In [47]: buf.buf
Out[47]: '\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

In [48]: buf.buf=''

In [49]: buf.buf
Out[49]: ''

In [50]: buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 54525974, 0, 0, 0, 0, 0, 0, 0))

In [51]: buf
Out[51]: <StringIO.StringIO instance at 0x9958d2c>

In [52]: buf.buf
Out[52]: ''

In [53]: buf=StringIO()

In [54]: buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 54525974, 0, 0, 0, 0, 0, 0, 0))

In [55]: buf.getvalue()
Out[55]: '\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

In [56]: c.core.SendEventChecked(True, 482, EM.ButtonPress, buf.getvalue()).check()

In [57]: c.core.SendEventChecked(True, 54525974, EM.ButtonPress, buf.getvalue()).check()

In [58]: buf=StringIO()

In [59]: buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 54525974, 0, 100, 100, 100, 100, 0, 0))

In [60]: buf.getvalue()
Out[60]: '\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00d\x00d\x00d\x00d\x00\x00\x00\x00\x00'

In [61]: c.core.SendEventChecked(True, 482, EM.ButtonPress, buf.getvalue()).check()

In [62]: buf=StringIO()

In [63]: buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 482, 0, 1000, 100, 1000, 100, 0, 0))

In [64]: c.core.SendEventChecked(True, 482, EM.ButtonPress, buf.getvalue()).check()

In [65]: c.core.SendEventChecked(True, 482, EM.ButtonPress, buf.getvalue()).check()

In [66]: buf=StringIO()

In [67]: buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 482, 0, 1500, 100, 1500, 100, 0, 0))

In [68]: c.core.SendEventChecked(True, 482, EM.ButtonPress, buf.getvalue()).check()

In [69]: his
__pyfile = open('''/tmp/psss-temp.py''');exec(compile(__pyfile.read(), '''/tmp/psss-temp.py''', 'exec'));__pyfile.close()
__pyfile = open('''/tmp/psss-temp.py''');exec(compile(__pyfile.read(), '''/tmp/psss-temp.py''', 'exec'));__pyfile.close()
from xcb import xproto
import xcb
c=xcb.connect()
D c
D c.core
D c
c('xtest')
from xcb import xtest
D xtest
xtest.key
c(xtest.key)
test=c(xtest.key)
D test
test.FakeInput?
from xcb.xproto import EventMask as EM
test.FakeInput(EM.ButotnPress, 1, 0, 482, 0, 0, 0)
test.FakeInput(EM.ButtonPress, 1, 0, 482, 0, 0, 0)
c.flush()
from xcb.xproto import EventCode
from struct import pack
from StringIO import StringIO
buf=StringIO()
buf.write(pack('B', 4, 1, 0, 0, 482, 482, 0, 0, 0, 0, 0, 0, 0))
buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 482, 0, 0, 0, 0, 0, 0, 0))
buf.getvalue()
c
c.core.SendEvent?
EM
D c.core.SendEvent?
D c.core.SendEventD EM
D EM
c.core.SendEvent(True, 482, EM.ButtonPress, buf.getvalue())
c.flush()
D c.core
coo=c.core.SendEventChecked(True, 482, EM.ButtonPress, buf.getvalue())
coo.check()
coo=c.core.SendEventChecked(False, 482, EM.ButtonPress, buf.getvalue())
coo.check()
c.core.SendEventChecked(False, 482, EM.ButtonPress, buf.getvalue()).check()
his
from lab.xahk.desktop_manager import DesktopManager
DesktopManager.get_instance().list_windows()
buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 54525974, 0, 0, 0, 0, 0, 0, 0))
D buf
buf.buf
buf.buf=''
buf.buf
buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 54525974, 0, 0, 0, 0, 0, 0, 0))
buf
buf.buf
buf=StringIO()
buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 54525974, 0, 0, 0, 0, 0, 0, 0))
buf.getvalue()
c.core.SendEventChecked(True, 482, EM.ButtonPress, buf.getvalue()).check()
c.core.SendEventChecked(True, 54525974, EM.ButtonPress, buf.getvalue()).check()
buf=StringIO()
buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 54525974, 0, 100, 100, 100, 100, 0, 0))
buf.getvalue()
c.core.SendEventChecked(True, 482, EM.ButtonPress, buf.getvalue()).check()
buf=StringIO()
buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 482, 0, 1000, 100, 1000, 100, 0, 0))
c.core.SendEventChecked(True, 482, EM.ButtonPress, buf.getvalue()).check()
c.core.SendEventChecked(True, 482, EM.ButtonPress, buf.getvalue()).check()
buf=StringIO()
buf.write(pack('BBH4I5HBx', 4, 1, 0, 0, 482, 482, 0, 1500, 100, 1500, 100, 0, 0))
c.core.SendEventChecked(True, 482, EM.ButtonPress, buf.getvalue()).check()
his

* Fri 26 Jun 2015 05:12:48 AM JST
self
* Fri 26 Jun 2015 05:13:11 AM JST
from lab.xahk.commons.display import get_display
c=get_display()
from xcb import xproto
from xcb.xproto import EventMask as EM
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion|EM.Button1Motion|EM.Button2Motion
c.core.GrabPointer(False, 482, mask, 1,1,0,0,0)
c.flush()
from lab.xahk.eventloop import EventLoop

* Fri 26 Jun 2015 05:13:19 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 26 Jun 2015 05:16:52 AM JST
pack('BBH4I5HBx', 4, 1, 0, 0, 482, 482, 0, 1600, 100, 1600, 100, 0, 0)
* Fri 26 Jun 2015 05:18:11 AM JST
54525974
* Fri 26 Jun 2015 05:19:12 AM JST
c.core.SendEvent(False, window, xcb.xproto.EventMask.ButtonPress, pack('BBH4I5HBx', 4, 3, 0, 0, 482, window, 0, 0, 0, 100, 100, 0, 1))
* Fri 26 Jun 2015 05:26:21 AM JST
54525974
* Fri 26 Jun 2015 05:26:34 AM JST
54525974
* Fri 26 Jun 2015 05:26:50 AM JST
.check()
* Fri 26 Jun 2015 05:27:13 AM JST
54525974
* Fri 26 Jun 2015 05:27:21 AM JST
54525974
* Fri 26 Jun 2015 05:28:45 AM JST
10
* Fri 26 Jun 2015 05:28:46 AM JST
165
* Fri 26 Jun 2015 05:30:47 AM JST
c.xtest.FakeInput(EventCode.ButtonPress, 1, 0, 482, 100, 100, 0)
* Fri 26 Jun 2015 05:31:15 AM JST
ButtonPress
* Fri 26 Jun 2015 05:31:15 AM JST
EventCode.ButtonPress
* Fri 26 Jun 2015 05:34:42 AM JST
(6, 1, 0, 482, 1600, 100, 0)
* Fri 26 Jun 2015 05:44:23 AM JST
54525974
* Fri 26 Jun 2015 05:47:42 AM JST
c.core.SendEvent(True, 482, EM.ButtonPress, pack('BBH4I5HBx', 4, 1, 0, 0, 482, 482, 0, 100, 1000, 100, 100, 0, 1))
* Fri 26 Jun 2015 05:47:49 AM JST
c.core.SendEvent(True, 482, EM.ButtonPress, pack('BBH4I5HBx', 4, 1, 0, 0, 482, 482, 0, 100, 1000, 100, 100, 0, 1))
* Fri 26 Jun 2015 05:52:42 AM JST
ButtonPress
* Fri 26 Jun 2015 06:05:09 AM JST

* Fri 26 Jun 2015 06:05:09 AM JST
EventDispatcher
* Fri 26 Jun 2015 06:05:11 AM JST
event_dispatcher
* Fri 26 Jun 2015 06:05:49 AM JST
ButtonM
* Fri 26 Jun 2015 06:06:37 AM JST
MotionNotifyEvent
* Fri 26 Jun 2015 06:06:45 AM JST
def
* Fri 26 Jun 2015 06:09:13 AM JST
check()
* Fri 26 Jun 2015 06:09:14 AM JST
0).check()
* Fri 26 Jun 2015 06:09:57 AM JST
event.
* Fri 26 Jun 2015 06:10:59 AM JST
isinstance(event, (ButtonPressEvent, ))
* Fri 26 Jun 2015 06:11:09 AM JST
            self._xtest.FakeInputChecked(
                4, event.detail, event.time, self._root,
                event.root_x, event.root_y, 0)

* Fri 26 Jun 2015 06:13:17 AM JST
add_event_dispatch
* Fri 26 Jun 2015 06:13:52 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 26 Jun 2015 06:14:54 AM JST
from lab.xahk.commons.display import get_display
c=get_display()
from xcb import xproto
from xcb.xproto import EventMask as EM
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion|EM.Button1Motion|EM.Button2Motion
c.core.GrabPointer(False, 482, mask, 1,1,0,0,0)
c.flush()
from lab.xahk.eventloop import EventLoop

* Fri 26 Jun 2015 06:15:21 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 26 Jun 2015 06:16:21 AM JST
            print(event)
            if isinstance(event, (ButtonPressEvent, ButtonReleaseEvent)):
                print('{0.event} {0.detail} {0.state} {0.root_x} {0.root_y} {0.event_x} {0.event_y}'.format(event))

* Fri 26 Jun 2015 06:16:59 AM JST

* Fri 26 Jun 2015 06:16:59 AM JST

* Fri 26 Jun 2015 06:16:59 AM JST
        if isinstance(event, (ButtonPressEvent, ButtonReleaseEvent)):

* Fri 26 Jun 2015 06:17:24 AM JST
from lab.xahk.commons.display import get_display
c=get_display()
from xcb import xproto
from xcb.xproto import EventMask as EM
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion|EM.Button1Motion|EM.Button2Motion
c.core.GrabPointer(False, 482, mask, 1,1,0,0,0)
c.flush()
from lab.xahk.eventloop import EventLoop

* Fri 26 Jun 2015 06:17:45 AM JST
EventLoop.get_instance().add_event_dispatcher(ButtonHandler(c))
* Fri 26 Jun 2015 06:17:51 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 26 Jun 2015 06:18:44 AM JST
print
* Fri 26 Jun 2015 06:20:34 AM JST
self._display.wait_for_event()
* Fri 26 Jun 2015 06:20:37 AM JST

* Fri 26 Jun 2015 06:20:37 AM JST

* Fri 26 Jun 2015 06:20:37 AM JST
            event = 

* Fri 26 Jun 2015 06:20:48 AM JST

* Fri 26 Jun 2015 06:20:48 AM JST

* Fri 26 Jun 2015 06:20:48 AM JST
EventLoop.get_instance().add_event_dispatcher(ButtonHandler(c))

* Fri 26 Jun 2015 06:21:11 AM JST
ButtonHandler(c)
* Fri 26 Jun 2015 06:21:14 AM JST

* Fri 26 Jun 2015 06:21:15 AM JST

* Fri 26 Jun 2015 06:21:15 AM JST
EventLoop.get_instance().add_event_dispatcher(ButtonHandler(c))

* Fri 26 Jun 2015 06:21:56 AM JST

* Fri 26 Jun 2015 06:21:56 AM JST

* Fri 26 Jun 2015 06:21:56 AM JST
c=get_display()

* Fri 26 Jun 2015 06:23:07 AM JST
from lab.xahk.commons.display import get_display
from xcb import xproto
from xcb.xproto import EventMask as EM
from lab.xahk.eventloop import EventLoop
c=get_display()
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion|EM.Button1Motion|EM.Button2Motion
c.core.GrabPointer(False, 482, mask, 1,1,0,0,0)
c.flush()
ButtonHandler(c)

* Fri 26 Jun 2015 06:23:18 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 26 Jun 2015 06:24:48 AM JST
from lab.xahk.commons.display import get_display
* Fri 26 Jun 2015 06:24:52 AM JST
c=get_display()
* Fri 26 Jun 2015 06:26:10 AM JST
from lab.xahk.commons.display import get_display
from xcb import xproto
from xcb.xproto import EventMask as EM
from lab.xahk.eventloop import EventLoop
c=get_display()
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion|EM.Button1Motion|EM.Button2Motion
c.core.GrabPointer(False, 482, mask, 1,1,0,0,0)
c.flush()
ButtonHandler(c)

* Fri 26 Jun 2015 06:26:15 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 26 Jun 2015 06:26:50 AM JST
from lab.xahk.commons.display import get_display
c=get_display()

* Fri 26 Jun 2015 06:27:19 AM JST
.check()
* Fri 26 Jun 2015 06:27:25 AM JST
.check()
* Fri 26 Jun 2015 06:27:36 AM JST
from lab.xahk.commons.display import get_display
c=get_display()
from xcb import xproto
from xcb.xproto import EventMask as EM
from lab.xahk.eventloop import EventLoop
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion|EM.Button1Motion|EM.Button2Motion
c.core.GrabPointer(False, 482, mask, 1,1,0,0,0)
c.flush()
ButtonHandler(c)

* Fri 26 Jun 2015 06:27:39 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 26 Jun 2015 06:28:42 AM JST
flus
* Fri 26 Jun 2015 06:28:43 AM JST
_display.flus
* Fri 26 Jun 2015 06:28:49 AM JST
self._xtest.conn.flush()
* Fri 26 Jun 2015 06:28:55 AM JST

* Fri 26 Jun 2015 06:28:55 AM JST

* Fri 26 Jun 2015 06:28:55 AM JST
            self._xtest.conn.flush()

* Fri 26 Jun 2015 06:28:59 AM JST

* Fri 26 Jun 2015 06:29:00 AM JST

* Fri 26 Jun 2015 06:29:00 AM JST
            self._xtest.conn.flush()

* Fri 26 Jun 2015 06:29:19 AM JST
from lab.xahk.commons.display import get_display
c=get_display()
from xcb import xproto
from xcb.xproto import EventMask as EM
from lab.xahk.eventloop import EventLoop
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion|EM.Button1Motion|EM.Button2Motion
c.core.GrabPointer(False, 482, mask, 1,1,0,0,0)
c.flush()
ButtonHandler(c)

* Fri 26 Jun 2015 06:29:24 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 26 Jun 2015 06:31:05 AM JST
from lab.xahk.commons.display import get_display
c=get_display()

* Fri 26 Jun 2015 06:31:24 AM JST
            self._xtest.FakeInput(
                4, event.detail, event.time, self._root,
                event.root_x, event.root_y, 0)

* Fri 26 Jun 2015 06:31:49 AM JST
            self._xtest.FakeInput(
                6, event.detail, event.time, self._root,
                event.root_x, event.root_y, 0)

* Fri 26 Jun 2015 06:32:42 AM JST
from lab.xahk.commons.display import get_display
c=get_display()
from xcb import xproto
from xcb.xproto import EventMask as EM
from lab.xahk.eventloop import EventLoop
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion|EM.Button1Motion|EM.Button2Motion
c.core.GrabPointer(False, 482, mask, 1,1,0,0,0)
c.flush()
ButtonHandler(c)

* Fri 26 Jun 2015 06:32:46 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 26 Jun 2015 06:34:14 AM JST
from lab.xahk.commons.display import get_display
c=get_display()

* Fri 26 Jun 2015 06:35:11 AM JST
from lab.xahk.commons.display import get_display
c=get_display()

* Fri 26 Jun 2015 06:36:36 AM JST
from lab.xahk.commons.display import get_display
c=get_display()
from xcb import xproto
from xcb.xproto import EventMask as EM
from lab.xahk.eventloop import EventLoop
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion|EM.Button1Motion|EM.Button2Motion
c.core.GrabPointer(False, 482, mask, 1,1,0,0,0)
c.flush()
ButtonHandler(c)

* Fri 26 Jun 2015 06:36:40 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 26 Jun 2015 06:38:16 AM JST
from lab.xahk.commons.display import get_display
c=get_display()

* Fri 26 Jun 2015 06:38:27 AM JST
c.core.GrabPointer
* Fri 26 Jun 2015 06:42:30 AM JST
time
* Fri 26 Jun 2015 06:42:31 AM JST
event.time
* Fri 26 Jun 2015 06:43:11 AM JST
from lab.xahk.commons.display import get_display
c=get_display()
from xcb import xproto
from xcb.xproto import EventMask as EM
from lab.xahk.eventloop import EventLoop
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion|EM.Button1Motion|EM.Button2Motion
c.core.GrabPointer(False, 482, mask, 1,1,0,0,0)
c.flush()
ButtonHandler(c)
EventLoop.get_instance().dispatch_event()

* Fri 26 Jun 2015 06:43:14 AM JST
EventLoop.get_instance().dispatch_event()

* Fri 26 Jun 2015 06:43:17 AM JST
EventLoop.get_instance().dispatch_event()
* Fri 26 Jun 2015 06:44:24 AM JST
from lab.xahk.commons.display import get_display
c=get_display()

* Fri 26 Jun 2015 06:44:53 AM JST
from lab.xahk.desktop_manager import DesktopManager
DesktopManager.get_instance().list_windows()

* Fri 26 Jun 2015 06:45:01 AM JST
62914561
* Fri 26 Jun 2015 06:45:24 AM JST
c.core.GrabPointer(False, 62914561, )
* Fri 26 Jun 2015 06:45:32 AM JST
from xcb.xproto import EventMask as EM
* Fri 26 Jun 2015 06:45:53 AM JST
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion|EM.Button1Motion|EM.Button2Motion
* Fri 26 Jun 2015 06:46:55 AM JST
c.core.GrabPointer(False, 62914561, mask,1,1,0,0,0)
* Fri 26 Jun 2015 06:47:10 AM JST
from lab.xahk.commons.display import get_display
c=get_display()

* Fri 26 Jun 2015 06:47:41 AM JST
from xcb.xproto import EventMask as EM
from lab.xahk.eventloop import EventLoop
mask=EM.ButtonPress|EM.ButtonRelease|EM.ButtonMotion|EM.Button1Motion|EM.Button2Motion

* Fri 26 Jun 2015 06:47:46 AM JST
c.core.GrabPointer(False, 62914561, mask,1,1,0,0,0)

* Fri 26 Jun 2015 07:05:31 AM JST
window.wmclass
* Fri 26 Jun 2015 07:06:37 AM JST

* Fri 26 Jun 2015 07:06:37 AM JST

* Fri 26 Jun 2015 07:06:37 AM JST
        print(window.wmclass)

* Fri 26 Jun 2015 07:07:16 AM JST
0]
* Fri 26 Jun 2015 07:19:35 AM JST
20972487
* Fri 26 Jun 2015 07:21:37 AM JST
MapNotifyEvent, 
* Fri 26 Jun 2015 07:21:58 AM JST
CreateNotifyEvent, DestroyNotifyEvent
* Fri 26 Jun 2015 07:22:49 AM JST
        if isinstance(event, (CreateNotifyEvent, DestroyNotifyEvent)):
            return True

* Fri 26 Jun 2015 07:25:02 AM JST
child = self._display.core.QueryPointer(self._root).reply().child
* Fri 26 Jun 2015 07:28:47 AM JST

* Fri 26 Jun 2015 07:28:47 AM JST

* Fri 26 Jun 2015 07:28:47 AM JST
            print('DEBUG-2-cursor_handler.py')

* Fri 26 Jun 2015 07:28:48 AM JST

* Fri 26 Jun 2015 07:28:49 AM JST

* Fri 26 Jun 2015 07:28:49 AM JST
            print('DEBUG-3-cursor_handler.py')

* Fri 26 Jun 2015 07:28:50 AM JST

* Fri 26 Jun 2015 07:28:50 AM JST

* Fri 26 Jun 2015 07:28:50 AM JST
            print('DEBUG-4-cursor_handler.py')

* Fri 26 Jun 2015 07:31:23 AM JST
Window(self._display, children[-1])
* Fri 26 Jun 2015 07:31:51 AM JST
return 
* Fri 26 Jun 2015 07:37:32 AM JST

* Fri 26 Jun 2015 07:37:32 AM JST

* Fri 26 Jun 2015 07:37:32 AM JST
        print(event)

* Fri 26 Jun 2015 07:46:18 AM JST

* Fri 26 Jun 2015 07:46:18 AM JST

* Fri 26 Jun 2015 07:46:18 AM JST
            print('DEBUG-2-cursor_handler.py')

* Fri 26 Jun 2015 07:46:19 AM JST

* Fri 26 Jun 2015 07:46:19 AM JST

* Fri 26 Jun 2015 07:46:19 AM JST
            print('DEBUG-3-cursor_handler.py')

* Fri 26 Jun 2015 07:46:20 AM JST

* Fri 26 Jun 2015 07:46:20 AM JST

* Fri 26 Jun 2015 07:46:20 AM JST
            print('DEBUG-4-cursor_handler.py')

* Fri 26 Jun 2015 07:46:29 AM JST

* Fri 26 Jun 2015 07:46:29 AM JST

* Fri 26 Jun 2015 07:46:29 AM JST
            print('DEBUG-5-cursor_handler.py')

* Fri 26 Jun 2015 07:47:02 AM JST
    def __ne__(self, other):
        if isinstance(other, (Drawable, )):
            return self.id == other.id
        return self.id == other

* Fri 26 Jun 2015 07:47:18 AM JST

* Fri 26 Jun 2015 07:47:18 AM JST

* Fri 26 Jun 2015 07:47:18 AM JST
        if isinstance(other, (Drawable, )):

* Fri 26 Jun 2015 07:47:18 AM JST
        if isinstance(other, (Drawable, )):

* Fri 26 Jun 2015 07:47:18 AM JST
        if isinstance(other, (Drawable, )):
            return self.id == other.id

* Fri 26 Jun 2015 07:48:22 AM JST
    def __eq__(self, other):
        if isinstance(other, (Drawable, )):
            return self.id == other.id
        return self.id == other

* Fri 26 Jun 2015 07:49:19 AM JST
self._under_window == window
* Fri 26 Jun 2015 07:52:50 AM JST

* Fri 26 Jun 2015 07:52:50 AM JST

* Fri 26 Jun 2015 07:52:50 AM JST
        print(event)

* Fri 26 Jun 2015 07:53:08 AM JST
from xcb.xproto import EventMask as EM
* Fri 26 Jun 2015 07:54:36 AM JST
        child = self._display.core.QueryPointer(self._root).reply().child
        children = list(self._display.core.QueryTree(child).reply().children)
        if not children:
            return
        window = Window(self._display, children[-1])

* Fri 26 Jun 2015 07:54:44 AM JST
self._set_under_window(window)
* Fri 26 Jun 2015 07:55:22 AM JST
self._update_under_window()
* Fri 26 Jun 2015 08:03:03 AM JST

* Fri 26 Jun 2015 08:03:03 AM JST

* Fri 26 Jun 2015 08:03:03 AM JST
        print(event.event, event.detail, event.state)

* Fri 26 Jun 2015 08:03:03 AM JST
        print(event.event, event.detail, event.state)

* Fri 26 Jun 2015 08:03:03 AM JST
        print(event.event, event.detail, event.state)
        print(event.child)

* Fri 26 Jun 2015 08:03:03 AM JST
        print(event.event, event.detail, event.state)
        print(event.child)

* Fri 26 Jun 2015 08:03:03 AM JST
        print(event.event, event.detail, event.state)
        print(event.child)
        print(list(self._display.core.QueryTree(event.child).reply().children))

* Sat 27 Jun 2015 06:35:48 AM JST
from lab.xahk.commons.display import get_display
c=get_display()

* Sat 27 Jun 2015 06:36:30 AM JST
child
* Sat 27 Jun 2015 06:36:33 AM JST
mas
* Sat 27 Jun 2015 06:38:09 AM JST
from lab.xahk.desktop_manager import DesktopManager
DesktopManager.get_instance().list_windows()

* Sat 27 Jun 2015 06:40:10 AM JST
root_y
* Sat 27 Jun 2015 06:40:12 AM JST
reply().root_y
* Sat 27 Jun 2015 06:40:17 AM JST
check()
* Sat 27 Jun 2015 08:12:21 AM JST
482)
* Sat 27 Jun 2015 08:12:22 AM JST
QueryPointerUnchecked(482)
* Sat 27 Jun 2015 08:55:12 AM JST
class CursorHandler:
    """Class CursorHandler
    """
    # Attributes:
    display = None  # () 
    root = None  # () 
    
    # Operations
    def query_pointer(self):
        """function query_pointer
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_under_window(self):
        """function get_under_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_point(self):
        """function get_point
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def get_display(self):
        """function get_display
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def move(self, point):
        """function move
        
        point: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sat 27 Jun 2015 08:58:45 AM JST
DesktopManager.get_instance().list_windows()
* Sat 27 Jun 2015 08:58:49 AM JST
54525974
* Sat 27 Jun 2015 09:04:18 AM JST
window_client
* Sat 27 Jun 2015 09:04:20 AM JST
WindowClient
* Sat 27 Jun 2015 09:04:47 AM JST
from_id
* Sat 27 Jun 2015 09:04:47 AM JST
WindowClient.from_id
* Sat 27 Jun 2015 09:04:50 AM JST
            
* Sat 27 Jun 2015 09:04:59 AM JST
None # should raise NotImplementedError()
* Sat 27 Jun 2015 09:07:37 AM JST
root_x
* Sat 27 Jun 2015 09:26:40 AM JST
active
* Sat 27 Jun 2015 09:27:10 AM JST
desktop
* Sat 27 Jun 2015 09:27:13 AM JST
Desktop
* Sat 27 Jun 2015 09:45:51 AM JST
            
* Sat 27 Jun 2015 09:47:38 AM JST
54525974
* Sat 27 Jun 2015 09:49:40 AM JST
window
* Sat 27 Jun 2015 09:49:56 AM JST
 # should raise NotImplementedError()
* Sat 27 Jun 2015 09:50:12 AM JST
54525974
* Sat 27 Jun 2015 09:50:20 AM JST
wm.list_windows()
* Sat 27 Jun 2015 09:51:00 AM JST
from rectangle import Rectangle, Point
* Sat 27 Jun 2015 09:51:04 AM JST
Rectangle,
* Sat 27 Jun 2015 09:51:11 AM JST
None # should raise NotImplementedError()
* Sat 27 Jun 2015 09:51:23 AM JST
self._root.query_pointer()
* Sat 27 Jun 2015 09:51:54 AM JST
None # should raise NotImplementedError()
* Sat 27 Jun 2015 09:52:47 AM JST
window
* Sat 27 Jun 2015 09:53:03 AM JST
_root.
* Sat 27 Jun 2015 09:54:01 AM JST
co
* Sat 27 Jun 2015 09:54:01 AM JST
return co
* Sat 27 Jun 2015 09:54:03 AM JST
cookie = 
* Sat 27 Jun 2015 09:54:22 AM JST
None # should raise NotImplementedError()
* Sat 27 Jun 2015 10:03:21 AM JST
class DesktopCursor(DesktopManagerObserver, Ovservable, EventDispatcher):
    """Class DesktopCursor
    """
    # Attributes:
    cursor = None  # (CursorHandler) 
    __under_window = None  # () 
    
    # Operations
    def get_instance(self):
        """function get_instance
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_under_window(self):
        """function get_under_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_created_window(self, window):
        """function on_created_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_destroyed_window(self, window_id):
        """function on_destroyed_window
        
        window_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def move(self, point):
        """function move
        
        point: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_under_window(self, window):
        """function is_under_window
        
        window: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __set_under_window(self):
        """function set_under_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __update_under_cursor(self):
        """function update_under_cursor
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __change_window_attributes(self):
        """function change_window_attributes
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sat 27 Jun 2015 10:03:42 AM JST
la
* Sat 27 Jun 2015 10:03:42 AM JST
form la
* Sat 27 Jun 2015 10:05:23 AM JST
la
* Sat 27 Jun 2015 10:05:23 AM JST
form la
* Sat 27 Jun 2015 10:05:35 AM JST
CursorHandler
* Sat 27 Jun 2015 10:06:36 AM JST
None # should raise NotImplementedError()
* Sat 27 Jun 2015 10:06:40 AM JST
cls
* Sat 27 Jun 2015 10:06:40 AM JST
return cls
* Sat 27 Jun 2015 10:11:05 AM JST
Deskto
* Sat 27 Jun 2015 10:12:36 AM JST
self._update_under_window()
* Sat 27 Jun 2015 10:13:38 AM JST
        DesktopManager.get_instance().remove_observer(self)
        EventLoop.get_instance().remove_event_dispatcher(self)

* Sat 27 Jun 2015 10:14:09 AM JST
from xcb.xproto import EnterNotifyEvent, NotifyDetail, NotifyMode, CW, EventMask
* Sat 27 Jun 2015 10:14:39 AM JST
        if not isinstance(event, (EnterNotifyEvent, )):
            return False
        if event.detail in (NotifyDetail.Inferior, NotifyDetail.Ancestor):
            return False
        if event.mode == NotifyMode.Grab:
            return False
        return True

* Sat 27 Jun 2015 10:16:47 AM JST
self._update_under_window()
* Sat 27 Jun 2015 10:17:13 AM JST
return self._under_window
* Sat 27 Jun 2015 10:19:04 AM JST
get_display()
* Sat 27 Jun 2015 10:19:20 AM JST
        eventmask = self._display.core.GetWindowAttributes(
            self._root).reply().your_event_mask

* Sat 27 Jun 2015 10:19:28 AM JST
_root
* Sat 27 Jun 2015 10:19:38 AM JST
        self._display.core.ChangeWindowAttributes(
            self._root, CW.EventMask, [EventMask.PropertyChange | eventmask])

* Sat 27 Jun 2015 10:19:42 AM JST
_root
* Sat 27 Jun 2015 10:20:03 AM JST

* Sat 27 Jun 2015 10:20:03 AM JST

* Sat 27 Jun 2015 10:20:03 AM JST
        self._update_under_window()

* Sat 27 Jun 2015 10:22:23 AM JST
return None # should raise NotImplementedError()
* Sat 27 Jun 2015 10:22:50 AM JST
self._update_under_window()
* Sat 27 Jun 2015 10:23:08 AM JST
return None # should raise NotImplementedError()
* Sat 27 Jun 2015 10:23:15 AM JST
cookie = 
* Sat 27 Jun 2015 10:23:21 AM JST
f
* Sat 27 Jun 2015 10:23:21 AM JST
sle.f
* Sat 27 Jun 2015 10:23:49 AM JST
err
* Sat 27 Jun 2015 10:25:21 AM JST
pass
* Sat 27 Jun 2015 10:25:38 AM JST
None # should raise NotImplementedError()
* Sat 27 Jun 2015 10:25:56 AM JST
        mask = self._display.core.GetWindowAttributes(
            window).reply().your_event_mask
        self._display.core.ChangeWindowAttributes(
            window, CW.EventMask, [EventMask.EnterWindow | mask])
        self._display.flush()

* Sat 27 Jun 2015 10:30:54 AM JST
la
* Sat 27 Jun 2015 10:30:54 AM JST
form la
* Sat 27 Jun 2015 10:31:07 AM JST

* Sat 27 Jun 2015 10:31:07 AM JST

* Sat 27 Jun 2015 10:31:07 AM JST
from lab.xahk.windowspec import 

* Sat 27 Jun 2015 10:31:52 AM JST

* Sat 27 Jun 2015 10:31:52 AM JST

* Sat 27 Jun 2015 10:31:52 AM JST
        return None # should raise NotImplementedError()

* Sat 27 Jun 2015 10:31:55 AM JST
Window
* Sat 27 Jun 2015 10:32:15 AM JST
    def _notify_changed_under_window(self, ):
        r"""SUMMARY

        _notify_changed_under_window()

        @Return:

        @Error:
        """
        for observer in self._observers:
            observer.on_changed_under_window(self._under_window)

* Sat 27 Jun 2015 10:32:22 AM JST
_under_window
* Sat 27 Jun 2015 10:32:33 AM JST
        self._under_window = window
        self._notify_changed_under_window()

* Sat 27 Jun 2015 10:43:27 AM JST

* Sat 27 Jun 2015 10:44:58 AM JST
l
* Sat 27 Jun 2015 10:44:59 AM JST
form l
* Sat 27 Jun 2015 10:45:18 AM JST
EventLoop.get_instance().dispatch_event()
* Sat 27 Jun 2015 10:45:28 AM JST

* Sat 27 Jun 2015 10:45:29 AM JST

* Sat 27 Jun 2015 10:45:29 AM JST
from lab.xahk.eventloop import EventLoop

* Sat 27 Jun 2015 10:54:23 AM JST
desktop_cursor.get_under_window().title
* Sat 27 Jun 2015 10:54:33 AM JST
title
* Sat 27 Jun 2015 10:57:48 AM JST
EventLoop.get_instance().add_event_dispatcher(self)
* Sat 27 Jun 2015 10:58:10 AM JST
        elif isinstance(event, (DestroyNotifyEvent, )):
            EventLoop.get_instance().remove_event_dispatcher(self)
            self._notify_destroyed()

* Sat 27 Jun 2015 11:01:26 AM JST

* Sat 27 Jun 2015 11:01:27 AM JST

* Sat 27 Jun 2015 11:01:27 AM JST
        print('enter update')

* Sun 28 Jun 2015 11:38:11 AM JST
Tes1(1)
* Sun 28 Jun 2015 11:43:52 AM JST
pip install sortedcontainers
* Sun 28 Jun 2015 11:44:10 AM JST
from sortedcontainers import SortedList, SortedSet, SortedDict
* Sun 28 Jun 2015 11:54:38 AM JST
from Queue import PriorityQueue
* Sun 28 Jun 2015 11:54:42 AM JST
PriorityQueue