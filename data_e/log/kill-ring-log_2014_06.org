
* Sun 01 Jun 2014 12:00:47 AM JST
0xffffff
* Sun 01 Jun 2014 12:01:34 AM JST
44040214
* Sun 01 Jun 2014 12:04:03 AM JST
0xffffff
* Sun 01 Jun 2014 12:04:18 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 12:09:02 AM JST
        self.args1 = [(False, 44040214,
                       1, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x04\x00\x00\x00\x04'
                      '\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)

* Sun 01 Jun 2014 12:09:16 AM JST
import xcb, xcb.xproto
import xcb2
from xcb2 import VoidCookie
from xcb2.xproto import EventMask
from xcb2.xproto.ext import SendEvent, SendEventChecked

* Sun 01 Jun 2014 12:09:31 AM JST
    def test_binary1(self):
        r"""Test SendEvent.ButtonPress binary1."""
        binary = self.protocol.ButtonPress._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

* Sun 01 Jun 2014 12:09:47 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 12:10:37 AM JST
44040214
* Sun 01 Jun 2014 12:11:00 AM JST
c.core.atomidentify('_NET_WM_STATE')
* Sun 01 Jun 2014 12:11:05 AM JST
296
* Sun 01 Jun 2014 12:11:19 AM JST
'\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 12:11:38 AM JST
ButtonPress
* Sun 01 Jun 2014 12:11:43 AM JST
ButtonPress
* Sun 01 Jun 2014 12:15:18 AM JST
format
* Sun 01 Jun 2014 12:16:07 AM JST
        
* Sun 01 Jun 2014 12:16:11 AM JST
sequence_number
* Sun 01 Jun 2014 08:00:34 AM JST
class TestSendEventRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(False, 44040214,
                       1, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x04\x00\x00\x00\x04'
                      '\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.cookie = VoidCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test SendEvent.ButtonPress.__call__() expect return VoidCookie."""
        cookie = self.protocol.ButtonPress(*self.argsbin[0])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.ButtonPress
                                      .__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def tearDown(self):
        pass

* Sun 01 Jun 2014 08:00:47 AM JST
[(False, 44040214, 32, 0, 44040214, 296,
                       '\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00'
                       '\x00\x00\x00\x00\x00\x00\x00\x00'),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00'
                      '\x00\x16\x00\xa0\x02(\x01\x00\x00\x01\x00\x00\x00)\x01'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00']
* Sun 01 Jun 2014 08:01:13 AM JST
SendEvent.ClientMessage
* Sun 01 Jun 2014 08:01:57 AM JST
ButtonPress
* Sun 01 Jun 2014 08:03:17 AM JST

* Sun 01 Jun 2014 08:03:17 AM JST

* Sun 01 Jun 2014 08:03:17 AM JST
from xcb2.xproto import EventMask

* Sun 01 Jun 2014 08:05:27 AM JST
ButtonPress
* Sun 01 Jun 2014 09:02:45 AM JST
        buf = self._get_head_buf(window, propagate, sequence_number)
        buf.write(self._dataatom)
        if time:
            buf.write(_pack('I', time))
        else:
            buf.write(self._currenttime)
        buf.write(self._zerofill)

* Sun 01 Jun 2014 09:04:27 AM JST
        buf = self._get_head_buf(window, propagate, sequence_number)
        if time:
            buf.write(_pack('I', time))
        else:
            buf.write(self._currenttime)
        buf.write(self._zerofill)

* Sun 01 Jun 2014 09:07:20 AM JST
        buf = self._get_head_buf(window, propagate, sequence_number)
        buf.write(self._set)
        buf.write(self._data)

* Sun 01 Jun 2014 09:10:09 AM JST
        buf = self._get_head_buf(window, propagate, sequence_number)
        buf.write(self._set)
        buf.write(self._data)
        return buf.getvalue()

* Sun 01 Jun 2014 09:10:14 AM JST
_set
* Sun 01 Jun 2014 09:10:15 AM JST
self._set
* Sun 01 Jun 2014 09:11:14 AM JST
    def _get_setbinary(self, window, propagate, sequence_number):
        r"""SUMMARY
        
        _get_setbinary(window, propagate, sequence_number)
        
        @Arguments:
        - `window`:
        - `propagate`:
        - `sequence_number`:
        
        @Return:
        """
        return self._getbinary(window, propagate, sequence_number, self._set)

* Sun 01 Jun 2014 09:11:28 AM JST
    def _get_unsetbinary(self, window, propagate, sequence_number):
        r"""SUMMARY
        
        _get_setbinary(window, propagate, sequence_number)
        
        @Arguments:
        - `window`:
        - `propagate`:
        - `sequence_number`:
        
        @Return:
        """
        return self._getbinary(window, propagate, sequence_number, self._unset)

* Sun 01 Jun 2014 09:12:04 AM JST
getvalue()
* Sun 01 Jun 2014 09:12:05 AM JST
buf.getvalue()
* Sun 01 Jun 2014 09:12:30 AM JST
getvalue()
* Sun 01 Jun 2014 09:12:30 AM JST
buf.getvalue()
* Sun 01 Jun 2014 09:20:11 AM JST

* Sun 01 Jun 2014 09:20:13 AM JST
SendEventChecked
* Sun 01 Jun 2014 09:20:13 AM JST
SendEvent, SendEventChecked
* Sun 01 Jun 2014 09:22:42 AM JST
        self.args1 = [(False, 44040214, 32, 0, 44040214, 296,
                       '\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00'
                       '\x00\x00\x00\x00\x00\x00\x00\x00'),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00'
                      '\x00\x16\x00\xa0\x02(\x01\x00\x00\x01\x00\x00\x00)\x01'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)

* Sun 01 Jun 2014 09:23:00 AM JST
x00'
* Sun 01 Jun 2014 09:23:00 AM JST
'\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 09:23:02 AM JST

* Sun 01 Jun 2014 09:23:02 AM JST

* Sun 01 Jun 2014 09:23:02 AM JST
                       '\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00'

* Sun 01 Jun 2014 09:23:43 AM JST
False, 
* Sun 01 Jun 2014 09:23:47 AM JST
32,
* Sun 01 Jun 2014 09:23:53 AM JST
44040214,
* Sun 01 Jun 2014 09:24:29 AM JST
296
* Sun 01 Jun 2014 09:24:48 AM JST
SendEvent
* Sun 01 Jun 2014 09:24:59 AM JST

* Sun 01 Jun 2014 09:24:59 AM JST

* Sun 01 Jun 2014 09:24:59 AM JST
        self.protocol_check = SendEventChecked(self.conn)

* Sun 01 Jun 2014 09:25:40 AM JST
44040214, False, 0
* Sun 01 Jun 2014 09:27:15 AM JST
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

* Sun 01 Jun 2014 09:27:34 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00'
                      '\x00\x16\x00\xa0\x02(\x01\x00\x00\x01\x00\x00\x00)\x01'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 09:27:47 AM JST
    
* Sun 01 Jun 2014 09:27:48 AM JST
                  
* Sun 01 Jun 2014 09:28:09 AM JST
_get_setbinary
* Sun 01 Jun 2014 09:28:23 AM JST
str(
* Sun 01 Jun 2014 09:28:26 AM JST
                                 
* Sun 01 Jun 2014 09:28:36 AM JST
                                 
* Sun 01 Jun 2014 09:30:14 AM JST
conn
* Sun 01 Jun 2014 09:34:26 AM JST
data=pack('5I', 1, 297, 0, 0, 0)
* Sun 01 Jun 2014 09:35:02 AM JST
event=code+fmt+seq+window+atom+data
* Sun 01 Jun 2014 09:35:14 AM JST
c.rawconnection.core.SendEvent(False, 44040214, 0xffffff, event)
* Sun 01 Jun 2014 09:35:20 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x00\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 09:35:58 AM JST
        binary = self.protocol._get_setbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_setbinary,
                                 expect, repr(expect), repr(binary)))

* Sun 01 Jun 2014 09:36:16 AM JST
SUMMARY
* Sun 01 Jun 2014 09:49:37 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x02\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 09:49:46 AM JST
    def test_unsetbinary(self, ):
        r"""unsetbinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00'
                  '\x16\x00\xa0\x02(\x01\x00\x00\x00\x00\x00\x00)\x01\x00\x00'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_unsetbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_unsetbinary,
                                 expect, repr(expect), repr(binary)))


* Sun 01 Jun 2014 09:49:51 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x02\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 09:50:01 AM JST
test_unset
* Sun 01 Jun 2014 09:50:33 AM JST
unset
* Sun 01 Jun 2014 09:53:19 AM JST
Test Above
* Sun 01 Jun 2014 09:54:21 AM JST
        
* Sun 01 Jun 2014 09:56:06 AM JST
not 
* Sun 01 Jun 2014 09:56:47 AM JST
not 
* Sun 01 Jun 2014 09:56:49 AM JST
not 
* Sun 01 Jun 2014 09:56:53 AM JST

* Sun 01 Jun 2014 09:56:53 AM JST

* Sun 01 Jun 2014 09:56:53 AM JST
            buf.write(_pack('I', time))

* Sun 01 Jun 2014 10:02:00 AM JST
44040214, False, 0
* Sun 01 Jun 2014 10:02:11 AM JST
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.ButtonPress
                                      .__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

* Sun 01 Jun 2014 10:02:51 AM JST
ButtonPress
* Sun 01 Jun 2014 10:03:08 AM JST
                                      
* Sun 01 Jun 2014 10:03:11 AM JST
                                      
* Sun 01 Jun 2014 10:03:19 AM JST
__class__
* Sun 01 Jun 2014 10:03:20 AM JST
                                      
* Sun 01 Jun 2014 10:04:19 AM JST
    def test_set(self, ):
        r"""Test Above.set."""
        cookie = self.protocol.set(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.set.__name__, cookie))

* Sun 01 Jun 2014 10:04:43 AM JST
    def test_unset(self, ):
        r"""Test Above.unset."""
        cookie = self.protocol.unset(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.unset.__name__, cookie))


* Sun 01 Jun 2014 10:04:52 AM JST
unset
* Sun 01 Jun 2014 10:04:56 AM JST
unset
* Sun 01 Jun 2014 10:05:01 AM JST
unset
* Sun 01 Jun 2014 10:06:56 AM JST
class TestAbove(MockerTestCase):
    def setUp(self):
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = Above(self.sendevent)
        self.mocker.replay()

    def test_setbinary(self):
        r"""Test Above._get_setbinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00'
                  '\x00\x16\x00\xa0\x02(\x01\x00\x00\x01\x00\x00\x00)\x01'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_setbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_setbinary,
                                 expect, repr(expect), repr(binary)))

    def test_unsetbinary(self, ):
        r"""Test Above._get_unsetbinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00'
                  '\x16\x00\xa0\x02(\x01\x00\x00\x00\x00\x00\x00)\x01\x00\x00'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_unsetbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_unsetbinary,
                                 expect, repr(expect), repr(binary)))

    def test_togglebinary(self, ):
        r"""Test Above._get_togglebinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00'
                  '\x16\x00\xa0\x02(\x01\x00\x00\x02\x00\x00\x00)\x01\x00\x00'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_togglebinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_togglebinary,
                                 expect, repr(expect), repr(binary)))

    def test_set(self, ):
        r"""Test Above.set."""
        cookie = self.protocol.set(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.set.__name__, cookie))

    def test_unset(self, ):
        r"""Test Above.unset."""
        cookie = self.protocol.unset(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.unset.__name__, cookie))

    def test_toggle(self, ):
        r"""Test Above.toggle."""
        cookie = self.protocol.toggle(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.toggle.__name__, cookie))

    def tearDown(self):
        pass

* Sun 01 Jun 2014 10:07:18 AM JST
Below
* Sun 01 Jun 2014 10:08:31 AM JST
'_NET_WM_STATE_BELOW'
* Sun 01 Jun 2014 10:08:45 AM JST
298
* Sun 01 Jun 2014 10:10:14 AM JST
44040214
* Sun 01 Jun 2014 10:10:37 AM JST
print(repr(buf.getvalue()))
* Sun 01 Jun 2014 10:12:31 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x01\x00\x00\x00*\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 10:14:19 AM JST
coo=c.rawconnection.core.SendEventChecked(False, 44040214, 0xffffff, event)
* Sun 01 Jun 2014 10:14:30 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x02\x00\x00\x00*\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 10:15:28 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x00\x00\x00\x00*\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 10:18:21 AM JST
class TestBelow(MockerTestCase):
    def setUp(self):
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = Below(self.sendevent)
        self.mocker.replay()

    def test_setbinary(self):
        r"""Test Below._get_setbinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00'
                  '\x16\x00\xa0\x02(\x01\x00\x00\x01\x00\x00\x00*\x01\x00\x00'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_setbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_setbinary,
                                 expect, repr(expect), repr(binary)))

    def test_unsetbinary(self, ):
        r"""Test Below._get_unsetbinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00'
                  '\x16\x00\xa0\x02(\x01\x00\x00\x00\x00\x00\x00*\x01\x00\x00'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_unsetbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_unsetbinary,
                                 expect, repr(expect), repr(binary)))

    def test_togglebinary(self, ):
        r"""Test Below._get_togglebinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00'
                  '\x16\x00\xa0\x02(\x01\x00\x00\x02\x00\x00\x00*\x01\x00\x00'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_togglebinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_togglebinary,
                                 expect, repr(expect), repr(binary)))

    def test_set(self, ):
        r"""Test Below.set."""
        cookie = self.protocol.set(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.set.__name__, cookie))

    def test_unset(self, ):
        r"""Test Below.unset."""
        cookie = self.protocol.unset(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.unset.__name__, cookie))

    def test_toggle(self, ):
        r"""Test Below.toggle."""
        cookie = self.protocol.toggle(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.toggle.__name__, cookie))

    def tearDown(self):
        pass

* Sun 01 Jun 2014 10:19:59 AM JST
'_NET_WM_STATE_SHADED'
* Sun 01 Jun 2014 10:20:55 AM JST
385
* Sun 01 Jun 2014 10:21:27 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x01\x00\x00\x00\x81\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 10:22:13 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x02\x00\x00\x00\x81\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 10:23:17 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x00\x00\x00\x00\x81\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 10:24:19 AM JST
'_NET_WM_STATE_FULLSCREEN'
* Sun 01 Jun 2014 10:24:28 AM JST
class TestShade(MockerTestCase):
    def setUp(self):
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = Shade(self.sendevent)
        self.mocker.replay()

    def test_setbinary(self):
        r"""Test Shade._get_setbinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00'
                  '\x16\x00\xa0\x02(\x01\x00\x00\x01\x00\x00\x00\x81\x01\x00'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_setbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_setbinary,
                                 expect, repr(expect), repr(binary)))

    def test_unsetbinary(self, ):
        r"""Test Shade._get_unsetbinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00'
                  '\x16\x00\xa0\x02(\x01\x00\x00\x00\x00\x00\x00\x81\x01\x00'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_unsetbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_unsetbinary,
                                 expect, repr(expect), repr(binary)))

    def test_togglebinary(self, ):
        r"""Test Shade._get_togglebinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00'
                  '\x16\x00\xa0\x02(\x01\x00\x00\x02\x00\x00\x00\x81\x01\x00'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_togglebinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_togglebinary,
                                 expect, repr(expect), repr(binary)))

    def test_set(self, ):
        r"""Test Shade.set."""
        cookie = self.protocol.set(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.set.__name__, cookie))

    def test_unset(self, ):
        r"""Test Shade.unset."""
        cookie = self.protocol.unset(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.unset.__name__, cookie))

    def test_toggle(self, ):
        r"""Test Shade.toggle."""
        cookie = self.protocol.toggle(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.toggle.__name__, cookie))

    def tearDown(self):
        pass

* Sun 01 Jun 2014 10:26:25 AM JST
'_NET_WM_STATE_FULLSCREEN'
* Sun 01 Jun 2014 10:26:29 AM JST
299
* Sun 01 Jun 2014 10:26:48 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x01\x00\x00\x00+\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 10:28:14 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x02\x00\x00\x00+\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 10:29:25 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x00\x00\x00\x00+\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 10:30:41 AM JST
'_NET_WM_STATE_HIDDEN'
* Sun 01 Jun 2014 10:31:40 AM JST
class TestFullScreen(MockerTestCase):
    def setUp(self):
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = FullScreen(self.sendevent)
        self.mocker.replay()

    def test_setbinary(self):
        r"""Test FullScreen._get_setbinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00'
                  '\x16\x00\xa0\x02(\x01\x00\x00\x01\x00\x00\x00+\x01\x00\x00'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_setbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_setbinary,
                                 expect, repr(expect), repr(binary)))

    def test_unsetbinary(self, ):
        r"""Test FullScreen._get_unsetbinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00'
                  '\x16\x00\xa0\x02(\x01\x00\x00\x00\x00\x00\x00+\x01\x00\x00'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_unsetbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_unsetbinary,
                                 expect, repr(expect), repr(binary)))

    def test_togglebinary(self, ):
        r"""Test FullScreen._get_togglebinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00'
                  '\x16\x00\xa0\x02(\x01\x00\x00\x02\x00\x00\x00+\x01\x00\x00'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_togglebinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_togglebinary,
                                 expect, repr(expect), repr(binary)))

    def test_set(self, ):
        r"""Test FullScreen.set."""
        cookie = self.protocol.set(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.set.__name__, cookie))

    def test_unset(self, ):
        r"""Test FullScreen.unset."""
        cookie = self.protocol.unset(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.unset.__name__, cookie))

    def test_toggle(self, ):
        r"""Test FullScreen.toggle."""
        cookie = self.protocol.toggle(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.toggle.__name__, cookie))

    def tearDown(self):
        pass

* Sun 01 Jun 2014 10:32:22 AM JST
Skip
* Sun 01 Jun 2014 10:32:44 AM JST
self.skipTest('not implemented')
* Sun 01 Jun 2014 10:33:05 AM JST
class TestHidden(MockerTestCase):
    def setUp(self):
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = Hidden(self.sendevent)
        self.mocker.replay()

    def test_setbinary(self):
        r"""Test Hidden._get_setbinary"""
        self.skipTest('not implemented')
        expect = ()
        binary = self.protocol._get_setbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_setbinary,
                                 expect, repr(expect), repr(binary)))

    def test_unsetbinary(self, ):
        r"""Test Hidden._get_unsetbinary"""
        self.skipTest('not implemented')
        expect = ()
        binary = self.protocol._get_unsetbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_unsetbinary,
                                 expect, repr(expect), repr(binary)))

    def test_togglebinary(self, ):
        r"""Test Hidden._get_togglebinary"""
        expect = ()
        binary = self.protocol._get_togglebinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_togglebinary,
                                 expect, repr(expect), repr(binary)))

    def test_set(self, ):
        r"""Test Hidden.set."""
        self.skipTest('not implemented')
        cookie = self.protocol.set(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.set.__name__, cookie))

    def test_unset(self, ):
        r"""Test Hidden.unset."""
        self.skipTest('not implemented')
        cookie = self.protocol.unset(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.unset.__name__, cookie))

    def test_toggle(self, ):
        r"""Test Hidden.toggle."""
        self.skipTest('not implemented')
        cookie = self.protocol.toggle(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.toggle.__name__, cookie))

    def tearDown(self):
        pass

* Sun 01 Jun 2014 10:33:37 AM JST
Maximize
* Sun 01 Jun 2014 10:33:46 AM JST
class TestMinimize(MockerTestCase):
    def setUp(self):
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = Minimize(self.sendevent)
        self.mocker.replay()

    def test_setbinary(self):
        r"""Test Minimize._get_setbinary"""
        self.skipTest('not implemented')
        expect = ()
        binary = self.protocol._get_setbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_setbinary,
                                 expect, repr(expect), repr(binary)))

    def test_unsetbinary(self, ):
        r"""Test Minimize._get_unsetbinary"""
        self.skipTest('not implemented')
        expect = ()
        binary = self.protocol._get_unsetbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_unsetbinary,
                                 expect, repr(expect), repr(binary)))

    def test_togglebinary(self, ):
        r"""Test Minimize._get_togglebinary"""
        expect = ()
        binary = self.protocol._get_togglebinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_togglebinary,
                                 expect, repr(expect), repr(binary)))

    def test_set(self, ):
        r"""Test Minimize.set."""
        self.skipTest('not implemented')
        cookie = self.protocol.set(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.set.__name__, cookie))

    def test_unset(self, ):
        r"""Test Minimize.unset."""
        self.skipTest('not implemented')
        cookie = self.protocol.unset(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.unset.__name__, cookie))

    def test_toggle(self, ):
        r"""Test Minimize.toggle."""
        self.skipTest('not implemented')
        cookie = self.protocol.toggle(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.toggle.__name__, cookie))

    def tearDown(self):
        pass



* Sun 01 Jun 2014 10:34:23 AM JST
_NET_WM_STATE_MAXIMIZED_VERT
* Sun 01 Jun 2014 10:34:29 AM JST
_NET_WM_STATE_MAXIMIZED_HORZ
* Sun 01 Jun 2014 10:34:41 AM JST
299
* Sun 01 Jun 2014 10:35:04 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x01\x00\x00\x00-\x01\x00\x00.\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 10:35:23 AM JST

* Sun 01 Jun 2014 10:35:23 AM JST

* Sun 01 Jun 2014 10:35:23 AM JST
        self.skipTest('not implemented')

* Sun 01 Jun 2014 10:36:00 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x00\x00\x00\x00-\x01\x00\x00.\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 10:36:20 AM JST

* Sun 01 Jun 2014 10:36:20 AM JST

* Sun 01 Jun 2014 10:36:20 AM JST
        self.skipTest('not implemented')

* Sun 01 Jun 2014 10:37:00 AM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00\x16\x00\xa0\x02(\x01\x00\x00\x02\x00\x00\x00-\x01\x00\x00.\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 10:37:19 AM JST

* Sun 01 Jun 2014 10:37:19 AM JST

* Sun 01 Jun 2014 10:37:19 AM JST
        self.skipTest('not implemented')

* Sun 01 Jun 2014 10:37:20 AM JST

* Sun 01 Jun 2014 10:37:20 AM JST

* Sun 01 Jun 2014 10:37:21 AM JST
        self.skipTest('not implemented')

* Sun 01 Jun 2014 10:37:23 AM JST

* Sun 01 Jun 2014 10:37:24 AM JST

* Sun 01 Jun 2014 10:37:24 AM JST
        self.skipTest('not implemented')

* Sun 01 Jun 2014 10:39:03 AM JST
self.skipTest('not implemented')
* Sun 01 Jun 2014 10:39:49 AM JST
self.skipTest('not implemented')
* Sun 01 Jun 2014 10:43:35 AM JST
44040214
* Sun 01 Jun 2014 10:43:58 AM JST
fullscreen
* Sun 01 Jun 2014 10:55:55 AM JST
44040214
* Sun 01 Jun 2014 10:56:48 AM JST
class TestMaximize(MockerTestCase):
    def setUp(self):
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = Maximize(self.sendevent)
        self.mocker.replay()

    def test_setbinary(self):
        r"""Test Maximize._get_setbinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00'
                  '\x16\x00\xa0\x02(\x01\x00\x00\x01\x00\x00\x00-\x01\x00'
                  '\x00.\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_setbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_setbinary,
                                 expect, repr(expect), repr(binary)))

    def test_unsetbinary(self, ):
        r"""Test Maximize._get_unsetbinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00'
                  '\x16\x00\xa0\x02(\x01\x00\x00\x00\x00\x00\x00-\x01\x00'
                  '\x00.\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_unsetbinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_unsetbinary,
                                 expect, repr(expect), repr(binary)))

    def test_togglebinary(self, ):
        r"""Test Maximize._get_togglebinary"""
        expect = ('\x00\x00\x00\x00\x16\x00\xa0\x02\xff\xff\xff\x00! \x00\x00'
                  '\x16\x00\xa0\x02(\x01\x00\x00\x02\x00\x00\x00-\x01\x00'
                  '\x00.\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._get_togglebinary(44040214, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._get_togglebinary,
                                 expect, repr(expect), repr(binary)))

    def test_set(self, ):
        r"""Test Maximize.set."""
        cookie = self.protocol.set(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.set.__name__, cookie))

    def test_unset(self, ):
        r"""Test Maximize.unset."""
        cookie = self.protocol.unset(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.unset.__name__, cookie))

    def test_toggle(self, ):
        r"""Test Maximize.toggle."""
        cookie = self.protocol.toggle(44040214, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.toggle.__name__, cookie))

    def tearDown(self):
        pass

* Sun 01 Jun 2014 10:57:12 AM JST
Maximize
* Sun 01 Jun 2014 10:57:39 AM JST
test
* Sun 01 Jun 2014 10:58:01 AM JST
from xcb2.tests import simple_teswindow
* Sun 01 Jun 2014 10:58:26 AM JST
self.window = simple_teswindow()
* Sun 01 Jun 2014 10:59:00 AM JST
DeleteWindow
* Sun 01 Jun 2014 10:59:49 AM JST
pass
* Sun 01 Jun 2014 11:00:10 AM JST
44040214
* Sun 01 Jun 2014 11:00:18 AM JST
False,
* Sun 01 Jun 2014 11:02:13 AM JST
set
* Sun 01 Jun 2014 11:02:16 AM JST
44040214
* Sun 01 Jun 2014 11:02:29 AM JST
set.
* Sun 01 Jun 2014 11:03:51 AM JST
'WM_DELETE_WINDOW'
* Sun 01 Jun 2014 11:04:23 AM JST
280
* Sun 01 Jun 2014 11:05:44 AM JST
simple_teswindow
* Sun 01 Jun 2014 11:05:58 AM JST
73400320
* Sun 01 Jun 2014 11:06:59 AM JST
'WM_PROTOCOLS'
* Sun 01 Jun 2014 11:07:06 AM JST
282
* Sun 01 Jun 2014 11:07:47 AM JST
c.core.atomidentify('WM_PROTOCOLS')
* Sun 01 Jun 2014 11:09:28 AM JST
73400320
* Sun 01 Jun 2014 11:16:10 AM JST
11111011110
* Sun 01 Jun 2014 11:16:48 AM JST
fromstring
* Sun 01 Jun 2014 11:17:02 AM JST
fromstring()
* Sun 01 Jun 2014 11:17:45 AM JST
to01
* Sun 01 Jun 2014 11:17:56 AM JST
to01()
* Sun 01 Jun 2014 11:18:51 AM JST
AddOns==0.7
BBQSQL==1.0
BeautifulSoup==3.2.1
BlindElephant==1.0
BytecodeAssembler==0.6
CDDB==1.4
CherryPy==3.2.2
Cython==0.19.2
DecoratorTools==1.8
Django==1.4.5
EasyProcess==0.1.6
Extremes==1.1.1
Flask==0.8
GeoIP-Python==1.2.4
GitPython==0.3.2.RC1
GnuPGInterface==0.3.2
IPy==0.75
Impacket==1.0.0.0-dev
Jinja2==2.6
M2Crypto==0.21.1
Magic-file-extensions==0.2
MarkupSafe==0.15
MySQL-python==1.2.3
NfSpy==1.0
PAM==0.4.2
## FIXME: could not find svn URL in dependency_links for this package:
PEAK-Rules==0.5a1.dev-r2707
PIL==1.1.7
Patool==1.4
PyBluez==0.18
PyGithub==1.23.0
PyMouse==1.0
PyMultimethods==0.2
PyX==0.11.1
PyYAML==3.10
Pygments==1.5
Pymacs==0.25
Pympler==0.3.1
PythonScriptTranslator==0.6
Routes==1.13
RunSnakeRun==2.0.4
SOAPpy==0.12.5
SQLAlchemy==0.7.8
SimpleCV==1.3
SquareMap==1.0.3
SymbolType==1.0
Twisted==13.2.0
Twisted-Conch==12.0.0
Twisted-Core==12.0.0
Twisted-Lore==12.0.0
Twisted-Mail==12.0.0
Twisted-Names==12.0.0
Twisted-News==12.0.0
Twisted-Runner==12.0.0
Twisted-Web==12.0.0
Twisted-Words==12.0.0
Werkzeug==0.8.3
Xpresser==1.1
Yapsy==1.10.223
acpi==1.0.0
algorithms==0.1
argparse==1.2.1
arprequest==0.3
astroid==1.0.0
async==0.6.1
beautifulsoup4==4.3.2
binwalk==1.2.2-1
bitarray==0.8.1
bitstring==3.1.2
chardet==2.0.1
clamd==1.0.1
clonedigger==1.1.0
cluster==1.1.1b3
colorama==0.2.7
columnize==0.3.6
configobj==4.7.2
coverage==3.7
cssutils==0.9.10b1
ctypeslib==0.5.6
cups==1.0
d2to1==0.2.7
decorator==3.4.0
defer==1.0.6
distorm3==3
distribute==0.7.3
dnspython==1.10.0
docutils==0.11
dogtail==0.6.1
easygui==0.96
ecdsa==0.10
enum34==0.9.19
epc==0.0.5
epydoc==3.0.1
esmre==0.3.1
evdev==0.4.1
extensions==0.4
feedparser==5.1.3
filecache==0.75
flickrapi==1.2
fpconst==0.7.2
funkload==1.13.0
fuse-python==0.2.1
gevent==0.13.6
gitdb==0.5.4
google==1.05
grasp==0.3.2
greenlet==0.3.1
guess-language==0.2
halberd==0.2.4
httplib2==0.7.4
ieeemac==0.3
iotop==0.4.4
ipaddr==2.1.11
ipaddress==1.0.6
ipwhois==0.8.1
ipython==1.1.0
isort==2.6.3
jedi==0.7.0
jediepcserver==0.0.0
jsonpickle==0.4.0
keepnote==0.7.8
killerbee==1.0
kmod==0.9.1
lazr.restfulclient==0.12.0
lazr.uri==1.0.3
lightblue==0.3.2
line-profiler==1.0b3
logilab-astng==0.24.2
logilab-common==0.60.0
lxml==2.3.2
matplotlib==1.3.1
mechanize==0.2.5
memory-profiler==0.30
mitmproxy==0.10.1
mocker==1.1.1
msgpack-python==0.1.10
multimethod==0.4
mutagen==1.20
natsort==3.0.2
netaddr==0.7.7
netlib==0.10
nltk==2.0.4
nose==1.3.0
numpy==1.8.0
oauth==1.0.1
oauthlib==0.1.2
odict==1.5.1
paramiko==1.12.0
path.py==5.0
pathlib==0.97
pcapy==0.10.8
pdfminer==20110515
pep381client==1.5
pexpect==3.0
phply==dev
pies==2.0.1
pies2overrides==2.0.1
## FIXME: could not find svn URL in dependency_links for this package:
prioritized-methods==0.2.2dev-20110830
profilehooks==1.7
psutil==1.2.1
psycopg2==2.4.5
pudb==2013.5
py-notify==0.3.1
pyOpenSSL==0.13
pyPdf==1.13
pySmartDL==1.1.2
pyasn1==0.1.3
pybloom==1.0.3
pybloomfiltermmap==0.3.11
pycrypto==2.6.1
pycryptopp==0.5.29
pycurl==7.19.0.2
pydns==2.3.6
pyflakes==0.7.3
pyftpdlib==1.2.0
pygame==1.9.1release
pyinotify==0.9.3
pylint==1.0.0
pymongo==2.2
pymssql==1.0.2
pyparsing==2.0.1
pyperclip==1.3
pyrit==0.4.0
pyscard==1.6.14
pyscreenshot==0.3.2
pyserial==2.7
pysnmp==4.2.2
pysnmp-apps==0.3.2
pysnmp-mibs==0.1.3
pyspi==0.6.1
pysqlite==2.6.3
python-apt==0.8.8.2
python-dateutil==2.2
python-debian==0.1.21
python-debianbts==1.11
python-dmidecode==3.10.13
python-ntlm==1.0.1
python-registry==1.0.1
python-termstyle==0.1.10
python-xlib==0.14
pythonutils==0.4.0
pythoscope==0.4.3
pytidylib==0.2.1
pytz==2012c
pyusb==1.0.0b1
pyxdg==0.19
rednose==0.4.1
reportbug==6.4.4
reportlab==2.5
repoze.lru==0.5
requests==0.12.1
rope==0.9.4
ropemacs==0.7
ropemode==0.2
scapy==2.2.0
sexpdata==0.0.3
sh==1.09
simplegeneric==0.8.1
simplejson==2.5.2
singledispatch==3.4.0.2
six==1.4.1
smmap==0.8.2
stevedore==0.8
threadpool==1.2.7
tornado==3.1.1
tweepy==2.1
uTidylib==0.2
unattended-upgrades==0.1
unicodecsv==0.9.4
updates==0.1.3.8
urwid==1.1.1
virtualenv==1.10.1
virtualenv-clone==0.2.4
virtualenvwrapper==3.7.1
wadllib==1.3.0
webunit==1.3.10
wsgiref==0.1.2
wstools==0.4.3
wxGlade==0.6.5
wxPython==2.8.12.1
wxPython-common==2.8.12.1
xaut==0.4.3
xdot==0.5
xlrd==0.9.2
xlutils==1.7.0
xlwt==0.7.5
xsser==1.6
zim==0.56
zope.interface==4.0.5

* Sun 01 Jun 2014 11:19:04 AM JST
bitstring
* Sun 01 Jun 2014 11:20:12 AM JST
'11111011110'
* Sun 01 Jun 2014 11:20:28 AM JST
BitArray
* Sun 01 Jun 2014 11:20:29 AM JST
BitString
* Sun 01 Jun 2014 11:20:44 AM JST
'11111011110'
* Sun 01 Jun 2014 11:35:02 AM JST
pack('B', c.core.atomidentify('WM_PROTOCOLS').name.length)
* Sun 01 Jun 2014 11:35:08 AM JST
c.core.atomidentify('WM_PROTOCOLS').name.length
* Sun 01 Jun 2014 11:36:23 AM JST
buf.getvalue()
* Sun 01 Jun 2014 11:37:08 AM JST
73400320
* Sun 01 Jun 2014 11:37:42 AM JST
_getbinary
* Sun 01 Jun 2014 11:38:22 AM JST
event=code+fmt+seq+window+atom+data
* Sun 01 Jun 2014 11:39:01 AM JST
from xcb2.tests import simple_teswindow
simple_teswindow()
window=pack('I', 73400320)
event=code+fmt+seq+window+atom+data
c.core.atomidentify('WM_PROTOCOLS')
c.core.atomidentify('WM_PROTOCOLS').pack()
atom=c.core.atomidentify('WM_PROTOCOLS').pack()
c.core.atomidentify('WM_PROTOCOLS').name.length
fmt=pack('B', c.core.atomidentify('WM_PROTOCOLS').name.length)
fmt
event=code+fmt+seq+window+atom+data
coo=c.rawconnection.core.SendEventChecked(False, 73400320, 0xffffff, event)

* Sun 01 Jun 2014 11:39:25 AM JST
from xcb2.tests import simple_teswindow
simple_teswindow()

* Sun 01 Jun 2014 11:39:36 AM JST
impo
* Sun 01 Jun 2014 11:39:38 AM JST
form 
* Sun 01 Jun 2014 11:39:46 AM JST
window=pack('I', 73400320)
* Sun 01 Jun 2014 11:40:06 AM JST
'WM_PROTOCOLS'
* Sun 01 Jun 2014 11:40:13 AM JST
atom=c.core.atomidentify('WM_PROTOCOLS').pack()
* Sun 01 Jun 2014 11:40:32 AM JST
fmt=pack('B', c.core.atomidentify('WM_PROTOCOLS').name.length)
* Sun 01 Jun 2014 11:41:15 AM JST
'WM_DELETE_WINDOW'
* Sun 01 Jun 2014 11:42:11 AM JST
data
* Sun 01 Jun 2014 11:42:23 AM JST
code = EventCode.ClientMessage
* Sun 01 Jun 2014 11:42:30 AM JST
3
* Sun 01 Jun 2014 11:42:33 AM JST
33
* Sun 01 Jun 2014 11:42:45 AM JST
event=code+fmt+seq+window+atom+data
* Sun 01 Jun 2014 11:43:10 AM JST
73400320, 0xffffff
* Sun 01 Jun 2014 11:43:51 AM JST
73400320
* Sun 01 Jun 2014 11:43:59 AM JST
'\x00\x00\x00\x00\x00\x00`\x04\xff\xff\xff\x00! \x00\x00\x00\x00`\x04\x1a\x01\x00\x00\x18\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 11:44:40 AM JST
'!\x0c\x00\x00\x00\x00`\x04\x1a\x01\x00\x00\x18\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 11:47:39 AM JST
fmt=pack('B', c.core.atomidentify('WM_PROTOCOLS').name.length
* Sun 01 Jun 2014 11:47:52 AM JST
fmt=pack('B', 
* Sun 01 Jun 2014 11:49:19 AM JST
from xcb2.atom import AtomReplyTypes
* Sun 01 Jun 2014 11:49:25 AM JST
AtomReplyTypes.get_types('WM_PROTOCOLS').length
* Sun 01 Jun 2014 11:50:46 AM JST
'\x00\x00\x00\x00\x00\x00`\x04\xff\xff\xff\x00! \x00\x00\x00\x00`\x04\x1a\x01\x00\x00\x18\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 11:51:53 AM JST
'\x00\x00\x00\x00' + winbin + '\xff\xff\xff\x00! \x00\x00' + winbin + '\x1a\x01\x00\x00\x18\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 11:53:10 AM JST
73400323
* Sun 01 Jun 2014 11:55:46 AM JST
self.conn.core.DestroyWindow(self.window)
* Sun 01 Jun 2014 11:56:04 AM JST
73400323
* Sun 01 Jun 2014 11:57:13 AM JST
44040214
* Sun 01 Jun 2014 12:30:10 PM JST
\x16\x00\xa0\x02
* Sun 01 Jun 2014 12:30:25 PM JST
self.window = simple_teswindow()
* Sun 01 Jun 2014 12:31:20 PM JST
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

* Sun 01 Jun 2014 12:32:29 PM JST
winbin = pack('I', self.window)
* Sun 01 Jun 2014 12:34:20 PM JST
\x16\x00\xa0\x02
* Sun 01 Jun 2014 12:35:57 PM JST
'' 
* Sun 01 Jun 2014 12:36:00 PM JST
'' 
* Sun 01 Jun 2014 12:36:05 PM JST
'' 
* Sun 01 Jun 2014 12:36:08 PM JST
'' 
* Sun 01 Jun 2014 12:36:10 PM JST
'' 
* Sun 01 Jun 2014 12:36:18 PM JST
'' 
* Sun 01 Jun 2014 12:36:20 PM JST
'' 
* Sun 01 Jun 2014 12:36:23 PM JST
'' 
* Sun 01 Jun 2014 12:36:29 PM JST
'' 
* Sun 01 Jun 2014 12:36:33 PM JST
'' 
* Sun 01 Jun 2014 12:37:24 PM JST
44040214
* Sun 01 Jun 2014 12:41:03 PM JST
from xcb2.tests import simple_teswindow
* Sun 01 Jun 2014 12:42:08 PM JST
44040214
* Sun 01 Jun 2014 12:42:57 PM JST
        self.window = simple_teswindow()
        winbin = pack('I', self.window)

* Sun 01 Jun 2014 12:43:07 PM JST
44040214
* Sun 01 Jun 2014 12:45:38 PM JST
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

* Sun 01 Jun 2014 12:47:40 PM JST
class TestDelete(MockerTestCase):
    def setUp(self):
        self.window = simple_teswindow()
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = DeleteWindow(self.sendevent)
        self.mocker.replay()

    def test_setbinary(self):
        r"""Test DeleteWindow._get_setbinary"""
        winbin = pack('I', self.window)
        expect = ('\x00\x00\x00\x00' + winbin + '\xff\xff\xff\x00! \x00\x00'
                  + winbin + '\x1a\x01\x00\x00\x18\x01\x00\x00\x00\x00\x00'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._getbinary(self.window, 0, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 expect, repr(expect), repr(binary)))

    def test_cookie(self, ):
        r"""Test DeleteWindow.set."""
        cookie = self.protocol(self.window, 0, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.__class__.__name__, cookie))

    def tearDown(self):
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

* Sun 01 Jun 2014 12:48:31 PM JST
'_NET_CLOSE_WINDOW'
* Sun 01 Jun 2014 12:48:36 PM JST
'_NET_CLOSE_WINDOW'
* Sun 01 Jun 2014 12:48:59 PM JST
AtomReplyTypes.get_types('_NET_CLOSE_WINDOW').length
* Sun 01 Jun 2014 12:49:44 PM JST
event=code+fmt+seq+window+atom+data
* Sun 01 Jun 2014 12:50:46 PM JST
44040214
* Sun 01 Jun 2014 12:51:15 PM JST
73400320
* Sun 01 Jun 2014 12:51:41 PM JST
73400320
* Sun 01 Jun 2014 12:52:12 PM JST
'\x00\x00\x00\x00\x00\x00`\x04\xff\xff\xff\x00! \x00\x00\x00\x00`\x04a\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 12:52:30 PM JST
\x00\x00`\x04
* Sun 01 Jun 2014 12:52:47 PM JST
'\x00\x00\x00\x00' + winbin + '\xff\xff\xff\x00! \x00\x00' + winbin + 'a\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 01 Jun 2014 12:56:53 PM JST
44040214
* Sun 01 Jun 2014 12:57:01 PM JST
'\x16\x00\xa0\x02'
* Sun 01 Jun 2014 12:57:46 PM JST
self.window = simple_teswindow()
* Sun 01 Jun 2014 12:57:51 PM JST
44040214
* Sun 01 Jun 2014 12:57:54 PM JST
self.window = simple_teswindow()
* Sun 01 Jun 2014 12:58:14 PM JST
44040214
* Sun 01 Jun 2014 12:58:33 PM JST
'\x16\x00\xa0\x02'
* Sun 01 Jun 2014 12:58:53 PM JST
\x16\x00\xa0\x02
* Sun 01 Jun 2014 12:59:20 PM JST
winbin = pack('I', self.window)
* Sun 01 Jun 2014 01:00:04 PM JST
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

* Sun 01 Jun 2014 01:01:28 PM JST
                              msg='Failed: {0}({1}) not returned'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.ClientMessage
                                      .__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def tearDown(self):

* Sun 01 Jun 2014 01:02:12 PM JST
    def test_setbinary(self):
        r"""Test DeleteWindow._getbinary"""
        winbin = pack('I', self.window)
        expect = ('\x00\x00\x00\x00' + winbin + '\xff\xff\xff\x00! \x00\x00'
                  + winbin + '\x1a\x01\x00\x00\x18\x01\x00\x00\x00\x00\x00'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
        binary = self.protocol._getbinary(self.window, 0, False, 0)
        self.assertEqual(expect, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 expect, repr(expect), repr(binary)))


* Sun 01 Jun 2014 01:03:24 PM JST
propagate=
* Sun 01 Jun 2014 01:03:26 PM JST
sequence_number=
* Sun 01 Jun 2014 01:03:27 PM JST
            
* Sun 01 Jun 2014 01:03:54 PM JST
    def test_cookie(self, ):
        r"""Test DeleteWindow."""
        cookie = self.protocol(self.window, 0, False, 0)
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}() not returned'
                              ' VoidCookie\ngot: {1}'
                              .format(self.protocol.__class__.__name__, cookie))

* Sun 01 Jun 2014 01:12:45 PM JST
self.usecache._getcache(*self.args1[0])
* Sun 01 Jun 2014 01:14:33 PM JST
clearall
* Sun 01 Jun 2014 01:14:44 PM JST
form 
* Sun 01 Jun 2014 01:14:54 PM JST
GlobalCacheAtoms
* Sun 01 Jun 2014 01:15:07 PM JST
GlobalCacheAtoms
* Sun 01 Jun 2014 01:31:29 PM JST
self.connection.core.InternAtom
* Sun 01 Jun 2014 01:31:37 PM JST
    @property
    def InternAtom(self, ):
        r"""SUMMARY
        
        InternAtom(name)
        
        @Arguments:
        - `name`:
        
        @Return:
        """
        return self.connection.core.InternAtom

* Sun 01 Jun 2014 01:31:42 PM JST
InternAtom
* Sun 01 Jun 2014 01:31:47 PM JST
InternAtom
* Sun 01 Jun 2014 01:31:57 PM JST
core
* Sun 01 Jun 2014 01:31:58 PM JST
connection.core
* Sun 01 Jun 2014 01:32:03 PM JST
core
* Sun 01 Jun 2014 01:32:04 PM JST
connection.core
* Sun 01 Jun 2014 01:35:16 PM JST
self.identifier
* Sun 01 Jun 2014 01:37:25 PM JST
'BITMAP'
* Sun 01 Jun 2014 01:38:02 PM JST
atom
* Sun 01 Jun 2014 01:38:39 PM JST
_identify_str
* Sun 01 Jun 2014 01:39:09 PM JST
expect
* Sun 01 Jun 2014 01:40:24 PM JST
    def test_identify_str(self, ):
        r"""identify_str."""
        atomname = 'BITMAP'
        expect = self.conn.core.InternAtom(
            False, len(atomname), atomname).reply().atom
        atom = self.identifier(atomname)
        self.assertEqual(expect, int(atom),
                         msg='Failed: AtomIdentifier._identify_str() '
                         'expect: {}, got: {}'.format(int(expect), int(atom)))


* Sun 01 Jun 2014 01:40:47 PM JST
InternAtom
* Sun 01 Jun 2014 01:40:54 PM JST
            
* Sun 01 Jun 2014 01:41:01 PM JST
atom
* Sun 01 Jun 2014 01:41:09 PM JST
self.conn.core.GetAtomName(atomint).reply().name.buf()
* Sun 01 Jun 2014 01:41:15 PM JST
atomname
* Sun 01 Jun 2014 01:41:26 PM JST
int
* Sun 01 Jun 2014 01:41:41 PM JST
int(
* Sun 01 Jun 2014 01:42:36 PM JST
Test AtomIdentifier._
* Sun 01 Jun 2014 01:43:25 PM JST

* Sun 01 Jun 2014 01:43:25 PM JST
AtomIdentifier
* Sun 01 Jun 2014 01:43:27 PM JST
atomidentify
* Sun 01 Jun 2014 01:43:36 PM JST
AtomPair
* Sun 01 Jun 2014 01:44:06 PM JST

* Sun 01 Jun 2014 01:44:07 PM JST
AtomPair
* Sun 01 Jun 2014 01:44:08 PM JST
atompair
* Sun 01 Jun 2014 01:44:15 PM JST

* Sun 01 Jun 2014 01:44:17 PM JST
AtomName
* Sun 01 Jun 2014 01:44:19 PM JST
Atom
* Sun 01 Jun 2014 01:44:20 PM JST
atomname
* Sun 01 Jun 2014 01:44:46 PM JST
    def test_identify_int(self, ):
        r"""Test AtomIdentifier._identify_int."""
        atomint = 5
        expect = str(self.conn.core.GetAtomName(atomint).reply().name.buf())
        atom = self.identifier(atomint)
        self.assertEqual(expect, str(atom),
                         msg='Failed: AtomIdentifier._identify_int() '
                         'expect: {}, got: {}'.format(expect, str(atom)))

* Sun 01 Jun 2014 01:45:02 PM JST
AtomPair
* Sun 01 Jun 2014 01:45:38 PM JST

* Sun 01 Jun 2014 01:45:38 PM JST

* Sun 01 Jun 2014 01:45:39 PM JST
        atomint = 5

* Sun 01 Jun 2014 01:46:49 PM JST
str(self.conn.core.GetAtomName(atomint).reply().name.buf())
* Sun 01 Jun 2014 01:48:00 PM JST
pair
* Sun 01 Jun 2014 01:48:03 PM JST

* Sun 01 Jun 2014 01:48:03 PM JST

* Sun 01 Jun 2014 01:48:03 PM JST
        expect = str(self.conn.core.GetAtomName(atomint).reply().name.buf())

* Sun 01 Jun 2014 01:48:05 PM JST
atomint
* Sun 01 Jun 2014 01:48:17 PM JST
str(
* Sun 01 Jun 2014 02:06:56 PM JST
tomName
* Sun 01 Jun 2014 02:07:13 PM JST
import xcb, xcb.xproto
* Sun 01 Jun 2014 02:08:11 PM JST
        
* Sun 01 Jun 2014 02:08:53 PM JST

* Sun 01 Jun 2014 02:08:53 PM JST

* Sun 01 Jun 2014 02:08:54 PM JST
        self.atomname = AtomName

* Sun 01 Jun 2014 02:11:44 PM JST
intern
* Sun 01 Jun 2014 02:12:35 PM JST
gotname
* Sun 01 Jun 2014 02:16:46 PM JST
    def test_intern_atom(self):
        r"""Test AtomName.intern_atom"""
        name = 'BITMAP'
        expect = self.conn.core.InternAtom(True, len(name), name).reply().atom
        atomname = AtomName(self.conn, name)
        atom = atomname.intern_atom().reply().atom
        self.assertEqual(expect, atom,
                         msg='Failed: AtomName.intern_atom() '
                         'expect: {}, got: {}'.format(expect, atom))


* Sun 01 Jun 2014 02:19:43 PM JST
    def test_intern_atom_unchecked(self):
        r"""Test AtomName.intern_atom_unchecked"""
        name = 'BITMAP'
        expect = self.conn.core.InternAtomUnchecked(
            True, len(name), name).reply().atom
        atomname = AtomName(self.conn, name)
        atom = atomname.intern_atom_unchecked().reply().atom
        self.assertEqual(expect, atom,
                         msg='Failed: AtomName.intern_atom_unchecked() '
                         'expect: {}, got: {}'.format(expect, atom))


* Sun 01 Jun 2014 02:19:57 PM JST
intern_atom_unchecked
* Sun 01 Jun 2014 02:20:19 PM JST
import
* Sun 01 Jun 2014 02:20:45 PM JST
arra
* Sun 01 Jun 2014 02:21:32 PM JST
expect
* Sun 01 Jun 2014 02:21:37 PM JST
atom
* Sun 01 Jun 2014 02:22:34 PM JST
    def test_pack(self):
        r"""Test AtomName.pack"""
        name = 'BITMAP'
        expect = str(buffer(array('b', name)))
        atomname = AtomName(self.conn, name)
        atom = atomname.pack()
        self.assertEqual(expect, atom,
                         msg='Failed: AtomName.pack() '
                         'expect: {}, got: {}'.format(repr(expect), repr(atom)))


* Sun 01 Jun 2014 02:22:48 PM JST
pack
* Sun 01 Jun 2014 02:23:07 PM JST
atom
* Sun 01 Jun 2014 02:23:16 PM JST
atom
* Sun 01 Jun 2014 02:23:20 PM JST
atom)
* Sun 01 Jun 2014 02:23:21 PM JST
repr(atom)
* Sun 01 Jun 2014 02:23:26 PM JST
repr(
* Sun 01 Jun 2014 02:38:39 PM JST
'WM_NAME'
* Sun 01 Jun 2014 02:38:52 PM JST
length
* Sun 01 Jun 2014 02:38:59 PM JST
for
* Sun 01 Jun 2014 02:38:59 PM JST
get_typesatom().for
* Sun 01 Jun 2014 02:39:26 PM JST
'WM_NAME'
* Sun 01 Jun 2014 02:40:09 PM JST
name)
* Sun 01 Jun 2014 02:40:09 PM JST
len(name)
* Sun 01 Jun 2014 02:40:17 PM JST
length
* Sun 01 Jun 2014 02:40:22 PM JST
length
* Sun 01 Jun 2014 02:40:25 PM JST
length
* Sun 01 Jun 2014 02:40:29 PM JST
format
* Sun 01 Jun 2014 02:40:31 PM JST
format
* Sun 01 Jun 2014 02:40:48 PM JST
length
* Sun 01 Jun 2014 02:41:04 PM JST
    def test_length(self):
        r"""Test AtomName.length"""
        name = 'WM_NAME'
        expect = 8
        atomname = AtomName(self.conn, name)
        fmt = atomname.format
        self.assertEqual(expect, fmt,
                         msg='Failed: AtomName.pack() '
                         'expect: {}, got: {}'.format(expect, fmt))

* Sun 01 Jun 2014 02:41:22 PM JST
length
* Sun 01 Jun 2014 02:42:28 PM JST
name = 'BITMAP'
* Sun 01 Jun 2014 02:42:34 PM JST
atomname = AtomName(self.conn, name)
* Sun 01 Jun 2014 02:43:47 PM JST
atomname
* Sun 01 Jun 2014 02:47:33 PM JST
list 
* Sun 01 Jun 2014 02:51:40 PM JST
    def test_iter(self, ):
        r"""iter."""
        name = 'BITMAP'
        atomname = AtomName(self.conn, name)
        for i, char in enumerate(atomname, start=0):
            self.assertEqual(
                name[i], char,
                msg='Failed: AtomName.__iter__ expect: {}, got: {}'
                .format(name[i], char))

* Sun 01 Jun 2014 02:51:49 PM JST
iter
* Sun 01 Jun 2014 02:52:39 PM JST

* Sun 01 Jun 2014 02:52:39 PM JST

* Sun 01 Jun 2014 02:52:39 PM JST
        for i, char in enumerate(atomname, start=0):

* Sun 01 Jun 2014 02:52:42 PM JST
               
* Sun 01 Jun 2014 02:52:45 PM JST
i]
* Sun 01 Jun 2014 02:52:45 PM JST
name[i]
* Sun 01 Jun 2014 02:52:54 PM JST
char
* Sun 01 Jun 2014 02:53:18 PM JST
i]
* Sun 01 Jun 2014 02:53:18 PM JST
name[i]
* Sun 01 Jun 2014 02:53:21 PM JST
char
* Sun 01 Jun 2014 02:53:28 PM JST
            
* Sun 01 Jun 2014 02:54:33 PM JST
    def test_hash(self, ):
        r"""hash."""
        name = 'BITMAP'
        expect = hash(name)
        atomname = AtomName(self.conn, name)
        hsh = hash(atomname)
        self.assertEqual(expect, hsh,
                msg='Failed: AtomName.__hash__ expect: {}, got: {}'
                .format(expect, hsh))


* Sun 01 Jun 2014 02:54:41 PM JST
hash
* Sun 01 Jun 2014 02:55:12 PM JST
hash
* Sun 01 Jun 2014 02:55:15 PM JST
hash
* Sun 01 Jun 2014 02:58:27 PM JST
    def test_repr(self, ):
        r"""repr."""
        name = 'BITMAP'
        expect = repr(name)
        atomname = AtomName(self.conn, name)
        hsh = repr(atomname)
        self.assertEqual(expect, hsh,
                msg='Failed: AtomName.__repr__ expect: {}, got: {}'
                .format(expect, hsh))


* Sun 01 Jun 2014 02:58:48 PM JST
        atomname
* Sun 01 Jun 2014 02:59:03 PM JST

* Sun 01 Jun 2014 02:59:03 PM JST

* Sun 01 Jun 2014 02:59:03 PM JST
        expect = repr(name)

* Sun 01 Jun 2014 02:59:07 PM JST

* Sun 01 Jun 2014 02:59:07 PM JST

* Sun 01 Jun 2014 02:59:07 PM JST
        hsh = repr(atomname)

* Sun 01 Jun 2014 03:01:15 PM JST
atomname2
* Sun 01 Jun 2014 03:01:15 PM JST
atomname, atomname2
* Sun 01 Jun 2014 03:01:49 PM JST
AtomName
* Sun 01 Jun 2014 03:03:39 PM JST
    def test_cmp(self, ):
        r"""repr."""
        name = 'BITMAP'
        atomname = AtomName(self.conn, name)
        atomname2 = AtomName(self.conn, name)
        self.assertEqual(cmp(atomname, atomname2), 0,
                         msg='Failed: AtomName.__cmp__ cmp(AtomName, AtomName)')


* Sun 01 Jun 2014 03:03:50 PM JST

* Sun 01 Jun 2014 03:03:50 PM JST

* Sun 01 Jun 2014 03:03:50 PM JST
        atomname2 = AtomName(self.conn, name)

* Sun 01 Jun 2014 03:03:59 PM JST
AtomName
* Sun 01 Jun 2014 03:09:13 PM JST
cmp(
* Sun 01 Jun 2014 03:10:05 PM JST
cmp(
* Sun 01 Jun 2014 03:10:38 PM JST
    def test_cmp(self, ):
        r"""repr."""
        name = 'BITMAP'
        atomname = AtomName(self.conn, name)
        atomname2 = AtomName(self.conn, name)
        self.assertEqual(atomname.__cmp__(atomname2), 0,
                         msg='Failed: AtomName.__cmp__ cmp(AtomName, AtomName)')


* Sun 01 Jun 2014 03:11:20 PM JST
repr
* Sun 01 Jun 2014 03:11:33 PM JST
    def test_cmp2(self, ):
        r"""repr."""
        name = 'BITMAP'
        atomname = AtomName(self.conn, name)
        self.assertEqual(atomname.__cmp__(name), 0,
                         msg='Failed: AtomName.__cmp__ cmp(AtomName, "{}")'
                         .format(name))


* Sun 01 Jun 2014 03:12:02 PM JST
cmp
* Sun 01 Jun 2014 03:12:23 PM JST
repr
* Sun 01 Jun 2014 03:14:21 PM JST
    def test_eq(self, ):
        r"""eq."""
        name = 'BITMAP'
        atomname = AtomName(self.conn, name)
        atomname2 = AtomName(self.conn, name)
        self.assertTrue(atomname.__eq__(atomname2),
                         msg='Failed: AtomName.__eq__')

    def test_eq2(self, ):
        r"""eq."""
        name = 'BITMAP'
        atomname = AtomName(self.conn, name)
        self.assertTrue(atomname.__eq__(name),
                         msg='Failed: AtomName.__eq__ eq(AtomName, "{}")'
                         .format(name))

* Sun 01 Jun 2014 03:14:26 PM JST
    def test_eq(self, ):
        r"""eq."""
        name = 'BITMAP'
        atomname = AtomName(self.conn, name)
        atomname2 = AtomName(self.conn, name)
        self.assertTrue(atomname.__eq__(atomname2),
                         msg='Failed: AtomName.__eq__')

* Sun 01 Jun 2014 03:14:50 PM JST
    def test_eq2(self, ):
        r"""eq."""
        name = 'BITMAP'
        atomname = AtomName(self.conn, name)
        self.assertTrue(atomname.__eq__(name),
                         msg='Failed: AtomName.__eq__ eq(AtomName, "{}")'
                         .format(name))

* Sun 01 Jun 2014 03:15:03 PM JST
name
* Sun 01 Jun 2014 03:15:46 PM JST
name
* Sun 01 Jun 2014 03:15:54 PM JST
'CARDINAL')
* Sun 01 Jun 2014 03:15:57 PM JST
'CARDINAL'
* Sun 01 Jun 2014 03:23:59 PM JST
self.conn = xcb.connect()
* Sun 01 Jun 2014 03:24:03 PM JST

* Sun 01 Jun 2014 03:24:03 PM JST

* Sun 01 Jun 2014 03:24:03 PM JST
from struct import pack

* Sun 01 Jun 2014 03:24:04 PM JST

* Sun 01 Jun 2014 03:24:04 PM JST

* Sun 01 Jun 2014 03:24:04 PM JST
from struct import pack

* Sun 01 Jun 2014 03:24:07 PM JST
import xcb, xcb.xproto
import xcb2
from xcb2.atom.atomname import AtomName

* Sun 01 Jun 2014 03:25:00 PM JST
        atomint = Atom(self.conn2, 5)
        atomname = AtomName(self.conn2,
                            str(self.conn.core.GetAtomName(5).reply().name.buf()))
        expect = AtomPair(atomname, atomint)

* Sun 01 Jun 2014 03:25:21 PM JST
                            
* Sun 01 Jun 2014 03:25:43 PM JST
from xcb2.atom.atom import Atom
from xcb2.atom.atomname import AtomName

* Sun 01 Jun 2014 03:25:47 PM JST

* Sun 01 Jun 2014 03:25:47 PM JST

* Sun 01 Jun 2014 03:25:47 PM JST
from xcb2.atom.atomname import AtomName

* Sun 01 Jun 2014 03:25:51 PM JST
from xcb2.atom.atompair import AtomPair
* Sun 01 Jun 2014 03:26:44 PM JST
expect
* Sun 01 Jun 2014 03:28:27 PM JST
            
* Sun 01 Jun 2014 03:28:31 PM JST
name
* Sun 01 Jun 2014 03:29:14 PM JST
atomname
* Sun 01 Jun 2014 03:29:14 PM JST
self.atomname
* Sun 01 Jun 2014 03:30:33 PM JST
self.pair.name_length()
* Sun 01 Jun 2014 03:31:46 PM JST
39
* Sun 01 Jun 2014 03:31:53 PM JST
'WM_NAME'
* Sun 01 Jun 2014 03:32:30 PM JST
AtomTypeSTRINGReply
* Sun 01 Jun 2014 03:32:42 PM JST
AtomTypeSTRINGReply
* Sun 01 Jun 2014 03:33:50 PM JST
        self.assertEqual(expect, length,
                         msg='Failed: AtomPair.name_length expect: {}, got: {}'
                         .format(expect, length))

* Sun 01 Jun 2014 03:33:53 PM JST
length
* Sun 01 Jun 2014 03:33:57 PM JST
length
* Sun 01 Jun 2014 03:35:01 PM JST
types
* Sun 01 Jun 2014 03:35:12 PM JST
    def test_types(self, ):
        r"""types."""
        expect = AtomTypeSTRINGReply
        types = self.pair.types
        self.assertEqual(expect, types,
                         msg='Failed: AtomPair.types expect: {}, got: {}'
                         .format(expect, types))

* Sun 01 Jun 2014 03:35:30 PM JST
format
* Sun 01 Jun 2014 03:35:38 PM JST
format
* Sun 01 Jun 2014 03:36:08 PM JST
format
* Sun 01 Jun 2014 03:36:17 PM JST
format
* Sun 01 Jun 2014 03:36:57 PM JST
types
* Sun 01 Jun 2014 03:37:02 PM JST
types
* Sun 01 Jun 2014 03:37:04 PM JST
types
* Sun 01 Jun 2014 03:37:06 PM JST
types
* Sun 01 Jun 2014 03:37:09 PM JST
types
* Sun 01 Jun 2014 03:38:20 PM JST
array
* Sun 01 Jun 2014 03:38:51 PM JST
str(buffer(_array('b', self.name)))
* Sun 01 Jun 2014 03:38:53 PM JST
name
* Sun 01 Jun 2014 03:38:54 PM JST
self.name
* Sun 01 Jun 2014 03:39:48 PM JST
pack
* Sun 01 Jun 2014 03:40:42 PM JST
length
* Sun 01 Jun 2014 03:40:42 PM JST
types.length
* Sun 01 Jun 2014 03:40:56 PM JST
packed
* Sun 01 Jun 2014 03:40:59 PM JST
pair
* Sun 01 Jun 2014 03:40:59 PM JST
self.pair
* Sun 01 Jun 2014 03:57:40 PM JST
self.pair.__cmp__('WM_NAME')
* Sun 01 Jun 2014 03:58:33 PM JST
self.pair.__cmp__('WM_NAME')
* Sun 01 Jun 2014 03:58:56 PM JST
    def test_cmp(self, ):
        r"""cmp."""
        cmped = self.pair.__cmp__('WM_NAME')
        self.assertEqual(0, cmped,
                         msg='Failed: AtomPair.__cmp__ expect: 0, got: {}'
                         .format(cmped))


* Sun 01 Jun 2014 03:59:09 PM JST
        self.atomint = Atom(self.conn, 39)
        self.atomname = AtomName(self.conn, 'WM_NAME')
        self.pair = AtomPair(self.atomname, self.atomint)

* Sun 01 Jun 2014 03:59:27 PM JST
self.
* Sun 01 Jun 2014 03:59:29 PM JST
self.
* Sun 01 Jun 2014 03:59:31 PM JST
self.
* Sun 01 Jun 2014 03:59:35 PM JST
self.
* Sun 01 Jun 2014 03:59:37 PM JST
self.
* Sun 01 Jun 2014 04:00:04 PM JST
    def test_cmp2(self, ):
        r"""cmp."""
        atomint = Atom(self.conn, 39)
        atomname = AtomName(self.conn, 'WM_NAME')
        pair = AtomPair(atomname, atomint)
        cmped = self.pair.__cmp__(pair)
        self.assertEqual(0, cmped,
                         msg='Failed: AtomPair.__cmp__ expect: 0, got: {}'
                         .format(cmped))

* Sun 01 Jun 2014 04:00:12 PM JST

* Sun 01 Jun 2014 04:00:12 PM JST

* Sun 01 Jun 2014 04:00:12 PM JST
        atomint = Atom(self.conn, 39)

* Sun 01 Jun 2014 04:00:12 PM JST
        atomint = Atom(self.conn, 39)

* Sun 01 Jun 2014 04:00:12 PM JST
        atomint = Atom(self.conn, 39)
        atomname = AtomName(self.conn, 'WM_NAME')

* Sun 01 Jun 2014 04:00:12 PM JST
        atomint = Atom(self.conn, 39)
        atomname = AtomName(self.conn, 'WM_NAME')

* Sun 01 Jun 2014 04:00:13 PM JST
        atomint = Atom(self.conn, 39)
        atomname = AtomName(self.conn, 'WM_NAME')
        pair = AtomPair(atomname, atomint)

* Sun 01 Jun 2014 04:00:41 PM JST
    def test_cmp(self, ):
        r"""cmp."""
        cmped = self.pair.__cmp__('WM_NAME')
        self.assertEqual(0, cmped,
                         msg='Failed: AtomPair.__cmp__ expect: 0, got: {}'
                         .format(cmped))

    def test_cmp2(self, ):
        r"""cmp."""
        atomint = Atom(self.conn, 39)
        atomname = AtomName(self.conn, 'WM_NAME')
        pair = AtomPair(atomname, atomint)
        cmped = self.pair.__cmp__(pair)
        self.assertEqual(0, cmped,
                         msg='Failed: AtomPair.__cmp__ expect: 0, got: {}'
                         .format(cmped))

    def test_cmp3(self, ):
        r"""cmp."""
        cmped = self.pair.__cmp__(39)
        self.assertEqual(0, cmped,
                         msg='Failed: AtomPair.__cmp__ expect: 0, got: {}'
                         .format(cmped))


* Sun 01 Jun 2014 04:01:02 PM JST
cmped
* Sun 01 Jun 2014 04:01:05 PM JST
cmped
* Sun 01 Jun 2014 04:01:09 PM JST
cmped
* Sun 01 Jun 2014 04:01:21 PM JST
cmp
* Sun 01 Jun 2014 04:01:32 PM JST
cmped
* Sun 01 Jun 2014 04:01:36 PM JST
cmp
* Sun 01 Jun 2014 04:01:48 PM JST
cmp
* Sun 01 Jun 2014 04:02:02 PM JST
cmp
* Sun 01 Jun 2014 04:02:04 PM JST
cmp
* Sun 01 Jun 2014 04:02:11 PM JST
cmp
* Sun 01 Jun 2014 04:02:40 PM JST
                        
* Sun 01 Jun 2014 04:02:58 PM JST
self.assertTreu(
* Sun 01 Jun 2014 04:03:03 PM JST
0, 
* Sun 01 Jun 2014 04:03:04 PM JST
                        
* Sun 01 Jun 2014 04:03:14 PM JST
                         
* Sun 01 Jun 2014 04:07:24 PM JST
        eqed = self.pair.__eq__(39)
        self.assertTrue(eqed, msg='Failed: AtomPair.__eq__ expect: True, got: {}'
                         .format(eqed))

* Sun 01 Jun 2014 04:07:52 PM JST
dummy
* Sun 01 Jun 2014 04:08:25 PM JST
    def test_cmp3(self, ):
        r"""cmp."""
        cmped = self.pair.__cmp__(39)
        self.assertEqual(0, cmped,
                         msg='Failed: AtomPair.__cmp__ expect: 0, got: {}'
                         .format(cmped))

* Sun 01 Jun 2014 04:10:04 PM JST
False
* Sun 01 Jun 2014 04:11:07 PM JST
type
* Sun 01 Jun 2014 04:15:17 PM JST
False
* Sun 01 Jun 2014 04:18:01 PM JST
self.
* Sun 01 Jun 2014 04:19:21 PM JST
        expect = 'WM_NAME'[1]
        char = self.pair.__getitem__(1)
        self.assertEqual(
            expect, char, msg='Failed: AtomPair.__getitem__ expect: {}, got: {}'
            .format(expect, char))

* Sun 01 Jun 2014 04:23:08 PM JST
    def test_str(self, ):
        r"""str."""
        expect = 'WM_NAME'
        string = str(self.pair)
        self.assertEqual(expect, string,
                         msg='Failed: AtomPair.__str__ expect: {}, got: {}'
                         .format(expect, string))


* Sun 01 Jun 2014 04:23:17 PM JST
str
* Sun 01 Jun 2014 04:23:19 PM JST
string
* Sun 01 Jun 2014 04:23:24 PM JST
string
* Sun 01 Jun 2014 04:23:31 PM JST
string
* Sun 01 Jun 2014 04:24:44 PM JST
    def test_int(self, ):
        r"""int."""
        expect = 39
        integer = int(self.pair)
        self.assertEqual(expect, integer,
                         msg='Failed: AtomPair.__int__ expect: {}, got: {}'
                         .format(expect, integer))


* Sun 01 Jun 2014 04:25:41 PM JST
    def test_str(self, ):
        r"""str."""
        expect = 'WM_NAME'
        string = str(self.pair)
        self.assertEqual(expect, string,
                         msg='Failed: AtomPair.__str__ expect: {}, got: {}'
                         .format(expect, string))


* Sun 01 Jun 2014 04:25:47 PM JST
'WM_NAME'
* Sun 01 Jun 2014 04:26:03 PM JST
string
* Sun 01 Jun 2014 04:26:07 PM JST
string
* Sun 01 Jun 2014 04:26:11 PM JST
string
* Sun 01 Jun 2014 04:26:55 PM JST
WM_CLASS')
* Sun 01 Jun 2014 04:27:05 PM JST
    def test_int(self, ):
        r"""int."""
        expect = 39
        integer = int(self.pair)
        self.assertEqual(expect, integer,
                         msg='Failed: AtomPair.__int__ expect: {}, got: {}'
                         .format(expect, integer))


* Sun 01 Jun 2014 04:27:16 PM JST
int
* Sun 01 Jun 2014 04:27:37 PM JST
integer
* Sun 01 Jun 2014 04:27:42 PM JST
integer
* Sun 01 Jun 2014 04:27:46 PM JST
integer
* Sun 01 Jun 2014 09:49:46 PM JST
NoSuchProcess
* Sun 01 Jun 2014 09:49:55 PM JST
pass
* Sun 01 Jun 2014 09:50:00 PM JST
    except _psutil.NoSuchProcess:
        return

* Sun 01 Jun 2014 11:02:20 PM JST

* Sun 01 Jun 2014 11:02:20 PM JST

* Sun 01 Jun 2014 11:02:20 PM JST


* Sun 01 Jun 2014 11:02:23 PM JST
import cgitb as _cgitb
_cgitb.enable(format='text')


* Sun 01 Jun 2014 11:27:34 PM JST

* Sun 01 Jun 2014 11:27:34 PM JST

* Sun 01 Jun 2014 11:27:34 PM JST
# for debug

* Mon 02 Jun 2014 08:31:38 AM JST
from xcb2.atom.atomname import AtomName
from xcb2.atom.atompair import AtomPair

* Mon 02 Jun 2014 08:31:41 AM JST
from xcb2.atom.atom import Atom
from xcb2.atom.atomname import AtomName
from xcb2.atom.atompair import AtomPair

* Mon 02 Jun 2014 08:35:03 AM JST
import xcb2
* Mon 02 Jun 2014 08:35:10 AM JST
self.conn2 = xcb2.connect()
* Mon 02 Jun 2014 08:37:28 AM JST
        atomint = Atom(self.conn2, 5)
        atomname = AtomName(self.conn2,
                            str(self.conn.core.GetAtomName(5).reply().name.buf()))
        expect = AtomPair(atomname, atomint)

* Mon 02 Jun 2014 08:38:14 AM JST
                            
* Mon 02 Jun 2014 08:38:25 AM JST
expect
* Mon 02 Jun 2014 08:41:36 AM JST
        self.assertIn(str(pair), pair,
                      msg='Failed: {} not has {}'.format(pair, str(pair)))

* Mon 02 Jun 2014 08:41:40 AM JST
str
* Mon 02 Jun 2014 08:41:43 AM JST
str
* Mon 02 Jun 2014 08:42:38 AM JST
pair
* Mon 02 Jun 2014 08:42:47 AM JST
pair
* Mon 02 Jun 2014 08:42:59 AM JST
self.cache
* Mon 02 Jun 2014 08:43:12 AM JST
    
* Mon 02 Jun 2014 08:43:16 AM JST
                      
* Mon 02 Jun 2014 08:43:59 AM JST
self.cache
* Mon 02 Jun 2014 09:00:40 AM JST
DisplayCacheAtomPair
* Mon 02 Jun 2014 09:05:20 AM JST
            
* Mon 02 Jun 2014 09:13:33 AM JST
self.cache.getcaches('')
* Mon 02 Jun 2014 09:15:09 AM JST
CacheAtomPair
* Mon 02 Jun 2014 09:16:18 AM JST
GlobalCacheAtoms
* Mon 02 Jun 2014 09:17:32 AM JST
        self.assertIsInstance(
            cache, CacheAtomPair,
            msg='Failed: DisplayCacheAtomPair.get returned {}'.format(cache))

* Mon 02 Jun 2014 09:24:56 AM JST
        atomint = Atom(self.conn, 5)
        atomname = AtomName(self.conn, str(self.conn.core.atomidentify(5)))
        pair = AtomPair(atomname, atomint)

* Mon 02 Jun 2014 09:25:13 AM JST
self.conn = xcb2.connect()
* Mon 02 Jun 2014 09:26:04 AM JST

* Mon 02 Jun 2014 09:26:04 AM JST

* Mon 02 Jun 2014 09:26:04 AM JST
        self.conn = xcb2.connect()

* Mon 02 Jun 2014 09:42:00 AM JST
        atomint = Atom(self.conn, 5)
        atomname = AtomName(self.conn, str(self.conn.core.atomidentify(5)))
        pair = AtomPair(atomname, atomint)

* Mon 02 Jun 2014 09:43:34 AM JST
    def test_iscached(self, ):
        r"""iscached."""
        atomint = Atom(self.conn, 5)
        atomname = AtomName(self.conn, str(self.conn.core.atomidentify(5)))
        pair = AtomPair(atomname, atomint)
        self.cache.add(pair)
        self.assertTrue(self.cache.iscached(pair))


* Mon 02 Jun 2014 09:43:55 AM JST
self.assertTrue(self.cache.iscached(pair))
* Mon 02 Jun 2014 09:54:19 AM JST
str(buffer(_array('I', data)))
* Mon 02 Jun 2014 09:56:35 AM JST
self.xcbcon
* Mon 02 Jun 2014 09:56:59 AM JST
self.conn
* Mon 02 Jun 2014 09:57:20 AM JST
from mocker import *
* Mon 02 Jun 2014 09:57:26 AM JST
MockerTestCase
* Mon 02 Jun 2014 09:57:40 AM JST
tearDownClass
* Mon 02 Jun 2014 09:57:57 AM JST
self.conn.disconnect()
* Mon 02 Jun 2014 09:58:42 AM JST
    def tearDownClass(self, ):
        self.conn.disconnect()

* Mon 02 Jun 2014 09:58:50 AM JST

* Mon 02 Jun 2014 09:58:50 AM JST

* Mon 02 Jun 2014 09:58:50 AM JST
        self.conn.disconnect()

* Mon 02 Jun 2014 09:58:50 AM JST

* Mon 02 Jun 2014 09:58:51 AM JST

* Mon 02 Jun 2014 09:58:51 AM JST
        self.xcbcon.disconnect()

* Mon 02 Jun 2014 09:59:31 AM JST
    def tearDownClass(self, ):
        self.conn.disconnect()

* Mon 02 Jun 2014 10:09:01 AM JST
@classmethod
* Mon 02 Jun 2014 10:11:18 AM JST
pass
* Mon 02 Jun 2014 10:11:30 AM JST
self.conn.disconnect()
* Mon 02 Jun 2014 10:11:52 AM JST

* Mon 02 Jun 2014 10:11:52 AM JST

* Mon 02 Jun 2014 10:11:52 AM JST
        pass

* Mon 02 Jun 2014 10:12:01 AM JST

* Mon 02 Jun 2014 10:12:01 AM JST

* Mon 02 Jun 2014 10:12:01 AM JST
        pass

* Mon 02 Jun 2014 10:12:01 AM JST

* Mon 02 Jun 2014 10:12:01 AM JST

* Mon 02 Jun 2014 10:12:02 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:12:13 AM JST

* Mon 02 Jun 2014 10:12:13 AM JST

* Mon 02 Jun 2014 10:12:13 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:12:21 AM JST

* Mon 02 Jun 2014 10:12:22 AM JST

* Mon 02 Jun 2014 10:12:22 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:12:30 AM JST

* Mon 02 Jun 2014 10:12:30 AM JST

* Mon 02 Jun 2014 10:12:30 AM JST
        pass

* Mon 02 Jun 2014 10:12:30 AM JST

* Mon 02 Jun 2014 10:12:30 AM JST

* Mon 02 Jun 2014 10:12:30 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:12:36 AM JST

* Mon 02 Jun 2014 10:12:36 AM JST

* Mon 02 Jun 2014 10:12:36 AM JST
        pass

* Mon 02 Jun 2014 10:12:37 AM JST

* Mon 02 Jun 2014 10:12:37 AM JST

* Mon 02 Jun 2014 10:12:37 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:12:44 AM JST

* Mon 02 Jun 2014 10:12:44 AM JST

* Mon 02 Jun 2014 10:12:44 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:12:51 AM JST

* Mon 02 Jun 2014 10:12:51 AM JST

* Mon 02 Jun 2014 10:12:51 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:12:58 AM JST

* Mon 02 Jun 2014 10:12:58 AM JST

* Mon 02 Jun 2014 10:12:58 AM JST
        pass

* Mon 02 Jun 2014 10:12:59 AM JST

* Mon 02 Jun 2014 10:12:59 AM JST

* Mon 02 Jun 2014 10:12:59 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:13:04 AM JST

* Mon 02 Jun 2014 10:13:04 AM JST

* Mon 02 Jun 2014 10:13:04 AM JST
        pass

* Mon 02 Jun 2014 10:13:04 AM JST

* Mon 02 Jun 2014 10:13:04 AM JST

* Mon 02 Jun 2014 10:13:04 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:13:13 AM JST

* Mon 02 Jun 2014 10:13:13 AM JST

* Mon 02 Jun 2014 10:13:13 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:13:21 AM JST

* Mon 02 Jun 2014 10:13:21 AM JST

* Mon 02 Jun 2014 10:13:21 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:13:27 AM JST

* Mon 02 Jun 2014 10:13:27 AM JST

* Mon 02 Jun 2014 10:13:27 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:13:35 AM JST

* Mon 02 Jun 2014 10:13:35 AM JST

* Mon 02 Jun 2014 10:13:35 AM JST
        pass

* Mon 02 Jun 2014 10:13:35 AM JST

* Mon 02 Jun 2014 10:13:35 AM JST

* Mon 02 Jun 2014 10:13:35 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:13:41 AM JST

* Mon 02 Jun 2014 10:13:41 AM JST

* Mon 02 Jun 2014 10:13:41 AM JST
        pass

* Mon 02 Jun 2014 10:13:41 AM JST

* Mon 02 Jun 2014 10:13:42 AM JST

* Mon 02 Jun 2014 10:13:42 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:13:51 AM JST

* Mon 02 Jun 2014 10:13:52 AM JST

* Mon 02 Jun 2014 10:13:52 AM JST
        pass

* Mon 02 Jun 2014 10:13:52 AM JST

* Mon 02 Jun 2014 10:13:52 AM JST

* Mon 02 Jun 2014 10:13:52 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:13:57 AM JST

* Mon 02 Jun 2014 10:13:57 AM JST

* Mon 02 Jun 2014 10:13:57 AM JST
        pass

* Mon 02 Jun 2014 10:13:57 AM JST

* Mon 02 Jun 2014 10:13:57 AM JST

* Mon 02 Jun 2014 10:13:57 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:14:05 AM JST

* Mon 02 Jun 2014 10:14:05 AM JST

* Mon 02 Jun 2014 10:14:05 AM JST
        pass

* Mon 02 Jun 2014 10:14:05 AM JST

* Mon 02 Jun 2014 10:14:06 AM JST

* Mon 02 Jun 2014 10:14:06 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:14:14 AM JST

* Mon 02 Jun 2014 10:14:14 AM JST

* Mon 02 Jun 2014 10:14:14 AM JST
        pass

* Mon 02 Jun 2014 10:14:14 AM JST

* Mon 02 Jun 2014 10:14:14 AM JST

* Mon 02 Jun 2014 10:14:15 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:14:20 AM JST

* Mon 02 Jun 2014 10:14:20 AM JST

* Mon 02 Jun 2014 10:14:20 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:14:26 AM JST

* Mon 02 Jun 2014 10:14:26 AM JST

* Mon 02 Jun 2014 10:14:26 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:14:33 AM JST

* Mon 02 Jun 2014 10:14:34 AM JST

* Mon 02 Jun 2014 10:14:34 AM JST
        pass

* Mon 02 Jun 2014 10:14:34 AM JST

* Mon 02 Jun 2014 10:14:34 AM JST

* Mon 02 Jun 2014 10:14:34 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:14:41 AM JST

* Mon 02 Jun 2014 10:14:41 AM JST

* Mon 02 Jun 2014 10:14:41 AM JST
        pass

* Mon 02 Jun 2014 10:14:42 AM JST

* Mon 02 Jun 2014 10:14:42 AM JST

* Mon 02 Jun 2014 10:14:42 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:14:48 AM JST

* Mon 02 Jun 2014 10:14:48 AM JST

* Mon 02 Jun 2014 10:14:49 AM JST
        pass

* Mon 02 Jun 2014 10:14:49 AM JST

* Mon 02 Jun 2014 10:14:49 AM JST

* Mon 02 Jun 2014 10:14:49 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:14:54 AM JST

* Mon 02 Jun 2014 10:14:54 AM JST

* Mon 02 Jun 2014 10:14:54 AM JST
        pass

* Mon 02 Jun 2014 10:14:54 AM JST

* Mon 02 Jun 2014 10:14:54 AM JST

* Mon 02 Jun 2014 10:14:54 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:14:59 AM JST

* Mon 02 Jun 2014 10:14:59 AM JST

* Mon 02 Jun 2014 10:14:59 AM JST
        pass

* Mon 02 Jun 2014 10:14:59 AM JST

* Mon 02 Jun 2014 10:14:59 AM JST

* Mon 02 Jun 2014 10:14:59 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:15:04 AM JST

* Mon 02 Jun 2014 10:15:04 AM JST

* Mon 02 Jun 2014 10:15:04 AM JST
        pass

* Mon 02 Jun 2014 10:15:04 AM JST

* Mon 02 Jun 2014 10:15:04 AM JST

* Mon 02 Jun 2014 10:15:04 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:15:11 AM JST

* Mon 02 Jun 2014 10:15:11 AM JST

* Mon 02 Jun 2014 10:15:11 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:15:16 AM JST

* Mon 02 Jun 2014 10:15:17 AM JST

* Mon 02 Jun 2014 10:15:17 AM JST
        pass

* Mon 02 Jun 2014 10:15:17 AM JST

* Mon 02 Jun 2014 10:15:17 AM JST

* Mon 02 Jun 2014 10:15:17 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:15:22 AM JST

* Mon 02 Jun 2014 10:15:22 AM JST

* Mon 02 Jun 2014 10:15:22 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:15:27 AM JST

* Mon 02 Jun 2014 10:15:27 AM JST

* Mon 02 Jun 2014 10:15:27 AM JST
        pass

* Mon 02 Jun 2014 10:15:28 AM JST

* Mon 02 Jun 2014 10:15:28 AM JST

* Mon 02 Jun 2014 10:15:28 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:15:36 AM JST

* Mon 02 Jun 2014 10:15:36 AM JST

* Mon 02 Jun 2014 10:15:36 AM JST
        pass

* Mon 02 Jun 2014 10:15:36 AM JST

* Mon 02 Jun 2014 10:15:36 AM JST

* Mon 02 Jun 2014 10:15:36 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:15:40 AM JST

* Mon 02 Jun 2014 10:15:41 AM JST

* Mon 02 Jun 2014 10:15:41 AM JST
        pass

* Mon 02 Jun 2014 10:15:41 AM JST

* Mon 02 Jun 2014 10:15:41 AM JST

* Mon 02 Jun 2014 10:15:41 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:15:45 AM JST

* Mon 02 Jun 2014 10:15:45 AM JST

* Mon 02 Jun 2014 10:15:45 AM JST
        pass

* Mon 02 Jun 2014 10:15:46 AM JST

* Mon 02 Jun 2014 10:15:46 AM JST

* Mon 02 Jun 2014 10:15:46 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:15:51 AM JST

* Mon 02 Jun 2014 10:15:51 AM JST

* Mon 02 Jun 2014 10:15:51 AM JST
        pass

* Mon 02 Jun 2014 10:15:51 AM JST

* Mon 02 Jun 2014 10:15:52 AM JST

* Mon 02 Jun 2014 10:15:52 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:16:00 AM JST

* Mon 02 Jun 2014 10:16:00 AM JST

* Mon 02 Jun 2014 10:16:00 AM JST
        pass

* Mon 02 Jun 2014 10:16:00 AM JST

* Mon 02 Jun 2014 10:16:00 AM JST

* Mon 02 Jun 2014 10:16:00 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:16:05 AM JST

* Mon 02 Jun 2014 10:16:05 AM JST

* Mon 02 Jun 2014 10:16:05 AM JST
        pass

* Mon 02 Jun 2014 10:16:05 AM JST

* Mon 02 Jun 2014 10:16:05 AM JST

* Mon 02 Jun 2014 10:16:05 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:16:12 AM JST

* Mon 02 Jun 2014 10:16:12 AM JST

* Mon 02 Jun 2014 10:16:12 AM JST
        pass

* Mon 02 Jun 2014 10:16:12 AM JST

* Mon 02 Jun 2014 10:16:12 AM JST

* Mon 02 Jun 2014 10:16:12 AM JST
    def tearDownClass(self, ):

* Mon 02 Jun 2014 10:19:03 AM JST
import xcb
* Mon 02 Jun 2014 10:19:23 AM JST
self.
* Mon 02 Jun 2014 10:19:25 AM JST
self.
* Mon 02 Jun 2014 10:19:33 AM JST
        conn = xcb.connect()
        conn.core.DestroyWindow(self.window)
        conn.flush()

* Mon 02 Jun 2014 10:24:03 AM JST
conn.disconnect()
* Mon 02 Jun 2014 10:26:51 AM JST

* Mon 02 Jun 2014 10:26:51 AM JST

* Mon 02 Jun 2014 10:26:52 AM JST
        conn.disconnect()

* Mon 02 Jun 2014 10:27:04 AM JST

* Mon 02 Jun 2014 10:27:04 AM JST

* Mon 02 Jun 2014 10:27:04 AM JST
        conn.disconnect()

* Mon 02 Jun 2014 10:29:12 AM JST
disconnect()
* Mon 02 Jun 2014 10:29:12 AM JST
conn.disconnect()
* Mon 02 Jun 2014 10:29:13 AM JST
self.conn.disconnect()
* Mon 02 Jun 2014 10:43:29 AM JST
atom
* Mon 02 Jun 2014 10:43:38 AM JST
xc
* Mon 02 Jun 2014 10:43:38 AM JST
frm xc
* Mon 02 Jun 2014 10:43:47 AM JST
xproto
* Mon 02 Jun 2014 10:44:58 AM JST
self.atom
* Mon 02 Jun 2014 10:46:54 AM JST
getname_unchecked
* Mon 02 Jun 2014 10:47:05 AM JST
        expect = 'BITMAP'
        name = self.atom.getname().reply().name
        self.assertEqual(expect, name,
                         msg='Failed: Atom.getname expect: {}, got: {}'
                         .format(expect, name))

* Mon 02 Jun 2014 10:47:43 AM JST
s
* Mon 02 Jun 2014 10:47:44 AM JST
form s
* Mon 02 Jun 2014 10:47:51 AM JST
pack
* Mon 02 Jun 2014 10:51:38 AM JST
        self.assertEqual(expect, integer,
                         msg='Failed: Atom.__int__ expect: {}, got: {}'
                         .format(expect,  integer))

* Mon 02 Jun 2014 10:52:16 AM JST
        self.assertEqual(expect, integer,
                         msg='Failed: Atom.__long__ expect: {}, got: {}'
                         .format(expect,  integer))

* Mon 02 Jun 2014 10:52:21 AM JST
integer
* Mon 02 Jun 2014 10:52:24 AM JST
integer
* Mon 02 Jun 2014 10:53:15 AM JST
        self.assertEqual(expect, hashed,
                         msg='Failed: Atom.__hash__ expect: {}, got: {}'
                         .format(expect,  hashed))

* Mon 02 Jun 2014 10:53:22 AM JST
hashed
* Mon 02 Jun 2014 10:53:27 AM JST
hashed
* Mon 02 Jun 2014 10:54:06 AM JST
atom = Atom(self.conn, 5)
* Mon 02 Jun 2014 10:56:25 AM JST
Atom.__cmp__(Atom)
* Mon 02 Jun 2014 10:56:27 AM JST
Atom
* Mon 02 Jun 2014 10:57:10 AM JST
atom = Atom(self.conn, 5)
* Mon 02 Jun 2014 10:58:16 AM JST
atom = Atom(self.conn, 5)
* Mon 02 Jun 2014 10:58:20 AM JST
self.assertTrue(self.atom.__eq__(atom))
* Mon 02 Jun 2014 11:00:25 AM JST
Display
* Mon 02 Jun 2014 11:00:56 AM JST
WMCLASS
* Mon 02 Jun 2014 11:01:49 AM JST
ConnectionAbstract
* Mon 02 Jun 2014 11:02:03 AM JST
ConnectionAbstract
* Mon 02 Jun 2014 11:02:20 AM JST
display
* Mon 02 Jun 2014 11:02:24 AM JST
display
* Mon 02 Jun 2014 11:02:35 AM JST
connection
* Mon 02 Jun 2014 11:02:56 AM JST
connection
* Mon 02 Jun 2014 11:03:33 AM JST
self.connection
* Mon 02 Jun 2014 11:03:39 AM JST
                           
* Mon 02 Jun 2014 11:03:44 AM JST
display=
* Mon 02 Jun 2014 11:03:45 AM JST
display
* Mon 02 Jun 2014 11:05:00 AM JST
    def __init__(self, window):
        r"""SUMMARY

        __init__(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        self.window = window

* Mon 02 Jun 2014 11:05:08 AM JST
WindowTypesAbstract
* Mon 02 Jun 2014 11:05:17 AM JST

* Mon 02 Jun 2014 11:05:17 AM JST

* Mon 02 Jun 2014 11:05:17 AM JST
        self.window = window

* Mon 02 Jun 2014 11:05:20 AM JST

* Mon 02 Jun 2014 11:05:20 AM JST

* Mon 02 Jun 2014 11:05:20 AM JST
    wmclass = WMCLASS()

* Mon 02 Jun 2014 11:06:10 AM JST
window.
* Mon 02 Jun 2014 11:06:18 AM JST

* Mon 02 Jun 2014 11:06:18 AM JST

* Mon 02 Jun 2014 11:06:18 AM JST
from xcb2.display import Display

* Mon 02 Jun 2014 12:02:48 PM JST
xcb
* Mon 02 Jun 2014 12:02:48 PM JST
form xcb
* Mon 02 Jun 2014 12:03:03 PM JST
Simple
* Mon 02 Jun 2014 12:03:28 PM JST
window
* Mon 02 Jun 2014 12:06:07 PM JST
WMCLASS(self.connection)
* Mon 02 Jun 2014 12:11:27 PM JST

* Mon 02 Jun 2014 12:11:27 PM JST

* Mon 02 Jun 2014 12:11:27 PM JST
        self.wmclass = WMCLASS(self.connection)

* Mon 02 Jun 2014 12:11:32 PM JST
self.
* Mon 02 Jun 2014 12:11:33 PM JST
connection
* Mon 02 Jun 2014 12:11:33 PM JST
self.connection
* Mon 02 Jun 2014 12:12:00 PM JST
pass
* Mon 02 Jun 2014 12:12:14 PM JST
destroy
* Mon 02 Jun 2014 12:14:43 PM JST
73400320
* Mon 02 Jun 2014 12:43:54 PM JST
make_list_append
* Mon 02 Jun 2014 12:45:33 PM JST
LOG
* Mon 02 Jun 2014 12:45:37 PM JST
LOG.warn('Warning {}'.format(err))
* Mon 02 Jun 2014 12:47:02 PM JST
from
* Mon 02 Jun 2014 12:47:12 PM JST
WindowList
* Mon 02 Jun 2014 12:47:53 PM JST
.get_types()
* Mon 02 Jun 2014 12:47:54 PM JST
                
* Mon 02 Jun 2014 12:47:58 PM JST
[Window(self.connection, x) for x in self._raw.children]
* Mon 02 Jun 2014 12:48:05 PM JST

* Mon 02 Jun 2014 12:48:05 PM JST

* Mon 02 Jun 2014 12:48:06 PM JST
        return 

* Mon 02 Jun 2014 12:58:35 PM JST

* Mon 02 Jun 2014 12:58:35 PM JST

* Mon 02 Jun 2014 12:58:35 PM JST
        except BadWindow as err:

* Mon 02 Jun 2014 12:58:35 PM JST
        except BadWindow as err:

* Mon 02 Jun 2014 12:58:36 PM JST
        except BadWindow as err:
            LOG.warn('Warning {}'.format(err))

* Mon 02 Jun 2014 12:58:36 PM JST
        except BadWindow as err:
            LOG.warn('Warning {}'.format(err))

* Mon 02 Jun 2014 12:58:36 PM JST
        except BadWindow as err:
            LOG.warn('Warning {}'.format(err))
            types = ['']

* Mon 02 Jun 2014 12:58:37 PM JST

* Mon 02 Jun 2014 12:58:37 PM JST

* Mon 02 Jun 2014 12:58:37 PM JST
        try:

* Mon 02 Jun 2014 12:58:44 PM JST
                
* Mon 02 Jun 2014 01:00:51 PM JST
39845892
* Mon 02 Jun 2014 01:02:31 PM JST

* Mon 02 Jun 2014 01:02:31 PM JST

* Mon 02 Jun 2014 01:02:31 PM JST
from xcb2.logger import LOG

* Mon 02 Jun 2014 01:02:32 PM JST

* Mon 02 Jun 2014 01:02:32 PM JST

* Mon 02 Jun 2014 01:02:32 PM JST
from xcb2.xproto import BadWindow

* Mon 02 Jun 2014 01:03:59 PM JST
Normal
* Mon 02 Jun 2014 01:04:09 PM JST
WindowNormalType
* Mon 02 Jun 2014 01:06:03 PM JST
    def test_get_types(self, ):
        r"""get_types."""
        expect = WindowNormalType
        wintype = self.window.get_types()
        self.assertIsInstance(wintype, expect,
                              msg='Failed: Window.get_types'
                              ' expect: {}, got: {}'.format(expect, wintype))


* Mon 02 Jun 2014 01:06:26 PM JST
Window(self.conn, self.id)
* Mon 02 Jun 2014 01:07:22 PM JST
window
* Mon 02 Jun 2014 01:07:22 PM JST
self.window
* Mon 02 Jun 2014 01:07:35 PM JST
self.window
* Mon 02 Jun 2014 01:07:35 PM JST
self.window        wintype = .get_types()

* Mon 02 Jun 2014 01:10:23 PM JST
import struct
import xcb, xcb.xproto
import xcb.render

NAME = 'TestName'
WMCLASS = 'testclass\x00TestClass\x00'

def simple_teswindow():
    r"""SUMMARY

    simple_teswindow()

    @Return:
    """
    con = xcb.connect()
    con.render = con(xcb.render.key)

    setup = con.get_setup()
    root = setup.roots[0].root
    depth = setup.roots[0].root_depth
    visual = setup.roots[0].root_visual
    white = setup.roots[0].white_pixel

    window = con.generate_id()

    con.core.CreateWindow(depth, window, root,
                          0, 0, 640, 480, 0,
                          xcb.xproto.WindowClass.InputOutput,
                          visual,
                          xcb.xproto.CW.BackPixel | xcb.xproto.CW.EventMask,
                          [white, xcb.xproto.EventMask.Exposure |
                           xcb.xproto.EventMask.KeyPress])
    xa_wm_name = con.core.InternAtom(
        False, len('WM_NAME'), 'WM_NAME').reply().atom
    xa_net_wm_name = con.core.InternAtom(
        False, len('_NET_WM_NAME'), '_NET_WM_NAME').reply().atom
    xa_wmclass = con.core.InternAtom(
        False, len('WM_CLASS'), 'WM_CLASS').reply().atom
    xa_utf8_string = con.core.InternAtom(
        False, len('UTF8_STRING'), 'UTF8_STRING').reply().atom

    xa_net_wm_window_type = con.core.InternAtom(
        False, len('_NET_WM_WINDOW_TYPE'), '_NET_WM_WINDOW_TYPE').reply().atom
    xa_normal = con.core.InternAtom(
        False, len('_NET_WM_WINDOW_TYPE_NORMAL'),
        '_NET_WM_WINDOW_TYPE_NORMAL').reply().atom
    xa_atom = con.core.InternAtom(False, len('ATOM'), 'ATOM').reply().atom
    xa_string = con.core.InternAtom(False, len('STRING'), 'STRING').reply().atom

    con.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
                            xa_net_wm_name, xa_utf8_string, 8, len(NAME), NAME)

    con.core.ChangeProperty(
        xcb.xproto.PropMode.Replace, window, xa_wmclass, xa_string,
        8, len(WMCLASS), WMCLASS)

    data = struct.pack('I', xa_normal)

    con.core.ChangeProperty(
        xcb.xproto.PropMode.Replace, window, xa_net_wm_window_type,
        xa_atom, 32, 1, data)
    con.core.MapWindow(window)
    con.flush()
    return window

* Mon 02 Jun 2014 01:11:43 PM JST
simple_window
* Mon 02 Jun 2014 01:11:53 PM JST
simple_teswindow2
* Mon 02 Jun 2014 01:12:23 PM JST
65011712
* Mon 02 Jun 2014 01:12:46 PM JST
simple_teswindow2
* Mon 02 Jun 2014 01:13:50 PM JST
        wintype = Window(self.conn, int(root)).get_types()
        self.assertIsInstance(wintype, expect,
                              msg='Failed: Window.get_types'
                              ' expect: {}, got: {}'.format(expect, wintype))

* Mon 02 Jun 2014 01:14:08 PM JST

* Mon 02 Jun 2014 01:14:08 PM JST

* Mon 02 Jun 2014 01:14:08 PM JST
        wintype = Window(self.conn, int(root)).get_types()

* Mon 02 Jun 2014 01:14:27 PM JST
simple_teswindow2()
* Mon 02 Jun 2014 01:14:56 PM JST
window
* Mon 02 Jun 2014 01:15:01 PM JST
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

* Mon 02 Jun 2014 01:15:06 PM JST
self.
* Mon 02 Jun 2014 01:29:44 PM JST
FundamentalWindow
* Mon 02 Jun 2014 01:33:12 PM JST
Window(self.conn, self.id)
* Mon 02 Jun 2014 01:34:26 PM JST
assert
* Mon 02 Jun 2014 01:34:26 PM JST
self.assert
* Mon 02 Jun 2014 01:37:15 PM JST
    def test_cmp(self, ):
        r"""cmp."""
        window = Window(self.conn, self.id)
        cmped = self.window.__cmp__(window)
        self.assertEqual(0, cmped,
                         msg='Failed: Window.__cmp__ expect: 0, got: {}'
                         .format(cmped))

* Mon 02 Jun 2014 01:37:40 PM JST
window = Window(self.conn, self.id)
* Mon 02 Jun 2014 01:38:00 PM JST

* Mon 02 Jun 2014 01:38:00 PM JST

* Mon 02 Jun 2014 01:38:00 PM JST
        window = Window(self.conn, self.id)

* Mon 02 Jun 2014 01:38:04 PM JST
self.id
* Mon 02 Jun 2014 01:38:40 PM JST
        self.assertEqual(0, cmped,
                         msg='Failed: Window.__cmp__ expect: 0, got: {}'
                         .format(cmped))

* Mon 02 Jun 2014 01:38:50 PM JST
cmped
* Mon 02 Jun 2014 01:40:46 PM JST
            
* Mon 02 Jun 2014 01:40:58 PM JST
            
* Mon 02 Jun 2014 01:41:28 PM JST
    def test_eq(self, ):
        r"""cmp."""
        window = Window(self.conn, self.id)
        eqed = self.window.__eq__(window)
        self.assertTrue(eqed)

* Mon 02 Jun 2014 01:42:10 PM JST
self.id
* Mon 02 Jun 2014 01:42:13 PM JST

* Mon 02 Jun 2014 01:42:13 PM JST

* Mon 02 Jun 2014 01:42:13 PM JST
        window = Window(self.conn, self.id)

* Mon 02 Jun 2014 01:49:31 PM JST
60817408
* Mon 02 Jun 2014 01:50:22 PM JST
get_types()
* Mon 02 Jun 2014 01:51:16 PM JST
reply()
* Mon 02 Jun 2014 01:51:30 PM JST
visual
* Mon 02 Jun 2014 01:52:12 PM JST
your
* Mon 02 Jun 2014 01:53:17 PM JST
do_not_propagate_mask
* Mon 02 Jun 2014 01:53:23 PM JST
do_not_propagate_mask
* Mon 02 Jun 2014 01:53:32 PM JST
get_attributes()
* Mon 02 Jun 2014 01:53:40 PM JST
60817408)
* Mon 02 Jun 2014 01:53:40 PM JST
c, 60817408)
* Mon 02 Jun 2014 01:53:43 PM JST
Window
* Mon 02 Jun 2014 01:53:43 PM JST
window.Window
* Mon 02 Jun 2014 01:54:19 PM JST
window.Window(c, 60817408).get_attributes()
* Mon 02 Jun 2014 01:55:24 PM JST
your_event_mask
* Mon 02 Jun 2014 01:56:32 PM JST
get_attributes()
* Mon 02 Jun 2014 01:58:43 PM JST
GetWindowAttributesReply
* Mon 02 Jun 2014 02:03:00 PM JST
GetWindowAttributesReply
* Mon 02 Jun 2014 02:03:46 PM JST
GetWindowAttributesReply
* Mon 02 Jun 2014 02:05:06 PM JST
self.
* Mon 02 Jun 2014 02:07:22 PM JST
GetWindowAttributesReply
* Mon 02 Jun 2014 02:08:18 PM JST
GetWindowAttributesReply
* Mon 02 Jun 2014 02:14:39 PM JST
60817408
* Mon 02 Jun 2014 02:17:28 PM JST
destroy_subwindows
* Mon 02 Jun 2014 02:17:36 PM JST
    def test_destroy(self, ):
        r"""destroy."""
        self.window.destroy()
        self.conn.flush()
        self.assertFalse(self.window in self.conn.root.client_list())

* Mon 02 Jun 2014 10:00:30 PM JST
self.get_window(window).get_types()
* Mon 02 Jun 2014 10:01:43 PM JST
return 
* Mon 02 Jun 2014 10:02:04 PM JST
FundamentalWindow
* Mon 02 Jun 2014 10:54:21 PM JST
def simple_teswindow2():
    r"""SUMMARY

    simple_teswindow()

    @Return:
    """
    con = xcb.connect()
    con.render = con(xcb.render.key)

    setup = con.get_setup()
    root = setup.roots[0].root
    depth = setup.roots[0].root_depth
    visual = setup.roots[0].root_visual
    white = setup.roots[0].white_pixel

    window = con.generate_id()

    con.core.CreateWindow(depth, window, root,
                          0, 0, 640, 480, 0,
                          xcb.xproto.WindowClass.InputOutput,
                          visual,
                          xcb.xproto.CW.BackPixel | xcb.xproto.CW.EventMask,
                          [white, xcb.xproto.EventMask.Exposure |
                           xcb.xproto.EventMask.KeyPress])
    xa_wm_name = con.core.InternAtom(
        False, len('WM_NAME'), 'WM_NAME').reply().atom
    xa_net_wm_name = con.core.InternAtom(
        False, len('_NET_WM_NAME'), '_NET_WM_NAME').reply().atom
    xa_wmclass = con.core.InternAtom(
        False, len('WM_CLASS'), 'WM_CLASS').reply().atom
    xa_utf8_string = con.core.InternAtom(
        False, len('UTF8_STRING'), 'UTF8_STRING').reply().atom

    xa_net_wm_window_type = con.core.InternAtom(
        False, len('_NET_WM_WINDOW_TYPE'), '_NET_WM_WINDOW_TYPE').reply().atom
    xa_normal = con.core.InternAtom(
        False, len('_NET_WM_WINDOW_TYPE_NORMAL'),
        '_NET_WM_WINDOW_TYPE_NORMAL').reply().atom
    xa_atom = con.core.InternAtom(False, len('ATOM'), 'ATOM').reply().atom
    xa_string = con.core.InternAtom(False, len('STRING'), 'STRING').reply().atom

    con.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
                            xa_net_wm_name, xa_utf8_string, 8, len(NAME), NAME)

    con.core.ChangeProperty(
        xcb.xproto.PropMode.Replace, window, xa_wmclass, xa_string,
        8, len(WMCLASS), WMCLASS)

    # data = struct.pack('I', xa_normal)

    # con.core.ChangeProperty(
        # xcb.xproto.PropMode.Replace, window, xa_net_wm_window_type,
        # xa_atom, 32, 1, data)
    con.core.MapWindow(window)
    con.flush()
    return window

* Mon 02 Jun 2014 10:55:17 PM JST
test_
* Mon 02 Jun 2014 10:55:27 PM JST
import
* Mon 02 Jun 2014 10:56:32 PM JST
simple_teswindow
* Mon 02 Jun 2014 10:56:39 PM JST
65011712
* Mon 02 Jun 2014 10:59:32 PM JST
65011712
* Mon 02 Jun 2014 11:18:07 PM JST
sys.platform
* Mon 02 Jun 2014 11:20:36 PM JST
'unix_connect'
* Mon 02 Jun 2014 11:27:47 PM JST
65011712
* Mon 02 Jun 2014 11:28:10 PM JST
65011712
* Mon 02 Jun 2014 11:46:04 PM JST
Drawable
* Mon 02 Jun 2014 11:48:55 PM JST
resource.Resource
* Tue 03 Jun 2014 07:15:52 AM JST
from xcb2.abstract import ConnectionAbstract
* Tue 03 Jun 2014 07:17:33 AM JST
ConnectionAbstract
* Tue 03 Jun 2014 07:19:32 AM JST
rid
* Tue 03 Jun 2014 07:26:34 AM JST
    def __repr__(self, ):
        return '{0.__class__.__name__}(id={0.id})'.format(self)

* Tue 03 Jun 2014 07:27:24 AM JST
0x%08x
* Tue 03 Jun 2014 07:29:35 AM JST
WARNING
* Tue 03 Jun 2014 07:30:55 AM JST
(defun py:- (n) ;[2014/05/14]
  "Wrap smart-operator--.
N"
  (interactive "p")
  (cond (buffer-read-only (my-forward-seq))
        ((py:at-string|comment-p) (self-insert-command n))
        (t (smart-operator--)))
  )

* Tue 03 Jun 2014 07:32:16 AM JST
py:>
* Tue 03 Jun 2014 07:33:06 AM JST
    
* Tue 03 Jun 2014 07:34:58 AM JST
py:>
* Tue 03 Jun 2014 07:35:32 AM JST
py:>
* Tue 03 Jun 2014 07:36:41 AM JST
(smartchr '("# WARNING!! Do not use \'>\'" ">" ">="))
* Tue 03 Jun 2014 07:37:20 AM JST
    
* Tue 03 Jun 2014 07:41:46 AM JST
{0.__class__.__name__}(id={0.id})
* Tue 03 Jun 2014 07:47:24 AM JST
    def get_geometry(self):
        return request.GetGeometry(display = self.display,
                                   drawable = self)

    def create_pixmap(self, width, height, depth):
        pid = self.display.allocate_resource_id()
        request.CreatePixmap(display = self.display,
                             depth = depth,
                             pid = pid,
                             drawable = self.id,
                             width = width,
                             height = height)

        cls = self.display.get_resource_class('pixmap', Pixmap)
        return cls(self.display, pid, owner = 1)

    def create_gc(self, **keys):
        cid = self.display.allocate_resource_id()
        request.CreateGC(display = self.display,
                         cid = cid,
                         drawable = self.id,
                         attrs = keys)

        cls = self.display.get_resource_class('gc', fontable.GC)
        return cls(self.display, cid, owner = 1)

    def copy_area(self, gc, src_drawable, src_x, src_y, width, height, dst_x, dst_y, onerror = None):
        request.CopyArea(display = self.display,
                         onerror = onerror,
                         src_drawable = src_drawable,
                         dst_drawable = self.id,
                         gc = gc,
                         src_x = src_x,
                         src_y = src_y,
                         dst_x = dst_x,
                         dst_y = dst_y,
                         width = width,
                         height = height)

    def copy_plane(self, gc, src_drawable, src_x, src_y, width, height,
                   dst_x, dst_y, bit_plane, onerror = None):
        request.CopyPlane(display = self.display,
                          onerror = onerror,
                          src_drawable = src_drawable,
                          dst_drawable = self.id,
                          gc = gc,
                          src_x = src_x,
                          src_y = src_y,
                          dst_x = dst_x,
                          dst_y = dst_y,
                          width = width,
                          height = height,
                          bit_plane = bit_plane)

    def poly_point(self, gc, coord_mode, points, onerror = None):
        request.PolyPoint(display = self.display,
                          onerror = onerror,
                          coord_mode = coord_mode,
                          drawable = self.id,
                          gc = gc,
                          points = points)

    def point(self, gc, x, y, onerror = None):
        request.PolyPoint(display = self.display,
                          onerror = onerror,
                          coord_mode = X.CoordModeOrigin,
                          drawable = self.id,
                          gc = gc,
                          points = [(x, y)])

    def poly_line(self, gc, coord_mode, points, onerror = None):
        request.PolyLine(display = self.display,
                         onerror = onerror,
                         coord_mode = coord_mode,
                         drawable = self.id,
                         gc = gc,
                         points = points)

    def line(self, gc, x1, y1, x2, y2, onerror = None):
        request.PolySegment(display = self.display,
                            onerror = onerror,
                            drawable = self.id,
                            gc = gc,
                            segments = [(x1, y1, x2, y2)])

    def poly_segment(self, gc, segments, onerror = None):
        request.PolySegment(display = self.display,
                            onerror = onerror,
                            drawable = self.id,
                            gc = gc,
                            segments = segments)

    def poly_rectangle(self, gc, rectangles, onerror = None):
        request.PolyRectangle(display = self.display,
                              onerror = onerror,
                              drawable = self.id,
                              gc = gc,
                              rectangles = rectangles)

    def rectangle(self, gc, x, y, width, height, onerror = None):
        request.PolyRectangle(display = self.display,
                              onerror = onerror,
                              drawable = self.id,
                              gc = gc,
                              rectangles = [(x, y, width, height)])


    def poly_arc(self, gc, arcs, onerror = None):
        request.PolyArc(display = self.display,
                        onerror = onerror,
                        drawable = self.id,
                        gc = gc,
                        arcs = arcs)

    def arc(self, gc,  x, y, width, height, angle1, angle2, onerror = None):
        request.PolyArc(display = self.display,
                        onerror = onerror,
                        drawable = self.id,
                        gc = gc,
                        arcs = [(x, y, width, height, angle1, angle2)])

    def fill_poly(self, gc, shape, coord_mode, points, onerror = None):
        request.FillPoly(display = self.display,
                         onerror = onerror,
                         shape = shape,
                         coord_mode = coord_mode,
                         drawable = self.id,
                         gc = gc,
                         points = points)

    def poly_fill_rectangle(self, gc, rectangles, onerror = None):
        request.PolyFillRectangle(display = self.display,
                                  onerror = onerror,
                                  drawable = self.id,
                                  gc = gc,
                                  rectangles = rectangles)

    def fill_rectangle(self, gc, x, y, width, height, onerror = None):
        request.PolyFillRectangle(display = self.display,
                                  onerror = onerror,
                                  drawable = self.id,
                                  gc = gc,
                                  rectangles = [(x, y, width, height)])

    def poly_fill_arc(self, gc, arcs, onerror = None):
        request.PolyFillArc(display = self.display,
                            onerror = onerror,
                            drawable = self.id,
                            gc = gc,
                            arcs = arcs)

    def fill_arc(self, gc,  x, y, width, height, angle1, angle2, onerror = None):
        request.PolyFillArc(display = self.display,
                            onerror = onerror,
                            drawable = self.id,
                            gc = gc,
                            arcs = [(x, y, width, height, angle1, angle2)])


    def put_image(self, gc, x, y, width, height, format,
                  depth, left_pad, data, onerror = None):
        request.PutImage(display = self.display,
                         onerror = onerror,
                         format = format,
                         drawable = self.id,
                         gc = gc,
                         width = width,
                         height = height,
                         dst_x = x,
                         dst_y = y,
                         left_pad = left_pad,
                         depth = depth,
                         data = data)

    # Trivial little method for putting PIL images.  Will break on anything
    # but depth 1 or 24...
    def put_pil_image(self, gc, x, y, image, onerror = None):
        width, height = image.size
        if image.mode == '1':
            format = X.XYBitmap
            depth = 1
            if self.display.info.bitmap_format_bit_order == 0:
                rawmode = '1;R'
            else:
                rawmode = '1'
            pad = self.display.info.bitmap_format_scanline_pad
            stride = roundup(width, pad) >> 3
        elif image.mode == 'RGB':
            format = X.ZPixmap
            depth = 24
            if self.display.info.image_byte_order == 0:
                rawmode = 'BGRX'
            else:
                rawmode = 'RGBX'
            pad = self.display.info.bitmap_format_scanline_pad
            unit = self.display.info.bitmap_format_scanline_unit
            stride = roundup(width * unit, pad) >> 3
        else:
            raise ValueError, 'Unknown data format'

        maxlen = (self.display.info.max_request_length << 2) \
                 - request.PutImage._request.static_size
        split = maxlen / stride

        x1 = 0
        x2 = width
        y1 = 0

        while y1 < height:
            h = min(height, split)
            if h < height:
                subimage = image.crop((x1, y1, x2, y1 + h))
            else:
                subimage = image
            w, h = subimage.size
            data = subimage.tostring("raw", rawmode, stride, 0)
            self.put_image(gc, x, y, w, h, format, depth, 0, data)
            y1 = y1 + h
            y = y + h


    def get_image(self, x, y, width, height, format, plane_mask):
        return request.GetImage(display = self.display,
                                format = format,
                                drawable = self.id,
                                x = x,
                                y = y,
                                width = width,
                                height = height,
                                plane_mask = plane_mask)

    def draw_text(self, gc, x, y, text, onerror = None):
        request.PolyText8(display = self.display,
                          onerror = onerror,
                          drawable = self.id,
                          gc = gc,
                          x = x,
                          y = y,
                          items = [text])

    def poly_text(self, gc, x, y, items, onerror = None):
        request.PolyText8(display = self.display,
                          onerror = onerror,
                          drawable = self.id,
                          gc = gc,
                          x = x,
                          y = y,
                          items = items)

    def poly_text_16(self, gc, x, y, items, onerror = None):
        request.PolyText16(display = self.display,
                           onerror = onerror,
                           drawable = self.id,
                           gc = gc,
                           x = x,
                           y = y,
                           items = items)

    def image_text(self, gc, x, y, string, onerror = None):
        request.ImageText8(display = self.display,
                           onerror = onerror,
                           drawable = self.id,
                           gc = gc,
                           x = x,
                           y = y,
                           string = string)

    def image_text_16(self, gc, x, y, string, onerror = None):
        request.ImageText16(display = self.display,
                            onerror = onerror,
                            drawable = self.id,
                            gc = gc,
                            x = x,
                            y = y,
                            string = string)

    def query_best_size(self, item_class, width, height):
        return request.QueryBestSize(display = self.display,
                                     item_class = item_class,
                                     drawable = self.id,
                                     width = width,
                                     height = height)

* Tue 03 Jun 2014 07:47:39 AM JST
        pass

* Tue 03 Jun 2014 07:50:22 AM JST
    def create_window(self, x, y, width, height, border_width, depth,
                      window_class =  X.CopyFromParent,
                      visual = X.CopyFromParent,
                      onerror = None,
                      **keys):

        wid = self.display.allocate_resource_id()
        request.CreateWindow(display = self.display,
                             onerror = onerror,
                             depth = depth,
                             wid = wid,
                             parent = self.id,
                             x = x,
                             y = y,
                             width = width,
                             height = height,
                             border_width = border_width,
                             window_class = window_class,
                             visual = visual,
                             attrs = keys)

        cls = self.display.get_resource_class('window', Window)
        return cls(self.display, wid, owner = 1)

    def change_attributes(self, onerror = None, **keys):
        request.ChangeWindowAttributes(display = self.display,
                                       onerror = onerror,
                                       window = self.id,
                                       attrs = keys)

    def get_attributes(self):
        return request.GetWindowAttributes(display = self.display,
                                           window = self.id)

    def destroy(self, onerror = None):
        request.DestroyWindow(display = self.display,
                              onerror = onerror,
                              window = self.id)

        self.display.free_resource_id(self.id)

    def destroy_sub_windows(self, onerror = None):
        request.DestroySubWindows(display = self.display,
                                  onerror = onerror,
                                  window = self.id)


    def change_save_set(self, mode, onerror = None):
        request.ChangeSaveSet(display = self.display,
                              onerror = onerror,
                              mode = mode,
                              window = self.id)

    def reparent(self, parent, x, y, onerror = None):
        request.ReparentWindow(display = self.display,
                               onerror = onerror,
                               window = self.id,
                               parent = parent,
                               x = x,
                               y = y)

    def map(self, onerror = None):
        request.MapWindow(display = self.display,
                          onerror = onerror,
                          window = self.id)

    def map_sub_windows(self, onerror = None):
        request.MapSubwindows(display = self.display,
                              onerror = onerror,
                              window = self.id)

    def unmap(self, onerror = None):
        request.UnmapWindow(display = self.display,
                            onerror = onerror,
                            window = self.id)

    def unmap_sub_windows(self, onerror = None):
        request.UnmapSubwindows(display = self.display,
                                onerror = onerror,
                                window = self.id)

    def configure(self, onerror = None, **keys):
        request.ConfigureWindow(display = self.display,
                                onerror = onerror,
                                window = self.id,
                                attrs = keys)

    def circulate(self, direction, onerror = None):
        request.CirculateWindow(display = self.display,
                                onerror = onerror,
                                direction = direction,
                                window = self.id)

    def raise_window(self, onerror = None):
        """alias for raising the window to the top - as in XRaiseWindow"""
        self.configure(onerror, stack_mode = X.Above)

    def query_tree(self):
        return request.QueryTree(display = self.display,
                                 window = self.id)


    def change_property(self, property, type, format, data,
                        mode = X.PropModeReplace, onerror = None):

        request.ChangeProperty(display = self.display,
                               onerror = onerror,
                               mode = mode,
                               window = self.id,
                               property = property,
                               type = type,
                               data = (format, data))

    def delete_property(self, property, onerror = None):
        request.DeleteProperty(display = self.display,
                               onerror = onerror,
                               window = self.id,
                               property = property)

    def get_property(self, property, type, offset, length, delete = 0):
        r = request.GetProperty(display = self.display,
                                delete = delete,
                                window = self.id,
                                property = property,
                                type = type,
                                long_offset = offset,
                                long_length = length)

        if r.property_type:
            fmt, value = r.value
            r.format = fmt
            r.value = value
            return r
        else:
            return None

    def get_full_property(self, property, type, sizehint = 10):
        prop = self.get_property(property, type, 0, sizehint)
        if prop:
            val = prop.value
            if prop.bytes_after:
                prop = self.get_property(property, type, sizehint,
                                         prop.bytes_after / 4 + 1)
                val = val + prop.value

            prop.value = val
            return prop
        else:
            return None

    def list_properties(self):
        r = request.ListProperties(display = self.display,
                                   window = self.id)
        return r.atoms

    def set_selection_owner(self, selection, time, onerror = None):
        request.SetSelectionOwner(display = self.display,
                                  onerror = onerror,
                                  window = self.id,
                                  selection = selection,
                                  time = time)

    def convert_selection(self, selection, target, property, time, onerror = None):
        request.ConvertSelection(display = self.display,
                                 onerror = onerror,
                                 requestor = self.id,
                                 selection = selection,
                                 target = target,
                                 property = property,
                                 time = time)

    def send_event(self, event, event_mask = 0, propagate = 0, onerror = None):
        request.SendEvent(display = self.display,
                          onerror = onerror,
                          propagate = propagate,
                          destination = self.id,
                          event_mask = event_mask,
                          event = event)

    def grab_pointer(self, owner_events, event_mask,
                     pointer_mode, keyboard_mode,
                     confine_to, cursor, time):

        r = request.GrabPointer(display = self.display,
                                owner_events = owner_events,
                                grab_window = self.id,
                                event_mask = event_mask,
                                pointer_mode = pointer_mode,
                                keyboard_mode = keyboard_mode,
                                confine_to = confine_to,
                                cursor = cursor,
                                time = time)
        return r.status

    def grab_button(self, button, modifiers, owner_events, event_mask,
                    pointer_mode, keyboard_mode,
                    confine_to, cursor, onerror = None):

        request.GrabButton(display = self.display,
                           onerror = onerror,
                           owner_events = owner_events,
                           grab_window = self.id,
                           event_mask = event_mask,
                           pointer_mode = pointer_mode,
                           keyboard_mode = keyboard_mode,
                           confine_to = confine_to,
                           cursor = cursor,
                           button = button,
                           modifiers = modifiers)

    def ungrab_button(self, button, modifiers, onerror = None):
        request.UngrabButton(display = self.display,
                             onerror = onerror,
                             button = button,
                             grab_window = self.id,
                             modifiers = modifiers)


    def grab_keyboard(self, owner_events, pointer_mode, keyboard_mode, time):
        r = request.GrabKeyboard(display = self.display,
                                 owner_events = owner_events,
                                 grab_window = self.id,
                                 time = time,
                                 pointer_mode = pointer_mode,
                                 keyboard_mode = keyboard_mode)

        return r.status

    def grab_key(self, key, modifiers, owner_events, pointer_mode, keyboard_mode, onerror = None):
        request.GrabKey(display = self.display,
                        onerror = onerror,
                        owner_events = owner_events,
                        grab_window = self.id,
                        modifiers = modifiers,
                        key = key,
                        pointer_mode = pointer_mode,
                        keyboard_mode = keyboard_mode)

    def ungrab_key(self, key, modifiers, onerror = None):
        request.UngrabKey(display = self.display,
                          onerror = onerror,
                          key = key,
                          grab_window = self.id,
                          modifiers = modifiers)

    def query_pointer(self):
        return request.QueryPointer(display = self.display,
                                    window = self.id)

    def get_motion_events(self, start, stop):
        r = request.GetMotionEvents(display = self.display,
                                    window = self.id,
                                    start = start,
                                    stop = stop)
        return r.events

    def translate_coords(self, src_window, src_x, src_y):
        return request.TranslateCoords(display = self.display,
                                       src_wid = src_window,
                                       dst_wid = self.id,
                                       src_x = src_x,
                                       src_y = src_y)

    def warp_pointer(self, x, y, src_window = 0, src_x = 0, src_y = 0,
                     src_width = 0, src_height = 0, onerror = None):

        request.WarpPointer(display = self.display,
                            onerror = onerror,
                            src_window = src_window,
                            dst_window = self.id,
                            src_x = src_x,
                            src_y = src_y,
                            src_width = src_width,
                            src_height = src_height,
                            dst_x = x,
                            dst_y = y)

    def set_input_focus(self, revert_to, time, onerror = None):
        request.SetInputFocus(display = self.display,
                              onerror = onerror,
                              revert_to = revert_to,
                              focus = self.id,
                              time = time)

    def clear_area(self, x = 0, y = 0, width = 0, height = 0, exposures = 0, onerror = None):
        request.ClearArea(display = self.display,
                          onerror = onerror,
                          exposures = exposures,
                          window = self.id,
                          x = x,
                          y = y,
                          width = width,
                          height = height)

    def create_colormap(self, visual, alloc):
        mid = self.display.allocate_resource_id()
        request.CreateColormap(display = self.display,
                               alloc = alloc,
                               mid = mid,
                               window = self.id,
                               visual = visual)
        cls = self.display.get_resource_class('colormap', colormap.Colormap)
        return cls(self.display, mid, owner = 1)

    def list_installed_colormaps(self):
        r = request.ListInstalledColormaps(display = self.display,
                                           window = self.id)
        return r.cmaps

    def rotate_properties(self, properties, delta, onerror = None):
        request.RotateProperties(display = self.display,
                                 onerror = onerror,
                                 window = self.id,
                                 delta = delta,
                                 properties = properties)

    def set_wm_name(self, name, onerror = None):
        self.change_property(Xatom.WM_NAME, Xatom.STRING, 8, name,
                             onerror = onerror)

    def get_wm_name(self):
        d = self.get_full_property(Xatom.WM_NAME, Xatom.STRING)
        if d is None or d.format != 8:
            return None
        else:
            return d.value

    def set_wm_icon_name(self, name, onerror = None):
        self.change_property(Xatom.WM_ICON_NAME, Xatom.STRING, 8, name,
                             onerror = onerror)

    def get_wm_icon_name(self):
        d = self.get_full_property(Xatom.WM_ICON_NAME, Xatom.STRING)
        if d is None or d.format != 8:
            return None
        else:
            return d.value


    def set_wm_class(self, inst, cls, onerror = None):
        self.change_property(Xatom.WM_CLASS, Xatom.STRING, 8,
                             '%s\0%s\0' % (inst, cls),
                             onerror = onerror)

    def get_wm_class(self):
        d = self.get_full_property(Xatom.WM_CLASS, Xatom.STRING)
        if d is None or d.format != 8:
            return None
        else:
            parts = string.split(d.value, '\0')
            if len(parts) < 2:
                return None
            else:
                return parts[0], parts[1]

    def set_wm_transient_for(self, window, onerror = None):
        self.change_property(Xatom.WM_TRANSIENT_FOR, Xatom.WINDOW,
                             32, window.id,
                             onerror = onerror)

    def get_wm_transient_for(self):
        d = self.get_property(Xatom.WM_TRANSIENT_FOR, Xatom.WINDOW, 0, 1)
        if d is None or d.format != 32 or len(d.value) < 1:
            return None
        else:
            cls = self.display.get_resource_class('window', Window)
            return cls(self.display, d.value[0])


    def set_wm_protocols(self, protocols, onerror = None):
        self.change_property(self.display.get_atom('WM_PROTOCOLS'),
                             Xatom.ATOM, 32, protocols,
                             onerror = onerror)

    def get_wm_protocols(self):
        d = self.get_full_property(self.display.get_atom('WM_PROTOCOLS'), Xatom.ATOM)
        if d is None or d.format != 32:
            return []
        else:
            return d.value

    def set_wm_colormap_windows(self, windows, onerror = None):
        self.change_property(self.display.get_atom('WM_COLORMAP_WINDOWS'),
                             Xatom.WINDOW, 32,
                             map(lambda w: w.id, windows),
                             onerror = onerror)

    def get_wm_colormap_windows(self):
        d = self.get_full_property(self.display.get_atom('WM_COLORMAP_WINDOWS'),
                                   Xatom.WINDOW)
        if d is None or d.format != 32:
            return []
        else:
            cls = self.display.get_resource_class('window', Window)
            return map(lambda i, d = self.display, c = cls: c(d, i),
                       d.value)


    def set_wm_client_machine(self, name, onerror = None):
        self.change_property(Xatom.WM_CLIENT_MACHINE, Xatom.STRING, 8, name,
                             onerror = onerror)

    def get_wm_client_machine(self):
        d = self.get_full_property(Xatom.WM_CLIENT_MACHINE, Xatom.STRING)
        if d is None or d.format != 8:
            return None
        else:
            return d.value

    def set_wm_normal_hints(self, hints = {}, onerror = None, **keys):
        self._set_struct_prop(Xatom.WM_NORMAL_HINTS, Xatom.WM_SIZE_HINTS,
                              icccm.WMNormalHints, hints, keys, onerror)

    def get_wm_normal_hints(self):
        return self._get_struct_prop(Xatom.WM_NORMAL_HINTS, Xatom.WM_SIZE_HINTS,
                                     icccm.WMNormalHints)

    def set_wm_hints(self, hints = {}, onerror = None, **keys):
        self._set_struct_prop(Xatom.WM_HINTS, Xatom.WM_HINTS,
                              icccm.WMHints, hints, keys, onerror)

    def get_wm_hints(self):
        return self._get_struct_prop(Xatom.WM_HINTS, Xatom.WM_HINTS,
                                     icccm.WMHints)

    def set_wm_state(self, hints = {}, onerror = None, **keys):
        atom = self.display.get_atom('WM_STATE')
        self._set_struct_prop(atom, atom, icccm.WMState, hints, keys, onerror)

    def get_wm_state(self):
        atom = self.display.get_atom('WM_STATE')
        return self._get_struct_prop(atom, atom, icccm.WMState)

    def set_wm_icon_size(self, hints = {}, onerror = None, **keys):
        self._set_struct_prop(Xatom.WM_ICON_SIZE, Xatom.WM_ICON_SIZE,
                              icccm.WMIconSize, hints, keys, onerror)

    def get_wm_icon_size(self):
        return self._get_struct_prop(Xatom.WM_ICON_SIZE, Xatom.WM_ICON_SIZE,
                                     icccm.WMIconSize)

    # Helper function for getting structured properties.
    # pname and ptype are atoms, and pstruct is a Struct object.
    # Returns a DictWrapper, or None

    def _get_struct_prop(self, pname, ptype, pstruct):
        r = self.get_property(pname, ptype, 0, pstruct.static_size / 4)
        if r and r.format == 32:
            value = r.value.tostring()
            if len(value) == pstruct.static_size:
                return pstruct.parse_binary(value, self.display)[0]

        return None

    # Helper function for setting structured properties.
    # pname and ptype are atoms, and pstruct is a Struct object.
    # hints is a mapping or a DictWrapper, keys is a mapping.  keys
    # will be modified.  onerror is the error handler.

    def _set_struct_prop(self, pname, ptype, pstruct, hints, keys, onerror):
        if isinstance(hints, rq.DictWrapper):
            keys.update(hints._data)
        else:
            keys.update(hints)

        value = apply(pstruct.to_binary, (), keys)

        self.change_property(pname, ptype, 32, value, onerror = onerror)

* Tue 03 Jun 2014 07:50:40 AM JST
        pass

* Tue 03 Jun 2014 07:55:18 AM JST
def set_wm_colormap_windows(self, windows,
* Tue 03 Jun 2014 07:55:38 AM JST
                  
* Tue 03 Jun 2014 07:55:48 AM JST
                
* Tue 03 Jun 2014 07:55:57 AM JST
                    
* Tue 03 Jun 2014 07:56:32 AM JST
                        
* Tue 03 Jun 2014 08:12:38 AM JST
from xcb2.geometry import WindowGeometry
* Tue 03 Jun 2014 08:12:45 AM JST
from xcb2.window.windowtypes import FundamentalWindow, WINDOW_TYPES
* Tue 03 Jun 2014 08:12:50 AM JST
from struct import pack as _pack
* Tue 03 Jun 2014 08:13:10 AM JST
        reply = self.connection.core.GetGeometry(self).reply()
        win = WindowGeometry(self.connection, reply, self)
        return win.translate_coordinates()

* Tue 03 Jun 2014 08:14:34 AM JST
                      
* Tue 03 Jun 2014 08:14:48 AM JST
                        
* Tue 03 Jun 2014 08:14:54 AM JST
                     
* Tue 03 Jun 2014 08:20:03 AM JST
return self.connection.core.MapWindow(self)
* Tue 03 Jun 2014 08:21:14 AM JST
MapSubWindow
* Tue 03 Jun 2014 08:21:23 AM JST
MapSubwindows
* Tue 03 Jun 2014 08:22:30 AM JST
return self.connection.core.UnmapWindow(self)
* Tue 03 Jun 2014 08:23:09 AM JST
UnmapSubwindows
* Tue 03 Jun 2014 08:26:10 AM JST
def magic_type(self, str_):
    r"""type() builtin function."""
    print(type(eval(str_)))
* Tue 03 Jun 2014 08:26:19 AM JST
type
* Tue 03 Jun 2014 08:26:32 AM JST
impo
* Tue 03 Jun 2014 08:26:40 AM JST

* Tue 03 Jun 2014 08:26:40 AM JST

* Tue 03 Jun 2014 08:26:40 AM JST
    r"""type() builtin function."""

* Tue 03 Jun 2014 08:26:43 AM JST
def magic_list(self, str_):
    pprint(list(eval(str_)))

* Tue 03 Jun 2014 08:26:49 AM JST
c.InteractiveShellApp.exec_lines.append('''\
def magic_type(self, str_):
    r"""type() builtin function."""
    print(type(eval(str_)))''')
c.InteractiveShellApp.exec_lines.append(
    "get_ipython().define_magic('T', magic_type)")

* Tue 03 Jun 2014 08:26:55 AM JST
def magic_list(self, str_):
    pprint(list(eval(str_)))
* Tue 03 Jun 2014 08:27:59 AM JST
from pprint import pprint
* Tue 03 Jun 2014 08:28:22 AM JST
import xcb2
c=xcb2
c=xcb2.connect()

* Tue 03 Jun 2014 08:28:26 AM JST

* Tue 03 Jun 2014 08:28:26 AM JST

* Tue 03 Jun 2014 08:28:26 AM JST
c=xcb2

* Tue 03 Jun 2014 08:28:28 AM JST
import xcb2
c=xcb2.connect()

* Tue 03 Jun 2014 08:29:59 AM JST
def magic_dir(self, str_):
    """pprint dir() function"""
    evaled = eval(str_)
    try:
        from t1 import listutil
        from inspect import getmembers
        from columnize import columnize
        import predicate
        from colorama import init
        from t1.coloramautil.formatter import (FORERED_RESET, FOREGREEN_RESET,
                         FOREWHITE_RESET, FORECYAN_RESET, FOREYELLOW_RESET)
        init()
        lis, append = listutil.make_list_append()
        for name, elem in getmembers(evaled):
            if predicate.isclass(elem):
                name = FOREGREEN_RESET(name)
            elif predicate.iscallable(elem):
                name = FORERED_RESET(name)
            elif predicate.ismodule(elem):
                name = FORECYAN_RESET(name)
            elif not name.startswith(('_')):
                name = FOREYELLOW_RESET(name)
            else:
                name = FOREWHITE_RESET(name)
            append(name)
        print(columnize(lis, displaywidth=110))[:-2] # trim '\\n'
    except ImportError:
        from pprint import pprint
        pprint(dir(eval(str_)))
* Tue 03 Jun 2014 08:32:06 AM JST
hello')
* Tue 03 Jun 2014 08:34:56 AM JST
def magic_dir(self, regexp, str_):
    """pprint dir() function"""
    evaled = eval(str_)
    try:
        import re
        import predicate
        from t1 import listutil
        from inspect import getmembers
        from columnize import columnize
        from colorama import init
        from t1.coloramautil.formatter import (FORERED_RESET, FOREGREEN_RESET,
                         FOREWHITE_RESET, FORECYAN_RESET, FOREYELLOW_RESET)
        init()
        reg = re.compile(regexp)
        lis, append = listutil.make_list_append()
        for name, elem in getmembers(evaled):
            if reg.search(name) is None:
                continue
            if predicate.isclass(elem):
                name = FOREGREEN_RESET(name)
            elif predicate.iscallable(elem):
                name = FORERED_RESET(name)
            elif predicate.ismodule(elem):
                name = FORECYAN_RESET(name)
            elif not name.startswith(('_')):
                name = FOREYELLOW_RESET(name)
            else:
                name = FOREWHITE_RESET(name)
            append(name)
        print(columnize(lis, displaywidth=110))[:-2] # trim '\\n'
    except ImportError:
        from pprint import pprint
        pprint(dir(eval(str_)))

* Tue 03 Jun 2014 08:35:07 AM JST
def magic_dir(self, regexp, str_):
    """pprint dir() grep function"""
    evaled = eval(str_)
    try:
        import re
        import predicate
        from t1 import listutil
        from inspect import getmembers
        from columnize import columnize
        from colorama import init
        from t1.coloramautil.formatter import (FORERED_RESET, FOREGREEN_RESET,
                         FOREWHITE_RESET, FORECYAN_RESET, FOREYELLOW_RESET)
        init()
        reg = re.compile(regexp)
        lis, append = listutil.make_list_append()
        for name, elem in getmembers(evaled):
            if reg.search(name) is None:
                continue
            if predicate.isclass(elem):
                name = FOREGREEN_RESET(name)
            elif predicate.iscallable(elem):
                name = FORERED_RESET(name)
            elif predicate.ismodule(elem):
                name = FORECYAN_RESET(name)
            elif not name.startswith(('_')):
                name = FOREYELLOW_RESET(name)
            else:
                name = FOREWHITE_RESET(name)
            append(name)
        print(columnize(lis, displaywidth=110))[:-2] # trim '\\n'
    except ImportError:
        from pprint import pprint
        pprint(dir(eval(str_)))
* Tue 03 Jun 2014 08:35:20 AM JST
c.InteractiveShellApp.exec_lines.append('''\
def magic_type(self, str_):
    r"""type() builtin function."""
    print(type(eval(str_)))''')
c.InteractiveShellApp.exec_lines.append(
    "get_ipython().define_magic('T', magic_type)")

* Tue 03 Jun 2014 08:35:30 AM JST
def magic_dir(self, regexp, str_):
    """pprint dir() grep function"""
    evaled = eval(str_)
    try:
        import re
        import predicate
        from t1 import listutil
        from inspect import getmembers
        from columnize import columnize
        from colorama import init
        from t1.coloramautil.formatter import (FORERED_RESET, FOREGREEN_RESET,
                         FOREWHITE_RESET, FORECYAN_RESET, FOREYELLOW_RESET)
        init()
        reg = re.compile(regexp)
        lis, append = listutil.make_list_append()
        for name, elem in getmembers(evaled):
            if reg.search(name) is None:
                continue
            if predicate.isclass(elem):
                name = FOREGREEN_RESET(name)
            elif predicate.iscallable(elem):
                name = FORERED_RESET(name)
            elif predicate.ismodule(elem):
                name = FORECYAN_RESET(name)
            elif not name.startswith(('_')):
                name = FOREYELLOW_RESET(name)
            else:
                name = FOREWHITE_RESET(name)
            append(name)
        print(columnize(lis, displaywidth=110))[:-2] # trim '\\n'
    except ImportError:
        from pprint import pprint
        pprint(dir(eval(str_)))
* Tue 03 Jun 2014 08:36:09 AM JST
import xcb2
c=xcb2.connect()

* Tue 03 Jun 2014 08:39:39 AM JST
regexp, 
* Tue 03 Jun 2014 08:39:42 AM JST
str_
* Tue 03 Jun 2014 08:39:56 AM JST
print(str_)
* Tue 03 Jun 2014 08:40:09 AM JST
def magic_dir(self, str_):
    """pprint dir() grep function"""
    print(str_)
    evaled = eval(str_)
    try:
        import re
        import predicate
        from t1 import listutil
        from inspect import getmembers
        from columnize import columnize
        from colorama import init
        from t1.coloramautil.formatter import (FORERED_RESET, FOREGREEN_RESET,
                         FOREWHITE_RESET, FORECYAN_RESET, FOREYELLOW_RESET)
        init()
        # reg = re.compile(regexp)
        lis, append = listutil.make_list_append()
        for name, elem in getmembers(evaled):
            # if reg.search(name) is None:
                # continue
            if predicate.isclass(elem):
                name = FOREGREEN_RESET(name)
            elif predicate.iscallable(elem):
                name = FORERED_RESET(name)
            elif predicate.ismodule(elem):
                name = FORECYAN_RESET(name)
            elif not name.startswith(('_')):
                name = FOREYELLOW_RESET(name)
            else:
                name = FOREWHITE_RESET(name)
            append(name)
        print(columnize(lis, displaywidth=110))[:-2] # trim '\\n'
    except ImportError:
        from pprint import pprint
        pprint(dir(eval(str_)))

* Tue 03 Jun 2014 08:40:36 AM JST
import xcb2
c=xcb2.connect()

* Tue 03 Jun 2014 08:41:03 AM JST
c.core
* Tue 03 Jun 2014 08:41:22 AM JST
c c.core
* Tue 03 Jun 2014 08:42:34 AM JST
google
* Tue 03 Jun 2014 08:42:49 AM JST

* Tue 03 Jun 2014 08:42:49 AM JST

* Tue 03 Jun 2014 08:42:49 AM JST
    print(str_)

* Tue 03 Jun 2014 08:43:45 AM JST
def magic_dir(self, str_):
    """pprint dir() grep function"""
    regexp, str_ = str_.split(' ', 1)
    evaled = eval(str_)
    try:
        import re
        import predicate
        from t1 import listutil
        from inspect import getmembers
        from columnize import columnize
        from colorama import init
        from t1.coloramautil.formatter import (FORERED_RESET, FOREGREEN_RESET,
                         FOREWHITE_RESET, FORECYAN_RESET, FOREYELLOW_RESET)
        init()
        reg = re.compile(regexp)
        lis, append = listutil.make_list_append()
        for name, elem in getmembers(evaled):
            if reg.search(name) is None:
                continue
            if predicate.isclass(elem):
                name = FOREGREEN_RESET(name)
            elif predicate.iscallable(elem):
                name = FORERED_RESET(name)
            elif predicate.ismodule(elem):
                name = FORECYAN_RESET(name)
            elif not name.startswith(('_')):
                name = FOREYELLOW_RESET(name)
            else:
                name = FOREWHITE_RESET(name)
            append(name)
        print(columnize(lis, displaywidth=110))[:-2] # trim '\\n'
    except ImportError:
        from pprint import pprint
        pprint(dir(eval(str_)))
* Tue 03 Jun 2014 08:44:03 AM JST
import xcb2
c=xcb2.connect()

* Tue 03 Jun 2014 08:45:37 AM JST
str_
* Tue 03 Jun 2014 08:45:57 AM JST
import xcb2
c=xcb2.connect()

* Tue 03 Jun 2014 08:46:15 AM JST

* Tue 03 Jun 2014 08:46:15 AM JST

* Tue 03 Jun 2014 08:46:15 AM JST
    print(type(str_))

* Tue 03 Jun 2014 08:46:31 AM JST
import xcb2
c=xcb2.connect()

* Tue 03 Jun 2014 08:53:34 AM JST
import xcb2
c=xcb2.connect()

* Tue 03 Jun 2014 08:53:39 AM JST
import xcb2
c=xcb2.connect()

* Tue 03 Jun 2014 09:08:08 AM JST

* Tue 03 Jun 2014 09:08:09 AM JST

* Tue 03 Jun 2014 09:08:09 AM JST
    ("\C-e\C-c\C-x"   'py:refact-doc)

* Tue 03 Jun 2014 09:08:09 AM JST
    ("\C-e\C-c\C-x"   'py:refact-doc)

* Tue 03 Jun 2014 09:08:09 AM JST
    ("\C-e\C-c\C-x"   'py:refact-doc)
    ("\C-e\C-cd"      'py:refact-doc)

* Tue 03 Jun 2014 09:10:01 AM JST

* Tue 03 Jun 2014 09:10:01 AM JST

* Tue 03 Jun 2014 09:10:01 AM JST
  ( "\C-c" 'add-change-log-entry-other-window )

* Tue 03 Jun 2014 09:10:41 AM JST
  
* Tue 03 Jun 2014 09:10:48 AM JST
to
* Tue 03 Jun 2014 09:10:48 AM JST
copy-to
* Tue 03 Jun 2014 09:29:25 AM JST
return self.connection.core.DestroyWindow(self)
* Tue 03 Jun 2014 09:29:33 AM JST
return self.connection.core.DestroySubwindows(self)
* Tue 03 Jun 2014 09:29:45 AM JST
return self.connection.core.GetWindowAttributes(self).reply()
* Tue 03 Jun 2014 09:30:12 AM JST
        return self.connection.core.ChangeWindowAttributes(
            self, mask, value_list)

* Tue 03 Jun 2014 09:30:21 AM JST
keys
* Tue 03 Jun 2014 09:36:10 AM JST
ReparentWindow
* Tue 03 Jun 2014 09:36:19 AM JST
pass
* Tue 03 Jun 2014 09:36:21 AM JST
core.
* Tue 03 Jun 2014 09:36:22 AM JST
c.core.
* Tue 03 Jun 2014 09:36:44 AM JST
self, 
* Tue 03 Jun 2014 09:37:09 AM JST
.id
* Tue 03 Jun 2014 09:40:08 AM JST
Change 
* Tue 03 Jun 2014 09:40:09 AM JST
DG Change 
* Tue 03 Jun 2014 09:40:20 AM JST
pass
* Tue 03 Jun 2014 09:44:54 AM JST
SUMMARY
* Tue 03 Jun 2014 09:44:57 AM JST
SUMMARY
* Tue 03 Jun 2014 09:47:40 AM JST
Struct 
* Tue 03 Jun 2014 09:48:48 AM JST
SUMMARY
* Tue 03 Jun 2014 10:01:09 AM JST
SUMMARY
* Tue 03 Jun 2014 10:01:24 AM JST
DestroyWindow
* Tue 03 Jun 2014 10:01:42 AM JST
DestroySubwindows
* Tue 03 Jun 2014 10:01:50 AM JST
ChangeSaveSet
* Tue 03 Jun 2014 10:02:04 AM JST
ReparentWindow
* Tue 03 Jun 2014 10:02:15 AM JST
MapWindow
* Tue 03 Jun 2014 10:02:24 AM JST
MapSubwindows
* Tue 03 Jun 2014 10:02:33 AM JST
UnmapWindow
* Tue 03 Jun 2014 10:02:41 AM JST
UnmapSubwindows
* Tue 03 Jun 2014 10:09:58 AM JST
return self.connection.core.ConfigureWindow(self, mask, values)
* Tue 03 Jun 2014 10:10:10 AM JST
ConfigureWindow
* Tue 03 Jun 2014 10:10:39 AM JST
return self.connection.core.QueryTree(self)
* Tue 03 Jun 2014 10:10:50 AM JST
QueryTree
* Tue 03 Jun 2014 10:12:48 AM JST
        return self.connection.core.GetProperty(delete,
            self, property_, offset, length)

* Tue 03 Jun 2014 10:14:11 AM JST
GetProperty
* Tue 03 Jun 2014 10:14:26 AM JST
        return self.connection.core.ChangeProperty(
            mode, self, property_, type_, format_, data_len, data)

* Tue 03 Jun 2014 10:15:30 AM JST
mode
* Tue 03 Jun 2014 10:15:46 AM JST
ChangeProperty
* Tue 03 Jun 2014 10:16:11 AM JST
return self.connection.core.DeleteProperty(self, property_)
* Tue 03 Jun 2014 10:16:57 AM JST
DeleteProperty
* Tue 03 Jun 2014 10:17:31 AM JST
return self.connection.core.ListProperties(self)
* Tue 03 Jun 2014 10:17:56 AM JST
ListProperties
* Tue 03 Jun 2014 10:26:05 AM JST
return self.connection.core.SendEvent(0, self, event_mask, event)
* Tue 03 Jun 2014 10:26:53 AM JST
SUMMARY
* Tue 03 Jun 2014 10:31:20 AM JST
self.connection.core.GrabKey.async(owner_events, self, key, modifiers)
* Tue 03 Jun 2014 10:31:29 AM JST
async
* Tue 03 Jun 2014 10:32:00 AM JST
owner_events,
* Tue 03 Jun 2014 10:32:10 AM JST
               
* Tue 03 Jun 2014 10:34:24 AM JST
async?
* Tue 03 Jun 2014 10:37:58 AM JST
            
* Tue 03 Jun 2014 10:41:23 AM JST
            
* Tue 03 Jun 2014 10:43:08 AM JST
pass
* Tue 03 Jun 2014 10:44:05 AM JST
GrabButton
* Tue 03 Jun 2014 10:44:28 AM JST
SUMMARY
* Tue 03 Jun 2014 10:44:40 AM JST
UngrabButton
* Tue 03 Jun 2014 10:44:58 AM JST
owner_events, 
* Tue 03 Jun 2014 10:45:39 AM JST
pass
* Tue 03 Jun 2014 10:46:50 AM JST
pointer_mode=1, keyboard_mode=1,
* Tue 03 Jun 2014 10:46:53 AM JST
                      
* Tue 03 Jun 2014 10:47:15 AM JST
SUMMARY
* Tue 03 Jun 2014 10:47:59 AM JST
UngrabKeyboard
* Tue 03 Jun 2014 10:48:29 AM JST
DG Ungrab 
* Tue 03 Jun 2014 10:48:56 AM JST
UngrabKeyboard
* Tue 03 Jun 2014 10:49:34 AM JST
core.GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode)
* Tue 03 Jun 2014 10:50:05 AM JST
self, 
* Tue 03 Jun 2014 10:50:06 AM JST
            self, 
* Tue 03 Jun 2014 10:50:10 AM JST
            
* Tue 03 Jun 2014 10:50:17 AM JST
grab_window
* Tue 03 Jun 2014 10:50:48 AM JST
SUMMARY
* Tue 03 Jun 2014 10:51:32 AM JST
pass
* Tue 03 Jun 2014 10:52:12 AM JST
SUMMARY
* Tue 03 Jun 2014 10:56:08 AM JST
return self.connection.core.SetInputFocus.focus(self)
* Tue 03 Jun 2014 10:56:32 AM JST
core.SetInputFocus.focus
* Tue 03 Jun 2014 10:58:12 AM JST
focus
* Tue 03 Jun 2014 10:58:34 AM JST
SUMMARY
* Tue 03 Jun 2014 11:08:39 AM JST
        try:
            name = (self.core.GetProperty
                    ._NET_WM_NAME(self).reply().get_full_value())
        except BadWindow as err:
            LOG.warn('Warning {}'.format(err))
            name = ''
        return (name or
                self.core.GetProperty.WM_NAME(self).reply().get_full_value())

* Tue 03 Jun 2014 11:09:40 AM JST

* Tue 03 Jun 2014 11:09:40 AM JST

* Tue 03 Jun 2014 11:09:40 AM JST
        try:

* Tue 03 Jun 2014 11:09:42 AM JST
        
* Tue 03 Jun 2014 11:11:12 AM JST
                
* Tue 03 Jun 2014 11:12:06 AM JST
46137366
* Tue 03 Jun 2014 11:18:01 AM JST
67108877
* Tue 03 Jun 2014 11:20:12 AM JST
import
* Tue 03 Jun 2014 11:20:22 AM JST
simple_teswindow
* Tue 03 Jun 2014 11:20:30 AM JST
67108864
* Tue 03 Jun 2014 11:25:06 AM JST
connection.
* Tue 03 Jun 2014 11:25:11 AM JST
 # if not exist _NET_WM_NAME return ''
* Tue 03 Jun 2014 11:25:13 AM JST
                
* Tue 03 Jun 2014 11:25:17 AM JST
name =
* Tue 03 Jun 2014 11:26:22 AM JST
_
* Tue 03 Jun 2014 11:26:23 AM JST
GetProperty._
* Tue 03 Jun 2014 11:26:23 AM JST
core.GetProperty._
* Tue 03 Jun 2014 11:26:23 AM JST
self.core.GetProperty._
* Tue 03 Jun 2014 11:26:28 AM JST

* Tue 03 Jun 2014 11:26:28 AM JST

* Tue 03 Jun 2014 11:26:28 AM JST
        return self.core.GetProperty._NET_WM_NAME(self).reply().get_full_value()

* Tue 03 Jun 2014 11:26:30 AM JST

* Tue 03 Jun 2014 11:26:30 AM JST

* Tue 03 Jun 2014 11:26:30 AM JST
        return 

* Tue 03 Jun 2014 11:26:38 AM JST
or 
* Tue 03 Jun 2014 11:26:39 AM JST
name or 
* Tue 03 Jun 2014 11:26:46 AM JST
connection.
* Tue 03 Jun 2014 11:26:59 AM JST
SUMMARY
* Tue 03 Jun 2014 11:27:38 AM JST
GetProperty WM_NAME
* Tue 03 Jun 2014 11:29:47 AM JST
pass
* Tue 03 Jun 2014 11:30:45 AM JST
SUMMARY
* Tue 03 Jun 2014 11:34:44 AM JST
WM_CLASS?
* Tue 03 Jun 2014 11:34:56 AM JST
WM_STATE
* Tue 03 Jun 2014 11:35:40 AM JST
SUMMARY
* Tue 03 Jun 2014 11:38:06 AM JST
_NET_WM_STATE
* Tue 03 Jun 2014 11:39:09 AM JST
46137366
* Tue 03 Jun 2014 11:39:37 AM JST
_NET_
* Tue 03 Jun 2014 11:40:42 AM JST
core.
* Tue 03 Jun 2014 11:49:35 AM JST
    def set_net_wm_name(self, name):
        r"""SUMMARY

        set_net_wm_name(name)

        @Arguments:
        - `name`:

        @Return:
        """
        pass

    def get_net_wm_name(self, ):
        r"""GetProperty _NET_WM_NAME

        get_net_wm_name()

        @Return:
        """
        return self.core.GetProperty._NET_WM_NAME(
            self.id).reply().get_full_value()


* Tue 03 Jun 2014 11:49:55 AM JST
    def set_net_wm_state(self, atoms):
        r"""SUMMARY

        set_net_wm_state(atoms)

        @Arguments:
        - `atoms`:

        @Return:
        """
        pass

    def get_net_wm_state(self, ):
        r"""SUMMARY

        get_net_wm_state()

        @Return:
        """
        return self.core.GetProperty._NET_WM_STATE(
            self.id).reply().get_full_value()


* Tue 03 Jun 2014 11:50:21 AM JST
WM_ICON_NAME
* Tue 03 Jun 2014 11:51:44 AM JST
SUMMARY
* Tue 03 Jun 2014 11:52:18 AM JST
WM_TRANSIENT_FOR
* Tue 03 Jun 2014 11:52:48 AM JST
SUMMARY
* Tue 03 Jun 2014 11:53:36 AM JST
GetProperty
* Tue 03 Jun 2014 11:53:48 AM JST
GetProperty 
* Tue 03 Jun 2014 11:53:58 AM JST
self.
* Tue 03 Jun 2014 11:53:58 AM JST
return .self.
* Tue 03 Jun 2014 11:54:35 AM JST
SUMMARY
* Tue 03 Jun 2014 11:55:07 AM JST
pass
* Tue 03 Jun 2014 11:55:20 AM JST
WM_COLORMAP_WINDOWS
* Tue 03 Jun 2014 11:55:39 AM JST
SUMMARY
* Tue 03 Jun 2014 11:55:56 AM JST
        return self.core.GetProperty.WM_COLORMAP_WINDOWS(
            self.id).reply().get_full_value()

* Tue 03 Jun 2014 11:56:07 AM JST
SUMMARY
* Tue 03 Jun 2014 11:56:15 AM JST
WM_CLIENT_MACHINE
* Tue 03 Jun 2014 11:56:39 AM JST
SUMMARY
* Tue 03 Jun 2014 11:56:41 AM JST
WINDOWS
* Tue 03 Jun 2014 11:56:41 AM JST
COLORMAP_WINDOWS
* Tue 03 Jun 2014 12:15:33 PM JST
    def set_net_wm_name(self, name):
        r"""SUMMARY

        set_net_wm_name(name)

        @Arguments:
        - `name`:

        @Return:
        """
        pass

    def get_net_wm_name(self, ):
        r"""GetProperty _NET_WM_NAME

        get_net_wm_name()

        @Return:
        """
        return self.core.GetProperty._NET_WM_NAME(
            self.id).reply().get_full_value()

* Tue 03 Jun 2014 12:15:44 PM JST
$1
* Tue 03 Jun 2014 12:16:58 PM JST
_NET_CLOSE_WINDOW
* Tue 03 Jun 2014 12:17:07 PM JST
(46137366).reply().get_full_value()
* Tue 03 Jun 2014 12:17:41 PM JST
c.core.GetProperty._NET_CLOSE_WINDOW
* Tue 03 Jun 2014 12:17:57 PM JST
67108864
* Tue 03 Jun 2014 12:19:01 PM JST
c.core.GetProperty._NET_CLOSE_WINDOW(67108864).reply().get_full_value()
* Tue 03 Jun 2014 12:19:15 PM JST
_NET_CURRENT_DESKTOP
* Tue 03 Jun 2014 12:27:46 PM JST
_NET_WM_NAME
* Tue 03 Jun 2014 01:13:07 PM JST
pass
* Tue 03 Jun 2014 01:13:43 PM JST
SUMMARY
* Tue 03 Jun 2014 01:14:00 PM JST
pass
* Tue 03 Jun 2014 01:14:37 PM JST
SUMMARY
* Tue 03 Jun 2014 01:15:10 PM JST
_NET_SUPPORTED
* Tue 03 Jun 2014 01:15:33 PM JST
get_value
* Tue 03 Jun 2014 01:15:41 PM JST
SUMMARY
* Tue 03 Jun 2014 01:16:09 PM JST
_NET_WM_ICON
* Tue 03 Jun 2014 01:16:54 PM JST
SUMMARY
* Tue 03 Jun 2014 01:26:11 PM JST
pass
* Tue 03 Jun 2014 01:26:44 PM JST
SUMMARY
* Tue 03 Jun 2014 01:27:05 PM JST
pass
* Tue 03 Jun 2014 01:27:33 PM JST
SUMMARY
* Tue 03 Jun 2014 01:27:53 PM JST
pass
* Tue 03 Jun 2014 01:28:23 PM JST
SUMMARY
* Tue 03 Jun 2014 01:29:04 PM JST
        types = (self.connection.core.GetProperty._NET_WM_WINDOW_TYPE(self)
                 .reply().get_full_value())
        cls = WINDOW_TYPES.get(str(gfi(types)), None)
        if cls is None:
            root = self.connection.get_setup().roots[0].root
            if self.id == root:
                return root
            else:
                cls = FundamentalWindow
        return cls(self)

* Tue 03 Jun 2014 01:29:22 PM JST
from t1.listutil import get_first_index as gfi
* Tue 03 Jun 2014 01:30:02 PM JST
pass
* Tue 03 Jun 2014 01:30:34 PM JST
SUMMARY
* Tue 03 Jun 2014 01:40:38 PM JST
Window
* Tue 03 Jun 2014 01:45:32 PM JST
.reply().atoms
* Tue 03 Jun 2014 01:46:57 PM JST
atoms
* Tue 03 Jun 2014 01:46:58 PM JST
reply().atoms
* Tue 03 Jun 2014 01:47:28 PM JST
children:
* Tue 03 Jun 2014 01:47:30 PM JST
children:
* Tue 03 Jun 2014 01:47:30 PM JST
reply().children:
* Tue 03 Jun 2014 01:47:32 PM JST

* Tue 03 Jun 2014 01:47:32 PM JST

* Tue 03 Jun 2014 01:47:32 PM JST
            yield win

* Tue 03 Jun 2014 01:47:34 PM JST
for win in 
* Tue 03 Jun 2014 01:48:14 PM JST
return self.connection.core.QueryTree.recursive(self)
* Tue 03 Jun 2014 01:49:38 PM JST

* Tue 03 Jun 2014 01:49:38 PM JST

* Tue 03 Jun 2014 01:49:38 PM JST
        for win in self.window.query_recursive_tree():

* Tue 03 Jun 2014 01:49:38 PM JST
        for win in self.window.query_recursive_tree():

* Tue 03 Jun 2014 01:49:38 PM JST
        for win in self.window.query_recursive_tree():
            yield win.get_types()

* Tue 03 Jun 2014 01:49:58 PM JST
expetc:
* Tue 03 Jun 2014 01:50:06 PM JST
expect
* Tue 03 Jun 2014 01:52:26 PM JST
connection.
* Tue 03 Jun 2014 01:52:29 PM JST
self.flush()
* Tue 03 Jun 2014 01:54:23 PM JST
key, modifiers, owner_events=False,
                 pointer_mode=1, keyboard_mode=1
* Tue 03 Jun 2014 01:55:11 PM JST
            
* Tue 03 Jun 2014 01:56:40 PM JST

* Tue 03 Jun 2014 01:56:40 PM JST

* Tue 03 Jun 2014 01:56:40 PM JST
        reply = self.core.GetProperty._NET_WM_STATE(self).reply()

* Tue 03 Jun 2014 01:56:41 PM JST
get_full_value()
* Tue 03 Jun 2014 01:56:41 PM JST
reply.get_full_value()
* Tue 03 Jun 2014 01:56:48 PM JST
list_
* Tue 03 Jun 2014 01:57:06 PM JST
get_net_wm_state
* Tue 03 Jun 2014 01:58:08 PM JST
get_net_wm_user_time
* Tue 03 Jun 2014 01:58:17 PM JST

* Tue 03 Jun 2014 01:58:17 PM JST

* Tue 03 Jun 2014 01:58:17 PM JST
        reply = self.core.GetProperty._NET_WM_USER_TIME_WINDOW(self).reply()

* Tue 03 Jun 2014 01:58:35 PM JST
get_net_wm_allowed_actions
* Tue 03 Jun 2014 01:58:53 PM JST

* Tue 03 Jun 2014 01:58:53 PM JST

* Tue 03 Jun 2014 01:58:54 PM JST
        reply = self.core.GetProperty._NET_WM_ALLOWED_ACTIONS(self).reply()

* Tue 03 Jun 2014 01:59:37 PM JST
corewindow
* Tue 03 Jun 2014 02:00:11 PM JST
corewindow
* Tue 03 Jun 2014 02:01:22 PM JST
get_net_wm_window_type
* Tue 03 Jun 2014 02:06:21 PM JST
DG Grab 
* Tue 03 Jun 2014 02:15:51 PM JST
set
* Tue 03 Jun 2014 02:16:28 PM JST
set
* Tue 03 Jun 2014 02:21:19 PM JST
corewindow
* Tue 03 Jun 2014 02:27:41 PM JST
name
* Tue 03 Jun 2014 02:29:41 PM JST

* Tue 03 Jun 2014 02:29:42 PM JST

* Tue 03 Jun 2014 02:29:42 PM JST
            name = (self.core.GetProperty

* Tue 03 Jun 2014 02:29:42 PM JST
            name = (self.core.GetProperty

* Tue 03 Jun 2014 02:29:42 PM JST
            name = (self.core.GetProperty
                    ._NET_WM_NAME(self).reply().get_full_value())

* Tue 03 Jun 2014 02:31:30 PM JST
except
* Tue 03 Jun 2014 02:31:33 PM JST
        except BadWindow as err:
            LOG.warn('Warning {}'.format(err))
            name = ''

* Tue 03 Jun 2014 02:32:35 PM JST
reply
* Tue 03 Jun 2014 02:33:00 PM JST

* Tue 03 Jun 2014 02:33:00 PM JST

* Tue 03 Jun 2014 02:33:00 PM JST
        wmclass = reply.get_full_value()

* Tue 03 Jun 2014 02:33:49 PM JST

* Tue 03 Jun 2014 02:33:49 PM JST

* Tue 03 Jun 2014 02:33:50 PM JST
        reply = self.core.GetProperty._NET_WM_PID(self).reply()

* Tue 03 Jun 2014 02:34:07 PM JST
self.window.get_net_wm_pid()
* Tue 03 Jun 2014 02:34:12 PM JST

* Tue 03 Jun 2014 02:34:12 PM JST

* Tue 03 Jun 2014 02:34:12 PM JST
        pid = gfi(pids)

* Tue 03 Jun 2014 02:45:07 PM JST
FundamentalWindow
* Tue 03 Jun 2014 02:45:23 PM JST
    def grab(self, key, modifiers, owner_events=False,
             pointer_mode=1, keyboard_mode=1):
        r"""SUMMARY

        grab()

        @Return:
        """
        self.window.grab_key(
            key, modifiers, owner_events, pointer_mode, keyboard_mode)

    def ungrab(self, key, modifiers):
        r"""SUMMARY

        ungrab(key, modifiers)

        @Arguments:
        - `key`:
        - `modifiers`:

        @Return:
        """
        self.window.ungrab_key(key, modifiers)

    def make_subwindow(self, ):
        r"""SUMMARY

        make_subwindow()

        @Return:
        """
        pass

    def destroy_subwindows(self, ):
        r"""SUMMARY

        destroy_subwindows()

        @Return:
        """
        return self.window.destroy_subwindows()

* Tue 03 Jun 2014 02:48:34 PM JST
WindowTypesAbstract
* Tue 03 Jun 2014 02:49:23 PM JST
    def __init__(self, window):
        r"""SUMMARY

        __init__(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        self.window = window

    @property
    def connection(self, ):
        r"""SUMMARY

        connection()

        @Return:
        """
        return self.window.connection

    @property
    def core(self, ):
        r"""SUMMARY

        core()

        @Return:
        """
        return self.connection.core

    def __int__(self, ):
        return int(self.window)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.window, other.window)
        return cmp(int(self), other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.window == other.window
        return int(self) == other

    def __hash__(self, ):
        return hash(self.window)

    def __repr__(self, ):
        return '{0.__class__.__name__}(window={1})'.format(self, int(self))

* Tue 03 Jun 2014 02:49:47 PM JST
    def __int__(self, ):
        return int(self.window)


* Tue 03 Jun 2014 02:51:37 PM JST
from xcb2.abstract import ConnectionAbstract
* Tue 03 Jun 2014 02:51:45 PM JST
class WMCLASS(ConnectionAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_CLASS'

    __slots__ = ('res_name', 'res_class')

    def __init__(self, connection=None, res_name=None, res_class=None):
        r"""

        @Arguments:
        - `res_name`:
        - `res_class`:
        """
        if connection:
            ConnectionAbstract.__init__(self, connection)
        self.res_name = res_name or ''
        self.res_class = res_class or ''

    def match_client_list(self, ):
        r"""SUMMARY

        match_client_list()

        @Return:
        """
        name = self.connection.root.client_list().filter_wmclass(self.res_name)
        cls = self.connection.root.client_list().filter_wmclass(self.res_class)
        return name + cls

    def __contains__(self, other):
        return other in (self.res_name, self.res_class)

    def __iter__(self, ):
        return iter((self.res_name, self.res_class))

    def __repr__(self, ):
        fmt = ('{0.__class__.__name__}'
               '(res_name="{0.res_name}", res_class="{0.res_class}")').format
        return (fmt(self))

* Tue 03 Jun 2014 02:52:39 PM JST

* Tue 03 Jun 2014 02:52:39 PM JST

* Tue 03 Jun 2014 02:52:39 PM JST
from xcb2.abstract import ConnectionAbstract

* Tue 03 Jun 2014 03:01:10 PM JST
    @property
    def x(self, ):
        r"""SUMMARY

        get_x()

        @Return:
        """
        return self.get_geometry().x

    @property
    def y(self, ):
        r"""SUMMARY

        get_y()

        @Return:
        """
        return self.get_geometry().y

    @property
    def height(self, ):
        r"""SUMMARY

        get_height()

        @Return:
        """
        return self.get_geometry().height

    @property
    def width(self, ):
        r"""SUMMARY

        get_width()

        @Return:
        """
        return self.get_geometry().width



* Tue 03 Jun 2014 03:01:25 PM JST
    def flush(self, ):
        r"""SUMMARY

        flush()

        @Return:
        """
        self.window.flush()


* Tue 03 Jun 2014 03:03:07 PM JST

* Tue 03 Jun 2014 03:03:07 PM JST

* Tue 03 Jun 2014 03:03:07 PM JST
    types = 

* Tue 03 Jun 2014 03:03:23 PM JST
get_windows
* Tue 03 Jun 2014 03:03:46 PM JST
_NET_WM_WINDOW_TYPE
* Tue 03 Jun 2014 03:04:04 PM JST
name
* Tue 03 Jun 2014 03:04:55 PM JST
get_full_value()
* Tue 03 Jun 2014 03:05:06 PM JST
c.core.GetProperty._NET_WM_WINDOW_TYPE(482).reply().value
* Tue 03 Jun 2014 03:05:17 PM JST
value
* Tue 03 Jun 2014 03:05:18 PM JST
reply().value
* Tue 03 Jun 2014 03:06:02 PM JST
val
* Tue 03 Jun 2014 03:09:52 PM JST
class WindowRootType(StaticWindow):
    r"""SUMMARY
    """

    def grab_button(self, button, modifiers, event_mask, pointer_mode=1,
                    keyboard_mode=0, confine_to=0, cursor=0):
        r"""SUMMARY

        grab_button()

        @Return:
        """
        self.core.GrabPressButton(
            True, # owner_events
            self.window.id, # window
            event_mask,
            confine_to, # confine_to
            cursor, # cursor
            button,
            modifiers
        )

    def ungrab_button(self, button, modifiers):
        r"""SUMMARY

        ungrab_button()

        @Return:
        """
        self.core.UngrabButton(button, self, modifiers)

    def get_supported(self, ):
        r"""SUMMARY

        get_supported()

        @Return:
        """
        reply = self.core.GetProperty._NET_SUPPORTED(self).reply()
        return reply.get_full_value()

    def get_number_of_desktops(self, ):
        r"""SUMMARY

        get_number_of_desktops()

        @Return:
        """
        reply = self.core.GetProperty._NET_NUMBER_OF_DESKTOPS(self).reply()
        return reply.get_full_value()

    def get_desktop_geometry(self, ):
        r"""SUMMARY

        get_desktop_geometry()

        @Return:
        """
        reply = self.core.GetProperty._NET_DESKTOP_GEOMETRY(self).reply()
        return reply.get_full_value()

    def get_desktop_viewport(self, ):
        r"""SUMMARY

        get_desktop_viewport()

        @Return:
        """
        reply = self.core.GetProperty._NET_DESKTOP_VIEWPORT(self).reply()
        return reply.get_full_value()

    def get_current_desktop(self, ):
        r"""SUMMARY

        get_current_desktop()

        @Return:
        """
        reply = self.core.GetProperty._NET_CURRENT_DESKTOP(self).reply()
        return reply.get_full_value()

    def get_desktop_name(self, ):
        r"""SUMMARY

        get_desktop_name()

        @Return:
        """
        reply = self.core.GetProperty._NET_DESKTOP_NAMES(self).reply()
        return reply.get_full_value()

    def get_active_window(self, ):
        r"""SUMMARY

        get_active_window()

        @Return:
        """
        reply = self.core.GetProperty._NET_ACTIVE_WINDOW(self).reply()
        return gfi(reply.get_full_value()).get_net_wm_window_type()

    def get_workarea(self, ):
        r"""SUMMARY

        get_workarea()

        @Return:
        """
        reply = self.core.GetProperty._NET_WORKAREA(self).reply()
        return reply.get_full_value()

    def get_virtual_roots(self, ):
        r"""SUMMARY

        get_virtual_roots()

        @Return:
        """
        reply = self.core.GetProperty._NET_VIRTUAL_ROOTS(self).reply()
        return reply.get_full_value()

    def get_supporting_wm_check(self, ):
        r"""SUMMARY

        get_supporting_wm_check()

        @Return:
        """
        reply = self.core.GetProperty._NET_SUPPORTING_WM_CHECK(self).reply()
        return reply.get_full_value()

    def get_desktop_layout(self, ):
        r"""SUMMARY

        get_desktop_layout()

        @Return:
        """
        reply = self.core.GetProperty._NET_DESKTOP_LAYOUT(self).reply()
        return reply.get_full_value()

    def get_showing_desktop(self, ):
        r"""SUMMARY

        get_showing_desktop()

        @Return:
        """
        reply = self.core.GetProperty._NET_SHOWING_DESKTOP(self).reply()
        return reply.get_full_value()

    def get_user_time(self, ):
        r"""SUMMARY

        get_user_time()

        @Return:
        """
        reply = self.core.GetProperty._NET_WM_USER_TIME(self).reply()
        return reply.get_full_value()

    def client_list(self, ):
        r"""SUMMARY

        get_client_list()

        @Return:
        WindowTypesList
        """
        reply = self.core.GetProperty._NET_CLIENT_LIST(self).reply()
        return reply.get_full_value().to_types()

    def client_list_stacking(self, ):
        r"""SUMMARY

        get_client_list_stacking()

        @Return:
        """
        reply = self.core.GetProperty._NET_CLIENT_LIST_STACKING(self).reply()
        return reply.get_full_value().to_types()



* Tue 03 Jun 2014 03:10:31 PM JST
class WindowDesktopType(StaticWindow):
    r"""
    """
    type_name = '_NET_WM_WINDOW_TYPE_DESKTOP'


class WindowDockType(StaticWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]

    type_name = '_NET_WM_WINDOW_TYPE_DOCK'



* Tue 03 Jun 2014 03:11:36 PM JST
_NET_WM_WINDOW_TYPE
* Tue 03 Jun 2014 03:12:06 PM JST
46137366
* Tue 03 Jun 2014 03:12:59 PM JST
query_subwindows
* Tue 03 Jun 2014 03:13:45 PM JST
27262979
* Tue 03 Jun 2014 03:14:42 PM JST
_NET_WM_USER_TIME
* Tue 03 Jun 2014 03:16:24 PM JST
27262979
* Tue 03 Jun 2014 03:16:52 PM JST
_NET_CLIENT_LIST
* Tue 03 Jun 2014 03:20:16 PM JST
WindowDesktopType
* Tue 03 Jun 2014 03:20:29 PM JST
_NET_WM_WINDOW_TYPE_NORMAL
* Tue 03 Jun 2014 03:20:33 PM JST
_NET_WM_WINDOW_TYPE_SPLASH
* Tue 03 Jun 2014 03:21:03 PM JST

* Tue 03 Jun 2014 03:21:03 PM JST
* WindowDesktopType
* Tue 03 Jun 2014 03:21:03 PM JST
* WindowDesktopType

* Tue 03 Jun 2014 03:21:12 PM JST
[AtomPair(name='_NET_FRAME_EXTENTS', atom=287),
 AtomPair(name='_NET_WM_ALLOWED_ACTIONS', atom=376),
 AtomPair(name='WM_STATE', atom=407),
 AtomPair(name='_NET_WM_DESKTOP', atom=290),
 AtomPair(name='_WIN_WORKSPACE', atom=403),
 AtomPair(name='_WIN_STATE', atom=401),
 AtomPair(name='_NET_WM_STATE', atom=296),
 AtomPair(name='_WIN_LAYER', atom=399),
 AtomPair(name='WM_HINTS', atom=35),
 AtomPair(name='XdndAware', atom=422),
 AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424),
 AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307),
 AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308),
 AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323),
 AtomPair(name='WM_CLIENT_LEADER', atom=279),
 AtomPair(name='_NET_WM_PID', atom=294),
 AtomPair(name='WM_LOCALE_NAME', atom=281),
 AtomPair(name='WM_CLIENT_MACHINE', atom=36),
 AtomPair(name='WM_NORMAL_HINTS', atom=40),
 AtomPair(name='WM_PROTOCOLS', atom=282),
 AtomPair(name='WM_CLASS', atom=67),
 AtomPair(name='WM_ICON_NAME', atom=37),
 AtomPair(name='_NET_WM_ICON_NAME', atom=292),
 AtomPair(name='WM_NAME', atom=39),
 AtomPair(name='_NET_WM_NAME', atom=293)]

* Tue 03 Jun 2014 03:21:17 PM JST

* Tue 03 Jun 2014 03:21:17 PM JST

* Tue 03 Jun 2014 03:21:17 PM JST


* Tue 03 Jun 2014 03:21:53 PM JST
WindowNormalType
* Tue 03 Jun 2014 03:21:56 PM JST
77594725
* Tue 03 Jun 2014 03:22:05 PM JST
[AtomPair(name='_NET_WM_ICON_GEOMETRY', atom=379),
 AtomPair(name='WM_STATE', atom=407),
 AtomPair(name='_NET_WM_ALLOWED_ACTIONS', atom=376),
 AtomPair(name='_NET_FRAME_EXTENTS', atom=287),
 AtomPair(name='_NET_WM_DESKTOP', atom=290),
 AtomPair(name='_WIN_WORKSPACE', atom=403),
 AtomPair(name='_WIN_STATE', atom=401),
 AtomPair(name='_NET_WM_STATE', atom=296),
 AtomPair(name='WM_HINTS', atom=35),
 AtomPair(name='WM_WINDOW_ROLE', atom=284),
 AtomPair(name='XdndAware', atom=422),
 AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424),
 AtomPair(name='_NET_WM_ICON', atom=291),
 AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307),
 AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308),
 AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323),
 AtomPair(name='WM_CLIENT_LEADER', atom=279),
 AtomPair(name='_NET_WM_PID', atom=294),
 AtomPair(name='WM_LOCALE_NAME', atom=281),
 AtomPair(name='WM_CLIENT_MACHINE', atom=36),
 AtomPair(name='WM_NORMAL_HINTS', atom=40),
 AtomPair(name='WM_PROTOCOLS', atom=282),
 AtomPair(name='WM_CLASS', atom=67),
 AtomPair(name='WM_ICON_NAME', atom=37),
 AtomPair(name='_NET_WM_ICON_NAME', atom=292),
 AtomPair(name='WM_NAME', atom=39),
 AtomPair(name='_NET_WM_NAME', atom=293)]

* Tue 03 Jun 2014 03:22:12 PM JST

* Tue 03 Jun 2014 03:22:12 PM JST

* Tue 03 Jun 2014 03:22:12 PM JST


* Tue 03 Jun 2014 03:22:15 PM JST

* Tue 03 Jun 2014 03:22:15 PM JST

* Tue 03 Jun 2014 03:22:15 PM JST
* _NET_WM_WINDOW_TYPE_NORMAL

* Tue 03 Jun 2014 03:22:44 PM JST
25165828
* Tue 03 Jun 2014 03:22:53 PM JST
[AtomPair(name='_NET_FRAME_EXTENTS', atom=287),
 AtomPair(name='_NET_WM_ALLOWED_ACTIONS', atom=376),
 AtomPair(name='WM_STATE', atom=407),
 AtomPair(name='_WIN_WORKSPACE', atom=403),
 AtomPair(name='_WIN_STATE', atom=401),
 AtomPair(name='_WIN_LAYER', atom=399),
 AtomPair(name='_NET_WM_DESKTOP', atom=290),
 AtomPair(name='_NET_WM_STATE', atom=296),
 AtomPair(name='WM_HINTS', atom=35),
 AtomPair(name='XdndAware', atom=422),
 AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424),
 AtomPair(name='_MOTIF_WM_HINTS', atom=349),
 AtomPair(name='WM_WINDOW_ROLE', atom=284),
 AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307),
 AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308),
 AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323),
 AtomPair(name='WM_CLIENT_LEADER', atom=279),
 AtomPair(name='_NET_WM_PID', atom=294),
 AtomPair(name='WM_LOCALE_NAME', atom=281),
 AtomPair(name='WM_CLIENT_MACHINE', atom=36),
 AtomPair(name='WM_NORMAL_HINTS', atom=40),
 AtomPair(name='WM_PROTOCOLS', atom=282),
 AtomPair(name='WM_CLASS', atom=67),
 AtomPair(name='WM_ICON_NAME', atom=37),
 AtomPair(name='_NET_WM_ICON_NAME', atom=292),
 AtomPair(name='WM_NAME', atom=39),
 AtomPair(name='_NET_WM_NAME', atom=293)]

* Tue 03 Jun 2014 03:22:57 PM JST

* Tue 03 Jun 2014 03:22:57 PM JST

* Tue 03 Jun 2014 03:22:57 PM JST


* Tue 03 Jun 2014 03:25:37 PM JST
WindowRootType(window=482)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='_NET_DESKTOP_NAMES', atom=356), AtomPair(name='XKLAVIER_ALLOW_SECONDARY', atom=428), AtomPair(name='_NET_CLIENT_LIST_STACKING', atom=352), AtomPair(name='_WIN_CLIENT_LIST', atom=396), AtomPair(name='_NET_CLIENT_LIST', atom=351), AtomPair(name='XFDESKTOP_IMAGE_FILE_1', atom=420), AtomPair(name='XFDESKTOP_IMAGE_FILE_0', atom=419), AtomPair(name='NAUTILUS_DESKTOP_WINDOW_ID', atom=418), AtomPair(name='XFCE_DESKTOP_WINDOW', atom=416), AtomPair(name='_NET_ACTIVE_WINDOW', atom=285), AtomPair(name='_NET_CURRENT_DESKTOP', atom=286), AtomPair(name='_NET_DESKTOP_VIEWPORT', atom=357), AtomPair(name='_NET_DESKTOP_GEOMETRY', atom=354), AtomPair(name='_NET_SUPPORTING_WM_CHECK', atom=363), AtomPair(name='_NET_SUPPORTED', atom=362), AtomPair(name='_WIN_DESKTOP_BUTTON_PROXY', atom=397), AtomPair(name='_WIN_SUPPORTING_WM_CHECK', atom=402), AtomPair(name='_WIN_PROTOCOLS', atom=400), AtomPair(name='_NET_WORKAREA', atom=395), AtomPair(name='_NET_NUMBER_OF_DESKTOPS', atom=359), AtomPair(name='_WIN_WORKSPACE_COUNT', atom=404), AtomPair(name='_DT_RESTORE_MODE', atom=336), AtomPair(name='_DT_SAVE_MODE', atom=335), AtomPair(name='XIM_SERVERS', atom=275), AtomPair(name='RESOURCE_MANAGER', atom=23), AtomPair(name='_XKB_RULES_NAMES', atom=271), AtomPair(name='XFree86_VT', atom=70), AtomPair(name='XFree86_DDC_EDID1_RAWDATA', atom=69)]
FundamentalWindow(window=20971845)
[]
FundamentalWindow(window=20971846)
[]
FundamentalWindow(window=20971847)
[]
FundamentalWindow(window=20971848)
[]
FundamentalWindow(window=20971849)
[]
FundamentalWindow(window=20971850)
[]
FundamentalWindow(window=20971851)
[]
FundamentalWindow(window=20971852)
[]
FundamentalWindow(window=20971853)
[]
FundamentalWindow(window=20971854)
[]
FundamentalWindow(window=20971855)
[]
FundamentalWindow(window=20971856)
[]
FundamentalWindow(window=20971857)
[]
FundamentalWindow(window=20971858)
[]
FundamentalWindow(window=20971859)
[]
FundamentalWindow(window=20971860)
[]
WindowDesktopType(window=27262979)
[AtomPair(name='_NET_FRAME_EXTENTS', atom=287), AtomPair(name='_NET_WM_ALLOWED_ACTIONS', atom=376), AtomPair(name='WM_STATE', atom=407), AtomPair(name='_NET_WM_DESKTOP', atom=290), AtomPair(name='_WIN_WORKSPACE', atom=403), AtomPair(name='_WIN_STATE', atom=401), AtomPair(name='_NET_WM_STATE', atom=296), AtomPair(name='_WIN_LAYER', atom=399), AtomPair(name='WM_HINTS', atom=35), AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=27262980)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
FundamentalWindow(window=21384076)
[]
FundamentalWindow(window=21384077)
[]
FundamentalWindow(window=21384078)
[]
FundamentalWindow(window=21384079)
[]
FundamentalWindow(window=21384080)
[]
FundamentalWindow(window=21384081)
[]
FundamentalWindow(window=21384082)
[]
FundamentalWindow(window=21384083)
[]
FundamentalWindow(window=21384084)
[]
FundamentalWindow(window=21384085)
[]
FundamentalWindow(window=21384086)
[]
FundamentalWindow(window=21384087)
[]
FundamentalWindow(window=21384088)
[]
FundamentalWindow(window=21384089)
[]
FundamentalWindow(window=21384090)
[]
FundamentalWindow(window=21384091)
[]
WindowNormalType(window=77594725)
[AtomPair(name='_NET_WM_ICON_GEOMETRY', atom=379), AtomPair(name='WM_STATE', atom=407), AtomPair(name='_NET_WM_ALLOWED_ACTIONS', atom=376), AtomPair(name='_NET_FRAME_EXTENTS', atom=287), AtomPair(name='_NET_WM_DESKTOP', atom=290), AtomPair(name='_WIN_WORKSPACE', atom=403), AtomPair(name='_WIN_STATE', atom=401), AtomPair(name='_NET_WM_STATE', atom=296), AtomPair(name='WM_HINTS', atom=35), AtomPair(name='WM_WINDOW_ROLE', atom=284), AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='_NET_WM_ICON', atom=291), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77594726)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
FundamentalWindow(window=21434986)
[]
FundamentalWindow(window=21434987)
[]
FundamentalWindow(window=21434988)
[]
FundamentalWindow(window=21434989)
[]
FundamentalWindow(window=21434990)
[]
FundamentalWindow(window=21434991)
[]
FundamentalWindow(window=21434992)
[]
FundamentalWindow(window=21434993)
[]
FundamentalWindow(window=21434994)
[]
FundamentalWindow(window=21434995)
[]
FundamentalWindow(window=21434996)
[]
FundamentalWindow(window=21434997)
[]
FundamentalWindow(window=21434998)
[]
FundamentalWindow(window=21434999)
[]
FundamentalWindow(window=21435000)
[]
FundamentalWindow(window=21435001)
[]
WindowNormalType(window=58720297)
[AtomPair(name='_NET_WM_ICON_GEOMETRY', atom=379), AtomPair(name='_NET_FRAME_EXTENTS', atom=287), AtomPair(name='_NET_WM_ALLOWED_ACTIONS', atom=376), AtomPair(name='WM_STATE', atom=407), AtomPair(name='_NET_WM_DESKTOP', atom=290), AtomPair(name='_WIN_WORKSPACE', atom=403), AtomPair(name='_WIN_STATE', atom=401), AtomPair(name='_NET_WM_STATE', atom=296), AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_GTK_HIDE_TITLEBAR_WHEN_MAXIMIZED', atom=564), AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='_NET_WM_ICON', atom=291), AtomPair(name='_MOTIF_WM_HINTS', atom=349), AtomPair(name='WM_WINDOW_ROLE', atom=284), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58720298)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
FundamentalWindow(window=58722723)
[]
FundamentalWindow(window=58723010)
[]
FundamentalWindow(window=58722975)
[]
FundamentalWindow(window=58722724)
[]
FundamentalWindow(window=65011816)
[]
FundamentalWindow(window=21446490)
[]
FundamentalWindow(window=21446491)
[]
FundamentalWindow(window=21446492)
[]
FundamentalWindow(window=21446493)
[]
FundamentalWindow(window=21446494)
[]
FundamentalWindow(window=21446495)
[]
FundamentalWindow(window=21446496)
[]
FundamentalWindow(window=21446497)
[]
FundamentalWindow(window=21446498)
[]
FundamentalWindow(window=21446499)
[]
FundamentalWindow(window=21446500)
[]
FundamentalWindow(window=21446501)
[]
FundamentalWindow(window=21446502)
[]
FundamentalWindow(window=21446503)
[]
FundamentalWindow(window=21446504)
[]
FundamentalWindow(window=21446505)
[]
WindowNormalType(window=23083471)
[AtomPair(name='_NET_WM_ICON_GEOMETRY', atom=379), AtomPair(name='_NET_FRAME_EXTENTS', atom=287), AtomPair(name='_NET_WM_ALLOWED_ACTIONS', atom=376), AtomPair(name='WM_STATE', atom=407), AtomPair(name='_NET_WM_DESKTOP', atom=290), AtomPair(name='_WIN_WORKSPACE', atom=403), AtomPair(name='_WIN_STATE', atom=401), AtomPair(name='_NET_WM_STATE', atom=296), AtomPair(name='WM_HINTS', atom=35), AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='_NET_WM_ICON', atom=291), AtomPair(name='WM_WINDOW_ROLE', atom=284), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=23083472)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
FundamentalWindow(window=20971971)
[]
FundamentalWindow(window=20971972)
[]
FundamentalWindow(window=20971973)
[]
FundamentalWindow(window=20971974)
[]
FundamentalWindow(window=20971975)
[]
FundamentalWindow(window=20971976)
[]
FundamentalWindow(window=20971977)
[]
FundamentalWindow(window=20971978)
[]
FundamentalWindow(window=20971979)
[]
FundamentalWindow(window=20971980)
[]
FundamentalWindow(window=20971981)
[]
FundamentalWindow(window=20971982)
[]
FundamentalWindow(window=20971983)
[]
FundamentalWindow(window=20971984)
[]
FundamentalWindow(window=20971985)
[]
FundamentalWindow(window=20971986)
[]
WindowNormalType(window=39845892)
[AtomPair(name='_WIN_LAYER', atom=399), AtomPair(name='_NET_WM_ICON_GEOMETRY', atom=379), AtomPair(name='_NET_FRAME_EXTENTS', atom=287), AtomPair(name='_NET_WM_ALLOWED_ACTIONS', atom=376), AtomPair(name='WM_STATE', atom=407), AtomPair(name='_NET_WM_DESKTOP', atom=290), AtomPair(name='_WIN_WORKSPACE', atom=403), AtomPair(name='_WIN_STATE', atom=401), AtomPair(name='_NET_WM_STATE', atom=296), AtomPair(name='WM_HINTS', atom=35), AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='_NET_WM_ICON', atom=291), AtomPair(name='WM_WINDOW_ROLE', atom=284), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=39845893)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
FundamentalWindow(window=20972487)
[]
FundamentalWindow(window=20972488)
[]
FundamentalWindow(window=20972489)
[]
FundamentalWindow(window=20972490)
[]
FundamentalWindow(window=20972491)
[]
FundamentalWindow(window=20972492)
[]
FundamentalWindow(window=20972493)
[]
FundamentalWindow(window=20972494)
[]
FundamentalWindow(window=20972495)
[]
FundamentalWindow(window=20972496)
[]
FundamentalWindow(window=20972497)
[]
FundamentalWindow(window=20972498)
[]
FundamentalWindow(window=20972499)
[]
FundamentalWindow(window=20972500)
[]
FundamentalWindow(window=20972501)
[]
FundamentalWindow(window=20972502)
[]
WindowNormalType(window=46137366)
[AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='XdndAware', atom=422), AtomPair(name='_NET_WM_ICON_GEOMETRY', atom=379), AtomPair(name='_NET_FRAME_EXTENTS', atom=287), AtomPair(name='_NET_WM_ALLOWED_ACTIONS', atom=376), AtomPair(name='WM_STATE', atom=407), AtomPair(name='_NET_WM_DESKTOP', atom=290), AtomPair(name='_WIN_WORKSPACE', atom=403), AtomPair(name='_WIN_STATE', atom=401), AtomPair(name='_NET_WM_STATE', atom=296), AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_ICON', atom=291), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=46137367)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
FundamentalWindow(window=46137387)
[AtomPair(name='WM_HINTS', atom=35)]
FundamentalWindow(window=46138689)
[]
FundamentalWindow(window=20971889)
[]
FundamentalWindow(window=20971890)
[]
FundamentalWindow(window=20971891)
[]
FundamentalWindow(window=20971892)
[]
FundamentalWindow(window=20971893)
[]
FundamentalWindow(window=20971894)
[]
FundamentalWindow(window=20971895)
[]
FundamentalWindow(window=20971896)
[]
FundamentalWindow(window=20971897)
[]
FundamentalWindow(window=20971898)
[]
FundamentalWindow(window=20971899)
[]
FundamentalWindow(window=20971900)
[]
FundamentalWindow(window=20971901)
[]
FundamentalWindow(window=20971902)
[]
FundamentalWindow(window=20971903)
[]
FundamentalWindow(window=20971904)
[]
WindowDockType(window=25165828)
[AtomPair(name='_NET_FRAME_EXTENTS', atom=287), AtomPair(name='_NET_WM_ALLOWED_ACTIONS', atom=376), AtomPair(name='WM_STATE', atom=407), AtomPair(name='_WIN_WORKSPACE', atom=403), AtomPair(name='_WIN_STATE', atom=401), AtomPair(name='_WIN_LAYER', atom=399), AtomPair(name='_NET_WM_DESKTOP', atom=290), AtomPair(name='_NET_WM_STATE', atom=296), AtomPair(name='WM_HINTS', atom=35), AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='_MOTIF_WM_HINTS', atom=349), AtomPair(name='WM_WINDOW_ROLE', atom=284), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=25165829)
[]
FundamentalWindow(window=20971930)
[]
FundamentalWindow(window=20971931)
[]
FundamentalWindow(window=20971932)
[]
FundamentalWindow(window=20971933)
[]
FundamentalWindow(window=20971934)
[]
FundamentalWindow(window=20971935)
[]
FundamentalWindow(window=20971936)
[]
FundamentalWindow(window=20971937)
[]
FundamentalWindow(window=20971938)
[]
FundamentalWindow(window=20971939)
[]
FundamentalWindow(window=20971940)
[]
FundamentalWindow(window=20971941)
[]
FundamentalWindow(window=20971942)
[]
FundamentalWindow(window=20971943)
[]
FundamentalWindow(window=20971944)
[]
FundamentalWindow(window=20971945)
[]
WindowDockType(window=25165849)
[AtomPair(name='_NET_FRAME_EXTENTS', atom=287), AtomPair(name='_NET_WM_ALLOWED_ACTIONS', atom=376), AtomPair(name='WM_STATE', atom=407), AtomPair(name='_WIN_WORKSPACE', atom=403), AtomPair(name='_WIN_STATE', atom=401), AtomPair(name='_WIN_LAYER', atom=399), AtomPair(name='_NET_WM_DESKTOP', atom=290), AtomPair(name='_NET_WM_STATE', atom=296), AtomPair(name='WM_HINTS', atom=35), AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='_MOTIF_WM_HINTS', atom=349), AtomPair(name='WM_WINDOW_ROLE', atom=284), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=25165850)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
FundamentalWindow(window=25165862)
[]
FundamentalWindow(window=33554436)
[AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_XEMBED_INFO', atom=334), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=33554437)
[]
FundamentalWindow(window=25165863)
[]
FundamentalWindow(window=35651588)
[AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_XEMBED_INFO', atom=334), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=35651589)
[]
FundamentalWindow(window=35651628)
[]
FundamentalWindow(window=12582915)
[AtomPair(name='GDK_TIMESTAMP_PROP', atom=440), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_XEMBED_INFO', atom=334), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=12582916)
[]
FundamentalWindow(window=35651635)
[]
FundamentalWindow(window=31457283)
[AtomPair(name='GDK_TIMESTAMP_PROP', atom=440), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_XEMBED_INFO', atom=334), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=31457284)
[]
FundamentalWindow(window=20971568)
[]
FundamentalWindow(window=20971567)
[]
FundamentalWindow(window=20971566)
[]
FundamentalWindow(window=20971565)
[]
FundamentalWindow(window=4194305)
[AtomPair(name='_DBUS_SESSION_BUS_PID', atom=274), AtomPair(name='_DBUS_SESSION_BUS_ADDRESS', atom=273)]
FundamentalWindow(window=12582913)
[AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=12582914)
[]
FundamentalWindow(window=14680065)
[]
FundamentalWindow(window=14680067)
[]
FundamentalWindow(window=16777217)
[AtomPair(name='SM_CLIENT_ID', atom=333), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=16777218)
[]
FundamentalWindow(window=18874369)
[AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=18874370)
[]
FundamentalWindow(window=18874371)
[AtomPair(name='_XSETTINGS_SETTINGS', atom=315), AtomPair(name='_TIMESTAMP_PROP', atom=337)]
FundamentalWindow(window=20971521)
[AtomPair(name='SM_CLIENT_ID', atom=333), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=20971522)
[]
FundamentalWindow(window=20971539)
[AtomPair(name='XFWM4_TIMESTAMP_PROP', atom=409)]
WindowNormalType(window=20971540)
[AtomPair(name='_NET_SUPPORTING_WM_CHECK', atom=363), AtomPair(name='_WIN_DESKTOP_BUTTON_PROXY', atom=397), AtomPair(name='_WIN_SUPPORTING_WM_CHECK', atom=402), AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=20971541)
[]
FundamentalWindow(window=23068673)
[AtomPair(name='SM_CLIENT_ID', atom=333), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=23068674)
[]
FundamentalWindow(window=25165825)
[AtomPair(name='SM_CLIENT_ID', atom=333), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=25165826)
[]
FundamentalWindow(window=27262977)
[AtomPair(name='SM_CLIENT_ID', atom=333), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=27262978)
[]
FundamentalWindow(window=29360129)
[AtomPair(name='SM_CLIENT_ID', atom=333), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=29360130)
[]
FundamentalWindow(window=20971887)
[]
FundamentalWindow(window=29360131)
[AtomPair(name='_TIMESTAMP_PROP', atom=337)]
FundamentalWindow(window=31457281)
[AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=31457282)
[]
FundamentalWindow(window=33554433)
[AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=33554434)
[]
FundamentalWindow(window=35651585)
[AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=35651586)
[]
FundamentalWindow(window=35651609)
[AtomPair(name='_NET_SYSTEM_TRAY_ORIENTATION', atom=331), AtomPair(name='GDK_TIMESTAMP_PROP', atom=440), AtomPair(name='_NET_SYSTEM_TRAY_VISUAL', atom=332), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=31457304)
[AtomPair(name='GDK_TIMESTAMP_PROP', atom=440), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=37748737)
[AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=37748738)
[]
FundamentalWindow(window=39845889)
[AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=39845890)
[]
FundamentalWindow(window=48234497)
[AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=48234498)
[]
FundamentalWindow(window=50331649)
[AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=50331650)
[]
FundamentalWindow(window=52428801)
[AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=52428802)
[]
FundamentalWindow(window=52428837)
[AtomPair(name='GDK_TIMESTAMP_PROP', atom=440), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=46137345)
[AtomPair(name='SM_CLIENT_ID', atom=333), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=46137346)
[]
FundamentalWindow(window=46137355)
[]
WindowDropdownMenuType(window=39846019)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=39846020)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
FundamentalWindow(window=23068701)
[AtomPair(name='GDK_TIMESTAMP_PROP', atom=440), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
WindowPopupMenuType(window=25167174)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=25167175)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
FundamentalWindow(window=27263249)
[AtomPair(name='GDK_TIMESTAMP_PROP', atom=440), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
WindowNormalType(window=23076504)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=23076505)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
WindowNormalType(window=23076530)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=23076531)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
WindowNormalType(window=52428803)
[AtomPair(name='GDK_TIMESTAMP_PROP', atom=440), AtomPair(name='_NET_WM_ICON_GEOMETRY', atom=379), AtomPair(name='_NET_FRAME_EXTENTS', atom=287), AtomPair(name='WM_STATE', atom=407), AtomPair(name='WM_HINTS', atom=35), AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='_NET_WM_ICON', atom=291), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=52428804)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
FundamentalWindow(window=77594625)
[AtomPair(name='SM_CLIENT_ID', atom=333), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77594626)
[]
WindowNormalType(window=77594700)
[AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='_NET_WM_ICON', atom=291), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77594701)
[]
FundamentalWindow(window=77594730)
[AtomPair(name='_MOZILLA_PROFILE', atom=679), AtomPair(name='_MOZILLA_PROGRAM', atom=680), AtomPair(name='_MOZILLA_USER', atom=678), AtomPair(name='_MOZILLA_VERSION', atom=674), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77594731)
[AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
WindowNormalType(window=77594732)
[AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77594733)
[]
WindowNormalType(window=77594741)
[AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77594742)
[]
WindowUtilityType(window=77594771)
[AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='WM_TRANSIENT_FOR', atom=68), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77594772)
[]
WindowTooltipType(window=77594775)
[AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='WM_TRANSIENT_FOR', atom=68), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77594776)
[]
WindowPopupMenuType(window=77594778)
[AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='WM_TRANSIENT_FOR', atom=68), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77594779)
[]
WindowPopupMenuType(window=77594781)
[AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='WM_TRANSIENT_FOR', atom=68), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77594782)
[]
WindowUtilityType(window=77594784)
[AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='WM_TRANSIENT_FOR', atom=68), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77594785)
[]
WindowToolbarType(window=77594858)
[AtomPair(name='_MOTIF_WM_HINTS', atom=349), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77594859)
[]
WindowNormalType(window=77595046)
[AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77595047)
[]
WindowNormalType(window=77599026)
[AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77599027)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
WindowTooltipType(window=77595994)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='WM_TRANSIENT_FOR', atom=68), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77595995)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
WindowPopupMenuType(window=77599430)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='WM_TRANSIENT_FOR', atom=68), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77599431)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
WindowPopupMenuType(window=77599450)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='XdndAware', atom=422), AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424), AtomPair(name='WM_TRANSIENT_FOR', atom=68), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=77599451)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
WindowPopupMenuType(window=25167114)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=25167115)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
WindowPopupMenuType(window=25167165)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=25167166)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
WindowPopupMenuType(window=25194022)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=25194023)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
WindowPopupMenuType(window=25194025)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=25194026)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
FundamentalWindow(window=58720257)
[AtomPair(name='_NET_STARTUP_ID', atom=288), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_COMMAND', atom=34), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58720258)
[]
WindowNormalType(window=58720259)
[AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58720260)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
WindowNormalType(window=58720280)
[AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58720281)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
FundamentalWindow(window=58720283)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58720284)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58720285)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58720286)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58720287)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58720288)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58720289)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58720290)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58720291)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58720293)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58720294)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58720338)
[]
FundamentalWindow(window=58720339)
[]
FundamentalWindow(window=58720346)
[]
FundamentalWindow(window=58720347)
[]
FundamentalWindow(window=58720348)
[]
FundamentalWindow(window=58720349)
[]
FundamentalWindow(window=58720350)
[]
FundamentalWindow(window=58720351)
[]
FundamentalWindow(window=58720352)
[]
FundamentalWindow(window=58720354)
[]
FundamentalWindow(window=58720355)
[]
FundamentalWindow(window=58722719)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58722720)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58722721)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58722722)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58723759)
[AtomPair(name='GDK_TIMESTAMP_PROP', atom=440), AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=39852211)
[AtomPair(name='_NET_WM_USER_TIME', atom=310), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
WindowPopupMenuType(window=39852213)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=39852214)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
WindowPopupMenuType(window=58727351)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58727352)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
WindowNormalType(window=58729255)
[AtomPair(name='XdndTypeList', atom=581), AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58729256)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
WindowNormalType(window=58729276)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58729277)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
FundamentalWindow(window=65011732)
[]
WindowPopupMenuType(window=58760390)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58760391)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
WindowPopupMenuType(window=58760393)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=58760394)
[AtomPair(name='_NET_WM_USER_TIME', atom=310)]
WindowTooltipType(window=46137656)
[AtomPair(name='WM_HINTS', atom=35), AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307), AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308), AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323), AtomPair(name='WM_CLIENT_LEADER', atom=279), AtomPair(name='_NET_WM_PID', atom=294), AtomPair(name='WM_LOCALE_NAME', atom=281), AtomPair(name='WM_CLIENT_MACHINE', atom=36), AtomPair(name='WM_NORMAL_HINTS', atom=40), AtomPair(name='WM_PROTOCOLS', atom=282), AtomPair(name='WM_CLASS', atom=67), AtomPair(name='WM_ICON_NAME', atom=37), AtomPair(name='_NET_WM_ICON_NAME', atom=292), AtomPair(name='WM_NAME', atom=39), AtomPair(name='_NET_WM_NAME', atom=293)]
FundamentalWindow(window=46137657)
[]

* Tue 03 Jun 2014 10:44:54 PM JST
name
* Tue 03 Jun 2014 10:44:57 PM JST
window
* Tue 03 Jun 2014 10:45:40 PM JST
__class__
* Tue 03 Jun 2014 10:45:48 PM JST
__class__
* Tue 03 Jun 2014 10:46:00 PM JST
__subclasshook__
* Tue 03 Jun 2014 10:46:19 PM JST
__class__
* Tue 03 Jun 2014 10:48:26 PM JST
list_allowed_actions
* Tue 03 Jun 2014 10:48:37 PM JST
list_properties
* Tue 03 Jun 2014 10:50:45 PM JST
list_states
* Tue 03 Jun 2014 10:51:50 PM JST
width
* Tue 03 Jun 2014 10:54:40 PM JST
0)
* Tue 03 Jun 2014 10:54:41 PM JST
focus(0)
* Tue 03 Jun 2014 11:09:13 PM JST
_NET_WM_PID
* Wed 04 Jun 2014 06:32:49 AM JST
27262979
* Wed 04 Jun 2014 06:33:16 AM JST
name
* Wed 04 Jun 2014 06:33:42 AM JST
list_properties
* Wed 04 Jun 2014 06:43:50 AM JST
get_desktop_number
* Wed 04 Jun 2014 06:45:38 AM JST
c.core.GetProperty.
* Wed 04 Jun 2014 06:51:39 AM JST
get_desktop_number()
* Wed 04 Jun 2014 06:52:34 AM JST
isabove     
isbelow     
isfullscreen
ismaximize  
isshade     
* Wed 04 Jun 2014 06:54:48 AM JST

* Wed 04 Jun 2014 06:54:48 AM JST

* Wed 04 Jun 2014 06:54:48 AM JST
ungrab          

* Wed 04 Jun 2014 07:02:35 AM JST
setabove         
setbelow         
setfullscreen    
setmaximize      
setshade         
stackabove       
stackbelow       
toggleabove      
togglebelow      
togglefullscreen 
togglemaximize   
toggleshade
unsetabove      
unsetbelow      
unsetfullscreen 
unsetmaximize   
unsetshade      
* Wed 04 Jun 2014 08:13:48 AM JST
get_input_focus
* Wed 04 Jun 2014 09:20:56 AM JST
class Drawable / copy_area
class Drawable / copy_plane
class Drawable / poly_point
class Drawable / point
class Drawable / poly_line
class Drawable / line
class Drawable / poly_segment
class Drawable / poly_rectangle
class Drawable / rectangle
class Drawable / poly_arc
class Drawable / arc
class Drawable / fill_poly
class Drawable / poly_fill_rectangle
class Drawable / fill_rectangle
class Drawable / poly_fill_arc
class Drawable / fill_arc
class Drawable / put_image
class Drawable / put_pil_image
class Drawable / get_image
class Drawable / draw_text
class Drawable / poly_text
class Drawable / poly_text_16
class Drawable / image_text
class Drawable / image_text_16

* Wed 04 Jun 2014 09:21:00 AM JST
class Drawable / copy_area
class Drawable / copy_plane
class Drawable / poly_point
class Drawable / point
class Drawable / poly_line
class Drawable / line
class Drawable / poly_segment
class Drawable / poly_rectangle
class Drawable / rectangle
class Drawable / poly_arc
class Drawable / arc
class Drawable / fill_poly
class Drawable / poly_fill_rectangle
class Drawable / fill_rectangle
class Drawable / poly_fill_arc
class Drawable / fill_arc
class Drawable / put_image
class Drawable / put_pil_image
class Drawable / get_image
class Drawable / draw_text
class Drawable / poly_text
class Drawable / poly_text_16
class Drawable / image_text
class Drawable / image_text_16
class Drawable / query_best_size

* Wed 04 Jun 2014 09:21:21 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:22 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:22 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:22 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:22 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:22 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:22 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:22 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:22 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:22 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:23 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:23 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:23 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:23 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:23 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:24 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:24 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:24 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:24 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:24 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:24 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:24 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:25 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:25 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:25 AM JST
class Drawable / 
* Wed 04 Jun 2014 09:21:31 AM JST
copy_area
copy_plane
poly_point
point
poly_line
line
poly_segment
poly_rectangle
rectangle
poly_arc
arc
fill_poly
poly_fill_rectangle
fill_rectangle
poly_fill_arc
fill_arc
put_image
put_pil_image
get_image
draw_text
poly_text
poly_text_16
image_text
image_text_16
query_best_size

* Wed 04 Jun 2014 09:21:51 AM JST
class Window / class Window
class Window / pack
class Window / create_window
class Window / change_attributes
class Window / get_attributes
class Window / destroy
class Window / destroy_sub_windows
class Window / change_save_set
class Window / reparent
class Window / map
class Window / map_sub_windows
class Window / unmap
class Window / unmap_sub_windows
class Window / configure
class Window / circulate
class Window / raise_window
class Window / query_tree
class Window / query_recursive_tree
class Window / change_property
class Window / delete_property
class Window / get_property
class Window / list_properties
class Window / set_selection_owner
class Window / convert_selection
class Window / send_event
class Window / grab_pointer
class Window / grab_button
class Window / ungrab_button
class Window / grab_keyboard
class Window / ungrab_keyboard
class Window / grab_key
class Window / ungrab_key
class Window / query_pointer
class Window / get_motion_events
class Window / translate_coords
class Window / warp_pointer
class Window / set_input_focus
class Window / clear_area
class Window / create_colormap
class Window / list_installed_colormaps
class Window / rotate_properties
class Window / set_wm_name
class Window / get_wm_name
class Window / set_wm_icon_name
class Window / get_wm_icon_name
class Window / set_wm_class
class Window / get_wm_class
class Window / set_wm_transient_for
class Window / get_wm_transient_for
class Window / set_wm_protocols
class Window / get_wm_protocols
class Window / set_wm_colormap_windows
class Window / get_wm_colormap_windows
class Window / set_wm_client_machine
class Window / get_wm_client_machine
class Window / set_wm_normal_hints
class Window / get_wm_normal_hints
class Window / set_wm_hints
class Window / get_wm_hints
class Window / set_wm_state
class Window / get_wm_state
class Window / set_wm_icon_size
class Window / get_wm_icon_size
class Window / set_net_wm_name
class Window / get_net_wm_name
class Window / set_net_wm_state
class Window / get_net_wm_state
class Window / set_net_wm_pid
class Window / get_net_wm_pid
class Window / set_net_wm_allowed_actions
class Window / get_net_wm_allowed_actions
class Window / set_net_supported
class Window / get_net_supported
class Window / set_net_wm_icon
class Window / get_net_wm_icon
class Window / set_net_wm_icon_geometry
class Window / get_net_wm_icon_geometry
class Window / set_net_wm_user_time
class Window / get_net_wm_user_time
class Window / set_net_wm_user_time_window
class Window / get_net_wm_user_time_window
class Window / set_net_wm_window_type
class Window / get_net_wm_window_type
class Window / set_net_workarea
class Window / get_net_workarea
class Window / _get_struct_prop
class Window / _set_struct_prop

* Wed 04 Jun 2014 09:22:07 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:07 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:07 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:07 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:08 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:08 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:08 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:08 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:08 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:09 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:09 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:09 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:09 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:09 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:10 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:10 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:10 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:10 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:10 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:10 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:10 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:11 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:11 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:11 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:11 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:11 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:11 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:11 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:11 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:11 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:11 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:12 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:12 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:12 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:12 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:12 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:12 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:12 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:12 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:12 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:12 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:12 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:12 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:13 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:13 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:13 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:13 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:13 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:13 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:13 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:13 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:13 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:13 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:14 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:14 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:14 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:14 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:14 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:14 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:14 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:14 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:14 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:15 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:15 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:15 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:15 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:15 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:15 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:15 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:15 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:15 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:15 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:16 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:16 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:16 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:16 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:16 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:16 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:16 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:16 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:16 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:17 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:17 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:17 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:17 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:17 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:17 AM JST
class Window / 
* Wed 04 Jun 2014 09:22:24 AM JST
class Window
pack
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner
convert_selection
send_event
grab_pointer
grab_button
ungrab_button
grab_keyboard
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus
clear_area
create_colormap
list_installed_colormaps
rotate_properties
set_wm_name
get_wm_name
set_wm_icon_name
get_wm_icon_name
set_wm_class
get_wm_class
set_wm_transient_for
get_wm_transient_for
set_wm_protocols
get_wm_protocols
set_wm_colormap_windows
get_wm_colormap_windows
set_wm_client_machine
get_wm_client_machine
set_wm_normal_hints
get_wm_normal_hints
set_wm_hints
get_wm_hints
set_wm_state
get_wm_state
set_wm_icon_size
get_wm_icon_size
set_net_wm_name
get_net_wm_name
set_net_wm_state
get_net_wm_state
set_net_wm_pid
get_net_wm_pid
set_net_wm_allowed_actions
get_net_wm_allowed_actions
set_net_supported
get_net_supported
set_net_wm_icon
get_net_wm_icon
set_net_wm_icon_geometry
get_net_wm_icon_geometry
set_net_wm_user_time
get_net_wm_user_time
set_net_wm_user_time_window
get_net_wm_user_time_window
set_net_wm_window_type
get_net_wm_window_type
set_net_workarea
get_net_workarea
_get_struct_prop
_set_struct_prop

* Wed 04 Jun 2014 11:04:40 AM JST
pack
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner
convert_selection
send_event
grab_pointer
grab_button
ungrab_button
grab_keyboard
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus
clear_area
create_colormap
list_installed_colormaps
rotate_properties
set_wm_name
get_wm_name
set_wm_icon_name
get_wm_icon_name
set_wm_class
get_wm_class
set_wm_transient_for
get_wm_transient_for
set_wm_protocols
get_wm_protocols
set_wm_colormap_windows
get_wm_colormap_windows
set_wm_client_machine
get_wm_client_machine
set_wm_normal_hints
get_wm_normal_hints
set_wm_hints
get_wm_hints
set_wm_state
get_wm_state
set_wm_icon_size
get_wm_icon_size
set_net_wm_name
get_net_wm_name
set_net_wm_state
get_net_wm_state
set_net_wm_pid
get_net_wm_pid
set_net_wm_allowed_actions
get_net_wm_allowed_actions
set_net_supported
get_net_supported
set_net_wm_icon
get_net_wm_icon
set_net_wm_icon_geometry
get_net_wm_icon_geometry
set_net_wm_user_time
get_net_wm_user_time
set_net_wm_user_time_window
get_net_wm_user_time_window
set_net_wm_window_type
get_net_wm_window_type
set_net_workarea
get_net_workarea
_get_struct_prop
_set_struct_prop
get_user_time
client_list
client_list_stacking
get_desktop_names
get_win_client_list
get_active_window
get_current_desktop
get_desktop_viewport
get_desktop_geometry
get_supporting_wm_check
get_supported
get_workarea
get_workspace_count
get_number_of_desktop
get_desktop_layout
get_showing_desktop
* Wed 04 Jun 2014 11:04:49 AM JST

* Wed 04 Jun 2014 11:04:49 AM JST

* Wed 04 Jun 2014 11:04:49 AM JST
pack

* Wed 04 Jun 2014 11:04:52 AM JST

* Wed 04 Jun 2014 11:04:53 AM JST

* Wed 04 Jun 2014 11:04:53 AM JST
create_window

* Wed 04 Jun 2014 11:04:55 AM JST
create_window

* Wed 04 Jun 2014 11:04:55 AM JST
create_window
change_attributes

* Wed 04 Jun 2014 11:04:57 AM JST
create_window
change_attributes

* Wed 04 Jun 2014 11:04:57 AM JST
create_window
change_attributes
get_attributes

* Wed 04 Jun 2014 11:04:58 AM JST
create_window
change_attributes
get_attributes

* Wed 04 Jun 2014 11:04:59 AM JST
create_window
change_attributes
get_attributes
destroy

* Wed 04 Jun 2014 11:05:01 AM JST
create_window
change_attributes
get_attributes
destroy

* Wed 04 Jun 2014 11:05:01 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows

* Wed 04 Jun 2014 11:05:02 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows

* Wed 04 Jun 2014 11:05:03 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set

* Wed 04 Jun 2014 11:05:06 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set

* Wed 04 Jun 2014 11:05:06 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent

* Wed 04 Jun 2014 11:05:07 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent

* Wed 04 Jun 2014 11:05:07 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map

* Wed 04 Jun 2014 11:05:07 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map

* Wed 04 Jun 2014 11:05:07 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows

* Wed 04 Jun 2014 11:05:08 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows

* Wed 04 Jun 2014 11:05:08 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap

* Wed 04 Jun 2014 11:05:10 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap

* Wed 04 Jun 2014 11:05:10 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows

* Wed 04 Jun 2014 11:05:11 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows

* Wed 04 Jun 2014 11:05:11 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure

* Wed 04 Jun 2014 11:05:13 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure

* Wed 04 Jun 2014 11:05:13 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate

* Wed 04 Jun 2014 11:05:16 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate

* Wed 04 Jun 2014 11:05:16 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window

* Wed 04 Jun 2014 11:05:17 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window

* Wed 04 Jun 2014 11:05:18 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree

* Wed 04 Jun 2014 11:05:18 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree

* Wed 04 Jun 2014 11:05:18 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree

* Wed 04 Jun 2014 11:05:20 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree

* Wed 04 Jun 2014 11:05:20 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property

* Wed 04 Jun 2014 11:05:21 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property

* Wed 04 Jun 2014 11:05:21 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property

* Wed 04 Jun 2014 11:05:22 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property

* Wed 04 Jun 2014 11:05:22 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property

* Wed 04 Jun 2014 11:05:24 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property

* Wed 04 Jun 2014 11:05:24 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties

* Wed 04 Jun 2014 11:05:26 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties

* Wed 04 Jun 2014 11:05:26 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner

* Wed 04 Jun 2014 11:05:29 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner

* Wed 04 Jun 2014 11:05:29 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner
convert_selection

* Wed 04 Jun 2014 11:05:31 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner
convert_selection

* Wed 04 Jun 2014 11:05:31 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner
convert_selection
send_event

* Wed 04 Jun 2014 11:05:32 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner
convert_selection
send_event

* Wed 04 Jun 2014 11:05:32 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner
convert_selection
send_event
grab_pointer

* Wed 04 Jun 2014 11:05:38 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner
convert_selection
send_event
grab_pointer

* Wed 04 Jun 2014 11:05:38 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner
convert_selection
send_event
grab_pointer
grab_button

* Wed 04 Jun 2014 11:05:39 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner
convert_selection
send_event
grab_pointer
grab_button

* Wed 04 Jun 2014 11:05:39 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner
convert_selection
send_event
grab_pointer
grab_button
ungrab_button

* Wed 04 Jun 2014 11:05:45 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner
convert_selection
send_event
grab_pointer
grab_button
ungrab_button

* Wed 04 Jun 2014 11:05:45 AM JST
create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
raise_window
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner
convert_selection
send_event
grab_pointer
grab_button
ungrab_button
grab_keyboard

* Wed 04 Jun 2014 11:05:55 AM JST

* Wed 04 Jun 2014 11:05:56 AM JST

* Wed 04 Jun 2014 11:05:56 AM JST
ungrab_keyboard

* Wed 04 Jun 2014 11:05:56 AM JST
ungrab_keyboard

* Wed 04 Jun 2014 11:05:56 AM JST
ungrab_keyboard
grab_key

* Wed 04 Jun 2014 11:05:58 AM JST
ungrab_keyboard
grab_key

* Wed 04 Jun 2014 11:05:58 AM JST
ungrab_keyboard
grab_key
ungrab_key

* Wed 04 Jun 2014 11:05:59 AM JST
ungrab_keyboard
grab_key
ungrab_key

* Wed 04 Jun 2014 11:05:59 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer

* Wed 04 Jun 2014 11:06:00 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer

* Wed 04 Jun 2014 11:06:00 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events

* Wed 04 Jun 2014 11:06:05 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events

* Wed 04 Jun 2014 11:06:05 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords

* Wed 04 Jun 2014 11:06:07 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords

* Wed 04 Jun 2014 11:06:07 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer

* Wed 04 Jun 2014 11:06:07 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer

* Wed 04 Jun 2014 11:06:08 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus

* Wed 04 Jun 2014 11:06:09 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus

* Wed 04 Jun 2014 11:06:09 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus
clear_area

* Wed 04 Jun 2014 11:06:11 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus
clear_area

* Wed 04 Jun 2014 11:06:11 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus
clear_area
create_colormap

* Wed 04 Jun 2014 11:06:12 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus
clear_area
create_colormap

* Wed 04 Jun 2014 11:06:12 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus
clear_area
create_colormap
list_installed_colormaps

* Wed 04 Jun 2014 11:06:14 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus
clear_area
create_colormap
list_installed_colormaps

* Wed 04 Jun 2014 11:06:14 AM JST
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus
clear_area
create_colormap
list_installed_colormaps
rotate_properties

* Wed 04 Jun 2014 11:30:39 AM JST
_NET
* Wed 04 Jun 2014 11:30:40 AM JST
_NET_WM_USER_TIME'
* Wed 04 Jun 2014 11:30:54 AM JST
get_net_wm_user_time
* Wed 04 Jun 2014 11:31:55 AM JST
_NET_CLIENT_LIST
* Wed 04 Jun 2014 11:32:56 AM JST
connection.
* Wed 04 Jun 2014 11:32:56 AM JST
window.connection.
* Wed 04 Jun 2014 11:34:41 AM JST
_NET_DESKTOP_NAMES
* Wed 04 Jun 2014 11:35:43 AM JST
.reply().get_full_value()
* Wed 04 Jun 2014 11:38:00 AM JST
_NET_CURRENT_DESKTOP
* Wed 04 Jun 2014 11:39:16 AM JST
        return self._core.GetProperty._NET_CURRENT_DESKTOP(
            self.window).reply().get_full_value()

* Wed 04 Jun 2014 11:39:32 AM JST
_NET_DESKTOP_VIEWPORT
* Wed 04 Jun 2014 11:40:01 AM JST
_NET_DESKTOP_GEOMETRY
* Wed 04 Jun 2014 11:40:34 AM JST
_NET_SUPPORTING_WM_CHECK
* Wed 04 Jun 2014 11:41:49 AM JST
_NET_SUPPORTED
* Wed 04 Jun 2014 11:42:46 AM JST
_NET_WORKAREA
* Wed 04 Jun 2014 11:44:25 AM JST
_WIN_WORKSPACE
* Wed 04 Jun 2014 11:45:58 AM JST
_NET_DESKTOP_LAYOUT
* Wed 04 Jun 2014 11:47:19 AM JST
_NET_SHOWING_DESKTOP
* Wed 04 Jun 2014 11:49:18 AM JST
query_recursive_tree
* Wed 04 Jun 2014 11:50:01 AM JST
proper
* Wed 04 Jun 2014 11:50:31 AM JST
get_geometry
* Wed 04 Jun 2014 11:51:26 AM JST
return self.window.get_geometry()
* Wed 04 Jun 2014 11:51:36 AM JST
window.
* Wed 04 Jun 2014 11:51:38 AM JST
window.
* Wed 04 Jun 2014 11:55:29 AM JST
button, modifiers, event_mask,
                    pointer_mode=1, keyboard_mode=1, confine_to=0, cursor=0,
                    owner_events=True
* Wed 04 Jun 2014 11:56:36 AM JST
button, modifiers, event_mask,
                    pointer_mode=1, keyboard_mode=1, confine_to=0, cursor=0,
                    owner_events=True
* Wed 04 Jun 2014 11:56:39 AM JST
                    
* Wed 04 Jun 2014 11:56:49 AM JST
True
* Wed 04 Jun 2014 11:56:50 AM JST
                    
* Wed 04 Jun 2014 11:58:14 AM JST
time=0, pointer_mode=1, keyboard_mode=1,
                      owner_events=False
* Wed 04 Jun 2014 11:58:29 AM JST
                      
* Wed 04 Jun 2014 11:58:33 AM JST
1,
* Wed 04 Jun 2014 11:59:02 AM JST
time=0, pointer_mode=1, keyboard_mode=1,
                      owner_events=False
* Wed 04 Jun 2014 11:59:08 AM JST
            
* Wed 04 Jun 2014 11:59:11 AM JST
False
* Wed 04 Jun 2014 12:04:10 PM JST
WindowRootType
* Wed 04 Jun 2014 12:04:14 PM JST
WindowRootType
* Wed 04 Jun 2014 12:04:20 PM JST
WindowRootType
* Wed 04 Jun 2014 12:04:24 PM JST
windowtypes
* Wed 04 Jun 2014 12:12:41 PM JST
_NET_WM_USER_TIME
* Wed 04 Jun 2014 12:13:50 PM JST
            
* Wed 04 Jun 2014 12:17:03 PM JST
a.get_property(482)
* Wed 04 Jun 2014 12:17:07 PM JST
46137366
* Wed 04 Jun 2014 12:21:17 PM JST
False, 
* Wed 04 Jun 2014 12:21:21 PM JST
self.atom
* Wed 04 Jun 2014 12:21:31 PM JST
            
* Wed 04 Jun 2014 12:22:43 PM JST
46137366
* Wed 04 Jun 2014 12:50:21 PM JST
    @property
    def name(self, ):
        r"""SUMMARY

        get_name()

        @Return:
        """
        try:
            name = self.window.get_net_wm_name()
        except BadWindow as err:
            LOG.warn('Warning {}'.format(err))
            name = ''
        if not name:
            try:
                name = self.window.get_wm_name()
            except BadWindow as err:
                LOG.warn('Warning {}'.format(err))
                name = ''
        return name

* Wed 04 Jun 2014 12:51:35 PM JST
    @property
    def wmclass(self, ):
        r"""SUMMARY

        get_class()

        @Return:
        """
        try:
            wmclass = self.window.get_wm_class()
        except BadWindow as err:
            LOG.warn('Warning {}'.format(err))
            return WMCLASS(self.connection)
        try: # 'xfdesktop\x00Xfdesktop\x00' => ['xfdesktop', 'Xfdesktop']
            return WMCLASS(self.connection, *wmclass.split('\0')[:2])
        except TypeError as err:
            LOG.warning('Catched Error but skip: {}'.format(err))
            return WMCLASS(self.connection)

    @property
    def pid(self, ):
        r"""SUMMARY

        get_pid()

        @Return:
        """
        pid = gfi(self.window.get_net_wm_pid())
        if pid:
            return psutil.Process(pid)
        return None

* Wed 04 Jun 2014 12:56:03 PM JST
    @property
    def connection(self, ):
        r"""SUMMARY

        connection()

        @Return:
        """
        return self.window.connection

    @property
    def core(self, ):
        r"""SUMMARY

        core()

        @Return:
        """
        return self.connection.core

    def __int__(self, ):
        return int(self.window)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.window, other.window)
        return cmp(int(self), other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.window == other.window
        return int(self) == other

    def __hash__(self, ):
        return hash(self.window)

    def __repr__(self, ):
        return '{0.__class__.__name__}(window={1})'.format(self, int(self))

* Wed 04 Jun 2014 12:57:29 PM JST
WindowTypesAbstract
* Wed 04 Jun 2014 12:57:49 PM JST
    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return self.window.pack()


* Wed 04 Jun 2014 01:00:19 PM JST
Fundamental
* Wed 04 Jun 2014 01:00:42 PM JST
WindowUnknownType
* Wed 04 Jun 2014 01:01:15 PM JST
StaticWindow
* Wed 04 Jun 2014 01:01:22 PM JST
WindowUnknownType
* Wed 04 Jun 2014 01:12:23 PM JST
    def grab_key(self, key, modifiers, owner_events=False,
                 pointer_mode=1, keyboard_mode=1):
        r"""SUMMARY

        grab_key(key, modifiers, owner_events=False,
        pointer_mode=1, keyboard_mode=1)

        @Arguments:
        - `key`:
        - `modifiers`:
        - `owner_events`:
        - `pointer_mode`:
        - `keyboard_mode`:

        @Return:
        """
        self.window.grab_key(
            key, modifiers, owner_events, pointer_mode, keyboard_mode)

    def ungrab_key(self, key, modifiers):
        r"""SUMMARY

        ungrab_key(key, modifiers)

        @Arguments:
        - `key`:
        - `modifiers`:

        @Return:
        """
        self.window.ungrab_key(key, modifiers)

    def grab_keyboard(self, time=0, pointer_mode=1, keyboard_mode=1,
                      owner_events=False):
        r"""SUMMARY

        grab_keyboard(time=0, pointer_mode=1, keyboard_mode=1, owner_events=False)

        @Arguments:
        - `time`:
        - `pointer_mode`:
        - `keyboard_mode`:
        - `owner_events`:

        @Return:
        """
        self.window.grab_keyboard(
            time, pointer_mode, keyboard_mode, owner_events)

    def ungrab_keyboard(self, time=0):
        r"""SUMMARY

        ungrab_keyboard(time=0)

        @Arguments:
        - `time`:

        @Return:
        """
        self.window.ungrab_keyboard(time)

    def grab_button(self, button, modifiers, event_mask,
                    pointer_mode=1, keyboard_mode=1, confine_to=0, cursor=0,
                    owner_events=True):
        r"""SUMMARY
        grab_button(button, modifiers, event_mask,
                    pointer_mode=1, keyboard_mode=1, confine_to=0, cursor=0,
                    owner_events=True)

        @Arguments:
        - `button`:
        - `modifiers`:
        - `event_mask`:
        - `pointer_mode`:
        - `keyboard_mode`:
        - `confine_to`:
        - `cursor`:
        - `owner_events`:

        @Return:
        """
        self.window.grab_button(
            button, modifiers, event_mask, pointer_mode, keyboard_mode,
            confine_to, cursor, owner_events)

    def ungrab_button(self, button, modifiers):
        r"""SUMMARY

        ungrab_button(button, modifiers)

        @Arguments:
        - `button`:
        - `modifiers`:

        @Return:
        """
        self.window.ungrab_button(button, modifiers)


* Wed 04 Jun 2014 01:13:35 PM JST
    @property
    def x(self, ):
        r"""SUMMARY

        x()

        @Return:
        """
        return self.get_geometry().x

    @property
    def y(self, ):
        r"""SUMMARY

        y()

        @Return:
        """
        return self.get_geometry().y

    @property
    def width(self, ):
        r"""SUMMARY

        width()

        @Return:
        """
        return self.get_geometry().width

    @property
    def height(self, ):
        r"""SUMMARY

        height()

        @Return:
        """
        return self.get_geometry().height

    def get_geometry(self, ):
        r"""SUMMARY

        get_geometry()

        @Return:
        """
        return self.window.get_geometry()


* Wed 04 Jun 2014 02:03:20 PM JST
    def query_tree(self, ):
        r"""SUMMARY

        query_tree()

        @Return:
        """
        return self.window.query_tree()

    def query_subwindows(self, ):
        r"""SUMMARY

        query_subwindows()

        @Return:
        """
        return self.window.query_recursive_tree()



* Wed 04 Jun 2014 02:05:51 PM JST
    def list_properties(self, ):
        r"""SUMMARY

        list_properties()

        @Return:
        """
        return self.window.list_properties()



* Wed 04 Jun 2014 02:08:17 PM JST
    def __setattr__(self, name, value):
        if isinstance(value, int) and name in ('x', 'y', 'width', 'height'):
            self.move(**{name: value,})
        else:
            super(DynamicWindow, self).__setattr__(name, value)

    def move(self, **changes):
        r"""SUMMARY

        move(**kwargs)

        @Arguments:
        - `**kwargs`:

        @Return:
        """
        geo = WindowGeometry(
            self.connection, GeometryInfo(**changes), self.window.id)
        geo.move()

* Wed 04 Jun 2014 02:08:27 PM JST
DynamicWindow
* Wed 04 Jun 2014 02:09:18 PM JST
WindowUnknownType
* Wed 04 Jun 2014 02:11:18 PM JST
    # def list_states(self, ):
    #     r"""SUMMARY

    #     get_states()

    #     @Return:
    #     """
    #     return self.window.get_net_wm_state()

* Wed 04 Jun 2014 02:11:47 PM JST
    # def list_allowed_actions(self, ):
    #     r"""SUMMARY

    #     get_allowed_actions()

    #     @Return:
    #     """
    #     return self.window.get_net_wm_allowed_actions()


* Wed 04 Jun 2014 02:12:09 PM JST
    # def get_user_window_time(self, ):
    #     r"""SUMMARY

    #     get_user_window_time()

    #     @Return:
    #     """
    #     return self.window.get_net_wm_user_time()


* Wed 04 Jun 2014 02:12:31 PM JST
    # def focus(self, revert_to, time=0):
    #     r"""SUMMARY

    #     focus()

    #     @Return:
    #     """
    #     return self.window.set_input_focus(revert_to, time=0)


* Wed 04 Jun 2014 02:13:15 PM JST
    def close(self, ):
        r"""SUMMARY

        close()

        @Return:
        """
        return self.core.SendEvent.ClientMessage.close(self)


* Wed 04 Jun 2014 02:13:41 PM JST
    def kill(self, ):
        r"""SUMMARY

        kill()

        @Return:
        """
        return self.core.SendEvent.ClientMessage.delete(self)


* Wed 04 Jun 2014 02:13:46 PM JST
kill
* Wed 04 Jun 2014 02:14:25 PM JST
    # def isabove(self, ):
    #     r"""SUMMARY

    #     isabove()

    #     @Return:
    #     """
    #     states = self.list_states()
    #     for atom in self.core.SendEvent.ClientMessage.above.atoms:
    #         if atom in states:
    #             return True
    #     return False

    # def isbelow(self, ):
    #     r"""SUMMARY

    #     isbelow()

    #     @Return:
    #     """
    #     states = self.list_states()
    #     for atom in self.core.SendEvent.ClientMessage.below.atoms:
    #         if atom in states:
    #             return True
    #     return False

    # def isfullscreen(self, ):
    #     r"""SUMMARY

    #     isfullscreen()

    #     @Return:
    #     """
    #     states = self.list_states()
    #     for atom in self.core.SendEvent.ClientMessage.fullscreen.atoms:
    #         if atom in states:
    #             return True
    #     return False

    # def isshade(self, ):
    #     r"""SUMMARY

    #     isshade()

    #     @Return:
    #     """
    #     states = self.list_states()
    #     for atom in self.core.SendEvent.ClientMessage.shade.atoms:
    #         if atom in states:
    #             return True
    #     return False

    # def ismaximize(self, ):
    #     r"""SUMMARY

    #     isshade()

    #     @Return:
    #     """
    #     states = self.list_states()
    #     for atom in self.core.SendEvent.ClientMessage.maximize.atoms:
    #         if atom in states:
    #             return True
    #     return False

* Wed 04 Jun 2014 02:15:44 PM JST
    # def setabove(self, ):
    #     r"""SUMMARY

    #     set_above()

    #     @Return:
    #     """
    #     return self.core.SendEvent.ClientMessage.above.set(self)

    # def unsetabove(self, ):
    #     r"""SUMMARY

    #     unset_above()

    #     @Return:
    #     """
    #     return self.core.SendEvent.ClientMessage.above.unset(self)

    # def toggleabove(self, ):
    #     r"""SUMMARY

    #     toggle_above()

    #     @Return:
    #     """
    #     return self.core.SendEvent.ClientMessage.above.toggle(self)


* Wed 04 Jun 2014 02:16:30 PM JST
    def setbelow(self, ):
        r"""SUMMARY

        set_below()

        @Return:
        """
        return self.core.SendEvent.ClientMessage.below.set(self)

    def unsetbelow(self, ):
        r"""SUMMARY

        unset_below()

        @Return:
        """
        return self.core.SendEvent.ClientMessage.below.unset(self)

    def togglebelow(self, ):
        r"""SUMMARY

        toggle_below()

        @Return:
        """
        return self.core.SendEvent.ClientMessage.below.toggle(self)


* Wed 04 Jun 2014 02:17:38 PM JST
    def setfullscreen(self, ):
        r"""SUMMARY

        set_fullscreen()

        @Return:
        """
        return self.core.SendEvent.ClientMessage.fullscreen.set(self)

    def unsetfullscreen(self, ):
        r"""SUMMARY

        unset_fullscreen()

        @Return:
        """
        return self.core.SendEvent.ClientMessage.fullscreen.unset(self)

    def togglefullscreen(self, ):
        r"""SUMMARY

        toggle_fullscreen()

        @Return:
        """
        return self.core.SendEvent.ClientMessage.fullscreen.toggle(self)


* Wed 04 Jun 2014 02:18:38 PM JST
    def setmaximize(self, ):
        r"""SUMMARY

        set_maximize()

        @Return:
        """
        return self.core.SendEvent.ClientMessage.maximize.set(self)

    def unsetmaximize(self, ):
        r"""SUMMARY

        unset_maximize()

        @Return:
        """
        return self.core.SendEvent.ClientMessage.maximize.unset(self)

    def togglemaximize(self, ):
        r"""SUMMARY

        toggle_maximize()

        @Return:
        """
        return self.core.SendEvent.ClientMessage.maximize.toggle(self)


* Wed 04 Jun 2014 02:18:55 PM JST
window.id
* Wed 04 Jun 2014 02:19:39 PM JST
WindowUnknownType
* Wed 04 Jun 2014 02:22:05 PM JST
{
    '_NET_WM_WINDOW_TYPE_NORMAL'        : WindowNormalType,
    '_NET_WM_WINDOW_TYPE_SPLASH'        : WindowSplashType,
    '_NET_WM_WINDOW_TYPE_DESKTOP'       : WindowDesktopType,
    '_NET_WM_WINDOW_TYPE_DOCK'          : WindowDockType,
    '_NET_WM_WINDOW_TYPE_TOOLBAR'       : WindowToolbarType,
    '_NET_WM_WINDOW_TYPE_MENU'          : WindowMenuType,
    '_NET_WM_WINDOW_TYPE_UTILITY'       : WindowUtilityType,
    '_NET_WM_WINDOW_TYPE_DIALOG'        : WindowDialogType,
    '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU' : WindowDropdownMenuType,
    '_NET_WM_WINDOW_TYPE_POPUP_MENU'    : WindowPopupMenuType,
    '_NET_WM_WINDOW_TYPE_TOOLTIP'       : WindowTooltipType,
    '_NET_WM_WINDOW_TYPE_NOTIFICATION'  : WindowNotificationType,
    '_NET_WM_WINDOW_TYPE_COMBO'         : WindowComboType,
    '_NET_WM_WINDOW_TYPE_DND'           : WindowDNDType,
    }
* Wed 04 Jun 2014 02:23:35 PM JST
if name not in 
* Wed 04 Jun 2014 02:24:22 PM JST
WindowTypesDict
* Wed 04 Jun 2014 02:26:58 PM JST
self, 
* Wed 04 Jun 2014 02:28:37 PM JST

* Wed 04 Jun 2014 02:28:38 PM JST

* Wed 04 Jun 2014 02:28:38 PM JST
from xcb2.xproto.maskvalues import ConfigWindowMaskValues

* Wed 04 Jun 2014 02:28:38 PM JST
from xcb2.xproto.maskvalues import ConfigWindowMaskValues

* Wed 04 Jun 2014 02:28:38 PM JST
from xcb2.xproto.maskvalues import ConfigWindowMaskValues
from xcb2.xproto.define import StackMode

* Wed 04 Jun 2014 02:29:20 PM JST

* Wed 04 Jun 2014 02:29:20 PM JST

* Wed 04 Jun 2014 02:29:20 PM JST
        try:

* Wed 04 Jun 2014 02:29:31 PM JST
self.window.get_wm_name()
* Wed 04 Jun 2014 02:29:48 PM JST
self.window.get_net_wm_name()
* Wed 04 Jun 2014 02:29:52 PM JST

* Wed 04 Jun 2014 02:29:52 PM JST

* Wed 04 Jun 2014 02:29:52 PM JST
        name = 

* Wed 04 Jun 2014 02:34:04 PM JST
self.window.get_wm_class()
* Wed 04 Jun 2014 02:34:38 PM JST
wmclass = self.window.get_wm_class()
* Wed 04 Jun 2014 02:35:03 PM JST
WMCLASS(self._connection, *wmclass.split('\0')[:2])
* Wed 04 Jun 2014 02:37:37 PM JST
typesname
* Wed 04 Jun 2014 02:39:43 PM JST
WindowTypesDict
* Wed 04 Jun 2014 02:40:14 PM JST
str(
* Wed 04 Jun 2014 02:40:48 PM JST

* Wed 04 Jun 2014 02:40:49 PM JST
WindowUnknownType
* Wed 04 Jun 2014 02:42:28 PM JST
isinstance(
* Wed 04 Jun 2014 02:47:14 PM JST

* Wed 04 Jun 2014 02:47:14 PM JST

* Wed 04 Jun 2014 02:47:14 PM JST
        try:

* Wed 04 Jun 2014 02:47:28 PM JST
FundamentalWindow
* Wed 04 Jun 2014 02:47:30 PM JST

* Wed 04 Jun 2014 02:47:30 PM JST

* Wed 04 Jun 2014 02:47:30 PM JST
from xcb2.xproto import BadWindow

* Wed 04 Jun 2014 02:50:11 PM JST
FundamentalWindow
* Wed 04 Jun 2014 02:50:17 PM JST
WindowUnknownType
* Wed 04 Jun 2014 02:50:47 PM JST
FundamentalWindow
* Wed 04 Jun 2014 02:51:11 PM JST
FundamentalWindow
* Wed 04 Jun 2014 02:51:32 PM JST
FundamentalWindow
* Wed 04 Jun 2014 02:52:26 PM JST
WindowBase
* Wed 04 Jun 2014 02:53:02 PM JST
WindowBase, 
* Wed 04 Jun 2014 02:56:42 PM JST
get_net_wm_window_type
* Wed 04 Jun 2014 02:57:08 PM JST
name
* Wed 04 Jun 2014 02:57:56 PM JST
_NET_
* Wed 04 Jun 2014 02:59:09 PM JST
WMCLASS(self._connection)
* Wed 04 Jun 2014 03:00:17 PM JST
lis, append = make_list_append()
* Wed 04 Jun 2014 03:01:22 PM JST
LOG.warn('Warning {}'.format(err))
* Wed 04 Jun 2014 03:01:49 PM JST
        lis, append = make_list_append()
        for win in self:
            try:
                if name == win.name:
                    append(win)
            except BadWindow as err:
                LOG.warn('Warning {}'.format(err))
                continue
        return self.__class__(lis)

* Wed 04 Jun 2014 03:01:58 PM JST
name
* Wed 04 Jun 2014 03:02:01 PM JST
name
* Wed 04 Jun 2014 03:02:07 PM JST

* Wed 04 Jun 2014 03:02:07 PM JST

* Wed 04 Jun 2014 03:02:07 PM JST
        return self.__class__([x for x in self if wmclass in x.wmclass])

* Wed 04 Jun 2014 03:05:11 PM JST

* Wed 04 Jun 2014 03:05:11 PM JST

* Wed 04 Jun 2014 03:05:11 PM JST
        if self.typesname == '':

* Wed 04 Jun 2014 03:05:11 PM JST
        if self.typesname == '':

* Wed 04 Jun 2014 03:05:11 PM JST
        if self.typesname == '':
            return ''

* Wed 04 Jun 2014 03:06:17 PM JST
        lis, append = make_list_append()
        for win in self:
            try:
                if name == win.name:
                    append(win)
            except BadWindow as err:
                LOG.warn('Warning {}'.format(err))
                continue
        return self.__class__(lis)

* Wed 04 Jun 2014 03:06:34 PM JST
if search(x.name) is not None
* Wed 04 Jun 2014 03:07:03 PM JST

* Wed 04 Jun 2014 03:07:03 PM JST

* Wed 04 Jun 2014 03:07:03 PM JST
        return self.__class__([x for x in self if search(x.name) is not None])

* Wed 04 Jun 2014 03:07:16 PM JST
        lis, append = make_list_append()
        for win in self:
            try:
                if wmclass == win.wmclass:
                    append(win)
            except BadWindow as err:
                LOG.warn('Warning {}'.format(err))
                continue
        return self.__class__(lis)

* Wed 04 Jun 2014 03:07:36 PM JST
search(x.wmclass.res_name) is not None or
             search(x.wmclass.res_class) is not None
* Wed 04 Jun 2014 03:11:06 PM JST

* Wed 04 Jun 2014 03:11:06 PM JST

* Wed 04 Jun 2014 03:11:06 PM JST
from xcb2.logger import LOG

* Wed 04 Jun 2014 03:11:06 PM JST
from xcb2.logger import LOG

* Wed 04 Jun 2014 03:11:06 PM JST
from xcb2.logger import LOG
from xcb2.xproto import BadWindow

* Wed 04 Jun 2014 03:11:43 PM JST
WindowBase
* Wed 04 Jun 2014 03:11:53 PM JST
WindowUnknownType
* Wed 04 Jun 2014 03:13:43 PM JST
WindowTypesAbstract
* Wed 04 Jun 2014 03:15:47 PM JST
27262979
* Wed 04 Jun 2014 03:16:30 PM JST
.to_types()
* Wed 04 Jun 2014 03:16:50 PM JST
client_list
* Wed 04 Jun 2014 03:17:14 PM JST
.to_types()
* Wed 04 Jun 2014 03:47:18 PM JST
window
* Wed 04 Jun 2014 03:49:21 PM JST

* Wed 04 Jun 2014 03:49:22 PM JST

* Wed 04 Jun 2014 03:49:22 PM JST
        print(window)

* Wed 04 Jun 2014 03:51:18 PM JST
print w.n
* Wed 04 Jun 2014 03:52:58 PM JST
get_net_wm_window_type
* Wed 04 Jun 2014 03:54:56 PM JST
.get_net_wm_window_type()
* Wed 04 Jun 2014 04:19:47 PM JST
kwargs[EventDispatcher.event].event
* Wed 04 Jun 2014 04:21:58 PM JST

* Wed 04 Jun 2014 04:21:58 PM JST

* Wed 04 Jun 2014 04:21:58 PM JST
    print(kwargs[EventDispatcher.event].event)

* Wed 04 Jun 2014 04:21:59 PM JST

* Wed 04 Jun 2014 04:21:59 PM JST

* Wed 04 Jun 2014 04:21:59 PM JST
    print(kwargs[EventDispatcher.event].event)

* Wed 04 Jun 2014 04:22:46 PM JST
BadWindow
* Wed 04 Jun 2014 04:32:44 PM JST
window
* Wed 04 Jun 2014 04:33:00 PM JST
window
* Wed 04 Jun 2014 04:33:25 PM JST
window
* Wed 04 Jun 2014 04:37:37 PM JST
from xcb2.xobj.geometry import * 
* Wed 04 Jun 2014 04:38:45 PM JST
atom
* Wed 04 Jun 2014 04:39:16 PM JST
atom
* Wed 04 Jun 2014 04:39:38 PM JST
atom
* Wed 04 Jun 2014 04:39:47 PM JST
atom
* Wed 04 Jun 2014 05:06:07 PM JST
atom
* Wed 04 Jun 2014 05:06:28 PM JST
AtomName, Atom, AtomPair
* Wed 04 Jun 2014 05:06:31 PM JST

* Wed 04 Jun 2014 05:06:31 PM JST

* Wed 04 Jun 2014 05:06:31 PM JST
from xcb2.xobj import 

* Wed 04 Jun 2014 05:06:40 PM JST
atom.
* Wed 04 Jun 2014 05:06:42 PM JST
atom.
* Wed 04 Jun 2014 05:06:44 PM JST
atom.
* Wed 04 Jun 2014 05:06:49 PM JST
atom.
* Wed 04 Jun 2014 05:06:50 PM JST
atom.
* Wed 04 Jun 2014 05:06:53 PM JST
atom.
* Wed 04 Jun 2014 05:08:14 PM JST
atom
* Wed 04 Jun 2014 05:08:23 PM JST
atom
* Wed 04 Jun 2014 05:09:15 PM JST
.xobj
* Wed 04 Jun 2014 05:10:36 PM JST
window
* Wed 04 Jun 2014 05:11:05 PM JST
failures 
* Wed 04 Jun 2014 05:11:05 PM JST
pdb-failures 
* Wed 04 Jun 2014 05:11:05 PM JST
pdb --pdb-failures 
* Wed 04 Jun 2014 08:59:15 PM JST
window
* Wed 04 Jun 2014 09:00:48 PM JST
client_list
* Wed 04 Jun 2014 09:01:30 PM JST
.to_types()
* Wed 04 Jun 2014 09:08:00 PM JST
'Sleipnir.exe'
* Wed 04 Jun 2014 09:10:31 PM JST

* Wed 04 Jun 2014 09:10:31 PM JST

* Wed 04 Jun 2014 09:10:31 PM JST
                print(win.wmclass)

* Wed 04 Jun 2014 09:21:06 PM JST
ConfigWindow.StackMode
* Wed 04 Jun 2014 09:26:14 PM JST
            
* Wed 04 Jun 2014 09:27:14 PM JST
self.window.id, 
* Wed 04 Jun 2014 09:27:14 PM JST
            self.window.id, 
* Wed 04 Jun 2014 09:27:23 PM JST
ConfigureWindow
* Wed 04 Jun 2014 09:27:23 PM JST
_core.ConfigureWindow
* Wed 04 Jun 2014 09:27:29 PM JST
self.window.id, 
* Wed 04 Jun 2014 09:27:33 PM JST
return self.window.configure(
* Wed 04 Jun 2014 09:27:37 PM JST
            
* Wed 04 Jun 2014 10:56:34 PM JST
biteventmask
* Wed 04 Jun 2014 10:57:19 PM JST
from xcb2 import 
* Wed 04 Jun 2014 10:57:21 PM JST
biteventmask
* Wed 04 Jun 2014 10:57:33 PM JST
maskvalues
* Wed 04 Jun 2014 10:58:29 PM JST
bitmask
* Wed 04 Jun 2014 10:58:45 PM JST

* Wed 04 Jun 2014 10:58:45 PM JST

* Wed 04 Jun 2014 10:58:46 PM JST
from xcb2.xproto.bitmask import *

* Wed 04 Jun 2014 11:13:44 PM JST
xproto
* Wed 04 Jun 2014 11:14:02 PM JST
BitConfigWindow
* Wed 04 Jun 2014 11:14:54 PM JST
xcb2.xobj.window
* Wed 04 Jun 2014 11:15:12 PM JST
xobj.
* Wed 04 Jun 2014 11:15:19 PM JST
window
* Wed 04 Jun 2014 11:16:04 PM JST
WindowTypesAbstract
* Wed 04 Jun 2014 11:16:08 PM JST

* Wed 04 Jun 2014 11:16:08 PM JST

* Wed 04 Jun 2014 11:16:08 PM JST
from xcb2.xobj import WindowTypesAbstract

* Wed 04 Jun 2014 11:18:57 PM JST
        print('DEBUG-2-handler6.py')
        print(window)

* Wed 04 Jun 2014 11:19:35 PM JST

* Wed 04 Jun 2014 11:19:35 PM JST

* Wed 04 Jun 2014 11:19:35 PM JST
        print('DEBUG-2-handler6.py')

* Wed 04 Jun 2014 11:19:35 PM JST
        print('DEBUG-2-handler6.py')

* Wed 04 Jun 2014 11:19:35 PM JST
        print('DEBUG-2-handler6.py')
        print(window)

* Thu 05 Jun 2014 05:06:12 AM JST
query_subwindows
* Thu 05 Jun 2014 05:06:27 AM JST
query_subwindows
* Thu 05 Jun 2014 05:08:08 AM JST
get_net_wm_window_type
* Thu 05 Jun 2014 05:08:17 AM JST
query_subwindows
* Thu 05 Jun 2014 05:09:19 AM JST
get_net_wm_window_type
* Thu 05 Jun 2014 05:09:24 AM JST
win = win.get_net_wm_window_type()
* Thu 05 Jun 2014 05:11:26 AM JST
print(win)
* Thu 05 Jun 2014 05:11:30 AM JST
                print('DEBUG-1-mapnotify.py')
                print(win)

* Thu 05 Jun 2014 05:17:45 AM JST
kwargs[ED.event].window.query_subwindows()
* Thu 05 Jun 2014 05:19:25 AM JST
            print(list(kwargs[ED.event].window.query_subwindows()))

* Thu 05 Jun 2014 05:22:21 AM JST

* Thu 05 Jun 2014 05:22:21 AM JST

* Thu 05 Jun 2014 05:22:21 AM JST
            print(list(kwargs[ED.event].window.query_subwindows()))

* Thu 05 Jun 2014 05:22:23 AM JST

* Thu 05 Jun 2014 05:22:23 AM JST

* Thu 05 Jun 2014 05:22:24 AM JST
                print('DEBUG-1-mapnotify.py')

* Thu 05 Jun 2014 05:22:24 AM JST
                print('DEBUG-1-mapnotify.py')

* Thu 05 Jun 2014 05:22:24 AM JST
                print('DEBUG-1-mapnotify.py')
                print(win)

* Thu 05 Jun 2014 05:22:35 AM JST

* Thu 05 Jun 2014 05:22:35 AM JST

* Thu 05 Jun 2014 05:22:35 AM JST
            print(list(kwargs[ED.event].window.query_subwindows()))

* Thu 05 Jun 2014 05:22:38 AM JST

* Thu 05 Jun 2014 05:22:38 AM JST

* Thu 05 Jun 2014 05:22:38 AM JST
                print('DEBUG-1-mapnotify.py')

* Thu 05 Jun 2014 05:22:38 AM JST
                print('DEBUG-1-mapnotify.py')

* Thu 05 Jun 2014 05:22:38 AM JST
                print('DEBUG-1-mapnotify.py')
                print(win)

* Thu 05 Jun 2014 05:28:49 AM JST
WindowTypesAbstract
* Thu 05 Jun 2014 05:29:32 AM JST
                                  
* Thu 05 Jun 2014 05:38:01 AM JST
                    print('DEBUG-1-mapnotify.py')
                    print(win)

* Thu 05 Jun 2014 05:40:37 AM JST
if not type(win, WindowUnknownType):
* Thu 05 Jun 2014 05:41:23 AM JST
not 
* Thu 05 Jun 2014 05:41:27 AM JST
if type(win) != WindowUnknownType:
* Thu 05 Jun 2014 05:43:51 AM JST
WindowUnknownType
* Thu 05 Jun 2014 05:43:59 AM JST
WindowDesktopType
* Thu 05 Jun 2014 05:44:04 AM JST
WindowDockType
* Thu 05 Jun 2014 05:44:13 AM JST
WindowDialogType
* Thu 05 Jun 2014 05:44:25 AM JST
WindowPopupMenuType
* Thu 05 Jun 2014 05:44:30 AM JST
WindowNotificationType
* Thu 05 Jun 2014 05:45:00 AM JST
WindowRootType
* Thu 05 Jun 2014 05:45:04 AM JST
WindowNormalType
* Thu 05 Jun 2014 05:45:11 AM JST
GRABTYPES
* Thu 05 Jun 2014 05:45:23 AM JST
if isinstance(win, GRABTYPES):
* Thu 05 Jun 2014 05:46:35 AM JST
int,
* Thu 05 Jun 2014 05:47:01 AM JST
isinstance(1, (list, str)
* Thu 05 Jun 2014 05:49:21 AM JST

* Thu 05 Jun 2014 05:49:22 AM JST

* Thu 05 Jun 2014 05:49:22 AM JST
                    print('DEBUG-1-mapnotify.py')

* Thu 05 Jun 2014 05:49:22 AM JST
                    print('DEBUG-1-mapnotify.py')

* Thu 05 Jun 2014 05:49:22 AM JST
                    print('DEBUG-1-mapnotify.py')
                    print(win)

* Thu 05 Jun 2014 05:49:26 AM JST

* Thu 05 Jun 2014 05:49:26 AM JST

* Thu 05 Jun 2014 05:49:26 AM JST
                    print('DEBUG-1-mapnotify.py')

* Thu 05 Jun 2014 05:49:26 AM JST
                    print('DEBUG-1-mapnotify.py')

* Thu 05 Jun 2014 05:49:26 AM JST
                    print('DEBUG-1-mapnotify.py')
                    print(win)

* Thu 05 Jun 2014 05:49:57 AM JST
grab
* Thu 05 Jun 2014 05:50:11 AM JST
grab 
* Thu 05 Jun 2014 05:50:12 AM JST
only grab 
* Thu 05 Jun 2014 05:50:18 AM JST
# grab only viewable window
* Thu 05 Jun 2014 05:51:12 AM JST
WindowRootType,
* Thu 05 Jun 2014 06:07:32 AM JST
WindowToolbarType
* Thu 05 Jun 2014 06:19:52 AM JST
kwargs[ED.this].buttonrelease[self.key]
* Thu 05 Jun 2014 06:25:29 AM JST
window
* Thu 05 Jun 2014 06:27:05 AM JST

* Thu 05 Jun 2014 06:27:05 AM JST

* Thu 05 Jun 2014 06:27:05 AM JST
        print('DEBUG-2-handler6.py')

* Thu 05 Jun 2014 06:27:05 AM JST
        print('DEBUG-2-handler6.py')

* Thu 05 Jun 2014 06:27:05 AM JST
        print('DEBUG-2-handler6.py')
        print(window)

* Thu 05 Jun 2014 06:32:22 AM JST
.connection.root
* Thu 05 Jun 2014 06:36:48 AM JST
kwargs[ED.this]
* Thu 05 Jun 2014 06:37:04 AM JST
kwargs[ED.this]
* Thu 05 Jun 2014 06:37:10 AM JST
print(kwargs[ED.this])
* Thu 05 Jun 2014 06:39:50 AM JST

* Thu 05 Jun 2014 06:39:50 AM JST

* Thu 05 Jun 2014 06:39:50 AM JST
        print(kwargs[ED.this].buttonrelease[self.key].connection.root)

* Thu 05 Jun 2014 06:39:56 AM JST

* Thu 05 Jun 2014 06:39:56 AM JST

* Thu 05 Jun 2014 06:39:56 AM JST
        print('DEBUG-1-mapnotify.py')

* Thu 05 Jun 2014 06:39:56 AM JST
        print('DEBUG-1-mapnotify.py')

* Thu 05 Jun 2014 06:39:56 AM JST
        print('DEBUG-1-mapnotify.py')
        print(kwargs[ED.this])

* Thu 05 Jun 2014 06:40:02 AM JST

* Thu 05 Jun 2014 06:40:02 AM JST

* Thu 05 Jun 2014 06:40:02 AM JST
        print(kwargs[ED.this])

* Thu 05 Jun 2014 06:42:51 AM JST
self.binder.minormap
* Thu 05 Jun 2014 06:44:02 AM JST

* Thu 05 Jun 2014 06:44:02 AM JST

* Thu 05 Jun 2014 06:44:03 AM JST
        print('DEBUG-1-binder.py')

* Thu 05 Jun 2014 06:44:03 AM JST
        print('DEBUG-1-binder.py')

* Thu 05 Jun 2014 06:44:03 AM JST
        print('DEBUG-1-binder.py')
        print(self.binder.minormap)

* Thu 05 Jun 2014 06:47:45 AM JST

* Thu 05 Jun 2014 06:47:45 AM JST

* Thu 05 Jun 2014 06:47:45 AM JST
                print('DEBUG-1-mapnotify.py')

* Thu 05 Jun 2014 07:00:38 AM JST
        try:
            for win in kwargs[ED.event].window.query_subwindows():
                win = win.get_net_wm_window_type()
                # TODO: (Atami) [2014/06/05]
                # grab only viewable window
                if isinstance(win, GRABTYPES):
                    return kwargs[ED.this].keyrelease[self.key].refresh(win)
        except BadWindow as err:
            LOG.warning('Catched BadWindow {}'.format(err))

* Thu 05 Jun 2014 07:00:50 AM JST
(kwargs[ED.this].buttonpress[self.key]
                .refresh(kwargs[ED.this].connection.root))
* Thu 05 Jun 2014 07:01:15 AM JST
                            
* Thu 05 Jun 2014 07:01:32 AM JST
        try:
            for win in kwargs[ED.event].window.query_subwindows():
                win = win.get_net_wm_window_type()
                # TODO: (Atami) [2014/06/05]
                # grab only viewable window
                if isinstance(win, GRABTYPES):
                    return (kwargs[ED.this].buttonpress[self.key].refresh(win))
        except BadWindow as err:
            LOG.warning('Catched BadWindow {}'.format(err))

* Thu 05 Jun 2014 07:01:43 AM JST
buttonrelease
* Thu 05 Jun 2014 07:03:44 AM JST

* Thu 05 Jun 2014 07:03:44 AM JST

* Thu 05 Jun 2014 07:03:44 AM JST
        # return (kwargs[ED.this].buttonrelease[self.key]

* Thu 05 Jun 2014 07:03:44 AM JST
        # return (kwargs[ED.this].buttonrelease[self.key]

* Thu 05 Jun 2014 07:03:45 AM JST
        # return (kwargs[ED.this].buttonrelease[self.key]
                # .refresh(kwargs[ED.this].connection.root))

* Thu 05 Jun 2014 07:03:48 AM JST

* Thu 05 Jun 2014 07:03:48 AM JST

* Thu 05 Jun 2014 07:03:49 AM JST
        # return (kwargs[ED.this].buttonpress[self.key]

* Thu 05 Jun 2014 07:03:49 AM JST
        # return (kwargs[ED.this].buttonpress[self.key]

* Thu 05 Jun 2014 07:03:49 AM JST
        # return (kwargs[ED.this].buttonpress[self.key]
                # .refresh(kwargs[ED.this].connection.root))

* Thu 05 Jun 2014 07:03:50 AM JST

* Thu 05 Jun 2014 07:03:50 AM JST

* Thu 05 Jun 2014 07:03:50 AM JST
            LOG.warning('Catched BadWindow {}'.format(err))

* Thu 05 Jun 2014 07:04:01 AM JST

* Thu 05 Jun 2014 07:04:01 AM JST

* Thu 05 Jun 2014 07:04:01 AM JST
        print('DEBUG-1-binder.py')

* Thu 05 Jun 2014 07:04:04 AM JST

* Thu 05 Jun 2014 07:04:04 AM JST

* Thu 05 Jun 2014 07:04:04 AM JST
        print('DEBUG-1-binder.py')

* Thu 05 Jun 2014 07:04:06 AM JST

* Thu 05 Jun 2014 07:04:06 AM JST

* Thu 05 Jun 2014 07:04:06 AM JST
        print(window)

* Thu 05 Jun 2014 07:32:03 AM JST
SUMMARY
* Thu 05 Jun 2014 07:53:11 AM JST
pass
* Thu 05 Jun 2014 07:53:36 AM JST
windo
* Thu 05 Jun 2014 07:53:50 AM JST
Resource
* Thu 05 Jun 2014 07:58:55 AM JST
482
* Thu 05 Jun 2014 07:59:29 AM JST
'Failed: Resource.__int__ expect: {}, got: {}'
* Thu 05 Jun 2014 08:00:23 AM JST
expect: {}, got: {}
* Thu 05 Jun 2014 08:03:36 AM JST
self
* Thu 05 Jun 2014 08:04:22 AM JST
class
* Thu 05 Jun 2014 08:04:29 AM JST
method
* Thu 05 Jun 2014 08:06:25 AM JST
resource = 
* Thu 05 Jun 2014 08:07:09 AM JST
conn
* Thu 05 Jun 2014 08:07:10 AM JST
self.conn
* Thu 05 Jun 2014 08:08:36 AM JST
first
* Thu 05 Jun 2014 08:08:39 AM JST
second
* Thu 05 Jun 2014 08:09:01 AM JST
    def test_cmp_other_connection(self, ):
        r"""cmp_other_connection."""
        conn = xcb.connect()
        resource = Resource(conn, 482)
        expect = 0
        got = self.resource.__cmp__(resource)
        self.assertEqual(expect, got,
                         msg='Failed: Resource.__cmp__ expect: \{}, got: \{}'
                         .format(expect, got))


* Thu 05 Jun 2014 08:09:10 AM JST

* Thu 05 Jun 2014 08:09:10 AM JST

* Thu 05 Jun 2014 08:09:10 AM JST
        conn = xcb.connect()

* Thu 05 Jun 2014 08:09:10 AM JST
        conn = xcb.connect()

* Thu 05 Jun 2014 08:09:11 AM JST
        conn = xcb.connect()
        resource = Resource(conn, 482)

* Thu 05 Jun 2014 08:09:13 AM JST
resource
* Thu 05 Jun 2014 08:13:33 AM JST
asser
* Thu 05 Jun 2014 08:13:33 AM JST
self.asser
* Thu 05 Jun 2014 08:13:46 AM JST
self.
* Thu 05 Jun 2014 08:14:00 AM JST
        self.assertEqual(expect, got,
                         msg='Failed: Resource.__cmp__ expect: \{}, got: \{}'
                         .format(expect, got))

* Thu 05 Jun 2014 08:34:54 AM JST
'<{0.__class__.__name__} {0.id}>'
* Thu 05 Jun 2014 08:35:08 AM JST
__name__}
* Thu 05 Jun 2014 08:35:09 AM JST
__class__.__name__}
* Thu 05 Jun 2014 08:36:21 AM JST
    def test_repr(self, ):
        r"""repr."""
        expect = '<Resource 482>'
        got = repr(self.resource)
        self.assertEqual(expect, got,
                         msg='Failed: Resource.__repr__ expect: \{}, got: \{}'
                         .format(expect, got))


* Thu 05 Jun 2014 08:36:43 AM JST
repr
* Thu 05 Jun 2014 08:37:36 AM JST
VoidCookie
* Thu 05 Jun 2014 08:38:28 AM JST
        self.assertEqual(expect, got,
                         msg='Failed: Resource.__str__ expect: \{}, got: \{}'
                         .format(expect, got))

* Thu 05 Jun 2014 08:38:33 AM JST
__str__
* Thu 05 Jun 2014 08:39:37 AM JST
msg='Failed: Resource.kill_client expect: \{}, got: \{}'
                         .format(expect, got)
* Thu 05 Jun 2014 08:39:47 AM JST
    
* Thu 05 Jun 2014 08:39:48 AM JST

* Thu 05 Jun 2014 08:39:48 AM JST

* Thu 05 Jun 2014 08:39:49 AM JST
        self.assertEqual(expect, got,

* Thu 05 Jun 2014 08:39:49 AM JST
        self.assertEqual(expect, got,

* Thu 05 Jun 2014 08:39:49 AM JST
        self.assertEqual(expect, got,
                    )

* Thu 05 Jun 2014 08:56:53 AM JST
WMCLASS
* Thu 05 Jun 2014 11:05:03 AM JST
simple_teswindow
* Thu 05 Jun 2014 11:08:42 AM JST
from xcb2.tests import simple_teswindow, NAME, WMCLASS as wmclass
from xcb2.xobj.window.wm_class import WMCLASS

* Thu 05 Jun 2014 11:08:56 AM JST
WMCLASS(self.conn, *wmclass.split('\x00'))
* Thu 05 Jun 2014 11:09:10 AM JST
WMCLASS(c, 
* Thu 05 Jun 2014 11:33:14 AM JST
test'
* Thu 05 Jun 2014 11:34:50 AM JST
    def test_contains(self, ):
        r"""contains."""
        res_name = 'test'
        wm = WMCLASS(self.conn, res_name, 'Test')
        self.assertIn(res_name, wm,
                      msg='Failed: WMCLASS.__contains__ expect: {}, got: {}'
                      .format(res_name, wm))


* Thu 05 Jun 2014 11:35:03 AM JST
res_name
* Thu 05 Jun 2014 11:35:10 AM JST
Test'
* Thu 05 Jun 2014 11:37:02 AM JST
assertNotIn
* Thu 05 Jun 2014 11:37:13 AM JST
    def test_contains2(self, ):
        r"""contains."""
        res_class = 'Test'
        wm = WMCLASS(self.conn, 'test', res_class)
        self.assertIn(res_class, wm,
                      msg='Failed: WMCLASS.__contains__ expect: {}, got: {}'
                      .format(res_class, wm))

* Thu 05 Jun 2014 11:37:27 AM JST
res_class
* Thu 05 Jun 2014 11:39:49 AM JST
WMCLASS(self.conn, 'test', 'Test')
* Thu 05 Jun 2014 11:41:49 AM JST
method
* Thu 05 Jun 2014 11:41:50 AM JST
class.method
* Thu 05 Jun 2014 11:48:03 AM JST
wm = WMCLASS(self.conn, 'test', 'Test')
* Thu 05 Jun 2014 11:48:21 AM JST
    def test_nonzero(self, ):
        r"""nonzero."""
        wm = WMCLASS(self.conn, 'test', 'Test')
        self.assertTrue(wm)

* Thu 05 Jun 2014 11:51:44 AM JST
SetProperty
* Thu 05 Jun 2014 11:52:48 AM JST
DG Proper 
* Thu 05 Jun 2014 11:55:29 AM JST
pass
* Thu 05 Jun 2014 11:55:31 AM JST
pass
* Thu 05 Jun 2014 12:01:48 PM JST
from xcb2.tests import simple_teswindow, NAME, WMCLASS as wmclass
from xcb2.xobj.window.wm_class import WMCLASS

* Thu 05 Jun 2014 12:02:03 PM JST
WMCLASS()
* Thu 05 Jun 2014 12:06:52 PM JST
w=WMCLASS(c, 'tes', 'Tes')
* Thu 05 Jun 2014 12:07:09 PM JST
from xcb2.tests import simple_teswindow, NAME, WMCLASS as wmclass
from xcb2.xobj.window.wm_class import WMCLASS

* Thu 05 Jun 2014 12:07:12 PM JST

* Thu 05 Jun 2014 12:07:12 PM JST

* Thu 05 Jun 2014 12:07:12 PM JST
w=WMCLASS(c, 'tes', 'Tes')

* Thu 05 Jun 2014 12:10:34 PM JST
atom.name.get_typesatom()
* Thu 05 Jun 2014 12:10:50 PM JST

* Thu 05 Jun 2014 12:10:50 PM JST

* Thu 05 Jun 2014 12:10:50 PM JST
        types = atom.name.get_typesatom()

* Thu 05 Jun 2014 12:11:27 PM JST
simple_teswindow
* Thu 05 Jun 2014 12:11:58 PM JST
from xcb2.tests import simple_teswindow, NAME, WMCLASS as wmclass
from xcb2.xobj.window.wm_class import WMCLASS

* Thu 05 Jun 2014 12:18:42 PM JST
buf.write(str(buffer(_array('B', data))))
* Thu 05 Jun 2014 12:19:05 PM JST
            
* Thu 05 Jun 2014 12:19:18 PM JST

* Thu 05 Jun 2014 12:19:18 PM JST

* Thu 05 Jun 2014 12:19:18 PM JST
        - [yas] elisp error!:

* Thu 05 Jun 2014 12:19:18 PM JST
        - [yas] elisp error!:

* Thu 05 Jun 2014 12:19:18 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 05 Jun 2014 12:19:18 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 05 Jun 2014 12:19:18 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 05 Jun 2014 12:19:19 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 05 Jun 2014 12:19:19 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 05 Jun 2014 12:19:21 PM JST

* Thu 05 Jun 2014 12:19:21 PM JST

* Thu 05 Jun 2014 12:19:22 PM JST
        - [yas] elisp error!:

* Thu 05 Jun 2014 12:19:22 PM JST
        - [yas] elisp error!:

* Thu 05 Jun 2014 12:19:22 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 05 Jun 2014 12:19:22 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 05 Jun 2014 12:19:22 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 05 Jun 2014 12:19:22 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 05 Jun 2014 12:19:22 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 05 Jun 2014 12:23:54 PM JST
setwmclass
* Thu 05 Jun 2014 12:24:22 PM JST
ChangeProperty
* Thu 05 Jun 2014 12:24:46 PM JST
window = simple_teswindow()
* Thu 05 Jun 2014 12:28:41 PM JST
        self.assertEqual(newname, win.wmclass.res_name,
                         msg='Failed: WMCLASS.change expect: \{}, got: \{}'
                         .format(newname, win.wmclass.res_name))

* Thu 05 Jun 2014 12:29:35 PM JST
        self.conn.core.DestroyWindow(window)
        self.conn.flush()

* Thu 05 Jun 2014 12:42:54 PM JST
failures 
* Thu 05 Jun 2014 12:42:55 PM JST
pdb-failures 
* Thu 05 Jun 2014 12:42:55 PM JST
pdb --pdb-failures 
* Thu 05 Jun 2014 12:45:07 PM JST
    @property
    def atom(self, ):
        r"""SUMMARY

        atom()

        @Return:
        """
        return self.connection.core.atomidentify(self.atomname)


* Thu 05 Jun 2014 12:47:00 PM JST
pass
        
* Thu 05 Jun 2014 12:47:07 PM JST
    def setUp(self):
        self.conn = xcb2.connect()
        self.mocker.replay()

* Thu 05 Jun 2014 12:47:22 PM JST
    def test_change(self, ):
        r"""change."""
        window = simple_teswindow()
        newname, newclass = 'newname', 'newclass'
        wm = WMCLASS(self.conn, newname, newclass)
        wm.change(window)
        self.conn.flush()
        win = self.conn.get_windowtype(window)
        self.assertEqual(newname, win.wmclass.res_name,
                         msg='Failed: WMCLASS.change expect: \{}, got: \{}'
                         .format(newname, win.wmclass.res_name))
        self.assertEqual(newclass, win.wmclass.res_class,
                         msg='Failed: WMCLASS.change expect: \{}, got: \{}'
                         .format(newname, win.wmclass.res_class))
        self.conn.core.DestroyWindow(window)
        self.conn.flush()


* Thu 05 Jun 2014 12:47:41 PM JST
failures 
* Thu 05 Jun 2014 12:47:41 PM JST
pdb-failures 
* Thu 05 Jun 2014 12:47:42 PM JST
pdb --pdb-failures 
* Thu 05 Jun 2014 12:49:15 PM JST
window = simple_teswindow()
* Thu 05 Jun 2014 12:49:27 PM JST
window =
* Thu 05 Jun 2014 12:49:31 PM JST

* Thu 05 Jun 2014 12:49:31 PM JST

* Thu 05 Jun 2014 12:49:31 PM JST
        window = simple_teswindow()

* Thu 05 Jun 2014 12:49:56 PM JST
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

* Thu 05 Jun 2014 12:52:44 PM JST

* Thu 05 Jun 2014 12:52:44 PM JST

* Thu 05 Jun 2014 12:52:44 PM JST
        sleep(5)

* Thu 05 Jun 2014 12:55:30 PM JST
wm = WMCLASS(self.conn, 'test', 'Test')
* Thu 05 Jun 2014 12:59:20 PM JST
wm = WMCLASS(self.conn, *wmclass.split('\x00')[0:2])
* Thu 05 Jun 2014 01:00:47 PM JST
WMCLASS
* Thu 05 Jun 2014 01:02:16 PM JST
wm = WMCLASS(self.conn, *wmclass.split('\x00')[0:2])
* Thu 05 Jun 2014 01:07:51 PM JST

* Thu 05 Jun 2014 01:07:51 PM JST

* Thu 05 Jun 2014 01:07:51 PM JST
        sleep(0.1)

* Thu 05 Jun 2014 01:09:43 PM JST
    def test_match_client_list(self):
        r"""
        """
        window = simple_teswindow()
        wm = WMCLASS(self.conn, *wmclass.split('\x00')[0:2])
        got = wm.match_client_list()
        self.assertIn(window, got,
                      msg='Failed:'
                      ' WMCLASS.match_client_list expect {}, got: {}'
                      .format(window, got))
        self.conn.core.DestroyWindow(window)
        self.conn.flush()


* Thu 05 Jun 2014 01:09:52 PM JST

* Thu 05 Jun 2014 01:09:52 PM JST

* Thu 05 Jun 2014 01:09:52 PM JST
        window = simple_teswindow()

* Thu 05 Jun 2014 01:12:01 PM JST

    # def test_match_client_list(self):
    #     r"""
    #     """
    #     wm = WMCLASS(self.conn, *wmclass.split('\x00')[0:2])
    #     got = wm.match_client_list()
    #     self.assertIn(self.window, got,
    #                   msg='Failed:'
    #                   ' WMCLASS.match_client_list expect {}, got: {}'
    #                   .format(self.window, got))
    #     self.conn.core.DestroyWindow(self.window)
    #     self.conn.flush()

* Thu 05 Jun 2014 01:13:39 PM JST
                         
* Thu 05 Jun 2014 01:14:37 PM JST
segmentation fault
* Thu 05 Jun 2014 01:16:03 PM JST
self.window = simple_teswindow()
* Thu 05 Jun 2014 01:16:13 PM JST
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

* Thu 05 Jun 2014 01:17:35 PM JST

* Thu 05 Jun 2014 01:17:35 PM JST

* Thu 05 Jun 2014 01:17:35 PM JST
        self.skipTest('segmentation fault')

* Thu 05 Jun 2014 01:18:28 PM JST

* Thu 05 Jun 2014 01:18:28 PM JST

* Thu 05 Jun 2014 01:18:28 PM JST
        sleep(1)

* Thu 05 Jun 2014 01:29:15 PM JST
kwargs[ED.event].event
* Thu 05 Jun 2014 01:36:01 PM JST
not isinstance(win, WindowUnknownType)
* Thu 05 Jun 2014 02:05:25 PM JST
Drawable
* Thu 05 Jun 2014 02:05:41 PM JST
Window, 
* Thu 05 Jun 2014 02:08:33 PM JST
get_geometry
* Thu 05 Jun 2014 02:15:24 PM JST
WindowGeometry(self.connection, reply, self)
* Thu 05 Jun 2014 02:15:27 PM JST

* Thu 05 Jun 2014 02:15:27 PM JST

* Thu 05 Jun 2014 02:15:27 PM JST
        win = 

* Thu 05 Jun 2014 02:16:04 PM JST
.translate_coords()
* Thu 05 Jun 2014 02:57:53 PM JST
from mocker import *
* Thu 05 Jun 2014 02:57:56 PM JST
MockerTestCase
* Thu 05 Jun 2014 02:58:31 PM JST
setUpClass
* Thu 05 Jun 2014 03:00:42 PM JST
    @classmethod
    def setUpClass(cls):
        print "setUpClass"

* Thu 05 Jun 2014 03:01:00 PM JST
simple_teswindow
* Thu 05 Jun 2014 03:03:46 PM JST
self
* Thu 05 Jun 2014 03:06:24 PM JST
pass
* Thu 05 Jun 2014 03:07:28 PM JST
    @classmethod
    def setUpClass(cls):
        cls.conn = xcb2.connect()
        cls.window = simple_teswindow()


* Thu 05 Jun 2014 03:08:13 PM JST
    @classmethod
    def tearDownClass(cls, ):

* Thu 05 Jun 2014 03:08:54 PM JST
    @classmethod
    def setUpClass(cls):
        pass

* Thu 05 Jun 2014 03:09:02 PM JST
    @classmethod
    def tearDownClass(cls, ):
        pass

* Thu 05 Jun 2014 03:09:44 PM JST
class Test$1(MockerTestCase):
    """`(format-time-string "%Y/%m/%d")`"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self):
        self.mocker.replay()

    def test_$2(self):
        r"""$2
        """
        ${3:pass}
        $0

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass

* Thu 05 Jun 2014 10:50:36 PM JST
    @classmethod
    def setUpClass(cls):
        pass

* Thu 05 Jun 2014 10:50:45 PM JST

* Thu 05 Jun 2014 10:50:45 PM JST

* Thu 05 Jun 2014 10:50:45 PM JST
        self.window = simple_teswindow()

* Thu 05 Jun 2014 10:50:51 PM JST
self
* Thu 05 Jun 2014 10:50:57 PM JST

* Thu 05 Jun 2014 10:50:57 PM JST

* Thu 05 Jun 2014 10:50:57 PM JST
        self.conn = xcb.connect()

* Thu 05 Jun 2014 10:51:00 PM JST
self
* Thu 05 Jun 2014 10:51:33 PM JST

* Thu 05 Jun 2014 10:51:33 PM JST

* Thu 05 Jun 2014 10:51:33 PM JST
        self.args = (self.window, ConfigWindow.X, [100] )

* Thu 05 Jun 2014 10:51:37 PM JST
self
* Thu 05 Jun 2014 10:51:40 PM JST
self
* Thu 05 Jun 2014 10:51:51 PM JST
        self.protocol = ConfigureWindow(self.conn)
        self.protocol_check = ConfigureWindowChecked(self.conn)
        self.cookie = VoidCookie

* Thu 05 Jun 2014 10:51:54 PM JST
self
* Thu 05 Jun 2014 10:51:58 PM JST
self
* Thu 05 Jun 2014 10:52:02 PM JST
self
* Thu 05 Jun 2014 10:52:07 PM JST
self
* Thu 05 Jun 2014 10:52:09 PM JST
self
* Thu 05 Jun 2014 10:52:46 PM JST
    @classmethod
    def tearDownClass(cls, ):
        pass

* Thu 05 Jun 2014 10:52:56 PM JST
self.conn.core.DestroyWindow(self.window)
* Thu 05 Jun 2014 10:53:06 PM JST

* Thu 05 Jun 2014 10:53:06 PM JST

* Thu 05 Jun 2014 10:53:06 PM JST
        self.conn.core.DestroyWindow(self.window)

* Thu 05 Jun 2014 10:53:10 PM JST
self
* Thu 05 Jun 2014 10:53:13 PM JST

* Thu 05 Jun 2014 10:53:13 PM JST

* Thu 05 Jun 2014 10:53:14 PM JST
        self.conn.disconnect()

* Thu 05 Jun 2014 10:53:19 PM JST
self
* Thu 05 Jun 2014 10:53:22 PM JST
self
* Thu 05 Jun 2014 10:55:36 PM JST
    @classmethod
    def setUpClass(cls):
        pass

* Thu 05 Jun 2014 10:55:40 PM JST
pass
* Thu 05 Jun 2014 10:55:43 PM JST

* Thu 05 Jun 2014 10:55:43 PM JST

* Thu 05 Jun 2014 10:55:43 PM JST
        self.window = simple_teswindow()

* Thu 05 Jun 2014 10:55:46 PM JST
self
* Thu 05 Jun 2014 10:55:56 PM JST
        self.args = (self.window, ConfigWindow.X, [100])
        self.args2 = (self.window, ConfigWindow.X | ConfigWindow.Y, [0, 0])
        self.args3 = (self.window,
                      ConfigWindow.X | ConfigWindow.Y |
                      ConfigWindow.Width | ConfigWindow.Height,
                      [0, 0, 100, 100])

* Thu 05 Jun 2014 10:55:59 PM JST
self
* Thu 05 Jun 2014 10:56:01 PM JST
self
* Thu 05 Jun 2014 10:56:03 PM JST
self
* Thu 05 Jun 2014 10:56:07 PM JST
self
* Thu 05 Jun 2014 10:56:09 PM JST
self
* Thu 05 Jun 2014 10:56:11 PM JST
self
* Thu 05 Jun 2014 10:56:21 PM JST
self
* Thu 05 Jun 2014 10:56:25 PM JST
        self.protocol = ConfigureWindow(self.conn)
        self.protocol_check = ConfigureWindowChecked(self.conn)

* Thu 05 Jun 2014 10:56:30 PM JST
self
* Thu 05 Jun 2014 10:56:32 PM JST
self
* Thu 05 Jun 2014 10:56:35 PM JST
self
* Thu 05 Jun 2014 10:56:37 PM JST
self
* Thu 05 Jun 2014 10:57:00 PM JST
    @classmethod
    def tearDownClass(cls, ):
        pass

* Thu 05 Jun 2014 10:57:08 PM JST
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()
        self.conn.disconnect()

* Thu 05 Jun 2014 10:57:14 PM JST
self
* Thu 05 Jun 2014 10:57:16 PM JST
self
* Thu 05 Jun 2014 10:57:19 PM JST
self
* Thu 05 Jun 2014 10:57:20 PM JST
self
* Thu 05 Jun 2014 10:57:26 PM JST

* Thu 05 Jun 2014 10:57:26 PM JST

* Thu 05 Jun 2014 10:57:26 PM JST
        self.conn.core.DestroyWindow(self.window)

* Thu 05 Jun 2014 10:57:26 PM JST
        self.conn.core.DestroyWindow(self.window)

* Thu 05 Jun 2014 10:57:26 PM JST
        self.conn.core.DestroyWindow(self.window)
        self.conn.disconnect()

* Thu 05 Jun 2014 11:02:04 PM JST
SingletonConnectionMeta
* Thu 05 Jun 2014 11:04:56 PM JST
SingletonConnectionMeta
* Thu 05 Jun 2014 11:06:26 PM JST
SingletonConnectionMeta._instances
* Thu 05 Jun 2014 11:06:48 PM JST
SingletonConnectionMeta._instances
* Thu 05 Jun 2014 11:08:14 PM JST
SingletonConnectionMeta._instances
* Thu 05 Jun 2014 11:08:30 PM JST
SingletonConnectionMeta._instances
* Thu 05 Jun 2014 11:08:46 PM JST

* Thu 05 Jun 2014 11:08:46 PM JST

* Thu 05 Jun 2014 11:08:47 PM JST
        if (self.__class__ in instances and

* Thu 05 Jun 2014 11:08:47 PM JST
        if (self.__class__ in instances and

* Thu 05 Jun 2014 11:08:47 PM JST
        if (self.__class__ in instances and
            self.display in instances[self.__class__]):

* Thu 05 Jun 2014 11:11:04 PM JST
    @classmethod
    def setUpClass(cls):
        pass


* Thu 05 Jun 2014 11:11:10 PM JST
pass
* Thu 05 Jun 2014 11:11:14 PM JST
self.conn = xcb.connect()
* Thu 05 Jun 2014 11:11:18 PM JST
self
* Thu 05 Jun 2014 11:11:19 PM JST

* Thu 05 Jun 2014 11:11:19 PM JST

* Thu 05 Jun 2014 11:11:20 PM JST
        self.conn = xcb.connect()

* Thu 05 Jun 2014 11:11:21 PM JST

* Thu 05 Jun 2014 11:11:22 PM JST

* Thu 05 Jun 2014 11:11:22 PM JST
        self.conn2 = xcb2.connect()

* Thu 05 Jun 2014 11:11:27 PM JST
self
* Thu 05 Jun 2014 11:11:33 PM JST
self
* Thu 05 Jun 2014 11:11:40 PM JST
self
* Thu 05 Jun 2014 11:14:01 PM JST
    @classmethod
    def tearDownClass(cls, ):
        pass

* Thu 05 Jun 2014 11:14:08 PM JST

* Thu 05 Jun 2014 11:14:09 PM JST

* Thu 05 Jun 2014 11:14:09 PM JST
        self.conn.disconnect()

* Thu 05 Jun 2014 11:14:21 PM JST
self
* Thu 05 Jun 2014 11:14:36 PM JST
        self.conn.flush()
        self.conn2.flush()

* Thu 05 Jun 2014 11:14:40 PM JST
self
* Thu 05 Jun 2014 11:14:42 PM JST
self
* Thu 05 Jun 2014 11:17:41 PM JST
'BITMAP'
* Thu 05 Jun 2014 11:18:00 PM JST
self.conn.core.InternAtom(
            False, len(atomname), atomname).reply().atom
* Thu 05 Jun 2014 11:18:07 PM JST
self
* Thu 05 Jun 2014 11:18:47 PM JST
expect
* Thu 05 Jun 2014 11:18:55 PM JST
expect)
* Thu 05 Jun 2014 11:18:56 PM JST
int(expect)
* Thu 05 Jun 2014 11:24:24 PM JST
expect
* Thu 05 Jun 2014 11:24:43 PM JST
atomint
* Thu 05 Jun 2014 11:26:01 PM JST
expect
* Thu 05 Jun 2014 11:29:09 PM JST
                            
* Thu 05 Jun 2014 11:31:08 PM JST

* Thu 05 Jun 2014 11:31:08 PM JST

* Thu 05 Jun 2014 11:31:08 PM JST
        # atomint = 5

* Thu 05 Jun 2014 11:31:08 PM JST
        # atomint = 5

* Thu 05 Jun 2014 11:31:09 PM JST
        # atomint = 5
        # expect = str(self.conn.core.GetAtomName(atomint).reply().name.buf())

* Thu 05 Jun 2014 11:36:26 PM JST
    @classmethod
    def setUpClass(cls):
        pass


* Thu 05 Jun 2014 11:36:29 PM JST

* Thu 05 Jun 2014 11:36:29 PM JST

* Thu 05 Jun 2014 11:36:29 PM JST
        self.conn = xcb.connect()

* Thu 05 Jun 2014 11:36:35 PM JST
self
* Thu 05 Jun 2014 11:37:36 PM JST
    def tearDown(self):
        self.conn.flush()
        self.conn2.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn2.flush()
        cls.conn.disconnect()
        cls.conn2.disconnect()

* Thu 05 Jun 2014 11:37:42 PM JST

* Thu 05 Jun 2014 11:37:42 PM JST

* Thu 05 Jun 2014 11:37:42 PM JST
        cls.conn2.flush()

* Thu 05 Jun 2014 11:37:42 PM JST

* Thu 05 Jun 2014 11:37:42 PM JST

* Thu 05 Jun 2014 11:37:42 PM JST
        cls.conn2.disconnect()

* Thu 05 Jun 2014 11:37:44 PM JST

* Thu 05 Jun 2014 11:37:44 PM JST

* Thu 05 Jun 2014 11:37:44 PM JST
        self.conn2.flush()

* Thu 05 Jun 2014 11:37:59 PM JST

* Thu 05 Jun 2014 11:37:59 PM JST

* Thu 05 Jun 2014 11:37:59 PM JST
        name = 'BITMAP'

* Thu 05 Jun 2014 11:42:13 PM JST
self.conn.core.InternAtom(
            True, len(self.atomname), self.atomname).reply().atom
* Thu 05 Jun 2014 11:42:18 PM JST
self
* Thu 05 Jun 2014 11:42:21 PM JST
self
* Thu 05 Jun 2014 11:42:24 PM JST
self
* Thu 05 Jun 2014 11:42:28 PM JST

* Thu 05 Jun 2014 11:42:28 PM JST

* Thu 05 Jun 2014 11:42:28 PM JST
        expect = 

* Thu 05 Jun 2014 11:42:47 PM JST
expect
* Thu 05 Jun 2014 11:44:01 PM JST
AtomName(self.conn, self.atomname)
* Thu 05 Jun 2014 11:44:05 PM JST
self
* Thu 05 Jun 2014 11:44:08 PM JST
self
* Thu 05 Jun 2014 11:44:22 PM JST

* Thu 05 Jun 2014 11:44:22 PM JST

* Thu 05 Jun 2014 11:44:22 PM JST
        atomname = AtomName(self.conn, self.atomname)

* Thu 05 Jun 2014 11:44:25 PM JST
atomname
* Thu 05 Jun 2014 11:45:26 PM JST
cls
* Thu 05 Jun 2014 11:45:47 PM JST
expect
* Thu 05 Jun 2014 11:45:56 PM JST

* Thu 05 Jun 2014 11:45:56 PM JST

* Thu 05 Jun 2014 11:45:56 PM JST
        atomname = AtomName(self.conn, name)

* Thu 05 Jun 2014 11:45:58 PM JST
atomname
* Thu 05 Jun 2014 11:46:02 PM JST

* Thu 05 Jun 2014 11:46:02 PM JST

* Thu 05 Jun 2014 11:46:02 PM JST
        name = 'BITMAP'

* Thu 05 Jun 2014 11:46:13 PM JST
expect
* Thu 05 Jun 2014 11:46:17 PM JST
expect
* Thu 05 Jun 2014 11:46:50 PM JST

* Thu 05 Jun 2014 11:46:50 PM JST

* Thu 05 Jun 2014 11:46:50 PM JST
        name = 'BITMAP'

* Thu 05 Jun 2014 11:47:03 PM JST
atomname
* Thu 05 Jun 2014 11:47:10 PM JST

* Thu 05 Jun 2014 11:47:10 PM JST

* Thu 05 Jun 2014 11:47:10 PM JST
        atomname = AtomName(self.conn, self.atomname)

* Thu 05 Jun 2014 11:47:46 PM JST
atom
* Thu 05 Jun 2014 11:47:48 PM JST
atom
* Thu 05 Jun 2014 11:47:51 PM JST
atom
* Thu 05 Jun 2014 11:52:15 PM JST
name
* Thu 05 Jun 2014 11:52:19 PM JST

* Thu 05 Jun 2014 11:52:19 PM JST

* Thu 05 Jun 2014 11:52:19 PM JST
        name = 'BITMAP'

* Thu 05 Jun 2014 11:52:30 PM JST

* Thu 05 Jun 2014 11:52:30 PM JST

* Thu 05 Jun 2014 11:52:30 PM JST
        atomname = AtomName(self.conn, name)

* Thu 05 Jun 2014 11:52:41 PM JST
atomname.
* Thu 05 Jun 2014 11:53:10 PM JST
atomname
* Thu 05 Jun 2014 11:53:32 PM JST

* Thu 05 Jun 2014 11:53:32 PM JST

* Thu 05 Jun 2014 11:53:32 PM JST
        name = 'WM_NAME'

* Thu 05 Jun 2014 11:53:35 PM JST

* Thu 05 Jun 2014 11:53:35 PM JST

* Thu 05 Jun 2014 11:53:35 PM JST
        atomname = AtomName(self.conn, name)

* Thu 05 Jun 2014 11:53:51 PM JST
pack()
* Thu 05 Jun 2014 11:54:02 PM JST
pac
* Thu 05 Jun 2014 11:54:03 PM JST
k()
* Thu 05 Jun 2014 11:55:23 PM JST

* Thu 05 Jun 2014 11:55:23 PM JST

* Thu 05 Jun 2014 11:55:23 PM JST
        name = 'BITMAP'

* Thu 05 Jun 2014 11:55:23 PM JST
        name = 'BITMAP'

* Thu 05 Jun 2014 11:55:23 PM JST
        name = 'BITMAP'
        atomname = AtomName(self.conn, name)

* Thu 05 Jun 2014 11:55:25 PM JST
atomname
* Thu 05 Jun 2014 11:55:54 PM JST
name
* Thu 05 Jun 2014 11:56:00 PM JST
name
* Thu 05 Jun 2014 11:56:21 PM JST
name
* Thu 05 Jun 2014 11:56:24 PM JST

* Thu 05 Jun 2014 11:56:25 PM JST

* Thu 05 Jun 2014 11:56:25 PM JST
        name = 'BITMAP'

* Thu 05 Jun 2014 11:56:27 PM JST

* Thu 05 Jun 2014 11:56:27 PM JST

* Thu 05 Jun 2014 11:56:27 PM JST
        atomname = AtomName(self.conn, name)

* Thu 05 Jun 2014 11:56:32 PM JST
atomname
* Thu 05 Jun 2014 11:56:57 PM JST
name
* Thu 05 Jun 2014 11:57:00 PM JST

* Thu 05 Jun 2014 11:57:00 PM JST

* Thu 05 Jun 2014 11:57:00 PM JST
        name = 'BITMAP'

* Thu 05 Jun 2014 11:57:02 PM JST

* Thu 05 Jun 2014 11:57:02 PM JST

* Thu 05 Jun 2014 11:57:02 PM JST
        atomname = AtomName(self.conn, name)

* Thu 05 Jun 2014 11:57:03 PM JST
atomname
* Thu 05 Jun 2014 11:57:21 PM JST
hsh
* Thu 05 Jun 2014 11:57:25 PM JST
hsh
* Thu 05 Jun 2014 11:57:44 PM JST

* Thu 05 Jun 2014 11:57:44 PM JST

* Thu 05 Jun 2014 11:57:44 PM JST
        atomname = AtomName(self.conn, name)

* Thu 05 Jun 2014 11:57:54 PM JST
atomname.
* Thu 05 Jun 2014 11:58:03 PM JST

* Thu 05 Jun 2014 11:58:03 PM JST

* Thu 05 Jun 2014 11:58:03 PM JST
        name = 'BITMAP'

* Thu 05 Jun 2014 11:58:20 PM JST
atomname
* Thu 05 Jun 2014 11:58:26 PM JST
name
* Thu 05 Jun 2014 11:58:31 PM JST
name
* Thu 05 Jun 2014 11:58:38 PM JST

* Thu 05 Jun 2014 11:58:38 PM JST

* Thu 05 Jun 2014 11:58:38 PM JST
        name = 'BITMAP'

* Thu 05 Jun 2014 11:58:42 PM JST

* Thu 05 Jun 2014 11:58:42 PM JST

* Thu 05 Jun 2014 11:58:42 PM JST
        atomname = AtomName(self.conn, name)

* Thu 05 Jun 2014 11:58:55 PM JST
atomname
* Thu 05 Jun 2014 11:59:01 PM JST

* Thu 05 Jun 2014 11:59:01 PM JST

* Thu 05 Jun 2014 11:59:01 PM JST
        name = 'BITMAP'

* Thu 05 Jun 2014 11:59:01 PM JST
        name = 'BITMAP'

* Thu 05 Jun 2014 11:59:01 PM JST
        name = 'BITMAP'
        atomname = AtomName(self.conn, name)

* Thu 05 Jun 2014 11:59:03 PM JST
name
* Thu 05 Jun 2014 11:59:19 PM JST

* Thu 05 Jun 2014 11:59:19 PM JST

* Thu 05 Jun 2014 11:59:19 PM JST
        name = 'BITMAP'

* Thu 05 Jun 2014 11:59:19 PM JST
        name = 'BITMAP'

* Thu 05 Jun 2014 11:59:19 PM JST
        name = 'BITMAP'
        atomname = AtomName(self.conn, name)

* Thu 05 Jun 2014 11:59:21 PM JST
atomname
* Thu 05 Jun 2014 11:59:28 PM JST
name
* Thu 05 Jun 2014 11:59:32 PM JST
name
* Thu 05 Jun 2014 11:59:47 PM JST
atomname
* Thu 05 Jun 2014 11:59:59 PM JST

* Thu 05 Jun 2014 11:59:59 PM JST

* Thu 05 Jun 2014 11:59:59 PM JST
        name = 'BITMAP'

* Thu 05 Jun 2014 11:59:59 PM JST
        name = 'BITMAP'

* Fri 06 Jun 2014 12:00:00 AM JST
        name = 'BITMAP'
        atomname = AtomName(self.conn, name)

* Fri 06 Jun 2014 12:03:48 AM JST
    def test_iter(self, ):
        r"""iter."""
        for i, char in enumerate(self.AtomName, start=0):
            self.assertEqual(
                self.atomname[i], char,
                msg='Failed: AtomName.__iter__ expect: {}, got: {}'
                .format(self.atomname[i], char))


* Fri 06 Jun 2014 12:05:43 AM JST
    @classmethod
    def setUpClass(cls):
        cls.conn = xcb.connect()
        cls.atomname = 'BITMAP'
        cls.AtomName = AtomName(cls.conn, cls.atomname)
        cls.atom = cls.conn.core.InternAtom(
            True, len(cls.atomname), cls.atomname).reply().atom


* Fri 06 Jun 2014 12:06:01 AM JST
'WM_NAME'
* Fri 06 Jun 2014 12:06:42 AM JST
        cls.atom = cls.conn.core.InternAtom(
            True, len(cls.atomname), cls.atomname).reply().atom

* Fri 06 Jun 2014 12:07:22 AM JST
self
* Fri 06 Jun 2014 12:14:09 AM JST
39
* Fri 06 Jun 2014 12:14:14 AM JST
39
* Fri 06 Jun 2014 12:15:01 AM JST
39
* Fri 06 Jun 2014 12:15:56 AM JST
aotmname
* Fri 06 Jun 2014 12:16:56 AM JST
expect
* Fri 06 Jun 2014 12:16:59 AM JST
expect
* Fri 06 Jun 2014 12:17:06 AM JST
aotmname
* Fri 06 Jun 2014 12:17:14 AM JST

* Fri 06 Jun 2014 12:17:14 AM JST

* Fri 06 Jun 2014 12:17:14 AM JST
        expect = 'WM_NAME'

* Fri 06 Jun 2014 12:17:30 AM JST

* Fri 06 Jun 2014 12:17:30 AM JST

* Fri 06 Jun 2014 12:17:30 AM JST
        expect = 39

* Fri 06 Jun 2014 12:17:32 AM JST
expect
* Fri 06 Jun 2014 12:17:36 AM JST
expect
* Fri 06 Jun 2014 12:17:41 AM JST
39
* Fri 06 Jun 2014 12:17:57 AM JST
39
* Fri 06 Jun 2014 12:23:28 AM JST
'WM_CLASS'
* Fri 06 Jun 2014 12:24:31 AM JST
        
* Fri 06 Jun 2014 12:24:35 AM JST
Test AtomPair.
* Fri 06 Jun 2014 12:24:48 AM JST
types.
* Fri 06 Jun 2014 12:24:57 AM JST
Test AtomPair.
* Fri 06 Jun 2014 12:25:28 AM JST
Test AtomPair.
* Fri 06 Jun 2014 12:25:47 AM JST
Test AtomPair.
* Fri 06 Jun 2014 12:26:05 AM JST
Test AtomPair.__cmp__
* Fri 06 Jun 2014 12:26:19 AM JST
r"""Test AtomPair.__cmp__2"""
* Fri 06 Jun 2014 12:30:55 AM JST
int
* Fri 06 Jun 2014 12:31:47 AM JST

* Fri 06 Jun 2014 12:31:47 AM JST

* Fri 06 Jun 2014 12:31:47 AM JST
import xcb, xcb.xproto

* Fri 06 Jun 2014 12:31:48 AM JST

* Fri 06 Jun 2014 12:31:48 AM JST

* Fri 06 Jun 2014 12:31:48 AM JST
from array import array

* Fri 06 Jun 2014 12:32:22 AM JST
    @classmethod
    def setUpClass(cls):
        cls.conn = xcb2.connect()
        cls.atomname = 'WM_NAME'
        cls.atom = int(cls.conn.core.InternAtom(
            True, len(cls.atomname), cls.atomname).reply().atom)
        cls.AtomName = AtomName(cls.conn, cls.atomname)
        cls.Atom = Atom(cls.conn, cls.atom)
        cls.pair = AtomPair(cls.AtomName, cls.Atom)


* Fri 06 Jun 2014 12:32:33 AM JST

* Fri 06 Jun 2014 12:32:33 AM JST

* Fri 06 Jun 2014 12:32:33 AM JST
        self.conn = xcb2.connect()

* Fri 06 Jun 2014 12:32:50 AM JST
self.atom = Atom(self.conn, 5)
* Fri 06 Jun 2014 12:32:53 AM JST
self
* Fri 06 Jun 2014 12:32:57 AM JST
self
* Fri 06 Jun 2014 12:33:19 AM JST

* Fri 06 Jun 2014 12:33:19 AM JST

* Fri 06 Jun 2014 12:33:19 AM JST
        self.atom = Atom(self.conn, 5)

* Fri 06 Jun 2014 12:33:31 AM JST
pass
* Fri 06 Jun 2014 12:33:52 AM JST
    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 12:35:02 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 12:37:35 AM JST
cls.conn.core.GetAtomName(cls.int).reply().name
* Fri 06 Jun 2014 12:38:20 AM JST

* Fri 06 Jun 2014 12:38:20 AM JST

* Fri 06 Jun 2014 12:38:20 AM JST
        expect = 'BITMAP'

* Fri 06 Jun 2014 12:38:22 AM JST
expect
* Fri 06 Jun 2014 12:38:26 AM JST
expect
* Fri 06 Jun 2014 12:38:44 AM JST
expect
* Fri 06 Jun 2014 12:38:48 AM JST
expect
* Fri 06 Jun 2014 12:38:50 AM JST
aotmname
* Fri 06 Jun 2014 12:38:55 AM JST

* Fri 06 Jun 2014 12:38:55 AM JST

* Fri 06 Jun 2014 12:38:55 AM JST
        expect = 'BITMAP'

* Fri 06 Jun 2014 12:39:02 AM JST
5
* Fri 06 Jun 2014 12:39:25 AM JST
expect
* Fri 06 Jun 2014 12:39:29 AM JST
expect
* Fri 06 Jun 2014 12:39:36 AM JST

* Fri 06 Jun 2014 12:39:36 AM JST

* Fri 06 Jun 2014 12:39:36 AM JST
        expect = 5

* Fri 06 Jun 2014 12:41:22 AM JST
Atom
* Fri 06 Jun 2014 12:41:29 AM JST
Test Atom.
* Fri 06 Jun 2014 12:41:54 AM JST
        
* Fri 06 Jun 2014 12:42:34 AM JST
hash
* Fri 06 Jun 2014 12:42:39 AM JST
long
* Fri 06 Jun 2014 12:42:43 AM JST
int
* Fri 06 Jun 2014 12:42:53 AM JST
cmp
* Fri 06 Jun 2014 12:43:00 AM JST
eq
* Fri 06 Jun 2014 12:44:44 AM JST
    @classmethod
    def setUpClass(cls):

* Fri 06 Jun 2014 12:44:50 AM JST
conn = xcb.connect()
* Fri 06 Jun 2014 12:44:58 AM JST

* Fri 06 Jun 2014 12:44:58 AM JST

* Fri 06 Jun 2014 12:44:58 AM JST
        self.conn = xcb.connect()

* Fri 06 Jun 2014 12:45:02 AM JST
        self.args1 = [(30, ), '\x00\x1e\x00\x00']
        self.args2 = [(0, ), '\x00\x00\x00\x00']
        self.args3 = [(-50, ), '\x00\xce\x00\x00']
        self.protocol = Bell(self.conn)
        self.protocol_check = BellChecked(self.conn)

* Fri 06 Jun 2014 12:45:36 AM JST
    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 12:45:40 AM JST

* Fri 06 Jun 2014 12:45:40 AM JST

* Fri 06 Jun 2014 12:45:40 AM JST
        self.conn.disconnect()

* Fri 06 Jun 2014 12:45:50 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 12:47:19 AM JST
    @classmethod
    def setUpClass(cls):

* Fri 06 Jun 2014 12:47:24 AM JST
        self.argsbin = [(30, ), '\x00\x1e\x00\x00']
        self.conn = xcb.connect()
        self.protocol = Bell(self.conn)
        self.protocol_check = BellChecked(self.conn)
        self.cookie = VoidCookie

* Fri 06 Jun 2014 12:47:38 AM JST
ocnn
* Fri 06 Jun 2014 12:47:57 AM JST
    @classmethod
    def setUpClass(cls):

* Fri 06 Jun 2014 12:48:01 AM JST
        self.conn = xcb.connect()
        self.protocol_check = BellChecked(self.conn)

* Fri 06 Jun 2014 12:50:44 AM JST
    @classmethod
    def setUpClass(cls):

* Fri 06 Jun 2014 12:50:50 AM JST
        self.args1 = [(False, 44040214,
                       1, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x04\x00\x00\x00\x04'
                      '\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)

* Fri 06 Jun 2014 12:51:09 AM JST
pass
* Fri 06 Jun 2014 12:51:22 AM JST
    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 12:51:33 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 12:51:45 AM JST
    @classmethod
    def setUpClass(cls):

* Fri 06 Jun 2014 12:51:49 AM JST
        self.argsbin = [(False, 44040214,
                       1, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x04\x00\x00\x00\x04'
                      '\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.cookie = VoidCookie

* Fri 06 Jun 2014 12:52:05 AM JST
cls
* Fri 06 Jun 2014 12:52:21 AM JST

* Fri 06 Jun 2014 12:52:21 AM JST

* Fri 06 Jun 2014 12:52:21 AM JST
from xcb2.xproto import EventMask

* Fri 06 Jun 2014 12:52:23 AM JST

* Fri 06 Jun 2014 12:52:23 AM JST

* Fri 06 Jun 2014 12:52:24 AM JST
import xcb, xcb.xproto

* Fri 06 Jun 2014 12:53:27 AM JST
    @classmethod
    def setUpClass(cls):

* Fri 06 Jun 2014 12:53:32 AM JST
        self.args1 = [(False, 44040214,
                       1, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x08\x00\x00\x00\x05'
                      '\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)

* Fri 06 Jun 2014 12:53:59 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 12:54:15 AM JST
    @classmethod
    def setUpClass(cls):

* Fri 06 Jun 2014 12:54:19 AM JST
        self.argsbin = [(False, 44040214,
                       1, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x08\x00\x00\x00\x05'
                      '\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.cookie = VoidCookie

* Fri 06 Jun 2014 12:54:40 AM JST

* Fri 06 Jun 2014 12:54:40 AM JST

* Fri 06 Jun 2014 12:54:40 AM JST
from xcb2.xproto import EventMask

* Fri 06 Jun 2014 12:54:41 AM JST

* Fri 06 Jun 2014 12:54:41 AM JST

* Fri 06 Jun 2014 12:54:41 AM JST
import xcb, xcb.xproto

* Fri 06 Jun 2014 12:55:20 AM JST
    @classmethod
    def setUpClass(cls):

* Fri 06 Jun 2014 12:55:27 AM JST
        self.conn = xcb2.connect()
        self.cache = CacheAtomPair()
        self.cache.clear()

* Fri 06 Jun 2014 12:55:44 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 12:56:00 AM JST
    @classmethod
    def setUpClass(cls):

* Fri 06 Jun 2014 12:56:03 AM JST
        self.cache = DisplayCacheAtomPair()
        self.cache.clear()

* Fri 06 Jun 2014 12:56:21 AM JST

* Fri 06 Jun 2014 12:56:21 AM JST

* Fri 06 Jun 2014 12:56:21 AM JST
        self.conn.

* Fri 06 Jun 2014 12:56:36 AM JST

* Fri 06 Jun 2014 12:56:36 AM JST

* Fri 06 Jun 2014 12:56:36 AM JST
        cls.cache.clear()

* Fri 06 Jun 2014 12:56:40 AM JST
cls
* Fri 06 Jun 2014 12:56:54 AM JST
self.cache.clear()
* Fri 06 Jun 2014 12:57:03 AM JST

* Fri 06 Jun 2014 12:57:03 AM JST

* Fri 06 Jun 2014 12:57:03 AM JST
        cls.conn.flush()

* Fri 06 Jun 2014 12:57:04 AM JST
        cls.conn.flush()

* Fri 06 Jun 2014 12:57:04 AM JST
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 12:57:22 AM JST

* Fri 06 Jun 2014 12:57:22 AM JST

* Fri 06 Jun 2014 12:57:22 AM JST
        cls.cache.clear()

* Fri 06 Jun 2014 12:57:26 AM JST
cls
* Fri 06 Jun 2014 12:57:35 AM JST
self.cache.clear()
* Fri 06 Jun 2014 01:01:42 AM JST
    @classmethod
    def setUpClass(cls):
        cls.conn = xcb2.connect()
        cls.cache = CacheAtomPair()

    def setUp(self):
        self.conn.flush()
        self.cache.clear()
        self.mocker.replay()

* Fri 06 Jun 2014 01:02:01 AM JST
GlobalCacheAtoms()
* Fri 06 Jun 2014 01:02:56 AM JST
    def tearDown(self):
        self.cache.clear()
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()
        cls.cache.clear()

* Fri 06 Jun 2014 01:04:10 AM JST
self.cache.clearall()
* Fri 06 Jun 2014 01:04:17 AM JST
self
* Fri 06 Jun 2014 01:04:51 AM JST
    @classmethod
    def setUpClass(cls):

* Fri 06 Jun 2014 01:04:58 AM JST
        self.window = simple_teswindow()
        winbin = pack('I', self.window)
        self.args1 = [(False, self.window, 32, 0, self.window, 296,
                       '\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00'
                       '\x00\x00\x00\x00\x00\x00\x00\x00'),
                      '\x00\x00\x00\x00' + winbin + '\xff\xff\xff\x00! \x00'
                      '\x00' + winbin + '(\x01\x00\x00\x01\x00\x00\x00)\x01'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)

* Fri 06 Jun 2014 01:06:02 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 01:06:10 AM JST
self.conn.core.DestroyWindow(self.window)
* Fri 06 Jun 2014 01:06:15 AM JST
self
* Fri 06 Jun 2014 01:06:19 AM JST
self
* Fri 06 Jun 2014 01:06:45 AM JST
    @classmethod
    def setUpClass(cls):

* Fri 06 Jun 2014 01:06:50 AM JST
        self.window = simple_teswindow()
        winbin = pack('I', self.window)
        self.argsbin = [(False, self.window, 32, 0, self.window, 296,
                       '\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00'
                       '\x00\x00\x00\x00\x00\x00\x00\x00'),
                      '\x00\x00\x00\x00' + winbin + '\xff\xff\xff\x00! \x00'
                      '\x00' + winbin + '(\x01\x00\x00\x01\x00\x00\x00)\x01'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.cookie = VoidCookie

* Fri 06 Jun 2014 01:07:06 AM JST
cls.
* Fri 06 Jun 2014 01:07:39 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 01:07:51 AM JST
self.conn.core.DestroyWindow(self.window)
* Fri 06 Jun 2014 01:08:28 AM JST
    @classmethod
    def setUpClass(cls):

* Fri 06 Jun 2014 01:08:54 AM JST
        self.window = simple_teswindow()
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = Above(self.sendevent)

* Fri 06 Jun 2014 01:09:34 AM JST
    def tearDown(self):
        self.conn.flush()


* Fri 06 Jun 2014 01:09:41 AM JST
    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 01:09:50 AM JST
self
* Fri 06 Jun 2014 01:09:53 AM JST
self
* Fri 06 Jun 2014 01:09:56 AM JST

* Fri 06 Jun 2014 01:09:56 AM JST

* Fri 06 Jun 2014 01:09:56 AM JST
    def tearDown(self):

* Fri 06 Jun 2014 01:09:56 AM JST
    def tearDown(self):

* Fri 06 Jun 2014 01:09:56 AM JST
    def tearDown(self):
        self.conn.flush()

* Fri 06 Jun 2014 01:10:16 AM JST
        self.window = simple_teswindow()
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = Below(self.sendevent)

* Fri 06 Jun 2014 01:11:00 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 01:11:09 AM JST
self
* Fri 06 Jun 2014 01:11:12 AM JST
self
* Fri 06 Jun 2014 01:11:30 AM JST
        self.window = simple_teswindow()
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = Shade(self.sendevent)

* Fri 06 Jun 2014 01:12:01 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 01:12:09 AM JST
self
* Fri 06 Jun 2014 01:12:11 AM JST
self
* Fri 06 Jun 2014 01:12:25 AM JST
        self.window = simple_teswindow()
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = FullScreen(self.sendevent)

* Fri 06 Jun 2014 01:12:46 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.core.DestroyWindow(cls.window)
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 01:13:38 AM JST
        self.window = simple_teswindow()
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = Minimize(self.sendevent)

* Fri 06 Jun 2014 01:15:01 AM JST
        self.window = simple_teswindow()
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = Hidden(self.sendevent)

* Fri 06 Jun 2014 01:15:30 AM JST
        self.window = simple_teswindow()
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = Maximize(self.sendevent)

* Fri 06 Jun 2014 01:16:07 AM JST
        self.window = simple_teswindow()
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = DeleteWindow(self.sendevent)

* Fri 06 Jun 2014 01:16:38 AM JST
        self.window = simple_teswindow()
        self.conn = xcb2.connect()
        self.sendevent = SendEvent(self.conn)
        self.protocol = CloseWindow(self.sendevent)

* Fri 06 Jun 2014 01:18:16 AM JST

* Fri 06 Jun 2014 01:18:16 AM JST

* Fri 06 Jun 2014 01:18:16 AM JST
import xcb, xcb.xproto

* Fri 06 Jun 2014 01:18:17 AM JST

* Fri 06 Jun 2014 01:18:17 AM JST

* Fri 06 Jun 2014 01:18:17 AM JST
from xcb2.xproto import EventMask

* Fri 06 Jun 2014 01:19:47 AM JST
        self.args1 = [(81788931, ConfigWindow.X, [100]),
            '\x00\x00\x00\x00\x03\x00\xe0\x04\x01\x00\x00\x00d\x00\x00\x00']
        self.args2 = [(56623107, ConfigWindow.Y, [200]),
            '\x00\x00\x00\x00\x03\x00`\x03\x02\x00\x00\x00\xc8\x00\x00\x00']
        self.args3 = [(75497475, ConfigWindow.Width | ConfigWindow.Height,
                       [400, 500]),
                     '\x00\x00\x00\x00\x03\x00\x80\x04\x0c\x00\x00\x00'
                      '\x90\x01\x00\x00\xf4\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = ConfigureWindow(self.conn)
        self.protocol_check = ConfigureWindowChecked(self.conn)

* Fri 06 Jun 2014 01:20:30 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 01:28:33 AM JST
        self.args1 = [(5, ), '\x00\x00\x00\x00\x05\x00\x00\x00']
        self.args2 = [(39, ), "\x00\x00\x00\x00'\x00\x00\x00"]
        self.args3 = [(293, ), '\x00\x00\x00\x00%\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GetAtomName(self.conn)
        self.protocol_check = GetAtomNameUnchecked(self.conn)

* Fri 06 Jun 2014 01:29:01 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 01:29:44 AM JST
        self.argsbin = [(5, ), '\x00\x00\x00\x00\x05\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GetAtomName(self.conn)
        self.protocol_check = GetAtomNameUnchecked(self.conn)
        self.cookie = GetAtomNameCookie

* Fri 06 Jun 2014 01:30:26 AM JST
        self.conn = xcb.connect()
        self.protocol = GetAtomName(self.conn)

* Fri 06 Jun 2014 01:31:05 AM JST
        self.args1 = [(6, ), '\x00\x00\x00\x00\x06\x00\x00\x00']
        self.args2 = [(39, ), "\x00\x00\x00\x00'\x00\x00\x00"]
        self.args3 = [(293, ), '\x00\x00\x00\x00%\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UseCache(GetAtomName(self.conn))

* Fri 06 Jun 2014 01:31:56 AM JST
        self.args1 = [(6, ), '\x00\x00\x00\x00\x06\x00\x00\x00']
        self.conn = xcb.connect()
        self.conn.display = ''
        self.protocol = GetAtomName(self.conn)
        self.usecache = UseCache(self.protocol)

* Fri 06 Jun 2014 01:32:18 AM JST
GlobalCacheAtoms.clearall()
* Fri 06 Jun 2014 01:32:21 AM JST
clearall()
* Fri 06 Jun 2014 01:33:15 AM JST
self.cache.clearall()
* Fri 06 Jun 2014 01:33:22 AM JST
self
* Fri 06 Jun 2014 01:33:37 AM JST
        self.conn = xcb.connect()
        self.protocol = GetAtomName(self.conn)
        self.usecache = UseCache(self.protocol)
        dummy = self.mocker.replace(
            'xcb2.xproto.ext.getatomname.UseCache.__call__')
        dummy(ANY)
        self.mocker.result('dummy')
        self.mocker.count(0, None)

* Fri 06 Jun 2014 01:34:16 AM JST
        dummy = cls.mocker.replace(
            'xcb2.xproto.ext.getatomname.UseCache.__call__')
        dummy(ANY)
        cls.mocker.result('dummy')
        cls.mocker.count(0, None)

* Fri 06 Jun 2014 01:34:24 AM JST
cls
* Fri 06 Jun 2014 01:34:28 AM JST
cls
* Fri 06 Jun 2014 01:34:29 AM JST
cls
* Fri 06 Jun 2014 01:36:07 AM JST
        self.args1 = [(52428822, ), '\x00\x00\x00\x00\x16\x00 \x03']
        self.args2 = [(75497475, ), '\x00\x00\x00\x00\x03\x00\x80\x04']
        self.args3 = [(77594627, ), '\x00\x00\x00\x00\x03\x00\xa0\x04']
        self.conn = xcb.connect()
        self.protocol = GetGeometry(self.conn)
        self.protocol_check = GetGeometryUnchecked(self.conn)

* Fri 06 Jun 2014 01:36:46 AM JST
        self.argsbin = [(52428822, ), '\x00\x00\x00\x00\x16\x00 \x03']
        self.conn = xcb.connect()
        self.protocol = GetGeometry(self.conn)
        self.protocol_check = GetGeometryUnchecked(self.conn)
        self.cookie = GetGeometryCookie

* Fri 06 Jun 2014 01:38:06 AM JST
        self.args1 = [(False, 482, xcb2.xproto.EventMask.ButtonPress,
                       xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async,
                       0, 0, xcb2.xproto.NamedButtonIndex.Left, 0),
                     '\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00']
        self.args2 = [(False, 482, xcb2.xproto.EventMask.ButtonRelease,
                       xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async,
                       0, 0, xcb2.xproto.NamedButtonIndex.Right,
                       xcb2.xproto.NamedKeyButMask.Lock),
                      '\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x02\x00']
        self.args3 = [(False, 482, xcb2.xproto.EventMask.ButtonPress,
                       xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async,
                       0, 0, xcb2.xproto.NamedButtonIndex.Middle,
                       xcb2.xproto.NamedKeyButMask.Lock),
                      '\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02\x00']
        self.conn = xcb.connect()
        self.protocol = GrabButton(self.conn)
        self.protocol_check = GrabButtonChecked(self.conn)

* Fri 06 Jun 2014 01:38:56 AM JST

* Fri 06 Jun 2014 01:38:56 AM JST

* Fri 06 Jun 2014 01:38:56 AM JST
        self.conn.disconnect()

* Fri 06 Jun 2014 01:39:06 AM JST
        self.conn.core.UngrabButton(
            self.args1[0][7], self.args1[0][1], self.args1[0][-1])
        self.conn.core.UngrabButton(
            self.args2[0][7], self.args2[0][1], self.args2[0][-1])
        self.conn.core.UngrabButton(
            self.args3[0][7], self.args3[0][1], self.args3[0][-1])

* Fri 06 Jun 2014 01:39:30 AM JST
        self.argsbin = [(False, 482, xcb2.xproto.EventMask.ButtonPress,
                       xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async,
                       0, 0, xcb2.xproto.NamedButtonIndex.Left, 0),
                     '\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GrabButton(self.conn)
        self.protocol_check = GrabButtonChecked(self.conn)
        self.cookie = VoidCookie

* Fri 06 Jun 2014 01:40:00 AM JST

* Fri 06 Jun 2014 01:40:00 AM JST

* Fri 06 Jun 2014 01:40:01 AM JST
        self.conn.disconnect()

* Fri 06 Jun 2014 01:40:08 AM JST
        self.conn.core.UngrabButton(
            self.argsbin[0][7], self.argsbin[0][1], self.argsbin[0][-1])

* Fri 06 Jun 2014 01:40:33 AM JST
        self.conn = xcb.connect()
        self.grabbutton = GrabButton(self.conn)

* Fri 06 Jun 2014 01:41:23 AM JST

* Fri 06 Jun 2014 01:41:23 AM JST

* Fri 06 Jun 2014 01:41:23 AM JST
        self.conn.disconnect()

* Fri 06 Jun 2014 01:41:28 AM JST
        self.conn.core.UngrabButton(
            NamedButtonIndex.Left, 482, NamedKeyButMask.Lock)
        self.conn.core.UngrabButton(
            NamedButtonIndex.Right, 482, NamedKeyButMask.Lock)
        self.conn.core.UngrabButton(
            NamedButtonIndex.Middle, 482, NamedKeyButMask.Lock)
        self.conn.core.UngrabButton(
            NamedButtonIndex.WheelUp, 482, NamedKeyButMask.Lock)
        self.conn.core.UngrabButton(
            NamedButtonIndex.WheelDown, 482, NamedKeyButMask.Lock)

* Fri 06 Jun 2014 01:42:40 AM JST
Test GrabButton 
* Fri 06 Jun 2014 01:43:28 AM JST
left
* Fri 06 Jun 2014 01:43:50 AM JST
        
* Fri 06 Jun 2014 01:43:58 AM JST
Test GrabButtonLeft.
* Fri 06 Jun 2014 01:44:05 AM JST
left
* Fri 06 Jun 2014 01:44:19 AM JST
GrabButtonRight
* Fri 06 Jun 2014 01:44:36 AM JST
Test GrabButtonRight.
* Fri 06 Jun 2014 01:44:41 AM JST
right
* Fri 06 Jun 2014 01:44:44 AM JST
        
* Fri 06 Jun 2014 01:44:56 AM JST
Test GrabButtonRight.
* Fri 06 Jun 2014 01:45:03 AM JST
left
* Fri 06 Jun 2014 01:45:17 AM JST
GrabButtonMiddle
* Fri 06 Jun 2014 01:45:26 AM JST
Test GrabButtonMiddle.
* Fri 06 Jun 2014 01:45:30 AM JST
        
* Fri 06 Jun 2014 01:45:32 AM JST
middle
* Fri 06 Jun 2014 01:45:40 AM JST
Test GrabButtonMiddle.
* Fri 06 Jun 2014 01:45:45 AM JST
middle
* Fri 06 Jun 2014 01:45:55 AM JST
GrabButtonWheelUp
* Fri 06 Jun 2014 01:46:07 AM JST
Test GrabButtonWheelUp.
* Fri 06 Jun 2014 01:46:10 AM JST
wheelup
* Fri 06 Jun 2014 01:46:13 AM JST
        
* Fri 06 Jun 2014 01:46:21 AM JST
Test GrabButtonWheelUp.press
* Fri 06 Jun 2014 01:46:26 AM JST
press
* Fri 06 Jun 2014 01:46:50 AM JST
GrabButtonWheelDown
* Fri 06 Jun 2014 01:47:05 AM JST
Test GrabButtonWheelDown.
* Fri 06 Jun 2014 01:47:11 AM JST
        
* Fri 06 Jun 2014 01:47:27 AM JST
Test GrabButtonWheelDown.press
* Fri 06 Jun 2014 01:47:30 AM JST
press
* Fri 06 Jun 2014 01:48:28 AM JST
GrabButtonLeft
* Fri 06 Jun 2014 01:48:44 AM JST
Test GrabButtonLeft.getbinary async
* Fri 06 Jun 2014 01:48:53 AM JST
getbinary
* Fri 06 Jun 2014 01:48:55 AM JST
        
* Fri 06 Jun 2014 01:50:32 AM JST
Test GrabButtonLeft.press async
* Fri 06 Jun 2014 01:50:40 AM JST
press
* Fri 06 Jun 2014 01:58:45 AM JST
        self.args1 = [(True, 482, 0, 1, 1),
            '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00']
        self.args2 = [(True, 482, 0, 0, 0),
            '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00']
        self.args3 = [(False, 99999999, 0, 1, 1),
            '\x00\x00\x00\x00\xff\xe0\xf5\x05\x00\x00\x00\x00\x01\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GrabKeyboard(self.conn)
        self.protocol_check = GrabKeyboardUnchecked(self.conn)

* Fri 06 Jun 2014 01:59:35 AM JST

* Fri 06 Jun 2014 01:59:35 AM JST

* Fri 06 Jun 2014 01:59:35 AM JST
        self.conn.disconnect()

* Fri 06 Jun 2014 01:59:45 AM JST
conn.core.UngrabKeyboard(0)
* Fri 06 Jun 2014 02:00:03 AM JST
        self.argsbin = [(True, 482, 0, 1, 1),
            '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GrabKeyboard(self.conn)
        self.protocol_check = GrabKeyboardUnchecked(self.conn)
        self.cookie = GrabKeyboardCookie

* Fri 06 Jun 2014 02:00:41 AM JST
    def tearDown(self):
        self.conn.core.UngrabKeyboard(0)
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.core.UngrabKeyboard(0)
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:02:12 AM JST
        self.args1 = [(False, 99999999, 0, 10, 1, 1),
            '\x00\x00\x00\x00\xff\xe0\xf5\x05\x00\x00\n\x01\x01\x00\x00\x00']
        self.args2 = [(True, 99999999, 0, 11, 1, 1),
            '\x00\x01\x00\x00\xff\xe0\xf5\x05\x00\x00\x0b\x01\x01\x00\x00\x00']
        self.args3 = [(False, 99999999, 0, 12, 1, 1),
            '\x00\x00\x00\x00\xff\xe0\xf5\x05\x00\x00\x0c\x01\x01\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GrabKey(self.conn)
        self.protocol_check = GrabKeyChecked(self.conn)

* Fri 06 Jun 2014 02:02:48 AM JST
    def tearDown(self):
        self.conn.core.UngrabKeyboard(0)
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.core.UngrabKeyboard(0)
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:03:10 AM JST
        self.argsbin = [(False, 99999999, 0, 10, 1, 1),
            '\x00\x00\x00\x00\xff\xe0\xf5\x05\x00\x00\n\x01\x01\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GrabKey(self.conn)
        self.protocol_check = GrabKeyChecked(self.conn)
        self.cookie = VoidCookie

* Fri 06 Jun 2014 02:03:32 AM JST
    def tearDown(self):
        self.conn.core.UngrabKeyboard(0)
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.core.UngrabKeyboard(0)
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:04:29 AM JST
        self.args1 = [(True, len('WM_NAME'), 'WM_NAME'),
            '\x00\x01\x00\x00\x07\x00\x00\x00WM_NAME']
        self.args2 = [(False, len('WM_NAME'), 'WM_NAME'),
            '\x00\x00\x00\x00\x07\x00\x00\x00WM_NAME']
        self.args3 = [(False, len('_NET_WM_NAME'), '_NET_WM_NAME'),
            '\x00\x00\x00\x00\x0c\x00\x00\x00_NET_WM_NAME']
        self.conn = xcb.connect()
        self.protocol = InternAtom(self.conn)
        self.protocol_check = InternAtomUnchecked(self.conn)

* Fri 06 Jun 2014 02:04:57 AM JST
    def tearDown(self):
        self.conn.core.UngrabKeyboard(0)
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.core.UngrabKeyboard(0)
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:05:10 AM JST
        self.args1 = [(True, len('WM_NAME'), 'WM_NAME'),
            '\x00\x01\x00\x00\x07\x00\x00\x00WM_NAME']
        self.args2 = [(False, len('WM_NAME'), 'WM_NAME'),
            '\x00\x00\x00\x00\x07\x00\x00\x00WM_NAME']
        self.args3 = [(False, len('_NET_WM_NAME'), '_NET_WM_NAME'),
            '\x00\x00\x00\x00\x0c\x00\x00\x00_NET_WM_NAME']
        self.conn = xcb.connect()
        self.protocol = UseCache(InternAtom(self.conn))

* Fri 06 Jun 2014 02:05:45 AM JST

* Fri 06 Jun 2014 02:05:45 AM JST

* Fri 06 Jun 2014 02:05:45 AM JST
        self.conn.core.UngrabKeyboard(0)

* Fri 06 Jun 2014 02:05:46 AM JST

* Fri 06 Jun 2014 02:05:46 AM JST

* Fri 06 Jun 2014 02:05:46 AM JST
        cls.conn.core.UngrabKeyboard(0)

* Fri 06 Jun 2014 02:05:54 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:06:06 AM JST
        self.argsbin = [(True, len('WM_NAME'), 'WM_NAME'),
            '\x00\x01\x00\x00\x07\x00\x00\x00WM_NAME']
        self.conn = xcb.connect()
        self.conn.display = ''
        self.protocol = InternAtom(self.conn)
        self.protocol_check = InternAtomUnchecked(self.conn)
        self.cookie = InternAtomCookie

* Fri 06 Jun 2014 02:06:46 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:07:12 AM JST
        self.conn = xcb.connect()
        self.conn.display = ''
        self.protocol = InternAtom(self.conn)
        self.usecache = UseCache(self.protocol)

* Fri 06 Jun 2014 02:08:25 AM JST
        self.conn = xcb.connect()
        self.protocol = InternAtom(self.conn)
        self.usecache = UseCache(self.protocol)

* Fri 06 Jun 2014 02:08:59 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:10:12 AM JST
        self.args1 = [(False, 44040214,
                       10, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)

* Fri 06 Jun 2014 02:10:42 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:11:01 AM JST
        self.argsbin = [(False, 44040214,
                       10, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.cookie = VoidCookie

* Fri 06 Jun 2014 02:11:23 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:12:28 AM JST
        self.args1 = [(False, 44040214,
                       10, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x02\x00\x00\x00\x03'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)

* Fri 06 Jun 2014 02:12:49 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:13:03 AM JST
        self.argsbin = [(False, 44040214,
                       10, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x02\x00\x00\x00\x03'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.cookie = VoidCookie

* Fri 06 Jun 2014 02:13:26 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:15:13 AM JST
        self.args1 = [(99999999, ), '\x00\x00\x00\x00\xff\xe0\xf5\x05']
        self.args2 = [(428, ), '\x00\x00\x00\x00\xac\x01\x00\x00']
        self.args3 = [(88888888, ), '\x00\x00\x00\x008VL\x05']
        self.conn = xcb.connect()
        self.protocol = MapWindow(self.conn)

* Fri 06 Jun 2014 02:15:36 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:15:42 AM JST
        self.argsbin = [(88888888, ), '\x00\x00\x00\x008VL\x05']
        self.conn = xcb.connect()
        self.protocol = MapWindow(self.conn)
        self.protocol_check = MapWindowChecked(self.conn)
        self.cookie = VoidCookie

* Fri 06 Jun 2014 02:16:09 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:18:03 AM JST
        self.args1 = [(False, 44040214,
                       1, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x00\x01\x00\x00\x06'
                      '\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.args2 = [(False, 44040214, EventMask.Button1Motion,
                       1, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x00\x01\x00\x00\x06'
                      '\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)

* Fri 06 Jun 2014 02:18:25 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:18:39 AM JST
        self.argsbin = [(False, 44040214, EventMask.Button1Motion,
                       1, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x00\x01\x00\x00\x06'
                      '\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.cookie = VoidCookie

* Fri 06 Jun 2014 02:19:11 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()


* Fri 06 Jun 2014 02:20:12 AM JST
        self.args1 = [(77777777, ), '\x00\x00\x00\x00q\xcb\xa2\x04']
        self.args2 = [(99999999, ), '\x00\x00\x00\x00\xff\xe0\xf5\x05']
        self.args3 = [(482, ), '\x00\x00\x00\x00\xe2\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = QueryTree(self.conn)
        self.protocol_check = QueryTreeUnchecked(self.conn)

* Fri 06 Jun 2014 02:20:38 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()


* Fri 06 Jun 2014 02:20:46 AM JST
        self.argsbin = [(99999999, ), '\x00\x00\x00\x00\xff\xe0\xf5\x05']
        self.conn = xcb.connect()
        self.protocol = QueryTree(self.conn)
        self.protocol_check = QueryTreeUnchecked(self.conn)
        self.cookie = QueryTreeCookie

* Fri 06 Jun 2014 02:21:10 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:22:10 AM JST
        self.conn = xcb2.connect()
        self.protocol = QueryTree(self.conn)

* Fri 06 Jun 2014 02:22:28 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:22:47 AM JST
        self.conn = xcb2.connect()
        self.resource = Resource(self.conn, 482)

* Fri 06 Jun 2014 02:23:15 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:23:53 AM JST
        self.window = simple_teswindow()
        winbin = pack('I', self.window)
        self.args1 = [(False, self.window, EventMask.KeyPress,
                       '\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00'
                       + winbin + '\x00\x00\x00\x00\x00\x00\x00\x00'
                       '\x00\x00\x00\x00\x00\x00\x01\x00'),
                      '\x00\x00\x00\x00' + winbin + '\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00' + winbin +
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)

* Fri 06 Jun 2014 02:25:09 AM JST

* Fri 06 Jun 2014 02:25:09 AM JST

* Fri 06 Jun 2014 02:25:09 AM JST
        conn.core.DestroyWindow(self.window)

* Fri 06 Jun 2014 02:25:30 AM JST
self
* Fri 06 Jun 2014 02:25:40 AM JST

* Fri 06 Jun 2014 02:25:40 AM JST

* Fri 06 Jun 2014 02:25:40 AM JST
        conn = xcb.connect()

* Fri 06 Jun 2014 02:26:37 AM JST
        self.window = simple_teswindow()
        winbin = pack('I', self.window)
        self.argsbin = [(False, self.window, EventMask.KeyPress,
                       '\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00'
                       + winbin + '\x00\x00\x00\x00\x00\x00\x00\x00'
                       '\x00\x00\x00\x00\x00\x00\x01\x00'),
                      '\x00\x00\x00\x00' + winbin + '\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00' + winbin +
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.cookie = VoidCookie

* Fri 06 Jun 2014 02:27:23 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.core.DestroyWindow(cls.window)
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:29:41 AM JST
        self.args1 = [(2, 60817459, 0),
                      '\x00\x02\x00\x003\x00\xa0\x03\x00\x00\x00\x00']
        self.args2 = [(1, 99999999, 0),
                      '\x00\x01\x00\x00\xff\xe0\xf5\x05\x00\x00\x00\x00']
        self.args3 = [(1, 482, 0),
                      '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = SetInputFocus(self.conn)
        self.protocol_check = SetInputFocusChecked(self.conn)

* Fri 06 Jun 2014 02:30:20 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:30:39 AM JST
        self.argsbin = [(2, 60817459, 0),
                        '\x00\x02\x00\x003\x00\xa0\x03\x00\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = SetInputFocus(self.conn)
        self.protocol_check = SetInputFocusChecked(self.conn)
        self.cookie = VoidCookie

* Fri 06 Jun 2014 02:31:03 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:31:53 AM JST
        self.args1 = [(67108867, 482, 0, 0),
                      '\x00\x00\x00\x00\x03\x00\x00\x04'
                      '\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.args2 = [(67108867, 482, 10, 10),
                      '\x00\x00\x00\x00\x03\x00\x00\x04'
                      '\xe2\x01\x00\x00\n\x00\n\x00']
        self.args3 = [(99999999, 482, 0, 0),
                      '\x00\x00\x00\x00\xff\xe0\xf5\x05'
                      '\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = TranslateCoordinates(self.conn)
        self.protocol_check = TranslateCoordinatesUnchecked(self.conn)

* Fri 06 Jun 2014 02:32:13 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:32:27 AM JST
        self.argsbin = [(67108867, 482, 0, 0),
                      '\x00\x00\x00\x00\x03\x00\x00\x04'
                      '\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = TranslateCoordinates(self.conn)
        self.protocol_check = TranslateCoordinatesUnchecked(self.conn)
        self.cookie = TranslateCoordinatesCookie

* Fri 06 Jun 2014 02:32:40 AM JST
c
* Fri 06 Jun 2014 02:32:41 AM JST
sfl.c
* Fri 06 Jun 2014 02:32:51 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:33:48 AM JST
        self.args1 = [(1, 482, 0),
                      '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.args2 = [(2, 482, 0),
                      '\x00\x02\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.args3 = [(3, 482, 0),
                      '\x00\x03\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UngrabButton(self.conn)
        self.protocol_check = UngrabButtonChecked(self.conn)

* Fri 06 Jun 2014 02:34:00 AM JST
sfl.
* Fri 06 Jun 2014 02:34:13 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:34:28 AM JST
        self.argsbin = [(1, 482, 0),
                        '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UngrabButton(self.conn)
        self.protocol_check = UngrabButtonChecked(self.conn)
        self.cookie = VoidCookie

* Fri 06 Jun 2014 02:34:56 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:35:47 AM JST
        self.args1 = [(0, ), '\x00\x00\x00\x00\x00\x00\x00\x00']
        self.args2 = [(1, ), '\x00\x00\x00\x00\x01\x00\x00\x00']
        self.args3 = [(2, ), '\x00\x00\x00\x00\x02\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UngrabKeyboard(self.conn)
        self.protocol_check = UngrabKeyboardChecked(self.conn)

* Fri 06 Jun 2014 02:36:07 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:36:16 AM JST
        self.argsbin = [(0, ), '\x00\x00\x00\x00\x00\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UngrabKeyboard(self.conn)
        self.protocol_check = UngrabKeyboardChecked(self.conn)
        self.cookie = VoidCookie

* Fri 06 Jun 2014 02:36:29 AM JST
sfl.
* Fri 06 Jun 2014 02:36:40 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:37:43 AM JST
        self.args1 = [(10, 99999999, 0),
                      '\x00\n\x00\x00\xff\xe0\xf5\x05\x00\x00\x00\x00']
        self.args2 = [(11, 88888888, 0),
                      '\x00\x0b\x00\x008VL\x05\x00\x00\x00\x00']
        self.args3 = [(12, 99999999, 1),
                      '\x00\x0c\x00\x00\xff\xe0\xf5\x05\x01\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UngrabKey(self.conn)
        self.protocol_check = UngrabKeyChecked(self.conn)

* Fri 06 Jun 2014 02:38:12 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:38:21 AM JST
        self.argsbin = [(10, 99999999, 0),
                      '\x00\n\x00\x00\xff\xe0\xf5\x05\x00\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UngrabKey(self.conn)
        self.protocol_check = UngrabKeyChecked(self.conn)
        self.cookie = VoidCookie

* Fri 06 Jun 2014 02:38:32 AM JST
sfl
* Fri 06 Jun 2014 02:38:42 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:39:35 AM JST
        self.conn = xcb2.connect()
        self.window = simple_teswindow()

* Fri 06 Jun 2014 02:40:16 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:40:19 AM JST

* Fri 06 Jun 2014 02:40:20 AM JST

* Fri 06 Jun 2014 02:40:20 AM JST
        self.conn.flush()

* Fri 06 Jun 2014 02:40:29 AM JST
self
* Fri 06 Jun 2014 02:40:31 AM JST
self
* Fri 06 Jun 2014 02:40:46 AM JST
WMCLASS
* Fri 06 Jun 2014 02:41:02 AM JST
Test WMCLASS.
* Fri 06 Jun 2014 02:42:42 AM JST
        self.xcbcon = xcb.connect()
        self.xcb2con = xcb2.connect()

* Fri 06 Jun 2014 02:43:07 AM JST
conn2
* Fri 06 Jun 2014 02:43:11 AM JST
conn
* Fri 06 Jun 2014 02:43:23 AM JST
    def tearDown(self):
        pass

* Fri 06 Jun 2014 02:43:26 AM JST
    def tearDown(self):
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 06 Jun 2014 02:43:30 AM JST
conn
* Fri 06 Jun 2014 02:43:33 AM JST
        
* Fri 06 Jun 2014 02:43:37 AM JST
conn
* Fri 06 Jun 2014 02:43:45 AM JST
conn
* Fri 06 Jun 2014 02:43:50 AM JST
        cls.xcbcon.flush()
        cls.xcbcon.disconnect()

* Fri 06 Jun 2014 04:08:36 AM JST
Test AtomName.
* Fri 06 Jun 2014 04:09:05 AM JST
Test AtomName
* Fri 06 Jun 2014 04:10:05 AM JST
Test AtomName.
* Fri 06 Jun 2014 04:11:28 AM JST
CacheAtomPair
* Fri 06 Jun 2014 04:11:44 AM JST
        
* Fri 06 Jun 2014 04:11:54 AM JST
Test CacheAtomPair.
* Fri 06 Jun 2014 04:12:37 AM JST
DisplayCacheAtomPair
* Fri 06 Jun 2014 04:12:54 AM JST
        
* Fri 06 Jun 2014 04:13:04 AM JST
GlobalCacheAtoms
* Fri 06 Jun 2014 04:13:12 AM JST
        
* Fri 06 Jun 2014 04:13:22 AM JST
Test GlobalCacheAtoms.
* Fri 06 Jun 2014 04:14:57 AM JST
Test QueryTree
* Fri 06 Jun 2014 04:15:05 AM JST
        
* Fri 06 Jun 2014 04:15:21 AM JST
cmp
* Fri 06 Jun 2014 04:15:23 AM JST
cmp_other_connection
* Fri 06 Jun 2014 04:15:38 AM JST
Resource
* Fri 06 Jun 2014 04:16:35 AM JST
Test Resource.
* Fri 06 Jun 2014 04:18:28 AM JST
Test 
* Fri 06 Jun 2014 04:18:37 AM JST
        
* Fri 06 Jun 2014 04:20:06 AM JST
returned_cookie
* Fri 06 Jun 2014 04:20:25 AM JST
Test GetPropertyMethod
* Fri 06 Jun 2014 04:21:44 AM JST
get
* Fri 06 Jun 2014 04:21:46 AM JST
get_geometry
* Fri 06 Jun 2014 04:22:01 AM JST
Drawable
* Fri 06 Jun 2014 04:22:08 AM JST
        
* Fri 06 Jun 2014 04:24:52 AM JST

* Fri 06 Jun 2014 04:24:52 AM JST

* Fri 06 Jun 2014 04:24:52 AM JST
        r"""

* Fri 06 Jun 2014 04:24:52 AM JST
        r"""

* Fri 06 Jun 2014 04:24:52 AM JST
        r"""
        """

* Fri 06 Jun 2014 04:25:44 AM JST

* Fri 06 Jun 2014 04:25:44 AM JST

* Fri 06 Jun 2014 04:25:44 AM JST
    r"""$1."""

* Fri 06 Jun 2014 04:51:20 AM JST
cls.conn.flush()
* Fri 06 Jun 2014 04:51:44 AM JST
cls
* Fri 06 Jun 2014 05:29:43 AM JST
classt
* Fri 06 Jun 2014 05:30:15 AM JST

* Fri 06 Jun 2014 05:30:15 AM JST

* Fri 06 Jun 2014 05:30:15 AM JST
    r"""$1."""

* Fri 06 Jun 2014 05:31:26 AM JST
classt
* Fri 06 Jun 2014 05:31:46 AM JST
class Test$1(MockerTestCase):
    """`(format-time-string "%Y/%m/%d")`"""
    @classmethod
    def setUpClass(cls):
        pass

    def setUp(self):
        self.mocker.replay()

    def test_$2(self):
        ${3:pass}
        $0

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass

* Fri 06 Jun 2014 05:36:25 AM JST
        cls.conn = xcb2.connect()
        cls.window = simple_teswindow()

* Fri 06 Jun 2014 05:38:38 AM JST
Window
* Fri 06 Jun 2014 05:39:21 AM JST
sfel.
* Fri 06 Jun 2014 05:39:54 AM JST
pass
* Fri 06 Jun 2014 05:39:59 AM JST
pass
* Fri 06 Jun 2014 05:40:13 AM JST
self
* Fri 06 Jun 2014 05:40:18 AM JST
self
* Fri 06 Jun 2014 05:40:50 AM JST
expect
* Fri 06 Jun 2014 05:43:46 AM JST
expect
* Fri 06 Jun 2014 05:43:50 AM JST
got
* Fri 06 Jun 2014 05:46:33 AM JST
from xcb2.xobj.geometry import WindowGeometry
* Fri 06 Jun 2014 05:46:54 AM JST
import 
* Fri 06 Jun 2014 05:46:55 AM JST
geometry import 
* Fri 06 Jun 2014 05:46:55 AM JST
xobj.geometry import 
* Fri 06 Jun 2014 05:46:55 AM JST
xcb2.xobj.geometry import 
* Fri 06 Jun 2014 05:46:56 AM JST
from xcb2.xobj.geometry import 
* Fri 06 Jun 2014 05:51:43 AM JST
simple_teswindow
* Fri 06 Jun 2014 05:51:52 AM JST
73400320
* Fri 06 Jun 2014 05:53:02 AM JST
all_event_masks
* Fri 06 Jun 2014 05:58:12 AM JST
xcb.xproto.EventMask.Exposure
* Fri 06 Jun 2014 05:58:25 AM JST
xcb.xproto.EventMask.KeyPress
* Fri 06 Jun 2014 05:58:38 AM JST
xcb2.xproto.EventMask.Exposure
* Fri 06 Jun 2014 05:58:45 AM JST
xcb2.xproto.EventMask.KeyPress
* Fri 06 Jun 2014 05:59:01 AM JST
white = setup.roots[0].white_pixel
* Fri 06 Jun 2014 05:59:48 AM JST
all_event_masks
* Fri 06 Jun 2014 06:00:03 AM JST
xcb2.xproto.EventMask.Exposure
* Fri 06 Jun 2014 06:01:04 AM JST
your
* Fri 06 Jun 2014 06:01:17 AM JST
Exposure
* Fri 06 Jun 2014 06:01:23 AM JST
KeyRelease
* Fri 06 Jun 2014 06:01:44 AM JST
w.get_attributes().all_event_masks & 
* Fri 06 Jun 2014 06:02:10 AM JST
xcb2.xproto.EventMask
* Fri 06 Jun 2014 06:02:36 AM JST
w.get_attributes().all_event_masks &
* Fri 06 Jun 2014 06:10:27 AM JST
change
* Fri 06 Jun 2014 06:13:59 AM JST
w.get_attributes().all_event_masks
* Fri 06 Jun 2014 06:38:40 AM JST
ColorMapChange
* Fri 06 Jun 2014 06:38:45 AM JST
0])
* Fri 06 Jun 2014 06:38:46 AM JST
EventMask, [0])
* Fri 06 Jun 2014 06:38:46 AM JST
CW.EventMask, [0])
* Fri 06 Jun 2014 06:38:46 AM JST
change_attributes(CW.EventMask, [0])
* Fri 06 Jun 2014 06:39:05 AM JST
all_event_masks
* Fri 06 Jun 2014 06:39:27 AM JST
for x in xcb2.xproto.EventMask:
        print(x)
        print(bool(w.get_attributes().all_event_masks & x))

* Fri 06 Jun 2014 06:40:20 AM JST
w.get_attributes().your_event_mask
* Fri 06 Jun 2014 06:40:25 AM JST
your
* Fri 06 Jun 2014 07:36:15 AM JST
con = xcb.connect()
* Fri 06 Jun 2014 07:36:27 AM JST
con.render = con(xcb.render.key)
* Fri 06 Jun 2014 07:36:48 AM JST
xcb.
* Fri 06 Jun 2014 07:36:53 AM JST
    setup = con.get_setup()
    root = setup.roots[0].root
    depth = setup.roots[0].root_depth
    visual = setup.roots[0].root_visual
    white = setup.roots[0].white_pixel

    window = con.generate_id()

* Fri 06 Jun 2014 07:37:09 AM JST
    con.core.CreateWindow(depth, window, root,
                          0, 0, 640, 480, 0,
                          xcb.xproto.WindowClass.InputOutput,
                          visual,
                          xcb.xproto.CW.BackPixel | xcb.xproto.CW.EventMask,
                          [white, xcb.xproto.EventMask.Exposure |
                           xcb.xproto.EventMask.KeyPress])

* Fri 06 Jun 2014 07:37:41 AM JST
con.core.MapWindow(window)
* Fri 06 Jun 2014 07:37:48 AM JST
con.flush()
* Fri 06 Jun 2014 07:40:25 AM JST
w=Window(c, 73400320)
* Fri 06 Jun 2014 07:45:41 AM JST
    con = xcb.connect()
    con.render = con(xcb.render.key)

    setup = con.get_setup()
    root = setup.roots[0].root
    depth = setup.roots[0].root_depth
    visual = setup.roots[0].root_visual
    white = setup.roots[0].white_pixel

    window = con.generate_id()

* Fri 06 Jun 2014 07:45:44 AM JST
xcb.
* Fri 06 Jun 2014 07:45:50 AM JST
    con.core.CreateWindow(depth, window, root,
                          0, 0, 640, 480, 0,
                          xcb.xproto.WindowClass.InputOutput,
                          visual,
                          xcb.xproto.CW.BackPixel | xcb.xproto.CW.EventMask,
                          [white, xcb.xproto.EventMask.Exposure |
                           xcb.xproto.EventMask.KeyPress])

* Fri 06 Jun 2014 07:46:02 AM JST
con.core.MapWindow(window)
* Fri 06 Jun 2014 07:46:07 AM JST
con.flush()
* Fri 06 Jun 2014 07:49:04 AM JST
get_attributes
* Fri 06 Jun 2014 07:49:18 AM JST
all_event_masks
* Fri 06 Jun 2014 07:52:22 AM JST
6455297
* Fri 06 Jun 2014 07:56:50 AM JST
                          
* Fri 06 Jun 2014 07:56:51 AM JST
                          
* Fri 06 Jun 2014 07:56:55 AM JST
con.core.MapWindow(window)
* Fri 06 Jun 2014 07:58:41 AM JST
w.get_attri
* Fri 06 Jun 2014 07:59:25 AM JST
KeyPress
* Fri 06 Jun 2014 07:59:35 AM JST
EnterWindow
* Fri 06 Jun 2014 08:00:04 AM JST
FocusChange
* Fri 06 Jun 2014 08:00:28 AM JST
FocusChange
* Fri 06 Jun 2014 08:00:29 AM JST
EventMask.FocusChange
* Fri 06 Jun 2014 08:00:29 AM JST
EnterWindow | EventMask.FocusChange
* Fri 06 Jun 2014 08:00:29 AM JST
EventMask.EnterWindow | EventMask.FocusChange
* Fri 06 Jun 2014 08:00:30 AM JST
KeyPress | EventMask.EnterWindow | EventMask.FocusChange
* Fri 06 Jun 2014 08:00:30 AM JST
EventMask.KeyPress | EventMask.EnterWindow | EventMask.FocusChange
* Fri 06 Jun 2014 08:14:33 AM JST
ChangeWindowAttributes
window: WINDOW
value-mask: BITMASK
value-list: LISTofVALUE
Errors: Access, Colormap, Cursor, Match, Pixmap, Value, Window
The value-mask and value-list specify which attributes are to be changed.
* Fri 06 Jun 2014 08:14:41 AM JST
ChangeWindowAttributes
* Fri 06 Jun 2014 08:14:48 AM JST
DESCRIPTION
* Fri 06 Jun 2014 08:15:05 AM JST
The values and
* Fri 06 Jun 2014 08:15:36 AM JST
 are the same as for CreateWindow.
Setting a new background, whether by background-pixmap or background-pixel, overrides any
previous background. Setting a new border, whether by border-pixel or border-pixmap, overrides
any previous border.
Changing the background does not cause the window contents to be changed. Setting the border
or changing the background such that the border tile origin changes causes the border to be
repainted. Changing the background of a root window to None or ParentRelative restores the
default background pixmap. Changing the border of a root window to CopyFromParent
restores the default border pixmap.
Changing the win-gravity does not affect the current position of the window.
Changing the backing-store of an obscured window to WhenMapped or Always or changing
the backing-planes, backing-pixel, or save-under of a mapped window may have no immediate
effect.
Multiple clients can select input on the same window; their event-masks are disjoint. When an
ev ent is generated, it will be reported to all interested clients. However, only one client at a time
can select for SubstructureRedirect, only one client at a time can select for ResizeRedirect,
and only one client at a time can select for ButtonPress. An attempt to violate these restrictions
results in an Access error.
There is only one do-not-propagate-mask for a window, not one per client.
Changing the colormap of a window (by deﬁning a new map, not by changing the contents of the
existing map) generates a ColormapNotify ev ent. Changing the colormap of a visible window
might have no immediate effect on the screen (see InstallColormap request).
Changing the cursor of a root window to None restores the default cursor.
The order in which attributes are veriﬁed and altered is server-dependent. If an error is generated,
a subset of the attributes may have been altered.
* Fri 06 Jun 2014 08:17:30 AM JST
Errors: Access, Colormap, Cursor, Match, Pixmap, Value, Window
* Fri 06 Jun 2014 08:18:17 AM JST
Errors: 
* Fri 06 Jun 2014 08:18:20 AM JST
Bad
* Fri 06 Jun 2014 11:39:09 AM JST
/data/archive/ref/book/Programming/proto.pdf
* Fri 06 Jun 2014 11:44:10 AM JST
window: WINDOW
▶
visual: VISUALID
class: { InputOutput, InputOnly}
bit-gravity: BITGRAVITY
win-gravity: WINGRAVITY
backing-store: { NotUseful, WhenMapped, Always}
backing-planes: CARD32
backing-pixel: CARD32
save-under: BOOL
colormap: COLORMAP or None
map-is-installed: BOOL
map-state: { Unmapped, Unviewable, Viewable}
all-event-masks, your-event-mask: SETofEVENT
do-not-propagate-mask: SETofDEVICEEVENT
override-redirect: BOOL
Errors: Window
This request returns the current attributes of the window. A window is Unviewable if it is mapped but some ancestor is unmapped. All-event-masks is the inclusive-OR of all event masks selected on the window by clients. Your-event-mask is the event mask selected by the querying client.
* Fri 06 Jun 2014 11:44:33 AM JST
Return -------------------------------
* Fri 06 Jun 2014 11:45:10 AM JST
Errors: Window
* Fri 06 Jun 2014 11:45:41 AM JST

* Fri 06 Jun 2014 11:45:41 AM JST

* Fri 06 Jun 2014 11:45:42 AM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 11:45:42 AM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 11:45:42 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 11:45:42 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 11:45:42 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 11:45:42 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 11:45:42 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 11:45:45 AM JST
GetWindowAttributesCookie
* Fri 06 Jun 2014 11:45:59 AM JST
visual: VISUALID
class: { InputOutput, InputOnly}
bit-gravity: BITGRAVITY
win-gravity: WINGRAVITY
backing-store: { NotUseful, WhenMapped, Always}
backing-planes: CARD32
backing-pixel: CARD32
save-under: BOOL
colormap: COLORMAP or None
map-is-installed: BOOL
map-state: { Unmapped, Unviewable, Viewable}
all-event-masks, your-event-mask: SETofEVENT
do-not-propagate-mask: SETofDEVICEEVENT
override-redirect: BOOL

* Fri 06 Jun 2014 11:47:02 AM JST
Window
* Fri 06 Jun 2014 11:51:13 AM JST
ChangeWindowAttributes
* Fri 06 Jun 2014 11:51:27 AM JST
GetWindowAttributes
* Fri 06 Jun 2014 12:08:29 PM JST
CreateWindow

wid, parent: WINDOW
class: { InputOutput, InputOnly, CopyFromParent}
depth: CARD8
visual: VISUALID or CopyFromParent
x, y: INT16
width, height, border-width: CARD16
value-mask: BITMASK
value-list: LISTofVALUE
Errors: Alloc, Colormap, Cursor, IDChoice, Match, Pixmap, Value, Window
This request creates an unmapped window and assigns the identifier wid to it.

A class of CopyFromParent means the class is taken from the parent. A depth of zero for class InputOutput or CopyFromParent means the depth is taken from the parent. A visual of CopyFromParent means the visual type is taken from the parent. For class InputOutput, the visual type and depth must be a combination supported for the screen (or a Match error results). The depth need not be the same as the parent, but the parent must not be of class InputOnly (or a Match error results). For class InputOnly, the depth must be zero (or a Match error results), and the visual must be one supported for the screen (or a Match error results). However, the parent can have any depth and class.

The server essentially acts as if InputOnly windows do not exist for the purposes of graphics requests, exposure processing, and VisibilityNotify events. An InputOnly window cannot be used as a drawable (as a source or destination for graphics requests). InputOnly and InputOutput windows act identically in other respects-properties, grabs, input control, and so on.

The coordinate system has the X axis horizontal and the Y axis vertical with the origin [0, 0] at the upper-left corner. Coordinates are integral, in terms of pixels, and coincide with pixel centers. Each window and pixmap has its own coordinate system. For a window, the origin is inside the border at the inside, upper-left corner.

The x and y coordinates for the window are relative to the parent's origin and specify the position of the upper-left outer corner of the window (not the origin). The width and height specify the inside size (not including the border) and must be nonzero (or a Value error results). The border-width for an InputOnly window must be zero (or a Match error results).

The window is placed on top in the stacking order with respect to siblings.

The value-mask and value-list specify attributes of the window that are to be explicitly initialized. The possible values are:
* Fri 06 Jun 2014 12:08:40 PM JST
CreateWindow
* Fri 06 Jun 2014 12:10:45 PM JST
A class of CopyFromParent means the class is taken from the parent.
A depth of zero for class InputOutput or CopyFromParent means the depth is
taken from the parent. A visual of CopyFromParent means the visual type is taken from the parent. For class InputOutput, the visual type and depth must be a combination supported for the screen (or a Match error results). The depth need not be the same as the parent, but the parent must not be of class InputOnly (or a Match error results). For class InputOnly, the depth must be zero (or a Match error results), and the visual must be one supported for the screen (or a Match error results). However, the parent can have any depth and class.

The server essentially acts as if InputOnly windows do not exist for the purposes of graphics requests, exposure processing, and VisibilityNotify events. An InputOnly window cannot be used as a drawable (as a source or destination for graphics requests). InputOnly and InputOutput windows act identically in other respects-properties, grabs, input control, and so on.

The coordinate system has the X axis horizontal and the Y axis vertical with the origin [0, 0] at the upper-left corner. Coordinates are integral, in terms of pixels, and coincide with pixel centers. Each window and pixmap has its own coordinate system. For a window, the origin is inside the border at the inside, upper-left corner.

The x and y coordinates for the window are relative to the parent's origin and specify the position of the upper-left outer corner of the window (not the origin). The width and height specify the inside size (not including the border) and must be nonzero (or a Value error results). The border-width for an InputOnly window must be zero (or a Match error results).

The window is placed on top in the stacking order with respect to siblings.

The value-mask and value-list specify attributes of the window that are to be explicitly initialized. The possible values are:

* Fri 06 Jun 2014 12:12:02 PM JST

* Fri 06 Jun 2014 12:12:02 PM JST

* Fri 06 Jun 2014 12:12:02 PM JST
hellow jaldkjfalkdf-alkjdlkksiaosdhfodoaidhfaosdfhaosidfjoai
* Fri 06 Jun 2014 12:38:50 PM JST
fill
* Fri 06 Jun 2014 12:38:51 PM JST
fill-column'
* Fri 06 Jun 2014 12:40:56 PM JST
Attribute	Type
background-pixmap	 PIXMAP or None or ParentRelative
background-pixel	CARD32
border-pixmap	 PIXMAP or CopyFromParent
border-pixel	CARD32
bit-gravity	BITGRAVITY
win-gravity	WINGRAVITY
backing-store	 { NotUseful, WhenMapped, Always }
backing-planes	CARD32
backing-pixel	CARD32
save-under	BOOL
event-mask	SETofEVENT
do-not-propagate-mask	SETofDEVICEEVENT
override-redirect	BOOL
colormap	 COLORMAP or CopyFromParent
cursor	 CURSOR or None
The default values when attributes are not explicitly initialized are:

Attribute	Default
background-pixmap	None
border-pixmap	CopyFromParent
bit-gravity	Forget
win-gravity	NorthWest
backing-store	NotUseful
backing-planes	all ones
backing-pixel	zero
save-under	False
event-mask	{} (empty set)
do-not-propagate-mask	{} (empty set)
override-redirect	False
colormap	CopyFromParent
cursor	None
Only the following attributes are defined for InputOnly windows:

win-gravity

event-mask

do-not-propagate-mask

override-redirect

cursor

It is a Match error to specify any other attributes for InputOnly windows.
* Fri 06 Jun 2014 12:41:37 PM JST
If background-pixmap is given, it overrides the default background-pixmap. The background pixmap and the window must have the same root and the same depth (or a Match error results). Any size pixmap can be used, although some sizes may be faster than others. If background None is specified, the window has no defined background. If background ParentRelative is specified, the parent's background is used, but the window must have the same depth as the parent (or a Match error results). If the parent has background None, then the window will also have background None. A copy of the parent's background is not made. The parent's background is reexamined each time the window background is required. If background-pixel is given, it overrides the default background-pixmap and any background-pixmap given explicitly, and a pixmap of undefined size filled with background-pixel is used for the background. Range checking is not performed on the background-pixel value; it is simply truncated to the appropriate number of bits. For a ParentRelative background, the background tile origin always aligns with the parent's background tile origin. Otherwise, the background tile origin is always the window origin.

When no valid contents are available for regions of a window and the regions are either visible or the server is maintaining backing store, the server automatically tiles the regions with the window's background unless the window has a background of None. If the background is None, the previous screen contents from other windows of the same depth as the window are simply left in place if the contents come from the parent of the window or an inferior of the parent; otherwise, the initial contents of the exposed regions are undefined. Exposure events are then generated for the regions, even if the background is None.

The border tile origin is always the same as the background tile origin. If border-pixmap is given, it overrides the default border-pixmap. The border pixmap and the window must have the same root and the same depth (or a Match error results). Any size pixmap can be used, although some sizes may be faster than others. If CopyFromParent is given, the parent's border pixmap is copied (subsequent changes to the parent's border attribute do not affect the child), but the window must have the same depth as the parent (or a Match error results). The pixmap might be copied by sharing the same pixmap object between the child and parent or by making a complete copy of the pixmap contents. If border-pixel is given, it overrides the default border-pixmap and any border-pixmap given explicitly, and a pixmap of undefined size filled with border-pixel is used for the border. Range checking is not performed on the border-pixel value; it is simply truncated to the appropriate number of bits.

Output to a window is always clipped to the inside of the window, so that the border is never affected.

The bit-gravity defines which region of the window should be retained if the window is resized, and win-gravity defines how the window should be repositioned if the parent is resized (see ConfigureWindow request).

A backing-store of WhenMapped advises the server that maintaining contents of obscured regions when the window is mapped would be beneficial. A backing-store of Always advises the server that maintaining contents even when the window is unmapped would be beneficial. In this case, the server may generate an exposure event when the window is created. A value of NotUseful advises the server that maintaining contents is unnecessary, although a server may still choose to maintain contents while the window is mapped. Note that if the server maintains contents, then the server should maintain complete contents not just the region within the parent boundaries, even if the window is larger than its parent. While the server maintains contents, exposure events will not normally be generated, but the server may stop maintaining contents at any time.

If save-under is True, the server is advised that when this window is mapped, saving the contents of windows it obscures would be beneficial.

When the contents of obscured regions of a window are being maintained, regions obscured by noninferior windows are included in the destination (and source, when the window is the source) of graphics requests, but regions obscured by inferior windows are not included.

The backing-planes indicates (with bits set to 1) which bit planes of the window hold dynamic data that must be preserved in backing-stores and during save-unders. The backing-pixel specifies what value to use in planes not covered by backing-planes. The server is free to save only the specified bit planes in the backing-store or save-under and regenerate the remaining planes with the specified pixel value. Any bits beyond the specified depth of the window in these values are simply ignored.

The event-mask defines which events the client is interested in for this window (or for some event types, inferiors of the window). The do-not-propagate-mask defines which events should not be propagated to ancestor windows when no client has the event type selected in this window.

The override-redirect specifies whether map and configure requests on this window should override a SubstructureRedirect on the parent, typically to inform a window manager not to tamper with the window.

The colormap specifies the colormap that best reflects the true colors of the window. Servers capable of supporting multiple hardware colormaps may use this information, and window managers may use it for InstallColormap requests. The colormap must have the same visual type and root as the window (or a Match error results). If CopyFromParent is specified, the parent's colormap is copied (subsequent changes to the parent's colormap attribute do not affect the child). However, the window must have the same visual type as the parent (or a Match error results), and the parent must not have a colormap of None (or a Match error results). For an explanation of None, see FreeColormap request. The colormap is copied by sharing the colormap object between the child and the parent, not by making a complete copy of the colormap contents.

If a cursor is specified, it will be used whenever the pointer is in the window. If None is specified, the parent's cursor will be used when the pointer is in the window, and any change in the parent's cursor will cause an immediate change in the displayed cursor.

This request generates a CreateNotify event.

The background and border pixmaps and the cursor may be freed immediately if no further explicit references to them are to be made.

Subsequent drawing into the background or border pixmap has an undefined effect on the window state. The server might or might not make a copy of the pixmap.
* Fri 06 Jun 2014 12:42:21 PM JST
Errors: Alloc, Colormap, Cursor, IDChoice, Match, Pixmap, Value, Window
* Fri 06 Jun 2014 12:42:52 PM JST
Bad
* Fri 06 Jun 2014 12:43:28 PM JST
VoidCookie
* Fri 06 Jun 2014 12:44:27 PM JST
DestroyWindow

window: WINDOW
Errors: Window
If the argument window is mapped, an UnmapWindow request is performed automatically. The window and all inferiors are then destroyed, and a DestroyNotify event is generated for each window. The ordering of the DestroyNotify events is such that for any given window, DestroyNotify is generated on all inferiors of the window before being generated on the window itself. The ordering among siblings and across subhierarchies is not otherwise constrained.

Normal exposure processing on formerly obscured windows is performed.

If the window is a root window, this request has no effect.
* Fri 06 Jun 2014 12:44:40 PM JST
DESCRIPTION
* Fri 06 Jun 2014 12:44:52 PM JST
a parts of xcb2
* Fri 06 Jun 2014 12:45:09 PM JST
Errors: Window
* Fri 06 Jun 2014 12:45:38 PM JST
VoidCookie
* Fri 06 Jun 2014 12:46:06 PM JST
DestroySubwindows

window: WINDOW
Errors: Window
This request performs a DestroyWindow request on all children of the window, in bottom-to-top stacking order.
* Fri 06 Jun 2014 12:46:20 PM JST
Errors: Window
* Fri 06 Jun 2014 12:46:32 PM JST
DestroySubwindows
* Fri 06 Jun 2014 12:46:56 PM JST
VoidCookie
* Fri 06 Jun 2014 12:47:22 PM JST
DESCRIPTION
* Fri 06 Jun 2014 12:50:11 PM JST
ChangeSaveSet

window: WINDOW
mode: { Insert, Delete}
Errors: Match, Value, Window
This request adds or removes the specified window from the client's save-set. The window must have been created by some other client (or a Match error results). For further information about the use of the save-set, see section 10.

When windows are destroyed, the server automatically removes them from the save-set.
* Fri 06 Jun 2014 12:50:48 PM JST
ChangeSaveSet
* Fri 06 Jun 2014 12:51:28 PM JST
Match, Value, Window
* Fri 06 Jun 2014 12:51:43 PM JST

* Fri 06 Jun 2014 12:51:43 PM JST

* Fri 06 Jun 2014 12:51:43 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:51:43 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:51:43 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:51:43 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:51:44 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:51:44 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:51:44 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:51:47 PM JST

* Fri 06 Jun 2014 12:51:47 PM JST

* Fri 06 Jun 2014 12:51:47 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:51:47 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:51:47 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:51:47 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:51:47 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:51:47 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:51:47 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:51:50 PM JST
VoidCookie
* Fri 06 Jun 2014 12:52:28 PM JST
ReparentWindow

window, parent: WINDOW
x, y: INT16
Errors: Match, Window
If the window is mapped, an UnmapWindow request is performed automatically first. The window is then removed from its current position in the hierarchy and is inserted as a child of the specified parent. The x and y coordinates are relative to the parent's origin and specify the new position of the upper-left outer corner of the window. The window is placed on top in the stacking order with respect to siblings. A ReparentNotify event is then generated. The override-redirect attribute of the window is passed on in this event; a value of True indicates that a window manager should not tamper with this window. Finally, if the window was originally mapped, a MapWindow request is performed automatically.

Normal exposure processing on formerly obscured windows is performed. The server might not generate exposure events for regions from the initial unmap that are immediately obscured by the final map.

A Match error is generated if: The new parent is not on the same screen as the old parent. The new parent is the window itself or an inferior of the window. The new parent is InputOnly, and the window is not. The window has a ParentRelative background, and the new parent is not the same depth as the window.
* Fri 06 Jun 2014 12:52:42 PM JST

* Fri 06 Jun 2014 12:52:42 PM JST

* Fri 06 Jun 2014 12:52:42 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:52:42 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:52:42 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:52:42 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:52:42 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:52:42 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:52:42 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:52:45 PM JST

* Fri 06 Jun 2014 12:52:45 PM JST

* Fri 06 Jun 2014 12:52:45 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:52:45 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:52:45 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:52:45 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:52:45 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:52:45 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:52:45 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:52:53 PM JST
ReparentWindow
* Fri 06 Jun 2014 12:53:07 PM JST
Errors: Match, Window
* Fri 06 Jun 2014 12:53:16 PM JST
Errors: 
* Fri 06 Jun 2014 12:54:10 PM JST
MapWindow

window: WINDOW
Errors: Window
If the window is already mapped, this request has no effect.

If the override-redirect attribute of the window is False and some other client has selected SubstructureRedirect on the parent, then a MapRequest event is generated, but the window remains unmapped. Otherwise, the window is mapped, and a MapNotify event is generated.

If the window is now viewable and its contents have been discarded, the window is tiled with its background (if no background is defined, the existing screen contents are not altered), and zero or more exposure events are generated. If a backing-store has been maintained while the window was unmapped, no exposure events are generated. If a backing-store will now be maintained, a full-window exposure is always generated. Otherwise, only visible regions may be reported. Similar tiling and exposure take place for any newly viewable inferiors.
* Fri 06 Jun 2014 12:54:35 PM JST
MapWindow
* Fri 06 Jun 2014 12:55:45 PM JST
Errors: Window
* Fri 06 Jun 2014 12:56:11 PM JST
        @Errors:
        BadWindow

* Fri 06 Jun 2014 12:56:15 PM JST

* Fri 06 Jun 2014 12:56:15 PM JST

* Fri 06 Jun 2014 12:56:15 PM JST
        @Errors:

* Fri 06 Jun 2014 12:57:14 PM JST
MapSubwindows

window: WINDOW
Errors: Window
This request performs a MapWindow request on all unmapped children of the window, in top-to-bottom stacking order.
* Fri 06 Jun 2014 12:57:30 PM JST
MapSubwindows
* Fri 06 Jun 2014 12:57:51 PM JST
Window
* Fri 06 Jun 2014 12:58:23 PM JST

* Fri 06 Jun 2014 12:58:23 PM JST

* Fri 06 Jun 2014 12:58:23 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:58:23 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:58:23 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:58:23 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:58:23 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:58:23 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:58:23 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:58:26 PM JST

* Fri 06 Jun 2014 12:58:26 PM JST

* Fri 06 Jun 2014 12:58:26 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:58:26 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:58:26 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:58:26 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:58:26 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:58:27 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:58:27 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 12:59:17 PM JST
UnmapWindow

window: WINDOW
Errors: Window
If the window is already unmapped, this request has no effect. Otherwise, the window is unmapped, and an UnmapNotify event is generated. Normal exposure processing on formerly obscured windows is performed.

UnmapSubwindows

window: WINDOW
Errors: Window
This request performs an UnmapWindow request on all mapped children of the window, in bottom-to-top stacking order.

ConfigureWindow

window: WINDOW
value-mask: BITMASK
value-list: LISTofVALUE
Errors: Match, Value, Window
This request changes the configuration of the window. The value-mask and value-list specify which values are to be given. The possible values are:

Attribute	Type
x	INT16
y	INT16
width	CARD16
height	CARD16
border-width	CARD16
sibling	WINDOW
stack-mode	 { Above, Below, TopIf, BottomIf, Opposite }
The x and y coordinates are relative to the parent's origin and specify the position of the upper-left outer corner of the window. The width and height specify the inside size, not including the border, and must be nonzero (or a Value error results). Those values not specified are taken from the existing geometry of the window. Note that changing just the border-width leaves the outer-left corner of the window in a fixed position but moves the absolute position of the window's origin. It is a Match error to attempt to make the border-width of an InputOnly window nonzero.

If the override-redirect attribute of the window is False and some other client has selected SubstructureRedirect on the parent, a ConfigureRequest event is generated, and no further processing is performed. Otherwise, the following is performed:

If some other client has selected ResizeRedirect on the window and the inside width or height of the window is being changed, a ResizeRequest event is generated, and the current inside width and height are used instead. Note that the override-redirect attribute of the window has no effect on ResizeRedirect and that SubstructureRedirect on the parent has precedence over ResizeRedirect on the window.

The geometry of the window is changed as specified, the window is restacked among siblings, and a ConfigureNotify event is generated if the state of the window actually changes. If the inside width or height of the window has actually changed, then children of the window are affected, according to their win-gravity. Exposure processing is performed on formerly obscured windows (including the window itself and its inferiors if regions of them were obscured but now are not). Exposure processing is also performed on any new regions of the window (as a result of increasing the width or height) and on any regions where window contents are lost.

If the inside width or height of a window is not changed but the window is moved or its border is changed, then the contents of the window are not lost but move with the window. Changing the inside width or height of the window causes its contents to be moved or lost, depending on the bit-gravity of the window. It also causes children to be reconfigured, depending on their win-gravity. For a change of width and height of W and H, we define the [x, y] pairs as:

Direction	Deltas
NorthWest	[0, 0]
North	[W/2, 0]
NorthEast	[W, 0]
West	[0, H/2]
Center	[W/2, H/2]
East	[W, H/2]
SouthWest	[0, H]
South	[W/2, H]
SouthEast	[W, H]
When a window with one of these bit-gravities is resized, the corresponding pair defines the change in position of each pixel in the window. When a window with one of these win-gravities has its parent window resized, the corresponding pair defines the change in position of the window within the parent. This repositioning generates a GravityNotify event. GravityNotify events are generated after the ConfigureNotify event is generated.

A gravity of Static indicates that the contents or origin should not move relative to the origin of the root window. If the change in size of the window is coupled with a change in position of [X, Y], then for bit-gravity the change in position of each pixel is [-X, -Y] and for win-gravity the change in position of a child when its parent is so resized is [-X, -Y]. Note that Static gravity still only takes effect when the width or height of the window is changed, not when the window is simply moved.

A bit-gravity of Forget indicates that the window contents are always discarded after a size change, even if backing-store or save-under has been requested. The window is tiled with its background (except, if no background is defined, the existing screen contents are not altered) and zero or more exposure events are generated.

The contents and borders of inferiors are not affected by their parent's bit-gravity. A server is permitted to ignore the specified bit-gravity and use Forget instead.

A win-gravity of Unmap is like NorthWest, but the child is also unmapped when the parent is resized, and an UnmapNotify event is generated. UnmapNotify events are generated after the ConfigureNotify event is generated.

If a sibling and a stack-mode are specified, the window is restacked as follows:

Above	 The window is placed just above the sibling.
Below	 The window is placed just below the sibling.
TopIf	 If the sibling occludes the window, then the window is placed at the top of the stack.
BottomIf	 If the window occludes the sibling, then the window is placed at the bottom of the stack.
Opposite	 If the sibling occludes the window, then the window is placed at the top of the stack. Otherwise, if the window occludes the sibling, then the window is placed at the bottom of the stack.
If a stack-mode is specified but no sibling is specified, the window is restacked as follows:

Above	 The window is placed at the top of the stack.
Below	 The window is placed at the bottom of the stack.
TopIf	 If any sibling occludes the window, then the window is placed at the top of the stack.
BottomIf	 If the window occludes any sibling, then the window is placed at the bottom of the stack.
Opposite	 If any sibling occludes the window, then the window is placed at the top of the stack. Otherwise, if the window occludes any sibling, then the window is placed at the bottom of the stack.
It is a Match error if a sibling is specified without a stack-mode or if the window is not actually a sibling.

Note that the computations for BottomIf, TopIf, and Opposite are performed with respect to the window's final geometry (as controlled by the other arguments to the request), not to its initial geometry.

Attempts to configure a root window have no effect.

CirculateWindow

window: WINDOW
direction: { RaiseLowest, LowerHighest}
Errors: Value, Window
If some other client has selected SubstructureRedirect on the window, then a CirculateRequest event is generated, and no further processing is performed. Otherwise, the following is performed, and then a CirculateNotify event is generated if the window is actually restacked.

For RaiseLowest, CirculateWindow raises the lowest mapped child (if any) that is occluded by another child to the top of the stack. For LowerHighest, CirculateWindow lowers the highest mapped child (if any) that occludes another child to the bottom of the stack. Exposure processing is performed on formerly obscured windows.

GetGeometry

drawable: DRAWABLE
▶
root: WINDOW
depth: CARD8
x, y: INT16
width, height, border-width: CARD16
Errors: Drawable
This request returns the root and current geometry of the drawable. The depth is the number of bits per pixel for the object. The x, y, and border-width will always be zero for pixmaps. For a window, the x and y coordinates specify the upper-left outer corner of the window relative to its parent's origin, and the width and height specify the inside size, not including the border.

It is legal to pass an InputOnly window as a drawable to this request.

QueryTree

window: WINDOW
▶
root: WINDOW
parent: WINDOW or None
children: LISTofWINDOW
Errors: Window
This request returns the root, the parent, and the children of the window. The children are listed in bottom-to-top stacking order.

InternAtom

name: STRING8
only-if-exists: BOOL
▶
atom: ATOM or None
Errors: Alloc, Value
This request returns the atom for the given name. If only-if-exists is False, then the atom is created if it does not exist. The string should use the ISO Latin-1 encoding. Uppercase and lowercase matter.

The lifetime of an atom is not tied to the interning client. Atoms remain defined until server reset (see section 10).

GetAtomName

atom: ATOM
▶
name: STRING8
Errors: Atom
This request returns the name for the given atom.

ChangeProperty

window: WINDOW
property, type: ATOM
format: {8, 16, 32}
mode: { Replace, Prepend, Append}
data: LISTofINT8 or LISTofINT16 or LISTofINT32
Errors: Alloc, Atom, Match, Value, Window
This request alters the property for the specified window. The type is uninterpreted by the server. The format specifies whether the data should be viewed as a list of 8-bit, 16-bit, or 32-bit quantities so that the server can correctly byte-swap as necessary.

If the mode is Replace, the previous property value is discarded. If the mode is Prepend or Append, then the type and format must match the existing property value (or a Match error results). If the property is undefined, it is treated as defined with the correct type and format with zero-length data. For Prepend, the data is tacked on to the beginning of the existing data, and for Append, it is tacked on to the end of the existing data.

This request generates a PropertyNotify event on the window.

The lifetime of a property is not tied to the storing client. Properties remain until explicitly deleted, until the window is destroyed, or until server reset (see section 10).

The maximum size of a property is server-dependent and may vary dynamically.

DeleteProperty

window: WINDOW
property: ATOM
Errors: Atom, Window
This request deletes the property from the specified window if the property exists and generates a PropertyNotify event on the window unless the property does not exist.

GetProperty

window: WINDOW
property: ATOM
type: ATOM or AnyPropertyType
long-offset, long-length: CARD32
delete: BOOL
▶
type: ATOM or None
format: {0, 8, 16, 32}
bytes-after: CARD32
value: LISTofINT8 or LISTofINT16 or LISTofINT32
Errors: Atom, Value, Window
If the specified property does not exist for the specified window, then the return type is None, the format and bytes-after are zero, and the value is empty. The delete argument is ignored in this case. If the specified property exists but its type does not match the specified type, then the return type is the actual type of the property, the format is the actual format of the property (never zero), the bytes-after is the length of the property in bytes (even if the format is 16 or 32), and the value is empty. The delete argument is ignored in this case. If the specified property exists and either AnyPropertyType is specified or the specified type matches the actual type of the property, then the return type is the actual type of the property, the format is the actual format of the property (never zero), and the bytes-after and value are as follows, given:

	N = actual length of the stored property in bytes
	    (even if the format is 16 or 32)
	I = 4 * long-offset
	T = N - I
	L = MINIMUM(T, 4 * long-length)
	A = N - (I + L)
The returned value starts at byte index I in the property (indexing from 0), and its length in bytes is L. However, it is a Value error if long-offset is given such that L is negative. The value of bytes-after is A, giving the number of trailing unread bytes in the stored property. If delete is True and the bytes-after is zero, the property is also deleted from the window, and a PropertyNotify event is generated on the window.

RotateProperties

window: WINDOW
delta: INT16
properties: LISTofATOM
Errors: Atom, Match, Window
If the property names in the list are viewed as being numbered starting from zero, and there are N property names in the list, then the value associated with property name I becomes the value associated with property name (I + delta) mod N, for all I from zero to N - 1. The effect is to rotate the states by delta places around the virtual ring of property names (right for positive delta, left for negative delta).

If delta mod N is nonzero, a PropertyNotify event is generated for each property in the order listed.

If an atom occurs more than once in the list or no property with that name is defined for the window, a Match error is generated. If an Atom or Match error is generated, no properties are changed.

ListProperties

window: WINDOW
▶
atoms: LISTofATOM
Errors: Window
This request returns the atoms of properties currently defined on the window.
* Fri 06 Jun 2014 12:59:34 PM JST
UnmapWindow

window: WINDOW
Errors: Window
If the window is already unmapped, this request has no effect. Otherwise, the window is unmapped, and an UnmapNotify event is generated. Normal exposure processing on formerly obscured windows is performed.

* Fri 06 Jun 2014 12:59:54 PM JST
UnmapWindow
* Fri 06 Jun 2014 01:00:28 PM JST
Return:
* Fri 06 Jun 2014 01:00:38 PM JST

* Fri 06 Jun 2014 01:00:38 PM JST

* Fri 06 Jun 2014 01:00:38 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:00:39 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:00:39 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:00:39 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:00:39 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:00:39 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:00:39 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:00:41 PM JST

* Fri 06 Jun 2014 01:00:41 PM JST

* Fri 06 Jun 2014 01:00:42 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:00:42 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:00:42 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:00:42 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:00:42 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:00:42 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:00:42 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:00:50 PM JST
UnmapSubwindows

window: WINDOW
Errors: Window
This request performs an UnmapWindow request on all mapped children of the window, in bottom-to-top stacking order.


* Fri 06 Jun 2014 01:01:14 PM JST
UnmapSubwindows
* Fri 06 Jun 2014 01:01:28 PM JST
Error
* Fri 06 Jun 2014 01:01:41 PM JST

* Fri 06 Jun 2014 01:01:41 PM JST

* Fri 06 Jun 2014 01:01:41 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:01:41 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:01:41 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:01:41 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:01:41 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:01:41 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:01:41 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:01:44 PM JST

* Fri 06 Jun 2014 01:01:44 PM JST

* Fri 06 Jun 2014 01:01:44 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:01:44 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:01:44 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:01:44 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:01:44 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:01:44 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:01:44 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:02:54 PM JST
ConfigureWindow

window: WINDOW
value-mask: BITMASK
value-list: LISTofVALUE
Errors: Match, Value, Window
This request changes the configuration of the window. The value-mask and value-list specify which values are to be given. The possible values are:

Attribute	Type
x	INT16
y	INT16
width	CARD16
height	CARD16
border-width	CARD16
sibling	WINDOW
stack-mode	 { Above, Below, TopIf, BottomIf, Opposite }
The x and y coordinates are relative to the parent's origin and specify the position of the upper-left outer corner of the window. The width and height specify the inside size, not including the border, and must be nonzero (or a Value error results). Those values not specified are taken from the existing geometry of the window. Note that changing just the border-width leaves the outer-left corner of the window in a fixed position but moves the absolute position of the window's origin. It is a Match error to attempt to make the border-width of an InputOnly window nonzero.

If the override-redirect attribute of the window is False and some other client has selected SubstructureRedirect on the parent, a ConfigureRequest event is generated, and no further processing is performed. Otherwise, the following is performed:

If some other client has selected ResizeRedirect on the window and the inside width or height of the window is being changed, a ResizeRequest event is generated, and the current inside width and height are used instead. Note that the override-redirect attribute of the window has no effect on ResizeRedirect and that SubstructureRedirect on the parent has precedence over ResizeRedirect on the window.

The geometry of the window is changed as specified, the window is restacked among siblings, and a ConfigureNotify event is generated if the state of the window actually changes. If the inside width or height of the window has actually changed, then children of the window are affected, according to their win-gravity. Exposure processing is performed on formerly obscured windows (including the window itself and its inferiors if regions of them were obscured but now are not). Exposure processing is also performed on any new regions of the window (as a result of increasing the width or height) and on any regions where window contents are lost.

If the inside width or height of a window is not changed but the window is moved or its border is changed, then the contents of the window are not lost but move with the window. Changing the inside width or height of the window causes its contents to be moved or lost, depending on the bit-gravity of the window. It also causes children to be reconfigured, depending on their win-gravity. For a change of width and height of W and H, we define the [x, y] pairs as:

Direction	Deltas
NorthWest	[0, 0]
North	[W/2, 0]
NorthEast	[W, 0]
West	[0, H/2]
Center	[W/2, H/2]
East	[W, H/2]
SouthWest	[0, H]
South	[W/2, H]
SouthEast	[W, H]
When a window with one of these bit-gravities is resized, the corresponding pair defines the change in position of each pixel in the window. When a window with one of these win-gravities has its parent window resized, the corresponding pair defines the change in position of the window within the parent. This repositioning generates a GravityNotify event. GravityNotify events are generated after the ConfigureNotify event is generated.

A gravity of Static indicates that the contents or origin should not move relative to the origin of the root window. If the change in size of the window is coupled with a change in position of [X, Y], then for bit-gravity the change in position of each pixel is [-X, -Y] and for win-gravity the change in position of a child when its parent is so resized is [-X, -Y]. Note that Static gravity still only takes effect when the width or height of the window is changed, not when the window is simply moved.

A bit-gravity of Forget indicates that the window contents are always discarded after a size change, even if backing-store or save-under has been requested. The window is tiled with its background (except, if no background is defined, the existing screen contents are not altered) and zero or more exposure events are generated.

The contents and borders of inferiors are not affected by their parent's bit-gravity. A server is permitted to ignore the specified bit-gravity and use Forget instead.

A win-gravity of Unmap is like NorthWest, but the child is also unmapped when the parent is resized, and an UnmapNotify event is generated. UnmapNotify events are generated after the ConfigureNotify event is generated.

If a sibling and a stack-mode are specified, the window is restacked as follows:

Above	 The window is placed just above the sibling.
Below	 The window is placed just below the sibling.
TopIf	 If the sibling occludes the window, then the window is placed at the top of the stack.
BottomIf	 If the window occludes the sibling, then the window is placed at the bottom of the stack.
Opposite	 If the sibling occludes the window, then the window is placed at the top of the stack. Otherwise, if the window occludes the sibling, then the window is placed at the bottom of the stack.
If a stack-mode is specified but no sibling is specified, the window is restacked as follows:

Above	 The window is placed at the top of the stack.
Below	 The window is placed at the bottom of the stack.
TopIf	 If any sibling occludes the window, then the window is placed at the top of the stack.
BottomIf	 If the window occludes any sibling, then the window is placed at the bottom of the stack.
Opposite	 If any sibling occludes the window, then the window is placed at the top of the stack. Otherwise, if the window occludes any sibling, then the window is placed at the bottom of the stack.
It is a Match error if a sibling is specified without a stack-mode or if the window is not actually a sibling.

Note that the computations for BottomIf, TopIf, and Opposite are performed with respect to the window's final geometry (as controlled by the other arguments to the request), not to its initial geometry.

Attempts to configure a root window have no effect.


* Fri 06 Jun 2014 01:03:44 PM JST
Errors: Match, Value, Window
* Fri 06 Jun 2014 01:03:54 PM JST
Errors: 
* Fri 06 Jun 2014 01:04:40 PM JST
CirculateWindow

window: WINDOW
direction: { RaiseLowest, LowerHighest}
Errors: Value, Window
If some other client has selected SubstructureRedirect on the window, then a CirculateRequest event is generated, and no further processing is performed. Otherwise, the following is performed, and then a CirculateNotify event is generated if the window is actually restacked.

For RaiseLowest, CirculateWindow raises the lowest mapped child (if any) that is occluded by another child to the top of the stack. For LowerHighest, CirculateWindow lowers the highest mapped child (if any) that occludes another child to the bottom of the stack. Exposure processing is performed on formerly obscured windows.

* Fri 06 Jun 2014 01:04:43 PM JST
CirculateWindow

window: WINDOW
direction: { RaiseLowest, LowerHighest}
Errors: Value, Window
If some other client has selected SubstructureRedirect on the window, then a CirculateRequest event is generated, and no further processing is performed. Otherwise, the following is performed, and then a CirculateNotify event is generated if the window is actually restacked.

For RaiseLowest, CirculateWindow raises the lowest mapped child (if any) that is occluded by another child to the top of the stack. For LowerHighest, CirculateWindow lowers the highest mapped child (if any) that occludes another child to the bottom of the stack. Exposure processing is performed on formerly obscured windows.

* Fri 06 Jun 2014 01:05:21 PM JST
SUMMARY
* Fri 06 Jun 2014 01:05:41 PM JST
Errors: Value, Window
* Fri 06 Jun 2014 01:05:53 PM JST
Errors: 
* Fri 06 Jun 2014 01:06:02 PM JST

* Fri 06 Jun 2014 01:06:02 PM JST

* Fri 06 Jun 2014 01:06:02 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:06:02 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:06:02 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:06:02 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:06:02 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:06:03 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:06:03 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:06:05 PM JST

* Fri 06 Jun 2014 01:06:05 PM JST

* Fri 06 Jun 2014 01:06:06 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:06:06 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:06:06 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:06:06 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:06:06 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:06:06 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:06:06 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:06:10 PM JST
VoidCookie
* Fri 06 Jun 2014 01:06:34 PM JST
GetGeometry

drawable: DRAWABLE
▶
root: WINDOW
depth: CARD8
x, y: INT16
width, height, border-width: CARD16
Errors: Drawable
This request returns the root and current geometry of the drawable. The depth is the number of bits per pixel for the object. The x, y, and border-width will always be zero for pixmaps. For a window, the x and y coordinates specify the upper-left outer corner of the window relative to its parent's origin, and the width and height specify the inside size, not including the border.

It is legal to pass an InputOnly window as a drawable to this request.

* Fri 06 Jun 2014 01:06:36 PM JST
GetGeometry

drawable: DRAWABLE
▶
root: WINDOW
depth: CARD8
x, y: INT16
width, height, border-width: CARD16
Errors: Drawable
This request returns the root and current geometry of the drawable. The depth is the number of bits per pixel for the object. The x, y, and border-width will always be zero for pixmaps. For a window, the x and y coordinates specify the upper-left outer corner of the window relative to its parent's origin, and the width and height specify the inside size, not including the border.

It is legal to pass an InputOnly window as a drawable to this request.

* Fri 06 Jun 2014 01:07:22 PM JST

* Fri 06 Jun 2014 01:07:22 PM JST

* Fri 06 Jun 2014 01:07:23 PM JST
        """

* Fri 06 Jun 2014 01:07:23 PM JST
        """

* Fri 06 Jun 2014 01:07:23 PM JST
        """
        """

* Fri 06 Jun 2014 01:07:25 PM JST
SUMMARY
* Fri 06 Jun 2014 01:08:04 PM JST
WrapGetGeometryCookie
* Fri 06 Jun 2014 01:08:17 PM JST
Drawable
* Fri 06 Jun 2014 01:08:36 PM JST
GetGeometry

drawable: DRAWABLE
▶
root: WINDOW
depth: CARD8
x, y: INT16
width, height, border-width: CARD16
Errors: Drawable
This request returns the root and current geometry of the drawable. The depth is the number of bits per pixel for the object. The x, y, and border-width will always be zero for pixmaps. For a window, the x and y coordinates specify the upper-left outer corner of the window relative to its parent's origin, and the width and height specify the inside size, not including the border.

It is legal to pass an InputOnly window as a drawable to this request.


* Fri 06 Jun 2014 01:09:00 PM JST

* Fri 06 Jun 2014 01:09:00 PM JST

* Fri 06 Jun 2014 01:09:00 PM JST
▶

* Fri 06 Jun 2014 01:09:44 PM JST
QueryTree

window: WINDOW
▶
root: WINDOW
parent: WINDOW or None
children: LISTofWINDOW
Errors: Window
This request returns the root, the parent, and the children of the window. The children are listed in bottom-to-top stacking order.


* Fri 06 Jun 2014 01:09:47 PM JST

* Fri 06 Jun 2014 01:09:47 PM JST

* Fri 06 Jun 2014 01:09:47 PM JST
▶

* Fri 06 Jun 2014 01:10:15 PM JST
QueryTree
* Fri 06 Jun 2014 01:11:03 PM JST
WrapQueryTreeCookie
* Fri 06 Jun 2014 01:11:38 PM JST
InternAtom
* Fri 06 Jun 2014 01:12:14 PM JST
InternAtom
* Fri 06 Jun 2014 01:12:34 PM JST
WrapInternAtomCookie
* Fri 06 Jun 2014 01:12:42 PM JST
InternAtom

name: STRING8
only-if-exists: BOOL
▶
atom: ATOM or None
Errors: Alloc, Value
This request returns the atom for the given name. If only-if-exists is False, then the atom is created if it does not exist. The string should use the ISO Latin-1 encoding. Uppercase and lowercase matter.

The lifetime of an atom is not tied to the interning client. Atoms remain defined until server reset (see section 10).


* Fri 06 Jun 2014 01:12:50 PM JST

* Fri 06 Jun 2014 01:12:50 PM JST

* Fri 06 Jun 2014 01:12:50 PM JST
▶

* Fri 06 Jun 2014 01:13:02 PM JST
Alloc, Value
* Fri 06 Jun 2014 01:14:36 PM JST
Request InternAtom X protocol.
* Fri 06 Jun 2014 01:14:42 PM JST
InternAtom
* Fri 06 Jun 2014 01:15:14 PM JST
GetAtomName
* Fri 06 Jun 2014 01:15:48 PM JST
WrapGetAtomNameCookie
* Fri 06 Jun 2014 01:16:08 PM JST
Atom
* Fri 06 Jun 2014 01:16:35 PM JST
GetAtomName

atom: ATOM
▶
name: STRING8
Errors: Atom
This request returns the name for the given atom.


* Fri 06 Jun 2014 01:16:43 PM JST

* Fri 06 Jun 2014 01:16:44 PM JST

* Fri 06 Jun 2014 01:16:44 PM JST
▶

* Fri 06 Jun 2014 01:17:51 PM JST
ChangeProperty
* Fri 06 Jun 2014 01:18:13 PM JST
VoidCookie
* Fri 06 Jun 2014 01:18:27 PM JST
Alloc, Atom, Match, Value, Window
* Fri 06 Jun 2014 01:19:16 PM JST
ChangeProperty

window: WINDOW
property, type: ATOM
format: {8, 16, 32}
mode: { Replace, Prepend, Append}
data: LISTofINT8 or LISTofINT16 or LISTofINT32
Errors: Alloc, Atom, Match, Value, Window
This request alters the property for the specified window. The type is uninterpreted by the server. The format specifies whether the data should be viewed as a list of 8-bit, 16-bit, or 32-bit quantities so that the server can correctly byte-swap as necessary.

If the mode is Replace, the previous property value is discarded. If the mode is Prepend or Append, then the type and format must match the existing property value (or a Match error results). If the property is undefined, it is treated as defined with the correct type and format with zero-length data. For Prepend, the data is tacked on to the beginning of the existing data, and for Append, it is tacked on to the end of the existing data.

This request generates a PropertyNotify event on the window.

The lifetime of a property is not tied to the storing client. Properties remain until explicitly deleted, until the window is destroyed, or until server reset (see section 10).

The maximum size of a property is server-dependent and may vary dynamically.


* Fri 06 Jun 2014 01:20:49 PM JST
DeleteProperty
* Fri 06 Jun 2014 01:21:05 PM JST

* Fri 06 Jun 2014 01:21:05 PM JST

* Fri 06 Jun 2014 01:21:05 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:21:07 PM JST

* Fri 06 Jun 2014 01:21:07 PM JST

* Fri 06 Jun 2014 01:21:07 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:21:07 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:21:07 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:21:07 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:21:07 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:21:07 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:21:07 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:21:09 PM JST

* Fri 06 Jun 2014 01:21:09 PM JST

* Fri 06 Jun 2014 01:21:09 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:21:09 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:21:10 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:21:10 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:21:10 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:21:10 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:21:10 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:21:14 PM JST
VoidCookie
* Fri 06 Jun 2014 01:21:53 PM JST
Atom, Window
* Fri 06 Jun 2014 01:22:12 PM JST
DeleteProperty

window: WINDOW
property: ATOM
Errors: Atom, Window
This request deletes the property from the specified window if the property exists and generates a PropertyNotify event on the window unless the property does not exist.


* Fri 06 Jun 2014 01:22:57 PM JST
GetProperty

window: WINDOW
property: ATOM
type: ATOM or AnyPropertyType
long-offset, long-length: CARD32
delete: BOOL
▶
type: ATOM or None
format: {0, 8, 16, 32}
bytes-after: CARD32
value: LISTofINT8 or LISTofINT16 or LISTofINT32
Errors: Atom, Value, Window
If the specified property does not exist for the specified window, then the return type is None, the format and bytes-after are zero, and the value is empty. The delete argument is ignored in this case. If the specified property exists but its type does not match the specified type, then the return type is the actual type of the property, the format is the actual format of the property (never zero), the bytes-after is the length of the property in bytes (even if the format is 16 or 32), and the value is empty. The delete argument is ignored in this case. If the specified property exists and either AnyPropertyType is specified or the specified type matches the actual type of the property, then the return type is the actual type of the property, the format is the actual format of the property (never zero), and the bytes-after and value are as follows, given:

	N = actual length of the stored property in bytes
	    (even if the format is 16 or 32)
	I = 4 * long-offset
	T = N - I
	L = MINIMUM(T, 4 * long-length)
	A = N - (I + L)
The returned value starts at byte index I in the property (indexing from 0), and its length in bytes is L. However, it is a Value error if long-offset is given such that L is negative. The value of bytes-after is A, giving the number of trailing unread bytes in the stored property. If delete is True and the bytes-after is zero, the property is also deleted from the window, and a PropertyNotify event is generated on the window.


* Fri 06 Jun 2014 01:23:08 PM JST

* Fri 06 Jun 2014 01:23:08 PM JST

* Fri 06 Jun 2014 01:23:08 PM JST
▶

* Fri 06 Jun 2014 01:23:36 PM JST
Atom, Value, Window
* Fri 06 Jun 2014 01:24:21 PM JST
GetProperty
* Fri 06 Jun 2014 01:24:56 PM JST
GetPropertyCookie
* Fri 06 Jun 2014 01:25:08 PM JST
Atom, Value, Window
* Fri 06 Jun 2014 01:25:46 PM JST
        @Return:
        GetPropertyCookie

        @Error:
        BadAtom, BadValue, BadWindow

* Fri 06 Jun 2014 01:26:01 PM JST

* Fri 06 Jun 2014 01:26:01 PM JST

* Fri 06 Jun 2014 01:26:01 PM JST
        - `self`:

* Fri 06 Jun 2014 01:26:26 PM JST
RotateProperties

window: WINDOW
delta: INT16
properties: LISTofATOM
Errors: Atom, Match, Window
If the property names in the list are viewed as being numbered starting from zero, and there are N property names in the list, then the value associated with property name I becomes the value associated with property name (I + delta) mod N, for all I from zero to N - 1. The effect is to rotate the states by delta places around the virtual ring of property names (right for positive delta, left for negative delta).

If delta mod N is nonzero, a PropertyNotify event is generated for each property in the order listed.

If an atom occurs more than once in the list or no property with that name is defined for the window, a Match error is generated. If an Atom or Match error is generated, no properties are changed.


* Fri 06 Jun 2014 01:26:50 PM JST
RotateProperties
* Fri 06 Jun 2014 01:27:14 PM JST
VoidCookie
* Fri 06 Jun 2014 01:27:41 PM JST
Atom, Match, Window
* Fri 06 Jun 2014 01:28:21 PM JST
SUMMARY
* Fri 06 Jun 2014 01:28:24 PM JST
ListProperties
* Fri 06 Jun 2014 01:28:35 PM JST
WrapListPropertyCookie
* Fri 06 Jun 2014 01:28:51 PM JST
Window
* Fri 06 Jun 2014 01:29:07 PM JST
ListProperties

window: WINDOW
▶
atoms: LISTofATOM
Errors: Window
This request returns the atoms of properties currently defined on the window.

* Fri 06 Jun 2014 01:29:11 PM JST

* Fri 06 Jun 2014 01:29:11 PM JST

* Fri 06 Jun 2014 01:29:11 PM JST
▶

* Fri 06 Jun 2014 01:29:27 PM JST

* Fri 06 Jun 2014 01:29:27 PM JST

* Fri 06 Jun 2014 01:29:27 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:29:27 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:29:27 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:29:27 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:29:28 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:29:28 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:29:28 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:29:30 PM JST

* Fri 06 Jun 2014 01:29:30 PM JST

* Fri 06 Jun 2014 01:29:30 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:29:31 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:29:31 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:29:31 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:29:31 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:29:31 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:29:31 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:30:11 PM JST
SetSelectionOwner

selection: ATOM
owner: WINDOW or None
time: TIMESTAMP or CurrentTime
Errors: Atom, Window
This request changes the owner, owner window, and last-change time of the specified selection. This request has no effect if the specified time is earlier than the current last-change time of the specified selection or is later than the current server time. Otherwise, the last-change time is set to the specified time with CurrentTime replaced by the current server time. If the owner window is specified as None, then the owner of the selection becomes None (that is, no owner). Otherwise, the owner of the selection becomes the client executing the request. If the new owner (whether a client or None) is not the same as the current owner and the current owner is not None, then the current owner is sent a SelectionClear event.

If the client that is the owner of a selection is later terminated (that is, its connection is closed) or if the owner window it has specified in the request is later destroyed, then the owner of the selection automatically reverts to None, but the last-change time is not affected.

The selection atom is uninterpreted by the server. The owner window is returned by the GetSelectionOwner request and is reported in SelectionRequest and SelectionClear events.

Selections are global to the server.

GetSelectionOwner

selection: ATOM
▶
owner: WINDOW or None
Errors: Atom
This request returns the current owner window of the specified selection, if any. If None is returned, then there is no owner for the selection.

ConvertSelection

selection, target: ATOM
property: ATOM or None
requestor: WINDOW
time: TIMESTAMP or CurrentTime
Errors: Atom, Window
If the specified selection has an owner, the server sends a SelectionRequest event to that owner. If no owner for the specified selection exists, the server generates a SelectionNotify event to the requestor with property None. The arguments are passed on unchanged in either of the events.

SendEvent

destination: WINDOW or PointerWindow or InputFocus
propagate: BOOL
event-mask: SETofEVENT
event: <normal-event-format>
Errors: Value, Window
If PointerWindow is specified, destination is replaced with the window that the pointer is in. If InputFocus is specified and the focus window contains the pointer, destination is replaced with the window that the pointer is in. Otherwise, destination is replaced with the focus window.

If the event-mask is the empty set, then the event is sent to the client that created the destination window. If that client no longer exists, no event is sent.

If propagate is False, then the event is sent to every client selecting on destination any of the event types in event-mask.

If propagate is True and no clients have selected on destination any of the event types in event-mask, then destination is replaced with the closest ancestor of destination for which some client has selected a type in event-mask and no intervening window has that type in its do-not-propagate-mask. If no such window exists or if the window is an ancestor of the focus window and InputFocus was originally specified as the destination, then the event is not sent to any clients. Otherwise, the event is reported to every client selecting on the final destination any of the types specified in event-mask.

The event code must be one of the core events or one of the events defined by an extension (or a Value error results) so that the server can correctly byte-swap the contents as necessary. The contents of the event are otherwise unaltered and unchecked by the server except to force on the most significant bit of the event code and to set the sequence number in the event correctly.

Active grabs are ignored for this request.

GrabPointer

grab-window: WINDOW
owner-events: BOOL
event-mask: SETofPOINTEREVENT
pointer-mode, keyboard-mode: { Synchronous, Asynchronous}
confine-to: WINDOW or None
cursor: CURSOR or None
time: TIMESTAMP or CurrentTime
▶
status: { Success, AlreadyGrabbed, Frozen, InvalidTime, NotViewable}
Errors: Cursor, Value, Window
This request actively grabs control of the pointer. Further pointer events are only reported to the grabbing client. The request overrides any active pointer grab by this client.

If owner-events is False, all generated pointer events are reported with respect to grab-window and are only reported if selected by event-mask. If owner-events is True and a generated pointer event would normally be reported to this client, it is reported normally. Otherwise, the event is reported with respect to the grab-window and is only reported if selected by event-mask. For either value of owner-events, unreported events are simply discarded.

If pointer-mode is Asynchronous, pointer event processing continues normally. If the pointer is currently frozen by this client, then processing of pointer events is resumed. If pointer-mode is Synchronous, the state of the pointer (as seen by means of the protocol) appears to freeze, and no further pointer events are generated by the server until the grabbing client issues a releasing AllowEvents request or until the pointer grab is released. Actual pointer changes are not lost while the pointer is frozen. They are simply queued for later processing.

If keyboard-mode is Asynchronous, keyboard event processing is unaffected by activation of the grab. If keyboard-mode is Synchronous, the state of the keyboard (as seen by means of the protocol) appears to freeze, and no further keyboard events are generated by the server until the grabbing client issues a releasing AllowEvents request or until the pointer grab is released. Actual keyboard changes are not lost while the keyboard is frozen. They are simply queued for later processing.

If a cursor is specified, then it is displayed regardless of what window the pointer is in. If no cursor is specified, then when the pointer is in grab-window or one of its subwindows, the normal cursor for that window is displayed. Otherwise, the cursor for grab-window is displayed.

If a confine-to window is specified, then the pointer will be restricted to stay contained in that window. The confine-to window need have no relationship to the grab-window. If the pointer is not initially in the confine-to window, then it is warped automatically to the closest edge (and enter/leave events are generated normally) just before the grab activates. If the confine-to window is subsequently reconfigured, the pointer will be warped automatically as necessary to keep it contained in the window.

This request generates EnterNotify and LeaveNotify events.

The request fails with status AlreadyGrabbed if the pointer is actively grabbed by some other client. The request fails with status Frozen if the pointer is frozen by an active grab of another client. The request fails with status NotViewable if grab-window or confine-to window is not viewable or if the confine-to window lies completely outside the boundaries of the root window. The request fails with status InvalidTime if the specified time is earlier than the last-pointer-grab time or later than the current server time. Otherwise, the last-pointer-grab time is set to the specified time, with CurrentTime replaced by the current server time.

UngrabPointer

time: TIMESTAMP or CurrentTime
This request releases the pointer if this client has it actively grabbed (from either GrabPointer or GrabButton or from a normal button press) and releases any queued events. The request has no effect if the specified time is earlier than the last-pointer-grab time or is later than the current server time.

This request generates EnterNotify and LeaveNotify events.

An UngrabPointer request is performed automatically if the event window or confine-to window for an active pointer grab becomes not viewable or if window reconfiguration causes the confine-to window to lie completely outside the boundaries of the root window.

GrabButton

modifiers: SETofKEYMASK or AnyModifier
button: BUTTON or AnyButton
grab-window: WINDOW
owner-events: BOOL
event-mask: SETofPOINTEREVENT
pointer-mode, keyboard-mode: { Synchronous, Asynchronous}
confine-to: WINDOW or None
cursor: CURSOR or None
Errors: Access, Cursor, Value, Window
This request establishes a passive grab. In the future, the pointer is actively grabbed as described in GrabPointer, the last-pointer-grab time is set to the time at which the button was pressed (as transmitted in the ButtonPress event), and the ButtonPress event is reported if all of the following conditions are true: The pointer is not grabbed and the specified button is logically pressed when the specified modifier keys are logically down, and no other buttons or modifier keys are logically down. The grab-window contains the pointer. The confine-to window (if any) is viewable. A passive grab on the same button/key combination does not exist on any ancestor of grab-window.

The interpretation of the remaining arguments is the same as for GrabPointer. The active grab is terminated automatically when the logical state of the pointer has all buttons released, independent of the logical state of modifier keys. Note that the logical state of a device (as seen by means of the protocol) may lag the physical state if device event processing is frozen.

This request overrides all previous passive grabs by the same client on the same button/key combinations on the same window. A modifier of AnyModifier is equivalent to issuing the request for all possible modifier combinations (including the combination of no modifiers). It is not required that all specified modifiers have currently assigned keycodes. A button of AnyButton is equivalent to issuing the request for all possible buttons. Otherwise, it is not required that the button specified currently be assigned to a physical button.

An Access error is generated if some other client has already issued a GrabButton request with the same button/key combination on the same window. When using AnyModifier or AnyButton, the request fails completely (no grabs are established), and an Access error is generated if there is a conflicting grab for any combination. The request has no effect on an active grab.

UngrabButton

modifiers: SETofKEYMASK or AnyModifier
button: BUTTON or AnyButton
grab-window: WINDOW
Errors: Value, Window
This request releases the passive button/key combination on the specified window if it was grabbed by this client. A modifiers argument of AnyModifier is equivalent to issuing the request for all possible modifier combinations (including the combination of no modifiers). A button of AnyButton is equivalent to issuing the request for all possible buttons. The request has no effect on an active grab.

ChangeActivePointerGrab

event-mask: SETofPOINTEREVENT
cursor: CURSOR or None
time: TIMESTAMP or CurrentTime
Errors: Cursor, Value
This request changes the specified dynamic parameters if the pointer is actively grabbed by the client and the specified time is no earlier than the last-pointer-grab time and no later than the current server time. The interpretation of event-mask and cursor are the same as in GrabPointer. This request has no effect on the parameters of any passive grabs established with GrabButton.

GrabKeyboard

grab-window: WINDOW
owner-events: BOOL
pointer-mode, keyboard-mode: { Synchronous, Asynchronous}
time: TIMESTAMP or CurrentTime
▶
status: { Success, AlreadyGrabbed, Frozen, InvalidTime, NotViewable}
Errors: Value, Window
This request actively grabs control of the keyboard. Further key events are reported only to the grabbing client. This request overrides any active keyboard grab by this client.

If owner-events is False, all generated key events are reported with respect to grab-window. If owner-events is True and if a generated key event would normally be reported to this client, it is reported normally. Otherwise, the event is reported with respect to the grab-window. Both KeyPress and KeyRelease events are always reported, independent of any event selection made by the client.

If keyboard-mode is Asynchronous, keyboard event processing continues normally. If the keyboard is currently frozen by this client, then processing of keyboard events is resumed. If keyboard-mode is Synchronous, the state of the keyboard (as seen by means of the protocol) appears to freeze. No further keyboard events are generated by the server until the grabbing client issues a releasing AllowEvents request or until the keyboard grab is released. Actual keyboard changes are not lost while the keyboard is frozen. They are simply queued for later processing.

If pointer-mode is Asynchronous, pointer event processing is unaffected by activation of the grab. If pointer-mode is Synchronous, the state of the pointer (as seen by means of the protocol) appears to freeze. No further pointer events are generated by the server until the grabbing client issues a releasing AllowEvents request or until the keyboard grab is released. Actual pointer changes are not lost while the pointer is frozen. They are simply queued for later processing.

This request generates FocusIn and FocusOut events.

The request fails with status AlreadyGrabbed if the keyboard is actively grabbed by some other client. The request fails with status Frozen if the keyboard is frozen by an active grab of another client. The request fails with status NotViewable if grab-window is not viewable. The request fails with status InvalidTime if the specified time is earlier than the last-keyboard-grab time or later than the current server time. Otherwise, the last-keyboard-grab time is set to the specified time with CurrentTime replaced by the current server time.

UngrabKeyboard

time: TIMESTAMP or CurrentTime
This request releases the keyboard if this client has it actively grabbed (as a result of either GrabKeyboard or GrabKey) and releases any queued events. The request has no effect if the specified time is earlier than the last-keyboard-grab time or is later than the current server time.

This request generates FocusIn and FocusOut events.

An UngrabKeyboard is performed automatically if the event window for an active keyboard grab becomes not viewable.

GrabKey

key: KEYCODE or AnyKey
modifiers: SETofKEYMASK or AnyModifier
grab-window: WINDOW
owner-events: BOOL
pointer-mode, keyboard-mode: { Synchronous, Asynchronous}
Errors: Access, Value, Window
This request establishes a passive grab on the keyboard. In the future, the keyboard is actively grabbed as described in GrabKeyboard, the last-keyboard-grab time is set to the time at which the key was pressed (as transmitted in the KeyPress event), and the KeyPress event is reported if all of the following conditions are true: The keyboard is not grabbed and the specified key (which can itself be a modifier key) is logically pressed when the specified modifier keys are logically down, and no other modifier keys are logically down. Either the grab-window is an ancestor of (or is) the focus window, or the grab-window is a descendent of the focus window and contains the pointer. A passive grab on the same key combination does not exist on any ancestor of grab-window.

The interpretation of the remaining arguments is the same as for GrabKeyboard. The active grab is terminated automatically when the logical state of the keyboard has the specified key released, independent of the logical state of modifier keys. Note that the logical state of a device (as seen by means of the protocol) may lag the physical state if device event processing is frozen.

This request overrides all previous passive grabs by the same client on the same key combinations on the same window. A modifier of AnyModifier is equivalent to issuing the request for all possible modifier combinations (including the combination of no modifiers). It is not required that all modifiers specified have currently assigned keycodes. A key of AnyKey is equivalent to issuing the request for all possible keycodes. Otherwise, the key must be in the range specified by min-keycode and max-keycode in the connection setup (or a Value error results).

An Access error is generated if some other client has issued a GrabKey with the same key combination on the same window. When using AnyModifier or AnyKey, the request fails completely (no grabs are established), and an Access error is generated if there is a conflicting grab for any combination.

UngrabKey

key: KEYCODE or AnyKey
modifiers: SETofKEYMASK or AnyModifier
grab-window: WINDOW
Errors: Value, Window
This request releases the key combination on the specified window if it was grabbed by this client. A modifiers argument of AnyModifier is equivalent to issuing the request for all possible modifier combinations (including the combination of no modifiers). A key of AnyKey is equivalent to issuing the request for all possible keycodes. This request has no effect on an active grab.
* Fri 06 Jun 2014 01:30:33 PM JST
SetSelectionOwner
* Fri 06 Jun 2014 01:30:45 PM JST

* Fri 06 Jun 2014 01:30:45 PM JST

* Fri 06 Jun 2014 01:30:45 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:30:45 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:30:46 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:30:46 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:30:46 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:30:46 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:30:46 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:30:48 PM JST

* Fri 06 Jun 2014 01:30:48 PM JST

* Fri 06 Jun 2014 01:30:48 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:30:49 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:30:49 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:30:49 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:30:49 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:30:49 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:30:49 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:30:52 PM JST
VoidCookie
* Fri 06 Jun 2014 01:31:08 PM JST
Atom, Window
* Fri 06 Jun 2014 01:31:41 PM JST
SetSelectionOwner

selection: ATOM
owner: WINDOW or None
time: TIMESTAMP or CurrentTime
Errors: Atom, Window
This request changes the owner, owner window, and last-change time of the specified selection. This request has no effect if the specified time is earlier than the current last-change time of the specified selection or is later than the current server time. Otherwise, the last-change time is set to the specified time with CurrentTime replaced by the current server time. If the owner window is specified as None, then the owner of the selection becomes None (that is, no owner). Otherwise, the owner of the selection becomes the client executing the request. If the new owner (whether a client or None) is not the same as the current owner and the current owner is not None, then the current owner is sent a SelectionClear event.

If the client that is the owner of a selection is later terminated (that is, its connection is closed) or if the owner window it has specified in the request is later destroyed, then the owner of the selection automatically reverts to None, but the last-change time is not affected.

The selection atom is uninterpreted by the server. The owner window is returned by the GetSelectionOwner request and is reported in SelectionRequest and SelectionClear events.

Selections are global to the server.


* Fri 06 Jun 2014 01:31:51 PM JST
This request changes the owner, owner window, and last-change time of the specified selection. This request has no effect if the specified time is earlier than the current last-change time of the specified selection or is later than the current server time. Otherwise, the last-change time is set to the specified time with CurrentTime replaced by the current server time. If the owner window is specified as None, then the owner of the selection becomes None (that is, no owner). Otherwise, the owner of the selection becomes the client executing the request. If the new owner (whether a client or None) is not the same as the current owner and the current owner is not None, then the current owner is sent a SelectionClear event.

If the client that is the owner of a selection is later terminated (that is, its connection is closed) or if the owner window it has specified in the request is later destroyed, then the owner of the selection automatically reverts to None, but the last-change time is not affected.

The selection atom is uninterpreted by the server. The owner window is returned by the GetSelectionOwner request and is reported in SelectionRequest and SelectionClear events.

* Fri 06 Jun 2014 01:32:38 PM JST
GetSelectionOwner
* Fri 06 Jun 2014 01:33:00 PM JST

* Fri 06 Jun 2014 01:33:00 PM JST

* Fri 06 Jun 2014 01:33:00 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:33:00 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:33:00 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:33:00 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:33:00 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:33:00 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:33:00 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:33:03 PM JST

* Fri 06 Jun 2014 01:33:03 PM JST

* Fri 06 Jun 2014 01:33:03 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:33:03 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:33:03 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:33:03 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:33:03 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:33:03 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:33:03 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:33:07 PM JST
GetSelectionOwnerCookie
* Fri 06 Jun 2014 01:33:22 PM JST
Atom
* Fri 06 Jun 2014 01:33:35 PM JST
GetSelectionOwner
* Fri 06 Jun 2014 01:33:49 PM JST
GetSelectionOwner

selection: ATOM
▶
owner: WINDOW or None
Errors: Atom
This request returns the current owner window of the specified selection, if any. If None is returned, then there is no owner for the selection.


* Fri 06 Jun 2014 01:33:59 PM JST

* Fri 06 Jun 2014 01:33:59 PM JST

* Fri 06 Jun 2014 01:33:59 PM JST
▶

* Fri 06 Jun 2014 01:34:23 PM JST
ConvertSelection

selection, target: ATOM
property: ATOM or None
requestor: WINDOW
time: TIMESTAMP or CurrentTime
Errors: Atom, Window
If the specified selection has an owner, the server sends a SelectionRequest event to that owner. If no owner for the specified selection exists, the server generates a SelectionNotify event to the requestor with property None. The arguments are passed on unchanged in either of the events.

SendEvent

destination: WINDOW or PointerWindow or InputFocus
propagate: BOOL
event-mask: SETofEVENT
event: <normal-event-format>
Errors: Value, Window
If PointerWindow is specified, destination is replaced with the window that the pointer is in. If InputFocus is specified and the focus window contains the pointer, destination is replaced with the window that the pointer is in. Otherwise, destination is replaced with the focus window.

If the event-mask is the empty set, then the event is sent to the client that created the destination window. If that client no longer exists, no event is sent.

If propagate is False, then the event is sent to every client selecting on destination any of the event types in event-mask.

If propagate is True and no clients have selected on destination any of the event types in event-mask, then destination is replaced with the closest ancestor of destination for which some client has selected a type in event-mask and no intervening window has that type in its do-not-propagate-mask. If no such window exists or if the window is an ancestor of the focus window and InputFocus was originally specified as the destination, then the event is not sent to any clients. Otherwise, the event is reported to every client selecting on the final destination any of the types specified in event-mask.

The event code must be one of the core events or one of the events defined by an extension (or a Value error results) so that the server can correctly byte-swap the contents as necessary. The contents of the event are otherwise unaltered and unchecked by the server except to force on the most significant bit of the event code and to set the sequence number in the event correctly.

Active grabs are ignored for this request.

GrabPointer

grab-window: WINDOW
owner-events: BOOL
event-mask: SETofPOINTEREVENT
pointer-mode, keyboard-mode: { Synchronous, Asynchronous}
confine-to: WINDOW or None
cursor: CURSOR or None
time: TIMESTAMP or CurrentTime
▶
status: { Success, AlreadyGrabbed, Frozen, InvalidTime, NotViewable}
Errors: Cursor, Value, Window
This request actively grabs control of the pointer. Further pointer events are only reported to the grabbing client. The request overrides any active pointer grab by this client.

If owner-events is False, all generated pointer events are reported with respect to grab-window and are only reported if selected by event-mask. If owner-events is True and a generated pointer event would normally be reported to this client, it is reported normally. Otherwise, the event is reported with respect to the grab-window and is only reported if selected by event-mask. For either value of owner-events, unreported events are simply discarded.

If pointer-mode is Asynchronous, pointer event processing continues normally. If the pointer is currently frozen by this client, then processing of pointer events is resumed. If pointer-mode is Synchronous, the state of the pointer (as seen by means of the protocol) appears to freeze, and no further pointer events are generated by the server until the grabbing client issues a releasing AllowEvents request or until the pointer grab is released. Actual pointer changes are not lost while the pointer is frozen. They are simply queued for later processing.

If keyboard-mode is Asynchronous, keyboard event processing is unaffected by activation of the grab. If keyboard-mode is Synchronous, the state of the keyboard (as seen by means of the protocol) appears to freeze, and no further keyboard events are generated by the server until the grabbing client issues a releasing AllowEvents request or until the pointer grab is released. Actual keyboard changes are not lost while the keyboard is frozen. They are simply queued for later processing.

If a cursor is specified, then it is displayed regardless of what window the pointer is in. If no cursor is specified, then when the pointer is in grab-window or one of its subwindows, the normal cursor for that window is displayed. Otherwise, the cursor for grab-window is displayed.

If a confine-to window is specified, then the pointer will be restricted to stay contained in that window. The confine-to window need have no relationship to the grab-window. If the pointer is not initially in the confine-to window, then it is warped automatically to the closest edge (and enter/leave events are generated normally) just before the grab activates. If the confine-to window is subsequently reconfigured, the pointer will be warped automatically as necessary to keep it contained in the window.

This request generates EnterNotify and LeaveNotify events.

The request fails with status AlreadyGrabbed if the pointer is actively grabbed by some other client. The request fails with status Frozen if the pointer is frozen by an active grab of another client. The request fails with status NotViewable if grab-window or confine-to window is not viewable or if the confine-to window lies completely outside the boundaries of the root window. The request fails with status InvalidTime if the specified time is earlier than the last-pointer-grab time or later than the current server time. Otherwise, the last-pointer-grab time is set to the specified time, with CurrentTime replaced by the current server time.

UngrabPointer

time: TIMESTAMP or CurrentTime
This request releases the pointer if this client has it actively grabbed (from either GrabPointer or GrabButton or from a normal button press) and releases any queued events. The request has no effect if the specified time is earlier than the last-pointer-grab time or is later than the current server time.

This request generates EnterNotify and LeaveNotify events.

An UngrabPointer request is performed automatically if the event window or confine-to window for an active pointer grab becomes not viewable or if window reconfiguration causes the confine-to window to lie completely outside the boundaries of the root window.

GrabButton

modifiers: SETofKEYMASK or AnyModifier
button: BUTTON or AnyButton
grab-window: WINDOW
owner-events: BOOL
event-mask: SETofPOINTEREVENT
pointer-mode, keyboard-mode: { Synchronous, Asynchronous}
confine-to: WINDOW or None
cursor: CURSOR or None
Errors: Access, Cursor, Value, Window
This request establishes a passive grab. In the future, the pointer is actively grabbed as described in GrabPointer, the last-pointer-grab time is set to the time at which the button was pressed (as transmitted in the ButtonPress event), and the ButtonPress event is reported if all of the following conditions are true: The pointer is not grabbed and the specified button is logically pressed when the specified modifier keys are logically down, and no other buttons or modifier keys are logically down. The grab-window contains the pointer. The confine-to window (if any) is viewable. A passive grab on the same button/key combination does not exist on any ancestor of grab-window.

The interpretation of the remaining arguments is the same as for GrabPointer. The active grab is terminated automatically when the logical state of the pointer has all buttons released, independent of the logical state of modifier keys. Note that the logical state of a device (as seen by means of the protocol) may lag the physical state if device event processing is frozen.

This request overrides all previous passive grabs by the same client on the same button/key combinations on the same window. A modifier of AnyModifier is equivalent to issuing the request for all possible modifier combinations (including the combination of no modifiers). It is not required that all specified modifiers have currently assigned keycodes. A button of AnyButton is equivalent to issuing the request for all possible buttons. Otherwise, it is not required that the button specified currently be assigned to a physical button.

An Access error is generated if some other client has already issued a GrabButton request with the same button/key combination on the same window. When using AnyModifier or AnyButton, the request fails completely (no grabs are established), and an Access error is generated if there is a conflicting grab for any combination. The request has no effect on an active grab.

UngrabButton

modifiers: SETofKEYMASK or AnyModifier
button: BUTTON or AnyButton
grab-window: WINDOW
Errors: Value, Window
This request releases the passive button/key combination on the specified window if it was grabbed by this client. A modifiers argument of AnyModifier is equivalent to issuing the request for all possible modifier combinations (including the combination of no modifiers). A button of AnyButton is equivalent to issuing the request for all possible buttons. The request has no effect on an active grab.

ChangeActivePointerGrab

event-mask: SETofPOINTEREVENT
cursor: CURSOR or None
time: TIMESTAMP or CurrentTime
Errors: Cursor, Value
This request changes the specified dynamic parameters if the pointer is actively grabbed by the client and the specified time is no earlier than the last-pointer-grab time and no later than the current server time. The interpretation of event-mask and cursor are the same as in GrabPointer. This request has no effect on the parameters of any passive grabs established with GrabButton.

GrabKeyboard

grab-window: WINDOW
owner-events: BOOL
pointer-mode, keyboard-mode: { Synchronous, Asynchronous}
time: TIMESTAMP or CurrentTime
▶
status: { Success, AlreadyGrabbed, Frozen, InvalidTime, NotViewable}
Errors: Value, Window
This request actively grabs control of the keyboard. Further key events are reported only to the grabbing client. This request overrides any active keyboard grab by this client.

If owner-events is False, all generated key events are reported with respect to grab-window. If owner-events is True and if a generated key event would normally be reported to this client, it is reported normally. Otherwise, the event is reported with respect to the grab-window. Both KeyPress and KeyRelease events are always reported, independent of any event selection made by the client.

If keyboard-mode is Asynchronous, keyboard event processing continues normally. If the keyboard is currently frozen by this client, then processing of keyboard events is resumed. If keyboard-mode is Synchronous, the state of the keyboard (as seen by means of the protocol) appears to freeze. No further keyboard events are generated by the server until the grabbing client issues a releasing AllowEvents request or until the keyboard grab is released. Actual keyboard changes are not lost while the keyboard is frozen. They are simply queued for later processing.

If pointer-mode is Asynchronous, pointer event processing is unaffected by activation of the grab. If pointer-mode is Synchronous, the state of the pointer (as seen by means of the protocol) appears to freeze. No further pointer events are generated by the server until the grabbing client issues a releasing AllowEvents request or until the keyboard grab is released. Actual pointer changes are not lost while the pointer is frozen. They are simply queued for later processing.

This request generates FocusIn and FocusOut events.

The request fails with status AlreadyGrabbed if the keyboard is actively grabbed by some other client. The request fails with status Frozen if the keyboard is frozen by an active grab of another client. The request fails with status NotViewable if grab-window is not viewable. The request fails with status InvalidTime if the specified time is earlier than the last-keyboard-grab time or later than the current server time. Otherwise, the last-keyboard-grab time is set to the specified time with CurrentTime replaced by the current server time.

UngrabKeyboard

time: TIMESTAMP or CurrentTime
This request releases the keyboard if this client has it actively grabbed (as a result of either GrabKeyboard or GrabKey) and releases any queued events. The request has no effect if the specified time is earlier than the last-keyboard-grab time or is later than the current server time.

This request generates FocusIn and FocusOut events.

An UngrabKeyboard is performed automatically if the event window for an active keyboard grab becomes not viewable.

GrabKey

key: KEYCODE or AnyKey
modifiers: SETofKEYMASK or AnyModifier
grab-window: WINDOW
owner-events: BOOL
pointer-mode, keyboard-mode: { Synchronous, Asynchronous}
Errors: Access, Value, Window
This request establishes a passive grab on the keyboard. In the future, the keyboard is actively grabbed as described in GrabKeyboard, the last-keyboard-grab time is set to the time at which the key was pressed (as transmitted in the KeyPress event), and the KeyPress event is reported if all of the following conditions are true: The keyboard is not grabbed and the specified key (which can itself be a modifier key) is logically pressed when the specified modifier keys are logically down, and no other modifier keys are logically down. Either the grab-window is an ancestor of (or is) the focus window, or the grab-window is a descendent of the focus window and contains the pointer. A passive grab on the same key combination does not exist on any ancestor of grab-window.

The interpretation of the remaining arguments is the same as for GrabKeyboard. The active grab is terminated automatically when the logical state of the keyboard has the specified key released, independent of the logical state of modifier keys. Note that the logical state of a device (as seen by means of the protocol) may lag the physical state if device event processing is frozen.

This request overrides all previous passive grabs by the same client on the same key combinations on the same window. A modifier of AnyModifier is equivalent to issuing the request for all possible modifier combinations (including the combination of no modifiers). It is not required that all modifiers specified have currently assigned keycodes. A key of AnyKey is equivalent to issuing the request for all possible keycodes. Otherwise, the key must be in the range specified by min-keycode and max-keycode in the connection setup (or a Value error results).

An Access error is generated if some other client has issued a GrabKey with the same key combination on the same window. When using AnyModifier or AnyKey, the request fails completely (no grabs are established), and an Access error is generated if there is a conflicting grab for any combination.

UngrabKey

key: KEYCODE or AnyKey
modifiers: SETofKEYMASK or AnyModifier
grab-window: WINDOW
Errors: Value, Window
This request releases the key combination on the specified window if it was grabbed by this client. A modifiers argument of AnyModifier is equivalent to issuing the request for all possible modifier combinations (including the combination of no modifiers). A key of AnyKey is equivalent to issuing the request for all possible keycodes. This request has no effect on an active grab.
* Fri 06 Jun 2014 01:36:10 PM JST

* Fri 06 Jun 2014 01:36:10 PM JST

* Fri 06 Jun 2014 01:36:10 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:36:10 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:36:10 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:36:10 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:36:10 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:36:10 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:36:11 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:36:13 PM JST

* Fri 06 Jun 2014 01:36:13 PM JST

* Fri 06 Jun 2014 01:36:13 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:36:13 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:36:13 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:36:13 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:36:13 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:36:13 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:36:13 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:36:34 PM JST
ConvertSelection
* Fri 06 Jun 2014 01:36:42 PM JST
ConvertSelection
* Fri 06 Jun 2014 01:36:50 PM JST
VoidCookie
* Fri 06 Jun 2014 01:37:21 PM JST
Atom, Window
* Fri 06 Jun 2014 01:37:48 PM JST
ConvertSelection

selection, target: ATOM
property: ATOM or None
requestor: WINDOW
time: TIMESTAMP or CurrentTime

Errors: Atom, Window

If the specified selection has an owner, the server sends a SelectionRequest
event to that owner. If no owner for the specified selection exists, the server
generates a SelectionNotify event to the requestor with property None. The
arguments are passed on unchanged in either of the events.

* Fri 06 Jun 2014 01:38:29 PM JST
SendEvent
* Fri 06 Jun 2014 01:38:47 PM JST
VoidCookie
* Fri 06 Jun 2014 01:39:04 PM JST
Value, Window
* Fri 06 Jun 2014 01:39:29 PM JST
SendEvent

destination: WINDOW or PointerWindow or InputFocus
propagate: BOOL
event-mask: SETofEVENT
event: <normal-event-format>
Errors: Value, Window
If PointerWindow is specified, destination is replaced with the window that the
pointer is in. If InputFocus is specified and the focus window contains the
pointer, destination is replaced with the window that the pointer is
in. Otherwise, destination is replaced with the focus window.

If the event-mask is the empty set, then the event is sent to the client that
created the destination window. If that client no longer exists, no event is
sent.

If propagate is False, then the event is sent to every client selecting on
destination any of the event types in event-mask.

If propagate is True and no clients have selected on destination any of the
event types in event-mask, then destination is replaced with the closest
ancestor of destination for which some client has selected a type in event-mask
and no intervening window has that type in its do-not-propagate-mask. If no such
window exists or if the window is an ancestor of the focus window and InputFocus
was originally specified as the destination, then the event is not sent to any
clients. Otherwise, the event is reported to every client selecting on the final
destination any of the types specified in event-mask.

The event code must be one of the core events or one of the events defined by an
extension (or a Value error results) so that the server can correctly byte-swap
the contents as necessary. The contents of the event are otherwise unaltered and
unchecked by the server except to force on the most significant bit of the event
code and to set the sequence number in the event correctly.

Active grabs are ignored for this request.


* Fri 06 Jun 2014 01:40:48 PM JST

* Fri 06 Jun 2014 01:40:48 PM JST

* Fri 06 Jun 2014 01:40:49 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:40:49 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:40:49 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:40:49 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:40:49 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:40:49 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:40:49 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:40:55 PM JST
- [yas] elisp error!:
* Fri 06 Jun 2014 01:41:38 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:42:45 PM JST
        - [yas] elisp error!:
* Fri 06 Jun 2014 01:43:13 PM JST

* Fri 06 Jun 2014 01:43:13 PM JST

* Fri 06 Jun 2014 01:43:13 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:43:14 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:43:14 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:43:14 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:43:14 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:43:14 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:43:14 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:43:44 PM JST
GrabPointer

grab-window: WINDOW
owner-events: BOOL
event-mask: SETofPOINTEREVENT
pointer-mode, keyboard-mode: { Synchronous, Asynchronous}
confine-to: WINDOW or None
cursor: CURSOR or None
time: TIMESTAMP or CurrentTime
▶
status: { Success, AlreadyGrabbed, Frozen, InvalidTime, NotViewable}
Errors: Cursor, Value, Window
This request actively grabs control of the pointer. Further pointer events are
only reported to the grabbing client. The request overrides any active pointer
grab by this client.

If owner-events is False, all generated pointer events are reported with respect
to grab-window and are only reported if selected by event-mask. If owner-events
is True and a generated pointer event would normally be reported to this client,
it is reported normally. Otherwise, the event is reported with respect to the
grab-window and is only reported if selected by event-mask. For either value of
owner-events, unreported events are simply discarded.

If pointer-mode is Asynchronous, pointer event processing continues normally. If
the pointer is currently frozen by this client, then processing of pointer
events is resumed. If pointer-mode is Synchronous, the state of the pointer (as
seen by means of the protocol) appears to freeze, and no further pointer events
are generated by the server until the grabbing client issues a releasing
AllowEvents request or until the pointer grab is released. Actual pointer
changes are not lost while the pointer is frozen. They are simply queued for
later processing.

If keyboard-mode is Asynchronous, keyboard event processing is unaffected by
activation of the grab. If keyboard-mode is Synchronous, the state of the
keyboard (as seen by means of the protocol) appears to freeze, and no further
keyboard events are generated by the server until the grabbing client issues a
releasing AllowEvents request or until the pointer grab is released. Actual
keyboard changes are not lost while the keyboard is frozen. They are simply
queued for later processing.

If a cursor is specified, then it is displayed regardless of what window the
pointer is in. If no cursor is specified, then when the pointer is in
grab-window or one of its subwindows, the normal cursor for that window is
displayed. Otherwise, the cursor for grab-window is displayed.

If a confine-to window is specified, then the pointer will be restricted to stay
contained in that window. The confine-to window need have no relationship to the
grab-window. If the pointer is not initially in the confine-to window, then it
is warped automatically to the closest edge (and enter/leave events are
generated normally) just before the grab activates. If the confine-to window is
subsequently reconfigured, the pointer will be warped automatically as necessary
to keep it contained in the window.

This request generates EnterNotify and LeaveNotify events.

The request fails with status AlreadyGrabbed if the pointer is actively grabbed
by some other client. The request fails with status Frozen if the pointer is
frozen by an active grab of another client. The request fails with status
NotViewable if grab-window or confine-to window is not viewable or if the
confine-to window lies completely outside the boundaries of the root window. The
request fails with status InvalidTime if the specified time is earlier than the
last-pointer-grab time or later than the current server time. Otherwise, the
last-pointer-grab time is set to the specified time, with CurrentTime replaced
by the current server time.


* Fri 06 Jun 2014 01:44:07 PM JST
GrabPointer
* Fri 06 Jun 2014 01:44:23 PM JST
GrabPointerCookie
* Fri 06 Jun 2014 01:50:15 PM JST
Errors: Cursor, Value, Window
* Fri 06 Jun 2014 01:50:19 PM JST
Errors: 
* Fri 06 Jun 2014 01:50:59 PM JST
GrabPointer

grab-window: WINDOW
owner-events: BOOL
event-mask: SETofPOINTEREVENT
pointer-mode, keyboard-mode: { Synchronous, Asynchronous}
confine-to: WINDOW or None
cursor: CURSOR or None
time: TIMESTAMP or CurrentTime
▶
status: { Success, AlreadyGrabbed, Frozen, InvalidTime, NotViewable}
Errors: Cursor, Value, Window
This request actively grabs control of the pointer. Further pointer events are
only reported to the grabbing client. The request overrides any active pointer
grab by this client.

If owner-events is False, all generated pointer events are reported with respect
to grab-window and are only reported if selected by event-mask. If owner-events
is True and a generated pointer event would normally be reported to this client,
it is reported normally. Otherwise, the event is reported with respect to the
grab-window and is only reported if selected by event-mask. For either value of
owner-events, unreported events are simply discarded.

If pointer-mode is Asynchronous, pointer event processing continues normally. If
the pointer is currently frozen by this client, then processing of pointer
events is resumed. If pointer-mode is Synchronous, the state of the pointer (as
seen by means of the protocol) appears to freeze, and no further pointer events
are generated by the server until the grabbing client issues a releasing
AllowEvents request or until the pointer grab is released. Actual pointer
changes are not lost while the pointer is frozen. They are simply queued for
later processing.

If keyboard-mode is Asynchronous, keyboard event processing is unaffected by
activation of the grab. If keyboard-mode is Synchronous, the state of the
keyboard (as seen by means of the protocol) appears to freeze, and no further
keyboard events are generated by the server until the grabbing client issues a
releasing AllowEvents request or until the pointer grab is released. Actual
keyboard changes are not lost while the keyboard is frozen. They are simply
queued for later processing.

If a cursor is specified, then it is displayed regardless of what window the
pointer is in. If no cursor is specified, then when the pointer is in
grab-window or one of its subwindows, the normal cursor for that window is
displayed. Otherwise, the cursor for grab-window is displayed.

If a confine-to window is specified, then the pointer will be restricted to stay
contained in that window. The confine-to window need have no relationship to the
grab-window. If the pointer is not initially in the confine-to window, then it
is warped automatically to the closest edge (and enter/leave events are
generated normally) just before the grab activates. If the confine-to window is
subsequently reconfigured, the pointer will be warped automatically as necessary
to keep it contained in the window.

This request generates EnterNotify and LeaveNotify events.

The request fails with status AlreadyGrabbed if the pointer is actively grabbed
by some other client. The request fails with status Frozen if the pointer is
frozen by an active grab of another client. The request fails with status
NotViewable if grab-window or confine-to window is not viewable or if the
confine-to window lies completely outside the boundaries of the root window. The
request fails with status InvalidTime if the specified time is earlier than the
last-pointer-grab time or later than the current server time. Otherwise, the
last-pointer-grab time is set to the specified time, with CurrentTime replaced
by the current server time.


* Fri 06 Jun 2014 01:51:22 PM JST

* Fri 06 Jun 2014 01:51:22 PM JST

* Fri 06 Jun 2014 01:51:22 PM JST
▶

* Fri 06 Jun 2014 01:51:47 PM JST
Cursor, Value, Window
* Fri 06 Jun 2014 01:52:11 PM JST
UngrabPointer
* Fri 06 Jun 2014 01:52:32 PM JST
VoidCookie
* Fri 06 Jun 2014 01:53:04 PM JST
UngrabPointer

time: TIMESTAMP or CurrentTime
This request releases the pointer if this client has it actively grabbed (from
either GrabPointer or GrabButton or from a normal button press) and releases any
queued events. The request has no effect if the specified time is earlier than
the last-pointer-grab time or is later than the current server time.

This request generates EnterNotify and LeaveNotify events.

An UngrabPointer request is performed automatically if the event window or
confine-to window for an active pointer grab becomes not viewable or if window
reconfiguration causes the confine-to window to lie completely outside the
boundaries of the root window.


* Fri 06 Jun 2014 01:53:18 PM JST

* Fri 06 Jun 2014 01:53:18 PM JST

* Fri 06 Jun 2014 01:53:18 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:53:18 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:53:19 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:53:19 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:53:19 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:53:19 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:53:19 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:53:21 PM JST

* Fri 06 Jun 2014 01:53:21 PM JST

* Fri 06 Jun 2014 01:53:21 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:53:22 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:53:22 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:53:22 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:53:22 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:53:22 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:53:22 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 01:54:29 PM JST
SUMMARY
* Fri 06 Jun 2014 01:54:59 PM JST
Access, Cursor, Value, Window
* Fri 06 Jun 2014 01:55:26 PM JST
GrabButton

modifiers: SETofKEYMASK or AnyModifier
button: BUTTON or AnyButton
grab-window: WINDOW
owner-events: BOOL
event-mask: SETofPOINTEREVENT
pointer-mode, keyboard-mode: { Synchronous, Asynchronous}
confine-to: WINDOW or None
cursor: CURSOR or None

Errors: Access, Cursor, Value, Window

This request establishes a passive grab. In the future, the pointer is actively
grabbed as described in GrabPointer, the last-pointer-grab time is set to the
time at which the button was pressed (as transmitted in the ButtonPress event),
and the ButtonPress event is reported if all of the following conditions are
true: The pointer is not grabbed and the specified button is logically pressed
when the specified modifier keys are logically down, and no other buttons or
modifier keys are logically down. The grab-window contains the pointer. The
confine-to window (if any) is viewable. A passive grab on the same button/key
combination does not exist on any ancestor of grab-window.

The interpretation of the remaining arguments is the same as for
GrabPointer. The active grab is terminated automatically when the logical state
of the pointer has all buttons released, independent of the logical state of
modifier keys. Note that the logical state of a device (as seen by means of the
protocol) may lag the physical state if device event processing is frozen.

This request overrides all previous passive grabs by the same client on the same
button/key combinations on the same window. A modifier of AnyModifier is
equivalent to issuing the request for all possible modifier combinations
(including the combination of no modifiers). It is not required that all
specified modifiers have currently assigned keycodes. A button of AnyButton is
equivalent to issuing the request for all possible buttons. Otherwise, it is not
required that the button specified currently be assigned to a physical button.

An Access error is generated if some other client has already issued a
GrabButton request with the same button/key combination on the same window. When
using AnyModifier or AnyButton, the request fails completely (no grabs are
established), and an Access error is generated if there is a conflicting grab
for any combination. The request has no effect on an active grab.


* Fri 06 Jun 2014 01:56:08 PM JST
UngrabPointer
* Fri 06 Jun 2014 01:56:22 PM JST
UngrabButton
* Fri 06 Jun 2014 01:57:16 PM JST
Value, Window
* Fri 06 Jun 2014 01:58:01 PM JST
UngrabButton

modifiers: SETofKEYMASK or AnyModifier
button: BUTTON or AnyButton
grab-window: WINDOW

Errors: Value, Window

This request releases the passive button/key combination on the specified window
if it was grabbed by this client. A modifiers argument of AnyModifier is
equivalent to issuing the request for all possible modifier combinations
(including the combination of no modifiers). A button of AnyButton is equivalent
to issuing the request for all possible buttons. The request has no effect on an
active grab.


* Fri 06 Jun 2014 01:58:43 PM JST
ChangeActivePointerGrab
* Fri 06 Jun 2014 01:59:27 PM JST
Cursor, Value
* Fri 06 Jun 2014 02:00:12 PM JST
ChangeActivePointerGrab

event-mask: SETofPOINTEREVENT
cursor: CURSOR or None
time: TIMESTAMP or CurrentTime

Errors: Cursor, Value

This request changes the specified dynamic parameters if the pointer is actively
grabbed by the client and the specified time is no earlier than the
last-pointer-grab time and no later than the current server time. The
interpretation of event-mask and cursor are the same as in GrabPointer. This
request has no effect on the parameters of any passive grabs established with
GrabButton.


* Fri 06 Jun 2014 02:00:58 PM JST
GrabKeyboard
* Fri 06 Jun 2014 02:01:26 PM JST
Value, Window
* Fri 06 Jun 2014 02:01:46 PM JST
GrabKeyboard

grab-window: WINDOW
owner-events: BOOL
pointer-mode, keyboard-mode: { Synchronous, Asynchronous}
time: TIMESTAMP or CurrentTime
▶
status: { Success, AlreadyGrabbed, Frozen, InvalidTime, NotViewable}

Errors: Value, Window

This request actively grabs control of the keyboard. Further key events are
reported only to the grabbing client. This request overrides any active keyboard
grab by this client.

If owner-events is False, all generated key events are reported with respect to
grab-window. If owner-events is True and if a generated key event would normally
be reported to this client, it is reported normally. Otherwise, the event is
reported with respect to the grab-window. Both KeyPress and KeyRelease events
are always reported, independent of any event selection made by the client.

If keyboard-mode is Asynchronous, keyboard event processing continues
normally. If the keyboard is currently frozen by this client, then processing of
keyboard events is resumed. If keyboard-mode is Synchronous, the state of the
keyboard (as seen by means of the protocol) appears to freeze. No further
keyboard events are generated by the server until the grabbing client issues a
releasing AllowEvents request or until the keyboard grab is released. Actual
keyboard changes are not lost while the keyboard is frozen. They are simply
queued for later processing.

If pointer-mode is Asynchronous, pointer event processing is unaffected by
activation of the grab. If pointer-mode is Synchronous, the state of the pointer
(as seen by means of the protocol) appears to freeze. No further pointer events
are generated by the server until the grabbing client issues a releasing
AllowEvents request or until the keyboard grab is released. Actual pointer
changes are not lost while the pointer is frozen. They are simply queued for
later processing.

This request generates FocusIn and FocusOut events.

The request fails with status AlreadyGrabbed if the keyboard is actively grabbed
by some other client. The request fails with status Frozen if the keyboard is
frozen by an active grab of another client. The request fails with status
NotViewable if grab-window is not viewable. The request fails with status
InvalidTime if the specified time is earlier than the last-keyboard-grab time or
later than the current server time. Otherwise, the last-keyboard-grab time is
set to the specified time with CurrentTime replaced by the current server time.


* Fri 06 Jun 2014 02:02:23 PM JST
UngrabKeyboard
* Fri 06 Jun 2014 02:02:54 PM JST
UngrabKeyboard
* Fri 06 Jun 2014 02:03:07 PM JST
UngrabKeyboard

time: TIMESTAMP or CurrentTime This request releases the keyboard if this client
has it actively grabbed (as a result of either GrabKeyboard or GrabKey) and
releases any queued events. The request has no effect if the specified time is
earlier than the last-keyboard-grab time or is later than the current server
time.

This request generates FocusIn and FocusOut events.

An UngrabKeyboard is performed automatically if the event window for an active
keyboard grab becomes not viewable.


* Fri 06 Jun 2014 02:03:55 PM JST
GrabKey
* Fri 06 Jun 2014 02:04:19 PM JST
Access, Value, Window
* Fri 06 Jun 2014 02:04:50 PM JST
GrabKey

key: KEYCODE or AnyKey
modifiers: SETofKEYMASK or AnyModifier
grab-window: WINDOW
owner-events: BOOL
pointer-mode, keyboard-mode: { Synchronous, Asynchronous}

Errors: Access, Value, Window

This request establishes a passive grab on the keyboard. In the future, the
keyboard is actively grabbed as described in GrabKeyboard, the
last-keyboard-grab time is set to the time at which the key was pressed (as
transmitted in the KeyPress event), and the KeyPress event is reported if all of
the following conditions are true: The keyboard is not grabbed and the specified
key (which can itself be a modifier key) is logically pressed when the specified
modifier keys are logically down, and no other modifier keys are logically
down. Either the grab-window is an ancestor of (or is) the focus window, or the
grab-window is a descendent of the focus window and contains the pointer. A
passive grab on the same key combination does not exist on any ancestor of
grab-window.

The interpretation of the remaining arguments is the same as for
GrabKeyboard. The active grab is terminated automatically when the logical state
of the keyboard has the specified key released, independent of the logical state
of modifier keys. Note that the logical state of a device (as seen by means of
the protocol) may lag the physical state if device event processing is frozen.

This request overrides all previous passive grabs by the same client on the same
key combinations on the same window. A modifier of AnyModifier is equivalent to
issuing the request for all possible modifier combinations (including the
combination of no modifiers). It is not required that all modifiers specified
have currently assigned keycodes. A key of AnyKey is equivalent to issuing the
request for all possible keycodes. Otherwise, the key must be in the range
specified by min-keycode and max-keycode in the connection setup (or a Value
error results).

An Access error is generated if some other client has issued a GrabKey with the
same key combination on the same window. When using AnyModifier or AnyKey, the
request fails completely (no grabs are established), and an Access error is
generated if there is a conflicting grab for any combination.


* Fri 06 Jun 2014 02:05:16 PM JST
UngrabKey
* Fri 06 Jun 2014 02:06:08 PM JST
VoidCookie
* Fri 06 Jun 2014 02:06:15 PM JST
Value, Window
* Fri 06 Jun 2014 02:06:35 PM JST
UngrabKey

key: KEYCODE or AnyKey
modifiers: SETofKEYMASK or AnyModifier
grab-window: WINDOW

Errors: Value, Window

This request releases the key combination on the specified window if it was
grabbed by this client. A modifiers argument of AnyModifier is equivalent to
issuing the request for all possible modifier combinations (including the
combination of no modifiers). A key of AnyKey is equivalent to issuing the
request for all possible keycodes. This request has no effect on an active grab.

* Fri 06 Jun 2014 02:09:36 PM JST
AllowEvents

mode: { AsyncPointer, SyncPointer, ReplayPointer, AsyncKeyboard,
SyncKeyboard, ReplayKeyboard, AsyncBoth, SyncBoth}
time: TIMESTAMP or CurrentTime
Errors: Value
This request releases some queued events if the client has caused a device to freeze. The request has no effect if the specified time is earlier than the last-grab time of the most recent active grab for the client or if the specified time is later than the current server time.

For AsyncPointer, if the pointer is frozen by the client, pointer event processing continues normally. If the pointer is frozen twice by the client on behalf of two separate grabs, AsyncPointer thaws for both. AsyncPointer has no effect if the pointer is not frozen by the client, but the pointer need not be grabbed by the client.

For SyncPointer, if the pointer is frozen and actively grabbed by the client, pointer event processing continues normally until the next ButtonPress or ButtonRelease event is reported to the client, at which time the pointer again appears to freeze. However, if the reported event causes the pointer grab to be released, then the pointer does not freeze. SyncPointer has no effect if the pointer is not frozen by the client or if the pointer is not grabbed by the client.

For ReplayPointer, if the pointer is actively grabbed by the client and is frozen as the result of an event having been sent to the client (either from the activation of a GrabButton or from a previous AllowEvents with mode SyncPointer but not from a GrabPointer), then the pointer grab is released and that event is completely reprocessed, this time ignoring any passive grabs at or above (towards the root) the grab-window of the grab just released. The request has no effect if the pointer is not grabbed by the client or if the pointer is not frozen as the result of an event.

For AsyncKeyboard, if the keyboard is frozen by the client, keyboard event processing continues normally. If the keyboard is frozen twice by the client on behalf of two separate grabs, AsyncKeyboard thaws for both. AsyncKeyboard has no effect if the keyboard is not frozen by the client, but the keyboard need not be grabbed by the client.

For SyncKeyboard, if the keyboard is frozen and actively grabbed by the client, keyboard event processing continues normally until the next KeyPress or KeyRelease event is reported to the client, at which time the keyboard again appears to freeze. However, if the reported event causes the keyboard grab to be released, then the keyboard does not freeze. SyncKeyboard has no effect if the keyboard is not frozen by the client or if the keyboard is not grabbed by the client.

For ReplayKeyboard, if the keyboard is actively grabbed by the client and is frozen as the result of an event having been sent to the client (either from the activation of a GrabKey or from a previous AllowEvents with mode SyncKeyboard but not from a GrabKeyboard), then the keyboard grab is released and that event is completely reprocessed, this time ignoring any passive grabs at or above (towards the root) the grab-window of the grab just released. The request has no effect if the keyboard is not grabbed by the client or if the keyboard is not frozen as the result of an event.

For SyncBoth, if both pointer and keyboard are frozen by the client, event processing (for both devices) continues normally until the next ButtonPress, ButtonRelease, KeyPress, or KeyRelease event is reported to the client for a grabbed device (button event for the pointer, key event for the keyboard), at which time the devices again appear to freeze. However, if the reported event causes the grab to be released, then the devices do not freeze (but if the other device is still grabbed, then a subsequent event for it will still cause both devices to freeze). SyncBoth has no effect unless both pointer and keyboard are frozen by the client. If the pointer or keyboard is frozen twice by the client on behalf of two separate grabs, SyncBoth thaws for both (but a subsequent freeze for SyncBoth will only freeze each device once).

For AsyncBoth, if the pointer and the keyboard are frozen by the client, event processing for both devices continues normally. If a device is frozen twice by the client on behalf of two separate grabs, AsyncBoth thaws for both. AsyncBoth has no effect unless both pointer and keyboard are frozen by the client.

AsyncPointer, SyncPointer, and ReplayPointer have no effect on processing of keyboard events. AsyncKeyboard, SyncKeyboard, and ReplayKeyboard have no effect on processing of pointer events.

It is possible for both a pointer grab and a keyboard grab to be active simultaneously (by the same or different clients). When a device is frozen on behalf of either grab, no event processing is performed for the device. It is possible for a single device to be frozen because of both grabs. In this case, the freeze must be released on behalf of both grabs before events can again be processed. If a device is frozen twice by a single client, then a single AllowEvents releases both.

GrabServer

This request disables processing of requests and close-downs on all connections other than the one this request arrived on.

UngrabServer

This request restarts processing of requests and close-downs on other connections.

QueryPointer

window: WINDOW
▶
root: WINDOW
child: WINDOW or None
same-screen: BOOL
root-x, root-y, win-x, win-y: INT16
mask: SETofKEYBUTMASK
Errors: Window
The root window the pointer is logically on and the pointer coordinates relative to the root's origin are returned. If same-screen is False, then the pointer is not on the same screen as the argument window, child is None, and win-x and win-y are zero. If same-screen is True, then win-x and win-y are the pointer coordinates relative to the argument window's origin, and child is the child containing the pointer, if any. The current logical state of the modifier keys and the buttons are also returned. Note that the logical state of a device (as seen by means of the protocol) may lag the physical state if device event processing is frozen.

GetMotionEvents

start, stop: TIMESTAMP or CurrentTime
window: WINDOW
▶
events: LISTofTIMECOORD
where:
TIMECOORD:	[x, y: INT16
time: TIMESTAMP]
Errors: Window
This request returns all events in the motion history buffer that fall between the specified start and stop times (inclusive) and that have coordinates that lie within (including borders) the specified window at its present placement. The x and y coordinates are reported relative to the origin of the window.

If the start time is later than the stop time or if the start time is in the future, no events are returned. If the stop time is in the future, it is equivalent to specifying CurrentTime.

TranslateCoordinates

src-window, dst-window: WINDOW
src-x, src-y: INT16
▶
same-screen: BOOL
child: WINDOW or None
dst-x, dst-y: INT16
Errors: Window
The src-x and src-y coordinates are taken relative to src-window's origin and are returned as dst-x and dst-y coordinates relative to dst-window's origin. If same-screen is False, then src-window and dst-window are on different screens, and dst-x and dst-y are zero. If the coordinates are contained in a mapped child of dst-window, then that child is returned.

WarpPointer

src-window: WINDOW or None
dst-window: WINDOW or None
src-x, src-y: INT16
src-width, src-height: CARD16
dst-x, dst-y: INT16
Errors: Window
If dst-window is None, this request moves the pointer by offsets [dst-x, dst-y] relative to the current position of the pointer. If dst-window is a window, this request moves the pointer to [dst-x, dst-y] relative to dst-window's origin. However, if src-window is not None, the move only takes place if src-window contains the pointer and the pointer is contained in the specified rectangle of src-window.

The src-x and src-y coordinates are relative to src-window's origin. If src-height is zero, it is replaced with the current height of src-window minus src-y. If src-width is zero, it is replaced with the current width of src-window minus src-x.

This request cannot be used to move the pointer outside the confine-to window of an active pointer grab. An attempt will only move the pointer as far as the closest edge of the confine-to window.

This request will generate events just as if the user had instantaneously moved the pointer.

SetInputFocus

focus: WINDOW or PointerRoot or None
revert-to: { Parent, PointerRoot, None}
time: TIMESTAMP or CurrentTime
Errors: Match, Value, Window
This request changes the input focus and the last-focus-change time. The request has no effect if the specified time is earlier than the current last-focus-change time or is later than the current server time. Otherwise, the last-focus-change time is set to the specified time with CurrentTime replaced by the current server time.

If None is specified as the focus, all keyboard events are discarded until a new focus window is set. In this case, the revert-to argument is ignored.

If a window is specified as the focus, it becomes the keyboard's focus window. If a generated keyboard event would normally be reported to this window or one of its inferiors, the event is reported normally. Otherwise, the event is reported with respect to the focus window.

If PointerRoot is specified as the focus, the focus window is dynamically taken to be the root window of whatever screen the pointer is on at each keyboard event. In this case, the revert-to argument is ignored.

This request generates FocusIn and FocusOut events.

The specified focus window must be viewable at the time of the request (or a Match error results). If the focus window later becomes not viewable, the new focus window depends on the revert-to argument. If revert-to is Parent, the focus reverts to the parent (or the closest viewable ancestor) and the new revert-to value is taken to be None. If revert-to is PointerRoot or None, the focus reverts to that value. When the focus reverts, FocusIn and FocusOut events are generated, but the last-focus-change time is not affected.

GetInputFocus

▶
focus: WINDOW or PointerRoot or None
revert-to: { Parent, PointerRoot, None}
This request returns the current focus state.

QueryKeymap

▶
keys: LISTofCARD8
This request returns a bit vector for the logical state of the keyboard. Each bit set to 1 indicates that the corresponding key is currently pressed. The vector is represented as 32 bytes. Byte N (from 0) contains the bits for keys 8N to 8N + 7 with the least significant bit in the byte representing key 8N. Note that the logical state of a device (as seen by means of the protocol) may lag the physical state if device event processing is frozen.

OpenFont

fid: FONT
name: STRING8
Errors: Alloc, IDChoice, Name
This request loads the specified font, if necessary, and associates identifier fid with it. The font name should use the ISO Latin-1 encoding, and uppercase and lowercase do not matter. When the characters “?” and “*” are used in a font name, a pattern match is performed and any matching font is used. In the pattern, the “?” character (octal value 77) will match any single character, and the “*” character (octal value 52) will match any number of characters. A structured format for font names is specified in the X.Org standard X Logical Font Description Conventions.

Fonts are not associated with a particular screen and can be stored as a component of any graphics context.

CloseFont

font: FONT
Errors: Font
This request deletes the association between the resource ID and the font. The font itself will be freed when no other resource references it.

QueryFont

font: FONTABLE
▶
font-info: FONTINFO
char-infos: LISTofCHARINFO
where:	 	 
FONTINFO:	 [draw-direction: { LeftToRight, RightToLeft }
min-char-or-byte2, max-char-or-byte2: CARD16
min-byte1, max-byte1: CARD8
all-chars-exist: BOOL
default-char: CARD16
min-bounds: CHARINFO
max-bounds: CHARINFO
font-ascent: INT16
font-descent: INT16
properties: LISTofFONTPROP]
FONTPROP:	 [name: ATOM
value: <32-bit-value>]
CHARINFO:	 [left-side-bearing: INT16
right-side-bearing: INT16
character-width: INT16
ascent: INT16
descent: INT16
attributes: CARD16]
Errors: Font
This request returns logical information about a font. If a gcontext is given for font, the currently contained font is used.

The draw-direction is just a hint and indicates whether most char-infos have a positive, LeftToRight, or a negative, RightToLeft, character-width metric. The core protocol defines no support for vertical text.

If min-byte1 and max-byte1 are both zero, then min-char-or-byte2 specifies the linear character index corresponding to the first element of char-infos, and max-char-or-byte2 specifies the linear character index of the last element. If either min-byte1 or max-byte1 are nonzero, then both min-char-or-byte2 and max-char-or-byte2 will be less than 256, and the 2-byte character index values corresponding to char-infos element N (counting from 0) are:

	byte1 = N/D + min-byte1
	byte2 = N\\D + min-char-or-byte2
where:

	D = max-char-or-byte2 - min-char-or-byte2 + 1
	/ = integer division
	\\ = integer modulus
If char-infos has length zero, then min-bounds and max-bounds will be identical, and the effective char-infos is one filled with this char-info, of length:

	L = D * (max-byte1 - min-byte1 + 1)
That is, all glyphs in the specified linear or matrix range have the same information, as given by min-bounds (and max-bounds). If all-chars-exist is True, then all characters in char-infos have nonzero bounding boxes.

The default-char specifies the character that will be used when an undefined or nonexistent character is used. Note that default-char is a CARD16, not CHAR2B. For a font using 2-byte matrix format, the default-char has byte1 in the most significant byte and byte2 in the least significant byte. If the default-char itself specifies an undefined or nonexistent character, then no printing is performed for an undefined or nonexistent character.

The min-bounds and max-bounds contain the minimum and maximum values of each individual CHARINFO component over all char-infos (ignoring nonexistent characters). The bounding box of the font (that is, the smallest rectangle enclosing the shape obtained by superimposing all characters at the same origin [x,y]) has its upper-left coordinate at:

	[x + min-bounds.left-side-bearing, y - max-bounds.ascent]
with a width of:

	max-bounds.right-side-bearing - min-bounds.left-side-bearing
and a height of:

	max-bounds.ascent + max-bounds.descent
The font-ascent is the logical extent of the font above the baseline and is used for determining line spacing. Specific characters may extend beyond this. The font-descent is the logical extent of the font at or below the baseline and is used for determining line spacing. Specific characters may extend beyond this. If the baseline is at Y-coordinate y, then the logical extent of the font is inclusive between the Y-coordinate values (y - font-ascent) and (y + font-descent - 1).

A font is not guaranteed to have any properties. The interpretation of the property value (for example, INT32, CARD32) must be derived from a priori knowledge of the property. A basic set of font properties is specified in the X.Org standard X Logical Font Description Conventions.

For a character origin at [x,y], the bounding box of a character (that is, the smallest rectangle enclosing the character's shape), described in terms of CHARINFO components, is a rectangle with its upper-left corner at:

	[x + left-side-bearing, y - ascent]
with a width of:

	right-side-bearing - left-side-bearing
and a height of:

	ascent + descent
and the origin for the next character is defined to be:

	[x + character-width, y]
Note that the baseline is logically viewed as being just below nondescending characters (when descent is zero, only pixels with Y-coordinates less than y are drawn) and that the origin is logically viewed as being coincident with the left edge of a nonkerned character (when left-side-bearing is zero, no pixels with X-coordinate less than x are drawn).

Note that CHARINFO metric values can be negative.

A nonexistent character is represented with all CHARINFO components zero.

The interpretation of the per-character attributes field is server-dependent.

QueryTextExtents

font: FONTABLE
string: STRING16
▶
draw-direction: { LeftToRight, RightToLeft}
font-ascent: INT16
font-descent: INT16
overall-ascent: INT16
overall-descent: INT16
overall-width: INT32
overall-left: INT32
overall-right: INT32
Errors: Font
This request returns the logical extents of the specified string of characters in the specified font. If a gcontext is given for font, the currently contained font is used. The draw-direction, font-ascent, and font-descent are the same as described in QueryFont. The overall-ascent is the maximum of the ascent metrics of all characters in the string, and the overall-descent is the maximum of the descent metrics. The overall-width is the sum of the character-width metrics of all characters in the string. For each character in the string, let W be the sum of the character-width metrics of all characters preceding it in the string, let L be the left-side-bearing metric of the character plus W, and let R be the right-side-bearing metric of the character plus W. The overall-left is the minimum L of all characters in the string, and the overall-right is the maximum R.

For fonts defined with linear indexing rather than 2-byte matrix indexing, the server will interpret each CHAR2B as a 16-bit number that has been transmitted most significant byte first (that is, byte1 of the CHAR2B is taken as the most significant byte).

Characters with all zero metrics are ignored. If the font has no defined default-char, then undefined characters in the string are also ignored.

ListFonts

pattern: STRING8
max-names: CARD16
▶
names: LISTofSTRING8
This request returns a list of available font names (as controlled by the font search path; see SetFontPath request) that match the pattern. At most, max-names names will be returned. The pattern should use the ISO Latin-1 encoding, and uppercase and lowercase do not matter. In the pattern, the “?” character (octal value 77) will match any single character, and the “*” character (octal value 52) will match any number of characters. The returned names are in lowercase.

ListFontsWithInfo

pattern: STRING8
max-names: CARD16
▶
name: STRING8
info FONTINFO
replies-hint: CARD32
where:
FONTINFO: <same type definition as in QueryFont>
This request is similar to ListFonts, but it also returns information about each font. The information returned for each font is identical to what QueryFont would return except that the per-character metrics are not returned. Note that this request can generate multiple replies. With each reply, replies-hint may provide an indication of how many more fonts will be returned. This number is a hint only and may be larger or smaller than the number of fonts actually returned. A zero value does not guarantee that no more fonts will be returned. After the font replies, a reply with a zero-length name is sent to indicate the end of the reply sequence.

SetFontPath

path: LISTofSTRING8
Errors: Value
This request defines the search path for font lookup. There is only one search path per server, not one per client. The interpretation of the strings is operating-system-dependent, but the strings are intended to specify directories to be searched in the order listed.

Setting the path to the empty list restores the default path defined for the server.

As a side effect of executing this request, the server is guaranteed to flush all cached information about fonts for which there currently are no explicit resource IDs allocated.

The meaning of an error from this request is system specific.

GetFontPath

▶
path: LISTofSTRING8
This request returns the current search path for fonts.

CreatePixmap

pid: PIXMAP
drawable: DRAWABLE
depth: CARD8
width, height: CARD16
Errors: Alloc, Drawable, IDChoice, Value
This request creates a pixmap and assigns the identifier pid to it. The width and height must be nonzero (or a Value error results). The depth must be one of the depths supported by the root of the specified drawable (or a Value error results). The initial contents of the pixmap are undefined.

It is legal to pass an InputOnly window as a drawable to this request.

FreePixmap

pixmap: PIXMAP
Errors: Pixmap
This request deletes the association between the resource ID and the pixmap. The pixmap storage will be freed when no other resource references it.

CreateGC

cid: GCONTEXT
drawable: DRAWABLE
value-mask: BITMASK
value-list: LISTofVALUE
Errors: Alloc, Drawable, Font, IDChoice, Match, Pixmap, Value
This request creates a graphics context and assigns the identifier cid to it. The gcontext can be used with any destination drawable having the same root and depth as the specified drawable; use with other drawables results in a Match error.

The value-mask and value-list specify which components are to be explicitly initialized. The context components are:

Component	Type
function	 { Clear, And, AndReverse, Copy, AndInverted, NoOp, Xor, Or, Nor, Equiv, Invert, OrReverse, CopyInverted, OrInverted, Nand, Set }
plane-mask	CARD32
foreground	CARD32
background	CARD32
line-width	CARD16
line-style	 { Solid, OnOffDash, DoubleDash }
cap-style	 { NotLast, Butt, Round, Projecting }
join-style	 { Miter, Round, Bevel }
fill-style	 { Solid, Tiled, OpaqueStippled, Stippled }
fill-rule	 { EvenOdd, Winding }
arc-mode	 { Chord, PieSlice }
tile	PIXMAP
stipple	PIXMAP
tile-stipple-x-origin	INT16
tile-stipple-y-origin	INT16
font	FONT
subwindow-mode	 { ClipByChildren, IncludeInferiors }
graphics-exposures	BOOL
clip-x-origin	INT16
clip-y-origin	INT16
clip-mask	 PIXMAP or None
dash-offset	CARD16
dashes	CARD8
In graphics operations, given a source and destination pixel, the result is computed bitwise on corresponding bits of the pixels; that is, a Boolean operation is performed in each bit plane. The plane-mask restricts the operation to a subset of planes, so the result is:

	((src FUNC dst) AND plane-mask) OR (dst AND (NOT plane-mask))
Range checking is not performed on the values for foreground, background, or plane-mask. They are simply truncated to the appropriate number of bits.

The meanings of the functions are:

Function	Operation
Clear	0
And	src AND dst
AndReverse	src AND (NOT dst)
Copy	src
AndInverted	(NOT src) AND dst
NoOp	dst
Xor	src XOR dst
Or	src OR dst
Nor	(NOT src) AND (NOT dst)
Equiv	(NOT src) XOR dst
Invert	NOT dst
OrReverse	src OR (NOT dst)
CopyInverted	NOT src
OrInverted	(NOT src) OR dst
Nand	(NOT src) OR (NOT dst)
Set	1
The line-width is measured in pixels and can be greater than or equal to one, a wide line, or the special value zero, a thin line.

Wide lines are drawn centered on the path described by the graphics request. Unless otherwise specified by the join or cap style, the bounding box of a wide line with endpoints [x1, y1], [x2, y2] and width w is a rectangle with vertices at the following real coordinates:

	[x1-(w*sn/2), y1+(w*cs/2)], [x1+(w*sn/2), y1-(w*cs/2)],
	[x2-(w*sn/2), y2+(w*cs/2)], [x2+(w*sn/2), y2-(w*cs/2)]
The sn is the sine of the angle of the line and cs is the cosine of the angle of the line. A pixel is part of the line (and hence drawn) if the center of the pixel is fully inside the bounding box, which is viewed as having infinitely thin edges. If the center of the pixel is exactly on the bounding box, it is part of the line if and only if the interior is immediately to its right (x increasing direction). Pixels with centers on a horizontal edge are a special case and are part of the line if and only if the interior or the boundary is immediately below (y increasing direction) and if the interior or the boundary is immediately to the right (x increasing direction). Note that this description is a mathematical model describing the pixels that are drawn for a wide line and does not imply that trigonometry is required to implement such a model. Real or fixed point arithmetic is recommended for computing the corners of the line endpoints for lines greater than one pixel in width.

Thin lines (zero line-width) are nominally one pixel wide lines drawn using an unspecified, device-dependent algorithm. There are only two constraints on this algorithm. First, if a line is drawn unclipped from [x1,y1] to [x2,y2] and another line is drawn unclipped from [x1+dx,y1+dy] to [x2+dx,y2+dy], then a point [x,y] is touched by drawing the first line if and only if the point [x+dx,y+dy] is touched by drawing the second line. Second, the effective set of points comprising a line cannot be affected by clipping. Thus, a point is touched in a clipped line if and only if the point lies inside the clipping region and the point would be touched by the line when drawn unclipped.

Note that a wide line drawn from [x1,y1] to [x2,y2] always draws the same pixels as a wide line drawn from [x2,y2] to [x1,y1], not counting cap-style and join-style. Implementors are encouraged to make this property true for thin lines, but it is not required. A line-width of zero may differ from a line-width of one in which pixels are drawn. In general, drawing a thin line will be faster than drawing a wide line of width one, but thin lines may not mix well aesthetically with wide lines because of the different drawing algorithms. If it is desirable to obtain precise and uniform results across all displays, a client should always use a line-width of one, rather than a line-width of zero.

The line-style defines which sections of a line are drawn:

Solid	 The full path of the line is drawn.
DoubleDash	 The full path of the line is drawn, but the even dashes are filled differently than the odd dashes (see fill-style), with Butt cap-style used where even and odd dashes meet.
OnOffDash	 Only the even dashes are drawn, and cap-style applies to all internal ends of the individual dashes (except NotLast is treated as Butt).
The cap-style defines how the endpoints of a path are drawn:

NotLast	 The result is equivalent to Butt, except that for a line-width of zero the final endpoint is not drawn.
Butt	 The result is square at the endpoint (perpendicular to the slope of the line) with no projection beyond.
Round	 The result is a circular arc with its diameter equal to the line-width, centered on the endpoint; it is equivalent to Butt for line-width zero.
Projecting	 The result is square at the end, but the path continues beyond the endpoint for a distance equal to half the line-width; it is equivalent to Butt for line-width zero.
The join-style defines how corners are drawn for wide lines:

Miter	 The outer edges of the two lines extend to meet at an angle. However, if the angle is less than 11 degrees, a Bevel join-style is used instead.
Round	 The result is a circular arc with a diameter equal to the line-width, centered on the joinpoint.
Bevel	 The result is Butt endpoint styles, and then the triangular notch is filled.
For a line with coincident endpoints (x1=x2, y1=y2), when the cap-style is applied to both endpoints, the semantics depends on the line-width and the cap-style:

NotLast	thin	 This is device-dependent, but the desired effect is that nothing is drawn.
Butt	thin	 This is device-dependent, but the desired effect is that a single pixel is drawn.
Round	thin	 This is the same as Butt/thin.
Projecting	thin	 This is the same as Butt/thin.
Butt	wide	 Nothing is drawn.
Round	wide	 The closed path is a circle, centered at the endpoint and with a diameter equal to the line-width.
Projecting	wide	 The closed path is a square, aligned with the coordinate axes, centered at the endpoint and with sides equal to the line-width.
For a line with coincident endpoints (x1=x2, y1=y2), when the join-style is applied at one or both endpoints, the effect is as if the line was removed from the overall path. However, if the total path consists of (or is reduced to) a single point joined with itself, the effect is the same as when the cap-style is applied at both endpoints.

The tile/stipple represents an infinite two-dimensional plane with the tile/stipple replicated in all dimensions. When that plane is superimposed on the drawable for use in a graphics operation, the upper-left corner of some instance of the tile/stipple is at the coordinates within the drawable specified by the tile/stipple origin. The tile/stipple and clip origins are interpreted relative to the origin of whatever destination drawable is specified in a graphics request.

The tile pixmap must have the same root and depth as the gcontext (or a Match error results). The stipple pixmap must have depth one and must have the same root as the gcontext (or a Match error results). For fill-style Stippled (but not fill-style OpaqueStippled), the stipple pattern is tiled in a single plane and acts as an additional clip mask to be ANDed with the clip-mask. Any size pixmap can be used for tiling or stippling, although some sizes may be faster to use than others.

The fill-style defines the contents of the source for line, text, and fill requests. For all text and fill requests (for example, PolyText8, PolyText16, PolyFillRectangle, FillPoly, and PolyFillArc) as well as for line requests with line-style Solid, (for example, PolyLine, PolySegment, PolyRectangle, PolyArc ) and for the even dashes for line requests with line-style OnOffDash or DoubleDash:

Solid	Foreground
Tiled	Tile
OpaqueStippled	 A tile with the same width and height as stipple but with background everywhere stipple has a zero and with foreground everywhere stipple has a one
Stippled	 Foreground masked by stipple
For the odd dashes for line requests with line-style DoubleDash:

Solid	Background
Tiled	Same as for even dashes
OpaqueStippled	Same as for even dashes
Stippled	Background masked by stipple
The dashes value allowed here is actually a simplified form of the more general patterns that can be set with SetDashes. Specifying a value of N here is equivalent to specifying the two element list [N, N] in SetDashes. The value must be nonzero (or a Value error results). The meaning of dash-offset and dashes are explained in the SetDashes request.

The clip-mask restricts writes to the destination drawable. Only pixels where the clip-mask has bits set to 1 are drawn. Pixels are not drawn outside the area covered by the clip-mask or where the clip-mask has bits set to 0. The clip-mask affects all graphics requests, but it does not clip sources. The clip-mask origin is interpreted relative to the origin of whatever destination drawable is specified in a graphics request. If a pixmap is specified as the clip-mask, it must have depth 1 and have the same root as the gcontext (or a Match error results). If clip-mask is None, then pixels are always drawn, regardless of the clip origin. The clip-mask can also be set with the SetClipRectangles request.

For ClipByChildren, both source and destination windows are additionally clipped by all viewable InputOutput children. For IncludeInferiors, neither source nor destination window is clipped by inferiors. This will result in including subwindow contents in the source and drawing through subwindow boundaries of the destination. The use of IncludeInferiors with a source or destination window of one depth with mapped inferiors of differing depth is not illegal, but the semantics is undefined by the core protocol.

The fill-rule defines what pixels are inside (that is, are drawn) for paths given in FillPoly requests. EvenOdd means a point is inside if an infinite ray with the point as origin crosses the path an odd number of times. For Winding, a point is inside if an infinite ray with the point as origin crosses an unequal number of clockwise and counterclockwise directed path segments. A clockwise directed path segment is one that crosses the ray from left to right as observed from the point. A counter-clockwise segment is one that crosses the ray from right to left as observed from the point. The case where a directed line segment is coincident with the ray is uninteresting because one can simply choose a different ray that is not coincident with a segment.

For both fill rules, a point is infinitely small and the path is an infinitely thin line. A pixel is inside if the center point of the pixel is inside and the center point is not on the boundary. If the center point is on the boundary, the pixel is inside if and only if the polygon interior is immediately to its right (x increasing direction). Pixels with centers along a horizontal edge are a special case and are inside if and only if the polygon interior is immediately below (y increasing direction).

The arc-mode controls filling in the PolyFillArc request.

The graphics-exposures flag controls GraphicsExposure event generation for CopyArea and CopyPlane requests (and any similar requests defined by extensions).

The default component values are:

Component	Default
function	Copy
plane-mask	all ones
foreground	0
background	1
line-width	0
line-style	Solid
cap-style	Butt
join-style	Miter
fill-style	Solid
fill-rule	EvenOdd
arc-mode	PieSlice
tile	
Pixmap of unspecified size filled with foreground pixel
(that is, client specified pixel if any, else 0)
(subsequent changes to foreground do not affect this pixmap)
stipple	 Pixmap of unspecified size filled with ones
tile-stipple-x-origin	0
tile-stipple-y-origin	0
font	<server-dependent-font>
subwindow-mode	ClipByChildren
graphics-exposures	True
clip-x-origin	0
clip-y-origin	0
clip-mask	None
dash-offset	0
dashes	4 (that is, the list [4, 4])
Storing a pixmap in a gcontext might or might not result in a copy being made. If the pixmap is later used as the destination for a graphics request, the change might or might not be reflected in the gcontext. If the pixmap is used simultaneously in a graphics request as both a destination and as a tile or stipple, the results are not defined.

It is quite likely that some amount of gcontext information will be cached in display hardware and that such hardware can only cache a small number of gcontexts. Given the number and complexity of components, clients should view switching between gcontexts with nearly identical state as significantly more expensive than making minor changes to a single gcontext.

ChangeGC

gc: GCONTEXT
value-mask: BITMASK
value-list: LISTofVALUE
Errors: Alloc, Font, GContext, Match, Pixmap, Value
This request changes components in gc. The value-mask and value-list specify which components are to be changed. The values and restrictions are the same as for CreateGC.

Changing the clip-mask also overrides any previous SetClipRectangles request on the context. Changing dash-offset or dashes overrides any previous SetDashes request on the context.

The order in which components are verified and altered is server-dependent. If an error is generated, a subset of the components may have been altered.

CopyGC

src-gc, dst-gc: GCONTEXT
value-mask: BITMASK
Errors: Alloc, GContext, Match, Value
This request copies components from src-gc to dst-gc. The value-mask specifies which components to copy, as for CreateGC. The two gcontexts must have the same root and the same depth (or a Match error results).

SetDashes

gc: GCONTEXT
dash-offset: CARD16
dashes: LISTofCARD8
Errors: Alloc, GContext, Value
This request sets dash-offset and dashes in gc for dashed line styles. Dashes cannot be empty (or a Value error results). Specifying an odd-length list is equivalent to specifying the same list concatenated with itself to produce an even-length list. The initial and alternating elements of dashes are the even dashes; the others are the odd dashes. Each element specifies a dash length in pixels. All of the elements must be nonzero (or a Value error results). The dash-offset defines the phase of the pattern, specifying how many pixels into dashes the pattern should actually begin in any single graphics request. Dashing is continuous through path elements combined with a join-style but is reset to the dash-offset between each sequence of joined lines.

The unit of measure for dashes is the same as in the ordinary coordinate system. Ideally, a dash length is measured along the slope of the line, but implementations are only required to match this ideal for horizontal and vertical lines. Failing the ideal semantics, it is suggested that the length be measured along the major axis of the line. The major axis is defined as the x axis for lines drawn at an angle of between -45 and +45 degrees or between 135 and 225 degrees from the x axis. For all other lines, the major axis is the y axis.

For any graphics primitive, the computation of the endpoint of an individual dash only depends on the geometry of the primitive, the start position of the dash, the direction of the dash, and the dash length.

For any graphics primitive, the total set of pixels used to render the primitive (both even and odd numbered dash elements) with DoubleDash line-style is the same as the set of pixels used to render the primitive with Solid line-style.

For any graphics primitive, if the primitive is drawn with OnOffDash or DoubleDash line-style unclipped at position [x,y] and again at position [x+dx,y+dy], then a point [x1,y1] is included in a dash in the first instance if and only if the point [x1+dx,y1+dy] is included in the dash in the second instance. In addition, the effective set of points comprising a dash cannot be affected by clipping. A point is included in a clipped dash if and only if the point lies inside the clipping region and the point would be included in the dash when drawn unclipped.

SetClipRectangles

gc: GCONTEXT
clip-x-origin, clip-y-origin: INT16
rectangles: LISTofRECTANGLE
ordering: { UnSorted, YSorted, YXSorted, YXBanded}
Errors: Alloc, GContext, Match, Value
This request changes clip-mask in gc to the specified list of rectangles and sets the clip origin. Output will be clipped to remain contained within the rectangles. The clip origin is interpreted relative to the origin of whatever destination drawable is specified in a graphics request. The rectangle coordinates are interpreted relative to the clip origin. The rectangles should be nonintersecting, or graphics results will be undefined. Note that the list of rectangles can be empty, which effectively disables output. This is the opposite of passing None as the clip-mask in CreateGC and ChangeGC.

If known by the client, ordering relations on the rectangles can be specified with the ordering argument. This may provide faster operation by the server. If an incorrect ordering is specified, the server may generate a Match error, but it is not required to do so. If no error is generated, the graphics results are undefined. UnSorted means that the rectangles are in arbitrary order. YSorted means that the rectangles are nondecreasing in their Y origin. YXSorted additionally constrains YSorted order in that all rectangles with an equal Y origin are nondecreasing in their X origin. YXBanded additionally constrains YXSorted by requiring that, for every possible Y scanline, all rectangles that include that scanline have identical Y origins and Y extents.

FreeGC

gc: GCONTEXT
Errors: GContext
This request deletes the association between the resource ID and the gcontext and destroys the gcontext.

ClearArea

window: WINDOW
x, y: INT16
width, height: CARD16
exposures: BOOL
Errors: Match, Value, Window
The x and y coordinates are relative to the window's origin and specify the upper-left corner of the rectangle. If width is zero, it is replaced with the current width of the window minus x. If height is zero, it is replaced with the current height of the window minus y. If the window has a defined background tile, the rectangle is tiled with a plane-mask of all ones and function of Copy and a subwindow-mode of ClipByChildren. If the window has background None, the contents of the window are not changed. In either case, if exposures is True, then one or more exposure events are generated for regions of the rectangle that are either visible or are being retained in a backing store.

It is a Match error to use an InputOnly window in this request.

CopyArea

src-drawable, dst-drawable: DRAWABLE
gc: GCONTEXT
src-x, src-y: INT16
width, height: CARD16
dst-x, dst-y: INT16
Errors: Drawable, GContext, Match
This request combines the specified rectangle of src-drawable with the specified rectangle of dst-drawable. The src-x and src-y coordinates are relative to src-drawable's origin. The dst-x and dst-y are relative to dst-drawable's origin, each pair specifying the upper-left corner of the rectangle. The src-drawable must have the same root and the same depth as dst-drawable (or a Match error results).

If regions of the source rectangle are obscured and have not been retained in backing store or if regions outside the boundaries of the source drawable are specified, then those regions are not copied, but the following occurs on all corresponding destination regions that are either visible or are retained in backing-store. If the dst-drawable is a window with a background other than None, these corresponding destination regions are tiled (with plane-mask of all ones and function Copy) with that background. Regardless of tiling and whether the destination is a window or a pixmap, if graphics-exposures in gc is True, then GraphicsExposure events for all corresponding destination regions are generated.

If graphics-exposures is True but no GraphicsExposure events are generated, then a NoExposure event is generated.

GC components: function, plane-mask, subwindow-mode, graphics-exposures, clip-x-origin, clip-y-origin, clip-mask

CopyPlane

src-drawable, dst-drawable: DRAWABLE
gc: GCONTEXT
src-x, src-y: INT16
width, height: CARD16
dst-x, dst-y: INT16
bit-plane: CARD32
Errors: Drawable, GContext, Match, Value
The src-drawable must have the same root as dst-drawable (or a Match error results), but it need not have the same depth. The bit-plane must have exactly one bit set to 1 and the value of bit-plane must be less than %2 sup n% where n is the depth of src-drawable (or a Value error results). Effectively, a pixmap of the same depth as dst-drawable and with size specified by the source region is formed using the foreground/background pixels in gc (foreground everywhere the bit-plane in src-drawable contains a bit set to 1, background everywhere the bit-plane contains a bit set to 0), and the equivalent of a CopyArea is performed, with all the same exposure semantics. This can also be thought of as using the specified region of the source bit-plane as a stipple with a fill-style of OpaqueStippled for filling a rectangular area of the destination.

GC components: function, plane-mask, foreground, background, subwindow-mode, graphics-exposures, clip-x-origin, clip-y-origin, clip-mask

PolyPoint

drawable: DRAWABLE
gc: GCONTEXT
coordinate-mode: { Origin, Previous}
points: LISTofPOINT
Errors: Drawable, GContext, Match, Value
This request combines the foreground pixel in gc with the pixel at each point in the drawable. The points are drawn in the order listed.

The first point is always relative to the drawable's origin. The rest are relative either to that origin or the previous point, depending on the coordinate-mode.

GC components: function, plane-mask, foreground, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask

PolyLine

drawable: DRAWABLE
gc: GCONTEXT
coordinate-mode: { Origin, Previous}
points: LISTofPOINT
Errors: Drawable, GContext, Match, Value
This request draws lines between each pair of points (point[i], point[i+1]). The lines are drawn in the order listed. The lines join correctly at all intermediate points, and if the first and last points coincide, the first and last lines also join correctly.

For any given line, no pixel is drawn more than once. If thin (zero line-width) lines intersect, the intersecting pixels are drawn multiple times. If wide lines intersect, the intersecting pixels are drawn only once, as though the entire PolyLine were a single filled shape.

The first point is always relative to the drawable's origin. The rest are relative either to that origin or the previous point, depending on the coordinate-mode.

When either of the two lines involved in a Bevel join is neither vertical nor horizontal, then the slope and position of the line segment defining the bevel join edge is implementation dependent. However, the computation of the slope and distance (relative to the join point) only depends on the line width and the slopes of the two lines.

GC components: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dashes

PolySegment

drawable: DRAWABLE
gc: GCONTEXT
segments: LISTofSEGMENT
where:
SEGMENT: [x1, y1, x2, y2: INT16]
Errors: Drawable, GContext, Match
For each segment, this request draws a line between [x1, y1] and [x2, y2]. The lines are drawn in the order listed. No joining is performed at coincident endpoints. For any given line, no pixel is drawn more than once. If lines intersect, the intersecting pixels are drawn multiple times.

GC components: function, plane-mask, line-width, line-style, cap-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dashes

PolyRectangle

drawable: DRAWABLE
gc: GCONTEXT
rectangles: LISTofRECTANGLE
Errors: Drawable, GContext, Match
This request draws the outlines of the specified rectangles, as if a five-point PolyLine were specified for each rectangle:

	[x,y] [x+width,y] [x+width,y+height] [x,y+height] [x,y]
The x and y coordinates of each rectangle are relative to the drawable's origin and define the upper-left corner of the rectangle.

The rectangles are drawn in the order listed. For any given rectangle, no pixel is drawn more than once. If rectangles intersect, the intersecting pixels are drawn multiple times.

GC components: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dashes

PolyArc

drawable: DRAWABLE
gc: GCONTEXT
arcs: LISTofARC
Errors: Drawable, GContext, Match
This request draws circular or elliptical arcs. Each arc is specified by a rectangle and two angles. The angles are signed integers in degrees scaled by 64, with positive indicating counterclockwise motion and negative indicating clockwise motion. The start of the arc is specified by angle1 relative to the three-o'clock position from the center of the rectangle, and the path and extent of the arc is specified by angle2 relative to the start of the arc. If the magnitude of angle2 is greater than 360 degrees, it is truncated to 360 degrees. The x and y coordinates of the rectangle are relative to the origin of the drawable. For an arc specified as [x,y,w,h,a1,a2], the origin of the major and minor axes is at [x+(w/2),y+(h/2)], and the infinitely thin path describing the entire circle/ellipse intersects the horizontal axis at [x,y+(h/2)] and [x+w,y+(h/2)] and intersects the vertical axis at [x+(w/2),y] and [x+(w/2),y+h]. These coordinates are not necessarily integral; that is, they are not truncated to discrete coordinates.

For a wide line with line-width lw, the ideal bounding outlines for filling are given by the two infinitely thin paths consisting of all points whose perpendicular distance from a tangent to the path of the circle/ellipse is equal to lw/2 (which may be a fractional value). When the width and height of the arc are not equal and both are nonzero, then the actual bounding outlines are implementation dependent. However, the computation of the shape and position of the bounding outlines (relative to the center of the arc) only depends on the width and height of the arc and the line-width.

The cap-style is applied the same as for a line corresponding to the tangent of the circle/ellipse at the endpoint. When the angle of an arc face is not an integral multiple of 90 degrees, and the width and height of the arc are both are nonzero, then the shape and position of the cap at that face is implementation dependent. However, for a Butt cap, the face is defined by a straight line, and the computation of the position (relative to the center of the arc) and the slope of the line only depends on the width and height of the arc and the angle of the arc face. For other cap styles, the computation of the position (relative to the center of the arc) and the shape of the cap only depends on the width and height of the arc, the line-width, the angle of the arc face, and the direction (clockwise or counter clockwise) of the arc from the endpoint.

The join-style is applied the same as for two lines corresponding to the tangents of the circles/ellipses at the join point. When the width and height of both arcs are nonzero, and the angle of either arc face is not an integral multiple of 90 degrees, then the shape of the join is implementation dependent. However, the computation of the shape only depends on the width and height of each arc, the line-width, the angles of the two arc faces, the direction (clockwise or counter clockwise) of the arcs from the join point, and the relative orientation of the two arc center points.

For an arc specified as [x,y,w,h,a1,a2], the angles must be specified in the effectively skewed coordinate system of the ellipse (for a circle, the angles and coordinate systems are identical). The relationship between these angles and angles expressed in the normal coordinate system of the screen (as measured with a protractor) is as follows:

	skewed-angle = atan(tan(normal-angle) * w/h) + adjust
The skewed-angle and normal-angle are expressed in radians (rather than in degrees scaled by 64) in the range [0,2*PI). The atan returns a value in the range [-PI/2,PI/2]. The adjust is:

0	for normal-angle in the range [0,PI/2)
PI	for normal-angle in the range [PI/2,(3*PI)/2)
2*PI	for normal-angle in the range [(3*PI)/2,2*PI)
The arcs are drawn in the order listed. If the last point in one arc coincides with the first point in the following arc, the two arcs will join correctly. If the first point in the first arc coincides with the last point in the last arc, the two arcs will join correctly. For any given arc, no pixel is drawn more than once. If two arcs join correctly and the line-width is greater than zero and the arcs intersect, no pixel is drawn more than once. Otherwise, the intersecting pixels of intersecting arcs are drawn multiple times. Specifying an arc with one endpoint and a clockwise extent draws the same pixels as specifying the other endpoint and an equivalent counterclockwise extent, except as it affects joins.

By specifying one axis to be zero, a horizontal or vertical line can be drawn.

Angles are computed based solely on the coordinate system, ignoring the aspect ratio.

GC components: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dashes

FillPoly

drawable: DRAWABLE
gc: GCONTEXT
shape: { Complex, Nonconvex, Convex}
coordinate-mode: { Origin, Previous}
points: LISTofPOINT
Errors: Drawable, GContext, Match, Value
This request fills the region closed by the specified path. The path is closed automatically if the last point in the list does not coincide with the first point. No pixel of the region is drawn more than once.

The first point is always relative to the drawable's origin. The rest are relative either to that origin or the previous point, depending on the coordinate-mode.

The shape parameter may be used by the server to improve performance. Complex means the path may self-intersect. Contiguous coincident points in the path are not treated as self-intersection.

Nonconvex means the path does not self-intersect, but the shape is not wholly convex. If known by the client, specifying Nonconvex over Complex may improve performance. If Nonconvex is specified for a self-intersecting path, the graphics results are undefined.

Convex means that for every pair of points inside the polygon, the line segment connecting them does not intersect the path. If known by the client, specifying Convex can improve performance. If Convex is specified for a path that is not convex, the graphics results are undefined.

GC components: function, plane-mask, fill-style, fill-rule, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin

PolyFillRectangle

drawable: DRAWABLE
gc: GCONTEXT
rectangles: LISTofRECTANGLE
Errors: Drawable, GContext, Match
This request fills the specified rectangles, as if a four-point FillPoly were specified for each rectangle:

	[x,y] [x+width,y] [x+width,y+height] [x,y+height]
The x and y coordinates of each rectangle are relative to the drawable's origin and define the upper-left corner of the rectangle.

The rectangles are drawn in the order listed. For any given rectangle, no pixel is drawn more than once. If rectangles intersect, the intersecting pixels are drawn multiple times.

GC components: function, plane-mask, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin

PolyFillArc

drawable: DRAWABLE
gc: GCONTEXT
arcs: LISTofARC
Errors: Drawable, GContext, Match
For each arc, this request fills the region closed by the infinitely thin path described by the specified arc and one or two line segments, depending on the arc-mode. For Chord, the single line segment joining the endpoints of the arc is used. For PieSlice, the two line segments joining the endpoints of the arc with the center point are used.

For an arc specified as [x,y,w,h,a1,a2], the origin of the major and minor axes is at [x+(w/2),y+(h/2)], and the infinitely thin path describing the entire circle/ellipse intersects the horizontal axis at [x,y+(h/2)] and [x+w,y+(h/2)] and intersects the vertical axis at [x+(w/2),y] and [x+(w/2),y+h]. These coordinates are not necessarily integral; that is, they are not truncated to discrete coordinates.

The arc angles are interpreted as specified in the PolyArc request. When the angle of an arc face is not an integral multiple of 90 degrees, then the precise endpoint on the arc is implementation dependent. However, for Chord arc-mode, the computation of the pair of endpoints (relative to the center of the arc) only depends on the width and height of the arc and the angles of the two arc faces. For PieSlice arc-mode, the computation of an endpoint only depends on the angle of the arc face for that endpoint and the ratio of the arc width to arc height.

The arcs are filled in the order listed. For any given arc, no pixel is drawn more than once. If regions intersect, the intersecting pixels are drawn multiple times.

GC components: function, plane-mask, fill-style, arc-mode, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin

PutImage

drawable: DRAWABLE
gc: GCONTEXT
depth: CARD8
width, height: CARD16
dst-x, dst-y: INT16
left-pad: CARD8
format: { Bitmap, XYPixmap, ZPixmap}
data: LISTofBYTE
Errors: Drawable, GContext, Match, Value
This request combines an image with a rectangle of the drawable. The dst-x and dst-y coordinates are relative to the drawable's origin.

If Bitmap format is used, then depth must be one (or a Match error results), and the image must be in XY format. The foreground pixel in gc defines the source for bits set to 1 in the image, and the background pixel defines the source for the bits set to 0.

For XYPixmap and ZPixmap, the depth must match the depth of the drawable (or a Match error results). For XYPixmap, the image must be sent in XY format. For ZPixmap, the image must be sent in the Z format defined for the given depth.

The left-pad must be zero for ZPixmap format (or a Match error results). For Bitmap and XYPixmap format, left-pad must be less than bitmap-scanline-pad as given in the server connection setup information (or a Match error results). The first left-pad bits in every scanline are to be ignored by the server. The actual image begins that many bits into the data. The width argument defines the width of the actual image and does not include left-pad.

GC components: function, plane-mask, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background

GetImage

drawable: DRAWABLE
x, y: INT16
width, height: CARD16
plane-mask: CARD32
format: { XYPixmap, ZPixmap}
▶
depth: CARD8
visual: VISUALID or None
data: LISTofBYTE
Errors: Drawable, Match, Value
This request returns the contents of the given rectangle of the drawable in the given format. The x and y coordinates are relative to the drawable's origin and define the upper-left corner of the rectangle. If XYPixmap is specified, only the bit planes specified in plane-mask are transmitted, with the planes appearing from most significant to least significant in bit order. If ZPixmap is specified, then bits in all planes not specified in plane-mask are transmitted as zero. Range checking is not performed on plane-mask; extraneous bits are simply ignored. The returned depth is as specified when the drawable was created and is the same as a depth component in a FORMAT structure (in the connection setup), not a bits-per-pixel component. If the drawable is a window, its visual type is returned. If the drawable is a pixmap, the visual is None.

If the drawable is a pixmap, then the given rectangle must be wholly contained within the pixmap (or a Match error results). If the drawable is a window, the window must be viewable, and it must be the case that, if there were no inferiors or overlapping windows, the specified rectangle of the window would be fully visible on the screen and wholly contained within the outside edges of the window (or a Match error results). Note that the borders of the window can be included and read with this request. If the window has a backing store, then the backing-store contents are returned for regions of the window that are obscured by noninferior windows; otherwise, the returned contents of such obscured regions are undefined. Also undefined are the returned contents of visible regions of inferiors of different depth than the specified window. The pointer cursor image is not included in the contents returned.

This request is not general-purpose in the same sense as other graphics-related requests. It is intended specifically for rudimentary hardcopy support.

PolyText8

drawable: DRAWABLE
gc: GCONTEXT
x, y: INT16
items: LISTofTEXTITEM8
where:	 	 
TEXTITEM8:	 TEXTELT8 or FONT
TEXTELT8:	 [delta: INT8
string: STRING8]
Errors: Drawable, Font, GContext, Match
The x and y coordinates are relative to the drawable's origin and specify the baseline starting position (the initial character origin). Each text item is processed in turn. A font item causes the font to be stored in gc and to be used for subsequent text. Switching among fonts does not affect the next character origin. A text element delta specifies an additional change in the position along the x axis before the string is drawn; the delta is always added to the character origin. Each character image, as defined by the font in gc, is treated as an additional mask for a fill operation on the drawable.

All contained FONTs are always transmitted most significant byte first.

If a Font error is generated for an item, the previous items may have been drawn.

For fonts defined with 2-byte matrix indexing, each STRING8 byte is interpreted as a byte2 value of a CHAR2B with a byte1 value of zero.

GC components: function, plane-mask, fill-style, font, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin

PolyText16

drawable: DRAWABLE
gc: GCONTEXT
x, y: INT16
items: LISTofTEXTITEM16
where:	 	 
TEXTITEM16:	 TEXTELT16 or FONT
TEXTELT16:	 [delta: INT8
string: STRING16]
Errors: Drawable, Font, GContext, Match
This request is similar to PolyText8, except 2-byte (or 16-bit) characters are used. For fonts defined with linear indexing rather than 2-byte matrix indexing, the server will interpret each CHAR2B as a 16-bit number that has been transmitted most significant byte first (that is, byte1 of the CHAR2B is taken as the most significant byte).

ImageText8

drawable: DRAWABLE
gc: GCONTEXT
x, y: INT16
string: STRING8
Errors: Drawable, GContext, Match
The x and y coordinates are relative to the drawable's origin and specify the baseline starting position (the initial character origin). The effect is first to fill a destination rectangle with the background pixel defined in gc and then to paint the text with the foreground pixel. The upper-left corner of the filled rectangle is at:

	[x, y - font-ascent]
the width is:

	overall-width
and the height is:

	font-ascent + font-descent
The overall-width, font-ascent, and font-descent are as they would be returned by a QueryTextExtents call using gc and string.

The function and fill-style defined in gc are ignored for this request. The effective function is Copy, and the effective fill-style Solid.

For fonts defined with 2-byte matrix indexing, each STRING8 byte is interpreted as a byte2 value of a CHAR2B with a byte1 value of zero.

GC components: plane-mask, foreground, background, font, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask

ImageText16

drawable: DRAWABLE
gc: GCONTEXT
x, y: INT16
string: STRING16
Errors: Drawable, GContext, Match
This request is similar to ImageText8, except 2-byte (or 16-bit) characters are used. For fonts defined with linear indexing rather than 2-byte matrix indexing, the server will interpret each CHAR2B as a 16-bit number that has been transmitted most significant byte first (that is, byte1 of the CHAR2B is taken as the most significant byte).

CreateColormap

mid: COLORMAP
visual: VISUALID
window: WINDOW
alloc: { None, All}
Errors: Alloc, IDChoice, Match, Value, Window
This request creates a colormap of the specified visual type for the screen on which the window resides and associates the identifier mid with it. The visual type must be one supported by the screen (or a Match error results). The initial values of the colormap entries are undefined for classes GrayScale, PseudoColor, and DirectColor. For StaticGray, StaticColor, and TrueColor, the entries will have defined values, but those values are specific to the visual and are not defined by the core protocol. For StaticGray, StaticColor, and TrueColor, alloc must be specified as None (or a Match error results). For the other classes, if alloc is None, the colormap initially has no allocated entries, and clients can allocate entries.

If alloc is All, then the entire colormap is allocated writable. The initial values of all allocated entries are undefined. For GrayScale and PseudoColor, the effect is as if an AllocColorCells request returned all pixel values from zero to N - 1, where N is the colormap-entries value in the specified visual. For DirectColor, the effect is as if an AllocColorPlanes request returned a pixel value of zero and red-mask, green-mask, and blue-mask values containing the same bits as the corresponding masks in the specified visual. However, in all cases, none of these entries can be freed with FreeColors.

FreeColormap

cmap: COLORMAP
Errors: Colormap
This request deletes the association between the resource ID and the colormap and frees the colormap storage. If the colormap is an installed map for a screen, it is uninstalled (see UninstallColormap request). If the colormap is defined as the colormap for a window (by means of CreateWindow or ChangeWindowAttributes), the colormap for the window is changed to None, and a ColormapNotify event is generated. The protocol does not define the colors displayed for a window with a colormap of None.

This request has no effect on a default colormap for a screen.

CopyColormapAndFree

mid, src-cmap: COLORMAP
Errors: Alloc, Colormap, IDChoice
This request creates a colormap of the same visual type and for the same screen as src-cmap, and it associates identifier mid with it. It also moves all of the client's existing allocations from src-cmap to the new colormap with their color values intact and their read-only or writable characteristics intact, and it frees those entries in src-cmap. Color values in other entries in the new colormap are undefined. If src-cmap was created by the client with alloc All (see CreateColormap request), then the new colormap is also created with alloc All, all color values for all entries are copied from src-cmap, and then all entries in src-cmap are freed. If src-cmap was not created by the client with alloc All, then the allocations to be moved are all those pixels and planes that have been allocated by the client using either AllocColor, AllocNamedColor, AllocColorCells, or AllocColorPlanes and that have not been freed since they were allocated.

InstallColormap

cmap: COLORMAP
Errors: Colormap
This request makes this colormap an installed map for its screen. All windows associated with this colormap immediately display with true colors. As a side effect, additional colormaps might be implicitly installed or uninstalled by the server. Which other colormaps get installed or uninstalled is server-dependent except that the required list must remain installed.

If cmap is not already an installed map, a ColormapNotify event is generated on every window having cmap as an attribute. In addition, for every other colormap that is installed or uninstalled as a result of the request, a ColormapNotify event is generated on every window having that colormap as an attribute.

At any time, there is a subset of the installed maps that are viewed as an ordered list and are called the required list. The length of the required list is at most M, where M is the min-installed-maps specified for the screen in the connection setup. The required list is maintained as follows. When a colormap is an explicit argument to InstallColormap, it is added to the head of the list; the list is truncated at the tail, if necessary, to keep the length of the list to at most M. When a colormap is an explicit argument to UninstallColormap and it is in the required list, it is removed from the list. A colormap is not added to the required list when it is installed implicitly by the server, and the server cannot implicitly uninstall a colormap that is in the required list.

Initially the default colormap for a screen is installed (but is not in the required list).

UninstallColormap

cmap: COLORMAP
Errors: Colormap
If cmap is on the required list for its screen (see InstallColormap request), it is removed from the list. As a side effect, cmap might be uninstalled, and additional colormaps might be implicitly installed or uninstalled. Which colormaps get installed or uninstalled is server-dependent except that the required list must remain installed.

If cmap becomes uninstalled, a ColormapNotify event is generated on every window having cmap as an attribute. In addition, for every other colormap that is installed or uninstalled as a result of the request, a ColormapNotify event is generated on every window having that colormap as an attribute.

ListInstalledColormaps

window: WINDOW
▶
cmaps: LISTofCOLORMAP
Errors: Window
This request returns a list of the currently installed colormaps for the screen of the specified window. The order of colormaps is not significant, and there is no explicit indication of the required list (see InstallColormap request).

AllocColor

cmap: COLORMAP
red, green, blue: CARD16
▶
pixel: CARD32
red, green, blue: CARD16
Errors: Alloc, Colormap
This request allocates a read-only colormap entry corresponding to the closest RGB values provided by the hardware. It also returns the pixel and the RGB values actually used. Multiple clients requesting the same effective RGB values can be assigned the same read-only entry, allowing entries to be shared.

AllocNamedColor

cmap: COLORMAP
name: STRING8
▶
pixel: CARD32
exact-red, exact-green, exact-blue: CARD16
visual-red, visual-green, visual-blue: CARD16
Errors: Alloc, Colormap, Name
This request looks up the named color with respect to the screen associated with the colormap. Then, it does an AllocColor on cmap. The name should use the ISO Latin-1 encoding, and uppercase and lowercase do not matter. The exact RGB values specify the true values for the color, and the visual values specify the values actually used in the colormap.

AllocColorCells

cmap: COLORMAP
colors, planes: CARD16
contiguous: BOOL
▶
pixels, masks: LISTofCARD32
Errors: Alloc, Colormap, Value
The number of colors must be positive, and the number of planes must be nonnegative (or a Value error results). If C colors and P planes are requested, then C pixels and P masks are returned. No mask will have any bits in common with any other mask or with any of the pixels. By ORing together masks and pixels, C*%2 sup P% distinct pixels can be produced; all of these are allocated writable by the request. For GrayScale or PseudoColor, each mask will have exactly one bit set to 1; for DirectColor, each will have exactly three bits set to 1. If contiguous is True and if all masks are ORed together, a single contiguous set of bits will be formed for GrayScale or PseudoColor, and three contiguous sets of bits (one within each pixel subfield) for DirectColor. The RGB values of the allocated entries are undefined.

AllocColorPlanes

cmap: COLORMAP
colors, reds, greens, blues: CARD16
contiguous: BOOL
▶
pixels: LISTofCARD32
red-mask, green-mask, blue-mask: CARD32
Errors: Alloc, Colormap, Value
The number of colors must be positive, and the reds, greens, and blues must be nonnegative (or a Value error results). If C colors, R reds, G greens, and B blues are requested, then C pixels are returned, and the masks have R, G, and B bits set, respectively. If contiguous is True, then each mask will have a contiguous set of bits. No mask will have any bits in common with any other mask or with any of the pixels. For DirectColor, each mask will lie within the corresponding pixel subfield. By ORing together subsets of masks with pixels, C*%2 sup R+G+B% distinct pixels can be produced; all of these are allocated writable by the request. The initial RGB values of the allocated entries are undefined. In the colormap, there are only C*%2 sup R% independent red entries, C*%2 sup G% independent green entries, and C*%2 sup B% independent blue entries. This is true even for PseudoColor. When the colormap entry for a pixel value is changed using StoreColors or StoreNamedColor, the pixel is decomposed according to the masks and the corresponding independent entries are updated.

FreeColors

cmap: COLORMAP
pixels: LISTofCARD32
plane-mask: CARD32
Errors: Access, Colormap, Value
The plane-mask should not have any bits in common with any of the pixels. The set of all pixels is produced by ORing together subsets of plane-mask with the pixels. The request frees all of these pixels that were allocated by the client (using AllocColor, AllocNamedColor, AllocColorCells, and AllocColorPlanes). Note that freeing an individual pixel obtained from AllocColorPlanes may not actually allow it to be reused until all of its related pixels are also freed. Similarly, a read-only entry is not actually freed until it has been freed by all clients, and if a client allocates the same read-only entry multiple times, it must free the entry that many times before the entry is actually freed.

All specified pixels that are allocated by the client in cmap are freed, even if one or more pixels produce an error. A Value error is generated if a specified pixel is not a valid index into cmap. An Access error is generated if a specified pixel is not allocated by the client (that is, is unallocated or is only allocated by another client) or if the colormap was created with all entries writable (using an alloc value of All in CreateColormap). If more than one pixel is in error, it is arbitrary as to which pixel is reported.

StoreColors

cmap: COLORMAP
items: LISTofCOLORITEM
where:
COLORITEM:	[pixel: CARD32
 	 do-red, do-green, do-blue: BOOL
 	 red, green, blue: CARD16]
Errors: Access, Colormap, Value
This request changes the colormap entries of the specified pixels. The do-red, do-green, and do-blue fields indicate which components should actually be changed. If the colormap is an installed map for its screen, the changes are visible immediately.

All specified pixels that are allocated writable in cmap (by any client) are changed, even if one or more pixels produce an error. A Value error is generated if a specified pixel is not a valid index into cmap, and an Access error is generated if a specified pixel is unallocated or is allocated read-only. If more than one pixel is in error, it is arbitrary as to which pixel is reported.

StoreNamedColor

cmap: COLORMAP
pixel: CARD32
name: STRING8
do-red, do-green, do-blue: BOOL
Errors: Access, Colormap, Name, Value
This request looks up the named color with respect to the screen associated with cmap and then does a StoreColors in cmap. The name should use the ISO Latin-1 encoding, and uppercase and lowercase do not matter. The Access and Value errors are the same as in StoreColors.

QueryColors

cmap: COLORMAP
pixels: LISTofCARD32
▶
colors: LISTofRGB
where:
RGB: [red, green, blue: CARD16]
Errors: Colormap, Value
This request returns the hardware-specific color values stored in cmap for the specified pixels. The values returned for an unallocated entry are undefined. A Value error is generated if a pixel is not a valid index into cmap. If more than one pixel is in error, it is arbitrary as to which pixel is reported.

LookupColor

cmap: COLORMAP
name: STRING8
▶
exact-red, exact-green, exact-blue: CARD16
visual-red, visual-green, visual-blue: CARD16
Errors: Colormap, Name
This request looks up the string name of a color with respect to the screen associated with cmap and returns both the exact color values and the closest values provided by the hardware with respect to the visual type of cmap. The name should use the ISO Latin-1 encoding, and uppercase and lowercase do not matter.

CreateCursor

cid: CURSOR
source: PIXMAP
mask: PIXMAP or None
fore-red, fore-green, fore-blue: CARD16
back-red, back-green, back-blue: CARD16
x, y: CARD16
Errors: Alloc, IDChoice, Match, Pixmap
This request creates a cursor and associates identifier cid with it. The foreground and background RGB values must be specified, even if the server only has a StaticGray or GrayScale screen. The foreground is used for the bits set to 1 in the source, and the background is used for the bits set to 0. Both source and mask (if specified) must have depth one (or a Match error results), but they can have any root. The mask pixmap defines the shape of the cursor. That is, the bits set to 1 in the mask define which source pixels will be displayed, and where the mask has bits set to 0, the corresponding bits of the source pixmap are ignored. If no mask is given, all pixels of the source are displayed. The mask, if present, must be the same size as the source (or a Match error results). The x and y coordinates define the hotspot relative to the source's origin and must be a point within the source (or a Match error results).

The components of the cursor may be transformed arbitrarily to meet display limitations.

The pixmaps can be freed immediately if no further explicit references to them are to be made.

Subsequent drawing in the source or mask pixmap has an undefined effect on the cursor. The server might or might not make a copy of the pixmap.

CreateGlyphCursor

cid: CURSOR
source-font: FONT
mask-font: FONT or None
source-char, mask-char: CARD16
fore-red, fore-green, fore-blue: CARD16
back-red, back-green, back-blue: CARD16
Errors: Alloc, Font, IDChoice, Value
This request is similar to CreateCursor, except the source and mask bitmaps are obtained from the specified font glyphs. The source-char must be a defined glyph in source-font, and if mask-font is given, mask-char must be a defined glyph in mask-font (or a Value error results). The mask font and character are optional. The origins of the source and mask (if it is defined) glyphs are positioned coincidently and define the hotspot. The source and mask need not have the same bounding box metrics, and there is no restriction on the placement of the hotspot relative to the bounding boxes. If no mask is given, all pixels of the source are displayed. Note that source-char and mask-char are CARD16, not CHAR2B. For 2-byte matrix fonts, the 16-bit value should be formed with byte1 in the most significant byte and byte2 in the least significant byte.

The components of the cursor may be transformed arbitrarily to meet display limitations.

The fonts can be freed immediately if no further explicit references to them are to be made.

FreeCursor

cursor: CURSOR
Errors: Cursor
This request deletes the association between the resource ID and the cursor. The cursor storage will be freed when no other resource references it.

RecolorCursor

cursor: CURSOR
fore-red, fore-green, fore-blue: CARD16
back-red, back-green, back-blue: CARD16
Errors: Cursor
This request changes the color of a cursor. If the cursor is being displayed on a screen, the change is visible immediately.

QueryBestSize

class: { Cursor, Tile, Stipple}
drawable: DRAWABLE
width, height: CARD16
▶
width, height: CARD16
Errors: Drawable, Match, Value
This request returns the best size that is closest to the argument size. For Cursor, this is the largest size that can be fully displayed. For Tile, this is the size that can be tiled fastest. For Stipple, this is the size that can be stippled fastest.

For Cursor, the drawable indicates the desired screen. For Tile and Stipple, the drawable indicates the screen and also possibly the window class and depth. An InputOnly window cannot be used as the drawable for Tile or Stipple (or a Match error results).

QueryExtension

name: STRING8
▶
present: BOOL
major-opcode: CARD8
first-event: CARD8
first-error: CARD8
This request determines if the named extension is present. If so, the major opcode for the extension is returned, if it has one. Otherwise, zero is returned. Any minor opcode and the request formats are specific to the extension. If the extension involves additional event types, the base event type code is returned. Otherwise, zero is returned. The format of the events is specific to the extension. If the extension involves additional error codes, the base error code is returned. Otherwise, zero is returned. The format of additional data in the errors is specific to the extension.

The extension name should use the ISO Latin-1 encoding, and uppercase and lowercase matter.

ListExtensions

▶
names: LISTofSTRING8
This request returns a list of all extensions supported by the server.

SetModifierMapping

keycodes-per-modifier: CARD8
keycodes: LISTofKEYCODE
▶
status: { Success, Busy, Failed}
Errors: Alloc, Value
This request specifies the keycodes (if any) of the keys to be used as modifiers. The number of keycodes in the list must be 8*keycodes-per-modifier (or a Length error results). The keycodes are divided into eight sets, with each set containing keycodes-per-modifier elements. The sets are assigned to the modifiers Shift, Lock, Control, Mod1, Mod2, Mod3, Mod4, and Mod5, in order. Only nonzero keycode values are used within each set; zero values are ignored. All of the nonzero keycodes must be in the range specified by min-keycode and max-keycode in the connection setup (or a Value error results). The order of keycodes within a set does not matter. If no nonzero values are specified in a set, the use of the corresponding modifier is disabled, and the modifier bit will always be zero. Otherwise, the modifier bit will be one whenever at least one of the keys in the corresponding set is in the down position.

A server can impose restrictions on how modifiers can be changed (for example, if certain keys do not generate up transitions in hardware, if auto-repeat cannot be disabled on certain keys, or if multiple keys per modifier are not supported). The status reply is Failed if some such restriction is violated, and none of the modifiers is changed.

If the new nonzero keycodes specified for a modifier differ from those currently defined and any (current or new) keys for that modifier are logically in the down state, then the status reply is Busy, and none of the modifiers is changed.

This request generates a MappingNotify event on a Success status.

GetModifierMapping

▶
keycodes-per-modifier: CARD8
keycodes: LISTofKEYCODE
This request returns the keycodes of the keys being used as modifiers. The number of keycodes in the list is 8*keycodes-per-modifier. The keycodes are divided into eight sets, with each set containing keycodes-per-modifier elements. The sets are assigned to the modifiers Shift, Lock, Control, Mod1, Mod2, Mod3, Mod4, and Mod5, in order. The keycodes-per-modifier value is chosen arbitrarily by the server; zeroes are used to fill in unused elements within each set. If only zero values are given in a set, the use of the corresponding modifier has been disabled. The order of keycodes within each set is chosen arbitrarily by the server.

ChangeKeyboardMapping

first-keycode: KEYCODE
keysyms-per-keycode: CARD8
keysyms: LISTofKEYSYM
Errors: Alloc, Value
This request defines the symbols for the specified number of keycodes, starting with the specified keycode. The symbols for keycodes outside this range remained unchanged. The number of elements in the keysyms list must be a multiple of keysyms-per-keycode (or a Length error results). The first-keycode must be greater than or equal to min-keycode as returned in the connection setup (or a Value error results) and:

	first-keycode + (keysyms-length / keysyms-per-keycode) - 1
must be less than or equal to max-keycode as returned in the connection setup (or a Value error results). KEYSYM number N (counting from zero) for keycode K has an index (counting from zero) of:

	(K - first-keycode) * keysyms-per-keycode + N
in keysyms. The keysyms-per-keycode can be chosen arbitrarily by the client to be large enough to hold all desired symbols. A special KEYSYM value of NoSymbol should be used to fill in unused elements for individual keycodes. It is legal for NoSymbol to appear in nontrailing positions of the effective list for a keycode.

This request generates a MappingNotify event.

There is no requirement that the server interpret this mapping; it is merely stored for reading and writing by clients (see section 5).

GetKeyboardMapping

first-keycode: KEYCODE
count: CARD8
▶
keysyms-per-keycode: CARD8
keysyms: LISTofKEYSYM
Errors: Value
This request returns the symbols for the specified number of keycodes, starting with the specified keycode. The first-keycode must be greater than or equal to min-keycode as returned in the connection setup (or a Value error results), and:

	first-keycode + count - 1
must be less than or equal to max-keycode as returned in the connection setup (or a Value error results). The number of elements in the keysyms list is:

	count * keysyms-per-keycode
and KEYSYM number N (counting from zero) for keycode K has an index (counting from zero) of:

	(K - first-keycode) * keysyms-per-keycode + N
in keysyms. The keysyms-per-keycode value is chosen arbitrarily by the server to be large enough to report all requested symbols. A special KEYSYM value of NoSymbol is used to fill in unused elements for individual keycodes.

ChangeKeyboardControl

value-mask: BITMASK
value-list: LISTofVALUE
Errors: Match, Value
This request controls various aspects of the keyboard. The value-mask and value-list specify which controls are to be changed. The possible values are:

Control	Type
key-click-percent	INT8
bell-percent	INT8
bell-pitch	INT16
bell-duration	INT16
led	CARD8
led-mode	 { On, Off }
key	KEYCODE
auto-repeat-mode	 { On, Off, Default }
The key-click-percent sets the volume for key clicks between 0 (off) and 100 (loud) inclusive, if possible. Setting to -1 restores the default. Other negative values generate a Value error.

The bell-percent sets the base volume for the bell between 0 (off) and 100 (loud) inclusive, if possible. Setting to -1 restores the default. Other negative values generate a Value error.

The bell-pitch sets the pitch (specified in Hz) of the bell, if possible. Setting to -1 restores the default. Other negative values generate a Value error.

The bell-duration sets the duration of the bell (specified in milliseconds), if possible. Setting to -1 restores the default. Other negative values generate a Value error.

If both led-mode and led are specified, then the state of that LED is changed, if possible. If only led-mode is specified, then the state of all LEDs are changed, if possible. At most 32 LEDs, numbered from one, are supported. No standard interpretation of LEDs is defined. It is a Match error if an led is specified without an led-mode.

If both auto-repeat-mode and key are specified, then the auto-repeat mode of that key is changed, if possible. If only auto-repeat-mode is specified, then the global auto-repeat mode for the entire keyboard is changed, if possible, without affecting the per-key settings. It is a Match error if a key is specified without an auto-repeat-mode. Each key has an individual mode of whether or not it should auto-repeat and a default setting for that mode. In addition, there is a global mode of whether auto-repeat should be enabled or not and a default setting for that mode. When the global mode is On, keys should obey their individual auto-repeat modes. When the global mode is Off, no keys should auto-repeat. An auto-repeating key generates alternating KeyPress and KeyRelease events. When a key is used as a modifier, it is desirable for the key not to auto-repeat, regardless of the auto-repeat setting for that key.

A bell generator connected with the console but not directly on the keyboard is treated as if it were part of the keyboard.

The order in which controls are verified and altered is server-dependent. If an error is generated, a subset of the controls may have been altered.

GetKeyboardControl

▶
key-click-percent: CARD8
bell-percent: CARD8
bell-pitch: CARD16
bell-duration: CARD16
led-mask: CARD32
global-auto-repeat: { On, Off}
auto-repeats: LISTofCARD8
This request returns the current control values for the keyboard. For the LEDs, the least significant bit of led-mask corresponds to LED one, and each one bit in led-mask indicates an LED that is lit. The auto-repeats is a bit vector; each one bit indicates that auto-repeat is enabled for the corresponding key. The vector is represented as 32 bytes. Byte N (from 0) contains the bits for keys 8N to 8N + 7, with the least significant bit in the byte representing key 8N.

Bell

percent: INT8
Errors: Value
This request rings the bell on the keyboard at a volume relative to the base volume for the keyboard, if possible. Percent can range from -100 to 100 inclusive (or a Value error results). The volume at which the bell is rung when percent is nonnegative is:

	base - [(base * percent) / 100] + percent
When percent is negative, it is:

	base + [(base * percent) / 100]
SetPointerMapping

map: LISTofCARD8
▶
status: { Success, Busy}
Errors: Value
This request sets the mapping of the pointer. Elements of the list are indexed starting from one. The length of the list must be the same as GetPointerMapping would return (or a Value error results). The index is a core button number, and the element of the list defines the effective number.

A zero element disables a button. Elements are not restricted in value by the number of physical buttons, but no two elements can have the same nonzero value (or a Value error results).

If any of the buttons to be altered are logically in the down state, the status reply is Busy, and the mapping is not changed.

This request generates a MappingNotify event on a Success status.

GetPointerMapping

▶
map: LISTofCARD8
This request returns the current mapping of the pointer. Elements of the list are indexed starting from one. The length of the list indicates the number of physical buttons.

The nominal mapping for a pointer is the identity mapping: map[i]=i.

ChangePointerControl

do-acceleration, do-threshold: BOOL
acceleration-numerator, acceleration-denominator: INT16
threshold: INT16
Errors: Value
This request defines how the pointer moves. The acceleration is a multiplier for movement expressed as a fraction. For example, specifying 3/1 means the pointer moves three times as fast as normal. The fraction can be rounded arbitrarily by the server. Acceleration only takes effect if the pointer moves more than threshold number of pixels at once and only applies to the amount beyond the threshold. Setting a value to -1 restores the default. Other negative values generate a Value error, as does a zero value for acceleration-denominator.

GetPointerControl

▶
acceleration-numerator, acceleration-denominator: CARD16
threshold: CARD16
This request returns the current acceleration and threshold for the pointer.

SetScreenSaver

timeout, interval: INT16
prefer-blanking: { Yes, No, Default}
allow-exposures: { Yes, No, Default}
Errors: Value
The timeout and interval are specified in seconds; setting a value to -1 restores the default. Other negative values generate a Value error. If the timeout value is zero, screen-saver is disabled (but an activated screen-saver is not deactivated). If the timeout value is nonzero, screen-saver is enabled. Once screen-saver is enabled, if no input from the keyboard or pointer is generated for timeout seconds, screen-saver is activated. For each screen, if blanking is preferred and the hardware supports video blanking, the screen will simply go blank. Otherwise, if either exposures are allowed or the screen can be regenerated without sending exposure events to clients, the screen is changed in a server-dependent fashion to avoid phosphor burn. Otherwise, the state of the screens does not change, and screen-saver is not activated. At the next keyboard or pointer input or at the next ForceScreenSaver with mode Reset, screen-saver is deactivated, and all screen states are restored.

If the server-dependent screen-saver method is amenable to periodic change, interval serves as a hint about how long the change period should be, with zero hinting that no periodic change should be made. Examples of ways to change the screen include scrambling the color map periodically, moving an icon image about the screen periodically, or tiling the screen with the root window background tile, randomly reorigined periodically.

GetScreenSaver

▶
timeout, interval: CARD16
prefer-blanking: { Yes, No}
allow-exposures: { Yes, No}
This request returns the current screen-saver control values.

ForceScreenSaver

mode: { Activate, Reset}
Errors: Value
If the mode is Activate and screen-saver is currently deactivated, then screen-saver is activated (even if screen-saver has been disabled with a timeout value of zero). If the mode is Reset and screen-saver is currently enabled, then screen-saver is deactivated (if it was activated), and the activation timer is reset to its initial state as if device input had just been received.

ChangeHosts

mode: { Insert, Delete}
host: HOST
Errors: Access, Value
This request adds or removes the specified host from the access control list. When the access control mechanism is enabled and a client attempts to establish a connection to the server, the host on which the client resides must be in the access control list, or the client must have been granted permission by a server-dependent method, or the server will refuse the connection.

The client must reside on the same host as the server and/or have been granted permission by a server-dependent method to execute this request (or an Access error results).

An initial access control list can usually be specified, typically by naming a file that the server reads at startup and reset.

The following address families are defined. A server is not required to support these families and may support families not listed here. Use of an unsupported family, an improper address format, or an improper address length within a supported family results in a Value error.

For the Internet family, the address must be four bytes long. The address bytes are in standard IP order; the server performs no automatic swapping on the address bytes. The Internet family supports IP version 4 addresses only.

For the InternetV6 family, the address must be sixteen bytes long. The address bytes are in standard IP order; the server performs no automatic swapping on the address bytes. The InternetV6 family supports IP version 6 addresses only.

For the DECnet family, the server performs no automatic swapping on the address bytes. A Phase IV address is two bytes long: the first byte contains the least significant eight bits of the node number, and the second byte contains the most significant two bits of the node number in the least significant two bits of the byte and the area in the most significant six bits of the byte.

For the Chaos family, the address must be two bytes long. The host number is always the first byte in the address, and the subnet number is always the second byte. The server performs no automatic swapping on the address bytes.

For the ServerInterpreted family, the address may be of any length up to 65535 bytes. The address consists of two strings of ASCII characters, separated by a byte with a value of 0. The first string represents the type of address, and the second string contains the address value. Address types and the syntax for their associated values will be registered via the X.Org Registry. Implementors who wish to add implementation specific types may register a unique prefix with the X.Org registry to prevent namespace collisions.

Use of a host address in the ChangeHosts request is deprecated. It is only useful when a host has a unique, constant address, a requirement that is increasingly unmet as sites adopt dynamically assigned addresses, network address translation gateways, IPv6 link local addresses, and various other technologies. It also assumes all users of a host share equivalent access rights, and as such has never been suitable for many multi-user machine environments. Instead, more secure forms of authentication, such as those based on shared secrets or public key encryption, are recommended.

ListHosts

▶
mode: { Enabled, Disabled}
hosts: LISTofHOST
This request returns the hosts on the access control list and whether use of the list at connection setup is currently enabled or disabled.

Each HOST is padded to a multiple of four bytes.

SetAccessControl

mode: { Enable, Disable}
Errors: Access, Value
This request enables or disables the use of the access control list at connection setups.

The client must reside on the same host as the server and/or have been granted permission by a server-dependent method to execute this request (or an Access error results).

SetCloseDownMode

mode: { Destroy, RetainPermanent, RetainTemporary}
Errors: Value
This request defines what will happen to the client's resources at connection close. A connection starts in Destroy mode. The meaning of the close-down mode is described in section 10.

KillClient

resource: CARD32 or AllTemporary
Errors: Value
If a valid resource is specified, KillClient forces a close-down of the client that created the resource. If the client has already terminated in either RetainPermanent or RetainTemporary mode, all of the client's resources are destroyed (see section 10). If AllTemporary is specified, then the resources of all clients that have terminated in RetainTemporary are destroyed.

NoOperation

This request has no arguments and no results, but the request length field allows the request to be any multiple of four bytes in length. The bytes contained in the request are uninterpreted by the server.

This request can be used in its minimum four byte form as padding where necessary by client libraries that find it convenient to force requests to begin on 64-bit boundaries.
* Fri 06 Jun 2014 02:12:04 PM JST
▶
* Fri 06 Jun 2014 02:14:30 PM JST
<f5>
* Fri 06 Jun 2014 02:49:56 PM JST
AllowEvents
* Fri 06 Jun 2014 02:54:45 PM JST
AllowEvents
* Fri 06 Jun 2014 02:55:23 PM JST
VoidCookie
* Fri 06 Jun 2014 02:55:36 PM JST
Value
* Fri 06 Jun 2014 02:55:44 PM JST
        @Return:
        VoidCookie

        @Error:
        BadValue

* Fri 06 Jun 2014 02:56:07 PM JST
AllowEvents

mode: { AsyncPointer, SyncPointer, ReplayPointer, AsyncKeyboard,
SyncKeyboard, ReplayKeyboard, AsyncBoth, SyncBoth}
time: TIMESTAMP or CurrentTime

Errors: Value

This request releases some queued events if the client has caused a device to
freeze. The request has no effect if the specified time is earlier than the
last-grab time of the most recent active grab for the client or if the specified
time is later than the current server time.

For AsyncPointer, if the pointer is frozen by the client, pointer event
processing continues normally. If the pointer is frozen twice by the client on
behalf of two separate grabs, AsyncPointer thaws for both. AsyncPointer has no
effect if the pointer is not frozen by the client, but the pointer need not be
grabbed by the client.

For SyncPointer, if the pointer is frozen and actively grabbed by the client,
pointer event processing continues normally until the next ButtonPress or
ButtonRelease event is reported to the client, at which time the pointer again
appears to freeze. However, if the reported event causes the pointer grab to be
released, then the pointer does not freeze. SyncPointer has no effect if the
pointer is not frozen by the client or if the pointer is not grabbed by the
client.

For ReplayPointer, if the pointer is actively grabbed by the client and is
frozen as the result of an event having been sent to the client (either from the
activation of a GrabButton or from a previous AllowEvents with mode SyncPointer
but not from a GrabPointer), then the pointer grab is released and that event is
completely reprocessed, this time ignoring any passive grabs at or above
(towards the root) the grab-window of the grab just released. The request has no
effect if the pointer is not grabbed by the client or if the pointer is not
frozen as the result of an event.

For AsyncKeyboard, if the keyboard is frozen by the client, keyboard event
processing continues normally. If the keyboard is frozen twice by the client on
behalf of two separate grabs, AsyncKeyboard thaws for both. AsyncKeyboard has no
effect if the keyboard is not frozen by the client, but the keyboard need not be
grabbed by the client.

For SyncKeyboard, if the keyboard is frozen and actively grabbed by the client,
keyboard event processing continues normally until the next KeyPress or
KeyRelease event is reported to the client, at which time the keyboard again
appears to freeze. However, if the reported event causes the keyboard grab to be
released, then the keyboard does not freeze. SyncKeyboard has no effect if the
keyboard is not frozen by the client or if the keyboard is not grabbed by the
client.

For ReplayKeyboard, if the keyboard is actively grabbed by the client and is
frozen as the result of an event having been sent to the client (either from the
activation of a GrabKey or from a previous AllowEvents with mode SyncKeyboard
but not from a GrabKeyboard), then the keyboard grab is released and that event
is completely reprocessed, this time ignoring any passive grabs at or above
(towards the root) the grab-window of the grab just released. The request has no
effect if the keyboard is not grabbed by the client or if the keyboard is not
frozen as the result of an event.

For SyncBoth, if both pointer and keyboard are frozen by the client, event
processing (for both devices) continues normally until the next ButtonPress,
ButtonRelease, KeyPress, or KeyRelease event is reported to the client for a
grabbed device (button event for the pointer, key event for the keyboard), at
which time the devices again appear to freeze. However, if the reported event
causes the grab to be released, then the devices do not freeze (but if the other
device is still grabbed, then a subsequent event for it will still cause both
devices to freeze). SyncBoth has no effect unless both pointer and keyboard are
frozen by the client. If the pointer or keyboard is frozen twice by the client
on behalf of two separate grabs, SyncBoth thaws for both (but a subsequent
freeze for SyncBoth will only freeze each device once).

For AsyncBoth, if the pointer and the keyboard are frozen by the client, event
processing for both devices continues normally. If a device is frozen twice by
the client on behalf of two separate grabs, AsyncBoth thaws for both. AsyncBoth
has no effect unless both pointer and keyboard are frozen by the client.

AsyncPointer, SyncPointer, and ReplayPointer have no effect on processing of
keyboard events. AsyncKeyboard, SyncKeyboard, and ReplayKeyboard have no effect
on processing of pointer events.

It is possible for both a pointer grab and a keyboard grab to be active
simultaneously (by the same or different clients). When a device is frozen on
behalf of either grab, no event processing is performed for the device. It is
possible for a single device to be frozen because of both grabs. In this case,
the freeze must be released on behalf of both grabs before events can again be
processed. If a device is frozen twice by a single client, then a single
AllowEvents releases both.


* Fri 06 Jun 2014 02:56:54 PM JST
GrabServer
* Fri 06 Jun 2014 02:57:57 PM JST
GrabServer

This request disables processing of requests and close-downs on all connections
other than the one this request arrived on.

* Fri 06 Jun 2014 02:58:17 PM JST
VoidCookie
* Fri 06 Jun 2014 02:58:25 PM JST

* Fri 06 Jun 2014 02:58:25 PM JST

* Fri 06 Jun 2014 02:58:25 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 02:58:25 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 02:58:25 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 02:58:25 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 02:58:26 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 02:58:26 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 02:58:26 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 02:58:28 PM JST

* Fri 06 Jun 2014 02:58:28 PM JST

* Fri 06 Jun 2014 02:58:28 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 02:58:29 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 02:58:29 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 02:58:29 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 02:58:29 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 02:58:29 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 02:58:29 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 02:59:13 PM JST
UngrabServer
* Fri 06 Jun 2014 03:00:03 PM JST

* Fri 06 Jun 2014 03:00:03 PM JST

* Fri 06 Jun 2014 03:00:03 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:00:03 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:00:03 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:00:03 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:00:03 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:00:06 PM JST

* Fri 06 Jun 2014 03:00:06 PM JST

* Fri 06 Jun 2014 03:00:06 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:00:08 PM JST

* Fri 06 Jun 2014 03:00:08 PM JST

* Fri 06 Jun 2014 03:00:08 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:00:09 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:00:09 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:00:09 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:00:09 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:00:10 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:00:10 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:00:14 PM JST
VoidCookie
* Fri 06 Jun 2014 03:00:34 PM JST
UngrabServer

This request restarts processing of requests and close-downs on other
connections.

* Fri 06 Jun 2014 03:01:56 PM JST
QueryPointer
* Fri 06 Jun 2014 03:02:13 PM JST

* Fri 06 Jun 2014 03:02:13 PM JST

* Fri 06 Jun 2014 03:02:13 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:02:13 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:02:14 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:02:14 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:02:14 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:02:14 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:02:14 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:02:16 PM JST

* Fri 06 Jun 2014 03:02:16 PM JST

* Fri 06 Jun 2014 03:02:17 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:02:17 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:02:17 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:02:17 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:02:17 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:02:17 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:02:18 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 03:02:23 PM JST
QueryPointerCookie
* Fri 06 Jun 2014 03:03:32 PM JST
QueryPointer

window: WINDOW

root: WINDOW
child: WINDOW or None
same-screen: BOOL
root-x, root-y, win-x, win-y: INT16
mask: SETofKEYBUTMASK

Errors: Window

The root window the pointer is logically on and the pointer coordinates relative
to the root's origin are returned. If same-screen is False, then the pointer is
not on the same screen as the argument window, child is None, and win-x and
win-y are zero. If same-screen is True, then win-x and win-y are the pointer
coordinates relative to the argument window's origin, and child is the child
containing the pointer, if any. The current logical state of the modifier keys
and the buttons are also returned. Note that the logical state of a device (as
seen by means of the protocol) may lag the physical state if device event
processing is frozen.


* Fri 06 Jun 2014 03:04:06 PM JST
GetMotionEvents
* Fri 06 Jun 2014 03:04:27 PM JST
GetMotionEvents

start, stop: TIMESTAMP or CurrentTime
window: WINDOW

events: LISTofTIMECOORD
where:
TIMECOORD:	[x, y: INT16
time: TIMESTAMP]

Errors: Window

This request returns all events in the motion history buffer that fall between
the specified start and stop times (inclusive) and that have coordinates that
lie within (including borders) the specified window at its present
placement. The x and y coordinates are reported relative to the origin of the
window.

If the start time is later than the stop time or if the start time is in the
future, no events are returned. If the stop time is in the future, it is
equivalent to specifying CurrentTime.


* Fri 06 Jun 2014 03:04:53 PM JST
GetMotionEventsCookie
* Fri 06 Jun 2014 03:05:21 PM JST
Window
* Fri 06 Jun 2014 03:05:35 PM JST
TranslateCoordinates
* Fri 06 Jun 2014 03:06:46 PM JST
TranslateCoordinatesCookie
* Fri 06 Jun 2014 03:07:07 PM JST
Window
* Fri 06 Jun 2014 03:07:16 PM JST
TranslateCoordinates

src-window, dst-window: WINDOW
src-x, src-y: INT16

same-screen: BOOL
child: WINDOW or None
dst-x, dst-y: INT16

Errors: Window

The src-x and src-y coordinates are taken relative to src-window's origin and
are returned as dst-x and dst-y coordinates relative to dst-window's origin. If
same-screen is False, then src-window and dst-window are on different screens,
and dst-x and dst-y are zero. If the coordinates are contained in a mapped child
of dst-window, then that child is returned.


* Fri 06 Jun 2014 03:08:20 PM JST
WarpPointer
* Fri 06 Jun 2014 03:08:46 PM JST
VoidCookie
* Fri 06 Jun 2014 03:09:04 PM JST
Window
* Fri 06 Jun 2014 03:10:54 PM JST
WarpPointer

src-window: WINDOW or None
dst-window: WINDOW or None
src-x, src-y: INT16
src-width, src-height: CARD16
dst-x, dst-y: INT16

Errors: Window

If dst-window is None, this request moves the pointer by offsets [dst-x, dst-y]
relative to the current position of the pointer. If dst-window is a window, this
request moves the pointer to [dst-x, dst-y] relative to dst-window's
origin. However, if src-window is not None, the move only takes place if
src-window contains the pointer and the pointer is contained in the specified
rectangle of src-window.

The src-x and src-y coordinates are relative to src-window's origin. If
src-height is zero, it is replaced with the current height of src-window minus
src-y. If src-width is zero, it is replaced with the current width of src-window
minus src-x.

This request cannot be used to move the pointer outside the confine-to window of
an active pointer grab. An attempt will only move the pointer as far as the
closest edge of the confine-to window.

This request will generate events just as if the user had instantaneously moved
the pointer.


* Fri 06 Jun 2014 03:11:10 PM JST
SetInputFocus
* Fri 06 Jun 2014 03:11:47 PM JST
VoidCookie
* Fri 06 Jun 2014 03:12:00 PM JST
Match, Value, Window
* Fri 06 Jun 2014 03:12:37 PM JST
SetInputFocus

focus: WINDOW or PointerRoot or None
revert-to: { Parent, PointerRoot, None}
time: TIMESTAMP or CurrentTime

Errors: Match, Value, Window

This request changes the input focus and the last-focus-change time. The request
has no effect if the specified time is earlier than the current
last-focus-change time or is later than the current server time. Otherwise, the
last-focus-change time is set to the specified time with CurrentTime replaced by
the current server time.

If None is specified as the focus, all keyboard events are discarded until a new
focus window is set. In this case, the revert-to argument is ignored.

If a window is specified as the focus, it becomes the keyboard's focus
window. If a generated keyboard event would normally be reported to this window
or one of its inferiors, the event is reported normally. Otherwise, the event is
reported with respect to the focus window.

If PointerRoot is specified as the focus, the focus window is dynamically taken
to be the root window of whatever screen the pointer is on at each keyboard
event. In this case, the revert-to argument is ignored.

This request generates FocusIn and FocusOut events.

The specified focus window must be viewable at the time of the request (or a
Match error results). If the focus window later becomes not viewable, the new
focus window depends on the revert-to argument. If revert-to is Parent, the
focus reverts to the parent (or the closest viewable ancestor) and the new
revert-to value is taken to be None. If revert-to is PointerRoot or None, the
focus reverts to that value. When the focus reverts, FocusIn and FocusOut events
are generated, but the last-focus-change time is not affected.


* Fri 06 Jun 2014 03:14:10 PM JST
GetInputFocus
* Fri 06 Jun 2014 03:14:32 PM JST
GetInputFocusCookie
* Fri 06 Jun 2014 03:14:42 PM JST
GetInputFocus


focus: WINDOW or PointerRoot or None
revert-to: { Parent, PointerRoot, None}
This request returns the current focus state.


* Fri 06 Jun 2014 03:15:08 PM JST
QueryKeymap
* Fri 06 Jun 2014 03:15:37 PM JST
QueryKeymapCookie
* Fri 06 Jun 2014 03:15:48 PM JST
QueryKeymap

keys: LISTofCARD8

This request returns a bit vector for the logical state of the keyboard. Each
bit set to 1 indicates that the corresponding key is currently pressed. The
vector is represented as 32 bytes. Byte N (from 0) contains the bits for keys 8N
to 8N + 7 with the least significant bit in the byte representing key 8N. Note
that the logical state of a device (as seen by means of the protocol) may lag
the physical state if device event processing is frozen.

* Fri 06 Jun 2014 03:16:12 PM JST
OpenFont
* Fri 06 Jun 2014 03:16:45 PM JST
OpenFont
* Fri 06 Jun 2014 03:18:29 PM JST
OpenFont
* Fri 06 Jun 2014 03:20:09 PM JST
(e2wm:navi-right-command)
* Fri 06 Jun 2014 03:21:06 PM JST
mark-word
* Fri 06 Jun 2014 03:21:19 PM JST
(mark-word)
* Fri 06 Jun 2014 03:21:36 PM JST
copy 
* Fri 06 Jun 2014 03:21:38 PM JST
(cua-
* Fri 06 Jun 2014 03:22:03 PM JST
region 
* Fri 06 Jun 2014 03:22:03 PM JST
copy-region 
* Fri 06 Jun 2014 03:22:12 PM JST
(progn
  (view-mode -1)
  (e2wm:navi-right-command)
  (mark-word)
  (region-copy)
  )


* Fri 06 Jun 2014 03:22:24 PM JST
copy)
* Fri 06 Jun 2014 03:22:25 PM JST
region
* Fri 06 Jun 2014 03:23:03 PM JST
copy-region-as-kill
* Fri 06 Jun 2014 03:25:49 PM JST
start
* Fri 06 Jun 2014 03:25:50 PM JST
kill start
* Fri 06 Jun 2014 03:25:50 PM JST
as-kill start
* Fri 06 Jun 2014 03:26:24 PM JST
copy-region-as-kill
* Fri 06 Jun 2014 03:29:57 PM JST
read-region-or-string
* Fri 06 Jun 2014 03:30:31 PM JST
(read-region-or-string))
* Fri 06 Jun 2014 03:30:33 PM JST
(read-region-or-string)
* Fri 06 Jun 2014 03:31:15 PM JST
(read-region-or-string)
* Fri 06 Jun 2014 03:31:27 PM JST
(progn
  (view-mode -1)
  (e2wm:navi-right-command)
  (mark-word)
  (read-region-or-string)
  )
* Fri 06 Jun 2014 03:32:12 PM JST
(read-region-or-string)
* Fri 06 Jun 2014 03:32:29 PM JST
unmark
* Fri 06 Jun 2014 03:33:06 PM JST
(unset-mark)
* Fri 06 Jun 2014 03:33:18 PM JST
(deactivate-mark t)
* Fri 06 Jun 2014 03:33:30 PM JST
(progn
  (view-mode -1)
  (e2wm:navi-right-command)
  (mark-word)
  (let ((text (read-region-or-string)))
    (deactivate-mark t)
    )
  )
* Fri 06 Jun 2014 03:33:41 PM JST
(progn
  (view-mode -1)
  (e2wm:navi-right-command)
  (mark-word)
  (let ((text (read-region-or-string)))
    (deactivate-mark t)
    text
    )
  )
* Fri 06 Jun 2014 03:33:52 PM JST
text
* Fri 06 Jun 2014 03:36:23 PM JST
char 
* Fri 06 Jun 2014 03:36:23 PM JST
low-char 
* Fri 06 Jun 2014 03:36:52 PM JST
(s-lower-camel-case "HELLO")
* Fri 06 Jun 2014 03:37:06 PM JST
(search-forward (s-lower-camel-case text))
* Fri 06 Jun 2014 03:37:09 PM JST
text
* Fri 06 Jun 2014 03:37:14 PM JST
(search-forward (s-lower-camel-case "OpenFont"))
* Fri 06 Jun 2014 03:37:47 PM JST
(dired-my-advertised-find-file)
* Fri 06 Jun 2014 03:39:40 PM JST
py:refact-doc
* Fri 06 Jun 2014 03:39:51 PM JST
(py:refact-doc "hello")
* Fri 06 Jun 2014 03:41:52 PM JST
(exit-minibuffer)
* Fri 06 Jun 2014 03:42:02 PM JST
(progn
  (view-mode -1)
  (e2wm:navi-right-command)
  (mark-word)
  (let ((text (read-region-or-string)))
    (deactivate-mark t)
    (goto-char 0)
    (search-forward (s-lower-camel-case text))
    (dired-my-advertised-find-file)
    (goto-char 0)
    (search-forward "__call__")
    (next-line)
    (py:refact-doc)
    (insert "Request " text " X protocol.")
    (exit-minibuffer)
    )
  )
* Fri 06 Jun 2014 03:43:37 PM JST
(e2wm:navi-files-command)
* Fri 06 Jun 2014 03:43:44 PM JST
(progn
  (view-mode -1)
  (e2wm:navi-right-command)
  (mark-word)
  (let ((text (read-region-or-string)))
    (deactivate-mark t)
    (e2wm:navi-files-command)
    (goto-char 0)
    (search-forward (s-lower-camel-case text))
    (dired-my-advertised-find-file)
    (goto-char 0)
    (search-forward "__call__")
    (next-line)
    (py:refact-doc)
    (insert "Request " text " X protocol.")
    (exit-minibuffer)
    )
  )
* Fri 06 Jun 2014 03:44:02 PM JST
(progn
  (view-mode -1)
  (e2wm:navi-right-command)
  (mark-word)
  (let ((text (read-region-or-string)))
    (deactivate-mark t)
    (e2wm:navi-files-command)
    (goto-char 0)
    (search-forward (s-lower-camel-case text))
    (dired-my-advertised-find-file)
    (goto-char 0)
    (search-forward "__call__")
    (next-line)
    (py:refact-doc)
    (insert "Request " text " X protocol.")
    (exit-minibuffer)
    )
  )
* Fri 06 Jun 2014 03:55:51 PM JST
(progn
  (view-mode -1)
  (e2wm:navi-right-command)
  (mark-word)
  (let ((text (read-region-or-string)))
    (deactivate-mark t)
    (e2wm:navi-files-command)
    (goto-char 0)
    (search-forward (s-lower-camel-case text))
    (dired-my-advertised-find-file)
    (goto-char 0)
    (search-forward "__call__")
    (next-line)
    (beginning-of-line)
    (insert "        \"\"\"Request " text " X protocol.\"\"\"")
    (py:refact-doc)
    (exit-minibuffer)
    )
  )
* Fri 06 Jun 2014 03:56:24 PM JST
(progn
  (view-mode -1)
  (e2wm:navi-right-command)
  (mark-word)
  (let ((text (read-region-or-string)))
    (deactivate-mark t)
    (e2wm:navi-files-command)
    (goto-char 0)
    (search-forward (s-lower-camel-case text))
    (dired-my-advertised-find-file)
    (goto-char 0)
    (search-forward "__call__")
    (next-line)
    (beginning-of-line)
    (insert "        \"\"\"Request " text " X protocol.\"\"\"\n")
    (py:refact-doc)
    (exit-minibuffer)
    )
  )
* Fri 06 Jun 2014 03:56:48 PM JST

* Fri 06 Jun 2014 03:56:49 PM JST

* Fri 06 Jun 2014 03:56:49 PM JST
    (exit-minibuffer)

* Fri 06 Jun 2014 03:56:57 PM JST
(progn
  (view-mode -1)
  (e2wm:navi-right-command)
  (mark-word)
  (let ((text (read-region-or-string)))
    (deactivate-mark t)
    (e2wm:navi-files-command)
    (goto-char 0)
    (search-forward (s-lower-camel-case text))
    (dired-my-advertised-find-file)
    (goto-char 0)
    (search-forward "__call__")
    (next-line)
    (beginning-of-line)
    (insert "        \"\"\"Request " text " X protocol.\"\"\"\n")
    (py:refact-doc)
    )
  )
* Fri 06 Jun 2014 03:57:22 PM JST

* Fri 06 Jun 2014 03:57:22 PM JST

* Fri 06 Jun 2014 03:57:22 PM JST
(progn

* Fri 06 Jun 2014 03:58:25 PM JST
        - [yas] elisp error!:
* Fri 06 Jun 2014 03:58:43 PM JST
(replace-string "        - [yas] elisp error!:
* Fri 06 Jun 2014 03:58:44 PM JST
(replace-string "        - [yas] elisp error!:
" "")
* Fri 06 Jun 2014 04:04:33 PM JST
(py:auto-colon-return-on-line)
* Fri 06 Jun 2014 04:04:53 PM JST
(py:newline)
* Fri 06 Jun 2014 04:05:46 PM JST
(py:auto-colon-return-on-line)
* Fri 06 Jun 2014 04:06:55 PM JST
excursive-
* Fri 06 Jun 2014 04:07:47 PM JST
mark
* Fri 06 Jun 2014 04:08:04 PM JST
(set-mark (point))
* Fri 06 Jun 2014 04:08:15 PM JST

* Fri 06 Jun 2014 04:08:15 PM JST

* Fri 06 Jun 2014 04:08:15 PM JST
  (let ((start (point))

* Fri 06 Jun 2014 04:08:16 PM JST
  (let ((start (point))

* Fri 06 Jun 2014 04:08:16 PM JST
  (let ((start (point))
        (end (save-excursion (end-of-line) (point)))

* Fri 06 Jun 2014 04:08:45 PM JST
(read-region-or-string)
* Fri 06 Jun 2014 04:09:44 PM JST
(progn
  (goto-char 0)
  (search-forward "__call__")
  (search-forward "@Return:")
  (py:auto-colon-return-on-line)
  (py:newline)
  (insert "@Error:")
  (py:auto-colon-return-on-line)
  (e2wm:navi-right-command)
  (search-forward "Errors: ")
  (set-mark (point))
  (end-of-line)
  (let ((text (read-region-or-string)))
    (e2wm:navi-main-command)
    (insert text)
    )
  )
* Fri 06 Jun 2014 04:11:44 PM JST
(beginning-of-line-or-indentation)
* Fri 06 Jun 2014 04:13:03 PM JST
(looking-at "$")
* Fri 06 Jun 2014 04:13:30 PM JST
(progn
  (goto-char 0)
  (search-forward "__call__")
  (search-forward "@Return:")
  (py:auto-colon-return-on-line)
  (py:newline)
  (insert "@Error:")
  (py:auto-colon-return-on-line)
  (e2wm:navi-right-command)
  (search-forward "Errors: ")
  (set-mark (point))
  (end-of-line)
  (let ((text (read-region-or-string)))
    (e2wm:navi-main-command)
    (insert text)
    )
  (beginning-of-line-or-indentation)
  (while (not (looking-at "$"))
    (insert "Bad")
    (forward-word)
    )
  )
* Fri 06 Jun 2014 04:14:06 PM JST
(deactivate-mark t)
* Fri 06 Jun 2014 04:14:57 PM JST
(looking-at "$")
* Fri 06 Jun 2014 04:15:28 PM JST
(looking-at "^[\s]+")
* Fri 06 Jun 2014 04:15:45 PM JST
(looking-at "^[\s\t]+")
* Fri 06 Jun 2014 04:15:58 PM JST
(looking-at "^[ ]+")
* Fri 06 Jun 2014 04:16:59 PM JST
(looking-back "^[ ]+")
* Fri 06 Jun 2014 04:17:22 PM JST
for
* Fri 06 Jun 2014 04:17:33 PM JST
(progn
  (goto-char 0)
  (search-forward "__call__")
  (search-forward "@Return:")
  (py:auto-colon-return-on-line)
  (py:newline)
  (insert "@Error:")
  (py:auto-colon-return-on-line)
  (e2wm:navi-right-command)
  (search-forward "Errors: ")
  (set-mark (point))
  (end-of-line)
  (let ((text (read-region-or-string)))
    (deactivate-mark t)
    (e2wm:navi-main-command)
    (insert text)
    )
  (end-of-line)
  (while (not (looking-back "^[ ]+"))
    (insert "Bad")
    (backward-word)
    )
  )
* Fri 06 Jun 2014 04:20:02 PM JST
dBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadBadNameBad
* Fri 06 Jun 2014 04:20:46 PM JST
(backward-word)
* Fri 06 Jun 2014 04:20:50 PM JST
(progn
  (goto-char 0)
  (search-forward "__call__")
  (search-forward "@Return:")
  (py:auto-colon-return-on-line)
  (py:newline)
  (insert "@Error:")
  (py:auto-colon-return-on-line)
  (e2wm:navi-right-command)
  (search-forward "Errors: ")
  (set-mark (point))
  (end-of-line)
  (let ((text (read-region-or-string)))
    (deactivate-mark t)
    (e2wm:navi-main-command)
    (insert text)
    )
  (end-of-line)
  (while (not (looking-back "^[ ]+"))
    (insert "Bad")
    (backward-word)
    (backward-word)
    )
  )
* Fri 06 Jun 2014 04:21:29 PM JST
    (insert "Bad")
    (backward-word)

* Fri 06 Jun 2014 04:21:39 PM JST

* Fri 06 Jun 2014 04:21:39 PM JST

* Fri 06 Jun 2014 04:21:39 PM JST
  (backward-word)

* Fri 06 Jun 2014 04:21:42 PM JST
(progn
  (goto-char 0)
  (search-forward "__call__")
  (search-forward "@Return:")
  (py:auto-colon-return-on-line)
  (py:newline)
  (insert "@Error:")
  (py:auto-colon-return-on-line)
  (e2wm:navi-right-command)
  (search-forward "Errors: ")
  (set-mark (point))
  (end-of-line)
  (let ((text (read-region-or-string)))
    (deactivate-mark t)
    (e2wm:navi-main-command)
    (insert text)
    )
  (end-of-line)
  (while (not (looking-back "^[ ]+"))
    (backward-word)
    (insert "Bad")
    (backward-word)
    )
  (insert "Bad")
  )
* Fri 06 Jun 2014 04:22:02 PM JST

* Fri 06 Jun 2014 04:22:02 PM JST

* Fri 06 Jun 2014 04:22:02 PM JST
  (insert "Bad")

* Fri 06 Jun 2014 04:22:04 PM JST
(progn
  (goto-char 0)
  (search-forward "__call__")
  (search-forward "@Return:")
  (py:auto-colon-return-on-line)
  (py:newline)
  (insert "@Error:")
  (py:auto-colon-return-on-line)
  (e2wm:navi-right-command)
  (search-forward "Errors: ")
  (set-mark (point))
  (end-of-line)
  (let ((text (read-region-or-string)))
    (deactivate-mark t)
    (e2wm:navi-main-command)
    (insert text)
    )
  (end-of-line)
  (while (not (looking-back "^[ ]+"))
    (backward-word)
    (insert "Bad")
    (backward-word)
    )
  )
* Fri 06 Jun 2014 04:23:06 PM JST
(progn
  (goto-char 0)
  (search-forward "__call__")
  (search-forward "@Return:")
  (py:auto-colon-return-on-line)
  (py:newline)
  (insert "@Error:")
  (py:auto-colon-return-on-line)
  (e2wm:navi-right-command)
  (goto-char 0)
  (search-forward "Errors: ")
  (set-mark (point))
  (end-of-line)
  (let ((text (read-region-or-string)))
    (deactivate-mark t)
    (e2wm:navi-main-command)
    (insert text)
    )
  (end-of-line)
  (while (not (looking-back "^[ ]+"))
    (backward-word)
    (insert "Bad")
    (backward-word)
    )
  )

* Fri 06 Jun 2014 04:23:11 PM JST

* Fri 06 Jun 2014 04:23:11 PM JST

* Fri 06 Jun 2014 04:23:11 PM JST
    )

* Fri 06 Jun 2014 04:23:13 PM JST

* Fri 06 Jun 2014 04:23:13 PM JST

* Fri 06 Jun 2014 04:23:13 PM JST
  (progn

* Fri 06 Jun 2014 04:25:30 PM JST
(cua-paste ARG)
* Fri 06 Jun 2014 04:25:32 PM JST
ARG
* Fri 06 Jun 2014 04:25:37 PM JST
(cua-paste 1)  
* Fri 06 Jun 2014 04:27:20 PM JST
OpenFont

fid: FONT
name: STRING8

Errors: Alloc, IDChoice, Name

This request loads the specified font, if necessary, and associates identifier
fid with it. The font name should use the ISO Latin-1 encoding, and uppercase
and lowercase do not matter. When the characters “?” and “*” are used in a
font name, a pattern match is performed and any matching font is used. In the
pattern, the “?” character (octal value 77) will match any single character,
and the “*” character (octal value 52) will match any number of characters. A
structured format for font names is specified in the X.Org standard X Logical
Font Description Conventions.

Fonts are not associated with a particular screen and can be stored as a
component of any graphics context.


* Fri 06 Jun 2014 04:27:28 PM JST
OpenFont

fid: FONT
name: STRING8

Errors: Alloc, IDChoice, Name

This request loads the specified font, if necessary, and associates identifier
fid with it. The font name should use the ISO Latin-1 encoding, and uppercase
and lowercase do not matter. When the characters “?” and “*” are used in a
font name, a pattern match is performed and any matching font is used. In the
pattern, the “?” character (octal value 77) will match any single character,
and the “*” character (octal value 52) will match any number of characters. A
structured format for font names is specified in the X.Org standard X Logical
Font Description Conventions.

Fonts are not associated with a particular screen and can be stored as a
component of any graphics context.


* Fri 06 Jun 2014 04:28:45 PM JST
VoidCookie
* Fri 06 Jun 2014 04:29:36 PM JST
make
* Fri 06 Jun 2014 04:29:39 PM JST
make-call-doc
* Fri 06 Jun 2014 04:29:59 PM JST
clean-yas-err
* Fri 06 Jun 2014 04:30:10 PM JST
make
* Fri 06 Jun 2014 04:30:11 PM JST
make-err-doc
* Fri 06 Jun 2014 04:31:28 PM JST

* Fri 06 Jun 2014 04:31:28 PM JST

* Fri 06 Jun 2014 04:31:28 PM JST
    (view-mode -1)

* Fri 06 Jun 2014 04:32:10 PM JST

* Fri 06 Jun 2014 04:32:10 PM JST

* Fri 06 Jun 2014 04:32:10 PM JST
  (view-mode -1)

* Fri 06 Jun 2014 04:32:45 PM JST
CloseFont

font: FONT

Errors: Font

This request deletes the association between the resource ID and the font. The
font itself will be freed when no other resource references it.


* Fri 06 Jun 2014 04:33:16 PM JST
CloseFont

font: FONT

Errors: Font

This request deletes the association between the resource ID and the font. The
font itself will be freed when no other resource references it.


* Fri 06 Jun 2014 04:33:54 PM JST
VoidCookie
* Fri 06 Jun 2014 04:34:49 PM JST
QueryFont

font: FONTABLE

font-info: FONTINFO
char-infos: LISTofCHARINFO
where:
FONTINFO:	 [draw-direction: { LeftToRight, RightToLeft }
min-char-or-byte2, max-char-or-byte2: CARD16
min-byte1, max-byte1: CARD8
all-chars-exist: BOOL
default-char: CARD16
min-bounds: CHARINFO
max-bounds: CHARINFO
font-ascent: INT16
font-descent: INT16
properties: LISTofFONTPROP]
FONTPROP:	 [name: ATOM
value: <32-bit-value>]
CHARINFO:	 [left-side-bearing: INT16
right-side-bearing: INT16
character-width: INT16
ascent: INT16
descent: INT16
attributes: CARD16]

Errors: Font

This request returns logical information about a font. If a gcontext is given
for font, the currently contained font is used.

The draw-direction is just a hint and indicates whether most char-infos have a
positive, LeftToRight, or a negative, RightToLeft, character-width metric. The
core protocol defines no support for vertical text.

If min-byte1 and max-byte1 are both zero, then min-char-or-byte2 specifies the
linear character index corresponding to the first element of char-infos, and
max-char-or-byte2 specifies the linear character index of the last element. If
either min-byte1 or max-byte1 are nonzero, then both min-char-or-byte2 and
max-char-or-byte2 will be less than 256, and the 2-byte character index values
corresponding to char-infos element N (counting from 0) are:

	byte1 = N/D + min-byte1
	byte2 = N\\D + min-char-or-byte2
where:

	D = max-char-or-byte2 - min-char-or-byte2 + 1
	/ = integer division
	\\ = integer modulus
If char-infos has length zero, then min-bounds and max-bounds will be identical,
and the effective char-infos is one filled with this char-info, of length:

	L = D * (max-byte1 - min-byte1 + 1)
That is, all glyphs in the specified linear or matrix range have the same
information, as given by min-bounds (and max-bounds). If all-chars-exist is
True, then all characters in char-infos have nonzero bounding boxes.

The default-char specifies the character that will be used when an undefined or
nonexistent character is used. Note that default-char is a CARD16, not
CHAR2B. For a font using 2-byte matrix format, the default-char has byte1 in the
most significant byte and byte2 in the least significant byte. If the
default-char itself specifies an undefined or nonexistent character, then no
printing is performed for an undefined or nonexistent character.

The min-bounds and max-bounds contain the minimum and maximum values of each
individual CHARINFO component over all char-infos (ignoring nonexistent
characters). The bounding box of the font (that is, the smallest rectangle
enclosing the shape obtained by superimposing all characters at the same origin
[x,y]) has its upper-left coordinate at:

	[x + min-bounds.left-side-bearing, y - max-bounds.ascent]
with a width of:

	max-bounds.right-side-bearing - min-bounds.left-side-bearing
and a height of:

	max-bounds.ascent + max-bounds.descent
The font-ascent is the logical extent of the font above the baseline and is used
for determining line spacing. Specific characters may extend beyond this. The
font-descent is the logical extent of the font at or below the baseline and is
used for determining line spacing. Specific characters may extend beyond
this. If the baseline is at Y-coordinate y, then the logical extent of the font
is inclusive between the Y-coordinate values (y - font-ascent) and (y +
font-descent - 1).

A font is not guaranteed to have any properties. The interpretation of the
property value (for example, INT32, CARD32) must be derived from a priori
knowledge of the property. A basic set of font properties is specified in the
X.Org standard X Logical Font Description Conventions.

For a character origin at [x,y], the bounding box of a character (that is, the
smallest rectangle enclosing the character's shape), described in terms of
CHARINFO components, is a rectangle with its upper-left corner at:

	[x + left-side-bearing, y - ascent]
with a width of:

	right-side-bearing - left-side-bearing
and a height of:

	ascent + descent
and the origin for the next character is defined to be:

	[x + character-width, y]
Note that the baseline is logically viewed as being just below nondescending
characters (when descent is zero, only pixels with Y-coordinates less than y are
drawn) and that the origin is logically viewed as being coincident with the left
edge of a nonkerned character (when left-side-bearing is zero, no pixels with
X-coordinate less than x are drawn).

Note that CHARINFO metric values can be negative.

A nonexistent character is represented with all CHARINFO components zero.

The interpretation of the per-character attributes field is server-dependent.


* Fri 06 Jun 2014 04:35:13 PM JST
QueryFont

font: FONTABLE

font-info: FONTINFO
char-infos: LISTofCHARINFO
where:
FONTINFO:	 [draw-direction: { LeftToRight, RightToLeft }
min-char-or-byte2, max-char-or-byte2: CARD16
min-byte1, max-byte1: CARD8
all-chars-exist: BOOL
default-char: CARD16
min-bounds: CHARINFO
max-bounds: CHARINFO
font-ascent: INT16
font-descent: INT16
properties: LISTofFONTPROP]
FONTPROP:	 [name: ATOM
value: <32-bit-value>]
CHARINFO:	 [left-side-bearing: INT16
right-side-bearing: INT16
character-width: INT16
ascent: INT16
descent: INT16
attributes: CARD16]

Errors: Font

This request returns logical information about a font. If a gcontext is given
for font, the currently contained font is used.

The draw-direction is just a hint and indicates whether most char-infos have a
positive, LeftToRight, or a negative, RightToLeft, character-width metric. The
core protocol defines no support for vertical text.

If min-byte1 and max-byte1 are both zero, then min-char-or-byte2 specifies the
linear character index corresponding to the first element of char-infos, and
max-char-or-byte2 specifies the linear character index of the last element. If
either min-byte1 or max-byte1 are nonzero, then both min-char-or-byte2 and
max-char-or-byte2 will be less than 256, and the 2-byte character index values
corresponding to char-infos element N (counting from 0) are:

	byte1 = N/D + min-byte1
	byte2 = N\\D + min-char-or-byte2
where:

	D = max-char-or-byte2 - min-char-or-byte2 + 1
	/ = integer division
	\\ = integer modulus
If char-infos has length zero, then min-bounds and max-bounds will be identical,
and the effective char-infos is one filled with this char-info, of length:

	L = D * (max-byte1 - min-byte1 + 1)
That is, all glyphs in the specified linear or matrix range have the same
information, as given by min-bounds (and max-bounds). If all-chars-exist is
True, then all characters in char-infos have nonzero bounding boxes.

The default-char specifies the character that will be used when an undefined or
nonexistent character is used. Note that default-char is a CARD16, not
CHAR2B. For a font using 2-byte matrix format, the default-char has byte1 in the
most significant byte and byte2 in the least significant byte. If the
default-char itself specifies an undefined or nonexistent character, then no
printing is performed for an undefined or nonexistent character.

The min-bounds and max-bounds contain the minimum and maximum values of each
individual CHARINFO component over all char-infos (ignoring nonexistent
characters). The bounding box of the font (that is, the smallest rectangle
enclosing the shape obtained by superimposing all characters at the same origin
[x,y]) has its upper-left coordinate at:

	[x + min-bounds.left-side-bearing, y - max-bounds.ascent]
with a width of:

	max-bounds.right-side-bearing - min-bounds.left-side-bearing
and a height of:

	max-bounds.ascent + max-bounds.descent
The font-ascent is the logical extent of the font above the baseline and is used
for determining line spacing. Specific characters may extend beyond this. The
font-descent is the logical extent of the font at or below the baseline and is
used for determining line spacing. Specific characters may extend beyond
this. If the baseline is at Y-coordinate y, then the logical extent of the font
is inclusive between the Y-coordinate values (y - font-ascent) and (y +
font-descent - 1).

A font is not guaranteed to have any properties. The interpretation of the
property value (for example, INT32, CARD32) must be derived from a priori
knowledge of the property. A basic set of font properties is specified in the
X.Org standard X Logical Font Description Conventions.

For a character origin at [x,y], the bounding box of a character (that is, the
smallest rectangle enclosing the character's shape), described in terms of
CHARINFO components, is a rectangle with its upper-left corner at:

	[x + left-side-bearing, y - ascent]
with a width of:

	right-side-bearing - left-side-bearing
and a height of:

	ascent + descent
and the origin for the next character is defined to be:

	[x + character-width, y]
Note that the baseline is logically viewed as being just below nondescending
characters (when descent is zero, only pixels with Y-coordinates less than y are
drawn) and that the origin is logically viewed as being coincident with the left
edge of a nonkerned character (when left-side-bearing is zero, no pixels with
X-coordinate less than x are drawn).

Note that CHARINFO metric values can be negative.

A nonexistent character is represented with all CHARINFO components zero.

The interpretation of the per-character attributes field is server-dependent.


* Fri 06 Jun 2014 04:36:14 PM JST
QueryFontCookie
* Fri 06 Jun 2014 04:36:55 PM JST
QueryTextExtents

font: FONTABLE
string: STRING16

draw-direction: { LeftToRight, RightToLeft}
font-ascent: INT16
font-descent: INT16
overall-ascent: INT16
overall-descent: INT16
overall-width: INT32
overall-left: INT32
overall-right: INT32

Errors: Font

This request returns the logical extents of the specified string of characters
in the specified font. If a gcontext is given for font, the currently contained
font is used. The draw-direction, font-ascent, and font-descent are the same as
described in QueryFont. The overall-ascent is the maximum of the ascent metrics
of all characters in the string, and the overall-descent is the maximum of the
descent metrics. The overall-width is the sum of the character-width metrics of
all characters in the string. For each character in the string, let W be the sum
of the character-width metrics of all characters preceding it in the string, let
L be the left-side-bearing metric of the character plus W, and let R be the
right-side-bearing metric of the character plus W. The overall-left is the
minimum L of all characters in the string, and the overall-right is the maximum
R.

For fonts defined with linear indexing rather than 2-byte matrix indexing, the
server will interpret each CHAR2B as a 16-bit number that has been transmitted
most significant byte first (that is, byte1 of the CHAR2B is taken as the most
significant byte).

Characters with all zero metrics are ignored. If the font has no defined
default-char, then undefined characters in the string are also ignored.


* Fri 06 Jun 2014 04:37:08 PM JST

* Fri 06 Jun 2014 04:37:09 PM JST
QueryTextExtentsCookie
* Fri 06 Jun 2014 04:38:22 PM JST
ListFonts

pattern: STRING8
max-names: CARD16

names: LISTofSTRING8
This request returns a list of available font names (as controlled by the font
search path; see SetFontPath request) that match the pattern. At most, max-names
names will be returned. The pattern should use the ISO Latin-1 encoding, and
uppercase and lowercase do not matter. In the pattern, the “?” character
(octal value 77) will match any single character, and the “*” character (octal
value 52) will match any number of characters. The returned names are in
lowercase.


* Fri 06 Jun 2014 04:38:32 PM JST
ListFontsWithInfoCookie
* Fri 06 Jun 2014 04:39:11 PM JST
ListFontsWithInfo

pattern: STRING8
max-names: CARD16

name: STRING8
info FONTINFO
replies-hint: CARD32
where:
FONTINFO: <same type definition as in QueryFont>
This request is similar to ListFonts, but it also returns information about each
font. The information returned for each font is identical to what QueryFont
would return except that the per-character metrics are not returned. Note that
this request can generate multiple replies. With each reply, replies-hint may
provide an indication of how many more fonts will be returned. This number is a
hint only and may be larger or smaller than the number of fonts actually
returned. A zero value does not guarantee that no more fonts will be
returned. After the font replies, a reply with a zero-length name is sent to
indicate the end of the reply sequence.


* Fri 06 Jun 2014 04:39:49 PM JST
SetFontPath

path: LISTofSTRING8

Errors: Value

This request defines the search path for font lookup. There is only one search
path per server, not one per client. The interpretation of the strings is
operating-system-dependent, but the strings are intended to specify directories
to be searched in the order listed.

Setting the path to the empty list restores the default path defined for the
server.

As a side effect of executing this request, the server is guaranteed to flush
all cached information about fonts for which there currently are no explicit
resource IDs allocated.

The meaning of an error from this request is system specific.


* Fri 06 Jun 2014 04:40:02 PM JST
VoidCookie
* Fri 06 Jun 2014 04:41:17 PM JST
GetFontPathCookie
* Fri 06 Jun 2014 04:41:47 PM JST
GetFontPath


path: LISTofSTRING8
This request returns the current search path for fonts.


* Fri 06 Jun 2014 04:42:16 PM JST
VoidCookie
* Fri 06 Jun 2014 04:42:26 PM JST
CreatePixmap

pid: PIXMAP
drawable: DRAWABLE
depth: CARD8
width, height: CARD16

Errors: Alloc, Drawable, IDChoice, Value

This request creates a pixmap and assigns the identifier pid to it. The width
and height must be nonzero (or a Value error results). The depth must be one of
the depths supported by the root of the specified drawable (or a Value error
results). The initial contents of the pixmap are undefined.

It is legal to pass an InputOnly window as a drawable to this request.


* Fri 06 Jun 2014 04:42:47 PM JST
VoidCookie
* Fri 06 Jun 2014 04:43:02 PM JST
FreePixmap

pixmap: PIXMAP

Errors: Pixmap

This request deletes the association between the resource ID and the pixmap. The
pixmap storage will be freed when no other resource references it.


* Fri 06 Jun 2014 04:44:36 PM JST
CreateGC

cid: GCONTEXT
drawable: DRAWABLE
value-mask: BITMASK
value-list: LISTofVALUE

Errors: Alloc, Drawable, Font, IDChoice, Match, Pixmap, Value

This request creates a graphics context and assigns the identifier cid to
it. The gcontext can be used with any destination drawable having the same root
and depth as the specified drawable; use with other drawables results in a Match
error.

The value-mask and value-list specify which components are to be explicitly
initialized. The context components are:

Component	Type
function	 { Clear, And, AndReverse, Copy, AndInverted, NoOp, Xor, Or, Nor, Equiv, Invert, OrReverse, CopyInverted, OrInverted, Nand, Set }
plane-mask	CARD32
foreground	CARD32
background	CARD32
line-width	CARD16
line-style	 { Solid, OnOffDash, DoubleDash }
cap-style	 { NotLast, Butt, Round, Projecting }
join-style	 { Miter, Round, Bevel }
fill-style	 { Solid, Tiled, OpaqueStippled, Stippled }
fill-rule	 { EvenOdd, Winding }
arc-mode	 { Chord, PieSlice }
tile	PIXMAP
stipple	PIXMAP
tile-stipple-x-origin	INT16
tile-stipple-y-origin	INT16
font	FONT
subwindow-mode	 { ClipByChildren, IncludeInferiors }
graphics-exposures	BOOL
clip-x-origin	INT16
clip-y-origin	INT16
clip-mask	 PIXMAP or None
dash-offset	CARD16
dashes	CARD8
In graphics operations, given a source and destination pixel, the result is
computed bitwise on corresponding bits of the pixels; that is, a Boolean
operation is performed in each bit plane. The plane-mask restricts the operation
to a subset of planes, so the result is:

	((src FUNC dst) AND plane-mask) OR (dst AND (NOT plane-mask))
Range checking is not performed on the values for foreground, background, or
plane-mask. They are simply truncated to the appropriate number of bits.

The meanings of the functions are:

Function	Operation
Clear	0
And	src AND dst
AndReverse	src AND (NOT dst)
Copy	src
AndInverted	(NOT src) AND dst
NoOp	dst
Xor	src XOR dst
Or	src OR dst
Nor	(NOT src) AND (NOT dst)
Equiv	(NOT src) XOR dst
Invert	NOT dst
OrReverse	src OR (NOT dst)
CopyInverted	NOT src
OrInverted	(NOT src) OR dst
Nand	(NOT src) OR (NOT dst)
Set	1
The line-width is measured in pixels and can be greater than or equal to one, a
wide line, or the special value zero, a thin line.

Wide lines are drawn centered on the path described by the graphics
request. Unless otherwise specified by the join or cap style, the bounding box
of a wide line with endpoints [x1, y1], [x2, y2] and width w is a rectangle with
vertices at the following real coordinates:

	[x1-(w*sn/2), y1+(w*cs/2)], [x1+(w*sn/2), y1-(w*cs/2)],
	[x2-(w*sn/2), y2+(w*cs/2)], [x2+(w*sn/2), y2-(w*cs/2)]
The sn is the sine of the angle of the line and cs is the cosine of the angle of
the line. A pixel is part of the line (and hence drawn) if the center of the
pixel is fully inside the bounding box, which is viewed as having infinitely
thin edges. If the center of the pixel is exactly on the bounding box, it is
part of the line if and only if the interior is immediately to its right (x
increasing direction). Pixels with centers on a horizontal edge are a special
case and are part of the line if and only if the interior or the boundary is
immediately below (y increasing direction) and if the interior or the boundary
is immediately to the right (x increasing direction). Note that this description
is a mathematical model describing the pixels that are drawn for a wide line and
does not imply that trigonometry is required to implement such a model. Real or
fixed point arithmetic is recommended for computing the corners of the line
endpoints for lines greater than one pixel in width.

Thin lines (zero line-width) are nominally one pixel wide lines drawn using an
unspecified, device-dependent algorithm. There are only two constraints on this
algorithm. First, if a line is drawn unclipped from [x1,y1] to [x2,y2] and
another line is drawn unclipped from [x1+dx,y1+dy] to [x2+dx,y2+dy], then a
point [x,y] is touched by drawing the first line if and only if the point
[x+dx,y+dy] is touched by drawing the second line. Second, the effective set of
points comprising a line cannot be affected by clipping. Thus, a point is
touched in a clipped line if and only if the point lies inside the clipping
region and the point would be touched by the line when drawn unclipped.

Note that a wide line drawn from [x1,y1] to [x2,y2] always draws the same pixels
as a wide line drawn from [x2,y2] to [x1,y1], not counting cap-style and
join-style. Implementors are encouraged to make this property true for thin
lines, but it is not required. A line-width of zero may differ from a line-width
of one in which pixels are drawn. In general, drawing a thin line will be faster
than drawing a wide line of width one, but thin lines may not mix well
aesthetically with wide lines because of the different drawing algorithms. If it
is desirable to obtain precise and uniform results across all displays, a client
should always use a line-width of one, rather than a line-width of zero.

The line-style defines which sections of a line are drawn:

Solid	 The full path of the line is drawn.
DoubleDash The full path of the line is drawn, but the even dashes are filled
differently than the odd dashes (see fill-style), with Butt cap-style used where
even and odd dashes meet.  OnOffDash Only the even dashes are drawn, and
cap-style applies to all internal ends of the individual dashes (except NotLast
is treated as Butt).
The cap-style defines how the endpoints of a path are drawn:

NotLast The result is equivalent to Butt, except that for a line-width of zero
the final endpoint is not drawn.  Butt The result is square at the endpoint
(perpendicular to the slope of the line) with no projection beyond.  Round The
result is a circular arc with its diameter equal to the line-width, centered on
the endpoint; it is equivalent to Butt for line-width zero.  Projecting The
result is square at the end, but the path continues beyond the endpoint for a
distance equal to half the line-width; it is equivalent to Butt for line-width
zero.  The join-style defines how corners are drawn for wide lines:

Miter The outer edges of the two lines extend to meet at an angle. However, if
the angle is less than 11 degrees, a Bevel join-style is used instead.  Round
The result is a circular arc with a diameter equal to the line-width, centered
on the joinpoint.  Bevel The result is Butt endpoint styles, and then the
triangular notch is filled.  For a line with coincident endpoints (x1=x2,
y1=y2), when the cap-style is applied to both endpoints, the semantics depends
on the line-width and the cap-style:

NotLast thin This is device-dependent, but the desired effect is that nothing is
drawn.  Butt thin This is device-dependent, but the desired effect is that a
single pixel is drawn.  Round thin This is the same as Butt/thin.  Projecting
thin This is the same as Butt/thin.  Butt wide Nothing is drawn.  Round wide The
closed path is a circle, centered at the endpoint and with a diameter equal to
the line-width.  Projecting wide The closed path is a square, aligned with the
coordinate axes, centered at the endpoint and with sides equal to the
line-width.  For a line with coincident endpoints (x1=x2, y1=y2), when the
join-style is applied at one or both endpoints, the effect is as if the line was
removed from the overall path. However, if the total path consists of (or is
reduced to) a single point joined with itself, the effect is the same as when
the cap-style is applied at both endpoints.

The tile/stipple represents an infinite two-dimensional plane with the
tile/stipple replicated in all dimensions. When that plane is superimposed on
the drawable for use in a graphics operation, the upper-left corner of some
instance of the tile/stipple is at the coordinates within the drawable specified
by the tile/stipple origin. The tile/stipple and clip origins are interpreted
relative to the origin of whatever destination drawable is specified in a
graphics request.

The tile pixmap must have the same root and depth as the gcontext (or a Match
error results). The stipple pixmap must have depth one and must have the same
root as the gcontext (or a Match error results). For fill-style Stippled (but
not fill-style OpaqueStippled), the stipple pattern is tiled in a single plane
and acts as an additional clip mask to be ANDed with the clip-mask. Any size
pixmap can be used for tiling or stippling, although some sizes may be faster to
use than others.

The fill-style defines the contents of the source for line, text, and fill
requests. For all text and fill requests (for example, PolyText8, PolyText16,
PolyFillRectangle, FillPoly, and PolyFillArc) as well as for line requests with
line-style Solid, (for example, PolyLine, PolySegment, PolyRectangle, PolyArc )
and for the even dashes for line requests with line-style OnOffDash or
DoubleDash:

Solid	Foreground
Tiled	Tile
OpaqueStippled A tile with the same width and height as stipple but with
background everywhere stipple has a zero and with foreground everywhere stipple
has a one
Stippled	 Foreground masked by stipple
For the odd dashes for line requests with line-style DoubleDash:

Solid	Background
Tiled	Same as for even dashes
OpaqueStippled	Same as for even dashes
Stippled	Background masked by stipple
The dashes value allowed here is actually a simplified form of the more general
patterns that can be set with SetDashes. Specifying a value of N here is
equivalent to specifying the two element list [N, N] in SetDashes. The value
must be nonzero (or a Value error results). The meaning of dash-offset and
dashes are explained in the SetDashes request.

The clip-mask restricts writes to the destination drawable. Only pixels where
the clip-mask has bits set to 1 are drawn. Pixels are not drawn outside the area
covered by the clip-mask or where the clip-mask has bits set to 0. The clip-mask
affects all graphics requests, but it does not clip sources. The clip-mask
origin is interpreted relative to the origin of whatever destination drawable is
specified in a graphics request. If a pixmap is specified as the clip-mask, it
must have depth 1 and have the same root as the gcontext (or a Match error
results). If clip-mask is None, then pixels are always drawn, regardless of the
clip origin. The clip-mask can also be set with the SetClipRectangles request.

For ClipByChildren, both source and destination windows are additionally clipped
by all viewable InputOutput children. For IncludeInferiors, neither source nor
destination window is clipped by inferiors. This will result in including
subwindow contents in the source and drawing through subwindow boundaries of the
destination. The use of IncludeInferiors with a source or destination window of
one depth with mapped inferiors of differing depth is not illegal, but the
semantics is undefined by the core protocol.

The fill-rule defines what pixels are inside (that is, are drawn) for paths
given in FillPoly requests. EvenOdd means a point is inside if an infinite ray
with the point as origin crosses the path an odd number of times. For Winding, a
point is inside if an infinite ray with the point as origin crosses an unequal
number of clockwise and counterclockwise directed path segments. A clockwise
directed path segment is one that crosses the ray from left to right as observed
from the point. A counter-clockwise segment is one that crosses the ray from
right to left as observed from the point. The case where a directed line segment
is coincident with the ray is uninteresting because one can simply choose a
different ray that is not coincident with a segment.

For both fill rules, a point is infinitely small and the path is an infinitely
thin line. A pixel is inside if the center point of the pixel is inside and the
center point is not on the boundary. If the center point is on the boundary, the
pixel is inside if and only if the polygon interior is immediately to its right
(x increasing direction). Pixels with centers along a horizontal edge are a
special case and are inside if and only if the polygon interior is immediately
below (y increasing direction).

The arc-mode controls filling in the PolyFillArc request.

The graphics-exposures flag controls GraphicsExposure event generation for
CopyArea and CopyPlane requests (and any similar requests defined by
extensions).

The default component values are:

Component	Default
function	Copy
plane-mask	all ones
foreground	0
background	1
line-width	0
line-style	Solid
cap-style	Butt
join-style	Miter
fill-style	Solid
fill-rule	EvenOdd
arc-mode	PieSlice
tile
Pixmap of unspecified size filled with foreground pixel
(that is, client specified pixel if any, else 0)
(subsequent changes to foreground do not affect this pixmap)
stipple	 Pixmap of unspecified size filled with ones
tile-stipple-x-origin	0
tile-stipple-y-origin	0
font	<server-dependent-font>
subwindow-mode	ClipByChildren
graphics-exposures	True
clip-x-origin	0
clip-y-origin	0
clip-mask	None
dash-offset	0
dashes	4 (that is, the list [4, 4])
Storing a pixmap in a gcontext might or might not result in a copy being
made. If the pixmap is later used as the destination for a graphics request, the
change might or might not be reflected in the gcontext. If the pixmap is used
simultaneously in a graphics request as both a destination and as a tile or
stipple, the results are not defined.

It is quite likely that some amount of gcontext information will be cached in
display hardware and that such hardware can only cache a small number of
gcontexts. Given the number and complexity of components, clients should view
switching between gcontexts with nearly identical state as significantly more
expensive than making minor changes to a single gcontext.


* Fri 06 Jun 2014 04:44:47 PM JST
VoidCookie
* Fri 06 Jun 2014 04:45:03 PM JST
VoidCookie
* Fri 06 Jun 2014 04:45:15 PM JST
ChangeGC

gc: GCONTEXT
value-mask: BITMASK
value-list: LISTofVALUE

Errors: Alloc, Font, GContext, Match, Pixmap, Value

This request changes components in gc. The value-mask and value-list specify
which components are to be changed. The values and restrictions are the same as
for CreateGC.

Changing the clip-mask also overrides any previous SetClipRectangles request on
the context. Changing dash-offset or dashes overrides any previous SetDashes
request on the context.

The order in which components are verified and altered is server-dependent. If
an error is generated, a subset of the components may have been altered.


* Fri 06 Jun 2014 04:45:28 PM JST
VoidCookie
* Fri 06 Jun 2014 04:45:38 PM JST
CopyGC

src-gc, dst-gc: GCONTEXT
value-mask: BITMASK

Errors: Alloc, GContext, Match, Value

This request copies components from src-gc to dst-gc. The value-mask specifies
which components to copy, as for CreateGC. The two gcontexts must have the same
root and the same depth (or a Match error results).


* Fri 06 Jun 2014 04:45:56 PM JST
VoidCookie
* Fri 06 Jun 2014 04:46:08 PM JST
SetDashes

gc: GCONTEXT
dash-offset: CARD16
dashes: LISTofCARD8

Errors: Alloc, GContext, Value

This request sets dash-offset and dashes in gc for dashed line styles. Dashes
cannot be empty (or a Value error results). Specifying an odd-length list is
equivalent to specifying the same list concatenated with itself to produce an
even-length list. The initial and alternating elements of dashes are the even
dashes; the others are the odd dashes. Each element specifies a dash length in
pixels. All of the elements must be nonzero (or a Value error results). The
dash-offset defines the phase of the pattern, specifying how many pixels into
dashes the pattern should actually begin in any single graphics request. Dashing
is continuous through path elements combined with a join-style but is reset to
the dash-offset between each sequence of joined lines.

The unit of measure for dashes is the same as in the ordinary coordinate
system. Ideally, a dash length is measured along the slope of the line, but
implementations are only required to match this ideal for horizontal and
vertical lines. Failing the ideal semantics, it is suggested that the length be
measured along the major axis of the line. The major axis is defined as the x
axis for lines drawn at an angle of between -45 and +45 degrees or between 135
and 225 degrees from the x axis. For all other lines, the major axis is the y
axis.

For any graphics primitive, the computation of the endpoint of an individual
dash only depends on the geometry of the primitive, the start position of the
dash, the direction of the dash, and the dash length.

For any graphics primitive, the total set of pixels used to render the primitive
(both even and odd numbered dash elements) with DoubleDash line-style is the
same as the set of pixels used to render the primitive with Solid line-style.

For any graphics primitive, if the primitive is drawn with OnOffDash or
DoubleDash line-style unclipped at position [x,y] and again at position
[x+dx,y+dy], then a point [x1,y1] is included in a dash in the first instance if
and only if the point [x1+dx,y1+dy] is included in the dash in the second
instance. In addition, the effective set of points comprising a dash cannot be
affected by clipping. A point is included in a clipped dash if and only if the
point lies inside the clipping region and the point would be included in the
dash when drawn unclipped.


* Fri 06 Jun 2014 04:47:36 PM JST
Alloc, GContext, Match, Value
* Fri 06 Jun 2014 04:47:59 PM JST
(while (not (looking-back "^[ ]+"))
    (backward-word)
    (insert "Bad")
    (backward-word)
    )
* Fri 06 Jun 2014 04:48:11 PM JST

* Fri 06 Jun 2014 04:48:11 PM JST

* Fri 06 Jun 2014 04:48:11 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 04:48:11 PM JST
        - [yas] elisp error!:

* Fri 06 Jun 2014 04:48:12 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 04:48:12 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 04:48:12 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 04:48:12 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 04:48:12 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 06 Jun 2014 04:48:20 PM JST
VoidCookie
* Fri 06 Jun 2014 04:49:06 PM JST
SetClipRectangles

gc: GCONTEXT
clip-x-origin, clip-y-origin: INT16
rectangles: LISTofRECTANGLE
ordering: { UnSorted, YSorted, YXSorted, YXBanded}

Errors: Alloc, GContext, Match, Value

This request changes clip-mask in gc to the specified list of rectangles and
sets the clip origin. Output will be clipped to remain contained within the
rectangles. The clip origin is interpreted relative to the origin of whatever
destination drawable is specified in a graphics request. The rectangle
coordinates are interpreted relative to the clip origin. The rectangles should
be nonintersecting, or graphics results will be undefined. Note that the list of
rectangles can be empty, which effectively disables output. This is the opposite
of passing None as the clip-mask in CreateGC and ChangeGC.

If known by the client, ordering relations on the rectangles can be specified
with the ordering argument. This may provide faster operation by the server. If
an incorrect ordering is specified, the server may generate a Match error, but
it is not required to do so. If no error is generated, the graphics results are
undefined. UnSorted means that the rectangles are in arbitrary order. YSorted
means that the rectangles are nondecreasing in their Y origin. YXSorted
additionally constrains YSorted order in that all rectangles with an equal Y
origin are nondecreasing in their X origin. YXBanded additionally constrains
YXSorted by requiring that, for every possible Y scanline, all rectangles that
include that scanline have identical Y origins and Y extents.


* Fri 06 Jun 2014 04:49:24 PM JST
VoidCookie
* Fri 06 Jun 2014 04:49:34 PM JST
FreeGC

gc: GCONTEXT

Errors: GContext

This request deletes the association between the resource ID and the gcontext
and destroys the gcontext.


* Fri 06 Jun 2014 04:50:02 PM JST
VoidCookie
* Fri 06 Jun 2014 04:50:15 PM JST
ClearArea

window: WINDOW
x, y: INT16
width, height: CARD16
exposures: BOOL

Errors: Match, Value, Window

The x and y coordinates are relative to the window's origin and specify the
upper-left corner of the rectangle. If width is zero, it is replaced with the
current width of the window minus x. If height is zero, it is replaced with the
current height of the window minus y. If the window has a defined background
tile, the rectangle is tiled with a plane-mask of all ones and function of Copy
and a subwindow-mode of ClipByChildren. If the window has background None, the
contents of the window are not changed. In either case, if exposures is True,
then one or more exposure events are generated for regions of the rectangle that
are either visible or are being retained in a backing store.

It is a Match error to use an InputOnly window in this request.


* Fri 06 Jun 2014 04:52:04 PM JST

* Fri 06 Jun 2014 04:52:04 PM JST

* Fri 06 Jun 2014 04:52:04 PM JST
        - `"""Request CopyArea X protocol."""

* Fri 06 Jun 2014 04:52:25 PM JST
VoidCookie
* Fri 06 Jun 2014 04:52:54 PM JST
CopyArea

src-drawable, dst-drawable: DRAWABLE
gc: GCONTEXT
src-x, src-y: INT16
width, height: CARD16
dst-x, dst-y: INT16

Errors: Drawable, GContext, Match

This request combines the specified rectangle of src-drawable with the specified
rectangle of dst-drawable. The src-x and src-y coordinates are relative to
src-drawable's origin. The dst-x and dst-y are relative to dst-drawable's
origin, each pair specifying the upper-left corner of the rectangle. The
src-drawable must have the same root and the same depth as dst-drawable (or a
Match error results).

If regions of the source rectangle are obscured and have not been retained in
backing store or if regions outside the boundaries of the source drawable are
specified, then those regions are not copied, but the following occurs on all
corresponding destination regions that are either visible or are retained in
backing-store. If the dst-drawable is a window with a background other than
None, these corresponding destination regions are tiled (with plane-mask of all
ones and function Copy) with that background. Regardless of tiling and whether
the destination is a window or a pixmap, if graphics-exposures in gc is True,
then GraphicsExposure events for all corresponding destination regions are
generated.

If graphics-exposures is True but no GraphicsExposure events are generated, then
a NoExposure event is generated.

GC components: function, plane-mask, subwindow-mode, graphics-exposures,
clip-x-origin, clip-y-origin, clip-mask


* Fri 06 Jun 2014 04:53:13 PM JST
           
* Fri 06 Jun 2014 04:53:23 PM JST
VoidCookie
* Fri 06 Jun 2014 04:53:51 PM JST
CopyPlane

src-drawable, dst-drawable: DRAWABLE
gc: GCONTEXT
src-x, src-y: INT16
width, height: CARD16
dst-x, dst-y: INT16
bit-plane: CARD32

Errors: Drawable, GContext, Match, Value

The src-drawable must have the same root as dst-drawable (or a Match error
results), but it need not have the same depth. The bit-plane must have exactly
one bit set to 1 and the value of bit-plane must be less than %2 sup n% where n
is the depth of src-drawable (or a Value error results). Effectively, a pixmap
of the same depth as dst-drawable and with size specified by the source region
is formed using the foreground/background pixels in gc (foreground everywhere
the bit-plane in src-drawable contains a bit set to 1, background everywhere the
bit-plane contains a bit set to 0), and the equivalent of a CopyArea is
performed, with all the same exposure semantics. This can also be thought of as
using the specified region of the source bit-plane as a stipple with a
fill-style of OpaqueStippled for filling a rectangular area of the destination.

GC components: function, plane-mask, foreground, background, subwindow-mode,
graphics-exposures, clip-x-origin, clip-y-origin, clip-mask


* Fri 06 Jun 2014 04:54:08 PM JST
VoidCookie
* Fri 06 Jun 2014 04:54:51 PM JST
PolyPoint

drawable: DRAWABLE
gc: GCONTEXT
coordinate-mode: { Origin, Previous}
points: LISTofPOINT

Errors: Drawable, GContext, Match, Value

This request combines the foreground pixel in gc with the pixel at each point in
the drawable. The points are drawn in the order listed.

The first point is always relative to the drawable's origin. The rest are
relative either to that origin or the previous point, depending on the
coordinate-mode.

GC components: function, plane-mask, foreground, subwindow-mode, clip-x-origin,
clip-y-origin, clip-mask


* Fri 06 Jun 2014 04:55:15 PM JST
VoidCookie
* Fri 06 Jun 2014 04:56:12 PM JST
PolyLine

drawable: DRAWABLE
gc: GCONTEXT
coordinate-mode: { Origin, Previous}
points: LISTofPOINT

Errors: Drawable, GContext, Match, Value

This request draws lines between each pair of points (point[i], point[i+1]). The
lines are drawn in the order listed. The lines join correctly at all
intermediate points, and if the first and last points coincide, the first and
last lines also join correctly.

For any given line, no pixel is drawn more than once. If thin (zero line-width)
lines intersect, the intersecting pixels are drawn multiple times. If wide lines
intersect, the intersecting pixels are drawn only once, as though the entire
PolyLine were a single filled shape.

The first point is always relative to the drawable's origin. The rest are
relative either to that origin or the previous point, depending on the
coordinate-mode.

When either of the two lines involved in a Bevel join is neither vertical nor
horizontal, then the slope and position of the line segment defining the bevel
join edge is implementation dependent. However, the computation of the slope and
distance (relative to the join point) only depends on the line width and the
slopes of the two lines.

GC components: function, plane-mask, line-width, line-style, cap-style,
join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dashes


* Fri 06 Jun 2014 04:56:27 PM JST
VoidCookie
* Fri 06 Jun 2014 04:56:38 PM JST
PolySegment

drawable: DRAWABLE
gc: GCONTEXT
segments: LISTofSEGMENT
where:
SEGMENT: [x1, y1, x2, y2: INT16]

Errors: Drawable, GContext, Match

For each segment, this request draws a line between [x1, y1] and [x2, y2]. The
lines are drawn in the order listed. No joining is performed at coincident
endpoints. For any given line, no pixel is drawn more than once. If lines
intersect, the intersecting pixels are drawn multiple times.

GC components: function, plane-mask, line-width, line-style, cap-style,
fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dashes


* Fri 06 Jun 2014 04:57:31 PM JST
PolyRectangle

drawable: DRAWABLE
gc: GCONTEXT
rectangles: LISTofRECTANGLE

Errors: Drawable, GContext, Match

This request draws the outlines of the specified rectangles, as if a five-point
PolyLine were specified for each rectangle:

	[x,y] [x+width,y] [x+width,y+height] [x,y+height] [x,y]
The x and y coordinates of each rectangle are relative to the drawable's origin
and define the upper-left corner of the rectangle.

The rectangles are drawn in the order listed. For any given rectangle, no pixel
is drawn more than once. If rectangles intersect, the intersecting pixels are
drawn multiple times.

GC components: function, plane-mask, line-width, line-style, cap-style,
join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dashes


* Fri 06 Jun 2014 04:57:41 PM JST
VoidCookie
* Fri 06 Jun 2014 04:57:57 PM JST
back
* Fri 06 Jun 2014 04:58:34 PM JST
(py:auto-colon-return-on-line)
* Fri 06 Jun 2014 04:59:25 PM JST
(search-forward "Cookie")
* Fri 06 Jun 2014 05:00:15 PM JST
(read-region-or-string)
* Fri 06 Jun 2014 05:01:04 PM JST
(progn
  (search-backward "@Return:")
  (py:auto-colon-return-on-line)
  (let ((pnt (point)))
    (search-forward "Cookie")
    (backward-word)
    (mark-word)
    (let ((text (read-region-or-string)))
      (deactivate-mark t)
      (goto-char pnt)
      (insert text)
      )
    )
)
* Fri 06 Jun 2014 05:01:36 PM JST

* Fri 06 Jun 2014 05:01:36 PM JST

* Fri 06 Jun 2014 05:01:36 PM JST
(progn

* Fri 06 Jun 2014 05:02:24 PM JST
PolyArc

drawable: DRAWABLE
gc: GCONTEXT
arcs: LISTofARC

Errors: Drawable, GContext, Match

This request draws circular or elliptical arcs. Each arc is specified by a
rectangle and two angles. The angles are signed integers in degrees scaled by
64, with positive indicating counterclockwise motion and negative indicating
clockwise motion. The start of the arc is specified by angle1 relative to the
three-o'clock position from the center of the rectangle, and the path and extent
of the arc is specified by angle2 relative to the start of the arc. If the
magnitude of angle2 is greater than 360 degrees, it is truncated to 360
degrees. The x and y coordinates of the rectangle are relative to the origin of
the drawable. For an arc specified as [x,y,w,h,a1,a2], the origin of the major
and minor axes is at [x+(w/2),y+(h/2)], and the infinitely thin path describing
the entire circle/ellipse intersects the horizontal axis at [x,y+(h/2)] and
[x+w,y+(h/2)] and intersects the vertical axis at [x+(w/2),y] and
[x+(w/2),y+h]. These coordinates are not necessarily integral; that is, they are
not truncated to discrete coordinates.

For a wide line with line-width lw, the ideal bounding outlines for filling are
given by the two infinitely thin paths consisting of all points whose
perpendicular distance from a tangent to the path of the circle/ellipse is equal
to lw/2 (which may be a fractional value). When the width and height of the arc
are not equal and both are nonzero, then the actual bounding outlines are
implementation dependent. However, the computation of the shape and position of
the bounding outlines (relative to the center of the arc) only depends on the
width and height of the arc and the line-width.

The cap-style is applied the same as for a line corresponding to the tangent of
the circle/ellipse at the endpoint. When the angle of an arc face is not an
integral multiple of 90 degrees, and the width and height of the arc are both
are nonzero, then the shape and position of the cap at that face is
implementation dependent. However, for a Butt cap, the face is defined by a
straight line, and the computation of the position (relative to the center of
the arc) and the slope of the line only depends on the width and height of the
arc and the angle of the arc face. For other cap styles, the computation of the
position (relative to the center of the arc) and the shape of the cap only
depends on the width and height of the arc, the line-width, the angle of the arc
face, and the direction (clockwise or counter clockwise) of the arc from the
endpoint.

The join-style is applied the same as for two lines corresponding to the
tangents of the circles/ellipses at the join point. When the width and height of
both arcs are nonzero, and the angle of either arc face is not an integral
multiple of 90 degrees, then the shape of the join is implementation
dependent. However, the computation of the shape only depends on the width and
height of each arc, the line-width, the angles of the two arc faces, the
direction (clockwise or counter clockwise) of the arcs from the join point, and
the relative orientation of the two arc center points.

For an arc specified as [x,y,w,h,a1,a2], the angles must be specified in the
effectively skewed coordinate system of the ellipse (for a circle, the angles
and coordinate systems are identical). The relationship between these angles and
angles expressed in the normal coordinate system of the screen (as measured with
a protractor) is as follows:

	skewed-angle = atan(tan(normal-angle) * w/h) + adjust
The skewed-angle and normal-angle are expressed in radians (rather than in
degrees scaled by 64) in the range [0,2*PI). The atan returns a value in the
range [-PI/2,PI/2]. The adjust is:

0	for normal-angle in the range [0,PI/2)
PI	for normal-angle in the range [PI/2,(3*PI)/2)
2*PI	for normal-angle in the range [(3*PI)/2,2*PI)
The arcs are drawn in the order listed. If the last point in one arc coincides
with the first point in the following arc, the two arcs will join correctly. If
the first point in the first arc coincides with the last point in the last arc,
the two arcs will join correctly. For any given arc, no pixel is drawn more than
once. If two arcs join correctly and the line-width is greater than zero and the
arcs intersect, no pixel is drawn more than once. Otherwise, the intersecting
pixels of intersecting arcs are drawn multiple times. Specifying an arc with one
endpoint and a clockwise extent draws the same pixels as specifying the other
endpoint and an equivalent counterclockwise extent, except as it affects joins.

By specifying one axis to be zero, a horizontal or vertical line can be drawn.

Angles are computed based solely on the coordinate system, ignoring the aspect
ratio.

GC components: function, plane-mask, line-width, line-style, cap-style,
join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dashes


* Fri 06 Jun 2014 05:02:41 PM JST
FillPoly

drawable: DRAWABLE
gc: GCONTEXT
shape: { Complex, Nonconvex, Convex}
coordinate-mode: { Origin, Previous}
points: LISTofPOINT

Errors: Drawable, GContext, Match, Value

This request fills the region closed by the specified path. The path is closed
automatically if the last point in the list does not coincide with the first
point. No pixel of the region is drawn more than once.

The first point is always relative to the drawable's origin. The rest are
relative either to that origin or the previous point, depending on the
coordinate-mode.

The shape parameter may be used by the server to improve performance. Complex
means the path may self-intersect. Contiguous coincident points in the path are
not treated as self-intersection.

Nonconvex means the path does not self-intersect, but the shape is not wholly
convex. If known by the client, specifying Nonconvex over Complex may improve
performance. If Nonconvex is specified for a self-intersecting path, the
graphics results are undefined.

Convex means that for every pair of points inside the polygon, the line segment
connecting them does not intersect the path. If known by the client, specifying
Convex can improve performance. If Convex is specified for a path that is not
convex, the graphics results are undefined.

GC components: function, plane-mask, fill-style, fill-rule, subwindow-mode,
clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin


* Fri 06 Jun 2014 05:02:57 PM JST
PolyFillRectangle

drawable: DRAWABLE
gc: GCONTEXT
rectangles: LISTofRECTANGLE

Errors: Drawable, GContext, Match

This request fills the specified rectangles, as if a four-point FillPoly were
specified for each rectangle:

	[x,y] [x+width,y] [x+width,y+height] [x,y+height]
The x and y coordinates of each rectangle are relative to the drawable's origin
and define the upper-left corner of the rectangle.

The rectangles are drawn in the order listed. For any given rectangle, no pixel
is drawn more than once. If rectangles intersect, the intersecting pixels are
drawn multiple times.

GC components: function, plane-mask, fill-style, subwindow-mode, clip-x-origin,
clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin


* Fri 06 Jun 2014 05:03:21 PM JST
PolyFillArc

drawable: DRAWABLE
gc: GCONTEXT
arcs: LISTofARC

Errors: Drawable, GContext, Match

For each arc, this request fills the region closed by the infinitely thin path
described by the specified arc and one or two line segments, depending on the
arc-mode. For Chord, the single line segment joining the endpoints of the arc is
used. For PieSlice, the two line segments joining the endpoints of the arc with
the center point are used.

For an arc specified as [x,y,w,h,a1,a2], the origin of the major and minor axes
is at [x+(w/2),y+(h/2)], and the infinitely thin path describing the entire
circle/ellipse intersects the horizontal axis at [x,y+(h/2)] and [x+w,y+(h/2)]
and intersects the vertical axis at [x+(w/2),y] and [x+(w/2),y+h]. These
coordinates are not necessarily integral; that is, they are not truncated to
discrete coordinates.

The arc angles are interpreted as specified in the PolyArc request. When the
angle of an arc face is not an integral multiple of 90 degrees, then the precise
endpoint on the arc is implementation dependent. However, for Chord arc-mode,
the computation of the pair of endpoints (relative to the center of the arc)
only depends on the width and height of the arc and the angles of the two arc
faces. For PieSlice arc-mode, the computation of an endpoint only depends on the
angle of the arc face for that endpoint and the ratio of the arc width to arc
height.

The arcs are filled in the order listed. For any given arc, no pixel is drawn
more than once. If regions intersect, the intersecting pixels are drawn multiple
times.

GC components: function, plane-mask, fill-style, arc-mode, subwindow-mode,
clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin


* Fri 06 Jun 2014 05:03:33 PM JST
(e2wm:navi-right-command)
* Fri 06 Jun 2014 05:03:52 PM JST
PutImage

drawable: DRAWABLE
gc: GCONTEXT
depth: CARD8
width, height: CARD16
dst-x, dst-y: INT16
left-pad: CARD8
format: { Bitmap, XYPixmap, ZPixmap}
data: LISTofBYTE

Errors: Drawable, GContext, Match, Value

This request combines an image with a rectangle of the drawable. The dst-x and
dst-y coordinates are relative to the drawable's origin.

If Bitmap format is used, then depth must be one (or a Match error results), and
the image must be in XY format. The foreground pixel in gc defines the source
for bits set to 1 in the image, and the background pixel defines the source for
the bits set to 0.

For XYPixmap and ZPixmap, the depth must match the depth of the drawable (or a
Match error results). For XYPixmap, the image must be sent in XY format. For
ZPixmap, the image must be sent in the Z format defined for the given depth.

The left-pad must be zero for ZPixmap format (or a Match error results). For
Bitmap and XYPixmap format, left-pad must be less than bitmap-scanline-pad as
given in the server connection setup information (or a Match error results). The
first left-pad bits in every scanline are to be ignored by the server. The
actual image begins that many bits into the data. The width argument defines the
width of the actual image and does not include left-pad.

GC components: function, plane-mask, subwindow-mode, clip-x-origin,
clip-y-origin, clip-mask

GC mode-dependent components: foreground, background


* Fri 06 Jun 2014 05:04:29 PM JST
GetImage

drawable: DRAWABLE
x, y: INT16
width, height: CARD16
plane-mask: CARD32
format: { XYPixmap, ZPixmap}

depth: CARD8
visual: VISUALID or None
data: LISTofBYTE

Errors: Drawable, Match, Value

This request returns the contents of the given rectangle of the drawable in the
given format. The x and y coordinates are relative to the drawable's origin and
define the upper-left corner of the rectangle. If XYPixmap is specified, only
the bit planes specified in plane-mask are transmitted, with the planes
appearing from most significant to least significant in bit order. If ZPixmap is
specified, then bits in all planes not specified in plane-mask are transmitted
as zero. Range checking is not performed on plane-mask; extraneous bits are
simply ignored. The returned depth is as specified when the drawable was created
and is the same as a depth component in a FORMAT structure (in the connection
setup), not a bits-per-pixel component. If the drawable is a window, its visual
type is returned. If the drawable is a pixmap, the visual is None.

If the drawable is a pixmap, then the given rectangle must be wholly contained
within the pixmap (or a Match error results). If the drawable is a window, the
window must be viewable, and it must be the case that, if there were no
inferiors or overlapping windows, the specified rectangle of the window would be
fully visible on the screen and wholly contained within the outside edges of the
window (or a Match error results). Note that the borders of the window can be
included and read with this request. If the window has a backing store, then the
backing-store contents are returned for regions of the window that are obscured
by noninferior windows; otherwise, the returned contents of such obscured
regions are undefined. Also undefined are the returned contents of visible
regions of inferiors of different depth than the specified window. The pointer
cursor image is not included in the contents returned.

This request is not general-purpose in the same sense as other graphics-related
requests. It is intended specifically for rudimentary hardcopy support.


* Fri 06 Jun 2014 05:04:42 PM JST
PolyText8

drawable: DRAWABLE
gc: GCONTEXT
x, y: INT16
items: LISTofTEXTITEM8
where:
TEXTITEM8:	 TEXTELT8 or FONT
TEXTELT8:	 [delta: INT8
string: STRING8]

Errors: Drawable, Font, GContext, Match

The x and y coordinates are relative to the drawable's origin and specify the
baseline starting position (the initial character origin). Each text item is
processed in turn. A font item causes the font to be stored in gc and to be used
for subsequent text. Switching among fonts does not affect the next character
origin. A text element delta specifies an additional change in the position
along the x axis before the string is drawn; the delta is always added to the
character origin. Each character image, as defined by the font in gc, is treated
as an additional mask for a fill operation on the drawable.

All contained FONTs are always transmitted most significant byte first.

If a Font error is generated for an item, the previous items may have been
drawn.

For fonts defined with 2-byte matrix indexing, each STRING8 byte is interpreted
as a byte2 value of a CHAR2B with a byte1 value of zero.

GC components: function, plane-mask, fill-style, font, subwindow-mode,
clip-x-origin, clip-y-origin, clip-mask

GC mode-dependent components: foreground, background, tile, stipple,
tile-stipple-x-origin, tile-stipple-y-origin


* Fri 06 Jun 2014 05:04:56 PM JST
PolyText16

drawable: DRAWABLE
gc: GCONTEXT
x, y: INT16
items: LISTofTEXTITEM16
where:
TEXTITEM16:	 TEXTELT16 or FONT
TEXTELT16:	 [delta: INT8
string: STRING16]

Errors: Drawable, Font, GContext, Match

This request is similar to PolyText8, except 2-byte (or 16-bit) characters are
used. For fonts defined with linear indexing rather than 2-byte matrix indexing,
the server will interpret each CHAR2B as a 16-bit number that has been
transmitted most significant byte first (that is, byte1 of the CHAR2B is taken
as the most significant byte).


* Fri 06 Jun 2014 05:05:24 PM JST
ImageText8

drawable: DRAWABLE
gc: GCONTEXT
x, y: INT16
string: STRING8

Errors: Drawable, GContext, Match

The x and y coordinates are relative to the drawable's origin and specify the
baseline starting position (the initial character origin). The effect is first
to fill a destination rectangle with the background pixel defined in gc and then
to paint the text with the foreground pixel. The upper-left corner of the filled
rectangle is at:

	[x, y - font-ascent]
the width is:

	overall-width
and the height is:

	font-ascent + font-descent
The overall-width, font-ascent, and font-descent are as they would be returned
by a QueryTextExtents call using gc and string.

The function and fill-style defined in gc are ignored for this request. The
effective function is Copy, and the effective fill-style Solid.

For fonts defined with 2-byte matrix indexing, each STRING8 byte is interpreted
as a byte2 value of a CHAR2B with a byte1 value of zero.

GC components: plane-mask, foreground, background, font, subwindow-mode,
clip-x-origin, clip-y-origin, clip-mask


* Fri 06 Jun 2014 05:05:34 PM JST
ImageText16

drawable: DRAWABLE
gc: GCONTEXT
x, y: INT16
string: STRING16

Errors: Drawable, GContext, Match

This request is similar to ImageText8, except 2-byte (or 16-bit) characters are
used. For fonts defined with linear indexing rather than 2-byte matrix indexing,
the server will interpret each CHAR2B as a 16-bit number that has been
transmitted most significant byte first (that is, byte1 of the CHAR2B is taken
as the most significant byte).


* Fri 06 Jun 2014 05:05:47 PM JST
CreateColormap

mid: COLORMAP
visual: VISUALID
window: WINDOW
alloc: { None, All}

Errors: Alloc, IDChoice, Match, Value, Window

This request creates a colormap of the specified visual type for the screen on
which the window resides and associates the identifier mid with it. The visual
type must be one supported by the screen (or a Match error results). The initial
values of the colormap entries are undefined for classes GrayScale, PseudoColor,
and DirectColor. For StaticGray, StaticColor, and TrueColor, the entries will
have defined values, but those values are specific to the visual and are not
defined by the core protocol. For StaticGray, StaticColor, and TrueColor, alloc
must be specified as None (or a Match error results). For the other classes, if
alloc is None, the colormap initially has no allocated entries, and clients can
allocate entries.

If alloc is All, then the entire colormap is allocated writable. The initial
values of all allocated entries are undefined. For GrayScale and PseudoColor,
the effect is as if an AllocColorCells request returned all pixel values from
zero to N - 1, where N is the colormap-entries value in the specified
visual. For DirectColor, the effect is as if an AllocColorPlanes request
returned a pixel value of zero and red-mask, green-mask, and blue-mask values
containing the same bits as the corresponding masks in the specified
visual. However, in all cases, none of these entries can be freed with
FreeColors.


* Fri 06 Jun 2014 05:05:57 PM JST
FreeColormap

cmap: COLORMAP

Errors: Colormap

This request deletes the association between the resource ID and the colormap
and frees the colormap storage. If the colormap is an installed map for a
screen, it is uninstalled (see UninstallColormap request). If the colormap is
defined as the colormap for a window (by means of CreateWindow or
ChangeWindowAttributes), the colormap for the window is changed to None, and a
ColormapNotify event is generated. The protocol does not define the colors
displayed for a window with a colormap of None.

This request has no effect on a default colormap for a screen.


* Fri 06 Jun 2014 05:06:12 PM JST
CopyColormapAndFree

mid, src-cmap: COLORMAP

Errors: Alloc, Colormap, IDChoice

This request creates a colormap of the same visual type and for the same screen
as src-cmap, and it associates identifier mid with it. It also moves all of the
client's existing allocations from src-cmap to the new colormap with their color
values intact and their read-only or writable characteristics intact, and it
frees those entries in src-cmap. Color values in other entries in the new
colormap are undefined. If src-cmap was created by the client with alloc All
(see CreateColormap request), then the new colormap is also created with alloc
All, all color values for all entries are copied from src-cmap, and then all
entries in src-cmap are freed. If src-cmap was not created by the client with
alloc All, then the allocations to be moved are all those pixels and planes that
have been allocated by the client using either AllocColor, AllocNamedColor,
AllocColorCells, or AllocColorPlanes and that have not been freed since they
were allocated.


* Fri 06 Jun 2014 05:06:25 PM JST
InstallColormap

cmap: COLORMAP

Errors: Colormap

This request makes this colormap an installed map for its screen. All windows
associated with this colormap immediately display with true colors. As a side
effect, additional colormaps might be implicitly installed or uninstalled by the
server. Which other colormaps get installed or uninstalled is server-dependent
except that the required list must remain installed.

If cmap is not already an installed map, a ColormapNotify event is generated on
every window having cmap as an attribute. In addition, for every other colormap
that is installed or uninstalled as a result of the request, a ColormapNotify
event is generated on every window having that colormap as an attribute.

At any time, there is a subset of the installed maps that are viewed as an
ordered list and are called the required list. The length of the required list
is at most M, where M is the min-installed-maps specified for the screen in the
connection setup. The required list is maintained as follows. When a colormap is
an explicit argument to InstallColormap, it is added to the head of the list;
the list is truncated at the tail, if necessary, to keep the length of the list
to at most M. When a colormap is an explicit argument to UninstallColormap and
it is in the required list, it is removed from the list. A colormap is not added
to the required list when it is installed implicitly by the server, and the
server cannot implicitly uninstall a colormap that is in the required list.

Initially the default colormap for a screen is installed (but is not in the
required list).


* Fri 06 Jun 2014 05:06:37 PM JST
UninstallColormap

cmap: COLORMAP

Errors: Colormap

If cmap is on the required list for its screen (see InstallColormap request), it
is removed from the list. As a side effect, cmap might be uninstalled, and
additional colormaps might be implicitly installed or uninstalled. Which
colormaps get installed or uninstalled is server-dependent except that the
required list must remain installed.

If cmap becomes uninstalled, a ColormapNotify event is generated on every window
having cmap as an attribute. In addition, for every other colormap that is
installed or uninstalled as a result of the request, a ColormapNotify event is
generated on every window having that colormap as an attribute.


* Fri 06 Jun 2014 05:06:51 PM JST
ListInstalledColormaps

window: WINDOW

cmaps: LISTofCOLORMAP

Errors: Window

This request returns a list of the currently installed colormaps for the screen
of the specified window. The order of colormaps is not significant, and there is
no explicit indication of the required list (see InstallColormap request).


* Fri 06 Jun 2014 05:07:05 PM JST
AllocColor

cmap: COLORMAP
red, green, blue: CARD16

pixel: CARD32
red, green, blue: CARD16

Errors: Alloc, Colormap

This request allocates a read-only colormap entry corresponding to the closest
RGB values provided by the hardware. It also returns the pixel and the RGB
values actually used. Multiple clients requesting the same effective RGB values
can be assigned the same read-only entry, allowing entries to be shared.


* Fri 06 Jun 2014 05:07:19 PM JST
AllocNamedColor

cmap: COLORMAP
name: STRING8

pixel: CARD32
exact-red, exact-green, exact-blue: CARD16
visual-red, visual-green, visual-blue: CARD16

Errors: Alloc, Colormap, Name

This request looks up the named color with respect to the screen associated with
the colormap. Then, it does an AllocColor on cmap. The name should use the ISO
Latin-1 encoding, and uppercase and lowercase do not matter. The exact RGB
values specify the true values for the color, and the visual values specify the
values actually used in the colormap.


* Fri 06 Jun 2014 05:08:27 PM JST
AllocColorCells

cmap: COLORMAP
colors, planes: CARD16
contiguous: BOOL

pixels, masks: LISTofCARD32

Errors: Alloc, Colormap, Value

The number of colors must be positive, and the number of planes must be
nonnegative (or a Value error results). If C colors and P planes are requested,
then C pixels and P masks are returned. No mask will have any bits in common
with any other mask or with any of the pixels. By ORing together masks and
pixels, C*%2 sup P% distinct pixels can be produced; all of these are allocated
writable by the request. For GrayScale or PseudoColor, each mask will have
exactly one bit set to 1; for DirectColor, each will have exactly three bits set
to 1. If contiguous is True and if all masks are ORed together, a single
contiguous set of bits will be formed for GrayScale or PseudoColor, and three
contiguous sets of bits (one within each pixel subfield) for DirectColor. The
RGB values of the allocated entries are undefined.


* Fri 06 Jun 2014 05:09:36 PM JST
AllocColorPlanes

cmap: COLORMAP
colors, reds, greens, blues: CARD16
contiguous: BOOL

pixels: LISTofCARD32
red-mask, green-mask, blue-mask: CARD32

Errors: Alloc, Colormap, Value

The number of colors must be positive, and the reds, greens, and blues must be
nonnegative (or a Value error results). If C colors, R reds, G greens, and B
blues are requested, then C pixels are returned, and the masks have R, G, and B
bits set, respectively. If contiguous is True, then each mask will have a
contiguous set of bits. No mask will have any bits in common with any other mask
or with any of the pixels. For DirectColor, each mask will lie within the
corresponding pixel subfield. By ORing together subsets of masks with pixels,
C*%2 sup R+G+B% distinct pixels can be produced; all of these are allocated
writable by the request. The initial RGB values of the allocated entries are
undefined. In the colormap, there are only C*%2 sup R% independent red entries,
C*%2 sup G% independent green entries, and C*%2 sup B% independent blue
entries. This is true even for PseudoColor. When the colormap entry for a pixel
value is changed using StoreColors or StoreNamedColor, the pixel is decomposed
according to the masks and the corresponding independent entries are updated.


* Fri 06 Jun 2014 05:09:51 PM JST
FreeColors

cmap: COLORMAP
pixels: LISTofCARD32
plane-mask: CARD32

Errors: Access, Colormap, Value

The plane-mask should not have any bits in common with any of the pixels. The
set of all pixels is produced by ORing together subsets of plane-mask with the
pixels. The request frees all of these pixels that were allocated by the client
(using AllocColor, AllocNamedColor, AllocColorCells, and AllocColorPlanes). Note
that freeing an individual pixel obtained from AllocColorPlanes may not actually
allow it to be reused until all of its related pixels are also freed. Similarly,
a read-only entry is not actually freed until it has been freed by all clients,
and if a client allocates the same read-only entry multiple times, it must free
the entry that many times before the entry is actually freed.

All specified pixels that are allocated by the client in cmap are freed, even if
one or more pixels produce an error. A Value error is generated if a specified
pixel is not a valid index into cmap. An Access error is generated if a
specified pixel is not allocated by the client (that is, is unallocated or is
only allocated by another client) or if the colormap was created with all
entries writable (using an alloc value of All in CreateColormap). If more than
one pixel is in error, it is arbitrary as to which pixel is reported.


* Fri 06 Jun 2014 05:10:03 PM JST
StoreColors

cmap: COLORMAP
items: LISTofCOLORITEM
where:
COLORITEM:	[pixel: CARD32
 	 do-red, do-green, do-blue: BOOL
 	 red, green, blue: CARD16]

Errors: Access, Colormap, Value

This request changes the colormap entries of the specified pixels. The do-red,
do-green, and do-blue fields indicate which components should actually be
changed. If the colormap is an installed map for its screen, the changes are
visible immediately.

All specified pixels that are allocated writable in cmap (by any client) are
changed, even if one or more pixels produce an error. A Value error is generated
if a specified pixel is not a valid index into cmap, and an Access error is
generated if a specified pixel is unallocated or is allocated read-only. If more
than one pixel is in error, it is arbitrary as to which pixel is reported.


* Fri 06 Jun 2014 05:10:26 PM JST
StoreColors

cmap: COLORMAP
items: LISTofCOLORITEM
where:
COLORITEM:	[pixel: CARD32
 	 do-red, do-green, do-blue: BOOL
 	 red, green, blue: CARD16]

Errors: Access, Colormap, Value

This request changes the colormap entries of the specified pixels. The do-red,
do-green, and do-blue fields indicate which components should actually be
changed. If the colormap is an installed map for its screen, the changes are
visible immediately.

All specified pixels that are allocated writable in cmap (by any client) are
changed, even if one or more pixels produce an error. A Value error is generated
if a specified pixel is not a valid index into cmap, and an Access error is
generated if a specified pixel is unallocated or is allocated read-only. If more
than one pixel is in error, it is arbitrary as to which pixel is reported.


* Fri 06 Jun 2014 05:10:41 PM JST
StoreNamedColor

cmap: COLORMAP
pixel: CARD32
name: STRING8
do-red, do-green, do-blue: BOOL

Errors: Access, Colormap, Name, Value

This request looks up the named color with respect to the screen associated with
cmap and then does a StoreColors in cmap. The name should use the ISO Latin-1
encoding, and uppercase and lowercase do not matter. The Access and Value errors
are the same as in StoreColors.


* Fri 06 Jun 2014 05:10:58 PM JST
QueryColors

cmap: COLORMAP
pixels: LISTofCARD32

colors: LISTofRGB
where:
RGB: [red, green, blue: CARD16]

Errors: Colormap, Value

This request returns the hardware-specific color values stored in cmap for the
specified pixels. The values returned for an unallocated entry are undefined. A
Value error is generated if a pixel is not a valid index into cmap. If more than
one pixel is in error, it is arbitrary as to which pixel is reported.


* Fri 06 Jun 2014 05:11:14 PM JST
LookupColor

cmap: COLORMAP
name: STRING8

exact-red, exact-green, exact-blue: CARD16
visual-red, visual-green, visual-blue: CARD16

Errors: Colormap, Name

This request looks up the string name of a color with respect to the screen
associated with cmap and returns both the exact color values and the closest
values provided by the hardware with respect to the visual type of cmap. The
name should use the ISO Latin-1 encoding, and uppercase and lowercase do not
matter.


* Fri 06 Jun 2014 05:11:42 PM JST
CreateCursor

cid: CURSOR
source: PIXMAP
mask: PIXMAP or None
fore-red, fore-green, fore-blue: CARD16
back-red, back-green, back-blue: CARD16
x, y: CARD16

Errors: Alloc, IDChoice, Match, Pixmap

This request creates a cursor and associates identifier cid with it. The
foreground and background RGB values must be specified, even if the server only
has a StaticGray or GrayScale screen. The foreground is used for the bits set to
1 in the source, and the background is used for the bits set to 0. Both source
and mask (if specified) must have depth one (or a Match error results), but they
can have any root. The mask pixmap defines the shape of the cursor. That is, the
bits set to 1 in the mask define which source pixels will be displayed, and
where the mask has bits set to 0, the corresponding bits of the source pixmap
are ignored. If no mask is given, all pixels of the source are displayed. The
mask, if present, must be the same size as the source (or a Match error
results). The x and y coordinates define the hotspot relative to the source's
origin and must be a point within the source (or a Match error results).

The components of the cursor may be transformed arbitrarily to meet display
limitations.

The pixmaps can be freed immediately if no further explicit references to them
are to be made.

Subsequent drawing in the source or mask pixmap has an undefined effect on the
cursor. The server might or might not make a copy of the pixmap.


* Fri 06 Jun 2014 05:12:10 PM JST
CreateGlyphCursor

cid: CURSOR
source-font: FONT
mask-font: FONT or None
source-char, mask-char: CARD16
fore-red, fore-green, fore-blue: CARD16
back-red, back-green, back-blue: CARD16

Errors: Alloc, Font, IDChoice, Value

This request is similar to CreateCursor, except the source and mask bitmaps are
obtained from the specified font glyphs. The source-char must be a defined glyph
in source-font, and if mask-font is given, mask-char must be a defined glyph in
mask-font (or a Value error results). The mask font and character are
optional. The origins of the source and mask (if it is defined) glyphs are
positioned coincidently and define the hotspot. The source and mask need not
have the same bounding box metrics, and there is no restriction on the placement
of the hotspot relative to the bounding boxes. If no mask is given, all pixels
of the source are displayed. Note that source-char and mask-char are CARD16, not
CHAR2B. For 2-byte matrix fonts, the 16-bit value should be formed with byte1 in
the most significant byte and byte2 in the least significant byte.

The components of the cursor may be transformed arbitrarily to meet display
limitations.

The fonts can be freed immediately if no further explicit references to them are
to be made.


* Fri 06 Jun 2014 05:12:26 PM JST
                 fore_red, fore_green, fore_blue, back_red,
                 back_green, back_blue):

* Fri 06 Jun 2014 05:12:40 PM JST
FreeCursor

cursor: CURSOR

Errors: Cursor

This request deletes the association between the resource ID and the cursor. The
cursor storage will be freed when no other resource references it.


* Fri 06 Jun 2014 05:14:31 PM JST
RecolorCursor

cursor: CURSOR
fore-red, fore-green, fore-blue: CARD16
back-red, back-green, back-blue: CARD16

Errors: Cursor

This request changes the color of a cursor. If the cursor is being displayed on
a screen, the change is visible immediately.


* Fri 06 Jun 2014 05:15:09 PM JST
QueryBestSize

class: { Cursor, Tile, Stipple}
drawable: DRAWABLE
width, height: CARD16

width, height: CARD16

Errors: Drawable, Match, Value

This request returns the best size that is closest to the argument size. For
Cursor, this is the largest size that can be fully displayed. For Tile, this is
the size that can be tiled fastest. For Stipple, this is the size that can be
stippled fastest.

For Cursor, the drawable indicates the desired screen. For Tile and Stipple, the
drawable indicates the screen and also possibly the window class and depth. An
InputOnly window cannot be used as the drawable for Tile or Stipple (or a Match
error results).


* Fri 06 Jun 2014 05:15:28 PM JST
QueryExtension

name: STRING8

present: BOOL
major-opcode: CARD8
first-event: CARD8
first-error: CARD8
This request determines if the named extension is present. If so, the major
opcode for the extension is returned, if it has one. Otherwise, zero is
returned. Any minor opcode and the request formats are specific to the
extension. If the extension involves additional event types, the base event type
code is returned. Otherwise, zero is returned. The format of the events is
specific to the extension. If the extension involves additional error codes, the
base error code is returned. Otherwise, zero is returned. The format of
additional data in the errors is specific to the extension.

The extension name should use the ISO Latin-1 encoding, and uppercase and
lowercase matter.


* Fri 06 Jun 2014 05:15:47 PM JST
ListExtensions


names: LISTofSTRING8
This request returns a list of all extensions supported by the server.

SetModifierMapping

keycodes-per-modifier: CARD8
keycodes: LISTofKEYCODE

status: { Success, Busy, Failed}

Errors: Alloc, Value

This request specifies the keycodes (if any) of the keys to be used as
modifiers. The number of keycodes in the list must be 8*keycodes-per-modifier
(or a Length error results). The keycodes are divided into eight sets, with each
set containing keycodes-per-modifier elements. The sets are assigned to the
modifiers Shift, Lock, Control, Mod1, Mod2, Mod3, Mod4, and Mod5, in order. Only
nonzero keycode values are used within each set; zero values are ignored. All of
the nonzero keycodes must be in the range specified by min-keycode and
max-keycode in the connection setup (or a Value error results). The order of
keycodes within a set does not matter. If no nonzero values are specified in a
set, the use of the corresponding modifier is disabled, and the modifier bit
will always be zero. Otherwise, the modifier bit will be one whenever at least
one of the keys in the corresponding set is in the down position.

A server can impose restrictions on how modifiers can be changed (for example,
if certain keys do not generate up transitions in hardware, if auto-repeat
cannot be disabled on certain keys, or if multiple keys per modifier are not
supported). The status reply is Failed if some such restriction is violated, and
none of the modifiers is changed.

If the new nonzero keycodes specified for a modifier differ from those currently
defined and any (current or new) keys for that modifier are logically in the
down state, then the status reply is Busy, and none of the modifiers is changed.

This request generates a MappingNotify event on a Success status.


* Fri 06 Jun 2014 05:16:02 PM JST
GetModifierMapping


keycodes-per-modifier: CARD8
keycodes: LISTofKEYCODE
This request returns the keycodes of the keys being used as modifiers. The
number of keycodes in the list is 8*keycodes-per-modifier. The keycodes are
divided into eight sets, with each set containing keycodes-per-modifier
elements. The sets are assigned to the modifiers Shift, Lock, Control, Mod1,
Mod2, Mod3, Mod4, and Mod5, in order. The keycodes-per-modifier value is chosen
arbitrarily by the server; zeroes are used to fill in unused elements within
each set. If only zero values are given in a set, the use of the corresponding
modifier has been disabled. The order of keycodes within each set is chosen
arbitrarily by the server.


* Fri 06 Jun 2014 05:16:18 PM JST
        @Return:
        GetModifierMappingCookie

        @Error:
        BadAlloc, BadValue

* Fri 06 Jun 2014 05:17:06 PM JST

* Fri 06 Jun 2014 05:17:06 PM JST

* Fri 06 Jun 2014 05:17:06 PM JST
        """Request ChangeKeyboardMapping X protocol."""

* Fri 06 Jun 2014 05:17:23 PM JST
ChangeKeyboardMapping

first-keycode: KEYCODE
keysyms-per-keycode: CARD8
keysyms: LISTofKEYSYM

Errors: Alloc, Value

This request defines the symbols for the specified number of keycodes, starting
with the specified keycode. The symbols for keycodes outside this range remained
unchanged. The number of elements in the keysyms list must be a multiple of
keysyms-per-keycode (or a Length error results). The first-keycode must be
greater than or equal to min-keycode as returned in the connection setup (or a
Value error results) and:

	first-keycode + (keysyms-length / keysyms-per-keycode) - 1
must be less than or equal to max-keycode as returned in the connection setup
(or a Value error results). KEYSYM number N (counting from zero) for keycode K
has an index (counting from zero) of:

	(K - first-keycode) * keysyms-per-keycode + N
in keysyms. The keysyms-per-keycode can be chosen arbitrarily by the client to
be large enough to hold all desired symbols. A special KEYSYM value of NoSymbol
should be used to fill in unused elements for individual keycodes. It is legal
for NoSymbol to appear in nontrailing positions of the effective list for a
keycode.

This request generates a MappingNotify event.

There is no requirement that the server interpret this mapping; it is merely
stored for reading and writing by clients (see section 5).


* Fri 06 Jun 2014 05:17:37 PM JST
GetKeyboardMapping

first-keycode: KEYCODE
count: CARD8

keysyms-per-keycode: CARD8
keysyms: LISTofKEYSYM

Errors: Value

This request returns the symbols for the specified number of keycodes, starting
with the specified keycode. The first-keycode must be greater than or equal to
min-keycode as returned in the connection setup (or a Value error results), and:

	first-keycode + count - 1
must be less than or equal to max-keycode as returned in the connection setup
(or a Value error results). The number of elements in the keysyms list is:

	count * keysyms-per-keycode
and KEYSYM number N (counting from zero) for keycode K has an index (counting
from zero) of:

	(K - first-keycode) * keysyms-per-keycode + N
in keysyms. The keysyms-per-keycode value is chosen arbitrarily by the server to
be large enough to report all requested symbols. A special KEYSYM value of
NoSymbol is used to fill in unused elements for individual keycodes.


* Fri 06 Jun 2014 05:17:58 PM JST
ChangeKeyboardControl

value-mask: BITMASK
value-list: LISTofVALUE

Errors: Match, Value

This request controls various aspects of the keyboard. The value-mask and
value-list specify which controls are to be changed. The possible values are:

Control	Type
key-click-percent	INT8
bell-percent	INT8
bell-pitch	INT16
bell-duration	INT16
led	CARD8
led-mode	 { On, Off }
key	KEYCODE
auto-repeat-mode	 { On, Off, Default }
The key-click-percent sets the volume for key clicks between 0 (off) and 100
(loud) inclusive, if possible. Setting to -1 restores the default. Other
negative values generate a Value error.

The bell-percent sets the base volume for the bell between 0 (off) and 100
(loud) inclusive, if possible. Setting to -1 restores the default. Other
negative values generate a Value error.

The bell-pitch sets the pitch (specified in Hz) of the bell, if
possible. Setting to -1 restores the default. Other negative values generate a
Value error.

The bell-duration sets the duration of the bell (specified in milliseconds), if
possible. Setting to -1 restores the default. Other negative values generate a
Value error.

If both led-mode and led are specified, then the state of that LED is changed,
if possible. If only led-mode is specified, then the state of all LEDs are
changed, if possible. At most 32 LEDs, numbered from one, are supported. No
standard interpretation of LEDs is defined. It is a Match error if an led is
specified without an led-mode.

If both auto-repeat-mode and key are specified, then the auto-repeat mode of
that key is changed, if possible. If only auto-repeat-mode is specified, then
the global auto-repeat mode for the entire keyboard is changed, if possible,
without affecting the per-key settings. It is a Match error if a key is
specified without an auto-repeat-mode. Each key has an individual mode of
whether or not it should auto-repeat and a default setting for that mode. In
addition, there is a global mode of whether auto-repeat should be enabled or not
and a default setting for that mode. When the global mode is On, keys should
obey their individual auto-repeat modes. When the global mode is Off, no keys
should auto-repeat. An auto-repeating key generates alternating KeyPress and
KeyRelease events. When a key is used as a modifier, it is desirable for the key
not to auto-repeat, regardless of the auto-repeat setting for that key.

A bell generator connected with the console but not directly on the keyboard is
treated as if it were part of the keyboard.

The order in which controls are verified and altered is server-dependent. If an
error is generated, a subset of the controls may have been altered.


* Fri 06 Jun 2014 05:18:12 PM JST
GetKeyboardControl


key-click-percent: CARD8
bell-percent: CARD8
bell-pitch: CARD16
bell-duration: CARD16
led-mask: CARD32
global-auto-repeat: { On, Off}
auto-repeats: LISTofCARD8
This request returns the current control values for the keyboard. For the LEDs,
the least significant bit of led-mask corresponds to LED one, and each one bit
in led-mask indicates an LED that is lit. The auto-repeats is a bit vector; each
one bit indicates that auto-repeat is enabled for the corresponding key. The
vector is represented as 32 bytes. Byte N (from 0) contains the bits for keys 8N
to 8N + 7, with the least significant bit in the byte representing key 8N.


* Fri 06 Jun 2014 05:18:22 PM JST
        @Return:
        GetKeyboardControlCookie

        @Error:
        BadValue

* Fri 06 Jun 2014 05:18:32 PM JST

* Fri 06 Jun 2014 05:18:32 PM JST

* Fri 06 Jun 2014 05:18:32 PM JST
        @Error:

* Fri 06 Jun 2014 05:18:32 PM JST
        @Error:

* Fri 06 Jun 2014 05:18:32 PM JST
        @Error:
        BadValue

* Fri 06 Jun 2014 05:19:43 PM JST
        @Arguments:
        - `percent`: (int) -100 to 100

* Fri 06 Jun 2014 05:19:57 PM JST
Bell

percent: INT8

Errors: Value

This request rings the bell on the keyboard at a volume relative to the base
volume for the keyboard, if possible. Percent can range from -100 to 100
inclusive (or a Value error results). The volume at which the bell is rung when
percent is nonnegative is:

	base - [(base * percent) / 100] + percent
When percent is negative, it is:

	base + [(base * percent) / 100]
SetPointerMapping

map: LISTofCARD8

status: { Success, Busy}

Errors: Value

This request sets the mapping of the pointer. Elements of the list are indexed
starting from one. The length of the list must be the same as GetPointerMapping
would return (or a Value error results). The index is a core button number, and
the element of the list defines the effective number.

A zero element disables a button. Elements are not restricted in value by the
number of physical buttons, but no two elements can have the same nonzero value
(or a Value error results).

If any of the buttons to be altered are logically in the down state, the status
reply is Busy, and the mapping is not changed.

This request generates a MappingNotify event on a Success status.


* Fri 06 Jun 2014 05:20:37 PM JST
        @Return:
        GetPointerMappingCookie

        @Error:
        BadValue

* Fri 06 Jun 2014 05:20:53 PM JST
GetPointerMapping


map: LISTofCARD8
This request returns the current mapping of the pointer. Elements of the list
are indexed starting from one. The length of the list indicates the number of
physical buttons.

The nominal mapping for a pointer is the identity mapping: map[i]=i.


* Fri 06 Jun 2014 05:21:08 PM JST
ChangePointerControl

do-acceleration, do-threshold: BOOL
acceleration-numerator, acceleration-denominator: INT16
threshold: INT16

Errors: Value

This request defines how the pointer moves. The acceleration is a multiplier for
movement expressed as a fraction. For example, specifying 3/1 means the pointer
moves three times as fast as normal. The fraction can be rounded arbitrarily by
the server. Acceleration only takes effect if the pointer moves more than
threshold number of pixels at once and only applies to the amount beyond the
threshold. Setting a value to -1 restores the default. Other negative values
generate a Value error, as does a zero value for acceleration-denominator.


* Fri 06 Jun 2014 05:21:42 PM JST
GetPointerControl


acceleration-numerator, acceleration-denominator: CARD16
threshold: CARD16
This request returns the current acceleration and threshold for the pointer.


* Fri 06 Jun 2014 05:21:51 PM JST
        @Return:
        GetPointerControlCookie

        @Error:
        BadValue

* Fri 06 Jun 2014 05:22:14 PM JST
SetScreenSaver

timeout, interval: INT16
prefer-blanking: { Yes, No, Default}
allow-exposures: { Yes, No, Default}

Errors: Value

The timeout and interval are specified in seconds; setting a value to -1
restores the default. Other negative values generate a Value error. If the
timeout value is zero, screen-saver is disabled (but an activated screen-saver
is not deactivated). If the timeout value is nonzero, screen-saver is
enabled. Once screen-saver is enabled, if no input from the keyboard or pointer
is generated for timeout seconds, screen-saver is activated. For each screen, if
blanking is preferred and the hardware supports video blanking, the screen will
simply go blank. Otherwise, if either exposures are allowed or the screen can be
regenerated without sending exposure events to clients, the screen is changed in
a server-dependent fashion to avoid phosphor burn. Otherwise, the state of the
screens does not change, and screen-saver is not activated. At the next keyboard
or pointer input or at the next ForceScreenSaver with mode Reset, screen-saver
is deactivated, and all screen states are restored.

If the server-dependent screen-saver method is amenable to periodic change,
interval serves as a hint about how long the change period should be, with zero
hinting that no periodic change should be made. Examples of ways to change the
screen include scrambling the color map periodically, moving an icon image about
the screen periodically, or tiling the screen with the root window background
tile, randomly reorigined periodically.


* Fri 06 Jun 2014 05:22:31 PM JST
GetScreenSaver


timeout, interval: CARD16
prefer-blanking: { Yes, No}
allow-exposures: { Yes, No}
This request returns the current screen-saver control values.


* Fri 06 Jun 2014 05:22:43 PM JST
        @Return:
        GetScreenSaverCookie

        @Error:
        BadValue

* Fri 06 Jun 2014 05:23:02 PM JST
ForceScreenSaver

mode: { Activate, Reset}

Errors: Value

If the mode is Activate and screen-saver is currently deactivated, then
screen-saver is activated (even if screen-saver has been disabled with a timeout
value of zero). If the mode is Reset and screen-saver is currently enabled, then
screen-saver is deactivated (if it was activated), and the activation timer is
reset to its initial state as if device input had just been received.


* Fri 06 Jun 2014 05:23:50 PM JST
ChangeHosts

mode: { Insert, Delete}
host: HOST

Errors: Access, Value

This request adds or removes the specified host from the access control
list. When the access control mechanism is enabled and a client attempts to
establish a connection to the server, the host on which the client resides must
be in the access control list, or the client must have been granted permission
by a server-dependent method, or the server will refuse the connection.

The client must reside on the same host as the server and/or have been granted
permission by a server-dependent method to execute this request (or an Access
error results).

An initial access control list can usually be specified, typically by naming a
file that the server reads at startup and reset.

The following address families are defined. A server is not required to support
these families and may support families not listed here. Use of an unsupported
family, an improper address format, or an improper address length within a
supported family results in a Value error.

For the Internet family, the address must be four bytes long. The address bytes
are in standard IP order; the server performs no automatic swapping on the
address bytes. The Internet family supports IP version 4 addresses only.

For the InternetV6 family, the address must be sixteen bytes long. The address
bytes are in standard IP order; the server performs no automatic swapping on the
address bytes. The InternetV6 family supports IP version 6 addresses only.

For the DECnet family, the server performs no automatic swapping on the address
bytes. A Phase IV address is two bytes long: the first byte contains the least
significant eight bits of the node number, and the second byte contains the most
significant two bits of the node number in the least significant two bits of the
byte and the area in the most significant six bits of the byte.

For the Chaos family, the address must be two bytes long. The host number is
always the first byte in the address, and the subnet number is always the second
byte. The server performs no automatic swapping on the address bytes.

For the ServerInterpreted family, the address may be of any length up to 65535
bytes. The address consists of two strings of ASCII characters, separated by a
byte with a value of 0. The first string represents the type of address, and the
second string contains the address value. Address types and the syntax for their
associated values will be registered via the X.Org Registry. Implementors who
wish to add implementation specific types may register a unique prefix with the
X.Org registry to prevent namespace collisions.

Use of a host address in the ChangeHosts request is deprecated. It is only
useful when a host has a unique, constant address, a requirement that is
increasingly unmet as sites adopt dynamically assigned addresses, network
address translation gateways, IPv6 link local addresses, and various other
technologies. It also assumes all users of a host share equivalent access
rights, and as such has never been suitable for many multi-user machine
environments. Instead, more secure forms of authentication, such as those based
on shared secrets or public key encryption, are recommended.


* Fri 06 Jun 2014 05:24:08 PM JST
ListHosts


mode: { Enabled, Disabled}
hosts: LISTofHOST
This request returns the hosts on the access control list and whether use of the
list at connection setup is currently enabled or disabled.

Each HOST is padded to a multiple of four bytes.


* Fri 06 Jun 2014 05:24:18 PM JST
        @Return:
        ListHostsCookie

        @Error:
        BadAccess, BadValue

* Fri 06 Jun 2014 05:25:11 PM JST
SetAccessControl

mode: { Enable, Disable}

Errors: Access, Value

This request enables or disables the use of the access control list at
connection setups.

The client must reside on the same host as the server and/or have been granted
permission by a server-dependent method to execute this request (or an Access
error results).


* Fri 06 Jun 2014 05:25:31 PM JST
SetCloseDownMode

mode: { Destroy, RetainPermanent, RetainTemporary}

Errors: Value

This request defines what will happen to the client's resources at connection
close. A connection starts in Destroy mode. The meaning of the close-down mode
is described in section 10.


* Fri 06 Jun 2014 05:25:52 PM JST
KillClient

resource: CARD32 or AllTemporary

Errors: Value

If a valid resource is specified, KillClient forces a close-down of the client
that created the resource. If the client has already terminated in either
RetainPermanent or RetainTemporary mode, all of the client's resources are
destroyed (see section 10). If AllTemporary is specified, then the resources of
all clients that have terminated in RetainTemporary are destroyed.


* Fri 06 Jun 2014 05:26:16 PM JST
NoOperation

This request has no arguments and no results, but the request length field
allows the request to be any multiple of four bytes in length. The bytes
contained in the request are uninterpreted by the server.

This request can be used in its minimum four byte form as padding where
necessary by client libraries that find it convenient to force requests to begin
on 64-bit boundaries.

* Fri 06 Jun 2014 05:26:30 PM JST

* Fri 06 Jun 2014 05:26:32 PM JST
VoidCookie
* Fri 06 Jun 2014 05:26:35 PM JST
        @Return:
        VoidCookie

* Sat 07 Jun 2014 07:17:24 AM JST
import struct
import xcb, xcb.xproto
import xcb.render

NAME = 'TestName'
WMCLASS = 'testclass\x00TestClass\x00'

def simple_teswindow():
    r"""SUMMARY

    simple_teswindow()

    @Return:
    """
    con = xcb.connect()
    con.render = con(xcb.render.key)

    setup = con.get_setup()
    root = setup.roots[0].root
    depth = setup.roots[0].root_depth
    visual = setup.roots[0].root_visual
    white = setup.roots[0].white_pixel

    window = con.generate_id()

    con.core.CreateWindow(depth, window, root,
                          0, 0, 640, 480, 0,
                          xcb.xproto.WindowClass.InputOutput,
                          visual,
                          xcb.xproto.CW.BackPixel | xcb.xproto.CW.EventMask,
                          [white, xcb.xproto.EventMask.Exposure |
                           xcb.xproto.EventMask.KeyPress])
    xa_wm_name = con.core.InternAtom(
        False, len('WM_NAME'), 'WM_NAME').reply().atom
    xa_net_wm_name = con.core.InternAtom(
        False, len('_NET_WM_NAME'), '_NET_WM_NAME').reply().atom
    xa_wmclass = con.core.InternAtom(
        False, len('WM_CLASS'), 'WM_CLASS').reply().atom
    xa_utf8_string = con.core.InternAtom(
        False, len('UTF8_STRING'), 'UTF8_STRING').reply().atom

    xa_net_wm_window_type = con.core.InternAtom(
        False, len('_NET_WM_WINDOW_TYPE'), '_NET_WM_WINDOW_TYPE').reply().atom
    xa_normal = con.core.InternAtom(
        False, len('_NET_WM_WINDOW_TYPE_NORMAL'),
        '_NET_WM_WINDOW_TYPE_NORMAL').reply().atom
    xa_atom = con.core.InternAtom(False, len('ATOM'), 'ATOM').reply().atom
    xa_string = con.core.InternAtom(False, len('STRING'), 'STRING').reply().atom

    con.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
                            xa_net_wm_name, xa_utf8_string, 8, len(NAME), NAME)

    con.core.ChangeProperty(
        xcb.xproto.PropMode.Replace, window, xa_wmclass, xa_string,
        8, len(WMCLASS), WMCLASS)

    data = struct.pack('I', xa_normal)

    con.core.ChangeProperty(
        xcb.xproto.PropMode.Replace, window, xa_net_wm_window_type,
        xa_atom, 32, 1, data)
    con.core.MapWindow(window)
    con.flush()
    return window

* Sat 07 Jun 2014 07:22:58 AM JST
import struct
import xcb, xcb.xproto
import xcb.render

NAME = 'TestName'
WMCLASS = 'testclass\x00TestClass\x00'

def simple_teswindow():
    r"""SUMMARY

    simple_teswindow()

    @Return:
    """
    con = xcb.connect()
    con.render = con(xcb.render.key)

    setup = con.get_setup()
    root = setup.roots[0].root
    depth = setup.roots[0].root_depth
    visual = setup.roots[0].root_visual
    white = setup.roots[0].white_pixel

    window = con.generate_id()

    con.core.CreateWindow(depth, window, root,
                          0, 0, 640, 480, 0,
                          xcb.xproto.WindowClass.InputOutput,
                          visual,
                          xcb.xproto.CW.BackPixel | xcb.xproto.CW.EventMask,
                          [white, xcb.xproto.EventMask.Exposure |
                           xcb.xproto.EventMask.KeyPress])
    xa_wm_name = con.core.InternAtom(
        False, len('WM_NAME'), 'WM_NAME').reply().atom
    xa_net_wm_name = con.core.InternAtom(
        False, len('_NET_WM_NAME'), '_NET_WM_NAME').reply().atom
    xa_wmclass = con.core.InternAtom(
        False, len('WM_CLASS'), 'WM_CLASS').reply().atom
    xa_utf8_string = con.core.InternAtom(
        False, len('UTF8_STRING'), 'UTF8_STRING').reply().atom

    xa_net_wm_window_type = con.core.InternAtom(
        False, len('_NET_WM_WINDOW_TYPE'), '_NET_WM_WINDOW_TYPE').reply().atom
    xa_normal = con.core.InternAtom(
        False, len('_NET_WM_WINDOW_TYPE_NORMAL'),
        '_NET_WM_WINDOW_TYPE_NORMAL').reply().atom
    xa_atom = con.core.InternAtom(False, len('ATOM'), 'ATOM').reply().atom
    xa_string = con.core.InternAtom(False, len('STRING'), 'STRING').reply().atom

    con.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
                            xa_net_wm_name, xa_utf8_string, 8, len(NAME), NAME)

    con.core.ChangeProperty(
        xcb.xproto.PropMode.Replace, window, xa_wmclass, xa_string,
        8, len(WMCLASS), WMCLASS)

    data = struct.pack('I', xa_normal)

    con.core.ChangeProperty(
        xcb.xproto.PropMode.Replace, window, xa_net_wm_window_type,
        xa_atom, 32, 1, data)
    con.core.MapWindow(window)
    con.flush()
    return window

* Sat 07 Jun 2014 07:23:40 AM JST
                          
* Sat 07 Jun 2014 07:24:00 AM JST

* Sat 07 Jun 2014 07:24:00 AM JST

* Sat 07 Jun 2014 07:24:00 AM JST
import struct

* Sat 07 Jun 2014 07:24:30 AM JST
import xcb2
from struct import pack
from xcb2.tests import simple_teswindow
from xcb2.xobj.window.drawable import Drawable, Window
from xcb2.xobj.geometry import WindowGeometry

* Sat 07 Jun 2014 07:28:35 AM JST
test_get_attributes
* Sat 07 Jun 2014 07:28:47 AM JST
test_drawable
* Sat 07 Jun 2014 07:29:10 AM JST
46137344
* Sat 07 Jun 2014 07:31:04 AM JST
46137344
* Sat 07 Jun 2014 07:31:59 AM JST
all_event_masks
* Sat 07 Jun 2014 07:33:14 AM JST
GetWindowAttributesReply
* Sat 07 Jun 2014 07:33:22 AM JST
xc
* Sat 07 Jun 2014 07:33:22 AM JST
form xc
* Sat 07 Jun 2014 07:33:32 AM JST
GetWindowAttributesReply
* Sat 07 Jun 2014 07:33:34 AM JST
GetWindowAttributesReply
* Sat 07 Jun 2014 07:39:18 AM JST

* Sat 07 Jun 2014 07:39:18 AM JST

* Sat 07 Jun 2014 07:39:18 AM JST
        cls.window = simple_teswindow2()

* Sat 07 Jun 2014 07:39:21 AM JST

* Sat 07 Jun 2014 07:39:21 AM JST

* Sat 07 Jun 2014 07:39:21 AM JST
        cls.Window = Window(cls.conn, cls.window)

* Sat 07 Jun 2014 07:39:25 AM JST
cls
* Sat 07 Jun 2014 07:39:26 AM JST
cls
* Sat 07 Jun 2014 07:39:30 AM JST
cls
* Sat 07 Jun 2014 07:39:32 AM JST
cls
* Sat 07 Jun 2014 07:41:05 AM JST
conn.core.DestroyWindow(cls.window)
* Sat 07 Jun 2014 07:41:14 AM JST
cls
* Sat 07 Jun 2014 07:45:57 AM JST
attr = self.Window.get_attributes()
* Sat 07 Jun 2014 07:46:03 AM JST
        self.assertEqual(
            0, attr.all_event_masks,
            msg='Failed: Window.get_attributes expect: \{}, got: \{}'
            .format(0, attr.all_event_masks))

* Sat 07 Jun 2014 07:46:27 AM JST
EventMask.FocusChange
* Sat 07 Jun 2014 07:50:07 AM JST
attr = self.Window.get_attributes()
* Sat 07 Jun 2014 07:50:17 AM JST
        self.assertEqual(
            0, attr.all_event_masks,
            msg='Failed: Window.get_attributes expect: \{}, got: \{}'
            .format(0, attr.all_event_masks))

* Sat 07 Jun 2014 07:51:49 AM JST
attr2
* Sat 07 Jun 2014 07:56:13 AM JST
    con = xcb.connect()
    con.render = con(xcb.render.key)

    setup = con.get_setup()
    root = setup.roots[0].root
    depth = setup.roots[0].root_depth
    visual = setup.roots[0].root_visual
    white = setup.roots[0].white_pixel

    window = con.generate_id()

    con.core.CreateWindow(depth, window, root,
                          0, 0, 640, 480, 0,
                          xcb.xproto.WindowClass.InputOutput,
                          visual,
                          xcb.xproto.CW.BackPixel, [white])
    con.flush()

* Sat 07 Jun 2014 08:03:05 AM JST
        cls.rawcon = xcb.connect()
        cls.rawcon.render = cls.rawcon(xcb.render.key)
        setup = cls.rawcon.get_setup()
        root = setup.roots[0].root
        depth = setup.roots[0].root_depth
        visual = setup.roots[0].root_visual
        white = setup.roots[0].white_pixel

        cls.window = cls.rawcon.generate_id()

        cls.rawcon.core.CreateWindow(depth, cls.window, root,
                                     0, 0, 640, 480, 0,
                                     xcb.xproto.WindowClass.InputOutput,
                                     visual,
                                     xcb.xproto.CW.BackPixel, [white])
        cls.rawcon.flush()


* Sat 07 Jun 2014 08:03:38 AM JST
    con = xcb.connect()
    con.render = con(xcb.render.key)


* Sat 07 Jun 2014 08:06:13 AM JST
CON = xcb.connect()
CON.render = CON(xcb.render.key)

* Sat 07 Jun 2014 08:06:18 AM JST

* Sat 07 Jun 2014 08:06:18 AM JST

* Sat 07 Jun 2014 08:06:18 AM JST
import xcb.render

* Sat 07 Jun 2014 08:08:23 AM JST
import *
* Sat 07 Jun 2014 08:09:11 AM JST
CON = xcb.connect()
CON.render = CON(xcb.render.key)

* Sat 07 Jun 2014 08:25:08 AM JST

* Sat 07 Jun 2014 08:25:08 AM JST

* Sat 07 Jun 2014 08:25:08 AM JST
import xcb, xcb.xproto, xcb.render

* Sat 07 Jun 2014 08:42:09 AM JST
MapWindowChecked
* Sat 07 Jun 2014 08:42:55 AM JST
MapWindowChecked
* Sat 07 Jun 2014 08:44:43 AM JST
self.conn.core.MapWindowChecked(self.window)
* Sat 07 Jun 2014 08:44:54 AM JST
cookie = 
* Sat 07 Jun 2014 08:44:57 AM JST
.check()
* Sat 07 Jun 2014 08:45:01 AM JST

* Sat 07 Jun 2014 08:45:01 AM JST

* Sat 07 Jun 2014 08:45:01 AM JST
        cookie # expect no raise

* Sat 07 Jun 2014 09:00:59 AM JST
ChangeSaveSet
* Sat 07 Jun 2014 09:05:09 AM JST
DG Cursor 
* Sat 07 Jun 2014 09:13:19 AM JST
Cursor
* Sat 07 Jun 2014 09:29:24 AM JST
c.core.QueryPointer()
* Sat 07 Jun 2014 09:45:18 AM JST
core.
* Sat 07 Jun 2014 09:45:26 AM JST
44040214
* Sat 07 Jun 2014 09:47:10 AM JST
check()
* Sat 07 Jun 2014 10:35:57 AM JST
77594624
* Sat 07 Jun 2014 10:38:09 AM JST

* Sat 07 Jun 2014 10:38:09 AM JST

* Sat 07 Jun 2014 10:38:09 AM JST
        self.assertNotIn(self.window, self.conn.root.client_list())

* Sat 07 Jun 2014 10:38:21 AM JST
    def test_map(self, ):
        self.Window.map()


* Sat 07 Jun 2014 10:38:27 AM JST
        
* Sat 07 Jun 2014 10:40:43 AM JST
self.skipTest('')
* Sat 07 Jun 2014 10:47:35 AM JST
set_wm_protocols
* Sat 07 Jun 2014 10:47:50 AM JST
    def test_set_wm_protocols(self, ):
        self.skipTest('')

* Sat 07 Jun 2014 10:47:52 AM JST
    def test_set_wm_protocols(self, ):
        self.skipTest('')


* Sat 07 Jun 2014 10:48:04 AM JST
get_wm_protocols
* Sat 07 Jun 2014 10:48:11 AM JST
set_wm_colormap_windows
* Sat 07 Jun 2014 10:48:16 AM JST
get_wm_colormap_windows
* Sat 07 Jun 2014 10:48:22 AM JST
set_wm_client_machine
* Sat 07 Jun 2014 10:48:27 AM JST
get_wm_client_machine
* Sat 07 Jun 2014 10:48:32 AM JST
set_wm_normal_hints
* Sat 07 Jun 2014 10:48:36 AM JST
get_wm_normal_hints
* Sat 07 Jun 2014 10:48:39 AM JST
set_wm_hints
* Sat 07 Jun 2014 10:48:43 AM JST
get_wm_hints
* Sat 07 Jun 2014 10:48:46 AM JST
set_wm_state
* Sat 07 Jun 2014 10:48:49 AM JST
get_wm_state
* Sat 07 Jun 2014 10:48:53 AM JST
set_wm_icon_size
* Sat 07 Jun 2014 10:48:56 AM JST
get_wm_icon_size
* Sat 07 Jun 2014 10:49:00 AM JST
set_net_wm_name
* Sat 07 Jun 2014 10:49:05 AM JST
get_net_wm_name
* Sat 07 Jun 2014 10:49:08 AM JST
set_net_wm_state
* Sat 07 Jun 2014 10:49:14 AM JST
get_net_wm_state
* Sat 07 Jun 2014 10:49:19 AM JST
set_net_wm_pid
* Sat 07 Jun 2014 10:49:24 AM JST
get_net_wm_pid
* Sat 07 Jun 2014 10:49:33 AM JST
set_net_wm_allowed_actions
* Sat 07 Jun 2014 10:49:49 AM JST
get_net_wm_allowed_actions
* Sat 07 Jun 2014 10:49:56 AM JST
set_net_supported
* Sat 07 Jun 2014 10:49:58 AM JST
get_net_supported
* Sat 07 Jun 2014 10:49:59 AM JST
set_net_wm_icon
* Sat 07 Jun 2014 10:50:00 AM JST
get_net_wm_icon
* Sat 07 Jun 2014 10:50:02 AM JST
set_net_wm_icon_geometry
* Sat 07 Jun 2014 10:50:04 AM JST
get_net_wm_icon_geometry
* Sat 07 Jun 2014 10:50:06 AM JST
set_net_wm_user_time
* Sat 07 Jun 2014 10:50:07 AM JST
get_net_wm_user_time
* Sat 07 Jun 2014 10:50:08 AM JST
set_net_wm_user_time_window
* Sat 07 Jun 2014 10:50:10 AM JST
get_net_wm_user_time_window
* Sat 07 Jun 2014 10:50:11 AM JST
set_net_wm_window_type
* Sat 07 Jun 2014 10:50:12 AM JST
get_net_wm_window_type
* Sat 07 Jun 2014 10:50:13 AM JST
set_net_workarea
* Sat 07 Jun 2014 10:50:14 AM JST
get_net_workarea
* Sat 07 Jun 2014 01:04:35 PM JST
, CoreSubMethodAbstract
* Sat 07 Jun 2014 01:09:13 PM JST
'WM_NAME'
* Sat 07 Jun 2014 01:09:40 PM JST
get_types()
* Sat 07 Jun 2014 01:09:45 PM JST
name
* Sat 07 Jun 2014 01:09:59 PM JST
get_typesatom()
* Sat 07 Jun 2014 01:10:15 PM JST
self.
* Sat 07 Jun 2014 01:11:38 PM JST
self.atom.format
* Sat 07 Jun 2014 01:13:01 PM JST

* Sat 07 Jun 2014 01:13:01 PM JST

* Sat 07 Jun 2014 01:13:01 PM JST
        buf.write()

* Sat 07 Jun 2014 01:13:04 PM JST
buf.write(str(buffer(_array('B', data))))
* Sat 07 Jun 2014 01:14:35 PM JST
window, 
* Sat 07 Jun 2014 01:18:13 PM JST
mode, 
* Sat 07 Jun 2014 01:18:58 PM JST
delete
* Sat 07 Jun 2014 01:19:35 PM JST
        buf = _StringIO()
        buf.write(_pack('=B2x', mode))
        buf.write(_pack('I', window))
        buf.write(self._atom)
        buf.write(self._types)
        buf.write(self._format)
        buf.write(_pack('3x'))
        buf.write(_pack('I', len(data)))
        buf.write(str(buffer(_array('B', data))))
        return buf.getvaue()

* Sat 07 Jun 2014 01:20:23 PM JST
        buf = _StringIO()
        buf.write(self._newvalue)
        buf.write(_pack('I', window))
        buf.write(self._atom)
        buf.write(self._types)
        buf.write(self._format)
        buf.write(_pack('3x'))
        buf.write(_pack('I', len(data)))
        buf.write(str(buffer(_array('B', data))))
        return buf.getvaue()

* Sat 07 Jun 2014 01:20:28 PM JST
_newvalue
* Sat 07 Jun 2014 01:21:20 PM JST
class ChangeWM_NAME(ChangePropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_NAME'

* Sat 07 Jun 2014 01:21:32 PM JST
$1
* Sat 07 Jun 2014 01:21:41 PM JST
WM_LOCALE_NAME
* Sat 07 Jun 2014 01:21:51 PM JST
WM_ICON_NAME
* Sat 07 Jun 2014 01:21:55 PM JST
WM_CLASS
* Sat 07 Jun 2014 01:22:01 PM JST
WM_TRANSIENT_FOR
* Sat 07 Jun 2014 01:22:08 PM JST
WM_PROTOCOLS
* Sat 07 Jun 2014 01:22:11 PM JST
WM_COLORMAP_WINDOWS
* Sat 07 Jun 2014 01:22:15 PM JST
WM_CLIENT_MACHINE
* Sat 07 Jun 2014 01:22:20 PM JST
WM_STATE
* Sat 07 Jun 2014 01:22:24 PM JST
_WIN_WORKSPACE
* Sat 07 Jun 2014 01:22:28 PM JST
_WIN_STATE
* Sat 07 Jun 2014 01:22:32 PM JST
_NET_SUPPORTED
* Sat 07 Jun 2014 01:22:36 PM JST
_NET_CLIENT_LIST
* Sat 07 Jun 2014 01:22:44 PM JST
_NET_CLIENT_LIST_STACKING
* Sat 07 Jun 2014 01:22:48 PM JST
_NET_CLIENT_LIST_STACKING
* Sat 07 Jun 2014 01:22:52 PM JST
_NET_NUMBER_OF_DESKTOPS
* Sat 07 Jun 2014 01:22:56 PM JST
_NET_DESKTOP_GEOMETRY
* Sat 07 Jun 2014 01:23:01 PM JST
_NET_DESKTOP_VIEWPORT
* Sat 07 Jun 2014 01:23:05 PM JST
_NET_CURRENT_DESKTOP
* Sat 07 Jun 2014 01:23:11 PM JST
_NET_DESKTOP_NAMES
* Sat 07 Jun 2014 01:23:15 PM JST
_NET_ACTIVE_WINDOW
* Sat 07 Jun 2014 01:23:19 PM JST
_NET_WORKAREA
* Sat 07 Jun 2014 01:23:23 PM JST
_NET_SUPPORTING_WM_CHECK
* Sat 07 Jun 2014 01:23:27 PM JST
_NET_VIRTUAL_ROOTS
* Sat 07 Jun 2014 01:23:32 PM JST
_NET_DESKTOP_LAYOUT
* Sat 07 Jun 2014 01:23:36 PM JST
_NET_SHOWING_DESKTOP
* Sat 07 Jun 2014 01:23:40 PM JST
_NET_CLOSE_WINDOW
* Sat 07 Jun 2014 01:23:46 PM JST
_NET_MOVERESIZE_WINDOW
* Sat 07 Jun 2014 01:23:49 PM JST
_NET_WM_MORERESIZE
* Sat 07 Jun 2014 01:23:54 PM JST
_NET_RESTACK_WINDOW
* Sat 07 Jun 2014 01:23:58 PM JST
_NET_REQUEST_FRAME_EXTENTS
* Sat 07 Jun 2014 01:24:02 PM JST
_NET_WM_VISIBLE_NAME
* Sat 07 Jun 2014 01:24:07 PM JST
_NET_WM_ICON_NAME
* Sat 07 Jun 2014 01:24:10 PM JST
_NET_WM_VISIBLE_ICON_NAME
* Sat 07 Jun 2014 01:24:15 PM JST
_NET_WM_DESKTOP
* Sat 07 Jun 2014 01:24:19 PM JST
_NET_WM_WINDOW_TYPE
* Sat 07 Jun 2014 01:24:22 PM JST
_NET_WM_STATE
* Sat 07 Jun 2014 01:24:27 PM JST
_NET_WM_ALLOWED_ACTIONS
* Sat 07 Jun 2014 01:24:37 PM JST
_NET_WM_STRUT
* Sat 07 Jun 2014 01:24:42 PM JST
_NET_WM_STRUT_PARTIAL
* Sat 07 Jun 2014 01:24:46 PM JST
_NET_WM_ICON_GEOMETRY
* Sat 07 Jun 2014 01:24:52 PM JST
_NET_WM_PID
* Sat 07 Jun 2014 01:24:57 PM JST
_NET_WM_HANDLED_ICONS
* Sat 07 Jun 2014 01:25:04 PM JST
_NET_WM_USER_TIME
* Sat 07 Jun 2014 01:25:09 PM JST
_NET_WM_USER_TIME_WINDOW
* Sat 07 Jun 2014 01:25:14 PM JST
_NET_FRAME_EXTENTS
* Sat 07 Jun 2014 01:25:19 PM JST
_OB_APP_TYPE
* Sat 07 Jun 2014 01:25:59 PM JST
        self.getproperty                = GetPropertyMethod(self)
        self.WM_NAME                    = GetWM_NAME(self)
        self.WM_LOCALE_NAME             = GetWM_LOCALE_NAME(self)
        self.WM_ICON_NAME               = GetWM_ICON_NAME(self)
        self.WM_CLASS                   = GetWM_CLASS(self)
        self.WM_TRANSIENT_FOR           = GetWM_TRANSIENT_FOR(self)
        self.WM_PROTOCOLS               = GetWM_PROTOCOLS(self)
        self.WM_COLORMAP_WINDOWS        = GetWM_COLORMAP_WINDOWS(self)
        self.WM_CLIENT_MACHINE          = GetWM_CLIENT_MACHINE(self)
        self.WM_STATE                   = GetWM_STATE(self)
        self._WIN_WORKSPACE             = Get_WIN_WORKSPACE(self)
        self._WIN_STATE                 = Get_WIN_STATE(self)
        self._NET_SUPPORTED             = Get_NET_SUPPORTED(self)
        self._NET_CLIENT_LIST           = Get_NET_CLIENT_LIST(self)
        self._NET_CLIENT_LIST_STACKING  = Get_NET_CLIENT_LIST_STACKING(self)
        self._NET_NUMBER_OF_DESKTOPS    = Get_NET_NUMBER_OF_DESKTOPS(self)
        self._NET_DESKTOP_GEOMETRY      = Get_NET_DESKTOP_GEOMETRY(self)
        self._NET_DESKTOP_VIEWPORT      = Get_NET_DESKTOP_VIEWPORT(self)
        self._NET_CURRENT_DESKTOP       = Get_NET_CURRENT_DESKTOP(self)
        self._NET_DESKTOP_NAMES         = Get_NET_DESKTOP_NAMES(self)
        self._NET_ACTIVE_WINDOW         = Get_NET_ACTIVE_WINDOW(self)
        self._NET_WORKAREA              = Get_NET_WORKAREA(self)
        self._NET_SUPPORTING_WM_CHECK   = Get_NET_SUPPORTING_WM_CHECK(self)
        self._NET_VIRTUAL_ROOTS         = Get_NET_VIRTUAL_ROOTS(self)
        self._NET_DESKTOP_LAYOUT        = Get_NET_DESKTOP_LAYOUT(self)
        self._NET_SHOWING_DESKTOP       = Get_NET_SHOWING_DESKTOP(self)
        self._NET_CLOSE_WINDOW          = Get_NET_CLOSE_WINDOW(self)
        self._NET_MOVERESIZE_WINDOW     = Get_NET_MOVERESIZE_WINDOW(self)
        self._NET_WM_MORERESIZE         = Get_NET_WM_MORERESIZE(self)
        self._NET_RESTACK_WINDOW        = Get_NET_RESTACK_WINDOW(self)
        self._NET_REQUEST_FRAME_EXTENTS = Get_NET_REQUEST_FRAME_EXTENTS(self)
        self._NET_WM_NAME               = Get_NET_WM_NAME(self)
        self._NET_WM_STATE              = Get_NET_WM_STATE(self)
        self._NET_WM_VISIBLE_NAME       = Get_NET_WM_VISIBLE_NAME(self)
        self._NET_WM_ICON_NAME          = Get_NET_WM_ICON_NAME(self)
        self._NET_WM_VISIBLE_ICON_NAME  = Get_NET_WM_VISIBLE_ICON_NAME(self)
        self._NET_WM_DESKTOP            = Get_NET_WM_DESKTOP(self)
        self._NET_WM_WINDOW_TYPE        = Get_NET_WM_WINDOW_TYPE(self)
        self._NET_WM_ALLOWED_ACTIONS    = Get_NET_WM_ALLOWED_ACTIONS(self)
        self._NET_WM_STRUT              = Get_NET_WM_STRUT(self)
        self._NET_WM_STRUT_PARTIAL      = Get_NET_WM_STRUT_PARTIAL(self)
        self._NET_WM_ICON_GEOMETRY      = Get_NET_WM_ICON_GEOMETRY(self)
        self._NET_WM_ICON               = Get_NET_WM_ICON(self)
        self._NET_WM_PID                = Get_NET_WM_PID(self)
        self._NET_WM_HANDLED_ICONS      = Get_NET_WM_HANDLED_ICONS(self)
        self._NET_WM_USER_TIME          = Get_NET_WM_USER_TIME(self)
        self._NET_WM_USER_TIME_WINDOW   = Get_NET_WM_USER_TIME_WINDOW(self)
        self._NET_FRAME_EXTENTS         = Get_NET_FRAME_EXTENTS(self)
        self._OB_APP_TYPE               = Get_OB_APP_TYPE(self)

* Sat 07 Jun 2014 01:26:58 PM JST

* Sat 07 Jun 2014 01:26:58 PM JST

* Sat 07 Jun 2014 01:26:58 PM JST
        self.getproperty                = ChangePropertyMethod(self)

* Sat 07 Jun 2014 01:28:51 PM JST
_NET_WM_NAME
* Sat 07 Jun 2014 01:29:20 PM JST
_NET_WM_ICON
* Sat 07 Jun 2014 01:30:22 PM JST
simple_teswindow
* Sat 07 Jun 2014 01:30:28 PM JST
58720256
* Sat 07 Jun 2014 01:31:53 PM JST
import xcb2
c=xcb2.connect()

* Sat 07 Jun 2014 01:31:59 PM JST
from xcb2.tests import simple_teswindow
* Sat 07 Jun 2014 01:32:04 PM JST
simple_teswindow()
* Sat 07 Jun 2014 01:32:21 PM JST
c.core.ChangeProperty.WM_NAME(58720256, 'HEL')
* Sat 07 Jun 2014 01:32:28 PM JST
import xcb2
c=xcb2.connect()
from xcb2.tests import simple_teswindow
w=c.core.get_window(simple_teswindow())
c.core.ChangeProperty.WM_NAME(58720256, 'HEL')
* Sat 07 Jun 2014 01:32:46 PM JST
get
* Sat 07 Jun 2014 01:32:46 PM JST
core.get
* Sat 07 Jun 2014 01:32:52 PM JST
core.
* Sat 07 Jun 2014 01:32:53 PM JST
w=c.get_window(simple_teswindow())
c.core.ChangeProperty.WM_NAME(58720256, 'HEL')
* Sat 07 Jun 2014 01:33:59 PM JST
w=c.get_window(simple_teswindow())
* Sat 07 Jun 2014 01:34:15 PM JST
self._parent.request(self._getbinary(mode, window, data))
* Sat 07 Jun 2014 01:34:23 PM JST
buf.getvalue()
* Sat 07 Jun 2014 01:34:27 PM JST

* Sat 07 Jun 2014 01:34:27 PM JST

* Sat 07 Jun 2014 01:34:27 PM JST
        return buf.getvalue()

* Sat 07 Jun 2014 01:34:36 PM JST
return self._parent.request(buf.getvalue())
* Sat 07 Jun 2014 01:34:59 PM JST
import xcb2
c=xcb2.connect()
from xcb2.tests import simple_teswindow
w=c.get_window(simple_teswindow())
c.core.ChangeProperty.WM_NAME(58720256, 'HEL')
* Sat 07 Jun 2014 01:35:02 PM JST
import xcb2
c=xcb2.connect()
from xcb2.tests import simple_teswindow
w=c.get_window(simple_teswindow())
* Sat 07 Jun 2014 01:35:17 PM JST
58720256
* Sat 07 Jun 2014 01:37:34 PM JST
buf.getvalue()
* Sat 07 Jun 2014 01:37:43 PM JST
print(repr(buf.getvalue()))
* Sat 07 Jun 2014 01:37:54 PM JST
delete
* Sat 07 Jun 2014 01:40:05 PM JST
buf.getvalue()
* Sat 07 Jun 2014 01:41:05 PM JST
c.core.atomidentify('WM_NAME')
* Sat 07 Jun 2014 01:41:28 PM JST
c.core.atomidentify('WM_NAME'),
* Sat 07 Jun 2014 01:41:48 PM JST
"\x00\x00\x00\x00\x00\x00\x80\x03'\x00\x00\x00\x1f\x00\x00\x00\x08\x00\x00\x00\x04\x00\x00\x00HELL"
* Sat 07 Jun 2014 01:42:09 PM JST
import xcb2
c=xcb2.connect()
from xcb2.tests import simple_teswindow
w=c.get_window(simple_teswindow())
c.core.ChangeProperty.WM_NAME(58720256, 'HEL')

* Sat 07 Jun 2014 01:43:40 PM JST
c.core.ChangeProperty.WM_NAME(58720256, 'HEL')
* Sat 07 Jun 2014 01:43:50 PM JST
"\x00\x00\x00\x00\x00\x80\x03'\x00\x00\x00\x1f\x00\x00\x00\x08\x00\x00\x00\x03\x00\x00\x00HEL"
* Sat 07 Jun 2014 01:44:41 PM JST
newvalue
* Sat 07 Jun 2014 01:44:56 PM JST
"\x01\x00\x00\x00\x00\x80\x03'\x00\x00\x00\x1f\x00\x00\x00\x08\x00\x00\x00\x03\x00\x00\x00HEL"
* Sat 07 Jun 2014 01:45:29 PM JST
58720256
* Sat 07 Jun 2014 01:47:17 PM JST
import xcb2
c=xcb2.connect()
from xcb2.tests import simple_teswindow
w=c.get_window(simple_teswindow())
c.core.ChangeProperty.WM_NAME(58720256, 'HEL')

* Sat 07 Jun 2014 01:47:34 PM JST
c.core.ChangeProperty.WM_NAME(58720256, 'HEL')
* Sat 07 Jun 2014 01:47:48 PM JST
"\x01\x00\x00\x00\x00\x00\x80\x03'\x00\x00\x00\x1f\x00\x00\x00\x08\x00\x00\x00\x03\x00\x00\x00HEL"
* Sat 07 Jun 2014 01:49:24 PM JST

* Sat 07 Jun 2014 01:49:24 PM JST

* Sat 07 Jun 2014 01:49:24 PM JST
        print(repr(buf.getvalue()))

* Sat 07 Jun 2014 01:49:27 PM JST

* Sat 07 Jun 2014 01:49:27 PM JST

* Sat 07 Jun 2014 01:49:27 PM JST
        print(repr(buf.getvalue()))

* Sat 07 Jun 2014 01:52:41 PM JST
        buf = _StringIO()
        buf.write(self._newvalue)
        buf.write(_pack('I', window))
        buf.write(self._atom)
        buf.write(self._types)
        buf.write(self._format)
        buf.write(_pack('3x'))
        buf.write(_pack('I', len(data)))
        buf.write(str(buffer(_array('B', data))))

* Sat 07 Jun 2014 01:59:07 PM JST
        buf = _StringIO()
        buf.write(self._delete)
        buf.write(_pack('I', window))
        buf.write(self._atom)
        buf.write(self._types)
        buf.write(self._format)
        buf.write(_pack('3x'))
        buf.write(_pack('I', len(data)))
        buf.write(str(buffer(_array('B', data))))

* Sat 07 Jun 2014 02:01:24 PM JST
self.
* Sat 07 Jun 2014 02:01:26 PM JST
return self.
* Sat 07 Jun 2014 02:03:38 PM JST
        self.types = self.atom.name.get_typesatom()
        self.format = self.atom.format

* Sat 07 Jun 2014 02:03:51 PM JST
self.
* Sat 07 Jun 2014 02:03:52 PM JST
self.
* Sat 07 Jun 2014 02:03:57 PM JST
self.
* Sat 07 Jun 2014 02:03:59 PM JST
self.
* Sat 07 Jun 2014 02:04:12 PM JST
        buf = _StringIO()
        buf.write(self._delete)
        buf.write(_pack('I', window))
        buf.write(self._atom)
        buf.write(self._types)
        buf.write(self._format)
        buf.write(_pack('3x'))
        buf.write(_pack('I', len(data)))
        buf.write(str(buffer(_array('B', data))))
        return buf.getvalue()

* Sat 07 Jun 2014 02:04:37 PM JST
_pack('=B3x', self.property_newvalue)
* Sat 07 Jun 2014 02:04:55 PM JST
property_newvalue
* Sat 07 Jun 2014 02:04:56 PM JST
self.property_newvalue
* Sat 07 Jun 2014 02:05:29 PM JST
_
* Sat 07 Jun 2014 02:05:31 PM JST
self.
* Sat 07 Jun 2014 02:05:37 PM JST
_
* Sat 07 Jun 2014 02:05:37 PM JST
self._
* Sat 07 Jun 2014 02:05:43 PM JST
_
* Sat 07 Jun 2014 02:05:43 PM JST
self._
* Sat 07 Jun 2014 02:06:36 PM JST
NewValue
* Sat 07 Jun 2014 02:06:36 PM JST
Property.NewValue
* Sat 07 Jun 2014 02:06:37 PM JST
                                   
* Sat 07 Jun 2014 02:07:10 PM JST
send_request
* Sat 07 Jun 2014 02:07:13 PM JST
requ
* Sat 07 Jun 2014 02:07:13 PM JST
core.requ
* Sat 07 Jun 2014 02:07:13 PM JST
_connection.core.requ
* Sat 07 Jun 2014 02:07:41 PM JST
            
* Sat 07 Jun 2014 02:08:15 PM JST
import xcb2
c=xcb2.connect()
from xcb2.tests import simple_teswindow
w=c.get_window(simple_teswindow())

* Sat 07 Jun 2014 02:09:31 PM JST
type_,
* Sat 07 Jun 2014 02:09:34 PM JST
format_,
* Sat 07 Jun 2014 02:09:36 PM JST
data_len, 
* Sat 07 Jun 2014 02:09:54 PM JST
data_len, 
* Sat 07 Jun 2014 02:09:55 PM JST
format_, data_len, 
* Sat 07 Jun 2014 02:09:56 PM JST
type_, format_, data_len, 
* Sat 07 Jun 2014 02:10:00 PM JST
mode, 
* Sat 07 Jun 2014 02:10:50 PM JST
mode, 
* Sat 07 Jun 2014 02:11:11 PM JST
            
* Sat 07 Jun 2014 02:11:30 PM JST
pass
* Sat 07 Jun 2014 02:12:07 PM JST
HELL')
* Sat 07 Jun 2014 02:12:07 PM JST
WM_NAME', 'HELL')
* Sat 07 Jun 2014 02:12:08 PM JST
w, 'WM_NAME', 'HELL')
* Sat 07 Jun 2014 02:12:09 PM JST
changeproperty(w, 'WM_NAME', 'HELL')
* Sat 07 Jun 2014 02:12:34 PM JST
SUMMARY
* Sat 07 Jun 2014 02:12:57 PM JST
pass
* Sat 07 Jun 2014 02:13:33 PM JST
pass
* Sat 07 Jun 2014 02:14:05 PM JST
cls
* Sat 07 Jun 2014 02:14:05 PM JST
inst, cls
* Sat 07 Jun 2014 02:28:21 PM JST

* Sat 07 Jun 2014 02:28:21 PM JST

* Sat 07 Jun 2014 02:28:21 PM JST
        print(repr(buf.getvalue()))

* Sat 07 Jun 2014 02:28:53 PM JST
pass
* Sat 07 Jun 2014 02:29:34 PM JST
window
* Sat 07 Jun 2014 02:30:20 PM JST
pass
* Sat 07 Jun 2014 02:30:36 PM JST
protocols
* Sat 07 Jun 2014 02:31:13 PM JST
data, mode=Property.NewValue
* Sat 07 Jun 2014 02:33:34 PM JST
pass
* Sat 07 Jun 2014 02:34:14 PM JST
core.
* Sat 07 Jun 2014 02:34:15 PM JST
self.core.
* Sat 07 Jun 2014 02:34:16 PM JST
return self.core.
* Sat 07 Jun 2014 02:34:20 PM JST
return self.core.ChangeProperty.WM_COLORMAP_WINDOWS(self.id, data, mode)
* Sat 07 Jun 2014 02:34:25 PM JST
WM_COLORMAP_WINDOWS
* Sat 07 Jun 2014 02:34:31 PM JST
return self.core.ChangeProperty.$1(self.id, data, mode)
* Sat 07 Jun 2014 02:34:41 PM JST
WM_CLIENT_MACHINE
* Sat 07 Jun 2014 02:35:44 PM JST
_NET_WM_NAME
* Sat 07 Jun 2014 02:36:01 PM JST
_NET_WM_STATE
* Sat 07 Jun 2014 02:36:12 PM JST
_NET_WM_PID
* Sat 07 Jun 2014 02:36:36 PM JST
_NET_WM_ALLOWED_ACTIONS
* Sat 07 Jun 2014 02:37:02 PM JST
_NET_SUPPORTED
* Sat 07 Jun 2014 02:37:08 PM JST
pass
* Sat 07 Jun 2014 02:37:19 PM JST
_NET_WM_ICON_NAME
* Sat 07 Jun 2014 02:37:30 PM JST

* Sat 07 Jun 2014 02:37:30 PM JST

* Sat 07 Jun 2014 02:37:30 PM JST
        - [yas] elisp error!:

* Sat 07 Jun 2014 02:37:31 PM JST

* Sat 07 Jun 2014 02:37:31 PM JST

* Sat 07 Jun 2014 02:37:31 PM JST
        - [yas] elisp error!:

* Sat 07 Jun 2014 02:37:33 PM JST

* Sat 07 Jun 2014 02:37:33 PM JST

* Sat 07 Jun 2014 02:37:33 PM JST
        - [yas] elisp error!:

* Sat 07 Jun 2014 02:37:46 PM JST
_NET_WM_USER_TIME
* Sat 07 Jun 2014 02:37:53 PM JST
pas
* Sat 07 Jun 2014 02:38:10 PM JST
_NET_WM_USER_TIME_WINDOW
* Sat 07 Jun 2014 02:38:29 PM JST
_NET_WM_WINDOW_TYPE
* Sat 07 Jun 2014 02:38:46 PM JST
_NET_WORKAREA
* Sat 07 Jun 2014 02:45:03 PM JST
import xcb2
c=xcb2.connect()
from xcb2.tests import simple_teswindow
w=c.get_window(simple_teswindow())

* Sat 07 Jun 2014 02:45:43 PM JST
'testclass\x00TestClass\x00'
* Sat 07 Jun 2014 02:45:52 PM JST
x00TestClass
* Sat 07 Jun 2014 02:48:05 PM JST
name
* Sat 07 Jun 2014 02:48:10 PM JST
name
* Sat 07 Jun 2014 02:48:22 PM JST
name
* Sat 07 Jun 2014 02:48:25 PM JST
name
* Sat 07 Jun 2014 02:48:47 PM JST
w.set_wm_name('hello')
* Sat 07 Jun 2014 02:49:02 PM JST
import xcb2
c=xcb2.connect()
from xcb2.tests import simple_teswindow
w=c.get_window(simple_teswindow())

* Sat 07 Jun 2014 02:51:07 PM JST
'testclass\x00TestClass\x00'
* Sat 07 Jun 2014 02:51:10 PM JST
testclass
* Sat 07 Jun 2014 02:58:01 PM JST
get_wm_protocols
* Sat 07 Jun 2014 02:58:10 PM JST
get_wm_colormap_windows
* Sat 07 Jun 2014 02:58:16 PM JST
get_wm_client_machine
* Sat 07 Jun 2014 03:58:19 PM JST
iccm
* Sat 07 Jun 2014 03:58:35 PM JST
import
* Sat 07 Jun 2014 03:59:45 PM JST
structcode
* Sat 07 Jun 2014 05:11:35 PM JST
'_NET_WM_ACTION_ABOVE'
* Sat 07 Jun 2014 05:12:21 PM JST
set_wm_state
* Sat 07 Jun 2014 05:18:51 PM JST
set_wm_state
* Sat 07 Jun 2014 05:30:29 PM JST
WMState
* Sat 07 Jun 2014 05:30:45 PM JST
fields
* Sat 07 Jun 2014 05:31:00 PM JST
var_fields
* Sat 07 Jun 2014 05:31:11 PM JST
static_codes
* Sat 07 Jun 2014 05:34:28 PM JST
1})
* Sat 07 Jun 2014 05:34:29 PM JST
window':
* Sat 07 Jun 2014 05:34:29 PM JST
to_binary, (), {'window':
* Sat 07 Jun 2014 05:34:34 PM JST
apply(
* Sat 07 Jun 2014 05:47:36 PM JST
'_NET_WM_ACTION_ABOVE'
* Sat 07 Jun 2014 05:48:31 PM JST
[1, above, 0, 0, 0]
* Sat 07 Jun 2014 05:48:45 PM JST
'\x01\x00\x00\x00l\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sat 07 Jun 2014 05:50:24 PM JST
ET_SUPPORTED(ChangePropertyMethodAbstract):
* Sat 07 Jun 2014 05:54:05 PM JST
above=c.core.atomidentify('_NET_WM_ACTION_ABOVE')
* Sat 07 Jun 2014 05:54:11 PM JST
struct.pack('5I', [1, above, 0, 0, 0])
* Sat 07 Jun 2014 05:54:13 PM JST
struct.pack('5I', 1, above, 0, 0, 0)
* Sat 07 Jun 2014 05:54:54 PM JST
import xcb2
c=xcb2.connect()
from xcb2.tests import simple_teswindow
w=c.get_window(simple_teswindow())

* Sat 07 Jun 2014 05:55:41 PM JST
import xcb2
c=xcb2.connect()
from xcb2.tests import simple_teswindow
w=c.get_window(simple_teswindow())

* Sat 07 Jun 2014 05:55:58 PM JST
above=c.core.atomidentify('_NET_WM_ACTION_ABOVE')
struct.pack('5I', 1, above, 0, 0, 0)

* Sat 07 Jun 2014 05:56:06 PM JST
struct.pack('5I', 1, above, 0, 0, 0)
* Sat 07 Jun 2014 05:56:32 PM JST
'\x01\x00\x00\x00l\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sat 07 Jun 2014 05:57:15 PM JST
len(
* Sat 07 Jun 2014 05:57:29 PM JST
import xcb2
c=xcb2.connect()
from xcb2.tests import simple_teswindow
w=c.get_window(simple_teswindow())

* Sat 07 Jun 2014 05:57:40 PM JST
above=c.core.atomidentify('_NET_WM_ACTION_ABOVE')
struct.pack('5I', 1, above, 0, 0, 0)

* Sat 07 Jun 2014 05:58:20 PM JST
'\x01\x00\x00\x00l\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sat 07 Jun 2014 05:59:14 PM JST

* Sat 07 Jun 2014 05:59:15 PM JST

* Sat 07 Jun 2014 05:59:15 PM JST
c.core.ChangeProperty.WM_NAME(58720256, 'HEL')

* Sat 07 Jun 2014 05:59:29 PM JST
import xcb2
c=xcb2.connect()
from xcb2.tests import simple_teswindow
import struct
w=c.get_window(simple_teswindow())
above=c.core.atomidentify('_NET_WM_ACTION_ABOVE')
struct.pack('5I', 1, above, 0, 0, 0)

* Sat 07 Jun 2014 06:00:42 PM JST
'\x01\x00\x00\x00l\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sat 07 Jun 2014 06:01:13 PM JST
w.change_property('_NET_WM_STATE', , '\x01\x00\x00\x00l\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
* Sat 07 Jun 2014 06:01:28 PM JST
'l\x01\x00\x00'
* Sat 07 Jun 2014 06:03:07 PM JST
Property
* Sat 07 Jun 2014 06:03:15 PM JST
NewValue
* Sat 07 Jun 2014 06:03:16 PM JST
Property.NewValue
* Sat 07 Jun 2014 06:04:06 PM JST
_NET_WM_STATE_SHADED
* Sat 07 Jun 2014 06:04:35 PM JST
'\x81\x01\x00\x00'
* Sat 07 Jun 2014 06:41:17 PM JST
PropMode.Replace
* Sun 08 Jun 2014 07:27:10 AM JST
pack
rotate_properties
grab_keyboard

create_window
change_attributes
get_attributes
destroy
destroy_sub_windows
change_save_set
reparent
map
map_sub_windows
unmap
unmap_sub_windows
configure
circulate
query_tree
query_recursive_tree
change_property
delete_property
get_property
list_properties
set_selection_owner
convert_selection
send_event
grab_pointer
grab_button
ungrab_button
ungrab_keyboard
grab_key
ungrab_key
query_pointer
get_motion_events
translate_coords
warp_pointer
set_input_focus
clear_area
create_colormap
list_installed_colormaps

* Sun 08 Jun 2014 07:56:52 AM JST
unmap_sub_windows
destroy_sub_windows

* Sun 08 Jun 2014 07:59:38 AM JST
query_tree
query_recursive_tree

* Sun 08 Jun 2014 08:00:15 AM JST

* Sun 08 Jun 2014 08:00:15 AM JST

* Sun 08 Jun 2014 08:00:15 AM JST
query_recursive_tree

* Sun 08 Jun 2014 08:03:57 AM JST
create_colormap
free_colormap       
list_installed_colormaps


* Sun 08 Jun 2014 08:04:06 AM JST
get_attributes
change_attributes

* Sun 08 Jun 2014 08:08:20 AM JST
get_attributes
change_attributes

* Sun 08 Jun 2014 08:13:10 AM JST
create_colormap
free_colormap       
list_installed_colormaps

* Sun 08 Jun 2014 08:14:51 AM JST

* Sun 08 Jun 2014 08:14:51 AM JST

* Sun 08 Jun 2014 08:14:51 AM JST
convert_selection

* Sun 08 Jun 2014 08:14:57 AM JST
circulate
change_save_set
convert_selection

* Sun 08 Jun 2014 08:15:50 AM JST
translate_coords
get_motion_events
set_input_focus
set_selection_owner

* Sun 08 Jun 2014 08:16:29 AM JST
pack
create
configure
clear_area
reparent
get_attributes
change_attributes
create_colormap
free_colormap       
list_installed_colormaps
circulate
change_save_set
convert_selection
translate_coords
get_motion_events
set_input_focus
set_selection_owner
send_event
#
map    
map_subwindows
unmap  
unmap_subwindows
destroy
destroy_subwindows
query_tree
# property
get_property
change_property
list_properties
delete_property
rotate_properties
# grab        
grab_keyboard
ungrab_keyboard
grab_key
ungrab_key
grab_button
ungrab_button
grab_pointer
ungrab_pointer
query_pointer
warp_pointer

* Sun 08 Jun 2014 08:42:41 AM JST
getname
getname_unchecked
pack
* Sun 08 Jun 2014 08:42:48 AM JST

* Sun 08 Jun 2014 08:42:48 AM JST

* Sun 08 Jun 2014 08:42:48 AM JST
pack
* Sun 08 Jun 2014 08:43:04 AM JST

* Sun 08 Jun 2014 08:43:04 AM JST

* Sun 08 Jun 2014 08:43:04 AM JST
getname_unchecked

* Sun 08 Jun 2014 08:47:30 AM JST
pack
getname
get_type
get_format
getproperty (window, long_offset=, long_length=, delete=)
changeproperty (window, mode=, data_len, data)
deleteproperty (window)
convertseletion (requestor, selection, target, time=)

* Sun 08 Jun 2014 08:50:12 AM JST
internatom
internatom_unchecked
getlength
length_and_name
* Sun 08 Jun 2014 08:51:00 AM JST

* Sun 08 Jun 2014 08:51:00 AM JST

* Sun 08 Jun 2014 08:51:00 AM JST
internatom_unchecked

* Sun 08 Jun 2014 08:51:53 AM JST

* Sun 08 Jun 2014 08:51:53 AM JST

* Sun 08 Jun 2014 08:51:53 AM JST
length_and_name
* Sun 08 Jun 2014 08:53:38 AM JST

* Sun 08 Jun 2014 08:53:38 AM JST

* Sun 08 Jun 2014 08:53:38 AM JST
rotateproperties
* Sun 08 Jun 2014 08:55:40 AM JST
window, long_offset=, long_length, delete=
* Sun 08 Jun 2014 08:56:00 AM JST
getproperty
* Sun 08 Jun 2014 08:58:36 AM JST
pack
intern
gettype
getlength
getformat
getproperty Atom.getproperty(window, long_offset=, long_length, delete=)
changeproperty Atom.changeproperty(window, mode=, data_len, data)
deleteproperty Atom.deleteproperty(window)
convertselection Atom.convertselection(requestor, selection, target, time=)

* Sun 08 Jun 2014 09:00:08 AM JST
pack
intern
gettype
getlength
getformat
getproperty Atom.getproperty(window, long_offset=, long_length, delete=)
changeproperty Atom.changeproperty(window, mode=, data_len, data)
deleteproperty Atom.deleteproperty(window)
convertselection Atom.convertselection(requestor, selection, target, time=)

* Sun 08 Jun 2014 09:02:48 AM JST
length
* Sun 08 Jun 2014 09:05:28 AM JST
pack
packatom
packname
gettype
get_name_len
getformat
getproperty
changeproperty
deleteproperty
convertselection
__int__
__str__
__len__

* Sun 08 Jun 2014 09:18:11 AM JST
del (ATOMTYPES, BUILTIN_ATOMS, BASE_ATOMS, WINDOW_TYPES, WINDOW_STATES,
     WINDOW_ALLOWED_ACTIONS)

* Sun 08 Jun 2014 10:05:27 AM JST
translate_coordinates
createwindow(depth, wid, parent, boarder_width, class_, visual, value_mask)
reparentwindow
warppointer(src_window, dst_window, dst_x, dst_y)
createpixmap
cleararea
* Sun 08 Jun 2014 10:07:33 AM JST
PolyText8
* Sun 08 Jun 2014 10:07:45 AM JST
PolyText16
* Sun 08 Jun 2014 10:07:51 AM JST
ImageText8
* Sun 08 Jun 2014 10:07:56 AM JST
ImageText16
* Sun 08 Jun 2014 10:08:47 AM JST
CreateCursor
* Sun 08 Jun 2014 10:09:59 AM JST
translate_coordinates
createwindow(depth, wid, parent, boarder_width, class_, visual, value_mask)
reparentwindow
warppointer(src_window, dst_window, dst_x, dst_y)
createpixmap
cleararea
copyarea
copyplane
putimage
getimage
PolyText8
PolyText16
ImageText8
ImageText16
CreateCursor

* Sun 08 Jun 2014 10:30:19 AM JST
translate_coordinates
createwindow(depth, wid, parent, boarder_width, class_, visual, value_mask)
reparentwindow
warppointer(src_window, dst_window, dst_x, dst_y)
createpixmap
cleararea
copyarea
copyplane
putimage
getimage
PolyText8
PolyText16
ImageText8
ImageText16
CreateCursor
configurewindow

* Sun 08 Jun 2014 11:22:07 AM JST
translatecoodinates(src_window, dst_window, src_y)
createwindow(depth, wid, parent, y, width, height,
 boarder_width, class_, visual, value_mask, value_list)
reparentwindow(window, parent, y)
warppointer(src_window, dst_window, src_y, src_width, src_height, dst_x, dst_y)

* Sun 08 Jun 2014 11:22:16 AM JST
format='h'
* Sun 08 Jun 2014 11:22:23 AM JST
GeometryX
* Sun 08 Jun 2014 11:22:39 AM JST
translatecoodinates(src_window, dst_window, src_x)
createwindow(depth, wid, parent, x, width, height,
 boarder_width, class_, visual, value_mask, value_list)
reparentwindow(window, parent, x)
warppointer(src_window, dst_window, src_x, src_width, src_height, dst_x, dst_y)
* Sun 08 Jun 2014 11:22:49 AM JST
format='h'
* Sun 08 Jun 2014 11:23:09 AM JST
GeometryY
* Sun 08 Jun 2014 11:27:33 AM JST
GeometryWidth

format='H'

createwindow(depth, wid, parent, x, y, height,
  boarder_width, class_, visual, value_mask, value_list)

* Sun 08 Jun 2014 11:27:46 AM JST
height
* Sun 08 Jun 2014 11:27:58 AM JST
format='H'
* Sun 08 Jun 2014 11:29:12 AM JST
GeometryX.translatecoodinates(src_window, dst_window)
GeometryX.createwindow(depth, wid, parent, width, height,
 boarder_width, class_, visual, value_mask, value_list)
GeometryX.reparentwindow(window, parent)
* Sun 08 Jun 2014 11:29:35 AM JST
GeometryWidthHeigh
* Sun 08 Jun 2014 11:29:47 AM JST
createpixmap
GoemetryWidth.createwindow(depth, wid, parent, x, y,
 boarder_width, class_, visual, value_mask, value_list)
* Sun 08 Jun 2014 11:30:25 AM JST
GeometryXY.translate_coordinates(src_window, dst_window)
GeometryXY.createwindow(depth, wid, parent, boarder_width, class_, visual, value_mask)
GeometryXY.reparentwindow
warppointer(src_window, dst_window, dst_x, dst_y)
createpixmap
cleararea
copyarea
copyplane
putimage
getimage
PolyText8
PolyText16
ImageText8
ImageText16
CreateCursor
configurewindow

* Sun 08 Jun 2014 11:31:59 AM JST
src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y
* Sun 08 Jun 2014 11:32:05 AM JST
width, 
* Sun 08 Jun 2014 11:32:05 AM JST
src_width, 
* Sun 08 Jun 2014 11:32:11 AM JST
warppointer(src_window, dst_window, src_x, src_y, src_height, dst_x, dst_y)
* Sun 08 Jun 2014 11:32:32 AM JST
height, 
* Sun 08 Jun 2014 11:34:13 AM JST
src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y
* Sun 08 Jun 2014 11:34:18 AM JST
height,
* Sun 08 Jun 2014 11:34:19 AM JST
src_height,
* Sun 08 Jun 2014 11:34:19 AM JST
width, src_height,
* Sun 08 Jun 2014 11:34:19 AM JST
src_width, src_height,
* Sun 08 Jun 2014 11:34:20 AM JST
y, src_width, src_height,
* Sun 08 Jun 2014 11:34:20 AM JST
src_y, src_width, src_height,
* Sun 08 Jun 2014 11:34:21 AM JST
x, src_y, src_width, src_height,
* Sun 08 Jun 2014 11:34:27 AM JST
y, 
* Sun 08 Jun 2014 11:34:27 AM JST
src_y, 
* Sun 08 Jun 2014 11:34:28 AM JST
x, src_y, 
* Sun 08 Jun 2014 11:34:28 AM JST
src_x, src_y, 
* Sun 08 Jun 2014 11:42:55 AM JST
depth, pid, drawable, width, height
* Sun 08 Jun 2014 11:43:32 AM JST
width, 
* Sun 08 Jun 2014 11:44:09 AM JST
depth, pid, drawable, width, height
* Sun 08 Jun 2014 11:44:16 AM JST
height
* Sun 08 Jun 2014 11:44:23 AM JST
height
* Sun 08 Jun 2014 11:44:42 AM JST
createpixmap(depth, pid, drawable, width)
* Sun 08 Jun 2014 11:44:44 AM JST
width
* Sun 08 Jun 2014 11:45:26 AM JST
exposures, window, x, y, width, height
* Sun 08 Jun 2014 11:45:30 AM JST
height
* Sun 08 Jun 2014 11:45:30 AM JST
width, height
* Sun 08 Jun 2014 11:45:30 AM JST
y, width, height
* Sun 08 Jun 2014 11:45:31 AM JST
x, y, width, height
* Sun 08 Jun 2014 11:45:37 AM JST
GeometryXY
* Sun 08 Jun 2014 11:47:16 AM JST
exposures, window, x, y, width, height
* Sun 08 Jun 2014 11:47:58 AM JST
x, 
* Sun 08 Jun 2014 11:49:43 AM JST
y, 
* Sun 08 Jun 2014 11:50:13 AM JST
cleararea(exposures, window, width, height)
* Sun 08 Jun 2014 11:50:23 AM JST
cleararea(exposures, window, y, width, height)
* Sun 08 Jun 2014 11:50:33 AM JST
y, 
* Sun 08 Jun 2014 11:51:03 AM JST
GeometryX.cleararea(exposures, window, width, height)
* Sun 08 Jun 2014 11:51:20 AM JST
cleararea(exposures, window, x, y)
* Sun 08 Jun 2014 11:52:37 AM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height
* Sun 08 Jun 2014 11:52:47 AM JST
y, 
* Sun 08 Jun 2014 11:52:48 AM JST
src_y, 
* Sun 08 Jun 2014 11:52:48 AM JST
x, src_y, 
* Sun 08 Jun 2014 11:52:49 AM JST
src_x, src_y, 
* Sun 08 Jun 2014 11:52:50 AM JST
height
* Sun 08 Jun 2014 11:52:51 AM JST
width, height
* Sun 08 Jun 2014 11:52:57 AM JST
copyarea(src_drawable, dst_drawable, gc, dst_x, dst_y)
* Sun 08 Jun 2014 11:53:35 AM JST
width, height
* Sun 08 Jun 2014 11:57:20 AM JST
y, 
* Sun 08 Jun 2014 11:57:20 AM JST
src_y, 
* Sun 08 Jun 2014 11:57:45 AM JST
GeometryX.copyarea(src_drawable, dst_drawable, gc, dst_x, dst_y, width, height)
* Sun 08 Jun 2014 11:57:50 AM JST
GeometryX.
* Sun 08 Jun 2014 11:57:59 AM JST
copyarea(src_drawable, dst_drawable, gc, src_y, dst_x, dst_y, width, height)
* Sun 08 Jun 2014 11:58:29 AM JST
GeometryX.copyarea(src_drawable, dst_drawable, gc, dst_x, dst_y, width, height)
* Sun 08 Jun 2014 11:58:38 AM JST
height
* Sun 08 Jun 2014 11:58:39 AM JST
width, height
* Sun 08 Jun 2014 11:58:48 AM JST
GeometryWidth.copyarea(src_drawable, dst_drawable, gc,
* Sun 08 Jun 2014 11:59:42 AM JST
GeometryWidth.copyarea(src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y)
* Sun 08 Jun 2014 12:00:18 PM JST
GeometryWidth.
* Sun 08 Jun 2014 12:01:07 PM JST
 
* Sun 08 Jun 2014 12:01:09 PM JST
width
* Sun 08 Jun 2014 12:01:15 PM JST
copyarea(src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, height)
* Sun 08 Jun 2014 12:01:22 PM JST
height
* Sun 08 Jun 2014 12:02:47 PM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane
* Sun 08 Jun 2014 12:02:57 PM JST
height,
* Sun 08 Jun 2014 12:02:58 PM JST
width, height,
* Sun 08 Jun 2014 12:03:01 PM JST
x, 
* Sun 08 Jun 2014 12:03:04 PM JST
y, 
* Sun 08 Jun 2014 12:03:04 PM JST
src_y, 
* Sun 08 Jun 2014 12:03:05 PM JST
x, src_y, 
* Sun 08 Jun 2014 12:03:05 PM JST
src_x, src_y, 
* Sun 08 Jun 2014 12:03:24 PM JST
copyplane(src_drawable, dst_drawable, gc, dst_x, dst_y, bit_plane)
* Sun 08 Jun 2014 12:05:05 PM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane
* Sun 08 Jun 2014 12:06:24 PM JST
y, 
* Sun 08 Jun 2014 12:06:25 PM JST
src_y, 
* Sun 08 Jun 2014 12:06:25 PM JST
x, src_y, 
* Sun 08 Jun 2014 12:06:26 PM JST
src_x, src_y, 
* Sun 08 Jun 2014 12:07:11 PM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane
* Sun 08 Jun 2014 12:07:14 PM JST
x, 
* Sun 08 Jun 2014 12:07:40 PM JST
copyplane(src_drawable, dst_drawable, gc, src_y, dst_x, dst_y, width, height, bit_plane)
* Sun 08 Jun 2014 12:08:29 PM JST
y, 
* Sun 08 Jun 2014 12:08:30 PM JST
src_y, 
* Sun 08 Jun 2014 12:09:28 PM JST
copyplane(src_drawable, dst_drawable, gc, src_y, dst_x, dst_y, width, height, bit_plane)
* Sun 08 Jun 2014 12:09:42 PM JST
height, 
* Sun 08 Jun 2014 12:09:43 PM JST
width, height, 
* Sun 08 Jun 2014 12:10:04 PM JST
copyplane(src_drawable, dst_drawable, gc, src_y, dst_x, dst_y, width, height, bit_plane)
* Sun 08 Jun 2014 12:11:07 PM JST
width, 
* Sun 08 Jun 2014 12:11:09 PM JST
copyplane(src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, height, bit_plane)
* Sun 08 Jun 2014 12:11:27 PM JST
height
* Sun 08 Jun 2014 12:11:57 PM JST
format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data
* Sun 08 Jun 2014 12:13:04 PM JST
height,
* Sun 08 Jun 2014 12:13:05 PM JST
width, height,
* Sun 08 Jun 2014 12:13:07 PM JST
y,
* Sun 08 Jun 2014 12:13:07 PM JST
dst_y,
* Sun 08 Jun 2014 12:13:08 PM JST
x, dst_y,
* Sun 08 Jun 2014 12:13:08 PM JST
dst_x, dst_y,
* Sun 08 Jun 2014 12:13:40 PM JST
format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data
* Sun 08 Jun 2014 12:13:43 PM JST
y, 
* Sun 08 Jun 2014 12:13:44 PM JST
dst_y, 
* Sun 08 Jun 2014 12:13:44 PM JST
x, dst_y, 
* Sun 08 Jun 2014 12:13:44 PM JST
dst_x, dst_y, 
* Sun 08 Jun 2014 12:14:04 PM JST
format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data
* Sun 08 Jun 2014 12:14:08 PM JST
x, 
* Sun 08 Jun 2014 12:14:09 PM JST
dst_x, 
* Sun 08 Jun 2014 12:15:09 PM JST
format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data
* Sun 08 Jun 2014 12:24:04 PM JST
format, drawable, x, y, width, height, plane_mask
* Sun 08 Jun 2014 12:24:10 PM JST
height, 
* Sun 08 Jun 2014 12:24:11 PM JST
width, height, 
* Sun 08 Jun 2014 12:24:11 PM JST
y, width, height, 
* Sun 08 Jun 2014 12:24:12 PM JST
x, y, width, height, 
* Sun 08 Jun 2014 12:24:17 PM JST
GeometryXY
* Sun 08 Jun 2014 12:25:10 PM JST
format, drawable, x, y, width, height, plane_mask
* Sun 08 Jun 2014 12:25:13 PM JST
y, 
* Sun 08 Jun 2014 12:25:13 PM JST
x, y, 
* Sun 08 Jun 2014 12:25:25 PM JST
x, 
* Sun 08 Jun 2014 12:25:48 PM JST
format, drawable, x, y, width, height, plane_mask
* Sun 08 Jun 2014 12:25:53 PM JST
y, 
* Sun 08 Jun 2014 12:25:53 PM JST
x, y, 
* Sun 08 Jun 2014 12:26:10 PM JST
format, drawable, x, y, width, height, plane_mask
* Sun 08 Jun 2014 12:26:12 PM JST
y,
* Sun 08 Jun 2014 12:26:37 PM JST
format, drawable, x, y, width, height, plane_mask
* Sun 08 Jun 2014 12:26:41 PM JST
height, 
* Sun 08 Jun 2014 12:26:41 PM JST
width, height, 
* Sun 08 Jun 2014 12:27:01 PM JST
format, drawable, x, y, width, height, plane_mask
* Sun 08 Jun 2014 12:27:06 PM JST
width, 
* Sun 08 Jun 2014 12:27:20 PM JST
getimage(format, drawable, x, y, height, plane_mask)
* Sun 08 Jun 2014 12:27:28 PM JST
height, 
* Sun 08 Jun 2014 12:27:57 PM JST
GeometryXY
* Sun 08 Jun 2014 12:28:02 PM JST
drawable, gc, x, y, items_len, items
* Sun 08 Jun 2014 12:28:06 PM JST
y, 
* Sun 08 Jun 2014 12:28:06 PM JST
x, y, 
* Sun 08 Jun 2014 12:28:17 PM JST
polytext8(drawable, gc, items_len, items)
* Sun 08 Jun 2014 12:28:56 PM JST
polytext8(drawable, gc, y, items_len, items)
* Sun 08 Jun 2014 12:29:17 PM JST

* Sun 08 Jun 2014 12:29:31 PM JST

* Sun 08 Jun 2014 12:29:39 PM JST

* Sun 08 Jun 2014 12:29:53 PM JST

* Sun 08 Jun 2014 12:29:57 PM JST

* Sun 08 Jun 2014 12:29:57 PM JST

* Sun 08 Jun 2014 12:29:57 PM JST
PolyText16

* Sun 08 Jun 2014 12:30:06 PM JST
string_len, drawable, gc, x, y, string
* Sun 08 Jun 2014 12:30:31 PM JST
ImageText16
* Sun 08 Jun 2014 12:30:44 PM JST
imagetext16(string_len, drawable, gc, string)
* Sun 08 Jun 2014 12:31:25 PM JST

* Sun 08 Jun 2014 12:31:34 PM JST

* Sun 08 Jun 2014 12:31:48 PM JST

* Sun 08 Jun 2014 12:31:56 PM JST
imagetext16(string_len, drawable, gc, string)
* Sun 08 Jun 2014 12:32:02 PM JST

* Sun 08 Jun 2014 12:32:26 PM JST
cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y
* Sun 08 Jun 2014 12:32:46 PM JST
createcursor(cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue)
* Sun 08 Jun 2014 12:33:46 PM JST
createcursor(cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue)
* Sun 08 Jun 2014 12:34:01 PM JST
createcursor(cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, y)
* Sun 08 Jun 2014 12:46:22 PM JST
GeometryXY.translate_coordinates(src_window, dst_window)
GeometryXY.createwindow(
  depth, wid, parent, boarder_width, class_, visual, value_mask)
GeometryXY.reparentwindow
warppointer(src_window, dst_window, dst_x, dst_y)
Geometry.Width.createpixmap(depth, pid, drawable)
GeometryXY.cleararea(exposures, window)
GeometryXY.copyarea(src_drawable, dst_drawable, gc, dst_x, dst_y)
GeometryXY.copyplane(src_drawable, dst_drawable, gc, dst_x, dst_y, bit_plane)
GeometryXY.putimage(format, drawable, gc, left_pad, depth, data_len, data)
GeometryXY.getimage(format, drawable, plane_mask)
GeometryXY.polytext8(drawable, gc, items_len, items)
GeometryXY.polytext16(drawable, gc, items_len, items)
GeometryXY.imagetext8(string_len, drawable, gc, string)
GeometryXY.imagetext16(string_len, drawable, gc, string)
GeometryXY.createcursor(cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue)
configurewindow

* Sun 08 Jun 2014 12:46:52 PM JST
translatecoodinates(src_window, dst_window, src_y)
createwindow(depth, wid, parent, y, width, height,
 boarder_width, class_, visual, value_mask, value_list)
reparentwindow(window, parent, y)
warppointer(src_window, dst_window, src_y, src_width, src_height, dst_x, dst_y)
cleararea(exposures, window, y, width, height)
copyarea(src_drawable, dst_drawable, gc, src_y, dst_x, dst_y, width, height)
copyplane(src_drawable, dst_drawable, gc, src_y, dst_x, dst_y, width, height, bit_plane)
putimage(format, drawable, gc, width, height, dst_y, left_pad, depth, data_len, data)
getimage(format, drawable, y, width, height, plane_mask)
polytext8(drawable, gc, y, items_len, items)
polytext16(drawable, gc, y, items_len, items)
imagetext8(string_len, drawable, gc, y, string)
imagetext16(string_len, drawable, gc, y, string)
createcursor(cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, y)
* Sun 08 Jun 2014 12:48:13 PM JST
translatecoodinates(src_window, dst_window, src_x)
createwindow(depth, wid, parent, x, width, height,
 boarder_width, class_, visual, value_mask, value_list)
reparentwindow(window, parent, x)
warppointer(src_window, dst_window, src_x, src_width, src_height, dst_x, dst_y)
cleararea(exposures, window, x, width, height)
copyarea(src_drawable, dst_drawable, gc, src_x, dst_x, dst_y, width, height)
copyplane(src_drawable, dst_drawable, gc, src_x, dst_x, dst_y, width, height, bit_plane)
putimage(format, drawable, gc, width, height, dst_x, left_pad, depth, data_len, data)
getimage(format, drawable, x, width, height, plane_mask)
polytext8(drawable, gc, x, items_len, items)
polytext16(drawable, gc, x, items_len, items)
imagetext8(string_len, drawable, gc, x, string)
imagetext16(string_len, drawable, gc, x, string)
createcursor(cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x)
* Sun 08 Jun 2014 12:48:45 PM JST
translatecoodinates(src_window, dst_window, src_x)
createwindow(depth, wid, parent, x, width, height,
 boarder_width, class_, visual, value_mask, value_list)
reparentwindow(window, parent, x)
warppointer(src_window, dst_window, src_x, src_width, src_height,
  dst_x, dst_y)
cleararea(exposures, window, x, width, height)
copyarea(src_drawable, dst_drawable, gc, src_x, dst_x, dst_y,
  width, height)
copyplane(src_drawable, dst_drawable, gc, src_x, dst_x, dst_y,
  width, height, bit_plane)
putimage(format, drawable, gc, width, height, dst_x,
  left_pad, depth, data_len, data)
getimage(format, drawable, x, width, height, plane_mask)
polytext8(drawable, gc, x, items_len, items)
polytext16(drawable, gc, x, items_len, items)
imagetext8(string_len, drawable, gc, x, string)
imagetext16(string_len, drawable, gc, x, string)
createcursor(cid, source, mask, fore_red, fore_green,
  fore_blue, back_red, back_green, back_blue, x)

* Sun 08 Jun 2014 12:49:31 PM JST
GeometryX.translatecoodinates(src_window, dst_window)
GeometryX.createwindow(depth, wid, parent, width, height,
 boarder_width, class_, visual, value_mask, value_list)
GeometryX.reparentwindow(window, parent)
GeometryX.warppointer(src_window, dst_window, src_width, src_height, dst_x, dst_y)
GeometryX.cleararea(exposures, window, width, height)
GeometryX.copyarea(src_drawable, dst_drawable, gc, dst_x, dst_y, width, height)
GeometryX.copyplane(src_drawable, dst_drawable, gc, dst_x, dst_y, width, height, bit_plane)
GeometryX.putimage(format, drawable, gc, width, height, left_pad, depth, data_len, data)
GeometryX.getimage(format, drawable, width, height, plane_mask)
GeometryX.polytext8(drawable, gc, items_len, items)
GeometryX.polytext16(drawable, gc, items_len, items)
GeometryX.imagetext8(string_len, drawable, gc, string)
GeometryX.imagetext16(string_len, drawable, gc, string)
GeometryX.createcursor(cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue)
* Sun 08 Jun 2014 12:49:51 PM JST
createwindow(depth, wid, parent, x, y, height,
  boarder_width, class_, visual, value_mask, value_list)
warppointer(src_window, dst_window, src_x, src_y, src_height, dst_x, dst_y)
createpixmap(depth, pid, drawable, width)
cleararea(exposures, window, x, y, height)
copyarea(src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, height)
copyplane(src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, height, bit_plane)
getimage(format, drawable, x, y, height, plane_mask)

* Sun 08 Jun 2014 12:50:23 PM JST
createwindow(depth, wid, parent, x, y, height,
  boarder_width, class_, visual, value_mask, value_list)
warppointer(src_window, dst_window, src_x, src_y, src_height,
  dst_x, dst_y)
createpixmap(depth, pid, drawable, width)
cleararea(exposures, window, x, y, height)
copyarea(src_drawable, dst_drawable, gc, src_x, src_y,
  dst_x, dst_y, height)
copyplane(src_drawable, dst_drawable, gc, src_x, src_y,
  dst_x, dst_y, height, bit_plane)
getimage(format, drawable, x, y, height, plane_mask)

* Sun 08 Jun 2014 12:51:21 PM JST
createwindow(depth, wid, parent, x, y, width,
  boarder_width, class_, visual, value_mask, value_list)
warppointer(src_window, dst_window, src_x, src_y, src_width,
  dst_x, dst_y)
createpixmap(depth, pid, drawable, height)
cleararea(exposures, window, x, y, width)
copyarea(src_drawable, dst_drawable, gc, src_x, src_y,
  dst_x, dst_y, width)
copyplane(src_drawable, dst_drawable, gc, src_x, src_y,
  dst_x, dst_y, width, bit_plane)
getimage(format, drawable, x, y, width, plane_mask)

* Sun 08 Jun 2014 12:53:05 PM JST
createwindow(depth, wid, parent, x, y, height,
  boarder_width, class_, visual, value_mask, value_list)
warppointer(src_window, dst_window, src_x, src_y, src_height,
  dst_x, dst_y)
createpixmap(depth, pid, drawable, width)
cleararea(exposures, window, x, y, height)
copyarea(src_drawable, dst_drawable, gc, src_x, src_y,
  dst_x, dst_y, height)
copyplane(src_drawable, dst_drawable, gc, src_x, src_y,
  dst_x, dst_y, height, bit_plane)
getimage(format, drawable, x, y, height, plane_mask)

* Sun 08 Jun 2014 01:26:08 PM JST
owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers
* Sun 08 Jun 2014 01:26:46 PM JST
grab_window, modifiers
* Sun 08 Jun 2014 03:11:10 PM JST

* Sun 08 Jun 2014 03:11:10 PM JST

* Sun 08 Jun 2014 03:11:10 PM JST
        - [yas] elisp error!:

* Sun 08 Jun 2014 03:11:12 PM JST

* Sun 08 Jun 2014 03:11:12 PM JST

* Sun 08 Jun 2014 03:11:12 PM JST
        - [yas] elisp error!:

* Sun 08 Jun 2014 03:11:14 PM JST

* Sun 08 Jun 2014 03:11:14 PM JST

* Sun 08 Jun 2014 03:11:14 PM JST
        - [yas] elisp error!:

* Sun 08 Jun 2014 03:11:18 PM JST

* Sun 08 Jun 2014 03:11:18 PM JST

* Sun 08 Jun 2014 03:11:18 PM JST
        - [yas] elisp error!:

* Sun 08 Jun 2014 03:11:20 PM JST

* Sun 08 Jun 2014 03:11:20 PM JST

* Sun 08 Jun 2014 03:11:20 PM JST
        - [yas] elisp error!:

* Sun 08 Jun 2014 03:11:22 PM JST

* Sun 08 Jun 2014 03:11:22 PM JST

* Sun 08 Jun 2014 03:11:22 PM JST
        - [yas] elisp error!:

* Sun 08 Jun 2014 03:12:39 PM JST
class Window(Drawable):
    r"""SUMMARY
    """
    fmt = 'I'

    def pack(self, ):
        r"""Convert Window ID to string of binary.

        @Return:
        (str)

        pack()
        """
        return _pack(self.fmt, self.id)

    def create_window(self, x, y, width, height, border_width, depth,
                      window_class, visual, **keys):
        pass

    def change_attributes(self, mask, value_list):
        """ChangeWindowAttributes

        @Arguments:
        - `mask`:
        - `value_list`:

        @Return:
        """
        return self.connection.core.ChangeWindowAttributes(
            self.id, mask, value_list)

    def get_attributes(self):
        """GetWindowAttributes"""
        return self.connection.core.GetWindowAttributes(self.id).reply()

    def destroy(self, ):
        """DestroyWindow"""
        return self.connection.core.DestroyWindow(self.id)

    def destroy_sub_windows(self, ):
        """DestroySubwindows"""
        return self.connection.core.DestroySubwindows(self.id)

    def change_save_set(self, mode):
        """ChangeSaveSet

        @Arguments:
        - `mode`:

        @Return:
        """
        return self.connection.core.ChangeSaveSet(mode, self.id)

    def reparent(self, parent, x, y):
        """ReparentWindow

        @Arguments:
        - `parent`:
        - `x`:
        - `y`:

        @Return:
        """
        return self.connection.core.ReparentWindow(self.id, parent, x, y)

    def map(self, ):
        """MapWindow"""
        return self.connection.core.MapWindow(self.id)

    def map_sub_windows(self, ):
        """MapSubwindows"""
        return self.connection.core.MapSubwindows(self.id)

    def unmap(self, ):
        """UnmapWindow"""
        return self.connection.core.UnmapWindow(self.id)

    def unmap_sub_windows(self, ):
        """UnmapSubwindows"""
        return self.connection.core.UnmapSubwindows(self.id)

    def configure(self, mask, values):
        """ConfigureWindow

        @Arguments:
        - `mask`:
        - `values`:

        @Return:
        """
        return self.connection.core.ConfigureWindow(self, mask, values)

    def circulate(self, direction):
        pass

    def raise_window(self,):
        pass

    def query_tree(self):
        """QueryTree"""
        return self.connection.core.QueryTree(self.id).reply().chileren

    def query_recursive_tree(self, ):
        r"""SUMMARY

        query_recursive_tree()

        @Return:
        """
        return self.connection.core.QueryTree.recursive(self)

    def change_property(self, property_, data_len, data, mode=PropMode.Replace):
        """ChangeProperty

        @Arguments:
        - `mode`:
        - `property_`:
        - `type_`:
        - `format_`:
        - `data_len`:
        - `data`:

        @Return:
        """
        return self.connection.core.ChangeProperty.changeproperty(
            self.id, property_, data_len, data, mode)

    def delete_property(self, property_):
        """DeleteProperty

        @Arguments:
        - `property_`:

        @Return:
        """
        return self.connection.core.DeleteProperty(self.id, property_)

    def get_property(self, property_, type_, offset=0, length=10, delete=0):
        """GetProperty

        @Arguments:
        - `property_`:
        - `type_`:
        - `offset`:
        - `length`:
        - `delete`:

        @Return:
        """
        return self.connection.core.GetProperty(
            delete, self.id, property_, type_, offset, length)

    def list_properties(self):
        """ListProperties"""
        return self.connection.core.ListProperties(self.id).reply().atoms

    def set_selection_owner(self, selection, time):
        pass

    def convert_selection(self, selection, target, property, time):
        pass

    def send_event(self, event, event_mask=0, propagate=0):
        """SendEvent

        @Arguments:
        - `event`:
        - `event_mask`:
        - `propagate`:

        @Return:
        """
        return self.connection.core.SendEvent(
            propagate, self.id, event_mask, event)

    def grab_pointer(self, owner_events, event_mask, pointer_mode, keyboard_mode,
                     confine_to, cursor, time):
        pass

    def grab_button(self, button, modifiers, event_mask,
                    pointer_mode=1, keyboard_mode=1, confine_to=0, cursor=0,
                    owner_events=True):
        """GrabButton

        @Arguments:
        - `button`:
        - `modifiers`:
        - `event_mask`:
        - `pointer_mode`:
        - `keyboard_mode`:
        - `confine_to`:
        - `cursor`:
        - `owner_events`:

        @Return:
        """
        self.connection.core.GrabButton(
            owner_events, self.id, event_mask,
            pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers)
        self.flush()

    def ungrab_button(self, button, modifiers):
        """UngrabButton

        @Arguments:
        - `button`:
        - `modifiers`:

        @Return:
        """
        self.connection.core.UngrabButton(button, self.id, modifiers)
        self.flush()

    def grab_keyboard(self, time=0, pointer_mode=1, keyboard_mode=1,
                      owner_events=False):
        """GrabKeyboard

        @Arguments:
        - `time`:
        - `pointer_mode`:
        - `keyboard_mode`:
        - `owner_events`:

        @Return:
        """
        self.connection.core.GrabKeyboard(
            owner_events, self.id, time, pointer_mode, keyboard_mode)
        self.flush()

    def ungrab_keyboard(self, time=0):
        r"""UngrabKeyboard

        ungrab_keyboard(time=0)

        @Arguments:
        - `time`:

        @Return:
        """
        self.connection.core.UngrabKeyboard(time)
        self.flush()

    def grab_key(self, key, modifiers, owner_events=False,
                 pointer_mode=1, keyboard_mode=1):
        """GrabKey

        @Arguments:
        - `key`:
        - `modifiers`:
        - `owner_events`:
        - `pointer_mode`:
        - `keyboard_mode`:

        @Return:
        """
        self.connection.core.GrabKey(
            owner_events, self.id, modifiers, key, pointer_mode, keyboard_mode)
        self.flush()

    def ungrab_key(self, key, modifiers):
        """UngrabKey"""
        self.connection.core.UngrabKey(key, self.id, modifiers)
        self.flush()

    def query_pointer(self):
        pass

    def get_motion_events(self, start, stop):
        pass

    def translate_coords(self, src_window, src_x, src_y):
        pass

    def warp_pointer(self, x, y, src_window=0, src_x=0, src_y=0,
                     src_width=0, src_height=0):
        pass

    def set_input_focus(self, revert_to, time=0):
        """SetInputFocus

        @Arguments:
        - `revert_to`:
        - `time`:

        @Return:
        """
        return self.connection.core.SetInputFocus(revert_to, self.id, time)

    def clear_area(self, x=0, y=0, width=0, height=0, exposures=0):
        pass

    def create_colormap(self, visual, alloc):
        pass

    def list_installed_colormaps(self):
        pass

    def rotate_properties(self, properties, delta):
        pass

    def set_wm_name(self, data, mode=PropMode.Replace):
        """ChangeProperty WM_NAME

        @Arguments:
        - `name`:
        - `mode`:

        @Return:
        """
        return self.core.ChangeProperty.WM_NAME(self.id, data, mode)

    def get_wm_name(self):
        """GetProperty WM_NAME"""
        return self.core.GetProperty.WM_NAME(self.id).reply().get_full_value()

    def set_wm_icon_name(self, data, mode=PropMode.Replace):
        return self.core.ChangeProperty.WM_ICON_NAME(self.id, data, mode)

    def get_wm_icon_name(self):
        """GetProperty WM_ICON_NAME"""
        return self.core.GetProperty.WM_ICON_NAME(
            self.id).reply().get_full_value()

    def set_wm_class(self, data, mode=PropMode.Replace):
        return self.core.ChangeProperty.WM_CLASS(self.id, data, mode)

    def get_wm_class(self):
        """GetProperty WM_CLASS"""
        return self.core.GetProperty.WM_CLASS(self.id).reply().get_full_value()

    def set_wm_transient_for(self, data, mode=PropMode.Replace):
        return self.core.ChangeProperty.WM_TRANSIENT_FOR(self.id, data, mode)

    def get_wm_transient_for(self):
        """GetProperty WM_TRANSIENT_FOR"""
        return self.core.GetProperty.WM_TRANSIENT_FOR(
            self.id).reply().get_full_value()

    def set_wm_protocols(self, data, mode=PropMode.Replace):
        return self.core.ChangeProperty.WM_PROTOCOLS(self.id, data, mode)

    def get_wm_protocols(self):
        """GetProperty WM_PROTOCOLS"""
        return self.core.GetProperty.WM_PROTOCOLS(
            self.id).reply().get_full_value()

    def set_wm_colormap_windows(self, data, mode=PropMode.Replace):
        return self.core.ChangeProperty.WM_COLORMAP_WINDOWS(self.id, data, mode)

    def get_wm_colormap_windows(self):
        """GetProperty WM_COLORMAP_WINDOWS"""
        return self.core.GetProperty.WM_COLORMAP_WINDOWS(
            self.id).reply().get_full_value()

    def set_wm_client_machine(self, data, mode=PropMode.Replace):
        return self.core.ChangeProperty.WM_CLIENT_MACHINE(self.id, data, mode)

    def get_wm_client_machine(self):
        """GetProperty WM_CLIENT_MACHINE"""
        return self.core.GetProperty.WM_CLIENT_MACHINE(
            self.id).reply().get_full_value()

    def set_wm_normal_hints(self, hints={}, **keys):
        pass

    def get_wm_normal_hints(self):
        pass

    def set_wm_hints(self, hints={}, **keys):
        pass

    def get_wm_hints(self):
        pass

    def set_wm_state(self, hints={}, **keys):
        pass

    def get_wm_state(self):
        """GetProperty WM_STATE"""
        return self.core.GetProperty.WM_STATE(self.id).reply().get_full_value()

    def set_wm_icon_size(self, hints={}, **keys):
        pass

    def get_wm_icon_size(self):
        pass

    def set_net_wm_name(self, data, mode=PropMode.Replace):
        r"""SUMMARY

        set_net_wm_name(name)

        @Arguments:
        - `name`:

        @Return:
        """
        return self.core.ChangeProperty._NET_WM_NAME(self.id, data, mode)

    def get_net_wm_name(self, ):
        r"""GetProperty _NET_WM_NAME

        get_net_wm_name()

        @Return:
        """
        return self.core.GetProperty._NET_WM_NAME(
            self.id).reply().get_full_value()

    def set_net_wm_state(self, data, mode=PropMode.Replace):
        r"""SUMMARY

        set_net_wm_state(atoms)

        @Arguments:
        - `atoms`:

        @Return:
        """
        return self.core.ChangeProperty._NET_WM_STATE(self.id, data, mode)

    def get_net_wm_state(self, ):
        r"""SUMMARY

        get_net_wm_state()

        @Return:
        """
        return self.core.GetProperty._NET_WM_STATE(
            self.id).reply().get_full_value()

    def set_net_wm_pid(self, data, mode=PropMode.Replace):
        r"""SUMMARY

        set_net_wm_pid()

        @Arguments:

        @Return:
        """
        return self.core.ChangeProperty._NET_WM_PID(self.id, data, mode)

    def get_net_wm_pid(self, ):
        """GetProperty _NET_WM_PID"""
        return self.core.GetProperty._NET_WM_PID(
            self.id).reply().get_full_value()

    def set_net_wm_allowed_actions(self, data, mode=PropMode.Replace):
        r"""SUMMARY

        set_net_wm_allowed_actions()

        @Arguments:

        @Return:
        """
        return self.core.ChangeProperty._NET_WM_ALLOWED_ACTIONS(
            self.id, data, mode)

    def get_net_wm_allowed_actions(self, ):
        """GetProperty _NET_WM_ALLOWED_ACTIONS"""
        return self.core.GetProperty._NET_WM_ALLOWED_ACTIONS(
            self.id).reply().get_full_value()

    def set_net_supported(self, data, mode=PropMode.Replace):
        r"""SUMMARY

        set_net_supported()

        @Arguments:

        @Return:
        """
        return self.core.ChangeProperty._NET_SUPPORTED(self.id, data, mode)

    def get_net_supported(self, ):
        """GetProperty _NET_SUPPORTED"""
        return self.core.GetProperty._NET_SUPPORTED(
            self.id).reply().get_full_value()

    def set_net_wm_icon(self, data, mode=PropMode.Replace):
        r"""SUMMARY

        set_net_wm_icon()

        @Arguments:

        @Return:
        """
        return self.core.ChangeProperty._NET_WM_ICON_NAME(self.id, data, mode)

    def get_net_wm_icon(self, ):
        """GetProperty _NET_WM_ICON"""
        return self.core.GetProperty._NET_WM_ICON(
            self.id).reply().get_full_value()

    def set_net_wm_icon_geometry(self, data, mode=PropMode.Replace):
        r"""SUMMARY

        set_net_wm_icon_geometry()

        @Arguments:

        @Return:
        """
        pass

    def get_net_wm_icon_geometry(self, ):
        """GetProperty _NET_WM_ICON_GEOMETRY"""
        return self.core.GetProperty._NET_WM_ICON_GEOMETRY(
            self.id).reply().get_full_value()

    def set_net_wm_user_time(self, data, mode=PropMode.Replace):
        r"""SUMMARY

        set_net_wm_user_time()

        @Arguments:

        @Return:
        """
        return self.core.ChangeProperty._NET_WM_USER_TIME(self.id, data, mode)

    def get_net_wm_user_time(self, ):
        """GetProperty _NET_WM_USER_TIME"""
        return self.core.GetProperty._NET_WM_USER_TIME(
            self.id).reply().get_full_value()

    def set_net_wm_user_time_window(self, data, mode=PropMode.Replace):
        r"""SUMMARY

        set_net_wm_user_time_window()

        @Arguments:

        @Return:
        """
        return self.core.ChangeProperty._NET_WM_USER_TIME_WINDOW(
            self.id, data, mode)

    def get_net_wm_user_time_window(self, ):
        """GetProperty _NET_WM_USER_TIME_WINDOW"""
        return self.core.GetProperty._NET_WM_USER_TIME_WINDOW(
            self.id).reply().get_full_value()

    def set_net_wm_window_type(self, data, mode=PropMode.Replace):
        r"""SUMMARY

        set_net_wm_window_type()

        @Arguments:

        @Return:
        """
        return self.core.ChangeProperty._NET_WM_WINDOW_TYPE(
            self.id, data, mode)

    def get_net_wm_window_type(self, ):
        try:
            types = (self.connection.core.GetProperty._NET_WM_WINDOW_TYPE(self)
                     .reply().get_full_value())
        except BadWindow as err:
            LOG.warning('warning: {}'.format(err))
            types = ['']
        cls = WindowTypesDict.get(gfi(types))
        if cls == WindowUnknownType:
            root = self.connection.get_setup().roots[0].root
            if self.id == root:
                return root
        return cls(self)

    def set_net_workarea(self, data, mode=PropMode.Replace):
        r"""SUMMARY

        set_net_workarea()

        @Arguments:

        @Return:
        """
        return self.core.ChangeProperty._NET_WORKAREA(self.id, data, mode)

    def get_net_workarea(self, ):
        """GetProperty _NET_WORKAREA"""
        return self.core.GetProperty._NET_WORKAREA(
            self.id).reply().get_full_value()

* Sun 08 Jun 2014 03:13:18 PM JST
from struct import pack as _pack
from t1.listutil import get_first_index as gfi

from xcb2.logger import LOG
from xcb2.xproto import BadWindow, PropMode

* Sun 08 Jun 2014 03:13:21 PM JST
from struct import pack as _pack
from t1.listutil import get_first_index as gfi

from xcb2.logger import LOG
from xcb2.xproto import BadWindow, PropMode

* Sun 08 Jun 2014 03:13:30 PM JST

* Sun 08 Jun 2014 03:13:30 PM JST

* Sun 08 Jun 2014 03:13:30 PM JST
from xcb2.xobj.window.windowtypes import WindowTypesDict, WindowUnknownType

* Sun 08 Jun 2014 03:29:58 PM JST
format
* Sun 08 Jun 2014 03:30:51 PM JST
from struct import pack as _pack
* Sun 08 Jun 2014 03:36:19 PM JST
window
* Sun 08 Jun 2014 03:38:45 PM JST
ClearAreaChecked
* Sun 08 Jun 2014 03:38:50 PM JST
exposures, window, x, y, width, height
* Sun 08 Jun 2014 03:38:57 PM JST
window, 
* Sun 08 Jun 2014 03:39:35 PM JST
y
* Sun 08 Jun 2014 03:39:35 PM JST
x, y
* Sun 08 Jun 2014 03:42:03 PM JST
parent, x, y
* Sun 08 Jun 2014 03:44:06 PM JST
GetWindowAttributes
* Sun 08 Jun 2014 03:44:14 PM JST
            
* Sun 08 Jun 2014 03:47:08 PM JST
alloc, mid, window, visual
* Sun 08 Jun 2014 03:47:12 PM JST
window, 
* Sun 08 Jun 2014 03:48:09 PM JST
ChangeWindowAttributesChecked
* Sun 08 Jun 2014 03:48:19 PM JST
GetWindowAttributesUnchecked
* Sun 08 Jun 2014 03:53:20 PM JST
            
* Sun 08 Jun 2014 03:54:21 PM JST
self
* Sun 08 Jun 2014 03:55:11 PM JST
requestor, selection, target, property, time
* Sun 08 Jun 2014 03:55:24 PM JST
target, 
* Sun 08 Jun 2014 03:57:02 PM JST
src_window, dst_window, src_x, src_y
* Sun 08 Jun 2014 03:57:08 PM JST
src_window, 
* Sun 08 Jun 2014 04:01:23 PM JST
window, start, stop
* Sun 08 Jun 2014 04:01:27 PM JST
window, 
* Sun 08 Jun 2014 04:05:49 PM JST
self
* Sun 08 Jun 2014 04:06:44 PM JST
focus
* Sun 08 Jun 2014 04:08:31 PM JST
destination
* Sun 08 Jun 2014 04:10:35 PM JST
self.
* Sun 08 Jun 2014 04:15:22 PM JST
delete, window, property, type, long_offset, long_length
* Sun 08 Jun 2014 04:15:27 PM JST
window, 
* Sun 08 Jun 2014 04:15:54 PM JST
window, 
* Sun 08 Jun 2014 04:18:00 PM JST
mode, window, property, type, format, data_len, data
* Sun 08 Jun 2014 04:18:06 PM JST
window, 
* Sun 08 Jun 2014 04:20:18 PM JST
core.
* Sun 08 Jun 2014 04:22:23 PM JST
window, atoms_len, delta, atoms
* Sun 08 Jun 2014 04:22:28 PM JST
window, 
* Sun 08 Jun 2014 04:24:41 PM JST
owner_events, grab_window, time, pointer_mode, keyboard_mode
* Sun 08 Jun 2014 04:24:46 PM JST
grab_window, 
* Sun 08 Jun 2014 04:25:30 PM JST
owner_events, grab_window, time, pointer_mode, keyboard_mode
* Sun 08 Jun 2014 04:25:35 PM JST
grab_window
* Sun 08 Jun 2014 04:30:41 PM JST
owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode
* Sun 08 Jun 2014 04:30:51 PM JST
grab_window, 
* Sun 08 Jun 2014 04:31:32 PM JST
grab_
* Sun 08 Jun 2014 04:32:40 PM JST
key, grab_window, modifiers
* Sun 08 Jun 2014 04:32:44 PM JST
grab_window, 
* Sun 08 Jun 2014 04:34:06 PM JST
owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers
* Sun 08 Jun 2014 04:34:13 PM JST
grab_window, 
* Sun 08 Jun 2014 04:36:22 PM JST
button, grab_window, modifiers
* Sun 08 Jun 2014 04:36:25 PM JST
grab_window, 
* Sun 08 Jun 2014 04:36:41 PM JST
self.
* Sun 08 Jun 2014 04:38:39 PM JST
owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time
* Sun 08 Jun 2014 04:38:45 PM JST
grab_window, 
* Sun 08 Jun 2014 04:39:23 PM JST
core.
* Sun 08 Jun 2014 04:40:07 PM JST
owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time
* Sun 08 Jun 2014 04:40:11 PM JST
grab_window
* Sun 08 Jun 2014 04:42:02 PM JST
src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y
* Sun 08 Jun 2014 04:42:09 PM JST
src_window, 
* Sun 08 Jun 2014 04:42:41 PM JST
            
* Sun 08 Jun 2014 04:42:47 PM JST
dst_window, src_x, src_y, src_width,
                    src_height, dst_x, dst_y
* Sun 08 Jun 2014 04:42:52 PM JST
                    
* Sun 08 Jun 2014 04:44:54 PM JST
impo
* Sun 08 Jun 2014 04:46:20 PM JST
ConnectionAbstract
* Sun 08 Jun 2014 04:49:49 PM JST
ConnectionAbstract
* Sun 08 Jun 2014 04:49:56 PM JST
ConnectionAbstract
* Sun 08 Jun 2014 04:50:36 PM JST

* Sun 08 Jun 2014 04:50:36 PM JST

* Sun 08 Jun 2014 04:50:36 PM JST
        self._value = value

* Sun 08 Jun 2014 04:52:14 PM JST
int
* Sun 08 Jun 2014 04:52:20 PM JST

* Sun 08 Jun 2014 04:52:20 PM JST

* Sun 08 Jun 2014 04:52:20 PM JST
        int.__init__(self, value)

* Sun 08 Jun 2014 04:52:54 PM JST
        # TODO: (Atami) [2014/06/08]
        # check integer

* Sun 08 Jun 2014 04:57:36 PM JST
self.
* Sun 08 Jun 2014 04:59:45 PM JST
boarder_width,  class_, visual, value_mask, value_list
* Sun 08 Jun 2014 05:02:04 PM JST
src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y
* Sun 08 Jun 2014 05:02:13 PM JST
src_x, 
* Sun 08 Jun 2014 05:02:47 PM JST
src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y
* Sun 08 Jun 2014 05:02:57 PM JST
src_x
* Sun 08 Jun 2014 05:03:23 PM JST
return 
* Sun 08 Jun 2014 05:03:46 PM JST
return self.connection.core.$1($0)
* Sun 08 Jun 2014 05:04:19 PM JST
exposures, window, x, y, width, height
* Sun 08 Jun 2014 05:04:23 PM JST
x, 
* Sun 08 Jun 2014 05:04:33 PM JST
return self.connection.core.$1($0)
* Sun 08 Jun 2014 05:19:40 PM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane
* Sun 08 Jun 2014 05:19:46 PM JST
src_x, 
* Sun 08 Jun 2014 05:20:20 PM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane
* Sun 08 Jun 2014 05:20:24 PM JST
dst_x, 
* Sun 08 Jun 2014 05:20:51 PM JST
src_x, 
* Sun 08 Jun 2014 05:21:09 PM JST
self._value
* Sun 08 Jun 2014 05:23:25 PM JST
format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data
* Sun 08 Jun 2014 05:23:35 PM JST
dst_x, 
* Sun 08 Jun 2014 05:23:56 PM JST
format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data
* Sun 08 Jun 2014 05:24:08 PM JST
dst_x
* Sun 08 Jun 2014 05:24:38 PM JST
format, drawable, x, y, width, height, plane_mask
* Sun 08 Jun 2014 05:24:46 PM JST
x, 
* Sun 08 Jun 2014 05:25:26 PM JST
format, drawable, x, y, width, height, plane_mask
* Sun 08 Jun 2014 05:26:05 PM JST
drawable, gc, x, y, items_len, items
* Sun 08 Jun 2014 05:26:48 PM JST
drawable, gc, x, y, items_len, items
* Sun 08 Jun 2014 05:26:51 PM JST
x, 
* Sun 08 Jun 2014 05:27:05 PM JST
drawable, gc, x, y, items_len, items
* Sun 08 Jun 2014 05:27:38 PM JST
drawable, gc, x, y, items_len, items
* Sun 08 Jun 2014 05:28:08 PM JST
drawable, gc, x, y, items_len, items
* Sun 08 Jun 2014 05:28:23 PM JST
    def imagetext8(self, drawable, gc, y, items_len, items):
        r"""SUMMARY
        
        imagetext8(drawable, gc, y, items_len, items)
        
        @Arguments:
        - `drawable`:
        - `gc`:
        - `y`:
        - `items_len`:
        - `items`:
        
        @Return:
        """
        return self.connection.core.PolyText8Checked(
            drawable, gc, self._value, y, items_len, items)

* Sun 08 Jun 2014 05:28:36 PM JST
16
* Sun 08 Jun 2014 05:29:09 PM JST
cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y
* Sun 08 Jun 2014 05:29:45 PM JST
cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y
* Sun 08 Jun 2014 05:30:51 PM JST
class GeometryX(GeometryShortAbstract):
    r"""SUMMARY
    """

    def translatecoordinates(self, src_window, dest_window, src_y):
        r"""SUMMARY

        translatecoordinates(src_window, dest_window, src_y)

        @Arguments:
        - `src_window`:
        - `dest_window`:
        - `src_y`:

        @Return:
        """
        return self.connection.core.TranslateCoordinatesUnchecked(
            src_window, dest_window, self._value, src_y)

    def createwindow(self, depth, wid, parent, y, width, height,
                     boarder_width,  class_, visual, value_mask, value_list):
        r"""SUMMARY

        createwindow(depth, wid, parent, y, width, height)

        @Arguments:
        - `depth`:
        - `wid`:
        - `parent`:
        - `y`:
        - `width`:
        - `height`:

        @Return:
        """
        return self.connection.core.CreateWindowChecked(
            depth, wid, parent, self._value, y, width, height, boarder_width,
            class_, visual, value_mask, value_list)

    def reparentwindow(self, window, parent, y):
        r"""SUMMARY

        reparentwindow(window, parent, y)

        @Arguments:
        - `window`:
        - `parent`:
        - `y`:

        @Return:
        """
        return self.connection.core.ReparentWindowChecked(
            window, parent, self._value, y)

    def warppointer(self, src_window, dst_window, src_y, src_width,
                    src_height, dst_x, dst_y):
        r"""SUMMARY

        warppointer(src_window, dst_window, src_y, src_width,
                    src_height, dst_x, dst_y)

        @Arguments:
        - `src_window`:
        - `dst_window`:
        - `src_y`:
        - `src_width`:
        - `src_height`:
        - `dst_x`:
        - `dst_y`:

        @Return:
        """
        return self.connection.core.WarpPointerChecked(
            src_window, dst_window, self._value, src_y, src_width, src_height,
            dst_x, dst_y)

    def createarea(self, exposures, window, y, width, height):
        r"""SUMMARY

        createarea(exposures, window, y, width, height)

        @Arguments:
        - `exposures`:
        - `window`:
        - `y`:
        - `width`:
        - `height`:

        @Return:
        """
        return self.connection.core.ClearAreaChecked(
            exposures, window, self._value, y, width, height)

    def copyplane(self, src_drawable, dst_drawable, gc, src_y, dst_x, dst_y,
                  width, height, bit_plane):
        r"""SUMMARY

        copyplane(src_drawable, dst_drawable, gc, src_y, dst_x, dst_y,
                  width, height, bit_plane)

        @Arguments:
        - `src_drawable`:
        - `dst_drawable`:
        - `gc`:
        - `src_y`:
        - `dst_x`:
        - `dst_y`:
        - `width`:
        - `height`:
        - `bit_plane`:

        @Return:
        """
        return self.connection.core.CopyPlaneChecked(
            src_drawable, dst_drawable, gc, self._value, src_y,
            dst_x, dst_y, width, height, bit_plane)

    def putimage(self, format, drawable, gc, width, height, dst_y, left_pad,
                 depth, data_len, data):
        r"""SUMMARY

        putimage(format, drawable, gc, width, height, dst_y, left_pad,
                 depth, data_len, data)

        @Arguments:
        - `format`:
        - `drawable`:
        - `gc`:
        - `width`:
        - `height`:
        - `dst_y`:
        - `left_pad`:
        - `depth`:
        - `data_len`:
        - `data`:

        @Return:
        """
        return self.connection.core.PutImageChecked(
            format, drawable, gc, width, height, self._value, dst_y, left_pad,
            depth, data_len, data)

    def getimage(self, format, drawable, y, width, height, plane_mask):
        r"""SUMMARY

        getimage(format, drawable, y, width, height, plane_mask)

        @Arguments:
        - `format`:
        - `drawable`:
        - `y`:
        - `width`:
        - `height`:
        - `plane_mask`:

        @Return:
        """
        return self.connection.core.GetImageUnchecked(
            format, drawable, self._value, y, width, height, plane_mask)

    def polytext8(self, drawable, gc, y, items_len, items):
        r"""SUMMARY

        polytext8(drawable, gc, y, items_len, items)

        @Arguments:
        - `drawable`:
        - `gc`:
        - `y`:
        - `items_len`:
        - `items`:

        @Return:
        """
        return self.connection.core.PolyText8Checked(
            drawable, gc, self._value, y, items_len, items)

    def polytext16(self, drawable, gc, y, items_len, items):
        r"""SUMMARY

        polytext16(drawable, gc, y, items_len, items)

        @Arguments:
        - `drawable`:
        - `gc`:
        - `y`:
        - `items_len`:
        - `items`:

        @Return:
        """
        return self.connection.core.PolyText16Checked(
            drawable, gc, self._value, y, items_len, items)

    def imagetext8(self, drawable, gc, y, items_len, items):
        r"""SUMMARY

        imagetext8(drawable, gc, y, items_len, items)

        @Arguments:
        - `drawable`:
        - `gc`:
        - `y`:
        - `items_len`:
        - `items`:

        @Return:
        """
        return self.connection.core.PolyText8Checked(
            drawable, gc, self._value, y, items_len, items)

    def imagetext16(self, drawable, gc, y, items_len, items):
        r"""SUMMARY

        imagetext16(drawable, gc, y, items_len, items)

        @Arguments:
        - `drawable`:
        - `gc`:
        - `y`:
        - `items_len`:
        - `items`:

        @Return:
        """
        return self.connection.core.PolyText16Checked(
            drawable, gc, self._value, y, items_len, items)

    def createcursor(self, cid, source, mask, fore_red, fore_green, fore_blue,
                     back_red, back_green, back_blue, y):
        r"""SUMMARY

        createcursor(cid, source, mask, fore_red, fore_green, fore_blue,
                     back_red, back_green, back_blue, y)

        @Arguments:
        - `cid`:
        - `source`:
        - `mask`:
        - `fore_red`:
        - `fore_green`:
        - `fore_blue`:
        - `back_red`:
        - `back_green`:
        - `back_blue`:
        - `y`:

        @Return:
        """
        return self.connection.core.CreateCursorChecked(
            cid, source, mask, fore_red, fore_green, fore_blue, back_red,
            back_green, back_blue, self._value, y)



* Sun 08 Jun 2014 05:31:21 PM JST
src_y
* Sun 08 Jun 2014 05:31:40 PM JST
_value
* Sun 08 Jun 2014 05:31:41 PM JST
self._value
* Sun 08 Jun 2014 05:32:13 PM JST
_value
* Sun 08 Jun 2014 05:32:14 PM JST
self._value
* Sun 08 Jun 2014 05:32:36 PM JST
_value
* Sun 08 Jun 2014 05:32:36 PM JST
self._value
* Sun 08 Jun 2014 05:33:00 PM JST
src_x
* Sun 08 Jun 2014 05:33:02 PM JST
_value
* Sun 08 Jun 2014 05:33:02 PM JST
self._value
* Sun 08 Jun 2014 05:33:30 PM JST
_value
* Sun 08 Jun 2014 05:33:30 PM JST
self._value
* Sun 08 Jun 2014 05:33:59 PM JST
_value
* Sun 08 Jun 2014 05:33:59 PM JST
self._value
* Sun 08 Jun 2014 05:34:21 PM JST
dst_x
* Sun 08 Jun 2014 05:35:06 PM JST
_value
* Sun 08 Jun 2014 05:35:06 PM JST
self._value
* Sun 08 Jun 2014 05:35:43 PM JST
_value
* Sun 08 Jun 2014 05:35:43 PM JST
self._value
* Sun 08 Jun 2014 05:35:59 PM JST
_value
* Sun 08 Jun 2014 05:36:00 PM JST
self._value
* Sun 08 Jun 2014 05:36:17 PM JST
_value
* Sun 08 Jun 2014 05:36:17 PM JST
self._value
* Sun 08 Jun 2014 05:36:34 PM JST
_value
* Sun 08 Jun 2014 05:36:34 PM JST
self._value
* Sun 08 Jun 2014 05:36:52 PM JST
class GeometryUnsignedShortAbstract(GeometryAbstract):
    r"""SUMMARY
    """
    format = 'H'

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return _pack(self.format, self._value)



* Sun 08 Jun 2014 05:41:22 PM JST
translatecoordinates
* Sun 08 Jun 2014 05:42:27 PM JST
self.
* Sun 08 Jun 2014 05:45:00 PM JST
    
* Sun 08 Jun 2014 05:45:27 PM JST
    
* Sun 08 Jun 2014 05:46:20 PM JST
            
* Sun 08 Jun 2014 05:48:18 PM JST
self
* Sun 08 Jun 2014 05:50:08 PM JST
 int(self.y),
* Sun 08 Jun 2014 05:50:10 PM JST
                    
* Sun 08 Jun 2014 05:50:14 PM JST
                    
* Sun 08 Jun 2014 05:50:17 PM JST
y),
* Sun 08 Jun 2014 05:50:17 PM JST
self.y),
* Sun 08 Jun 2014 05:50:18 PM JST
int(self.y),
* Sun 08 Jun 2014 05:50:53 PM JST
self.
* Sun 08 Jun 2014 05:53:53 PM JST
warppointer
* Sun 08 Jun 2014 05:55:41 PM JST
gc, 
* Sun 08 Jun 2014 05:55:56 PM JST
int
* Sun 08 Jun 2014 05:57:45 PM JST
format, drawable, gc, width, height, dst_y, left_pad,
                 depth, data_len, data
* Sun 08 Jun 2014 05:58:05 PM JST
dst_y, 
* Sun 08 Jun 2014 05:58:11 PM JST
                 
* Sun 08 Jun 2014 05:58:48 PM JST
format, drawable, gc, width, height, left_pad, depth,
                 data_len, data
* Sun 08 Jun 2014 05:58:53 PM JST
                 
* Sun 08 Jun 2014 05:59:36 PM JST
format, drawable, y, width, height, plane_mask
* Sun 08 Jun 2014 05:59:50 PM JST
y, 
* Sun 08 Jun 2014 06:00:08 PM JST
format, drawable, y, width, height, plane_mask)
* Sun 08 Jun 2014 06:00:15 PM JST
self.
* Sun 08 Jun 2014 06:00:24 PM JST
                               
* Sun 08 Jun 2014 06:00:56 PM JST
drawable, gc, y, items_len, items
* Sun 08 Jun 2014 06:01:10 PM JST
y, 
* Sun 08 Jun 2014 06:01:27 PM JST
drawable, gc, y, items_len, items
* Sun 08 Jun 2014 06:01:31 PM JST
self
* Sun 08 Jun 2014 06:01:47 PM JST
    def polytext8(self, drawable, gc, items_len, items):
        r"""SUMMARY
        
        polytext8(drawable, gc, items_len, items)
        
        @Arguments:
        - `drawable`:
        - `gc`:
        - `items_len`:
        - `items`:
        
        @Return:
        """
        return self.x.polytext8(drawable, gc, int(self.y), items_len, items)

* Sun 08 Jun 2014 06:01:53 PM JST
16
* Sun 08 Jun 2014 06:03:08 PM JST
drawable, gc, y, items_len, items
* Sun 08 Jun 2014 06:03:21 PM JST
y, 
* Sun 08 Jun 2014 06:03:37 PM JST
drawable, gc, y, items_len, items
* Sun 08 Jun 2014 06:03:50 PM JST
    def imagetext8(self, drawable, gc, items_len, items):
        r"""SUMMARY
        
        imagetext8(drawable, gc, items_len, items)
        
        @Arguments:
        - `drawable`:
        - `gc`:
        - `items_len`:
        - `items`:
        
        @Return:
        """
        return self.x.imagetext8(drawable, gc, int(self.y), items_len, items)


* Sun 08 Jun 2014 06:03:58 PM JST
16
* Sun 08 Jun 2014 06:04:45 PM JST
cid, source, mask, fore_red, fore_green, fore_blue,
                     back_red, back_green, back_blue, y
* Sun 08 Jun 2014 06:05:17 PM JST
                     
* Sun 08 Jun 2014 08:55:42 PM JST
drawable
* Sun 08 Jun 2014 08:56:29 PM JST

* Sun 08 Jun 2014 08:56:29 PM JST

* Sun 08 Jun 2014 08:56:29 PM JST
from xcb import 

* Sun 08 Jun 2014 08:56:30 PM JST
from xcb import 

* Sun 08 Jun 2014 08:56:32 PM JST
drawable
* Sun 08 Jun 2014 08:57:35 PM JST
           
* Sun 08 Jun 2014 10:15:33 PM JST
_value, 
* Sun 08 Jun 2014 10:15:34 PM JST
self._value, 
* Sun 08 Jun 2014 10:15:38 PM JST

* Sun 08 Jun 2014 10:15:38 PM JST

* Sun 08 Jun 2014 10:15:38 PM JST
        - `self._value`:

* Sun 08 Jun 2014 10:17:58 PM JST
src_drawable, dst_drawable, gc, src_x, src_y,
                  dst_x, dst_y, height, bit_plane
* Sun 08 Jun 2014 10:22:12 PM JST
class GeometryUnsignedShortAbstract(GeometryAbstract):
    r"""SUMMARY
    """
    format = 'H'

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return _pack(self.format, self._value)


class GeometryWidth(GeometryUnsignedShortAbstract):
    r"""SUMMARY
    """

    def createwindow(self, depth, wid, parent, x, y, height, boarder_width,
                           class_, visual, value_mask, value_list):
        r"""SUMMARY

        createwindow(depth, wid, parent, x, y, height, boarder_width,
                     class_, visual, value_mask, value_list)

        @Arguments:
        - `depth`:
        - `wid`:
        - `parent`:
        - `x`:
        - `y`:
        - `height`:
        - `boarder_width`:
        - `class_`:
        - `visual`:
        - `value_mask`:
        - `value_list`:

        @Return:
        """
        return self.connection.core.CreateWindowChecked(
            depth, wid, parent, x, y, self._value, height, boarder_width,
            class_, visual, value_mask, value_list)

    def warppointer(self, src_window, dst_window, src_x, src_y, src_height):
        r"""SUMMARY

        warppointer(src_window, dst_window, src_x, src_y, src_height)

        @Arguments:
        - `src_window`:
        - `dst_window`:
        - `src_x`:
        - `src_y`:
        - `src_height`:

        @Return:
        """
        return self.connection.core.WarpPointerChecked(
            src_window, dst_window, src_x, src_y, self._value, src_height)

    def createpixmap(self, depth, pid, drawable, height):
        r"""SUMMARY

        createpixmap(depth, pid, drawable, height)

        @Arguments:
        - `depth`:
        - `pid`:
        - `drawable`:
        - `height`:

        @Return:
        """
        return self.connection.core.CreatePixmapChecked(
            depth, pid, drawable, self._value, height)

    def cleararea(self, exposures, window, x, y, height):
        r"""SUMMARY

        cleararea(exposures, window, x, y, height)

        @Arguments:
        - `exposures`:
        - `window`:
        - `x`:
        - `y`:
        - `height`:

        @Return:
        """
        return self.connection.core.ClearAreaChecked(
            exposures, window, x, y, self._value, height)

    def copyarea(self, src_drawable, dst_drawable, gc, src_x, src_y,
                 dst_x, dst_y, height):
        r"""SUMMARY

        copyarea(src_drawable, dst_drawable, gc, src_x, src_y,
                 dst_x, dst_y, self._value, height)

        @Arguments:
        - `src_drawable`:
        - `dst_drawable`:
        - `gc`:
        - `src_x`:
        - `src_y`:
        - `dst_x`:
        - `dst_y`:
        - `height`:

        @Return:
        """
        return self.connection.core.CopyAreaChecked(
            src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y,
            self._value, height)

    def copyplane(self, src_drawable, dst_drawable, gc, src_x, src_y,
                  dst_x, dst_y, height, bit_plane):
        r"""SUMMARY

        copyplane(src_drawable, dst_drawable, gc, src_x, src_y,
                  dst_x, dst_y, height, bit_plane)

        @Arguments:
        - `src_drawable`:
        - `dst_drawable`:
        - `gc`:
        - `src_x`:
        - `src_y`:
        - `dst_x`:
        - `dst_y`:
        - `height`:
        - `bit_plane`:

        @Return:
        """
        return self.connection.core.CopyPlaneChecked(
            src_drawable, dst_drawable, gc, src_x, src_y,
                  dst_x, dst_y, self._value, height, bit_plane)

    def getimage(self, format, drawable, x, y, height, plane_mask):
        r"""SUMMARY

        getimage(format, drawable, x, y, height, plane_mask)

        @Arguments:
        - `format`:
        - `drawable`:
        - `x`:
        - `y`:
        - `height`:
        - `plane_mask`:

        @Return:
        """
        return self.connection.core.GetImageUnchecked(
            format, drawable, x, y, self._value, height, plane_mask)


* Sun 08 Jun 2014 10:23:32 PM JST
height,
* Sun 08 Jun 2014 10:23:45 PM JST
_value,
* Sun 08 Jun 2014 10:23:56 PM JST
self._value,
* Sun 08 Jun 2014 10:24:15 PM JST
height
* Sun 08 Jun 2014 10:24:23 PM JST
height
* Sun 08 Jun 2014 10:24:32 PM JST
height
* Sun 08 Jun 2014 10:24:43 PM JST
height,
* Sun 08 Jun 2014 10:24:53 PM JST
height,
* Sun 08 Jun 2014 10:28:42 PM JST
ConnectionAbstract.__init__(self, connection)
* Sun 08 Jun 2014 10:28:55 PM JST
width
* Sun 08 Jun 2014 10:29:11 PM JST
height
* Sun 08 Jun 2014 10:32:11 PM JST
value_
* Sun 08 Jun 2014 10:32:54 PM JST
self
* Sun 08 Jun 2014 10:32:58 PM JST
            
* Sun 08 Jun 2014 10:34:56 PM JST
self
* Sun 08 Jun 2014 10:38:11 PM JST
_value
* Sun 08 Jun 2014 10:38:16 PM JST
            
* Sun 08 Jun 2014 10:39:19 PM JST
copy
* Sun 08 Jun 2014 10:39:22 PM JST
copy
* Sun 08 Jun 2014 10:39:27 PM JST
copy
* Sun 08 Jun 2014 10:41:30 PM JST
self.
* Sun 08 Jun 2014 10:42:10 PM JST
            
* Sun 08 Jun 2014 10:43:36 PM JST
height), 
* Sun 08 Jun 2014 10:43:36 PM JST
self.height), 
* Sun 08 Jun 2014 10:43:37 PM JST
int(self.height), 
* Sun 08 Jun 2014 10:43:44 PM JST

* Sun 08 Jun 2014 10:43:44 PM JST

* Sun 08 Jun 2014 10:43:44 PM JST
        - `int(self.height)`:

* Sun 08 Jun 2014 10:43:48 PM JST
height), 
* Sun 08 Jun 2014 10:43:48 PM JST
self.height), 
* Sun 08 Jun 2014 10:43:49 PM JST
int(self.height), 
* Sun 08 Jun 2014 10:57:14 PM JST
self._wh.getwidth()
* Sun 08 Jun 2014 10:58:13 PM JST
            
* Sun 08 Jun 2014 10:58:18 PM JST
            
* Sun 08 Jun 2014 11:03:39 PM JST
create
* Sun 08 Jun 2014 11:04:18 PM JST
            
* Sun 08 Jun 2014 11:09:02 PM JST
src_
* Mon 09 Jun 2014 04:59:54 AM JST
    def warppointer(self, src_window, dst_window, src_y, src_width,
                    src_height, dst_x, dst_y):
        r"""SUMMARY

        warppointer(src_window, dst_window, src_y, src_width,
                    src_height, dst_x, dst_y)

        @Arguments:
        - `src_window`:
        - `dst_window`:
        - `src_y`:
        - `src_width`:
        - `src_height`:
        - `dst_x`:
        - `dst_y`:

        @Return:
        """
        return self.connection.core.WarpPointerChecked(
            src_window, dst_window, self._value, src_y, src_width, src_height,
            dst_x, dst_y)


* Mon 09 Jun 2014 05:00:22 AM JST
src_y
* Mon 09 Jun 2014 05:00:40 AM JST
    def cleararea(self, exposures, window, y, width, height):
        r"""SUMMARY

        clearearea(exposures, window, y, width, height)

        @Arguments:
        - `exposures`:
        - `window`:
        - `y`:
        - `width`:
        - `height`:

        @Return:
        """
        return self.connection.core.ClearAreaChecked(
            exposures, window, self._value, y, width, height)


* Mon 09 Jun 2014 05:08:50 AM JST
    def copyarea(self, src_drawable, dst_drawable, gc, src_y, dst_x, dst_y,
                 width, height):
        r"""SUMMARY

        copyarea(src_drawable, dst_drawable, gc, src_y, dst_x, dst_y,
                 width, height)

        @Arguments:
        - `src_drawable`:
        - `dst_drawable`:
        - `gc`:
        - `src_y`:
        - `dst_x`:
        - `dst_y`:
        - `width`:
        - `height`:

        @Return:
        """
        return self.connection.core.CopyAreaChecked(
            src_drawable, dst_drawable, gc, self._value, src_y, dst_x, dst_y,
            width, height)


* Mon 09 Jun 2014 05:09:27 AM JST
self._value, 
* Mon 09 Jun 2014 05:09:43 AM JST
    def copyarea(self, src_drawable, dst_drawable, gc, src_x, dst_x, dst_y,
                 width, height):
        r"""SUMMARY

        copyarea(src_drawable, dst_drawable, gc, src_x, dst_x, dst_y,
                 width, height)

        @Arguments:
        - `src_drawable`:
        - `dst_drawable`:
        - `gc`:
        - `src_x`:
        - `dst_x`:
        - `dst_y`:
        - `width`:
        - `height`:

        @Return:
        """
        return self.connection.core.CopyAreaChecked(
            src_drawable, dst_drawable, gc, src_x, self._value, dst_x, dst_y,
            width, height)


* Mon 09 Jun 2014 05:10:00 AM JST
src_x, 
* Mon 09 Jun 2014 05:10:36 AM JST
src_x, 
* Mon 09 Jun 2014 05:11:31 AM JST

* Mon 09 Jun 2014 05:11:31 AM JST

* Mon 09 Jun 2014 05:11:31 AM JST
        - `src_x`:

* Mon 09 Jun 2014 05:11:35 AM JST
src_x, 
* Mon 09 Jun 2014 05:31:30 AM JST
drawable, gc, items_len, items
* Mon 09 Jun 2014 05:33:11 AM JST
drawable, gc, items_len, items
* Mon 09 Jun 2014 05:33:30 AM JST
    def imagetext8(self, string_len, drawable, gc, string):
        r"""SUMMARY
        
        imagetext8(string_len, drawable, gc, string)
        
        @Arguments:
        - `string_len`:
        - `drawable`:
        - `gc`:
        - `string`:
        
        @Return:
        """
        return self._xy.imagetext8(drawable, gc, items_len, items)

* Mon 09 Jun 2014 05:34:12 AM JST
16
* Mon 09 Jun 2014 05:34:30 AM JST
string_len, drawable, gc, string
* Mon 09 Jun 2014 05:35:16 AM JST
cid, source, mask, fore_red, fore_green, fore_blue,
                     back_red, back_green, back_blue
* Mon 09 Jun 2014 05:35:54 AM JST
                     
* Mon 09 Jun 2014 12:19:19 PM JST
translatecoodinates(src_window, dst_window, src_y)
createwindow(depth, wid, parent, y, width, height,
 boarder_width, class_, visual, value_mask, value_list)
reparentwindow(window, parent, y)
warppointer(src_window, dst_window, src_y, src_width, 
  src_height, dst_x, dst_y)
cleararea(exposures, window, y, width, height)
copyarea(src_drawable, dst_drawable, gc, src_y, dst_x, dst_y,
   width, height)
copyplane(src_drawable, dst_drawable, gc, src_y, dst_x, dst_y, 
  width, height, bit_plane)
putimage(format, drawable, gc, width, height, dst_y,
   left_pad, depth, data_len, data)
getimage(format, drawable, y, width, height, plane_mask)
polytext8(drawable, gc, y, items_len, items)
polytext16(drawable, gc, y, items_len, items)
imagetext8(string_len, drawable, gc, y, string)
imagetext16(string_len, drawable, gc, y, string)
createcursor(cid, source, mask, fore_red, fore_green, 
  fore_blue, back_red, back_green, back_blue, y)
* Mon 09 Jun 2014 12:19:22 PM JST
(src_window, dst_window, src_y)
* Mon 09 Jun 2014 12:19:25 PM JST
(depth, wid, parent, y, width, height,
* Mon 09 Jun 2014 12:19:26 PM JST

* Mon 09 Jun 2014 12:19:26 PM JST

* Mon 09 Jun 2014 12:19:26 PM JST
                    boarder_width, class_, visual, value_mask, value_list)

* Mon 09 Jun 2014 12:19:28 PM JST
(window, parent, y)
* Mon 09 Jun 2014 12:19:29 PM JST
(src_window, dst_window, src_y, src_width, 
* Mon 09 Jun 2014 12:19:30 PM JST

* Mon 09 Jun 2014 12:19:30 PM JST

* Mon 09 Jun 2014 12:19:30 PM JST
                        src_height, dst_x, dst_y)

* Mon 09 Jun 2014 12:19:32 PM JST
(exposures, window, y, width, height)
* Mon 09 Jun 2014 12:19:33 PM JST
(src_drawable, dst_drawable, gc, src_y, dst_x, dst_y,
* Mon 09 Jun 2014 12:19:33 PM JST

* Mon 09 Jun 2014 12:19:33 PM JST

* Mon 09 Jun 2014 12:19:34 PM JST
                       width, height)

* Mon 09 Jun 2014 12:19:35 PM JST
(src_drawable, dst_drawable, gc, src_y, dst_x, dst_y, 
* Mon 09 Jun 2014 12:19:36 PM JST

* Mon 09 Jun 2014 12:19:36 PM JST

* Mon 09 Jun 2014 12:19:36 PM JST
                        width, height, bit_plane)

* Mon 09 Jun 2014 12:19:38 PM JST
(format, drawable, gc, width, height, dst_y,
* Mon 09 Jun 2014 12:19:38 PM JST

* Mon 09 Jun 2014 12:19:38 PM JST

* Mon 09 Jun 2014 12:19:38 PM JST
                 left_pad, depth, data_len, data)

* Mon 09 Jun 2014 12:19:40 PM JST
(format, drawable, y, width, height, plane_mask)
* Mon 09 Jun 2014 12:19:41 PM JST
(drawable, gc, y, items_len, items)
* Mon 09 Jun 2014 12:19:42 PM JST
(drawable, gc, y, items_len, items)
* Mon 09 Jun 2014 12:19:43 PM JST
(string_len, drawable, gc, y, string)
* Mon 09 Jun 2014 12:19:44 PM JST
(string_len, drawable, gc, y, string)
* Mon 09 Jun 2014 12:19:45 PM JST
(cid, source, mask, fore_red, fore_green, 
* Mon 09 Jun 2014 12:19:45 PM JST

* Mon 09 Jun 2014 12:19:45 PM JST

* Mon 09 Jun 2014 12:19:45 PM JST
                  fore_blue, back_red, back_green, back_blue, y)
* Mon 09 Jun 2014 12:19:48 PM JST
translatecoodinates
createwindow
reparentwindow
warppointer
cleararea
copyarea
copyplane
putimage
getimage
polytext8
polytext16
imagetext8
imagetext16
createcursor

* Mon 09 Jun 2014 12:20:11 PM JST
translatecoodinates(src_window, dst_window, src_x)
createwindow(depth, wid, parent, x, width, height,
 boarder_width, class_, visual, value_mask, value_list)
reparentwindow(window, parent, x)
warppointer(src_window, dst_window, src_x, src_width, src_height,
  dst_x, dst_y)
cleararea(exposures, window, x, width, height)
copyarea(src_drawable, dst_drawable, gc, src_x, dst_x, dst_y,
  width, height)
copyplane(src_drawable, dst_drawable, gc, src_x, dst_x, dst_y,
  width, height, bit_plane)
putimage(format, drawable, gc, width, height, dst_x,
  left_pad, depth, data_len, data)
getimage(format, drawable, x, width, height, plane_mask)
polytext8(drawable, gc, x, items_len, items)
polytext16(drawable, gc, x, items_len, items)
imagetext8(string_len, drawable, gc, x, string)
imagetext16(string_len, drawable, gc, x, string)
createcursor(cid, source, mask, fore_red, fore_green,
  fore_blue, back_red, back_green, back_blue, x)

* Mon 09 Jun 2014 12:20:25 PM JST
(src_window, dst_window, src_x)
* Mon 09 Jun 2014 12:20:35 PM JST
(depth, wid, parent, x, width, height,
* Mon 09 Jun 2014 12:20:37 PM JST
(window, parent, x)
* Mon 09 Jun 2014 12:20:37 PM JST
(src_window, dst_window, src_x, src_width, src_height,
* Mon 09 Jun 2014 12:20:37 PM JST
(exposures, window, x, width, height)
* Mon 09 Jun 2014 12:20:37 PM JST
(src_drawable, dst_drawable, gc, src_x, dst_x, dst_y,
* Mon 09 Jun 2014 12:20:38 PM JST
(src_drawable, dst_drawable, gc, src_x, dst_x, dst_y,
* Mon 09 Jun 2014 12:20:38 PM JST
(format, drawable, gc, width, height, dst_x,
* Mon 09 Jun 2014 12:20:38 PM JST
(format, drawable, x, width, height, plane_mask)
* Mon 09 Jun 2014 12:20:38 PM JST
(drawable, gc, x, items_len, items)
* Mon 09 Jun 2014 12:20:38 PM JST
(drawable, gc, x, items_len, items)
* Mon 09 Jun 2014 12:20:39 PM JST
(string_len, drawable, gc, x, string)
* Mon 09 Jun 2014 12:20:39 PM JST
(string_len, drawable, gc, x, string)
* Mon 09 Jun 2014 12:20:39 PM JST
(cid, source, mask, fore_red, fore_green,
* Mon 09 Jun 2014 12:20:41 PM JST

* Mon 09 Jun 2014 12:20:41 PM JST

* Mon 09 Jun 2014 12:20:41 PM JST
                  fore_blue, back_red, back_green, back_blue, x)

* Mon 09 Jun 2014 12:20:43 PM JST

* Mon 09 Jun 2014 12:20:43 PM JST

* Mon 09 Jun 2014 12:20:43 PM JST
                 left_pad, depth, data_len, data)

* Mon 09 Jun 2014 12:20:43 PM JST

* Mon 09 Jun 2014 12:20:43 PM JST

* Mon 09 Jun 2014 12:20:44 PM JST
                        width, height, bit_plane)

* Mon 09 Jun 2014 12:20:44 PM JST

* Mon 09 Jun 2014 12:20:44 PM JST

* Mon 09 Jun 2014 12:20:44 PM JST
                       width, height)

* Mon 09 Jun 2014 12:20:45 PM JST

* Mon 09 Jun 2014 12:20:45 PM JST

* Mon 09 Jun 2014 12:20:45 PM JST
                        dst_x, dst_y)

* Mon 09 Jun 2014 12:20:46 PM JST

* Mon 09 Jun 2014 12:20:46 PM JST

* Mon 09 Jun 2014 12:20:46 PM JST
                    boarder_width, class_, visual, value_mask, value_list)

* Mon 09 Jun 2014 12:20:49 PM JST
translatecoodinates
createwindow
reparentwindow
warppointer
cleararea
copyarea
copyplane
putimage
getimage
polytext8
polytext16
imagetext8
imagetext16
createcursor

* Mon 09 Jun 2014 12:21:10 PM JST
getx
gety
setx
sety
GeometryX.translatecoodinates(src_window, dst_window)
GeometryX.createwindow(depth, wid, parent, width, height,
 boarder_width, class_, visual, value_mask, value_list)
GeometryX.reparentwindow(window, parent)
GeometryX.warppointer(src_window, dst_window, src_width, src_height, dst_x, dst_y)
GeometryX.cleararea(exposures, window, width, height)
GeometryX.copyarea(src_drawable, dst_drawable, gc, dst_x, dst_y, width, height)
GeometryX.copyplane(src_drawable, dst_drawable, gc, dst_x, dst_y, width, height, bit_plane)
GeometryX.putimage(format, drawable, gc, width, height, left_pad, depth, data_len, data)
GeometryX.getimage(format, drawable, width, height, plane_mask)
GeometryX.polytext8(drawable, gc, items_len, items)
GeometryX.polytext16(drawable, gc, items_len, items)
GeometryX.imagetext8(string_len, drawable, gc, string)
GeometryX.imagetext16(string_len, drawable, gc, string)
GeometryX.createcursor(cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue)
* Mon 09 Jun 2014 12:21:16 PM JST
(src_window, dst_window)
* Mon 09 Jun 2014 12:21:16 PM JST
(depth, wid, parent, width, height,
* Mon 09 Jun 2014 12:21:17 PM JST
(window, parent)
* Mon 09 Jun 2014 12:21:17 PM JST
(src_window, dst_window, src_width, src_height, dst_x, dst_y)
* Mon 09 Jun 2014 12:21:17 PM JST
(exposures, window, width, height)
* Mon 09 Jun 2014 12:21:17 PM JST
(src_drawable, dst_drawable, gc, dst_x, dst_y, width, height)
* Mon 09 Jun 2014 12:21:17 PM JST
(src_drawable, dst_drawable, gc, dst_x, dst_y, width, height, bit_plane)
* Mon 09 Jun 2014 12:21:18 PM JST
(format, drawable, gc, width, height, left_pad, depth, data_len, data)
* Mon 09 Jun 2014 12:21:18 PM JST
(format, drawable, width, height, plane_mask)
* Mon 09 Jun 2014 12:21:18 PM JST
(drawable, gc, items_len, items)
* Mon 09 Jun 2014 12:21:18 PM JST
(drawable, gc, items_len, items)
* Mon 09 Jun 2014 12:21:19 PM JST
(string_len, drawable, gc, string)
* Mon 09 Jun 2014 12:21:19 PM JST
(string_len, drawable, gc, string)
* Mon 09 Jun 2014 12:21:19 PM JST
(cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue)
* Mon 09 Jun 2014 12:21:22 PM JST

* Mon 09 Jun 2014 12:21:22 PM JST

* Mon 09 Jun 2014 12:21:22 PM JST
                              boarder_width, class_, visual, value_mask, value_list)

* Mon 09 Jun 2014 12:21:29 PM JST
GeometryX.
* Mon 09 Jun 2014 12:21:30 PM JST
GeometryX.
* Mon 09 Jun 2014 12:21:30 PM JST
GeometryX.
* Mon 09 Jun 2014 12:21:30 PM JST
GeometryX.
* Mon 09 Jun 2014 12:21:30 PM JST
GeometryX.
* Mon 09 Jun 2014 12:21:30 PM JST
GeometryX.
* Mon 09 Jun 2014 12:21:30 PM JST
GeometryX.
* Mon 09 Jun 2014 12:21:30 PM JST
GeometryX.
* Mon 09 Jun 2014 12:21:30 PM JST
GeometryX.
* Mon 09 Jun 2014 12:21:30 PM JST
GeometryX.
* Mon 09 Jun 2014 12:21:31 PM JST
GeometryX.
* Mon 09 Jun 2014 12:21:31 PM JST
GeometryX.
* Mon 09 Jun 2014 12:21:31 PM JST
GeometryX.
* Mon 09 Jun 2014 12:21:31 PM JST
GeometryX.
* Mon 09 Jun 2014 12:21:36 PM JST
getx
gety
setx
sety
translatecoodinates
createwindow
reparentwindow
warppointer
cleararea
copyarea
copyplane
putimage
getimage
polytext8
polytext16
imagetext8
imagetext16
createcursor
* Mon 09 Jun 2014 12:22:02 PM JST
getx
gety
getwidth
getheight
setx
sety
setwidth
setheight
GeometryXY.translate_coordinates(src_window, dst_window)
GeometryXY.createwindow(
  depth, wid, parent, boarder_width, class_, visual, value_mask)
GeometryXY.reparentwindow
warppointer(src_window, dst_window, dst_x, dst_y)
Geometry.Width.createpixmap(depth, pid, drawable)
GeometryXY.cleararea(exposures, window)
GeometryXY.copyarea(src_drawable, dst_drawable, gc, dst_x, dst_y)
GeometryXY.copyplane(src_drawable, dst_drawable, gc, dst_x, dst_y, bit_plane)
GeometryXY.putimage(format, drawable, gc, left_pad, depth, data_len, data)
GeometryXY.getimage(format, drawable, plane_mask)
GeometryXY.polytext8(drawable, gc, items_len, items)
GeometryXY.polytext16(drawable, gc, items_len, items)
GeometryXY.imagetext8(string_len, drawable, gc, string)
GeometryXY.imagetext16(string_len, drawable, gc, string)
GeometryXY.createcursor(cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue)
configurewindow

* Mon 09 Jun 2014 12:22:07 PM JST
(src_window, dst_window)
* Mon 09 Jun 2014 12:22:07 PM JST
(
* Mon 09 Jun 2014 12:22:07 PM JST
(src_window, dst_window, dst_x, dst_y)
* Mon 09 Jun 2014 12:22:07 PM JST
(depth, pid, drawable)
* Mon 09 Jun 2014 12:22:07 PM JST
(exposures, window)
* Mon 09 Jun 2014 12:22:07 PM JST
(src_drawable, dst_drawable, gc, dst_x, dst_y)
* Mon 09 Jun 2014 12:22:08 PM JST
(src_drawable, dst_drawable, gc, dst_x, dst_y, bit_plane)
* Mon 09 Jun 2014 12:22:08 PM JST
(format, drawable, gc, left_pad, depth, data_len, data)
* Mon 09 Jun 2014 12:22:08 PM JST
(format, drawable, plane_mask)
* Mon 09 Jun 2014 12:22:08 PM JST
(drawable, gc, items_len, items)
* Mon 09 Jun 2014 12:22:08 PM JST
(drawable, gc, items_len, items)
* Mon 09 Jun 2014 12:22:09 PM JST
(string_len, drawable, gc, string)
* Mon 09 Jun 2014 12:22:09 PM JST
(string_len, drawable, gc, string)
* Mon 09 Jun 2014 12:22:10 PM JST
(cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue)
* Mon 09 Jun 2014 12:22:13 PM JST

* Mon 09 Jun 2014 12:22:13 PM JST

* Mon 09 Jun 2014 12:22:13 PM JST
warppointer

* Mon 09 Jun 2014 12:22:14 PM JST

* Mon 09 Jun 2014 12:22:14 PM JST

* Mon 09 Jun 2014 12:22:14 PM JST
                        depth, wid, parent, boarder_width, class_, visual, value_mask)

* Mon 09 Jun 2014 12:22:24 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:24 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:24 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:24 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:24 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:24 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:24 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:24 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:24 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:24 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:24 PM JST
Geometry.Wi
* Mon 09 Jun 2014 12:22:24 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:24 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:24 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:29 PM JST
Geometry.
* Mon 09 Jun 2014 12:22:34 PM JST
Width.
* Mon 09 Jun 2014 12:22:38 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:38 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:38 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:44 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:44 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:44 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:44 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:44 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:44 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:44 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:44 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:44 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:44 PM JST
GeometryXY.
* Mon 09 Jun 2014 12:22:49 PM JST
getx
gety
getwidth
getheight
setx
sety
setwidth
setheight
translate_coordinates
createwindow
reparentwindow
createpixmap
cleararea
copyarea
copyplane
putimage
getimage
polytext8
polytext16
imagetext8
imagetext16
createcursor
configurewindow

* Mon 09 Jun 2014 12:23:09 PM JST
createwindow(depth, wid, parent, x, y, height,
  boarder_width, class_, visual, value_mask, value_list)
warppointer(src_window, dst_window, src_x, src_y, src_height,
  dst_x, dst_y)
createpixmap(depth, pid, drawable, height)
cleararea(exposures, window, x, y, height)
copyarea(src_drawable, dst_drawable, gc, src_x, src_y,
  dst_x, dst_y, height)
copyplane(src_drawable, dst_drawable, gc, src_x, src_y,
  dst_x, dst_y, height, bit_plane)
getimage(format, drawable, x, y, height, plane_mask)

* Mon 09 Jun 2014 12:23:12 PM JST
(depth, wid, parent, x, y, height,
* Mon 09 Jun 2014 12:23:12 PM JST
(src_window, dst_window, src_x, src_y, src_height,
* Mon 09 Jun 2014 12:23:12 PM JST
(depth, pid, drawable, height)
* Mon 09 Jun 2014 12:23:12 PM JST
(exposures, window, x, y, height)
* Mon 09 Jun 2014 12:23:12 PM JST
(src_drawable, dst_drawable, gc, src_x, src_y,
* Mon 09 Jun 2014 12:23:12 PM JST
(src_drawable, dst_drawable, gc, src_x, src_y,
* Mon 09 Jun 2014 12:23:13 PM JST
(format, drawable, x, y, height, plane_mask)
* Mon 09 Jun 2014 12:23:14 PM JST

* Mon 09 Jun 2014 12:23:14 PM JST

* Mon 09 Jun 2014 12:23:14 PM JST
                        dst_x, dst_y, height, bit_plane)

* Mon 09 Jun 2014 12:23:15 PM JST

* Mon 09 Jun 2014 12:23:15 PM JST

* Mon 09 Jun 2014 12:23:15 PM JST
                       dst_x, dst_y, height)

* Mon 09 Jun 2014 12:23:16 PM JST

* Mon 09 Jun 2014 12:23:16 PM JST

* Mon 09 Jun 2014 12:23:16 PM JST
                        dst_x, dst_y)

* Mon 09 Jun 2014 12:23:17 PM JST

* Mon 09 Jun 2014 12:23:17 PM JST

* Mon 09 Jun 2014 12:23:17 PM JST
                    boarder_width, class_, visual, value_mask, value_list)

* Mon 09 Jun 2014 12:23:19 PM JST
createwindow
warppointer
createpixmap
cleararea
copyarea
copyplane
getimage

* Mon 09 Jun 2014 12:23:41 PM JST
createwindow(depth, wid, parent, x, y, width,
  boarder_width, class_, visual, value_mask, value_list)
warppointer(src_window, dst_window, src_x, src_y, src_width,
  dst_x, dst_y)
createpixmap(depth, pid, drawable, height)
cleararea(exposures, window, x, y, width)
copyarea(src_drawable, dst_drawable, gc, src_x, src_y,
  dst_x, dst_y, width)
copyplane(src_drawable, dst_drawable, gc, src_x, src_y,
  dst_x, dst_y, width, bit_plane)
getimage(format, drawable, x, y, width, plane_mask)

* Mon 09 Jun 2014 12:23:44 PM JST
(depth, wid, parent, x, y, width,
* Mon 09 Jun 2014 12:23:44 PM JST
(src_window, dst_window, src_x, src_y, src_width,
* Mon 09 Jun 2014 12:23:44 PM JST
(depth, pid, drawable, height)
* Mon 09 Jun 2014 12:23:44 PM JST
(exposures, window, x, y, width)
* Mon 09 Jun 2014 12:23:45 PM JST
(src_drawable, dst_drawable, gc, src_x, src_y,
* Mon 09 Jun 2014 12:23:45 PM JST
(src_drawable, dst_drawable, gc, src_x, src_y,
* Mon 09 Jun 2014 12:23:45 PM JST
(format, drawable, x, y, width, plane_mask)
* Mon 09 Jun 2014 12:23:46 PM JST

* Mon 09 Jun 2014 12:23:46 PM JST

* Mon 09 Jun 2014 12:23:46 PM JST
                        dst_x, dst_y, width, bit_plane)

* Mon 09 Jun 2014 12:23:47 PM JST

* Mon 09 Jun 2014 12:23:47 PM JST

* Mon 09 Jun 2014 12:23:47 PM JST
                       dst_x, dst_y, width)

* Mon 09 Jun 2014 12:23:48 PM JST

* Mon 09 Jun 2014 12:23:48 PM JST

* Mon 09 Jun 2014 12:23:48 PM JST
                        dst_x, dst_y)

* Mon 09 Jun 2014 12:23:49 PM JST

* Mon 09 Jun 2014 12:23:49 PM JST

* Mon 09 Jun 2014 12:23:49 PM JST
                    boarder_width, class_, visual, value_mask, value_list)

* Mon 09 Jun 2014 12:23:51 PM JST
createwindow
warppointer
createpixmap
cleararea
copyarea
copyplane
getimage

* Mon 09 Jun 2014 12:24:27 PM JST
getwidth
getheight
setwidth
setheight
createwindow(depth, wid, parent, x, y, height,
  boarder_width, class_, visual, value_mask, value_list)
warppointer(src_window, dst_window, src_x, src_y, src_height,
  dst_x, dst_y)
createpixmap(depth, pid, drawable, width)
cleararea(exposures, window, x, y, height)
copyarea(src_drawable, dst_drawable, gc, src_x, src_y,
  dst_x, dst_y, height)
copyplane(src_drawable, dst_drawable, gc, src_x, src_y,
  dst_x, dst_y, height, bit_plane)
getimage(format, drawable, x, y, height, plane_mask)

* Mon 09 Jun 2014 12:24:30 PM JST
(depth, wid, parent, x, y, height,
* Mon 09 Jun 2014 12:24:30 PM JST
(src_window, dst_window, src_x, src_y, src_height,
* Mon 09 Jun 2014 12:24:30 PM JST
(depth, pid, drawable, width)
* Mon 09 Jun 2014 12:24:30 PM JST
(exposures, window, x, y, height)
* Mon 09 Jun 2014 12:24:31 PM JST
(src_drawable, dst_drawable, gc, src_x, src_y,
* Mon 09 Jun 2014 12:24:31 PM JST
(src_drawable, dst_drawable, gc, src_x, src_y,
* Mon 09 Jun 2014 12:24:31 PM JST
(format, drawable, x, y, height, plane_mask)
* Mon 09 Jun 2014 12:24:32 PM JST

* Mon 09 Jun 2014 12:24:32 PM JST

* Mon 09 Jun 2014 12:24:32 PM JST
                        dst_x, dst_y, height, bit_plane)

* Mon 09 Jun 2014 12:24:33 PM JST

* Mon 09 Jun 2014 12:24:33 PM JST

* Mon 09 Jun 2014 12:24:33 PM JST
                       dst_x, dst_y, height)

* Mon 09 Jun 2014 12:24:34 PM JST

* Mon 09 Jun 2014 12:24:34 PM JST

* Mon 09 Jun 2014 12:24:34 PM JST
                        dst_x, dst_y)

* Mon 09 Jun 2014 12:24:35 PM JST

* Mon 09 Jun 2014 12:24:35 PM JST

* Mon 09 Jun 2014 12:24:35 PM JST
                    boarder_width, class_, visual, value_mask, value_list)

* Mon 09 Jun 2014 12:24:37 PM JST
getwidth
getheight
setwidth
setheight
createwindow
warppointer
createpixmap
cleararea
copyarea
copyplane
getimage

* Mon 09 Jun 2014 12:35:36 PM JST
from xcb2.abstract import ConnectionAbstract
* Mon 09 Jun 2014 12:35:42 PM JST
from struct import pack as _pack
* Mon 09 Jun 2014 01:00:43 PM JST
Ge
* Mon 09 Jun 2014 01:00:44 PM JST
core.Ge
* Mon 09 Jun 2014 01:00:44 PM JST
connection.core.Ge
* Mon 09 Jun 2014 01:12:35 PM JST
GetProper
* Mon 09 Jun 2014 01:12:56 PM JST
types, 
* Mon 09 Jun 2014 01:20:46 PM JST
pack
getname
get_type
get_format
getproperty (window, long_offset=, long_length=, delete=)
changeproperty (window, mode=, data_len, data)
deleteproperty (window)
convertseletion (requestor, selection, target, time=)

* Mon 09 Jun 2014 01:20:49 PM JST
 (window, long_offset=, long_length=, delete=)
* Mon 09 Jun 2014 01:20:50 PM JST
 (window, mode=, data_len, data)
* Mon 09 Jun 2014 01:20:53 PM JST
 (window)
* Mon 09 Jun 2014 01:20:54 PM JST
 (requestor, selection, target, time=)
* Mon 09 Jun 2014 01:21:00 PM JST
pack
getname
gettype
getformat
getproperty
changeproperty
deleteproperty
convertseletion

* Mon 09 Jun 2014 01:21:50 PM JST
from struct import pack as _pack
from xcb2.abstract import ConnectionAbstract

* Mon 09 Jun 2014 01:24:15 PM JST
str(buffer(_array('b', self.name)))
* Mon 09 Jun 2014 01:24:25 PM JST
from array import array as _array
* Mon 09 Jun 2014 01:27:24 PM JST
AtomReplyTypes.get_types(self.name)
* Mon 09 Jun 2014 01:27:32 PM JST
typesname
* Mon 09 Jun 2014 01:28:00 PM JST
from xcb2.xobj.atom.atomtypes import AtomReplyTypes
* Mon 09 Jun 2014 01:28:15 PM JST
name
* Mon 09 Jun 2014 01:29:54 PM JST
self.
* Mon 09 Jun 2014 01:32:13 PM JST
AtomReplyTypes.get_types(self.name)
* Mon 09 Jun 2014 01:32:46 PM JST
AtomReplyTypes.get_types(self.name)
* Mon 09 Jun 2014 01:32:49 PM JST
self.
* Mon 09 Jun 2014 01:33:21 PM JST

* Mon 09 Jun 2014 01:33:21 PM JST

* Mon 09 Jun 2014 01:33:21 PM JST
        typesname = AtomReplyTypes.get_types(self.name)

* Mon 09 Jun 2014 01:38:29 PM JST
atom = self.intern(True)
* Mon 09 Jun 2014 01:39:35 PM JST
change
* Mon 09 Jun 2014 01:40:42 PM JST
.reply().atom
* Mon 09 Jun 2014 01:41:54 PM JST
pack
intern
gettype
getlength
getformat
getproperty Atom.getproperty(window, long_offset=, long_length, delete=)
changeproperty Atom.changeproperty(window, mode=, data_len, data)
deleteproperty Atom.deleteproperty(window)
convertselection Atom.convertselection(requestor, selection, target, time=)

* Mon 09 Jun 2014 01:41:58 PM JST
 Atom.getproperty(window, long_offset=, long_length, delete=)
* Mon 09 Jun 2014 01:42:00 PM JST
 Atom.changeproperty(window, mode=, data_len, data)
* Mon 09 Jun 2014 01:42:01 PM JST
 Atom.deleteproperty(window)
* Mon 09 Jun 2014 01:42:02 PM JST
 Atom.convertselection(requestor, selection, target, time=)
* Mon 09 Jun 2014 01:42:05 PM JST
pack
intern
gettype
getlength
getformat
getpropertyn
changeproperty
deleteproperty
convertselection

* Mon 09 Jun 2014 01:43:09 PM JST
import predicate
* Mon 09 Jun 2014 01:43:14 PM JST
cl - as
* Mon 09 Jun 2014 01:44:32 PM JST
self.atom.pack()
* Mon 09 Jun 2014 01:44:47 PM JST
atom
* Mon 09 Jun 2014 01:47:38 PM JST
from xcb2.xobj.atom.atomtypes import AtomReplyTypes
* Mon 09 Jun 2014 01:48:07 PM JST
AtomReplyTypes.get_types(self.name)
* Mon 09 Jun 2014 01:48:09 PM JST
name
* Mon 09 Jun 2014 01:48:09 PM JST
self.name
* Mon 09 Jun 2014 01:48:38 PM JST
self._gettypescls(self.name)
* Mon 09 Jun 2014 01:52:19 PM JST
self
* Mon 09 Jun 2014 01:55:12 PM JST
format
* Mon 09 Jun 2014 01:55:22 PM JST
getformat()
* Mon 09 Jun 2014 01:59:06 PM JST
    def __repr__(self, ):
        fmt = "{0.__class__.__name__}(name='{0.name}', atom={0.atom})".format
        return fmt(self)

* Mon 09 Jun 2014 01:59:28 PM JST
    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.atom, other.atom)
        if predicate.isstring(other):
            return cmp(self.name, other)
        if predicate.isint(other):
            return cmp(self.atom, other)
        return 1

* Mon 09 Jun 2014 01:59:47 PM JST
    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.atom == other.atom
        if predicate.isint(other):
            return self.atom == other
        if predicate.isstring(other):
            return self.name == other
        return False

* Mon 09 Jun 2014 01:59:57 PM JST
    def __ne__(self, other):
        return not (self == other)

    def __getitem__(self, key):
        return str(self)[key]


* Mon 09 Jun 2014 02:00:06 PM JST
    def __ne__(self, other):
        return not (self == other)


* Mon 09 Jun 2014 02:01:15 PM JST
    def __long__(self, ):
        return long(self.atom)


* Mon 09 Jun 2014 02:01:20 PM JST
    def __hash__(self, ):
        return hash(self.atom)

* Mon 09 Jun 2014 02:02:04 PM JST
    def __getitem__(self, key):
        return str(self)[key]


* Mon 09 Jun 2014 02:02:18 PM JST
str(
* Mon 09 Jun 2014 02:02:34 PM JST
key
* Mon 09 Jun 2014 02:03:58 PM JST
AtomReplyTypes.get_types
* Mon 09 Jun 2014 02:04:56 PM JST
    def __iter__(self):
        for i in range(0, len(self)):
            yield self.name[i]
        raise StopIteration()

* Mon 09 Jun 2014 02:05:02 PM JST
    def __str__(self, ):
        return self.name


* Mon 09 Jun 2014 02:05:10 PM JST
    def __hash__(self, ):
        return hash(self.name)

* Mon 09 Jun 2014 02:05:20 PM JST
    def __repr__(self, ):
        return repr(self.name)


* Mon 09 Jun 2014 02:05:33 PM JST
    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.name, other.name)
        return cmp(self.name, other)


* Mon 09 Jun 2014 02:05:36 PM JST
    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.name, other.name)
        return cmp(self.name, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.name == other.name
        return self.name == other


* Mon 09 Jun 2014 02:05:45 PM JST
    def __ne__(self, other):
        return not (self == other)

* Mon 09 Jun 2014 02:06:11 PM JST
    def __repr__(self, ):
        return repr(self.name)


* Mon 09 Jun 2014 02:06:51 PM JST
    def __int__(self, ):
        return self.atom

    def __long__(self, ):
        return self.atom.__long__()


* Mon 09 Jun 2014 02:06:58 PM JST
    def __hash__(self, ):
        return hash(self.atom)

    def __repr__(self, ):
        return repr(self.atom)


* Mon 09 Jun 2014 02:07:05 PM JST
    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.atom, other.atom)
        return cmp(self.atom, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.atom == other.atom
        return self.atom == other

* Mon 09 Jun 2014 02:07:09 PM JST
    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.atom, other.atom)
        return cmp(self.atom, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.atom == other.atom
        return self.atom == other

    def __ne__(self, other):
        return not (self == other)

* Mon 09 Jun 2014 02:09:01 PM JST
__cmp__		 
__eq__		 
__ne__		 
__int__		 
__long__	 
__str__		 
__getitem__
__len__		 
__hash__	 
__repr__	 
* Mon 09 Jun 2014 02:09:35 PM JST
__cmp__ 
__eq__	
__ne__	
__int__ 
__long__
__hash__
__repr__
* Mon 09 Jun 2014 02:10:14 PM JST
__iter__	 
__cmp__		 
__eq__		 
__ne__		 
__str__		 
__len__		 
__getitem__
__hash__	 
__repr__	 
* Mon 09 Jun 2014 02:12:29 PM JST
from struct import unpack as _unpack
from abc import ABCMeta, abstractmethod

from t1.listutil import make_list_append
from xcb2.xobj.window import Window, WindowList


__all__ = ['WrapGetPropertyReply', 'AtomType0Reply', 'AtomType8Reply',
           'AtomType32Reply', 'AtomTypeSTRINGReply', 'AtomTypeUTF8STRINGReply',
           'AtomTypeUTF8STRINGLISTReply', 'AtomTypeWINDOWReply',
           'AtomTypeATOMReply', 'AtomTypeCARDINALReply', 'AtomTypeANYReply',
           'AtomTypeNONEReply', 'AtomReplyTypes']


class WrapGetPropertyReply(object):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection, reply):
        r"""

        @Arguments:
        - `connection`:
        - `reply`:
        - `window`:
        - `property_`:
        """
        self.connection = connection
        self._reply = reply

    @abstractmethod
    def get_value(self, ):
        r"""SUMMARY

        get_value()

        @Return:
        """
        raise StandardError()

    @property
    def bytes_after(self, ):
        r"""SUMMARY

        bytes_after()

        @Return:
        """
        return self._reply.bytes_after

    @property
    def format(self, ):
        r"""SUMMARY

        format()

        @Return:
        """
        return self._reply.format

    @property
    def type(self, ):
        r"""SUMMARY

        type()

        @Return:
        """
        return self.connection.core.InternAtom.usecache(
            self._reply.type).reply()

    @property
    def value(self, ):
        r"""SUMMARY

        value()

        @Return:
        """
        return list(self._reply.value)

    @property
    def value_buf(self, ):
        r"""SUMMARY

        value_buf()

        @Return:
        """
        return self._reply.value.buf()

    @property
    def value_len(self, ):
        r"""SUMMARY

        value_len()

        @Return:
        """
        return self._reply.value_len

    def get_offset(self, ):
        r"""SUMMARY

        get_offset()

        @Return:
        """
        return self._reply.value_len / 4

    def get_bytes_after(self, ):
        r"""SUMMARY

        get_after_value()

        @Return:
        """
        if self.bytes_after == 0:
            return None
        return self.connection.core.GetProperty.getproperty(
            self._reply.property, self._reply.window, self.get_offset(),
            self.bytes_after / 4 + 1 # length
            ).reply()

    def get_full_value(self, ):
        r"""SUMMARY

        get_full_value()

        @Return:
        """
        value = self.get_value()
        after = self.get_bytes_after()
        if after is not None:
            value += after.get_value()
        return value


class AtomType0Reply(WrapGetPropertyReply):
    r"""SUMMARY
    """
    length = 0

    def get_value(self, ):
        r"""SUMMARY

        get_value()

        @Return:
        """
        return self.value_buf


class AtomType8Reply(WrapGetPropertyReply):
    r"""SUMMARY
    """
    length = 8

    def get_value(self, ):
        r"""SUMMARY

        get_value()

        @Return:
        """
        return str(self.value_buf)


class AtomType32Reply(WrapGetPropertyReply):
    r"""SUMMARY
    """
    length = 32

    def get_offset(self, ):
        r"""SUMMARY

        get_offset()

        @Return:
        """
        return self._reply.value_len

    def get_value(self, ):
        r"""SUMMARY

        get_value()

        @Return:
        """
        return list(_unpack('I' * self.value_len, self.value_buf))


class AtomTypeSTRINGReply(AtomType8Reply):
    r"""SUMMARY
    """
    name = 'STRING'


class AtomTypeUTF8STRINGReply(AtomType8Reply):
    r"""SUMMARY
    """
    name = 'UTF8_STRING'


class AtomTypeUTF8STRINGLISTReply(AtomType8Reply):
    r"""SUMMARY
    """
    name = 'UTF8_STRING[]'

    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        result, append = make_list_append()
        chr_ = ''
        for ord_ in self.value:
            if not ord_:
                append(chr_)
                chr_ = ''
            else:
                chr_ += chr(ord_)
        return result


class AtomTypeWINDOWReply(AtomType32Reply):
    r"""SUMMARY
    """
    name = 'WINDOW'

    def get_value(self, ):
        r"""SUMMARY

        get_value()

        @Return:
        """
        values = _unpack('I' * self.value_len, self.value_buf)
        return WindowList([Window(self.connection, x) for x in values])


class AtomTypeATOMReply(AtomType32Reply):
    r"""SUMMARY
    """
    name = 'ATOM'

    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        values = _unpack('I' * self.value_len, self.value_buf)
        return [self.connection.core.atomidentify(x) for x in values]


class AtomTypeCARDINALReply(AtomType32Reply):
    r"""SUMMARY
    """
    name = 'CARDINAL'


class AtomTypeANYReply(AtomType32Reply):
    r"""SUMMARY
    """
    name = 'ANY'


class AtomTypeNONEReply(AtomType32Reply):
    r"""SUMMARY
    """
    name = ''

    def get_value(self, ):
        r"""SUMMARY

        get_value()

        @Return:
        """
        raise NotImplementedError()


BUILTIN_ATOMS = {
    'WM_NAME'             : AtomTypeSTRINGReply,
    'WM_LOCALE_NAME'      : AtomTypeSTRINGReply,
    # 'WM_HINTS'            : ('', ),
    'WM_ICON_NAME'        : AtomTypeSTRINGReply,
    'WM_CLASS'            : AtomTypeSTRINGReply,
    'WM_TRANSIENT_FOR'    : AtomTypeWINDOWReply,
    'WM_PROTOCOLS'        : AtomTypeATOMReply,
    'WM_COLORMAP_WINDOWS' : AtomTypeWINDOWReply,
    'WM_CLIENT_MACHINE'   : AtomTypeSTRINGReply,
    # 'WM_NORMAL_HINTS': ('WM_SIZE_HINTS', ),
    }

BASE_ATOMS = {
    'WM_STATE'                   : AtomTypeCARDINALReply,

    '_WIN_WORKSPACE'             : AtomTypeCARDINALReply,
    '_WIN_STATE'                 : AtomTypeCARDINALReply,
    '_NET_SUPPORTED'             : AtomTypeATOMReply,
    '_NET_CLIENT_LIST'           : AtomTypeWINDOWReply,
    '_NET_CLIENT_LIST_STACKING'  : AtomTypeWINDOWReply,
    '_NET_NUMBER_OF_DESKTOPS'    : AtomTypeCARDINALReply,
    '_NET_DESKTOP_GEOMETRY'      : AtomTypeCARDINALReply,
    '_NET_DESKTOP_VIEWPORT'      : AtomTypeCARDINALReply,
    '_NET_CURRENT_DESKTOP'       : AtomTypeCARDINALReply,
    '_NET_DESKTOP_NAMES'         : AtomTypeUTF8STRINGLISTReply,
    '_NET_ACTIVE_WINDOW'         : AtomTypeWINDOWReply,
    '_NET_WORKAREA'              : AtomTypeCARDINALReply,
    '_NET_SUPPORTING_WM_CHECK'   : AtomTypeWINDOWReply,
    '_NET_VIRTUAL_ROOTS'         : AtomTypeWINDOWReply,
    '_NET_DESKTOP_LAYOUT'        : AtomTypeCARDINALReply,
    '_NET_SHOWING_DESKTOP'       : AtomTypeCARDINALReply,

    '_NET_CLOSE_WINDOW'          : AtomTypeNONEReply,
    '_NET_MOVERESIZE_WINDOW'     : AtomTypeNONEReply,
    '_NET_WM_MORERESIZE'         : AtomTypeNONEReply,
    '_NET_RESTACK_WINDOW'        : AtomTypeNONEReply,
    '_NET_REQUEST_FRAME_EXTENTS' : AtomTypeCARDINALReply,

    '_NET_WM_NAME'               : AtomTypeUTF8STRINGReply,
    '_NET_WM_VISIBLE_NAME'       : AtomTypeUTF8STRINGReply,
    '_NET_WM_ICON_NAME'          : AtomTypeUTF8STRINGReply,
    '_NET_WM_VISIBLE_ICON_NAME'  : AtomTypeUTF8STRINGReply,
    '_NET_WM_DESKTOP'            : AtomTypeCARDINALReply,
    '_NET_WM_WINDOW_TYPE'        : AtomTypeATOMReply,
    '_NET_WM_STATE'              : AtomTypeATOMReply,
    '_NET_WM_ALLOWED_ACTIONS'    : AtomTypeATOMReply,
    '_NET_WM_STRUT'              : AtomTypeCARDINALReply,
    '_NET_WM_STRUT_PARTIAL'      : AtomTypeCARDINALReply,
    '_NET_WM_ICON_GEOMETRY'      : AtomTypeCARDINALReply,
    '_NET_WM_ICON'               : AtomTypeCARDINALReply,
    '_NET_WM_PID'                : AtomTypeCARDINALReply,
    '_NET_WM_HANDLED_ICONS'      : AtomTypeCARDINALReply,
    '_NET_WM_USER_TIME'          : AtomTypeCARDINALReply,
    '_NET_WM_USER_TIME_WINDOW'   : AtomTypeCARDINALReply,
    '_NET_FRAME_EXTENTS'         : AtomTypeCARDINALReply,

    '_OB_APP_TYPE'               : AtomTypeUTF8STRINGReply,
    }

WINDOW_TYPES = {
    '_NET_WM_WINDOW_TYPE_DESKTOP'       : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_DOCK'          : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_TOOLBAR'       : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_MENU'          : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_UTILITY'       : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_SPLASH'        : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_DIALOG'        : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU' : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_POPUP_MENU'    : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_TOOLTIP'       : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_NOTIFICATION'  : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_COMBO'         : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_DND'           : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_NORMAL'        : AtomTypeATOMReply,
    }

WINDOW_STATES = {
    '_NET_WM_STATE_MODAL'             : AtomTypeATOMReply,
    '_NET_WM_STATE_STICKY'            : AtomTypeATOMReply,
    '_NET_WM_STATE_MAXIMIZED_VERT'    : AtomTypeATOMReply,
    '_NET_WM_STATE_MAXIMIZED_HORZ'    : AtomTypeATOMReply,
    '_NET_WM_STATE_SHADED'            : AtomTypeATOMReply,
    '_NET_WM_STATE_SKIP_TASKBAR'      : AtomTypeATOMReply,
    '_NET_WM_STATE_SKIP_PAGER'        : AtomTypeATOMReply,
    '_NET_WM_STATE_HIDDEN'            : AtomTypeATOMReply,
    '_NET_WM_STATE_FULLSCREEN'        : AtomTypeATOMReply,
    '_NET_WM_STATE_ABOVE'             : AtomTypeATOMReply,
    '_NET_WM_STATE_BELOW'             : AtomTypeATOMReply,
    '_NET_WM_STATE_DEMANDS_ATTENTION' : AtomTypeATOMReply,
    }

WINDOW_ALLOWED_ACTIONS = {
    '_NET_WM_ACTION_MOVE'           : AtomTypeATOMReply,
    '_NET_WM_ACTION_RESIZE'         : AtomTypeATOMReply,
    '_NET_WM_ACTION_MINIMIZE'       : AtomTypeATOMReply,
    '_NET_WM_ACTION_SHADE'          : AtomTypeATOMReply,
    '_NET_WM_ACTION_STICK'          : AtomTypeATOMReply,
    '_NET_WM_ACTION_MAXIMIZE_HORZ'  : AtomTypeATOMReply,
    '_NET_WM_ACTION_MAXIMIZE_VERT'  : AtomTypeATOMReply,
    '_NET_WM_ACTION_FULLSCREEN'     : AtomTypeATOMReply,
    '_NET_WM_ACTION_CHANGE_DESKTOP' : AtomTypeATOMReply,
    '_NET_WM_ACTION_CLOSE'          : AtomTypeATOMReply,
    '_NET_WM_ACTION_ABOVE'          : AtomTypeATOMReply,
    '_NET_WM_ACTION_BELOW'          : AtomTypeATOMReply,
    }


ATOMTYPES = {}
ATOMTYPES.update(BUILTIN_ATOMS)
ATOMTYPES.update(BASE_ATOMS)
ATOMTYPES.update(WINDOW_TYPES)
ATOMTYPES.update(WINDOW_STATES)
ATOMTYPES.update(WINDOW_ALLOWED_ACTIONS)


class AtomReplyTypes(object):
    r"""
    """
    atomtypes = ATOMTYPES.copy()

    @staticmethod
    def get_types(name):
        r"""SUMMARY

        get_types_length()

        @Return:
        """
        return AtomReplyTypes.atomtypes.get(str(name), AtomType32Reply)

    @staticmethod
    def get_name(name):
        r"""SUMMARY

        get_types(default=0)

        @Arguments:
        - `default`:

        @Return:
        """
        return AtomReplyTypes.atomtypes.get(str(name)).name

    @staticmethod
    def get_length(name):
        r"""SUMMARY

        get_length()

        @Return:
        """
        return AtomReplyTypes.atomtypes.get(str(name)).length


del (ATOMTYPES, BUILTIN_ATOMS, BASE_ATOMS, WINDOW_TYPES, WINDOW_STATES,
     WINDOW_ALLOWED_ACTIONS)

* Mon 09 Jun 2014 02:13:46 PM JST
length = 0
* Mon 09 Jun 2014 02:15:21 PM JST
object
* Mon 09 Jun 2014 02:16:49 PM JST
AtomFromat
* Mon 09 Jun 2014 02:17:00 PM JST
AtomFromat
* Mon 09 Jun 2014 02:17:42 PM JST

* Mon 09 Jun 2014 02:17:42 PM JST

* Mon 09 Jun 2014 02:17:42 PM JST
    name = ''

* Mon 09 Jun 2014 02:57:52 PM JST
from xcb2.abstract import ConnectionAbstract
* Mon 09 Jun 2014 02:58:12 PM JST
ConnectionAbstract
* Mon 09 Jun 2014 02:58:28 PM JST
ConnectionAbstract.__init__(self, connection)
* Mon 09 Jun 2014 03:00:34 PM JST
return 
* Mon 09 Jun 2014 03:00:43 PM JST
KeyButtonAbstract
* Mon 09 Jun 2014 03:03:56 PM JST
c
* Mon 09 Jun 2014 03:03:57 PM JST
sfel.c
* Mon 09 Jun 2014 03:09:22 PM JST
seque
* Mon 09 Jun 2014 03:10:36 PM JST
    def press(self, propagate, destination, sequence_number, time, root,
              window, child,  root_x, root_y, event_x, event_y, state,
              same_screen):
        r"""SUMMARY

        press(propagate, destination, sequence_number, time, root,
              window, child,  root_x, root_y, event_x, event_y, state,
              same_screen)

        @Arguments:
        - `propagate`:
        - `destination`:
        - `sequence_number`:
        - `time`:
        - `root`:
        - `window`:
        - `child`:
        - `root_x`:
        - `root_y`:
        - `event_x`:
        - `event_y`:
        - `state`:
        - `same_screen`:

        @Return:
        """
        return self.connection.core.SendEventChecked.KeyPress(
            propagate, destination, self.value, sequence_number, time, root,
            window, child, root_x, root_y, event_x, event_y, state, same_screen)

* Mon 09 Jun 2014 03:10:41 PM JST
press
* Mon 09 Jun 2014 03:24:24 PM JST
ConnectionAbstract
* Mon 09 Jun 2014 03:24:42 PM JST
UngrabKey
* Mon 09 Jun 2014 03:25:41 PM JST
GrabButton
* Mon 09 Jun 2014 03:27:34 PM JST
time, root, window, child, root_x, root_y, event_x, event_y, state, samescreen
* Mon 09 Jun 2014 03:27:43 PM JST
propagate, destination, detail, sequence_number, time, root, window, child, root_x, root_y, event_x, event_y, state, samescreen
* Mon 09 Jun 2014 03:28:02 PM JST
detail, 
* Mon 09 Jun 2014 03:28:19 PM JST
core.
* Mon 09 Jun 2014 03:28:39 PM JST
propagate, destination, detail, sequence_number, time, root, window, child, root_x, root_y, event_x, event_y, state, samescreen
* Mon 09 Jun 2014 03:28:41 PM JST
detail
* Mon 09 Jun 2014 03:28:58 PM JST
propagate, destination, detail, sequence_number, time, root, window, child, root_x, root_y, event_x, event_y, state, samescreen
* Mon 09 Jun 2014 03:29:11 PM JST
detail, 
* Mon 09 Jun 2014 03:29:44 PM JST
propagate, destination, detail, sequence_number, time, root, window, child, root_x, root_y, event_x, event_y, state, samescreen
* Mon 09 Jun 2014 03:29:47 PM JST
detail
* Mon 09 Jun 2014 03:30:35 PM JST
class Key 
grab			
ungrab		
press			
release		
to_keysym 
to_char		
* Mon 09 Jun 2014 03:31:16 PM JST
grab		
ungrab	
press		
release 
* Mon 09 Jun 2014 04:05:37 PM JST
name.
* Mon 09 Jun 2014 04:06:25 PM JST
name.
* Mon 09 Jun 2014 04:07:17 PM JST
name.
* Mon 09 Jun 2014 04:09:32 PM JST
reply()
* Mon 09 Jun 2014 04:11:07 PM JST
atom
* Mon 09 Jun 2014 04:12:18 PM JST
self.name
* Mon 09 Jun 2014 04:13:36 PM JST
from xcb2.xobj.atom.atomtypes import AtomReplyTypes
* Mon 09 Jun 2014 04:13:43 PM JST
AtomReplyTypes
* Mon 09 Jun 2014 04:13:54 PM JST
_NET_CLOSE_WINDOW
* Mon 09 Jun 2014 04:21:27 PM JST

* Mon 09 Jun 2014 04:21:27 PM JST

* Mon 09 Jun 2014 04:21:27 PM JST
        print(self.name)

* Mon 09 Jun 2014 04:21:28 PM JST

* Mon 09 Jun 2014 04:21:28 PM JST

* Mon 09 Jun 2014 04:21:28 PM JST
        print(self.name)

* Mon 09 Jun 2014 04:28:15 PM JST
class TestWindow(MockerTestCase):
    """2014/06/06"""
    @classmethod
    def setUpClass(cls):
        cls.conn = xcb2.connect()

    def setUp(self):
        self.window = simple_teswindow2()
        self.Window = Window(self.conn, self.window)
        self.conn.flush()
        self.mocker.replay()

    def test_pack(self):
        expect = pack('I', self.window)
        got = self.Window.pack()
        self.assertEqual(expect, got,
                         msg='Failed: Window.pack expect: \{}, got: \{}'
                         .format(repr(expect), repr(got)))

    def test_get_attributes(self, ):
        attr = self.Window.get_attributes()
        self.assertIsInstance(
            attr, GetWindowAttributesReply,
            msg='Failed: Window.get_attributes expect: {}, got: {}'
            .format(GetWindowAttributesReply, attr))
        self.assertEqual(
            0, attr.all_event_masks,
            msg='Failed: Window.get_attributes expect: \{}, got: \{}'
            .format(0, attr.all_event_masks))

    def test_set_attributes(self, ):
        attr = self.Window.get_attributes()
        self.assertEqual(
            0, attr.all_event_masks,
            msg='Failed: Window.get_attributes expect: \{}, got: \{}'
            .format(0, attr.all_event_masks))
        self.Window.change_attributes(CW.EventMask, [EventMask.FocusChange])
        self.conn.flush()
        mask = self.Window.get_attributes().all_event_masks
        self.assertTrue(mask & EventMask.FocusChange)
        self.assertFalse(mask & EventMask.KeyPress)

    def test_destroy(self, ):
        self.conn.core.MapWindowChecked(self.window).check() # check exist
        self.Window.destroy()
        self.conn.flush()
        with self.assertRaises(BadWindow):
            self.conn.core.MapWindowChecked(self.window).check()

    def test_destroy_subwindow(self, ):
        self.skipTest('how to make subwindow')

    def test_save_set(self, ):
        self.skipTest('')

    def test_reparent(self, ):
        self.skipTest('')

    def test_map(self, ):
        self.Window.map()

    def test_map_sub_windows(self, ):
        self.Window.map_sub_windows()

    def test_unmap(self, ):
        self.Window.map()
        self.Window.unmap()

    def test_unmap_sub_windows(self, ):
        self.Window.unmap_sub_windows()

    def test_configure(self, ):
        self.skipTest('')

    def test_curculate(self, ):
        self.skipTest('')

    def test_raise_window(self, ):
        self.skipTest('')

    def test_query_tree(self, ):
        self.skipTest('')

    def test_query_recursive_tree(self, ):
        self.skipTest('')

    def test_change_property(self, ):
        self.skipTest('')

    def test_delete_property(self, ):
        self.skipTest('')

    def test_get_property(self, ):
        self.skipTest('')

    def test_list_properties(self, ):
        self.skipTest('')

    def test_set_selection_owner(self, ):
        self.skipTest('')

    def test_convert_selection(self, ):
        self.skipTest('')

    def test_send_event(self, ):
        self.skipTest('')

    def test_grab_pointer(self, ):
        self.skipTest('')

    def test_grab_button(self, ):
        self.skipTest('')

    def test_ungrab_button(self, ):
        self.skipTest('')

    def test_grab_keyboard(self, ):
        self.skipTest('')

    def test_ungrab_keyboard(self, ):
        self.skipTest('')

    def test_grab_key(self, ):
        self.skipTest('')

    def test_ungrab_key(self, ):
        self.skipTest('')

    def test_query_pointer(self, ):
        self.skipTest('')

    def test_get_motion_events(self, ):
        self.skipTest('')

    def test_translate_coords(self, ):
        self.skipTest('')

    def test_warp_pointer(self, ):
        self.skipTest('')

    def test_set_input_focus(self, ):
        self.skipTest('')

    def test_clear_area(self, ):
        self.skipTest('')

    def test_create_colormap(self, ):
        self.skipTest('')

    def test_list_installed_colormaps(self, ):
        self.skipTest('')

    def test_rotate_properties(self, ):
        self.skipTest('')

    def test_set_wm_name(self, ):
        self.skipTest('')

    def test_get_wm_name(self, ):
        self.skipTest('')

    def test_set_wm_icon_name(self, ):
        self.skipTest('')

    def test_set_wm_class(self, ):
        self.skipTest('')

    def test_get_wm_class(self, ):
        self.skipTest('')

    def test_set_wm_transient_for(self, ):
        self.skipTest('')

    def test_get_wm_transient_for(self, ):
        self.skipTest('')

    def test_set_wm_protocols(self, ):
        self.skipTest('')

    def test_get_wm_protocols(self, ):
        self.skipTest('')

    def test_set_wm_colormap_windows(self, ):
        self.skipTest('')

    def test_get_wm_colormap_windows(self, ):
        self.skipTest('')

    def test_set_wm_client_machine(self, ):
        self.skipTest('')

    def test_get_wm_client_machine(self, ):
        self.skipTest('')

    def test_set_wm_normal_hints(self, ):
        self.skipTest('')

    def test_get_wm_normal_hints(self, ):
        self.skipTest('')

    def test_set_wm_hints(self, ):
        self.skipTest('')

    def test_get_wm_hints(self, ):
        self.skipTest('')

    def test_set_wm_state(self, ):
        self.skipTest('')

    def test_get_wm_state(self, ):
        self.skipTest('')

    def test_set_wm_icon_size(self, ):
        self.skipTest('')

    def test_get_wm_icon_size(self, ):
        self.skipTest('')

    def test_set_net_wm_name(self, ):
        self.skipTest('')

    def test_get_net_wm_name(self, ):
        self.skipTest('')

    def test_set_net_wm_state(self, ):
        self.skipTest('')

    def test_get_net_wm_state(self, ):
        self.skipTest('')

    def test_set_net_wm_pid(self, ):
        self.skipTest('')

    def test_get_net_wm_pid(self, ):
        self.skipTest('')

    def test_set_net_wm_allowed_actions(self, ):
        self.skipTest('')

    def test_get_net_wm_allowed_actions(self, ):
        self.skipTest('')

    def test_set_net_supported(self, ):
        self.skipTest('')

    def test_get_net_supported(self, ):
        self.skipTest('')

    def test_set_net_wm_icon(self, ):
        self.skipTest('')

    def test_get_net_wm_icon(self, ):
        self.skipTest('')

    def test_set_net_wm_icon_geometry(self, ):
        self.skipTest('')

    def test_get_net_wm_icon_geometry(self, ):
        self.skipTest('')

    def test_set_net_wm_user_time(self, ):
        self.skipTest('')

    def test_get_net_wm_user_time(self, ):
        self.skipTest('')

    def test_set_net_wm_user_time_window(self, ):
        self.skipTest('')

    def test_get_net_wm_user_time_window(self, ):
        self.skipTest('')

    def test_set_net_wm_window_type(self, ):
        self.skipTest('')

    def test_get_net_wm_window_type(self, ):
        self.skipTest('')

    def test_set_net_workarea(self, ):
        self.skipTest('')

    def test_get_net_workarea(self, ):
        self.skipTest('')

    def tearDown(self):
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

    @classmethod
    def tearDownClass(cls, ):
        # cls.conn.core.DestroyWindow(cls.window)
        cls.conn.disconnect()

* Mon 09 Jun 2014 04:28:35 PM JST
def simple_teswindow2():
    r"""SUMMARY

    simple_teswindow()

    @Return:
    """
    CON = xcb2.connect()
    CON.render = CON(xcb2.render.key)
    setup = CON.get_setup()
    root = setup.roots[0].root
    depth = setup.roots[0].root_depth
    visual = setup.roots[0].root_visual
    white = setup.roots[0].white_pixel

    window = CON.generate_id()

    CON.core.CreateWindow(depth, window, root,
                          0, 0, 640, 480, 0,
                          xcb2.xproto.WindowClass.InputOutput,
                          visual,
                          xcb2.xproto.CW.BackPixel, [white])
    CON.flush()
    return window

* Mon 09 Jun 2014 04:28:45 PM JST
from xcb2.xobj.window.drawable import Drawable, Window
* Mon 09 Jun 2014 04:28:51 PM JST
Drawable, 
* Mon 09 Jun 2014 04:28:53 PM JST
drawable
* Mon 09 Jun 2014 04:28:59 PM JST
import xcb2, xcb2.render, xcb2.xproto
* Mon 09 Jun 2014 04:29:04 PM JST
from struct import pack
* Mon 09 Jun 2014 04:29:11 PM JST
from xcb2.xproto.reply import GetWindowAttributesReply
from xcb2.xproto import CW, EventMask, BadWindow

* Mon 09 Jun 2014 04:29:25 PM JST
Window
* Mon 09 Jun 2014 04:29:27 PM JST

* Mon 09 Jun 2014 04:29:27 PM JST

* Mon 09 Jun 2014 04:29:28 PM JST
from struct import pack

* Mon 09 Jun 2014 04:31:46 PM JST
name
* Mon 09 Jun 2014 04:39:25 PM JST
name.
* Mon 09 Jun 2014 04:39:43 PM JST
D c.core.atomidentify('WM_NAME').getformat()
* Mon 09 Jun 2014 05:15:58 PM JST
AtomReplyTypes.get_types(self.name)
* Mon 09 Jun 2014 05:18:58 PM JST
gettype
* Mon 09 Jun 2014 05:19:10 PM JST
AtomReplyTypes.get_types(self.name)
* Mon 09 Jun 2014 05:19:24 PM JST
    def getlength(self, ):
        r"""SUMMARY

        getlength()

        @Return:
        """
        return len(self.name)


* Mon 09 Jun 2014 05:21:05 PM JST
self.
* Mon 09 Jun 2014 05:21:36 PM JST
gettypeatom
* Mon 09 Jun 2014 05:22:13 PM JST
gettypeatom
* Mon 09 Jun 2014 06:29:29 PM JST
atom
* Mon 09 Jun 2014 06:34:31 PM JST
requestor, 
* Mon 09 Jun 2014 06:38:38 PM JST

* Mon 09 Jun 2014 06:38:38 PM JST

* Mon 09 Jun 2014 06:38:38 PM JST
    atomname = ''

* Mon 09 Jun 2014 06:38:38 PM JST
    atomname = ''

* Mon 09 Jun 2014 06:38:38 PM JST
    atomname = ''
    _cacheatom = None

* Mon 09 Jun 2014 06:39:09 PM JST

* Mon 09 Jun 2014 06:39:11 PM JST
window
* Mon 09 Jun 2014 06:39:12 PM JST
window.window
* Mon 09 Jun 2014 06:39:15 PM JST
Window
* Mon 09 Jun 2014 06:39:56 PM JST
            
* Mon 09 Jun 2014 06:40:00 PM JST
            
* Mon 09 Jun 2014 06:40:07 PM JST
            
* Mon 09 Jun 2014 06:46:06 PM JST
WindowProperty
* Mon 09 Jun 2014 06:48:18 PM JST
xcb2.
* Mon 09 Jun 2014 06:49:00 PM JST
w=c.root.get_active_window().window
* Mon 09 Jun 2014 06:49:06 PM JST
from xcb2.xobj.window.windowproperty import WindowProperty
* Mon 09 Jun 2014 06:49:13 PM JST
a=c.core.atomidentify('WM_CLASS')
* Mon 09 Jun 2014 06:49:18 PM JST
p=WindowProperty(a, w)
* Mon 09 Jun 2014 06:49:24 PM JST
p.get(False, 0, 0)
* Mon 09 Jun 2014 06:49:28 PM JST
import xcb2
c=xcb2.connect()
w=c.root.get_active_window().window
from xcb2.xobj.window.windowproperty import WindowProperty
a=c.core.atomidentify('WM_CLASS')
p=WindowProperty(a, w)

* Mon 09 Jun 2014 06:51:46 PM JST
p=WindowProperty(a, w)
* Mon 09 Jun 2014 06:51:49 PM JST
p.get(False, 0, 0)
* Mon 09 Jun 2014 06:52:23 PM JST
buf()
* Mon 09 Jun 2014 06:52:38 PM JST
a=c.core.atomidentify('WM_CLASS')
* Mon 09 Jun 2014 06:52:48 PM JST
'WM_CLASS
* Mon 09 Jun 2014 06:54:16 PM JST
value_len
* Mon 09 Jun 2014 06:54:37 PM JST
check()
* Mon 09 Jun 2014 06:57:49 PM JST
getproperty
* Mon 09 Jun 2014 10:27:37 PM JST
vlaue
* Mon 09 Jun 2014 10:29:17 PM JST
value
* Mon 09 Jun 2014 10:29:17 PM JST
reply().value
* Mon 09 Jun 2014 10:29:38 PM JST
check(
* Tue 10 Jun 2014 07:05:42 AM JST
window, 
* Tue 10 Jun 2014 07:05:42 AM JST
_cookie.window, 
* Tue 10 Jun 2014 07:05:42 AM JST
self._cookie.window, 
* Tue 10 Jun 2014 07:05:44 AM JST
window, 
* Tue 10 Jun 2014 07:05:45 AM JST
rep.window, 
* Tue 10 Jun 2014 07:06:05 AM JST
self._cookie.property
* Tue 10 Jun 2014 07:08:09 AM JST
_cookie.
* Tue 10 Jun 2014 07:08:09 AM JST
self._cookie.
* Tue 10 Jun 2014 07:08:50 AM JST
return 
* Tue 10 Jun 2014 07:09:34 AM JST
WrapGetPropertyCookie(self._connection, cookie)
* Tue 10 Jun 2014 07:10:36 AM JST
InternAtom
* Tue 10 Jun 2014 07:11:36 AM JST
50331670
* Tue 10 Jun 2014 07:11:55 AM JST
D 
* Tue 10 Jun 2014 07:12:38 AM JST
usecache
* Tue 10 Jun 2014 07:12:39 AM JST
InternAtom.usecache
* Tue 10 Jun 2014 12:26:44 PM JST
- [X] geometry XY
   type: geometry


* Tue 10 Jun 2014 12:26:46 PM JST

* Tue 10 Jun 2014 12:26:46 PM JST

* Tue 10 Jun 2014 12:26:46 PM JST


* Tue 10 Jun 2014 12:29:39 PM JST
set_wm_name
get_wm_name
set_wm_icon_name
get_wm_icon_name
set_wm_class
get_wm_class
set_wm_transient_for
get_wm_transient_for
set_wm_protocols
get_wm_protocols
set_wm_colormap_windows
get_wm_colormap_windows
set_wm_client_machine
get_wm_client_machine
set_wm_normal_hints
get_wm_normal_hints
set_wm_hints
get_wm_hints
set_wm_state
get_wm_state
set_wm_icon_size
get_wm_icon_size
set_net_wm_name
get_net_wm_name
set_net_wm_state
get_net_wm_state
set_net_wm_pid
get_net_wm_pid
set_net_wm_allowed_actions
get_net_wm_allowed_actions
set_net_supported
get_net_supported
set_net_wm_icon
get_net_wm_icon
set_net_wm_icon_geometry
get_net_wm_icon_geometry
set_net_wm_user_time
get_net_wm_user_time
set_net_wm_user_time_window
get_net_wm_user_time_window
set_net_wm_window_type
get_net_wm_window_type
set_net_workarea
get_net_workarea
* Tue 10 Jun 2014 12:30:04 PM JST

* Tue 10 Jun 2014 12:30:04 PM JST

* Tue 10 Jun 2014 12:30:04 PM JST
get_net_workarea
* Tue 10 Jun 2014 12:30:12 PM JST

* Tue 10 Jun 2014 12:30:12 PM JST

* Tue 10 Jun 2014 12:30:12 PM JST
set_net_wm_window_type

* Tue 10 Jun 2014 12:30:16 PM JST

* Tue 10 Jun 2014 12:30:16 PM JST

* Tue 10 Jun 2014 12:30:16 PM JST
get_net_workarea

* Tue 10 Jun 2014 12:34:29 PM JST
get_wm_name
set_wm_name
get_wm_icon_name
set_wm_icon_name
get_wm_class
set_wm_class
get_wm_transient_for
set_wm_transient_for
get_wm_protocols
set_wm_protocols
get_wm_colormap_windows
set_wm_colormap_windows
get_wm_client_machine
set_wm_client_machine
get_wm_normal_hints
set_wm_normal_hints
get_wm_hints
set_wm_hints
get_wm_state
set_wm_state
get_wm_icon_size
set_wm_icon_size
get_net_wm_name
set_net_wm_name
get_net_wm_state
set_net_wm_state
get_net_wm_pid
set_net_wm_pid
get_net_wm_allowed_actions
set_net_wm_allowed_actions
get_net_supported
set_net_supported
get_net_wm_icon
set_net_wm_icon
get_net_wm_icon_geometry
set_net_wm_icon_geometry
get_net_wm_user_time
set_net_wm_user_time
get_net_wm_user_time_window
set_net_wm_user_time_window
get_net_wm_window_type
set_net_wm_window_type
get_net_workarea
set_net_workarea

* Tue 10 Jun 2014 12:35:39 PM JST
get_user_time
client_list
client_list_stacking
get_desktop_names
get_win_client_list
get_active_window
get_current_desktop
get_desktop_viewport
get_desktop_geometry
get_supporting_wm_check
get_supported
get_workarea
get_workspace_count
get_number_of_desktop
get_desktop_layout
get_showing_desktop
* Tue 10 Jun 2014 12:36:32 PM JST
__int__
__cmp__
__repr__
x
y
width
height
get_geometry
flush
pack
grab_keyboard
ungrab_keyboard
grab_key
ungrab_key
grab_button
ungrab_button
query_tree
query_subwindows
list_properties
* Tue 10 Jun 2014 12:37:13 PM JST
list_states
list_allowed_actions
get_user_window_time
move
focus
close
destroy
isabove     
isbelow     
isfullscreen
ismaximize  
isshade     
setabove         
setbelow         
setfullscreen    
setmaximize      
setshade           
toggleabove      
togglebelow      
togglefullscreen 
togglemaximize   
toggleshade
unsetabove      
unsetbelow      
unsetfullscreen 
unsetmaximize   
unsetshade   
stackabove       
stackbelow
make_subwindow
destroy_subwindows
* Tue 10 Jun 2014 02:50:26 PM JST
get_wm_name
set_wm_name
get_wm_icon_name
set_wm_icon_name
get_wm_class
set_wm_class
get_wm_transient_for
set_wm_transient_for
get_wm_protocols
set_wm_protocols
get_wm_colormap_windows
set_wm_colormap_windows
get_wm_client_machine
set_wm_client_machine
get_wm_normal_hints
set_wm_normal_hints
get_wm_hints
set_wm_hints
get_wm_state
set_wm_state
get_wm_icon_size
set_wm_icon_size
get_net_wm_name
set_net_wm_name
get_net_wm_state
set_net_wm_state
get_net_wm_pid
set_net_wm_pid
get_net_wm_allowed_actions
set_net_wm_allowed_actions
get_net_supported
set_net_supported
get_net_wm_icon
set_net_wm_icon
get_net_wm_icon_geometry
set_net_wm_icon_geometry
get_net_wm_user_time
set_net_wm_user_time
get_net_wm_user_time_window
set_net_wm_user_time_window
get_net_wm_window_type
set_net_wm_window_type
get_net_workarea
set_net_workarea

* Tue 10 Jun 2014 02:50:46 PM JST

* Tue 10 Jun 2014 02:50:46 PM JST

* Tue 10 Jun 2014 02:50:46 PM JST
list_properties

* Tue 10 Jun 2014 02:51:02 PM JST
query_tree
query_subwindows

* Tue 10 Jun 2014 02:51:15 PM JST
query_tree
query_subwindows
make_subwindow
destroy_subwindows


* Tue 10 Jun 2014 02:51:24 PM JST
get_user_time
get_user_window_time

* Tue 10 Jun 2014 02:51:34 PM JST
get_user_time
get_user_window_time

* Tue 10 Jun 2014 02:55:16 PM JST
__int__
__cmp__
__repr__
flush
pack
get_geometry
query_tree
query_subwindows
make_subwindow
destroy_subwindows
grab_keyboard
ungrab_keyboard
grab_key
ungrab_key
grab_button
ungrab_button

list_states
list_allowed_actions
move
focus
close
destroy
setabove         
unsetabove      
isabove     
toggleabove      
setbelow         
unsetbelow      
isbelow     
togglebelow      
setfullscreen    
isfullscreen
unsetfullscreen 
togglefullscreen 
setmaximize      
unsetmaximize   
ismaximize  
togglemaximize   
setshade           
unsetshade   
isshade     
toggleshade
stackabove       
stackbelow
# properties
client_list
client_list_stacking
list_properties
get_user_time
get_user_window_time
get_desktop_names
get_win_client_list
get_active_window
get_current_desktop
get_desktop_viewport
get_desktop_geometry
get_supporting_wm_check
get_supported
get_workarea
get_workspace_count
get_number_of_desktop
get_desktop_layout
get_showing_desktop
get_wm_name
set_wm_name
get_wm_icon_name
set_wm_icon_name
get_wm_class
set_wm_class
get_wm_transient_for
set_wm_transient_for
get_wm_protocols
set_wm_protocols
get_wm_colormap_windows
set_wm_colormap_windows
get_wm_client_machine
set_wm_client_machine
get_wm_normal_hints
set_wm_normal_hints
get_wm_hints
set_wm_hints
get_wm_state
set_wm_state
get_wm_icon_size
set_wm_icon_size
get_net_wm_name
set_net_wm_name
get_net_wm_state
set_net_wm_state
get_net_wm_pid
set_net_wm_pid
get_net_wm_allowed_actions
set_net_wm_allowed_actions
get_net_supported
set_net_supported
get_net_wm_icon
set_net_wm_icon
get_net_wm_icon_geometry
set_net_wm_icon_geometry
get_net_wm_user_time
set_net_wm_user_time
get_net_wm_user_time_window
set_net_wm_user_time_window
get_net_wm_window_type
set_net_wm_window_type
get_net_workarea
set_net_workarea

* Tue 10 Jun 2014 03:53:02 PM JST
set_
* Tue 10 Jun 2014 03:53:03 PM JST
get_
* Tue 10 Jun 2014 03:53:03 PM JST
set_
* Tue 10 Jun 2014 03:53:03 PM JST
get_
* Tue 10 Jun 2014 03:53:03 PM JST
set_
* Tue 10 Jun 2014 03:53:04 PM JST
get_
* Tue 10 Jun 2014 03:53:04 PM JST
set_
* Tue 10 Jun 2014 03:53:04 PM JST
get_
* Tue 10 Jun 2014 03:53:04 PM JST
set_
* Tue 10 Jun 2014 03:53:04 PM JST
get_
* Tue 10 Jun 2014 03:53:04 PM JST
set_
* Tue 10 Jun 2014 03:53:04 PM JST
get_
* Tue 10 Jun 2014 03:53:04 PM JST
set_
* Tue 10 Jun 2014 03:53:04 PM JST
get_
* Tue 10 Jun 2014 03:53:04 PM JST
set_
* Tue 10 Jun 2014 03:53:04 PM JST
get_
* Tue 10 Jun 2014 03:53:04 PM JST
set_
* Tue 10 Jun 2014 03:53:04 PM JST
get_
* Tue 10 Jun 2014 03:53:04 PM JST
set_
* Tue 10 Jun 2014 03:53:04 PM JST
get_
* Tue 10 Jun 2014 03:53:04 PM JST
set_
* Tue 10 Jun 2014 03:53:05 PM JST
get_
* Tue 10 Jun 2014 03:53:05 PM JST
set_
* Tue 10 Jun 2014 03:53:05 PM JST
get_
* Tue 10 Jun 2014 03:53:05 PM JST
set_
* Tue 10 Jun 2014 03:53:05 PM JST
get_
* Tue 10 Jun 2014 03:53:05 PM JST
set_
* Tue 10 Jun 2014 03:53:05 PM JST
get_
* Tue 10 Jun 2014 03:53:05 PM JST
set_
* Tue 10 Jun 2014 03:53:05 PM JST
get_
* Tue 10 Jun 2014 03:53:05 PM JST
set_
* Tue 10 Jun 2014 03:53:05 PM JST
get_
* Tue 10 Jun 2014 03:53:05 PM JST
set_
* Tue 10 Jun 2014 03:53:05 PM JST
get_
* Tue 10 Jun 2014 03:53:05 PM JST
set_
* Tue 10 Jun 2014 03:53:05 PM JST
get_
* Tue 10 Jun 2014 03:53:05 PM JST
set_
* Tue 10 Jun 2014 03:53:05 PM JST
get_
* Tue 10 Jun 2014 03:53:05 PM JST
set_
* Tue 10 Jun 2014 03:53:05 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
set_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
set_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:06 PM JST
get_
* Tue 10 Jun 2014 03:53:16 PM JST

* Tue 10 Jun 2014 03:53:16 PM JST

* Tue 10 Jun 2014 03:53:16 PM JST
wm_name

* Tue 10 Jun 2014 03:53:17 PM JST

* Tue 10 Jun 2014 03:53:17 PM JST

* Tue 10 Jun 2014 03:53:17 PM JST
wm_icon_name

* Tue 10 Jun 2014 03:53:17 PM JST

* Tue 10 Jun 2014 03:53:17 PM JST

* Tue 10 Jun 2014 03:53:17 PM JST
wm_class

* Tue 10 Jun 2014 03:53:18 PM JST

* Tue 10 Jun 2014 03:53:18 PM JST

* Tue 10 Jun 2014 03:53:18 PM JST
wm_transient_for

* Tue 10 Jun 2014 03:53:19 PM JST

* Tue 10 Jun 2014 03:53:19 PM JST

* Tue 10 Jun 2014 03:53:19 PM JST
wm_protocols

* Tue 10 Jun 2014 03:53:20 PM JST

* Tue 10 Jun 2014 03:53:20 PM JST

* Tue 10 Jun 2014 03:53:20 PM JST
wm_colormap_windows

* Tue 10 Jun 2014 03:53:20 PM JST

* Tue 10 Jun 2014 03:53:20 PM JST

* Tue 10 Jun 2014 03:53:20 PM JST
wm_client_machine

* Tue 10 Jun 2014 03:53:21 PM JST

* Tue 10 Jun 2014 03:53:21 PM JST

* Tue 10 Jun 2014 03:53:21 PM JST
wm_normal_hints

* Tue 10 Jun 2014 03:53:21 PM JST

* Tue 10 Jun 2014 03:53:21 PM JST

* Tue 10 Jun 2014 03:53:21 PM JST
wm_hints

* Tue 10 Jun 2014 03:53:22 PM JST

* Tue 10 Jun 2014 03:53:22 PM JST

* Tue 10 Jun 2014 03:53:22 PM JST
wm_state

* Tue 10 Jun 2014 03:53:22 PM JST

* Tue 10 Jun 2014 03:53:22 PM JST

* Tue 10 Jun 2014 03:53:22 PM JST
wm_icon_size

* Tue 10 Jun 2014 03:53:23 PM JST

* Tue 10 Jun 2014 03:53:23 PM JST

* Tue 10 Jun 2014 03:53:23 PM JST
net_wm_name

* Tue 10 Jun 2014 03:53:23 PM JST

* Tue 10 Jun 2014 03:53:23 PM JST

* Tue 10 Jun 2014 03:53:23 PM JST
net_wm_state

* Tue 10 Jun 2014 03:53:24 PM JST

* Tue 10 Jun 2014 03:53:24 PM JST

* Tue 10 Jun 2014 03:53:24 PM JST
net_wm_pid

* Tue 10 Jun 2014 03:53:24 PM JST

* Tue 10 Jun 2014 03:53:24 PM JST

* Tue 10 Jun 2014 03:53:24 PM JST
net_wm_allowed_actions

* Tue 10 Jun 2014 03:53:25 PM JST

* Tue 10 Jun 2014 03:53:25 PM JST

* Tue 10 Jun 2014 03:53:25 PM JST
net_supported

* Tue 10 Jun 2014 03:53:25 PM JST

* Tue 10 Jun 2014 03:53:25 PM JST

* Tue 10 Jun 2014 03:53:25 PM JST
net_wm_icon

* Tue 10 Jun 2014 03:53:26 PM JST

* Tue 10 Jun 2014 03:53:26 PM JST

* Tue 10 Jun 2014 03:53:26 PM JST
net_wm_icon_geometry

* Tue 10 Jun 2014 03:53:26 PM JST

* Tue 10 Jun 2014 03:53:26 PM JST

* Tue 10 Jun 2014 03:53:26 PM JST
net_wm_user_time

* Tue 10 Jun 2014 03:53:27 PM JST

* Tue 10 Jun 2014 03:53:27 PM JST

* Tue 10 Jun 2014 03:53:27 PM JST
net_wm_user_time_window

* Tue 10 Jun 2014 03:53:27 PM JST

* Tue 10 Jun 2014 03:53:27 PM JST

* Tue 10 Jun 2014 03:53:27 PM JST
net_wm_window_type

* Tue 10 Jun 2014 03:53:29 PM JST

* Tue 10 Jun 2014 03:53:29 PM JST

* Tue 10 Jun 2014 03:53:29 PM JST
net_workarea

* Tue 10 Jun 2014 03:58:44 PM JST
user_time
user_window_time
desktop_names
win_client_list
active_window
current_desktop
desktop_viewport
desktop_geometry
supporting_wm_check
supported
workarea
workspace_count
number_of_desktop
desktop_layout
showing_desktop
wm_name
wm_icon_name
wm_class
wm_transient_for
wm_protocols
wm_colormap_windows
wm_client_machine
wm_normal_hints
wm_hints
wm_state
wm_icon_size
net_wm_name
net_wm_state
net_wm_pid
net_wm_allowed_actions
net_supported
net_wm_icon
net_wm_icon_geometry
net_wm_user_time
net_wm_user_time_window
net_wm_window_type
net_workarea

* Tue 10 Jun 2014 04:07:51 PM JST
get_user_time
client_list
client_list_stacking
get_desktop_names
get_win_client_list
get_active_window
get_current_desktop
get_desktop_viewport
get_desktop_geometry
get_supporting_wm_check
get_supported
get_workarea
get_workspace_count
get_number_of_desktop
get_desktop_layout
get_showing_desktop
* Tue 10 Jun 2014 04:07:54 PM JST
get_
* Tue 10 Jun 2014 04:07:59 PM JST
get_
* Tue 10 Jun 2014 04:07:59 PM JST
get_
* Tue 10 Jun 2014 04:07:59 PM JST
get_
* Tue 10 Jun 2014 04:07:59 PM JST
get_
* Tue 10 Jun 2014 04:07:59 PM JST
get_
* Tue 10 Jun 2014 04:07:59 PM JST
get_
* Tue 10 Jun 2014 04:07:59 PM JST
get_
* Tue 10 Jun 2014 04:07:59 PM JST
get_
* Tue 10 Jun 2014 04:07:59 PM JST
get_
* Tue 10 Jun 2014 04:07:59 PM JST
get_
* Tue 10 Jun 2014 04:07:59 PM JST
get_
* Tue 10 Jun 2014 04:07:59 PM JST
get_
* Tue 10 Jun 2014 04:07:59 PM JST
get_
* Tue 10 Jun 2014 04:08:04 PM JST
user_time
client_list
client_list_stacking
desktop_names
win_client_list
active_window
current_desktop
desktop_viewport
desktop_geometry
supporting_wm_check
supported
workarea
workspace_count
number_of_desktop
desktop_layout
showing_desktop
* Tue 10 Jun 2014 06:08:19 PM JST
return 
* Tue 10 Jun 2014 06:12:01 PM JST
owner_events, time, pointer_mode, keyboard_mode
* Tue 10 Jun 2014 06:15:19 PM JST
modifiers
* Tue 10 Jun 2014 06:15:19 PM JST
key, modifiers
* Tue 10 Jun 2014 06:16:27 PM JST
owner_events, modifiers, key,
                pointer_mode, keyboard_mode
* Tue 10 Jun 2014 06:16:38 PM JST
           
* Tue 10 Jun 2014 06:16:57 PM JST
owner_events, modifiers, key, pointer_mode,
                keyboard_mode
* Tue 10 Jun 2014 06:17:05 PM JST
            
* Tue 10 Jun 2014 06:20:15 PM JST
owner_events, event_mask, pointer_mode,
                   keyboard_mode, confine_to, cursor, button, modifiers
* Tue 10 Jun 2014 06:35:21 PM JST
StringIO
* Tue 10 Jun 2014 06:35:38 PM JST
'_NET_CLOSE_WINDOW'
* Tue 10 Jun 2014 06:38:18 PM JST
self
* Tue 10 Jun 2014 06:39:44 PM JST
sequence_number
* Tue 10 Jun 2014 06:40:58 PM JST
_pack
* Tue 10 Jun 2014 06:41:47 PM JST
_pack('B', EventCode.ClientMessage)
* Tue 10 Jun 2014 06:42:26 PM JST
from xcb2.xproto.ext.sendevent.eventcode import EventCode
* Tue 10 Jun 2014 06:44:58 PM JST

* Tue 10 Jun 2014 06:44:58 PM JST

* Tue 10 Jun 2014 06:44:58 PM JST
        buf.write('I', time)

* Tue 10 Jun 2014 06:44:58 PM JST
        buf.write('I', time)

* Tue 10 Jun 2014 06:44:58 PM JST
        buf.write('I', time)
        buf.write

* Tue 10 Jun 2014 06:45:00 PM JST

* Tue 10 Jun 2014 06:45:00 PM JST

* Tue 10 Jun 2014 06:45:01 PM JST
        buf.write

* Tue 10 Jun 2014 06:45:58 PM JST
0xffffff
* Tue 10 Jun 2014 06:48:45 PM JST
67108867
* Tue 10 Jun 2014 06:49:14 PM JST
window
* Tue 10 Jun 2014 06:49:37 PM JST
WindowHandler
* Tue 10 Jun 2014 06:50:33 PM JST
5
* Tue 10 Jun 2014 07:00:04 PM JST
        atom = self._window.connection.core.atomidentify('_NET_CLOSE_WINDOW')
        buf = StringIO()
        buf.write(_pack('B', EventCode.ClientMessage))
        buf.write(atom.getformat().pack())
        buf.write(_pack('H', sequence_number))
        buf.write(self.pack())
        buf.write(atom.pack())
        buf.write(_pack('5I', time, 0, 0, 0, 0))

* Tue 10 Jun 2014 07:00:14 PM JST
'WM_PROTOCOLS'
* Tue 10 Jun 2014 07:00:33 PM JST
'WM_DELETE_WINDOW'
* Tue 10 Jun 2014 07:01:01 PM JST
self._window.connection.core.atomidentify('WM_PROTOCOLS')
* Tue 10 Jun 2014 07:01:10 PM JST
'WM_DELETE_WINDOW'
* Tue 10 Jun 2014 07:01:24 PM JST
delatom
* Tue 10 Jun 2014 07:02:25 PM JST
0xffffff
* Tue 10 Jun 2014 07:02:31 PM JST
0xffffff, buf.getvalue()
* Wed 11 Jun 2014 06:18:49 AM JST
        atom = self._window.connection.core.atomidentify('WM_PROTOCOLS')
        delatom = self._window.connection.core.atomidentify('WM_DELETE_WINDOW')
        buf = StringIO()
        buf.write(_pack('B', EventCode.ClientMessage))
        buf.write(atom.getformat().pack())
        buf.write(_pack('H', sequence_number))
        buf.write(self.pack())
        buf.write(atom.pack())
        buf.write(_pack('5I', delatom, time, 0, 0, 0))
        return self._window.sendevent(propagate, 0xffffff, buf.getvalue())

* Wed 11 Jun 2014 06:19:02 AM JST
'_NET_WM_STATE'
* Wed 11 Jun 2014 06:19:37 AM JST
'_NET_WM_STATE_ABOVE'
* Wed 11 Jun 2014 06:19:53 AM JST
time
* Wed 11 Jun 2014 06:19:58 AM JST
delatom
* Wed 11 Jun 2014 06:21:10 AM JST
c.root.client_list().to_types().view()
* Wed 11 Jun 2014 06:21:33 AM JST
67108867
* Wed 11 Jun 2014 06:22:27 AM JST
import xcb2
c=xcb2.connect()

* Wed 11 Jun 2014 06:22:35 AM JST
from xobj.window.window import Window
* Wed 11 Jun 2014 06:22:43 AM JST
from xobj.window.windowhandler import WindowHandler
* Wed 11 Jun 2014 06:22:55 AM JST
WindowHandler(Window(c, 67108867))
* Wed 11 Jun 2014 06:23:07 AM JST
import xcb2
c=xcb2.connect()
from xobj.window.window import Window
from xobj.window.windowhandler import WindowHandler
WindowHandler(Window(c, 67108867))
* Wed 11 Jun 2014 06:23:14 AM JST
WindowHandler(Window(c, 67108867))
* Wed 11 Jun 2014 06:25:05 AM JST
WindowStateMode.Set
* Wed 11 Jun 2014 06:25:09 AM JST
WindowStateMode
* Wed 11 Jun 2014 06:25:16 AM JST
class WindowStateMode(_IntEnum):
    r"""SUMMARY
    """
    Unset  = 0
    Set    = 1
    Toggle = 2

* Wed 11 Jun 2014 06:25:32 AM JST
WindowStateMode.Set
* Wed 11 Jun 2014 06:29:20 AM JST
check()
* Wed 11 Jun 2014 06:29:36 AM JST
import xcb2
c=xcb2.connect()
from xobj.window.window import Window
from xobj.window.windowhandler import WindowHandler
WindowHandler(Window(c, 67108867))
* Wed 11 Jun 2014 06:30:40 AM JST
WindowHandler(Window(c, 67108867))
* Wed 11 Jun 2014 06:31:06 AM JST

* Wed 11 Jun 2014 06:31:06 AM JST

* Wed 11 Jun 2014 06:31:06 AM JST
        print(repr(buf.getvalue()))

* Wed 11 Jun 2014 06:31:40 AM JST
67108867
* Wed 11 Jun 2014 06:32:22 AM JST
        atom = self._window.connection.core.atomidentify('_NET_WM_STATE')
        satom = self._window.connection.core.atomidentify('_NET_WM_STATE_ABOVE')
        buf = StringIO()
        buf.write(_pack('B', EventCode.ClientMessage))
        buf.write(atom.getformat().pack())
        buf.write(_pack('H', sequence_number))
        buf.write(self.pack())
        buf.write(atom.pack())
        buf.write(_pack('5I', WindowStateMode.Set, satom, 0, 0, 0))
        return self._window.sendevent(propagate, 0xffffff, buf.getvalue())

* Wed 11 Jun 2014 06:32:46 AM JST
Set
* Wed 11 Jun 2014 06:37:37 AM JST
        atom = self._window.connection.core.atomidentify('_NET_WM_STATE')
        satom = self._window.connection.core.atomidentify('_NET_WM_STATE_ABOVE')
        buf = StringIO()
        buf.write(_pack('B', EventCode.ClientMessage))
        buf.write(atom.getformat().pack())
        buf.write(_pack('H', sequence_number))
        buf.write(self.pack())
        buf.write(atom.pack())
        buf.write(_pack('5I', WindowStateMode.Unset, satom, 0, 0, 0))
        return self._window.sendevent(propagate, 0xffffff, buf.getvalue())

* Wed 11 Jun 2014 06:37:55 AM JST
Unset
* Wed 11 Jun 2014 06:39:35 AM JST
        atom = self._window.connection.core.atomidentify('_NET_WM_STATE')
        satom = self._window.connection.core.atomidentify('_NET_WM_STATE_ABOVE')
        buf = StringIO()
        buf.write(_pack('B', EventCode.ClientMessage))
        buf.write(atom.getformat().pack())
        buf.write(_pack('H', sequence_number))
        buf.write(self.pack())
        buf.write(atom.pack())
        buf.write(_pack('5I', WindowStateMode.Set, satom, 0, 0, 0))
        return self._window.sendevent(propagate, 0xffffff, buf.getvalue())

* Wed 11 Jun 2014 06:39:57 AM JST
'_NET_WM_STATE_BELOW'
* Wed 11 Jun 2014 06:40:46 AM JST
        atom = self._window.connection.core.atomidentify('_NET_WM_STATE')
        satom = self._window.connection.core.atomidentify('_NET_WM_STATE_ABOVE')
        buf = StringIO()
        buf.write(_pack('B', EventCode.ClientMessage))
        buf.write(atom.getformat().pack())
        buf.write(_pack('H', sequence_number))
        buf.write(self.pack())
        buf.write(atom.pack())
        buf.write(_pack('5I', WindowStateMode.Unset, satom, 0, 0, 0))
        return self._window.sendevent(propagate, 0xffffff, buf.getvalue())

* Wed 11 Jun 2014 06:41:07 AM JST
'_NET_WM_STATE_BELOW'
* Wed 11 Jun 2014 06:41:29 AM JST
        atom = self._window.connection.core.atomidentify('_NET_WM_STATE')
        satom = self._window.connection.core.atomidentify('_NET_WM_STATE_ABOVE')
        buf = StringIO()
        buf.write(_pack('B', EventCode.ClientMessage))
        buf.write(atom.getformat().pack())
        buf.write(_pack('H', sequence_number))
        buf.write(self.pack())
        buf.write(atom.pack())
        buf.write(_pack('5I', WindowStateMode.Toggle, satom, 0, 0, 0))
        return self._window.sendevent(propagate, 0xffffff, buf.getvalue())

* Wed 11 Jun 2014 06:41:53 AM JST
'_NET_WM_STATE_BELOW'
* Wed 11 Jun 2014 06:44:23 AM JST
        atom = self._window.connection.core.atomidentify('_NET_WM_STATE')
        satom = self._window.connection.core.atomidentify('_NET_WM_STATE_ABOVE')
        buf = StringIO()
        buf.write(_pack('B', EventCode.ClientMessage))
        buf.write(atom.getformat().pack())
        buf.write(_pack('H', sequence_number))
        buf.write(self.pack())
        buf.write(atom.pack())
        buf.write(_pack('5I', WindowStateMode.Set, satom, 0, 0, 0))
        return self._window.sendevent(propagate, 0xffffff, buf.getvalue())

* Wed 11 Jun 2014 06:44:34 AM JST
'_NET_WM_STATE_FULLSCREEN'
* Wed 11 Jun 2014 06:45:39 AM JST
        atom = self._window.connection.core.atomidentify('_NET_WM_STATE')
        satom = self._window.connection.core.atomidentify('_NET_WM_STATE_BELOW')
        buf = StringIO()
        buf.write(_pack('B', EventCode.ClientMessage))
        buf.write(atom.getformat().pack())
        buf.write(_pack('H', sequence_number))
        buf.write(self.pack())
        buf.write(atom.pack())
        buf.write(_pack('5I', WindowStateMode.Unset, satom, 0, 0, 0))
        return self._window.sendevent(propagate, 0xffffff, buf.getvalue())

* Wed 11 Jun 2014 06:45:46 AM JST
'_NET_WM_STATE_FULLSCREEN'
* Wed 11 Jun 2014 06:46:33 AM JST
        atom = self._window.connection.core.atomidentify('_NET_WM_STATE')
        satom = self._window.connection.core.atomidentify('_NET_WM_STATE_BELOW')
        buf = StringIO()
        buf.write(_pack('B', EventCode.ClientMessage))
        buf.write(atom.getformat().pack())
        buf.write(_pack('H', sequence_number))
        buf.write(self.pack())
        buf.write(atom.pack())
        buf.write(_pack('5I', WindowStateMode.Toggle, satom, 0, 0, 0))
        return self._window.sendevent(propagate, 0xffffff, buf.getvalue())

* Wed 11 Jun 2014 06:46:53 AM JST
'_NET_WM_STATE_FULLSCREEN'
* Wed 11 Jun 2014 07:30:56 AM JST
'_NET_WM_ACTION_MINIMIZE'
* Wed 11 Jun 2014 07:31:25 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT',
* Wed 11 Jun 2014 07:31:28 AM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Wed 11 Jun 2014 07:31:49 AM JST
self._window.connection.core.atomidentify(
            '_NET_WM_STATE_MAXIMIZED_VERT')
* Wed 11 Jun 2014 07:31:55 AM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Wed 11 Jun 2014 07:32:04 AM JST
        satom = self._window.connection.core.atomidentify(
            '_NET_WM_STATE_MAXIMIZED_VERT')
        satom2 = self._window.connection.core.atomidentify(
            '_NET_WM_STATE_MAXIMIZED_HORZ')

* Wed 11 Jun 2014 07:32:21 AM JST
        satom = self._window.connection.core.atomidentify(
            '_NET_WM_STATE_MAXIMIZED_VERT')
        satom2 = self._window.connection.core.atomidentify(
            '_NET_WM_STATE_MAXIMIZED_VERT')

* Wed 11 Jun 2014 07:32:37 AM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Wed 11 Jun 2014 07:33:21 AM JST
        atom = self._window.connection.core.atomidentify('_NET_WM_STATE')
        satom = self._window.connection.core.atomidentify(
            '_NET_WM_STATE_MAXIMIZED_VERT')
        satom2 = self._window.connection.core.atomidentify(
            '_NET_WM_STATE_MAXIMIZED_HORZ')
        buf = StringIO()
        buf.write(_pack('B', EventCode.ClientMessage))
        buf.write(atom.getformat().pack())
        buf.write(_pack('H', sequence_number))
        buf.write(self.pack())
        buf.write(atom.pack())
        buf.write(_pack('5I', WindowStateMode.Set, satom, satom2, 0, 0))
        return self._window.sendevent(propagate, 0xffffff, buf.getvalue())

* Wed 11 Jun 2014 07:33:56 AM JST
        satom = self._window.connection.core.atomidentify(
            '_NET_WM_STATE_MAXIMIZED_VERT')
        satom2 = self._window.connection.core.atomidentify(
            '_NET_WM_STATE_MAXIMIZED_HORZ')

* Wed 11 Jun 2014 07:35:31 AM JST
'_NET_WM_STATE_SHADED'
* Wed 11 Jun 2014 07:38:44 AM JST
from xcb2.xproto import ConfigWindow, StackMode
* Wed 11 Jun 2014 07:40:57 AM JST
[StackMode.Above]
* Wed 11 Jun 2014 07:41:21 AM JST
        return self._window.configure(
            ConfigWindow.StackMode, [StackMode.Above])

* Wed 11 Jun 2014 07:41:24 AM JST
Above
* Wed 11 Jun 2014 07:50:43 AM JST
'_NET_WM_USER_TIME'
* Wed 11 Jun 2014 07:51:39 AM JST
atom, 
* Wed 11 Jun 2014 07:51:41 AM JST
self
* Wed 11 Jun 2014 07:53:28 AM JST
'_NET_WM_USER_TIME_WINDOW'
* Wed 11 Jun 2014 07:55:42 AM JST
        atom = self._window.connection.core.atomidentify('_NET_WM_USER_TIME')
        return self._window.getproperty(
            delete, atom, atom.gettypeatom(), 0, 0).get_full_value()

* Wed 11 Jun 2014 07:55:54 AM JST
.get_full_value()
* Wed 11 Jun 2014 07:55:54 AM JST
            
* Wed 11 Jun 2014 07:56:19 AM JST
'_NET_WM_USER_TIME'
* Wed 11 Jun 2014 07:56:31 AM JST
self._getproperty(delete, '_NET_WM_USER_TIME').get_full_value()
* Wed 11 Jun 2014 07:56:35 AM JST
'_NET_WM_USER_TIME_WINDOW'
* Wed 11 Jun 2014 07:57:35 AM JST
        return self._getproperty(
            delete, '_NET_WM_USER_TIME_WINDOW').get_full_value()


* Wed 11 Jun 2014 07:58:46 AM JST
'_NET_DESKTOP_NAMES'
* Wed 11 Jun 2014 07:59:21 AM JST
'_NET_CLIENT_LIST'
* Wed 11 Jun 2014 12:23:04 PM JST
'_NET_CLIENT_LIST_STACKING'
* Wed 11 Jun 2014 12:23:43 PM JST
'_NET_ACTIVE_WINDOW'
* Wed 11 Jun 2014 12:23:58 PM JST
'_NET_CURRENT_DESKTOP'
* Wed 11 Jun 2014 12:24:37 PM JST
'_NET_DESKTOP_VIEWPORT'
* Wed 11 Jun 2014 12:25:15 PM JST
'_NET_DESKTOP_GEOMETRY'
* Wed 11 Jun 2014 12:25:48 PM JST
'_NET_SUPPORTING_WM_CHECK'
* Wed 11 Jun 2014 12:40:07 PM JST
'_NET_SUPPORTED'
* Wed 11 Jun 2014 12:40:47 PM JST
'_NET_WORKAREA'
* Wed 11 Jun 2014 12:42:00 PM JST
'_WIN_WORKSPACE'
* Wed 11 Jun 2014 12:42:29 PM JST
'_NET_NUMBER_OF_DESKTOPS'
* Wed 11 Jun 2014 12:43:00 PM JST
'_NET_DESKTOP_LAYOUT'
* Wed 11 Jun 2014 12:43:58 PM JST
'_NET_SHOWING_DESKTOP'
* Wed 11 Jun 2014 12:45:31 PM JST
'WM_NAME'
* Wed 11 Jun 2014 12:52:51 PM JST
_window
* Wed 11 Jun 2014 12:53:58 PM JST
getatom
* Wed 11 Jun 2014 12:54:44 PM JST
'WM_NAME'
* Wed 11 Jun 2014 12:55:02 PM JST
    def _setproperty(self, atomname, mode, data_len, data):
        r"""SUMMARY

        _setproperty(atomname, mode, data_len, data)

        @Arguments:
        - `atomname`:
        - `mode`:
        - `data_len`:
        - `data`:

        @Return:
        """
        atom = self._window.connection.core.atomidentify(atomname)
        return self._window.changeproperty(
            mode, atom, atom.gettypeatom(), atom.getformat(), data_len, data)


* Wed 11 Jun 2014 12:55:36 PM JST
    def get_wm_name(self, delete):
        r"""SUMMARY

        get_wm_name(delete)

        @Arguments:
        - `delete`:

        @Return:
        """
        return self._getproperty(
            delete, 'WM_NAME').get_full_value()

    def set_wm_name(self, mode, data_len, data):
        r"""SUMMARY

        set_wm_name(mode, data_len, data)

        @Arguments:
        - `mode`:
        - `data_len`:
        - `data`:

        @Return:
        """
        return self._setproperty('WM_NAME', mode, data_len, data)

* Wed 11 Jun 2014 12:56:07 PM JST
WM_ICON_NAME
* Wed 11 Jun 2014 12:57:30 PM JST
lowercase
* Wed 11 Jun 2014 12:57:37 PM JST
")
* Wed 11 Jun 2014 12:58:22 PM JST
(string
* Wed 11 Jun 2014 12:58:23 PM JST
string
* Wed 11 Jun 2014 12:59:34 PM JST
${1:method$$(downcase text)}
* Wed 11 Jun 2014 12:59:58 PM JST
WM_ICON_NAME
* Wed 11 Jun 2014 01:00:29 PM JST
${1:method$$(downcase text)}
* Wed 11 Jun 2014 01:00:48 PM JST
down
* Wed 11 Jun 2014 01:00:53 PM JST
${1:method$$(upcase text)}
* Wed 11 Jun 2014 01:01:08 PM JST
$1
* Wed 11 Jun 2014 01:02:23 PM JST
WM_ICON_NAME
* Wed 11 Jun 2014 01:03:29 PM JST
WM_CLASS
* Wed 11 Jun 2014 01:03:50 PM JST

* Wed 11 Jun 2014 01:03:50 PM JST

* Wed 11 Jun 2014 01:03:50 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:03:52 PM JST

* Wed 11 Jun 2014 01:03:52 PM JST

* Wed 11 Jun 2014 01:03:52 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:03:52 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:03:52 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:03:52 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:03:52 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:04:30 PM JST
get_wm_transient_for
set_wm_transient_for
get_wm_protocols
set_wm_protocols
get_wm_colormap_windows
set_wm_colormap_windows
get_wm_client_machine
set_wm_client_machine
get_wm_normal_hints
set_wm_normal_hints
get_wm_hints
set_wm_hints
get_wm_state
set_wm_state
get_wm_icon_size
set_wm_icon_size
get_net_wm_name
set_net_wm_name
get_net_wm_state
set_net_wm_state
get_net_wm_pid
set_net_wm_pid
get_net_wm_allowed_actions
set_net_wm_allowed_actions
get_net_supported
set_net_supported
get_net_wm_icon
set_net_wm_icon
get_net_wm_icon_geometry
set_net_wm_icon_geometry
get_net_wm_user_time
set_net_wm_user_time
get_net_wm_user_time_window
set_net_wm_user_time_window
get_net_wm_window_type
set_net_wm_window_type
get_net_workarea
set_net_workarea
* Wed 11 Jun 2014 01:04:33 PM JST

* Wed 11 Jun 2014 01:04:33 PM JST

* Wed 11 Jun 2014 01:04:33 PM JST
set_wm_transient_for

* Wed 11 Jun 2014 01:04:33 PM JST

* Wed 11 Jun 2014 01:04:33 PM JST

* Wed 11 Jun 2014 01:04:33 PM JST
set_wm_protocols

* Wed 11 Jun 2014 01:04:34 PM JST

* Wed 11 Jun 2014 01:04:34 PM JST

* Wed 11 Jun 2014 01:04:34 PM JST
set_wm_colormap_windows

* Wed 11 Jun 2014 01:04:35 PM JST

* Wed 11 Jun 2014 01:04:35 PM JST

* Wed 11 Jun 2014 01:04:35 PM JST
set_wm_client_machine

* Wed 11 Jun 2014 01:04:35 PM JST

* Wed 11 Jun 2014 01:04:35 PM JST

* Wed 11 Jun 2014 01:04:35 PM JST
set_wm_normal_hints

* Wed 11 Jun 2014 01:04:35 PM JST

* Wed 11 Jun 2014 01:04:35 PM JST

* Wed 11 Jun 2014 01:04:35 PM JST
set_wm_hints

* Wed 11 Jun 2014 01:04:35 PM JST

* Wed 11 Jun 2014 01:04:35 PM JST

* Wed 11 Jun 2014 01:04:36 PM JST
set_wm_state

* Wed 11 Jun 2014 01:04:36 PM JST

* Wed 11 Jun 2014 01:04:36 PM JST

* Wed 11 Jun 2014 01:04:36 PM JST
set_wm_icon_size

* Wed 11 Jun 2014 01:04:36 PM JST

* Wed 11 Jun 2014 01:04:36 PM JST

* Wed 11 Jun 2014 01:04:36 PM JST
set_net_wm_name

* Wed 11 Jun 2014 01:04:36 PM JST

* Wed 11 Jun 2014 01:04:36 PM JST

* Wed 11 Jun 2014 01:04:37 PM JST
set_net_wm_state

* Wed 11 Jun 2014 01:04:37 PM JST

* Wed 11 Jun 2014 01:04:37 PM JST

* Wed 11 Jun 2014 01:04:37 PM JST
set_net_wm_pid

* Wed 11 Jun 2014 01:04:37 PM JST

* Wed 11 Jun 2014 01:04:37 PM JST

* Wed 11 Jun 2014 01:04:37 PM JST
set_net_wm_allowed_actions

* Wed 11 Jun 2014 01:04:37 PM JST

* Wed 11 Jun 2014 01:04:37 PM JST

* Wed 11 Jun 2014 01:04:37 PM JST
set_net_supported

* Wed 11 Jun 2014 01:04:37 PM JST

* Wed 11 Jun 2014 01:04:37 PM JST

* Wed 11 Jun 2014 01:04:37 PM JST
set_net_wm_icon

* Wed 11 Jun 2014 01:04:37 PM JST

* Wed 11 Jun 2014 01:04:37 PM JST

* Wed 11 Jun 2014 01:04:37 PM JST
set_net_wm_icon_geometry

* Wed 11 Jun 2014 01:04:38 PM JST

* Wed 11 Jun 2014 01:04:38 PM JST

* Wed 11 Jun 2014 01:04:38 PM JST
set_net_wm_user_time

* Wed 11 Jun 2014 01:04:38 PM JST

* Wed 11 Jun 2014 01:04:38 PM JST

* Wed 11 Jun 2014 01:04:38 PM JST
set_net_wm_user_time_window

* Wed 11 Jun 2014 01:04:38 PM JST

* Wed 11 Jun 2014 01:04:38 PM JST

* Wed 11 Jun 2014 01:04:38 PM JST
set_net_wm_window_type

* Wed 11 Jun 2014 01:04:39 PM JST

* Wed 11 Jun 2014 01:04:39 PM JST

* Wed 11 Jun 2014 01:04:39 PM JST
set_net_workarea
* Wed 11 Jun 2014 01:04:44 PM JST
WM_TRANSIENT_FOR
* Wed 11 Jun 2014 01:04:49 PM JST
WM_PROTOCOLS
* Wed 11 Jun 2014 01:04:55 PM JST
WM_COLORMAP_WINDOWS
* Wed 11 Jun 2014 01:05:02 PM JST
WM_CLIENT_MACHINE
* Wed 11 Jun 2014 01:05:09 PM JST
WM_NORMAL_HINTS
* Wed 11 Jun 2014 01:05:27 PM JST
WM_HINTS
* Wed 11 Jun 2014 01:05:38 PM JST
WM_STATE
* Wed 11 Jun 2014 01:06:15 PM JST
_NET_WM_NAME
* Wed 11 Jun 2014 01:06:29 PM JST
_NET_WM_STATE
* Wed 11 Jun 2014 01:06:39 PM JST
_NET_WM_PID
* Wed 11 Jun 2014 01:07:00 PM JST
_NET_WM_ALLOWED_ACTIONS
* Wed 11 Jun 2014 01:07:17 PM JST
_NET_SUPPORTED
* Wed 11 Jun 2014 01:07:30 PM JST
_NET_WM_ICON
* Wed 11 Jun 2014 01:07:41 PM JST
_NET_WM_ICON_GEOMETRY
* Wed 11 Jun 2014 01:07:48 PM JST
_NET_WM_USER_TIME
* Wed 11 Jun 2014 01:07:53 PM JST
_NET_WM_USER_TIME_WINDOW
* Wed 11 Jun 2014 01:08:05 PM JST
_NET_WM_WINDOW_TYPE
* Wed 11 Jun 2014 01:08:15 PM JST
_NET_WORKAREA
* Wed 11 Jun 2014 01:08:34 PM JST
WM_TRANSIENT_FOR
* Wed 11 Jun 2014 01:08:46 PM JST

* Wed 11 Jun 2014 01:08:46 PM JST

* Wed 11 Jun 2014 01:08:46 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:08:51 PM JST

* Wed 11 Jun 2014 01:08:51 PM JST

* Wed 11 Jun 2014 01:08:51 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:08:51 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:08:51 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:08:51 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:08:52 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:00 PM JST
WM
* Wed 11 Jun 2014 01:09:01 PM JST
WM_PROTOCOLS
* Wed 11 Jun 2014 01:09:09 PM JST

* Wed 11 Jun 2014 01:09:09 PM JST

* Wed 11 Jun 2014 01:09:09 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:11 PM JST

* Wed 11 Jun 2014 01:09:11 PM JST

* Wed 11 Jun 2014 01:09:11 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:11 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:11 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:11 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:11 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:17 PM JST
WM
* Wed 11 Jun 2014 01:09:18 PM JST
WM_COLORMAP_WINDOWS
* Wed 11 Jun 2014 01:09:27 PM JST

* Wed 11 Jun 2014 01:09:27 PM JST

* Wed 11 Jun 2014 01:09:27 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:33 PM JST

* Wed 11 Jun 2014 01:09:33 PM JST

* Wed 11 Jun 2014 01:09:33 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:33 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:33 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:33 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:33 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:37 PM JST
WM
* Wed 11 Jun 2014 01:09:38 PM JST
WM_CLIENT_MACHINE
* Wed 11 Jun 2014 01:09:47 PM JST
        get_wm_client_machine(delete)
* Wed 11 Jun 2014 01:09:49 PM JST

* Wed 11 Jun 2014 01:09:49 PM JST

* Wed 11 Jun 2014 01:09:49 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:54 PM JST

* Wed 11 Jun 2014 01:09:54 PM JST

* Wed 11 Jun 2014 01:09:54 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:55 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:55 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:55 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:09:55 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:10:08 PM JST
WM
* Wed 11 Jun 2014 01:10:09 PM JST
WM_NORMAL_HINTS
* Wed 11 Jun 2014 01:10:16 PM JST

* Wed 11 Jun 2014 01:10:16 PM JST

* Wed 11 Jun 2014 01:10:16 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:10:23 PM JST

* Wed 11 Jun 2014 01:10:23 PM JST

* Wed 11 Jun 2014 01:10:23 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:10:23 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:10:23 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:10:23 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:10:23 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:10:40 PM JST
WM_HINTS
* Wed 11 Jun 2014 01:10:59 PM JST

* Wed 11 Jun 2014 01:10:59 PM JST

* Wed 11 Jun 2014 01:10:59 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:11:09 PM JST

* Wed 11 Jun 2014 01:11:09 PM JST

* Wed 11 Jun 2014 01:11:09 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:11:09 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:11:09 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:11:10 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:11:10 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:11:23 PM JST
WM_STATE
* Wed 11 Jun 2014 01:11:25 PM JST

* Wed 11 Jun 2014 01:11:25 PM JST

* Wed 11 Jun 2014 01:11:25 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:11:25 PM JST

* Wed 11 Jun 2014 01:11:25 PM JST

* Wed 11 Jun 2014 01:11:25 PM JST
        @Arguments:

* Wed 11 Jun 2014 01:11:25 PM JST
        @Arguments:

* Wed 11 Jun 2014 01:11:26 PM JST
        @Arguments:
        - `delete`:

* Wed 11 Jun 2014 01:12:38 PM JST
_NET_WM_NAME
* Wed 11 Jun 2014 01:12:40 PM JST

* Wed 11 Jun 2014 01:12:40 PM JST

* Wed 11 Jun 2014 01:12:40 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:12:40 PM JST

* Wed 11 Jun 2014 01:12:40 PM JST

* Wed 11 Jun 2014 01:12:40 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:12:40 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:12:40 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:12:40 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:12:40 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:12:47 PM JST
_NET_WM_STATE
* Wed 11 Jun 2014 01:12:49 PM JST

* Wed 11 Jun 2014 01:12:49 PM JST

* Wed 11 Jun 2014 01:12:49 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:12:49 PM JST

* Wed 11 Jun 2014 01:12:49 PM JST

* Wed 11 Jun 2014 01:12:49 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:12:50 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:12:50 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:12:50 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:12:50 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:12:53 PM JST
_NET_WM_PID
* Wed 11 Jun 2014 01:13:32 PM JST

* Wed 11 Jun 2014 01:13:32 PM JST

* Wed 11 Jun 2014 01:13:32 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:13:32 PM JST

* Wed 11 Jun 2014 01:13:32 PM JST

* Wed 11 Jun 2014 01:13:32 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:13:32 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:13:33 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:13:33 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:13:33 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:13:50 PM JST
_NET_WM_ALLOWED_ACTIONS
* Wed 11 Jun 2014 01:13:52 PM JST

* Wed 11 Jun 2014 01:13:52 PM JST

* Wed 11 Jun 2014 01:13:52 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:13:52 PM JST

* Wed 11 Jun 2014 01:13:52 PM JST

* Wed 11 Jun 2014 01:13:52 PM JST
    def get_net_wm_state(self, delete):

* Wed 11 Jun 2014 01:13:52 PM JST
    def get_net_wm_state(self, delete):

* Wed 11 Jun 2014 01:13:52 PM JST
    def get_net_wm_state(self, delete):
        r"""SUMMARY

* Wed 11 Jun 2014 01:14:13 PM JST

* Wed 11 Jun 2014 01:14:13 PM JST

* Wed 11 Jun 2014 01:14:13 PM JST
        r"""SUMMARY

* Wed 11 Jun 2014 01:14:13 PM JST

* Wed 11 Jun 2014 01:14:13 PM JST

* Wed 11 Jun 2014 01:14:13 PM JST
# End:

* Wed 11 Jun 2014 01:14:13 PM JST
# End:

* Wed 11 Jun 2014 01:14:13 PM JST
# End:
# windowhandler.py ends here

* Wed 11 Jun 2014 01:14:30 PM JST
_NET_WM_ALLOWED_ACTIONS
* Wed 11 Jun 2014 01:14:34 PM JST

* Wed 11 Jun 2014 01:14:34 PM JST

* Wed 11 Jun 2014 01:14:34 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:14:34 PM JST

* Wed 11 Jun 2014 01:14:34 PM JST

* Wed 11 Jun 2014 01:14:34 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:14:34 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:14:34 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:14:34 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:14:34 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:14:54 PM JST
_NET_WM_ALLOWED_ACTIONS
* Wed 11 Jun 2014 01:14:55 PM JST
_NET_SUPPORTED
* Wed 11 Jun 2014 01:14:57 PM JST

* Wed 11 Jun 2014 01:14:57 PM JST

* Wed 11 Jun 2014 01:14:57 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:14:57 PM JST

* Wed 11 Jun 2014 01:14:57 PM JST

* Wed 11 Jun 2014 01:14:57 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:14:57 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:14:57 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:14:57 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:14:57 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:15:16 PM JST
_NET_WM_ICON
* Wed 11 Jun 2014 01:15:44 PM JST

* Wed 11 Jun 2014 01:15:44 PM JST

* Wed 11 Jun 2014 01:15:45 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:15:45 PM JST

* Wed 11 Jun 2014 01:15:45 PM JST

* Wed 11 Jun 2014 01:15:45 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:15:45 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:15:45 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:15:45 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:15:45 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:15:59 PM JST
_NET_WM_ICON_GEOMETRY
* Wed 11 Jun 2014 01:16:00 PM JST

* Wed 11 Jun 2014 01:16:00 PM JST

* Wed 11 Jun 2014 01:16:00 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:16:00 PM JST

* Wed 11 Jun 2014 01:16:00 PM JST

* Wed 11 Jun 2014 01:16:00 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:16:00 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:16:00 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:16:00 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:16:00 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:16:18 PM JST
_NET_WM_USER_TIME
* Wed 11 Jun 2014 01:16:21 PM JST

* Wed 11 Jun 2014 01:16:21 PM JST

* Wed 11 Jun 2014 01:16:21 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:16:21 PM JST

* Wed 11 Jun 2014 01:16:21 PM JST

* Wed 11 Jun 2014 01:16:21 PM JST
        r"""SUMMARY

* Wed 11 Jun 2014 01:16:21 PM JST

* Wed 11 Jun 2014 01:16:21 PM JST

* Wed 11 Jun 2014 01:16:22 PM JST
        get_net_wm_icon(delete)

* Wed 11 Jun 2014 01:16:43 PM JST
_NET_WM_USER_TIME
* Wed 11 Jun 2014 01:16:45 PM JST

* Wed 11 Jun 2014 01:16:45 PM JST

* Wed 11 Jun 2014 01:16:45 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:16:45 PM JST

* Wed 11 Jun 2014 01:16:45 PM JST

* Wed 11 Jun 2014 01:16:45 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:16:45 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:16:45 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:16:45 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:16:45 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:17:16 PM JST
_NET_WM_WINDOW_TYPE
* Wed 11 Jun 2014 01:17:18 PM JST

* Wed 11 Jun 2014 01:17:18 PM JST

* Wed 11 Jun 2014 01:17:18 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:17:18 PM JST

* Wed 11 Jun 2014 01:17:18 PM JST

* Wed 11 Jun 2014 01:17:18 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:17:18 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:17:18 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:17:19 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:17:19 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:17:35 PM JST
_NET_WORKAREA
* Wed 11 Jun 2014 01:17:37 PM JST

* Wed 11 Jun 2014 01:17:37 PM JST

* Wed 11 Jun 2014 01:17:37 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:17:37 PM JST

* Wed 11 Jun 2014 01:17:37 PM JST

* Wed 11 Jun 2014 01:17:37 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:17:37 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:17:37 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:17:37 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:17:37 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 11 Jun 2014 01:39:05 PM JST
simple_teswindow
* Wed 11 Jun 2014 01:39:40 PM JST
69206016
* Wed 11 Jun 2014 01:41:29 PM JST
.get_full_value
* Wed 11 Jun 2014 01:51:10 PM JST
bytes_after
* Wed 11 Jun 2014 01:51:32 PM JST
reply()
* Wed 11 Jun 2014 01:51:56 PM JST
value
* Wed 11 Jun 2014 01:51:57 PM JST
get_bytes_after().value
* Wed 11 Jun 2014 01:55:32 PM JST
False)
* Wed 11 Jun 2014 01:55:32 PM JST
get_wm_name(False)
* Wed 11 Jun 2014 01:57:06 PM JST
69206016
* Wed 11 Jun 2014 01:57:18 PM JST
wh=WindowHandler(Window(c, 69206016))
* Wed 11 Jun 2014 01:57:28 PM JST
69206016
* Wed 11 Jun 2014 01:59:49 PM JST
get_properties
* Wed 11 Jun 2014 02:01:22 PM JST
atoms
* Wed 11 Jun 2014 02:01:22 PM JST
reply().atoms
* Wed 11 Jun 2014 02:03:02 PM JST
D wh.listproperties().reply()
* Wed 11 Jun 2014 02:04:16 PM JST
67108867
* Wed 11 Jun 2014 02:04:31 PM JST
wh=WInd
* Wed 11 Jun 2014 02:04:50 PM JST
67108867
* Wed 11 Jun 2014 02:05:01 PM JST
get
* Wed 11 Jun 2014 02:05:13 PM JST
_NET_WM_USER_TIME_WINDOW
* Wed 11 Jun 2014 02:05:39 PM JST
bytes_after
* Wed 11 Jun 2014 02:08:44 PM JST
'WM_CLASS'
* Wed 11 Jun 2014 02:09:18 PM JST
bytes_after
* Wed 11 Jun 2014 02:11:22 PM JST
'_NET_WM_ICON_GEOMETRY'
* Wed 11 Jun 2014 02:11:50 PM JST
bytes_after
* Wed 11 Jun 2014 02:13:16 PM JST
_NET_FRAME_EXTENTS
* Wed 11 Jun 2014 02:13:21 PM JST
'_NET_FRAME_EXTENTS'
* Wed 11 Jun 2014 02:13:25 PM JST
[AtomPair(name='_WIN_LAYER', atom=399),
 AtomPair(name='_NET_WM_ICON_GEOMETRY', atom=379),
 AtomPair(name='_NET_FRAME_EXTENTS', atom=287),
 AtomPair(name='_NET_WM_ALLOWED_ACTIONS', atom=376),
 AtomPair(name='WM_STATE', atom=407),
 AtomPair(name='_NET_WM_DESKTOP', atom=290),
 AtomPair(name='_WIN_WORKSPACE', atom=403),
 AtomPair(name='_WIN_STATE', atom=401),
 AtomPair(name='_NET_WM_STATE', atom=296),
 AtomPair(name='WM_HINTS', atom=35),
 AtomPair(name='XdndAware', atom=422),
 AtomPair(name='_MOTIF_DRAG_RECEIVER_INFO', atom=424),
 AtomPair(name='_NET_WM_ICON', atom=291),
 AtomPair(name='_NET_WM_SYNC_REQUEST_COUNTER', atom=307),
 AtomPair(name='_NET_WM_WINDOW_TYPE', atom=308),
 AtomPair(name='_NET_WM_USER_TIME_WINDOW', atom=323),
 AtomPair(name='WM_CLIENT_LEADER', atom=279),
 AtomPair(name='_NET_WM_PID', atom=294),
 AtomPair(name='WM_LOCALE_NAME', atom=281),
 AtomPair(name='WM_CLIENT_MACHINE', atom=36),
 AtomPair(name='WM_NORMAL_HINTS', atom=40),
 AtomPair(name='WM_PROTOCOLS', atom=282),
 AtomPair(name='WM_CLASS', atom=67),
 AtomPair(name='WM_ICON_NAME', atom=37),
 AtomPair(name='_NET_WM_ICON_NAME', atom=292),
 AtomPair(name='WM_NAME', atom=39),
 AtomPair(name='_NET_WM_NAME', atom=293)]

* Wed 11 Jun 2014 02:13:53 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:54 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:54 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:54 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:55 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:56 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:56 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:56 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:56 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:13:56 PM JST
AtomPair(name=
* Wed 11 Jun 2014 02:14:00 PM JST
293)
* Wed 11 Jun 2014 02:14:01 PM JST
39),
* Wed 11 Jun 2014 02:14:01 PM JST
292),
* Wed 11 Jun 2014 02:14:01 PM JST
37),
* Wed 11 Jun 2014 02:14:01 PM JST
67),
* Wed 11 Jun 2014 02:14:01 PM JST
282),
* Wed 11 Jun 2014 02:14:01 PM JST
40),
* Wed 11 Jun 2014 02:14:01 PM JST
36),
* Wed 11 Jun 2014 02:14:01 PM JST
281),
* Wed 11 Jun 2014 02:14:01 PM JST
294),
* Wed 11 Jun 2014 02:14:01 PM JST
279),
* Wed 11 Jun 2014 02:14:01 PM JST
323),
* Wed 11 Jun 2014 02:14:01 PM JST
308),
* Wed 11 Jun 2014 02:14:01 PM JST
307),
* Wed 11 Jun 2014 02:14:01 PM JST
291),
* Wed 11 Jun 2014 02:14:01 PM JST
424),
* Wed 11 Jun 2014 02:14:01 PM JST
422),
* Wed 11 Jun 2014 02:14:02 PM JST
35),
* Wed 11 Jun 2014 02:14:02 PM JST
296),
* Wed 11 Jun 2014 02:14:02 PM JST
401),
* Wed 11 Jun 2014 02:14:02 PM JST
403),
* Wed 11 Jun 2014 02:14:02 PM JST
290),
* Wed 11 Jun 2014 02:14:02 PM JST
407),
* Wed 11 Jun 2014 02:14:02 PM JST
376),
* Wed 11 Jun 2014 02:14:02 PM JST
287),
* Wed 11 Jun 2014 02:14:02 PM JST
379),
* Wed 11 Jun 2014 02:14:02 PM JST
399),
* Wed 11 Jun 2014 02:14:03 PM JST
atom=293)
* Wed 11 Jun 2014 02:14:04 PM JST
atom=39),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=292),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=37),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=67),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=282),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=40),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=36),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=281),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=294),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=279),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=323),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=308),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=307),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=291),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=424),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=422),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=35),
* Wed 11 Jun 2014 02:14:04 PM JST
atom=296),
* Wed 11 Jun 2014 02:14:05 PM JST
atom=401),
* Wed 11 Jun 2014 02:14:05 PM JST
atom=403),
* Wed 11 Jun 2014 02:14:05 PM JST
atom=290),
* Wed 11 Jun 2014 02:14:05 PM JST
atom=407),
* Wed 11 Jun 2014 02:14:05 PM JST
atom=376),
* Wed 11 Jun 2014 02:14:05 PM JST
atom=287),
* Wed 11 Jun 2014 02:14:05 PM JST
atom=379),
* Wed 11 Jun 2014 02:14:05 PM JST
atom=399),
* Wed 11 Jun 2014 02:14:44 PM JST
'_WIN_LAYER',
'_NET_WM_ICON_GEOMETRY',
'_NET_FRAME_EXTENTS',
'_NET_WM_ALLOWED_ACTIONS',
'WM_STATE',
'_NET_WM_DESKTOP',
'_WIN_WORKSPACE',
'_WIN_STATE',
'_NET_WM_STATE',
'WM_HINTS',
'XdndAware',
'_MOTIF_DRAG_RECEIVER_INFO',
'_NET_WM_ICON',
'_NET_WM_SYNC_REQUEST_COUNTER',
'_NET_WM_WINDOW_TYPE',
'_NET_WM_USER_TIME_WINDOW',
'WM_CLIENT_LEADER',
'_NET_WM_PID',
'WM_LOCALE_NAME',
'WM_CLIENT_MACHINE',
'WM_NORMAL_HINTS',
'WM_PROTOCOLS',
'WM_CLASS',
'WM_ICON_NAME',
'_NET_WM_ICON_NAME',
'WM_NAME',
'_NET_WM_NAME',

* Wed 11 Jun 2014 02:19:10 PM JST
10
* Wed 11 Jun 2014 02:19:56 PM JST
, long_length
* Wed 11 Jun 2014 02:32:25 PM JST
            
* Wed 11 Jun 2014 02:32:26 PM JST
            
* Wed 11 Jun 2014 02:32:30 PM JST
            
* Wed 11 Jun 2014 02:32:30 PM JST
            
* Wed 11 Jun 2014 02:32:33 PM JST
            
* Wed 11 Jun 2014 02:32:36 PM JST
            
* Wed 11 Jun 2014 02:32:38 PM JST
            
* Wed 11 Jun 2014 02:32:43 PM JST
            
* Wed 11 Jun 2014 02:32:44 PM JST
            
* Wed 11 Jun 2014 02:32:50 PM JST
            
* Wed 11 Jun 2014 02:32:53 PM JST
            
* Wed 11 Jun 2014 02:32:55 PM JST
            
* Wed 11 Jun 2014 02:33:00 PM JST
            
* Wed 11 Jun 2014 02:33:04 PM JST
            
* Wed 11 Jun 2014 02:33:10 PM JST
            
* Wed 11 Jun 2014 02:33:15 PM JST
            
* Wed 11 Jun 2014 02:33:16 PM JST
            
* Wed 11 Jun 2014 02:33:20 PM JST
            
* Wed 11 Jun 2014 02:33:22 PM JST
            
* Wed 11 Jun 2014 02:33:30 PM JST
            
* Wed 11 Jun 2014 02:33:33 PM JST
            
* Wed 11 Jun 2014 02:33:38 PM JST
            
* Wed 11 Jun 2014 02:33:40 PM JST
            
* Wed 11 Jun 2014 02:33:41 PM JST
            
* Wed 11 Jun 2014 02:33:44 PM JST
            
* Wed 11 Jun 2014 02:33:46 PM JST
            
* Wed 11 Jun 2014 02:33:48 PM JST
            
* Wed 11 Jun 2014 02:33:49 PM JST
            
* Wed 11 Jun 2014 02:33:53 PM JST
            
* Wed 11 Jun 2014 02:33:55 PM JST
            
* Wed 11 Jun 2014 02:34:02 PM JST
            
* Wed 11 Jun 2014 02:34:03 PM JST
            
* Wed 11 Jun 2014 02:34:08 PM JST
            
* Wed 11 Jun 2014 02:34:08 PM JST
            
* Wed 11 Jun 2014 02:34:10 PM JST
            
* Wed 11 Jun 2014 02:34:11 PM JST
            
* Wed 11 Jun 2014 02:34:15 PM JST
            
* Wed 11 Jun 2014 02:34:16 PM JST
            
* Wed 11 Jun 2014 02:34:18 PM JST
            
* Wed 11 Jun 2014 02:35:09 PM JST
            
* Wed 11 Jun 2014 02:35:09 PM JST
            
* Wed 11 Jun 2014 02:35:17 PM JST
            
* Wed 11 Jun 2014 02:35:19 PM JST
            
* Wed 11 Jun 2014 02:35:21 PM JST
            
* Wed 11 Jun 2014 02:35:22 PM JST
            
* Wed 11 Jun 2014 02:35:27 PM JST
            
* Wed 11 Jun 2014 02:37:39 PM JST
, long_offset
* Wed 11 Jun 2014 02:41:15 PM JST
- [yas] elisp error!:
* Wed 11 Jun 2014 02:41:20 PM JST
        - [yas] elisp error!:

* Wed 11 Jun 2014 03:18:54 PM JST
not
* Wed 11 Jun 2014 03:18:58 PM JST

* Wed 11 Jun 2014 03:18:58 PM JST

* Wed 11 Jun 2014 03:18:58 PM JST
            raise TypeError()

* Wed 11 Jun 2014 03:21:07 PM JST
84]: 
* Wed 11 Jun 2014 03:21:28 PM JST
get_net_wm_window_type
* Wed 11 Jun 2014 03:26:23 PM JST
xproto
* Wed 11 Jun 2014 03:31:34 PM JST
_window.
* Wed 11 Jun 2014 03:31:37 PM JST
_window
* Wed 11 Jun 2014 03:31:40 PM JST
_window
* Wed 11 Jun 2014 03:31:43 PM JST
_windo
* Wed 11 Jun 2014 03:32:15 PM JST
    def pack(self, ):
        r"""SUMMARY
        
        pack()
        
        @Return:
        """
        return self._window.pack()


* Wed 11 Jun 2014 03:32:16 PM JST

* Wed 11 Jun 2014 03:32:16 PM JST

* Wed 11 Jun 2014 03:32:16 PM JST
        return self._window.flush()

* Wed 11 Jun 2014 03:32:20 PM JST

    def flush(self, ):
        r"""SUMMARY
        
        flush()
        
        @Return:
        """
        return self._window.flush()

    def pack(self, ):
        r"""SUMMARY
        
        pack()
        
        @Return:
        """
        return self._window.pack()


* Wed 11 Jun 2014 03:33:38 PM JST
owner_events, time, pointer_mode, keyboard_mode
* Wed 11 Jun 2014 03:34:22 PM JST
            
* Wed 11 Jun 2014 03:34:38 PM JST
owner_events, modifiers, key, pointer_mode,
                keyboard_mode
* Wed 11 Jun 2014 03:34:44 PM JST
                
* Wed 11 Jun 2014 03:35:09 PM JST
owner_events, modifiers, key,
                pointer_mode, keyboard_mode
* Wed 11 Jun 2014 03:35:28 PM JST
key, modifiers
* Wed 11 Jun 2014 04:27:50 PM JST
from cStringIO import StringIO as _StringIO
from array import array as _array
from struct import pack as _pack
from xcb import xcb

from xcb2.xproto.event import *
from xcb2.xproto.error import *
from xcb2.xproto.define import *
from xcb2.xproto.cookie import *
from xcb2.xproto.reply import *

# and import at end


class xprotoExtension(xcb.Extension):

    def CreateWindowChecked(self, depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, True),
                                 xcb.VoidCookie())

    def CreateWindow(self, depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, False),
                                 xcb.VoidCookie())

    def ChangeWindowAttributesChecked(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, True),
                                 xcb.VoidCookie())

    def ChangeWindowAttributes(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, False),
                                 xcb.VoidCookie())

    def GetWindowAttributes(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, True),
                                 GetWindowAttributesCookie(),
                                 GetWindowAttributesReply)

    def GetWindowAttributesUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, False),
                                 GetWindowAttributesCookie(),
                                 GetWindowAttributesReply)

    def DestroyWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, True),
                                 xcb.VoidCookie())

    def DestroyWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, False),
                                 xcb.VoidCookie())

    def DestroySubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, True),
                                 xcb.VoidCookie())

    def DestroySubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, False),
                                 xcb.VoidCookie())

    def ChangeSaveSetChecked(self, mode, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, True),
                                 xcb.VoidCookie())

    def ChangeSaveSet(self, mode, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, False),
                                 xcb.VoidCookie())

    def ReparentWindowChecked(self, window, parent, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, True),
                                 xcb.VoidCookie())

    def ReparentWindow(self, window, parent, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, False),
                                 xcb.VoidCookie())

    def MapWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, True),
                                 xcb.VoidCookie())

    def MapWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, False),
                                 xcb.VoidCookie())

    def MapSubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, True),
                                 xcb.VoidCookie())

    def MapSubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, False),
                                 xcb.VoidCookie())

    def UnmapWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, True),
                                 xcb.VoidCookie())

    def UnmapWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, False),
                                 xcb.VoidCookie())

    def UnmapSubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, True),
                                 xcb.VoidCookie())

    def UnmapSubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, False),
                                 xcb.VoidCookie())

    def ConfigureWindowChecked(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, True),
                                 xcb.VoidCookie())

    def ConfigureWindow(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, False),
                                 xcb.VoidCookie())

    def CirculateWindowChecked(self, direction, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, True),
                                 xcb.VoidCookie())

    def CirculateWindow(self, direction, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, False),
                                 xcb.VoidCookie())

    def GetGeometry(self, drawable):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, True),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def GetGeometryUnchecked(self, drawable):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, False),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def QueryTree(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, True),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def QueryTreeUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, False),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def InternAtom(self, only_if_exists, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, True),
                                 InternAtomCookie(),
                                 InternAtomReply)

    def InternAtomUnchecked(self, only_if_exists, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, False),
                                 InternAtomCookie(),
                                 InternAtomReply)

    def GetAtomName(self, atom):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, True),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)

    def GetAtomNameUnchecked(self, atom):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, False),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)

    def ChangePropertyChecked(self, mode, window, property, type, format, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, True),
                                 xcb.VoidCookie())

    def ChangeProperty(self, mode, window, property, type, format, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, False),
                                 xcb.VoidCookie())

    def DeletePropertyChecked(self, window, property):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, True),
                                 xcb.VoidCookie())

    def DeleteProperty(self, window, property):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, False),
                                 xcb.VoidCookie())

    def GetProperty(self, delete, window, property, type, long_offset, long_length):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, True),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def GetPropertyUnchecked(self, delete, window, property, type, long_offset, long_length):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, False),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def ListProperties(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, True),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def ListPropertiesUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, False),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def SetSelectionOwnerChecked(self, owner, selection, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, True),
                                 xcb.VoidCookie())

    def SetSelectionOwner(self, owner, selection, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, False),
                                 xcb.VoidCookie())

    def GetSelectionOwner(self, selection):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, True),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def GetSelectionOwnerUnchecked(self, selection):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, False),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def ConvertSelectionChecked(self, requestor, selection, target, property, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, True),
                                 xcb.VoidCookie())

    def ConvertSelection(self, requestor, selection, target, property, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, False),
                                 xcb.VoidCookie())

    def SendEventChecked(self, propagate, destination, event_mask, event):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(_array('b', event))))
        print(repr(buf.getvalue()))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, True),
                                 xcb.VoidCookie())

    def SendEvent(self, propagate, destination, event_mask, event):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(_array('b', event))))
        print(repr(buf.getvalue()))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, False),
                                 xcb.VoidCookie())

    def GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, True),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def GrabPointerUnchecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, False),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def UngrabPointerChecked(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, True),
                                 xcb.VoidCookie())

    def UngrabPointer(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, False),
                                 xcb.VoidCookie())

    def GrabButtonChecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, True),
                                 xcb.VoidCookie())

    def GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, False),
                                 xcb.VoidCookie())

    def UngrabButtonChecked(self, button, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, True),
                                 xcb.VoidCookie())

    def UngrabButton(self, button, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, False),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrabChecked(self, cursor, time, event_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, True),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrab(self, cursor, time, event_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, False),
                                 xcb.VoidCookie())

    def GrabKeyboard(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, True),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def GrabKeyboardUnchecked(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, False),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def UngrabKeyboardChecked(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, True),
                                 xcb.VoidCookie())

    def UngrabKeyboard(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, False),
                                 xcb.VoidCookie())

    def GrabKeyChecked(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, True),
                                 xcb.VoidCookie())

    def GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, False),
                                 xcb.VoidCookie())

    def UngrabKeyChecked(self, key, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, True),
                                 xcb.VoidCookie())

    def UngrabKey(self, key, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, False),
                                 xcb.VoidCookie())

    def AllowEventsChecked(self, mode, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, True),
                                 xcb.VoidCookie())

    def AllowEvents(self, mode, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, False),
                                 xcb.VoidCookie())

    def GrabServerChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, True),
                                 xcb.VoidCookie())

    def GrabServer(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, False),
                                 xcb.VoidCookie())

    def UngrabServerChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, True),
                                 xcb.VoidCookie())

    def UngrabServer(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, False),
                                 xcb.VoidCookie())

    def QueryPointer(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, True),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def QueryPointerUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, False),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def GetMotionEvents(self, window, start, stop):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, True),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def GetMotionEventsUnchecked(self, window, start, stop):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, False),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def TranslateCoordinates(self, src_window, dst_window, src_x, src_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, True),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def TranslateCoordinatesUnchecked(self, src_window, dst_window, src_x, src_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, False),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def WarpPointerChecked(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, True),
                                 xcb.VoidCookie())

    def WarpPointer(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, False),
                                 xcb.VoidCookie())

    def SetInputFocusChecked(self, revert_to, focus, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, True),
                                 xcb.VoidCookie())

    def SetInputFocus(self, revert_to, focus, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, False),
                                 xcb.VoidCookie())

    def GetInputFocus(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, True),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def GetInputFocusUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, False),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def QueryKeymap(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, True),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def QueryKeymapUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, False),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def OpenFontChecked(self, fid, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, True),
                                 xcb.VoidCookie())

    def OpenFont(self, fid, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, False),
                                 xcb.VoidCookie())

    def CloseFontChecked(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, True),
                                 xcb.VoidCookie())

    def CloseFont(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, False),
                                 xcb.VoidCookie())

    def QueryFont(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, True),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryFontUnchecked(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, False),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryTextExtents(self, font, string_len, string):
        buf = _StringIO()
        buf.write(_pack('=x', ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, True),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def QueryTextExtentsUnchecked(self, font, string_len, string):
        buf = _StringIO()
        buf.write(_pack('=x', ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, False),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def ListFonts(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, True),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsUnchecked(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, False),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsWithInfo(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, True),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def ListFontsWithInfoUnchecked(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, False),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def SetFontPathChecked(self, font_qty, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, True),
                                 xcb.VoidCookie())

    def SetFontPath(self, font_qty, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, False),
                                 xcb.VoidCookie())

    def GetFontPath(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, True),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def GetFontPathUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, False),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def CreatePixmapChecked(self, depth, pid, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, True),
                                 xcb.VoidCookie())

    def CreatePixmap(self, depth, pid, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, False),
                                 xcb.VoidCookie())

    def FreePixmapChecked(self, pixmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, True),
                                 xcb.VoidCookie())

    def FreePixmap(self, pixmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, False),
                                 xcb.VoidCookie())

    def CreateGCChecked(self, cid, drawable, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, True),
                                 xcb.VoidCookie())

    def CreateGC(self, cid, drawable, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, False),
                                 xcb.VoidCookie())

    def ChangeGCChecked(self, gc, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, True),
                                 xcb.VoidCookie())

    def ChangeGC(self, gc, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, False),
                                 xcb.VoidCookie())

    def CopyGCChecked(self, src_gc, dst_gc, value_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, True),
                                 xcb.VoidCookie())

    def CopyGC(self, src_gc, dst_gc, value_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, False),
                                 xcb.VoidCookie())

    def SetDashesChecked(self, gc, dash_offset, dashes_len, dashes):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(_array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, True),
                                 xcb.VoidCookie())

    def SetDashes(self, gc, dash_offset, dashes_len, dashes):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(_array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, False),
                                 xcb.VoidCookie())

    def SetClipRectanglesChecked(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, True),
                                 xcb.VoidCookie())

    def SetClipRectangles(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, False),
                                 xcb.VoidCookie())

    def FreeGCChecked(self, gc):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, True),
                                 xcb.VoidCookie())

    def FreeGC(self, gc):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, False),
                                 xcb.VoidCookie())

    def ClearAreaChecked(self, exposures, window, x, y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, True),
                                 xcb.VoidCookie())

    def ClearArea(self, exposures, window, x, y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, False),
                                 xcb.VoidCookie())

    def CopyAreaChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, True),
                                 xcb.VoidCookie())

    def CopyArea(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, False),
                                 xcb.VoidCookie())

    def CopyPlaneChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, True),
                                 xcb.VoidCookie())

    def CopyPlane(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, False),
                                 xcb.VoidCookie())

    def PolyPointChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, True),
                                 xcb.VoidCookie())

    def PolyPoint(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, False),
                                 xcb.VoidCookie())

    def PolyLineChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, True),
                                 xcb.VoidCookie())

    def PolyLine(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, False),
                                 xcb.VoidCookie())

    def PolySegmentChecked(self, drawable, gc, segments_len, segments):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, True),
                                 xcb.VoidCookie())

    def PolySegment(self, drawable, gc, segments_len, segments):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, False),
                                 xcb.VoidCookie())

    def PolyRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, True),
                                 xcb.VoidCookie())

    def PolyRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, False),
                                 xcb.VoidCookie())

    def PolyArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, True),
                                 xcb.VoidCookie())

    def PolyArc(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, False),
                                 xcb.VoidCookie())

    def FillPolyChecked(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, True),
                                 xcb.VoidCookie())

    def FillPoly(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, False),
                                 xcb.VoidCookie())

    def PolyFillRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, True),
                                 xcb.VoidCookie())

    def PolyFillRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, False),
                                 xcb.VoidCookie())

    def PolyFillArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, True),
                                 xcb.VoidCookie())

    def PolyFillArc(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, False),
                                 xcb.VoidCookie())

    def PutImageChecked(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, True),
                                 xcb.VoidCookie())

    def PutImage(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, False),
                                 xcb.VoidCookie())

    def GetImage(self, format, drawable, x, y, width, height, plane_mask):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, True),
                                 GetImageCookie(),
                                 GetImageReply)

    def GetImageUnchecked(self, format, drawable, x, y, width, height, plane_mask):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, False),
                                 GetImageCookie(),
                                 GetImageReply)

    def PolyText8Checked(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, True),
                                 xcb.VoidCookie())

    def PolyText8(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, False),
                                 xcb.VoidCookie())

    def PolyText16Checked(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, True),
                                 xcb.VoidCookie())

    def PolyText16(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, False),
                                 xcb.VoidCookie())

    def ImageText8Checked(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(_array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, True),
                                 xcb.VoidCookie())

    def ImageText8(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(_array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, False),
                                 xcb.VoidCookie())

    def ImageText16Checked(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, True),
                                 xcb.VoidCookie())

    def ImageText16(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, False),
                                 xcb.VoidCookie())

    def CreateColormapChecked(self, alloc, mid, window, visual):
        buf = _StringIO()
        buf.write(_pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, True),
                                 xcb.VoidCookie())

    def CreateColormap(self, alloc, mid, window, visual):
        buf = _StringIO()
        buf.write(_pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, False),
                                 xcb.VoidCookie())

    def FreeColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, True),
                                 xcb.VoidCookie())

    def FreeColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, False),
                                 xcb.VoidCookie())

    def CopyColormapAndFreeChecked(self, mid, src_cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, True),
                                 xcb.VoidCookie())

    def CopyColormapAndFree(self, mid, src_cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, False),
                                 xcb.VoidCookie())

    def InstallColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, True),
                                 xcb.VoidCookie())

    def InstallColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, False),
                                 xcb.VoidCookie())

    def UninstallColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, True),
                                 xcb.VoidCookie())

    def UninstallColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, False),
                                 xcb.VoidCookie())

    def ListInstalledColormaps(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, True),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def ListInstalledColormapsUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, False),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def AllocColor(self, cmap, red, green, blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, True),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocColorUnchecked(self, cmap, red, green, blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, False),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocNamedColor(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, True),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocNamedColorUnchecked(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, False),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocColorCells(self, contiguous, cmap, colors, planes):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, True),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorCellsUnchecked(self, contiguous, cmap, colors, planes):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, False),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorPlanes(self, contiguous, cmap, colors, reds, greens, blues):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, True),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def AllocColorPlanesUnchecked(self, contiguous, cmap, colors, reds, greens, blues):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, False),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def FreeColorsChecked(self, cmap, plane_mask, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, True),
                                 xcb.VoidCookie())

    def FreeColors(self, cmap, plane_mask, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, False),
                                 xcb.VoidCookie())

    def StoreColorsChecked(self, cmap, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, True),
                                 xcb.VoidCookie())

    def StoreColors(self, cmap, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, False),
                                 xcb.VoidCookie())

    def StoreNamedColorChecked(self, flags, cmap, pixel, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, True),
                                 xcb.VoidCookie())

    def StoreNamedColor(self, flags, cmap, pixel, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, False),
                                 xcb.VoidCookie())

    def QueryColors(self, cmap, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, True),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def QueryColorsUnchecked(self, cmap, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, False),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def LookupColor(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, True),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def LookupColorUnchecked(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, False),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def CreateCursorChecked(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, True),
                                 xcb.VoidCookie())

    def CreateCursor(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, False),
                                 xcb.VoidCookie())

    def CreateGlyphCursorChecked(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, True),
                                 xcb.VoidCookie())

    def CreateGlyphCursor(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, False),
                                 xcb.VoidCookie())

    def FreeCursorChecked(self, cursor):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, True),
                                 xcb.VoidCookie())

    def FreeCursor(self, cursor):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, False),
                                 xcb.VoidCookie())

    def RecolorCursorChecked(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, True),
                                 xcb.VoidCookie())

    def RecolorCursor(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, False),
                                 xcb.VoidCookie())

    def QueryBestSize(self, _class, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, True),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryBestSizeUnchecked(self, _class, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, False),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryExtension(self, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, True),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def QueryExtensionUnchecked(self, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, False),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def ListExtensions(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, True),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ListExtensionsUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, False),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ChangeKeyboardMappingChecked(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = _StringIO()
        buf.write(_pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(_array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardMapping(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = _StringIO()
        buf.write(_pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(_array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardMapping(self, first_keycode, count):
        buf = _StringIO()
        buf.write(_pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, True),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def GetKeyboardMappingUnchecked(self, first_keycode, count):
        buf = _StringIO()
        buf.write(_pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, False),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def ChangeKeyboardControlChecked(self, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardControl(self, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardControl(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, True),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def GetKeyboardControlUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, False),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def BellChecked(self, percent):
        buf = _StringIO()
        buf.write(_pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, True),
                                 xcb.VoidCookie())

    def Bell(self, percent):
        buf = _StringIO()
        buf.write(_pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, False),
                                 xcb.VoidCookie())

    def ChangePointerControlChecked(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, True),
                                 xcb.VoidCookie())

    def ChangePointerControl(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, False),
                                 xcb.VoidCookie())

    def GetPointerControl(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, True),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def GetPointerControlUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, False),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def SetScreenSaverChecked(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, True),
                                 xcb.VoidCookie())

    def SetScreenSaver(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, False),
                                 xcb.VoidCookie())

    def GetScreenSaver(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, True),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def GetScreenSaverUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, False),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def ChangeHostsChecked(self, mode, family, address_len, address):
        buf = _StringIO()
        buf.write(_pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(_array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, True),
                                 xcb.VoidCookie())

    def ChangeHosts(self, mode, family, address_len, address):
        buf = _StringIO()
        buf.write(_pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(_array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, False),
                                 xcb.VoidCookie())

    def ListHosts(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, True),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def ListHostsUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, False),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def SetAccessControlChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, True),
                                 xcb.VoidCookie())

    def SetAccessControl(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, False),
                                 xcb.VoidCookie())

    def SetCloseDownModeChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, True),
                                 xcb.VoidCookie())

    def SetCloseDownMode(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, False),
                                 xcb.VoidCookie())

    def KillClientChecked(self, resource):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, True),
                                 xcb.VoidCookie())

    def KillClient(self, resource):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, False),
                                 xcb.VoidCookie())

    def RotatePropertiesChecked(self, window, atoms_len, delta, atoms):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(_array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, True),
                                 xcb.VoidCookie())

    def RotateProperties(self, window, atoms_len, delta, atoms):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(_array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, False),
                                 xcb.VoidCookie())

    def ForceScreenSaverChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, True),
                                 xcb.VoidCookie())

    def ForceScreenSaver(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, False),
                                 xcb.VoidCookie())

    def SetPointerMapping(self, map_len, map):
        buf = _StringIO()
        buf.write(_pack('=xB2x', map_len))
        buf.write(str(buffer(_array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, True),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def SetPointerMappingUnchecked(self, map_len, map):
        buf = _StringIO()
        buf.write(_pack('=xB2x', map_len))
        buf.write(str(buffer(_array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, False),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def GetPointerMapping(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, True),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def GetPointerMappingUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, False),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def SetModifierMapping(self, keycodes_per_modifier, keycodes):
        buf = _StringIO()
        buf.write(_pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(_array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, True),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def SetModifierMappingUnchecked(self, keycodes_per_modifier, keycodes):
        buf = _StringIO()
        buf.write(_pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(_array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, False),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def GetModifierMapping(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, True),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def GetModifierMappingUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, False),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def NoOperationChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, True),
                                 xcb.VoidCookie())

    def NoOperation(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, False),
                                 xcb.VoidCookie())


xcb._add_core(xprotoExtension, Setup, _EVENTS, _ERRORS)

* Wed 11 Jun 2014 04:34:30 PM JST
                        
* Wed 11 Jun 2014 04:35:40 PM JST
                                 
* Wed 11 Jun 2014 04:35:47 PM JST
                                 
* Wed 11 Jun 2014 04:35:59 PM JST
                        
* Wed 11 Jun 2014 04:36:13 PM JST
                        
* Wed 11 Jun 2014 04:36:29 PM JST
                        
* Wed 11 Jun 2014 04:36:43 PM JST
                        
* Wed 11 Jun 2014 04:47:39 PM JST

* Wed 11 Jun 2014 04:47:39 PM JST

* Wed 11 Jun 2014 04:47:39 PM JST
        print(dir(self.conn))

* Wed 11 Jun 2014 04:59:39 PM JST
from xcb import xcb
from xcb.xcb import (CAPI, ExtensionException, Response,
                     ConnectException, ExtensionKey, Struct, _add_core,
                     Connection, Iterator, Union, _add_ext,
                     Cookie, List, VoidCookie, _resize_obj,
                     CopyFromParent, NONE, X_PROTOCOL, #connect,
                     CurrentTime, NoSymbol, X_PROTOCOL_REVISION, popcount,
                     Error, Protobj, X_TCP_PORT, type_pad,
                     Event, ProtocolException,
                     Exception, Reply,
                     Extension, Request, )

from xcb2.xproto import connect # not error
from xcb2.display import Display

* Wed 11 Jun 2014 05:00:42 PM JST
from xcb2.xproto.xconnection import connect, Connection
* Wed 11 Jun 2014 05:01:24 PM JST
Connection
* Wed 11 Jun 2014 05:07:18 PM JST
WindowRootType(
* Wed 11 Jun 2014 05:07:25 PM JST
WindowRootType(
* Wed 11 Jun 2014 05:07:46 PM JST
.get_net_wm_window_type()
* Wed 11 Jun 2014 05:08:06 PM JST
.get_net_wm_window_type()
* Wed 11 Jun 2014 05:08:19 PM JST
.get_net_wm_window_type()
* Wed 11 Jun 2014 05:09:21 PM JST
            
* Wed 11 Jun 2014 05:13:30 PM JST

* Wed 11 Jun 2014 05:13:32 PM JST
drawable
* Wed 11 Jun 2014 05:13:48 PM JST

* Wed 11 Jun 2014 05:13:59 PM JST

* Wed 11 Jun 2014 05:14:01 PM JST
windowlist
* Wed 11 Jun 2014 05:16:34 PM JST
window
* Wed 11 Jun 2014 05:16:53 PM JST

* Wed 11 Jun 2014 05:16:53 PM JST

* Wed 11 Jun 2014 05:16:53 PM JST
# from xcb3.xobj.window.windowtypes import WindowUnknownType

* Wed 11 Jun 2014 05:17:16 PM JST
make_list_append
* Wed 11 Jun 2014 05:18:58 PM JST
window/
* Wed 11 Jun 2014 05:20:27 PM JST
core
* Wed 11 Jun 2014 05:24:12 PM JST
WindowRootType, 
* Wed 11 Jun 2014 05:24:13 PM JST
    
* Wed 11 Jun 2014 05:30:49 PM JST
window.
* Wed 11 Jun 2014 05:32:00 PM JST
from xcb3.xobj.window import Window
* Wed 11 Jun 2014 05:32:45 PM JST
, WindowList
* Wed 11 Jun 2014 05:32:50 PM JST
from xcb import 
* Wed 11 Jun 2014 05:34:31 PM JST
window.
* Wed 11 Jun 2014 05:35:21 PM JST

* Wed 11 Jun 2014 05:35:21 PM JST

* Wed 11 Jun 2014 05:35:21 PM JST
from xcb3.xobj import Window

* Wed 11 Jun 2014 06:22:24 PM JST

* Wed 11 Jun 2014 06:22:24 PM JST

* Wed 11 Jun 2014 06:22:24 PM JST
        self.rawconnection.display = 'hello'

* Wed 11 Jun 2014 06:25:57 PM JST

* Wed 11 Jun 2014 06:25:57 PM JST

* Wed 11 Jun 2014 06:25:57 PM JST
from xcb3.xproto.wrapcore import WrapCore

* Wed 11 Jun 2014 06:35:27 PM JST
from xcb3.xobj.atom.atompair import AtomPair # do not remove
* Wed 11 Jun 2014 06:35:34 PM JST
from peak.rules import dispatch
* Wed 11 Jun 2014 06:35:41 PM JST
atom.
* Wed 11 Jun 2014 06:36:18 PM JST
atompair
* Wed 11 Jun 2014 06:36:53 PM JST
@dispatch.generic()
* Wed 11 Jun 2014 06:37:07 PM JST
@identify.when('isinstance(atom, AtomPair)')
* Wed 11 Jun 2014 06:37:45 PM JST
@identify.when('isinstance(atom, str)')
* Wed 11 Jun 2014 06:39:20 PM JST
Connection.get_instance
* Wed 11 Jun 2014 06:41:28 PM JST
GlobalCacheAtoms.getatom(name, self._connection.display)
* Wed 11 Jun 2014 06:41:34 PM JST
name
* Wed 11 Jun 2014 06:41:55 PM JST
from xcb2.xobj import GlobalCacheAtoms
* Wed 11 Jun 2014 06:44:39 PM JST
GlobalCacheAtoms.add(atom, self._connection.display)
* Wed 11 Jun 2014 06:44:45 PM JST
_connection.
* Wed 11 Jun 2014 06:44:46 PM JST
self._connection.
* Wed 11 Jun 2014 06:47:33 PM JST
@identify.when('isinstance(atom, int)')
* Wed 11 Jun 2014 06:47:57 PM JST
cache = GlobalCacheAtoms.getatom(atom, display)
* Wed 11 Jun 2014 06:48:05 PM JST
    if not cache is None:
        return cache
    conn = Connection.get_instance(display=display)

* Wed 11 Jun 2014 06:49:29 PM JST
return
* Wed 11 Jun 2014 06:52:49 PM JST
core.
* Wed 11 Jun 2014 06:52:59 PM JST
return
* Wed 11 Jun 2014 06:53:06 PM JST
        cookie.name = name
        return WrapInternAtomCookie(self.conn, cookie)

* Wed 11 Jun 2014 06:53:17 PM JST
return
* Wed 11 Jun 2014 06:56:52 PM JST
'BITMAP'
* Wed 11 Jun 2014 06:57:37 PM JST
GlobalCacheAtoms.add(atm, display)
* Wed 11 Jun 2014 06:57:53 PM JST
print(atm)
* Wed 11 Jun 2014 06:58:34 PM JST
print(type(atm))
* Wed 11 Jun 2014 06:59:33 PM JST
from
* Wed 11 Jun 2014 07:00:23 PM JST

* Wed 11 Jun 2014 07:00:23 PM JST

* Wed 11 Jun 2014 07:00:23 PM JST
    print(type(atm))

* Wed 11 Jun 2014 07:00:26 PM JST

* Wed 11 Jun 2014 07:00:26 PM JST

* Wed 11 Jun 2014 07:00:26 PM JST
    print(type(atm))

* Wed 11 Jun 2014 07:02:13 PM JST
connetcio
* Wed 11 Jun 2014 07:02:18 PM JST
connection
* Wed 11 Jun 2014 07:02:44 PM JST
return
* Wed 11 Jun 2014 07:02:50 PM JST
        cookie.atom = atom
        return WrapGetAtomNameCookie(self.connection, cookie)

* Wed 11 Jun 2014 07:04:02 PM JST
atomidentify
* Wed 11 Jun 2014 07:05:57 PM JST

* Wed 11 Jun 2014 07:05:57 PM JST

* Wed 11 Jun 2014 07:05:57 PM JST
        from xcb3.xproto.xconnection import Connection

* Wed 11 Jun 2014 07:06:02 PM JST

* Wed 11 Jun 2014 07:06:02 PM JST

* Wed 11 Jun 2014 07:06:02 PM JST
        # KLUDGE: (Atami) [2014/05/15]

* Wed 11 Jun 2014 07:06:27 PM JST
Connection.get_instance(display=self.display)
* Wed 11 Jun 2014 07:07:32 PM JST
Display
* Wed 11 Jun 2014 07:08:11 PM JST

* Wed 11 Jun 2014 07:08:12 PM JST

* Wed 11 Jun 2014 07:08:12 PM JST
class AtomName(Displ):

* Wed 11 Jun 2014 07:08:18 PM JST
connection, 
* Wed 11 Jun 2014 07:08:32 PM JST
ConnectionAbstract
* Wed 11 Jun 2014 07:08:36 PM JST
connection
* Wed 11 Jun 2014 07:08:43 PM JST

* Wed 11 Jun 2014 07:08:43 PM JST

* Wed 11 Jun 2014 07:08:43 PM JST
from xcb3.abstract import ConnectionAbstract

* Wed 11 Jun 2014 07:09:42 PM JST
atomidentify
* Wed 11 Jun 2014 07:09:58 PM JST
self.gettype().name
* Wed 11 Jun 2014 07:10:30 PM JST
ConnectionAbstract
* Wed 11 Jun 2014 07:10:33 PM JST
abstract
* Wed 11 Jun 2014 07:10:38 PM JST
ConnectionAbstract
* Wed 11 Jun 2014 07:10:44 PM JST
connection, 
* Wed 11 Jun 2014 07:10:51 PM JST
ConnectionAbstract
* Wed 11 Jun 2014 07:10:53 PM JST
connection
* Wed 11 Jun 2014 07:11:56 PM JST
connection, 
* Wed 11 Jun 2014 07:11:58 PM JST
self.connection, 
* Wed 11 Jun 2014 07:12:07 PM JST
connection, 
* Wed 11 Jun 2014 07:12:07 PM JST
self.connection, 
* Wed 11 Jun 2014 07:12:33 PM JST
connection, 
* Wed 11 Jun 2014 07:12:33 PM JST
self.connection, 
* Wed 11 Jun 2014 07:12:42 PM JST
connection, 
* Wed 11 Jun 2014 07:12:42 PM JST
self.connection, 
* Wed 11 Jun 2014 07:13:21 PM JST
from xcb3.xproto.xconnection import Connection
* Wed 11 Jun 2014 07:13:34 PM JST

* Wed 11 Jun 2014 07:13:34 PM JST

* Wed 11 Jun 2014 07:13:34 PM JST
from xcb3.xproto.xconnection import Connection

* Wed 11 Jun 2014 10:24:26 PM JST
abstract
* Wed 11 Jun 2014 10:24:28 PM JST
ConnectionAbstract
* Wed 11 Jun 2014 10:24:34 PM JST
connection, 
* Wed 11 Jun 2014 10:24:58 PM JST
connection
* Wed 11 Jun 2014 10:25:55 PM JST
object
* Wed 11 Jun 2014 10:26:00 PM JST
connection, 
* Wed 11 Jun 2014 10:26:39 PM JST
connection, 
* Wed 11 Jun 2014 10:26:49 PM JST
object
* Wed 11 Jun 2014 10:27:40 PM JST
abstract
* Wed 11 Jun 2014 10:27:42 PM JST
ConnectionAbstract
* Wed 11 Jun 2014 10:27:47 PM JST
ConnectionAbstract
* Wed 11 Jun 2014 10:27:52 PM JST
connection, 
* Wed 11 Jun 2014 10:28:16 PM JST
abstract
* Wed 11 Jun 2014 10:28:18 PM JST
ConnectionAbstract
* Wed 11 Jun 2014 10:28:23 PM JST
ConnectionAbstract
* Wed 11 Jun 2014 10:28:33 PM JST
connection
* Wed 11 Jun 2014 10:28:34 PM JST

* Wed 11 Jun 2014 10:28:34 PM JST

* Wed 11 Jun 2014 10:28:34 PM JST
            Display.__init__(self, displ)

* Wed 11 Jun 2014 10:28:50 PM JST

* Wed 11 Jun 2014 10:28:50 PM JST

* Wed 11 Jun 2014 10:28:50 PM JST
        if connection:

* Wed 11 Jun 2014 10:28:54 PM JST
None, 
* Wed 11 Jun 2014 10:28:55 PM JST
connection=None, 
* Wed 11 Jun 2014 10:38:35 PM JST
 # not error
* Wed 11 Jun 2014 10:48:14 PM JST

* Wed 11 Jun 2014 10:48:14 PM JST

* Wed 11 Jun 2014 10:48:14 PM JST
# from xcb3.xproto.xconnection import connect

* Wed 11 Jun 2014 10:57:37 PM JST

* Wed 11 Jun 2014 10:57:37 PM JST

* Wed 11 Jun 2014 10:57:37 PM JST
from xcb3.xproto.xconnection import Connection

* Wed 11 Jun 2014 10:59:48 PM JST
from
* Wed 11 Jun 2014 11:01:02 PM JST
def connect(*args, **kwargs):
    r"""SUMMARY

    connection(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    return Connection.get_instance(*args, **kwargs)



* Wed 11 Jun 2014 11:01:38 PM JST

* Wed 11 Jun 2014 11:01:38 PM JST

* Wed 11 Jun 2014 11:01:38 PM JST
from xcb3.xproto.xconnection import connect

* Wed 11 Jun 2014 11:01:42 PM JST
connect
* Thu 12 Jun 2014 06:54:45 AM JST
from xcb.xcb import connect as baseconnect
from xcb3.xproto.wreply import WrapSetup

* Thu 12 Jun 2014 06:55:09 AM JST
        from xcb.xcb import connect as baseconnect
        from xcb3.xproto.wreply import WrapSetup

* Thu 12 Jun 2014 07:01:09 AM JST
class WrapSCREEN(WrapReplyAbstract):
    r"""SUMMARY
    """

    @property
    def root(self, ):
        r"""SUMMARY

        root()

        @Return:
        """
        return Window(self.connection, self._raw.root)

    @property
    def default_colormap(self, ):
        r"""SUMMARY

        default_colormap()

        @Return:
        """
        return self._raw.default_colormap

    @property
    def white_pixel(self, ):
        r"""SUMMARY

        white_pixel()

        @Return:
        """
        return self._raw.white_pixel

    @property
    def black_pixel(self, ):
        r"""SUMMARY

        black_pixel()

        @Return:
        """
        return self._raw.black_pixel

    @property
    def current_input_masks(self, ):
        r"""SUMMARY

        current_input_masks()

        @Return:
        """
        return self._raw.current_input_masks

    @property
    def width_in_pixels(self, ):
        r"""SUMMARY

        width_in_pixels()

        @Return:
        """
        return self._raw.width_in_pixels

    @property
    def height_in_pixels(self, ):
        r"""SUMMARY

        height_in_pixels()

        @Return:
        """
        return self._raw.height_in_pixels

    @property
    def width_in_millimeters(self, ):
        r"""SUMMARY

        width_in_millimeters()

        @Return:
        """
        return self._raw.width_in_millimeters

    @property
    def height_in_millimeters(self, ):
        r"""SUMMARY

        height_in_millimeters()

        @Return:
        """
        return self._raw.height_in_millimeters

    @property
    def min_installed_maps(self, ):
        r"""SUMMARY

        min_installed_maps()

        @Return:
        """
        return self._raw.min_installed_maps

    @property
    def max_installed_maps(self, ):
        r"""SUMMARY

        max_installed_maps()

        @Return:
        """
        return self._raw.max_installed_maps

    @property
    def root_visual(self, ):
        r"""SUMMARY

        root_visual()

        @Return:
        """
        return self._raw.root_visual

    @property
    def backing_stores(self, ):
        r"""SUMMARY

        backing_stores()

        @Return:
        """
        return self._raw.backing_stores

    @property
    def save_unders(self, ):
        r"""SUMMARY

        save_unders()

        @Return:
        """
        return self._raw.save_unders

    @property
    def root_depth(self, ):
        r"""SUMMARY

        root_depth()

        @Return:
        """
        return self._raw.root_depth

    @property
    def allowed_depths_len(self, ):
        r"""SUMMARY

        allowed_depths_len()

        @Return:
        """
        return self._raw.allowed_depths_len

    @property
    def allowed_depths(self, ):
        r"""SUMMARY

        allowed_depths()

        @Return:
        """
        return self._raw.allowed_depths


class WrapSetup(WrapReplyAbstract):
    r"""SUMMARY
    """

    @property
    def status(self, ):
        r"""SUMMARY

        status()

        @Return:
        """
        return self._raw.status

    @property
    def protocol_major_version(self, ):
        r"""SUMMARY

        protocol_major_version()

        @Return:
        """
        return self._raw.protocol_major_version

    @property
    def protocol_minor_version(self, ):
        r"""SUMMARY

        protocol_minor_version()

        @Return:
        """
        return self._raw.protocol_minor_version

    @property
    def length(self, ):
        r"""SUMMARY

        length()

        @Return:
        """
        return self._raw.length

    @property
    def release_number(self, ):
        r"""SUMMARY

        release_number()

        @Return:
        """
        return self._raw.release_number

    @property
    def resorce_id_base(self, ):
        r"""SUMMARY

        resorce_id_base()

        @Return:
        """
        return self._raw.resorce_id_base

    @property
    def resorce_id_mask(self, ):
        r"""SUMMARY

        resorce_id_mask()

        @Return:
        """
        return self._raw.resorce_id_mask

    @property
    def motion_buffer_size(self, ):
        r"""SUMMARY

        motion_buffer_size()

        @Return:
        """
        return self._raw.motion_buffer_size

    @property
    def vendor_len(self, ):
        r"""SUMMARY

        vendor_len()

        @Return:
        """
        return self._raw.vendor_len

    @property
    def maximum_request_length(self, ):
        r"""SUMMARY

        maximum_request_length()

        @Return:
        """
        return self._raw.maximum_request_length

    @property
    def roots_len(self, ):
        r"""SUMMARY

        roots_len()

        @Return:
        """
        return self._raw.roots_len

    @property
    def pixmap_formats_len(self, ):
        r"""SUMMARY

        pixmap_formats_len()

        @Return:
        """
        return self._raw.pixmap_formats_len

    @property
    def image_byte_order(self, ):
        r"""SUMMARY

        image_byte_order()

        @Return:
        """
        return self._raw.image_byte_order

    @property
    def bitmap_format_scanline_unit(self, ):
        r"""SUMMARY

        bitmap_format_scanline_unit()

        @Return:
        """
        return self._raw.bitmap_format_scanline_unit

    @property
    def bitmap_format_scanline_pad(self, ):
        r"""SUMMARY

        bitmap_format_scanline_pad()

        @Return:
        """
        return self._raw.bitmap_format_scanline_pad

    @property
    def min_keycode(self, ):
        r"""SUMMARY

        min_keycode()

        @Return:
        """
        return self._raw.min_keycode

    @property
    def max_keycode(self, ):
        r"""SUMMARY

        max_keycode()

        @Return:
        """
        return self._raw.max_keycode

    @property
    def vendor(self, ):
        r"""SUMMARY

        vendor()

        @Return:
        """
        return self._raw.vendor

    @property
    def pixmap_formats(self, ):
        r"""SUMMARY

        pixmap_formats()

        @Return:
        """
        return self._raw.pixmap_formats

    @property
    def roots(self, ):
        r"""SUMMARY

        roots()

        @Return:
        """
        return [WrapSCREEN(self.connection, x) for x in self._raw.roots]



* Thu 12 Jun 2014 07:02:00 AM JST
    def __init__(self, connection, raw):
        r"""

        @Arguments:
        - `raw`:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)
        self._raw = raw

* Thu 12 Jun 2014 07:02:11 AM JST
from xcb3.abstract import ConnectionAbstract
* Thu 12 Jun 2014 07:02:19 AM JST
ConnectionAbstract
* Thu 12 Jun 2014 07:02:35 AM JST
from xcb3.xobj import Window
* Thu 12 Jun 2014 07:02:49 AM JST
connection, 
* Thu 12 Jun 2014 07:02:49 AM JST
self.connection, 
* Thu 12 Jun 2014 07:03:05 AM JST
    def __init__(self, connection, raw):
        r"""

        @Arguments:
        - `raw`:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)
        self._raw = raw


* Thu 12 Jun 2014 07:03:18 AM JST
ConnectionAbstract
* Thu 12 Jun 2014 07:07:18 AM JST
class xprotoExtension(xcb.Extension):

    def CreateWindowChecked(self, depth, wid, parent, x, y, width, height,
                            border_width, _class, visual, value_mask,
                            value_list):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y,
                        width, height, border_width, _class, visual,
                        value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, True),
                                 xcb.VoidCookie())

    def CreateWindow(self, depth, wid, parent, x, y, width, height,
                     border_width, _class, visual, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y, width,
                        height, border_width, _class, visual, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, False),
                                 xcb.VoidCookie())

    def ChangeWindowAttributesChecked(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, True),
                                 xcb.VoidCookie())

    def ChangeWindowAttributes(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, False),
                                 xcb.VoidCookie())

    def GetWindowAttributes(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, True),
                                 GetWindowAttributesCookie(),
                                 GetWindowAttributesReply)

    def GetWindowAttributesUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, False),
                                 GetWindowAttributesCookie(),
                                 GetWindowAttributesReply)

    def DestroyWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, True),
                                 xcb.VoidCookie())

    def DestroyWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, False),
                                 xcb.VoidCookie())

    def DestroySubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, True),
                                 xcb.VoidCookie())

    def DestroySubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, False),
                                 xcb.VoidCookie())

    def ChangeSaveSetChecked(self, mode, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, True),
                                 xcb.VoidCookie())

    def ChangeSaveSet(self, mode, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, False),
                                 xcb.VoidCookie())

    def ReparentWindowChecked(self, window, parent, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, True),
                                 xcb.VoidCookie())

    def ReparentWindow(self, window, parent, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, False),
                                 xcb.VoidCookie())

    def MapWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, True),
                                 xcb.VoidCookie())

    def MapWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, False),
                                 xcb.VoidCookie())

    def MapSubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, True),
                                 xcb.VoidCookie())

    def MapSubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, False),
                                 xcb.VoidCookie())

    def UnmapWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, True),
                                 xcb.VoidCookie())

    def UnmapWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, False),
                                 xcb.VoidCookie())

    def UnmapSubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, True),
                                 xcb.VoidCookie())

    def UnmapSubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, False),
                                 xcb.VoidCookie())

    def ConfigureWindowChecked(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, True),
                                 xcb.VoidCookie())

    def ConfigureWindow(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, False),
                                 xcb.VoidCookie())

    def CirculateWindowChecked(self, direction, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, True),
                                 xcb.VoidCookie())

    def CirculateWindow(self, direction, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, False),
                                 xcb.VoidCookie())

    def GetGeometry(self, drawable):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, True),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def GetGeometryUnchecked(self, drawable):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, False),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def QueryTree(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, True),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def QueryTreeUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, False),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def InternAtom(self, only_if_exists, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))
        cookie = self.send_request(xcb.Request(buf.getvalue(), 16, False, True),
                                 InternAtomCookie(),
                                 InternAtomReply)
        cookie.name = name
        return WrapInternAtomCookie(self.connection, cookie)

    def InternAtomUnchecked(self, only_if_exists, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))
        cookie = self.send_request(xcb.Request(buf.getvalue(), 16, False, False),
                                 InternAtomCookie(),
                                 InternAtomReply)
        cookie.name = name
        return WrapInternAtomCookie(self.connection, cookie)

    def GetAtomName(self, atom):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', atom))
        cookie = self.send_request(xcb.Request(buf.getvalue(), 17, False, True),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)
        cookie.atom = atom
        return WrapGetAtomNameCookie(self.connection, cookie)

    def GetAtomNameUnchecked(self, atom):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', atom))
        cookie = self.send_request(xcb.Request(buf.getvalue(), 17, False, False),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)
        cookie.atom = atom
        return WrapGetAtomNameCookie(self.connection, cookie)

    def ChangePropertyChecked(self, mode, window, property, type, format,
                              data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIB3xI', mode, window, property, type, format,
                        data_len))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, True),
                                 xcb.VoidCookie())

    def ChangeProperty(self, mode, window, property, type, format, data_len,
                       data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIB3xI', mode, window, property, type, format,
                        data_len))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, False),
                                 xcb.VoidCookie())

    def DeletePropertyChecked(self, window, property):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, True),
                                 xcb.VoidCookie())

    def DeleteProperty(self, window, property):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, False),
                                 xcb.VoidCookie())

    def GetProperty(self, delete, window, property, type, long_offset, long_length):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIII', delete, window, property, type,
                        long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, True),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def GetPropertyUnchecked(self, delete, window, property, type, long_offset,
                             long_length):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIII', delete, window, property, type,
                        long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, False),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def ListProperties(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, True),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def ListPropertiesUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, False),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def SetSelectionOwnerChecked(self, owner, selection, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, True),
                                 xcb.VoidCookie())

    def SetSelectionOwner(self, owner, selection, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, False),
                                 xcb.VoidCookie())

    def GetSelectionOwner(self, selection):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, True),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def GetSelectionOwnerUnchecked(self, selection):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, False),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def ConvertSelectionChecked(self, requestor, selection, target, property,
                                time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIII', requestor, selection, target, property,
                        time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, True),
                                 xcb.VoidCookie())

    def ConvertSelection(self, requestor, selection, target, property, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIII', requestor, selection, target, property,
                        time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, False),
                                 xcb.VoidCookie())

    def SendEventChecked(self, propagate, destination, event_mask, event):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(_array('b', event))))
        print(repr(buf.getvalue()))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, True),
                                 xcb.VoidCookie())

    def SendEvent(self, propagate, destination, event_mask, event):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(_array('b', event))))
        print(repr(buf.getvalue()))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, False),
                                 xcb.VoidCookie())

    def GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode,
                    keyboard_mode, confine_to, cursor, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIII', owner_events, grab_window, event_mask,
                        pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, True),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def GrabPointerUnchecked(self, owner_events, grab_window, event_mask,
                             pointer_mode, keyboard_mode, confine_to, cursor,
                             time):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, False),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def UngrabPointerChecked(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, True),
                                 xcb.VoidCookie())

    def UngrabPointer(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, False),
                                 xcb.VoidCookie())

    def GrabButtonChecked(self, owner_events, grab_window, event_mask,
                          pointer_mode, keyboard_mode, confine_to, cursor,
                          button, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, True),
                                 xcb.VoidCookie())

    def GrabButton(self, owner_events, grab_window, event_mask, pointer_mode,
                   keyboard_mode, confine_to, cursor, button, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, False),
                                 xcb.VoidCookie())

    def UngrabButtonChecked(self, button, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, True),
                                 xcb.VoidCookie())

    def UngrabButton(self, button, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, False),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrabChecked(self, cursor, time, event_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, True),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrab(self, cursor, time, event_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, False),
                                 xcb.VoidCookie())

    def GrabKeyboard(self, owner_events, grab_window, time, pointer_mode,
                     keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIBB2x', owner_events, grab_window, time,
                        pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, True),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def GrabKeyboardUnchecked(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIBB2x', owner_events, grab_window, time,
                        pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, False),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def UngrabKeyboardChecked(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, True),
                                 xcb.VoidCookie())

    def UngrabKeyboard(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, False),
                                 xcb.VoidCookie())

    def GrabKeyChecked(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers,
                        key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, True),
                                 xcb.VoidCookie())

    def GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode,
                keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers,
                        key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, False),
                                 xcb.VoidCookie())

    def UngrabKeyChecked(self, key, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, True),
                                 xcb.VoidCookie())

    def UngrabKey(self, key, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, False),
                                 xcb.VoidCookie())

    def AllowEventsChecked(self, mode, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, True),
                                 xcb.VoidCookie())

    def AllowEvents(self, mode, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, False),
                                 xcb.VoidCookie())

    def GrabServerChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, True),
                                 xcb.VoidCookie())

    def GrabServer(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, False),
                                 xcb.VoidCookie())

    def UngrabServerChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, True),
                                 xcb.VoidCookie())

    def UngrabServer(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, False),
                                 xcb.VoidCookie())

    def QueryPointer(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, True),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def QueryPointerUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, False),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def GetMotionEvents(self, window, start, stop):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, True),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def GetMotionEventsUnchecked(self, window, start, stop):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, False),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def TranslateCoordinates(self, src_window, dst_window, src_x, src_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, True),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def TranslateCoordinatesUnchecked(self, src_window, dst_window, src_x,
                                      src_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, False),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def WarpPointerChecked(self, src_window, dst_window, src_x, src_y,
                           src_width, src_height, dst_x, dst_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, True),
                                 xcb.VoidCookie())

    def WarpPointer(self, src_window, dst_window, src_x, src_y, src_width,
                    src_height, dst_x, dst_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y,
                        src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, False),
                                 xcb.VoidCookie())

    def SetInputFocusChecked(self, revert_to, focus, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, True),
                                 xcb.VoidCookie())

    def SetInputFocus(self, revert_to, focus, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, False),
                                 xcb.VoidCookie())

    def GetInputFocus(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, True),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def GetInputFocusUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, False),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def QueryKeymap(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, True),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def QueryKeymapUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, False),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def OpenFontChecked(self, fid, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, True),
                                 xcb.VoidCookie())

    def OpenFont(self, fid, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, False),
                                 xcb.VoidCookie())

    def CloseFontChecked(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, True),
                                 xcb.VoidCookie())

    def CloseFont(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, False),
                                 xcb.VoidCookie())

    def QueryFont(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, True),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryFontUnchecked(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, False),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryTextExtents(self, font, string_len, string):
        buf = _StringIO()
        buf.write(_pack('=x', ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, True),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def QueryTextExtentsUnchecked(self, font, string_len, string):
        buf = _StringIO()
        buf.write(_pack('=x', ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, False),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def ListFonts(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, True),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsUnchecked(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, False),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsWithInfo(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, True),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def ListFontsWithInfoUnchecked(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, False),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def SetFontPathChecked(self, font_qty, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, True),
                                 xcb.VoidCookie())

    def SetFontPath(self, font_qty, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, False),
                                 xcb.VoidCookie())

    def GetFontPath(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, True),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def GetFontPathUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, False),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def CreatePixmapChecked(self, depth, pid, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, True),
                                 xcb.VoidCookie())

    def CreatePixmap(self, depth, pid, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, False),
                                 xcb.VoidCookie())

    def FreePixmapChecked(self, pixmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, True),
                                 xcb.VoidCookie())

    def FreePixmap(self, pixmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, False),
                                 xcb.VoidCookie())

    def CreateGCChecked(self, cid, drawable, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, True),
                                 xcb.VoidCookie())

    def CreateGC(self, cid, drawable, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, False),
                                 xcb.VoidCookie())

    def ChangeGCChecked(self, gc, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, True),
                                 xcb.VoidCookie())

    def ChangeGC(self, gc, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, False),
                                 xcb.VoidCookie())

    def CopyGCChecked(self, src_gc, dst_gc, value_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, True),
                                 xcb.VoidCookie())

    def CopyGC(self, src_gc, dst_gc, value_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, False),
                                 xcb.VoidCookie())

    def SetDashesChecked(self, gc, dash_offset, dashes_len, dashes):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(_array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, True),
                                 xcb.VoidCookie())

    def SetDashes(self, gc, dash_offset, dashes_len, dashes):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(_array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, False),
                                 xcb.VoidCookie())

    def SetClipRectanglesChecked(self, ordering, gc, clip_x_origin,
                                 clip_y_origin, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, True),
                                 xcb.VoidCookie())

    def SetClipRectangles(self, ordering, gc, clip_x_origin, clip_y_origin,
                          rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, False),
                                 xcb.VoidCookie())

    def FreeGCChecked(self, gc):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, True),
                                 xcb.VoidCookie())

    def FreeGC(self, gc):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, False),
                                 xcb.VoidCookie())

    def ClearAreaChecked(self, exposures, window, x, y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, True),
                                 xcb.VoidCookie())

    def ClearArea(self, exposures, window, x, y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, False),
                                 xcb.VoidCookie())

    def CopyAreaChecked(self, src_drawable, dst_drawable, gc, src_x, src_y,
                        dst_x, dst_y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x,
                        src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, True),
                                 xcb.VoidCookie())

    def CopyArea(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x,
                 dst_y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x,
                        src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, False),
                                 xcb.VoidCookie())

    def CopyPlaneChecked(self, src_drawable, dst_drawable, gc, src_x, src_y,
                         dst_x, dst_y, width, height, bit_plane):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc,
                        src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, True),
                                 xcb.VoidCookie())

    def CopyPlane(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc,
                        src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, False),
                                 xcb.VoidCookie())

    def PolyPointChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, True),
                                 xcb.VoidCookie())

    def PolyPoint(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, False),
                                 xcb.VoidCookie())

    def PolyLineChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, True),
                                 xcb.VoidCookie())

    def PolyLine(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, False),
                                 xcb.VoidCookie())

    def PolySegmentChecked(self, drawable, gc, segments_len, segments):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, True),
                                 xcb.VoidCookie())

    def PolySegment(self, drawable, gc, segments_len, segments):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, False),
                                 xcb.VoidCookie())

    def PolyRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, True),
                                 xcb.VoidCookie())

    def PolyRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, False),
                                 xcb.VoidCookie())

    def PolyArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, True),
                                 xcb.VoidCookie())

    def PolyArc(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, False),
                                 xcb.VoidCookie())

    def FillPolyChecked(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, True),
                                 xcb.VoidCookie())

    def FillPoly(self, drawable, gc, shape, coordinate_mode, points_len,
                 points):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, False),
                                 xcb.VoidCookie())

    def PolyFillRectangleChecked(self, drawable, gc, rectangles_len,
                                 rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, True),
                                 xcb.VoidCookie())

    def PolyFillRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, False),
                                 xcb.VoidCookie())

    def PolyFillArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, True),
                                 xcb.VoidCookie())

    def PolyFillArc(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, False),
                                 xcb.VoidCookie())

    def PutImageChecked(self, format, drawable, gc, width, height, dst_x,
                        dst_y, left_pad, depth, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height,
                        dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, True),
                                 xcb.VoidCookie())

    def PutImage(self, format, drawable, gc, width, height, dst_x, dst_y,
                 left_pad, depth, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height,
                        dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, False),
                                 xcb.VoidCookie())

    def GetImage(self, format, drawable, x, y, width, height, plane_mask):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, True),
                                 GetImageCookie(),
                                 GetImageReply)

    def GetImageUnchecked(self, format, drawable, x, y, width, height,
                          plane_mask):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHHI', format, drawable, x, y, width, height,
                        plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, False),
                                 GetImageCookie(),
                                 GetImageReply)

    def PolyText8Checked(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, True),
                                 xcb.VoidCookie())

    def PolyText8(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, False),
                                 xcb.VoidCookie())

    def PolyText16Checked(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, True),
                                 xcb.VoidCookie())

    def PolyText16(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, False),
                                 xcb.VoidCookie())

    def ImageText8Checked(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(_array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, True),
                                 xcb.VoidCookie())

    def ImageText8(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(_array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, False),
                                 xcb.VoidCookie())

    def ImageText16Checked(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, True),
                                 xcb.VoidCookie())

    def ImageText16(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, False),
                                 xcb.VoidCookie())

    def CreateColormapChecked(self, alloc, mid, window, visual):
        buf = _StringIO()
        buf.write(_pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, True),
                                 xcb.VoidCookie())

    def CreateColormap(self, alloc, mid, window, visual):
        buf = _StringIO()
        buf.write(_pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, False),
                                 xcb.VoidCookie())

    def FreeColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, True),
                                 xcb.VoidCookie())

    def FreeColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, False),
                                 xcb.VoidCookie())

    def CopyColormapAndFreeChecked(self, mid, src_cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, True),
                                 xcb.VoidCookie())

    def CopyColormapAndFree(self, mid, src_cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, False),
                                 xcb.VoidCookie())

    def InstallColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, True),
                                 xcb.VoidCookie())

    def InstallColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, False),
                                 xcb.VoidCookie())

    def UninstallColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, True),
                                 xcb.VoidCookie())

    def UninstallColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, False),
                                 xcb.VoidCookie())

    def ListInstalledColormaps(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, True),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def ListInstalledColormapsUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, False),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def AllocColor(self, cmap, red, green, blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, True),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocColorUnchecked(self, cmap, red, green, blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, False),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocNamedColor(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, True),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocNamedColorUnchecked(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, False),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocColorCells(self, contiguous, cmap, colors, planes):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, True),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorCellsUnchecked(self, contiguous, cmap, colors, planes):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, False),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorPlanes(self, contiguous, cmap, colors, reds, greens, blues):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, True),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def AllocColorPlanesUnchecked(self, contiguous, cmap, colors, reds, greens, blues):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, False),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def FreeColorsChecked(self, cmap, plane_mask, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, True),
                                 xcb.VoidCookie())

    def FreeColors(self, cmap, plane_mask, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, False),
                                 xcb.VoidCookie())

    def StoreColorsChecked(self, cmap, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, True),
                                 xcb.VoidCookie())

    def StoreColors(self, cmap, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, False),
                                 xcb.VoidCookie())

    def StoreNamedColorChecked(self, flags, cmap, pixel, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, True),
                                 xcb.VoidCookie())

    def StoreNamedColor(self, flags, cmap, pixel, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, False),
                                 xcb.VoidCookie())

    def QueryColors(self, cmap, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, True),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def QueryColorsUnchecked(self, cmap, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, False),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def LookupColor(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, True),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def LookupColorUnchecked(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, False),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def CreateCursorChecked(self, cid, source, mask, fore_red, fore_green,
                            fore_blue, back_red, back_green, back_blue, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red,
                        fore_green, fore_blue, back_red, back_green, back_blue,
                        x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, True),
                                 xcb.VoidCookie())

    def CreateCursor(self, cid, source, mask, fore_red, fore_green, fore_blue,
                     back_red, back_green, back_blue, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red,
                        fore_green, fore_blue, back_red, back_green, back_blue,
                        x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, False),
                                 xcb.VoidCookie())

    def CreateGlyphCursorChecked(self, cid, source_font, mask_font,
                                 source_char, mask_char, fore_red,
                                 fore_green, fore_blue, back_red,
                                 back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font,
                        source_char, mask_char, fore_red, fore_green,
                        fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, True),
                                 xcb.VoidCookie())

    def CreateGlyphCursor(self, cid, source_font, mask_font, source_char,
                          mask_char, fore_red, fore_green, fore_blue, back_red,
                          back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font,
                        source_char, mask_char, fore_red, fore_green,
                        fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, False),
                                 xcb.VoidCookie())

    def FreeCursorChecked(self, cursor):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, True),
                                 xcb.VoidCookie())

    def FreeCursor(self, cursor):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, False),
                                 xcb.VoidCookie())

    def RecolorCursorChecked(self, cursor, fore_red, fore_green, fore_blue,
                             back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHHHHH', cursor, fore_red, fore_green,
                        fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, True),
                                 xcb.VoidCookie())

    def RecolorCursor(self, cursor, fore_red, fore_green, fore_blue, back_red,
                      back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHHHHH', cursor, fore_red, fore_green,
                        fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, False),
                                 xcb.VoidCookie())

    def QueryBestSize(self, _class, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, True),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryBestSizeUnchecked(self, _class, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, False),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryExtension(self, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, True),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def QueryExtensionUnchecked(self, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, False),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def ListExtensions(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, True),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ListExtensionsUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, False),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ChangeKeyboardMappingChecked(self, keycode_count, first_keycode,
                                     keysyms_per_keycode, keysyms):
        buf = _StringIO()
        buf.write(_pack('=xB2xBB2x', keycode_count, first_keycode,
                        keysyms_per_keycode))
        buf.write(str(buffer(_array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardMapping(self, keycode_count, first_keycode,
                              keysyms_per_keycode, keysyms):
        buf = _StringIO()
        buf.write(_pack('=xB2xBB2x', keycode_count, first_keycode,
                        keysyms_per_keycode))
        buf.write(str(buffer(_array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardMapping(self, first_keycode, count):
        buf = _StringIO()
        buf.write(_pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, True),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def GetKeyboardMappingUnchecked(self, first_keycode, count):
        buf = _StringIO()
        buf.write(_pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, False),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def ChangeKeyboardControlChecked(self, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardControl(self, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardControl(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, True),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def GetKeyboardControlUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, False),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def BellChecked(self, percent):
        buf = _StringIO()
        buf.write(_pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, True),
                                 xcb.VoidCookie())

    def Bell(self, percent):
        buf = _StringIO()
        buf.write(_pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, False),
                                 xcb.VoidCookie())

    def ChangePointerControlChecked(self, acceleration_numerator,
                                    acceleration_denominator, threshold,
                                    do_acceleration, do_threshold):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhhBB', acceleration_numerator,
                        acceleration_denominator, threshold, do_acceleration,
                        do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, True),
                                 xcb.VoidCookie())

    def ChangePointerControl(self, acceleration_numerator,
                             acceleration_denominator, threshold,
                             do_acceleration, do_threshold):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhhBB', acceleration_numerator,
                        acceleration_denominator, threshold, do_acceleration,
                        do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, False),
                                 xcb.VoidCookie())

    def GetPointerControl(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, True),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def GetPointerControlUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, False),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def SetScreenSaverChecked(self, timeout, interval, prefer_blanking,
                              allow_exposures):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhBB', timeout, interval, prefer_blanking,
                        allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, True),
                                 xcb.VoidCookie())

    def SetScreenSaver(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhBB', timeout, interval, prefer_blanking,
                        allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, False),
                                 xcb.VoidCookie())

    def GetScreenSaver(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, True),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def GetScreenSaverUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, False),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def ChangeHostsChecked(self, mode, family, address_len, address):
        buf = _StringIO()
        buf.write(_pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(_array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, True),
                                 xcb.VoidCookie())

    def ChangeHosts(self, mode, family, address_len, address):
        buf = _StringIO()
        buf.write(_pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(_array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, False),
                                 xcb.VoidCookie())

    def ListHosts(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, True),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def ListHostsUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, False),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def SetAccessControlChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, True),
                                 xcb.VoidCookie())

    def SetAccessControl(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, False),
                                 xcb.VoidCookie())

    def SetCloseDownModeChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, True),
                                 xcb.VoidCookie())

    def SetCloseDownMode(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, False),
                                 xcb.VoidCookie())

    def KillClientChecked(self, resource):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, True),
                                 xcb.VoidCookie())

    def KillClient(self, resource):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, False),
                                 xcb.VoidCookie())

    def RotatePropertiesChecked(self, window, atoms_len, delta, atoms):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(_array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, True),
                                 xcb.VoidCookie())

    def RotateProperties(self, window, atoms_len, delta, atoms):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(_array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, False),
                                 xcb.VoidCookie())

    def ForceScreenSaverChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, True),
                                 xcb.VoidCookie())

    def ForceScreenSaver(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, False),
                                 xcb.VoidCookie())

    def SetPointerMapping(self, map_len, map):
        buf = _StringIO()
        buf.write(_pack('=xB2x', map_len))
        buf.write(str(buffer(_array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, True),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def SetPointerMappingUnchecked(self, map_len, map):
        buf = _StringIO()
        buf.write(_pack('=xB2x', map_len))
        buf.write(str(buffer(_array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, False),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def GetPointerMapping(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, True),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def GetPointerMappingUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, False),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def SetModifierMapping(self, keycodes_per_modifier, keycodes):
        buf = _StringIO()
        buf.write(_pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(_array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, True),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def SetModifierMappingUnchecked(self, keycodes_per_modifier, keycodes):
        buf = _StringIO()
        buf.write(_pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(_array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, False),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def GetModifierMapping(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, True),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def GetModifierMappingUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, False),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def NoOperationChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, True),
                                 xcb.VoidCookie())

    def NoOperation(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, False),
                                 xcb.VoidCookie())


xcb._add_core(xprotoExtension, Setup, _EVENTS, _ERRORS)

* Thu 12 Jun 2014 07:07:35 AM JST
from cStringIO import StringIO as _StringIO
from array import array as _array
from struct import pack as _pack
from xcb import xcb


* Thu 12 Jun 2014 07:11:44 AM JST
import xcb3
c=xcb3.connect()
* Thu 12 Jun 2014 07:12:20 AM JST

* Thu 12 Jun 2014 07:12:20 AM JST

* Thu 12 Jun 2014 07:12:20 AM JST
from xcb3.xproto.wcookie import *

* Thu 12 Jun 2014 07:14:36 AM JST
from xcb3.xproto.reply import *
* Thu 12 Jun 2014 07:16:03 AM JST
_EVENTS
* Thu 12 Jun 2014 07:16:35 AM JST
_EVENTS
* Thu 12 Jun 2014 07:17:09 AM JST
_ERRORS
* Thu 12 Jun 2014 07:17:28 AM JST
_ERRORS
* Thu 12 Jun 2014 07:17:30 AM JST

* Thu 12 Jun 2014 07:17:34 AM JST
event
* Thu 12 Jun 2014 07:27:41 AM JST
xproto.
* Thu 12 Jun 2014 07:28:36 AM JST
xproto.
* Thu 12 Jun 2014 07:31:07 AM JST
def connect(*args, **kwargs):
    r"""SUMMARY

    connection(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    from xcb3.xconnection import Connection as XConnection
    return XConnection.get_instance(*args, **kwargs)

* Thu 12 Jun 2014 07:31:17 AM JST

* Thu 12 Jun 2014 07:31:18 AM JST

* Thu 12 Jun 2014 07:31:18 AM JST
    from xcb3.xconnection import Connection as XConnection

* Thu 12 Jun 2014 07:37:53 AM JST

* Thu 12 Jun 2014 07:37:54 AM JST

* Thu 12 Jun 2014 07:37:54 AM JST
from xcb3.functions import atomidentify

* Thu 12 Jun 2014 07:38:26 AM JST
only_if_exists
* Thu 12 Jun 2014 07:41:21 AM JST

* Thu 12 Jun 2014 07:41:21 AM JST

* Thu 12 Jun 2014 07:41:21 AM JST
        # return atomidentify(self.gettype().name)

* Thu 12 Jun 2014 07:41:23 AM JST

* Thu 12 Jun 2014 07:41:23 AM JST

* Thu 12 Jun 2014 07:41:24 AM JST
        # return self.connection.core.InternAtom.usecache(self.gettype().name)

* Thu 12 Jun 2014 07:50:21 AM JST
functions
* Thu 12 Jun 2014 09:01:20 AM JST

* Thu 12 Jun 2014 09:01:20 AM JST

* Thu 12 Jun 2014 09:01:20 AM JST
from xcb3.xobj.atom.atomidentify import *

* Thu 12 Jun 2014 09:03:33 AM JST
atomidentify
* Thu 12 Jun 2014 09:10:44 AM JST
atomidentify
* Thu 12 Jun 2014 09:10:54 AM JST
            
* Thu 12 Jun 2014 09:11:49 AM JST
pass
* Thu 12 Jun 2014 09:11:52 AM JST
pass
* Thu 12 Jun 2014 09:13:11 AM JST

* Thu 12 Jun 2014 09:15:05 AM JST
aotm
* Thu 12 Jun 2014 09:15:07 AM JST

* Thu 12 Jun 2014 09:15:07 AM JST

* Thu 12 Jun 2014 09:15:07 AM JST
        return atomidentify(self.atomname, display=self.display)

* Thu 12 Jun 2014 09:15:07 AM JST
        return atomidentify(self.atomname, display=self.display)

* Thu 12 Jun 2014 09:15:07 AM JST
        return atomidentify(self.atomname, display=self.display)
        # return self.connection.core.atomidentify(self.atomname)

* Thu 12 Jun 2014 09:15:19 AM JST

* Thu 12 Jun 2014 09:15:19 AM JST

* Thu 12 Jun 2014 09:15:19 AM JST
# from xcb3.xobj.atom.atomidentify import atomidentify

* Thu 12 Jun 2014 09:15:34 AM JST
xobj.
* Thu 12 Jun 2014 09:15:38 AM JST
aotmid
* Thu 12 Jun 2014 09:15:48 AM JST
atomidentify
* Thu 12 Jun 2014 09:17:09 AM JST
self.connection.display, 
* Thu 12 Jun 2014 09:17:22 AM JST
connection, 
* Thu 12 Jun 2014 09:17:22 AM JST
self.connection, 
* Thu 12 Jun 2014 09:17:32 AM JST
connection, 
* Thu 12 Jun 2014 09:17:33 AM JST
self.connection, 
* Thu 12 Jun 2014 09:17:42 AM JST
connection, 
* Thu 12 Jun 2014 09:17:42 AM JST
self.connection, 
* Thu 12 Jun 2014 09:18:45 AM JST
atomidentify
* Thu 12 Jun 2014 09:18:57 AM JST
            
* Thu 12 Jun 2014 09:19:55 AM JST
connection,
* Thu 12 Jun 2014 09:19:55 AM JST
self.connection,
* Thu 12 Jun 2014 09:30:16 AM JST
from xcb3.xproto.cookie import *
from xcb3.xproto.reply import *

* Thu 12 Jun 2014 09:30:23 AM JST

* Thu 12 Jun 2014 09:30:23 AM JST

* Thu 12 Jun 2014 09:30:24 AM JST
from xcb3.xproto.reply import Setup

* Thu 12 Jun 2014 09:30:31 AM JST
_EVENTS
* Thu 12 Jun 2014 09:30:32 AM JST
_ERRORS
* Thu 12 Jun 2014 09:30:35 AM JST
from xcb3.xproto.define import *
* Thu 12 Jun 2014 09:35:19 AM JST

* Thu 12 Jun 2014 09:35:19 AM JST

* Thu 12 Jun 2014 09:35:19 AM JST
from xcb3.functions import atomidentify

* Thu 12 Jun 2014 09:36:22 AM JST

* Thu 12 Jun 2014 09:36:22 AM JST

* Thu 12 Jun 2014 09:36:22 AM JST
from xcb3.functions import atomidentify

* Thu 12 Jun 2014 09:38:34 AM JST
xproto.
* Thu 12 Jun 2014 09:38:36 AM JST
xproto.
* Thu 12 Jun 2014 09:38:39 AM JST

* Thu 12 Jun 2014 09:38:39 AM JST

* Thu 12 Jun 2014 09:38:39 AM JST
        from xcb3.xconnection import Connection

* Thu 12 Jun 2014 09:39:05 AM JST

* Thu 12 Jun 2014 09:39:05 AM JST

* Thu 12 Jun 2014 09:39:05 AM JST
from xcb3.xconnection import Connection

* Thu 12 Jun 2014 09:55:07 AM JST

* Thu 12 Jun 2014 09:55:07 AM JST

* Thu 12 Jun 2014 09:55:07 AM JST
from xcb3.display import Display

* Thu 12 Jun 2014 09:56:09 AM JST

* Thu 12 Jun 2014 09:56:09 AM JST

* Thu 12 Jun 2014 09:56:09 AM JST
        from xcb3.xconnection import Connection

* Thu 12 Jun 2014 09:58:22 AM JST
xcb3.xobj
* Thu 12 Jun 2014 09:59:44 AM JST
AtomName, 
* Thu 12 Jun 2014 09:59:54 AM JST
Atom, 
* Thu 12 Jun 2014 10:00:08 AM JST
AtomPair
* Thu 12 Jun 2014 10:02:18 AM JST
class Display(object):
    r"""
    """

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `display`:
        """
        self.display = display or ''
        self.connection = Connection.get_instance(display=self.display)

* Thu 12 Jun 2014 10:08:38 AM JST

* Thu 12 Jun 2014 10:08:38 AM JST

* Thu 12 Jun 2014 10:08:38 AM JST
from xcb3.xobj.window import Window

* Thu 12 Jun 2014 10:10:59 AM JST
class Display(object):
    r"""
    """

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `display`:
        """
        self.display = display or ''
        self.connection = Connection.get_instance(display=self.display)

* Thu 12 Jun 2014 10:11:49 AM JST
display
* Thu 12 Jun 2014 10:11:50 AM JST
xobj.display
* Thu 12 Jun 2014 10:11:54 AM JST
from xcb3.xconnection import Display
* Thu 12 Jun 2014 10:17:15 AM JST

* Thu 12 Jun 2014 10:17:16 AM JST

* Thu 12 Jun 2014 10:17:16 AM JST
        from xcb3.functions import atomidentify

* Thu 12 Jun 2014 10:27:27 AM JST
insert
* Thu 12 Jun 2014 10:27:28 AM JST
insert-register-disable-exchange
* Thu 12 Jun 2014 10:27:39 AM JST
insert-register-disable-exchange
* Thu 12 Jun 2014 10:28:58 AM JST
insert-register-disable-exchange
* Thu 12 Jun 2014 10:29:08 AM JST
  ()
* Thu 12 Jun 2014 10:37:10 AM JST
class WrapSCREEN(ConnectionAbstract):
    r"""SUMMARY
    """

    def __init__(self, connection, raw):
        r"""

        @Arguments:
        - `raw`:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)
        self._raw = raw

    @property
    def root(self, ):
        r"""SUMMARY

        root()

        @Return:
        """
        from xcb3.xobj.window import Window
        return Window(self._raw.root, display=self.connection.display)

    @property
    def default_colormap(self, ):
        r"""SUMMARY

        default_colormap()

        @Return:
        """
        return self._raw.default_colormap

    @property
    def white_pixel(self, ):
        r"""SUMMARY

        white_pixel()

        @Return:
        """
        return self._raw.white_pixel

    @property
    def black_pixel(self, ):
        r"""SUMMARY

        black_pixel()

        @Return:
        """
        return self._raw.black_pixel

    @property
    def current_input_masks(self, ):
        r"""SUMMARY

        current_input_masks()

        @Return:
        """
        return self._raw.current_input_masks

    @property
    def width_in_pixels(self, ):
        r"""SUMMARY

        width_in_pixels()

        @Return:
        """
        return self._raw.width_in_pixels

    @property
    def height_in_pixels(self, ):
        r"""SUMMARY

        height_in_pixels()

        @Return:
        """
        return self._raw.height_in_pixels

    @property
    def width_in_millimeters(self, ):
        r"""SUMMARY

        width_in_millimeters()

        @Return:
        """
        return self._raw.width_in_millimeters

    @property
    def height_in_millimeters(self, ):
        r"""SUMMARY

        height_in_millimeters()

        @Return:
        """
        return self._raw.height_in_millimeters

    @property
    def min_installed_maps(self, ):
        r"""SUMMARY

        min_installed_maps()

        @Return:
        """
        return self._raw.min_installed_maps

    @property
    def max_installed_maps(self, ):
        r"""SUMMARY

        max_installed_maps()

        @Return:
        """
        return self._raw.max_installed_maps

    @property
    def root_visual(self, ):
        r"""SUMMARY

        root_visual()

        @Return:
        """
        return self._raw.root_visual

    @property
    def backing_stores(self, ):
        r"""SUMMARY

        backing_stores()

        @Return:
        """
        return self._raw.backing_stores

    @property
    def save_unders(self, ):
        r"""SUMMARY

        save_unders()

        @Return:
        """
        return self._raw.save_unders

    @property
    def root_depth(self, ):
        r"""SUMMARY

        root_depth()

        @Return:
        """
        return self._raw.root_depth

    @property
    def allowed_depths_len(self, ):
        r"""SUMMARY

        allowed_depths_len()

        @Return:
        """
        return self._raw.allowed_depths_len

    @property
    def allowed_depths(self, ):
        r"""SUMMARY

        allowed_depths()

        @Return:
        """
        return self._raw.allowed_depths


class WrapSetup(ConnectionAbstract):
    r"""SUMMARY
    """

    def __init__(self, connection, raw):
        r"""

        @Arguments:
        - `raw`:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)
        self._raw = raw

    @property
    def status(self, ):
        r"""SUMMARY

        status()

        @Return:
        """
        return self._raw.status

    @property
    def protocol_major_version(self, ):
        r"""SUMMARY

        protocol_major_version()

        @Return:
        """
        return self._raw.protocol_major_version

    @property
    def protocol_minor_version(self, ):
        r"""SUMMARY

        protocol_minor_version()

        @Return:
        """
        return self._raw.protocol_minor_version

    @property
    def length(self, ):
        r"""SUMMARY

        length()

        @Return:
        """
        return self._raw.length

    @property
    def release_number(self, ):
        r"""SUMMARY

        release_number()

        @Return:
        """
        return self._raw.release_number

    @property
    def resorce_id_base(self, ):
        r"""SUMMARY

        resorce_id_base()

        @Return:
        """
        return self._raw.resorce_id_base

    @property
    def resorce_id_mask(self, ):
        r"""SUMMARY

        resorce_id_mask()

        @Return:
        """
        return self._raw.resorce_id_mask

    @property
    def motion_buffer_size(self, ):
        r"""SUMMARY

        motion_buffer_size()

        @Return:
        """
        return self._raw.motion_buffer_size

    @property
    def vendor_len(self, ):
        r"""SUMMARY

        vendor_len()

        @Return:
        """
        return self._raw.vendor_len

    @property
    def maximum_request_length(self, ):
        r"""SUMMARY

        maximum_request_length()

        @Return:
        """
        return self._raw.maximum_request_length

    @property
    def roots_len(self, ):
        r"""SUMMARY

        roots_len()

        @Return:
        """
        return self._raw.roots_len

    @property
    def pixmap_formats_len(self, ):
        r"""SUMMARY

        pixmap_formats_len()

        @Return:
        """
        return self._raw.pixmap_formats_len

    @property
    def image_byte_order(self, ):
        r"""SUMMARY

        image_byte_order()

        @Return:
        """
        return self._raw.image_byte_order

    @property
    def bitmap_format_scanline_unit(self, ):
        r"""SUMMARY

        bitmap_format_scanline_unit()

        @Return:
        """
        return self._raw.bitmap_format_scanline_unit

    @property
    def bitmap_format_scanline_pad(self, ):
        r"""SUMMARY

        bitmap_format_scanline_pad()

        @Return:
        """
        return self._raw.bitmap_format_scanline_pad

    @property
    def min_keycode(self, ):
        r"""SUMMARY

        min_keycode()

        @Return:
        """
        return self._raw.min_keycode

    @property
    def max_keycode(self, ):
        r"""SUMMARY

        max_keycode()

        @Return:
        """
        return self._raw.max_keycode

    @property
    def vendor(self, ):
        r"""SUMMARY

        vendor()

        @Return:
        """
        return self._raw.vendor

    @property
    def pixmap_formats(self, ):
        r"""SUMMARY

        pixmap_formats()

        @Return:
        """
        return self._raw.pixmap_formats

    @property
    def roots(self, ):
        r"""SUMMARY

        roots()

        @Return:
        """
        return [WrapSCREEN(self.connection, x) for x in self._raw.roots]



* Thu 12 Jun 2014 10:37:29 AM JST

* Thu 12 Jun 2014 10:37:30 AM JST
WrapReplyAbstract
* Thu 12 Jun 2014 10:38:11 AM JST

* Thu 12 Jun 2014 10:38:11 AM JST

* Thu 12 Jun 2014 10:38:11 AM JST
from xcb3.abstract import ConnectionAbstract

* Thu 12 Jun 2014 10:38:32 AM JST

* Thu 12 Jun 2014 10:38:32 AM JST

* Thu 12 Jun 2014 10:38:32 AM JST
        from xcb3.xobj.window import Window

* Thu 12 Jun 2014 10:38:34 AM JST

* Thu 12 Jun 2014 10:38:34 AM JST

* Thu 12 Jun 2014 10:38:34 AM JST
        from xcb3.xobj.window import Window

* Thu 12 Jun 2014 10:44:46 AM JST

* Thu 12 Jun 2014 10:44:46 AM JST

* Thu 12 Jun 2014 10:44:46 AM JST
from xcb3.xobj.atom.atomidentify import *

* Thu 12 Jun 2014 10:45:08 AM JST
cacheatom
* Thu 12 Jun 2014 10:45:10 AM JST
atompair
* Thu 12 Jun 2014 10:45:23 AM JST
atomname
* Thu 12 Jun 2014 10:45:26 AM JST
atom
* Thu 12 Jun 2014 10:45:27 AM JST
atompair
* Thu 12 Jun 2014 10:45:58 AM JST
atomtypes
* Thu 12 Jun 2014 10:51:18 AM JST
WrapGetInputFocusCookie
* Thu 12 Jun 2014 10:52:19 AM JST
self.connection
* Thu 12 Jun 2014 10:52:44 AM JST
            
* Thu 12 Jun 2014 10:52:50 AM JST
    
* Thu 12 Jun 2014 10:52:53 AM JST
            
* Thu 12 Jun 2014 10:53:13 AM JST
WrapGetInputFocusCookie
* Thu 12 Jun 2014 10:53:50 AM JST
class WrapInternAtomCookie(WrapCookieAbstract):
    r"""SUMMARY
    """

    def check(self, ):
        r"""SUMMARY

        check()

        @Return:
        """
        return self._cookie.check()

    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:
        """
        reply = self._cookie.reply()
        reply.name = self._cookie.name
        return wreply.WrapInternAtomReply(self._connection, reply)



* Thu 12 Jun 2014 10:54:07 AM JST
WrapQueryTreeCookie
* Thu 12 Jun 2014 10:55:05 AM JST
WrapGetGeometryCookie
* Thu 12 Jun 2014 10:56:10 AM JST
WrapListPropertyCookie
* Thu 12 Jun 2014 11:00:37 AM JST
core.
* Thu 12 Jun 2014 11:00:37 AM JST
connection.core.
* Thu 12 Jun 2014 11:00:37 AM JST
self.connection.core.
* Thu 12 Jun 2014 11:01:13 AM JST
c=xcb3.connect()
* Thu 12 Jun 2014 11:03:30 AM JST
AtomReplyTypes
* Thu 12 Jun 2014 11:06:11 AM JST
@dispatch.generic()
def atomidentify(atom, display=''):
    r"""SUMMARY

    atomidentify(atom, display='')

    @Arguments:
    - `atom`:
    - `display`:

    @Return:
    """
    return None


@atomidentify.when('isinstance(atom, AtomPair)')
def _atomidentify_AtomPair(atom, display=''):
    r"""SUMMARY

    _atomidentify_AtomPair(atom)

    @Arguments:
    - `atom`:

    @Return:
    """
    return atom


@atomidentify.when('isinstance(atom, str)')
def _atomidentify_str(atom, display=''):
    r"""SUMMARY

    _atomidentify_str(atom, display='')

    @Arguments:
    - `atom`:
    - `display`:

    @Return:
    """
    cache = GlobalCacheAtoms.getatom(atom, display)
    if not cache is None:
        return cache
    conn = Connection.get_instance(display=display)
    atm = conn.core.InternAtom(True, len(atom), atom).reply().atom
    GlobalCacheAtoms.add(atm, display)
    return atm


@atomidentify.when('isinstance(atom, int)')
def _atomidentify_int(atom, display=''):
    r"""SUMMARY

    _atomidentify_int(atom, display='')

    @Arguments:
    - `atom`:
    - `display`:

    @Return:
    """
    cache = GlobalCacheAtoms.getatom(atom, display)
    if not cache is None:
        return cache
    conn = Connection.get_instance(display=display)
    atm = conn.core.GetAtomName(atom).reply().name
    GlobalCacheAtoms.add(atm, display)
    return atm

* Thu 12 Jun 2014 11:06:31 AM JST
from peak.rules import dispatch
* Thu 12 Jun 2014 11:06:40 AM JST
from xcb3.xobj.atom import AtomPair
* Thu 12 Jun 2014 11:06:42 AM JST
from xcb3.xobj.atom import AtomPair # do not remove
* Thu 12 Jun 2014 11:06:45 AM JST
from xcb3.xobj.atom import GlobalCacheAtoms
* Thu 12 Jun 2014 11:07:49 AM JST

* Thu 12 Jun 2014 11:07:49 AM JST

* Thu 12 Jun 2014 11:07:49 AM JST
from xcb3.functions import atomidentify

* Thu 12 Jun 2014 11:08:22 AM JST
            
* Thu 12 Jun 2014 11:09:01 AM JST

* Thu 12 Jun 2014 11:09:01 AM JST

* Thu 12 Jun 2014 11:09:01 AM JST
        from xcb3.functions import atomidentify

* Thu 12 Jun 2014 11:09:21 AM JST

* Thu 12 Jun 2014 11:09:21 AM JST

* Thu 12 Jun 2014 11:09:21 AM JST
from xcb3.functions import atomidentify

* Thu 12 Jun 2014 11:12:29 AM JST
atom.
* Thu 12 Jun 2014 11:12:42 AM JST
atom.
* Thu 12 Jun 2014 11:29:00 AM JST
getproperty
* Thu 12 Jun 2014 11:29:22 AM JST
getproperty
* Thu 12 Jun 2014 11:30:41 AM JST
_NET_CLIENT_LIST
* Thu 12 Jun 2014 11:32:02 AM JST
name
* Thu 12 Jun 2014 11:32:02 AM JST
atom.name
* Thu 12 Jun 2014 11:32:03 AM JST
name), atom.name
* Thu 12 Jun 2014 11:32:04 AM JST
atom.name), atom.name
* Thu 12 Jun 2014 11:32:04 AM JST
len(atom.name), atom.name
* Thu 12 Jun 2014 11:32:05 AM JST
True, len(atom.name), atom.name
* Thu 12 Jun 2014 11:32:13 AM JST
self.gettype()
* Thu 12 Jun 2014 11:32:18 AM JST

* Thu 12 Jun 2014 11:32:18 AM JST

* Thu 12 Jun 2014 11:32:18 AM JST
        atom = self.gettype()

* Thu 12 Jun 2014 11:34:59 AM JST
WrapGetPropertyCookie
* Thu 12 Jun 2014 11:36:08 AM JST
self.send_request(xcb.Request(buf.getvalue(), 20, False, True),
                                 GetPropertyCookie(),
                                 GetPropertyReply)
* Thu 12 Jun 2014 11:36:10 AM JST
self.send_request(xcb.Request(buf.getvalue(), 20, False, True),
                                 GetPropertyCookie(),
                                 GetPropertyReply)
* Thu 12 Jun 2014 11:36:24 AM JST
            
* Thu 12 Jun 2014 11:36:25 AM JST
            
* Thu 12 Jun 2014 11:36:43 AM JST
self.send_request(xcb.Request(buf.getvalue(), 20, False, False),
                                 GetPropertyCookie(),
                                 GetPropertyReply)
* Thu 12 Jun 2014 11:37:05 AM JST
            
* Thu 12 Jun 2014 11:38:26 AM JST
cookie.window, cookie.property = window, property
* Thu 12 Jun 2014 11:40:02 AM JST
connection,
* Thu 12 Jun 2014 11:40:48 AM JST
c.get_setup().roots[0].root.getproperty(False, 351, 33, 0, 10).reply().get_full_value()
* Thu 12 Jun 2014 11:41:54 AM JST
'{0.__class__.__name__}(id={0.id})'
* Thu 12 Jun 2014 11:56:42 AM JST
65011716
* Thu 12 Jun 2014 12:04:04 PM JST

* Thu 12 Jun 2014 12:04:04 PM JST

* Thu 12 Jun 2014 12:04:04 PM JST
        self.connection.core.GetProperty(False, )

* Thu 12 Jun 2014 12:04:43 PM JST
cookie
* Thu 12 Jun 2014 12:04:56 PM JST
cookie.property
* Thu 12 Jun 2014 12:05:05 PM JST
, property
* Thu 12 Jun 2014 12:05:16 PM JST
        cookie.window = window
        cookie.property = property
        cookie.type = type

* Thu 12 Jun 2014 12:05:52 PM JST
getproperty
* Thu 12 Jun 2014 12:06:13 PM JST
            
* Thu 12 Jun 2014 12:09:02 PM JST
50331670
* Thu 12 Jun 2014 12:11:17 PM JST
self._reply.window,
* Thu 12 Jun 2014 12:11:22 PM JST
            
* Thu 12 Jun 2014 12:11:32 PM JST
self.bytes_after / 4 + 1
* Thu 12 Jun 2014 12:11:41 PM JST
length
* Thu 12 Jun 2014 12:11:41 PM JST
get_offset(),
             # length
* Thu 12 Jun 2014 12:11:47 PM JST
            
* Thu 12 Jun 2014 12:11:48 PM JST
             
* Thu 12 Jun 2014 12:11:55 PM JST
            
* Thu 12 Jun 2014 12:14:03 PM JST
'_NET_WM_STATE'
* Thu 12 Jun 2014 12:14:42 PM JST
50331670
* Thu 12 Jun 2014 12:15:00 PM JST
get_
* Thu 12 Jun 2014 12:20:31 PM JST
50331670
* Thu 12 Jun 2014 12:24:27 PM JST
50331670
* Thu 12 Jun 2014 12:24:49 PM JST
type(
* Thu 12 Jun 2014 12:42:59 PM JST
GeometryAbstract
* Thu 12 Jun 2014 12:46:13 PM JST
GeometryX
* Thu 12 Jun 2014 12:48:29 PM JST
from xcb3.xconnection import Display
* Thu 12 Jun 2014 12:48:43 PM JST
connection, 
* Thu 12 Jun 2014 12:48:51 PM JST
None
* Thu 12 Jun 2014 12:49:40 PM JST
self._raw.y
* Thu 12 Jun 2014 12:49:57 PM JST
self._raw.width
* Thu 12 Jun 2014 12:50:16 PM JST
self._raw.height
* Thu 12 Jun 2014 12:51:14 PM JST
reply()
* Thu 12 Jun 2014 12:51:17 PM JST
reply = 
* Thu 12 Jun 2014 12:51:21 PM JST

* Thu 12 Jun 2014 12:51:21 PM JST

* Thu 12 Jun 2014 12:51:21 PM JST
        return WindowGeometry(self.connection, reply, self)

* Thu 12 Jun 2014 12:51:27 PM JST

* Thu 12 Jun 2014 12:51:27 PM JST

* Thu 12 Jun 2014 12:51:27 PM JST
from xcb3.xobj.geometry import WindowGeometry

* Thu 12 Jun 2014 12:51:42 PM JST
c.core.GetGeometry(50331670).reply()
* Thu 12 Jun 2014 12:53:49 PM JST
c=xcb3.connect()
* Thu 12 Jun 2014 12:54:17 PM JST
Display
* Thu 12 Jun 2014 12:54:46 PM JST
connection, 
* Thu 12 Jun 2014 12:54:56 PM JST
self.
* Thu 12 Jun 2014 12:54:59 PM JST
connection, 
* Thu 12 Jun 2014 12:55:26 PM JST
c.core.GetGeometry(50331670).reply()
* Thu 12 Jun 2014 12:57:27 PM JST
_value
* Thu 12 Jun 2014 12:58:21 PM JST
c.core.GetGeometry(50331670).reply().x
* Thu 12 Jun 2014 01:43:47 PM JST
/usr/share/pyshared/IPython
* Thu 12 Jun 2014 01:50:12 PM JST
pass
* Thu 12 Jun 2014 01:50:51 PM JST
pass
* Thu 12 Jun 2014 01:51:32 PM JST
import 
* Thu 12 Jun 2014 01:51:33 PM JST
xcb3 import 
* Thu 12 Jun 2014 01:51:34 PM JST
from xcb3 import 
* Thu 12 Jun 2014 01:54:06 PM JST
self
* Thu 12 Jun 2014 01:54:08 PM JST
self
* Thu 12 Jun 2014 01:55:03 PM JST
pass
* Thu 12 Jun 2014 01:55:33 PM JST
rawconn
* Thu 12 Jun 2014 01:58:41 PM JST
from inspect import getargspec
* Thu 12 Jun 2014 01:59:00 PM JST
    def test_coreattributes(self):
        for name in dir(self.xcbcon.core):
            if name.startswith('_') or not name[0].isupper():
                continue
            self.assertTrue(hasattr(self.xcb2con.core, name),
                            msg='Failed: "{}" has not attribute.'.format(name))

    def test_coremethod_argspec(self, ):
        for name in dir(self.xcbcon.core):
            if name.startswith('_') or not name[0].isupper():
                continue
            xcbmethod = getattr(self.xcbcon.core, name)
            xcb2method = getattr(self.xcb2con.core, name)
            xcbspec = getargspec(xcbmethod)
            xcbspec.args.remove('self')
            xcb2spec = getargspec(xcb2method.__call__)
            xcb2spec.args.remove('self')
            self.assertEqual(xcbspec, xcb2spec,
                             msg='Failed: "{}" not equal argspec "{}" and "{}"'
                             .format(name, xcbspec, xcb2spec))


* Thu 12 Jun 2014 01:59:12 PM JST
xcbcon
* Thu 12 Jun 2014 02:10:04 PM JST

* Thu 12 Jun 2014 02:10:04 PM JST

* Thu 12 Jun 2014 02:10:04 PM JST
        display = ':0.0'

* Thu 12 Jun 2014 02:14:05 PM JST
':0.0'
* Thu 12 Jun 2014 02:14:53 PM JST
method
* Thu 12 Jun 2014 02:14:54 PM JST
class.method
* Thu 12 Jun 2014 02:16:00 PM JST
assertNot
* Thu 12 Jun 2014 02:16:00 PM JST
self.assertNot
* Thu 12 Jun 2014 02:16:50 PM JST
        display = ':0.0'
        conn = xcb3.connect(display=display)

* Thu 12 Jun 2014 02:17:50 PM JST
Connection
* Thu 12 Jun 2014 02:23:26 PM JST
Window
* Thu 12 Jun 2014 02:24:44 PM JST

* Thu 12 Jun 2014 02:24:44 PM JST

* Thu 12 Jun 2014 02:24:44 PM JST
from xcb3.xobj.window import Window

* Thu 12 Jun 2014 02:27:00 PM JST
        cls.display = ''
        cls.rawconn = xcb.connect(cls.display)
        cls.conn = xcb3.connect(cls.display)

* Thu 12 Jun 2014 02:27:07 PM JST
cls
* Thu 12 Jun 2014 02:27:10 PM JST
cls
* Thu 12 Jun 2014 02:27:12 PM JST
cls
* Thu 12 Jun 2014 02:27:24 PM JST
        cls.rawconn.flush()
        cls.conn.flush()
        cls.rawconn.disconnect()
        cls.conn.disconnect()

* Thu 12 Jun 2014 02:27:32 PM JST
cls
* Thu 12 Jun 2014 02:27:32 PM JST
cls
* Thu 12 Jun 2014 02:27:32 PM JST
cls
* Thu 12 Jun 2014 02:27:32 PM JST
cls
* Thu 12 Jun 2014 02:27:57 PM JST
conn
* Thu 12 Jun 2014 02:28:39 PM JST
cls
* Thu 12 Jun 2014 02:28:41 PM JST
cls
* Thu 12 Jun 2014 02:32:24 PM JST
        
* Thu 12 Jun 2014 02:37:18 PM JST
                              
* Thu 12 Jun 2014 02:40:46 PM JST

* Thu 12 Jun 2014 02:40:46 PM JST
Window
* Thu 12 Jun 2014 02:40:49 PM JST
window
* Thu 12 Jun 2014 02:41:01 PM JST
AtomPair
* Thu 12 Jun 2014 02:58:20 PM JST

* Thu 12 Jun 2014 02:58:20 PM JST

* Thu 12 Jun 2014 02:58:20 PM JST
    print(atm)

* Thu 12 Jun 2014 02:58:21 PM JST

* Thu 12 Jun 2014 02:58:21 PM JST

* Thu 12 Jun 2014 02:58:21 PM JST
    print(conn)

* Thu 12 Jun 2014 02:58:35 PM JST
self.display
* Thu 12 Jun 2014 03:01:42 PM JST
atomidentify
* Thu 12 Jun 2014 03:05:18 PM JST
--cover-package=xcb3
* Thu 12 Jun 2014 03:06:35 PM JST
import xcb, xcb.xproto
import xcb3, xcb3.xproto

* Thu 12 Jun 2014 03:07:15 PM JST
pass
* Thu 12 Jun 2014 03:07:55 PM JST

* Thu 12 Jun 2014 03:07:55 PM JST

* Thu 12 Jun 2014 03:07:55 PM JST
        cls

* Thu 12 Jun 2014 03:08:12 PM JST
BITMA
* Thu 12 Jun 2014 03:09:33 PM JST

* Thu 12 Jun 2014 03:09:34 PM JST

* Thu 12 Jun 2014 03:09:34 PM JST
        cls.conn = xcb3.connect()

* Thu 12 Jun 2014 03:09:58 PM JST
str(buffer(_array('b', self.name)))
* Thu 12 Jun 2014 03:12:55 PM JST
atom
* Thu 12 Jun 2014 03:13:03 PM JST
xcb.
* Thu 12 Jun 2014 03:15:21 PM JST
WrapGetGeometryCookie
* Thu 12 Jun 2014 03:15:37 PM JST
WrapGetGeometryCookie
* Thu 12 Jun 2014 03:15:58 PM JST
expect
* Thu 12 Jun 2014 03:16:04 PM JST
atom
* Thu 12 Jun 2014 03:16:04 PM JST
reply().atom
* Thu 12 Jun 2014 03:17:27 PM JST

* Thu 12 Jun 2014 03:17:27 PM JST

* Thu 12 Jun 2014 03:17:27 PM JST
from xcb3.xproto.wcookie import WrapGetGeometryCookie

* Thu 12 Jun 2014 03:18:31 PM JST
AtomTypeSTRINGReply
* Thu 12 Jun 2014 03:18:46 PM JST

* Thu 12 Jun 2014 03:18:46 PM JST

* Thu 12 Jun 2014 03:18:46 PM JST
        WrapGetGeometryCookie

* Thu 12 Jun 2014 03:29:32 PM JST

* Thu 12 Jun 2014 03:29:32 PM JST

* Thu 12 Jun 2014 03:29:32 PM JST
    print(dir(conn))

* Thu 12 Jun 2014 03:29:37 PM JST
conn.core.InternAtom(True, len(atom), atom)
* Thu 12 Jun 2014 03:31:06 PM JST
    def test_gettypeatom(self, ):
        expect = 'STRING'
        got = self.AtomName.gettypeatom()
        self.assertEqual(expect, got,
                         msg='Failed: AtomName.gettypeatom expect: \{}, got: \{}'
                         .format(expect, got))


* Thu 12 Jun 2014 03:31:17 PM JST
        cls.atomname = 'WM_NAME'
        cls.AtomName = AtomName(cls.atomname)

* Thu 12 Jun 2014 03:31:41 PM JST
cls.AtomName
* Thu 12 Jun 2014 03:33:27 PM JST

* Thu 12 Jun 2014 03:33:27 PM JST

* Thu 12 Jun 2014 03:33:27 PM JST
    print(conn.core.InternAtom(True, len(atom), atom))

* Thu 12 Jun 2014 03:40:03 PM JST
(True, len(atom), atom)
* Thu 12 Jun 2014 03:42:24 PM JST
conn.get_instance()
* Thu 12 Jun 2014 03:42:30 PM JST
.core.InternAtom(True, len(atom), atom)
* Thu 12 Jun 2014 03:44:42 PM JST
    def test_gettypeatom(self, ):
        expect = 'STRING'
        got = self.AtomName.gettypeatom()
        self.assertEqual(expect, got,
                         msg='Failed: AtomName.gettypeatom expect: \{}, got: \{}'
                         .format(expect, got))

* Thu 12 Jun 2014 03:45:11 PM JST

* Thu 12 Jun 2014 03:45:11 PM JST

* Thu 12 Jun 2014 03:45:11 PM JST
from struct import pack

* Thu 12 Jun 2014 03:48:53 PM JST
atom
* Thu 12 Jun 2014 03:48:54 PM JST
c.atom
* Thu 12 Jun 2014 03:49:14 PM JST
50331670
* Thu 12 Jun 2014 03:49:23 PM JST
core.
* Thu 12 Jun 2014 03:49:57 PM JST
'_NET_WM_STATE'
* Thu 12 Jun 2014 03:50:06 PM JST
c.atomidentify('_NET_WM_STATE')
* Thu 12 Jun 2014 03:58:35 PM JST
self.conn
* Thu 12 Jun 2014 03:58:58 PM JST
print(dir(self.conn))
* Thu 12 Jun 2014 04:00:30 PM JST

* Thu 12 Jun 2014 04:00:31 PM JST

* Thu 12 Jun 2014 04:00:31 PM JST
        print(dir(self.conn.core))

* Thu 12 Jun 2014 04:00:31 PM JST

* Thu 12 Jun 2014 04:00:31 PM JST

* Thu 12 Jun 2014 04:00:31 PM JST
        print(dir(self.conn.core))

* Thu 12 Jun 2014 04:01:18 PM JST
, xcb.xproto
* Thu 12 Jun 2014 04:01:21 PM JST
, xcb.xproto
* Thu 12 Jun 2014 04:01:48 PM JST

* Thu 12 Jun 2014 04:01:48 PM JST

* Thu 12 Jun 2014 04:01:48 PM JST
import xcb

* Thu 12 Jun 2014 04:01:55 PM JST
 # do not sort
* Thu 12 Jun 2014 04:02:01 PM JST

* Thu 12 Jun 2014 04:02:01 PM JST

* Thu 12 Jun 2014 04:02:01 PM JST
        self.rawconn = xcb.connect(self.display)

* Thu 12 Jun 2014 04:03:14 PM JST
, xcb.xproto
* Thu 12 Jun 2014 04:03:45 PM JST

* Thu 12 Jun 2014 04:03:45 PM JST

* Thu 12 Jun 2014 04:03:45 PM JST
import xcb

* Thu 12 Jun 2014 04:03:51 PM JST

* Thu 12 Jun 2014 04:03:52 PM JST

* Thu 12 Jun 2014 04:03:52 PM JST
        cls.rawconn = xcb.connect()

* Thu 12 Jun 2014 04:03:55 PM JST

* Thu 12 Jun 2014 04:03:55 PM JST

* Thu 12 Jun 2014 04:03:55 PM JST
        cls.rawconn.disconnect()

* Thu 12 Jun 2014 04:04:03 PM JST
rawconn
* Thu 12 Jun 2014 04:11:13 PM JST
import struct
import xcb, xcb.xproto
import xcb.render

NAME = 'TestName'
WMCLASS = 'testclass\x00TestClass\x00'

def simple_teswindow():
    r"""SUMMARY

    simple_teswindow()

    @Return:
    """
    con = xcb.connect()
    con.render = con(xcb.render.key)

    setup = con.get_setup()
    root = setup.roots[0].root
    depth = setup.roots[0].root_depth
    visual = setup.roots[0].root_visual
    white = setup.roots[0].white_pixel

    window = con.generate_id()

    con.core.CreateWindow(depth, window, root,
                          0, 0, 640, 480, 0,
                          xcb.xproto.WindowClass.InputOutput,
                          visual,
                          xcb.xproto.CW.BackPixel | xcb.xproto.CW.EventMask,
                          [white, xcb.xproto.EventMask.Exposure |
                           xcb.xproto.EventMask.KeyPress])
    xa_wm_name = con.core.InternAtom(
        False, len('WM_NAME'), 'WM_NAME').reply().atom
    xa_net_wm_name = con.core.InternAtom(
        False, len('_NET_WM_NAME'), '_NET_WM_NAME').reply().atom
    xa_wmclass = con.core.InternAtom(
        False, len('WM_CLASS'), 'WM_CLASS').reply().atom
    xa_utf8_string = con.core.InternAtom(
        False, len('UTF8_STRING'), 'UTF8_STRING').reply().atom

    xa_net_wm_window_type = con.core.InternAtom(
        False, len('_NET_WM_WINDOW_TYPE'), '_NET_WM_WINDOW_TYPE').reply().atom
    xa_normal = con.core.InternAtom(
        False, len('_NET_WM_WINDOW_TYPE_NORMAL'),
        '_NET_WM_WINDOW_TYPE_NORMAL').reply().atom
    xa_atom = con.core.InternAtom(False, len('ATOM'), 'ATOM').reply().atom
    xa_string = con.core.InternAtom(False, len('STRING'), 'STRING').reply().atom

    con.core.ChangeProperty(xcb.xproto.PropMode.Replace, window,
                            xa_net_wm_name, xa_utf8_string, 8, len(NAME), NAME)

    con.core.ChangeProperty(
        xcb.xproto.PropMode.Replace, window, xa_wmclass, xa_string,
        8, len(WMCLASS), WMCLASS)

    data = struct.pack('I', xa_normal)

    con.core.ChangeProperty(
        xcb.xproto.PropMode.Replace, window, xa_net_wm_window_type,
        xa_atom, 32, 1, data)
    con.core.MapWindow(window)
    con.flush()
    return window

* Thu 12 Jun 2014 04:12:19 PM JST
simple_teswindow
* Thu 12 Jun 2014 04:13:08 PM JST
cls.window
* Thu 12 Jun 2014 04:14:03 PM JST
close
* Thu 12 Jun 2014 04:15:09 PM JST
window
* Thu 12 Jun 2014 04:15:09 PM JST
self.window
* Thu 12 Jun 2014 04:16:12 PM JST
NAME
* Thu 12 Jun 2014 04:18:28 PM JST
    con.core.ChangeProperty(xcb3.xproto.PropMode.Replace, window,
                            xa_net_wm_name, xa_utf8_string, 8, len(NAME), NAME)

* Thu 12 Jun 2014 04:18:44 PM JST
xa_string
* Thu 12 Jun 2014 04:24:31 PM JST
self.AtomName.getproperty(False, self.window, 0, 10)
* Thu 12 Jun 2014 04:25:26 PM JST
got = prop.reply().get_full_value()
* Thu 12 Jun 2014 04:25:56 PM JST
cls.window = simple_teswindow()
* Thu 12 Jun 2014 04:25:58 PM JST
cls.window = simple_teswindow()
* Thu 12 Jun 2014 04:26:01 PM JST
cls
* Thu 12 Jun 2014 04:26:11 PM JST
        cls.window.destroy()
        cls.window.flush()

* Thu 12 Jun 2014 04:26:13 PM JST

* Thu 12 Jun 2014 04:26:13 PM JST

* Thu 12 Jun 2014 04:26:13 PM JST
        pass

* Thu 12 Jun 2014 04:26:17 PM JST
cls
* Thu 12 Jun 2014 04:26:17 PM JST
cls
* Thu 12 Jun 2014 04:29:28 PM JST
simple_teswindow
* Thu 12 Jun 2014 04:29:38 PM JST
75497472
* Thu 12 Jun 2014 04:31:07 PM JST
        atom = self._window.connection.
* Thu 12 Jun 2014 04:31:51 PM JST
from xcb3.xobj.aot
* Thu 12 Jun 2014 04:32:01 PM JST
AtomName
* Thu 12 Jun 2014 04:34:00 PM JST
get_full_value()
* Thu 12 Jun 2014 04:38:44 PM JST
print(repr(buf.getvalue()))
* Thu 12 Jun 2014 04:39:29 PM JST
"\x00\x00\x00\x00\x00\x00\x80\x04'\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00\x05\x00\x00\x00hello"
* Thu 12 Jun 2014 04:40:59 PM JST
75497472
* Thu 12 Jun 2014 04:42:52 PM JST
, xcb3.xproto
* Thu 12 Jun 2014 04:43:08 PM JST
simple_teswindow
* Thu 12 Jun 2014 04:43:14 PM JST
77594624
* Thu 12 Jun 2014 04:45:17 PM JST

* Thu 12 Jun 2014 04:45:17 PM JST

* Thu 12 Jun 2014 04:45:17 PM JST
        print(repr(buf.getvalue()))

* Thu 12 Jun 2014 04:46:43 PM JST
77594624
* Thu 12 Jun 2014 04:48:16 PM JST
"\x00\x00\x00\x00\x00\x00\xa0\x04'\x00\x00\x00\x1f\x00\x00\x00\x08\x00\x00\x00\x05\x00\x00\x00hello"
* Thu 12 Jun 2014 04:48:56 PM JST

* Thu 12 Jun 2014 04:48:56 PM JST

* Thu 12 Jun 2014 04:48:58 PM JST

* Thu 12 Jun 2014 04:48:58 PM JST

* Thu 12 Jun 2014 04:48:58 PM JST
        print(repr(buf.getvalue()))

* Thu 12 Jun 2014 04:48:59 PM JST

* Thu 12 Jun 2014 04:48:59 PM JST

* Thu 12 Jun 2014 04:48:59 PM JST
        print(repr(buf.getvalue()))

* Thu 12 Jun 2014 04:50:26 PM JST
atomtype
* Thu 12 Jun 2014 04:50:32 PM JST
gettypeatom()
* Thu 12 Jun 2014 04:52:53 PM JST

* Thu 12 Jun 2014 04:52:53 PM JST

* Thu 12 Jun 2014 04:52:53 PM JST
        print(atom)

* Thu 12 Jun 2014 04:53:05 PM JST
types.getformat(
* Thu 12 Jun 2014 04:53:07 PM JST
types.getformat()
* Thu 12 Jun 2014 04:53:20 PM JST
types
* Thu 12 Jun 2014 04:54:27 PM JST
self.
* Thu 12 Jun 2014 04:54:43 PM JST

* Thu 12 Jun 2014 04:54:43 PM JST

* Thu 12 Jun 2014 04:54:43 PM JST
        atom = self.getatomname().reply().name

* Thu 12 Jun 2014 04:54:48 PM JST
atom
* Thu 12 Jun 2014 04:54:58 PM JST
self.gettypeatom()
* Thu 12 Jun 2014 04:55:07 PM JST

* Thu 12 Jun 2014 04:55:07 PM JST

* Thu 12 Jun 2014 04:55:07 PM JST
        types = 

* Thu 12 Jun 2014 04:55:21 PM JST
"\x00\x00\x00\x00\x00\x00\x80\x04'\x00\x00\x00\x1f\x00\x00\x00\x08\x00\x00\x00\x05\x00\x00\x00hello"
* Thu 12 Jun 2014 04:56:35 PM JST

* Thu 12 Jun 2014 04:56:35 PM JST

* Thu 12 Jun 2014 04:56:35 PM JST
        print(repr(buf.getvalue()))

* Thu 12 Jun 2014 04:58:33 PM JST
self.AtomName
* Thu 12 Jun 2014 04:58:41 PM JST
prop = self.AtomName.getproperty(False, self.window, 0, 10)
* Thu 12 Jun 2014 04:58:44 PM JST
        prop = self.AtomName.getproperty(False, self.window, 0, 10)
        got = prop.reply().get_full_value()

* Thu 12 Jun 2014 04:58:56 PM JST
        self.assertEqual(expect, got,
                         msg='Failed: AtomName.changeproperty'
                         ' expect: \{}, got: \{}'.format(expect, got))

* Thu 12 Jun 2014 04:59:01 PM JST
change
* Thu 12 Jun 2014 05:01:19 PM JST
self.AtomName
* Thu 12 Jun 2014 05:06:55 PM JST
    def test_cmp(self, ):
        atomname = AtomName('WM_NAME')
        got = self.AtomName.__cmp__(atomname)
        self.assertEqual(0, got, msg='Failed: AtomName.__cmp__ '
                         'expect: \{}, got: \{}'.format(0, got))
        

* Thu 12 Jun 2014 05:07:15 PM JST

* Thu 12 Jun 2014 05:07:15 PM JST

* Thu 12 Jun 2014 05:07:15 PM JST
        atomname = AtomName('WM_NAME')

* Thu 12 Jun 2014 05:08:07 PM JST
AtomName(self.atomname)
* Thu 12 Jun 2014 05:08:24 PM JST
got = self.AtomName.__cmp__(atomname)
* Thu 12 Jun 2014 05:17:28 PM JST
atomname = AtomName(self.atomname)
* Thu 12 Jun 2014 05:17:45 PM JST
self.AtomName.__cmp__(atomname)
* Thu 12 Jun 2014 05:19:53 PM JST
'BITMAP'
* Thu 12 Jun 2014 05:19:54 PM JST
        
* Thu 12 Jun 2014 05:20:01 PM JST
self.AtomName.__eq__(atomname)
* Thu 12 Jun 2014 05:20:05 PM JST

* Thu 12 Jun 2014 05:20:05 PM JST

* Thu 12 Jun 2014 05:20:05 PM JST
        got = 

* Thu 12 Jun 2014 05:20:41 PM JST
self.
* Thu 12 Jun 2014 05:21:10 PM JST
AtomName('BITMAP')
* Thu 12 Jun 2014 05:21:28 PM JST
        
* Thu 12 Jun 2014 05:25:11 PM JST
            self.assertEqual(self.atomname[i], x,
                             msg='Failed: AtomName.__iter__ '
                             'expect: \{}, got: \{}'.format(self.atomname[i], x))

* Thu 12 Jun 2014 05:25:28 PM JST
self.AtomName[i]
* Thu 12 Jun 2014 05:25:43 PM JST
self.atomname[i],
* Thu 12 Jun 2014 05:26:51 PM JST
    def test_str(self, ):
        self.assertEqual(self.atomname, str(self.AtomName),
                         msg='Failed: AtomName.__str__ expect: \{}, got: \{}'
                         .format(self.atomname, str(self.AtomName)))


* Thu 12 Jun 2014 05:27:00 PM JST
str
* Thu 12 Jun 2014 05:27:05 PM JST
def test_str
* Thu 12 Jun 2014 05:27:13 PM JST
self.atomname
* Thu 12 Jun 2014 05:27:21 PM JST
str
* Thu 12 Jun 2014 05:27:24 PM JST
self.atomname
* Thu 12 Jun 2014 05:49:32 PM JST
from array import array

import xcb3, xcb3.xproto # do not sort
from xcb3.xobj.atomname import AtomName
from xcb3.xobj.atomtypes import AtomTypeSTRINGReply
from xcb3.tests import simple_teswindow, NAME

* Thu 12 Jun 2014 05:49:37 PM JST

* Thu 12 Jun 2014 05:49:37 PM JST

* Thu 12 Jun 2014 05:49:37 PM JST
from array import array

* Thu 12 Jun 2014 05:49:51 PM JST
AtomName
* Thu 12 Jun 2014 05:51:19 PM JST
pass
* Thu 12 Jun 2014 05:51:58 PM JST
        self.window.destroy()
        self.window.flush()

* Thu 12 Jun 2014 05:52:04 PM JST
pass
* Thu 12 Jun 2014 05:52:26 PM JST
pass
* Thu 12 Jun 2014 05:52:38 PM JST
packed
* Thu 12 Jun 2014 05:57:09 PM JST
self.AtomName.changeproperty(0, self.window, len(expect), expect)
* Thu 12 Jun 2014 05:58:34 PM JST
core.
* Thu 12 Jun 2014 05:58:36 PM JST
c.core.
* Thu 12 Jun 2014 05:59:53 PM JST
AtomTypeSTRINGReply
* Thu 12 Jun 2014 06:02:21 PM JST
        expect = 8
        got = self.AtomName.getformat()
        self.assertEqual(expect, got,
                         msg='Failed: AtomName.getformat expect: \{}, got: \{}'
                         .format(expect, got))

* Thu 12 Jun 2014 06:05:49 PM JST
expect = 'changedname'
* Thu 12 Jun 2014 06:05:53 PM JST
self.AtomName.changeproperty(0, self.window, len(expect), expect)
* Thu 12 Jun 2014 06:06:27 PM JST
return 
* Thu 12 Jun 2014 06:06:50 PM JST
        got = self.Atom.getproperty(
            False, self.window, 0, 1).reply().get_full_value()

* Thu 12 Jun 2014 06:09:37 PM JST
        expect = ''
        self.AtomName.deleteproperty(self.window)
        self.AtomName.flush()
        prop = self.AtomName.getproperty(False, self.window, 0, 10)
        got = prop.reply().get_full_value()
        self.assertEqual(expect, got,
                         msg='Failed: AtomName.deleteproperty'
                         ' expect: \{}, got: \{}'.format(expect, got))

* Thu 12 Jun 2014 06:11:15 PM JST
    def test_convertselection(self, ):
        self.skipTest('not already understood')


* Thu 12 Jun 2014 06:12:20 PM JST
    def test_cmp(self, ):
        atomname = AtomName(self.atomname)
        got = self.AtomName.__cmp__(atomname)
        self.assertEqual(0, got, msg='Failed: AtomName.__cmp__ '
                         'expect: \{}, got: \{}'.format(0, got))
        otheratomname = AtomName('BITMAP')
        got = self.AtomName.__cmp__(otheratomname)
        self.assertNotEqual(0, got,
                            msg='Failed: AtomName.__cmp__ not expect: {}, got: {}'
                            .format(0, got))


* Thu 12 Jun 2014 06:12:23 PM JST
    def test_cmp(self, ):
        atomname = AtomName(self.atomname)
        got = self.AtomName.__cmp__(atomname)
        self.assertEqual(0, got, msg='Failed: AtomName.__cmp__ '
                         'expect: \{}, got: \{}'.format(0, got))
        otheratomname = AtomName('BITMAP')
        got = self.AtomName.__cmp__(otheratomname)
        self.assertNotEqual(0, got,
                            msg='Failed: AtomName.__cmp__ not expect: {}, got: {}'
                            .format(0, got))

    def test_cmp2(self, ):
        got = self.AtomName.__cmp__(self.atomname)
        self.assertEqual(0, got, msg='Failed: AtomName.__cmp__ '
                         'expect: \{}, got: \{}'.format(0, got))
        got2 = self.AtomName.__cmp__('BITMAP')
        self.assertNotEqual(0, got2,
                            msg='Failed: AtomName.__cmp__ '
                            'not expect: {}, got: {}'.format(0, got2))


* Thu 12 Jun 2014 06:14:40 PM JST
    def test_eq(self, ):
        atomname = AtomName(self.atomname)
        self.assertTrue(self.AtomName.__eq__(atomname))
        self.assertTrue(self.AtomName.__eq__(self.atomname))
        otheratomname = AtomName('BITMAP')
        self.assertFalse(self.AtomName.__eq__(otheratomname))
        self.assertFalse(self.AtomName.__eq__('BITMAP'))

* Thu 12 Jun 2014 06:15:50 PM JST
    def test_ne(self, ):
        self.assertTrue(self.AtomName.__ne__(AtomName('BITMAP')))
        self.assertFalse(self.AtomName.__ne__(AtomName(self.atomname)))

* Thu 12 Jun 2014 06:16:57 PM JST
Atom
* Thu 12 Jun 2014 06:16:58 PM JST
self.Atom
* Thu 12 Jun 2014 06:17:53 PM JST
    def test_int(self, ):
        self.assertIsInstance(int(self.Atom), int)
        self.assertEqual(self.atom, int(self.Atom),
                         msg='Failed: Atom.__int__ expect: \{}, got: \{}'
                         .format(self.atom, int(self.Atom)))


* Thu 12 Jun 2014 06:18:15 PM JST
self.atom
* Thu 12 Jun 2014 06:18:24 PM JST
self.atom
* Thu 12 Jun 2014 06:28:59 PM JST
from struct import pack

import xcb3, xcb3.xproto # do not sort
from xcb3.xobj.atom import Atom
from xcb3.xobj.atomtypes import AtomTypeSTRINGReply
from xcb3.tests import simple_teswindow, NAME

* Thu 12 Jun 2014 06:39:41 PM JST
from xcb3.xobj.atom import Atom
* Thu 12 Jun 2014 06:39:59 PM JST
from xcb3.xobj.atomname import AtomName
* Thu 12 Jun 2014 06:40:08 PM JST
        cls.atomname = 'WM_NAME'
        cls.AtomName = AtomName(cls.atomname)

* Thu 12 Jun 2014 06:40:18 PM JST
        cls.atom = 39
        cls.Atom = Atom(cls.atom)

* Thu 12 Jun 2014 06:40:58 PM JST
AtomPair(cls.Atom, cls.AtomName)
* Thu 12 Jun 2014 06:41:25 PM JST
cls.Atom, 
* Thu 12 Jun 2014 06:41:53 PM JST
pass
* Thu 12 Jun 2014 06:42:20 PM JST
pass
* Thu 12 Jun 2014 06:44:09 PM JST
        expect = pack('I', self.atom)
        got = self.AtomPair.pack()
        self.assertEqual(expect, got,
                         msg='Failed: AtomPair.pack expect: \{}, got: \{}'
                         .format(expect, got))

* Thu 12 Jun 2014 06:45:48 PM JST
        self.assertEqual(expect, got,
                         msg='Failed: AtomPair.packatom expect: \{}, got: \{}'
                         .format(expect, got))

* Thu 12 Jun 2014 06:48:34 PM JST
        expect = AtomTypeSTRINGReply
        got = self.AtomName.gettype()
        self.assertEqual(expect, got,
                         msg='Failed: AtomName.gettype expect: \{}, got: \{}'
                         .format(expect, got))

* Thu 12 Jun 2014 06:49:33 PM JST
        expect = 'STRING'
        got = self.AtomName.gettypeatom()
        self.assertEqual(expect, got,
                         msg='Failed: AtomName.gettypeatom expect: \{}, got: \{}'
                         .format(expect, got))

* Thu 12 Jun 2014 06:51:06 PM JST
        expect = 8
        got = self.AtomName.getformat()
        self.assertEqual(expect, got,
                         msg='Failed: AtomName.getformat expect: \{}, got: \{}'
                         .format(expect, got))

* Fri 13 Jun 2014 08:52:50 AM JST
        expect = NAME
        got = self.Atom.getproperty(
            False, self.window, 0, 1).reply().get_full_value()
        self.assertEqual(expect, got,
                         msg='Failed: AtomName.getproperty expect: \{}, got: \{}'
                         .format(expect, got))

* Fri 13 Jun 2014 08:53:37 AM JST
                         
* Fri 13 Jun 2014 08:54:30 AM JST
        expect = 'changedname'
        self.Atom.changeproperty(0, self.window, len(expect), expect)
        self.Atom.flush()
        got = self.Atom.getproperty(
            False, self.window, 0, 1).reply().get_full_value()
        self.assertEqual(expect, got,
                         msg='Failed: Atom.changeproperty '
                         'expect: \{}, got: \{}'.format(expect, got))

* Fri 13 Jun 2014 09:18:14 AM JST
        expect = ''
        self.Atom.deleteproperty(self.window)
        self.Atom.flush()
        prop = self.Atom.getproperty(False, self.window, 0, 10)
        got = prop.reply().get_full_value()
        self.assertEqual(expect, got,
                         msg='Failed: Atom.deleteproperty'
                         ' expect: \{}, got: \{}'.format(expect, got))

* Fri 13 Jun 2014 09:19:48 AM JST
    def test_convertselection(self, ):
        self.skipTest('not already understood')


* Fri 13 Jun 2014 09:22:32 AM JST
        cls.atomname = 'WM_NAME'
        cls.AtomName = AtomName(cls.atomname)
        cls.atom = 39
        cls.Atom = Atom(cls.atom)
        cls.AtomPair = AtomPair(cls.AtomName, cls.Atom)

* Fri 13 Jun 2014 09:22:38 AM JST
cls.
* Fri 13 Jun 2014 09:22:40 AM JST
cls.
* Fri 13 Jun 2014 09:22:43 AM JST
cls.
* Fri 13 Jun 2014 09:22:45 AM JST
cls.
* Fri 13 Jun 2014 09:22:48 AM JST
cls.
* Fri 13 Jun 2014 09:22:51 AM JST
cls.
* Fri 13 Jun 2014 09:22:52 AM JST
cls.
* Fri 13 Jun 2014 09:22:55 AM JST
cls.
* Fri 13 Jun 2014 09:22:57 AM JST
cls.
* Fri 13 Jun 2014 09:27:08 AM JST
AtomName(atomname)
* Fri 13 Jun 2014 09:27:15 AM JST
atomname
* Fri 13 Jun 2014 09:29:53 AM JST
        self.assertNotEqual(0, self.AtomPair.__cmp__(dummyAtomPair),
                            msg='Failed: AtomPair.__cmp__')

* Fri 13 Jun 2014 09:30:08 AM JST
        self.assertNotEqual(0, self.AtomPair.__cmp__('BITMAP'),
                            msg='Failed: AtomPair.__cmp__')

* Fri 13 Jun 2014 09:30:46 AM JST
        self.assertNotEqual(0, self.AtomPair.__cmp__(5),
                            msg='Failed: AtomPair.__cmp__')

* Fri 13 Jun 2014 09:31:04 AM JST
        self.assertEqual(0, self.AtomPair.__cmp__(atom),
                         msg='Failed: AtomPair.__cmp__ expect: \{}, got: \{}'
                         .format(0, self.AtomPair.__cmp__(atom)))

* Fri 13 Jun 2014 09:33:49 AM JST
        atomname = 'WM_NAME'
        AtomNameinst = AtomName(atomname)
        atom = 39
        Atominst = Atom(atom)
        sameAtomPair = AtomPair(AtomNameinst, Atominst)

* Fri 13 Jun 2014 09:38:28 AM JST
        if predicate.isint(other):
            return self.atom == other

* Fri 13 Jun 2014 09:39:00 AM JST
atomname
* Fri 13 Jun 2014 09:40:02 AM JST
        
* Fri 13 Jun 2014 09:40:09 AM JST
atom
* Fri 13 Jun 2014 09:44:26 AM JST
iterable
* Fri 13 Jun 2014 09:45:36 AM JST
self.
* Fri 13 Jun 2014 09:47:38 AM JST
    def test_int(self, ):
        got = int(self.AtomPair)
        self.assertEqual(self.atom, got,
                         msg='Failed: AtomPair.__int__ expect: \{}, got: \{}'
                         .format(self.atom, got))


* Fri 13 Jun 2014 09:50:01 AM JST
    def test_getitem(self, ):
        for i, x in enumerate(self.atomname, start=0):
            self.assertEqual(x, self.AtomName[i],
                             msg='Failed: AtomName.__getitem__ '
                             'expect: \{}, got: \{}'.format(x, self.AtomName[i]))


* Fri 13 Jun 2014 09:50:06 AM JST
atomname
* Fri 13 Jun 2014 09:50:11 AM JST
name
* Fri 13 Jun 2014 09:51:06 AM JST
        self.assertEqual(hash(self.atomname), hash(self.AtomName),
                         msg='Failed: AtomName.__hash__ expect: \{}, got: \{}'
                         .format(hash(self.atomname), hash(self.AtomName)))


* Fri 13 Jun 2014 09:52:20 AM JST
got
* Fri 13 Jun 2014 09:53:38 AM JST
expect = AtomPair(name=)'
* Fri 13 Jun 2014 09:53:54 AM JST
AtomPair(name=)
* Fri 13 Jun 2014 09:54:00 AM JST
BITMAP
* Fri 13 Jun 2014 10:02:47 AM JST
atom.
* Fri 13 Jun 2014 10:02:49 AM JST
atom.
* Fri 13 Jun 2014 10:02:51 AM JST
atom.
* Fri 13 Jun 2014 10:03:07 AM JST
atom
* Fri 13 Jun 2014 10:03:45 AM JST
conn, 
* Fri 13 Jun 2014 10:03:46 AM JST
self.conn, 
* Fri 13 Jun 2014 10:04:04 AM JST
self.conn.display
* Fri 13 Jun 2014 10:04:16 AM JST
core.
* Fri 13 Jun 2014 10:04:19 AM JST
                            
* Fri 13 Jun 2014 10:04:58 AM JST
self.conn, 
* Fri 13 Jun 2014 10:05:05 AM JST
, self.conn.display
* Fri 13 Jun 2014 10:05:11 AM JST
conn, 
* Fri 13 Jun 2014 10:05:12 AM JST
self.conn, 
* Fri 13 Jun 2014 10:05:14 AM JST
core.
* Fri 13 Jun 2014 10:05:32 AM JST
self.conn, 
* Fri 13 Jun 2014 10:05:40 AM JST
self.conn.display
* Fri 13 Jun 2014 10:05:46 AM JST
conn, 
* Fri 13 Jun 2014 10:05:46 AM JST
self.conn, 
* Fri 13 Jun 2014 10:05:56 AM JST
core.
* Fri 13 Jun 2014 10:05:57 AM JST
                            
* Fri 13 Jun 2014 10:06:06 AM JST
self.conn, 
* Fri 13 Jun 2014 10:06:14 AM JST
self.conn, 
* Fri 13 Jun 2014 10:06:23 AM JST
core.
* Fri 13 Jun 2014 10:06:24 AM JST
                            
* Fri 13 Jun 2014 10:21:13 AM JST
KillClientChecked
* Fri 13 Jun 2014 10:22:48 AM JST
    def flush(self, ):
        r"""SUMMARY

        flush()

        @Return:
        """
        self.connection.flush()

* Fri 13 Jun 2014 10:28:32 AM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 10:33:47 AM JST
from struct import pack
* Fri 13 Jun 2014 10:33:57 AM JST
import xcb3, xcb3.xproto # do not sort
from xcb3.xobj.atom import Atom
from xcb3.xobj.atomtypes import AtomTypeSTRINGReply
from xcb3.tests import simple_teswindow, NAME

* Fri 13 Jun 2014 10:34:04 AM JST
atom
* Fri 13 Jun 2014 10:34:08 AM JST
Atom
* Fri 13 Jun 2014 10:34:12 AM JST

* Fri 13 Jun 2014 10:34:12 AM JST

* Fri 13 Jun 2014 10:34:12 AM JST
from xcb3.xobj.atomtypes import AtomTypeSTRINGReply

* Fri 13 Jun 2014 10:34:14 AM JST
from xcb3.xobj.atomtypes import AtomTypeSTRINGReply

* Fri 13 Jun 2014 10:34:14 AM JST
from xcb3.xobj.atomtypes import AtomTypeSTRINGReply
from xcb3.tests import simple_teswindow, NAME

* Fri 13 Jun 2014 10:35:01 AM JST
from xcb3.tests import simple_teswindow, NAME
* Fri 13 Jun 2014 10:35:03 AM JST
NAME
* Fri 13 Jun 2014 10:35:13 AM JST
pass
* Fri 13 Jun 2014 10:35:59 AM JST
cls.window
* Fri 13 Jun 2014 10:37:16 AM JST
window
* Fri 13 Jun 2014 10:37:17 AM JST
cls.window
* Fri 13 Jun 2014 10:43:26 AM JST

* Fri 13 Jun 2014 10:43:26 AM JST

* Fri 13 Jun 2014 10:43:26 AM JST
            if self.connection == other.connection:

* Fri 13 Jun 2014 10:43:29 AM JST

* Fri 13 Jun 2014 10:43:29 AM JST

* Fri 13 Jun 2014 10:43:29 AM JST
            if self.connection == other.connection:

* Fri 13 Jun 2014 10:43:36 AM JST
                
* Fri 13 Jun 2014 10:43:55 AM JST

* Fri 13 Jun 2014 10:43:55 AM JST

* Fri 13 Jun 2014 10:43:55 AM JST
        else:

* Fri 13 Jun 2014 10:45:18 AM JST
assert
* Fri 13 Jun 2014 10:45:18 AM JST
self.assert
* Fri 13 Jun 2014 10:45:21 AM JST
        self.assertEqual(0, self.resource.__cmp__(other),
                         msg='Failed: class.method expect: \{}, got: \{}'
                         .format(0, self.resource.__cmp__(other)))

* Fri 13 Jun 2014 10:45:26 AM JST
other
* Fri 13 Jun 2014 10:45:37 AM JST
method
* Fri 13 Jun 2014 10:45:37 AM JST
class.method
* Fri 13 Jun 2014 10:45:50 AM JST
Resource.__cmp__
* Fri 13 Jun 2014 10:46:57 AM JST
self.
* Fri 13 Jun 2014 10:48:56 AM JST
self.
* Fri 13 Jun 2014 10:49:32 AM JST
    def test_repr(self, ):
        expect = 'Resource(id={})'.format(int(self.window))
        self.assertEqual(expect, repr(self.resource),
                         msg='Failed: Resource.__repr__ expect: \{}, got: \{}'
                         .format(expect, repr(self.resource)))

* Fri 13 Jun 2014 10:49:52 AM JST
repr
* Fri 13 Jun 2014 10:49:55 AM JST
repr
* Fri 13 Jun 2014 10:51:38 AM JST
        self.window.destroy()
        self.window.flush()

* Fri 13 Jun 2014 10:51:48 AM JST
        self.window.destroy()
        self.window.flush()

* Fri 13 Jun 2014 10:51:57 AM JST
self
* Fri 13 Jun 2014 10:52:00 AM JST
self
* Fri 13 Jun 2014 10:54:00 AM JST
482
* Fri 13 Jun 2014 10:54:01 AM JST
self
* Fri 13 Jun 2014 10:56:31 AM JST
        self.window.destroy()
        self.window.flush()

* Fri 13 Jun 2014 10:57:21 AM JST

* Fri 13 Jun 2014 10:57:21 AM JST

* Fri 13 Jun 2014 10:57:21 AM JST
        xcb3.connect()

* Fri 13 Jun 2014 10:57:24 AM JST
        cls.window = simple_teswindow()
        cls.resource = Resource(int(cls.window))

* Fri 13 Jun 2014 10:57:32 AM JST
cls
* Fri 13 Jun 2014 10:57:35 AM JST
cls
* Fri 13 Jun 2014 10:57:45 AM JST
cls
* Fri 13 Jun 2014 10:59:33 AM JST

* Fri 13 Jun 2014 10:59:33 AM JST

* Fri 13 Jun 2014 10:59:33 AM JST
        cls.resource.connection.disconnect()

* Fri 13 Jun 2014 11:00:16 AM JST

* Fri 13 Jun 2014 11:00:16 AM JST

* Fri 13 Jun 2014 11:00:16 AM JST
        pass

* Fri 13 Jun 2014 11:00:19 AM JST
self
* Fri 13 Jun 2014 11:00:31 AM JST
pass
* Fri 13 Jun 2014 11:11:58 AM JST
GetGeometryUnchecked
* Fri 13 Jun 2014 11:12:25 AM JST
CreatePixmap
* Fri 13 Jun 2014 11:12:35 AM JST
CreatePixmapChecked
* Fri 13 Jun 2014 11:12:37 AM JST
pass
* Fri 13 Jun 2014 11:12:45 AM JST
CreatePixmapChecked
* Fri 13 Jun 2014 11:12:49 AM JST
CreatePixmapChecked
* Fri 13 Jun 2014 11:13:18 AM JST
depth
* Fri 13 Jun 2014 11:14:08 AM JST
CreateGCChecked
* Fri 13 Jun 2014 11:14:17 AM JST
pass
* Fri 13 Jun 2014 11:14:44 AM JST
keys
* Fri 13 Jun 2014 11:15:30 AM JST
CopyAreaChecked
* Fri 13 Jun 2014 11:15:54 AM JST
                  
* Fri 13 Jun 2014 11:15:57 AM JST
src_drawable, 
* Fri 13 Jun 2014 11:15:58 AM JST
                  
* Fri 13 Jun 2014 11:16:03 AM JST
pass
* Fri 13 Jun 2014 11:16:14 AM JST
CopyAreaChecked
* Fri 13 Jun 2014 11:16:22 AM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height
* Fri 13 Jun 2014 11:16:54 AM JST
CopyPlaneChecked
* Fri 13 Jun 2014 11:17:15 AM JST
pass
* Fri 13 Jun 2014 11:17:26 AM JST
CopyPlaneChecked
* Fri 13 Jun 2014 11:17:34 AM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane
* Fri 13 Jun 2014 11:17:37 AM JST
src_drawable
* Fri 13 Jun 2014 11:18:10 AM JST
PolyPointChecked
* Fri 13 Jun 2014 11:18:24 AM JST
coordinate_mode, drawable, gc, points_len, points
* Fri 13 Jun 2014 11:18:28 AM JST
drawable
* Fri 13 Jun 2014 11:18:35 AM JST
gc, 
* Fri 13 Jun 2014 11:18:57 AM JST
points_len,
* Fri 13 Jun 2014 11:20:24 AM JST
PolyLineChecked
* Fri 13 Jun 2014 11:20:39 AM JST
coordinate_mode, drawable, gc, points_len, points
* Fri 13 Jun 2014 11:20:41 AM JST
drawable
* Fri 13 Jun 2014 11:20:49 AM JST
coordinate_mode, 
* Fri 13 Jun 2014 11:20:59 AM JST
coordinate_mode, gc, points_len, points
* Fri 13 Jun 2014 11:21:29 AM JST
PolySegmentChecked
* Fri 13 Jun 2014 11:21:44 AM JST
drawable, gc, segments_len, segments
* Fri 13 Jun 2014 11:21:57 AM JST
drawable, 
* Fri 13 Jun 2014 11:22:00 AM JST
drawable
* Fri 13 Jun 2014 11:22:10 AM JST
PolyRectangleChecked
* Fri 13 Jun 2014 11:22:26 AM JST
drawable, gc, rectangles_len, rectangles
* Fri 13 Jun 2014 11:22:30 AM JST
drawable
* Fri 13 Jun 2014 11:23:09 AM JST
PolyArcChecked
* Fri 13 Jun 2014 11:23:24 AM JST
drawable, gc, arcs_len, arcs
* Fri 13 Jun 2014 11:23:34 AM JST
drawable, 
* Fri 13 Jun 2014 11:23:36 AM JST
drawable
* Fri 13 Jun 2014 11:23:44 AM JST
gc, rectangles_len, rectangles
* Fri 13 Jun 2014 11:24:01 AM JST
FillPolyChecked
* Fri 13 Jun 2014 11:24:14 AM JST
drawable, gc, shape, coordinate_mode, points_len, points
* Fri 13 Jun 2014 11:24:17 AM JST
drawable
* Fri 13 Jun 2014 11:24:24 AM JST
gc, shape, coordinate_mode, points_len, points
* Fri 13 Jun 2014 11:24:38 AM JST
PolyFillRectangleChecked
* Fri 13 Jun 2014 11:24:52 AM JST
drawable, gc, rectangles_len,
                                 rectangles
* Fri 13 Jun 2014 11:24:54 AM JST
                                 
* Fri 13 Jun 2014 11:24:58 AM JST
drawable
* Fri 13 Jun 2014 11:25:02 AM JST
gc, rectangles_len, rectangles
* Fri 13 Jun 2014 11:25:30 AM JST
PolyFillArcChecked
* Fri 13 Jun 2014 11:25:49 AM JST
drawable, gc, arcs_len, arcs
* Fri 13 Jun 2014 11:25:53 AM JST
drawable
* Fri 13 Jun 2014 11:26:00 AM JST
gc, arcs_len, arcs
* Fri 13 Jun 2014 11:26:29 AM JST
PutImageChecked
* Fri 13 Jun 2014 11:26:47 AM JST
format, drawable, gc, width, height, dst_x,
                        dst_y, left_pad, depth, data_len, data
* Fri 13 Jun 2014 11:26:49 AM JST
                        
* Fri 13 Jun 2014 11:26:54 AM JST
drawable
* Fri 13 Jun 2014 11:27:00 AM JST
format, self.id, gc, width, height, dst_x, dst_y, left_pad,
            depth, data_len, data
* Fri 13 Jun 2014 11:27:07 AM JST
id, 
* Fri 13 Jun 2014 11:27:07 AM JST
self.id, 
* Fri 13 Jun 2014 11:27:40 AM JST
GetImageUnchecked
* Fri 13 Jun 2014 11:27:56 AM JST
format, drawable, x, y, width, height,
                          plane_mask
* Fri 13 Jun 2014 11:27:58 AM JST
                          
* Fri 13 Jun 2014 11:28:02 AM JST
drawable
* Fri 13 Jun 2014 11:28:06 AM JST
format, self.id, x, y, width, height, plane_mask
* Fri 13 Jun 2014 11:28:12 AM JST
id, 
* Fri 13 Jun 2014 11:28:12 AM JST
self.id, 
* Fri 13 Jun 2014 11:28:28 AM JST
PolyText8Checked
* Fri 13 Jun 2014 11:28:46 AM JST
drawable, gc, x, y, items_len, items
* Fri 13 Jun 2014 11:28:49 AM JST
drawable
* Fri 13 Jun 2014 11:28:52 AM JST
gc, x, y, items_len, items
* Fri 13 Jun 2014 11:29:03 AM JST
PolyText16Checked
* Fri 13 Jun 2014 11:29:18 AM JST
drawable, gc, x, y, items_len, items
* Fri 13 Jun 2014 11:29:22 AM JST
drawable
* Fri 13 Jun 2014 11:29:28 AM JST
gc, x, y, items_len, items
* Fri 13 Jun 2014 11:29:49 AM JST
ImageText8Checked
* Fri 13 Jun 2014 11:30:02 AM JST
string_len, drawable, gc, x, y, string
* Fri 13 Jun 2014 11:30:07 AM JST
drawable
* Fri 13 Jun 2014 11:30:11 AM JST
string_len, self.id, gc, x, y, string
* Fri 13 Jun 2014 11:30:18 AM JST
id,
* Fri 13 Jun 2014 11:30:18 AM JST
self.id,
* Fri 13 Jun 2014 11:30:27 AM JST
ImageText16Checked
* Fri 13 Jun 2014 11:30:40 AM JST
string_len, drawable, gc, x, y, string
* Fri 13 Jun 2014 11:30:44 AM JST
drawable
* Fri 13 Jun 2014 11:30:49 AM JST
string_len, self.id, gc, x, y, string
* Fri 13 Jun 2014 11:30:54 AM JST
id,
* Fri 13 Jun 2014 11:30:55 AM JST
self.id,
* Fri 13 Jun 2014 11:31:11 AM JST
QueryBestSizeUnchecked
* Fri 13 Jun 2014 11:31:25 AM JST
_class, drawable, width, height
* Fri 13 Jun 2014 11:31:29 AM JST
drawable
* Fri 13 Jun 2014 11:31:32 AM JST
_class, self.id, width, height
* Fri 13 Jun 2014 11:31:37 AM JST
id, 
* Fri 13 Jun 2014 11:31:37 AM JST
self.id, 
* Fri 13 Jun 2014 12:20:03 PM JST
from struct import pack
import xcb3, xcb3.xproto # do not sort
from xcb3.xobj.resource import Resource
from xcb3.tests import simple_teswindow

* Fri 13 Jun 2014 12:20:07 PM JST
resource
* Fri 13 Jun 2014 12:20:10 PM JST
Resource
* Fri 13 Jun 2014 12:20:52 PM JST
llll
* Fri 13 Jun 2014 12:21:49 PM JST
        cls.conn = xcb2.connect()
        cls.window = simple_teswindow()
        cls.drawable = Drawable(cls.conn, cls.window)

* Fri 13 Jun 2014 12:22:04 PM JST
conn, 
* Fri 13 Jun 2014 12:22:04 PM JST
cls.conn, 
* Fri 13 Jun 2014 12:22:06 PM JST
cls.window
* Fri 13 Jun 2014 12:22:20 PM JST
        self.conn.flush()

* Fri 13 Jun 2014 12:22:29 PM JST
        self.conn.flush()

* Fri 13 Jun 2014 12:22:36 PM JST
        cls.conn.core.DestroyWindow(cls.window)
        cls.conn.flush()
        cls.conn.disconnect()

* Fri 13 Jun 2014 12:23:03 PM JST
    def test_get_geometry(self):
        r"""Test Drawable.get_geometry"""
        expect = WindowGeometry
        got = self.drawable.get_geometry()
        self.assertIsInstance(self.window, int)

* Fri 13 Jun 2014 12:24:09 PM JST
WrapGetGeometryCookie
* Fri 13 Jun 2014 12:24:52 PM JST

* Fri 13 Jun 2014 12:24:52 PM JST

* Fri 13 Jun 2014 12:24:52 PM JST
        r"""Test Drawable.get_geometry"""

* Fri 13 Jun 2014 12:30:41 PM JST
def simple_teswindow2():
    r"""SUMMARY

    simple_teswindow()

    @Return:
    """
    CON = xcb2.connect()
    CON.render = CON(xcb2.render.key)
    setup = CON.get_setup()
    root = setup.roots[0].root
    depth = setup.roots[0].root_depth
    visual = setup.roots[0].root_visual
    white = setup.roots[0].white_pixel

    window = CON.generate_id()

    CON.core.CreateWindow(depth, window, root,
                          0, 0, 640, 480, 0,
                          xcb2.xproto.WindowClass.InputOutput,
                          visual,
                          xcb2.xproto.CW.BackPixel, [white])
    CON.flush()
    return window

* Fri 13 Jun 2014 12:30:57 PM JST
import xcb3, xcb3.xproto # do not sort
* Fri 13 Jun 2014 12:31:08 PM JST

* Fri 13 Jun 2014 12:31:08 PM JST

* Fri 13 Jun 2014 12:31:08 PM JST
from struct import pack

* Fri 13 Jun 2014 12:31:09 PM JST

* Fri 13 Jun 2014 12:31:09 PM JST

* Fri 13 Jun 2014 12:31:10 PM JST
from struct import pack

* Fri 13 Jun 2014 12:31:19 PM JST
sort
* Fri 13 Jun 2014 12:31:20 PM JST
not sort
* Fri 13 Jun 2014 12:31:20 PM JST
do not sort
* Fri 13 Jun 2014 12:32:32 PM JST
cls.conn = xcb2.connect()
* Fri 13 Jun 2014 12:32:46 PM JST
        self.window = simple_teswindow2()
        self.Window = Window(self.conn, self.window)
        self.conn.flush()

* Fri 13 Jun 2014 12:32:52 PM JST
conn, 
* Fri 13 Jun 2014 12:32:52 PM JST
self.conn, 
* Fri 13 Jun 2014 12:33:00 PM JST
self.window
* Fri 13 Jun 2014 12:33:14 PM JST
conn.
* Fri 13 Jun 2014 12:33:15 PM JST
cls
* Fri 13 Jun 2014 12:34:00 PM JST
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

* Fri 13 Jun 2014 12:34:12 PM JST
        cls.conn.disconnect()

* Fri 13 Jun 2014 12:34:34 PM JST
    def test_get_attributes(self, ):
        attr = self.Window.get_attributes()
        self.assertIsInstance(
            attr, GetWindowAttributesReply,
            msg='Failed: Window.get_attributes expect: {}, got: {}'
            .format(GetWindowAttributesReply, attr))
        self.assertEqual(
            0, attr.all_event_masks,
            msg='Failed: Window.get_attributes expect: \{}, got: \{}'
            .format(0, attr.all_event_masks))

* Fri 13 Jun 2014 12:34:58 PM JST
GetWindowAttributesReply
* Fri 13 Jun 2014 12:36:44 PM JST
GetWindowAttributesCookie
* Fri 13 Jun 2014 12:37:56 PM JST
    def test_set_attributes(self, ):
        attr = self.Window.get_attributes()
        self.assertEqual(
            0, attr.all_event_masks,
            msg='Failed: Window.get_attributes expect: \{}, got: \{}'
            .format(0, attr.all_event_masks))
        self.Window.change_attributes(CW.EventMask, [EventMask.FocusChange])
        self.conn.flush()
        mask = self.Window.get_attributes().all_event_masks
        self.assertTrue(mask & EventMask.FocusChange)
        self.assertFalse(mask & EventMask.KeyPress)

* Fri 13 Jun 2014 12:39:03 PM JST
GetWindowAttributesCookie
* Fri 13 Jun 2014 12:43:14 PM JST
window
* Fri 13 Jun 2014 12:43:22 PM JST
Window(int(self.window), self.conn.display)
* Fri 13 Jun 2014 12:45:26 PM JST
GetWindowAttributesCookie
* Fri 13 Jun 2014 12:45:40 PM JST
CW.EventMask, [EventMask
* Fri 13 Jun 2014 12:45:45 PM JST
EventMask
* Fri 13 Jun 2014 12:45:46 PM JST
EventMask, [EventMask
* Fri 13 Jun 2014 12:49:21 PM JST

* Fri 13 Jun 2014 12:49:21 PM JST

* Fri 13 Jun 2014 12:49:21 PM JST
        got = 

* Fri 13 Jun 2014 12:49:23 PM JST
self.assertEqual(
* Fri 13 Jun 2014 03:33:11 PM JST
.render = CON(xcb3.render.key)
* Fri 13 Jun 2014 03:33:42 PM JST
    setup = CON.get_setup()
    root = setup.roots[0].root
    depth = setup.roots[0].root_depth
    visual = setup.roots[0].root_visual
    white = setup.roots[0].white_pixel

* Fri 13 Jun 2014 03:33:59 PM JST
CON
* Fri 13 Jun 2014 03:34:52 PM JST
window = CON.generate_id()
* Fri 13 Jun 2014 03:35:08 PM JST
CON
* Fri 13 Jun 2014 03:35:15 PM JST

* Fri 13 Jun 2014 03:35:15 PM JST

* Fri 13 Jun 2014 03:35:16 PM JST
        self.window = simple_teswindow2()

* Fri 13 Jun 2014 03:35:22 PM JST
    CON.core.CreateWindow(depth, window, root,
                          0, 0, 640, 480, 0,
                          xcb3.xproto.WindowClass.InputOutput,
                          visual,
                          xcb3.xproto.CW.BackPixel, [white])

* Fri 13 Jun 2014 03:35:32 PM JST
CON
* Fri 13 Jun 2014 03:36:58 PM JST
0
* Fri 13 Jun 2014 03:37:05 PM JST
480
* Fri 13 Jun 2014 03:39:00 PM JST

* Fri 13 Jun 2014 03:39:00 PM JST

* Fri 13 Jun 2014 03:39:00 PM JST
        self.conn.flu

* Fri 13 Jun 2014 03:39:46 PM JST
Window(int(self.window), self.conn.display)
* Fri 13 Jun 2014 03:39:50 PM JST
self.
* Fri 13 Jun 2014 03:40:17 PM JST
self.depth, self.window, self.root,
                              self.x, self.y, self.width, self.height, 0,
                              xcb3.xproto.WindowClass.InputOutput,
                              self.visual,
                              xcb3.xproto.CW.BackPixel, [self.white]
* Fri 13 Jun 2014 03:40:22 PM JST
window, 
* Fri 13 Jun 2014 03:40:23 PM JST
self.window, 
* Fri 13 Jun 2014 03:40:24 PM JST
                              
* Fri 13 Jun 2014 03:40:27 PM JST
                      
* Fri 13 Jun 2014 03:40:31 PM JST
    
* Fri 13 Jun 2014 03:40:32 PM JST
                      
* Fri 13 Jun 2014 03:40:51 PM JST
                      
* Fri 13 Jun 2014 03:40:54 PM JST
                      
* Fri 13 Jun 2014 03:42:19 PM JST
self.
* Fri 13 Jun 2014 03:47:48 PM JST
self.window
* Fri 13 Jun 2014 03:48:04 PM JST
Window(int(window), self.conn.display)
* Fri 13 Jun 2014 03:52:29 PM JST
core.
* Fri 13 Jun 2014 03:52:30 PM JST
conn.core.
* Fri 13 Jun 2014 04:57:00 PM JST
EventMask
* Fri 13 Jun 2014 04:57:24 PM JST
tests/
* Fri 13 Jun 2014 04:58:55 PM JST
CW.
* Fri 13 Jun 2014 04:59:03 PM JST
EventMask
* Fri 13 Jun 2014 05:02:55 PM JST
import xcb3, xcb3.xproto
* Fri 13 Jun 2014 05:03:03 PM JST
import 
* Fri 13 Jun 2014 05:03:41 PM JST
simple_teswindow
* Fri 13 Jun 2014 05:10:42 PM JST
expect
* Fri 13 Jun 2014 05:10:45 PM JST
expect
* Fri 13 Jun 2014 05:10:49 PM JST

* Fri 13 Jun 2014 05:10:49 PM JST

* Fri 13 Jun 2014 05:10:50 PM JST
        sleep(1)

* Fri 13 Jun 2014 05:11:54 PM JST
seep()
* Fri 13 Jun 2014 05:17:12 PM JST
value
* Fri 13 Jun 2014 05:28:11 PM JST
listinstalledcolormaps
* Fri 13 Jun 2014 05:28:24 PM JST
circulate
* Fri 13 Jun 2014 05:28:38 PM JST
changesaveset
* Fri 13 Jun 2014 05:28:49 PM JST
convertselection
* Fri 13 Jun 2014 05:29:02 PM JST
translatecoordinates
* Fri 13 Jun 2014 05:29:16 PM JST
getmotionevents
* Fri 13 Jun 2014 05:29:30 PM JST
setinputfocus
* Fri 13 Jun 2014 05:29:47 PM JST
setselectionowner
* Fri 13 Jun 2014 05:30:01 PM JST
sendevent
* Fri 13 Jun 2014 05:30:23 PM JST
map
* Fri 13 Jun 2014 05:30:35 PM JST
mapsubwindows
* Fri 13 Jun 2014 05:30:48 PM JST
unmap
* Fri 13 Jun 2014 05:31:00 PM JST
unmapsubwindows
* Fri 13 Jun 2014 05:31:52 PM JST
destroysubwindows
* Fri 13 Jun 2014 05:32:02 PM JST
querytree
* Fri 13 Jun 2014 05:32:14 PM JST
getproperty
* Fri 13 Jun 2014 05:33:12 PM JST
listproperties
* Fri 13 Jun 2014 05:33:25 PM JST
deleteproperty
* Fri 13 Jun 2014 05:33:39 PM JST
rotateproperties
* Fri 13 Jun 2014 05:33:51 PM JST
grabkeyboard
* Fri 13 Jun 2014 05:34:03 PM JST
grabkey
* Fri 13 Jun 2014 05:34:18 PM JST
ungrabkey
* Fri 13 Jun 2014 05:34:30 PM JST
grabbutton
* Fri 13 Jun 2014 05:34:43 PM JST
ungrabbutton
* Fri 13 Jun 2014 05:34:54 PM JST
grabpointer
* Fri 13 Jun 2014 05:35:05 PM JST
querypointer
* Fri 13 Jun 2014 05:35:15 PM JST
warppointer
* Fri 13 Jun 2014 06:00:24 PM JST

* Fri 13 Jun 2014 06:00:24 PM JST

* Fri 13 Jun 2014 06:00:24 PM JST
        sleep(1)

* Fri 13 Jun 2014 06:05:24 PM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 06:08:59 PM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 06:12:30 PM JST
self.Window.map()
* Fri 13 Jun 2014 06:12:39 PM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 10:29:17 PM JST
chan
* Fri 13 Jun 2014 10:32:17 PM JST
assert
* Fri 13 Jun 2014 10:32:27 PM JST
changeproperty?
* Fri 13 Jun 2014 10:35:24 PM JST
        expect = 'changedname'
        atom = self.conn.atomidentify('WM_NAME')
        cookie = self.Window.changeproperty(
            0, atom, atom.gettypeatom(), atom.getformat(), len(expect), expect)
        self.assertIsNone(cookie.check())
        sleep(1)
        cookie = self.Window.getproperty(False, atom, atom.gettypeatom(), 0, 10)
        got = cookie.reply().get_full_value()
        self.assertEqual(expect, got,
                         msg='Failed: Window.changeproperty '
                         'expect: \{}, got: \{}'.format(expect, got))

* Fri 13 Jun 2014 10:35:38 PM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 10:36:49 PM JST

* Fri 13 Jun 2014 10:36:49 PM JST

* Fri 13 Jun 2014 10:36:49 PM JST
        self.assertIsNone(cookie.check())

* Fri 13 Jun 2014 10:37:53 PM JST
        expect = 'changedname'
        atom = self.conn.atomidentify('WM_NAME')
        cookie = self.Window.changeproperty(
            0, atom, atom.gettypeatom(), atom.getformat(), len(expect), expect)
        self.assertIsNone(cookie.check())
        sleep(1)
        cookie = self.Window.getproperty(False, atom, atom.gettypeatom(), 0, 10)
        got = cookie.reply().get_full_value()
        self.assertEqual(expect, got,
                         msg='Failed: Window.changeproperty '
                         'expect: \{}, got: \{}'.format(expect, got))

* Fri 13 Jun 2014 10:38:39 PM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 10:38:53 PM JST
expect
* Fri 13 Jun 2014 10:39:24 PM JST
sleep(0.5)
* Fri 13 Jun 2014 10:41:18 PM JST
GrabMode
* Fri 13 Jun 2014 10:42:15 PM JST
GrabMode.async
* Fri 13 Jun 2014 10:45:47 PM JST
asser
* Fri 13 Jun 2014 10:45:47 PM JST
self.asser
* Fri 13 Jun 2014 10:45:52 PM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 10:46:38 PM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 10:50:26 PM JST
GrabButton
* Fri 13 Jun 2014 10:55:57 PM JST
EventMask.ButtonPress
* Fri 13 Jun 2014 10:57:45 PM JST
GrabMode.Async
* Fri 13 Jun 2014 10:58:28 PM JST
NamedButtonIndex
* Fri 13 Jun 2014 10:58:54 PM JST
NamedButtonIndex
* Fri 13 Jun 2014 10:59:27 PM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 10:59:54 PM JST
NamedButtonIndex.Left
* Fri 13 Jun 2014 11:01:23 PM JST
Ungra
* Fri 13 Jun 2014 11:01:31 PM JST
NamedButtonIndex.Left
* Fri 13 Jun 2014 11:01:51 PM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 11:03:55 PM JST
xproto
* Fri 13 Jun 2014 11:05:33 PM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 11:07:21 PM JST

* Fri 13 Jun 2014 11:07:21 PM JST

* Fri 13 Jun 2014 11:07:22 PM JST
        self.assertIsNone(cookie.check())

* Fri 13 Jun 2014 11:11:06 PM JST
        expect = 'changedname'
        atom = self.conn.atomidentify('WM_NAME')
        cookie = self.Window.changeproperty(
            0, atom, atom.gettypeatom(), atom.getformat(), len(expect), expect)

* Fri 13 Jun 2014 11:40:15 PM JST
(False, cls.window, EventMask.KeyPress,
                       '\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00'
                       + winbin + '\x00\x00\x00\x00\x00\x00\x00\x00'
                       '\x00\x00\x00\x00\x00\x00\x01\x00'
* Fri 13 Jun 2014 11:40:54 PM JST
cls
* Fri 13 Jun 2014 11:40:58 PM JST
window, 
* Fri 13 Jun 2014 11:40:59 PM JST
self.window, 
* Fri 13 Jun 2014 11:41:04 PM JST
winbin
* Fri 13 Jun 2014 11:41:22 PM JST
            
* Fri 13 Jun 2014 11:41:27 PM JST
    
* Fri 13 Jun 2014 11:42:52 PM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 11:48:28 PM JST
WIndow
* Fri 13 Jun 2014 11:48:48 PM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 11:49:11 PM JST
WIndo
* Fri 13 Jun 2014 11:49:23 PM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 11:49:44 PM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 11:52:00 PM JST
self.assertIsNone(cookie.check())
* Fri 13 Jun 2014 11:52:56 PM JST
root_
* Sat 14 Jun 2014 12:24:42 AM JST
            
* Sat 14 Jun 2014 12:24:47 AM JST
_aotm
* Sat 14 Jun 2014 12:39:11 AM JST
import xcb3, xcb3.xproto, xcb3.render
from xcb3.xobj.window import Window

* Sat 14 Jun 2014 12:39:24 AM JST
window
* Sat 14 Jun 2014 12:39:27 AM JST
Window
* Sat 14 Jun 2014 12:41:59 AM JST
        cls.conn = xcb3.connect()
        cls.render = cls.conn(xcb3.render.key)
        cls.setup = cls.conn.get_setup()
        cls.root = cls.setup.roots[0].root
        cls.depth = cls.setup.roots[0].root_depth
        cls.visual = cls.setup.roots[0].root_visual
        cls.white = cls.setup.roots[0].white_pixel
        cls.x, cls.y, cls.width, cls.height = 0, 0, 640, 480

* Sat 14 Jun 2014 12:42:22 AM JST
        self.window = self.conn.generate_id()
        self.conn.core.CreateWindow(self.depth, self.window, self.root,
                              self.x, self.y, self.width, self.height, 0,
                              xcb3.xproto.WindowClass.InputOutput,
                              self.visual,
                              xcb3.xproto.CW.BackPixel, [self.white])

* Sat 14 Jun 2014 12:42:34 AM JST
self
* Sat 14 Jun 2014 12:42:38 AM JST
self
* Sat 14 Jun 2014 12:42:44 AM JST
        self.conn.core.CreateWindow(self.depth, self.window, self.root,
                              self.x, self.y, self.width, self.height, 0,
                              xcb3.xproto.WindowClass.InputOutput,
                              self.visual,
                              xcb3.xproto.CW.BackPixel, [self.white])

* Sat 14 Jun 2014 12:42:48 AM JST
self
* Sat 14 Jun 2014 12:42:52 AM JST
self
* Sat 14 Jun 2014 12:43:12 AM JST
self.conn.flush()
* Sat 14 Jun 2014 12:43:19 AM JST
self
* Sat 14 Jun 2014 12:43:35 AM JST
cls.conn.disconnect()
* Sat 14 Jun 2014 12:43:40 AM JST
self.conn.core.DestroyWindow(self.window)
* Sat 14 Jun 2014 12:43:49 AM JST
self
* Sat 14 Jun 2014 12:43:52 AM JST
self
* Sat 14 Jun 2014 12:48:37 AM JST
pass
* Sat 14 Jun 2014 12:49:11 AM JST
self
* Sat 14 Jun 2014 12:49:46 AM JST
self
* Sat 14 Jun 2014 12:55:06 AM JST
GeometryAbstract(10)
* Sat 14 Jun 2014 12:57:13 AM JST
        
* Sat 14 Jun 2014 12:57:14 AM JST
other
* Sat 14 Jun 2014 12:57:56 AM JST
    def __ne__(self, other):
        return not (self == other)

* Sat 14 Jun 2014 12:58:16 AM JST
other = GeometryAbstract(10)
* Sat 14 Jun 2014 12:58:36 AM JST
        
* Sat 14 Jun 2014 01:02:06 AM JST
cls.geometry = GeometryAbstract(10)
* Sat 14 Jun 2014 01:08:24 AM JST
cls.geometry = GeometryShortAbstract(10)
* Sat 14 Jun 2014 01:08:38 AM JST

* Sat 14 Jun 2014 01:08:38 AM JST

* Sat 14 Jun 2014 01:08:38 AM JST
        cls.conn.core.DestroyWindow(cls.window)

* Sat 14 Jun 2014 01:08:40 AM JST
        cls.conn.core.DestroyWindow(cls.window)

* Sat 14 Jun 2014 01:08:40 AM JST
        cls.conn.core.DestroyWindow(cls.window)
        cls.conn.flush()

* Sat 14 Jun 2014 01:11:33 AM JST
    def translatecoordinates(self, ): 
        self.skipTest('reason')
    def createwindow(self, ): 
        self.skipTest('reason')
    def reparentwindow(self, ): 
        self.skipTest('reason')
    def warppointer(self, ): 
        self.skipTest('reason')
    def cleararea(self, ): 
        self.skipTest('reason')
    def copyarea(self, ): 
        self.skipTest('reason')
    def copyplane(self, ): 
        self.skipTest('reason')
    def putimage(self, ): 
        self.skipTest('reason')
    def getimage(self, ): 
        self.skipTest('reason')
    def polytext8(self, ): 
        self.skipTest('reason')
    def polytext16(self, ): 
        self.skipTest('reason')
    def imagetext8(self, ): 
        self.skipTest('reason')
    def imagetext16(self, ): 
        self.skipTest('reason')
    def createcursor(self, ): 
        self.skipTest('reason')
* Sat 14 Jun 2014 01:23:10 AM JST
        cls.conn = xcb3.connect()
        cls.render = cls.conn(xcb3.render.key)
        cls.setup = cls.conn.get_setup()
        cls.root = cls.setup.roots[0].root
        cls.depth = cls.setup.roots[0].root_depth
        cls.visual = cls.setup.roots[0].root_visual
        cls.white = cls.setup.roots[0].white_pixel
        cls.x, cls.y, cls.width, cls.height = 0, 0, 640, 480

* Sat 14 Jun 2014 01:23:23 AM JST
10
* Sat 14 Jun 2014 01:23:36 AM JST
self.window = self.conn.generate_id()
* Sat 14 Jun 2014 01:23:53 AM JST
self
* Sat 14 Jun 2014 01:23:56 AM JST
self
* Sat 14 Jun 2014 01:26:10 AM JST
xcb3.xproto.WindowClass.InputOutput,
                               self.visual, xcb3.xproto.CW.BackPixel,
* Sat 14 Jun 2014 01:26:22 AM JST
[self.white]
* Sat 14 Jun 2014 01:26:50 AM JST
self.assertIsNone(cookie.check())
* Sat 14 Jun 2014 01:27:29 AM JST

* Sat 14 Jun 2014 01:27:29 AM JST

* Sat 14 Jun 2014 01:27:29 AM JST
        self.skipTest('reason')

* Sat 14 Jun 2014 01:28:09 AM JST
cls.conn.disconnect()
* Sat 14 Jun 2014 01:30:58 AM JST
class TestGeometryX(MockerTestCase):
    @classmethod
    def setUpClass(cls):
        cls.conn = xcb3.connect()
        cls.render = cls.conn(xcb3.render.key)
        cls.setup = cls.conn.get_setup()
        cls.root = cls.setup.roots[0].root
        cls.depth = cls.setup.roots[0].root_depth
        cls.visual = cls.setup.roots[0].root_visual
        cls.white = cls.setup.roots[0].white_pixel
        cls.x, cls.y, cls.width, cls.height = 10, 0, 640, 480
        cls.window = cls.conn.generate_id()
        cls.geometry = GeometryX(cls.x)

    def setUp(self):
        self.mocker.replay()

    def translatecoordinates(self, ):
        self.skipTest('reason')

    def createwindow(self, ):
        cookie = self.geometry.createwindow(
            self.depth, self.window, self.root, self.y, self.width, self.height,
            0, xcb3.xproto.WindowClass.InputOutput,
            self.visual, xcb3.xproto.CW.BackPixel, [self.white])
        self.assertIsNone(cookie.check())
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

    def reparentwindow(self, ):
        self.skipTest('reason')
    def warppointer(self, ):
        self.skipTest('reason')
    def cleararea(self, ):
        self.skipTest('reason')
    def copyarea(self, ):
        self.skipTest('reason')
    def copyplane(self, ):
        self.skipTest('reason')
    def putimage(self, ):
        self.skipTest('reason')
    def getimage(self, ):
        self.skipTest('reason')
    def polytext8(self, ):
        self.skipTest('reason')
    def polytext16(self, ):
        self.skipTest('reason')
    def imagetext8(self, ):
        self.skipTest('reason')
    def imagetext16(self, ):
        self.skipTest('reason')
    def createcursor(self, ):
        self.skipTest('reason')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.disconnect()

* Sat 14 Jun 2014 01:43:49 AM JST
class TestGeometryY(MockerTestCase):
    @classmethod
    def setUpClass(cls):
        cls.conn = xcb3.connect()
        cls.render = cls.conn(xcb3.render.key)
        cls.setup = cls.conn.get_setup()
        cls.root = cls.setup.roots[0].root
        cls.depth = cls.setup.roots[0].root_depth
        cls.visual = cls.setup.roots[0].root_visual
        cls.white = cls.setup.roots[0].white_pixel
        cls.x, cls.y, cls.width, cls.height = 0, 10, 640, 480
        cls.window = cls.conn.generate_id()
        cls.geometry = GeometryY(cls.y)

    def setUp(self):
        self.mocker.replay()

    def translatecoordinates(self, ):
        self.skipTest('reason')

    def createwindow(self, ):
        cookie = self.geometry.createwindow(
            self.depth, self.window, self.root, self.x, self.width, self.height,
            0, xcb3.xproto.WindowClass.InputOutput,
            self.visual, xcb3.xproto.CW.BackPixel, [self.white])
        self.assertIsNone(cookie.check())
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

    def reparentwindow(self, ):
        self.skipTest('reason')
    def warppointer(self, ):
        self.skipTest('reason')
    def cleararea(self, ):
        self.skipTest('reason')
    def copyarea(self, ):
        self.skipTest('reason')
    def copyplane(self, ):
        self.skipTest('reason')
    def putimage(self, ):
        self.skipTest('reason')
    def getimage(self, ):
        self.skipTest('reason')
    def polytext8(self, ):
        self.skipTest('reason')
    def polytext16(self, ):
        self.skipTest('reason')
    def imagetext8(self, ):
        self.skipTest('reason')
    def imagetext16(self, ):
        self.skipTest('reason')
    def createcursor(self, ):
        self.skipTest('reason')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.disconnect()

* Sat 14 Jun 2014 01:44:12 AM JST
    def translatecoordinates(self, ):
        self.skipTest('reason')

* Sat 14 Jun 2014 01:44:23 AM JST
    def getx(self, ):
        self.skipTest('reason')


* Sat 14 Jun 2014 01:44:33 AM JST
get
* Sat 14 Jun 2014 01:44:37 AM JST
    def setx(self, ):
        self.skipTest('reason')


* Sat 14 Jun 2014 01:45:04 AM JST
x, 
* Sat 14 Jun 2014 01:45:04 AM JST
self.x, 
* Sat 14 Jun 2014 01:45:40 AM JST
        
* Sat 14 Jun 2014 01:45:48 AM JST
y
* Sat 14 Jun 2014 01:45:48 AM JST
cls.y
* Sat 14 Jun 2014 01:46:40 AM JST
Display
* Sat 14 Jun 2014 01:46:49 AM JST

* Sat 14 Jun 2014 01:46:49 AM JST

* Sat 14 Jun 2014 01:46:49 AM JST
        Display.__init__(self, display)

* Sat 14 Jun 2014 01:48:26 AM JST
class TestGeometryXY(MockerTestCase):
    @classmethod
    def setUpClass(cls):
        cls.conn = xcb3.connect()
        cls.render = cls.conn(xcb3.render.key)
        cls.setup = cls.conn.get_setup()
        cls.root = cls.setup.roots[0].root
        cls.depth = cls.setup.roots[0].root_depth
        cls.visual = cls.setup.roots[0].root_visual
        cls.white = cls.setup.roots[0].white_pixel
        cls.x, cls.y, cls.width, cls.height = 10, 10, 640, 480
        cls.window = cls.conn.generate_id()
        cls.geometryx = GeometryX(cls.x)
        cls.geometryy = GeometryX(cls.y)
        cls.geometry = GeometryXY(cls.geometryx, cls.geometryy)

    def setUp(self):
        self.mocker.replay()

    def getx(self, ):
        self.skipTest('reason')

    def gety(self, ):
        self.skipTest('reason')

    def setx(self, ):
        self.skipTest('reason')

    def sety(self, ):
        self.skipTest('reason')

    def translatecoordinates(self, ):
        self.skipTest('reason')

    def createwindow(self, ):
        cookie = self.geometry.createwindow(
            self.depth, self.window, self.root, self.width, self.height,
            0, xcb3.xproto.WindowClass.InputOutput,
            self.visual, xcb3.xproto.CW.BackPixel, [self.white])
        self.assertIsNone(cookie.check())
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

    def reparentwindow(self, ):
        self.skipTest('reason')
    def warppointer(self, ):
        self.skipTest('reason')
    def cleararea(self, ):
        self.skipTest('reason')
    def copyarea(self, ):
        self.skipTest('reason')
    def copyplane(self, ):
        self.skipTest('reason')
    def putimage(self, ):
        self.skipTest('reason')
    def getimage(self, ):
        self.skipTest('reason')
    def polytext8(self, ):
        self.skipTest('reason')
    def polytext16(self, ):
        self.skipTest('reason')
    def imagetext8(self, ):
        self.skipTest('reason')
    def imagetext16(self, ):
        self.skipTest('reason')
    def createcursor(self, ):
        self.skipTest('reason')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.disconnect()



* Sat 14 Jun 2014 01:49:44 AM JST
Display
* Sat 14 Jun 2014 01:49:54 AM JST

* Sat 14 Jun 2014 01:49:54 AM JST

* Sat 14 Jun 2014 01:49:54 AM JST
        Display.__init__(self, display)

* Sat 14 Jun 2014 01:51:44 AM JST
width
* Sat 14 Jun 2014 01:51:46 AM JST
height
* Sat 14 Jun 2014 01:52:04 AM JST
class TestGeometryY(MockerTestCase):
    @classmethod
    def setUpClass(cls):
        cls.conn = xcb3.connect()
        cls.render = cls.conn(xcb3.render.key)
        cls.setup = cls.conn.get_setup()
        cls.root = cls.setup.roots[0].root
        cls.depth = cls.setup.roots[0].root_depth
        cls.visual = cls.setup.roots[0].root_visual
        cls.white = cls.setup.roots[0].white_pixel
        cls.x, cls.y, cls.width, cls.height = 0, 10, 640, 480
        cls.window = cls.conn.generate_id()
        cls.geometry = GeometryY(cls.y)

    def setUp(self):
        self.mocker.replay()

    def translatecoordinates(self, ):
        self.skipTest('reason')

    def createwindow(self, ):
        cookie = self.geometry.createwindow(
            self.depth, self.window, self.root, self.x, self.width, self.height,
            0, xcb3.xproto.WindowClass.InputOutput,
            self.visual, xcb3.xproto.CW.BackPixel, [self.white])
        self.assertIsNone(cookie.check())
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

    def reparentwindow(self, ):
        self.skipTest('reason')
    def warppointer(self, ):
        self.skipTest('reason')
    def cleararea(self, ):
        self.skipTest('reason')
    def copyarea(self, ):
        self.skipTest('reason')
    def copyplane(self, ):
        self.skipTest('reason')
    def putimage(self, ):
        self.skipTest('reason')
    def getimage(self, ):
        self.skipTest('reason')
    def polytext8(self, ):
        self.skipTest('reason')
    def polytext16(self, ):
        self.skipTest('reason')
    def imagetext8(self, ):
        self.skipTest('reason')
    def imagetext16(self, ):
        self.skipTest('reason')
    def createcursor(self, ):
        self.skipTest('reason')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.disconnect()



* Sat 14 Jun 2014 01:52:35 AM JST
width
* Sat 14 Jun 2014 01:53:24 AM JST
class TestGeometryWidth(MockerTestCase):
    @classmethod
    def setUpClass(cls):
        cls.conn = xcb3.connect()
        cls.render = cls.conn(xcb3.render.key)
        cls.setup = cls.conn.get_setup()
        cls.root = cls.setup.roots[0].root
        cls.depth = cls.setup.roots[0].root_depth
        cls.visual = cls.setup.roots[0].root_visual
        cls.white = cls.setup.roots[0].white_pixel
        cls.x, cls.y, cls.width, cls.height = 0, 10, 640, 480
        cls.window = cls.conn.generate_id()
        cls.geometry = GeometryWidth(cls.width)

    def setUp(self):
        self.mocker.replay()

    def translatecoordinates(self, ):
        self.skipTest('reason')

    def createwindow(self, ):
        cookie = self.geometry.createwindow(
            self.depth, self.window, self.root, self.x, self.y, self.height,
            0, xcb3.xproto.WindowClass.InputOutput,
            self.visual, xcb3.xproto.CW.BackPixel, [self.white])
        self.assertIsNone(cookie.check())
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

    def reparentwindow(self, ):
        self.skipTest('reason')
    def warppointer(self, ):
        self.skipTest('reason')
    def cleararea(self, ):
        self.skipTest('reason')
    def copyarea(self, ):
        self.skipTest('reason')
    def copyplane(self, ):
        self.skipTest('reason')
    def putimage(self, ):
        self.skipTest('reason')
    def getimage(self, ):
        self.skipTest('reason')
    def polytext8(self, ):
        self.skipTest('reason')
    def polytext16(self, ):
        self.skipTest('reason')
    def imagetext8(self, ):
        self.skipTest('reason')
    def imagetext16(self, ):
        self.skipTest('reason')
    def createcursor(self, ):
        self.skipTest('reason')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.disconnect()



* Sat 14 Jun 2014 01:53:40 AM JST
width
* Sat 14 Jun 2014 01:53:45 AM JST
height
* Sat 14 Jun 2014 01:55:00 AM JST
class TestGeometryShortAbstract(MockerTestCase):
    """2014/06/14"""
    @classmethod
    def setUpClass(cls):
        cls.geometry = GeometryShortAbstract(10)

    def setUp(self):
        self.mocker.replay()

    def test_pack(self):
        expect = pack('h', 10)
        got = self.geometry.pack()
        self.assertEqual(expect, got)

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        pass

* Sat 14 Jun 2014 01:58:59 AM JST
Display
* Sat 14 Jun 2014 01:59:09 AM JST

* Sat 14 Jun 2014 01:59:09 AM JST

* Sat 14 Jun 2014 01:59:09 AM JST
        Display.__init__(self, display)

* Sat 14 Jun 2014 01:59:11 AM JST
display
* Sat 14 Jun 2014 01:59:13 AM JST
display
* Sat 14 Jun 2014 02:00:57 AM JST
widthheight
* Sat 14 Jun 2014 02:01:13 AM JST
class TestGeometryWidthHeight(MockerTestCase):
    @classmethod
    def setUpClass(cls):
        cls.conn = xcb3.connect()
        cls.render = cls.conn(xcb3.render.key)
        cls.setup = cls.conn.get_setup()
        cls.root = cls.setup.roots[0].root
        cls.depth = cls.setup.roots[0].root_depth
        cls.visual = cls.setup.roots[0].root_visual
        cls.white = cls.setup.roots[0].white_pixel
        cls.x, cls.y, cls.width, cls.height = 10, 10, 640, 480
        cls.window = cls.conn.generate_id()
        cls.geometryw = GeometryWidth(cls.width)
        cls.geometryh = GeometryHeight(cls.height)
        cls.geometry = GeometryWidthHeight(cls.geometryw, cls.geometryh)

    def setUp(self):
        self.mocker.replay()

    def getx(self, ):
        self.skipTest('reason')

    def gety(self, ):
        self.skipTest('reason')

    def setx(self, ):
        self.skipTest('reason')

    def sety(self, ):
        self.skipTest('reason')

    def translatecoordinates(self, ):
        self.skipTest('reason')

    def createwindow(self, ):
        cookie = self.geometry.createwindow(
            self.depth, self.window, self.root, self.x, self.y,
            0, xcb3.xproto.WindowClass.InputOutput,
            self.visual, xcb3.xproto.CW.BackPixel, [self.white])
        self.assertIsNone(cookie.check())
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

    def reparentwindow(self, ):
        self.skipTest('reason')
    def warppointer(self, ):
        self.skipTest('reason')
    def cleararea(self, ):
        self.skipTest('reason')
    def copyarea(self, ):
        self.skipTest('reason')
    def copyplane(self, ):
        self.skipTest('reason')
    def putimage(self, ):
        self.skipTest('reason')
    def getimage(self, ):
        self.skipTest('reason')
    def polytext8(self, ):
        self.skipTest('reason')
    def polytext16(self, ):
        self.skipTest('reason')
    def imagetext8(self, ):
        self.skipTest('reason')
    def imagetext16(self, ):
        self.skipTest('reason')
    def createcursor(self, ):
        self.skipTest('reason')

    def tearDown(self):
        pass

    @classmethod
    def tearDownClass(cls, ):
        cls.conn.disconnect()



* Sat 14 Jun 2014 02:01:49 AM JST
        cls.geometryx = GeometryX(cls.x)
        cls.geometryy = GeometryX(cls.y)
        cls.geometry = GeometryXY(cls.geometryx, cls.geometryy)

* Sat 14 Jun 2014 02:03:16 AM JST
self.x, self.y,
* Sat 14 Jun 2014 02:04:08 AM JST
    def getwidth(self, ):
        self.skipTest('reason')

    def getheight(self, ):
        self.skipTest('reason')

    def setwidth(self, ):
        self.skipTest('reason')

    def setheight(self, ):
        self.skipTest('reason')


* Sat 14 Jun 2014 09:49:02 AM JST
(
* Sat 14 Jun 2014 10:02:44 AM JST
get_launcher_options
* Sat 14 Jun 2014 11:03:20 AM JST
Modifiers
* Sat 14 Jun 2014 11:04:33 AM JST

* Sat 14 Jun 2014 11:04:35 AM JST
modifiers
* Sat 14 Jun 2014 11:04:40 AM JST
Modifiers
* Sat 14 Jun 2014 11:06:40 AM JST
abstract
* Sat 14 Jun 2014 11:06:45 AM JST
disp
* Sat 14 Jun 2014 11:06:48 AM JST
ConnectionAbstract
* Sat 14 Jun 2014 11:06:59 AM JST
connection, 
* Sat 14 Jun 2014 11:09:10 AM JST
        return self.connection.core.GrabKeyChecked(
            owner_events, grab_window, modifiers, self.value, pointer_mode,
            keyboard_mode)

* Sat 14 Jun 2014 11:09:51 AM JST
            
* Sat 14 Jun 2014 11:09:56 AM JST
pointer_mode, keyboard_mode
* Sat 14 Jun 2014 11:11:05 AM JST
propagate, destination, sequence_number, time, root,
              window, child,  root_x, root_y, event_x, event_y, state,
              same_screen
* Sat 14 Jun 2014 11:11:33 AM JST
state,
* Sat 14 Jun 2014 11:11:37 AM JST
              
* Sat 14 Jun 2014 11:12:35 AM JST
propagate, destination, sequence_number, time, root,
              window, child,  root_x, root_y, event_x, event_y, state,
              same_screen
* Sat 14 Jun 2014 11:12:43 AM JST
            
* Sat 14 Jun 2014 11:12:47 AM JST
state,
* Sat 14 Jun 2014 11:12:55 AM JST
              
* Sat 14 Jun 2014 11:12:58 AM JST
            
* Sat 14 Jun 2014 11:13:07 AM JST
            
* Sat 14 Jun 2014 11:13:30 AM JST
propagate, destination, sequence_number, time, root,
                window, child,  root_x, root_y, event_x, event_y, state,
                same_screen
* Sat 14 Jun 2014 11:13:41 AM JST
state,
* Sat 14 Jun 2014 11:14:10 AM JST
propagate, destination, sequence_number, time, root,
                window, child, root_x, root_y, event_x, event_y, same_screen
* Sat 14 Jun 2014 11:14:17 AM JST
            
* Sat 14 Jun 2014 11:14:18 AM JST
                
* Sat 14 Jun 2014 11:15:58 AM JST
    def clear(self, ):
        r"""Clear state to 0.

        @Return:
        None

        clear()

        >>> state = Modifiers(1)
        >>> state.clear()
        >>> state == Modifiers(0)
        True
        """
        self.flags.clear()

    def setshift(self, ):
        r"""Set shift modifier mask.

        @Return:
        None

        setshift()

        >>> state = Modifiers(0)
        >>> state.setshift()
        >>> state.isshift()
        True
        """
        # NamedModifierMask.Shift
        self.flags.set1()

    def setlock(self, ):
        r"""Set lock modifier mask.

        @Return:
        None

        setlock()

        >>> state = Modifiers(0)
        >>> state.setlock()
        >>> state.islock()
        True
        """
        # NamedModifierMask.Lock
        self.flags.set2()

    def setcontrol(self, ):
        r"""Set control modifier mask.

        @Return:
        None

        setcontrol()

        >>> state = Modifiers(0)
        >>> state.setcontrol()
        >>> state.iscontrol()
        True
        """
        # NamedModifierMask.Control
        self.flags.set3()

    def setalt(self, ):
        r"""Set alt modifier mask.

        @Return:
        None

        setalt()

        >>> state = Modifiers(0)
        >>> state.setalt()
        >>> state.isalt()
        True
        """
        # NamedModifierMask.Alt
        self.flags.set4()

    def setnumlock(self, ):
        r"""Set numlock modifier mask.

        @Return:
        None

        setnumlock()

        >>> state = Modifiers(0)
        >>> state.setnumlock()
        >>> state.isnumlock()
        True
        """
        # NamedModifierMask.Numlock
        self.flags.set5()

    def sethiper(self, ):
        r"""Set hiper modifier mask.

        @Return:
        None

        sethiper()

        >>> state = Modifiers(0)
        >>> state.sethiper()
        >>> state.ishiper()
        True
        """
        # NamedModifierMask.Hiper
        self.flags.set6()

    def setsuper(self, ):
        r"""Set super modifier mask.

        @Return:
        None

        setsuper()

        >>> state = Modifiers(0)
        >>> state.setsuper()
        >>> state.issuper()
        True
        """
        # NamedModifierMask.Super
        self.flags.set7()

    def setmod5(self, ):
        r"""Set mod5 modifier mask.

        @Return:
        None

        setmod5()

        >>> state = Modifiers(0)
        >>> state.setmod5()
        >>> state.ismod5()
        True
        """
        # NamedModifierMask.Mod5
        self.flags.set8()

    def setleft(self, ):
        r"""Set left modifier mask.

        @Return:
        None

        setleft()

        >>> state = Modifiers(0)
        >>> state.setleft()
        >>> state.isleft()
        True
        """
        # NamedModifierMask.Left
        self.flags.set9()

    def setmiddle(self, ):
        r"""Set middle modifier mask.

        @Return:
        None

        setmiddle()

        >>> state = Modifiers(0)
        >>> state.setmiddle()
        >>> state.ismiddle()
        True
        """
        # NamedModifierMask.Middle
        self.flags.set10()

    def setright(self, ):
        r"""Set right modifier mask.

        @Return:
        None

        setright()

        >>> state = Modifiers(0)
        >>> state.setright()
        >>> state.isright()
        True
        """
        # NamedModifierMask.Right
        self.flags.set11()

    def setwheelup(self, ):
        r"""Set wheelup modifier mask.

        @Return:
        None

        setwheelup()

        >>> state = Modifiers(0)
        >>> state.setwheelup()
        >>> state.iswheelup()
        True
        """
        # NamedModifierMask.WheelUp
        self.flags.set12()

    def setwheeldown(self, ):
        r"""Set wheeldown modifier mask.

        @Return:
        None

        setwheeldown()

        >>> state = Modifiers(0)
        >>> state.setwheeldown()
        >>> state.iswheeldown()
        True
        """
        # NamedModifierMask.WheelDown
        self.flags.set13()

    def setany(self, ):
        r"""Set any modifier mask.

        @Return:
        None

        setany()

        >>> state = Modifiers(0)
        >>> state.setany()
        >>> state.isany()
        True
        """
        # NamedModifierMask.Any
        self.flags.set16()

    def resetshift(self, ):
        r"""Reset shift modifier mask.

        @Return:
        None

        resetshift()

        >>> state = Modifiers(40959) # set all
        >>> state.setshift()
        >>> state.isshift()
        False
        """
        self.flags.reset1()

    def resetlock(self, ):
        r"""Reset lock modifier mask.

        @Return:
        None

        resetlock()

        >>> state = Modifiers(40959) # set all
        >>> state.setlock()
        >>> state.islock()
        False
        """
        self.flags.reset2()

    def resetcontrol(self, ):
        r"""Reset control modifier mask.

        @Return:
        None

        resetcontrol()

        >>> state = Modifiers(40959) # set all
        >>> state.setcontrol()
        >>> state.iscontrol()
        False
        """
        self.flags.reset3()

    def resetalt(self, ):
        r"""Reset alt modifier mask.

        @Return:
        None

        resetalt()

        >>> state = Modifiers(40959) # set all
        >>> state.setalt()
        >>> state.isalt()
        False
        """
        self.flags.reset4()

    def resetnumlock(self, ):
        r"""Reset numlock modifier mask.

        @Return:
        None

        resetnumlock()

        >>> state = Modifiers(40959) # set all
        >>> state.setnumlock()
        >>> state.isnumlock()
        False
        """
        self.flags.reset5()

    def resethiper(self, ):
        r"""Reset hiper modifier mask.

        @Return:
        None

        resethiper()

        >>> state = Modifiers(40959) # set all
        >>> state.sethiper()
        >>> state.ishiper()
        False
        """
        self.flags.reset6()

    def resetsuper(self, ):
        r"""Reset super modifier mask.

        @Return:
        None

        resetsuper()

        >>> state = Modifiers(40959) # set all
        >>> state.setsuper()
        >>> state.issuper()
        False
        """
        self.flags.reset7()

    def resetmod5(self, ):
        r"""Reset mod5 modifier mask.

        @Return:
        None

        resetmod5()

        >>> state = Modifiers(40959) # set all
        >>> state.setmod5()
        >>> state.ismod5()
        False
        """
        self.flags.reset8()

    def resetleft(self, ):
        r"""Reset left modifier mask.

        @Return:
        None

        resetleft()

        >>> state = Modifiers(40959) # set all
        >>> state.setleft()
        >>> state.isleft()
        False
        """
        self.flags.reset9()

    def resetmiddle(self, ):
        r"""Reset middle modifier mask.

        @Return:
        None

        resetmiddle()

        >>> state = Modifiers(40959) # set all
        >>> state.setmiddle()
        >>> state.ismiddle()
        False
        """
        self.flags.reset10()

    def resetright(self, ):
        r"""Reset right modifier mask.

        @Return:
        None

        resetright()

        >>> state = Modifiers(40959) # set all
        >>> state.setright()
        >>> state.isright()
        False
        """
        self.flags.reset11()

    def resetwheelup(self, ):
        r"""Reset wheelup modifier mask.

        @Return:
        None

        resetwheelup()

        >>> state = Modifiers(40959) # set all
        >>> state.setwheelup()
        >>> state.iswheelup()
        False
        """
        self.flags.reset12()

    def resetwheeldown(self, ):
        r"""Reset wheeldown modifier mask.

        @Return:
        None

        resetwheeldown()

        >>> state = Modifiers(40959) # set all
        >>> state.setwheeldown()
        >>> state.iswheeldown()
        False
        """
        self.flags.reset13()

    def resetany(self, ):
        r"""Reset any modifier mask.

        @Return:
        None

        resetany()

        >>> state = Modifiers(40959) # set all
        >>> state.setany()
        >>> state.isany()
        False
        """
        self.flags.reset16()

    def isshift(self, ):
        r"""Check is setted shift modifier mask.

        @Return:
        None

        setshift()

        >>> state = Modifiers(0)
        >>> state.setshift()
        >>> state.isshift()
        True
        """
        return self.flags.isflaged1()

    def islock(self, ):
        r"""Check is setted lock modifier mask.

        @Return:
        None

        setlock()

        >>> state = Modifiers(0)
        >>> state.setlock()
        >>> state.islock()
        True
        """
        return self.flags.isflaged2()

    def iscontrol(self, ):
        r"""Check is setted control modifier mask.

        @Return:
        None

        setcontrol()

        >>> state = Modifiers(0)
        >>> state.setcontrol()
        >>> state.iscontrol()
        True
        """
        return self.flags.isflaged3()

    def isalt(self, ):
        r"""Check is setted alt modifier mask.

        @Return:
        None

        setalt()

        >>> state = Modifiers(0)
        >>> state.setalt()
        >>> state.isalt()
        True
        """
        return self.flags.isflaged4()

    def isnumlock(self, ):
        r"""Check is setted numlock modifier mask.

        @Return:
        None

        setnumlock()

        >>> state = Modifiers(0)
        >>> state.setnumlock()
        >>> state.isnumlock()
        True
        """
        return self.flags.isflaged5()

    def ishiper(self, ):
        r"""Check is setted hiper modifier mask.

        @Return:
        None

        sethiper()

        >>> state = Modifiers(0)
        >>> state.sethiper()
        >>> state.ishiper()
        True
        """
        return self.flags.isflaged6()

    def issuper(self, ):
        r"""Check is setted super modifier mask.

        @Return:
        None

        setsuper()

        >>> state = Modifiers(0)
        >>> state.setsuper()
        >>> state.issuper()
        True
        """
        return self.flags.isflaged7()

    def ismod5(self, ):
        r"""Check is setted mod5 modifier mask.

        @Return:
        None

        setmod5()

        >>> state = Modifiers(0)
        >>> state.setmod5()
        >>> state.ismod5()
        True
        """
        return self.flags.isflaged8()

    def isleft(self, ):
        r"""Check is setted left modifier mask.

        @Return:
        None

        setleft()

        >>> state = Modifiers(0)
        >>> state.setleft()
        >>> state.isleft()
        True
        """
        return self.flags.isflaged9()

    def ismiddle(self, ):
        r"""Check is setted middle modifier mask.

        @Return:
        None

        setmiddle()

        >>> state = Modifiers(0)
        >>> state.setmiddle()
        >>> state.ismiddle()
        True
        """
        return self.flags.isflaged10()

    def isright(self, ):
        r"""Check is setted right modifier mask.

        @Return:
        None

        setright()

        >>> state = Modifiers(0)
        >>> state.setright()
        >>> state.isright()
        True
        """
        return self.flags.isflaged11()

    def iswheelup(self, ):
        r"""Check is setted wheelup modifier mask.

        @Return:
        None

        setwheelup()

        >>> state = Modifiers(0)
        >>> state.setwheelup()
        >>> state.iswheelup()
        True
        """
        return self.flags.isflaged12()

    def iswheeldown(self, ):
        r"""Check is setted wheeldown modifier mask.

        @Return:
        None

        setwheeldown()

        >>> state = Modifiers(0)
        >>> state.setwheeldown()
        >>> state.iswheeldown()
        True
        """
        return self.flags.isflaged13()

    def isany(self, ):
        r"""Check is setted any modifier mask.

        @Return:
        None

        setany()

        >>> state = Modifiers(0)
        >>> state.setany()
        >>> state.isany()
        True
        """
        return self.flags.isflaged16()

* Sat 14 Jun 2014 11:20:17 AM JST
    def grab(self, owner_events, grab_window, pointer_mode, keyboard_mode):
        r"""SUMMARY

        grab(owner_events, grab_window, pointer_mode, keyboard_mode)

        @Arguments:
        - `owner_events`:
        - `grab_window`:
        - `pointer_mode`:
        - `keyboard_mode`:

        @Return:
        """
        return self._keybutton.grab(owner_events, grab_window, self._modifiers,
                              pointer_mode, keyboard_mode)

    def ungrab(self, grab_window):
        r"""SUMMARY

        ungrab(grab_window)

        @Arguments:
        - `grab_window`:

        @Return:
        """
        return self._keybutton.ungrab(grab_window, self._modifiers)

    def press(self, propagate, destination, sequence_number, time, root,
              window, child, root_x, root_y, event_x, event_y, same_screen):
        r"""SUMMARY

        press(propagate, destination, sequence_number, time, root,
              window, child,  root_x, root_y, event_x, event_y, same_screen)

        @Arguments:
        - `propagate`:
        - `destination`:
        - `sequence_number`:
        - `time`:
        - `root`:
        - `window`:
        - `child`:
        - `root_x`:
        - `root_y`:
        - `event_x`:
        - `event_y`:
        - `same_screen`:

        @Return:
        """
        return self._keybutton.press(
            propagate, destination, sequence_number, time, root, window, child,
            root_x, root_y, event_x, event_y, self._modifiers, same_screen)

    def release(self, propagate, destination, sequence_number, time, root,
                window, child, root_x, root_y, event_x, event_y, same_screen):
        r"""SUMMARY

        release(propagate, destination, sequence_number, time, root,
                window, child, root_x, root_y, event_x, event_y, same_screen)

        @Arguments:
        - `propagate`:
        - `destination`:
        - `sequence_number`:
        - `time`:
        - `root`:
        - `window`:
        - `child`:
        - `root_x`:
        - `root_y`:
        - `event_x`:
        - `event_y`:
        - `same_screen`:

        @Return:
        """
        return self._keybutton.release(
            propagate, destination, sequence_number, time, root, window, child,
            root_x, root_y, event_x, event_y, same_screen)

    def to_keysym(self, ):
        r"""SUMMARY

        to_keysym()

        @Return:
        """
        return self._keybutton.to_keysym(self._modifiers)

    def to_char(self, ):
        r"""SUMMARY

        to_char()

        @Return:
        """
        return self._keybutton.to_char(self._modifiers)


* Sat 14 Jun 2014 11:21:15 AM JST
owner_events, grab_window, event_mask, pointer_mode,
             keyboard_mode, confine_to, cursor, modifiers
* Sat 14 Jun 2014 11:21:21 AM JST
modifiers
* Sat 14 Jun 2014 11:21:42 AM JST
owner_events, grab_window, event_mask, pointer_mode,
             keyboard_mode, confine_to, cursor
* Sat 14 Jun 2014 11:22:04 AM JST
             
* Sat 14 Jun 2014 11:22:33 AM JST
self
* Sat 14 Jun 2014 11:22:46 AM JST
owner_events, 
* Sat 14 Jun 2014 11:22:57 AM JST
            
* Sat 14 Jun 2014 11:23:12 AM JST
propagate, destination, sequence_number, time, root, window,
              child, root_x, root_y, event_x, event_y, state, samescreen
* Sat 14 Jun 2014 11:23:21 AM JST
state, 
* Sat 14 Jun 2014 11:23:33 AM JST
              
* Sat 14 Jun 2014 11:23:51 AM JST
propagate, destination, sequence_number, time, root,
              window, child, root_x, root_y, event_x, event_y, samescreen
* Sat 14 Jun 2014 11:24:00 AM JST
            
* Sat 14 Jun 2014 11:24:28 AM JST
propagate, destination, sequence_number, time, root,
                window, child, root_x, root_y, event_x, event_y, state,
                samescreen
* Sat 14 Jun 2014 11:24:33 AM JST
state,
* Sat 14 Jun 2014 11:24:37 AM JST
                
* Sat 14 Jun 2014 11:25:01 AM JST
propagate, destination, sequence_number, time, root,
                window, child, root_x, root_y, event_x, event_y, state,
                samescreen
* Sat 14 Jun 2014 11:25:15 AM JST
                
* Sat 14 Jun 2014 11:25:20 AM JST
            
* Sat 14 Jun 2014 11:25:22 AM JST
state
* Sat 14 Jun 2014 11:36:41 AM JST

* Sat 14 Jun 2014 11:36:41 AM JST

* Sat 14 Jun 2014 11:36:41 AM JST
    __types = None

* Sat 14 Jun 2014 11:36:42 AM JST

* Sat 14 Jun 2014 11:36:42 AM JST

* Sat 14 Jun 2014 11:36:43 AM JST
        if not isinstance(keybutton, (class, )):

* Sat 14 Jun 2014 11:36:45 AM JST
    def __init__(self, keybutton, modifiers):
        r"""

        @Arguments:
        - `key`:
        - `modifiers`:
        """
        self._keybutton = keybutton
        self._modifiers = modifiers


* Sat 14 Jun 2014 11:37:21 AM JST
keybutton, 
* Sat 14 Jun 2014 11:37:23 AM JST

* Sat 14 Jun 2014 11:37:23 AM JST

* Sat 14 Jun 2014 11:37:23 AM JST
        self._keybutton = keybutton

* Sat 14 Jun 2014 11:38:12 AM JST
KeyButtonModifiersAbstract
* Sat 14 Jun 2014 11:39:31 AM JST
Modifiers
* Sat 14 Jun 2014 11:42:19 AM JST
                
* Sat 14 Jun 2014 11:42:23 AM JST
                    
* Sat 14 Jun 2014 11:45:45 AM JST
        if not isinstance(modifiers, Modifiers):
            raise TypeError(
                'modifiers must be "{}" type. got: {}'.format(
                    Modifiers.__class__.__name__), type(modifiers))

* Sat 14 Jun 2014 11:45:58 AM JST
        if not isinstance(modifiers, Modifiers):
            raise TypeError(
                'modifiers must be "{}" type. got: {}'.format(
                    Modifiers.__class__.__name__), type(modifiers))

* Sat 14 Jun 2014 11:46:28 AM JST
Modifiers
* Sat 14 Jun 2014 11:46:37 AM JST
Modifiers
* Sat 14 Jun 2014 11:46:40 AM JST
modifiers
* Sat 14 Jun 2014 11:46:49 AM JST
modifiers
* Sat 14 Jun 2014 11:47:02 AM JST
    def __init__(self, key, modifiers):
        r"""SUMMARY

        __init__(key, modifiers)

        @Arguments:
        - `key`:
        - `modifiers`:

        @Return:
        """
        KeyButtonModifiersAbstract.__init__(self, modifiers)
        if not isinstance(key, Key):
            raise TypeError(
                'modifiers must be "{}" type. got: {}'.format(
                    Key.__class__.__name__), type(key))
        self._key = key

* Sat 14 Jun 2014 11:47:15 AM JST
key
* Sat 14 Jun 2014 11:47:20 AM JST
key
* Sat 14 Jun 2014 11:47:30 AM JST
Key
* Sat 14 Jun 2014 11:47:35 AM JST
Key
* Sat 14 Jun 2014 03:30:34 PM JST

* Sat 14 Jun 2014 03:30:36 PM JST

* Sat 14 Jun 2014 05:19:00 PM JST
pass
* Sat 14 Jun 2014 05:19:06 PM JST
self.
* Sat 14 Jun 2014 05:20:04 PM JST
EventMask.KeyPress
* Sat 14 Jun 2014 05:21:58 PM JST
from xcb.xproto import EventMask
* Sat 14 Jun 2014 05:25:31 PM JST
from enum import IntEnum as _IntEnum


class EventCode(_IntEnum):
    r"""SUMMARY
    """
    KeyPress         = 2
    KeyRelease       = 3
    ButtonPress      = 4
    ButtonRelease    = 5
    MotionNotify     = 6
    EnterNotify      = 7
    LeaveNotify      = 8
    FocusIn          = 9
    FocusOut         = 10
    KeymapNotify     = 11
    Expose           = 12
    GraphicsExposure = 13
    NoExposure       = 14
    VisibilityNotify = 15
    CreateNotify     = 16
    DestroyNotify    = 17
    UnmapNotify      = 18
    MapNotify        = 19
    MapRequest       = 20
    ReparentNotify   = 21
    ConfigureNotify  = 22
    ConfigureRequest = 23
    GravityNotify    = 24
    ResizeRequest    = 25
    CirculateNotify  = 26
    CirculateRequest = 27
    PropertyNotify   = 28
    SelectionClear   = 29
    SelectionRequest = 30
    SelectionNotify  = 31
    ColormapNotify   = 32
    ClientMessage    = 33
    MappingNotify    = 34

* Sat 14 Jun 2014 05:26:02 PM JST
EventCode
* Sat 14 Jun 2014 05:28:06 PM JST
EventCode
* Sat 14 Jun 2014 05:28:35 PM JST
EventCode
* Sat 14 Jun 2014 05:30:11 PM JST
self
* Sat 14 Jun 2014 05:30:43 PM JST
        buf.write(_pack('4I5HBx', time, root, window, child,
                        root_x, root_y,
                        event_x, event_y, state, samescreen))

* Sat 14 Jun 2014 05:32:45 PM JST
50331670
* Sat 14 Jun 2014 05:35:40 PM JST

* Sat 14 Jun 2014 05:35:40 PM JST

* Sat 14 Jun 2014 05:35:40 PM JST
        print(repr(buf.getvalue()))

* Sat 14 Jun 2014 05:35:42 PM JST

* Sat 14 Jun 2014 05:35:42 PM JST

* Sat 14 Jun 2014 05:35:42 PM JST
        print(repr(buf.getvalue()))

* Sat 14 Jun 2014 05:38:41 PM JST
        buf = StringIO()
        buf.write(_pack('B', EventCode.KeyPress))
        buf.write(self.pack())
        buf.write(_pack('H', sequence_number))
        buf.write(_pack('4I5HBx', time, root, window, child, root_x, root_y,
                        event_x, event_y, state, same_screen))
        return self.connection.core.SendEventChecked(
            propagate, destination, EventMask.KeyPress, buf.getvalue())

* Sat 14 Jun 2014 05:39:29 PM JST
        buf = StringIO()
        buf.write(_pack('B', EventCode.KeyRelease))
        buf.write(self.pack())
        buf.write(_pack('H', sequence_number))
        buf.write(_pack('4I5HBx', time, root, window, child, root_x, root_y,
                        event_x, event_y, state, same_screen))
        return self.connection.core.SendEventChecked(
            propagate, destination, EventMask.KeyPress, buf.getvalue())

* Sat 14 Jun 2014 05:40:17 PM JST
KeyRelease
* Sat 14 Jun 2014 05:40:37 PM JST
Key
* Sat 14 Jun 2014 05:40:46 PM JST
        buf = StringIO()
        buf.write(_pack('B', EventCode.ButtonPress))
        buf.write(self.pack())
        buf.write(_pack('H', sequence_number))
        buf.write(_pack('4I5HBx', time, root, window, child, root_x, root_y,
                        event_x, event_y, state, same_screen))
        return self.connection.core.SendEventChecked(
            propagate, destination, EventMask.ButtonPress, buf.getvalue())

* Sun 15 Jun 2014 09:43:31 AM JST
lastcode = maxkeycode + minkeycode
* Sun 15 Jun 2014 09:52:05 AM JST
zip(*[iter(reply.keysyms)] * reply.keysyms_per_keycode)
* Sun 15 Jun 2014 09:59:07 AM JST
codes[10][1
* Sun 15 Jun 2014 10:21:35 AM JST
class WrapGetAtomNameCookie(WrapCookieAbstract):
    r"""SUMMARY
    """

    def check(self, ):
        r"""SUMMARY

        check()

        @Return:
        """
        return self._cookie.check()

    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:
        """
        reply = self._cookie.reply()
        reply.atom = self._cookie.atom
        return wreply.WrapGetAtomNameReply(self._connection, reply)

* Sun 15 Jun 2014 10:21:44 AM JST
class WrapQueryTreeCookie(WrapCookieAbstract):
    r"""SUMMARY
    """

    def check(self, ):
        r"""SUMMARY

        check()

        @Return:
        """
        return self._cookie.check()

    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:
        """
        return wreply.WrapQueryTreeReply(
            self._connection, self._cookie.reply())

* Sun 15 Jun 2014 10:23:23 AM JST
class WrapListPropertyReply(WrapReplyAbstract):
    r"""SUMMARY
    """

    @property
    def atoms_len(self, ):
        r"""SUMMARY

        atoms_len()

        @Return:
        """
        return self._raw.atoms_len

    @property
    def atoms(self, ):
        r"""SUMMARY

        atoms()

        @Return:
        """
        return [self.connection.atomidentify(x, self.connection.display)
                for x in self._raw.atoms]



* Sun 15 Jun 2014 10:23:51 AM JST
atoms_len
* Sun 15 Jun 2014 10:23:58 AM JST
atoms_len
* Sun 15 Jun 2014 10:25:23 AM JST
atoms
* Sun 15 Jun 2014 10:28:42 AM JST
zip(*[iter(reply.keysyms)] * reply.keysyms_per_keycode)
* Sun 15 Jun 2014 10:28:50 AM JST
reply
* Sun 15 Jun 2014 10:28:54 AM JST
reply
* Sun 15 Jun 2014 10:29:24 AM JST
WrapGetKeyboardMappingCookie
* Sun 15 Jun 2014 10:32:06 AM JST
WrapGetKeyboardMappingCookie
* Sun 15 Jun 2014 10:33:56 AM JST
setup = self.connection.get_setup()
* Sun 15 Jun 2014 10:34:00 AM JST
connection.
* Sun 15 Jun 2014 10:34:01 AM JST
self.connection.
* Sun 15 Jun 2014 10:34:05 AM JST
minkeycode, maxkeycode = setup.min_keycode, setup.max_keycode
* Sun 15 Jun 2014 10:34:30 AM JST
minkeycode, maxkeycode - minkeycode + 1
* Sun 15 Jun 2014 10:52:00 AM JST
c.core.GetKeyboardMapping(minkeycode, 
* Sun 15 Jun 2014 12:22:20 PM JST
57
* Sun 15 Jun 2014 12:25:27 PM JST
reply.list_per_keysyms()
* Sun 15 Jun 2014 12:27:48 PM JST
reply.list_per_keysyms()
* Sun 15 Jun 2014 01:35:29 PM JST
self
* Sun 15 Jun 2014 01:45:57 PM JST
'{0.__class__.__name__}({1})'.format(self, self._data)
* Sun 15 Jun 2014 01:46:08 PM JST
_data
* Sun 15 Jun 2014 01:46:49 PM JST
KeySym
* Sun 15 Jun 2014 01:47:57 PM JST
[KeySym(x, self.connection.display) for x in self._raw.keysyms]
* Sun 15 Jun 2014 01:49:30 PM JST
setup = self.connection.get_setup()
* Sun 15 Jun 2014 01:49:35 PM JST
connection
* Sun 15 Jun 2014 01:49:36 PM JST
self.connection
* Sun 15 Jun 2014 01:49:39 PM JST
minkeycode, maxkeycode = setup.min_keycode, setup.max_keycode
* Sun 15 Jun 2014 01:52:49 PM JST
from xcb3.xconnection import Display
* Sun 15 Jun 2014 01:55:01 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()
setup = c.get_setup()
minkeycode, maxkeycode = setup.min_keycode, setup.max_keycode
reply=c.core.GetKeyboardMapping(minkeycode, maxkeycode - minkeycode).reply()
reply.keysyms

* Sun 15 Jun 2014 01:55:10 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()
setup = c.get_setup()
minkeycode, maxkeycode = setup.min_keycode, setup.max_keycode
reply=c.core.GetKeyboardMapping(minkeycode, maxkeycode - minkeycode).reply()

* Sun 15 Jun 2014 01:55:41 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()
setup = c.get_setup()
minkeycode, maxkeycode = setup.min_keycode, setup.max_keycode
reply=c.core.GetKeyboardMapping(minkeycode, maxkeycode - minkeycode).reply()

* Sun 15 Jun 2014 01:55:45 PM JST
reply.keysyms
* Sun 15 Jun 2014 01:56:23 PM JST
keysyms
* Sun 15 Jun 2014 01:56:30 PM JST
D 
* Sun 15 Jun 2014 01:57:06 PM JST
_raw.
* Sun 15 Jun 2014 01:57:12 PM JST
_raw.
* Sun 15 Jun 2014 02:20:12 PM JST
KeySymList
* Sun 15 Jun 2014 02:21:20 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()
setup = c.get_setup()
minkeycode, maxkeycode = setup.min_keycode, setup.max_keycode
reply=c.core.GetKeyboardMapping(minkeycode, maxkeycode - minkeycode).reply()

* Sun 15 Jun 2014 02:21:23 PM JST
reply.keysyms
* Sun 15 Jun 2014 03:11:55 PM JST
minkeycode
* Sun 15 Jun 2014 03:11:59 PM JST
reply=c.core.GetKeyboardMapping(minkeycode, maxkeycode - minkeycode).reply()
* Sun 15 Jun 2014 03:12:05 PM JST
minkeycode
* Sun 15 Jun 2014 03:12:25 PM JST
minkeycode
* Sun 15 Jun 2014 03:37:08 PM JST

* Sun 15 Jun 2014 03:37:08 PM JST

* Sun 15 Jun 2014 03:37:08 PM JST
        self._display = display

* Sun 15 Jun 2014 03:38:37 PM JST
FirstKeycode
* Sun 15 Jun 2014 03:39:15 PM JST
core.
* Sun 15 Jun 2014 03:39:45 PM JST
Unchecked
* Sun 15 Jun 2014 03:43:43 PM JST
iadd
* Sun 15 Jun 2014 03:44:46 PM JST
return
* Sun 15 Jun 2014 03:44:48 PM JST
self
* Sun 15 Jun 2014 03:45:20 PM JST
    def __lt__(self, other):
        return self._data < other

    def __le__(self, other):
        return self._data <= other

    def __gt__(self, other):
        return self._data > other

    def __ge__(self, other):
        return self._data >= other


* Sun 15 Jun 2014 03:46:42 PM JST
reuturn
* Sun 15 Jun 2014 03:46:46 PM JST
code
* Sun 15 Jun 2014 03:47:10 PM JST
_data = 
* Sun 15 Jun 2014 03:47:30 PM JST
self
* Sun 15 Jun 2014 03:49:33 PM JST
FirstKeycode
* Sun 15 Jun 2014 03:50:56 PM JST
from xcb3.xobj.first_keycode import FirstKeycode
FirstKeycode(8)

* Sun 15 Jun 2014 03:51:36 PM JST
FirstKeycode(8)
* Sun 15 Jun 2014 03:52:25 PM JST
FirstKeycode
* Sun 15 Jun 2014 03:55:42 PM JST
    def changekeyboardmapping(self, keycode_count, keysyms_per_keycode,
                              keysyms):
        r"""SUMMARY

        changekeyboardmapping(keycode_count, keysyms_per_keycode, keysyms)

        @Arguments:
        - `keycode_count`:
        - `keysyms_per_keycode`:
        - `keysyms`:

        @Return:
        """
        return self.connection.core.ChangeKeyboardMappingChecked(
            keycode_count, self._code, keysyms_per_keycode, keysyms)

    def getkeyboardmapping(self, count):
        r"""SUMMARY

        getkeyboardmapping(count)

        @Arguments:
        - `count`:

        @Return:
        """
        return self.connection.core.GetKeyboardMappingUnchecked(
            self._code, count)

    def __int__(self, ):
        return self._code

    def __long__(self, ):
        return long(self._code)

    def __eq__(self, other):
        return self._code == other

    def __add__(self, other):
        self._code = self._code + other
        return self

    def __iadd__(self, other):
        self._code += other
        return self

    def __sub__(self, other):
        self._code = self._code - other
        return self

    def __isub__(self, other):
        self._code -= other
        return self._code

    def __mul__(self, other):
        self._code = self._code * other
        return self

    def __imul__(self, other):
        self._code *= other
        return self

    def __div__(self, other):
        self._code = self._code / other
        return self

    def __idiv__(self, other):
        self._code /= other
        return self

    def __lt__(self, other):
        return self._code < other

    def __le__(self, other):
        return self._code <= other

    def __gt__(self, other):
        return self._code > other

    def __ge__(self, other):
        return self._code >= other


* Sun 15 Jun 2014 03:57:28 PM JST
    def __int__(self, ):
        return self.value

    def __long__(self, ):
        return long(self.value)

    def __eq__(self, other):
        return self.value == other

    def __add__(self, other):
        self.value = self.value + other
        return self

    def __iadd__(self, other):
        self.value += other
        return self

    def __sub__(self, other):
        self.value = self.value - other
        return self

    def __isub__(self, other):
        self.value -= other
        return self.value

    def __mul__(self, other):
        self.value = self.value * other
        return self

    def __imul__(self, other):
        self.value *= other
        return self

    def __div__(self, other):
        self.value = self.value / other
        return self

    def __idiv__(self, other):
        self.value /= other
        return self

    def __lt__(self, other):
        return self.value < other

    def __le__(self, other):
        return self.value <= other

    def __gt__(self, other):
        return self.value > other

    def __ge__(self, other):
        return self.value >= other


* Sun 15 Jun 2014 03:58:37 PM JST
    def __int__(self, ):
        return self.value

    def __long__(self, ):
        return long(self.value)

    def __eq__(self, other):
        return self.value == other

    def __add__(self, other):
        self.value = self.value + other
        return self

    def __iadd__(self, other):
        self.value += other
        return self

    def __sub__(self, other):
        self.value = self.value - other
        return self

    def __isub__(self, other):
        self.value -= other
        return self.value

    def __mul__(self, other):
        self.value = self.value * other
        return self

    def __imul__(self, other):
        self.value *= other
        return self

    def __div__(self, other):
        self.value = self.value / other
        return self

    def __idiv__(self, other):
        self.value /= other
        return self

    def __lt__(self, other):
        return self.value < other

    def __le__(self, other):
        return self.value <= other

    def __gt__(self, other):
        return self.value > other

    def __ge__(self, other):
        return self.value >= other

* Sun 15 Jun 2014 04:00:56 PM JST
FirstKeycode
* Sun 15 Jun 2014 04:00:58 PM JST
first_keycode
* Sun 15 Jun 2014 04:01:03 PM JST
Key
* Sun 15 Jun 2014 04:01:34 PM JST
display=self.connection.display
* Sun 15 Jun 2014 04:03:51 PM JST
.getkeyboardmapping
* Sun 15 Jun 2014 04:12:20 PM JST
        if isinstance(other, self.__class__):
            return self.__class__(self.value + other.value, self.display)
        else:
            return self.__class__(self.value + other, self.display)

* Sun 15 Jun 2014 04:12:34 PM JST
        if isinstance(other, self.__class__):
            self.value += other.value
        else:
            self.value += other
        return self

* Sun 15 Jun 2014 04:12:47 PM JST
        if isinstance(other, self.__class__):
            return self.__class__(self.value + other.value, self.display)
        else:
            return self.__class__(self.value + other, self.display)

* Sun 15 Jun 2014 04:13:01 PM JST
        if isinstance(other, self.__class__):
            self.value -= other.value
        else:
            self.value -= other
        return self

* Sun 15 Jun 2014 04:13:16 PM JST
        if isinstance(other, self.__class__):
            return self.__class__(self.value * other.value, self.display)
        else:
            return self.__class__(self.value * other, self.display)


* Sun 15 Jun 2014 04:13:33 PM JST
        if isinstance(other, self.__class__):
            self.value *= other.value
        else:
            self.value *= other
        return self


* Sun 15 Jun 2014 04:14:05 PM JST
self.value < other
* Sun 15 Jun 2014 04:14:18 PM JST

* Sun 15 Jun 2014 04:14:18 PM JST

* Sun 15 Jun 2014 04:14:18 PM JST
        else:

* Sun 15 Jun 2014 04:14:22 PM JST

* Sun 15 Jun 2014 04:14:22 PM JST

* Sun 15 Jun 2014 04:14:22 PM JST
        else:

* Sun 15 Jun 2014 04:14:28 PM JST

* Sun 15 Jun 2014 04:14:28 PM JST

* Sun 15 Jun 2014 04:14:28 PM JST
        else:

* Sun 15 Jun 2014 04:14:32 PM JST

* Sun 15 Jun 2014 04:14:32 PM JST

* Sun 15 Jun 2014 04:14:32 PM JST
        else:

* Sun 15 Jun 2014 04:14:48 PM JST
        if isinstance(other, self.__class__):
            return self.value < other.value
        return self.value < other

* Sun 15 Jun 2014 04:14:54 PM JST

* Sun 15 Jun 2014 04:14:54 PM JST

* Sun 15 Jun 2014 04:14:54 PM JST
        return self.value < other

* Sun 15 Jun 2014 04:15:01 PM JST
        if isinstance(other, self.__class__):
            return self.value <= other.value
        return self.value <= other

* Sun 15 Jun 2014 04:15:08 PM JST

* Sun 15 Jun 2014 04:15:08 PM JST

* Sun 15 Jun 2014 04:15:08 PM JST
        return self.value <= other

* Sun 15 Jun 2014 04:15:14 PM JST
        if isinstance(other, self.__class__):
            return self.value > other.value
        return self.value > other

* Sun 15 Jun 2014 04:15:23 PM JST

* Sun 15 Jun 2014 04:15:23 PM JST

* Sun 15 Jun 2014 04:15:24 PM JST
        return self.value >= other

* Sun 15 Jun 2014 04:17:17 PM JST
mink.getkeyboardmapping(
* Sun 15 Jun 2014 05:41:19 PM JST
mink.getkeyboardmapping(maxk-mink).reply().keysyms
* Sun 15 Jun 2014 05:42:43 PM JST
init
* Sun 15 Jun 2014 05:43:11 PM JST
Display, 
* Sun 15 Jun 2014 05:45:32 PM JST
KeySyms
* Sun 15 Jun 2014 05:46:04 PM JST
display
* Sun 15 Jun 2014 05:46:38 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()
setup = c.get_setup()
minkeycode, maxkeycode = setup.min_keycode, setup.max_keycode
reply=c.core.GetKeyboardMapping(minkeycode, maxkeycode - minkeycode).reply()

* Sun 15 Jun 2014 05:46:41 PM JST
reply.keysyms
* Sun 15 Jun 2014 05:46:58 PM JST
type(
* Mon 16 Jun 2014 11:01:28 AM JST
    def __init__(self, dict=None, **kwargs):
        self.data = {}
        if dict is not None:
            self.update(dict)
        if len(kwargs):
            self.update(kwargs)

* Mon 16 Jun 2014 11:03:55 AM JST
pass
* Mon 16 Jun 2014 11:04:26 AM JST
connection.
* Mon 16 Jun 2014 11:06:06 AM JST
zip(*[iter(reply.keysyms)] * reply.keysyms_per_keycode)
* Mon 16 Jun 2014 11:06:10 AM JST
reply
* Mon 16 Jun 2014 11:06:22 AM JST
keysyms
* Mon 16 Jun 2014 11:06:26 AM JST
reply.
* Mon 16 Jun 2014 11:06:31 AM JST
keysyms_
* Mon 16 Jun 2014 11:06:37 AM JST
SEQUENCE
* Mon 16 Jun 2014 11:07:37 AM JST
max_code, 
* Mon 16 Jun 2014 11:08:25 AM JST
import xcb3, xcb3.xproto
* Mon 16 Jun 2014 11:19:02 AM JST
setup.min_keycode
* Mon 16 Jun 2014 11:19:14 AM JST
min_code
* Mon 16 Jun 2014 11:20:31 AM JST
keycode_count, first_keycode,
                              keysyms_per_keycode
* Mon 16 Jun 2014 11:26:15 AM JST
iter
* Mon 16 Jun 2014 11:27:40 AM JST

* Mon 16 Jun 2014 11:27:40 AM JST

* Mon 16 Jun 2014 11:27:40 AM JST
from t1.listutil import make_list_append

* Mon 16 Jun 2014 11:28:11 AM JST
append
* Mon 16 Jun 2014 11:30:11 AM JST
ChangeKeyboardMappingChecked
* Mon 16 Jun 2014 11:34:16 AM JST
xc
* Mon 16 Jun 2014 11:34:17 AM JST
form xc
* Mon 16 Jun 2014 11:35:33 AM JST

* Mon 16 Jun 2014 11:35:33 AM JST

* Mon 16 Jun 2014 11:35:33 AM JST
from xcb3.xobj.keysym import 

* Mon 16 Jun 2014 11:36:41 AM JST
index
* Mon 16 Jun 2014 11:37:06 AM JST
return KeySym(0, self.display)
* Mon 16 Jun 2014 11:37:45 AM JST
return 
* Mon 16 Jun 2014 11:38:26 AM JST
class KeySym(Display):
    r"""SUMMARY
    """

    def __init__(self, value, display=None):
        r"""
        """
        Display.__init__(self, display=display)
        self._value = value

    def __int__(self, ):
        return self._value

    def __repr__(self, ):
        return '{0.__class__.__name__}({1})'.format(self, self._value)

    def to_keycode(self, ):
        r"""SUMMARY

        to_keycode()

        @Return:
        """
        pass

    def to_char(self, ):
        r"""SUMMARY

        to_char()

        @Return:
        """
        pass



* Mon 16 Jun 2014 02:26:37 PM JST
[KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65307),
 KeySym(0),
 KeySym(65307),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(49),
 KeySym(33),
 KeySym(49),
 KeySym(33),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(50),
 KeySym(34),
 KeySym(50),
 KeySym(34),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(51),
 KeySym(35),
 KeySym(51),
 KeySym(35),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(52),
 KeySym(36),
 KeySym(52),
 KeySym(36),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(53),
 KeySym(37),
 KeySym(53),
 KeySym(37),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(54),
 KeySym(38),
 KeySym(54),
 KeySym(38),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(55),
 KeySym(39),
 KeySym(55),
 KeySym(39),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(56),
 KeySym(40),
 KeySym(56),
 KeySym(40),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(57),
 KeySym(41),
 KeySym(57),
 KeySym(41),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(48),
 KeySym(95),
 KeySym(48),
 KeySym(95),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(59),
 KeySym(43),
 KeySym(59),
 KeySym(43),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(94),
 KeySym(126),
 KeySym(94),
 KeySym(126),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65288),
 KeySym(65288),
 KeySym(65288),
 KeySym(65288),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65289),
 KeySym(65056),
 KeySym(65289),
 KeySym(65056),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(113),
 KeySym(81),
 KeySym(113),
 KeySym(81),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(119),
 KeySym(87),
 KeySym(119),
 KeySym(87),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(101),
 KeySym(69),
 KeySym(101),
 KeySym(69),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(114),
 KeySym(82),
 KeySym(114),
 KeySym(82),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(116),
 KeySym(84),
 KeySym(116),
 KeySym(84),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(121),
 KeySym(89),
 KeySym(121),
 KeySym(89),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(117),
 KeySym(85),
 KeySym(117),
 KeySym(85),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(105),
 KeySym(73),
 KeySym(105),
 KeySym(73),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(111),
 KeySym(79),
 KeySym(111),
 KeySym(79),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(112),
 KeySym(80),
 KeySym(112),
 KeySym(80),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(64),
 KeySym(96),
 KeySym(64),
 KeySym(96),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(91),
 KeySym(123),
 KeySym(91),
 KeySym(123),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65293),
 KeySym(0),
 KeySym(65293),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65507),
 KeySym(0),
 KeySym(65507),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(97),
 KeySym(65),
 KeySym(97),
 KeySym(65),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(115),
 KeySym(83),
 KeySym(115),
 KeySym(83),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(100),
 KeySym(68),
 KeySym(100),
 KeySym(68),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(102),
 KeySym(70),
 KeySym(102),
 KeySym(70),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(103),
 KeySym(71),
 KeySym(103),
 KeySym(71),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(104),
 KeySym(72),
 KeySym(104),
 KeySym(72),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(106),
 KeySym(74),
 KeySym(106),
 KeySym(74),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(107),
 KeySym(75),
 KeySym(107),
 KeySym(75),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(108),
 KeySym(76),
 KeySym(108),
 KeySym(76),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(45),
 KeySym(61),
 KeySym(45),
 KeySym(61),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(58),
 KeySym(42),
 KeySym(58),
 KeySym(42),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65322),
 KeySym(65313),
 KeySym(65322),
 KeySym(65313),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65505),
 KeySym(0),
 KeySym(65505),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(93),
 KeySym(125),
 KeySym(93),
 KeySym(125),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(122),
 KeySym(90),
 KeySym(122),
 KeySym(90),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(120),
 KeySym(88),
 KeySym(120),
 KeySym(88),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(99),
 KeySym(67),
 KeySym(99),
 KeySym(67),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(118),
 KeySym(86),
 KeySym(118),
 KeySym(86),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(98),
 KeySym(66),
 KeySym(98),
 KeySym(66),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(110),
 KeySym(78),
 KeySym(110),
 KeySym(78),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(109),
 KeySym(77),
 KeySym(109),
 KeySym(77),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(44),
 KeySym(60),
 KeySym(44),
 KeySym(60),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(46),
 KeySym(62),
 KeySym(46),
 KeySym(62),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(47),
 KeySym(63),
 KeySym(47),
 KeySym(63),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65322),
 KeySym(0),
 KeySym(65322),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65450),
 KeySym(65450),
 KeySym(65450),
 KeySym(65450),
 KeySym(65450),
 KeySym(65450),
 KeySym(269024801),
 KeySym(65513),
 KeySym(65511),
 KeySym(65513),
 KeySym(65511),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(32),
 KeySym(0),
 KeySym(32),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65507),
 KeySym(0),
 KeySym(65507),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65470),
 KeySym(65470),
 KeySym(65470),
 KeySym(65470),
 KeySym(65470),
 KeySym(65470),
 KeySym(269024769),
 KeySym(65471),
 KeySym(65471),
 KeySym(65471),
 KeySym(65471),
 KeySym(65471),
 KeySym(65471),
 KeySym(269024770),
 KeySym(65472),
 KeySym(65472),
 KeySym(65472),
 KeySym(65472),
 KeySym(65472),
 KeySym(65472),
 KeySym(269024771),
 KeySym(65473),
 KeySym(65473),
 KeySym(65473),
 KeySym(65473),
 KeySym(65473),
 KeySym(65473),
 KeySym(269024772),
 KeySym(65474),
 KeySym(65474),
 KeySym(65474),
 KeySym(65474),
 KeySym(65474),
 KeySym(65474),
 KeySym(269024773),
 KeySym(65475),
 KeySym(65475),
 KeySym(65475),
 KeySym(65475),
 KeySym(65475),
 KeySym(65475),
 KeySym(269024774),
 KeySym(65476),
 KeySym(65476),
 KeySym(65476),
 KeySym(65476),
 KeySym(65476),
 KeySym(65476),
 KeySym(269024775),
 KeySym(65477),
 KeySym(65477),
 KeySym(65477),
 KeySym(65477),
 KeySym(65477),
 KeySym(65477),
 KeySym(269024776),
 KeySym(65478),
 KeySym(65478),
 KeySym(65478),
 KeySym(65478),
 KeySym(65478),
 KeySym(65478),
 KeySym(269024777),
 KeySym(65479),
 KeySym(65479),
 KeySym(65479),
 KeySym(65479),
 KeySym(65479),
 KeySym(65479),
 KeySym(269024778),
 KeySym(65407),
 KeySym(0),
 KeySym(65407),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65300),
 KeySym(0),
 KeySym(65300),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65429),
 KeySym(65463),
 KeySym(65429),
 KeySym(65463),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65431),
 KeySym(65464),
 KeySym(65431),
 KeySym(65464),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65434),
 KeySym(65465),
 KeySym(65434),
 KeySym(65465),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65453),
 KeySym(65453),
 KeySym(65453),
 KeySym(65453),
 KeySym(65453),
 KeySym(65453),
 KeySym(269024803),
 KeySym(65430),
 KeySym(65460),
 KeySym(65430),
 KeySym(65460),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65437),
 KeySym(65461),
 KeySym(65437),
 KeySym(65461),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65432),
 KeySym(65462),
 KeySym(65432),
 KeySym(65462),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65451),
 KeySym(65451),
 KeySym(65451),
 KeySym(65451),
 KeySym(65451),
 KeySym(65451),
 KeySym(269024802),
 KeySym(65436),
 KeySym(65457),
 KeySym(65436),
 KeySym(65457),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65433),
 KeySym(65458),
 KeySym(65433),
 KeySym(65458),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65435),
 KeySym(65459),
 KeySym(65435),
 KeySym(65459),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65438),
 KeySym(65456),
 KeySym(65438),
 KeySym(65456),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65439),
 KeySym(65454),
 KeySym(65439),
 KeySym(65454),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65027),
 KeySym(0),
 KeySym(65027),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(60),
 KeySym(62),
 KeySym(60),
 KeySym(62),
 KeySym(124),
 KeySym(166),
 KeySym(124),
 KeySym(65480),
 KeySym(65480),
 KeySym(65480),
 KeySym(65480),
 KeySym(65480),
 KeySym(65480),
 KeySym(269024779),
 KeySym(65481),
 KeySym(65481),
 KeySym(65481),
 KeySym(65481),
 KeySym(65481),
 KeySym(65481),
 KeySym(269024780),
 KeySym(92),
 KeySym(95),
 KeySym(92),
 KeySym(95),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65318),
 KeySym(0),
 KeySym(65318),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65317),
 KeySym(0),
 KeySym(65317),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65288),
 KeySym(0),
 KeySym(65288),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65319),
 KeySym(65316),
 KeySym(65319),
 KeySym(65316),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65513),
 KeySym(0),
 KeySym(65513),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65421),
 KeySym(0),
 KeySym(65421),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65508),
 KeySym(0),
 KeySym(65508),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65455),
 KeySym(65455),
 KeySym(65455),
 KeySym(65455),
 KeySym(65455),
 KeySym(65455),
 KeySym(269024800),
 KeySym(65377),
 KeySym(65378),
 KeySym(65377),
 KeySym(65378),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65518),
 KeySym(0),
 KeySym(65518),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65290),
 KeySym(0),
 KeySym(65290),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65360),
 KeySym(0),
 KeySym(65360),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65362),
 KeySym(0),
 KeySym(65362),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65365),
 KeySym(0),
 KeySym(65365),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65361),
 KeySym(0),
 KeySym(65361),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65363),
 KeySym(0),
 KeySym(65363),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65367),
 KeySym(0),
 KeySym(65367),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65364),
 KeySym(0),
 KeySym(65364),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65366),
 KeySym(0),
 KeySym(65366),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65379),
 KeySym(0),
 KeySym(65379),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65535),
 KeySym(0),
 KeySym(65535),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025042),
 KeySym(0),
 KeySym(269025042),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025041),
 KeySym(0),
 KeySym(269025041),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025043),
 KeySym(0),
 KeySym(269025043),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025066),
 KeySym(0),
 KeySym(269025066),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65469),
 KeySym(0),
 KeySym(65469),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(177),
 KeySym(0),
 KeySym(177),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65299),
 KeySym(65387),
 KeySym(65299),
 KeySym(65387),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025098),
 KeySym(0),
 KeySym(269025098),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65454),
 KeySym(65454),
 KeySym(65454),
 KeySym(65454),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65329),
 KeySym(0),
 KeySym(65329),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65332),
 KeySym(0),
 KeySym(65332),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(92),
 KeySym(124),
 KeySym(92),
 KeySym(124),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65515),
 KeySym(0),
 KeySym(65515),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65516),
 KeySym(0),
 KeySym(65516),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65383),
 KeySym(0),
 KeySym(65383),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65385),
 KeySym(0),
 KeySym(65385),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65382),
 KeySym(0),
 KeySym(65382),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(268828528),
 KeySym(0),
 KeySym(268828528),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65381),
 KeySym(0),
 KeySym(65381),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(268828529),
 KeySym(0),
 KeySym(268828529),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025111),
 KeySym(0),
 KeySym(269025111),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(268828531),
 KeySym(0),
 KeySym(268828531),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025133),
 KeySym(0),
 KeySym(269025133),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65384),
 KeySym(0),
 KeySym(65384),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025112),
 KeySym(0),
 KeySym(269025112),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65386),
 KeySym(0),
 KeySym(65386),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025125),
 KeySym(0),
 KeySym(269025125),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025053),
 KeySym(0),
 KeySym(269025053),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025071),
 KeySym(0),
 KeySym(269025071),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025067),
 KeySym(0),
 KeySym(269025067),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025117),
 KeySym(0),
 KeySym(269025117),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025147),
 KeySym(0),
 KeySym(269025147),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025162),
 KeySym(0),
 KeySym(269025162),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025089),
 KeySym(0),
 KeySym(269025089),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025090),
 KeySym(0),
 KeySym(269025090),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025070),
 KeySym(0),
 KeySym(269025070),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025114),
 KeySym(0),
 KeySym(269025114),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025069),
 KeySym(0),
 KeySym(269025069),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025140),
 KeySym(0),
 KeySym(269025140),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025049),
 KeySym(0),
 KeySym(269025049),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025072),
 KeySym(0),
 KeySym(269025072),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025075),
 KeySym(0),
 KeySym(269025075),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025062),
 KeySym(0),
 KeySym(269025062),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025063),
 KeySym(0),
 KeySym(269025063),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025068),
 KeySym(0),
 KeySym(269025068),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025068),
 KeySym(269025068),
 KeySym(269025068),
 KeySym(269025068),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025047),
 KeySym(0),
 KeySym(269025047),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025044),
 KeySym(269025073),
 KeySym(269025044),
 KeySym(269025073),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025046),
 KeySym(0),
 KeySym(269025046),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025045),
 KeySym(269025068),
 KeySym(269025045),
 KeySym(269025068),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025052),
 KeySym(0),
 KeySym(269025052),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025086),
 KeySym(0),
 KeySym(269025086),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025134),
 KeySym(0),
 KeySym(269025134),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025153),
 KeySym(0),
 KeySym(269025153),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025048),
 KeySym(0),
 KeySym(269025048),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025139),
 KeySym(0),
 KeySym(269025139),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025110),
 KeySym(0),
 KeySym(269025110),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025144),
 KeySym(0),
 KeySym(269025144),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025145),
 KeySym(0),
 KeySym(269025145),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(40),
 KeySym(0),
 KeySym(40),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(41),
 KeySym(0),
 KeySym(41),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025128),
 KeySym(0),
 KeySym(269025128),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65382),
 KeySym(0),
 KeySym(65382),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025153),
 KeySym(0),
 KeySym(269025153),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025093),
 KeySym(0),
 KeySym(269025093),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025094),
 KeySym(0),
 KeySym(269025094),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025095),
 KeySym(0),
 KeySym(269025095),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025096),
 KeySym(0),
 KeySym(269025096),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025097),
 KeySym(0),
 KeySym(269025097),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025193),
 KeySym(0),
 KeySym(269025193),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025200),
 KeySym(0),
 KeySym(269025200),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025201),
 KeySym(0),
 KeySym(269025201),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65406),
 KeySym(0),
 KeySym(65406),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65513),
 KeySym(0),
 KeySym(65513),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65511),
 KeySym(0),
 KeySym(65511),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65515),
 KeySym(0),
 KeySym(65515),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65517),
 KeySym(0),
 KeySym(65517),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025044),
 KeySym(0),
 KeySym(269025044),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025073),
 KeySym(0),
 KeySym(269025073),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025091),
 KeySym(0),
 KeySym(269025091),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025092),
 KeySym(0),
 KeySym(269025092),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025099),
 KeySym(0),
 KeySym(269025099),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025191),
 KeySym(0),
 KeySym(269025191),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025110),
 KeySym(0),
 KeySym(269025110),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025044),
 KeySym(0),
 KeySym(269025044),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025175),
 KeySym(0),
 KeySym(269025175),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65377),
 KeySym(0),
 KeySym(65377),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025167),
 KeySym(0),
 KeySym(269025167),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025049),
 KeySym(0),
 KeySym(269025049),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025166),
 KeySym(0),
 KeySym(269025166),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025051),
 KeySym(0),
 KeySym(269025051),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025119),
 KeySym(0),
 KeySym(269025119),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025084),
 KeySym(0),
 KeySym(269025084),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025118),
 KeySym(0),
 KeySym(269025118),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025078),
 KeySym(0),
 KeySym(269025078),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(65385),
 KeySym(0),
 KeySym(65385),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025027),
 KeySym(0),
 KeySym(269025027),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025026),
 KeySym(0),
 KeySym(269025026),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025074),
 KeySym(0),
 KeySym(269025074),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025113),
 KeySym(0),
 KeySym(269025113),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025028),
 KeySym(0),
 KeySym(269025028),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025030),
 KeySym(0),
 KeySym(269025030),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025029),
 KeySym(0),
 KeySym(269025029),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025147),
 KeySym(0),
 KeySym(269025147),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025138),
 KeySym(0),
 KeySym(269025138),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025168),
 KeySym(0),
 KeySym(269025168),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025143),
 KeySym(0),
 KeySym(269025143),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025115),
 KeySym(0),
 KeySym(269025115),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025171),
 KeySym(0),
 KeySym(269025171),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025172),
 KeySym(0),
 KeySym(269025172),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(269025173),
 KeySym(0),
 KeySym(269025173),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0),
 KeySym(0)]

In [32]: D {}
__class__         __hash__       __setitem__       itervalues
__cmp__           __init__       __sizeof__        keys      
__contains__      __iter__       __str__           pop       
__delattr__       __le__         __subclasshook__  popitem   
__delitem__       __len__        clear             setdefault
__doc__           __lt__         copy              update    
__eq__            __ne__         fromkeys          values    
__format__        __new__        get               viewitems 
__ge__            __reduce__     has_key           viewkeys  
__getattribute__  __reduce_ex__  items             viewvalues
__getitem__       __repr__       iteritems       
__gt__            __setattr__    iterkeys       

In [33]: keysyms.to_keycodemap(setup.min_keycode, 7)
Out[33]: 
{8: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 9: (KeySym(65307),
  KeySym(0),
  KeySym(65307),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 10: (KeySym(49),
  KeySym(33),
  KeySym(49),
  KeySym(33),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 11: (KeySym(50),
  KeySym(34),
  KeySym(50),
  KeySym(34),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 12: (KeySym(51),
  KeySym(35),
  KeySym(51),
  KeySym(35),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 13: (KeySym(52),
  KeySym(36),
  KeySym(52),
  KeySym(36),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 14: (KeySym(53),
  KeySym(37),
  KeySym(53),
  KeySym(37),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 15: (KeySym(54),
  KeySym(38),
  KeySym(54),
  KeySym(38),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 16: (KeySym(55),
  KeySym(39),
  KeySym(55),
  KeySym(39),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 17: (KeySym(56),
  KeySym(40),
  KeySym(56),
  KeySym(40),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 18: (KeySym(57),
  KeySym(41),
  KeySym(57),
  KeySym(41),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 19: (KeySym(48),
  KeySym(95),
  KeySym(48),
  KeySym(95),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 20: (KeySym(59),
  KeySym(43),
  KeySym(59),
  KeySym(43),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 21: (KeySym(94),
  KeySym(126),
  KeySym(94),
  KeySym(126),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 22: (KeySym(65288),
  KeySym(65288),
  KeySym(65288),
  KeySym(65288),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 23: (KeySym(65289),
  KeySym(65056),
  KeySym(65289),
  KeySym(65056),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 24: (KeySym(113),
  KeySym(81),
  KeySym(113),
  KeySym(81),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 25: (KeySym(119),
  KeySym(87),
  KeySym(119),
  KeySym(87),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 26: (KeySym(101),
  KeySym(69),
  KeySym(101),
  KeySym(69),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 27: (KeySym(114),
  KeySym(82),
  KeySym(114),
  KeySym(82),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 28: (KeySym(116),
  KeySym(84),
  KeySym(116),
  KeySym(84),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 29: (KeySym(121),
  KeySym(89),
  KeySym(121),
  KeySym(89),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 30: (KeySym(117),
  KeySym(85),
  KeySym(117),
  KeySym(85),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 31: (KeySym(105),
  KeySym(73),
  KeySym(105),
  KeySym(73),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 32: (KeySym(111),
  KeySym(79),
  KeySym(111),
  KeySym(79),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 33: (KeySym(112),
  KeySym(80),
  KeySym(112),
  KeySym(80),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 34: (KeySym(64),
  KeySym(96),
  KeySym(64),
  KeySym(96),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 35: (KeySym(91),
  KeySym(123),
  KeySym(91),
  KeySym(123),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 36: (KeySym(65293),
  KeySym(0),
  KeySym(65293),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 37: (KeySym(65507),
  KeySym(0),
  KeySym(65507),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 38: (KeySym(97),
  KeySym(65),
  KeySym(97),
  KeySym(65),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 39: (KeySym(115),
  KeySym(83),
  KeySym(115),
  KeySym(83),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 40: (KeySym(100),
  KeySym(68),
  KeySym(100),
  KeySym(68),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 41: (KeySym(102),
  KeySym(70),
  KeySym(102),
  KeySym(70),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 42: (KeySym(103),
  KeySym(71),
  KeySym(103),
  KeySym(71),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 43: (KeySym(104),
  KeySym(72),
  KeySym(104),
  KeySym(72),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 44: (KeySym(106),
  KeySym(74),
  KeySym(106),
  KeySym(74),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 45: (KeySym(107),
  KeySym(75),
  KeySym(107),
  KeySym(75),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 46: (KeySym(108),
  KeySym(76),
  KeySym(108),
  KeySym(76),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 47: (KeySym(45),
  KeySym(61),
  KeySym(45),
  KeySym(61),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 48: (KeySym(58),
  KeySym(42),
  KeySym(58),
  KeySym(42),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 49: (KeySym(65322),
  KeySym(65313),
  KeySym(65322),
  KeySym(65313),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 50: (KeySym(65505),
  KeySym(0),
  KeySym(65505),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 51: (KeySym(93),
  KeySym(125),
  KeySym(93),
  KeySym(125),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 52: (KeySym(122),
  KeySym(90),
  KeySym(122),
  KeySym(90),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 53: (KeySym(120),
  KeySym(88),
  KeySym(120),
  KeySym(88),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 54: (KeySym(99),
  KeySym(67),
  KeySym(99),
  KeySym(67),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 55: (KeySym(118),
  KeySym(86),
  KeySym(118),
  KeySym(86),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 56: (KeySym(98),
  KeySym(66),
  KeySym(98),
  KeySym(66),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 57: (KeySym(110),
  KeySym(78),
  KeySym(110),
  KeySym(78),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 58: (KeySym(109),
  KeySym(77),
  KeySym(109),
  KeySym(77),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 59: (KeySym(44),
  KeySym(60),
  KeySym(44),
  KeySym(60),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 60: (KeySym(46),
  KeySym(62),
  KeySym(46),
  KeySym(62),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 61: (KeySym(47),
  KeySym(63),
  KeySym(47),
  KeySym(63),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 62: (KeySym(65322),
  KeySym(0),
  KeySym(65322),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 63: (KeySym(65450),
  KeySym(65450),
  KeySym(65450),
  KeySym(65450),
  KeySym(65450),
  KeySym(65450),
  KeySym(269024801)),
 64: (KeySym(65513),
  KeySym(65511),
  KeySym(65513),
  KeySym(65511),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 65: (KeySym(32),
  KeySym(0),
  KeySym(32),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 66: (KeySym(65507),
  KeySym(0),
  KeySym(65507),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 67: (KeySym(65470),
  KeySym(65470),
  KeySym(65470),
  KeySym(65470),
  KeySym(65470),
  KeySym(65470),
  KeySym(269024769)),
 68: (KeySym(65471),
  KeySym(65471),
  KeySym(65471),
  KeySym(65471),
  KeySym(65471),
  KeySym(65471),
  KeySym(269024770)),
 69: (KeySym(65472),
  KeySym(65472),
  KeySym(65472),
  KeySym(65472),
  KeySym(65472),
  KeySym(65472),
  KeySym(269024771)),
 70: (KeySym(65473),
  KeySym(65473),
  KeySym(65473),
  KeySym(65473),
  KeySym(65473),
  KeySym(65473),
  KeySym(269024772)),
 71: (KeySym(65474),
  KeySym(65474),
  KeySym(65474),
  KeySym(65474),
  KeySym(65474),
  KeySym(65474),
  KeySym(269024773)),
 72: (KeySym(65475),
  KeySym(65475),
  KeySym(65475),
  KeySym(65475),
  KeySym(65475),
  KeySym(65475),
  KeySym(269024774)),
 73: (KeySym(65476),
  KeySym(65476),
  KeySym(65476),
  KeySym(65476),
  KeySym(65476),
  KeySym(65476),
  KeySym(269024775)),
 74: (KeySym(65477),
  KeySym(65477),
  KeySym(65477),
  KeySym(65477),
  KeySym(65477),
  KeySym(65477),
  KeySym(269024776)),
 75: (KeySym(65478),
  KeySym(65478),
  KeySym(65478),
  KeySym(65478),
  KeySym(65478),
  KeySym(65478),
  KeySym(269024777)),
 76: (KeySym(65479),
  KeySym(65479),
  KeySym(65479),
  KeySym(65479),
  KeySym(65479),
  KeySym(65479),
  KeySym(269024778)),
 77: (KeySym(65407),
  KeySym(0),
  KeySym(65407),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 78: (KeySym(65300),
  KeySym(0),
  KeySym(65300),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 79: (KeySym(65429),
  KeySym(65463),
  KeySym(65429),
  KeySym(65463),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 80: (KeySym(65431),
  KeySym(65464),
  KeySym(65431),
  KeySym(65464),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 81: (KeySym(65434),
  KeySym(65465),
  KeySym(65434),
  KeySym(65465),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 82: (KeySym(65453),
  KeySym(65453),
  KeySym(65453),
  KeySym(65453),
  KeySym(65453),
  KeySym(65453),
  KeySym(269024803)),
 83: (KeySym(65430),
  KeySym(65460),
  KeySym(65430),
  KeySym(65460),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 84: (KeySym(65437),
  KeySym(65461),
  KeySym(65437),
  KeySym(65461),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 85: (KeySym(65432),
  KeySym(65462),
  KeySym(65432),
  KeySym(65462),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 86: (KeySym(65451),
  KeySym(65451),
  KeySym(65451),
  KeySym(65451),
  KeySym(65451),
  KeySym(65451),
  KeySym(269024802)),
 87: (KeySym(65436),
  KeySym(65457),
  KeySym(65436),
  KeySym(65457),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 88: (KeySym(65433),
  KeySym(65458),
  KeySym(65433),
  KeySym(65458),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 89: (KeySym(65435),
  KeySym(65459),
  KeySym(65435),
  KeySym(65459),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 90: (KeySym(65438),
  KeySym(65456),
  KeySym(65438),
  KeySym(65456),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 91: (KeySym(65439),
  KeySym(65454),
  KeySym(65439),
  KeySym(65454),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 92: (KeySym(65027),
  KeySym(0),
  KeySym(65027),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 93: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 94: (KeySym(60),
  KeySym(62),
  KeySym(60),
  KeySym(62),
  KeySym(124),
  KeySym(166),
  KeySym(124)),
 95: (KeySym(65480),
  KeySym(65480),
  KeySym(65480),
  KeySym(65480),
  KeySym(65480),
  KeySym(65480),
  KeySym(269024779)),
 96: (KeySym(65481),
  KeySym(65481),
  KeySym(65481),
  KeySym(65481),
  KeySym(65481),
  KeySym(65481),
  KeySym(269024780)),
 97: (KeySym(92),
  KeySym(95),
  KeySym(92),
  KeySym(95),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 98: (KeySym(65318),
  KeySym(0),
  KeySym(65318),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 99: (KeySym(65317),
  KeySym(0),
  KeySym(65317),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 100: (KeySym(65288),
  KeySym(0),
  KeySym(65288),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 101: (KeySym(65319),
  KeySym(65316),
  KeySym(65319),
  KeySym(65316),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 102: (KeySym(65513),
  KeySym(0),
  KeySym(65513),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 103: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 104: (KeySym(65421),
  KeySym(0),
  KeySym(65421),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 105: (KeySym(65508),
  KeySym(0),
  KeySym(65508),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 106: (KeySym(65455),
  KeySym(65455),
  KeySym(65455),
  KeySym(65455),
  KeySym(65455),
  KeySym(65455),
  KeySym(269024800)),
 107: (KeySym(65377),
  KeySym(65378),
  KeySym(65377),
  KeySym(65378),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 108: (KeySym(65518),
  KeySym(0),
  KeySym(65518),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 109: (KeySym(65290),
  KeySym(0),
  KeySym(65290),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 110: (KeySym(65360),
  KeySym(0),
  KeySym(65360),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 111: (KeySym(65362),
  KeySym(0),
  KeySym(65362),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 112: (KeySym(65365),
  KeySym(0),
  KeySym(65365),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 113: (KeySym(65361),
  KeySym(0),
  KeySym(65361),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 114: (KeySym(65363),
  KeySym(0),
  KeySym(65363),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 115: (KeySym(65367),
  KeySym(0),
  KeySym(65367),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 116: (KeySym(65364),
  KeySym(0),
  KeySym(65364),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 117: (KeySym(65366),
  KeySym(0),
  KeySym(65366),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 118: (KeySym(65379),
  KeySym(0),
  KeySym(65379),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 119: (KeySym(65535),
  KeySym(0),
  KeySym(65535),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 120: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 121: (KeySym(269025042),
  KeySym(0),
  KeySym(269025042),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 122: (KeySym(269025041),
  KeySym(0),
  KeySym(269025041),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 123: (KeySym(269025043),
  KeySym(0),
  KeySym(269025043),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 124: (KeySym(269025066),
  KeySym(0),
  KeySym(269025066),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 125: (KeySym(65469),
  KeySym(0),
  KeySym(65469),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 126: (KeySym(177),
  KeySym(0),
  KeySym(177),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 127: (KeySym(65299),
  KeySym(65387),
  KeySym(65299),
  KeySym(65387),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 128: (KeySym(269025098),
  KeySym(0),
  KeySym(269025098),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 129: (KeySym(65454),
  KeySym(65454),
  KeySym(65454),
  KeySym(65454),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 130: (KeySym(65329),
  KeySym(0),
  KeySym(65329),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 131: (KeySym(65332),
  KeySym(0),
  KeySym(65332),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 132: (KeySym(92),
  KeySym(124),
  KeySym(92),
  KeySym(124),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 133: (KeySym(65515),
  KeySym(0),
  KeySym(65515),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 134: (KeySym(65516),
  KeySym(0),
  KeySym(65516),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 135: (KeySym(65383),
  KeySym(0),
  KeySym(65383),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 136: (KeySym(65385),
  KeySym(0),
  KeySym(65385),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 137: (KeySym(65382),
  KeySym(0),
  KeySym(65382),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 138: (KeySym(268828528),
  KeySym(0),
  KeySym(268828528),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 139: (KeySym(65381),
  KeySym(0),
  KeySym(65381),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 140: (KeySym(268828529),
  KeySym(0),
  KeySym(268828529),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 141: (KeySym(269025111),
  KeySym(0),
  KeySym(269025111),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 142: (KeySym(268828531),
  KeySym(0),
  KeySym(268828531),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 143: (KeySym(269025133),
  KeySym(0),
  KeySym(269025133),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 144: (KeySym(65384),
  KeySym(0),
  KeySym(65384),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 145: (KeySym(269025112),
  KeySym(0),
  KeySym(269025112),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 146: (KeySym(65386),
  KeySym(0),
  KeySym(65386),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 147: (KeySym(269025125),
  KeySym(0),
  KeySym(269025125),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 148: (KeySym(269025053),
  KeySym(0),
  KeySym(269025053),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 149: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 150: (KeySym(269025071),
  KeySym(0),
  KeySym(269025071),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 151: (KeySym(269025067),
  KeySym(0),
  KeySym(269025067),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 152: (KeySym(269025117),
  KeySym(0),
  KeySym(269025117),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 153: (KeySym(269025147),
  KeySym(0),
  KeySym(269025147),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 154: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 155: (KeySym(269025162),
  KeySym(0),
  KeySym(269025162),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 156: (KeySym(269025089),
  KeySym(0),
  KeySym(269025089),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 157: (KeySym(269025090),
  KeySym(0),
  KeySym(269025090),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 158: (KeySym(269025070),
  KeySym(0),
  KeySym(269025070),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 159: (KeySym(269025114),
  KeySym(0),
  KeySym(269025114),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 160: (KeySym(269025069),
  KeySym(0),
  KeySym(269025069),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 161: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 162: (KeySym(269025140),
  KeySym(0),
  KeySym(269025140),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 163: (KeySym(269025049),
  KeySym(0),
  KeySym(269025049),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 164: (KeySym(269025072),
  KeySym(0),
  KeySym(269025072),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 165: (KeySym(269025075),
  KeySym(0),
  KeySym(269025075),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 166: (KeySym(269025062),
  KeySym(0),
  KeySym(269025062),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 167: (KeySym(269025063),
  KeySym(0),
  KeySym(269025063),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 168: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 169: (KeySym(269025068),
  KeySym(0),
  KeySym(269025068),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 170: (KeySym(269025068),
  KeySym(269025068),
  KeySym(269025068),
  KeySym(269025068),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 171: (KeySym(269025047),
  KeySym(0),
  KeySym(269025047),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 172: (KeySym(269025044),
  KeySym(269025073),
  KeySym(269025044),
  KeySym(269025073),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 173: (KeySym(269025046),
  KeySym(0),
  KeySym(269025046),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 174: (KeySym(269025045),
  KeySym(269025068),
  KeySym(269025045),
  KeySym(269025068),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 175: (KeySym(269025052),
  KeySym(0),
  KeySym(269025052),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 176: (KeySym(269025086),
  KeySym(0),
  KeySym(269025086),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 177: (KeySym(269025134),
  KeySym(0),
  KeySym(269025134),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 178: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 179: (KeySym(269025153),
  KeySym(0),
  KeySym(269025153),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 180: (KeySym(269025048),
  KeySym(0),
  KeySym(269025048),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 181: (KeySym(269025139),
  KeySym(0),
  KeySym(269025139),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 182: (KeySym(269025110),
  KeySym(0),
  KeySym(269025110),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 183: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 184: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 185: (KeySym(269025144),
  KeySym(0),
  KeySym(269025144),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 186: (KeySym(269025145),
  KeySym(0),
  KeySym(269025145),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 187: (KeySym(40),
  KeySym(0),
  KeySym(40),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 188: (KeySym(41),
  KeySym(0),
  KeySym(41),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 189: (KeySym(269025128),
  KeySym(0),
  KeySym(269025128),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 190: (KeySym(65382),
  KeySym(0),
  KeySym(65382),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 191: (KeySym(269025153),
  KeySym(0),
  KeySym(269025153),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 192: (KeySym(269025093),
  KeySym(0),
  KeySym(269025093),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 193: (KeySym(269025094),
  KeySym(0),
  KeySym(269025094),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 194: (KeySym(269025095),
  KeySym(0),
  KeySym(269025095),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 195: (KeySym(269025096),
  KeySym(0),
  KeySym(269025096),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 196: (KeySym(269025097),
  KeySym(0),
  KeySym(269025097),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 197: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 198: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 199: (KeySym(269025193),
  KeySym(0),
  KeySym(269025193),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 200: (KeySym(269025200),
  KeySym(0),
  KeySym(269025200),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 201: (KeySym(269025201),
  KeySym(0),
  KeySym(269025201),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 202: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 203: (KeySym(65406),
  KeySym(0),
  KeySym(65406),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 204: (KeySym(0),
  KeySym(65513),
  KeySym(0),
  KeySym(65513),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 205: (KeySym(0),
  KeySym(65511),
  KeySym(0),
  KeySym(65511),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 206: (KeySym(0),
  KeySym(65515),
  KeySym(0),
  KeySym(65515),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 207: (KeySym(0),
  KeySym(65517),
  KeySym(0),
  KeySym(65517),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 208: (KeySym(269025044),
  KeySym(0),
  KeySym(269025044),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 209: (KeySym(269025073),
  KeySym(0),
  KeySym(269025073),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 210: (KeySym(269025091),
  KeySym(0),
  KeySym(269025091),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 211: (KeySym(269025092),
  KeySym(0),
  KeySym(269025092),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 212: (KeySym(269025099),
  KeySym(0),
  KeySym(269025099),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 213: (KeySym(269025191),
  KeySym(0),
  KeySym(269025191),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 214: (KeySym(269025110),
  KeySym(0),
  KeySym(269025110),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 215: (KeySym(269025044),
  KeySym(0),
  KeySym(269025044),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 216: (KeySym(269025175),
  KeySym(0),
  KeySym(269025175),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 217: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 218: (KeySym(65377),
  KeySym(0),
  KeySym(65377),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 219: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 220: (KeySym(269025167),
  KeySym(0),
  KeySym(269025167),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 221: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 222: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 223: (KeySym(269025049),
  KeySym(0),
  KeySym(269025049),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 224: (KeySym(269025166),
  KeySym(0),
  KeySym(269025166),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 225: (KeySym(269025051),
  KeySym(0),
  KeySym(269025051),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 226: (KeySym(269025119),
  KeySym(0),
  KeySym(269025119),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 227: (KeySym(269025084),
  KeySym(0),
  KeySym(269025084),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 228: (KeySym(269025118),
  KeySym(0),
  KeySym(269025118),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 229: (KeySym(269025078),
  KeySym(0),
  KeySym(269025078),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 230: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 231: (KeySym(65385),
  KeySym(0),
  KeySym(65385),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 232: (KeySym(269025027),
  KeySym(0),
  KeySym(269025027),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 233: (KeySym(269025026),
  KeySym(0),
  KeySym(269025026),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 234: (KeySym(269025074),
  KeySym(0),
  KeySym(269025074),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 235: (KeySym(269025113),
  KeySym(0),
  KeySym(269025113),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 236: (KeySym(269025028),
  KeySym(0),
  KeySym(269025028),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 237: (KeySym(269025030),
  KeySym(0),
  KeySym(269025030),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 238: (KeySym(269025029),
  KeySym(0),
  KeySym(269025029),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 239: (KeySym(269025147),
  KeySym(0),
  KeySym(269025147),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 240: (KeySym(269025138),
  KeySym(0),
  KeySym(269025138),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 241: (KeySym(269025168),
  KeySym(0),
  KeySym(269025168),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 242: (KeySym(269025143),
  KeySym(0),
  KeySym(269025143),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 243: (KeySym(269025115),
  KeySym(0),
  KeySym(269025115),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 244: (KeySym(269025171),
  KeySym(0),
  KeySym(269025171),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 245: (KeySym(269025172),
  KeySym(0),
  KeySym(269025172),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 246: (KeySym(269025173),
  KeySym(0),
  KeySym(269025173),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 247: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 248: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 249: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 250: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 251: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 252: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 253: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 254: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0)),
 255: (KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0),
  KeySym(0))}

* Mon 16 Jun 2014 02:27:22 PM JST
{8: (KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
9: (KeySym(65307),
          KeySym(0),
          KeySym(65307),
          KeySym(0),
          KeySym(0),
          KeySym(0),
          KeySym(0)),
10: (KeySym(49),
           KeySym(33),
           KeySym(49),
           KeySym(33),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
11: (KeySym(50),
           KeySym(34),
           KeySym(50),
           KeySym(34),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
12: (KeySym(51),
           KeySym(35),
           KeySym(51),
           KeySym(35),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
13: (KeySym(52),
           KeySym(36),
           KeySym(52),
           KeySym(36),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
14: (KeySym(53),
           KeySym(37),
           KeySym(53),
           KeySym(37),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
15: (KeySym(54),
           KeySym(38),
           KeySym(54),
           KeySym(38),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
16: (KeySym(55),
           KeySym(39),
           KeySym(55),
           KeySym(39),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
17: (KeySym(56),
           KeySym(40),
           KeySym(56),
           KeySym(40),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
18: (KeySym(57),
           KeySym(41),
           KeySym(57),
           KeySym(41),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
19: (KeySym(48),
           KeySym(95),
           KeySym(48),
           KeySym(95),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
20: (KeySym(59),
           KeySym(43),
           KeySym(59),
           KeySym(43),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
21: (KeySym(94),
           KeySym(126),
           KeySym(94),
           KeySym(126),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
22: (KeySym(65288),
           KeySym(65288),
           KeySym(65288),
           KeySym(65288),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
23: (KeySym(65289),
           KeySym(65056),
           KeySym(65289),
           KeySym(65056),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
24: (KeySym(113),
           KeySym(81),
           KeySym(113),
           KeySym(81),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
25: (KeySym(119),
           KeySym(87),
           KeySym(119),
           KeySym(87),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
26: (KeySym(101),
           KeySym(69),
           KeySym(101),
           KeySym(69),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
27: (KeySym(114),
           KeySym(82),
           KeySym(114),
           KeySym(82),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
28: (KeySym(116),
           KeySym(84),
           KeySym(116),
           KeySym(84),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
29: (KeySym(121),
           KeySym(89),
           KeySym(121),
           KeySym(89),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
30: (KeySym(117),
           KeySym(85),
           KeySym(117),
           KeySym(85),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
31: (KeySym(105),
           KeySym(73),
           KeySym(105),
           KeySym(73),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
32: (KeySym(111),
           KeySym(79),
           KeySym(111),
           KeySym(79),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
33: (KeySym(112),
           KeySym(80),
           KeySym(112),
           KeySym(80),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
34: (KeySym(64),
           KeySym(96),
           KeySym(64),
           KeySym(96),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
35: (KeySym(91),
           KeySym(123),
           KeySym(91),
           KeySym(123),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
36: (KeySym(65293),
           KeySym(0),
           KeySym(65293),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
37: (KeySym(65507),
           KeySym(0),
           KeySym(65507),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
38: (KeySym(97),
           KeySym(65),
           KeySym(97),
           KeySym(65),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
39: (KeySym(115),
           KeySym(83),
           KeySym(115),
           KeySym(83),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
40: (KeySym(100),
           KeySym(68),
           KeySym(100),
           KeySym(68),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
41: (KeySym(102),
           KeySym(70),
           KeySym(102),
           KeySym(70),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
42: (KeySym(103),
           KeySym(71),
           KeySym(103),
           KeySym(71),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
43: (KeySym(104),
           KeySym(72),
           KeySym(104),
           KeySym(72),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
44: (KeySym(106),
           KeySym(74),
           KeySym(106),
           KeySym(74),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
45: (KeySym(107),
           KeySym(75),
           KeySym(107),
           KeySym(75),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
46: (KeySym(108),
           KeySym(76),
           KeySym(108),
           KeySym(76),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
47: (KeySym(45),
           KeySym(61),
           KeySym(45),
           KeySym(61),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
48: (KeySym(58),
           KeySym(42),
           KeySym(58),
           KeySym(42),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
49: (KeySym(65322),
           KeySym(65313),
           KeySym(65322),
           KeySym(65313),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
50: (KeySym(65505),
           KeySym(0),
           KeySym(65505),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
51: (KeySym(93),
           KeySym(125),
           KeySym(93),
           KeySym(125),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
52: (KeySym(122),
           KeySym(90),
           KeySym(122),
           KeySym(90),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
53: (KeySym(120),
           KeySym(88),
           KeySym(120),
           KeySym(88),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
54: (KeySym(99),
           KeySym(67),
           KeySym(99),
           KeySym(67),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
55: (KeySym(118),
           KeySym(86),
           KeySym(118),
           KeySym(86),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
56: (KeySym(98),
           KeySym(66),
           KeySym(98),
           KeySym(66),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
57: (KeySym(110),
           KeySym(78),
           KeySym(110),
           KeySym(78),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
58: (KeySym(109),
           KeySym(77),
           KeySym(109),
           KeySym(77),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
59: (KeySym(44),
           KeySym(60),
           KeySym(44),
           KeySym(60),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
60: (KeySym(46),
           KeySym(62),
           KeySym(46),
           KeySym(62),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
61: (KeySym(47),
           KeySym(63),
           KeySym(47),
           KeySym(63),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
62: (KeySym(65322),
           KeySym(0),
           KeySym(65322),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
63: (KeySym(65450),
           KeySym(65450),
           KeySym(65450),
           KeySym(65450),
           KeySym(65450),
           KeySym(65450),
           KeySym(269024801)),
64: (KeySym(65513),
           KeySym(65511),
           KeySym(65513),
           KeySym(65511),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
65: (KeySym(32),
           KeySym(0),
           KeySym(32),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
66: (KeySym(65507),
           KeySym(0),
           KeySym(65507),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
67: (KeySym(65470),
           KeySym(65470),
           KeySym(65470),
           KeySym(65470),
           KeySym(65470),
           KeySym(65470),
           KeySym(269024769)),
68: (KeySym(65471),
           KeySym(65471),
           KeySym(65471),
           KeySym(65471),
           KeySym(65471),
           KeySym(65471),
           KeySym(269024770)),
69: (KeySym(65472),
           KeySym(65472),
           KeySym(65472),
           KeySym(65472),
           KeySym(65472),
           KeySym(65472),
           KeySym(269024771)),
70: (KeySym(65473),
           KeySym(65473),
           KeySym(65473),
           KeySym(65473),
           KeySym(65473),
           KeySym(65473),
           KeySym(269024772)),
71: (KeySym(65474),
           KeySym(65474),
           KeySym(65474),
           KeySym(65474),
           KeySym(65474),
           KeySym(65474),
           KeySym(269024773)),
72: (KeySym(65475),
           KeySym(65475),
           KeySym(65475),
           KeySym(65475),
           KeySym(65475),
           KeySym(65475),
           KeySym(269024774)),
73: (KeySym(65476),
           KeySym(65476),
           KeySym(65476),
           KeySym(65476),
           KeySym(65476),
           KeySym(65476),
           KeySym(269024775)),
74: (KeySym(65477),
           KeySym(65477),
           KeySym(65477),
           KeySym(65477),
           KeySym(65477),
           KeySym(65477),
           KeySym(269024776)),
75: (KeySym(65478),
           KeySym(65478),
           KeySym(65478),
           KeySym(65478),
           KeySym(65478),
           KeySym(65478),
           KeySym(269024777)),
76: (KeySym(65479),
           KeySym(65479),
           KeySym(65479),
           KeySym(65479),
           KeySym(65479),
           KeySym(65479),
           KeySym(269024778)),
77: (KeySym(65407),
           KeySym(0),
           KeySym(65407),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
78: (KeySym(65300),
           KeySym(0),
           KeySym(65300),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
79: (KeySym(65429),
           KeySym(65463),
           KeySym(65429),
           KeySym(65463),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
80: (KeySym(65431),
           KeySym(65464),
           KeySym(65431),
           KeySym(65464),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
81: (KeySym(65434),
           KeySym(65465),
           KeySym(65434),
           KeySym(65465),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
82: (KeySym(65453),
           KeySym(65453),
           KeySym(65453),
           KeySym(65453),
           KeySym(65453),
           KeySym(65453),
           KeySym(269024803)),
83: (KeySym(65430),
           KeySym(65460),
           KeySym(65430),
           KeySym(65460),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
84: (KeySym(65437),
           KeySym(65461),
           KeySym(65437),
           KeySym(65461),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
85: (KeySym(65432),
           KeySym(65462),
           KeySym(65432),
           KeySym(65462),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
86: (KeySym(65451),
           KeySym(65451),
           KeySym(65451),
           KeySym(65451),
           KeySym(65451),
           KeySym(65451),
           KeySym(269024802)),
87: (KeySym(65436),
           KeySym(65457),
           KeySym(65436),
           KeySym(65457),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
88: (KeySym(65433),
           KeySym(65458),
           KeySym(65433),
           KeySym(65458),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
89: (KeySym(65435),
           KeySym(65459),
           KeySym(65435),
           KeySym(65459),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
90: (KeySym(65438),
           KeySym(65456),
           KeySym(65438),
           KeySym(65456),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
91: (KeySym(65439),
           KeySym(65454),
           KeySym(65439),
           KeySym(65454),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
92: (KeySym(65027),
           KeySym(0),
           KeySym(65027),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
93: (KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
94: (KeySym(60),
           KeySym(62),
           KeySym(60),
           KeySym(62),
           KeySym(124),
           KeySym(166),
           KeySym(124)),
95: (KeySym(65480),
           KeySym(65480),
           KeySym(65480),
           KeySym(65480),
           KeySym(65480),
           KeySym(65480),
           KeySym(269024779)),
96: (KeySym(65481),
           KeySym(65481),
           KeySym(65481),
           KeySym(65481),
           KeySym(65481),
           KeySym(65481),
           KeySym(269024780)),
97: (KeySym(92),
           KeySym(95),
           KeySym(92),
           KeySym(95),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
98: (KeySym(65318),
           KeySym(0),
           KeySym(65318),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
99: (KeySym(65317),
           KeySym(0),
           KeySym(65317),
           KeySym(0),
           KeySym(0),
           KeySym(0),
           KeySym(0)),
100: (KeySym(65288),
            KeySym(0),
            KeySym(65288),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
101: (KeySym(65319),
            KeySym(65316),
            KeySym(65319),
            KeySym(65316),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
102: (KeySym(65513),
            KeySym(0),
            KeySym(65513),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
103: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
104: (KeySym(65421),
            KeySym(0),
            KeySym(65421),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
105: (KeySym(65508),
            KeySym(0),
            KeySym(65508),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
106: (KeySym(65455),
            KeySym(65455),
            KeySym(65455),
            KeySym(65455),
            KeySym(65455),
            KeySym(65455),
            KeySym(269024800)),
107: (KeySym(65377),
            KeySym(65378),
            KeySym(65377),
            KeySym(65378),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
108: (KeySym(65518),
            KeySym(0),
            KeySym(65518),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
109: (KeySym(65290),
            KeySym(0),
            KeySym(65290),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
110: (KeySym(65360),
            KeySym(0),
            KeySym(65360),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
111: (KeySym(65362),
            KeySym(0),
            KeySym(65362),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
112: (KeySym(65365),
            KeySym(0),
            KeySym(65365),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
113: (KeySym(65361),
            KeySym(0),
            KeySym(65361),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
114: (KeySym(65363),
            KeySym(0),
            KeySym(65363),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
115: (KeySym(65367),
            KeySym(0),
            KeySym(65367),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
116: (KeySym(65364),
            KeySym(0),
            KeySym(65364),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
117: (KeySym(65366),
            KeySym(0),
            KeySym(65366),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
118: (KeySym(65379),
            KeySym(0),
            KeySym(65379),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
119: (KeySym(65535),
            KeySym(0),
            KeySym(65535),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
120: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
121: (KeySym(269025042),
            KeySym(0),
            KeySym(269025042),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
122: (KeySym(269025041),
            KeySym(0),
            KeySym(269025041),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
123: (KeySym(269025043),
            KeySym(0),
            KeySym(269025043),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
124: (KeySym(269025066),
            KeySym(0),
            KeySym(269025066),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
125: (KeySym(65469),
            KeySym(0),
            KeySym(65469),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
126: (KeySym(177),
            KeySym(0),
            KeySym(177),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
127: (KeySym(65299),
            KeySym(65387),
            KeySym(65299),
            KeySym(65387),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
128: (KeySym(269025098),
            KeySym(0),
            KeySym(269025098),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
129: (KeySym(65454),
            KeySym(65454),
            KeySym(65454),
            KeySym(65454),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
130: (KeySym(65329),
            KeySym(0),
            KeySym(65329),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
131: (KeySym(65332),
            KeySym(0),
            KeySym(65332),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
132: (KeySym(92),
            KeySym(124),
            KeySym(92),
            KeySym(124),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
133: (KeySym(65515),
            KeySym(0),
            KeySym(65515),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
134: (KeySym(65516),
            KeySym(0),
            KeySym(65516),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
135: (KeySym(65383),
            KeySym(0),
            KeySym(65383),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
136: (KeySym(65385),
            KeySym(0),
            KeySym(65385),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
137: (KeySym(65382),
            KeySym(0),
            KeySym(65382),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
138: (KeySym(268828528),
            KeySym(0),
            KeySym(268828528),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
139: (KeySym(65381),
            KeySym(0),
            KeySym(65381),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
140: (KeySym(268828529),
            KeySym(0),
            KeySym(268828529),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
141: (KeySym(269025111),
            KeySym(0),
            KeySym(269025111),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
142: (KeySym(268828531),
            KeySym(0),
            KeySym(268828531),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
143: (KeySym(269025133),
            KeySym(0),
            KeySym(269025133),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
144: (KeySym(65384),
            KeySym(0),
            KeySym(65384),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
145: (KeySym(269025112),
            KeySym(0),
            KeySym(269025112),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
146: (KeySym(65386),
            KeySym(0),
            KeySym(65386),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
147: (KeySym(269025125),
            KeySym(0),
            KeySym(269025125),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
148: (KeySym(269025053),
            KeySym(0),
            KeySym(269025053),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
149: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
150: (KeySym(269025071),
            KeySym(0),
            KeySym(269025071),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
151: (KeySym(269025067),
            KeySym(0),
            KeySym(269025067),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
152: (KeySym(269025117),
            KeySym(0),
            KeySym(269025117),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
153: (KeySym(269025147),
            KeySym(0),
            KeySym(269025147),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
154: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
155: (KeySym(269025162),
            KeySym(0),
            KeySym(269025162),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
156: (KeySym(269025089),
            KeySym(0),
            KeySym(269025089),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
157: (KeySym(269025090),
            KeySym(0),
            KeySym(269025090),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
158: (KeySym(269025070),
            KeySym(0),
            KeySym(269025070),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
159: (KeySym(269025114),
            KeySym(0),
            KeySym(269025114),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
160: (KeySym(269025069),
            KeySym(0),
            KeySym(269025069),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
161: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
162: (KeySym(269025140),
            KeySym(0),
            KeySym(269025140),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
163: (KeySym(269025049),
            KeySym(0),
            KeySym(269025049),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
164: (KeySym(269025072),
            KeySym(0),
            KeySym(269025072),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
165: (KeySym(269025075),
            KeySym(0),
            KeySym(269025075),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
166: (KeySym(269025062),
            KeySym(0),
            KeySym(269025062),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
167: (KeySym(269025063),
            KeySym(0),
            KeySym(269025063),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
168: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
169: (KeySym(269025068),
            KeySym(0),
            KeySym(269025068),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
170: (KeySym(269025068),
            KeySym(269025068),
            KeySym(269025068),
            KeySym(269025068),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
171: (KeySym(269025047),
            KeySym(0),
            KeySym(269025047),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
172: (KeySym(269025044),
            KeySym(269025073),
            KeySym(269025044),
            KeySym(269025073),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
173: (KeySym(269025046),
            KeySym(0),
            KeySym(269025046),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
174: (KeySym(269025045),
            KeySym(269025068),
            KeySym(269025045),
            KeySym(269025068),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
175: (KeySym(269025052),
            KeySym(0),
            KeySym(269025052),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
176: (KeySym(269025086),
            KeySym(0),
            KeySym(269025086),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
177: (KeySym(269025134),
            KeySym(0),
            KeySym(269025134),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
178: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
179: (KeySym(269025153),
            KeySym(0),
            KeySym(269025153),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
180: (KeySym(269025048),
            KeySym(0),
            KeySym(269025048),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
181: (KeySym(269025139),
            KeySym(0),
            KeySym(269025139),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
182: (KeySym(269025110),
            KeySym(0),
            KeySym(269025110),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
183: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
184: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
185: (KeySym(269025144),
            KeySym(0),
            KeySym(269025144),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
186: (KeySym(269025145),
            KeySym(0),
            KeySym(269025145),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
187: (KeySym(40),
            KeySym(0),
            KeySym(40),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
188: (KeySym(41),
            KeySym(0),
            KeySym(41),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
189: (KeySym(269025128),
            KeySym(0),
            KeySym(269025128),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
190: (KeySym(65382),
            KeySym(0),
            KeySym(65382),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
191: (KeySym(269025153),
            KeySym(0),
            KeySym(269025153),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
192: (KeySym(269025093),
            KeySym(0),
            KeySym(269025093),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
193: (KeySym(269025094),
            KeySym(0),
            KeySym(269025094),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
194: (KeySym(269025095),
            KeySym(0),
            KeySym(269025095),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
195: (KeySym(269025096),
            KeySym(0),
            KeySym(269025096),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
196: (KeySym(269025097),
            KeySym(0),
            KeySym(269025097),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
197: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
198: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
199: (KeySym(269025193),
            KeySym(0),
            KeySym(269025193),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
200: (KeySym(269025200),
            KeySym(0),
            KeySym(269025200),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
201: (KeySym(269025201),
            KeySym(0),
            KeySym(269025201),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
202: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
203: (KeySym(65406),
            KeySym(0),
            KeySym(65406),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
204: (KeySym(0),
            KeySym(65513),
            KeySym(0),
            KeySym(65513),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
205: (KeySym(0),
            KeySym(65511),
            KeySym(0),
            KeySym(65511),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
206: (KeySym(0),
            KeySym(65515),
            KeySym(0),
            KeySym(65515),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
207: (KeySym(0),
            KeySym(65517),
            KeySym(0),
            KeySym(65517),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
208: (KeySym(269025044),
            KeySym(0),
            KeySym(269025044),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
209: (KeySym(269025073),
            KeySym(0),
            KeySym(269025073),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
210: (KeySym(269025091),
            KeySym(0),
            KeySym(269025091),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
211: (KeySym(269025092),
            KeySym(0),
            KeySym(269025092),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
212: (KeySym(269025099),
            KeySym(0),
            KeySym(269025099),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
213: (KeySym(269025191),
            KeySym(0),
            KeySym(269025191),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
214: (KeySym(269025110),
            KeySym(0),
            KeySym(269025110),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
215: (KeySym(269025044),
            KeySym(0),
            KeySym(269025044),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
216: (KeySym(269025175),
            KeySym(0),
            KeySym(269025175),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
217: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
218: (KeySym(65377),
            KeySym(0),
            KeySym(65377),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
219: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
220: (KeySym(269025167),
            KeySym(0),
            KeySym(269025167),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
221: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
222: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
223: (KeySym(269025049),
            KeySym(0),
            KeySym(269025049),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
224: (KeySym(269025166),
            KeySym(0),
            KeySym(269025166),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
225: (KeySym(269025051),
            KeySym(0),
            KeySym(269025051),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
226: (KeySym(269025119),
            KeySym(0),
            KeySym(269025119),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
227: (KeySym(269025084),
            KeySym(0),
            KeySym(269025084),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
228: (KeySym(269025118),
            KeySym(0),
            KeySym(269025118),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
229: (KeySym(269025078),
            KeySym(0),
            KeySym(269025078),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
230: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
231: (KeySym(65385),
            KeySym(0),
            KeySym(65385),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
232: (KeySym(269025027),
            KeySym(0),
            KeySym(269025027),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
233: (KeySym(269025026),
            KeySym(0),
            KeySym(269025026),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
234: (KeySym(269025074),
            KeySym(0),
            KeySym(269025074),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
235: (KeySym(269025113),
            KeySym(0),
            KeySym(269025113),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
236: (KeySym(269025028),
            KeySym(0),
            KeySym(269025028),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
237: (KeySym(269025030),
            KeySym(0),
            KeySym(269025030),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
238: (KeySym(269025029),
            KeySym(0),
            KeySym(269025029),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
239: (KeySym(269025147),
            KeySym(0),
            KeySym(269025147),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
240: (KeySym(269025138),
            KeySym(0),
            KeySym(269025138),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
241: (KeySym(269025168),
            KeySym(0),
            KeySym(269025168),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
242: (KeySym(269025143),
            KeySym(0),
            KeySym(269025143),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
243: (KeySym(269025115),
            KeySym(0),
            KeySym(269025115),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
244: (KeySym(269025171),
            KeySym(0),
            KeySym(269025171),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
245: (KeySym(269025172),
            KeySym(0),
            KeySym(269025172),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
246: (KeySym(269025173),
            KeySym(0),
            KeySym(269025173),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
247: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
248: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
249: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
250: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
251: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
252: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
253: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
254: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0)),
255: (KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0),
            KeySym(0))}

* Mon 16 Jun 2014 02:30:17 PM JST
 
* Mon 16 Jun 2014 02:30:19 PM JST
 
* Mon 16 Jun 2014 02:46:15 PM JST
    
* Mon 16 Jun 2014 02:46:46 PM JST
    
* Mon 16 Jun 2014 02:46:55 PM JST
    
* Mon 16 Jun 2014 02:47:02 PM JST
    
* Mon 16 Jun 2014 02:48:38 PM JST
{32: [(0, 65), (2, 65)],
 33: [(1, 10), (3, 10)],
 34: [(1, 11), (3, 11)],
 35: [(1, 12), (3, 12)],
 36: [(1, 13), (3, 13)],
 37: [(1, 14), (3, 14)],
 38: [(1, 15), (3, 15)],
 39: [(1, 16), (3, 16)],
 40: [(0, 187), (1, 17), (2, 187), (3, 17)],
 41: [(0, 188), (1, 18), (2, 188), (3, 18)],
 42: [(1, 48), (3, 48)],
 43: [(1, 20), (3, 20)],
 44: [(0, 59), (2, 59)],
 45: [(0, 47), (2, 47)],
 46: [(0, 60), (2, 60)],
 47: [(0, 61), (2, 61)],
 48: [(0, 19), (2, 19)],
 49: [(0, 10), (2, 10)],
 50: [(0, 11), (2, 11)],
 51: [(0, 12), (2, 12)],
 52: [(0, 13), (2, 13)],
 53: [(0, 14), (2, 14)],
 54: [(0, 15), (2, 15)],
 55: [(0, 16), (2, 16)],
 56: [(0, 17), (2, 17)],
 57: [(0, 18), (2, 18)],
 58: [(0, 48), (2, 48)],
 59: [(0, 20), (2, 20)],
 60: [(0, 94), (1, 59), (2, 94), (3, 59)],
 61: [(1, 47), (3, 47)],
 62: [(1, 60), (1, 94), (3, 60), (3, 94)],
 63: [(1, 61), (3, 61)],
 64: [(0, 34), (2, 34)],
 65: [(1, 38), (3, 38)],
 66: [(1, 56), (3, 56)],
 67: [(1, 54), (3, 54)],
 68: [(1, 40), (3, 40)],
 69: [(1, 26), (3, 26)],
 70: [(1, 41), (3, 41)],
 71: [(1, 42), (3, 42)],
 72: [(1, 43), (3, 43)],
 73: [(1, 31), (3, 31)],
 74: [(1, 44), (3, 44)],
 75: [(1, 45), (3, 45)],
 76: [(1, 46), (3, 46)],
 77: [(1, 58), (3, 58)],
 78: [(1, 57), (3, 57)],
 79: [(1, 32), (3, 32)],
 80: [(1, 33), (3, 33)],
 81: [(1, 24), (3, 24)],
 82: [(1, 27), (3, 27)],
 83: [(1, 39), (3, 39)],
 84: [(1, 28), (3, 28)],
 85: [(1, 30), (3, 30)],
 86: [(1, 55), (3, 55)],
 87: [(1, 25), (3, 25)],
 88: [(1, 53), (3, 53)],
 89: [(1, 29), (3, 29)],
 90: [(1, 52), (3, 52)],
 91: [(0, 35), (2, 35)],
 92: [(0, 97), (0, 132), (2, 97), (2, 132)],
 93: [(0, 51), (2, 51)],
 94: [(0, 21), (2, 21)],
 95: [(1, 19), (1, 97), (3, 19), (3, 97)],
 96: [(1, 34), (3, 34)],
 97: [(0, 38), (2, 38)],
 98: [(0, 56), (2, 56)],
 99: [(0, 54), (2, 54)],
 100: [(0, 40), (2, 40)],
 101: [(0, 26), (2, 26)],
 102: [(0, 41), (2, 41)],
 103: [(0, 42), (2, 42)],
 104: [(0, 43), (2, 43)],
 105: [(0, 31), (2, 31)],
 106: [(0, 44), (2, 44)],
 107: [(0, 45), (2, 45)],
 108: [(0, 46), (2, 46)],
 109: [(0, 58), (2, 58)],
 110: [(0, 57), (2, 57)],
 111: [(0, 32), (2, 32)],
 112: [(0, 33), (2, 33)],
 113: [(0, 24), (2, 24)],
 114: [(0, 27), (2, 27)],
 115: [(0, 39), (2, 39)],
 116: [(0, 28), (2, 28)],
 117: [(0, 30), (2, 30)],
 118: [(0, 55), (2, 55)],
 119: [(0, 25), (2, 25)],
 120: [(0, 53), (2, 53)],
 121: [(0, 29), (2, 29)],
 122: [(0, 52), (2, 52)],
 123: [(1, 35), (3, 35)],
 124: [(1, 132), (3, 132), (4, 94), (6, 94)],
 125: [(1, 51), (3, 51)],
 126: [(1, 21), (3, 21)],
 166: [(5, 94)],
 177: [(0, 126), (2, 126)],
 65027: [(0, 92), (2, 92)],
 65056: [(1, 23), (3, 23)],
 65288: [(0, 22), (0, 100), (1, 22), (2, 22), (2, 100), (3, 22)],
 65289: [(0, 23), (2, 23)],
 65290: [(0, 109), (2, 109)],
 65293: [(0, 36), (2, 36)],
 65299: [(0, 127), (2, 127)],
 65300: [(0, 78), (2, 78)],
 65307: [(0, 9), (2, 9)],
 65313: [(1, 49), (3, 49)],
 65316: [(1, 101), (3, 101)],
 65317: [(0, 99), (2, 99)],
 65318: [(0, 98), (2, 98)],
 65319: [(0, 101), (2, 101)],
 65322: [(0, 49), (0, 62), (2, 49), (2, 62)],
 65329: [(0, 130), (2, 130)],
 65332: [(0, 131), (2, 131)],
 65360: [(0, 110), (2, 110)],
 65361: [(0, 113), (2, 113)],
 65362: [(0, 111), (2, 111)],
 65363: [(0, 114), (2, 114)],
 65364: [(0, 116), (2, 116)],
 65365: [(0, 112), (2, 112)],
 65366: [(0, 117), (2, 117)],
 65367: [(0, 115), (2, 115)],
 65377: [(0, 107), (0, 218), (2, 107), (2, 218)],
 65378: [(1, 107), (3, 107)],
 65379: [(0, 118), (2, 118)],
 65381: [(0, 139), (2, 139)],
 65382: [(0, 137), (0, 190), (2, 137), (2, 190)],
 65383: [(0, 135), (2, 135)],
 65384: [(0, 144), (2, 144)],
 65385: [(0, 136), (0, 231), (2, 136), (2, 231)],
 65386: [(0, 146), (2, 146)],
 65387: [(1, 127), (3, 127)],
 65406: [(0, 203), (2, 203)],
 65407: [(0, 77), (2, 77)],
 65421: [(0, 104), (2, 104)],
 65429: [(0, 79), (2, 79)],
 65430: [(0, 83), (2, 83)],
 65431: [(0, 80), (2, 80)],
 65432: [(0, 85), (2, 85)],
 65433: [(0, 88), (2, 88)],
 65434: [(0, 81), (2, 81)],
 65435: [(0, 89), (2, 89)],
 65436: [(0, 87), (2, 87)],
 65437: [(0, 84), (2, 84)],
 65438: [(0, 90), (2, 90)],
 65439: [(0, 91), (2, 91)],
 65450: [(0, 63), (1, 63), (2, 63), (3, 63), (4, 63), (5, 63)],
 65451: [(0, 86), (1, 86), (2, 86), (3, 86), (4, 86), (5, 86)],
 65453: [(0, 82), (1, 82), (2, 82), (3, 82), (4, 82), (5, 82)],
 65454: [(0, 129), (1, 91), (1, 129), (2, 129), (3, 91), (3, 129)],
 65455: [(0, 106), (1, 106), (2, 106), (3, 106), (4, 106), (5, 106)],
 65456: [(1, 90), (3, 90)],
 65457: [(1, 87), (3, 87)],
 65458: [(1, 88), (3, 88)],
 65459: [(1, 89), (3, 89)],
 65460: [(1, 83), (3, 83)],
 65461: [(1, 84), (3, 84)],
 65462: [(1, 85), (3, 85)],
 65463: [(1, 79), (3, 79)],
 65464: [(1, 80), (3, 80)],
 65465: [(1, 81), (3, 81)],
 65469: [(0, 125), (2, 125)],
 65470: [(0, 67), (1, 67), (2, 67), (3, 67), (4, 67), (5, 67)],
 65471: [(0, 68), (1, 68), (2, 68), (3, 68), (4, 68), (5, 68)],
 65472: [(0, 69), (1, 69), (2, 69), (3, 69), (4, 69), (5, 69)],
 65473: [(0, 70), (1, 70), (2, 70), (3, 70), (4, 70), (5, 70)],
 65474: [(0, 71), (1, 71), (2, 71), (3, 71), (4, 71), (5, 71)],
 65475: [(0, 72), (1, 72), (2, 72), (3, 72), (4, 72), (5, 72)],
 65476: [(0, 73), (1, 73), (2, 73), (3, 73), (4, 73), (5, 73)],
 65477: [(0, 74), (1, 74), (2, 74), (3, 74), (4, 74), (5, 74)],
 65478: [(0, 75), (1, 75), (2, 75), (3, 75), (4, 75), (5, 75)],
 65479: [(0, 76), (1, 76), (2, 76), (3, 76), (4, 76), (5, 76)],
 65480: [(0, 95), (1, 95), (2, 95), (3, 95), (4, 95), (5, 95)],
 65481: [(0, 96), (1, 96), (2, 96), (3, 96), (4, 96), (5, 96)],
 65505: [(0, 50), (2, 50)],
 65507: [(0, 37), (0, 66), (2, 37), (2, 66)],
 65508: [(0, 105), (2, 105)],
 65511: [(1, 64), (1, 205), (3, 64), (3, 205)],
 65513: [(0, 64), (0, 102), (1, 204), (2, 64), (2, 102), (3, 204)],
 65515: [(0, 133), (1, 206), (2, 133), (3, 206)],
 65516: [(0, 134), (2, 134)],
 65517: [(1, 207), (3, 207)],
 65518: [(0, 108), (2, 108)],
 65535: [(0, 119), (2, 119)],
 268828528: [(0, 138), (2, 138)],
 268828529: [(0, 140), (2, 140)],
 268828531: [(0, 142), (2, 142)],
 269024769: [(6, 67)],
 269024770: [(6, 68)],
 269024771: [(6, 69)],
 269024772: [(6, 70)],
 269024773: [(6, 71)],
 269024774: [(6, 72)],
 269024775: [(6, 73)],
 269024776: [(6, 74)],
 269024777: [(6, 75)],
 269024778: [(6, 76)],
 269024779: [(6, 95)],
 269024780: [(6, 96)],
 269024800: [(6, 106)],
 269024801: [(6, 63)],
 269024802: [(6, 86)],
 269024803: [(6, 82)],
 269025026: [(0, 233), (2, 233)],
 269025027: [(0, 232), (2, 232)],
 269025028: [(0, 236), (2, 236)],
 269025029: [(0, 238), (2, 238)],
 269025030: [(0, 237), (2, 237)],
 269025041: [(0, 122), (2, 122)],
 269025042: [(0, 121), (2, 121)],
 269025043: [(0, 123), (2, 123)],
 269025044: [(0, 172), (0, 208), (0, 215), (2, 172), (2, 208), (2, 215)],
 269025045: [(0, 174), (2, 174)],
 269025046: [(0, 173), (2, 173)],
 269025047: [(0, 171), (2, 171)],
 269025048: [(0, 180), (2, 180)],
 269025049: [(0, 163), (0, 223), (2, 163), (2, 223)],
 269025051: [(0, 225), (2, 225)],
 269025052: [(0, 175), (2, 175)],
 269025053: [(0, 148), (2, 148)],
 269025062: [(0, 166), (2, 166)],
 269025063: [(0, 167), (2, 167)],
 269025066: [(0, 124), (2, 124)],
 269025067: [(0, 151), (2, 151)],
 269025068: [(0, 169),
  (0, 170),
  (1, 170),
  (1, 174),
  (2, 169),
  (2, 170),
  (3, 170),
  (3, 174)],
 269025069: [(0, 160), (2, 160)],
 269025070: [(0, 158), (2, 158)],
 269025071: [(0, 150), (2, 150)],
 269025072: [(0, 164), (2, 164)],
 269025073: [(0, 209), (1, 172), (2, 209), (3, 172)],
 269025074: [(0, 234), (2, 234)],
 269025075: [(0, 165), (2, 165)],
 269025078: [(0, 229), (2, 229)],
 269025084: [(0, 227), (2, 227)],
 269025086: [(0, 176), (2, 176)],
 269025089: [(0, 156), (2, 156)],
 269025090: [(0, 157), (2, 157)],
 269025091: [(0, 210), (2, 210)],
 269025092: [(0, 211), (2, 211)],
 269025093: [(0, 192), (2, 192)],
 269025094: [(0, 193), (2, 193)],
 269025095: [(0, 194), (2, 194)],
 269025096: [(0, 195), (2, 195)],
 269025097: [(0, 196), (2, 196)],
 269025098: [(0, 128), (2, 128)],
 269025099: [(0, 212), (2, 212)],
 269025110: [(0, 182), (0, 214), (2, 182), (2, 214)],
 269025111: [(0, 141), (2, 141)],
 269025112: [(0, 145), (2, 145)],
 269025113: [(0, 235), (2, 235)],
 269025114: [(0, 159), (2, 159)],
 269025115: [(0, 243), (2, 243)],
 269025117: [(0, 152), (2, 152)],
 269025118: [(0, 228), (2, 228)],
 269025119: [(0, 226), (2, 226)],
 269025125: [(0, 147), (2, 147)],
 269025128: [(0, 189), (2, 189)],
 269025133: [(0, 143), (2, 143)],
 269025134: [(0, 177), (2, 177)],
 269025138: [(0, 240), (2, 240)],
 269025139: [(0, 181), (2, 181)],
 269025140: [(0, 162), (2, 162)],
 269025143: [(0, 242), (2, 242)],
 269025144: [(0, 185), (2, 185)],
 269025145: [(0, 186), (2, 186)],
 269025147: [(0, 153), (0, 239), (2, 153), (2, 239)],
 269025153: [(0, 179), (0, 191), (2, 179), (2, 191)],
 269025162: [(0, 155), (2, 155)],
 269025166: [(0, 224), (2, 224)],
 269025167: [(0, 220), (2, 220)],
 269025168: [(0, 241), (2, 241)],
 269025171: [(0, 244), (2, 244)],
 269025172: [(0, 245), (2, 245)],
 269025173: [(0, 246), (2, 246)],
 269025175: [(0, 216), (2, 216)],
 269025191: [(0, 213), (2, 213)],
 269025193: [(0, 199), (2, 199)],
 269025200: [(0, 200), (2, 200)],
 269025201: [(0, 201), (2, 201)]}

* Mon 16 Jun 2014 02:48:58 PM JST
  
* Mon 16 Jun 2014 02:49:06 PM JST
  
* Mon 16 Jun 2014 02:49:08 PM JST
  
* Mon 16 Jun 2014 02:49:09 PM JST
  
* Mon 16 Jun 2014 02:49:10 PM JST
  
* Mon 16 Jun 2014 02:49:11 PM JST
  
* Mon 16 Jun 2014 02:54:42 PM JST
keysym_to_keycodes
* Mon 16 Jun 2014 03:17:12 PM JST
0x6b
* Mon 16 Jun 2014 03:17:33 PM JST
0x28
* Mon 16 Jun 2014 03:22:18 PM JST
to_symkey()
* Mon 16 Jun 2014 03:22:22 PM JST
D 
* Mon 16 Jun 2014 03:28:18 PM JST
56623126
* Mon 16 Jun 2014 03:30:17 PM JST
56623126)
* Mon 16 Jun 2014 03:30:17 PM JST
press(56623126)
* Mon 16 Jun 2014 03:42:23 PM JST
65470
* Mon 16 Jun 2014 03:42:56 PM JST
65470
* Mon 16 Jun 2014 03:43:11 PM JST
268828528
* Mon 16 Jun 2014 03:43:19 PM JST
269024769
* Mon 16 Jun 2014 03:43:55 PM JST
269025026
* Mon 16 Jun 2014 03:44:07 PM JST
233
* Mon 16 Jun 2014 03:44:20 PM JST
65433
* Mon 16 Jun 2014 03:55:19 PM JST
0xff08
* Mon 16 Jun 2014 04:28:28 PM JST
65450
* Mon 16 Jun 2014 04:29:00 PM JST
65451
* Mon 16 Jun 2014 04:29:21 PM JST
65453
* Mon 16 Jun 2014 04:29:33 PM JST
65455
* Mon 16 Jun 2014 04:29:45 PM JST
65470
* Mon 16 Jun 2014 04:31:24 PM JST
65361
* Mon 16 Jun 2014 04:33:17 PM JST
0xffb4
* Mon 16 Jun 2014 04:33:22 PM JST
65460
* Mon 16 Jun 2014 05:35:11 PM JST
KeySym(65361).to_char()
* Mon 16 Jun 2014 05:35:20 PM JST
653
* Mon 16 Jun 2014 09:54:21 PM JST
changekeyboardmapping
* Tue 17 Jun 2014 01:36:48 AM JST
        if not isinstance(key, ):
            # TODO: (Atami) [2014/06/17]
            raise TypeError()

* Tue 17 Jun 2014 01:37:37 AM JST
        if not isinstance(item, KeySym):
            # TODO: (Atami) [2014/06/17]
            raise TypeError()

* Tue 17 Jun 2014 01:39:57 AM JST
                self.__keycheck(k)
                self.__itemcheck(v)

* Tue 17 Jun 2014 01:40:58 AM JST

* Tue 17 Jun 2014 01:40:58 AM JST

* Tue 17 Jun 2014 01:40:58 AM JST
        super(ModSymMap, self).update(dict_=None, **kwargs)

* Tue 17 Jun 2014 01:42:35 AM JST
ModSymMap
* Tue 17 Jun 2014 02:11:00 AM JST
KeyCodeSymsMap
* Tue 17 Jun 2014 02:11:09 AM JST
KeyCodeSymsMap
* Tue 17 Jun 2014 11:24:21 AM JST
NamedModifierMask
* Tue 17 Jun 2014 11:24:38 AM JST
Control
* Tue 17 Jun 2014 02:21:04 PM JST
self
* Tue 17 Jun 2014 02:31:09 PM JST
return [(key, self[key]) for key in self._orderkeys if key in self]
* Tue 17 Jun 2014 02:31:27 PM JST
item
* Tue 17 Jun 2014 02:31:47 PM JST
        for key in self._orderkeys:
            if key in self._orderkeys:
                yield (key, self[key])
        raise StopIteration()

* Tue 17 Jun 2014 02:31:51 PM JST
key])
* Tue 17 Jun 2014 02:31:51 PM JST
self[key])
* Tue 17 Jun 2014 02:32:01 PM JST
        for key in self._orderkeys:
            if key in self._orderkeys:
                yield (key, self[key])
        raise StopIteration()

* Tue 17 Jun 2014 02:32:19 PM JST
key, 
* Tue 17 Jun 2014 02:32:34 PM JST
return [(key, self[key]) for key in self._orderkeys if key in self]
* Tue 17 Jun 2014 02:32:40 PM JST
key])
* Tue 17 Jun 2014 02:32:43 PM JST
key, 
* Tue 17 Jun 2014 02:33:20 PM JST
dict
* Tue 17 Jun 2014 02:34:29 PM JST
OrderDict
* Tue 17 Jun 2014 02:35:35 PM JST
o[4] = 'hello'
* Tue 17 Jun 2014 02:37:30 PM JST
len)
* Tue 17 Jun 2014 02:41:41 PM JST
from t1.dictutil.orderdict import OrderDict
* Tue 17 Jun 2014 02:41:52 PM JST
OrderDict
* Tue 17 Jun 2014 03:30:34 PM JST
from t1.dictutil.orderdict import OrderDict
o=OrderDict((1,2,3), {4:'hello'})

* Tue 17 Jun 2014 03:30:48 PM JST
o=OrderDict((1,2,3), {3:'hello'})
* Tue 17 Jun 2014 03:47:57 PM JST

* Tue 17 Jun 2014 03:48:01 PM JST
SortedDict, ValueSortedDict
* Tue 17 Jun 2014 03:48:08 PM JST
sortdict
* Tue 17 Jun 2014 03:48:18 PM JST
OrderDict
* Tue 17 Jun 2014 03:49:30 PM JST
OrderDict
* Tue 17 Jun 2014 03:54:21 PM JST
KeyModifiers
* Tue 17 Jun 2014 03:54:25 PM JST
Key
* Tue 17 Jun 2014 03:54:28 PM JST
KeyModifiers
* Tue 17 Jun 2014 03:55:58 PM JST
ModSymMap
* Tue 17 Jun 2014 03:57:38 PM JST

* Tue 17 Jun 2014 03:57:38 PM JST

* Tue 17 Jun 2014 03:57:38 PM JST
from xcb3.xobj.keybuttonmodifiers import KeyModifiers

* Tue 17 Jun 2014 03:58:23 PM JST
ModSymMap
* Tue 17 Jun 2014 03:58:59 PM JST
(0, 1, )
* Tue 17 Jun 2014 03:59:48 PM JST
import 
* Tue 17 Jun 2014 04:00:46 PM JST
KeySymList, 
* Tue 17 Jun 2014 04:02:09 PM JST
NamedModifierMask
* Tue 17 Jun 2014 04:03:46 PM JST
(NamedModifierMask.Null, NamedModifierMask.Shift, NamedModifierMask.Mod5, NamedModifierMask.Mod5 | NamedModifierMask.Shift, NamedModifierMask.Control | NamedModifierMask.Alt, NamedModifierMask.Control | NamedModifierMask.Alt | NamedModifierMask.Shift)
* Tue 17 Jun 2014 04:04:07 PM JST
xcb
* Tue 17 Jun 2014 04:04:07 PM JST
form xcb
* Tue 17 Jun 2014 04:05:27 PM JST
              NamedModifierMask.Shift,
* Tue 17 Jun 2014 05:16:12 PM JST
hello
* Tue 17 Jun 2014 05:16:28 PM JST
google
* Tue 17 Jun 2014 05:24:16 PM JST
get
* Tue 17 Jun 2014 05:24:19 PM JST
get
* Tue 17 Jun 2014 05:27:51 PM JST
pass
* Tue 17 Jun 2014 05:28:32 PM JST
KeySyms
* Tue 17 Jun 2014 05:29:55 PM JST
pass
* Tue 17 Jun 2014 05:30:06 PM JST
pass
* Tue 17 Jun 2014 05:32:33 PM JST
class KeyCodeSymsMap(dict, Display):
    r"""SUMMARY
    """

    def __init__(self, dict_=None, display=None, **kwargs):
        r"""SUMMARY

        __init__(dict_=None, display=None, **kwargs)

        @Arguments:
        - `dict_`:
        - `display`:
        - `kwargs`:

        @Return:
        """
        Display.__init__(self, display)
        dict.__init__(self)
        if not dict_ is None:
            self.update(dict_)
        if len(kwargs):
            self.update(kwargs)

    def to_symcodemap(self, ):
        r"""SUMMARY

        get_symcodemap()

        @Return:
        """
        pass

    def to_keysyms(self, ):
        r"""SUMMARY

        get_keysyms()

        @Return:
        """
        syms = KeySyms(display=self.display)
        extend = syms.extend
        for v in self.itervalues():
            extend(v)
        return syms

    def get_syms(self, code):
        r"""SUMMARY

        get_syms(code)

        @Arguments:
        - `code`:

        @Return:
        """
        return self[code]

    def get_sym(self, code, index):
        r"""SUMMARY

        get_sym(code, index)

        @Arguments:
        - `code`:
        - `index`:

        @Return:
        """
        return self.get_syms(code)[index]



* Tue 17 Jun 2014 05:33:36 PM JST
KeyCodeSymsMap
* Tue 17 Jun 2014 05:37:22 PM JST
setup=c.get_setup()

* Tue 17 Jun 2014 05:37:29 PM JST
setup.min_keycode.getkeyboardmapping(setup.max_keycode)
* Tue 17 Jun 2014 05:37:40 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()
setup=c.get_setup()
setup.min_keycode.getkeyboardmapping(setup.max_keycode)

* Tue 17 Jun 2014 05:37:46 PM JST
setup.min_keycode.getkeyboardmapping(setup.max_keycode)
* Tue 17 Jun 2014 05:39:47 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()
setup=c.get_setup()

* Tue 17 Jun 2014 05:39:51 PM JST
setup.min_keycode.getkeyboardmapping(setup.max_keycode)
* Tue 17 Jun 2014 05:40:23 PM JST
setup.min_keycode
* Tue 17 Jun 2014 05:42:12 PM JST
setup.min_keycode.getkeyboardmapping(setup.max_keycode - setup.min_keycode + 1)
* Tue 17 Jun 2014 05:43:01 PM JST
to_keycodemap
* Tue 17 Jun 2014 05:45:43 PM JST
KeyCodeSymsMap
* Tue 17 Jun 2014 05:49:03 PM JST
 
* Tue 17 Jun 2014 05:49:05 PM JST
m=setup.min_keycode.getkeyboardmapping(setup.max_keycode - setup.min_keycode + 1).reply().keysyms.to_keycodemap(setup.min_keycode, 7)
* Tue 17 Jun 2014 05:49:42 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()
setup=c.get_setup()

* Tue 17 Jun 2014 05:49:45 PM JST
setup.min_keycode.getkeyboardmapping(setup.max_keycode - setup.min_keycode + 1)
* Tue 17 Jun 2014 05:53:44 PM JST
pass
* Tue 17 Jun 2014 05:53:46 PM JST
pass
* Tue 17 Jun 2014 05:54:29 PM JST
syms
* Tue 17 Jun 2014 05:55:59 PM JST
cont
* Tue 17 Jun 2014 05:57:17 PM JST
    def __init__(self, dict_=None, display=None, **kwargs):
        r"""SUMMARY

        __init__(dict_=None, display=None, **kwargs)

        @Arguments:
        - `dict_`:
        - `display`:
        - `kwargs`:

        @Return:
        """
        Display.__init__(self, display)
        dict.__init__(self)
        if not dict_ is None:
            self.update(dict_)
        if len(kwargs):
            self.update(kwargs)


* Tue 17 Jun 2014 05:58:40 PM JST
KeySymCodeMap
* Tue 17 Jun 2014 05:59:54 PM JST
SortedList
* Tue 17 Jun 2014 06:01:48 PM JST
setup.min_keycode.getkeyboardmapping(setup.max_keycode - setup.min_keycode + 1).reply().get_keycodesymsmap(setup.min_keycode)
* Tue 17 Jun 2014 06:02:06 PM JST
SortedList
* Tue 17 Jun 2014 06:03:50 PM JST
pass
* Tue 17 Jun 2014 06:03:58 PM JST
syms = 
* Tue 17 Jun 2014 06:04:19 PM JST
symlis = 
* Tue 17 Jun 2014 06:05:02 PM JST
setup.min_keycode.getkeyboardmapping(setup.max_keycode - setup.min_keycode + 1).reply().get_keycodesymsmap(setup.min_keycode)
* Tue 17 Jun 2014 06:05:12 PM JST

* Tue 17 Jun 2014 06:05:12 PM JST

* Tue 17 Jun 2014 06:05:12 PM JST
setup.min_keycode.getkeyboardmapping(setup.max_keycode - setup.min_keycode + 1)

* Tue 17 Jun 2014 06:05:19 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()
setup=c.get_setup()

* Tue 17 Jun 2014 06:05:22 PM JST
setup.min_keycode.getkeyboardmapping(setup.max_keycode - setup.min_keycode + 1).reply().get_keycodesymsmap(setup.min_keycode)
* Tue 17 Jun 2014 06:08:26 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()
setup=c.get_setup()

* Tue 17 Jun 2014 06:08:30 PM JST
setup.min_keycode.getkeyboardmapping(setup.max_keycode - setup.min_keycode + 1).reply().get_keycodesymsmap(setup.min_keycode)
* Tue 17 Jun 2014 06:09:29 PM JST
    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.value == other.value
        return self.value == other

* Tue 17 Jun 2014 06:10:45 PM JST
m.to_symcodemap()
* Tue 17 Jun 2014 06:11:00 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()
setup=c.get_setup()

* Tue 17 Jun 2014 06:11:03 PM JST
setup.min_keycode.getkeyboardmapping(setup.max_keycode - setup.min_keycode + 1).reply().get_keycodesymsmap(setup.min_keycode).to_symcodemap()

* Tue 17 Jun 2014 11:24:06 PM JST
KeyModifiers
* Tue 17 Jun 2014 11:25:19 PM JST

* Tue 17 Jun 2014 11:25:22 PM JST
KeyModifiers
* Tue 17 Jun 2014 11:26:48 PM JST
    def __init__(self, dict_=None, display=None, **kwargs):
        r"""SUMMARY

        __init__(dict_=None, display=None, **kwargs)

        @Arguments:
        - `dict_`:
        - `display`:
        - `kwargs`:

        @Return:
        """
        Display.__init__(self, display)
        dict.__init__(self)
        if not dict_ is None:
            self.update(dict_)
        if len(kwargs):
            self.update(kwargs)


* Tue 17 Jun 2014 11:28:02 PM JST
KeySymCodeMap
* Tue 17 Jun 2014 11:31:53 PM JST
display
* Tue 17 Jun 2014 11:31:54 PM JST
self.display
* Tue 17 Jun 2014 11:35:23 PM JST
setup.min_keycode.getkeyboardmapping(setup.max_keycode - setup.min_keycode + 1).reply().get_keycodesymsmap(setup.min_keycode)
* Tue 17 Jun 2014 11:36:46 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()
setup=c.get_setup()

* Tue 17 Jun 2014 11:36:51 PM JST
setup.min_keycode.getkeyboardmapping(setup.max_keycode - setup.min_keycode + 1).reply().get_keycodesymsmap(setup.min_keycode).to_symcodemap()

* Tue 17 Jun 2014 11:37:28 PM JST
m.to_keysymcodemap({0:0})
* Tue 17 Jun 2014 11:37:36 PM JST
xproto
* Tue 17 Jun 2014 11:38:33 PM JST
NamedModifierMask
* Tue 17 Jun 2014 11:40:05 PM JST
NamedModifierMask.Control | NamedModifierMask.Alt
* Tue 17 Jun 2014 11:41:02 PM JST
{0: NamedModifierMask.Null, 1: NamedModifierMask.Shift, 2: NamedModifierMask.Mod5, 3: NamedModifierMask.Mod5 | NamedModifierMask.Shift, 4: NamedModifierMask.Control | NamedModifierMask.Alt, 5: NamedModifierMask.Control | NamedModifierMask.Alt | NamedModifierMask.Shift, 6: 0, 7: 0}
* Tue 17 Jun 2014 11:42:36 PM JST
codes[0][0]
* Tue 17 Jun 2014 11:45:04 PM JST
from xcb3.xobj.modifiers import Modifiers
* Tue 17 Jun 2014 11:45:13 PM JST
Modifiers
* Tue 17 Jun 2014 11:45:34 PM JST
codes[0][0]
* Tue 17 Jun 2014 11:45:42 PM JST
modmap[]
* Tue 17 Jun 2014 11:45:47 PM JST
codes[0][0]
* Wed 18 Jun 2014 12:02:40 AM JST
pack
to_keysym(modifiers)
to_char
grab
ungrab
press
release
changekeyboardmapping
getkeyboardmapping
* Wed 18 Jun 2014 12:02:56 AM JST
class Key 
grab			
ungrab		
press			
release		
to_keysym 
to_char		
* Wed 18 Jun 2014 12:03:11 AM JST
pack
to_keysym(modifiers)
to_char
grab
ungrab
press
release
changekeyboardmapping
getkeyboardmapping

* Wed 18 Jun 2014 01:29:26 PM JST
class SingletonConnectionMeta(type):
    r"""Singleton Connection by display name."""

    _instances = {}

    def __call__(cls, *args, **kwargs):
        key = kwargs.get('display', '')
        if cls not in cls._instances:
            cls._instances[cls] = {}
        if key not in cls._instances[cls]:
            cls._instances[cls][key] = (super(SingletonConnectionMeta, cls)
                                        .__call__(*args, **kwargs))
        return cls._instances[cls][key]

* Wed 18 Jun 2014 01:29:57 PM JST
                
* Wed 18 Jun 2014 01:30:03 PM JST
Connection
* Wed 18 Jun 2014 01:32:03 PM JST
object
* Wed 18 Jun 2014 01:32:26 PM JST
__class__
* Wed 18 Jun 2014 01:32:56 PM JST
display
* Wed 18 Jun 2014 01:33:00 PM JST
key
* Wed 18 Jun 2014 01:33:04 PM JST
key
* Wed 18 Jun 2014 01:33:17 PM JST
key
* Wed 18 Jun 2014 01:35:20 PM JST
        self._keycodesymmap = None
        self._keysymcodemap = None

* Wed 18 Jun 2014 01:35:31 PM JST
self.
* Wed 18 Jun 2014 01:35:33 PM JST
self.
* Wed 18 Jun 2014 01:36:00 PM JST
setup.min_keycode.getkeyboardmapping(setup.max_keycode - setup.min_keycode + 1).reply().get_keycodesymsmap(setup.min_keycode).to_symcodemap()
* Wed 18 Jun 2014 01:37:07 PM JST
          
* Wed 18 Jun 2014 01:40:34 PM JST
    
* Wed 18 Jun 2014 01:40:36 PM JST
         
* Wed 18 Jun 2014 01:40:37 PM JST
         
* Wed 18 Jun 2014 01:40:39 PM JST
         
* Wed 18 Jun 2014 01:40:42 PM JST
.to_symcodemap()
* Wed 18 Jun 2014 01:43:00 PM JST
NamedModifierMask
* Wed 18 Jun 2014 01:43:12 PM JST
{0: NamedModifierMask.Null, 1: NamedModifierMask.Shift, 2: NamedModifierMask.Mod5, 3: NamedModifierMask.Mod5 | NamedModifierMask.Shift, 4: NamedModifierMask.Control | NamedModifierMask.Alt, 5: NamedModifierMask.Control | NamedModifierMask.Alt | NamedModifierMask.Shift, 6: 0, 7: 0}
* Wed 18 Jun 2014 01:46:52 PM JST
keysymcodemap
* Wed 18 Jun 2014 01:47:20 PM JST
keysymcodesmap
* Wed 18 Jun 2014 01:48:09 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()
from xcb3.keymap import KeyMap
km=KeyMap('')

* Wed 18 Jun 2014 02:06:05 PM JST
pass
* Wed 18 Jun 2014 02:09:25 PM JST
        index = 0
        if self.state.isshift():
            index += 1
        if self.state.isalt():
            index += 2

* Wed 18 Jun 2014 02:10:08 PM JST
Modifiers
* Wed 18 Jun 2014 02:10:28 PM JST
modifiers
* Wed 18 Jun 2014 02:10:34 PM JST
state
* Wed 18 Jun 2014 02:10:34 PM JST
self.state
* Wed 18 Jun 2014 02:10:38 PM JST
state
* Wed 18 Jun 2014 02:10:38 PM JST
self.state
* Wed 18 Jun 2014 02:11:43 PM JST
modifiers
* Wed 18 Jun 2014 02:12:45 PM JST
        index = 0
        if self.state.isshift():
            index += 1
        if self.state.isalt():
            index += 2

* Wed 18 Jun 2014 02:12:51 PM JST
state
* Wed 18 Jun 2014 02:12:55 PM JST
state
* Wed 18 Jun 2014 02:14:41 PM JST
KeyMap
* Wed 18 Jun 2014 02:16:11 PM JST
KeyModifiers
* Wed 18 Jun 2014 02:16:33 PM JST
KeyModifiers()
* Wed 18 Jun 2014 02:20:01 PM JST
keybutton
* Wed 18 Jun 2014 02:20:06 PM JST
Key
* Wed 18 Jun 2014 02:34:18 PM JST
        # special keysyms
        if keysym in (0, 0x00ffffff):
            raise ConvertError("{} is a special keysym".format(keysym))
        # latin-1 keysyms
        elif (0x0020 <= keysym <= 0x007e or 0x00a0 <= keysym <= 0x00ff):
            return unichr(keysym)
        # unicode keysyms
        elif (0x01000100 <= keysym <= 0x0110ffff):
            return unichr(keysym - 0x01000000)
        # legacy keysyms
        elif keysym in sendkeys.keysymdef.legacy_keysyms:
            return unichr(sendkeys.keysymdef.legacy_keysyms[keysym])
        # dunno!
        else:
            raise ConvertError(
                "Unsupported keysym category or legacy keysym: {}"
                .format(keysym))

* Wed 18 Jun 2014 02:34:33 PM JST
class ConvertError(StandardError):
    r"""SUMMARY
    """
    def __init__(self, data=''):
        self.data = data

    def __str__(self, ):
        return self.data


class SymToCodeError(ConvertError):
    r"""SUMMARY
    """
    def __str__(self, ):
        return '{} keysym failed convert to keycode'.format(self.data)


class StrToSymError(ConvertError):
    r"""SUMMARY
    """
    def __str__(self, ):
        return '"{}" failed convert to keysym'.format(self.data)

* Wed 18 Jun 2014 02:35:30 PM JST
keysymdef
* Wed 18 Jun 2014 02:35:40 PM JST
sendkeys.
* Wed 18 Jun 2014 02:35:43 PM JST
sendkeys.
* Wed 18 Jun 2014 02:36:26 PM JST
keysymdef.names.get(keysym, '')
* Wed 18 Jun 2014 02:36:55 PM JST
        sym = sendkeys.keysymdef.keysyms.get(string, None)
        if sym is None:
            raise StrToSymError(string)
        return sym

* Wed 18 Jun 2014 02:37:05 PM JST
sendkeys.
* Wed 18 Jun 2014 03:06:39 PM JST
pass
* Wed 18 Jun 2014 03:06:41 PM JST
return KeyMap(display=self.display).keysym_to_keycode(self._value)
* Wed 18 Jun 2014 03:07:24 PM JST
pass
* Wed 18 Jun 2014 03:07:29 PM JST
modifiers
* Wed 18 Jun 2014 03:08:17 PM JST
        index = 0
        if self._modifiers.isshift():
            index += 1
        if self._modifiers.isalt():
            index += 2

* Wed 18 Jun 2014 03:39:05 PM JST
    def __repr__(self, ):
        fmt = '{0.__class__.__name__}({1}, state={2})'.format
        return fmt(self, self._data, str(self.state))

* Wed 18 Jun 2014 03:40:36 PM JST
self._key
* Wed 18 Jun 2014 03:41:00 PM JST
k=KeyModifiers(Key(10), Modifiers(0))
* Wed 18 Jun 2014 03:41:10 PM JST
from xcb3.xobj.keybutton import Key
from xcb3.xobj.modifiers import Modifiers

* Wed 18 Jun 2014 03:41:16 PM JST
from xcb3.xobj.keybuttonmodifiers import KeyModifiers
* Wed 18 Jun 2014 03:41:22 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()

* Wed 18 Jun 2014 03:41:32 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()
from xcb3.xobj.keybuttonmodifiers import KeyModifiers
from xcb3.xobj.keybutton import Key
from xcb3.xobj.modifiers import Modifiers
k=KeyModifiers(Key(10), Modifiers(0))

* Wed 18 Jun 2014 03:42:15 PM JST
k=KeyModifiers(Key(10), Modifiers(0))
* Wed 18 Jun 2014 03:42:28 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()
from xcb3.xobj.keybuttonmodifiers import KeyModifiers
from xcb3.xobj.keybutton import Key
from xcb3.xobj.modifiers import Modifiers

* Wed 18 Jun 2014 03:42:34 PM JST
k=KeyModifiers(Key(10), Modifiers(0))
* Wed 18 Jun 2014 03:52:13 PM JST
KeySym(49)
* Wed 18 Jun 2014 03:52:54 PM JST
k=KeyModifiers(Key(10), Modifiers(0))
* Wed 18 Jun 2014 03:53:08 PM JST
KeySym(33)
* Wed 18 Jun 2014 04:29:59 PM JST
class KeyChar(KeyAbstract):
    r"""SUMMARY
    """

    def to_keysym(self, ):
        r"""SUMMARY

        to_keysym()

        @Return:
        """
        sym = self.keymap.str_to_keysym(self._data)
        return KeySym(sym, display=self.display)

    def to_keycode(self, ):
        r"""SUMMARY

        to_keycode()

        @Return:
        """
        return self.to_keysym().to_keycode()

    def press(self, window, time=0):
        r"""SUMMARY

        press_key()

        @Return:
        """
        self.to_keycode().press(window, time)

    def release(self, window, time=0):
        r"""SUMMARY

        press_key()

        @Return:
        """
        self.to_keycode().release(window, time)

    def __repr__(self, ):
        return '{0.__class__.__name__}("{1}")'.format(self, self._data)

* Wed 18 Jun 2014 04:30:32 PM JST
KeyAbstract
* Wed 18 Jun 2014 04:31:10 PM JST
__class__
* Wed 18 Jun 2014 04:31:37 PM JST
    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self._data, other._data)
        return cmp(self._data, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._data == other._data
        return self._data == other

    def __ne__(self, other):
        return not (self == other)

    def __str__(self, ):
        return str(self._data)

    def __repr__(self, ):
        return '{0.__class__.__name__}({1})'.format(self, self._data)

* Wed 18 Jun 2014 04:32:06 PM JST
_data)
* Wed 18 Jun 2014 04:32:11 PM JST
_data
* Wed 18 Jun 2014 04:32:47 PM JST
    def __repr__(self, ):
        return '{0.__class__.__name__}("{1}")'.format(self, self._char)


* Wed 18 Jun 2014 04:33:07 PM JST
from xcb3.keymap import KeyMap
* Wed 18 Jun 2014 04:33:53 PM JST

* Wed 18 Jun 2014 04:33:53 PM JST

* Wed 18 Jun 2014 04:33:53 PM JST
        sym = self.keymap.str_to_keysym(self._char)

* Wed 18 Jun 2014 04:33:58 PM JST
return 
* Wed 18 Jun 2014 04:34:24 PM JST
propagate, destination, sequence_number, time, root,
              window, child, root_x, root_y, event_x, event_y, same_screen
* Wed 18 Jun 2014 04:34:40 PM JST
            
* Wed 18 Jun 2014 04:34:51 PM JST
propagate, destination, sequence_number, time, root,
                window, child, root_x, root_y, event_x, event_y, same_screen
* Wed 18 Jun 2014 04:35:07 PM JST
                
* Wed 18 Jun 2014 04:36:43 PM JST
KeySym
* Wed 18 Jun 2014 04:37:59 PM JST
from xcb3.xobj.keychar import KeyChar
* Wed 18 Jun 2014 04:38:03 PM JST
from xcb3.xobj.keychar import KeyChar
KeyChar('1')

* Wed 18 Jun 2014 04:38:07 PM JST

* Wed 18 Jun 2014 04:38:07 PM JST

* Wed 18 Jun 2014 04:38:07 PM JST
k=KeyModifiers(Key(10), Modifiers(0))

* Wed 18 Jun 2014 04:38:18 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()

* Wed 18 Jun 2014 04:39:27 PM JST

* Wed 18 Jun 2014 04:39:27 PM JST

* Wed 18 Jun 2014 04:39:27 PM JST
from xcb3.xproto import NamedModifierMask

* Wed 18 Jun 2014 04:40:30 PM JST

* Wed 18 Jun 2014 04:40:30 PM JST

* Wed 18 Jun 2014 04:40:30 PM JST
from xcb3.xobj.keysym import KeySym

* Wed 18 Jun 2014 04:40:52 PM JST
from xcb3.xobj.keychar import KeyChar
KeyChar('1')

* Wed 18 Jun 2014 04:40:56 PM JST
KeyChar('1')
* Wed 18 Jun 2014 04:41:47 PM JST
KeyChar('1').to_keysym().to_keycode()
* Wed 18 Jun 2014 04:43:00 PM JST
set1
* Wed 18 Jun 2014 04:43:05 PM JST
shift
* Wed 18 Jun 2014 04:43:11 PM JST
set2
* Wed 18 Jun 2014 04:43:58 PM JST
self._modifiers.set10
* Wed 18 Jun 2014 04:48:28 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()

* Wed 18 Jun 2014 04:48:32 PM JST
from xcb3.xobj.keychar import KeyChar
* Wed 18 Jun 2014 04:48:35 PM JST
KeyChar('1')
* Wed 18 Jun 2014 04:48:57 PM JST
to_keysym()
* Wed 18 Jun 2014 04:51:31 PM JST
                
* Wed 18 Jun 2014 04:53:05 PM JST
SPECIALCHAR_TO_NAME = {
    ' ' : "space",
    '\t' : "Tab",
    '\n' : "Return",  # for some reason this needs to be cr, not lf
    '\r' : "Return",
    '\e' : "Escape",
    '!' : "exclam",
    '#' : "numbersign",
    '%' : "percent",
    '$' : "dollar",
    '&' : "ampersand",
    '"' : "quotedbl",
    '\'' : "apostrophe",
    '(' : "parenleft",
    ')' : "parenright",
    '*' : "asterisk",
    '=' : "equal",
    '+' : "plus",
    ',' : "comma",
    '-' : "minus",
    '.' : "period",
    '/' : "slash",
    ':' : "colon",
    ';' : "semicolon",
    '<' : "less",
    '>' : "greater",
    '?' : "question",
    '@' : "at",
    '[' : "bracketleft",
    ']' : "bracketright",
    '\\' : "backslash",
    '^' : "asciicircum",
    '_' : "underscore",
    '`' : "grave",
    '{' : "braceleft",
    '|' : "bar",
    '}' : "braceright",
    '~' : "asciitilde"
    }

* Wed 18 Jun 2014 04:53:18 PM JST
SPECIALCHAR_TO_NAME
* Wed 18 Jun 2014 04:53:41 PM JST
_specialchar
* Wed 18 Jun 2014 04:55:14 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()

* Wed 18 Jun 2014 04:55:20 PM JST
from xcb3.xobj.keychar import KeyChar

* Wed 18 Jun 2014 04:55:23 PM JST
KeyChar('1')
* Wed 18 Jun 2014 04:57:18 PM JST
form xcb3.xobj.keysym import KeySym
* Wed 18 Jun 2014 04:57:33 PM JST
KeySym(33)
* Wed 18 Jun 2014 04:58:44 PM JST
form 
* Wed 18 Jun 2014 04:58:47 PM JST

* Wed 18 Jun 2014 04:58:47 PM JST

* Wed 18 Jun 2014 04:58:49 PM JST

* Wed 18 Jun 2014 04:58:49 PM JST

* Wed 18 Jun 2014 04:58:49 PM JST
from xc import 

* Wed 18 Jun 2014 04:59:09 PM JST
KeyChar
* Wed 18 Jun 2014 05:00:04 PM JST
                
* Wed 18 Jun 2014 05:00:21 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()

* Wed 18 Jun 2014 05:00:25 PM JST
from xcb3.xobj.keychar import KeyChar
from xcb3.xobj.keysym import KeySym

* Wed 18 Jun 2014 05:09:57 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()

* Wed 18 Jun 2014 05:10:03 PM JST
from xcb3.xobj.keychar import KeyChar
* Wed 18 Jun 2014 05:10:06 PM JST
KeyChar('1')
* Wed 18 Jun 2014 06:21:16 PM JST
value
* Wed 18 Jun 2014 06:22:19 PM JST

* Wed 18 Jun 2014 06:22:19 PM JST

* Wed 18 Jun 2014 06:22:19 PM JST
from xcb3.xobj.modifiers import Modifiers

* Wed 18 Jun 2014 06:23:25 PM JST
Modifiers
* Wed 18 Jun 2014 06:25:14 PM JST
key
* Wed 18 Jun 2014 06:25:57 PM JST
import xcb3, xcb3.xproto
c=xcb3.connect()

* Wed 18 Jun 2014 06:26:01 PM JST
from xcb3.xobj.keybuttonmodifiers import KeyModifiers
* Thu 19 Jun 2014 01:54:51 AM JST
KeySyms(
* Thu 19 Jun 2014 01:54:55 AM JST
display)
* Thu 19 Jun 2014 01:54:55 AM JST
connection.display)
* Thu 19 Jun 2014 01:54:55 AM JST
self.connection.display)
* Thu 19 Jun 2014 01:54:58 AM JST
            
* Wed 25 Jun 2014 02:56:53 PM JST
/data/archive/ref/book/Programming/Object_Design_Roles_Responsibilities_and_Collaborations/
* Sat 28 Jun 2014 04:48:49 PM JST
https://github.com/komagata/holiday_jp
* Sat 28 Jun 2014 04:49:53 PM JST
https://github.com/masa16/holiday_japan
* Mon 30 Jun 2014 05:56:16 AM JST
Collaborations/
* Mon 30 Jun 2014 05:56:17 AM JST
and_Collaborations/
* Mon 30 Jun 2014 05:56:17 AM JST
Responsibilities_and_Collaborations/
* Mon 30 Jun 2014 05:56:17 AM JST
Roles_Responsibilities_and_Collaborations/
* Mon 30 Jun 2014 05:56:18 AM JST
Design_Roles_Responsibilities_and_Collaborations/
* Mon 30 Jun 2014 05:56:18 AM JST
Object_Design_Roles_Responsibilities_and_Collaborations/
* Mon 30 Jun 2014 09:36:54 AM JST
isholiday
* Mon 30 Jun 2014 10:13:26 AM JST
japan/
* Mon 30 Jun 2014 10:13:27 AM JST
holiday_japan/
* Mon 30 Jun 2014 10:16:18 AM JST
VernalEquinox
* Mon 30 Jun 2014 10:26:19 AM JST
abs
* Mon 30 Jun 2014 11:18:05 AM JST
bool(
* Mon 30 Jun 2014 11:18:26 AM JST
20.8357
* Mon 30 Jun 2014 11:19:17 AM JST
    def ismatch(self, year):
        r"""SUMMARY
        
        ismatch(year)
        
        @Arguments:
        - `year`:
        
        @Return:
        """
        return year <= 1979

    def get_float(self, ):
        r"""SUMMARY
        
        get_float()
        
        @Return:
        """
        return 20.8357

* Mon 30 Jun 2014 11:19:38 AM JST
return year <= 1999
* Mon 30 Jun 2014 11:19:39 AM JST
        return year <= 1999
* Mon 30 Jun 2014 11:20:05 AM JST
20.8431
* Mon 30 Jun 2014 11:20:55 AM JST
    def ismatch(self, year):
        r"""SUMMARY

        ismatch(year)

        @Arguments:
        - `year`:

        @Return:
        """
        return 1980 <= year <= 2099

    def get_float(self, ):
        r"""SUMMARY

        get_float()

        @Return:
        """
        return 20.8431

* Mon 30 Jun 2014 11:21:20 AM JST
21.8510
* Mon 30 Jun 2014 11:31:16 AM JST
class CalcVernal(object):
    r"""SUMMARY
    """
    
    def __init__(self, ):
        r"""
        """
        
        


* Mon 30 Jun 2014 11:55:28 AM JST
int(float_ + 0.242194 * (year - 1980) - int((year - 1980) // 4))
* Mon 30 Jun 2014 11:56:20 AM JST
day = 
* Mon 30 Jun 2014 12:05:45 PM JST
self._get_span(year)
* Mon 30 Jun 2014 12:07:36 PM JST
ABCMeta
* Mon 30 Jun 2014 12:07:55 PM JST
from calc_vernalequinox import span
* Mon 30 Jun 2014 12:08:02 PM JST
CalcVernal
* Mon 30 Jun 2014 12:40:10 PM JST
Equinox
* Mon 30 Jun 2014 12:49:06 PM JST
return int(float + 0.242194 * (year - 1980) - int((year - 1980) // 4))
* Mon 30 Jun 2014 12:49:27 PM JST
float
* Mon 30 Jun 2014 12:49:46 PM JST
EquinoxFloat
* Mon 30 Jun 2014 12:50:30 PM JST
20.8357
* Mon 30 Jun 2014 12:50:35 PM JST
8357
* Mon 30 Jun 2014 12:50:35 PM JST
20.8357
* Mon 30 Jun 2014 12:50:37 PM JST
return 
* Mon 30 Jun 2014 12:51:18 PM JST
20.8431
* Mon 30 Jun 2014 12:51:23 PM JST
return self._equinox_float
* Mon 30 Jun 2014 12:51:45 PM JST
21.8510
* Mon 30 Jun 2014 12:51:52 PM JST
return self._equinox_float
* Mon 30 Jun 2014 01:25:27 PM JST
class Equinox(object):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    @abstractmethod
    def ismatch(self, year):
        raise NotImplementedError()

    @abstractmethod
    def get_float(self, ):
        raise NotImplementedError()



* Mon 30 Jun 2014 01:25:34 PM JST

* Mon 30 Jun 2014 01:25:34 PM JST

* Mon 30 Jun 2014 01:25:34 PM JST
from abc import ABCMeta, abstractmethod

* Mon 30 Jun 2014 01:26:04 PM JST
class EquinoxFloat(float):
    r"""SUMMARY
    """

    def calc(self, year):
        r"""SUMMARY

        calc(year)

        @Arguments:
        - `year`:

        @Return:
        """
        return int(self + 0.242194 * (year - 1980) - int((year - 1980) // 4))



* Mon 30 Jun 2014 05:55:52 PM JST
holiday_japan.Holiday(1980, 3, 20)
* Mon 30 Jun 2014 05:56:26 PM JST
isholiday