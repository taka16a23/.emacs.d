
* Thu 01 Aug 2013 04:46:23 PM JST

* Thu 01 Aug 2013 04:46:23 PM JST

* Thu 01 Aug 2013 04:46:23 PM JST
#include

* Thu 01 Aug 2013 04:46:41 PM JST
int
* Thu 01 Aug 2013 04:46:50 PM JST
auto
* Thu 01 Aug 2013 05:25:23 PM JST
;
* Thu 01 Aug 2013 05:27:17 PM JST

* Thu 01 Aug 2013 05:27:17 PM JST

* Thu 01 Aug 2013 05:27:18 PM JST

* Thu 01 Aug 2013 05:27:21 PM JST

* Thu 01 Aug 2013 05:27:21 PM JST

* Thu 01 Aug 2013 05:27:22 PM JST
  std::std::cout <<  << std::endl;

* Thu 01 Aug 2013 05:37:16 PM JST
hello " <<
* Fri 02 Aug 2013 03:33:08 PM JST
cin >> ;
* Fri 02 Aug 2013 03:33:18 PM JST
cin
* Fri 02 Aug 2013 03:33:18 PM JST
std::cin
* Fri 02 Aug 2013 03:35:25 PM JST
std:
* Fri 02 Aug 2013 03:41:18 PM JST
int
* Fri 02 Aug 2013 03:41:47 PM JST
auto
* Fri 02 Aug 2013 03:49:38 PM JST

* Fri 02 Aug 2013 03:49:39 PM JST

* Fri 02 Aug 2013 03:49:40 PM JST

* Fri 02 Aug 2013 03:53:01 PM JST

* Fri 02 Aug 2013 03:53:01 PM JST

* Fri 02 Aug 2013 03:53:01 PM JST
  << std::endl;

* Fri 02 Aug 2013 03:53:17 PM JST

* Fri 02 Aug 2013 03:53:17 PM JST

* Fri 02 Aug 2013 03:53:17 PM JST
  << std::endl;

* Fri 02 Aug 2013 03:54:06 PM JST
std::cout <<
* Fri 02 Aug 2013 03:54:09 PM JST
std::cout << /* "*/" */;
* Fri 02 Aug 2013 04:01:28 PM JST
c
* Fri 02 Aug 2013 04:01:29 PM JST
std::c
* Fri 02 Aug 2013 04:14:08 PM JST
int main(int argc, char **argv)
{
  int sum = 0, val = 1;
  // keep executing the while as long as val is less than or equal to 10
  while (val <= 10) {
    sum += val; // assigns sum + val to sum
    ++val;      // add 1 to val
  }
  std::cout << "Sum of 1 to 10 inclusive is "
            << sum << std::endl;

  return 0;
}

* Fri 02 Aug 2013 04:14:40 PM JST
"Sum of 1 to 10 inclusive is "
* Fri 02 Aug 2013 04:14:42 PM JST
<< 
* Fri 02 Aug 2013 04:14:43 PM JST
                << 
* Fri 02 Aug 2013 04:14:57 PM JST

* Fri 02 Aug 2013 04:14:57 PM JST

* Fri 02 Aug 2013 04:14:57 PM JST
      std::cout << sum << std::endl;

* Fri 02 Aug 2013 04:15:32 PM JST
// int main(int argc, char **argv)
// {
  // int sum = 0, val = 1;
  // keep executing the while as long as val is less than or equal to 10
  // while (val <= 10) {
    // sum += val; assigns sum + val to sum
    // ++val;      add 1 to val
  // }
  // std::cout << "Sum of 1 to 10 inclusive is "
            // << sum << std::endl;

  // return 0;
// }

* Fri 02 Aug 2013 04:16:18 PM JST
      std::cout << sum << std::endl;

* Fri 02 Aug 2013 04:16:22 PM JST

* Fri 02 Aug 2013 04:16:22 PM JST

* Fri 02 Aug 2013 04:16:22 PM JST
  std::cout << "Sum of 1 to 10 inclusive is "

* Fri 02 Aug 2013 04:16:22 PM JST
  std::cout << "Sum of 1 to 10 inclusive is "

* Fri 02 Aug 2013 04:16:22 PM JST
  std::cout << "Sum of 1 to 10 inclusive is "
            << sum << std::endl;

* Fri 02 Aug 2013 04:28:16 PM JST
// int main(int argc, char **argv)
// {
  // int sum = 0, val = 1;
  // keep executing the while as long as val is less than or equal to 10
  // while (val <= 10) {
    // sum += val; assigns sum + val to sum
    // ++val;      add 1 to val
  // }
  // std::cout << "Sum of 1 to 10 inclusive is "
            // << sum << std::endl;

  // return 0;
// }

* Fri 02 Aug 2013 04:29:53 PM JST
int main(int argc, char **argv)
{
  int sum = 0, val = 50;
  // keep executing the while as long as val is less than or equal to 10
  while (val <= 100) {
    sum += val; // assigns sum + val to sum
    ++val;     // add 1 to val
  }
  std::cout << "Sum of 50 to 100 inclusive is "
            << sum << std::endl;

  return 0;
}

* Fri 02 Aug 2013 04:36:39 PM JST
sum
* Fri 02 Aug 2013 04:38:55 PM JST
100
* Fri 02 Aug 2013 04:44:33 PM JST
int 
* Fri 02 Aug 2013 04:45:17 PM JST

* Fri 02 Aug 2013 04:45:17 PM JST

* Fri 02 Aug 2013 04:45:18 PM JST

* Fri 02 Aug 2013 04:45:22 PM JST

* Fri 02 Aug 2013 04:45:24 PM JST

* Fri 02 Aug 2013 04:45:24 PM JST

* Fri 02 Aug 2013 04:45:24 PM JST
    std::std::cout << string << std::endl;

* Fri 02 Aug 2013 04:46:20 PM JST

* Fri 02 Aug 2013 04:46:20 PM JST

* Fri 02 Aug 2013 04:46:20 PM JST
  }

* Fri 02 Aug 2013 04:46:47 PM JST
int
* Fri 02 Aug 2013 04:56:21 PM JST
int 
* Fri 02 Aug 2013 04:57:06 PM JST
int 
* Fri 02 Aug 2013 04:57:10 PM JST
int 
* Fri 02 Aug 2013 04:57:41 PM JST
cout << ""
* Fri 02 Aug 2013 04:57:55 PM JST
i
* Fri 02 Aug 2013 04:59:36 PM JST
#include <ios>
* Fri 02 Aug 2013 04:59:51 PM JST
int 
* Fri 02 Aug 2013 05:00:27 PM JST
int 
* Fri 02 Aug 2013 05:00:29 PM JST
int
* Fri 02 Aug 2013 05:06:37 PM JST
                 
* Fri 02 Aug 2013 05:07:23 PM JST

* Fri 02 Aug 2013 05:07:23 PM JST

* Fri 02 Aug 2013 05:07:23 PM JST

* Fri 02 Aug 2013 05:07:25 PM JST

* Fri 02 Aug 2013 05:07:25 PM JST

* Fri 02 Aug 2013 05:07:25 PM JST
    std::std::cout << string << std::endl;

* Fri 02 Aug 2013 05:08:10 PM JST

* Fri 02 Aug 2013 05:08:10 PM JST

* Fri 02 Aug 2013 05:08:10 PM JST
    std::cout << "Sum is: " << sum << std::endl;

* Fri 02 Aug 2013 05:32:04 PM JST
// 
* Fri 02 Aug 2013 05:32:04 PM JST
                 // 
* Fri 02 Aug 2013 05:33:21 PM JST
                              
* Fri 02 Aug 2013 05:41:05 PM JST

* Fri 02 Aug 2013 05:41:05 PM JST

* Fri 02 Aug 2013 05:41:05 PM JST
      {

* Fri 02 Aug 2013 05:41:26 PM JST

* Fri 02 Aug 2013 05:41:26 PM JST

* Fri 02 Aug 2013 05:41:26 PM JST
      }

* Fri 02 Aug 2013 05:41:26 PM JST
      }

* Fri 02 Aug 2013 05:41:26 PM JST
      }
    }

* Fri 02 Aug 2013 05:41:27 PM JST

* Fri 02 Aug 2013 05:41:27 PM JST

* Fri 02 Aug 2013 05:41:27 PM JST
  }

* Fri 02 Aug 2013 06:22:41 PM JST

* Fri 02 Aug 2013 06:22:42 PM JST
iostream>
* Fri 02 Aug 2013 06:25:53 PM JST
return 0;
* Fri 02 Aug 2013 07:14:20 PM JST
cout
* Fri 02 Aug 2013 07:14:20 PM JST
std::cout
* Fri 02 Aug 2013 07:14:46 PM JST

* Fri 02 Aug 2013 07:14:46 PM JST

* Fri 02 Aug 2013 07:14:46 PM JST
    // print results for previous book

* Fri 02 Aug 2013 07:14:46 PM JST
    // print results for previous book

* Fri 02 Aug 2013 07:14:46 PM JST
    // print results for previous book
    std::cout << total << std::endl;

* Fri 02 Aug 2013 07:14:46 PM JST
    // print results for previous book
    std::cout << total << std::endl;

* Fri 02 Aug 2013 07:14:47 PM JST
    // print results for previous book
    std::cout << total << std::endl;
    total = tran

* Fri 02 Aug 2013 07:16:09 PM JST
                      
* Fri 02 Aug 2013 07:17:45 PM JST
// 
* Fri 02 Aug 2013 07:17:45 PM JST
                        // 
* Fri 02 Aug 2013 07:18:09 PM JST
cout
* Fri 02 Aug 2013 07:18:10 PM JST
std::cout
* Sat 03 Aug 2013 07:45:35 AM JST

* Sat 03 Aug 2013 07:45:35 AM JST

* Sat 03 Aug 2013 07:45:37 AM JST

* Sat 03 Aug 2013 07:45:37 AM JST

* Sat 03 Aug 2013 07:45:37 AM JST
#include 

* Sat 03 Aug 2013 07:46:59 AM JST

* Sat 03 Aug 2013 07:46:59 AM JST

* Sat 03 Aug 2013 07:46:59 AM JST
  int double = 3.14;

* Sat 03 Aug 2013 07:47:24 AM JST

* Sat 03 Aug 2013 07:47:24 AM JST

* Sat 03 Aug 2013 07:47:24 AM JST
  int catch-22;

* Sat 03 Aug 2013 07:47:42 AM JST

* Sat 03 Aug 2013 07:47:42 AM JST

* Sat 03 Aug 2013 07:47:42 AM JST
  int 1_or_2 = 1;

* Sat 03 Aug 2013 09:29:19 AM JST

* Sat 03 Aug 2013 09:29:19 AM JST

* Sat 03 Aug 2013 09:29:19 AM JST
  int ival = 1024;

* Sat 03 Aug 2013 09:29:19 AM JST
  int ival = 1024;

* Sat 03 Aug 2013 09:29:19 AM JST
  int ival = 1024;
  int &refval = ival;

* Sat 03 Aug 2013 09:29:20 AM JST
  int ival = 1024;
  int &refval = ival;

* Sat 03 Aug 2013 09:29:20 AM JST
  int ival = 1024;
  int &refval = ival;
  refval = 2;

* Sat 03 Aug 2013 09:30:09 AM JST
refval
* Sun 04 Aug 2013 03:08:26 AM JST

* Sun 04 Aug 2013 03:08:26 AM JST

* Sun 04 Aug 2013 03:08:27 AM JST

* Sun 04 Aug 2013 03:08:28 AM JST

* Sun 04 Aug 2013 03:08:28 AM JST

* Sun 04 Aug 2013 03:08:28 AM JST
#include 

* Sun 04 Aug 2013 03:06:26 PM JST
int
* Sun 04 Aug 2013 03:06:43 PM JST
auto
* Sun 04 Aug 2013 03:09:55 PM JST

* Sun 04 Aug 2013 03:09:56 PM JST

* Sun 04 Aug 2013 03:09:56 PM JST
  int i = 0, &r = i;

* Sun 04 Aug 2013 03:09:58 PM JST
r
* Sun 04 Aug 2013 03:09:59 PM JST
a = r
* Sun 04 Aug 2013 03:10:17 PM JST

* Sun 04 Aug 2013 03:10:17 PM JST

* Sun 04 Aug 2013 03:10:18 PM JST
  auto i = 0, *p = &i;

* Tue 06 Aug 2013 04:05:32 AM JST
/usr/src/linux-headers-3.9.10/include/linux/string.h
* Wed 07 Aug 2013 05:31:38 PM JST
xset -dpms s off s noblank s 00 s noexpose
* Thu 08 Aug 2013 02:58:26 AM JST

* Thu 08 Aug 2013 02:58:26 AM JST

* Thu 08 Aug 2013 02:58:26 AM JST
auto i = 0, *p = &i;

* Thu 08 Aug 2013 03:44:58 AM JST

* Thu 08 Aug 2013 03:44:58 AM JST

* Thu 08 Aug 2013 03:44:58 AM JST
  if (beg == v.end()) {

* Thu 08 Aug 2013 03:44:58 AM JST

* Thu 08 Aug 2013 03:44:58 AM JST

* Thu 08 Aug 2013 03:44:59 AM JST
  }

* Thu 08 Aug 2013 03:45:28 AM JST

* Thu 08 Aug 2013 03:45:28 AM JST

* Thu 08 Aug 2013 03:45:28 AM JST
#include <vector>

* Thu 08 Aug 2013 03:49:13 AM JST
does not name a type
* Thu 08 Aug 2013 03:54:32 AM JST

* Thu 08 Aug 2013 03:54:32 AM JST

* Thu 08 Aug 2013 03:54:32 AM JST
    std::cout << beg << std::endl;

* Thu 08 Aug 2013 04:00:32 PM JST
int fact(int val)
{
  int ret = 1;
  while (val > 1) {
    ret *= val--;
  }
  return ret;
}

* Thu 08 Aug 2013 04:03:03 PM JST
int
* Thu 08 Aug 2013 04:03:12 PM JST
int
* Thu 08 Aug 2013 04:03:23 PM JST
auto
* Fri 09 Aug 2013 02:49:05 AM JST
*
flag:003001
dispname:企画調整課／滋賀県
feedurl:http://www.pref.shiga.lg.jp/a/kikaku/
imglink:http://www.pref.shiga.lg.jp/a/kikaku/
title:企画調整課／滋賀県
link:http://www.pref.shiga.lg.jp/a/kikaku/
favicon:http://www.pref.shiga.lg.jp/favicon.ico
client:41361.5844939931
oplink:1
htmlrss:1
recovery:996699059
*

* Fri 09 Aug 2013 02:49:21 AM JST
*
flag:003001
dispname:新駅問題支援対策室／滋賀県
feedurl:http://www.pref.shiga.lg.jp/a/shinkansen/
imglink:http://www.pref.shiga.lg.jp/a/shinkansen/
title:新駅問題支援対策室／滋賀県
link:http://www.pref.shiga.lg.jp/a/shinkansen/
favicon:http://www.pref.shiga.lg.jp/favicon.ico
client:41361.5845171412
oplink:1
htmlrss:1
recovery:996699060
*

* Sat 10 Aug 2013 03:55:25 AM JST
int
* Sat 10 Aug 2013 03:55:32 AM JST

* Sat 10 Aug 2013 03:55:32 AM JST

* Sat 10 Aug 2013 03:55:32 AM JST
  return 0;

* Sat 10 Aug 2013 03:56:50 AM JST
int
* Sat 10 Aug 2013 05:23:22 AM JST
void
* Sat 10 Aug 2013 05:24:24 AM JST
vector
* Sat 10 Aug 2013 05:25:01 AM JST
std::
* Sat 10 Aug 2013 05:25:11 AM JST
true
* Sat 10 Aug 2013 05:49:35 AM JST

* Sat 10 Aug 2013 05:49:35 AM JST

* Sat 10 Aug 2013 05:49:35 AM JST
import cgitb

* Sat 10 Aug 2013 05:49:36 AM JST
import cgitb

* Sat 10 Aug 2013 05:49:36 AM JST
import cgitb
cgitb.enable(format='text')

* Sat 10 Aug 2013 05:49:37 AM JST

* Sat 10 Aug 2013 05:49:37 AM JST

* Sat 10 Aug 2013 05:49:38 AM JST
import argparse

* Sat 10 Aug 2013 05:52:37 AM JST
title = wnck.screen_get_default().get_active_window()
* Mon 12 Aug 2013 03:28:55 AM JST

* Mon 12 Aug 2013 05:48:02 AM JST

* Mon 12 Aug 2013 05:48:02 AM JST

* Mon 12 Aug 2013 05:48:03 AM JST
  assert(false);

* Mon 12 Aug 2013 03:54:52 PM JST

* Mon 12 Aug 2013 03:54:52 PM JST

* Mon 12 Aug 2013 03:54:52 PM JST
  printf("hello");

* Mon 12 Aug 2013 03:55:06 PM JST
std::
* Mon 12 Aug 2013 03:55:15 PM JST
  
* Mon 12 Aug 2013 03:55:55 PM JST
  
* Mon 12 Aug 2013 03:56:59 PM JST
  
* Mon 12 Aug 2013 03:59:33 PM JST

* Mon 12 Aug 2013 03:59:33 PM JST

* Mon 12 Aug 2013 03:59:33 PM JST
  std::cout << "foo!!" << std::ends;

* Mon 12 Aug 2013 03:59:33 PM JST
  std::cout << "foo!!" << std::ends;

* Mon 12 Aug 2013 03:59:33 PM JST
  std::cout << "foo!!" << std::ends;
  std::cout << "wow!!" << std::endl;

* Mon 12 Aug 2013 03:59:54 PM JST
<< std::endl;
* Mon 12 Aug 2013 04:02:52 PM JST

* Mon 12 Aug 2013 04:02:52 PM JST

* Mon 12 Aug 2013 04:02:52 PM JST
  std::cout << std::unitbuf;

* Mon 12 Aug 2013 04:06:14 PM JST
h
* Mon 12 Aug 2013 04:07:30 PM JST
unsigned int 
* Mon 12 Aug 2013 04:07:32 PM JST
int
* Mon 12 Aug 2013 04:07:33 PM JST
unsigned int
* Tue 13 Aug 2013 10:54:53 AM JST

* Tue 13 Aug 2013 10:54:54 AM JST

* Tue 13 Aug 2013 10:54:54 AM JST
  std::cout << "hi!!" << std::flush;

* Tue 13 Aug 2013 10:54:54 AM JST
  std::cout << "hi!!" << std::flush;

* Tue 13 Aug 2013 10:54:54 AM JST
  std::cout << "hi!!" << std::flush;
  sleep(5);

* Tue 13 Aug 2013 10:54:54 AM JST
  std::cout << "hi!!" << std::flush;
  sleep(5);

* Tue 13 Aug 2013 10:54:54 AM JST
  std::cout << "hi!!" << std::flush;
  sleep(5);
  std::cout << "\rhoge!!" << std::flush;

* Tue 13 Aug 2013 10:55:24 AM JST
::open
* Tue 13 Aug 2013 11:01:10 AM JST

* Tue 13 Aug 2013 11:01:10 AM JST

* Tue 13 Aug 2013 11:01:11 AM JST
  out.open("hello_test");

* Tue 13 Aug 2013 11:05:12 AM JST

* Tue 13 Aug 2013 11:05:12 AM JST

* Tue 13 Aug 2013 11:05:13 AM JST
  out.close();

* Tue 13 Aug 2013 11:06:46 AM JST
world
* Tue 13 Aug 2013 11:06:46 AM JST
hello world
* Tue 13 Aug 2013 11:08:11 AM JST

* Tue 13 Aug 2013 11:08:11 AM JST

* Tue 13 Aug 2013 11:08:11 AM JST
  std::ofstream out("hello_test", std::ios::out | std::ios::app);

* Tue 13 Aug 2013 11:08:11 AM JST
  std::ofstream out("hello_test", std::ios::out | std::ios::app);

* Tue 13 Aug 2013 11:08:11 AM JST
  std::ofstream out("hello_test", std::ios::out | std::ios::app);
  out << "appended!!" << std::endl;

* Tue 13 Aug 2013 11:09:00 AM JST
std::cout
* Tue 13 Aug 2013 11:16:30 AM JST

* Tue 13 Aug 2013 11:16:30 AM JST

* Tue 13 Aug 2013 11:16:30 AM JST
  in >> str;

* Tue 13 Aug 2013 11:16:30 AM JST
  in >> str;

* Tue 13 Aug 2013 11:16:30 AM JST
  in >> str;
  std::cout << str << std::endl;

* Tue 13 Aug 2013 11:57:07 AM JST

* Tue 13 Aug 2013 11:57:07 AM JST

* Tue 13 Aug 2013 11:57:07 AM JST
hello world

* Tue 13 Aug 2013 11:57:08 AM JST
hello world

* Tue 13 Aug 2013 11:57:08 AM JST
hello world
appended!!

* Tue 13 Aug 2013 12:00:26 PM JST
str
* Tue 13 Aug 2013 12:00:33 PM JST
    
* Tue 13 Aug 2013 12:00:35 PM JST
record
* Tue 13 Aug 2013 12:00:35 PM JST
cout << record
* Tue 13 Aug 2013 12:00:45 PM JST
std::cout << record << std::endl;
* Tue 13 Aug 2013 12:01:49 PM JST
    
* Tue 13 Aug 2013 12:01:49 PM JST
name
* Tue 13 Aug 2013 12:01:53 PM JST
record
* Tue 13 Aug 2013 12:01:55 PM JST
record
* Tue 13 Aug 2013 12:02:09 PM JST
tes
* Tue 13 Aug 2013 01:24:48 PM JST

* Tue 13 Aug 2013 01:24:48 PM JST

* Tue 13 Aug 2013 01:24:48 PM JST
  std::ifstream in("hello_test");

* Tue 13 Aug 2013 01:24:48 PM JST
  std::ifstream in("hello_test");

* Tue 13 Aug 2013 01:24:48 PM JST
  std::ifstream in("hello_test");
  std::string str, name, num;

* Tue 13 Aug 2013 01:24:49 PM JST

* Tue 13 Aug 2013 01:24:49 PM JST

* Tue 13 Aug 2013 01:24:49 PM JST
  while (in && std::getline(in, str)) {

* Tue 13 Aug 2013 01:24:49 PM JST
  while (in && std::getline(in, str)) {

* Tue 13 Aug 2013 01:24:49 PM JST
  while (in && std::getline(in, str)) {
    std::istringstream record(str);

* Tue 13 Aug 2013 01:24:49 PM JST
  while (in && std::getline(in, str)) {
    std::istringstream record(str);

* Tue 13 Aug 2013 01:24:49 PM JST
  while (in && std::getline(in, str)) {
    std::istringstream record(str);
    record >> name;

* Tue 13 Aug 2013 01:24:49 PM JST
  while (in && std::getline(in, str)) {
    std::istringstream record(str);
    record >> name;

* Tue 13 Aug 2013 01:24:49 PM JST
  while (in && std::getline(in, str)) {
    std::istringstream record(str);
    record >> name;
    record >> num;

* Tue 13 Aug 2013 01:24:49 PM JST
  while (in && std::getline(in, str)) {
    std::istringstream record(str);
    record >> name;
    record >> num;

* Tue 13 Aug 2013 01:24:49 PM JST
  while (in && std::getline(in, str)) {
    std::istringstream record(str);
    record >> name;
    record >> num;
    std::cout << name << std::endl;

* Tue 13 Aug 2013 01:24:50 PM JST
  while (in && std::getline(in, str)) {
    std::istringstream record(str);
    record >> name;
    record >> num;
    std::cout << name << std::endl;

* Tue 13 Aug 2013 01:24:50 PM JST
  while (in && std::getline(in, str)) {
    std::istringstream record(str);
    record >> name;
    record >> num;
    std::cout << name << std::endl;
    std::cout << "" << std::endl;

* Tue 13 Aug 2013 01:24:50 PM JST
  while (in && std::getline(in, str)) {
    std::istringstream record(str);
    record >> name;
    record >> num;
    std::cout << name << std::endl;
    std::cout << "" << std::endl;

* Tue 13 Aug 2013 01:24:50 PM JST
  while (in && std::getline(in, str)) {
    std::istringstream record(str);
    record >> name;
    record >> num;
    std::cout << name << std::endl;
    std::cout << "" << std::endl;
    std::cout << num << std::endl;

* Tue 13 Aug 2013 01:24:50 PM JST
  while (in && std::getline(in, str)) {
    std::istringstream record(str);
    record >> name;
    record >> num;
    std::cout << name << std::endl;
    std::cout << "" << std::endl;
    std::cout << num << std::endl;

* Tue 13 Aug 2013 01:24:50 PM JST
  while (in && std::getline(in, str)) {
    std::istringstream record(str);
    record >> name;
    record >> num;
    std::cout << name << std::endl;
    std::cout << "" << std::endl;
    std::cout << num << std::endl;
  }

* Tue 13 Aug 2013 01:24:53 PM JST

* Tue 13 Aug 2013 01:24:53 PM JST

* Tue 13 Aug 2013 01:24:53 PM JST
}

* Tue 13 Aug 2013 01:25:43 PM JST
std::
* Tue 13 Aug 2013 01:28:21 PM JST
c("hello");
* Tue 13 Aug 2013 01:28:22 PM JST
  c("hello");
* Tue 13 Aug 2013 01:30:09 PM JST
  
* Tue 13 Aug 2013 01:30:10 PM JST
hello
* Tue 13 Aug 2013 01:31:38 PM JST
1073741823
* Tue 13 Aug 2013 01:32:50 PM JST

* Tue 13 Aug 2013 01:32:50 PM JST

* Tue 13 Aug 2013 01:32:50 PM JST
  c.push_back("hello");

* Tue 13 Aug 2013 01:32:53 PM JST

* Tue 13 Aug 2013 01:32:53 PM JST

* Tue 13 Aug 2013 01:32:53 PM JST
  c.push_back("world");

* Tue 13 Aug 2013 01:40:57 PM JST

* Tue 13 Aug 2013 01:40:58 PM JST

* Tue 13 Aug 2013 01:41:00 PM JST
  for (long long n=0; n<=1073741823; ++n) {

* Tue 13 Aug 2013 01:41:00 PM JST
  for (long long n=0; n<=1073741823; ++n) {

* Tue 13 Aug 2013 01:41:00 PM JST
  for (long long n=0; n<=1073741823; ++n) {
    c.push_back("hel");

* Tue 13 Aug 2013 01:41:03 PM JST

* Tue 13 Aug 2013 01:41:03 PM JST

* Tue 13 Aug 2013 01:41:03 PM JST
  }

* Tue 13 Aug 2013 01:50:17 PM JST
(global-set-key "(" 't1-parence)
* Tue 13 Aug 2013 01:53:14 PM JST

* Tue 13 Aug 2013 01:53:44 PM JST

* Tue 13 Aug 2013 01:53:44 PM JST

* Tue 13 Aug 2013 01:53:44 PM JST
(define-key c-mode-base-map "(" 't1-parence)

* Tue 13 Aug 2013 01:54:52 PM JST
c.size()
* Tue 13 Aug 2013 01:59:41 PM JST
.push_back("hello");
* Tue 13 Aug 2013 02:00:17 PM JST

* Tue 13 Aug 2013 02:00:18 PM JST

* Tue 13 Aug 2013 02:00:18 PM JST
  std::cout << c.max_size() << std::endl;

* Tue 13 Aug 2013 02:03:19 PM JST
  c = {"hello", "world"};
  c.insert("goodbye");

  std::cout << c.size() << std::endl;

  return 0;
* Tue 13 Aug 2013 02:03:27 PM JST
  c = {"hello", "world"};
  c.insert("goodbye");

  std::cout << c.size() << std::endl;

  return 0;
* Tue 13 Aug 2013 02:12:36 PM JST

* Tue 13 Aug 2013 02:12:36 PM JST

* Tue 13 Aug 2013 02:12:37 PM JST
  c.insert(1, "goodbye");

* Tue 13 Aug 2013 02:13:05 PM JST
google
* Tue 13 Aug 2013 02:13:08 PM JST
yahoo
* Tue 13 Aug 2013 02:23:52 PM JST
std::cout
* Tue 13 Aug 2013 02:37:46 PM JST
  
* Tue 13 Aug 2013 02:38:20 PM JST
string
* Tue 13 Aug 2013 02:38:58 PM JST
  
* Tue 13 Aug 2013 02:39:01 PM JST
  
* Tue 13 Aug 2013 02:46:48 PM JST

* Tue 13 Aug 2013 02:46:48 PM JST

* Tue 13 Aug 2013 02:46:48 PM JST
  std::vector<int> i(3);

* Tue 13 Aug 2013 02:46:49 PM JST

* Tue 13 Aug 2013 02:46:50 PM JST

* Tue 13 Aug 2013 02:46:50 PM JST
  std::cout << i << std::endl;

* Tue 13 Aug 2013 02:50:43 PM JST
  
* Tue 13 Aug 2013 02:54:43 PM JST

* Tue 13 Aug 2013 02:54:44 PM JST

* Tue 13 Aug 2013 02:54:44 PM JST
  if (c == t) {

* Tue 13 Aug 2013 02:54:44 PM JST
  if (c == t) {

* Tue 13 Aug 2013 02:54:44 PM JST
  if (c == t) {
    std::cout << "OK!!" << std::endl;

* Tue 13 Aug 2013 02:54:44 PM JST
  if (c == t) {
    std::cout << "OK!!" << std::endl;

* Tue 13 Aug 2013 02:54:44 PM JST
  if (c == t) {
    std::cout << "OK!!" << std::endl;
  }

* Tue 13 Aug 2013 02:54:49 PM JST

* Tue 13 Aug 2013 02:54:49 PM JST

* Tue 13 Aug 2013 02:54:49 PM JST
  std::vector<std::string> d{"hello", "world"};

* Wed 14 Aug 2013 03:42:05 AM JST

* Wed 14 Aug 2013 03:42:05 AM JST

* Wed 14 Aug 2013 03:42:05 AM JST
  std::vector<std::string> c, t;

* Wed 14 Aug 2013 03:42:05 AM JST
  std::vector<std::string> c, t;

* Wed 14 Aug 2013 03:42:06 AM JST
  std::vector<std::string> c, t;
  c = {"hello", "world", "yahoo", "google"};

* Wed 14 Aug 2013 03:42:06 AM JST
  std::vector<std::string> c, t;
  c = {"hello", "world", "yahoo", "google"};

* Wed 14 Aug 2013 03:42:06 AM JST
  std::vector<std::string> c, t;
  c = {"hello", "world", "yahoo", "google"};
  t = {"hello", "world", "yahoo", "hoge"};

* Wed 14 Aug 2013 03:42:06 AM JST
  std::vector<std::string> c, t;
  c = {"hello", "world", "yahoo", "google"};
  t = {"hello", "world", "yahoo", "hoge"};

* Wed 14 Aug 2013 03:42:06 AM JST
  std::vector<std::string> c, t;
  c = {"hello", "world", "yahoo", "google"};
  t = {"hello", "world", "yahoo", "hoge"};
  std::vector<std::string> d();

* Wed 14 Aug 2013 03:42:06 AM JST

* Wed 14 Aug 2013 03:42:06 AM JST

* Wed 14 Aug 2013 03:42:06 AM JST
  std::cout << d[1] << std::endl;

* Wed 14 Aug 2013 03:42:06 AM JST
  std::cout << d[1] << std::endl;

* Wed 14 Aug 2013 03:42:06 AM JST
  std::cout << d[1] << std::endl;
  std::cout << c.size() << std::endl;

* Wed 14 Aug 2013 03:43:27 AM JST
include
* Wed 14 Aug 2013 03:43:47 AM JST
std::
* Wed 14 Aug 2013 03:44:46 AM JST
rbegin()
* Wed 14 Aug 2013 03:44:46 AM JST
a.rbegin()
* Wed 14 Aug 2013 03:46:43 AM JST
a.begin()
* Wed 14 Aug 2013 03:51:27 AM JST
begin()
* Wed 14 Aug 2013 03:55:44 AM JST

* Wed 14 Aug 2013 03:55:44 AM JST

* Wed 14 Aug 2013 03:55:44 AM JST
  std::list<std::string> a = {"Milton", "Shakespeare", "Austen"};

* Wed 14 Aug 2013 03:55:44 AM JST
  std::list<std::string> a = {"Milton", "Shakespeare", "Austen"};

* Wed 14 Aug 2013 03:55:44 AM JST
  std::list<std::string> a = {"Milton", "Shakespeare", "Austen"};
  auto tes = a.rbegin();

* Wed 14 Aug 2013 03:55:44 AM JST
  std::list<std::string> a = {"Milton", "Shakespeare", "Austen"};
  auto tes = a.rbegin();

* Wed 14 Aug 2013 03:55:44 AM JST
  std::list<std::string> a = {"Milton", "Shakespeare", "Austen"};
  auto tes = a.rbegin();
  ++tes;

* Wed 14 Aug 2013 03:55:44 AM JST
  std::list<std::string> a = {"Milton", "Shakespeare", "Austen"};
  auto tes = a.rbegin();
  ++tes;

* Wed 14 Aug 2013 03:55:45 AM JST
  std::list<std::string> a = {"Milton", "Shakespeare", "Austen"};
  auto tes = a.rbegin();
  ++tes;
  std::cout << *tes << std::endl;

* Wed 14 Aug 2013 04:13:34 AM JST

* Wed 14 Aug 2013 04:13:34 AM JST

* Wed 14 Aug 2013 04:13:34 AM JST
  char a[4] = "tes";

* Wed 14 Aug 2013 04:13:34 AM JST
  char a[4] = "tes";

* Wed 14 Aug 2013 04:13:34 AM JST
  char a[4] = "tes";
  std::cout << a[3] << std::endl;

* Wed 14 Aug 2013 04:14:32 AM JST
int
* Wed 14 Aug 2013 04:15:02 AM JST
std::
* Wed 14 Aug 2013 04:15:04 AM JST
std::
* Wed 14 Aug 2013 04:38:38 AM JST
  
* Wed 14 Aug 2013 04:38:40 AM JST
hello
* Wed 14 Aug 2013 04:38:44 AM JST
world
* Wed 14 Aug 2013 04:39:42 AM JST

* Wed 14 Aug 2013 04:39:42 AM JST

* Wed 14 Aug 2013 04:39:42 AM JST
  for (int n=0;  n<=10; ++n) {

* Wed 14 Aug 2013 04:39:43 AM JST

* Wed 14 Aug 2013 04:39:43 AM JST

* Wed 14 Aug 2013 04:39:43 AM JST
  }

* Wed 14 Aug 2013 04:39:54 AM JST

* Wed 14 Aug 2013 04:39:54 AM JST

* Wed 14 Aug 2013 04:39:54 AM JST
  cout << c1[n] << endl;

* Wed 14 Aug 2013 04:41:34 AM JST

* Wed 14 Aug 2013 04:41:34 AM JST

* Wed 14 Aug 2013 04:41:34 AM JST
  while (c1.begin() != c1.end()) {

* Wed 14 Aug 2013 04:41:34 AM JST
  while (c1.begin() != c1.end()) {

* Wed 14 Aug 2013 04:41:34 AM JST
  while (c1.begin() != c1.end()) {
    cout << c1 << endl;

* Wed 14 Aug 2013 04:41:34 AM JST
  while (c1.begin() != c1.end()) {
    cout << c1 << endl;

* Wed 14 Aug 2013 04:41:35 AM JST
  while (c1.begin() != c1.end()) {
    cout << c1 << endl;
    c1++;

* Wed 14 Aug 2013 04:41:35 AM JST
  while (c1.begin() != c1.end()) {
    cout << c1 << endl;
    c1++;

* Wed 14 Aug 2013 04:41:35 AM JST
  while (c1.begin() != c1.end()) {
    cout << c1 << endl;
    c1++;
  }

* Wed 14 Aug 2013 04:41:46 AM JST
std::
* Wed 14 Aug 2013 04:41:48 AM JST
std::
* Wed 14 Aug 2013 04:41:51 AM JST
  
* Wed 14 Aug 2013 04:42:00 AM JST
swap(c1, c2);
* Wed 14 Aug 2013 05:31:03 PM JST

* Wed 14 Aug 2013 05:31:03 PM JST

* Wed 14 Aug 2013 05:31:03 PM JST
  vector<string> c1 = {"hello", "world"};

* Wed 14 Aug 2013 05:31:03 PM JST
  vector<string> c1 = {"hello", "world"};

* Wed 14 Aug 2013 05:31:03 PM JST
  vector<string> c1 = {"hello", "world"};
  vector<string> c2 = {"yahoo", "google", "bing"};

* Wed 14 Aug 2013 05:31:03 PM JST

* Wed 14 Aug 2013 05:31:03 PM JST

* Wed 14 Aug 2013 05:31:03 PM JST
  c1.swap(c2);

* Wed 14 Aug 2013 05:31:05 PM JST

* Wed 14 Aug 2013 05:31:05 PM JST

* Wed 14 Aug 2013 05:31:05 PM JST
  cout << c1[0] << endl;

* Wed 14 Aug 2013 05:31:05 PM JST
  cout << c1[0] << endl;

* Wed 14 Aug 2013 05:31:06 PM JST
  cout << c1[0] << endl;
  cout << c1[1] << endl;

* Wed 14 Aug 2013 05:31:20 PM JST
vector<int> 
* Wed 14 Aug 2013 05:31:59 PM JST
char c[2] = {"ab"};
* Wed 14 Aug 2013 05:32:41 PM JST
int
* Thu 15 Aug 2013 12:35:28 AM JST
i = {"hello", "world"};
* Thu 15 Aug 2013 12:39:34 AM JST
std::
* Thu 15 Aug 2013 12:39:36 AM JST
std::
* Thu 15 Aug 2013 12:40:34 AM JST
begin()
* Thu 15 Aug 2013 12:40:54 AM JST

* Thu 15 Aug 2013 12:40:55 AM JST

* Thu 15 Aug 2013 12:40:55 AM JST
  for (int n=0; s[n] != s[-1]; ++n) {

* Thu 15 Aug 2013 12:40:55 AM JST
  for (int n=0; s[n] != s[-1]; ++n) {

* Thu 15 Aug 2013 12:40:55 AM JST
  for (int n=0; s[n] != s[-1]; ++n) {
    cout << s[n] << endl;

* Thu 15 Aug 2013 12:40:55 AM JST
  for (int n=0; s[n] != s[-1]; ++n) {
    cout << s[n] << endl;

* Thu 15 Aug 2013 12:40:55 AM JST
  for (int n=0; s[n] != s[-1]; ++n) {
    cout << s[n] << endl;
  }

* Thu 15 Aug 2013 12:41:07 AM JST
std::
* Thu 15 Aug 2013 12:41:10 AM JST
std::
* Thu 15 Aug 2013 12:49:12 AM JST

* Thu 15 Aug 2013 12:49:12 AM JST

* Thu 15 Aug 2013 12:49:12 AM JST
  cout << s[0] << endl;

* Thu 15 Aug 2013 12:50:14 AM JST
iterator
* Thu 15 Aug 2013 12:50:14 AM JST
list::iterator
* Thu 15 Aug 2013 12:50:18 AM JST
iterator 
* Thu 15 Aug 2013 12:50:18 AM JST
list::iterator 
* Thu 15 Aug 2013 12:50:46 AM JST
std::
* Thu 15 Aug 2013 12:50:48 AM JST
std::
* Thu 15 Aug 2013 12:53:13 AM JST
iterator
* Thu 15 Aug 2013 12:53:13 AM JST
List::iterator
* Thu 15 Aug 2013 12:53:30 AM JST
begin
* Thu 15 Aug 2013 02:04:24 AM JST
  for (auto it = s.begin() ; it != s.end(); ++it) {
    cout << *it << endl;
  }

* Thu 15 Aug 2013 02:05:06 AM JST
void all_print(auto **lis)
{
  for (auto it = lis.begin() ; it != lis.end(); ++it) {
    cout << *it << endl;
  }
  
  
}
* Thu 15 Aug 2013 02:05:50 AM JST
kill-region
* Thu 15 Aug 2013 02:06:21 AM JST
  
* Thu 15 Aug 2013 02:06:22 AM JST
include
* Thu 15 Aug 2013 02:06:22 AM JST
insert-include
* Thu 15 Aug 2013 02:07:15 AM JST
void all_print(auto **lis)
{
  for (auto it = lis.begin() ; it != lis.end(); ++it) {
    cout << *it << endl;
  }
}

* Thu 15 Aug 2013 02:16:41 AM JST
string>
* Thu 15 Aug 2013 02:16:42 AM JST
vector<string>
* Thu 15 Aug 2013 02:17:26 AM JST
auto
* Thu 15 Aug 2013 02:19:16 AM JST
vector<string>
* Thu 15 Aug 2013 02:20:29 AM JST
string> *
* Thu 15 Aug 2013 02:20:29 AM JST
vector<string> *
* Thu 15 Aug 2013 02:26:50 AM JST
lis
* Thu 15 Aug 2013 02:26:53 AM JST
lis
* Thu 15 Aug 2013 02:27:43 AM JST
const 
* Thu 15 Aug 2013 02:33:50 AM JST
STRINGVECTOR
* Thu 15 Aug 2013 02:42:49 AM JST
auto 
* Thu 15 Aug 2013 02:46:40 AM JST
std::
* Thu 15 Aug 2013 02:46:42 AM JST
std::
* Thu 15 Aug 2013 02:47:02 AM JST
2]
* Thu 15 Aug 2013 02:48:48 AM JST
back()
* Thu 15 Aug 2013 02:53:59 AM JST
v.at(1)
* Thu 15 Aug 2013 02:54:34 AM JST
all_print(&v);
* Thu 15 Aug 2013 02:54:40 AM JST

* Thu 15 Aug 2013 02:54:40 AM JST

* Thu 15 Aug 2013 02:54:41 AM JST
  // all_print(&v);

* Thu 15 Aug 2013 02:56:58 AM JST

* Thu 15 Aug 2013 02:56:58 AM JST

* Thu 15 Aug 2013 02:56:58 AM JST
  v.at(1) = "hellllllo";

* Thu 15 Aug 2013 03:00:28 AM JST
void all_print(STRINGVECTOR *lis)
{
  for (auto it = (*lis).begin() ; it != (*lis).end(); ++it) {
    cout << *it << endl;
  }
}

* Thu 15 Aug 2013 03:00:32 AM JST

* Thu 15 Aug 2013 03:00:34 AM JST
vector
* Thu 15 Aug 2013 03:00:48 AM JST
string>
* Thu 15 Aug 2013 03:00:48 AM JST
list<string>
* Thu 15 Aug 2013 03:01:49 AM JST
joe",
* Thu 15 Aug 2013 03:01:49 AM JST
joe", "joe",
* Thu 15 Aug 2013 03:01:53 AM JST
joe"
* Thu 15 Aug 2013 03:05:22 AM JST
vector>
* Thu 15 Aug 2013 03:06:55 AM JST
begin
* Thu 15 Aug 2013 03:06:55 AM JST
lis.begin
* Thu 15 Aug 2013 03:07:20 AM JST
     
* Thu 15 Aug 2013 03:08:08 AM JST
void all_print(STRINGLIST *lis)
{
  for (auto it = (*lis).begin() ; it != (*lis).end(); ++it) {
    cout << *it << endl;
  }
}

* Thu 15 Aug 2013 03:08:17 AM JST

* Thu 15 Aug 2013 03:08:18 AM JST
STRING
* Thu 15 Aug 2013 03:08:22 AM JST
string
* Thu 15 Aug 2013 03:08:25 AM JST
STRING
* Thu 15 Aug 2013 03:11:32 AM JST
it = 
* Thu 15 Aug 2013 04:18:07 AM JST
std::
* Thu 15 Aug 2013 04:18:09 AM JST
cout << prev << std::
* Thu 15 Aug 2013 04:18:10 AM JST
std::
* Thu 15 Aug 2013 07:24:52 AM JST

* Thu 15 Aug 2013 07:24:52 AM JST

* Thu 15 Aug 2013 07:24:53 AM JST
  forward_list<int> flis = {0,1,2,3,4,5,6,7,8,9};

* Thu 15 Aug 2013 07:24:53 AM JST
  forward_list<int> flis = {0,1,2,3,4,5,6,7,8,9};

* Thu 15 Aug 2013 07:24:53 AM JST
  forward_list<int> flis = {0,1,2,3,4,5,6,7,8,9};
  auto prev = flis.before_begin();

* Thu 15 Aug 2013 07:24:53 AM JST
  forward_list<int> flis = {0,1,2,3,4,5,6,7,8,9};
  auto prev = flis.before_begin();

* Thu 15 Aug 2013 07:24:53 AM JST
  forward_list<int> flis = {0,1,2,3,4,5,6,7,8,9};
  auto prev = flis.before_begin();
  cout << *prev << endl;

* Thu 15 Aug 2013 07:24:55 AM JST

* Thu 15 Aug 2013 07:24:55 AM JST

* Thu 15 Aug 2013 07:24:55 AM JST
  // all_print(&lis);

* Thu 15 Aug 2013 07:25:24 AM JST
std::
* Thu 15 Aug 2013 07:26:36 AM JST
type 
* Thu 15 Aug 2013 07:26:36 AM JST
size_type 
* Thu 15 Aug 2013 07:26:37 AM JST
int>::size_type 
* Thu 15 Aug 2013 07:26:39 AM JST
vector<int>::size_type 
* Thu 15 Aug 2013 07:27:21 AM JST
cout
* Thu 15 Aug 2013 07:27:33 AM JST
  cout << "ivec: size: " << ivec.size()
       << " capacity: " << ivec.capacity() << endl;

* Thu 15 Aug 2013 07:29:48 AM JST
capacity
* Thu 15 Aug 2013 07:45:38 AM JST

* Thu 15 Aug 2013 07:45:39 AM JST

* Thu 15 Aug 2013 07:45:39 AM JST
  vector<int> ivec;

* Thu 15 Aug 2013 07:46:32 AM JST
std::
* Thu 15 Aug 2013 07:46:34 AM JST
cout << s << std::
* Thu 15 Aug 2013 07:46:35 AM JST
std::
* Fri 16 Aug 2013 02:24:46 PM JST
  vector
* Fri 16 Aug 2013 02:24:54 PM JST
hello
* Fri 16 Aug 2013 02:25:04 PM JST
yahoo
* Fri 16 Aug 2013 02:26:03 PM JST
equal(str.cbegin(), str.cend(), str2.cbegin())
* Fri 16 Aug 2013 02:26:20 PM JST

* Fri 16 Aug 2013 02:26:20 PM JST

* Fri 16 Aug 2013 02:26:20 PM JST
  std::cout << sum << std::endl;

* Fri 16 Aug 2013 02:26:34 PM JST
world
* Fri 16 Aug 2013 02:26:37 PM JST
joe
* Fri 16 Aug 2013 02:30:18 PM JST
world
* Fri 16 Aug 2013 02:30:22 PM JST
jon
* Fri 16 Aug 2013 02:30:24 PM JST
yes
* Fri 16 Aug 2013 02:30:29 PM JST
joe"
* Fri 16 Aug 2013 02:32:02 PM JST
google"
* Fri 16 Aug 2013 02:44:41 PM JST
, "google"
* Fri 16 Aug 2013 02:44:51 PM JST
1
* Fri 16 Aug 2013 04:15:17 PM JST

* Fri 16 Aug 2013 04:15:17 PM JST

* Fri 16 Aug 2013 04:15:17 PM JST
  if (equal(str.cbegin(), str.cend(), str2.cbegin() + 1)) {

* Fri 16 Aug 2013 04:15:17 PM JST
  if (equal(str.cbegin(), str.cend(), str2.cbegin() + 1)) {

* Fri 16 Aug 2013 04:15:17 PM JST
  if (equal(str.cbegin(), str.cend(), str2.cbegin() + 1)) {
    std::cout << "OK" << std::endl;

* Fri 16 Aug 2013 04:15:17 PM JST
  if (equal(str.cbegin(), str.cend(), str2.cbegin() + 1)) {
    std::cout << "OK" << std::endl;

* Fri 16 Aug 2013 04:15:17 PM JST
  if (equal(str.cbegin(), str.cend(), str2.cbegin() + 1)) {
    std::cout << "OK" << std::endl;
  }

* Fri 16 Aug 2013 04:17:15 PM JST
vector<string>
* Fri 16 Aug 2013 04:17:20 PM JST
vector<string>
* Fri 16 Aug 2013 04:17:48 PM JST
  for (auto it = (*lis).begin() ; it != (*lis).end(); ++it) {
    cout << *it << endl;
  }

* Fri 16 Aug 2013 04:18:13 PM JST
lis)
* Fri 16 Aug 2013 04:18:27 PM JST
  for (auto it = str2.begin() ; it != str2.end(); ++it) {
    cout << *it << endl;
  }

* Fri 16 Aug 2013 04:18:31 PM JST

* Fri 16 Aug 2013 04:18:31 PM JST

* Fri 16 Aug 2013 04:18:31 PM JST
  all_print(str2);

* Fri 16 Aug 2013 04:19:55 PM JST
"hello",
* Fri 16 Aug 2013 04:21:59 PM JST
  for (const auto &s : str2) {
    cout << s << endl;
  }

* Fri 16 Aug 2013 11:46:53 PM JST
posix_agent
* Fri 16 Aug 2013 11:51:09 PM JST
paramiko.Agent().agent.get_keys()
* Fri 16 Aug 2013 11:51:19 PM JST
agent.
* Fri 16 Aug 2013 11:51:29 PM JST
agent.
* Fri 16 Aug 2013 11:55:28 PM JST
dir(
* Sat 17 Aug 2013 12:34:39 AM JST
    for i in range(2):
        if haskeyrings():
            if verbose:
                print(PRINTFORMAT % ('Check has keys', 'Has keys.'))
            break
        else:
            if verbose:
                print(PRINTFORMAT % ('Check has keys', 'Not has keys!!'))
            try:
                passwd = getpass('Enter private key password: ')
                add_keys(key, passwd)
            except:
                raise SSHKeyError
            finally:
                del passwd
    if 2 < i:
        print(PRINTFORMAT % ('Check has keys', "Can't add ssh key."))
        raise SSHKeyError
    if verbose:
        print("\n***** PortForward")
    if not hastunnel():
        tunneling()
        if not hastunnel():
            raise SSHKeyError, "Can't create tunneling."
        else:
            if verbose:
                print(PRINTFORMAT % ('PortForwarder', 'Launched!!'))
    else:
        if verbose:
            print PRINTFORMAT % ('PortForwarder', 'Exists OK')

* Sat 17 Aug 2013 12:36:34 AM JST
def haskeyrings():
    """Check key in agent.
    """
    if len(agent.get_keys()) > 0:
        return True
    return False

def add_keys(passwd, key):
    """summary
    """
    agent.add_keys(passwd, key)

def hastunnel():
    """summary
    """
    return tunnel.hastunnel()

def tunneling():
    """summary
    """
    tunnel.tunneling()

* Sat 17 Aug 2013 12:37:27 AM JST
class SSHKeyError(StandardError):
    pass

* Sat 17 Aug 2013 12:38:08 AM JST
from getpass import getpass
* Sat 17 Aug 2013 12:38:42 AM JST
import tunnel
* Sat 17 Aug 2013 12:43:02 AM JST
def haskeyrings():
    """Check key in agent.
    """
    if len(agent.get_keys()) > 0:
        return True
    return False

* Sat 17 Aug 2013 01:05:26 AM JST
def add_keys(passwd, key):
    """summary
    """
    agent.add_keys(passwd, key)


* Sat 17 Aug 2013 01:06:54 AM JST
def hastunnel():
    """summary
    """
    return tunnel.hastunnel()


* Sat 17 Aug 2013 01:07:10 AM JST
def tunneling():
    """summary
    """
    tunnel.tunneling()

* Sat 17 Aug 2013 01:55:58 AM JST
key = 
* Sat 17 Aug 2013 01:57:50 AM JST
'\xc8\xa6k\xe5\xd9\xef\xa1.[\xd8Y\xc7\xd3\x95[\xd2'
* Sat 17 Aug 2013 02:07:39 AM JST
.get_fingerprint()
* Sat 17 Aug 2013 02:07:52 AM JST
False
* Sat 17 Aug 2013 02:12:29 AM JST

* Sat 17 Aug 2013 02:12:30 AM JST

* Sat 17 Aug 2013 02:12:30 AM JST
        # TODO: (Atami) [2013/08/17]

* Sat 17 Aug 2013 02:12:32 AM JST
        # TODO: (Atami) [2013/08/17]

* Sat 17 Aug 2013 02:12:32 AM JST
        # TODO: (Atami) [2013/08/17]
        if len(agent.get_keys()) > 0:

* Sat 17 Aug 2013 02:12:32 AM JST
        # TODO: (Atami) [2013/08/17]
        if len(agent.get_keys()) > 0:

* Sat 17 Aug 2013 02:12:32 AM JST
        # TODO: (Atami) [2013/08/17]
        if len(agent.get_keys()) > 0:
            return True

* Sat 17 Aug 2013 02:12:42 AM JST
agent.get_keys()
* Sat 17 Aug 2013 02:12:46 AM JST

* Sat 17 Aug 2013 02:12:47 AM JST

* Sat 17 Aug 2013 02:12:47 AM JST
        keys = 

* Sat 17 Aug 2013 02:17:43 AM JST
self._kagiMD5 in [x.get_fingerprint() for x in keys]
* Sat 17 Aug 2013 02:17:48 AM JST
False
* Sat 17 Aug 2013 02:17:51 AM JST

* Sat 17 Aug 2013 02:17:51 AM JST

* Sat 17 Aug 2013 02:17:51 AM JST
        if self._kagiMD5 in [x.get_fingerprint() for x in keys]:

* Sat 17 Aug 2013 02:17:54 AM JST
        if self._kagiMD5 in [x.get_fingerprint() for x in keys]:

* Sat 17 Aug 2013 02:17:54 AM JST
        if self._kagiMD5 in [x.get_fingerprint() for x in keys]:
            return True

* Sat 17 Aug 2013 02:44:50 AM JST
'\xc8\xa6k\xe5\xd9\xef\xa1.[\xd8Y\xc7\xd3\x95[\xd2'
* Sat 17 Aug 2013 03:14:41 AM JST
    def haskeyring(self):
        """Check key in agent.
        """
        keys = agent.get_keys()
        if not keys == [] and self._kagiMD5 in [x.get_fingerprint() for x in keys]:
            return True
        return False

* Sat 17 Aug 2013 03:15:39 AM JST
class SSHUtils(object):
    """
    """
    def haskeyring(self):
        """Check key in agent.
        """
        keys = agent.get_keys()
        if not keys == [] and self._kagiMD5 in [x.get_fingerprint() for x in keys]:
            return True
        return False


* Sat 17 Aug 2013 03:16:43 AM JST
    def add_keys(self, passwd, key):
        """summary
        """
        agent.add_keys(passwd, key)


* Sat 17 Aug 2013 03:21:00 AM JST
        self.king = None
        self.sftp = None

* Sat 17 Aug 2013 03:21:14 AM JST
        self.king = None
        self.sftp = None

* Sat 17 Aug 2013 03:22:36 AM JST
Exec
* Sat 17 Aug 2013 03:33:57 AM JST

* Sat 17 Aug 2013 03:33:57 AM JST

* Sat 17 Aug 2013 03:33:57 AM JST
                    passwd = getpass('Enter private key password: ')

* Sat 17 Aug 2013 03:38:19 AM JST
passwd
* Sat 17 Aug 2013 03:40:04 AM JST
def get_keys():
    """summary
    """
    # agent = paramiko.Agent()
    return paramiko.Agent().get_keys()

* Sat 17 Aug 2013 03:40:38 AM JST
get_keys,
* Sat 17 Aug 2013 03:41:07 AM JST

* Sat 17 Aug 2013 03:41:07 AM JST

* Sat 17 Aug 2013 03:41:07 AM JST
    # agent = paramiko.Agent()

* Sat 17 Aug 2013 03:43:30 AM JST

* Sat 17 Aug 2013 03:43:30 AM JST

* Sat 17 Aug 2013 03:43:30 AM JST
import paramiko

* Sat 17 Aug 2013 03:43:38 AM JST

* Sat 17 Aug 2013 03:43:38 AM JST

* Sat 17 Aug 2013 03:43:38 AM JST
import paramiko

* Sat 17 Aug 2013 03:43:41 AM JST

* Sat 17 Aug 2013 03:43:41 AM JST

* Sat 17 Aug 2013 03:43:41 AM JST
import paramiko

* Sat 17 Aug 2013 04:28:08 AM JST

* Sat 17 Aug 2013 04:28:08 AM JST

* Sat 17 Aug 2013 04:28:08 AM JST
    child = pexpect.spawn(cmd)

* Sat 17 Aug 2013 04:28:08 AM JST
    child = pexpect.spawn(cmd)

* Sat 17 Aug 2013 04:28:08 AM JST
    child = pexpect.spawn(cmd)
    child.expect('passphrase')

* Sat 17 Aug 2013 04:28:20 AM JST
subprocess
* Sat 17 Aug 2013 04:44:28 AM JST
'passphrase', 
* Sat 17 Aug 2013 04:45:12 AM JST
passwd = getpass('Enter private key password: ')
* Sat 17 Aug 2013 04:45:23 AM JST

* Sat 17 Aug 2013 04:45:23 AM JST

* Sat 17 Aug 2013 04:45:23 AM JST
        sleep(1)

* Sat 17 Aug 2013 04:45:26 AM JST

* Sat 17 Aug 2013 04:45:26 AM JST

* Sat 17 Aug 2013 04:45:26 AM JST
        sleep(1)

* Sat 17 Aug 2013 04:45:29 AM JST

* Sat 17 Aug 2013 04:45:29 AM JST

* Sat 17 Aug 2013 04:45:29 AM JST
    ps = Popen(['ssh-add', key], stdout=PIPE, stderr=PIPE, shell=True)

* Sat 17 Aug 2013 04:46:09 AM JST

* Sat 17 Aug 2013 04:46:09 AM JST

* Sat 17 Aug 2013 04:46:09 AM JST
    if not passwd:

* Sat 17 Aug 2013 04:48:02 AM JST

* Sat 17 Aug 2013 04:48:02 AM JST

* Sat 17 Aug 2013 04:48:02 AM JST
from time import sleep

* Sat 17 Aug 2013 04:48:03 AM JST

* Sat 17 Aug 2013 04:48:03 AM JST

* Sat 17 Aug 2013 04:48:03 AM JST
from subprocess import Popen, PIPE

* Sat 17 Aug 2013 04:48:09 AM JST

* Sat 17 Aug 2013 04:48:09 AM JST

* Sat 17 Aug 2013 04:48:09 AM JST
import cgitb as _cgitb

* Sat 17 Aug 2013 04:49:27 AM JST
, timeout=60
* Sat 17 Aug 2013 04:51:07 AM JST

* Sat 17 Aug 2013 04:51:07 AM JST

* Sat 17 Aug 2013 04:51:07 AM JST
    if not passwd:

* Sat 17 Aug 2013 04:51:10 AM JST
None
* Sat 17 Aug 2013 04:51:10 AM JST
passwd=None
* Sat 17 Aug 2013 04:51:53 AM JST

* Sat 17 Aug 2013 04:51:53 AM JST

* Sat 17 Aug 2013 04:51:53 AM JST
        passwd = getpass('Enter private key password: ')

* Sat 17 Aug 2013 04:52:28 AM JST

* Sat 17 Aug 2013 04:52:28 AM JST

* Sat 17 Aug 2013 04:52:28 AM JST
                finally:

* Sat 17 Aug 2013 04:52:28 AM JST
                finally:

* Sat 17 Aug 2013 04:52:28 AM JST
                finally:
                    del passwd

* Sat 17 Aug 2013 04:55:38 AM JST

* Sat 17 Aug 2013 04:55:38 AM JST

* Sat 17 Aug 2013 04:55:38 AM JST
                del passwd

* Sat 17 Aug 2013 05:04:10 AM JST
passwd, 
* Sat 17 Aug 2013 05:09:18 AM JST

* Sat 17 Aug 2013 05:09:18 AM JST

* Sat 17 Aug 2013 05:09:18 AM JST
import cgitb as _cgitb

* Sat 17 Aug 2013 05:10:05 AM JST

* Sat 17 Aug 2013 05:10:05 AM JST

* Sat 17 Aug 2013 05:10:06 AM JST
import paramiko

* Sat 17 Aug 2013 05:10:09 AM JST

* Sat 17 Aug 2013 05:10:09 AM JST

* Sat 17 Aug 2013 05:10:09 AM JST
import cgitb as _cgitb

* Sat 17 Aug 2013 05:10:21 AM JST

* Sat 17 Aug 2013 05:10:21 AM JST

* Sat 17 Aug 2013 05:10:21 AM JST
        sleep(1)

* Sat 17 Aug 2013 05:10:22 AM JST

* Sat 17 Aug 2013 05:10:22 AM JST

* Sat 17 Aug 2013 05:10:22 AM JST
        sleep(1)

* Sat 17 Aug 2013 05:16:16 AM JST

* Sat 17 Aug 2013 05:16:16 AM JST

* Sat 17 Aug 2013 05:16:16 AM JST
        i = child.expect(['Enter passphrase', 'Bad passphrase'])

* Sat 17 Aug 2013 05:16:27 AM JST
    if not passwd:
        passwd = getpass('Enter private key password: ')

* Sat 17 Aug 2013 05:16:40 AM JST

* Sat 17 Aug 2013 05:16:40 AM JST

* Sat 17 Aug 2013 05:16:40 AM JST
# from time import sleep

* Sat 17 Aug 2013 05:19:43 AM JST
    def haskeyring(self):
        """Check key in agent.
        """
        keys = agent.get_keys()
        if not keys == [] and self._kagiMD5 in [x.get_fingerprint() for x in keys]:
            return True
        return False

* Sat 17 Aug 2013 05:19:53 AM JST
agent.
* Sat 17 Aug 2013 05:21:00 AM JST
self
* Sat 17 Aug 2013 05:25:50 AM JST
key
* Sat 17 Aug 2013 05:32:12 AM JST
class SSHUtils(object):
    """
    """
    def haskeyring(self):
        """Check key in agent.
        """
        return agent.haskeyring(self._kagiMD5)

    def add_keys(self):
        """summary
        """
        agent.add_keys(self._kagi)


* Sat 17 Aug 2013 05:32:35 AM JST
    keys = get_keys()
    if not keys == [] and md5 in [x.get_fingerprint() for x in keys]:
        return True
    return False

* Sat 17 Aug 2013 05:34:16 AM JST
md5 = 
* Sat 17 Aug 2013 05:35:13 AM JST
agent.
* Sat 17 Aug 2013 05:35:15 AM JST
agent.
* Sat 17 Aug 2013 05:36:04 AM JST
SSH
* Sat 17 Aug 2013 05:36:42 AM JST
class agentUtils(object):
    """
    """
    def haskeyring(self):
        """Check key in agent.
        """
        return haskeyring(self._kagiMD5)

    def add_keys(self):
        """summary
        """
        add_keys(self._kagi)


* Sat 17 Aug 2013 05:37:01 AM JST
SSH
* Sat 17 Aug 2013 05:37:25 AM JST
SSH
* Sat 17 Aug 2013 05:37:43 AM JST
SSH
* Sat 17 Aug 2013 05:37:52 AM JST
SSH
* Sat 17 Aug 2013 05:39:30 AM JST

* Sat 17 Aug 2013 05:39:30 AM JST

* Sat 17 Aug 2013 05:39:30 AM JST
        if not passwd:

* Sat 17 Aug 2013 05:49:18 AM JST
self.
* Sat 17 Aug 2013 05:51:21 AM JST

* Sat 17 Aug 2013 05:51:21 AM JST

* Sat 17 Aug 2013 05:51:21 AM JST
        if child.expect(''):

* Sat 17 Aug 2013 05:51:23 AM JST

* Sat 17 Aug 2013 05:51:23 AM JST

* Sat 17 Aug 2013 05:51:23 AM JST
        passwd = getpass('Enter private key password: ')

* Sat 17 Aug 2013 05:56:40 AM JST
getpass('Enter private key password: ')
* Sat 17 Aug 2013 06:13:18 AM JST

* Sat 17 Aug 2013 06:13:18 AM JST

* Sat 17 Aug 2013 06:13:18 AM JST
    if not passwd:

* Sat 17 Aug 2013 06:15:37 AM JST

* Sat 17 Aug 2013 06:15:37 AM JST

* Sat 17 Aug 2013 06:15:37 AM JST
        sleep(1)

* Sat 17 Aug 2013 06:56:02 AM JST

* Sat 17 Aug 2013 06:56:02 AM JST

* Sat 17 Aug 2013 06:56:02 AM JST
                    print(i)

* Sat 17 Aug 2013 06:56:03 AM JST

* Sat 17 Aug 2013 06:56:03 AM JST

* Sat 17 Aug 2013 06:56:04 AM JST
                try:

* Sat 17 Aug 2013 06:56:10 AM JST

* Sat 17 Aug 2013 06:56:10 AM JST

* Sat 17 Aug 2013 06:56:11 AM JST
                except:

* Sat 17 Aug 2013 06:56:11 AM JST
                except:

* Sat 17 Aug 2013 06:56:11 AM JST
                except:
                    raise SSHKeyError

* Sat 17 Aug 2013 06:58:10 AM JST
sleep(1)
* Sat 17 Aug 2013 07:12:42 AM JST

* Sat 17 Aug 2013 07:12:42 AM JST

* Sat 17 Aug 2013 07:12:42 AM JST
import pavessh

* Sat 17 Aug 2013 07:12:44 AM JST

* Sat 17 Aug 2013 07:12:44 AM JST

* Sat 17 Aug 2013 07:12:44 AM JST
from getpass import getpass

* Sat 17 Aug 2013 07:14:48 AM JST

* Sat 17 Aug 2013 07:14:48 AM JST

* Sat 17 Aug 2013 07:14:48 AM JST
import agent

* Sat 17 Aug 2013 07:15:02 AM JST
agent.
* Sat 17 Aug 2013 07:24:02 AM JST

* Sat 17 Aug 2013 07:24:02 AM JST

* Sat 17 Aug 2013 07:24:02 AM JST
import paramiko

* Sat 17 Aug 2013 07:24:03 AM JST

* Sat 17 Aug 2013 07:24:03 AM JST

* Sat 17 Aug 2013 07:24:03 AM JST
import cgitb as _cgitb

* Sat 17 Aug 2013 07:48:37 AM JST
Night
* Sat 17 Aug 2013 07:51:18 AM JST
def _options_maker():
    parser = argparse.ArgumentParser(description="""Backup NI machine.""")
    parser.add_argument('--version',
                        dest='version',
                        action='version',
                        version=__version__,
                        help='Version Strings.')
    parser.add_argument('-a', '--auto',
                        dest='auto',
                        action='store_true',
                        default=False,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)
                        help='Auto backup.')

    # (yas/expand-link "argparse_add_argument" t)
    return parser.parse_args()

* Sat 17 Aug 2013 07:59:56 AM JST

* Sat 17 Aug 2013 07:59:56 AM JST

* Sat 17 Aug 2013 07:59:56 AM JST
import subprocess

* Sat 17 Aug 2013 08:00:43 AM JST
check_call
* Sat 17 Aug 2013 08:01:04 AM JST
CalledProcessError:
* Sat 17 Aug 2013 08:06:44 AM JST
only
* Sat 17 Aug 2013 06:53:28 PM JST

* Sat 17 Aug 2013 06:53:28 PM JST

* Sat 17 Aug 2013 06:53:28 PM JST
ki = king.King(verbose=True)

* Sat 17 Aug 2013 06:56:31 PM JST

* Sat 17 Aug 2013 06:56:31 PM JST

* Sat 17 Aug 2013 06:56:31 PM JST
import agent

* Sat 17 Aug 2013 06:56:36 PM JST
agent.
* Sat 17 Aug 2013 07:00:15 PM JST
summary
* Sat 17 Aug 2013 07:00:37 PM JST
    
* Sat 17 Aug 2013 07:03:15 PM JST
agent.
* Sun 18 Aug 2013 04:21:50 AM JST
def get_keys():
    """summary
    """
    return paramiko.Agent().get_keys()


* Sun 18 Aug 2013 04:23:45 AM JST
    def _haskeyring(md5):
        """Check key in agent.
        """
        keys = get_keys()
        if not keys == [] and md5 in [x.get_fingerprint() for x in keys]:
            return True
        return False


* Sun 18 Aug 2013 04:23:50 AM JST
def get_keys():
    """summary
    """
    return paramiko.Agent().get_keys()

* Sun 18 Aug 2013 05:03:47 AM JST
execute
* Sun 18 Aug 2013 05:28:31 AM JST
class PasswordDialog(wx.Dialog):
    def __init__(self, parent, id=-1, title="Enter password"):
        wx.Dialog.__init__(self, parent, id, title, size=(320, 160))
        self.mainSizer = wx.BoxSizer(wx.VERTICAL)
        self.buttonSizer = wx.BoxSizer(wx.HORIZONTAL)
        self.label = wx.StaticText(self, label="Enter password:")
        self.field = wx.TextCtrl(self, value="", size=(300, 20), style=wx.TE_PASSWORD|wx.TE_PROCESS_ENTER)
        self.okbutton = wx.Button(self, label="OK", id=wx.ID_OK)
        self.cancelbutton = wx.Button(self, label="Cancel", id=wx.ID_CANCEL)
        self.mainSizer.Add(self.label, 0, wx.ALL, 8 )
        self.mainSizer.Add(self.field, 0, wx.ALL, 8 )
        self.buttonSizer.Add(self.okbutton, 0, wx.ALL, 8 )
        self.buttonSizer.Add(self.cancelbutton, 0, wx.ALL, 8 )
        self.mainSizer.Add(self.buttonSizer, 0, wx.ALL, 0)
        self.Bind(wx.EVT_BUTTON, self.onOK, id=wx.ID_OK)
        self.Bind(wx.EVT_BUTTON, self.onCancel, id=wx.ID_CANCEL)
        self.Bind(wx.EVT_TEXT_ENTER, self.onOK)
        self.SetSizer(self.mainSizer)
        self.result = None

    def onOK(self, event):
        self.result = self.field.GetValue()
        self.Destroy()

    def onCancel(self, event):
        self.Destroy()
* Sun 18 Aug 2013 05:29:00 AM JST
dlg = PasswordDialog(frame)
dlg.ShowModal()
* Sun 18 Aug 2013 05:31:03 AM JST
frame
* Sun 18 Aug 2013 05:37:11 AM JST
 from Tkinter import *
   2 from bwidget import *
   3 t = Tk()
   4 t.title('password')
   5 def printMe(s):
   6         print s
   7 
   8 b = Button(t, relief=LINK, text="Quit", command=t.destroy)
   9 b.pack()
  10 
  11 p = PasswordDialog(t, type="okcancel", labelwidth=10,
  12                 command=lambda s='have pwd': printMe(s))
  13 t.mainloop()
* Sun 18 Aug 2013 05:37:49 AM JST
13 
* Sun 18 Aug 2013 05:37:50 AM JST
12 
* Sun 18 Aug 2013 05:37:50 AM JST
11 
* Sun 18 Aug 2013 05:37:50 AM JST
10 
* Sun 18 Aug 2013 05:37:50 AM JST
9 
* Sun 18 Aug 2013 05:37:50 AM JST
8 
* Sun 18 Aug 2013 05:37:50 AM JST
7 
* Sun 18 Aug 2013 05:37:50 AM JST
6 
* Sun 18 Aug 2013 05:37:50 AM JST
5 
* Sun 18 Aug 2013 05:37:50 AM JST
4 
* Sun 18 Aug 2013 05:37:50 AM JST
3 
* Sun 18 Aug 2013 05:37:50 AM JST
2 
* Sun 18 Aug 2013 05:39:40 AM JST
import wx

class LoginDialog(wx.Dialog):
    def __init__(self, *args, **kwargs):
        super(LoginDialog, self).__init__(*args, **kwargs)

        self.p = wx.Panel(self)
        self._username = wx.TextCtrl(self.p)
        self._passwd = wx.TextCtrl(self.p)
        sizer = wx.FlexGridSizer(2, 2, 8, 8)
        sizer.Add(wx.StaticText(self.p, label="Username:"),
                  0, wx.ALIGN_CENTER_VERTICAL)
        sizer.Add(self._username, 0, wx.EXPAND)
        sizer.Add(wx.StaticText(self.p, label="Password:"),
                  0, wx.ALIGN_CENTER_VERTICAL)
        sizer.Add(self._passwd, 0, wx.EXPAND)

        msizer = wx.BoxSizer(wx.VERTICAL)
        msizer.Add(sizer, 1, wx.EXPAND|wx.ALL, 20)
        btnszr = wx.StdDialogButtonSizer()
        button = wx.Button(self.p, wx.ID_OK)
        button.SetDefault()
        btnszr.AddButton(button)
        msizer.Add(btnszr, 0, wx.ALIGN_CENTER|wx.ALL, 12)
        btnszr.Realize()
        self.p.SetSizer(msizer)

        vsizer = wx.BoxSizer(wx.VERTICAL)
        vsizer.Add(self.p, 1, wx.EXPAND)
        self.SetSizer(vsizer)
        self.SetInitialSize()

    def GetUser(self):
        return self._username.GetValue()

    def GetPasswd(self):
        return self._passwd.GetValue()


class MyApp(wx.App):
    def OnInit(self):
        self.frm = wx.Frame(None, -1, 'Main Window')

        login = LoginDialog(None)
        loggedIn = False
        while not loggedIn:
            dlg = login.ShowModal()
            if dlg == wx.ID_OK:
                uname = login.GetUser()
                passwd = login.GetPasswd()
                if (uname, passwd) == ("hoge", "hoge"):
                    loggedIn = True

        self.frm.Show()
        return True

app = MyApp(False)
app.MainLoop()
* Sun 18 Aug 2013 05:41:16 AM JST
from Tkinter import *

def getpwd():
    password = ''
    root = Tk()
    pwdbox = Entry(root, show = '*')
    def onpwdentry(evt):
         password = pwdbox.get()
         root.destroy()
    def onokclick():
         password = pwdbox.get()
         root.destroy()
    Label(root, text = 'Password').pack(side = 'top')

    pwdbox.pack(side = 'top')
    pwdbox.bind('<Return>', onpwdentry)
    Button(root, command=onokclick, text = 'OK').pack(side = 'top')

    root.mainloop()
    return password
* Sun 18 Aug 2013 05:48:21 AM JST
return 
* Sun 18 Aug 2013 05:53:29 AM JST
return password
* Sun 18 Aug 2013 05:53:50 AM JST

* Sun 18 Aug 2013 05:53:50 AM JST

* Sun 18 Aug 2013 05:53:50 AM JST
         return password

* Sun 18 Aug 2013 05:53:51 AM JST

* Sun 18 Aug 2013 05:53:51 AM JST

* Sun 18 Aug 2013 05:53:51 AM JST
         return password

* Sun 18 Aug 2013 06:00:48 AM JST

* Sun 18 Aug 2013 06:00:48 AM JST

* Sun 18 Aug 2013 06:00:48 AM JST
pwd = getpwd()

* Sun 18 Aug 2013 06:01:49 AM JST
    global password
    password = ''

* Sun 18 Aug 2013 06:02:00 AM JST

* Sun 18 Aug 2013 06:02:00 AM JST

* Sun 18 Aug 2013 06:02:00 AM JST
password = ''

* Sun 18 Aug 2013 06:02:35 AM JST

* Sun 18 Aug 2013 06:02:35 AM JST

* Sun 18 Aug 2013 06:02:35 AM JST
global password

* Sun 18 Aug 2013 06:03:56 AM JST
import tkinter as tk

class MyDialog:
    def __init__(self, parent):
        top = self.top = tk.Toplevel(parent)
        self.myLabel = tk.Label(top, text='Enter your username below')
        self.myLabel.pack()

        self.myEntryBox = tk.Entry(top)
        self.myEntryBox.pack()

        self.mySubmitButton = tk.Button(top, text='Submit', command=self.send)
        self.mySubmitButton.pack()

    def send(self):
        global username
        username = self.myEntryBox.get()
        self.top.destroy()

def onClick():
    inputDialog = MyDialog(root)
    root.wait_window(inputDialog.top)
    print('Username: ', username)

username = 'Empty'
root = tk.Tk()
mainLabel = tk.Label(root, text='Example for pop up input box')
mainLabel.pack()

mainButton = tk.Button(root, text='Click me', command=onClick)
mainButton.pack()

root.mainloop()
* Sun 18 Aug 2013 06:07:01 AM JST
, show='*'
* Sun 18 Aug 2013 06:08:03 AM JST
me
* Sun 18 Aug 2013 06:08:04 AM JST
Click me
* Sun 18 Aug 2013 06:09:20 AM JST

* Sun 18 Aug 2013 06:09:20 AM JST

* Sun 18 Aug 2013 06:09:20 AM JST
    global password

* Sun 18 Aug 2013 06:09:41 AM JST

* Sun 18 Aug 2013 06:09:41 AM JST

* Sun 18 Aug 2013 06:09:42 AM JST
print(password)

* Sun 18 Aug 2013 06:16:27 AM JST
False
* Sun 18 Aug 2013 06:16:54 AM JST
# None is not checked yet  
* Sun 18 Aug 2013 06:24:58 AM JST

* Sun 18 Aug 2013 06:24:58 AM JST

* Sun 18 Aug 2013 06:24:58 AM JST
import cgitb as _cgitb

* Sun 18 Aug 2013 06:26:36 AM JST
hastunnel
* Sun 18 Aug 2013 06:26:38 AM JST
hastunnel
* Sun 18 Aug 2013 06:26:41 AM JST
tunneling
* Sun 18 Aug 2013 06:26:47 AM JST
hastunnel
* Sun 18 Aug 2013 06:27:32 AM JST
'127.0.0.1:12316' in netstat.stdout.read()
* Sun 18 Aug 2013 06:29:43 AM JST

* Sun 18 Aug 2013 06:29:43 AM JST

* Sun 18 Aug 2013 06:29:43 AM JST
            return True

* Sun 18 Aug 2013 06:29:43 AM JST
            return True

* Sun 18 Aug 2013 06:29:43 AM JST
            return True
        return False

* Sun 18 Aug 2013 06:29:45 AM JST
if 
* Sun 18 Aug 2013 06:30:55 AM JST
import 
* Sun 18 Aug 2013 06:31:08 AM JST

* Sun 18 Aug 2013 06:31:08 AM JST

* Sun 18 Aug 2013 06:31:09 AM JST
tunnel

* Sun 18 Aug 2013 06:36:50 AM JST
self.gettunnel()
* Sun 18 Aug 2013 06:38:34 AM JST
object)
* Sun 18 Aug 2013 06:39:26 AM JST
e
* Sun 18 Aug 2013 06:39:27 AM JST
Exception, e
* Sun 18 Aug 2013 06:39:34 AM JST
        _subp.Popen(cmd)
        _sleep(5)
        return self.hastunnel()

* Sun 18 Aug 2013 06:39:39 AM JST

* Sun 18 Aug 2013 06:39:39 AM JST

* Sun 18 Aug 2013 06:39:39 AM JST
            pass

* Sun 18 Aug 2013 06:39:41 AM JST
e
* Sun 18 Aug 2013 06:39:42 AM JST
pass e
* Sun 18 Aug 2013 06:42:36 AM JST
    
* Sun 18 Aug 2013 06:42:45 AM JST
"""SSH Tunnel Object."""
* Sun 18 Aug 2013 06:44:50 AM JST
                if self._verbose:
                    print(PRINTFORMAT % ('PortForwarder', 'Launched!!'))

* Sun 18 Aug 2013 06:45:09 AM JST
self._verbose
* Sun 18 Aug 2013 06:45:11 AM JST

* Sun 18 Aug 2013 06:45:11 AM JST

* Sun 18 Aug 2013 06:45:11 AM JST
                if self._verbose:

* Sun 18 Aug 2013 06:45:31 AM JST
"Can't create tunneling."
* Sun 18 Aug 2013 06:58:16 AM JST

* Sun 18 Aug 2013 06:58:16 AM JST

* Sun 18 Aug 2013 06:58:17 AM JST
if __name__ == '__main__':

* Sun 18 Aug 2013 06:58:17 AM JST
if __name__ == '__main__':

* Sun 18 Aug 2013 06:58:17 AM JST
if __name__ == '__main__':
    test()

* Sun 18 Aug 2013 07:05:12 AM JST
if :
* Sun 18 Aug 2013 07:08:05 AM JST
"Please enter yes/no[y/n]."
* Sun 18 Aug 2013 07:08:09 AM JST
default_text = 
* Sun 18 Aug 2013 07:09:29 AM JST
self.gettunnel()
* Sun 18 Aug 2013 07:10:55 AM JST
TunnelError
* Sun 18 Aug 2013 07:11:08 AM JST

* Sun 18 Aug 2013 07:11:08 AM JST

* Sun 18 Aug 2013 07:11:08 AM JST
                        print("")

* Sun 18 Aug 2013 07:11:11 AM JST
print("Can't create tunneling.")
* Sun 18 Aug 2013 07:14:58 AM JST

* Sun 18 Aug 2013 07:14:58 AM JST

* Sun 18 Aug 2013 07:14:58 AM JST
    def __init__(self, ):

* Sun 18 Aug 2013 07:14:58 AM JST
    def __init__(self, ):

* Sun 18 Aug 2013 07:14:58 AM JST
    def __init__(self, ):
        """

* Sun 18 Aug 2013 07:14:58 AM JST
    def __init__(self, ):
        """

* Sun 18 Aug 2013 07:14:58 AM JST
    def __init__(self, ):
        """
        """

* Sun 18 Aug 2013 07:15:00 AM JST

* Sun 18 Aug 2013 07:15:00 AM JST

* Sun 18 Aug 2013 07:15:00 AM JST
    """

* Sun 18 Aug 2013 07:15:00 AM JST
    """

* Sun 18 Aug 2013 07:15:00 AM JST
    """
    """

* Sun 18 Aug 2013 07:16:18 AM JST

* Sun 18 Aug 2013 07:16:19 AM JST

* Sun 18 Aug 2013 07:16:19 AM JST
            _sys.exit(1)

* Sun 18 Aug 2013 07:23:27 AM JST

* Sun 18 Aug 2013 07:23:27 AM JST

* Sun 18 Aug 2013 07:23:27 AM JST
from tunnel import TunnelError

* Sun 18 Aug 2013 07:24:29 AM JST
class Tunnelerror(Exception):
    pass

* Sun 18 Aug 2013 07:24:52 AM JST

* Sun 18 Aug 2013 07:24:52 AM JST

* Sun 18 Aug 2013 07:24:52 AM JST
from tunnel import TunnelError

* Sun 18 Aug 2013 07:25:08 AM JST
__revision__ = "$Revision$"
__version__ = "0.1.0"

* Sun 18 Aug 2013 07:28:35 AM JST

* Sun 18 Aug 2013 07:28:35 AM JST

* Sun 18 Aug 2013 07:28:35 AM JST
        self.tunneling = None

* Sun 18 Aug 2013 07:28:44 AM JST
Tunneling,
* Sun 18 Aug 2013 07:29:26 AM JST

* Sun 18 Aug 2013 07:29:26 AM JST

* Sun 18 Aug 2013 07:29:26 AM JST
    def __init__(self):

* Sun 18 Aug 2013 07:29:26 AM JST
    def __init__(self):

* Sun 18 Aug 2013 07:29:26 AM JST
    def __init__(self):
        """

* Sun 18 Aug 2013 07:29:27 AM JST
    def __init__(self):
        """

* Sun 18 Aug 2013 07:29:27 AM JST
    def __init__(self):
        """
        """

* Sun 18 Aug 2013 07:29:30 AM JST
self.
* Sun 18 Aug 2013 07:29:43 AM JST

* Sun 18 Aug 2013 07:29:43 AM JST

* Sun 18 Aug 2013 07:29:43 AM JST
    def __init__(self):

* Sun 18 Aug 2013 07:29:43 AM JST
    def __init__(self):

* Sun 18 Aug 2013 07:29:43 AM JST
    def __init__(self):
        """

* Sun 18 Aug 2013 07:29:43 AM JST
    def __init__(self):
        """

* Sun 18 Aug 2013 07:29:44 AM JST
    def __init__(self):
        """
        """

* Sun 18 Aug 2013 07:29:46 AM JST
self.
* Sun 18 Aug 2013 07:31:08 AM JST
Verbose,
* Sun 18 Aug 2013 07:31:59 AM JST
        if self._verbose:
            print("\n***** PortForward")

* Sun 18 Aug 2013 07:32:02 AM JST
        if self._verbose:
            print("\n***** PortForward")

* Sun 18 Aug 2013 07:51:39 AM JST

* Sun 18 Aug 2013 07:51:39 AM JST

* Sun 18 Aug 2013 07:51:40 AM JST
    def __init__(self, ):

* Sun 18 Aug 2013 07:51:40 AM JST
    def __init__(self, ):

* Sun 18 Aug 2013 07:51:40 AM JST
    def __init__(self, ):
        """

* Sun 18 Aug 2013 07:51:40 AM JST
    def __init__(self, ):
        """

* Sun 18 Aug 2013 07:51:40 AM JST
    def __init__(self, ):
        """
        """

* Sun 18 Aug 2013 07:51:48 AM JST
    def open_port(self):
        """Send knocking packet for open port on rook."""
        if self._verbose:
            print(PRINTFORMAT % ('Open port', self._host))
        knock(self._host, self._portlist['open'], verbose=self._verbose)

    def close_port(self):
        """Send knocking packet for close port on rook."""
        if self._verbose:
            print(PRINTFORMAT % ('Close port', self._host))
        knock(self._host, self._portlist['close'], verbose=self._verbose)

    def _isopen_port(self):
        """Check open or close port on rook."""
        if self._verbose:
            print('\n***** Scanning Ports')
            print(PRINTFORMAT % ('Scan Host', self._host))
        result = tcpscan(self._host, self._listen_port)
        if self._verbose and result:
            if result:
                print(PRINTFORMAT %
                      ('Port: ' + str(self._listen_port), 'OPENED!!'))
            else:
                print(PRINTFORMAT %
                      ('Port: ' + str(self._listen_port), 'Did not open.'))
        return result


* Sun 18 Aug 2013 07:54:36 AM JST
    
* Sun 18 Aug 2013 07:54:56 AM JST
class RookPort(object):
    """
    """
    def open_port(self):
        """Send knocking packet for open port on rook."""
        if self._verbose:
            print(PRINTFORMAT % ('Open port', self._host))
        knock(self._host, self._portlist['open'], verbose=self._verbose)

    def close_port(self):
        """Send knocking packet for close port on rook."""
        if self._verbose:
            print(PRINTFORMAT % ('Close port', self._host))
        knock(self._host, self._portlist['close'], verbose=self._verbose)

    def _isopen_port(self):
        """Check open or close port on rook."""
        if self._verbose:
            print('\n***** Scanning Ports')
            print(PRINTFORMAT % ('Scan Host', self._host))
        result = tcpscan(self._host, self._listen_port)
        if self._verbose and result:
            if result:
                print(PRINTFORMAT %
                      ('Port: ' + str(self._listen_port), 'OPENED!!'))
            else:
                print(PRINTFORMAT %
                      ('Port: ' + str(self._listen_port), 'Did not open.'))
        return result

* Sun 18 Aug 2013 07:58:23 AM JST
def knock(host, portlist, verbose=False):
    """Send sequential packet.

    Arguments:

    - `host`: target host
    - `portlist`: tuple of port number list
    """
    for port in portlist:
        tcpscan(host, port)
        if verbose:
            _os.write(1, '{0:5}, '.format(port))
    if verbose:
        print('\n')

* Sun 18 Aug 2013 07:58:48 AM JST
from portscan import tcpscan
* Sun 18 Aug 2013 07:58:50 AM JST
from portscan import tcpscan
* Sun 18 Aug 2013 07:59:27 AM JST
def knock(host, portlist, verbose=False):
    """Send sequential packet.

    Arguments:

    - `host`: target host
    - `portlist`: tuple of port number list
    """
    for port in portlist:
        tcpscan(host, port)
        if verbose:
            _os.write(1, '{0:5}, '.format(port))
    if verbose:
        print('\n')


* Sun 18 Aug 2013 07:59:37 AM JST

* Sun 18 Aug 2013 07:59:37 AM JST

* Sun 18 Aug 2013 07:59:37 AM JST
import os as _os

* Sun 18 Aug 2013 09:32:13 AM JST
object
* Sun 18 Aug 2013 09:34:37 AM JST
open_port = 
* Sun 18 Aug 2013 09:36:35 AM JST
rook['open_port']
* Sun 18 Aug 2013 09:36:45 AM JST
rook['close_port']
* Sun 18 Aug 2013 09:37:30 AM JST
super(Rook, self).__init__(verbose=verbose)
* Sun 18 Aug 2013 09:38:54 AM JST
open_port
* Sun 18 Aug 2013 09:43:46 AM JST

* Sun 18 Aug 2013 09:43:46 AM JST

* Sun 18 Aug 2013 09:43:46 AM JST
        # None is not checked yet, will set True/False.

* Sun 18 Aug 2013 09:44:41 AM JST
verbose
* Sun 18 Aug 2013 09:44:42 AM JST
verbose=verbose
* Sun 18 Aug 2013 09:48:11 AM JST
object
* Sun 18 Aug 2013 09:49:01 AM JST
StandardError
* Sun 18 Aug 2013 09:54:12 AM JST
RookPort,
* Sun 18 Aug 2013 10:00:47 AM JST
    open_list = rook['open_port']
    close_list = rook['close_port']

* Sun 18 Aug 2013 10:07:18 AM JST
        if self._verbose:
            print('\n***** Scanning Ports')
            print(PRINTFORMAT % ('Scan Host', self.host))

* Sun 18 Aug 2013 10:07:57 AM JST
        if self._verbose:
            print('\n***** Scanning Ports')
            print(PRINTFORMAT % ('Scan Host', self.host))

* Sun 18 Aug 2013 10:08:36 AM JST

* Sun 18 Aug 2013 10:08:36 AM JST

* Sun 18 Aug 2013 10:08:36 AM JST
            if self._verbose:

* Sun 18 Aug 2013 10:08:36 AM JST
            if self._verbose:

* Sun 18 Aug 2013 10:08:36 AM JST
            if self._verbose:
                print('\n***** Scanning Ports')

* Sun 18 Aug 2013 10:08:36 AM JST
            if self._verbose:
                print('\n***** Scanning Ports')

* Sun 18 Aug 2013 10:08:36 AM JST
            if self._verbose:
                print('\n***** Scanning Ports')
                print(PRINTFORMAT % ('Scan Host', self.host))

* Sun 18 Aug 2013 10:09:09 AM JST
                print(PRINTFORMAT %
                      ('Port: ' + str(self.listen_port), 'OPENED!!'))

* Sun 18 Aug 2013 10:09:57 AM JST
            
* Sun 18 Aug 2013 10:10:46 AM JST
result = 
* Sun 18 Aug 2013 10:10:48 AM JST

* Sun 18 Aug 2013 10:10:48 AM JST

* Sun 18 Aug 2013 10:10:48 AM JST
        return result

* Sun 18 Aug 2013 04:28:29 PM JST
'/usr/sbin/wol -i 192.168.1.255 %s' % mac
* Sun 18 Aug 2013 04:28:33 PM JST
cmd = 
* Sun 18 Aug 2013 04:28:33 PM JST
        cmd = 
* Sun 18 Aug 2013 04:32:47 PM JST
'\r' + PRINTFORMAT % (ip, still_down)
* Sun 18 Aug 2013 04:32:50 PM JST
msg = 
* Sun 18 Aug 2013 11:48:54 PM JST
object
* Sun 18 Aug 2013 11:49:56 PM JST
self.relation = 
* Mon 19 Aug 2013 12:02:49 AM JST

* Mon 19 Aug 2013 12:02:49 AM JST

* Mon 19 Aug 2013 12:02:49 AM JST
        self.script = None

* Mon 19 Aug 2013 12:28:22 AM JST
pass
* Mon 19 Aug 2013 12:28:55 AM JST
super(Rook, self).__init__(verbose=verbose)
* Mon 19 Aug 2013 12:29:13 AM JST
Rook
* Mon 19 Aug 2013 12:30:14 AM JST
    def cmd(self, cmd):
        """Send command to rook(router).

        Arguments:

        - `cmd`: command line.
        """
        if not self.relation:
            self.connect()
        return self.relation.exec_command(cmd)

* Mon 19 Aug 2013 12:31:30 AM JST
    def isactive_machine(self, ip):
        """Check active internal network machines.

        Arguments:

        - `ip`: internal ip address
        """
        cmd = 'ping -w 1 -c 1 ' + ip + ' | grep "bytes from"'
        stdin, stdout, stderr = self.cmd(cmd)
        status = stdout.channel.recv_exit_status()
        if 0 == status:
            # WARNING: (Atami) [2013/05/31]
            # if self._verbose:
                # print(PRINTFORMAT % (ip , 'ACTIVE'))
            return True
        # if self._verbose:
            # print(PRINTFORMAT % (ip , 'DOWN'))
        return False


* Mon 19 Aug 2013 12:32:03 AM JST
    def wol(self, mac, ip, time=WAIT, pingmax=30):
        """Send Wake on Lan packet to internal network machines.

        Arguments:

        - `mac`: Mac address of target machines.
        """
        from sleep_progress import sleep_progress
        self.cmd('/usr/sbin/wol -i 192.168.1.255 %s' % mac)
        if self._verbose:
            sleep_progress(
                time, PRINTFORMAT % ('Waiting Wakeup', '%-2d seconds'))
        else:
            _sleep(time)
        # confirm wake up
        for i in range(1, pingmax + 1):
            if self._verbose:
                still_down = 'Still DOWN ping {0}/{1}'.format(i, pingmax)
                _sys.stdout.write('\r' + PRINTFORMAT % (ip, still_down))
                _sys.stdout.flush()
            if self.isactive_machine(ip):
                if self._verbose:
                    print('\n' + PRINTFORMAT % (ip, 'UP!!\n'))
                _sleep(10) # wait until launch sshd
                break
        if pingmax <= i:
            print('\n\n') # flush stdout
            raise PingMax("Reached pinging max %d count." % i)

* Mon 19 Aug 2013 12:40:18 AM JST
    def connect(self, force=True):
        """Connect rook with ssh."""
        if not self._paved:
            self.pave()
        if force:
            if self.relation:
                self.close()
            self.relation = None
        if not self.relation:
            self.relation = paramiko.SSHClient()
            self.relation.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            if self._verbose:
                print('\n***** SSH login %s(%s)' %
                (self._host, _socket.gethostbyname(self._host)))
            self.relation.connect(self._host, self._listen_port, self._user)
        if self.relation:
            self.script = RookScript(self.relation, self._verbose)
            self.cmd = self.script.cmd



* Mon 19 Aug 2013 12:40:49 AM JST
self.script = RookScript(self.relation, self._verbose)
* Mon 19 Aug 2013 12:41:23 AM JST
relation, 
* Mon 19 Aug 2013 12:41:23 AM JST
self.relation, 
* Mon 19 Aug 2013 12:41:31 AM JST
# script for on the Rook
* Mon 19 Aug 2013 12:41:33 AM JST

* Mon 19 Aug 2013 12:41:33 AM JST

* Mon 19 Aug 2013 12:41:34 AM JST
        self.script = None 

* Mon 19 Aug 2013 12:41:35 AM JST
        self.script = None 

* Mon 19 Aug 2013 12:41:35 AM JST
        self.script = None 
        self.cmd = None

* Mon 19 Aug 2013 12:41:52 AM JST
relation
* Mon 19 Aug 2013 12:41:57 AM JST
relation, 
* Mon 19 Aug 2013 12:45:04 AM JST
object
* Mon 19 Aug 2013 12:45:19 AM JST
agentUtils, Tunneling, Verbose
* Mon 19 Aug 2013 12:45:32 AM JST
super(RookScript, self).__init__(verbose=verbose)
* Mon 19 Aug 2013 12:46:00 AM JST
    _listen_port = rook['port']
    _open_ports = rook['open_port']
    _close_ports = rook['close_port']

* Mon 19 Aug 2013 12:46:40 AM JST
        self._paved = False
* Mon 19 Aug 2013 12:47:02 AM JST
    def pave(self):
        """Pave ssh environment.

        [1] open port rook.
        [2] add ssh key ageant.
        [3] run portforwarding.

        Arguments:

        - `verbose`:
        """
        # Check port
        if not self.port.isopen():
            if self._verbose:
                print('\n***** Scanning Ports')
                print(PRINTFORMAT % ('Scan Host', self._host))
            self.port.open()
        if not self.port.isopen():
            raise PortError('Could not open port.')
        else:
            print(PRINTFORMAT % ('Port: ' + str(self._listen_port), 'OPENED!!'))

        # WARNING: (Atami) [2013/05/31]
        # if self._verbose:
        #     print(PRINTFORMAT % ('Check port ' + str(self._listen_port), 'Opened!!'))
        # pavessh.pave(self._kagi)
        # set to ssh-agent
        for i in range(3):
            if self.haskeyring():
                if self._verbose:
                    print(PRINTFORMAT % ('Check has keys', 'Has keys.'))
                break
            else:
                if self._verbose and 0 == i:
                    print(PRINTFORMAT % ('Check has keys', 'Not has keys!!'))
                try:
                    add_keys(self._kagi)
                except:
                    raise SSHKeyError
        if not self.haskeyring():
            raise SSHKeyError()
        # tunneling
        if not self.tunneling or not self.hastunnel():
            if self._verbose:
                print("\n***** PortForward")
            try:
                if self.gettunnel() and self._verbose:
                    print(PRINTFORMAT % ('PortForwarder', 'Launched!!'))
            except TunnelError:
                print("Can't create tunneling.")
                if yesno("Retry create tunneling?"):
                    if not self.gettunnel():
                        print("Can't create tunneling.")
                        raise TunnelError()
                else:
                    raise TunnelError()
        self._paved = True

* Mon 19 Aug 2013 12:49:26 AM JST
Verbose
* Mon 19 Aug 2013 12:50:30 AM JST

* Mon 19 Aug 2013 12:50:33 AM JST
Tunneling, 
* Mon 19 Aug 2013 12:50:34 AM JST
agentUtils, Tunneling, 
* Mon 19 Aug 2013 12:51:51 AM JST
Verbose
* Mon 19 Aug 2013 12:52:03 AM JST
False
* Mon 19 Aug 2013 12:52:03 AM JST
verbose=False
* Mon 19 Aug 2013 12:52:21 AM JST
False
* Mon 19 Aug 2013 12:52:21 AM JST
verbose=False
* Mon 19 Aug 2013 12:53:19 AM JST
        
* Mon 19 Aug 2013 12:53:23 AM JST
_verbose
* Mon 19 Aug 2013 12:53:24 AM JST
self._verbose
* Mon 19 Aug 2013 12:56:14 AM JST
verbose
* Mon 19 Aug 2013 12:56:14 AM JST
verbose=verbose
* Mon 19 Aug 2013 12:57:58 AM JST

* Mon 19 Aug 2013 12:57:58 AM JST

* Mon 19 Aug 2013 12:57:58 AM JST
    _listen_port = rook['port']

* Mon 19 Aug 2013 12:57:58 AM JST
    _listen_port = rook['port']

* Mon 19 Aug 2013 12:57:58 AM JST
    _listen_port = rook['port']
    _open_ports = rook['open_port']

* Mon 19 Aug 2013 12:57:58 AM JST
    _listen_port = rook['port']
    _open_ports = rook['open_port']

* Mon 19 Aug 2013 12:57:58 AM JST
    _listen_port = rook['port']
    _open_ports = rook['open_port']
    _close_ports = rook['close_port']

* Mon 19 Aug 2013 12:59:30 AM JST
# self._paved = False
* Mon 19 Aug 2013 01:00:05 AM JST
_paved = False
* Mon 19 Aug 2013 01:09:03 AM JST
class RookPave(agentUtils, Tunneling, Verbose):
    """
    """
    _paved = False

    def __init__(self, verbose=False):
        """
        """
        super(RookPave, self).__init__(verbose=verbose)
        # self._paved = False

    def pave(self):
        """Pave ssh environment.

        [1] open port rook.
        [2] add ssh key ageant.
        [3] run portforwarding.

        Arguments:

        - `verbose`:
        """
        # Check port
        if not self.port.isopen():
            if self._verbose:
                print('\n***** Scanning Ports')
                print(PRINTFORMAT % ('Scan Host', self._host))
            self.port.open()
        if not self.port.isopen():
            raise PortError('Could not open port.')
        else:
            print(PRINTFORMAT % ('Port: ' + str(self._listen_port), 'OPENED!!'))

        # WARNING: (Atami) [2013/05/31]
        # if self._verbose:
        #     print(PRINTFORMAT % ('Check port ' + str(self._listen_port), 'Opened!!'))
        # pavessh.pave(self._kagi)
        # set to ssh-agent
        for i in range(3):
            if self.haskeyring():
                if self._verbose:
                    print(PRINTFORMAT % ('Check has keys', 'Has keys.'))
                break
            else:
                if self._verbose and 0 == i:
                    print(PRINTFORMAT % ('Check has keys', 'Not has keys!!'))
                try:
                    add_keys(self._kagi)
                except:
                    raise SSHKeyError
        if not self.haskeyring():
            raise SSHKeyError()
        # tunneling
        if not self.tunneling or not self.hastunnel():
            if self._verbose:
                print("\n***** PortForward")
            try:
                if self.gettunnel() and self._verbose:
                    print(PRINTFORMAT % ('PortForwarder', 'Launched!!'))
            except TunnelError:
                print("Can't create tunneling.")
                if yesno("Retry create tunneling?"):
                    if not self.gettunnel():
                        print("Can't create tunneling.")
                        raise TunnelError()
                else:
                    raise TunnelError()
        self._paved = True


* Mon 19 Aug 2013 01:10:57 AM JST
        self.port = RookPort(self._host, self._listen_port,
                             self._open_ports, self._close_ports, self._verbose)

* Mon 19 Aug 2013 01:11:06 AM JST

* Mon 19 Aug 2013 01:11:06 AM JST

* Mon 19 Aug 2013 01:11:06 AM JST
        self.port = 

* Mon 19 Aug 2013 01:11:47 AM JST
    _listen_port = rook['port']
    _open_ports = rook['open_port']
    _close_ports = rook['close_port']

* Mon 19 Aug 2013 01:11:55 AM JST

* Mon 19 Aug 2013 01:11:55 AM JST

* Mon 19 Aug 2013 01:11:55 AM JST
    _paved = False

* Mon 19 Aug 2013 01:12:07 AM JST
    _host = rook['host']
* Mon 19 Aug 2013 01:12:57 AM JST
class RookScript(RookPave):
    """
    """

    def __init__(self, verbose=False):
        """
        """
        super(RookScript, self).__init__(verbose=verbose)
        self.relation = None

    def connect(self, force=True):
        """Connect rook with ssh."""
        if not self._paved:
            self.pave()
        if force:
            if self.relation:
                self.close()
            self.relation = None
        if not self.relation:
            self.relation = paramiko.SSHClient()
            self.relation.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            if self._verbose:
                print('\n***** SSH login %s(%s)' %
                (self._host, _socket.gethostbyname(self._host)))
            self.relation.connect(self._host, self._listen_port, self._user)

    def cmd(self, cmd):
        """Send command to rook(router).

        Arguments:

        - `cmd`: command line.
        """
        if not self.relation:
            self.connect()
        return self.relation.exec_command(cmd)

    def isactive_machine(self, ip):
        """Check active internal network machines.

        Arguments:

        - `ip`: internal ip address
        """
        cmd = 'ping -w 1 -c 1 ' + ip + ' | grep "bytes from"'
        stdin, stdout, stderr = self.cmd(cmd)
        status = stdout.channel.recv_exit_status()
        if 0 == status:
            # WARNING: (Atami) [2013/05/31]
            # if self._verbose:
                # print(PRINTFORMAT % (ip , 'ACTIVE'))
            return True
        # if self._verbose:
            # print(PRINTFORMAT % (ip , 'DOWN'))
        return False

    def wol(self, mac, ip, time=WAIT, pingmax=30):
        """Send Wake on Lan packet to internal network machines.

        Arguments:

        - `mac`: Mac address of target machines.
        """
        from sleep_progress import sleep_progress
        self.cmd('/usr/sbin/wol -i 192.168.1.255 %s' % mac)
        if self._verbose:
            sleep_progress(
                time, PRINTFORMAT % ('Waiting Wakeup', '%-2d seconds'))
        else:
            _sleep(time)
        # confirm wake up
        for i in range(1, pingmax + 1):
            if self._verbose:
                still_down = 'Still DOWN ping {0}/{1}'.format(i, pingmax)
                _sys.stdout.write('\r' + PRINTFORMAT % (ip, still_down))
                _sys.stdout.flush()
            if self.isactive_machine(ip):
                if self._verbose:
                    print('\n' + PRINTFORMAT % (ip, 'UP!!\n'))
                _sleep(10) # wait until launch sshd
                break
        if pingmax <= i:
            print('\n\n') # flush stdout
            raise PingMax("Reached pinging max %d count." % i)

* Mon 19 Aug 2013 01:13:18 AM JST
Verbose
* Mon 19 Aug 2013 01:13:47 AM JST
    _user = rook['user']
    _kagi = kagi
    _kagiMD5 = kagiMD5

* Mon 19 Aug 2013 01:14:27 AM JST
    _kagi = kagi
    _kagiMD5 = kagiMD5

* Mon 19 Aug 2013 01:14:46 AM JST

* Mon 19 Aug 2013 01:14:46 AM JST

* Mon 19 Aug 2013 01:14:46 AM JST
    _kagi = kagi

* Mon 19 Aug 2013 01:14:46 AM JST
    _kagi = kagi

* Mon 19 Aug 2013 01:14:46 AM JST
    _kagi = kagi
    _kagiMD5 = kagiMD5

* Mon 19 Aug 2013 01:16:45 AM JST
self.script = RookScript(self._verbose) # script for on the Rook
* Mon 19 Aug 2013 02:56:46 AM JST
    def pave(self):
        """Pave ssh environment.

        [1] open port rook.
        [2] add ssh key ageant.
        [3] run portforwarding.

        Arguments:

        - `verbose`:
        """
        # Check port
        if not self.port.isopen():
            if self._verbose:
                print('\n***** Scanning Ports')
                print(PRINTFORMAT % ('Scan Host', self._host))
            self.port.open()
        if not self.port.isopen():
            raise PortError('Could not open port.')
        else:
            print(PRINTFORMAT % ('Port: ' + str(self._listen_port), 'OPENED!!'))

        # WARNING: (Atami) [2013/05/31]
        # if self._verbose:
        #     print(PRINTFORMAT % ('Check port ' + str(self._listen_port), 'Opened!!'))
        # pavessh.pave(self._kagi)
        # set to ssh-agent
        for i in range(3):
            if self.haskeyring():
                if self._verbose:
                    print(PRINTFORMAT % ('Check has keys', 'Has keys.'))
                break
            else:
                if self._verbose and 0 == i:
                    print(PRINTFORMAT % ('Check has keys', 'Not has keys!!'))
                try:
                    add_keys(self._kagi)
                except:
                    raise SSHKeyError
        if not self.haskeyring():
            raise SSHKeyError()
        # tunneling
        if not self.tunneling or not self.hastunnel():
            if self._verbose:
                print("\n***** PortForward")
            try:
                if self.gettunnel() and self._verbose:
                    print(PRINTFORMAT % ('PortForwarder', 'Launched!!'))
            except TunnelError:
                print("Can't create tunneling.")
                if yesno("Retry create tunneling?"):
                    if not self.gettunnel():
                        print("Can't create tunneling.")
                        raise TunnelError()
                else:
                    raise TunnelError()
        self._paved = True

* Mon 19 Aug 2013 02:58:09 AM JST
RookPave
* Mon 19 Aug 2013 02:58:20 AM JST

* Mon 19 Aug 2013 02:58:20 AM JST

* Mon 19 Aug 2013 02:58:20 AM JST
        sel

* Mon 19 Aug 2013 02:58:27 AM JST

* Mon 19 Aug 2013 02:58:27 AM JST

* Mon 19 Aug 2013 02:58:28 AM JST
        # self.script = RookScript(self._verbose) # script for on the Rook

* Mon 19 Aug 2013 03:04:08 AM JST
class Hello(object):
    """
    """
    super(Hello, self).greeding()

* Mon 19 Aug 2013 03:39:26 AM JST
agentUtils, Tunneling, Verbose
* Mon 19 Aug 2013 03:52:29 AM JST
verbose=False,
* Mon 19 Aug 2013 03:57:52 AM JST
Rook
* Mon 19 Aug 2013 03:57:58 AM JST
Rook
* Mon 19 Aug 2013 04:06:12 AM JST
self._pre
* Mon 19 Aug 2013 04:10:34 AM JST
                 
* Mon 19 Aug 2013 04:13:33 AM JST
        # Check port
        # if not self.port.isopen():
        #     if self._verbose:
        #         print('\n***** Scanning Ports')
        #         print(PRINTFORMAT % ('Scan Host', self._host))
        #     self.port.open()
        # if not self.port.isopen():
        #     raise PortError('Could not open port.')
        # else:
        #     print(PRINTFORMAT % ('Port: ' + str(self._listen_port), 'OPENED!!')
* Mon 19 Aug 2013 07:29:11 AM JST
SSH
* Mon 19 Aug 2013 07:30:49 AM JST
Verbose
* Mon 19 Aug 2013 07:30:58 AM JST

* Mon 19 Aug 2013 07:30:58 AM JST

* Mon 19 Aug 2013 07:30:58 AM JST
        super(SSHPave, self).__init__(verbose=verbose)

* Mon 19 Aug 2013 07:31:00 AM JST
False
* Mon 19 Aug 2013 07:31:01 AM JST
verbose
* Mon 19 Aug 2013 07:31:03 AM JST
None
* Mon 19 Aug 2013 07:31:03 AM JST
postpave=None
* Mon 19 Aug 2013 07:31:04 AM JST
None, postpave=None
* Mon 19 Aug 2013 07:31:04 AM JST
prepave=None, postpave=None
* Mon 19 Aug 2013 07:31:30 AM JST

* Mon 19 Aug 2013 07:31:30 AM JST

* Mon 19 Aug 2013 07:31:30 AM JST
        self._paved = False

* Mon 19 Aug 2013 07:33:54 AM JST

* Mon 19 Aug 2013 07:33:54 AM JST

* Mon 19 Aug 2013 07:33:54 AM JST
        if self._postpave:

* Mon 19 Aug 2013 07:33:54 AM JST
        if self._postpave:

* Mon 19 Aug 2013 07:33:54 AM JST
        if self._postpave:
            self._postpave()

* Mon 19 Aug 2013 07:33:54 AM JST
        if self._postpave:
            self._postpave()

* Mon 19 Aug 2013 07:33:54 AM JST
        if self._postpave:
            self._postpave()
        self._paved = True

* Mon 19 Aug 2013 07:33:56 AM JST

* Mon 19 Aug 2013 07:33:56 AM JST

* Mon 19 Aug 2013 07:33:56 AM JST
        # post pave

* Mon 19 Aug 2013 07:37:28 AM JST
        if not self.port.isopen():
            if self._verbose:
                print('\n***** Scanning Ports')
                print(PRINTFORMAT % ('Scan Host', self._host))
            self.port.open()
        if not self.port.isopen():
            raise PortError('Could not open port.')
        else:
            print(PRINTFORMAT % ('Port: ' + str(self._listen_port), 'OPENED!!'))

* Mon 19 Aug 2013 07:41:27 AM JST
not 
* Mon 19 Aug 2013 07:41:30 AM JST
print(PRINTFORMAT % ('Port: ' + str(self._listen_port), 'OPENED!!'))
* Mon 19 Aug 2013 07:41:40 AM JST

* Mon 19 Aug 2013 07:41:40 AM JST

* Mon 19 Aug 2013 07:41:41 AM JST
                raise PortError('Could not open port.')

* Mon 19 Aug 2013 07:43:24 AM JST
Check
* Mon 19 Aug 2013 07:45:55 AM JST
Pave 
* Mon 19 Aug 2013 07:46:53 AM JST
        for i in range(3):
            if self.haskeyring():
                if self._verbose:
                    print(PRINTFORMAT % ('Check has keys', 'Has keys.'))
                break
            else:
                if self._verbose and 0 == i:
                    print(PRINTFORMAT % ('Check has keys', 'Not has keys!!'))
                try:
                    add_keys(self._kagi)
                except:
                    raise SSHKeyError
        if not self.haskeyring():
            raise SSHKeyError()

* Mon 19 Aug 2013 07:47:33 AM JST
key
* Mon 19 Aug 2013 07:47:46 AM JST
key
* Mon 19 Aug 2013 07:47:51 AM JST
_
* Mon 19 Aug 2013 07:47:51 AM JST
self._
* Mon 19 Aug 2013 07:49:15 AM JST
self.haskeyring_flag
* Mon 19 Aug 2013 07:54:22 AM JST

* Mon 19 Aug 2013 07:54:22 AM JST

* Mon 19 Aug 2013 07:54:22 AM JST
            if not self.haskeyring():

* Mon 19 Aug 2013 07:54:22 AM JST
            if not self.haskeyring():

* Mon 19 Aug 2013 07:54:22 AM JST
            if not self.haskeyring():
                raise SSHKeyError()

* Mon 19 Aug 2013 07:55:31 AM JST
not 
* Mon 19 Aug 2013 07:55:33 AM JST
not 
* Mon 19 Aug 2013 07:58:53 AM JST
not 
* Mon 19 Aug 2013 07:59:01 AM JST
not 
* Mon 19 Aug 2013 08:01:07 AM JST
SUMMARY
* Mon 19 Aug 2013 08:09:32 AM JST
     
* Mon 19 Aug 2013 08:09:35 AM JST
1
* Mon 19 Aug 2013 08:09:36 AM JST
1.1
* Mon 19 Aug 2013 08:09:36 AM JST
168.1.1
* Mon 19 Aug 2013 08:09:36 AM JST
192.168.1.1
* Mon 19 Aug 2013 08:11:25 AM JST
        # tunneling
        # if not self.tunneling or not self.hastunnel():
        #     if self._verbose:
        #         print("\n***** PortForward")
        #     try:
        #         if self.gettunnel() and self._verbose:
        #             print(PRINTFORMAT % ('PortForwarder', 'Launched!!'))
        #     except TunnelError:
        #         print("Can't create tunneling.")
        #         if yesno("Retry create tunneling?"):
        #             if not self.gettunnel():
        #                 print("Can't create tunneling.")
        #                 raise TunnelError()
        #         else:
        #             raise TunnelError()

* Mon 19 Aug 2013 08:12:33 AM JST
# from tunnel import Tunneling, TunnelError
* Mon 19 Aug 2013 08:12:53 AM JST
from prompt import yesno
* Mon 19 Aug 2013 08:14:21 AM JST

* Mon 19 Aug 2013 08:14:21 AM JST

* Mon 19 Aug 2013 08:14:21 AM JST
    self.hastunnel_flag = False

* Mon 19 Aug 2013 08:14:38 AM JST
self.
* Mon 19 Aug 2013 08:19:21 AM JST
RookPave
* Mon 19 Aug 2013 08:20:21 AM JST
        self.relation = None
        self.script = None

* Mon 19 Aug 2013 08:20:30 AM JST
self.
* Mon 19 Aug 2013 08:20:31 AM JST
self.
* Mon 19 Aug 2013 08:20:50 AM JST

* Mon 19 Aug 2013 08:20:50 AM JST

* Mon 19 Aug 2013 08:20:50 AM JST
    script_flag = None

* Mon 19 Aug 2013 08:20:56 AM JST

* Mon 19 Aug 2013 08:20:56 AM JST

* Mon 19 Aug 2013 08:20:56 AM JST
    _user = rook['user']

* Mon 19 Aug 2013 08:21:25 AM JST
True
* Mon 19 Aug 2013 08:22:10 AM JST
_paved
* Mon 19 Aug 2013 08:22:11 AM JST
self._paved
* Mon 19 Aug 2013 08:23:41 AM JST
None
* Mon 19 Aug 2013 08:23:47 AM JST
None
* Mon 19 Aug 2013 08:27:45 AM JST
False
* Mon 19 Aug 2013 08:28:43 AM JST
relation
* Mon 19 Aug 2013 08:29:10 AM JST
relation
* Mon 19 Aug 2013 08:29:43 AM JST
False
* Mon 19 Aug 2013 08:33:38 AM JST
WAIT = 60
* Mon 19 Aug 2013 08:34:21 AM JST
WAIT
* Mon 19 Aug 2013 08:35:26 AM JST
time
* Mon 19 Aug 2013 08:39:01 AM JST

* Mon 19 Aug 2013 08:39:01 AM JST

* Mon 19 Aug 2013 08:39:01 AM JST
            # WARNING: (Atami) [2013/05/31]

* Mon 19 Aug 2013 08:39:02 AM JST
            # WARNING: (Atami) [2013/05/31]

* Mon 19 Aug 2013 08:39:02 AM JST
            # WARNING: (Atami) [2013/05/31]
            # if self._verbose:

* Mon 19 Aug 2013 08:39:02 AM JST
            # WARNING: (Atami) [2013/05/31]
            # if self._verbose:

* Mon 19 Aug 2013 08:39:02 AM JST
            # WARNING: (Atami) [2013/05/31]
            # if self._verbose:
                # print(PRINTFORMAT % (ip , 'ACTIVE'))

* Mon 19 Aug 2013 08:39:03 AM JST

* Mon 19 Aug 2013 08:39:03 AM JST

* Mon 19 Aug 2013 08:39:04 AM JST
        # if self._verbose:

* Mon 19 Aug 2013 08:39:04 AM JST
        # if self._verbose:

* Mon 19 Aug 2013 08:39:04 AM JST
        # if self._verbose:
            # print(PRINTFORMAT % (ip , 'DOWN'))

* Mon 19 Aug 2013 08:39:04 AM JST
        # if self._verbose:
            # print(PRINTFORMAT % (ip , 'DOWN'))

* Mon 19 Aug 2013 08:39:04 AM JST
        # if self._verbose:
            # print(PRINTFORMAT % (ip , 'DOWN'))
        return False

* Mon 19 Aug 2013 08:39:23 AM JST
if
* Mon 19 Aug 2013 08:39:31 AM JST

* Mon 19 Aug 2013 08:39:31 AM JST

* Mon 19 Aug 2013 08:39:31 AM JST
            return True

* Mon 19 Aug 2013 08:39:31 AM JST
            return True

* Mon 19 Aug 2013 08:39:31 AM JST
            return True
        return False

* Mon 19 Aug 2013 08:39:49 AM JST
return 0
* Mon 19 Aug 2013 08:39:57 AM JST
== status
* Mon 19 Aug 2013 08:47:13 AM JST

* Mon 19 Aug 2013 08:47:13 AM JST

* Mon 19 Aug 2013 08:47:13 AM JST
        self.relation = None # ssh connection

* Mon 19 Aug 2013 08:47:20 AM JST
        self.relation = None # ssh connection

* Mon 19 Aug 2013 08:47:20 AM JST
        self.relation = None # ssh connection
        self.script = RookScript(self._verbose) # script for on the Rook

* Mon 19 Aug 2013 08:49:09 AM JST
                              
* Mon 19 Aug 2013 08:50:18 AM JST
relation
* Mon 19 Aug 2013 08:50:33 AM JST

* Mon 19 Aug 2013 08:50:33 AM JST

* Mon 19 Aug 2013 08:50:33 AM JST
# class Rook(agentUtils, Tunneling, Verbose):

* Mon 19 Aug 2013 08:51:26 AM JST

* Mon 19 Aug 2013 08:51:26 AM JST

* Mon 19 Aug 2013 08:51:26 AM JST
from prompt import yesno

* Mon 19 Aug 2013 08:51:34 AM JST
Tunneling
* Mon 19 Aug 2013 08:51:40 AM JST
self.
* Mon 19 Aug 2013 08:51:41 AM JST
self.
* Mon 19 Aug 2013 08:52:03 AM JST

* Mon 19 Aug 2013 08:52:03 AM JST

* Mon 19 Aug 2013 08:52:04 AM JST
        self.script = RookScript(self._verbose) # script for on the Rook

* Mon 19 Aug 2013 08:53:26 AM JST

* Mon 19 Aug 2013 08:53:26 AM JST

* Mon 19 Aug 2013 08:53:26 AM JST
# from tunnel import Tunneling, TunnelError

* Mon 19 Aug 2013 09:10:43 AM JST
    def cmd(self, cmd):
        """Send command to rook(router).

        Arguments:

        - `cmd`: command line.
        """
        if not self._handshaking:
            self._connect()
        return self._handshaking.exec_command(cmd)


* Mon 19 Aug 2013 09:12:07 AM JST
relate
* Mon 19 Aug 2013 09:18:14 AM JST
handling rooks ssh port by knock command.
* Mon 19 Aug 2013 09:21:25 AM JST
command
* Mon 19 Aug 2013 09:21:40 AM JST
    
* Mon 19 Aug 2013 09:22:20 AM JST

* Mon 19 Aug 2013 09:22:21 AM JST

* Mon 19 Aug 2013 09:22:21 AM JST
        [3] run portforwarding.

* Mon 19 Aug 2013 09:22:36 AM JST

* Mon 19 Aug 2013 09:22:36 AM JST

* Mon 19 Aug 2013 09:22:36 AM JST
        # pave port

* Mon 19 Aug 2013 09:22:37 AM JST

* Mon 19 Aug 2013 09:22:37 AM JST

* Mon 19 Aug 2013 09:22:38 AM JST
        # pave keyring

* Mon 19 Aug 2013 09:23:25 AM JST
Pave 
* Mon 19 Aug 2013 09:23:40 AM JST
rook
* Mon 19 Aug 2013 09:23:41 AM JST
to rook
* Mon 19 Aug 2013 09:33:19 AM JST

* Mon 19 Aug 2013 09:33:19 AM JST

* Mon 19 Aug 2013 09:33:19 AM JST
        self.router = self.Router(verbose=self._verbose)

* Mon 19 Aug 2013 09:34:12 AM JST
rook['host']
* Mon 19 Aug 2013 09:34:48 AM JST
rook['user']
* Mon 19 Aug 2013 09:35:44 AM JST
kagiMD5
* Mon 19 Aug 2013 09:36:40 AM JST
rook['port']
* Mon 19 Aug 2013 09:37:25 AM JST
rook['open_port']
* Mon 19 Aug 2013 09:38:20 AM JST
rook['close_port']
* Mon 19 Aug 2013 09:44:54 AM JST
        if not self.isopen_port_flag or not self.haskeyring_flag:
            self.pave(force=force)

* Mon 19 Aug 2013 10:02:08 AM JST
pass
* Mon 19 Aug 2013 10:11:30 AM JST
    def wol(self):
        """Send Wake On Lan packet to king server."""
        if self._verbose:
            print(PRINTFORMAT % ('Wake On Lan', 'Sending Packet...'))
        self.router.script.wol(self._mac, self._ip)

* Mon 19 Aug 2013 10:12:32 AM JST
    def isactive(self):
        """Check server running."""
        return self.router.script.isactive_machine(self._ip)

* Mon 19 Aug 2013 10:12:49 AM JST
        if not self.isactive():
            if self._verbose:
                print(PRINTFORMAT % (str(self._ip), 'DOWN'))
            self.wol()
        else:
            if self._verbose:
                print(PRINTFORMAT % (str(self._ip), 'ACTIVE'))

* Mon 19 Aug 2013 10:13:29 AM JST
    if self._verbose:
                print(PRINTFORMAT % (str(self._ip), 'DOWN'))
        
* Mon 19 Aug 2013 10:13:34 AM JST
    if self._verbose:
                print(PRINTFORMAT % (str(self._ip), 'ACTIVE'))

* Mon 19 Aug 2013 10:13:41 AM JST

* Mon 19 Aug 2013 10:13:41 AM JST

* Mon 19 Aug 2013 10:13:41 AM JST
            self.wol()

* Mon 19 Aug 2013 10:13:55 AM JST
not 
* Mon 19 Aug 2013 10:14:47 AM JST
    def isactive(self):
        """Check server running."""
        return self.router.script.isactive_machine(self._ip)


* Mon 19 Aug 2013 10:18:15 AM JST
    def _pave_tunnel(self, force=False):
        """Set tunneling to ki server.

        @Arguments:

        - `force`:

        @Return:
        """
        # tunneling
        if not self.tunneling or not self.hastunnel():
            if self._verbose:
                print("\n***** PortForward")
            try:
                if self.gettunnel() and self._verbose:
                    print(PRINTFORMAT % ('PortForwarder', 'Launched!!'))
            except TunnelError:
                print("Can't create tunneling.")
                if yesno("Retry create tunneling?"):
                    if not self.gettunnel():
                        print("Can't create tunneling.")
                        raise TunnelError()
                else:
                    raise TunnelError()

* Mon 19 Aug 2013 10:18:37 AM JST

* Mon 19 Aug 2013 10:18:37 AM JST

* Mon 19 Aug 2013 10:18:37 AM JST
        # tunneling

* Mon 19 Aug 2013 10:21:19 AM JST
if self.gettunnel() and 
* Mon 19 Aug 2013 05:36:35 PM JST
.format('PortForward')
* Mon 19 Aug 2013 05:37:03 PM JST
print('\n')
* Mon 19 Aug 2013 05:39:03 PM JST
n***** 
* Mon 19 Aug 2013 05:59:33 PM JST
CHAPTERFORMAT = '\n{0:*^30}'
PRINTFORMAT = '[ {0:<16} ]  {1}'

* Mon 19 Aug 2013 06:00:03 PM JST

* Mon 19 Aug 2013 06:00:03 PM JST

* Mon 19 Aug 2013 06:00:03 PM JST
CHAPTERFORMAT = '\n{0:*^30}'

* Mon 19 Aug 2013 06:00:03 PM JST
CHAPTERFORMAT = '\n{0:*^30}'

* Mon 19 Aug 2013 06:00:04 PM JST
CHAPTERFORMAT = '\n{0:*^30}'
PRINTFORMAT = '[ {0:<16} ]  {1}'

* Mon 19 Aug 2013 06:00:38 PM JST
                            
* Mon 19 Aug 2013 06:01:57 PM JST
                
* Mon 19 Aug 2013 06:04:26 PM JST

* Mon 19 Aug 2013 06:04:26 PM JST

* Mon 19 Aug 2013 06:04:26 PM JST
                # print("\n***** PortForward")

* Mon 19 Aug 2013 06:07:30 PM JST
or 
* Mon 19 Aug 2013 06:07:31 PM JST
tunneling_flag or 
* Mon 19 Aug 2013 06:07:31 PM JST
self.tunneling_flag or 
* Mon 19 Aug 2013 06:07:31 PM JST
not self.tunneling_flag or 
* Mon 19 Aug 2013 06:08:09 PM JST
True
* Mon 19 Aug 2013 06:08:09 PM JST
is True
* Mon 19 Aug 2013 06:08:09 PM JST
force is True
* Mon 19 Aug 2013 06:08:09 PM JST
not force is True
* Mon 19 Aug 2013 06:08:10 PM JST
and not force is True
* Mon 19 Aug 2013 06:08:36 PM JST
force
* Mon 19 Aug 2013 06:08:37 PM JST
or force
* Mon 19 Aug 2013 06:09:12 PM JST
if not self.hastunnel():
* Mon 19 Aug 2013 06:13:44 PM JST

* Mon 19 Aug 2013 06:13:45 PM JST

* Mon 19 Aug 2013 06:13:45 PM JST
    self.tunneling_flag = False

* Mon 19 Aug 2013 06:24:11 PM JST
'test -d /data/archive'
* Mon 19 Aug 2013 06:24:15 PM JST

* Mon 19 Aug 2013 06:24:15 PM JST

* Mon 19 Aug 2013 06:24:15 PM JST
        cmd = 

* Mon 19 Aug 2013 06:24:50 PM JST
'test -b /dev/mapper/data_crypt'
* Mon 19 Aug 2013 06:24:53 PM JST

* Mon 19 Aug 2013 06:24:53 PM JST

* Mon 19 Aug 2013 06:24:53 PM JST
        cmd = 

* Mon 19 Aug 2013 06:35:29 PM JST
object
* Mon 19 Aug 2013 06:37:24 PM JST
king
* Mon 19 Aug 2013 06:38:01 PM JST
    def cmd(self, cmd):
        """Send command to server.

        Arguments:

        - `cmd`: command line
        """
        self.pave()
        if not self._handshaking:
            self.connect()
        return self._handshaking.exec_command(cmd)


* Mon 19 Aug 2013 06:38:18 PM JST
    def connect(self, force=False):
        """Do connect server.

        Arguments:

        - `force`: if True, reconnect.
        """
        self._pave()
        if force:
            if self.king:
                self.close()
            self.king = None
        if not self.king:
            self.king = paramiko.SSHClient()
            self.king.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.king.connect(self._host, self._listen_port, self._user)


* Mon 19 Aug 2013 06:39:20 PM JST
self._handshaking
* Mon 19 Aug 2013 06:39:25 PM JST

* Mon 19 Aug 2013 06:39:25 PM JST

* Mon 19 Aug 2013 06:39:25 PM JST
            if :

* Mon 19 Aug 2013 06:39:51 PM JST
self._handshaking
* Mon 19 Aug 2013 06:39:55 PM JST

* Mon 19 Aug 2013 06:39:55 PM JST

* Mon 19 Aug 2013 06:39:55 PM JST
            if :

* Mon 19 Aug 2013 06:40:14 PM JST
king
* Mon 19 Aug 2013 06:40:19 PM JST
king
* Mon 19 Aug 2013 06:40:24 PM JST
king
* Mon 19 Aug 2013 06:44:03 PM JST
    def ismount(self):
        """Check data disk is mounting."""
        return self._test_cmd('test -d /data/archive')

* Mon 19 Aug 2013 06:44:29 PM JST
    def _test_cmd(self, cmd):
        """Send command and check exit code.

        Arguments:

        - `cmd`: command line
        """
        stdin, stdout, stderr = self.cmd(cmd)
        status = stdout.channel.recv_exit_status()
        if 0 == status:
            return True
        return False


* Mon 19 Aug 2013 06:44:58 PM JST
status = 
* Mon 19 Aug 2013 06:45:07 PM JST

* Mon 19 Aug 2013 06:45:07 PM JST

* Mon 19 Aug 2013 06:45:07 PM JST
        if 0 == status:

* Mon 19 Aug 2013 06:45:07 PM JST
        if 0 == status:

* Mon 19 Aug 2013 06:45:07 PM JST
        if 0 == status:
            return True

* Mon 19 Aug 2013 06:45:07 PM JST
        if 0 == status:
            return True

* Mon 19 Aug 2013 06:45:07 PM JST
        if 0 == status:
            return True
        return False

* Mon 19 Aug 2013 06:45:55 PM JST
    def isdecrypt(self):
        """Check decrypt data disk.

        no check mounting.
        """
        return self._test_cmd('test -b /dev/mapper/data_crypt')

* Mon 19 Aug 2013 10:29:03 PM JST
        if not self.ismount():
            if self._verbose:
                print(CHAPTERFORMAT.format('Decrypt Disk'))
                print(PRINTFORMAT.format('Check Disk', 'NOT decrypted.'))
            if (decrypt or not confirm('Decrypt disk?')):
                self.decrypt()
        else:
            if self._verbose:
                print(PRINTFORMAT.format('Cryptseup', 'Already Decrypted!!'))

* Mon 19 Aug 2013 10:49:21 PM JST
confirm
* Mon 19 Aug 2013 10:49:24 PM JST
not 
* Mon 19 Aug 2013 10:55:47 PM JST
"\M-k"
* Mon 19 Aug 2013 10:55:52 PM JST
"\C-p"
* Mon 19 Aug 2013 10:55:58 PM JST
"\M-n"
* Mon 19 Aug 2013 10:56:02 PM JST
"\C-b"
* Mon 19 Aug 2013 10:57:51 PM JST

* Mon 19 Aug 2013 10:57:51 PM JST

* Mon 19 Aug 2013 10:57:51 PM JST
from confirm import confirm

* Mon 19 Aug 2013 11:01:43 PM JST
force
* Mon 19 Aug 2013 11:08:57 PM JST
'Decrypt disk?'
* Mon 19 Aug 2013 11:09:12 PM JST
self._pave_disk(decrypt=decrypt, force=force)
* Mon 19 Aug 2013 11:09:33 PM JST
decrypt, 
* Mon 19 Aug 2013 11:09:33 PM JST
decrypt=decrypt, 
* Mon 19 Aug 2013 11:09:39 PM JST
decrypt, 
* Mon 19 Aug 2013 11:09:39 PM JST
decrypt=decrypt, 
* Mon 19 Aug 2013 11:10:05 PM JST
False,
* Mon 19 Aug 2013 11:10:06 PM JST
decrypt=False,
* Mon 19 Aug 2013 11:10:24 PM JST

* Mon 19 Aug 2013 11:10:24 PM JST

* Mon 19 Aug 2013 11:10:24 PM JST
            if decrypt or force or yesno('Decrypt disk?'):

* Mon 19 Aug 2013 11:12:38 PM JST
            if self._verbose:
                print(CHAPTERFORMAT.format('Decrypt Disk'))

* Mon 19 Aug 2013 11:16:20 PM JST
    def decrypt(self):
        """Decrypt and mount data disk."""
        sudopasswd = None
        cmd = 'sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt'
        if not self.isdecrypt():
            chan = self.king.get_transport().open_session()
            chan.get_pty()
            chan.exec_command(cmd)
            error_count = 0
            while 1:
                sleep(2)
                recv = chan.recv(1024)
                sleep(1)
                if '[sudo] password for' in recv:
                    sudopasswd = getpass(recv)
                    chan.send(sudopasswd + '\n')
                elif 'Enter passphrase for' in recv:
                    chan.send(getpass(recv) + '\n')
                elif 'No key available with this passphrase.' in recv:
                    error_count += 1
                    if error_count == 3:
                        raise PasswordError
                    chan.send(getpass(recv) + '\n')
                elif 'sudo: 3 incorrect password attempts' in recv:
                    raise PasswordError
                elif recv == '\r\n':
                    if self._verbose:
                        print(PRINTFORMAT.format('Cryptsetup',
                                                 'Decrypted OK !!'))
                    break

        if (not self.ismount()) and self.isdecrypt():
            mnt = 'sudo /bin/mount /dev/mapper/data_crypt /data'
            chan = self.king.get_transport().open_session()
            chan.get_pty()
            chan.exec_command(mnt)
            while not self.ismount():
                recv = chan.recv(1024)
                sleep(2)
                if '[sudo] password for' in recv:
                    if not sudopasswd:
                        sudopasswd = getpass(recv)
                    chan.send(sudopasswd + '\n')
                elif 'sudo: 3 incorrect password attempts' in recv:
                    raise PasswordError
                elif recv == '\r\n':
                    break
            if self._verbose and self.ismount():
                print(PRINTFORMAT.format('/data', 'Mounted !!'))

        else:
            if self._verbose:
                print(PRINTFORMAT.format('Cryptseup', 'Aleady Decrypted!!'))
        del sudopasswd

* Mon 19 Aug 2013 11:16:44 PM JST
king
* Mon 19 Aug 2013 11:17:26 PM JST
king
* Mon 19 Aug 2013 11:17:46 PM JST
'sudo /bin/mount /dev/mapper/data_crypt /data'
* Mon 19 Aug 2013 11:17:50 PM JST

* Mon 19 Aug 2013 11:17:50 PM JST

* Mon 19 Aug 2013 11:17:50 PM JST
            mnt = 

* Mon 19 Aug 2013 11:18:02 PM JST
'sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt'
* Mon 19 Aug 2013 11:18:17 PM JST

* Mon 19 Aug 2013 11:18:17 PM JST

* Mon 19 Aug 2013 11:18:17 PM JST
        cmd = 

* Mon 19 Aug 2013 11:57:29 PM JST
            chan = self._handshaking.get_transport().open_session()
            chan.get_pty()
            chan.exec_command(
                'sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt')

* Mon 19 Aug 2013 11:57:46 PM JST
                
* Mon 19 Aug 2013 11:58:06 PM JST
        self.pave()
        if not self._handshaking:
            self._connect()

* Mon 19 Aug 2013 11:58:28 PM JST
    def _connect(self, force=False):
        """Do connect server.

        Arguments:

        - `force`: if True, reconnect.
        """
        self._pave(force=force)
        if force and self._handshaking:
            self.close()
            self._handshaking = None
        if not self._handshaking:
            self._handshaking = paramiko.SSHClient()
            self._handshaking.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self._handshaking.connect(self._host, self._listen_port, self._user)


* Mon 19 Aug 2013 11:58:44 PM JST
exec_command
* Mon 19 Aug 2013 11:59:00 PM JST

* Mon 19 Aug 2013 11:59:01 PM JST

* Mon 19 Aug 2013 11:59:01 PM JST
            chan = self._handshaking.get_transport().open_session()

* Mon 19 Aug 2013 11:59:01 PM JST
            chan = self._handshaking.get_transport().open_session()

* Mon 19 Aug 2013 11:59:01 PM JST
            chan = self._handshaking.get_transport().open_session()
            chan.get_pty()

* Mon 19 Aug 2013 11:59:08 PM JST

* Mon 19 Aug 2013 11:59:08 PM JST

* Mon 19 Aug 2013 11:59:08 PM JST
            chan = self._handshaking.get_transport().open_session()

* Mon 19 Aug 2013 11:59:08 PM JST
            chan = self._handshaking.get_transport().open_session()

* Mon 19 Aug 2013 11:59:08 PM JST
            chan = self._handshaking.get_transport().open_session()
            chan.get_pty()

* Tue 20 Aug 2013 12:00:21 AM JST
self._handshaking.exec_command(cmd)
* Tue 20 Aug 2013 12:00:56 AM JST

* Tue 20 Aug 2013 12:00:56 AM JST

* Tue 20 Aug 2013 12:00:56 AM JST
                sleep(2)

* Tue 20 Aug 2013 12:19:58 AM JST
        if (not self.ismount()) and self.isdecrypt():
            chan = self.chan_cmd('sudo /bin/mount /dev/mapper/data_crypt /data')
            while not self.ismount():
                recv = chan.recv(1024)
                sleep(1)
                if '[sudo] password for' in recv:
                    if not sudopasswd:
                        sudopasswd = getpass(recv)
                    chan.send(sudopasswd + '\n')
                elif 'sudo: 3 incorrect password attempts' in recv:
                    raise PasswordError
                elif recv == '\r\n':
                    break
            if self._verbose and self.ismount():
                print(PRINTFORMAT.format('/data', 'Mounted !!'))

        else:
            if self._verbose:
                print(PRINTFORMAT.format('Cryptseup', 'Aleady Decrypted!!'))
        del sudopasswd


* Tue 20 Aug 2013 12:20:42 AM JST

* Tue 20 Aug 2013 12:20:42 AM JST

* Tue 20 Aug 2013 12:20:42 AM JST
        if not self.isdecrypt():

* Tue 20 Aug 2013 12:24:39 AM JST

* Tue 20 Aug 2013 12:24:39 AM JST

* Tue 20 Aug 2013 12:24:39 AM JST

* Tue 20 Aug 2013 12:24:40 AM JST

* Tue 20 Aug 2013 12:24:40 AM JST

* Tue 20 Aug 2013 12:24:40 AM JST

* Tue 20 Aug 2013 12:24:40 AM JST

* Tue 20 Aug 2013 12:24:44 AM JST

* Tue 20 Aug 2013 12:24:44 AM JST

* Tue 20 Aug 2013 12:24:44 AM JST
    """

* Tue 20 Aug 2013 12:24:45 AM JST
    """

* Tue 20 Aug 2013 12:24:45 AM JST
    """
    """

* Tue 20 Aug 2013 12:24:45 AM JST

* Tue 20 Aug 2013 12:24:45 AM JST

* Tue 20 Aug 2013 12:24:45 AM JST
    def __init__(self, ):

* Tue 20 Aug 2013 12:24:45 AM JST
    def __init__(self, ):

* Tue 20 Aug 2013 12:24:45 AM JST
    def __init__(self, ):
        """

* Tue 20 Aug 2013 12:24:45 AM JST
    def __init__(self, ):
        """

* Tue 20 Aug 2013 12:24:45 AM JST
    def __init__(self, ):
        """
        """

* Tue 20 Aug 2013 12:26:59 AM JST
pass ""
* Tue 20 Aug 2013 12:27:07 AM JST
print()
* Tue 20 Aug 2013 12:27:12 AM JST

* Tue 20 Aug 2013 12:27:12 AM JST

* Tue 20 Aug 2013 12:27:12 AM JST
            sudopasswd = self.decrypt()

* Tue 20 Aug 2013 12:28:49 AM JST

* Tue 20 Aug 2013 12:28:49 AM JST

* Tue 20 Aug 2013 12:28:49 AM JST
                del sudopasswd

* Tue 20 Aug 2013 12:29:00 AM JST

* Tue 20 Aug 2013 12:29:00 AM JST

* Tue 20 Aug 2013 12:29:00 AM JST
                sudopasswd = None

* Tue 20 Aug 2013 12:48:47 AM JST
    def ismount(self):
        """Check data disk is mounting."""
        return self._test_cmd('test -d /data/archive')

    def isdecrypt(self):
        """Check decrypt data disk.

        no check mounting.
        """
        return self._test_cmd('test -b /dev/mapper/data_crypt')

    def decrypt(self):
        """Decrypt and mount data disk."""
        sudopasswd = None
        chan = self.chan_cmd(
            'sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt')
        error_count = 0
        while 1:
            recv = chan.recv(1024)
            sleep(1)
            if '[sudo] password for' in recv:
                sudopasswd = getpass(recv)
                chan.send(sudopasswd + '\n')
            elif 'Enter passphrase for' in recv:
                chan.send(getpass(recv) + '\n')
            elif 'No key available with this passphrase.' in recv:
                error_count += 1
                if error_count == 3:
                    raise PasswordError
                chan.send(getpass(recv) + '\n')
            elif 'sudo: 3 incorrect password attempts' in recv:
                raise PasswordError
            elif recv == '\r\n':
                if self._verbose:
                    print(PRINTFORMAT.format('Cryptsetup',
                                             'Decrypted OK !!'))
                break
        if not self.isdecrypt():
            raise DecryptError()
        return sudopasswd

    def data_mount(self, sudopasswd):
        """SUMMARY

        @Return:
        """
        if not self.isdecrypt():
            try:
                sudopasswd = self.decrypt()
            except DecryptError("Could not decrypt disk."):
                return False

        if (not self.ismount()) and self.isdecrypt():
            chan = self.chan_cmd('sudo /bin/mount /dev/mapper/data_crypt /data')
            while not self.ismount():
                recv = chan.recv(1024)
                sleep(1)
                if '[sudo] password for' in recv:
                    if not sudopasswd:
                        sudopasswd = getpass(recv)
                    chan.send(sudopasswd + '\n')
                elif 'sudo: 3 incorrect password attempts' in recv:
                    raise PasswordError
                elif recv == '\r\n':
                    break
            if self._verbose and self.ismount():
                print(PRINTFORMAT.format('/data', 'Mounted !!'))

        else:
            if self._verbose:
                print(PRINTFORMAT.format('Cryptseup', 'Aleady Decrypted!!'))
        del sudopasswd



* Tue 20 Aug 2013 12:48:59 AM JST
object
* Tue 20 Aug 2013 12:49:20 AM JST
class Decrypt(object):
    """
    """
    def ismount(self):
        """Check data disk is mounting."""
        return self._test_cmd('test -d /data/archive')

    def isdecrypt(self):
        """Check decrypt data disk.

        no check mounting.
        """
        return self._test_cmd('test -b /dev/mapper/data_crypt')

    def decrypt(self):
        """Decrypt and mount data disk."""
        sudopasswd = None
        chan = self.chan_cmd(
            'sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt')
        error_count = 0
        while 1:
            recv = chan.recv(1024)
            sleep(1)
            if '[sudo] password for' in recv:
                sudopasswd = getpass(recv)
                chan.send(sudopasswd + '\n')
            elif 'Enter passphrase for' in recv:
                chan.send(getpass(recv) + '\n')
            elif 'No key available with this passphrase.' in recv:
                error_count += 1
                if error_count == 3:
                    raise PasswordError
                chan.send(getpass(recv) + '\n')
            elif 'sudo: 3 incorrect password attempts' in recv:
                raise PasswordError
            elif recv == '\r\n':
                if self._verbose:
                    print(PRINTFORMAT.format('Cryptsetup',
                                             'Decrypted OK !!'))
                break
        if not self.isdecrypt():
            raise DecryptError()
        return sudopasswd

    def data_mount(self, sudopasswd):
        """SUMMARY

        @Return:
        """
        if not self.isdecrypt():
            try:
                sudopasswd = self.decrypt()
            except DecryptError("Could not decrypt disk."):
                return False

        if (not self.ismount()) and self.isdecrypt():
            chan = self.chan_cmd('sudo /bin/mount /dev/mapper/data_crypt /data')
            while not self.ismount():
                recv = chan.recv(1024)
                sleep(1)
                if '[sudo] password for' in recv:
                    if not sudopasswd:
                        sudopasswd = getpass(recv)
                    chan.send(sudopasswd + '\n')
                elif 'sudo: 3 incorrect password attempts' in recv:
                    raise PasswordError
                elif recv == '\r\n':
                    break
            if self._verbose and self.ismount():
                print(PRINTFORMAT.format('/data', 'Mounted !!'))

        else:
            if self._verbose:
                print(PRINTFORMAT.format('Cryptseup', 'Aleady Decrypted!!'))
        del sudopasswd

* Tue 20 Aug 2013 12:51:03 AM JST
'sudo /sbin/halt'
* Tue 20 Aug 2013 12:51:08 AM JST

* Tue 20 Aug 2013 12:51:08 AM JST

* Tue 20 Aug 2013 12:51:08 AM JST
        cmd = 

* Tue 20 Aug 2013 12:52:37 AM JST
    # def pave(self, decrypt=True, force=False):
        # """Pave before use.

        # Arguments:

        # - `decrypt`: if False, do not decrypt disk.
        # """
        # self._pave()
        # if not self.isactive():
        #     if self._verbose:
        #         print(PRINTFORMAT % (str(self._ip), 'DOWN'))
        #     self.wol()
        # else:
        #     if self._verbose:
        #         print(PRINTFORMAT % (str(self._ip), 'ACTIVE'))

        # if self.hastunnel_flag or force:
            # self._pave_tunnel()

        # if not self.ismount():
        #     if self._verbose:
        #         print(CHAPTERFORMAT.format('Decrypt Disk'))
        #         print(PRINTFORMAT.format('Check Disk', 'NOT decrypted.'))
        #     if (decrypt or not confirm('Decrypt disk?')):
        #         self.decrypt()
        # else:
        #     if self._verbose:
        #         print(PRINTFORMAT.format('Cryptseup', 'Already Decrypted!!'))

    # def isactive(self):
    #     """Check server running."""
    #     return self.router.script.isactive_machine(self._ip)

* Tue 20 Aug 2013 12:53:15 AM JST
AgentUtils,
* Tue 20 Aug 2013 12:53:16 AM JST
Tunneling,
* Tue 20 Aug 2013 12:56:37 AM JST

    """
    
    def __init__(self, ):
        """
        """
        
        
* Tue 20 Aug 2013 12:56:39 AM JST

    """
    
    def __init__(self, ):
        """
        """
        
        
* Tue 20 Aug 2013 12:56:39 AM JST

    """
    
    def __init__(self, ):
        """
        """
        
            """

* Tue 20 Aug 2013 12:56:52 AM JST
    def upload(self, src, dst, decrypt=False):
        """Upload sfcp

        Arguments:

        - `src`:
        - `dst`:
        """
        self.pave(decrypt=decrypt)
        if not self.sftp:
            self._sftp_connect()

        self.sftp.put(src, dst)

    def _sftp_connect(self):
        """Connect sftp"""
        if not self.king:
            self.connect()
        self.sftp = self.king.open_sftp()

* Tue 20 Aug 2013 12:58:13 AM JST
king
* Tue 20 Aug 2013 12:58:44 AM JST

* Tue 20 Aug 2013 12:58:45 AM JST

* Tue 20 Aug 2013 12:58:45 AM JST
        self.king = None

* Tue 20 Aug 2013 12:58:47 AM JST
        self.king = None

* Tue 20 Aug 2013 12:58:48 AM JST
        self.king = None
        self.sftp = None

* Tue 20 Aug 2013 12:59:32 AM JST
_handshaking
* Tue 20 Aug 2013 01:02:27 AM JST

* Tue 20 Aug 2013 01:02:27 AM JST

* Tue 20 Aug 2013 01:02:27 AM JST
    # command

* Tue 20 Aug 2013 01:02:38 AM JST
    def close(self):
        """Close connect server."""
        if self.router:
            self.router.close()
        if self.king:
            self.king.close()


* Tue 20 Aug 2013 01:03:08 AM JST
server
* Tue 20 Aug 2013 01:03:08 AM JST
with server
* Tue 20 Aug 2013 01:03:17 AM JST
king
* Tue 20 Aug 2013 01:03:31 AM JST
king
* Tue 20 Aug 2013 01:03:54 AM JST

* Tue 20 Aug 2013 01:03:54 AM JST

* Tue 20 Aug 2013 01:03:54 AM JST
    hastunnel_flag = False

* Tue 20 Aug 2013 01:06:47 AM JST
script.
* Tue 20 Aug 2013 01:06:53 AM JST
script.
* Tue 20 Aug 2013 01:17:51 AM JST
end=''
* Tue 20 Aug 2013 01:17:51 AM JST
text, end=''
* Tue 20 Aug 2013 01:18:08 AM JST
print(text)
* Tue 20 Aug 2013 01:18:57 AM JST

* Tue 20 Aug 2013 01:18:57 AM JST

* Tue 20 Aug 2013 01:18:57 AM JST
    sys.stdout.write(text)

* Tue 20 Aug 2013 04:35:27 AM JST

* Tue 20 Aug 2013 04:35:28 AM JST

* Tue 20 Aug 2013 04:35:28 AM JST
        self.pave(decrypt=False)

* Tue 20 Aug 2013 04:43:31 AM JST

* Tue 20 Aug 2013 04:43:31 AM JST

* Tue 20 Aug 2013 04:43:31 AM JST
        self.pave(force=force)

* Tue 20 Aug 2013 04:45:29 AM JST
        # decrypt disk
        if decrypt or force:
            self._pave_disk(force=force)
        else:
            if yesno('\rDecrypt disk? [y/n]: '):
                self._pave_disk(force=force)

* Tue 20 Aug 2013 04:46:05 AM JST
False,
* Tue 20 Aug 2013 04:46:06 AM JST
decrypt=False,
* Tue 20 Aug 2013 04:47:22 AM JST
pave
* Tue 20 Aug 2013 04:49:40 AM JST
False
* Tue 20 Aug 2013 04:49:40 AM JST
decrypt=False
* Tue 20 Aug 2013 04:52:57 AM JST
_decrypted_flag 
* Tue 20 Aug 2013 04:52:58 AM JST
self._decrypted_flag 
* Tue 20 Aug 2013 04:57:39 AM JST

* Tue 20 Aug 2013 04:57:39 AM JST

* Tue 20 Aug 2013 04:57:39 AM JST
        self.pave()

* Tue 20 Aug 2013 04:57:49 AM JST

* Tue 20 Aug 2013 04:57:49 AM JST

* Tue 20 Aug 2013 04:57:49 AM JST
        self.pave()

* Tue 20 Aug 2013 04:58:08 AM JST

* Tue 20 Aug 2013 04:58:08 AM JST

* Tue 20 Aug 2013 04:58:08 AM JST
        self.pave(decrypt=decrypt)

* Tue 20 Aug 2013 04:58:48 AM JST
                
* Tue 20 Aug 2013 05:07:31 AM JST
recv
* Tue 20 Aug 2013 05:13:46 AM JST
raw_print
* Tue 20 Aug 2013 05:13:54 AM JST
raw
* Tue 20 Aug 2013 05:17:36 AM JST
'sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt'
* Tue 20 Aug 2013 05:19:36 AM JST

* Tue 20 Aug 2013 05:19:36 AM JST

* Tue 20 Aug 2013 05:19:36 AM JST
            recv = chan.recv(1024)

* Tue 20 Aug 2013 05:19:41 AM JST
recv = chan.recv(1024)
* Tue 20 Aug 2013 05:26:51 AM JST
            elif 'sudo: 3 incorrect password attempts' in recv:
                raise PasswordError

* Tue 20 Aug 2013 05:28:10 AM JST
            elif 'No key available with this passphrase.' in recv:
                error_count += 1
                if error_count == 3:
                    raise PasswordError
                chan.send(getpass(recv) + '\n')
                recv = chan.recv(1024)

* Tue 20 Aug 2013 05:28:35 AM JST
No key available with this passphrase.
* Tue 20 Aug 2013 05:28:55 AM JST
key 
* Tue 20 Aug 2013 05:28:55 AM JST
No key 
* Tue 20 Aug 2013 05:29:18 AM JST
Enter passphrase for
* Tue 20 Aug 2013 05:29:21 AM JST
for
* Tue 20 Aug 2013 05:29:22 AM JST
passphrase for
* Tue 20 Aug 2013 05:30:14 AM JST
                if self._verbose:
                    print(PRINTFORMAT.format('Cryptsetup',
                                             'Decrypted OK !!'))

* Tue 20 Aug 2013 05:30:34 AM JST
                
* Tue 20 Aug 2013 05:37:13 AM JST
chan = ki.chan_cmd('sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt')
* Tue 20 Aug 2013 05:53:59 AM JST

* Tue 20 Aug 2013 05:53:59 AM JST

* Tue 20 Aug 2013 05:53:59 AM JST
        # chan.invoke_shell()

* Tue 20 Aug 2013 05:55:57 AM JST
n'
* Tue 20 Aug 2013 05:58:04 AM JST

* Tue 20 Aug 2013 05:58:04 AM JST

* Tue 20 Aug 2013 05:58:04 AM JST
        return sudopasswd

* Tue 20 Aug 2013 05:58:10 AM JST
sudopasswd
* Tue 20 Aug 2013 05:59:33 AM JST
del 
* Tue 20 Aug 2013 06:02:20 AM JST
                
* Tue 20 Aug 2013 06:02:23 AM JST
n'
* Tue 20 Aug 2013 06:02:23 AM JST
recv) + '\n'
* Tue 20 Aug 2013 06:02:24 AM JST
getpass(recv) + '\n'
* Tue 20 Aug 2013 06:02:39 AM JST

* Tue 20 Aug 2013 06:02:39 AM JST

* Tue 20 Aug 2013 06:02:39 AM JST
        sudopasswd = None

* Tue 20 Aug 2013 06:04:32 AM JST
        if force and self._handshaking:
            self.close()
            self._handshaking = None
        if not self._handshaking:
            self._handshaking = paramiko.SSHClient()
            self._handshaking.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self._handshaking.connect(self._host, self._listen_port, self._user)

* Tue 20 Aug 2013 06:04:44 AM JST
        if not self._handshaking:
            self._connect()
        chan = self._handshaking.get_transport().open_session()
        chan.get_pty()
        chan.exec_command(cmd)

* Tue 20 Aug 2013 06:05:09 AM JST
'sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt'
* Tue 20 Aug 2013 06:15:28 AM JST
1024
* Tue 20 Aug 2013 06:15:37 AM JST
1024
* Tue 20 Aug 2013 06:15:41 AM JST
1024
* Tue 20 Aug 2013 06:24:11 AM JST
'sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt'
* Tue 20 Aug 2013 06:24:12 AM JST
            'sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt'
* Tue 20 Aug 2013 06:25:01 AM JST
2048
* Tue 20 Aug 2013 06:25:08 AM JST
2048
* Tue 20 Aug 2013 06:27:01 AM JST
self._chan = 
* Tue 20 Aug 2013 06:28:39 AM JST
recv = self._chan.recv(1024)
* Tue 20 Aug 2013 06:31:23 AM JST
1024
* Tue 20 Aug 2013 06:31:34 AM JST
1024
* Tue 20 Aug 2013 06:31:39 AM JST
1024
* Tue 20 Aug 2013 06:31:44 AM JST
2048
* Tue 20 Aug 2013 06:38:32 AM JST

* Tue 20 Aug 2013 06:38:32 AM JST

* Tue 20 Aug 2013 06:38:33 AM JST
        self._chan.send('\n')

* Tue 20 Aug 2013 06:42:54 AM JST
while not channel.recv_ready():
    time.sleep(2)
* Tue 20 Aug 2013 06:42:57 AM JST
time.
* Tue 20 Aug 2013 06:43:10 AM JST
        while not self.chan.recv_ready():
            sleep(2)

* Tue 20 Aug 2013 06:43:31 AM JST

* Tue 20 Aug 2013 06:43:31 AM JST

* Tue 20 Aug 2013 06:43:31 AM JST
        recv = self._chan.recv(9999)

* Tue 20 Aug 2013 06:44:18 AM JST
        while not self.chan.recv_ready():
            sleep(2)

* Tue 20 Aug 2013 06:44:28 AM JST

* Tue 20 Aug 2013 06:44:28 AM JST

* Tue 20 Aug 2013 06:44:28 AM JST
        print(recv)

* Tue 20 Aug 2013 06:53:35 AM JST
        self._chan.send('sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt\n\n')
        while not self._chan.recv_ready():
            sleep(2)
        recv = self._chan.recv(9999)
        print(recv)

* Tue 20 Aug 2013 02:47:56 PM JST
login
* Tue 20 Aug 2013 02:47:56 PM JST
Last login
* Tue 20 Aug 2013 02:51:08 PM JST
passphrase
* Tue 20 Aug 2013 02:51:58 PM JST
/usr/bin/sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt
* Tue 20 Aug 2013 02:53:59 PM JST
/usr/bin/sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt
* Tue 20 Aug 2013 02:54:32 PM JST
p.expect('password')
* Tue 20 Aug 2013 04:20:40 PM JST
sendline
* Tue 20 Aug 2013 04:25:22 PM JST
p.sendline()
* Tue 20 Aug 2013 04:26:42 PM JST
[sudo] password for t1: 
* Tue 20 Aug 2013 04:31:02 PM JST
p.sendline('/usr/bin/sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt')
* Tue 20 Aug 2013 04:31:13 PM JST
i = p.expect(['password', 'passphrase', '[#\$] '])
* Tue 20 Aug 2013 04:31:19 PM JST
p.sendline('06DV 187s zuUR. VsFR sPjW mr5m.')
* Tue 20 Aug 2013 04:31:25 PM JST
i = p.expect(['password', 'passphrase', '[#\$] '])
* Tue 20 Aug 2013 04:33:51 PM JST
i = p.expect(['\[sudo\] password', 'passphrase', '[#\$] '])
* Tue 20 Aug 2013 04:34:35 PM JST
Enter passphrase for /dev/mapper/VG-data:
* Tue 20 Aug 2013 04:37:09 PM JST
p.sendline('/usr/bin/sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt')
* Tue 20 Aug 2013 04:37:16 PM JST
i = p.expect(['\[sudo\] password', 'passphrase', '[#\$] '])
* Tue 20 Aug 2013 04:41:04 PM JST
p.sendline('06DV 187s zuUR. VsFR sPjW mr5m.')
* Tue 20 Aug 2013 04:52:24 PM JST

* Tue 20 Aug 2013 04:52:25 PM JST

* Tue 20 Aug 2013 04:52:25 PM JST
p.expect('password')

* Tue 20 Aug 2013 04:52:25 PM JST
p.expect('password')

* Tue 20 Aug 2013 04:52:25 PM JST
p.expect('password')
p.sendline('')

* Tue 20 Aug 2013 04:52:29 PM JST

* Tue 20 Aug 2013 04:52:29 PM JST

* Tue 20 Aug 2013 04:52:29 PM JST
p.sendline('/usr/bin/sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt')

* Tue 20 Aug 2013 04:52:35 PM JST
p.sendline('/usr/bin/sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt')

* Tue 20 Aug 2013 04:52:35 PM JST
p.sendline('/usr/bin/sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt')
i = p.expect(['\[sudo\] password', 'passphrase', '[#\$] '])

* Tue 20 Aug 2013 04:52:38 PM JST

* Tue 20 Aug 2013 04:52:38 PM JST

* Tue 20 Aug 2013 04:52:38 PM JST
p.sendline('/usr/bin/sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt')

* Tue 20 Aug 2013 04:53:47 PM JST

* Tue 20 Aug 2013 04:53:47 PM JST

* Tue 20 Aug 2013 04:53:47 PM JST
import os

* Tue 20 Aug 2013 04:53:47 PM JST
import os

* Tue 20 Aug 2013 04:53:47 PM JST
import os
import sys

* Tue 20 Aug 2013 04:53:47 PM JST
import os
import sys

* Tue 20 Aug 2013 04:53:47 PM JST
import os
import sys
import re

* Tue 20 Aug 2013 04:54:37 PM JST

* Tue 20 Aug 2013 04:54:37 PM JST

* Tue 20 Aug 2013 04:54:37 PM JST
p.sendline('06DV 187s zuUR. VsFR sPjW mr5m.')

* Tue 20 Aug 2013 04:55:01 PM JST

* Tue 20 Aug 2013 04:55:01 PM JST

* Tue 20 Aug 2013 04:55:01 PM JST
i = p.expect(['password', 'passphrase', '[#\$] '])

* Tue 20 Aug 2013 04:58:25 PM JST

* Tue 20 Aug 2013 04:58:25 PM JST

* Tue 20 Aug 2013 04:58:25 PM JST
        sleep(1)

* Tue 20 Aug 2013 04:58:26 PM JST

* Tue 20 Aug 2013 04:58:26 PM JST

* Tue 20 Aug 2013 04:58:26 PM JST
        sleep(1)

* Tue 20 Aug 2013 05:10:24 PM JST
'KI',
* Tue 20 Aug 2013 05:19:51 PM JST
/share/pyshared/
* Tue 20 Aug 2013 05:26:05 PM JST
'KI', 
* Tue 20 Aug 2013 05:49:49 PM JST
        
* Tue 20 Aug 2013 05:50:10 PM JST

* Tue 20 Aug 2013 05:50:12 PM JST
channel
* Tue 20 Aug 2013 05:50:12 PM JST
ssh channel
* Tue 20 Aug 2013 05:50:20 PM JST
_chan
* Tue 20 Aug 2013 05:50:59 PM JST
self._decrypted_flag
* Tue 20 Aug 2013 05:52:47 PM JST
True
* Tue 20 Aug 2013 05:54:27 PM JST
'{0:=^10}'.format('Flag')
* Tue 20 Aug 2013 06:07:37 PM JST
SUMMARY
* Tue 20 Aug 2013 06:16:04 PM JST
_host
* Tue 20 Aug 2013 06:16:04 PM JST
self._host
* Tue 20 Aug 2013 06:16:52 PM JST
_socket.gethostbyname(self._host)
* Tue 20 Aug 2013 06:17:34 PM JST
_socket.
* Tue 20 Aug 2013 06:17:36 PM JST
                                         
* Tue 20 Aug 2013 06:17:45 PM JST
s.append('host: {0}({1})'.format(gethostbyname(self._host), self._host))
* Tue 20 Aug 2013 06:18:18 PM JST
_socket.
* Tue 20 Aug 2013 06:18:29 PM JST

* Tue 20 Aug 2013 06:18:29 PM JST

* Tue 20 Aug 2013 06:18:29 PM JST
import socket as _socket

* Tue 20 Aug 2013 06:19:38 PM JST

* Tue 20 Aug 2013 06:19:38 PM JST

* Tue 20 Aug 2013 06:19:38 PM JST
        s.append('ip: {0}'.format())

* Tue 20 Aug 2013 06:23:35 PM JST
s.append('{0:=^10}'.format('Flag'))
* Tue 20 Aug 2013 06:23:44 PM JST
_handshaking = None
* Tue 20 Aug 2013 11:43:45 PM JST
_isopen_port_flag = False
    _haskeyring_flag = False
* Tue 20 Aug 2013 11:44:12 PM JST
False
* Tue 20 Aug 2013 11:44:13 PM JST
_isopen_port_flag = False
* Tue 20 Aug 2013 11:44:15 PM JST
_isopen_port_flag
* Tue 20 Aug 2013 11:44:39 PM JST
False
* Tue 20 Aug 2013 11:44:39 PM JST
_haskeyring_flag = False
* Tue 20 Aug 2013 11:44:42 PM JST
_haskeyring_flag
* Tue 20 Aug 2013 11:46:54 PM JST
SUMMARY
* Tue 20 Aug 2013 11:47:03 PM JST
This returns a human-readable string that represents the state of
        the object.
* Tue 20 Aug 2013 11:47:49 PM JST
_handshaking
* Tue 20 Aug 2013 11:56:54 PM JST
self
* Tue 20 Aug 2013 11:58:17 PM JST

* Tue 20 Aug 2013 11:58:17 PM JST

* Tue 20 Aug 2013 11:58:17 PM JST
    print(p.buffer)

* Wed 21 Aug 2013 12:00:28 AM JST

* Wed 21 Aug 2013 12:00:28 AM JST

* Wed 21 Aug 2013 12:00:28 AM JST
    print(p.buffer)

* Wed 21 Aug 2013 12:01:44 AM JST

* Wed 21 Aug 2013 12:01:44 AM JST

* Wed 21 Aug 2013 12:01:44 AM JST
    print(p.buffer)

* Wed 21 Aug 2013 12:15:14 AM JST
r'[#\$]',
* Wed 21 Aug 2013 12:15:20 AM JST
                   
* Wed 21 Aug 2013 12:15:28 AM JST
        print('DEBUG-1-2013-08-20-144643.junk.py')
        p.sendline('Taka83 a76.')

* Wed 21 Aug 2013 12:15:51 AM JST

* Wed 21 Aug 2013 12:15:51 AM JST

* Wed 21 Aug 2013 12:15:51 AM JST
    print('DEBUG-1-2013-08-20-144643.junk.py')

* Wed 21 Aug 2013 12:16:03 AM JST
i = p.expect(['\[sudo\] password', 'Enter passphrase', pexpect.EOF])
* Wed 21 Aug 2013 12:18:43 AM JST

* Wed 21 Aug 2013 12:18:43 AM JST

* Wed 21 Aug 2013 12:18:43 AM JST
    i = p.expect(['\[sudo\] password', 'Enter passphrase'])

* Wed 21 Aug 2013 12:18:49 AM JST
    if i == 0:
        print('DEBUG-1-2013-08-20-144643.junk.py')
        p.sendline('Taka83 a76.')

* Wed 21 Aug 2013 12:19:15 AM JST
print(i)
* Wed 21 Aug 2013 12:19:16 AM JST

* Wed 21 Aug 2013 12:19:16 AM JST

* Wed 21 Aug 2013 12:19:16 AM JST
    print(i)

* Wed 21 Aug 2013 12:23:40 AM JST
buffer
* Wed 21 Aug 2013 12:23:42 AM JST

* Wed 21 Aug 2013 12:23:42 AM JST

* Wed 21 Aug 2013 12:23:42 AM JST
    print(p.)

* Wed 21 Aug 2013 12:23:47 AM JST
buffer
* Wed 21 Aug 2013 12:23:50 AM JST
match
* Wed 21 Aug 2013 12:23:52 AM JST

* Wed 21 Aug 2013 12:23:52 AM JST

* Wed 21 Aug 2013 12:23:52 AM JST
print(p)

* Wed 21 Aug 2013 12:34:18 AM JST

* Wed 21 Aug 2013 12:34:18 AM JST

* Wed 21 Aug 2013 12:34:18 AM JST
    # sleep(2)

* Wed 21 Aug 2013 12:34:18 AM JST
    # sleep(2)

* Wed 21 Aug 2013 12:34:18 AM JST
    # sleep(2)
    # print(p.buffer)

* Wed 21 Aug 2013 12:34:46 AM JST
getpass
* Wed 21 Aug 2013 12:38:55 AM JST

* Wed 21 Aug 2013 12:38:55 AM JST

* Wed 21 Aug 2013 12:38:55 AM JST
i = p.expect(['\[sudo\] password', 'Enter passphrase'])

* Wed 21 Aug 2013 12:38:55 AM JST
i = p.expect(['\[sudo\] password', 'Enter passphrase'])

* Wed 21 Aug 2013 12:38:55 AM JST
i = p.expect(['\[sudo\] password', 'Enter passphrase'])
print(i)

* Wed 21 Aug 2013 12:39:33 AM JST

* Wed 21 Aug 2013 12:39:33 AM JST

* Wed 21 Aug 2013 12:39:33 AM JST
# sleep(1)

* Wed 21 Aug 2013 12:39:39 AM JST
p.sendline(getpass('[sudo] password for t1: '))
* Wed 21 Aug 2013 12:39:52 AM JST

* Wed 21 Aug 2013 12:39:52 AM JST

* Wed 21 Aug 2013 12:39:52 AM JST
print(i)

* Wed 21 Aug 2013 12:42:16 AM JST

* Wed 21 Aug 2013 12:42:16 AM JST

* Wed 21 Aug 2013 12:42:16 AM JST
        print('DEBUG-1-2013-08-20-144643.junk.py')

* Wed 21 Aug 2013 12:42:17 AM JST

* Wed 21 Aug 2013 12:42:17 AM JST

* Wed 21 Aug 2013 12:42:17 AM JST
        print('DEBUG-2-2013-08-20-144643.junk.py')

* Wed 21 Aug 2013 12:42:18 AM JST

* Wed 21 Aug 2013 12:42:18 AM JST

* Wed 21 Aug 2013 12:42:18 AM JST
        print('DEBUG-3-2013-08-20-144643.junk.py')

* Wed 21 Aug 2013 12:42:58 AM JST

* Wed 21 Aug 2013 12:42:58 AM JST

* Wed 21 Aug 2013 12:42:58 AM JST
    print('DEBUG-0-2013-08-20-144643.junk.py')

* Wed 21 Aug 2013 12:44:07 AM JST

* Wed 21 Aug 2013 12:44:08 AM JST

* Wed 21 Aug 2013 12:44:08 AM JST
return

* Wed 21 Aug 2013 01:13:54 AM JST
VG-data
* Wed 21 Aug 2013 01:18:23 AM JST
"""Decrypt and mount data disk."""
* Wed 21 Aug 2013 01:19:18 AM JST
4000
* Wed 21 Aug 2013 01:19:19 AM JST
maxread=4000
* Wed 21 Aug 2013 01:19:35 AM JST

* Wed 21 Aug 2013 01:19:36 AM JST

* Wed 21 Aug 2013 01:19:36 AM JST
print(p)

* Wed 21 Aug 2013 01:19:36 AM JST
print(p)

* Wed 21 Aug 2013 01:19:36 AM JST
print(p)
print(p.buffer)

* Wed 21 Aug 2013 01:19:36 AM JST
print(p)
print(p.buffer)

* Wed 21 Aug 2013 01:19:36 AM JST
print(p)
print(p.buffer)
sys.exit()

* Wed 21 Aug 2013 01:24:01 AM JST
'/usr/bin/sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt'
* Wed 21 Aug 2013 01:27:39 AM JST
data_crypt
* Wed 21 Aug 2013 01:28:29 AM JST
i = p.expect(['\[sudo\] password', 'Enter passphrase', '[#]'])
* Wed 21 Aug 2013 01:28:39 AM JST
if i == 0:
    p.sendline(getpass('[sudo] password for t1: '))

* Wed 21 Aug 2013 01:30:32 AM JST
while 1:
    i = p.expect(['\[sudo\] password', 'Enter passphrase', '[#]'])
    print(i)
    if i == 0:
        p.sendline(getpass('[sudo] password for t1: '))
    elif i == 1:
        p.sendline(getpass('Enter passphrase for /dev/mapper/VG-data: '))
    elif i == 2:
        break

* Wed 21 Aug 2013 01:30:44 AM JST

* Wed 21 Aug 2013 01:30:44 AM JST

* Wed 21 Aug 2013 01:30:44 AM JST
            print(i)

* Wed 21 Aug 2013 01:47:13 AM JST
            
* Wed 21 Aug 2013 01:50:11 AM JST
                               
* Wed 21 Aug 2013 01:50:14 AM JST
cryptsetup' + '
* Wed 21 Aug 2013 01:51:06 AM JST
'/usr/bin/sudo /sbin/cryptsetup luksOpen {0} {1}'.format(
                                self._crypted_disk, self._decrypted_disk_name)
* Wed 21 Aug 2013 01:51:17 AM JST
            
* Wed 21 Aug 2013 01:52:35 AM JST
['\[sudo\] password', 'Enter passphrase', '[#]']
* Wed 21 Aug 2013 01:52:44 AM JST
            
* Wed 21 Aug 2013 01:52:50 AM JST
            
* Wed 21 Aug 2013 01:54:04 AM JST
                    
* Wed 21 Aug 2013 01:54:22 AM JST
                        
* Wed 21 Aug 2013 01:54:31 AM JST
                        
* Wed 21 Aug 2013 01:57:45 AM JST
3 incorrect
* Wed 21 Aug 2013 02:02:06 AM JST
expect_lis = ['\[sudo\] password', 'Enter passphrase', '[#]']
* Wed 21 Aug 2013 02:02:24 AM JST
expect_lis.append('3 incorrect')
* Wed 21 Aug 2013 02:04:21 AM JST
No key available
* Wed 21 Aug 2013 02:05:18 AM JST
'No key available'
* Wed 21 Aug 2013 02:05:45 AM JST
p.sendline(getpass('Enter passphrase for /dev/mapper/VG-data: '))
* Wed 21 Aug 2013 02:06:21 AM JST
send
* Wed 21 Aug 2013 02:06:22 AM JST
p.send
* Wed 21 Aug 2013 02:10:20 AM JST
No key available with this passphrase.
* Wed 21 Aug 2013 02:10:45 AM JST
'No key available with this passphrase. : '
* Wed 21 Aug 2013 02:10:56 AM JST
passphrase. : 
* Wed 21 Aug 2013 02:10:56 AM JST
this passphrase. : 
* Wed 21 Aug 2013 02:10:56 AM JST
with this passphrase. : 
* Wed 21 Aug 2013 02:10:57 AM JST
available with this passphrase. : 
* Wed 21 Aug 2013 02:10:57 AM JST
key available with this passphrase. : 
* Wed 21 Aug 2013 02:10:57 AM JST
No key available with this passphrase. : 
* Wed 21 Aug 2013 02:12:44 AM JST
'Enter passphrase',
* Wed 21 Aug 2013 02:13:08 AM JST
QU /tmp/junk# ssh -i ~/.ssh/kagi -p 12316 root@taka16.no-ip.info
* Wed 21 Aug 2013 02:15:29 AM JST
No key available with this passphrase. : 
* Wed 21 Aug 2013 02:27:00 AM JST
append
* Wed 21 Aug 2013 02:27:30 AM JST
    elif i == 3:
        raise StandardError()

* Wed 21 Aug 2013 02:27:55 AM JST
append
* Wed 21 Aug 2013 02:28:05 AM JST
            elif 3 == index:
                raise PasswordError()

* Wed 21 Aug 2013 02:32:05 AM JST
'3 incorrect'
* Wed 21 Aug 2013 02:32:23 AM JST
                      
* Wed 21 Aug 2013 02:32:26 AM JST
                      
* Wed 21 Aug 2013 02:32:34 AM JST

* Wed 21 Aug 2013 02:32:34 AM JST

* Wed 21 Aug 2013 02:32:34 AM JST
        expect_lis.insert(1, )

* Wed 21 Aug 2013 02:32:45 AM JST
'3 incorrect'
* Wed 21 Aug 2013 02:32:52 AM JST

* Wed 21 Aug 2013 02:32:53 AM JST

* Wed 21 Aug 2013 02:32:53 AM JST
expect_lis.insert(1, )

* Wed 21 Aug 2013 02:34:56 AM JST
'No key available with this passphrase.'
* Wed 21 Aug 2013 02:35:23 AM JST
        if 3 == err_count and p.exitstatus != 0:
            raise StandardError()

* Wed 21 Aug 2013 02:35:55 AM JST
Standard
* Wed 21 Aug 2013 02:42:48 AM JST
        
* Wed 21 Aug 2013 02:44:19 AM JST
[sudo] password for t1:
* Wed 21 Aug 2013 02:44:59 AM JST
type
* Wed 21 Aug 2013 02:45:00 AM JST
3 type
* Wed 21 Aug 2013 02:45:20 AM JST
[sudo] password for t1:
* Wed 21 Aug 2013 02:45:47 AM JST
Sorry, try again.
* Wed 21 Aug 2013 02:46:32 AM JST
sudo: 3 incorrect password attempts
* Wed 21 Aug 2013 02:48:18 AM JST
Enter passphrase for
* Wed 21 Aug 2013 02:48:52 AM JST
No key available with this passphrase.
* Wed 21 Aug 2013 02:49:03 AM JST
Enter passphrase for /dev/mapper/VG-data: 
* Wed 21 Aug 2013 02:50:15 AM JST
'No key available with this passphrase.\n
        #              Enter passphrase for /dev/mapper/VG-data: '
* Wed 21 Aug 2013 02:50:53 AM JST

* Wed 21 Aug 2013 02:50:53 AM JST

* Wed 21 Aug 2013 02:50:54 AM JST
        # Fail    [2] 'No key available with this passphrase.\n

* Wed 21 Aug 2013 02:50:54 AM JST
        # Fail    [2] 'No key available with this passphrase.\n

* Wed 21 Aug 2013 02:50:54 AM JST
        # Fail    [2] 'No key available with this passphrase.\n
        #              Enter passphrase for /dev/mapper/VG-data: '

* Wed 21 Aug 2013 02:51:38 AM JST
        ## sudo command has 3 type messages.
        # Enter   [1] '[sudo] password for t1: '
        # ReEnter [2] 'Sorry, try again.\n[sudo] password for t1: '
        # Fail    [3] 'sudo: 3 incorrect password attempts'

        ## cryptsetup luksOpen has 2 type messages.
        # Enter   [1] 'Enter passphrase for /dev/mapper/VG-data: '
        # ReEnter [2] 'No key available with this passphrase.\n
        #              Enter passphrase for /dev/mapper/VG-data: '

* Wed 21 Aug 2013 02:51:51 AM JST
        ## sudo command has 3 type messages.
        # Enter   [1] '[sudo] password for t1: '
        # ReEnter [2] 'Sorry, try again.\n[sudo] password for t1: '
        # Fail    [3] 'sudo: 3 incorrect password attempts'

        ## cryptsetup luksOpen has 2 type messages.
        # Enter   [1] 'Enter passphrase for /dev/mapper/VG-data: '
        # ReEnter [2] 'No key available with this passphrase.\n
        #              Enter passphrase for /dev/mapper/VG-data: '

* Wed 21 Aug 2013 02:52:12 AM JST
disk.


        # ##
* Wed 21 Aug 2013 02:52:14 AM JST
# ##
* Wed 21 Aug 2013 02:52:25 AM JST
## 
* Wed 21 Aug 2013 03:47:04 AM JST
    def data_mount(self):
        """SUMMARY

        @Return:
        """

* Wed 21 Aug 2013 03:58:23 AM JST
        if not self._pexpect:
            self._pexpect = pexpect.spawn('ssh ki')
            self._pexpect.expect('Last login')

* Wed 21 Aug 2013 04:00:23 AM JST
'sudo /bin/mount /dev/mapper/data_crypt /data'
* Wed 21 Aug 2013 04:08:06 AM JST
'\[sudo\] password', '3 incorrect',
                      'Enter passphrase', '[#]']
* Wed 21 Aug 2013 04:09:43 AM JST
'sudo /bin/mount /dev/mapper/{0} /data'.format(
                self._decrypted_disk_name)
* Wed 21 Aug 2013 04:09:45 AM JST
                
* Wed 21 Aug 2013 04:09:57 AM JST
            
* Wed 21 Aug 2013 04:10:29 AM JST
expect_lis = 
* Wed 21 Aug 2013 04:10:39 AM JST
expect_lis = 
* Wed 21 Aug 2013 04:10:43 AM JST
'\[sudo\] password', '3 incorrect',
                      'Enter passphrase', '[#]']
* Wed 21 Aug 2013 04:10:59 AM JST
                      
* Wed 21 Aug 2013 04:16:59 AM JST

* Wed 21 Aug 2013 04:16:59 AM JST

* Wed 21 Aug 2013 04:16:59 AM JST
        while index != 2:

* Wed 21 Aug 2013 04:17:26 AM JST

* Wed 21 Aug 2013 04:17:26 AM JST

* Wed 21 Aug 2013 04:17:26 AM JST
            expect_lis = ['\[sudo\] password', '3 incorrect', '[#]']

* Wed 21 Aug 2013 04:20:54 AM JST
getpass('[sudo] password for {0}: '.format(self._user))
* Wed 21 Aug 2013 04:21:43 AM JST

* Wed 21 Aug 2013 04:21:43 AM JST

* Wed 21 Aug 2013 04:21:43 AM JST
            elif

* Wed 21 Aug 2013 04:21:51 AM JST
else:
* Wed 21 Aug 2013 04:22:11 AM JST
                self._pexpect.sendline(
                    getpass('[sudo] password for {0}: '.format(self._user)))

* Wed 21 Aug 2013 04:22:13 AM JST

* Wed 21 Aug 2013 04:22:14 AM JST

* Wed 21 Aug 2013 04:22:14 AM JST
                break

* Wed 21 Aug 2013 04:24:46 AM JST
print('Error: sudo password')
* Wed 21 Aug 2013 04:34:25 AM JST

* Wed 21 Aug 2013 04:34:25 AM JST

* Wed 21 Aug 2013 04:34:25 AM JST
        return 0

* Wed 21 Aug 2013 04:35:36 AM JST

* Wed 21 Aug 2013 04:35:36 AM JST

* Wed 21 Aug 2013 04:35:36 AM JST
    _sudopasswd = None

* Wed 21 Aug 2013 04:37:05 AM JST
            if self._verbose:
                print(PRINTFORMAT.format('Cryptseup', 'Aleady Decrypted!!'))

* Wed 21 Aug 2013 04:41:01 AM JST

* Wed 21 Aug 2013 04:41:01 AM JST

* Wed 21 Aug 2013 04:41:01 AM JST
        else:

* Wed 21 Aug 2013 04:45:16 AM JST
self
* Wed 21 Aug 2013 04:45:17 AM JST
not self
* Wed 21 Aug 2013 04:45:56 AM JST
            if self._verbose:
                print(PRINTFORMAT.format('Cryptseup', 'Aleady Decrypted!!'))

* Wed 21 Aug 2013 04:48:31 AM JST
            if self._verbose and self.ismount():
                print(PRINTFORMAT.format('/data', 'Mounted !!'))

* Wed 21 Aug 2013 04:48:44 AM JST
ismount()
* Wed 21 Aug 2013 04:48:45 AM JST
self.ismount()
* Wed 21 Aug 2013 04:49:11 AM JST

* Wed 21 Aug 2013 04:49:11 AM JST

* Wed 21 Aug 2013 04:49:11 AM JST
        if not self.ismount():

* Wed 21 Aug 2013 04:49:22 AM JST

* Wed 21 Aug 2013 04:49:22 AM JST

* Wed 21 Aug 2013 04:49:22 AM JST
        return 0

* Wed 21 Aug 2013 04:56:13 AM JST
    def decrypt1(self):
        """Decrypt and mount data disk."""
        error_count = 0
        self.chan_cmd()
        while not self._chan.recv_ready():
            sleep(2)
        recv = self._chan.recv(9999)
        print(recv)
        print('===========')
        # self._chan.send('\n')
        # sleep(3)
        # print('===========')
        # self._chan.recv(9999)
        self._chan.send('bash\n')
        while not self._chan.recv_ready():
            sleep(2)
        recv = self._chan.recv(9999)
        print(recv)
        self._chan.send('/usr/bin/sudo /sbin/cryptsetup luksOpen /dev/mapper/VG-data data_crypt\n\n')
        while not self._chan.recv_ready():
            sleep(2)
        recv = self._chan.recv(9999)
        print(recv)
        sleep(100)
        while 1:
            # sleep(3)
            print('DEBUG-1-king.py')

            if '[sudo] password for' in recv:
                # self._sudopasswd = getpass(recv) + '\n'
                self._sudopasswd = 'Taka83 a76.\n'
                self._chan.send(self._sudopasswd)
                recv = self._chan.recv(9999)
            elif 'sudo: 3 incorrect password attempts' in recv:
                raise PasswordError
            # will get message 'No key available with this passphrase.'
            elif 'available' in recv:
                error_count += 1
                if error_count == 3:
                    raise PasswordError
                self._chan.send(getpass(recv) + '\n')
                recv = self._chan.recv(9999)
            # will get message 'Enter passphrase for'
            elif 'Enter' in recv:
                self._chan.send(getpass(recv) + '\n')
                recv = self._chan.recv(9999)
            elif recv == '\r\n':
                break
        if self.isdecrypt():
            if self._verbose:
                print(PRINTFORMAT.format('Cryptsetup', 'Decrypted OK !!'))
        else:
            print(repr(recv))
            raise DecryptError()

* Wed 21 Aug 2013 04:59:07 AM JST
data_
* Wed 21 Aug 2013 05:00:02 AM JST
destroy_crypt
* Wed 21 Aug 2013 05:10:27 AM JST
    def isactive(self):
        """Check king server is running."""
        return self.router.isactive_machine(self._ip)


* Wed 21 Aug 2013 05:22:18 AM JST
False,
* Wed 21 Aug 2013 05:22:18 AM JST
decrypt=False,
* Wed 21 Aug 2013 05:27:06 AM JST

* Wed 21 Aug 2013 05:27:06 AM JST

* Wed 21 Aug 2013 05:27:06 AM JST
            return

* Wed 21 Aug 2013 05:27:11 AM JST
and
* Wed 21 Aug 2013 05:27:14 AM JST
and
* Wed 21 Aug 2013 05:32:14 AM JST
if self.hastunnel()
* Wed 21 Aug 2013 05:32:40 AM JST

* Wed 21 Aug 2013 05:32:40 AM JST

* Wed 21 Aug 2013 05:32:40 AM JST
        if self.hastunnel() or not force:

* Wed 21 Aug 2013 05:34:59 AM JST
not
* Wed 21 Aug 2013 05:35:11 AM JST
not 
* Wed 21 Aug 2013 05:37:39 AM JST
hastunnel()
* Wed 21 Aug 2013 05:42:37 AM JST

* Wed 21 Aug 2013 05:42:37 AM JST

* Wed 21 Aug 2013 05:42:37 AM JST
        if not self.router.port.isopen() or not self.haskeyring() or force:

* Wed 21 Aug 2013 05:42:37 AM JST
        if not self.router.port.isopen() or not self.haskeyring() or force:

* Wed 21 Aug 2013 05:42:37 AM JST
        if not self.router.port.isopen() or not self.haskeyring() or force:
            self._pave_rook(force=force)

* Wed 21 Aug 2013 05:44:07 AM JST
        if self.hastunnel() or force:
            self._pave_tunnel(force=force)

* Wed 21 Aug 2013 05:50:53 AM JST

* Wed 21 Aug 2013 05:50:53 AM JST

* Wed 21 Aug 2013 05:50:53 AM JST
        # portforwarding

* Wed 21 Aug 2013 05:55:39 AM JST

* Wed 21 Aug 2013 05:55:39 AM JST

* Wed 21 Aug 2013 05:55:39 AM JST
        if not self.isactive() or force:

* Wed 21 Aug 2013 05:56:49 AM JST

* Wed 21 Aug 2013 05:56:49 AM JST

* Wed 21 Aug 2013 05:56:49 AM JST
            self._tunneling_flag = True

* Wed 21 Aug 2013 05:56:50 AM JST
            self._tunneling_flag = True

* Wed 21 Aug 2013 05:56:50 AM JST
            self._tunneling_flag = True
        else:

* Wed 21 Aug 2013 05:57:01 AM JST

* Wed 21 Aug 2013 05:57:01 AM JST

* Wed 21 Aug 2013 05:57:01 AM JST
        if self.hastunnel() or force:

* Wed 21 Aug 2013 05:58:42 AM JST
not 
* Wed 21 Aug 2013 06:04:30 AM JST
not 
* Wed 21 Aug 2013 06:06:28 AM JST

* Wed 21 Aug 2013 06:06:28 AM JST

* Wed 21 Aug 2013 06:06:28 AM JST
            # self._active_flag = True

* Wed 21 Aug 2013 06:06:29 AM JST
            # self._active_flag = True

* Wed 21 Aug 2013 06:06:29 AM JST
            # self._active_flag = True
            # if self._verbose:

* Wed 21 Aug 2013 06:06:38 AM JST

* Wed 21 Aug 2013 06:06:38 AM JST

* Wed 21 Aug 2013 06:06:38 AM JST
        # else:

* Wed 21 Aug 2013 06:06:38 AM JST
        # else:

* Wed 21 Aug 2013 06:06:38 AM JST
        # else:
            # self._active_flag = False

* Wed 21 Aug 2013 06:06:44 AM JST

* Wed 21 Aug 2013 06:06:44 AM JST

* Wed 21 Aug 2013 06:06:44 AM JST
            # self.wol()

* Wed 21 Aug 2013 06:13:15 AM JST
False
* Wed 21 Aug 2013 06:13:50 AM JST
'\rDecrypt disk? [y/n]: '
* Wed 21 Aug 2013 06:15:36 AM JST
decrypt
* Wed 21 Aug 2013 06:17:11 AM JST
king
* Wed 21 Aug 2013 06:23:05 AM JST
False
* Wed 21 Aug 2013 06:26:42 AM JST
self.pave(decrypt=False)
* Wed 21 Aug 2013 06:27:16 AM JST

* Wed 21 Aug 2013 06:27:16 AM JST

* Wed 21 Aug 2013 06:27:16 AM JST
        self.pave(decrypt=False)

* Wed 21 Aug 2013 06:28:04 AM JST
False
* Wed 21 Aug 2013 06:28:51 AM JST
force
* Wed 21 Aug 2013 06:28:53 AM JST
force
* Wed 21 Aug 2013 06:30:55 AM JST

* Wed 21 Aug 2013 06:30:55 AM JST

* Wed 21 Aug 2013 06:30:55 AM JST
        self.pave()

* Wed 21 Aug 2013 06:39:36 AM JST
del 
* Wed 21 Aug 2013 06:42:15 AM JST
None
* Wed 21 Aug 2013 06:47:16 AM JST

* Wed 21 Aug 2013 06:47:16 AM JST

* Wed 21 Aug 2013 06:47:16 AM JST
    # _wait = 1

* Wed 21 Aug 2013 06:49:43 AM JST
already 
* Wed 21 Aug 2013 06:49:49 AM JST
open
* Wed 21 Aug 2013 06:57:38 AM JST
not
* Wed 21 Aug 2013 07:02:59 AM JST
pexpect.EOF
* Wed 21 Aug 2013 07:04:01 AM JST
        if self._verbose:
            print(PRINTFORMAT.format('Wake On Lan', 'Sending Packet...'))

* Wed 21 Aug 2013 07:05:38 AM JST
data_crypt
* Wed 21 Aug 2013 07:11:56 AM JST
        #     if self._verbose:
        #         print(PRINTFORMAT.format('Check Disk', 'NOT decrypted.'))

* Wed 21 Aug 2013 07:12:10 AM JST

* Wed 21 Aug 2013 07:12:10 AM JST

* Wed 21 Aug 2013 07:12:10 AM JST
            if self._verbose:

* Wed 21 Aug 2013 07:12:35 AM JST
        #     if self._verbose:
        #         print(PRINTFORMAT.format('Cryptseup', 'Already Decrypted!!'))

* Wed 21 Aug 2013 07:12:42 AM JST
Cryptseup
* Wed 21 Aug 2013 07:12:53 AM JST
Decryp
* Wed 21 Aug 2013 07:17:53 AM JST
                      
* Wed 21 Aug 2013 07:26:36 AM JST
maxread=2000
* Wed 21 Aug 2013 07:30:44 AM JST

* Wed 21 Aug 2013 07:30:44 AM JST

* Wed 21 Aug 2013 07:30:44 AM JST
        self.decrypt()

* Wed 21 Aug 2013 07:46:01 AM JST
PRINTFORMAT
* Wed 21 Aug 2013 07:48:32 AM JST
/usr/bin/sudo
* Wed 21 Aug 2013 08:01:38 AM JST
self._decrypted_disk_name
* Wed 21 Aug 2013 08:01:39 AM JST
            self._decrypted_disk_name
* Wed 21 Aug 2013 08:01:43 AM JST
format()
* Wed 21 Aug 2013 08:18:37 AM JST
EOF
* Wed 21 Aug 2013 08:18:38 AM JST
pexpect.EOF
* Wed 21 Aug 2013 08:18:47 AM JST
                      
* Wed 21 Aug 2013 08:21:52 AM JST
sudo mount /dev/mapper/data_crypt /data
* Wed 21 Aug 2013 08:33:15 AM JST
'Taka83 a76.')
* Wed 21 Aug 2013 08:33:19 AM JST

* Wed 21 Aug 2013 08:33:19 AM JST

* Wed 21 Aug 2013 08:33:19 AM JST
        # self._pexpect.kill(0)

* Wed 21 Aug 2013 08:33:21 AM JST
        # self._pexpect.kill(0)

* Wed 21 Aug 2013 08:33:21 AM JST
        # self._pexpect.kill(0)
        # sleep(2)

* Wed 21 Aug 2013 08:36:17 AM JST
index
* Wed 21 Aug 2013 08:36:18 AM JST
3 == index
* Wed 21 Aug 2013 09:01:18 AM JST
not
* Wed 21 Aug 2013 09:01:49 AM JST

* Wed 21 Aug 2013 09:01:49 AM JST

* Wed 21 Aug 2013 09:01:49 AM JST
                print(self._pexpect)

* Wed 21 Aug 2013 09:01:51 AM JST

* Wed 21 Aug 2013 09:01:51 AM JST

* Wed 21 Aug 2013 09:01:52 AM JST
                print('DEBUG-3-king.py')

* Wed 21 Aug 2013 09:01:55 AM JST

* Wed 21 Aug 2013 09:01:55 AM JST

* Wed 21 Aug 2013 09:01:55 AM JST
                print('DEBUG-2-king.py')

* Wed 21 Aug 2013 09:01:59 AM JST

* Wed 21 Aug 2013 09:02:00 AM JST

* Wed 21 Aug 2013 09:02:00 AM JST
                print('DEBUG-1-king.py')

* Wed 21 Aug 2013 09:02:05 AM JST

* Wed 21 Aug 2013 09:02:05 AM JST

* Wed 21 Aug 2013 09:02:05 AM JST
        # self._pexpect.sendline('\r')

* Wed 21 Aug 2013 09:11:08 AM JST

* Wed 21 Aug 2013 09:11:08 AM JST

* Wed 21 Aug 2013 09:11:08 AM JST
            self._pexpect.close()

* Wed 21 Aug 2013 09:11:33 AM JST
break
* Wed 21 Aug 2013 09:15:14 AM JST
not
* Wed 21 Aug 2013 09:22:28 AM JST
cmd = '/usr/bin/sudo /bin/mount /dev/mapper/data_crypt /data'
* Wed 21 Aug 2013 09:22:48 AM JST
        print(cmd)
        self._pexpect.sendline(cmd)
        expect_lis = ['\[sudo\] password', '3 incorrect', '[#\$]']
        while 1:
            index = self._pexpect.expect(expect_lis)
            if 0 == index:
                self._pexpect.sendline(
                    getpass('[sudo] password for {0}: '.format(self._user)))
            elif 1 == index:
                print('Error: sudo password')
                raise PasswordError()
            elif 2 == index:
                break

* Wed 21 Aug 2013 09:24:22 AM JST
        if self.ismount():
            if self._verbose:
                print(PRINTFORMAT.format('/data', 'Already Mounted !!'))
            return 0

* Wed 21 Aug 2013 10:10:49 AM JST

* Wed 21 Aug 2013 10:10:49 AM JST

* Wed 21 Aug 2013 10:10:49 AM JST
    pass

* Wed 21 Aug 2013 10:23:56 AM JST

* Wed 21 Aug 2013 10:23:56 AM JST

* Wed 21 Aug 2013 10:23:56 AM JST
try:

* Wed 21 Aug 2013 10:23:57 AM JST

* Wed 21 Aug 2013 10:23:57 AM JST

* Wed 21 Aug 2013 10:23:57 AM JST
except Exception, e:

* Wed 21 Aug 2013 10:23:57 AM JST
except Exception, e:

* Wed 21 Aug 2013 10:23:57 AM JST
except Exception, e:
	pass

* Wed 21 Aug 2013 10:31:31 AM JST

* Wed 21 Aug 2013 10:31:31 AM JST

* Wed 21 Aug 2013 10:31:31 AM JST
                print('Error: sudo password')

* Wed 21 Aug 2013 10:32:06 AM JST

* Wed 21 Aug 2013 10:32:06 AM JST

* Wed 21 Aug 2013 10:32:06 AM JST
                    print('Error: cryptsetup password')

* Wed 21 Aug 2013 10:37:14 AM JST
0
* Wed 21 Aug 2013 10:40:30 AM JST
class DecryptError(Exception):
    pass

* Wed 21 Aug 2013 10:44:34 AM JST
True
* Wed 21 Aug 2013 10:44:39 AM JST
False
* Wed 21 Aug 2013 10:48:46 AM JST
def yesno(text="\rPlease enter yes/no[y/n]: "):
    """Yes No prompt.

    @Arguments:
    - `text`:

    @Return:
    yes = True
    no = False
    """
    while 1:
        sys.stdout.write(text)
        query = raw_input().lower()
        if 'y' == query[0]:
            return True
        if 'n' == query[0]:
            return False

* Wed 21 Aug 2013 10:49:27 AM JST
prompt
* Wed 21 Aug 2013 10:50:25 AM JST

* Wed 21 Aug 2013 10:50:25 AM JST

* Wed 21 Aug 2013 10:50:25 AM JST
        s.append('Decrypted flag: {0}'.format(self._decrypted_flag))

* Wed 21 Aug 2013 10:50:31 AM JST

* Wed 21 Aug 2013 10:50:31 AM JST

* Wed 21 Aug 2013 10:50:31 AM JST
    _decrypted_flag = False

* Wed 21 Aug 2013 10:50:42 AM JST

* Wed 21 Aug 2013 10:50:42 AM JST

* Wed 21 Aug 2013 10:50:42 AM JST
        s.append('Active flag: {0}'.format(self._active_flag))

* Wed 21 Aug 2013 10:50:45 AM JST

* Wed 21 Aug 2013 10:50:45 AM JST

* Wed 21 Aug 2013 10:50:45 AM JST
    _active_flag = False

* Wed 21 Aug 2013 10:50:53 AM JST
SUMMARY
* Wed 21 Aug 2013 10:59:10 AM JST
                
* Wed 21 Aug 2013 11:40:33 AM JST
print(CHAPTERFORMAT.format(' Knocking '))
* Wed 21 Aug 2013 11:46:36 AM JST
False
* Wed 21 Aug 2013 11:47:42 AM JST

* Wed 21 Aug 2013 11:47:42 AM JST

* Wed 21 Aug 2013 11:47:42 AM JST
        print(cmd)

* Wed 21 Aug 2013 11:52:48 AM JST
self._user, self._host, self._ip
* Wed 21 Aug 2013 11:55:03 AM JST
self._host, gethostbyname(self._host)
* Wed 21 Aug 2013 11:58:12 AM JST
'{0}({2})[rook]'.format(
                        self._host, gethostbyname(self._host))
* Wed 21 Aug 2013 11:58:13 AM JST
                        
* Wed 21 Aug 2013 11:59:09 AM JST
'{0}@{1}({2})[king]'.format(
                        self._user, self._host, self._ip)
* Wed 21 Aug 2013 11:59:11 AM JST
                        
* Wed 21 Aug 2013 12:05:31 PM JST
Halting
* Wed 21 Aug 2013 12:12:38 PM JST
        Arguments:
        - `hello`:
        - `wold`:

* Wed 21 Aug 2013 12:13:01 PM JST
hello
* Wed 21 Aug 2013 12:16:06 PM JST
host 
* Wed 21 Aug 2013 12:16:38 PM JST
set 
* Wed 21 Aug 2013 12:16:44 PM JST
wold
* Wed 21 Aug 2013 12:21:45 PM JST
string
* Wed 21 Aug 2013 12:21:45 PM JST
of string
* Wed 21 Aug 2013 12:21:45 PM JST
type of string
* Wed 21 Aug 2013 12:21:46 PM JST
as type of string
* Wed 21 Aug 2013 12:27:01 PM JST
converted 
* Wed 21 Aug 2013 12:29:51 PM JST
string
* Wed 21 Aug 2013 12:30:34 PM JST
location
* Wed 21 Aug 2013 12:34:22 PM JST
hello
* Wed 21 Aug 2013 12:34:27 PM JST
True
* Wed 21 Aug 2013 01:36:30 PM JST

* Wed 21 Aug 2013 01:36:30 PM JST

* Wed 21 Aug 2013 01:36:30 PM JST
    This 

* Wed 21 Aug 2013 01:44:17 PM JST
SUMMARY
* Thu 22 Aug 2013 02:11:08 AM JST
(define-key c-mode-map "(" 't1-parence)
(define-key c-mode-base-map "(" 't1-parence)

* Thu 22 Aug 2013 02:12:08 AM JST
base
* Thu 22 Aug 2013 02:12:12 AM JST
base
* Thu 22 Aug 2013 02:12:15 AM JST
base
* Thu 22 Aug 2013 02:16:17 AM JST
os.
* Fri 23 Aug 2013 12:35:55 AM JST
image-mode-map
* Fri 23 Aug 2013 12:37:12 AM JST
;;;;
* Fri 23 Aug 2013 12:37:34 AM JST

* Fri 23 Aug 2013 12:37:45 AM JST
next
* Fri 23 Aug 2013 05:51:50 AM JST

* Fri 23 Aug 2013 05:51:50 AM JST

* Fri 23 Aug 2013 05:51:50 AM JST
(define-key image-mode-map "v" 'image-next-file)

* Fri 23 Aug 2013 05:51:50 AM JST
(define-key image-mode-map "v" 'image-next-file)

* Fri 23 Aug 2013 05:51:50 AM JST
(define-key image-mode-map "v" 'image-next-file)
(define-key image-mode-map "w" 'image-previous-file)

* Fri 23 Aug 2013 08:12:17 AM JST
close()
* Fri 23 Aug 2013 08:12:17 AM JST
self.close()
* Fri 23 Aug 2013 08:12:55 AM JST
traceback
* Fri 23 Aug 2013 08:12:56 AM JST
value, traceback
* Fri 23 Aug 2013 08:12:56 AM JST
type, value, traceback
* Fri 23 Aug 2013 08:13:50 AM JST
def 
* Fri 23 Aug 2013 08:14:00 AM JST

* Fri 23 Aug 2013 08:14:01 AM JST

* Fri 23 Aug 2013 08:14:01 AM JST
__(self):

* Fri 23 Aug 2013 08:14:03 AM JST

* Fri 23 Aug 2013 08:14:03 AM JST

* Fri 23 Aug 2013 08:14:03 AM JST
        """SUMMARY

* Fri 23 Aug 2013 08:14:04 AM JST

* Fri 23 Aug 2013 08:14:04 AM JST

* Fri 23 Aug 2013 08:14:04 AM JST
        @Return:

* Fri 23 Aug 2013 08:14:05 AM JST
        @Return:

* Fri 23 Aug 2013 08:14:05 AM JST
        @Return:
        """

* Sat 24 Aug 2013 08:06:32 AM JST
    def halt(self):
        """Shutdown king server."""
        from sleep_progress import sleep_progress
        if not self.isactive():
            if self._verbose:
                print(PRINTFORMAT.format('Halting', 'Already Downed.'))
            return True
        if self._verbose:
            print(PRINTFORMAT.format('Command', 'Sending command...'))
        self._test_cmd('sudo /sbin/halt')
        # wait shutdown
        if self._verbose:
            sleep_progress(10, PRINTFORMAT.format('Waiting', '%-2d seconds'))
        else:
            sleep(10)
        for i in range(10):
            if not self.isactive():
                if self._verbose:
                    print(PRINTFORMAT.format('Halting', 'Halt OK!!'))
                break
        if 9 <= i:
            raise CMDError('Could not shutdown ki server.')
        self.router.port.close()
        if self.router.port.isopen():
            if self._verbose:
                print(PRINTFORMAT.format('Close port', 'OPEN!!'))
        return True

    def close(self):
        """Close connect."""
        if self.router:
            self.router.close()
        if self._pexpect:
            self._pexpect.close()
        if self._ssh:
            self._ssh.close()

* Sat 24 Aug 2013 08:13:57 AM JST
this
* Sat 24 Aug 2013 08:14:00 AM JST
then 
* Sat 24 Aug 2013 10:34:02 PM JST

* Sat 24 Aug 2013 10:34:02 PM JST

* Sat 24 Aug 2013 10:34:02 PM JST
    def __init__(self, ):

* Sat 24 Aug 2013 10:34:02 PM JST
    def __init__(self, ):

* Sat 24 Aug 2013 10:34:03 PM JST
    def __init__(self, ):
        """

* Sat 24 Aug 2013 10:34:03 PM JST
    def __init__(self, ):
        """

* Sat 24 Aug 2013 10:34:03 PM JST
    def __init__(self, ):
        """
        """

* Sat 24 Aug 2013 11:20:20 PM JST

* Sat 24 Aug 2013 11:20:20 PM JST

* Sat 24 Aug 2013 11:20:20 PM JST
                      # '\n***** SSH login {0}@{1}({2})[king]'.format(

* Sat 24 Aug 2013 11:20:21 PM JST
                      # '\n***** SSH login {0}@{1}({2})[king]'.format(

* Sat 24 Aug 2013 11:20:21 PM JST
                      # '\n***** SSH login {0}@{1}({2})[king]'.format(
                        # self._user, self._host, self._ip)

* Sat 24 Aug 2013 11:20:22 PM JST
                        
* Sat 24 Aug 2013 11:20:24 PM JST
                    
* Sat 24 Aug 2013 11:20:49 PM JST
                    
* Sun 25 Aug 2013 02:14:16 AM JST
                    
* Sun 25 Aug 2013 02:14:57 AM JST
    Router = Rook
* Sun 25 Aug 2013 02:15:27 AM JST
super(King, self).__init__(verbose=verbose)
* Sun 25 Aug 2013 02:15:39 AM JST
self.router = self.Router(verbose=self._verbose)
* Sun 25 Aug 2013 02:17:20 AM JST
ain(_KingPave, _KingScript, Verbose):
* Sun 25 Aug 2013 02:22:38 AM JST

* Sun 25 Aug 2013 02:22:38 AM JST

* Sun 25 Aug 2013 02:22:38 AM JST
        @Return:

* Sun 25 Aug 2013 02:22:42 AM JST
    def __str__(self):
        """This returns a human-readable string that represents the state of
        the object.

        """
        s = []
        s.append(repr(self))
        s.append('version: {0} ({1})'.format(__version__, __revision__))
        s.append('router: {0}'.format(repr(self.router)))
        s.append('host: {0}({1})'.format(gethostbyname(self._host), self._host))
        s.append('ip: {0}'.format(self._ip))
        s.append('username: {0}'.format(self._user))
        s.append('listen port: {0}'.format(self._listen_port))
        s.append('Mac address: {0}'.format(self._mac))
        s.append('SSH key: {0}'.format(self._kagi))
        s.append('SSH key md5: {0}'.format(self._kagiMD5))
        s.append('ssh: {0}'.format(repr(self._ssh)))
        s.append('ssh channel: {0}'.format(repr(self._chan)))
        s.append('sftp: {0}'.format(repr(self._sftp)))
        s.append('{0:=^10}'.format('Flag'))
        return '\n'.join(s)

* Sun 25 Aug 2013 02:23:57 AM JST
(
* Sun 25 Aug 2013 02:25:27 AM JST
        self.router = self.Router(verbose=self._verbose)
        self.script = self.KingMain()

* Sun 25 Aug 2013 02:30:50 AM JST

* Sun 25 Aug 2013 02:30:50 AM JST

* Sun 25 Aug 2013 02:30:50 AM JST
        # self._host = host

* Sun 25 Aug 2013 02:30:50 AM JST
        # self._host = host

* Sun 25 Aug 2013 02:30:51 AM JST
        # self._host = host
        # self._ip = ip

* Sun 25 Aug 2013 02:30:51 AM JST
        # self._host = host
        # self._ip = ip

* Sun 25 Aug 2013 02:30:51 AM JST
        # self._host = host
        # self._ip = ip
        # self._user = user

* Sun 25 Aug 2013 02:30:51 AM JST
        # self._host = host
        # self._ip = ip
        # self._user = user

* Sun 25 Aug 2013 02:30:51 AM JST
        # self._host = host
        # self._ip = ip
        # self._user = user
        # self._listen_port = int(listen_port)

* Sun 25 Aug 2013 02:30:51 AM JST
        # self._host = host
        # self._ip = ip
        # self._user = user
        # self._listen_port = int(listen_port)

* Sun 25 Aug 2013 02:30:51 AM JST
        # self._host = host
        # self._ip = ip
        # self._user = user
        # self._listen_port = int(listen_port)
        # self._mac = mac

* Sun 25 Aug 2013 02:30:51 AM JST
        # self._host = host
        # self._ip = ip
        # self._user = user
        # self._listen_port = int(listen_port)
        # self._mac = mac

* Sun 25 Aug 2013 02:30:51 AM JST
        # self._host = host
        # self._ip = ip
        # self._user = user
        # self._listen_port = int(listen_port)
        # self._mac = mac
        # self._kagi = kagi

* Sun 25 Aug 2013 02:30:51 AM JST
        # self._host = host
        # self._ip = ip
        # self._user = user
        # self._listen_port = int(listen_port)
        # self._mac = mac
        # self._kagi = kagi

* Sun 25 Aug 2013 02:30:51 AM JST
        # self._host = host
        # self._ip = ip
        # self._user = user
        # self._listen_port = int(listen_port)
        # self._mac = mac
        # self._kagi = kagi
        # self._kagiMD5 = kagiMD5

* Sun 25 Aug 2013 02:30:51 AM JST
        # self._host = host
        # self._ip = ip
        # self._user = user
        # self._listen_port = int(listen_port)
        # self._mac = mac
        # self._kagi = kagi
        # self._kagiMD5 = kagiMD5

* Sun 25 Aug 2013 02:30:51 AM JST
        # self._host = host
        # self._ip = ip
        # self._user = user
        # self._listen_port = int(listen_port)
        # self._mac = mac
        # self._kagi = kagi
        # self._kagiMD5 = kagiMD5
        # self._crypted_disk = crypted_disk

* Sun 25 Aug 2013 02:30:51 AM JST
        # self._host = host
        # self._ip = ip
        # self._user = user
        # self._listen_port = int(listen_port)
        # self._mac = mac
        # self._kagi = kagi
        # self._kagiMD5 = kagiMD5
        # self._crypted_disk = crypted_disk

* Sun 25 Aug 2013 02:30:52 AM JST
        # self._host = host
        # self._ip = ip
        # self._user = user
        # self._listen_port = int(listen_port)
        # self._mac = mac
        # self._kagi = kagi
        # self._kagiMD5 = kagiMD5
        # self._crypted_disk = crypted_disk
        # self._decrypted_disk_name = decrypted_disk_name

* Sun 25 Aug 2013 02:30:52 AM JST
        # self._host = host
        # self._ip = ip
        # self._user = user
        # self._listen_port = int(listen_port)
        # self._mac = mac
        # self._kagi = kagi
        # self._kagiMD5 = kagiMD5
        # self._crypted_disk = crypted_disk
        # self._decrypted_disk_name = decrypted_disk_name

* Sun 25 Aug 2013 02:30:52 AM JST
        # self._host = host
        # self._ip = ip
        # self._user = user
        # self._listen_port = int(listen_port)
        # self._mac = mac
        # self._kagi = kagi
        # self._kagiMD5 = kagiMD5
        # self._crypted_disk = crypted_disk
        # self._decrypted_disk_name = decrypted_disk_name
        # self.router = self.Router(verbose=self._verbose)

* Sun 25 Aug 2013 02:31:33 AM JST
    def halt(self):
        """Shutdown king server."""
        from sleep_progress import sleep_progress
        if not self.isactive():
            if self._verbose:
                print(PRINTFORMAT.format('Halting', 'Already Downed.'))
            return True
        if self._verbose:
            print(PRINTFORMAT.format('Command', 'Sending command...'))
        self._test_cmd('/usr/bin/sudo /sbin/halt')
        # wait shutdown
        if self._verbose:
            sleep_progress(10, PRINTFORMAT.format('Waiting', '%-2d seconds'))
        else:
            sleep(10)
        for i in range(10):
            if not self.isactive():
                if self._verbose:
                    print(PRINTFORMAT.format('Halting', 'Halt OK!!'))
                break
        if 9 <= i:
            raise CMDError('Could not shutdown ki server.')
        self.router.port.close()
        if self.router.port.isopen():
            if self._verbose:
                print(PRINTFORMAT.format('Close port', 'OPEN!!'))
        return True


* Sun 25 Aug 2013 02:32:29 AM JST
"""Shutdown king server."""
* Sun 25 Aug 2013 02:33:13 AM JST
_KingScript, 
* Sun 25 Aug 2013 02:33:14 AM JST
_KingPave, _KingScript, 
* Sun 25 Aug 2013 02:33:29 AM JST

* Sun 25 Aug 2013 02:33:29 AM JST

* Sun 25 Aug 2013 02:33:29 AM JST
    Router = Rook

* Sun 25 Aug 2013 02:35:15 AM JST
"""Check king server is running."""
* Sun 25 Aug 2013 02:36:51 AM JST
kagi
* Sun 25 Aug 2013 02:48:00 AM JST

* Sun 25 Aug 2013 02:48:00 AM JST

* Sun 25 Aug 2013 02:48:00 AM JST
        s.append('{0:=^10}'.format('Flag'))

* Sun 25 Aug 2013 02:57:45 AM JST
__version__, __revision__
* Sun 25 Aug 2013 02:58:45 AM JST
({1})
* Sun 25 Aug 2013 02:58:54 AM JST
format(gethostbyname(self._host), self._host))
* Sun 25 Aug 2013 02:59:10 AM JST
self.'
* Sun 25 Aug 2013 03:02:55 AM JST
        
* Sun 25 Aug 2013 03:15:54 AM JST

* Sun 25 Aug 2013 03:15:54 AM JST

* Sun 25 Aug 2013 03:15:54 AM JST
        s.append(repr(self))

* Sun 25 Aug 2013 06:59:02 AM JST
ki = 
* Sun 25 Aug 2013 06:59:10 AM JST
king.King(verbose=args.silent)
* Sun 25 Aug 2013 06:59:59 AM JST

* Sun 25 Aug 2013 06:59:59 AM JST

* Sun 25 Aug 2013 06:59:59 AM JST
            sys.exit()

* Sun 25 Aug 2013 07:00:14 AM JST
decrypt=args.no_decrypt
* Sun 25 Aug 2013 07:06:16 AM JST
ki.pave(decrypt=args.no_decrypt)
* Sun 25 Aug 2013 07:07:19 AM JST

* Sun 25 Aug 2013 07:07:19 AM JST

* Sun 25 Aug 2013 07:07:19 AM JST
    ki = King(verbose=args.verbose)

* Sun 25 Aug 2013 07:08:30 AM JST
    parser.add_argument('-s', '--silent',
                        dest='silent',
                        action='store_false',
                        default=True,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)
                        help='No verbosly')

* Sun 25 Aug 2013 07:08:58 AM JST
verbose
* Sun 25 Aug 2013 07:16:36 AM JST

* Sun 25 Aug 2013 07:16:36 AM JST

* Sun 25 Aug 2013 07:16:36 AM JST
                print(CHAPTERFORMAT.format(' Wake On Lan '))

* Sun 25 Aug 2013 08:01:05 AM JST

* Sun 25 Aug 2013 08:01:05 AM JST
        print('king.py [1]: isactive') # Debug
* Sun 25 Aug 2013 08:01:05 AM JST
        print('king.py [1]: isactive') # Debug

* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug

* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug


* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug


* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug



* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug



* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug




* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug




* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug





* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug





* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug






* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug






* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug







* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug







* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug








* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug








* Sun 25 Aug 2013 08:01:06 AM JST
        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug









* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug









* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug










* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug










* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug











* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug











* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug












* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug












* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug













* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug













* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug














* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug














* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug















* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug















* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug
















* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug
















* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug

















* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug

















* Sun 25 Aug 2013 08:01:07 AM JST
        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug


















* Sun 25 Aug 2013 08:01:08 AM JST
        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug


















* Sun 25 Aug 2013 08:01:08 AM JST
        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug



















* Sun 25 Aug 2013 08:01:08 AM JST
        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug



















* Sun 25 Aug 2013 08:01:08 AM JST
        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug




















* Sun 25 Aug 2013 08:01:08 AM JST
        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug




















* Sun 25 Aug 2013 08:01:08 AM JST
        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug





















* Sun 25 Aug 2013 08:01:08 AM JST
        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug





















* Sun 25 Aug 2013 08:01:08 AM JST
        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug






















* Sun 25 Aug 2013 08:01:08 AM JST
        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug






















* Sun 25 Aug 2013 08:01:08 AM JST
        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug























* Sun 25 Aug 2013 08:01:09 AM JST
        print('king.py [24]: __del__') # Debug        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug























* Sun 25 Aug 2013 08:01:09 AM JST
        print('king.py [24]: __del__') # Debug        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug
























* Sun 25 Aug 2013 08:01:09 AM JST
        print('king.py [25]: __enter__') # Debug        print('king.py [24]: __del__') # Debug        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug
























* Sun 25 Aug 2013 08:01:09 AM JST
        print('king.py [25]: __enter__') # Debug        print('king.py [24]: __del__') # Debug        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug

























* Sun 25 Aug 2013 08:01:09 AM JST
        print('king.py [26]: __exit__') # Debug        print('king.py [25]: __enter__') # Debug        print('king.py [24]: __del__') # Debug        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug

























* Sun 25 Aug 2013 08:01:09 AM JST
        print('king.py [26]: __exit__') # Debug        print('king.py [25]: __enter__') # Debug        print('king.py [24]: __del__') # Debug        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug


























* Sun 25 Aug 2013 08:01:09 AM JST
        print('king.py [27]: isactive') # Debug        print('king.py [26]: __exit__') # Debug        print('king.py [25]: __enter__') # Debug        print('king.py [24]: __del__') # Debug        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug


























* Sun 25 Aug 2013 08:01:09 AM JST
        print('king.py [27]: isactive') # Debug        print('king.py [26]: __exit__') # Debug        print('king.py [25]: __enter__') # Debug        print('king.py [24]: __del__') # Debug        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug



























* Sun 25 Aug 2013 08:01:09 AM JST
        print('king.py [28]: halt') # Debug        print('king.py [27]: isactive') # Debug        print('king.py [26]: __exit__') # Debug        print('king.py [25]: __enter__') # Debug        print('king.py [24]: __del__') # Debug        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug



























* Sun 25 Aug 2013 08:01:09 AM JST
        print('king.py [28]: halt') # Debug        print('king.py [27]: isactive') # Debug        print('king.py [26]: __exit__') # Debug        print('king.py [25]: __enter__') # Debug        print('king.py [24]: __del__') # Debug        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug




























* Sun 25 Aug 2013 08:01:09 AM JST
        print('king.py [29]: close') # Debug        print('king.py [28]: halt') # Debug        print('king.py [27]: isactive') # Debug        print('king.py [26]: __exit__') # Debug        print('king.py [25]: __enter__') # Debug        print('king.py [24]: __del__') # Debug        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug




























* Sun 25 Aug 2013 08:01:09 AM JST
        print('king.py [29]: close') # Debug        print('king.py [28]: halt') # Debug        print('king.py [27]: isactive') # Debug        print('king.py [26]: __exit__') # Debug        print('king.py [25]: __enter__') # Debug        print('king.py [24]: __del__') # Debug        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug





























* Sun 25 Aug 2013 08:01:09 AM JST
    print('king.py [30]: _main') # Debug        print('king.py [29]: close') # Debug        print('king.py [28]: halt') # Debug        print('king.py [27]: isactive') # Debug        print('king.py [26]: __exit__') # Debug        print('king.py [25]: __enter__') # Debug        print('king.py [24]: __del__') # Debug        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug





























* Sun 25 Aug 2013 08:01:09 AM JST
    print('king.py [30]: _main') # Debug        print('king.py [29]: close') # Debug        print('king.py [28]: halt') # Debug        print('king.py [27]: isactive') # Debug        print('king.py [26]: __exit__') # Debug        print('king.py [25]: __enter__') # Debug        print('king.py [24]: __del__') # Debug        print('king.py [23]: __str__') # Debug        print('king.py [22]: __init__') # Debug        print('king.py [21]: __str__') # Debug        print('king.py [20]: __init__') # Debug        print('king.py [19]: halt') # Debug        print('king.py [18]: _test_cmd') # Debug        print('king.py [17]: chan_cmd') # Debug        print('king.py [16]: _connect') # Debug        print('king.py [15]: cmd') # Debug        print('king.py [14]: _sftp_connect') # Debug        print('king.py [13]: upload') # Debug        print('king.py [12]: umount_data') # Debug        print('king.py [11]: mount_data') # Debug        print('king.py [10]: close_data') # Debug        print('king.py [9]: decrypt') # Debug        print('king.py [8]: isdecrypt') # Debug        print('king.py [7]: ismount') # Debug        print('king.py [6]: _pave_disk') # Debug        print('king.py [5]: _pave_tunnel') # Debug        print('king.py [4]: _pave_rook') # Debug        print('king.py [3]: wol') # Debug        print('king.py [2]: pave') # Debug        print('king.py [1]: isactive') # Debug






























* Sun 25 Aug 2013 08:01:22 AM JST
    
* Sun 25 Aug 2013 08:01:58 AM JST
    
* Sun 25 Aug 2013 09:13:59 AM JST
flag
* Sun 25 Aug 2013 09:14:31 AM JST

* Sun 25 Aug 2013 09:14:31 AM JST

* Sun 25 Aug 2013 09:14:31 AM JST
import sys

* Sun 25 Aug 2013 09:39:16 AM JST

* Sun 25 Aug 2013 09:39:16 AM JST

* Sun 25 Aug 2013 09:39:16 AM JST
import os

* Sun 25 Aug 2013 09:39:16 AM JST
import os

* Sun 25 Aug 2013 09:39:16 AM JST
import os
import sys

* Sun 25 Aug 2013 09:39:16 AM JST
import os
import sys

* Sun 25 Aug 2013 09:39:16 AM JST
import os
import sys
import re

* Sun 25 Aug 2013 09:44:30 AM JST
'/root/.local/share/Trash/'
* Sun 25 Aug 2013 09:47:03 AM JST
'/data/.Trash-0/'
* Sun 25 Aug 2013 12:54:22 PM JST

* Sun 25 Aug 2013 12:54:22 PM JST

* Sun 25 Aug 2013 12:54:22 PM JST
        """SUMMARY

* Sun 25 Aug 2013 12:54:23 PM JST

* Sun 25 Aug 2013 12:54:23 PM JST

* Sun 25 Aug 2013 12:54:23 PM JST
        @Return:

* Sun 25 Aug 2013 12:54:24 PM JST
        @Return:

* Sun 25 Aug 2013 12:54:24 PM JST
        @Return:
        """

* Sun 25 Aug 2013 12:59:41 PM JST

* Sun 25 Aug 2013 12:59:41 PM JST

* Sun 25 Aug 2013 12:59:41 PM JST
    @property

* Sun 25 Aug 2013 12:59:42 PM JST

* Sun 25 Aug 2013 12:59:42 PM JST

* Sun 25 Aug 2013 12:59:42 PM JST
        """SUMMARY

* Sun 25 Aug 2013 12:59:43 PM JST

* Sun 25 Aug 2013 12:59:43 PM JST

* Sun 25 Aug 2013 12:59:43 PM JST
        @Return:

* Sun 25 Aug 2013 12:59:43 PM JST
        @Return:

* Sun 25 Aug 2013 12:59:43 PM JST
        @Return:
        """

* Sun 25 Aug 2013 12:59:45 PM JST

* Sun 25 Aug 2013 12:59:45 PM JST

* Sun 25 Aug 2013 12:59:45 PM JST
    @property

* Sun 25 Aug 2013 12:59:46 PM JST

* Sun 25 Aug 2013 12:59:46 PM JST

* Sun 25 Aug 2013 12:59:46 PM JST
    @property

* Mon 26 Aug 2013 03:51:07 AM JST
True
* Mon 26 Aug 2013 03:51:07 AM JST
detail = True
* Mon 26 Aug 2013 03:51:11 AM JST

* Mon 26 Aug 2013 03:51:11 AM JST

* Mon 26 Aug 2013 03:51:11 AM JST
        self._detail = detail

* Mon 26 Aug 2013 03:51:23 AM JST
def my_pyreverse(target, dir_, detail=True):
    """Pyreverse command.

    @Arguments:
    - `target`:
    - `dst`:
    - `detail`:

    @Return:
    """
    # detarmine pyreverse bin_
    if 'nt' == _os.name:
        bin_ = 'pyreverse.bat'
    elif 'posix' == _os.name:
        bin_ = 'pyreverse'

    # check exists pyreverse bin_
    if not which(bin_):
        raise IOError('File does not exists: %s' % bin_)

    # destination directory
    dst_dir = _os.path.join(dir_, 'UML')
    # if not exists create it.
    if not _os.path.exists(dst_dir):
        _os.mkdir(dst_dir)

    # do exec
    # there are two option.
    # simple output or detail output
    name = _os.path.basename(dir_)
    if detail:
        _os.system('{0} -SAmy -o png -p {1} {2}'.format(bin_, name, target))
    else:
        name = 'Simple_' + name
        _os.system('{0} -o png -p {1} {2}'.format(bin_, name, target))

    # check output
    src_name = 'classes_{0}.png'.format(name)
    src = _os.path.abspath(src_name)
    # if not exists src, raise error
    path_checker(src)

    # finalyze
    dst = _os.path.join(dst_dir, src_name)
    # first then remove it, if exists dst file.
    if _os.path.exists(dst):
        _os.remove(dst)
    if _os.path.exists(src):
        shutil.move(src, dst)
    elif not _os.path.exists(src):
        raise IOError('File does not exists: %s' % src)

* Mon 26 Aug 2013 03:51:35 AM JST
dir_, 
* Mon 26 Aug 2013 03:51:35 AM JST
target, dir_, 
* Mon 26 Aug 2013 03:51:37 AM JST

* Mon 26 Aug 2013 03:51:37 AM JST

* Mon 26 Aug 2013 03:51:37 AM JST
        - `target`:

* Mon 26 Aug 2013 03:51:37 AM JST
        - `target`:

* Mon 26 Aug 2013 03:51:38 AM JST
        - `target`:
        - `dst`:

* Mon 26 Aug 2013 03:55:35 AM JST
'{0} -SAmy -o png -p {1} {2}'.format(bin_, name, self._target)
* Mon 26 Aug 2013 03:55:48 AM JST
'{0} -o png -p {1} {2}'.format(bin_, name, self._target)
* Mon 26 Aug 2013 03:55:57 AM JST

* Mon 26 Aug 2013 03:55:57 AM JST

* Mon 26 Aug 2013 03:55:57 AM JST
            _os.system()

* Mon 26 Aug 2013 03:55:59 AM JST

* Mon 26 Aug 2013 03:55:59 AM JST

* Mon 26 Aug 2013 03:55:59 AM JST
            _os.system()

* Mon 26 Aug 2013 03:56:48 AM JST
# 
* Mon 26 Aug 2013 03:56:48 AM JST
        # 
* Mon 26 Aug 2013 03:58:02 AM JST
def my_epydoc(target, dir_):
    """Epydoc command.

    @Arguments:
    - `target`:

    @Return:
    """
    if not _os.path.isabs(target):
        raise ValueError('Set absolute path: %s' % target)

    # check exists epydoc
    bin_ = 'epydoc'
    if not which(bin_):
        raise IOError('File does not exists: %s' % bin_)

    # destination directory
    dst = _os.path.join(dir_, 'epydoc_html')

    # do exec
    _os.system('{0} --graph all --html --output {1} {2}'.format(bin_, dst, target))

    # check output
    if not _os.path.exists(dst):
        raise IOError('File does not exists: %s' % dst)

* Mon 26 Aug 2013 03:59:05 AM JST
'{0} --graph all --html --output {1} {2}'.format(bin_, dst, self._target)
* Mon 26 Aug 2013 04:01:49 AM JST
my_
* Mon 26 Aug 2013 04:05:02 AM JST
def my_doxygen(target, dir_):
    """Doxygen command.

    @Return:
    """
    if 'nt' == _os.name:
        dox_bin = 'doxygen.exe'
        doxygen_conf = _os.path.join(DRIVE_DIR, 'Dos/graphviz/doxygen.conf')
    elif 'posix' == _os.name:
        dox_bin = 'doxygen'
        doxygen_conf = _os.path.expanduser('~/.emacs.d/data_e/doxygen.conf')

    dox_output = 'doxygen_html'
    # check doxygen exec file
    if not which(dox_bin):
        raise IOError('File does not exists: %s' % dox_bin)

    # check doxygen config and target files
    for item in [doxygen_conf, target]:
        path_checker(item)

    # set flag if exists target
    isfile = _os.path.isfile(target)

    # create tmp directory and go to directory if target is file, .
    if isfile:
        tempdir = tempfile.mkdtemp()
        shutil.copy2(target, tempdir)
        _os.chdir(tempdir)
    else:
        _os.chdir(_os.path.dirname(target))

    # Execute doxygen
    _os.system(dox_bin + ' ' + doxygen_conf)

    path_checker(dox_output)

    # move outputed directory to orig path if target is file
    if isfile:
        shutil.copytree(dox_output, _os.path.join(dir_, dox_output))

* Mon 26 Aug 2013 04:05:18 AM JST
dir_
* Mon 26 Aug 2013 04:05:19 AM JST
target, dir_
* Mon 26 Aug 2013 08:50:45 AM JST
USER
* Mon 26 Aug 2013 10:56:04 AM JST
self.router
* Mon 26 Aug 2013 10:59:19 AM JST

* Mon 26 Aug 2013 10:59:19 AM JST

* Mon 26 Aug 2013 10:59:19 AM JST
        """SUMMARY

* Mon 26 Aug 2013 10:59:19 AM JST

* Mon 26 Aug 2013 10:59:19 AM JST

* Mon 26 Aug 2013 10:59:19 AM JST
        @Return:

* Mon 26 Aug 2013 10:59:20 AM JST
        @Return:

* Mon 26 Aug 2013 10:59:20 AM JST
        @Return:
        """

* Mon 26 Aug 2013 10:59:22 AM JST

* Mon 26 Aug 2013 10:59:22 AM JST

* Mon 26 Aug 2013 10:59:22 AM JST
        """SUMMARY

* Mon 26 Aug 2013 10:59:22 AM JST

* Mon 26 Aug 2013 10:59:22 AM JST

* Mon 26 Aug 2013 10:59:22 AM JST
        @Return:

* Mon 26 Aug 2013 10:59:23 AM JST
        @Return:

* Mon 26 Aug 2013 10:59:23 AM JST
        @Return:
        """

* Mon 26 Aug 2013 06:14:47 PM JST
Rsync
* Mon 26 Aug 2013 06:14:48 PM JST
for Rsync
* Mon 26 Aug 2013 06:15:46 PM JST
link_dest_opt = '--link-dest='
* Mon 26 Aug 2013 06:16:03 PM JST
rsync_cmd = '/usr/bin/rsync'
* Mon 26 Aug 2013 06:21:29 PM JST
Rsync
* Mon 26 Aug 2013 06:22:53 PM JST
full_ext = '.full'
incr_ext = '.incr'

* Tue 27 Aug 2013 01:48:22 AM JST
['/backup',
                  '/share/*',
                  '/data/*',
                  '/lost+found',
                  '/sys/*',
                  '/dev/*',
                  '/media/*',
                  '/proc/*',
                  '/tmp/*',
                  '/run/*',
                  '/mnt',
                  '/lib/udev/devices/console',
                  '/lib/udev/devices/loop0',
                  '/lib/udev/devices/null',
                  '/lib/udev/devices/ppp',
                  '/lib/udev/devices/net/tun',
                  '/etc/fstab',
                  '/etc/crypttab',
                  '/var/run/*',
                  '/var/lock/*',
                  '/lib/modules/*/volatile/.mounted',
                  '/var/cache/apt/archive/*',
                  '/home/*/.mozilla/firefox/*.default/Cache/*',
                  '/home/*/.cache/google-chrome/Default/*',
                  '/root/.mozilla/firefox/*.default/Cache/*',
                  '/root/.cache/google-chrome/Default/*',
                  '/root/.local/share/Trash/files/*',
                  '/root/.local/share/Trash/info/*', ]
* Tue 27 Aug 2013 01:48:29 AM JST
backup',
* Tue 27 Aug 2013 01:48:31 AM JST
                
* Tue 27 Aug 2013 01:51:07 AM JST
'%Y%m%d'
* Tue 27 Aug 2013 02:07:37 AM JST
ext
* Tue 27 Aug 2013 02:07:45 AM JST
ex
* Tue 27 Aug 2013 02:07:45 AM JST
self.ex
* Tue 27 Aug 2013 02:07:53 AM JST
ext
* Tue 27 Aug 2013 02:08:00 AM JST
ext
* Tue 27 Aug 2013 02:12:52 AM JST
str(
* Tue 27 Aug 2013 02:13:01 AM JST
                
* Tue 27 Aug 2013 02:13:14 AM JST
                    
* Tue 27 Aug 2013 02:17:49 AM JST
from types import StringType, ListType
* Tue 27 Aug 2013 02:20:06 AM JST
            raise ValueError('Set only string or list type.'
                             '\nYou setted {0}'.format(type(ext)))

* Tue 27 Aug 2013 02:20:20 AM JST
ext
* Tue 27 Aug 2013 02:23:55 AM JST
            raise ValueError('Set only string or list type.'
                             '\nYou setted {0}'.format(type(opt)))

* Tue 27 Aug 2013 02:23:59 AM JST
opt
* Tue 27 Aug 2013 02:25:31 AM JST
excludes))
* Tue 27 Aug 2013 02:25:31 AM JST
set(excludes))
* Tue 27 Aug 2013 02:25:32 AM JST
list(set(excludes))
* Tue 27 Aug 2013 02:26:12 AM JST
list(set(options))
* Tue 27 Aug 2013 02:34:21 AM JST
path
* Tue 27 Aug 2013 02:34:21 AM JST
os.path
* Tue 27 Aug 2013 02:36:18 AM JST

* Tue 27 Aug 2013 02:36:18 AM JST

* Tue 27 Aug 2013 02:36:18 AM JST
        assert (dest == StringType)

* Tue 27 Aug 2013 02:43:45 AM JST
True
* Tue 27 Aug 2013 02:44:21 AM JST
if log:
* Tue 27 Aug 2013 02:47:53 AM JST
None
* Tue 27 Aug 2013 02:48:09 AM JST
logging.
* Tue 27 Aug 2013 02:49:19 AM JST
        if not _os.path.exists(dest):
            raise ValueError('{0} does not exists')

* Tue 27 Aug 2013 02:49:23 AM JST
dest
* Tue 27 Aug 2013 02:51:49 AM JST
ln_cmd = '/bin/ln'
rm_cmd = '/bin/rm'
du_cmd = '/usr/bin/du'

* Tue 27 Aug 2013 02:57:30 AM JST
class CmdMissingError(Exception):
    pass


* Tue 27 Aug 2013 02:58:09 AM JST
cmd = {'ln': '/bin/ln',
       'rm': '/bin/rm',
       'du': '/usr/bin/du',
       'rsync': '/usr/bin/rsync'}

* Tue 27 Aug 2013 02:59:56 AM JST
Missing 
* Tue 27 Aug 2013 03:02:40 AM JST
key, 
* Tue 27 Aug 2013 03:03:06 AM JST

* Tue 27 Aug 2013 03:03:06 AM JST

* Tue 27 Aug 2013 03:03:06 AM JST
link_dest = '--link-dest='

* Tue 27 Aug 2013 03:05:41 AM JST
target
* Tue 27 Aug 2013 03:37:06 AM JST

* Tue 27 Aug 2013 03:37:06 AM JST

* Tue 27 Aug 2013 03:37:07 AM JST
def test():

* Tue 27 Aug 2013 03:37:07 AM JST
def test():

* Tue 27 Aug 2013 03:37:07 AM JST
def test():
    pass

* Tue 27 Aug 2013 03:42:45 AM JST
glob(_os.path.join(self._dest, '*') + self._full_ext) == []
* Tue 27 Aug 2013 03:47:40 AM JST
full
* Tue 27 Aug 2013 03:51:27 AM JST

* Tue 27 Aug 2013 03:51:27 AM JST

* Tue 27 Aug 2013 03:51:27 AM JST
    _datefmt = '%Y%m%d'

* Tue 27 Aug 2013 03:53:04 AM JST
self._inc
* Tue 27 Aug 2013 03:55:58 AM JST
pass
* Tue 27 Aug 2013 04:14:53 AM JST
(defun )
* Tue 27 Aug 2013 04:18:49 AM JST
(search-forward "king")
* Tue 27 Aug 2013 04:20:56 AM JST
    
* Tue 27 Aug 2013 04:25:25 AM JST
(defun replace_king_get ()
  ""
  (interactive)
  (save-restriction
    (narrow-to-region (bol) (eol))
    (beginning-of-line)
    (replace-string "[" "(")
    (replace-string "]" ")")
    (goto-char (bol))
    (search-forward "king")
    (insert ".get")
    )
  )
* Tue 27 Aug 2013 04:25:35 AM JST
king
* Tue 27 Aug 2013 04:49:48 AM JST
, 
* Tue 27 Aug 2013 04:50:06 AM JST
.split(':')
* Tue 27 Aug 2013 04:51:38 AM JST
0]
* Tue 27 Aug 2013 04:51:39 AM JST
dest[0]
* Tue 27 Aug 2013 05:02:01 AM JST
None
* Tue 27 Aug 2013 05:06:52 AM JST
_os.
* Tue 27 Aug 2013 05:07:23 AM JST

* Tue 27 Aug 2013 05:07:23 AM JST

* Tue 27 Aug 2013 05:07:23 AM JST
import os as _os

* Tue 27 Aug 2013 05:27:38 AM JST
if :
* Tue 27 Aug 2013 05:27:49 AM JST
CHAPTERFORMAT.format(' Knocking ')
* Tue 27 Aug 2013 05:27:59 AM JST
PRINTFORMAT.format(
                'Open port', self.host + ':' + str(self.listen_port)))
* Tue 27 Aug 2013 05:28:03 AM JST
                
* Tue 27 Aug 2013 05:28:56 AM JST
            
* Tue 27 Aug 2013 05:30:04 AM JST
:
* Tue 27 Aug 2013 05:30:12 AM JST
CHAPTERFORMAT.format(' Knocking ')
* Tue 27 Aug 2013 05:30:30 AM JST
PRINTFORMAT.format(
                'Close port', self.host +':'+ str(self.listen_port))
* Tue 27 Aug 2013 05:30:35 AM JST
                
* Tue 27 Aug 2013 05:31:01 AM JST
self.host +':'+ str(self.listen_port)
* Tue 27 Aug 2013 05:31:12 AM JST
                               
* Tue 27 Aug 2013 05:31:56 AM JST
PRINTFORMAT.format('Port: ' + str(self._listen_port),
                                             'OPENED!!')
* Tue 27 Aug 2013 05:32:23 AM JST
                                             
* Tue 27 Aug 2013 05:33:26 AM JST
PRINTFORMAT.format('Check has keys', 'Has keys.')
* Tue 27 Aug 2013 05:34:25 AM JST
PRINTFORMAT.format('Check has keys',
                                                 'Not has keys!!')
* Tue 27 Aug 2013 05:34:29 AM JST
                                                 
* Tue 27 Aug 2013 05:38:57 AM JST
                            
* Tue 27 Aug 2013 05:39:48 AM JST
            
* Tue 27 Aug 2013 05:40:04 AM JST
            
* Tue 27 Aug 2013 05:40:13 AM JST
                    
* Tue 27 Aug 2013 05:40:28 AM JST
                                   
* Tue 27 Aug 2013 05:53:09 AM JST
        from tempfile import mkdtemp
        self._mnt = mkdtemp(dir='/mnt')

* Tue 27 Aug 2013 05:55:42 AM JST

* Tue 27 Aug 2013 05:55:43 AM JST

* Tue 27 Aug 2013 05:55:43 AM JST
            self._globpath = _ospath.join(self._mnt, self._dest)

* Tue 27 Aug 2013 05:55:44 AM JST

* Tue 27 Aug 2013 05:55:44 AM JST

* Tue 27 Aug 2013 05:55:44 AM JST
            self._globpath = self._dest

* Tue 27 Aug 2013 05:55:49 AM JST

* Tue 27 Aug 2013 05:55:49 AM JST

* Tue 27 Aug 2013 05:55:49 AM JST
    _globpath = ''

* Tue 27 Aug 2013 05:57:30 AM JST
                    
* Tue 27 Aug 2013 05:58:32 AM JST
Popen(['/bin/umount', '/data'])
* Tue 27 Aug 2013 05:59:10 AM JST
umount'
* Tue 27 Aug 2013 05:59:10 AM JST
bin/umount'
* Tue 27 Aug 2013 05:59:21 AM JST
data
* Tue 27 Aug 2013 06:02:47 AM JST
              
* Tue 27 Aug 2013 06:03:37 AM JST
mnt'
* Tue 27 Aug 2013 06:09:41 AM JST
        if self._remote and not self._tmpmnt:
            self._sshfs()

* Tue 27 Aug 2013 06:10:20 AM JST

* Tue 27 Aug 2013 06:10:20 AM JST

* Tue 27 Aug 2013 06:10:20 AM JST
        dest = self._backup

* Tue 27 Aug 2013 06:15:08 AM JST
COLLECTION
* Tue 27 Aug 2013 06:17:08 AM JST
rsyn
* Tue 27 Aug 2013 06:18:33 AM JST
            
* Tue 27 Aug 2013 06:24:04 AM JST
not
* Tue 27 Aug 2013 06:35:20 AM JST
datetime.date.today().strftime(date_format)
* Tue 27 Aug 2013 06:35:26 AM JST
date_format
* Tue 27 Aug 2013 06:38:02 AM JST
datetime.date.today().strftime(self._datefmt)
* Tue 27 Aug 2013 06:38:43 AM JST

* Tue 27 Aug 2013 06:38:43 AM JST

* Tue 27 Aug 2013 06:38:43 AM JST
    @property

* Tue 27 Aug 2013 06:39:55 AM JST
                     
* Tue 27 Aug 2013 06:40:50 AM JST
_dest
* Tue 27 Aug 2013 06:40:50 AM JST
self._dest
* Tue 27 Aug 2013 06:43:35 AM JST
ext
* Tue 27 Aug 2013 06:48:18 AM JST
CalledProcessError
* Tue 27 Aug 2013 06:53:19 AM JST
    def fullbackup(self):
        """SUMMARY

        @Return:
        """
        
        cmdline = ' '.join([cmd.get('rsync')] +
                            self._opt +
                            ['--exclude=' + x for x in self._excludes] +
                            [self._target, self.backuppath])
        print(cmdline)
        try:
            check_call(cmdline, shell=True)
        except CalledProcessError:
            sys.exit(1)

    def incrementalbackup(self):
        """SUMMARY

        @Return:
        """
        pass


* Tue 27 Aug 2013 06:54:19 AM JST
        cmdline = ' '.join([cmd.get('rsync')] +
                            self._opt +
                            ['--exclude=' + x for x in self._excludes] +
                            [self._target, self.backuppath])

* Tue 27 Aug 2013 06:54:44 AM JST
cmdline = 
* Tue 27 Aug 2013 07:18:24 AM JST
'--link-dest='
* Tue 27 Aug 2013 07:52:33 AM JST

* Tue 27 Aug 2013 07:52:33 AM JST

* Tue 27 Aug 2013 07:52:33 AM JST
    _latest_realpath = ''

* Tue 27 Aug 2013 08:35:53 AM JST
self._tmpmnt, self._dest
* Tue 27 Aug 2013 08:36:34 AM JST
latest'
* Tue 27 Aug 2013 08:37:48 AM JST

* Tue 27 Aug 2013 08:37:48 AM JST

* Tue 27 Aug 2013 08:37:48 AM JST
        pass

* Tue 27 Aug 2013 08:44:29 AM JST
self._tmpmnt, self._dest
* Tue 27 Aug 2013 08:44:32 AM JST
self._tmpmnt, self._dest, self._latest
* Tue 27 Aug 2013 08:45:38 AM JST
self._tmpmnt, self._dest, self._latest)
* Tue 27 Aug 2013 08:45:39 AM JST
            self._tmpmnt, self._dest, self._latest)
* Tue 27 Aug 2013 08:45:40 AM JST
join(
* Tue 27 Aug 2013 08:53:03 AM JST
'--link-dest=' + self.linkrealpath
* Tue 27 Aug 2013 08:53:08 AM JST

* Tue 27 Aug 2013 08:53:08 AM JST

* Tue 27 Aug 2013 08:53:08 AM JST
        linkdest = 

* Tue 27 Aug 2013 09:12:13 AM JST
    @property
    def backuppath(self):
        """SUMMARY

        @Return:
        """
        if self._backuped_path:
            return self._backuped_path
        if self.fullexists():
            ext = self._full_ext
        else:
            ext = self._incr_ext
        self._backupname = datetime.date.today().strftime(self._datefmt) + ext
        self._backuped_path = _ospath.join(self._remote + self._dest,
                                           self._backupname)
        return self._backuped_path

* Tue 27 Aug 2013 09:25:08 AM JST

* Tue 27 Aug 2013 09:25:08 AM JST

* Tue 27 Aug 2013 09:25:08 AM JST
            ext = self._full_ext

* Tue 27 Aug 2013 09:25:11 AM JST

* Tue 27 Aug 2013 09:25:11 AM JST

* Tue 27 Aug 2013 09:25:11 AM JST
            ext = self._incr_ext

* Tue 27 Aug 2013 09:37:20 AM JST
os.system("ssh ki '{0} -s {1} {2}'".format(ln_cmd, dest_dir, latest))
* Tue 27 Aug 2013 09:39:50 AM JST
self._dest,
                                           self._backupname
* Tue 27 Aug 2013 09:39:58 AM JST
                                           
* Tue 27 Aug 2013 09:42:28 AM JST
                                        
* Tue 27 Aug 2013 10:01:26 AM JST
['--exclude=' + x for x in self._excludes]
* Tue 27 Aug 2013 10:03:30 AM JST

* Tue 27 Aug 2013 10:03:30 AM JST

* Tue 27 Aug 2013 10:03:30 AM JST
                        ['--exclude=' + x for x in self._excludes] +

* Tue 27 Aug 2013 10:04:09 AM JST
                        
* Tue 27 Aug 2013 10:04:10 AM JST
                        
* Tue 27 Aug 2013 10:11:07 AM JST

* Tue 27 Aug 2013 10:11:07 AM JST

* Tue 27 Aug 2013 10:11:07 AM JST
            print('DEBUG-1-RsyncBackup.py')

* Tue 27 Aug 2013 10:12:45 AM JST

* Tue 27 Aug 2013 10:12:45 AM JST

* Tue 27 Aug 2013 10:12:45 AM JST
            print('DEBUG-1-RsyncBackup.py')

* Tue 27 Aug 2013 10:58:44 AM JST
        for v in [src, dest]:
            if not _ospath.exists(v):
                raise ValueError('{0} does not exists'.format(v))


* Tue 27 Aug 2013 11:03:26 AM JST
--rsync-path="sudo rsync"
* Tue 27 Aug 2013 11:12:22 AM JST
_tmpdir
* Tue 27 Aug 2013 11:18:09 AM JST
              
* Tue 27 Aug 2013 11:28:59 AM JST
_ospath.realpath(_ospath.join(self._tmpmnt, self._latest))
* Tue 27 Aug 2013 11:37:03 AM JST
            # tmp = _ospath.realpath(_ospath.join(self._tmpmnt, self._latest))
* Tue 27 Aug 2013 11:37:11 AM JST
tmp = 
* Tue 27 Aug 2013 11:56:02 AM JST
    def _add2list(self, list_, additions):
        """SUMMARY



        @Arguments:

        - `list_`:
        - `additions`:

        @Return: unique list
        """
        from types import StringType, ListType
        if type(additions) == StringType:
            list_.append(additions)
        elif type(additions) == ListType:
            list_ += additions
        else:
            raise ValueError('Set only string or list type.'
                             '\nYou setted {0}'.format(type(additions)))
        return list(set(list_))

* Tue 27 Aug 2013 11:56:26 AM JST
self, 
* Tue 27 Aug 2013 11:57:21 AM JST
_
* Tue 27 Aug 2013 11:57:22 AM JST
self._
* Tue 27 Aug 2013 11:58:36 AM JST
_
* Tue 27 Aug 2013 11:58:36 AM JST
self._
* Tue 27 Aug 2013 12:35:26 PM JST
(glob(_ospath.join(self._tmpmnt, self._dest, '*')
                     + self._full_ext) != [])
* Tue 27 Aug 2013 02:15:53 PM JST
class LinkDestBackup(object):
    """
    """
    _datefmt = '%Y%m%d'
    _full_ext = '.full'
    _incr_ext = '.incr'
    _opt = ['-a']
    _link_dest = '--link-dest='
    _excludes = ['/share/*',
                '/data/*',
                '/lost+found',
                '/sys/*',
                '/dev/*',
                '/media/*',
                '/proc/*',
                '/tmp/*',
                '/run/*',
                '/mnt/*',
                '/lib/udev/devices/console',
                '/lib/udev/devices/loop0',
                '/lib/udev/devices/null',
                '/lib/udev/devices/ppp',
                '/lib/udev/devices/net/tun',
                '/etc/fstab',
                '/etc/crypttab',
                '/var/run/*',
                '/var/lock/*',
                '/lib/modules/*/volatile/.mounted',
                '/var/cache/apt/archive/*',
                '/home/*/.mozilla/firefox/*.default/Cache/*',
                '/home/*/.cache/google-chrome/Default/*',
                '/root/.mozilla/firefox/*.default/Cache/*',
                '/root/.cache/google-chrome/Default/*',
                '/root/.local/share/Trash/files/*',
                '/root/.local/share/Trash/info/*', ]
    _lotate_max = 30
    _log = logging
    # _remote = ''
    # _mnt = '/mnt'
    # _tmpmnt = ''
    _backuped_path = ''
    _latest = 'latest'

    def __init__(self, src, dest, log_name=None):
        print('RsyncBackup.py [2]: __init__') # Debug
        """

        Arguments:
        - `src`:
        - `dest`:
        """
        if log_name:
            self._log.basicConfig(filename=_ospath.join('/var/log', log_name),
                                    level=logging.DEBUG,
                                    format='%(asctime)s %(message)s')
        else:
            self._log = None

        self.src = src
        if ':' in dest:
            dest = dest.split(':')
            self._dest = dest.pop()
            self._remote = ':'.join(dest) + ':'
            self.sshfs()
        else:
            self._dest = dest

        # for v in [src, dest]:
            # if not _ospath.exists(v):
                # raise ValueError('{0} does not exists'.format(v))


        self._full_backup_name = self._datefmt + self._full_ext
        self._incr_backup_name = self._datefmt + self._incr_ext

    def append_exclude(self, ext):
        print('RsyncBackup.py [3]: append_exclude') # Debug
        """SUMMARY

        @Arguments:

        - `ext`:

        @Return:
        """
        self._excludes = add2list(self._excludes, ext)

    def add_opt(self, opt):
        print('RsyncBackup.py [4]: add_opt') # Debug
        """SUMMARY

        @Arguments:

        - `opt`:

        @Return:
        """
        self._opt = add2list(self._opt, opt)

    def backup(self):
        print('RsyncBackup.py [5]: backup') # Debug
        """SUMMARY

        @Return:
        """
        if self._remote and not self._tmpmnt:
            self.sshfs()

        if self.isfullexists():
            self.incrementalbackup()
        else:
            self.fullbackup()

    def fullbackup(self):
        print('RsyncBackup.py [6]: fullbackup') # Debug
        """SUMMARY

        @Return:
        """
        cmdline = self.getcmdline()
        print(cmdline)
        try:
            check_call(cmdline, shell=True)
        except CalledProcessError:
            sys.exit(1)
        self.make_latest_link()

    def incrementalbackup(self):
        print('RsyncBackup.py [7]: incrementalbackup') # Debug
        """SUMMARY

        @Return:
        """
        if -1 == ''.join(self._opt).find('--link-dest='):
            self._opt.append('--link-dest=' + self.linkrealpath)
        cmdline = self.getcmdline()
        print(cmdline)
        try:
            check_call(cmdline, shell=True)
        except CalledProcessError:
            sys.exit()
        self.make_latest_link()

    def getcmdline(self):
        print('RsyncBackup.py [8]: getcmdline') # Debug
        """SUMMARY

        @Return:
        """
        return ' '.join([cmd.get('rsync')] + [self.options] +
                        [self.src, self.backuppath])

    @property
    def options(self):
        print('RsyncBackup.py [9]: options') # Debug
        """SUMMARY

        @Return:
        """
        return ' '.join(self._opt + [self.excludes])

    @property
    def excludes(self):
        print('RsyncBackup.py [10]: excludes') # Debug
        """SUMMARY

        @Return:
        """
        return ' '.join(['--exclude=' + x for x in self._excludes])

    @property
    def linkrealpath(self):
        print('RsyncBackup.py [11]: linkrealpath') # Debug
        """SUMMARY

        @Return:
        """
        return _ospath.realpath(
            _ospath.join(self._tmpmnt, self._dest, self._latest))

    @property
    def backuppath(self):
        print('RsyncBackup.py [12]: backuppath') # Debug
        """SUMMARY

        @Return:
        """
        if self._backuped_path:
            return self._backuped_path
        if self.isfullexists():
            ext = self._incr_ext
        else:
            ext = self._full_ext
        self._backupname = datetime.date.today().strftime(self._datefmt) + ext
        self._backuped_path = _ospath.join(self._remote + self._dest,
                                           self._backupname)
        return self._backuped_path

    def sshfs(self):
        print('RsyncBackup.py [13]: sshfs') # Debug
        """SUMMARY

        @Return:
        """
        self._tmpdir()
        call([cmd.get('sshfs'), ''.join([self._remote, self._dest]),
              self._tmpmnt])

    def _tmpdir(self):
        print('RsyncBackup.py [14]: _tmpdir') # Debug
        """SUMMARY

        @Return:
        """
        from tempfile import mkdtemp
        Popen([cmd.get('umount'), self._mnt])
        self._tmpmnt = mkdtemp(dir=self._mnt)

    def isfullexists(self):
        print('RsyncBackup.py [15]: isfullexists') # Debug
        """SUMMARY

        @Return:
        """
        return (glob(_ospath.join(self._tmpmnt, self._dest, '*')
                     + self._full_ext) != [])


    def make_latest_link(self):
        print('RsyncBackup.py [16]: make_latest_link') # Debug
        """SUMMARY

        @Return:
        """
        if self._remote:
            os.system(
                "ssh ki '{0} --force -s {1} {2}'".format(cmd.get('ln'),
                                                 self._dest + self._backupname,
                                                 self._latest))
        else:
            os.system('{0} --force -s {1} {2}'.format(cmd.get('ln'),
                                              self._backuped_path,
                                              self._latest))

* Tue 27 Aug 2013 02:16:32 PM JST

* Tue 27 Aug 2013 02:16:32 PM JST

* Tue 27 Aug 2013 02:16:32 PM JST
    # _remote = ''

* Tue 27 Aug 2013 02:16:32 PM JST
    # _remote = ''

* Tue 27 Aug 2013 02:16:33 PM JST
    # _remote = ''
    # _mnt = '/mnt'

* Tue 27 Aug 2013 02:16:33 PM JST
    # _remote = ''
    # _mnt = '/mnt'

* Tue 27 Aug 2013 02:16:33 PM JST
    # _remote = ''
    # _mnt = '/mnt'
    # _tmpmnt = ''

* Tue 27 Aug 2013 02:16:57 PM JST

* Tue 27 Aug 2013 02:16:57 PM JST

* Tue 27 Aug 2013 02:16:57 PM JST
        if ':' in dest:

* Tue 27 Aug 2013 02:16:57 PM JST
        if ':' in dest:

* Tue 27 Aug 2013 02:16:57 PM JST
        if ':' in dest:
            dest = dest.split(':')

* Tue 27 Aug 2013 02:16:58 PM JST
        if ':' in dest:
            dest = dest.split(':')

* Tue 27 Aug 2013 02:16:58 PM JST
        if ':' in dest:
            dest = dest.split(':')
            self._dest = dest.pop()

* Tue 27 Aug 2013 02:16:58 PM JST
        if ':' in dest:
            dest = dest.split(':')
            self._dest = dest.pop()

* Tue 27 Aug 2013 02:16:58 PM JST
        if ':' in dest:
            dest = dest.split(':')
            self._dest = dest.pop()
            self._remote = ':'.join(dest) + ':'

* Tue 27 Aug 2013 02:16:58 PM JST
        if ':' in dest:
            dest = dest.split(':')
            self._dest = dest.pop()
            self._remote = ':'.join(dest) + ':'

* Tue 27 Aug 2013 02:16:58 PM JST
        if ':' in dest:
            dest = dest.split(':')
            self._dest = dest.pop()
            self._remote = ':'.join(dest) + ':'
            self.sshfs()

* Tue 27 Aug 2013 02:16:59 PM JST
        if ':' in dest:
            dest = dest.split(':')
            self._dest = dest.pop()
            self._remote = ':'.join(dest) + ':'
            self.sshfs()

* Tue 27 Aug 2013 02:16:59 PM JST
        if ':' in dest:
            dest = dest.split(':')
            self._dest = dest.pop()
            self._remote = ':'.join(dest) + ':'
            self.sshfs()
        else:

* Tue 27 Aug 2013 02:17:47 PM JST
dest
* Tue 27 Aug 2013 02:17:55 PM JST
dest
* Tue 27 Aug 2013 02:22:02 PM JST

* Tue 27 Aug 2013 02:22:02 PM JST

* Tue 27 Aug 2013 02:22:02 PM JST
        else:

* Tue 27 Aug 2013 02:22:23 PM JST
_tmpmnt,
* Tue 27 Aug 2013 02:22:24 PM JST
self._tmpmnt,
* Tue 27 Aug 2013 02:22:30 PM JST
                     
* Tue 27 Aug 2013 02:55:22 PM JST
        cmdline = self.cmdline
        print(cmdline)
        try:
            check_call(cmdline, shell=True)
        except CalledProcessError:
            sys.exit()
        self.make_latest_link()

* Tue 27 Aug 2013 02:56:46 PM JST
    def _backup(self):
        """SUMMARY
        
        @Return:
        """
        cmdline = self.cmdline
        print(cmdline)
        try:
            check_call(cmdline, shell=True)
        except CalledProcessError:
            sys.exit()
        self.make_latest_link()
        

* Tue 27 Aug 2013 02:57:32 PM JST
add
* Tue 27 Aug 2013 02:57:39 PM JST
append
* Tue 27 Aug 2013 02:57:43 PM JST
append
* Tue 27 Aug 2013 02:58:28 PM JST
_tmpmnt, 
* Tue 27 Aug 2013 02:58:28 PM JST
self._tmpmnt, 
* Tue 27 Aug 2013 02:58:32 PM JST
            
* Tue 27 Aug 2013 03:16:24 PM JST
_remote + 
* Tue 27 Aug 2013 03:16:27 PM JST
_remote + 
* Tue 27 Aug 2013 03:16:27 PM JST
self._remote + 
* Tue 27 Aug 2013 03:16:29 PM JST
                                           
* Tue 27 Aug 2013 03:17:14 PM JST

* Tue 27 Aug 2013 03:17:14 PM JST

* Tue 27 Aug 2013 03:17:14 PM JST
from os import path as _ospath

* Tue 27 Aug 2013 03:29:02 PM JST
        if self._isfullexists():
            ext = self._incr_ext
        else:
            ext = self._full_ext
        self._bkupname = datetime.date.today().strftime(self._datefmt) + ext

* Tue 27 Aug 2013 03:30:31 PM JST

* Tue 27 Aug 2013 03:30:31 PM JST

* Tue 27 Aug 2013 03:30:31 PM JST
            return self._bkupname

* Tue 27 Aug 2013 03:31:15 PM JST

* Tue 27 Aug 2013 03:31:15 PM JST

* Tue 27 Aug 2013 03:31:15 PM JST
            return self._bkupfullpath

* Tue 27 Aug 2013 03:36:14 PM JST
    @property
    def bkupfullpath(self):
        print('RsyncBackup.py [12]: backuppath') # Debug
        """SUMMARY

        @Return:
        """
        if not self._bkupfullpath:
            self._bkupfullpath = _os.path.join(self.bkupdir, self.bkupname)
        return self._bkupfullpath

    @property
    def bkupname(self):
        """SUMMARY

        @Return:
        """
        if not self._bkupname:
            if self._isfullexists():
                ext = self._incr_ext
            else:
                ext = self._full_ext
            self._bkupname = datetime.date.today().strftime(self._datefmt) + ext
        return self._bkupname


* Tue 27 Aug 2013 03:48:39 PM JST
_isfullexists()
* Tue 27 Aug 2013 03:48:39 PM JST
self._isfullexists()
* Tue 27 Aug 2013 03:49:50 PM JST
self.bkupmethod
* Tue 27 Aug 2013 03:52:12 PM JST
_os.path.realpath(_os.path.join(self.bkupdir, self._linkname))
* Tue 27 Aug 2013 03:53:44 PM JST
        try:
            check_call(cmdline, shell=True)
        except CalledProcessError:
            sys.exit()

* Tue 27 Aug 2013 03:54:09 PM JST
'{0} --force -s {1} {2}'.format(cmd.get('ln'),
                                              self._bkupfullpath,
                                              self._linkname)
* Tue 27 Aug 2013 03:54:39 PM JST
                                              
* Tue 27 Aug 2013 03:54:46 PM JST
                                              
* Tue 27 Aug 2013 03:54:49 PM JST

* Tue 27 Aug 2013 03:54:49 PM JST

* Tue 27 Aug 2013 03:54:50 PM JST
        _os.system()

* Tue 27 Aug 2013 03:54:52 PM JST
cmdline
* Tue 27 Aug 2013 03:56:26 PM JST
['/share/*',
                '/data/*',
                '/lost+found',
                '/sys/*',
                '/dev/*',
                '/media/*',
                '/proc/*',
                '/tmp/*',
                '/run/*',
                '/mnt/*',
                '/lib/udev/devices/console',
                '/lib/udev/devices/loop0',
                '/lib/udev/devices/null',
                '/lib/udev/devices/ppp',
                '/lib/udev/devices/net/tun',
                '/etc/fstab',
                '/etc/crypttab',
                '/var/run/*',
                '/var/lock/*',
                '/lib/modules/*/volatile/.mounted',
                '/var/cache/apt/archive/*',
                '/home/*/.mozilla/firefox/*.default/Cache/*',
                '/home/*/.cache/google-chrome/Default/*',
                '/root/.mozilla/firefox/*.default/Cache/*',
                '/root/.cache/google-chrome/Default/*',
                '/root/.local/share/Trash/files/*',
                '/root/.local/share/Trash/info/*', ]
* Tue 27 Aug 2013 03:57:11 PM JST
'%Y%m%d'
* Tue 27 Aug 2013 04:03:09 PM JST
                              
* Tue 27 Aug 2013 04:07:43 PM JST

* Tue 27 Aug 2013 04:07:43 PM JST

* Tue 27 Aug 2013 04:07:43 PM JST
import datetime

* Tue 27 Aug 2013 04:07:56 PM JST
datetime.
* Tue 27 Aug 2013 04:13:12 PM JST
'%Y%m%d'
* Tue 27 Aug 2013 04:30:12 PM JST

* Tue 27 Aug 2013 04:30:12 PM JST
    print('RsyncBackup.py [1]: add2list') # Debug
* Tue 27 Aug 2013 04:30:13 PM JST
    print('RsyncBackup.py [1]: add2list') # Debug

* Tue 27 Aug 2013 04:30:13 PM JST
        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug

* Tue 27 Aug 2013 04:30:13 PM JST
        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug


* Tue 27 Aug 2013 04:30:13 PM JST
        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug


* Tue 27 Aug 2013 04:30:13 PM JST
        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug



* Tue 27 Aug 2013 04:30:13 PM JST
        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug



* Tue 27 Aug 2013 04:30:13 PM JST
        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug




* Tue 27 Aug 2013 04:30:13 PM JST
        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug




* Tue 27 Aug 2013 04:30:13 PM JST
        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug





* Tue 27 Aug 2013 04:30:14 PM JST
        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug





* Tue 27 Aug 2013 04:30:14 PM JST
        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug






* Tue 27 Aug 2013 04:30:14 PM JST
        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug






* Tue 27 Aug 2013 04:30:14 PM JST
        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug







* Tue 27 Aug 2013 04:30:14 PM JST
        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug







* Tue 27 Aug 2013 04:30:14 PM JST
        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug








* Tue 27 Aug 2013 04:30:14 PM JST
        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug








* Tue 27 Aug 2013 04:30:14 PM JST
        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug









* Tue 27 Aug 2013 04:30:14 PM JST
        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug









* Tue 27 Aug 2013 04:30:15 PM JST
        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug










* Tue 27 Aug 2013 04:30:15 PM JST
        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug










* Tue 27 Aug 2013 04:30:15 PM JST
        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug











* Tue 27 Aug 2013 04:30:15 PM JST
        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug











* Tue 27 Aug 2013 04:30:15 PM JST
        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug












* Tue 27 Aug 2013 04:30:15 PM JST
        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug












* Tue 27 Aug 2013 04:30:15 PM JST
        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug













* Tue 27 Aug 2013 04:30:15 PM JST
        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug













* Tue 27 Aug 2013 04:30:15 PM JST
        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug














* Tue 27 Aug 2013 04:30:16 PM JST
        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug














* Tue 27 Aug 2013 04:30:16 PM JST
        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug















* Tue 27 Aug 2013 04:30:16 PM JST
        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug















* Tue 27 Aug 2013 04:30:16 PM JST
        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug
















* Tue 27 Aug 2013 04:30:16 PM JST
        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug
















* Tue 27 Aug 2013 04:30:16 PM JST
        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug

















* Tue 27 Aug 2013 04:30:16 PM JST
        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug

















* Tue 27 Aug 2013 04:30:16 PM JST
        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug


















* Tue 27 Aug 2013 04:30:16 PM JST
        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug


















* Tue 27 Aug 2013 04:30:17 PM JST
        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug



















* Tue 27 Aug 2013 04:30:17 PM JST
        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug



















* Tue 27 Aug 2013 04:30:17 PM JST
        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug




















* Tue 27 Aug 2013 04:30:17 PM JST
        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug




















* Tue 27 Aug 2013 04:30:17 PM JST
        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug





















* Tue 27 Aug 2013 04:30:17 PM JST
        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug





















* Tue 27 Aug 2013 04:30:18 PM JST
        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug






















* Tue 27 Aug 2013 04:30:18 PM JST
        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug






















* Tue 27 Aug 2013 04:30:18 PM JST
        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug























* Tue 27 Aug 2013 04:30:18 PM JST
        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug























* Tue 27 Aug 2013 04:30:18 PM JST
        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug
























* Tue 27 Aug 2013 04:30:18 PM JST
        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug
























* Tue 27 Aug 2013 04:30:18 PM JST
        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug

























* Tue 27 Aug 2013 04:30:18 PM JST
        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug

























* Tue 27 Aug 2013 04:30:18 PM JST
        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug


























* Tue 27 Aug 2013 04:30:19 PM JST
        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug


























* Tue 27 Aug 2013 04:30:19 PM JST
        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug



























* Tue 27 Aug 2013 04:30:19 PM JST
        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug



























* Tue 27 Aug 2013 04:30:19 PM JST
        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug




























* Tue 27 Aug 2013 04:30:19 PM JST
        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug




























* Tue 27 Aug 2013 04:30:19 PM JST
        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug





























* Tue 27 Aug 2013 04:30:19 PM JST
    print('RsyncBackup.py [17]: test') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug





























* Tue 27 Aug 2013 04:30:19 PM JST
    print('RsyncBackup.py [17]: test') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug        print('RsyncBackup.py [16]: make_latest_link') # Debug        print('RsyncBackup.py [15]: isfullexists') # Debug        print('RsyncBackup.py [14]: _tmpdir') # Debug        print('RsyncBackup.py [13]: sshfs') # Debug        print('RsyncBackup.py [12]: backuppath') # Debug        print('RsyncBackup.py [11]: linkrealpath') # Debug        print('RsyncBackup.py [10]: excludes') # Debug        print('RsyncBackup.py [9]: options') # Debug        print('RsyncBackup.py [8]: getcmdline') # Debug        print('RsyncBackup.py [7]: incrementalbackup') # Debug        print('RsyncBackup.py [6]: fullbackup') # Debug        print('RsyncBackup.py [5]: backup') # Debug        print('RsyncBackup.py [4]: add_opt') # Debug        print('RsyncBackup.py [3]: append_exclude') # Debug        print('RsyncBackup.py [2]: __init__') # Debug    print('RsyncBackup.py [1]: add2list') # Debug






























* Tue 27 Aug 2013 06:22:31 PM JST

* Tue 27 Aug 2013 06:22:32 PM JST

* Tue 27 Aug 2013 06:22:32 PM JST
            print('DEBUG-3-RsyncBackup.py')

* Tue 27 Aug 2013 06:22:36 PM JST

* Tue 27 Aug 2013 06:22:36 PM JST

* Tue 27 Aug 2013 06:22:36 PM JST
            print('DEBUG-4-RsyncBackup.py')

* Tue 27 Aug 2013 06:22:38 PM JST

* Tue 27 Aug 2013 06:22:38 PM JST

* Tue 27 Aug 2013 06:22:38 PM JST
        print('DEBUG-5-RsyncBackup.py')

* Tue 27 Aug 2013 06:22:46 PM JST

* Tue 27 Aug 2013 06:22:46 PM JST

* Tue 27 Aug 2013 06:22:46 PM JST
        print('DEBUG-2-RsyncBackup.py')

* Tue 27 Aug 2013 06:22:50 PM JST

* Tue 27 Aug 2013 06:22:50 PM JST

* Tue 27 Aug 2013 06:22:50 PM JST
        print('DEBUG-1-RsyncBackup.py')

* Tue 27 Aug 2013 10:25:59 PM JST
check_
* Tue 27 Aug 2013 10:26:00 PM JST

* Tue 27 Aug 2013 10:26:00 PM JST

* Tue 27 Aug 2013 10:26:00 PM JST
        try:

* Tue 27 Aug 2013 10:26:02 PM JST

* Tue 27 Aug 2013 10:26:02 PM JST

* Tue 27 Aug 2013 10:26:02 PM JST
        except CalledProcessError:

* Tue 27 Aug 2013 10:26:02 PM JST
        except CalledProcessError:

* Tue 27 Aug 2013 10:26:02 PM JST
        except CalledProcessError:
            sys.exit(1)

* Wed 28 Aug 2013 03:55:40 AM JST
                                                  
* Wed 28 Aug 2013 03:56:33 AM JST
            
* Wed 28 Aug 2013 04:13:51 AM JST
    
* Wed 28 Aug 2013 04:25:59 AM JST
if :
* Wed 28 Aug 2013 04:26:00 AM JST
        if :
* Wed 28 Aug 2013 04:33:59 AM JST

* Wed 28 Aug 2013 04:34:00 AM JST

* Wed 28 Aug 2013 04:34:00 AM JST
import shutil

* Wed 28 Aug 2013 04:35:59 AM JST
len(globs) <= self._lotate_max
* Wed 28 Aug 2013 04:36:03 AM JST

* Wed 28 Aug 2013 04:36:03 AM JST

* Wed 28 Aug 2013 04:36:03 AM JST
if :

* Wed 28 Aug 2013 04:36:04 AM JST
if :

* Wed 28 Aug 2013 04:36:04 AM JST
if :
            return

* Wed 28 Aug 2013 04:36:29 AM JST
len(globs)
* Wed 28 Aug 2013 04:36:35 AM JST
self._lotate_max
* Wed 28 Aug 2013 04:46:28 AM JST

* Wed 28 Aug 2013 04:46:28 AM JST

* Wed 28 Aug 2013 04:46:28 AM JST
            if self._log:

* Wed 28 Aug 2013 04:46:28 AM JST
            if self._log:

* Wed 28 Aug 2013 04:46:28 AM JST
            if self._log:
                self._log.log(10, 'Skip: lotate')

* Wed 28 Aug 2013 04:47:20 AM JST
globs.sort().pop(0)
* Wed 28 Aug 2013 04:49:41 AM JST
.log(10, 'Link: {0}'.format(cmdline))
* Wed 28 Aug 2013 04:52:17 AM JST
        if self._log:
            self._log.log(10, 'Start: Backup')

* Wed 28 Aug 2013 04:52:37 AM JST
            if self._log:
                self._log.log(10, 'Start: Incremental Backup')

* Wed 28 Aug 2013 04:52:42 AM JST
Incremental
* Wed 28 Aug 2013 04:53:48 AM JST

* Wed 28 Aug 2013 04:53:48 AM JST

* Wed 28 Aug 2013 04:53:49 AM JST
        self.makelink()

* Wed 28 Aug 2013 05:10:32 AM JST
def disk_usage(path):
    st = os.statvfs(path)
    free = st.f_bavail * st.f_frsize
    total = st.f_blocks * st.f_frsize
    used = (st.f_blocks - st.f_bfree) * st.f_frsize
    return _ntuple_diskusage(total, used, free)

* Wed 28 Aug 2013 05:12:36 AM JST
_ntuple_diskusage = collections.namedtuple('usage', 'total used free')
* Wed 28 Aug 2013 05:13:04 AM JST
import collections
* Wed 28 Aug 2013 05:15:34 AM JST
total=461159194624L, used=357879996416L, free=79846830080L)
* Wed 28 Aug 2013 05:18:48 AM JST
print('total: {0}, free: {1}, used: {2}'.format(bytes2human(usage.total),
                                                bytes2human(usage.free),
                                                bytes2human(usage.used)))

* Wed 28 Aug 2013 05:19:12 AM JST
print('total: {0}, free: {1}, used: {2}'.format(bytes2human(usage.total),
                                                bytes2human(usage.free),
                                                bytes2human(usage.used)))

* Wed 28 Aug 2013 05:19:54 AM JST
def bytes2human(n):
    symbols = ('K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y')
    prefix = {}
    for i, s in enumerate(symbols):
        prefix[s] = 1 << (i+1)*10
    for s in reversed(symbols):
        if n >= prefix[s]:
            value = float(n) / prefix[s]
            return '%.1f%s' % (value, s)
    return "%sB" % n

* Wed 28 Aug 2013 05:29:48 AM JST

* Wed 28 Aug 2013 05:29:50 AM JST
total
* Wed 28 Aug 2013 05:30:25 AM JST

* Wed 28 Aug 2013 05:30:28 AM JST
usage
* Wed 28 Aug 2013 05:37:03 AM JST
st = os.statvfs('/data')
* Wed 28 Aug 2013 05:37:23 AM JST
20130828.full
* Wed 28 Aug 2013 05:42:16 AM JST
stat
* Wed 28 Aug 2013 05:42:23 AM JST
st_size
* Wed 28 Aug 2013 05:44:51 AM JST
full
* Wed 28 Aug 2013 05:44:52 AM JST
20130828.full
* Wed 28 Aug 2013 05:44:55 AM JST
tes/20130828.full
* Wed 28 Aug 2013 05:44:55 AM JST
backup/tes/20130828.full
* Wed 28 Aug 2013 06:24:52 AM JST

* Wed 28 Aug 2013 06:24:52 AM JST

* Wed 28 Aug 2013 06:24:52 AM JST
import 

* Wed 28 Aug 2013 06:27:00 AM JST
# check platform
if 'nt' == os.name:
    sys.exit('Not support WindowsNT.')

# check root
if not os.geteuid() == 0:
    sys.exit('Script must be run as root.')

* Wed 28 Aug 2013 06:27:47 AM JST
# define Max incremental backup
MAX = 30

* Wed 28 Aug 2013 06:27:59 AM JST
log_name = 'backup.log'
log_base_dir = '/var/log'
log_path = os.path.join(log_base_dir, log_name)

* Wed 28 Aug 2013 06:28:24 AM JST
# define backup directory name
backup_name = 'knight'
backup_base_dir = '/data/.backup'
backup_path = os.path.join(backup_base_dir, backup_name)

* Wed 28 Aug 2013 06:28:33 AM JST
# define log file name
* Wed 28 Aug 2013 06:29:48 AM JST
## auto backup run only runlevel 3
#
if option.auto:
    ps = Popen(['/sbin/runlevel'], stdout=PIPE)
    out, err = ps.communicate()
    if 'N 2\n' != out:
        sys.exit()
    if not ki.router.haskeyring():
        pass

* Wed 28 Aug 2013 06:31:22 AM JST

* Wed 28 Aug 2013 06:31:22 AM JST

* Wed 28 Aug 2013 06:31:22 AM JST
    if not ki.router.haskeyring():

* Wed 28 Aug 2013 06:31:23 AM JST
    if not ki.router.haskeyring():

* Wed 28 Aug 2013 06:31:23 AM JST
    if not ki.router.haskeyring():
        pass

* Wed 28 Aug 2013 06:31:26 AM JST

* Wed 28 Aug 2013 06:31:26 AM JST

* Wed 28 Aug 2013 06:31:26 AM JST
if option.auto:

* Wed 28 Aug 2013 06:36:03 AM JST
# define Max incremental backup
MAX = 30


* Wed 28 Aug 2013 06:36:10 AM JST
# define log file name
log_name = 'backup_ni.log'
log_base_dir = '/var/log'
log_path = os.path.join(log_base_dir, log_name)

# define backup directory name
backup_name = 'knight_local'
backup_base_dir = '/data/.backup'
backup_path = os.path.join(backup_base_dir, backup_name)

# define Max incremental backup
MAX = 30

* Wed 28 Aug 2013 06:39:47 AM JST
logging.basicConfig(filename=log_path,
                    level=logging.DEBUG,
                    format='%(asctime)s %(message)s')

* Wed 28 Aug 2013 06:43:39 AM JST
'{0:*^10}'.format('Started Backup')
* Wed 28 Aug 2013 06:44:55 AM JST
'Not decrypted. Will Exit.'
* Wed 28 Aug 2013 06:45:28 AM JST
/dev/mapper/data
* Wed 28 Aug 2013 06:45:45 AM JST
notdecrypt_msg = 'Failed: Not decrypted /dev/mapper/data. Will Exit.'
* Wed 28 Aug 2013 06:45:47 AM JST
notdecrypt_msg
* Wed 28 Aug 2013 06:49:08 AM JST
'Failed: Not decrypted /dev/mapper/data. Will Exit.'
* Wed 28 Aug 2013 06:49:34 AM JST
'Failed: Not exists {0}'.format(backup_path)
* Wed 28 Aug 2013 06:49:49 AM JST
MSG = {'nodecrypt': 'Failed: Not decrypted /dev/mapper/data. Will Exit.',
       '': 'Failed: Not exists {0}'.format(backup_path)}


* Wed 28 Aug 2013 06:50:18 AM JST

* Wed 28 Aug 2013 06:50:18 AM JST

* Wed 28 Aug 2013 06:50:18 AM JST
    notdecrypt_msg = 'Failed: Not decrypted /dev/mapper/data. Will Exit.'

* Wed 28 Aug 2013 06:50:19 AM JST
notdecrypt_msg
* Wed 28 Aug 2013 06:50:34 AM JST
MSG.get('nodecrypt')
* Wed 28 Aug 2013 06:50:50 AM JST
'{0:*^10}'.format('Started Backup')
* Wed 28 Aug 2013 06:51:12 AM JST

* Wed 28 Aug 2013 06:51:12 AM JST

* Wed 28 Aug 2013 06:51:12 AM JST
start_msg = '{0:*^10}'.format('Started Backup')

* Wed 28 Aug 2013 06:51:14 AM JST
start_msg
* Wed 28 Aug 2013 06:51:21 AM JST
start_msg
* Wed 28 Aug 2013 06:52:06 AM JST
'nobkuppath'
* Wed 28 Aug 2013 06:52:16 AM JST

* Wed 28 Aug 2013 06:52:16 AM JST

* Wed 28 Aug 2013 06:52:16 AM JST
    notexistbkuppath_msg = 'Failed: Not exists {0}'.format(backup_path)

* Wed 28 Aug 2013 06:52:24 AM JST
MSG.get('nobkuppath')
* Wed 28 Aug 2013 07:03:45 AM JST

* Wed 28 Aug 2013 07:03:45 AM JST

* Wed 28 Aug 2013 07:03:45 AM JST
if not os.path.exists:

* Wed 28 Aug 2013 07:07:09 AM JST
get_process_list
* Wed 28 Aug 2013 07:11:53 AM JST
if not os.pa:
* Wed 28 Aug 2013 07:11:57 AM JST
for ps in psutil.get_process_list():
    if 'sshfs' == ps.name and '/data' in ps.cmdline:
        logging.log(10, MSG.get('sshfs_mounting'))

* Wed 28 Aug 2013 07:12:06 AM JST
MSG.get('sshfs_mounting')
* Wed 28 Aug 2013 07:12:21 AM JST

* Wed 28 Aug 2013 07:12:21 AM JST

* Wed 28 Aug 2013 07:12:21 AM JST
## check sshfs mounting /data

* Wed 28 Aug 2013 07:12:21 AM JST
## check sshfs mounting /data

* Wed 28 Aug 2013 07:12:21 AM JST
## check sshfs mounting /data
#

* Wed 28 Aug 2013 07:16:30 AM JST
'/data/*'
* Wed 28 Aug 2013 07:17:04 AM JST
'/data/*'
* Wed 28 Aug 2013 07:17:14 AM JST

* Wed 28 Aug 2013 07:17:14 AM JST

* Wed 28 Aug 2013 07:17:14 AM JST
                   '/data/*',

* Wed 28 Aug 2013 07:17:27 AM JST
'/lost+found',
* Wed 28 Aug 2013 07:18:01 AM JST

* Wed 28 Aug 2013 07:18:01 AM JST

* Wed 28 Aug 2013 07:18:01 AM JST
                   '/etc/fstab',

* Wed 28 Aug 2013 07:18:06 AM JST

* Wed 28 Aug 2013 07:18:06 AM JST

* Wed 28 Aug 2013 07:18:06 AM JST
                   '/etc/crypttab',

* Wed 28 Aug 2013 07:18:24 AM JST
                   '/var/run/*',
                   '/var/lock/*',

* Wed 28 Aug 2013 07:18:31 AM JST

* Wed 28 Aug 2013 07:18:31 AM JST

* Wed 28 Aug 2013 07:18:31 AM JST
                   '/var/cache/apt/archive/*',

* Wed 28 Aug 2013 07:18:40 AM JST
'/etc/fstab'
* Wed 28 Aug 2013 07:19:01 AM JST
                   '/home/*/.mozilla/firefox/*.default/Cache/*',
                   '/home/*/.cache/google-chrome/Default/*',
                   '/root/.mozilla/firefox/*.default/Cache/*',
                   '/root/.cache/google-chrome/Default/*',
                   '/root/.local/share/Trash/files/*',
                   '/root/.local/share/Trash/info/*',

* Wed 28 Aug 2013 07:19:15 AM JST
                   '/var/cache/apt/archive/*',
                   '/home/*/.mozilla/firefox/*.default/Cache/*',
                   '/home/*/.cache/google-chrome/Default/*',
                   '/root/.mozilla/firefox/*.default/Cache/*',
                   '/root/.cache/google-chrome/Default/*',
                   '/root/.local/share/Trash/files/*',
                   '/root/.local/share/Trash/info/*',

* Wed 28 Aug 2013 07:19:29 AM JST
data/*'
* Wed 28 Aug 2013 07:21:14 AM JST

* Wed 28 Aug 2013 07:21:14 AM JST

* Wed 28 Aug 2013 07:21:15 AM JST
if __name__ == '__main__':

* Wed 28 Aug 2013 07:21:15 AM JST
if __name__ == '__main__':

* Wed 28 Aug 2013 07:21:15 AM JST
if __name__ == '__main__':
    _main()

* Wed 28 Aug 2013 07:21:16 AM JST

* Wed 28 Aug 2013 07:21:16 AM JST

* Wed 28 Aug 2013 07:21:16 AM JST
def _main():

* Wed 28 Aug 2013 07:21:16 AM JST
def _main():

* Wed 28 Aug 2013 07:21:16 AM JST
def _main():
    """Main function."""

* Wed 28 Aug 2013 07:21:22 AM JST
parser = argparse.ArgumentParser(description="""Backup knight""")
parser.add_argument('--version',
                    dest='version',
                    action='version',
                    version=__version__,
                    help='Version Strings.')
# (yas/expand-link "argparse_add_argument" t)
args = parser.parse_args()

* Wed 28 Aug 2013 07:22:40 AM JST
args
* Wed 28 Aug 2013 07:28:25 AM JST
                   '/etc/fstab',
                   '/etc/crypttab',

* Wed 28 Aug 2013 07:33:45 AM JST
not opt.force
* Wed 28 Aug 2013 07:35:44 AM JST
it
* Wed 28 Aug 2013 07:35:45 AM JST
make it
* Wed 28 Aug 2013 07:45:41 AM JST

* Wed 28 Aug 2013 07:45:41 AM JST

* Wed 28 Aug 2013 07:45:41 AM JST
echo "world"

* Wed 28 Aug 2013 07:45:47 AM JST

* Wed 28 Aug 2013 07:45:47 AM JST

* Wed 28 Aug 2013 07:45:47 AM JST
    echo "hello"

* Wed 28 Aug 2013 08:02:57 AM JST
class LinkDestBackup(object):
    """
    """
    _datefmt = '%Y%m%d'
    _full_ext = '.full'
    _incr_ext = '.incr'
    _opt = ['-a']
    _link_dest = '--link-dest='
    _excludes = ['/share/*',
                '/data/*',
                '/lost+found',
                '/sys/*',
                '/dev/*',
                '/media/*',
                '/proc/*',
                '/tmp/*',
                '/run/*',
                '/mnt/*',
                '/lib/udev/devices/console',
                '/lib/udev/devices/loop0',
                '/lib/udev/devices/null',
                '/lib/udev/devices/ppp',
                '/lib/udev/devices/net/tun',
                '/etc/fstab',
                '/etc/crypttab',
                '/var/run/*',
                '/var/lock/*',
                '/lib/modules/*/volatile/.mounted',
                '/var/cache/apt/archive/*',
                '/home/*/.mozilla/firefox/*.default/Cache/*',
                '/home/*/.cache/google-chrome/Default/*',
                '/root/.mozilla/firefox/*.default/Cache/*',
                '/root/.cache/google-chrome/Default/*',
                '/root/.local/share/Trash/files/*',
                '/root/.local/share/Trash/info/*', ]
    _lotate_max = 30
    _log = logging
    # _remote = ''
    # _mnt = '/mnt'
    # _tmpmnt = ''
    _backuped_path = ''
    _latest = 'latest'

    def __init__(self, src, dest, log_name=None):
        """

        Arguments:
        - `src`:
        - `dest`:
        """
        if log_name:
            self._log.basicConfig(filename=_os.path.join('/var/log', log_name),
                                    level=logging.DEBUG,
                                    format='%(asctime)s %(message)s')
        else:
            self._log = None

        self.src = src
        if ':' in dest:
            dest = dest.split(':')
            self._dest = dest.pop()
            self._remote = ':'.join(dest) + ':'
            self.sshfs()
        else:
            self._dest = dest

        # for v in [src, dest]:
            # if not _os.path.exists(v):
                # raise ValueError('{0} does not exists'.format(v))


        self._full_backup_name = self._datefmt + self._full_ext
        self._incr_backup_name = self._datefmt + self._incr_ext

    def append_exclude(self, ext):
        """SUMMARY

        @Arguments:

        - `ext`:

        @Return:
        """
        self._excludes = add2list(self._excludes, ext)

    def add_opt(self, opt):
        """SUMMARY

        @Arguments:

        - `opt`:

        @Return:
        """
        self._opt = add2list(self._opt, opt)

    def backup(self):
        """SUMMARY

        @Return:
        """
        if self._remote and not self._tmpmnt:
            self.sshfs()

        if self.isfullexists():
            self.incrementalbackup()
        else:
            self.fullbackup()

    def fullbackup(self):
        """SUMMARY

        @Return:
        """
        cmdline = self.getcmdline()
        print(cmdline)
        try:
            check_call(cmdline, shell=True)
        except CalledProcessError:
            sys.exit(1)
        self.make_latest_link()

    def incrementalbackup(self):
        """SUMMARY

        @Return:
        """
        if -1 == ''.join(self._opt).find('--link-dest='):
            self._opt.append('--link-dest=' + self.linkrealpath)
        cmdline = self.getcmdline()
        print(cmdline)
        try:
            check_call(cmdline, shell=True)
        except CalledProcessError:
            sys.exit()
        self.make_latest_link()

    def getcmdline(self):
        """SUMMARY

        @Return:
        """
        return ' '.join([cmd.get('rsync')] + [self.options] +
                        [self.src, self.backuppath])

    @property
    def options(self):
        """SUMMARY

        @Return:
        """
        return ' '.join(self._opt + [self.excludes])

    @property
    def excludes(self):
        """SUMMARY

        @Return:
        """
        return ' '.join(['--exclude=' + x for x in self._excludes])

    @property
    def linkrealpath(self):
        """SUMMARY

        @Return:
        """
        return _os.path.realpath(
            _os.path.join(self._tmpmnt, self._dest, self._latest))

    @property
    def backuppath(self):
        """SUMMARY

        @Return:
        """
        if self._backuped_path:
            return self._backuped_path
        if self.isfullexists():
            ext = self._incr_ext
        else:
            ext = self._full_ext
        self._backupname = datetime.date.today().strftime(self._datefmt) + ext
        self._backuped_path = _os.path.join(self._remote + self._dest,
                                           self._backupname)
        return self._backuped_path

    def sshfs(self):
        """SUMMARY

        @Return:
        """
        self._tmpdir()
        call([cmd.get('sshfs'), ''.join([self._remote, self._dest]),
              self._tmpmnt])

    def _tmpdir(self):
        """SUMMARY

        @Return:
        """
        from tempfile import mkdtemp
        Popen([cmd.get('umount'), self._mnt])
        self._tmpmnt = mkdtemp(dir=self._mnt)

    def isfullexists(self):
        """SUMMARY

        @Return:
        """
        return (glob(_os.path.join(self._tmpmnt, self._dest, '*')
                     + self._full_ext) != [])


    def make_latest_link(self):
        """SUMMARY

        @Return:
        """
        if self._remote:
            _os.system(
                "ssh ki '{0} --force -s {1} {2}'".format(cmd.get('ln'),
                                                 self._dest + self._backupname,
                                                 self._latest))
        else:
            _os.system('{0} --force -s {1} {2}'.format(cmd.get('ln'),
                                              self._backuped_path,
                                              self._latest))


DATE_FORMAT_DEFAULT = '%Y%m%d'
EXCLUDE_DEFALUT = ['/lost+found',
                   '/sys/*',
                   '/dev/*',
                   '/proc/*',
                   '/run/*',
                   '/tmp/*',
                   '/share/*',
                   '/media/*',
                   '/mnt/*',
                   '/var/run/*',
                   '/var/lock/*',
                   '/lib/udev/devices/console',
                   '/lib/udev/devices/loop0',
                   '/lib/udev/devices/null',
                   '/lib/udev/devices/ppp',
                   '/lib/udev/devices/net/tun',
                   '/lib/modules/*/volatile/.mounted',
                   '/data/*',
                   '/etc/fstab',
                   '/etc/crypttab',
                   '/var/cache/apt/archive/*',
                   '/home/*/.mozilla/firefox/*.default/Cache/*',
                   '/home/*/.cache/google-chrome/Default/*',
                   '/root/.mozilla/firefox/*.default/Cache/*',
                   '/root/.cache/google-chrome/Default/*',
                   '/root/.local/share/Trash/files/*',
                   '/root/.local/share/Trash/info/*',
                   ]

* Wed 28 Aug 2013 08:03:15 AM JST
class LinkDestBackup(object):
    """
    """
    _datefmt = '%Y%m%d'
    _full_ext = '.full'
    _incr_ext = '.incr'
    _opt = ['-a']
    _link_dest = '--link-dest='
    _excludes = ['/share/*',
                '/data/*',
                '/lost+found',
                '/sys/*',
                '/dev/*',
                '/media/*',
                '/proc/*',
                '/tmp/*',
                '/run/*',
                '/mnt/*',
                '/lib/udev/devices/console',
                '/lib/udev/devices/loop0',
                '/lib/udev/devices/null',
                '/lib/udev/devices/ppp',
                '/lib/udev/devices/net/tun',
                '/etc/fstab',
                '/etc/crypttab',
                '/var/run/*',
                '/var/lock/*',
                '/lib/modules/*/volatile/.mounted',
                '/var/cache/apt/archive/*',
                '/home/*/.mozilla/firefox/*.default/Cache/*',
                '/home/*/.cache/google-chrome/Default/*',
                '/root/.mozilla/firefox/*.default/Cache/*',
                '/root/.cache/google-chrome/Default/*',
                '/root/.local/share/Trash/files/*',
                '/root/.local/share/Trash/info/*', ]
    _lotate_max = 30
    _log = logging
    # _remote = ''
    # _mnt = '/mnt'
    # _tmpmnt = ''
    _backuped_path = ''
    _latest = 'latest'

    def __init__(self, src, dest, log_name=None):
        """

        Arguments:
        - `src`:
        - `dest`:
        """
        if log_name:
            self._log.basicConfig(filename=_os.path.join('/var/log', log_name),
                                    level=logging.DEBUG,
                                    format='%(asctime)s %(message)s')
        else:
            self._log = None

        self.src = src
        if ':' in dest:
            dest = dest.split(':')
            self._dest = dest.pop()
            self._remote = ':'.join(dest) + ':'
            self.sshfs()
        else:
            self._dest = dest

        # for v in [src, dest]:
            # if not _os.path.exists(v):
                # raise ValueError('{0} does not exists'.format(v))


        self._full_backup_name = self._datefmt + self._full_ext
        self._incr_backup_name = self._datefmt + self._incr_ext

    def append_exclude(self, ext):
        """SUMMARY

        @Arguments:

        - `ext`:

        @Return:
        """
        self._excludes = add2list(self._excludes, ext)

    def add_opt(self, opt):
        """SUMMARY

        @Arguments:

        - `opt`:

        @Return:
        """
        self._opt = add2list(self._opt, opt)

    def backup(self):
        """SUMMARY

        @Return:
        """
        if self._remote and not self._tmpmnt:
            self.sshfs()

        if self.isfullexists():
            self.incrementalbackup()
        else:
            self.fullbackup()

    def fullbackup(self):
        """SUMMARY

        @Return:
        """
        cmdline = self.getcmdline()
        print(cmdline)
        try:
            check_call(cmdline, shell=True)
        except CalledProcessError:
            sys.exit(1)
        self.make_latest_link()

    def incrementalbackup(self):
        """SUMMARY

        @Return:
        """
        if -1 == ''.join(self._opt).find('--link-dest='):
            self._opt.append('--link-dest=' + self.linkrealpath)
        cmdline = self.getcmdline()
        print(cmdline)
        try:
            check_call(cmdline, shell=True)
        except CalledProcessError:
            sys.exit()
        self.make_latest_link()

    def getcmdline(self):
        """SUMMARY

        @Return:
        """
        return ' '.join([cmd.get('rsync')] + [self.options] +
                        [self.src, self.backuppath])

    @property
    def options(self):
        """SUMMARY

        @Return:
        """
        return ' '.join(self._opt + [self.excludes])

    @property
    def excludes(self):
        """SUMMARY

        @Return:
        """
        return ' '.join(['--exclude=' + x for x in self._excludes])

    @property
    def linkrealpath(self):
        """SUMMARY

        @Return:
        """
        return _os.path.realpath(
            _os.path.join(self._tmpmnt, self._dest, self._latest))

    @property
    def backuppath(self):
        """SUMMARY

        @Return:
        """
        if self._backuped_path:
            return self._backuped_path
        if self.isfullexists():
            ext = self._incr_ext
        else:
            ext = self._full_ext
        self._backupname = datetime.date.today().strftime(self._datefmt) + ext
        self._backuped_path = _os.path.join(self._remote + self._dest,
                                           self._backupname)
        return self._backuped_path

    def sshfs(self):
        """SUMMARY

        @Return:
        """
        self._tmpdir()
        call([cmd.get('sshfs'), ''.join([self._remote, self._dest]),
              self._tmpmnt])

    def _tmpdir(self):
        """SUMMARY

        @Return:
        """
        from tempfile import mkdtemp
        Popen([cmd.get('umount'), self._mnt])
        self._tmpmnt = mkdtemp(dir=self._mnt)

    def isfullexists(self):
        """SUMMARY

        @Return:
        """
        return (glob(_os.path.join(self._tmpmnt, self._dest, '*')
                     + self._full_ext) != [])


    def make_latest_link(self):
        """SUMMARY

        @Return:
        """
        if self._remote:
            _os.system(
                "ssh ki '{0} --force -s {1} {2}'".format(cmd.get('ln'),
                                                 self._dest + self._backupname,
                                                 self._latest))
        else:
            _os.system('{0} --force -s {1} {2}'.format(cmd.get('ln'),
                                              self._backuped_path,
                                              self._latest))

* Wed 28 Aug 2013 08:06:46 AM JST
        if log_name:
            self._log.basicConfig(filename=_os.path.join('/var/log', log_name),
                                    level=logging.DEBUG,
                                    format='%(asctime)s %(message)s')
        else:
            self._log = None

        self.src = src
        self.bkupdir = bkupdir
        self._lotate = lotate

* Wed 28 Aug 2013 08:08:31 AM JST
        if logname:
            self._log.basicConfig(filename=_os.path.join('/var/log', logname),
                                    level=logging.DEBUG,
                                    format='%(asctime)s %(message)s')
        else:
            self._log = None


* Wed 28 Aug 2013 08:12:15 AM JST
self.linkrealpath
* Wed 28 Aug 2013 08:12:28 AM JST
self.cmdline
* Wed 28 Aug 2013 08:13:09 AM JST
self.bkupfullpath
* Wed 28 Aug 2013 08:15:29 AM JST
_isfullexists
* Wed 28 Aug 2013 08:15:43 AM JST
_globbkupdir
* Wed 28 Aug 2013 08:17:15 AM JST
lotate
* Wed 28 Aug 2013 08:17:22 AM JST
makelink
* Wed 28 Aug 2013 08:28:33 AM JST
/bin/ln --force -s /data/.backup/knight_local/20130828.full /data/.backup/knight_loca
l/latest
* Wed 28 Aug 2013 08:51:03 AM JST
_sbp
* Wed 28 Aug 2013 08:51:37 AM JST

* Wed 28 Aug 2013 08:51:37 AM JST

* Wed 28 Aug 2013 08:51:37 AM JST
# from subprocess import call, Popen, check_call, CalledProcessError

* Wed 28 Aug 2013 08:54:12 AM JST
#             _os.system(
#                 "ssh ki '{0} --force -s {1} {2}'".format(cmd.get('ln'),
#                                                  self._dest + self._backupname,
#                                                  self._latest))

* Wed 28 Aug 2013 08:54:23 AM JST
system
* Wed 28 Aug 2013 08:55:07 AM JST
                               
* Wed 28 Aug 2013 08:55:10 AM JST
                                              
* Wed 28 Aug 2013 08:55:27 AM JST
        
* Wed 28 Aug 2013 08:55:32 AM JST
            
* Wed 28 Aug 2013 08:57:28 AM JST
_os.path.join(self.bkupdir, self._linkname)
* Wed 28 Aug 2013 08:57:55 AM JST
            
* Wed 28 Aug 2013 08:59:40 AM JST
#         self._tmpdir()
#         call([cmd.get('sshfs'), ''.join([self._remote, self._dest]),
#               self._tmpmnt])

* Wed 28 Aug 2013 08:59:49 AM JST

* Wed 28 Aug 2013 08:59:49 AM JST

* Wed 28 Aug 2013 08:59:49 AM JST
#         self._tmpdir()

* Wed 28 Aug 2013 09:01:00 AM JST
              
* Wed 28 Aug 2013 09:02:48 AM JST
'/mnt/sshfs'
* Wed 28 Aug 2013 09:03:29 AM JST
Popen([cmd.get('umount'), self._mnt])
* Wed 28 Aug 2013 09:05:04 AM JST
        try:
            _sbp.Popen([cmd.get('umount'), '/mnt'])
        except:
            pass

* Wed 28 Aug 2013 09:07:03 AM JST
_sbp.Popen([cmd.get('umount'), '/mnt'])
* Wed 28 Aug 2013 09:07:11 AM JST
        try:
            _sbp.Popen([cmd.get('umount'), '/mnt'])
        except:
            pass

* Wed 28 Aug 2013 09:11:31 AM JST
    def backup(self):
        """SUMMARY

        @Return:
        """
        method = self.bkupmethod
        if method == self._incr_ext:
            if self._log:
                self._log.log(10, 'Start: Incremental Backup')
            self.lotate()
            self.incrementalbackup()
        elif method == self._full_ext:
            if self._log:
                self._log.log(10, 'Start: Full Backup')
            self.fullbackup()
        self.makelink()

* Wed 28 Aug 2013 09:12:51 AM JST
    def _globbkupdir(self, str_):
        """SUMMARY

        @Arguments:

        - `str_`:

        @Return:
        """
        return _glob(_os.path.join(self.bkupdir, str_))

* Wed 28 Aug 2013 09:14:32 AM JST

* Wed 28 Aug 2013 09:14:32 AM JST

* Wed 28 Aug 2013 09:14:32 AM JST
        # return glob(_os.path.join(self.bkupdir, '*') + self._full_ext) != []

* Wed 28 Aug 2013 09:16:35 AM JST
self.bkupmethod
* Wed 28 Aug 2013 09:16:46 AM JST

* Wed 28 Aug 2013 09:16:46 AM JST

* Wed 28 Aug 2013 09:16:46 AM JST
        method = 

* Wed 28 Aug 2013 09:17:16 AM JST
self.bkupmethod
* Wed 28 Aug 2013 09:17:26 AM JST

* Wed 28 Aug 2013 09:17:26 AM JST

* Wed 28 Aug 2013 09:17:26 AM JST
        method = 

* Wed 28 Aug 2013 09:19:28 AM JST
        if not self._linkrealpath:
            self._linkrealpath = _os.path.realpath(
                _os.path.join(self.bkupdir, self._linkname))
        return self._linkrealpath


* Wed 28 Aug 2013 09:22:23 AM JST
help(
* Wed 28 Aug 2013 09:31:00 AM JST
        return ' '.join([cmd.get('rsync')] + [self.options] +
                        [self.src, self.bkupfullpath])

* Wed 28 Aug 2013 09:41:59 AM JST
lbkupdir
* Wed 28 Aug 2013 09:42:00 AM JST
self.lbkupdir
* Wed 28 Aug 2013 09:43:24 AM JST

* Wed 28 Aug 2013 09:43:24 AM JST

* Wed 28 Aug 2013 09:43:24 AM JST
    @property

* Wed 28 Aug 2013 10:21:57 AM JST

* Wed 28 Aug 2013 10:21:57 AM JST

* Wed 28 Aug 2013 10:21:57 AM JST
def _main():

* Wed 28 Aug 2013 10:21:57 AM JST
def _main():

* Wed 28 Aug 2013 10:21:57 AM JST
def _main():
    """Main function."""

* Wed 28 Aug 2013 10:22:45 AM JST
# check platform
if 'nt' == os.name:
    sys.exit('Not support WindowsNT.')

# check root
if not os.geteuid() == 0:
    sys.exit('Script must be run as root.')

* Wed 28 Aug 2013 10:23:04 AM JST
# define log file name
log_name = 'backup.log'
log_base_dir = '/var/log'
log_path = os.path.join(log_base_dir, log_name)
logging.basicConfig(filename=log_path,
                    level=logging.DEBUG,
                    format='%(asctime)s %(message)s')

* Wed 28 Aug 2013 10:23:46 AM JST
# define Max incremental backup
MAX = 30

* Wed 28 Aug 2013 10:24:08 AM JST
## options
#
parser = argparse.ArgumentParser(description="""Backup knight""")
parser.add_argument('--version',
                    dest='version',
                    action='version',
                    version=__version__,
                    help='Version Strings.')
parser.add_argument('-f', '--force',
                    dest='force',
                    action='store_true',
                    default=False,
                    required=False,
                    # (yas/expand-link "argparse_other_options" t)
                    help='Force Backup.')

# (yas/expand-link "argparse_add_argument" t)
opt = parser.parse_args()

* Wed 28 Aug 2013 10:24:19 AM JST
## options
#
parser = argparse.ArgumentParser(description="""Backup knight""")
parser.add_argument('--version',
                    dest='version',
                    action='version',
                    version=__version__,
                    help='Version Strings.')
parser.add_argument('-f', '--force',
                    dest='force',
                    action='store_true',
                    default=False,
                    required=False,
                    # (yas/expand-link "argparse_other_options" t)
                    help='Force Backup.')

# (yas/expand-link "argparse_add_argument" t)
opt = parser.parse_args()

* Wed 28 Aug 2013 10:24:36 AM JST
# define backup directory name
backup_name = 'knight_local'
backup_base_dir = '/data/.backup'
backup_path = os.path.join(backup_base_dir, backup_name)

* Wed 28 Aug 2013 10:25:19 AM JST
# check platform
if 'nt' == os.name:
    sys.exit('Not support WindowsNT.')

# check root
if not os.geteuid() == 0:
    sys.exit('Script must be run as root.')


* Wed 28 Aug 2013 10:26:14 AM JST
## auto backup run only runlevel 4
#
ps = Popen(['/sbin/runlevel'], stdout=PIPE)
out, err = ps.communicate()
if 'N 4\n' != out and not opt.force:
    sys.exit('Errors: Could not run on this runnlevel.')

* Wed 28 Aug 2013 10:26:47 AM JST
## Start Backup message
#
print(MSG.get('start'))
logging.log(10, MSG.get('start'))

* Wed 28 Aug 2013 10:27:17 AM JST

* Wed 28 Aug 2013 10:27:17 AM JST

* Wed 28 Aug 2013 10:27:17 AM JST
       'start': '{0:*^30}'.format('Started Backup'),

* Wed 28 Aug 2013 10:27:22 AM JST
MSG = {       
* Wed 28 Aug 2013 10:28:26 AM JST
'start': '{0:*^30}'.format('Started Backup'),
* Wed 28 Aug 2013 10:29:17 AM JST
## clean up
#
trash_path = '/root/.local/share/Trash/'
if os.path.exists(trash_path):
    shutil.rmtree(trash_path)

data_trash_path = '/data/.Trash-0/'
if os.path.exists(data_trash_path):
    shutil.rmtree(data_trash_path)

local_data_trash_path = '/media/Data/.Trash-0/'
if os.path.exists(local_data_trash_path):
    shutil.rmtree(local_data_trash_path)

* Wed 28 Aug 2013 10:29:33 AM JST
## check backup dir or decrypt disk
#
if not ki.isactive():
    ki._pave()
if not ki.ismount():
    ki.decrypt()

* Wed 28 Aug 2013 10:30:16 AM JST

* Wed 28 Aug 2013 10:30:16 AM JST

* Wed 28 Aug 2013 10:30:16 AM JST
import ANSI

* Wed 28 Aug 2013 10:31:06 AM JST
ki = king.King(verbose=True)
* Wed 28 Aug 2013 10:36:22 AM JST
log_name
* Wed 28 Aug 2013 10:37:06 AM JST
excludes = ['/data/*',
            '/etc/fstab',
            '/etc/crypttab',
            '/var/cache/apt/archive/*',
            '/home/*/.mozilla/firefox/*.default/Cache/*',
            '/home/*/.cache/google-chrome/Default/*',
            '/root/.mozilla/firefox/*.default/Cache/*',
            '/root/.cache/google-chrome/Default/*',
            '/root/.local/share/Trash/files/*',
            '/root/.local/share/Trash/info/*',
            ]

* Wed 28 Aug 2013 10:38:22 AM JST

* Wed 28 Aug 2013 10:38:22 AM JST

* Wed 28 Aug 2013 10:38:22 AM JST
            '/etc/fstab',

* Wed 28 Aug 2013 10:38:23 AM JST
            '/etc/fstab',

* Wed 28 Aug 2013 10:38:23 AM JST
            '/etc/fstab',
            '/etc/crypttab',

* Wed 28 Aug 2013 10:38:51 AM JST
def disk_usage(path):
    st = os.statvfs(path)
    free = st.f_bavail * st.f_frsize
    total = st.f_blocks * st.f_frsize
    used = (st.f_blocks - st.f_bfree) * st.f_frsize
    return _ntuple_diskusage(total, used, free)

def bytes2human(n):
    symbols = ('K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y')
    prefix = {}
    for i, s in enumerate(symbols):
        prefix[s] = 1 << (i+1)*10
    for s in reversed(symbols):
        if n >= prefix[s]:
            value = float(n) / prefix[s]
            return '%.1f%s' % (value, s)
    return "%sB" % n

* Wed 28 Aug 2013 10:40:16 AM JST
import collections
* Wed 28 Aug 2013 10:40:34 AM JST
_ntuple_diskusage = collections.namedtuple('usage', 'total used free')
* Wed 28 Aug 2013 10:42:12 AM JST
usage = disk_usage('/data')
* Wed 28 Aug 2013 10:42:29 AM JST
print('total: {0}, free: {1}, used: {2}'.format(bytes2human(usage.total),
                                                bytes2human(usage.free),
                                                bytes2human(usage.used)))

* Wed 28 Aug 2013 10:42:44 AM JST
DiskUsage.
* Wed 28 Aug 2013 10:43:09 AM JST
DiskUsage.
* Wed 28 Aug 2013 10:43:10 AM JST
DiskUsage.DiskUsage.
* Wed 28 Aug 2013 10:43:11 AM JST
DiskUsage.DiskUsage.DiskUsage.
* Wed 28 Aug 2013 10:43:37 AM JST
'total: {0}, free: {1}, used: {2}'.format(
    DiskUsage.bytes2human(usage.total),
    DiskUsage.bytes2human(usage.free),
    DiskUsage.bytes2human(usage.used))
* Wed 28 Aug 2013 10:43:40 AM JST
    
* Wed 28 Aug 2013 10:45:33 AM JST
self._mntpoint
* Wed 28 Aug 2013 10:46:02 AM JST
self.
* Wed 28 Aug 2013 10:46:11 AM JST
sshfs'
* Wed 28 Aug 2013 10:46:11 AM JST
mnt/sshfs'
* Wed 28 Aug 2013 10:48:41 AM JST
"ssh {0} '{1} --force -s {2} {3}'".format(
            self.rname, cmd.get('ln'), self._bkupfullpath,
            _os.path.join(self.bkupdir, self._linkname))
* Wed 28 Aug 2013 10:49:33 AM JST
            
* Wed 28 Aug 2013 10:50:18 AM JST
            
* Wed 28 Aug 2013 10:50:57 AM JST
'Link: {0}'
* Wed 28 Aug 2013 10:55:41 AM JST
DATE_FORMAT_DEFAULT = '%Y%m%d'
EXCLUDE_DEFALUT = ['/lost+found',
                   '/sys/*',
                   '/dev/*',
                   '/proc/*',
                   '/run/*',
                   '/tmp/*',
                   '/share/*',
                   '/media/*',
                   '/mnt/*',
                   '/var/run/*',
                   '/var/lock/*',
                   '/lib/udev/devices/console',
                   '/lib/udev/devices/loop0',
                   '/lib/udev/devices/null',
                   '/lib/udev/devices/ppp',
                   '/lib/udev/devices/net/tun',
                   '/lib/modules/*/volatile/.mounted',
                   '/data/*',
                   '/etc/fstab',
                   '/etc/crypttab',
                   '/var/cache/apt/archive/*',
                   '/home/*/.mozilla/firefox/*.default/Cache/*',
                   '/home/*/.cache/google-chrome/Default/*',
                   '/root/.mozilla/firefox/*.default/Cache/*',
                   '/root/.cache/google-chrome/Default/*',
                   '/root/.local/share/Trash/files/*',
                   '/root/.local/share/Trash/info/*',
                   ]

* Wed 28 Aug 2013 10:56:45 AM JST
cmd
* Wed 28 Aug 2013 10:56:46 AM JST
cmd
* Wed 28 Aug 2013 10:58:15 AM JST
for value in CMD.itervalues():
    if not _os.path.exists(value):
        raise CmdMissingError('"{0}" command does not exists.')


* Wed 28 Aug 2013 10:59:33 AM JST

* Wed 28 Aug 2013 10:59:33 AM JST

* Wed 28 Aug 2013 10:59:33 AM JST
if not ki.isactive():

* Wed 28 Aug 2013 10:59:59 AM JST
ki.ismount()
* Wed 28 Aug 2013 11:00:36 AM JST
if not ki.isactive():
    logging.log(10, MSG.get('kidead'))
    sys.exit(MSG.get('kidead'))

* Wed 28 Aug 2013 11:04:27 AM JST
_pave
* Wed 28 Aug 2013 11:05:04 AM JST

* Wed 28 Aug 2013 11:05:04 AM JST

* Wed 28 Aug 2013 11:05:04 AM JST
    ki.decrypt()

* Wed 28 Aug 2013 11:06:21 AM JST
server
* Wed 28 Aug 2013 11:06:21 AM JST
king server
* Wed 28 Aug 2013 11:13:57 AM JST
    if 'posix' == _os.name:
        _bookmark_base_path = '~/.config/chromium/Default/Bookmarks'
        _bookmark_path = _os.path.expanduser(_bookmark_base_path)

    elif 'nt' == _os.name:
        _bookmark_base_path = (
    'Local Settings/Application Data/Google/Chrome/User Data/Default/Bookmarks')
        _bookmark_path = _os.path.join(_os.environ['userprofile'],
                                       _bookmark_base_path)

* Wed 28 Aug 2013 11:15:20 AM JST
                                   
* Wed 28 Aug 2013 11:17:22 AM JST
self._file = open(self._bookmark_path, 'r')
* Wed 28 Aug 2013 11:18:20 AM JST
self._lines = self._file.readlines()
* Wed 28 Aug 2013 11:18:28 AM JST
self.line_num = 0
* Wed 28 Aug 2013 11:18:32 AM JST
self.urls = []
* Wed 28 Aug 2013 11:19:34 AM JST
    def get_urls(self, name):
        """Get list urls in folder.

        @Arguments:

        - `name`: folders name

        @Return: list of urls.
        """
        self._line_num_by_name(name)
        self._mv_init_line()
        self._parse_urls()
        self._trim_urls()
        return self.urls

* Wed 28 Aug 2013 11:19:50 AM JST
    def _line_num_by_name(self, name):
        """Determine line number of name.

        @Arguments:

        - `name`: elements name

        @Return: line number
        """
        self._file.seek(0)
        for num, line in enumerate(self._file, 1):
            if '"name":' in line:
                trimed = line.split('"name":')[1].split('"')[1]
                if name == trimed.decode('unicode-escape', 'ignore'):
                    self.line_num = num - 1

* Wed 28 Aug 2013 11:20:11 AM JST
    def _mv_init_line(self):
        """Move initialize line.

        @Return: Nothing
        """
        while -1 == self._lines[self.line_num].find(']') and self.line_num != 0:
            self.line_num -= 1

    def _parse_urls(self):
        """Parse urls"""
        operand = -1
        while operand < 0:
            self.line_num -= 1
            if self._lines[self.line_num].find('}') != -1:
                operand -= 1
            if self._lines[self.line_num].find('{') != -1:
                operand += 1
            if operand == -1:
                if self._lines[self.line_num].find('"url":') != -1:
                    self.urls.append(self._lines[self.line_num])

    def _trim_urls(self):
        """Triming urls by regexp."""
        self.urls = trim_urls(self.urls)

    def __del__(self):
        """Close opened file when deconstract."""
        self._file.close()

def trim_urls(urls):
    """Triming urls by regexp.

    @Arguments:
    - `urls`: list of urls

    @Return: list of trimed urls
    """
    pattern = "(http|https)://[A-Za-z0-9.?.$,;:&=!*~@_()\\-\\#%+/]+"
    re_url = _re.compile(pattern)
    new = []
    for url in urls:
        result = re_url.search(url)
        if not result is None:
            new.append(result.group())
    return new

* Wed 28 Aug 2013 11:21:44 AM JST
def trim_urls(urls):
    """Triming urls by regexp.

    @Arguments:
    - `urls`: list of urls

    @Return: list of trimed urls
    """
    pattern = "(http|https)://[A-Za-z0-9.?.$,;:&=!*~@_()\\-\\#%+/]+"
    re_url = _re.compile(pattern)
    new = []
    for url in urls:
        result = re_url.search(url)
        if not result is None:
            new.append(result.group())
    return new


* Wed 28 Aug 2013 11:24:18 AM JST
king.King(verbose=True)
* Wed 28 Aug 2013 11:24:24 AM JST

* Wed 28 Aug 2013 11:24:25 AM JST

* Wed 28 Aug 2013 11:24:25 AM JST
ki = king.King(verbose=True)

* Wed 28 Aug 2013 11:31:33 AM JST
    parser.add_argument('-o', '--onlyssh-pave',
                    dest='onlyssh_pave',
                    action='store_true',
                    default=False,
                    required=False,
                    # (yas/expand-link "argparse_other_options" t)
                    help='Pave ssh agent and portforward.')

* Wed 28 Aug 2013 11:32:06 AM JST
            ki.router.pave()
            sys.exit(0)

* Wed 28 Aug 2013 11:32:24 AM JST

* Wed 28 Aug 2013 11:32:24 AM JST

* Wed 28 Aug 2013 11:32:24 AM JST
import sys

* Wed 28 Aug 2013 11:47:09 AM JST
RSYNC_EXCLUDES = ['/backup',
                  '/share/*',
                  '/data/*',
                  '/lost+found',
                  '/sys/*',
                  '/dev/*',
                  '/media/*',
                  '/proc/*',
                  '/tmp/*',
                  '/run/*',
                  '/mnt',
                  '/lib/udev/devices/console',
                  '/lib/udev/devices/loop0',
                  '/lib/udev/devices/null',
                  '/lib/udev/devices/ppp',
                  '/lib/udev/devices/net/tun',
                  '/etc/fstab',
                  '/etc/crypttab',
                  '/var/run/*',
                  '/var/lock/*',
                  '/lib/modules/*/volatile/.mounted',
                  '/var/cache/apt/archive/*',
                  '/home/*/.mozilla/firefox/*.default/Cache/*',
                  '/home/*/.cache/google-chrome/Default/*',
                  '/root/.mozilla/firefox/*.default/Cache/*',
                  '/root/.cache/google-chrome/Default/*',]

* Wed 28 Aug 2013 11:47:56 AM JST
RSYNC_
* Wed 28 Aug 2013 11:49:13 AM JST
import os
import sys
import logging

* Wed 28 Aug 2013 11:49:16 AM JST

* Wed 28 Aug 2013 11:49:16 AM JST

* Wed 28 Aug 2013 11:49:16 AM JST
import os

* Wed 28 Aug 2013 11:49:24 AM JST
from subprocess import Popen, PIPE


import argparse
import psutil
from RsyncBackup import LinkDestLocalBackup

* Wed 28 Aug 2013 11:49:33 AM JST

* Wed 28 Aug 2013 11:49:33 AM JST

* Wed 28 Aug 2013 11:49:33 AM JST
import argparse

* Wed 28 Aug 2013 11:49:36 AM JST

* Wed 28 Aug 2013 11:49:37 AM JST

* Wed 28 Aug 2013 11:49:37 AM JST
import psutil

* Wed 28 Aug 2013 11:50:24 AM JST

* Wed 28 Aug 2013 11:50:24 AM JST

* Wed 28 Aug 2013 11:50:24 AM JST
from subprocess import Popen, PIPE

* Wed 28 Aug 2013 11:50:39 AM JST

* Wed 28 Aug 2013 11:50:39 AM JST

* Wed 28 Aug 2013 11:50:39 AM JST
from subprocess import Popen, PIPE

* Wed 28 Aug 2013 11:50:42 AM JST
import subprocess as sbp
* Wed 28 Aug 2013 11:50:52 AM JST
parser.add_argument('-f', '--force',
                    dest='force',
                    action='store_true',
                    default=False,
                    required=False,
                    # (yas/expand-link "argparse_other_options" t)
                    help='Force Backup.')

* Wed 28 Aug 2013 11:51:03 AM JST
args
* Wed 28 Aug 2013 11:51:15 AM JST
## Define Variables
#
# define log file name
log_name = 'backup_ni.log'
log_base_dir = '/var/log'
log_path = os.path.join(log_base_dir, log_name)
logging.basicConfig(filename=log_path,
                    level=logging.DEBUG,
                    format='%(asctime)s %(message)s')

* Wed 28 Aug 2013 11:51:33 AM JST
# define backup directory name
backup_name = 'knight_local'
backup_base_dir = '/data/.backup'
backup_path = os.path.join(backup_base_dir, backup_name)

* Wed 28 Aug 2013 11:51:51 AM JST
# define Max incremental backup
MAX = 30

* Wed 28 Aug 2013 11:51:58 AM JST
MSG = {'start': '{0:*^30}'.format('Started Backup'),
       'nodecrypt': 'Failed: Not decrypted /dev/mapper/data. Will Exit.',
       'nobkuppath': 'Warnings: Not exists {0}. Will create'.format(backup_path),
       'sshfs_mounting': 'Failed: sshfs mounting /data',
       }

* Wed 28 Aug 2013 11:52:23 AM JST
## check platform
#
if 'nt' == os.name:
    sys.exit('Not support WindowsNT.')

## check root
#
if not 0 == os.geteuid():
    sys.exit('Script must be run as root.')

* Wed 28 Aug 2013 11:52:41 AM JST
## Start Backup message
#
print(MSG.get('start'))
logging.log(10, MSG.get('start'))

* Wed 28 Aug 2013 11:53:00 AM JST
## check disk exists
#
if not os.path.exists('/dev/mapper/data'):
    logging.log(10, MSG.get('nodecrypt'))
    sys.exit(MSG.get('nodecrypt'))

* Wed 28 Aug 2013 11:54:37 AM JST
ba
* Wed 28 Aug 2013 11:55:11 AM JST
if not os.path.exists(backup_path):
    logging.log(10, MSG.get('nobkuppath'))
    print(MSG.get('nobkuppath'))
    os.mkdir(backup_path)

* Wed 28 Aug 2013 11:55:31 AM JST
bk = LinkDestLocalBackup(src='/', bkupdir=backup_path,
                         lotate=True, logname=log_path)

* Wed 28 Aug 2013 11:56:16 AM JST
excludes = ['/backup',
                  '/share/*',
                  '/data/*',
                  '/lost+found',
                  '/sys/*',
                  '/dev/*',
                  '/media/*',
                  '/proc/*',
                  '/tmp/*',
                  '/run/*',
                  '/mnt',
                  '/lib/udev/devices/console',
                  '/lib/udev/devices/loop0',
                  '/lib/udev/devices/null',
                  '/lib/udev/devices/ppp',
                  '/lib/udev/devices/net/tun',
                  '/etc/fstab',
                  '/etc/crypttab',
                  '/var/run/*',
                  '/var/lock/*',
                  '/lib/modules/*/volatile/.mounted',
                  '/var/cache/apt/archive/*',
                  '/home/*/.mozilla/firefox/*.default/Cache/*',
                  '/home/*/.cache/google-chrome/Default/*',
                  '/root/.mozilla/firefox/*.default/Cache/*',
                  '/root/.cache/google-chrome/Default/*',]

* Wed 28 Aug 2013 11:56:52 AM JST
bk.add_exclude(excludes)
bk.backup()

* Wed 28 Aug 2013 11:57:35 AM JST
## check disk usage
#
usage = DiskUsage.disk_usage(bk._mntpoint)
ms = 'total: {0}, free: {1}, used: {2}'.format(
    DiskUsage.bytes2human(usage.total),
    DiskUsage.bytes2human(usage.free),
    DiskUsage.bytes2human(usage.used))
print(ms)
logging.log(10, ms)

* Wed 28 Aug 2013 11:58:05 AM JST
backup_base_dir
* Wed 28 Aug 2013 11:58:23 AM JST
backup_base_dir
* Wed 28 Aug 2013 11:58:51 AM JST
import DiskUsage
* Wed 28 Aug 2013 11:59:22 AM JST

* Wed 28 Aug 2013 11:59:22 AM JST

* Wed 28 Aug 2013 11:59:22 AM JST
import psutil

* Wed 28 Aug 2013 11:59:22 AM JST
import psutil

* Wed 28 Aug 2013 11:59:22 AM JST
import psutil
import subprocess as sbp

* Wed 28 Aug 2013 12:02:05 PM JST
# wait decrypt
sleep(600)

* Wed 28 Aug 2013 12:02:27 PM JST
# wait decrypt
sleep(600)


* Wed 28 Aug 2013 12:03:02 PM JST
# wait decrypt
sleep(600)


* Wed 28 Aug 2013 12:28:31 PM JST
print('subprocess Popen')
* Wed 28 Aug 2013 12:28:34 PM JST
Popen
* Wed 28 Aug 2013 12:39:30 PM JST

* Wed 28 Aug 2013 12:39:30 PM JST

* Wed 28 Aug 2013 12:39:30 PM JST
print('cmd')

* Wed 28 Aug 2013 12:39:30 PM JST
print('cmd')

* Wed 28 Aug 2013 12:39:30 PM JST
print('cmd')
cmd.cmd

* Wed 28 Aug 2013 12:41:16 PM JST
cmdline
* Wed 28 Aug 2013 12:44:00 PM JST
cmdline
* Wed 28 Aug 2013 12:47:15 PM JST
try
* Wed 28 Aug 2013 12:48:22 PM JST
pass e
* Wed 28 Aug 2013 12:56:41 PM JST
print(text)
* Wed 28 Aug 2013 01:01:00 PM JST
sbp.
* Wed 28 Aug 2013 01:02:34 PM JST
except OSError:
    print('Failed: ')

* Wed 28 Aug 2013 01:03:38 PM JST
import subprocess as sbp

from confirm import wait_enter


__revision__ = '$Revision$'
__version__ = '0.1.0'

## clean Downloaded files
#
try:
    sbp.check_call(['thunar', '~/Download'])
except sbp.CalledProcessError:
    print('Failed: clean download file')
except OSError:
    print('Failed: ')

wait_enter('Please Enter will next clean bookmarks.: ')

* Wed 28 Aug 2013 01:03:46 PM JST

* Wed 28 Aug 2013 01:03:46 PM JST

* Wed 28 Aug 2013 01:03:46 PM JST
import subprocess as sbp

* Wed 28 Aug 2013 01:05:12 PM JST
## clean Downloaded files
#
try:
    sbp.check_call(['thunar', '/root/Downloads'])
except sbp.CalledProcessError:
    print('Failed: clean download file')
except OSError:
    print('Failed: ')

wait_enter('Please Enter will next clean bookmarks.: ')

* Wed 28 Aug 2013 01:05:54 PM JST
## clean Downloaded files
#
try:
    sbp.check_call(['thunar', '/root/Downloads'])
except sbp.CalledProcessError:
    print('Failed: clean download file')
except OSError:
    print('Failed: ')

wait_enter('Please Enter will next clean bookmarks.: ')

* Wed 28 Aug 2013 01:08:02 PM JST

* Wed 28 Aug 2013 01:08:02 PM JST

* Wed 28 Aug 2013 01:08:02 PM JST
    sbp.check.call(['rm', '/root/Downloads/*.torrent'])

* Wed 28 Aug 2013 01:08:10 PM JST
call
* Wed 28 Aug 2013 01:08:11 PM JST
check.call
* Wed 28 Aug 2013 01:08:11 PM JST
sbp.check.call
* Wed 28 Aug 2013 01:08:35 PM JST
os.system('rm /root/Downloads/*.torrent')
* Wed 28 Aug 2013 01:13:17 PM JST
wait_enter('Please Enter will next clean bookmarks.: ')
* Wed 28 Aug 2013 01:13:24 PM JST
bookmarks.
* Wed 28 Aug 2013 01:13:26 PM JST
clean bookmarks.
* Wed 28 Aug 2013 01:26:48 PM JST
pprint
* Wed 28 Aug 2013 01:26:50 PM JST
from pprint import pprint
* Wed 28 Aug 2013 01:27:44 PM JST
from time import sleep
* Wed 28 Aug 2013 01:28:03 PM JST
from glob import glob
* Wed 28 Aug 2013 01:28:22 PM JST
import datetime
* Wed 28 Aug 2013 01:54:22 PM JST
c.InteractiveShellApp.exec_lines = []
* Wed 28 Aug 2013 01:54:27 PM JST
# lines of code to run at IPython startup.
# c.InteractiveShellApp.exec_lines = []

* Wed 28 Aug 2013 01:54:51 PM JST

* Wed 28 Aug 2013 01:54:55 PM JST
load_ext 
* Wed 28 Aug 2013 01:55:34 PM JST
c.InteractiveShellApp.exec_lines.append('print "Warning: disable autoreload in ipython_config.py to improve performance." '
* Wed 28 Aug 2013 02:07:03 PM JST
rsync -av --rsync-path="sudo rsync" --exclude=/data/.backup --exclude=/data/.re
pository -e ssh --delete --force /data ki:/
* Wed 28 Aug 2013 02:09:35 PM JST
rsync_cmd = '/usr/bin/rsync', '-avz' 
* Wed 28 Aug 2013 02:15:18 PM JST

* Wed 28 Aug 2013 02:15:18 PM JST

* Wed 28 Aug 2013 02:15:18 PM JST
rsync_backup_result = rsync_backup()

* Wed 28 Aug 2013 02:15:33 PM JST

* Wed 28 Aug 2013 02:15:33 PM JST

* Wed 28 Aug 2013 02:15:33 PM JST
if rsync_backup_result:

* Wed 28 Aug 2013 02:16:33 PM JST
ki.
* Wed 28 Aug 2013 02:17:16 PM JST
1)
* Wed 28 Aug 2013 02:17:16 PM JST
exit(1)
* Wed 28 Aug 2013 02:17:17 PM JST
sys.exit(1)
* Wed 28 Aug 2013 02:20:06 PM JST
cleanDownloads()
* Wed 28 Aug 2013 02:20:42 PM JST
cleanBookmarks()
* Wed 28 Aug 2013 02:24:52 PM JST
backupRemote()
* Wed 28 Aug 2013 02:27:51 PM JST

* Wed 28 Aug 2013 02:27:52 PM JST

* Wed 28 Aug 2013 02:27:52 PM JST
from getpass import getpass

* Wed 28 Aug 2013 02:27:53 PM JST

* Wed 28 Aug 2013 02:27:53 PM JST

* Wed 28 Aug 2013 02:27:53 PM JST
print('hello')

* Wed 28 Aug 2013 02:27:53 PM JST
print('hello')

* Wed 28 Aug 2013 02:27:53 PM JST
print('hello')
g = getpass('helllll')

* Wed 28 Aug 2013 02:27:53 PM JST
print('hello')
g = getpass('helllll')

* Wed 28 Aug 2013 02:27:53 PM JST
print('hello')
g = getpass('helllll')
print(g)

* Wed 28 Aug 2013 02:34:58 PM JST
ALIAS
* Wed 28 Aug 2013 02:38:03 PM JST
chromium
* Wed 28 Aug 2013 02:50:02 PM JST
sjis
* Wed 28 Aug 2013 02:51:27 PM JST
unicode
* Wed 28 Aug 2013 02:52:01 PM JST
g = ChromeBMParse()
lis = g.get_urls('【天気】'.decode('UTF-8'))
print(lis)

* Wed 28 Aug 2013 02:52:47 PM JST
lis
* Wed 28 Aug 2013 02:55:13 PM JST
print(lis)
* Wed 28 Aug 2013 02:56:49 PM JST
Japan News
* Wed 28 Aug 2013 02:57:12 PM JST
lis = g.get_urls('【天気】'.decode('UTF-8'))
* Wed 28 Aug 2013 02:57:21 PM JST
Japan News
* Wed 28 Aug 2013 02:58:17 PM JST
wait_enter(text='Please Enter wil next: ')
* Wed 28 Aug 2013 02:58:54 PM JST
Foreign News
* Wed 28 Aug 2013 02:59:38 PM JST
wait_enter(text='Please Enter wil next: ')
* Wed 28 Aug 2013 03:06:36 PM JST

* Wed 28 Aug 2013 03:06:36 PM JST

* Wed 28 Aug 2013 03:06:36 PM JST
g.clear()

* Wed 28 Aug 2013 03:06:49 PM JST

* Wed 28 Aug 2013 03:06:49 PM JST

* Wed 28 Aug 2013 03:06:49 PM JST
for url in tenkis:

* Wed 28 Aug 2013 03:06:51 PM JST
url
* Wed 28 Aug 2013 03:07:06 PM JST
url
* Wed 28 Aug 2013 03:07:07 PM JST

* Wed 28 Aug 2013 03:07:07 PM JST

* Wed 28 Aug 2013 03:07:07 PM JST
for url in jp_news:

* Wed 28 Aug 2013 03:07:09 PM JST
    
* Wed 28 Aug 2013 03:07:25 PM JST

* Wed 28 Aug 2013 03:07:25 PM JST

* Wed 28 Aug 2013 03:07:25 PM JST
for url in foreign_news:

* Wed 28 Aug 2013 03:07:27 PM JST
url
* Wed 28 Aug 2013 03:10:18 PM JST
'"' + '" "'
* Wed 28 Aug 2013 03:10:27 PM JST
 + '"'
* Wed 28 Aug 2013 03:10:37 PM JST
'"' + '" "'
* Wed 28 Aug 2013 03:10:47 PM JST
 + '"'
* Wed 28 Aug 2013 03:15:23 PM JST
evolution mailto:taka16daily@gmail.com > /dev/null 2>&1 &
* Wed 28 Aug 2013 03:19:56 PM JST
[::-1]
* Wed 28 Aug 2013 03:24:26 PM JST
king
* Wed 28 Aug 2013 04:09:31 PM JST
ln -s /root/.pylib/ipython_config.py /root/.config/ipython/profile_default/ipython_config.py
* Wed 28 Aug 2013 06:33:55 PM JST

* Wed 28 Aug 2013 06:33:55 PM JST

* Wed 28 Aug 2013 06:33:55 PM JST
        if self.:

* Wed 28 Aug 2013 06:42:29 PM JST
shell=True
* Wed 28 Aug 2013 06:42:29 PM JST
                        shell=True
* Wed 28 Aug 2013 10:30:04 PM JST

* Wed 28 Aug 2013 10:30:04 PM JST

* Wed 28 Aug 2013 10:30:04 PM JST
wait_enter(text='Please Enter wil next: ')

* Thu 29 Aug 2013 01:21:49 AM JST
self.lbkupdir
* Thu 29 Aug 2013 01:21:54 AM JST
_os.path.join(self.lbkupdir, str_)
* Thu 29 Aug 2013 01:26:01 AM JST

* Thu 29 Aug 2013 01:26:01 AM JST

* Thu 29 Aug 2013 01:26:01 AM JST
        print(_os.path.join(self.lbkupdir, str_))

* Thu 29 Aug 2013 01:30:05 AM JST
join(
* Thu 29 Aug 2013 01:30:05 AM JST
path.join(
* Thu 29 Aug 2013 01:30:05 AM JST
_os.path.join(
* Thu 29 Aug 2013 01:30:09 AM JST
_os.path.basename(self.bkupdir))
* Thu 29 Aug 2013 08:35:25 AM JST
_os.path.joinn(self.lbkupdir, self._linkname)
* Thu 29 Aug 2013 08:35:37 AM JST
_os.path.joinn(self.lbkupdir, self._linkname)
* Thu 29 Aug 2013 09:49:28 AM JST
_sbp.Popen([CMD.get('umount'), '/mnt'])
* Thu 29 Aug 2013 09:53:31 AM JST
bkupdir, 
* Thu 29 Aug 2013 09:53:32 AM JST
self.bkupdir, 
* Thu 29 Aug 2013 09:54:01 AM JST
            
* Thu 29 Aug 2013 09:59:25 AM JST
_sbp.Popen([CMD.get('umount'), '/mnt'])
* Thu 29 Aug 2013 09:59:34 AM JST
        if _os.path.ismount(self._mntpoint):
            _sbp.Popen([CMD.get('umount'), self._mntpoint])

* Thu 29 Aug 2013 10:17:59 AM JST

* Thu 29 Aug 2013 10:18:00 AM JST

* Thu 29 Aug 2013 10:18:00 AM JST
        cmdline = '{0} --force -s {1} {2}'.format(

* Thu 29 Aug 2013 10:18:00 AM JST
        cmdline = '{0} --force -s {1} {2}'.format(

* Thu 29 Aug 2013 10:18:00 AM JST
        cmdline = '{0} --force -s {1} {2}'.format(
            CMD.get('ln'), self.bkupfullpath,

* Thu 29 Aug 2013 10:18:00 AM JST
        cmdline = '{0} --force -s {1} {2}'.format(
            CMD.get('ln'), self.bkupfullpath,

* Thu 29 Aug 2013 10:18:00 AM JST
        cmdline = '{0} --force -s {1} {2}'.format(
            CMD.get('ln'), self.bkupfullpath,
            _os.path.join(self.bkupdir, self._linkname))

* Thu 29 Aug 2013 11:09:48 AM JST

* Thu 29 Aug 2013 11:09:52 AM JST
cmdline
* Thu 29 Aug 2013 11:26:39 AM JST
/lib/udev/devices/net
* Thu 29 Aug 2013 11:45:52 AM JST
shell=True
* Thu 29 Aug 2013 11:45:53 AM JST
                        shell=True
* Thu 29 Aug 2013 11:45:57 AM JST
_sbp.check_call
* Thu 29 Aug 2013 12:14:05 PM JST
['ssh', self.rname, '"' + CMD.get('ln'), '--force',
                         '-s', self.bkupfullpath,
                         _os.path.join(self.bkupdir, self._linkname) + '"']
* Thu 29 Aug 2013 12:15:15 PM JST
_os.remove(_os.path.joinn(self.lbkupdir, self._linkname))
* Thu 29 Aug 2013 12:18:13 PM JST
/bin/ln --force -s /data/.backup/tes/20130829.incr /data/.backup/tes/latest
* Thu 29 Aug 2013 12:22:00 PM JST
force',
* Thu 29 Aug 2013 12:25:41 PM JST
force
* Thu 29 Aug 2013 12:26:09 PM JST
_os.path.join(self.bkupdir, self._linkname)
* Thu 29 Aug 2013 12:26:48 PM JST
_os.path.join(self.bkupdir, self._linkname)
* Thu 29 Aug 2013 12:28:04 PM JST
            
* Thu 29 Aug 2013 12:28:37 PM JST
CMD.get('ln'), self._bkupfullpath, latestfullpath
* Thu 29 Aug 2013 12:32:31 PM JST
remove
* Thu 29 Aug 2013 12:33:06 PM JST

* Thu 29 Aug 2013 12:33:06 PM JST

* Thu 29 Aug 2013 12:33:06 PM JST
            _sbp.call([CMD.get('rm'), latestfullpath])

* Thu 29 Aug 2013 12:35:23 PM JST
exists
* Thu 29 Aug 2013 12:36:34 PM JST
_os.path.join(self.lbkupdir, self._linkname)
* Thu 29 Aug 2013 12:41:58 PM JST

* Thu 29 Aug 2013 12:41:58 PM JST

* Thu 29 Aug 2013 12:41:58 PM JST
        # if _os.path.exists(_os.path.join(self.lbkupdir, self._linkname)):

* Thu 29 Aug 2013 12:41:59 PM JST
        # if _os.path.exists(_os.path.join(self.lbkupdir, self._linkname)):

* Thu 29 Aug 2013 12:41:59 PM JST
        # if _os.path.exists(_os.path.join(self.lbkupdir, self._linkname)):
            # print(_os.path.joinn(self.lbkupdir, self._linkname))

* Thu 29 Aug 2013 12:41:59 PM JST
        # if _os.path.exists(_os.path.join(self.lbkupdir, self._linkname)):
            # print(_os.path.joinn(self.lbkupdir, self._linkname))

* Thu 29 Aug 2013 12:41:59 PM JST
        # if _os.path.exists(_os.path.join(self.lbkupdir, self._linkname)):
            # print(_os.path.joinn(self.lbkupdir, self._linkname))
            # _os.remove(_os.path.joinn(self.lbkupdir, self._linkname))

* Thu 29 Aug 2013 12:41:59 PM JST
        # if _os.path.exists(_os.path.join(self.lbkupdir, self._linkname)):
            # print(_os.path.joinn(self.lbkupdir, self._linkname))
            # _os.remove(_os.path.joinn(self.lbkupdir, self._linkname))

* Thu 29 Aug 2013 12:41:59 PM JST
        # if _os.path.exists(_os.path.join(self.lbkupdir, self._linkname)):
            # print(_os.path.joinn(self.lbkupdir, self._linkname))
            # _os.remove(_os.path.joinn(self.lbkupdir, self._linkname))
        # cmdline = "ssh {0} '{1} --force -s {2} {3}'".format(

* Thu 29 Aug 2013 12:41:59 PM JST
        # if _os.path.exists(_os.path.join(self.lbkupdir, self._linkname)):
            # print(_os.path.joinn(self.lbkupdir, self._linkname))
            # _os.remove(_os.path.joinn(self.lbkupdir, self._linkname))
        # cmdline = "ssh {0} '{1} --force -s {2} {3}'".format(

* Thu 29 Aug 2013 12:41:59 PM JST
        # if _os.path.exists(_os.path.join(self.lbkupdir, self._linkname)):
            # print(_os.path.joinn(self.lbkupdir, self._linkname))
            # _os.remove(_os.path.joinn(self.lbkupdir, self._linkname))
        # cmdline = "ssh {0} '{1} --force -s {2} {3}'".format(
            # self.rname, CMD.get('ln'), self.bkupfullpath,

* Thu 29 Aug 2013 12:42:00 PM JST
        # if _os.path.exists(_os.path.join(self.lbkupdir, self._linkname)):
            # print(_os.path.joinn(self.lbkupdir, self._linkname))
            # _os.remove(_os.path.joinn(self.lbkupdir, self._linkname))
        # cmdline = "ssh {0} '{1} --force -s {2} {3}'".format(
            # self.rname, CMD.get('ln'), self.bkupfullpath,

* Thu 29 Aug 2013 12:42:00 PM JST
        # if _os.path.exists(_os.path.join(self.lbkupdir, self._linkname)):
            # print(_os.path.joinn(self.lbkupdir, self._linkname))
            # _os.remove(_os.path.joinn(self.lbkupdir, self._linkname))
        # cmdline = "ssh {0} '{1} --force -s {2} {3}'".format(
            # self.rname, CMD.get('ln'), self.bkupfullpath,
            # _os.path.join(self.bkupdir, self._linkname))

* Thu 29 Aug 2013 12:42:00 PM JST
        # if _os.path.exists(_os.path.join(self.lbkupdir, self._linkname)):
            # print(_os.path.joinn(self.lbkupdir, self._linkname))
            # _os.remove(_os.path.joinn(self.lbkupdir, self._linkname))
        # cmdline = "ssh {0} '{1} --force -s {2} {3}'".format(
            # self.rname, CMD.get('ln'), self.bkupfullpath,
            # _os.path.join(self.bkupdir, self._linkname))

* Thu 29 Aug 2013 12:42:00 PM JST
        # if _os.path.exists(_os.path.join(self.lbkupdir, self._linkname)):
            # print(_os.path.joinn(self.lbkupdir, self._linkname))
            # _os.remove(_os.path.joinn(self.lbkupdir, self._linkname))
        # cmdline = "ssh {0} '{1} --force -s {2} {3}'".format(
            # self.rname, CMD.get('ln'), self.bkupfullpath,
            # _os.path.join(self.bkupdir, self._linkname))
        linklocalfullpath = _os.path.join(self.lbkupdir, self._linkname)

* Thu 29 Aug 2013 12:42:00 PM JST
        # if _os.path.exists(_os.path.join(self.lbkupdir, self._linkname)):
            # print(_os.path.joinn(self.lbkupdir, self._linkname))
            # _os.remove(_os.path.joinn(self.lbkupdir, self._linkname))
        # cmdline = "ssh {0} '{1} --force -s {2} {3}'".format(
            # self.rname, CMD.get('ln'), self.bkupfullpath,
            # _os.path.join(self.bkupdir, self._linkname))
        linklocalfullpath = _os.path.join(self.lbkupdir, self._linkname)

* Thu 29 Aug 2013 12:42:00 PM JST
        # if _os.path.exists(_os.path.join(self.lbkupdir, self._linkname)):
            # print(_os.path.joinn(self.lbkupdir, self._linkname))
            # _os.remove(_os.path.joinn(self.lbkupdir, self._linkname))
        # cmdline = "ssh {0} '{1} --force -s {2} {3}'".format(
            # self.rname, CMD.get('ln'), self.bkupfullpath,
            # _os.path.join(self.bkupdir, self._linkname))
        linklocalfullpath = _os.path.join(self.lbkupdir, self._linkname)
        if _os.path.islink(linklocalfullpath):

* Thu 29 Aug 2013 12:42:08 PM JST

* Thu 29 Aug 2013 12:42:09 PM JST

* Thu 29 Aug 2013 12:42:09 PM JST
        # _os.system(' '.join(cmdline))

* Thu 29 Aug 2013 12:42:34 PM JST
 #.replace(
* Thu 29 Aug 2013 12:42:35 PM JST

* Thu 29 Aug 2013 12:42:35 PM JST

* Thu 29 Aug 2013 12:42:35 PM JST
                    # self.bkupdir, self.lbkupdir)

* Thu 29 Aug 2013 12:43:10 PM JST

* Thu 29 Aug 2013 12:43:10 PM JST

* Thu 29 Aug 2013 12:43:10 PM JST
        # cmdline = '{0} -s {1} {2}'.format(

* Thu 29 Aug 2013 12:43:10 PM JST
        # cmdline = '{0} -s {1} {2}'.format(

* Thu 29 Aug 2013 12:43:10 PM JST
        # cmdline = '{0} -s {1} {2}'.format(
            # CMD.get('ln'), self._bkupfullpath, latestfullpath)

* Thu 29 Aug 2013 01:04:58 PM JST
path.
* Thu 29 Aug 2013 01:49:54 PM JST

* Thu 29 Aug 2013 01:49:54 PM JST

* Thu 29 Aug 2013 01:49:54 PM JST
import argparse

* Fri 30 Aug 2013 04:19:59 AM JST
add_opt(['--rsync-path="sudo rsync"', '-z'])
* Fri 30 Aug 2013 04:20:35 AM JST

* Fri 30 Aug 2013 04:20:35 AM JST

* Fri 30 Aug 2013 04:20:35 AM JST
        self.add_opt(['--rsync-path="sudo rsync"', '-z'])

* Fri 30 Aug 2013 05:45:55 AM JST

* Fri 30 Aug 2013 05:45:55 AM JST

* Fri 30 Aug 2013 05:45:55 AM JST
        sys.exit('Errors: Could not run on this runnlevel.')

* Fri 30 Aug 2013 05:46:58 AM JST

* Fri 30 Aug 2013 05:46:58 AM JST

* Fri 30 Aug 2013 05:46:58 AM JST
    runlevel = 4

* Fri 30 Aug 2013 05:47:26 AM JST
RUNLEVEL
* Fri 30 Aug 2013 05:49:36 AM JST
'Errors: Could not run on this runnlevel.\n {} revel only'
* Fri 30 Aug 2013 05:54:12 AM JST
## Start Backup message
#
print(MSG.get('start'))
logging.log(10, MSG.get('start'))

* Fri 30 Aug 2013 05:54:25 AM JST

* Fri 30 Aug 2013 05:54:25 AM JST

* Fri 30 Aug 2013 05:54:25 AM JST
    #

* Fri 30 Aug 2013 05:56:03 AM JST
'/root/.local/share/Trash/'
* Fri 30 Aug 2013 05:56:12 AM JST
'/data/.Trash-0/'
* Fri 30 Aug 2013 05:56:23 AM JST
'/media/Data/.Trash-0/'
* Fri 30 Aug 2013 05:56:38 AM JST

* Fri 30 Aug 2013 05:56:38 AM JST

* Fri 30 Aug 2013 05:56:38 AM JST
    trash_path = '/root/.local/share/Trash/'

* Fri 30 Aug 2013 05:56:39 AM JST

* Fri 30 Aug 2013 05:56:39 AM JST

* Fri 30 Aug 2013 05:56:39 AM JST
    data_trash_path = '/data/.Trash-0/'

* Fri 30 Aug 2013 05:56:40 AM JST

* Fri 30 Aug 2013 05:56:40 AM JST

* Fri 30 Aug 2013 05:56:40 AM JST
    local_data_trash_path = '/media/Data/.Trash-0/'

* Fri 30 Aug 2013 05:57:22 AM JST
trash_path
* Fri 30 Aug 2013 05:57:26 AM JST
trash_path
* Fri 30 Aug 2013 05:58:11 AM JST

* Fri 30 Aug 2013 05:58:11 AM JST

* Fri 30 Aug 2013 05:58:11 AM JST
#

* Fri 30 Aug 2013 06:01:44 AM JST
bk = LinkDestRemoteBackup(src='/', bkupdir=backup_path, rname='ki',
                          logname=log_name)
excludes = ['/data/*',
            '/var/cache/apt/archive/*',
            '/home/*/.mozilla/firefox/*.default/Cache/*',
            '/home/*/.cache/google-chrome/Default/*',
            '/root/.mozilla/firefox/*.default/Cache/*',
            '/root/.cache/google-chrome/Default/*',
            '/root/.local/share/Trash/files/*',
            '/root/.local/share/Trash/info/*',
            ]

bk.add_exclude(excludes)
bk.add_opt(['--rsync-path="sudo rsync"', '-z'])
bk.backup()

* Fri 30 Aug 2013 06:02:25 AM JST

* Fri 30 Aug 2013 06:02:25 AM JST

* Fri 30 Aug 2013 06:02:25 AM JST
## Main Backup

* Fri 30 Aug 2013 06:02:26 AM JST
## Main Backup

* Fri 30 Aug 2013 06:02:26 AM JST
## Main Backup
#

* Fri 30 Aug 2013 06:03:57 AM JST
bk._mntpoint
* Fri 30 Aug 2013 06:05:03 AM JST
# check platform
if 'nt' == os.name:
    sys.exit('Not support WindowsNT.')

# check root
if not os.geteuid() == 0:
    sys.exit('Script must be run as root.')


* Fri 30 Aug 2013 06:05:33 AM JST

* Fri 30 Aug 2013 06:05:55 AM JST
###############################################################################
###############################################################################
* Fri 30 Aug 2013 06:05:59 AM JST

* Fri 30 Aug 2013 06:05:59 AM JST

* Fri 30 Aug 2013 06:05:59 AM JST
###############################################################################

* Fri 30 Aug 2013 06:05:59 AM JST
###############################################################################

* Fri 30 Aug 2013 06:05:59 AM JST
###############################################################################
###############################################################################

* Fri 30 Aug 2013 06:07:34 AM JST
cleanlist = ['/root/.local/share/Trash/',
             '/data/.Trash-0/',
             '/media/Data/.Trash-0/']

* Fri 30 Aug 2013 06:10:53 AM JST

* Fri 30 Aug 2013 06:10:53 AM JST

* Fri 30 Aug 2013 06:10:53 AM JST
###############################################################################

* Fri 30 Aug 2013 06:11:34 AM JST
def _main():
    """Main function."""
    parser = argparse.ArgumentParser(description=""" """)
    parser.add_argument('--version',
                        dest='version',
                        action='version',
                        version=__version__,
                        help='Version Strings.')
    # (yas/expand-link "argparse_add_argument" t)
    args = parser.parse_args()


if __name__ == '__main__':
    _main()

* Fri 30 Aug 2013 06:11:57 AM JST
def _main():
    """Main function."""

* Fri 30 Aug 2013 06:12:29 AM JST
if __name__ == '__main__':
    _main()


* Fri 30 Aug 2013 06:12:40 AM JST

* Fri 30 Aug 2013 06:12:40 AM JST

* Fri 30 Aug 2013 06:12:40 AM JST
## options

* Fri 30 Aug 2013 06:12:40 AM JST
## options

* Fri 30 Aug 2013 06:12:40 AM JST
## options
#

* Fri 30 Aug 2013 06:12:44 AM JST
def _main():
    """Main function."""
    parser = argparse.ArgumentParser(description="""Backup knight""")
    parser.add_argument('--version',
                        dest='version',
                        action='version',
                        version=__version__,
                        help='Version Strings.')
    parser.add_argument('-f', '--force',
                        dest='force',
                        action='store_true',
                        default=False,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)
                        help='Force Backup.')

    # (yas/expand-link "argparse_add_argument" t)
    opt = parser.parse_args()

if __name__ == '__main__':
    _main()

* Fri 30 Aug 2013 06:13:24 AM JST
    BACKUP_EXCLUDES = ['/data/*',
                       '/var/cache/apt/archive/*',
                       '/home/*/.mozilla/firefox/*.default/Cache/*',
                       '/home/*/.cache/google-chrome/Default/*',
                       '/root/.mozilla/firefox/*.default/Cache/*',
                       '/root/.cache/google-chrome/Default/*',
                       '/root/.local/share/Trash/files/*',
                       '/root/.local/share/Trash/info/*',
                       ]

* Fri 30 Aug 2013 06:16:18 AM JST
Main
* Fri 30 Aug 2013 06:16:23 AM JST
_main
* Fri 30 Aug 2013 06:16:58 AM JST
opt = 
* Fri 30 Aug 2013 06:17:04 AM JST

* Fri 30 Aug 2013 06:17:04 AM JST

* Fri 30 Aug 2013 06:17:04 AM JST


* Fri 30 Aug 2013 06:17:04 AM JST


* Fri 30 Aug 2013 06:17:04 AM JST

def _main():

* Fri 30 Aug 2013 06:17:05 AM JST

def _main():

* Fri 30 Aug 2013 06:17:05 AM JST

def _main():
    """SUMMARY

* Fri 30 Aug 2013 06:22:23 AM JST
['/data/*',
                   '/var/cache/apt/archive/*',
                   '/home/*/.mozilla/firefox/*.default/Cache/*',
                   '/home/*/.cache/google-chrome/Default/*',
                   '/root/.mozilla/firefox/*.default/Cache/*',
                   '/root/.cache/google-chrome/Default/*',
                   '/root/.local/share/Trash/files/*',
                   '/root/.local/share/Trash/info/*',
                   ]
* Fri 30 Aug 2013 06:23:16 AM JST
/etc/fstab
/etc/crypttab

* Fri 30 Aug 2013 06:24:45 AM JST
pass
* Fri 30 Aug 2013 06:24:55 AM JST
    bk = LinkDestRemoteBackup(src='/', bkupdir=backup_path, rname='ki',
                              logname=log_name)

* Fri 30 Aug 2013 06:25:36 AM JST

* Fri 30 Aug 2013 06:25:36 AM JST

* Fri 30 Aug 2013 06:25:36 AM JST
    bk.add

* Fri 30 Aug 2013 06:25:40 AM JST
    bk.add_opt(['--rsync-path="sudo rsync"', '-z'])
* Fri 30 Aug 2013 06:25:46 AM JST
bk.backup()
* Fri 30 Aug 2013 07:22:36 AM JST
run'
* Fri 30 Aug 2013 07:22:36 AM JST
dry-run'
* Fri 30 Aug 2013 07:23:30 AM JST
True
* Fri 30 Aug 2013 07:23:30 AM JST
shell=True
* Fri 30 Aug 2013 07:39:31 AM JST
def check_runlevel(num):
    """SUMMARY

    @Arguments:
    - `num`:

    @Return:
    """
    ps = sbp.Popen(['/sbin/runlevel'], stdout=sbp.PIPE)
    out, err = ps.communicate()
    if 'N {}\n'.format(num) == out:
        return True

* Fri 30 Aug 2013 07:43:03 AM JST
'Errors: Could not run on this runnlevel.\n{} revel only'
* Fri 30 Aug 2013 07:43:40 AM JST
this
* Fri 30 Aug 2013 07:45:14 AM JST
'Runlevel Errors: Could not execute this script on this runnlevel.\n{} revel only'
* Fri 30 Aug 2013 07:47:20 AM JST

* Fri 30 Aug 2013 07:47:20 AM JST

* Fri 30 Aug 2013 07:47:22 AM JST
from MODULE import 
* Fri 30 Aug 2013 07:51:48 AM JST
--archive
* Fri 30 Aug 2013 07:56:32 AM JST

* Fri 30 Aug 2013 07:56:32 AM JST

* Fri 30 Aug 2013 07:56:32 AM JST
                 # -a/--archive options

* Fri 30 Aug 2013 07:56:43 AM JST
group',                
* Fri 30 Aug 2013 07:56:57 AM JST
# -a/--archive options
* Fri 30 Aug 2013 07:57:02 AM JST
'--verbose', '--compress',
* Fri 30 Aug 2013 07:57:08 AM JST
                 
* Fri 30 Aug 2013 07:57:23 AM JST
                 
* Fri 30 Aug 2013 07:58:36 AM JST
                 
* Fri 30 Aug 2013 07:58:45 AM JST
'--delete', '--force',
* Fri 30 Aug 2013 07:58:58 AM JST
'--rsync-path="sudo rsync"',
* Fri 30 Aug 2013 07:59:03 AM JST
'--delete', '--force',
* Fri 30 Aug 2013 08:05:43 AM JST
rsync_cmd
* Fri 30 Aug 2013 08:05:51 AM JST
sync_local
* Fri 30 Aug 2013 08:05:57 AM JST
rsync_cmd
* Fri 30 Aug 2013 08:07:57 AM JST

* Fri 30 Aug 2013 08:07:57 AM JST

* Fri 30 Aug 2013 08:07:57 AM JST
            return True

* Fri 30 Aug 2013 08:08:14 AM JST
rsync
* Fri 30 Aug 2013 08:08:24 AM JST
data_backup
* Fri 30 Aug 2013 08:09:55 AM JST
# -a/--archive options
* Fri 30 Aug 2013 08:16:46 AM JST
    cleanDownloads()
    cleanBookmarks()
    prevent.allow_runlevel(RUNLEVEL)
    aptupdate()
    backupRemote()

    with king.King(verbose=True) as ki:
        if not ki.ismount():
            sys.exit("Error: king server's /data not mounted.")
        rsync_backup_result = rsync_mirror_data()
        if rsync_backup_result:
            kihalt()

* Fri 30 Aug 2013 08:32:05 AM JST

* Fri 30 Aug 2013 08:32:05 AM JST

* Fri 30 Aug 2013 08:32:05 AM JST
    if :

* Fri 30 Aug 2013 08:32:59 AM JST

* Fri 30 Aug 2013 08:32:59 AM JST

* Fri 30 Aug 2013 08:32:59 AM JST
    ps = sbp.Popen(['/sbin/runlevel'], stdout=sbp.PIPE)

* Fri 30 Aug 2013 08:33:00 AM JST
    ps = sbp.Popen(['/sbin/runlevel'], stdout=sbp.PIPE)

* Fri 30 Aug 2013 08:33:00 AM JST
    ps = sbp.Popen(['/sbin/runlevel'], stdout=sbp.PIPE)
    out, err = ps.communicate()

* Fri 30 Aug 2013 08:33:22 AM JST
run
* Fri 30 Aug 2013 08:34:49 AM JST
check_
* Fri 30 Aug 2013 08:35:01 AM JST
not 
* Fri 30 Aug 2013 08:35:06 AM JST
num 
* Fri 30 Aug 2013 08:37:47 AM JST

* Fri 30 Aug 2013 08:37:47 AM JST

* Fri 30 Aug 2013 08:37:47 AM JST
    print(type(num))

* Fri 30 Aug 2013 08:38:23 AM JST

* Fri 30 Aug 2013 08:38:23 AM JST

* Fri 30 Aug 2013 08:38:23 AM JST
        print(txt)

* Fri 30 Aug 2013 08:39:45 AM JST

* Fri 30 Aug 2013 08:39:45 AM JST

* Fri 30 Aug 2013 08:39:45 AM JST
import subprocess as sbp

* Fri 30 Aug 2013 08:40:58 AM JST

* Fri 30 Aug 2013 08:40:58 AM JST

* Fri 30 Aug 2013 08:40:58 AM JST
        return True

* Fri 30 Aug 2013 08:41:14 AM JST

* Fri 30 Aug 2013 08:41:14 AM JST

* Fri 30 Aug 2013 08:41:14 AM JST
    return True

* Fri 30 Aug 2013 08:41:39 AM JST

* Fri 30 Aug 2013 08:41:39 AM JST

* Fri 30 Aug 2013 08:41:39 AM JST
        return False

* Fri 30 Aug 2013 08:41:40 AM JST

* Fri 30 Aug 2013 08:41:40 AM JST

* Fri 30 Aug 2013 08:41:40 AM JST
        return False

* Fri 30 Aug 2013 08:53:47 AM JST
getrunlevel()
* Fri 30 Aug 2013 08:54:36 AM JST

* Fri 30 Aug 2013 08:54:36 AM JST

* Fri 30 Aug 2013 08:54:36 AM JST
    for n in num:

* Fri 30 Aug 2013 08:56:51 AM JST

* Fri 30 Aug 2013 08:56:51 AM JST

* Fri 30 Aug 2013 08:56:51 AM JST
    num = []

* Fri 30 Aug 2013 08:57:24 AM JST

* Fri 30 Aug 2013 08:57:24 AM JST

* Fri 30 Aug 2013 08:57:24 AM JST
    if None == level:

* Fri 30 Aug 2013 08:57:25 AM JST
    if None == level:

* Fri 30 Aug 2013 08:57:25 AM JST
    if None == level:
        return None

* Fri 30 Aug 2013 08:57:33 AM JST
map(str, num)
* Fri 30 Aug 2013 08:57:37 AM JST
level
* Fri 30 Aug 2013 08:57:48 AM JST

* Fri 30 Aug 2013 08:57:48 AM JST

* Fri 30 Aug 2013 08:57:48 AM JST
    num = 

* Fri 30 Aug 2013 08:57:52 AM JST
    num = 

* Fri 30 Aug 2013 08:57:52 AM JST
    num = 
    level = getrunlevel()

* Fri 30 Aug 2013 08:59:38 AM JST
string
* Fri 30 Aug 2013 08:59:54 AM JST
getrunlevel()
* Fri 30 Aug 2013 09:00:03 AM JST
str
* Fri 30 Aug 2013 09:01:26 AM JST
int
* Fri 30 Aug 2013 09:01:31 AM JST
int
* Fri 30 Aug 2013 09:04:31 AM JST

* Fri 30 Aug 2013 09:04:31 AM JST

* Fri 30 Aug 2013 09:04:31 AM JST
            print('disallow')

* Fri 30 Aug 2013 09:04:42 AM JST
    if type(num) == IntType:
        num = [num]
    level = getrunlevel()
    if None == level:
        raise StandardError('Command failed.')
    if not level in map(str, num):
            sys.exit(txt)
* Fri 30 Aug 2013 09:04:52 AM JST
not 
* Fri 30 Aug 2013 09:05:03 AM JST
txt=MSG.get('allow_runlevel')
* Fri 30 Aug 2013 09:06:28 AM JST
Standard
* Fri 30 Aug 2013 09:07:46 AM JST
'Command runlevel failed.'
* Fri 30 Aug 2013 09:08:13 AM JST
ERR.get('err001')
* Fri 30 Aug 2013 09:09:37 AM JST
raise CommandError(ERR.get('err001'))
* Fri 30 Aug 2013 09:09:46 AM JST

* Fri 30 Aug 2013 09:09:46 AM JST

* Fri 30 Aug 2013 09:09:46 AM JST
    return None # if status not equal 0 return None

* Fri 30 Aug 2013 09:09:50 AM JST

* Fri 30 Aug 2013 09:09:50 AM JST

* Fri 30 Aug 2013 09:09:50 AM JST
    if status == 0:

* Fri 30 Aug 2013 09:09:59 AM JST

* Fri 30 Aug 2013 09:09:59 AM JST

* Fri 30 Aug 2013 09:09:59 AM JST
    if None == level:

* Fri 30 Aug 2013 09:10:02 AM JST

* Fri 30 Aug 2013 09:10:02 AM JST

* Fri 30 Aug 2013 09:10:02 AM JST
    if None == level:

* Fri 30 Aug 2013 09:10:04 AM JST
    if None == level:

* Fri 30 Aug 2013 09:10:04 AM JST
    if None == level:
        raise CommandError(ERR.get('err001'))

* Fri 30 Aug 2013 09:10:08 AM JST
getrunlevel()
* Fri 30 Aug 2013 09:10:15 AM JST

* Fri 30 Aug 2013 09:10:15 AM JST

* Fri 30 Aug 2013 09:10:15 AM JST
    level = 

* Fri 30 Aug 2013 09:10:22 AM JST
getrunlevel()
* Fri 30 Aug 2013 09:10:28 AM JST

* Fri 30 Aug 2013 09:10:28 AM JST

* Fri 30 Aug 2013 09:10:28 AM JST
    level = 

* Fri 30 Aug 2013 09:15:28 AM JST
subprocess
* Fri 30 Aug 2013 09:27:19 AM JST
sbp.check_call(cmd)
* Fri 30 Aug 2013 09:27:47 AM JST
cmd
* Fri 30 Aug 2013 09:37:43 AM JST

* Fri 30 Aug 2013 09:37:43 AM JST

* Fri 30 Aug 2013 09:37:43 AM JST
    sbp.check_call(sync_local)

* Fri 30 Aug 2013 09:37:53 AM JST
                
* Fri 30 Aug 2013 09:51:06 AM JST
import os as _os

if 'nt' == _os.name:
    from nt_tunnel import Tunneling, TunnelError

elif 'posix' == _os.name:
    from posix_tunnel import Tunneling, TunnelError

* Fri 30 Aug 2013 09:51:15 AM JST
nt_tunnel
* Fri 30 Aug 2013 09:51:20 AM JST
Tunneling
* Fri 30 Aug 2013 09:51:26 AM JST
, TunnelError
* Fri 30 Aug 2013 09:51:29 AM JST
posix_tunnel
* Fri 30 Aug 2013 09:51:34 AM JST
Tunneling, TunnelError
* Fri 30 Aug 2013 09:52:32 AM JST
ref
* Fri 30 Aug 2013 09:55:10 AM JST
CMD = {'ln': '/bin/ln',
       'rm': '/bin/rm',
       'rmdir': '/bin/rmdir',
       'du': '/usr/bin/du',
       'rsync': '/usr/bin/rsync',
       'sshfs': '/usr/bin/sshfs',
       'umount': '/bin/umount', }

* Fri 30 Aug 2013 09:58:29 AM JST
'/sbin/runlevel'
* Fri 30 Aug 2013 10:04:00 AM JST

* Fri 30 Aug 2013 10:04:00 AM JST

* Fri 30 Aug 2013 10:04:00 AM JST
from ref import CMD

* Fri 30 Aug 2013 10:04:01 AM JST

* Fri 30 Aug 2013 10:04:01 AM JST

* Fri 30 Aug 2013 10:04:01 AM JST
from ref import CMD

* Fri 30 Aug 2013 10:10:02 AM JST
'--recursive', '--links', '--perms', '--times', # -a/--archive options
                '--group', '--owner', '--devices', '--specials', # -a/--archive options
* Fri 30 Aug 2013 10:10:09 AM JST
 # -a/--archive options
* Fri 30 Aug 2013 10:10:11 AM JST
# -a/--archive options]
* Fri 30 Aug 2013 10:10:12 AM JST
                
* Fri 30 Aug 2013 11:15:38 AM JST
 '--verbose', '--compress', '--delete', '--force', '--update'
* Fri 30 Aug 2013 11:15:47 AM JST
'-e ssh'
* Fri 30 Aug 2013 11:23:04 AM JST
pass
* Fri 30 Aug 2013 11:25:59 AM JST
ki.pave()
* Fri 30 Aug 2013 11:32:15 AM JST

* Fri 30 Aug 2013 11:32:15 AM JST

* Fri 30 Aug 2013 11:32:15 AM JST
    # cmdline =

* Fri 30 Aug 2013 11:32:32 AM JST
sbp
* Fri 30 Aug 2013 11:37:06 AM JST
        
* Fri 30 Aug 2013 11:37:16 AM JST
DEFAULT_DATA_OPT
* Fri 30 Aug 2013 11:42:30 AM JST
object
* Fri 30 Aug 2013 11:42:59 AM JST
_
* Fri 30 Aug 2013 11:43:28 AM JST
su@er()
* Fri 30 Aug 2013 11:47:13 AM JST
DEFAULT_DATA_OPT = ['-e ssh', '--verbose', '--compress',
                    '--delete', '--force', '--update']

ARCHIVE_OPT = ['--recursive', '--links', '--perms', '--times', '--group',
               '--owner', '--devices', '--specials']

EXCLUDE_DATA = ['/data/.backup/*', '/data/.reprository', '/data/.backup/*',
                'lost+found']

DEBUG_OPT = ['--dry-run']

* Fri 30 Aug 2013 11:55:46 AM JST
print('{0:*^30}'.format('DEBUG --dry-run'))
* Fri 30 Aug 2013 11:59:41 AM JST
                   
* Fri 30 Aug 2013 11:59:51 AM JST
                
* Fri 30 Aug 2013 12:01:02 PM JST
'--verbose',
* Fri 30 Aug 2013 12:01:05 PM JST
                        
* Fri 30 Aug 2013 12:03:26 PM JST
                       
* Fri 30 Aug 2013 12:03:30 PM JST
                       
* Fri 30 Aug 2013 12:03:33 PM JST
                       
* Fri 30 Aug 2013 12:03:38 PM JST
            
* Fri 30 Aug 2013 12:04:33 PM JST
                      
* Fri 30 Aug 2013 12:04:39 PM JST
self._
* Fri 30 Aug 2013 12:04:40 PM JST
                      self._
* Fri 30 Aug 2013 12:05:13 PM JST

* Fri 30 Aug 2013 12:05:14 PM JST

* Fri 30 Aug 2013 12:05:14 PM JST
    _debug_opts = ['--dry-run']

* Fri 30 Aug 2013 12:07:58 PM JST
src_dest = 
* Fri 30 Aug 2013 12:08:52 PM JST

* Fri 30 Aug 2013 12:08:52 PM JST

* Fri 30 Aug 2013 12:08:53 PM JST
    _local = ['/']

* Fri 30 Aug 2013 12:11:02 PM JST
join
* Fri 30 Aug 2013 12:11:03 PM JST
print(' '.join
* Fri 30 Aug 2013 12:11:51 PM JST
def
* Fri 30 Aug 2013 12:13:06 PM JST

* Fri 30 Aug 2013 12:13:06 PM JST

* Fri 30 Aug 2013 12:13:06 PM JST
        if :

* Fri 30 Aug 2013 12:13:09 PM JST
        if self._verbose and self.debug:
            print('{0:*^30}'.format('DEBUG --dry-run'))
        local_remote = ['/data', 'ki:/']
        self._execute([CMD.get('rsync')] + self._debug_opts +
                      self._default_opts + self._archive_opts +
                      self._exclude_opts + local_remote)

* Fri 30 Aug 2013 12:13:16 PM JST
'/data'
* Fri 30 Aug 2013 12:13:45 PM JST
local_
* Fri 30 Aug 2013 12:14:41 PM JST
self._pave_server()
* Fri 30 Aug 2013 12:36:26 PM JST
from mytemp.abstract import Verbose
* Fri 30 Aug 2013 12:41:02 PM JST
[CMD.get('rsync')] + self._debug_opts +
                      self._default_opts + self._archive_opts +
                      self._exclude_opts
* Fri 30 Aug 2013 12:46:20 PM JST
self._ssh_opt
* Fri 30 Aug 2013 12:47:49 PM JST
['--exclude=' + x for x in self._excludes]
* Fri 30 Aug 2013 12:48:34 PM JST
['--exclude=' + x for x in self._exclude_opts] +
* Fri 30 Aug 2013 12:53:54 PM JST
v'
* Fri 30 Aug 2013 12:53:55 PM JST
v'
* Fri 30 Aug 2013 12:54:15 PM JST
self._archive_opts
* Fri 30 Aug 2013 12:54:38 PM JST
self._default_opts +
* Fri 30 Aug 2013 12:54:48 PM JST
self._default_opts +
* Fri 30 Aug 2013 12:55:00 PM JST
self._default_opts + 
* Fri 30 Aug 2013 12:56:21 PM JST
--recursive             recurse into directories
* Fri 30 Aug 2013 12:56:27 PM JST
--recursive
* Fri 30 Aug 2013 12:56:39 PM JST
--links
* Fri 30 Aug 2013 12:56:49 PM JST
--perms
* Fri 30 Aug 2013 01:01:37 PM JST
self._ssh_opt
* Fri 30 Aug 2013 01:01:47 PM JST
                       
* Fri 30 Aug 2013 01:04:36 PM JST
verbose
* Fri 30 Aug 2013 01:07:12 PM JST

* Fri 30 Aug 2013 01:07:12 PM JST

* Fri 30 Aug 2013 01:07:12 PM JST
                     '--rsync-path="sudo rsync"'

* Fri 30 Aug 2013 01:08:06 PM JST
True
* Fri 30 Aug 2013 01:08:07 PM JST
shell=True
* Fri 30 Aug 2013 01:13:37 PM JST
'-e ssh'
* Fri 30 Aug 2013 01:14:02 PM JST

* Fri 30 Aug 2013 01:14:02 PM JST

* Fri 30 Aug 2013 01:14:02 PM JST
    _ssh_opt = []

* Fri 30 Aug 2013 01:14:26 PM JST
self._ssh_opt + 
* Fri 30 Aug 2013 01:14:31 PM JST
self._ssh_opt + 
* Fri 30 Aug 2013 01:14:53 PM JST
True
* Fri 30 Aug 2013 01:14:54 PM JST
shell=True
* Fri 30 Aug 2013 01:58:00 PM JST

* Fri 30 Aug 2013 01:58:00 PM JST

* Fri 30 Aug 2013 01:58:00 PM JST
    pass

* Fri 30 Aug 2013 01:58:29 PM JST
    def _options_maker():
        parser = argparse.ArgumentParser(description="""Mirror with king server.""")
        parser.add_argument('--version',
                            dest='version',
                            action='version',
                            version=__version__,
                            help='Version Strings.')
        # (yas/expand-link "argparse_add_argument" t)
        return parser.parse_args()

* Fri 30 Aug 2013 02:04:35 PM JST

* Fri 30 Aug 2013 02:04:35 PM JST

* Fri 30 Aug 2013 02:04:35 PM JST
        m = DataMirror(verbose=args.silent, debug=args.debug)

* Fri 30 Aug 2013 02:06:42 PM JST
m.push()
* Fri 30 Aug 2013 02:07:21 PM JST
    parser.add_argument('--pull-push',
                        dest='pull_push',
                        action='store_true',
                        default=False,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)
                        help='Rsync pull and push')


* Fri 30 Aug 2013 02:07:30 PM JST
    parser.add_argument('--pull-only',
                        dest='pull_only',
                        action='store_true',
                        default=False,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)
                        help='Rsync pull only.')


* Fri 30 Aug 2013 02:07:39 PM JST
    parser.add_argument('--pull-only',
                        dest='pull_only',
                        action='store_true',
                        default=False,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)
                        help='Rsync pull only.')

    parser.add_argument('--push-only',
                        dest='push_only',
                        action='store_true',
                        default=False,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)
                        help='Rsync push only.')


* Fri 30 Aug 2013 02:11:24 PM JST
usa
* Fri 30 Aug 2013 02:11:38 PM JST
print_usa
* Fri 30 Aug 2013 02:11:57 PM JST
parse_args()
* Fri 30 Aug 2013 02:12:05 PM JST
args
* Fri 30 Aug 2013 02:13:10 PM JST
argops
* Fri 30 Aug 2013 02:13:19 PM JST
opt
* Fri 30 Aug 2013 02:13:37 PM JST
parser.print_usage()
* Fri 30 Aug 2013 02:13:40 PM JST
elif 
* Fri 30 Aug 2013 02:25:18 PM JST
python_path="/usr/bin/python"
backup_ki="/home/t1/.pylib/backup_local_ki.py"

[ -x $python_path ] || exit 0
[ -x $backup_ki ] || exit 0

$python_path $backup_ki

* Fri 30 Aug 2013 02:25:22 PM JST
python_path="/usr/bin/python"
backup_ki="/home/t1/.pylib/backup_local_ki.py"

[ -x $python_path ] || exit 0
[ -x $backup_ki ] || exit 0

$python_path $backup_ki

exit 0

* Fri 30 Aug 2013 02:26:00 PM JST
backup_ki
* Fri 30 Aug 2013 02:26:30 PM JST
mirror_push_pull
* Fri 30 Aug 2013 02:27:08 PM JST
ki
* Fri 30 Aug 2013 02:27:08 PM JST
backup_ki
* Fri 30 Aug 2013 02:28:14 PM JST
#!/bin/sh

python_path="/usr/bin/python"
mirror="/root/.pylib/mirror.py"
push_pull_opt="--push-pull"

[ -x $python_path ] || exit 0
[ -x $mirror ] || exit 0

$python_path $mirror $push_pull_opt

exit 0

* Fri 30 Aug 2013 02:28:37 PM JST
push_
* Fri 30 Aug 2013 02:28:44 PM JST
push
* Fri 30 Aug 2013 02:28:53 PM JST
pull
* Fri 30 Aug 2013 02:28:53 PM JST
push_pull
* Fri 30 Aug 2013 02:29:21 PM JST
#!/bin/sh

python_path="/usr/bin/python"
mirror="/root/.pylib/mirror.py"
push_pull_opt="--push-pull"

[ -x $python_path ] || exit 0
[ -x $mirror ] || exit 0

$python_path $mirror $push_pull_opt

exit 0

* Fri 30 Aug 2013 02:30:02 PM JST
push_
* Fri 30 Aug 2013 02:30:05 PM JST
push_
* Fri 30 Aug 2013 02:30:19 PM JST
pull
* Fri 30 Aug 2013 02:30:24 PM JST
#!/bin/sh

python_path="/usr/bin/python"
mirror="/root/.pylib/mirror.py"
push_opt="--push-only"

[ -x $python_path ] || exit 0
[ -x $mirror ] || exit 0

$python_path $mirror $push_opt

exit 0
* Fri 30 Aug 2013 02:31:00 PM JST
push
* Fri 30 Aug 2013 02:31:07 PM JST
push
* Fri 30 Aug 2013 02:35:54 PM JST

* Fri 30 Aug 2013 02:35:56 PM JST
debug
* Fri 30 Aug 2013 02:35:57 PM JST
opt.debug
* Fri 30 Aug 2013 02:39:17 PM JST
backup  boot  dev  home  lost+found  mnt   public  run   selinux  srv  tmp  var
bin     data  etc  lib   media       proc  root    sbin  share    sys  usr

* Fri 30 Aug 2013 02:39:42 PM JST
backup 
* Fri 30 Aug 2013 02:42:14 PM JST
data  
* Fri 30 Aug 2013 02:43:26 PM JST
'/boot',
'/dev',
'/home',
'/lost+found',
'/mnt',
'/public',
'/run',
'/selinux',
'/srv',
'/tmp',
'/var',
'/bin',
'/etc',
'/lib',
'/media',
'/proc',
'/root',
'/sbin',
'/share',
'/sys',
'/usr',

* Fri 30 Aug 2013 02:44:31 PM JST

* Fri 30 Aug 2013 02:44:31 PM JST

* Fri 30 Aug 2013 02:44:31 PM JST
    m = DataMirror(verbose=opt.silent, debug=True)

* Fri 30 Aug 2013 02:52:02 PM JST
    
* Fri 30 Aug 2013 02:52:05 PM JST
debug
* Fri 30 Aug 2013 02:52:05 PM JST
opt.debug
* Fri 30 Aug 2013 02:56:21 PM JST
'-e ssh', 
* Fri 30 Aug 2013 02:56:43 PM JST
['-e ssh'] + 
* Fri 30 Aug 2013 03:05:13 PM JST
True
* Fri 30 Aug 2013 03:05:13 PM JST
shell=True
* Fri 30 Aug 2013 03:10:23 PM JST
check_call
* Fri 30 Aug 2013 03:12:16 PM JST
sbp.Popen(cmdline, shell=True)
* Fri 30 Aug 2013 03:12:25 PM JST
' '.join(cmdline)
* Fri 30 Aug 2013 03:13:11 PM JST

* Fri 30 Aug 2013 03:13:11 PM JST

* Fri 30 Aug 2013 03:13:11 PM JST
        os.system()

* Fri 30 Aug 2013 03:15:21 PM JST

* Fri 30 Aug 2013 03:15:21 PM JST

* Fri 30 Aug 2013 03:15:21 PM JST
import subprocess as sbp

* Fri 30 Aug 2013 03:17:41 PM JST
push
* Fri 30 Aug 2013 03:20:06 PM JST
    if not os.path.exists('/data/archive'):
        return False

* Fri 30 Aug 2013 03:21:16 PM JST
False
* Fri 30 Aug 2013 03:21:17 PM JST
return False
* Fri 30 Aug 2013 03:22:57 PM JST
    
* Fri 30 Aug 2013 03:23:20 PM JST
m = DataMirror(verbose=opt.silent, debug=opt.debug)
* Fri 30 Aug 2013 03:23:40 PM JST
silent
* Fri 30 Aug 2013 03:23:40 PM JST
opt.silent
* Fri 30 Aug 2013 03:24:34 PM JST
rsync_backup_result = 
* Fri 30 Aug 2013 03:26:01 PM JST

* Fri 30 Aug 2013 03:26:01 PM JST

* Fri 30 Aug 2013 03:26:01 PM JST
    with king.King(verbose=True) as ki:

* Fri 30 Aug 2013 03:26:02 PM JST
    with king.King(verbose=True) as ki:

* Fri 30 Aug 2013 03:26:02 PM JST
    with king.King(verbose=True) as ki:
        if not ki.ismount():

* Fri 30 Aug 2013 03:26:02 PM JST
    with king.King(verbose=True) as ki:
        if not ki.ismount():

* Fri 30 Aug 2013 03:26:02 PM JST
    with king.King(verbose=True) as ki:
        if not ki.ismount():
            sys.exit("Error: king server's /data not mounted.")

* Fri 30 Aug 2013 03:26:04 PM JST

* Fri 30 Aug 2013 03:26:04 PM JST

* Fri 30 Aug 2013 03:26:04 PM JST
        # if rsync_backup_result:

* Fri 30 Aug 2013 03:26:04 PM JST
        # if rsync_backup_result:

* Fri 30 Aug 2013 03:26:04 PM JST
        # if rsync_backup_result:
            # kihalt()

* Fri 30 Aug 2013 03:27:00 PM JST

* Fri 30 Aug 2013 03:27:00 PM JST

* Fri 30 Aug 2013 03:27:00 PM JST
import sys

* Fri 30 Aug 2013 03:36:58 PM JST

* Fri 30 Aug 2013 03:36:58 PM JST

* Fri 30 Aug 2013 03:36:58 PM JST
    # if not check_runlevel(RUNLEVEL):

* Fri 30 Aug 2013 03:36:58 PM JST
    # if not check_runlevel(RUNLEVEL):

* Fri 30 Aug 2013 03:36:58 PM JST
    # if not check_runlevel(RUNLEVEL):
        # sys.exit(MSG.get('err_runlevel').format(RUNLEVEL))

* Fri 30 Aug 2013 03:46:23 PM JST
os.system('rm /root/Downloads/*.torrent')
* Fri 30 Aug 2013 03:47:32 PM JST

* Fri 30 Aug 2013 03:47:32 PM JST

* Fri 30 Aug 2013 03:47:32 PM JST
print('hello')

* Fri 30 Aug 2013 03:47:51 PM JST
CMD.get('rm') + ' /root/Downloads/*.torrent'
* Fri 30 Aug 2013 03:48:00 PM JST
CMD.get('rm')
* Fri 30 Aug 2013 03:48:08 PM JST
' /root/Downloads/*.torrent'
* Fri 30 Aug 2013 03:48:59 PM JST
    sbp.Popen([CMD.get('rm'), ' /root/Downloads/*.torrent'],
              stdout=sbp.PIPE, stderr=sbp.PIPE)

* Fri 30 Aug 2013 03:49:28 PM JST
sbp
* Fri 30 Aug 2013 03:49:32 PM JST
subprocess
* Fri 30 Aug 2013 03:50:41 PM JST

* Fri 30 Aug 2013 03:50:41 PM JST

* Fri 30 Aug 2013 03:50:41 PM JST
    # os.system(CMD.get('rm') + ' /root/Downloads/*.torrent')

* Fri 30 Aug 2013 03:53:59 PM JST

* Fri 30 Aug 2013 03:54:00 PM JST

* Fri 30 Aug 2013 03:54:00 PM JST
import os

* Fri 30 Aug 2013 03:55:20 PM JST
wait_enter('Please Enter will next apt-get: ')
* Fri 30 Aug 2013 03:55:41 PM JST

* Fri 30 Aug 2013 03:55:41 PM JST

* Fri 30 Aug 2013 03:55:41 PM JST
    wait_enter('Please Enter will next clean bookmarks.: ')

* Fri 30 Aug 2013 03:56:32 PM JST

* Fri 30 Aug 2013 03:56:32 PM JST

* Fri 30 Aug 2013 03:56:32 PM JST
# for debug

* Fri 30 Aug 2013 03:56:32 PM JST
# for debug

* Fri 30 Aug 2013 03:56:32 PM JST
# for debug
import cgitb

* Fri 30 Aug 2013 03:56:32 PM JST
# for debug
import cgitb

* Fri 30 Aug 2013 03:56:32 PM JST
# for debug
import cgitb
cgitb.enable(format='text')

* Fri 30 Aug 2013 03:56:45 PM JST

* Fri 30 Aug 2013 03:56:45 PM JST

* Fri 30 Aug 2013 03:56:45 PM JST
import argparse

* Fri 30 Aug 2013 04:02:22 PM JST
if not os.geteuid() == 0:
    sys.exit('Script must be run as root.')

* Fri 30 Aug 2013 04:13:50 PM JST

* Fri 30 Aug 2013 04:13:50 PM JST

* Fri 30 Aug 2013 04:13:50 PM JST
from pre import 

* Fri 30 Aug 2013 04:14:34 PM JST

* Fri 30 Aug 2013 04:14:34 PM JST

* Fri 30 Aug 2013 04:14:34 PM JST
ps = sbp.Popen(['/sbin/runlevel'], stdout=sbp.PIPE)

* Fri 30 Aug 2013 04:14:35 PM JST
ps = sbp.Popen(['/sbin/runlevel'], stdout=sbp.PIPE)

* Fri 30 Aug 2013 04:14:35 PM JST
ps = sbp.Popen(['/sbin/runlevel'], stdout=sbp.PIPE)
out, err = ps.communicate()

* Fri 30 Aug 2013 04:14:35 PM JST
ps = sbp.Popen(['/sbin/runlevel'], stdout=sbp.PIPE)
out, err = ps.communicate()

* Fri 30 Aug 2013 04:14:35 PM JST
ps = sbp.Popen(['/sbin/runlevel'], stdout=sbp.PIPE)
out, err = ps.communicate()
if 'N 4\n' != out and not opt.force:

* Fri 30 Aug 2013 04:14:35 PM JST
ps = sbp.Popen(['/sbin/runlevel'], stdout=sbp.PIPE)
out, err = ps.communicate()
if 'N 4\n' != out and not opt.force:

* Fri 30 Aug 2013 04:14:35 PM JST
ps = sbp.Popen(['/sbin/runlevel'], stdout=sbp.PIPE)
out, err = ps.communicate()
if 'N 4\n' != out and not opt.force:
    sys.exit('Errors: Could not run on this runnlevel.')

* Fri 30 Aug 2013 04:17:32 PM JST
True
* Fri 30 Aug 2013 04:17:32 PM JST
shell=True
* Fri 30 Aug 2013 04:17:46 PM JST
if _os.path.islink(latestfullpath):
* Fri 30 Aug 2013 04:17:57 PM JST
self._log.log(10, 'Link: {0}'.format(' '.join(cmdline)))
* Sat 31 Aug 2013 02:52:01 AM JST
check process name exists
* Sat 31 Aug 2013 02:52:38 AM JST
## check process name exists
#
def psexists(name):
    """Check process name exists

    @Arguments:
    - `name`:

    @Return:
    """
    for pid in psutil.get_process_list():
        if name == psutil.Process(pid).name:
            return True
    return False



* Sat 31 Aug 2013 02:53:48 AM JST
## check process name exists
#
def psexists(name):
    """Check process name exists

    @Arguments:
    - `name`:

    @Return:
    """
    for pid in psutil.get_process_list():
        if name == psutil.Process(pid).name:
            return True
    return False



## rss
#
if not psexists('Sleipnir.exe'):
    os.system('/usr/local/bin/s')

* Sat 31 Aug 2013 02:58:28 AM JST

* Sat 31 Aug 2013 02:58:28 AM JST

* Sat 31 Aug 2013 02:58:28 AM JST
        print(pid.name)

* Sat 31 Aug 2013 02:58:29 AM JST

* Sat 31 Aug 2013 02:58:29 AM JST

* Sat 31 Aug 2013 02:58:29 AM JST
        # print(type(pid))

* Sat 31 Aug 2013 02:59:39 AM JST
print('')
* Sat 31 Aug 2013 02:59:55 AM JST

* Sat 31 Aug 2013 02:59:55 AM JST

* Sat 31 Aug 2013 02:59:55 AM JST
    print('DEBUG-1-2013-08-31-025351.junk.py')

* Sat 31 Aug 2013 02:59:56 AM JST

* Sat 31 Aug 2013 02:59:56 AM JST

* Sat 31 Aug 2013 02:59:56 AM JST
else:

* Sat 31 Aug 2013 02:59:56 AM JST
else:

* Sat 31 Aug 2013 02:59:56 AM JST
else:
    print('DEBUG-2-2013-08-31-025351.junk.py')

* Sat 31 Aug 2013 03:00:38 AM JST
## check process name exists
#
def psexists(name):
    """Check process name exists

    @Arguments:
    - `name`:

    @Return:
    """
    for pid in psutil.get_process_list():
        if name == pid.name:
            return True
    return False

* Sat 31 Aug 2013 03:03:47 AM JST
True
* Sat 31 Aug 2013 03:04:00 AM JST
False
* Sat 31 Aug 2013 04:27:12 AM JST
Xpresser
* Sat 31 Aug 2013 04:27:14 AM JST
import 
* Sat 31 Aug 2013 04:39:30 AM JST
deb http://ppa.launchpad.net/xpresser-team/ppa/ubuntu oneiric main 
deb-src http://ppa.launchpad.net/xpresser-team/ppa/ubuntu oneiric main 
* Sat 31 Aug 2013 04:45:55 AM JST
ImportError: No module named scipy.ndimage
* Sat 31 Aug 2013 05:06:21 AM JST

* Sat 31 Aug 2013 05:06:21 AM JST

* Sat 31 Aug 2013 05:06:21 AM JST
## xpresser python

* Sat 31 Aug 2013 05:06:21 AM JST
## xpresser python

* Sat 31 Aug 2013 05:06:22 AM JST
## xpresser python
deb http://ppa.launchpad.net/xpresser-team/ppa/ubuntu oneiric main

* Sat 31 Aug 2013 05:06:22 AM JST
## xpresser python
deb http://ppa.launchpad.net/xpresser-team/ppa/ubuntu oneiric main

* Sat 31 Aug 2013 05:06:22 AM JST
## xpresser python
deb http://ppa.launchpad.net/xpresser-team/ppa/ubuntu oneiric main
deb-src http://ppa.launchpad.net/xpresser-team/ppa/ubuntu oneiric main

* Sat 31 Aug 2013 11:47:42 AM JST
from googlechrome import ChromeBMParse
* Sat 31 Aug 2013 11:48:04 AM JST
g = ChromeBMParse()
tenkis = g.get_urls('【天気】'.decode('UTF-8'))
openchrome('"' + '" "'.join(tenkis[::-1]) + '"')
* Sat 31 Aug 2013 12:15:57 PM JST
'~/.config/google-chrome/Default/Bookmarks'
* Sat 31 Aug 2013 12:23:53 PM JST
    BOOKMARK_BASE_PATH = '~/.config/google-chrome/Default/Bookmarks'
    BOOKMARK_PATH = _os.path.expanduser(BOOKMARK_BASE_PATH)

* Sat 31 Aug 2013 12:29:05 PM JST
Japan News
* Sat 31 Aug 2013 12:39:28 PM JST

* Sat 31 Aug 2013 10:12:16 PM JST
python_path="/usr/bin/python"
mirror="/root/.pylib/mirror.py"
pull_opt="--pull-only"

[ -x $python_path ] || exit 0
[ -x $mirror ] || exit 0

$python_path $mirror $pull_opt

exit 0

* Sat 31 Aug 2013 10:12:24 PM JST
py
* Sat 31 Aug 2013 10:12:24 PM JST
mirror.py
* Sat 31 Aug 2013 10:12:37 PM JST
mirror
* Sat 31 Aug 2013 10:12:42 PM JST

* Sat 31 Aug 2013 10:12:43 PM JST

* Sat 31 Aug 2013 10:12:43 PM JST
pull_opt="--pull-only"

* Sat 31 Aug 2013 10:12:44 PM JST
opt
* Sat 31 Aug 2013 10:12:48 PM JST
mirror
* Sat 31 Aug 2013 10:12:55 PM JST
mirror
* Sat 31 Aug 2013 10:14:57 PM JST
    
* Sat 31 Aug 2013 10:15:16 PM JST
check_call
* Sat 31 Aug 2013 10:15:17 PM JST
sbp.check_call
* Sat 31 Aug 2013 10:15:48 PM JST

* Sat 31 Aug 2013 10:15:48 PM JST

* Sat 31 Aug 2013 10:15:48 PM JST
    # vmware start
