
* Fri 02 Jan 2015 04:30:15 AM JST
from userint import UserInt
* Fri 02 Jan 2015 04:30:23 AM JST
class Keycode(UserInt):
    """Class Keycode
    """
    # Operations
    def set(self, value):
        """function set

        value: int

        returns None
        """
        integer = int(value)
        if integer < 8 or 255 < integer:
            # TODO: (Atami) [2014/12/29]
            raise StandardError('range error {}'.format(integer))
        super(Keycode, self).set(value)

* Fri 02 Jan 2015 04:31:08 AM JST
NamedButtonIndex
* Fri 02 Jan 2015 04:32:06 AM JST
integer
* Fri 02 Jan 2015 04:32:12 AM JST
Key
* Fri 02 Jan 2015 04:32:17 AM JST
Key
* Fri 02 Jan 2015 04:32:21 AM JST
Key
* Fri 02 Jan 2015 04:32:34 AM JST
1 in 
* Fri 02 Jan 2015 04:33:24 AM JST
NamedButtonIndex
* Fri 02 Jan 2015 04:34:43 AM JST
class XPieces:
    """Class XPieces
    """
    # Attributes:
    modifiers = None  # (Modifiers) 
    
    # Operations
    def press(self, conn, window, point):
        """function press
        
        conn: Connection
        window: Window
        point: Point
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def release(self, conn, window, point):
        """function release
        
        conn: Connection
        window: Window
        point: Point
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_modifiers(self, mod):
        """function set_modifiers
        
        mod: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_modifiers(self, mod):
        """function set_modifiers
        
        mod: Modifiers
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_modifiers(self):
        """function get_modifiers
        
        returns Modifiers
        """
        return None # should raise NotImplementedError()
    
    def __and__(self, other):
        """function __and__
        
        other: int
        
        returns XPieces
        """
        return None # should raise NotImplementedError()
    
    def __iand__(self, other):
        """function __iand__
        
        other: int
        
        returns XPieces
        """
        return None # should raise NotImplementedError()
    
    def __xor__(self, other):
        """function __xor__
        
        other: int
        
        returns XPieces
        """
        return None # should raise NotImplementedError()
    
    def __ixor__(self, other):
        """function __ixor__
        
        other: int
        
        returns XPieces
        """
        return None # should raise NotImplementedError()
    
    def __or__(self, other):
        """function __or__
        
        other: int
        
        returns XPieces
        """
        return None # should raise NotImplementedError()
    
    def __ior__(self, other):
        """function __ior__
        
        other: int
        
        returns XPieces
        """
        return None # should raise NotImplementedError()
    
    def __lshift__(self, other):
        """function __lshift__
        
        other: int
        
        returns XPieces
        """
        return None # should raise NotImplementedError()
    
    def __ilshift__(self, other):
        """function __ilshift__
        
        other: 
        
        returns XPieces
        """
        return None # should raise NotImplementedError()
    
    def __rshift__(self, other):
        """function __rshift__
        
        other: 
        
        returns XPieces
        """
        return None # should raise NotImplementedError()
    
    def __irshift__(self, other):
        """function __irshift__
        
        other: 
        
        returns XPieces
        """
        return None # should raise NotImplementedError()
    


* Fri 02 Jan 2015 04:37:11 AM JST

* Fri 02 Jan 2015 04:37:11 AM JST

* Fri 02 Jan 2015 04:37:11 AM JST
        return None # should raise NotImplementedError()

* Fri 02 Jan 2015 04:37:13 AM JST

* Fri 02 Jan 2015 04:37:13 AM JST

* Fri 02 Jan 2015 04:37:13 AM JST
        return None # should raise NotImplementedError()

* Fri 02 Jan 2015 04:37:23 AM JST
return None # should raise NotImplementedError()
* Fri 02 Jan 2015 04:38:01 AM JST
import
* Fri 02 Jan 2015 04:38:04 AM JST
from 
* Fri 02 Jan 2015 04:38:39 AM JST
Modifiers
* Fri 02 Jan 2015 04:40:35 AM JST
Modifiers
* Fri 02 Jan 2015 04:40:36 AM JST
as Modifiers
* Fri 02 Jan 2015 04:40:48 AM JST
import sendkeys2.xsendkey.modifiers.Modifiers
* Fri 02 Jan 2015 04:41:01 AM JST
modifiers
* Fri 02 Jan 2015 04:41:07 AM JST
import sendkeys2.xsendkey.modifiers.Modifiers
* Fri 02 Jan 2015 04:41:34 AM JST
Modifiers
* Fri 02 Jan 2015 04:43:45 AM JST
modifiers
* Fri 02 Jan 2015 04:44:18 AM JST
keyname
* Fri 02 Jan 2015 04:44:25 AM JST
import 
* Fri 02 Jan 2015 04:45:06 AM JST
import sendkeys2.xsendkey.modifiers.Modifiers
* Fri 02 Jan 2015 04:45:09 AM JST
Modifiers
* Fri 02 Jan 2015 04:45:14 AM JST
import
* Fri 02 Jan 2015 04:45:21 AM JST
Modifiers
* Fri 02 Jan 2015 04:45:36 AM JST
Modifiers
* Fri 02 Jan 2015 04:45:38 AM JST
import sendkeys2.xsendkey.modifiers
* Fri 02 Jan 2015 04:45:38 AM JST
import sendkeys2.xsendkey.modifiers
* Fri 02 Jan 2015 04:45:49 AM JST
Modifiers
* Fri 02 Jan 2015 04:46:47 AM JST
None # should raise NotImplementedError()
* Fri 02 Jan 2015 04:47:28 AM JST
None # should raise NotImplementedError()
* Fri 02 Jan 2015 04:48:00 AM JST
None # should raise NotImplementedError()
* Fri 02 Jan 2015 04:49:48 AM JST
import sendkeys2.xsendkey.modifiers.Modifiers
* Fri 02 Jan 2015 04:49:57 AM JST
Modifiers
* Fri 02 Jan 2015 04:51:34 AM JST
modif
* Fri 02 Jan 2015 04:51:40 AM JST
modif
* Fri 02 Jan 2015 04:53:05 AM JST
None
* Fri 02 Jan 2015 04:53:21 AM JST
code, 
* Fri 02 Jan 2015 04:54:46 AM JST
    # def __and__(self, other):
    #     """function __and__

    #     other: int

    #     returns XPieces
    #     """
    #     return self.__class__(self._modifiers & other)

    # def __iand__(self, other):
    #     """function __iand__

    #     other: int

    #     returns XPieces
    #     """
    #     self._modifiers &= other
    #     return self

    # def __xor__(self, other):
    #     """function __xor__

    #     other: int

    #     returns XPieces
    #     """
    #     return None # should raise NotImplementedError()

    # def __ixor__(self, other):
    #     """function __ixor__

    #     other: int

    #     returns XPieces
    #     """
    #     return None # should raise NotImplementedError()

    # def __or__(self, other):
    #     """function __or__

    #     other: int

    #     returns XPieces
    #     """
    #     return None # should raise NotImplementedError()

    # def __ior__(self, other):
    #     """function __ior__

    #     other: int

    #     returns XPieces
    #     """
    #     return None # should raise NotImplementedError()

    # def __lshift__(self, other):
    #     """function __lshift__

    #     other: int

    #     returns XPieces
    #     """
    #     return None # should raise NotImplementedError()

    # def __ilshift__(self, other):
    #     """function __ilshift__

    #     other:

    #     returns XPieces
    #     """
    #     return None # should raise NotImplementedError()

    # def __rshift__(self, other):
    #     """function __rshift__

    #     other:

    #     returns XPieces
    #     """
    #     return None # should raise NotImplementedError()

    # def __irshift__(self, other):
    #     """function __irshift__

    #     other:

    #     returns XPieces
    #     """
    #     return None # should raise NotImplementedError()

* Fri 02 Jan 2015 05:00:07 AM JST
modifier
* Fri 02 Jan 2015 05:00:07 AM JST
self.modifier
* Fri 02 Jan 2015 05:01:50 AM JST
__
* Fri 02 Jan 2015 05:01:50 AM JST
class.__
* Fri 02 Jan 2015 05:02:23 AM JST
_code
* Fri 02 Jan 2015 05:02:43 AM JST

* Fri 02 Jan 2015 05:02:43 AM JST

* Fri 02 Jan 2015 05:02:43 AM JST
        return self.__class__(self._code, self._modifiers & other)

* Fri 02 Jan 2015 05:03:01 AM JST
__class__
* Fri 02 Jan 2015 05:03:01 AM JST
self.__class__
* Fri 02 Jan 2015 05:03:40 AM JST
self._code, self._modifiers & other
* Fri 02 Jan 2015 05:03:51 AM JST
_code, 
* Fri 02 Jan 2015 05:03:51 AM JST
self._code, 
* Fri 02 Jan 2015 11:03:48 AM JST
other
* Fri 02 Jan 2015 01:05:08 PM JST
        if isinstance(other, (modif.Modifiers, int)):
            return self.__class__(self._code, self._modifiers & int(other))

* Fri 02 Jan 2015 01:07:07 PM JST
        if isinstance(other, (modif.Modifiers, int)):
            return self.__class__(self._code, self._modifiers & int(other))

* Fri 02 Jan 2015 01:07:19 PM JST
code
* Fri 02 Jan 2015 01:08:44 PM JST
self._modifiers &= other
* Fri 02 Jan 2015 01:10:01 PM JST
_code 
* Fri 02 Jan 2015 01:10:02 PM JST
self._code 
* Fri 02 Jan 2015 01:14:54 PM JST

* Fri 02 Jan 2015 01:14:54 PM JST

* Fri 02 Jan 2015 01:14:55 PM JST
        isinstance(object, (class, hello, ))

* Fri 02 Jan 2015 01:19:21 PM JST
            return self.__class__(self._code & other.get_code(),
                                  self._modifiers & self.get_modifiers())

* Fri 02 Jan 2015 01:19:53 PM JST
return self.__class__(self._code, self._modifiers & other)
* Fri 02 Jan 2015 01:20:14 PM JST
        if isinstance(other, (keycode.Keycode, )):
            self.set_code(other)
        elif isinstance(other, (self.__class__, )):
            self.set_code(other.get_code())
            self.set_modifiers(other.get_modifiers())
        else:
            self.set_modifiers(other)
        return self

* Fri 02 Jan 2015 01:29:40 PM JST
        if isinstance(other, (modif.Modifiers, int)):
            return self.__class__(self._code, self._modifiers ^ int(other))
        if isinstance(other, (keycode.Keycode, )):
            return self.__class__(self._code ^ other, self._modifiers)
        if isinstance(other, (self.__class__, )):
            return self.__class__(self._code ^ other.get_code(),
                                  self._modifiers ^ self.get_modifiers())
        return self.__class__(self._code, self._modifiers ^ other)

* Fri 02 Jan 2015 01:29:56 PM JST
 | 
* Fri 02 Jan 2015 01:30:44 PM JST
        if isinstance(other, (keycode.Keycode, )):
            self.set_code(self._code ^ other.get_code())
        elif isinstance(other, (self.__class__, )):
            self.set_code(self._code ^ other.get_code())
            self.set_modifiers(self._modifiers ^ other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers ^ other)
        return self

* Fri 02 Jan 2015 01:31:08 PM JST
 | 
* Fri 02 Jan 2015 01:33:20 PM JST
        if isinstance(other, (modif.Modifiers, int)):
            return self.__class__(self._code, self._modifiers | int(other))
        if isinstance(other, (keycode.Keycode, )):
            return self.__class__(self._code | other, self._modifiers)
        if isinstance(other, (self.__class__, )):
            return self.__class__(self._code | other.get_code(),
                                  self._modifiers | self.get_modifiers())
        return self.__class__(self._code, self._modifiers | other)

* Fri 02 Jan 2015 01:33:44 PM JST
        if isinstance(other, (keycode.Keycode, )):
            self.set_code(self._code | other.get_code())
        elif isinstance(other, (self.__class__, )):
            self.set_code(self._code | other.get_code())
            self.set_modifiers(self._modifiers | other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers | other)
        return self


* Fri 02 Jan 2015 01:34:14 PM JST
        if isinstance(other, (modif.Modifiers, int)):
            return self.__class__(self._code, self._modifiers << int(other))
        if isinstance(other, (keycode.Keycode, )):
            return self.__class__(self._code << other, self._modifiers)
        if isinstance(other, (self.__class__, )):
            return self.__class__(self._code << other.get_code(),
                                  self._modifiers << self.get_modifiers())
        return self.__class__(self._code, self._modifiers | other)


* Fri 02 Jan 2015 01:34:42 PM JST
        if isinstance(other, (keycode.Keycode, )):
            self.set_code(self._code << other.get_code())
        elif isinstance(other, (self.__class__, )):
            self.set_code(self._code << other.get_code())
            self.set_modifiers(self._modifiers << other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers << other)
        return self

* Fri 02 Jan 2015 01:36:10 PM JST
conn, 
* Fri 02 Jan 2015 01:36:24 PM JST
, display=':0.0'
* Fri 02 Jan 2015 01:36:33 PM JST
conn, 
* Fri 02 Jan 2015 01:38:15 PM JST
con =
* Fri 02 Jan 2015 01:39:40 PM JST
SendKey
* Fri 02 Jan 2015 01:40:25 PM JST
self.
* Fri 02 Jan 2015 01:44:58 PM JST
        conn = xcb2.connect(display)
        conn.core.SendEvent.KeyPress(
            False, window, int(self._code), 0, 0, conn.root, window,
            0, 0, 0, point.get_x(), point.get_y(), int(self._modifiers), 1)

* Fri 02 Jan 2015 01:48:29 PM JST
self
* Fri 02 Jan 2015 01:50:39 PM JST
(self._code == other.get_code() and
                    self._modifiers == other.get_modifiers())
* Fri 02 Jan 2015 01:51:17 PM JST
                    
* Fri 02 Jan 2015 01:53:47 PM JST
self.
* Fri 02 Jan 2015 01:59:34 PM JST
    def __init__(self, code, modifiers=0):
        r"""

        @Arguments:
        - `code`:
        - `modifiers`:
        """
        super(XKey, self).__init__(modifiers)
        self._code = keycode.Keycode(code)


* Fri 02 Jan 2015 02:01:35 PM JST

* Fri 02 Jan 2015 02:01:36 PM JST
keycode
* Fri 02 Jan 2015 02:01:43 PM JST
keycode
* Fri 02 Jan 2015 02:02:07 PM JST
XKey
* Fri 02 Jan 2015 02:02:12 PM JST
Keycode
* Fri 02 Jan 2015 02:02:13 PM JST
keycode.Keycode
* Fri 02 Jan 2015 02:04:58 PM JST
    def press(self, conn, window, point):
        """function press
        
        conn: Connection
        window: Window
        point: Point
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def release(self, conn, window, point):
        """function release
        
        conn: Connection
        window: Window
        point: Point
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_code(self, code):
        """function set_code
        
        code: Buttoncode
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_code(self, code):
        """function set_code
        
        code: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_code(self):
        """function get_code
        
        returns Buttoncode
        """
        return None # should raise NotImplementedError()
    
    def __eq__(self, other):
        """function __eq__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __ne__(self, other):
        """function __ne__
        
        other: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()

* Fri 02 Jan 2015 02:05:14 PM JST
conn, 
* Fri 02 Jan 2015 02:05:26 PM JST
, display=':0.0'
* Fri 02 Jan 2015 02:05:37 PM JST
conn, 
* Fri 02 Jan 2015 02:05:56 PM JST
return None # should raise NotImplementedError()
* Fri 02 Jan 2015 02:06:17 PM JST
None # should raise NotImplementedError()
* Fri 02 Jan 2015 02:07:07 PM JST
    def __eq__(self, other):
        if isinstance(other, (self.__class__, )):
            return (self._code == other.get_code() and
                    self._modifiers == other.get_modifiers())
        elif isinstance(other, (tuple, list)):
            return (self._code == other[0] and self._modifiers == other[1])
        return False

    def __ne__(self, other):
        return not self == other

    def __repr__(self):
        return '{0.__class__.__name__}(code={1}, modifiers={2})'.format(
            self, int(self._code), int(self._modifiers))

    def __str__(self):
        return '({}, {})'.format(int(self._code), int(self._modifiers))

    def __and__(self, other):
        if isinstance(other, (modif.Modifiers, int)):
            return self.__class__(self._code, self._modifiers & int(other))
        if isinstance(other, (keycode.Keycode, )):
            return self.__class__(self._code & other, self._modifiers)
        if isinstance(other, (self.__class__, )):
            return self.__class__(self._code & other.get_code(),
                                  self._modifiers & self.get_modifiers())
        return self.__class__(self._code, self._modifiers & other)

    def __iand__(self, other):
        if isinstance(other, (keycode.Keycode, )):
            self.set_code(self._code & other)
        elif isinstance(other, (self.__class__, )):
            self.set_code(self._code & other.get_code())
            self.set_modifiers(self._modifiers & other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers & other)
        return self

    def __xor__(self, other):
        if isinstance(other, (modif.Modifiers, int)):
            return self.__class__(self._code, self._modifiers ^ int(other))
        if isinstance(other, (keycode.Keycode, )):
            return self.__class__(self._code ^ other, self._modifiers)
        if isinstance(other, (self.__class__, )):
            return self.__class__(self._code ^ other.get_code(),
                                  self._modifiers ^ self.get_modifiers())
        return self.__class__(self._code, self._modifiers ^ other)

    def __ixor__(self, other):
        if isinstance(other, (keycode.Keycode, )):
            self.set_code(self._code ^ other.get_code())
        elif isinstance(other, (self.__class__, )):
            self.set_code(self._code ^ other.get_code())
            self.set_modifiers(self._modifiers ^ other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers ^ other)
        return self

    def __or__(self, other):
        if isinstance(other, (modif.Modifiers, int)):
            return self.__class__(self._code, self._modifiers | int(other))
        if isinstance(other, (keycode.Keycode, )):
            return self.__class__(self._code | other, self._modifiers)
        if isinstance(other, (self.__class__, )):
            return self.__class__(self._code | other.get_code(),
                                  self._modifiers | self.get_modifiers())
        return self.__class__(self._code, self._modifiers | other)

    def __ior__(self, other):
        if isinstance(other, (keycode.Keycode, )):
            self.set_code(self._code | other.get_code())
        elif isinstance(other, (self.__class__, )):
            self.set_code(self._code | other.get_code())
            self.set_modifiers(self._modifiers | other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers | other)
        return self

    def __lshift__(self, other):
        if isinstance(other, (modif.Modifiers, int)):
            return self.__class__(self._code, self._modifiers << int(other))
        if isinstance(other, (keycode.Keycode, )):
            return self.__class__(self._code << other, self._modifiers)
        if isinstance(other, (self.__class__, )):
            return self.__class__(self._code << other.get_code(),
                                  self._modifiers << self.get_modifiers())
        return self.__class__(self._code, self._modifiers << other)

    def __ilshift__(self, other):
        if isinstance(other, (keycode.Keycode, )):
            self.set_code(self._code << other.get_code())
        elif isinstance(other, (self.__class__, )):
            self.set_code(self._code << other.get_code())
            self.set_modifiers(self._modifiers << other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers << other)
        return self

    def __rshift__(self, other):
        if isinstance(other, (modif.Modifiers, int)):
            return self.__class__(self._code, self._modifiers >> int(other))
        if isinstance(other, (keycode.Keycode, )):
            return self.__class__(self._code >> other, self._modifiers)
        if isinstance(other, (self.__class__, )):
            return self.__class__(self._code >> other.get_code(),
                                  self._modifiers >> self.get_modifiers())
        return self.__class__(self._code, self._modifiers >> other)

    def __irshift__(self, other):
        if isinstance(other, (keycode.Keycode, )):
            self.set_code(self._code >> other.get_code())
        elif isinstance(other, (self.__class__, )):
            self.set_code(self._code >> other.get_code())
            self.set_modifiers(self._modifiers >> other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers >> other)
        return self

* Fri 02 Jan 2015 02:11:55 PM JST
        conn = xcb2.connect(display)
        conn.core.SendEvent.KeyPress(
            False, window, int(self._code), 0, 0, conn.root, window,
            0, 0, 0, point.get_x(), point.get_y(), int(self._modifiers), 1)

* Fri 02 Jan 2015 02:12:07 PM JST
KeyPress
* Fri 02 Jan 2015 02:12:17 PM JST
        conn = xcb2.connect(display)
        conn.core.SendEvent.ButtonPress(
            False, window, int(self._code), 0, 0, conn.root, window,
            0, 0, 0, point.get_x(), point.get_y(), int(self._modifiers), 1)

* Fri 02 Jan 2015 02:12:34 PM JST
press
* Fri 02 Jan 2015 02:12:34 PM JST
k.press
* Fri 02 Jan 2015 02:25:02 PM JST
class InputDestination:
    """Class InputDestination
    """
    # Attributes:
    window = None  # (Window) 
    eventpoint = None  # (Point) 
    
    # Operations
    def get_window(self):
        """function get_window
        
        returns Window
        """
        return None # should raise NotImplementedError()
    
    def set_window(self, window):
        """function set_window
        
        window: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_point(self):
        """function get_point
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def set_point(self, point):
        """function set_point
        
        point: Point
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_point(self, point):
        """function set_point
        
        point: tuple
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def isin(self):
        """function isin
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def set_x(self, newx):
        """function set_x
        
        newx: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_y(self, newy):
        """function set_y
        
        newy: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_x(self):
        """function get_x
        
        returns XCoordinate
        """
        return None # should raise NotImplementedError()
    
    def get_y(self):
        """function get_y
        
        returns YCoordinate
        """
        return None # should raise NotImplementedError()
    


* Fri 02 Jan 2015 05:25:30 PM JST
point
* Fri 02 Jan 2015 05:26:17 PM JST
None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:26:22 PM JST
return None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:26:34 PM JST
None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:26:38 PM JST
return None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:26:57 PM JST
return None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:27:06 PM JST
return None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:27:16 PM JST
None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:27:24 PM JST
None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:32:27 PM JST
class XKeyInput:
    """Class XKeyInput
    """
    # Attributes:
    connection = None  # (Connection) 
    key = None  # (XPieces) 
    dest = None  # (InputDestination) 
    
    # Operations
    def set_modifiers(self, modifier):
        """function set_modifiers
        
        modifier: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def press(self):
        """function press
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def release(self):
        """function release
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_window(self):
        """function get_window
        
        returns Window
        """
        return None # should raise NotImplementedError()
    
    def set_window(self, window):
        """function set_window
        
        window: Window
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_point(self):
        """function get_point
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def set_point(self, point):
        """function set_point
        
        point: Point,tuple
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_code(self, code):
        """function set_code
        
        code: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_code(self):
        """function get_code
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def set_modifiers(self, mod):
        """function set_modifiers
        
        mod: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_modifiers(self):
        """function get_modifiers
        
        returns Modifiers
        """
        return None # should raise NotImplementedError()
    
    def isin_point(self):
        """function isin_point
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def flush(self):
        """function flush
        
        returns None
        """
        return None # should raise NotImplementedError()
    


* Fri 02 Jan 2015 05:33:19 PM JST
display
* Fri 02 Jan 2015 05:35:32 PM JST

* Fri 02 Jan 2015 05:35:32 PM JST

* Fri 02 Jan 2015 05:35:32 PM JST
        self._0) = 0)

* Fri 02 Jan 2015 05:36:43 PM JST

* Fri 02 Jan 2015 05:36:43 PM JST

* Fri 02 Jan 2015 05:36:43 PM JST
        self._point = point

* Fri 02 Jan 2015 05:36:44 PM JST

* Fri 02 Jan 2015 05:36:44 PM JST

* Fri 02 Jan 2015 05:36:44 PM JST
        self._window = window

* Fri 02 Jan 2015 05:37:04 PM JST
window, 
* Fri 02 Jan 2015 05:37:35 PM JST
None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:37:36 PM JST
self
* Fri 02 Jan 2015 05:37:37 PM JST
return self
* Fri 02 Jan 2015 05:38:01 PM JST
self
* Fri 02 Jan 2015 05:38:59 PM JST

* Fri 02 Jan 2015 05:38:59 PM JST

* Fri 02 Jan 2015 05:38:59 PM JST
        conn.core.SendEvent.

* Fri 02 Jan 2015 05:39:00 PM JST

* Fri 02 Jan 2015 05:39:00 PM JST

* Fri 02 Jan 2015 05:39:00 PM JST
        conn = xcb2.connect(self._display)

* Fri 02 Jan 2015 05:40:06 PM JST
return None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:41:43 PM JST
        self._pieces.press(
            self._dest.get_window(), self._dest.get_point(), self._display)

* Fri 02 Jan 2015 05:42:04 PM JST
_dest.
* Fri 02 Jan 2015 05:42:08 PM JST
None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:42:19 PM JST
            
* Fri 02 Jan 2015 05:42:23 PM JST
_dest
* Fri 02 Jan 2015 05:42:28 PM JST
return None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:42:40 PM JST
None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:42:43 PM JST
_point.
* Fri 02 Jan 2015 05:42:57 PM JST
_dest.
* Fri 02 Jan 2015 05:42:59 PM JST
            
* Fri 02 Jan 2015 05:43:03 PM JST
_dest.
* Fri 02 Jan 2015 05:43:09 PM JST
return None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:43:14 PM JST
get
* Fri 02 Jan 2015 05:43:21 PM JST
return None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:43:34 PM JST
None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:43:43 PM JST
return None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:43:53 PM JST
None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:44:08 PM JST
None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:44:29 PM JST
return None # should raise NotImplementedError()
* Fri 02 Jan 2015 05:44:32 PM JST
_
* Fri 02 Jan 2015 05:44:32 PM JST
self._
* Fri 02 Jan 2015 05:44:34 PM JST
conn = 
* Fri 02 Jan 2015 05:47:08 PM JST

* Fri 02 Jan 2015 05:47:09 PM JST
inputdest
* Fri 02 Jan 2015 05:47:09 PM JST
as inputdest
* Fri 02 Jan 2015 05:47:10 PM JST
inputdest as inputdest
* Fri 02 Jan 2015 05:47:19 PM JST
pieces
* Fri 02 Jan 2015 05:48:40 PM JST
piece
* Fri 02 Jan 2015 05:49:52 PM JST
import
* Fri 02 Jan 2015 05:50:06 PM JST
XKeyInput()
* Fri 02 Jan 2015 05:50:08 PM JST
XKeyInput
* Fri 02 Jan 2015 05:50:12 PM JST
xkeyinput
* Fri 02 Jan 2015 05:52:43 PM JST
point
* Fri 02 Jan 2015 05:52:54 PM JST

* Fri 02 Jan 2015 05:52:54 PM JST

* Fri 02 Jan 2015 05:52:56 PM JST

* Fri 02 Jan 2015 05:52:56 PM JST

* Fri 02 Jan 2015 05:52:56 PM JST
        print(point)

* Fri 02 Jan 2015 05:57:46 PM JST

* Fri 02 Jan 2015 05:57:46 PM JST

* Fri 02 Jan 2015 05:57:46 PM JST
        # TODO: (Atami) [2015/01/02]

* Fri 02 Jan 2015 05:57:46 PM JST
        # TODO: (Atami) [2015/01/02]

* Fri 02 Jan 2015 05:57:46 PM JST
        # TODO: (Atami) [2015/01/02]
        # TODO: (Atami) [2015/01/02]

* Fri 02 Jan 2015 05:57:52 PM JST

* Fri 02 Jan 2015 05:57:53 PM JST

* Fri 02 Jan 2015 05:57:53 PM JST
        # TODO: (Atami) [2015/01/02]

* Fri 02 Jan 2015 05:58:01 PM JST

* Fri 02 Jan 2015 05:58:01 PM JST

* Fri 02 Jan 2015 05:58:01 PM JST
        # TODO: (Atami) [2015/01/02]

* Fri 02 Jan 2015 05:58:03 PM JST
FIXME
* Fri 02 Jan 2015 05:58:14 PM JST
KLUG
* Fri 02 Jan 2015 05:58:16 PM JST
KLUG
* Fri 02 Jan 2015 05:58:16 PM JST
KLUG        # : (Atami) [2015/01/02]

* Fri 02 Jan 2015 05:58:31 PM JST
KLUDGE
* Fri 02 Jan 2015 06:05:19 PM JST
self.
* Fri 02 Jan 2015 06:06:52 PM JST

* Fri 02 Jan 2015 06:06:52 PM JST

* Fri 02 Jan 2015 06:06:52 PM JST
    x = property()

* Fri 02 Jan 2015 06:08:24 PM JST
    window = property(get_window, set_window)
    point = property(get_point, set_point)
    code = property(get_code, set_code)
    modifier = property(get_modifiers, set_modifiers)


* Fri 02 Jan 2015 06:09:35 PM JST

* Fri 02 Jan 2015 06:09:36 PM JST

* Fri 02 Jan 2015 06:09:36 PM JST
    x = property(code.get_x, code.set_x)

* Sat 03 Jan 2015 01:26:23 AM JST
set(Point(1, 1))
* Sat 03 Jan 2015 01:26:46 AM JST
set(x=1, y=1)
* Sat 03 Jan 2015 01:27:02 AM JST
set(1, y=1)
* Sat 03 Jan 2015 01:27:17 AM JST
set(1, y=1)
* Sat 03 Jan 2015 01:27:19 AM JST
1, 
* Sat 03 Jan 2015 01:27:31 AM JST
set(1)
* Sat 03 Jan 2015 01:27:54 AM JST
set(1, 1)
* Sat 03 Jan 2015 01:32:46 AM JST
from peak.rules import dispatch
* Sat 03 Jan 2015 01:33:48 AM JST

* Sat 03 Jan 2015 01:33:48 AM JST

* Sat 03 Jan 2015 01:33:48 AM JST
        set(x=1, y=1)

* Sat 03 Jan 2015 01:33:49 AM JST
        set(x=1, y=1)

* Sat 03 Jan 2015 01:33:49 AM JST
        set(x=1, y=1)
        set(1, y=1)

* Sat 03 Jan 2015 01:33:55 AM JST
-> Point(x=1, y=1)
* Sat 03 Jan 2015 01:34:00 AM JST

* Sat 03 Jan 2015 01:34:00 AM JST

* Sat 03 Jan 2015 01:34:00 AM JST
        set(point=Point(1, 1))

* Sat 03 Jan 2015 01:39:44 AM JST
set_
* Sat 03 Jan 2015 01:42:30 AM JST
0
* Sat 03 Jan 2015 01:42:31 AM JST
y=0
* Sat 03 Jan 2015 01:42:31 AM JST
0, y=0
* Sat 03 Jan 2015 01:42:32 AM JST
x=0, y=0
* Sat 03 Jan 2015 01:42:36 AM JST
y)
* Sat 03 Jan 2015 01:42:36 AM JST
x, y)
* Sat 03 Jan 2015 01:45:43 AM JST
point
* Sat 03 Jan 2015 01:45:50 AM JST
point
* Sat 03 Jan 2015 01:47:32 AM JST
x=
* Sat 03 Jan 2015 01:47:33 AM JST
y=
* Sat 03 Jan 2015 02:15:09 AM JST
set
* Sat 03 Jan 2015 02:16:02 AM JST

* Sat 03 Jan 2015 02:16:03 AM JST

* Sat 03 Jan 2015 02:16:03 AM JST
    tes = property(_point.get_x)

* Sat 03 Jan 2015 02:37:58 AM JST
from sendkeys2.xsendkey.xkeyinput import XKeyInput
from sendkeys2.xsendkey.pieces import *
k=XKeyInput(XKey(10), 0)

* Sat 03 Jan 2015 02:38:15 AM JST
from sendkeys2.xsendkey.xkeyinput import XKeyInput
from sendkeys2.xsendkey.pieces import *
k=XKeyInput(XKey(10), 0)

* Sat 03 Jan 2015 02:39:53 AM JST
_poin
* Sat 03 Jan 2015 02:42:20 AM JST
from sendkeys2.xsendkey.xkeyinput import XKeyInput
from sendkeys2.xsendkey.pieces import *
k=XKeyInput(XKey(10), 0)

* Sat 03 Jan 2015 02:44:30 AM JST
point
* Sat 03 Jan 2015 03:01:42 AM JST
abstrac
* Sat 03 Jan 2015 03:01:43 AM JST
import abstrac
* Sat 03 Jan 2015 03:01:45 AM JST
from
* Sat 03 Jan 2015 03:06:20 AM JST
    # Attributes:
    keyinput = None  # (XKeyInput) 
    behave = None  # (int) 
    
    # Operations
    def send(self):
        """function send
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_behave(self, behave):
        """function set_behave
        
        behave: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_behave(self):
        """function get_behave
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def get_point(self):
        """function get_point
        
        returns Point
        """
        return None # should raise NotImplementedError()
    
    def set_point(self, point):
        """function set_point
        
        point: Point
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_point(self, point):
        """function set_point
        
        point: tuple
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_x(self, newx):
        """function set_x
        
        newx: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_y(self, newy):
        """function set_y
        
        newy: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_window(self, window):
        """function set_window
        
        window: Window
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_window(self):
        """function get_window
        
        returns Window
        """
        return None # should raise NotImplementedError()
    
    def set_code(self, code):
        """function set_code
        
        code: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_code(self):
        """function get_code
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_modifiers(self, mod):
        """function set_modifiers
        
        mod: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def get_modifiers(self):
        """function get_modifiers
        
        returns Modifiers
        """
        return None # should raise NotImplementedError()
    
    def flush(self):
        """function flush
        
        returns 
        """
        return None # should raise NotImplementedError()

* Sat 03 Jan 2015 03:27:46 AM JST
def
* Sat 03 Jan 2015 12:00:49 PM JST
isinstance
* Sat 03 Jan 2015 12:01:45 PM JST
return None # should raise NotImplementedError()
* Sat 03 Jan 2015 12:01:59 PM JST
None # should raise NotImplementedError()
* Sat 03 Jan 2015 12:02:09 PM JST
None # should raise NotImplementedError()
* Sat 03 Jan 2015 12:02:26 PM JST
return None # should raise NotImplementedError()
* Sat 03 Jan 2015 12:03:01 PM JST
return None # should raise NotImplementedError()
* Sat 03 Jan 2015 12:03:40 PM JST
set_point
* Sat 03 Jan 2015 12:03:50 PM JST
return None # should raise NotImplementedError()
* Sat 03 Jan 2015 12:04:04 PM JST
return None # should raise NotImplementedError()
* Sat 03 Jan 2015 12:04:19 PM JST
None # should raise NotImplementedError()
* Sat 03 Jan 2015 12:04:31 PM JST
return None # should raise NotImplementedError()
* Sat 03 Jan 2015 12:04:47 PM JST
None # should raise NotImplementedError()
* Sat 03 Jan 2015 12:04:57 PM JST
return None # should raise NotImplementedError()
* Sat 03 Jan 2015 12:05:09 PM JST
None # should raise NotImplementedError()
* Sat 03 Jan 2015 12:05:29 PM JST
return None # should raise NotImplementedError()
* Sat 03 Jan 2015 12:24:34 PM JST
KeyBehave.down & self._behave
* Sat 03 Jan 2015 12:26:51 PM JST

* Sat 03 Jan 2015 12:26:52 PM JST

* Sat 03 Jan 2015 12:26:52 PM JST
        return None # should raise NotImplementedError()

* Sat 03 Jan 2015 12:32:17 PM JST
xahk
* Sat 03 Jan 2015 12:33:30 PM JST
to_code()
* Sat 03 Jan 2015 12:38:47 PM JST
1]
* Sat 03 Jan 2015 12:39:20 PM JST
emacs')
* Sat 03 Jan 2015 12:39:21 PM JST
filter_wmclass(
* Sat 03 Jan 2015 12:41:49 PM JST
name
* Sat 03 Jan 2015 12:42:25 PM JST
title
* Sat 03 Jan 2015 12:42:29 PM JST
48234518
* Sat 03 Jan 2015 12:49:10 PM JST
pieces
* Sat 03 Jan 2015 12:49:40 PM JST
xkeyinput
* Sat 03 Jan 2015 12:50:15 PM JST
48234518
* Sat 03 Jan 2015 12:52:00 PM JST
False
* Sat 03 Jan 2015 12:52:13 PM JST
window
* Sat 03 Jan 2015 12:52:19 PM JST
conn.root
* Sat 03 Jan 2015 12:52:24 PM JST
window
* Sat 03 Jan 2015 12:52:35 PM JST
point.get_x()
* Sat 03 Jan 2015 12:52:40 PM JST
point.get_y()
* Sat 03 Jan 2015 12:52:52 PM JST
False
* Sat 03 Jan 2015 12:53:02 PM JST
0, int(window), int(self._code), 0, 0, int(conn.root), int(window),
            0, 0, 0, int(point.get_x()), int(point.get_y()),
            int(self._modifiers), 1
* Sat 03 Jan 2015 12:54:01 PM JST
from sendkeys2.xsendkey.pieces import *

* Sat 03 Jan 2015 12:54:05 PM JST
a=XKey(38)
* Sat 03 Jan 2015 12:54:11 PM JST
from sendkeys2.xsendkey.xkeyinput import *
from sendkeys2.xsendkey.inputdest import *

* Sat 03 Jan 2015 12:54:18 PM JST
dest=InputDestination(48234518)

* Sat 03 Jan 2015 12:54:23 PM JST
k=XKeyInput(a,dest)
* Sat 03 Jan 2015 12:54:40 PM JST
from sendkeys2.xsendkey.pieces import *
from sendkeys2.xsendkey.xkeyinput import *
from sendkeys2.xsendkey.inputdest import *

* Sat 03 Jan 2015 12:54:44 PM JST
a=XKey(38)
dest=InputDestination(48234518)

* Sat 03 Jan 2015 12:54:47 PM JST
k=XKeyInput(a,dest)
* Sat 03 Jan 2015 12:58:31 PM JST
inputdest.InputDestination(window, point)
* Sat 03 Jan 2015 12:59:03 PM JST
from sendkeys2.xsendkey.pieces import *
from sendkeys2.xsendkey.xkeyinput import *
from sendkeys2.xsendkey.inputdest import *

* Sat 03 Jan 2015 12:59:09 PM JST
a=XKey(38)
dest=InputDestination(48234518)

* Sat 03 Jan 2015 12:59:12 PM JST
k=XKeyInput(a,dest)
* Sat 03 Jan 2015 01:16:23 PM JST
from struct import pack
* Sat 03 Jan 2015 01:16:41 PM JST
pack('I', a)
* Sat 03 Jan 2015 01:16:50 PM JST
a)
* Sat 03 Jan 2015 01:16:51 PM JST
int(a)
* Sat 03 Jan 2015 01:17:26 PM JST
int(
* Sat 03 Jan 2015 01:17:30 PM JST
int
* Sat 03 Jan 2015 01:17:34 PM JST
int(
* Sat 03 Jan 2015 01:17:37 PM JST
int(
* Sat 03 Jan 2015 01:17:41 PM JST
int(
* Sat 03 Jan 2015 01:17:44 PM JST
int(
* Sat 03 Jan 2015 01:17:48 PM JST
int(
* Sat 03 Jan 2015 01:17:51 PM JST
            
* Sat 03 Jan 2015 01:17:59 PM JST
int(
* Sat 03 Jan 2015 01:18:02 PM JST
int(
* Sat 03 Jan 2015 01:18:06 PM JST
int(
* Sat 03 Jan 2015 01:18:10 PM JST
int(
* Sat 03 Jan 2015 01:18:14 PM JST
int(
* Sat 03 Jan 2015 01:18:17 PM JST
int(
* Sat 03 Jan 2015 01:18:22 PM JST
int(
* Sat 03 Jan 2015 01:18:24 PM JST
            int(
* Sat 03 Jan 2015 01:18:28 PM JST
            
* Sat 03 Jan 2015 01:18:33 PM JST
            
* Sat 03 Jan 2015 01:18:52 PM JST
propagate, destination, detail, sequence_number,
        time, root, window, child, root_x, root_y, event_x, event_y,
        state, samescreen
* Sat 03 Jan 2015 01:33:59 PM JST
title
* Sun 04 Jan 2015 01:31:23 AM JST
        # propagate, destination, detail, sequence_number,
        # time, root, window, child, root_x, root_y, event_x, event_y,
        # state, samescreen

* Sun 04 Jan 2015 01:32:47 AM JST
raise NotImplementedError()
* Sun 04 Jan 2015 01:45:03 AM JST
modifiers
* Sun 04 Jan 2015 02:24:06 AM JST
xsendkey/
* Sun 04 Jan 2015 02:24:07 AM JST
sendkeys2/xsendkey/
* Sun 04 Jan 2015 02:24:28 AM JST
from sendkeys.modifierstate import ModifierState
* Sun 04 Jan 2015 03:46:45 AM JST
from xcb2.xproto import NamedModifierMask
* Sun 04 Jan 2015 03:47:06 AM JST
    def pack(self, ):
        r"""Convert state to C short structs.

        @Return:
        (str)

        pack()

        >>> ModifierState(1).pack()
        '\x01\x00'
        """
        return _pack('H', self)

* Sun 04 Jan 2015 03:47:17 AM JST
from struct import pack as _pack
* Sun 04 Jan 2015 03:47:46 AM JST
    def clear(self, ):
        r"""Clear state to 0.

        @Return:
        None

        clear()

        >>> state = ModifierState(1)
        >>> state.clear()
        >>> state == ModifierState(0)
        True
        """
        self.flags.clear()

* Sun 04 Jan 2015 03:47:49 AM JST
flags
* Sun 04 Jan 2015 03:47:52 AM JST
.clear()
* Sun 04 Jan 2015 04:22:40 AM JST

* Sun 04 Jan 2015 04:22:40 AM JST

* Sun 04 Jan 2015 04:22:40 AM JST
        return self

* Sun 04 Jan 2015 04:23:41 AM JST
    def __repr__(self, ):
        fmt = '{0.__class__.__name__}({1}, "{2}", {3})'.format
        return fmt(self, int(self), self.flags,
                   [str(NamedModifierMask(mod)).split('.')[1]
                    for mod in self if mod])

* Sun 04 Jan 2015 04:23:47 AM JST
flags
* Sun 04 Jan 2015 04:25:37 AM JST
    def __str__(self, ):
        # faster than '{0:b}'.format(8)
        # >>> timeit '{0:b}'.format(8)
        # 1000000 loops, best of 3: 1.07 µs per loop
        # >>> timeit str(bin(8))[2:]
        # 1000000 loops, best of 3: 671 ns per loop
        return str(bin(self.flags))[2:]

* Sun 04 Jan 2015 04:25:53 AM JST

* Sun 04 Jan 2015 04:25:53 AM JST

* Sun 04 Jan 2015 04:25:53 AM JST
            def __str__(self, ):

* Sun 04 Jan 2015 04:26:00 AM JST
flags
* Sun 04 Jan 2015 04:26:07 AM JST
str(bin(self._value))[2:]
* Sun 04 Jan 2015 04:26:12 AM JST

* Sun 04 Jan 2015 04:26:12 AM JST

* Sun 04 Jan 2015 04:26:12 AM JST
        return str(bin(self._value))[2:]

* Sun 04 Jan 2015 04:26:23 AM JST
'{0.__class__.__name__}({1}, "{2}", {3})'
* Sun 04 Jan 2015 04:26:27 AM JST
'{0.__class__.__name__}({1}, "{2}", {3})'.format
* Sun 04 Jan 2015 04:26:37 AM JST
    
* Sun 04 Jan 2015 04:26:39 AM JST
            
* Sun 04 Jan 2015 04:26:40 AM JST
     
* Sun 04 Jan 2015 04:26:43 AM JST

* Sun 04 Jan 2015 04:26:43 AM JST

* Sun 04 Jan 2015 04:26:43 AM JST
        fmt = '{0.__class__.__name__}({1}, "{2}", {3})'.format

* Sun 04 Jan 2015 04:27:44 AM JST
    def __str__(self, ):
        return '<{0} {1}>'.format(
            int(self), [str(NamedModifierMask(mod)).split('.')[1]
                        for mod in self if mod])

* Sun 04 Jan 2015 04:28:08 AM JST
            
* Sun 04 Jan 2015 04:28:18 AM JST
            
* Sun 04 Jan 2015 04:33:01 AM JST
state
* Sun 04 Jan 2015 04:33:03 AM JST
state
* Sun 04 Jan 2015 04:33:06 AM JST
state
* Sun 04 Jan 2015 05:21:29 AM JST
_vlaue 
* Sun 04 Jan 2015 05:22:17 AM JST
bool(
* Sun 04 Jan 2015 05:22:51 AM JST
from sendkeys2.xsendkey.modifiers import Modifiers
Modifiers(0)

* Sun 04 Jan 2015 05:22:53 AM JST
from sendkeys2.xsendkey.modifiers import Modifiers
Modifiers(0)
m=Modifiers(0)

* Sun 04 Jan 2015 05:58:21 AM JST
int(
* Sun 04 Jan 2015 05:58:51 AM JST
a=XKey(38)
* Sun 04 Jan 2015 05:59:00 AM JST
from sendkeys2.xsendkey.modifiers import Modifiers
* Sun 04 Jan 2015 05:59:14 AM JST
from sendkeys2.xsendkey.pieces import *
from sendkeys2.xsendkey.xkeyinput import *
from sendkeys2.xsendkey.inputdest import *
from sendkeys2.xsendkey.modifiers import Modifiers

* Sun 04 Jan 2015 05:59:20 AM JST
a=XKey(38)
* Sun 04 Jan 2015 07:12:15 AM JST
Responsibility:
* Sun 04 Jan 2015 07:15:48 AM JST
pass
* Sun 04 Jan 2015 07:16:26 AM JST
38
* Sun 04 Jan 2015 07:18:36 AM JST
    def test___iand__(self, ):
        self.skipTest('Not Implemented')


* Sun 04 Jan 2015 07:22:36 AM JST
obj.
* Sun 04 Jan 2015 07:22:37 AM JST
self.obj.
* Sun 04 Jan 2015 07:22:59 AM JST

* Sun 04 Jan 2015 07:22:59 AM JST

* Sun 04 Jan 2015 07:23:00 AM JST

* Sun 04 Jan 2015 07:23:00 AM JST

* Sun 04 Jan 2015 07:23:01 AM JST
        self.assertEqual(1, got)

* Sun 04 Jan 2015 07:23:02 AM JST
self.assertEqual(0, self.obj.get_modifiers())
* Sun 04 Jan 2015 07:23:34 AM JST
NamedModifierMask
* Sun 04 Jan 2015 07:23:46 AM JST
NamedModifierMask.Shift
* Sun 04 Jan 2015 07:24:11 AM JST
xahk2
* Sun 04 Jan 2015 07:25:18 AM JST
modifiers
* Sun 04 Jan 2015 07:25:53 AM JST

* Sun 04 Jan 2015 07:25:53 AM JST

* Sun 04 Jan 2015 07:25:53 AM JST
        self.skipTest('Not Implemented')

* Sun 04 Jan 2015 07:30:15 AM JST
self.assertEqual(0, self.obj.get_modifiers())
* Sun 04 Jan 2015 07:34:20 AM JST
self.obj.set_modifiers(NamedModifierMask.Shift)
* Sun 04 Jan 2015 07:34:40 AM JST
test_set_modifiers
* Sun 04 Jan 2015 07:35:05 AM JST
self.assertEqual(0, self.obj.get_modifiers())
* Sun 04 Jan 2015 07:35:18 AM JST

* Sun 04 Jan 2015 07:35:18 AM JST

* Sun 04 Jan 2015 07:35:18 AM JST
        self.skipTest('Not Implemented')

* Sun 04 Jan 2015 07:35:49 AM JST
from xcb2.xproto import NamedModifierMask
* Sun 04 Jan 2015 07:36:06 AM JST
Left
* Sun 04 Jan 2015 07:36:15 AM JST
Alt
* Sun 04 Jan 2015 07:36:18 AM JST
Any
* Sun 04 Jan 2015 07:36:27 AM JST
Lock
* Sun 04 Jan 2015 07:36:35 AM JST
Numlock
* Sun 04 Jan 2015 07:37:51 AM JST
self.
* Sun 04 Jan 2015 07:38:16 AM JST
self.
* Sun 04 Jan 2015 07:38:18 AM JST
self.assertEqual(0, self.obj.get_modifiers())
* Sun 04 Jan 2015 07:38:22 AM JST
a
* Sun 04 Jan 2015 07:38:55 AM JST
NamedModifierMask.Shift
* Sun 04 Jan 2015 07:39:00 AM JST
self.obj.add_modifiers(NamedModifierMask.Shift)
* Sun 04 Jan 2015 07:39:02 AM JST
Shift
* Sun 04 Jan 2015 07:39:08 AM JST
self.assertTrue(self.obj.isflaged(NamedModifierMask.Shift))
* Sun 04 Jan 2015 07:39:11 AM JST
Shift
* Sun 04 Jan 2015 07:39:17 AM JST
self.assertTrue(self.obj.isflaged(NamedModifierMask.Shift))
* Sun 04 Jan 2015 07:40:15 AM JST
add_
* Sun 04 Jan 2015 07:40:22 AM JST
NamedModifierMask.Shift
* Sun 04 Jan 2015 07:41:14 AM JST
assert
* Sun 04 Jan 2015 07:41:14 AM JST
self.assert
* Sun 04 Jan 2015 07:42:20 AM JST
NamedModifierMask.Shift)
* Sun 04 Jan 2015 07:42:26 AM JST
self.assertFalse(self.obj.isflaged(NamedModifierMask.Shift))
* Sun 04 Jan 2015 07:43:05 AM JST
self.assertEqual(38, self.obj.get_code())
* Sun 04 Jan 2015 07:44:14 AM JST
self.assertEqual(38, self.obj.get_code())
* Sun 04 Jan 2015 07:44:21 AM JST
40
* Sun 04 Jan 2015 07:44:26 AM JST
38
* Sun 04 Jan 2015 07:50:59 AM JST
    def test___eq__(self, ):
        self.skipTest('Not Implemented')


* Sun 04 Jan 2015 07:52:28 AM JST
expects
* Sun 04 Jan 2015 07:52:31 AM JST
mod
* Sun 04 Jan 2015 07:52:59 AM JST
NamedModifierMask.Shift
* Sun 04 Jan 2015 07:53:03 AM JST
self.assertTrue(expects == self.obj)
* Sun 04 Jan 2015 07:53:40 AM JST
expects
* Sun 04 Jan 2015 07:53:48 AM JST
NamedModifierMask.Shift
* Sun 04 Jan 2015 07:53:50 AM JST
Shift
* Sun 04 Jan 2015 07:54:06 AM JST
        expects = pieces.XKey(self.code)
        self.assertTrue(expects == self.obj)
        expects.add_modifiers(NamedModifierMask.Shift)
        self.obj.add_modifiers(NamedModifierMask.Shift)
        self.assertTrue(expects == self.obj)
        self.obj.add_modifiers(NamedModifierMask.Alt)
        self.assertFalse(expects == self.obj)

* Sun 04 Jan 2015 07:54:10 AM JST

* Sun 04 Jan 2015 07:54:10 AM JST

* Sun 04 Jan 2015 07:54:10 AM JST
        self.skipTest('Not Implemented')

* Sun 04 Jan 2015 07:54:33 AM JST
.add_modifiers(NamedModifierMask.Shift)
* Sun 04 Jan 2015 07:55:04 AM JST
NamedModifierMask.Shift
* Sun 04 Jan 2015 07:55:42 AM JST
expects = pieces.XKey(self.code)
* Sun 04 Jan 2015 07:55:45 AM JST
code
* Sun 04 Jan 2015 07:55:46 AM JST
self.code
* Sun 04 Jan 2015 07:55:54 AM JST
self.assertTrue(expects == self.obj)
* Sun 04 Jan 2015 07:56:19 AM JST
expects = pieces.XKey(40)
* Sun 04 Jan 2015 07:56:20 AM JST
40
* Sun 04 Jan 2015 07:56:44 AM JST
self.assertTrue(expects != self.obj)
* Sun 04 Jan 2015 07:57:05 AM JST
self.obj.add_modifiers(NamedModifierMask.Shift)
* Sun 04 Jan 2015 07:57:10 AM JST
self.assertFalse(expects == self.obj)
* Sun 04 Jan 2015 07:57:16 AM JST

* Sun 04 Jan 2015 07:57:16 AM JST

* Sun 04 Jan 2015 07:57:16 AM JST
        self.skipTest('Not Implemented')

* Sun 04 Jan 2015 07:57:33 AM JST
    def test___ne__XKey(self, ):
        expects = pieces.XKey(40)
        self.assertTrue(expects != self.obj)
        expects = pieces.XKey(self.code, NamedModifierMask.Shift)
        self.assertTrue(expects != self.obj)
        self.obj.add_modifiers(NamedModifierMask.Shift)
        self.assertFalse(expects != self.obj)

* Sun 04 Jan 2015 07:57:54 AM JST
XKey
* Sun 04 Jan 2015 07:57:54 AM JST
pieces.XKey
* Sun 04 Jan 2015 08:06:25 AM JST
Modifiers
* Sun 04 Jan 2015 08:07:14 AM JST
el
* Sun 04 Jan 2015 08:08:35 AM JST

* Sun 04 Jan 2015 08:08:35 AM JST

* Sun 04 Jan 2015 08:08:35 AM JST
            self.set_code(self._code & other.get_code())

* Sun 04 Jan 2015 08:09:02 AM JST
        if isinstance(other, (self.__class__, )):
            return self.__class__(self._code & other.get_code(),
                                  self._modifiers & self.get_modifiers())
        return self.__class__(self._code, self._modifiers & other)

* Sun 04 Jan 2015 08:09:49 AM JST
                
* Sun 04 Jan 2015 08:09:59 AM JST
                
* Sun 04 Jan 2015 08:10:08 AM JST
        if isinstance(other, (self.__class__, )):
            self.set_modifiers(self._modifiers & other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers & other)
        return self

* Sun 04 Jan 2015 08:10:28 AM JST
        if isinstance(other, (self.__class__, )):
            return self.__class__(
                self._code, self._modifiers ^ self.get_modifiers())
        return self.__class__(self._code, self._modifiers & other)


* Sun 04 Jan 2015 08:10:45 AM JST
 | 
* Sun 04 Jan 2015 08:11:02 AM JST
        if isinstance(other, (self.__class__, )):
            self.set_modifiers(self._modifiers ^ other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers ^ other)
        return self


* Sun 04 Jan 2015 08:11:14 AM JST
|
* Sun 04 Jan 2015 08:11:27 AM JST
        if isinstance(other, (self.__class__, )):
            return self.__class__(
                self._code, self._modifiers | self.get_modifiers())
        return self.__class__(self._code, self._modifiers | other)

* Sun 04 Jan 2015 08:11:45 AM JST
        if isinstance(other, (self.__class__, )):
            self.set_modifiers(self._modifiers | other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers | other)
        return self


* Sun 04 Jan 2015 08:12:03 AM JST
        if isinstance(other, (self.__class__, )):
            return self.__class__(
                self._code, self._modifiers << self.get_modifiers())
        return self.__class__(self._code, self._modifiers << other)

* Sun 04 Jan 2015 08:12:19 AM JST
        if isinstance(other, (self.__class__, )):
            self.set_modifiers(self._modifiers << other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers << other)
        return self


* Sun 04 Jan 2015 08:13:09 AM JST
        if isinstance(other, (self.__class__, )):
            return self.__class__(
                self._code, self._modifiers & self.get_modifiers())
        return self.__class__(self._code, self._modifiers & other)

* Sun 04 Jan 2015 08:13:48 AM JST
    def __and__(self, other):
        if isinstance(other, (self.__class__, )):
            return self.__class__(
                self._code, self._modifiers & self.get_modifiers())
        return self.__class__(self._code, self._modifiers & other)

    def __iand__(self, other):
        if isinstance(other, (self.__class__, )):
            self.set_modifiers(self._modifiers & other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers & other)
        return self

    def __xor__(self, other):
        if isinstance(other, (self.__class__, )):
            return self.__class__(
                self._code, self._modifiers ^ self.get_modifiers())
        return self.__class__(self._code, self._modifiers ^ other)

    def __ixor__(self, other):
        if isinstance(other, (self.__class__, )):
            self.set_modifiers(self._modifiers ^ other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers ^ other)
        return self

    def __or__(self, other):
        if isinstance(other, (self.__class__, )):
            return self.__class__(
                self._code, self._modifiers | self.get_modifiers())
        return self.__class__(self._code, self._modifiers | other)

    def __ior__(self, other):
        if isinstance(other, (self.__class__, )):
            self.set_modifiers(self._modifiers | other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers | other)
        return self

    def __lshift__(self, other):
        if isinstance(other, (self.__class__, )):
            return self.__class__(
                self._code, self._modifiers << self.get_modifiers())
        return self.__class__(self._code, self._modifiers << other)

    def __ilshift__(self, other):
        if isinstance(other, (self.__class__, )):
            self.set_modifiers(self._modifiers << other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers << other)
        return self

    def __rshift__(self, other):
        if isinstance(other, (self.__class__, )):
            return self.__class__(
                self._code, self._modifiers >> self.get_modifiers())
        return self.__class__(self._code, self._modifiers >> other)

    def __irshift__(self, other):
        if isinstance(other, (self.__class__, )):
            self.set_modifiers(self._modifiers >> other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers >> other)
        return self

* Sun 04 Jan 2015 08:18:00 AM JST
obj
* Sun 04 Jan 2015 08:18:01 AM JST
self.obj
* Sun 04 Jan 2015 08:19:14 AM JST

* Sun 04 Jan 2015 08:19:14 AM JST

* Sun 04 Jan 2015 08:19:14 AM JST
        self.skipTest('Not Implemented')

* Sun 04 Jan 2015 08:21:51 AM JST
        self.assertEqual(pieces.XKey(self.code, NamedModifierMask.Shift),
                         self.obj & NamedModifierMask.Shift)

* Sun 04 Jan 2015 08:23:07 AM JST
    def test___and__int(self, ):
        self.obj.add_modifiers(NamedModifierMask.Shift)
        self.assertEqual(pieces.XKey(self.code, NamedModifierMask.Shift),
                         self.obj & NamedModifierMask.Shift)
        self.obj.add_modifiers(NamedModifierMask.Alt)
        self.assertEqual(pieces.XKey(self.code, NamedModifierMask.Shift),
                         self.obj & NamedModifierMask.Shift)


* Sun 04 Jan 2015 08:23:23 AM JST
pieces.XKey(self.code, NamedModifierMask.Shift)
* Sun 04 Jan 2015 08:23:44 AM JST
                         
* Sun 04 Jan 2015 08:24:05 AM JST
                         
* Sun 04 Jan 2015 08:26:52 AM JST
NamedModifierMask.Alt
* Sun 04 Jan 2015 08:26:54 AM JST
Alt
* Sun 04 Jan 2015 08:27:11 AM JST
NamedModifierMask.Shift
* Sun 04 Jan 2015 08:29:07 AM JST
Modifiers() or Modifiers(1)
* Sun 04 Jan 2015 08:30:15 AM JST
self
* Sun 04 Jan 2015 08:30:20 AM JST
self
* Sun 04 Jan 2015 08:30:26 AM JST
self
* Sun 04 Jan 2015 08:30:30 AM JST
self
* Sun 04 Jan 2015 08:30:34 AM JST
self
* Sun 04 Jan 2015 08:37:52 AM JST
from sendkeys2.xsendkey.pieces import *
from sendkeys2.xsendkey.xkeyinput import *
from sendkeys2.xsendkey.inputdest import *
from sendkeys2.xsendkey.modifiers import Modifiers
a=XKey(38)

* Sun 04 Jan 2015 08:38:25 AM JST
a=XKey(38)
* Sun 04 Jan 2015 08:40:24 AM JST
_modifiers
* Sun 04 Jan 2015 08:43:07 AM JST

* Sun 04 Jan 2015 08:43:07 AM JST

* Sun 04 Jan 2015 08:43:07 AM JST
                mod = self._modifiers & other.get_modifiers()

* Sun 04 Jan 2015 08:43:14 AM JST
            
* Sun 04 Jan 2015 08:44:05 AM JST
from sendkeys2.xsendkey.pieces import *
from sendkeys2.xsendkey.xkeyinput import *
from sendkeys2.xsendkey.inputdest import *
from sendkeys2.xsendkey.modifiers import Modifiers
a=XKey(38)

* Sun 04 Jan 2015 08:44:15 AM JST
a.add_modifiers(1)
a
a.add_modifiers(8)

* Sun 04 Jan 2015 08:44:16 AM JST

* Sun 04 Jan 2015 08:44:17 AM JST

* Sun 04 Jan 2015 08:44:17 AM JST
a

* Sun 04 Jan 2015 08:44:23 AM JST
b=XKey(38)
b.add_modifiers(1)

* Sun 04 Jan 2015 08:44:38 AM JST
from sendkeys2.xsendkey.pieces import *
from sendkeys2.xsendkey.xkeyinput import *
from sendkeys2.xsendkey.inputdest import *
from sendkeys2.xsendkey.modifiers import Modifiers
a=XKey(38)
a.add_modifiers(1)
a.add_modifiers(8)
b=XKey(38)
b.add_modifiers(1)

* Sun 04 Jan 2015 08:45:29 AM JST
from sendkeys2.xsendkey.pieces import *
from sendkeys2.xsendkey.xkeyinput import *
from sendkeys2.xsendkey.inputdest import *
from sendkeys2.xsendkey.modifiers import Modifiers
a=XKey(38)
a.add_modifiers(1)
a.add_modifiers(8)
b=XKey(38)
b.add_modifiers(1)

* Sun 04 Jan 2015 08:45:47 AM JST

* Sun 04 Jan 2015 08:45:47 AM JST

* Sun 04 Jan 2015 08:45:47 AM JST
        print('DEBUG-1-pieces.py')

* Sun 04 Jan 2015 08:45:52 AM JST

* Sun 04 Jan 2015 08:45:52 AM JST

* Sun 04 Jan 2015 08:45:52 AM JST
            print(mod)

* Sun 04 Jan 2015 08:46:06 AM JST
self
* Sun 04 Jan 2015 08:46:10 AM JST
self
* Sun 04 Jan 2015 08:46:16 AM JST
self
* Sun 04 Jan 2015 08:46:20 AM JST
self
* Sun 04 Jan 2015 08:46:30 AM JST
self
* Sun 04 Jan 2015 09:02:24 AM JST
    def test___iand__int(self, ):
        self.skipTest('Not Implemented')


* Sun 04 Jan 2015 09:03:00 AM JST
NamedModifierMask.Shift
* Sun 04 Jan 2015 09:03:19 AM JST
self.obj.add_modifiers(NamedModifierMask.Shift)
* Sun 04 Jan 2015 09:03:37 AM JST
NamedModifierMask.Shift
* Sun 04 Jan 2015 09:03:46 AM JST
        self.assertEqual(pieces.XKey(self.code, NamedModifierMask.Shift),
                         self.obj & NamedModifierMask.Shift)

* Sun 04 Jan 2015 09:04:03 AM JST
self.obj.add_modifiers(NamedModifierMask.Alt)
* Sun 04 Jan 2015 09:05:23 AM JST
self.obj &= NamedModifierMask.Shift
* Sun 04 Jan 2015 09:05:30 AM JST
        self.assertEqual(pieces.XKey(self.code, NamedModifierMask.Shift),
                         self.obj & NamedModifierMask.Shift)

* Sun 04 Jan 2015 09:05:52 AM JST
        self.obj.add_modifiers(NamedModifierMask.Shift)
        key = pieces.XKey(self.code, NamedModifierMask.Shift)
        self.assertEqual(key, self.obj & key)
        self.obj.add_modifiers(NamedModifierMask.Alt)
        self.assertEqual(key, self.obj & key)

* Sun 04 Jan 2015 09:17:03 AM JST
self.obj.add_modifiers(NamedModifierMask.Shift)
* Sun 04 Jan 2015 09:17:27 AM JST
NamedModifierMask.Shift
* Sun 04 Jan 2015 09:17:29 AM JST
Shift
* Sun 04 Jan 2015 09:18:18 AM JST
pieces.XKey(self.code, NamedModifierMask.Shift)
* Sun 04 Jan 2015 09:18:56 AM JST
NamedModifierMask.Alt
* Sun 04 Jan 2015 09:20:10 AM JST
    def test___xor__int(self, ):
        self.obj.add_modifiers(NamedModifierMask.Shift | NamedModifierMask.Alt)
        self.assertEqual(pieces.XKey(self.code, NamedModifierMask.Shift),
                         self.obj ^ NamedModifierMask.Alt)

* Sun 04 Jan 2015 09:21:17 AM JST
pieces.XKey(self.code, NamedModifierMask.Shift)
* Sun 04 Jan 2015 09:21:24 AM JST
Shift
* Sun 04 Jan 2015 09:22:06 AM JST
        self.obj.add_modifiers(NamedModifierMask.Shift | NamedModifierMask.Alt)
        self.assertEqual(pieces.XKey(self.code, NamedModifierMask.Shift),
                         self.obj ^ NamedModifierMask.Alt)


* Sun 04 Jan 2015 09:22:25 AM JST
NamedModifierMask.Alt
* Sun 04 Jan 2015 09:22:42 AM JST
    def test___ixor__int(self, ):
        self.obj.add_modifiers(NamedModifierMask.Shift | NamedModifierMask.Alt)
        self.obj ^= NamedModifierMask.Alt
        self.assertEqual(pieces.XKey(self.code, NamedModifierMask.Shift),
                         self.obj)


* Sun 04 Jan 2015 09:26:22 AM JST
        self.obj.add_modifiers(NamedModifierMask.Shift | NamedModifierMask.Alt)
        self.assertEqual(pieces.XKey(self.code, NamedModifierMask.Shift),
                         self.obj ^ NamedModifierMask.Alt)


* Sun 04 Jan 2015 09:26:39 AM JST
NamedModifierMask.Alt
* Sun 04 Jan 2015 09:26:59 AM JST
                        
* Sun 04 Jan 2015 09:27:37 AM JST
NamedModifierMask
* Sun 04 Jan 2015 09:27:54 AM JST
                        
* Sun 04 Jan 2015 09:28:01 AM JST
                        
* Sun 04 Jan 2015 09:28:03 AM JST
                         
* Sun 04 Jan 2015 09:28:05 AM JST
                         
* Sun 04 Jan 2015 09:28:12 AM JST
                         
* Sun 04 Jan 2015 09:28:14 AM JST
                         
* Sun 04 Jan 2015 09:28:26 AM JST
                         
* Sun 04 Jan 2015 09:29:08 AM JST
        self.obj.add_modifiers(ModMask.Shift | ModMask.Alt)
        self.obj ^= ModMask.Alt
        self.assertEqual(pieces.XKey(self.code, ModMask.Shift), self.obj)

* Sun 04 Jan 2015 09:29:20 AM JST
        self.obj.add_modifiers(ModMask.Shift | ModMask.Alt)
        key = pieces.XKey(self.code, ModMask.Alt)
        self.assertEqual(pieces.XKey(self.code, ModMask.Shift), self.obj ^ key)

* Sun 04 Jan 2015 09:30:14 AM JST
ModMask.Alt
* Sun 04 Jan 2015 09:32:14 AM JST
    def test___ior__(self, ):
        self.skipTest('Not Implemented')


* Sun 04 Jan 2015 09:32:31 AM JST
    def test___lshift__(self, ):
        self.skipTest('Not Implemented')

    def test___ilshift__(self, ):
        self.skipTest('Not Implemented')

    def test___rshift__(self, ):
        self.skipTest('Not Implemented')

    def test___irshift__(self, ):
        self.skipTest('Not Implemented')

* Sun 04 Jan 2015 09:32:46 AM JST
    def test___lshift__(self, ):
        self.skipTest('Not Implemented')


* Sun 04 Jan 2015 09:32:53 AM JST
    def test___ilshift__(self, ):
        self.skipTest('Not Implemented')


* Sun 04 Jan 2015 09:32:57 AM JST
    def test___rshift__(self, ):
        self.skipTest('Not Implemented')


* Sun 04 Jan 2015 09:33:09 AM JST
int
* Sun 04 Jan 2015 09:33:20 AM JST
XKey
* Sun 04 Jan 2015 09:35:16 AM JST
        self.obj.add_modifiers(ModMask.Shift)
        self.assertEqual(
            pieces.XKey(self.code, ModMask.Shift | ModMask.Alt),
                        self.obj | ModMask.Alt)


* Sun 04 Jan 2015 09:35:33 AM JST
ModMask.Alt
* Sun 04 Jan 2015 09:35:37 AM JST
                        
* Sun 04 Jan 2015 09:36:00 AM JST
        self.obj.add_modifiers(ModMask.Shift)
        key = pieces.XKey(self.code, ModMask.Alt)
        self.assertEqual(pieces.XKey(self.code, ModMask.Shift | ModMask.Alt),
                         self.obj | key)

* Sun 04 Jan 2015 09:38:17 AM JST

* Sun 04 Jan 2015 09:38:17 AM JST

* Sun 04 Jan 2015 09:38:17 AM JST
        self.skipTest('Not Implemented')

* Sun 04 Jan 2015 09:41:19 AM JST
self.obj.add_modifiers(ModMask.Shift)
* Sun 04 Jan 2015 09:41:42 AM JST
        self.obj.add_modifiers(1)
        obj = self.obj << 1
        self.assertEqual(obj.get_modifiers(), 2)

* Sun 04 Jan 2015 09:41:46 AM JST
obj = 
* Sun 04 Jan 2015 09:42:17 AM JST
        self.obj.add_modifiers(1)
        obj = self.obj << 1
        self.assertEqual(obj.get_modifiers(), 2)

* Sun 04 Jan 2015 09:42:38 AM JST
        self.obj.add_modifiers(1)
        self.obj <<= 1
        self.assertEqual(self.obj.get_modifiers(), 2)

* Sun 04 Jan 2015 09:57:28 AM JST
    def test_set_modifiers(self, ):
        self.assertEqual(0, self.obj.get_modifiers())
        self.obj.set_modifiers(ModMask.Shift)
        self.assertEqual(ModMask.Shift, self.obj.get_modifiers())

    def test_get_modifiers(self, ):
        self.assertEqual(0, self.obj.get_modifiers())
        self.assertIsInstance(self.obj.get_modifiers(), modifiers.Modifiers)

    def test_add_modifiers(self, ):
        self.assertEqual(0, self.obj.get_modifiers())
        self.obj.add_modifiers(ModMask.Shift)
        self.assertTrue(self.obj.isflaged(ModMask.Shift))
        self.obj.add_modifiers(ModMask.Control)
        self.assertTrue(self.obj.isflaged(ModMask.Shift))
        self.assertTrue(self.obj.isflaged(ModMask.Control))

    def test_remove_modifiers(self, ):
        self.test_add_modifiers()
        self.obj.remove_modifiers(ModMask.Shift)
        self.assertFalse(self.obj.isflaged(ModMask.Shift))

    def test_clear(self, ):
        self.test_set_modifiers()
        self.obj.clear_modifiers()
        self.assertEqual(0, self.obj.get_modifiers())

    def test_isflaged(self, ):
        self.assertFalse(self.obj.isflaged(ModMask.Shift))
        self.obj.set_modifiers(ModMask.Shift)
        self.assertTrue(self.obj.isflaged(ModMask.Shift))

    def test_setcode(self, ):
        self.test_getcode()
        expects = 40
        self.obj.set_code(expects)
        self.assertEqual(expects, self.obj.get_code())

    def test_getcode(self, ):
        self.assertEqual(38, self.obj.get_code())

    def test_press(self, ):
        self.skipTest('Not Implemented')

    def test_release(self, ):
        self.skipTest('Not Implemented')

    def test_tosym(self, ):
        self.skipTest('Not Implemented')

    def test___eq__XKey(self, ):
        expects = pieces.XKey(self.code)
        self.assertTrue(expects == self.obj)
        expects.add_modifiers(ModMask.Shift)
        self.obj.add_modifiers(ModMask.Shift)
        self.assertTrue(expects == self.obj)
        self.obj.add_modifiers(ModMask.Alt)
        self.assertFalse(expects == self.obj)

    def test___eq__list(self, ):
        expects = (self.code, 0)
        self.assertTrue(expects == self.obj)
        expects = expects[0], expects[1] | ModMask.Shift
        self.obj.add_modifiers(ModMask.Shift)
        self.assertTrue(expects == self.obj)
        self.obj.add_modifiers(ModMask.Alt)
        self.assertFalse(expects == self.obj)

    def test___ne__XKey(self, ):
        expects = pieces.XKey(40)
        self.assertTrue(expects != self.obj)
        expects = pieces.XKey(self.code, ModMask.Shift)
        self.assertTrue(expects != self.obj)
        self.obj.add_modifiers(ModMask.Shift)
        self.assertFalse(expects != self.obj)

    def test___ne__list(self, ):
        expects = (40, 0)
        self.assertTrue(expects != self.obj)
        expects = (self.code, ModMask.Shift)
        self.assertTrue(expects != self.obj)
        self.obj.add_modifiers(ModMask.Shift)
        self.assertFalse(expects != self.obj)

    def test___repr__(self, ):
        self.skipTest('Not Implemented')

    def test___str__(self, ):
        self.skipTest('Not Implemented')

    def test___and__int(self, ):
        self.obj.add_modifiers(ModMask.Shift)
        self.assertEqual(pieces.XKey(self.code, ModMask.Shift),
                         self.obj & ModMask.Shift)
        self.obj.add_modifiers(ModMask.Alt)
        self.assertEqual(pieces.XKey(self.code, ModMask.Shift),
                         self.obj & ModMask.Shift)

    def test___and__XKey(self, ):
        self.obj.add_modifiers(ModMask.Shift)
        key = pieces.XKey(self.code, ModMask.Shift)
        self.assertEqual(key, self.obj & key)
        self.obj.add_modifiers(ModMask.Alt)
        self.assertEqual(key, self.obj & key)

    def test___iand__int(self, ):
        self.obj.add_modifiers(ModMask.Shift)
        self.obj &= ModMask.Shift
        self.assertEqual(pieces.XKey(self.code, ModMask.Shift), self.obj)
        self.obj.add_modifiers(ModMask.Alt)
        self.obj &= ModMask.Shift
        self.assertEqual(pieces.XKey(self.code, ModMask.Shift), self.obj)

    def test___iand__XKey(self, ):
        self.obj.add_modifiers(ModMask.Shift)
        key = pieces.XKey(self.code, ModMask.Shift)
        self.obj &= key
        self.assertEqual(key, self.obj)
        self.obj.add_modifiers(ModMask.Alt)
        self.obj &= key
        self.assertEqual(key, self.obj)

    def test___xor__int(self, ):
        self.obj.add_modifiers(ModMask.Shift | ModMask.Alt)
        self.assertEqual(pieces.XKey(self.code, ModMask.Shift),
                         self.obj ^ ModMask.Alt)

    def test___xor__XKey(self, ):
        self.obj.add_modifiers(ModMask.Shift | ModMask.Alt)
        key = pieces.XKey(self.code, ModMask.Alt)
        self.assertEqual(pieces.XKey(self.code, ModMask.Shift), self.obj ^ key)

    def test___ixor__int(self, ):
        self.obj.add_modifiers(ModMask.Shift | ModMask.Alt)
        self.obj ^= ModMask.Alt
        self.assertEqual(pieces.XKey(self.code, ModMask.Shift), self.obj)

    def test___ixor__XKey(self, ):
        self.obj.add_modifiers(ModMask.Shift | ModMask.Alt)
        self.obj ^= ModMask.Alt
        self.assertEqual(pieces.XKey(self.code, ModMask.Shift), self.obj)

    def test___or__int(self, ):
        self.obj.add_modifiers(ModMask.Shift)
        self.assertEqual(
            pieces.XKey(self.code, ModMask.Shift | ModMask.Alt),
                        self.obj | ModMask.Alt)

    def test___or__XKey(self, ):
        self.obj.add_modifiers(ModMask.Shift)
        key = pieces.XKey(self.code, ModMask.Alt)
        self.assertEqual(pieces.XKey(self.code, ModMask.Shift | ModMask.Alt),
                         self.obj | key)

    def test___ior__int(self, ):
        self.obj.add_modifiers(ModMask.Shift)
        self.obj |= ModMask.Alt
        self.assertEqual(
            pieces.XKey(self.code, ModMask.Shift | ModMask.Alt), self.obj)

    def test___ior__XKey(self, ):
        self.obj.add_modifiers(ModMask.Shift)
        key = pieces.XKey(self.code, ModMask.Alt)
        self.obj |= key
        self.assertEqual(pieces.XKey(self.code, ModMask.Shift | ModMask.Alt),
                         self.obj)

    def test___lshift__(self, ):
        self.obj.add_modifiers(1)
        obj = self.obj << 1
        self.assertEqual(obj.get_modifiers(), 2)

    def test___ilshift__(self, ):
        self.obj.add_modifiers(1)
        self.obj <<= 1
        self.assertEqual(self.obj.get_modifiers(), 2)

    def test___rshift__(self, ):
        self.obj.add_modifiers(4)
        obj = self.obj >> 1
        self.assertEqual(obj.get_modifiers(), 2)

    def test___irshift__(self, ):
        self.obj.add_modifiers(4)
        self.obj >>= 1
        self.assertEqual(self.obj.get_modifiers(), 2)


* Sun 04 Jan 2015 09:57:40 AM JST
cls.code = 38 # keycode 38 == 'a'
* Sun 04 Jan 2015 09:57:55 AM JST
key
* Sun 04 Jan 2015 09:58:10 AM JST
self.obj = pieces.XKey(self.code)
* Sun 04 Jan 2015 09:59:23 AM JST
38
* Sun 04 Jan 2015 10:00:26 AM JST
40
* Sun 04 Jan 2015 10:00:30 AM JST
self.
* Sun 04 Jan 2015 10:05:04 AM JST
key = pieces.XButton(self.code, ModMask.Alt)
* Sun 04 Jan 2015 10:05:08 AM JST
Alt
* Sun 04 Jan 2015 10:05:08 AM JST
ModMask.Alt
* Sun 04 Jan 2015 10:05:40 AM JST
        key = pieces.XButton(self.code, ModMask.Alt)
        self.obj ^= key

* Sun 04 Jan 2015 10:07:41 AM JST
        
* Sun 04 Jan 2015 10:07:45 AM JST
expects
* Sun 04 Jan 2015 10:08:54 AM JST
object 
* Sun 04 Jan 2015 10:08:58 AM JST
obj
* Sun 04 Jan 2015 10:08:58 AM JST
self.obj
* Sun 04 Jan 2015 10:09:29 AM JST
type
* Sun 04 Jan 2015 11:13:53 AM JST
set_
* Sun 04 Jan 2015 11:20:16 AM JST
key
* Sun 04 Jan 2015 11:20:55 AM JST
kinput
* Sun 04 Jan 2015 11:23:38 AM JST

* Sun 04 Jan 2015 11:23:38 AM JST

* Sun 04 Jan 2015 11:23:38 AM JST
        self._window = window

* Sun 04 Jan 2015 04:59:04 PM JST
line)
* Sun 04 Jan 2015 04:59:05 PM JST
print(line)
* Sun 04 Jan 2015 05:01:40 PM JST
hell')
* Sun 04 Jan 2015 05:15:02 PM JST
no'
* Sun 04 Jan 2015 05:15:03 PM JST
default='no'
* Sun 04 Jan 2015 05:23:33 PM JST
CommandNotFound
* Sun 04 Jan 2015 05:26:04 PM JST

* Sun 04 Jan 2015 05:26:04 PM JST

* Sun 04 Jan 2015 05:26:04 PM JST
from sh import self_module

* Sun 04 Jan 2015 05:26:14 PM JST
LOGGER.warning('Failed: OSError'.format(self.dirs))
* Sun 04 Jan 2015 05:26:26 PM JST
OSError
* Sun 04 Jan 2015 05:26:31 PM JST
dirs
* Sun 04 Jan 2015 05:26:31 PM JST
self.dirs
* Sun 04 Jan 2015 05:26:40 PM JST
pass
* Sun 04 Jan 2015 05:27:55 PM JST
write
* Sun 04 Jan 2015 05:29:02 PM JST
        LOGGER.info('\n\n{0:#^40}'.format(' Update Knight '))
        try:
            sbp.check_call((CMD.get('apt-get'), 'update'))
            sbp.check_call((CMD.get('apt-get'), '-y', 'upgrade'))
            sbp.check_call((CMD.get('apt-get'), 'clean'))
        except sbp.CalledProcessError, OSError:
            LOGGER.error('Failed: apt-get')

* Sun 04 Jan 2015 05:29:07 PM JST

* Sun 04 Jan 2015 05:29:08 PM JST

* Sun 04 Jan 2015 05:29:08 PM JST
            sbp.check_call((CMD.get('apt-get'), 'update'))

* Sun 04 Jan 2015 05:29:09 PM JST

* Sun 04 Jan 2015 05:29:09 PM JST

* Sun 04 Jan 2015 05:29:09 PM JST
            sbp.check_call((CMD.get('apt-get'), 'clean'))

* Sun 04 Jan 2015 05:29:11 PM JST

* Sun 04 Jan 2015 05:29:11 PM JST

* Sun 04 Jan 2015 05:29:11 PM JST
        LOGGER.info('\n\n{0:#^40}'.format(' Update Knight '))

* Sun 04 Jan 2015 05:29:14 PM JST

* Sun 04 Jan 2015 05:29:14 PM JST

* Sun 04 Jan 2015 05:29:14 PM JST
            sbp.check_call((CMD.get('apt-get'), '-y', 'upgrade'))

* Sun 04 Jan 2015 05:29:14 PM JST

* Sun 04 Jan 2015 05:29:15 PM JST

* Sun 04 Jan 2015 05:29:15 PM JST
        LOGGER.info('\n\n{0:#^40}'.format(' Update Knight '))

* Sun 04 Jan 2015 05:30:23 PM JST

* Sun 04 Jan 2015 05:30:23 PM JST

* Sun 04 Jan 2015 05:30:23 PM JST
                 aptupgrade = AptUpgrade()

* Sun 04 Jan 2015 05:32:16 PM JST
ShowResult
* Sun 04 Jan 2015 05:44:31 PM JST
Show
* Sun 04 Jan 2015 05:44:34 PM JST
Show
* Sun 04 Jan 2015 05:44:35 PM JST
Show
* Sun 04 Jan 2015 05:44:41 PM JST
List
* Sun 04 Jan 2015 05:44:53 PM JST

* Sun 04 Jan 2015 05:44:53 PM JST

* Sun 04 Jan 2015 05:44:53 PM JST
        result = self._result.getresult()

* Sun 04 Jan 2015 05:44:54 PM JST
result
* Sun 04 Jan 2015 05:45:12 PM JST
Show
* Sun 04 Jan 2015 05:45:14 PM JST
aptupgrade
* Sun 04 Jan 2015 05:45:19 PM JST
Result()
* Sun 04 Jan 2015 05:48:03 PM JST
AptUpgrade(result)
* Sun 04 Jan 2015 05:48:07 PM JST

* Sun 04 Jan 2015 05:48:07 PM JST

* Sun 04 Jan 2015 05:48:07 PM JST
        aptupgrade = AptUpgrade(result)

* Sun 04 Jan 2015 05:50:33 PM JST
CmdlinePassGetter()
* Sun 04 Jan 2015 05:50:36 PM JST

* Sun 04 Jan 2015 05:50:36 PM JST

* Sun 04 Jan 2015 05:50:36 PM JST
        self._getter = getter or CmdlinePassGetter()

* Sun 04 Jan 2015 05:50:48 PM JST
passge
* Sun 04 Jan 2015 05:51:01 PM JST
hello')
* Sun 04 Jan 2015 05:51:02 PM JST
getpasswd('hello')
* Sun 04 Jan 2015 05:53:56 PM JST
it
* Sun 04 Jan 2015 05:55:00 PM JST
import getpasswd
* Sun 04 Jan 2015 05:55:57 PM JST
# condition: (and (not (py:at-string|comment-p)) (not (equal (this-command-keys-vector) [32])))
* Sun 04 Jan 2015 06:05:28 PM JST
Same chrome hash
* Sun 04 Jan 2015 06:05:38 PM JST
'Failed chromeroot command'
* Sun 04 Jan 2015 06:09:31 PM JST
e)
* Sun 04 Jan 2015 06:09:32 PM JST
setgetter
* Sun 04 Jan 2015 06:21:22 PM JST
    os.system('modprobe pcspkr')
    os.system('/usr/bin/beep -f 100 -l 700')
    os.system('rmmod pcspkr')

* Sun 04 Jan 2015 06:22:03 PM JST
os.system('/usr/bin/beep -f 100 -l 700')
* Sun 04 Jan 2015 06:22:10 PM JST
os.system('modprobe pcspkr')
* Sun 04 Jan 2015 06:22:27 PM JST
os.system('/usr/bin/beep -f 200 -l 1000')
* Sun 04 Jan 2015 06:22:43 PM JST
os.system('/usr/bin/beep -f 900 -l 1000')
* Sun 04 Jan 2015 06:23:13 PM JST
os.system('/usr/bin/beep -f 200 -l 500')
* Sun 04 Jan 2015 06:25:31 PM JST
setget
* Sun 04 Jan 2015 06:25:32 PM JST
self.setget
* Sun 04 Jan 2015 06:25:53 PM JST
get
* Sun 04 Jan 2015 06:26:00 PM JST
CmdlinePassGetter()
* Sun 04 Jan 2015 06:26:20 PM JST

* Sun 04 Jan 2015 06:26:20 PM JST

* Sun 04 Jan 2015 06:26:20 PM JST
        self.setgetter(getter or CmdlinePassGetter())

* Sun 04 Jan 2015 06:31:12 PM JST
WXPassGetter())
* Sun 04 Jan 2015 06:31:12 PM JST
getpasswd.WXPassGetter())
* Sun 04 Jan 2015 06:31:13 PM JST
setgetter
* Sun 04 Jan 2015 06:50:27 PM JST
from getpasswd.getter import EasyGUIPassGetter as GUIGetter
* Sun 04 Jan 2015 06:51:27 PM JST
pass
* Sun 04 Jan 2015 06:52:03 PM JST
GUIGetter
* Sun 04 Jan 2015 06:55:23 PM JST
import Tkinter, tkSimpleDialog
tkSimpleDialog.askstring("Password", "Enter password:", show='*')
* Sun 04 Jan 2015 06:55:46 PM JST
import Tkinter, tkSimpleDialog
* Sun 04 Jan 2015 06:55:54 PM JST
tkSimpleDialog.askstring("Password", "Enter password:", show='*')
* Sun 04 Jan 2015 09:38:18 PM JST
CmdlinePassGetter()
* Sun 04 Jan 2015 09:40:15 PM JST
GETPASSWD = GetPasswd(getter)
* Sun 04 Jan 2015 09:40:25 PM JST
GUIGetter()
* Sun 04 Jan 2015 09:40:27 PM JST

* Sun 04 Jan 2015 09:40:27 PM JST

* Sun 04 Jan 2015 09:40:28 PM JST
    getter = 

* Sun 04 Jan 2015 09:40:31 PM JST
GETPASSWD = GetPasswd(getter)
* Sun 04 Jan 2015 09:40:33 PM JST
getter
* Sun 04 Jan 2015 09:40:35 PM JST

* Sun 04 Jan 2015 09:40:35 PM JST

* Sun 04 Jan 2015 09:40:35 PM JST
GETPASSWD = GetPasswd(getter)

* Sun 04 Jan 2015 09:42:34 PM JST
dir(
* Sun 04 Jan 2015 09:43:36 PM JST
'WXPassGetter'
* Sun 04 Jan 2015 09:44:43 PM JST
GetPasswd
* Sun 04 Jan 2015 09:46:08 PM JST
not
* Sun 04 Jan 2015 09:46:11 PM JST

* Sun 04 Jan 2015 09:46:11 PM JST

* Sun 04 Jan 2015 09:46:11 PM JST
    GETPASSWD = GetPasswd(GUIGetter())

* Sun 04 Jan 2015 09:46:21 PM JST

* Sun 04 Jan 2015 09:46:21 PM JST

* Sun 04 Jan 2015 09:46:21 PM JST
print(globals())

* Sun 04 Jan 2015 09:46:56 PM JST
, GETPASSWD as getpasswd
* Sun 04 Jan 2015 09:48:46 PM JST

* Sun 04 Jan 2015 09:48:46 PM JST

* Sun 04 Jan 2015 09:48:46 PM JST
getpasswd = GetPasswd()

* Sun 04 Jan 2015 09:49:15 PM JST
from getpasswd.core import GetPasswd
from getpasswd.getter import * # must int

* Sun 04 Jan 2015 09:49:26 PM JST
if  _sys.stdout.isatty():
    GETPASSWD = GetPasswd()
else:
    GETPASSWD = GetPasswd(GUIGetter())

* Sun 04 Jan 2015 09:51:08 PM JST
Easy
* Sun 04 Jan 2015 09:51:22 PM JST
WXPassGetter
* Sun 04 Jan 2015 09:51:27 PM JST
finally
* Sun 04 Jan 2015 09:53:03 PM JST
EasyGUIPassGetter
* Sun 04 Jan 2015 09:53:55 PM JST
__version__
* Sun 04 Jan 2015 10:31:11 PM JST
getcmfpass
* Sun 04 Jan 2015 10:38:55 PM JST
confirm_passwd
* Sun 04 Jan 2015 10:40:00 PM JST

* Sun 04 Jan 2015 10:40:00 PM JST

* Sun 04 Jan 2015 10:40:00 PM JST
    for _ in range(times + 1):

* Sun 04 Jan 2015 11:13:26 PM JST
confirm
* Mon 05 Jan 2015 01:13:37 AM JST
getter
* Mon 05 Jan 2015 01:17:46 AM JST
setgetter()
* Mon 05 Jan 2015 01:18:34 AM JST
attributes
* Mon 05 Jan 2015 01:19:12 AM JST
str
* Mon 05 Jan 2015 01:19:50 AM JST
args
* Mon 05 Jan 2015 02:40:08 PM JST
Connection.get_instance(display=self.display)
* Mon 05 Jan 2015 02:40:16 PM JST

* Mon 05 Jan 2015 02:40:16 PM JST

* Mon 05 Jan 2015 02:40:16 PM JST
        self.connection = Connection.get_instance(display=self.display)

* Mon 05 Jan 2015 02:41:12 PM JST
Connection.get_instance(display=self.display)
* Mon 05 Jan 2015 02:45:11 PM JST
format
* Mon 05 Jan 2015 02:45:12 PM JST
self.format
* Mon 05 Jan 2015 02:45:16 PM JST

* Mon 05 Jan 2015 02:45:16 PM JST

* Mon 05 Jan 2015 02:45:16 PM JST
    format = 'I'

* Mon 05 Jan 2015 02:45:29 PM JST
Display
* Mon 05 Jan 2015 02:45:31 PM JST
Display
* Mon 05 Jan 2015 02:46:47 PM JST
connection
* Mon 05 Jan 2015 02:52:10 PM JST
display.
* Mon 05 Jan 2015 02:54:41 PM JST
from xcb4.xconnection import Display


class Resource(object):
    r"""SUMMARY
    """

    def __init__(self, rid, display=None):
        r"""

        @Arguments:
        - `connection`:
        - `rid`:

        """
        self.display = Display(display)
        self.id = int(rid)

    def get_display(self, ):
        r"""SUMMARY

        get_display()

        @Return:

        @Error:
        """
        return self.display

    def get_connection(self, ):
        r"""SUMMARY

        get_connection()

        @Return:

        @Error:
        """
        return self.display.get_connection()

    def __int__(self, ):
        return self.id

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.id, other.id)
        return cmp(int(self), int(other))

    def __hash__(self, ):
        return int(self.id)

    def __repr__(self, ):
        return '{0.__class__.__name__}(id={0.id})'.format(self)

    def __str__(self, ):
        return '{0.__class__.__name__}(id={0.id})'.format(self)

    def kill_client(self, ):
        r"""SUMMARY

        kill_client()

        @Return:
        """
        return self.get_connection().core.KillClientChecked(self.id)

* Mon 05 Jan 2015 02:55:12 PM JST

* Mon 05 Jan 2015 02:55:13 PM JST

* Mon 05 Jan 2015 02:55:13 PM JST
from xcb4.xconnection import Display

* Mon 05 Jan 2015 02:56:23 PM JST
class Resource(Display):
    r"""SUMMARY
    """

    def __init__(self, rid, display=None):
        r"""

        @Arguments:
        - `connection`:
        - `rid`:

        """
        Display.__init__(self, display)
        self.id = int(rid)

    @property
    def core(self, ):
        r"""Alias Connection.core

        core()

        @Return:
        """
        return self.connection.core

    def __int__(self, ):
        return self.id

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.id, other.id)
        return cmp(int(self), int(other))

    def __hash__(self, ):
        return int(self.id)

    def __repr__(self, ):
        return '{0.__class__.__name__}(id={0.id})'.format(self)

    def __str__(self, ):
        return '{0.__class__.__name__}(id={0.id})'.format(self)

    def kill_client(self, ):
        r"""SUMMARY

        kill_client()

        @Return:
        """
        return self.connection.core.KillClientChecked(self.id)

* Mon 05 Jan 2015 02:57:03 PM JST
class Resource(Display):
    r"""SUMMARY
    """

    def __init__(self, rid, display=None):
        r"""

        @Arguments:
        - `connection`:
        - `rid`:

        """
        Display.__init__(self, display)
        self.id = int(rid)

    @property
    def core(self, ):
        r"""Alias Connection.core

        core()

        @Return:
        """
        return self.connection.core

    def __int__(self, ):
        return self.id

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            if self.connection == other.connection:
                return cmp(self.id, other.id)
            else:
                return cmp(self.connection, other.connection)
        else:
            return cmp(id(self), id(other))

    def __hash__(self, ):
        return int(self.id)

    def __repr__(self, ):
        return '<{0.__class__.__name__} {0.id}>'.format(self, id(self))

    def __str__(self, ):
        return '{0.__class__.__name__}(id={0.id})'.format(self)

    def kill_client(self, ):
        r"""SUMMARY

        kill_client()

        @Return:
        """
        return self.connection.core.KillClient(self.id)

    def flush(self, ):
        r"""SUMMARY

        flush()

        @Return:
        """
        self.connection.flush()

* Mon 05 Jan 2015 03:01:08 PM JST
Display
* Mon 05 Jan 2015 03:01:15 PM JST
__init__
* Mon 05 Jan 2015 03:01:19 PM JST
self, 
* Mon 05 Jan 2015 03:03:10 PM JST
Display, 
* Mon 05 Jan 2015 03:03:20 PM JST
self, 
* Mon 05 Jan 2015 03:03:21 PM JST
__init__
* Mon 05 Jan 2015 03:03:23 PM JST
        
* Mon 05 Jan 2015 03:03:43 PM JST
Display
* Mon 05 Jan 2015 03:03:49 PM JST
self, 
* Mon 05 Jan 2015 03:03:50 PM JST
display=
* Mon 05 Jan 2015 03:03:51 PM JST
__init__
* Mon 05 Jan 2015 03:04:16 PM JST
Display
* Mon 05 Jan 2015 03:04:24 PM JST
self, 
* Mon 05 Jan 2015 03:04:25 PM JST
__init__
* Mon 05 Jan 2015 03:04:55 PM JST
display.get_connection()
* Mon 05 Jan 2015 03:06:51 PM JST
Display
* Mon 05 Jan 2015 03:07:13 PM JST
__init__
* Mon 05 Jan 2015 03:07:17 PM JST
self, 
* Mon 05 Jan 2015 03:07:17 PM JST
        
* Mon 05 Jan 2015 03:08:07 PM JST
Display
* Mon 05 Jan 2015 03:08:17 PM JST
__init__
* Mon 05 Jan 2015 03:08:18 PM JST
self, 
* Mon 05 Jan 2015 03:08:56 PM JST
Display
* Mon 05 Jan 2015 03:09:03 PM JST
        
* Mon 05 Jan 2015 03:09:07 PM JST
__init__
* Mon 05 Jan 2015 03:09:10 PM JST
self, 
* Mon 05 Jan 2015 03:24:35 PM JST
Display
* Mon 05 Jan 2015 03:24:48 PM JST
__init__
* Mon 05 Jan 2015 03:24:50 PM JST
self, 
* Mon 05 Jan 2015 03:24:51 PM JST
        
* Mon 05 Jan 2015 11:27:56 PM JST
environ
* Mon 05 Jan 2015 11:29:18 PM JST
def
* Mon 05 Jan 2015 11:29:38 PM JST
self
* Mon 05 Jan 2015 11:29:43 PM JST
Display.
* Mon 05 Jan 2015 11:47:51 PM JST
dest
* Mon 05 Jan 2015 11:47:52 PM JST
_dest = dest
* Tue 06 Jan 2015 12:14:58 AM JST
_modi
* Tue 06 Jan 2015 12:17:27 AM JST
pieces
* Tue 06 Jan 2015 12:17:55 AM JST

* Tue 06 Jan 2015 12:17:56 AM JST
XButton
* Tue 06 Jan 2015 12:17:56 AM JST
XKey, XButton
* Tue 06 Jan 2015 12:17:57 AM JST
pieces 
* Tue 06 Jan 2015 12:18:09 AM JST

* Tue 06 Jan 2015 12:18:09 AM JST
XInputer
* Tue 06 Jan 2015 12:18:10 AM JST
xinputer
* Tue 06 Jan 2015 12:18:36 AM JST

* Tue 06 Jan 2015 12:18:38 AM JST
inputdest
* Tue 06 Jan 2015 12:18:41 AM JST
InputDestination
* Tue 06 Jan 2015 12:18:45 AM JST

* Tue 06 Jan 2015 12:18:45 AM JST
ButtonCode
* Tue 06 Jan 2015 12:18:47 AM JST
buttoncode
* Tue 06 Jan 2015 12:19:11 AM JST

* Tue 06 Jan 2015 12:19:13 AM JST
Key
* Tue 06 Jan 2015 12:19:14 AM JST
keychar
* Tue 06 Jan 2015 12:19:20 AM JST

* Tue 06 Jan 2015 12:19:21 AM JST
Keycode
* Tue 06 Jan 2015 12:19:22 AM JST
keycode
* Tue 06 Jan 2015 12:19:41 AM JST

* Tue 06 Jan 2015 12:19:41 AM JST
Key
* Tue 06 Jan 2015 12:19:44 AM JST
keyname
* Tue 06 Jan 2015 12:20:58 AM JST

* Tue 06 Jan 2015 12:20:58 AM JST
Modifiers
* Tue 06 Jan 2015 12:21:01 AM JST
modifiers
* Tue 06 Jan 2015 12:21:08 AM JST
XSendkey
* Tue 06 Jan 2015 01:11:07 AM JST
inputer
* Tue 06 Jan 2015 01:11:10 AM JST
inputer
* Tue 06 Jan 2015 01:12:07 AM JST
inputer
* Tue 06 Jan 2015 01:13:23 AM JST
from sendkeys2.xsendkey.inputdest import InputDestination
* Tue 06 Jan 2015 01:14:11 AM JST
InputDestination
* Tue 06 Jan 2015 01:14:17 AM JST
from
* Tue 06 Jan 2015 01:14:23 AM JST
import
* Tue 06 Jan 2015 01:16:32 AM JST
display
* Tue 06 Jan 2015 01:22:17 AM JST
from xahk2.xobj.point import Point
* Tue 06 Jan 2015 01:34:20 AM JST
None
* Tue 06 Jan 2015 01:40:47 AM JST
display,
* Tue 06 Jan 2015 01:54:00 AM JST
def
* Tue 06 Jan 2015 01:57:33 AM JST
pass
* Tue 06 Jan 2015 01:57:35 AM JST
pass
* Tue 06 Jan 2015 02:02:44 AM JST
pass
* Tue 06 Jan 2015 02:05:54 AM JST
pass
* Tue 06 Jan 2015 03:04:55 AM JST
title
* Tue 06 Jan 2015 03:04:59 AM JST
54525974
* Tue 06 Jan 2015 03:10:04 AM JST
xsendkey
* Tue 06 Jan 2015 03:23:47 AM JST
XSendkey
* Tue 06 Jan 2015 03:23:49 AM JST
sendkey
* Tue 06 Jan 2015 03:41:00 AM JST
modif
* Tue 06 Jan 2015 03:44:37 AM JST
Modifiers
* Tue 06 Jan 2015 03:44:39 AM JST
modifiers
* Tue 06 Jan 2015 03:44:55 AM JST
XSendkey
* Tue 06 Jan 2015 03:44:59 AM JST
sendkey
* Tue 06 Jan 2015 03:45:00 AM JST
XSendkey
* Tue 06 Jan 2015 03:14:50 PM JST
(defun e2wm:dp-pycode-switch (buf)
    (if (e2wm:history-recordable-p buf)
        (let ((buf-name (buffer-name buf))
              (wm (e2wm:pst-get-wm)))
          (cond ((string-match "\\*w3m\\*" buf-name)
                 (e2wm:pst-buffer-set 'right buf)
                 t)
                ((eq (selected-window) (wlf:get-window wm 'right))
                 (e2wm:pst-buffer-set 'right buf)
                 t)
                ((eql (get-buffer buf) (wlf:get-buffer wm 'main))
                 (e2wm:pst-update-windows)
                 (e2wm:pst-buffer-set 'main buf)
                 t)
                (t (e2wm:pst-show-history-main)
                   (e2wm:pst-window-select-main))))))
* Tue 06 Jan 2015 03:22:14 PM JST
my-pylib-dir
* Tue 06 Jan 2015 03:22:19 PM JST
my-pylib-dir
* Tue 06 Jan 2015 03:22:33 PM JST
(expand-file-name "~/.pylib")
* Tue 06 Jan 2015 03:26:10 PM JST
(pylib-dired (dired-noselect (expand-file-name "~/.pylib")))
* Tue 06 Jan 2015 03:26:29 PM JST
(wlf:set-buffer code-wm 'files pylib-dired)
* Tue 06 Jan 2015 03:32:12 PM JST

* Tue 06 Jan 2015 03:32:12 PM JST

* Tue 06 Jan 2015 03:32:12 PM JST
        (message "DEBUG-1-e2wm_mode_start.el")

* Tue 06 Jan 2015 03:32:39 PM JST
cannot
* Wed 07 Jan 2015 02:58:43 PM JST
OrderedReplace
* Wed 07 Jan 2015 03:00:45 PM JST
None
* Wed 07 Jan 2015 03:04:47 PM JST
from collections import OrderedDict as _OrderedDict
* Wed 07 Jan 2015 03:05:37 PM JST
folder
* Wed 07 Jan 2015 03:08:29 PM JST
_new
* Wed 07 Jan 2015 03:10:41 PM JST
        self._dict = _OrderedDict()
        if dict_ or kwargs:
            self.update(dict_, **kwargs)

* Wed 07 Jan 2015 03:13:32 PM JST
val
* Wed 07 Jan 2015 03:13:37 PM JST
class
* Wed 07 Jan 2015 03:21:07 PM JST
sre_compile
* Wed 07 Jan 2015 03:21:21 PM JST
sre_parse
* Wed 07 Jan 2015 03:23:39 PM JST

* Wed 07 Jan 2015 03:23:39 PM JST

* Wed 07 Jan 2015 03:23:39 PM JST
        if not isinstance(key, (re._pattern_type, )):

* Wed 07 Jan 2015 03:26:06 PM JST
pass
* Wed 07 Jan 2015 03:26:46 PM JST
len
* Wed 07 Jan 2015 03:27:42 PM JST
eval'
* Wed 07 Jan 2015 03:27:50 PM JST

* Wed 07 Jan 2015 03:27:50 PM JST

* Wed 07 Jan 2015 03:27:50 PM JST
        regexp = re.compile(key)

* Wed 07 Jan 2015 03:27:52 PM JST
val
* Wed 07 Jan 2015 03:29:05 PM JST

* Wed 07 Jan 2015 03:29:06 PM JST

* Wed 07 Jan 2015 03:29:06 PM JST
        self[old] = (new)

* Wed 07 Jan 2015 03:30:47 PM JST
        if isinstance(dict_, self.__class__):
            for key, value in dict_.iteritems():
                self[key.pattern] = value
        elif isinstance(dict_, dict):
            for key, value in dict_.iteritems():
                self[key] = value
        else:
            # if (('key', 1), ('key2', 2)), and so on
            self.update(_OrderedDict((dict_))) # recursive call

* Wed 07 Jan 2015 03:30:59 PM JST
pattern
* Wed 07 Jan 2015 03:32:29 PM JST
    def __getitem__(self, key):
        return self._dict[_re.compile(key)]


* Wed 07 Jan 2015 03:32:50 PM JST
OrderedRepla
* Wed 07 Jan 2015 03:32:57 PM JST
import
* Wed 07 Jan 2015 03:33:16 PM JST
orderedreplacer
* Wed 07 Jan 2015 03:36:08 PM JST
    def __delitem__(self, key, prev=0, next_=1):
        regexp = _re.compile(key)
        self._dict.__delitem__(regexp)

* Wed 07 Jan 2015 03:36:19 PM JST
re.compile(key)
* Wed 07 Jan 2015 03:36:22 PM JST

* Wed 07 Jan 2015 03:36:22 PM JST

* Wed 07 Jan 2015 03:36:22 PM JST
        regexp = _re.compile(key)

* Wed 07 Jan 2015 03:36:55 PM JST
    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:

        @Error:
        """
        self._dict.clear()

    def keys(self, ):
        r"""SUMMARY

        keys()

        @Return:

        @Error:
        """
        return self._dict.keys()

    def values(self, ):
        r"""SUMMARY

        values()

        @Return:

        @Error:
        """
        return self._dict.values()

    def items(self, ):
        r"""SUMMARY

        items()

        @Return:

        @Error:
        """
        return self._dict.items()

    def iterkeys(self, ):
        r"""SUMMARY

        iterkeys()

        @Return:

        @Error:
        """
        return self._dict.iterkeys()

    def itervalues(self, ):
        r"""SUMMARY

        itervalues()

        @Return:

        @Error:
        """
        return self._dict.itervalues()

    def iteritems(self, ):
        r"""SUMMARY

        iteritems()

        @Return:

        @Error:
        """
        return self._dict.iteritems()


* Wed 07 Jan 2015 03:37:07 PM JST
    def setdefault(self, key, default):
        r"""SUMMARY

        setdefault(key, default)

        @Arguments:
        - `key`:
        - `default`:

        @Return:

        @Error:
        """
        if key in self:
            return self[key]
        self[key] = default
        return default

    def __contains__(self, el):
        return _re.compile(el) in self._dict

* Wed 07 Jan 2015 03:38:03 PM JST

* Wed 07 Jan 2015 03:38:03 PM JST

* Wed 07 Jan 2015 03:38:03 PM JST
        self[key] = default

* Wed 07 Jan 2015 03:38:28 PM JST
default
* Wed 07 Jan 2015 03:38:33 PM JST
self[key]
* Wed 07 Jan 2015 03:38:41 PM JST
    def __repr__(self):
        return '{0.__class__.__name__}({1})'.format(
            self, [(rxp.pattern, repl) for rxp, repl in self._dict.iteritems()])

* Wed 07 Jan 2015 03:38:54 PM JST
    def copy(self, ):
        r"""SUMMARY

        copy()

        @Return:

        @Error:
        """
        return self.__class__(self._dict)


* Wed 07 Jan 2015 03:39:00 PM JST
    def __len__(self):
        return len(self._dict)


* Wed 07 Jan 2015 03:39:58 PM JST
        if not isinstance(text, str):
            # TODO: (Atami) [2014/10/25]
            raise TypeError()

* Wed 07 Jan 2015 03:40:28 PM JST
_dict.
* Wed 07 Jan 2015 03:41:57 PM JST
                line = rx.sub(new.get_new(), line)               
* Wed 07 Jan 2015 03:42:22 PM JST
    def __call__(self, text):
        return self.replace(text)

* Wed 07 Jan 2015 03:42:42 PM JST
from orderedreplacer import replacer
* Wed 07 Jan 2015 03:42:50 PM JST
import 
* Wed 07 Jan 2015 03:43:06 PM JST
OrderedReplacer
* Wed 07 Jan 2015 03:43:20 PM JST
hello
* Wed 07 Jan 2015 03:43:22 PM JST
google
* Wed 07 Jan 2015 03:52:07 PM JST
None
* Wed 07 Jan 2015 03:52:33 PM JST
0)
* Wed 07 Jan 2015 03:52:33 PM JST
hello', 0)
* Wed 07 Jan 2015 03:52:34 PM JST
hello hello', 0)
* Wed 07 Jan 2015 03:52:34 PM JST
yahoo', 'hello hello', 0)
* Wed 07 Jan 2015 03:52:35 PM JST
sub('yahoo', 'hello hello', 0)
* Wed 07 Jan 2015 03:52:47 PM JST
None
* Wed 07 Jan 2015 03:53:06 PM JST

* Wed 07 Jan 2015 03:53:06 PM JST

* Wed 07 Jan 2015 03:53:06 PM JST
            if new.hascount():

* Wed 07 Jan 2015 03:53:55 PM JST
class NewArguments(object):
    r"""NewArguments

    NewArguments is a object.
    Responsibility:
    Informetion holder for `str.replace'.
    """
    __slots__ = ('new', 'count')

    def __init__(self, new, count=0):
        r"""

        @Arguments:
        - `new`:
        - `count`:
        """
        self.new = new
        self.count = count

    def get_new(self, ):
        r"""SUMMARY

        get_new()

        @Return:

        @Error:
        """
        return self.new

    def set_new(self, new):
        r"""SUMMARY

        set_new(new)

        @Arguments:
        - `new`:

        @Return:

        @Error:
        """
        if not isinstance(new, (basestring, )):
            # TODO: (Atami) [2015/01/07]
            raise TypeError(new)
        self.new = new

    def get_count(self, ):
        r"""SUMMARY

        get_count()

        @Return:

        @Error:
        """
        return self.count

    def set_count(self, count):
        r"""SUMMARY

        set_count(count)

        @Arguments:
        - `count`:

        @Return:

        @Error:
        """
        if not isinstance(count, (int, )):
            # TODO: (Atami) [2015/01/07]
            raise TypeError(count)
        self.count = count

    def __repr__(self):
        return ('{0.__class__.__name__}(new="{0.new}", count={0.count})'
                .format(self))

* Wed 07 Jan 2015 03:54:09 PM JST
    def __init__(self, dict_=None, **kwargs):
        r"""

        @Arguments:
        - `dict_`:
        - `kwargs`:
        """
        self._dict = _OrderedDict()
        if dict_ or kwargs:
            self.update(dict_, **kwargs)

    def replace(self, text):
        r"""SUMMARY

        replace(text)

        @Arguments:
        - `text`:

        @Return:

        @Error:
        """
        if not isinstance(text, str):
            # TODO: (Atami) [2014/10/25]
            raise TypeError()
        line = text
        for rx, new in self.iteritems():
            line = rx.sub(new.get_new(), line, new.get_count())
        return line

    def set(self, old, new, count=None):
        r"""SUMMARY

        set(old, new, count=None)

        @Arguments:
        - `old`:
        - `new`:
        - `count`:

        @Return:

        @Error:
        """
        if isinstance(new, (NewArguments, )):
            self[old] = new
        else:
            self[old] = (new, count)

    def __setitem__(self, key, new, prev=0, next_=1):
        if isinstance(new, (NewArguments, )):
            newarg = new
        elif isinstance(new, (str, )):
            newarg = NewArguments(new)
        elif isinstance(new, (tuple, list)) and 2 <= len(new):
            newarg = NewArguments(new[0], new[1])
        self._dict.__setitem__(re.compile(key), newarg, prev, next_)

    def __getitem__(self, key):
        return self._dict[re.compile(key)]

    def __delitem__(self, key, prev=0, next_=1):
        self._dict.__delitem__(re.compile(key))

    def update(self, dict_=None, **kwargs):
        r"""SUMMARY

        update(dict_=None, **kwargs)

        @Arguments:
        - `dict_`:
        - `kwargs`:

        @Return:

        @Error:
        """
        if isinstance(dict_, self.__class__, dict):
            for key, value in dict_.iteritems():
                self[key] = value
        else:
            # if (('key', 1), ('key2', 2)), and so on
            self.update(_OrderedDict((dict_))) # recursive call
        if len(kwargs):
            self.update(kwargs)

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:

        @Error:
        """
        self._dict.clear()

    def keys(self, ):
        r"""SUMMARY

        keys()

        @Return:

        @Error:
        """
        return self._dict.keys()

    def values(self, ):
        r"""SUMMARY

        values()

        @Return:

        @Error:
        """
        return self._dict.values()

    def items(self, ):
        r"""SUMMARY

        items()

        @Return:

        @Error:
        """
        return self._dict.items()

    def iterkeys(self, ):
        r"""SUMMARY

        iterkeys()

        @Return:

        @Error:
        """
        return self._dict.iterkeys()

    def itervalues(self, ):
        r"""SUMMARY

        itervalues()

        @Return:

        @Error:
        """
        return self._dict.itervalues()

    def iteritems(self, ):
        r"""SUMMARY

        iteritems()

        @Return:

        @Error:
        """
        return self._dict.iteritems()

    def setdefault(self, key, default, count=None):
        r"""SUMMARY

        setdefault(key, default)

        @Arguments:
        - `key`:
        - `default`:

        @Return:

        @Error:
        """
        if key in self:
            return self[key]
        self.set(key, default, count)
        return self[key]

    def __contains__(self, el):
        return re.compile(el) in self._dict

    def __repr__(self):
        return '{0.__class__.__name__}({1})'.format(
            self, [(rxp.pattern, repl) for rxp, repl in self._dict.iteritems()])

    def copy(self, ):
        r"""SUMMARY

        copy()

        @Return:

        @Error:
        """
        return self.__class__(self._dict)

    def __len__(self):
        return len(self._dict)

    def __call__(self, text):
        return self.replace(text)

* Wed 07 Jan 2015 03:55:48 PM JST
NewArguments
* Wed 07 Jan 2015 03:56:13 PM JST
ordered
* Wed 07 Jan 2015 10:58:20 PM JST
REPLACES = [(r'\{\+'   ,'{plus'         ),
            (r'\\\+'   ,'{plus}'        ),
            (r'\{\!'   ,'{exclam'       ),
            (r'\\\!'   ,'{exclam}'      ),
            (r'\{\#'   ,'{numbersign'   ),
            (r'\\\#'   ,'{numbersign}'  ),
            (r'\{\^'   ,'{asciicircum'  ),
            (r'\\\^'   ,'{asciicircum}' ),
            (r'\{\_'   ,'{underscore'   ),
            (r'\_'     ,'{underscore}'  ),
            (r'\{\}\}' ,'{bracketright}'),
            (r'\{\}\ ' ,'{bracketright '),
            (r'\{\{\}' ,'{bracketleft}' ),
            (r'\{\{\ ' ,'{bracketleft ' ),
            # ('{{'    ,'{bracketleft}' ),
            (r'\\\{'   ,'{bracketleft}' ),
            (r'\\\}'   ,'{bracketright}'),
            (r'\"'     ,'{quotedbl}'    ),
            (r'\$'     ,'{dollar}'      ),
            (r'\%'     ,'{percent}'     ),
            (r'\&'     ,'{ampersand}'   ),
            (r"\'"     ,'{apostrophe}'  ),
            (r'\`'     ,'{quoteleft}'   ),
            (r'\('     ,'{parenleft}'   ),
            (r'\)'     ,'{parenright}'  ),
            (r'\~'     ,'{asciitilde}'  ),
            (r'\|'     ,'{bar}'         ),
            (r'\='     ,'{equal}'       ),
            (r'\*'     ,'{asterisk}'    ),
            (r'\>'     ,'{less}'        ),
            (r'\<'     ,'{greater}'     ),
            (r'\?'     ,'{question}'    ),
            (r'\-'     ,'{minus}'       ),
            (r'\,'     ,'{comma}'       ),
            (r'\.'     ,'{period}'      ),
            (r'\/'     ,'{slash}'       ),
            (r'\@'     ,'{at}'          ),
            (r'\:'     ,'{colon}'       ),
            (r'\;'     ,'{semicolon}'   ),
            (r'\['     ,'{braceleft}'   ),
            (r'\]'     ,'{braceright}'  ),
            (r'\\'     ,'{backslash}'   ),
            ]

* Wed 07 Jan 2015 10:59:13 PM JST
OrderedReplace
* Wed 07 Jan 2015 11:00:18 PM JST
    
* Wed 07 Jan 2015 11:01:39 PM JST
    
* Wed 07 Jan 2015 11:04:56 PM JST
[(r'\{\+'   ,'{plus'         ),
            (r'\\\+'   ,'{plus}'        ),
            (r'\{\!'   ,'{exclam'       ),
            (r'\\\!'   ,'{exclam}'      ),
            (r'\{\#'   ,'{numbersign'   ),
            (r'\\\#'   ,'{numbersign}'  ),
            (r'\{\^'   ,'{asciicircum'  ),
            (r'\\\^'   ,'{asciicircum}' ),
            (r'\{\_'   ,'{underscore'   ),
            (r'\_'     ,'{underscore}'  ),
            (r'\{\}\}' ,'{bracketright}'),
            (r'\{\}\ ' ,'{bracketright '),
            (r'\{\{\}' ,'{bracketleft}' ),
            (r'\{\{\ ' ,'{bracketleft ' ),
            # ('{{'    ,'{bracketleft}' ),
            (r'\\\{'   ,'{bracketleft}' ),
            (r'\\\}'   ,'{bracketright}'),
            (r'\"'     ,'{quotedbl}'    ),
            (r'\$'     ,'{dollar}'      ),
            (r'\%'     ,'{percent}'     ),
            (r'\&'     ,'{ampersand}'   ),
            (r"\'"     ,'{apostrophe}'  ),
            (r'\`'     ,'{quoteleft}'   ),
            (r'\('     ,'{parenleft}'   ),
            (r'\)'     ,'{parenright}'  ),
            (r'\~'     ,'{asciitilde}'  ),
            (r'\|'     ,'{bar}'         ),
            (r'\='     ,'{equal}'       ),
            (r'\*'     ,'{asterisk}'    ),
            (r'\>'     ,'{less}'        ),
            (r'\<'     ,'{greater}'     ),
            (r'\?'     ,'{question}'    ),
            (r'\-'     ,'{minus}'       ),
            (r'\,'     ,'{comma}'       ),
            (r'\.'     ,'{period}'      ),
            (r'\/'     ,'{slash}'       ),
            (r'\@'     ,'{at}'          ),
            (r'\:'     ,'{colon}'       ),
            (r'\;'     ,'{semicolon}'   ),
            (r'\['     ,'{braceleft}'   ),
            (r'\]'     ,'{braceright}'  ),
            (r'\\'     ,'{backslash}'   ),
            ]
* Wed 07 Jan 2015 11:05:21 PM JST
REPLACES = OrderedReplace(
* Wed 07 Jan 2015 11:14:04 PM JST

* Wed 07 Jan 2015 11:14:04 PM JST

* Wed 07 Jan 2015 11:14:05 PM JST
# list for ordered

* Wed 07 Jan 2015 11:41:36 PM JST
from t1.enumutil import AutoNumber
* Wed 07 Jan 2015 11:41:59 PM JST
# '\0'
* Wed 07 Jan 2015 11:42:35 PM JST
integer
* Wed 07 Jan 2015 11:42:44 PM JST
press
* Wed 07 Jan 2015 11:44:03 PM JST
_
* Wed 07 Jan 2015 11:45:05 PM JST
        return self._value is not None

    def __contains__(self, elm):
        return elm in TokenType

    def __eq__(self, other):
        return self._tokentype == other

    def __ne__(self, other):
        return not self == other

    def __nonzero__(self):
        return self.hasvalue()

    def __repr__(self):
        return ('{0.__class__.__name__}(type={1}, value={0._value})'
                .format(self, str(self._tokentype)))

* Wed 07 Jan 2015 11:45:25 PM JST
token
* Wed 07 Jan 2015 11:45:30 PM JST
token
* Thu 08 Jan 2015 12:38:05 AM JST
self.
* Thu 08 Jan 2015 12:39:59 AM JST

* Thu 08 Jan 2015 12:39:59 AM JST

* Thu 08 Jan 2015 12:39:59 AM JST
from sendkeys2.xsendkey.replacer import REPLACER as replacer

* Thu 08 Jan 2015 12:40:10 AM JST
        
* Thu 08 Jan 2015 12:41:41 AM JST
self.
* Thu 08 Jan 2015 03:20:02 AM JST
CurlySca
* Thu 08 Jan 2015 04:08:48 AM JST
token
* Thu 08 Jan 2015 04:08:53 AM JST
words = 
* Thu 08 Jan 2015 04:11:57 AM JST
Token(TokenType.button, 'LButton')
* Thu 08 Jan 2015 04:12:03 AM JST

* Thu 08 Jan 2015 04:12:03 AM JST

* Thu 08 Jan 2015 04:12:03 AM JST
        self.tokens.append()

* Thu 08 Jan 2015 04:28:27 AM JST

* Thu 08 Jan 2015 04:28:27 AM JST

* Thu 08 Jan 2015 04:28:27 AM JST
        repeat, 

* Thu 08 Jan 2015 04:29:48 AM JST
ypoint
* Thu 08 Jan 2015 04:30:48 AM JST
            xpoint = Token(TokenType.xpoint, digits[0])
            ypoint = Token(TokenType.ypoint, digits[1])

* Thu 08 Jan 2015 04:30:52 AM JST
repeat = Token(TokenType.repeat, digits[0])
* Thu 08 Jan 2015 04:31:32 AM JST
NOne, 
* Thu 08 Jan 2015 04:39:55 AM JST

* Thu 08 Jan 2015 04:39:55 AM JST

* Thu 08 Jan 2015 04:39:55 AM JST
        button = Token(TokenType.button, 'LButton')

* Thu 08 Jan 2015 04:40:09 AM JST

* Thu 08 Jan 2015 04:40:09 AM JST

* Thu 08 Jan 2015 04:40:09 AM JST
        behave = None

* Thu 08 Jan 2015 04:41:20 AM JST

* Thu 08 Jan 2015 04:41:21 AM JST

* Thu 08 Jan 2015 04:41:21 AM JST
    ypoint = ()

* Thu 08 Jan 2015 04:41:50 AM JST

* Thu 08 Jan 2015 04:41:50 AM JST

* Thu 08 Jan 2015 04:41:50 AM JST
            ypoint = Token(TokenType.ypoint, digits[1])

* Thu 08 Jan 2015 04:41:55 AM JST
ypoint
* Thu 08 Jan 2015 04:41:56 AM JST
None
* Thu 08 Jan 2015 04:42:06 AM JST
point = Token(TokenType.point, (digits[0], digits[1]))
* Thu 08 Jan 2015 04:42:09 AM JST

* Thu 08 Jan 2015 04:42:09 AM JST

* Thu 08 Jan 2015 04:42:09 AM JST
            xpoint = Token(TokenType.xpoint, digits[0])

* Thu 08 Jan 2015 04:42:09 AM JST
            xpoint = Token(TokenType.xpoint, digits[0])

* Thu 08 Jan 2015 04:42:09 AM JST
            xpoint = Token(TokenType.xpoint, digits[0])
            ypoint = Token(TokenType.ypoint, digits[1])

* Thu 08 Jan 2015 04:42:40 AM JST
repea
* Thu 08 Jan 2015 04:46:15 AM JST
xsen
* Thu 08 Jan 2015 04:46:42 AM JST
from sendkeys2.scanner import ClickScanner
* Thu 08 Jan 2015 04:48:02 AM JST

* Thu 08 Jan 2015 04:48:02 AM JST
XSendkey
* Thu 08 Jan 2015 04:48:04 AM JST
sendkey
* Thu 08 Jan 2015 04:48:47 AM JST
replacer
* Thu 08 Jan 2015 04:48:49 AM JST
as
* Thu 08 Jan 2015 04:48:50 AM JST
REPLACER as
* Thu 08 Jan 2015 04:49:06 AM JST
from sendkeys2.scanner import ClickScanner
* Thu 08 Jan 2015 04:55:57 AM JST
as 
* Thu 08 Jan 2015 04:55:57 AM JST
xinputer as 
* Thu 08 Jan 2015 04:55:57 AM JST
xsendkey.xinputer as 
* Thu 08 Jan 2015 04:55:58 AM JST
sendkeys2.xsendkey.xinputer as 
* Thu 08 Jan 2015 04:56:04 AM JST
_
* Thu 08 Jan 2015 04:56:05 AM JST
as _
* Thu 08 Jan 2015 04:56:05 AM JST
inputdest as _
* Thu 08 Jan 2015 04:56:05 AM JST
xsendkey.inputdest as _
* Thu 08 Jan 2015 04:56:06 AM JST
sendkeys2.xsendkey.inputdest as _
* Thu 08 Jan 2015 04:57:41 AM JST
from sendkeys2.scanner import ClickScanner
ClickScanner('r 100')
c=ClickScanner('r 100')

* Thu 08 Jan 2015 04:57:52 AM JST

* Thu 08 Jan 2015 04:57:52 AM JST

* Thu 08 Jan 2015 04:57:52 AM JST
ClickScanner('r 100')

* Thu 08 Jan 2015 04:58:22 AM JST
ClickScanner('r 100')
* Thu 08 Jan 2015 05:16:27 AM JST
el
* Thu 08 Jan 2015 05:16:41 AM JST

* Thu 08 Jan 2015 05:16:41 AM JST

* Thu 08 Jan 2015 05:16:41 AM JST
            point = Token(TokenType.point, (digits[0], digits[1]))

* Thu 08 Jan 2015 05:18:32 AM JST
        if len(digits) == 3:
            repeat = Token(TokenType.repeat, digits[2])

* Thu 08 Jan 2015 05:19:52 AM JST
        self.tokens.append(button)
        if point is not None:
            self.tokens.append(point)
        if behave is not None:
            self.tokens.append(behave)
        if repeat is not None:
            self.tokens.append(repeat)

* Thu 08 Jan 2015 05:20:22 AM JST
poin
* Thu 08 Jan 2015 05:20:22 AM JST
point=poin
* Thu 08 Jan 2015 05:20:45 AM JST

* Thu 08 Jan 2015 05:20:45 AM JST

* Thu 08 Jan 2015 05:20:45 AM JST
        # set tokens

* Thu 08 Jan 2015 05:21:45 AM JST
digits)
* Thu 08 Jan 2015 05:21:45 AM JST
len(digits)
* Thu 08 Jan 2015 05:21:49 AM JST
digits)
* Thu 08 Jan 2015 05:21:49 AM JST
len(digits)
* Thu 08 Jan 2015 05:21:53 AM JST
digits)
* Thu 08 Jan 2015 05:21:53 AM JST
len(digits)
* Thu 08 Jan 2015 05:22:05 AM JST

* Thu 08 Jan 2015 05:22:05 AM JST

* Thu 08 Jan 2015 05:22:05 AM JST
        wlen

* Thu 08 Jan 2015 05:25:05 AM JST
        tokens = self.line.replace('Click', '').split()
        # dispatch digit and words
        digits, words = [], []
        for token in tokens:
            if token.isdigit():
                digits.append(int(token))
            else:
                words.append(token.lower())
        # parse digits
        if 4 <= len(digits):
            raise SyntaxError()
        repeat, point = None, None
        dlen = len(digits)
        if dlen == 1:
            repeat = Token(TokenType.repeat, digits[0])
        if dlen == 3:
            repeat = Token(TokenType.repeat, digits[2])
        if dlen in (2, 3):
            point = Token(TokenType.point, (digits[0], digits[1]))
        # parse words
        if 3 <= len(words):
            raise SyntaxError()
        button, behave = Token(TokenType.button, 'LButton'), None
        for word in words:
            if word in self._button:
                button = Token(TokenType.button, self._button.get(word))
            elif word in self._behave:
                behave = Token(TokenType.behave, self._behave.get(word))
            else:
                raise SyntaxError()

* Thu 08 Jan 2015 05:25:13 AM JST
        tokens = self.line.replace('Click', '').split()
        # dispatch digit and words
        digits, words = [], []
        for token in tokens:
            if token.isdigit():
                digits.append(int(token))
            else:
                words.append(token.lower())
        # parse digits
        if 4 <= len(digits):
            raise SyntaxError()
        repeat, point = None, None
        dlen = len(digits)
        if dlen == 1:
            repeat = Token(TokenType.repeat, digits[0])
        if dlen == 3:
            repeat = Token(TokenType.repeat, digits[2])
        if dlen in (2, 3):
            point = Token(TokenType.point, (digits[0], digits[1]))
        # parse words
        if 3 <= len(words):
            raise SyntaxError()
        button, behave = Token(TokenType.button, 'LButton'), None
        for word in words:
            if word in self._button:
                button = Token(TokenType.button, self._button.get(word))
            elif word in self._behave:
                behave = Token(TokenType.behave, self._behave.get(word))
            else:
                raise SyntaxError()
        self.set_tokens(button, point, behave, repeat)

* Thu 08 Jan 2015 05:26:29 AM JST
line
* Thu 08 Jan 2015 05:26:53 AM JST
from sendkeys2.scanner import ClickScanner
* Thu 08 Jan 2015 05:26:57 AM JST
c=ClickScanner('r 100')
* Thu 08 Jan 2015 05:27:18 AM JST

* Thu 08 Jan 2015 05:27:18 AM JST

* Thu 08 Jan 2015 05:27:18 AM JST
        self._tokenize()

* Thu 08 Jan 2015 05:27:32 AM JST
tokens
* Thu 08 Jan 2015 05:29:21 AM JST
line
* Thu 08 Jan 2015 05:34:35 AM JST
        self.tokens.append(button)
        if point is not None:
            self.tokens.append(point)
        if behave is not None:
            self.tokens.append(behave)
        if repeat is not None:
            self.tokens.append(repeat)

* Thu 08 Jan 2015 05:35:36 AM JST
None
* Thu 08 Jan 2015 05:35:40 AM JST

* Thu 08 Jan 2015 05:35:40 AM JST

* Thu 08 Jan 2015 05:35:40 AM JST
        self.set_line(line)

* Thu 08 Jan 2015 05:39:13 AM JST
from sendkeys2.scanner import ClickScanner
ClickScanner('Click r 100')

* Thu 08 Jan 2015 05:40:44 AM JST
int(
* Thu 08 Jan 2015 02:17:42 PM JST
        self.tokens = deque()
        self._line = line
        self._tokenize()

* Thu 08 Jan 2015 02:17:49 PM JST
    def __init__(self, line):
        r"""

        @Arguments:
        - `line`:
        """
        self.tokens = deque()
        self._line = line
        self._tokenize()

* Thu 08 Jan 2015 02:20:06 PM JST
mbutton
* Thu 08 Jan 2015 02:21:08 PM JST
    _behave = {'down': 'press',
               'up': 'release',
               'd': 'press',
               'u': 'release',
               }

* Thu 08 Jan 2015 02:21:40 PM JST
pass
* Thu 08 Jan 2015 02:21:48 PM JST
replace
* Thu 08 Jan 2015 02:22:30 PM JST
        for token in tokens:
            if token.isdigit():
                digits.append(token)
            else:
                words.append(token.lower())

* Thu 08 Jan 2015 02:22:33 PM JST

* Thu 08 Jan 2015 02:22:33 PM JST

* Thu 08 Jan 2015 02:22:33 PM JST
        for token in tokens:

* Thu 08 Jan 2015 02:24:58 PM JST
digits)
* Thu 08 Jan 2015 02:24:58 PM JST
len(digits)
* Thu 08 Jan 2015 02:25:13 PM JST
repeat = Token(TokenType.repeat, digits[0])
* Thu 08 Jan 2015 02:25:23 PM JST
        if dlen == 3:
            repeat = Token(TokenType.repeat, digits[2])
        if dlen in (2, 3):
            point = Token(TokenType.point, (digits[0], digits[1]))

* Thu 08 Jan 2015 02:25:38 PM JST
# parse digits
* Thu 08 Jan 2015 02:25:59 PM JST
        # parse words
        if 3 <= len(words):
            raise SyntaxError()
        button, behave = Token(TokenType.button, 'LButton'), None
        for word in words:
            if word in self._button:
                button = Token(TokenType.button, self._button.get(word))
            elif word in self._behave:
                behave = Token(TokenType.behave, self._behave.get(word))
            else:
                raise SyntaxError()

* Thu 08 Jan 2015 02:28:42 PM JST
        self.tokens.append(button)
        if point is not None:
            self.tokens.append(point)
        if behave is not None:
            self.tokens.append(behave)
        if repeat is not None:
            self.tokens.append(repeat)

* Thu 08 Jan 2015 02:29:06 PM JST
    def set_line(self, line):
        r"""SUMMARY

        set_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.tokens.clear()
        self._line = line
        self._tokenize()

    def get_line(self, ):
        r"""SUMMARY

        get_line()

        @Return:

        @Error:
        """
        return self._line

    line = property(get_line, set_line)

    def get_tokens(self, ):
        r"""SUMMARY

        get_tokens()

        @Return:

        @Error:
        """
        return self.tokens

    def __repr__(self):
        return ('{0.__class__.__name__}(line="{0.line}", tokens={1})'
                .format(self, list(self.tokens)))

* Thu 08 Jan 2015 04:02:58 PM JST

* Thu 08 Jan 2015 04:02:58 PM JST

* Thu 08 Jan 2015 04:02:58 PM JST
from collections import deque

* Thu 08 Jan 2015 04:04:25 PM JST
    def __init__(self, line):
        r"""

        @Arguments:
        - `line`:
        """
        self.tokens = deque()
        self._line = line
        self._tokenize()


* Thu 08 Jan 2015 04:04:40 PM JST
tokens = self._line.split()
* Thu 08 Jan 2015 04:09:55 PM JST
        digits, words = [], []
        for token in tokens:
            if token.isdigit():
                digits.append(token)
            else:
                words.append(token.lower())

* Thu 08 Jan 2015 04:10:25 PM JST
digi
* Thu 08 Jan 2015 04:10:43 PM JST
digi
* Thu 08 Jan 2015 04:10:43 PM JST
digi        if :

* Thu 08 Jan 2015 04:12:22 PM JST
# parse digits
* Thu 08 Jan 2015 04:15:36 PM JST

* Thu 08 Jan 2015 04:15:36 PM JST

* Thu 08 Jan 2015 04:15:36 PM JST
        if :

* Thu 08 Jan 2015 04:15:39 PM JST
        if behave is not None:
            self.tokens.append(behave)
        if repeat is not None:
            self.tokens.append(repeat)

* Thu 08 Jan 2015 04:15:58 PM JST
    def set_line(self, line):
        r"""SUMMARY

        set_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.tokens.clear()
        self._line = line
        self._tokenize()

    def get_line(self, ):
        r"""SUMMARY

        get_line()

        @Return:

        @Error:
        """
        return self._line

    line = property(get_line, set_line)

    def get_tokens(self, ):
        r"""SUMMARY

        get_tokens()

        @Return:

        @Error:
        """
        return self.tokens

    def __repr__(self):
        return ('{0.__class__.__name__}(line="{0.line}", tokens={1})'
                .format(self, list(self.tokens)))

* Thu 08 Jan 2015 04:16:31 PM JST
from sendkeys2.xsendkey.replacer import REPLACER as replacer
* Thu 08 Jan 2015 04:16:44 PM JST

* Thu 08 Jan 2015 04:16:44 PM JST

* Thu 08 Jan 2015 04:16:45 PM JST
import os as _os

* Thu 08 Jan 2015 04:17:15 PM JST
from sendkeys2.scanner import ClickScanner
* Thu 08 Jan 2015 04:17:17 PM JST
Click
* Thu 08 Jan 2015 04:17:23 PM JST
KeyScanner
* Thu 08 Jan 2015 04:19:00 PM JST
Token(TokenType.repeat, digits[2])
* Thu 08 Jan 2015 04:19:03 PM JST
digits[0]
* Thu 08 Jan 2015 04:20:19 PM JST
    
* Thu 08 Jan 2015 04:20:21 PM JST
space
* Thu 08 Jan 2015 04:23:27 PM JST
100
* Thu 08 Jan 2015 04:23:29 PM JST
100
* Thu 08 Jan 2015 04:23:34 PM JST
KeyScanner('space down')
* Thu 08 Jan 2015 04:23:39 PM JST
down
* Thu 08 Jan 2015 04:23:47 PM JST
KeyScanner('space up')
* Thu 08 Jan 2015 06:09:01 PM JST

* Thu 08 Jan 2015 06:09:01 PM JST

* Thu 08 Jan 2015 06:09:01 PM JST
        self._line = line

* Thu 08 Jan 2015 06:09:01 PM JST
        self._line = line

* Thu 08 Jan 2015 06:09:01 PM JST
        self._line = line
        self.tokens = deque()

* Thu 08 Jan 2015 06:09:21 PM JST
extend(
* Thu 08 Jan 2015 06:09:22 PM JST
tokens.extend(
* Thu 08 Jan 2015 06:09:22 PM JST
self.tokens.extend(
* Thu 08 Jan 2015 06:09:25 PM JST
_
* Thu 08 Jan 2015 06:09:26 PM JST
self._
* Thu 08 Jan 2015 06:09:35 PM JST
_
* Thu 08 Jan 2015 06:09:35 PM JST
self._
* Thu 08 Jan 2015 06:10:37 PM JST
'lbutton'
* Thu 08 Jan 2015 06:10:44 PM JST
'rbutton'
* Thu 08 Jan 2015 06:10:48 PM JST
 'mbutton'
* Thu 08 Jan 2015 06:10:52 PM JST
'wheelup'
* Thu 08 Jan 2015 06:10:58 PM JST
'wheeldown'
* Thu 08 Jan 2015 06:11:03 PM JST
'lclick'
* Thu 08 Jan 2015 06:11:07 PM JST
'rclick'
* Thu 08 Jan 2015 06:11:12 PM JST
'mclick'
* Thu 08 Jan 2015 06:11:17 PM JST
'wup'
* Thu 08 Jan 2015 06:11:21 PM JST
'wdown'
* Thu 08 Jan 2015 06:11:25 PM JST
'lbutton','rbutton', 'mbutton','wheelup','wheeldown','lclick','rclick','mclick','wup','wdown'
* Thu 08 Jan 2015 06:13:02 PM JST
get_line
* Thu 08 Jan 2015 06:13:22 PM JST
from sendkeys2.scanner import KeyScanner
KeyScanner('k 100')

* Thu 08 Jan 2015 06:13:32 PM JST
from sendkeys2.scanner import KeyScanner
* Thu 08 Jan 2015 06:13:33 PM JST
KeyScanner
* Thu 08 Jan 2015 06:14:26 PM JST
RClick
* Thu 08 Jan 2015 06:15:58 PM JST
SYM
* Thu 08 Jan 2015 07:12:17 PM JST
curlys
* Thu 08 Jan 2015 07:17:43 PM JST
from sendkeys2.scanner import SubScanner
* Thu 08 Jan 2015 07:17:50 PM JST
from sendkeys2.scanner import Scanner
* Thu 08 Jan 2015 07:20:39 PM JST
            elif char == '}':
                print('DEBUG-1-scanner.py')
                self.tokens.extend(SubScanner(substr).get_tokens())
                incurlys = False
                substr = ''

* Thu 08 Jan 2015 07:21:34 PM JST
extend()
* Thu 08 Jan 2015 07:23:33 PM JST
char
* Thu 08 Jan 2015 07:23:48 PM JST

* Thu 08 Jan 2015 07:23:48 PM JST

* Thu 08 Jan 2015 07:23:48 PM JST
                print('DEBUG-1-scanner.py')

* Thu 08 Jan 2015 07:23:50 PM JST

* Thu 08 Jan 2015 07:23:50 PM JST

* Thu 08 Jan 2015 07:23:50 PM JST
            print(char)

* Thu 08 Jan 2015 07:52:32 PM JST
    def __repr__(self):
        return ('{0.__class__.__name__}(line="{0.line}", tokens={1})'
                .format(self, list(self.tokens)))

* Thu 08 Jan 2015 07:52:45 PM JST
get_tokens()
* Thu 08 Jan 2015 09:24:08 PM JST
ReLaunchSleipnir
* Thu 08 Jan 2015 09:25:00 PM JST
ReLaunchSleipnir()
* Thu 08 Jan 2015 09:25:05 PM JST
WaitCloseWeatherMap()
* Thu 08 Jan 2015 09:25:15 PM JST

* Thu 08 Jan 2015 09:25:15 PM JST

* Thu 08 Jan 2015 09:25:15 PM JST
        self._tasks.extend([WeatherMap(), WaitCloseWeatherMap()])

* Thu 08 Jan 2015 09:26:46 PM JST
        
* Thu 08 Jan 2015 09:26:47 PM JST
WeatherMap()
* Fri 09 Jan 2015 12:35:29 AM JST
xsendkey/
* Fri 09 Jan 2015 12:36:45 AM JST
xsendkey
* Fri 09 Jan 2015 12:36:49 AM JST
xsendkey.
* Fri 09 Jan 2015 12:37:16 AM JST
import
* Fri 09 Jan 2015 12:37:18 AM JST
Keycode
* Fri 09 Jan 2015 12:37:24 AM JST
import
* Fri 09 Jan 2015 12:40:55 AM JST
xsendkey.
* Fri 09 Jan 2015 12:41:19 AM JST
REPLACER
* Fri 09 Jan 2015 12:41:20 AM JST
import REPLACER
* Fri 09 Jan 2015 12:41:37 AM JST
import sendkeys2.replacer.REPLACER
* Fri 09 Jan 2015 12:42:58 AM JST
import
* Fri 09 Jan 2015 12:43:03 AM JST
 TokenType, Token
* Fri 09 Jan 2015 12:44:49 AM JST
REPLACER
* Fri 09 Jan 2015 12:45:50 AM JST
sendkeys2
* Fri 09 Jan 2015 12:46:32 AM JST
sendkeys2
* Fri 09 Jan 2015 12:47:27 AM JST

* Fri 09 Jan 2015 12:47:27 AM JST

* Fri 09 Jan 2015 12:47:27 AM JST
import inputdest

* Fri 09 Jan 2015 12:47:27 AM JST
import inputdest

* Fri 09 Jan 2015 12:47:27 AM JST
import inputdest
import pieces

* Fri 09 Jan 2015 12:47:35 AM JST
xsendkey.
* Fri 09 Jan 2015 12:47:37 AM JST
xsendkey.
* Fri 09 Jan 2015 12:51:21 AM JST

* Fri 09 Jan 2015 12:51:21 AM JST

* Fri 09 Jan 2015 12:51:21 AM JST
import sendkeys2.inputdest as inputdest

* Fri 09 Jan 2015 01:03:54 AM JST
value
* Fri 09 Jan 2015 01:07:57 AM JST
capitalize?
* Fri 09 Jan 2015 01:08:28 AM JST
None
* Fri 09 Jan 2015 01:10:55 AM JST
else:
* Fri 09 Jan 2015 01:12:47 AM JST
name
* Fri 09 Jan 2015 01:14:37 AM JST
_value
* Fri 09 Jan 2015 01:17:33 AM JST

* Fri 09 Jan 2015 01:17:33 AM JST

* Fri 09 Jan 2015 01:17:34 AM JST

* Fri 09 Jan 2015 01:17:35 AM JST

* Fri 09 Jan 2015 01:17:35 AM JST

* Fri 09 Jan 2015 01:17:35 AM JST
        super(, self).()

* Fri 09 Jan 2015 01:19:38 AM JST
    def __ne__(self, other):
        return not self == other


* Fri 09 Jan 2015 01:20:44 AM JST
other
* Fri 09 Jan 2015 01:34:00 AM JST
    def isunicode(self, ):
        r"""SUMMARY

        isunicode()

        @Return:

        @Error:
        """
        return (0x01000100 <= self <= 0x0110ffff)

* Fri 09 Jan 2015 01:35:43 AM JST
LEGACY
* Fri 09 Jan 2015 01:37:02 AM JST
legacy_keysyms = {
    0x01A1: 0x0104,
    0x01A2: 0x02D8,
    0x01A3: 0x0141,
    0x01A5: 0x013D,
    0x01A6: 0x015A,
    0x01A9: 0x0160,
    0x01AA: 0x015E,
    0x01AB: 0x0164,
    0x01AC: 0x0179,
    0x01AE: 0x017D,
    0x01AF: 0x017B,
    0x01B1: 0x0105,
    0x01B2: 0x02DB,
    0x01B3: 0x0142,
    0x01B5: 0x013E,
    0x01B6: 0x015B,
    0x01B7: 0x02C7,
    0x01B9: 0x0161,
    0x01BA: 0x015F,
    0x01BB: 0x0165,
    0x01BC: 0x017A,
    0x01BD: 0x02DD,
    0x01BE: 0x017E,
    0x01BF: 0x017C,
    0x01C0: 0x0154,
    0x01C3: 0x0102,
    0x01C5: 0x0139,
    0x01C6: 0x0106,
    0x01C8: 0x010C,
    0x01CA: 0x0118,
    0x01CC: 0x011A,
    0x01CF: 0x010E,
    0x01D0: 0x0110,
    0x01D1: 0x0143,
    0x01D2: 0x0147,
    0x01D5: 0x0150,
    0x01D8: 0x0158,
    0x01D9: 0x016E,
    0x01DB: 0x0170,
    0x01DE: 0x0162,
    0x01E0: 0x0155,
    0x01E3: 0x0103,
    0x01E5: 0x013A,
    0x01E6: 0x0107,
    0x01E8: 0x010D,
    0x01EA: 0x0119,
    0x01EC: 0x011B,
    0x01EF: 0x010F,
    0x01F0: 0x0111,
    0x01F1: 0x0144,
    0x01F2: 0x0148,
    0x01F5: 0x0151,
    0x01F8: 0x0159,
    0x01F9: 0x016F,
    0x01FB: 0x0171,
    0x01FE: 0x0163,
    0x01FF: 0x02D9,
    0x02A1: 0x0126,
    0x02A6: 0x0124,
    0x02A9: 0x0130,
    0x02AB: 0x011E,
    0x02AC: 0x0134,
    0x02B1: 0x0127,
    0x02B6: 0x0125,
    0x02B9: 0x0131,
    0x02BB: 0x011F,
    0x02BC: 0x0135,
    0x02C5: 0x010A,
    0x02C6: 0x0108,
    0x02D5: 0x0120,
    0x02D8: 0x011C,
    0x02DD: 0x016C,
    0x02DE: 0x015C,
    0x02E5: 0x010B,
    0x02E6: 0x0109,
    0x02F5: 0x0121,
    0x02F8: 0x011D,
    0x02FD: 0x016D,
    0x02FE: 0x015D,
    0x03A2: 0x0138,
    0x03A3: 0x0156,
    0x03A5: 0x0128,
    0x03A6: 0x013B,
    0x03AA: 0x0112,
    0x03AB: 0x0122,
    0x03AC: 0x0166,
    0x03B3: 0x0157,
    0x03B5: 0x0129,
    0x03B6: 0x013C,
    0x03BA: 0x0113,
    0x03BB: 0x0123,
    0x03BC: 0x0167,
    0x03BD: 0x014A,
    0x03BF: 0x014B,
    0x03C0: 0x0100,
    0x03C7: 0x012E,
    0x03CC: 0x0116,
    0x03CF: 0x012A,
    0x03D1: 0x0145,
    0x03D2: 0x014C,
    0x03D3: 0x0136,
    0x03D9: 0x0172,
    0x03DD: 0x0168,
    0x03DE: 0x016A,
    0x03E0: 0x0101,
    0x03E7: 0x012F,
    0x03EC: 0x0117,
    0x03EF: 0x012B,
    0x03F1: 0x0146,
    0x03F2: 0x014D,
    0x03F3: 0x0137,
    0x03F9: 0x0173,
    0x03FD: 0x0169,
    0x03FE: 0x016B,
    0x047E: 0x203E,
    0x04A1: 0x3002,
    0x04A2: 0x300C,
    0x04A3: 0x300D,
    0x04A4: 0x3001,
    0x04A5: 0x30FB,
    0x04A6: 0x30F2,
    0x04A7: 0x30A1,
    0x04A8: 0x30A3,
    0x04A9: 0x30A5,
    0x04AA: 0x30A7,
    0x04AB: 0x30A9,
    0x04AC: 0x30E3,
    0x04AD: 0x30E5,
    0x04AE: 0x30E7,
    0x04AF: 0x30C3,
    0x04B0: 0x30FC,
    0x04B1: 0x30A2,
    0x04B2: 0x30A4,
    0x04B3: 0x30A6,
    0x04B4: 0x30A8,
    0x04B5: 0x30AA,
    0x04B6: 0x30AB,
    0x04B7: 0x30AD,
    0x04B8: 0x30AF,
    0x04B9: 0x30B1,
    0x04BA: 0x30B3,
    0x04BB: 0x30B5,
    0x04BC: 0x30B7,
    0x04BD: 0x30B9,
    0x04BE: 0x30BB,
    0x04BF: 0x30BD,
    0x04C0: 0x30BF,
    0x04C1: 0x30C1,
    0x04C2: 0x30C4,
    0x04C3: 0x30C6,
    0x04C4: 0x30C8,
    0x04C5: 0x30CA,
    0x04C6: 0x30CB,
    0x04C7: 0x30CC,
    0x04C8: 0x30CD,
    0x04C9: 0x30CE,
    0x04CA: 0x30CF,
    0x04CB: 0x30D2,
    0x04CC: 0x30D5,
    0x04CD: 0x30D8,
    0x04CE: 0x30DB,
    0x04CF: 0x30DE,
    0x04D0: 0x30DF,
    0x04D1: 0x30E0,
    0x04D2: 0x30E1,
    0x04D3: 0x30E2,
    0x04D4: 0x30E4,
    0x04D5: 0x30E6,
    0x04D6: 0x30E8,
    0x04D7: 0x30E9,
    0x04D8: 0x30EA,
    0x04D9: 0x30EB,
    0x04DA: 0x30EC,
    0x04DB: 0x30ED,
    0x04DC: 0x30EF,
    0x04DD: 0x30F3,
    0x04DE: 0x309B,
    0x04DF: 0x309C,
    0x05AC: 0x060C,
    0x05BB: 0x061B,
    0x05BF: 0x061F,
    0x05C1: 0x0621,
    0x05C2: 0x0622,
    0x05C3: 0x0623,
    0x05C4: 0x0624,
    0x05C5: 0x0625,
    0x05C6: 0x0626,
    0x05C7: 0x0627,
    0x05C8: 0x0628,
    0x05C9: 0x0629,
    0x05CA: 0x062A,
    0x05CB: 0x062B,
    0x05CC: 0x062C,
    0x05CD: 0x062D,
    0x05CE: 0x062E,
    0x05CF: 0x062F,
    0x05D0: 0x0630,
    0x05D1: 0x0631,
    0x05D2: 0x0632,
    0x05D3: 0x0633,
    0x05D4: 0x0634,
    0x05D5: 0x0635,
    0x05D6: 0x0636,
    0x05D7: 0x0637,
    0x05D8: 0x0638,
    0x05D9: 0x0639,
    0x05DA: 0x063A,
    0x05E0: 0x0640,
    0x05E1: 0x0641,
    0x05E2: 0x0642,
    0x05E3: 0x0643,
    0x05E4: 0x0644,
    0x05E5: 0x0645,
    0x05E6: 0x0646,
    0x05E7: 0x0647,
    0x05E8: 0x0648,
    0x05E9: 0x0649,
    0x05EA: 0x064A,
    0x05EB: 0x064B,
    0x05EC: 0x064C,
    0x05ED: 0x064D,
    0x05EE: 0x064E,
    0x05EF: 0x064F,
    0x05F0: 0x0650,
    0x05F1: 0x0651,
    0x05F2: 0x0652,
    0x06A1: 0x0452,
    0x06A2: 0x0453,
    0x06A3: 0x0451,
    0x06A4: 0x0454,
    0x06A5: 0x0455,
    0x06A6: 0x0456,
    0x06A7: 0x0457,
    0x06A8: 0x0458,
    0x06A9: 0x0459,
    0x06AA: 0x045A,
    0x06AB: 0x045B,
    0x06AC: 0x045C,
    0x06AD: 0x0491,
    0x06AE: 0x045E,
    0x06AF: 0x045F,
    0x06B0: 0x2116,
    0x06B1: 0x0402,
    0x06B2: 0x0403,
    0x06B3: 0x0401,
    0x06B4: 0x0404,
    0x06B5: 0x0405,
    0x06B6: 0x0406,
    0x06B7: 0x0407,
    0x06B8: 0x0408,
    0x06B9: 0x0409,
    0x06BA: 0x040A,
    0x06BB: 0x040B,
    0x06BC: 0x040C,
    0x06BD: 0x0490,
    0x06BE: 0x040E,
    0x06BF: 0x040F,
    0x06C0: 0x044E,
    0x06C1: 0x0430,
    0x06C2: 0x0431,
    0x06C3: 0x0446,
    0x06C4: 0x0434,
    0x06C5: 0x0435,
    0x06C6: 0x0444,
    0x06C7: 0x0433,
    0x06C8: 0x0445,
    0x06C9: 0x0438,
    0x06CA: 0x0439,
    0x06CB: 0x043A,
    0x06CC: 0x043B,
    0x06CD: 0x043C,
    0x06CE: 0x043D,
    0x06CF: 0x043E,
    0x06D0: 0x043F,
    0x06D1: 0x044F,
    0x06D2: 0x0440,
    0x06D3: 0x0441,
    0x06D4: 0x0442,
    0x06D5: 0x0443,
    0x06D6: 0x0436,
    0x06D7: 0x0432,
    0x06D8: 0x044C,
    0x06D9: 0x044B,
    0x06DA: 0x0437,
    0x06DB: 0x0448,
    0x06DC: 0x044D,
    0x06DD: 0x0449,
    0x06DE: 0x0447,
    0x06DF: 0x044A,
    0x06E0: 0x042E,
    0x06E1: 0x0410,
    0x06E2: 0x0411,
    0x06E3: 0x0426,
    0x06E4: 0x0414,
    0x06E5: 0x0415,
    0x06E6: 0x0424,
    0x06E7: 0x0413,
    0x06E8: 0x0425,
    0x06E9: 0x0418,
    0x06EA: 0x0419,
    0x06EB: 0x041A,
    0x06EC: 0x041B,
    0x06ED: 0x041C,
    0x06EE: 0x041D,
    0x06EF: 0x041E,
    0x06F0: 0x041F,
    0x06F1: 0x042F,
    0x06F2: 0x0420,
    0x06F3: 0x0421,
    0x06F4: 0x0422,
    0x06F5: 0x0423,
    0x06F6: 0x0416,
    0x06F7: 0x0412,
    0x06F8: 0x042C,
    0x06F9: 0x042B,
    0x06FA: 0x0417,
    0x06FB: 0x0428,
    0x06FC: 0x042D,
    0x06FD: 0x0429,
    0x06FE: 0x0427,
    0x06FF: 0x042A,
    0x07A1: 0x0386,
    0x07A2: 0x0388,
    0x07A3: 0x0389,
    0x07A4: 0x038A,
    0x07A5: 0x03AA,
    0x07A7: 0x038C,
    0x07A8: 0x038E,
    0x07A9: 0x03AB,
    0x07AB: 0x038F,
    0x07AE: 0x0385,
    0x07AF: 0x2015,
    0x07B1: 0x03AC,
    0x07B2: 0x03AD,
    0x07B3: 0x03AE,
    0x07B4: 0x03AF,
    0x07B5: 0x03CA,
    0x07B6: 0x0390,
    0x07B7: 0x03CC,
    0x07B8: 0x03CD,
    0x07B9: 0x03CB,
    0x07BA: 0x03B0,
    0x07BB: 0x03CE,
    0x07C1: 0x0391,
    0x07C2: 0x0392,
    0x07C3: 0x0393,
    0x07C4: 0x0394,
    0x07C5: 0x0395,
    0x07C6: 0x0396,
    0x07C7: 0x0397,
    0x07C8: 0x0398,
    0x07C9: 0x0399,
    0x07CA: 0x039A,
    0x07CB: 0x039B,
    0x07CC: 0x039C,
    0x07CD: 0x039D,
    0x07CE: 0x039E,
    0x07CF: 0x039F,
    0x07D0: 0x03A0,
    0x07D1: 0x03A1,
    0x07D2: 0x03A3,
    0x07D4: 0x03A4,
    0x07D5: 0x03A5,
    0x07D6: 0x03A6,
    0x07D7: 0x03A7,
    0x07D8: 0x03A8,
    0x07D9: 0x03A9,
    0x07E1: 0x03B1,
    0x07E2: 0x03B2,
    0x07E3: 0x03B3,
    0x07E4: 0x03B4,
    0x07E5: 0x03B5,
    0x07E6: 0x03B6,
    0x07E7: 0x03B7,
    0x07E8: 0x03B8,
    0x07E9: 0x03B9,
    0x07EA: 0x03BA,
    0x07EB: 0x03BB,
    0x07EC: 0x03BC,
    0x07ED: 0x03BD,
    0x07EE: 0x03BE,
    0x07EF: 0x03BF,
    0x07F0: 0x03C0,
    0x07F1: 0x03C1,
    0x07F2: 0x03C3,
    0x07F3: 0x03C2,
    0x07F4: 0x03C4,
    0x07F5: 0x03C5,
    0x07F6: 0x03C6,
    0x07F7: 0x03C7,
    0x07F8: 0x03C8,
    0x07F9: 0x03C9,
    0x08A1: 0x23B7,
    0x08A4: 0x2320,
    0x08A5: 0x2321,
    0x08A7: 0x23A1,
    0x08A8: 0x23A3,
    0x08A9: 0x23A4,
    0x08AA: 0x23A6,
    0x08AB: 0x239B,
    0x08AC: 0x239D,
    0x08AD: 0x239E,
    0x08AE: 0x23A0,
    0x08AF: 0x23A8,
    0x08B0: 0x23AC,
    0x08BC: 0x2264,
    0x08BD: 0x2260,
    0x08BE: 0x2265,
    0x08BF: 0x222B,
    0x08C0: 0x2234,
    0x08C1: 0x221D,
    0x08C2: 0x221E,
    0x08C5: 0x2207,
    0x08C8: 0x223C,
    0x08C9: 0x2243,
    0x08CD: 0x21D4,
    0x08CE: 0x21D2,
    0x08CF: 0x2261,
    0x08D6: 0x221A,
    0x08DA: 0x2282,
    0x08DB: 0x2283,
    0x08DC: 0x2229,
    0x08DD: 0x222A,
    0x08DE: 0x2227,
    0x08DF: 0x2228,
    0x08EF: 0x2202,
    0x08F6: 0x0192,
    0x08FB: 0x2190,
    0x08FC: 0x2191,
    0x08FD: 0x2192,
    0x08FE: 0x2193,
    0x09E0: 0x25C6,
    0x09E1: 0x2592,
    0x09E2: 0x2409,
    0x09E3: 0x240C,
    0x09E4: 0x240D,
    0x09E5: 0x240A,
    0x09E8: 0x2424,
    0x09E9: 0x240B,
    0x09EA: 0x2518,
    0x09EB: 0x2510,
    0x09EC: 0x250C,
    0x09ED: 0x2514,
    0x09EE: 0x253C,
    0x09EF: 0x23BA,
    0x09F0: 0x23BB,
    0x09F1: 0x2500,
    0x09F2: 0x23BC,
    0x09F3: 0x23BD,
    0x09F4: 0x251C,
    0x09F5: 0x2524,
    0x09F6: 0x2534,
    0x09F7: 0x252C,
    0x09F8: 0x2502,
    0x0AA1: 0x2003,
    0x0AA2: 0x2002,
    0x0AA3: 0x2004,
    0x0AA4: 0x2005,
    0x0AA5: 0x2007,
    0x0AA6: 0x2008,
    0x0AA7: 0x2009,
    0x0AA8: 0x200A,
    0x0AA9: 0x2014,
    0x0AAA: 0x2013,
    0x0AAE: 0x2026,
    0x0AAF: 0x2025,
    0x0AB0: 0x2153,
    0x0AB1: 0x2154,
    0x0AB2: 0x2155,
    0x0AB3: 0x2156,
    0x0AB4: 0x2157,
    0x0AB5: 0x2158,
    0x0AB6: 0x2159,
    0x0AB7: 0x215A,
    0x0AB8: 0x2105,
    0x0ABB: 0x2012,
    0x0AC3: 0x215B,
    0x0AC4: 0x215C,
    0x0AC5: 0x215D,
    0x0AC6: 0x215E,
    0x0AC9: 0x2122,
    0x0AD0: 0x2018,
    0x0AD1: 0x2019,
    0x0AD2: 0x201C,
    0x0AD3: 0x201D,
    0x0AD4: 0x211E,
    0x0AD6: 0x2032,
    0x0AD7: 0x2033,
    0x0AD9: 0x271D,
    0x0AEC: 0x2663,
    0x0AED: 0x2666,
    0x0AEE: 0x2665,
    0x0AF0: 0x2720,
    0x0AF1: 0x2020,
    0x0AF2: 0x2021,
    0x0AF3: 0x2713,
    0x0AF4: 0x2717,
    0x0AF5: 0x266F,
    0x0AF6: 0x266D,
    0x0AF7: 0x2642,
    0x0AF8: 0x2640,
    0x0AF9: 0x260E,
    0x0AFA: 0x2315,
    0x0AFB: 0x2117,
    0x0AFC: 0x2038,
    0x0AFD: 0x201A,
    0x0AFE: 0x201E,
    0x0BC2: 0x22A5,
    0x0BC4: 0x230A,
    0x0BCA: 0x2218,
    0x0BCC: 0x2395,
    0x0BCE: 0x22A4,
    0x0BCF: 0x25CB,
    0x0BD3: 0x2308,
    0x0BDC: 0x22A2,
    0x0BFC: 0x22A3,
    0x0CDF: 0x2017,
    0x0CE0: 0x05D0,
    0x0CE1: 0x05D1,
    0x0CE2: 0x05D2,
    0x0CE3: 0x05D3,
    0x0CE4: 0x05D4,
    0x0CE5: 0x05D5,
    0x0CE6: 0x05D6,
    0x0CE7: 0x05D7,
    0x0CE8: 0x05D8,
    0x0CE9: 0x05D9,
    0x0CEA: 0x05DA,
    0x0CEB: 0x05DB,
    0x0CEC: 0x05DC,
    0x0CED: 0x05DD,
    0x0CEE: 0x05DE,
    0x0CEF: 0x05DF,
    0x0CF0: 0x05E0,
    0x0CF1: 0x05E1,
    0x0CF2: 0x05E2,
    0x0CF3: 0x05E3,
    0x0CF4: 0x05E4,
    0x0CF5: 0x05E5,
    0x0CF6: 0x05E6,
    0x0CF7: 0x05E7,
    0x0CF8: 0x05E8,
    0x0CF9: 0x05E9,
    0x0CFA: 0x05EA,
    0x0DA1: 0x0E01,
    0x0DA2: 0x0E02,
    0x0DA3: 0x0E03,
    0x0DA4: 0x0E04,
    0x0DA5: 0x0E05,
    0x0DA6: 0x0E06,
    0x0DA7: 0x0E07,
    0x0DA8: 0x0E08,
    0x0DA9: 0x0E09,
    0x0DAA: 0x0E0A,
    0x0DAB: 0x0E0B,
    0x0DAC: 0x0E0C,
    0x0DAD: 0x0E0D,
    0x0DAE: 0x0E0E,
    0x0DAF: 0x0E0F,
    0x0DB0: 0x0E10,
    0x0DB1: 0x0E11,
    0x0DB2: 0x0E12,
    0x0DB3: 0x0E13,
    0x0DB4: 0x0E14,
    0x0DB5: 0x0E15,
    0x0DB6: 0x0E16,
    0x0DB7: 0x0E17,
    0x0DB8: 0x0E18,
    0x0DB9: 0x0E19,
    0x0DBA: 0x0E1A,
    0x0DBB: 0x0E1B,
    0x0DBC: 0x0E1C,
    0x0DBD: 0x0E1D,
    0x0DBE: 0x0E1E,
    0x0DBF: 0x0E1F,
    0x0DC0: 0x0E20,
    0x0DC1: 0x0E21,
    0x0DC2: 0x0E22,
    0x0DC3: 0x0E23,
    0x0DC4: 0x0E24,
    0x0DC5: 0x0E25,
    0x0DC6: 0x0E26,
    0x0DC7: 0x0E27,
    0x0DC8: 0x0E28,
    0x0DC9: 0x0E29,
    0x0DCA: 0x0E2A,
    0x0DCB: 0x0E2B,
    0x0DCC: 0x0E2C,
    0x0DCD: 0x0E2D,
    0x0DCE: 0x0E2E,
    0x0DCF: 0x0E2F,
    0x0DD0: 0x0E30,
    0x0DD1: 0x0E31,
    0x0DD2: 0x0E32,
    0x0DD3: 0x0E33,
    0x0DD4: 0x0E34,
    0x0DD5: 0x0E35,
    0x0DD6: 0x0E36,
    0x0DD7: 0x0E37,
    0x0DD8: 0x0E38,
    0x0DD9: 0x0E39,
    0x0DDA: 0x0E3A,
    0x0DDF: 0x0E3F,
    0x0DE0: 0x0E40,
    0x0DE1: 0x0E41,
    0x0DE2: 0x0E42,
    0x0DE3: 0x0E43,
    0x0DE4: 0x0E44,
    0x0DE5: 0x0E45,
    0x0DE6: 0x0E46,
    0x0DE7: 0x0E47,
    0x0DE8: 0x0E48,
    0x0DE9: 0x0E49,
    0x0DEA: 0x0E4A,
    0x0DEB: 0x0E4B,
    0x0DEC: 0x0E4C,
    0x0DED: 0x0E4D,
    0x0DF0: 0x0E50,
    0x0DF1: 0x0E51,
    0x0DF2: 0x0E52,
    0x0DF3: 0x0E53,
    0x0DF4: 0x0E54,
    0x0DF5: 0x0E55,
    0x0DF6: 0x0E56,
    0x0DF7: 0x0E57,
    0x0DF8: 0x0E58,
    0x0DF9: 0x0E59,
    0x13BC: 0x0152,
    0x13BD: 0x0153,
    0x13BE: 0x0178,
    0x20AC: 0x20AC,
}

* Fri 09 Jan 2015 01:40:52 AM JST
self
* Fri 09 Jan 2015 01:41:02 AM JST
0x01000000
* Fri 09 Jan 2015 01:41:43 AM JST
# nothing
* Fri 09 Jan 2015 01:41:48 AM JST
# entrust to converter object
* Fri 09 Jan 2015 02:01:42 AM JST
lines[1].replace('XK_', '')
* Fri 09 Jan 2015 02:01:50 AM JST
int(lines[2], 16)
* Fri 09 Jan 2015 02:01:54 AM JST
defines
* Fri 09 Jan 2015 02:07:27 AM JST
path
* Fri 09 Jan 2015 02:07:34 AM JST
'/usr/include/X11/keysymdef.h'
* Fri 09 Jan 2015 02:08:43 AM JST
defregex = re.compile('^#define')
* Fri 09 Jan 2015 02:10:34 AM JST

* Fri 09 Jan 2015 02:10:34 AM JST

* Fri 09 Jan 2015 02:10:34 AM JST
from path import Path

* Fri 09 Jan 2015 02:11:55 AM JST
defregex
* Fri 09 Jan 2015 02:13:00 AM JST
defines
* Fri 09 Jan 2015 02:13:14 AM JST

* Fri 09 Jan 2015 02:13:14 AM JST

* Fri 09 Jan 2015 02:13:14 AM JST
                defines.append(line)

* Fri 09 Jan 2015 02:13:57 AM JST
int(lines[2], 16)
* Fri 09 Jan 2015 02:14:07 AM JST
key
* Fri 09 Jan 2015 02:14:10 AM JST
key
* Fri 09 Jan 2015 02:14:17 AM JST
def
* Fri 09 Jan 2015 02:15:26 AM JST
import re as _re
* Fri 09 Jan 2015 02:15:32 AM JST

* Fri 09 Jan 2015 02:15:32 AM JST

* Fri 09 Jan 2015 02:15:32 AM JST
import re as _re

* Fri 09 Jan 2015 02:18:11 AM JST
sendkeys/
* Fri 09 Jan 2015 02:18:59 AM JST
{
    'space': 0x20,
    'exclam': 0x21,
    'quotedbl': 0x22,
    'numbersign': 0x23,
    'dollar': 0x24,
    'percent': 0x25,
    'ampersand': 0x26,
    'apostrophe': 0x27,
    'parenleft': 0x28,
    'parenright': 0x29,
    'asterisk': 0x2a,
    'plus': 0x2b,
    'comma': 0x2c,
    'minus': 0x2d,
    'period': 0x2e,
    'slash': 0x2f,
    '0': 0x30,
    '1': 0x31,
    '2': 0x32,
    '3': 0x33,
    '4': 0x34,
    '5': 0x35,
    '6': 0x36,
    '7': 0x37,
    '8': 0x38,
    '9': 0x39,
    'colon': 0x3a,
    'semicolon': 0x3b,
    'less': 0x3c,
    'equal': 0x3d,
    'greater': 0x3e,
    'question': 0x3f,
    'at': 0x40,
    'A': 0x41,
    'B': 0x42,
    'C': 0x43,
    'D': 0x44,
    'E': 0x45,
    'F': 0x46,
    'G': 0x47,
    'H': 0x48,
    'I': 0x49,
    'J': 0x4a,
    'K': 0x4b,
    'L': 0x4c,
    'M': 0x4d,
    'N': 0x4e,
    'O': 0x4f,
    'P': 0x50,
    'Q': 0x51,
    'R': 0x52,
    'S': 0x53,
    'T': 0x54,
    'U': 0x55,
    'V': 0x56,
    'W': 0x57,
    'X': 0x58,
    'Y': 0x59,
    'Z': 0x5a,
    'bracketleft': 0x5b,
    'backslash': 0x5c,
    'bracketright': 0x5d,
    'asciicircum': 0x5e,
    'underscore': 0x5f,
    'quoteleft': 0x60,
    'a': 0x61,
    'b': 0x62,
    'c': 0x63,
    'd': 0x64,
    'e': 0x65,
    'f': 0x66,
    'g': 0x67,
    'h': 0x68,
    'i': 0x69,
    'j': 0x6a,
    'k': 0x6b,
    'l': 0x6c,
    'm': 0x6d,
    'n': 0x6e,
    'o': 0x6f,
    'p': 0x70,
    'q': 0x71,
    'r': 0x72,
    's': 0x73,
    't': 0x74,
    'u': 0x75,
    'v': 0x76,
    'w': 0x77,
    'x': 0x78,
    'y': 0x79,
    'z': 0x7a,
    'braceleft': 0x7b,
    'bar': 0x7c,
    'braceright': 0x7d,
    'asciitilde': 0x7e,
    'nobreakspace': 0xa0,
    'exclamdown': 0xa1,
    'cent': 0xa2,
    'sterling': 0xa3,
    'currency': 0xa4,
    'yen': 0xa5,
    'brokenbar': 0xa6,
    'section': 0xa7,
    'diaeresis': 0xa8,
    'copyright': 0xa9,
    'ordfeminine': 0xaa,
    'guillemotleft': 0xab,
    'notsign': 0xac,
    'hyphen': 0xad,
    'registered': 0xae,
    'macron': 0xaf,
    'degree': 0xb0,
    'plusminus': 0xb1,
    'twosuperior': 0xb2,
    'threesuperior': 0xb3,
    'acute': 0xb4,
    'mu': 0xb5,
    'paragraph': 0xb6,
    'periodcentered': 0xb7,
    'cedilla': 0xb8,
    'onesuperior': 0xb9,
    'masculine': 0xba,
    'guillemotright': 0xbb,
    'onequarter': 0xbc,
    'onehalf': 0xbd,
    'threequarters': 0xbe,
    'questiondown': 0xbf,
    'Agrave': 0xc0,
    'Aacute': 0xc1,
    'Acircumflex': 0xc2,
    'Atilde': 0xc3,
    'Adiaeresis': 0xc4,
    'Aring': 0xc5,
    'AE': 0xc6,
    'Ccedilla': 0xc7,
    'Egrave': 0xc8,
    'Eacute': 0xc9,
    'Ecircumflex': 0xca,
    'Ediaeresis': 0xcb,
    'Igrave': 0xcc,
    'Iacute': 0xcd,
    'Icircumflex': 0xce,
    'Idiaeresis': 0xcf,
    'Eth': 0xd0,
    'Ntilde': 0xd1,
    'Ograve': 0xd2,
    'Oacute': 0xd3,
    'Ocircumflex': 0xd4,
    'Otilde': 0xd5,
    'Odiaeresis': 0xd6,
    'multiply': 0xd7,
    'Oslash': 0xd8,
    'Ugrave': 0xd9,
    'Uacute': 0xda,
    'Ucircumflex': 0xdb,
    'Udiaeresis': 0xdc,
    'Yacute': 0xdd,
    'Thorn': 0xde,
    'ssharp': 0xdf,
    'agrave': 0xe0,
    'aacute': 0xe1,
    'acircumflex': 0xe2,
    'atilde': 0xe3,
    'adiaeresis': 0xe4,
    'aring': 0xe5,
    'ae': 0xe6,
    'ccedilla': 0xe7,
    'egrave': 0xe8,
    'eacute': 0xe9,
    'ecircumflex': 0xea,
    'ediaeresis': 0xeb,
    'igrave': 0xec,
    'iacute': 0xed,
    'icircumflex': 0xee,
    'idiaeresis': 0xef,
    'eth': 0xf0,
    'ntilde': 0xf1,
    'ograve': 0xf2,
    'oacute': 0xf3,
    'ocircumflex': 0xf4,
    'otilde': 0xf5,
    'odiaeresis': 0xf6,
    'division': 0xf7,
    'ooblique': 0xf8,
    'ugrave': 0xf9,
    'uacute': 0xfa,
    'ucircumflex': 0xfb,
    'udiaeresis': 0xfc,
    'yacute': 0xfd,
    'thorn': 0xfe,
    'ydiaeresis': 0xff,
    'Aogonek': 0x1a1,
    'breve': 0x1a2,
    'Lstroke': 0x1a3,
    'Lcaron': 0x1a5,
    'Sacute': 0x1a6,
    'Scaron': 0x1a9,
    'Scedilla': 0x1aa,
    'Tcaron': 0x1ab,
    'Zacute': 0x1ac,
    'Zcaron': 0x1ae,
    'Zabovedot': 0x1af,
    'aogonek': 0x1b1,
    'ogonek': 0x1b2,
    'lstroke': 0x1b3,
    'lcaron': 0x1b5,
    'sacute': 0x1b6,
    'caron': 0x1b7,
    'scaron': 0x1b9,
    'scedilla': 0x1ba,
    'tcaron': 0x1bb,
    'zacute': 0x1bc,
    'doubleacute': 0x1bd,
    'zcaron': 0x1be,
    'zabovedot': 0x1bf,
    'Racute': 0x1c0,
    'Abreve': 0x1c3,
    'Lacute': 0x1c5,
    'Cacute': 0x1c6,
    'Ccaron': 0x1c8,
    'Eogonek': 0x1ca,
    'Ecaron': 0x1cc,
    'Dcaron': 0x1cf,
    'Dstroke': 0x1d0,
    'Nacute': 0x1d1,
    'Ncaron': 0x1d2,
    'Odoubleacute': 0x1d5,
    'Rcaron': 0x1d8,
    'Uring': 0x1d9,
    'Udoubleacute': 0x1db,
    'Tcedilla': 0x1de,
    'racute': 0x1e0,
    'abreve': 0x1e3,
    'lacute': 0x1e5,
    'cacute': 0x1e6,
    'ccaron': 0x1e8,
    'eogonek': 0x1ea,
    'ecaron': 0x1ec,
    'dcaron': 0x1ef,
    'dstroke': 0x1f0,
    'nacute': 0x1f1,
    'ncaron': 0x1f2,
    'odoubleacute': 0x1f5,
    'rcaron': 0x1f8,
    'uring': 0x1f9,
    'udoubleacute': 0x1fb,
    'tcedilla': 0x1fe,
    'abovedot': 0x1ff,
    'Hstroke': 0x2a1,
    'Hcircumflex': 0x2a6,
    'Iabovedot': 0x2a9,
    'Gbreve': 0x2ab,
    'Jcircumflex': 0x2ac,
    'hstroke': 0x2b1,
    'hcircumflex': 0x2b6,
    'idotless': 0x2b9,
    'gbreve': 0x2bb,
    'jcircumflex': 0x2bc,
    'Cabovedot': 0x2c5,
    'Ccircumflex': 0x2c6,
    'Gabovedot': 0x2d5,
    'Gcircumflex': 0x2d8,
    'Ubreve': 0x2dd,
    'Scircumflex': 0x2de,
    'cabovedot': 0x2e5,
    'ccircumflex': 0x2e6,
    'gabovedot': 0x2f5,
    'gcircumflex': 0x2f8,
    'ubreve': 0x2fd,
    'scircumflex': 0x2fe,
    'kra': 0x3a2,
    'Rcedilla': 0x3a3,
    'Itilde': 0x3a5,
    'Lcedilla': 0x3a6,
    'Emacron': 0x3aa,
    'Gcedilla': 0x3ab,
    'Tslash': 0x3ac,
    'rcedilla': 0x3b3,
    'itilde': 0x3b5,
    'lcedilla': 0x3b6,
    'emacron': 0x3ba,
    'gcedilla': 0x3bb,
    'tslash': 0x3bc,
    'ENG': 0x3bd,
    'eng': 0x3bf,
    'Amacron': 0x3c0,
    'Iogonek': 0x3c7,
    'Eabovedot': 0x3cc,
    'Imacron': 0x3cf,
    'Ncedilla': 0x3d1,
    'Omacron': 0x3d2,
    'Kcedilla': 0x3d3,
    'Uogonek': 0x3d9,
    'Utilde': 0x3dd,
    'Umacron': 0x3de,
    'amacron': 0x3e0,
    'iogonek': 0x3e7,
    'eabovedot': 0x3ec,
    'imacron': 0x3ef,
    'ncedilla': 0x3f1,
    'omacron': 0x3f2,
    'kcedilla': 0x3f3,
    'uogonek': 0x3f9,
    'utilde': 0x3fd,
    'umacron': 0x3fe,
    'overline': 0x47e,
    'kana_fullstop': 0x4a1,
    'kana_openingbracket': 0x4a2,
    'kana_closingbracket': 0x4a3,
    'kana_comma': 0x4a4,
    'kana_conjunctive': 0x4a5,
    'kana_WO': 0x4a6,
    'kana_a': 0x4a7,
    'kana_i': 0x4a8,
    'kana_u': 0x4a9,
    'kana_e': 0x4aa,
    'kana_o': 0x4ab,
    'kana_ya': 0x4ac,
    'kana_yu': 0x4ad,
    'kana_yo': 0x4ae,
    'kana_tsu': 0x4af,
    'prolongedsound': 0x4b0,
    'kana_A': 0x4b1,
    'kana_I': 0x4b2,
    'kana_U': 0x4b3,
    'kana_E': 0x4b4,
    'kana_O': 0x4b5,
    'kana_KA': 0x4b6,
    'kana_KI': 0x4b7,
    'kana_KU': 0x4b8,
    'kana_KE': 0x4b9,
    'kana_KO': 0x4ba,
    'kana_SA': 0x4bb,
    'kana_SHI': 0x4bc,
    'kana_SU': 0x4bd,
    'kana_SE': 0x4be,
    'kana_SO': 0x4bf,
    'kana_TA': 0x4c0,
    'kana_TI': 0x4c1,
    'kana_TSU': 0x4c2,
    'kana_TE': 0x4c3,
    'kana_TO': 0x4c4,
    'kana_NA': 0x4c5,
    'kana_NI': 0x4c6,
    'kana_NU': 0x4c7,
    'kana_NE': 0x4c8,
    'kana_NO': 0x4c9,
    'kana_HA': 0x4ca,
    'kana_HI': 0x4cb,
    'kana_HU': 0x4cc,
    'kana_HE': 0x4cd,
    'kana_HO': 0x4ce,
    'kana_MA': 0x4cf,
    'kana_MI': 0x4d0,
    'kana_MU': 0x4d1,
    'kana_ME': 0x4d2,
    'kana_MO': 0x4d3,
    'kana_YA': 0x4d4,
    'kana_YU': 0x4d5,
    'kana_YO': 0x4d6,
    'kana_RA': 0x4d7,
    'kana_RI': 0x4d8,
    'kana_RU': 0x4d9,
    'kana_RE': 0x4da,
    'kana_RO': 0x4db,
    'kana_WA': 0x4dc,
    'kana_N': 0x4dd,
    'voicedsound': 0x4de,
    'semivoicedsound': 0x4df,
    'Arabic_comma': 0x5ac,
    'Arabic_semicolon': 0x5bb,
    'Arabic_question_mark': 0x5bf,
    'Arabic_hamza': 0x5c1,
    'Arabic_maddaonalef': 0x5c2,
    'Arabic_hamzaonalef': 0x5c3,
    'Arabic_hamzaonwaw': 0x5c4,
    'Arabic_hamzaunderalef': 0x5c5,
    'Arabic_hamzaonyeh': 0x5c6,
    'Arabic_alef': 0x5c7,
    'Arabic_beh': 0x5c8,
    'Arabic_tehmarbuta': 0x5c9,
    'Arabic_teh': 0x5ca,
    'Arabic_theh': 0x5cb,
    'Arabic_jeem': 0x5cc,
    'Arabic_hah': 0x5cd,
    'Arabic_khah': 0x5ce,
    'Arabic_dal': 0x5cf,
    'Arabic_thal': 0x5d0,
    'Arabic_ra': 0x5d1,
    'Arabic_zain': 0x5d2,
    'Arabic_seen': 0x5d3,
    'Arabic_sheen': 0x5d4,
    'Arabic_sad': 0x5d5,
    'Arabic_dad': 0x5d6,
    'Arabic_tah': 0x5d7,
    'Arabic_zah': 0x5d8,
    'Arabic_ain': 0x5d9,
    'Arabic_ghain': 0x5da,
    'Arabic_tatweel': 0x5e0,
    'Arabic_feh': 0x5e1,
    'Arabic_qaf': 0x5e2,
    'Arabic_kaf': 0x5e3,
    'Arabic_lam': 0x5e4,
    'Arabic_meem': 0x5e5,
    'Arabic_noon': 0x5e6,
    'Arabic_ha': 0x5e7,
    'Arabic_waw': 0x5e8,
    'Arabic_alefmaksura': 0x5e9,
    'Arabic_yeh': 0x5ea,
    'Arabic_fathatan': 0x5eb,
    'Arabic_dammatan': 0x5ec,
    'Arabic_kasratan': 0x5ed,
    'Arabic_fatha': 0x5ee,
    'Arabic_damma': 0x5ef,
    'Arabic_kasra': 0x5f0,
    'Arabic_shadda': 0x5f1,
    'Arabic_sukun': 0x5f2,
    'Serbian_dje': 0x6a1,
    'Macedonia_gje': 0x6a2,
    'Cyrillic_io': 0x6a3,
    'Ukranian_je': 0x6a4,
    'Macedonia_dse': 0x6a5,
    'Ukranian_i': 0x6a6,
    'Ukranian_yi': 0x6a7,
    'Cyrillic_je': 0x6a8,
    'Serbian_lje': 0x6a9,
    'Serbian_nje': 0x6aa,
    'Serbian_tshe': 0x6ab,
    'Macedonia_kje': 0x6ac,
    'Ukrainian_ghe_with_upturn': 0x6ad,
    'Byelorussian_shortu': 0x6ae,
    'Cyrillic_dzhe': 0x6af,
    'numerosign': 0x6b0,
    'Serbian_DJE': 0x6b1,
    'Macedonia_GJE': 0x6b2,
    'Cyrillic_IO': 0x6b3,
    'Ukranian_JE': 0x6b4,
    'Macedonia_DSE': 0x6b5,
    'Ukranian_I': 0x6b6,
    'Ukrainian_YI': 0x6b7,
    'Serbian_JE': 0x6b8,
    'Cyrillic_LJE': 0x6b9,
    'Serbian_NJE': 0x6ba,
    'Serbian_TSHE': 0x6bb,
    'Macedonia_KJE': 0x6bc,
    'Ukrainian_GHE_WITH_UPTURN': 0x6bd,
    'Byelorussian_SHORTU': 0x6be,
    'Serbian_DZE': 0x6bf,
    'Cyrillic_yu': 0x6c0,
    'Cyrillic_a': 0x6c1,
    'Cyrillic_be': 0x6c2,
    'Cyrillic_tse': 0x6c3,
    'Cyrillic_de': 0x6c4,
    'Cyrillic_ie': 0x6c5,
    'Cyrillic_ef': 0x6c6,
    'Cyrillic_ghe': 0x6c7,
    'Cyrillic_ha': 0x6c8,
    'Cyrillic_i': 0x6c9,
    'Cyrillic_shorti': 0x6ca,
    'Cyrillic_ka': 0x6cb,
    'Cyrillic_el': 0x6cc,
    'Cyrillic_em': 0x6cd,
    'Cyrillic_en': 0x6ce,
    'Cyrillic_o': 0x6cf,
    'Cyrillic_pe': 0x6d0,
    'Cyrillic_ya': 0x6d1,
    'Cyrillic_er': 0x6d2,
    'Cyrillic_es': 0x6d3,
    'Cyrillic_te': 0x6d4,
    'Cyrillic_u': 0x6d5,
    'Cyrillic_zhe': 0x6d6,
    'Cyrillic_ve': 0x6d7,
    'Cyrillic_softsign': 0x6d8,
    'Cyrillic_yeru': 0x6d9,
    'Cyrillic_ze': 0x6da,
    'Cyrillic_sha': 0x6db,
    'Cyrillic_e': 0x6dc,
    'Cyrillic_shcha': 0x6dd,
    'Cyrillic_che': 0x6de,
    'Cyrillic_hardsign': 0x6df,
    'Cyrillic_YU': 0x6e0,
    'Cyrillic_A': 0x6e1,
    'Cyrillic_BE': 0x6e2,
    'Cyrillic_TSE': 0x6e3,
    'Cyrillic_DE': 0x6e4,
    'Cyrillic_IE': 0x6e5,
    'Cyrillic_EF': 0x6e6,
    'Cyrillic_GHE': 0x6e7,
    'Cyrillic_HA': 0x6e8,
    'Cyrillic_I': 0x6e9,
    'Cyrillic_SHORTI': 0x6ea,
    'Cyrillic_KA': 0x6eb,
    'Cyrillic_EL': 0x6ec,
    'Cyrillic_EM': 0x6ed,
    'Cyrillic_EN': 0x6ee,
    'Cyrillic_O': 0x6ef,
    'Cyrillic_PE': 0x6f0,
    'Cyrillic_YA': 0x6f1,
    'Cyrillic_ER': 0x6f2,
    'Cyrillic_ES': 0x6f3,
    'Cyrillic_TE': 0x6f4,
    'Cyrillic_U': 0x6f5,
    'Cyrillic_ZHE': 0x6f6,
    'Cyrillic_VE': 0x6f7,
    'Cyrillic_SOFTSIGN': 0x6f8,
    'Cyrillic_YERU': 0x6f9,
    'Cyrillic_ZE': 0x6fa,
    'Cyrillic_SHA': 0x6fb,
    'Cyrillic_E': 0x6fc,
    'Cyrillic_SHCHA': 0x6fd,
    'Cyrillic_CHE': 0x6fe,
    'Cyrillic_HARDSIGN': 0x6ff,
    'Greek_ALPHAaccent': 0x7a1,
    'Greek_EPSILONaccent': 0x7a2,
    'Greek_ETAaccent': 0x7a3,
    'Greek_IOTAaccent': 0x7a4,
    'Greek_IOTAdiaeresis': 0x7a5,
    'Greek_OMICRONaccent': 0x7a7,
    'Greek_UPSILONaccent': 0x7a8,
    'Greek_UPSILONdieresis': 0x7a9,
    'Greek_OMEGAaccent': 0x7ab,
    'Greek_accentdieresis': 0x7ae,
    'Greek_horizbar': 0x7af,
    'Greek_alphaaccent': 0x7b1,
    'Greek_epsilonaccent': 0x7b2,
    'Greek_etaaccent': 0x7b3,
    'Greek_iotaaccent': 0x7b4,
    'Greek_iotadieresis': 0x7b5,
    'Greek_iotaaccentdieresis': 0x7b6,
    'Greek_omicronaccent': 0x7b7,
    'Greek_upsilonaccent': 0x7b8,
    'Greek_upsilondieresis': 0x7b9,
    'Greek_upsilonaccentdieresis': 0x7ba,
    'Greek_omegaaccent': 0x7bb,
    'Greek_ALPHA': 0x7c1,
    'Greek_BETA': 0x7c2,
    'Greek_GAMMA': 0x7c3,
    'Greek_DELTA': 0x7c4,
    'Greek_EPSILON': 0x7c5,
    'Greek_ZETA': 0x7c6,
    'Greek_ETA': 0x7c7,
    'Greek_THETA': 0x7c8,
    'Greek_IOTA': 0x7c9,
    'Greek_KAPPA': 0x7ca,
    'Greek_LAMBDA': 0x7cb,
    'Greek_MU': 0x7cc,
    'Greek_NU': 0x7cd,
    'Greek_XI': 0x7ce,
    'Greek_OMICRON': 0x7cf,
    'Greek_PI': 0x7d0,
    'Greek_RHO': 0x7d1,
    'Greek_SIGMA': 0x7d2,
    'Greek_TAU': 0x7d4,
    'Greek_UPSILON': 0x7d5,
    'Greek_PHI': 0x7d6,
    'Greek_CHI': 0x7d7,
    'Greek_PSI': 0x7d8,
    'Greek_OMEGA': 0x7d9,
    'Greek_alpha': 0x7e1,
    'Greek_beta': 0x7e2,
    'Greek_gamma': 0x7e3,
    'Greek_delta': 0x7e4,
    'Greek_epsilon': 0x7e5,
    'Greek_zeta': 0x7e6,
    'Greek_eta': 0x7e7,
    'Greek_theta': 0x7e8,
    'Greek_iota': 0x7e9,
    'Greek_kappa': 0x7ea,
    'Greek_lamda': 0x7eb,
    'Greek_mu': 0x7ec,
    'Greek_nu': 0x7ed,
    'Greek_xi': 0x7ee,
    'Greek_omicron': 0x7ef,
    'Greek_pi': 0x7f0,
    'Greek_rho': 0x7f1,
    'Greek_sigma': 0x7f2,
    'Greek_finalsmallsigma': 0x7f3,
    'Greek_tau': 0x7f4,
    'Greek_upsilon': 0x7f5,
    'Greek_phi': 0x7f6,
    'Greek_chi': 0x7f7,
    'Greek_psi': 0x7f8,
    'Greek_omega': 0x7f9,
    'leftradical': 0x8a1,
    'topleftradical': 0x8a2,
    'horizconnector': 0x8a3,
    'topintegral': 0x8a4,
    'botintegral': 0x8a5,
    'vertconnector': 0x8a6,
    'topleftsqbracket': 0x8a7,
    'botleftsqbracket': 0x8a8,
    'toprightsqbracket': 0x8a9,
    'botrightsqbracket': 0x8aa,
    'topleftparens': 0x8ab,
    'botleftparens': 0x8ac,
    'toprightparens': 0x8ad,
    'botrightparens': 0x8ae,
    'leftmiddlecurlybrace': 0x8af,
    'rightmiddlecurlybrace': 0x8b0,
    'topleftsummation': 0x8b1,
    'botleftsummation': 0x8b2,
    'topvertsummationconnector': 0x8b3,
    'botvertsummationconnector': 0x8b4,
    'toprightsummation': 0x8b5,
    'botrightsummation': 0x8b6,
    'rightmiddlesummation': 0x8b7,
    'lessthanequal': 0x8bc,
    'notequal': 0x8bd,
    'greaterthanequal': 0x8be,
    'integral': 0x8bf,
    'therefore': 0x8c0,
    'variation': 0x8c1,
    'infinity': 0x8c2,
    'nabla': 0x8c5,
    'approximate': 0x8c8,
    'similarequal': 0x8c9,
    'ifonlyif': 0x8cd,
    'implies': 0x8ce,
    'identical': 0x8cf,
    'radical': 0x8d6,
    'includedin': 0x8da,
    'includes': 0x8db,
    'intersection': 0x8dc,
    'union': 0x8dd,
    'logicaland': 0x8de,
    'logicalor': 0x8df,
    'partialderivative': 0x8ef,
    'function': 0x8f6,
    'leftarrow': 0x8fb,
    'uparrow': 0x8fc,
    'rightarrow': 0x8fd,
    'downarrow': 0x8fe,
    'blank': 0x9df,
    'soliddiamond': 0x9e0,
    'checkerboard': 0x9e1,
    'ht': 0x9e2,
    'ff': 0x9e3,
    'cr': 0x9e4,
    'lf': 0x9e5,
    'nl': 0x9e8,
    'vt': 0x9e9,
    'lowrightcorner': 0x9ea,
    'uprightcorner': 0x9eb,
    'upleftcorner': 0x9ec,
    'lowleftcorner': 0x9ed,
    'crossinglines': 0x9ee,
    'horizlinescan1': 0x9ef,
    'horizlinescan3': 0x9f0,
    'horizlinescan5': 0x9f1,
    'horizlinescan7': 0x9f2,
    'horizlinescan9': 0x9f3,
    'leftt': 0x9f4,
    'rightt': 0x9f5,
    'bott': 0x9f6,
    'topt': 0x9f7,
    'vertbar': 0x9f8,
    'emspace': 0xaa1,
    'enspace': 0xaa2,
    'em3space': 0xaa3,
    'em4space': 0xaa4,
    'digitspace': 0xaa5,
    'punctspace': 0xaa6,
    'thinspace': 0xaa7,
    'hairspace': 0xaa8,
    'emdash': 0xaa9,
    'endash': 0xaaa,
    'signifblank': 0xaac,
    'ellipsis': 0xaae,
    'doubbaselinedot': 0xaaf,
    'onethird': 0xab0,
    'twothirds': 0xab1,
    'onefifth': 0xab2,
    'twofifths': 0xab3,
    'threefifths': 0xab4,
    'fourfifths': 0xab5,
    'onesixth': 0xab6,
    'fivesixths': 0xab7,
    'careof': 0xab8,
    'figdash': 0xabb,
    'leftanglebracket': 0xabc,
    'decimalpoint': 0xabd,
    'rightanglebracket': 0xabe,
    'marker': 0xabf,
    'oneeighth': 0xac3,
    'threeeighths': 0xac4,
    'fiveeighths': 0xac5,
    'seveneighths': 0xac6,
    'trademark': 0xac9,
    'signaturemark': 0xaca,
    'trademarkincircle': 0xacb,
    'leftopentriangle': 0xacc,
    'rightopentriangle': 0xacd,
    'emopencircle': 0xace,
    'emopenrectangle': 0xacf,
    'leftsinglequotemark': 0xad0,
    'rightsinglequotemark': 0xad1,
    'leftdoublequotemark': 0xad2,
    'rightdoublequotemark': 0xad3,
    'prescription': 0xad4,
    'permille': 0xad5,
    'minutes': 0xad6,
    'seconds': 0xad7,
    'latincross': 0xad9,
    'hexagram': 0xada,
    'filledrectbullet': 0xadb,
    'filledlefttribullet': 0xadc,
    'filledrighttribullet': 0xadd,
    'emfilledcircle': 0xade,
    'emfilledrect': 0xadf,
    'enopencircbullet': 0xae0,
    'enopensquarebullet': 0xae1,
    'openrectbullet': 0xae2,
    'opentribulletup': 0xae3,
    'opentribulletdown': 0xae4,
    'openstar': 0xae5,
    'enfilledcircbullet': 0xae6,
    'enfilledsqbullet': 0xae7,
    'filledtribulletup': 0xae8,
    'filledtribulletdown': 0xae9,
    'leftpointer': 0xaea,
    'rightpointer': 0xaeb,
    'club': 0xaec,
    'diamond': 0xaed,
    'heart': 0xaee,
    'maltesecross': 0xaf0,
    'dagger': 0xaf1,
    'doubledagger': 0xaf2,
    'checkmark': 0xaf3,
    'ballotcross': 0xaf4,
    'musicalsharp': 0xaf5,
    'musicalflat': 0xaf6,
    'malesymbol': 0xaf7,
    'femalesymbol': 0xaf8,
    'telephone': 0xaf9,
    'telephonerecorder': 0xafa,
    'phonographcopyright': 0xafb,
    'caret': 0xafc,
    'singlelowquotemark': 0xafd,
    'doublelowquotemark': 0xafe,
    'cursor': 0xaff,
    'leftcaret': 0xba3,
    'rightcaret': 0xba6,
    'downcaret': 0xba8,
    'upcaret': 0xba9,
    'overbar': 0xbc0,
    'downtack': 0xbc2,
    'upshoe': 0xbc3,
    'downstile': 0xbc4,
    'underbar': 0xbc6,
    'jot': 0xbca,
    'quad': 0xbcc,
    'uptack': 0xbce,
    'circle': 0xbcf,
    'upstile': 0xbd3,
    'downshoe': 0xbd6,
    'rightshoe': 0xbd8,
    'leftshoe': 0xbda,
    'lefttack': 0xbdc,
    'righttack': 0xbfc,
    'hebrew_doublelowline': 0xcdf,
    'hebrew_aleph': 0xce0,
    'hebrew_bet': 0xce1,
    'hebrew_gimel': 0xce2,
    'hebrew_daleth': 0xce3,
    'hebrew_he': 0xce4,
    'hebrew_waw': 0xce5,
    'hebrew_zayin': 0xce6,
    'hebrew_chet': 0xce7,
    'hebrew_tet': 0xce8,
    'hebrew_yod': 0xce9,
    'hebrew_finalkaph': 0xcea,
    'hebrew_kaph': 0xceb,
    'hebrew_lamed': 0xcec,
    'hebrew_finalmem': 0xced,
    'hebrew_mem': 0xcee,
    'hebrew_finalnun': 0xcef,
    'hebrew_nun': 0xcf0,
    'hebrew_samech': 0xcf1,
    'hebrew_ayin': 0xcf2,
    'hebrew_finalpe': 0xcf3,
    'hebrew_pe': 0xcf4,
    'hebrew_finalzadi': 0xcf5,
    'hebrew_zadi': 0xcf6,
    'hebrew_kuf': 0xcf7,
    'hebrew_resh': 0xcf8,
    'hebrew_shin': 0xcf9,
    'hebrew_taf': 0xcfa,
    'Thai_kokai': 0xda1,
    'Thai_khokhai': 0xda2,
    'Thai_khokhuat': 0xda3,
    'Thai_khokhwai': 0xda4,
    'Thai_khokhon': 0xda5,
    'Thai_khorakhang': 0xda6,
    'Thai_ngongu': 0xda7,
    'Thai_chochan': 0xda8,
    'Thai_choching': 0xda9,
    'Thai_chochang': 0xdaa,
    'Thai_soso': 0xdab,
    'Thai_chochoe': 0xdac,
    'Thai_yoying': 0xdad,
    'Thai_dochada': 0xdae,
    'Thai_topatak': 0xdaf,
    'Thai_thothan': 0xdb0,
    'Thai_thonangmontho': 0xdb1,
    'Thai_thophuthao': 0xdb2,
    'Thai_nonen': 0xdb3,
    'Thai_dodek': 0xdb4,
    'Thai_totao': 0xdb5,
    'Thai_thothung': 0xdb6,
    'Thai_thothahan': 0xdb7,
    'Thai_thothong': 0xdb8,
    'Thai_nonu': 0xdb9,
    'Thai_bobaimai': 0xdba,
    'Thai_popla': 0xdbb,
    'Thai_phophung': 0xdbc,
    'Thai_fofa': 0xdbd,
    'Thai_phophan': 0xdbe,
    'Thai_fofan': 0xdbf,
    'Thai_phosamphao': 0xdc0,
    'Thai_moma': 0xdc1,
    'Thai_yoyak': 0xdc2,
    'Thai_rorua': 0xdc3,
    'Thai_ru': 0xdc4,
    'Thai_loling': 0xdc5,
    'Thai_lu': 0xdc6,
    'Thai_wowaen': 0xdc7,
    'Thai_sosala': 0xdc8,
    'Thai_sorusi': 0xdc9,
    'Thai_sosua': 0xdca,
    'Thai_hohip': 0xdcb,
    'Thai_lochula': 0xdcc,
    'Thai_oang': 0xdcd,
    'Thai_honokhuk': 0xdce,
    'Thai_paiyannoi': 0xdcf,
    'Thai_saraa': 0xdd0,
    'Thai_maihanakat': 0xdd1,
    'Thai_saraaa': 0xdd2,
    'Thai_saraam': 0xdd3,
    'Thai_sarai': 0xdd4,
    'Thai_saraii': 0xdd5,
    'Thai_saraue': 0xdd6,
    'Thai_sarauee': 0xdd7,
    'Thai_sarau': 0xdd8,
    'Thai_sarauu': 0xdd9,
    'Thai_phinthu': 0xdda,
    'Thai_maihanakat_maitho': 0xdde,
    'Thai_baht': 0xddf,
    'Thai_sarae': 0xde0,
    'Thai_saraae': 0xde1,
    'Thai_sarao': 0xde2,
    'Thai_saraaimaimuan': 0xde3,
    'Thai_saraaimaimalai': 0xde4,
    'Thai_lakkhangyao': 0xde5,
    'Thai_maiyamok': 0xde6,
    'Thai_maitaikhu': 0xde7,
    'Thai_maiek': 0xde8,
    'Thai_maitho': 0xde9,
    'Thai_maitri': 0xdea,
    'Thai_maichattawa': 0xdeb,
    'Thai_thanthakhat': 0xdec,
    'Thai_nikhahit': 0xded,
    'Thai_leksun': 0xdf0,
    'Thai_leknung': 0xdf1,
    'Thai_leksong': 0xdf2,
    'Thai_leksam': 0xdf3,
    'Thai_leksi': 0xdf4,
    'Thai_lekha': 0xdf5,
    'Thai_lekhok': 0xdf6,
    'Thai_lekchet': 0xdf7,
    'Thai_lekpaet': 0xdf8,
    'Thai_lekkao': 0xdf9,
    'Hangul_Kiyeog': 0xea1,
    'Hangul_SsangKiyeog': 0xea2,
    'Hangul_KiyeogSios': 0xea3,
    'Hangul_Nieun': 0xea4,
    'Hangul_NieunJieuj': 0xea5,
    'Hangul_NieunHieuh': 0xea6,
    'Hangul_Dikeud': 0xea7,
    'Hangul_SsangDikeud': 0xea8,
    'Hangul_Rieul': 0xea9,
    'Hangul_RieulKiyeog': 0xeaa,
    'Hangul_RieulMieum': 0xeab,
    'Hangul_RieulPieub': 0xeac,
    'Hangul_RieulSios': 0xead,
    'Hangul_RieulTieut': 0xeae,
    'Hangul_RieulPhieuf': 0xeaf,
    'Hangul_RieulHieuh': 0xeb0,
    'Hangul_Mieum': 0xeb1,
    'Hangul_Pieub': 0xeb2,
    'Hangul_SsangPieub': 0xeb3,
    'Hangul_PieubSios': 0xeb4,
    'Hangul_Sios': 0xeb5,
    'Hangul_SsangSios': 0xeb6,
    'Hangul_Ieung': 0xeb7,
    'Hangul_Jieuj': 0xeb8,
    'Hangul_SsangJieuj': 0xeb9,
    'Hangul_Cieuc': 0xeba,
    'Hangul_Khieuq': 0xebb,
    'Hangul_Tieut': 0xebc,
    'Hangul_Phieuf': 0xebd,
    'Hangul_Hieuh': 0xebe,
    'Hangul_A': 0xebf,
    'Hangul_AE': 0xec0,
    'Hangul_YA': 0xec1,
    'Hangul_YAE': 0xec2,
    'Hangul_EO': 0xec3,
    'Hangul_E': 0xec4,
    'Hangul_YEO': 0xec5,
    'Hangul_YE': 0xec6,
    'Hangul_O': 0xec7,
    'Hangul_WA': 0xec8,
    'Hangul_WAE': 0xec9,
    'Hangul_OE': 0xeca,
    'Hangul_YO': 0xecb,
    'Hangul_U': 0xecc,
    'Hangul_WEO': 0xecd,
    'Hangul_WE': 0xece,
    'Hangul_WI': 0xecf,
    'Hangul_YU': 0xed0,
    'Hangul_EU': 0xed1,
    'Hangul_YI': 0xed2,
    'Hangul_I': 0xed3,
    'Hangul_J_Kiyeog': 0xed4,
    'Hangul_J_SsangKiyeog': 0xed5,
    'Hangul_J_KiyeogSios': 0xed6,
    'Hangul_J_Nieun': 0xed7,
    'Hangul_J_NieunJieuj': 0xed8,
    'Hangul_J_NieunHieuh': 0xed9,
    'Hangul_J_Dikeud': 0xeda,
    'Hangul_J_Rieul': 0xedb,
    'Hangul_J_RieulKiyeog': 0xedc,
    'Hangul_J_RieulMieum': 0xedd,
    'Hangul_J_RieulPieub': 0xede,
    'Hangul_J_RieulSios': 0xedf,
    'Hangul_J_RieulTieut': 0xee0,
    'Hangul_J_RieulPhieuf': 0xee1,
    'Hangul_J_RieulHieuh': 0xee2,
    'Hangul_J_Mieum': 0xee3,
    'Hangul_J_Pieub': 0xee4,
    'Hangul_J_PieubSios': 0xee5,
    'Hangul_J_Sios': 0xee6,
    'Hangul_J_SsangSios': 0xee7,
    'Hangul_J_Ieung': 0xee8,
    'Hangul_J_Jieuj': 0xee9,
    'Hangul_J_Cieuc': 0xeea,
    'Hangul_J_Khieuq': 0xeeb,
    'Hangul_J_Tieut': 0xeec,
    'Hangul_J_Phieuf': 0xeed,
    'Hangul_J_Hieuh': 0xeee,
    'Hangul_RieulYeorinHieuh': 0xeef,
    'Hangul_SunkyeongeumMieum': 0xef0,
    'Hangul_SunkyeongeumPieub': 0xef1,
    'Hangul_PanSios': 0xef2,
    'Hangul_KkogjiDalrinIeung': 0xef3,
    'Hangul_SunkyeongeumPhieuf': 0xef4,
    'Hangul_YeorinHieuh': 0xef5,
    'Hangul_AraeA': 0xef6,
    'Hangul_AraeAE': 0xef7,
    'Hangul_J_PanSios': 0xef8,
    'Hangul_J_KkogjiDalrinIeung': 0xef9,
    'Hangul_J_YeorinHieuh': 0xefa,
    'Korean_Won': 0xeff,
    'OE': 0x13bc,
    'oe': 0x13bd,
    'Ydiaeresis': 0x13be,
    'EuroSign': 0x20ac,
    '3270_Duplicate': 0xfd01,
    '3270_FieldMark': 0xfd02,
    '3270_Right2': 0xfd03,
    '3270_Left2': 0xfd04,
    '3270_BackTab': 0xfd05,
    '3270_EraseEOF': 0xfd06,
    '3270_EraseInput': 0xfd07,
    '3270_Reset': 0xfd08,
    '3270_Quit': 0xfd09,
    '3270_PA1': 0xfd0a,
    '3270_PA2': 0xfd0b,
    '3270_PA3': 0xfd0c,
    '3270_Test': 0xfd0d,
    '3270_Attn': 0xfd0e,
    '3270_CursorBlink': 0xfd0f,
    '3270_AltCursor': 0xfd10,
    '3270_KeyClick': 0xfd11,
    '3270_Jump': 0xfd12,
    '3270_Ident': 0xfd13,
    '3270_Rule': 0xfd14,
    '3270_Copy': 0xfd15,
    '3270_Play': 0xfd16,
    '3270_Setup': 0xfd17,
    '3270_Record': 0xfd18,
    '3270_ChangeScreen': 0xfd19,
    '3270_DeleteWord': 0xfd1a,
    '3270_ExSelect': 0xfd1b,
    '3270_CursorSelect': 0xfd1c,
    '3270_PrintScreen': 0xfd1d,
    '3270_Enter': 0xfd1e,
    'ISO_Lock': 0xfe01,
    'ISO_Level2_Latch': 0xfe02,
    'ISO_Level3_Shift': 0xfe03,
    'ISO_Level3_Latch': 0xfe04,
    'ISO_Level3_Lock': 0xfe05,
    'ISO_Group_Latch': 0xfe06,
    'ISO_Group_Lock': 0xfe07,
    'ISO_Next_Group': 0xfe08,
    'ISO_Next_Group_Lock': 0xfe09,
    'ISO_Prev_Group': 0xfe0a,
    'ISO_Prev_Group_Lock': 0xfe0b,
    'ISO_First_Group': 0xfe0c,
    'ISO_First_Group_Lock': 0xfe0d,
    'ISO_Last_Group': 0xfe0e,
    'ISO_Last_Group_Lock': 0xfe0f,
    'ISO_Level5_Shift': 0xfe11,
    'ISO_Level5_Latch': 0xfe12,
    'ISO_Level5_Lock': 0xfe13,
    'ISO_Left_Tab': 0xfe20,
    'ISO_Move_Line_Up': 0xfe21,
    'ISO_Move_Line_Down': 0xfe22,
    'ISO_Partial_Line_Up': 0xfe23,
    'ISO_Partial_Line_Down': 0xfe24,
    'ISO_Partial_Space_Left': 0xfe25,
    'ISO_Partial_Space_Right': 0xfe26,
    'ISO_Set_Margin_Left': 0xfe27,
    'ISO_Set_Margin_Right': 0xfe28,
    'ISO_Release_Margin_Left': 0xfe29,
    'ISO_Release_Margin_Right': 0xfe2a,
    'ISO_Release_Both_Margins': 0xfe2b,
    'ISO_Fast_Cursor_Left': 0xfe2c,
    'ISO_Fast_Cursor_Right': 0xfe2d,
    'ISO_Fast_Cursor_Up': 0xfe2e,
    'ISO_Fast_Cursor_Down': 0xfe2f,
    'ISO_Continuous_Underline': 0xfe30,
    'ISO_Discontinuous_Underline': 0xfe31,
    'ISO_Emphasize': 0xfe32,
    'ISO_Center_Object': 0xfe33,
    'ISO_Enter': 0xfe34,
    'dead_grave': 0xfe50,
    'dead_acute': 0xfe51,
    'dead_circumflex': 0xfe52,
    'dead_tilde': 0xfe53,
    'dead_macron': 0xfe54,
    'dead_breve': 0xfe55,
    'dead_abovedot': 0xfe56,
    'dead_diaeresis': 0xfe57,
    'dead_abovering': 0xfe58,
    'dead_doubleacute': 0xfe59,
    'dead_caron': 0xfe5a,
    'dead_cedilla': 0xfe5b,
    'dead_ogonek': 0xfe5c,
    'dead_iota': 0xfe5d,
    'dead_voiced_sound': 0xfe5e,
    'dead_semivoiced_sound': 0xfe5f,
    'dead_belowdot': 0xfe60,
    'dead_hook': 0xfe61,
    'dead_horn': 0xfe62,
    'dead_stroke': 0xfe63,
    'dead_abovecomma': 0xfe64,
    'dead_abovereversedcomma': 0xfe65,
    'dead_doublegrave': 0xfe66,
    'dead_belowring': 0xfe67,
    'dead_belowmacron': 0xfe68,
    'dead_belowcircumflex': 0xfe69,
    'dead_belowtilde': 0xfe6a,
    'dead_belowbreve': 0xfe6b,
    'dead_belowdiaeresis': 0xfe6c,
    'dead_invertedbreve': 0xfe6d,
    'dead_belowcomma': 0xfe6e,
    'dead_currency': 0xfe6f,
    'AccessX_Enable': 0xfe70,
    'AccessX_Feedback_Enable': 0xfe71,
    'RepeatKeys_Enable': 0xfe72,
    'SlowKeys_Enable': 0xfe73,
    'BounceKeys_Enable': 0xfe74,
    'StickyKeys_Enable': 0xfe75,
    'MouseKeys_Enable': 0xfe76,
    'MouseKeys_Accel_Enable': 0xfe77,
    'Overlay1_Enable': 0xfe78,
    'Overlay2_Enable': 0xfe79,
    'AudibleBell_Enable': 0xfe7a,
    'dead_a': 0xfe80,
    'dead_A': 0xfe81,
    'dead_e': 0xfe82,
    'dead_E': 0xfe83,
    'dead_i': 0xfe84,
    'dead_I': 0xfe85,
    'dead_o': 0xfe86,
    'dead_O': 0xfe87,
    'dead_u': 0xfe88,
    'dead_U': 0xfe89,
    'dead_small_schwa': 0xfe8a,
    'dead_capital_schwa': 0xfe8b,
    'dead_greek': 0xfe8c,
    'ch': 0xfea0,
    'Ch': 0xfea1,
    'CH': 0xfea2,
    'c_h': 0xfea3,
    'C_h': 0xfea4,
    'C_H': 0xfea5,
    'First_Virtual_Screen': 0xfed0,
    'Prev_Virtual_Screen': 0xfed1,
    'Next_Virtual_Screen': 0xfed2,
    'Last_Virtual_Screen': 0xfed4,
    'Terminate_Server': 0xfed5,
    'Pointer_Left': 0xfee0,
    'Pointer_Right': 0xfee1,
    'Pointer_Up': 0xfee2,
    'Pointer_Down': 0xfee3,
    'Pointer_UpLeft': 0xfee4,
    'Pointer_UpRight': 0xfee5,
    'Pointer_DownLeft': 0xfee6,
    'Pointer_DownRight': 0xfee7,
    'Pointer_Button_Dflt': 0xfee8,
    'Pointer_Button1': 0xfee9,
    'Pointer_Button2': 0xfeea,
    'Pointer_Button3': 0xfeeb,
    'Pointer_Button4': 0xfeec,
    'Pointer_Button5': 0xfeed,
    'Pointer_DblClick_Dflt': 0xfeee,
    'Pointer_DblClick1': 0xfeef,
    'Pointer_DblClick2': 0xfef0,
    'Pointer_DblClick3': 0xfef1,
    'Pointer_DblClick4': 0xfef2,
    'Pointer_DblClick5': 0xfef3,
    'Pointer_Drag_Dflt': 0xfef4,
    'Pointer_Drag1': 0xfef5,
    'Pointer_Drag2': 0xfef6,
    'Pointer_Drag3': 0xfef7,
    'Pointer_Drag4': 0xfef8,
    'Pointer_EnableKeys': 0xfef9,
    'Pointer_Accelerate': 0xfefa,
    'Pointer_DfltBtnNext': 0xfefb,
    'Pointer_DfltBtnPrev': 0xfefc,
    'Pointer_Drag5': 0xfefd,
    'BackSpace': 0xff08,
    'Tab': 0xff09,
    'Linefeed': 0xff0a,
    'Clear': 0xff0b,
    'Return': 0xff0d,
    'Pause': 0xff13,
    'Scroll_Lock': 0xff14,
    'Sys_Req': 0xff15,
    'Escape': 0xff1b,
    'Multi_key': 0xff20,
    'Kanji': 0xff21,
    'Muhenkan': 0xff22,
    'Henkan': 0xff23,
    'Romaji': 0xff24,
    'Hiragana': 0xff25,
    'Katakana': 0xff26,
    'Hiragana_Katakana': 0xff27,
    'Zenkaku': 0xff28,
    'Hankaku': 0xff29,
    'Zenkaku_Hankaku': 0xff2a,
    'Touroku': 0xff2b,
    'Massyo': 0xff2c,
    'Kana_Lock': 0xff2d,
    'Kana_Shift': 0xff2e,
    'Eisu_Shift': 0xff2f,
    'Eisu_toggle': 0xff30,
    'Hangul': 0xff31,
    'Hangul_Start': 0xff32,
    'Hangul_End': 0xff33,
    'Hangul_Hanja': 0xff34,
    'Hangul_Jamo': 0xff35,
    'Hangul_Romaja': 0xff36,
    'Hangul_Codeinput': 0xff37,
    'Hangul_Jeonja': 0xff38,
    'Hangul_Banja': 0xff39,
    'Hangul_PreHanja': 0xff3a,
    'Hangul_PostHanja': 0xff3b,
    'Hangul_SingleCandidate': 0xff3c,
    'Hangul_MultipleCandidate': 0xff3d,
    'Hangul_PreviousCandidate': 0xff3e,
    'Hangul_Special': 0xff3f,
    'Home': 0xff50,
    'Left': 0xff51,
    'Up': 0xff52,
    'Right': 0xff53,
    'Down': 0xff54,
    'Prior': 0xff55,
    'Next': 0xff56,
    'End': 0xff57,
    'Begin': 0xff58,
    'Select': 0xff60,
    'Print': 0xff61,
    'Execute': 0xff62,
    'Insert': 0xff63,
    'Undo': 0xff65,
    'Redo': 0xff66,
    'Menu': 0xff67,
    'Find': 0xff68,
    'Cancel': 0xff69,
    'Help': 0xff6a,
    'Break': 0xff6b,
    'Arabic_switch': 0xff7e,
    'Num_Lock': 0xff7f,
    'KP_Space': 0xff80,
    'KP_Tab': 0xff89,
    'KP_Enter': 0xff8d,
    'KP_F1': 0xff91,
    'KP_F2': 0xff92,
    'KP_F3': 0xff93,
    'KP_F4': 0xff94,
    'KP_Home': 0xff95,
    'KP_Left': 0xff96,
    'KP_Up': 0xff97,
    'KP_Right': 0xff98,
    'KP_Down': 0xff99,
    'KP_Prior': 0xff9a,
    'KP_Next': 0xff9b,
    'KP_End': 0xff9c,
    'KP_Begin': 0xff9d,
    'KP_Insert': 0xff9e,
    'KP_Delete': 0xff9f,
    'KP_Multiply': 0xffaa,
    'KP_Add': 0xffab,
    'KP_Separator': 0xffac,
    'KP_Subtract': 0xffad,
    'KP_Decimal': 0xffae,
    'KP_Divide': 0xffaf,
    'KP_0': 0xffb0,
    'KP_1': 0xffb1,
    'KP_2': 0xffb2,
    'KP_3': 0xffb3,
    'KP_4': 0xffb4,
    'KP_5': 0xffb5,
    'KP_6': 0xffb6,
    'KP_7': 0xffb7,
    'KP_8': 0xffb8,
    'KP_9': 0xffb9,
    'KP_Equal': 0xffbd,
    'F1': 0xffbe,
    'F2': 0xffbf,
    'F3': 0xffc0,
    'F4': 0xffc1,
    'F5': 0xffc2,
    'F6': 0xffc3,
    'F7': 0xffc4,
    'F8': 0xffc5,
    'F9': 0xffc6,
    'F10': 0xffc7,
    'F11': 0xffc8,
    'L1': 0xffc8,
    'F12': 0xffc9,
    'L2': 0xffc9,
    'F13': 0xffca,
    'L3': 0xffca,
    'F14': 0xffcb,
    'L4': 0xffcb,
    'F15': 0xffcc,
    'L5': 0xffcc,
    'F16': 0xffcd,
    'L6': 0xffcd,
    'F17': 0xffce,
    'L7': 0xffce,
    'F18': 0xffcf,
    'L8': 0xffcf,
    'F19': 0xffd0,
    'L9': 0xffd0,
    'F20': 0xffd1,
    'L10': 0xffd1,
    'F21': 0xffd2,
    'R1': 0xffd2,
    'F22': 0xffd3,
    'R2': 0xffd3,
    'F23': 0xffd4,
    'R3': 0xffd4,
    'F24': 0xffd5,
    'R4': 0xffd5,
    'F25': 0xffd6,
    'R5': 0xffd6,
    'F26': 0xffd7,
    'R6': 0xffd7,
    'F27': 0xffd8,
    'R7': 0xffd8,
    'F28': 0xffd9,
    'R8': 0xffd9,
    'F29': 0xffda,
    'R9': 0xffda,
    'F30': 0xffdb,
    'R10': 0xffdb,
    'F31': 0xffdc,
    'R11': 0xffdc,
    'F32': 0xffdd,
    'R12': 0xffdd,
    'F33': 0xffde,
    'R13': 0xffde,
    'F34': 0xffdf,
    'R14': 0xffdf,
    'F35': 0xffe0,
    'R15': 0xffe0,
    'Shift_L': 0xffe1,
    'Shift_R': 0xffe2,
    'Control_L': 0xffe3,
    'Control_R': 0xffe4,
    'Caps_Lock': 0xffe5,
    'Shift_Lock': 0xffe6,
    'Meta_L': 0xffe7,
    'Meta_R': 0xffe8,
    'Alt_L': 0xffe9,
    'Alt_R': 0xffea,
    'Super_L': 0xffeb,
    'Super_R': 0xffec,
    'Hyper_L': 0xffed,
    'Hyper_R': 0xffee,
    'braille_dot_1': 0xfff1,
    'braille_dot_2': 0xfff2,
    'braille_dot_3': 0xfff3,
    'braille_dot_4': 0xfff4,
    'braille_dot_5': 0xfff5,
    'braille_dot_6': 0xfff6,
    'braille_dot_7': 0xfff7,
    'braille_dot_8': 0xfff8,
    'braille_dot_9': 0xfff9,
    'braille_dot_10': 0xfffa,
    'Delete': 0xffff,
    'VoidSymbol': 0xffffff,
    'Ibreve': 0x100012c,
    'ibreve': 0x100012d,
    'Wcircumflex': 0x1000174,
    'wcircumflex': 0x1000175,
    'Ycircumflex': 0x1000176,
    'ycircumflex': 0x1000177,
    'SCHWA': 0x100018f,
    'Obarred': 0x100019f,
    'Ohorn': 0x10001a0,
    'ohorn': 0x10001a1,
    'Uhorn': 0x10001af,
    'uhorn': 0x10001b0,
    'Zstroke': 0x10001b5,
    'zstroke': 0x10001b6,
    'EZH': 0x10001b7,
    'Ocaron': 0x10001d1,
    'ocaron': 0x10001d2,
    'Gcaron': 0x10001e6,
    'gcaron': 0x10001e7,
    'schwa': 0x1000259,
    'obarred': 0x1000275,
    'ezh': 0x1000292,
    'Cyrillic_GHE_bar': 0x1000492,
    'Cyrillic_ghe_bar': 0x1000493,
    'Cyrillic_ZHE_descender': 0x1000496,
    'Cyrillic_zhe_descender': 0x1000497,
    'Cyrillic_KA_descender': 0x100049a,
    'Cyrillic_ka_descender': 0x100049b,
    'Cyrillic_KA_vertstroke': 0x100049c,
    'Cyrillic_ka_vertstroke': 0x100049d,
    'Cyrillic_EN_descender': 0x10004a2,
    'Cyrillic_en_descender': 0x10004a3,
    'Cyrillic_U_straight': 0x10004ae,
    'Cyrillic_u_straight': 0x10004af,
    'Cyrillic_U_straight_bar': 0x10004b0,
    'Cyrillic_u_straight_bar': 0x10004b1,
    'Cyrillic_HA_descender': 0x10004b2,
    'Cyrillic_ha_descender': 0x10004b3,
    'Cyrillic_CHE_descender': 0x10004b6,
    'Cyrillic_che_descender': 0x10004b7,
    'Cyrillic_CHE_vertstroke': 0x10004b8,
    'Cyrillic_che_vertstroke': 0x10004b9,
    'Cyrillic_SHHA': 0x10004ba,
    'Cyrillic_shha': 0x10004bb,
    'Cyrillic_SCHWA': 0x10004d8,
    'Cyrillic_schwa': 0x10004d9,
    'Cyrillic_I_macron': 0x10004e2,
    'Cyrillic_i_macron': 0x10004e3,
    'Cyrillic_O_bar': 0x10004e8,
    'Cyrillic_o_bar': 0x10004e9,
    'Cyrillic_U_macron': 0x10004ee,
    'Cyrillic_u_macron': 0x10004ef,
    'Armenian_AYB': 0x1000531,
    'Armenian_BEN': 0x1000532,
    'Armenian_GIM': 0x1000533,
    'Armenian_DA': 0x1000534,
    'Armenian_YECH': 0x1000535,
    'Armenian_ZA': 0x1000536,
    'Armenian_E': 0x1000537,
    'Armenian_AT': 0x1000538,
    'Armenian_TO': 0x1000539,
    'Armenian_ZHE': 0x100053a,
    'Armenian_INI': 0x100053b,
    'Armenian_LYUN': 0x100053c,
    'Armenian_KHE': 0x100053d,
    'Armenian_TSA': 0x100053e,
    'Armenian_KEN': 0x100053f,
    'Armenian_HO': 0x1000540,
    'Armenian_DZA': 0x1000541,
    'Armenian_GHAT': 0x1000542,
    'Armenian_TCHE': 0x1000543,
    'Armenian_MEN': 0x1000544,
    'Armenian_HI': 0x1000545,
    'Armenian_NU': 0x1000546,
    'Armenian_SHA': 0x1000547,
    'Armenian_VO': 0x1000548,
    'Armenian_CHA': 0x1000549,
    'Armenian_PE': 0x100054a,
    'Armenian_JE': 0x100054b,
    'Armenian_RA': 0x100054c,
    'Armenian_SE': 0x100054d,
    'Armenian_VEV': 0x100054e,
    'Armenian_TYUN': 0x100054f,
    'Armenian_RE': 0x1000550,
    'Armenian_TSO': 0x1000551,
    'Armenian_VYUN': 0x1000552,
    'Armenian_PYUR': 0x1000553,
    'Armenian_KE': 0x1000554,
    'Armenian_O': 0x1000555,
    'Armenian_FE': 0x1000556,
    'Armenian_apostrophe': 0x100055a,
    'Armenian_accent': 0x100055b,
    'Armenian_amanak': 0x100055c,
    'Armenian_separation_mark': 0x100055d,
    'Armenian_question': 0x100055e,
    'Armenian_ayb': 0x1000561,
    'Armenian_ben': 0x1000562,
    'Armenian_gim': 0x1000563,
    'Armenian_da': 0x1000564,
    'Armenian_yech': 0x1000565,
    'Armenian_za': 0x1000566,
    'Armenian_e': 0x1000567,
    'Armenian_at': 0x1000568,
    'Armenian_to': 0x1000569,
    'Armenian_zhe': 0x100056a,
    'Armenian_ini': 0x100056b,
    'Armenian_lyun': 0x100056c,
    'Armenian_khe': 0x100056d,
    'Armenian_tsa': 0x100056e,
    'Armenian_ken': 0x100056f,
    'Armenian_ho': 0x1000570,
    'Armenian_dza': 0x1000571,
    'Armenian_ghat': 0x1000572,
    'Armenian_tche': 0x1000573,
    'Armenian_men': 0x1000574,
    'Armenian_hi': 0x1000575,
    'Armenian_nu': 0x1000576,
    'Armenian_sha': 0x1000577,
    'Armenian_vo': 0x1000578,
    'Armenian_cha': 0x1000579,
    'Armenian_pe': 0x100057a,
    'Armenian_je': 0x100057b,
    'Armenian_ra': 0x100057c,
    'Armenian_se': 0x100057d,
    'Armenian_vev': 0x100057e,
    'Armenian_tyun': 0x100057f,
    'Armenian_re': 0x1000580,
    'Armenian_tso': 0x1000581,
    'Armenian_vyun': 0x1000582,
    'Armenian_pyur': 0x1000583,
    'Armenian_ke': 0x1000584,
    'Armenian_o': 0x1000585,
    'Armenian_fe': 0x1000586,
    'Armenian_ligature_ew': 0x1000587,
    'Armenian_full_stop': 0x1000589,
    'Armenian_yentamna': 0x100058a,
    'Arabic_madda_above': 0x1000653,
    'Arabic_hamza_above': 0x1000654,
    'Arabic_hamza_below': 0x1000655,
    'Arabic_0': 0x1000660,
    'Arabic_1': 0x1000661,
    'Arabic_2': 0x1000662,
    'Arabic_3': 0x1000663,
    'Arabic_4': 0x1000664,
    'Arabic_5': 0x1000665,
    'Arabic_6': 0x1000666,
    'Arabic_7': 0x1000667,
    'Arabic_8': 0x1000668,
    'Arabic_9': 0x1000669,
    'Arabic_percent': 0x100066a,
    'Arabic_superscript_alef': 0x1000670,
    'Arabic_tteh': 0x1000679,
    'Arabic_peh': 0x100067e,
    'Arabic_tcheh': 0x1000686,
    'Arabic_ddal': 0x1000688,
    'Arabic_rreh': 0x1000691,
    'Arabic_jeh': 0x1000698,
    'Arabic_veh': 0x10006a4,
    'Arabic_keheh': 0x10006a9,
    'Arabic_gaf': 0x10006af,
    'Arabic_noon_ghunna': 0x10006ba,
    'Arabic_heh_doachashmee': 0x10006be,
    'Arabic_heh_goal': 0x10006c1,
    'Farsi_yeh': 0x10006cc,
    'Arabic_yeh_baree': 0x10006d2,
    'Arabic_fullstop': 0x10006d4,
    'Farsi_0': 0x10006f0,
    'Farsi_1': 0x10006f1,
    'Farsi_2': 0x10006f2,
    'Farsi_3': 0x10006f3,
    'Farsi_4': 0x10006f4,
    'Farsi_5': 0x10006f5,
    'Farsi_6': 0x10006f6,
    'Farsi_7': 0x10006f7,
    'Farsi_8': 0x10006f8,
    'Farsi_9': 0x10006f9,
    'Sinh_ng': 0x1000d82,
    'Sinh_h2': 0x1000d83,
    'Sinh_a': 0x1000d85,
    'Sinh_aa': 0x1000d86,
    'Sinh_ae': 0x1000d87,
    'Sinh_aee': 0x1000d88,
    'Sinh_i': 0x1000d89,
    'Sinh_ii': 0x1000d8a,
    'Sinh_u': 0x1000d8b,
    'Sinh_uu': 0x1000d8c,
    'Sinh_ri': 0x1000d8d,
    'Sinh_rii': 0x1000d8e,
    'Sinh_lu': 0x1000d8f,
    'Sinh_luu': 0x1000d90,
    'Sinh_e': 0x1000d91,
    'Sinh_ee': 0x1000d92,
    'Sinh_ai': 0x1000d93,
    'Sinh_o': 0x1000d94,
    'Sinh_oo': 0x1000d95,
    'Sinh_au': 0x1000d96,
    'Sinh_ka': 0x1000d9a,
    'Sinh_kha': 0x1000d9b,
    'Sinh_ga': 0x1000d9c,
    'Sinh_gha': 0x1000d9d,
    'Sinh_ng2': 0x1000d9e,
    'Sinh_nga': 0x1000d9f,
    'Sinh_ca': 0x1000da0,
    'Sinh_cha': 0x1000da1,
    'Sinh_ja': 0x1000da2,
    'Sinh_jha': 0x1000da3,
    'Sinh_nya': 0x1000da4,
    'Sinh_jnya': 0x1000da5,
    'Sinh_nja': 0x1000da6,
    'Sinh_tta': 0x1000da7,
    'Sinh_ttha': 0x1000da8,
    'Sinh_dda': 0x1000da9,
    'Sinh_ddha': 0x1000daa,
    'Sinh_nna': 0x1000dab,
    'Sinh_ndda': 0x1000dac,
    'Sinh_tha': 0x1000dad,
    'Sinh_thha': 0x1000dae,
    'Sinh_dha': 0x1000daf,
    'Sinh_dhha': 0x1000db0,
    'Sinh_na': 0x1000db1,
    'Sinh_ndha': 0x1000db3,
    'Sinh_pa': 0x1000db4,
    'Sinh_pha': 0x1000db5,
    'Sinh_ba': 0x1000db6,
    'Sinh_bha': 0x1000db7,
    'Sinh_ma': 0x1000db8,
    'Sinh_mba': 0x1000db9,
    'Sinh_ya': 0x1000dba,
    'Sinh_ra': 0x1000dbb,
    'Sinh_la': 0x1000dbd,
    'Sinh_va': 0x1000dc0,
    'Sinh_sha': 0x1000dc1,
    'Sinh_ssha': 0x1000dc2,
    'Sinh_sa': 0x1000dc3,
    'Sinh_ha': 0x1000dc4,
    'Sinh_lla': 0x1000dc5,
    'Sinh_fa': 0x1000dc6,
    'Sinh_al': 0x1000dca,
    'Sinh_aa2': 0x1000dcf,
    'Sinh_ae2': 0x1000dd0,
    'Sinh_aee2': 0x1000dd1,
    'Sinh_i2': 0x1000dd2,
    'Sinh_ii2': 0x1000dd3,
    'Sinh_u2': 0x1000dd4,
    'Sinh_uu2': 0x1000dd6,
    'Sinh_ru2': 0x1000dd8,
    'Sinh_e2': 0x1000dd9,
    'Sinh_ee2': 0x1000dda,
    'Sinh_ai2': 0x1000ddb,
    'Sinh_o2': 0x1000ddc,
    'Sinh_oo2': 0x1000ddd,
    'Sinh_au2': 0x1000dde,
    'Sinh_lu2': 0x1000ddf,
    'Sinh_ruu2': 0x1000df2,
    'Sinh_luu2': 0x1000df3,
    'Sinh_kunddaliya': 0x1000df4,
    'Georgian_an': 0x10010d0,
    'Georgian_ban': 0x10010d1,
    'Georgian_gan': 0x10010d2,
    'Georgian_don': 0x10010d3,
    'Georgian_en': 0x10010d4,
    'Georgian_vin': 0x10010d5,
    'Georgian_zen': 0x10010d6,
    'Georgian_tan': 0x10010d7,
    'Georgian_in': 0x10010d8,
    'Georgian_kan': 0x10010d9,
    'Georgian_las': 0x10010da,
    'Georgian_man': 0x10010db,
    'Georgian_nar': 0x10010dc,
    'Georgian_on': 0x10010dd,
    'Georgian_par': 0x10010de,
    'Georgian_zhar': 0x10010df,
    'Georgian_rae': 0x10010e0,
    'Georgian_san': 0x10010e1,
    'Georgian_tar': 0x10010e2,
    'Georgian_un': 0x10010e3,
    'Georgian_phar': 0x10010e4,
    'Georgian_khar': 0x10010e5,
    'Georgian_ghan': 0x10010e6,
    'Georgian_qar': 0x10010e7,
    'Georgian_shin': 0x10010e8,
    'Georgian_chin': 0x10010e9,
    'Georgian_can': 0x10010ea,
    'Georgian_jil': 0x10010eb,
    'Georgian_cil': 0x10010ec,
    'Georgian_char': 0x10010ed,
    'Georgian_xan': 0x10010ee,
    'Georgian_jhan': 0x10010ef,
    'Georgian_hae': 0x10010f0,
    'Georgian_he': 0x10010f1,
    'Georgian_hie': 0x10010f2,
    'Georgian_we': 0x10010f3,
    'Georgian_har': 0x10010f4,
    'Georgian_hoe': 0x10010f5,
    'Georgian_fi': 0x10010f6,
    'Babovedot': 0x1001e02,
    'babovedot': 0x1001e03,
    'Dabovedot': 0x1001e0a,
    'dabovedot': 0x1001e0b,
    'Fabovedot': 0x1001e1e,
    'fabovedot': 0x1001e1f,
    'Lbelowdot': 0x1001e36,
    'lbelowdot': 0x1001e37,
    'Mabovedot': 0x1001e40,
    'mabovedot': 0x1001e41,
    'Pabovedot': 0x1001e56,
    'pabovedot': 0x1001e57,
    'Sabovedot': 0x1001e60,
    'sabovedot': 0x1001e61,
    'Tabovedot': 0x1001e6a,
    'tabovedot': 0x1001e6b,
    'Wgrave': 0x1001e80,
    'wgrave': 0x1001e81,
    'Wacute': 0x1001e82,
    'wacute': 0x1001e83,
    'Wdiaeresis': 0x1001e84,
    'wdiaeresis': 0x1001e85,
    'Xabovedot': 0x1001e8a,
    'xabovedot': 0x1001e8b,
    'Abelowdot': 0x1001ea0,
    'abelowdot': 0x1001ea1,
    'Ahook': 0x1001ea2,
    'ahook': 0x1001ea3,
    'Acircumflexacute': 0x1001ea4,
    'acircumflexacute': 0x1001ea5,
    'Acircumflexgrave': 0x1001ea6,
    'acircumflexgrave': 0x1001ea7,
    'Acircumflexhook': 0x1001ea8,
    'acircumflexhook': 0x1001ea9,
    'Acircumflextilde': 0x1001eaa,
    'acircumflextilde': 0x1001eab,
    'Acircumflexbelowdot': 0x1001eac,
    'acircumflexbelowdot': 0x1001ead,
    'Abreveacute': 0x1001eae,
    'abreveacute': 0x1001eaf,
    'Abrevegrave': 0x1001eb0,
    'abrevegrave': 0x1001eb1,
    'Abrevehook': 0x1001eb2,
    'abrevehook': 0x1001eb3,
    'Abrevetilde': 0x1001eb4,
    'abrevetilde': 0x1001eb5,
    'Abrevebelowdot': 0x1001eb6,
    'abrevebelowdot': 0x1001eb7,
    'Ebelowdot': 0x1001eb8,
    'ebelowdot': 0x1001eb9,
    'Ehook': 0x1001eba,
    'ehook': 0x1001ebb,
    'Etilde': 0x1001ebc,
    'etilde': 0x1001ebd,
    'Ecircumflexacute': 0x1001ebe,
    'ecircumflexacute': 0x1001ebf,
    'Ecircumflexgrave': 0x1001ec0,
    'ecircumflexgrave': 0x1001ec1,
    'Ecircumflexhook': 0x1001ec2,
    'ecircumflexhook': 0x1001ec3,
    'Ecircumflextilde': 0x1001ec4,
    'ecircumflextilde': 0x1001ec5,
    'Ecircumflexbelowdot': 0x1001ec6,
    'ecircumflexbelowdot': 0x1001ec7,
    'Ihook': 0x1001ec8,
    'ihook': 0x1001ec9,
    'Ibelowdot': 0x1001eca,
    'ibelowdot': 0x1001ecb,
    'Obelowdot': 0x1001ecc,
    'obelowdot': 0x1001ecd,
    'Ohook': 0x1001ece,
    'ohook': 0x1001ecf,
    'Ocircumflexacute': 0x1001ed0,
    'ocircumflexacute': 0x1001ed1,
    'Ocircumflexgrave': 0x1001ed2,
    'ocircumflexgrave': 0x1001ed3,
    'Ocircumflexhook': 0x1001ed4,
    'ocircumflexhook': 0x1001ed5,
    'Ocircumflextilde': 0x1001ed6,
    'ocircumflextilde': 0x1001ed7,
    'Ocircumflexbelowdot': 0x1001ed8,
    'ocircumflexbelowdot': 0x1001ed9,
    'Ohornacute': 0x1001eda,
    'ohornacute': 0x1001edb,
    'Ohorngrave': 0x1001edc,
    'ohorngrave': 0x1001edd,
    'Ohornhook': 0x1001ede,
    'ohornhook': 0x1001edf,
    'Ohorntilde': 0x1001ee0,
    'ohorntilde': 0x1001ee1,
    'Ohornbelowdot': 0x1001ee2,
    'ohornbelowdot': 0x1001ee3,
    'Ubelowdot': 0x1001ee4,
    'ubelowdot': 0x1001ee5,
    'Uhook': 0x1001ee6,
    'uhook': 0x1001ee7,
    'Uhornacute': 0x1001ee8,
    'uhornacute': 0x1001ee9,
    'Uhorngrave': 0x1001eea,
    'uhorngrave': 0x1001eeb,
    'Uhornhook': 0x1001eec,
    'uhornhook': 0x1001eed,
    'Uhorntilde': 0x1001eee,
    'uhorntilde': 0x1001eef,
    'Uhornbelowdot': 0x1001ef0,
    'uhornbelowdot': 0x1001ef1,
    'Ygrave': 0x1001ef2,
    'ygrave': 0x1001ef3,
    'Ybelowdot': 0x1001ef4,
    'ybelowdot': 0x1001ef5,
    'Yhook': 0x1001ef6,
    'yhook': 0x1001ef7,
    'Ytilde': 0x1001ef8,
    'ytilde': 0x1001ef9,
    'zerosuperior': 0x1002070,
    'foursuperior': 0x1002074,
    'fivesuperior': 0x1002075,
    'sixsuperior': 0x1002076,
    'sevensuperior': 0x1002077,
    'eightsuperior': 0x1002078,
    'ninesuperior': 0x1002079,
    'zerosubscript': 0x1002080,
    'onesubscript': 0x1002081,
    'twosubscript': 0x1002082,
    'threesubscript': 0x1002083,
    'foursubscript': 0x1002084,
    'fivesubscript': 0x1002085,
    'sixsubscript': 0x1002086,
    'sevensubscript': 0x1002087,
    'eightsubscript': 0x1002088,
    'ninesubscript': 0x1002089,
    'EcuSign': 0x10020a0,
    'ColonSign': 0x10020a1,
    'CruzeiroSign': 0x10020a2,
    'FFrancSign': 0x10020a3,
    'LiraSign': 0x10020a4,
    'MillSign': 0x10020a5,
    'NairaSign': 0x10020a6,
    'PesetaSign': 0x10020a7,
    'RupeeSign': 0x10020a8,
    'WonSign': 0x10020a9,
    'NewSheqelSign': 0x10020aa,
    'DongSign': 0x10020ab,
    'partdifferential': 0x1002202,
    'emptyset': 0x1002205,
    'elementof': 0x1002208,
    'notelementof': 0x1002209,
    'containsas': 0x100220b,
    'squareroot': 0x100221a,
    'cuberoot': 0x100221b,
    'fourthroot': 0x100221c,
    'dintegral': 0x100222c,
    'tintegral': 0x100222d,
    'because': 0x1002235,
    'notapproxeq': 0x1002247,
    'approxeq': 0x1002248,
    'notidentical': 0x1002262,
    'stricteq': 0x1002263,
    'braille_blank': 0x1002800,
    'braille_dots_1': 0x1002801,
    'braille_dots_2': 0x1002802,
    'braille_dots_12': 0x1002803,
    'braille_dots_3': 0x1002804,
    'braille_dots_13': 0x1002805,
    'braille_dots_23': 0x1002806,
    'braille_dots_123': 0x1002807,
    'braille_dots_4': 0x1002808,
    'braille_dots_14': 0x1002809,
    'braille_dots_24': 0x100280a,
    'braille_dots_124': 0x100280b,
    'braille_dots_34': 0x100280c,
    'braille_dots_134': 0x100280d,
    'braille_dots_234': 0x100280e,
    'braille_dots_1234': 0x100280f,
    'braille_dots_5': 0x1002810,
    'braille_dots_15': 0x1002811,
    'braille_dots_25': 0x1002812,
    'braille_dots_125': 0x1002813,
    'braille_dots_35': 0x1002814,
    'braille_dots_135': 0x1002815,
    'braille_dots_235': 0x1002816,
    'braille_dots_1235': 0x1002817,
    'braille_dots_45': 0x1002818,
    'braille_dots_145': 0x1002819,
    'braille_dots_245': 0x100281a,
    'braille_dots_1245': 0x100281b,
    'braille_dots_345': 0x100281c,
    'braille_dots_1345': 0x100281d,
    'braille_dots_2345': 0x100281e,
    'braille_dots_12345': 0x100281f,
    'braille_dots_6': 0x1002820,
    'braille_dots_16': 0x1002821,
    'braille_dots_26': 0x1002822,
    'braille_dots_126': 0x1002823,
    'braille_dots_36': 0x1002824,
    'braille_dots_136': 0x1002825,
    'braille_dots_236': 0x1002826,
    'braille_dots_1236': 0x1002827,
    'braille_dots_46': 0x1002828,
    'braille_dots_146': 0x1002829,
    'braille_dots_246': 0x100282a,
    'braille_dots_1246': 0x100282b,
    'braille_dots_346': 0x100282c,
    'braille_dots_1346': 0x100282d,
    'braille_dots_2346': 0x100282e,
    'braille_dots_12346': 0x100282f,
    'braille_dots_56': 0x1002830,
    'braille_dots_156': 0x1002831,
    'braille_dots_256': 0x1002832,
    'braille_dots_1256': 0x1002833,
    'braille_dots_356': 0x1002834,
    'braille_dots_1356': 0x1002835,
    'braille_dots_2356': 0x1002836,
    'braille_dots_12356': 0x1002837,
    'braille_dots_456': 0x1002838,
    'braille_dots_1456': 0x1002839,
    'braille_dots_2456': 0x100283a,
    'braille_dots_12456': 0x100283b,
    'braille_dots_3456': 0x100283c,
    'braille_dots_13456': 0x100283d,
    'braille_dots_23456': 0x100283e,
    'braille_dots_123456': 0x100283f,
    'braille_dots_7': 0x1002840,
    'braille_dots_17': 0x1002841,
    'braille_dots_27': 0x1002842,
    'braille_dots_127': 0x1002843,
    'braille_dots_37': 0x1002844,
    'braille_dots_137': 0x1002845,
    'braille_dots_237': 0x1002846,
    'braille_dots_1237': 0x1002847,
    'braille_dots_47': 0x1002848,
    'braille_dots_147': 0x1002849,
    'braille_dots_247': 0x100284a,
    'braille_dots_1247': 0x100284b,
    'braille_dots_347': 0x100284c,
    'braille_dots_1347': 0x100284d,
    'braille_dots_2347': 0x100284e,
    'braille_dots_12347': 0x100284f,
    'braille_dots_57': 0x1002850,
    'braille_dots_157': 0x1002851,
    'braille_dots_257': 0x1002852,
    'braille_dots_1257': 0x1002853,
    'braille_dots_357': 0x1002854,
    'braille_dots_1357': 0x1002855,
    'braille_dots_2357': 0x1002856,
    'braille_dots_12357': 0x1002857,
    'braille_dots_457': 0x1002858,
    'braille_dots_1457': 0x1002859,
    'braille_dots_2457': 0x100285a,
    'braille_dots_12457': 0x100285b,
    'braille_dots_3457': 0x100285c,
    'braille_dots_13457': 0x100285d,
    'braille_dots_23457': 0x100285e,
    'braille_dots_123457': 0x100285f,
    'braille_dots_67': 0x1002860,
    'braille_dots_167': 0x1002861,
    'braille_dots_267': 0x1002862,
    'braille_dots_1267': 0x1002863,
    'braille_dots_367': 0x1002864,
    'braille_dots_1367': 0x1002865,
    'braille_dots_2367': 0x1002866,
    'braille_dots_12367': 0x1002867,
    'braille_dots_467': 0x1002868,
    'braille_dots_1467': 0x1002869,
    'braille_dots_2467': 0x100286a,
    'braille_dots_12467': 0x100286b,
    'braille_dots_3467': 0x100286c,
    'braille_dots_13467': 0x100286d,
    'braille_dots_23467': 0x100286e,
    'braille_dots_123467': 0x100286f,
    'braille_dots_567': 0x1002870,
    'braille_dots_1567': 0x1002871,
    'braille_dots_2567': 0x1002872,
    'braille_dots_12567': 0x1002873,
    'braille_dots_3567': 0x1002874,
    'braille_dots_13567': 0x1002875,
    'braille_dots_23567': 0x1002876,
    'braille_dots_123567': 0x1002877,
    'braille_dots_4567': 0x1002878,
    'braille_dots_14567': 0x1002879,
    'braille_dots_24567': 0x100287a,
    'braille_dots_124567': 0x100287b,
    'braille_dots_34567': 0x100287c,
    'braille_dots_134567': 0x100287d,
    'braille_dots_234567': 0x100287e,
    'braille_dots_1234567': 0x100287f,
    'braille_dots_8': 0x1002880,
    'braille_dots_18': 0x1002881,
    'braille_dots_28': 0x1002882,
    'braille_dots_128': 0x1002883,
    'braille_dots_38': 0x1002884,
    'braille_dots_138': 0x1002885,
    'braille_dots_238': 0x1002886,
    'braille_dots_1238': 0x1002887,
    'braille_dots_48': 0x1002888,
    'braille_dots_148': 0x1002889,
    'braille_dots_248': 0x100288a,
    'braille_dots_1248': 0x100288b,
    'braille_dots_348': 0x100288c,
    'braille_dots_1348': 0x100288d,
    'braille_dots_2348': 0x100288e,
    'braille_dots_12348': 0x100288f,
    'braille_dots_58': 0x1002890,
    'braille_dots_158': 0x1002891,
    'braille_dots_258': 0x1002892,
    'braille_dots_1258': 0x1002893,
    'braille_dots_358': 0x1002894,
    'braille_dots_1358': 0x1002895,
    'braille_dots_2358': 0x1002896,
    'braille_dots_12358': 0x1002897,
    'braille_dots_458': 0x1002898,
    'braille_dots_1458': 0x1002899,
    'braille_dots_2458': 0x100289a,
    'braille_dots_12458': 0x100289b,
    'braille_dots_3458': 0x100289c,
    'braille_dots_13458': 0x100289d,
    'braille_dots_23458': 0x100289e,
    'braille_dots_123458': 0x100289f,
    'braille_dots_68': 0x10028a0,
    'braille_dots_168': 0x10028a1,
    'braille_dots_268': 0x10028a2,
    'braille_dots_1268': 0x10028a3,
    'braille_dots_368': 0x10028a4,
    'braille_dots_1368': 0x10028a5,
    'braille_dots_2368': 0x10028a6,
    'braille_dots_12368': 0x10028a7,
    'braille_dots_468': 0x10028a8,
    'braille_dots_1468': 0x10028a9,
    'braille_dots_2468': 0x10028aa,
    'braille_dots_12468': 0x10028ab,
    'braille_dots_3468': 0x10028ac,
    'braille_dots_13468': 0x10028ad,
    'braille_dots_23468': 0x10028ae,
    'braille_dots_123468': 0x10028af,
    'braille_dots_568': 0x10028b0,
    'braille_dots_1568': 0x10028b1,
    'braille_dots_2568': 0x10028b2,
    'braille_dots_12568': 0x10028b3,
    'braille_dots_3568': 0x10028b4,
    'braille_dots_13568': 0x10028b5,
    'braille_dots_23568': 0x10028b6,
    'braille_dots_123568': 0x10028b7,
    'braille_dots_4568': 0x10028b8,
    'braille_dots_14568': 0x10028b9,
    'braille_dots_24568': 0x10028ba,
    'braille_dots_124568': 0x10028bb,
    'braille_dots_34568': 0x10028bc,
    'braille_dots_134568': 0x10028bd,
    'braille_dots_234568': 0x10028be,
    'braille_dots_1234568': 0x10028bf,
    'braille_dots_78': 0x10028c0,
    'braille_dots_178': 0x10028c1,
    'braille_dots_278': 0x10028c2,
    'braille_dots_1278': 0x10028c3,
    'braille_dots_378': 0x10028c4,
    'braille_dots_1378': 0x10028c5,
    'braille_dots_2378': 0x10028c6,
    'braille_dots_12378': 0x10028c7,
    'braille_dots_478': 0x10028c8,
    'braille_dots_1478': 0x10028c9,
    'braille_dots_2478': 0x10028ca,
    'braille_dots_12478': 0x10028cb,
    'braille_dots_3478': 0x10028cc,
    'braille_dots_13478': 0x10028cd,
    'braille_dots_23478': 0x10028ce,
    'braille_dots_123478': 0x10028cf,
    'braille_dots_578': 0x10028d0,
    'braille_dots_1578': 0x10028d1,
    'braille_dots_2578': 0x10028d2,
    'braille_dots_12578': 0x10028d3,
    'braille_dots_3578': 0x10028d4,
    'braille_dots_13578': 0x10028d5,
    'braille_dots_23578': 0x10028d6,
    'braille_dots_123578': 0x10028d7,
    'braille_dots_4578': 0x10028d8,
    'braille_dots_14578': 0x10028d9,
    'braille_dots_24578': 0x10028da,
    'braille_dots_124578': 0x10028db,
    'braille_dots_34578': 0x10028dc,
    'braille_dots_134578': 0x10028dd,
    'braille_dots_234578': 0x10028de,
    'braille_dots_1234578': 0x10028df,
    'braille_dots_678': 0x10028e0,
    'braille_dots_1678': 0x10028e1,
    'braille_dots_2678': 0x10028e2,
    'braille_dots_12678': 0x10028e3,
    'braille_dots_3678': 0x10028e4,
    'braille_dots_13678': 0x10028e5,
    'braille_dots_23678': 0x10028e6,
    'braille_dots_123678': 0x10028e7,
    'braille_dots_4678': 0x10028e8,
    'braille_dots_14678': 0x10028e9,
    'braille_dots_24678': 0x10028ea,
    'braille_dots_124678': 0x10028eb,
    'braille_dots_34678': 0x10028ec,
    'braille_dots_134678': 0x10028ed,
    'braille_dots_234678': 0x10028ee,
    'braille_dots_1234678': 0x10028ef,
    'braille_dots_5678': 0x10028f0,
    'braille_dots_15678': 0x10028f1,
    'braille_dots_25678': 0x10028f2,
    'braille_dots_125678': 0x10028f3,
    'braille_dots_35678': 0x10028f4,
    'braille_dots_135678': 0x10028f5,
    'braille_dots_235678': 0x10028f6,
    'braille_dots_1235678': 0x10028f7,
    'braille_dots_45678': 0x10028f8,
    'braille_dots_145678': 0x10028f9,
    'braille_dots_245678': 0x10028fa,
    'braille_dots_1245678': 0x10028fb,
    'braille_dots_345678': 0x10028fc,
    'braille_dots_1345678': 0x10028fd,
    'braille_dots_2345678': 0x10028fe,
    'braille_dots_12345678': 0x10028ff,
    'XF86PowerOff': 0x1008ff2a,
    'XF86WakeUp': 0x1008ff2b,
    'XF86Sleep': 0x1008ff2f,
    }
* Fri 09 Jan 2015 02:35:36 AM JST
    KEYSYMDEF = {
        'space': 0x20,
        'exclam': 0x21,
        'quotedbl': 0x22,
        'numbersign': 0x23,
        'dollar': 0x24,
        'percent': 0x25,
        'ampersand': 0x26,
        'apostrophe': 0x27,
        'parenleft': 0x28,
        'parenright': 0x29,
        'asterisk': 0x2a,
        'plus': 0x2b,
        'comma': 0x2c,
        'minus': 0x2d,
        'period': 0x2e,
        'slash': 0x2f,
        '0': 0x30,
        '1': 0x31,
        '2': 0x32,
        '3': 0x33,
        '4': 0x34,
        '5': 0x35,
        '6': 0x36,
        '7': 0x37,
        '8': 0x38,
        '9': 0x39,
        'colon': 0x3a,
        'semicolon': 0x3b,
        'less': 0x3c,
        'equal': 0x3d,
        'greater': 0x3e,
        'question': 0x3f,
        'at': 0x40,
        'A': 0x41,
        'B': 0x42,
        'C': 0x43,
        'D': 0x44,
        'E': 0x45,
        'F': 0x46,
        'G': 0x47,
        'H': 0x48,
        'I': 0x49,
        'J': 0x4a,
        'K': 0x4b,
        'L': 0x4c,
        'M': 0x4d,
        'N': 0x4e,
        'O': 0x4f,
        'P': 0x50,
        'Q': 0x51,
        'R': 0x52,
        'S': 0x53,
        'T': 0x54,
        'U': 0x55,
        'V': 0x56,
        'W': 0x57,
        'X': 0x58,
        'Y': 0x59,
        'Z': 0x5a,
        'bracketleft': 0x5b,
        'backslash': 0x5c,
        'bracketright': 0x5d,
        'asciicircum': 0x5e,
        'underscore': 0x5f,
        'quoteleft': 0x60,
        'a': 0x61,
        'b': 0x62,
        'c': 0x63,
        'd': 0x64,
        'e': 0x65,
        'f': 0x66,
        'g': 0x67,
        'h': 0x68,
        'i': 0x69,
        'j': 0x6a,
        'k': 0x6b,
        'l': 0x6c,
        'm': 0x6d,
        'n': 0x6e,
        'o': 0x6f,
        'p': 0x70,
        'q': 0x71,
        'r': 0x72,
        's': 0x73,
        't': 0x74,
        'u': 0x75,
        'v': 0x76,
        'w': 0x77,
        'x': 0x78,
        'y': 0x79,
        'z': 0x7a,
        'braceleft': 0x7b,
        'bar': 0x7c,
        'braceright': 0x7d,
        'asciitilde': 0x7e,
        'nobreakspace': 0xa0,
        'exclamdown': 0xa1,
        'cent': 0xa2,
        'sterling': 0xa3,
        'currency': 0xa4,
        'yen': 0xa5,
        'brokenbar': 0xa6,
        'section': 0xa7,
        'diaeresis': 0xa8,
        'copyright': 0xa9,
        'ordfeminine': 0xaa,
        'guillemotleft': 0xab,
        'notsign': 0xac,
        'hyphen': 0xad,
        'registered': 0xae,
        'macron': 0xaf,
        'degree': 0xb0,
        'plusminus': 0xb1,
        'twosuperior': 0xb2,
        'threesuperior': 0xb3,
        'acute': 0xb4,
        'mu': 0xb5,
        'paragraph': 0xb6,
        'periodcentered': 0xb7,
        'cedilla': 0xb8,
        'onesuperior': 0xb9,
        'masculine': 0xba,
        'guillemotright': 0xbb,
        'onequarter': 0xbc,
        'onehalf': 0xbd,
        'threequarters': 0xbe,
        'questiondown': 0xbf,
        'Agrave': 0xc0,
        'Aacute': 0xc1,
        'Acircumflex': 0xc2,
        'Atilde': 0xc3,
        'Adiaeresis': 0xc4,
        'Aring': 0xc5,
        'AE': 0xc6,
        'Ccedilla': 0xc7,
        'Egrave': 0xc8,
        'Eacute': 0xc9,
        'Ecircumflex': 0xca,
        'Ediaeresis': 0xcb,
        'Igrave': 0xcc,
        'Iacute': 0xcd,
        'Icircumflex': 0xce,
        'Idiaeresis': 0xcf,
        'Eth': 0xd0,
        'Ntilde': 0xd1,
        'Ograve': 0xd2,
        'Oacute': 0xd3,
        'Ocircumflex': 0xd4,
        'Otilde': 0xd5,
        'Odiaeresis': 0xd6,
        'multiply': 0xd7,
        'Oslash': 0xd8,
        'Ugrave': 0xd9,
        'Uacute': 0xda,
        'Ucircumflex': 0xdb,
        'Udiaeresis': 0xdc,
        'Yacute': 0xdd,
        'Thorn': 0xde,
        'ssharp': 0xdf,
        'agrave': 0xe0,
        'aacute': 0xe1,
        'acircumflex': 0xe2,
        'atilde': 0xe3,
        'adiaeresis': 0xe4,
        'aring': 0xe5,
        'ae': 0xe6,
        'ccedilla': 0xe7,
        'egrave': 0xe8,
        'eacute': 0xe9,
        'ecircumflex': 0xea,
        'ediaeresis': 0xeb,
        'igrave': 0xec,
        'iacute': 0xed,
        'icircumflex': 0xee,
        'idiaeresis': 0xef,
        'eth': 0xf0,
        'ntilde': 0xf1,
        'ograve': 0xf2,
        'oacute': 0xf3,
        'ocircumflex': 0xf4,
        'otilde': 0xf5,
        'odiaeresis': 0xf6,
        'division': 0xf7,
        'ooblique': 0xf8,
        'ugrave': 0xf9,
        'uacute': 0xfa,
        'ucircumflex': 0xfb,
        'udiaeresis': 0xfc,
        'yacute': 0xfd,
        'thorn': 0xfe,
        'ydiaeresis': 0xff,
        'Aogonek': 0x1a1,
        'breve': 0x1a2,
        'Lstroke': 0x1a3,
        'Lcaron': 0x1a5,
        'Sacute': 0x1a6,
        'Scaron': 0x1a9,
        'Scedilla': 0x1aa,
        'Tcaron': 0x1ab,
        'Zacute': 0x1ac,
        'Zcaron': 0x1ae,
        'Zabovedot': 0x1af,
        'aogonek': 0x1b1,
        'ogonek': 0x1b2,
        'lstroke': 0x1b3,
        'lcaron': 0x1b5,
        'sacute': 0x1b6,
        'caron': 0x1b7,
        'scaron': 0x1b9,
        'scedilla': 0x1ba,
        'tcaron': 0x1bb,
        'zacute': 0x1bc,
        'doubleacute': 0x1bd,
        'zcaron': 0x1be,
        'zabovedot': 0x1bf,
        'Racute': 0x1c0,
        'Abreve': 0x1c3,
        'Lacute': 0x1c5,
        'Cacute': 0x1c6,
        'Ccaron': 0x1c8,
        'Eogonek': 0x1ca,
        'Ecaron': 0x1cc,
        'Dcaron': 0x1cf,
        'Dstroke': 0x1d0,
        'Nacute': 0x1d1,
        'Ncaron': 0x1d2,
        'Odoubleacute': 0x1d5,
        'Rcaron': 0x1d8,
        'Uring': 0x1d9,
        'Udoubleacute': 0x1db,
        'Tcedilla': 0x1de,
        'racute': 0x1e0,
        'abreve': 0x1e3,
        'lacute': 0x1e5,
        'cacute': 0x1e6,
        'ccaron': 0x1e8,
        'eogonek': 0x1ea,
        'ecaron': 0x1ec,
        'dcaron': 0x1ef,
        'dstroke': 0x1f0,
        'nacute': 0x1f1,
        'ncaron': 0x1f2,
        'odoubleacute': 0x1f5,
        'rcaron': 0x1f8,
        'uring': 0x1f9,
        'udoubleacute': 0x1fb,
        'tcedilla': 0x1fe,
        'abovedot': 0x1ff,
        'Hstroke': 0x2a1,
        'Hcircumflex': 0x2a6,
        'Iabovedot': 0x2a9,
        'Gbreve': 0x2ab,
        'Jcircumflex': 0x2ac,
        'hstroke': 0x2b1,
        'hcircumflex': 0x2b6,
        'idotless': 0x2b9,
        'gbreve': 0x2bb,
        'jcircumflex': 0x2bc,
        'Cabovedot': 0x2c5,
        'Ccircumflex': 0x2c6,
        'Gabovedot': 0x2d5,
        'Gcircumflex': 0x2d8,
        'Ubreve': 0x2dd,
        'Scircumflex': 0x2de,
        'cabovedot': 0x2e5,
        'ccircumflex': 0x2e6,
        'gabovedot': 0x2f5,
        'gcircumflex': 0x2f8,
        'ubreve': 0x2fd,
        'scircumflex': 0x2fe,
        'kra': 0x3a2,
        'Rcedilla': 0x3a3,
        'Itilde': 0x3a5,
        'Lcedilla': 0x3a6,
        'Emacron': 0x3aa,
        'Gcedilla': 0x3ab,
        'Tslash': 0x3ac,
        'rcedilla': 0x3b3,
        'itilde': 0x3b5,
        'lcedilla': 0x3b6,
        'emacron': 0x3ba,
        'gcedilla': 0x3bb,
        'tslash': 0x3bc,
        'ENG': 0x3bd,
        'eng': 0x3bf,
        'Amacron': 0x3c0,
        'Iogonek': 0x3c7,
        'Eabovedot': 0x3cc,
        'Imacron': 0x3cf,
        'Ncedilla': 0x3d1,
        'Omacron': 0x3d2,
        'Kcedilla': 0x3d3,
        'Uogonek': 0x3d9,
        'Utilde': 0x3dd,
        'Umacron': 0x3de,
        'amacron': 0x3e0,
        'iogonek': 0x3e7,
        'eabovedot': 0x3ec,
        'imacron': 0x3ef,
        'ncedilla': 0x3f1,
        'omacron': 0x3f2,
        'kcedilla': 0x3f3,
        'uogonek': 0x3f9,
        'utilde': 0x3fd,
        'umacron': 0x3fe,
        'overline': 0x47e,
        'kana_fullstop': 0x4a1,
        'kana_openingbracket': 0x4a2,
        'kana_closingbracket': 0x4a3,
        'kana_comma': 0x4a4,
        'kana_conjunctive': 0x4a5,
        'kana_WO': 0x4a6,
        'kana_a': 0x4a7,
        'kana_i': 0x4a8,
        'kana_u': 0x4a9,
        'kana_e': 0x4aa,
        'kana_o': 0x4ab,
        'kana_ya': 0x4ac,
        'kana_yu': 0x4ad,
        'kana_yo': 0x4ae,
        'kana_tsu': 0x4af,
        'prolongedsound': 0x4b0,
        'kana_A': 0x4b1,
        'kana_I': 0x4b2,
        'kana_U': 0x4b3,
        'kana_E': 0x4b4,
        'kana_O': 0x4b5,
        'kana_KA': 0x4b6,
        'kana_KI': 0x4b7,
        'kana_KU': 0x4b8,
        'kana_KE': 0x4b9,
        'kana_KO': 0x4ba,
        'kana_SA': 0x4bb,
        'kana_SHI': 0x4bc,
        'kana_SU': 0x4bd,
        'kana_SE': 0x4be,
        'kana_SO': 0x4bf,
        'kana_TA': 0x4c0,
        'kana_TI': 0x4c1,
        'kana_TSU': 0x4c2,
        'kana_TE': 0x4c3,
        'kana_TO': 0x4c4,
        'kana_NA': 0x4c5,
        'kana_NI': 0x4c6,
        'kana_NU': 0x4c7,
        'kana_NE': 0x4c8,
        'kana_NO': 0x4c9,
        'kana_HA': 0x4ca,
        'kana_HI': 0x4cb,
        'kana_HU': 0x4cc,
        'kana_HE': 0x4cd,
        'kana_HO': 0x4ce,
        'kana_MA': 0x4cf,
        'kana_MI': 0x4d0,
        'kana_MU': 0x4d1,
        'kana_ME': 0x4d2,
        'kana_MO': 0x4d3,
        'kana_YA': 0x4d4,
        'kana_YU': 0x4d5,
        'kana_YO': 0x4d6,
        'kana_RA': 0x4d7,
        'kana_RI': 0x4d8,
        'kana_RU': 0x4d9,
        'kana_RE': 0x4da,
        'kana_RO': 0x4db,
        'kana_WA': 0x4dc,
        'kana_N': 0x4dd,
        'voicedsound': 0x4de,
        'semivoicedsound': 0x4df,
        'Arabic_comma': 0x5ac,
        'Arabic_semicolon': 0x5bb,
        'Arabic_question_mark': 0x5bf,
        'Arabic_hamza': 0x5c1,
        'Arabic_maddaonalef': 0x5c2,
        'Arabic_hamzaonalef': 0x5c3,
        'Arabic_hamzaonwaw': 0x5c4,
        'Arabic_hamzaunderalef': 0x5c5,
        'Arabic_hamzaonyeh': 0x5c6,
        'Arabic_alef': 0x5c7,
        'Arabic_beh': 0x5c8,
        'Arabic_tehmarbuta': 0x5c9,
        'Arabic_teh': 0x5ca,
        'Arabic_theh': 0x5cb,
        'Arabic_jeem': 0x5cc,
        'Arabic_hah': 0x5cd,
        'Arabic_khah': 0x5ce,
        'Arabic_dal': 0x5cf,
        'Arabic_thal': 0x5d0,
        'Arabic_ra': 0x5d1,
        'Arabic_zain': 0x5d2,
        'Arabic_seen': 0x5d3,
        'Arabic_sheen': 0x5d4,
        'Arabic_sad': 0x5d5,
        'Arabic_dad': 0x5d6,
        'Arabic_tah': 0x5d7,
        'Arabic_zah': 0x5d8,
        'Arabic_ain': 0x5d9,
        'Arabic_ghain': 0x5da,
        'Arabic_tatweel': 0x5e0,
        'Arabic_feh': 0x5e1,
        'Arabic_qaf': 0x5e2,
        'Arabic_kaf': 0x5e3,
        'Arabic_lam': 0x5e4,
        'Arabic_meem': 0x5e5,
        'Arabic_noon': 0x5e6,
        'Arabic_ha': 0x5e7,
        'Arabic_waw': 0x5e8,
        'Arabic_alefmaksura': 0x5e9,
        'Arabic_yeh': 0x5ea,
        'Arabic_fathatan': 0x5eb,
        'Arabic_dammatan': 0x5ec,
        'Arabic_kasratan': 0x5ed,
        'Arabic_fatha': 0x5ee,
        'Arabic_damma': 0x5ef,
        'Arabic_kasra': 0x5f0,
        'Arabic_shadda': 0x5f1,
        'Arabic_sukun': 0x5f2,
        'Serbian_dje': 0x6a1,
        'Macedonia_gje': 0x6a2,
        'Cyrillic_io': 0x6a3,
        'Ukranian_je': 0x6a4,
        'Macedonia_dse': 0x6a5,
        'Ukranian_i': 0x6a6,
        'Ukranian_yi': 0x6a7,
        'Cyrillic_je': 0x6a8,
        'Serbian_lje': 0x6a9,
        'Serbian_nje': 0x6aa,
        'Serbian_tshe': 0x6ab,
        'Macedonia_kje': 0x6ac,
        'Ukrainian_ghe_with_upturn': 0x6ad,
        'Byelorussian_shortu': 0x6ae,
        'Cyrillic_dzhe': 0x6af,
        'numerosign': 0x6b0,
        'Serbian_DJE': 0x6b1,
        'Macedonia_GJE': 0x6b2,
        'Cyrillic_IO': 0x6b3,
        'Ukranian_JE': 0x6b4,
        'Macedonia_DSE': 0x6b5,
        'Ukranian_I': 0x6b6,
        'Ukrainian_YI': 0x6b7,
        'Serbian_JE': 0x6b8,
        'Cyrillic_LJE': 0x6b9,
        'Serbian_NJE': 0x6ba,
        'Serbian_TSHE': 0x6bb,
        'Macedonia_KJE': 0x6bc,
        'Ukrainian_GHE_WITH_UPTURN': 0x6bd,
        'Byelorussian_SHORTU': 0x6be,
        'Serbian_DZE': 0x6bf,
        'Cyrillic_yu': 0x6c0,
        'Cyrillic_a': 0x6c1,
        'Cyrillic_be': 0x6c2,
        'Cyrillic_tse': 0x6c3,
        'Cyrillic_de': 0x6c4,
        'Cyrillic_ie': 0x6c5,
        'Cyrillic_ef': 0x6c6,
        'Cyrillic_ghe': 0x6c7,
        'Cyrillic_ha': 0x6c8,
        'Cyrillic_i': 0x6c9,
        'Cyrillic_shorti': 0x6ca,
        'Cyrillic_ka': 0x6cb,
        'Cyrillic_el': 0x6cc,
        'Cyrillic_em': 0x6cd,
        'Cyrillic_en': 0x6ce,
        'Cyrillic_o': 0x6cf,
        'Cyrillic_pe': 0x6d0,
        'Cyrillic_ya': 0x6d1,
        'Cyrillic_er': 0x6d2,
        'Cyrillic_es': 0x6d3,
        'Cyrillic_te': 0x6d4,
        'Cyrillic_u': 0x6d5,
        'Cyrillic_zhe': 0x6d6,
        'Cyrillic_ve': 0x6d7,
        'Cyrillic_softsign': 0x6d8,
        'Cyrillic_yeru': 0x6d9,
        'Cyrillic_ze': 0x6da,
        'Cyrillic_sha': 0x6db,
        'Cyrillic_e': 0x6dc,
        'Cyrillic_shcha': 0x6dd,
        'Cyrillic_che': 0x6de,
        'Cyrillic_hardsign': 0x6df,
        'Cyrillic_YU': 0x6e0,
        'Cyrillic_A': 0x6e1,
        'Cyrillic_BE': 0x6e2,
        'Cyrillic_TSE': 0x6e3,
        'Cyrillic_DE': 0x6e4,
        'Cyrillic_IE': 0x6e5,
        'Cyrillic_EF': 0x6e6,
        'Cyrillic_GHE': 0x6e7,
        'Cyrillic_HA': 0x6e8,
        'Cyrillic_I': 0x6e9,
        'Cyrillic_SHORTI': 0x6ea,
        'Cyrillic_KA': 0x6eb,
        'Cyrillic_EL': 0x6ec,
        'Cyrillic_EM': 0x6ed,
        'Cyrillic_EN': 0x6ee,
        'Cyrillic_O': 0x6ef,
        'Cyrillic_PE': 0x6f0,
        'Cyrillic_YA': 0x6f1,
        'Cyrillic_ER': 0x6f2,
        'Cyrillic_ES': 0x6f3,
        'Cyrillic_TE': 0x6f4,
        'Cyrillic_U': 0x6f5,
        'Cyrillic_ZHE': 0x6f6,
        'Cyrillic_VE': 0x6f7,
        'Cyrillic_SOFTSIGN': 0x6f8,
        'Cyrillic_YERU': 0x6f9,
        'Cyrillic_ZE': 0x6fa,
        'Cyrillic_SHA': 0x6fb,
        'Cyrillic_E': 0x6fc,
        'Cyrillic_SHCHA': 0x6fd,
        'Cyrillic_CHE': 0x6fe,
        'Cyrillic_HARDSIGN': 0x6ff,
        'Greek_ALPHAaccent': 0x7a1,
        'Greek_EPSILONaccent': 0x7a2,
        'Greek_ETAaccent': 0x7a3,
        'Greek_IOTAaccent': 0x7a4,
        'Greek_IOTAdiaeresis': 0x7a5,
        'Greek_OMICRONaccent': 0x7a7,
        'Greek_UPSILONaccent': 0x7a8,
        'Greek_UPSILONdieresis': 0x7a9,
        'Greek_OMEGAaccent': 0x7ab,
        'Greek_accentdieresis': 0x7ae,
        'Greek_horizbar': 0x7af,
        'Greek_alphaaccent': 0x7b1,
        'Greek_epsilonaccent': 0x7b2,
        'Greek_etaaccent': 0x7b3,
        'Greek_iotaaccent': 0x7b4,
        'Greek_iotadieresis': 0x7b5,
        'Greek_iotaaccentdieresis': 0x7b6,
        'Greek_omicronaccent': 0x7b7,
        'Greek_upsilonaccent': 0x7b8,
        'Greek_upsilondieresis': 0x7b9,
        'Greek_upsilonaccentdieresis': 0x7ba,
        'Greek_omegaaccent': 0x7bb,
        'Greek_ALPHA': 0x7c1,
        'Greek_BETA': 0x7c2,
        'Greek_GAMMA': 0x7c3,
        'Greek_DELTA': 0x7c4,
        'Greek_EPSILON': 0x7c5,
        'Greek_ZETA': 0x7c6,
        'Greek_ETA': 0x7c7,
        'Greek_THETA': 0x7c8,
        'Greek_IOTA': 0x7c9,
        'Greek_KAPPA': 0x7ca,
        'Greek_LAMBDA': 0x7cb,
        'Greek_MU': 0x7cc,
        'Greek_NU': 0x7cd,
        'Greek_XI': 0x7ce,
        'Greek_OMICRON': 0x7cf,
        'Greek_PI': 0x7d0,
        'Greek_RHO': 0x7d1,
        'Greek_SIGMA': 0x7d2,
        'Greek_TAU': 0x7d4,
        'Greek_UPSILON': 0x7d5,
        'Greek_PHI': 0x7d6,
        'Greek_CHI': 0x7d7,
        'Greek_PSI': 0x7d8,
        'Greek_OMEGA': 0x7d9,
        'Greek_alpha': 0x7e1,
        'Greek_beta': 0x7e2,
        'Greek_gamma': 0x7e3,
        'Greek_delta': 0x7e4,
        'Greek_epsilon': 0x7e5,
        'Greek_zeta': 0x7e6,
        'Greek_eta': 0x7e7,
        'Greek_theta': 0x7e8,
        'Greek_iota': 0x7e9,
        'Greek_kappa': 0x7ea,
        'Greek_lamda': 0x7eb,
        'Greek_mu': 0x7ec,
        'Greek_nu': 0x7ed,
        'Greek_xi': 0x7ee,
        'Greek_omicron': 0x7ef,
        'Greek_pi': 0x7f0,
        'Greek_rho': 0x7f1,
        'Greek_sigma': 0x7f2,
        'Greek_finalsmallsigma': 0x7f3,
        'Greek_tau': 0x7f4,
        'Greek_upsilon': 0x7f5,
        'Greek_phi': 0x7f6,
        'Greek_chi': 0x7f7,
        'Greek_psi': 0x7f8,
        'Greek_omega': 0x7f9,
        'leftradical': 0x8a1,
        'topleftradical': 0x8a2,
        'horizconnector': 0x8a3,
        'topintegral': 0x8a4,
        'botintegral': 0x8a5,
        'vertconnector': 0x8a6,
        'topleftsqbracket': 0x8a7,
        'botleftsqbracket': 0x8a8,
        'toprightsqbracket': 0x8a9,
        'botrightsqbracket': 0x8aa,
        'topleftparens': 0x8ab,
        'botleftparens': 0x8ac,
        'toprightparens': 0x8ad,
        'botrightparens': 0x8ae,
        'leftmiddlecurlybrace': 0x8af,
        'rightmiddlecurlybrace': 0x8b0,
        'topleftsummation': 0x8b1,
        'botleftsummation': 0x8b2,
        'topvertsummationconnector': 0x8b3,
        'botvertsummationconnector': 0x8b4,
        'toprightsummation': 0x8b5,
        'botrightsummation': 0x8b6,
        'rightmiddlesummation': 0x8b7,
        'lessthanequal': 0x8bc,
        'notequal': 0x8bd,
        'greaterthanequal': 0x8be,
        'integral': 0x8bf,
        'therefore': 0x8c0,
        'variation': 0x8c1,
        'infinity': 0x8c2,
        'nabla': 0x8c5,
        'approximate': 0x8c8,
        'similarequal': 0x8c9,
        'ifonlyif': 0x8cd,
        'implies': 0x8ce,
        'identical': 0x8cf,
        'radical': 0x8d6,
        'includedin': 0x8da,
        'includes': 0x8db,
        'intersection': 0x8dc,
        'union': 0x8dd,
        'logicaland': 0x8de,
        'logicalor': 0x8df,
        'partialderivative': 0x8ef,
        'function': 0x8f6,
        'leftarrow': 0x8fb,
        'uparrow': 0x8fc,
        'rightarrow': 0x8fd,
        'downarrow': 0x8fe,
        'blank': 0x9df,
        'soliddiamond': 0x9e0,
        'checkerboard': 0x9e1,
        'ht': 0x9e2,
        'ff': 0x9e3,
        'cr': 0x9e4,
        'lf': 0x9e5,
        'nl': 0x9e8,
        'vt': 0x9e9,
        'lowrightcorner': 0x9ea,
        'uprightcorner': 0x9eb,
        'upleftcorner': 0x9ec,
        'lowleftcorner': 0x9ed,
        'crossinglines': 0x9ee,
        'horizlinescan1': 0x9ef,
        'horizlinescan3': 0x9f0,
        'horizlinescan5': 0x9f1,
        'horizlinescan7': 0x9f2,
        'horizlinescan9': 0x9f3,
        'leftt': 0x9f4,
        'rightt': 0x9f5,
        'bott': 0x9f6,
        'topt': 0x9f7,
        'vertbar': 0x9f8,
        'emspace': 0xaa1,
        'enspace': 0xaa2,
        'em3space': 0xaa3,
        'em4space': 0xaa4,
        'digitspace': 0xaa5,
        'punctspace': 0xaa6,
        'thinspace': 0xaa7,
        'hairspace': 0xaa8,
        'emdash': 0xaa9,
        'endash': 0xaaa,
        'signifblank': 0xaac,
        'ellipsis': 0xaae,
        'doubbaselinedot': 0xaaf,
        'onethird': 0xab0,
        'twothirds': 0xab1,
        'onefifth': 0xab2,
        'twofifths': 0xab3,
        'threefifths': 0xab4,
        'fourfifths': 0xab5,
        'onesixth': 0xab6,
        'fivesixths': 0xab7,
        'careof': 0xab8,
        'figdash': 0xabb,
        'leftanglebracket': 0xabc,
        'decimalpoint': 0xabd,
        'rightanglebracket': 0xabe,
        'marker': 0xabf,
        'oneeighth': 0xac3,
        'threeeighths': 0xac4,
        'fiveeighths': 0xac5,
        'seveneighths': 0xac6,
        'trademark': 0xac9,
        'signaturemark': 0xaca,
        'trademarkincircle': 0xacb,
        'leftopentriangle': 0xacc,
        'rightopentriangle': 0xacd,
        'emopencircle': 0xace,
        'emopenrectangle': 0xacf,
        'leftsinglequotemark': 0xad0,
        'rightsinglequotemark': 0xad1,
        'leftdoublequotemark': 0xad2,
        'rightdoublequotemark': 0xad3,
        'prescription': 0xad4,
        'permille': 0xad5,
        'minutes': 0xad6,
        'seconds': 0xad7,
        'latincross': 0xad9,
        'hexagram': 0xada,
        'filledrectbullet': 0xadb,
        'filledlefttribullet': 0xadc,
        'filledrighttribullet': 0xadd,
        'emfilledcircle': 0xade,
        'emfilledrect': 0xadf,
        'enopencircbullet': 0xae0,
        'enopensquarebullet': 0xae1,
        'openrectbullet': 0xae2,
        'opentribulletup': 0xae3,
        'opentribulletdown': 0xae4,
        'openstar': 0xae5,
        'enfilledcircbullet': 0xae6,
        'enfilledsqbullet': 0xae7,
        'filledtribulletup': 0xae8,
        'filledtribulletdown': 0xae9,
        'leftpointer': 0xaea,
        'rightpointer': 0xaeb,
        'club': 0xaec,
        'diamond': 0xaed,
        'heart': 0xaee,
        'maltesecross': 0xaf0,
        'dagger': 0xaf1,
        'doubledagger': 0xaf2,
        'checkmark': 0xaf3,
        'ballotcross': 0xaf4,
        'musicalsharp': 0xaf5,
        'musicalflat': 0xaf6,
        'malesymbol': 0xaf7,
        'femalesymbol': 0xaf8,
        'telephone': 0xaf9,
        'telephonerecorder': 0xafa,
        'phonographcopyright': 0xafb,
        'caret': 0xafc,
        'singlelowquotemark': 0xafd,
        'doublelowquotemark': 0xafe,
        'cursor': 0xaff,
        'leftcaret': 0xba3,
        'rightcaret': 0xba6,
        'downcaret': 0xba8,
        'upcaret': 0xba9,
        'overbar': 0xbc0,
        'downtack': 0xbc2,
        'upshoe': 0xbc3,
        'downstile': 0xbc4,
        'underbar': 0xbc6,
        'jot': 0xbca,
        'quad': 0xbcc,
        'uptack': 0xbce,
        'circle': 0xbcf,
        'upstile': 0xbd3,
        'downshoe': 0xbd6,
        'rightshoe': 0xbd8,
        'leftshoe': 0xbda,
        'lefttack': 0xbdc,
        'righttack': 0xbfc,
        'hebrew_doublelowline': 0xcdf,
        'hebrew_aleph': 0xce0,
        'hebrew_bet': 0xce1,
        'hebrew_gimel': 0xce2,
        'hebrew_daleth': 0xce3,
        'hebrew_he': 0xce4,
        'hebrew_waw': 0xce5,
        'hebrew_zayin': 0xce6,
        'hebrew_chet': 0xce7,
        'hebrew_tet': 0xce8,
        'hebrew_yod': 0xce9,
        'hebrew_finalkaph': 0xcea,
        'hebrew_kaph': 0xceb,
        'hebrew_lamed': 0xcec,
        'hebrew_finalmem': 0xced,
        'hebrew_mem': 0xcee,
        'hebrew_finalnun': 0xcef,
        'hebrew_nun': 0xcf0,
        'hebrew_samech': 0xcf1,
        'hebrew_ayin': 0xcf2,
        'hebrew_finalpe': 0xcf3,
        'hebrew_pe': 0xcf4,
        'hebrew_finalzadi': 0xcf5,
        'hebrew_zadi': 0xcf6,
        'hebrew_kuf': 0xcf7,
        'hebrew_resh': 0xcf8,
        'hebrew_shin': 0xcf9,
        'hebrew_taf': 0xcfa,
        'Thai_kokai': 0xda1,
        'Thai_khokhai': 0xda2,
        'Thai_khokhuat': 0xda3,
        'Thai_khokhwai': 0xda4,
        'Thai_khokhon': 0xda5,
        'Thai_khorakhang': 0xda6,
        'Thai_ngongu': 0xda7,
        'Thai_chochan': 0xda8,
        'Thai_choching': 0xda9,
        'Thai_chochang': 0xdaa,
        'Thai_soso': 0xdab,
        'Thai_chochoe': 0xdac,
        'Thai_yoying': 0xdad,
        'Thai_dochada': 0xdae,
        'Thai_topatak': 0xdaf,
        'Thai_thothan': 0xdb0,
        'Thai_thonangmontho': 0xdb1,
        'Thai_thophuthao': 0xdb2,
        'Thai_nonen': 0xdb3,
        'Thai_dodek': 0xdb4,
        'Thai_totao': 0xdb5,
        'Thai_thothung': 0xdb6,
        'Thai_thothahan': 0xdb7,
        'Thai_thothong': 0xdb8,
        'Thai_nonu': 0xdb9,
        'Thai_bobaimai': 0xdba,
        'Thai_popla': 0xdbb,
        'Thai_phophung': 0xdbc,
        'Thai_fofa': 0xdbd,
        'Thai_phophan': 0xdbe,
        'Thai_fofan': 0xdbf,
        'Thai_phosamphao': 0xdc0,
        'Thai_moma': 0xdc1,
        'Thai_yoyak': 0xdc2,
        'Thai_rorua': 0xdc3,
        'Thai_ru': 0xdc4,
        'Thai_loling': 0xdc5,
        'Thai_lu': 0xdc6,
        'Thai_wowaen': 0xdc7,
        'Thai_sosala': 0xdc8,
        'Thai_sorusi': 0xdc9,
        'Thai_sosua': 0xdca,
        'Thai_hohip': 0xdcb,
        'Thai_lochula': 0xdcc,
        'Thai_oang': 0xdcd,
        'Thai_honokhuk': 0xdce,
        'Thai_paiyannoi': 0xdcf,
        'Thai_saraa': 0xdd0,
        'Thai_maihanakat': 0xdd1,
        'Thai_saraaa': 0xdd2,
        'Thai_saraam': 0xdd3,
        'Thai_sarai': 0xdd4,
        'Thai_saraii': 0xdd5,
        'Thai_saraue': 0xdd6,
        'Thai_sarauee': 0xdd7,
        'Thai_sarau': 0xdd8,
        'Thai_sarauu': 0xdd9,
        'Thai_phinthu': 0xdda,
        'Thai_maihanakat_maitho': 0xdde,
        'Thai_baht': 0xddf,
        'Thai_sarae': 0xde0,
        'Thai_saraae': 0xde1,
        'Thai_sarao': 0xde2,
        'Thai_saraaimaimuan': 0xde3,
        'Thai_saraaimaimalai': 0xde4,
        'Thai_lakkhangyao': 0xde5,
        'Thai_maiyamok': 0xde6,
        'Thai_maitaikhu': 0xde7,
        'Thai_maiek': 0xde8,
        'Thai_maitho': 0xde9,
        'Thai_maitri': 0xdea,
        'Thai_maichattawa': 0xdeb,
        'Thai_thanthakhat': 0xdec,
        'Thai_nikhahit': 0xded,
        'Thai_leksun': 0xdf0,
        'Thai_leknung': 0xdf1,
        'Thai_leksong': 0xdf2,
        'Thai_leksam': 0xdf3,
        'Thai_leksi': 0xdf4,
        'Thai_lekha': 0xdf5,
        'Thai_lekhok': 0xdf6,
        'Thai_lekchet': 0xdf7,
        'Thai_lekpaet': 0xdf8,
        'Thai_lekkao': 0xdf9,
        'Hangul_Kiyeog': 0xea1,
        'Hangul_SsangKiyeog': 0xea2,
        'Hangul_KiyeogSios': 0xea3,
        'Hangul_Nieun': 0xea4,
        'Hangul_NieunJieuj': 0xea5,
        'Hangul_NieunHieuh': 0xea6,
        'Hangul_Dikeud': 0xea7,
        'Hangul_SsangDikeud': 0xea8,
        'Hangul_Rieul': 0xea9,
        'Hangul_RieulKiyeog': 0xeaa,
        'Hangul_RieulMieum': 0xeab,
        'Hangul_RieulPieub': 0xeac,
        'Hangul_RieulSios': 0xead,
        'Hangul_RieulTieut': 0xeae,
        'Hangul_RieulPhieuf': 0xeaf,
        'Hangul_RieulHieuh': 0xeb0,
        'Hangul_Mieum': 0xeb1,
        'Hangul_Pieub': 0xeb2,
        'Hangul_SsangPieub': 0xeb3,
        'Hangul_PieubSios': 0xeb4,
        'Hangul_Sios': 0xeb5,
        'Hangul_SsangSios': 0xeb6,
        'Hangul_Ieung': 0xeb7,
        'Hangul_Jieuj': 0xeb8,
        'Hangul_SsangJieuj': 0xeb9,
        'Hangul_Cieuc': 0xeba,
        'Hangul_Khieuq': 0xebb,
        'Hangul_Tieut': 0xebc,
        'Hangul_Phieuf': 0xebd,
        'Hangul_Hieuh': 0xebe,
        'Hangul_A': 0xebf,
        'Hangul_AE': 0xec0,
        'Hangul_YA': 0xec1,
        'Hangul_YAE': 0xec2,
        'Hangul_EO': 0xec3,
        'Hangul_E': 0xec4,
        'Hangul_YEO': 0xec5,
        'Hangul_YE': 0xec6,
        'Hangul_O': 0xec7,
        'Hangul_WA': 0xec8,
        'Hangul_WAE': 0xec9,
        'Hangul_OE': 0xeca,
        'Hangul_YO': 0xecb,
        'Hangul_U': 0xecc,
        'Hangul_WEO': 0xecd,
        'Hangul_WE': 0xece,
        'Hangul_WI': 0xecf,
        'Hangul_YU': 0xed0,
        'Hangul_EU': 0xed1,
        'Hangul_YI': 0xed2,
        'Hangul_I': 0xed3,
        'Hangul_J_Kiyeog': 0xed4,
        'Hangul_J_SsangKiyeog': 0xed5,
        'Hangul_J_KiyeogSios': 0xed6,
        'Hangul_J_Nieun': 0xed7,
        'Hangul_J_NieunJieuj': 0xed8,
        'Hangul_J_NieunHieuh': 0xed9,
        'Hangul_J_Dikeud': 0xeda,
        'Hangul_J_Rieul': 0xedb,
        'Hangul_J_RieulKiyeog': 0xedc,
        'Hangul_J_RieulMieum': 0xedd,
        'Hangul_J_RieulPieub': 0xede,
        'Hangul_J_RieulSios': 0xedf,
        'Hangul_J_RieulTieut': 0xee0,
        'Hangul_J_RieulPhieuf': 0xee1,
        'Hangul_J_RieulHieuh': 0xee2,
        'Hangul_J_Mieum': 0xee3,
        'Hangul_J_Pieub': 0xee4,
        'Hangul_J_PieubSios': 0xee5,
        'Hangul_J_Sios': 0xee6,
        'Hangul_J_SsangSios': 0xee7,
        'Hangul_J_Ieung': 0xee8,
        'Hangul_J_Jieuj': 0xee9,
        'Hangul_J_Cieuc': 0xeea,
        'Hangul_J_Khieuq': 0xeeb,
        'Hangul_J_Tieut': 0xeec,
        'Hangul_J_Phieuf': 0xeed,
        'Hangul_J_Hieuh': 0xeee,
        'Hangul_RieulYeorinHieuh': 0xeef,
        'Hangul_SunkyeongeumMieum': 0xef0,
        'Hangul_SunkyeongeumPieub': 0xef1,
        'Hangul_PanSios': 0xef2,
        'Hangul_KkogjiDalrinIeung': 0xef3,
        'Hangul_SunkyeongeumPhieuf': 0xef4,
        'Hangul_YeorinHieuh': 0xef5,
        'Hangul_AraeA': 0xef6,
        'Hangul_AraeAE': 0xef7,
        'Hangul_J_PanSios': 0xef8,
        'Hangul_J_KkogjiDalrinIeung': 0xef9,
        'Hangul_J_YeorinHieuh': 0xefa,
        'Korean_Won': 0xeff,
        'OE': 0x13bc,
        'oe': 0x13bd,
        'Ydiaeresis': 0x13be,
        'EuroSign': 0x20ac,
        '3270_Duplicate': 0xfd01,
        '3270_FieldMark': 0xfd02,
        '3270_Right2': 0xfd03,
        '3270_Left2': 0xfd04,
        '3270_BackTab': 0xfd05,
        '3270_EraseEOF': 0xfd06,
        '3270_EraseInput': 0xfd07,
        '3270_Reset': 0xfd08,
        '3270_Quit': 0xfd09,
        '3270_PA1': 0xfd0a,
        '3270_PA2': 0xfd0b,
        '3270_PA3': 0xfd0c,
        '3270_Test': 0xfd0d,
        '3270_Attn': 0xfd0e,
        '3270_CursorBlink': 0xfd0f,
        '3270_AltCursor': 0xfd10,
        '3270_KeyClick': 0xfd11,
        '3270_Jump': 0xfd12,
        '3270_Ident': 0xfd13,
        '3270_Rule': 0xfd14,
        '3270_Copy': 0xfd15,
        '3270_Play': 0xfd16,
        '3270_Setup': 0xfd17,
        '3270_Record': 0xfd18,
        '3270_ChangeScreen': 0xfd19,
        '3270_DeleteWord': 0xfd1a,
        '3270_ExSelect': 0xfd1b,
        '3270_CursorSelect': 0xfd1c,
        '3270_PrintScreen': 0xfd1d,
        '3270_Enter': 0xfd1e,
        'ISO_Lock': 0xfe01,
        'ISO_Level2_Latch': 0xfe02,
        'ISO_Level3_Shift': 0xfe03,
        'ISO_Level3_Latch': 0xfe04,
        'ISO_Level3_Lock': 0xfe05,
        'ISO_Group_Latch': 0xfe06,
        'ISO_Group_Lock': 0xfe07,
        'ISO_Next_Group': 0xfe08,
        'ISO_Next_Group_Lock': 0xfe09,
        'ISO_Prev_Group': 0xfe0a,
        'ISO_Prev_Group_Lock': 0xfe0b,
        'ISO_First_Group': 0xfe0c,
        'ISO_First_Group_Lock': 0xfe0d,
        'ISO_Last_Group': 0xfe0e,
        'ISO_Last_Group_Lock': 0xfe0f,
        'ISO_Level5_Shift': 0xfe11,
        'ISO_Level5_Latch': 0xfe12,
        'ISO_Level5_Lock': 0xfe13,
        'ISO_Left_Tab': 0xfe20,
        'ISO_Move_Line_Up': 0xfe21,
        'ISO_Move_Line_Down': 0xfe22,
        'ISO_Partial_Line_Up': 0xfe23,
        'ISO_Partial_Line_Down': 0xfe24,
        'ISO_Partial_Space_Left': 0xfe25,
        'ISO_Partial_Space_Right': 0xfe26,
        'ISO_Set_Margin_Left': 0xfe27,
        'ISO_Set_Margin_Right': 0xfe28,
        'ISO_Release_Margin_Left': 0xfe29,
        'ISO_Release_Margin_Right': 0xfe2a,
        'ISO_Release_Both_Margins': 0xfe2b,
        'ISO_Fast_Cursor_Left': 0xfe2c,
        'ISO_Fast_Cursor_Right': 0xfe2d,
        'ISO_Fast_Cursor_Up': 0xfe2e,
        'ISO_Fast_Cursor_Down': 0xfe2f,
        'ISO_Continuous_Underline': 0xfe30,
        'ISO_Discontinuous_Underline': 0xfe31,
        'ISO_Emphasize': 0xfe32,
        'ISO_Center_Object': 0xfe33,
        'ISO_Enter': 0xfe34,
        'dead_grave': 0xfe50,
        'dead_acute': 0xfe51,
        'dead_circumflex': 0xfe52,
        'dead_tilde': 0xfe53,
        'dead_macron': 0xfe54,
        'dead_breve': 0xfe55,
        'dead_abovedot': 0xfe56,
        'dead_diaeresis': 0xfe57,
        'dead_abovering': 0xfe58,
        'dead_doubleacute': 0xfe59,
        'dead_caron': 0xfe5a,
        'dead_cedilla': 0xfe5b,
        'dead_ogonek': 0xfe5c,
        'dead_iota': 0xfe5d,
        'dead_voiced_sound': 0xfe5e,
        'dead_semivoiced_sound': 0xfe5f,
        'dead_belowdot': 0xfe60,
        'dead_hook': 0xfe61,
        'dead_horn': 0xfe62,
        'dead_stroke': 0xfe63,
        'dead_abovecomma': 0xfe64,
        'dead_abovereversedcomma': 0xfe65,
        'dead_doublegrave': 0xfe66,
        'dead_belowring': 0xfe67,
        'dead_belowmacron': 0xfe68,
        'dead_belowcircumflex': 0xfe69,
        'dead_belowtilde': 0xfe6a,
        'dead_belowbreve': 0xfe6b,
        'dead_belowdiaeresis': 0xfe6c,
        'dead_invertedbreve': 0xfe6d,
        'dead_belowcomma': 0xfe6e,
        'dead_currency': 0xfe6f,
        'AccessX_Enable': 0xfe70,
        'AccessX_Feedback_Enable': 0xfe71,
        'RepeatKeys_Enable': 0xfe72,
        'SlowKeys_Enable': 0xfe73,
        'BounceKeys_Enable': 0xfe74,
        'StickyKeys_Enable': 0xfe75,
        'MouseKeys_Enable': 0xfe76,
        'MouseKeys_Accel_Enable': 0xfe77,
        'Overlay1_Enable': 0xfe78,
        'Overlay2_Enable': 0xfe79,
        'AudibleBell_Enable': 0xfe7a,
        'dead_a': 0xfe80,
        'dead_A': 0xfe81,
        'dead_e': 0xfe82,
        'dead_E': 0xfe83,
        'dead_i': 0xfe84,
        'dead_I': 0xfe85,
        'dead_o': 0xfe86,
        'dead_O': 0xfe87,
        'dead_u': 0xfe88,
        'dead_U': 0xfe89,
        'dead_small_schwa': 0xfe8a,
        'dead_capital_schwa': 0xfe8b,
        'dead_greek': 0xfe8c,
        'ch': 0xfea0,
        'Ch': 0xfea1,
        'CH': 0xfea2,
        'c_h': 0xfea3,
        'C_h': 0xfea4,
        'C_H': 0xfea5,
        'First_Virtual_Screen': 0xfed0,
        'Prev_Virtual_Screen': 0xfed1,
        'Next_Virtual_Screen': 0xfed2,
        'Last_Virtual_Screen': 0xfed4,
        'Terminate_Server': 0xfed5,
        'Pointer_Left': 0xfee0,
        'Pointer_Right': 0xfee1,
        'Pointer_Up': 0xfee2,
        'Pointer_Down': 0xfee3,
        'Pointer_UpLeft': 0xfee4,
        'Pointer_UpRight': 0xfee5,
        'Pointer_DownLeft': 0xfee6,
        'Pointer_DownRight': 0xfee7,
        'Pointer_Button_Dflt': 0xfee8,
        'Pointer_Button1': 0xfee9,
        'Pointer_Button2': 0xfeea,
        'Pointer_Button3': 0xfeeb,
        'Pointer_Button4': 0xfeec,
        'Pointer_Button5': 0xfeed,
        'Pointer_DblClick_Dflt': 0xfeee,
        'Pointer_DblClick1': 0xfeef,
        'Pointer_DblClick2': 0xfef0,
        'Pointer_DblClick3': 0xfef1,
        'Pointer_DblClick4': 0xfef2,
        'Pointer_DblClick5': 0xfef3,
        'Pointer_Drag_Dflt': 0xfef4,
        'Pointer_Drag1': 0xfef5,
        'Pointer_Drag2': 0xfef6,
        'Pointer_Drag3': 0xfef7,
        'Pointer_Drag4': 0xfef8,
        'Pointer_EnableKeys': 0xfef9,
        'Pointer_Accelerate': 0xfefa,
        'Pointer_DfltBtnNext': 0xfefb,
        'Pointer_DfltBtnPrev': 0xfefc,
        'Pointer_Drag5': 0xfefd,
        'BackSpace': 0xff08,
        'Tab': 0xff09,
        'Linefeed': 0xff0a,
        'Clear': 0xff0b,
        'Return': 0xff0d,
        'Pause': 0xff13,
        'Scroll_Lock': 0xff14,
        'Sys_Req': 0xff15,
        'Escape': 0xff1b,
        'Multi_key': 0xff20,
        'Kanji': 0xff21,
        'Muhenkan': 0xff22,
        'Henkan': 0xff23,
        'Romaji': 0xff24,
        'Hiragana': 0xff25,
        'Katakana': 0xff26,
        'Hiragana_Katakana': 0xff27,
        'Zenkaku': 0xff28,
        'Hankaku': 0xff29,
        'Zenkaku_Hankaku': 0xff2a,
        'Touroku': 0xff2b,
        'Massyo': 0xff2c,
        'Kana_Lock': 0xff2d,
        'Kana_Shift': 0xff2e,
        'Eisu_Shift': 0xff2f,
        'Eisu_toggle': 0xff30,
        'Hangul': 0xff31,
        'Hangul_Start': 0xff32,
        'Hangul_End': 0xff33,
        'Hangul_Hanja': 0xff34,
        'Hangul_Jamo': 0xff35,
        'Hangul_Romaja': 0xff36,
        'Hangul_Codeinput': 0xff37,
        'Hangul_Jeonja': 0xff38,
        'Hangul_Banja': 0xff39,
        'Hangul_PreHanja': 0xff3a,
        'Hangul_PostHanja': 0xff3b,
        'Hangul_SingleCandidate': 0xff3c,
        'Hangul_MultipleCandidate': 0xff3d,
        'Hangul_PreviousCandidate': 0xff3e,
        'Hangul_Special': 0xff3f,
        'Home': 0xff50,
        'Left': 0xff51,
        'Up': 0xff52,
        'Right': 0xff53,
        'Down': 0xff54,
        'Prior': 0xff55,
        'Next': 0xff56,
        'End': 0xff57,
        'Begin': 0xff58,
        'Select': 0xff60,
        'Print': 0xff61,
        'Execute': 0xff62,
        'Insert': 0xff63,
        'Undo': 0xff65,
        'Redo': 0xff66,
        'Menu': 0xff67,
        'Find': 0xff68,
        'Cancel': 0xff69,
        'Help': 0xff6a,
        'Break': 0xff6b,
        'Arabic_switch': 0xff7e,
        'Num_Lock': 0xff7f,
        'KP_Space': 0xff80,
        'KP_Tab': 0xff89,
        'KP_Enter': 0xff8d,
        'KP_F1': 0xff91,
        'KP_F2': 0xff92,
        'KP_F3': 0xff93,
        'KP_F4': 0xff94,
        'KP_Home': 0xff95,
        'KP_Left': 0xff96,
        'KP_Up': 0xff97,
        'KP_Right': 0xff98,
        'KP_Down': 0xff99,
        'KP_Prior': 0xff9a,
        'KP_Next': 0xff9b,
        'KP_End': 0xff9c,
        'KP_Begin': 0xff9d,
        'KP_Insert': 0xff9e,
        'KP_Delete': 0xff9f,
        'KP_Multiply': 0xffaa,
        'KP_Add': 0xffab,
        'KP_Separator': 0xffac,
        'KP_Subtract': 0xffad,
        'KP_Decimal': 0xffae,
        'KP_Divide': 0xffaf,
        'KP_0': 0xffb0,
        'KP_1': 0xffb1,
        'KP_2': 0xffb2,
        'KP_3': 0xffb3,
        'KP_4': 0xffb4,
        'KP_5': 0xffb5,
        'KP_6': 0xffb6,
        'KP_7': 0xffb7,
        'KP_8': 0xffb8,
        'KP_9': 0xffb9,
        'KP_Equal': 0xffbd,
        'F1': 0xffbe,
        'F2': 0xffbf,
        'F3': 0xffc0,
        'F4': 0xffc1,
        'F5': 0xffc2,
        'F6': 0xffc3,
        'F7': 0xffc4,
        'F8': 0xffc5,
        'F9': 0xffc6,
        'F10': 0xffc7,
        'F11': 0xffc8,
        'L1': 0xffc8,
        'F12': 0xffc9,
        'L2': 0xffc9,
        'F13': 0xffca,
        'L3': 0xffca,
        'F14': 0xffcb,
        'L4': 0xffcb,
        'F15': 0xffcc,
        'L5': 0xffcc,
        'F16': 0xffcd,
        'L6': 0xffcd,
        'F17': 0xffce,
        'L7': 0xffce,
        'F18': 0xffcf,
        'L8': 0xffcf,
        'F19': 0xffd0,
        'L9': 0xffd0,
        'F20': 0xffd1,
        'L10': 0xffd1,
        'F21': 0xffd2,
        'R1': 0xffd2,
        'F22': 0xffd3,
        'R2': 0xffd3,
        'F23': 0xffd4,
        'R3': 0xffd4,
        'F24': 0xffd5,
        'R4': 0xffd5,
        'F25': 0xffd6,
        'R5': 0xffd6,
        'F26': 0xffd7,
        'R6': 0xffd7,
        'F27': 0xffd8,
        'R7': 0xffd8,
        'F28': 0xffd9,
        'R8': 0xffd9,
        'F29': 0xffda,
        'R9': 0xffda,
        'F30': 0xffdb,
        'R10': 0xffdb,
        'F31': 0xffdc,
        'R11': 0xffdc,
        'F32': 0xffdd,
        'R12': 0xffdd,
        'F33': 0xffde,
        'R13': 0xffde,
        'F34': 0xffdf,
        'R14': 0xffdf,
        'F35': 0xffe0,
        'R15': 0xffe0,
        'Shift_L': 0xffe1,
        'Shift_R': 0xffe2,
        'Control_L': 0xffe3,
        'Control_R': 0xffe4,
        'Caps_Lock': 0xffe5,
        'Shift_Lock': 0xffe6,
        'Meta_L': 0xffe7,
        'Meta_R': 0xffe8,
        'Alt_L': 0xffe9,
        'Alt_R': 0xffea,
        'Super_L': 0xffeb,
        'Super_R': 0xffec,
        'Hyper_L': 0xffed,
        'Hyper_R': 0xffee,
        'braille_dot_1': 0xfff1,
        'braille_dot_2': 0xfff2,
        'braille_dot_3': 0xfff3,
        'braille_dot_4': 0xfff4,
        'braille_dot_5': 0xfff5,
        'braille_dot_6': 0xfff6,
        'braille_dot_7': 0xfff7,
        'braille_dot_8': 0xfff8,
        'braille_dot_9': 0xfff9,
        'braille_dot_10': 0xfffa,
        'Delete': 0xffff,
        'VoidSymbol': 0xffffff,
        'Ibreve': 0x100012c,
        'ibreve': 0x100012d,
        'Wcircumflex': 0x1000174,
        'wcircumflex': 0x1000175,
        'Ycircumflex': 0x1000176,
        'ycircumflex': 0x1000177,
        'SCHWA': 0x100018f,
        'Obarred': 0x100019f,
        'Ohorn': 0x10001a0,
        'ohorn': 0x10001a1,
        'Uhorn': 0x10001af,
        'uhorn': 0x10001b0,
        'Zstroke': 0x10001b5,
        'zstroke': 0x10001b6,
        'EZH': 0x10001b7,
        'Ocaron': 0x10001d1,
        'ocaron': 0x10001d2,
        'Gcaron': 0x10001e6,
        'gcaron': 0x10001e7,
        'schwa': 0x1000259,
        'obarred': 0x1000275,
        'ezh': 0x1000292,
        'Cyrillic_GHE_bar': 0x1000492,
        'Cyrillic_ghe_bar': 0x1000493,
        'Cyrillic_ZHE_descender': 0x1000496,
        'Cyrillic_zhe_descender': 0x1000497,
        'Cyrillic_KA_descender': 0x100049a,
        'Cyrillic_ka_descender': 0x100049b,
        'Cyrillic_KA_vertstroke': 0x100049c,
        'Cyrillic_ka_vertstroke': 0x100049d,
        'Cyrillic_EN_descender': 0x10004a2,
        'Cyrillic_en_descender': 0x10004a3,
        'Cyrillic_U_straight': 0x10004ae,
        'Cyrillic_u_straight': 0x10004af,
        'Cyrillic_U_straight_bar': 0x10004b0,
        'Cyrillic_u_straight_bar': 0x10004b1,
        'Cyrillic_HA_descender': 0x10004b2,
        'Cyrillic_ha_descender': 0x10004b3,
        'Cyrillic_CHE_descender': 0x10004b6,
        'Cyrillic_che_descender': 0x10004b7,
        'Cyrillic_CHE_vertstroke': 0x10004b8,
        'Cyrillic_che_vertstroke': 0x10004b9,
        'Cyrillic_SHHA': 0x10004ba,
        'Cyrillic_shha': 0x10004bb,
        'Cyrillic_SCHWA': 0x10004d8,
        'Cyrillic_schwa': 0x10004d9,
        'Cyrillic_I_macron': 0x10004e2,
        'Cyrillic_i_macron': 0x10004e3,
        'Cyrillic_O_bar': 0x10004e8,
        'Cyrillic_o_bar': 0x10004e9,
        'Cyrillic_U_macron': 0x10004ee,
        'Cyrillic_u_macron': 0x10004ef,
        'Armenian_AYB': 0x1000531,
        'Armenian_BEN': 0x1000532,
        'Armenian_GIM': 0x1000533,
        'Armenian_DA': 0x1000534,
        'Armenian_YECH': 0x1000535,
        'Armenian_ZA': 0x1000536,
        'Armenian_E': 0x1000537,
        'Armenian_AT': 0x1000538,
        'Armenian_TO': 0x1000539,
        'Armenian_ZHE': 0x100053a,
        'Armenian_INI': 0x100053b,
        'Armenian_LYUN': 0x100053c,
        'Armenian_KHE': 0x100053d,
        'Armenian_TSA': 0x100053e,
        'Armenian_KEN': 0x100053f,
        'Armenian_HO': 0x1000540,
        'Armenian_DZA': 0x1000541,
        'Armenian_GHAT': 0x1000542,
        'Armenian_TCHE': 0x1000543,
        'Armenian_MEN': 0x1000544,
        'Armenian_HI': 0x1000545,
        'Armenian_NU': 0x1000546,
        'Armenian_SHA': 0x1000547,
        'Armenian_VO': 0x1000548,
        'Armenian_CHA': 0x1000549,
        'Armenian_PE': 0x100054a,
        'Armenian_JE': 0x100054b,
        'Armenian_RA': 0x100054c,
        'Armenian_SE': 0x100054d,
        'Armenian_VEV': 0x100054e,
        'Armenian_TYUN': 0x100054f,
        'Armenian_RE': 0x1000550,
        'Armenian_TSO': 0x1000551,
        'Armenian_VYUN': 0x1000552,
        'Armenian_PYUR': 0x1000553,
        'Armenian_KE': 0x1000554,
        'Armenian_O': 0x1000555,
        'Armenian_FE': 0x1000556,
        'Armenian_apostrophe': 0x100055a,
        'Armenian_accent': 0x100055b,
        'Armenian_amanak': 0x100055c,
        'Armenian_separation_mark': 0x100055d,
        'Armenian_question': 0x100055e,
        'Armenian_ayb': 0x1000561,
        'Armenian_ben': 0x1000562,
        'Armenian_gim': 0x1000563,
        'Armenian_da': 0x1000564,
        'Armenian_yech': 0x1000565,
        'Armenian_za': 0x1000566,
        'Armenian_e': 0x1000567,
        'Armenian_at': 0x1000568,
        'Armenian_to': 0x1000569,
        'Armenian_zhe': 0x100056a,
        'Armenian_ini': 0x100056b,
        'Armenian_lyun': 0x100056c,
        'Armenian_khe': 0x100056d,
        'Armenian_tsa': 0x100056e,
        'Armenian_ken': 0x100056f,
        'Armenian_ho': 0x1000570,
        'Armenian_dza': 0x1000571,
        'Armenian_ghat': 0x1000572,
        'Armenian_tche': 0x1000573,
        'Armenian_men': 0x1000574,
        'Armenian_hi': 0x1000575,
        'Armenian_nu': 0x1000576,
        'Armenian_sha': 0x1000577,
        'Armenian_vo': 0x1000578,
        'Armenian_cha': 0x1000579,
        'Armenian_pe': 0x100057a,
        'Armenian_je': 0x100057b,
        'Armenian_ra': 0x100057c,
        'Armenian_se': 0x100057d,
        'Armenian_vev': 0x100057e,
        'Armenian_tyun': 0x100057f,
        'Armenian_re': 0x1000580,
        'Armenian_tso': 0x1000581,
        'Armenian_vyun': 0x1000582,
        'Armenian_pyur': 0x1000583,
        'Armenian_ke': 0x1000584,
        'Armenian_o': 0x1000585,
        'Armenian_fe': 0x1000586,
        'Armenian_ligature_ew': 0x1000587,
        'Armenian_full_stop': 0x1000589,
        'Armenian_yentamna': 0x100058a,
        'Arabic_madda_above': 0x1000653,
        'Arabic_hamza_above': 0x1000654,
        'Arabic_hamza_below': 0x1000655,
        'Arabic_0': 0x1000660,
        'Arabic_1': 0x1000661,
        'Arabic_2': 0x1000662,
        'Arabic_3': 0x1000663,
        'Arabic_4': 0x1000664,
        'Arabic_5': 0x1000665,
        'Arabic_6': 0x1000666,
        'Arabic_7': 0x1000667,
        'Arabic_8': 0x1000668,
        'Arabic_9': 0x1000669,
        'Arabic_percent': 0x100066a,
        'Arabic_superscript_alef': 0x1000670,
        'Arabic_tteh': 0x1000679,
        'Arabic_peh': 0x100067e,
        'Arabic_tcheh': 0x1000686,
        'Arabic_ddal': 0x1000688,
        'Arabic_rreh': 0x1000691,
        'Arabic_jeh': 0x1000698,
        'Arabic_veh': 0x10006a4,
        'Arabic_keheh': 0x10006a9,
        'Arabic_gaf': 0x10006af,
        'Arabic_noon_ghunna': 0x10006ba,
        'Arabic_heh_doachashmee': 0x10006be,
        'Arabic_heh_goal': 0x10006c1,
        'Farsi_yeh': 0x10006cc,
        'Arabic_yeh_baree': 0x10006d2,
        'Arabic_fullstop': 0x10006d4,
        'Farsi_0': 0x10006f0,
        'Farsi_1': 0x10006f1,
        'Farsi_2': 0x10006f2,
        'Farsi_3': 0x10006f3,
        'Farsi_4': 0x10006f4,
        'Farsi_5': 0x10006f5,
        'Farsi_6': 0x10006f6,
        'Farsi_7': 0x10006f7,
        'Farsi_8': 0x10006f8,
        'Farsi_9': 0x10006f9,
        'Sinh_ng': 0x1000d82,
        'Sinh_h2': 0x1000d83,
        'Sinh_a': 0x1000d85,
        'Sinh_aa': 0x1000d86,
        'Sinh_ae': 0x1000d87,
        'Sinh_aee': 0x1000d88,
        'Sinh_i': 0x1000d89,
        'Sinh_ii': 0x1000d8a,
        'Sinh_u': 0x1000d8b,
        'Sinh_uu': 0x1000d8c,
        'Sinh_ri': 0x1000d8d,
        'Sinh_rii': 0x1000d8e,
        'Sinh_lu': 0x1000d8f,
        'Sinh_luu': 0x1000d90,
        'Sinh_e': 0x1000d91,
        'Sinh_ee': 0x1000d92,
        'Sinh_ai': 0x1000d93,
        'Sinh_o': 0x1000d94,
        'Sinh_oo': 0x1000d95,
        'Sinh_au': 0x1000d96,
        'Sinh_ka': 0x1000d9a,
        'Sinh_kha': 0x1000d9b,
        'Sinh_ga': 0x1000d9c,
        'Sinh_gha': 0x1000d9d,
        'Sinh_ng2': 0x1000d9e,
        'Sinh_nga': 0x1000d9f,
        'Sinh_ca': 0x1000da0,
        'Sinh_cha': 0x1000da1,
        'Sinh_ja': 0x1000da2,
        'Sinh_jha': 0x1000da3,
        'Sinh_nya': 0x1000da4,
        'Sinh_jnya': 0x1000da5,
        'Sinh_nja': 0x1000da6,
        'Sinh_tta': 0x1000da7,
        'Sinh_ttha': 0x1000da8,
        'Sinh_dda': 0x1000da9,
        'Sinh_ddha': 0x1000daa,
        'Sinh_nna': 0x1000dab,
        'Sinh_ndda': 0x1000dac,
        'Sinh_tha': 0x1000dad,
        'Sinh_thha': 0x1000dae,
        'Sinh_dha': 0x1000daf,
        'Sinh_dhha': 0x1000db0,
        'Sinh_na': 0x1000db1,
        'Sinh_ndha': 0x1000db3,
        'Sinh_pa': 0x1000db4,
        'Sinh_pha': 0x1000db5,
        'Sinh_ba': 0x1000db6,
        'Sinh_bha': 0x1000db7,
        'Sinh_ma': 0x1000db8,
        'Sinh_mba': 0x1000db9,
        'Sinh_ya': 0x1000dba,
        'Sinh_ra': 0x1000dbb,
        'Sinh_la': 0x1000dbd,
        'Sinh_va': 0x1000dc0,
        'Sinh_sha': 0x1000dc1,
        'Sinh_ssha': 0x1000dc2,
        'Sinh_sa': 0x1000dc3,
        'Sinh_ha': 0x1000dc4,
        'Sinh_lla': 0x1000dc5,
        'Sinh_fa': 0x1000dc6,
        'Sinh_al': 0x1000dca,
        'Sinh_aa2': 0x1000dcf,
        'Sinh_ae2': 0x1000dd0,
        'Sinh_aee2': 0x1000dd1,
        'Sinh_i2': 0x1000dd2,
        'Sinh_ii2': 0x1000dd3,
        'Sinh_u2': 0x1000dd4,
        'Sinh_uu2': 0x1000dd6,
        'Sinh_ru2': 0x1000dd8,
        'Sinh_e2': 0x1000dd9,
        'Sinh_ee2': 0x1000dda,
        'Sinh_ai2': 0x1000ddb,
        'Sinh_o2': 0x1000ddc,
        'Sinh_oo2': 0x1000ddd,
        'Sinh_au2': 0x1000dde,
        'Sinh_lu2': 0x1000ddf,
        'Sinh_ruu2': 0x1000df2,
        'Sinh_luu2': 0x1000df3,
        'Sinh_kunddaliya': 0x1000df4,
        'Georgian_an': 0x10010d0,
        'Georgian_ban': 0x10010d1,
        'Georgian_gan': 0x10010d2,
        'Georgian_don': 0x10010d3,
        'Georgian_en': 0x10010d4,
        'Georgian_vin': 0x10010d5,
        'Georgian_zen': 0x10010d6,
        'Georgian_tan': 0x10010d7,
        'Georgian_in': 0x10010d8,
        'Georgian_kan': 0x10010d9,
        'Georgian_las': 0x10010da,
        'Georgian_man': 0x10010db,
        'Georgian_nar': 0x10010dc,
        'Georgian_on': 0x10010dd,
        'Georgian_par': 0x10010de,
        'Georgian_zhar': 0x10010df,
        'Georgian_rae': 0x10010e0,
        'Georgian_san': 0x10010e1,
        'Georgian_tar': 0x10010e2,
        'Georgian_un': 0x10010e3,
        'Georgian_phar': 0x10010e4,
        'Georgian_khar': 0x10010e5,
        'Georgian_ghan': 0x10010e6,
        'Georgian_qar': 0x10010e7,
        'Georgian_shin': 0x10010e8,
        'Georgian_chin': 0x10010e9,
        'Georgian_can': 0x10010ea,
        'Georgian_jil': 0x10010eb,
        'Georgian_cil': 0x10010ec,
        'Georgian_char': 0x10010ed,
        'Georgian_xan': 0x10010ee,
        'Georgian_jhan': 0x10010ef,
        'Georgian_hae': 0x10010f0,
        'Georgian_he': 0x10010f1,
        'Georgian_hie': 0x10010f2,
        'Georgian_we': 0x10010f3,
        'Georgian_har': 0x10010f4,
        'Georgian_hoe': 0x10010f5,
        'Georgian_fi': 0x10010f6,
        'Babovedot': 0x1001e02,
        'babovedot': 0x1001e03,
        'Dabovedot': 0x1001e0a,
        'dabovedot': 0x1001e0b,
        'Fabovedot': 0x1001e1e,
        'fabovedot': 0x1001e1f,
        'Lbelowdot': 0x1001e36,
        'lbelowdot': 0x1001e37,
        'Mabovedot': 0x1001e40,
        'mabovedot': 0x1001e41,
        'Pabovedot': 0x1001e56,
        'pabovedot': 0x1001e57,
        'Sabovedot': 0x1001e60,
        'sabovedot': 0x1001e61,
        'Tabovedot': 0x1001e6a,
        'tabovedot': 0x1001e6b,
        'Wgrave': 0x1001e80,
        'wgrave': 0x1001e81,
        'Wacute': 0x1001e82,
        'wacute': 0x1001e83,
        'Wdiaeresis': 0x1001e84,
        'wdiaeresis': 0x1001e85,
        'Xabovedot': 0x1001e8a,
        'xabovedot': 0x1001e8b,
        'Abelowdot': 0x1001ea0,
        'abelowdot': 0x1001ea1,
        'Ahook': 0x1001ea2,
        'ahook': 0x1001ea3,
        'Acircumflexacute': 0x1001ea4,
        'acircumflexacute': 0x1001ea5,
        'Acircumflexgrave': 0x1001ea6,
        'acircumflexgrave': 0x1001ea7,
        'Acircumflexhook': 0x1001ea8,
        'acircumflexhook': 0x1001ea9,
        'Acircumflextilde': 0x1001eaa,
        'acircumflextilde': 0x1001eab,
        'Acircumflexbelowdot': 0x1001eac,
        'acircumflexbelowdot': 0x1001ead,
        'Abreveacute': 0x1001eae,
        'abreveacute': 0x1001eaf,
        'Abrevegrave': 0x1001eb0,
        'abrevegrave': 0x1001eb1,
        'Abrevehook': 0x1001eb2,
        'abrevehook': 0x1001eb3,
        'Abrevetilde': 0x1001eb4,
        'abrevetilde': 0x1001eb5,
        'Abrevebelowdot': 0x1001eb6,
        'abrevebelowdot': 0x1001eb7,
        'Ebelowdot': 0x1001eb8,
        'ebelowdot': 0x1001eb9,
        'Ehook': 0x1001eba,
        'ehook': 0x1001ebb,
        'Etilde': 0x1001ebc,
        'etilde': 0x1001ebd,
        'Ecircumflexacute': 0x1001ebe,
        'ecircumflexacute': 0x1001ebf,
        'Ecircumflexgrave': 0x1001ec0,
        'ecircumflexgrave': 0x1001ec1,
        'Ecircumflexhook': 0x1001ec2,
        'ecircumflexhook': 0x1001ec3,
        'Ecircumflextilde': 0x1001ec4,
        'ecircumflextilde': 0x1001ec5,
        'Ecircumflexbelowdot': 0x1001ec6,
        'ecircumflexbelowdot': 0x1001ec7,
        'Ihook': 0x1001ec8,
        'ihook': 0x1001ec9,
        'Ibelowdot': 0x1001eca,
        'ibelowdot': 0x1001ecb,
        'Obelowdot': 0x1001ecc,
        'obelowdot': 0x1001ecd,
        'Ohook': 0x1001ece,
        'ohook': 0x1001ecf,
        'Ocircumflexacute': 0x1001ed0,
        'ocircumflexacute': 0x1001ed1,
        'Ocircumflexgrave': 0x1001ed2,
        'ocircumflexgrave': 0x1001ed3,
        'Ocircumflexhook': 0x1001ed4,
        'ocircumflexhook': 0x1001ed5,
        'Ocircumflextilde': 0x1001ed6,
        'ocircumflextilde': 0x1001ed7,
        'Ocircumflexbelowdot': 0x1001ed8,
        'ocircumflexbelowdot': 0x1001ed9,
        'Ohornacute': 0x1001eda,
        'ohornacute': 0x1001edb,
        'Ohorngrave': 0x1001edc,
        'ohorngrave': 0x1001edd,
        'Ohornhook': 0x1001ede,
        'ohornhook': 0x1001edf,
        'Ohorntilde': 0x1001ee0,
        'ohorntilde': 0x1001ee1,
        'Ohornbelowdot': 0x1001ee2,
        'ohornbelowdot': 0x1001ee3,
        'Ubelowdot': 0x1001ee4,
        'ubelowdot': 0x1001ee5,
        'Uhook': 0x1001ee6,
        'uhook': 0x1001ee7,
        'Uhornacute': 0x1001ee8,
        'uhornacute': 0x1001ee9,
        'Uhorngrave': 0x1001eea,
        'uhorngrave': 0x1001eeb,
        'Uhornhook': 0x1001eec,
        'uhornhook': 0x1001eed,
        'Uhorntilde': 0x1001eee,
        'uhorntilde': 0x1001eef,
        'Uhornbelowdot': 0x1001ef0,
        'uhornbelowdot': 0x1001ef1,
        'Ygrave': 0x1001ef2,
        'ygrave': 0x1001ef3,
        'Ybelowdot': 0x1001ef4,
        'ybelowdot': 0x1001ef5,
        'Yhook': 0x1001ef6,
        'yhook': 0x1001ef7,
        'Ytilde': 0x1001ef8,
        'ytilde': 0x1001ef9,
        'zerosuperior': 0x1002070,
        'foursuperior': 0x1002074,
        'fivesuperior': 0x1002075,
        'sixsuperior': 0x1002076,
        'sevensuperior': 0x1002077,
        'eightsuperior': 0x1002078,
        'ninesuperior': 0x1002079,
        'zerosubscript': 0x1002080,
        'onesubscript': 0x1002081,
        'twosubscript': 0x1002082,
        'threesubscript': 0x1002083,
        'foursubscript': 0x1002084,
        'fivesubscript': 0x1002085,
        'sixsubscript': 0x1002086,
        'sevensubscript': 0x1002087,
        'eightsubscript': 0x1002088,
        'ninesubscript': 0x1002089,
        'EcuSign': 0x10020a0,
        'ColonSign': 0x10020a1,
        'CruzeiroSign': 0x10020a2,
        'FFrancSign': 0x10020a3,
        'LiraSign': 0x10020a4,
        'MillSign': 0x10020a5,
        'NairaSign': 0x10020a6,
        'PesetaSign': 0x10020a7,
        'RupeeSign': 0x10020a8,
        'WonSign': 0x10020a9,
        'NewSheqelSign': 0x10020aa,
        'DongSign': 0x10020ab,
        'partdifferential': 0x1002202,
        'emptyset': 0x1002205,
        'elementof': 0x1002208,
        'notelementof': 0x1002209,
        'containsas': 0x100220b,
        'squareroot': 0x100221a,
        'cuberoot': 0x100221b,
        'fourthroot': 0x100221c,
        'dintegral': 0x100222c,
        'tintegral': 0x100222d,
        'because': 0x1002235,
        'notapproxeq': 0x1002247,
        'approxeq': 0x1002248,
        'notidentical': 0x1002262,
        'stricteq': 0x1002263,
        'braille_blank': 0x1002800,
        'braille_dots_1': 0x1002801,
        'braille_dots_2': 0x1002802,
        'braille_dots_12': 0x1002803,
        'braille_dots_3': 0x1002804,
        'braille_dots_13': 0x1002805,
        'braille_dots_23': 0x1002806,
        'braille_dots_123': 0x1002807,
        'braille_dots_4': 0x1002808,
        'braille_dots_14': 0x1002809,
        'braille_dots_24': 0x100280a,
        'braille_dots_124': 0x100280b,
        'braille_dots_34': 0x100280c,
        'braille_dots_134': 0x100280d,
        'braille_dots_234': 0x100280e,
        'braille_dots_1234': 0x100280f,
        'braille_dots_5': 0x1002810,
        'braille_dots_15': 0x1002811,
        'braille_dots_25': 0x1002812,
        'braille_dots_125': 0x1002813,
        'braille_dots_35': 0x1002814,
        'braille_dots_135': 0x1002815,
        'braille_dots_235': 0x1002816,
        'braille_dots_1235': 0x1002817,
        'braille_dots_45': 0x1002818,
        'braille_dots_145': 0x1002819,
        'braille_dots_245': 0x100281a,
        'braille_dots_1245': 0x100281b,
        'braille_dots_345': 0x100281c,
        'braille_dots_1345': 0x100281d,
        'braille_dots_2345': 0x100281e,
        'braille_dots_12345': 0x100281f,
        'braille_dots_6': 0x1002820,
        'braille_dots_16': 0x1002821,
        'braille_dots_26': 0x1002822,
        'braille_dots_126': 0x1002823,
        'braille_dots_36': 0x1002824,
        'braille_dots_136': 0x1002825,
        'braille_dots_236': 0x1002826,
        'braille_dots_1236': 0x1002827,
        'braille_dots_46': 0x1002828,
        'braille_dots_146': 0x1002829,
        'braille_dots_246': 0x100282a,
        'braille_dots_1246': 0x100282b,
        'braille_dots_346': 0x100282c,
        'braille_dots_1346': 0x100282d,
        'braille_dots_2346': 0x100282e,
        'braille_dots_12346': 0x100282f,
        'braille_dots_56': 0x1002830,
        'braille_dots_156': 0x1002831,
        'braille_dots_256': 0x1002832,
        'braille_dots_1256': 0x1002833,
        'braille_dots_356': 0x1002834,
        'braille_dots_1356': 0x1002835,
        'braille_dots_2356': 0x1002836,
        'braille_dots_12356': 0x1002837,
        'braille_dots_456': 0x1002838,
        'braille_dots_1456': 0x1002839,
        'braille_dots_2456': 0x100283a,
        'braille_dots_12456': 0x100283b,
        'braille_dots_3456': 0x100283c,
        'braille_dots_13456': 0x100283d,
        'braille_dots_23456': 0x100283e,
        'braille_dots_123456': 0x100283f,
        'braille_dots_7': 0x1002840,
        'braille_dots_17': 0x1002841,
        'braille_dots_27': 0x1002842,
        'braille_dots_127': 0x1002843,
        'braille_dots_37': 0x1002844,
        'braille_dots_137': 0x1002845,
        'braille_dots_237': 0x1002846,
        'braille_dots_1237': 0x1002847,
        'braille_dots_47': 0x1002848,
        'braille_dots_147': 0x1002849,
        'braille_dots_247': 0x100284a,
        'braille_dots_1247': 0x100284b,
        'braille_dots_347': 0x100284c,
        'braille_dots_1347': 0x100284d,
        'braille_dots_2347': 0x100284e,
        'braille_dots_12347': 0x100284f,
        'braille_dots_57': 0x1002850,
        'braille_dots_157': 0x1002851,
        'braille_dots_257': 0x1002852,
        'braille_dots_1257': 0x1002853,
        'braille_dots_357': 0x1002854,
        'braille_dots_1357': 0x1002855,
        'braille_dots_2357': 0x1002856,
        'braille_dots_12357': 0x1002857,
        'braille_dots_457': 0x1002858,
        'braille_dots_1457': 0x1002859,
        'braille_dots_2457': 0x100285a,
        'braille_dots_12457': 0x100285b,
        'braille_dots_3457': 0x100285c,
        'braille_dots_13457': 0x100285d,
        'braille_dots_23457': 0x100285e,
        'braille_dots_123457': 0x100285f,
        'braille_dots_67': 0x1002860,
        'braille_dots_167': 0x1002861,
        'braille_dots_267': 0x1002862,
        'braille_dots_1267': 0x1002863,
        'braille_dots_367': 0x1002864,
        'braille_dots_1367': 0x1002865,
        'braille_dots_2367': 0x1002866,
        'braille_dots_12367': 0x1002867,
        'braille_dots_467': 0x1002868,
        'braille_dots_1467': 0x1002869,
        'braille_dots_2467': 0x100286a,
        'braille_dots_12467': 0x100286b,
        'braille_dots_3467': 0x100286c,
        'braille_dots_13467': 0x100286d,
        'braille_dots_23467': 0x100286e,
        'braille_dots_123467': 0x100286f,
        'braille_dots_567': 0x1002870,
        'braille_dots_1567': 0x1002871,
        'braille_dots_2567': 0x1002872,
        'braille_dots_12567': 0x1002873,
        'braille_dots_3567': 0x1002874,
        'braille_dots_13567': 0x1002875,
        'braille_dots_23567': 0x1002876,
        'braille_dots_123567': 0x1002877,
        'braille_dots_4567': 0x1002878,
        'braille_dots_14567': 0x1002879,
        'braille_dots_24567': 0x100287a,
        'braille_dots_124567': 0x100287b,
        'braille_dots_34567': 0x100287c,
        'braille_dots_134567': 0x100287d,
        'braille_dots_234567': 0x100287e,
        'braille_dots_1234567': 0x100287f,
        'braille_dots_8': 0x1002880,
        'braille_dots_18': 0x1002881,
        'braille_dots_28': 0x1002882,
        'braille_dots_128': 0x1002883,
        'braille_dots_38': 0x1002884,
        'braille_dots_138': 0x1002885,
        'braille_dots_238': 0x1002886,
        'braille_dots_1238': 0x1002887,
        'braille_dots_48': 0x1002888,
        'braille_dots_148': 0x1002889,
        'braille_dots_248': 0x100288a,
        'braille_dots_1248': 0x100288b,
        'braille_dots_348': 0x100288c,
        'braille_dots_1348': 0x100288d,
        'braille_dots_2348': 0x100288e,
        'braille_dots_12348': 0x100288f,
        'braille_dots_58': 0x1002890,
        'braille_dots_158': 0x1002891,
        'braille_dots_258': 0x1002892,
        'braille_dots_1258': 0x1002893,
        'braille_dots_358': 0x1002894,
        'braille_dots_1358': 0x1002895,
        'braille_dots_2358': 0x1002896,
        'braille_dots_12358': 0x1002897,
        'braille_dots_458': 0x1002898,
        'braille_dots_1458': 0x1002899,
        'braille_dots_2458': 0x100289a,
        'braille_dots_12458': 0x100289b,
        'braille_dots_3458': 0x100289c,
        'braille_dots_13458': 0x100289d,
        'braille_dots_23458': 0x100289e,
        'braille_dots_123458': 0x100289f,
        'braille_dots_68': 0x10028a0,
        'braille_dots_168': 0x10028a1,
        'braille_dots_268': 0x10028a2,
        'braille_dots_1268': 0x10028a3,
        'braille_dots_368': 0x10028a4,
        'braille_dots_1368': 0x10028a5,
        'braille_dots_2368': 0x10028a6,
        'braille_dots_12368': 0x10028a7,
        'braille_dots_468': 0x10028a8,
        'braille_dots_1468': 0x10028a9,
        'braille_dots_2468': 0x10028aa,
        'braille_dots_12468': 0x10028ab,
        'braille_dots_3468': 0x10028ac,
        'braille_dots_13468': 0x10028ad,
        'braille_dots_23468': 0x10028ae,
        'braille_dots_123468': 0x10028af,
        'braille_dots_568': 0x10028b0,
        'braille_dots_1568': 0x10028b1,
        'braille_dots_2568': 0x10028b2,
        'braille_dots_12568': 0x10028b3,
        'braille_dots_3568': 0x10028b4,
        'braille_dots_13568': 0x10028b5,
        'braille_dots_23568': 0x10028b6,
        'braille_dots_123568': 0x10028b7,
        'braille_dots_4568': 0x10028b8,
        'braille_dots_14568': 0x10028b9,
        'braille_dots_24568': 0x10028ba,
        'braille_dots_124568': 0x10028bb,
        'braille_dots_34568': 0x10028bc,
        'braille_dots_134568': 0x10028bd,
        'braille_dots_234568': 0x10028be,
        'braille_dots_1234568': 0x10028bf,
        'braille_dots_78': 0x10028c0,
        'braille_dots_178': 0x10028c1,
        'braille_dots_278': 0x10028c2,
        'braille_dots_1278': 0x10028c3,
        'braille_dots_378': 0x10028c4,
        'braille_dots_1378': 0x10028c5,
        'braille_dots_2378': 0x10028c6,
        'braille_dots_12378': 0x10028c7,
        'braille_dots_478': 0x10028c8,
        'braille_dots_1478': 0x10028c9,
        'braille_dots_2478': 0x10028ca,
        'braille_dots_12478': 0x10028cb,
        'braille_dots_3478': 0x10028cc,
        'braille_dots_13478': 0x10028cd,
        'braille_dots_23478': 0x10028ce,
        'braille_dots_123478': 0x10028cf,
        'braille_dots_578': 0x10028d0,
        'braille_dots_1578': 0x10028d1,
        'braille_dots_2578': 0x10028d2,
        'braille_dots_12578': 0x10028d3,
        'braille_dots_3578': 0x10028d4,
        'braille_dots_13578': 0x10028d5,
        'braille_dots_23578': 0x10028d6,
        'braille_dots_123578': 0x10028d7,
        'braille_dots_4578': 0x10028d8,
        'braille_dots_14578': 0x10028d9,
        'braille_dots_24578': 0x10028da,
        'braille_dots_124578': 0x10028db,
        'braille_dots_34578': 0x10028dc,
        'braille_dots_134578': 0x10028dd,
        'braille_dots_234578': 0x10028de,
        'braille_dots_1234578': 0x10028df,
        'braille_dots_678': 0x10028e0,
        'braille_dots_1678': 0x10028e1,
        'braille_dots_2678': 0x10028e2,
        'braille_dots_12678': 0x10028e3,
        'braille_dots_3678': 0x10028e4,
        'braille_dots_13678': 0x10028e5,
        'braille_dots_23678': 0x10028e6,
        'braille_dots_123678': 0x10028e7,
        'braille_dots_4678': 0x10028e8,
        'braille_dots_14678': 0x10028e9,
        'braille_dots_24678': 0x10028ea,
        'braille_dots_124678': 0x10028eb,
        'braille_dots_34678': 0x10028ec,
        'braille_dots_134678': 0x10028ed,
        'braille_dots_234678': 0x10028ee,
        'braille_dots_1234678': 0x10028ef,
        'braille_dots_5678': 0x10028f0,
        'braille_dots_15678': 0x10028f1,
        'braille_dots_25678': 0x10028f2,
        'braille_dots_125678': 0x10028f3,
        'braille_dots_35678': 0x10028f4,
        'braille_dots_135678': 0x10028f5,
        'braille_dots_235678': 0x10028f6,
        'braille_dots_1235678': 0x10028f7,
        'braille_dots_45678': 0x10028f8,
        'braille_dots_145678': 0x10028f9,
        'braille_dots_245678': 0x10028fa,
        'braille_dots_1245678': 0x10028fb,
        'braille_dots_345678': 0x10028fc,
        'braille_dots_1345678': 0x10028fd,
        'braille_dots_2345678': 0x10028fe,
        'braille_dots_12345678': 0x10028ff,
        'XF86PowerOff': 0x1008ff2a,
        'XF86WakeUp': 0x1008ff2b,
        'XF86Sleep': 0x1008ff2f,
    }

* Fri 09 Jan 2015 02:35:45 AM JST
    
* Fri 09 Jan 2015 02:37:24 AM JST
        
* Fri 09 Jan 2015 02:48:58 AM JST
def get_symdefs():
    r"""SUMMARY

    get_symdefs()

    @Return:

    @Error:
    """
    import re as _re
    from path import Path as _Path
    keysymdef_h = _Path('/usr/include/X11/keysymdef.h')
    if not keysymdef_h.exists():
        # TODO: (Atami) [2015/01/09]
        raise StandardError()
    regex, syms = _re.compile('^#define'), {}
    with keysymdef_h.open('r') as fobj:
        for line in fobj.readlines():
            if regex.match(line) is not None:
                lines = line.split()
                syms.setdefault(lines[1].replace('XK_', ''), int(lines[2], 16))
    return syms

* Fri 09 Jan 2015 02:49:04 AM JST
    import re as _re
    from path import Path as _Path

* Fri 09 Jan 2015 02:49:14 AM JST
get_symdefs
* Fri 09 Jan 2015 02:51:11 AM JST

* Fri 09 Jan 2015 02:51:11 AM JST

* Fri 09 Jan 2015 02:51:12 AM JST
        # TODO: (Atami) [2015/01/09]

* Fri 09 Jan 2015 02:51:12 AM JST
        # TODO: (Atami) [2015/01/09]

* Fri 09 Jan 2015 02:51:12 AM JST
        # TODO: (Atami) [2015/01/09]
        raise StandardError()

* Fri 09 Jan 2015 03:00:31 AM JST
KEYSYMDEF
* Fri 09 Jan 2015 03:00:40 AM JST
KEYSYMDEF
* Fri 09 Jan 2015 03:00:44 AM JST
KEYSYMDEF
* Fri 09 Jan 2015 03:00:59 AM JST
keysymdef
* Fri 09 Jan 2015 03:01:48 AM JST

* Fri 09 Jan 2015 03:01:50 AM JST
syms
* Fri 09 Jan 2015 03:01:58 AM JST
from sendkeys2.keysymdef import keysymdef
* Fri 09 Jan 2015 03:02:13 AM JST

* Fri 09 Jan 2015 03:02:13 AM JST

* Fri 09 Jan 2015 03:02:13 AM JST
    return {}

* Fri 09 Jan 2015 03:36:12 AM JST
keysymdef/
* Fri 09 Jan 2015 03:36:13 AM JST
sendkeys2/keysymdef/
* Fri 09 Jan 2015 10:39:16 PM JST
path
* Fri 09 Jan 2015 10:39:24 PM JST
'/usr/include/X11/keysymdef.h'
* Fri 09 Jan 2015 10:39:59 PM JST

* Fri 09 Jan 2015 10:39:59 PM JST

* Fri 09 Jan 2015 10:39:59 PM JST
KEYSYMDEF = from_file()

* Fri 09 Jan 2015 10:40:20 PM JST

* Fri 09 Jan 2015 10:40:20 PM JST

* Fri 09 Jan 2015 10:40:20 PM JST
if not keysymdef:

* Fri 09 Jan 2015 10:40:22 PM JST
keysymdef
* Fri 09 Jan 2015 10:40:22 PM JST
as keysymdef
* Fri 09 Jan 2015 10:40:23 PM JST
KEYSYMDEF as keysymdef
* Fri 09 Jan 2015 10:40:30 PM JST
keysymdef
* Fri 09 Jan 2015 10:40:30 PM JST
as keysymdef
* Fri 09 Jan 2015 10:40:31 PM JST
KEYSYMDEF as keysymdef
* Fri 09 Jan 2015 10:42:12 PM JST
class NameToSym:
    """Class NameToSym
    """
    # Attributes:
    __dict = None  # (dict) 
    
    # Operations
    def set(self, name, char):
        """function set
        
        name: 
        char: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def name_to_sym(self, name):
        """function name_to_sym
        
        name: str
        
        returns Keysym
        """
        return None # should raise NotImplementedError()
    
    def clear(self):
        """function clear
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def update(self, dict):
        """function update
        
        dict: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def names(self):
        """function names
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def syms(self):
        """function syms
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def iternames(self):
        """function iternames
        
        returns generator
        """
        return None # should raise NotImplementedError()
    
    def itersyms(self):
        """function itersyms
        
        returns generator
        """
        return None # should raise NotImplementedError()
    
    def items(self):
        """function items
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def iteritems(self):
        """function iteritems
        
        returns generator
        """
        return None # should raise NotImplementedError()
    
    def set_default(self, name, sym):
        """function set_default
        
        name: 
        sym: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, name, sym):
        """function __setitem__
        
        name: Keyname
        sym: Keysym
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, name):
        """function __getitem__
        
        name: Keyname
        
        returns Keysym
        """
        return None # should raise NotImplementedError()
    
    def __delitem__(self, name):
        """function __delitem__
        
        name: Keyname
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __len__(self, __repr__):
        """function __len__
        
        __repr__: str
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __contains__(self):
        """function __contains__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __iter__(self):
        """function __iter__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __nonzero__(self):
        """function __nonzero__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __init__(self, val = None):
        """function __init__
        
        val: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __init__(self, val):
        """function __init__
        
        val: dict
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __init__(self, val):
        """function __init__
        
        val: str
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 09 Jan 2015 10:42:28 PM JST
    def __init__(self, val = None):
        """function __init__
        
        val: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __init__(self, val):
        """function __init__
        
        val: dict
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __init__(self, val):
        """function __init__
        
        val: str
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 09 Jan 2015 10:43:33 PM JST
return None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:44:43 PM JST
return None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:45:27 PM JST
keysymdef
* Fri 09 Jan 2015 10:47:20 PM JST
dict
* Fri 09 Jan 2015 10:48:56 PM JST
return None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:50:28 PM JST

* Fri 09 Jan 2015 10:50:28 PM JST

* Fri 09 Jan 2015 10:50:28 PM JST
    @dispatch.generic()

* Fri 09 Jan 2015 10:50:58 PM JST
from sendkeys2.keysymdef import KEYSYMDEF
* Fri 09 Jan 2015 10:52:37 PM JST
        for name, sym in KEYSYMDEF.iteritems():
            self[name] = sym

* Fri 09 Jan 2015 10:52:42 PM JST
KEYSYMDEF
* Fri 09 Jan 2015 10:53:08 PM JST
char
* Fri 09 Jan 2015 10:53:10 PM JST
char
* Fri 09 Jan 2015 10:53:17 PM JST
return None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:53:22 PM JST

* Fri 09 Jan 2015 10:53:23 PM JST

* Fri 09 Jan 2015 10:53:23 PM JST
from peak.rules import dispatch

* Fri 09 Jan 2015 10:54:19 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:54:20 PM JST
return 
* Fri 09 Jan 2015 10:54:33 PM JST
return None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:55:18 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:55:29 PM JST
name]
* Fri 09 Jan 2015 10:55:29 PM JST
self[name]
* Fri 09 Jan 2015 10:55:39 PM JST
return None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:55:56 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:56:34 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:56:42 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:56:59 PM JST
val
* Fri 09 Jan 2015 10:57:03 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:57:21 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:57:34 PM JST
return None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:57:42 PM JST
_dict
* Fri 09 Jan 2015 10:57:43 PM JST
self._dict
* Fri 09 Jan 2015 10:58:56 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:58:58 PM JST
self.
* Fri 09 Jan 2015 10:59:02 PM JST
iter()
* Fri 09 Jan 2015 10:59:11 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:59:18 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:59:30 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:59:45 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 10:59:55 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 11:03:27 PM JST
return None # should raise NotImplementedError()
* Fri 09 Jan 2015 11:04:58 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 11:05:38 PM JST
NameToSym
* Fri 09 Jan 2015 11:06:09 PM JST
'/usr/include/X11/keysymdef.h'
* Fri 09 Jan 2015 11:07:56 PM JST
Except:
* Fri 09 Jan 2015 11:08:33 PM JST
            from sendkeys2.keysymdef import KEYSYMDEF
            dic = KEYSYMDEF

* Fri 09 Jan 2015 11:08:37 PM JST

* Fri 09 Jan 2015 11:08:37 PM JST

* Fri 09 Jan 2015 11:08:37 PM JST
            dic = 

* Fri 09 Jan 2015 11:09:02 PM JST
from sendkeys2.nametosym import NameToSym
* Fri 09 Jan 2015 11:09:10 PM JST
NameToSym('/usr/include/X11/keysymdef.h')
* Fri 09 Jan 2015 11:09:30 PM JST
from sendkeys2.nametosym import NameToSym

* Fri 09 Jan 2015 11:09:33 PM JST
NameToSym()
* Fri 09 Jan 2015 11:10:44 PM JST
'/usr/include/X11/keysymdef.h'
* Fri 09 Jan 2015 11:14:56 PM JST
0x20
* Fri 09 Jan 2015 11:15:01 PM JST
    
* Fri 09 Jan 2015 11:15:18 PM JST
{'space': 0x20}
* Fri 09 Jan 2015 11:15:35 PM JST
'/usr/include/X11/keysymdef.h'
* Fri 09 Jan 2015 11:18:26 PM JST
self
* Fri 09 Jan 2015 11:18:51 PM JST
import re as _re
from path import Path as _Path

* Fri 09 Jan 2015 11:19:06 PM JST
_Path(fpath)
* Fri 09 Jan 2015 11:19:10 PM JST
    keysymdef_h = _Path(fpath)
    regex, syms = _re.compile('^#define'), {}
    if not keysymdef_h.exists():
        return syms
    with keysymdef_h.open('r') as fobj:
        for line in fobj.readlines():
            if regex.match(line) is not None:
                lines = line.split()
                syms.setdefault(lines[1].replace('XK_', ''), int(lines[2], 16))

* Fri 09 Jan 2015 11:20:14 PM JST
define'), {}
* Fri 09 Jan 2015 11:20:50 PM JST
cls()
* Fri 09 Jan 2015 11:20:53 PM JST
syms 
* Fri 09 Jan 2015 11:20:57 PM JST

* Fri 09 Jan 2015 11:20:57 PM JST

* Fri 09 Jan 2015 11:20:57 PM JST
        this = cls()

* Fri 09 Jan 2015 11:21:24 PM JST
syms
* Fri 09 Jan 2015 11:22:38 PM JST
cls({})
* Fri 09 Jan 2015 11:22:43 PM JST
cls({})
* Fri 09 Jan 2015 11:23:58 PM JST
syms
* Fri 09 Jan 2015 11:25:16 PM JST

* Fri 09 Jan 2015 11:25:16 PM JST

* Fri 09 Jan 2015 11:25:16 PM JST
        regex = _re.compile('^#define')

* Fri 09 Jan 2015 11:31:33 PM JST
'/usr/include/X11/keysymdef.h'
* Fri 09 Jan 2015 11:31:58 PM JST
'/usr/include/X11/keysymdef.h'
* Fri 09 Jan 2015 11:32:32 PM JST
'/usr/include/X11/keysymdef.h'
* Fri 09 Jan 2015 11:34:18 PM JST
keysymdef/
* Fri 09 Jan 2015 11:36:05 PM JST
class SymToName:
    """Class SymToName
    """
    # Attributes:
    __dict = None  # (dict) 
    
    # Operations
    def set(self, sym, name):
        """function set
        
        sym: 
        name: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def sym_to_name(self, sym):
        """function sym_to_name
        
        sym: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear(self):
        """function clear
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def copy(self):
        """function copy
        
        returns SymToName
        """
        return None # should raise NotImplementedError()
    
    def update(self, dict):
        """function update
        
        dict: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def syms(self):
        """function syms
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def names(self):
        """function names
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def itersyms(self):
        """function itersyms
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iternames(self):
        """function iternames
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iteritems(self):
        """function iteritems
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def items(self):
        """function items
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def set_default(self, sym, name):
        """function set_default
        
        sym: Keysym
        name: Keyname
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, sym, name):
        """function __setitem__
        
        sym: Keysym
        name: Keyname
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, sym):
        """function __getitem__
        
        sym: Keysym
        
        returns Keyname
        """
        return None # should raise NotImplementedError()
    
    def __delitem__(self, sym):
        """function __delitem__
        
        sym: Keysym
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __len__(self):
        """function __len__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __contains__(self, sym):
        """function __contains__
        
        sym: Keysym
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __iter__(self):
        """function __iter__
        
        returns generator
        """
        return None # should raise NotImplementedError()
    
    def __nonzero__(self):
        """function __nonzero__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __init__(self, val = None):
        """function __init__
        
        val: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __init__(self, val):
        """function __init__
        
        val: dict
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __init__(self, val):
        """function __init__
        
        val: NameToSym
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Fri 09 Jan 2015 11:37:24 PM JST


* Fri 09 Jan 2015 11:37:26 PM JST
val
* Fri 09 Jan 2015 11:37:51 PM JST
import sendkeys2.keyname as keyname
import sendkeys2.keysym as keysym

* Fri 09 Jan 2015 11:38:19 PM JST

* Fri 09 Jan 2015 11:38:19 PM JST

* Fri 09 Jan 2015 11:38:19 PM JST
        return None # should raise NotImplementedError()

* Fri 09 Jan 2015 11:38:28 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 11:38:42 PM JST
self[]
* Fri 09 Jan 2015 11:39:11 PM JST
    def __repr__(self):
        """function __repr__

        returns str
        """
        return '{0.__class__.__name__}({0._dict})'.format(self)

    def __str__(self):
        """function __str__

        returns str
        """
        return None # should raise NotImplementedError()

    def __contains__(self, name):
        """function __contains__

        returns bool
        """
        return name in self._dict

    def __iter__(self):
        """function __iter__

        returns
        """
        return iter(self._dict)

    def __nonzero__(self):
        """function __nonzero__

        returns bool
        """
        return bool(self._dict)

* Fri 09 Jan 2015 11:47:38 PM JST

* Fri 09 Jan 2015 11:48:21 PM JST
        regex = _re.compile('^#define')
        keysymdef_h = _Path(filepath)
        with keysymdef_h.open('r') as fobj:
            for line in fobj.readlines():
                if regex.match(line) is not None:
                    lines = line.split()
                    this.setdefault(lines[1].replace('XK_', ''),
                                    int(lines[2], 16))

* Fri 09 Jan 2015 11:48:47 PM JST
filepath
* Fri 09 Jan 2015 11:48:52 PM JST
this
* Fri 09 Jan 2015 11:49:33 PM JST
from_file
* Fri 09 Jan 2015 11:53:22 PM JST
            from sendkeys2.keysymdef import KEYSYMDEF
            dic = KEYSYMDEF

* Fri 09 Jan 2015 11:53:37 PM JST

* Fri 09 Jan 2015 11:53:37 PM JST

* Fri 09 Jan 2015 11:53:37 PM JST
        dic = None

* Fri 09 Jan 2015 11:53:49 PM JST

* Fri 09 Jan 2015 11:53:49 PM JST

* Fri 09 Jan 2015 11:53:49 PM JST
        self.update(dic)

* Fri 09 Jan 2015 11:53:55 PM JST
self.update(dic)
* Fri 09 Jan 2015 11:53:59 PM JST
KEYSYMDEF
* Fri 09 Jan 2015 11:54:01 PM JST

* Fri 09 Jan 2015 11:54:01 PM JST

* Fri 09 Jan 2015 11:54:02 PM JST
            dic = KEYSYMDEF

* Fri 09 Jan 2015 11:54:10 PM JST

* Fri 09 Jan 2015 11:54:10 PM JST

* Fri 09 Jan 2015 11:54:10 PM JST
            dic = val

* Fri 09 Jan 2015 11:54:14 PM JST

* Fri 09 Jan 2015 11:54:14 PM JST

* Fri 09 Jan 2015 11:54:15 PM JST
            dic = {}

* Fri 09 Jan 2015 11:54:20 PM JST
dic
* Fri 09 Jan 2015 11:55:50 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 11:57:03 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 11:57:05 PM JST
lsef.
* Fri 09 Jan 2015 11:57:13 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 11:57:14 PM JST
slf.
* Fri 09 Jan 2015 11:57:21 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 11:57:26 PM JST
value
* Fri 09 Jan 2015 11:57:32 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 11:57:42 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 11:57:55 PM JST
None # should raise NotImplementedError()
* Fri 09 Jan 2015 11:57:57 PM JST
slf.
* Fri 09 Jan 2015 11:58:12 PM JST
        return None # should raise NotImplementedError()

* Fri 09 Jan 2015 11:58:33 PM JST
name
* Fri 09 Jan 2015 11:58:50 PM JST
ysm
* Fri 09 Jan 2015 11:59:01 PM JST
kearg
* Fri 09 Jan 2015 11:59:57 PM JST
# recursive call
* Sat 10 Jan 2015 12:00:17 AM JST
return 
* Sat 10 Jan 2015 12:00:19 AM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:00:30 AM JST
return None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:01:25 AM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:01:34 AM JST
return None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:03:08 AM JST
self.
* Sat 10 Jan 2015 12:05:27 AM JST
for
* Sat 10 Jan 2015 12:08:21 AM JST
nametosym.
* Sat 10 Jan 2015 12:09:03 AM JST
NameToSym
* Sat 10 Jan 2015 12:09:10 AM JST
nametosym
* Sat 10 Jan 2015 12:09:27 AM JST
import
* Sat 10 Jan 2015 12:11:01 AM JST
from pprint import pformat
* Sat 10 Jan 2015 12:11:16 AM JST
pformat
* Sat 10 Jan 2015 12:12:18 AM JST
from pprint import pformat
* Sat 10 Jan 2015 12:12:39 AM JST
self.
* Sat 10 Jan 2015 12:25:52 AM JST
class NameSym:
    """Class NameSym
    """
    # Attributes:
    __symname = None  # (SymToName) 
    __namesym = None  # (NameToSym) 
    
    # Operations
    def sym_to_name(self):
        """function sym_to_name
        
        returns Keyname
        """
        return None # should raise NotImplementedError()
    
    def name_to_sym(self):
        """function name_to_sym
        
        returns Keysym
        """
        return None # should raise NotImplementedError()
    
    def set(self, sym, name):
        """function set
        
        sym: 
        name: 
        
        returns Name
        """
        return None # should raise NotImplementedError()
    
    def convert(self, name):
        """function convert
        
        name: Keyname
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def convert(self, sym):
        """function convert
        
        sym: Keysym
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iternames(self):
        """function iternames
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def itersyms(self):
        """function itersyms
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def names(self):
        """function names
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def syms(self):
        """function syms
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def clear(self):
        """function clear
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def copy(self):
        """function copy
        
        returns NameSym
        """
        return None # should raise NotImplementedError()
    
    def __len__(self):
        """function __len__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __contains__(self):
        """function __contains__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __nonzero__(self):
        """function __nonzero__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, name):
        """function __getitem__
        
        name: Keyname
        
        returns Keysym
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, sym):
        """function __getitem__
        
        sym: Keysym
        
        returns Keyname
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, name, sym):
        """function __setitem__
        
        name: Keyname
        sym: Keysym
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, sym, name):
        """function __setitem__
        
        sym: Keysym
        name: Keyname
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __delitem__(self, name):
        """function __delitem__
        
        name: Keyname
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __delitem__(self, sym):
        """function __delitem__
        
        sym: Keysym
        
        returns None
        """
        return None # should raise NotImplementedError()
    


* Sat 10 Jan 2015 12:29:06 AM JST
from
* Sat 10 Jan 2015 12:29:28 AM JST

* Sat 10 Jan 2015 12:29:29 AM JST
nametosym
* Sat 10 Jan 2015 12:29:33 AM JST
nametosym
* Sat 10 Jan 2015 12:29:45 AM JST
import
* Sat 10 Jan 2015 12:29:47 AM JST
import
* Sat 10 Jan 2015 12:31:25 AM JST
symtoname = 
* Sat 10 Jan 2015 12:33:18 AM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:33:23 AM JST
SymToName.
* Sat 10 Jan 2015 12:33:44 AM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:33:49 AM JST
sym
* Sat 10 Jan 2015 12:34:35 AM JST
sym
* Sat 10 Jan 2015 12:34:42 AM JST

* Sat 10 Jan 2015 12:34:42 AM JST

* Sat 10 Jan 2015 12:34:42 AM JST
        return None # should raise NotImplementedError()

* Sat 10 Jan 2015 12:35:11 AM JST

* Sat 10 Jan 2015 12:35:11 AM JST

* Sat 10 Jan 2015 12:35:11 AM JST
        return None # should raise NotImplementedError()

* Sat 10 Jan 2015 12:35:19 AM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:35:30 AM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:35:39 AM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:35:49 AM JST
return None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:36:24 AM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:36:34 AM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:37:52 AM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:38:10 AM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:40:07 AM JST
name
* Sat 10 Jan 2015 12:40:10 AM JST
return None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:40:34 AM JST

* Sat 10 Jan 2015 12:40:36 AM JST
symtoname
* Sat 10 Jan 2015 12:40:40 AM JST
symtoname
* Sat 10 Jan 2015 12:40:43 AM JST

* Sat 10 Jan 2015 12:40:44 AM JST
keyname
* Sat 10 Jan 2015 12:40:49 AM JST
keyname
* Sat 10 Jan 2015 12:40:53 AM JST
import sendkeys2.nametosym as nametosym
import sendkeys2.symtoname as symtoname

* Sat 10 Jan 2015 12:42:11 AM JST
self
* Sat 10 Jan 2015 12:42:11 AM JST
return self
* Sat 10 Jan 2015 12:42:15 AM JST
else:
* Sat 10 Jan 2015 12:42:26 AM JST
        
* Sat 10 Jan 2015 12:42:47 AM JST
        if isinstance(key, (str, keyname.Keyname)):
            return self.nametosym[key]
        elif isinstance(key, (int, keysym.Keysym)):
            return self.symtoname[key]
        # TODO: (Atami) [2015/01/10]
        raise TypeError()

* Sat 10 Jan 2015 12:43:12 AM JST
name
* Sat 10 Jan 2015 12:43:14 AM JST
sym
* Sat 10 Jan 2015 12:43:34 AM JST
return 
* Sat 10 Jan 2015 12:43:36 AM JST
return 
* Sat 10 Jan 2015 12:43:53 AM JST
return None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:44:07 AM JST
name
* Sat 10 Jan 2015 12:44:11 AM JST

* Sat 10 Jan 2015 12:44:12 AM JST
name
* Sat 10 Jan 2015 12:47:41 AM JST
name
* Sat 10 Jan 2015 12:48:37 AM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 12:49:38 AM JST
names()
* Sat 10 Jan 2015 12:49:42 AM JST
syms()
* Sat 10 Jan 2015 12:50:01 AM JST
1000
* Sat 10 Jan 2015 12:50:15 AM JST
2219
* Sat 10 Jan 2015 12:50:20 AM JST
2219)
* Sat 10 Jan 2015 12:50:20 AM JST
sym_to_name(2219)
* Sat 10 Jan 2015 02:23:11 AM JST
from_display
* Sat 10 Jan 2015 02:29:41 AM JST
        conn = xcb2.connect(display)
        setup = conn.get_setup()
        min_, max_ = mincode or setup.min_keycode, maxcode or setup.max_keycode
        last, count = max_ + min_, max_ - min_ + 1
        rep = conn.core.GetKeyboardMapping(min_, count).reply()
        this = cls()
        # chunks rep.keysyms
        this[min_:last] = zip(*[iter(rep.keysyms)] * rep.keysyms_per_keycode)
        return this

* Sat 10 Jan 2015 02:30:00 AM JST
None
* Sat 10 Jan 2015 02:30:00 AM JST
dict_=None
* Sat 10 Jan 2015 02:30:31 AM JST

* Sat 10 Jan 2015 02:30:31 AM JST

* Sat 10 Jan 2015 02:30:31 AM JST
        this = cls()

* Sat 10 Jan 2015 02:30:33 AM JST
this
* Sat 10 Jan 2015 02:30:35 AM JST

* Sat 10 Jan 2015 02:30:35 AM JST

* Sat 10 Jan 2015 02:30:35 AM JST
        return this

* Sat 10 Jan 2015 02:50:25 AM JST
uml/
* Sat 10 Jan 2015 02:50:25 AM JST
sendkeys2/uml/
* Sat 10 Jan 2015 05:56:24 PM JST
class SymToCodes:
    """Class SymToCodes
    """
    # Attributes:
    __dict = None  # (dict) 
    
    # Operations
    def from_display(self, display = ':0.0', mincode = None, maxcode = None):
        """function from_display
        
        display: str
        mincode: int
        maxcode: int
        
        returns SymToCodes
        """
        return None # should raise NotImplementedError()
    
    def set(self, sym, codes):
        """function set
        
        sym: int
        codes: list
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def set_codes(self, sym, codes):
        """function set_codes
        
        sym: int
        codes: list
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def sym_to_codes(self, sym):
        """function sym_to_codes
        
        sym: int
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def sym_to_code(self, sym, modifiers):
        """function sym_to_code
        
        sym: int
        modifiers: int
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def update(self, value):
        """function update
        
        value: dict,SymToCodes
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def clear(self):
        """function clear
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def copy(self):
        """function copy
        
        returns SymToCodes
        """
        return None # should raise NotImplementedError()
    
    def update(self, dict):
        """function update
        
        dict: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def syms(self):
        """function syms
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def listcodes(self):
        """function listcodes
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def itersyms(self):
        """function itersyms
        
        returns generator
        """
        return None # should raise NotImplementedError()
    
    def itercodes(self):
        """function itercodes
        
        returns generator
        """
        return None # should raise NotImplementedError()
    
    def items(self):
        """function items
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def iteritems(self):
        """function iteritems
        
        returns generator
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, sym, codes):
        """function __setitem__
        
        sym: int
        codes: list
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, sym):
        """function __getitem__
        
        sym: int
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def __delitem__(self, sym):
        """function __delitem__
        
        sym: int
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __len__(self):
        """function __len__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns str
        """
        return None # should raise NotImplementedError()
    
    def __str__(self):
        """function __str__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __cmp__(self, other):
        """function __cmp__
        
        other: 
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __hash__(self):
        """function __hash__
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __contains__(self):
        """function __contains__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __iter__(self):
        """function __iter__
        
        returns generator
        """
        return None # should raise NotImplementedError()
    
    def __nonzero__(self):
        """function __nonzero__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    


* Sat 10 Jan 2015 06:05:06 PM JST
from xcb2.xobj import Key
* Sat 10 Jan 2015 06:08:39 PM JST
NamedModifierMask.Alt
* Sat 10 Jan 2015 06:10:04 PM JST
sh.apt_get('-f', 'upgrade', _iter=True):
* Sat 10 Jan 2015 06:10:21 PM JST
True
* Sat 10 Jan 2015 06:10:26 PM JST
False
* Sat 10 Jan 2015 06:10:44 PM JST
.apt_get('-f', 'upgrade', _iter=True, bg=True)
* Sat 10 Jan 2015 06:13:50 PM JST
for line in sh.apt_get('-f', '-y', 'upgrade', _iter=True):
* Sat 10 Jan 2015 09:54:36 PM JST
dic
* Sat 10 Jan 2015 09:59:31 PM JST
        if dic is not None:
            self.update(dic)

* Sat 10 Jan 2015 10:08:27 PM JST
return None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:08:40 PM JST
        if not isinstance(sym, int):
            raise TypeError('{}({})'.format('CodesMap.__setitem__', sym))
        if not isinstance(codes, list):
            raise TypeError('{}({})'.format('CodesMap.__setitem__', codes))

* Sat 10 Jan 2015 10:09:27 PM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:09:52 PM JST
return None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:10:06 PM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:10:18 PM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:10:58 PM JST
pformat
* Sat 10 Jan 2015 10:11:03 PM JST
self._dic
* Sat 10 Jan 2015 10:11:28 PM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:11:36 PM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:12:51 PM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:13:05 PM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:13:13 PM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:13:20 PM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:13:33 PM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:13:42 PM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:13:51 PM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:14:07 PM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:14:30 PM JST
return None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:14:54 PM JST

* Sat 10 Jan 2015 10:14:54 PM JST

* Sat 10 Jan 2015 10:14:54 PM JST
        return None # should raise NotImplementedError()

* Sat 10 Jan 2015 10:15:01 PM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 10:16:33 PM JST
modifiers
* Sat 10 Jan 2015 10:17:17 PM JST
sym]
* Sat 10 Jan 2015 10:18:02 PM JST
None # should raise NotImplementedError()
* Sat 10 Jan 2015 11:01:23 PM JST
return 
* Sat 10 Jan 2015 11:01:33 PM JST
 None # should raise NotImplementedError()
* Sat 10 Jan 2015 11:10:50 PM JST
if 1 < len(codes):
* Sat 10 Jan 2015 11:10:56 PM JST
codes.
* Sat 10 Jan 2015 11:11:42 PM JST
        if isinstance(dic, (dict, self.__class__)):
            for sym, codes in dic.items():
                self[sym] = codes

* Sat 10 Jan 2015 11:12:13 PM JST
self, 
* Sat 10 Jan 2015 11:12:25 PM JST
SUMMARY
* Sat 10 Jan 2015 11:12:38 PM JST

* Sat 10 Jan 2015 11:12:38 PM JST

* Sat 10 Jan 2015 11:12:38 PM JST
            getmodifier(key)

* Sat 10 Jan 2015 11:14:09 PM JST
None
* Sat 10 Jan 2015 11:14:11 PM JST
None
* Sat 10 Jan 2015 11:14:11 PM JST
dic=None
* Sat 10 Jan 2015 11:14:50 PM JST
CodeToSyms
* Sat 10 Jan 2015 11:40:33 PM JST
self
* Sat 10 Jan 2015 11:41:04 PM JST
        conn = xcb2.connect(display)
        setup = conn.get_setup()
        min_, max_ = mincode or setup.min_keycode, maxcode or setup.max_keycode
        last, count = max_ + min_, max_ - min_ + 1
        rep = conn.core.GetKeyboardMapping(min_, count).reply()
        # chunks rep.keysyms
        self[min_:last] = zip(*[iter(rep.keysyms)] * rep.keysyms_per_keycode)

* Sat 10 Jan 2015 11:41:45 PM JST
self
* Sat 10 Jan 2015 11:42:27 PM JST
_
* Sat 10 Jan 2015 11:42:28 PM JST
self._
* Sat 10 Jan 2015 11:43:07 PM JST
def
* Sat 10 Jan 2015 11:44:29 PM JST
self
* Sat 10 Jan 2015 11:46:08 PM JST
self
* Sat 10 Jan 2015 11:48:14 PM JST
code
* Sat 10 Jan 2015 11:49:23 PM JST
    def setsyms(self, code, syms):
        r"""SUMMARY

        setsyms(code, syms)

        @Arguments:
        - `code`:
        - `syms`:

        @Return:

        @Error:
        """
        for index, sym in enumerate(syms, start=0):
            if 0 == sym:
                continue
            self.appendkey(sym, piece.Key(code, index))


* Sat 10 Jan 2015 11:50:55 PM JST
enumerate(
* Sat 10 Jan 2015 11:50:56 PM JST
0)
* Sat 10 Jan 2015 11:50:57 PM JST
start
* Sat 10 Jan 2015 11:51:01 PM JST
index, 
* Sun 11 Jan 2015 12:16:08 AM JST
class SymCode:
    """Class SymCode
    """
    # Attributes:
    __symcodes = None  # (SymToCodes) 
    __codesyms = None  # (CodeToSyms) 
    
    # Operations
    def from_display(self, display = ':0.0', mincode = None, maxcode = None):
        """function from_display
        
        display: str
        mincode: int
        maxcode: int
        
        returns SymCode
        """
        return None # should raise NotImplementedError()
    
    def sym_to_codes(self, sym):
        """function sym_to_codes
        
        sym: int
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def sym_to_code(self, sym, modifiers):
        """function sym_to_code
        
        sym: int
        modifiers: int
        
        returns Keycode
        """
        return None # should raise NotImplementedError()
    
    def code_to_syms(self, code):
        """function code_to_syms
        
        code: int
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def code_to_sym(self, code, modifiers):
        """function code_to_sym
        
        code: int
        modifiers: int
        
        returns Keysym
        """
        return None # should raise NotImplementedError()
    


* Sun 11 Jan 2015 12:18:17 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 12:18:52 AM JST
symcodes
* Sun 11 Jan 2015 12:18:55 AM JST
codesyms
* Sun 11 Jan 2015 12:18:58 AM JST
symcodes
* Sun 11 Jan 2015 12:19:20 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 12:20:00 AM JST
code
* Sun 11 Jan 2015 12:20:01 AM JST
codesyms.code
* Sun 11 Jan 2015 12:20:19 AM JST
symcode.
* Sun 11 Jan 2015 12:22:41 AM JST
modifiers
* Sun 11 Jan 2015 12:22:53 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 12:23:33 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 12:24:12 AM JST
SymToCodes
* Sun 11 Jan 2015 01:27:29 AM JST
class CharToSym:
    """Class CharToSym
    """
    # Attributes:
    
    # Operations
    def from_syms(self, syms):
        """function from_syms
        
        syms: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set(self, char, sym):
        """function set
        
        char: 
        sym: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def char_to_sym(self, char):
        """function char_to_sym
        
        char: unicode
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def chars(self):
        """function chars
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def syms(self):
        """function syms
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iterchars(self):
        """function iterchars
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def itersyms(self):
        """function itersyms
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def items(self):
        """function items
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iteritems(self):
        """function iteritems
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear(self):
        """function clear
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def copy(self):
        """function copy
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, char, sym):
        """function __setitem__
        
        char: 
        sym: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, char):
        """function __getitem__
        
        char: 
        
        returns Keysym
        """
        return None # should raise NotImplementedError()
    
    def __delitem__(self, char):
        """function __delitem__
        
        char: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __len__(self):
        """function __len__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __contains__(self, char):
        """function __contains__
        
        char: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __nonzero__(self):
        """function __nonzero__
        
        returns bool
        """
        return None # should raise NotImplementedError()
    


* Sun 11 Jan 2015 01:28:57 AM JST
class CharToSym:
    """Class CharToSym
    """
    # Attributes:
    
    # Operations
    def from_syms(self, syms):
        """function from_syms
        
        syms: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set(self, char, sym):
        """function set
        
        char: 
        sym: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def char_to_sym(self, char):
        """function char_to_sym
        
        char: unicode
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def chars(self):
        """function chars
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def syms(self):
        """function syms
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iterchars(self):
        """function iterchars
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def itersyms(self):
        """function itersyms
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def items(self):
        """function items
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iteritems(self):
        """function iteritems
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear(self):
        """function clear
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def copy(self):
        """function copy
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __setitem__(self, char, sym):
        """function __setitem__
        
        char: 
        sym: 
        
        returns None
        """
        return None # should raise NotImplementedError()
    
    def __getitem__(self, char):
        """function __getitem__
        
        char: 
        
        returns Keysym
        """
        return None # should raise NotImplementedError()
    
    def __delitem__(self, char):
        """function __delitem__
        
        char: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __len__(self):
        """function __len__
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def __repr__(self):
        """function __repr__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __contains__(self, char):
        """function __contains__
        
        char: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __nonzero__(self):
        """function __nonzero__
        
        returns bool
        """
        return None # should raise NotImplementedError()

* Sun 11 Jan 2015 01:31:35 AM JST
import warnings
from pprint import pformat

import xcb2
from xcb2.xproto import NamedModifierMask

import sendkeys2.keycode as keycode
import sendkeys2.keysym as keysym
import sendkeys2.pieces as pieces


class CodeToSyms(object):
    r"""CodeToSyms

    CodeToSyms is a object.
    Responsibility:
    """
    # Attributes:
    def __init__(self, dict_=None):
        r"""
        """
        self.data = {}
        if dict_ is not None:
            self.update(dict_)

    @classmethod
    def from_display(cls, display=':0.0', mincode=None, maxcode=None):
        r"""SUMMARY

        from_display(display=':0.0', mincode=None, maxcode=None)

        @Arguments:
        - `display`:
        - `mincode`:
        - `maxcode`:

        @Return:

        @Error:
        """
        conn = xcb2.connect(display)
        setup = conn.get_setup()
        min_, max_ = mincode or setup.min_keycode, maxcode or setup.max_keycode
        last, count = max_ + min_, max_ - min_ + 1
        rep = conn.core.GetKeyboardMapping(min_, count).reply()
        # chunks rep.keysyms
        this = cls()
        this[min_:last] = zip(*[iter(rep.keysyms)] * rep.keysyms_per_keycode)
        return this

    __hash__ = None # Avoid Py3k warning

    # Operations
    def set(self, code, syms):
        """set keysym list

        code (int): keycode value.
        syms (list): keysym list.

        returns None
        """
        self[code] = syms

    def setdefault(self, code, syms=None):
        r"""SUMMARY

        setdefault(code, syms=None)

        @Arguments:
        - `code`:
        - `syms`: (default: [])

        @Return:

        @Error:
        """
        if code not in self:
            self[code] = syms or []
        return self[code]

    def code_to_syms(self, code):
        """code_to_syms

        @Arguments:
        - `code`:

        @Return list:
        """
        return self[code]

    def code_to_sym(self, code, modifiers=0):
        """code_to_sym

        code: int
        modifiers: int

        returns Keysym
        """
        index = 0
        if (NamedModifierMask.Shift & modifiers) != 0:
            index += 1
        if (NamedModifierMask.Alt & modifiers) != 0:
            index += 2
        return self[code][index]

    def clear(self):
        """clear

        returns None
        """
        self.data.clear()

    def copy(self):
        """copy

        returns CodeToSyms
        """
        from copy import deepcopy
        return deepcopy(self)

    def update(self, dict_):
        """update

        dict_:

        returns None
        """
        if isinstance(dict_, (self.__class__, )):
            self.data.update(dict_.data)
        elif isinstance(dict_, (dict, )):
            for code, syms in dict_.iteritems():
                self[code] = syms

    def codes(self):
        """codes

        returns list
        """
        return self.data.keys()

    def listsyms(self):
        """listsyms

        returns lsit
        """
        return self.data.values()

    def itercodes(self):
        """itercodes

        returns generator
        """
        return self.data.iterkeys()

    def itersyms(self):
        """itersyms

        returns generator
        """
        return self.data.itervalues()

    def items(self):
        """items

        returns list
        """
        return self.data.items()

    def iteritems(self):
        """iteritems

        returns generator
        """
        return self.data.iteritems()

    def __setitem__(self, code, syms):
        self.data[keycode.Keycode(code)] = [keysym.Keysym(x) for x in syms]

    def __getitem__(self, code):
        return self.data[code]

    def __delitem__(self, code):
        del self.data[code]

    def __getslice__(self, i, j):
        i, j = max(i, 0), max(j, 0)
        if j < i:
            i, j = j, i
        new = self.__class__()
        for code in xrange(i, j + 1):
            try:
                new.setdefault(code, self[code])
            except KeyError as _err:
                warnings.warn(str(_err))
        return new

    def __setslice__(self, i, j, seq):
        i, j = max(i, 0), max(j, 0)
        if j < i:
            i, j = j, i
        for code, syms in zip(xrange(i, j + 1), seq):
            self[code] = syms

    def __delslice__(self, i, j):
        i, j = max(i, 0), max(j, 0)
        if j < i:
            i, j = j, i
        for code in xrange(i, j + 1):
            try:
                del self[code]
            except KeyError as _err:
                warnings.warn(str(_err))

    def __len__(self):
        return len(self.data)

    def __repr__(self):
        return '{0.__class__.__name__}({1})'.format(self, pformat(self.data))

    def __str__(self):
        return repr(self)

    def __cmp__(self, other):
        if isinstance(other, (self.__class__, )):
            return cmp(self.data, other.data)
        return cmp(self.data, other)


    def __contains__(self, code):
        return code in self.data

    def __iter__(self):
        return iter(self.data)

    def __nonzero__(self):
        return bool(self.data)


class SymToCodes(object):
    """Class SymToCodes
    """
    # Attributes:
    def __init__(self, dic=None):
        r"""

        @Arguments:
        - `dic`:
        """
        self._dic = {}
        if dic is not None:
            self.update(dic)

    @classmethod
    def from_display(cls, display=':0.0', mincode=None, maxcode=None):
        r"""SUMMARY

        from_display(display=':0.0')

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        return cls.from_codetosyms(
            CodeToSyms.from_display(display, mincode, maxcode))

    @classmethod
    def from_codetosyms(cls, codetosyms):
        r"""SUMMARY

        from_codetosyms(codetosyms)

        @Arguments:
        - `codetosyms`:

        @Return:

        @Error:
        """
        if not isinstance(codetosyms, (CodeToSyms, )):
            # TODO: (Atami) [2015/01/10]
            raise StandardError()
        this = cls()
        for code, syms in codetosyms.iteritems():
            this.setsyms(code, syms)
        return this

    # Operations
    def setsyms(self, code, syms):
        r"""SUMMARY

        setsyms(code, syms)

        @Arguments:
        - `code`:
        - `syms`:

        @Return:

        @Error:
        """
        for sym in syms:
            if 0 == sym:
                continue
            self.appendcode(sym, code)

    def set(self, sym, codes):
        """function set

        sym: int
        codes: list

        returns None
        """
        self[sym] = codes

    def sym_to_codes(self, sym, default=None):
        """function sym_to_codes

        sym: int

        returns list
        """
        return self._dic.get(sym, default or [])

    def sym_to_code(self, sym, default=None):
        """function sym_to_code

        sym: int
        modifiers: int

        returns Keycode
        """
        codes = self.sym_to_codes(sym)
        if not codes:
            return default
        return codes[0]

    def clear(self):
        """function clear

        returns None
        """
        return self._dic.clear()

    def copy(self):
        """function copy

        returns SymToCodes
        """
        from copy import deepcopy
        return deepcopy(self)

    def update(self, dic):
        """function update

        dict:

        returns None
        """
        if isinstance(dic, (dict, self.__class__)):
            for sym, codes in dic.items():
                self[sym] = codes

    def appendcode(self, sym, code):
        r"""SUMMARY

        appendcode(sym, code)

        @Arguments:
        - `sym`:
        - `code`:

        @Return:

        @Error:
        """
        def getmodifiers(key):
            r"""For sort key."""
            return key.get_modifiers()

        if not sym in self:
            self[sym] = []
        codes = self[sym]
        codes.append(pieces.XKey(code, len(codes)))
        if 2 <= len(codes):
            codes.sort(key=getmodifiers)

    def syms(self):
        """function syms

        returns list
        """
        return self._dic.keys()

    def listcodes(self):
        """function listcodes

        returns list
        """
        return self._dic.values()

    def itersyms(self):
        """function itersyms

        returns generator
        """
        return self._dic.iterkeys()

    def itercodes(self):
        """function itercodes

        returns generator
        """
        return self._dic.itervalues()

    def items(self):
        """function items

        returns list
        """
        return self._dic.items()

    def iteritems(self):
        """function iteritems

        returns generator
        """
        return self._dic.iteritems()

    def __setitem__(self, sym, codes):
        if not isinstance(sym, (int, keysym.Keysym)):
            # TODO: (Atami) [2015/01/10]
            raise TypeError()
        if not isinstance(codes, list):
            # TODO: (Atami) [2015/01/10]
            raise TypeError()
        self._dic[sym] = codes

    def __getitem__(self, sym):
        return self._dic[sym]

    def __delitem__(self, sym):
        del self._dic[sym]

    def __len__(self):
        return len(self._dic)

    def __repr__(self):
        return '{0.__class__.__name__}({1})'.format(self, pformat(self._dic))

    def __str__(self):
        return None # should raise NotImplementedError()

    def __contains__(self, sym):
        return sym in self._dic

    def __iter__(self):
        return iter(self._dic)

    def __nonzero__(self):
        return bool(self._dic)


class SymCode(object):
    """Class SymCode
    """
    # Attributes:
    def __init__(self, display=':0.0', mincode=None, maxcode=None):
        r"""

        @Arguments:
        - `display`:
        """
        self._display = display
        self.codesyms = CodeToSyms.from_display(display, mincode, maxcode)
        self.symcodes = SymToCodes.from_codetosyms(self.codesyms)

    # Operations
    def sym_to_codes(self, sym):
        """function sym_to_codes

        sym: int

        returns list
        """
        return self.symcodes.sym_to_codes(sym)

    def sym_to_code(self, sym, default=None):
        """function sym_to_code

        sym: int
        modifiers: int

        returns Keycode
        """
        return self.symcodes.sym_to_code(sym, default)

    def code_to_syms(self, code):
        """function code_to_syms

        code: int

        returns list
        """
        return self.codesyms.code_to_syms(code)

    def code_to_sym(self, code, modifiers):
        """function code_to_sym

        code: int
        modifiers: int

        returns Keysym
        """
        return self.codesyms.code_to_sym(code, modifiers)

* Sun 11 Jan 2015 01:32:18 AM JST
class SymToName(object):
    r"""SymToName

    SymToName is a object.
    Responsibility:
    """
    def __init__(self, val=None):
        r"""

        @Arguments:
        - `val`:
        """
        self._dict = {}
        if val is None:
            for name, sym in nametosym.NameToSym().iteritems():
                self.setdefault(sym, name)
        elif isinstance(val, (dict, self.__class__)):
            self.update(val)
        elif isinstance(val, (nametosym.NameToSym, )):
            for name, sym in val.iteritems():
                self.setdefault(sym, name)
        else:
            # TODO: (Atami) [2015/01/10]
            raise StandardError()

    # Operations
    def set(self, sym, name):
        """function set

        sym:
        name:

        returns None
        """
        self[sym] = name

    def sym_to_name(self, sym):
        """function sym_to_name

        sym: int

        returns
        """
        return self[sym]

    def clear(self):
        """function clear

        returns
        """
        self._dict.clear()

    def copy(self):
        """function copy

        returns SymToName
        """
        return self.__class__(self._dict.copy())

    def update(self, dict_=None, **kwargs):
        """function update

        dict:

        returns None
        """
        if dict_ is not None:
            for sym, name in dict_.iteritems():
                self[sym] = name
        if len(kwargs):
            self.update(kwargs) # recursive call

    def syms(self):
        """function syms

        returns list
        """
        return self._dict.keys()

    def names(self):
        """function names

        returns list
        """
        return self._dict.values()

    def itersyms(self):
        """function itersyms

        returns
        """
        return self._dict.iterkeys()

    def iternames(self):
        """function iternames

        returns
        """
        return self._dict.itervalues()

    def iteritems(self):
        """function iteritems

        returns
        """
        return self._dict.iteritems()

    def items(self):
        """function items

        returns list
        """
        return self._dict.items()

    def setdefault(self, sym, name):
        """function setdefault

        sym: Keysym
        name: Keyname

        returns
        """
        if sym not in self:
            self[sym] = name
        return self[sym]

    def __setitem__(self, sym, name):
        self._dict[keysym.Keysym(sym)] = keyname.Keyname(name)

    def __getitem__(self, sym):
        return self._dict[sym]

    def __delitem__(self, sym):
        del self._dict[sym]

    def __len__(self):
        return len(self._dict)

    def __repr__(self):
        return '{0.__class__.__name__}({1})'.format(self, pformat(self._dict))

    def __str__(self):
        return None # should raise NotImplementedError()

    def __contains__(self, name):
        return name in self._dict

    def __iter__(self):
        return iter(self._dict)

    def __nonzero__(self):
        return bool(self._dict)

* Sun 11 Jan 2015 01:32:35 AM JST
import sendkeys2.keyname as keyname
* Sun 11 Jan 2015 01:32:51 AM JST
class NameToSym(object):
    r"""NameToSym

    NameToSym is a object.
    Responsibility:

    NameToSym({'space': 0x20})
    NameToSym(NameToSym({'space': 0x20}))
    NameToSym('/usr/include/X11/keysymdef.h')
    """

    def __init__(self, val=None):
        """function __init__

        val:

        returns
        """
        self._dict = {}
        if val is None:
            from sendkeys2.keysymdef import KEYSYMDEF
            self.update(KEYSYMDEF)
        elif isinstance(val, (dict, self.__class__)):
            self.update(val)
        elif isinstance(val, (str, )):
            regex = _re.compile('^#define')
            keysymdef_h = _Path(val)
            with keysymdef_h.open('r') as fobj:
                for line in fobj.readlines():
                    if regex.match(line) is not None:
                        lines = line.split()
                        self.setdefault(lines[1].replace('XK_', ''),
                                        int(lines[2], 16))
        else:
            # TODO: (Atami) [2015/01/09]
            raise StandardError()

    # Operations
    def set(self, name, sym):
        """function set

        name:
        sym:

        returns None
        """
        self[name] = sym

    def name_to_sym(self, name):
        """function name_to_sym

        name: str

        returns Keysym
        """
        return self[name]

    def clear(self):
        """function clear

        returns None
        """
        self._dict.clear()

    def copy(self, ):
        r"""SUMMARY

        copy()

        @Return:

        @Error:
        """
        return self.__class__(self._dict.copy())

    def update(self, dict_=None, **kwargs):
        """function update

        dict:

        returns None
        """
        if dict_ is not None:
            for name, sym in dict_.iteritems():
                self[name] = sym
        if len(kwargs):
            self.update(kwargs) # recursive call

    def names(self):
        """function names

        returns list
        """
        return self._dict.keys()

    def syms(self):
        """function syms

        returns list
        """
        return self._dict.values()

    def iternames(self):
        """function iternames

        returns generator
        """
        return self._dict.iterkeys()

    def itersyms(self):
        """function itersyms

        returns generator
        """
        return self._dict.itervalues()

    def items(self):
        """function items

        returns list
        """
        return self._dict.items()

    def iteritems(self):
        """function iteritems

        returns generator
        """
        return self._dict.iteritems()

    def setdefault(self, name, sym):
        """function setdefault

        name:
        sym:

        returns None
        """
        if name not in self:
            self[name] = sym
        return self[name]

    def __setitem__(self, name, sym):
        self._dict[keyname.Keyname(name)] = keysym.Keysym(sym)

    def __getitem__(self, name):
        """function __getitem__

        name: Keyname

        returns Keysym
        """
        return self._dict[name]

    def __delitem__(self, name):
        """function __delitem__

        name: Keyname

        returns None
        """
        del self._dict[name]

    def __len__(self, ):
        """function __len__


        returns int
        """
        return len(self._dict)

    def __repr__(self):
        """function __repr__

        returns str
        """
        return '{0.__class__.__name__}({1})'.format(self, pformat(self._dict))

    def __str__(self):
        """function __str__

        returns str
        """
        return None # should raise NotImplementedError()

    def __contains__(self, name):
        """function __contains__

        returns bool
        """
        return name in self._dict

    def __iter__(self):
        """function __iter__

        returns
        """
        return iter(self._dict)

    def __nonzero__(self):
        """function __nonzero__

        returns bool
        """
        return bool(self._dict)

* Sun 11 Jan 2015 01:35:17 AM JST
nametosym.
* Sun 11 Jan 2015 01:35:19 AM JST
nametosym.
* Sun 11 Jan 2015 01:37:31 AM JST
    def __init__(self, dic=None):
        r"""

        @Arguments:
        - `dic`:
        """
        self._dic = {}
        if dic is not None:
            self.update(dic)


* Sun 11 Jan 2015 01:42:58 AM JST

* Sun 11 Jan 2015 01:42:58 AM JST

* Sun 11 Jan 2015 01:42:58 AM JST
                symobj

* Sun 11 Jan 2015 01:43:32 AM JST
self
* Sun 11 Jan 2015 01:45:29 AM JST

* Sun 11 Jan 2015 01:45:29 AM JST

* Sun 11 Jan 2015 01:45:29 AM JST
                symobj = keysym.Keysym(sym)

* Sun 11 Jan 2015 01:45:45 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:46:51 AM JST
        if isinstance(dic, (dict, self.__class__)):
            for sym, codes in dic.items():
                self[sym] = codes

* Sun 11 Jan 2015 01:47:10 AM JST
sym
* Sun 11 Jan 2015 01:47:14 AM JST
codes
* Sun 11 Jan 2015 01:47:19 AM JST
sym
* Sun 11 Jan 2015 01:47:21 AM JST
codes
* Sun 11 Jan 2015 01:47:41 AM JST
return None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:47:54 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:48:05 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:48:38 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:48:46 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:48:55 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:49:05 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:49:22 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:49:29 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:49:36 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:51:48 AM JST
isinsta
* Sun 11 Jan 2015 01:51:48 AM JST
not isinsta
* Sun 11 Jan 2015 01:52:33 AM JST
int, 
* Sun 11 Jan 2015 01:52:38 AM JST
return None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:53:03 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:53:19 AM JST
return None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:53:31 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:53:41 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:54:20 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 01:54:54 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 02:22:36 AM JST
class KeyboardMapping:
    """Class KeyboardMapping
    """
    # Attributes:
    __namechar = None  # (NameChar) 
    __symcode = None  # (SymCode) 
    
    # Operations
    def sym_to_codes(self, sym):
        """function sym_to_codes
        
        sym: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def sym_to_code(self, sym, modifiers):
        """function sym_to_code
        
        sym: int
        modifiers: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def code_to_syms(self, code):
        """function code_to_syms
        
        code: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def code_to_sym(self, code, modifiers):
        """function code_to_sym
        
        code: int
        modifiers: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def sym_to_name(self, sym):
        """function sym_to_name
        
        sym: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def name_to_sym(self, name):
        """function name_to_sym
        
        name: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 11 Jan 2015 02:24:36 AM JST
class NameSym(object):
    """Class NameSym
    """
    # Attributes:
    def __init__(self, fpath=None):
        r"""

        @Arguments:
        - `fpath`:
        """
        self.nametosym = nametosym.NameToSym(fpath)
        self.symtoname = symtoname.SymToName(self.nametosym)

    # Operations
    def sym_to_name(self, sym):
        """function sym_to_name

        returns Keyname
        """
        return self.symtoname.sym_to_name(sym)

    def name_to_sym(self, name):
        """function name_to_sym

        returns Keysym
        """
        return self.nametosym.name_to_sym(name)

    def set(self, sym, name):
        """function set

        sym:
        name:

        returns Name
        """
        self.symtoname.set(sym, name)
        self.nametosym.set(name, sym)

    def convert(self, value):
        """function convert

        name: Keyname

        returns
        """
        if isinstance(value, (str, keyname.Keyname)):
            return self.nametosym.name_to_sym(value)
        elif isinstance(value, (int, keysym.Keysym)):
            return self.symtoname.sym_to_name(value)
        else:
            # TODO: (Atami) [2015/01/10]
            raise StandardError()

    def iternames(self):
        """function iternames

        returns
        """
        return self.symtoname.iternames()

    def itersyms(self):
        """function itersyms

        returns
        """
        return self.symtoname.itersyms()

    def names(self):
        """function names

        returns list
        """
        return self.symtoname.names()

    def syms(self):
        """function syms

        returns list
        """
        return self.symtoname.syms()

    def clear(self):
        """function clear

        returns None
        """
        self.symtoname.clear()
        self.nametosym.clear()

    def copy(self):
        """function copy

        returns NameSym
        """
        from copy import deepcopy
        return deepcopy(self)

    def __len__(self):
        return len(self.symtoname)

    # def __repr__(self):
    #     return '{0.__class__.__name__}'

    def __contains__(self, val):
        return val in self.symtoname or val in self.nametosym

    def __nonzero__(self):
        return bool(self.nametosym)

    def __getitem__(self, key):
        if isinstance(key, (str, keyname.Keyname)):
            return self.nametosym[key]
        elif isinstance(key, (int, keysym.Keysym)):
            return self.symtoname[key]
        # TODO: (Atami) [2015/01/10]
        raise TypeError()

    def __setitem__(self, key, value):
        if isinstance(key, (str, keyname.Keyname)):
            self.nametosym[key] = value
        elif isinstance(key, (int, keysym.Keysym)):
            self.symtoname[key] = value
        # TODO: (Atami) [2015/01/10]
        raise TypeError()

    def __delitem__(self, key):
        del self.nametosym[key]
        del self.symtoname[key]

* Sun 11 Jan 2015 02:24:54 AM JST
uml# 
* Sun 11 Jan 2015 02:24:58 AM JST


* Sun 11 Jan 2015 02:24:59 AM JST
symname = 
* Sun 11 Jan 2015 02:25:48 AM JST
'/usr/include/X11/keysymdef.h'
* Sun 11 Jan 2015 02:26:30 AM JST
NameSym('/usr/include/X11/keysymdef.h')
* Sun 11 Jan 2015 02:26:55 AM JST
namesym
* Sun 11 Jan 2015 02:27:55 AM JST
name
* Sun 11 Jan 2015 02:28:19 AM JST
nametosym.
* Sun 11 Jan 2015 02:28:21 AM JST
symtoname.
* Sun 11 Jan 2015 02:29:28 AM JST

* Sun 11 Jan 2015 02:29:28 AM JST

* Sun 11 Jan 2015 02:29:28 AM JST
        self.charsym = CharToSym.from_syms()

* Sun 11 Jan 2015 02:32:20 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 02:32:34 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 02:32:55 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 02:32:57 AM JST
sldf.
* Sun 11 Jan 2015 02:33:02 AM JST
code
* Sun 11 Jan 2015 02:33:12 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 02:33:37 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 02:33:52 AM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 02:35:23 AM JST
char_to
* Sun 11 Jan 2015 02:35:23 AM JST
charsym.char_to
* Sun 11 Jan 2015 02:35:31 AM JST
self.char_to_sym(char)
* Sun 11 Jan 2015 02:37:37 AM JST
SymCode
* Sun 11 Jan 2015 02:37:41 AM JST
codetosyms
* Sun 11 Jan 2015 02:37:49 AM JST
KeyboardMapping
* Sun 11 Jan 2015 02:37:56 AM JST
sym_to
* Sun 11 Jan 2015 02:42:12 AM JST
from sendkeys2.keymap import KeyboardMapping
* Sun 11 Jan 2015 02:42:17 AM JST
from sendkeys2.keymap import KeyboardMapping
k=KeyboardMapping()

* Sun 11 Jan 2015 02:43:21 AM JST
97
* Sun 11 Jan 2015 02:59:55 AM JST

* Sun 11 Jan 2015 02:59:55 AM JST

* Sun 11 Jan 2015 02:59:55 AM JST
    keymap = keymap.KeyboardMapping()

* Sun 11 Jan 2015 03:52:45 AM JST
class Context:
    """Class Context
    """
    # Attributes:
    
    # Operations
    def append(self):
        """function append
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def appendleft(self):
        """function appendleft
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def pop(self):
        """function pop
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def popleft(self):
        """function popleft
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def evaluate(self):
        """function evaluate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __iter__(self):
        """function __iter__
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 11 Jan 2015 03:53:27 AM JST
class Expression:
    """Abstract class Expression
    """
    # Attributes:
    
    # Operations
    def interpret(self, context):
        """function interpret
        
        context: 
        
        returns 
        """
        raise NotImplementedError()
    


* Sun 11 Jan 2015 03:55:00 AM JST
class LeafExpression(Expression):
    """Class LeafExpression
    """
    # Attributes:
    __value = None  # () 
    
    # Operations


* Sun 11 Jan 2015 03:55:34 AM JST
class NonTerminalExpression(Expression):
    """Class NonTerminalExpression
    """
    # Attributes:
    
    # Operations


* Sun 11 Jan 2015 03:55:54 AM JST
class ButtonExpression(LeafExpression):
    """Class ButtonExpression
    """
    # Attributes:
    
    # Operations
    def interpret(self, context):
        """function interpret
        
        context: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 11 Jan 2015 03:56:07 AM JST
class ButtonExpression(LeafExpression):
    """Class ButtonExpression
    """
    # Attributes:
    
    # Operations
    def interpret(self, context):
        """function interpret
        
        context: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 11 Jan 2015 03:56:33 AM JST
class KeyExpression(LeafExpression):
    """Class KeyExpression
    """
    # Attributes:
    
    # Operations
    def interpret(self, context):
        """function interpret
        
        context: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 11 Jan 2015 03:56:47 AM JST
class NumExpression(LeafExpression):
    """Class NumExpression
    """
    # Attributes:
    
    # Operations
    def interpret(self, context):
        """function interpret
        
        context: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 11 Jan 2015 04:43:52 PM JST
context
* Sun 11 Jan 2015 04:44:33 PM JST
class XSendKeyExpression(LeafExpression):
    """Class XSendKeyExpression
    """
    # Attributes:
    
    # Operations
    def interpret(self):
        """function interpret
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 11 Jan 2015 04:46:01 PM JST
class BehaveExpression(NonTerminalExpression):
    """Class BehaveExpression
    """
    # Attributes:
    behave = None  # () 
    
    # Operations
    def interpret(self):
        """function interpret
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 11 Jan 2015 04:46:17 PM JST
class RepeatExpression(NonTerminalExpression):
    """Class RepeatExpression
    """
    # Attributes:
    __num = None  # () 
    
    # Operations
    def interpret(self):
        """function interpret
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 11 Jan 2015 04:46:52 PM JST
class ModifierExpression(NonTerminalExpression):
    """Class ModifierExpression
    """
    # Attributes:
    modifiers = None  # () 
    
    # Operations
    def interpret(self):
        """function interpret
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 11 Jan 2015 04:48:31 PM JST
None # should raise NotImplementedError()
* Sun 11 Jan 2015 07:11:02 PM JST
event_
* Sun 11 Jan 2015 07:11:03 PM JST
root_y, event_
* Sun 11 Jan 2015 07:11:03 PM JST
root_x, root_y, event_
* Sun 11 Jan 2015 07:14:10 PM JST
sendkeys2/
* Sun 11 Jan 2015 07:14:40 PM JST
import 
* Sun 11 Jan 2015 07:15:34 PM JST

* Sun 11 Jan 2015 07:15:34 PM JST

* Sun 11 Jan 2015 07:15:34 PM JST
        self._state = state

* Sun 11 Jan 2015 07:15:36 PM JST

* Sun 11 Jan 2015 07:15:37 PM JST

* Sun 11 Jan 2015 07:15:37 PM JST
        self._detail = detail

* Sun 11 Jan 2015 07:16:23 PM JST
_eky
* Sun 11 Jan 2015 07:16:38 PM JST
self
* Sun 11 Jan 2015 07:16:49 PM JST
key
* Sun 11 Jan 2015 07:16:51 PM JST
set
* Sun 11 Jan 2015 07:16:55 PM JST
code
* Sun 11 Jan 2015 07:17:27 PM JST
return 
* Sun 11 Jan 2015 11:00:12 PM JST
sendkeys2/
* Sun 11 Jan 2015 11:00:47 PM JST
sendkeys2/
* Sun 11 Jan 2015 11:01:17 PM JST
sendkeys2/
* Sun 11 Jan 2015 11:01:32 PM JST
sendkeys2/
* Sun 11 Jan 2015 11:01:37 PM JST
x
* Sun 11 Jan 2015 11:01:38 PM JST
xobj4/x
* Sun 11 Jan 2015 11:02:26 PM JST
sendkeys2
* Sun 11 Jan 2015 11:02:35 PM JST
xcb4.xobj.
* Sun 11 Jan 2015 11:20:52 PM JST
xproto/
* Sun 11 Jan 2015 11:20:52 PM JST
xcb2/xproto/
* Sun 11 Jan 2015 11:21:29 PM JST
sendkeys2/
* Sun 11 Jan 2015 11:23:35 PM JST
sendkeys2/
* Sun 11 Jan 2015 11:24:22 PM JST
sendkeys2
* Sun 11 Jan 2015 11:24:23 PM JST
sendkeys2
* Sun 11 Jan 2015 11:24:23 PM JST
sendkeys2
* Sun 11 Jan 2015 11:28:22 PM JST
from xahk2.xobj.point import Point


class InputDestination(object):
    """Class InputDestination
    """
    # Attributes:
    def __init__(self, window, point=(0, 0)):
        r"""

        @Arguments:
        - `window`:
        - `point`:
        """
        # default
        self._window = None
        self._point = Point(point[0], point[1])
        # construct value
        self.set_window(window)

    # Operations
    def get_window(self):
        """function get_window

        returns Window
        """
        return self._window

    def set_window(self, window):
        """function set_window

        window:

        returns None
        """
        # TODO: (Atami) [2015/01/02]
        self._window = window

    def get_point(self):
        """function get_point

        returns Point
        """
        return self._point

    def set_point(self, point):
        """function set_point

        point: Point

        returns None
        """
        self._point.set(point)

    def isin(self):
        """function isin

        returns bool
        """
        # TODO: (Atami) [2015/01/02]
        return None # should raise NotImplementedError()

    def set_x(self, newx):
        """function set_x

        newx: int

        returns None
        """
        self._point.set_x(newx)

    def set_y(self, newy):
        """function set_y

        newy: int

        returns None
        """
        self._point.set_y(newy)

    def get_x(self):
        """function get_x

        returns XCoordinate
        """
        return self._point.get_x()

    def get_y(self):
        """function get_y

        returns YCoordinate
        """
        return self._point.get_y()

    window = property(get_window, set_window)
    point = property(get_point, set_point)
    eventx = property(get_x, set_x)
    eventy = property(get_y, set_y)

* Sun 11 Jan 2015 11:30:33 PM JST
xcb
* Sun 11 Jan 2015 11:30:50 PM JST
import
* Sun 11 Jan 2015 11:31:18 PM JST
from . import 
* Sun 11 Jan 2015 11:31:52 PM JST
 import Point
* Sun 11 Jan 2015 11:32:00 PM JST
xahk
* Sun 11 Jan 2015 11:32:02 PM JST
xah
* Sun 11 Jan 2015 11:32:09 PM JST
import Dimension
* Sun 11 Jan 2015 11:36:13 PM JST
Point
* Sun 11 Jan 2015 11:36:14 PM JST
import Point
* Sun 11 Jan 2015 11:36:54 PM JST
event
* Sun 11 Jan 2015 11:36:56 PM JST
event
* Sun 11 Jan 2015 11:38:03 PM JST

* Sun 11 Jan 2015 11:38:03 PM JST
pieces
* Sun 11 Jan 2015 11:38:04 PM JST
as pieces
* Sun 11 Jan 2015 11:38:05 PM JST
pieces as pieces
* Sun 11 Jan 2015 11:38:19 PM JST
_iwndo
* Sun 11 Jan 2015 11:38:50 PM JST

* Sun 11 Jan 2015 11:38:50 PM JST

* Sun 11 Jan 2015 11:38:50 PM JST
        self._root = root

* Sun 11 Jan 2015 11:39:44 PM JST

* Sun 11 Jan 2015 11:39:44 PM JST

* Sun 11 Jan 2015 11:39:44 PM JST
        self._rootpoint = rootpoint

* Sun 11 Jan 2015 11:40:41 PM JST

* Sun 11 Jan 2015 11:40:41 PM JST

* Sun 11 Jan 2015 11:40:41 PM JST
        self._window = window

* Sun 11 Jan 2015 11:43:48 PM JST
get_
* Mon 12 Jan 2015 12:16:13 AM JST
                 
* Mon 12 Jan 2015 12:38:18 AM JST
sel
* Mon 12 Jan 2015 12:39:17 AM JST
reu
* Mon 12 Jan 2015 12:41:59 AM JST
nam
* Mon 12 Jan 2015 12:42:15 AM JST
title
* Mon 12 Jan 2015 12:42:38 AM JST
52428822
* Mon 12 Jan 2015 12:44:45 AM JST
import 
* Mon 12 Jan 2015 01:03:18 AM JST
window/
* Mon 12 Jan 2015 01:04:15 AM JST
class Display(object):
    r"""
    """

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `display`:
        """
        self.display = display or ''

    @classmethod
    def from_environ(cls, ):
        r"""SUMMARY

        from_environ()

        @Return:

        @Error:
        """
        return cls(_os.environ.get('DISPLAY', ''))

    def get(self, ):
        r"""SUMMARY

        get()

        @Return:

        @Error:
        """
        return self.display

    def set(self, disp):
        r"""SUMMARY

        set_display(disp)

        @Arguments:
        - `disp`:

        @Return:

        @Error:
        """
        self.display = str(disp)

    def get_connection(self, ):
        r"""SUMMARY

        get_connection()

        @Return:

        @Error:
        """
        return Connection.get_instance(display=self.display)

    def flush(self, ):
        r"""SUMMARY

        flush()

        @Return:
        """
        self.get_connection().flush()

    def __str__(self):
        return self.display

    def __repr__(self):
        return '{0.__class__.__name__}("{0.display}")'.format(self)

* Mon 12 Jan 2015 01:04:32 AM JST
None
* Mon 12 Jan 2015 01:04:38 AM JST
 or ''
* Mon 12 Jan 2015 01:05:20 AM JST
display
* Mon 12 Jan 2015 01:07:00 AM JST
display
* Mon 12 Jan 2015 01:07:04 AM JST
get()
* Mon 12 Jan 2015 01:07:04 AM JST
other.get()
* Mon 12 Jan 2015 01:07:08 AM JST
str
* Mon 12 Jan 2015 01:08:07 AM JST
from xcb5.xboj.display import Display
* Mon 12 Jan 2015 01:12:03 AM JST
from xcb5.xobj.display import Display
* Mon 12 Jan 2015 01:12:05 AM JST
from xcb5.xobj.display import Display
Display()

* Mon 12 Jan 2015 01:16:54 AM JST
xobj/
* Mon 12 Jan 2015 01:19:54 AM JST
display.Display
* Mon 12 Jan 2015 01:23:41 AM JST
display
* Mon 12 Jan 2015 01:32:13 AM JST
Resource
* Mon 12 Jan 2015 01:36:36 AM JST
class Resource(object):
    r"""SUMMARY
    """

    def __init__(self, rid, display=None):
        r"""

        @Arguments:
        - `connection`:
        - `rid`:

        """
        self.display = Display(display)
        self.id = int(rid)

    def get_display(self, ):
        r"""SUMMARY

        get_display()

        @Return:

        @Error:
        """
        return self.display

    def get_connection(self, ):
        r"""SUMMARY

        get_connection()

        @Return:

        @Error:
        """
        return self.display.get_connection()

    def __int__(self, ):
        return self.id

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.id, other.id)
        return cmp(int(self), int(other))

    def __hash__(self, ):
        return int(self.id)

    def __repr__(self, ):
        return '{0.__class__.__name__}(id={0.id})'.format(self)

    def __str__(self, ):
        return '{0.__class__.__name__}(id={0.id})'.format(self)

    def kill_client(self, ):
        r"""SUMMARY

        kill_client()

        @Return:
        """
        return self.get_connection().core.KillClientChecked(self.id)

* Mon 12 Jan 2015 01:37:21 AM JST
xconnection
* Mon 12 Jan 2015 01:37:22 AM JST
disp
* Mon 12 Jan 2015 01:37:33 AM JST
Display
* Mon 12 Jan 2015 01:37:33 AM JST
import Display
* Mon 12 Jan 2015 01:40:11 AM JST
get_connection()
* Mon 12 Jan 2015 01:40:11 AM JST
self.get_connection()
* Mon 12 Jan 2015 01:40:57 AM JST
format
* Mon 12 Jan 2015 01:40:57 AM JST
self.format
* Mon 12 Jan 2015 01:41:00 AM JST

* Mon 12 Jan 2015 01:41:00 AM JST

* Mon 12 Jan 2015 01:41:00 AM JST
    format = 'I'

* Mon 12 Jan 2015 01:41:33 AM JST
import Resource
* Mon 12 Jan 2015 01:43:37 AM JST
Drawable
* Mon 12 Jan 2015 01:43:38 AM JST
import Drawable
* Mon 12 Jan 2015 01:45:20 AM JST
from 
* Mon 12 Jan 2015 01:46:04 AM JST
list(wm.iter_wins())[4].id
* Mon 12 Jan 2015 01:46:07 AM JST
52428822
* Mon 12 Jan 2015 01:50:52 AM JST
from xcb5.xobj.window import Window
* Mon 12 Jan 2015 02:04:46 AM JST
window/
* Mon 12 Jan 2015 02:05:54 AM JST

* Mon 12 Jan 2015 02:05:55 AM JST
window
* Mon 12 Jan 2015 02:06:03 AM JST
_window
* Mon 12 Jan 2015 02:06:12 AM JST

* Mon 12 Jan 2015 02:06:14 AM JST
windowtypes
* Mon 12 Jan 2015 02:06:17 AM JST
_windowtypes
* Mon 12 Jan 2015 02:07:10 AM JST
_atom
* Mon 12 Jan 2015 02:07:13 AM JST
_atom.
* Mon 12 Jan 2015 02:09:29 AM JST
get_net_wm_window_type
* Mon 12 Jan 2015 02:10:01 AM JST
_windowtypes
* Mon 12 Jan 2015 02:13:41 AM JST
get_net_wm_window_type()
* Mon 12 Jan 2015 02:14:12 AM JST
get_net_wm_window_type()
* Mon 12 Jan 2015 02:14:42 AM JST
Root
* Mon 12 Jan 2015 02:15:45 AM JST
self.connection, self._raw.root
* Mon 12 Jan 2015 02:16:04 AM JST
get_net_wm_window_type()
* Mon 12 Jan 2015 02:20:04 AM JST
from xcb5.xobj.window import Window
* Mon 12 Jan 2015 02:25:44 AM JST
 import Window, WindowList
* Mon 12 Jan 2015 02:25:50 AM JST
_window
* Mon 12 Jan 2015 02:26:19 AM JST
Window
* Mon 12 Jan 2015 02:26:31 AM JST
import Window, WindowList
* Mon 12 Jan 2015 02:28:00 AM JST
import AtomPair # do not remove
* Mon 12 Jan 2015 02:28:06 AM JST
AtomPair
* Mon 12 Jan 2015 02:28:07 AM JST
import AtomPair
* Mon 12 Jan 2015 02:28:23 AM JST
_atompair.
* Mon 12 Jan 2015 02:28:55 AM JST
import
* Mon 12 Jan 2015 02:29:03 AM JST
_atomtypes
* Mon 12 Jan 2015 02:29:20 AM JST
_atomre
* Mon 12 Jan 2015 02:30:37 AM JST
import
* Mon 12 Jan 2015 02:30:48 AM JST
_atompair
* Mon 12 Jan 2015 02:33:22 AM JST
.NamedButtonIndex as _NamedButtonIndex
* Mon 12 Jan 2015 02:33:30 AM JST

* Mon 12 Jan 2015 02:33:30 AM JST

* Mon 12 Jan 2015 02:33:30 AM JST
from xcb5.xproto import NamedButtonIndex

* Mon 12 Jan 2015 02:33:34 AM JST
_xproto
* Mon 12 Jan 2015 02:34:26 AM JST
BitConfigWindow
* Mon 12 Jan 2015 02:34:28 AM JST
import BitConfigWindow
* Mon 12 Jan 2015 02:34:32 AM JST
_bitmask
* Mon 12 Jan 2015 02:36:31 AM JST
key/
* Mon 12 Jan 2015 02:37:22 AM JST
sendkeys2/
* Mon 12 Jan 2015 02:39:41 AM JST
import
* Mon 12 Jan 2015 02:39:55 AM JST
_atomidentify
* Mon 12 Jan 2015 02:41:55 AM JST
atomidentify
* Mon 12 Jan 2015 02:43:29 AM JST
# AtomIdentifier
* Mon 12 Jan 2015 02:43:32 AM JST

* Mon 12 Jan 2015 02:43:32 AM JST

* Mon 12 Jan 2015 02:43:32 AM JST
# import xcb5.xobj.atomidentify as _atomidentify # AtomIdentifier

* Mon 12 Jan 2015 02:43:51 AM JST

* Mon 12 Jan 2015 02:43:51 AM JST

* Mon 12 Jan 2015 02:43:51 AM JST
from xcb5.xproto import ext

* Mon 12 Jan 2015 02:46:45 AM JST
base
* Mon 12 Jan 2015 02:47:18 AM JST
WrapCore
* Mon 12 Jan 2015 02:47:19 AM JST
import WrapCore
* Mon 12 Jan 2015 02:47:51 AM JST
import
* Mon 12 Jan 2015 02:47:55 AM JST
 WrapSetup
* Mon 12 Jan 2015 02:48:30 AM JST
get_net_wm_window_type()
* Mon 12 Jan 2015 02:49:22 AM JST
Window
* Mon 12 Jan 2015 02:49:23 AM JST
import Window
* Mon 12 Jan 2015 02:50:26 AM JST

* Mon 12 Jan 2015 02:50:27 AM JST

* Mon 12 Jan 2015 02:50:27 AM JST
# from xcb.xcb import connect as baseconnect

* Mon 12 Jan 2015 02:50:58 AM JST
rawxcb.
* Mon 12 Jan 2015 02:51:07 AM JST

* Mon 12 Jan 2015 02:51:07 AM JST

* Mon 12 Jan 2015 02:51:07 AM JST
import xcb.xcb as rawxcb

* Mon 12 Jan 2015 02:51:41 AM JST
import ConnectionAbstract
* Mon 12 Jan 2015 02:51:56 AM JST
_abstract.
* Mon 12 Jan 2015 02:52:31 AM JST

* Mon 12 Jan 2015 02:52:46 AM JST

* Mon 12 Jan 2015 02:53:27 AM JST
key
* Mon 12 Jan 2015 02:53:42 AM JST
key.
* Mon 12 Jan 2015 02:53:43 AM JST
xobj.key.
* Mon 12 Jan 2015 02:53:44 AM JST
xcb5.xobj.key.
* Mon 12 Jan 2015 02:54:32 AM JST
wreply
* Mon 12 Jan 2015 02:54:32 AM JST
import wreply
* Mon 12 Jan 2015 02:57:47 AM JST

* Mon 12 Jan 2015 02:57:48 AM JST
wcookie
* Mon 12 Jan 2015 02:57:51 AM JST
_wcookie
* Mon 12 Jan 2015 02:57:57 AM JST
_wcookie
* Mon 12 Jan 2015 03:00:32 AM JST
import
* Mon 12 Jan 2015 03:01:38 AM JST
_atom
* Mon 12 Jan 2015 03:01:45 AM JST
_cacheatom
* Mon 12 Jan 2015 03:02:42 AM JST
atom.
* Mon 12 Jan 2015 03:09:17 AM JST

* Mon 12 Jan 2015 03:09:17 AM JST

* Mon 12 Jan 2015 03:09:17 AM JST
import xcb5.xproto.ext as ext

* Mon 12 Jan 2015 03:09:51 AM JST
atom.
* Mon 12 Jan 2015 03:10:33 AM JST
atom.
* Mon 12 Jan 2015 03:22:23 AM JST
import
* Mon 12 Jan 2015 03:32:28 AM JST

* Mon 12 Jan 2015 03:32:28 AM JST

* Mon 12 Jan 2015 03:32:28 AM JST
from xcb5.xproto.xconnection import connect, Connection

* Mon 12 Jan 2015 03:32:36 AM JST
from xcb5.xproto.xconnection import connect, Connection
* Mon 12 Jan 2015 03:47:16 AM JST
from xcb5.xobj.window import Window
* Mon 12 Jan 2015 03:47:32 AM JST
import
* Mon 12 Jan 2015 03:47:34 AM JST
import
* Mon 12 Jan 2015 03:47:37 AM JST
import
* Mon 12 Jan 2015 03:47:39 AM JST
import
* Mon 12 Jan 2015 03:47:41 AM JST
import
* Mon 12 Jan 2015 03:47:50 AM JST
from xcb5.xobj.window import Window
* Mon 12 Jan 2015 04:07:24 AM JST
xcb5/
* Mon 12 Jan 2015 04:15:01 AM JST
from cStringIO import StringIO as _StringIO
from array import array as _array
from struct import pack as _pack
from xcb import xcb

import xcb5.xproto.event as event
import xcb5.xproto.error as error
import xcb5.xproto.define as define
import xcb5.xproto.cookie as cookie
import xcb5.xproto.reply as reply

# and import at end


class xprotoExtension(xcb.Extension):

    def CreateWindowChecked(self, depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, True),
                                 xcb.VoidCookie())

    def CreateWindow(self, depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, False),
                                 xcb.VoidCookie())

    def ChangeWindowAttributesChecked(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, True),
                                 xcb.VoidCookie())

    def ChangeWindowAttributes(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, False),
                                 xcb.VoidCookie())

    def GetWindowAttributes(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, True),
                                 cookie.GetWindowAttributesCookie(),
                                 reply.GetWindowAttributesReply)

    def GetWindowAttributesUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, False),
                                 cookie.GetWindowAttributesCookie(),
                                 reply.GetWindowAttributesReply)

    def DestroyWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, True),
                                 xcb.VoidCookie())

    def DestroyWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, False),
                                 xcb.VoidCookie())

    def DestroySubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, True),
                                 xcb.VoidCookie())

    def DestroySubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, False),
                                 xcb.VoidCookie())

    def ChangeSaveSetChecked(self, mode, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, True),
                                 xcb.VoidCookie())

    def ChangeSaveSet(self, mode, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, False),
                                 xcb.VoidCookie())

    def ReparentWindowChecked(self, window, parent, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, True),
                                 xcb.VoidCookie())

    def ReparentWindow(self, window, parent, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, False),
                                 xcb.VoidCookie())

    def MapWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, True),
                                 xcb.VoidCookie())

    def MapWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, False),
                                 xcb.VoidCookie())

    def MapSubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, True),
                                 xcb.VoidCookie())

    def MapSubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, False),
                                 xcb.VoidCookie())

    def UnmapWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, True),
                                 xcb.VoidCookie())

    def UnmapWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, False),
                                 xcb.VoidCookie())

    def UnmapSubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, True),
                                 xcb.VoidCookie())

    def UnmapSubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, False),
                                 xcb.VoidCookie())

    def ConfigureWindowChecked(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, True),
                                 xcb.VoidCookie())

    def ConfigureWindow(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, False),
                                 xcb.VoidCookie())

    def CirculateWindowChecked(self, direction, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, True),
                                 xcb.VoidCookie())

    def CirculateWindow(self, direction, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, False),
                                 xcb.VoidCookie())

    def GetGeometry(self, drawable):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, True),
                                 cookie.GetGeometryCookie(),
                                 reply.GetGeometryReply)

    def GetGeometryUnchecked(self, drawable):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, False),
                                 cookie.GetGeometryCookie(),
                                 reply.GetGeometryReply)

    def QueryTree(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, True),
                                 cookie.QueryTreeCookie(),
                                 reply.QueryTreeReply)

    def QueryTreeUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, False),
                                 cookie.QueryTreeCookie(),
                                 reply.QueryTreeReply)

    def InternAtom(self, only_if_exists, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, True),
                                 cookie.InternAtomCookie(),
                                 reply.InternAtomReply)

    def InternAtomUnchecked(self, only_if_exists, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, False),
                                 cookie.InternAtomCookie(),
                                 reply.InternAtomReply)

    def GetAtomName(self, atom):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, True),
                                 cookie.GetAtomNameCookie(),
                                 reply.GetAtomNameReply)

    def GetAtomNameUnchecked(self, atom):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, False),
                                 cookie.GetAtomNameCookie(),
                                 reply.GetAtomNameReply)

    def ChangePropertyChecked(self, mode, window, property, type, format, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, True),
                                 xcb.VoidCookie())

    def ChangeProperty(self, mode, window, property, type, format, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, False),
                                 xcb.VoidCookie())

    def DeletePropertyChecked(self, window, property):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, True),
                                 xcb.VoidCookie())

    def DeleteProperty(self, window, property):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, False),
                                 xcb.VoidCookie())

    def GetProperty(self, delete, window, property, type, long_offset, long_length):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, True),
                                 cookie.GetPropertyCookie(),
                                 reply.GetPropertyReply)

    def GetPropertyUnchecked(self, delete, window, property, type, long_offset, long_length):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, False),
                                 cookie.GetPropertyCookie(),
                                 reply.GetPropertyReply)

    def ListProperties(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, True),
                                 cookie.ListPropertiesCookie(),
                                 reply.ListPropertiesReply)

    def ListPropertiesUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, False),
                                 cookie.ListPropertiesCookie(),
                                 reply.ListPropertiesReply)

    def SetSelectionOwnerChecked(self, owner, selection, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, True),
                                 xcb.VoidCookie())

    def SetSelectionOwner(self, owner, selection, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, False),
                                 xcb.VoidCookie())

    def GetSelectionOwner(self, selection):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, True),
                                 cookie.GetSelectionOwnerCookie(),
                                 reply.GetSelectionOwnerReply)

    def GetSelectionOwnerUnchecked(self, selection):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, False),
                                 cookie.GetSelectionOwnerCookie(),
                                 reply.GetSelectionOwnerReply)

    def ConvertSelectionChecked(self, requestor, selection, target, property, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, True),
                                 xcb.VoidCookie())

    def ConvertSelection(self, requestor, selection, target, property, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, False),
                                 xcb.VoidCookie())

    def SendEventChecked(self, propagate, destination, event_mask, event):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(_array('b', event))))
        print(repr(buf.getvalue()))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, True),
                                 xcb.VoidCookie())

    def SendEvent(self, propagate, destination, event_mask, event):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(_array('b', event))))
        print(repr(buf.getvalue()))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, False),
                                 xcb.VoidCookie())

    def GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, True),
                                 cookie.GrabPointerCookie(),
                                 reply.GrabPointerReply)

    def GrabPointerUnchecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, False),
                                 cookie.GrabPointerCookie(),
                                 reply.GrabPointerReply)

    def UngrabPointerChecked(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, True),
                                 xcb.VoidCookie())

    def UngrabPointer(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, False),
                                 xcb.VoidCookie())

    def GrabButtonChecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, True),
                                 xcb.VoidCookie())

    def GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, False),
                                 xcb.VoidCookie())

    def UngrabButtonChecked(self, button, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, True),
                                 xcb.VoidCookie())

    def UngrabButton(self, button, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, False),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrabChecked(self, cursor, time, event_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, True),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrab(self, cursor, time, event_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, False),
                                 xcb.VoidCookie())

    def GrabKeyboard(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, True),
                                 cookie.GrabKeyboardCookie(),
                                 reply.GrabKeyboardReply)

    def GrabKeyboardUnchecked(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, False),
                                 cookie.GrabKeyboardCookie(),
                                 reply.GrabKeyboardReply)

    def UngrabKeyboardChecked(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, True),
                                 xcb.VoidCookie())

    def UngrabKeyboard(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, False),
                                 xcb.VoidCookie())

    def GrabKeyChecked(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, True),
                                 xcb.VoidCookie())

    def GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, False),
                                 xcb.VoidCookie())

    def UngrabKeyChecked(self, key, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, True),
                                 xcb.VoidCookie())

    def UngrabKey(self, key, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, False),
                                 xcb.VoidCookie())

    def AllowEventsChecked(self, mode, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, True),
                                 xcb.VoidCookie())

    def AllowEvents(self, mode, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, False),
                                 xcb.VoidCookie())

    def GrabServerChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, True),
                                 xcb.VoidCookie())

    def GrabServer(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, False),
                                 xcb.VoidCookie())

    def UngrabServerChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, True),
                                 xcb.VoidCookie())

    def UngrabServer(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, False),
                                 xcb.VoidCookie())

    def QueryPointer(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, True),
                                 cookie.QueryPointerCookie(),
                                 reply.QueryPointerReply)

    def QueryPointerUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, False),
                                 cookie.QueryPointerCookie(),
                                 reply.QueryPointerReply)

    def GetMotionEvents(self, window, start, stop):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, True),
                                 cookie.GetMotionEventsCookie(),
                                 reply.GetMotionEventsReply)

    def GetMotionEventsUnchecked(self, window, start, stop):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, False),
                                 cookie.GetMotionEventsCookie(),
                                 reply.GetMotionEventsReply)

    def TranslateCoordinates(self, src_window, dst_window, src_x, src_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, True),
                                 cookie.TranslateCoordinatesCookie(),
                                 reply.TranslateCoordinatesReply)

    def TranslateCoordinatesUnchecked(self, src_window, dst_window, src_x, src_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, False),
                                 cookie.TranslateCoordinatesCookie(),
                                 reply.TranslateCoordinatesReply)

    def WarpPointerChecked(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, True),
                                 xcb.VoidCookie())

    def WarpPointer(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, False),
                                 xcb.VoidCookie())

    def SetInputFocusChecked(self, revert_to, focus, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, True),
                                 xcb.VoidCookie())

    def SetInputFocus(self, revert_to, focus, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, False),
                                 xcb.VoidCookie())

    def GetInputFocus(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, True),
                                 cookie.GetInputFocusCookie(),
                                 reply.GetInputFocusReply)

    def GetInputFocusUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, False),
                                 cookie.GetInputFocusCookie(),
                                 reply.GetInputFocusReply)

    def QueryKeymap(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, True),
                                 cookie.QueryKeymapCookie(),
                                 reply.QueryKeymapReply)

    def QueryKeymapUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, False),
                                 cookie.QueryKeymapCookie(),
                                 reply.QueryKeymapReply)

    def OpenFontChecked(self, fid, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, True),
                                 xcb.VoidCookie())

    def OpenFont(self, fid, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, False),
                                 xcb.VoidCookie())

    def CloseFontChecked(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, True),
                                 xcb.VoidCookie())

    def CloseFont(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, False),
                                 xcb.VoidCookie())

    def QueryFont(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, True),
                                 cookie.QueryFontCookie(),
                                 reply.QueryFontReply)

    def QueryFontUnchecked(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, False),
                                 cookie.QueryFontCookie(),
                                 reply.QueryFontReply)

    def QueryTextExtents(self, font, string_len, string):
        buf = _StringIO()
        buf.write(_pack('=x', ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, True),
                                 cookie.QueryTextExtentsCookie(),
                                 reply.QueryTextExtentsReply)

    def QueryTextExtentsUnchecked(self, font, string_len, string):
        buf = _StringIO()
        buf.write(_pack('=x', ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, False),
                                 cookie.QueryTextExtentsCookie(),
                                 reply.QueryTextExtentsReply)

    def ListFonts(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, True),
                                 cookie.ListFontsCookie(),
                                 reply.ListFontsReply)

    def ListFontsUnchecked(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, False),
                                 cookie.ListFontsCookie(),
                                 reply.ListFontsReply)

    def ListFontsWithInfo(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, True),
                                 cookie.ListFontsWithInfoCookie(),
                                 reply.ListFontsWithInfoReply)

    def ListFontsWithInfoUnchecked(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, False),
                                 cookie.ListFontsWithInfoCookie(),
                                 reply.ListFontsWithInfoReply)

    def SetFontPathChecked(self, font_qty, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, True),
                                 xcb.VoidCookie())

    def SetFontPath(self, font_qty, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, False),
                                 xcb.VoidCookie())

    def GetFontPath(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, True),
                                 cookie.GetFontPathCookie(),
                                 reply.GetFontPathReply)

    def GetFontPathUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, False),
                                 cookie.GetFontPathCookie(),
                                 reply.GetFontPathReply)

    def CreatePixmapChecked(self, depth, pid, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, True),
                                 xcb.VoidCookie())

    def CreatePixmap(self, depth, pid, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, False),
                                 xcb.VoidCookie())

    def FreePixmapChecked(self, pixmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, True),
                                 xcb.VoidCookie())

    def FreePixmap(self, pixmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, False),
                                 xcb.VoidCookie())

    def CreateGCChecked(self, cid, drawable, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, True),
                                 xcb.VoidCookie())

    def CreateGC(self, cid, drawable, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, False),
                                 xcb.VoidCookie())

    def ChangeGCChecked(self, gc, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, True),
                                 xcb.VoidCookie())

    def ChangeGC(self, gc, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, False),
                                 xcb.VoidCookie())

    def CopyGCChecked(self, src_gc, dst_gc, value_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, True),
                                 xcb.VoidCookie())

    def CopyGC(self, src_gc, dst_gc, value_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, False),
                                 xcb.VoidCookie())

    def SetDashesChecked(self, gc, dash_offset, dashes_len, dashes):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(_array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, True),
                                 xcb.VoidCookie())

    def SetDashes(self, gc, dash_offset, dashes_len, dashes):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(_array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, False),
                                 xcb.VoidCookie())

    def SetClipRectanglesChecked(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, True),
                                 xcb.VoidCookie())

    def SetClipRectangles(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, False),
                                 xcb.VoidCookie())

    def FreeGCChecked(self, gc):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, True),
                                 xcb.VoidCookie())

    def FreeGC(self, gc):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, False),
                                 xcb.VoidCookie())

    def ClearAreaChecked(self, exposures, window, x, y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, True),
                                 xcb.VoidCookie())

    def ClearArea(self, exposures, window, x, y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, False),
                                 xcb.VoidCookie())

    def CopyAreaChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, True),
                                 xcb.VoidCookie())

    def CopyArea(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, False),
                                 xcb.VoidCookie())

    def CopyPlaneChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, True),
                                 xcb.VoidCookie())

    def CopyPlane(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, False),
                                 xcb.VoidCookie())

    def PolyPointChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, True),
                                 xcb.VoidCookie())

    def PolyPoint(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, False),
                                 xcb.VoidCookie())

    def PolyLineChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, True),
                                 xcb.VoidCookie())

    def PolyLine(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, False),
                                 xcb.VoidCookie())

    def PolySegmentChecked(self, drawable, gc, segments_len, segments):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, True),
                                 xcb.VoidCookie())

    def PolySegment(self, drawable, gc, segments_len, segments):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, False),
                                 xcb.VoidCookie())

    def PolyRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, True),
                                 xcb.VoidCookie())

    def PolyRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, False),
                                 xcb.VoidCookie())

    def PolyArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, True),
                                 xcb.VoidCookie())

    def PolyArc(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, False),
                                 xcb.VoidCookie())

    def FillPolyChecked(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, True),
                                 xcb.VoidCookie())

    def FillPoly(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, False),
                                 xcb.VoidCookie())

    def PolyFillRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, True),
                                 xcb.VoidCookie())

    def PolyFillRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, False),
                                 xcb.VoidCookie())

    def PolyFillArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, True),
                                 xcb.VoidCookie())

    def PolyFillArc(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, False),
                                 xcb.VoidCookie())

    def PutImageChecked(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, True),
                                 xcb.VoidCookie())

    def PutImage(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, False),
                                 xcb.VoidCookie())

    def GetImage(self, format, drawable, x, y, width, height, plane_mask):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, True),
                                 cookie.GetImageCookie(),
                                 reply.GetImageReply)

    def GetImageUnchecked(self, format, drawable, x, y, width, height, plane_mask):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, False),
                                 cookie.GetImageCookie(),
                                 reply.GetImageReply)

    def PolyText8Checked(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, True),
                                 xcb.VoidCookie())

    def PolyText8(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, False),
                                 xcb.VoidCookie())

    def PolyText16Checked(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, True),
                                 xcb.VoidCookie())

    def PolyText16(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, False),
                                 xcb.VoidCookie())

    def ImageText8Checked(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(_array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, True),
                                 xcb.VoidCookie())

    def ImageText8(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(_array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, False),
                                 xcb.VoidCookie())

    def ImageText16Checked(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, True),
                                 xcb.VoidCookie())

    def ImageText16(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, False),
                                 xcb.VoidCookie())

    def CreateColormapChecked(self, alloc, mid, window, visual):
        buf = _StringIO()
        buf.write(_pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, True),
                                 xcb.VoidCookie())

    def CreateColormap(self, alloc, mid, window, visual):
        buf = _StringIO()
        buf.write(_pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, False),
                                 xcb.VoidCookie())

    def FreeColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, True),
                                 xcb.VoidCookie())

    def FreeColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, False),
                                 xcb.VoidCookie())

    def CopyColormapAndFreeChecked(self, mid, src_cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, True),
                                 xcb.VoidCookie())

    def CopyColormapAndFree(self, mid, src_cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, False),
                                 xcb.VoidCookie())

    def InstallColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, True),
                                 xcb.VoidCookie())

    def InstallColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, False),
                                 xcb.VoidCookie())

    def UninstallColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, True),
                                 xcb.VoidCookie())

    def UninstallColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, False),
                                 xcb.VoidCookie())

    def ListInstalledColormaps(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, True),
                                 cookie.ListInstalledColormapsCookie(),
                                 reply.ListInstalledColormapsReply)

    def ListInstalledColormapsUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, False),
                                 cookie.ListInstalledColormapsCookie(),
                                 reply.ListInstalledColormapsReply)

    def AllocColor(self, cmap, red, green, blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, True),
                                 cookie.AllocColorCookie(),
                                 reply.AllocColorReply)

    def AllocColorUnchecked(self, cmap, red, green, blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, False),
                                 cookie.AllocColorCookie(),
                                 reply.AllocColorReply)

    def AllocNamedColor(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, True),
                                 cookie.AllocNamedColorCookie(),
                                 reply.AllocNamedColorReply)

    def AllocNamedColorUnchecked(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, False),
                                 cookie.AllocNamedColorCookie(),
                                 reply.AllocNamedColorReply)

    def AllocColorCells(self, contiguous, cmap, colors, planes):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, True),
                                 cookie.AllocColorCellsCookie(),
                                 reply.AllocColorCellsReply)

    def AllocColorCellsUnchecked(self, contiguous, cmap, colors, planes):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, False),
                                 cookie.AllocColorCellsCookie(),
                                 reply.AllocColorCellsReply)

    def AllocColorPlanes(self, contiguous, cmap, colors, reds, greens, blues):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, True),
                                 cookie.AllocColorPlanesCookie(),
                                 reply.AllocColorPlanesReply)

    def AllocColorPlanesUnchecked(self, contiguous, cmap, colors, reds, greens, blues):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, False),
                                 cookie.AllocColorPlanesCookie(),
                                 reply.AllocColorPlanesReply)

    def FreeColorsChecked(self, cmap, plane_mask, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, True),
                                 xcb.VoidCookie())

    def FreeColors(self, cmap, plane_mask, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, False),
                                 xcb.VoidCookie())

    def StoreColorsChecked(self, cmap, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, True),
                                 xcb.VoidCookie())

    def StoreColors(self, cmap, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, False),
                                 xcb.VoidCookie())

    def StoreNamedColorChecked(self, flags, cmap, pixel, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, True),
                                 xcb.VoidCookie())

    def StoreNamedColor(self, flags, cmap, pixel, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, False),
                                 xcb.VoidCookie())

    def QueryColors(self, cmap, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, True),
                                 cookie.QueryColorsCookie(),
                                 reply.QueryColorsReply)

    def QueryColorsUnchecked(self, cmap, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, False),
                                 cookie.QueryColorsCookie(),
                                 reply.QueryColorsReply)

    def LookupColor(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, True),
                                 cookie.LookupColorCookie(),
                                 reply.LookupColorReply)

    def LookupColorUnchecked(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, False),
                                 cookie.LookupColorCookie(),
                                 reply.LookupColorReply)

    def CreateCursorChecked(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, True),
                                 xcb.VoidCookie())

    def CreateCursor(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, False),
                                 xcb.VoidCookie())

    def CreateGlyphCursorChecked(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, True),
                                 xcb.VoidCookie())

    def CreateGlyphCursor(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, False),
                                 xcb.VoidCookie())

    def FreeCursorChecked(self, cursor):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, True),
                                 xcb.VoidCookie())

    def FreeCursor(self, cursor):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, False),
                                 xcb.VoidCookie())

    def RecolorCursorChecked(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, True),
                                 xcb.VoidCookie())

    def RecolorCursor(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, False),
                                 xcb.VoidCookie())

    def QueryBestSize(self, _class, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, True),
                                 cookie.QueryBestSizeCookie(),
                                 reply.QueryBestSizeReply)

    def QueryBestSizeUnchecked(self, _class, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, False),
                                 cookie.QueryBestSizeCookie(),
                                 reply.QueryBestSizeReply)

    def QueryExtension(self, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, True),
                                 cookie.QueryExtensionCookie(),
                                 reply.QueryExtensionReply)

    def QueryExtensionUnchecked(self, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, False),
                                 cookie.QueryExtensionCookie(),
                                 reply.QueryExtensionReply)

    def ListExtensions(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, True),
                                 cookie.ListExtensionsCookie(),
                                 reply.ListExtensionsReply)

    def ListExtensionsUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, False),
                                 cookie.ListExtensionsCookie(),
                                 reply.ListExtensionsReply)

    def ChangeKeyboardMappingChecked(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = _StringIO()
        buf.write(_pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(_array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardMapping(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = _StringIO()
        buf.write(_pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(_array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardMapping(self, first_keycode, count):
        buf = _StringIO()
        buf.write(_pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, True),
                                 cookie.GetKeyboardMappingCookie(),
                                 reply.GetKeyboardMappingReply)

    def GetKeyboardMappingUnchecked(self, first_keycode, count):
        buf = _StringIO()
        buf.write(_pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, False),
                                 cookie.GetKeyboardMappingCookie(),
                                 reply.GetKeyboardMappingReply)

    def ChangeKeyboardControlChecked(self, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardControl(self, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardControl(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, True),
                                 cookie.GetKeyboardControlCookie(),
                                 reply.GetKeyboardControlReply)

    def GetKeyboardControlUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, False),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def BellChecked(self, percent):
        buf = _StringIO()
        buf.write(_pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, True),
                                 xcb.VoidCookie())

    def Bell(self, percent):
        buf = _StringIO()
        buf.write(_pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, False),
                                 xcb.VoidCookie())

    def ChangePointerControlChecked(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, True),
                                 xcb.VoidCookie())

    def ChangePointerControl(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, False),
                                 xcb.VoidCookie())

    def GetPointerControl(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, True),
                                 cookie.GetPointerControlCookie(),
                                 reply.GetPointerControlReply)

    def GetPointerControlUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, False),
                                 cookie.GetPointerControlCookie(),
                                 reply.GetPointerControlReply)

    def SetScreenSaverChecked(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, True),
                                 xcb.VoidCookie())

    def SetScreenSaver(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, False),
                                 xcb.VoidCookie())

    def GetScreenSaver(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, True),
                                 cookie.GetScreenSaverCookie(),
                                 reply.GetScreenSaverReply)

    def GetScreenSaverUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, False),
                                 cookie.GetScreenSaverCookie(),
                                 reply.GetScreenSaverReply)

    def ChangeHostsChecked(self, mode, family, address_len, address):
        buf = _StringIO()
        buf.write(_pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(_array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, True),
                                 xcb.VoidCookie())

    def ChangeHosts(self, mode, family, address_len, address):
        buf = _StringIO()
        buf.write(_pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(_array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, False),
                                 xcb.VoidCookie())

    def ListHosts(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, True),
                                 cookie.ListHostsCookie(),
                                 reply.ListHostsReply)

    def ListHostsUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, False),
                                 cookie.ListHostsCookie(),
                                 reply.ListHostsReply)

    def SetAccessControlChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, True),
                                 xcb.VoidCookie())

    def SetAccessControl(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, False),
                                 xcb.VoidCookie())

    def SetCloseDownModeChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, True),
                                 xcb.VoidCookie())

    def SetCloseDownMode(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, False),
                                 xcb.VoidCookie())

    def KillClientChecked(self, resource):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, True),
                                 xcb.VoidCookie())

    def KillClient(self, resource):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, False),
                                 xcb.VoidCookie())

    def RotatePropertiesChecked(self, window, atoms_len, delta, atoms):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(_array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, True),
                                 xcb.VoidCookie())

    def RotateProperties(self, window, atoms_len, delta, atoms):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(_array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, False),
                                 xcb.VoidCookie())

    def ForceScreenSaverChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, True),
                                 xcb.VoidCookie())

    def ForceScreenSaver(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, False),
                                 xcb.VoidCookie())

    def SetPointerMapping(self, map_len, map):
        buf = _StringIO()
        buf.write(_pack('=xB2x', map_len))
        buf.write(str(buffer(_array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, True),
                                 cookie.SetPointerMappingCookie(),
                                 reply.SetPointerMappingReply)

    def SetPointerMappingUnchecked(self, map_len, map):
        buf = _StringIO()
        buf.write(_pack('=xB2x', map_len))
        buf.write(str(buffer(_array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, False),
                                 cookie.SetPointerMappingCookie(),
                                 reply.SetPointerMappingReply)

    def GetPointerMapping(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, True),
                                 cookie.GetPointerMappingCookie(),
                                 reply.GetPointerMappingReply)

    def GetPointerMappingUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, False),
                                 cookie.GetPointerMappingCookie(),
                                 reply.GetPointerMappingReply)

    def SetModifierMapping(self, keycodes_per_modifier, keycodes):
        buf = _StringIO()
        buf.write(_pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(_array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, True),
                                 cookie.SetModifierMappingCookie(),
                                 reply.SetModifierMappingReply)

    def SetModifierMappingUnchecked(self, keycodes_per_modifier, keycodes):
        buf = _StringIO()
        buf.write(_pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(_array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, False),
                                 cookie.SetModifierMappingCookie(),
                                 reply.SetModifierMappingReply)

    def GetModifierMapping(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, True),
                                 cookie.GetModifierMappingCookie(),
                                 reply.GetModifierMappingReply)

    def GetModifierMappingUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, False),
                                 cookie.GetModifierMappingCookie(),
                                 reply.GetModifierMappingReply)

    def NoOperationChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, True),
                                 xcb.VoidCookie())

    def NoOperation(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, False),
                                 xcb.VoidCookie())


xcb._add_core(xprotoExtension, Setup, _EVENTS, _ERRORS)

* Mon 12 Jan 2015 04:16:12 AM JST
impor
* Mon 12 Jan 2015 04:21:16 AM JST
_ext
* Mon 12 Jan 2015 04:27:37 AM JST
as
* Mon 12 Jan 2015 04:27:37 AM JST
wreply as
* Mon 12 Jan 2015 04:27:38 AM JST
xproto.wreply as
* Mon 12 Jan 2015 04:27:38 AM JST
xcb5.xproto.wreply as
* Mon 12 Jan 2015 04:28:26 AM JST

* Mon 12 Jan 2015 04:28:26 AM JST

* Mon 12 Jan 2015 04:28:26 AM JST
import xcb5

* Mon 12 Jan 2015 04:28:58 AM JST
as
* Mon 12 Jan 2015 04:28:58 AM JST
wrapcore as
* Mon 12 Jan 2015 04:28:59 AM JST
xproto.wrapcore as
* Mon 12 Jan 2015 04:28:59 AM JST
xcb5.xproto.wrapcore as
* Mon 12 Jan 2015 04:29:03 AM JST
as 
* Mon 12 Jan 2015 04:29:04 AM JST
wreply as 
* Mon 12 Jan 2015 04:29:04 AM JST
xproto.wreply as 
* Mon 12 Jan 2015 04:29:05 AM JST
xcb5.xproto.wreply as 
* Mon 12 Jan 2015 04:29:08 AM JST
as 
* Mon 12 Jan 2015 04:29:08 AM JST
window as 
* Mon 12 Jan 2015 04:29:47 AM JST
reply
* Mon 12 Jan 2015 04:29:47 AM JST
cookie
* Mon 12 Jan 2015 04:29:47 AM JST
define
* Mon 12 Jan 2015 04:29:47 AM JST
error
* Mon 12 Jan 2015 04:29:48 AM JST
event
* Mon 12 Jan 2015 04:29:49 AM JST
xproto.reply
* Mon 12 Jan 2015 04:29:49 AM JST
xproto.cookie
* Mon 12 Jan 2015 04:29:49 AM JST
xproto.define
* Mon 12 Jan 2015 04:29:49 AM JST
xproto.error
* Mon 12 Jan 2015 04:29:50 AM JST
xproto.event
* Mon 12 Jan 2015 04:29:50 AM JST
xcb5.xproto.reply
* Mon 12 Jan 2015 04:29:51 AM JST
xcb5.xproto.cookie
* Mon 12 Jan 2015 04:29:51 AM JST
xcb5.xproto.define
* Mon 12 Jan 2015 04:29:51 AM JST
xcb5.xproto.error
* Mon 12 Jan 2015 04:29:51 AM JST
xcb5.xproto.event
* Mon 12 Jan 2015 04:31:25 AM JST
Setup
* Mon 12 Jan 2015 04:32:02 AM JST
_EVENTS
* Mon 12 Jan 2015 04:32:57 AM JST

* Mon 12 Jan 2015 04:32:57 AM JST

* Mon 12 Jan 2015 04:32:57 AM JST
import xcb5.xproto.xconnection as _xconnection

* Mon 12 Jan 2015 04:32:57 AM JST
import xcb5.xproto.xconnection as _xconnection

* Mon 12 Jan 2015 04:32:57 AM JST
import xcb5.xproto.xconnection as _xconnection
connect = _xconnection.connect

* Mon 12 Jan 2015 04:33:57 AM JST
atom.
* Mon 12 Jan 2015 05:09:43 AM JST
    @property
    def rawconnection(self, ):
        r"""SUMMARY

        base_connection()

        @Return:
        """
        return self.connection.rawconnection

* Mon 12 Jan 2015 05:09:49 AM JST

* Mon 12 Jan 2015 05:09:49 AM JST

* Mon 12 Jan 2015 05:09:50 AM JST
        _abstract.ConnectionAbstract.__init__(self, connection)

* Mon 12 Jan 2015 05:09:52 AM JST
ConnectionAbstract
* Mon 12 Jan 2015 05:09:53 AM JST
_abstract.ConnectionAbstract
* Mon 12 Jan 2015 05:10:00 AM JST

* Mon 12 Jan 2015 05:10:00 AM JST

* Mon 12 Jan 2015 05:10:00 AM JST
import xcb5.abstract as _abstract

* Mon 12 Jan 2015 05:13:05 AM JST
from xcb5.xobj.window import Window
* Mon 12 Jan 2015 05:13:56 AM JST
xproto.
* Mon 12 Jan 2015 05:13:57 AM JST
xcb5.xproto.
* Mon 12 Jan 2015 05:15:22 AM JST
as event
* Mon 12 Jan 2015 05:15:33 AM JST
as event
* Mon 12 Jan 2015 05:15:39 AM JST
as error
* Mon 12 Jan 2015 05:15:43 AM JST
as define
* Mon 12 Jan 2015 05:15:46 AM JST
as cookie
* Mon 12 Jan 2015 05:15:50 AM JST
as reply
* Mon 12 Jan 2015 05:17:03 AM JST
error.
* Mon 12 Jan 2015 05:17:15 AM JST
event.
* Mon 12 Jan 2015 05:39:14 AM JST
re.compile(r'^([-a-zA-Z0-9._]*):([0-9]+)(\.([0-9]+))?$'
* Mon 12 Jan 2015 05:39:44 AM JST
r.match(':0.0')
* Mon 12 Jan 2015 05:47:09 AM JST
0
* Mon 12 Jan 2015 05:47:10 AM JST
0.0
* Mon 12 Jan 2015 05:47:11 AM JST
1)
* Mon 12 Jan 2015 03:22:41 PM JST
python-xlib
* Mon 12 Jan 2015 03:24:32 PM JST
python-xlib
* Mon 12 Jan 2015 03:26:53 PM JST
Xlib
* Mon 12 Jan 2015 03:27:26 PM JST
xobject.
* Mon 12 Jan 2015 03:27:46 PM JST
display
* Mon 12 Jan 2015 03:29:15 PM JST
get_display_name()
* Mon 12 Jan 2015 03:30:59 PM JST
display
* Mon 12 Jan 2015 03:31:00 PM JST
d.display
* Mon 12 Jan 2015 03:31:01 PM JST
D d.display
* Mon 12 Jan 2015 03:31:05 PM JST
Display()
* Mon 12 Jan 2015 03:31:06 PM JST
display.Display()
* Mon 12 Jan 2015 06:09:08 PM JST
1)
* Mon 12 Jan 2015 06:09:09 PM JST
grou
* Mon 12 Jan 2015 06:10:53 PM JST
^([-a-zA-Z0-9._]*)
* Mon 12 Jan 2015 06:11:16 PM JST
compile
* Mon 12 Jan 2015 06:12:27 PM JST
'hello
* Mon 12 Jan 2015 06:12:56 PM JST
:([0-9]+)
* Mon 12 Jan 2015 06:19:16 PM JST
'^([-a-zA-Z0-9._]*):([0-9]+)(\\.([0-9]+))?$'
* Mon 12 Jan 2015 06:24:06 PM JST

* Mon 12 Jan 2015 06:24:18 PM JST

* Mon 12 Jan 2015 06:24:26 PM JST

* Mon 12 Jan 2015 06:24:43 PM JST

* Mon 12 Jan 2015 06:24:49 PM JST

* Mon 12 Jan 2015 06:24:50 PM JST
atomidentify
* Mon 12 Jan 2015 06:24:54 PM JST

* Mon 12 Jan 2015 06:25:10 PM JST

* Mon 12 Jan 2015 06:25:34 PM JST
re.sub('^([-a-zA-Z0-9._]*):([0-9]+)(\\.([0-9]+))?$', r'\g<1>1', ':0.0')
* Mon 12 Jan 2015 06:26:25 PM JST
atom
* Mon 12 Jan 2015 06:26:27 PM JST


* Mon 12 Jan 2015 06:26:27 PM JST

import xcb5.xobj.atompair as _atompair
* Mon 12 Jan 2015 06:26:29 PM JST
_atom
* Mon 12 Jan 2015 06:26:29 PM JST
as _atom
* Mon 12 Jan 2015 06:26:43 PM JST
.atompair as _atompair
* Mon 12 Jan 2015 06:26:55 PM JST
.atomname as _atomname
* Mon 12 Jan 2015 06:27:05 PM JST
.window as _window
* Mon 12 Jan 2015 06:27:12 PM JST
.windowtypes as _windowtypes
* Mon 12 Jan 2015 06:27:29 PM JST
.windowlist as _windowlist
* Mon 12 Jan 2015 06:27:32 PM JST
WIndow
* Mon 12 Jan 2015 06:27:50 PM JST
_atomname.
* Mon 12 Jan 2015 06:27:52 PM JST
_atom.
* Mon 12 Jan 2015 06:27:53 PM JST
_atompair.
* Mon 12 Jan 2015 06:28:01 PM JST
_atomname.
* Mon 12 Jan 2015 06:28:03 PM JST
_atom.
* Mon 12 Jan 2015 06:28:04 PM JST
_atompair.
* Mon 12 Jan 2015 06:28:09 PM JST
_windowlist.
* Mon 12 Jan 2015 06:28:10 PM JST
_window.
* Mon 12 Jan 2015 06:28:16 PM JST
_window.
* Mon 12 Jan 2015 06:28:19 PM JST
_windowtypes.
* Mon 12 Jan 2015 06:28:22 PM JST
_window.
* Mon 12 Jan 2015 06:28:23 PM JST
            
* Mon 12 Jan 2015 06:28:27 PM JST
_windowtypes.
* Mon 12 Jan 2015 06:28:29 PM JST
_window.
* Mon 12 Jan 2015 06:28:30 PM JST
            
* Mon 12 Jan 2015 06:28:39 PM JST
_windowtypes.
* Mon 12 Jan 2015 06:28:41 PM JST
_window.
* Mon 12 Jan 2015 06:28:41 PM JST
            _window.
* Mon 12 Jan 2015 06:28:48 PM JST
_window.
* Mon 12 Jan 2015 06:29:24 PM JST

* Mon 12 Jan 2015 06:39:10 PM JST

* Mon 12 Jan 2015 06:39:10 PM JST

* Mon 12 Jan 2015 06:39:11 PM JST
from xcb import connect

* Mon 12 Jan 2015 06:39:23 PM JST
_xcb
* Mon 12 Jan 2015 06:44:07 PM JST
self.connection = connection
* Mon 12 Jan 2015 06:44:16 PM JST
    @property
    def rawconnection(self, ):
        r"""SUMMARY

        base_connection()

        @Return:
        """
        return self.connection.rawconnection

* Mon 12 Jan 2015 06:45:09 PM JST

* Mon 12 Jan 2015 06:45:09 PM JST
_atomname
* Mon 12 Jan 2015 06:45:11 PM JST
atomname
* Mon 12 Jan 2015 06:45:12 PM JST
as 
* Mon 12 Jan 2015 06:45:45 PM JST
key
* Mon 12 Jan 2015 06:46:05 PM JST
key.
* Mon 12 Jan 2015 06:46:05 PM JST
xobj.key.
* Mon 12 Jan 2015 06:46:05 PM JST
xcb5.xobj.key.
* Mon 12 Jan 2015 06:46:18 PM JST

* Mon 12 Jan 2015 06:46:18 PM JST

* Mon 12 Jan 2015 06:46:18 PM JST
# import xcb5.abstract as _abstract

* Mon 12 Jan 2015 06:49:20 PM JST

* Mon 12 Jan 2015 06:49:20 PM JST

* Mon 12 Jan 2015 06:49:20 PM JST
# import xcb5

* Mon 12 Jan 2015 06:51:08 PM JST
_
* Mon 12 Jan 2015 06:51:10 PM JST
_
* Mon 12 Jan 2015 06:51:10 PM JST
xproto._
* Mon 12 Jan 2015 06:55:32 PM JST
import xcb5.xproto._wrapcore as _wrapcore
import xcb5.xproto._wreply as _wreply

* Mon 12 Jan 2015 06:55:46 PM JST

* Mon 12 Jan 2015 06:55:46 PM JST

* Mon 12 Jan 2015 06:55:46 PM JST
        import xcb5.xproto._wreply as _wreply

* Mon 12 Jan 2015 06:56:22 PM JST

* Mon 12 Jan 2015 06:56:22 PM JST

* Mon 12 Jan 2015 06:56:22 PM JST
import xcb5.xobj.window as _window

* Mon 12 Jan 2015 06:56:38 PM JST

* Mon 12 Jan 2015 06:56:38 PM JST

* Mon 12 Jan 2015 06:56:38 PM JST
import xcb5.xobj.display as display

* Mon 12 Jan 2015 07:09:12 PM JST
Connection
* Mon 12 Jan 2015 09:49:27 PM JST
xproto/
* Mon 12 Jan 2015 09:49:41 PM JST
xproto.
* Mon 12 Jan 2015 09:50:09 PM JST
from xcb5.xobj.window import Window
* Mon 12 Jan 2015 09:51:57 PM JST
xproto/
* Mon 12 Jan 2015 09:52:18 PM JST
xproto.
* Mon 12 Jan 2015 09:52:32 PM JST

* Mon 12 Jan 2015 09:52:32 PM JST

* Mon 12 Jan 2015 09:52:33 PM JST
        import xcb5._wrapcore as _wrapcore

* Mon 12 Jan 2015 09:53:17 PM JST

* Mon 12 Jan 2015 09:53:17 PM JST

* Mon 12 Jan 2015 09:53:17 PM JST
import xcb5.xobj.atomidentify as _atomidentify # AtomIdentifier

* Mon 12 Jan 2015 09:54:51 PM JST

* Mon 12 Jan 2015 09:54:51 PM JST

* Mon 12 Jan 2015 09:54:51 PM JST
# from _xconnection import connect, Connection

* Mon 12 Jan 2015 10:04:52 PM JST
from cStringIO import StringIO as _StringIO
from array import array as _array
from struct import pack as _pack
from xcb import xcb

from _event import *
from _error import *
from _define import *
from _cookie import *
from _reply import *

# and import at end


class xprotoExtension(xcb.Extension):

    def CreateWindowChecked(self, depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, True),
                                 xcb.VoidCookie())

    def CreateWindow(self, depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, False),
                                 xcb.VoidCookie())

    def ChangeWindowAttributesChecked(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, True),
                                 xcb.VoidCookie())

    def ChangeWindowAttributes(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, False),
                                 xcb.VoidCookie())

    def GetWindowAttributes(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, True),
                                 GetWindowAttributesCookie(),
                                 GetWindowAttributesReply)

    def GetWindowAttributesUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, False),
                                 GetWindowAttributesCookie(),
                                 GetWindowAttributesReply)

    def DestroyWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, True),
                                 xcb.VoidCookie())

    def DestroyWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, False),
                                 xcb.VoidCookie())

    def DestroySubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, True),
                                 xcb.VoidCookie())

    def DestroySubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, False),
                                 xcb.VoidCookie())

    def ChangeSaveSetChecked(self, mode, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, True),
                                 xcb.VoidCookie())

    def ChangeSaveSet(self, mode, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, False),
                                 xcb.VoidCookie())

    def ReparentWindowChecked(self, window, parent, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, True),
                                 xcb.VoidCookie())

    def ReparentWindow(self, window, parent, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, False),
                                 xcb.VoidCookie())

    def MapWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, True),
                                 xcb.VoidCookie())

    def MapWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, False),
                                 xcb.VoidCookie())

    def MapSubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, True),
                                 xcb.VoidCookie())

    def MapSubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, False),
                                 xcb.VoidCookie())

    def UnmapWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, True),
                                 xcb.VoidCookie())

    def UnmapWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, False),
                                 xcb.VoidCookie())

    def UnmapSubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, True),
                                 xcb.VoidCookie())

    def UnmapSubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, False),
                                 xcb.VoidCookie())

    def ConfigureWindowChecked(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, True),
                                 xcb.VoidCookie())

    def ConfigureWindow(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, False),
                                 xcb.VoidCookie())

    def CirculateWindowChecked(self, direction, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, True),
                                 xcb.VoidCookie())

    def CirculateWindow(self, direction, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, False),
                                 xcb.VoidCookie())

    def GetGeometry(self, drawable):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, True),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def GetGeometryUnchecked(self, drawable):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, False),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def QueryTree(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, True),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def QueryTreeUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, False),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def InternAtom(self, only_if_exists, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, True),
                                 InternAtomCookie(),
                                 InternAtomReply)

    def InternAtomUnchecked(self, only_if_exists, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, False),
                                 InternAtomCookie(),
                                 InternAtomReply)

    def GetAtomName(self, atom):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, True),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)

    def GetAtomNameUnchecked(self, atom):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, False),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)

    def ChangePropertyChecked(self, mode, window, property, type, format, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, True),
                                 xcb.VoidCookie())

    def ChangeProperty(self, mode, window, property, type, format, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, False),
                                 xcb.VoidCookie())

    def DeletePropertyChecked(self, window, property):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, True),
                                 xcb.VoidCookie())

    def DeleteProperty(self, window, property):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, False),
                                 xcb.VoidCookie())

    def GetProperty(self, delete, window, property, type, long_offset, long_length):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, True),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def GetPropertyUnchecked(self, delete, window, property, type, long_offset, long_length):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, False),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def ListProperties(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, True),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def ListPropertiesUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, False),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def SetSelectionOwnerChecked(self, owner, selection, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, True),
                                 xcb.VoidCookie())

    def SetSelectionOwner(self, owner, selection, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, False),
                                 xcb.VoidCookie())

    def GetSelectionOwner(self, selection):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, True),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def GetSelectionOwnerUnchecked(self, selection):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, False),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def ConvertSelectionChecked(self, requestor, selection, target, property, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, True),
                                 xcb.VoidCookie())

    def ConvertSelection(self, requestor, selection, target, property, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, False),
                                 xcb.VoidCookie())

    def SendEventChecked(self, propagate, destination, event_mask, event):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(_array('b', event))))
        print(repr(buf.getvalue()))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, True),
                                 xcb.VoidCookie())

    def SendEvent(self, propagate, destination, event_mask, event):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(_array('b', event))))
        print(repr(buf.getvalue()))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, False),
                                 xcb.VoidCookie())

    def GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, True),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def GrabPointerUnchecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, False),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def UngrabPointerChecked(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, True),
                                 xcb.VoidCookie())

    def UngrabPointer(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, False),
                                 xcb.VoidCookie())

    def GrabButtonChecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, True),
                                 xcb.VoidCookie())

    def GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, False),
                                 xcb.VoidCookie())

    def UngrabButtonChecked(self, button, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, True),
                                 xcb.VoidCookie())

    def UngrabButton(self, button, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, False),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrabChecked(self, cursor, time, event_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, True),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrab(self, cursor, time, event_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, False),
                                 xcb.VoidCookie())

    def GrabKeyboard(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, True),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def GrabKeyboardUnchecked(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, False),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def UngrabKeyboardChecked(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, True),
                                 xcb.VoidCookie())

    def UngrabKeyboard(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, False),
                                 xcb.VoidCookie())

    def GrabKeyChecked(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, True),
                                 xcb.VoidCookie())

    def GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, False),
                                 xcb.VoidCookie())

    def UngrabKeyChecked(self, key, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, True),
                                 xcb.VoidCookie())

    def UngrabKey(self, key, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, False),
                                 xcb.VoidCookie())

    def AllowEventsChecked(self, mode, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, True),
                                 xcb.VoidCookie())

    def AllowEvents(self, mode, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, False),
                                 xcb.VoidCookie())

    def GrabServerChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, True),
                                 xcb.VoidCookie())

    def GrabServer(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, False),
                                 xcb.VoidCookie())

    def UngrabServerChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, True),
                                 xcb.VoidCookie())

    def UngrabServer(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, False),
                                 xcb.VoidCookie())

    def QueryPointer(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, True),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def QueryPointerUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, False),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def GetMotionEvents(self, window, start, stop):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, True),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def GetMotionEventsUnchecked(self, window, start, stop):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, False),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def TranslateCoordinates(self, src_window, dst_window, src_x, src_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, True),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def TranslateCoordinatesUnchecked(self, src_window, dst_window, src_x, src_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, False),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def WarpPointerChecked(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, True),
                                 xcb.VoidCookie())

    def WarpPointer(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, False),
                                 xcb.VoidCookie())

    def SetInputFocusChecked(self, revert_to, focus, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, True),
                                 xcb.VoidCookie())

    def SetInputFocus(self, revert_to, focus, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, False),
                                 xcb.VoidCookie())

    def GetInputFocus(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, True),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def GetInputFocusUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, False),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def QueryKeymap(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, True),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def QueryKeymapUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, False),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def OpenFontChecked(self, fid, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, True),
                                 xcb.VoidCookie())

    def OpenFont(self, fid, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, False),
                                 xcb.VoidCookie())

    def CloseFontChecked(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, True),
                                 xcb.VoidCookie())

    def CloseFont(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, False),
                                 xcb.VoidCookie())

    def QueryFont(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, True),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryFontUnchecked(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, False),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryTextExtents(self, font, string_len, string):
        buf = _StringIO()
        buf.write(_pack('=x', ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, True),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def QueryTextExtentsUnchecked(self, font, string_len, string):
        buf = _StringIO()
        buf.write(_pack('=x', ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, False),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def ListFonts(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, True),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsUnchecked(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, False),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsWithInfo(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, True),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def ListFontsWithInfoUnchecked(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, False),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def SetFontPathChecked(self, font_qty, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, True),
                                 xcb.VoidCookie())

    def SetFontPath(self, font_qty, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, False),
                                 xcb.VoidCookie())

    def GetFontPath(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, True),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def GetFontPathUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, False),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def CreatePixmapChecked(self, depth, pid, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, True),
                                 xcb.VoidCookie())

    def CreatePixmap(self, depth, pid, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, False),
                                 xcb.VoidCookie())

    def FreePixmapChecked(self, pixmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, True),
                                 xcb.VoidCookie())

    def FreePixmap(self, pixmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, False),
                                 xcb.VoidCookie())

    def CreateGCChecked(self, cid, drawable, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, True),
                                 xcb.VoidCookie())

    def CreateGC(self, cid, drawable, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, False),
                                 xcb.VoidCookie())

    def ChangeGCChecked(self, gc, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, True),
                                 xcb.VoidCookie())

    def ChangeGC(self, gc, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, False),
                                 xcb.VoidCookie())

    def CopyGCChecked(self, src_gc, dst_gc, value_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, True),
                                 xcb.VoidCookie())

    def CopyGC(self, src_gc, dst_gc, value_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, False),
                                 xcb.VoidCookie())

    def SetDashesChecked(self, gc, dash_offset, dashes_len, dashes):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(_array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, True),
                                 xcb.VoidCookie())

    def SetDashes(self, gc, dash_offset, dashes_len, dashes):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(_array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, False),
                                 xcb.VoidCookie())

    def SetClipRectanglesChecked(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, True),
                                 xcb.VoidCookie())

    def SetClipRectangles(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, False),
                                 xcb.VoidCookie())

    def FreeGCChecked(self, gc):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, True),
                                 xcb.VoidCookie())

    def FreeGC(self, gc):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, False),
                                 xcb.VoidCookie())

    def ClearAreaChecked(self, exposures, window, x, y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, True),
                                 xcb.VoidCookie())

    def ClearArea(self, exposures, window, x, y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, False),
                                 xcb.VoidCookie())

    def CopyAreaChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, True),
                                 xcb.VoidCookie())

    def CopyArea(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, False),
                                 xcb.VoidCookie())

    def CopyPlaneChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, True),
                                 xcb.VoidCookie())

    def CopyPlane(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, False),
                                 xcb.VoidCookie())

    def PolyPointChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, True),
                                 xcb.VoidCookie())

    def PolyPoint(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, False),
                                 xcb.VoidCookie())

    def PolyLineChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, True),
                                 xcb.VoidCookie())

    def PolyLine(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, False),
                                 xcb.VoidCookie())

    def PolySegmentChecked(self, drawable, gc, segments_len, segments):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, True),
                                 xcb.VoidCookie())

    def PolySegment(self, drawable, gc, segments_len, segments):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, False),
                                 xcb.VoidCookie())

    def PolyRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, True),
                                 xcb.VoidCookie())

    def PolyRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, False),
                                 xcb.VoidCookie())

    def PolyArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, True),
                                 xcb.VoidCookie())

    def PolyArc(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, False),
                                 xcb.VoidCookie())

    def FillPolyChecked(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, True),
                                 xcb.VoidCookie())

    def FillPoly(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, False),
                                 xcb.VoidCookie())

    def PolyFillRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, True),
                                 xcb.VoidCookie())

    def PolyFillRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, False),
                                 xcb.VoidCookie())

    def PolyFillArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, True),
                                 xcb.VoidCookie())

    def PolyFillArc(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, False),
                                 xcb.VoidCookie())

    def PutImageChecked(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, True),
                                 xcb.VoidCookie())

    def PutImage(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, False),
                                 xcb.VoidCookie())

    def GetImage(self, format, drawable, x, y, width, height, plane_mask):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, True),
                                 GetImageCookie(),
                                 GetImageReply)

    def GetImageUnchecked(self, format, drawable, x, y, width, height, plane_mask):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, False),
                                 GetImageCookie(),
                                 GetImageReply)

    def PolyText8Checked(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, True),
                                 xcb.VoidCookie())

    def PolyText8(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, False),
                                 xcb.VoidCookie())

    def PolyText16Checked(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, True),
                                 xcb.VoidCookie())

    def PolyText16(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, False),
                                 xcb.VoidCookie())

    def ImageText8Checked(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(_array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, True),
                                 xcb.VoidCookie())

    def ImageText8(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(_array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, False),
                                 xcb.VoidCookie())

    def ImageText16Checked(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, True),
                                 xcb.VoidCookie())

    def ImageText16(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, False),
                                 xcb.VoidCookie())

    def CreateColormapChecked(self, alloc, mid, window, visual):
        buf = _StringIO()
        buf.write(_pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, True),
                                 xcb.VoidCookie())

    def CreateColormap(self, alloc, mid, window, visual):
        buf = _StringIO()
        buf.write(_pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, False),
                                 xcb.VoidCookie())

    def FreeColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, True),
                                 xcb.VoidCookie())

    def FreeColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, False),
                                 xcb.VoidCookie())

    def CopyColormapAndFreeChecked(self, mid, src_cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, True),
                                 xcb.VoidCookie())

    def CopyColormapAndFree(self, mid, src_cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, False),
                                 xcb.VoidCookie())

    def InstallColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, True),
                                 xcb.VoidCookie())

    def InstallColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, False),
                                 xcb.VoidCookie())

    def UninstallColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, True),
                                 xcb.VoidCookie())

    def UninstallColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, False),
                                 xcb.VoidCookie())

    def ListInstalledColormaps(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, True),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def ListInstalledColormapsUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, False),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def AllocColor(self, cmap, red, green, blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, True),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocColorUnchecked(self, cmap, red, green, blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, False),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocNamedColor(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, True),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocNamedColorUnchecked(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, False),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocColorCells(self, contiguous, cmap, colors, planes):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, True),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorCellsUnchecked(self, contiguous, cmap, colors, planes):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, False),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorPlanes(self, contiguous, cmap, colors, reds, greens, blues):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, True),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def AllocColorPlanesUnchecked(self, contiguous, cmap, colors, reds, greens, blues):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, False),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def FreeColorsChecked(self, cmap, plane_mask, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, True),
                                 xcb.VoidCookie())

    def FreeColors(self, cmap, plane_mask, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, False),
                                 xcb.VoidCookie())

    def StoreColorsChecked(self, cmap, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, True),
                                 xcb.VoidCookie())

    def StoreColors(self, cmap, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, False),
                                 xcb.VoidCookie())

    def StoreNamedColorChecked(self, flags, cmap, pixel, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, True),
                                 xcb.VoidCookie())

    def StoreNamedColor(self, flags, cmap, pixel, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, False),
                                 xcb.VoidCookie())

    def QueryColors(self, cmap, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, True),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def QueryColorsUnchecked(self, cmap, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, False),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def LookupColor(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, True),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def LookupColorUnchecked(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, False),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def CreateCursorChecked(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, True),
                                 xcb.VoidCookie())

    def CreateCursor(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, False),
                                 xcb.VoidCookie())

    def CreateGlyphCursorChecked(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, True),
                                 xcb.VoidCookie())

    def CreateGlyphCursor(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, False),
                                 xcb.VoidCookie())

    def FreeCursorChecked(self, cursor):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, True),
                                 xcb.VoidCookie())

    def FreeCursor(self, cursor):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, False),
                                 xcb.VoidCookie())

    def RecolorCursorChecked(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, True),
                                 xcb.VoidCookie())

    def RecolorCursor(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, False),
                                 xcb.VoidCookie())

    def QueryBestSize(self, _class, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, True),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryBestSizeUnchecked(self, _class, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, False),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryExtension(self, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, True),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def QueryExtensionUnchecked(self, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, False),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def ListExtensions(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, True),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ListExtensionsUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, False),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ChangeKeyboardMappingChecked(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = _StringIO()
        buf.write(_pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(_array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardMapping(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = _StringIO()
        buf.write(_pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(_array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardMapping(self, first_keycode, count):
        buf = _StringIO()
        buf.write(_pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, True),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def GetKeyboardMappingUnchecked(self, first_keycode, count):
        buf = _StringIO()
        buf.write(_pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, False),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def ChangeKeyboardControlChecked(self, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardControl(self, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardControl(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, True),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def GetKeyboardControlUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, False),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def BellChecked(self, percent):
        buf = _StringIO()
        buf.write(_pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, True),
                                 xcb.VoidCookie())

    def Bell(self, percent):
        buf = _StringIO()
        buf.write(_pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, False),
                                 xcb.VoidCookie())

    def ChangePointerControlChecked(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, True),
                                 xcb.VoidCookie())

    def ChangePointerControl(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, False),
                                 xcb.VoidCookie())

    def GetPointerControl(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, True),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def GetPointerControlUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, False),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def SetScreenSaverChecked(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, True),
                                 xcb.VoidCookie())

    def SetScreenSaver(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, False),
                                 xcb.VoidCookie())

    def GetScreenSaver(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, True),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def GetScreenSaverUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, False),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def ChangeHostsChecked(self, mode, family, address_len, address):
        buf = _StringIO()
        buf.write(_pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(_array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, True),
                                 xcb.VoidCookie())

    def ChangeHosts(self, mode, family, address_len, address):
        buf = _StringIO()
        buf.write(_pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(_array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, False),
                                 xcb.VoidCookie())

    def ListHosts(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, True),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def ListHostsUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, False),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def SetAccessControlChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, True),
                                 xcb.VoidCookie())

    def SetAccessControl(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, False),
                                 xcb.VoidCookie())

    def SetCloseDownModeChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, True),
                                 xcb.VoidCookie())

    def SetCloseDownMode(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, False),
                                 xcb.VoidCookie())

    def KillClientChecked(self, resource):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, True),
                                 xcb.VoidCookie())

    def KillClient(self, resource):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, False),
                                 xcb.VoidCookie())

    def RotatePropertiesChecked(self, window, atoms_len, delta, atoms):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(_array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, True),
                                 xcb.VoidCookie())

    def RotateProperties(self, window, atoms_len, delta, atoms):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(_array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, False),
                                 xcb.VoidCookie())

    def ForceScreenSaverChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, True),
                                 xcb.VoidCookie())

    def ForceScreenSaver(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, False),
                                 xcb.VoidCookie())

    def SetPointerMapping(self, map_len, map):
        buf = _StringIO()
        buf.write(_pack('=xB2x', map_len))
        buf.write(str(buffer(_array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, True),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def SetPointerMappingUnchecked(self, map_len, map):
        buf = _StringIO()
        buf.write(_pack('=xB2x', map_len))
        buf.write(str(buffer(_array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, False),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def GetPointerMapping(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, True),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def GetPointerMappingUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, False),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def SetModifierMapping(self, keycodes_per_modifier, keycodes):
        buf = _StringIO()
        buf.write(_pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(_array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, True),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def SetModifierMappingUnchecked(self, keycodes_per_modifier, keycodes):
        buf = _StringIO()
        buf.write(_pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(_array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, False),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def GetModifierMapping(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, True),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def GetModifierMappingUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, False),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def NoOperationChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, True),
                                 xcb.VoidCookie())

    def NoOperation(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, False),
                                 xcb.VoidCookie())


* Mon 12 Jan 2015 10:05:07 PM JST

* Mon 12 Jan 2015 10:05:08 PM JST

* Mon 12 Jan 2015 10:05:08 PM JST
# and import at end

* Mon 12 Jan 2015 10:05:42 PM JST
xc
* Mon 12 Jan 2015 10:05:43 PM JST
import xc
* Mon 12 Jan 2015 10:06:28 PM JST
xprotoExtension
* Mon 12 Jan 2015 10:06:31 PM JST

* Mon 12 Jan 2015 10:06:33 PM JST
extension
* Mon 12 Jan 2015 10:07:42 PM JST
xprotoExtension
* Mon 12 Jan 2015 10:07:54 PM JST

* Mon 12 Jan 2015 10:07:56 PM JST
_reply
* Mon 12 Jan 2015 10:08:01 PM JST
Setup
* Mon 12 Jan 2015 10:08:06 PM JST

* Mon 12 Jan 2015 10:08:09 PM JST
_event
* Mon 12 Jan 2015 10:08:18 PM JST
_EVENTS
* Mon 12 Jan 2015 10:08:30 PM JST

* Mon 12 Jan 2015 10:08:30 PM JST

* Mon 12 Jan 2015 10:08:30 PM JST
from _error import *

* Mon 12 Jan 2015 10:08:33 PM JST

* Mon 12 Jan 2015 10:08:33 PM JST

* Mon 12 Jan 2015 10:08:33 PM JST
from _reply import *

* Mon 12 Jan 2015 10:10:14 PM JST
xproto
* Mon 12 Jan 2015 10:13:21 PM JST
Setup
* Mon 12 Jan 2015 10:13:23 PM JST
_EVENTS
* Mon 12 Jan 2015 10:13:25 PM JST
_ERRORS
* Mon 12 Jan 2015 10:13:35 PM JST
from _define import *
* Mon 12 Jan 2015 10:13:42 PM JST
xcb5.protocol.xproto.
* Mon 12 Jan 2015 10:13:48 PM JST

* Mon 12 Jan 2015 10:13:49 PM JST
_define
* Mon 12 Jan 2015 10:14:34 PM JST
window.
* Mon 12 Jan 2015 10:16:04 PM JST
window.
* Mon 12 Jan 2015 10:16:05 PM JST
window.
* Mon 12 Jan 2015 10:16:09 PM JST
window.
* Mon 12 Jan 2015 10:16:09 PM JST
window.
* Mon 12 Jan 2015 10:17:42 PM JST

* Mon 12 Jan 2015 10:17:42 PM JST

* Mon 12 Jan 2015 10:17:42 PM JST
import xcb5, xcb5.protocol.xproto

* Mon 12 Jan 2015 10:24:02 PM JST
protoco
* Mon 12 Jan 2015 10:24:13 PM JST
protocol.
* Mon 12 Jan 2015 10:32:37 PM JST
from xcb5.xobj.window import Window
* Mon 12 Jan 2015 10:44:30 PM JST
            
* Mon 12 Jan 2015 10:44:59 PM JST

* Mon 12 Jan 2015 10:45:00 PM JST

* Mon 12 Jan 2015 10:45:00 PM JST
import xcb5.xobj.windowlist as _windowlist

* Mon 12 Jan 2015 10:50:53 PM JST

* Mon 12 Jan 2015 10:50:53 PM JST

* Mon 12 Jan 2015 10:50:53 PM JST
import xcb5.xobj.windowtypes as _windowtypes

* Mon 12 Jan 2015 10:50:53 PM JST
import xcb5.xobj.windowtypes as _windowtypes

* Mon 12 Jan 2015 10:50:53 PM JST
import xcb5.xobj.windowtypes as _windowtypes
import xcb5.xobj.windowlist as _windowlist

* Mon 12 Jan 2015 10:51:04 PM JST
WindowList(
* Mon 12 Jan 2015 10:51:05 PM JST
_windowlist.WindowList(
* Mon 12 Jan 2015 10:51:06 PM JST
            
* Mon 12 Jan 2015 10:51:23 PM JST
WindowRootType
* Mon 12 Jan 2015 10:51:24 PM JST
_windowtypes.WindowRootType
* Mon 12 Jan 2015 10:51:26 PM JST
            
* Mon 12 Jan 2015 10:51:38 PM JST
WindowRootType(
* Mon 12 Jan 2015 10:51:38 PM JST
_windowtypes.WindowRootType(
* Mon 12 Jan 2015 10:51:49 PM JST
_windowtypes.WindowRootType(
* Mon 12 Jan 2015 10:51:50 PM JST
            
* Mon 12 Jan 2015 10:53:57 PM JST
_wreply
* Mon 12 Jan 2015 10:57:17 PM JST
WrapQueryTreeReply
* Mon 12 Jan 2015 10:57:31 PM JST
WrapQueryTreeCookie
* Mon 12 Jan 2015 11:12:41 PM JST
xcb.Cookie
* Tue 13 Jan 2015 12:23:43 AM JST
class renderExtension(xcb.Extension):

    def QueryVersion(self, client_major_version, client_minor_version):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', client_major_version, client_minor_version))
        return self.send_request(xcb.Request(buf.getvalue(), 0, False, True),
                                 QueryVersionCookie(),
                                 QueryVersionReply)

    def QueryVersionUnchecked(self, client_major_version, client_minor_version):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', client_major_version, client_minor_version))
        return self.send_request(xcb.Request(buf.getvalue(), 0, False, False),
                                 QueryVersionCookie(),
                                 QueryVersionReply)

    def QueryPictFormats(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 1, False, True),
                                 QueryPictFormatsCookie(),
                                 QueryPictFormatsReply)

    def QueryPictFormatsUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 1, False, False),
                                 QueryPictFormatsCookie(),
                                 QueryPictFormatsReply)

    def QueryPictIndexValues(self, format):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', format))
        return self.send_request(xcb.Request(buf.getvalue(), 2, False, True),
                                 QueryPictIndexValuesCookie(),
                                 QueryPictIndexValuesReply)

    def QueryPictIndexValuesUnchecked(self, format):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', format))
        return self.send_request(xcb.Request(buf.getvalue(), 2, False, False),
                                 QueryPictIndexValuesCookie(),
                                 QueryPictIndexValuesReply)

    def CreatePictureChecked(self, pid, drawable, format, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIII', pid, drawable, format, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, True),
                                 xcb.VoidCookie())

    def CreatePicture(self, pid, drawable, format, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIII', pid, drawable, format, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, False),
                                 xcb.VoidCookie())

    def ChangePictureChecked(self, picture, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', picture, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, True),
                                 xcb.VoidCookie())

    def ChangePicture(self, picture, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', picture, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, False),
                                 xcb.VoidCookie())

    def SetPictureClipRectanglesChecked(self, picture, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIhh', picture, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, True),
                                 xcb.VoidCookie())

    def SetPictureClipRectangles(self, picture, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIhh', picture, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, False),
                                 xcb.VoidCookie())

    def FreePictureChecked(self, picture):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, True),
                                 xcb.VoidCookie())

    def FreePicture(self, picture):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, False),
                                 xcb.VoidCookie())

    def CompositeChecked(self, op, src, mask, dst, src_x, src_y, mask_x, mask_y, dst_x, dst_y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhhhhhhHH', op, src, mask, dst, src_x, src_y, mask_x, mask_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, True),
                                 xcb.VoidCookie())

    def Composite(self, op, src, mask, dst, src_x, src_y, mask_x, mask_y, dst_x, dst_y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhhhhhhHH', op, src, mask, dst, src_x, src_y, mask_x, mask_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, False),
                                 xcb.VoidCookie())

    def TrapezoidsChecked(self, op, src, dst, mask_format, src_x, src_y, traps_len, traps):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(traps, 10, 'traps', True):
            buf.write(pack('=iiiiiiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, True),
                                 xcb.VoidCookie())

    def Trapezoids(self, op, src, dst, mask_format, src_x, src_y, traps_len, traps):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(traps, 10, 'traps', True):
            buf.write(pack('=iiiiiiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, False),
                                 xcb.VoidCookie())

    def TrianglesChecked(self, op, src, dst, mask_format, src_x, src_y, triangles_len, triangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(triangles, 6, 'triangles', True):
            buf.write(pack('=iiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, True),
                                 xcb.VoidCookie())

    def Triangles(self, op, src, dst, mask_format, src_x, src_y, triangles_len, triangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(triangles, 6, 'triangles', True):
            buf.write(pack('=iiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, False),
                                 xcb.VoidCookie())

    def TriStripChecked(self, op, src, dst, mask_format, src_x, src_y, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=ii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, True),
                                 xcb.VoidCookie())

    def TriStrip(self, op, src, dst, mask_format, src_x, src_y, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=ii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, False),
                                 xcb.VoidCookie())

    def TriFanChecked(self, op, src, dst, mask_format, src_x, src_y, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=ii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, True),
                                 xcb.VoidCookie())

    def TriFan(self, op, src, dst, mask_format, src_x, src_y, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=ii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, False),
                                 xcb.VoidCookie())

    def CreateGlyphSetChecked(self, gsid, format):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', gsid, format))
        return self.send_request(xcb.Request(buf.getvalue(), 17, True, True),
                                 xcb.VoidCookie())

    def CreateGlyphSet(self, gsid, format):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', gsid, format))
        return self.send_request(xcb.Request(buf.getvalue(), 17, True, False),
                                 xcb.VoidCookie())

    def ReferenceGlyphSetChecked(self, gsid, existing):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', gsid, existing))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, True),
                                 xcb.VoidCookie())

    def ReferenceGlyphSet(self, gsid, existing):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', gsid, existing))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, False),
                                 xcb.VoidCookie())

    def FreeGlyphSetChecked(self, glyphset):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', glyphset))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, True),
                                 xcb.VoidCookie())

    def FreeGlyphSet(self, glyphset):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', glyphset))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, False),
                                 xcb.VoidCookie())

    def AddGlyphsChecked(self, glyphset, glyphs_len, glyphids, glyphs, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', glyphset, glyphs_len))
        buf.write(str(buffer(array('I', glyphids))))
        for elt in xcb.Iterator(glyphs, 6, 'glyphs', True):
            buf.write(pack('=HHhhhh', *elt))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 20, True, True),
                                 xcb.VoidCookie())

    def AddGlyphs(self, glyphset, glyphs_len, glyphids, glyphs, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', glyphset, glyphs_len))
        buf.write(str(buffer(array('I', glyphids))))
        for elt in xcb.Iterator(glyphs, 6, 'glyphs', True):
            buf.write(pack('=HHhhhh', *elt))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 20, True, False),
                                 xcb.VoidCookie())

    def FreeGlyphsChecked(self, glyphset, glyphs_len, glyphs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', glyphset))
        buf.write(str(buffer(array('I', glyphs))))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, True),
                                 xcb.VoidCookie())

    def FreeGlyphs(self, glyphset, glyphs_len, glyphs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', glyphset))
        buf.write(str(buffer(array('I', glyphs))))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, False),
                                 xcb.VoidCookie())

    def CompositeGlyphs8Checked(self, op, src, dst, mask_format, glyphset, src_x, src_y, glyphcmds_len, glyphcmds):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIIhh', op, src, dst, mask_format, glyphset, src_x, src_y))
        buf.write(str(buffer(array('B', glyphcmds))))
        return self.send_request(xcb.Request(buf.getvalue(), 23, True, True),
                                 xcb.VoidCookie())

    def CompositeGlyphs8(self, op, src, dst, mask_format, glyphset, src_x, src_y, glyphcmds_len, glyphcmds):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIIhh', op, src, dst, mask_format, glyphset, src_x, src_y))
        buf.write(str(buffer(array('B', glyphcmds))))
        return self.send_request(xcb.Request(buf.getvalue(), 23, True, False),
                                 xcb.VoidCookie())

    def CompositeGlyphs16Checked(self, op, src, dst, mask_format, glyphset, src_x, src_y, glyphcmds_len, glyphcmds):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIIhh', op, src, dst, mask_format, glyphset, src_x, src_y))
        buf.write(str(buffer(array('B', glyphcmds))))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, True),
                                 xcb.VoidCookie())

    def CompositeGlyphs16(self, op, src, dst, mask_format, glyphset, src_x, src_y, glyphcmds_len, glyphcmds):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIIhh', op, src, dst, mask_format, glyphset, src_x, src_y))
        buf.write(str(buffer(array('B', glyphcmds))))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, False),
                                 xcb.VoidCookie())

    def CompositeGlyphs32Checked(self, op, src, dst, mask_format, glyphset, src_x, src_y, glyphcmds_len, glyphcmds):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIIhh', op, src, dst, mask_format, glyphset, src_x, src_y))
        buf.write(str(buffer(array('B', glyphcmds))))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, True),
                                 xcb.VoidCookie())

    def CompositeGlyphs32(self, op, src, dst, mask_format, glyphset, src_x, src_y, glyphcmds_len, glyphcmds):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIIhh', op, src, dst, mask_format, glyphset, src_x, src_y))
        buf.write(str(buffer(array('B', glyphcmds))))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, False),
                                 xcb.VoidCookie())

    def FillRectanglesChecked(self, op, dst, color, rects_len, rects):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xI', op, dst))
        for elt in xcb.Iterator(color, 4, 'color', False):
            buf.write(pack('=HHHH', *elt))
        for elt in xcb.Iterator(rects, 4, 'rects', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 26, True, True),
                                 xcb.VoidCookie())

    def FillRectangles(self, op, dst, color, rects_len, rects):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xI', op, dst))
        for elt in xcb.Iterator(color, 4, 'color', False):
            buf.write(pack('=HHHH', *elt))
        for elt in xcb.Iterator(rects, 4, 'rects', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 26, True, False),
                                 xcb.VoidCookie())

    def CreateCursorChecked(self, cid, source, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIHH', cid, source, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, True),
                                 xcb.VoidCookie())

    def CreateCursor(self, cid, source, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIHH', cid, source, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, False),
                                 xcb.VoidCookie())

    def SetPictureTransformChecked(self, picture, transform):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(transform, 9, 'transform', False):
            buf.write(pack('=iiiiiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, True),
                                 xcb.VoidCookie())

    def SetPictureTransform(self, picture, transform):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(transform, 9, 'transform', False):
            buf.write(pack('=iiiiiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, False),
                                 xcb.VoidCookie())

    def QueryFilters(self, drawable):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 29, False, True),
                                 QueryFiltersCookie(),
                                 QueryFiltersReply)

    def QueryFiltersUnchecked(self, drawable):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 29, False, False),
                                 QueryFiltersCookie(),
                                 QueryFiltersReply)

    def SetPictureFilterChecked(self, picture, filter_len, filter, values_len, values):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', picture, filter_len))
        buf.write(str(buffer(array('b', filter))))
        buf.write(str(buffer(array('i', values))))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, True),
                                 xcb.VoidCookie())

    def SetPictureFilter(self, picture, filter_len, filter, values_len, values):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', picture, filter_len))
        buf.write(str(buffer(array('b', filter))))
        buf.write(str(buffer(array('i', values))))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, False),
                                 xcb.VoidCookie())

    def CreateAnimCursorChecked(self, cid, cursors_len, cursors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cid))
        for elt in xcb.Iterator(cursors, 2, 'cursors', True):
            buf.write(pack('=II', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 31, True, True),
                                 xcb.VoidCookie())

    def CreateAnimCursor(self, cid, cursors_len, cursors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cid))
        for elt in xcb.Iterator(cursors, 2, 'cursors', True):
            buf.write(pack('=II', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 31, True, False),
                                 xcb.VoidCookie())

    def AddTrapsChecked(self, picture, x_off, y_off, traps_len, traps):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIhh', picture, x_off, y_off))
        for elt in xcb.Iterator(traps, 6, 'traps', True):
            buf.write(pack('=iiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, True),
                                 xcb.VoidCookie())

    def AddTraps(self, picture, x_off, y_off, traps_len, traps):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIhh', picture, x_off, y_off))
        for elt in xcb.Iterator(traps, 6, 'traps', True):
            buf.write(pack('=iiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, False),
                                 xcb.VoidCookie())

    def CreateSolidFillChecked(self, picture, color):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(color, 4, 'color', False):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, True),
                                 xcb.VoidCookie())

    def CreateSolidFill(self, picture, color):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(color, 4, 'color', False):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, False),
                                 xcb.VoidCookie())

    def CreateLinearGradientChecked(self, picture, p1, p2, num_stops, stops, colors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(p1, 2, 'p1', False):
            buf.write(pack('=ii', *elt))
        for elt in xcb.Iterator(p2, 2, 'p2', False):
            buf.write(pack('=ii', *elt))
        buf.write(pack('=I', num_stops))
        buf.write(str(buffer(array('i', stops))))
        for elt in xcb.Iterator(colors, 4, 'colors', True):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, True),
                                 xcb.VoidCookie())

    def CreateLinearGradient(self, picture, p1, p2, num_stops, stops, colors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(p1, 2, 'p1', False):
            buf.write(pack('=ii', *elt))
        for elt in xcb.Iterator(p2, 2, 'p2', False):
            buf.write(pack('=ii', *elt))
        buf.write(pack('=I', num_stops))
        buf.write(str(buffer(array('i', stops))))
        for elt in xcb.Iterator(colors, 4, 'colors', True):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, False),
                                 xcb.VoidCookie())

    def CreateRadialGradientChecked(self, picture, inner, outer, inner_radius, outer_radius, num_stops, stops, colors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(inner, 2, 'inner', False):
            buf.write(pack('=ii', *elt))
        for elt in xcb.Iterator(outer, 2, 'outer', False):
            buf.write(pack('=ii', *elt))
        buf.write(pack('=iiI', inner_radius, outer_radius, num_stops))
        buf.write(str(buffer(array('i', stops))))
        for elt in xcb.Iterator(colors, 4, 'colors', True):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, True),
                                 xcb.VoidCookie())

    def CreateRadialGradient(self, picture, inner, outer, inner_radius, outer_radius, num_stops, stops, colors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(inner, 2, 'inner', False):
            buf.write(pack('=ii', *elt))
        for elt in xcb.Iterator(outer, 2, 'outer', False):
            buf.write(pack('=ii', *elt))
        buf.write(pack('=iiI', inner_radius, outer_radius, num_stops))
        buf.write(str(buffer(array('i', stops))))
        for elt in xcb.Iterator(colors, 4, 'colors', True):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, False),
                                 xcb.VoidCookie())

    def CreateConicalGradientChecked(self, picture, center, angle, num_stops, stops, colors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(center, 2, 'center', False):
            buf.write(pack('=ii', *elt))
        buf.write(pack('=iI', angle, num_stops))
        buf.write(str(buffer(array('i', stops))))
        for elt in xcb.Iterator(colors, 4, 'colors', True):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, True),
                                 xcb.VoidCookie())

    def CreateConicalGradient(self, picture, center, angle, num_stops, stops, colors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(center, 2, 'center', False):
            buf.write(pack('=ii', *elt))
        buf.write(pack('=iI', angle, num_stops))
        buf.write(str(buffer(array('i', stops))))
        for elt in xcb.Iterator(colors, 4, 'colors', True):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, False),
                                 xcb.VoidCookie())


_events = {
}

* Tue 13 Jan 2015 12:24:15 AM JST
_events = {
}

* Tue 13 Jan 2015 12:26:58 AM JST
xcb
* Tue 13 Jan 2015 12:26:59 AM JST
as xcb
* Tue 13 Jan 2015 01:26:09 AM JST
class SingletonConnectionMeta(type):
    r"""Singleton Connection by display name."""

    _instances = {}

    def __call__(cls, *args, **kwargs):
        key = kwargs.get('display', '')
        if cls not in cls._instances:
            cls._instances[cls] = {}
        if key not in cls._instances[cls]:
            cls._instances[cls][key] = (super(SingletonConnectionMeta, cls)
                                        .__call__(*args, **kwargs))
        return cls._instances[cls][key]



* Tue 13 Jan 2015 01:26:44 AM JST
key
* Tue 13 Jan 2015 01:27:17 AM JST
kwargs.get('display', '')
* Tue 13 Jan 2015 01:28:56 AM JST
kwargs.get('display', '')
* Tue 13 Jan 2015 01:29:02 AM JST

* Tue 13 Jan 2015 01:29:02 AM JST

* Tue 13 Jan 2015 01:29:02 AM JST
        key = str(display)

* Tue 13 Jan 2015 01:30:23 AM JST
from xcb.xcb import connect as baseconnect
* Tue 13 Jan 2015 01:32:44 AM JST
        if args:
            self.display = display.Display(args[0])
        else:
            self.display = display.Display(
                kwargs.get('display', display.Display.from_environ()))

* Tue 13 Jan 2015 01:32:50 AM JST
        if len(args):
            display = args[0]
        else:
            display = kwargs.get('display', '')

* Tue 13 Jan 2015 01:34:35 AM JST
self, 
* Tue 13 Jan 2015 01:37:14 AM JST
c=xcb2.connect()
* Tue 13 Jan 2015 01:43:05 AM JST
not 
* Tue 13 Jan 2015 01:43:21 AM JST
                
* Tue 13 Jan 2015 01:46:23 AM JST
self.__metaclass__.instances
* Tue 13 Jan 2015 01:47:43 AM JST
    def get_maximum_request_length(self, ):
        r"""SUMMARY

        get_maximum_request_length()

        @Return:
        """
        return self.rawconnection.get_maximum_request_length()

* Tue 13 Jan 2015 01:52:03 AM JST
    def has_error(self, ):
        r"""SUMMARY

        has_error()

        @Return:
        """
        return self.rawconnection.has_error()

    def poll_for_event(self, ):
        r"""SUMMARY

        poll_for_event()

        @Return:
        """
        return self.rawconnection.poll_for_event()

    @property
    def pref_screen(self, ):
        r"""SUMMARY

        pref_screen()

        @Return:
        """
        return self.rawconnection.pref_screen

    def prefetch_maximum_request_length(self, ):
        r"""SUMMARY

        prefetch_maximum_request_length()

        @Return:
        """
        return self.rawconnection.prefetch_maximum_request_length()

    def wait_for_event(self, ):
        r"""SUMMARY

        wait_for_event()

        @Return:
        """
        return self.rawconnection.wait_for_event()


* Tue 13 Jan 2015 01:52:31 AM JST
    def __call__(self, *args, **kwargs):
        return self.rawconnection(*args, **kwargs)

* Tue 13 Jan 2015 01:53:37 AM JST
def connect(*args, **kwargs):
    r"""SUMMARY

    connection(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    return Connection.get_instance(*args, **kwargs)

* Tue 13 Jan 2015 02:02:05 AM JST
self.
* Tue 13 Jan 2015 02:02:50 AM JST
    @property
    def white_pixel(self, ):
        r"""SUMMARY

        white_pixel()

        @Return:
        """
        return self._raw.white_pixel

    @property
    def black_pixel(self, ):
        r"""SUMMARY

        black_pixel()

        @Return:
        """
        return self._raw.black_pixel

    @property
    def current_input_masks(self, ):
        r"""SUMMARY

        current_input_masks()

        @Return:
        """
        return self._raw.current_input_masks

    @property
    def width_in_pixels(self, ):
        r"""SUMMARY

        width_in_pixels()

        @Return:
        """
        return self._raw.width_in_pixels

    @property
    def height_in_pixels(self, ):
        r"""SUMMARY

        height_in_pixels()

        @Return:
        """
        return self._raw.height_in_pixels

    @property
    def width_in_millimeters(self, ):
        r"""SUMMARY

        width_in_millimeters()

        @Return:
        """
        return self._raw.width_in_millimeters

    @property
    def height_in_millimeters(self, ):
        r"""SUMMARY

        height_in_millimeters()

        @Return:
        """
        return self._raw.height_in_millimeters

    @property
    def min_installed_maps(self, ):
        r"""SUMMARY

        min_installed_maps()

        @Return:
        """
        return self._raw.min_installed_maps

    @property
    def max_installed_maps(self, ):
        r"""SUMMARY

        max_installed_maps()

        @Return:
        """
        return self._raw.max_installed_maps

    @property
    def root_visual(self, ):
        r"""SUMMARY

        root_visual()

        @Return:
        """
        return self._raw.root_visual

    @property
    def backing_stores(self, ):
        r"""SUMMARY

        backing_stores()

        @Return:
        """
        return self._raw.backing_stores

    @property
    def save_unders(self, ):
        r"""SUMMARY

        save_unders()

        @Return:
        """
        return self._raw.save_unders

    @property
    def root_depth(self, ):
        r"""SUMMARY

        root_depth()

        @Return:
        """
        return self._raw.root_depth

    @property
    def allowed_depths_len(self, ):
        r"""SUMMARY

        allowed_depths_len()

        @Return:
        """
        return self._raw.allowed_depths_len

    @property
    def allowed_depths(self, ):
        r"""SUMMARY

        allowed_depths()

        @Return:
        """
        return self._raw.allowed_depths

* Tue 13 Jan 2015 02:04:27 AM JST

* Tue 13 Jan 2015 02:04:27 AM JST

* Tue 13 Jan 2015 02:04:27 AM JST
        self.root = self._rawreply.root

* Tue 13 Jan 2015 02:05:21 AM JST
    @property
    def status(self, ):
        r"""SUMMARY

        status()

        @Return:
        """
        return self._raw.status

    @property
    def protocol_major_version(self, ):
        r"""SUMMARY

        protocol_major_version()

        @Return:
        """
        return self._raw.protocol_major_version

    @property
    def protocol_minor_version(self, ):
        r"""SUMMARY

        protocol_minor_version()

        @Return:
        """
        return self._raw.protocol_minor_version

    @property
    def length(self, ):
        r"""SUMMARY

        length()

        @Return:
        """
        return self._raw.length

    @property
    def release_number(self, ):
        r"""SUMMARY

        release_number()

        @Return:
        """
        return self._raw.release_number

    @property
    def resorce_id_base(self, ):
        r"""SUMMARY

        resorce_id_base()

        @Return:
        """
        return self._raw.resorce_id_base

    @property
    def resorce_id_mask(self, ):
        r"""SUMMARY

        resorce_id_mask()

        @Return:
        """
        return self._raw.resorce_id_mask

    @property
    def motion_buffer_size(self, ):
        r"""SUMMARY

        motion_buffer_size()

        @Return:
        """
        return self._raw.motion_buffer_size

    @property
    def vendor_len(self, ):
        r"""SUMMARY

        vendor_len()

        @Return:
        """
        return self._raw.vendor_len

    @property
    def maximum_request_length(self, ):
        r"""SUMMARY

        maximum_request_length()

        @Return:
        """
        return self._raw.maximum_request_length

    @property
    def roots_len(self, ):
        r"""SUMMARY

        roots_len()

        @Return:
        """
        return self._raw.roots_len

    @property
    def pixmap_formats_len(self, ):
        r"""SUMMARY

        pixmap_formats_len()

        @Return:
        """
        return self._raw.pixmap_formats_len

    @property
    def image_byte_order(self, ):
        r"""SUMMARY

        image_byte_order()

        @Return:
        """
        return self._raw.image_byte_order

    @property
    def bitmap_format_scanline_unit(self, ):
        r"""SUMMARY

        bitmap_format_scanline_unit()

        @Return:
        """
        return self._raw.bitmap_format_scanline_unit

    @property
    def bitmap_format_scanline_pad(self, ):
        r"""SUMMARY

        bitmap_format_scanline_pad()

        @Return:
        """
        return self._raw.bitmap_format_scanline_pad

    @property
    def min_keycode(self, ):
        r"""SUMMARY

        min_keycode()

        @Return:
        """
        return self._raw.min_keycode

    @property
    def max_keycode(self, ):
        r"""SUMMARY

        max_keycode()

        @Return:
        """
        return self._raw.max_keycode

    @property
    def vendor(self, ):
        r"""SUMMARY

        vendor()

        @Return:
        """
        return self._raw.vendor

    @property
    def pixmap_formats(self, ):
        r"""SUMMARY

        pixmap_formats()

        @Return:
        """
        return self._raw.pixmap_formats

    @property
    def roots(self, ):
        r"""SUMMARY

        roots()

        @Return:
        """
        return [WrapSCREEN(self.connection, x) for x in self._raw.roots]

* Tue 13 Jan 2015 02:05:29 AM JST
connection
* Tue 13 Jan 2015 02:05:29 AM JST
self.connection
* Tue 13 Jan 2015 02:05:31 AM JST
WrapSCREEN(, 
* Tue 13 Jan 2015 02:22:09 AM JST
def
* Tue 13 Jan 2015 02:24:08 AM JST
    def get_id(self, ):
        r"""SUMMARY
        
        get_id()
        
        @Return:

        @Error:
        """
        return self._rid


* Tue 13 Jan 2015 02:24:56 AM JST
isinstace
* Tue 13 Jan 2015 02:24:59 AM JST
is
* Tue 13 Jan 2015 02:25:58 AM JST
int
* Tue 13 Jan 2015 02:26:03 AM JST
self)
* Tue 13 Jan 2015 02:26:04 AM JST
int(self)
* Tue 13 Jan 2015 02:26:31 AM JST
int(
* Tue 13 Jan 2015 02:26:47 AM JST
'{0.__class__.__name__}(id={0.id})'.format(self)
* Tue 13 Jan 2015 02:26:55 AM JST
    def __str__(self, ):
        return '{0.__class__.__name__}(id={0.id})'.format(self)


* Tue 13 Jan 2015 02:27:10 AM JST
    def kill_client(self, ):
        r"""SUMMARY

        kill_client()

        @Return:
        """
        return xcb5.connect(self.display).core.KillClientChecked(self.id)


* Tue 13 Jan 2015 02:27:43 AM JST
_xconnection
* Tue 13 Jan 2015 02:30:18 AM JST
    def create(self, depth, parent, x, y, width, height, border_width,
               class_, visual, value_mask, value_list):
        r"""SUMMARY

        create(depth, parent, x, y, width, height, border_width, class_,
        visual, value_mask, value_list)

        @Arguments:
        - `depth`:
        - `parent`:
        - `x`:
        - `y`:
        - `width`:
        - `height`:
        - `border_width`:
        - `class_`:
        - `visual`:
        - `value_mask`:
        - `value_list`:

        @Return:
        """
        return xcb5.connect(self.display).core.CreateWindowChecked(
            depth, self.id, parent, x, y, width, height, border_width, class_,
            visual, value_mask, value_list)

    def configure(self, value_mask, value_list):
        r"""SUMMARY

        configure(value_mask, value_list)

        @Arguments:
        - `value_mask`:
        - `value_list`:

        @Return:
        """
        return xcb5.connect(self.display).core.ConfigureWindowChecked(
            self.id, value_mask, value_list)

    def cleararea(self, exposures, x, y, width, height):
        r"""SUMMARY

        cleararea(exposures, x, y, width, height)

        @Arguments:
        - `exposures`:
        - `x`:
        - `y`:
        - `width`:
        - `height`:

        @Return:
        """
        return xcb5.connect(self.display).core.ClearAreaChecked(
            exposures, self.id, x, y, width, height)

    def reparent(self, parent, x, y):
        r"""SUMMARY

        reparent(parent, x, y)

        @Arguments:
        - `parent`:
        - `x`:
        - `y`:

        @Return:
        """
        return xcb5.connect(self.display).core.ReparentWindowChecked(
            self.id, parent, x, y)

    def getattributes(self, ):
        r"""SUMMARY

        get_attributes()

        @Return:
        """
        return xcb5.connect(self.display).core.GetWindowAttributesUnchecked(
            self.id)

    def changeattributes(self, value_mask, value_list):
        r"""SUMMARY

        change_attributes(value_mask, value_list)

        @Arguments:
        - `value_mask`:
        - `value_list`:

        @Return:
        """
        return xcb5.connect(self.display).core.ChangeWindowAttributesChecked(
            self.id, value_mask, value_list)

    def createcolormap(self, alloc, mid, visual):
        r"""SUMMARY

        create_colormap(alloc, mid, visual)

        @Arguments:
        - `alloc`:
        - `mid`:
        - `visual`:

        @Return:
        """
        return xcb5.connect(self.display).core.CreateColormapChecked(
            alloc, mid, self.id, visual)

    def listinstalledcolormaps(self, ):
        r"""SUMMARY

        list_installed_colormaps()

        @Return:
        """
        return xcb5.connect(self.display).core.ListInstalledColormapsUnchecked(
            self.id)

    def circulate(self, direction):
        r"""SUMMARY

        circulate(direction)

        @Arguments:
        - `direction`:

        @Return:
        """
        return xcb5.connect(self.display).core.CirculateWindowChecked(
            direction, self.id)

    def changesaveset(self, mode):
        r"""SUMMARY

        change_save_set(mode)

        @Arguments:
        - `mode`:

        @Return:
        """
        return xcb5.connect(self.display).core.ChangeSaveSetChecked(
            mode, self.id)

    def convertselection(self, requestor, selection, property, time):
        r"""SUMMARY

        convert_selection(requestor, selection, property, time)

        @Arguments:
        - `requestor`:
        - `selection`:
        - `property`:
        - `time`:

        @Return:
        """
        return xcb5.connect(self.display).core.ConvertSelectionChecked(
            requestor, selection, self.id, property, time)

    def translatecoordinates(self, dst_window, src_x, src_y):
        r"""SUMMARY

        translatecoordinates(dst_window, src_x, src_y)

        @Arguments:
        - `dst_window`:
        - `src_x`:
        - `src_y`:

        @Return:
        """
        return xcb5.connect(self.display).core.TranslateCoordinatesUnchecked(
            self.id, dst_window, src_x, src_y)

    def getmotionevents(self, start, stop):
        r"""SUMMARY

        get_motion_events(start, stop)

        @Arguments:
        - `start`:
        - `stop`:

        @Return:
        """
        return xcb5.connect(self.display).core.GetMotionEventsUnchecked(
            self.id, start, stop)

    def setinputfocus(self, revert_to, time):
        r"""SUMMARY

        set_input_focus(revert_to, time)

        @Arguments:
        - `revert_to`:
        - `time`:

        @Return:
        """
        return xcb5.connect(self.display).core.SetInputFocusChecked(
            revert_to, self.id, time)

    def setselectionowner(self, owner, time):
        r"""SUMMARY

        set_selection_owner(owner, time)

        @Arguments:
        - `owner`:
        - `time`:

        @Return:
        """
        return xcb5.connect(self.display).core.SetSelectionOwnerChecked(
            owner, self.id, time)

    def sendevent(self, propagate, event_mask, event):
        r"""SUMMARY

        sendevent(propagate, event_mask, event)

        @Arguments:
        - `propagate`:
        - `event_mask`:
        - `event`:

        @Return:
        """
        return xcb5.connect(self.display).core.SendEventChecked(
            propagate, self.id, event_mask, event)

    def map(self, ):
        r"""SUMMARY

        map()

        @Return:
        """
        return xcb5.connect(self.display).core.MapWindowChecked(self.id)

    def mapsubwindows(self, ):
        r"""SUMMARY

        mapsubwindows()

        @Return:
        """
        return xcb5.connect(self.display).core.MapSubwindowsChecked(self.id)

    def unmap(self, ):
        r"""SUMMARY

        unmap()

        @Return:
        """
        return xcb5.connect(self.display).core.UnmapWindowChecked(self.id)

    def unmapsubwindows(self, ):
        r"""SUMMARY

        unmapsubwindows()

        @Return:
        """
        return xcb5.connect(self.display).core.UnmapSubwindowsChecked(self.id)

    def destroy(self, ):
        r"""SUMMARY

        destroy()

        @Return:
        """
        return xcb5.connect(self.display).core.DestroyWindowChecked(self.id)

    def destroysubwindows(self, ):
        r"""SUMMARY

        destroysubwindows()

        @Return:
        """
        return xcb5.connect(self.display).core.DestroySubwindowsChecked(self.id)

    def querytree(self, ):
        r"""SUMMARY

        querytree()

        @Return:
        """
        return xcb5.connect(self.display).core.QueryTreeUnchecked(self.id)

    def getproperty(self, delete, property, type, long_offset, long_length):
        r"""SUMMARY

        getproperty(delete, property, type, long_offset, long_length)

        @Arguments:
        - `delete`:
        - `property`:
        - `type`:
        - `long_offset`:
        - `long_length`:

        @Return:
        """
        return xcb5.connect(self.display).core.GetPropertyUnchecked(
            delete, self.id, property, type, long_offset, long_length)

    def changeproperty(self, mode, property, type, format, data_len, data):
        r"""SUMMARY

        changeproperty(mode, property, type, format, data_len, data)

        @Arguments:
        - `mode`:
        - `property`:
        - `type`:
        - `format`:
        - `data_len`:
        - `data`:

        @Return:
        """
        return xcb5.connect(self.display).core.ChangePropertyChecked(
            mode, self.id, property, type, format, data_len, data)

    def listproperties(self, ):
        r"""SUMMARY

        listproperties()

        @Return:
        """
        return xcb5.connect(self.display).core.ListPropertiesUnchecked(self.id)

    def deleteproperty(self, property):
        r"""SUMMARY

        deleteproperty(property)

        @Arguments:
        - `property`:

        @Return:
        """
        return xcb5.connect(self.display).core.DeletePropertyChecked(
            self.id, property)

    def rotateproperties(self, atoms_len, delta, atoms):
        r"""SUMMARY

        rotateproperties(atoms_len, delta, atoms)

        @Arguments:
        - `atoms_len`:
        - `delta`:
        - `atoms`:

        @Return:
        """
        return xcb5.connect(self.display).core.RotatePropertiesChecked(
            self.id, atoms_len, delta, atoms)

    def grabkeyboard(self, owner_events, time, pointer_mode, keyboard_mode):
        r"""SUMMARY

        grabkeyboard(owner_events, time, pointer_mode, keyboard_mode)

        @Arguments:
        - `owner_events`:
        - `time`:
        - `pointer_mode`:
        - `keyboard_mode`:

        @Return:
        """
        return xcb5.connect(self.display).core.GrabKeyboardUnchecked(
            owner_events, self.id, time, pointer_mode, keyboard_mode)

    def grabkey(self, owner_events, modifiers, key,
                pointer_mode, keyboard_mode):
        r"""SUMMARY

        grabkey(owner_events, modifiers, key, pointer_mode, keyboard_mode)

        @Arguments:
        - `owner_events`:
        - `modifiers`:
        - `key`:
        - `pointer_mode`:
        - `keyboard_mode`:

        @Return:
        """
        return xcb5.connect(self.display).core.GrabKeyChecked(
            owner_events, self.id, modifiers, key, pointer_mode, keyboard_mode)

    def ungrabkey(self, key, modifiers):
        r"""SUMMARY

        ungrabkey(key, modifiers)

        @Arguments:
        - `key`:
        - `modifiers`:

        @Return:
        """
        return xcb5.connect(self.display).core.UngrabKeyChecked(
            key, self.id, modifiers)

    def grabbutton(self, owner_events, event_mask, pointer_mode,
                   keyboard_mode, confine_to, cursor, button, modifiers):
        r"""SUMMARY

        grabbutton(owner_events, event_mask, pointer_mode,
                   keyboard_mode, confine_to, cursor, button, modifiers)

        @Arguments:
        - `owner_events`:
        - `event_mask`:
        - `pointer_mode`:
        - `keyboard_mode`:
        - `confine_to`:
        - `cursor`:
        - `button`:
        - `modifiers`:

        @Return:
        """
        return xcb5.connect(self.display).core.GrabButtonChecked(
            owner_events, self.id, event_mask, pointer_mode,
            keyboard_mode, confine_to, cursor, button, modifiers)

    def ungrabbutton(self, button, modifiers):
        r"""SUMMARY

        ungrabbutton(button, modifiers)

        @Arguments:
        - `button`:
        - `modifiers`:

        @Return:
        """
        return xcb5.connect(self.display).core.UngrabButtonChecked(
            button, self.id, modifiers)

    def grabpointer(self, owner_events, event_mask, pointer_mode,
                    keyboard_mode, confine_to, cursor, time):
        r"""SUMMARY

        grabpointer(owner_events, event_mask, pointer_mode,
                    keyboard_mode, confine_to, cursor, time)

        @Arguments:
        - `owner_events`:
        - `event_mask`:
        - `pointer_mode`:
        - `keyboard_mode`:
        - `confine_to`:
        - `cursor`:
        - `time`:

        @Return:
        """
        return xcb5.connect(self.display).core.GrabPointerUnchecked(
            owner_events, self.id, event_mask, pointer_mode, keyboard_mode,
            confine_to, cursor, time)

    def querypointer(self, ):
        r"""SUMMARY

        querypointer()

        @Return:
        """
        return xcb5.connect(self.display).core.QueryPointerUnchecked(self.id)

    def warppointer(self, dst_window, src_x, src_y, src_width,
                    src_height, dst_x, dst_y):
        r"""SUMMARY

        warppointer(dst_window, src_x, src_y, src_width,
                    src_height, dst_x, dst_y)

        @Arguments:
        - `dst_window`:
        - `src_x`:
        - `src_y`:
        - `src_width`:
        - `src_height`:
        - `dst_x`:
        - `dst_y`:

        @Return:
        """
        return xcb5.connect(self.display).core.WarpPointerChecked(
            self.id, dst_window, src_x, src_y, src_width, src_height,
            dst_x, dst_y)

* Tue 13 Jan 2015 02:32:00 AM JST
from struct import pack as _pack
* Tue 13 Jan 2015 02:32:46 AM JST
    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return _pack('I', self.id)

    def getgeometry(self):
        return xcb5.connect(self.display).core.GetGeometryUnchecked(self)

    def createpixmap(self, depth, pid, width, height):
        return xcb5.connect(self.display).core.CreatePixmapChecked(
            depth, pid, self.id, width, height)

    def creategc(self, cid, value_mask, value_list):
        return xcb5.connect(self.display).core.CreateGCChecked(
            cid, self.id, value_mask, value_list)

    def copyarea(self, gc, dst_drawable, src_x, src_y, width, height,
                  dst_x, dst_y):
        return xcb5.connect(self.display).core.CopyAreaChecked(
            self.id, dst_drawable, gc, src_x, src_y, dst_x, dst_y,
            width, height)

    def copyplane(self, gc, dst_drawable, src_x, src_y, width, height,
                   dst_x, dst_y, bit_plane):
        return xcb5.connect(self.display).core.CopyPlaneChecked(
            self.id, dst_drawable, gc, src_x, src_y, dst_x, dst_y,
            width, height, bit_plane)

    def polypoint(self, coordinate_mode, gc, points_len, points):
        return xcb5.connect(self.display).core.PolyPointChecked(
            coordinate_mode, self.id, gc, points_len, points)

    def polyline(self, coordinate_mode, gc, points_len, points):
        return xcb5.connect(self.display).core.PolyLineChecked(
            coordinate_mode, self.id, gc, points_len, points)

    def polysegment(self, gc, segments_len, segments):
        return xcb5.connect(self.display).core.PolySegmentChecked(
            self.id, gc, segments_len, segments)

    def polyrectangle(self, gc, rectangles_len, rectangles):
        return xcb5.connect(self.display).core.PolyRectangleChecked(
            self.id, gc, rectangles_len, rectangles)

    def polyarc(self, gc, arcs_len, arcs):
        return xcb5.connect(self.display).core.PolyArcChecked(
            self.id, gc, arcs_len, arcs)

    def fillpoly(self, gc, shape, coordinate_mode, points_len, points):
        return xcb5.connect(self.display).core.FillPolyChecked(
            self.id, gc, shape, coordinate_mode, points_len, points)

    def polyfillrectangle(self, gc, rectangles_len, rectangles):
        return xcb5.connect(self.display).core.PolyFillRectangleChecked(
            self.id, gc, rectangles_len, rectangles)

    def polyfillarc(self, gc, arcs_len, arcs):
        return xcb5.connect(self.display).core.PolyFillArcChecked(
            self.id, gc, arcs_len, arcs)

    def putimage(self, format, gc, width, height, dst_x, dst_y, left_pad,
                  depth, data_len, data):
        return xcb5.connect(self.display).core.PutImageChecked(
            format, self.id, gc, width, height, dst_x, dst_y, left_pad,
            depth, data_len, data)

    def getimage(self, format, x, y, width, height, plane_mask):
        return xcb5.connect(self.display).core.GetImageUnchecked(
            format, self.id, x, y, width, height, plane_mask)

    def polytext8(self, gc, x, y, items_len, items):
        return xcb5.connect(self.display).core.PolyText8Checked(
            self.id, gc, x, y, items_len, items)

    def polytext16(self, gc, x, y, items_len, items):
        return xcb5.connect(self.display).core.PolyText16Checked(
            self.id, gc, x, y, items_len, items)

    def imagetext8(self, string_len, gc, x, y, string):
        return xcb5.connect(self.display).core.ImageText8Checked(
            string_len, self.id, gc, x, y, string)

    def imagetext16(self, string_len, gc, x, y, string):
        return xcb5.connect(self.display).core.ImageText16Checked(
            string_len, self.id, gc, x, y, string)

    def querybestsize(self, _class, width, height):
        return xcb5.connect(self.display).core.QueryBestSizeUnchecked(
            _class, self.id, width, height)

* Tue 13 Jan 2015 02:36:57 AM JST
_window
* Tue 13 Jan 2015 02:48:36 AM JST
from userint import UserInt


class Keycode(UserInt):
    """Class Keycode
    """
    # Operations
    def set(self, value):
        """function set

        value: int

        returns None
        """
        integer = int(value)
        if integer < 8 or 255 < integer:
            # TODO: (Atami) [2014/12/29]
            raise StandardError('range error {}'.format(integer))
        super(Keycode, self).set(value)

* Tue 13 Jan 2015 02:49:31 AM JST
impor
* Tue 13 Jan 2015 02:49:32 AM JST
_window
* Tue 13 Jan 2015 02:49:32 AM JST
as _window
* Tue 13 Jan 2015 02:49:33 AM JST
window as _window
* Tue 13 Jan 2015 02:50:05 AM JST
_keycode.Keycode
* Tue 13 Jan 2015 03:04:59 AM JST
atom
* Tue 13 Jan 2015 03:05:34 AM JST
GetAtomName?
* Tue 13 Jan 2015 03:05:44 AM JST
GetAtomNameUnchecked
* Tue 13 Jan 2015 03:07:05 AM JST
xcb
* Tue 13 Jan 2015 03:08:44 AM JST
self.
* Tue 13 Jan 2015 03:09:10 AM JST
return _xconn.connect(self.display).core.GetAtomName(self._atom)
* Tue 13 Jan 2015 03:14:36 AM JST
 as _xconn
* Tue 13 Jan 2015 03:14:46 AM JST
_xconn.connect
* Tue 13 Jan 2015 03:15:59 AM JST
ection as _xconnection
* Tue 13 Jan 2015 03:16:26 AM JST
_xconnection
* Tue 13 Jan 2015 03:16:34 AM JST
            
* Tue 13 Jan 2015 03:16:56 AM JST
ection as _xconn
* Tue 13 Jan 2015 03:18:33 AM JST
ection as _xconn
* Tue 13 Jan 2015 03:18:51 AM JST
from wxcb.protocol.xproto.getatomname import GetAtomName
* Tue 13 Jan 2015 03:21:31 AM JST
*args, **kwargs
* Tue 13 Jan 2015 03:21:40 AM JST
kwargs
* Tue 13 Jan 2015 03:28:25 AM JST

* Tue 13 Jan 2015 03:28:25 AM JST

* Tue 13 Jan 2015 03:28:25 AM JST
        print(args)

* Tue 13 Jan 2015 03:28:25 AM JST
        print(args)

* Tue 13 Jan 2015 03:28:25 AM JST
        print(args)
        print(kwargs)

* Tue 13 Jan 2015 03:53:43 AM JST
xobj/
* Tue 13 Jan 2015 04:08:48 AM JST
self
* Tue 13 Jan 2015 04:10:02 AM JST

* Tue 13 Jan 2015 04:10:02 AM JST

* Tue 13 Jan 2015 04:10:02 AM JST
        return 0

* Tue 13 Jan 2015 04:10:08 AM JST
isinsta
* Tue 13 Jan 2015 04:12:14 AM JST
    def __str__(self, ):
        return self.name


* Tue 13 Jan 2015 04:13:09 AM JST
key
* Tue 13 Jan 2015 04:13:20 AM JST
    def __hash__(self, ):
        return hash(self.name)


* Tue 13 Jan 2015 04:13:26 AM JST
    def __repr__(self, ):
        return repr(self.name)

* Tue 13 Jan 2015 04:24:40 AM JST
object
* Tue 13 Jan 2015 04:24:43 AM JST
Atom
* Tue 13 Jan 2015 04:25:32 AM JST
        return wxcb.conn.connect(self.display).core.GetAtomNameUnchecked(
            self._atom)

* Tue 13 Jan 2015 04:29:49 AM JST
reply()
* Tue 13 Jan 2015 04:29:49 AM JST
5).reply()
* Tue 13 Jan 2015 04:30:08 AM JST
self.
* Tue 13 Jan 2015 04:34:04 AM JST
self._rawcookie.reply()
* Tue 13 Jan 2015 04:34:42 AM JST
wxcb.conn.connect(self.display).core.GetAtomName(self._atom)
* Tue 13 Jan 2015 04:34:59 AM JST
WrapGetAtomNameCookie
* Tue 13 Jan 2015 04:35:07 AM JST
            
* Tue 13 Jan 2015 04:35:11 AM JST
            
* Tue 13 Jan 2015 04:35:41 AM JST
from wxcb.protocol.xproto.getatomname import GetAtomName
* Tue 13 Jan 2015 04:35:56 AM JST
coo=GetAtomName(5, ':0.0').send()
* Tue 13 Jan 2015 04:38:56 AM JST
name)
* Tue 13 Jan 2015 04:38:56 AM JST
self.name)
* Tue 13 Jan 2015 04:38:56 AM JST
repr(self.name)
* Tue 13 Jan 2015 04:52:33 AM JST
User
* Tue 13 Jan 2015 04:54:30 AM JST
atom
* Tue 13 Jan 2015 04:55:15 AM JST
from wxcb.protocol.xproto.getatomname import GetAtomName

* Tue 13 Jan 2015 04:55:19 AM JST
coo=GetAtomName(5, ':0.0').send()
* Tue 13 Jan 2015 04:55:25 AM JST
rep=coo.reply()
* Tue 13 Jan 2015 04:55:33 AM JST
GetAtomName(5, ':0.0')
* Tue 13 Jan 2015 05:02:56 AM JST
len(self.name)
* Tue 13 Jan 2015 05:15:18 AM JST
atom
* Tue 13 Jan 2015 05:17:05 AM JST
import wxcb.xobj.display as _display
* Tue 13 Jan 2015 05:17:13 AM JST
import wxcb.conn
* Tue 13 Jan 2015 05:17:59 AM JST
import wxcb.xobj.atomname as _atomname
* Tue 13 Jan 2015 05:19:11 AM JST
set
* Tue 13 Jan 2015 05:20:11 AM JST
_
* Tue 13 Jan 2015 05:20:12 AM JST
self._
* Tue 13 Jan 2015 05:20:37 AM JST
import
* Tue 13 Jan 2015 05:21:20 AM JST
self.display = _display.Display(display)
* Tue 13 Jan 2015 05:27:48 AM JST
only_if_exists
* Tue 13 Jan 2015 05:30:48 AM JST
InternAtom
* Tue 13 Jan 2015 05:30:57 AM JST
Fals
* Tue 13 Jan 2015 05:35:37 AM JST
str(buffer
* Tue 13 Jan 2015 05:36:47 AM JST
self.get_atomname()
* Tue 13 Jan 2015 05:39:14 AM JST
    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:

        @Error:
        """
        return WrapGetAtomNameReply(self._rawcookie.reply())

* Tue 13 Jan 2015 05:40:29 AM JST
WrapInternAtomReply
* Tue 13 Jan 2015 05:41:46 AM JST
from wxcb.protocol.xproto.internatom import InternAtom
* Tue 13 Jan 2015 05:41:52 AM JST
from wxcb.protocol.xproto.internatom import InternAtom
i=InternAtom(True, 'BITMAP')

* Tue 13 Jan 2015 05:41:58 AM JST
coo=i.send()
rep=coo.reply()

* Tue 13 Jan 2015 05:42:18 AM JST
from wxcb.protocol.xproto.internatom import InternAtom
i=InternAtom(True, 'BITMAP')
coo=i.send()
rep=coo.reply()

* Tue 13 Jan 2015 05:42:37 AM JST
WrapInternAtomCookie
* Tue 13 Jan 2015 05:48:49 AM JST
object
* Tue 13 Jan 2015 05:49:16 AM JST
object
* Tue 13 Jan 2015 05:49:21 AM JST
Wra
* Tue 13 Jan 2015 05:51:47 AM JST
from wxcb.protocol.xproto.internatom import InternAtom
i=InternAtom(True, 'BITMAP')
coo=i.send()
rep=coo.reply()

* Tue 13 Jan 2015 05:55:55 AM JST
import wxcb.conn
import wxcb.xobj.display as _display

* Tue 13 Jan 2015 05:56:16 AM JST

* Tue 13 Jan 2015 05:56:16 AM JST

* Tue 13 Jan 2015 05:56:16 AM JST
import _abstract

* Tue 13 Jan 2015 05:57:52 AM JST
self.display = _display.Display(display)
* Tue 13 Jan 2015 05:25:46 PM JST
white = 
* Tue 13 Jan 2015 05:25:53 PM JST
cooooonn
* Tue 13 Jan 2015 05:29:02 PM JST
depth = setup.roots[0].root_depth
visual = setup.roots[0].root_visual
* Tue 13 Jan 2015 05:29:26 PM JST
window = conn.generate_id()
* Tue 13 Jan 2015 05:30:30 PM JST
CW.BackPixel | CW.EventMask,
* Tue 13 Jan 2015 05:30:40 PM JST
[ white, EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure ]
* Tue 13 Jan 2015 05:30:52 PM JST
[ white,
* Tue 13 Jan 2015 05:31:28 PM JST
import xcb
from xcb.xproto import *

conn = xcb.connect()
setup = conn.get_setup()
root = setup.roots[0].root
white = setup.roots[0].white_pixel
depth = setup.roots[0].root_depth
visual = setup.roots[0].root_visual
window = conn.generate_id()

* Tue 13 Jan 2015 05:31:36 PM JST
conn.core.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                       WindowClass.InputOutput,
                       visual, CW.BackPixel | CW.EventMask,
                       [ white, EventMask.ButtonPress | EventMask.EnterWindow |
                         EventMask.LeaveWindow | EventMask.Exposure ])
conn.flush()

* Tue 13 Jan 2015 05:32:43 PM JST
window = conn.generate_id()
* Tue 13 Jan 2015 05:33:06 PM JST
import xcb
from xcb.xproto import *

conn = xcb.connect()
setup = conn.get_setup()
root = setup.roots[0].root
white = setup.roots[0].white_pixel
depth = setup.roots[0].root_depth
visual = setup.roots[0].root_visual
window = conn.generate_id()

conn.core.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                       WindowClass.InputOutput,
                       visual, CW.BackPixel | CW.EventMask,
                       [ white, EventMask.ButtonPress | EventMask.EnterWindow |
                         EventMask.LeaveWindow | EventMask.Exposure ])

* Tue 13 Jan 2015 05:34:14 PM JST
send
* Tue 13 Jan 2015 05:35:10 PM JST
None
* Tue 13 Jan 2015 05:39:01 PM JST
packet
* Tue 13 Jan 2015 05:40:08 PM JST
_display.Display(display)
* Tue 13 Jan 2015 05:41:58 PM JST
self.
* Tue 13 Jan 2015 05:43:20 PM JST
_packet
* Tue 13 Jan 2015 05:43:43 PM JST
get_code
* Tue 13 Jan 2015 05:45:09 PM JST
xcb
* Tue 13 Jan 2015 05:47:00 PM JST
reply
* Tue 13 Jan 2015 05:47:06 PM JST
get_cookie()
* Tue 13 Jan 2015 05:47:16 PM JST
get_binary()
* Tue 13 Jan 2015 05:47:19 PM JST
get_extcode()
* Tue 13 Jan 2015 05:48:41 PM JST
return
* Tue 13 Jan 2015 05:48:44 PM JST
        return wxcb.conn.connect(self.display).core.send_request(
            xcb.Request(self.binary, self.extcode, True, False),
            self.cookie, self.reply)

* Tue 13 Jan 2015 05:48:57 PM JST
False
* Tue 13 Jan 2015 05:49:37 PM JST
return 
* Tue 13 Jan 2015 05:49:40 PM JST
        return wxcb.conn.connect(self.display).core.send_request(
            xcb.Request(self.binary, self.extcode, True, True),
            self.cookie, self.reply)

* Tue 13 Jan 2015 05:57:21 PM JST
class Packet(object):
    r"""Packet
    
    Packet is a object.
    Responsibility: 
    """
    __metaclass__ = ABCMeta

    @abstractmethod
    def get_binary(self, ):
        pass

    @abstractmethod
    def get_extcode(self, ):
        pass

    @abstractmethod
    def get_cookie(self, ):
        pass

    @abstractmethod
    def get_reply(self, ):
        pass


* Tue 13 Jan 2015 05:57:35 PM JST
from abc import ABCMeta, abstractmethod


* Tue 13 Jan 2015 06:20:47 PM JST
pass
* Tue 13 Jan 2015 06:20:50 PM JST

* Tue 13 Jan 2015 06:20:50 PM JST

* Tue 13 Jan 2015 06:20:50 PM JST
    @abstractmethod

* Tue 13 Jan 2015 06:21:41 PM JST
self._packet.wrap(
* Tue 13 Jan 2015 06:22:22 PM JST
class WrapGetAtomNameReply(_abstract.WrapReplyAbstract):
    r"""WrapGetAtomNameReply

    WrapGetAtomNameReply is a object.
    Responsibility:
    """
    @property
    def name(self, ):
        r"""SUMMARY

        name()

        @Return:

        @Error:
        """
        return _atomname.AtomName(str(self._rawreply.name.buf()))

    @property
    def name_len(self, ):
        r"""SUMMARY

        name_len()

        @Return:

        @Error:
        """
        return self._rawreply.name_len



* Tue 13 Jan 2015 06:22:42 PM JST
import wxcb.xobj.atomname as _atomname
* Tue 13 Jan 2015 06:22:52 PM JST
import _abstract
* Tue 13 Jan 2015 06:22:59 PM JST
class WrapReplyAbstract(object):
    r"""WrapReplyAbstract

    WrapReplyAbstract is a object.
    Responsibility:
    """
    def __init__(self, rawreply):
        r"""

        @Arguments:
        - `rawreply`:
        """
        self._rawreply = rawreply



* Tue 13 Jan 2015 06:23:09 PM JST
_abstract.
* Tue 13 Jan 2015 06:23:32 PM JST
class WrapCookieAbstract(object):
    r"""WrapCookieAbstract

    WrapCookieAbstract is a object.
    Responsibility:
    """
    def __init__(self, rawcookie):
        r"""

        @Arguments:
        - `rawcookie`:
        """
        self._rawcookie = rawcookie

    def check(self, ):
        r"""SUMMARY

        check()

        @Return:

        @Error:
        """
        return self._rawcookie.check()

* Tue 13 Jan 2015 06:23:54 PM JST
class WrapGetAtomNameCookie(_abstract.WrapCookieAbstract):
    r"""WrapGetAtomNameCookie

    WrapGetAtomNameCookie is a object.
    Responsibility:
    """
    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:

        @Error:
        """
        return WrapGetAtomNameReply(self._rawcookie.reply())



* Tue 13 Jan 2015 06:24:01 PM JST
_abstract.
* Tue 13 Jan 2015 06:24:32 PM JST
_cookie
* Tue 13 Jan 2015 06:24:35 PM JST
cookie
* Tue 13 Jan 2015 06:24:38 PM JST
_cookie
* Tue 13 Jan 2015 06:26:30 PM JST
atom
* Tue 13 Jan 2015 06:26:40 PM JST
    def get_atom(self, ):
        r"""SUMMARY

        get_atom()

        @Return:

        @Error:
        """
        return self._atom

    def set_atom(self, atom):
        r"""SUMMARY

        set_atom(atom)

        @Arguments:
        - `atom`:

        @Return:

        @Error:
        """
        self._atom = _atom.Atom(atom)

    atom = property(get_atom, set_atom)


* Tue 13 Jan 2015 06:26:49 PM JST
import wxcb.xobj.atom as _atom
* Tue 13 Jan 2015 06:27:06 PM JST
self.set_atom(atom)
* Tue 13 Jan 2015 06:29:29 PM JST
_
* Tue 13 Jan 2015 06:29:30 PM JST
self._
* Tue 13 Jan 2015 06:30:40 PM JST
'=xx2x'
* Tue 13 Jan 2015 06:33:23 PM JST
xcb.xproto
* Tue 13 Jan 2015 06:36:12 PM JST
def
* Tue 13 Jan 2015 06:37:21 PM JST
Wrap
* Tue 13 Jan 2015 06:37:21 PM JST
xproto.Wrap
* Tue 13 Jan 2015 06:37:22 PM JST
xcb.xproto.Wrap
* Tue 13 Jan 2015 06:37:56 PM JST
def
* Tue 13 Jan 2015 10:18:04 PM JST
kwargs
* Tue 13 Jan 2015 10:18:24 PM JST
self.display
* Tue 13 Jan 2015 11:32:59 PM JST
packets
* Tue 13 Jan 2015 11:33:33 PM JST
Request
* Tue 13 Jan 2015 11:33:39 PM JST
GetAtomNamePacket
* Tue 13 Jan 2015 11:37:10 PM JST
reply()
* Tue 13 Jan 2015 11:39:53 PM JST
check()
* Tue 13 Jan 2015 11:46:07 PM JST
c.core.send_request(xcb.Request())
* Tue 13 Jan 2015 11:47:40 PM JST
c.core.send_request(xcb.Request(pack('=xx2xI', 5), 17, False, True))
* Tue 13 Jan 2015 11:48:26 PM JST
packets
* Tue 13 Jan 2015 11:48:46 PM JST
Request
* Tue 13 Jan 2015 11:53:35 PM JST
~/.pylib/wxcb/protocol/xproto/
* Tue 13 Jan 2015 11:57:50 PM JST
~/work/
* Wed 14 Jan 2015 12:09:21 AM JST
libxcb1-dev
* Wed 14 Jan 2015 12:11:25 AM JST
/usr/lib/python2.7/dist-packages/xcb
* Wed 14 Jan 2015 12:14:53 AM JST
xcb.Request
* Wed 14 Jan 2015 12:18:39 AM JST
hisg "apt-get install" GG xcb
* Wed 14 Jan 2015 12:21:51 AM JST
ext
* Wed 14 Jan 2015 12:21:58 AM JST
ext
* Wed 14 Jan 2015 01:11:01 AM JST
from cStringIO import StringIO as _StringIO
* Wed 14 Jan 2015 01:11:05 AM JST
from struct import pack as _pack
* Wed 14 Jan 2015 01:11:19 AM JST
import wxcb.xobj.atom as _atom
* Wed 14 Jan 2015 01:11:57 AM JST
atom
* Wed 14 Jan 2015 01:12:08 AM JST
    def get_atom(self, ):
        r"""SUMMARY

        get_atom()

        @Return:

        @Error:
        """
        return self._atom

    def set_atom(self, atom):
        r"""SUMMARY

        set_atom(atom)

        @Arguments:
        - `atom`:

        @Return:

        @Error:
        """
        self._atom = _atom.Atom(atom)

    atom = property(get_atom, set_atom)

* Wed 14 Jan 2015 01:19:29 AM JST
only_if_exists
* Wed 14 Jan 2015 01:19:31 AM JST
atomname
* Wed 14 Jan 2015 01:19:44 AM JST
    def get_atomname(self, ):
        r"""SUMMARY

        get()

        @Return:

        @Error:
        """
        return self._atomname

    def set_atomname(self, atomname):
        r"""SUMMARY

        set(atom)

        @Arguments:
        - `atom`:

        @Return:

        @Error:
        """
        self._atomname = _atomname.AtomName(atomname)


* Wed 14 Jan 2015 01:19:50 AM JST
import wxcb.xobj.atomname as _atomname
* Wed 14 Jan 2015 01:20:07 AM JST
atomname = property(get_atomname, set_atomname)
* Wed 14 Jan 2015 01:20:17 AM JST
    def get_only_if_exists(self, ):
        r"""SUMMARY

        get_only_if_exists()

        @Return:

        @Error:
        """
        return self._only_if_exists

    def set_only_if_exists(self, val):
        r"""SUMMARY

        set_only_if_exists(val)

        @Arguments:
        - `val`:

        @Return:

        @Error:
        """
        self._only_if_exists = bool(val)

    only_if_exists = property(get_only_if_exists, set_only_if_exists)

* Wed 14 Jan 2015 01:20:42 AM JST
    def get_length(self, ):
        r"""SUMMARY

        get_length()

        @Return:

        @Error:
        """
        return self.atomname.get_length()

    def send(self, ):

* Wed 14 Jan 2015 01:20:45 AM JST
    def get_length(self, ):
        r"""SUMMARY

        get_length()

        @Return:

        @Error:
        """
        return self.atomname.get_length()


* Wed 14 Jan 2015 01:21:34 AM JST
    def __len__(self):
        return self.get_length()

* Wed 14 Jan 2015 01:21:58 AM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 01:22:51 AM JST
'=xB2xH2x'
* Wed 14 Jan 2015 01:23:35 AM JST
size
* Wed 14 Jan 2015 01:26:46 AM JST
InternAtom
* Wed 14 Jan 2015 01:26:46 AM JST
core.InternAtom
* Wed 14 Jan 2015 01:26:46 AM JST
xcb2.core.InternAtom
* Wed 14 Jan 2015 01:28:19 AM JST
'\x00\x00\x00\x00\x06\x00\x00\x00BITMAP'
* Wed 14 Jan 2015 01:30:20 AM JST
import
* Wed 14 Jan 2015 01:34:54 AM JST
get_buffer()
* Wed 14 Jan 2015 01:37:02 AM JST
name
* Wed 14 Jan 2015 01:37:27 AM JST
'\x00\x00\x00\x00\x06\x00\x00\x00BITMAP'
* Wed 14 Jan 2015 01:44:34 AM JST
class GetAtomNameBuffer(object):
    r"""GetAtomNameBuffer

    GetAtomNameBuffer is a object.
    Responsibility:

    option code: 17
    """
    def __init__(self, atom):
        r"""

        @Arguments:
        - `atom`:
        """
        self._atom = None
        self.set_atom(atom)

    def get_atom(self, ):
        r"""SUMMARY

        get_atom()

        @Return:

        @Error:
        """
        return self._atom

    def set_atom(self, atom):
        r"""SUMMARY

        set_atom(atom)

        @Arguments:
        - `atom`:

        @Return:

        @Error:
        """
        self._atom = _atom.Atom(atom)

    atom = property(get_atom, set_atom)

    def get_buffer(self, ):
        r"""SUMMARY

        get_buffer()

        @Return:

        @Error:
        """
        buf = _StringIO()
        buf.write(_pack('=xx2x'))
        buf.write(self.atom.pack())
        return buf.getvalue()

    def __str__(self):
        return self.get_buffer()



* Wed 14 Jan 2015 03:23:23 AM JST
Window
* Wed 14 Jan 2015 03:23:23 AM JST
_window.Window
* Wed 14 Jan 2015 03:23:31 AM JST

* Wed 14 Jan 2015 03:23:31 AM JST

* Wed 14 Jan 2015 03:23:31 AM JST
import wxcb.xobj.window as _window

* Wed 14 Jan 2015 03:27:23 AM JST
xahk2
* Wed 14 Jan 2015 03:27:28 AM JST
xahk2
* Wed 14 Jan 2015 03:28:01 AM JST
from wxcb.xobj.dimension import Dimension

* Wed 14 Jan 2015 03:30:05 AM JST
from . 
* Wed 14 Jan 2015 03:30:39 AM JST
from . 
* Wed 14 Jan 2015 03:32:59 AM JST

* Wed 14 Jan 2015 03:33:00 AM JST
_atomname
* Wed 14 Jan 2015 03:33:00 AM JST
as _atomname
* Wed 14 Jan 2015 03:33:01 AM JST
atomname as _atomname
* Wed 14 Jan 2015 03:37:08 AM JST
window
* Wed 14 Jan 2015 03:37:12 AM JST
window
* Wed 14 Jan 2015 03:37:15 AM JST
window
* Wed 14 Jan 2015 03:48:18 AM JST
parent
* Wed 14 Jan 2015 03:57:41 AM JST
get_vlaue
* Wed 14 Jan 2015 03:57:51 AM JST
mask
* Wed 14 Jan 2015 03:57:55 AM JST
mask
* Wed 14 Jan 2015 03:59:21 AM JST
root_depth
* Wed 14 Jan 2015 04:01:52 AM JST
from xcb.xproto import *
* Wed 14 Jan 2015 04:01:57 AM JST
WindowClass.InputOutput
* Wed 14 Jan 2015 04:02:03 AM JST
_class
* Wed 14 Jan 2015 04:11:50 AM JST
slf
* Wed 14 Jan 2015 04:12:12 AM JST
sldf.
* Wed 14 Jan 2015 04:18:25 AM JST
    def get_depth(self, ):
        r"""SUMMARY

        get_depth()

        @Return:

        @Error:
        """
        return self._depth

    def set_depth(self, depth):
        r"""SUMMARY

        set_depth(depth)

        @Arguments:
        - `depth`:

        @Return:

        @Error:
        """
        self._depth = int(depth)

    def get_id(self, ):
        r"""SUMMARY

        get_id()

        @Return:

        @Error:
        """
        return self._wid

    def set_id(self, wid):
        r"""SUMMARY

        set_window(window)

        @Arguments:
        - `wid`:

        @Return:

        @Error:
        """
        self._wid = int(wid)

    def get_parent(self, ):
        r"""SUMMARY

        get_parent()

        @Return:

        @Error:
        """
        return self._parent

    def set_parent(self, parent):
        r"""SUMMARY

        set_parent(parent)

        @Arguments:
        - `parent`:

        @Return:

        @Error:
        """
        self._parent = int(parent)

* Wed 14 Jan 2015 04:18:52 AM JST
    def get_x(self, ):
        r"""SUMMARY

        get_x()

        @Return:

        @Error:
        """
        return self._rectangle.get_x()

    def set_x(self, newx):
        r"""SUMMARY

        set_x(newx)

        @Arguments:
        - `newx`:

        @Return:

        @Error:
        """
        self._rectangle.set_x(newx)


* Wed 14 Jan 2015 04:19:09 AM JST
    def get_y(self, ):
        r"""SUMMARY

        get_y()

        @Return:

        @Error:
        """
        return self._rectangle.get_y()

    def set_y(self, newy):
        r"""SUMMARY

        set_y(newy)

        @Arguments:
        - `newy`:

        @Return:

        @Error:
        """
        self._rectangle.set_y(newy)


* Wed 14 Jan 2015 04:19:22 AM JST
    def get_width(self, ):
        r"""SUMMARY

        get_width()

        @Return:

        @Error:
        """
        return self._rectangle.get_width()

    def set_width(self, width):
        r"""SUMMARY

        set_width(width)

        @Arguments:
        - `width`:

        @Return:

        @Error:
        """
        self._rectangle.set_width(width)


* Wed 14 Jan 2015 04:26:14 AM JST
'=xB2xIIhhHHHHII'
* Wed 14 Jan 2015 04:27:32 AM JST
self.value_list
* Wed 14 Jan 2015 04:31:18 AM JST
get_va
* Wed 14 Jan 2015 04:31:34 AM JST
_vlaue_
* Wed 14 Jan 2015 04:31:57 AM JST
get_vlaue_
* Wed 14 Jan 2015 04:35:28 AM JST
self.
* Wed 14 Jan 2015 04:36:09 AM JST
'=xx2xII'
* Wed 14 Jan 2015 04:36:31 AM JST
buf.write(str(buffer(_array('I', value_list))))
* Wed 14 Jan 2015 04:36:49 AM JST
self.
* Wed 14 Jan 2015 04:43:00 AM JST
'=xx2xI', window
* Wed 14 Jan 2015 04:45:29 AM JST
class GetWindowAttributesBuffer(object):
    r"""GetWindowAttributesBuffer

    GetWindowAttributesBuffer is a object.
    Responsibility:
    """
    def __init__(self, window):
        r"""

        @Arguments:
        - `window`:
        """
        self._window = window

    def get_window(self, ):
        r"""SUMMARY

        get_window()

        @Return:

        @Error:
        """
        return self._window

    def set_window(self, window):
        r"""SUMMARY

        set_window(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        self._window = int(window)

    window = property(get_window, set_window)

    def get_buffer(self, ):
        r"""SUMMARY

        get_buffer()

        @Return:

        @Error:
        """
        buf = _StringIO()
        buf.write(_pack('=xx2xI', self.window))
        return buf.get_value()

    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 04:45:44 AM JST
GetWindowAttributes
* Wed 14 Jan 2015 04:45:55 AM JST
GetWindowAttributes
* Wed 14 Jan 2015 04:45:58 AM JST
DestroyWindow
* Wed 14 Jan 2015 04:46:50 AM JST
class GetWindowAttributesBuffer(object):
    r"""GetWindowAttributesBuffer

    GetWindowAttributesBuffer is a object.
    Responsibility:
    """
    def __init__(self, window):
        r"""

        @Arguments:
        - `window`:
        """
        self._window = window

    def get_window(self, ):
        r"""SUMMARY

        get_window()

        @Return:

        @Error:
        """
        return self._window

    def set_window(self, window):
        r"""SUMMARY

        set_window(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        self._window = int(window)

    window = property(get_window, set_window)

    def get_buffer(self, ):
        r"""SUMMARY

        get_buffer()

        @Return:

        @Error:
        """
        buf = _StringIO()
        buf.write(_pack('=xx2xI', self.window))
        return buf.get_value()

    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 04:47:23 AM JST
_WindowBuffer
* Wed 14 Jan 2015 04:54:26 AM JST
'=xB2xI', mode, window
* Wed 14 Jan 2015 04:56:41 AM JST
import
* Wed 14 Jan 2015 04:56:41 AM JST
_rectangle
* Wed 14 Jan 2015 04:56:42 AM JST
as _rectangle
* Wed 14 Jan 2015 04:56:43 AM JST
rectangle as _rectangle
* Wed 14 Jan 2015 04:57:27 AM JST

* Wed 14 Jan 2015 04:57:27 AM JST

* Wed 14 Jan 2015 04:57:27 AM JST
        self._x = x

* Wed 14 Jan 2015 04:57:28 AM JST
        self._x = x

* Wed 14 Jan 2015 04:57:28 AM JST
        self._x = x
        self._y = y

* Wed 14 Jan 2015 04:59:23 AM JST
get_
* Wed 14 Jan 2015 05:01:44 AM JST
return 
* Wed 14 Jan 2015 05:02:40 AM JST
'=xx2xIIhh', window, parent, x, y)
* Wed 14 Jan 2015 05:03:00 AM JST
self.
* Wed 14 Jan 2015 05:11:28 AM JST
    def get_window(self, ):
        r"""SUMMARY

        get_window()

        @Return:

        @Error:
        """
        return self._window

    def set_window(self, window):
        r"""SUMMARY

        set_window(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        self._window = int(window)

    window = property(get_window, set_window)


* Wed 14 Jan 2015 05:12:19 AM JST
'=xx2xIH2x', window, value_mask
* Wed 14 Jan 2015 05:12:32 AM JST
buf.write(str(buffer(_array('I', value_list))))
* Wed 14 Jan 2015 05:16:59 AM JST
    def get_window(self, ):
        r"""SUMMARY

        get_window()

        @Return:

        @Error:
        """
        return self._window

    def set_window(self, window):
        r"""SUMMARY

        set_window(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        self._window = int(window)

    window = property(get_window, set_window)


* Wed 14 Jan 2015 05:19:24 AM JST
'=xB2xI', direction, window
* Wed 14 Jan 2015 05:19:45 AM JST
self
* Wed 14 Jan 2015 05:22:42 AM JST
'=xx2xI', drawable
* Wed 14 Jan 2015 05:23:56 AM JST
def
* Wed 14 Jan 2015 10:14:31 PM JST
_
* Wed 14 Jan 2015 10:14:32 PM JST
self
* Wed 14 Jan 2015 10:14:58 PM JST
$1
* Wed 14 Jan 2015 10:15:21 PM JST
$2
* Wed 14 Jan 2015 10:20:22 PM JST
'=xB2xIIIB3xI', mode, window, property, type, format, data_len
* Wed 14 Jan 2015 10:25:14 PM JST
'=xx2xII', window, property
* Wed 14 Jan 2015 10:27:49 PM JST
de
* Wed 14 Jan 2015 10:30:01 PM JST
'=xB2xIIIII', delete, window, property, type, long_offset, long_length
* Wed 14 Jan 2015 10:30:11 PM JST
lsef.
* Wed 14 Jan 2015 10:35:49 PM JST
'=xx2xIII', owner, selection, time
* Wed 14 Jan 2015 10:36:08 PM JST
defstr
* Wed 14 Jan 2015 10:36:14 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 10:37:36 PM JST
_pack('=xx2xI', selection)
* Wed 14 Jan 2015 10:37:44 PM JST
buf
* Wed 14 Jan 2015 10:39:44 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 10:42:10 PM JST
'=xx2xIIIII', requestor, selection, target, property, time
* Wed 14 Jan 2015 10:42:45 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 10:51:28 PM JST
'=xB2xII', propagate, destination, event_mask
* Wed 14 Jan 2015 10:51:59 PM JST
buf.write(str(buffer(_array('b', event))))
* Wed 14 Jan 2015 10:52:20 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 10:52:38 PM JST
owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time
* Wed 14 Jan 2015 10:57:32 PM JST
'=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time
* Wed 14 Jan 2015 10:58:18 PM JST
self.
* Wed 14 Jan 2015 10:58:30 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 10:59:38 PM JST
buf.
* Wed 14 Jan 2015 10:59:49 PM JST
'=xx2xI', time
* Wed 14 Jan 2015 11:00:06 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 11:05:23 PM JST
owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers
* Wed 14 Jan 2015 11:08:17 PM JST
event
* Wed 14 Jan 2015 11:11:57 PM JST
grab_window
* Wed 14 Jan 2015 11:12:15 PM JST
    def get_owner_events(self, ):
        r"""SUMMARY

        get_owner_events()

        @Return:

        @Error:
        """
        return self._owner_events

    def set_owner_events(self, owner_events):
        r"""SUMMARY

        set_owner_events(owner_events)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._owner_events = owner_events

    owner_events = property(get_owner_events, set_owner_events)


* Wed 14 Jan 2015 11:13:12 PM JST
'=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers
* Wed 14 Jan 2015 11:13:20 PM JST
self.
* Wed 14 Jan 2015 11:14:00 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 11:14:29 PM JST
button, grab_window, modifiers
* Wed 14 Jan 2015 11:16:15 PM JST
'=xB2xIH2x', button, grab_window, modifiers
* Wed 14 Jan 2015 11:16:34 PM JST
buf.
* Wed 14 Jan 2015 11:16:56 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 11:31:28 PM JST
ChangeActivePointerGrab
* Wed 14 Jan 2015 11:31:48 PM JST
cursor, time, event_mask
* Wed 14 Jan 2015 11:32:54 PM JST
'=xx2xIIH2x', cursor, time, event_mask
* Wed 14 Jan 2015 11:34:00 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 11:34:10 PM JST
GrabKeyboard
* Wed 14 Jan 2015 11:34:21 PM JST
owner_events, grab_window, time, pointer_mode, keyboard_mode
* Wed 14 Jan 2015 11:36:10 PM JST
'=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode
* Wed 14 Jan 2015 11:36:40 PM JST
self.
* Wed 14 Jan 2015 11:36:50 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 11:37:02 PM JST
UngrabKeyboard
* Wed 14 Jan 2015 11:37:55 PM JST
'=xx2xI', time
* Wed 14 Jan 2015 11:38:08 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 11:39:07 PM JST
GrabKey
* Wed 14 Jan 2015 11:39:20 PM JST
owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode
* Wed 14 Jan 2015 11:42:10 PM JST
'=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode
* Wed 14 Jan 2015 11:42:41 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 11:43:03 PM JST
key, grab_window, modifiers
* Wed 14 Jan 2015 11:44:32 PM JST
'=xB2xIH2x', key, grab_window, modifiers
* Wed 14 Jan 2015 11:44:54 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 11:45:49 PM JST
AllowEvents
* Wed 14 Jan 2015 11:45:58 PM JST
mode, time
* Wed 14 Jan 2015 11:46:51 PM JST
'=xB2xI', mode, time
* Wed 14 Jan 2015 11:47:23 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 11:48:33 PM JST
GrabServer
* Wed 14 Jan 2015 11:48:44 PM JST
definit
* Wed 14 Jan 2015 11:49:12 PM JST
'=xx2x'
* Wed 14 Jan 2015 11:49:27 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 11:49:44 PM JST
UngrabServer
* Wed 14 Jan 2015 11:50:14 PM JST
'=xx2x', 
* Wed 14 Jan 2015 11:50:26 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 11:50:48 PM JST
QueryPointer
* Wed 14 Jan 2015 11:50:59 PM JST
def
* Wed 14 Jan 2015 11:51:09 PM JST
GetMotionEvents
* Wed 14 Jan 2015 11:51:22 PM JST
window, start, stop
* Wed 14 Jan 2015 11:52:16 PM JST
'=xx2xIII', window, start, stop
* Wed 14 Jan 2015 11:52:35 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 11:52:59 PM JST
TranslateCoordinates
* Wed 14 Jan 2015 11:53:12 PM JST
src_window, dst_window, src_x, src_y
* Wed 14 Jan 2015 11:56:23 PM JST
_src_x
* Wed 14 Jan 2015 11:56:34 PM JST
_src_x = src_x
* Wed 14 Jan 2015 11:57:23 PM JST
_point.
* Wed 14 Jan 2015 11:57:29 PM JST
_src_y = 
* Wed 14 Jan 2015 11:57:32 PM JST
_point
* Wed 14 Jan 2015 11:57:46 PM JST
_src_y
* Wed 14 Jan 2015 11:58:41 PM JST
'=xx2xIIhh', src_window, dst_window, src_x, src_y
* Wed 14 Jan 2015 11:59:07 PM JST
    def __str__(self):
        return self.get_buffer()

* Wed 14 Jan 2015 11:59:20 PM JST
WarpPointer
* Wed 14 Jan 2015 11:59:29 PM JST
src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y
* Thu 15 Jan 2015 12:01:01 AM JST
def
* Thu 15 Jan 2015 12:01:55 AM JST
_src_x =
* Thu 15 Jan 2015 12:02:16 AM JST
_src_x
* Thu 15 Jan 2015 12:02:19 AM JST
_src_point
* Thu 15 Jan 2015 12:04:34 AM JST
_src_y =
* Thu 15 Jan 2015 12:04:47 AM JST
_src_y
* Thu 15 Jan 2015 12:05:22 AM JST
_src_width =
* Thu 15 Jan 2015 12:05:29 AM JST
get_w
* Thu 15 Jan 2015 12:05:43 AM JST
_src_width
* Thu 15 Jan 2015 12:08:02 AM JST
_src_height =
* Thu 15 Jan 2015 12:09:41 AM JST
_dst_x =
* Thu 15 Jan 2015 12:09:53 AM JST
_dst_x
* Thu 15 Jan 2015 12:10:12 AM JST
_dst_y =
* Thu 15 Jan 2015 12:10:21 AM JST
_dst_y
* Thu 15 Jan 2015 12:10:29 AM JST
set_
* Thu 15 Jan 2015 12:11:09 AM JST
'=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y
* Thu 15 Jan 2015 12:11:50 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 12:31:55 AM JST
SetInputFocus
* Thu 15 Jan 2015 12:32:22 AM JST
revert_to, focus, time
* Thu 15 Jan 2015 12:33:32 AM JST
'=xB2xII', revert_to, focus, time
* Thu 15 Jan 2015 12:33:57 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 12:34:12 AM JST
GetInputFocus
* Thu 15 Jan 2015 12:34:42 AM JST
'=xx2x', 
* Thu 15 Jan 2015 12:34:52 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 12:35:02 AM JST
QueryKeymap
* Thu 15 Jan 2015 12:35:17 AM JST
    def get_buffer(self, ):
        r"""SUMMARY
        
        get_buffer()
        
        @Return:

        @Error:
        """
        return _pack('=xx2x', )

    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 12:35:29 AM JST
OpenFontChecked
* Thu 15 Jan 2015 12:35:42 AM JST
fid, name_len, name
* Thu 15 Jan 2015 12:39:33 AM JST

* Thu 15 Jan 2015 12:39:34 AM JST

* Thu 15 Jan 2015 12:39:34 AM JST
        self._name_len = name_len

* Thu 15 Jan 2015 12:39:36 AM JST
name_len, 
* Thu 15 Jan 2015 12:41:01 AM JST
'=xx2xIH2x', fid, name_len
* Thu 15 Jan 2015 12:41:24 AM JST
str(buffer(_array('b', name)))
* Thu 15 Jan 2015 12:42:40 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 12:43:13 AM JST
CloseFont
* Thu 15 Jan 2015 12:43:29 AM JST
def
* Thu 15 Jan 2015 12:44:11 AM JST
'=xx2xI', font
* Thu 15 Jan 2015 12:44:24 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 12:44:36 AM JST
QueryFont
* Thu 15 Jan 2015 12:44:59 AM JST
QueryTextExtents
* Thu 15 Jan 2015 12:45:09 AM JST
font, string_len, string
* Thu 15 Jan 2015 12:46:08 AM JST
def
* Thu 15 Jan 2015 12:46:58 AM JST
        buf.write(_pack('=x', ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))

* Thu 15 Jan 2015 12:50:01 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 12:50:25 AM JST
ListFonts
* Thu 15 Jan 2015 12:50:35 AM JST
max_names, pattern_len, pattern
* Thu 15 Jan 2015 12:51:55 AM JST
'=xx2xHH', max_names, pattern_len
* Thu 15 Jan 2015 12:52:07 AM JST
str(buffer(_array('b', pattern)))
* Thu 15 Jan 2015 12:52:34 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 12:53:21 AM JST
ListFontsWithInfo
* Thu 15 Jan 2015 12:54:05 AM JST
SetFontPath
* Thu 15 Jan 2015 12:54:17 AM JST
font_qty, font
* Thu 15 Jan 2015 12:55:18 AM JST
'=xx2xH2x',
* Thu 15 Jan 2015 12:55:21 AM JST
'=xx2xH2x', font_qty
* Thu 15 Jan 2015 12:55:33 AM JST
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))

* Thu 15 Jan 2015 12:56:02 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 12:56:11 AM JST
GetFontPath
* Thu 15 Jan 2015 12:56:55 AM JST
'=xx2x', 
* Thu 15 Jan 2015 12:57:06 AM JST
return buf.getvalue()
* Thu 15 Jan 2015 12:57:23 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 12:57:33 AM JST
CreatePixmap
* Thu 15 Jan 2015 12:58:50 AM JST
depth, pid, drawable, width, height
* Thu 15 Jan 2015 12:59:46 AM JST

* Thu 15 Jan 2015 12:59:47 AM JST
_point
* Thu 15 Jan 2015 12:59:47 AM JST
as _point
* Thu 15 Jan 2015 12:59:48 AM JST
point as _point
* Thu 15 Jan 2015 01:00:48 AM JST
import wxcb.xobj.dimension as _dimension
* Thu 15 Jan 2015 01:01:49 AM JST
_width =
* Thu 15 Jan 2015 01:02:07 AM JST
_height =
* Thu 15 Jan 2015 01:02:20 AM JST
_height
* Thu 15 Jan 2015 01:02:29 AM JST
_width
* Thu 15 Jan 2015 01:03:11 AM JST
'=xB2xIIHH', depth, pid, drawable, width, height
* Thu 15 Jan 2015 01:03:49 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 01:04:05 AM JST
FreePixmap
* Thu 15 Jan 2015 01:04:58 AM JST
'=xx2xI', pixmap
* Thu 15 Jan 2015 01:05:09 AM JST
retu
* Thu 15 Jan 2015 01:05:16 AM JST
bu
* Thu 15 Jan 2015 01:05:17 AM JST
self.bu
* Thu 15 Jan 2015 01:06:31 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 01:06:44 AM JST
CreateGC
* Thu 15 Jan 2015 01:06:56 AM JST
cid, drawable, value_mask, value_list
* Thu 15 Jan 2015 01:08:46 AM JST
'=xx2xIII', cid, drawable, value_mask
* Thu 15 Jan 2015 01:08:56 AM JST
buf.write(str(buffer(_array('I', value_list))))
* Thu 15 Jan 2015 01:09:20 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 01:18:13 AM JST
ChangeGC
* Thu 15 Jan 2015 01:18:25 AM JST
gc, value_mask, value_list
* Thu 15 Jan 2015 01:19:37 AM JST
'=xx2xII', gc, value_mask
* Thu 15 Jan 2015 01:19:53 AM JST
buf.write(str(buffer(_array('I', value_list))))
* Thu 15 Jan 2015 01:19:58 AM JST
slfe
* Thu 15 Jan 2015 01:20:24 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 01:20:37 AM JST
CopyGC
* Thu 15 Jan 2015 01:20:47 AM JST
src_gc, dst_gc, value_mask
* Thu 15 Jan 2015 01:21:41 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', src_gc, dst_gc, value_mask))

* Thu 15 Jan 2015 01:21:56 AM JST
ef
* Thu 15 Jan 2015 01:22:13 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 01:22:26 AM JST
SetDashes
* Thu 15 Jan 2015 01:28:01 AM JST
SetDashes
* Thu 15 Jan 2015 01:28:18 AM JST
gc, dash_offset, dashes_len, dashes
* Thu 15 Jan 2015 01:29:34 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(_array('B', dashes))))

* Thu 15 Jan 2015 01:30:16 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 01:33:12 AM JST
SetClipRectangles
* Thu 15 Jan 2015 01:33:24 AM JST
ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles
* Thu 15 Jan 2015 01:36:50 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))

* Thu 15 Jan 2015 01:37:39 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 01:37:50 AM JST
FreeGC
* Thu 15 Jan 2015 01:39:18 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xI', gc))

* Thu 15 Jan 2015 01:39:35 AM JST
ClearArea
* Thu 15 Jan 2015 01:39:47 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 01:39:58 AM JST
ClassName
* Thu 15 Jan 2015 01:40:08 AM JST
exposures, window, x, y, width, height
* Thu 15 Jan 2015 01:41:33 AM JST
newx
* Thu 15 Jan 2015 01:41:33 AM JST
_x = newx
* Thu 15 Jan 2015 01:41:42 AM JST
_x
* Thu 15 Jan 2015 01:42:06 AM JST
_y =
* Thu 15 Jan 2015 01:42:14 AM JST
_y
* Thu 15 Jan 2015 01:42:32 AM JST
_width =
* Thu 15 Jan 2015 01:42:46 AM JST
_width
* Thu 15 Jan 2015 01:43:24 AM JST
_height =
* Thu 15 Jan 2015 01:43:29 AM JST
set_ehigh
* Thu 15 Jan 2015 01:43:38 AM JST
_height
* Thu 15 Jan 2015 01:44:02 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHH', exposures, window, x, y, width, height))

* Thu 15 Jan 2015 01:44:35 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 01:45:17 AM JST
CopyArea
* Thu 15 Jan 2015 01:45:31 AM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height
* Thu 15 Jan 2015 01:57:23 AM JST
src_
* Thu 15 Jan 2015 01:57:25 AM JST
_src_x =
* Thu 15 Jan 2015 01:57:43 AM JST
_src_x
* Thu 15 Jan 2015 02:01:46 AM JST
_src_y =
* Thu 15 Jan 2015 02:01:51 AM JST
_point
* Thu 15 Jan 2015 02:02:38 AM JST
_dst_x =
* Thu 15 Jan 2015 02:03:20 AM JST
_dst_y =
* Thu 15 Jan 2015 02:04:06 AM JST
_width =
* Thu 15 Jan 2015 02:04:18 AM JST
_width
* Thu 15 Jan 2015 02:04:37 AM JST
_height =
* Thu 15 Jan 2015 02:04:52 AM JST
_height
* Thu 15 Jan 2015 02:05:14 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))

* Thu 15 Jan 2015 02:05:40 AM JST
buf.write(_pack('=xx2xIIIhhhhHH', self
* Thu 15 Jan 2015 02:06:07 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 02:09:12 AM JST
CopyPlane
* Thu 15 Jan 2015 02:09:36 AM JST
dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane
* Thu 15 Jan 2015 02:11:11 AM JST
object
* Thu 15 Jan 2015 02:11:14 AM JST
copy
* Thu 15 Jan 2015 02:11:44 AM JST
src_drawable, dst_drawable, gc, src_x, src_y,
                 dst_x, dst_y, width, height
* Thu 15 Jan 2015 02:12:21 AM JST
def
* Thu 15 Jan 2015 02:12:46 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, False),
                                 xcb.VoidCookie())

* Thu 15 Jan 2015 02:13:53 AM JST
self.send_request(xcb.Request(buf.getvalue(), 63, True, False),
* Thu 15 Jan 2015 02:13:54 AM JST
                  xcb.VoidCookie())
* Thu 15 Jan 2015 02:15:05 AM JST
PolyPoint
* Thu 15 Jan 2015 02:15:14 AM JST
coordinate_mode, drawable, gc, points_len, points
* Thu 15 Jan 2015 02:18:36 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))

* Thu 15 Jan 2015 02:19:40 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 02:20:17 AM JST
PolyLine
* Thu 15 Jan 2015 02:21:18 AM JST
PolySegment
* Thu 15 Jan 2015 02:21:36 AM JST
drawable, gc, segments_len, segments
* Thu 15 Jan 2015 02:21:41 AM JST
kwarg
* Thu 15 Jan 2015 02:21:42 AM JST
args,
* Thu 15 Jan 2015 02:23:17 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))

* Thu 15 Jan 2015 02:23:55 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 02:24:03 AM JST
PolyRectangle
* Thu 15 Jan 2015 02:24:14 AM JST
drawable, gc, rectangles_len, rectangles
* Thu 15 Jan 2015 02:26:03 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))

* Thu 15 Jan 2015 02:26:24 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 02:26:35 AM JST
PolyArc
* Thu 15 Jan 2015 02:26:55 AM JST
drawable, gc, arcs_len, arcs
* Thu 15 Jan 2015 02:28:12 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))

* Thu 15 Jan 2015 02:28:41 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 02:28:50 AM JST
FillPoly
* Thu 15 Jan 2015 02:43:44 AM JST
drawable, gc, shape, coordinate_mode, points_len, points
* Thu 15 Jan 2015 02:45:57 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))

* Thu 15 Jan 2015 02:46:37 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 02:46:42 AM JST
PolyFillRectangle
* Thu 15 Jan 2015 02:46:51 AM JST
drawable, gc, rectangles_len, rectangles
* Thu 15 Jan 2015 02:48:10 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))

* Thu 15 Jan 2015 02:49:02 AM JST
return 
* Thu 15 Jan 2015 02:50:24 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 02:51:18 AM JST
PolyFillArc
* Thu 15 Jan 2015 02:51:30 AM JST
drawable, gc, arcs_len, arcs
* Thu 15 Jan 2015 02:53:03 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))

* Thu 15 Jan 2015 02:53:10 AM JST
slf.
* Thu 15 Jan 2015 02:53:30 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 02:54:41 AM JST
PutImage
* Thu 15 Jan 2015 02:54:52 AM JST
format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data
* Thu 15 Jan 2015 02:57:07 AM JST
width
* Thu 15 Jan 2015 02:57:07 AM JST
_width = width
* Thu 15 Jan 2015 02:57:30 AM JST
_height =
* Thu 15 Jan 2015 02:57:42 AM JST
_height
* Thu 15 Jan 2015 02:58:12 AM JST
_x =
* Thu 15 Jan 2015 02:58:24 AM JST
_x
* Thu 15 Jan 2015 03:00:05 AM JST
_y =
* Thu 15 Jan 2015 03:02:34 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(_array('B', data))))

* Thu 15 Jan 2015 03:03:53 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 03:04:29 AM JST
GetImage
* Thu 15 Jan 2015 03:04:42 AM JST
format, drawable, x, y, width, height, plane_mask
* Thu 15 Jan 2015 03:06:02 AM JST
_x =
* Thu 15 Jan 2015 03:06:36 AM JST
_y =
* Thu 15 Jan 2015 03:07:06 AM JST
_width =
* Thu 15 Jan 2015 03:07:42 AM JST
_height =
* Thu 15 Jan 2015 03:07:55 AM JST
_height
* Thu 15 Jan 2015 03:09:38 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))

* Thu 15 Jan 2015 03:09:54 AM JST
slfe
* Thu 15 Jan 2015 03:11:00 AM JST
            
* Thu 15 Jan 2015 03:11:11 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 03:11:21 AM JST
PolyText8
* Thu 15 Jan 2015 03:11:35 AM JST
drawable, gc, x, y, items_len, items
* Thu 15 Jan 2015 03:11:54 AM JST

* Thu 15 Jan 2015 03:11:54 AM JST

* Thu 15 Jan 2015 03:11:54 AM JST
        self._x = x

* Thu 15 Jan 2015 03:11:55 AM JST
        self._x = x

* Thu 15 Jan 2015 03:11:55 AM JST
        self._x = x
        self._y = y

* Thu 15 Jan 2015 03:12:08 AM JST
_x =
* Thu 15 Jan 2015 03:13:58 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))

* Thu 15 Jan 2015 03:14:22 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 03:14:41 AM JST
PolyText16
* Thu 15 Jan 2015 03:15:06 AM JST
ImageText8
* Thu 15 Jan 2015 03:15:17 AM JST
string_len, drawable, gc, x, y, string
* Thu 15 Jan 2015 03:15:45 AM JST
def
* Thu 15 Jan 2015 03:18:33 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(_array('b', string))))

* Thu 15 Jan 2015 03:19:08 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 03:21:25 AM JST
CreateColormap
* Thu 15 Jan 2015 03:21:35 AM JST
alloc, mid, window, visual
* Thu 15 Jan 2015 03:23:38 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xIII', alloc, mid, window, visual))

* Thu 15 Jan 2015 03:23:51 AM JST
slfe
* Thu 15 Jan 2015 03:24:08 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 03:24:18 AM JST
FreeColormap
* Thu 15 Jan 2015 03:24:59 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))

* Thu 15 Jan 2015 03:25:13 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 03:25:23 AM JST
CopyColormapAndFree
* Thu 15 Jan 2015 03:25:39 AM JST
mid, src_cmap
* Thu 15 Jan 2015 03:26:26 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xII', mid, src_cmap))

* Thu 15 Jan 2015 03:26:35 AM JST
slf.
* Thu 15 Jan 2015 03:26:49 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 03:27:08 AM JST
InstallColormap
* Thu 15 Jan 2015 03:27:56 AM JST
UninstallColormap
* Thu 15 Jan 2015 03:28:25 AM JST
ListInstalledColormaps
* Thu 15 Jan 2015 03:28:45 AM JST
AllocColor
* Thu 15 Jan 2015 03:28:55 AM JST
cmap, red, green, blue
* Thu 15 Jan 2015 03:29:56 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHH2x', cmap, red, green, blue))

* Thu 15 Jan 2015 03:30:20 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 03:30:29 AM JST
AllocNamedColor
* Thu 15 Jan 2015 03:30:38 AM JST
cmap, name_len, name
* Thu 15 Jan 2015 03:32:07 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))

* Thu 15 Jan 2015 03:32:51 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 03:33:00 AM JST
AllocColorCells
* Thu 15 Jan 2015 03:33:09 AM JST
contiguous, cmap, colors, planes
* Thu 15 Jan 2015 03:34:25 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', contiguous, cmap, colors, planes))

* Thu 15 Jan 2015 03:34:33 AM JST
slfe
* Thu 15 Jan 2015 03:34:57 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 03:35:43 AM JST
AllocColorPlanes
* Thu 15 Jan 2015 03:35:53 AM JST
contiguous, cmap, colors, reds, greens, blues
* Thu 15 Jan 2015 03:39:03 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))

* Thu 15 Jan 2015 03:39:38 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 03:41:08 AM JST
FreeColors
* Thu 15 Jan 2015 03:41:17 AM JST
cmap, plane_mask, pixels_len, pixels
* Thu 15 Jan 2015 03:42:11 AM JST
pixels_len
* Thu 15 Jan 2015 03:42:25 AM JST
pixels
* Thu 15 Jan 2015 03:42:44 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(_array('I', pixels))))

* Thu 15 Jan 2015 03:43:03 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 03:43:14 AM JST
StoreColors
* Thu 15 Jan 2015 03:43:27 AM JST
cmap, items_len, items
* Thu 15 Jan 2015 03:44:20 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))

* Thu 15 Jan 2015 03:44:47 AM JST
StoreNamedColor
* Thu 15 Jan 2015 03:44:53 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 03:45:02 AM JST
StoreNamedColor
* Thu 15 Jan 2015 03:45:11 AM JST
flags, cmap, pixel, name_len, name
* Thu 15 Jan 2015 03:47:20 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(_array('b', name))))

* Thu 15 Jan 2015 03:47:50 AM JST
    def __str__(self):
        return self.get_buffer()

* Thu 15 Jan 2015 03:48:05 AM JST
QueryColors
* Thu 15 Jan 2015 03:48:20 AM JST
cmap, pixels_len, pixels
* Thu 15 Jan 2015 03:49:35 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        buf.write(str(buffer(_array('I', pixels))))

* Thu 15 Jan 2015 03:51:49 AM JST
LookupColor
* Thu 15 Jan 2015 03:52:00 AM JST
cmap, name_len, name
* Thu 15 Jan 2015 03:53:44 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))

* Thu 15 Jan 2015 03:54:15 AM JST
CreateCursor
* Thu 15 Jan 2015 03:54:25 AM JST
cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y
* Thu 15 Jan 2015 03:54:49 AM JST
Point
* Thu 15 Jan 2015 03:54:49 AM JST
_pont.Point
* Thu 15 Jan 2015 03:54:56 AM JST

* Thu 15 Jan 2015 03:54:56 AM JST

* Thu 15 Jan 2015 03:54:56 AM JST
        self._x = x

* Thu 15 Jan 2015 03:54:57 AM JST
        self._x = x

* Thu 15 Jan 2015 03:54:57 AM JST
        self._x = x
        self._y = y

* Thu 15 Jan 2015 03:59:31 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))

* Thu 15 Jan 2015 03:59:52 AM JST
self.
* Thu 15 Jan 2015 04:00:33 AM JST
CreateGlyphCursor
* Thu 15 Jan 2015 04:35:14 AM JST
CreateGlyphCursor
* Thu 15 Jan 2015 04:35:27 AM JST
cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue
* Thu 15 Jan 2015 04:39:00 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))

* Thu 15 Jan 2015 04:39:10 AM JST
self.
* Thu 15 Jan 2015 04:40:04 AM JST
FreeCursor
* Thu 15 Jan 2015 04:40:12 AM JST
cursor
* Thu 15 Jan 2015 04:40:23 AM JST
def
* Thu 15 Jan 2015 04:40:46 AM JST
RecolorCursor
* Thu 15 Jan 2015 04:42:12 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cursor))

* Thu 15 Jan 2015 04:42:41 AM JST
RecolorCursor
* Thu 15 Jan 2015 04:42:52 AM JST
cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue
* Thu 15 Jan 2015 04:44:10 AM JST
    def get_fore_green(self, ):
        r"""SUMMARY
        
        get_fore_green()
        
        @Return:

        @Error:
        """
        return self._fore_green

    def set_fore_green(self, fore_green):
        r"""SUMMARY
        
        set_fore_green(fore_green)
        
        @Arguments:
        - [yas] elisp error!:
        
        @Return:

        @Error:
        """
        self._fore_green = fore_green

    fore_green = property(get_fore_green, set_fore_green)

    def get_fore_blue(self, ):
        r"""SUMMARY
        
        get_fore_blue()
        
        @Return:

        @Error:
        """
        return self._fore_blue

    def set_fore_blue(self, fore_blue):
        r"""SUMMARY
        
        set_fore_blue(fore_blue)
        
        @Arguments:
        - [yas] elisp error!:
        
        @Return:

        @Error:
        """
        self._fore_blue = fore_blue

    fore_blue = property(get_fore_blue, set_fore_blue)

    def get_back_red(self, ):
        r"""SUMMARY
        
        get_back_red()
        
        @Return:

        @Error:
        """
        return self._back_red

    def set_back_red(self, back_red):
        r"""SUMMARY
        
        set_back_red(back_red)
        
        @Arguments:
        - [yas] elisp error!:
        
        @Return:

        @Error:
        """
        self._back_red = back_red

    back_red = property(get_back_red, set_back_red)

    def get_back_green(self, ):
        r"""SUMMARY
        
        get_back_green()
        
        @Return:

        @Error:
        """
        return self._back_green

    def set_back_green(self, back_green):
        r"""SUMMARY
        
        set_back_green(back_green)
        
        @Arguments:
        - [yas] elisp error!:
        
        @Return:

        @Error:
        """
        self._back_green = back_green

    back_green = property(get_back_green, set_back_green)

    def get_back_blue(self, ):
        r"""SUMMARY
        
        get_back_blue()
        
        @Return:

        @Error:
        """
        return self._back_blue

    def set_back_blue(self, back_blue):
        r"""SUMMARY
        
        set_back_blue(back_blue)
        
        @Arguments:
        - [yas] elisp error!:
        
        @Return:

        @Error:
        """
        self._back_blue = back_blue

    back_blue = property(get_back_blue, set_back_blue)

* Thu 15 Jan 2015 04:44:35 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))

* Thu 15 Jan 2015 04:44:45 AM JST
slf.
* Thu 15 Jan 2015 04:44:47 AM JST
self.
* Thu 15 Jan 2015 04:47:41 AM JST
QueryBestSize
* Thu 15 Jan 2015 04:47:53 AM JST
_class, drawable, width, height
* Thu 15 Jan 2015 04:48:26 AM JST

* Thu 15 Jan 2015 04:48:26 AM JST

* Thu 15 Jan 2015 04:48:26 AM JST
        self._width = width

* Thu 15 Jan 2015 04:48:26 AM JST
        self._width = width

* Thu 15 Jan 2015 04:48:26 AM JST
        self._width = width
        self._height = height

* Thu 15 Jan 2015 04:49:34 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', _class, drawable, width, height))

* Thu 15 Jan 2015 04:49:54 AM JST
_height
* Thu 15 Jan 2015 04:50:03 AM JST
gset
* Thu 15 Jan 2015 04:50:12 AM JST
_height
* Thu 15 Jan 2015 04:50:25 AM JST
width
* Thu 15 Jan 2015 04:50:25 AM JST
_width = width
* Thu 15 Jan 2015 04:50:35 AM JST
_width
* Thu 15 Jan 2015 04:51:18 AM JST
QueryExtension
* Thu 15 Jan 2015 04:51:32 AM JST
name_len, name
* Thu 15 Jan 2015 04:52:13 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', name_len))
        buf.write(str(buffer(_array('b', name))))

* Thu 15 Jan 2015 04:52:19 AM JST
slf.
* Thu 15 Jan 2015 04:52:26 AM JST
slfe.
* Thu 15 Jan 2015 04:52:43 AM JST
ListExtensions
* Thu 15 Jan 2015 04:53:12 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))

* Thu 15 Jan 2015 04:54:09 AM JST
ChangeKeyboardMapping
* Thu 15 Jan 2015 04:54:23 AM JST
keycode_count, first_keycode, keysyms_per_keycode, keysyms
* Thu 15 Jan 2015 04:57:18 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(_array('I', keysyms))))

* Thu 15 Jan 2015 04:57:26 AM JST
slfe.
* Thu 15 Jan 2015 04:57:59 AM JST
GetKeyboardMapping
* Thu 15 Jan 2015 05:00:19 AM JST
GetKeyboardMapping
* Thu 15 Jan 2015 05:00:29 AM JST
first_keycode, count
* Thu 15 Jan 2015 05:01:44 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xBB', first_keycode, count))

* Thu 15 Jan 2015 05:03:36 AM JST
ChangeKeyboardControl
* Thu 15 Jan 2015 05:03:59 AM JST
value_mask, value_list
* Thu 15 Jan 2015 05:04:29 AM JST
GetKeyboardControl
* Thu 15 Jan 2015 05:04:37 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xI', value_mask))
        buf.write(str(buffer(_array('I', value_list))))

* Thu 15 Jan 2015 05:05:25 AM JST
GetKeyboardControl
* Thu 15 Jan 2015 05:05:38 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))

* Thu 15 Jan 2015 05:06:07 AM JST
Bell
* Thu 15 Jan 2015 05:06:38 AM JST
        buf = _StringIO()
        buf.write(_pack('=xb2x', percent))

* Thu 15 Jan 2015 05:07:00 AM JST
ChangePointerControl
* Thu 15 Jan 2015 05:08:03 AM JST
ChangePointerControl
* Thu 15 Jan 2015 05:08:15 AM JST
acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold
* Thu 15 Jan 2015 05:08:34 AM JST
acceleration_numerator
* Thu 15 Jan 2015 05:08:50 AM JST
acceleration_denominator
* Thu 15 Jan 2015 05:09:38 AM JST
threshold
* Thu 15 Jan 2015 05:09:48 AM JST
do_acceleration
* Thu 15 Jan 2015 05:09:56 AM JST
do_threshold
* Thu 15 Jan 2015 05:10:08 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))

* Thu 15 Jan 2015 05:10:32 AM JST
slf.
* Thu 15 Jan 2015 05:11:53 AM JST
GetPointerControl
* Thu 15 Jan 2015 05:12:15 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))

* Thu 15 Jan 2015 05:12:43 AM JST
SetScreenSaver
* Thu 15 Jan 2015 05:12:57 AM JST
timeout, interval, prefer_blanking, allow_exposures
* Thu 15 Jan 2015 05:14:58 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))

* Thu 15 Jan 2015 05:15:32 AM JST
GetScreenSaver
* Thu 15 Jan 2015 05:15:59 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))

* Thu 15 Jan 2015 05:16:17 AM JST
ChangeHostsChecked
* Thu 15 Jan 2015 05:16:29 AM JST
, mode, family, address_len, address
* Thu 15 Jan 2015 05:18:23 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(_array('B', address))))

* Thu 15 Jan 2015 05:18:41 AM JST
getvaue(
* Thu 15 Jan 2015 05:18:56 AM JST
ChangeHosts
* Thu 15 Jan 2015 05:19:07 AM JST
mode, family, address_len, address
* Thu 15 Jan 2015 05:20:34 AM JST
ChangeHostsChecked
* Thu 15 Jan 2015 05:20:55 AM JST
ListHosts
* Thu 15 Jan 2015 05:21:10 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))

* Thu 15 Jan 2015 05:36:34 AM JST
SetAccessControl
* Thu 15 Jan 2015 05:36:46 AM JST
mode
* Thu 15 Jan 2015 05:37:24 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))

* Thu 15 Jan 2015 05:37:57 AM JST
SetCloseDownMode
* Thu 15 Jan 2015 05:38:15 AM JST
KillClient
* Thu 15 Jan 2015 05:38:36 AM JST
resource
* Thu 15 Jan 2015 05:38:58 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xI', resource))

* Thu 15 Jan 2015 05:39:18 AM JST
RotateProperties
* Thu 15 Jan 2015 05:39:44 AM JST
window, atoms_len, delta, atoms
* Thu 15 Jan 2015 05:40:31 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(_array('I', atoms))))

* Thu 15 Jan 2015 05:41:18 AM JST
ForceScreenSaver
* Thu 15 Jan 2015 05:41:39 AM JST
SetAccessControl
* Thu 15 Jan 2015 05:41:56 AM JST
SetPointerMapping
* Thu 15 Jan 2015 05:42:10 AM JST
map_len, map
* Thu 15 Jan 2015 05:42:53 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2x', map_len))
        buf.write(str(buffer(_array('B', map))))

* Thu 15 Jan 2015 05:43:04 AM JST
r
* Thu 15 Jan 2015 05:43:05 AM JST
reutn r
* Thu 15 Jan 2015 05:43:19 AM JST
GetPointerMapping
* Thu 15 Jan 2015 05:43:34 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))

* Thu 15 Jan 2015 05:43:53 AM JST
SetModifierMapping
* Thu 15 Jan 2015 05:45:18 AM JST
SetModifierMapping
* Thu 15 Jan 2015 05:45:31 AM JST
keycodes_per_modifier, keycodes
* Thu 15 Jan 2015 05:46:00 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(_array('B', keycodes))))

* Thu 15 Jan 2015 05:46:16 AM JST
sfl.
* Thu 15 Jan 2015 05:46:44 AM JST
GetModifierMapping
* Thu 15 Jan 2015 05:47:02 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))

* Thu 15 Jan 2015 05:47:23 AM JST
NoOperation
* Thu 15 Jan 2015 05:47:35 AM JST
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))

* Thu 15 Jan 2015 06:55:24 PM JST

* Thu 15 Jan 2015 06:55:25 PM JST

* Thu 15 Jan 2015 06:55:25 PM JST
        import xcb

* Thu 15 Jan 2015 06:55:33 PM JST

* Thu 15 Jan 2015 06:55:33 PM JST

* Thu 15 Jan 2015 06:55:33 PM JST
        import xcb

* Thu 15 Jan 2015 06:56:11 PM JST

* Thu 15 Jan 2015 06:56:11 PM JST

* Thu 15 Jan 2015 06:56:11 PM JST
        import xcb

* Thu 15 Jan 2015 06:56:50 PM JST

* Thu 15 Jan 2015 06:56:50 PM JST

* Thu 15 Jan 2015 06:56:50 PM JST
        import xcb

* Thu 15 Jan 2015 06:57:02 PM JST

* Thu 15 Jan 2015 06:57:02 PM JST

* Thu 15 Jan 2015 06:57:02 PM JST
        import xcb

* Thu 15 Jan 2015 06:57:24 PM JST

* Thu 15 Jan 2015 06:57:24 PM JST

* Thu 15 Jan 2015 06:57:24 PM JST
        import xcb

* Thu 15 Jan 2015 06:57:36 PM JST

* Thu 15 Jan 2015 06:57:36 PM JST

* Thu 15 Jan 2015 06:57:37 PM JST
        import xcb

* Thu 15 Jan 2015 06:58:52 PM JST
dst_
* Thu 15 Jan 2015 06:58:54 PM JST
dst_
* Thu 15 Jan 2015 06:59:57 PM JST
    def get_drawable(self, ):
        r"""SUMMARY

        get_drawable()

        @Return:

        @Error:
        """
        return self._drawable

    def set_drawable(self, drawable):
        r"""SUMMARY

        set_drawable(drawable)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._drawable = drawable

    drawable = property(get_drawable, set_drawable)

* Fri 16 Jan 2015 12:34:24 AM JST
exten
* Fri 16 Jan 2015 03:59:35 AM JST
formatter
* Fri 16 Jan 2015 04:05:15 AM JST

* Fri 16 Jan 2015 04:05:15 AM JST

* Fri 16 Jan 2015 04:05:15 AM JST
        self._ischecked = ischecked

* Fri 16 Jan 2015 05:28:44 AM JST
_disp
* Fri 16 Jan 2015 07:47:31 AM JST
        return self._packet.wrap(
            wxcb.conn.connect(self.display).core.send_request(
            xcb.Request(self.binary, self.extcode, False, False),
            self.cookie, self.reply), self.display)

* Fri 16 Jan 2015 07:49:20 AM JST
False
* Fri 16 Jan 2015 07:49:27 AM JST
False
* Fri 16 Jan 2015 07:49:42 AM JST
                    
* Fri 16 Jan 2015 07:49:46 AM JST
            
* Fri 16 Jan 2015 07:50:01 AM JST
                
* Fri 16 Jan 2015 07:50:02 AM JST
                
* Fri 16 Jan 2015 07:50:16 AM JST
            
* Fri 16 Jan 2015 07:50:17 AM JST
            
* Fri 16 Jan 2015 07:50:19 AM JST
            
* Fri 16 Jan 2015 07:50:41 AM JST
                            
* Fri 16 Jan 2015 07:51:45 AM JST
retrun 
* Fri 16 Jan 2015 07:53:58 AM JST
binary
* Sat 17 Jan 2015 08:56:14 AM JST
isvoid
* Sat 17 Jan 2015 10:02:58 PM JST
cookie
* Sat 17 Jan 2015 10:03:23 PM JST
        return self._packet.wrap(
            wxcb.conn.connect(self.display).core.send_request(
                xcb.Request(self.get_buffer(), self.opcode, self.isvoid(),
                            self.ischecked()), self.cookie, self.reply),
            self.display)

* Sat 17 Jan 2015 10:03:36 PM JST
self._packet.wrap(
* Sat 17 Jan 2015 10:03:37 PM JST
            
* Sat 17 Jan 2015 10:03:40 PM JST
display
* Sat 17 Jan 2015 10:03:41 PM JST
self.display
* Sat 17 Jan 2015 10:04:22 PM JST
_buffer()
* Sat 17 Jan 2015 10:04:22 PM JST
self._buffer()
* Sat 17 Jan 2015 10:14:13 PM JST
True
* Sat 17 Jan 2015 10:14:17 PM JST

* Sat 17 Jan 2015 10:14:17 PM JST

* Sat 17 Jan 2015 10:14:17 PM JST
        self._ischecked = ischecked

* Sat 17 Jan 2015 10:14:21 PM JST
True,
* Sat 17 Jan 2015 10:14:21 PM JST
ischecked=True,
* Sat 17 Jan 2015 10:14:26 PM JST
_
* Sat 17 Jan 2015 10:14:27 PM JST
self._
* Sun 18 Jan 2015 03:14:46 AM JST
_
* Sun 18 Jan 2015 03:14:47 AM JST
self.
* Sun 18 Jan 2015 03:14:47 AM JST
lsf.self.
* Sun 18 Jan 2015 03:16:34 AM JST
ischecked,
* Sun 18 Jan 2015 03:16:39 AM JST
井川鈴乃
* Sun 18 Jan 2015 03:30:11 AM JST
display
* Sun 18 Jan 2015 03:30:55 AM JST
                        
* Sun 18 Jan 2015 03:30:57 AM JST
vlaue
* Sun 18 Jan 2015 03:31:00 AM JST
value
* Sun 18 Jan 2015 03:31:43 AM JST

* Sun 18 Jan 2015 03:31:43 AM JST

* Sun 18 Jan 2015 03:31:43 AM JST
        self.set_display(display)

* Sun 18 Jan 2015 03:31:46 AM JST

* Sun 18 Jan 2015 03:31:46 AM JST

* Sun 18 Jan 2015 03:31:46 AM JST
        self.set_display(display)

* Sun 18 Jan 2015 03:32:20 AM JST
self.
* Sun 18 Jan 2015 03:32:39 AM JST

    def get_opcode(self, ):
        r"""SUMMARY
        
        get_opcode()
        
        @Return:

        @Error:
        """
        return self._opcode

* Sun 18 Jan 2015 03:47:28 AM JST
opcode
* Sun 18 Jan 2015 03:57:16 AM JST
cookietype
* Sun 18 Jan 2015 03:57:19 AM JST
NOne
* Sun 18 Jan 2015 04:45:59 PM JST
ischecked=True,
* Sun 18 Jan 2015 04:46:16 PM JST
self.
* Sun 18 Jan 2015 04:47:03 PM JST
get_ische
* Sun 18 Jan 2015 04:47:37 PM JST
slf.
* Sun 18 Jan 2015 04:47:47 PM JST
ischecked
* Sun 18 Jan 2015 04:49:51 PM JST
None
* Sun 18 Jan 2015 04:50:03 PM JST
None
* Sun 18 Jan 2015 04:50:08 PM JST
None
* Sun 18 Jan 2015 04:51:14 PM JST
def
* Sun 18 Jan 2015 04:52:39 PM JST
reply
* Sun 18 Jan 2015 04:52:56 PM JST

* Sun 18 Jan 2015 04:52:56 PM JST

* Sun 18 Jan 2015 04:52:56 PM JST
        self.set_display(display)

* Sun 18 Jan 2015 04:52:59 PM JST

* Sun 18 Jan 2015 04:53:00 PM JST

* Sun 18 Jan 2015 04:53:00 PM JST
        self._display = None

* Sun 18 Jan 2015 04:53:27 PM JST
xcb.
* Sun 18 Jan 2015 04:53:42 PM JST
                        
* Sun 18 Jan 2015 04:58:03 PM JST
        return wxcb.conn.connect(self._display).core.send_request(
                Request(buf, self.opcode, self.isvoid(), self.ischecked),
                self.cookie(), self._reply)

* Sun 18 Jan 2015 04:58:42 PM JST
isvoid()
* Sun 18 Jan 2015 04:58:42 PM JST
self.isvoid()
* Sun 18 Jan 2015 04:59:32 PM JST
                
* Sun 18 Jan 2015 04:59:41 PM JST
        return wxcb.conn.connect(self._display).core.send_request(
                Request(buf, self.opcode, True, self.ischecked), self.cookie())

* Sun 18 Jan 2015 05:00:12 PM JST
True
* Sun 18 Jan 2015 05:02:14 PM JST
    
* Sun 18 Jan 2015 05:02:17 PM JST
            
* Sun 18 Jan 2015 05:02:22 PM JST
            
* Sun 18 Jan 2015 05:57:26 PM JST
reply=None, 
* Mon 19 Jan 2015 10:56:28 PM JST
None
* Mon 19 Jan 2015 10:56:36 PM JST
        self._request = sendrequest.SendRequest(
            self.opcode, self.cookietype, checked, display=display)

* Mon 19 Jan 2015 10:56:44 PM JST
self.
* Mon 19 Jan 2015 10:56:46 PM JST
self.
* Mon 19 Jan 2015 10:56:50 PM JST
display=
* Mon 19 Jan 2015 10:57:03 PM JST
    def get_display(self, ):
        r"""SUMMARY

        get_display()

        @Return:

        @Error:
        """
        return self._request.get_display()

    def set_display(self, display):
        r"""SUMMARY

        set_display(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        self._request.set_display(display)

    display = property(get_display, set_display)

    def ischecked(self, ):
        r"""SUMMARY

        ischecked()

        @Return:

        @Error:
        """
        return self._request.ischecked()

    def set_checked(self, checked):
        r"""SUMMARY

        set_checked(checked)

        @Arguments:
        - `checked`:

        @Return:

        @Error:
        """
        self._request.set_checked(checked)

    ischecked = property(ischecked, set_checked)

* Mon 19 Jan 2015 10:58:02 PM JST
object
* Mon 19 Jan 2015 10:58:22 PM JST
super
* Mon 19 Jan 2015 10:58:52 PM JST
display, 
* Mon 19 Jan 2015 10:59:04 PM JST
checked, 
* Mon 19 Jan 2015 11:02:44 PM JST
slegf
* Mon 19 Jan 2015 11:07:12 PM JST
_bufer.
* Mon 19 Jan 2015 11:12:44 PM JST
self.
* Mon 19 Jan 2015 11:21:02 PM JST
_requ
* Mon 19 Jan 2015 11:21:03 PM JST
self._requ
* Mon 19 Jan 2015 11:25:24 PM JST
    opcode = 1
    cookietype = VoidCookie

* Mon 19 Jan 2015 11:25:55 PM JST
display=None, checked=False
* Mon 19 Jan 2015 11:27:51 PM JST
None, 
* Mon 19 Jan 2015 11:27:54 PM JST
display=None, 
* Mon 19 Jan 2015 11:28:14 PM JST
display=None, 
* Mon 19 Jan 2015 11:28:18 PM JST
                 
* Mon 19 Jan 2015 11:37:53 PM JST
definit
* Mon 19 Jan 2015 11:38:42 PM JST
GetWindowAttributesCookie
* Mon 19 Jan 2015 11:41:14 PM JST
windwo
* Mon 19 Jan 2015 11:42:11 PM JST

* Mon 19 Jan 2015 11:42:11 PM JST

* Mon 19 Jan 2015 11:42:11 PM JST
        self._window = window

* Mon 19 Jan 2015 11:48:43 PM JST

* Mon 19 Jan 2015 11:48:43 PM JST

* Mon 19 Jan 2015 11:48:43 PM JST
        self._window = window

* Tue 20 Jan 2015 12:08:56 AM JST
window, parent, x, y
* Tue 20 Jan 2015 12:16:48 AM JST
ch
* Tue 20 Jan 2015 12:16:48 AM JST
window, ch
* Tue 20 Jan 2015 12:21:24 AM JST
ConfigureWindow
* Tue 20 Jan 2015 12:22:32 AM JST
_
* Tue 20 Jan 2015 12:22:33 AM JST
s
* Tue 20 Jan 2015 12:22:33 AM JST
lsef.s
* Tue 20 Jan 2015 12:23:57 AM JST
CirculateWindow
* Tue 20 Jan 2015 12:25:48 AM JST
GetGeometry
* Tue 20 Jan 2015 12:26:30 AM JST
defini
* Tue 20 Jan 2015 12:27:21 AM JST

* Tue 20 Jan 2015 12:27:21 AM JST

* Tue 20 Jan 2015 12:27:21 AM JST
        self._drawable = drawable

* Tue 20 Jan 2015 12:27:21 AM JST
        self._drawable = drawable

* Tue 20 Jan 2015 12:27:21 AM JST
        self._drawable = drawable
        self._checked = checked

* Tue 20 Jan 2015 12:27:22 AM JST
        self._drawable = drawable
        self._checked = checked

* Tue 20 Jan 2015 12:27:22 AM JST
        self._drawable = drawable
        self._checked = checked
        self._display = display

* Tue 20 Jan 2015 12:28:38 AM JST
QueryTree
* Tue 20 Jan 2015 12:33:32 AM JST
Ch
* Tue 20 Jan 2015 12:33:32 AM JST
xproto.Ch
* Tue 20 Jan 2015 12:36:03 AM JST
InternAtom
* Tue 20 Jan 2015 12:38:46 AM JST
name_len, 
* Tue 20 Jan 2015 12:39:10 AM JST

* Tue 20 Jan 2015 12:39:42 AM JST
atom
* Tue 20 Jan 2015 12:39:51 AM JST
atom
* Tue 20 Jan 2015 12:50:56 AM JST
GetAtomName
* Tue 20 Jan 2015 12:52:16 AM JST

* Tue 20 Jan 2015 12:52:16 AM JST

* Tue 20 Jan 2015 12:52:16 AM JST
        self._atom = atom

* Tue 20 Jan 2015 12:52:16 AM JST
        self._atom = atom

* Tue 20 Jan 2015 12:52:16 AM JST
        self._atom = atom
        self._checked = checked

* Tue 20 Jan 2015 12:52:19 AM JST

* Tue 20 Jan 2015 12:52:19 AM JST

* Tue 20 Jan 2015 12:52:20 AM JST
        self._display = display

* Tue 20 Jan 2015 12:55:10 AM JST
ChangeProperty
* Tue 20 Jan 2015 12:57:35 AM JST
ChangeProperty
* Tue 20 Jan 2015 01:02:26 AM JST
DeleteProperty
* Tue 20 Jan 2015 01:07:15 AM JST
GetProperty
* Tue 20 Jan 2015 01:09:05 AM JST
window, property_, type_, long_offset,
* Tue 20 Jan 2015 01:09:13 AM JST
long_length, 
* Tue 20 Jan 2015 01:13:09 AM JST
ListProperties
* Tue 20 Jan 2015 01:15:50 AM JST
SetSelectionOwner
* Tue 20 Jan 2015 01:18:44 AM JST
GetSelectionOwner
* Tue 20 Jan 2015 01:20:19 AM JST
        
* Tue 20 Jan 2015 01:21:29 AM JST
ConvertSelection
* Tue 20 Jan 2015 01:21:56 AM JST
requestor, selection, target, property, time
* Tue 20 Jan 2015 01:24:25 AM JST
SendEvent
* Tue 20 Jan 2015 01:25:00 AM JST
propagate, destination, event_mask, event
* Tue 20 Jan 2015 01:25:57 AM JST
propagate, destination, event_mask, event
* Tue 20 Jan 2015 01:27:22 AM JST
GrabPointer
* Tue 20 Jan 2015 01:27:57 AM JST
owner_events, grab_window, event_mask, pointer_mode,
                    keyboard_mode, confine_to, cursor, time
* Tue 20 Jan 2015 01:28:05 AM JST
                    
* Tue 20 Jan 2015 01:29:26 AM JST
owner_events, grab_window, event_mask, pointer_mode,
                 keyboard_mode, confine_to, cursor, time
* Tue 20 Jan 2015 01:29:32 AM JST
            
* Tue 20 Jan 2015 01:31:38 AM JST
UngrabPointer
* Tue 20 Jan 2015 01:33:45 AM JST
GrabButton
* Tue 20 Jan 2015 01:34:10 AM JST
owner_events, grab_window, event_mask, pointer_mode,
                   keyboard_mode, confine_to, cursor, button, modifiers
* Tue 20 Jan 2015 01:34:38 AM JST
                   
* Tue 20 Jan 2015 01:37:11 AM JST
owner_events, grab_window, event_mask, pointer_mode,
                 keyboard_mode, confine_to, cursor, button, modifiers,
* Tue 20 Jan 2015 01:37:22 AM JST
            
* Tue 20 Jan 2015 01:40:16 AM JST
UngrabButton
* Tue 20 Jan 2015 01:40:45 AM JST
button, grab_window, modifiers
* Tue 20 Jan 2015 01:42:32 AM JST
ChangeActivePointerGrab
* Tue 20 Jan 2015 01:43:46 AM JST
cursor, time, event_mask
* Tue 20 Jan 2015 01:44:32 AM JST
cursor, time, event_mask
* Tue 20 Jan 2015 01:45:14 AM JST
GrabKeyboard
* Tue 20 Jan 2015 01:45:31 AM JST
GrabKeyboardCookie
* Tue 20 Jan 2015 01:45:46 AM JST
owner_events, grab_window, time, pointer_mode,
                     keyboard_mode
* Tue 20 Jan 2015 01:45:51 AM JST
                    
* Tue 20 Jan 2015 01:47:58 AM JST
owner_events, grab_window, time, pointer_mode,
                 keyboard_mode,
* Tue 20 Jan 2015 01:48:04 AM JST
                 
* Tue 20 Jan 2015 01:50:38 AM JST
UngrabKeyboard
* Tue 20 Jan 2015 01:52:08 AM JST
GrabKey
* Tue 20 Jan 2015 01:52:35 AM JST
owner_events, grab_window, modifiers, key, pointer_mode,
                keyboard_mode
* Tue 20 Jan 2015 01:52:49 AM JST
            
* Tue 20 Jan 2015 01:53:38 AM JST
owner_events, grab_window, modifiers, key, pointer_mode,
                keyboard_mode
* Tue 20 Jan 2015 01:53:41 AM JST
                
* Tue 20 Jan 2015 01:55:58 AM JST
UngrabKey
* Tue 20 Jan 2015 01:56:25 AM JST
key, grab_window, modifiers
* Tue 20 Jan 2015 02:02:10 AM JST
AllowEvents
* Tue 20 Jan 2015 02:02:24 AM JST
35
* Tue 20 Jan 2015 02:02:46 AM JST
mode, time
* Tue 20 Jan 2015 02:04:14 AM JST
GrabServer
* Tue 20 Jan 2015 02:05:32 AM JST
UngrabServer
* Tue 20 Jan 2015 02:06:51 AM JST
QueryPointer
* Tue 20 Jan 2015 02:08:33 AM JST
GetMotionEvents
* Tue 20 Jan 2015 02:09:32 AM JST
self.
* Tue 20 Jan 2015 02:10:47 AM JST
TranslateCoordinates
* Tue 20 Jan 2015 02:11:19 AM JST
src_window, dst_window, src_x, src_y
* Tue 20 Jan 2015 02:13:38 AM JST
WarpPointer
* Tue 20 Jan 2015 02:14:29 AM JST
src_window, dst_window, src_x, src_y, src_width,
                    src_height, dst_x, dst_y
* Tue 20 Jan 2015 02:14:32 AM JST
                    
* Tue 20 Jan 2015 02:15:30 AM JST
src_window, dst_window, src_x, src_y,
                 src_width, src_height, dst_x, dst_y
* Tue 20 Jan 2015 02:15:38 AM JST
            
* Tue 20 Jan 2015 02:16:57 AM JST
SetInputFocus
* Tue 20 Jan 2015 02:17:30 AM JST
revert_to, focus, time
* Tue 20 Jan 2015 02:18:50 AM JST
GetInputFocus
* Tue 20 Jan 2015 02:21:55 AM JST
QueryKeymap
* Tue 20 Jan 2015 02:33:59 AM JST
OpenFont
* Tue 20 Jan 2015 02:34:28 AM JST
fid, name_len, name
* Tue 20 Jan 2015 02:35:41 AM JST
CloseFont
* Tue 20 Jan 2015 02:37:15 AM JST
QueryFont
* Tue 20 Jan 2015 02:38:42 AM JST
QueryTextExtents
* Tue 20 Jan 2015 02:39:16 AM JST
font, string_len, string
* Tue 20 Jan 2015 02:40:52 AM JST
ListFonts
* Tue 20 Jan 2015 02:41:12 AM JST
LietFon
* Tue 20 Jan 2015 02:41:24 AM JST
max_names, pattern_len, pattern
* Tue 20 Jan 2015 02:43:21 AM JST
ListFontsWithInfo
* Tue 20 Jan 2015 02:44:00 AM JST
max_names, pattern_len, pattern
* Tue 20 Jan 2015 02:45:35 AM JST
    def get_max_names(self, ):
        r"""SUMMARY
        
        get_max_names()
        
        @Return:

        @Error:
        """
        return self._buffer.get_max_names()

    def set_max_names(self, max_names):
        r"""SUMMARY
        
        set_max_names(_max_names)
        
        @Arguments:
        - [yas] elisp error!:
        
        @Return:

        @Error:
        """
        self._buffer.set_max_names(max_names)

    max_names = property(get_max_names, set_max_names)

    def get_pattern_len(self, ):
        r"""SUMMARY
        
        get_pattern_len()
        
        @Return:

        @Error:
        """
        return self._buffer.get_pattern_len()

    def set_pattern_len(self, pattern_len):
        r"""SUMMARY
        
        set_pattern_len(_pattern_len)
        
        @Arguments:
        - [yas] elisp error!:
        
        @Return:

        @Error:
        """
        self._buffer.set_pattern_len(pattern_len)

    pattern_len = property(get_pattern_len, set_pattern_len)

    def get_pattern(self, ):
        r"""SUMMARY
        
        get_pattern()
        
        @Return:

        @Error:
        """
        return self._buffer.get_pattern()

    def set_pattern(self, pattern):
        r"""SUMMARY
        
        set_pattern(_pattern)
        
        @Arguments:
        - [yas] elisp error!:
        
        @Return:

        @Error:
        """
        self._buffer.set_pattern(pattern)

    pattern = property(get_pattern, set_pattern)

    def request(self, ):
        r"""SUMMARY
        
        request()
        
        @Return:

        @Error:
        """
        return self._request.send(self._buffer.get_buffer())

    def __call__(self):
        return self.request()

* Tue 20 Jan 2015 02:47:04 AM JST
SetFontPath
* Tue 20 Jan 2015 02:47:57 AM JST
0buf
* Tue 20 Jan 2015 02:48:42 AM JST
GetFontPath
* Tue 20 Jan 2015 02:50:54 AM JST
CreatePixmap
* Tue 20 Jan 2015 02:51:54 AM JST
depth, pid, drawable, width, height
* Tue 20 Jan 2015 02:52:44 AM JST
depth, pid, drawable, width, height
* Tue 20 Jan 2015 02:53:47 AM JST
FreePixmap
* Tue 20 Jan 2015 02:55:24 AM JST
CreateGC
* Tue 20 Jan 2015 02:55:48 AM JST
cid, drawable, value_mask, value_list
* Tue 20 Jan 2015 02:56:28 AM JST
cid, drawable, value_mask, value_list,
* Tue 20 Jan 2015 02:57:11 AM JST
ChangeGC
* Tue 20 Jan 2015 02:57:39 AM JST
gc, value_mask, value_list
* Tue 20 Jan 2015 02:58:23 AM JST
gc, value_mask, value_list
* Tue 20 Jan 2015 02:58:58 AM JST
CopyGC
* Tue 20 Jan 2015 02:59:19 AM JST
src_gc, dst_gc, value_mask
* Tue 20 Jan 2015 02:59:58 AM JST
src_gc, dst_gc, value_mask
* Tue 20 Jan 2015 03:01:45 AM JST
SetDashes
* Tue 20 Jan 2015 03:02:09 AM JST
gc, dash_offset, dashes_len, dashes
* Tue 20 Jan 2015 03:03:06 AM JST
gc, dash_offset, dashes_len, dashes
* Tue 20 Jan 2015 03:04:31 AM JST
SetClipRectangles
* Tue 20 Jan 2015 03:04:54 AM JST
ordering, gc, clip_x_origin, clip_y_origin,
                          rectangles_len, rectangles
* Tue 20 Jan 2015 03:05:08 AM JST
                          
* Tue 20 Jan 2015 03:05:46 AM JST
ordering, gc, clip_x_origin, clip_y_origin,
                          rectangles_len, rectangles
* Tue 20 Jan 2015 03:05:49 AM JST
            
* Tue 20 Jan 2015 03:07:03 AM JST
FreeGC
* Tue 20 Jan 2015 03:10:57 AM JST
ClearArea
* Tue 20 Jan 2015 03:11:17 AM JST
exposures, window, x, y, width, height
* Tue 20 Jan 2015 03:11:57 AM JST
exposures, window, x, y, width, height
* Tue 20 Jan 2015 03:13:16 AM JST
CopyArea
* Tue 20 Jan 2015 03:14:07 AM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x,
                 dst_y, width, height
* Tue 20 Jan 2015 03:14:13 AM JST
                 
* Tue 20 Jan 2015 03:14:55 AM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x,
                 dst_y, width, height
* Tue 20 Jan 2015 03:15:02 AM JST
            
* Tue 20 Jan 2015 03:16:31 AM JST
CopyPlane
* Tue 20 Jan 2015 03:17:04 AM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane
* Tue 20 Jan 2015 03:18:05 AM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane
* Tue 20 Jan 2015 03:19:51 AM JST
PolyPoint
* Tue 20 Jan 2015 03:20:11 AM JST
coordinate_mode, drawable, gc, points_len, points
* Tue 20 Jan 2015 03:21:09 AM JST
coordinate_mode, drawable, gc, points_len, points
* Tue 20 Jan 2015 03:22:17 AM JST
PolyLine
* Tue 20 Jan 2015 03:22:44 AM JST
coordinate_mode, drawable, gc, points_len, points
* Tue 20 Jan 2015 03:23:22 AM JST
coordinate_mode, drawable, gc, points_len, points
* Tue 20 Jan 2015 03:24:20 AM JST
PolySegment
* Tue 20 Jan 2015 03:24:31 AM JST
drawable, gc, segments_len, segments
* Tue 20 Jan 2015 03:26:03 AM JST
PolyRectangle
* Tue 20 Jan 2015 03:26:41 AM JST
drawable, gc, rectangles_len, rectangles
* Tue 20 Jan 2015 03:28:02 AM JST
PolyArc
* Tue 20 Jan 2015 03:28:23 AM JST
drawable, gc, arcs_len, arcs
* Tue 20 Jan 2015 03:29:51 AM JST
FillPoly
* Tue 20 Jan 2015 03:30:18 AM JST
drawable, gc, shape, coordinate_mode, points_len,
                 points
* Tue 20 Jan 2015 03:31:06 AM JST
                 
* Tue 20 Jan 2015 03:32:49 AM JST
PolyFillRectangle
* Tue 20 Jan 2015 04:27:23 AM JST
drawable, gc, rectangles_len, rectangles
* Tue 20 Jan 2015 04:30:16 AM JST
drawable, gc, rectangles_len, rectangles
* Tue 20 Jan 2015 04:34:15 AM JST
PolyFillArc
* Tue 20 Jan 2015 04:35:35 AM JST
drawable, gc, arcs_len, arcs
* Tue 20 Jan 2015 04:36:22 AM JST
drawable, gc, arcs_len, arcs
* Tue 20 Jan 2015 04:38:25 AM JST
PutImage
* Tue 20 Jan 2015 04:39:01 AM JST
format, drawable, gc, width, height, dst_x, dst_y,
                 left_pad, depth, data_len, data
* Tue 20 Jan 2015 04:39:07 AM JST
                 
* Tue 20 Jan 2015 04:39:54 AM JST
format, drawable, gc, width, height, dst_x, dst_y,
                 left_pad, depth, data_len, data
* Tue 20 Jan 2015 04:39:58 AM JST
            
* Tue 20 Jan 2015 04:41:38 AM JST
GetImage
* Tue 20 Jan 2015 04:43:03 AM JST
format, drawable, x, y, width, height, plane_mask
* Tue 20 Jan 2015 04:44:58 AM JST
format, drawable, x, y, width, height, plane_mask
* Tue 20 Jan 2015 04:46:05 AM JST
PolyText8
* Tue 20 Jan 2015 04:47:33 AM JST
drawable, gc, x, y, items_len, items
* Tue 20 Jan 2015 04:48:59 AM JST
drawable, gc, x, y, items_len, items
* Tue 20 Jan 2015 04:50:17 AM JST
PolyText16
* Tue 20 Jan 2015 04:50:45 AM JST
PolyText8
* Tue 20 Jan 2015 04:51:04 AM JST
ImageText8
* Tue 20 Jan 2015 04:51:37 AM JST
string_len, drawable, gc, x, y, string
* Tue 20 Jan 2015 04:52:22 AM JST
string_len, drawable, gc, x, y, string
* Tue 20 Jan 2015 04:53:18 AM JST
ImageText16
* Tue 20 Jan 2015 04:53:43 AM JST
CreateColormap
* Tue 20 Jan 2015 04:54:14 AM JST
alloc, mid, window, visual
* Tue 20 Jan 2015 04:54:51 AM JST
alloc, mid, window, visual,
* Tue 20 Jan 2015 04:56:48 AM JST
FreeColormap
* Tue 20 Jan 2015 04:58:30 AM JST
CopyColormapAndFree
* Tue 20 Jan 2015 05:02:40 AM JST
InstallColormap
* Tue 20 Jan 2015 05:04:04 AM JST
UninstallColormap
* Tue 20 Jan 2015 05:05:33 AM JST
ListInstalledColormaps
* Tue 20 Jan 2015 05:07:56 AM JST
AllocColor
* Tue 20 Jan 2015 05:10:07 AM JST
cmap, red, green, blue,
* Tue 20 Jan 2015 05:10:36 AM JST
AllocNamedColor
* Tue 20 Jan 2015 05:11:07 AM JST
cmap, name_len, name
* Tue 20 Jan 2015 05:12:30 AM JST
cmap, name_len, name
* Tue 20 Jan 2015 05:13:01 AM JST
AllocColorCells
* Tue 20 Jan 2015 05:13:39 AM JST
contiguous, cmap, colors, planes
* Tue 20 Jan 2015 05:14:37 AM JST
contiguous, cmap, colors, planes
* Tue 20 Jan 2015 05:17:57 AM JST
AllocColorPlanes
* Tue 20 Jan 2015 05:19:29 AM JST
contiguous, cmap, colors, reds, greens, blues
* Tue 20 Jan 2015 05:20:38 AM JST
contiguous, cmap, colors, reds, greens, blues
* Tue 20 Jan 2015 05:21:55 AM JST
cmap, plane_mask, pixels_len, pixels
* Tue 20 Jan 2015 05:21:57 AM JST
FreeColors
* Tue 20 Jan 2015 05:22:24 AM JST
cmap, plane_mask, pixels_len, pixels
* Tue 20 Jan 2015 05:23:07 AM JST
cmap, plane_mask, pixels_len, pixels
* Tue 20 Jan 2015 05:24:26 AM JST
StoreColors
* Tue 20 Jan 2015 05:26:12 AM JST
cmap, items_len, items
* Tue 20 Jan 2015 05:26:55 AM JST
cmap, items_len, items
* Tue 20 Jan 2015 05:27:36 AM JST
StoreNamedColor
* Tue 20 Jan 2015 05:28:05 AM JST
flags, cmap, pixel, name_len, name
* Tue 20 Jan 2015 05:31:47 AM JST
QueryColors
* Tue 20 Jan 2015 05:32:09 AM JST
QueryColo
* Tue 20 Jan 2015 05:32:15 AM JST
Color
* Tue 20 Jan 2015 05:32:39 AM JST
cmap, pixels_len, pixels
* Tue 20 Jan 2015 05:34:11 AM JST
LookupColor
* Tue 20 Jan 2015 05:34:38 AM JST
cmap, name_len, name
* Tue 20 Jan 2015 05:35:53 AM JST
CreateCursor
* Tue 20 Jan 2015 05:37:31 AM JST
cid, source, mask, fore_red, fore_green, fore_blue,
                     back_red, back_green, back_blue, x, y
* Tue 20 Jan 2015 05:37:39 AM JST
                     
* Tue 20 Jan 2015 05:38:29 AM JST
cid, source, mask, fore_red, fore_green, fore_blue,
                     back_red, back_green, back_blue, x, y
* Tue 20 Jan 2015 05:38:35 AM JST
            
* Tue 20 Jan 2015 05:40:14 AM JST
CreateGlyphCursor
* Tue 20 Jan 2015 05:40:44 AM JST
cid, source_font, mask_font, source_char,
                          mask_char, fore_red, fore_green, fore_blue, back_red,
                          back_green, back_blue
* Tue 20 Jan 2015 05:40:49 AM JST
                          
* Tue 20 Jan 2015 05:40:53 AM JST
                          
* Tue 20 Jan 2015 05:41:36 AM JST
cid, source_font, mask_font, source_char,
                          mask_char, fore_red, fore_green, fore_blue, back_red,
                          back_green, back_blue
* Tue 20 Jan 2015 05:41:38 AM JST
                          
* Tue 20 Jan 2015 05:41:40 AM JST
                          
* Tue 20 Jan 2015 05:45:50 AM JST
FreeCursor
* Tue 20 Jan 2015 05:46:32 AM JST
self.
* Tue 20 Jan 2015 05:47:19 AM JST
RecolorCursor
* Tue 20 Jan 2015 05:48:27 AM JST
RecolorCursor
* Tue 20 Jan 2015 05:48:51 AM JST
cursor, fore_red, fore_green, fore_blue, back_red,
                      back_green, back_blue
* Tue 20 Jan 2015 05:48:56 AM JST
                      
* Tue 20 Jan 2015 05:49:38 AM JST
cursor, fore_red, fore_green, fore_blue, back_red,
                      back_green, back_blue
* Tue 20 Jan 2015 05:49:39 AM JST
                      
* Tue 20 Jan 2015 05:51:20 AM JST
_class, drawable, width, height
* Tue 20 Jan 2015 05:51:33 AM JST
QueryBestSize
* Tue 20 Jan 2015 05:52:01 AM JST
_class, drawable, width, height
* Tue 20 Jan 2015 05:53:32 AM JST
_class, drawable, width, height
* Tue 20 Jan 2015 05:55:53 AM JST
QueryExtension
* Tue 20 Jan 2015 05:56:59 AM JST
name_len, name
* Tue 20 Jan 2015 06:01:58 AM JST
ListExtensions
* Tue 20 Jan 2015 06:04:11 AM JST
ChangeKeyboardMapping
* Tue 20 Jan 2015 06:06:01 AM JST
ChangeKey
* Tue 20 Jan 2015 06:06:02 AM JST
xproto.ChangeKey
* Tue 20 Jan 2015 06:06:14 AM JST
keycode_count, first_keycode,
                              keysyms_per_keycode, keysyms
* Tue 20 Jan 2015 06:06:18 AM JST
                              
* Tue 20 Jan 2015 06:07:15 AM JST
keycode_count, first_keycode, keysyms_per_keycode,
                 keysyms
* Tue 20 Jan 2015 06:07:22 AM JST
            
* Tue 20 Jan 2015 06:09:19 AM JST
GetKeyboardMapping
* Tue 20 Jan 2015 06:09:53 AM JST
first_keycode, count
* Tue 20 Jan 2015 06:11:29 AM JST
ChangeKeyboardControl
* Tue 20 Jan 2015 06:11:42 AM JST
ChangeKeyboardControl
* Tue 20 Jan 2015 06:12:07 AM JST
value_mask, value_list
* Tue 20 Jan 2015 06:12:41 AM JST
ChnageKeyboa
* Tue 20 Jan 2015 06:12:54 AM JST
value_mask, value_list
* Tue 20 Jan 2015 06:13:23 AM JST
GetKeyboardControl
* Tue 20 Jan 2015 06:14:21 AM JST
self
* Tue 20 Jan 2015 06:14:53 AM JST
            
* Tue 20 Jan 2015 06:15:04 AM JST
Bell
* Tue 20 Jan 2015 06:21:36 AM JST
ChangePointerControl
* Tue 20 Jan 2015 06:22:11 AM JST
acceleration_numerator,
                             acceleration_denominator, threshold,
                             do_acceleration, do_threshold
* Tue 20 Jan 2015 06:22:19 AM JST
                             
* Tue 20 Jan 2015 06:22:20 AM JST
                             
* Tue 20 Jan 2015 06:23:19 AM JST
acceleration_numerator,
                             acceleration_denominator, threshold,
                             do_acceleration, do_threshold
* Tue 20 Jan 2015 06:23:24 AM JST
            
* Tue 20 Jan 2015 06:23:25 AM JST
                             
* Tue 20 Jan 2015 06:23:36 AM JST
acceleration_numerator
* Tue 20 Jan 2015 06:23:38 AM JST
    
* Tue 20 Jan 2015 06:23:43 AM JST
acceleration_numerator
* Tue 20 Jan 2015 06:23:59 AM JST
acceleration_denominator
* Tue 20 Jan 2015 06:24:14 AM JST
threshold
* Tue 20 Jan 2015 06:24:20 AM JST
do_acceleration
* Tue 20 Jan 2015 06:24:27 AM JST
do_threshold
* Tue 20 Jan 2015 06:24:39 AM JST
GetPointerControl
* Tue 20 Jan 2015 06:25:01 AM JST
GetP
* Tue 20 Jan 2015 06:26:38 AM JST
SetScreenSaver
* Tue 20 Jan 2015 06:27:20 AM JST
timeout, interval, prefer_blanking, allow_exposures
* Tue 20 Jan 2015 06:29:57 AM JST
GetScreenSaver
* Tue 20 Jan 2015 06:31:39 AM JST
ChangeHosts
* Tue 20 Jan 2015 06:32:05 AM JST
Change
* Tue 20 Jan 2015 06:32:25 AM JST
SetAccessControl
* Tue 20 Jan 2015 06:32:41 AM JST
SetCloseDownMode
* Tue 20 Jan 2015 06:32:58 AM JST
KillClient
* Tue 20 Jan 2015 06:57:39 AM JST
RotateProperties
* Tue 20 Jan 2015 06:57:54 AM JST
ForceScreenSaver
* Tue 20 Jan 2015 06:58:08 AM JST
SetPointerMapping
* Tue 20 Jan 2015 06:58:32 AM JST
GetPointerMapping
* Tue 20 Jan 2015 06:58:47 AM JST
SetModifierMapping
* Tue 20 Jan 2015 06:59:07 AM JST
GetModifierMapping
* Tue 20 Jan 2015 06:59:24 AM JST
NoOperation
* Tue 20 Jan 2015 06:59:53 AM JST
ChangeHosts
* Tue 20 Jan 2015 07:00:16 AM JST
mode, family, address_len, address
* Tue 20 Jan 2015 07:22:53 AM JST
VoidCookie
* Tue 20 Jan 2015 07:24:38 AM JST
mode
* Tue 20 Jan 2015 07:25:44 AM JST
            
* Tue 20 Jan 2015 07:29:47 AM JST
SetCloseDownMode
* Tue 20 Jan 2015 07:32:05 AM JST
KillClient
* Tue 20 Jan 2015 07:36:12 AM JST
Rota
* Tue 20 Jan 2015 07:36:26 AM JST
window, atoms_len, delta, atoms
* Tue 20 Jan 2015 07:41:20 AM JST
ForceScreenSaver
* Tue 20 Jan 2015 07:44:49 AM JST
GetPointerMappingCookie
* Tue 20 Jan 2015 07:47:21 AM JST
SetModifierMappingCookie
* Tue 20 Jan 2015 07:47:33 AM JST
keycodes_per_modifier, keycodes
* Tue 20 Jan 2015 07:49:40 AM JST
GetModifierMappingCookie
* Tue 20 Jan 2015 08:18:24 AM JST
from wxcb.protocol.xproto import requests
* Tue 20 Jan 2015 08:25:36 AM JST
import 
* Tue 20 Jan 2015 08:25:49 AM JST
xproto
* Tue 20 Jan 2015 08:25:50 AM JST
protocol.xproto
* Tue 20 Jan 2015 08:29:27 AM JST
GetKeyboardMapping
* Tue 20 Jan 2015 08:29:40 AM JST
requests.GetKeyboardMapping(8, )
* Tue 20 Jan 2015 08:30:40 AM JST
0]
* Tue 20 Jan 2015 08:30:42 AM JST
roots
* Tue 20 Jan 2015 08:37:48 AM JST
g=requests.GetKeyboardMapping(8, 255, 255 - 8)
* Tue 20 Jan 2015 08:37:55 AM JST
from wxcb.protocol.xproto import requests
* Tue 20 Jan 2015 08:38:02 AM JST
from wxcb.protocol.xproto import requests
g=requests.GetKeyboardMapping(8, 255, 255 - 8)
* Tue 20 Jan 2015 08:39:32 AM JST
from wxcb.protocol.xproto import requests
g=requests.GetKeyboardMapping(8, 255, 255 - 8)
* Tue 20 Jan 2015 08:42:19 AM JST
SendRequest
* Tue 20 Jan 2015 08:42:26 AM JST
SendRequest
* Tue 20 Jan 2015 08:45:28 AM JST
from wxcb.protocol.xproto import requests
g=requests.GetKeyboardMapping(8, 255, 255 - 8)
* Tue 20 Jan 2015 08:48:47 AM JST
request()
* Tue 20 Jan 2015 09:14:26 AM JST
1
* Tue 20 Jan 2015 09:17:09 AM JST
xproto.GetWindowAttributesCookie
* Tue 20 Jan 2015 09:18:00 AM JST
opcode
* Tue 20 Jan 2015 09:18:00 AM JST
self.opcode
* Tue 20 Jan 2015 09:18:18 AM JST
opcode
* Tue 20 Jan 2015 09:18:19 AM JST
self.opcode
* Tue 20 Jan 2015 09:18:40 AM JST
opcode
* Tue 20 Jan 2015 09:18:40 AM JST
self.opcode
* Tue 20 Jan 2015 09:18:57 AM JST
opcode
* Tue 20 Jan 2015 09:18:58 AM JST
self.opcode
* Tue 20 Jan 2015 09:19:18 AM JST
opcode
* Tue 20 Jan 2015 09:19:19 AM JST
self.opcode
* Tue 20 Jan 2015 09:19:36 AM JST
opcode
* Tue 20 Jan 2015 09:19:36 AM JST
self.opcode
* Tue 20 Jan 2015 09:21:14 AM JST
opcode
* Tue 20 Jan 2015 09:21:15 AM JST
self.opcode
* Tue 20 Jan 2015 09:21:32 AM JST
opcode
* Tue 20 Jan 2015 09:21:32 AM JST
self.opcode
* Tue 20 Jan 2015 09:21:41 AM JST
xproto.GetGeometryCookie
* Tue 20 Jan 2015 09:22:05 AM JST
opcode
* Tue 20 Jan 2015 09:22:05 AM JST
self.opcode
* Tue 20 Jan 2015 09:22:12 AM JST
xproto.QueryTreeCookie
* Tue 20 Jan 2015 09:22:47 AM JST
xproto.InternAtomCookie
* Tue 20 Jan 2015 09:23:09 AM JST
opcode
* Tue 20 Jan 2015 09:23:09 AM JST
self.opcode
* Tue 20 Jan 2015 09:23:19 AM JST
xproto.GetAtomNameCookie
* Tue 20 Jan 2015 09:23:57 AM JST
opcode
* Tue 20 Jan 2015 09:23:57 AM JST
self.opcode
* Tue 20 Jan 2015 09:24:37 AM JST
opcode
* Tue 20 Jan 2015 09:24:38 AM JST
self.opcode
* Tue 20 Jan 2015 09:24:44 AM JST
xproto.GetPropertyCookie
* Tue 20 Jan 2015 09:25:12 AM JST
opcode
* Tue 20 Jan 2015 09:25:12 AM JST
self.opcode
* Tue 20 Jan 2015 09:25:18 AM JST
xproto.ListPropertiesCookie
* Tue 20 Jan 2015 09:25:28 AM JST
            
* Tue 20 Jan 2015 09:25:31 AM JST
    
* Tue 20 Jan 2015 09:25:45 AM JST
opcode
* Tue 20 Jan 2015 09:25:45 AM JST
self.opcode
* Tue 20 Jan 2015 09:26:04 AM JST
opcode
* Tue 20 Jan 2015 09:26:05 AM JST
self.opcode
* Tue 20 Jan 2015 09:26:12 AM JST
xproto.GetSelectionOwnerCookie
* Tue 20 Jan 2015 09:26:22 AM JST
            
* Tue 20 Jan 2015 09:26:42 AM JST
opcode
* Tue 20 Jan 2015 09:26:43 AM JST
self.opcode
* Tue 20 Jan 2015 09:27:06 AM JST
opcode
* Tue 20 Jan 2015 09:27:07 AM JST
self.opcode
* Tue 20 Jan 2015 09:41:23 AM JST
opcode
* Tue 20 Jan 2015 09:41:24 AM JST
self.opcode
* Tue 20 Jan 2015 09:41:30 AM JST
xproto.GrabPointerCookie
* Tue 20 Jan 2015 09:41:57 AM JST
opcode
* Tue 20 Jan 2015 09:41:58 AM JST
self.opcode
* Tue 20 Jan 2015 09:43:35 AM JST
opcode
* Tue 20 Jan 2015 09:43:35 AM JST
self.opcode
* Tue 20 Jan 2015 09:43:50 AM JST
opcode
* Tue 20 Jan 2015 09:43:51 AM JST
self.opcode
* Tue 20 Jan 2015 09:44:02 AM JST
opcode
* Tue 20 Jan 2015 09:44:02 AM JST
self.opcode
* Tue 20 Jan 2015 09:44:10 AM JST
xproto.GrabKeyboardCookie
* Tue 20 Jan 2015 09:44:23 AM JST
opcode
* Tue 20 Jan 2015 09:44:24 AM JST
self.opcode
* Tue 20 Jan 2015 09:44:39 AM JST
opcode
* Tue 20 Jan 2015 09:44:40 AM JST
self.opcode
* Tue 20 Jan 2015 09:44:55 AM JST
opcode
* Tue 20 Jan 2015 09:44:56 AM JST
self.opcode
* Tue 20 Jan 2015 09:45:17 AM JST
opcode
* Tue 20 Jan 2015 09:45:18 AM JST
self.opcode
* Tue 20 Jan 2015 09:45:29 AM JST
opcode
* Tue 20 Jan 2015 09:45:30 AM JST
self.opcode
* Tue 20 Jan 2015 09:45:42 AM JST
opcode
* Tue 20 Jan 2015 09:45:42 AM JST
self.opcode
* Tue 20 Jan 2015 09:46:09 AM JST
xproto.QueryPointerCookie
* Tue 20 Jan 2015 09:46:39 AM JST
opcode
* Tue 20 Jan 2015 09:46:40 AM JST
self.opcode
* Tue 20 Jan 2015 09:46:46 AM JST
xproto.GetMotionEventsCookie
* Tue 20 Jan 2015 09:47:10 AM JST
opcode
* Tue 20 Jan 2015 09:47:10 AM JST
self.opcode
* Tue 20 Jan 2015 09:47:19 AM JST
xproto.TranslateCoordinatesCookie
* Tue 20 Jan 2015 09:47:36 AM JST
opcode
* Tue 20 Jan 2015 09:47:36 AM JST
self.opcode
* Tue 20 Jan 2015 09:48:00 AM JST
opcode
* Tue 20 Jan 2015 09:48:00 AM JST
self.opcode
* Tue 20 Jan 2015 09:48:14 AM JST
opcode
* Tue 20 Jan 2015 09:48:15 AM JST
self.opcode
* Tue 20 Jan 2015 09:48:21 AM JST
xproto.GetInputFocusCookie
* Tue 20 Jan 2015 09:48:50 AM JST
opcode
* Tue 20 Jan 2015 09:48:50 AM JST
self.opcode
* Tue 20 Jan 2015 09:48:55 AM JST
xproto.QueryKeymapCookie
* Tue 20 Jan 2015 09:49:11 AM JST
opcode
* Tue 20 Jan 2015 09:49:11 AM JST
self.opcode
* Tue 20 Jan 2015 09:54:25 AM JST
name_len
* Tue 20 Jan 2015 10:00:07 AM JST
opcode
* Tue 20 Jan 2015 10:00:07 AM JST
self.opcode
* Tue 20 Jan 2015 10:00:25 AM JST
opcode
* Tue 20 Jan 2015 10:00:25 AM JST
self.opcode
* Tue 20 Jan 2015 10:00:35 AM JST
xproto.QueryFontCookie
* Tue 20 Jan 2015 10:00:59 AM JST
xproto.QueryTextExtentsCookie
* Tue 20 Jan 2015 10:01:29 AM JST
xproto.ListFontsCookie
* Tue 20 Jan 2015 10:01:43 AM JST
opcode
* Tue 20 Jan 2015 10:01:43 AM JST
self.opcode
* Tue 20 Jan 2015 10:01:50 AM JST
xproto.ListFontsWithInfoCookie
* Tue 20 Jan 2015 10:02:38 AM JST
opcode
* Tue 20 Jan 2015 10:02:38 AM JST
self.opcode
* Tue 20 Jan 2015 10:02:46 AM JST
xproto.GetFontPathCookie
* Tue 20 Jan 2015 10:02:59 AM JST
opcode
* Tue 20 Jan 2015 10:02:59 AM JST
self.opcode
* Tue 20 Jan 2015 10:03:22 AM JST
opcode
* Tue 20 Jan 2015 10:03:22 AM JST
self.opcode
* Tue 20 Jan 2015 10:04:17 AM JST
opcode
* Tue 20 Jan 2015 10:04:17 AM JST
self.opcode
* Tue 20 Jan 2015 10:05:01 AM JST
opcode
* Tue 20 Jan 2015 10:05:03 AM JST
self
* Tue 20 Jan 2015 10:05:14 AM JST
opcode
* Tue 20 Jan 2015 10:05:15 AM JST
self.opcode
* Tue 20 Jan 2015 10:05:26 AM JST
opcode
* Tue 20 Jan 2015 10:05:26 AM JST
self.opcode
* Tue 20 Jan 2015 10:05:38 AM JST
opcode
* Tue 20 Jan 2015 10:05:38 AM JST
self.opcode
* Tue 20 Jan 2015 10:05:48 AM JST
opcode
* Tue 20 Jan 2015 10:05:48 AM JST
self.opcode
* Tue 20 Jan 2015 10:06:04 AM JST
opcode
* Tue 20 Jan 2015 10:06:04 AM JST
self.opcode
* Tue 20 Jan 2015 10:06:17 AM JST
opcode
* Tue 20 Jan 2015 10:06:17 AM JST
self.opcode
* Tue 20 Jan 2015 10:06:27 AM JST
opcode
* Tue 20 Jan 2015 10:06:28 AM JST
self.opcode
* Tue 20 Jan 2015 10:06:44 AM JST
opcode
* Tue 20 Jan 2015 10:06:44 AM JST
self.opcode
* Tue 20 Jan 2015 10:07:00 AM JST
opcode
* Tue 20 Jan 2015 10:07:00 AM JST
self.opcode
* Tue 20 Jan 2015 10:07:40 AM JST
opcode
* Tue 20 Jan 2015 10:07:41 AM JST
self.opcode
* Tue 20 Jan 2015 10:07:57 AM JST
opcode
* Tue 20 Jan 2015 10:07:58 AM JST
self.opcode
* Tue 20 Jan 2015 10:08:10 AM JST
opcode
* Tue 20 Jan 2015 10:08:10 AM JST
self.opcode
* Tue 20 Jan 2015 10:08:23 AM JST
opcode
* Tue 20 Jan 2015 10:08:23 AM JST
self.opcode
* Tue 20 Jan 2015 10:08:36 AM JST
opcode
* Tue 20 Jan 2015 10:08:36 AM JST
self.opcode
* Tue 20 Jan 2015 10:08:44 AM JST
opcode
* Tue 20 Jan 2015 10:08:45 AM JST
self.opcode
* Tue 20 Jan 2015 10:08:55 AM JST
opcode
* Tue 20 Jan 2015 10:08:55 AM JST
self.opcode
* Tue 20 Jan 2015 10:09:07 AM JST
opcode
* Tue 20 Jan 2015 10:09:08 AM JST
self.opcode
* Tue 20 Jan 2015 10:09:14 AM JST
xproto.GetImageCookie
* Tue 20 Jan 2015 10:09:24 AM JST
opcode
* Tue 20 Jan 2015 10:09:26 AM JST
self
* Tue 20 Jan 2015 10:09:38 AM JST
opcode
* Tue 20 Jan 2015 10:09:38 AM JST
self.opcode
* Tue 20 Jan 2015 10:09:48 AM JST
opcode
* Tue 20 Jan 2015 10:09:48 AM JST
self.opcode
* Tue 20 Jan 2015 10:09:59 AM JST
opcode
* Tue 20 Jan 2015 10:10:00 AM JST
self.opcode
* Tue 20 Jan 2015 10:10:11 AM JST
opcode
* Tue 20 Jan 2015 10:10:11 AM JST
self.opcode
* Tue 20 Jan 2015 10:10:20 AM JST
opcode
* Tue 20 Jan 2015 10:10:21 AM JST
self.opcode
* Tue 20 Jan 2015 10:10:24 AM JST
cookietype
* Tue 20 Jan 2015 10:10:24 AM JST
self.cookietype
* Tue 20 Jan 2015 10:10:30 AM JST
opcode
* Tue 20 Jan 2015 10:10:30 AM JST
self.opcode
* Tue 20 Jan 2015 10:10:41 AM JST
opcode
* Tue 20 Jan 2015 10:10:41 AM JST
self.opcode
* Tue 20 Jan 2015 10:10:47 AM JST
xproto.ListInstalledColormapsCookie
* Tue 20 Jan 2015 10:11:04 AM JST
opcode
* Tue 20 Jan 2015 10:11:05 AM JST
self.opcode
* Tue 20 Jan 2015 10:11:11 AM JST
xproto.AllocColorCookie
* Tue 20 Jan 2015 10:11:23 AM JST
opcode
* Tue 20 Jan 2015 10:11:23 AM JST
self.opcode
* Tue 20 Jan 2015 10:11:31 AM JST
xproto.AllocNamedColorCookie
* Tue 20 Jan 2015 10:11:47 AM JST
opcode
* Tue 20 Jan 2015 10:11:48 AM JST
self.opcode
* Tue 20 Jan 2015 10:11:58 AM JST
xproto.AllocColorCellsCookie
* Tue 20 Jan 2015 10:12:43 AM JST
opcode
* Tue 20 Jan 2015 10:12:44 AM JST
self.opcode
* Tue 20 Jan 2015 10:12:50 AM JST
xproto.AllocColorPlanesCookie
* Tue 20 Jan 2015 10:13:48 AM JST
opcode
* Tue 20 Jan 2015 10:13:48 AM JST
self.opcode
* Tue 20 Jan 2015 10:14:01 AM JST
opcode
* Tue 20 Jan 2015 10:14:02 AM JST
self.opcode
* Tue 20 Jan 2015 10:14:12 AM JST
opcode
* Tue 20 Jan 2015 10:14:13 AM JST
self.opcode
* Tue 20 Jan 2015 10:14:26 AM JST
opcode
* Tue 20 Jan 2015 10:14:26 AM JST
self.opcode
* Tue 20 Jan 2015 10:14:33 AM JST
xproto.QueryColorsCookie
* Tue 20 Jan 2015 10:14:43 AM JST
opcode
* Tue 20 Jan 2015 10:14:43 AM JST
self.opcode
* Tue 20 Jan 2015 10:14:50 AM JST
xproto.LookupColorCookie
* Tue 20 Jan 2015 10:15:09 AM JST
opcode
* Tue 20 Jan 2015 10:15:09 AM JST
self.opcode
* Tue 20 Jan 2015 10:15:20 AM JST
opcode
* Tue 20 Jan 2015 10:15:21 AM JST
self.opcode
* Tue 20 Jan 2015 10:15:31 AM JST
opcode
* Tue 20 Jan 2015 10:15:31 AM JST
self.opcode
* Tue 20 Jan 2015 10:15:42 AM JST
opcode
* Tue 20 Jan 2015 10:15:43 AM JST
self.opcode
* Tue 20 Jan 2015 10:15:46 AM JST
cookietype
* Tue 20 Jan 2015 10:15:46 AM JST
self.cookietype
* Tue 20 Jan 2015 10:15:53 AM JST
opcode
* Tue 20 Jan 2015 10:15:54 AM JST
self.opcode
* Tue 20 Jan 2015 10:16:01 AM JST
xproto.QueryBestSizeCookie
* Tue 20 Jan 2015 10:16:18 AM JST
opcode
* Tue 20 Jan 2015 10:16:19 AM JST
self.opcode
* Tue 20 Jan 2015 10:16:24 AM JST
xproto.QueryExtensionCookie
* Tue 20 Jan 2015 10:16:38 AM JST
opcode
* Tue 20 Jan 2015 10:16:38 AM JST
self.opcode
* Tue 20 Jan 2015 10:16:49 AM JST
xproto.ListExtensionsCookie
* Tue 20 Jan 2015 10:17:01 AM JST
opcode
* Tue 20 Jan 2015 10:17:01 AM JST
self.opcode
* Tue 20 Jan 2015 10:17:16 AM JST
opcode
* Tue 20 Jan 2015 10:17:16 AM JST
self.opcode
* Tue 20 Jan 2015 10:17:24 AM JST
xproto.GetKeyboardMappingCookie
* Tue 20 Jan 2015 10:17:40 AM JST
opcode
* Tue 20 Jan 2015 10:17:41 AM JST
self.opcode
* Tue 20 Jan 2015 10:17:55 AM JST
opcode
* Tue 20 Jan 2015 10:17:56 AM JST
self.opcode
* Tue 20 Jan 2015 10:18:02 AM JST
xproto.GetKeyboardControlCookie
* Tue 20 Jan 2015 10:18:32 AM JST
opcode
* Tue 20 Jan 2015 10:18:32 AM JST
self.opcode
* Tue 20 Jan 2015 10:18:44 AM JST
opcode
* Tue 20 Jan 2015 10:18:44 AM JST
self.opcode
* Tue 20 Jan 2015 10:18:58 AM JST
opcode
* Tue 20 Jan 2015 10:18:59 AM JST
self.opcode
* Tue 20 Jan 2015 10:19:08 AM JST
xproto.GetPointerControlCookie
* Tue 20 Jan 2015 10:19:51 AM JST
opcode
* Tue 20 Jan 2015 10:19:51 AM JST
self.opcode
* Tue 20 Jan 2015 10:20:04 AM JST
opcode
* Tue 20 Jan 2015 10:20:05 AM JST
self.opcode
* Tue 20 Jan 2015 10:20:12 AM JST
xproto.GetScreenSaverCookie
* Tue 20 Jan 2015 10:20:43 AM JST
opcode
* Tue 20 Jan 2015 10:20:43 AM JST
self.opcode
* Tue 20 Jan 2015 10:20:55 AM JST
opcode
* Tue 20 Jan 2015 10:20:55 AM JST
self.opcode
* Tue 20 Jan 2015 10:21:01 AM JST
xproto.ListHostsCookie
* Tue 20 Jan 2015 10:21:13 AM JST
opcode
* Tue 20 Jan 2015 10:21:14 AM JST
self.opcode
* Tue 20 Jan 2015 10:21:23 AM JST
opcode
* Tue 20 Jan 2015 10:21:24 AM JST
self.opcode
* Tue 20 Jan 2015 10:21:36 AM JST
opcode
* Tue 20 Jan 2015 10:21:37 AM JST
self.opcode
* Tue 20 Jan 2015 10:21:48 AM JST
opcode
* Tue 20 Jan 2015 10:21:48 AM JST
self.opcode
* Tue 20 Jan 2015 10:21:53 AM JST
cookietype
* Tue 20 Jan 2015 10:21:54 AM JST
self.cookietype
* Tue 20 Jan 2015 10:22:01 AM JST
opcode
* Tue 20 Jan 2015 10:22:01 AM JST
self.opcode
* Tue 20 Jan 2015 10:22:16 AM JST
opcode
* Tue 20 Jan 2015 10:22:16 AM JST
self.opcode
* Tue 20 Jan 2015 10:22:24 AM JST
xproto.SetPointerMappingCookie
* Tue 20 Jan 2015 10:22:40 AM JST
opcode
* Tue 20 Jan 2015 10:22:40 AM JST
self.opcode
* Tue 20 Jan 2015 10:22:46 AM JST
xproto.GetPointerMappingCookie
* Tue 20 Jan 2015 10:22:59 AM JST
opcode
* Tue 20 Jan 2015 10:23:00 AM JST
self.opcode
* Tue 20 Jan 2015 10:23:07 AM JST
xproto.SetModifierMappingCookie
* Tue 20 Jan 2015 10:23:20 AM JST
opcode
* Tue 20 Jan 2015 10:23:21 AM JST
self.opcode
* Tue 20 Jan 2015 10:23:28 AM JST
xproto.GetModifierMappingCookie
* Tue 20 Jan 2015 10:24:43 AM JST
opcode
* Tue 20 Jan 2015 10:24:43 AM JST
self.opcode
* Tue 20 Jan 2015 11:07:42 PM JST
scripts
* Tue 20 Jan 2015 11:08:02 PM JST
from ref.CMD import thunar
* Tue 20 Jan 2015 11:08:45 PM JST
from myarchive import MyArchive, inputpass
* Tue 20 Jan 2015 11:09:10 PM JST
    archive = MyArchive(inputpass.EasyGUIInputPass(title='CryptedDisk'))
    if not archive.ismounted():
        archive.mount()

* Tue 20 Jan 2015 11:09:20 PM JST
thunar.openthunar(str(recipe.ARCHIVE_PATH))
* Tue 20 Jan 2015 11:09:45 PM JST
from myarchive import MyArchive, inputpass
* Tue 20 Jan 2015 11:09:50 PM JST
archive = MyArchive(inputpass.EasyGUIInputPass(title='CryptedDisk'))
* Tue 20 Jan 2015 11:09:54 PM JST
archive
* Tue 20 Jan 2015 11:11:08 PM JST
from ref import recipe
* Tue 20 Jan 2015 11:11:43 PM JST
manual')
* Tue 20 Jan 2015 11:11:43 PM JST
ref/manual')
* Tue 20 Jan 2015 11:11:44 PM JST
joinpath('ref/manual')
* Tue 20 Jan 2015 11:11:44 PM JST
directory.joinpath('ref/manual')
* Tue 20 Jan 2015 11:12:04 PM JST
from mypath import MyArchive
* Tue 20 Jan 2015 11:12:44 PM JST
from mypath import MyArchive
* Tue 20 Jan 2015 11:12:59 PM JST
ismounted
* Tue 20 Jan 2015 11:13:05 PM JST
mount
* Tue 20 Jan 2015 11:14:14 PM JST
from mypath import MyArchive
* Wed 21 Jan 2015 04:30:50 AM JST
def
* Wed 21 Jan 2015 04:33:02 AM JST
from xcb.xproto import EventMask
* Wed 21 Jan 2015 04:34:29 AM JST
from xcb.xproto import EventMask
* Wed 21 Jan 2015 04:37:05 AM JST
$1
* Wed 21 Jan 2015 04:40:33 AM JST
    def get_detail(self, ):
        r"""SUMMARY
        
        get_detail()
        
        @Return:

        @Error:
        """
        return self._detail

    def set_detail(self, detail):
        r"""SUMMARY
        
        set_detail(detail)
        
        @Arguments:
        - [yas] elisp error!:
        
        @Return:

        @Error:
        """
        self._detail = detail

    detail = property(get_detail, set_detail)

    def get_sequence_number(self, ):
        r"""SUMMARY
        
        get_sequence_number()
        
        @Return:

        @Error:
        """
        return self._sequence_number

    def set_sequence_number(self, sequence_number):
        r"""SUMMARY
        
        set_sequence_number(sequence_number)
        
        @Arguments:
        - [yas] elisp error!:
        
        @Return:

        @Error:
        """
        self._sequence_number = sequence_number

    sequence_number = property(get_sequence_number, set_sequence_number)

* Wed 21 Jan 2015 04:43:22 AM JST

* Wed 21 Jan 2015 04:43:31 AM JST
detail
* Wed 21 Jan 2015 04:52:36 AM JST
keypress.KeyPress(0, 482, 38, 0, 0, 482, 482, 0, 0,0,0,0,0)
* Wed 21 Jan 2015 04:52:41 AM JST
keypress
* Wed 21 Jan 2015 04:52:53 AM JST
EventAbstract
* Wed 21 Jan 2015 04:53:12 AM JST
abstract.EventAbstract
* Wed 21 Jan 2015 05:04:33 AM JST
482, 
* Wed 21 Jan 2015 05:04:33 AM JST
0, 482, 
* Wed 21 Jan 2015 05:05:48 AM JST
'\x01&\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Wed 21 Jan 2015 05:14:15 AM JST
0, 482, 38, 0, 0, 482, 482, 0, 0,0,0,0,0,0
* Wed 21 Jan 2015 05:14:27 AM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x01\x00\x00\x00\x02&\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Wed 21 Jan 2015 05:14:37 AM JST
'\x01&\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Wed 21 Jan 2015 05:57:31 AM JST
KeyPress
* Wed 21 Jan 2015 05:57:35 AM JST
KeyPress
* Wed 21 Jan 2015 05:57:39 AM JST
KeyPress
* Wed 21 Jan 2015 06:03:31 AM JST
code = EventMask.KeyPress
* Wed 21 Jan 2015 06:03:42 AM JST
                 
* Wed 21 Jan 2015 06:24:20 AM JST

* Wed 21 Jan 2015 06:24:20 AM JST

* Wed 21 Jan 2015 06:24:20 AM JST
from xcb.xproto import EventMask

* Wed 21 Jan 2015 06:29:29 AM JST
destination
* Wed 21 Jan 2015 06:36:10 AM JST
_requ
* Wed 21 Jan 2015 06:36:10 AM JST
self._requ
* Wed 21 Jan 2015 06:37:23 AM JST
from xcb.xproto import EventMask
* Wed 21 Jan 2015 06:37:34 AM JST
EventCode.KeyPress
* Wed 21 Jan 2015 06:38:05 AM JST
SendKey
* Wed 21 Jan 2015 06:39:52 AM JST
from xcb2.xproto.ext.sendevent.eventcode import EventCode
* Wed 21 Jan 2015 06:40:25 AM JST
EventCode.KeyPress
* Wed 21 Jan 2015 06:44:41 AM JST
propagate = propagate
* Wed 21 Jan 2015 06:45:02 AM JST
_propagate
* Wed 21 Jan 2015 06:45:50 AM JST
destination
* Wed 21 Jan 2015 06:48:25 AM JST
def
* Wed 21 Jan 2015 06:48:27 AM JST
    def
* Wed 21 Jan 2015 06:48:43 AM JST
_request
* Wed 21 Jan 2015 06:48:47 AM JST
_request
* Wed 21 Jan 2015 06:49:14 AM JST
.get_$1()
* Wed 21 Jan 2015 06:49:17 AM JST
_request
* Wed 21 Jan 2015 06:49:23 AM JST
_request
* Wed 21 Jan 2015 06:50:54 AM JST
    def get_samescreen(self, ):
        r"""SUMMARY
        
        get_samescreen()
        
        @Return:

        @Error:
        """
        return self._event.get_samescreen()

    def set_samescreen(self, samescreen):
        r"""SUMMARY
        
        set_samescreen(samescreen)
        
        @Arguments:
        - [yas] elisp error!:
        
        @Return:

        @Error:
        """
        self._event.set_samescreen(samescreen)

    samescreen = property(get_samescreen, set_samescreen)

    def get_sequence_number(self, ):
        r"""SUMMARY
        
        get_sequence_number()
        
        @Return:

        @Error:
        """
        return self._event.get_sequence_number()

    def set_sequence_number(self, sequence_number):
        r"""SUMMARY
        
        set_sequence_number(sequence_number)
        
        @Arguments:
        - [yas] elisp error!:
        
        @Return:

        @Error:
        """
        self._event.set_sequence_number(sequence_number)

    sequence_number = property(get_sequence_number, set_sequence_number)

    def get_detail(self, ):
        r"""SUMMARY
        
        get_detail()
        
        @Return:

        @Error:
        """
        return self._event.get_detail()

    def set_detail(self, detail):
        r"""SUMMARY
        
        set_detail(detail)
        
        @Arguments:
        - [yas] elisp error!:
        
        @Return:

        @Error:
        """
        self._event.set_detail(detail)

    detail = property(get_detail, set_detail)


* Wed 21 Jan 2015 06:51:04 AM JST
    def get_detail(self, ):
        r"""SUMMARY
        
        get_detail()
        
        @Return:

        @Error:
        """
        return self._event.get_detail()

    def set_detail(self, detail):
        r"""SUMMARY
        
        set_detail(detail)
        
        @Arguments:
        - [yas] elisp error!:
        
        @Return:

        @Error:
        """
        self._event.set_detail(detail)

    detail = property(get_detail, set_detail)

* Wed 21 Jan 2015 06:51:53 AM JST
    def get_propagate(self, ):
        r"""SUMMARY

        get_propagate()

        @Return:

        @Error:
        """
        return self._request.get_propagate()

    def set_propagate(self, propagate):
        r"""SUMMARY

        set_propagate(propagate)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._request.set_propagate(propagate)

    propagate = property(get_propagate, set_propagate)

    def get_destination(self, ):
        r"""SUMMARY

        get_destination()

        @Return:

        @Error:
        """
        return self._request.get_destination()

    def set_destination(self, destination):
        r"""SUMMARY

        set_destination(destination)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._request.set_destination(destination)

    destination = property(get_destination, set_destination)

* Wed 21 Jan 2015 07:19:44 AM JST
hello'
* Wed 21 Jan 2015 07:19:44 AM JST
b', 'hello'
* Wed 21 Jan 2015 07:21:26 AM JST
5)
* Wed 21 Jan 2015 07:21:27 AM JST
str(5)
* Wed 21 Jan 2015 07:21:42 AM JST
            
* Wed 21 Jan 2015 07:29:51 AM JST
requests
* Wed 21 Jan 2015 07:30:00 AM JST
requests.
* Wed 21 Jan 2015 07:35:13 AM JST
name
* Wed 21 Jan 2015 07:35:30 AM JST
title
* Wed 21 Jan 2015 07:35:33 AM JST
54525974
* Wed 21 Jan 2015 07:41:09 AM JST
cookietype
* Wed 21 Jan 2015 07:44:51 AM JST
reply
* Wed 21 Jan 2015 07:45:38 AM JST
isinstance(k._request._request.cookietype)
* Wed 21 Jan 2015 07:45:46 AM JST

* Wed 21 Jan 2015 07:45:46 AM JST

* Wed 21 Jan 2015 07:45:51 AM JST
isinstance(k._request._request.cookietype)
* Wed 21 Jan 2015 07:46:31 AM JST
isinstance(
* Wed 21 Jan 2015 07:46:40 AM JST
isinstance(
* Wed 21 Jan 2015 07:46:50 AM JST
                
* Wed 21 Jan 2015 07:48:39 AM JST
c=wxcb.connect()
* Wed 21 Jan 2015 06:44:17 PM JST
from enum import IntEnum as _IntEnum


class EventCode(_IntEnum):
    r"""SUMMARY
    """
    KeyPress         = 2
    KeyRelease       = 3
    ButtonPress      = 4
    ButtonRelease    = 5
    MotionNotify     = 6
    EnterNotify      = 7
    LeaveNotify      = 8
    FocusIn          = 9
    FocusOut         = 10
    KeymapNotify     = 11
    Expose           = 12
    GraphicsExposure = 13
    NoExposure       = 14
    VisibilityNotify = 15
    CreateNotify     = 16
    DestroyNotify    = 17
    UnmapNotify      = 18
    MapNotify        = 19
    MapRequest       = 20
    ReparentNotify   = 21
    ConfigureNotify  = 22
    ConfigureRequest = 23
    GravityNotify    = 24
    ResizeRequest    = 25
    CirculateNotify  = 26
    CirculateRequest = 27
    PropertyNotify   = 28
    SelectionClear   = 29
    SelectionRequest = 30
    SelectionNotify  = 31
    ColormapNotify   = 32
    ClientMessage    = 33
    MappingNotify    = 34

* Wed 21 Jan 2015 06:44:30 PM JST

* Wed 21 Jan 2015 06:44:30 PM JST

* Wed 21 Jan 2015 06:44:30 PM JST
from xcb2.xproto.ext.sendevent.eventcode import EventCode

* Wed 21 Jan 2015 06:47:57 PM JST
from enum import IntEnum as _IntEnum
* Wed 21 Jan 2015 06:48:48 PM JST
ChangeWindowAttributes
* Wed 21 Jan 2015 06:48:54 PM JST
GetWindowAttributes
* Wed 21 Jan 2015 06:49:01 PM JST
DestroyWindow
* Wed 21 Jan 2015 06:49:07 PM JST
DestroySubwindows
* Wed 21 Jan 2015 06:49:13 PM JST
ChangeSaveSet
* Wed 21 Jan 2015 06:49:21 PM JST
ReparentWindow
* Wed 21 Jan 2015 06:49:30 PM JST
MapWindow
* Wed 21 Jan 2015 06:49:35 PM JST
MapSubwindows
* Wed 21 Jan 2015 06:49:40 PM JST
UnmapWindow
* Wed 21 Jan 2015 06:49:46 PM JST
UnmapSubwindows
* Wed 21 Jan 2015 06:49:54 PM JST
ConfigureWindow
* Wed 21 Jan 2015 06:50:00 PM JST
CirculateWindow
* Wed 21 Jan 2015 06:50:07 PM JST
GetGeometry
* Wed 21 Jan 2015 06:50:12 PM JST
QueryTree
* Wed 21 Jan 2015 06:50:17 PM JST
InternAtom
* Wed 21 Jan 2015 06:50:23 PM JST
GetAtomName
* Wed 21 Jan 2015 06:50:28 PM JST
ChangeProperty
* Wed 21 Jan 2015 06:50:36 PM JST
DeleteProperty
* Wed 21 Jan 2015 06:50:41 PM JST
GetProperty
* Wed 21 Jan 2015 06:50:50 PM JST
ListProperties
* Wed 21 Jan 2015 06:50:56 PM JST
SetSelectionOwner
* Wed 21 Jan 2015 06:51:02 PM JST
GetSelectionOwner
* Wed 21 Jan 2015 06:51:09 PM JST
ConvertSelection
* Wed 21 Jan 2015 06:51:17 PM JST
SendEvent
* Wed 21 Jan 2015 06:51:25 PM JST
GrabPointer
* Wed 21 Jan 2015 06:51:33 PM JST
UngrabPointer
* Wed 21 Jan 2015 06:51:39 PM JST
GrabButton
* Wed 21 Jan 2015 06:51:46 PM JST
UngrabButton
* Wed 21 Jan 2015 06:51:52 PM JST
ChangeActivePointerGrab
* Wed 21 Jan 2015 06:51:57 PM JST
GrabKeyboard
* Wed 21 Jan 2015 06:52:04 PM JST
UngrabKeyboard
* Wed 21 Jan 2015 06:52:11 PM JST
GrabKey
* Wed 21 Jan 2015 06:52:19 PM JST
UngrabKey
* Wed 21 Jan 2015 06:52:25 PM JST
AllowEvents
* Wed 21 Jan 2015 06:52:31 PM JST
GrabServer
* Wed 21 Jan 2015 06:52:36 PM JST
UngrabServer
* Wed 21 Jan 2015 06:52:41 PM JST
QueryPointer
* Wed 21 Jan 2015 06:52:46 PM JST
GetMotionEvents
* Wed 21 Jan 2015 06:52:54 PM JST
TranslateCoordinates
* Wed 21 Jan 2015 06:53:00 PM JST
WarpPointer
* Wed 21 Jan 2015 06:53:06 PM JST
SetInputFocus
* Wed 21 Jan 2015 06:53:13 PM JST
GetInputFocus
* Wed 21 Jan 2015 06:53:20 PM JST
QueryKeymap
* Wed 21 Jan 2015 06:53:25 PM JST
OpenFont
* Wed 21 Jan 2015 06:53:31 PM JST
CloseFont
* Wed 21 Jan 2015 06:53:37 PM JST
QueryFont
* Wed 21 Jan 2015 06:53:43 PM JST
QueryTextExtents
* Wed 21 Jan 2015 06:53:50 PM JST
ListFonts
* Wed 21 Jan 2015 06:53:57 PM JST
ListFontsWithInfo
* Wed 21 Jan 2015 06:54:04 PM JST
SetFontPath
* Wed 21 Jan 2015 06:54:14 PM JST
SetFontPath
* Wed 21 Jan 2015 06:54:15 PM JST
GetFontPath
* Wed 21 Jan 2015 06:54:24 PM JST
CreatePixmap
* Wed 21 Jan 2015 06:54:33 PM JST
FreePixmap
* Wed 21 Jan 2015 06:54:41 PM JST
CreateGC
* Wed 21 Jan 2015 06:54:48 PM JST
ChangeGC
* Wed 21 Jan 2015 06:54:53 PM JST
CopyGC
* Wed 21 Jan 2015 06:54:59 PM JST
SetDashes
* Wed 21 Jan 2015 06:55:07 PM JST
SetClipRectangles
* Wed 21 Jan 2015 06:55:19 PM JST
FreeGC
* Wed 21 Jan 2015 06:55:29 PM JST
ClearArea
* Wed 21 Jan 2015 06:55:36 PM JST
CopyArea
* Wed 21 Jan 2015 06:55:43 PM JST
CopyPlane
* Wed 21 Jan 2015 06:55:54 PM JST
PolyPoint
* Wed 21 Jan 2015 06:56:00 PM JST
PolyLine
* Wed 21 Jan 2015 06:56:07 PM JST
PolySegment
* Wed 21 Jan 2015 06:56:14 PM JST
PolyRectangle
* Wed 21 Jan 2015 06:56:20 PM JST
PolyArc
* Wed 21 Jan 2015 06:56:25 PM JST
FillPoly
* Wed 21 Jan 2015 06:56:32 PM JST
PolyFillRectangle
* Wed 21 Jan 2015 06:56:38 PM JST
PolyFillArc
* Wed 21 Jan 2015 06:56:43 PM JST
PutImage
* Wed 21 Jan 2015 06:56:50 PM JST
GetImage
* Wed 21 Jan 2015 06:56:57 PM JST
PolyText8
* Wed 21 Jan 2015 06:57:05 PM JST
PolyText16
* Wed 21 Jan 2015 06:57:10 PM JST
ImageText8
* Wed 21 Jan 2015 06:57:20 PM JST
ImageText16
* Wed 21 Jan 2015 06:57:25 PM JST
CreateColormap
* Wed 21 Jan 2015 06:57:30 PM JST
CreateColormap
* Wed 21 Jan 2015 06:57:33 PM JST
FreeColormap
* Wed 21 Jan 2015 06:57:42 PM JST
CopyColormapAndFree
* Wed 21 Jan 2015 06:57:47 PM JST
InstallColormap
* Wed 21 Jan 2015 06:57:55 PM JST
UninstallColormap
* Wed 21 Jan 2015 06:58:01 PM JST
ListInstalledColormaps
* Wed 21 Jan 2015 06:58:06 PM JST
AllocColor
* Wed 21 Jan 2015 06:58:13 PM JST
AllocNamedColor
* Wed 21 Jan 2015 06:58:19 PM JST
AllocColorCells
* Wed 21 Jan 2015 06:58:26 PM JST
AllocColorPlanes
* Wed 21 Jan 2015 06:58:33 PM JST
FreeColors
* Wed 21 Jan 2015 06:58:38 PM JST
StoreColors
* Wed 21 Jan 2015 06:58:44 PM JST
StoreNamedColor
* Wed 21 Jan 2015 06:58:50 PM JST
QueryColors
* Wed 21 Jan 2015 06:58:55 PM JST
LookupColor
* Wed 21 Jan 2015 06:59:02 PM JST
CreateCursor
* Wed 21 Jan 2015 06:59:09 PM JST
CreateGlyphCursor
* Wed 21 Jan 2015 06:59:17 PM JST
FreeCursor
* Wed 21 Jan 2015 06:59:23 PM JST
RecolorCursor
* Wed 21 Jan 2015 06:59:29 PM JST
QueryBestSize
* Wed 21 Jan 2015 06:59:36 PM JST
QueryExtension
* Wed 21 Jan 2015 06:59:41 PM JST
ListExtensions
* Wed 21 Jan 2015 06:59:45 PM JST
ChangeKeyboardMapping
* Wed 21 Jan 2015 06:59:50 PM JST
GetKeyboardMapping
* Wed 21 Jan 2015 06:59:56 PM JST
ChangeKeyboardControl
* Wed 21 Jan 2015 07:00:01 PM JST
GetKeyboardControl
* Wed 21 Jan 2015 07:00:06 PM JST
Bell
* Wed 21 Jan 2015 07:00:13 PM JST
ChangePointerControl
* Wed 21 Jan 2015 07:00:19 PM JST
GetPointerControl
* Wed 21 Jan 2015 07:00:26 PM JST
SetScreenSaver
* Wed 21 Jan 2015 07:00:34 PM JST
GetScreenSaver
* Wed 21 Jan 2015 07:00:40 PM JST
ChangeHosts
* Wed 21 Jan 2015 07:00:48 PM JST
Listhosts
* Wed 21 Jan 2015 07:01:00 PM JST
SetAccessControl
* Wed 21 Jan 2015 07:01:04 PM JST
SetCloseDownMode
* Wed 21 Jan 2015 07:01:09 PM JST
KillClient
* Wed 21 Jan 2015 07:01:16 PM JST
RotateProperties
* Wed 21 Jan 2015 07:01:24 PM JST
ForceScreenSaver
* Wed 21 Jan 2015 07:01:31 PM JST
SetPointerMapping
* Wed 21 Jan 2015 07:01:37 PM JST
GetPointerMapping
* Wed 21 Jan 2015 07:01:42 PM JST
SetModifierMapping
* Wed 21 Jan 2015 07:01:49 PM JST
GetModifierMapping
* Wed 21 Jan 2015 07:02:55 PM JST
NoOperation
* Wed 21 Jan 2015 10:36:41 PM JST

* Wed 21 Jan 2015 10:36:41 PM JST

* Wed 21 Jan 2015 10:36:41 PM JST
from xcb import xproto

* Wed 21 Jan 2015 10:37:57 PM JST
            
* Wed 21 Jan 2015 11:12:58 PM JST
9
* Wed 21 Jan 2015 11:12:59 PM JST
9
* Wed 21 Jan 2015 11:13:05 PM JST
Opcode.
* Wed 21 Jan 2015 11:14:55 PM JST
            
* Wed 21 Jan 2015 11:14:58 PM JST
            
* Wed 21 Jan 2015 11:15:01 PM JST
Opcode.
* Wed 21 Jan 2015 11:15:50 PM JST
                         
* Wed 21 Jan 2015 11:17:41 PM JST
                         
* Wed 21 Jan 2015 11:18:04 PM JST
            
* Wed 21 Jan 2015 11:18:44 PM JST
            
* Wed 21 Jan 2015 11:18:53 PM JST
            
* Wed 21 Jan 2015 11:20:13 PM JST
                         
* Wed 21 Jan 2015 11:21:50 PM JST
                         
* Wed 21 Jan 2015 11:24:36 PM JST
                         
* Wed 21 Jan 2015 11:24:56 PM JST
            
* Wed 21 Jan 2015 11:25:25 PM JST
            
* Wed 21 Jan 2015 11:28:22 PM JST
            
* Wed 21 Jan 2015 11:28:50 PM JST
                         
* Wed 21 Jan 2015 11:30:02 PM JST
            
* Wed 21 Jan 2015 11:30:09 PM JST
            
* Wed 21 Jan 2015 11:33:00 PM JST
                         
* Wed 21 Jan 2015 11:33:18 PM JST
            
* Wed 21 Jan 2015 11:33:23 PM JST
            
* Wed 21 Jan 2015 11:33:48 PM JST
52
* Wed 21 Jan 2015 11:34:07 PM JST
                         
* Wed 21 Jan 2015 11:34:50 PM JST
55
* Wed 21 Jan 2015 11:35:02 PM JST
56
* Wed 21 Jan 2015 11:35:05 PM JST
Change
* Wed 21 Jan 2015 11:35:16 PM JST
57
* Wed 21 Jan 2015 11:36:24 PM JST
                 
* Wed 21 Jan 2015 11:36:34 PM JST
58
* Wed 21 Jan 2015 11:36:47 PM JST
59
* Wed 21 Jan 2015 11:38:41 PM JST
66
* Wed 21 Jan 2015 11:44:41 PM JST
73
* Wed 21 Jan 2015 11:44:53 PM JST
                         
* Wed 21 Jan 2015 11:45:10 PM JST
74
* Wed 21 Jan 2015 11:45:41 PM JST
    def __init__(self, drawable, gc, x, y, items_len, items,
                 checked=False, display=None):
        r"""

        @Arguments:
        - `drawable`:
        - `gc`:
        - `x`:
        - `y`:
        - `items_len`:
        - `items`:
        - `checked`:
        - `display`:
        """
        Request.__init__(self, Opcode.PolyText8, VoidCookie, checked, display)
        self._buffer = _buffer.PolyText8(
            drawable, gc, x, y, items_len, items)

    def get_drawable(self, ):
        r"""SUMMARY

        get_drawable()

        @Return:

        @Error:
        """
        return self._buffer.get_drawable()

    def set_drawable(self, drawable):
        r"""SUMMARY

        set_drawable(_drawable)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._buffer.set_drawable(drawable)

    drawable = property(get_drawable, set_drawable)

    def get_gc(self, ):
        r"""SUMMARY

        get_gc()

        @Return:

        @Error:
        """
        return self._buffer.get_gc()

    def set_gc(self, gc):
        r"""SUMMARY

        set_gc(_gc)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._buffer.set_gc(gc)

    gc = property(get_gc, set_gc)

    def get_x(self, ):
        r"""SUMMARY

        get_x()

        @Return:

        @Error:
        """
        return self._buffer.get_x()

    def set_x(self, newx):
        r"""SUMMARY

        set_x(_x)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._buffer.set_x(newx)

    x = property(get_x, set_x)

    def get_y(self, ):
        r"""SUMMARY

        get_y()

        @Return:

        @Error:
        """
        return self._buffer.get_y()

    def set_y(self, newy):
        r"""SUMMARY

        set_y(_y)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._buffer.set_y(newy)

    y = property(get_y, set_y)

    def get_items_len(self, ):
        r"""SUMMARY

        get_items_len()

        @Return:

        @Error:
        """
        return self._buffer.get_items_len()

    def set_items_len(self, items_len):
        r"""SUMMARY

        set_items_len(_items_len)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._buffer.set_items_len(items_len)

    items_len = property(get_items_len, set_items_len)

    def get_items(self, ):
        r"""SUMMARY

        get_items()

        @Return:

        @Error:
        """
        return self._buffer.get_items()

    def set_items(self, items):
        r"""SUMMARY

        set_items(_items)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._buffer.set_items(items)

    items = property(get_items, set_items)

    def request(self, ):
        r"""SUMMARY

        request()

        @Return:

        @Error:
        """
        return self._request.send(self._buffer.get_buffer())

    def __call__(self):
        return self.request()

* Wed 21 Jan 2015 11:45:53 PM JST
PolyText8
* Wed 21 Jan 2015 11:46:20 PM JST
76
* Wed 21 Jan 2015 11:46:43 PM JST
    def __init__(self, string_len, drawable, gc, x, y, string,
                 checked=False, display=None):
        r"""

        @Arguments:
        - `string_len`:
        - `drawable`:
        - `gc`:
        - `x`:
        - `y`:
        - `string`:
        - `checked`:
        - `display`:
        """
        Request.__init__(self, Opcode.ImageText8, VoidCookie, checked, display)
        self._buffer = _buffer.ImageText8(
            string_len, drawable, gc, x, y, string)

    def get_string_len(self, ):
        r"""SUMMARY

        get_string_len()

        @Return:

        @Error:
        """
        return self._buffer.get_string_len()

    def set_string_len(self, string_len):
        r"""SUMMARY

        set_string_len(_string_len)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._buffer.set_string_len(string_len)

    string_len = property(get_string_len, set_string_len)

    def get_drawable(self, ):
        r"""SUMMARY

        get_drawable()

        @Return:

        @Error:
        """
        return self._buffer.get_drawable()

    def set_drawable(self, drawable):
        r"""SUMMARY

        set_drawable(_drawable)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._buffer.set_drawable(drawable)

    drawable = property(get_drawable, set_drawable)

    def get_gc(self, ):
        r"""SUMMARY

        get_gc()

        @Return:

        @Error:
        """
        return self._buffer.get_gc()

    def set_gc(self, gc):
        r"""SUMMARY

        set_gc(_gc)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._buffer.set_gc(gc)

    gc = property(get_gc, set_gc)

    def get_x(self, ):
        r"""SUMMARY

        get_x()

        @Return:

        @Error:
        """
        return self._buffer.get_x()

    def set_x(self, newx):
        r"""SUMMARY

        set_x(_x)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._buffer.set_x(newx)

    x = property(get_x, set_x)

    def get_y(self, ):
        r"""SUMMARY

        get_y()

        @Return:

        @Error:
        """
        return self._buffer.get_y()

    def set_y(self, newy):
        r"""SUMMARY

        set_y(_y)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._buffer.set_y(newy)

    y = property(get_y, set_y)

    def get_string(self, ):
        r"""SUMMARY

        get_string()

        @Return:

        @Error:
        """
        return self._buffer.get_string()

    def set_string(self, string):
        r"""SUMMARY

        set_string(_string)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._buffer.set_string(string)

    string = property(get_string, set_string)

    def request(self, ):
        r"""SUMMARY

        request()

        @Return:

        @Error:
        """
        return self._request.send(self._buffer.get_buffer())

    def __call__(self):
        return self.request()

* Wed 21 Jan 2015 11:46:53 PM JST
ImageText8
* Wed 21 Jan 2015 11:48:34 PM JST
            
* Wed 21 Jan 2015 11:48:40 PM JST
            
* Wed 21 Jan 2015 11:48:54 PM JST
                         
* Wed 21 Jan 2015 11:49:11 PM JST
            
* Wed 21 Jan 2015 11:49:34 PM JST
            
* Wed 21 Jan 2015 11:49:51 PM JST
            
* Wed 21 Jan 2015 11:51:05 PM JST
                         
* Wed 21 Jan 2015 11:51:19 PM JST
                         
* Wed 21 Jan 2015 11:52:37 PM JST
            
* Wed 21 Jan 2015 11:52:55 PM JST
            
* Wed 21 Jan 2015 11:53:13 PM JST
            
* Wed 21 Jan 2015 11:53:47 PM JST
            
* Wed 21 Jan 2015 11:57:10 PM JST
103
* Wed 21 Jan 2015 11:57:26 PM JST
      
* Wed 21 Jan 2015 11:58:04 PM JST
106
* Wed 21 Jan 2015 11:58:12 PM JST
            
* Wed 21 Jan 2015 11:59:26 PM JST
107
* Wed 21 Jan 2015 11:59:40 PM JST
108
* Wed 21 Jan 2015 11:59:47 PM JST
            
* Wed 21 Jan 2015 11:59:54 PM JST
109
* Thu 22 Jan 2015 12:00:12 AM JST
110
* Thu 22 Jan 2015 12:00:20 AM JST
                         
* Thu 22 Jan 2015 12:00:25 AM JST
111
* Thu 22 Jan 2015 12:00:40 AM JST
112
* Thu 22 Jan 2015 12:00:52 AM JST
113
* Thu 22 Jan 2015 12:01:03 AM JST
114
* Thu 22 Jan 2015 12:01:19 AM JST
115
* Thu 22 Jan 2015 12:01:33 AM JST
116
* Thu 22 Jan 2015 12:01:42 AM JST
            
* Thu 22 Jan 2015 12:01:52 AM JST
117
* Thu 22 Jan 2015 12:02:00 AM JST
        
* Thu 22 Jan 2015 12:02:08 AM JST
118
* Thu 22 Jan 2015 12:02:14 AM JST
            
* Thu 22 Jan 2015 12:02:23 AM JST
119
* Thu 22 Jan 2015 12:02:29 AM JST
            
* Thu 22 Jan 2015 12:02:37 AM JST
127
* Thu 22 Jan 2015 12:06:01 AM JST
ImageText8
* Thu 22 Jan 2015 12:06:11 AM JST
    def __init__(self, string_len, drawable, gc, x, y, string):
        r"""

        @Arguments:
        - `string_len`:
        - `drawable`:
        - `gc`:
        - `x`:
        - `y`:
        - `string`:
        """
        self._string_len = string_len
        self._drawable = drawable
        self._gc = gc
        self._pont = _point.Point(x, y)
        self._string = string

    def get_string_len(self, ):
        r"""SUMMARY

        get_string_len()

        @Return:

        @Error:
        """
        return self._string_len

    def set_string_len(self, string_len):
        r"""SUMMARY

        set_string_len(string_len)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._string_len = string_len

    string_len = property(get_string_len, set_string_len)

    def get_drawable(self, ):
        r"""SUMMARY

        get_drawable()

        @Return:

        @Error:
        """
        return self._drawable

    def set_drawable(self, drawable):
        r"""SUMMARY

        set_drawable(drawable)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._drawable = drawable

    drawable = property(get_drawable, set_drawable)

    def get_gc(self, ):
        r"""SUMMARY

        get_gc()

        @Return:

        @Error:
        """
        return self._gc

    def set_gc(self, gc):
        r"""SUMMARY

        set_gc(gc)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._gc = gc

    gc = property(get_gc, set_gc)

    def get_x(self, ):
        r"""SUMMARY

        get_x()

        @Return:

        @Error:
        """
        return self._point.get_x()

    def set_x(self, newx):
        r"""SUMMARY

        set_x(newx)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._point.set_x(newx)

    x = property(get_x, set_x)

    def get_y(self, ):
        r"""SUMMARY

        get_y()

        @Return:

        @Error:
        """
        return self._point.get_y()

    def set_y(self, newy):
        r"""SUMMARY

        set_y(newy)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._point.set_y(newy)

    y = property(get_y, set_y)

    def get_buffer(self, ):
        r"""SUMMARY

        get_buffer()

        @Return:

        @Error:
        """
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', self.string_len, self.drawable, self.gc,
                        self.x, self.y))
        buf.write(str(buffer(_array('b', self.string))))
        return buf.getvalue()

    def __str__(self):
        return self.get_buffer()

* Thu 22 Jan 2015 12:07:32 AM JST
    def get_string(self, ):
        r"""SUMMARY
        
        get_string()
        
        @Return:

        @Error:
        """
        return self._string

    def set_string(self, string):
        r"""SUMMARY
        
        set_string(string)
        
        @Arguments:
        - `string`:
        
        @Return:

        @Error:
        """
        self._string = string

    string = property(get_string, set_string)

* Thu 22 Jan 2015 12:12:37 AM JST
wxcb.conn.connect(self._display)
* Thu 22 Jan 2015 12:16:21 AM JST
    def flush(self, ):
        r"""SUMMARY

        flush()

        @Return:

        @Error:
        """
        self._request.flush()


* Thu 22 Jan 2015 12:18:35 AM JST
54525974
* Thu 22 Jan 2015 12:22:03 AM JST
from xcb2.xproto.define import *
* Thu 22 Jan 2015 12:24:10 AM JST
xproto
* Thu 22 Jan 2015 12:24:11 AM JST
xcb.xproto
* Thu 22 Jan 2015 12:24:20 AM JST

* Thu 22 Jan 2015 12:24:20 AM JST

* Thu 22 Jan 2015 12:24:20 AM JST
# TODO: (Atami) [2015/01/21]

* Thu 22 Jan 2015 03:12:22 AM JST

* Thu 22 Jan 2015 03:12:22 AM JST

* Thu 22 Jan 2015 03:12:22 AM JST
keycode 64 = Return

* Thu 22 Jan 2015 03:12:37 AM JST
remove mod1 = Alt_L
keycode 64 = Return

* Thu 22 Jan 2015 03:14:59 AM JST

* Thu 22 Jan 2015 03:14:59 AM JST

* Thu 22 Jan 2015 03:14:59 AM JST
keycode 102 = Alt_L

* Thu 22 Jan 2015 03:22:49 AM JST

* Thu 22 Jan 2015 03:22:49 AM JST

* Thu 22 Jan 2015 03:22:49 AM JST
add mod1 = Alt_R

* Thu 22 Jan 2015 03:23:00 AM JST

* Thu 22 Jan 2015 03:23:00 AM JST

* Thu 22 Jan 2015 03:23:00 AM JST
add mod1 = Alt_R

* Thu 22 Jan 2015 03:23:01 AM JST

* Thu 22 Jan 2015 03:23:01 AM JST

* Thu 22 Jan 2015 03:23:01 AM JST
remove mod1 = Alt_R

* Thu 22 Jan 2015 04:13:30 AM JST
        self._request = SendEvent(
            propagate, destination, EventMask.KeyPress,
            self._event.get_buffer(), checked, display)

* Thu 22 Jan 2015 04:14:18 AM JST
            
* Thu 22 Jan 2015 04:14:39 AM JST
    def flush(self, ):
        r"""SUMMARY

        flush()

        @Return:

        @Error:
        """
        self._request.flush()

    def get_propagate(self, ):
        r"""SUMMARY

        get_propagate()

        @Return:

        @Error:
        """
        return self._request.get_propagate()

    def set_propagate(self, propagate):
        r"""SUMMARY

        set_propagate(propagate)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._request.set_propagate(propagate)

    propagate = property(get_propagate, set_propagate)

    def get_destination(self, ):
        r"""SUMMARY

        get_destination()

        @Return:

        @Error:
        """
        return self._request.get_destination()

    def set_destination(self, destination):
        r"""SUMMARY

        set_destination(destination)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._request.set_destination(destination)

    destination = property(get_destination, set_destination)


* Thu 22 Jan 2015 04:18:40 AM JST
EventAbstract
* Thu 22 Jan 2015 04:18:54 AM JST
super
* Thu 22 Jan 2015 04:19:53 AM JST
event_
* Thu 22 Jan 2015 04:19:59 AM JST
EventMask.KeyPress
* Thu 22 Jan 2015 04:20:14 AM JST
self._event.get_buffer()
* Thu 22 Jan 2015 04:21:17 AM JST
from sendevent import events
events.KeyPress
k=events.KeyPress(0,54525974,38,0,0,482,54525974,0,0,0,0,0,0,0)
* Thu 22 Jan 2015 04:21:22 AM JST

* Thu 22 Jan 2015 04:21:23 AM JST

* Thu 22 Jan 2015 04:21:23 AM JST
events.KeyPress

* Thu 22 Jan 2015 04:21:26 AM JST
k.send()
k.flush()

* Thu 22 Jan 2015 04:21:38 AM JST
from sendevent import events
k=events.KeyPress(0,54525974,38,0,0,482,54525974,0,0,0,0,0,0,0)

* Thu 22 Jan 2015 04:21:44 AM JST
k.send()
* Thu 22 Jan 2015 04:21:47 AM JST
k.flush()
* Thu 22 Jan 2015 04:22:28 AM JST
        self._event = _buffer.Input(
            EventCode.KeyPress, detail, sequence_number, time, root, window,
            child, rootx, rooty, eventx, eventy, state, samescreen)
        EventAbstract.__init__(
            self, propagate, destination, EventMask.KeyPress,
            self._event.get_buffer(), checked, display)

* Thu 22 Jan 2015 04:22:44 AM JST
    def __init__(self, propagate, destination, detail, sequence_number, time,
                 root, window, child, rootx, rooty, eventx, eventy, state,
                 samescreen, checked=False, display=None):
        r"""

        @Arguments:
        - `propagate`:
        - `destination`:
        - `detail`:
        - `sequence_number`:
        - `time`:
        - `root`:
        - `window`:
        - `child`:
        - `rootx`:
        - `rooty`:
        - `eventx`:
        - `eventy`:
        - `state`:
        - `samescreen`:
        """
        self._event = _buffer.Input(
            EventCode.KeyPress, detail, sequence_number, time, root, window,
            child, rootx, rooty, eventx, eventy, state, samescreen)
        EventAbstract.__init__(
            self, propagate, destination, EventMask.KeyPress,
            self._event.get_buffer(), checked, display)

* Thu 22 Jan 2015 04:22:51 AM JST
    def __init__(self, propagate, destination, detail, sequence_number, time,
                 root, window, child, rootx, rooty, eventx, eventy, state,
                 samescreen, checked=False, display=None):
        r"""

        @Arguments:
        - `propagate`:
        - `destination`:
        - `detail`:
        - `sequence_number`:
        - `time`:
        - `root`:
        - `window`:
        - `child`:
        - `rootx`:
        - `rooty`:
        - `eventx`:
        - `eventy`:
        - `state`:
        - `samescreen`:
        """
        self._event = _buffer.Input(
            EventCode.KeyPress, detail, sequence_number, time, root, window,
            child, rootx, rooty, eventx, eventy, state, samescreen)
        EventAbstract.__init__(
            self, propagate, destination, EventMask.KeyPress,
            self._event.get_buffer(), checked, display)

    def get_detail(self, ):
        r"""SUMMARY

        get_detail()

        @Return:

        @Error:
        """
        return self._event.get_detail()

    def set_detail(self, detail):
        r"""SUMMARY

        set_detail(detail)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_detail(detail)

    detail = property(get_detail, set_detail)

    def get_samescreen(self, ):
        r"""SUMMARY

        get_samescreen()

        @Return:

        @Error:
        """
        return self._event.get_samescreen()

    def set_samescreen(self, samescreen):
        r"""SUMMARY

        set_samescreen(samescreen)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_samescreen(samescreen)

    samescreen = property(get_samescreen, set_samescreen)

    def get_sequence_number(self, ):
        r"""SUMMARY

        get_sequence_number()

        @Return:

        @Error:
        """
        return self._event.get_sequence_number()

    def set_sequence_number(self, sequence_number):
        r"""SUMMARY

        set_sequence_number(sequence_number)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_sequence_number(sequence_number)

    sequence_number = property(get_sequence_number, set_sequence_number)

    def get_time(self, ):
        r"""SUMMARY

        get_time()

        @Return:

        @Error:
        """
        return self._event.get_time()

    def set_time(self, time):
        r"""SUMMARY

        set_time(time)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_time(time)

    time = property(get_time, set_time)

    def get_root(self, ):
        r"""SUMMARY

        get_root()

        @Return:

        @Error:
        """
        return self._event.get_root()

    def set_root(self, root):
        r"""SUMMARY

        set_root(root)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_root(root)

    root = property(get_root, set_root)

    def get_window(self, ):
        r"""SUMMARY

        get_window()

        @Return:

        @Error:
        """
        return self._event.get_window()

    def set_window(self, window):
        r"""SUMMARY

        set_window(window)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_window(window)

    window = property(get_window, set_window)

    def get_child(self, ):
        r"""SUMMARY

        get_child()

        @Return:

        @Error:
        """
        return self._event.get_child()

    def set_child(self, child):
        r"""SUMMARY

        set_child(child)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_child(child)

    child = property(get_child, set_child)

    def get_rootx(self, ):
        r"""SUMMARY

        get_rootx()

        @Return:

        @Error:
        """
        return self._event.get_rootx()

    def set_rootx(self, rootx):
        r"""SUMMARY

        set_rootx(rootx)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_rootx(rootx)

    rootx = property(get_rootx, set_rootx)

    def get_rooty(self, ):
        r"""SUMMARY

        get_rooty()

        @Return:

        @Error:
        """
        return self._event.get_rooty()

    def set_rooty(self, rooty):
        r"""SUMMARY

        set_rooty(rooty)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_rooty(rooty)

    rooty = property(get_rooty, set_rooty)

    def get_eventx(self, ):
        r"""SUMMARY

        get_eventx()

        @Return:

        @Error:
        """
        return self._event.get_eventx()

    def set_eventx(self, eventx):
        r"""SUMMARY

        set_eventx(eventx)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_eventx(eventx)

    eventx = property(get_eventx, set_eventx)

    def get_eventy(self, ):
        r"""SUMMARY

        get_eventy()

        @Return:

        @Error:
        """
        return self._event.get_eventy()

    def set_eventy(self, eventy):
        r"""SUMMARY

        set_eventy(eventy)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_eventy(eventy)

    eventy = property(get_eventy, set_eventy)

    def get_state(self, ):
        r"""SUMMARY

        get_state()

        @Return:

        @Error:
        """
        return self._event.get_state()

    def set_state(self, state):
        r"""SUMMARY

        set_state(state)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_state(state)

    state = property(get_state, set_state)

    def send(self, ):
        r"""SUMMARY

        send()

        @Return:

        @Error:
        """
        self._request.set_event(self._event.get_buffer())
        return self._request.request()

    def __call__(self):
        return self.send()

* Thu 22 Jan 2015 04:24:49 AM JST
    def __init__(self, propagate, destination, detail, sequence_number, time,
                 root, window, child, rootx, rooty, eventx, eventy, state,
                 samescreen, checked=False, display=None):
        r"""

        @Arguments:
        - `propagate`:
        - `destination`:
        - `detail`:
        - `sequence_number`:
        - `time`:
        - `root`:
        - `window`:
        - `child`:
        - `rootx`:
        - `rooty`:
        - `eventx`:
        - `eventy`:
        - `state`:
        - `samescreen`:
        """
        self._event = _buffer.Input(
            EventCode.KeyRelease, detail, sequence_number, time, root, window,
            child, rootx, rooty, eventx, eventy, state, samescreen)
        EventAbstract.__init__(
            self, propagate, destination, EventMask.KeyRelease,
            self._event.get_buffer(), checked, display)

    def get_detail(self, ):
        r"""SUMMARY

        get_detail()

        @Return:

        @Error:
        """
        return self._event.get_detail()

    def set_detail(self, detail):
        r"""SUMMARY

        set_detail(detail)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_detail(detail)

    detail = property(get_detail, set_detail)

    def get_samescreen(self, ):
        r"""SUMMARY

        get_samescreen()

        @Return:

        @Error:
        """
        return self._event.get_samescreen()

    def set_samescreen(self, samescreen):
        r"""SUMMARY

        set_samescreen(samescreen)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_samescreen(samescreen)

    samescreen = property(get_samescreen, set_samescreen)

    def get_sequence_number(self, ):
        r"""SUMMARY

        get_sequence_number()

        @Return:

        @Error:
        """
        return self._event.get_sequence_number()

    def set_sequence_number(self, sequence_number):
        r"""SUMMARY

        set_sequence_number(sequence_number)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_sequence_number(sequence_number)

    sequence_number = property(get_sequence_number, set_sequence_number)

    def get_time(self, ):
        r"""SUMMARY

        get_time()

        @Return:

        @Error:
        """
        return self._event.get_time()

    def set_time(self, time):
        r"""SUMMARY

        set_time(time)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_time(time)

    time = property(get_time, set_time)

    def get_root(self, ):
        r"""SUMMARY

        get_root()

        @Return:

        @Error:
        """
        return self._event.get_root()

    def set_root(self, root):
        r"""SUMMARY

        set_root(root)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_root(root)

    root = property(get_root, set_root)

    def get_window(self, ):
        r"""SUMMARY

        get_window()

        @Return:

        @Error:
        """
        return self._event.get_window()

    def set_window(self, window):
        r"""SUMMARY

        set_window(window)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_window(window)

    window = property(get_window, set_window)

    def get_child(self, ):
        r"""SUMMARY

        get_child()

        @Return:

        @Error:
        """
        return self._event.get_child()

    def set_child(self, child):
        r"""SUMMARY

        set_child(child)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_child(child)

    child = property(get_child, set_child)

    def get_rootx(self, ):
        r"""SUMMARY

        get_rootx()

        @Return:

        @Error:
        """
        return self._event.get_rootx()

    def set_rootx(self, rootx):
        r"""SUMMARY

        set_rootx(rootx)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_rootx(rootx)

    rootx = property(get_rootx, set_rootx)

    def get_rooty(self, ):
        r"""SUMMARY

        get_rooty()

        @Return:

        @Error:
        """
        return self._event.get_rooty()

    def set_rooty(self, rooty):
        r"""SUMMARY

        set_rooty(rooty)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_rooty(rooty)

    rooty = property(get_rooty, set_rooty)

    def get_eventx(self, ):
        r"""SUMMARY

        get_eventx()

        @Return:

        @Error:
        """
        return self._event.get_eventx()

    def set_eventx(self, eventx):
        r"""SUMMARY

        set_eventx(eventx)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_eventx(eventx)

    eventx = property(get_eventx, set_eventx)

    def get_eventy(self, ):
        r"""SUMMARY

        get_eventy()

        @Return:

        @Error:
        """
        return self._event.get_eventy()

    def set_eventy(self, eventy):
        r"""SUMMARY

        set_eventy(eventy)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_eventy(eventy)

    eventy = property(get_eventy, set_eventy)

    def get_state(self, ):
        r"""SUMMARY

        get_state()

        @Return:

        @Error:
        """
        return self._event.get_state()

    def set_state(self, state):
        r"""SUMMARY

        set_state(state)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_state(state)

    state = property(get_state, set_state)

    def send(self, ):
        r"""SUMMARY

        send()

        @Return:

        @Error:
        """
        self._request.set_event(self._event.get_buffer())
        return self._request.request()

    def __call__(self):
        return self.send()

* Thu 22 Jan 2015 04:25:07 AM JST
KeyRelease
* Thu 22 Jan 2015 04:25:21 AM JST
KeyRelease
* Thu 22 Jan 2015 04:26:03 AM JST
    def __init__(self, propagate, destination, detail, sequence_number, time,
                 root, window, child, rootx, rooty, eventx, eventy, state,
                 samescreen, checked=False, display=None):
        r"""

        @Arguments:
        - `propagate`:
        - `destination`:
        - `detail`:
        - `sequence_number`:
        - `time`:
        - `root`:
        - `window`:
        - `child`:
        - `rootx`:
        - `rooty`:
        - `eventx`:
        - `eventy`:
        - `state`:
        - `samescreen`:
        """
        self._event = _buffer.Input(
            EventCode.KeyRelease, detail, sequence_number, time, root, window,
            child, rootx, rooty, eventx, eventy, state, samescreen)
        EventAbstract.__init__(
            self, propagate, destination, EventMask.KeyRelease,
            self._event.get_buffer(), checked, display)

    def get_detail(self, ):
        r"""SUMMARY

        get_detail()

        @Return:

        @Error:
        """
        return self._event.get_detail()

    def set_detail(self, detail):
        r"""SUMMARY

        set_detail(detail)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_detail(detail)

    detail = property(get_detail, set_detail)

    def get_samescreen(self, ):
        r"""SUMMARY

        get_samescreen()

        @Return:

        @Error:
        """
        return self._event.get_samescreen()

    def set_samescreen(self, samescreen):
        r"""SUMMARY

        set_samescreen(samescreen)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_samescreen(samescreen)

    samescreen = property(get_samescreen, set_samescreen)

    def get_sequence_number(self, ):
        r"""SUMMARY

        get_sequence_number()

        @Return:

        @Error:
        """
        return self._event.get_sequence_number()

    def set_sequence_number(self, sequence_number):
        r"""SUMMARY

        set_sequence_number(sequence_number)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_sequence_number(sequence_number)

    sequence_number = property(get_sequence_number, set_sequence_number)

    def get_time(self, ):
        r"""SUMMARY

        get_time()

        @Return:

        @Error:
        """
        return self._event.get_time()

    def set_time(self, time):
        r"""SUMMARY

        set_time(time)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_time(time)

    time = property(get_time, set_time)

    def get_root(self, ):
        r"""SUMMARY

        get_root()

        @Return:

        @Error:
        """
        return self._event.get_root()

    def set_root(self, root):
        r"""SUMMARY

        set_root(root)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_root(root)

    root = property(get_root, set_root)

    def get_window(self, ):
        r"""SUMMARY

        get_window()

        @Return:

        @Error:
        """
        return self._event.get_window()

    def set_window(self, window):
        r"""SUMMARY

        set_window(window)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_window(window)

    window = property(get_window, set_window)

    def get_child(self, ):
        r"""SUMMARY

        get_child()

        @Return:

        @Error:
        """
        return self._event.get_child()

    def set_child(self, child):
        r"""SUMMARY

        set_child(child)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_child(child)

    child = property(get_child, set_child)

    def get_rootx(self, ):
        r"""SUMMARY

        get_rootx()

        @Return:

        @Error:
        """
        return self._event.get_rootx()

    def set_rootx(self, rootx):
        r"""SUMMARY

        set_rootx(rootx)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_rootx(rootx)

    rootx = property(get_rootx, set_rootx)

    def get_rooty(self, ):
        r"""SUMMARY

        get_rooty()

        @Return:

        @Error:
        """
        return self._event.get_rooty()

    def set_rooty(self, rooty):
        r"""SUMMARY

        set_rooty(rooty)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_rooty(rooty)

    rooty = property(get_rooty, set_rooty)

    def get_eventx(self, ):
        r"""SUMMARY

        get_eventx()

        @Return:

        @Error:
        """
        return self._event.get_eventx()

    def set_eventx(self, eventx):
        r"""SUMMARY

        set_eventx(eventx)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_eventx(eventx)

    eventx = property(get_eventx, set_eventx)

    def get_eventy(self, ):
        r"""SUMMARY

        get_eventy()

        @Return:

        @Error:
        """
        return self._event.get_eventy()

    def set_eventy(self, eventy):
        r"""SUMMARY

        set_eventy(eventy)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_eventy(eventy)

    eventy = property(get_eventy, set_eventy)

    def get_state(self, ):
        r"""SUMMARY

        get_state()

        @Return:

        @Error:
        """
        return self._event.get_state()

    def set_state(self, state):
        r"""SUMMARY

        set_state(state)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_state(state)

    state = property(get_state, set_state)

    def send(self, ):
        r"""SUMMARY

        send()

        @Return:

        @Error:
        """
        self._request.set_event(self._event.get_buffer())
        return self._request.request()

    def __call__(self):
        return self.send()

* Thu 22 Jan 2015 04:26:15 AM JST
KeyRelease
* Thu 22 Jan 2015 04:26:26 AM JST
            
* Thu 22 Jan 2015 04:26:31 AM JST
Key
* Thu 22 Jan 2015 04:30:56 AM JST
    def __init__(self, propagate, destination, detail, sequence_number, time,
                 root, window, child, rootx, rooty, eventx, eventy, state,
                 samescreen, checked=False, display=None):
        r"""

        @Arguments:
        - `propagate`:
        - `destination`:
        - `detail`:
        - `sequence_number`:
        - `time`:
        - `root`:
        - `window`:
        - `child`:
        - `rootx`:
        - `rooty`:
        - `eventx`:
        - `eventy`:
        - `state`:
        - `samescreen`:
        """
        self._event = _buffer.Input(
            EventCode.KeyRelease, detail, sequence_number, time, root, window,
            child, rootx, rooty, eventx, eventy, state, samescreen)
        EventAbstract.__init__(
            self, propagate, destination, EventMask.KeyRelease,
            self._event.get_buffer(), checked, display)

    def get_detail(self, ):
        r"""SUMMARY

        get_detail()

        @Return:

        @Error:
        """
        return self._event.get_detail()

    def set_detail(self, detail):
        r"""SUMMARY

        set_detail(detail)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_detail(detail)

    detail = property(get_detail, set_detail)

    def get_samescreen(self, ):
        r"""SUMMARY

        get_samescreen()

        @Return:

        @Error:
        """
        return self._event.get_samescreen()

    def set_samescreen(self, samescreen):
        r"""SUMMARY

        set_samescreen(samescreen)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_samescreen(samescreen)

    samescreen = property(get_samescreen, set_samescreen)

    def get_sequence_number(self, ):
        r"""SUMMARY

        get_sequence_number()

        @Return:

        @Error:
        """
        return self._event.get_sequence_number()

    def set_sequence_number(self, sequence_number):
        r"""SUMMARY

        set_sequence_number(sequence_number)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_sequence_number(sequence_number)

    sequence_number = property(get_sequence_number, set_sequence_number)

    def get_time(self, ):
        r"""SUMMARY

        get_time()

        @Return:

        @Error:
        """
        return self._event.get_time()

    def set_time(self, time):
        r"""SUMMARY

        set_time(time)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_time(time)

    time = property(get_time, set_time)

    def get_root(self, ):
        r"""SUMMARY

        get_root()

        @Return:

        @Error:
        """
        return self._event.get_root()

    def set_root(self, root):
        r"""SUMMARY

        set_root(root)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_root(root)

    root = property(get_root, set_root)

    def get_window(self, ):
        r"""SUMMARY

        get_window()

        @Return:

        @Error:
        """
        return self._event.get_window()

    def set_window(self, window):
        r"""SUMMARY

        set_window(window)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_window(window)

    window = property(get_window, set_window)

    def get_child(self, ):
        r"""SUMMARY

        get_child()

        @Return:

        @Error:
        """
        return self._event.get_child()

    def set_child(self, child):
        r"""SUMMARY

        set_child(child)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_child(child)

    child = property(get_child, set_child)

    def get_rootx(self, ):
        r"""SUMMARY

        get_rootx()

        @Return:

        @Error:
        """
        return self._event.get_rootx()

    def set_rootx(self, rootx):
        r"""SUMMARY

        set_rootx(rootx)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_rootx(rootx)

    rootx = property(get_rootx, set_rootx)

    def get_rooty(self, ):
        r"""SUMMARY

        get_rooty()

        @Return:

        @Error:
        """
        return self._event.get_rooty()

    def set_rooty(self, rooty):
        r"""SUMMARY

        set_rooty(rooty)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_rooty(rooty)

    rooty = property(get_rooty, set_rooty)

    def get_eventx(self, ):
        r"""SUMMARY

        get_eventx()

        @Return:

        @Error:
        """
        return self._event.get_eventx()

    def set_eventx(self, eventx):
        r"""SUMMARY

        set_eventx(eventx)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_eventx(eventx)

    eventx = property(get_eventx, set_eventx)

    def get_eventy(self, ):
        r"""SUMMARY

        get_eventy()

        @Return:

        @Error:
        """
        return self._event.get_eventy()

    def set_eventy(self, eventy):
        r"""SUMMARY

        set_eventy(eventy)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_eventy(eventy)

    eventy = property(get_eventy, set_eventy)

    def get_state(self, ):
        r"""SUMMARY

        get_state()

        @Return:

        @Error:
        """
        return self._event.get_state()

    def set_state(self, state):
        r"""SUMMARY

        set_state(state)

        @Arguments:
        - [yas] elisp error!:

        @Return:

        @Error:
        """
        self._event.set_state(state)

    state = property(get_state, set_state)

    def send(self, ):
        r"""SUMMARY

        send()

        @Return:

        @Error:
        """
        self._request.set_event(self._event.get_buffer())
        return self._request.request()

    def __call__(self):
        return self.send()

* Thu 22 Jan 2015 04:32:33 AM JST
KeyRelease
* Thu 22 Jan 2015 04:32:40 AM JST
KeyRelease
* Thu 22 Jan 2015 04:33:08 AM JST
from wxcb.protocol.xproto import EventMask
* Thu 22 Jan 2015 04:34:24 AM JST
                 
* Thu 22 Jan 2015 04:34:26 AM JST
                 
* Thu 22 Jan 2015 04:34:42 AM JST
            
* Thu 22 Jan 2015 05:06:01 AM JST

* Thu 22 Jan 2015 05:06:01 AM JST

* Thu 22 Jan 2015 05:06:01 AM JST
from abc import ABCMeta, abstractmethod

* Thu 22 Jan 2015 05:13:12 AM JST
buf = _StringIO()
* Thu 22 Jan 2015 05:13:51 AM JST

* Thu 22 Jan 2015 05:13:55 AM JST
code
* Thu 22 Jan 2015 05:13:59 AM JST
        
* Thu 22 Jan 2015 05:14:07 AM JST
sequence_number
* Thu 22 Jan 2015 05:14:17 AM JST

* Thu 22 Jan 2015 05:15:13 AM JST
sleg
* Thu 22 Jan 2015 05:15:36 AM JST
ClientMessage
* Thu 22 Jan 2015 05:17:44 AM JST
0xffffff
* Thu 22 Jan 2015 05:21:35 AM JST
format
* Thu 22 Jan 2015 05:23:17 AM JST
    def send(self, ):
        r"""SUMMARY

        send()

        @Return:

        @Error:
        """
        self._request.set_event(self._event.get_buffer())
        return self._request.request()

    def __call__(self):
        return self.send()

* Thu 22 Jan 2015 05:34:22 AM JST
set
* Thu 22 Jan 2015 05:36:15 AM JST
c.core.SendEvent.ClientMessage.above._get_setbinary
* Thu 22 Jan 2015 05:37:41 AM JST
title
* Thu 22 Jan 2015 05:37:44 AM JST
25165849
* Thu 22 Jan 2015 05:37:50 AM JST
c.core.SendEvent.ClientMessage.above._get_setbinary
* Thu 22 Jan 2015 05:37:54 AM JST
25165849
* Thu 22 Jan 2015 05:38:15 AM JST
'\x00\x00\x00\x00\x19\x00\x80\x01\xff\xff\xff\x00! \x00\x00\x19\x00\x80\x01%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 22 Jan 2015 05:54:16 AM JST
atom
* Thu 22 Jan 2015 05:54:21 AM JST
atom
* Thu 22 Jan 2015 05:54:51 AM JST
atom
* Thu 22 Jan 2015 05:54:54 AM JST
atom
* Thu 22 Jan 2015 05:56:59 AM JST
0)
* Thu 22 Jan 2015 05:57:00 AM JST
0,0)
* Thu 22 Jan 2015 05:57:00 AM JST
25165849, 0,0)
* Thu 22 Jan 2015 05:57:01 AM JST
_get_setbinary(25165849, 0,0)
* Thu 22 Jan 2015 05:57:16 AM JST
'&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 22 Jan 2015 05:58:11 AM JST
ClientMessage
* Thu 22 Jan 2015 05:58:14 AM JST
events
* Thu 22 Jan 2015 05:58:30 AM JST
from sendevent import events
* Thu 22 Jan 2015 05:58:32 AM JST
from sendevent.events import ClientMessage
* Thu 22 Jan 2015 05:58:59 AM JST

* Thu 22 Jan 2015 05:58:59 AM JST

* Thu 22 Jan 2015 05:58:59 AM JST
    __metaclass__ = ABCMeta

* Thu 22 Jan 2015 05:59:21 AM JST
25165849
* Thu 22 Jan 2015 05:59:42 AM JST
ClientMessage(0,25165849, )
* Thu 22 Jan 2015 06:00:54 AM JST
32
* Thu 22 Jan 2015 06:01:50 AM JST
25165849
* Thu 22 Jan 2015 06:02:02 AM JST
'&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 22 Jan 2015 06:02:58 AM JST
cl=ClientMessage(0,25165849, 32, 0, 25165849, 1, '&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
* Thu 22 Jan 2015 06:03:08 AM JST
from sendevent.events import ClientMessage
* Thu 22 Jan 2015 06:03:17 AM JST
from sendevent.events import ClientMessage
* Thu 22 Jan 2015 06:03:20 AM JST
cl=ClientMessage(0,25165849, 32, 0, 25165849, 1, '&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
* Thu 22 Jan 2015 06:04:23 AM JST
from sendevent.events import ClientMessage
* Thu 22 Jan 2015 06:04:27 AM JST
cl=ClientMessage(0,25165849, 32, 0, 25165849, 1, '&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
* Thu 22 Jan 2015 06:06:24 AM JST
ischecked()
* Thu 22 Jan 2015 06:08:10 AM JST
'&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 22 Jan 2015 06:09:24 AM JST
_request
* Thu 22 Jan 2015 06:09:42 AM JST
'!\x00\x00\x19\x00\x80\x01\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 22 Jan 2015 06:12:47 AM JST
        
* Thu 22 Jan 2015 06:12:48 AM JST
code
* Thu 22 Jan 2015 06:14:15 AM JST
'! \x00\x00\x19\x00\x80\x01\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 22 Jan 2015 06:21:06 AM JST
25165849
* Thu 22 Jan 2015 06:23:29 AM JST
code
* Thu 22 Jan 2015 06:23:33 AM JST
_request.
* Thu 22 Jan 2015 06:24:03 AM JST
from sendevent.events import ClientMessage
cl=ClientMessage(0,25165849, 32, 0, 25165849, 1, '&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
* Thu 22 Jan 2015 06:24:44 AM JST
_request
* Thu 22 Jan 2015 06:24:49 AM JST
'! \x00\x00\x19\x00\x80\x01\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 22 Jan 2015 06:44:45 AM JST
25165849
* Thu 22 Jan 2015 06:47:13 AM JST
set?
* Thu 22 Jan 2015 06:49:28 AM JST
atomname
* Thu 22 Jan 2015 06:51:03 AM JST
self.
* Thu 22 Jan 2015 06:51:05 AM JST
0)
* Thu 22 Jan 2015 06:51:06 AM JST
0, 0)
* Thu 22 Jan 2015 06:51:06 AM JST
25165849, 0, 0)
* Thu 22 Jan 2015 06:51:06 AM JST
_get_setbinary(25165849, 0, 0)
* Thu 22 Jan 2015 06:52:59 AM JST
_set
* Thu 22 Jan 2015 06:55:08 AM JST
_get_head_buf?
* Thu 22 Jan 2015 06:56:14 AM JST
'_NET_WM_STATE'
* Thu 22 Jan 2015 06:56:47 AM JST
cl=ClientMessage(0,25165849, 32, 0, 25165849, 293, '&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
* Thu 22 Jan 2015 06:57:34 AM JST
'! \x00\x00\x19\x00\x80\x01%\x01\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 22 Jan 2015 07:21:46 AM JST
c.core.SendEvent.ClientMessage.above._get_setbinary
* Thu 22 Jan 2015 07:21:53 AM JST
25165849
* Thu 22 Jan 2015 07:23:17 AM JST
\x01\x00\x00\x00
* Thu 22 Jan 2015 07:23:26 AM JST
cl=ClientMessage(0,25165849, 32, 0, 25165849, 293, '\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
* Thu 22 Jan 2015 07:23:42 AM JST
                             
* Thu 22 Jan 2015 07:23:45 AM JST
cl=ClientMessage(0,25165849, 32, 0, 25165849, 293, '\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', True)
* Thu 22 Jan 2015 07:25:11 AM JST
title
* Thu 22 Jan 2015 07:25:14 AM JST
39845892
* Thu 22 Jan 2015 07:25:24 AM JST
cl=ClientMessage(0,39845892, 32, 0, 39845892, 293, '\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', True)
* Thu 22 Jan 2015 07:25:32 AM JST
check()
* Thu 22 Jan 2015 07:40:48 AM JST
39845892
* Thu 22 Jan 2015 07:50:14 AM JST
get_buffer()
* Thu 22 Jan 2015 07:50:25 AM JST
_event
* Thu 22 Jan 2015 07:50:51 AM JST
'\x00\x00\x00\x00\x04\x00`\x02\x01\x00\x00\x00! \x00\x00\x04\x00`\x02%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 22 Jan 2015 08:01:10 AM JST
39845892)
* Thu 22 Jan 2015 08:01:10 AM JST
unset(39845892)
* Thu 22 Jan 2015 08:01:30 AM JST
39845892
* Thu 22 Jan 2015 08:01:37 AM JST
'\x00\x00\x00\x00\x04\x00`\x02\xff\xff\xff\x00! \x00\x00\x04\x00`\x02%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 22 Jan 2015 08:04:33 AM JST
'\x00\x00\x00\x00\x04\x00`\x02\x01\x00\x00\x00! \x00\x00\x04\x00`\x02%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
'\x00\x00\x00\x00\x04\x00`\x02\xff\xff\xff\x00! \x00\x00\x04\x00`\x02%\x01\x00\x00\x01
\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

* Thu 22 Jan 2015 08:04:47 AM JST
from sendevent.events import ClientMessage
* Thu 22 Jan 2015 08:04:49 AM JST
from sendevent.events import ClientMessage
cl=ClientMessage(0,39845892, 32, 0, 39845892, 293, '\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', True)

* Thu 22 Jan 2015 08:07:20 AM JST
            
* Thu 22 Jan 2015 08:07:48 AM JST
'\x00\x00\x00\x00\x04\x00`\x02\xff\xff\xff\x00! \x00\x00\x04\x00`\x02%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 22 Jan 2015 08:08:11 AM JST
'\x00\x00\x00\x00\x04\x00`\x02\xff\xff\xff\x00! \x00\x00\x04\x00`\x02%\x01\x00\x00\x01
\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 22 Jan 2015 08:08:26 AM JST
'\x00\x00\x00\x00\x04\x00`\x02\xff\xff\xff\x00! \x00\x00\x04\x00`\x02%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 22 Jan 2015 08:10:05 AM JST
39845892
* Thu 22 Jan 2015 08:10:27 AM JST
ClientMessage(0,39845892, 32, 0, 39845892, 293, '\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', True)
* Thu 22 Jan 2015 08:10:49 AM JST
'\x00\x00\x00\x00\x04\x00`\x02\xff\xff\xff\x00! \x00\x00\x04\x00`\x02%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 22 Jan 2015 08:11:19 AM JST
    ClientMessage(0,39845892, 32, 0, 39845892, 293, '\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00', True)

    '\x00\x00\x00\x00\x04\x00`\x02\xff\xff\xff\x00! \x00\x00\x04\x00`\x02%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

* Fri 23 Jan 2015 02:43:27 AM JST
sendkeys2/
* Fri 23 Jan 2015 02:44:33 AM JST
sendkeys2/
* Fri 23 Jan 2015 02:44:59 AM JST
wxcb/
* Fri 23 Jan 2015 02:45:00 AM JST
sendkeys2/wxcb/
* Fri 23 Jan 2015 02:47:33 AM JST

* Fri 23 Jan 2015 02:47:33 AM JST

* Fri 23 Jan 2015 02:47:33 AM JST
del LEGACY

* Fri 23 Jan 2015 02:47:42 AM JST

* Fri 23 Jan 2015 02:47:43 AM JST

* Fri 23 Jan 2015 02:47:43 AM JST
    legacy = LEGACY.copy()

* Fri 23 Jan 2015 02:50:23 AM JST
sendkeys2/
* Fri 23 Jan 2015 02:56:11 AM JST
class GetKeyboardMappingReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.keysyms_per_keycode,) = _unpack_from('xB2x4x24x', parent, offset)
        offset += 32
        self.keysyms = xcb.List(parent, offset, self.length, 'I', 4)

* Fri 23 Jan 2015 02:57:49 AM JST
xcb.
* Fri 23 Jan 2015 02:57:53 AM JST
xcb.
* Fri 23 Jan 2015 02:58:43 AM JST
xcb.
* Fri 23 Jan 2015 02:59:16 AM JST
List(parent, offset, self.length, 'I', 4)
* Fri 23 Jan 2015 02:59:36 AM JST

* Fri 23 Jan 2015 02:59:36 AM JST

* Fri 23 Jan 2015 02:59:36 AM JST
        self.keysyms = 

* Fri 23 Jan 2015 03:00:15 AM JST
_keysym
* Fri 23 Jan 2015 03:00:16 AM JST
as _keysym
* Fri 23 Jan 2015 03:02:03 AM JST
List
* Fri 23 Jan 2015 03:02:04 AM JST
Reply, List
* Fri 23 Jan 2015 03:06:22 AM JST
_reply
* Fri 23 Jan 2015 03:07:24 AM JST
GetKeyboardMapping
* Fri 23 Jan 2015 03:08:46 AM JST
root
* Fri 23 Jan 2015 03:09:10 AM JST
0]
* Fri 23 Jan 2015 03:10:49 AM JST
xproto/
* Fri 23 Jan 2015 03:10:49 AM JST
protocol/xproto/
* Fri 23 Jan 2015 03:10:49 AM JST
wxcb/protocol/xproto/
* Fri 23 Jan 2015 03:11:33 AM JST
min_keycode
* Fri 23 Jan 2015 03:13:16 AM JST
248
* Fri 23 Jan 2015 07:21:48 AM JST
xproto/
* Fri 23 Jan 2015 07:21:48 AM JST
protocol/xproto/
* Fri 23 Jan 2015 07:21:49 AM JST
wxcb/protocol/xproto/
* Fri 23 Jan 2015 07:23:23 AM JST
KeyboardMapping
* Fri 23 Jan 2015 07:39:21 AM JST
class SingletonConnectionMeta(type):
    r"""Singleton Connection by display name."""

    _instances = {}

    def __call__(cls, *args, **kwargs):
        key = kwargs.get('display', '')
        if cls not in cls._instances:
            cls._instances[cls] = {}
        if key not in cls._instances[cls]:
            cls._instances[cls][key] = (super(SingletonConnectionMeta, cls)
                                        .__call__(*args, **kwargs))
        return cls._instances[cls][key]

* Fri 23 Jan 2015 07:41:07 AM JST
impor
* Fri 23 Jan 2015 07:42:52 AM JST
args
* Fri 23 Jan 2015 07:43:16 AM JST
from sendkeys2 import keymap
* Fri 23 Jan 2015 07:44:38 AM JST
KeyboardMapping
* Fri 23 Jan 2015 07:45:59 AM JST
                
* Fri 23 Jan 2015 07:46:21 AM JST
from sendkeys2 import keymap
k=keymap.KeyboradMapping()

* Fri 23 Jan 2015 07:47:11 AM JST
from sendkeys2 import keymap
k=keymap.KeyboardMapping()

* Fri 23 Jan 2015 07:47:44 AM JST
from sendkeys2 import keymap
k=keymap.KeyboardMapping()

* Fri 23 Jan 2015 08:02:22 AM JST

* Fri 23 Jan 2015 08:02:22 AM JST

* Fri 23 Jan 2015 08:02:22 AM JST
        print(args)

* Fri 23 Jan 2015 08:02:22 AM JST
        print(args)

* Fri 23 Jan 2015 08:02:23 AM JST
        print(args)
        print(kwargs)

* Fri 23 Jan 2015 08:02:45 AM JST
keymap.KeyboardMapping()
* Fri 23 Jan 2015 08:03:36 AM JST
from sendkeys2 import keymap
k=keymap.KeyboardMapping()

* Fri 23 Jan 2015 08:04:12 AM JST
38)
* Fri 23 Jan 2015 08:04:13 AM JST
code_to_sym(38)
* Fri 23 Jan 2015 08:11:56 AM JST
sendkeys2/
* Fri 23 Jan 2015 08:13:55 AM JST
repr
* Fri 23 Jan 2015 08:28:00 AM JST
from wxcb.xobj.display import Display
Display()

* Fri 23 Jan 2015 08:28:04 AM JST
Display()
* Fri 23 Jan 2015 09:11:02 AM JST
None # should raise NotImplementedError()
* Fri 23 Jan 2015 09:11:16 AM JST
behave
* Fri 23 Jan 2015 09:12:46 AM JST
NonTerminalExpression.__init__(self)
* Fri 23 Jan 2015 09:20:36 AM JST
class Sendkey(object):
    r"""Sendkey

    Sendkey is a object.
    Responsibility:
    """
    __metaclass__ = ABCMeta

    @abstractmethod
    def send(self, ):
        pass

* Fri 23 Jan 2015 09:20:40 AM JST
from abc import ABCMeta, abstractmethod


class Sendkey(object):
    r"""Sendkey

    Sendkey is a object.
    Responsibility:
    """
    __metaclass__ = ABCMeta

    @abstractmethod
    def send(self, ):
        pass

* Fri 23 Jan 2015 09:20:47 AM JST

* Fri 23 Jan 2015 09:20:47 AM JST

* Fri 23 Jan 2015 09:20:47 AM JST
from abc import ABCMeta, abstractmethod

* Fri 23 Jan 2015 09:20:56 AM JST
abstract.
* Fri 23 Jan 2015 09:21:01 AM JST

* Fri 23 Jan 2015 09:21:01 AM JST

* Fri 23 Jan 2015 09:21:01 AM JST
import sendkeys2.abstract as abstract

* Fri 23 Jan 2015 09:32:42 AM JST
xsendkey
* Sat 24 Jan 2015 06:21:56 AM JST
None # should raise NotImplementedError()
* Sat 24 Jan 2015 06:23:31 AM JST
self._exp.interpret().set_behave(self._behave)
* Sat 24 Jan 2015 06:23:44 AM JST
self._exp.interpret()
* Sat 24 Jan 2015 06:24:33 AM JST

* Sat 24 Jan 2015 06:24:33 AM JST

* Sat 24 Jan 2015 06:24:33 AM JST
        NonTerminalExpression.__init__(self)

* Sat 24 Jan 2015 06:24:57 AM JST
None # should raise NotImplementedError()
* Sat 24 Jan 2015 06:25:04 AM JST
interpreted.set_behave(self._behave)
* Sat 24 Jan 2015 06:25:35 AM JST
self
* Sat 24 Jan 2015 06:25:45 AM JST
return 
* Sat 24 Jan 2015 06:26:30 AM JST
pieces
* Sat 24 Jan 2015 06:26:35 AM JST
XKey
* Sat 24 Jan 2015 06:34:38 AM JST
self._xinputer.get_point()
* Sat 24 Jan 2015 06:34:53 AM JST
self._xinputer.get_point().set_y(newy)
* Sat 24 Jan 2015 06:34:58 AM JST
newy
* Sat 24 Jan 2015 06:35:32 AM JST
code
* Sat 24 Jan 2015 06:37:34 AM JST
interpret()
* Sat 24 Jan 2015 06:37:35 AM JST
1).interpret()
* Sat 24 Jan 2015 06:37:35 AM JST
r, 1).interpret()
* Sat 24 Jan 2015 06:37:36 AM JST
ModifierExpression(r, 1).interpret()
* Sat 24 Jan 2015 06:40:31 AM JST
self._xinputer
* Sat 24 Jan 2015 06:40:38 AM JST
self.
* Sat 24 Jan 2015 06:40:41 AM JST
self._xinputer
* Sat 24 Jan 2015 06:41:26 AM JST
from sendkeys2.pieces import XKey
* Sat 24 Jan 2015 06:41:32 AM JST
from sendkeys2.expression import *
* Sat 24 Jan 2015 06:41:35 AM JST
x=XSendKeyExpression(a)
* Sat 24 Jan 2015 06:41:40 AM JST
a=XKey(38)
* Sat 24 Jan 2015 06:41:43 AM JST
x=XSendKeyExpression(a)
* Sat 24 Jan 2015 06:41:58 AM JST
r=RepeatExpression(x)
* Sat 24 Jan 2015 06:42:03 AM JST
r=RepeatExpression(x, 3)
* Sat 24 Jan 2015 06:42:12 AM JST
ModifierExpression(r, 1).interpret()
* Sat 24 Jan 2015 06:42:22 AM JST
from sendkeys2.pieces import XKey
from sendkeys2.expression import *

a=XKey(38)
x=XSendKeyExpression(a)
r=RepeatExpression(x, 3)

* Sat 24 Jan 2015 06:42:29 AM JST
from sendkeys2.expression import *
* Sat 24 Jan 2015 06:42:55 AM JST
a=XKey(38)
x=XSendKeyExpression(a)

* Sat 24 Jan 2015 06:42:57 AM JST
a=XKey(38)
x=XSendKeyExpression(a)
r=RepeatExpression(x, 3)

* Sat 24 Jan 2015 06:43:01 AM JST
ModifierExpression(r, 1).interpret()
* Sat 24 Jan 2015 07:03:52 AM JST
expression
* Sat 24 Jan 2015 07:05:54 AM JST
send
* Sat 24 Jan 2015 07:05:55 AM JST
form send
* Sat 24 Jan 2015 07:07:51 AM JST
TokenType
* Sat 24 Jan 2015 07:08:39 AM JST
from sendkeys2.scanner import Scanner
* Sat 24 Jan 2015 07:08:42 AM JST
Scanner('a^bc{space 100}')
* Sat 24 Jan 2015 07:10:12 AM JST
exp.StackExpressions()
* Sat 24 Jan 2015 07:13:24 AM JST
Scanner
* Sat 24 Jan 2015 07:13:34 AM JST
scanner
* Sat 24 Jan 2015 07:15:31 AM JST
XSendKeyExpression
* Sat 24 Jan 2015 07:17:15 AM JST
_keymap
* Sat 24 Jan 2015 07:17:15 AM JST
self._keymap
* Sat 24 Jan 2015 07:18:34 AM JST
sendkeys2/
* Sat 24 Jan 2015 07:21:22 AM JST
NamedModifierMask, NamedButtonIndex
* Sat 24 Jan 2015 07:21:57 AM JST
import sendkeys2.pieces as pieces
* Sat 24 Jan 2015 07:22:28 AM JST
BUTTONS = {'LButton': ButtonCode(NamedButtonIndex.Left),
           'LClick': ButtonCode(NamedButtonIndex.Left),
           'RButton': ButtonCode(NamedButtonIndex.Right),
           'RClick': ButtonCode(NamedButtonIndex.Right),
           'MButton': ButtonCode(NamedButtonIndex.Middle),
           'MClick': ButtonCode(NamedButtonIndex.Middle),
           'WheelDown': ButtonCode(NamedButtonIndex.WheelDown),
           'WheelUp': ButtonCode(NamedButtonIndex.WheelUp),
           }

* Sat 24 Jan 2015 07:23:19 AM JST
MODIFIERS
* Sat 24 Jan 2015 07:23:22 AM JST
MODIFIERS = {'^': ModifierState(NamedModifierMask.Control),
             '+': ModifierState(NamedModifierMask.Shift),
             '!': ModifierState(NamedModifierMask.Alt),
             '#': ModifierState(NamedModifierMask.Super),
             }

* Sat 24 Jan 2015 07:23:27 AM JST
ModifierState(
* Sat 24 Jan 2015 07:23:30 AM JST
ModifierState(
* Sat 24 Jan 2015 07:23:32 AM JST
ModifierState(
* Sat 24 Jan 2015 07:23:34 AM JST
ModifierState(
* Sat 24 Jan 2015 07:25:56 AM JST
ModifierExpression
* Sat 24 Jan 2015 07:26:18 AM JST
                    
* Sat 24 Jan 2015 07:27:45 AM JST
token.getvalue()
* Sat 24 Jan 2015 07:27:51 AM JST
            elif TokenType.repeat == token:
                stack.append(
                    exp.RepeatExpression(stack.pop(), int(token.getvalue())))

* Sat 24 Jan 2015 07:28:12 AM JST

* Sat 24 Jan 2015 07:28:12 AM JST

* Sat 24 Jan 2015 07:28:12 AM JST
    # nonterminal

* Sat 24 Jan 2015 07:31:30 AM JST
point, 
* Sat 24 Jan 2015 07:31:52 AM JST
_
* Sat 24 Jan 2015 07:31:53 AM JST
r
* Sat 24 Jan 2015 07:31:53 AM JST
self.r
* Sat 24 Jan 2015 07:32:03 AM JST
self._exp.interpret()
* Sat 24 Jan 2015 07:32:52 AM JST
interpreted.
* Sat 24 Jan 2015 07:33:54 AM JST
return 
* Sat 24 Jan 2015 07:54:58 AM JST
TokenType.endmarker == token
* Sat 24 Jan 2015 07:55:05 AM JST
token
* Sat 24 Jan 2015 07:55:05 AM JST
endmarker == token
* Sat 24 Jan 2015 08:49:47 AM JST

* Sat 24 Jan 2015 08:49:47 AM JST

* Sat 24 Jan 2015 08:49:48 AM JST
        tokens = iter(self._tokens)

* Sat 24 Jan 2015 08:52:40 AM JST
append(
* Sat 24 Jan 2015 08:52:43 AM JST
append(
* Sat 24 Jan 2015 08:52:43 AM JST
stack.append(
* Sat 24 Jan 2015 08:54:21 AM JST
append(
* Sat 24 Jan 2015 08:54:21 AM JST
stack.append(
* Sat 24 Jan 2015 08:54:29 AM JST
                if modifier is not None:
                    e = exp.ModifierExpression(e, modifier)
                    modifier = None
                stack.append(e)

* Sat 24 Jan 2015 08:58:29 AM JST
                if modifier is not None:
                    exp = expression.ModifierExpression(exp, modifier)
                    modifier = None
                stack.append(exp)

* Sat 24 Jan 2015 08:58:45 AM JST

* Sat 24 Jan 2015 08:58:45 AM JST

* Sat 24 Jan 2015 08:58:45 AM JST
                continue

* Sat 24 Jan 2015 08:58:55 AM JST
append(
* Sat 24 Jan 2015 08:58:56 AM JST
stack.append(
* Sat 24 Jan 2015 08:58:58 AM JST
                    
* Sat 24 Jan 2015 08:59:07 AM JST

* Sat 24 Jan 2015 08:59:07 AM JST

* Sat 24 Jan 2015 08:59:07 AM JST
                continue

* Sat 24 Jan 2015 08:59:12 AM JST

* Sat 24 Jan 2015 08:59:13 AM JST

* Sat 24 Jan 2015 08:59:13 AM JST
                # TODO: (Atami) [2015/01/24]

* Sat 24 Jan 2015 08:59:19 AM JST

* Sat 24 Jan 2015 08:59:19 AM JST

* Sat 24 Jan 2015 08:59:19 AM JST
                # TODO: (Atami) [2015/01/24]

* Sat 24 Jan 2015 08:59:20 AM JST
append(
* Sat 24 Jan 2015 08:59:21 AM JST
stack.append(
* Sat 24 Jan 2015 08:59:23 AM JST
                   
* Sat 24 Jan 2015 08:59:33 AM JST

* Sat 24 Jan 2015 08:59:33 AM JST

* Sat 24 Jan 2015 08:59:34 AM JST
                stack.append(

* Sat 24 Jan 2015 08:59:45 AM JST

* Sat 24 Jan 2015 08:59:45 AM JST

* Sat 24 Jan 2015 08:59:45 AM JST
                continue

* Sat 24 Jan 2015 09:01:23 AM JST
self._analyze()
* Sat 24 Jan 2015 09:02:52 AM JST
Scanner('a^bc{space 100}{RClick}\0')
* Sat 24 Jan 2015 09:03:23 AM JST
s=Scanner('a^bc{space 100}{RClick}\0')
* Sat 24 Jan 2015 09:03:33 AM JST
from sendkeys2.scanner import Scanner
* Sat 24 Jan 2015 09:04:03 AM JST
from sendkeys2.scanner import Scanner
s=Scanner('a^bc{space 100}{RClick}\0')
from sendkeys2.analyze import Analyze

* Sat 24 Jan 2015 09:04:43 AM JST
Analyze(
* Sat 24 Jan 2015 09:05:41 AM JST
import sendkeys2.keymap as keymap
* Sat 24 Jan 2015 09:06:09 AM JST
keymap.KeyboardMapping(display=None)
* Sat 24 Jan 2015 09:07:09 AM JST
65)
* Sat 24 Jan 2015 09:07:10 AM JST
code_to_sym(65)
* Sat 24 Jan 2015 09:07:32 AM JST
32)
* Sat 24 Jan 2015 09:07:32 AM JST
sym_to_name(32)
* Sat 24 Jan 2015 09:09:44 AM JST
char_to_code
* Sat 24 Jan 2015 09:09:44 AM JST
_keymap.char_to_code
* Sat 24 Jan 2015 09:09:52 AM JST
self._keymap.name_to_sym(token.getvalue())
* Sat 24 Jan 2015 09:13:56 AM JST
token.getvalue()
* Sat 24 Jan 2015 09:14:59 AM JST
name_
* Sat 24 Jan 2015 09:15:56 AM JST
Analyze(s.get_tokens())
* Sat 24 Jan 2015 09:16:06 AM JST
from sendkeys2.scanner import Scanner
s=Scanner('a^bc{space 100}{RClick}\0')
from sendkeys2.analyze import Analyze

* Sat 24 Jan 2015 09:16:09 AM JST
Analyze(s.get_tokens())
* Sat 24 Jan 2015 09:20:09 AM JST
get_piece()
* Sat 24 Jan 2015 09:21:58 AM JST
expression.StackExpressions()
* Sat 24 Jan 2015 09:22:08 AM JST
_an
* Sat 24 Jan 2015 09:22:09 AM JST
lsef._an
* Sat 24 Jan 2015 09:22:52 AM JST
stack
* Sat 24 Jan 2015 09:22:59 AM JST
stack
* Sat 24 Jan 2015 09:23:00 AM JST
lsef.
* Sat 24 Jan 2015 09:23:11 AM JST
stack
* Sat 24 Jan 2015 09:23:16 AM JST
stack
* Sat 24 Jan 2015 09:23:24 AM JST

* Sat 24 Jan 2015 09:23:24 AM JST

* Sat 24 Jan 2015 09:23:24 AM JST
        return stack

* Sat 24 Jan 2015 09:28:19 AM JST
set_window
* Sat 24 Jan 2015 09:39:35 AM JST
get_piece()
* Sat 24 Jan 2015 09:40:03 AM JST
get_piece()
* Sat 24 Jan 2015 09:40:29 AM JST
title
* Sat 24 Jan 2015 09:40:43 AM JST
title
* Sat 24 Jan 2015 09:40:45 AM JST
54525974
* Sat 24 Jan 2015 09:41:10 AM JST
54525974)
* Sat 24 Jan 2015 09:41:10 AM JST
set_window(54525974)
* Sat 24 Jan 2015 09:41:21 AM JST
send()
* Sat 24 Jan 2015 09:46:37 AM JST

* Sat 24 Jan 2015 09:46:38 AM JST
scanner
* Sat 24 Jan 2015 09:46:41 AM JST
Scanner
* Sat 24 Jan 2015 09:46:49 AM JST
Scanner(line).get_tokens()
* Sat 24 Jan 2015 09:48:16 AM JST

* Sat 24 Jan 2015 09:48:16 AM JST

* Sat 24 Jan 2015 09:48:16 AM JST
        self._display = display

* Sat 24 Jan 2015 09:49:14 AM JST
self.analyze.get_expressions()
* Sat 24 Jan 2015 09:51:15 AM JST
_send
* Sat 24 Jan 2015 09:51:15 AM JST
self._send
* Sat 24 Jan 2015 09:51:24 AM JST
self.
* Sat 24 Jan 2015 09:52:03 AM JST
get_interpret
* Sat 24 Jan 2015 09:53:49 AM JST
from sendkeys2.scanner import Scanner

* Sat 24 Jan 2015 09:54:32 AM JST
54525974
* Sat 24 Jan 2015 10:44:30 AM JST
from sendevent import KeyPress, KeyRelease, ButtonPress, ButtonRelease
* Sat 24 Jan 2015 10:46:29 AM JST
from wxcb import conn
* Sat 24 Jan 2015 10:47:26 AM JST
roots
* Sat 24 Jan 2015 10:47:31 AM JST
get_setup()
* Sat 24 Jan 2015 10:49:58 AM JST
        root = conn.connect().get_setup().roots[0].root
        return KeyPress(
            0, window, self._code, 0, 0, root, window, 0, 0, 0,
            point.get_x(), point.get_y(), self._modifiers, 1).send()

* Sat 24 Jan 2015 10:50:39 AM JST
from sendkeys2.xsendkeys import XSendkeys

* Sat 24 Jan 2015 10:50:43 AM JST
x=XSendkeys('abc')
* Sat 24 Jan 2015 10:50:49 AM JST
x.send(54525974)
* Sat 24 Jan 2015 10:50:53 AM JST
x._xsends[0].flush()
* Sat 24 Jan 2015 10:51:10 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('abc')

* Sat 24 Jan 2015 10:51:15 AM JST
x.send(54525974)
* Sat 24 Jan 2015 10:51:18 AM JST
x._xsends[0].flush()
* Sat 24 Jan 2015 10:52:58 AM JST
wxcb
* Sat 24 Jan 2015 10:53:38 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('abc')
x.send(54525974)

* Sat 24 Jan 2015 10:53:41 AM JST
x._xsends[0].flush()
* Sat 24 Jan 2015 10:54:53 AM JST
            
* Sat 24 Jan 2015 10:56:58 AM JST
        root = conn.connect(display).get_setup().roots[0].root
        return ButtonPress(0, window, int(self._code), 0, 0, root, window,
                           0, 0, 0, point.get_x, point.get_y(),
                           int(self._modifiers), 1, display=display).send()

* Sat 24 Jan 2015 10:57:56 AM JST

* Sat 24 Jan 2015 10:57:56 AM JST

* Sat 24 Jan 2015 10:57:56 AM JST
import xcb2, xcb2.xproto

* Sat 24 Jan 2015 10:58:42 AM JST

* Sat 24 Jan 2015 10:58:42 AM JST

* Sat 24 Jan 2015 10:58:42 AM JST
import xcb2, xcb2.xproto

* Sat 24 Jan 2015 10:59:10 AM JST
from wxcb.protocol.xproto.define import NamedModifierMask, NamedButtonIndex
* Sat 24 Jan 2015 10:59:33 AM JST
NamedButtonIndex
* Sat 24 Jan 2015 10:59:35 AM JST

* Sat 24 Jan 2015 10:59:35 AM JST

* Sat 24 Jan 2015 10:59:35 AM JST
from xcb2.xproto import NamedModifierMask

* Sat 24 Jan 2015 11:01:20 AM JST
from wxcb.protocol.xproto.define import NamedModifierMask, NamedButtonIndex
* Sat 24 Jan 2015 11:01:22 AM JST
NamedModifierMask,
* Sat 24 Jan 2015 11:01:25 AM JST

* Sat 24 Jan 2015 11:01:25 AM JST

* Sat 24 Jan 2015 11:01:25 AM JST
from xcb2.xproto import NamedButtonIndex

* Sat 24 Jan 2015 11:01:57 AM JST
sendkeys2/
* Sat 24 Jan 2015 11:03:23 AM JST

* Sat 24 Jan 2015 11:03:25 AM JST
buttoncode
* Sat 24 Jan 2015 11:03:30 AM JST
Buttoncode
* Sat 24 Jan 2015 11:03:38 AM JST
keycode.
* Sat 24 Jan 2015 11:03:50 AM JST
buttoncode.
* Sat 24 Jan 2015 11:05:02 AM JST
keysym
* Sat 24 Jan 2015 11:06:07 AM JST

* Sat 24 Jan 2015 11:06:09 AM JST
Keycode
* Sat 24 Jan 2015 11:06:18 AM JST
keycode
* Sat 24 Jan 2015 11:06:41 AM JST
keysym.
* Sat 24 Jan 2015 11:06:44 AM JST
keycode.
* Sat 24 Jan 2015 11:06:47 AM JST
keysym.
* Sat 24 Jan 2015 11:06:51 AM JST
keysym.
* Sat 24 Jan 2015 11:06:53 AM JST
keysym.
* Sat 24 Jan 2015 11:06:56 AM JST
keysym.
* Sat 24 Jan 2015 11:06:58 AM JST
keysym.
* Sat 24 Jan 2015 11:07:02 AM JST
keysym.
* Sat 24 Jan 2015 11:07:05 AM JST
keyname.
* Sat 24 Jan 2015 11:07:18 AM JST
keysym.
* Sat 24 Jan 2015 11:07:23 AM JST
keysym.
* Sat 24 Jan 2015 11:07:26 AM JST
keysym.
* Sat 24 Jan 2015 11:07:28 AM JST
keysym.
* Sat 24 Jan 2015 11:08:42 AM JST
import 
* Sat 24 Jan 2015 11:08:42 AM JST
xproto import 
* Sat 24 Jan 2015 11:09:28 AM JST
GetKeyboardMapping
* Sat 24 Jan 2015 11:10:00 AM JST

* Sat 24 Jan 2015 11:10:00 AM JST

* Sat 24 Jan 2015 11:10:00 AM JST

* Sat 24 Jan 2015 11:10:01 AM JST
Get
* Sat 24 Jan 2015 11:10:01 AM JST
requests.Get
* Sat 24 Jan 2015 11:10:02 AM JST
xproto.requests.Get
* Sat 24 Jan 2015 11:10:11 AM JST
GetKeyboardMapping
* Sat 24 Jan 2015 11:10:28 AM JST
xcb2
* Sat 24 Jan 2015 11:11:04 AM JST
xcb2
* Sat 24 Jan 2015 11:11:18 AM JST
core.
* Sat 24 Jan 2015 11:11:18 AM JST
conn.core.
* Sat 24 Jan 2015 11:14:30 AM JST
conn.connect(display)
* Sat 24 Jan 2015 11:14:38 AM JST

* Sat 24 Jan 2015 11:14:38 AM JST

* Sat 24 Jan 2015 11:14:38 AM JST
        conn = conn.connect(display)

* Sat 24 Jan 2015 11:14:58 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('abc')

* Sat 24 Jan 2015 11:16:53 AM JST
None
* Sat 24 Jan 2015 11:17:08 AM JST
None
* Sat 24 Jan 2015 11:17:29 AM JST
None
* Sat 24 Jan 2015 11:17:44 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('abc')

* Sat 24 Jan 2015 11:20:03 AM JST
max_ 
* Sat 24 Jan 2015 11:20:14 AM JST
int(maxcode or setup.max_keycode)
* Sat 24 Jan 2015 11:20:31 AM JST
x.send(54525974)
* Sat 24 Jan 2015 11:20:34 AM JST
x._xsends[0].flush()
* Sat 24 Jan 2015 12:02:49 PM JST
w
* Sat 24 Jan 2015 12:02:50 PM JST
form w
* Sat 24 Jan 2015 12:03:34 PM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('abc')
x.send(54525974)

* Sun 25 Jan 2015 03:16:49 AM JST

* Sun 25 Jan 2015 03:16:55 AM JST
XKey(
* Sun 25 Jan 2015 03:16:55 AM JST
pieces.XKey(
* Sun 25 Jan 2015 03:17:25 AM JST
from sendkeys2.
* Sun 25 Jan 2015 03:17:37 AM JST
KeyboardMapping
* Sun 25 Jan 2015 03:17:51 AM JST
self, 
* Sun 25 Jan 2015 03:18:02 AM JST
from sendkeys2.keymap import KeyboardMapping
k=KeyboardMapping()

* Sun 25 Jan 2015 03:18:55 AM JST
97)
* Sun 25 Jan 2015 03:18:56 AM JST
sym_to_code(97)
* Sun 25 Jan 2015 03:19:08 AM JST
38)
* Sun 25 Jan 2015 03:19:08 AM JST
code_to_sym(38)
* Sun 25 Jan 2015 03:19:57 AM JST
cod
* Sun 25 Jan 2015 03:23:24 AM JST
from sendkeys2.keymap import KeyboardMapping
k=KeyboardMapping()

* Sun 25 Jan 2015 03:25:26 AM JST
sendkeys
* Sun 25 Jan 2015 03:25:26 AM JST
13]: sendkeys
* Sun 25 Jan 2015 03:25:57 AM JST
KeyboardMapping
* Sun 25 Jan 2015 03:25:57 AM JST
keymap.KeyboardMapping
* Sun 25 Jan 2015 03:25:59 AM JST
form 
* Sun 25 Jan 2015 03:25:59 AM JST
19]: form 
* Sun 25 Jan 2015 03:35:48 AM JST
    def appendcode(self, sym, code):
        r"""SUMMARY

        appendcode(sym, code)

        @Arguments:
        - `sym`:
        - `code`:

        @Return:

        @Error:
        """
        def getmodifiers(key):
            r"""For sort key."""
            return key.get_modifiers()

        if not sym in self:
            self[sym] = []
        codes = self[sym]
        codes.append(pieces.XKey(code, len(codes)))
        if 2 <= len(codes):
            codes.sort(key=getmodifiers)


* Sun 25 Jan 2015 03:36:20 AM JST
continue
* Sun 25 Jan 2015 03:38:08 AM JST
XKey
* Sun 25 Jan 2015 03:38:09 AM JST
import XKey
* Sun 25 Jan 2015 03:38:09 AM JST
pieces import XKey
* Sun 25 Jan 2015 03:38:41 AM JST
keysym_to_keycodes
* Sun 25 Jan 2015 03:43:35 AM JST
syms
* Sun 25 Jan 2015 03:43:48 AM JST

* Sun 25 Jan 2015 03:43:48 AM JST

* Sun 25 Jan 2015 03:43:48 AM JST
        index = 0

* Sun 25 Jan 2015 03:43:49 AM JST

* Sun 25 Jan 2015 03:43:50 AM JST

* Sun 25 Jan 2015 03:43:50 AM JST
            index += 1

* Sun 25 Jan 2015 03:46:22 AM JST
Using possibly undefined loop variable
* Sun 25 Jan 2015 03:49:56 AM JST
from sendkeys2.keymap import KeyboardMapping
k=KeyboardMapping()

* Sun 25 Jan 2015 03:50:04 AM JST
k.sym_to_code(65)
* Sun 25 Jan 2015 03:50:12 AM JST
from sendkeys2.keymap import KeyboardMapping
k=KeyboardMapping()

* Sun 25 Jan 2015 03:50:15 AM JST
k.sym_to_code(65)
* Sun 25 Jan 2015 03:50:38 AM JST
sym_to_code
* Sun 25 Jan 2015 03:57:34 AM JST
XKey
* Sun 25 Jan 2015 03:57:38 AM JST
        
* Sun 25 Jan 2015 03:57:42 AM JST
XKey
* Sun 25 Jan 2015 03:57:42 AM JST
pieces.XKey
* Sun 25 Jan 2015 03:57:51 AM JST
        # def getmodifiers(key):
        #     r"""For sort key."""
        #     return key.get_modifiers()

* Sun 25 Jan 2015 03:59:52 AM JST
raise:
* Sun 25 Jan 2015 04:00:19 AM JST
self.sym_to_codes(sym)
* Sun 25 Jan 2015 04:00:25 AM JST
codes
* Sun 25 Jan 2015 04:00:26 AM JST

* Sun 25 Jan 2015 04:00:26 AM JST

* Sun 25 Jan 2015 04:00:26 AM JST
        codes = self.sym_to_codes(sym)

* Sun 25 Jan 2015 04:00:54 AM JST
sym_to_codes
* Sun 25 Jan 2015 04:01:14 AM JST
from sendkeys2.keymap import KeyboardMapping
k=KeyboardMapping()

* Sun 25 Jan 2015 04:01:18 AM JST
k.sym_to_code(65)
* Sun 25 Jan 2015 04:02:45 AM JST
default
* Sun 25 Jan 2015 04:04:35 AM JST

* Sun 25 Jan 2015 04:05:17 AM JST
from sendkeys2.keymap import KeyboardMapping
k=KeyboardMapping()

* Sun 25 Jan 2015 04:05:53 AM JST
xkey
* Sun 25 Jan 2015 04:05:59 AM JST

* Sun 25 Jan 2015 04:05:59 AM JST

* Sun 25 Jan 2015 04:05:59 AM JST
                    xkey = pieces.XKey(codes[0], codes[1])

* Sun 25 Jan 2015 04:06:37 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('abc')

* Sun 25 Jan 2015 04:06:40 AM JST
x.send(54525974)
* Sun 25 Jan 2015 04:06:48 AM JST
x.flush()
* Sun 25 Jan 2015 04:06:58 AM JST
modifiers
* Sun 25 Jan 2015 05:04:27 AM JST
from sendkeys2.keymap import KeyboardMapping
k=KeyboardMapping()

* Sun 25 Jan 2015 05:05:48 AM JST
KEYSYMDEF
* Sun 25 Jan 2015 05:07:17 AM JST
0x30
* Sun 25 Jan 2015 06:18:06 AM JST
class CodeToSyms(object):
    r"""CodeToSyms

    CodeToSyms is a object.
    Responsibility:
    """
    # Attributes:
    def __init__(self, dict_=None):
        r"""
        """
        self.data = {}
        if dict_ is not None:
            self.update(dict_)

    @classmethod
    def from_display(cls, display=':0.0', mincode=None, maxcode=None):
        r"""SUMMARY

        from_display(display=':0.0', mincode=None, maxcode=None)

        @Arguments:
        - `display`:
        - `mincode`:
        - `maxcode`:

        @Return:

        @Error:
        """
        setup = conn.connect(display).get_setup()
        min_ = int(mincode or setup.min_keycode)
        max_ = int(maxcode or setup.max_keycode)
        last, count = max_ + min_, max_ - min_ + 1
        rep = GetKeyboardMapping(min_, count, display=display).request().reply()
        # chunks rep.keysyms
        this = cls()
        this[min_:last] = zip(*[iter(rep.keysyms)] * rep.keysyms_per_keycode)
        return this

    __hash__ = None # Avoid Py3k warning

    # Operations
    def set(self, code, syms):
        """set keysym list

        code (int): keycode value.
        syms (list): keysym list.

        returns None
        """
        self[code] = syms

    def setdefault(self, code, syms=None):
        r"""SUMMARY

        setdefault(code, syms=None)

        @Arguments:
        - `code`:
        - `syms`: (default: [])

        @Return:

        @Error:
        """
        if code not in self:
            self[code] = syms or []
        return self[code]

    def code_to_syms(self, code):
        """code_to_syms

        @Arguments:
        - `code`:

        @Return list:
        """
        return self[code]

    def code_to_sym(self, code, modifiers=0):
        """code_to_sym

        code: int
        modifiers: int

        returns Keysym
        """
        index = 0
        if (NamedModifierMask.Shift & modifiers) != 0:
            index += 1
        if (NamedModifierMask.Alt & modifiers) != 0:
            index += 2
        return self[code][index]

    def clear(self):
        """clear

        returns None
        """
        self.data.clear()

    def copy(self):
        """copy

        returns CodeToSyms
        """
        from copy import deepcopy
        return deepcopy(self)

    def update(self, dict_):
        """update

        dict_:

        returns None
        """
        if isinstance(dict_, (self.__class__, )):
            self.data.update(dict_.data)
        elif isinstance(dict_, (dict, )):
            for code, syms in dict_.iteritems():
                self[code] = syms

    def codes(self):
        """codes

        returns list
        """
        return self.data.keys()

    def listsyms(self):
        """listsyms

        returns lsit
        """
        return self.data.values()

    def itercodes(self):
        """itercodes

        returns generator
        """
        return self.data.iterkeys()

    def itersyms(self):
        """itersyms

        returns generator
        """
        return self.data.itervalues()

    def items(self):
        """items

        returns list
        """
        return self.data.items()

    def iteritems(self):
        """iteritems

        returns generator
        """
        return self.data.iteritems()

    def __setitem__(self, code, syms):
        self.data[Keycode(code)] = [Keysym(x) for x in syms]

    def __getitem__(self, code):
        return self.data[code]

    def __delitem__(self, code):
        del self.data[code]

    def __getslice__(self, i, j):
        i, j = max(i, 0), max(j, 0)
        if j < i:
            i, j = j, i
        new = self.__class__()
        for code in xrange(i, j + 1):
            try:
                new.setdefault(code, self[code])
            except KeyError as _err:
                _warnings.warn(str(_err))
        return new

    def __setslice__(self, i, j, seq):
        i, j = max(i, 0), max(j, 0)
        if j < i:
            i, j = j, i
        for code, syms in zip(xrange(i, j + 1), seq):
            self[code] = syms

    def __delslice__(self, i, j):
        i, j = max(i, 0), max(j, 0)
        if j < i:
            i, j = j, i
        for code in xrange(i, j + 1):
            try:
                del self[code]
            except KeyError as _err:
                _warnings.warn(str(_err))

    def __len__(self):
        return len(self.data)

    def __repr__(self):
        return '{0.__class__.__name__}({1})'.format(self, _pformat(self.data))

    def __str__(self):
        return repr(self)

    def __cmp__(self, other):
        if isinstance(other, (self.__class__, )):
            return cmp(self.data, other.data)
        return cmp(self.data, other)


    def __contains__(self, code):
        return code in self.data

    def __iter__(self):
        return iter(self.data)

    def __nonzero__(self):
        return bool(self.data)

* Sun 25 Jan 2015 06:18:19 AM JST
import warnings as _warnings
from pprint import pformat as _pformat

* Sun 25 Jan 2015 06:18:28 AM JST
from wxcb import conn
* Sun 25 Jan 2015 06:18:59 AM JST
from wxcb.protocol.xproto.requests import GetKeyboardMapping
* Sun 25 Jan 2015 06:20:43 AM JST
        setup = _conn.connect(display).get_setup()
        min_ = int(mincode or setup.min_keycode)
        max_ = int(maxcode or setup.max_keycode)
        last, count = max_ + min_, max_ - min_ + 1
        rep = GetKeyboardMapping(min_, count, display=display).request().reply()
        # chunks rep.keysyms
        this = cls()
        this[min_:last] = zip(*[iter(rep.keysyms)] * rep.keysyms_per_keycode)
        return this

* Sun 25 Jan 2015 06:20:59 AM JST
or 
* Sun 25 Jan 2015 06:20:59 AM JST
mincode or 
* Sun 25 Jan 2015 06:21:02 AM JST
or 
* Sun 25 Jan 2015 06:21:02 AM JST
maxcode or 
* Sun 25 Jan 2015 06:21:12 AM JST

* Sun 25 Jan 2015 06:21:12 AM JST

* Sun 25 Jan 2015 06:21:12 AM JST
        return this

* Sun 25 Jan 2015 06:21:14 AM JST

* Sun 25 Jan 2015 06:21:14 AM JST

* Sun 25 Jan 2015 06:21:14 AM JST
        this = cls()

* Sun 25 Jan 2015 06:21:25 AM JST
int(setup.max_keycode)
* Sun 25 Jan 2015 06:21:30 AM JST
max_
* Sun 25 Jan 2015 06:21:33 AM JST

* Sun 25 Jan 2015 06:21:33 AM JST

* Sun 25 Jan 2015 06:21:34 AM JST
        max_ = 

* Sun 25 Jan 2015 06:21:49 AM JST
this
* Sun 25 Jan 2015 06:24:45 AM JST
        setup = _conn.connect(display).get_setup()
        min_, max_ = int(setup.min_keycode), int(setup.max_keycode)
        last, count = max_ + min_, max_ - min_ + 1
        rep = GetKeyboardMapping(min_, count, display=display).request().reply()
        # chunks rep.keysyms
        self[min_:last] = zip(*[iter(rep.keysyms)] * rep.keysyms_per_keycode)

* Sun 25 Jan 2015 06:26:01 AM JST
dict_
* Sun 25 Jan 2015 06:27:03 AM JST
from wxcb.xobj.keycode import Keycode
from wxcb.xobj.keysym import Keysym

* Sun 25 Jan 2015 06:28:30 AM JST
class SymToCodes(object):
    """Class SymToCodes
    """
    # Attributes:
    def __init__(self, dic=None):
        r"""

        @Arguments:
        - `dic`:
        """
        self._dic = {}
        if dic is not None:
            self.update(dic)

    @classmethod
    def from_display(cls, display=':0.0', mincode=None, maxcode=None):
        r"""SUMMARY

        from_display(display=':0.0')

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        return cls.from_codetosyms(
            CodeToSyms.from_display(display, mincode, maxcode))

    @classmethod
    def from_codetosyms(cls, codetosyms):
        r"""SUMMARY

        from_codetosyms(codetosyms)

        @Arguments:
        - `codetosyms`:

        @Return:

        @Error:
        """
        if not isinstance(codetosyms, (CodeToSyms, )):
            # TODO: (Atami) [2015/01/10]
            raise StandardError()
        this = cls()
        for code, syms in codetosyms.iteritems():
            this.setsyms(code, syms)
        return this

    # Operations
    def setsyms(self, code, syms):
        r"""SUMMARY

        setsyms(code, syms)

        @Arguments:
        - `code`:
        - `syms`:

        @Return:

        @Error:
        """
        sym, index = 0, 0 # for escape pylint warning
        for index, sym in enumerate(syms, start=0):
            if 0 == sym:
                continue
            self.appendcode(sym, code, index)

    def appendcode(self, sym, code, index):
        r"""SUMMARY

        appendcode(sym, code)

        @Arguments:
        - `sym`:
        - `code`:

        @Return:

        @Error:
        """
        # def getmodifiers(key):
        #     r"""For sort key."""
        #     return key.get_modifiers()
        def getmodifiers(tup):
            r"""For sort modifiers."""
            return tup[1]

        if not sym in self:
            self[sym] = []
        codes = self[sym]
        # codes.append(pieces.XKey(code, index))
        codes.append((code, index))
        if 2 <= len(codes):
            codes.sort(key=getmodifiers)

    def set(self, sym, codes):
        """function set

        sym: int
        codes: list

        returns None
        """
        self[sym] = codes

    def sym_to_codes(self, sym):
        """function sym_to_codes

        sym: int

        returns list

        Error: KeyError
        """
        return self._dic.get(sym)

    def sym_to_code(self, sym, index):
        """function sym_to_code

        sym: int
        modifiers: int

        returns Keycode
        """
        return self.sym_to_codes(sym)[index]

    def clear(self):
        """function clear

        returns None
        """
        return self._dic.clear()

    def copy(self):
        """function copy

        returns SymToCodes
        """
        from copy import deepcopy
        return deepcopy(self)

    def update(self, dic):
        """function update

        dict:

        returns None
        """
        if isinstance(dic, (dict, self.__class__)):
            for sym, codes in dic.items():
                self[sym] = codes

    def syms(self):
        """function syms

        returns list
        """
        return self._dic.keys()

    def listcodes(self):
        """function listcodes

        returns list
        """
        return self._dic.values()

    def itersyms(self):
        """function itersyms

        returns generator
        """
        return self._dic.iterkeys()

    def itercodes(self):
        """function itercodes

        returns generator
        """
        return self._dic.itervalues()

    def items(self):
        """function items

        returns list
        """
        return self._dic.items()

    def iteritems(self):
        """function iteritems

        returns generator
        """
        return self._dic.iteritems()

    def __setitem__(self, sym, codes):
        if not isinstance(sym, (int, Keysym)):
            # TODO: (Atami) [2015/01/10]
            raise TypeError()
        if not isinstance(codes, list):
            # TODO: (Atami) [2015/01/10]
            raise TypeError()
        self._dic[sym] = codes

    def __getitem__(self, sym):
        return self._dic[sym]

    def __delitem__(self, sym):
        del self._dic[sym]

    def __len__(self):
        return len(self._dic)

    def __repr__(self):
        return '{0.__class__.__name__}({1})'.format(self, _pformat(self._dic))

    def __str__(self):
        return None # should raise NotImplementedError()

    def __contains__(self, sym):
        return sym in self._dic

    def __iter__(self):
        return iter(self._dic)

    def __nonzero__(self):
        return bool(self._dic)

* Sun 25 Jan 2015 06:28:38 AM JST
None
* Sun 25 Jan 2015 06:28:39 AM JST
dic=None
* Sun 25 Jan 2015 06:29:53 AM JST
display
* Sun 25 Jan 2015 06:30:09 AM JST
    def update(self, ):
        """update

        dict_:

        returns None
        """
        self.clear()
        setup = _conn.connect(self.display).get_setup()
        min_, max_ = int(setup.min_keycode), int(setup.max_keycode)
        last, count = max_ + min_, max_ - min_ + 1
        rep = GetKeyboardMapping(
            min_, count, display=self.display).request().reply()
        # chunks rep.keysyms
        self[min_:last] = zip(*[iter(rep.keysyms)] * rep.keysyms_per_keycode)


* Sun 25 Jan 2015 06:31:14 AM JST
class SingletonMeta(type):
    r"""Singleton Connection by display name."""

    _instances = {}

    def __call__(cls, *args, **kwargs):
        if len(args):
            key = args[0]
        else:
            key = kwargs.get('display', '')
        if key not in cls._instances:
            cls._instances[key] = (
                super(SingletonMeta, cls).__call__(*args, **kwargs))
        return cls._instances[key]

* Sun 25 Jan 2015 06:32:54 AM JST
sendkeys2/
* Sun 25 Jan 2015 06:34:19 AM JST
_instances = {}
* Sun 25 Jan 2015 06:34:23 AM JST

* Sun 25 Jan 2015 06:34:23 AM JST

* Sun 25 Jan 2015 06:34:23 AM JST
    __metaclass__ = SingletonMapMeta

* Sun 25 Jan 2015 06:34:36 AM JST
type.__new__(cls, *args, **kwargs)
* Sun 25 Jan 2015 06:35:43 AM JST
args[0]
* Sun 25 Jan 2015 06:35:50 AM JST
kwargs.get('display', '')
* Sun 25 Jan 2015 06:36:08 AM JST
        if key not in cls._instances:
            cls._instances[key] = (
                super(SingletonMapMeta, cls).__call__(*args, **kwargs))

* Sun 25 Jan 2015 06:37:15 AM JST
4dict
* Sun 25 Jan 2015 06:37:15 AM JST
bases, 4dict
* Sun 25 Jan 2015 06:37:15 AM JST
name, bases, 4dict
* Sun 25 Jan 2015 06:39:18 AM JST
_instances
* Sun 25 Jan 2015 06:41:36 AM JST
display
* Sun 25 Jan 2015 06:41:41 AM JST
_
* Sun 25 Jan 2015 06:41:42 AM JST
other._
* Sun 25 Jan 2015 06:41:52 AM JST
display
* Sun 25 Jan 2015 06:42:04 AM JST
other
* Sun 25 Jan 2015 06:42:19 AM JST
defcm
* Sun 25 Jan 2015 06:42:44 AM JST
        if isinstance(other, (self.__class__, )):
            return self._display == str(other)
        return self._display == other

* Sun 25 Jan 2015 06:43:04 AM JST
self._display == str(other)
* Sun 25 Jan 2015 06:43:14 AM JST
self._display == other
* Sun 25 Jan 2015 06:43:44 AM JST
from sendkeys2.converter import maps
maps.CodeToSyms
c=maps.CodeToSyms()

* Sun 25 Jan 2015 06:43:53 AM JST
maps.CodeToSyms._instances
* Sun 25 Jan 2015 06:44:05 AM JST
from sendkeys2.converter import maps

* Sun 25 Jan 2015 06:44:09 AM JST

* Sun 25 Jan 2015 06:44:09 AM JST

* Sun 25 Jan 2015 06:44:09 AM JST
maps.CodeToSyms

* Sun 25 Jan 2015 06:44:10 AM JST
c=maps.CodeToSyms()
* Sun 25 Jan 2015 06:44:13 AM JST
maps.CodeToSyms._instances
* Sun 25 Jan 2015 06:44:31 AM JST
c=maps.CodeToSyms()
* Sun 25 Jan 2015 06:44:39 AM JST
maps.CodeToSyms._instances
* Sun 25 Jan 2015 06:48:04 AM JST
CodeToSyms(display)
* Sun 25 Jan 2015 06:48:16 AM JST
    # Singleton
    def __new__(cls, *args, **kwargs):
        if len(args):
            key = Display(args[0])
        else:
            key = Display(kwargs.get('display', ''))
        if key not in cls._instances:
            cls._instances[key] = object.__new__(cls, *args, **kwargs)
        return cls._instances[key]


* Sun 25 Jan 2015 06:48:20 AM JST
    _instances = {}

    # Singleton
    def __new__(cls, *args, **kwargs):
        if len(args):
            key = Display(args[0])
        else:
            key = Display(kwargs.get('display', ''))
        if key not in cls._instances:
            cls._instances[key] = object.__new__(cls, *args, **kwargs)
        return cls._instances[key]


* Sun 25 Jan 2015 07:19:13 AM JST
self._display = Display(display)
* Sun 25 Jan 2015 07:23:54 AM JST
    def update(self, dic):
        """function update

        dict:

        returns None
        """
        if isinstance(dic, (dict, self.__class__)):
            for sym, codes in dic.items():
                self[sym] = codes


* Sun 25 Jan 2015 07:24:12 AM JST
CodeToSyms
* Sun 25 Jan 2015 07:26:02 AM JST
CodeToSyms(display)
* Sun 25 Jan 2015 07:26:46 AM JST
        for code, syms in codetosyms.iteritems():
            this.setsyms(code, syms)

* Sun 25 Jan 2015 07:26:55 AM JST
this
* Sun 25 Jan 2015 07:26:59 AM JST
CodeToSyms(self._display)
* Sun 25 Jan 2015 07:29:26 AM JST
        def getmodifiers(tup):
            r"""For sort modifiers."""
            return tup[1]


* Sun 25 Jan 2015 07:29:36 AM JST
self[sym]
* Sun 25 Jan 2015 07:30:44 AM JST

* Sun 25 Jan 2015 07:30:44 AM JST

* Sun 25 Jan 2015 07:30:44 AM JST
        # codes.append(pieces.XKey(code, index))

* Sun 25 Jan 2015 07:32:36 AM JST
self[sym] = []
* Sun 25 Jan 2015 07:35:23 AM JST
from sendkeys2.converter import maps

* Sun 25 Jan 2015 07:35:45 AM JST
s=maps.SymToCodes()
* Sun 25 Jan 2015 07:36:03 AM JST
from sendkeys2.converter import maps
s=maps.SymToCodes()
* Sun 25 Jan 2015 07:38:21 AM JST
code
* Sun 25 Jan 2015 07:38:29 AM JST
def
* Sun 25 Jan 2015 07:38:32 AM JST
display
* Sun 25 Jan 2015 07:43:51 AM JST
form 
* Sun 25 Jan 2015 07:43:59 AM JST
xobj.
* Sun 25 Jan 2015 07:44:21 AM JST
NamedModifierMask
* Sun 25 Jan 2015 07:45:11 AM JST
    #     if (NamedModifierMask.Alt & modifiers) != 0:
    #         index += 2
    #     return self[code][index]

* Sun 25 Jan 2015 07:45:29 AM JST
self[code][index]
* Sun 25 Jan 2015 07:45:30 AM JST
lsef.
* Sun 25 Jan 2015 07:46:50 AM JST

* Sun 25 Jan 2015 07:46:51 AM JST
SymToCodes
* Sun 25 Jan 2015 07:46:51 AM JST
CodeToSyms, SymToCodes
* Sun 25 Jan 2015 07:47:00 AM JST
ConvertError
* Sun 25 Jan 2015 07:51:48 AM JST
from sendkeys2.converter import maps
* Sun 25 Jan 2015 07:51:52 AM JST
maps.CodeToSyms._instances
* Sun 25 Jan 2015 07:54:59 AM JST
sym
* Sun 25 Jan 2015 07:55:10 AM JST

* Sun 25 Jan 2015 07:55:11 AM JST
Keycode
* Sun 25 Jan 2015 07:55:11 AM JST
import Keycode
* Sun 25 Jan 2015 07:55:12 AM JST
keycode import Keycode
* Sun 25 Jan 2015 07:55:28 AM JST
display = display
* Sun 25 Jan 2015 08:02:43 AM JST
sym_to_
* Sun 25 Jan 2015 08:02:44 AM JST
_symmap.sym_to_
* Sun 25 Jan 2015 08:03:03 AM JST
modifier
* Sun 25 Jan 2015 08:03:24 AM JST
sym_
* Sun 25 Jan 2015 08:12:17 AM JST
display
* Sun 25 Jan 2015 08:15:43 AM JST

* Sun 25 Jan 2015 08:15:43 AM JST
ConvertError
* Sun 25 Jan 2015 08:15:44 AM JST
import ConvertError
* Sun 25 Jan 2015 08:15:44 AM JST
err import ConvertError
* Sun 25 Jan 2015 08:19:09 AM JST

* Sun 25 Jan 2015 08:19:11 AM JST
SymToCodes
* Sun 25 Jan 2015 08:19:11 AM JST
CodeToSyms, SymToCodes
* Sun 25 Jan 2015 08:19:11 AM JST
import CodeToSyms, SymToCodes
* Sun 25 Jan 2015 08:19:12 AM JST
maps import CodeToSyms, SymToCodes
* Sun 25 Jan 2015 08:19:21 AM JST
name
* Sun 25 Jan 2015 08:19:43 AM JST
return 
* Sun 25 Jan 2015 08:20:12 AM JST
disp
* Sun 25 Jan 2015 08:21:06 AM JST
0, 
* Sun 25 Jan 2015 08:21:06 AM JST
modifier=0, 
* Sun 25 Jan 2015 08:22:43 AM JST
from sendkeys2.converter.keyname import Keyname
* Sun 25 Jan 2015 08:22:53 AM JST
from wxcb.xobj.keysym import Keysym
* Sun 25 Jan 2015 08:24:24 AM JST
Sym
* Sun 25 Jan 2015 08:24:49 AM JST
KEYSYMDEF
* Sun 25 Jan 2015 08:25:47 AM JST

* Sun 25 Jan 2015 08:25:47 AM JST

* Sun 25 Jan 2015 08:25:47 AM JST
        try:

* Sun 25 Jan 2015 08:25:49 AM JST

* Sun 25 Jan 2015 08:25:49 AM JST

* Sun 25 Jan 2015 08:25:49 AM JST
        except :

* Sun 25 Jan 2015 08:25:52 AM JST
Keysymdef.get(self._name)
* Sun 25 Jan 2015 08:27:07 AM JST
Keysymdef
* Sun 25 Jan 2015 08:27:47 AM JST
form 
* Sun 25 Jan 2015 08:29:06 AM JST
from sendkeys2.converter.converter import NameConverter
* Sun 25 Jan 2015 08:30:45 AM JST
CodeToSyms(display)
* Sun 25 Jan 2015 08:32:02 AM JST
            
* Sun 25 Jan 2015 08:32:17 AM JST
SymToCodes(display)
* Sun 25 Jan 2015 08:33:00 AM JST
            
* Sun 25 Jan 2015 08:33:25 AM JST

* Sun 25 Jan 2015 08:33:25 AM JST

* Sun 25 Jan 2015 08:33:25 AM JST
        self._codemap = CodeToSyms(display)

* Sun 25 Jan 2015 08:34:11 AM JST
from sendkeys2.converter.converter import NameConverter
* Sun 25 Jan 2015 08:34:19 AM JST
from sendkeys2.converter.converter import NameConverter
NameConverter('space')

* Sun 25 Jan 2015 08:34:27 AM JST
NameConverter('space')
* Sun 25 Jan 2015 08:43:36 AM JST
SymConverter
* Sun 25 Jan 2015 08:43:58 AM JST
sym
* Sun 25 Jan 2015 08:48:27 AM JST
    def char_to_sym(self, char):
        """function char_to_sym

        char: unicode

        returns
        """
        return self[char]

    def chars(self):
        """function chars

        returns
        """
        return self._dic.keys()

    def syms(self):
        """function syms

        returns
        """
        return self._dic.values()

    def iterchars(self):
        """function iterchars

        returns
        """
        return self._dic.iterkeys()

    def itersyms(self):
        """function itersyms

        returns
        """
        return self._dic.itervalues()

    def items(self):
        """function items

        returns
        """
        return self._dic.items()

    def iteritems(self):
        """function iteritems

        returns
        """
        return self._dic.iteritems()

    def clear(self):
        """function clear

        returns
        """
        return self._dic.clear()

    def copy(self):
        """function copy

        returns
        """
        return self.__class__(self._dic.copy())

    def __setitem__(self, char, sym):
        if not isinstance(char, (basestring, )):
            # TODO: (Atami) [2015/01/11]
            raise StandardError()
        symobj = sym
        if isinstance(symobj, (int, )):
            symobj = Keysym(symobj)
        if not isinstance(symobj, (Keysym)):
            # TODO: (Atami) [2015/01/11]
            raise StandardError()
        self._dic[char] = symobj

    def __getitem__(self, char):
        return self._dic[char]

    def __delitem__(self, char):
        del self._dic[char]

    def __len__(self):
        return len(self._dic)

    def __repr__(self):
        return '{0.__class__.__name__}({1})'.format(self, _pformat(self._dic))

    def __contains__(self, char):
        return char in self._dic

    def __nonzero__(self):
        return bool(self._dic)

* Sun 25 Jan 2015 08:52:03 AM JST

* Sun 25 Jan 2015 08:52:03 AM JST

* Sun 25 Jan 2015 08:52:04 AM JST
        if :

* Sun 25 Jan 2015 08:54:36 AM JST
CharToSym
* Sun 25 Jan 2015 08:55:19 AM JST
_chartosym
* Sun 25 Jan 2015 08:56:57 AM JST
_charmap.
* Sun 25 Jan 2015 08:56:58 AM JST
self._charmap.
* Sun 25 Jan 2015 08:57:48 AM JST
from sendkeys2.converter.converter import NameConverter
* Sun 25 Jan 2015 08:57:54 AM JST
NameConverter
* Sun 25 Jan 2015 08:59:48 AM JST
CharConverter
* Sun 25 Jan 2015 08:59:54 AM JST
NameConverter
* Sun 25 Jan 2015 09:00:01 AM JST
CodeConverter
* Sun 25 Jan 2015 09:00:24 AM JST
CharConverter, NameConverter, CodeConverter
* Sun 25 Jan 2015 09:01:58 AM JST
sendkeys2/
* Sun 25 Jan 2015 09:02:00 AM JST
wo
* Sun 25 Jan 2015 09:02:00 AM JST
pylib/wo
* Sun 25 Jan 2015 09:02:38 AM JST

* Sun 25 Jan 2015 09:02:38 AM JST

* Sun 25 Jan 2015 09:02:39 AM JST
import sendkeys2.keymap as keymap

* Sun 25 Jan 2015 09:03:28 AM JST
display = 
* Sun 25 Jan 2015 09:03:53 AM JST
Display
* Sun 25 Jan 2015 09:04:07 AM JST
self._keymap.get_display()
* Sun 25 Jan 2015 09:04:46 AM JST
.set(display)
* Sun 25 Jan 2015 09:07:30 AM JST
from sendkeys2.converter.converter import CharConverter
* Sun 25 Jan 2015 09:07:32 AM JST
CharConverter
* Sun 25 Jan 2015 09:07:39 AM JST
NameConverter
* Sun 25 Jan 2015 09:09:02 AM JST

* Sun 25 Jan 2015 09:09:02 AM JST

* Sun 25 Jan 2015 09:09:02 AM JST
        # self._keymap = keymap.KeyboardMapping(display=display)

* Sun 25 Jan 2015 09:09:40 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('abc')
x.send(54525974)

* Sun 25 Jan 2015 09:09:48 AM JST
x.flush()
* Sun 25 Jan 2015 09:12:26 AM JST
0'
* Sun 25 Jan 2015 03:34:29 PM JST
((KeyBehave.down & self._behave) != 0 or
            (KeyBehave.both & self._behave) != 0)
* Sun 25 Jan 2015 03:37:38 PM JST
down
* Sun 25 Jan 2015 03:38:45 PM JST
both
* Sun 25 Jan 2015 03:39:07 PM JST
behave
* Sun 25 Jan 2015 03:39:32 PM JST
both &
* Sun 25 Jan 2015 03:39:33 PM JST
KeyBehave.both &
* Sun 25 Jan 2015 03:42:15 PM JST
xsendkey
* Sun 25 Jan 2015 03:53:31 PM JST
sendkeys
* Sun 25 Jan 2015 03:53:40 PM JST
form 
* Sun 25 Jan 2015 04:00:30 PM JST
sendkey.send()
* Sun 25 Jan 2015 04:02:37 PM JST
interval
* Sun 25 Jan 2015 04:02:56 PM JST
interval
* Sun 25 Jan 2015 04:03:15 PM JST
interval()
* Sun 25 Jan 2015 04:03:36 PM JST

* Sun 25 Jan 2015 04:03:37 PM JST

* Sun 25 Jan 2015 04:03:37 PM JST
        self.

* Sun 25 Jan 2015 04:05:17 PM JST
class Interval(int):
    r"""Interval
    
    Interval is a object.
    Responsibility: 
    """

    def interval(self, ):
        r"""SUMMARY
        
        interval()
        
        @Return:

        @Error:
        """
        sleep(self)

    def __call__(self, ):
        self.interval()

    def __repr__(self):
        return '{0.__class__.__name__}({0})'.format(self)

* Sun 25 Jan 2015 04:05:24 PM JST

* Sun 25 Jan 2015 04:05:24 PM JST

* Sun 25 Jan 2015 04:05:24 PM JST
from time import sleep

* Sun 25 Jan 2015 04:06:19 PM JST
int
* Sun 25 Jan 2015 04:06:42 PM JST
self
* Sun 25 Jan 2015 04:07:16 PM JST
self)
* Sun 25 Jan 2015 04:07:16 PM JST
int(self)
* Sun 25 Jan 2015 04:07:39 PM JST
_value
* Sun 25 Jan 2015 04:10:51 PM JST
sel
* Sun 25 Jan 2015 04:11:01 PM JST
    def get_interval(self, ):
        r"""SUMMARY
        
        get_interval()
        
        @Return:

        @Error:
        """
        return self._interval


* Sun 25 Jan 2015 04:12:18 PM JST
from collections import deque
* Sun 25 Jan 2015 04:13:23 PM JST
_sendkeys.
* Sun 25 Jan 2015 04:13:38 PM JST
    def appendleft(self, sendkey):
        r"""SUMMARY
        
        appendleft(sendkey)
        
        @Arguments:
        - `sendkey`:
        
        @Return:

        @Error:
        """
        self._sendkeys.appendleft(sendkey)


* Sun 25 Jan 2015 04:18:17 PM JST
not 
* Sun 25 Jan 2015 04:20:14 PM JST
sendkey
* Sun 25 Jan 2015 04:20:22 PM JST
self._check(sendkey)
* Sun 25 Jan 2015 04:20:50 PM JST
        for sendkey in sendkeys:
            self._check(sendkey)

* Sun 25 Jan 2015 04:21:14 PM JST
sendkeys
* Sun 25 Jan 2015 04:27:41 PM JST
key
* Sun 25 Jan 2015 04:32:23 PM JST
sendkey
* Sun 25 Jan 2015 04:34:21 PM JST
XSender(
* Sun 25 Jan 2015 04:34:22 PM JST
sendkey.XSender(
* Sun 25 Jan 2015 04:34:29 PM JST
import sendkeys2.sendkey as sendkey
* Sun 25 Jan 2015 04:34:51 PM JST
sendkey
* Sun 25 Jan 2015 04:36:55 PM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('abc')
x.send(54525974)

* Sun 25 Jan 2015 04:36:59 PM JST
x.flush()
* Sun 25 Jan 2015 04:38:04 PM JST
sendkeys
* Sun 25 Jan 2015 04:38:14 PM JST
interval
* Sun 25 Jan 2015 04:41:10 PM JST
import interval
* Sun 25 Jan 2015 04:45:11 PM JST
set_window
* Sun 25 Jan 2015 04:45:11 PM JST
_sendkeys.set_window
* Sun 25 Jan 2015 04:45:11 PM JST
self._sendkeys.set_window
* Sun 25 Jan 2015 04:54:16 PM JST
super(Interval, self).set(interval)
* Sun 25 Jan 2015 10:50:57 PM JST
class XSender(object):
    r"""XSender

    XSender is a object.
    Responsibility:
    """
    def __init__(self, sendkeys, interval=0):
        r"""

        @Arguments:
        - `sendkeys`:
        - `interval`:
        """
        self._sendkeys = deque()
        self._interval = Interval(interval)
        self.extend(sendkeys)

    def _check(self, sendkey):
        r"""SUMMARY

        _check(sendkey)

        @Arguments:
        - `sendkey`:

        @Return:

        @Error:
        """
        for attr in ('set_window', 'send'):
            if not hasattr(sendkey, attr):
                # TODO: (Atami) [2015/01/25]
                raise AttributeError()

    def append(self, sendkey):
        r"""SUMMARY

        append(sendkey)

        @Arguments:
        - `sendkey`:

        @Return:

        @Error:
        """
        self._check(sendkey)
        self._sendkeys.append(sendkey)

    def appendleft(self, sendkey):
        r"""SUMMARY

        appendleft(sendkey)

        @Arguments:
        - `sendkey`:

        @Return:

        @Error:
        """
        self._check(sendkey)
        self._sendkeys.appendleft(sendkey)

    def pop(self, ):
        r"""SUMMARY

        pop()

        @Return:

        @Error:
        """
        return self._sendkeys.pop()

    def popleft(self, ):
        r"""SUMMARY

        popleft()

        @Return:

        @Error:
        """
        return self._sendkeys.popleft()

    def extend(self, sendkeys):
        r"""SUMMARY

        extend(sendkeys)

        @Arguments:
        - `sendkeys`:

        @Return:

        @Error:
        """
        for sendkey in sendkeys:
            self._check(sendkey)
        self._sendkeys.extend(sendkeys)

    def extendleft(self, sendkeys):
        r"""SUMMARY

        extendleft(sendkeys)

        @Arguments:
        - `sendkeys`:

        @Return:

        @Error:
        """
        for sendkey in sendkeys:
            self._check(sendkey)
        self._sendkeys.extendleft(sendkeys)

    def remove(self, sendkey):
        r"""SUMMARY

        remove(sendkey)

        @Arguments:
        - `sendkey`:

        @Return:

        @Error:
        """
        self._sendkeys.remove(sendkey)

    def reverse(self, ):
        r"""SUMMARY

        reverse()

        @Return:

        @Error:
        """
        self._sendkeys.reverse()

    def count(self, sendkey):
        r"""SUMMARY

        count()

        @Return:

        @Error:
        """
        return self._sendkeys.count(sendkey)

    def rotate(self, n=1):
        r"""SUMMARY

        rotate(n=1)

        @Arguments:
        - `n`:

        @Return:

        @Error:
        """
        self._sendkeys.rotate(n)

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:

        @Error:
        """
        self._sendkeys.clear()

    def _set_window(self, window):
        r"""SUMMARY

        set_window(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        for sendkey in self._sendkeys:
            sendkey.set_window(window)

    def get_interval(self, ):
        r"""SUMMARY

        get_interval()

        @Return:

        @Error:
        """
        return self._interval

    def set_interval(self, sec):
        r"""SUMMARY

        set_interval(sec)

        @Arguments:
        - `sec`:

        @Return:

        @Error:
        """
        self._interval.set(sec)

    interval = property(get_interval, set_interval)

    def send(self, window):
        r"""SUMMARY

        send(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        self._set_window(window)
        for sendkey in self._sendkeys:
            sendkey.send()

    def interval_send(self, window):
        r"""SUMMARY

        interval_send(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        self._set_window(window)
        for sendkey in self._sendkeys:
            self._interval()
            sendkey.send()

    def __getitem__(self, index):
        return self._sendkeys[index]

    def __setitem__(self, index, sendkey):
        self._check(sendkey)
        self._sendkeys[index] = sendkey

    def __delitem__(self, index):
        del self._sendkeys[index]

    def __len__(self):
        return len(self._sendkeys)

    def __iter__(self):
        return iter(self._sendkeys)


class XIntervalSend(object):
    r"""XIntervalSend

    XIntervalSend is a object.
    Responsibility:
    """
    def __init__(self, sendkeys, interval=0):
        r"""

        @Arguments:
        - `sendkeys`:
        - `interval`:
        """
        self._sendkeys = XSender(sendkeys)
        self._interval = Interval(interval)

    def interval_send(self, window):
        r"""SUMMARY

        interval_send(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        for sendkey in self._sendkeys:
            self._interval()
            sendkey.send()

    def send(self, window):
        r"""SUMMARY

        send(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        # TODO: (Atami) [2015/01/25]
        # set_window
        if self._interval == 0:
            return self._sendkeys.send(window)
        return self.interval_send(window)

* Sun 25 Jan 2015 10:51:08 PM JST

* Sun 25 Jan 2015 10:51:08 PM JST

* Sun 25 Jan 2015 10:51:08 PM JST
from interval import Interval

* Sun 25 Jan 2015 10:51:13 PM JST
from collections import deque
* Sun 25 Jan 2015 10:51:30 PM JST

* Sun 25 Jan 2015 10:51:30 PM JST

* Sun 25 Jan 2015 10:51:30 PM JST
        self._interval = Interval(interval)

* Sun 25 Jan 2015 10:51:32 PM JST
0
* Sun 25 Jan 2015 10:51:32 PM JST
interval=0
* Sun 25 Jan 2015 10:52:11 PM JST

* Sun 25 Jan 2015 10:52:11 PM JST

* Sun 25 Jan 2015 10:52:11 PM JST
        self._set_window(window)

* Sun 25 Jan 2015 10:52:27 PM JST
window
* Sun 25 Jan 2015 10:52:40 PM JST
window
* Sun 25 Jan 2015 10:52:47 PM JST
object
* Sun 25 Jan 2015 10:53:17 PM JST

* Sun 25 Jan 2015 10:53:17 PM JST

* Sun 25 Jan 2015 10:53:17 PM JST
        self._sendkeys = XSender(sendkeys)

* Sun 25 Jan 2015 10:53:30 PM JST
window
* Sun 25 Jan 2015 10:53:36 PM JST

* Sun 25 Jan 2015 10:53:36 PM JST

* Sun 25 Jan 2015 10:53:36 PM JST
        # set_window

* Sun 25 Jan 2015 10:55:24 PM JST
window
* Sun 25 Jan 2015 10:55:33 PM JST
window
* Sun 25 Jan 2015 10:55:42 PM JST

* Sun 25 Jan 2015 10:55:42 PM JST

* Sun 25 Jan 2015 10:55:43 PM JST
        # TODO: (Atami) [2015/01/25]

* Sun 25 Jan 2015 10:58:27 PM JST
impo
* Sun 25 Jan 2015 10:58:49 PM JST
XIntervalSender
* Sun 25 Jan 2015 10:59:30 PM JST
window
* Sun 25 Jan 2015 10:59:52 PM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('abc')
x.send(54525974)

* Sun 25 Jan 2015 11:00:02 PM JST
x.flush()
* Sun 25 Jan 2015 11:00:08 PM JST
x.send(54525974)
* Sun 25 Jan 2015 11:00:29 PM JST
interval
* Sun 25 Jan 2015 11:02:21 PM JST

* Sun 25 Jan 2015 11:02:21 PM JST

* Sun 25 Jan 2015 11:02:21 PM JST
from collections import deque

* Sun 25 Jan 2015 11:02:30 PM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('abc')

* Sun 25 Jan 2015 11:02:38 PM JST
x.send(54525974)
* Sun 25 Jan 2015 11:03:04 PM JST
from interval import Interval
* Sun 25 Jan 2015 11:04:20 PM JST
XIntervalSender
* Sun 25 Jan 2015 11:05:22 PM JST
interval
* Sun 25 Jan 2015 11:05:28 PM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('abc')
* Sun 25 Jan 2015 11:05:49 PM JST
54525974
* Sun 25 Jan 2015 11:36:01 PM JST
value
* Sun 25 Jan 2015 11:36:43 PM JST
__class__
* Sun 25 Jan 2015 11:36:44 PM JST
self.__class__
* Sun 25 Jan 2015 11:37:13 PM JST


* Sun 25 Jan 2015 11:37:15 PM JST
if :
* Sun 25 Jan 2015 11:37:16 PM JST
value
* Sun 25 Jan 2015 11:37:45 PM JST
self
* Sun 25 Jan 2015 11:38:25 PM JST
TypeE
* Sun 25 Jan 2015 11:46:27 PM JST
    def __cmp__(self, other):
        return cmp(self._value, self.__cast(other))

    def __lt__(self, other):
        return self._value < self.__cast(other)

    def __le__(self, other):
        return self._value <= self.__cast(other)

    def __gt__(self, other):
        return self._value > self.__cast(other)

    def __ge__(self, other):
        return self._value >= self.__cast(other)

    def __eq__(self, other):
        # if isinstance(other, (int, self.__class__)):
        #     return self._value == int(other)
        # return False
        return self._value == self.__cast(other)

    def __ne__(self, other):
        return not self == other

    def __hash__(self):
        return hash(self._value)

    def __nonzero__(self):
        return bool(self._value)

    def __add__(self, other):
        return self.__class__(self._value + self.__cast(other))

    def __radd__(self, other):
        return other + int(self)

    def __iadd__(self, other):
        self.set(self._value + self.__cast(other))
        return self

    def __sub__(self, other):
        return self.__class__(self._value - self.__cast(other))

    def __rsub__(self, other):
        return other - int(self)

    def __isub__(self, other):
        self.set(self._value - self.__cast(other))
        return self

    def __mul__(self, other):
        return self.__class__(self._value * self.__cast(other))

    def __rmul__(self, other):
        return other * int(self)

    def __imul__(self, other):
        self.set(self._value * self.__cast(other))
        return self

    def __div__(self, other):
        return self.__class__(self._value / self.__cast(other))

    def __rdiv__(self, other):
        return other / int(self)

    def __idiv__(self, other):
        self.set(self._value / self.__cast(other))
        return self

    def __pow__(self, other):
        return self.__class__(self._value ** self.__cast(other))

    def __rpow__(self, other):
        return other ** int(self)

    def __ipow__(self, other):
        self.set(self._value ** self.__cast(other))
        return self

    def __and__(self, other):
        return self.__class__(self._value & self.__cast(other))

    def __rand__(self, other):
        return other & int(self)

    def __iand__(self, other):
        self.set(self._value & self.__cast(other))
        return self

    def __xor__(self, other):
        return self.__class__(self._value ^ self.__cast(other))

    def __rxor__(self, other):
        return other ^ int(self)

    def __ixor__(self, other):
        self.set(self._value ^ self.__cast(other))
        return self

    def __or__(self, other):
        return self.__class__(self._value | self.__cast(other))

    def __ror__(self, other):
        return other | int(self)

    def __ior__(self, other):
        self.set(self._value | self.__cast(other))
        return self

    def __lshift__(self, other):
        return self.__class__(self._value << self.__cast(other))

    def __rlshift__(self, other):
        return other << int(self)

    def __ilshift__(self, other):
        self.set(self._value << self.__cast(other))
        return self

    def __rshift__(self, other):
        return self.__class__(self._value >> self.__cast(other))

    def __rrshift__(self, other):
        return other >> int(self)

    def __irshift__(self, other):
        self.set(self._value >> self.__cast(other))
        return self

    def __pos__(self):
        self.set(+self._value)
        return self

    def __neg__(self, ):
        self.set(-self._value)
        return self

    def __invert__(self, ):
        self.set(~self._value)
        return self

    def __int__(self):
        return self._value

    def __long__(self):
        return long(self._value)

    def __float__(self):
        return float(self._value)

    def __complex__(self):
        return complex(self._value)

    def __oct__(self):
        return oct(self._value)

    def __hex__(self):
        return hex(self._value)

* Sun 25 Jan 2015 11:48:30 PM JST
self._value
* Sun 25 Jan 2015 11:48:49 PM JST
self._value
* Sun 25 Jan 2015 11:48:55 PM JST
_value
* Sun 25 Jan 2015 11:49:52 PM JST
    def interval(self, ):
        r"""SUMMARY

        interval()

        @Return:

        @Error:
        """
        _sleep(self._value)


* Sun 25 Jan 2015 11:50:00 PM JST
    def interval(self, ):
        r"""SUMMARY

        interval()

        @Return:

        @Error:
        """
        _sleep(self._value)

    def __call__(self, ):
        self.interval()


* Sun 25 Jan 2015 11:50:14 PM JST
    def interval(self, ):
        r"""SUMMARY

        interval()

        @Return:

        @Error:
        """
        _sleep(self._value)

    def __call__(self, ):
        self.interval()


* Sun 25 Jan 2015 11:50:48 PM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('abc')

* Sun 25 Jan 2015 11:50:58 PM JST
x.send(54525974)
* Sun 25 Jan 2015 11:51:35 PM JST

* Sun 25 Jan 2015 11:51:35 PM JST

* Sun 25 Jan 2015 11:51:35 PM JST
import sendkeys2.sendkey as sendkey

* Mon 26 Jan 2015 12:05:39 AM JST
multiprocessing
* Mon 26 Jan 2015 05:33:27 AM JST
            if TokenType.endmarker == token:
                break
            elif TokenType.key == token:
                val = token.getvalue()
                if 1 == len(val): # char
                    codes = converter.CharConverter(val).to_code(self.display)
                else: # name
                    codes = converter.NameConverter(val).to_code(self.display)
                xkey = pieces.XKey(codes[0], codes[1])
                exp = expression.XSendKeyExpression(xkey)
            elif TokenType.button == token:
                xbutton = BUTTONS.get(token.getvalue())
                exp = expression.XSendKeyExpression(xbutton)
            elif TokenType.repeat == token:
                exp = expression.RepeatExpression(
                        self._exps.pop(), int(token.getvalue()))
            # nonterminal expression
            elif TokenType.modifier == token:
                modifier = MODIFIERS.get(token.getvalue())
                continue
            elif TokenType.behave == token:
                exp = expression.BehaveExpression(
                    self._exps.pop(), token.getvalue())
            elif TokenType.point == token:
                exp = expression.PointExpression(
                        self._exps.pop(), [int(x) for x in token.getvalue()])
            # stack
            if modifier is not None:
                exp = expression.ModifierExpression(exp, modifier)
                modifier = None
            self._exps.append(exp)

* Mon 26 Jan 2015 05:34:37 AM JST
break
* Mon 26 Jan 2015 05:34:48 AM JST
continue
* Mon 26 Jan 2015 05:35:35 AM JST
None
* Mon 26 Jan 2015 05:37:44 AM JST

* Mon 26 Jan 2015 05:37:44 AM JST

* Mon 26 Jan 2015 05:37:44 AM JST
import sendkeys2.expression as expression

* Mon 26 Jan 2015 05:37:49 AM JST
expression.
* Mon 26 Jan 2015 05:38:00 AM JST
expression.
* Mon 26 Jan 2015 05:38:02 AM JST
expression.
* Mon 26 Jan 2015 05:38:04 AM JST
expression.
* Mon 26 Jan 2015 05:38:07 AM JST
expression.
* Mon 26 Jan 2015 05:38:09 AM JST
expression.
* Mon 26 Jan 2015 05:38:12 AM JST
expression.
* Mon 26 Jan 2015 05:38:26 AM JST
                  
* Mon 26 Jan 2015 05:38:29 AM JST
                    
* Mon 26 Jan 2015 05:38:33 AM JST
                
* Mon 26 Jan 2015 05:39:02 AM JST
StackExpressions
* Mon 26 Jan 2015 05:39:12 AM JST
LeafExpression
* Mon 26 Jan 2015 05:39:18 AM JST
XSendKeyExpression
* Mon 26 Jan 2015 05:39:28 AM JST
BehaveExpression
* Mon 26 Jan 2015 05:39:33 AM JST
    
* Mon 26 Jan 2015 05:39:40 AM JST
RepeatExpression
* Mon 26 Jan 2015 05:39:47 AM JST
ModifierExpression
* Mon 26 Jan 2015 05:39:52 AM JST
PointExpression
* Mon 26 Jan 2015 05:40:18 AM JST

* Mon 26 Jan 2015 05:40:18 AM JST

* Mon 26 Jan 2015 05:40:18 AM JST
import sendkeys2.converter as converter

* Mon 26 Jan 2015 05:40:28 AM JST
sendkeys2.converter
* Mon 26 Jan 2015 05:40:41 AM JST
CharConverter
* Mon 26 Jan 2015 05:40:50 AM JST
NameConverter
* Mon 26 Jan 2015 05:40:57 AM JST
CodeConverter
* Mon 26 Jan 2015 05:41:04 AM JST
SymConverter
* Mon 26 Jan 2015 05:42:05 AM JST
SymConverter
* Mon 26 Jan 2015 05:42:34 AM JST

* Mon 26 Jan 2015 05:42:34 AM JST

* Mon 26 Jan 2015 05:42:34 AM JST
import sendkeys2.converter as converter

* Mon 26 Jan 2015 05:42:48 AM JST
converter.
* Mon 26 Jan 2015 05:42:50 AM JST
converter.
* Mon 26 Jan 2015 05:48:48 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('abc')

* Mon 26 Jan 2015 05:49:06 AM JST
x.flush()
* Mon 26 Jan 2015 05:49:18 AM JST
x.send(54525974)
* Mon 26 Jan 2015 08:18:06 AM JST
split 
* Mon 26 Jan 2015 08:24:27 AM JST
s]
* Mon 26 Jan 2015 08:24:40 AM JST
_tokens
* Mon 26 Jan 2015 08:24:57 AM JST
get_value()
* Mon 26 Jan 2015 08:25:39 AM JST
va
* Mon 26 Jan 2015 08:30:03 AM JST
unicode(
* Mon 26 Jan 2015 08:31:47 AM JST
unicode.
* Mon 26 Jan 2015 08:34:19 AM JST
'{}0020'.format('\u').encode().decode('unicode-escape')
* Mon 26 Jan 2015 08:38:49 AM JST

* Mon 26 Jan 2015 08:38:49 AM JST

* Mon 26 Jan 2015 08:38:49 AM JST
import sendkeys2.obj.modifiers as modif

* Mon 26 Jan 2015 08:39:03 AM JST
modif.
* Mon 26 Jan 2015 08:44:15 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('a+bc')

* Mon 26 Jan 2015 08:44:20 AM JST
x.send(54525974)
* Mon 26 Jan 2015 08:44:23 AM JST
x.flush()
* Mon 26 Jan 2015 08:49:49 AM JST
':0.0')
* Mon 26 Jan 2015 08:49:51 AM JST
':0.0'
* Mon 26 Jan 2015 08:51:52 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('a+bc')
x.send(54525974)

* Mon 26 Jan 2015 08:54:08 AM JST
Display
* Mon 26 Jan 2015 08:54:16 AM JST
display
* Mon 26 Jan 2015 08:54:29 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('a+bc')
x.send(54525974)

* Mon 26 Jan 2015 08:54:33 AM JST
x.flush()
* Mon 26 Jan 2015 09:07:03 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('a+bc')
x.send(54525974)

* Mon 26 Jan 2015 09:07:09 AM JST
x.flush()
* Mon 26 Jan 2015 09:43:40 AM JST
line
* Mon 26 Jan 2015 09:43:41 AM JST
_line = line
* Mon 26 Jan 2015 09:45:15 AM JST

* Mon 26 Jan 2015 09:45:15 AM JST
Scanner
* Mon 26 Jan 2015 09:45:16 AM JST
import Scanner
* Mon 26 Jan 2015 09:45:16 AM JST
scanner import Scanner
* Mon 26 Jan 2015 09:45:59 AM JST
self._scanner
* Mon 26 Jan 2015 09:46:24 AM JST
    def get_line(self, ):
        r"""SUMMARY

        get_line()

        @Return:

        @Error:
        """
        return self._line


* Mon 26 Jan 2015 09:47:33 AM JST
        if not self._line.endswith(('\0')):
            self._line += '\0'

* Mon 26 Jan 2015 09:47:44 AM JST
_
* Mon 26 Jan 2015 09:47:45 AM JST
self._
* Mon 26 Jan 2015 09:47:48 AM JST
_
* Mon 26 Jan 2015 09:47:49 AM JST
self._
* Mon 26 Jan 2015 09:50:38 AM JST
line
* Mon 26 Jan 2015 09:55:32 AM JST
_analyzer
* Mon 26 Jan 2015 09:55:35 AM JST
display
* Mon 26 Jan 2015 09:56:43 AM JST
analyze
* Mon 26 Jan 2015 09:56:44 AM JST
self.analyze
* Mon 26 Jan 2015 09:57:40 AM JST
.interpret()
* Mon 26 Jan 2015 09:57:41 AM JST
            
* Mon 26 Jan 2015 10:04:49 AM JST

* Mon 26 Jan 2015 10:04:49 AM JST

* Mon 26 Jan 2015 10:04:49 AM JST
        self._line = line

* Mon 26 Jan 2015 10:05:51 AM JST

* Mon 26 Jan 2015 10:05:51 AM JST

* Mon 26 Jan 2015 10:05:51 AM JST
        self._display = display

* Mon 26 Jan 2015 10:06:13 AM JST
_interval
* Mon 26 Jan 2015 10:06:16 AM JST
interval
* Mon 26 Jan 2015 10:07:20 AM JST
#     def flush(self, ):
#         r"""SUMMARY

#         flush()

#         @Return:

#         @Error:
#         """
#         conn.connect(self.display).flush()

* Mon 26 Jan 2015 10:08:12 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('a+bc')

* Mon 26 Jan 2015 10:08:33 AM JST
x.send(54525974)
* Mon 26 Jan 2015 10:08:41 AM JST
#     def send(self, window):
#         r"""SUMMARY

#         send(window)

#         @Arguments:
#         - `window`:

#         @Return:

#         @Error:
#         """
#         self._xsends.set_window(window)
#         self._xsends.send()

* Mon 26 Jan 2015 10:09:28 AM JST
_xsends
* Mon 26 Jan 2015 10:10:14 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('a+bc')
x.send(54525974)

* Mon 26 Jan 2015 10:10:18 AM JST
x.flush()
* Mon 26 Jan 2015 02:17:13 PM JST
form 
* Mon 26 Jan 2015 02:18:29 PM JST
listutil
* Mon 26 Jan 2015 02:19:41 PM JST
listutil
* Mon 26 Jan 2015 02:19:56 PM JST
LimitList
* Mon 26 Jan 2015 02:24:26 PM JST
ListFill
* Mon 26 Jan 2015 02:48:48 PM JST
self
* Mon 26 Jan 2015 02:53:17 PM JST
from t1.listutil.limitlist import LimitList
* Mon 26 Jan 2015 02:54:43 PM JST
list_
* Mon 26 Jan 2015 02:55:49 PM JST
            
* Mon 26 Jan 2015 02:57:47 PM JST
_to
* Mon 26 Jan 2015 02:57:47 PM JST
self._to
* Mon 26 Jan 2015 02:59:20 PM JST
asc
* Mon 26 Jan 2015 03:00:48 PM JST
deque(
* Mon 26 Jan 2015 03:02:21 PM JST

* Mon 26 Jan 2015 03:02:21 PM JST

* Mon 26 Jan 2015 03:02:21 PM JST
from t1.listutil.limitlist import LimitList

* Mon 26 Jan 2015 03:02:22 PM JST

* Mon 26 Jan 2015 03:02:22 PM JST

* Mon 26 Jan 2015 03:02:22 PM JST
from collections import deque

* Mon 26 Jan 2015 03:02:34 PM JST
.clear()
* Mon 26 Jan 2015 03:03:11 PM JST
tokens[0]
* Mon 26 Jan 2015 03:05:12 PM JST
from
* Mon 26 Jan 2015 03:06:06 PM JST
`(py--insert-imports "time[ \t]+import[ \t]+sleep" "from time import sleep")`
* Mon 26 Jan 2015 03:08:00 PM JST
time
* Mon 26 Jan 2015 03:08:06 PM JST
sleep
* Mon 26 Jan 2015 03:08:34 PM JST
[ \t]+
* Mon 26 Jan 2015 03:08:44 PM JST
time
* Mon 26 Jan 2015 03:08:51 PM JST
sleep
* Mon 26 Jan 2015 03:09:15 PM JST
# condition: (and (not (py:at-string|comment-p)) (not (equal (this-command-keys-vector) [32])))
* Mon 26 Jan 2015 03:09:56 PM JST

* Mon 26 Jan 2015 03:09:56 PM JST

* Mon 26 Jan 2015 03:09:56 PM JST
    __metaclass__ = 

* Mon 26 Jan 2015 03:09:58 PM JST

* Mon 26 Jan 2015 03:09:58 PM JST

* Mon 26 Jan 2015 03:09:58 PM JST
from abc import ABCMeta abstractmethod

* Mon 26 Jan 2015 03:10:46 PM JST
ABCMeta
* Mon 26 Jan 2015 03:19:36 PM JST
line.split()
* Mon 26 Jan 2015 03:19:39 PM JST

* Mon 26 Jan 2015 03:19:39 PM JST

* Mon 26 Jan 2015 03:19:39 PM JST
        tokens = 

* Mon 26 Jan 2015 03:20:08 PM JST
list_[:]
* Mon 26 Jan 2015 03:26:05 PM JST
cmd
* Mon 26 Jan 2015 03:26:06 PM JST
self.cmd
* Mon 26 Jan 2015 03:31:27 PM JST
self.
* Tue 27 Jan 2015 03:32:30 AM JST
'hello
* Tue 27 Jan 2015 03:33:35 AM JST

* Tue 27 Jan 2015 03:33:35 AM JST

* Tue 27 Jan 2015 03:33:35 AM JST
    cmd = 'ASC'

* Tue 27 Jan 2015 03:38:01 AM JST
from abc import ABCMeta, abstractmethod
* Tue 27 Jan 2015 03:38:23 AM JST
class SubScannerBase(object):
    r"""SubScannerBase

    SubScannerBase is a object.
    Responsibility:
    """
    __metaclass__ = ABCMeta

    def __init__(self, ):
        r"""
        """
        self._tokens = []

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:

        @Error:
        """
        del self._tokens[:]

    def append(self, token):
        r"""SUMMARY

        append(token)

        @Arguments:
        - `token`:

        @Return:

        @Error:
        """
        if not isinstance(token, (Token, )):
            raise StandardError()
        self._tokens.append(token)

    def get_tokens(self, ):
        r"""SUMMARY

        get_tokens()

        @Return:

        @Error:
        """
        return self._tokens

    @abstractmethod
    def scan_line(self, line):
        pass

    @abstractmethod
    def scan_list(self, list_):
        pass

* Tue 27 Jan 2015 03:39:10 AM JST
def
* Tue 27 Jan 2015 03:40:07 AM JST
'hello
* Tue 27 Jan 2015 03:41:26 AM JST
group
* Tue 27 Jan 2015 03:41:27 AM JST
100').group
* Tue 27 Jan 2015 03:41:27 AM JST
'ASC 100').group
* Tue 27 Jan 2015 03:41:28 AM JST
match('ASC 100').group
* Tue 27 Jan 2015 03:41:28 AM JST
c.match('ASC 100').group
* Tue 27 Jan 2015 03:42:08 AM JST
class
* Tue 27 Jan 2015 03:43:31 AM JST
'hello
* Tue 27 Jan 2015 03:44:29 AM JST
self.scan_list(line.replace('ASC', '').split())
* Tue 27 Jan 2015 03:44:47 AM JST
tokens = deque(list_)
* Tue 27 Jan 2015 03:45:43 AM JST
tokens
* Tue 27 Jan 2015 03:57:20 AM JST
XSKSyntaxError
* Tue 27 Jan 2015 04:11:44 AM JST
tokens
* Tue 27 Jan 2015 04:12:18 AM JST
        for token in tokens:
            if token.isdigit():
                digits.append(token)
            else:
                words.append(token.lower())

* Tue 27 Jan 2015 04:13:59 AM JST
            if token.isdigit():
                digits.append(token)
            else:

* Tue 27 Jan 2015 04:14:02 AM JST
            if token.isdigit():
                digits.append(token)
            else:
                words.append(token.lower())

* Tue 27 Jan 2015 04:16:02 AM JST
tokens
* Tue 27 Jan 2015 04:16:46 AM JST
_tokens
* Tue 27 Jan 2015 04:16:57 AM JST
ierable
* Tue 27 Jan 2015 04:17:08 AM JST
_
* Tue 27 Jan 2015 04:17:08 AM JST
self._
* Tue 27 Jan 2015 04:17:14 AM JST

* Tue 27 Jan 2015 04:17:14 AM JST

* Tue 27 Jan 2015 04:17:14 AM JST
        digits, words = [], []

* Tue 27 Jan 2015 04:17:36 AM JST

* Tue 27 Jan 2015 04:17:36 AM JST

* Tue 27 Jan 2015 04:17:37 AM JST
        return digits, words

* Tue 27 Jan 2015 04:18:34 AM JST
tokens
* Tue 27 Jan 2015 04:18:38 AM JST
DispatchArguments().dispatch(tokens)
* Tue 27 Jan 2015 04:20:37 AM JST
arguments.get_digits()
* Tue 27 Jan 2015 04:22:45 AM JST
be 
* Tue 27 Jan 2015 04:22:45 AM JST
must be 
* Tue 27 Jan 2015 04:22:45 AM JST
length must be 
* Tue 27 Jan 2015 04:22:45 AM JST
gidit length must be 
* Tue 27 Jan 2015 04:22:45 AM JST
arguments gidit length must be 
* Tue 27 Jan 2015 04:23:54 AM JST
len(arguments.get_digits())
* Tue 27 Jan 2015 04:24:46 AM JST
arguments.get_digits()
* Tue 27 Jan 2015 04:25:05 AM JST
digit
* Tue 27 Jan 2015 04:26:06 AM JST
len(arguments.get_digits())
* Tue 27 Jan 2015 04:26:19 AM JST
raise err.XSKSyntaxError('ASC ')
* Tue 27 Jan 2015 04:26:52 AM JST
len(arguments.get_words())
* Tue 27 Jan 2015 04:27:23 AM JST
arguments.get_digits()[0]
* Tue 27 Jan 2015 04:28:08 AM JST
        arguments = DispatchArguments().dispatch(tokens)
        # repeat
        if 2 <= len(arguments.get_digits()):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError('ASC ')
        if 1 == len(arguments.get_digits()):
            self.append(Token(TokenType.repeat, arguments.get_digits()[0]))
        # words
        if 2 <= len(arguments.get_words()):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError('ASC ')
        if 1 == len(arguments.get_words()):
            self.append(Token(TokenType.behave, arguments.get_words()[0]))

* Tue 27 Jan 2015 04:29:04 AM JST
        if 2 <= len(arguments.get_digits()):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError('ASC ')
        if 1 == len(arguments.get_digits()):
            self.append(Token(TokenType.repeat, arguments.get_digits()[0]))

* Tue 27 Jan 2015 04:30:01 AM JST
arguments
* Tue 27 Jan 2015 04:30:13 AM JST
        if 2 <= len(arguments.get_words()):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError('ASC ')
        if 1 == len(arguments.get_words()):
            self.append(Token(TokenType.behave, arguments.get_words()[0]))

* Tue 27 Jan 2015 04:30:55 AM JST
arguments.get_words()
* Tue 27 Jan 2015 04:31:21 AM JST
argument
* Tue 27 Jan 2015 04:31:31 AM JST
arguments.get_digits()
* Tue 27 Jan 2015 04:31:46 AM JST

* Tue 27 Jan 2015 04:31:46 AM JST

* Tue 27 Jan 2015 04:31:46 AM JST
        # repeat

* Tue 27 Jan 2015 04:31:47 AM JST

* Tue 27 Jan 2015 04:31:47 AM JST

* Tue 27 Jan 2015 04:31:47 AM JST
        # words

* Tue 27 Jan 2015 04:31:54 AM JST
arguments.get_digits()
* Tue 27 Jan 2015 05:33:59 AM JST
self.
* Tue 27 Jan 2015 05:34:13 AM JST
arguments = DispatchArguments().dispatch(tokens)
* Tue 27 Jan 2015 05:34:24 AM JST
tokens
* Tue 27 Jan 2015 05:34:59 AM JST
class ArgumentsScanner(object):
    r"""ArgumentsScanner
    
    ArgumentsScanner is a object.
    Responsibility: 
    """
    def __init__(self, ):
        r"""
        """
        self._tokens = list()
        
    def scan_line(self, line):
        r"""SUMMARY
        
        scan_line(line)
        
        @Arguments:
        - `line`:
        
        @Return:

        @Error:
        """
        self.scan_list(line.split())

    def scan_list(self, list_):
        r"""SUMMARY
        
        scan_list(list_)
        
        @Arguments:
        - `list_`:
        
        @Return:

        @Error:
        """
        arguments = DispatchArguments().dispatch(list_)

* Tue 27 Jan 2015 05:36:12 AM JST
        if 2 <= len(digits):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError('ASC ')
        if 1 == len(digits):
            self.append(Token(TokenType.repeat, digits[0]))

* Tue 27 Jan 2015 05:36:27 AM JST
object
* Tue 27 Jan 2015 05:36:31 AM JST
Sca
* Tue 27 Jan 2015 05:36:42 AM JST
self._scan_digits(arguments.get_digits())
* Tue 27 Jan 2015 05:37:17 AM JST
        if 2 <= len(words):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError('ASC ')
        if 1 == len(words):
            self.append(Token(TokenType.behave, words[0]))

* Tue 27 Jan 2015 05:37:25 AM JST
self._scan_words(arguments.get_words())
* Tue 27 Jan 2015 05:37:52 AM JST
words
* Tue 27 Jan 2015 05:37:58 AM JST
words
* Tue 27 Jan 2015 05:38:02 AM JST
words
* Tue 27 Jan 2015 05:38:17 AM JST
digits
* Tue 27 Jan 2015 05:38:21 AM JST
dgts)
* Tue 27 Jan 2015 05:38:23 AM JST
dgts
* Tue 27 Jan 2015 05:39:10 AM JST
self.append(Token(TokenType.behave, wds[0]))
* Tue 27 Jan 2015 05:39:13 AM JST
0]
* Tue 27 Jan 2015 05:39:17 AM JST
wds[0]
* Tue 27 Jan 2015 05:39:29 AM JST
wds[0]
* Tue 27 Jan 2015 05:39:30 AM JST

* Tue 27 Jan 2015 05:39:30 AM JST

* Tue 27 Jan 2015 05:39:30 AM JST
            self.append(Token(TokenType.behave, wds[0]))

* Tue 27 Jan 2015 05:39:56 AM JST
self.append(Token(TokenType.repeat, dgts[0]))
* Tue 27 Jan 2015 05:39:59 AM JST
0]
* Tue 27 Jan 2015 05:40:00 AM JST
dgts[0]
* Tue 27 Jan 2015 05:40:19 AM JST
dgts[0]
* Tue 27 Jan 2015 05:40:20 AM JST

* Tue 27 Jan 2015 05:40:20 AM JST

* Tue 27 Jan 2015 05:40:20 AM JST
            self.append(Token(TokenType.repeat, dgts[0]))

* Tue 27 Jan 2015 05:41:14 AM JST
.dispatch(tokens)
* Tue 27 Jan 2015 05:44:16 AM JST

* Tue 27 Jan 2015 05:44:16 AM JST

* Tue 27 Jan 2015 05:44:16 AM JST
        self._scan_arguments(tokens)

* Tue 27 Jan 2015 05:45:00 AM JST
self.
* Tue 27 Jan 2015 05:45:02 AM JST
self.append(Token(TokenType.code, tokens.popleft()))
* Tue 27 Jan 2015 05:45:21 AM JST

* Tue 27 Jan 2015 05:45:21 AM JST

* Tue 27 Jan 2015 05:45:21 AM JST
        self.append(Token(TokenType.code, tokens.popleft()))

* Tue 27 Jan 2015 05:45:59 AM JST
ASCScanner
* Tue 27 Jan 2015 05:46:44 AM JST
.dispatch(list_)
* Tue 27 Jan 2015 05:48:40 AM JST
print(tokens)
* Tue 27 Jan 2015 05:49:09 AM JST

* Tue 27 Jan 2015 05:49:10 AM JST

* Tue 27 Jan 2015 05:49:10 AM JST
        print(tokens)

* Tue 27 Jan 2015 05:49:10 AM JST

* Tue 27 Jan 2015 05:49:10 AM JST

* Tue 27 Jan 2015 05:49:10 AM JST
        print(tokens)

* Tue 27 Jan 2015 05:49:11 AM JST

* Tue 27 Jan 2015 05:49:11 AM JST

* Tue 27 Jan 2015 05:49:11 AM JST
        print(tokens)

* Tue 27 Jan 2015 05:51:18 AM JST
tokens
* Tue 27 Jan 2015 05:51:25 AM JST
        argscan = ArgumentsScanner()
        argscan.scan_list(tokens)
        for token in argscan.get_tokens():
            self.append(token)

* Tue 27 Jan 2015 05:51:40 AM JST
tokens
* Tue 27 Jan 2015 05:53:05 AM JST
    def scan_argumens(self, list_):
        r"""SUMMARY

        scan_argumens(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        argscan = ArgumentsScanner()
        argscan.scan_list(list_)
        for token in argscan.get_tokens():
            self.append(token)

* Tue 27 Jan 2015 05:53:08 AM JST
    def scan_argumens(self, list_):
        r"""SUMMARY

        scan_argumens(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        argscan = ArgumentsScanner()
        argscan.scan_list(list_)
        for token in argscan.get_tokens():
            self.append(token)

* Tue 27 Jan 2015 05:53:42 AM JST
SubScannerBase
* Tue 27 Jan 2015 06:02:50 AM JST
    @abstractmethod
    def scan_line(self, line):
        pass

* Tue 27 Jan 2015 06:03:18 AM JST
ScannerAbstract
* Tue 27 Jan 2015 06:28:18 AM JST
    maps = {1: hello,
            2: world,}


* Tue 27 Jan 2015 11:49:32 AM JST
        if not isinstance(token, (Token, )):
            raise StandardError()
        self._tokens.append(token)

* Tue 27 Jan 2015 11:50:23 AM JST
        if not isinstance(token, (Token, )):
            # TODO: (Atami) [2015/01/27]
            raise StandardError()

* Tue 27 Jan 2015 11:51:05 AM JST
get_tokens
* Tue 27 Jan 2015 11:55:45 AM JST
_tokens.
* Tue 27 Jan 2015 11:56:46 AM JST
for
* Tue 27 Jan 2015 11:57:02 AM JST
        if token.isdigit():
            self.digits.append(token)
        else:
            self.words.append(token.lower())

* Tue 27 Jan 2015 11:59:15 AM JST
        arguments = DispatchArguments()
        arguments.dispatch(list_)
        self.scan_digits(arguments.get_digits())
        self.scan_words(arguments.get_words())

* Tue 27 Jan 2015 12:02:42 PM JST
2 <= 
* Tue 27 Jan 2015 12:07:29 PM JST
    def scan_line(self, line):
        r"""SUMMARY

        scan_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.scan_list(line.split())

    def scan_list(self, list_):
        r"""SUMMARY

        scan_list(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        arguments = DispatchArguments()
        arguments.dispatch(list_)
        self.scan_digits(arguments.get_digits())
        self.scan_words(arguments.get_words())


* Tue 27 Jan 2015 12:09:38 PM JST
lsef.
* Tue 27 Jan 2015 12:10:21 PM JST
f
* Tue 27 Jan 2015 12:10:22 PM JST
sle.f
* Tue 27 Jan 2015 12:17:50 PM JST
sef
* Tue 27 Jan 2015 12:17:59 PM JST
append
* Tue 27 Jan 2015 12:25:49 PM JST
#         arguments = DispatchArguments()
#         arguments.dispatch(list_)
#         self.scan_digits(arguments.get_digits())
#         self.scan_words(arguments.get_words())

* Tue 27 Jan 2015 12:25:59 PM JST
#         arguments = DispatchArguments()
#         arguments.dispatch(list_)
#         self.scan_digits(arguments.get_digits())
#         self.scan_words(arguments.get_words())

#     def scan_digits(self, digits):
#         r"""SUMMARY

#         scan_digits(digits)

#         @Arguments:
#         - `digits`:

#         @Return:

#         @Error:
#         """

#     def scan_words(self, words):
#         r"""SUMMARY

#         scan_words(words)

#         @Arguments:
#         - `words`:

#         @Return:

#         @Error:
#         """


* Tue 27 Jan 2015 12:26:15 PM JST
#     def scan_list(self, list_):
#         r"""SUMMARY

#         scan_list(list_)

#         @Arguments:
#         - `list_`:

#         @Return:

#         @Error:
#         """
#         arguments = DispatchArguments()
#         arguments.dispatch(list_)
#         self.scan_digits(arguments.get_digits())
#         self.scan_words(arguments.get_words())

#     def scan_digits(self, digits):
#         r"""SUMMARY

#         scan_digits(digits)

#         @Arguments:
#         - `digits`:

#         @Return:

#         @Error:
#         """

#     def scan_words(self, words):
#         r"""SUMMARY

#         scan_words(words)

#         @Arguments:
#         - `words`:

#         @Return:

#         @Error:
#         """

#     def append_repeat(self, repeat):
#         r"""SUMMARY

#         append_repeat(repeat)

#         @Arguments:
#         - `repeat`:

#         @Return:

#         @Error:
#         """
#         self.append(Token(TokenType.repeat, repeat))

#     def append_behave(self, behave):
#         r"""SUMMARY

#         append_behave(behave)

#         @Arguments:
#         - `behave`:

#         @Return:

#         @Error:
#         """
#         self.append(Token(TokenType.behave, behave))

#     def append_button(self, button):
#         r"""SUMMARY

#         append_button(button)

#         @Arguments:
#         - `button`:

#         @Return:

#         @Error:
#         """
#         self.append(Token(TokenType.button, button))

#     def append_point(self, x, y):
#         r"""SUMMARY

#         append_point(x, y)

#         @Arguments:
#         - `x`:
#         - `y`:

#         @Return:

#         @Error:
#         """
#         self.append(Token(TokenType.point, (x, y)))

* Tue 27 Jan 2015 12:26:42 PM JST
    def scan_words(self, words):
        r"""SUMMARY

        scan_words(words)

        @Arguments:
        - `words`:

        @Return:

        @Error:
        """


* Tue 27 Jan 2015 12:28:10 PM JST
    _button = {'left': 'LButton',
               'right': 'RButton',
               'middle': 'MButton',
               'wheelup': 'WheelUp',
               'wheeldown': 'WheelDown',
               'l': 'LButton',
               'r': 'RButton',
               'm': 'MButton',
               'wu': 'WheelUp',
               'wd': 'WheelDown',
               }

* Tue 27 Jan 2015 12:28:19 PM JST
    _behave = {'down': 'press',
               'up': 'release',
               'd': 'press',
               'u': 'release',
               }

* Tue 27 Jan 2015 12:28:51 PM JST
    _behave = {'down': 'press',
               'up': 'release',
               'd': 'press',
               'u': 'release',
               }

* Tue 27 Jan 2015 12:29:18 PM JST
    _button = {'left': 'LButton',
               'right': 'RButton',
               'middle': 'MButton',
               'wheelup': 'WheelUp',
               'wheeldown': 'WheelDown',
               'l': 'LButton',
               'r': 'RButton',
               'm': 'MButton',
               'wu': 'WheelUp',
               'wd': 'WheelDown',
               }

* Tue 27 Jan 2015 12:34:06 PM JST
BEHAVE_ARG
* Tue 27 Jan 2015 12:35:04 PM JST
left
* Tue 27 Jan 2015 12:38:19 PM JST
XS
* Tue 27 Jan 2015 12:44:41 PM JST
Scanner
* Tue 27 Jan 2015 12:44:46 PM JST
ClickScanner
* Tue 27 Jan 2015 12:47:45 PM JST
from sendkeys2.parser.scanner import ClickScanner
* Tue 27 Jan 2015 12:49:31 PM JST
        if dlen in (2, 3):
            self.append_point(digits[0], digits[1])

* Tue 27 Jan 2015 10:06:45 PM JST
    _button = {'lbutton': 'LButton',
               'rbutton': 'RButton',
               'mbutton': 'MButton',
               'wheelup': 'WheelUp',
               'wheeldown': 'WheelDown',
               'lclick': 'LButton',
               'rclick': 'RButton',
               'mclick': 'MButton',
               'wup': 'WheelUp',
               'wdown': 'WheelDown',
               }

* Tue 27 Jan 2015 10:06:50 PM JST
_button =
* Tue 27 Jan 2015 10:07:33 PM JST
        arguments = DispatchArguments()
        arguments.dispatch(list_)
        self.scan_words(arguments.get_words())
        self.scan_digits(arguments.get_digits())

* Tue 27 Jan 2015 10:11:32 PM JST
        for word in words:
            if word in BUTTON_ARG:
                button = word
            elif word in BEHAVE_ARG:
                self.append_behave(BEHAVE_ARG.get(word))
            else:
                # TODO: (Atami) [2015/01/27]
                raise err.XSKSyntaxError()
        self.append_button(BUTTON_ARG.get(button))

* Tue 27 Jan 2015 10:14:24 PM JST
word
* Tue 27 Jan 2015 10:15:04 PM JST
word
* Tue 27 Jan 2015 10:16:19 PM JST

* Tue 27 Jan 2015 10:16:20 PM JST

* Tue 27 Jan 2015 10:16:20 PM JST
                button = self.buttons.get(wrd)

* Tue 27 Jan 2015 10:16:21 PM JST

* Tue 27 Jan 2015 10:16:21 PM JST

* Tue 27 Jan 2015 10:16:21 PM JST
        self.append_button(BUTTON_ARG.get(button))

* Tue 27 Jan 2015 10:21:08 PM JST
        dlen = len(digits)
        if 3 < dlen:
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        if dlen in (2, 3):
            self.append_point(digits[0], digits[1])
        if 1 == dlen:
            self.append_repeat(digits[0])
        if 3 == dlen:
            self.append_repeat(digits[2])

* Tue 27 Jan 2015 10:24:30 PM JST
r"""scanner -- DESCRIPTION

構文を変更したい時は Scanner object を取り替えるか変更する。

# unicode
{UNI 1000}

# keycode
{ASC 38} # keycode

# keysym
{SYM 1000} # keysym

# key
{space repeat}
{a down}
{a up}

# Button
{LClick repeat}
{LClick xpoint, ypoint}


# Click
{Click left repeat}
{Click right xpoint ypoint}
{Click 2}
{Click 100 200}
{Click down}
"""

* Tue 27 Jan 2015 10:24:46 PM JST
from abc import ABCMeta, abstractmethod
from collections import deque

from sendkeys2.parser.replacer import REPLACER as replacer
from sendkeys2.parser.token import TokenType, Token
from sendkeys2.parser import err

* Tue 27 Jan 2015 10:24:59 PM JST
class DispatchArguments(object):
    r"""DispatchArguments

    DispatchArguments is a object.
    Responsibility:
    """
    def __init__(self, ):
        r"""

        @Arguments:
        - `tokens`:
        """
        self.digits = list()
        self.words = list()

    def _dispatch(self, token):
        r"""SUMMARY

        _dispatch(digits, words)

        @Arguments:
        - `digits`:
        - `words`:

        @Return:

        @Error:
        """
        if token.isdigit():
            self.digits.append(token)
        else:
            self.words.append(token.lower())

    def dispatch(self, tokens):
        r"""SUMMARY

        dispatch()

        @Return:

        @Error:
        """
        for token in tokens:
            self._dispatch(token)

    def get_digits(self, ):
        r"""SUMMARY

        get_digits()

        @Return:

        @Error:
        """
        return self.digits

    def get_words(self, ):
        r"""SUMMARY

        get_words()

        @Return:

        @Error:
        """
        return self.words


class ScannerAbstract(object):
    r"""ScannerAbstract

    ScannerAbstract is a object.
    Responsibility:
    """
    __metaclass__ = ABCMeta

    def __init__(self, ):
        r"""
        """
        self._tokens = deque()

    def get_tokens(self, ):
        r"""SUMMARY

        get_tokens()

        @Return:

        @Error:
        """
        return self._tokens

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:

        @Error:
        """
        self._tokens.clear()

    def append(self, token):
        r"""SUMMARY

        append(token)

        @Arguments:
        - `token`:

        @Return:

        @Error:
        """
        if not isinstance(token, (Token, )):
            # TODO: (Atami) [2015/01/27]
            raise StandardError()
        self._tokens.append(token)

    def extend(self, tokens):
        r"""SUMMARY

        extend(tokens)

        @Arguments:
        - `tokens`:

        @Return:

        @Error:
        """
        for token in tokens:
            if not isinstance(token, (Token, )):
                # TODO: (Atami) [2015/01/27]
                raise StandardError()
        self._tokens.extend(tokens)

    @abstractmethod
    def scan_line(self, line):
        pass

    @abstractmethod
    def scan_list(self, list_):
        pass

* Tue 27 Jan 2015 10:25:19 PM JST
class KeyArgumentsScanner(ScannerAbstract):
    r"""KeyArgumentsScanner

    KeyArgumentsScanner is a ScannerAbstract.
    Responsibility:
    """
    def scan_line(self, line):
        r"""SUMMARY

        scan_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.scan_list(line.split())

    def scan_list(self, list_):
        r"""SUMMARY

        scan_list(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        arguments = DispatchArguments()
        arguments.dispatch(list_)
        self.scan_digits(arguments.get_digits())
        self.scan_words(arguments.get_words())

    def scan_digits(self, digits):
        r"""SUMMARY

        scan_digits(digits)

        @Arguments:
        - `digits`:

        @Return:

        @Error:
        """
        if len(digits) not in (0, 1):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        if len(digits):
            self.append_repeat(digits[0])

    def scan_words(self, words):
        r"""SUMMARY

        scan_words(words)

        @Arguments:
        - `words`:

        @Return:

        @Error:
        """
        if len(words) not in (0, 1):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        if len(words):
            self.append_behave(words[0])

    def append_repeat(self, repeat):
        r"""SUMMARY

        append_repeat(repeat)

        @Arguments:
        - `repeat`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.repeat, repeat))

    def append_behave(self, behave):
        r"""SUMMARY

        append_behave(behave)

        @Arguments:
        - `behave`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.behave, behave))


class _CMDScanner(ScannerAbstract):
    r"""_CMDScanner

    _CMDScanner is a ScannerAbstract.
    Responsibility:
    """
    # @abstractmethod
    # def scan_args(self, tokens):
    #     pass


BUTTON_ARG = {'left': 'LButton',
              'right': 'RButton',
              'middle': 'MButton',
              'wheelup': 'WheelUp',
              'wheeldown': 'WheelDown',
              'l': 'LButton',
              'r': 'RButton',
              'm': 'MButton',
              'wu': 'WheelUp',
              'wd': 'WheelDown',
              }


BEHAVE_ARG = {'down': 'press',
              'up': 'release',
              'd': 'press',
              'u': 'release',
              }


class ClickScanner(_CMDScanner):
    r"""ClickScanner

    ClickScanner is a _CMDScanner.
    Responsibility:
    """

    def scan_line(self, line):
        r"""SUMMARY

        scan_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.scan_list(line.replace('Click', '').split())

    def scan_list(self, list_):
        r"""SUMMARY

        scan_list(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        arguments = DispatchArguments()
        arguments.dispatch(list_)
        self.scan_words(arguments.get_words())
        self.scan_digits(arguments.get_digits())

    def scan_words(self, words):
        r"""SUMMARY

        scan_words(words)

        @Arguments:
        - `words`:

        @Return:

        @Error:
        """
        if 2 < len(words):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        button = 'left'
        for word in words:
            wrd = word.lower()
            if wrd in BUTTON_ARG:
                button = wrd
            elif wrd in BEHAVE_ARG:
                self.append_behave(BEHAVE_ARG.get(wrd))
            else:
                # TODO: (Atami) [2015/01/27]
                raise err.XSKSyntaxError()
        self.append_button(BUTTON_ARG.get(button))

    def scan_digits(self, digits):
        r"""SUMMARY

        scan_digits(digits)

        @Arguments:
        - `digits`:

        @Return:

        @Error:
        """
        dlen = len(digits)
        if 3 < dlen:
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        if dlen in (2, 3):
            self.append_point(digits[0], digits[1])
        if 1 == dlen:
            self.append_repeat(digits[0])
        if 3 == dlen:
            self.append_repeat(digits[2])

    def append_repeat(self, repeat):
        r"""SUMMARY

        append_repeat(repeat)

        @Arguments:
        - `repeat`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.repeat, repeat))

    def append_behave(self, behave):
        r"""SUMMARY

        append_behave(behave)

        @Arguments:
        - `behave`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.behave, behave))

    def append_button(self, button):
        r"""SUMMARY

        append_button(button)

        @Arguments:
        - `button`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.button, button))

    def append_point(self, x, y):
        r"""SUMMARY

        append_point(x, y)

        @Arguments:
        - `x`:
        - `y`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.point, (x, y)))


class ButtonScanner(ScannerAbstract):
    r"""ButtonScanner

    ButtonScanner is a ScannerAbstract.
    Responsibility:
    """
    buttons = {'lbutton': 'LButton',
               'rbutton': 'RButton',
               'mbutton': 'MButton',
               'wheelup': 'WheelUp',
               'wheeldown': 'WheelDown',
               'lclick': 'LButton',
               'rclick': 'RButton',
               'mclick': 'MButton',
               'wup': 'WheelUp',
               'wdown': 'WheelDown',
               }

    def scan_line(self, line):
        r"""SUMMARY

        scan_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.scan_list(line.split())

    def scan_list(self, list_):
        r"""SUMMARY

        scan_list(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        arguments = DispatchArguments()
        arguments.dispatch(list_)
        self.scan_words(arguments.get_words())
        self.scan_digits(arguments.get_digits())

    def scan_words(self, words):
        r"""SUMMARY

        scan_words(words)

        @Arguments:
        - `words`:

        @Return:

        @Error:
        """
        if 2 < len(words):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        for word in words:
            wrd = word.lower()
            if wrd in self.buttons:
                self.append_button(self.buttons.get(wrd))
            elif wrd in BEHAVE_ARG:
                self.append_behave(BEHAVE_ARG.get(wrd))
            else:
                # TODO: (Atami) [2015/01/27]
                raise err.XSKSyntaxError()

    def scan_digits(self, digits):
        r"""SUMMARY

        scan_digits(digits)

        @Arguments:
        - `digits`:

        @Return:

        @Error:
        """
        dlen = len(digits)
        if 3 < dlen:
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        if dlen in (2, 3):
            self.append_point(digits[0], digits[1])
        if 1 == dlen:
            self.append_repeat(digits[0])
        if 3 == dlen:
            self.append_repeat(digits[2])

    def append_button(self, button):
        r"""SUMMARY

        append_button(button)

        @Arguments:
        - `button`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.button, button))

    def append_behave(self, behave):
        r"""SUMMARY

        append_behave(behave)

        @Arguments:
        - `behave`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.behave, behave))

    def append_repeat(self, repeat):
        r"""SUMMARY

        append_repeat(repeat)

        @Arguments:
        - `repeat`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.repeat, repeat))

    def append_point(self, x, y):
        r"""SUMMARY

        append_point(x, y)

        @Arguments:
        - `x`:
        - `y`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.point, (x, y)))

* Tue 27 Jan 2015 10:36:56 PM JST
class ArgumentsScanner(SubScannerBase):
    r"""ArgumentsScanner

    ArgumentsScanner is a object.
    Responsibility:
    """
    def scan_line(self, line):
        r"""SUMMARY

        scan_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.scan_list(line.split())

    def scan_list(self, list_):
        r"""SUMMARY

        scan_list(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        arguments = DispatchArguments()
        arguments.dispatch(list_)
        self.scan_digits(arguments.get_digits())
        self.scan_words(arguments.get_words())

    def scan_digits(self, digits):
        r"""SUMMARY

        scan_digits(digits)

        @Arguments:
        - `digits`:

        @Return:

        @Error:
        """
        dgts = list(digits)
        if 2 <= len(dgts):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError('ASC ')
        if 1 == len(dgts):
            self.append_repeat(dgts[0])

    def append_repeat(self, repeat):
        r"""SUMMARY

        append_repeat(repeat)

        @Arguments:
        - `repeat`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.repeat, repeat))

    def scan_words(self, words):
        r"""SUMMARY

        scan_words(words)

        @Arguments:
        - `words`:

        @Return:

        @Error:
        """
        wds = list(words)
        if 2 <= len(wds):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError('ASC ')
        if 1 == len(wds):
            self.append_behave(wds[0])

    def append_behave(self, behave):
        r"""SUMMARY

        append_behave(behave)

        @Arguments:
        - `behave`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.behave, behave))

* Tue 27 Jan 2015 10:37:07 PM JST
SubScannerBase
* Tue 27 Jan 2015 10:37:25 PM JST
ASC 
* Tue 27 Jan 2015 10:38:55 PM JST
list_
* Tue 27 Jan 2015 10:39:55 PM JST
fa
* Tue 27 Jan 2015 10:39:55 PM JST
sle.fa
* Tue 27 Jan 2015 10:41:52 PM JST
        if len(tokens) <= 0 or 2 < len(tokens):
            raise err.XSKSyntaxError(
                'ASC arguments length must than 1 and less 2 given({})'
                .format(len(tokens)))

* Tue 27 Jan 2015 10:41:59 PM JST
                
* Tue 27 Jan 2015 10:44:34 PM JST
        if len(tokens) <= 0 or 2 < len(tokens):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()

* Tue 27 Jan 2015 10:45:06 PM JST
scan_
* Tue 27 Jan 2015 10:45:14 PM JST
lsef
* Tue 27 Jan 2015 10:48:18 PM JST
        if len(tokens) <= 0 or 2 < len(tokens):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()

* Tue 27 Jan 2015 10:50:50 PM JST
        if len(tokens) <= 0 or 2 < len(tokens):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()

* Tue 27 Jan 2015 10:53:08 PM JST

* Tue 27 Jan 2015 10:53:08 PM JST

* Tue 27 Jan 2015 10:53:08 PM JST
    key = ()

* Tue 27 Jan 2015 11:05:57 PM JST
        if len(tokens) <= 0 or 2 < len(tokens):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()

* Tue 27 Jan 2015 11:06:26 PM JST
tokens
* Tue 27 Jan 2015 11:08:38 PM JST
f
* Tue 27 Jan 2015 11:08:38 PM JST
sle.f
* Tue 27 Jan 2015 11:08:50 PM JST
ASCScanner
* Tue 27 Jan 2015 11:11:04 PM JST
end
* Tue 27 Jan 2015 11:11:04 PM JST
start, end
* Tue 27 Jan 2015 11:11:05 PM JST
startswith(('', ''), start, end
* Tue 27 Jan 2015 11:12:04 PM JST
sscanner.scan_line(line)
* Tue 27 Jan 2015 11:12:08 PM JST
self.extend(sscanner.get_tokens())
* Tue 27 Jan 2015 11:14:00 PM JST
e
* Tue 27 Jan 2015 11:14:01 PM JST
sle.e
* Tue 27 Jan 2015 11:15:09 PM JST
self.extend(sscanner.get_tokens())
* Tue 27 Jan 2015 11:15:27 PM JST
            sscanner.scan_line(line)
            self.extend(sscanner.get_tokens())

* Tue 27 Jan 2015 11:17:13 PM JST
from 
* Tue 27 Jan 2015 11:17:23 PM JST
from sendkeys2.parser.scanner import ClickScanner

* Tue 27 Jan 2015 11:17:29 PM JST
ClickScanner
* Tue 27 Jan 2015 11:17:37 PM JST
from sendkeys2.parser.scanner import SubScanner
* Tue 27 Jan 2015 11:18:23 PM JST
from sendkeys2.parser.scanner import SubScanner
* Tue 27 Jan 2015 11:19:22 PM JST
'SYM
* Tue 27 Jan 2015 11:20:15 PM JST
ButtonScanner.buttons.keys()
* Tue 27 Jan 2015 11:20:21 PM JST
# {LButton}
* Tue 27 Jan 2015 11:20:27 PM JST
# {Click}
* Tue 27 Jan 2015 11:20:32 PM JST
# {UNI 1000}
* Tue 27 Jan 2015 11:20:37 PM JST
# {SYM 97}
* Tue 27 Jan 2015 11:20:42 PM JST
# {ASC 100}
* Tue 27 Jan 2015 11:20:48 PM JST
# {space}
* Tue 27 Jan 2015 11:20:56 PM JST

* Tue 27 Jan 2015 11:20:57 PM JST

* Tue 27 Jan 2015 11:20:57 PM JST
        # {space}

* Tue 27 Jan 2015 11:20:58 PM JST

* Tue 27 Jan 2015 11:20:58 PM JST

* Tue 27 Jan 2015 11:20:58 PM JST
        # {LButton}

* Tue 27 Jan 2015 11:20:58 PM JST

* Tue 27 Jan 2015 11:20:58 PM JST

* Tue 27 Jan 2015 11:20:59 PM JST
        # {Click}

* Tue 27 Jan 2015 11:20:59 PM JST

* Tue 27 Jan 2015 11:20:59 PM JST

* Tue 27 Jan 2015 11:20:59 PM JST
        # {UNI 1000}

* Tue 27 Jan 2015 11:21:00 PM JST

* Tue 27 Jan 2015 11:21:00 PM JST

* Tue 27 Jan 2015 11:21:00 PM JST
        # {SYM 97}

* Tue 27 Jan 2015 11:21:01 PM JST

* Tue 27 Jan 2015 11:21:01 PM JST

* Tue 27 Jan 2015 11:21:01 PM JST
        # {ASC 100}

* Tue 27 Jan 2015 11:22:17 PM JST
right
* Tue 27 Jan 2015 11:22:17 PM JST
'Click right
* Tue 27 Jan 2015 11:23:04 PM JST
tuple(ButtonScanner.buttons.keys())
* Tue 27 Jan 2015 11:24:56 PM JST
ss=SubScanner()
ss.scan_line('LButton')

* Tue 27 Jan 2015 11:25:03 PM JST
from sendkeys2.parser.scanner import SubScanner
ss=SubScanner()
ss.scan_line('LButton')

* Wed 28 Jan 2015 12:02:49 AM JST
ss.scan_line('ASC 100')
* Wed 28 Jan 2015 12:02:57 AM JST
Token(type=code, value="100")
* Wed 28 Jan 2015 01:12:54 AM JST
class DispatchArguments(object):
    r"""DispatchArguments

    DispatchArguments is a object.
    Responsibility:
    """
    def __init__(self, ):
        r"""

        @Arguments:
        - `tokens`:
        """
        self.digits = list()
        self.words = list()

    def _dispatch(self, token):
        r"""SUMMARY

        _dispatch(digits, words)

        @Arguments:
        - `digits`:
        - `words`:

        @Return:

        @Error:
        """
        if token.isdigit():
            self.digits.append(token)
        else:
            self.words.append(token.lower())

    def dispatch(self, tokens):
        r"""SUMMARY

        dispatch()

        @Return:

        @Error:
        """
        for token in tokens:
            self._dispatch(token)

    def get_digits(self, ):
        r"""SUMMARY

        get_digits()

        @Return:

        @Error:
        """
        return self.digits

    def get_words(self, ):
        r"""SUMMARY

        get_words()

        @Return:

        @Error:
        """
        return self.words

* Wed 28 Jan 2015 01:16:13 AM JST
    def append(self, token):
        r"""SUMMARY

        append(token)

        @Arguments:
        - `token`:

        @Return:

        @Error:
        """
        if not isinstance(token, (Token, )):
            # TODO: (Atami) [2015/01/27]
            raise StandardError()
        self._tokens.append(token)

    def extend(self, tokens):
        r"""SUMMARY

        extend(tokens)

        @Arguments:
        - `tokens`:

        @Return:

        @Error:
        """
        for token in tokens:
            if not isinstance(token, (Token, )):
                # TODO: (Atami) [2015/01/27]
                raise StandardError()
        self._tokens.extend(tokens)

* Wed 28 Jan 2015 01:16:20 AM JST
sen
* Wed 28 Jan 2015 01:16:21 AM JST
form sen
* Wed 28 Jan 2015 01:17:10 AM JST
class KeyArgumentsScanner(ScannerAbstract):
    r"""KeyArgumentsScanner

    KeyArgumentsScanner is a ScannerAbstract.
    Responsibility:
    """
    def scan_line(self, line):
        r"""SUMMARY

        scan_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.scan_list(line.split())

    def scan_list(self, list_):
        r"""SUMMARY

        scan_list(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        arguments = DispatchArguments()
        arguments.dispatch(list_)
        self.scan_digits(arguments.get_digits())
        self.scan_words(arguments.get_words())

    def scan_digits(self, digits):
        r"""SUMMARY

        scan_digits(digits)

        @Arguments:
        - `digits`:

        @Return:

        @Error:
        """
        if len(digits) not in (0, 1):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        if len(digits):
            self.append_repeat(digits[0])

    def scan_words(self, words):
        r"""SUMMARY

        scan_words(words)

        @Arguments:
        - `words`:

        @Return:

        @Error:
        """
        if len(words) not in (0, 1):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        if len(words):
            self.append_behave(words[0])

    def append_repeat(self, repeat):
        r"""SUMMARY

        append_repeat(repeat)

        @Arguments:
        - `repeat`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.repeat, repeat))

    def append_behave(self, behave):
        r"""SUMMARY

        append_behave(behave)

        @Arguments:
        - `behave`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.behave, behave))

* Wed 28 Jan 2015 01:17:19 AM JST
ScannerAbstract
* Wed 28 Jan 2015 01:17:33 AM JST

* Wed 28 Jan 2015 01:17:34 AM JST
TokenType
* Wed 28 Jan 2015 01:17:35 AM JST
Token, TokenType
* Wed 28 Jan 2015 01:17:35 AM JST
import Token, TokenType
* Wed 28 Jan 2015 01:17:36 AM JST
token import Token, TokenType
* Wed 28 Jan 2015 01:17:40 AM JST
import
* Wed 28 Jan 2015 01:17:41 AM JST
err import
* Wed 28 Jan 2015 01:18:43 AM JST
BEHAVE_ARG = {'down': 'press',
              'up': 'release',
              'd': 'press',
              'u': 'release',
              }

* Wed 28 Jan 2015 01:19:08 AM JST
class ClickScanner(_CMDScanner):
    r"""ClickScanner

    ClickScanner is a _CMDScanner.
    Responsibility:
    """

    def scan_line(self, line):
        r"""SUMMARY

        scan_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.scan_list(line.replace('Click', '').split())

    def scan_list(self, list_):
        r"""SUMMARY

        scan_list(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        arguments = DispatchArguments()
        arguments.dispatch(list_)
        self.scan_words(arguments.get_words())
        self.scan_digits(arguments.get_digits())

    def scan_words(self, words):
        r"""SUMMARY

        scan_words(words)

        @Arguments:
        - `words`:

        @Return:

        @Error:
        """
        if 2 < len(words):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        button = 'left'
        for word in words:
            wrd = word.lower()
            if wrd in BUTTON_ARG:
                button = wrd
            elif wrd in BEHAVE_ARG:
                self.append_behave(BEHAVE_ARG.get(wrd))
            else:
                # TODO: (Atami) [2015/01/27]
                raise err.XSKSyntaxError()
        self.append_button(BUTTON_ARG.get(button))

    def scan_digits(self, digits):
        r"""SUMMARY

        scan_digits(digits)

        @Arguments:
        - `digits`:

        @Return:

        @Error:
        """
        dlen = len(digits)
        if 3 < dlen:
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        if dlen in (2, 3):
            self.append_point(digits[0], digits[1])
        if 1 == dlen:
            self.append_repeat(digits[0])
        if 3 == dlen:
            self.append_repeat(digits[2])

    def append_repeat(self, repeat):
        r"""SUMMARY

        append_repeat(repeat)

        @Arguments:
        - `repeat`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.repeat, repeat))

    def append_behave(self, behave):
        r"""SUMMARY

        append_behave(behave)

        @Arguments:
        - `behave`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.behave, behave))

    def append_button(self, button):
        r"""SUMMARY

        append_button(button)

        @Arguments:
        - `button`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.button, button))

    def append_point(self, x, y):
        r"""SUMMARY

        append_point(x, y)

        @Arguments:
        - `x`:
        - `y`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.point, (x, y)))



* Wed 28 Jan 2015 01:19:52 AM JST
{'left': 'LButton',
              'right': 'RButton',
              'middle': 'MButton',
              'wheelup': 'WheelUp',
              'wheeldown': 'WheelDown',
              'l': 'LButton',
              'r': 'RButton',
              'm': 'MButton',
              'wu': 'WheelUp',
              'wd': 'WheelDown',
              }
* Wed 28 Jan 2015 01:20:06 AM JST
BUTTON_ARG
* Wed 28 Jan 2015 01:20:19 AM JST
BUTTON_ARG
* Wed 28 Jan 2015 01:20:29 AM JST
BUTTON_ARG
* Wed 28 Jan 2015 01:21:15 AM JST
class ClickScanner(_CMDScanner):
    r"""ClickScanner

    ClickScanner is a _CMDScanner.
    Responsibility:
    """

    def scan_line(self, line):
        r"""SUMMARY

        scan_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.scan_list(line.replace('Click', '').split())

    def scan_list(self, list_):
        r"""SUMMARY

        scan_list(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        arguments = DispatchArguments()
        arguments.dispatch(list_)
        self.scan_words(arguments.get_words())
        self.scan_digits(arguments.get_digits())

    def scan_words(self, words):
        r"""SUMMARY

        scan_words(words)

        @Arguments:
        - `words`:

        @Return:

        @Error:
        """
        if 2 < len(words):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        button = 'left'
        for word in words:
            wrd = word.lower()
            if wrd in BUTTON_ARG:
                button = wrd
            elif wrd in BEHAVE_ARG:
                self.append_behave(BEHAVE_ARG.get(wrd))
            else:
                # TODO: (Atami) [2015/01/27]
                raise err.XSKSyntaxError()
        self.append_button(BUTTON_ARG.get(button))

    def scan_digits(self, digits):
        r"""SUMMARY

        scan_digits(digits)

        @Arguments:
        - `digits`:

        @Return:

        @Error:
        """
        dlen = len(digits)
        if 3 < dlen:
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        if dlen in (2, 3):
            self.append_point(digits[0], digits[1])
        if 1 == dlen:
            self.append_repeat(digits[0])
        if 3 == dlen:
            self.append_repeat(digits[2])

    def append_repeat(self, repeat):
        r"""SUMMARY

        append_repeat(repeat)

        @Arguments:
        - `repeat`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.repeat, repeat))

    def append_behave(self, behave):
        r"""SUMMARY

        append_behave(behave)

        @Arguments:
        - `behave`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.behave, behave))

    def append_button(self, button):
        r"""SUMMARY

        append_button(button)

        @Arguments:
        - `button`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.button, button))

    def append_point(self, x, y):
        r"""SUMMARY

        append_point(x, y)

        @Arguments:
        - `x`:
        - `y`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.point, (x, y)))

* Wed 28 Jan 2015 01:22:15 AM JST
class ButtonScanner(ScannerAbstract):
    r"""ButtonScanner

    ButtonScanner is a ScannerAbstract.
    Responsibility:
    """
    buttons = {'lbutton': 'LButton',
               'rbutton': 'RButton',
               'mbutton': 'MButton',
               'wheelup': 'WheelUp',
               'wheeldown': 'WheelDown',
               'lclick': 'LButton',
               'rclick': 'RButton',
               'mclick': 'MButton',
               'wup': 'WheelUp',
               'wdown': 'WheelDown',
               }

    def scan_line(self, line):
        r"""SUMMARY

        scan_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.scan_list(line.split())

    def scan_list(self, list_):
        r"""SUMMARY

        scan_list(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        arguments = DispatchArguments()
        arguments.dispatch(list_)
        self.scan_words(arguments.get_words())
        self.scan_digits(arguments.get_digits())

    def scan_words(self, words):
        r"""SUMMARY

        scan_words(words)

        @Arguments:
        - `words`:

        @Return:

        @Error:
        """
        if 2 < len(words):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        for word in words:
            wrd = word.lower()
            if wrd in self.buttons:
                self.append_button(self.buttons.get(wrd))
            elif wrd in BEHAVE_ARG:
                self.append_behave(BEHAVE_ARG.get(wrd))
            else:
                # TODO: (Atami) [2015/01/27]
                raise err.XSKSyntaxError()

    def scan_digits(self, digits):
        r"""SUMMARY

        scan_digits(digits)

        @Arguments:
        - `digits`:

        @Return:

        @Error:
        """
        dlen = len(digits)
        if 3 < dlen:
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        if dlen in (2, 3):
            self.append_point(digits[0], digits[1])
        if 1 == dlen:
            self.append_repeat(digits[0])
        if 3 == dlen:
            self.append_repeat(digits[2])

    def append_button(self, button):
        r"""SUMMARY

        append_button(button)

        @Arguments:
        - `button`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.button, button))

    def append_behave(self, behave):
        r"""SUMMARY

        append_behave(behave)

        @Arguments:
        - `behave`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.behave, behave))

    def append_repeat(self, repeat):
        r"""SUMMARY

        append_repeat(repeat)

        @Arguments:
        - `repeat`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.repeat, repeat))

    def append_point(self, x, y):
        r"""SUMMARY

        append_point(x, y)

        @Arguments:
        - `x`:
        - `y`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.point, (x, y)))

* Wed 28 Jan 2015 01:22:41 AM JST
ScannerAbstract
* Wed 28 Jan 2015 01:23:38 AM JST
class ArgumentsScanner(ScannerAbstract):
    r"""ArgumentsScanner

    ArgumentsScanner is a object.
    Responsibility:
    """
    def scan_line(self, line):
        r"""SUMMARY

        scan_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.scan_list(line.split())

    def scan_list(self, list_):
        r"""SUMMARY

        scan_list(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        arguments = DispatchArguments()
        arguments.dispatch(list_)
        self.scan_digits(arguments.get_digits())
        self.scan_words(arguments.get_words())

    def scan_digits(self, digits):
        r"""SUMMARY

        scan_digits(digits)

        @Arguments:
        - `digits`:

        @Return:

        @Error:
        """
        dgts = list(digits)
        if 2 <= len(dgts):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError('')
        if 1 == len(dgts):
            self.append_repeat(dgts[0])

    def append_repeat(self, repeat):
        r"""SUMMARY

        append_repeat(repeat)

        @Arguments:
        - `repeat`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.repeat, repeat))

    def scan_words(self, words):
        r"""SUMMARY

        scan_words(words)

        @Arguments:
        - `words`:

        @Return:

        @Error:
        """
        wds = list(words)
        if 2 <= len(wds):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError('')
        if 1 == len(wds):
            self.append_behave(wds[0])

    def append_behave(self, behave):
        r"""SUMMARY

        append_behave(behave)

        @Arguments:
        - `behave`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.behave, behave))

* Wed 28 Jan 2015 01:24:13 AM JST
ScannerAbstract
* Wed 28 Jan 2015 01:25:59 AM JST
class ASCScanner(_KeyCMDScanner):
    r"""ASCScanner

    ASCScanner is a _KeyCMDScanner.
    Responsibility:
    """
    def scan_line(self, line):
        r"""SUMMARY

        scan_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.scan_list(line.replace('ASC', '').split())

    def scan_list(self, list_):
        r"""SUMMARY

        scan_list(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        tokens = deque(list_)
        if len(tokens) <= 0 or 2 < len(tokens):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        self.append_code(tokens.popleft())
        self.scan_args(tokens)

    def append_code(self, code):
        r"""SUMMARY

        append_code(code)

        @Arguments:
        - `code`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.code, code))


class SYMScanner(_KeyCMDScanner):
    r"""SYMScanner

    SYMScanner is a _KeyCMDScanner.
    Responsibility:
    """
    def scan_line(self, line):
        r"""SUMMARY

        scan_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.scan_list(line.replace('SYM', '').split())

    def scan_list(self, list_):
        r"""SUMMARY

        scan_list(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        tokens = deque(list_)
        if len(tokens) <= 0 or 2 < len(tokens):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        self.append_sym(tokens.popleft())
        self.scan_args(tokens)

    def append_sym(self, sym):
        r"""SUMMARY

        append_sym(sym)

        @Arguments:
        - `sym`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.sym, sym))


class UNIScanner(_KeyCMDScanner):
    r"""UNIScanner

    UNIScanner is a _KeyCMDScanner.
    Responsibility:
    """
    def scan_line(self, line):
        r"""SUMMARY

        scan_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.scan_list(line.replace('UNI', '').split())

    def scan_list(self, list_):
        r"""SUMMARY

        scan_list(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        tokens = deque(list_)
        if len(tokens) <= 0 or 2 < len(tokens):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        self.append_unicode(tokens.popleft())
        self.scan_args(tokens)

    def append_unicode(self, unicode_):
        r"""SUMMARY

        append_unicode(unicode_)

        @Arguments:
        - `unicode_`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.unicode, unicode_))


class KeyScanner(_KeyCMDScanner):
    r"""KeyScanner

    KeyScanner is a _KeyCMDScanner.
    Responsibility:
    """
    def scan_line(self, line):
        r"""SUMMARY

        scan_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        self.scan_list(line.split())

    def scan_list(self, list_):
        r"""SUMMARY

        scan_list(list_)

        @Arguments:
        - `list_`:

        @Return:

        @Error:
        """
        tokens = deque(list_)
        if len(tokens) <= 0 or 2 < len(tokens):
            # TODO: (Atami) [2015/01/27]
            raise err.XSKSyntaxError()
        self.append_name(tokens.popleft())
        self.scan_args(tokens)

    def append_name(self, name):
        r"""SUMMARY

        append_name(name)

        @Arguments:
        - `name`:

        @Return:

        @Error:
        """
        self.append(Token(TokenType.name, name))

* Wed 28 Jan 2015 01:27:23 AM JST
ArgumentsScanner(self._tokens).scan_list(tokens)
* Wed 28 Jan 2015 01:28:40 AM JST
class SubScanner(ScannerAbstract):
    r"""SubScanner

    SubScanner is a ScannerAbstract.
    Responsibility:

    Scan in curly brace "{ASC 100}" => Token(type=code, value="100")

    """
    buttons = tuple(ButtonScanner.buttons.keys())

    def scan_line(self, line):
        r"""SUMMARY

        scan_line(line)

        @Arguments:
        - `line`:

        @Return:

        @Error:
        """
        if line.startswith(('ASC')):
            sscanner = ASCScanner()
        elif line.startswith(('SYM')):
            sscanner = SYMScanner()
        elif line.startswith(('UNI')):
            sscanner = UNIScanner()
        elif line.startswith(('Click')):
            sscanner = ClickScanner()
        elif line.lower().startswith(self.buttons):
            sscanner = ButtonScanner()
        else:
            sscanner = KeyScanner()
        sscanner.scan_line(line)
        self.extend(sscanner.get_tokens())

* Wed 28 Jan 2015 01:29:33 AM JST
ScannerAbstract
* Wed 28 Jan 2015 01:29:46 AM JST
self._tokens
* Wed 28 Jan 2015 01:30:22 AM JST
from sendkeys2.parser.scanner import SubScanner
* Wed 28 Jan 2015 01:30:38 AM JST
ss=SubScanner()
* Wed 28 Jan 2015 01:30:51 AM JST
form 
* Wed 28 Jan 2015 01:31:52 AM JST

* Wed 28 Jan 2015 01:31:52 AM JST

* Wed 28 Jan 2015 01:31:52 AM JST
        # self.extend(sscanner.get_tokens())

* Wed 28 Jan 2015 01:33:44 AM JST
_CMDScanner
* Wed 28 Jan 2015 01:34:47 AM JST

* Wed 28 Jan 2015 01:34:47 AM JST

* Wed 28 Jan 2015 01:34:48 AM JST
        # self.scan_args(tokens)

* Wed 28 Jan 2015 01:34:51 AM JST

* Wed 28 Jan 2015 01:34:51 AM JST

* Wed 28 Jan 2015 01:34:51 AM JST
        # self.scan_args(tokens)

* Wed 28 Jan 2015 01:34:53 AM JST

* Wed 28 Jan 2015 01:34:53 AM JST

* Wed 28 Jan 2015 01:34:53 AM JST
        # self.scan_args(tokens)

* Wed 28 Jan 2015 01:34:56 AM JST

* Wed 28 Jan 2015 01:34:56 AM JST

* Wed 28 Jan 2015 01:34:56 AM JST
        # self.scan_args(tokens)

* Wed 28 Jan 2015 01:38:48 AM JST
self.
* Wed 28 Jan 2015 01:52:14 AM JST
lsef.
* Wed 28 Jan 2015 01:53:32 AM JST
sef.
* Wed 28 Jan 2015 01:53:48 AM JST
def
* Wed 28 Jan 2015 01:55:46 AM JST

* Wed 28 Jan 2015 01:55:46 AM JST

* Wed 28 Jan 2015 01:55:47 AM JST
        - `substr`:

* Wed 28 Jan 2015 01:56:28 AM JST
SubScanner
* Wed 28 Jan 2015 01:58:25 AM JST
curlystate
* Wed 28 Jan 2015 01:58:41 AM JST
curlystate
* Wed 28 Jan 2015 02:01:53 AM JST
    def append(self, token):
        r"""SUMMARY

        append(token)

        @Arguments:
        - `token`:

        @Return:

        @Error:
        """
        if not isinstance(token, (Token, )):
            # TODO: (Atami) [2015/01/27]
            raise StandardError()
        self._tokens.append(token)

* Wed 28 Jan 2015 02:02:52 AM JST
self.
* Wed 28 Jan 2015 02:04:20 AM JST
SubScanner
* Wed 28 Jan 2015 02:04:23 AM JST
from sendkeys2.parser.subscanner import Scanner
* Wed 28 Jan 2015 02:04:54 AM JST
'a+bc'
* Wed 28 Jan 2015 02:32:58 AM JST
Scanner
* Wed 28 Jan 2015 02:33:36 AM JST
get_
* Wed 28 Jan 2015 02:34:14 AM JST
_
* Wed 28 Jan 2015 02:34:14 AM JST
self._
* Wed 28 Jan 2015 02:34:15 AM JST
            self._
* Wed 28 Jan 2015 02:34:40 AM JST

* Wed 28 Jan 2015 02:34:40 AM JST

* Wed 28 Jan 2015 02:34:40 AM JST
        self._scanner = Scanner(line)

* Wed 28 Jan 2015 02:34:46 AM JST
self._scanner.get_line()
* Wed 28 Jan 2015 02:35:01 AM JST
self._scanner.set_line(line)
* Wed 28 Jan 2015 02:35:07 AM JST
sef.
* Wed 28 Jan 2015 02:35:18 AM JST
isinsta
* Wed 28 Jan 2015 02:37:09 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('a+bc')
x.send(54525974)

* Wed 28 Jan 2015 02:39:30 AM JST
pieces.XKey(codes[0], codes[1])
* Wed 28 Jan 2015 02:39:40 AM JST
int(val[1]), 0
* Wed 28 Jan 2015 02:39:54 AM JST
token.getvalue()
* Wed 28 Jan 2015 02:40:43 AM JST
xkey = pieces.XKey(codes[0], codes[1])
* Wed 28 Jan 2015 02:40:55 AM JST
int(token.getvalue())
* Wed 28 Jan 2015 02:40:59 AM JST
1]
* Wed 28 Jan 2015 02:40:59 AM JST
codes[1]
* Wed 28 Jan 2015 02:41:01 AM JST

* Wed 28 Jan 2015 02:41:01 AM JST

* Wed 28 Jan 2015 02:41:01 AM JST
            codes = , 0

* Wed 28 Jan 2015 02:41:21 AM JST
XSendKeyExpression
* Wed 28 Jan 2015 02:41:31 AM JST
xkey
* Wed 28 Jan 2015 02:42:48 AM JST
pieces.XKey(codes[0], codes[1])
* Wed 28 Jan 2015 02:43:53 AM JST
                
* Wed 28 Jan 2015 02:44:31 AM JST
SymConverter(token.getvalue()).to_code(self.display)
* Wed 28 Jan 2015 02:44:50 AM JST
                
* Wed 28 Jan 2015 02:45:45 AM JST
                # TODO: (Atami) [2015/01/26]
                # '{}0020'.format('\u').encode().decode('unicode-escape')
                raise NotImplementedError()

* Wed 28 Jan 2015 02:47:18 AM JST
codes = NameConverter(val).to_code(self.display)
* Wed 28 Jan 2015 02:47:21 AM JST
val
* Wed 28 Jan 2015 02:47:23 AM JST
self.
* Wed 28 Jan 2015 02:47:34 AM JST
exp = XSendKeyExpression(pieces.XKey(codes[0], codes[1]))
* Wed 28 Jan 2015 02:48:32 AM JST
codes = CharConverter(val).to_code(self.display)
* Wed 28 Jan 2015 02:48:36 AM JST
val
* Wed 28 Jan 2015 02:48:43 AM JST
exp = XSendKeyExpression(pieces.XKey(codes[0], codes[1]))
* Wed 28 Jan 2015 02:49:15 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('a+bc')

* Wed 28 Jan 2015 02:49:19 AM JST
x.send(54525974)
* Wed 28 Jan 2015 02:49:22 AM JST
x.flush()
* Wed 28 Jan 2015 03:20:06 AM JST
'a'
* Wed 28 Jan 2015 03:20:20 AM JST
d['substr']
* Wed 28 Jan 2015 03:22:25 AM JST
state
* Wed 28 Jan 2015 03:24:35 AM JST

* Wed 28 Jan 2015 03:26:02 AM JST

* Wed 28 Jan 2015 03:26:02 AM JST

* Wed 28 Jan 2015 03:26:02 AM JST
            # curlystate.set_incurly(False)

* Wed 28 Jan 2015 03:26:07 AM JST

* Wed 28 Jan 2015 03:26:07 AM JST

* Wed 28 Jan 2015 03:26:07 AM JST
            # curlystate.set_incurly(True)

* Wed 28 Jan 2015 03:26:24 AM JST
True
* Wed 28 Jan 2015 03:26:47 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('a+bc')

* Wed 28 Jan 2015 03:26:51 AM JST
x.send(54525974)
* Wed 28 Jan 2015 03:26:54 AM JST
x.flush()
* Wed 28 Jan 2015 03:27:00 AM JST
x=XSendkeys('a+bc')
* Wed 28 Jan 2015 03:28:04 AM JST
x.send(54525974)
* Wed 28 Jan 2015 03:28:07 AM JST
x.flush()
* Wed 28 Jan 2015 03:28:24 AM JST

* Wed 28 Jan 2015 03:28:24 AM JST

* Wed 28 Jan 2015 03:28:24 AM JST
        # curlystate = CurlyState()

* Wed 28 Jan 2015 03:29:00 AM JST
curlystate['incurly']
* Wed 28 Jan 2015 03:29:08 AM JST

* Wed 28 Jan 2015 03:29:08 AM JST

* Wed 28 Jan 2015 03:29:08 AM JST
         = False

* Wed 28 Jan 2015 03:40:16 AM JST
expre
* Wed 28 Jan 2015 03:40:47 AM JST
        modifier = None
        for token in self._tokens:
            modifier = self._analyze_token(token, modifier)

* Wed 28 Jan 2015 03:42:25 AM JST
modifier = 
* Wed 28 Jan 2015 03:42:46 AM JST
modifier
* Wed 28 Jan 2015 03:42:54 AM JST
modifier
* Wed 28 Jan 2015 03:45:04 AM JST
        if TokenType.endmarker == token:
            return None
        elif TokenType.code == token:
            exp = XSendKeyExpression(pieces.XKey(int(token.getvalue()), 0))
        elif TokenType.sym == token:
            codes = SymConverter(token.getvalue()).to_code(self.display)
            exp = XSendKeyExpression(pieces.XKey(codes[0], codes[1]))
        elif TokenType.unicode == token:
            # TODO: (Atami) [2015/01/26]
            # '{}0020'.format('\u').encode().decode('unicode-escape')
            raise NotImplementedError()
        elif TokenType.name == token:
            codes = NameConverter(token.getvalue()).to_code(self.display)
            exp = XSendKeyExpression(pieces.XKey(codes[0], codes[1]))
        elif TokenType.char == token:
            codes = CharConverter(token.getvalue()).to_code(self.display)
            exp = XSendKeyExpression(pieces.XKey(codes[0], codes[1]))
        elif TokenType.button == token:
            xbutton = BUTTONS.get(token.getvalue())
            exp = XSendKeyExpression(xbutton)
        elif TokenType.repeat == token:
            exp = RepeatExpression(self._exps.pop(), int(token.getvalue()))
        # nonterminal expression
        elif TokenType.modifier == token:
            modifier = MODIFIERS.get(token.getvalue())
            return modifier
        elif TokenType.behave == token:
            exp = BehaveExpression(self._exps.pop(), token.getvalue())
        elif TokenType.point == token:
            exp = PointExpression(
                    self._exps.pop(), [int(x) for x in token.getvalue()])
        # stack
        if modifier is not None:
            exp = ModifierExpression(exp, modifier)
            modifier = None
        self._exps.append(exp)
        return modifier

* Wed 28 Jan 2015 03:45:27 AM JST
self.
* Wed 28 Jan 2015 03:45:30 AM JST
self.
* Wed 28 Jan 2015 03:45:32 AM JST
self.
* Wed 28 Jan 2015 03:46:12 AM JST
modifier
* Wed 28 Jan 2015 03:46:18 AM JST
modifier
* Wed 28 Jan 2015 03:46:27 AM JST
modifier
* Wed 28 Jan 2015 03:46:44 AM JST
state['modifier']
* Wed 28 Jan 2015 03:46:56 AM JST

* Wed 28 Jan 2015 03:46:56 AM JST

* Wed 28 Jan 2015 03:46:56 AM JST
        return modifier

* Wed 28 Jan 2015 04:01:11 AM JST
None
* Wed 28 Jan 2015 04:01:16 AM JST
None
* Wed 28 Jan 2015 04:07:35 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('a+bc')
x.send(54525974)

* Wed 28 Jan 2015 04:08:13 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('a+bc')

* Wed 28 Jan 2015 04:08:20 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('a+bc')

* Wed 28 Jan 2015 04:08:24 AM JST
x.send(54525974)
* Wed 28 Jan 2015 04:08:26 AM JST
x.flush()
* Wed 28 Jan 2015 04:08:31 AM JST
x=XSendkeys('a+bc')
* Wed 28 Jan 2015 04:08:46 AM JST
In [5]: 
* Wed 28 Jan 2015 04:09:43 AM JST
None
* Wed 28 Jan 2015 04:10:10 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('a+bc')

* Wed 28 Jan 2015 04:10:15 AM JST
x=XSendkeys('a+bc')
* Wed 28 Jan 2015 04:10:27 AM JST
x.send(54525974)
* Wed 28 Jan 2015 04:10:30 AM JST
x.flush()
* Wed 28 Jan 2015 04:10:56 AM JST
x=XSendkeys('a+b!^rc')
* Wed 28 Jan 2015 04:11:05 AM JST
x.send(54525974)
* Wed 28 Jan 2015 04:11:16 AM JST
x=XSendkeys('a+b+^rc')
* Wed 28 Jan 2015 04:20:34 AM JST

* Wed 28 Jan 2015 04:20:34 AM JST

* Wed 28 Jan 2015 04:20:34 AM JST
    behave = None  # ()

* Wed 28 Jan 2015 04:22:22 AM JST
sen
* Wed 28 Jan 2015 04:22:22 AM JST
form sen
* Wed 28 Jan 2015 04:22:51 AM JST
KeyBehave
* Wed 28 Jan 2015 04:22:57 AM JST
down
* Wed 28 Jan 2015 04:24:31 AM JST
token.getvalue()
* Wed 28 Jan 2015 04:27:39 AM JST
self.time, self.root, self.window,
                        self.child, self.rootx, self.rooty, self.eventx,
                        self.eventy, self.state, self.samescreen
* Wed 28 Jan 2015 04:27:54 AM JST
        print((self.time, self.root, self.window,
                        self.child, self.rootx, self.rooty, self.eventx,
                        self.eventy, self.state, self.samescreen))

* Wed 28 Jan 2015 04:28:16 AM JST
x=XSendkeys('a+b{Click}')
* Wed 28 Jan 2015 04:28:25 AM JST
from sendkeys2.xsendkeys import XSendkeys
* Wed 28 Jan 2015 04:28:45 AM JST
x=XSendkeys('a+b{Click}')
* Wed 28 Jan 2015 04:28:50 AM JST
x.send(54525974)
* Wed 28 Jan 2015 04:29:53 AM JST
XSendkeys
* Wed 28 Jan 2015 04:29:54 AM JST
xsendkeys
* Wed 28 Jan 2015 04:31:50 AM JST
int(
* Wed 28 Jan 2015 04:31:56 AM JST
int(
* Wed 28 Jan 2015 04:34:02 AM JST
from wxcb import conn
* Wed 28 Jan 2015 04:34:09 AM JST
from sendevent import KeyPress, KeyRelease, ButtonPress, ButtonRelease
* Wed 28 Jan 2015 04:34:26 AM JST
54525974
* Wed 28 Jan 2015 04:37:00 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('a+bc')
x.send(54525974)

* Wed 28 Jan 2015 04:37:08 AM JST
x.flush()
* Wed 28 Jan 2015 08:23:15 AM JST
self._event.get_buffer()
* Wed 28 Jan 2015 08:26:11 AM JST
from sendkeys2.xsendkeys import XSendkeys
* Wed 28 Jan 2015 08:26:16 AM JST
x=XSendkeys('a+bc')
* Wed 28 Jan 2015 08:26:24 AM JST
x.send(54525974)
* Wed 28 Jan 2015 08:27:17 AM JST

* Wed 28 Jan 2015 08:27:17 AM JST

* Wed 28 Jan 2015 08:27:17 AM JST
        print(self._event.get_buffer())

* Wed 28 Jan 2015 08:29:54 AM JST
from sendkeys2.xsendkeys import XSendkeys
* Wed 28 Jan 2015 08:29:58 AM JST
x=XSendkeys('a+bc')
* Wed 28 Jan 2015 08:30:06 AM JST
x.send(54525974)
* Wed 28 Jan 2015 08:30:09 AM JST
x.flush()
* Wed 28 Jan 2015 08:30:44 AM JST
54525974
* Wed 28 Jan 2015 08:32:31 AM JST
_behave
* Wed 28 Jan 2015 08:32:42 AM JST
get_window()
* Wed 28 Jan 2015 08:33:24 AM JST
x=XSendkeys('{Click 100 100}')
* Wed 28 Jan 2015 08:33:38 AM JST
x.send(54525974)
* Wed 28 Jan 2015 08:33:55 AM JST
54525974
* Wed 28 Jan 2015 08:35:04 AM JST
54525974
* Wed 28 Jan 2015 08:36:27 AM JST
~/.pylib/sendkeys2/obj/
* Wed 28 Jan 2015 08:38:57 AM JST
'{LClick 75 130}'
* Wed 28 Jan 2015 08:39:38 AM JST
tokens.
* Wed 28 Jan 2015 08:42:22 AM JST
c.core.SendEvent.ButtonPress(0,54525974,1,0,0,482,54525974,0,100,100,100,100,0,1)
* Wed 28 Jan 2015 08:44:39 AM JST
NamedButtonMask.Left
* Wed 28 Jan 2015 08:51:25 AM JST
c.core.SendEvent.ButtonRelease(0,54525974,3,0,0,482,54525974,0,0,0,75,130,,1)
* Wed 28 Jan 2015 08:52:31 AM JST
sendkeys.SendKeys('{LClick 75 130}')
* Wed 28 Jan 2015 08:52:41 AM JST
54525974
* Wed 28 Jan 2015 08:54:25 AM JST
54525974
* Wed 28 Jan 2015 08:56:11 AM JST
title
* Wed 28 Jan 2015 08:56:14 AM JST
67109080
* Wed 28 Jan 2015 08:56:21 AM JST
dia=67109080
* Wed 28 Jan 2015 08:56:34 AM JST
sendkeys.SendKeys('{LClick 1000 1000}').sendkeys()
* Wed 28 Jan 2015 08:58:27 AM JST
{LClick 20 100}
* Wed 28 Jan 2015 09:02:54 AM JST
x=XSendkeys('{Click right 1000 1000}')
* Wed 28 Jan 2015 09:03:23 AM JST
x.send(54525974)
* Wed 28 Jan 2015 09:03:25 AM JST
54525974
* Wed 28 Jan 2015 09:03:30 AM JST
x.flush()
* Wed 28 Jan 2015 09:03:48 AM JST
{LButton 20 100}
* Wed 28 Jan 2015 09:06:10 AM JST
sleep(5);x.send(dia
* Wed 28 Jan 2015 09:06:16 AM JST
54525974
* Wed 28 Jan 2015 09:28:26 AM JST
None
* Wed 28 Jan 2015 09:28:27 AM JST
riase
* Wed 28 Jan 2015 09:28:36 AM JST
return 
* Wed 28 Jan 2015 09:32:13 AM JST
BUTTONS.get(token.getvalue())
* Wed 28 Jan 2015 09:32:16 AM JST

* Wed 28 Jan 2015 09:32:17 AM JST

* Wed 28 Jan 2015 09:32:17 AM JST
            xbutton = 

* Wed 28 Jan 2015 09:35:07 AM JST
from Xlib import X
from Xlib import XK
from Xlib.ext import xtest

* Wed 28 Jan 2015 09:35:53 AM JST
xtest.fake_input(X.But)
* Wed 28 Jan 2015 09:36:33 AM JST
(X.ButtonPress, 1)
* Wed 28 Jan 2015 09:42:43 AM JST

* Wed 28 Jan 2015 09:42:43 AM JST
TokenType
* Wed 28 Jan 2015 09:42:43 AM JST
import TokenType
* Wed 28 Jan 2015 09:42:44 AM JST
token import TokenType
* Wed 28 Jan 2015 09:43:02 AM JST
from sendkeys2.converter import (
    CharConverter, NameConverter, CodeConverter, SymConverter)

* Wed 28 Jan 2015 09:43:06 AM JST
from sendkeys2.converter import (
    CharConverter, NameConverter, CodeConverter, SymConverter)

* Wed 28 Jan 2015 09:43:18 AM JST
import
* Wed 28 Jan 2015 10:32:33 AM JST
display
* Wed 28 Jan 2015 10:32:38 AM JST
https://www.youtube.com/watch?v=Ay7XVF7PvBk&feature=youtu.be
* Wed 28 Jan 2015 10:32:59 AM JST
state.get('display', None)
* Wed 28 Jan 2015 10:37:03 AM JST
Expression
* Wed 28 Jan 2015 10:41:15 AM JST
self.
* Wed 28 Jan 2015 10:42:16 AM JST
None
* Wed 28 Jan 2015 11:04:35 AM JST
from sendkeys2.xsendkeys import XSendkeys
x=XSendkeys('a+bc')

* Wed 28 Jan 2015 11:05:15 AM JST

* Wed 28 Jan 2015 11:05:15 AM JST

* Wed 28 Jan 2015 11:05:15 AM JST
from wxcb.xobj.display import Display

* Wed 28 Jan 2015 11:05:30 AM JST

* Wed 28 Jan 2015 11:05:31 AM JST
TokenType
* Wed 28 Jan 2015 11:05:31 AM JST
import TokenType
* Wed 28 Jan 2015 11:05:32 AM JST
token import TokenType
* Wed 28 Jan 2015 11:05:37 AM JST

* Wed 28 Jan 2015 11:05:37 AM JST

* Wed 28 Jan 2015 11:05:37 AM JST
import sendkeys2.parser.err as err

* Wed 28 Jan 2015 11:05:48 AM JST
err.
* Wed 28 Jan 2015 11:05:59 AM JST
x.send(54525974)
* Wed 28 Jan 2015 11:06:01 AM JST
x.flush()
* Wed 28 Jan 2015 11:07:24 AM JST

* Wed 28 Jan 2015 11:07:24 AM JST

* Wed 28 Jan 2015 11:07:24 AM JST
        # return Analyze(scanner.get_tokens(), self.display).get_expressions()

* Wed 28 Jan 2015 11:12:43 AM JST
analyzer.analyze_tokens(scanner.get_tokens(), self.display)
* Wed 28 Jan 2015 11:12:50 AM JST
self.
* Wed 28 Jan 2015 11:13:49 AM JST
send
* Wed 28 Jan 2015 11:37:42 AM JST
_line, 
* Wed 28 Jan 2015 11:37:43 AM JST
self._line, 
* Wed 28 Jan 2015 11:39:07 AM JST
XIntervalSender(
            self._parser.parse().interpret(), interval)
* Wed 28 Jan 2015 11:39:13 AM JST
parser.get_sendkeys()
* Wed 28 Jan 2015 11:39:18 AM JST
            
* Wed 28 Jan 2015 11:56:22 AM JST
from sendkeys2.xsendkeys import _XSendkeys
* Wed 28 Jan 2015 11:59:34 AM JST
x.send(54525974)
* Wed 28 Jan 2015 12:08:47 PM JST
from sendkeys2.xsendkeys import _XSendkeys
* Wed 28 Jan 2015 12:08:50 PM JST
_XSendkeys
* Wed 28 Jan 2015 12:09:01 PM JST
x=XSendkeys('a+bc')
* Wed 28 Jan 2015 12:09:23 PM JST
54525974
* Wed 28 Jan 2015 12:09:42 PM JST
aBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBc
* Wed 28 Jan 2015 12:10:03 PM JST
aBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBcaBc
* Wed 28 Jan 2015 12:22:23 PM JST
x.send(54525974)
* Wed 28 Jan 2015 03:06:21 PM JST
Parse2
* Wed 28 Jan 2015 03:07:25 PM JST
sendkeys2
* Wed 28 Jan 2015 03:09:04 PM JST
sendkeys2
* Wed 28 Jan 2015 03:09:08 PM JST
from xsendkeys.xsendkeys import XSendkeys
* Wed 28 Jan 2015 03:10:10 PM JST
xsendkeys
* Wed 28 Jan 2015 03:10:41 PM JST
from xsendkeys import XSendkeys
* Wed 28 Jan 2015 03:10:57 PM JST
Parse2
* Wed 28 Jan 2015 03:11:26 PM JST
54525974
* Wed 28 Jan 2015 03:12:44 PM JST
form 
* Wed 28 Jan 2015 03:13:10 PM JST
Display
* Wed 28 Jan 2015 03:13:58 PM JST
from xsendkeys import XSendkeys
x=XSendkeys('a+bc')

* Wed 28 Jan 2015 03:14:07 PM JST
from xsendkeys import XSendkeys
x=XSendkeys('a+bc')

* Wed 28 Jan 2015 03:14:11 PM JST
x.send(54525974)
* Wed 28 Jan 2015 03:14:14 PM JST
x.flush()
* Wed 28 Jan 2015 03:16:53 PM JST
self.
* Wed 28 Jan 2015 03:16:55 PM JST
window
* Wed 28 Jan 2015 03:17:16 PM JST
xahk2
* Wed 28 Jan 2015 03:17:42 PM JST

* Wed 28 Jan 2015 03:17:42 PM JST

* Wed 28 Jan 2015 03:17:42 PM JST
        self._display = display

* Wed 28 Jan 2015 03:18:23 PM JST

* Wed 28 Jan 2015 03:18:23 PM JST
Window
* Wed 28 Jan 2015 03:18:24 PM JST
import Window
* Wed 28 Jan 2015 03:18:24 PM JST
window import Window
* Wed 28 Jan 2015 03:18:37 PM JST

* Wed 28 Jan 2015 03:18:37 PM JST

* Wed 28 Jan 2015 03:18:37 PM JST
        self._x = x

* Wed 28 Jan 2015 03:18:37 PM JST
        self._x = x

* Wed 28 Jan 2015 03:18:37 PM JST
        self._x = x
        self._y = y

* Wed 28 Jan 2015 03:19:26 PM JST
from wxcb.xobj.window import Window
* Wed 28 Jan 2015 03:22:30 PM JST
str(display or _os.environ.get('DISPLAY', ''))
* Wed 28 Jan 2015 03:22:47 PM JST
lsef.
* Wed 28 Jan 2015 03:27:11 PM JST
_point
* Wed 28 Jan 2015 03:28:45 PM JST
property
* Wed 28 Jan 2015 03:29:00 PM JST

* Wed 28 Jan 2015 03:29:00 PM JST

* Wed 28 Jan 2015 03:29:01 PM JST
        property()

* Wed 28 Jan 2015 03:30:41 PM JST
# condition: (and (not (py:at-string|comment-p)) (not (equal (this-command-keys-vector) [32])))
# 32 = ` '
* Wed 28 Jan 2015 03:33:06 PM JST

* Wed 28 Jan 2015 03:33:06 PM JST

* Wed 28 Jan 2015 03:33:06 PM JST
enumerate

* Wed 28 Jan 2015 03:33:37 PM JST
format(value)
* Wed 28 Jan 2015 03:33:49 PM JST
fget
* Wed 28 Jan 2015 03:35:49 PM JST
property(fget, fset)
* Wed 28 Jan 2015 03:37:28 PM JST
${30:, ${40:${50:fset}}}
* Wed 28 Jan 2015 03:38:04 PM JST
${60:, ${70:${80:fdel}}}
* Wed 28 Jan 2015 03:38:56 PM JST
doc
* Wed 28 Jan 2015 03:39:35 PM JST
${90:, ${100:${110:"${120:doc}"}}}
* Wed 28 Jan 2015 03:39:41 PM JST

* Wed 28 Jan 2015 03:39:41 PM JST

* Wed 28 Jan 2015 03:39:42 PM JST
${90:, ${100:${110:"${120:doc}"}}}
* Wed 28 Jan 2015 03:40:09 PM JST

* Wed 28 Jan 2015 03:40:09 PM JST

* Wed 28 Jan 2015 03:40:09 PM JST
property(fget, fset, fdel, "hello")

* Wed 28 Jan 2015 03:40:49 PM JST
SEQUENCE
* Wed 28 Jan 2015 03:41:39 PM JST

* Wed 28 Jan 2015 03:41:39 PM JST

* Wed 28 Jan 2015 03:41:39 PM JST
enumerate(hello, start=1)

* Wed 28 Jan 2015 03:43:26 PM JST
from wxcb.xobj.window import Window
from wxcb.xobj.point import Point


class Destination(object):
    r"""Destination

    Destination is a object.
    Responsibility:
    """
    def __init__(self, window, x, y, display=None):
        r"""

        @Arguments:
        - `window`:
        - `x`:
        - `y`:
        - `display`:
        """
        self._window = Window(window, display)
        self._point = Point(x, y)

    def get_window(self, ):
        r"""SUMMARY

        get_window()

        @Return:

        @Error:
        """
        return self._window

    def set_window(self, window):
        r"""SUMMARY

        set_window(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        self._window.set_id(window)

    window = property(get_window, set_window)

    def get_display(self, ):
        r"""SUMMARY

        get_display()

        @Return:

        @Error:
        """
        return self.window.get_display()

    def set_display(self, display):
        r"""SUMMARY

        set_display(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        self.window.set_display(display)

    display = property(get_display, set_display)

    def get_point(self, ):
        r"""SUMMARY

        get_point()

        @Return:

        @Error:
        """
        return self._point

    def set_point(self, point):
        r"""SUMMARY

        set_point(point)

        @Arguments:
        - `point`:

        @Return:

        @Error:
        """
        self._point.set(point)

    point = property(get_point, set_point)

    def get_x(self, ):
        r"""SUMMARY

        get_x()

        @Return:

        @Error:
        """
        return self.point.get_x()

    def set_x(self, newx):
        r"""SUMMARY

        set_x(newx)

        @Arguments:
        - `newx`:

        @Return:

        @Error:
        """
        self.point.set_x(newx)

    x = property(get_x, set_x)

    def get_y(self, ):
        r"""SUMMARY

        get_y()

        @Return:

        @Error:
        """
        return self.point.get_y()

    def set_y(self, newy):
        r"""SUMMARY

        set_y(newy)

        @Arguments:
        - `newy`:

        @Return:

        @Error:
        """
        self.point.set_y(newy)
    y = property(get_y, set_y)

* Wed 28 Jan 2015 03:45:50 PM JST
InputDestination
* Wed 28 Jan 2015 03:50:37 PM JST
from xsendkeys import XSendkeys
x=XSendkeys('a+bc')

* Wed 28 Jan 2015 03:50:40 PM JST
x.send(54525974)
* Wed 28 Jan 2015 03:50:43 PM JST
x.flush()
* Wed 28 Jan 2015 03:51:09 PM JST
from xsendkeys import XSendkeys
x=XSendkeys('a+bc')

* Wed 28 Jan 2015 03:51:12 PM JST
x.send(54525974)
* Wed 28 Jan 2015 03:51:16 PM JST
x.flush()
* Wed 28 Jan 2015 04:01:29 PM JST
form 
* Wed 28 Jan 2015 04:03:42 PM JST

* Wed 28 Jan 2015 04:03:42 PM JST

* Wed 28 Jan 2015 04:03:42 PM JST
        self._window = window

* Wed 28 Jan 2015 04:03:54 PM JST
_
* Wed 28 Jan 2015 04:03:54 PM JST
self._
* Wed 28 Jan 2015 04:05:57 PM JST

* Wed 28 Jan 2015 04:05:57 PM JST

* Wed 28 Jan 2015 04:05:57 PM JST
        self._code = code

* Wed 28 Jan 2015 04:05:57 PM JST
        self._code = code

* Wed 28 Jan 2015 04:05:57 PM JST
        self._code = code
        self._modifier = modifier

* Wed 28 Jan 2015 04:05:58 PM JST
        self._code = code
        self._modifier = modifier

* Wed 28 Jan 2015 04:05:58 PM JST
        self._code = code
        self._modifier = modifier
        self._display = display

* Wed 28 Jan 2015 04:06:31 PM JST
_window
* Wed 28 Jan 2015 04:07:18 PM JST
self.
* Wed 28 Jan 2015 04:08:58 PM JST
proeprty(
* Wed 28 Jan 2015 04:10:48 PM JST
proeprty(
* Wed 28 Jan 2015 04:13:54 PM JST
from sendevent import KeyPress, KeyRelease, ButtonPress, ButtonRelease
* Wed 28 Jan 2015 04:15:55 PM JST
            
* Wed 28 Jan 2015 04:18:03 PM JST
                        
* Wed 28 Jan 2015 04:18:07 PM JST
                        
* Wed 28 Jan 2015 04:21:22 PM JST
window
* Wed 28 Jan 2015 04:21:43 PM JST
                   
* Wed 28 Jan 2015 04:22:10 PM JST
                        
* Wed 28 Jan 2015 04:22:30 PM JST
self.
* Wed 28 Jan 2015 04:23:09 PM JST
self.propagate, self.destination, self.code,
                        self.sequence_number, self.time, self.root.window,
                        self.window, self.child, self.root.get_x(),
                        self.root.get_y(), self.x, self.y, self.modifier,
                        self.samescreen, display=self.display
* Wed 28 Jan 2015 04:24:08 PM JST
SendEventKey
* Wed 28 Jan 2015 04:24:50 PM JST
54525974
* Wed 28 Jan 2015 04:28:31 PM JST
event
* Wed 28 Jan 2015 04:30:40 PM JST
                        
* Wed 28 Jan 2015 04:30:50 PM JST
                          
* Wed 28 Jan 2015 04:31:14 PM JST
get_
* Wed 28 Jan 2015 04:31:18 PM JST
get_
* Wed 28 Jan 2015 04:31:25 PM JST
                        
* Wed 28 Jan 2015 04:31:28 PM JST
                        
* Wed 28 Jan 2015 04:31:35 PM JST
get_
* Wed 28 Jan 2015 04:31:40 PM JST
get_
* Wed 28 Jan 2015 04:31:42 PM JST
                          
* Wed 28 Jan 2015 04:31:45 PM JST
                          
* Wed 28 Jan 2015 04:32:02 PM JST
self.modifier
* Wed 28 Jan 2015 04:32:35 PM JST
s=SendEventKey(54525974,38)
* Wed 28 Jan 2015 04:33:27 PM JST
modifier
* Wed 28 Jan 2015 04:35:17 PM JST
s=SendEventKey(54525974,38)

* Wed 28 Jan 2015 04:35:30 PM JST
press
* Wed 28 Jan 2015 04:36:36 PM JST
s=SendEventKey(54525974,38)

* Wed 28 Jan 2015 04:36:46 PM JST
press
* Wed 28 Jan 2015 05:12:23 PM JST

* Wed 28 Jan 2015 05:12:23 PM JST

* Wed 28 Jan 2015 05:12:23 PM JST
        print(self.modifier)

* Thu 29 Jan 2015 02:16:36 AM JST
from sendevent import KeyPress, KeyRelease, ButtonPress, ButtonRelease

from xsendkeys.obj.destination import Destination
from xsendkeys.obj.pieces import XKey

* Thu 29 Jan 2015 02:16:50 AM JST
class SendEventKey(object):
    r"""SendEventKey

    SendEventKey is a object.
    Responsibility:
    """
    propagate = 0
    sequence_number = 0
    time = 0
    root = Destination(0, 0, 0)
    child = 0
    samescreen = 0

    def __init__(self, window, code, x=0, y=0, modifier=0, display=None):
        r"""

        @Arguments:
        - `window`:
        - `code`:
        - `x`:
        - `y`:
        - `modifier`:
        - `display`:
        """
        self._dest = Destination(window, x, y, display)
        self._piece = XKey(code, modifier)

    @property
    def destination(self, ):
        r"""SUMMARY

        destination()

        @Return:

        @Error:
        """
        return self.window

    @property
    def rootx(self, ):
        r"""SUMMARY

        rootx()

        @Return:

        @Error:
        """
        return self.root.get_x()

    @property
    def rooty(self, ):
        r"""SUMMARY

        rooty()

        @Return:

        @Error:
        """
        return self.root.get_y()

    def get_window(self, ):
        r"""SUMMARY

        get_window()

        @Return:

        @Error:
        """
        return self._dest.get_window()

    def set_window(self, window):
        r"""SUMMARY

        set_window(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        self._dest.set_window(window)

    window = property(get_window, set_window)

    def get_display(self, ):
        r"""SUMMARY

        get_display()

        @Return:

        @Error:
        """
        return self._dest.get_display()

    def set_display(self, display):
        r"""SUMMARY

        set_display(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        self._dest.set_display(display)

    display = property(get_display, set_display)

    def get_eventx(self, ):
        r"""SUMMARY

        get_x()

        @Return:

        @Error:
        """
        return self._dest.get_x()

    def set_eventx(self, newx):
        r"""SUMMARY

        set_x(newx)

        @Arguments:
        - `newx`:

        @Return:

        @Error:
        """
        self._dest.set_x(newx)

    eventx = property(get_eventx, set_eventx)

    def get_eventy(self, ):
        r"""SUMMARY

        get_y()

        @Return:

        @Error:
        """
        return self._dest.get_y()

    def set_eventy(self, newy):
        r"""SUMMARY

        set_y(newy)

        @Arguments:
        - `newy`:

        @Return:

        @Error:
        """
        self._dest.set_y(newy)

    eventy = property(get_eventy, set_eventy)

    def get_code(self, ):
        r"""SUMMARY

        get_code()

        @Return:

        @Error:
        """
        return self._piece.get_code()

    def set_code(self, code):
        r"""SUMMARY

        set_code(code)

        @Arguments:
        - `code`:

        @Return:

        @Error:
        """
        self._piece.set_code(code)

    code = property(get_code, set_code)

    def get_modifier(self, ):
        r"""SUMMARY

        get_modifier()

        @Return:

        @Error:
        """
        return self._piece.get_modifiers()

    def set_modifier(self, modifiers):
        r"""SUMMARY

        set_modifier(modifiers)

        @Arguments:
        - `modifier`:

        @Return:

        @Error:
        """
        self._piece.set_modifiers(modifiers)

    modifier = property(get_modifier, set_modifier)

    def press(self, ):
        r"""SUMMARY

        press()

        @Return:

        @Error:
        """
        return KeyPress(self.propagate, self.destination, self.code,
                        self.sequence_number, self.time, self.root.window,
                        self.window, self.child, self.rootx, self.rooty,
                        self.eventx, self.eventy, self.modifier,
                        self.samescreen, display=self.display).send()

    def release(self, ):
        r"""SUMMARY

        release()

        @Return:

        @Error:
        """
        return KeyRelease(self.propagate, self.destination, self.code,
                          self.sequence_number, self.time, self.root.window,
                          self.window, self.child, self.rootx, self.rooty,
                          self.eventx, self.eventy, self.modifier,
                          self.samescreen, display=self.display).send()

* Thu 29 Jan 2015 02:17:36 AM JST

* Thu 29 Jan 2015 02:17:36 AM JST

* Thu 29 Jan 2015 02:17:36 AM JST
        self._piece = XKey(code, modifier)

* Thu 29 Jan 2015 02:17:54 AM JST
code, 
* Thu 29 Jan 2015 02:17:59 AM JST
0,
* Thu 29 Jan 2015 02:17:59 AM JST
modifier=0,
* Thu 29 Jan 2015 02:18:33 AM JST
    def get_code(self, ):
        r"""SUMMARY

        get_code()

        @Return:

        @Error:
        """
        return self._piece.get_code()

    def set_code(self, code):
        r"""SUMMARY

        set_code(code)

        @Arguments:
        - `code`:

        @Return:

        @Error:
        """
        self._piece.set_code(code)

    code = property(get_code, set_code)

    def get_modifier(self, ):
        r"""SUMMARY

        get_modifier()

        @Return:

        @Error:
        """
        return self._piece.get_modifiers()

    def set_modifier(self, modifiers):
        r"""SUMMARY

        set_modifier(modifiers)

        @Arguments:
        - `modifier`:

        @Return:

        @Error:
        """
        self._piece.set_modifiers(modifiers)

    modifier = property(get_modifier, set_modifier)

    def press(self, ):
        r"""SUMMARY

        press()

        @Return:

        @Error:
        """
        return KeyPress(self.propagate, self.destination, self.code,
                        self.sequence_number, self.time, self.root.window,
                        self.window, self.child, self.rootx, self.rooty,
                        self.eventx, self.eventy, self.modifier,
                        self.samescreen, display=self.display).send()

    def release(self, ):
        r"""SUMMARY

        release()

        @Return:

        @Error:
        """
        return KeyRelease(self.propagate, self.destination, self.code,
                          self.sequence_number, self.time, self.root.window,
                          self.window, self.child, self.rootx, self.rooty,
                          self.eventx, self.eventy, self.modifier,
                          self.samescreen, display=self.display).send()

* Thu 29 Jan 2015 02:22:38 AM JST

* Thu 29 Jan 2015 02:22:38 AM JST

* Thu 29 Jan 2015 02:22:38 AM JST
        self._window = window

* Thu 29 Jan 2015 02:24:44 AM JST
    def __init__(self, window, code, modifier=0, x=0, y=0, display=None):
        r"""

        @Arguments:
        - `window`:
        - `code`:
        - `modifier`:
        - `x`:
        - `y`:
        - `display`:
        """
        SendEventAbstract.__init__(self, window, x, y, display)
        self._piece = XKey(code, modifier)

* Thu 29 Jan 2015 02:25:20 AM JST
    def get_code(self, ):
        r"""SUMMARY

        get_code()

        @Return:

        @Error:
        """
        return self._piece.get_code()

    def set_code(self, code):
        r"""SUMMARY

        set_code(code)

        @Arguments:
        - `code`:

        @Return:

        @Error:
        """
        self._piece.set_code(code)

    code = property(get_code, set_code)

    def get_modifier(self, ):
        r"""SUMMARY

        get_modifier()

        @Return:

        @Error:
        """
        return self._piece.get_modifiers()

    def set_modifier(self, modifiers):
        r"""SUMMARY

        set_modifier(modifiers)

        @Arguments:
        - `modifier`:

        @Return:

        @Error:
        """
        self._piece.set_modifiers(modifiers)

    modifier = property(get_modifier, set_modifier)

    def press(self, ):
        r"""SUMMARY

        press()

        @Return:

        @Error:
        """
        return KeyPress(self.propagate, self.destination, self.code,
                        self.sequence_number, self.time, self.root.window,
                        self.window, self.child, self.rootx, self.rooty,
                        self.eventx, self.eventy, self.modifier,
                        self.samescreen, display=self.display).send()

    def release(self, ):
        r"""SUMMARY

        release()

        @Return:

        @Error:
        """
        return KeyRelease(self.propagate, self.destination, self.code,
                          self.sequence_number, self.time, self.root.window,
                          self.window, self.child, self.rootx, self.rooty,
                          self.eventx, self.eventy, self.modifier,
                          self.samescreen, display=self.display).send()


* Thu 29 Jan 2015 02:25:27 AM JST
Key
* Thu 29 Jan 2015 02:25:32 AM JST
Key
* Thu 29 Jan 2015 02:27:26 AM JST
from xsendkeys.obj.modifiers import Modifiers
* Thu 29 Jan 2015 02:27:39 AM JST
from wxcb.xobj.buttoncode import Buttoncode
from wxcb.xobj.keycode import Keycode

* Thu 29 Jan 2015 02:28:02 AM JST
modifier
* Thu 29 Jan 2015 02:28:27 AM JST
    def set_modifiers(self, mod):
        """function set_modifiers

        mod: int

        returns None
        """
        self._modifiers.set(mod)

    def get_modifiers(self):
        """function get_modifiers

        returns Modifiers
        """
        return self._modifiers

    def add_modifiers(self, mod):
        r"""SUMMARY

        add_modifiers(mod)

        @Arguments:
        - `mod`:

        @Return:

        @Error:
        """
        self._modifiers.add(mod)

    def remove_modifiers(self, mod):
        r"""SUMMARY

        remove_modifiers(mod)

        @Arguments:
        - `mod`:

        @Return:

        @Error:
        """
        self._modifiers.remove(mod)

    def clear_modifiers(self, ):
        r"""SUMMARY

        clear_modifiers()

        @Return:

        @Error:
        """
        self._modifiers.clear()

    def isflaged(self, mod):
        r"""SUMMARY

        isflaged(mod)

        @Arguments:
        - `mod`:

        @Return:

        @Error:
        """
        return self._modifiers.isflaged(mod)

* Thu 29 Jan 2015 02:30:04 AM JST
self._modifier = modifier
* Thu 29 Jan 2015 02:30:22 AM JST
code
* Thu 29 Jan 2015 02:30:43 AM JST
    def set_code(self, code):
        r"""SUMMARY

        set_code(code)

        @Arguments:
        - `code`:

        @Return:

        @Error:
        """
        self._code.set(code)

    def get_code(self, ):
        r"""SUMMARY

        get_code()

        @Return:

        @Error:
        """
        return self._code


* Thu 29 Jan 2015 02:31:09 AM JST
    def __eq__(self, other):
        if isinstance(other, (self.__class__, )):
            return (self._code == other.get_code() and
                    self._modifiers == other.get_modifiers())
        elif isinstance(other, (tuple, list)):
            return (self._code == other[0] and self._modifiers == other[1])
        return False

    def __ne__(self, other):
        return not self == other

    def __repr__(self):
        return '{0.__class__.__name__}(code={1}, modifiers="{2}")'.format(
            self, int(self._code), self._modifiers)

    def __str__(self):
        return '({}, {})'.format(int(self._code), int(self._modifiers))

    def __and__(self, other):
        if isinstance(other, (self.__class__, )):
            return self.__class__(
                self._code, self._modifiers & other.get_modifiers())
        return self.__class__(self._code, self._modifiers & other)

    def __iand__(self, other):
        if isinstance(other, (self.__class__, )):
            self.set_modifiers(self._modifiers & other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers & other)
        return self

    def __xor__(self, other):
        if isinstance(other, (self.__class__, )):
            return self.__class__(
                self._code, self._modifiers ^ other.get_modifiers())
        return self.__class__(self._code, self._modifiers ^ other)

    def __ixor__(self, other):
        if isinstance(other, (self.__class__, )):
            self.set_modifiers(self._modifiers ^ other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers ^ other)
        return self

    def __or__(self, other):
        if isinstance(other, (self.__class__, )):
            return self.__class__(
                self._code, self._modifiers | other.get_modifiers())
        return self.__class__(self._code, self._modifiers | other)

    def __ior__(self, other):
        if isinstance(other, (self.__class__, )):
            self.set_modifiers(self._modifiers | other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers | other)
        return self

    def __lshift__(self, other):
        return self.__class__(self._code, self._modifiers << other)

    def __ilshift__(self, other):
        self.set_modifiers(self._modifiers << other)
        return self

    def __rshift__(self, other):
        return self.__class__(self._code, self._modifiers >> other)

    def __irshift__(self, other):
        self.set_modifiers(self._modifiers >> other)
        return self

* Thu 29 Jan 2015 02:33:09 AM JST
    def __iand__(self, other):
        if isinstance(other, (self.__class__, )):
            self.set_modifier(self._modifier & other.get_modifier())
        else:
            self.set_modifier(self._modifier & other)
        return self


* Thu 29 Jan 2015 02:33:24 AM JST
    def __ixor__(self, other):
        if isinstance(other, (self.__class__, )):
            self.set_modifier(self._modifier ^ other.get_modifier())
        else:
            self.set_modifier(self._modifier ^ other)
        return self


* Thu 29 Jan 2015 02:33:35 AM JST
    def __ior__(self, other):
        if isinstance(other, (self.__class__, )):
            self.set_modifier(self._modifier | other.get_modifier())
        else:
            self.set_modifier(self._modifier | other)
        return self


* Thu 29 Jan 2015 02:34:05 AM JST
    def __ilshift__(self, other):
        self.set_modifier(self._modifier << other)
        return self


* Thu 29 Jan 2015 02:34:15 AM JST

    def __irshift__(self, other):
        self.set_modifier(self._modifier >> other)
        return self

* Thu 29 Jan 2015 02:37:36 AM JST
    def __init__(self, code, modifiers=0):
        r"""

        @Arguments:
        - `code`:
        - `modifiers`:
        """
        super(XButton, self).__init__(modifiers)
        self._code = Buttoncode(code)

* Thu 29 Jan 2015 02:38:14 AM JST
    def set_code(self, code):
        r"""SUMMARY

        set_code(code)

        @Arguments:
        - `code`:

        @Return:

        @Error:
        """
        self._code.set(code)

    def get_code(self, ):
        r"""SUMMARY

        get_code()

        @Return:

        @Error:
        """
        return self._code


* Thu 29 Jan 2015 02:39:00 AM JST

    def get_code(self, ):
        r"""SUMMARY

        get_code()

        @Return:

        @Error:
        """
        return self._code

* Thu 29 Jan 2015 02:39:12 AM JST
    def get_code(self, ):
        r"""SUMMARY

        get_code()

        @Return:

        @Error:
        """
        return self._code


* Thu 29 Jan 2015 02:39:35 AM JST
    def __eq__(self, other):
        if isinstance(other, (self.__class__, )):
            return (self._code == other.get_code() and
                    self._modifiers == other.get_modifiers())
        elif isinstance(other, (tuple, list)):
            return (self._code == other[0] and self._modifiers == other[1])
        return False

    def __ne__(self, other):
        return not self == other

    def __repr__(self):
        return '{0.__class__.__name__}(code={1}, modifiers={2})'.format(
            self, int(self._code), int(self._modifiers))

    def __str__(self):
        return '({}, {})'.format(int(self._code), int(self._modifiers))

    def __and__(self, other):
        if isinstance(other, (self.__class__, )):
            mod = self._modifiers & other.get_modifiers()
            return self.__class__(self._code, mod)
        return self.__class__(self._code, self._modifiers & other)

    def __iand__(self, other):
        if isinstance(other, (self.__class__, )):
            self.set_modifiers(self._modifiers & other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers & other)
        return self

    def __xor__(self, other):
        if isinstance(other, (self.__class__, )):
            return self.__class__(
                self._code, self._modifiers ^ other.get_modifiers())
        return self.__class__(self._code, self._modifiers ^ other)

    def __ixor__(self, other):
        if isinstance(other, (self.__class__, )):
            self.set_modifiers(self._modifiers ^ other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers ^ other)
        return self

    def __or__(self, other):
        if isinstance(other, (self.__class__, )):
            return self.__class__(
                self._code, self._modifiers | other.get_modifiers())
        return self.__class__(self._code, self._modifiers | other)

    def __ior__(self, other):
        if isinstance(other, (self.__class__, )):
            self.set_modifiers(self._modifiers | other.get_modifiers())
        else:
            self.set_modifiers(self._modifiers | other)
        return self

    def __lshift__(self, other):
        return self.__class__(self._code, self._modifiers << other)

    def __ilshift__(self, other):
        self.set_modifiers(self._modifiers << other)
        return self

    def __rshift__(self, other):
        return self.__class__(self._code, self._modifiers >> other)

    def __irshift__(self, other):
        self.set_modifiers(self._modifiers >> other)
        return self

* Thu 29 Jan 2015 02:45:44 AM JST
    def add_modifier(self, modifier):
        r"""SUMMARY

        add_modifier(modifier)

        @Arguments:
        - `modifier`:

        @Return:

        @Error:
        """
        self._piece.add_modifier(modifier)

    def remove_modifier(self, modifier):
        r"""SUMMARY

        remove_modifier(modifier)

        @Arguments:
        - `modifier`:

        @Return:

        @Error:
        """
        self._piece.remove_modifier(modifier)

    def clear_modifier(self, ):
        r"""SUMMARY

        clear_modifier()

        @Return:

        @Error:
        """
        self._piece.clear_modifier()

    def ismodified(self, modifier):
        r"""SUMMARY

        ismodified(modifier)

        @Arguments:
        - `modifier`:

        @Return:

        @Error:
        """
        self._piece.ismodified(modifier)

* Thu 29 Jan 2015 02:46:19 AM JST
remove
* Thu 29 Jan 2015 02:48:32 AM JST
XInputer
* Thu 29 Jan 2015 03:07:04 AM JST
XKey, XButton
* Thu 29 Jan 2015 03:07:47 AM JST
from enum import IntEnum
* Thu 29 Jan 2015 03:07:54 AM JST
class KeyBehave(IntEnum):
    r"""KeyBehave

    KeyBehave is a IntEnum.
    Responsibility:
    """
    up = 2
    down = 4
    both = up | down

* Thu 29 Jan 2015 03:36:12 AM JST
Key
* Thu 29 Jan 2015 03:36:13 AM JST
Key
* Thu 29 Jan 2015 03:36:15 AM JST
Key
* Thu 29 Jan 2015 03:38:47 AM JST
__meta
* Thu 29 Jan 2015 03:40:01 AM JST
    def isdown(self, ):
        r"""SUMMARY

        isdown()

        @Return:

        @Error:
        """
        return (KeyBehave.down & self._behave) != 0

    def isup(self, ):
        r"""SUMMARY

        isup()

        @Return:

        @Error:
        """
        return (KeyBehave.up & self._behave) != 0

* Thu 29 Jan 2015 03:41:00 AM JST
Key
* Thu 29 Jan 2015 03:41:02 AM JST
Key
* Thu 29 Jan 2015 03:41:14 AM JST
    def set_behave(self, behave):
        """function set_behave

        behave: int

        returns None
        """
        self._behave = behave

    def get_behave(self):
        """function get_behave

        returns int
        """
        return self._behave


* Thu 29 Jan 2015 03:41:20 AM JST
    def set_behave(self, behave):
        """function set_behave

        behave: int

        returns None
        """
        self._behave = behave


* Thu 29 Jan 2015 03:42:26 AM JST
behave
* Thu 29 Jan 2015 03:42:54 AM JST
    def add_behave(self, behave):
        r"""SUMMARY

        add_behave(behave)

        @Arguments:
        - `behave`:

        @Return:

        @Error:
        """
        self._behave |= behave

    def remove_behave(self, behave):
        r"""SUMMARY

        remove_behave(behave)

        @Arguments:
        - `behave`:

        @Return:

        @Error:
        """
        self._behave ^= behave


* Thu 29 Jan 2015 03:43:10 AM JST
    def isdown(self, ):
        r"""SUMMARY

        isdown()

        @Return:

        @Error:
        """
        return (Behave.down & self._behave) != 0

    def isup(self, ):
        r"""SUMMARY

        isup()

        @Return:

        @Error:
        """
        return (Behave.up & self._behave) != 0
    

* Thu 29 Jan 2015 03:43:41 AM JST
del
* Thu 29 Jan 2015 03:43:45 AM JST
del
* Thu 29 Jan 2015 03:46:06 AM JST

* Thu 29 Jan 2015 03:46:06 AM JST

* Thu 29 Jan 2015 03:46:06 AM JST
        self._behave = behave

* Thu 29 Jan 2015 03:51:24 AM JST
self
* Thu 29 Jan 2015 03:55:42 AM JST
_send
* Thu 29 Jan 2015 03:55:56 AM JST
    def get_eventx(self, ):
        r"""SUMMARY
        
        get_eventx()
        
        @Return:

        @Error:
        """
        return self._sendevent.get_eventx()

    def set_eventx(self, eventx):
        r"""SUMMARY
        
        set_eventx(eventx)
        
        @Arguments:
        - `eventx`:
        
        @Return:

        @Error:
        """
        self._sendevent.set_eventx(eventx)

    def clear_eventx(self, ):
        r"""SUMMARY
        
        clear_eventx()
        
        @Return:

        @Error:
        """
        self.set_eventx(0)

    eventx = property(get_eventx, set_eventx, clear_eventx)

* Thu 29 Jan 2015 03:57:59 AM JST
    def __init__(self, window, code, modifier=0, x=0, y=0,
                 behave=Behave.both, display=None):
        r"""

        @Arguments:
        - `window`:
        - `code`:
        - `modifier`:
        - `x`:
        - `y`:
        - `behave`:
        - `display`:
        """
        XInput.__init__(self, behave)
        self._sendevent = SendEventKey(window, code, modifier, x, y, display)

* Thu 29 Jan 2015 03:58:24 AM JST
    def get_window(self, ):
        r"""SUMMARY

        get_window()

        @Return:

        @Error:
        """
        return self._sendevent.get_window()

    def set_window(self, window):
        r"""SUMMARY

        set_window(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        self._sendevent.set_window(window)

    window = property(get_window, set_window)

    def get_code(self, ):
        r"""SUMMARY

        get_code()

        @Return:

        @Error:
        """
        return self._sendevent.get_code()

    def set_code(self, code):
        r"""SUMMARY

        set_code(code)

        @Arguments:
        - `code`:

        @Return:

        @Error:
        """
        self._sendevent.set_code(code)

    code = property(get_code, set_code)

    def get_modifier(self, ):
        r"""SUMMARY

        get_modifier()

        @Return:

        @Error:
        """
        return self._sendevent.get_modifier()

    def set_modifier(self, modifier):
        r"""SUMMARY

        set_modifier(modifier)

        @Arguments:
        - `modifier`:

        @Return:

        @Error:
        """
        self._sendevent.set_modifier(modifier)

    def clear_modifier(self, ):
        r"""SUMMARY

        clear_modifier()

        @Return:

        @Error:
        """
        self._sendevent.clear_modifier()

    modifier = property(get_modifier, set_modifier, clear_modifier)

    def add_modifier(self, modifier):
        r"""SUMMARY

        add_modifier(modifier)

        @Arguments:
        - `modifier`:

        @Return:

        @Error:
        """
        self._sendevent.add_modifier(modifier)

    def remove_modifier(self, modifier):
        r"""SUMMARY

        remove_modifier(modifier)

        @Arguments:
        - `modifier`:

        @Return:

        @Error:
        """
        self._sendevent.remove_modifier(modifier)

    def ismodified(self, modifier):
        r"""SUMMARY

        ismodified(modifier)

        @Arguments:
        - `modifier`:

        @Return:

        @Error:
        """
        return self._sendevent.ismodified(modifier)

    def get_display(self, ):
        r"""SUMMARY

        get_display()

        @Return:

        @Error:
        """
        return self._sendevent.get_display()

    def set_display(self, display):
        r"""SUMMARY

        set_display(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        self._sendevent.set_display(display)

    display = property(get_display, set_display)

    def get_eventx(self, ):
        r"""SUMMARY

        get_eventx()

        @Return:

        @Error:
        """
        return self._sendevent.get_eventx()

    def set_eventx(self, eventx):
        r"""SUMMARY

        set_eventx(eventx)

        @Arguments:
        - `eventx`:

        @Return:

        @Error:
        """
        self._sendevent.set_eventx(eventx)

    def clear_eventx(self, ):
        r"""SUMMARY

        clear_eventx()

        @Return:

        @Error:
        """
        self.set_eventx(0)

    eventx = property(get_eventx, set_eventx, clear_eventx)

    def get_eventy(self, ):
        r"""SUMMARY

        get_eventy()

        @Return:

        @Error:
        """
        return self._sendevent.get_eventy()

    def set_eventy(self, eventy):
        r"""SUMMARY

        set_eventy(eventy)

        @Arguments:
        - `eventy`:

        @Return:

        @Error:
        """
        self._sendevent.set_eventy(eventy)

    def clear_eventy(self, ):
        r"""SUMMARY

        clear_eventy()

        @Return:

        @Error:
        """
        self.set_eventy(0)

    eventy = property(get_eventy, set_eventy, clear_eventy)

* Thu 29 Jan 2015 03:58:59 AM JST
    def get_display(self, ):
        r"""SUMMARY

        get_display()

        @Return:

        @Error:
        """
        return self._sendevent.get_display()

    def set_display(self, display):
        r"""SUMMARY

        set_display(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        self._sendevent.set_display(display)

    display = property(get_display, set_display)


* Thu 29 Jan 2015 03:59:14 AM JST
    def get_display(self, ):
        r"""SUMMARY

        get_display()

        @Return:

        @Error:
        """
        return self._sendevent.get_display()

    def set_display(self, display):
        r"""SUMMARY

        set_display(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        self._sendevent.set_display(display)

    display = property(get_display, set_display)


* Thu 29 Jan 2015 04:00:38 AM JST
54525974
* Thu 29 Jan 2015 04:04:03 AM JST
    def input(self, ):
        r"""SUMMARY

        input()

        @Return:

        @Error:
        """
        cookies = []
        if self.isdown():
            cookies.append(self._sendevent.press())
        if self.isup():
            cookies.append(self._sendevent.release())
        return cookies

* Thu 29 Jan 2015 04:04:14 AM JST
XInputKey()
* Thu 29 Jan 2015 04:04:24 AM JST
54525974
* Thu 29 Jan 2015 04:05:30 AM JST
check()
* Thu 29 Jan 2015 04:05:54 AM JST
import
* Thu 29 Jan 2015 04:08:00 AM JST
wxcb.conn
* Thu 29 Jan 2015 04:10:33 AM JST
    def flush(self, ):
        r"""SUMMARY

        flush()

        @Return:

        @Error:
        """
        self.window.flush()

* Thu 29 Jan 2015 04:10:51 AM JST
from xsendkeys.obj.xinput import *
x=XInputKey(54525974, 38)
coo=x.input()

* Thu 29 Jan 2015 04:44:30 AM JST
LeafExpression
* Thu 29 Jan 2015 04:45:58 AM JST
exp = 
* Thu 29 Jan 2015 04:46:05 AM JST
Expression
* Thu 29 Jan 2015 04:46:23 AM JST
XInputExpression
* Thu 29 Jan 2015 04:48:56 AM JST
            exp = XInputExpression(XInputKey(0, int(token.getvalue()),
                                             display=state.get('display', None)))

* Thu 29 Jan 2015 04:49:13 AM JST
codes[0]
* Thu 29 Jan 2015 04:49:22 AM JST
codes[1]
* Thu 29 Jan 2015 04:49:30 AM JST
                
* Thu 29 Jan 2015 04:51:43 AM JST
            exp = XInputExpression(XInputKey(
                0, codes[0], codes[1], display=state.get('display', None)))

* Thu 29 Jan 2015 04:53:25 AM JST
XButton(
* Thu 29 Jan 2015 04:53:25 AM JST
pieces.XButton(
* Thu 29 Jan 2015 04:53:28 AM JST
XButton(
* Thu 29 Jan 2015 04:53:29 AM JST
pieces.XButton(
* Thu 29 Jan 2015 04:53:31 AM JST
XButton(
* Thu 29 Jan 2015 04:53:32 AM JST
pieces.XButton(
* Thu 29 Jan 2015 04:53:34 AM JST
XButton(
* Thu 29 Jan 2015 04:53:34 AM JST
pieces.XButton(
* Thu 29 Jan 2015 04:53:37 AM JST
XButton(
* Thu 29 Jan 2015 04:53:37 AM JST
pieces.XButton(
* Thu 29 Jan 2015 04:53:47 AM JST
XButton(
* Thu 29 Jan 2015 04:53:49 AM JST
XButton(
* Thu 29 Jan 2015 04:53:49 AM JST
XButton(
* Thu 29 Jan 2015 04:53:50 AM JST
pieces.XButton(
* Thu 29 Jan 2015 04:53:50 AM JST
pieces.XButton(
* Thu 29 Jan 2015 04:53:50 AM JST
pieces.XButton(
* Thu 29 Jan 2015 04:59:17 AM JST
token.getvalue()
* Thu 29 Jan 2015 05:16:36 AM JST
xinput
* Thu 29 Jan 2015 05:17:51 AM JST
proeprty()
* Thu 29 Jan 2015 05:20:27 AM JST
behave = property(get_behave, set_behave, reset_behave)
* Thu 29 Jan 2015 05:22:20 AM JST
display = property(get_display, set_display)
* Thu 29 Jan 2015 05:28:06 AM JST
    def get_eventx(self, ):
        r"""SUMMARY
        
        get_eventx()
        
        @Return:

        @Error:
        """
        return self._xinput.get_eventx()

    def set_eventx(self, eventx):
        r"""SUMMARY
        
        set_eventx(eventx)
        
        @Arguments:
        - `eventx`:
        
        @Return:

        @Error:
        """
        self._xinput.set_eventx(eventx)

    def clear_eventx(self, ):
        r"""SUMMARY
        
        clear_eventx()
        
        @Return:

        @Error:
        """
        self._xinput.clear_eventx()

    eventx = property(get_eventx, set_eventx, clear_eventx)

* Thu 29 Jan 2015 05:38:46 AM JST
eventpoint = property(get_event_point, set_event_point, clear_event_point)
* Thu 29 Jan 2015 05:38:51 AM JST
    def set_event_point(self, point):
        r"""SUMMARY
        
        set_event_point(point)
        
        @Arguments:
        - `point`:
        
        @Return:

        @Error:
        """
        self._sendevent.set_event_point(point)

    def clear_event_point(self, ):
        r"""SUMMARY
        
        clear_event_point()
        
        @Return:

        @Error:
        """
        self._sendevent.clear_event_point()

    eventpoint = property(get_event_point, set_event_point, clear_event_point)

* Thu 29 Jan 2015 05:39:35 AM JST
    def get_event_point(self, ):
        r"""SUMMARY

        get_event_point()

        @Return:

        @Error:
        """
        return self._sendevent.get_event_point()


* Thu 29 Jan 2015 05:39:56 AM JST
    def get_event_point(self, ):
        r"""SUMMARY

        get_event_point()

        @Return:

        @Error:
        """
        return self._sendevent.get_event_point()

    def set_event_point(self, point):
        r"""SUMMARY

        set_event_point(point)

        @Arguments:
        - `point`:

        @Return:

        @Error:
        """
        self._sendevent.set_event_point(point)

    def clear_event_point(self, ):
        r"""SUMMARY

        clear_event_point()

        @Return:

        @Error:
        """
        self._sendevent.clear_event_point()

    eventpoint = property(get_event_point, set_event_point, clear_event_point)


* Thu 29 Jan 2015 07:16:14 AM JST
send
* Thu 29 Jan 2015 07:16:34 AM JST
send
* Thu 29 Jan 2015 07:17:44 AM JST
send
* Thu 29 Jan 2015 07:20:49 AM JST
from xsendkeys import XSendkeys
x=XSendkeys('a+bc')
* Thu 29 Jan 2015 07:20:54 AM JST
x.send(54525974)
* Thu 29 Jan 2015 07:20:57 AM JST
x.flush()
* Thu 29 Jan 2015 07:21:21 AM JST
sendkeys
* Thu 29 Jan 2015 07:21:26 AM JST
sendkey
* Thu 29 Jan 2015 07:21:45 AM JST
sendkeys
* Thu 29 Jan 2015 07:22:03 AM JST
sendkey
* Thu 29 Jan 2015 07:22:37 AM JST
sendkeys
* Thu 29 Jan 2015 07:23:04 AM JST
sendkey
* Thu 29 Jan 2015 07:23:21 AM JST
sendkey
* Thu 29 Jan 2015 07:23:24 AM JST
sendkey
* Thu 29 Jan 2015 07:23:29 AM JST
sendkey
* Thu 29 Jan 2015 07:24:24 AM JST
inputs
* Thu 29 Jan 2015 07:24:29 AM JST
sendkey
* Thu 29 Jan 2015 07:24:33 AM JST
sendkey
* Thu 29 Jan 2015 07:24:39 AM JST
_sendkeys
* Thu 29 Jan 2015 07:24:46 AM JST
_sendkey
* Thu 29 Jan 2015 07:25:00 AM JST
sendkey
* Thu 29 Jan 2015 07:25:03 AM JST
sendkey
* Thu 29 Jan 2015 07:25:06 AM JST
sendkey
* Thu 29 Jan 2015 07:25:10 AM JST
sendkey
* Thu 29 Jan 2015 07:25:13 AM JST
sendkey
* Thu 29 Jan 2015 07:25:26 AM JST
sendkey
* Thu 29 Jan 2015 07:25:30 AM JST
sendkeys
* Thu 29 Jan 2015 07:25:38 AM JST
sendkey
* Thu 29 Jan 2015 07:25:41 AM JST
sendkey
* Thu 29 Jan 2015 07:25:45 AM JST
sendkey
* Thu 29 Jan 2015 07:25:51 AM JST
sendkey
* Thu 29 Jan 2015 07:25:56 AM JST
sendkey
* Thu 29 Jan 2015 07:25:59 AM JST
sendkey
* Thu 29 Jan 2015 07:26:08 AM JST
sendkey
* Thu 29 Jan 2015 07:26:11 AM JST
sendkey
* Thu 29 Jan 2015 07:26:25 AM JST
sendkey
* Thu 29 Jan 2015 07:27:14 AM JST
sendkey
* Thu 29 Jan 2015 07:27:20 AM JST
sendkey
* Thu 29 Jan 2015 07:27:28 AM JST
sendkey
* Thu 29 Jan 2015 07:27:33 AM JST
sendkey
* Thu 29 Jan 2015 07:27:35 AM JST
sendkey
* Thu 29 Jan 2015 07:27:39 AM JST
sendkey
* Thu 29 Jan 2015 07:27:44 AM JST
sendkey
* Thu 29 Jan 2015 07:27:49 AM JST
_sendkey
* Thu 29 Jan 2015 07:27:53 AM JST
sendkey
* Thu 29 Jan 2015 07:27:56 AM JST
sendkey
* Thu 29 Jan 2015 07:27:59 AM JST
sendkey
* Thu 29 Jan 2015 07:29:12 AM JST
get_sendkeys
* Thu 29 Jan 2015 07:29:58 AM JST
from xsendkeys import XSendkeys
x=XSendkeys('a+bc')

* Thu 29 Jan 2015 07:30:01 AM JST
x.send(54525974)
* Thu 29 Jan 2015 07:30:05 AM JST
x.flush()
* Thu 29 Jan 2015 07:30:19 AM JST

* Thu 29 Jan 2015 07:30:19 AM JST

* Thu 29 Jan 2015 07:30:19 AM JST
            # exp = XSendKeyExpression(pieces.XKey(int(token.getvalue())))

* Thu 29 Jan 2015 07:30:21 AM JST

* Thu 29 Jan 2015 07:30:21 AM JST

* Thu 29 Jan 2015 07:30:21 AM JST
            # exp = XSendKeyExpression(pieces.XKey(codes[0], codes[1]))

* Thu 29 Jan 2015 07:30:23 AM JST

* Thu 29 Jan 2015 07:30:23 AM JST

* Thu 29 Jan 2015 07:30:23 AM JST
            # exp = XSendKeyExpression(pieces.XKey(codes[0], codes[1]))

* Thu 29 Jan 2015 07:30:26 AM JST

* Thu 29 Jan 2015 07:30:26 AM JST

* Thu 29 Jan 2015 07:30:26 AM JST
            # exp = XSendKeyExpression(pieces.XKey(codes[0], codes[1]))

* Thu 29 Jan 2015 07:30:27 AM JST

* Thu 29 Jan 2015 07:30:27 AM JST

* Thu 29 Jan 2015 07:30:27 AM JST
            # exp = XSendKeyExpression(BUTTONS.get(token.getvalue()))

* Thu 29 Jan 2015 07:33:36 AM JST

* Thu 29 Jan 2015 07:33:36 AM JST

* Thu 29 Jan 2015 07:33:36 AM JST
    __metaclass__ = ABCMeta

* Thu 29 Jan 2015 07:33:38 AM JST

* Thu 29 Jan 2015 07:33:38 AM JST

* Thu 29 Jan 2015 07:33:38 AM JST
from abc import ABCMeta, abstractmethod

* Thu 29 Jan 2015 07:35:31 AM JST
Key
* Thu 29 Jan 2015 07:35:35 AM JST

* Thu 29 Jan 2015 07:35:35 AM JST

* Thu 29 Jan 2015 07:35:35 AM JST
# from xsendkeys.obj.sendkey import KeyBehave

* Thu 29 Jan 2015 07:36:03 AM JST

* Thu 29 Jan 2015 07:36:03 AM JST

* Thu 29 Jan 2015 07:36:03 AM JST
import xsendkeys.obj.pieces as pieces

* Thu 29 Jan 2015 07:36:22 AM JST
XSendKeyExpression, 
* Thu 29 Jan 2015 07:37:16 AM JST

* Thu 29 Jan 2015 07:37:16 AM JST

* Thu 29 Jan 2015 07:37:16 AM JST
import xsendkeys.obj.sendkey as sendkey

* Thu 29 Jan 2015 07:37:51 AM JST
RepeatXInput
* Thu 29 Jan 2015 07:38:18 AM JST
form 
* Thu 29 Jan 2015 07:38:46 AM JST
RepeatXInput
* Thu 29 Jan 2015 07:40:54 AM JST
from xsendkeys import XSendkeys
x=XSendkeys('a+bc')

* Thu 29 Jan 2015 07:40:58 AM JST
x.send(54525974)
* Thu 29 Jan 2015 07:41:00 AM JST
x.flush()
* Thu 29 Jan 2015 07:42:00 AM JST
disp = 
* Thu 29 Jan 2015 07:42:02 AM JST

* Thu 29 Jan 2015 07:42:02 AM JST

* Thu 29 Jan 2015 07:42:02 AM JST
        conn.connect(disp).flush()

* Thu 29 Jan 2015 07:42:32 AM JST
xsendkeys
* Thu 29 Jan 2015 07:49:50 AM JST
obj
* Thu 29 Jan 2015 07:50:25 AM JST
obj.
* Thu 29 Jan 2015 07:50:47 AM JST
from xsendkey.converter import (
    CharConverter, NameConverter, CodeConverter, SymConverter)

* Thu 29 Jan 2015 07:51:11 AM JST
obj.
* Thu 29 Jan 2015 07:52:14 AM JST
from xsendkey import XSendkey

* Thu 29 Jan 2015 07:52:17 AM JST
x=XSendkey('a+bc')
* Thu 29 Jan 2015 07:52:20 AM JST
x.send(54525974)
* Thu 29 Jan 2015 07:52:23 AM JST
x.flush()
* Thu 29 Jan 2015 07:53:14 AM JST
XInputKey
* Thu 29 Jan 2015 07:53:26 AM JST
XInputButton
* Thu 29 Jan 2015 07:55:44 AM JST
from xsendkey import XSendkey
x=XSendkey('a+bc')

* Thu 29 Jan 2015 07:55:47 AM JST
x.send(54525974)
* Thu 29 Jan 2015 07:55:50 AM JST
x.flush()
* Thu 29 Jan 2015 08:23:38 AM JST

* Thu 29 Jan 2015 08:24:15 AM JST
/* ghosttest.c:  GHOST vulnerability tester */
/* Credit: http://www.openwall.com/lists/oss-security/2015/01/27/9 */
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
 
#define CANARY "in_the_coal_mine"
 
struct {
  char buffer[1024];
  char canary[sizeof(CANARY)];
} temp = { "buffer", CANARY };
 
int main(void) {
  struct hostent resbuf;
  struct hostent *result;
  int herrno;
  int retval;
 
  /*** strlen (name) = size_needed - sizeof (*host_addr) - sizeof (*h_addr_ptrs) - 1; ***/
  size_t len = sizeof(temp.buffer) - 16*sizeof(unsigned char) - 2*sizeof(char *) - 1;
  char name[sizeof(temp.buffer)];
  memset(name, '0', len);
  name[len] = '\0';
 
  retval = gethostbyname_r(name, &resbuf, temp.buffer, sizeof(temp.buffer), &result, &herrno);
 
  if (strcmp(temp.canary, CANARY) != 0) {
    puts("vulnerable");
    exit(EXIT_SUCCESS);
  }
  if (retval == ERANGE) {
    puts("not vulnerable");
    exit(EXIT_SUCCESS);
  }
  puts("should not happen");
  exit(EXIT_FAILURE);
}
 
* Thu 29 Jan 2015 08:25:08 AM JST
lsof | grep libc | awk '{print $1}' | sort | uniq
* Thu 29 Jan 2015 08:57:34 AM JST
xsendkey/
* Thu 29 Jan 2015 09:02:22 AM JST
xsendkey/
* Thu 29 Jan 2015 09:45:31 AM JST
wm
* Thu 29 Jan 2015 09:45:31 AM JST
D wm
* Thu 29 Jan 2015 09:45:45 AM JST
title
* Thu 29 Jan 2015 09:45:47 AM JST
77594627
* Thu 29 Jan 2015 09:46:00 AM JST
pnir=77594627
* Thu 29 Jan 2015 09:46:18 AM JST
'{LClick 75 130}'
* Thu 29 Jan 2015 09:51:34 AM JST
codes[0]
* Thu 29 Jan 2015 09:51:46 AM JST
token.getvalue()
* Thu 29 Jan 2015 09:52:04 AM JST
BUTTONS.get(token.getvalue())
* Thu 29 Jan 2015 09:52:40 AM JST
0]
* Thu 29 Jan 2015 09:52:41 AM JST
codes[0]
* Thu 29 Jan 2015 09:52:43 AM JST
1]
* Thu 29 Jan 2015 09:52:44 AM JST
codes[1]
* Thu 29 Jan 2015 09:52:53 AM JST
codes
* Thu 29 Jan 2015 09:52:58 AM JST
0]
* Thu 29 Jan 2015 09:52:59 AM JST
codes[0]
* Thu 29 Jan 2015 09:53:02 AM JST
1]
* Thu 29 Jan 2015 09:53:02 AM JST
codes[1]
* Thu 29 Jan 2015 09:53:20 AM JST
codes
* Thu 29 Jan 2015 09:53:25 AM JST
0]
* Thu 29 Jan 2015 09:53:25 AM JST
codes[0]
* Thu 29 Jan 2015 09:53:28 AM JST
1]
* Thu 29 Jan 2015 09:53:29 AM JST
codes[1]
* Thu 29 Jan 2015 09:53:36 AM JST
                
* Thu 29 Jan 2015 09:53:50 AM JST
                
* Thu 29 Jan 2015 09:53:56 AM JST
                
* Thu 29 Jan 2015 09:54:00 AM JST
                
* Thu 29 Jan 2015 09:54:40 AM JST
from xsendkey import XSendkey
* Thu 29 Jan 2015 09:54:45 AM JST
x=XSendkey('a+bc')
* Thu 29 Jan 2015 09:54:50 AM JST
pnir=77594627
* Thu 29 Jan 2015 09:54:54 AM JST
x=XSendkey('{LClick 75 130}')
* Thu 29 Jan 2015 09:54:56 AM JST
x.send(pnir)
* Thu 29 Jan 2015 09:55:00 AM JST
x.flush()
* Thu 29 Jan 2015 09:55:12 AM JST
from xsendkey import XSendkey
pnir=77594627
x=XSendkey('{LClick 75 130}')

* Thu 29 Jan 2015 09:57:52 AM JST
from xsendkey import XSendkey
* Thu 29 Jan 2015 09:59:37 AM JST
from xsendkey import XSendkey
* Thu 29 Jan 2015 10:02:55 AM JST
from xsendkey import XSendkey
* Thu 29 Jan 2015 10:02:59 AM JST
pnir=77594627
* Thu 29 Jan 2015 10:03:02 AM JST
x=XSendkey('{LClick 75 130}')
* Thu 29 Jan 2015 10:03:05 AM JST
x.send(pnir)
* Thu 29 Jan 2015 10:03:08 AM JST
x.flush()
* Thu 29 Jan 2015 10:04:47 AM JST
wxcb
* Thu 29 Jan 2015 11:15:48 AM JST
Match
* Thu 29 Jan 2015 11:16:33 AM JST
definit
* Thu 29 Jan 2015 11:17:30 AM JST
string
* Thu 29 Jan 2015 11:20:27 AM JST
string
* Thu 29 Jan 2015 11:24:41 AM JST
string
* Thu 29 Jan 2015 11:26:23 AM JST
defini
* Thu 29 Jan 2015 11:26:27 AM JST
    def __init__(self, string):
        r"""
        
        @Arguments:
        - `string`:
        """
        self._string = None
        self.set_string(string)

    def set_string(self, string):
        r"""SUMMARY
        
        set_string(string)
        
        @Arguments:
        - `string`:
        
        @Return:

        @Error:
        """
        self._string = str(string)


* Thu 29 Jan 2015 11:26:40 AM JST
serlf.
* Thu 29 Jan 2015 11:26:46 AM JST
string
* Thu 29 Jan 2015 11:28:48 AM JST
string
* Thu 29 Jan 2015 11:31:09 AM JST
match
* Thu 29 Jan 2015 11:33:11 AM JST
search
* Thu 29 Jan 2015 11:42:35 AM JST
staticmethod
* Thu 29 Jan 2015 11:43:01 AM JST
self, 
* Thu 29 Jan 2015 11:43:37 AM JST
method
* Thu 29 Jan 2015 11:44:23 AM JST
string
* Thu 29 Jan 2015 11:45:39 AM JST
Matcher
* Thu 29 Jan 2015 11:51:42 AM JST
    def set_method(self, method):
        r"""SUMMARY
        
        set_method(method)
        
        @Arguments:
        - `method`:
        
        @Return:

        @Error:
        """
        


* Thu 29 Jan 2015 11:52:14 AM JST
self.
* Thu 29 Jan 2015 11:52:17 AM JST
self.matchers[self.method](string)
* Thu 29 Jan 2015 11:52:32 AM JST
self.
* Thu 29 Jan 2015 11:52:46 AM JST
string
* Thu 29 Jan 2015 11:55:24 AM JST
    def __init__(self, string):
        r"""

        @Arguments:
        - `string`:
        """
        self._matcher = self.matchers[self.method](string)


* Thu 29 Jan 2015 12:21:30 PM JST
m=Matcher('hello')
* Thu 29 Jan 2015 12:21:36 PM JST
m.match('worldhello')
* Thu 29 Jan 2015 12:21:51 PM JST
m.set_method('startswith')
* Thu 29 Jan 2015 12:22:43 PM JST
m=Matcher('hello')
m.match('worldhello')

* Thu 29 Jan 2015 12:22:48 PM JST
m.set_method('startswith')
* Thu 29 Jan 2015 12:22:54 PM JST
m.match('worldhello')
* Thu 29 Jan 2015 12:23:23 PM JST
m=Matcher('hello')
* Thu 29 Jan 2015 12:23:26 PM JST
m.match('worldhello')
* Thu 29 Jan 2015 12:23:30 PM JST
m.set_method('startswith')
* Thu 29 Jan 2015 12:28:46 PM JST
self
* Thu 29 Jan 2015 12:29:15 PM JST
tes()
* Thu 29 Jan 2015 12:36:21 PM JST
tes()
* Thu 29 Jan 2015 12:39:33 PM JST
set
* Thu 29 Jan 2015 12:40:13 PM JST
static
* Thu 29 Jan 2015 12:40:24 PM JST
Matcher
* Thu 29 Jan 2015 12:40:31 PM JST
Matcher
* Thu 29 Jan 2015 12:40:56 PM JST
m=Matcher('hello')
m.match('worldhello')

* Thu 29 Jan 2015 12:41:14 PM JST
m.match('worldhello')
* Thu 29 Jan 2015 12:41:19 PM JST
'world
* Thu 29 Jan 2015 12:45:04 PM JST
matcher
* Thu 29 Jan 2015 12:45:08 PM JST
py
* Thu 29 Jan 2015 12:45:09 PM JST
core.py
* Thu 29 Jan 2015 12:45:37 PM JST
class MatchAbstract(object):
    r"""MatchAbstract

    MatchAbstract is a object.
    Responsibility:
    """
    __metaclass__ = ABCMeta

    @abstractmethod
    def match(self, string):
        pass


class StartswithMatch(MatchAbstract):
    r"""StartsWithMatch

    StartswithMatch is a MatchAbstract.
    Responsibility:
    """
    def __init__(self, string):
        r"""

        @Arguments:
        - `string`:
        """
        self._string = None
        self.set_string(string)

    def set_string(self, string):
        r"""SUMMARY

        set_string(string)

        @Arguments:
        - `string`:

        @Return:

        @Error:
        """
        self._string = str(string)

    def match(self, string):
        r"""SUMMARY

        match(string)

        @Arguments:
        - `string`:

        @Return:

        @Error:
        """
        return str(string).startswith((self._string, ))


class EndswithMatch(MatchAbstract):
    r"""EndswithMatch

    EndswithMatch is a MatchAbstract.
    Responsibility:
    """
    def __init__(self, string):
        r"""

        @Arguments:
        - `string`:
        """
        self._string = None
        self.set_string(string)

    def set_string(self, string):
        r"""SUMMARY

        set_string(string)

        @Arguments:
        - `string`:

        @Return:

        @Error:
        """
        self._string = str(string)

    def match(self, string):
        r"""SUMMARY

        match(string)

        @Arguments:
        - `string`:

        @Return:

        @Error:
        """
        return str(string).endswith((self._string))


class Search(MatchAbstract):
    r"""Search

    Search is a MatchAbstract.
    Responsibility:
    """
    def __init__(self, string):
        r"""

        @Arguments:
        - `string`:
        """
        self._string = None
        self.set_string(string)

    def set_string(self, string):
        r"""SUMMARY

        set_string(string)

        @Arguments:
        - `string`:

        @Return:

        @Error:
        """
        self._string = str(string)

    def match(self, string):
        r"""SUMMARY

        match(string)

        @Arguments:
        - `string`:

        @Return:

        @Error:
        """
        return self._string in str(string)


class EqualMatch(MatchAbstract):
    r"""EqualMatch

    EqualMatch is a MatchAbstract.
    Responsibility:
    """
    def __init__(self, string):
        r"""

        @Arguments:
        - `string`:
        """
        self._string = None
        self.set_string(string)

    def set_string(self, string):
        r"""SUMMARY

        set_string(string)

        @Arguments:
        - `string`:

        @Return:

        @Error:
        """
        self._string = str(string)

    def match(self, string):
        r"""SUMMARY

        match(string)

        @Arguments:
        - `string`:

        @Return:

        @Error:
        """
        return self._string == str(string)


class RegexpMatch(MatchAbstract):
    r"""RegexpMatch

    RegexpMatch is a MatchAbstract.
    Responsibility:
    """
    def __init__(self, string):
        r"""

        @Arguments:
        - `string`:
        """
        self._regexp = re.compile(string)

    def match(self, string):
        r"""SUMMARY

        match(string)

        @Arguments:
        - `string`:

        @Return:

        @Error:
        """
        match = self._regexp.match(string)
        return match is not None

* Thu 29 Jan 2015 12:45:42 PM JST
from abc import ABCMeta, abstractmethod
* Thu 29 Jan 2015 12:46:37 PM JST

    def get_string(self, ):
        r"""SUMMARY
        
        get_string()
        
        @Return:

        @Error:
        """
        return self._string

* Thu 29 Jan 2015 12:47:43 PM JST
    def __init__(self, string):
        r"""

        @Arguments:
        - `string`:
        """
        self._string = None
        self.set_string(string)

    def get_string(self, ):
        r"""SUMMARY

        get_string()

        @Return:

        @Error:
        """
        return self._string

    def set_string(self, string):
        r"""SUMMARY

        set_string(string)

        @Arguments:
        - `string`:

        @Return:

        @Error:
        """
        self._string = str(string)

    string = property(get_string, set_string)

* Thu 29 Jan 2015 12:47:52 PM JST
MatchAbstract
* Thu 29 Jan 2015 12:48:17 PM JST
MatchAbstract
* Thu 29 Jan 2015 12:49:45 PM JST

* Thu 29 Jan 2015 12:49:45 PM JST

* Thu 29 Jan 2015 12:49:45 PM JST
import string

* Thu 29 Jan 2015 12:49:52 PM JST
MatchAbstract
* Thu 29 Jan 2015 12:50:09 PM JST
MatchAbstract
* Thu 29 Jan 2015 12:50:56 PM JST
string.
* Thu 29 Jan 2015 12:52:13 PM JST
re.compile(string)
* Thu 29 Jan 2015 12:52:33 PM JST
self._regexp.match(string)
* Thu 29 Jan 2015 12:52:37 PM JST

* Thu 29 Jan 2015 12:52:37 PM JST

* Thu 29 Jan 2015 12:52:37 PM JST
        match = 

* Thu 29 Jan 2015 12:55:07 PM JST
SRE_Pattern
* Thu 29 Jan 2015 12:55:08 PM JST
_sre.SRE_Pattern
* Thu 29 Jan 2015 12:56:03 PM JST

    def get_regexp(self, ):
        r"""SUMMARY
        
        get_regexp()
        
        @Return:

        @Error:
        """
        return self._regexp

* Thu 29 Jan 2015 12:56:56 PM JST
recompile 
* Thu 29 Jan 2015 12:57:31 PM JST
pattern
* Thu 29 Jan 2015 12:57:36 PM JST
_pattern_type
* Thu 29 Jan 2015 01:01:29 PM JST
matches
* Thu 29 Jan 2015 01:05:42 PM JST
self.matchers[self.method](string)
* Thu 29 Jan 2015 01:05:58 PM JST
    @classmethod
    def set_method(cls, method):
        r"""SUMMARY

        set_method(method)

        @Arguments:
        - `method`:

        @Return:

        @Error:
        """
        if not method in cls.matchers:
            # TODO: (Atami) [2015/01/29]
            raise StandardError()
        cls.method = method

* Thu 29 Jan 2015 01:06:10 PM JST
    def change_method(self, method):
        r"""SUMMARY

        change_method(method)

        @Arguments:
        - `method`:

        @Return:

        @Error:
        """
        Matcher.set_method(method)
        self._matcher = self.matchers[self.method](self._matcher._string)

    def match(self, string):
        r"""SUMMARY

        match(string)

        @Arguments:
        - `string`:

        @Return:

        @Error:
        """
        return self._matcher.match(string)

* Thu 29 Jan 2015 01:06:18 PM JST
_string
* Thu 29 Jan 2015 01:06:20 PM JST
get_
* Thu 29 Jan 2015 01:06:22 PM JST
_matcher.get_
* Thu 29 Jan 2015 01:08:14 PM JST
self._matcher = self.matchers[self.method](self.string)
* Thu 29 Jan 2015 01:08:40 PM JST

* Thu 29 Jan 2015 01:08:40 PM JST

* Thu 29 Jan 2015 01:08:40 PM JST
        self._matcher = self.matchers[self.method](self.string)

* Thu 29 Jan 2015 01:09:07 PM JST
self.
* Thu 29 Jan 2015 01:09:27 PM JST
self.matchers[self.method](string)
* Thu 29 Jan 2015 01:11:50 PM JST
'googlehelloworld
* Thu 29 Jan 2015 09:24:55 PM JST
from xcb2.xobj.bitmask import BitConfigWindow
* Thu 29 Jan 2015 09:24:57 PM JST

* Thu 29 Jan 2015 09:24:57 PM JST

* Thu 29 Jan 2015 09:24:57 PM JST
from xcb2.xobj.bitmask import BitConfigWindow

* Thu 29 Jan 2015 09:29:20 PM JST

* Thu 29 Jan 2015 09:29:20 PM JST

* Thu 29 Jan 2015 09:29:20 PM JST
from xcb2.xobj.biteventmask import *

* Thu 29 Jan 2015 09:30:23 PM JST

* Thu 29 Jan 2015 09:30:24 PM JST

* Thu 29 Jan 2015 09:30:24 PM JST
from xcb2.xproto.bitmask import *

* Fri 30 Jan 2015 04:49:20 AM JST
InternAtom
* Fri 30 Jan 2015 04:49:20 AM JST
xproto.InternAtom
* Fri 30 Jan 2015 04:49:23 AM JST
xproto
* Fri 30 Jan 2015 04:55:21 AM JST
from wxcb.protocol.xproto import requests
i=requests.InternAtom(True, len('hello'), 'hello')
c=i.request()

* Fri 30 Jan 2015 04:55:56 AM JST
from wxcb.protocol.xproto import requests
i=requests.InternAtom(True, len('hello'), 'hello')

* Fri 30 Jan 2015 04:55:59 AM JST
c=i.request()
* Fri 30 Jan 2015 05:00:08 AM JST
atom
* Fri 30 Jan 2015 05:00:19 AM JST
atom
* Fri 30 Jan 2015 05:01:08 AM JST
from wxcb.protocol.xproto import requests
i=requests.InternAtom(True, len('hello'), 'hello')
c=i.request()

* Fri 30 Jan 2015 05:19:03 AM JST
    def get_name(self, ):
        r"""SUMMARY

        get()

        @Return:

        @Error:
        """
        return self._name

    def set_name(self, name):
        r"""SUMMARY

        set(atom)

        @Arguments:
        - `atom`:

        @Return:

        @Error:
        """
        self._name = _atomname.AtomName(name)

    name = property(get_name, set_name)


* Fri 30 Jan 2015 05:20:10 AM JST
name.get_length()
* Fri 30 Jan 2015 05:24:15 AM JST
name
* Fri 30 Jan 2015 05:26:42 AM JST
name = 
* Fri 30 Jan 2015 05:32:55 AM JST
c=i.request()
* Fri 30 Jan 2015 05:33:24 AM JST
from wxcb.protocol.xproto import requests
* Fri 30 Jan 2015 05:33:28 AM JST
i=requests.InternAtom(True, len('hello'), 'hello')
* Fri 30 Jan 2015 05:35:47 AM JST
get_length()
* Fri 30 Jan 2015 05:35:52 AM JST
get_length()
* Fri 30 Jan 2015 05:35:55 AM JST
naem_l
* Fri 30 Jan 2015 05:36:27 AM JST
from wxcb.protocol.xproto import requests
i=requests.InternAtom(True, len('hello'), 'hello')

* Fri 30 Jan 2015 05:37:26 AM JST
i=requests.InternAtom(True, len('hello'), 'hello')
* Fri 30 Jan 2015 05:37:35 AM JST
'hello
* Fri 30 Jan 2015 05:39:03 AM JST
check()
* Fri 30 Jan 2015 05:39:04 AM JST
c.check()
* Fri 30 Jan 2015 05:40:17 AM JST
            
* Fri 30 Jan 2015 05:40:25 AM JST

* Fri 30 Jan 2015 05:40:25 AM JST

* Fri 30 Jan 2015 05:40:25 AM JST
        if checked:

* Fri 30 Jan 2015 05:42:49 AM JST
False
* Fri 30 Jan 2015 05:42:50 AM JST
checked=False
* Fri 30 Jan 2015 05:43:13 AM JST
*args
* Fri 30 Jan 2015 05:53:32 AM JST
_InternAtom(self.only_if_exists, self.namelength,
                             self.name, display=display)
* Fri 30 Jan 2015 05:57:26 AM JST
self
* Fri 30 Jan 2015 06:00:19 AM JST
        cookie = _InternAtom(self.only_if_exists, self.namelength,
                             self.name, display=display).request()
        return cookie.reply().atom

* Fri 30 Jan 2015 06:00:22 AM JST
        cookie = _InternAtom(self.only_if_exists, self.namelength,
                             self.name, display=display).request()
        return cookie.reply().atom

    def __call__(self, display=None):
        return self.request(display)

* Fri 30 Jan 2015 06:00:56 AM JST

* Fri 30 Jan 2015 06:00:56 AM JST

* Fri 30 Jan 2015 06:00:56 AM JST
        internatom = 

* Fri 30 Jan 2015 06:00:59 AM JST
cookie
* Fri 30 Jan 2015 06:01:03 AM JST
request()
* Fri 30 Jan 2015 06:01:04 AM JST
internatom
* Fri 30 Jan 2015 06:01:09 AM JST
_InternAtom(self.only_if_exists, self.namelength,
                             self.name, display=display)
* Fri 30 Jan 2015 06:01:15 AM JST
            
* Fri 30 Jan 2015 06:02:17 AM JST
self.chached[display]
* Fri 30 Jan 2015 06:02:33 AM JST
        internatom = _InternAtom(
            self.only_if_exists, self.namelength, self.name, display=display)

* Fri 30 Jan 2015 06:03:08 AM JST
display
* Fri 30 Jan 2015 06:03:08 AM JST
internatom.display
* Fri 30 Jan 2015 06:03:18 AM JST

* Fri 30 Jan 2015 06:03:19 AM JST

* Fri 30 Jan 2015 06:03:19 AM JST
        return cookie.reply().atom

* Fri 30 Jan 2015 06:04:10 AM JST

* Fri 30 Jan 2015 06:04:10 AM JST

* Fri 30 Jan 2015 06:04:10 AM JST
        rep = cookie.reply()

* Fri 30 Jan 2015 06:04:18 AM JST
rep
* Fri 30 Jan 2015 06:04:19 AM JST

* Fri 30 Jan 2015 06:04:19 AM JST

* Fri 30 Jan 2015 06:04:19 AM JST
        atom = reply

* Fri 30 Jan 2015 06:04:32 AM JST
cookie
* Fri 30 Jan 2015 06:04:34 AM JST

* Fri 30 Jan 2015 06:04:34 AM JST

* Fri 30 Jan 2015 06:04:34 AM JST
        atom = cookie.reply().atom

* Fri 30 Jan 2015 06:05:01 AM JST
set_
* Fri 30 Jan 2015 06:05:56 AM JST
interna
* Fri 30 Jan 2015 06:07:16 AM JST
self.
* Fri 30 Jan 2015 06:07:19 AM JST
self.
* Fri 30 Jan 2015 06:07:56 AM JST
inatom
* Fri 30 Jan 2015 06:08:57 AM JST
self.
* Fri 30 Jan 2015 06:11:01 AM JST
self
* Fri 30 Jan 2015 06:11:20 AM JST
atom
* Fri 30 Jan 2015 06:11:23 AM JST
atom
* Fri 30 Jan 2015 06:11:26 AM JST
atom
* Fri 30 Jan 2015 06:11:32 AM JST
self.
* Fri 30 Jan 2015 06:12:15 AM JST
name
* Fri 30 Jan 2015 06:12:54 AM JST
from wxcb.protocol.xproto import requests
* Fri 30 Jan 2015 06:15:08 AM JST
self
* Fri 30 Jan 2015 06:17:58 AM JST
from xrequest.internatom import *
i=InternAtomCached(False, 'BITMAP')
i.request()

* Fri 30 Jan 2015 06:19:39 AM JST
':0.0', 'BITMAP'
* Fri 30 Jan 2015 06:31:28 AM JST

* Fri 30 Jan 2015 06:31:28 AM JST
_atomname
* Fri 30 Jan 2015 06:31:33 AM JST
atomname
* Fri 30 Jan 2015 06:32:53 AM JST
se
* Fri 30 Jan 2015 06:35:22 AM JST
class InternAtomReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        _unpacked = _unpack_from('xx2x4xI', parent, offset)
        self.atom = _unpacked[0]

* Fri 30 Jan 2015 06:35:47 AM JST
xcb.
* Fri 30 Jan 2015 06:35:49 AM JST
xcb.
* Fri 30 Jan 2015 06:36:52 AM JST
xproto
* Fri 30 Jan 2015 06:37:06 AM JST
from xrequest.internatom import *
i=InternAtomCached(False, 'BITMAP')
i.request()

* Fri 30 Jan 2015 06:37:20 AM JST
from xrequest.internatom import *
i=InternAtomCached(False, 'BITMAP')
i.request()

* Fri 30 Jan 2015 06:38:41 AM JST
class GetAtomNameReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        _unpacked = _unpack_from('xx2x4xH22x', parent, offset)
        self.name_len = _unpacked[0]
        offset += 32
        self.name = xcb.List(parent, offset, self.name_len, 'b', 1)

* Fri 30 Jan 2015 06:39:02 AM JST
xcb.
* Fri 30 Jan 2015 06:39:04 AM JST
xcb.
* Fri 30 Jan 2015 06:39:23 AM JST
xcb.
* Fri 30 Jan 2015 06:39:46 AM JST
List(parent, offset, self.name_len, 'b', 1).buf()
* Fri 30 Jan 2015 06:40:15 AM JST
xproto
* Fri 30 Jan 2015 07:44:35 AM JST
    def __repr__(self):
        return '{0.__class__.__name__}(id={0.id})'.format(self)

    def __str__(self, ):
        return '{0.__class__.__name__}(id={0.id})'.format(self)


* Fri 30 Jan 2015 07:44:44 AM JST
id
* Fri 30 Jan 2015 07:44:46 AM JST
0.}
* Fri 30 Jan 2015 07:46:25 AM JST
conn
* Fri 30 Jan 2015 07:46:25 AM JST
wxcb.conn
* Fri 30 Jan 2015 07:49:32 AM JST
conn.
* Fri 30 Jan 2015 07:51:04 AM JST
display
* Fri 30 Jan 2015 08:42:07 AM JST
gc, dst_drawable, src_x, src_y, width, height,
                   dst_x, dst_y, bit_plane
* Fri 30 Jan 2015 08:42:26 AM JST
- `
* Fri 30 Jan 2015 08:43:04 AM JST
gc, dst_drawable, src_x, src_y, width, height,
                   dst_x, dst_y, bit_plane
* Fri 30 Jan 2015 08:43:11 AM JST
    
* Fri 30 Jan 2015 08:43:25 AM JST
coordinate_mode, gc, points_len, points
* Fri 30 Jan 2015 08:43:57 AM JST
polyline
* Fri 30 Jan 2015 08:44:05 AM JST
coordinate_mode, gc, points_len, points
* Fri 30 Jan 2015 08:44:53 AM JST
polysegment
* Fri 30 Jan 2015 08:44:57 AM JST
gc, segments_len, segments
* Fri 30 Jan 2015 08:45:52 AM JST
gc, rectangles_len, rectangles
* Fri 30 Jan 2015 08:46:38 AM JST
gc, arcs_len, arcs
* Fri 30 Jan 2015 08:47:34 AM JST
gc, shape, coordinate_mode, points_len, points
* Fri 30 Jan 2015 08:48:24 AM JST
gc, rectangles_len, rectangles
* Fri 30 Jan 2015 08:48:49 AM JST
return connect(display)
* Fri 30 Jan 2015 08:49:05 AM JST
gc, rectangles_len, rectangles
* Fri 30 Jan 2015 08:49:20 AM JST
, gc, arcs_len, arcs
* Fri 30 Jan 2015 08:49:57 AM JST
format, gc, width, height, dst_x, dst_y, left_pad,
                  depth, data_len, data
* Fri 30 Jan 2015 08:50:22 AM JST
                 
* Fri 30 Jan 2015 08:50:27 AM JST
return 
* Fri 30 Jan 2015 08:50:38 AM JST
format, gc, width, height, dst_x, dst_y,
                 left_pad, depth, data_len, data
* Fri 30 Jan 2015 08:50:42 AM JST
                 
* Fri 30 Jan 2015 08:50:44 AM JST
            
* Fri 30 Jan 2015 08:51:02 AM JST
format, x, y, width, height, plane_mask
* Fri 30 Jan 2015 08:51:29 AM JST
format, x, y, width, height, plane_mask
* Fri 30 Jan 2015 08:51:56 AM JST
            
* Fri 30 Jan 2015 08:52:17 AM JST
 gc, x, y, items_len, items
* Fri 30 Jan 2015 08:53:06 AM JST
    def polytext8(self, display, gc, x, y, items_len, items):
        r"""SUMMARY
        
        polytext8(display, gc, x, y, items_len, items)
        
        @Arguments:
        - `display`:
        - `gc`:
        - `x`:
        - `y`:
        - `items_len`:
        - `items`:
        
        @Return:

        @Error:
        """
        return connect(display).core.PolyText8(
             self._value, gc, x, y, items_len, items)

* Fri 30 Jan 2015 08:53:12 AM JST
16
* Fri 30 Jan 2015 08:53:37 AM JST
string_len, gc, x, y, string
* Fri 30 Jan 2015 08:54:09 AM JST
    def imagetext8(self, display, string_len, gc, x, y, string):
        r"""SUMMARY
        
        imagetext8(display, string_len, gc, x, y, string)
        
        @Arguments:
        - `display`:
        - `string_len`:
        - `gc`:
        - `x`:
        - `y`:
        - `string`:
        
        @Return:

        @Error:
        """
        return connect(display).core.ImageText8(
            string_len, self._value, gc, x, y, string)

* Fri 30 Jan 2015 08:54:18 AM JST
16
* Fri 30 Jan 2015 08:54:29 AM JST
_class, width, height
* Fri 30 Jan 2015 08:55:02 AM JST
_calss
* Fri 30 Jan 2015 08:57:40 AM JST
depth, parent, x, y, width, height, border_width,
               class_, visual, value_mask, value_list
* Fri 30 Jan 2015 08:58:16 AM JST
            
* Fri 30 Jan 2015 08:58:32 AM JST
value_mask, value_list
* Fri 30 Jan 2015 08:58:51 AM JST
               
* Fri 30 Jan 2015 08:59:13 AM JST
    
* Fri 30 Jan 2015 09:00:48 AM JST
exposures, x, y, width, height
* Fri 30 Jan 2015 09:02:16 AM JST
parent, x, y
* Fri 30 Jan 2015 09:03:39 AM JST
            
* Fri 30 Jan 2015 09:04:49 AM JST
alloc, mid, visual
* Fri 30 Jan 2015 09:07:47 AM JST
requestor, selection, property, time
* Fri 30 Jan 2015 09:08:22 AM JST
translatecoordinates
* Fri 30 Jan 2015 09:08:32 AM JST
dst_window, src_x, src_y
* Fri 30 Jan 2015 09:08:58 AM JST
getmotionevents
* Fri 30 Jan 2015 09:09:29 AM JST
start
* Fri 30 Jan 2015 09:09:34 AM JST
self.
* Fri 30 Jan 2015 09:09:51 AM JST
setinputfocus
* Fri 30 Jan 2015 09:09:58 AM JST
revert_to, time
* Fri 30 Jan 2015 09:10:22 AM JST
setselectionowner
* Fri 30 Jan 2015 09:10:30 AM JST
owner, time
* Fri 30 Jan 2015 09:10:58 AM JST
sendevent
* Fri 30 Jan 2015 09:11:07 AM JST
propagate, event_mask, event
* Fri 30 Jan 2015 09:12:16 AM JST
self.
* Fri 30 Jan 2015 09:13:57 AM JST
unmapsubwindows
* Fri 30 Jan 2015 09:14:54 AM JST
destroysubwindows
* Fri 30 Jan 2015 09:15:05 AM JST
co
* Fri 30 Jan 2015 09:15:05 AM JST
return co
* Fri 30 Jan 2015 09:15:20 AM JST
querytree
* Fri 30 Jan 2015 09:15:29 AM JST
return
* Fri 30 Jan 2015 09:15:53 AM JST
getproperty
* Fri 30 Jan 2015 09:16:04 AM JST
delete, property, type, long_offset, long_length
* Fri 30 Jan 2015 09:16:38 AM JST
_vla
* Fri 30 Jan 2015 09:16:38 AM JST
self._vla
* Fri 30 Jan 2015 09:17:05 AM JST
changeproperty
* Fri 30 Jan 2015 09:17:12 AM JST
mode, property, type, format, data_len, data
* Fri 30 Jan 2015 09:18:08 AM JST

* Fri 30 Jan 2015 09:18:10 AM JST
listproperties
* Fri 30 Jan 2015 09:18:48 AM JST
deleteproperty
* Fri 30 Jan 2015 09:19:18 AM JST
rotateproperties
* Fri 30 Jan 2015 09:19:27 AM JST
atoms_len, delta, atoms
* Fri 30 Jan 2015 09:19:56 AM JST
grabkeyboard
* Fri 30 Jan 2015 09:20:10 AM JST
owner_events, time, pointer_mode, keyboard_mode
* Fri 30 Jan 2015 09:20:49 AM JST
grabkey
* Fri 30 Jan 2015 09:20:57 AM JST
owner_events, modifiers, key,
                pointer_mode, keyboard_mode
* Fri 30 Jan 2015 09:20:59 AM JST
                
* Fri 30 Jan 2015 09:21:19 AM JST
owner_events, modifiers, key, pointer_mode, keyboard_mode
* Fri 30 Jan 2015 09:21:50 AM JST
ungrabkey
* Fri 30 Jan 2015 09:22:00 AM JST
key, modifiers
* Fri 30 Jan 2015 09:22:46 AM JST

* Fri 30 Jan 2015 09:22:47 AM JST
grabbutton
* Fri 30 Jan 2015 09:22:52 AM JST
owner_events, event_mask, pointer_mode,
                   keyboard_mode, confine_to, cursor, button, modifiers
* Fri 30 Jan 2015 09:22:57 AM JST
                   
* Fri 30 Jan 2015 09:23:21 AM JST
owner_events, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers
* Fri 30 Jan 2015 09:24:10 AM JST
                   
* Fri 30 Jan 2015 09:24:21 AM JST
ungrabbutton
* Fri 30 Jan 2015 09:24:30 AM JST
button, modifiers
* Fri 30 Jan 2015 09:24:50 AM JST
self.
* Fri 30 Jan 2015 09:24:59 AM JST
grabpointer
* Fri 30 Jan 2015 09:26:07 AM JST
owner_events, event_mask, pointer_mode,
                    keyboard_mode, confine_to, cursor, time
* Fri 30 Jan 2015 09:26:50 AM JST
                    
* Fri 30 Jan 2015 09:27:09 AM JST
querypointer
* Fri 30 Jan 2015 09:27:33 AM JST
warppointer
* Fri 30 Jan 2015 09:27:40 AM JST
dst_window, src_x, src_y, src_width,
                    src_height, dst_x, dst_y
* Fri 30 Jan 2015 09:28:13 AM JST
                    
* Fri 30 Jan 2015 09:28:50 AM JST
from wxcb.conn import connect

from userint import UserInt
from struct import pack


class Id(UserInt):
    r"""Id

    Id is a UserInt.
    Responsibility:
    """

    def __repr__(self):
        return '{0.__class__.__name__}({0._value})'.format(self)

    def __str__(self, ):
        return '{0._value})'.format(self)

    def kill_client(self, display):
        r"""SUMMARY

        kill_client(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        return connect(display).core.KillClient(self._value)

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:

        @Error:
        """
        return pack('I', self._value)

    def getgeometry(self, display):
        r"""SUMMARY

        getgeometry(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        return connect(display).core.GetGeometry(self._value)

    def createpixmap(self, display, depth, pid, width, height):
        r"""SUMMARY

        createpixmap(display, depth, pid, width, height)

        @Arguments:
        - `display`:
        - `depth`:
        - `pid`:
        - `width`:
        - `height`:

        @Return:

        @Error:
        """
        return connect(display).core.CreatePixmap(
            depth, pid, self._value, width, height)

    def creategc(self, display, cid, value_mask, value_list):
        r"""SUMMARY

        creategc(display, cid, value_mask, value_list)

        @Arguments:
        - `display`:
        - `cid`:
        - `value_mask`:
        - `value_list`:

        @Return:

        @Error:
        """
        return connect(display).core.CreateGC(
            cid, self._value, value_mask, value_list)

    def copyarea(self, display, gc, dst_drawable, src_x, src_y, width, height,
                 dst_x, dst_y):
        r"""SUMMARY

        copyarea(display, gc, dst_drawable, src_x, src_y, width, height, dst_x, dst_y)

        @Arguments:
        - `display`:
        - `gc`:
        - `dst_drawable`:
        - `src_x`:
        - `src_y`:
        - `width`:
        - `height`:
        - `dst_x`:
        - `dst_y`:

        @Return:

        @Error:
        """
        return connect(display).core.CopyArea(
            self._value, dst_drawable, gc, src_x, src_y, dst_x, dst_y,
            width, height)

    def copyplane(self, display, gc, dst_drawable, src_x, src_y, width, height,
                   dst_x, dst_y, bit_plane):
        r"""SUMMARY

        copyplane(display, gc, dst_drawable, src_x, src_y, width, height,
                   dst_x, dst_y, bit_plane)

        @Arguments:
        - `display`:
        - `gc`:
        - `dst_drawable`:
        - `src_x`:
        - `src_y`:
        - `width`:
        - `height`:
        - `dst_x`:
        - `dst_y`:
        - `bit_plane`:

        @Return:

        @Error:
        """
        return connect(display).core.CopyPlane(
            self._value, gc, dst_drawable, src_x, src_y, width, height,
            dst_x, dst_y, bit_plane)

    def polypoint(self, display, coordinate_mode, gc, points_len, points):
        r"""SUMMARY

        polypoint(display, coordinate_mode, gc, points_len, points)

        @Arguments:
        - `display`:
        - `coordinate_mode`:
        - `gc`:
        - `points_len`:
        - `points`:

        @Return:

        @Error:
        """
        return connect(display).core.PolyPoint(
            coordinate_mode, self._value, gc, points_len, points)

    def polyline(self, display, coordinate_mode, gc, points_len, points):
        r"""SUMMARY

        polyline(display, coordinate_mode, gc, points_len, points)

        @Arguments:
        - `display`:
        - `coordinate_mode`:
        - `gc`:
        - `points_len`:
        - `points`:

        @Return:

        @Error:
        """
        return connect(display).core.PolyLine(
            coordinate_mode, self._value, gc, points_len, points)

    def polysegment(self, display, gc, segments_len, segments):
        r"""SUMMARY

        polysegment(display, gc, segments_len, segments)

        @Arguments:
        - `display`:
        - `gc`:
        - `segments_len`:
        - `segments`:

        @Return:

        @Error:
        """
        return connect(display).core.PolySegment(
            self._value, gc, segments_len, segments)

    def polyrectangle(self, display, gc, rectangles_len, rectangles):
        r"""SUMMARY

        polyrectangle(display, gc, rectangles_len, rectangles)

        @Arguments:
        - `display`:
        - `gc`:
        - `rectangles_len`:
        - `rectangles`:

        @Return:

        @Error:
        """
        return connect(display).core.PolyRectangle(
            self._value, gc, rectangles_len, rectangles)

    def polyarc(self, display, gc, arcs_len, arcs):
        r"""SUMMARY

        polyarc(display, gc, arcs_len, arcs)

        @Arguments:
        - `display`:
        - `gc`:
        - `arcs_len`:
        - `arcs`:

        @Return:

        @Error:
        """
        return connect(display).core.PolyArc(self._value, gc, arcs_len, arcs)

    def fillpoly(self, display, gc, shape, coordinate_mode, points_len, points):
        r"""SUMMARY

        fillpoly(display, gc, shape, coordinate_mode, points_len, points)

        @Arguments:
        - `display`:
        - `gc`:
        - `shape`:
        - `coordinate_mode`:
        - `points_len`:
        - `points`:

        @Return:

        @Error:
        """
        return connect(display).core.FillPoly(
            self._value, gc, shape, coordinate_mode, points_len, points)

    def polyfillrectangle(self, display, gc, rectangles_len, rectangles):
        r"""SUMMARY

        polyfillrectangle(display, gc, rectangles_len, rectangles)

        @Arguments:
        - `display`:
        - `gc`:
        - `rectangles_len`:
        - `rectangles`:

        @Return:

        @Error:
        """
        return connect(display).core.PolyFillRectangle(
            self._value, gc, rectangles_len, rectangles)

    def polyfillarc(self, display, gc, arcs_len, arcs):
        r"""SUMMARY

        polyfillarc(display, gc, arcs_len, arcs)

        @Arguments:
        - `display`:
        - `gc`:
        - `arcs_len`:
        - `arcs`:

        @Return:

        @Error:
        """
        return connect(display).core.PolyFillArc(
            self._value, gc, arcs_len, arcs)

    def putimage(self, display, format, gc, width, height, dst_x, dst_y,
                 left_pad, depth, data_len, data):
        r"""SUMMARY

        putimage(display, format, gc, width, height, dst_x, dst_y, left_pad,
                  depth, data_len, data)

        @Arguments:
        - `display`:
        - `format`:
        - `gc`:
        - `width`:
        - `height`:
        - `dst_x`:
        - `dst_y`:
        - `left_pad`:
        - `depth`:
        - `data_len`:
        - `data`:

        @Return:

        @Error:
        """
        return connect(display).core.PutImage(
            format, self._value, gc, width, height, dst_x, dst_y, left_pad,
            depth, data_len, data)

    def getimage(self, display, format, x, y, width, height, plane_mask):
        r"""SUMMARY

        getimage(display, format, x, y, width, height, plane_mask)

        @Arguments:
        - `display`:
        - `format`:
        - `x`:
        - `y`:
        - `width`:
        - `height`:
        - `plane_mask`:

        @Return:

        @Error:
        """
        return connect(display).core.GetImage(
            format, self._value, x, y, width, height, plane_mask)

    def polytext8(self, display, gc, x, y, items_len, items):
        r"""SUMMARY

        polytext8(display, gc, x, y, items_len, items)

        @Arguments:
        - `display`:
        - `gc`:
        - `x`:
        - `y`:
        - `items_len`:
        - `items`:

        @Return:

        @Error:
        """
        return connect(display).core.PolyText8(
             self._value, gc, x, y, items_len, items)

    def polytext16(self, display, gc, x, y, items_len, items):
        r"""SUMMARY

        polytext16(display, gc, x, y, items_len, items)

        @Arguments:
        - `display`:
        - `gc`:
        - `x`:
        - `y`:
        - `items_len`:
        - `items`:

        @Return:

        @Error:
        """
        return connect(display).core.PolyText16(
             self._value, gc, x, y, items_len, items)

    def imagetext8(self, display, string_len, gc, x, y, string):
        r"""SUMMARY

        imagetext8(display, string_len, gc, x, y, string)

        @Arguments:
        - `display`:
        - `string_len`:
        - `gc`:
        - `x`:
        - `y`:
        - `string`:

        @Return:

        @Error:
        """
        return connect(display).core.ImageText8(
            string_len, self._value, gc, x, y, string)

    def imagetext16(self, display, string_len, gc, x, y, string):
        r"""SUMMARY

        imagetext16(display, string_len, gc, x, y, string)

        @Arguments:
        - `display`:
        - `string_len`:
        - `gc`:
        - `x`:
        - `y`:
        - `string`:

        @Return:

        @Error:
        """
        return connect(display).core.ImageText16(
            string_len, self._value, gc, x, y, string)

    def querybestsize(self, display, _class, width, height):
        r"""SUMMARY

        querybestsize(display, _class, width, height)

        @Arguments:
        - `display`:
        - `_class`:
        - `width`:
        - `height`:

        @Return:

        @Error:
        """
        return connect(display).core.QueryBestSize(
            _class, self._value, width, height)

    def createwindow(self, display, depth, parent, x, y, width, height,
                     border_width, class_, visual, value_mask, value_list):
        r"""SUMMARY

        createwindow(display, depth, parent, x, y, width, height, border_width,
                     class_, visual, value_mask, value_list)

        @Arguments:
        - `display`:
        - `depth`:
        - `parent`:
        - `x`:
        - `y`:
        - `width`:
        - `height`:
        - `border_width`:
        - `class_`:
        - `visual`:
        - `value_mask`:
        - `value_list`:

        @Return:

        @Error:
        """
        return connect(display).core.CreateWindow(
            depth, self._value, parent, x, y, width, height, border_width,
            class_, visual, value_mask, value_list)

    def configurewindow(self, display, value_mask, value_list):
        r"""SUMMARY

        configurewindow(display, value_mask, value_list)

        @Arguments:
        - `display`:
        - `value_mask`:
        - `value_list`:

        @Return:

        @Error:
        """
        return connect(display).core.ConfigureWindow(
            self._value, value_mask, value_list)

    def cleararea(self, display, exposures, x, y, width, height):
        r"""SUMMARY

        cleararea(display, exposures, x, y, width, height)

        @Arguments:
        - `display`:
        - `exposures`:
        - `x`:
        - `y`:
        - `width`:
        - `height`:

        @Return:

        @Error:
        """
        return connect(display).core.ClearArea(
            exposures, self._value, x, y, width, height)

    def reparentwindow(self, display, parent, x, y):
        r"""SUMMARY

        reparentwindow(display, parent, x, y)

        @Arguments:
        - `display`:
        - `parent`:
        - `x`:
        - `y`:

        @Return:

        @Error:
        """
        return connect(display).core.ReparentWindow(
            self._value, parent, x, y)

    def getwindowattributes(self, display):
        r"""SUMMARY

        getwindowattributes(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        return connect(display).core.GetWindowAttributes(self._value)

    def changewindowattributes(self, display, value_mask, value_list):
        r"""SUMMARY

        changewindowattributes(display, value_mask, value_list)

        @Arguments:
        - `display`:
        - `value_mask`:
        - `value_list`:

        @Return:

        @Error:
        """
        return connect(display).core.ChangeWindowAttributes(
            self._value, value_mask, value_list)

    def createcolormap(self, display, alloc, mid, visual):
        r"""SUMMARY

        createcolormap(display, alloc, mid, visual)

        @Arguments:
        - `display`:
        - `alloc`:
        - `mid`:
        - `visual`:

        @Return:

        @Error:
        """
        return connect(display).core.CreateColormap(
            alloc, mid, self._value, visual)

    def listinstalledcolormaps(self, display):
        r"""SUMMARY

        listinstalledcolormaps(display)

        @Return:

        @Error:
        """
        return connect(display).core.ListInstalledColormaps(self._value)

    def circulatewindow(self, display, direction):
        r"""SUMMARY

        circulatewindow(display, direction)

        @Arguments:
        - `display`:
        - `direction`:

        @Return:

        @Error:
        """
        return connect(display).core.CirculateWindow(
            direction, self._value)

    def circulatewindow(self, display, direction):
        r"""SUMMARY

        circulatewindow(display, direction)

        @Arguments:
        - `display`:
        - `direction`:

        @Return:

        @Error:
        """
        return connect(display).core.CirculateWindow(direction, self._value)

    def changesaveset(self, display, mode):
        r"""SUMMARY

        changesaveset(display, mode)

        @Arguments:
        - `display`:
        - `mode`:

        @Return:

        @Error:
        """
        return connect(display).core.ChangeSaveSet(mode, self._value)

    def convertselection(self, display, requestor, selection, property, time):
        r"""SUMMARY

        convertselection(display, requestor, selection, property, time)

        @Arguments:
        - `display`:
        - `requestor`:
        - `selection`:
        - `property`:
        - `time`:

        @Return:

        @Error:
        """
        return connect(display).core.ConvertSelection(
            requestor, selection, self._value, property, time)

    def translatecoordinates(self, display, dst_window, src_x, src_y):
        r"""SUMMARY

        translatecoordinates(display, dst_window, src_x, src_y)

        @Arguments:
        - `display`:
        - `dst_window`:
        - `src_x`:
        - `src_y`:

        @Return:

        @Error:
        """
        return connect(display).core.TranslateCoordinates(
            self._value, dst_window, src_x, src_y)

    def getmotionevents(self, display, start, stop):
        r"""SUMMARY

        getmotionevents(display, start, stop)

        @Arguments:
        - `display`:
        - `start`:
        - `stop`:

        @Return:

        @Error:
        """
        return connect(display).core.GetMotionEvents(self._value, start, stop)

    def setinputfocus(self, display, revert_to, time):
        r"""SUMMARY

        setinputfocus(display, revert_to, time)

        @Arguments:
        - `display`:
        - `revert_to`:
        - `time`:

        @Return:

        @Error:
        """
        return connect(display).core.SetInputFocus(revert_to, self._value, time)

    def setselectionowner(self, display, owner, time):
        r"""SUMMARY

        setselectionowner(display, owner, time)

        @Arguments:
        - `display`:
        - `owner`:
        - `time`:

        @Return:

        @Error:
        """
        return connect(display).core.SetSelectionOwner(owner, self._value, time)

    def sendevent(self, display, propagate, event_mask, event):
        r"""SUMMARY

        sendevent(display, propagate, event_mask, event)

        @Arguments:
        - `display`:
        - `propagate`:
        - `event_mask`:
        - `event`:

        @Return:

        @Error:
        """
        return connect(display).core.SendEvent(
            propagate, self._value, event_mask, event)

    def mapwindow(self, display):
        r"""SUMMARY

        mapwindow(display)

        @Return:

        @Error:
        """
        return connect(display).core.MapWindow(self._value)

    def mapsubwindows(self, display):
        r"""SUMMARY

        mapsubwindows(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        return connect(display).core.MapSubwindows(self._value)

    def unmapwindow(self, display):
        r"""SUMMARY

        unmapwindow(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        return connect(display).core.UnmapWindow(self._value)

    def unmapsubwindows(self, display):
        r"""SUMMARY

        unmapsubwindows(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        return connect(display).core.UnmapSubwindows(self._value)

    def destroywindow(self, display):
        r"""SUMMARY

        destroywindow(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        return connect(display).core.DestroyWindow(self._value)

    def destroysubwindows(self, display):
        r"""SUMMARY

        destroysubwindows(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        return connect(display).core.DestroySubwindows(self._value)

    def querytree(self, display):
        r"""SUMMARY

        querytree(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        return connect(display).core.QueryTree(self._value)

    def getproperty(self, display, delete, property, type, long_offset,
                    long_length):
        r"""SUMMARY

        getproperty(display, delete, property, type, long_offset, long_length)

        @Arguments:
        - `display`:
        - `delete`:
        - `property`:
        - `type`:
        - `long_offset`:
        - `long_length`:

        @Return:

        @Error:
        """
        return connect(display).core.GetProperty(
            delete, self._value, property, type, long_offset, long_length)

    def changeproperty(self, display, mode, property, type, format, data_len,
                       data):
        r"""SUMMARY

        changeproperty(display, mode, property, type, format, data_len, data)

        @Arguments:
        - `display`:
        - `mode`:
        - `property`:
        - `type`:
        - `format`:
        - `data_len`:
        - `data`:

        @Return:

        @Error:
        """
        return connect(display).core.ChangeProperty(
            mode, self._value, property, type, format, data_len, data)

    def listproperties(self, display):
        r"""SUMMARY

        listproperties(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        return connect(display).core.ListProperties(self._value)

    def deleteproperty(self, display, property):
        r"""SUMMARY

        deleteproperty(display, property)

        @Arguments:
        - `display`:
        - `property`:

        @Return:

        @Error:
        """
        return connect(display).core.DeleteProperty(
            self._value, property)

    def rotateproperties(self, display, atoms_len, delta, atoms):
        r"""SUMMARY

        rotateproperties(display, atoms_len, delta, atoms)

        @Arguments:
        - `display`:
        - `atoms_len`:
        - `delta`:
        - `atoms`:

        @Return:

        @Error:
        """
        return connect(display).core.RotateProperties(
            self._value, atoms_len, delta, atoms)

    def grabkeyboard(self, display, owner_events, time, pointer_mode,
                     keyboard_mode):
        r"""SUMMARY

        grabkeyboard(display, owner_events, time, pointer_mode, keyboard_mode)

        @Arguments:
        - `display`:
        - `owner_events`:
        - `time`:
        - `pointer_mode`:
        - `keyboard_mode`:

        @Return:

        @Error:
        """
        return connect(display).core.GrabKeyboard(
            owner_events, self._value, time, pointer_mode, keyboard_mode)

    def grabkey(self, display, owner_events, modifiers, key, pointer_mode,
                keyboard_mode):
        r"""SUMMARY

        grabkey(display, owner_events, modifiers, key, pointer_mode, keyboard_mode)

        @Arguments:
        - `display`:
        - `owner_events`:
        - `modifiers`:
        - `key`:
        - `pointer_mode`:
        - `keyboard_mode`:

        @Return:

        @Error:
        """
        return connect(display).core.GrabKey(
            owner_events, self._value, modifiers, key, pointer_mode,
            keyboard_mode)

    def ungrabkey(self, display, key, modifiers):
        r"""SUMMARY

        ungrabkey(display, key, modifiers)

        @Arguments:
        - `display`:
        - `key`:
        - `modifiers`:

        @Return:

        @Error:
        """
        return connect(display).core.UngrabKey(key, self._value, modifiers)

    def grabbutton(self, display, owner_events, event_mask, pointer_mode,
                   keyboard_mode, confine_to, cursor, button, modifiers):
        r"""SUMMARY

        grabbutton(display,owner_events, event_mask, pointer_mode, keyboard_mode,
                   confine_to, cursor, button, modifiers)

        @Arguments:
        - `owner_events`:
        - `event_mask`:
        - `pointer_mode`:
        - `keyboard_mode`:
        - `confine_to`:
        - `cursor`:
        - `button`:
        - `modifiers`:

        @Return:

        @Error:
        """
        return connect(display).core.GrabButton(
            owner_events, self._value, event_mask, pointer_mode, keyboard_mode,
            confine_to, cursor, button, modifiers)

    def ungrabbutton(self, display, button, modifiers):
        r"""SUMMARY

        ungrabbutton(display, button, modifiers)

        @Arguments:
        - `display`:
        - `button`:
        - `modifiers`:

        @Return:

        @Error:
        """
        return connect(display).core.UngrabButton(
            button, self._value, modifiers)

    def grabpointer(self, display, owner_events, event_mask, pointer_mode,
                    keyboard_mode, confine_to, cursor, time):
        r"""SUMMARY

        grabpointer(display, owner_events, event_mask, pointer_mode,
                    keyboard_mode, confine_to, cursor, time)

        @Arguments:
        - `display`:
        - `owner_events`:
        - `event_mask`:
        - `pointer_mode`:
        - `keyboard_mode`:
        - `confine_to`:
        - `cursor`:
        - `time`:

        @Return:

        @Error:
        """
        return connect(display).core.GrabPointer(
            owner_events, self._value, event_mask, pointer_mode, keyboard_mode,
            confine_to, cursor, time)

    def querypointer(self, display):
        r"""SUMMARY

        querypointer(display)

        @Arguments:
        - `display`:

        @Return:

        @Error:
        """
        return connect(display).core.GrabPointer(self._value)

    def warppointer(self, display, dst_window, src_x, src_y, src_width,
                    src_height, dst_x, dst_y):
        r"""SUMMARY

        warppointer(display, dst_window, src_x, src_y, src_width, src_height,
                    dst_x, dst_y)

        @Arguments:
        - `display`:
        - `dst_window`:
        - `src_x`:
        - `src_y`:
        - `src_width`:
        - `src_height`:
        - `dst_x`:
        - `dst_y`:

        @Return:

        @Error:
        """
        return connect(display).core.WarpPointer(
            self._value, dst_window, src_x, src_y, src_width, src_height,
            dst_x, dst_y)

* Fri 30 Jan 2015 09:29:31 AM JST
from userint import UserInt
from struct import pack

* Fri 30 Jan 2015 09:32:12 AM JST
 = int(id_)
* Fri 30 Jan 2015 09:32:27 AM JST
wxcb.conn.connect(self.display).core.KillClientChecked(self.id)
* Fri 30 Jan 2015 09:32:46 AM JST
display
* Fri 30 Jan 2015 09:35:33 AM JST

* Fri 30 Jan 2015 09:35:34 AM JST

* Fri 30 Jan 2015 09:35:34 AM JST
        return wxcb.conn.connect(self.display).core.GetGeometryUnchecked(self)

* Fri 30 Jan 2015 09:36:52 AM JST
cid, value_mask, value_list
* Fri 30 Jan 2015 09:37:17 AM JST
gc, dst_drawable, src_x, src_y, width, height,
                  dst_x, dst_y
* Fri 30 Jan 2015 09:37:23 AM JST
            
* Fri 30 Jan 2015 09:39:00 AM JST
gc, dst_drawable, src_x, src_y, width, height,
            dst_x, dst_y
* Fri 30 Jan 2015 09:39:29 AM JST
coordinate_mode, gc, points_len, points
* Fri 30 Jan 2015 09:40:25 AM JST
coordinate_mode, gc, points_len, points
* Fri 30 Jan 2015 09:40:38 AM JST
polysegment
* Fri 30 Jan 2015 09:41:04 AM JST
gc, segments_len, segments
* Fri 30 Jan 2015 09:41:32 AM JST
gc, rectangles_len, rectangles
* Fri 30 Jan 2015 09:41:58 AM JST
gc, arcs_len, arcs
* Fri 30 Jan 2015 09:42:26 AM JST
gc, shape, coordinate_mode, points_len, points
* Fri 30 Jan 2015 09:42:55 AM JST
gc, rectangles_len, rectangles
* Fri 30 Jan 2015 09:43:49 AM JST
gc, arcs_len, arcs
* Fri 30 Jan 2015 09:44:04 AM JST
self
* Fri 30 Jan 2015 09:44:12 AM JST
format, gc, width, height, dst_x, dst_y, left_pad,
                  depth, data_len, data
* Fri 30 Jan 2015 09:44:15 AM JST
                  
* Fri 30 Jan 2015 09:44:39 AM JST
format, x, y, width, height, plane_mask
* Fri 30 Jan 2015 09:44:59 AM JST
gc, x, y, items_len, items
* Fri 30 Jan 2015 09:45:01 AM JST
            
* Fri 30 Jan 2015 09:45:23 AM JST
gc, x, y, items_len, items
* Fri 30 Jan 2015 09:45:40 AM JST
string_len, gc, x, y, string
* Fri 30 Jan 2015 09:46:03 AM JST
string_len, gc, x, y, string
* Fri 30 Jan 2015 09:46:05 AM JST

* Fri 30 Jan 2015 09:46:05 AM JST

* Fri 30 Jan 2015 09:46:05 AM JST
        return wxcb.conn.connect(self.display).core.ImageText16Checked(

* Fri 30 Jan 2015 09:46:05 AM JST
        return wxcb.conn.connect(self.display).core.ImageText16Checked(

* Fri 30 Jan 2015 09:46:05 AM JST
        return wxcb.conn.connect(self.display).core.ImageText16Checked(
            string_len, self.id, gc, x, y, string)

* Fri 30 Jan 2015 09:46:49 AM JST
_class, width, height
* Fri 30 Jan 2015 09:46:52 AM JST

* Fri 30 Jan 2015 09:46:52 AM JST

* Fri 30 Jan 2015 09:46:52 AM JST
        return wxcb.conn.connect(self.display).core.QueryBestSizeUnchecked(

* Fri 30 Jan 2015 09:46:52 AM JST
        return wxcb.conn.connect(self.display).core.QueryBestSizeUnchecked(

* Fri 30 Jan 2015 09:46:52 AM JST
        return wxcb.conn.connect(self.display).core.QueryBestSizeUnchecked(
            _class, self.id, width, height)

* Fri 30 Jan 2015 09:48:27 AM JST
depth, parent, x, y, width, height, border_width,
               class_, visual, value_mask, value_list
* Fri 30 Jan 2015 09:48:35 AM JST
            
* Fri 30 Jan 2015 09:49:27 AM JST
exposures, x, y, width, height
* Fri 30 Jan 2015 09:49:31 AM JST

* Fri 30 Jan 2015 09:49:31 AM JST

* Fri 30 Jan 2015 09:49:31 AM JST
        return wxcb.conn.connect(self.display).core.ClearAreaChecked(

* Fri 30 Jan 2015 09:49:31 AM JST
        return wxcb.conn.connect(self.display).core.ClearAreaChecked(

* Fri 30 Jan 2015 09:49:31 AM JST
        return wxcb.conn.connect(self.display).core.ClearAreaChecked(
            exposures, self.id, x, y, width, height)

* Fri 30 Jan 2015 09:50:35 AM JST
parent, x, y
* Fri 30 Jan 2015 09:50:38 AM JST

* Fri 30 Jan 2015 09:50:38 AM JST

* Fri 30 Jan 2015 09:50:38 AM JST
        return wxcb.conn.connect(self.display).core.ReparentWindowChecked(

* Fri 30 Jan 2015 09:50:38 AM JST
        return wxcb.conn.connect(self.display).core.ReparentWindowChecked(

* Fri 30 Jan 2015 09:50:38 AM JST
        return wxcb.conn.connect(self.display).core.ReparentWindowChecked(
            self.id, parent, x, y)

* Fri 30 Jan 2015 09:51:01 AM JST

* Fri 30 Jan 2015 09:51:01 AM JST

* Fri 30 Jan 2015 09:51:01 AM JST
        return wxcb.conn.connect(self.display).core.GetWindowAttributesUnchecked(

* Fri 30 Jan 2015 09:51:01 AM JST
        return wxcb.conn.connect(self.display).core.GetWindowAttributesUnchecked(

* Fri 30 Jan 2015 09:51:01 AM JST
        return wxcb.conn.connect(self.display).core.GetWindowAttributesUnchecked(
            self.id)

* Fri 30 Jan 2015 09:51:54 AM JST

* Fri 30 Jan 2015 09:51:54 AM JST

* Fri 30 Jan 2015 09:51:54 AM JST
        return wxcb.conn.connect(self.display).core.CreateColormapChecked(

* Fri 30 Jan 2015 09:51:54 AM JST
        return wxcb.conn.connect(self.display).core.CreateColormapChecked(

* Fri 30 Jan 2015 09:51:54 AM JST
        return wxcb.conn.connect(self.display).core.CreateColormapChecked(
            alloc, mid, self.id, visual)

* Fri 30 Jan 2015 09:52:51 AM JST

* Fri 30 Jan 2015 09:52:51 AM JST

* Fri 30 Jan 2015 09:52:51 AM JST
        return wxcb.conn.connect(self.display).core.ListInstalledColormapsUnchecked(

* Fri 30 Jan 2015 09:52:52 AM JST
        return wxcb.conn.connect(self.display).core.ListInstalledColormapsUnchecked(

* Fri 30 Jan 2015 09:52:52 AM JST
        return wxcb.conn.connect(self.display).core.ListInstalledColormapsUnchecked(
            self.id)

* Fri 30 Jan 2015 09:53:17 AM JST

* Fri 30 Jan 2015 09:53:17 AM JST

* Fri 30 Jan 2015 09:53:17 AM JST
        return wxcb.conn.connect(self.display).core.CirculateWindowChecked(

* Fri 30 Jan 2015 09:53:17 AM JST
        return wxcb.conn.connect(self.display).core.CirculateWindowChecked(

* Fri 30 Jan 2015 09:53:17 AM JST
        return wxcb.conn.connect(self.display).core.CirculateWindowChecked(
            direction, self.id)

* Fri 30 Jan 2015 09:53:38 AM JST

* Fri 30 Jan 2015 09:53:38 AM JST

* Fri 30 Jan 2015 09:53:39 AM JST
        return wxcb.conn.connect(self.display).core.ChangeSaveSetChecked(

* Fri 30 Jan 2015 09:53:39 AM JST
        return wxcb.conn.connect(self.display).core.ChangeSaveSetChecked(

* Fri 30 Jan 2015 09:53:39 AM JST
        return wxcb.conn.connect(self.display).core.ChangeSaveSetChecked(
            mode, self.id)

* Fri 30 Jan 2015 09:54:35 AM JST
requestor, selection, property, time
* Fri 30 Jan 2015 09:54:41 AM JST

* Fri 30 Jan 2015 09:54:41 AM JST

* Fri 30 Jan 2015 09:54:41 AM JST
        return wxcb.conn.connect(self.display).core.ConvertSelectionChecked(

* Fri 30 Jan 2015 09:54:41 AM JST
        return wxcb.conn.connect(self.display).core.ConvertSelectionChecked(

* Fri 30 Jan 2015 09:54:41 AM JST
        return wxcb.conn.connect(self.display).core.ConvertSelectionChecked(
            requestor, selection, self.id, property, time)

* Fri 30 Jan 2015 09:55:06 AM JST
dst_window, src_x, src_y
* Fri 30 Jan 2015 09:55:09 AM JST

* Fri 30 Jan 2015 09:55:09 AM JST

* Fri 30 Jan 2015 09:55:09 AM JST
        return wxcb.conn.connect(self.display).core.TranslateCoordinatesUnchecked(

* Fri 30 Jan 2015 09:55:09 AM JST
        return wxcb.conn.connect(self.display).core.TranslateCoordinatesUnchecked(

* Fri 30 Jan 2015 09:55:09 AM JST
        return wxcb.conn.connect(self.display).core.TranslateCoordinatesUnchecked(
            self.id, dst_window, src_x, src_y)

* Fri 30 Jan 2015 09:55:34 AM JST

* Fri 30 Jan 2015 09:55:35 AM JST

* Fri 30 Jan 2015 09:55:35 AM JST
        return wxcb.conn.connect(self.display).core.GetMotionEventsUnchecked(

* Fri 30 Jan 2015 09:55:35 AM JST
        return wxcb.conn.connect(self.display).core.GetMotionEventsUnchecked(

* Fri 30 Jan 2015 09:55:35 AM JST
        return wxcb.conn.connect(self.display).core.GetMotionEventsUnchecked(
            self.id, start, stop)

* Fri 30 Jan 2015 09:55:55 AM JST

* Fri 30 Jan 2015 09:55:55 AM JST

* Fri 30 Jan 2015 09:55:55 AM JST
        return wxcb.conn.connect(self.display).core.SetInputFocusChecked(

* Fri 30 Jan 2015 09:55:55 AM JST
        return wxcb.conn.connect(self.display).core.SetInputFocusChecked(

* Fri 30 Jan 2015 09:55:55 AM JST
        return wxcb.conn.connect(self.display).core.SetInputFocusChecked(
            revert_to, self.id, time)

* Fri 30 Jan 2015 09:56:21 AM JST
owner, time
* Fri 30 Jan 2015 09:56:25 AM JST

* Fri 30 Jan 2015 09:56:25 AM JST

* Fri 30 Jan 2015 09:56:25 AM JST
        return wxcb.conn.connect(self.display).core.SetSelectionOwnerChecked(

* Fri 30 Jan 2015 09:56:25 AM JST
        return wxcb.conn.connect(self.display).core.SetSelectionOwnerChecked(

* Fri 30 Jan 2015 09:56:25 AM JST
        return wxcb.conn.connect(self.display).core.SetSelectionOwnerChecked(
            owner, self.id, time)

* Fri 30 Jan 2015 09:56:39 AM JST
propagate, event_mask, event
* Fri 30 Jan 2015 09:56:42 AM JST

* Fri 30 Jan 2015 09:56:42 AM JST

* Fri 30 Jan 2015 09:56:42 AM JST
        return wxcb.conn.connect(self.display).core.SendEventChecked(

* Fri 30 Jan 2015 09:56:42 AM JST
        return wxcb.conn.connect(self.display).core.SendEventChecked(

* Fri 30 Jan 2015 09:56:42 AM JST
        return wxcb.conn.connect(self.display).core.SendEventChecked(
            propagate, self.id, event_mask, event)

* Fri 30 Jan 2015 09:57:02 AM JST

* Fri 30 Jan 2015 09:57:02 AM JST

* Fri 30 Jan 2015 09:57:02 AM JST
        return wxcb.conn.connect(self.display).core.MapWindowChecked(self.id)

* Fri 30 Jan 2015 09:57:41 AM JST

* Fri 30 Jan 2015 09:57:41 AM JST

* Fri 30 Jan 2015 09:57:41 AM JST
        return wxcb.conn.connect(self.display).core.MapSubwindowsChecked(self.id)

* Fri 30 Jan 2015 09:58:00 AM JST
unmapsubwindows
* Fri 30 Jan 2015 09:58:06 AM JST

* Fri 30 Jan 2015 09:58:06 AM JST

* Fri 30 Jan 2015 09:58:07 AM JST
        return wxcb.conn.connect(self.display).core.UnmapWindowChecked(self.id)

* Fri 30 Jan 2015 09:58:23 AM JST

* Fri 30 Jan 2015 09:58:23 AM JST

* Fri 30 Jan 2015 09:58:23 AM JST
        return wxcb.conn.connect(self.display).core.UnmapSubwindowsChecked(self.id)

* Fri 30 Jan 2015 09:58:50 AM JST

* Fri 30 Jan 2015 09:58:50 AM JST

* Fri 30 Jan 2015 09:58:50 AM JST
        return wxcb.conn.connect(self.display).core.DestroyWindowChecked(self.id)

* Fri 30 Jan 2015 09:59:03 AM JST

* Fri 30 Jan 2015 09:59:03 AM JST

* Fri 30 Jan 2015 09:59:03 AM JST
        return wxcb.conn.connect(self.display).core.DestroySubwindowsChecked(

* Fri 30 Jan 2015 09:59:03 AM JST
        return wxcb.conn.connect(self.display).core.DestroySubwindowsChecked(

* Fri 30 Jan 2015 09:59:03 AM JST
        return wxcb.conn.connect(self.display).core.DestroySubwindowsChecked(
            self.id)

* Fri 30 Jan 2015 09:59:17 AM JST

* Fri 30 Jan 2015 09:59:18 AM JST

* Fri 30 Jan 2015 09:59:18 AM JST
        return wxcb.conn.connect(self.display).core.QueryTreeUnchecked(self.id)

* Fri 30 Jan 2015 09:59:48 AM JST
delete, property, type, long_offset, long_length
* Fri 30 Jan 2015 09:59:51 AM JST

* Fri 30 Jan 2015 09:59:51 AM JST

* Fri 30 Jan 2015 09:59:52 AM JST
        return wxcb.conn.connect(self.display).core.GetPropertyUnchecked(

* Fri 30 Jan 2015 09:59:52 AM JST
        return wxcb.conn.connect(self.display).core.GetPropertyUnchecked(

* Fri 30 Jan 2015 09:59:52 AM JST
        return wxcb.conn.connect(self.display).core.GetPropertyUnchecked(
            delete, self.id, property, type, long_offset, long_length)

* Fri 30 Jan 2015 10:00:12 AM JST
mode, property, type, format, data_len, data
* Fri 30 Jan 2015 10:00:15 AM JST

* Fri 30 Jan 2015 10:00:15 AM JST

* Fri 30 Jan 2015 10:00:15 AM JST
        return wxcb.conn.connect(self.display).core.ChangePropertyChecked(

* Fri 30 Jan 2015 10:00:15 AM JST
        return wxcb.conn.connect(self.display).core.ChangePropertyChecked(

* Fri 30 Jan 2015 10:00:15 AM JST
        return wxcb.conn.connect(self.display).core.ChangePropertyChecked(
            mode, self.id, property, type, format, data_len, data)

* Fri 30 Jan 2015 10:00:29 AM JST

* Fri 30 Jan 2015 10:00:29 AM JST

* Fri 30 Jan 2015 10:00:29 AM JST
        return wxcb.conn.connect(self.display).core.ListPropertiesUnchecked(self.id)

* Fri 30 Jan 2015 10:00:35 AM JST
returnself.
* Fri 30 Jan 2015 10:01:44 AM JST

* Fri 30 Jan 2015 10:01:44 AM JST

* Fri 30 Jan 2015 10:01:44 AM JST
        return wxcb.conn.connect(self.display).core.DeletePropertyChecked(

* Fri 30 Jan 2015 10:01:44 AM JST
        return wxcb.conn.connect(self.display).core.DeletePropertyChecked(

* Fri 30 Jan 2015 10:01:44 AM JST
        return wxcb.conn.connect(self.display).core.DeletePropertyChecked(
            self.id, property)

* Fri 30 Jan 2015 10:02:03 AM JST
atoms_len, delta, atoms
* Fri 30 Jan 2015 10:02:07 AM JST

* Fri 30 Jan 2015 10:02:07 AM JST

* Fri 30 Jan 2015 10:02:07 AM JST
        return wxcb.conn.connect(self.display).core.RotatePropertiesChecked(

* Fri 30 Jan 2015 10:02:07 AM JST
        return wxcb.conn.connect(self.display).core.RotatePropertiesChecked(

* Fri 30 Jan 2015 10:02:07 AM JST
        return wxcb.conn.connect(self.display).core.RotatePropertiesChecked(
            self.id, atoms_len, delta, atoms)

* Fri 30 Jan 2015 10:02:37 AM JST
owner_events, time, pointer_mode, keyboard_mode
* Fri 30 Jan 2015 10:02:43 AM JST

* Fri 30 Jan 2015 10:02:43 AM JST

* Fri 30 Jan 2015 10:02:43 AM JST
        return wxcb.conn.connect(self.display).core.GrabKeyboardUnchecked(

* Fri 30 Jan 2015 10:02:43 AM JST
        return wxcb.conn.connect(self.display).core.GrabKeyboardUnchecked(

* Fri 30 Jan 2015 10:02:44 AM JST
        return wxcb.conn.connect(self.display).core.GrabKeyboardUnchecked(
            owner_events, self.id, time, pointer_mode, keyboard_mode)

* Fri 30 Jan 2015 10:03:01 AM JST
owner_events, modifiers, key,
                pointer_mode, keyboard_mode
* Fri 30 Jan 2015 10:03:07 AM JST

* Fri 30 Jan 2015 10:03:07 AM JST

* Fri 30 Jan 2015 10:03:07 AM JST
        return wxcb.conn.connect(self.display).core.GrabKeyChecked(

* Fri 30 Jan 2015 10:03:07 AM JST
        return wxcb.conn.connect(self.display).core.GrabKeyChecked(

* Fri 30 Jan 2015 10:03:08 AM JST
        return wxcb.conn.connect(self.display).core.GrabKeyChecked(
            owner_events, self.id, modifiers, key, pointer_mode, keyboard_mode)

* Fri 30 Jan 2015 10:03:22 AM JST

* Fri 30 Jan 2015 10:03:22 AM JST

* Fri 30 Jan 2015 10:03:22 AM JST
        return wxcb.conn.connect(self.display).core.UngrabKeyChecked(

* Fri 30 Jan 2015 10:03:22 AM JST
        return wxcb.conn.connect(self.display).core.UngrabKeyChecked(

* Fri 30 Jan 2015 10:03:22 AM JST
        return wxcb.conn.connect(self.display).core.UngrabKeyChecked(
            key, self.id, modifiers)

* Fri 30 Jan 2015 10:03:28 AM JST
self.
* Fri 30 Jan 2015 10:03:40 AM JST
owner_events, event_mask, pointer_mode,
                   keyboard_mode, confine_to, cursor, button, modifiers
* Fri 30 Jan 2015 10:03:45 AM JST
    
* Fri 30 Jan 2015 10:03:53 AM JST

* Fri 30 Jan 2015 10:03:53 AM JST

* Fri 30 Jan 2015 10:03:53 AM JST
        return wxcb.conn.connect(self.display).core.GrabButtonChecked(

* Fri 30 Jan 2015 10:03:54 AM JST
        return wxcb.conn.connect(self.display).core.GrabButtonChecked(

* Fri 30 Jan 2015 10:03:54 AM JST
        return wxcb.conn.connect(self.display).core.GrabButtonChecked(
            owner_events, self.id, event_mask, pointer_mode,

* Fri 30 Jan 2015 10:03:54 AM JST
        return wxcb.conn.connect(self.display).core.GrabButtonChecked(
            owner_events, self.id, event_mask, pointer_mode,

* Fri 30 Jan 2015 10:03:54 AM JST
        return wxcb.conn.connect(self.display).core.GrabButtonChecked(
            owner_events, self.id, event_mask, pointer_mode,
            keyboard_mode, confine_to, cursor, button, modifiers)

* Fri 30 Jan 2015 10:04:13 AM JST
button, modifiers
* Fri 30 Jan 2015 10:04:16 AM JST

* Fri 30 Jan 2015 10:04:16 AM JST

* Fri 30 Jan 2015 10:04:16 AM JST
        return wxcb.conn.connect(self.display).core.UngrabButtonChecked(

* Fri 30 Jan 2015 10:04:16 AM JST
        return wxcb.conn.connect(self.display).core.UngrabButtonChecked(

* Fri 30 Jan 2015 10:04:16 AM JST
        return wxcb.conn.connect(self.display).core.UngrabButtonChecked(
            button, self.id, modifiers)

* Fri 30 Jan 2015 10:04:33 AM JST
owner_events, event_mask, pointer_mode,
                    keyboard_mode, confine_to, cursor, time
* Fri 30 Jan 2015 10:04:42 AM JST
            
* Fri 30 Jan 2015 10:04:44 AM JST

* Fri 30 Jan 2015 10:04:44 AM JST

* Fri 30 Jan 2015 10:04:44 AM JST
        return wxcb.conn.connect(self.display).core.GrabPointerUnchecked(

* Fri 30 Jan 2015 10:04:44 AM JST
        return wxcb.conn.connect(self.display).core.GrabPointerUnchecked(

* Fri 30 Jan 2015 10:04:44 AM JST
        return wxcb.conn.connect(self.display).core.GrabPointerUnchecked(
            owner_events, self.id, event_mask, pointer_mode, keyboard_mode,

* Fri 30 Jan 2015 10:04:45 AM JST
        return wxcb.conn.connect(self.display).core.GrabPointerUnchecked(
            owner_events, self.id, event_mask, pointer_mode, keyboard_mode,

* Fri 30 Jan 2015 10:04:45 AM JST
        return wxcb.conn.connect(self.display).core.GrabPointerUnchecked(
            owner_events, self.id, event_mask, pointer_mode, keyboard_mode,
            confine_to, cursor, time)

* Fri 30 Jan 2015 10:04:59 AM JST

* Fri 30 Jan 2015 10:04:59 AM JST

* Fri 30 Jan 2015 10:04:59 AM JST
        return wxcb.conn.connect(self.display).core.QueryPointerUnchecked(self.id)

* Fri 30 Jan 2015 10:05:20 AM JST
dst_window, src_x, src_y, src_width,
                    src_height, dst_x, dst_y
* Fri 30 Jan 2015 10:05:24 AM JST
                    
* Fri 30 Jan 2015 10:05:31 AM JST

* Fri 30 Jan 2015 10:05:31 AM JST

* Fri 30 Jan 2015 10:05:31 AM JST
        return wxcb.conn.connect(self.display).core.WarpPointerChecked(

* Fri 30 Jan 2015 10:05:31 AM JST
        return wxcb.conn.connect(self.display).core.WarpPointerChecked(

* Fri 30 Jan 2015 10:05:31 AM JST
        return wxcb.conn.connect(self.display).core.WarpPointerChecked(
            self.id, dst_window, src_x, src_y, src_width, src_height,

* Fri 30 Jan 2015 10:05:31 AM JST
        return wxcb.conn.connect(self.display).core.WarpPointerChecked(
            self.id, dst_window, src_x, src_y, src_width, src_height,

* Fri 30 Jan 2015 10:05:31 AM JST
        return wxcb.conn.connect(self.display).core.WarpPointerChecked(
            self.id, dst_window, src_x, src_y, src_width, src_height,
            dst_x, dst_y)

* Fri 30 Jan 2015 10:05:46 AM JST

* Fri 30 Jan 2015 10:05:46 AM JST

* Fri 30 Jan 2015 10:05:46 AM JST
import wxcb.conn

* Fri 30 Jan 2015 10:16:13 AM JST
inter
* Fri 30 Jan 2015 11:58:45 AM JST
mode, window, property_, type_, format_, data_len,
                 data
* Fri 30 Jan 2015 11:58:49 AM JST
                 
* Fri 30 Jan 2015 11:58:53 AM JST
property_,
* Fri 30 Jan 2015 11:59:32 AM JST
mode, window, type_, format_, data_len,
                       data
* Fri 30 Jan 2015 11:59:37 AM JST
                       
* Fri 30 Jan 2015 11:59:49 AM JST
self._value, 
* Fri 30 Jan 2015 12:04:44 PM JST
owner, selection, time
* Fri 30 Jan 2015 12:04:52 PM JST
co
* Fri 30 Jan 2015 12:04:52 PM JST
retrun co
* Fri 30 Jan 2015 12:05:20 PM JST
selectio
* Fri 30 Jan 2015 12:05:26 PM JST
selection, 
* Fri 30 Jan 2015 12:05:29 PM JST
selection, 
* Fri 30 Jan 2015 12:05:30 PM JST

* Fri 30 Jan 2015 12:05:30 PM JST

* Fri 30 Jan 2015 12:05:30 PM JST
        - `selection`:

* Fri 30 Jan 2015 12:11:49 PM JST
requestor, selection, target, property_, time
* Fri 30 Jan 2015 12:11:53 PM JST
property_, 
* Fri 30 Jan 2015 12:16:08 PM JST
only_if_exists, 
* Fri 30 Jan 2015 12:16:44 PM JST
InternAtom
* Fri 30 Jan 2015 12:17:40 PM JST
name
* Fri 30 Jan 2015 12:20:03 PM JST
GetAtomName
* Fri 30 Jan 2015 12:20:07 PM JST
from wxcb.protocol.xproto.requests import GetAtomName
* Fri 30 Jan 2015 12:21:06 PM JST
from wxcb.xobj.atom import Atom
* Fri 30 Jan 2015 12:21:11 PM JST
Atom(5).getname(':0.0')
* Fri 30 Jan 2015 12:21:21 PM JST
from wxcb.xobj.atom import Atom
* Fri 30 Jan 2015 12:22:24 PM JST
from wxcb.xobj.atom import Atom
* Fri 30 Jan 2015 12:27:45 PM JST
_atom
* Fri 30 Jan 2015 12:27:46 PM JST
as _atom
* Fri 30 Jan 2015 12:27:52 PM JST
wxcb.xobj.atom
* Fri 30 Jan 2015 12:30:56 PM JST
_atom
* Fri 30 Jan 2015 12:30:56 PM JST
as _atom
* Fri 30 Jan 2015 12:31:19 PM JST
wxcb.xobj.atom
* Fri 30 Jan 2015 01:03:51 PM JST
InternAtom
* Fri 30 Jan 2015 01:03:51 PM JST
request.InternAtom
* Sat 31 Jan 2015 08:22:52 AM JST
_sle
* Sat 31 Jan 2015 08:24:03 AM JST
sutil
* Sat 31 Jan 2015 09:36:32 AM JST
pids()
* Sat 31 Jan 2015 09:36:39 AM JST
command
* Sat 31 Jan 2015 09:36:43 AM JST
cmdline()
* Sat 31 Jan 2015 09:36:47 AM JST
name()
* Sat 31 Jan 2015 09:37:44 AM JST
@abstractmethod
* Sat 31 Jan 2015 09:40:39 AM JST
cmdline()
* Sat 31 Jan 2015 09:41:05 AM JST
exe()
* Sat 31 Jan 2015 09:42:27 AM JST
abstract
* Sat 31 Jan 2015 09:42:46 AM JST
# condition: (and (not (py:at-string|comment-p)) (not (equal (this-command-keys-vector) [32])))
# 32 = ` '
* Sat 31 Jan 2015 09:44:11 AM JST
${1:name$(replace-regexp-in-string "[[:punct:][:blank:]]" "_" text)}
* Sat 31 Jan 2015 09:46:17 AM JST
$2
* Sat 31 Jan 2015 09:47:05 AM JST
abstractmethod
* Sat 31 Jan 2015 09:47:22 AM JST
abstra
* Sat 31 Jan 2015 09:47:55 AM JST
abstractmethod
* Sat 31 Jan 2015 09:54:11 AM JST
    @abstractmethod
    def get_path(self, ):
        pass


* Sat 31 Jan 2015 09:54:21 AM JST
status()
* Sat 31 Jan 2015 09:55:33 AM JST
status()
* Sat 31 Jan 2015 10:11:51 AM JST
abstractmethod
* Sat 31 Jan 2015 10:12:52 AM JST
@abstractmethod
* Sat 31 Jan 2015 10:27:53 AM JST
get_process
* Sat 31 Jan 2015 10:28:06 AM JST
get_process_list
* Sat 31 Jan 2015 10:28:25 AM JST
2718
* Sat 31 Jan 2015 10:28:29 AM JST
sutil
* Sat 31 Jan 2015 10:28:40 AM JST
2718
* Sat 31 Jan 2015 12:38:50 PM JST
psutil.Process(1).children()
* Sat 31 Jan 2015 12:41:57 PM JST
defa
* Sat 31 Jan 2015 12:42:16 PM JST
2)
* Sat 31 Jan 2015 12:43:16 PM JST
user
* Sat 31 Jan 2015 12:43:22 PM JST
system
* Sat 31 Jan 2015 12:43:31 PM JST
index()
* Sat 31 Jan 2015 03:31:55 PM JST
get_create_time()
* Sat 31 Jan 2015 03:35:25 PM JST
user
* Sat 31 Jan 2015 03:44:32 PM JST
3460
* Sat 31 Jan 2015 04:09:14 PM JST
os.name
* Sat 31 Jan 2015 04:21:12 PM JST
num_handles
* Sat 31 Jan 2015 04:43:24 PM JST
NoSuchProcess
* Sat 31 Jan 2015 05:12:36 PM JST
    def __ne__(self, other):
        return not self == other


* Sat 31 Jan 2015 05:19:19 PM JST
ppid()
* Sat 31 Jan 2015 05:26:37 PM JST
16942
* Sat 31 Jan 2015 05:30:48 PM JST
num_ctx_switches()
* Sat 31 Jan 2015 05:31:29 PM JST
3460
* Sat 31 Jan 2015 05:33:29 PM JST
user_time()
* Sat 31 Jan 2015 05:44:42 PM JST
create_time()
* Sat 31 Jan 2015 05:52:07 PM JST
cpu_times()
* Sat 31 Jan 2015 06:05:35 PM JST
3458
* Sat 31 Jan 2015 06:06:08 PM JST
psutil.get_process_list()
* Sat 31 Jan 2015 06:06:12 PM JST

* Sat 31 Jan 2015 06:06:12 PM JST

* Sat 31 Jan 2015 06:06:12 PM JST
from wxcb.xobj.atom import Atom

* Sat 31 Jan 2015 06:06:32 PM JST
e=[x for x in psutil.get_process_list() if x.name() == 'emacs'][0]
* Sat 31 Jan 2015 06:06:59 PM JST
e=[x for x in psutil.get_process_list() if x.name() == 'emacs'][0]
* Sat 31 Jan 2015 06:07:28 PM JST
e=[x for x in 
* Sat 31 Jan 2015 06:11:29 PM JST
title
* Sat 31 Jan 2015 06:12:14 PM JST
17176
* Sat 31 Jan 2015 06:15:42 PM JST
23959
* Sat 31 Jan 2015 06:16:57 PM JST
17498
* Sat 31 Jan 2015 06:38:42 PM JST
class ProcessAbstract:
    """Abstract class ProcessAbstract
    """
    # Attributes:
    
    # Operations
    def get_pid(self):
        """function get_pid
        
        returns int
        """
        raise NotImplementedError()
    
    def get_parent(self):
        """function get_parent
        
        returns Process
        """
        raise NotImplementedError()
    
    def get_name(self):
        """function get_name
        
        returns str
        """
        raise NotImplementedError()
    
    def get_path(self):
        """function get_path
        
        returns str
        """
        raise NotImplementedError()
    
    def get_status(self):
        """function get_status
        
        returns str
        """
        raise NotImplementedError()
    
    def get_cmdline(self):
        """function get_cmdline
        
        returns str
        """
        raise NotImplementedError()
    
    def get_username(self):
        """function get_username
        
        returns str
        """
        raise NotImplementedError()
    
    def get_create_time(self):
        """function get_create_time
        
        returns float
        """
        raise NotImplementedError()
    
    def get_cwd(self):
        """function get_cwd
        
        returns str
        """
        raise NotImplementedError()
    
    def get_nice(self):
        """function get_nice
        
        returns int
        """
        raise NotImplementedError()
    
    def get_memory_info(self):
        """function get_memory_info
        
        returns namedtuple
        """
        raise NotImplementedError()
    
    def set_nice(self, value):
        """function set_nice
        
        value: int
        
        returns None
        """
        raise NotImplementedError()
    
    def suspend(self):
        """function suspend
        
        returns None
        """
        raise NotImplementedError()
    
    def resume(self):
        """function resume
        
        returns None
        """
        raise NotImplementedError()
    
    def terminate(self):
        """function terminate
        
        returns None
        """
        raise NotImplementedError()
    
    def kill(self):
        """function kill
        
        returns None
        """
        raise NotImplementedError()
    
    def is_running(self):
        """function is_running
        
        returns bool
        """
        raise NotImplementedError()
    
    def threads(self):
        """function threads
        
        returns list
        """
        raise NotImplementedError()
    
    def list_children(self):
        """function list_children
        
        returns list
        """
        raise NotImplementedError()
    
    def recursive_children(self):
        """function recursive_children
        
        returns list
        """
        raise NotImplementedError()
    
    def get_cpu_percent(self):
        """function get_cpu_percent
        
        returns float
        """
        raise NotImplementedError()
    
    def get_cpu_times(self):
        """function get_cpu_times
        
        returns named_tuple
        """
        raise NotImplementedError()
    
    def list_open_files(self):
        """function list_open_files
        
        returns list
        """
        raise NotImplementedError()
    
    def list_connection(self, king = 'inet'):
        """function list_connection
        
        king: str
        
        returns list
        """
        raise NotImplementedError()
    
    def send_signal(self, sig):
        """function send_signal
        
        sig: int
        
        returns None
        """
        raise NotImplementedError()
    
    def wait(self, timeout = None):
        """function wait
        
        timeout: int
        
        returns 
        """
        raise NotImplementedError()
    


* Sat 31 Jan 2015 06:39:00 PM JST
class PosixProcessAbstract(ProcessAbstract):
    """Abstract class PosixProcessAbstract
    """
    # Attributes:
    
    # Operations
    def get_uids(self):
        """function get_uids
        
        returns namedtuple
        """
        raise NotImplementedError()
    
    def get_gids(self):
        """function get_gids
        
        returns namedtuple
        """
        raise NotImplementedError()
    
    def get_terminal(self):
        """function get_terminal
        
        returns str
        """
        raise NotImplementedError()
    
    def num_fds(self):
        """function num_fds
        
        returns int
        """
        raise NotImplementedError()
    


* Sat 31 Jan 2015 06:39:21 PM JST
class WIndowsProcessAbstract(ProcessAbstract):
    """Abstract class WIndowsProcessAbstract
    """
    # Attributes:
    
    # Operations
    def get_num_handles(self):
        """function get_num_handles
        
        returns 
        """
        raise NotImplementedError()
    
    def get_ionice(self):
        """function get_ionice
        
        returns 
        """
        raise NotImplementedError()
    
    def set_ionice(self):
        """function set_ionice
        
        returns None
        """
        raise NotImplementedError()
    
    def io_counters(self):
        """function io_counters
        
        returns namedtuple
        """
        raise NotImplementedError()
    


* Sat 31 Jan 2015 06:39:54 PM JST
class LinuxProcessAbstract(PosixProcessAbstract):
    """Abstract class LinuxProcessAbstract
    """
    # Attributes:
    
    # Operations
    def get_ionice(self):
        """function get_ionice
        
        returns 
        """
        raise NotImplementedError()
    
    def set_ionice(self):
        """function set_ionice
        
        returns None
        """
        raise NotImplementedError()
    
    def io_counters(self):
        """function io_counters
        
        returns namedtuple
        """
        raise NotImplementedError()
    
    def rlimit(self):
        """function rlimit
        
        returns namedtuple
        """
        raise NotImplementedError()
    
    def get_cpu_affinity(self):
        """function get_cpu_affinity
        
        returns 
        """
        raise NotImplementedError()
    
    def set_cpu_affinity(self):
        """function set_cpu_affinity
        
        returns 
        """
        raise NotImplementedError()
    


* Sat 31 Jan 2015 06:40:02 PM JST
class WindowsProcessAbstract(ProcessAbstract):
    """Abstract class WindowsProcessAbstract
    """
    # Attributes:

    # Operations
    def get_num_handles(self):
        """function get_num_handles

        returns
        """
        raise NotImplementedError()

    def get_ionice(self):
        """function get_ionice

        returns
        """
        raise NotImplementedError()

    def set_ionice(self):
        """function set_ionice

        returns None
        """
        raise NotImplementedError()

    def io_counters(self):
        """function io_counters

        returns namedtuple
        """
        raise NotImplementedError()

* Sat 31 Jan 2015 06:40:25 PM JST
class BSDProcessAbstract(PosixProcessAbstract):
    """Abstract class BSDProcessAbstract
    """
    # Attributes:
    
    # Operations
    def io_counters(self):
        """function io_counters
        
        returns named_tuple
        """
        raise NotImplementedError()
    


* Sat 31 Jan 2015 06:41:05 PM JST
@abstractmethod
* Sat 31 Jan 2015 06:41:12 PM JST
    @abstractmethod

* Sat 31 Jan 2015 09:51:52 PM JST
wait()
* Sat 31 Jan 2015 09:51:53 PM JST
17498
* Sat 31 Jan 2015 09:52:05 PM JST
pid
* Sat 31 Jan 2015 09:53:07 PM JST
    @abstractmethod
    def get_pid(self):
        raise NotImplementedError()

    @abstractmethod
    def get_parent(self):
        raise NotImplementedError()

    @abstractmethod
    def get_name(self):
        raise NotImplementedError()

    @abstractmethod
    def get_path(self):
        raise NotImplementedError()

    @abstractmethod
    def get_status(self):
        raise NotImplementedError()

    @abstractmethod
    def get_cmdline(self):
        raise NotImplementedError()

    @abstractmethod
    def get_username(self):
        raise NotImplementedError()

    @abstractmethod
    def get_create_time(self):
        raise NotImplementedError()

    @abstractmethod
    def get_cwd(self):
        raise NotImplementedError()

    @abstractmethod
    def get_nice(self):
        raise NotImplementedError()

    @abstractmethod
    def get_memory_info(self):
        raise NotImplementedError()

    @abstractmethod
    def set_nice(self, value):
        raise NotImplementedError()

    @abstractmethod
    def suspend(self):
        raise NotImplementedError()

    @abstractmethod
    def resume(self):
        raise NotImplementedError()

    @abstractmethod
    def terminate(self):
        raise NotImplementedError()

    @abstractmethod
    def kill(self):
        raise NotImplementedError()

    @abstractmethod
    def is_running(self):
        raise NotImplementedError()

    @abstractmethod
    def threads(self):
        raise NotImplementedError()

    @abstractmethod
    def list_children(self):
        raise NotImplementedError()

    @abstractmethod
    def recursive_children(self):
        raise NotImplementedError()

    @abstractmethod
    def get_cpu_percent(self):
        raise NotImplementedError()

    @abstractmethod
    def get_cpu_times(self):
        raise NotImplementedError()

    @abstractmethod
    def list_open_files(self):
        raise NotImplementedError()

    @abstractmethod
    def list_connection(self, king = 'inet'):
        raise NotImplementedError()

    @abstractmethod
    def send_signal(self, sig):
        raise NotImplementedError()

    @abstractmethod
    def wait(self, timeout = None):
        raise NotImplementedError()

* Sat 31 Jan 2015 09:53:09 PM JST

* Sat 31 Jan 2015 09:53:09 PM JST

* Sat 31 Jan 2015 09:53:09 PM JST
    @abstractmethod

* Sat 31 Jan 2015 09:53:11 PM JST

* Sat 31 Jan 2015 09:53:11 PM JST

* Sat 31 Jan 2015 09:53:11 PM JST
    @abstractmethod

* Sat 31 Jan 2015 09:53:12 PM JST

* Sat 31 Jan 2015 09:53:12 PM JST

* Sat 31 Jan 2015 09:53:13 PM JST
    @abstractmethod

* Sat 31 Jan 2015 09:53:13 PM JST

* Sat 31 Jan 2015 09:53:13 PM JST

* Sat 31 Jan 2015 09:53:13 PM JST
    @abstractmethod

* Sat 31 Jan 2015 09:53:14 PM JST

* Sat 31 Jan 2015 09:53:15 PM JST

* Sat 31 Jan 2015 09:53:15 PM JST
    @abstractmethod

* Sat 31 Jan 2015 09:53:16 PM JST

* Sat 31 Jan 2015 09:53:16 PM JST

* Sat 31 Jan 2015 09:53:16 PM JST
    @abstractmethod

* Sat 31 Jan 2015 09:53:17 PM JST

* Sat 31 Jan 2015 09:53:17 PM JST

* Sat 31 Jan 2015 09:53:17 PM JST
    @abstractmethod

* Sat 31 Jan 2015 09:53:22 PM JST
    @abstractmethod

* Sat 31 Jan 2015 09:53:44 PM JST
    @abstractmethod
    def get_uids(self):
        raise NotImplementedError()

    @abstractmethod
    def get_gids(self):
        raise NotImplementedError()

    @abstractmethod
    def get_terminal(self):
        raise NotImplementedError()

    @abstractmethod
    def num_fds(self):
        raise NotImplementedError()

* Sat 31 Jan 2015 09:53:53 PM JST
    @abstractmethod
    def get_ionice(self):
        raise NotImplementedError()

    @abstractmethod
    def set_ionice(self):
        raise NotImplementedError()

    @abstractmethod
    def io_counters(self):
        raise NotImplementedError()

    @abstractmethod
    def rlimit(self):
        raise NotImplementedError()

    @abstractmethod
    def get_cpu_affinity(self):
        raise NotImplementedError()

    @abstractmethod
    def set_cpu_affinity(self):
        raise NotImplementedError()

* Sat 31 Jan 2015 09:54:45 PM JST

* Sat 31 Jan 2015 09:54:45 PM JST

* Sat 31 Jan 2015 09:54:45 PM JST
        raise NotImplementedError()

* Sat 31 Jan 2015 09:55:23 PM JST
raise NotImplementedError()