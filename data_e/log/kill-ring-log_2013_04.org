
* Mon 01 Apr 2013 05:49:03 AM JST
update-rc.d lightdm remove
* Mon 01 Apr 2013 05:49:13 AM JST
update-rc.d lightdm remove
* Tue 02 Apr 2013 03:42:50 AM JST

* Tue 02 Apr 2013 03:42:50 AM JST
*
* Tue 02 Apr 2013 03:42:50 AM JST
*

* Tue 02 Apr 2013 03:42:54 AM JST
****** 
* Tue 02 Apr 2013 03:43:37 AM JST
***** 
* Tue 02 Apr 2013 04:05:02 AM JST
cout <<         
* Tue 02 Apr 2013 04:09:08 AM JST
"Enter two numbers: "
* Tue 02 Apr 2013 04:36:14 AM JST

* Tue 02 Apr 2013 04:36:14 AM JST

* Tue 02 Apr 2013 04:36:15 AM JST
  std::cout << prompt.size() * " " << std::endl;

* Tue 02 Apr 2013 04:36:19 AM JST
int main()
{
  std::string prompt = "Enter two numbers: ";
  std::cout << prompt;
  // std::cout << "\rEnter num: ";
  int v1 = 0, v2 = 0;
  std::cin >> v1 >> v2;
  std::cout << "The sum of " << v1 << " and " << v2
            << " is " << v1 + v2 << std::endl;

  return 0;
}

* Tue 02 Apr 2013 04:36:24 AM JST

* Tue 02 Apr 2013 04:36:24 AM JST

* Tue 02 Apr 2013 04:36:24 AM JST
  std::cout << "\rEnter num: ";

* Tue 02 Apr 2013 04:36:33 AM JST
int main()
{
  std::string prompt = "Enter two numbers: ";
  std::cout << prompt;
  // std::cout << "\rEnter num: ";
  int v1 = 0, v2 = 0;
  std::cin >> v1 >> v2;
  std::cout << "The sum of " << v1 << " and " << v2
            << " is " << v1 + v2 << std::endl;

  return 0;
}

* Tue 02 Apr 2013 04:38:22 AM JST
  
* Tue 02 Apr 2013 04:42:09 AM JST

* Tue 02 Apr 2013 04:42:09 AM JST

* Tue 02 Apr 2013 04:42:09 AM JST
  std::flush;

* Tue 02 Apr 2013 04:42:41 AM JST

* Tue 02 Apr 2013 04:42:41 AM JST

* Tue 02 Apr 2013 04:42:41 AM JST
  // std::cout << "\rEnter num: ";

* Tue 02 Apr 2013 04:43:14 AM JST

* Tue 02 Apr 2013 04:43:14 AM JST

* Tue 02 Apr 2013 04:43:15 AM JST
  int v1 = 0, v2 = 0;

* Tue 02 Apr 2013 04:43:16 AM JST
  int v1 = 0, v2 = 0;

* Tue 02 Apr 2013 04:43:16 AM JST
  int v1 = 0, v2 = 0;
  std::cin >> v1;

* Tue 02 Apr 2013 04:43:18 AM JST

* Tue 02 Apr 2013 04:43:18 AM JST

* Tue 02 Apr 2013 04:43:18 AM JST
  std::cout << "Enter next numbers: ";

* Tue 02 Apr 2013 04:43:18 AM JST
  std::cout << "Enter next numbers: ";

* Tue 02 Apr 2013 04:43:18 AM JST
  std::cout << "Enter next numbers: ";
  std::cin >> v2;

* Tue 02 Apr 2013 04:43:18 AM JST
  std::cout << "Enter next numbers: ";
  std::cin >> v2;

* Tue 02 Apr 2013 04:43:18 AM JST
  std::cout << "Enter next numbers: ";
  std::cin >> v2;
  std::cout << "The sum of " << v1 << " and " << v2

* Tue 02 Apr 2013 04:43:19 AM JST
  std::cout << "Enter next numbers: ";
  std::cin >> v2;
  std::cout << "The sum of " << v1 << " and " << v2

* Tue 02 Apr 2013 04:43:19 AM JST
  std::cout << "Enter next numbers: ";
  std::cin >> v2;
  std::cout << "The sum of " << v1 << " and " << v2
            << " is " << v1 + v2 << std::endl;

* Tue 02 Apr 2013 04:43:20 AM JST

* Tue 02 Apr 2013 04:43:20 AM JST

* Tue 02 Apr 2013 04:43:20 AM JST
  for (i=0; i< prompt.size() + 1 + 1; i++){

* Tue 02 Apr 2013 04:43:20 AM JST
  for (i=0; i< prompt.size() + 1 + 1; i++){

* Tue 02 Apr 2013 04:43:20 AM JST
  for (i=0; i< prompt.size() + 1 + 1; i++){
    std::cout << "\b";

* Tue 02 Apr 2013 04:43:21 AM JST
  for (i=0; i< prompt.size() + 1 + 1; i++){
    std::cout << "\b";

* Tue 02 Apr 2013 04:43:21 AM JST
  for (i=0; i< prompt.size() + 1 + 1; i++){
    std::cout << "\b";
  }

* Tue 02 Apr 2013 04:43:21 AM JST

* Tue 02 Apr 2013 04:43:21 AM JST

* Tue 02 Apr 2013 04:43:21 AM JST
  int i;

* Tue 02 Apr 2013 04:43:30 AM JST

* Tue 02 Apr 2013 04:43:30 AM JST

* Tue 02 Apr 2013 04:43:30 AM JST
            << " is " << v1 + v2 << std::endl;

* Tue 02 Apr 2013 04:43:38 AM JST
1
* Tue 02 Apr 2013 04:46:54 AM JST

* Tue 02 Apr 2013 04:46:54 AM JST

* Tue 02 Apr 2013 04:46:54 AM JST
  std::cout << std::endl;

* Tue 02 Apr 2013 05:03:13 AM JST
int main()
{
  std::string prompt = "Enter numbers: ";
  std::cout << prompt;
  int i;
  for (i=0; i< prompt.size(); i++){
    std::cout << "\b";
  }
  usleep(30000);
  std::cout << "hello" << std::endl;

  return 0;
}

* Tue 02 Apr 2013 05:03:23 AM JST

* Tue 02 Apr 2013 05:03:23 AM JST

* Tue 02 Apr 2013 05:03:23 AM JST
  usleep(30000);

* Tue 02 Apr 2013 05:03:29 AM JST

* Tue 02 Apr 2013 05:03:29 AM JST

* Tue 02 Apr 2013 05:03:29 AM JST
  for (i=0; i< prompt.size(); i++){

* Tue 02 Apr 2013 05:03:29 AM JST
  for (i=0; i< prompt.size(); i++){

* Tue 02 Apr 2013 05:03:29 AM JST
  for (i=0; i< prompt.size(); i++){
    std::cout << "\b";

* Tue 02 Apr 2013 05:03:29 AM JST
  for (i=0; i< prompt.size(); i++){
    std::cout << "\b";

* Tue 02 Apr 2013 05:03:29 AM JST
  for (i=0; i< prompt.size(); i++){
    std::cout << "\b";
  }

* Tue 02 Apr 2013 05:03:31 AM JST

* Tue 02 Apr 2013 05:03:31 AM JST

* Tue 02 Apr 2013 05:03:31 AM JST
  int i;

* Tue 02 Apr 2013 05:07:55 AM JST
"\r" + std::string(prompt.size(), ' ')
* Tue 02 Apr 2013 05:08:13 AM JST
size(), ' ') + 
* Tue 02 Apr 2013 05:08:13 AM JST
prompt.size(), ' ') + 
* Tue 02 Apr 2013 05:08:13 AM JST
string(prompt.size(), ' ') + 
* Tue 02 Apr 2013 05:08:14 AM JST
std::string(prompt.size(), ' ') + 
* Tue 02 Apr 2013 05:08:14 AM JST
r" + std::string(prompt.size(), ' ') + 
* Tue 02 Apr 2013 05:08:14 AM JST
cout << "\r" + std::string(prompt.size(), ' ') + 
* Tue 02 Apr 2013 05:13:14 AM JST
std::u
* Tue 02 Apr 2013 05:14:49 AM JST

* Tue 02 Apr 2013 05:14:49 AM JST

* Tue 02 Apr 2013 05:14:49 AM JST
  int tes;

* Tue 02 Apr 2013 05:15:17 AM JST

* Tue 02 Apr 2013 05:15:17 AM JST

* Tue 02 Apr 2013 05:15:17 AM JST
  std::cout << "\b";

* Tue 02 Apr 2013 05:15:23 AM JST

* Tue 02 Apr 2013 05:15:23 AM JST

* Tue 02 Apr 2013 05:15:23 AM JST
  std::cin >> tes;

* Tue 02 Apr 2013 05:15:51 AM JST

* Tue 02 Apr 2013 05:15:51 AM JST

* Tue 02 Apr 2013 05:15:51 AM JST
  std::flush();

* Tue 02 Apr 2013 05:17:46 AM JST
int 
* Tue 02 Apr 2013 05:18:10 AM JST
  
* Tue 02 Apr 2013 05:21:48 AM JST
std
* Tue 02 Apr 2013 05:23:40 AM JST
return
* Tue 02 Apr 2013 09:34:12 AM JST
KI /data/.backup/ni/root# find . -name "*.py" -ls | cut -d":" -f2 | cut -d" " -f2
* Tue 02 Apr 2013 09:34:25 AM JST
find -mindepth 2 -type f -exec grep "ki_backup_ni" {}  \; 
* Tue 02 Apr 2013 09:42:52 AM JST
Host ki_backup_ni
     User root
     Port 12316
     HostName 127.0.0.1
     IdentityFile ~/.ssh/rsync

* Tue 02 Apr 2013 10:05:46 AM JST
int main()
{
  int sum = 0, val = 1;
  // keep executing the while as long as val is less than or equal to 10
  while (val <= 10) {
    sum += val; //assigns sum + val to sum
    ++val;      // add 1 to val
  }
  std::cout << "Sum of 1 to 10 inclusive is "
            << sum << std::endl;
  return 0;
}

* Tue 02 Apr 2013 10:07:43 AM JST
int main()
{
  int sum = 0, val = 50;
  // keep executing the while as long as val is less than or equal to 10
  while (val <= 100) {
    sum += val; //assigns sum + val to sum
    ++val;      // add 1 to val
  }
  std::cout << "Sum of 1 to 10 inclusive is "
            << sum << std::endl;
  return 0;
}

* Tue 02 Apr 2013 10:14:04 AM JST
// 
* Tue 02 Apr 2013 10:14:04 AM JST
                // 
* Tue 02 Apr 2013 10:18:05 AM JST
https://github.com/AndreaCrotti/yasnippet-snippets#repo_details_loader
* Tue 02 Apr 2013 10:33:20 AM JST
init
* Tue 02 Apr 2013 10:33:23 AM JST
init
* Tue 02 Apr 2013 10:56:55 AM JST
http://d.hatena.ne.jp/asin/4774134325#container
* Tue 02 Apr 2013 11:34:35 AM JST
C++ style guide
* Tue 02 Apr 2013 11:37:57 AM JST

* Tue 02 Apr 2013 11:37:57 AM JST

* Tue 02 Apr 2013 11:37:57 AM JST
# binding: "keybinding"

* Tue 02 Apr 2013 11:37:58 AM JST

* Tue 02 Apr 2013 11:37:58 AM JST

* Tue 02 Apr 2013 11:37:58 AM JST
# expand-env: ((some-var some-value))

* Tue 02 Apr 2013 11:37:58 AM JST
# expand-env: ((some-var some-value))

* Tue 02 Apr 2013 11:37:59 AM JST
# expand-env: ((some-var some-value))
# --

* Tue 02 Apr 2013 11:38:00 AM JST

* Tue 02 Apr 2013 11:38:00 AM JST

* Tue 02 Apr 2013 11:38:00 AM JST
# binding: "keybinding"

* Tue 02 Apr 2013 11:40:10 AM JST

* Tue 02 Apr 2013 11:40:10 AM JST

* Tue 02 Apr 2013 11:40:10 AM JST
if (1=0) {

* Tue 02 Apr 2013 11:40:11 AM JST

* Tue 02 Apr 2013 11:40:11 AM JST

* Tue 02 Apr 2013 11:40:11 AM JST
 }

* Tue 02 Apr 2013 11:42:35 AM JST
http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#The__define_Guard
* Tue 02 Apr 2013 12:13:45 PM JST

* Tue 02 Apr 2013 12:13:45 PM JST

* Tue 02 Apr 2013 12:13:45 PM JST
# binding: "keybinding"

* Tue 02 Apr 2013 12:13:45 PM JST
# binding: "keybinding"

* Tue 02 Apr 2013 12:13:45 PM JST
# binding: "keybinding"
# expand-env: ((some-var some-value))

* Tue 02 Apr 2013 12:17:11 PM JST
// 
* Tue 02 Apr 2013 12:17:11 PM JST
                       // 
* Tue 02 Apr 2013 12:30:33 PM JST
;;;###autoload
(defun python-coding-style ()
  (setq indent-tabs-mode nil
        tab-width        4
        python-indent    4   ; for python-mode.el
        fill-column      80))

* Tue 02 Apr 2013 12:31:03 PM JST

* Tue 02 Apr 2013 12:31:03 PM JST

* Tue 02 Apr 2013 12:31:03 PM JST
        python-indent    4   ; for python-mode.el

* Tue 02 Apr 2013 12:34:16 PM JST
(setq-default c-basic-offset 4)
* Tue 02 Apr 2013 12:37:25 PM JST
default
* Tue 02 Apr 2013 12:37:29 PM JST
(setq 
* Tue 02 Apr 2013 01:20:30 PM JST
~/.emacs.d/data_e/snippets/cc-mode/c++-mode/
* Tue 02 Apr 2013 01:37:19 PM JST
book
* Tue 02 Apr 2013 01:37:20 PM JST
next book
* Tue 02 Apr 2013 01:37:20 PM JST
to next book
* Tue 02 Apr 2013 01:37:36 PM JST
refers to next book
* Tue 02 Apr 2013 01:37:36 PM JST
now refers to next book
* Tue 02 Apr 2013 01:37:38 PM JST
total
* Tue 02 Apr 2013 01:40:38 PM JST
// 
* Tue 02 Apr 2013 01:40:39 PM JST
                                   // 
* Tue 02 Apr 2013 01:45:06 PM JST

* Tue 02 Apr 2013 01:45:06 PM JST

* Tue 02 Apr 2013 01:45:06 PM JST
# binding: "keybinding"

* Tue 02 Apr 2013 01:45:06 PM JST
# binding: "keybinding"

* Tue 02 Apr 2013 01:45:06 PM JST
# binding: "keybinding"
# expand-env: ((some-var some-value))

* Tue 02 Apr 2013 08:25:22 PM JST
unsigned
* Tue 02 Apr 2013 08:25:26 PM JST
unsigned
* Tue 02 Apr 2013 08:48:42 PM JST

* Tue 02 Apr 2013 08:48:42 PM JST

* Tue 02 Apr 2013 08:48:42 PM JST
  for (unsigned u=10; u>=0; --u) {

* Wed 03 Apr 2013 03:00:44 AM JST
int main()
{
  for (unsigned u=10; u>=0; --u) {
    std::cout << u << std::endl;
  }

  return 0;
}

* Wed 03 Apr 2013 03:00:56 AM JST
// int main()

* Wed 03 Apr 2013 02:48:30 PM JST
std::
* Thu 04 Apr 2013 05:28:53 AM JST
std::
* Thu 04 Apr 2013 09:38:02 PM JST
~/.emacs.d/
* Thu 04 Apr 2013 09:38:41 PM JST
/dev/mapper/sdf5_crypt /               ext4    errors=remount-ro,noatime 0       1
* Thu 04 Apr 2013 09:56:12 PM JST
echo gtk-menu-popup-delay = 0 >> ~/.gtkrc-2.0
* Thu 04 Apr 2013 11:14:27 PM JST
#  /etc/rsyslog.conf	Configuration file for rsyslog.
#
#			For more information see
#			/usr/share/doc/rsyslog-doc/html/rsyslog_conf.html


#################
#### MODULES ####
#################

$ModLoad imuxsock # provides support for local system logging
$ModLoad imklog   # provides kernel logging support
#$ModLoad immark  # provides --MARK-- message capability

# provides UDP syslog reception
#$ModLoad imudp
#$UDPServerRun 514

# provides TCP syslog reception
#$ModLoad imtcp
#$InputTCPServerRun 514


###########################
#### GLOBAL DIRECTIVES ####
###########################

#
# Use traditional timestamp format.
# To enable high precision timestamps, comment out the following line.
#
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

#
# Set the default permissions for all log files.
#
$FileOwner root
$FileGroup adm
$FileCreateMode 0640
$DirCreateMode 0755
$Umask 0022

#
# Where to place spool and state files
#
$WorkDirectory /var/spool/rsyslog

#
# Include all config files in /etc/rsyslog.d/
#
$IncludeConfig /etc/rsyslog.d/*.conf


###############
#### RULES ####
###############

#
# First some standard log files.  Log by facility.
#
auth,authpriv.*			/var/log/auth.log
*.*;auth,authpriv.none		-/var/log/syslog
#cron.*				/var/log/cron.log
daemon.*			-/var/log/daemon.log
kern.*				-/var/log/kern.log
# lpr.*				-/var/log/lpr.log
# mail.*				-/var/log/mail.log
user.*				-/var/log/user.log

#
# Logging for the mail system.  Split it up so that
# it is easy to write scripts to parse these files.
#
# mail.info			-/var/log/mail.info
# mail.warn			-/var/log/mail.warn
# mail.err			/var/log/mail.err

#
# Logging for INN news system.
#
# news.crit			/var/log/news/news.crit
# news.err			/var/log/news/news.err
# news.notice			-/var/log/news/news.notice

#
# Some "catch-all" log files.
#
# *.=debug;\
	# auth,authpriv.none;\
	# news.none;mail.none	-/var/log/debug
*.=info;*.=notice;*.=warn;\
	auth,authpriv.none;\
	cron,daemon.none;\
	mail,news.none		-/var/log/messages

#
# Emergencies are sent to everybody logged in.
#
*.emerg				:omusrmsg:*

#
# I like to have messages displayed on the console, but only on a virtual
# console I usually leave idle.
#
#daemon,mail.*;\
#	news.=crit;news.=err;news.=notice;\
#	*.=debug;*.=info;\
#	*.=notice;*.=warn	/dev/tty8

# The named pipe /dev/xconsole is for the `xconsole' utility.  To use it,
# you must invoke `xconsole' with the `-file' option:
#
#    $ xconsole -file /dev/xconsole [...]
#
# NOTE: adjust the list below, or you'll go crazy if you have a reasonably
#      busy site..
#
daemon.*;mail.*;\
	news.err;\
	*.=debug;*.=info;\
	*.=notice;*.=warn	|/dev/xconsole

* Fri 05 Apr 2013 02:29:38 AM JST
OPTIONS="-i -l /dev/null"
* Fri 05 Apr 2013 02:31:38 AM JST

* Fri 05 Apr 2013 02:31:38 AM JST

* Fri 05 Apr 2013 02:31:38 AM JST
OPTIONS="-i -l /dev/null"

* Fri 05 Apr 2013 02:31:40 AM JST

* Fri 05 Apr 2013 02:31:40 AM JST

* Fri 05 Apr 2013 02:31:40 AM JST
- # nano /etc/defaults/preload

* Fri 05 Apr 2013 02:31:40 AM JST
- # nano /etc/defaults/preload

* Fri 05 Apr 2013 02:31:40 AM JST
- # nano /etc/defaults/preload
OPTIONS="-i -l /dev/null"

* Fri 05 Apr 2013 02:31:42 AM JST

* Fri 05 Apr 2013 02:31:43 AM JST

* Fri 05 Apr 2013 02:31:43 AM JST
**** preload

* Fri 05 Apr 2013 05:46:21 AM JST
https://registrationcenter.intel.com/regcenter/DownloadNow.aspx?ID=18105&DLM=0&EmailID=zhronxic%40sharklasers.com&Sequence=1366633
* Fri 05 Apr 2013 05:47:09 AM JST
tar zxvf l_ccompxe_2013.3.163.tgz
* Fri 05 Apr 2013 05:47:27 AM JST
cd l_ccompxe_2013.3.163/
* Fri 05 Apr 2013 05:47:40 AM JST
./install.sh
* Fri 05 Apr 2013 05:48:40 AM JST
source /opt/intel/bin/iccvars.sh
* Fri 05 Apr 2013 05:48:55 AM JST
echo /opt/intel/composerxe/lib/ia32 > /etc/ld.so.conf.d/icc.conf
* Fri 05 Apr 2013 05:49:01 AM JST
# 
* Fri 05 Apr 2013 05:49:01 AM JST
  # 
* Fri 05 Apr 2013 05:49:27 AM JST
ldconfig
* Fri 05 Apr 2013 05:49:44 AM JST
icc -v
* Fri 05 Apr 2013 05:49:51 AM JST

* Fri 05 Apr 2013 05:49:51 AM JST

* Fri 05 Apr 2013 05:49:51 AM JST


* Fri 05 Apr 2013 11:33:54 AM JST
HOSTCFLAGS   = -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer
* Fri 05 Apr 2013 12:16:51 PM JST
/opt/intel/composer_xe_2013.3.163/bin/ia32/icpc
* Fri 05 Apr 2013 12:17:03 PM JST
/opt/intel/composer_xe_2013.3.163/bin/ia32/icc
* Fri 05 Apr 2013 12:20:17 PM JST
/opt/intel/composer_xe_2013.3.163/bin/ia32/icc
* Fri 05 Apr 2013 12:26:06 PM JST
/opt/intel/composer_xe_2013.3.163/bin/ia32/icc
* Fri 05 Apr 2013 12:26:09 PM JST
/opt/intel/composer_xe_2013.3.163/bin/ia32/icpc
* Fri 05 Apr 2013 12:26:15 PM JST
 -fasm-blocks
* Fri 05 Apr 2013 12:26:22 PM JST

* Fri 05 Apr 2013 12:26:22 PM JST

* Fri 05 Apr 2013 12:26:22 PM JST
CC = /opt/intel/composer_xe_2013.3.163/bin/ia32/icc

* Sat 06 Apr 2013 11:10:00 AM JST

* Sat 06 Apr 2013 11:10:00 AM JST

* Sat 06 Apr 2013 11:10:00 AM JST
# binding: "keybinding"

* Sat 06 Apr 2013 11:10:00 AM JST
# binding: "keybinding"

* Sat 06 Apr 2013 11:10:00 AM JST
# binding: "keybinding"
# expand-env: ((some-var some-value))

* Sat 06 Apr 2013 11:24:45 AM JST
(defalias 'bookmark-most-using-t1 'bookmark-set)
* Sat 06 Apr 2013 03:01:01 PM JST
~/.emacs.d/
* Sun 07 Apr 2013 10:30:48 AM JST
QU /root# 
* Sun 07 Apr 2013 01:27:39 PM JST
/media/Data/MYTEMP/CPRIMER/
* Sun 07 Apr 2013 06:10:31 PM JST

* Sun 07 Apr 2013 06:15:11 PM JST

* Sun 07 Apr 2013 06:15:11 PM JST

* Sun 07 Apr 2013 06:15:11 PM JST
PasswordAuthentication no

* Mon 08 Apr 2013 07:57:16 AM JST
/usr/lib/i386-linux-gnu
* Mon 08 Apr 2013 07:57:21 AM JST

* Mon 08 Apr 2013 07:58:05 AM JST
/lib/i386-linux-gnu
* Mon 08 Apr 2013 07:58:09 AM JST

* Mon 08 Apr 2013 09:51:01 AM JST
/html/body/table[2]/tbody/tr/td/table/tbody
* Mon 08 Apr 2013 09:51:09 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/giin_f.htm
* Mon 08 Apr 2013 09:57:12 AM JST
/html/body/table[2]/tbody/tr/td/table/tbody
* Mon 08 Apr 2013 10:19:58 AM JST
/html/body
* Mon 08 Apr 2013 10:23:06 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/giin_f.htm
* Mon 08 Apr 2013 10:23:57 AM JST
http://stackoverflow.com/questions/1577487/python-lxml-and-xpath-html-table-parsing
* Mon 08 Apr 2013 10:27:16 AM JST
/libcrypt.a
/usr/lib/i386-linux-gnu/libcrypt.so
/usr/lib/i386-linux-gnu/libcrypto.a
/usr/lib/i386-linux-gnu/libcrypto.so
/usr/lib/i386-linux-gnu/libcrypto.so.1.0.0
/usr/lib/i386-linux-gnu/i586/libcrypto.so.1.0.0
/usr/lib/i386-linux-gnu/i686/cmov/libcrypto.so.1.0.0
/usr/lib/i386-linux-gnu/pkgconfig/libcrypto.pc
/usr/lib/i386-linux-gnu/xen/libcrypt.a
/usr/lib/i386-linux-gnu/xen/libcrypt_pic.a
/usr/lib/vmware/lib/libcrypto.so.0.9.8
/usr/lib/vmware/lib/libcrypto.so.0.9.8/libcrypto.so.0.9.8
/usr/lib/vmware-ovftool/libcrypto.so.1.0.0
/usr/share/doc/libcrypt-ssleay-perl
/usr/share/doc/libcrypto++9
/usr/share/doc/libcryptsetup4
/usr/share/doc/libcrypt-ssleay-perl/TODO
/usr/share/doc/libcrypt-ssleay-perl/changelog.Debian.gz
/usr/share/doc/libcrypt-ssleay-perl/changelog.gz
/usr/share/doc/libcrypt-ssleay-perl/copyright
/usr/share/doc/libcrypt-ssleay-perl/examples
/usr/share/doc/libcrypt-ssleay-perl/examples/lwp-ssl-test
/usr/share/doc/libcrypt-ssleay-perl/examples/net-ssl-test
/usr/share/doc/libcrypto++9/changelog.Debian.gz
/usr/share/doc/libcrypto++9/copyright
/usr/share/doc/libcryptsetup4/NEWS.Debian.gz
/usr/share/doc/libcryptsetup4/changelog.Debian.gz
/usr/share/doc/libcryptsetup4/changelog.gz
/usr/share/doc/libcryptsetup4/copyright
/var/lib/dpkg/info/libcrypt-ssleay-perl.list
/var/lib/dpkg/info/libcrypt-ssleay-perl.md5sums
/var/lib/dpkg/info/libcrypto++9.list
/var/lib/dpkg/info/libcrypto++9.md5sums
/var/lib/dpkg/info/libcrypto++9.postinst
/var/lib/dpkg/info/libcrypto++9.postrm
/var/lib/dpkg/info/libcrypto++9.shlibs
/var/lib/dpkg/info/libcryptsetup4.list
/var/lib/dpkg/info/libcryptsetup4.md5sums
/var/lib/dpkg/info/libcryptsetup4.postinst
/var/lib/dpkg/info/libcryptsetup4.postrm
/var/lib/dpkg/info/libcryptsetup4.shlibs
/var/lib/dpkg/info/libcryptsetup4.symbols
QU /root/work/src/chntpw-0.99.6# make
gcc -DUSEOPENSSL -g -I. -I/usr/include -Wall -m32 -o chntpw chntpw.o ntreg.o edlib.o -L/usr/lib /usr/li
b/libcrypto.a                                                                                         
gcc: error: /usr/lib/libcrypto.a: No such file or directory
make: *** [chntpw] Error 1
QU /root/work/src/chntpw-0.99.6# make
gcc -DUSEOPENSSL -g -I. -I/usr/include -Wall -m32 -o chntpw chntpw.o ntreg.o edlib.o -L/usr/lib /usr/li
b/libcrypto.a                                                                                         
gcc: error: /usr/lib/libcrypto.a: No such file or directory
make: *** [chntpw] Error 1
QU /root/work/src/chntpw-0.99.6# make clean
rm -f *.o chntpw chntpw.static cpnt reged reged.static *~
QU /root/work/src/chntpw-0.99.6# make
gcc -c -DUSEOPENSSL -g -I. -I/usr/include -Wall -m32 chntpw.c
chntpw.c: In function ‘find_n_change’:
chntpw.c:858:11: warning: ‘vkkey’ may be used uninitialized in this function [-Wuninitialized]
gcc -c -DUSEOPENSSL -g -I. -I/usr/include -Wall -m32 ntreg.c
gcc -c -DUSEOPENSSL -g -I. -I/usr/include -Wall -m32 edlib.c
edlib.c: In function ‘regedit_interactive’:
edlib.c:358:18: warning: variable ‘cdkey’ set but not used [-Wunused-but-set-variable]
gcc -DUSEOPENSSL -g -I. -I/usr/include -Wall -m32 -o chntpw chntpw.o ntreg.o edlib.o -L/usr/lib /usr/li
b/libcrypto.a                                                                                         
gcc: error: /usr/lib/libcrypto.a: No such file or directory
make: *** [chntpw] Error 1
QU /root/work/src/chntpw-0.99.6# lae
la is correct? [n,y,a,e]: n
zsh: command not found: lae
QU /root/work/src/chntpw-0.99.6# ls
chntpw-before.c  cpnt.c   edlib.o      INSTALL.txt  ntreg.c  README.txt   sam.h
chntpw.c         debian   GPL.txt      LGPL.txt     ntreg.h  reged.c      WinReg.txt
chntpw.o         edlib.c  HISTORY.txt  Makefile     ntreg.o  regedit.txt
QU /root/work/src/chntpw-0.99.6# more INSTALL.txt 

The Offline NT Password & Registry Editor

(c) 1997-2008 Petter Nordahl-Hagen

This file is meant for developers.

General usage is via the provided boot CD images, but
static linux builds of the tools are also available
in the source zip file.

See REAMDE for general instructions and license info,
HISTORY.txt for version info.

If you want to build yourself, it should compile
with most gcc compilers. However, I am not particulary good
with types, so there may be some warnings.

You may have to install the openssl-devel package from you
linux distro to compile/link, since I need the static variant.
(change the makefile to link dynamic if you wish)
I link statically with libcrypto.a from OpenSSL.
(chntpw only, other tools does not require crypto)

Thanks to Denis Ducamp for modifying chntpw to use OpenSSL.

Thanks to Mike Doty, via Alon Bar-Lev for 64 bit build compatible patch.
 (from http://bugs.gentoo.org/show_bug.cgi?id=185411)

Look into Makefile, you may need to change things to fit your env.
(also if you need 64 bit)

If make goes well, you should have:
 chntpw - Password tool, dynamic with libc, static with OpenSSL
 chntpw.static - Completely static passord tool
 reged - Registry edit tool, dynamic linked with libc. No crypto.
 reged.static - Registry too, statically linked.
 cpnt - Simple copy utility, does not truncate file on write
        (was at least needed earlier for NTFS writes)

Also, the floppies and CDs are build under a different
environment for small libc size (uClibc), see website
for details. (build scripts not currently available..)

So, note that the binary then contains cryptographic code
which may be illegal for you to export.

Good luck.
QU /root/work/src/chntpw-0.99.6# make
gcc -DUSEOPENSSL -g -I. -I/usr/include -Wall -m32 -o chntpw chntpw.o ntreg.o edlib.o -L/usr/lib /usr/li
b/libcrypto.a                                                                                         
gcc: error: /usr/lib/libcrypto.a: No such file or directory
make: *** [chntpw] Error 1
QU /root/work/src/chntpw-0.99.6# make all
gcc -DUSEOPENSSL -g -I. -I/usr/include -Wall -m32 -o chntpw chntpw.o ntreg.o edlib.o -L/usr/lib /usr/li
b/libcrypto.a                                                                                         
gcc: error: /usr/lib/libcrypto.a: No such file or directory
make: *** [chntpw] Error 1
QU /root/work/src/chntpw-0.99.6# ls
chntpw-before.c  cpnt.c   edlib.o      INSTALL.txt  ntreg.c  README.txt   sam.h
chntpw.c         debian   GPL.txt      LGPL.txt     ntreg.h  reged.c      WinReg.txt
chntpw.o         edlib.c  HISTORY.txt  Makefile     ntreg.o  regedit.txt
QU /root/work/src/chntpw-0.99.6# cd debian/
QU /root/work/src/chntpw-0.99.6/debian# ls
changelog  chntpw.8  compat  control  copyright  dirs  docs  patches  README.source  rules  watch
QU /root/work/src/chntpw-0.99.6/debian# ..
QU /root/work/src/chntpw-0.99.6# ls
chntpw-before.c  cpnt.c   edlib.o      INSTALL.txt  ntreg.c  README.txt   sam.h
chntpw.c         debian   GPL.txt      LGPL.txt     ntreg.h  reged.c      WinReg.txt
chntpw.o         edlib.c  HISTORY.txt  Makefile     ntreg.o  regedit.txt
QU /root/work/src/chntpw-0.99.6# make clean
rm -f *.o chntpw chntpw.static cpnt reged reged.static *~
QU /root/work/src/chntpw-0.99.6# ls
chntpw-before.c  cpnt.c  edlib.c  HISTORY.txt  LGPL.txt  ntreg.c  README.txt  regedit.txt  WinReg.txt
chntpw.c         debian  GPL.txt  INSTALL.txt  Makefile  ntreg.h  reged.c     sam.h
QU /root/work/src/chntpw-0.99.6# ..
QU /root/work/src# ls
chntpw-0.99.6  chntpw_0.99.6-3kali3.diff.gz  chntpw_0.99.6-3kali3.dsc  chntpw_0.99.6.orig.tar.gz
QU /root/work/src# rm -rf chntpw-0.99.6/ 
QU /root/work/src# 
QU /root/work/src# 
QU /root/work/src# 
* Mon 08 Apr 2013 10:28:01 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/giin_f.htm
* Mon 08 Apr 2013 10:29:50 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/1giin.htm
* Mon 08 Apr 2013 10:33:11 AM JST
/html/body/table[2]/tbody/tr/td/table
* Mon 08 Apr 2013 10:57:37 AM JST

* Mon 08 Apr 2013 10:57:38 AM JST

* Mon 08 Apr 2013 10:57:38 AM JST
00000f(return 16 ())

* Mon 08 Apr 2013 10:57:38 AM JST
00000f(return 16 ())

* Mon 08 Apr 2013 10:57:38 AM JST
00000f(return 16 ())
00000f(return 17 ())

* Mon 08 Apr 2013 10:59:10 AM JST
page = urllib2.urlopen('http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/1giin.htm')
* Mon 08 Apr 2013 11:05:41 AM JST
list(
* Mon 08 Apr 2013 11:11:48 AM JST
'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/1giin.htm'
* Mon 08 Apr 2013 11:12:08 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/2giin.htm
* Mon 08 Apr 2013 11:12:23 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/3giin.htm
* Mon 08 Apr 2013 11:12:38 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/5giin.htm
* Mon 08 Apr 2013 11:13:06 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/6giin.htm
* Mon 08 Apr 2013 11:13:20 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/7giin.htm
* Mon 08 Apr 2013 11:13:33 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/8giin.htm
* Mon 08 Apr 2013 11:13:47 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/9giin.htm
* Mon 08 Apr 2013 11:13:58 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/10giin.htm
* Mon 08 Apr 2013 11:17:50 AM JST
list(
* Mon 08 Apr 2013 11:34:01 AM JST
print(str(i) + row.xpath('./td')[i].text_content())
* Mon 08 Apr 2013 11:42:01 AM JST

* Mon 08 Apr 2013 11:42:01 AM JST

* Mon 08 Apr 2013 11:42:01 AM JST
    # 4 = 

* Mon 08 Apr 2013 11:49:59 AM JST
QU /root/.pylib/portable# 1111111111111111111111111111111111111111111111111111111111111
* Mon 08 Apr 2013 11:55:46 AM JST
print(str(i) + 
* Mon 08 Apr 2013 11:57:54 AM JST
page = urllib2.urlopen('http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/1giin.htm')
html = page.read()
doc = lxml.html.fromstring(html)
table = doc.xpath('//table/tr')

* Mon 08 Apr 2013 12:01:06 PM JST
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)
* Mon 08 Apr 2013 12:07:09 PM JST
row.xpath('./td')[i].text_content()
* Mon 08 Apr 2013 12:10:07 PM JST

* Mon 08 Apr 2013 12:10:07 PM JST

* Mon 08 Apr 2013 12:10:07 PM JST
                print(type(row.xpath('./td')[i].text_content()))

* Mon 08 Apr 2013 12:10:08 PM JST

* Mon 08 Apr 2013 12:10:08 PM JST

* Mon 08 Apr 2013 12:10:08 PM JST
        print(lis)

* Mon 08 Apr 2013 12:10:08 PM JST
        print(lis)

* Mon 08 Apr 2013 12:10:08 PM JST
        print(lis)
        print(type(lis[0]))

* Mon 08 Apr 2013 12:35:08 PM JST
cvs'
* Mon 08 Apr 2013 12:35:08 PM JST
fname + '.cvs'
* Mon 08 Apr 2013 12:36:22 PM JST
syuugiin = {'a': 'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/1giin.htm',
            'ka': 'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/2giin.htm',
            'sa': 'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/3giin.htm',
            'ta': 'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/5giin.htm',
            'na': 'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/5giin.htm',
            'ha': 'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/6giin.htm',
            'ma': 'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/7giin.htm',
            'ya': 'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/8giin.htm',
            'ra': 'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/9giin.htm',
            'wa': 'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/10giin.htm'}

* Mon 08 Apr 2013 12:39:44 PM JST

* Mon 08 Apr 2013 12:39:44 PM JST

* Mon 08 Apr 2013 12:39:44 PM JST
            print(lis)

* Mon 08 Apr 2013 12:40:57 PM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/8giin.htm
* Mon 08 Apr 2013 12:45:10 PM JST
for fname, url  in syuugiin.iteritems():
    fname = fname + '_syuugiin.cvs'
    with open(fname, 'wb') as csvfile:
        writer = unicodecsv.writer(csvfile)

        page = urllib2.urlopen(url)
        html = page.read()
        doc = lxml.html.fromstring(html)
        table = doc.xpath('//table/tr')

        for row in table[3:]:
            # 0 = name
            # 1 = hiragana
            # 2 = political party
            # 3 = electoral district
            lis = []
            for i in range(4):
                if 1 != i:
                    lis.append(row.xpath('./td')[i].text_content().replace('\n', ''))
            writer.writerow(lis)

* Mon 08 Apr 2013 12:45:18 PM JST

* Mon 08 Apr 2013 12:45:18 PM JST

* Mon 08 Apr 2013 12:45:18 PM JST
	pass

* Mon 08 Apr 2013 12:46:06 PM JST
    
* Mon 08 Apr 2013 12:46:23 PM JST
fname
* Mon 08 Apr 2013 12:46:32 PM JST

* Mon 08 Apr 2013 12:46:32 PM JST

* Mon 08 Apr 2013 12:46:32 PM JST
    print()

* Mon 08 Apr 2013 01:06:14 PM JST
            page = urllib2.urlopen(url)
            html = page.read()
            doc = lxml.html.fromstring(html)
            table = doc.xpath('//table/tr')

* Mon 08 Apr 2013 01:06:32 PM JST
table = 
* Mon 08 Apr 2013 01:14:09 PM JST
urllib2.HTTPError
* Mon 08 Apr 2013 01:16:44 PM JST
pass err
* Mon 08 Apr 2013 01:16:44 PM JST
        pass err
* Mon 08 Apr 2013 01:16:47 PM JST

* Mon 08 Apr 2013 01:16:47 PM JST

* Mon 08 Apr 2013 01:16:47 PM JST
    page = urllib2.urlopen(url)

* Mon 08 Apr 2013 01:18:47 PM JST

* Mon 08 Apr 2013 01:18:47 PM JST

* Mon 08 Apr 2013 01:18:47 PM JST
try:

* Mon 08 Apr 2013 01:18:53 PM JST

* Mon 08 Apr 2013 01:18:54 PM JST

* Mon 08 Apr 2013 01:18:54 PM JST
except urllib2.HTTPError:

* Mon 08 Apr 2013 01:18:54 PM JST
except urllib2.HTTPError:

* Mon 08 Apr 2013 01:18:54 PM JST
except urllib2.HTTPError:
	print(fname)

* Mon 08 Apr 2013 01:27:52 PM JST
                
* Mon 08 Apr 2013 01:30:47 PM JST
path.
* Mon 08 Apr 2013 01:33:11 PM JST
syuugiin_nm
* Mon 08 Apr 2013 01:35:02 PM JST
os.path.join(os.getcwd(), syuugiin_nm)
* Mon 08 Apr 2013 01:36:32 PM JST

* Mon 08 Apr 2013 01:36:32 PM JST

* Mon 08 Apr 2013 01:36:32 PM JST
    os.chdir(syuugiin_nm)

* Mon 08 Apr 2013 01:37:51 PM JST
path.
* Mon 08 Apr 2013 01:38:37 PM JST

* Mon 08 Apr 2013 01:38:37 PM JST

* Mon 08 Apr 2013 01:38:37 PM JST
make_csv_syuugiin()

* Mon 08 Apr 2013 01:38:41 PM JST

* Mon 08 Apr 2013 01:38:41 PM JST

* Mon 08 Apr 2013 01:38:42 PM JST
    pass

* Mon 08 Apr 2013 02:06:47 PM JST

* Mon 08 Apr 2013 02:06:47 PM JST

* Mon 08 Apr 2013 02:06:47 PM JST
        fname = os.path.join(save_path, fname + '_' + syuugiin_nm + '.cvs')

* Mon 08 Apr 2013 02:08:57 PM JST
fname
* Mon 08 Apr 2013 02:09:34 PM JST

* Mon 08 Apr 2013 02:09:34 PM JST

* Mon 08 Apr 2013 02:09:34 PM JST
                writer = unicodecsv.writer(csvfile)

* Mon 08 Apr 2013 02:30:22 PM JST
svn checkout http://pygoogle.googlecode.com/svn/trunk/ pygoogle-read-only
* Mon 08 Apr 2013 02:33:52 PM JST
site:www.jimin.jp うえの
* Mon 08 Apr 2013 02:35:09 PM JST
http://www.jimin.jp/member/member_list/legislator/115967.html
* Mon 08 Apr 2013 02:41:37 PM JST
site:www.jimin.jp
* Mon 08 Apr 2013 02:58:13 PM JST

* Mon 08 Apr 2013 02:58:13 PM JST

* Mon 08 Apr 2013 02:58:14 PM JST
                    if 1 != i:

* Mon 08 Apr 2013 03:09:43 PM JST
choose
* Mon 08 Apr 2013 03:10:08 PM JST
party_site = {'自民': 'www.jimin.jp',
              '民主': '',
              '公明': '',
              'みんな': '',
              '維新': '',
              '共産': '',
              '社民': '',
              }

* Mon 08 Apr 2013 03:11:37 PM JST
import
* Mon 08 Apr 2013 03:11:48 PM JST
pygoogle
* Mon 08 Apr 2013 03:11:48 PM JST
 pygoogle
* Mon 08 Apr 2013 03:34:34 PM JST
    try:
        page = urllib2.urlopen(url)
    except urllib2.HTTPError, err:
        print("Error with: " + str(err.code))
        print(url)
        sys.exit(1)

    html = page.read()
    doc = lxml.html.fromstring(html)

* Mon 08 Apr 2013 03:35:02 PM JST
doc = 
* Mon 08 Apr 2013 03:35:41 PM JST
doc
* Mon 08 Apr 2013 03:39:22 PM JST
def make_soup(url):
    """SUMMARY
    
    @Arguments:
    - `url`:
    
    @Return:
    """
    try:
        page = urllib2.urlopen(url)
    except urllib2.HTTPError, err:
        print("Error with: " + str(err.code))
        print(url)
        sys.exit(1)

    html = page.read()
    return lxml.html.fromstring(html)

* Mon 08 Apr 2013 03:39:25 PM JST

In [20]: 

In [20]: 

In [20]: 
* Mon 08 Apr 2013 03:39:34 PM JST
def make_soup(url):
    """SUMMARY
    
    @Arguments:
    - `url`:
    
    @Return:
    """
    try:
        page = urllib2.urlopen(url)
    except urllib2.HTTPError, err:
        print("Error with: " + str(err.code))
        print(url)
        sys.exit(1)

    html = page.read()
    return lxml.html.fromstring(html)

* Mon 08 Apr 2013 03:41:30 PM JST
http://www.jimin.jp/member/member_list/legislator/115967.html
* Mon 08 Apr 2013 03:41:52 PM JST
In [27]: soup = make_soup('http://www.jimin.jp/member/member_list/legislator/115967.html')
* Mon 08 Apr 2013 03:43:09 PM JST
//*[@id="memberContents"]/ul/li[1]/p/a
* Mon 08 Apr 2013 03:46:44 PM JST
soup.xpath('//*[@id="memberContents"]/ul/li[1]/p/a')[0].attrib['href']
* Mon 08 Apr 2013 03:49:03 PM JST
'//*[@id="memberContents"]/ul/li[1]/p/a'
* Mon 08 Apr 2013 03:49:08 PM JST
[0].attrib['href']
* Mon 08 Apr 2013 03:51:07 PM JST
soup.xpath('//*[@id="memberContents"]/ul/li[1]/p/a')[0].attrib['href']
* Mon 08 Apr 2013 04:14:25 PM JST
www.dpj.or.jp
* Mon 08 Apr 2013 04:14:39 PM JST
www.jcp.or.jp
* Mon 08 Apr 2013 04:15:32 PM JST
http://www.komei.or.jp/
* Mon 08 Apr 2013 04:16:56 PM JST
http://www.your-party.jp/
* Mon 08 Apr 2013 04:17:28 PM JST
http://j-ishin.jp/
* Mon 08 Apr 2013 04:18:33 PM JST
www5.sdp.or.jp
* Mon 08 Apr 2013 04:26:00 PM JST

* Mon 08 Apr 2013 04:26:00 PM JST

* Mon 08 Apr 2013 04:26:00 PM JST
import re

* Mon 08 Apr 2013 04:26:30 PM JST

* Mon 08 Apr 2013 04:26:30 PM JST

* Mon 08 Apr 2013 04:26:30 PM JST
from __future__ import unicode_literals

* Mon 08 Apr 2013 04:31:27 PM JST
name
* Mon 08 Apr 2013 04:32:21 PM JST

* Mon 08 Apr 2013 04:32:21 PM JST

* Mon 08 Apr 2013 04:32:21 PM JST
    name = name.encode('utf-8')

* Mon 08 Apr 2013 04:32:22 PM JST
    name = name.encode('utf-8')

* Mon 08 Apr 2013 04:32:22 PM JST
    name = name.encode('utf-8')
    party = party.encode('utf-8')

* Mon 08 Apr 2013 04:36:02 PM JST

* Mon 08 Apr 2013 04:36:02 PM JST

* Mon 08 Apr 2013 04:36:02 PM JST
    print(type(name))

* Mon 08 Apr 2013 04:36:07 PM JST
8
* Mon 08 Apr 2013 04:36:27 PM JST
unicode
* Mon 08 Apr 2013 04:44:17 PM JST
print(repr(
* Mon 08 Apr 2013 04:44:28 PM JST
party = 
* Mon 08 Apr 2013 04:46:15 PM JST

* Mon 08 Apr 2013 04:46:15 PM JST

* Mon 08 Apr 2013 04:46:15 PM JST
    print(repr(query))

* Mon 08 Apr 2013 04:46:15 PM JST
    print(repr(query))

* Mon 08 Apr 2013 04:46:15 PM JST
    print(repr(query))
    print(type(name))

* Mon 08 Apr 2013 04:46:18 PM JST

* Mon 08 Apr 2013 04:46:18 PM JST

* Mon 08 Apr 2013 04:46:18 PM JST
    name = name.decode('utf-8').encode('ascii')

* Mon 08 Apr 2013 04:46:18 PM JST
    name = name.decode('utf-8').encode('ascii')

* Mon 08 Apr 2013 04:46:18 PM JST
    name = name.decode('utf-8').encode('ascii')
    party = party.decode('utf-8').encode('ascii')

* Mon 08 Apr 2013 04:47:03 PM JST
'ascii' codec can't encode characters
* Mon 08 Apr 2013 04:48:24 PM JST
.encode('utf-8')
* Mon 08 Apr 2013 04:55:55 PM JST
//*[@id="memberContents"]/ul/li[2]
* Mon 08 Apr 2013 04:56:04 PM JST
//*[@id="memberContents"]/ul/li[2]
* Mon 08 Apr 2013 05:03:21 PM JST
http://ja.wikipedia.org/wiki/青木さやか
* Mon 08 Apr 2013 05:14:53 PM JST

* Mon 08 Apr 2013 05:14:53 PM JST

* Mon 08 Apr 2013 05:14:53 PM JST
                soup = make_soup(get_sampling(lis[0], lis[2]))

* Mon 08 Apr 2013 05:22:08 PM JST
[:-2]
* Mon 08 Apr 2013 05:23:18 PM JST
.replace('君', '')
* Mon 08 Apr 2013 05:38:06 PM JST
                    soup = make_soup(get_sampling(lis[0].replace('君', ''), lis[2]))
                    try:
                        # homepage
                        lis.append(soup.xpath(
                            '//li[@class="homepage start"]/p/a')[0].attrib['href'])

                        # blog
                        lis.append(soup.xpath(
                            '//li[@class="blog"]/p/a')[0].attrib['href'])
                    except IndexError:
                        pass

* Mon 08 Apr 2013 11:47:23 PM JST
~/.emacs.d/backup_e/old/
* Tue 09 Apr 2013 01:02:56 AM JST
Pseudo
* Tue 09 Apr 2013 01:03:50 AM JST
member 
* Tue 09 Apr 2013 01:05:42 AM JST
dic
* Tue 09 Apr 2013 01:05:45 AM JST
dic
* Tue 09 Apr 2013 04:56:15 AM JST
       
* Tue 09 Apr 2013 04:56:28 AM JST
       
* Tue 09 Apr 2013 04:56:39 AM JST
true
* Tue 09 Apr 2013 05:03:03 AM JST
       
* Tue 09 Apr 2013 05:03:15 AM JST
syuu-san, name, kana, party, location, homepage, blog, twitter, rss
* Tue 09 Apr 2013 05:13:32 AM JST
define pygoogle (query)
       search with query
       return top result

* Tue 09 Apr 2013 05:16:55 AM JST
       
* Tue 09 Apr 2013 05:41:58 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/1giin.htm
* Tue 09 Apr 2013 05:42:28 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/giin_f.htm
* Tue 09 Apr 2013 05:42:42 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/2giin.htm
* Tue 09 Apr 2013 05:42:51 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/3giin.htm
* Tue 09 Apr 2013 05:42:56 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/4giin.htm
* Tue 09 Apr 2013 05:43:03 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/5giin.htm
* Tue 09 Apr 2013 05:43:09 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/6giin.htm
* Tue 09 Apr 2013 05:43:14 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/7giin.htm
* Tue 09 Apr 2013 05:43:19 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/8giin.htm
* Tue 09 Apr 2013 05:43:24 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/9giin.htm
* Tue 09 Apr 2013 05:43:30 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/10giin.htm
* Tue 09 Apr 2013 05:43:39 AM JST

* Tue 09 Apr 2013 05:43:39 AM JST

* Tue 09 Apr 2013 05:43:39 AM JST
# define list of syuugiin sites

* Tue 09 Apr 2013 05:44:16 AM JST
http://www.sangiin.go.jp/japanese/joho1/kousei/giin/183/giin.htm
* Tue 09 Apr 2013 05:46:33 AM JST

* Tue 09 Apr 2013 05:46:33 AM JST

* Tue 09 Apr 2013 05:46:33 AM JST
# define list of sangiin sites

* Tue 09 Apr 2013 05:46:44 AM JST

* Tue 09 Apr 2013 05:46:44 AM JST

* Tue 09 Apr 2013 05:46:44 AM JST
# define dic of syuugiin sites and sangiin sites

* Tue 09 Apr 2013 05:46:56 AM JST
sites
* Tue 09 Apr 2013 05:46:58 AM JST
sangiin
* Tue 09 Apr 2013 05:49:22 AM JST
# define lxml function (cache=true)
#        set tmp directory
#        if not exists name.html or not atime of name.html is today or cache is false
#               get html from web
#        open name.html
#        extract by lxml
#        return

* Tue 09 Apr 2013 06:14:32 AM JST
'http://www.sangiin.go.jp/japanese/joho1/kousei/giin/183/giin.htm'
* Tue 09 Apr 2013 06:35:47 AM JST
urllib2
* Tue 09 Apr 2013 06:51:33 AM JST
os.path.getmtime('tor_block.sh')
* Tue 09 Apr 2013 06:56:12 AM JST
urllib2
* Tue 09 Apr 2013 07:29:01 AM JST

* Tue 09 Apr 2013 07:29:01 AM JST

* Tue 09 Apr 2013 07:29:01 AM JST
            html = page.read()

* Tue 09 Apr 2013 07:38:49 AM JST
OSError
* Tue 09 Apr 2013 07:42:06 AM JST
doc = 
* Tue 09 Apr 2013 07:55:50 AM JST
"""
* Tue 09 Apr 2013 07:55:57 AM JST
"""
* Tue 09 Apr 2013 08:02:40 AM JST
Jimin
* Tue 09 Apr 2013 08:05:11 AM JST
class
* Tue 09 Apr 2013 08:05:13 AM JST
class DPJ(Lawmaker):
    """
    """
    pass

* Tue 09 Apr 2013 08:05:25 AM JST
DPJ
* Tue 09 Apr 2013 08:05:43 AM JST
class DPJ(Lawmaker):
    """
    """
    pass

* Tue 09 Apr 2013 08:05:46 AM JST
DPJ
* Tue 09 Apr 2013 08:05:59 AM JST
class DPJ(Lawmaker):
    """
    """
    pass

* Tue 09 Apr 2013 08:06:04 AM JST
DPJ
* Tue 09 Apr 2013 08:07:06 AM JST
class
* Tue 09 Apr 2013 08:07:09 AM JST
class DPJ(Lawmaker):
    """
    """
    pass

* Tue 09 Apr 2013 08:07:13 AM JST
DPJ
* Tue 09 Apr 2013 08:07:26 AM JST
class DPJ(Lawmaker):
    """
    """
    pass

* Tue 09 Apr 2013 08:07:28 AM JST
DPJ
* Tue 09 Apr 2013 08:11:01 AM JST
www.jimin.jp
* Tue 09 Apr 2013 08:20:27 AM JST
import 
* Tue 09 Apr 2013 08:20:48 AM JST
from pygoogle 
* Tue 09 Apr 2013 08:22:59 AM JST
pygoogle.
* Tue 09 Apr 2013 08:23:20 AM JST
search()
* Tue 09 Apr 2013 08:23:59 AM JST
pygoogle
* Tue 09 Apr 2013 08:24:33 AM JST
http://code.google.com/apis/ajaxsearch/documentation/reference.html
* Tue 09 Apr 2013 08:27:56 AM JST
get_google_feeling_lucky
* Tue 09 Apr 2013 08:36:07 AM JST

* Tue 09 Apr 2013 08:36:08 AM JST

* Tue 09 Apr 2013 08:36:08 AM JST
"""

* Tue 09 Apr 2013 08:44:53 AM JST
pass
* Tue 09 Apr 2013 08:48:32 AM JST

* Tue 09 Apr 2013 08:48:32 AM JST

* Tue 09 Apr 2013 08:48:32 AM JST
    query = 'site:' + self.url + ' '

* Tue 09 Apr 2013 08:48:36 AM JST

* Tue 09 Apr 2013 08:48:37 AM JST

* Tue 09 Apr 2013 08:48:37 AM JST
    get_google_feeling_lucky()

* Tue 09 Apr 2013 08:55:51 AM JST
not
* Tue 09 Apr 2013 08:55:58 AM JST
pass
* Tue 09 Apr 2013 08:59:56 AM JST
    @property
    def homepage(self):
        """SUMMARY

        @Return:
        """
        if '' == self.homepage:
            self.set_additional_info()
        return self.homepage

    @property
    def blog(self):
        """SUMMARY

        @Return:
        """
        if '' == self.blog:
            self.set_additional_info()
        return self.blog

    @property
    def twitter(self):
        """SUMMARY

        @Return:
        """
        if '' == self.twitter:
            self.set_additional_info()
        return self.twitter

    @property
    def rss(self):
        """SUMMARY
        
        @Return:
        """
        if '' == self.rss:
            self.set_additional_info()
        return self.rss


* Tue 09 Apr 2013 09:06:41 AM JST
def get_html_filename(url):
    """SUMMARY

    @Arguments:
    - `url`:

    @Return:
    """
    name = url.split('/')[-1]
    if 'index.html' == name:
        import urlparse
        netloc = urlparse.urlsplit(url).netloc
        name = netloc + '.' + name
    return name

* Tue 09 Apr 2013 09:07:45 AM JST

* Tue 09 Apr 2013 09:07:45 AM JST

* Tue 09 Apr 2013 09:07:46 AM JST
    """

* Tue 09 Apr 2013 09:10:09 AM JST
http://www.jimin.jp/member/member_list/legislator/115967.html
* Tue 09 Apr 2013 09:30:39 AM JST
yesterday
* Tue 09 Apr 2013 09:30:39 AM JST
mtime < yesterday
* Tue 09 Apr 2013 09:34:02 AM JST
//*[@id="memberContents"]/ul
* Tue 09 Apr 2013 09:39:59 AM JST
doc.xpath('//*[@class="homepage start"]/p/a')[0].attrib['href']
* Tue 09 Apr 2013 09:42:56 AM JST
'//*[@class="homepage start"]/p/a')[0].attrib['href']
* Tue 09 Apr 2013 09:43:03 AM JST
start
* Tue 09 Apr 2013 09:43:03 AM JST
homepage start
* Tue 09 Apr 2013 09:43:32 AM JST
homepage
* Tue 09 Apr 2013 09:43:48 AM JST
doc.xpath('//*[@class="blog"]/p/a')[0].attrib['href']
* Tue 09 Apr 2013 09:43:52 AM JST
blog
* Tue 09 Apr 2013 09:54:23 AM JST
http://www.aaronsw.com/2002/feedfinder/feedfinder.py
* Tue 09 Apr 2013 09:56:35 AM JST
http://ameblo.jp/uenokenichiro
* Tue 09 Apr 2013 10:16:21 AM JST
http://www.asahi.com/
* Tue 09 Apr 2013 10:40:44 AM JST
http://www.syndic8.com
* Tue 09 Apr 2013 10:46:35 AM JST
javascript:function txt(str){return document.createTextNode(str)}function tag(n,c){var e=document.createElement(n);e.style.fontFamily='Arial,sans-serif';e.style.color='#000';if(c)e.appendChild(c);return e}function p(c){return tag('p',c)}function a(href,desc){e=tag('a',txt(desc));e.href=href;e.style.color='#00c';e.style.textDecoration='underline';return e}var el=tag('div');el.style.zIndex=100000;el.style.position='absolute';el.style.padding='20px';el.style.top='10px';el.style.left='10px';el.style.backgroundColor='#ffffcc';el.style.border='1px solid #333333';el.style.textAlign='left';var ul=tag('ul');var found=false;var links=document.getElementsByTagName('link');for(var i=0,link;link=links[i];i++){var type=link.getAttribute('type');var rel=link.getAttribute('rel');if(type&&(type=='application/rss+xml'||type=='application/atom+xml')&&rel&&rel=='alternate'){var href=link.getAttribute('href');if(!href.match(/^http/)){var path=(href.match(/^\//))? '/' : location.pathname;href='http://'+location.hostname+path+href;}var title=link.getAttribute('title');ul.appendChild(tag('li',a(href,((title) ? title+' - ' : '')+href)));found=true;}}if(found){el.appendChild(p(txt('The current page links to these feeds:')));el.appendChild(ul);}else{el.appendChild(p(txt('The current page does not link to any feeds.')));}var close=a('#','Close');close.onclick=function(){el.style.display='none';return false;};el.appendChild(p(close));function addFeedBox(){document.body.appendChild(el);y=window.scroll(0,0);}void(z=addFeedBox());
* Tue 09 Apr 2013 11:26:24 AM JST
aecjdopeahbjebcnpfdmbffecbgoofal
* Tue 09 Apr 2013 11:43:10 AM JST
http://ameblo.jp/uenokenichiro
* Tue 09 Apr 2013 11:43:56 AM JST
'//link[@rel="alternate"][contains(@type, "rss") or ' +
      'contains(@type, "atom") or contains(@type, "rdf")]'
* Tue 09 Apr 2013 11:44:05 AM JST
                                  
* Tue 09 Apr 2013 11:44:21 AM JST
'//link[@rel="alternate"][contains(@type, "rss") or contains(@type, "atom") or contains(@type, "rdf")]'
* Tue 09 Apr 2013 11:45:55 AM JST
'//link[@rel="alternate"][contains(@type, "rss") or contains(@typ
e, "atom") or contains(@type, "rdf")]')[0].attrib['href'
* Tue 09 Apr 2013 11:49:41 AM JST
rss
* Tue 09 Apr 2013 11:53:26 AM JST
http://labo.tv/2chnews/
* Tue 09 Apr 2013 11:59:09 AM JST
http://labo.tv/2chnews/index.xml
* Tue 09 Apr 2013 11:59:23 AM JST
http://www.google.com/ig/directory?url=http://labo.tv/2chnews/gadget.xml
* Tue 09 Apr 2013 12:02:26 PM JST
                
* Tue 09 Apr 2013 12:04:03 PM JST

* Tue 09 Apr 2013 12:04:03 PM JST

* Tue 09 Apr 2013 12:04:03 PM JST
        return feed_link

* Tue 09 Apr 2013 12:06:10 PM JST
['.rss', '.xml', '.rdf']
* Tue 09 Apr 2013 12:06:34 PM JST
extlist
* Tue 09 Apr 2013 12:08:22 PM JST
lxml_soup
* Tue 09 Apr 2013 12:08:56 PM JST
doc
* Tue 09 Apr 2013 12:17:09 PM JST
rss_links = 
* Tue 09 Apr 2013 12:29:07 PM JST
    
* Tue 09 Apr 2013 12:29:37 PM JST

* Tue 09 Apr 2013 12:29:37 PM JST

* Tue 09 Apr 2013 12:29:37 PM JST
                  homepage,

* Tue 09 Apr 2013 12:29:38 PM JST
                  homepage,

* Tue 09 Apr 2013 12:29:38 PM JST
                  homepage,
                  blog,

* Tue 09 Apr 2013 12:29:38 PM JST
                  homepage,
                  blog,

* Tue 09 Apr 2013 12:29:38 PM JST
                  homepage,
                  blog,
                  twitter,

* Tue 09 Apr 2013 12:29:40 PM JST
rss
* Tue 09 Apr 2013 12:29:42 PM JST
                  rss
* Tue 09 Apr 2013 12:29:55 PM JST

* Tue 09 Apr 2013 12:29:55 PM JST

* Tue 09 Apr 2013 12:29:55 PM JST
                 homepage,

* Tue 09 Apr 2013 12:29:55 PM JST
                 homepage,

* Tue 09 Apr 2013 12:29:55 PM JST
                 homepage,
                 blog,

* Tue 09 Apr 2013 12:29:55 PM JST
                 homepage,
                 blog,

* Tue 09 Apr 2013 12:29:55 PM JST
                 homepage,
                 blog,
                 twitter,

* Tue 09 Apr 2013 12:29:58 PM JST
rss
* Tue 09 Apr 2013 12:29:58 PM JST
                 rss
* Tue 09 Apr 2013 12:30:37 PM JST

* Tue 09 Apr 2013 12:30:37 PM JST

* Tue 09 Apr 2013 12:30:37 PM JST
        self._homepage = homepage

* Tue 09 Apr 2013 12:30:37 PM JST
        self._homepage = homepage

* Tue 09 Apr 2013 12:30:37 PM JST
        self._homepage = homepage
        self._blog = blog

* Tue 09 Apr 2013 12:30:37 PM JST
        self._homepage = homepage
        self._blog = blog

* Tue 09 Apr 2013 12:30:37 PM JST
        self._homepage = homepage
        self._blog = blog
        self._twitter = twitter

* Tue 09 Apr 2013 12:30:38 PM JST
        self._homepage = homepage
        self._blog = blog
        self._twitter = twitter

* Tue 09 Apr 2013 12:30:38 PM JST
        self._homepage = homepage
        self._blog = blog
        self._twitter = twitter
        self._rss = rss

* Tue 09 Apr 2013 12:30:52 PM JST

* Tue 09 Apr 2013 12:30:52 PM JST

* Tue 09 Apr 2013 12:30:52 PM JST
                            homepage,

* Tue 09 Apr 2013 12:30:52 PM JST
                            homepage,

* Tue 09 Apr 2013 12:30:52 PM JST
                            homepage,
                            blog,

* Tue 09 Apr 2013 12:30:53 PM JST
                            homepage,
                            blog,

* Tue 09 Apr 2013 12:30:53 PM JST
                            homepage,
                            blog,
                            twitter,

* Tue 09 Apr 2013 12:30:55 PM JST
rss
* Tue 09 Apr 2013 12:30:55 PM JST
                            rss
* Tue 09 Apr 2013 12:40:07 PM JST

* Tue 09 Apr 2013 12:40:07 PM JST

* Tue 09 Apr 2013 12:40:07 PM JST
    _location = False

* Tue 09 Apr 2013 12:40:08 PM JST

* Tue 09 Apr 2013 12:40:08 PM JST

* Tue 09 Apr 2013 12:40:08 PM JST
    _party = False

* Tue 09 Apr 2013 12:40:08 PM JST

* Tue 09 Apr 2013 12:40:09 PM JST

* Tue 09 Apr 2013 12:40:09 PM JST
    _kana = False

* Tue 09 Apr 2013 12:43:07 PM JST
False
* Tue 09 Apr 2013 12:43:09 PM JST
False
* Tue 09 Apr 2013 12:43:16 PM JST
_has_
* Tue 09 Apr 2013 12:43:18 PM JST
_has_
* Tue 09 Apr 2013 12:43:21 PM JST
_has_
* Tue 09 Apr 2013 12:43:23 PM JST
_has_
* Tue 09 Apr 2013 12:43:26 PM JST
False
* Tue 09 Apr 2013 12:43:27 PM JST
False
* Tue 09 Apr 2013 12:43:38 PM JST

* Tue 09 Apr 2013 12:43:38 PM JST

* Tue 09 Apr 2013 12:43:38 PM JST
    homepage = 

* Tue 09 Apr 2013 12:43:38 PM JST
    homepage = 

* Tue 09 Apr 2013 12:43:38 PM JST
    homepage = 
    blog = 

* Tue 09 Apr 2013 12:43:38 PM JST
    homepage = 
    blog = 

* Tue 09 Apr 2013 12:43:38 PM JST
    homepage = 
    blog = 
    twitter = 

* Tue 09 Apr 2013 12:43:39 PM JST
    homepage = 
    blog = 
    twitter = 

* Tue 09 Apr 2013 12:43:39 PM JST
    homepage = 
    blog = 
    twitter = 
    rss = 

* Tue 09 Apr 2013 12:43:40 PM JST
    homepage = 
    blog = 
    twitter = 
    rss = 

* Tue 09 Apr 2013 12:43:40 PM JST
    homepage = 
    blog = 
    twitter = 
    rss = 
    homepage = ''

* Tue 09 Apr 2013 12:43:41 PM JST
    homepage = 
    blog = 
    twitter = 
    rss = 
    homepage = ''

* Tue 09 Apr 2013 12:43:41 PM JST
    homepage = 
    blog = 
    twitter = 
    rss = 
    homepage = ''
    blog = ''

* Tue 09 Apr 2013 12:43:41 PM JST
    homepage = 
    blog = 
    twitter = 
    rss = 
    homepage = ''
    blog = ''

* Tue 09 Apr 2013 12:43:41 PM JST
    homepage = 
    blog = 
    twitter = 
    rss = 
    homepage = ''
    blog = ''
    twitter = ''

* Tue 09 Apr 2013 12:43:41 PM JST
    homepage = 
    blog = 
    twitter = 
    rss = 
    homepage = ''
    blog = ''
    twitter = ''

* Tue 09 Apr 2013 12:43:41 PM JST
    homepage = 
    blog = 
    twitter = 
    rss = 
    homepage = ''
    blog = ''
    twitter = ''
    rss = ''

* Tue 09 Apr 2013 12:45:22 PM JST
if '' == 
* Tue 09 Apr 2013 12:48:51 PM JST
8')
* Tue 09 Apr 2013 12:55:37 PM JST
pass
* Tue 09 Apr 2013 12:56:56 PM JST
http://www.dpj.or.jp/
* Tue 09 Apr 2013 12:57:01 PM JST
http:/
* Tue 09 Apr 2013 12:59:53 PM JST
//*[@id="member-content"]/div[2]/table/tbody/tr[9]/td/a
* Tue 09 Apr 2013 01:00:33 PM JST
http://www.dpj.or.jp/member/2
* Tue 09 Apr 2013 01:02:39 PM JST
//*[@id="member-content"]/div[2]/table/tbody/tr[9]/td/a
* Tue 09 Apr 2013 01:10:16 PM JST
query = 'site:' + self.url + ' ' + self.name
* Tue 09 Apr 2013 01:10:19 PM JST
        query = 'site:' + self.url + ' ' + self.name
        url = get_google_feeling_lucky(query)

* Tue 09 Apr 2013 01:11:32 PM JST
//*[@id="member-content"]/div[2]/table
* Tue 09 Apr 2013 01:21:26 PM JST
txt
* Tue 09 Apr 2013 03:09:16 PM JST
http://www.komei.or.jp/
* Tue 09 Apr 2013 03:09:20 PM JST
http://
* Tue 09 Apr 2013 03:11:22 PM JST
//*[@id="main-inner"]/div/div[2]/table/tbody/tr[5]/td/ul/li[1]/a
* Tue 09 Apr 2013 03:13:30 PM JST
http://www.komei.or.jp/member/detail/12031264
* Tue 09 Apr 2013 03:13:53 PM JST
.xpath('//*[@id="main-inner"]/div/div[2]/table')[0]
* Tue 09 Apr 2013 03:15:05 PM JST
for tr in table.xpath('//tr'):
            if u'ホームページ' == tr.xpath('//th')[0].text_content():
* Tue 09 Apr 2013 03:17:02 PM JST
        if not self._rss and self._homepage:
            rss_links = feed_finder(self._homepage)
            if rss_links:
                self._rss = rss_links[0]

* Tue 09 Apr 2013 03:27:06 PM JST
http://www.your-party.jp/members/shugiin/kakizawamito.html
* Tue 09 Apr 2013 03:27:33 PM JST
//*[@id="fragment-4"]/table/tbody/tr/td[1]/div
* Tue 09 Apr 2013 03:32:11 PM JST
http://www.your-party.jp/
* Tue 09 Apr 2013 03:32:15 PM JST
http://
* Tue 09 Apr 2013 03:35:51 PM JST
xpath('//*[@class="blog-thumb-wrap"]')[0][0].attrib['href']
* Tue 09 Apr 2013 03:43:19 PM JST
_ho
* Tue 09 Apr 2013 03:43:19 PM JST
self._ho
* Tue 09 Apr 2013 03:47:17 PM JST
xpath('//*[@class="career-table"]')[0]
* Tue 09 Apr 2013 03:49:43 PM JST
            if u'ホームページ' == tr.xpath('//th')[0].text_content():
                self._homepage = tr.xpath('//a')[0].attrib['href']

* Tue 09 Apr 2013 03:53:24 PM JST
        if not self._rss and self._homepage:
            rss_links = feed_finder(self._homepage)
            if rss_links:
                self._rss = rss_links[0]

* Tue 09 Apr 2013 03:53:30 PM JST
_homepage
* Tue 09 Apr 2013 03:53:38 PM JST
_homepage
* Tue 09 Apr 2013 03:53:56 PM JST
        if not self._rss and self._homepage:
            rss_links = feed_finder(self._homepage)
            if rss_links:
                self._rss = rss_links[0]

* Tue 09 Apr 2013 03:54:22 PM JST
pass
* Tue 09 Apr 2013 04:12:08 PM JST
pass
* Tue 09 Apr 2013 04:18:27 PM JST
//*[@id="mw-content-text"]/table[1]/tbody/tr[13]/td/a
* Tue 09 Apr 2013 04:19:26 PM JST
http://ja.wikipedia.org/wiki/%E9%98%BF%E9%83%A8%E7%9F%A5%E5%AD%90
* Tue 09 Apr 2013 08:21:34 PM JST
seiji.yahoo.co.jp
* Tue 09 Apr 2013 08:21:51 PM JST
政治家'
* Tue 09 Apr 2013 08:21:57 PM JST
                 
* Tue 09 Apr 2013 08:38:46 PM JST
lxml_soup
* Tue 09 Apr 2013 08:39:22 PM JST
http://seiji.yahoo.co.jp/giin/minshu/000248/
* Tue 09 Apr 2013 08:42:46 PM JST
name
* Tue 09 Apr 2013 08:42:53 PM JST
name
* Tue 09 Apr 2013 08:42:56 PM JST
name
* Tue 09 Apr 2013 08:43:08 PM JST
赤松　　広隆
* Tue 09 Apr 2013 08:43:20 PM JST
'http://seiji.yahoo.co.jp/giin/minshu/000248'
* Tue 09 Apr 2013 08:50:16 PM JST
mkdir
* Tue 09 Apr 2013 08:51:15 PM JST
gettempdir(),
* Tue 09 Apr 2013 08:51:16 PM JST
tempfile.gettempdir(),
* Tue 09 Apr 2013 09:11:43 PM JST
urlopen
* Tue 09 Apr 2013 09:11:43 PM JST
urllib2.urlopen
* Tue 09 Apr 2013 09:14:55 PM JST
//*[@id="mw-content-text"]/table[2]
* Tue 09 Apr 2013 09:15:43 PM JST
doc.xpath('//*[@class="infobox"]')[0]
* Tue 09 Apr 2013 09:28:23 PM JST
table[10].xpath('td/a')[0].attrib['href']
* Tue 09 Apr 2013 09:29:12 PM JST
table[10].xpath('td/a')[0].attrib['href']
* Tue 09 Apr 2013 09:34:45 PM JST
赤松 広隆
* Tue 09 Apr 2013 09:36:23 PM JST
giin
* Tue 09 Apr 2013 09:36:23 PM JST
jp/giin
* Tue 09 Apr 2013 09:36:24 PM JST
co.jp/giin
* Tue 09 Apr 2013 09:36:24 PM JST
yahoo.co.jp/giin
* Tue 09 Apr 2013 09:36:24 PM JST
seiji.yahoo.co.jp/giin
* Tue 09 Apr 2013 09:37:20 PM JST
tr[0].text
* Tue 09 Apr 2013 09:39:17 PM JST
o = giin.Other('', '赤松 広隆', '', '', '')
* Tue 09 Apr 2013 09:43:09 PM JST
tr[0].text
* Tue 09 Apr 2013 09:43:42 PM JST
txt = 
* Tue 09 Apr 2013 09:47:42 PM JST

* Tue 09 Apr 2013 09:47:42 PM JST

* Tue 09 Apr 2013 09:47:42 PM JST
            print tr[0].text

* Tue 09 Apr 2013 09:47:42 PM JST
            print tr[0].text

* Tue 09 Apr 2013 09:47:42 PM JST
            print tr[0].text
            print type(tr[0].text)

* Tue 09 Apr 2013 09:50:15 PM JST
lxml_soup
* Tue 09 Apr 2013 09:51:11 PM JST
url = giin.get_google_feeling_lucky('site:ja.wikipedia.org 赤松 広隆 政治家')
* Tue 09 Apr 2013 09:51:19 PM JST
doc = giin.lxml_soup(url)
* Tue 09 Apr 2013 09:51:52 PM JST
table = doc.xpath('//*[@class="infobox"]')[0]
* Tue 09 Apr 2013 09:56:32 PM JST
u'公式サイト'
* Tue 09 Apr 2013 09:58:05 PM JST
u'\u516c\u5f0f\u30b5\u30a4\u30c8'
* Tue 09 Apr 2013 10:02:40 PM JST
u'\xe5\x87\xba\xe7\x94\x9f\xe5\x9c\xb0'
* Tue 09 Apr 2013 10:03:51 PM JST
print ()
* Tue 09 Apr 2013 10:03:58 PM JST
tr[0].text
* Tue 09 Apr 2013 10:06:49 PM JST

* Tue 09 Apr 2013 10:06:49 PM JST

* Tue 09 Apr 2013 10:06:50 PM JST
        print tr[0].text.encoding

* Tue 09 Apr 2013 10:06:57 PM JST

* Tue 09 Apr 2013 10:06:57 PM JST

* Tue 09 Apr 2013 10:06:57 PM JST
        print tr[0].text.encoding

* Tue 09 Apr 2013 10:07:06 PM JST

* Tue 09 Apr 2013 10:07:06 PM JST

* Tue 09 Apr 2013 10:07:06 PM JST
                print tr[0].text.encoding

* Tue 09 Apr 2013 10:07:31 PM JST

* Tue 09 Apr 2013 10:07:31 PM JST

* Tue 09 Apr 2013 10:07:31 PM JST
            print tr[0].text.encoding

* Tue 09 Apr 2013 10:13:40 PM JST
urllib2.build_opener()
* Tue 09 Apr 2013 10:26:21 PM JST
tr[0].text
* Tue 09 Apr 2013 10:26:30 PM JST

* Tue 09 Apr 2013 10:26:30 PM JST

* Tue 09 Apr 2013 10:26:30 PM JST
                print [tr[0].text]

* Tue 09 Apr 2013 10:29:30 PM JST
                
* Tue 09 Apr 2013 10:29:43 PM JST
'公式サイト'
* Tue 09 Apr 2013 10:30:05 PM JST
o = giin.Other('', '赤松 広隆', '', '', '')
* Tue 09 Apr 2013 10:31:15 PM JST
'公式サイト'
* Tue 09 Apr 2013 10:50:46 PM JST
'公式サイト'
* Tue 09 Apr 2013 10:51:45 PM JST

* Tue 09 Apr 2013 10:51:45 PM JST

* Tue 09 Apr 2013 10:51:45 PM JST
            print [unicode(tr[0].text)]

* Tue 09 Apr 2013 10:51:45 PM JST
            print [unicode(tr[0].text)]

* Tue 09 Apr 2013 10:51:45 PM JST
            print [unicode(tr[0].text)]
            print ['公式サイト']

* Tue 09 Apr 2013 10:55:04 PM JST
tr[0].text
* Tue 09 Apr 2013 10:58:47 PM JST

* Tue 09 Apr 2013 10:58:47 PM JST

* Tue 09 Apr 2013 10:58:47 PM JST
            print type(txt)

* Tue 09 Apr 2013 11:06:13 PM JST

* Tue 09 Apr 2013 11:06:13 PM JST

* Tue 09 Apr 2013 11:06:13 PM JST
            if -1 != string.find(unicode(txt), '公式サイト') :

* Tue 09 Apr 2013 11:06:18 PM JST

* Tue 09 Apr 2013 11:06:18 PM JST

* Tue 09 Apr 2013 11:06:18 PM JST
            txt = tr[0].text

* Tue 09 Apr 2013 11:06:26 PM JST
unicode(
* Tue 09 Apr 2013 11:09:37 PM JST
str(
* Tue 09 Apr 2013 11:09:44 PM JST

* Tue 09 Apr 2013 11:10:10 PM JST
'\xe5\x85\xac\xe5\xbc\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'
* Tue 09 Apr 2013 11:13:52 PM JST
u"Mozilla/5.0 (Windows; U; Windows NT 6.1; ja; rv:1.9.2.13) Gecko/20101203 Firefox/3.6.13"
* Tue 09 Apr 2013 11:14:15 PM JST
                
* Tue 09 Apr 2013 11:14:29 PM JST
0'
* Tue 09 Apr 2013 11:17:06 PM JST
tr[0].text
* Tue 09 Apr 2013 11:17:30 PM JST
'公式サイト'
* Tue 09 Apr 2013 11:34:30 PM JST
unicodedata
* Tue 09 Apr 2013 11:37:41 PM JST
codecs.encode(tr[0].text)
* Wed 10 Apr 2013 04:56:03 AM JST
table[10].xpath('td/a').attrib['href']
* Wed 10 Apr 2013 05:01:21 AM JST
table = doc.xpath('//*[@class="infobox"]')[0]
* Wed 10 Apr 2013 05:04:20 AM JST

* Wed 10 Apr 2013 05:04:20 AM JST

* Wed 10 Apr 2013 05:04:20 AM JST
            print[codecs.encode(tr[0].text)]

* Wed 10 Apr 2013 05:04:23 AM JST
            print[codecs.encode(tr[0].text)]

* Wed 10 Apr 2013 05:04:23 AM JST
            print[codecs.encode(tr[0].text)]
            print['公式サイト'.decode('utf-8')]

* Wed 10 Apr 2013 05:04:24 AM JST

* Wed 10 Apr 2013 05:04:24 AM JST

* Wed 10 Apr 2013 05:04:24 AM JST
            print('')

* Wed 10 Apr 2013 05:04:51 AM JST

* Wed 10 Apr 2013 05:04:51 AM JST

* Wed 10 Apr 2013 05:04:51 AM JST
            # if '\xe5\x85\xac\xe5\xbc\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88' == tr[0].text:

* Wed 10 Apr 2013 05:07:55 AM JST
tr[0].text
* Wed 10 Apr 2013 05:10:04 AM JST

* Wed 10 Apr 2013 05:10:04 AM JST

* Wed 10 Apr 2013 05:10:04 AM JST
        import codecs

* Wed 10 Apr 2013 05:10:13 AM JST

* Wed 10 Apr 2013 05:10:13 AM JST

* Wed 10 Apr 2013 05:10:13 AM JST
            if not '\n' == tr[0].text or tr[0].text:

* Wed 10 Apr 2013 05:11:14 AM JST
tr[0].text
* Wed 10 Apr 2013 05:12:06 AM JST
table[10][0].text
* Wed 10 Apr 2013 05:14:53 AM JST
'公式サイト'
* Wed 10 Apr 2013 05:15:07 AM JST
tr[0].text)
* Wed 10 Apr 2013 05:19:46 AM JST
                
* Wed 10 Apr 2013 05:20:01 AM JST

* Wed 10 Apr 2013 05:20:01 AM JST

* Wed 10 Apr 2013 05:20:01 AM JST
        import types

* Wed 10 Apr 2013 05:29:27 AM JST
u'\xe5\x85\xac\xe5\xbc\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'
* Wed 10 Apr 2013 05:29:54 AM JST
table[10][0].text
* Wed 10 Apr 2013 05:30:09 AM JST
u'\xe5\x85\xac\xe5\xbc\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'
* Wed 10 Apr 2013 05:31:35 AM JST

* Wed 10 Apr 2013 05:31:35 AM JST

* Wed 10 Apr 2013 05:31:35 AM JST
            print ['公式サイト']

* Wed 10 Apr 2013 05:31:36 AM JST
            print ['公式サイト']

* Wed 10 Apr 2013 05:31:36 AM JST
            print ['公式サイト']
            if tr[0].text:

* Wed 10 Apr 2013 05:31:36 AM JST
            print ['公式サイト']
            if tr[0].text:

* Wed 10 Apr 2013 05:31:36 AM JST
            print ['公式サイト']
            if tr[0].text:
                print [tr[0].text.encode('utf-8')]

* Wed 10 Apr 2013 05:31:49 AM JST

* Wed 10 Apr 2013 05:31:49 AM JST

* Wed 10 Apr 2013 05:31:49 AM JST
                print 'in!!'

* Wed 10 Apr 2013 05:33:14 AM JST
u'\xe5\x85\xac\xe5\xbc\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'
* Wed 10 Apr 2013 05:33:34 AM JST
                
* Wed 10 Apr 2013 06:06:05 AM JST
http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/1giin.htm
* Wed 10 Apr 2013 06:07:33 AM JST
/html/body/table[2]/tbody/tr/td/table
* Wed 10 Apr 2013 06:08:28 AM JST
text_content
* Wed 10 Apr 2013 06:08:28 AM JST
0].text_content
* Wed 10 Apr 2013 06:10:02 AM JST
print 
* Wed 10 Apr 2013 06:10:28 AM JST
list(
* Wed 10 Apr 2013 06:11:02 AM JST
s.xpath('//table')[2]
* Wed 10 Apr 2013 06:11:30 AM JST
if :
* Wed 10 Apr 2013 06:23:07 AM JST
table[0].xpath('td/tt/font')
* Wed 10 Apr 2013 06:23:20 AM JST
0]
* Wed 10 Apr 2013 06:23:39 AM JST
tr.xpath('td/tt/font')
* Wed 10 Apr 2013 06:26:02 AM JST
for font in 
* Wed 10 Apr 2013 06:27:01 AM JST

* Wed 10 Apr 2013 06:27:01 AM JST

* Wed 10 Apr 2013 06:27:01 AM JST
    syuugiin_list = []

* Wed 10 Apr 2013 06:27:38 AM JST
        
* Wed 10 Apr 2013 06:27:56 AM JST
        
* Wed 10 Apr 2013 06:28:23 AM JST
        
* Wed 10 Apr 2013 06:28:28 AM JST
paty
* Wed 10 Apr 2013 06:31:20 AM JST
font
* Wed 10 Apr 2013 06:37:10 AM JST
'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/1giin.htm'
* Wed 10 Apr 2013 06:39:29 AM JST
No
* Wed 10 Apr 2013 06:39:29 AM JST
is No
* Wed 10 Apr 2013 06:39:50 AM JST
not 
* Wed 10 Apr 2013 06:44:03 AM JST

* Wed 10 Apr 2013 07:08:40 AM JST
syuugiin_list
* Wed 10 Apr 2013 07:09:32 AM JST
syuugiin_list
* Wed 10 Apr 2013 07:17:22 AM JST
syuugiin = ['http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/1giin.htm',
            'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/2giin.htm',
            'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/3giin.htm',
            'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/4giin.htm',
            'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/5giin.htm',
            'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/6giin.htm',
            'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/7giin.htm',
            'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/8giin.htm',
            'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/9giin.htm',
            'http://www.shugiin.go.jp/itdb_annai.nsf/html/statics/syu/10giin.htm']
* Wed 10 Apr 2013 07:18:33 AM JST
syuugiin
* Wed 10 Apr 2013 07:30:47 AM JST
            # 0 = name
            # 1 = kana
            # 2 = paty
            # 3 = location

* Wed 10 Apr 2013 07:31:02 AM JST
            if font[i].text_content() is None:
                member_info.append('')
            else:
                member_info.append(font[i].text_content().replace('\n', ''))

* Wed 10 Apr 2013 07:31:43 AM JST
member_info
* Wed 10 Apr 2013 07:31:57 AM JST
member_info
* Wed 10 Apr 2013 07:32:27 AM JST
font[i].text_content().replace('\n', '')
* Wed 10 Apr 2013 07:36:12 AM JST
self.
* Wed 10 Apr 2013 07:36:15 AM JST
self.
* Wed 10 Apr 2013 07:45:59 AM JST

* Wed 10 Apr 2013 07:46:00 AM JST

* Wed 10 Apr 2013 07:46:00 AM JST
    members = []

* Wed 10 Apr 2013 07:59:20 AM JST
TES.append(LDP(el[0], el[1], el[2], el[3]))
* Wed 10 Apr 2013 08:00:09 AM JST
TES.append(DPJ(el[0], el[1], el[2], el[3]))
* Wed 10 Apr 2013 08:00:13 AM JST
DPJ
* Wed 10 Apr 2013 08:01:11 AM JST
TES.append(Koumei(el[0], el[1], el[2], el[3]))
* Wed 10 Apr 2013 08:01:18 AM JST
Koumei
* Wed 10 Apr 2013 08:01:45 AM JST
TES.append(Minna(el[0], el[1], el[2], el[3]))
* Wed 10 Apr 2013 08:01:48 AM JST
Minna
* Wed 10 Apr 2013 08:04:13 AM JST
, el[4]
* Wed 10 Apr 2013 08:09:18 AM JST
4])
* Wed 10 Apr 2013 08:09:19 AM JST
el[4])
* Wed 10 Apr 2013 08:09:19 AM JST
3], el[4])
* Wed 10 Apr 2013 08:09:19 AM JST
el[3], el[4])
* Wed 10 Apr 2013 08:09:20 AM JST
2], el[3], el[4])
* Wed 10 Apr 2013 08:09:21 AM JST
el[2], el[3], el[4])
* Wed 10 Apr 2013 08:09:21 AM JST
1], el[2], el[3], el[4])
* Wed 10 Apr 2013 08:09:21 AM JST
el[1], el[2], el[3], el[4])
* Wed 10 Apr 2013 08:09:22 AM JST
0], el[1], el[2], el[3], el[4])
* Wed 10 Apr 2013 08:21:08 AM JST

* Wed 10 Apr 2013 08:21:08 AM JST

* Wed 10 Apr 2013 08:21:08 AM JST
range()

* Wed 10 Apr 2013 08:21:57 AM JST

* Wed 10 Apr 2013 08:21:57 AM JST

* Wed 10 Apr 2013 08:21:57 AM JST
                    # 0 = name

* Wed 10 Apr 2013 08:22:14 AM JST

* Wed 10 Apr 2013 08:22:14 AM JST

* Wed 10 Apr 2013 08:22:14 AM JST
                        if 0 == i:

* Wed 10 Apr 2013 08:22:15 AM JST
                        if 0 == i:

* Wed 10 Apr 2013 08:22:15 AM JST
                        if 0 == i:
                            txt = txt[:-1]

* Wed 10 Apr 2013 08:27:58 AM JST
　
* Wed 10 Apr 2013 08:29:32 AM JST
TES[el[1].replace(u'　', '')] = LDP(*el)
* Wed 10 Apr 2013 08:29:38 AM JST
LDP
* Wed 10 Apr 2013 08:29:53 AM JST
TES[el[1].replace(u'　', '')] = DPJ(*el)
* Wed 10 Apr 2013 08:29:56 AM JST
DPJ
* Wed 10 Apr 2013 08:30:21 AM JST
TES[el[1].replace(u'　', '')] = Koumei(*el)
* Wed 10 Apr 2013 08:30:27 AM JST
Koumei
* Wed 10 Apr 2013 08:30:38 AM JST
TES[el[1].replace(u'　', '')] = Minna(*el)
* Wed 10 Apr 2013 08:30:46 AM JST
Minna
* Wed 10 Apr 2013 08:37:33 AM JST
.encode('utf-8')
* Wed 10 Apr 2013 08:45:58 AM JST

* Wed 10 Apr 2013 08:45:58 AM JST

* Wed 10 Apr 2013 08:45:58 AM JST
import pygoogle

* Wed 10 Apr 2013 08:46:54 AM JST
unicode(
* Wed 10 Apr 2013 09:09:38 AM JST
def google_feeling_lucky(query):
    """SUMMARY

    @Arguments:
    - `query`:

    @Return:
    """
    g = pygoogle.pygoogle(query.encode('utf-8'))
    g.pages = 1
    return g.get_urls()[0]


* Wed 10 Apr 2013 09:12:02 AM JST

* Wed 10 Apr 2013 09:12:02 AM JST

* Wed 10 Apr 2013 09:12:02 AM JST
# for debug

* Wed 10 Apr 2013 09:12:02 AM JST
# for debug

* Wed 10 Apr 2013 09:12:03 AM JST
# for debug
import cgitb as _cgitb

* Wed 10 Apr 2013 09:12:03 AM JST
# for debug
import cgitb as _cgitb

* Wed 10 Apr 2013 09:12:03 AM JST
# for debug
import cgitb as _cgitb
_cgitb.enable(format='text')

* Wed 10 Apr 2013 09:12:58 AM JST
def feed_finder(url, cache=True):
    """SUMMARY

    @Arguments:
    - `doc`:

    @Return:
    """
    feed_link = []
    doc = lxml_soup(url, cache)
    el = doc.xpath('//link[@rel="alternate"][contains(@type, "rss")'
                   ' or contains(@type, "atom") or contains(@type, "rdf")]')
    if el:
        for e in el:
            feed_link.append(e.attrib['href'])
    else:
        extensions = ['.rss', '.xml', '.rdf']
        a = doc.xpath('//a')
        for el in a:
            link = el.attrib['href']
            for ext in extensions:
                if link.endswith(ext):
                    feed_link.append(link)
    return feed_link

* Wed 10 Apr 2013 09:13:31 AM JST

* Wed 10 Apr 2013 09:13:31 AM JST

* Wed 10 Apr 2013 09:13:31 AM JST
# for debug

* Wed 10 Apr 2013 09:13:31 AM JST
# for debug

* Wed 10 Apr 2013 09:13:31 AM JST
# for debug
import cgitb as _cgitb

* Wed 10 Apr 2013 09:13:31 AM JST
# for debug
import cgitb as _cgitb

* Wed 10 Apr 2013 09:13:31 AM JST
# for debug
import cgitb as _cgitb
_cgitb.enable(format='text')

* Wed 10 Apr 2013 09:14:15 AM JST
def get_html_filename(url):
    """SUMMARY

    @Arguments:
    - `url`:

    @Return:
    """
    if url.endswith('/'):
        url = url[:-1]
    name = url.split('/')[-1]
    if 'index.html' == name:
        import urlparse
        netloc = urlparse.urlsplit(url).netloc
        name = netloc + '.' + name
    return name


def lxml_soup(url, cache=True):
    """SUMMARY

    @Arguments:
    - `url`:
    - `cache`:

    @Return:
    """
    tmpdir = os.path.join(tempfile.gettempdir(), 'giin')
    if not os.path.exists(tmpdir):
        os.mkdir(tmpdir)

    fname = os.path.join(tmpdir, get_html_filename(url))
    if os.path.exists(fname):
        mtime = datetime.datetime.fromtimestamp(os.path.getmtime(fname))
        yesterday = datetime.datetime.now() - datetime.timedelta(1)
        obsoluted = mtime < yesterday
    else:
        obsoluted = False

    if not os.path.exists(fname) or obsoluted or cache is False:
        try:
            os.remove(fname)
        except OSError:
            pass
        with open(fname, 'w') as f:
            opener = urllib2.build_opener()
            agent_str = (u'Mozilla/5.0 (Windows; U; Windows NT 6.1; '
                'ja; rv:1.9.2.13) Gecko/20101203 Firefox/3.6.13')
            opener.addheaders = [('User-agent', agent_str)]
            with contextlib.closing(opener.open(url)) as page:
                f.write(page.read())
    with open(fname, 'r') as file_:
        html = file_.read()
    return lxml.html.fromstring(html)

* Wed 10 Apr 2013 09:15:01 AM JST
urlparse
* Wed 10 Apr 2013 09:19:32 AM JST

* Wed 10 Apr 2013 09:19:32 AM JST

* Wed 10 Apr 2013 09:19:32 AM JST
# append dic [obj.name] = obj

* Wed 10 Apr 2013 09:21:13 AM JST
homepag
* Wed 10 Apr 2013 09:22:15 AM JST
def _options_maker():
    parser = argparse.ArgumentParser(description="""Agrigator for giin""")
    parser.add_argument('--version',
                        dest='version',
                        action='version',
                        version=__version__,
                        help='Version Strings.')
    # (yas/expand-link "argparse_add_argument" t)
    return parser.parse_args()


def _main():
    """Main function."""
    args = _options_maker()

if __name__ == '__main__':
    _main()


* Wed 10 Apr 2013 09:24:20 AM JST
TES = {}

def tes():
    """SUMMARY

    @Return:
    """
    s = SyuugiinParse()
    for el in s.get_list():
        if u'自民' == el[3]:
            TES[el[1].replace(u'　', '')] = LDP(*el)
            # TES.append(LDP(*el))
        elif u'民主' == el[3]:
            TES[el[1].replace(u'　', '')] = DPJ(*el)
            # TES.append(DPJ(*el))
        elif u'公明' == el[3]:
            TES[el[1].replace(u'　', '')] = Koumei(*el)
            # TES.append(Koumei(*el))
        elif u'みんな' == el[3]:
            TES[el[1].replace(u'　', '')] = Minna(*el)
            # TES.append(Minna(*el))
        else:
            TES[el[1].replace(u'　', '')] = Other(*el)
            # TES.append(Other(*el))

* Wed 10 Apr 2013 09:24:50 AM JST

* Wed 10 Apr 2013 09:24:50 AM JST

* Wed 10 Apr 2013 09:24:50 AM JST
    s = SyuugiinParse()

* Wed 10 Apr 2013 09:25:18 AM JST
    for el in s.get_list():
        if u'自民' == el[3]:
            TES[el[1].replace(u'　', '')] = LDP(*el)
            # TES.append(LDP(*el))
        elif u'民主' == el[3]:
            TES[el[1].replace(u'　', '')] = DPJ(*el)
            # TES.append(DPJ(*el))
        elif u'公明' == el[3]:
            TES[el[1].replace(u'　', '')] = Koumei(*el)
            # TES.append(Koumei(*el))
        elif u'みんな' == el[3]:
            TES[el[1].replace(u'　', '')] = Minna(*el)
            # TES.append(Minna(*el))
        else:
            TES[el[1].replace(u'　', '')] = Other(*el)
            # TES.append(Other(*el))

* Wed 10 Apr 2013 09:25:37 AM JST

* Wed 10 Apr 2013 09:25:37 AM JST

* Wed 10 Apr 2013 09:25:37 AM JST
                # TES.append(LDP(*el))

* Wed 10 Apr 2013 09:25:39 AM JST

* Wed 10 Apr 2013 09:25:39 AM JST

* Wed 10 Apr 2013 09:25:39 AM JST
                # TES.append(DPJ(*el))

* Wed 10 Apr 2013 09:25:40 AM JST

* Wed 10 Apr 2013 09:25:40 AM JST

* Wed 10 Apr 2013 09:25:40 AM JST
                # TES.append(Koumei(*el))

* Wed 10 Apr 2013 09:25:42 AM JST

* Wed 10 Apr 2013 09:25:42 AM JST

* Wed 10 Apr 2013 09:25:42 AM JST
                # TES.append(Minna(*el))

* Wed 10 Apr 2013 09:25:43 AM JST

* Wed 10 Apr 2013 09:25:43 AM JST

* Wed 10 Apr 2013 09:25:43 AM JST
                # TES.append(Other(*el))

* Wed 10 Apr 2013 09:26:27 AM JST
TES
* Wed 10 Apr 2013 09:26:36 AM JST
self.members
* Wed 10 Apr 2013 09:28:56 AM JST
el[1].replace(u'　', '')
* Wed 10 Apr 2013 09:30:23 AM JST
u'青山周平'
* Wed 10 Apr 2013 09:31:18 AM JST
TES = {}
* Wed 10 Apr 2013 09:31:22 AM JST

* Wed 10 Apr 2013 09:31:23 AM JST

* Wed 10 Apr 2013 09:31:23 AM JST
# Pseudo code

* Wed 10 Apr 2013 09:39:42 AM JST
doc.xpath('//*[@class="homepage start"]/p/a')
* Wed 10 Apr 2013 09:41:26 AM JST
doc.xpath('//*[@class="twitter"]/p/a')
* Wed 10 Apr 2013 09:42:03 AM JST
doc.xpath('//*[@class="blog"]/p/a')
* Wed 10 Apr 2013 09:55:50 AM JST
giin
* Wed 10 Apr 2013 09:55:50 AM JST
self.giin
* Wed 10 Apr 2013 09:56:11 AM JST
syuugiin'
* Wed 10 Apr 2013 09:56:16 AM JST

* Wed 10 Apr 2013 09:56:16 AM JST

* Wed 10 Apr 2013 09:56:16 AM JST
    giin = 'syuugiin'

* Wed 10 Apr 2013 10:01:38 AM JST
//*[@id="ContentsBox"]/table[2]
* Wed 10 Apr 2013 10:01:48 AM JST
//*[@id="ContentsBox"]/table[2]
* Wed 10 Apr 2013 10:02:43 AM JST
lxmllib.lxml_soup()
* Wed 10 Apr 2013 10:02:52 AM JST
http://www.sangiin.go.jp/japanese/joho1/kousei/giin/183/giin.htm#a
* Wed 10 Apr 2013 10:03:45 AM JST
//*[@id="ContentsBox"]/table[2]
* Wed 10 Apr 2013 10:04:53 AM JST

* Wed 10 Apr 2013 10:04:53 AM JST

* Wed 10 Apr 2013 10:04:53 AM JST
sangiin = ['http://www.sangiin.go.jp/japanese/joho1/kousei/giin/183/giin.htm']

* Wed 10 Apr 2013 10:06:28 AM JST
'//*[@id="ContentsBox"]/table[2]'
* Wed 10 Apr 2013 10:14:57 AM JST
tr = 
* Wed 10 Apr 2013 10:20:21 AM JST
sangiin
* Wed 10 Apr 2013 10:20:43 AM JST
        
* Wed 10 Apr 2013 10:34:17 AM JST
syu
* Wed 10 Apr 2013 10:34:19 AM JST
san
* Wed 10 Apr 2013 10:55:00 AM JST
for m in g.members.:
* Wed 10 Apr 2013 11:02:39 AM JST

* Wed 10 Apr 2013 11:02:39 AM JST

* Wed 10 Apr 2013 11:02:39 AM JST
# parse each sangiin list

* Wed 10 Apr 2013 11:02:49 AM JST

* Wed 10 Apr 2013 11:02:49 AM JST

* Wed 10 Apr 2013 11:02:50 AM JST
import string

* Wed 10 Apr 2013 11:05:53 AM JST
unicodecsv
* Wed 10 Apr 2013 11:15:00 AM JST
location
* Wed 10 Apr 2013 11:17:29 AM JST
not
* Wed 10 Apr 2013 11:17:38 AM JST
is
* Wed 10 Apr 2013 11:18:05 AM JST
not 
* Wed 10 Apr 2013 11:18:23 AM JST
not 
* Wed 10 Apr 2013 11:18:32 AM JST
is
* Wed 10 Apr 2013 11:18:46 AM JST
not 
* Wed 10 Apr 2013 11:19:51 AM JST
pass
* Wed 10 Apr 2013 11:20:05 AM JST
pass
* Wed 10 Apr 2013 11:20:14 AM JST
pass
* Wed 10 Apr 2013 11:23:28 AM JST

* Wed 10 Apr 2013 11:23:28 AM JST

* Wed 10 Apr 2013 11:23:28 AM JST
        table = doc.xpath('//*[@id="member-content"]/div[2]/table')[0]

* Wed 10 Apr 2013 11:26:15 AM JST

* Wed 10 Apr 2013 11:26:15 AM JST

* Wed 10 Apr 2013 11:26:15 AM JST
# write cvs

* Wed 10 Apr 2013 11:29:55 AM JST
from unicodecsv 
* Wed 10 Apr 2013 11:39:52 AM JST
path.
* Wed 10 Apr 2013 11:42:45 AM JST
print(query)
* Wed 10 Apr 2013 11:47:50 AM JST
True
* Wed 10 Apr 2013 11:50:55 AM JST
    if verbose:
        print(g)

* Wed 10 Apr 2013 11:50:58 AM JST
    if verbose:
        print(g)

* Wed 10 Apr 2013 12:12:15 PM JST
　
* Wed 10 Apr 2013 12:12:29 PM JST
.replace('　', '')
* Wed 10 Apr 2013 12:13:18 PM JST
                  
* Wed 10 Apr 2013 12:15:48 PM JST
.replace(u'　', '')
* Wed 10 Apr 2013 12:20:33 PM JST
self.name.replace('　', '')
* Wed 10 Apr 2013 12:21:41 PM JST
            
* Wed 10 Apr 2013 12:23:22 PM JST
self.name.replace(u'　', '')
* Wed 10 Apr 2013 12:23:29 PM JST
name = 
* Wed 10 Apr 2013 12:40:03 PM JST
.replace(u'　', '')
* Wed 10 Apr 2013 12:51:21 PM JST
site:www.dpj.or.jp 室井邦彦
* Wed 10 Apr 2013 01:14:42 PM JST
from googlelib import google_feeling_lucky
* Wed 10 Apr 2013 01:28:30 PM JST
if g:
* Wed 10 Apr 2013 01:29:02 PM JST
next()
* Wed 10 Apr 2013 01:29:46 PM JST

* Wed 10 Apr 2013 01:29:46 PM JST

* Wed 10 Apr 2013 01:29:46 PM JST
                sleep(2)

* Wed 10 Apr 2013 01:29:48 PM JST

* Wed 10 Apr 2013 01:29:48 PM JST

* Wed 10 Apr 2013 01:29:48 PM JST
                sleep(2)

* Wed 10 Apr 2013 01:30:43 PM JST

* Wed 10 Apr 2013 01:30:43 PM JST

* Wed 10 Apr 2013 01:30:43 PM JST
            sleep(1)

* Wed 10 Apr 2013 01:31:05 PM JST

* Wed 10 Apr 2013 01:31:05 PM JST

* Wed 10 Apr 2013 01:31:05 PM JST
        return result

* Wed 10 Apr 2013 01:31:11 PM JST
return 
* Wed 10 Apr 2013 01:32:51 PM JST

* Wed 10 Apr 2013 01:32:51 PM JST

* Wed 10 Apr 2013 01:32:52 PM JST
        sleep(1)

* Wed 10 Apr 2013 02:07:00 PM JST

* Wed 10 Apr 2013 02:07:00 PM JST

* Wed 10 Apr 2013 02:07:00 PM JST
        # TODO: (Atami) [2013/04/10]

* Wed 10 Apr 2013 02:18:48 PM JST
#     if verbose:
#         print(query.encode('utf-8'))

* Wed 10 Apr 2013 02:19:06 PM JST
query.encode('utf-8')
* Wed 10 Apr 2013 02:20:01 PM JST
from xgoogle.search import GoogleSearch
* Wed 10 Apr 2013 02:20:07 PM JST
g = GoogleSearch(query.encode('utf-8'))
* Wed 10 Apr 2013 03:17:08 PM JST
num=1,
* Wed 10 Apr 2013 03:54:59 PM JST
assert val(url)
* Wed 10 Apr 2013 03:55:21 PM JST
assert val('http://google.com')
* Wed 10 Apr 2013 03:55:26 PM JST
assert 
* Wed 10 Apr 2013 03:55:37 PM JST
e
* Wed 10 Apr 2013 03:55:37 PM JST
ValidationError, e
* Wed 10 Apr 2013 04:04:05 PM JST
url
* Wed 10 Apr 2013 04:04:43 PM JST
, verbose=True
* Wed 10 Apr 2013 04:06:23 PM JST
reload(lxmllib)
* Wed 10 Apr 2013 04:18:05 PM JST
望月義夫
* Wed 10 Apr 2013 04:18:54 PM JST
site:www.jimin.jp 望月義夫
* Wed 10 Apr 2013 04:32:11 PM JST
DJANGO_SETTINGS_MODULE is undefined
* Wed 10 Apr 2013 04:33:21 PM JST
tes = {'hello': 'world'}
* Wed 10 Apr 2013 04:43:26 PM JST
reload()
* Wed 10 Apr 2013 05:50:43 PM JST
#!/usr/bin/env python

# Python bindings to the Google search engine
# Copyright (c) 2009-2013, Mario Vilas
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice,this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

__all__ = ['search']

import cookielib
import os
import time
import urllib
import urllib2
import urlparse

try:
    import bs4 as BeautifulSoup
except ImportError:
    import BeautifulSoup

# URL templates to make Google searches.
url_home          = "http://www.google.%(tld)s/"
url_search        = "http://www.google.%(tld)s/search?hl=%(lang)s&q=%(query)s&btnG=Google+Search"
url_next_page     = "http://www.google.%(tld)s/search?hl=%(lang)s&q=%(query)s&start=%(start)d"
url_search_num    = "http://www.google.%(tld)s/search?hl=%(lang)s&q=%(query)s&num=%(num)d&btnG=Google+Search"
url_next_page_num = "http://www.google.%(tld)s/search?hl=%(lang)s&q=%(query)s&num=%(num)d&start=%(start)d"

# Cookie jar. Stored at the user's home folder.
home_folder = os.getenv('HOME')
if not home_folder:
    home_folder = os.getenv('USERHOME')
    if not home_folder:
        home_folder = '.'   # Use the current folder on error.
cookie_jar = cookielib.LWPCookieJar(
                            os.path.join(home_folder, '.google-cookie'))
try:
    cookie_jar.load()
except Exception:
    pass

# Request the given URL and return the response page, using the cookie jar.
def get_page(url):
    """
    Request the given URL and return the response page, using the cookie jar.

    @type  url: str
    @param url: URL to retrieve.

    @rtype:  str
    @return: Web page retrieved for the given URL.

    @raise IOError: An exception is raised on error.
    @raise urllib2.URLError: An exception is raised on error.
    @raise urllib2.HTTPError: An exception is raised on error.
    """
    request = urllib2.Request(url)
    request.add_header('User-Agent',
                       'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0)')
    cookie_jar.add_cookie_header(request)
    response = urllib2.urlopen(request)
    cookie_jar.extract_cookies(response, request)
    html = response.read()
    response.close()
    cookie_jar.save()
    return html

# Filter links found in the Google result pages HTML code.
# Returns None if the link doesn't yield a valid result.
def filter_result(link):
    try:

        # Valid results are absolute URLs not pointing to a Google domain
        # like images.google.com or googleusercontent.com
        o = urlparse.urlparse(link, 'http')
        if o.netloc and 'google' not in o.netloc:
            return link

        # Decode hidden URLs.
        if link.startswith('/url?'):
            link = urlparse.parse_qs(o.query)['q'][0]

            # Valid results are absolute URLs not pointing to a Google domain
            # like images.google.com or googleusercontent.com
            o = urlparse.urlparse(link, 'http')
            if o.netloc and 'google' not in o.netloc:
                return link

    # Otherwise, or on error, return None.
    except Exception:
        pass
    return None

# Returns a generator that yields URLs.
def search(query, tld='com', lang='en', num=10, start=0, stop=None, pause=2.0):
    """
    Search the given query string using Google.

    @type  query: str
    @param query: Query string. Must NOT be url-encoded.

    @type  tld: str
    @param tld: Top level domain.

    @type  lang: str
    @param lang: Languaje.

    @type  num: int
    @param num: Number of results per page.

    @type  start: int
    @param start: First result to retrieve.

    @type  stop: int
    @param stop: Last result to retrieve.
        Use C{None} to keep searching forever.

    @type  pause: float
    @param pause: Lapse to wait between HTTP requests.
        A lapse too long will make the search slow, but a lapse too short may
        cause Google to block your IP. Your mileage may vary!

    @rtype:  generator
    @return: Generator (iterator) that yields found URLs. If the C{stop}
        parameter is C{None} the iterator will loop forever.
    """

    # Set of hashes for the results found.
    # This is used to avoid repeated results.
    hashes = set()

    # Prepare the search string.
    query = urllib.quote_plus(query)

    # Grab the cookie from the home page.
    get_page(url_home % vars())

    # Prepare the URL of the first request.
    if num == 10:
        url = url_search % vars()
    else:
        url = url_search_num % vars()

    # Loop until we reach the maximum result, if any (otherwise, loop forever).
    while not stop or start < stop:

        # Sleep between requests.
        time.sleep(pause)

        # Request the Google Search results page.
        html = get_page(url)

        # Parse the response and process every anchored URL.
        soup = BeautifulSoup.BeautifulSoup(html)
        anchors = soup.findAll('a')
        for a in anchors:

            # Get the URL from the anchor tag.
            try:
                link = a['href']
            except KeyError:
                continue

            # Filter invalid links and links pointing to Google itself.
            link = filter_result(link)
            if not link:
                continue

            # Discard repeated results.
            h = hash(link)
            if h in hashes:
                continue
            hashes.add(h)

            # Yield the result.
            yield link

        # Prepare the URL for the next request.
        start += num
        if num == 10:
            url = url_next_page % vars()
        else:
            url = url_next_page_num % vars()

# When run as a script, take all arguments as a search query and run it.
if __name__ == "__main__":
    import sys
    query = ' '.join(sys.argv[1:])
    if query:
        for url in search(query, stop=20):
            print(url)

* Wed 10 Apr 2013 05:54:18 PM JST
Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13
Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.48 Safari/525.19
* Wed 10 Apr 2013 05:55:27 PM JST
Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.75 Safari/535.7
* Wed 10 Apr 2013 05:55:39 PM JST
Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.75 Safari/535.7
* Wed 10 Apr 2013 05:56:56 PM JST
Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:9.0.1) Gecko/20100101 Firefox/9.0.1
* Wed 10 Apr 2013 05:57:07 PM JST
Mozilla/5.0 (Windows NT 6.1; WOW64; rv:9.0.1) Gecko/20100101 Firefox/9.0.1
* Wed 10 Apr 2013 05:57:22 PM JST
Mozilla/5.0 (Macintosh; Intel Mac OS X 10.5; rv:8.0.1) Gecko/20100101 Firefox/8.0.1
* Wed 10 Apr 2013 05:57:30 PM JST
'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0)'
* Wed 10 Apr 2013 05:58:23 PM JST
random.choice(hosts)
* Wed 10 Apr 2013 05:58:30 PM JST
hosts
* Wed 10 Apr 2013 05:58:37 PM JST
                       
* Wed 10 Apr 2013 06:01:16 PM JST
random.choice(user_agent)
* Wed 10 Apr 2013 06:01:20 PM JST
random.choice(user_agent)
* Wed 10 Apr 2013 06:02:40 PM JST

* Wed 10 Apr 2013 06:02:40 PM JST

* Wed 10 Apr 2013 06:02:40 PM JST
    print(agent)

* Wed 10 Apr 2013 06:11:19 PM JST
opener = urllib2.build_opener()
* Wed 10 Apr 2013 06:13:39 PM JST
opener = urllib2.build_opener()
* Wed 10 Apr 2013 06:14:07 PM JST
opener.addheaders = [('User-agent', agent_str)]
* Wed 10 Apr 2013 06:14:18 PM JST

* Wed 10 Apr 2013 06:14:18 PM JST

* Wed 10 Apr 2013 06:14:18 PM JST
    agent = random.choice(user_agent)

* Wed 10 Apr 2013 06:14:21 PM JST
agent_str
* Wed 10 Apr 2013 06:14:44 PM JST
opener.open(url)
* Wed 10 Apr 2013 06:55:04 PM JST

* Wed 10 Apr 2013 06:55:04 PM JST

* Wed 10 Apr 2013 06:55:04 PM JST
from django.core.validators import URLValidator

* Wed 10 Apr 2013 06:55:04 PM JST
from django.core.validators import URLValidator

* Wed 10 Apr 2013 06:55:04 PM JST
from django.core.validators import URLValidator
from django.core.exceptions import ValidationError

* Wed 10 Apr 2013 07:01:30 PM JST
urlparse
* Wed 10 Apr 2013 07:03:01 PM JST
    if os.path.exists(fname):
        mtime = datetime.datetime.fromtimestamp(os.path.getmtime(fname))
        yesterday = datetime.datetime.now() - datetime.timedelta(1)
        obsoluted = mtime < yesterday
    else:
        obsoluted = False

* Wed 10 Apr 2013 07:04:18 PM JST
    if not os.path.exists(fname) or obsoluted or cache is False:
        try:
            os.remove(fname)
        except OSError:
            pass
        with open(fname, 'w') as f:
            opener = urllib2.build_opener()
            agent_str = (u'Mozilla/5.0 (Windows; U; Windows NT 6.1; '
                'ja; rv:1.9.2.13) Gecko/20101203 Firefox/3.6.13')
            opener.addheaders = [('User-agent', agent_str)]
            with contextlib.closing(opener.open(url)) as page:
                if verbose:
                    print('Accessing: ' + url)
                f.write(page.read())
    with open(fname, 'r') as file_:
        html = file_.read()

* Wed 10 Apr 2013 07:04:40 PM JST

* Wed 10 Apr 2013 07:04:40 PM JST

* Wed 10 Apr 2013 07:04:40 PM JST
    opener = urllib2.build_opener()

* Wed 10 Apr 2013 07:04:44 PM JST
random.choice(user_agent)
* Wed 10 Apr 2013 07:04:52 PM JST
agent = 
* Wed 10 Apr 2013 07:05:02 PM JST

* Wed 10 Apr 2013 07:05:02 PM JST

* Wed 10 Apr 2013 07:05:02 PM JST
    opener.addheaders = [('User-agent', agent)]

* Wed 10 Apr 2013 07:05:05 PM JST
    opener.addheaders = [('User-agent', agent)]

* Wed 10 Apr 2013 07:05:05 PM JST
    opener.addheaders = [('User-agent', agent)]
    o = opener.open(url)

* Wed 10 Apr 2013 07:05:06 PM JST
    opener.addheaders = [('User-agent', agent)]
    o = opener.open(url)

* Wed 10 Apr 2013 07:05:06 PM JST
    opener.addheaders = [('User-agent', agent)]
    o = opener.open(url)
    html = o.read()

* Wed 10 Apr 2013 07:05:08 PM JST

* Wed 10 Apr 2013 07:05:08 PM JST

* Wed 10 Apr 2013 07:05:08 PM JST
    html = o.read()

* Wed 10 Apr 2013 07:05:14 PM JST
    html = o.read()

* Wed 10 Apr 2013 07:05:14 PM JST
    html = o.read()
    o.close()

* Wed 10 Apr 2013 07:06:03 PM JST
False
* Wed 10 Apr 2013 07:06:04 PM JST
is False
* Wed 10 Apr 2013 07:06:04 PM JST
cache is False
* Wed 10 Apr 2013 07:06:13 PM JST

* Wed 10 Apr 2013 07:06:13 PM JST

* Wed 10 Apr 2013 07:06:13 PM JST
                if verbose:

* Wed 10 Apr 2013 07:06:14 PM JST
                if verbose:

* Wed 10 Apr 2013 07:06:14 PM JST
                if verbose:
                    print('Accessing: ' + url)

* Wed 10 Apr 2013 07:08:34 PM JST

* Wed 10 Apr 2013 07:08:34 PM JST

* Wed 10 Apr 2013 07:08:34 PM JST
    query = urlparse.parse_qs(url)

* Wed 10 Apr 2013 07:08:35 PM JST
    query = urlparse.parse_qs(url)

* Wed 10 Apr 2013 07:08:35 PM JST
    query = urlparse.parse_qs(url)
    print(query)

* Wed 10 Apr 2013 07:10:10 PM JST
query
* Wed 10 Apr 2013 07:29:04 PM JST

* Wed 10 Apr 2013 07:29:04 PM JST

* Wed 10 Apr 2013 07:29:04 PM JST
from rss import feed_finder

* Wed 10 Apr 2013 07:29:05 PM JST
from rss import feed_finder

* Wed 10 Apr 2013 07:29:05 PM JST
from rss import feed_finder
from rss import feed_finder

* Wed 10 Apr 2013 07:29:05 PM JST
from rss import feed_finder
from rss import feed_finder

* Wed 10 Apr 2013 07:29:05 PM JST
from rss import feed_finder
from rss import feed_finder
from rss import feed_finder

* Wed 10 Apr 2013 07:29:06 PM JST

* Wed 10 Apr 2013 07:29:06 PM JST

* Wed 10 Apr 2013 07:29:07 PM JST
import unicodecsv

* Wed 10 Apr 2013 07:29:07 PM JST
import unicodecsv

* Wed 10 Apr 2013 07:29:07 PM JST
import unicodecsv
import unicodecsv

* Wed 10 Apr 2013 07:29:09 PM JST

* Wed 10 Apr 2013 07:29:09 PM JST

* Wed 10 Apr 2013 07:29:09 PM JST
import cgitb

* Wed 10 Apr 2013 07:29:09 PM JST
import cgitb

* Wed 10 Apr 2013 07:29:09 PM JST
import cgitb
import cgitb

* Wed 10 Apr 2013 07:29:10 PM JST
import cgitb
import cgitb

* Wed 10 Apr 2013 07:29:10 PM JST
import cgitb
import cgitb
import cgitb

* Wed 10 Apr 2013 07:29:11 PM JST

* Wed 10 Apr 2013 07:29:11 PM JST

* Wed 10 Apr 2013 07:29:11 PM JST
import argparse

* Wed 10 Apr 2013 07:29:22 PM JST

* Wed 10 Apr 2013 07:29:22 PM JST

* Wed 10 Apr 2013 07:29:22 PM JST
import cgitb

* Wed 10 Apr 2013 07:29:22 PM JST
import cgitb

* Wed 10 Apr 2013 07:29:22 PM JST
import cgitb
import contextlib

* Wed 10 Apr 2013 07:56:09 PM JST
cache_name
* Wed 10 Apr 2013 07:57:04 PM JST
query
* Wed 10 Apr 2013 07:57:46 PM JST
self.name.replace(u'　', '')
* Wed 10 Apr 2013 08:03:24 PM JST
cache_name
* Wed 10 Apr 2013 08:07:18 PM JST
cache_name
* Wed 10 Apr 2013 08:07:25 PM JST
cache_name
* Wed 10 Apr 2013 08:07:31 PM JST
           
* Wed 10 Apr 2013 08:07:43 PM JST
cache_name=chname
* Wed 10 Apr 2013 08:08:07 PM JST
               
* Wed 10 Apr 2013 08:09:53 PM JST
cache_name=
* Wed 10 Apr 2013 08:11:18 PM JST
query
* Thu 11 Apr 2013 05:49:24 AM JST

* Thu 11 Apr 2013 05:49:25 AM JST

* Thu 11 Apr 2013 05:49:25 AM JST
                stop=1,

* Thu 11 Apr 2013 06:06:34 AM JST

* Thu 11 Apr 2013 06:06:34 AM JST

* Thu 11 Apr 2013 06:06:34 AM JST
    print(result)

* Thu 11 Apr 2013 06:19:34 AM JST
findAll
* Thu 11 Apr 2013 06:21:14 AM JST
html
* Thu 11 Apr 2013 06:26:09 AM JST
Key
* Thu 11 Apr 2013 06:32:11 AM JST

* Thu 11 Apr 2013 06:32:11 AM JST

* Thu 11 Apr 2013 06:32:11 AM JST
                                   self.name.replace(u'　', ''),

* Thu 11 Apr 2013 06:32:12 AM JST
                                   
* Thu 11 Apr 2013 06:32:17 AM JST
u'　', ''),
* Thu 11 Apr 2013 06:32:17 AM JST
replace(u'　', ''),
* Thu 11 Apr 2013 06:32:17 AM JST
name.replace(u'　', ''),
* Thu 11 Apr 2013 06:32:18 AM JST
self.name.replace(u'　', ''),
* Thu 11 Apr 2013 06:32:19 AM JST
                                   
* Thu 11 Apr 2013 06:32:24 AM JST
                                   
* Thu 11 Apr 2013 06:32:25 AM JST
url = google_feeling_lucky(query, self.name.replace(u'　', ''),
* Thu 11 Apr 2013 06:32:25 AM JST
        url = google_feeling_lucky(query, self.name.replace(u'　', ''),
* Thu 11 Apr 2013 06:32:27 AM JST
u'　', ''),
* Thu 11 Apr 2013 06:32:27 AM JST
replace(u'　', ''),
* Thu 11 Apr 2013 06:32:27 AM JST
name.replace(u'　', ''),
* Thu 11 Apr 2013 06:32:28 AM JST
self.name.replace(u'　', ''),
* Thu 11 Apr 2013 06:32:33 AM JST
u'　', ''),
* Thu 11 Apr 2013 06:32:34 AM JST
replace(u'　', ''),
* Thu 11 Apr 2013 06:32:34 AM JST
name.replace(u'　', ''),
* Thu 11 Apr 2013 06:32:34 AM JST
self.name.replace(u'　', ''),
* Thu 11 Apr 2013 06:32:39 AM JST
u'　', ''),
* Thu 11 Apr 2013 06:32:39 AM JST
replace(u'　', ''),
* Thu 11 Apr 2013 06:32:40 AM JST
name.replace(u'　', ''),
* Thu 11 Apr 2013 06:32:40 AM JST
self.name.replace(u'　', ''),
* Thu 11 Apr 2013 06:34:33 AM JST
try:
* Thu 11 Apr 2013 06:35:54 AM JST
"http://www.google.%(tld)s/search?hl=%(lang)s&q=%(query)s&num=%(num)d&btnG=Google+Search"
* Thu 11 Apr 2013 06:37:56 AM JST
https://www.google.com/search?hl=ja&q=hello&num=1
* Thu 11 Apr 2013 06:41:32 AM JST
//*[@id="rso"]/li/div/h3/a
* Thu 11 Apr 2013 06:41:53 AM JST
https://www.google.com/search?hl=ja&q=hello&num=1
* Thu 11 Apr 2013 06:42:23 AM JST
//*[@id="rso"]/li/div/h3/a
* Thu 11 Apr 2013 06:45:48 AM JST
https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDIQFjAA&url=http%3A%2F%2Fwww.hellomagazine.com%2F&ei=6NtlUZbHMcWpiAfpmYGIBQ&usg=AFQjCNE2TScP1sOG-TytWVe-kB0UUbWncg&sig2=AF-HCBOnB-R5HCpnEFC2sQ
* Thu 11 Apr 2013 06:45:56 AM JST
http%3A%2F%2Fwww.hellomagazine.com%2F&ei=6NtlUZbHMcWpiAfpmYGIBQ&usg=AFQjCNE2TScP1sOG-TytWVe-kB0UUbWncg&sig2=AF-HCBOnB-R5HCpnEFC2sQ
* Thu 11 Apr 2013 06:47:40 AM JST
def filter_result(link):
    try:

        # Valid results are absolute URLs not pointing to a Google domain
        # like images.google.com or googleusercontent.com
        o = urlparse.urlparse(link, 'http')
        if o.netloc and 'google' not in o.netloc:
            return link

        # Decode hidden URLs.
        if link.startswith('/url?'):
            link = urlparse.parse_qs(o.query)['q'][0]

            # Valid results are absolute URLs not pointing to a Google domain
            # like images.google.com or googleusercontent.com
            o = urlparse.urlparse(link, 'http')
            if o.netloc and 'google' not in o.netloc:
                return link

    # Otherwise, or on error, return None.
    except Exception:
        pass
    return None

* Thu 11 Apr 2013 06:48:11 AM JST
doc.xpath('//*[@class="r"]/a')[0].attrib['href']
* Thu 11 Apr 2013 06:48:22 AM JST
def filter_result(link):
    try:

        # Valid results are absolute URLs not pointing to a Google domain
        # like images.google.com or googleusercontent.com
        o = urlparse.urlparse(link, 'http')
        if o.netloc and 'google' not in o.netloc:
            return link

        # Decode hidden URLs.
        if link.startswith('/url?'):
            link = urlparse.parse_qs(o.query)['q'][0]

            # Valid results are absolute URLs not pointing to a Google domain
            # like images.google.com or googleusercontent.com
            o = urlparse.urlparse(link, 'http')
            if o.netloc and 'google' not in o.netloc:
                return link

    # Otherwise, or on error, return None.
    except Exception:
        pass
    return None

* Thu 11 Apr 2013 06:48:28 AM JST

* Thu 11 Apr 2013 06:48:28 AM JST

* Thu 11 Apr 2013 06:48:28 AM JST
https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDIQFjAA&url=http%3A%2F%2Fwww.hellomagazine.com%2F&ei=6NtlUZbHMcWpiAfpmYGIBQ&usg=AFQjCNE2TScP1sOG-TytWVe-kB0UUbWncg&sig2=AF-HCBOnB-R5HCpnEFC2sQ

* Thu 11 Apr 2013 06:48:28 AM JST
https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDIQFjAA&url=http%3A%2F%2Fwww.hellomagazine.com%2F&ei=6NtlUZbHMcWpiAfpmYGIBQ&usg=AFQjCNE2TScP1sOG-TytWVe-kB0UUbWncg&sig2=AF-HCBOnB-R5HCpnEFC2sQ

* Thu 11 Apr 2013 06:48:28 AM JST
https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDIQFjAA&url=http%3A%2F%2Fwww.hellomagazine.com%2F&ei=6NtlUZbHMcWpiAfpmYGIBQ&usg=AFQjCNE2TScP1sOG-TytWVe-kB0UUbWncg&sig2=AF-HCBOnB-R5HCpnEFC2sQ
# def google_feeling_lucky(query, chname, verbose=False):

* Thu 11 Apr 2013 06:48:28 AM JST
https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDIQFjAA&url=http%3A%2F%2Fwww.hellomagazine.com%2F&ei=6NtlUZbHMcWpiAfpmYGIBQ&usg=AFQjCNE2TScP1sOG-TytWVe-kB0UUbWncg&sig2=AF-HCBOnB-R5HCpnEFC2sQ
# def google_feeling_lucky(query, chname, verbose=False):

* Thu 11 Apr 2013 06:48:28 AM JST
https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CDIQFjAA&url=http%3A%2F%2Fwww.hellomagazine.com%2F&ei=6NtlUZbHMcWpiAfpmYGIBQ&usg=AFQjCNE2TScP1sOG-TytWVe-kB0UUbWncg&sig2=AF-HCBOnB-R5HCpnEFC2sQ
# def google_feeling_lucky(query, chname, verbose=False):
#     """SUMMARY

* Thu 11 Apr 2013 06:51:56 AM JST
query
* Thu 11 Apr 2013 06:52:22 AM JST
search_
* Thu 11 Apr 2013 06:53:15 AM JST
url
* Thu 11 Apr 2013 06:53:24 AM JST
url
* Thu 11 Apr 2013 06:54:21 AM JST

* Thu 11 Apr 2013 06:54:21 AM JST

* Thu 11 Apr 2013 06:54:21 AM JST
    g = pygoogle.pygoogle(query.encode('utf-8'))

* Thu 11 Apr 2013 06:54:21 AM JST
    g = pygoogle.pygoogle(query.encode('utf-8'))

* Thu 11 Apr 2013 06:54:21 AM JST
    g = pygoogle.pygoogle(query.encode('utf-8'))
    g.pages = 1

* Thu 11 Apr 2013 06:54:22 AM JST
0]
* Thu 11 Apr 2013 06:54:23 AM JST
get_urls()[0]
* Thu 11 Apr 2013 06:54:23 AM JST
g.get_urls()[0]
* Thu 11 Apr 2013 06:55:11 AM JST
    if verbose:
        print(query.encode('utf-8'))

* Thu 11 Apr 2013 06:55:15 AM JST
8')
* Thu 11 Apr 2013 06:55:15 AM JST
utf-8')
* Thu 11 Apr 2013 06:55:16 AM JST
encode('utf-8')
* Thu 11 Apr 2013 06:56:51 AM JST
doc.xpath('//*[@class="r"]/a')[0].attribs['href']
* Thu 11 Apr 2013 06:56:58 AM JST
doc
* Thu 11 Apr 2013 06:57:40 AM JST
href']
* Thu 11 Apr 2013 06:59:41 AM JST
          
* Thu 11 Apr 2013 07:00:56 AM JST
http://www.google.com/search?hl=ja&q=site:www.jimin.jp 今野智博&num=1
* Thu 11 Apr 2013 07:24:30 AM JST
            
* Thu 11 Apr 2013 07:25:33 AM JST
                
* Thu 11 Apr 2013 07:39:16 AM JST
rss_links
* Thu 11 Apr 2013 07:39:26 AM JST
rss_links = ''
* Thu 11 Apr 2013 08:17:35 AM JST
static.duoshuo.com
* Thu 11 Apr 2013 08:21:41 AM JST
com
* Thu 11 Apr 2013 08:21:42 AM JST
duoshuo.com
* Thu 11 Apr 2013 08:21:42 AM JST
static.duoshuo.com
* Thu 11 Apr 2013 08:22:40 AM JST
http://www.google.com/search?hl=ja&q=site:www.komei.or.jp+松あきら+西川玲子&num=1
* Thu 11 Apr 2013 08:23:30 AM JST

* Thu 11 Apr 2013 08:23:30 AM JST

* Thu 11 Apr 2013 08:23:30 AM JST
    link = filter_result(link)

* Thu 11 Apr 2013 09:24:41 AM JST
        if not url:
            return

* Thu 11 Apr 2013 09:55:49 AM JST

* Thu 11 Apr 2013 09:55:49 AM JST

* Thu 11 Apr 2013 09:55:49 AM JST
    def __init__(self, ):

* Thu 11 Apr 2013 09:55:49 AM JST
    def __init__(self, ):

* Thu 11 Apr 2013 09:55:49 AM JST
    def __init__(self, ):
        """

* Thu 11 Apr 2013 09:55:49 AM JST
    def __init__(self, ):
        """

* Thu 11 Apr 2013 09:55:49 AM JST
    def __init__(self, ):
        """
        """

* Thu 11 Apr 2013 09:55:50 AM JST

* Thu 11 Apr 2013 09:55:50 AM JST

* Thu 11 Apr 2013 09:55:50 AM JST
    """

* Thu 11 Apr 2013 09:55:50 AM JST
    """

* Thu 11 Apr 2013 09:55:51 AM JST
    """
    """

* Thu 11 Apr 2013 09:56:08 AM JST
object
* Thu 11 Apr 2013 10:27:10 AM JST
NothingURLError
* Thu 11 Apr 2013 10:28:56 AM JST
self.members[name] = Other(*el)
* Thu 11 Apr 2013 10:29:13 AM JST
self.members[name] = Other(*el)
* Thu 11 Apr 2013 10:36:27 AM JST
SUMMARY
* Thu 11 Apr 2013 10:38:13 AM JST
kana
* Thu 11 Apr 2013 10:38:13 AM JST
name, kana
* Thu 11 Apr 2013 10:38:49 AM JST
Return members infomation list.
* Thu 11 Apr 2013 10:40:40 AM JST
~/.zsh/scripts/
* Thu 11 Apr 2013 10:42:03 AM JST
Abstract base class
* Thu 11 Apr 2013 10:42:20 AM JST
SUMMARY
* Thu 11 Apr 2013 10:42:36 AM JST
SUMMARY
* Thu 11 Apr 2013 10:43:13 AM JST
SUMMARY
* Thu 11 Apr 2013 10:43:33 AM JST
SUMMARY
* Thu 11 Apr 2013 11:06:52 AM JST
is
* Thu 11 Apr 2013 11:06:53 AM JST
txt is
* Thu 11 Apr 2013 11:10:13 AM JST
Political party
* Thu 11 Apr 2013 11:10:58 AM JST
Electoral district
* Thu 11 Apr 2013 11:11:29 AM JST
of 
* Thu 11 Apr 2013 11:11:30 AM JST
homepage of 
* Thu 11 Apr 2013 11:21:42 AM JST
syuugiin
* Thu 11 Apr 2013 11:38:10 AM JST
assert 
* Thu 11 Apr 2013 11:39:22 AM JST

* Thu 11 Apr 2013 11:39:22 AM JST

* Thu 11 Apr 2013 11:39:22 AM JST
    sleep(10)

* Thu 11 Apr 2013 11:39:54 AM JST

* Thu 11 Apr 2013 11:39:54 AM JST

* Thu 11 Apr 2013 11:39:54 AM JST
            sleep(wait)

* Thu 11 Apr 2013 11:41:17 AM JST

* Thu 11 Apr 2013 11:41:17 AM JST

* Thu 11 Apr 2013 11:41:17 AM JST
            sleep(10)

* Thu 11 Apr 2013 11:41:37 AM JST

* Thu 11 Apr 2013 11:41:37 AM JST

* Thu 11 Apr 2013 11:41:37 AM JST
            # import pdb; pdb.set_trace()

* Thu 11 Apr 2013 11:41:44 AM JST

* Thu 11 Apr 2013 11:41:44 AM JST

* Thu 11 Apr 2013 11:41:44 AM JST
from time import sleep

* Thu 11 Apr 2013 11:49:13 AM JST

* Thu 11 Apr 2013 11:49:13 AM JST

* Thu 11 Apr 2013 11:49:13 AM JST
                try:

* Thu 11 Apr 2013 11:49:16 AM JST

* Thu 11 Apr 2013 11:49:16 AM JST

* Thu 11 Apr 2013 11:49:16 AM JST
                except NothingURLError:

* Thu 11 Apr 2013 11:49:17 AM JST
                except NothingURLError:

* Thu 11 Apr 2013 11:49:17 AM JST
                except NothingURLError:
                    self.members[name] = Other(*el)

* Thu 11 Apr 2013 11:49:19 AM JST

* Thu 11 Apr 2013 11:49:19 AM JST

* Thu 11 Apr 2013 11:49:19 AM JST
                try:

* Thu 11 Apr 2013 11:49:21 AM JST

* Thu 11 Apr 2013 11:49:21 AM JST

* Thu 11 Apr 2013 11:49:21 AM JST
                except NothingURLError:

* Thu 11 Apr 2013 11:49:21 AM JST
                except NothingURLError:

* Thu 11 Apr 2013 11:49:21 AM JST
                except NothingURLError:
                    self.members[name] = Other(*el)

* Thu 11 Apr 2013 11:49:22 AM JST

* Thu 11 Apr 2013 11:49:23 AM JST

* Thu 11 Apr 2013 11:49:23 AM JST
                try:

* Thu 11 Apr 2013 11:49:25 AM JST

* Thu 11 Apr 2013 11:49:25 AM JST

* Thu 11 Apr 2013 11:49:25 AM JST
                except NothingURLError:

* Thu 11 Apr 2013 11:49:25 AM JST
                except NothingURLError:

* Thu 11 Apr 2013 11:49:25 AM JST
                except NothingURLError:
                    self.members[name] = Other(*el)

* Thu 11 Apr 2013 11:49:26 AM JST

* Thu 11 Apr 2013 11:49:26 AM JST

* Thu 11 Apr 2013 11:49:26 AM JST
                try:

* Thu 11 Apr 2013 11:49:28 AM JST

* Thu 11 Apr 2013 11:49:29 AM JST

* Thu 11 Apr 2013 11:49:29 AM JST
                except NothingURLError:

* Thu 11 Apr 2013 11:49:29 AM JST
                except NothingURLError:

* Thu 11 Apr 2013 11:49:29 AM JST
                except NothingURLError:
                    self.members[name] = Other(*el)

* Thu 11 Apr 2013 11:49:30 AM JST

* Thu 11 Apr 2013 11:49:30 AM JST

* Thu 11 Apr 2013 11:49:30 AM JST
                try:

* Thu 11 Apr 2013 11:49:33 AM JST

* Thu 11 Apr 2013 11:49:33 AM JST

* Thu 11 Apr 2013 11:49:33 AM JST
                except NothingURLError:

* Thu 11 Apr 2013 11:49:33 AM JST
                except NothingURLError:

* Thu 11 Apr 2013 11:49:33 AM JST
                except NothingURLError:
                    pass

* Thu 11 Apr 2013 11:53:35 AM JST
NothingURLError
* Thu 11 Apr 2013 11:53:36 AM JST
raise NothingURLError
* Thu 11 Apr 2013 11:54:28 AM JST
        txt = u'\xe5\x85\xac\xe5\xbc\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'
        query = ('site:' + self.url + ' ' + self.name.replace(u'　', '') +
                  ' ' + self.party + ' ' + u'政治家')

* Thu 11 Apr 2013 11:54:51 AM JST
google_feeling_lucky(query, verbose=True)
* Thu 11 Apr 2013 11:55:53 AM JST
        doc = lxml_soup(url, verbose=True)
        try:
            table = doc.xpath('//*[@class="infobox"]')[0]
            for tr in table:
                if (tr[0].text and txt == tr[0].text):
                    self._homepage = tr[1].xpath('a')[0].attrib['href']
        except:
            self._homepage = ''

* Thu 11 Apr 2013 11:56:38 AM JST
not 
* Thu 11 Apr 2013 11:56:44 AM JST

* Thu 11 Apr 2013 11:56:44 AM JST

* Thu 11 Apr 2013 11:56:44 AM JST
        doc = lxml_soup(url, verbose=True)

* Thu 11 Apr 2013 11:57:10 AM JST
        try:
            table = doc.xpath('//*[@id="member-content"]/div[2]/table')[0]
            for tr in table.xpath('//tr'):
                if u'ホームページ' == tr.xpath('//th')[0].text_content():
                    self._homepage = tr.xpath('//a')[0].attrib['href']
        except:
            self._homepage = ''


* Thu 11 Apr 2013 11:57:46 AM JST
not 
* Thu 11 Apr 2013 11:57:47 AM JST
return
* Thu 11 Apr 2013 11:58:06 AM JST
            txt = u'\xe5\x85\xac\xe5\xbc\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'
            query = ('site:' + self.url + ' ' + self.name.replace(u'　', '') +
                     ' ' + self.party + ' ' + u'政治家')
            url = google_feeling_lucky(query, verbose=True)
            doc = lxml_soup(url, verbose=True)
            try:
                table = doc.xpath('//*[@class="infobox"]')[0]
                for tr in table:
                    if (tr[0].text and txt == tr[0].text):
                        self._homepage = tr[1].xpath('a')[0].attrib['href']
            except:
                self._homepage = ''

* Thu 11 Apr 2013 11:58:24 AM JST
not 
* Thu 11 Apr 2013 11:58:27 AM JST

* Thu 11 Apr 2013 11:58:27 AM JST

* Thu 11 Apr 2013 11:58:27 AM JST
            raise NothingURLError

* Thu 11 Apr 2013 11:58:49 AM JST
        try:
            self._blog = doc.xpath(
                '//*[@class="blog-thumb-wrap"]')[0][0].attrib['href']
        except:
            self._blog = ''

* Thu 11 Apr 2013 11:59:44 AM JST
raise NothingURLError
* Thu 11 Apr 2013 11:59:45 AM JST
not 
* Thu 11 Apr 2013 12:00:08 PM JST
            txt = u'\xe5\x85\xac\xe5\xbc\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'
            query = ('site:' + self.url + ' ' + self.name.replace(u'　', '') +
                     ' ' + self.party + ' ' + u'政治家')
            url = google_feeling_lucky(query, verbose=True)
            doc = lxml_soup(url, verbose=True)
            try:
                table = doc.xpath('//*[@class="infobox"]')[0]
                for tr in table:
                    if (tr[0].text and txt == tr[0].text):
                        self._homepage = tr[1].xpath('a')[0].attrib['href']
            except:
                self._homepage = ''

* Thu 11 Apr 2013 12:04:35 PM JST

* Thu 11 Apr 2013 12:04:35 PM JST

* Thu 11 Apr 2013 12:04:35 PM JST
    print(fname)

* Thu 11 Apr 2013 12:06:24 PM JST
tempfile.mkstemp()
* Thu 11 Apr 2013 12:07:11 PM JST

* Thu 11 Apr 2013 12:07:11 PM JST

* Thu 11 Apr 2013 12:07:11 PM JST
    if not name:

* Thu 11 Apr 2013 12:07:11 PM JST
    if not name:

* Thu 11 Apr 2013 12:07:12 PM JST
    if not name:
        tempfile.mkstemp()

* Thu 11 Apr 2013 12:07:34 PM JST
_get_html_filename(url)
* Thu 11 Apr 2013 12:09:16 PM JST
s' %
* Thu 11 Apr 2013 12:09:16 PM JST
fname:%s' %
* Thu 11 Apr 2013 12:09:17 PM JST
py  fname:%s' %
* Thu 11 Apr 2013 12:09:17 PM JST
lxmllib.py  fname:%s' %
* Thu 11 Apr 2013 12:09:17 PM JST
1-lxmllib.py  fname:%s' %
* Thu 11 Apr 2013 12:09:18 PM JST
DEBUG-1-lxmllib.py  fname:%s' %
* Thu 11 Apr 2013 12:11:45 PM JST
　
* Thu 11 Apr 2013 12:16:18 PM JST

* Thu 11 Apr 2013 12:16:18 PM JST

* Thu 11 Apr 2013 12:16:18 PM JST
    else:

* Thu 11 Apr 2013 12:16:22 PM JST
mkstemp()
* Thu 11 Apr 2013 12:16:23 PM JST
tempfile.mkstemp()
* Thu 11 Apr 2013 12:17:25 PM JST
name
* Thu 11 Apr 2013 12:17:38 PM JST
string.lowercase
* Thu 11 Apr 2013 12:17:42 PM JST
s = 
* Thu 11 Apr 2013 12:21:30 PM JST
                if verbose:
                    print('Accessing: ' + url)

* Thu 11 Apr 2013 12:39:54 PM JST

* Thu 11 Apr 2013 12:39:54 PM JST

* Thu 11 Apr 2013 12:39:54 PM JST
import pygoogle

* Thu 11 Apr 2013 12:39:54 PM JST
import pygoogle

* Thu 11 Apr 2013 12:39:54 PM JST
import pygoogle
from mygoogle import search

* Thu 11 Apr 2013 12:39:54 PM JST
import pygoogle
from mygoogle import search

* Thu 11 Apr 2013 12:39:54 PM JST
import pygoogle
from mygoogle import search
from xgoogle.search import GoogleSearch

* Thu 11 Apr 2013 12:39:56 PM JST

* Thu 11 Apr 2013 12:39:56 PM JST

* Thu 11 Apr 2013 12:39:56 PM JST
from time import sleep

* Thu 11 Apr 2013 12:41:22 PM JST

* Thu 11 Apr 2013 12:41:22 PM JST

* Thu 11 Apr 2013 12:41:22 PM JST
                print(member.homepage)

* Thu 11 Apr 2013 01:41:12 PM JST
誠司
* Thu 11 Apr 2013 01:45:00 PM JST
lxml.html.fromstring(html)
* Thu 11 Apr 2013 01:45:25 PM JST
doc.xpath('//*[@id="member-content"]/div[2]/table')[0]
* Thu 11 Apr 2013 01:46:16 PM JST
for tr in table.xpath('//tr'):
* Thu 11 Apr 2013 01:46:23 PM JST
if u'ホームページ' == tr.xpath('//th')[0].text_content():
* Thu 11 Apr 2013 01:46:28 PM JST
self._homepage = tr.xpath('//a')[0].attrib['href']
* Thu 11 Apr 2013 01:46:58 PM JST
tr.xpath('//th')[0].text_content()
* Thu 11 Apr 2013 01:48:34 PM JST
table.xpath('//tr')
* Thu 11 Apr 2013 01:48:41 PM JST
enumerate(table.xpath('//tr'), start=0)
* Thu 11 Apr 2013 01:49:58 PM JST
0
* Thu 11 Apr 2013 01:49:59 PM JST
start=0
* Thu 11 Apr 2013 01:50:09 PM JST

* Thu 11 Apr 2013 01:50:09 PM JST

* Thu 11 Apr 2013 01:50:09 PM JST
                        print('hello')

* Thu 11 Apr 2013 01:50:13 PM JST

* Thu 11 Apr 2013 01:50:13 PM JST

* Thu 11 Apr 2013 01:50:13 PM JST
        print('world')

* Thu 11 Apr 2013 01:50:22 PM JST
g.members[u'前原誠司'].homepagen
* Thu 11 Apr 2013 01:51:58 PM JST
g.write_cvs('giin.cvs')
* Thu 11 Apr 2013 07:38:39 PM JST
         
* Fri 12 Apr 2013 05:15:25 AM JST
        
* Fri 12 Apr 2013 05:16:17 AM JST
                                  
* Fri 12 Apr 2013 05:16:26 AM JST
Ricty
* Fri 12 Apr 2013 05:18:32 AM JST
0oO
* Fri 12 Apr 2013 06:01:21 AM JST
Ricty Discord
* Fri 12 Apr 2013 06:02:01 AM JST
(set-face-attribute 'default nil
                    :family "Ricty Discord"
                    :height 120)
* Fri 12 Apr 2013 06:03:36 AM JST
RictyDiscord-Regular
* Fri 12 Apr 2013 06:04:56 AM JST
$HOME
* Fri 12 Apr 2013 06:10:51 AM JST
;; フォント
;; abcdefghijklmnopqrstuvwxyz 
;; ABCDEFGHIJKLMNOPQRSTUVWXYZ
;; `1234567890-=\[];',./
;; ~!@#$%^&*()_+|{}:"<>?
;;
;; 壱弐参四五壱弐参四五壱弐参四五壱弐参四五壱弐参四五壱弐参四五
;; 123456789012345678901234567890123456789012345678901234567890
;; ABCdeＡＢＣｄｅ
;;
;; ┌─────────────────────────────┐
;; │　　　　　　　　　　　　　罫線                            │
;; └─────────────────────────────┘
;;

* Fri 12 Apr 2013 06:12:10 AM JST
(set-fontset-font nil 'japanese-jisx0208 (font-spec :family "MeiryoKe_Console"))
* Fri 12 Apr 2013 06:12:12 AM JST
Console
* Fri 12 Apr 2013 06:12:12 AM JST
MeiryoKe_Console
* Fri 12 Apr 2013 06:12:25 AM JST
(set-fontset-font nil 'japanese-jisx0208 (font-spec :family "Ricty Discord"))
* 2013年04月12日 13時10分35秒
package
* 2013年04月12日 13時10分43秒
add 
* 2013年04月12日 13時10分50秒
to load-path
* 2013年04月12日 13時10分51秒
j
* 2013年04月12日 14時05分44秒
emacswikipages/"
* 2013年04月12日 14時05分54秒
load-path
* Sat 13 Apr 2013 05:49:32 AM JST
自民
* Sat 13 Apr 2013 05:49:52 AM JST
民主
* Sat 13 Apr 2013 05:50:04 AM JST
公明
* Sat 13 Apr 2013 05:50:13 AM JST
u'みんな'
* Sat 13 Apr 2013 05:51:13 AM JST
LDP
* Sat 13 Apr 2013 06:52:22 AM JST
http://www.shugiin.go.jp/index.nsf/html/index_kousei2.htm
* Sat 13 Apr 2013 06:53:43 AM JST
/html/body/table[2]/tbody/tr/td/table
* Sat 13 Apr 2013 07:02:35 AM JST
xpath('')
* Sat 13 Apr 2013 07:02:35 AM JST
0].xpath('')
* Sat 13 Apr 2013 07:04:26 AM JST
/html/frameset/frameset/frame[2]
* Sat 13 Apr 2013 07:07:48 AM JST
dir(
* Sat 13 Apr 2013 07:10:20 AM JST
frameset
* Sat 13 Apr 2013 07:21:30 AM JST
Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.63 Safari/537.31
* Sat 13 Apr 2013 07:24:40 AM JST
[l for l in  _ih if l.startswith('plot')]
* Sat 13 Apr 2013 07:24:57 AM JST
[l for l in  _ih if l.startswith('doc')]
* Sat 13 Apr 2013 07:25:10 AM JST
doc = giin.lxml_soup('http://www.shugiin.go.jp/index.nsf/html/index_kousei2.htm')
* Sat 13 Apr 2013 07:30:45 AM JST
http://www.shugiin.go.jp/index.nsf/html/index_kousei2.htm
* Sat 13 Apr 2013 07:46:22 AM JST
opener.addheader = [(')]
* Sat 13 Apr 2013 07:46:43 AM JST
http://www.shugiin.go.jp/index.nsf/html/index_kousei2.htm
* Sat 13 Apr 2013 07:47:29 AM JST
text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
* Sat 13 Apr 2013 07:48:12 AM JST
Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.63 Safari/537.31
* Sat 13 Apr 2013 07:49:03 AM JST
gzip,deflate,sdch
* Sat 13 Apr 2013 07:49:30 AM JST
ja,en-US;q=0.8,en;q=0.6
* Sat 13 Apr 2013 07:49:55 AM JST
Accept-Charset: UTF-8,*;q=0.5\r\n
* Sat 13 Apr 2013 07:50:30 AM JST
h = request.read()
* Sat 13 Apr 2013 07:54:53 AM JST
home_folder = os.getenv('HOME')
* Sat 13 Apr 2013 07:55:04 AM JST
cookie_jar = cookielib.LWPCookieJar(
                            os.path.join(home_folder, '.google-cookie'))

* Sat 13 Apr 2013 07:56:15 AM JST
http://www.shugiin.go.jp/index.nsf/html/index_kousei2.htm
* Sat 13 Apr 2013 07:56:29 AM JST
request.add_header()
* Sat 13 Apr 2013 07:56:31 AM JST
    request.add_header('User-Agent',
                       'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0)')

* Sat 13 Apr 2013 07:56:46 AM JST
                       
* Sat 13 Apr 2013 07:56:57 AM JST
response = urllib2.urlopen(request)
* Sat 13 Apr 2013 07:57:13 AM JST
response = urllib2.urlopen(request)
* Sat 13 Apr 2013 07:57:16 AM JST
cookie_jar.add_cookie_header(request)
* Sat 13 Apr 2013 07:57:20 AM JST
response = urllib2.urlopen(request)
* Sat 13 Apr 2013 07:57:26 AM JST
cookie_jar.extract_cookies(response, request)
* Sat 13 Apr 2013 07:57:33 AM JST
html = response.read()
* Sat 13 Apr 2013 08:11:20 AM JST
http://www.shugiin.go.jp/index.nsf/html/index_kousei2.htm
* Sat 13 Apr 2013 08:17:27 AM JST
自由民主党	
自民
294
民主党・無所属クラブ	
民主
56
日本維新の会	
維新
54
公明党	
公明
31
みんなの党	
みんな
18
日本共産党	
共産
8
生活の党	
生活
7
社会民主党・市民連合	
社民
2
無所属	
無
* Sat 13 Apr 2013 08:17:38 AM JST
民主党・新緑風会	民主
自由民主党・無所属の会	自民
公明党	公明
みんなの党	みん
生活の党	生活
日本共産党	共産
みどりの風	み風
社会民主党・護憲連合	社民
日本維新の会	維新
新党改革	改革
各派に属しない議員	無所属
* Sat 13 Apr 2013 08:17:48 AM JST
公明
* Sat 13 Apr 2013 08:18:01 AM JST
みんな
* Sat 13 Apr 2013 08:18:06 AM JST
みんなの
* Sat 13 Apr 2013 08:18:22 AM JST
みん
* Sat 13 Apr 2013 08:18:33 AM JST
みんなの
* Sat 13 Apr 2013 08:18:45 AM JST
生活
* Sat 13 Apr 2013 08:18:56 AM JST
生活の
* Sat 13 Apr 2013 08:19:07 AM JST
共産
* Sat 13 Apr 2013 08:19:14 AM JST
日本共産
* Sat 13 Apr 2013 08:19:22 AM JST
みどりの
* Sat 13 Apr 2013 08:19:28 AM JST
み風
* Sat 13 Apr 2013 08:19:40 AM JST
みどりの風
* Sat 13 Apr 2013 08:19:50 AM JST
社民
* Sat 13 Apr 2013 08:20:01 AM JST
社会民主
* Sat 13 Apr 2013 08:20:11 AM JST
改革
* Sat 13 Apr 2013 08:20:19 AM JST
新党改革
* Sat 13 Apr 2013 08:20:30 AM JST
無
* Sat 13 Apr 2013 08:20:41 AM JST
無所属
* Sat 13 Apr 2013 08:24:30 AM JST
'自由民主'
* Sat 13 Apr 2013 08:25:54 AM JST
u'自由民主'
* Sat 13 Apr 2013 08:26:51 AM JST
日本維新の会
* Sat 13 Apr 2013 08:27:15 AM JST
みんなの
* Sat 13 Apr 2013 08:39:50 AM JST
無所属
* Sat 13 Apr 2013 08:48:20 AM JST
u'　', ''
* Sat 13 Apr 2013 08:48:54 AM JST
txt.replace(u'　', '', )
* Sat 13 Apr 2013 08:51:41 AM JST
td[i].text_content()
* Sat 13 Apr 2013 08:51:56 AM JST
'　', ''
* Sat 13 Apr 2013 08:52:44 AM JST
PARTY_ABBREV.get(txt, txt)
* Sat 13 Apr 2013 08:54:18 AM JST
members
* Sat 13 Apr 2013 09:02:40 AM JST
------------------|
* Sat 13 Apr 2013 09:03:34 AM JST

* Sat 13 Apr 2013 09:03:34 AM JST

* Sat 13 Apr 2013 09:03:34 AM JST
                    # | 山田 太郎 | 

* Sat 13 Apr 2013 09:13:04 AM JST
吉田　　　泉
* Sat 13 Apr 2013 09:13:54 AM JST
　
* Sat 13 Apr 2013 09:15:02 AM JST
'吉田　　　泉'
* Sat 13 Apr 2013 09:16:23 AM JST
.strip()
* Sat 13 Apr 2013 09:16:28 AM JST
print re.sub('　+', ' ', '吉田　　　泉')
* Sat 13 Apr 2013 09:16:42 AM JST
'吉田　　　泉'
* Sat 13 Apr 2013 09:16:57 AM JST
　
* Sat 13 Apr 2013 09:17:09 AM JST
'吉田　　　泉'.split('　')
* Sat 13 Apr 2013 09:20:38 AM JST
' '.join(filter(None, '吉田　　　泉'.split('　')))
* Sat 13 Apr 2013 09:21:35 AM JST
泉'
* Sat 13 Apr 2013 09:21:36 AM JST
吉田　　　泉'
* Sat 13 Apr 2013 09:22:12 AM JST
txt
* Sat 13 Apr 2013 09:22:19 AM JST
txt
* Sat 13 Apr 2013 09:22:47 AM JST
extension
* Sat 13 Apr 2013 09:22:48 AM JST
from extension
* Sat 13 Apr 2013 09:23:43 AM JST
吉田 泉
* Sat 13 Apr 2013 09:24:56 AM JST
trimed
* Sat 13 Apr 2013 09:24:59 AM JST
trimed
* Sat 13 Apr 2013 09:40:30 AM JST

* Sat 13 Apr 2013 09:40:30 AM JST

* Sat 13 Apr 2013 09:40:30 AM JST
                            txt = just_one_space(txt)

* Sat 13 Apr 2013 09:41:35 AM JST
txt.replace(u' ', '')
* Sat 13 Apr 2013 09:41:38 AM JST

* Sat 13 Apr 2013 09:41:39 AM JST

* Sat 13 Apr 2013 09:41:39 AM JST
                            txt = 

* Sat 13 Apr 2013 09:42:48 AM JST
td[i].text_content()
* Sat 13 Apr 2013 09:43:33 AM JST
text_content()
* Sat 13 Apr 2013 09:43:34 AM JST
i].text_content()
* Sat 13 Apr 2013 09:43:39 AM JST
txt.replace(u' ', '')
* Sat 13 Apr 2013 09:43:42 AM JST

* Sat 13 Apr 2013 09:43:42 AM JST

* Sat 13 Apr 2013 09:43:43 AM JST
                        txt = txt.replace(u' ', '')

* Sat 13 Apr 2013 09:44:25 AM JST
doc.xpath('/html/frameset/frameset/frame[2]')[0]
* Sat 13 Apr 2013 09:57:03 AM JST
class SangiinParse(object):
    """
    """
    members = []
    url = 'http://www.sangiin.go.jp/japanese/joho1/kousei/giin/183/giin.htm'

    def get_list(self):
        """Return members infomation list.

        @Return:
        """
        doc = lxml_soup(self.url, verbose=True)
        table = doc.xpath('//*[@id="ContentsBox"]/table[2]')[0]
        giin = 'sangiin'
        for tr in table[1:]:
            member_info = []
            member_info.append(giin)
            td = tr.xpath('td')
            for i in range(4):
                if td[i].text_content() is None:
                    member_info.append('')
                else:
                    txt = just_one_space(td[i].text_content())
                    # name
                    if 0 == i:
                        member_info.append(txt.replace('[', ' ').replace(']', ''))
                    # party
                    elif 2 == i:
                        member_info.append(PARTY_ABBREV.get(txt.replace(' ', ''), txt))
                    else:
                        member_info.append(txt)
            self.members.append(member_info)
        return self.members

* Sat 13 Apr 2013 09:57:09 AM JST
SangiinParse
* Sat 13 Apr 2013 09:57:13 AM JST

* Sat 13 Apr 2013 09:57:13 AM JST

* Sat 13 Apr 2013 09:57:13 AM JST
    members = []

* Sat 13 Apr 2013 09:57:17 AM JST
get_list
* Sat 13 Apr 2013 09:57:23 AM JST

* Sat 13 Apr 2013 09:57:23 AM JST

* Sat 13 Apr 2013 09:57:23 AM JST
        return self.members

* Sat 13 Apr 2013 09:57:25 AM JST

* Sat 13 Apr 2013 09:57:25 AM JST

* Sat 13 Apr 2013 09:57:25 AM JST
            self.members.append(member_info)

* Sat 13 Apr 2013 09:58:37 AM JST
SangiinParse
* Sat 13 Apr 2013 09:59:05 AM JST

* Sat 13 Apr 2013 09:59:05 AM JST

* Sat 13 Apr 2013 09:59:05 AM JST
    members = []

* Sat 13 Apr 2013 09:59:08 AM JST

* Sat 13 Apr 2013 09:59:08 AM JST

* Sat 13 Apr 2013 09:59:08 AM JST
        return self.members

* Sat 13 Apr 2013 09:59:12 AM JST
self.members.append(
* Sat 13 Apr 2013 09:59:25 AM JST
get_list
* Sat 13 Apr 2013 10:00:21 AM JST
get_list()
* Sat 13 Apr 2013 10:00:23 AM JST
get_list()
* Sat 13 Apr 2013 10:03:21 AM JST
giin_lis
* Sat 13 Apr 2013 10:03:30 AM JST

* Sat 13 Apr 2013 10:03:30 AM JST

* Sat 13 Apr 2013 10:03:30 AM JST
        giin_lis = SyuugiinParse()

* Sat 13 Apr 2013 10:03:30 AM JST
        giin_lis = SyuugiinParse()

* Sat 13 Apr 2013 10:03:30 AM JST
        giin_lis = SyuugiinParse()
        giin_lis += SangiinParse()

* Sat 13 Apr 2013 10:17:27 AM JST
'str' object is not callable
* Sat 13 Apr 2013 10:20:55 AM JST
globals()[party.get(party)](*el)
* Sat 13 Apr 2013 10:21:39 AM JST
party
* Sat 13 Apr 2013 10:24:01 AM JST
u'\u5c0f\u6797\u8302\u6a39'
* Sat 13 Apr 2013 10:24:08 AM JST
小林茂樹
* Sat 13 Apr 2013 10:27:32 AM JST
PARTYS = {u'自由民主': 'LDP',
         u'民主':     'DPJ',
         u'公明':     'Koumei',
         u'みんなの': 'Minna',
         }

* Sat 13 Apr 2013 10:27:44 AM JST
PARTYS
* Sat 13 Apr 2013 10:27:51 AM JST
PARTYS
* Sat 13 Apr 2013 10:27:59 AM JST
    
* Sat 13 Apr 2013 10:29:20 AM JST
list
* Sat 13 Apr 2013 10:29:28 AM JST
os 
* Sat 13 Apr 2013 10:29:28 AM JST
list os 
* Sat 13 Apr 2013 10:29:49 AM JST
 append to members 
* Sat 13 Apr 2013 10:35:53 AM JST
Like this [
* Sat 13 Apr 2013 10:53:11 AM JST
脇 雅史
* Sat 13 Apr 2013 11:00:55 AM JST
def just_one_space(str_):
    """SUMMARY

    @Arguments:
    - `str_`:

    @Return:
    """
    return ' '.join(filter(None, str_.split(u'　')))


* Sat 13 Apr 2013 11:01:03 AM JST
            
* Sat 13 Apr 2013 12:03:58 PM JST
http://ja.wikipedia.org/wiki/%E8%A1%86%E8%AD%B0%E9%99%A2%E8%AD%B0%E5%93%A1%E4%B8%80%E8%A6%A7
* Sat 13 Apr 2013 12:08:02 PM JST
print 
* Sat 13 Apr 2013 12:08:05 PM JST
u'\xe9\x81\xb8\xe6\x8c\x99\xe6\x97\xa5\xef\xbc\x88\xe4\xbb\xbb\xe6\x9c\x9f\xe3\x81\xae\xe5\xa7\x8b\xe6\x9c\x9f\xef\xbc\x89'
* Sat 13 Apr 2013 12:08:41 PM JST
8')
* Sat 13 Apr 2013 12:08:41 PM JST
utf-8')
* Sat 13 Apr 2013 12:08:41 PM JST
encode('utf-8')
* Sat 13 Apr 2013 12:10:41 PM JST
print 
* Sat 13 Apr 2013 12:14:26 PM JST
.attrib['href']
* Sat 13 Apr 2013 01:37:17 PM JST
urlparse.urljoin('ja.wikipedia.org', 'hello')
* Sat 13 Apr 2013 01:38:54 PM JST
'http://ja.wikipedia.org/wiki'
* Sat 13 Apr 2013 01:41:23 PM JST

* Sat 13 Apr 2013 01:41:23 PM JST

* Sat 13 Apr 2013 01:41:23 PM JST
        if not url:

* Sat 13 Apr 2013 01:41:23 PM JST
        if not url:

* Sat 13 Apr 2013 01:41:23 PM JST
        if not url:
            raise NothingURLError

* Sat 13 Apr 2013 01:44:17 PM JST
        except:
            self._homepage = ''
            self._blog = ''
            self._twitter = ''
            self._rss = ''

* Sat 13 Apr 2013 01:44:55 PM JST

* Sat 13 Apr 2013 01:44:55 PM JST

* Sat 13 Apr 2013 01:44:55 PM JST
            self._blog = ''

* Sat 13 Apr 2013 01:44:55 PM JST
            self._blog = ''

* Sat 13 Apr 2013 01:44:55 PM JST
            self._blog = ''
            self._twitter = ''

* Sat 13 Apr 2013 01:45:45 PM JST
    @property
    def rss(self):
        """Return url of rss.

        @Return: string of url.
        """
        print('DEBUG-9-giin.py')
        if self._rss is None:
            self.set_additional_info()
        return self._rss

* Sat 13 Apr 2013 03:44:58 PM JST
 $SVNROOT/.pylib                             
* Sat 13 Apr 2013 03:45:02 PM JST
QU /root/.emacs.d# svn comi
* Sat 13 Apr 2013 03:48:27 PM JST
リポジトリ側と比べて古くなっています
* Sat 13 Apr 2013 04:08:31 PM JST
urlparse.urljoin('http://ja.wikipedia.org/wiki', 'hello')
* Sat 13 Apr 2013 04:12:09 PM JST
member_
* Sat 13 Apr 2013 04:14:57 PM JST
' '.join(filter(None, str_.split(u'　')))
* Sat 13 Apr 2013 04:17:34 PM JST
multi_one
* Sat 13 Apr 2013 04:18:05 PM JST
SUMMARY
* Sat 13 Apr 2013 04:19:03 PM JST
　
* Sat 13 Apr 2013 04:20:16 PM JST
just_one
* Sat 13 Apr 2013 04:21:36 PM JST
str_
* Sat 13 Apr 2013 04:24:12 PM JST
new = ' '.join(filter(None, str_.split(' ')))
* Sat 13 Apr 2013 04:24:32 PM JST
' '.join(filter(None, new.split(u'　')))
* Sat 13 Apr 2013 04:28:56 PM JST

* Sat 13 Apr 2013 04:28:56 PM JST

* Sat 13 Apr 2013 04:28:56 PM JST
        giin = 'sangiin'

* Sat 13 Apr 2013 04:29:14 PM JST
just_one_space
* Sat 13 Apr 2013 04:29:38 PM JST

* Sat 13 Apr 2013 04:29:38 PM JST

* Sat 13 Apr 2013 04:29:38 PM JST
                        new = ' '.join(filter(None, str_.split(' ')))

* Sat 13 Apr 2013 04:29:38 PM JST
                        new = ' '.join(filter(None, str_.split(' ')))

* Sat 13 Apr 2013 04:29:38 PM JST
                        new = ' '.join(filter(None, str_.split(' ')))
                        new = ' '.join(filter(None, new.split(u'　')))

* Sat 13 Apr 2013 04:29:56 PM JST
self.
* Sat 13 Apr 2013 04:31:31 PM JST
td[i].text_content()
* Sat 13 Apr 2013 04:34:54 PM JST
trimable
* Sat 13 Apr 2013 04:35:09 PM JST
str_.find('[')]
* Sat 13 Apr 2013 04:36:07 PM JST

* Sat 13 Apr 2013 04:36:07 PM JST

* Sat 13 Apr 2013 04:36:07 PM JST
                        # trim string after '['

* Sat 13 Apr 2013 04:37:26 PM JST
str_.replace(' ', '')
* Sat 13 Apr 2013 04:40:29 PM JST

* Sat 13 Apr 2013 04:40:29 PM JST

* Sat 13 Apr 2013 04:40:29 PM JST
    def __init__(self, ):

* Sat 13 Apr 2013 04:40:30 PM JST
    def __init__(self, ):

* Sat 13 Apr 2013 04:40:30 PM JST
    def __init__(self, ):
        """

* Sat 13 Apr 2013 04:40:30 PM JST
    def __init__(self, ):
        """

* Sat 13 Apr 2013 04:40:30 PM JST
    def __init__(self, ):
        """
        """

* Sat 13 Apr 2013 04:42:39 PM JST

* Sat 13 Apr 2013 04:42:39 PM JST

* Sat 13 Apr 2013 04:42:39 PM JST
                    # second element

* Sat 13 Apr 2013 04:48:59 PM JST
object
* Sat 13 Apr 2013 04:49:18 PM JST
_ParseBase
* Sat 13 Apr 2013 04:50:46 PM JST
True
* Sat 13 Apr 2013 04:51:03 PM JST

* Sat 13 Apr 2013 04:51:03 PM JST

* Sat 13 Apr 2013 04:51:03 PM JST
        """Return members infomation list.

* Sat 13 Apr 2013 04:51:03 PM JST

* Sat 13 Apr 2013 04:51:03 PM JST

* Sat 13 Apr 2013 04:51:03 PM JST
        @Return:

* Sat 13 Apr 2013 04:51:04 PM JST
        @Return:

* Sat 13 Apr 2013 04:51:04 PM JST
        @Return:
        """

* Sat 13 Apr 2013 04:51:47 PM JST

* Sat 13 Apr 2013 04:51:47 PM JST

* Sat 13 Apr 2013 04:51:47 PM JST
            giin = 'syuugiin'

* Sat 13 Apr 2013 04:52:16 PM JST
member_
* Sat 13 Apr 2013 04:53:48 PM JST
font[i].text_content()
* Sat 13 Apr 2013 04:53:51 PM JST
text_content()
* Sat 13 Apr 2013 04:53:51 PM JST
i].text_content()
* Sat 13 Apr 2013 04:53:51 PM JST
font[i].text_content()
* Sat 13 Apr 2013 04:54:33 PM JST
just_
* Sat 13 Apr 2013 04:54:41 PM JST
txt
* Sat 13 Apr 2013 04:54:45 PM JST
txt
* Sat 13 Apr 2013 04:54:49 PM JST
txt
* Sat 13 Apr 2013 04:54:52 PM JST
txt
* Sat 13 Apr 2013 04:57:37 PM JST
info.append(
* Sat 13 Apr 2013 04:57:52 PM JST
str_
* Sat 13 Apr 2013 04:58:23 PM JST
trimed_
* Sat 13 Apr 2013 04:58:42 PM JST
info.append(
* Sat 13 Apr 2013 04:58:51 PM JST
info.append(
* Sat 13 Apr 2013 04:59:27 PM JST

* Sat 13 Apr 2013 04:59:28 PM JST

* Sat 13 Apr 2013 04:59:28 PM JST
                        else:

* Sat 13 Apr 2013 04:59:28 PM JST
                        else:

* Sat 13 Apr 2013 04:59:28 PM JST
                        else:
                            trimed_str = str_

* Sat 13 Apr 2013 05:00:11 PM JST
info.append(
* Sat 13 Apr 2013 05:00:22 PM JST

* Sat 13 Apr 2013 05:00:22 PM JST

* Sat 13 Apr 2013 05:00:22 PM JST
                    else:

* Sat 13 Apr 2013 05:00:22 PM JST
                    else:

* Sat 13 Apr 2013 05:00:22 PM JST
                    else:
                        info.append(str_)

* Sat 13 Apr 2013 05:02:23 PM JST
trimed_
* Sat 13 Apr 2013 05:04:06 PM JST
str_.replace('\n', '')
* Sat 13 Apr 2013 05:05:43 PM JST
str_.replace(u' ', '')
* Sat 13 Apr 2013 05:05:58 PM JST
txt
* Sat 13 Apr 2013 05:06:01 PM JST
txt
* Sat 13 Apr 2013 05:07:57 PM JST
    # partys = {u'自由民主': 'LDP',
    #           u'民主':     'DPJ',
    #           u'公明':     'Koumei',
    #           u'みんなの': 'Minna',}

* Sat 13 Apr 2013 05:08:07 PM JST
DPJ
* Sat 13 Apr 2013 05:08:09 PM JST
Koumei
* Sat 13 Apr 2013 05:08:12 PM JST
Minna
* Sat 13 Apr 2013 05:12:53 PM JST
u'\xe5\x85\xac\xe5\xbc\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'
* Sat 13 Apr 2013 05:15:09 PM JST
        # '公式サイト'
        txt = u'\xe5\x85\xac\xe5\xbc\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'

* Sat 13 Apr 2013 05:15:12 PM JST
        # '公式サイト'
        txt = u'\xe5\x85\xac\xe5\xbc\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'

* Sat 13 Apr 2013 05:15:54 PM JST
txt
* Sat 13 Apr 2013 05:16:06 PM JST
txt
* Sat 13 Apr 2013 05:17:38 PM JST

* Sat 13 Apr 2013 05:17:38 PM JST

* Sat 13 Apr 2013 05:17:38 PM JST
        self._blog = ''

* Sat 13 Apr 2013 05:17:38 PM JST
        self._blog = ''

* Sat 13 Apr 2013 05:17:38 PM JST
        self._blog = ''
        self._twitter = ''

* Sat 13 Apr 2013 05:21:52 PM JST
False
* Sat 13 Apr 2013 05:21:53 PM JST
verbose=False
* Sat 13 Apr 2013 05:22:00 PM JST
True
* Sat 13 Apr 2013 05:22:16 PM JST
True
* Sat 13 Apr 2013 05:22:21 PM JST
True
* Sat 13 Apr 2013 05:22:31 PM JST
False
* Sat 13 Apr 2013 05:22:31 PM JST
verbose=False
* Sat 13 Apr 2013 05:22:32 PM JST
self, verbose=False
* Sat 13 Apr 2013 05:22:38 PM JST
True
* Sat 13 Apr 2013 05:22:48 PM JST
self._verbose
* Sat 13 Apr 2013 05:24:10 PM JST
self.verbose
* Sat 13 Apr 2013 05:25:27 PM JST
turnon_verbose
* Sat 13 Apr 2013 05:25:30 PM JST
turnon_
* Sat 13 Apr 2013 05:25:36 PM JST
turnoff_
* Sat 13 Apr 2013 05:26:49 PM JST
    def verbose_on(self):
        """SUMMARY

        @Return:
        """
        self._verbose = True
    
    def verbose_off(self):
        """SUMMARY
        
        @Return:
        """
        self._verbose = False

* Sat 13 Apr 2013 05:27:00 PM JST
SUMMARY
* Sat 13 Apr 2013 05:27:15 PM JST

* Sat 13 Apr 2013 05:27:15 PM JST

* Sat 13 Apr 2013 05:27:15 PM JST
        @Return:

* Sat 13 Apr 2013 05:27:18 PM JST
       
* Sat 13 Apr 2013 05:27:27 PM JST
"""Turn off verbose mode."""
* Sat 13 Apr 2013 05:27:43 PM JST

* Sat 13 Apr 2013 05:27:43 PM JST

* Sat 13 Apr 2013 05:27:43 PM JST
        """

* Sat 13 Apr 2013 05:27:43 PM JST
        """

* Sat 13 Apr 2013 05:27:43 PM JST
        """
        """

* Sat 13 Apr 2013 05:28:01 PM JST
    
* Sat 13 Apr 2013 05:28:24 PM JST
object
* Sat 13 Apr 2013 05:32:10 PM JST

* Sat 13 Apr 2013 05:32:10 PM JST

* Sat 13 Apr 2013 05:32:10 PM JST
        self._verbose = verbose

* Sat 13 Apr 2013 05:32:25 PM JST
class _Verbose(object):
    """Abstract for verbose mode."""
    
    def __init__(self, verbose=False):
        self._verbose = verbose
        
    def verbose_on(self):
        """Turn on verbose mode."""
        self._verbose = True
    
    def verbose_off(self):
        """Turn off verbose mode."""
        self._verbose = False



* Sat 13 Apr 2013 05:33:20 PM JST
object
* Sat 13 Apr 2013 05:33:38 PM JST
verbose
* Sat 13 Apr 2013 05:34:21 PM JST
                      
* Sat 13 Apr 2013 05:35:06 PM JST
_
* Sat 13 Apr 2013 05:35:10 PM JST
_
* Sat 13 Apr 2013 05:35:11 PM JST
self._
* Sat 13 Apr 2013 05:39:44 PM JST

* Sat 13 Apr 2013 05:39:44 PM JST

* Sat 13 Apr 2013 05:39:44 PM JST
        rss_links = []

* Sat 13 Apr 2013 05:42:05 PM JST
object.__init__() takes no parameters
* Sat 13 Apr 2013 05:43:06 PM JST
Giin
* Sat 13 Apr 2013 05:43:27 PM JST
_ParseBase
* Sat 13 Apr 2013 05:45:35 PM JST
partys = {u'自由民主': '',
              u'民主':     '',
              u'公明':     '',
              u'みんなの': '',}
* Sat 13 Apr 2013 05:46:56 PM JST
    # partys = {u'自由民主': 'LDP',
    #           u'民主':     'DPJ',
    #           u'公明':     'Koumei',
    #           u'みんなの': 'Minna',}

* Sat 13 Apr 2013 05:47:02 PM JST
自由民主
* Sat 13 Apr 2013 05:47:03 PM JST
民主
* Sat 13 Apr 2013 05:47:04 PM JST
公明
* Sat 13 Apr 2013 05:47:06 PM JST
みんなの
* Sat 13 Apr 2013 05:51:17 PM JST
http://ja.wikipedia.org/wiki/蓮舫
* Sat 13 Apr 2013 05:54:13 PM JST
http://ja.wikipedia.org/wiki/蓮舫
* Sat 13 Apr 2013 05:57:45 PM JST
    @property
    def homepage(self):
        """Return homepages url.

        @Return: string of url.
        """
        print('DEBUG-6-giin.py')
        if self._homepage is None:
            self.set_additional_info()
        return self._homepage

* Sat 13 Apr 2013 05:57:53 PM JST
homepage
* Sat 13 Apr 2013 05:58:02 PM JST
_homepage
* Sat 13 Apr 2013 05:58:08 PM JST
homepage
* Sat 13 Apr 2013 06:13:20 PM JST
giin
* Sat 13 Apr 2013 06:13:22 PM JST
giin
* Sat 13 Apr 2013 06:15:14 PM JST
urlparse.urlparse
* Sat 13 Apr 2013 06:18:08 PM JST
urlparse.urlparse('http://ja.wikipadia.org/wiki/蓮舫')
* Sat 13 Apr 2013 06:18:19 PM JST
'/tmp/urllib_cache/www.shugiin.go.jp'
* Sat 13 Apr 2013 06:35:06 PM JST
setted
* Sat 13 Apr 2013 06:35:35 PM JST
self
* Sat 13 Apr 2013 06:42:14 PM JST

* Sat 13 Apr 2013 06:42:15 PM JST

* Sat 13 Apr 2013 06:42:15 PM JST
        print('DEBUG-6-giin.py')

* Sat 13 Apr 2013 06:42:21 PM JST

* Sat 13 Apr 2013 06:42:21 PM JST

* Sat 13 Apr 2013 06:42:21 PM JST
        print('DEBUG-6-giin.py')

* Sat 13 Apr 2013 06:43:00 PM JST

* Sat 13 Apr 2013 06:43:00 PM JST

* Sat 13 Apr 2013 06:43:00 PM JST
        @Return:

* Sat 13 Apr 2013 06:43:03 PM JST

* Sat 13 Apr 2013 06:43:03 PM JST

* Sat 13 Apr 2013 06:43:03 PM JST
        print('DEBUG-1-giin.py')

* Sat 13 Apr 2013 06:43:11 PM JST

* Sat 13 Apr 2013 06:43:11 PM JST

* Sat 13 Apr 2013 06:43:11 PM JST
        print('DEBUG-2-giin.py')

* Sat 13 Apr 2013 06:43:28 PM JST

* Sat 13 Apr 2013 06:43:28 PM JST

* Sat 13 Apr 2013 06:43:28 PM JST
        print('DEBUG-3-giin.py')

* Sat 13 Apr 2013 06:43:51 PM JST

* Sat 13 Apr 2013 06:43:51 PM JST

* Sat 13 Apr 2013 06:43:51 PM JST
        print('DEBUG-5-giin.py')

* Sat 13 Apr 2013 06:43:52 PM JST
        print('DEBUG-5-giin.py')

* Sat 13 Apr 2013 06:43:52 PM JST
        print('DEBUG-5-giin.py')
        # query = ('site:' + self.url + ' ' + self.name.replace(u'　', '') +

* Sat 13 Apr 2013 06:43:52 PM JST
        print('DEBUG-5-giin.py')
        # query = ('site:' + self.url + ' ' + self.name.replace(u'　', '') +

* Sat 13 Apr 2013 06:43:52 PM JST
        print('DEBUG-5-giin.py')
        # query = ('site:' + self.url + ' ' + self.name.replace(u'　', '') +
                  # ' ' + self.party + ' ' + u'政治家')

* Sat 13 Apr 2013 06:43:52 PM JST
        print('DEBUG-5-giin.py')
        # query = ('site:' + self.url + ' ' + self.name.replace(u'　', '') +
                  # ' ' + self.party + ' ' + u'政治家')

* Sat 13 Apr 2013 06:43:52 PM JST
        print('DEBUG-5-giin.py')
        # query = ('site:' + self.url + ' ' + self.name.replace(u'　', '') +
                  # ' ' + self.party + ' ' + u'政治家')
        # url = google_feeling_lucky(query, verbose=True)

* Sat 13 Apr 2013 06:48:05 PM JST
_homepage
* Sat 13 Apr 2013 09:04:30 PM JST

* Sat 13 Apr 2013 09:04:31 PM JST

* Sat 13 Apr 2013 09:04:31 PM JST
    print('DEBUG-1-lxmllib.py  fname:%s' % fname)

* Sat 13 Apr 2013 09:04:35 PM JST

* Sat 13 Apr 2013 09:04:35 PM JST

* Sat 13 Apr 2013 09:04:35 PM JST
    print('DEBUG-2-lxmllib.py  url:%s' % url)

* Sat 13 Apr 2013 09:11:57 PM JST
                    
* Sat 13 Apr 2013 09:12:26 PM JST
                    
* Sat 13 Apr 2013 09:12:40 PM JST
globals()[self.partys.get(party_name, 'Other')](verbose=self._verbose, *el)
* Sat 13 Apr 2013 09:13:23 PM JST
obj(verbose=self._verbose, *el)
* Sat 13 Apr 2013 09:15:09 PM JST
g = giin.Giin(verbose=True)
* Sat 13 Apr 2013 09:17:30 PM JST
Setted
* Sat 13 Apr 2013 09:17:36 PM JST
Setted
* Sat 13 Apr 2013 09:20:43 PM JST
rss_links[0]
* Sat 13 Apr 2013 09:22:46 PM JST

* Sat 13 Apr 2013 09:22:46 PM JST

* Sat 13 Apr 2013 09:22:46 PM JST
            self._homepage = ''

* Sat 13 Apr 2013 09:22:46 PM JST
            self._homepage = ''

* Sat 13 Apr 2013 09:22:46 PM JST
            self._homepage = ''
            self._rss = ''

* Sat 13 Apr 2013 09:24:38 PM JST
            table = doc.xpath('//*[@class="infobox"]')[0]

            for tr in table:
                if (tr[0].text and self.site_str == tr[0].text):
                    self._homepage = tr[1].xpath('a')[0].attrib['href']
                    if self._verbose:
                        print('Homepage: ' + self._homepage)

* Sat 13 Apr 2013 09:24:42 PM JST

* Sat 13 Apr 2013 09:24:42 PM JST

* Sat 13 Apr 2013 09:24:42 PM JST
        try:

* Sat 13 Apr 2013 09:24:42 PM JST
        try:

* Sat 13 Apr 2013 09:24:42 PM JST
        try:
        except:

* Sat 13 Apr 2013 09:24:43 PM JST
        try:
        except:

* Sat 13 Apr 2013 09:24:43 PM JST
        try:
        except:
            self._homepage = ''

* Sat 13 Apr 2013 09:25:16 PM JST
            if rss_links and not self._rss == rss_links[0]:
                self._rss = rss_links[0]
                if self._verbose:
                    print('RSS: ' + self._rss)

* Sat 13 Apr 2013 09:28:32 PM JST
今野 智博
* Sat 13 Apr 2013 09:30:41 PM JST
小川 淳也
* Sat 13 Apr 2013 09:32:10 PM JST
坂本 剛二
* Sat 13 Apr 2013 09:34:07 PM JST
'ウェブサイト'
* Sat 13 Apr 2013 09:34:21 PM JST
\xe3\x82\xa6\xe3\x82\xa7\xe3\x83\x96\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88
* Sat 13 Apr 2013 09:35:42 PM JST
tr[0].text
* Sat 13 Apr 2013 09:36:31 PM JST
                 
* Sat 13 Apr 2013 09:37:49 PM JST
鈴木 俊一
* Sat 13 Apr 2013 09:38:45 PM JST
佐藤 茂樹
* Sat 13 Apr 2013 09:51:19 PM JST

* Sat 13 Apr 2013 09:51:19 PM JST

* Sat 13 Apr 2013 09:51:19 PM JST
                # for save flow

* Sat 13 Apr 2013 09:51:20 PM JST
                # for save flow

* Sat 13 Apr 2013 09:51:20 PM JST
                # for save flow
                sleep(10)

* Sat 13 Apr 2013 09:52:49 PM JST
wait = 
* Sat 13 Apr 2013 09:55:11 PM JST

* Sat 13 Apr 2013 09:55:11 PM JST

* Sat 13 Apr 2013 09:55:11 PM JST
            print(fname)

* Sat 13 Apr 2013 09:55:15 PM JST

* Sat 13 Apr 2013 09:55:15 PM JST

* Sat 13 Apr 2013 09:55:15 PM JST
            print(fname)

* Sat 13 Apr 2013 09:55:36 PM JST
_
* Sat 13 Apr 2013 09:55:37 PM JST
self
* Sat 13 Apr 2013 09:55:40 PM JST
_
* Sat 13 Apr 2013 09:55:40 PM JST
self._
* Sat 13 Apr 2013 10:09:20 PM JST
continue
* Sat 13 Apr 2013 10:10:05 PM JST
from time import sleep
* Sat 13 Apr 2013 10:10:58 PM JST
e
* Sat 13 Apr 2013 10:11:01 PM JST

* Sat 13 Apr 2013 10:11:01 PM JST

* Sat 13 Apr 2013 10:11:01 PM JST
                    print(e)

* Sat 13 Apr 2013 10:11:49 PM JST
write_csv(verbose=True)
* Sat 13 Apr 2013 10:23:10 PM JST
doc = lxml_soup(url.encode('utf-8'), wait=10, verbose=self._verbose)
* Sat 13 Apr 2013 10:24:30 PM JST
URLError
* Sat 13 Apr 2013 10:25:05 PM JST
urllib2
* Sat 13 Apr 2013 10:26:29 PM JST
urllib2.URLError, urllib2.HTTPError
* Sat 13 Apr 2013 10:27:57 PM JST
松野信夫
* Sat 13 Apr 2013 10:46:46 PM JST
print)
* Sat 13 Apr 2013 10:49:53 PM JST
IndexError
* Sat 13 Apr 2013 10:50:06 PM JST
鈴木 俊一
* Sat 13 Apr 2013 10:55:38 PM JST
IndexError
* Sat 13 Apr 2013 10:56:24 PM JST
http://ja.wikipedia.org/wiki/今野智博
* Sat 13 Apr 2013 11:33:33 PM JST
HTTPError,
* Sat 13 Apr 2013 11:33:34 PM JST
urllib2.HTTPError,
* Sat 13 Apr 2013 11:33:38 PM JST
HTTPError,
* Sat 13 Apr 2013 11:33:39 PM JST
urllib2.HTTPError,
* Sat 13 Apr 2013 11:34:33 PM JST
'HTTPError' object is not callable
* Sat 13 Apr 2013 11:36:12 PM JST
IndexError)
* Sat 13 Apr 2013 11:36:12 PM JST
URLError, IndexError)
* Sat 13 Apr 2013 11:36:16 PM JST
urllib2.URLError, IndexError)
* Sat 13 Apr 2013 11:37:06 PM JST
http://ja.wikipedia.org/wiki/今野智博
* Sat 13 Apr 2013 11:37:37 PM JST
TypeError: 'HTTPError' object is not callable
* Sat 13 Apr 2013 11:58:35 PM JST

* Sat 13 Apr 2013 11:58:35 PM JST

* Sat 13 Apr 2013 11:58:35 PM JST
        print('DEBUG-1-lxmllib.py')

* Sun 14 Apr 2013 12:01:00 AM JST
    def set_additional_info(self):
        """SUMMARY

        @Return:
        """
        self._homepage = ''
        self._rss = ''

        url = urlparse.urljoin(self.url, 'wiki/' + self.name.replace(' ', ''))

        try:
            doc = lxml_soup(url.encode('utf-8'), wait=10, verbose=self._verbose)
            table = doc.xpath('//*[@class="infobox"]')[0]

            for tr in table:
                if (tr[0].text and
                    self.site_str == tr[0].text or
                    self.site_str2 == tr[0].text):
                    self._homepage = tr[1].xpath('a')[0].attrib['href']
                    if self._verbose:
                        print('Homepage: ' + self._homepage)
        except:
            return

        if self._homepage and not self._rss:
            rss_links = []
            try:
                rss_links = feed_finder(self._homepage, verbose=self._verbose)
                if rss_links and not self._rss == rss_links[0]:
                    self._rss = rss_links[0]
                    if self._verbose:
                        print('RSS: ' + self._rss)
            except:
                pass

* Sun 14 Apr 2013 12:02:49 AM JST
    url = 'http://ja.wikipedia.org'
    # '公式サイト'
    site_str = u'\xe5\x85\xac\xe5\xbc\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'
    # 'ウェブサイト'
    site_str2 = u'\xe3\x82\xa6\xe3\x82\xa7\xe3\x83\x96\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'

* Sun 14 Apr 2013 12:03:51 AM JST
wiki/' 
* Sun 14 Apr 2013 12:04:05 AM JST
urljoin(
* Sun 14 Apr 2013 12:04:06 AM JST
urlparse.urljoin(
* Sun 14 Apr 2013 07:54:04 AM JST
    def _get_alt_homepage(self):
        """SUMMARY
        
        @Return:
        """

* Sun 14 Apr 2013 07:54:34 AM JST
return
* Sun 14 Apr 2013 07:55:06 AM JST
pass
* Sun 14 Apr 2013 07:55:57 AM JST
_get_alt_rss = 
* Sun 14 Apr 2013 07:56:00 AM JST
sel
* Sun 14 Apr 2013 07:56:42 AM JST
set_additional_info
* Sun 14 Apr 2013 08:00:52 AM JST
True
* Sun 14 Apr 2013 08:13:11 AM JST

* Sun 14 Apr 2013 08:13:12 AM JST

* Sun 14 Apr 2013 08:13:12 AM JST
        if url:

* Sun 14 Apr 2013 08:13:59 AM JST

* Sun 14 Apr 2013 08:13:59 AM JST

* Sun 14 Apr 2013 08:13:59 AM JST
            try:

* Sun 14 Apr 2013 08:14:04 AM JST

* Sun 14 Apr 2013 08:14:04 AM JST

* Sun 14 Apr 2013 08:14:04 AM JST
            except IndexError:

* Sun 14 Apr 2013 08:14:04 AM JST
            except IndexError:

* Sun 14 Apr 2013 08:14:04 AM JST
            except IndexError:
                self._homepage = ''

* Sun 14 Apr 2013 08:15:47 AM JST
_get_homepage
* Sun 14 Apr 2013 08:15:48 AM JST
self._get_homepage
* Sun 14 Apr 2013 08:17:34 AM JST
self._rss = ''
* Sun 14 Apr 2013 08:17:45 AM JST

* Sun 14 Apr 2013 08:17:45 AM JST

* Sun 14 Apr 2013 08:17:45 AM JST
        self._homepage = ''

* Sun 14 Apr 2013 08:18:22 AM JST
        url = self.wikiurl + self.name.replace(' ', '')

        try:
            doc = lxml_soup(url.encode('utf-8'), wait=10, verbose=self._verbose)
            table = doc.xpath('//*[@class="infobox"]')[0]

            for tr in table:
                if (tr[0].text and
                    self.site_str == tr[0].text or
                    self.site_str2 == tr[0].text):
                    self._homepage = tr[1].xpath('a')[0].attrib['href']
                    if self._verbose:
                        print('Homepage: ' + self._homepage)
        except:
            self._homepage = self._get_alt_homepage()

* Sun 14 Apr 2013 08:22:07 AM JST

* Sun 14 Apr 2013 08:22:07 AM JST

* Sun 14 Apr 2013 08:22:07 AM JST
        url = self.wikiurl + self.name.replace(' ', '')

* Sun 14 Apr 2013 08:22:19 AM JST
                            
* Sun 14 Apr 2013 08:22:21 AM JST

* Sun 14 Apr 2013 08:22:21 AM JST

* Sun 14 Apr 2013 08:22:21 AM JST
            doc = lxml_soup(url.encode('utf-8'), wait=10, verbose=self._verbose)

* Sun 14 Apr 2013 08:26:06 AM JST

* Sun 14 Apr 2013 08:26:06 AM JST

* Sun 14 Apr 2013 08:26:06 AM JST
        try:

* Sun 14 Apr 2013 08:26:08 AM JST

* Sun 14 Apr 2013 08:26:08 AM JST

* Sun 14 Apr 2013 08:26:08 AM JST
        except:

* Sun 14 Apr 2013 08:26:10 AM JST

* Sun 14 Apr 2013 08:26:10 AM JST

* Sun 14 Apr 2013 08:26:10 AM JST
            self._homepage = self._get_alt_homepage()

* Sun 14 Apr 2013 08:26:15 AM JST
doc
* Sun 14 Apr 2013 08:27:47 AM JST
_get
* Sun 14 Apr 2013 08:29:21 AM JST
        if self._homepage and not self._rss:
            rss_links = []
            try:
                rss_links = feed_finder(self._homepage, verbose=self._verbose)
                if rss_links and not self._rss == rss_links[0]:
                    self._rss = rss_links[0]
                    if self._verbose:
                        print('Set RSS: ' + self._rss)
            except:
                pass

* Sun 14 Apr 2013 08:30:38 AM JST

* Sun 14 Apr 2013 08:30:38 AM JST

* Sun 14 Apr 2013 08:30:38 AM JST
            except:

* Sun 14 Apr 2013 08:30:38 AM JST
            except:

* Sun 14 Apr 2013 08:30:38 AM JST
            except:
                pass

* Sun 14 Apr 2013 08:31:05 AM JST

* Sun 14 Apr 2013 08:31:05 AM JST

* Sun 14 Apr 2013 08:31:05 AM JST
            try:

* Sun 14 Apr 2013 08:32:51 AM JST

* Sun 14 Apr 2013 08:32:51 AM JST

* Sun 14 Apr 2013 08:32:52 AM JST
            rss_links = []

* Sun 14 Apr 2013 08:56:06 AM JST

* Sun 14 Apr 2013 08:56:06 AM JST

* Sun 14 Apr 2013 08:56:06 AM JST
  (message "Purging package functions")

* Sun 14 Apr 2013 08:56:25 AM JST
force
* Sun 14 Apr 2013 08:56:35 AM JST
  
* Sun 14 Apr 2013 08:57:04 AM JST
purge-package
* Sun 14 Apr 2013 08:58:10 AM JST
do 
* Sun 14 Apr 2013 08:58:49 AM JST
purge-package-flag
* Sun 14 Apr 2013 09:22:06 AM JST

* Sun 14 Apr 2013 09:22:07 AM JST

* Sun 14 Apr 2013 09:22:07 AM JST
            self._homepage = ''

* Sun 14 Apr 2013 09:24:53 AM JST

* Sun 14 Apr 2013 09:24:53 AM JST

* Sun 14 Apr 2013 09:24:53 AM JST
        else:

* Sun 14 Apr 2013 09:24:54 AM JST

* Sun 14 Apr 2013 09:24:54 AM JST

* Sun 14 Apr 2013 09:24:54 AM JST
        if url:

* Sun 14 Apr 2013 09:25:16 AM JST

* Sun 14 Apr 2013 09:25:16 AM JST

* Sun 14 Apr 2013 09:25:16 AM JST
        self._blog = ''

* Sun 14 Apr 2013 09:25:17 AM JST
        self._blog = ''

* Sun 14 Apr 2013 09:25:17 AM JST
        self._blog = ''
        self._twitter = ''

* Sun 14 Apr 2013 09:25:28 AM JST
        rss_links = ''
        if not self._rss and self._homepage:
            try:
                rss_links = feed_finder(self._homepage)
            except:
                pass
            if rss_links:
                self._rss = rss_links[0]

* Sun 14 Apr 2013 09:25:45 AM JST

* Sun 14 Apr 2013 09:25:45 AM JST

* Sun 14 Apr 2013 09:25:45 AM JST
    alt_url = 'ja.wikipadia.org'

* Sun 14 Apr 2013 09:26:49 AM JST
        url = google_feeling_lucky(query, verbose=self._verbose)
        doc = lxml_soup(url, verbose=self._verbose)

* Sun 14 Apr 2013 09:26:55 AM JST
_homepage = ''
* Sun 14 Apr 2013 09:26:55 AM JST
self._homepage = ''
* Sun 14 Apr 2013 09:28:17 AM JST

* Sun 14 Apr 2013 09:28:17 AM JST

* Sun 14 Apr 2013 09:28:18 AM JST
        else:

* Sun 14 Apr 2013 09:28:19 AM JST

* Sun 14 Apr 2013 09:28:19 AM JST

* Sun 14 Apr 2013 09:28:19 AM JST
        if url:

* Sun 14 Apr 2013 09:28:30 AM JST

* Sun 14 Apr 2013 09:28:30 AM JST

* Sun 14 Apr 2013 09:28:30 AM JST
            self._homepage = ''

* Sun 14 Apr 2013 09:28:36 AM JST
        url = google_feeling_lucky(query, verbose=self._verbose)
        doc = lxml_soup(url, verbose=self._verbose)

* Sun 14 Apr 2013 09:30:37 AM JST

* Sun 14 Apr 2013 09:30:37 AM JST

* Sun 14 Apr 2013 09:30:37 AM JST
        if url:

* Sun 14 Apr 2013 09:36:10 AM JST
        url = google_feeling_lucky(query, verbose=self._verbose)
        doc = lxml_soup(url, verbose=self._verbose)

* Sun 14 Apr 2013 09:36:44 AM JST
_homepage = ''
* Sun 14 Apr 2013 09:36:45 AM JST
self._homepage = ''
* Sun 14 Apr 2013 09:41:07 AM JST

* Sun 14 Apr 2013 09:41:07 AM JST

* Sun 14 Apr 2013 09:41:07 AM JST
import urllib2

* Sun 14 Apr 2013 09:43:34 AM JST
g = giin.Giin(verbose=True)
* Sun 14 Apr 2013 10:14:38 AM JST
rss_links[0]
* Sun 14 Apr 2013 10:17:26 AM JST
 rss/rss10.xml
* Sun 14 Apr 2013 10:18:59 AM JST
0]
* Sun 14 Apr 2013 10:19:35 AM JST
syuugiin
* Sun 14 Apr 2013 10:19:52 AM JST
sangiin
* Sun 14 Apr 2013 10:47:43 AM JST
    def _set_alt_homepage(self):
        """SUMMARY

        @Return:
        """
        pass

* Sun 14 Apr 2013 11:00:09 AM JST
IndexError
* Sun 14 Apr 2013 11:00:13 AM JST
IndexError
* Sun 14 Apr 2013 11:00:17 AM JST
_blog = ''
* Sun 14 Apr 2013 11:00:18 AM JST
self._blog = ''
* Sun 14 Apr 2013 11:00:22 AM JST
_twitter = ''
* Sun 14 Apr 2013 11:00:23 AM JST
self._twitter = ''
* Sun 14 Apr 2013 11:01:30 AM JST
        # rss_links = ''
        # if self._blog:
        #     try:
        #         rss_links = feed_finder(self.blog)
        #     except:
        #         pass
        #     if rss_links:
        #         self._rss = rss_links[0]
        # if not self._rss and self._homepage:
        #     try:
        #         rss_links = feed_finder(self._homepage)
        #     except:
        #         pass
        #     if rss_links:
        #         self._rss = rss_links[0]

* Sun 14 Apr 2013 11:04:30 AM JST
        # if self._blog:
        #     try:
        #         rss_links = feed_finder(self.blog)
        #     except:
        #         pass
        #     if rss_links:
        #         self._rss = rss_links[0]

* Sun 14 Apr 2013 11:04:42 AM JST

* Sun 14 Apr 2013 11:04:42 AM JST

* Sun 14 Apr 2013 11:04:42 AM JST
            rss_links = []

* Sun 14 Apr 2013 11:06:39 AM JST
self
* Sun 14 Apr 2013 11:06:57 AM JST
parse = urlparse.urlparse(rss)
                if not parse.netloc:
                    rss = urlparse.urljoin(self._homepage, rss)
* Sun 14 Apr 2013 11:07:09 AM JST
rss
* Sun 14 Apr 2013 11:07:31 AM JST

* Sun 14 Apr 2013 11:07:31 AM JST

* Sun 14 Apr 2013 11:07:31 AM JST
                parse = urlparse.urlparse(rss)

* Sun 14 Apr 2013 11:07:33 AM JST
                parse = urlparse.urlparse(rss)

* Sun 14 Apr 2013 11:07:33 AM JST
                parse = urlparse.urlparse(rss)
                if not parse.netloc:

* Sun 14 Apr 2013 11:07:57 AM JST
rss_links[0]
* Sun 14 Apr 2013 11:08:00 AM JST

* Sun 14 Apr 2013 11:08:00 AM JST

* Sun 14 Apr 2013 11:08:00 AM JST
                rss = rss_links[0]

* Sun 14 Apr 2013 11:08:13 AM JST
rss
* Sun 14 Apr 2013 11:08:28 AM JST
rss
* Sun 14 Apr 2013 11:08:32 AM JST
rss = 
* Sun 14 Apr 2013 11:11:21 AM JST
Set 
* Sun 14 Apr 2013 11:11:34 AM JST
if self._verbose:
                    print('RSS: ' + self._rss)
* Sun 14 Apr 2013 11:12:19 AM JST
self._rss
* Sun 14 Apr 2013 11:12:22 AM JST

* Sun 14 Apr 2013 11:12:22 AM JST

* Sun 14 Apr 2013 11:12:22 AM JST
                self._rss = rss

* Sun 14 Apr 2013 11:13:25 AM JST

* Sun 14 Apr 2013 11:13:25 AM JST

* Sun 14 Apr 2013 11:13:25 AM JST
                pass

* Sun 14 Apr 2013 11:13:26 AM JST

* Sun 14 Apr 2013 11:13:26 AM JST

* Sun 14 Apr 2013 11:13:26 AM JST
            except:

* Sun 14 Apr 2013 11:13:27 AM JST

* Sun 14 Apr 2013 11:13:27 AM JST

* Sun 14 Apr 2013 11:13:27 AM JST
            try:

* Sun 14 Apr 2013 11:15:55 AM JST
        if self._blog:
            rss_links = feed_finder(self.blog)
            if rss_links:
                self._rss = defrag_rss_url(rss_links[0])
                if self._verbose:
                    print('RSS: ' + self._rss)

* Sun 14 Apr 2013 11:16:16 AM JST

* Sun 14 Apr 2013 11:16:16 AM JST

* Sun 14 Apr 2013 11:16:16 AM JST
            if self._blog:

* Sun 14 Apr 2013 11:16:21 AM JST
blog
* Sun 14 Apr 2013 11:17:19 AM JST
parse = urlparse.urlparse(url)
* Sun 14 Apr 2013 11:17:33 AM JST
if not parse.netloc:
                return urlparse.urljoin(self._homepage, url)
* Sun 14 Apr 2013 11:17:53 AM JST

* Sun 14 Apr 2013 11:17:53 AM JST

* Sun 14 Apr 2013 11:17:53 AM JST
                if not parse.netloc:

* Sun 14 Apr 2013 11:17:53 AM JST
                if not parse.netloc:

* Sun 14 Apr 2013 11:17:53 AM JST
                if not parse.netloc:
        return urlparse.urljoin(self._homepage, url)

* Sun 14 Apr 2013 11:17:57 AM JST
        def defrag_rss_url(url):
            """SUMMARY

            @Return:
            """
            parse = urlparse.urlparse(url)
            if not parse.netloc:
                return urlparse.urljoin(self._homepage, url)
            return url

* Sun 14 Apr 2013 11:18:33 AM JST

* Sun 14 Apr 2013 11:18:33 AM JST

* Sun 14 Apr 2013 11:18:33 AM JST
        rss_links = []

* Sun 14 Apr 2013 11:21:15 AM JST
Set 
* Sun 14 Apr 2013 11:30:20 AM JST
homepage
* Sun 14 Apr 2013 11:38:37 AM JST
self, 
* Sun 14 Apr 2013 11:39:03 AM JST
, verbose=self._verbose
* Sun 14 Apr 2013 11:42:09 AM JST
.encode('utf-8')
* Sun 14 Apr 2013 11:52:46 AM JST

* Sun 14 Apr 2013 11:52:46 AM JST

* Sun 14 Apr 2013 11:52:46 AM JST
            self._twitter = ''

* Sun 14 Apr 2013 11:52:48 AM JST

* Sun 14 Apr 2013 11:52:48 AM JST

* Sun 14 Apr 2013 11:52:48 AM JST
            self._blog = ''

* Sun 14 Apr 2013 11:52:50 AM JST

* Sun 14 Apr 2013 11:52:50 AM JST

* Sun 14 Apr 2013 11:52:50 AM JST
            self._rss = ''

* Sun 14 Apr 2013 11:52:53 AM JST

* Sun 14 Apr 2013 11:52:53 AM JST

* Sun 14 Apr 2013 11:52:53 AM JST
            self._homepage = ''

* Sun 14 Apr 2013 11:52:56 AM JST
    @property
    def rss(self):
        """Return homepages url.

        @Return: string of url.
        """
        if self._rss is None:
            self._set_additional_info()
        return self._rss


* Sun 14 Apr 2013 11:54:23 AM JST
g.Giin()
* Sun 14 Apr 2013 12:07:35 PM JST
name
* Sun 14 Apr 2013 12:10:44 PM JST
(py-auto-colon)
* Sun 14 Apr 2013 12:10:56 PM JST
(return-on-line)
* Sun 14 Apr 2013 12:11:35 PM JST
newline-and-indent
* Sun 14 Apr 2013 12:12:25 PM JST
(defun return-on-line()
  (interactive)
  (end-of-line)
  (reindent-then-newline-and-indent))

* Sun 14 Apr 2013 12:13:03 PM JST
newline-and-indent
* Sun 14 Apr 2013 12:17:16 PM JST
u'衆参'
* Sun 14 Apr 2013 12:17:32 PM JST
u'名前'
* Sun 14 Apr 2013 12:17:40 PM JST
u'ふりがな'
* Sun 14 Apr 2013 12:18:02 PM JST
'政党'
* Sun 14 Apr 2013 12:18:10 PM JST
u'選挙区'
* Sun 14 Apr 2013 12:18:31 PM JST
u'サイト'
* Sun 14 Apr 2013 12:18:41 PM JST
u'ブログ'
* Sun 14 Apr 2013 12:18:52 PM JST
u'twitter'
* Sun 14 Apr 2013 12:19:02 PM JST
u'rss'
* Sun 14 Apr 2013 12:36:01 PM JST
選挙区
* Sun 14 Apr 2013 12:36:44 PM JST
ブログ
* Sun 14 Apr 2013 12:40:31 PM JST

* Sun 14 Apr 2013 12:40:31 PM JST

* Sun 14 Apr 2013 12:40:31 PM JST
                    head.append(u'衆参')

* Sun 14 Apr 2013 12:40:32 PM JST

* Sun 14 Apr 2013 12:40:32 PM JST

* Sun 14 Apr 2013 12:40:33 PM JST
                    head.append(u'名前')

* Sun 14 Apr 2013 12:40:33 PM JST

* Sun 14 Apr 2013 12:40:34 PM JST

* Sun 14 Apr 2013 12:40:34 PM JST
                    head.append(u'ふりがな')

* Sun 14 Apr 2013 12:40:35 PM JST

* Sun 14 Apr 2013 12:40:35 PM JST

* Sun 14 Apr 2013 12:40:35 PM JST
                    head.append(u'政党')

* Sun 14 Apr 2013 12:40:37 PM JST

* Sun 14 Apr 2013 12:40:37 PM JST

* Sun 14 Apr 2013 12:40:37 PM JST
                    head.append(u'選挙区')

* Sun 14 Apr 2013 12:40:38 PM JST

* Sun 14 Apr 2013 12:40:38 PM JST

* Sun 14 Apr 2013 12:40:39 PM JST
                    head.append(u'サイト')

* Sun 14 Apr 2013 12:40:39 PM JST

* Sun 14 Apr 2013 12:40:39 PM JST

* Sun 14 Apr 2013 12:40:39 PM JST
                    head.append(u'ブログ')

* Sun 14 Apr 2013 12:40:40 PM JST

* Sun 14 Apr 2013 12:40:40 PM JST

* Sun 14 Apr 2013 12:40:41 PM JST
                    head.append(u'twitter')

* Sun 14 Apr 2013 12:40:41 PM JST

* Sun 14 Apr 2013 12:40:41 PM JST

* Sun 14 Apr 2013 12:40:41 PM JST
                    head.append(u'rss')

* Sun 14 Apr 2013 12:40:47 PM JST
                    if header:
                        writer.writerow(head)

* Sun 14 Apr 2013 12:44:50 PM JST
headers = {'syu_san': u'衆参',
               'name': u'名前',
               'kana': u'ふりがな',
               'party': u'政党',
               'location': u'選挙区',
               'homepage': u'ホームページ',
               'blog': u'ブログ',
               'twitter': u'twitter',
               'rss': u'rss'
               }
* Sun 14 Apr 2013 12:50:00 PM JST
from
* Sun 14 Apr 2013 12:56:23 PM JST
                           
* Sun 14 Apr 2013 01:04:44 PM JST
global
* Sun 14 Apr 2013 01:05:55 PM JST
head = []
* Sun 14 Apr 2013 01:06:02 PM JST

* Sun 14 Apr 2013 01:06:02 PM JST

* Sun 14 Apr 2013 01:06:02 PM JST
                head = []

* Sun 14 Apr 2013 01:06:12 PM JST

* Sun 14 Apr 2013 01:06:12 PM JST

* Sun 14 Apr 2013 01:06:12 PM JST
            head = []

* Sun 14 Apr 2013 01:12:22 PM JST
make
* Sun 14 Apr 2013 01:14:00 PM JST

* Sun 14 Apr 2013 01:14:00 PM JST

* Sun 14 Apr 2013 01:14:00 PM JST
    # TODO: (Atami) [2013/04/14]

* Sun 14 Apr 2013 01:14:00 PM JST
    # TODO: (Atami) [2013/04/14]

* Sun 14 Apr 2013 01:14:00 PM JST
    # TODO: (Atami) [2013/04/14]
    # add function for edit header

* Sun 14 Apr 2013 01:15:24 PM JST
                except KeyboardInterrupt:
                    print('KeyboardInterrupted')
                    sys.exit(1)

* Sun 14 Apr 2013 01:16:21 PM JST
except
* Sun 14 Apr 2013 01:18:24 PM JST
else
* Sun 14 Apr 2013 01:18:32 PM JST
        except KeyboardInterrupt:
            print('KeyboardInterrupted')
            sys.exit(1)

* Sun 14 Apr 2013 01:24:02 PM JST
    headers = OrderedDict([('syu_san',  u'衆参'),
                           ('name',     u'名前'),
                           ('kana',     u'ふりがな'),
                           ('party',    u'政党'),
                           ('location', u'選挙区'),
                           ('homepage', u'ホームページ'),
                           ('blog',     u'ブログ'),
                           ('twitter',  u'twitter'),
                           ('rss',      u'rss'),])

* Sun 14 Apr 2013 01:25:06 PM JST
%paste    
* Sun 14 Apr 2013 01:32:53 PM JST
長妻 昭
* Sun 14 Apr 2013 01:35:06 PM JST
g.members[u'長妻昭'].homepage
* Sun 14 Apr 2013 01:35:43 PM JST
exec('g.members[u'長妻昭'].homepage')
* Sun 14 Apr 2013 01:39:55 PM JST

* Sun 14 Apr 2013 01:39:55 PM JST

* Sun 14 Apr 2013 01:39:55 PM JST
                import pdb; pdb.set_trace()

* Sun 14 Apr 2013 02:26:40 PM JST
今野 智博
* Sun 14 Apr 2013 02:27:12 PM JST
http://ja.wikipedia.org/wiki/今野智博
* Sun 14 Apr 2013 02:46:14 PM JST
室井 邦彦
* Sun 14 Apr 2013 02:48:14 PM JST
西根 由佳
* Sun 14 Apr 2013 02:48:38 PM JST
鈴木 俊一
* Sun 14 Apr 2013 02:49:32 PM JST
橋本 英教
* Sun 14 Apr 2013 02:51:46 PM JST
homepage
* Sun 14 Apr 2013 02:51:48 PM JST
g.members[u'橋本英教'].homepage
* Sun 14 Apr 2013 02:52:11 PM JST
額賀 福志郎
* Sun 14 Apr 2013 03:03:46 PM JST
金子 洋一
* Sun 14 Apr 2013 03:04:40 PM JST
森山 裕
* Sun 14 Apr 2013 03:05:05 PM JST
青木 一彦
* Sun 14 Apr 2013 03:05:19 PM JST
佐田 玄一郎
* Sun 14 Apr 2013 03:05:40 PM JST
尾辻 秀久
* Sun 14 Apr 2013 03:06:10 PM JST
中山 泰秀
* Sun 14 Apr 2013 03:06:28 PM JST
はた ともこ
* Sun 14 Apr 2013 03:06:44 PM JST
木原 誠二
* Sun 14 Apr 2013 03:06:59 PM JST
山田 太郎
* Sun 14 Apr 2013 03:07:30 PM JST
www.your-party.jp/yamadataro.html
* Sun 14 Apr 2013 03:09:39 PM JST
/tmp/urllib_cache/www.your-party.jp/yamadataro.html
* Sun 14 Apr 2013 03:10:12 PM JST
html = o.read()
* Sun 14 Apr 2013 03:13:02 PM JST
http://www.your-party.jp/members/sangiin/yamadataro.html
* Sun 14 Apr 2013 03:13:22 PM JST
doc = lxml_soup('http://www.your-party.jp/members/sangiin/yamadataro.html', verbose=True)
* Sun 14 Apr 2013 03:13:56 PM JST
table = doc.xpath('//*[@class="career-table"]')[0]
* Sun 14 Apr 2013 03:14:05 PM JST
for tr in table.xpath('//tr'):
* Sun 14 Apr 2013 03:14:10 PM JST
if u'ホームページ' == tr.xpath('//th')[0].text_content():
* Sun 14 Apr 2013 03:14:17 PM JST
self._homepage = tr.xpath('//a')[0].attrib['href']
* Sun 14 Apr 2013 03:16:39 PM JST
tr.xpath('//th')[0].text_content()
* Sun 14 Apr 2013 03:16:46 PM JST
tr.xpath('//th')
* Sun 14 Apr 2013 03:16:58 PM JST
if u'ホームページ' ==
* Sun 14 Apr 2013 03:21:02 PM JST
.attrib['href']
* Sun 14 Apr 2013 03:21:04 PM JST
print 
* Sun 14 Apr 2013 03:30:54 PM JST
for tr in table.xpath('//tr'):
* Sun 14 Apr 2013 03:31:01 PM JST
for th in tr.xpath('//th'):
* Sun 14 Apr 2013 03:31:08 PM JST
if u'ホームページ' == th.text_content():
* Sun 14 Apr 2013 03:34:23 PM JST
t.xpath('')
* Sun 14 Apr 2013 03:36:16 PM JST
t.getnext()[0].attrib['href']
* Sun 14 Apr 2013 03:53:53 PM JST
山口壮
* Sun 14 Apr 2013 03:59:28 PM JST
山口壯
* Sun 14 Apr 2013 04:01:15 PM JST
大西健介
* Sun 14 Apr 2013 04:01:41 PM JST
浜地 雅一
* Sun 14 Apr 2013 04:03:36 PM JST
 http://www.komei.or.jp/member/detail/40026093
* Sun 14 Apr 2013 04:05:32 PM JST
u'
* Sun 14 Apr 2013 04:05:33 PM JST
                    u'
* Sun 14 Apr 2013 04:07:58 PM JST
http://www.komei.or.jp/member/detail/40026093
* Sun 14 Apr 2013 04:08:18 PM JST
table = doc.xpath('//*[@id="main-inner"]/div/div[2]/table')[0]
* Sun 14 Apr 2013 04:09:04 PM JST
table.xpath('//li')
* Sun 14 Apr 2013 04:09:48 PM JST
公式ホームページ
* Sun 14 Apr 2013 04:10:15 PM JST
公式ホームページ
* Sun 14 Apr 2013 04:10:58 PM JST
if u'公式ホームページ' == li.text_content():
* Sun 14 Apr 2013 04:11:42 PM JST
.text_content()
* Sun 14 Apr 2013 04:12:07 PM JST
table.xpath('//li')[35][0]
* Sun 14 Apr 2013 04:14:52 PM JST
荒井 広幸
* Sun 14 Apr 2013 04:15:47 PM JST
熊田 裕通
* Sun 14 Apr 2013 05:52:49 PM JST
is None
* Sun 14 Apr 2013 06:13:21 PM JST
    def _set_homepage(self):
        """SUMMARY

        @Return:
        """
        soup = self._get_wikisoup()
        if soup is not None and len(soup):
            table = soup.xpath('//*[@class="infobox"]')[0]
            for tr in table:
                if (tr[0].text and
                    self.site_str == tr[0].text or
                    self.site_str2 == tr[0].text):
                    self._homepage = tr[1].xpath('a')[0].attrib['href']
                    if self._verbose:
                        print('Homepage: ' + self._homepage)
        if self._homepage == '':
            raise StandardError()


* Sun 14 Apr 2013 06:13:36 PM JST

* Sun 14 Apr 2013 06:13:36 PM JST

* Sun 14 Apr 2013 06:13:36 PM JST
            import pdb; pdb.set_trace()

* Sun 14 Apr 2013 06:14:05 PM JST
self._homepage = ''
* Sun 14 Apr 2013 06:14:50 PM JST
soup = self._get_wikisoup()
* Sun 14 Apr 2013 06:15:25 PM JST
        if soup is not None and len(soup):
            table = soup.xpath('//*[@class="infobox"]')[0]
            for tr in table:
                if (tr[0].text and
                    self.site_str == tr[0].text or
                    self.site_str2 == tr[0].text):
                    self._homepage = tr[1].xpath('a')[0].attrib['href']
                    if self._verbose:
                        print('Homepage: ' + self._homepage)

* Sun 14 Apr 2013 06:17:29 PM JST

* Sun 14 Apr 2013 06:17:29 PM JST

* Sun 14 Apr 2013 06:17:29 PM JST
            import pdb; pdb.set_trace()

* Sun 14 Apr 2013 06:17:36 PM JST
    def _set_homepage(self):
        """SUMMARY

        @Return:
        """
        soup = self._get_wikisoup()
        if soup is not None and len(soup):
            table = soup.xpath('//*[@class="infobox"]')[0]
            for tr in table:
                if (tr[0].text and
                    self.site_str == tr[0].text or
                    self.site_str2 == tr[0].text):
                    self._homepage = tr[1].xpath('a')[0].attrib['href']
                    if self._verbose:
                        print('Homepage: ' + self._homepage)
        if self._homepage == '':
            raise StandardError()


* Sun 14 Apr 2013 06:19:13 PM JST

* Sun 14 Apr 2013 06:19:13 PM JST

* Sun 14 Apr 2013 06:19:13 PM JST
            self._set_additional_info()

* Sun 14 Apr 2013 06:21:13 PM JST
    def _set_alt_homepage(self):
        """SUMMARY

        @Return:
        """
        pass


* Sun 14 Apr 2013 06:21:23 PM JST
    def _get_wikisoup(self):
        """SUMMARY

        @Return:
        """
        url = self.wikiurl + self.name.replace(' ', '')
        try:
            doc = lxml_soup(url.encode('utf-8'), wait=10, verbose=self._verbose)
            return doc
        except:
            return None


* Sun 14 Apr 2013 06:28:16 PM JST
        try:
            self._set_homepage()
        except KeyboardInterrupt:
            print('KeyboardInterrupted')
            sys.exit(1)
        except:
            self._set_alt_homepage()

* Sun 14 Apr 2013 06:28:45 PM JST

* Sun 14 Apr 2013 06:28:45 PM JST

* Sun 14 Apr 2013 06:28:45 PM JST
            self._set_additional_info()

* Sun 14 Apr 2013 06:29:50 PM JST
        try:
            self._set_rss()
        except KeyboardInterrupt:
            print('KeyboardInterrupted')
            sys.exit(1)
        except:
            pass

* Sun 14 Apr 2013 06:34:09 PM JST
self._set_alt_homepage()
* Sun 14 Apr 2013 06:35:18 PM JST
            except KeyboardInterrupt:
                print('KeyboardInterrupted')
                sys.exit(1)

* Sun 14 Apr 2013 06:36:03 PM JST
self._set_alt_homepage()
* Sun 14 Apr 2013 06:36:56 PM JST

* Sun 14 Apr 2013 06:36:56 PM JST

* Sun 14 Apr 2013 06:36:56 PM JST
            try:

* Sun 14 Apr 2013 06:40:10 PM JST
'http://ja.wikipedia.org/wiki/'
* Sun 14 Apr 2013 06:42:43 PM JST
            doc = lxml_soup(url.encode('utf-8'), wait=10, verbose=self._verbose)
            return doc

* Sun 14 Apr 2013 06:50:14 PM JST

* Sun 14 Apr 2013 06:50:14 PM JST

* Sun 14 Apr 2013 06:50:14 PM JST
            if soup is not None and len(soup):

* Sun 14 Apr 2013 07:17:37 PM JST

* Sun 14 Apr 2013 07:17:37 PM JST

* Sun 14 Apr 2013 07:17:37 PM JST
            self._set_additional_info()

* Sun 14 Apr 2013 08:43:09 PM JST

* Sun 14 Apr 2013 08:43:09 PM JST

* Sun 14 Apr 2013 08:43:09 PM JST
        except:

* Sun 14 Apr 2013 08:43:26 PM JST
self._homepage == '':
* Sun 14 Apr 2013 08:43:28 PM JST
if self._homepage == '':
* Sun 14 Apr 2013 08:46:06 PM JST

* Sun 14 Apr 2013 08:46:06 PM JST

* Sun 14 Apr 2013 08:46:06 PM JST
            if not len(soup):

* Sun 14 Apr 2013 08:56:53 PM JST
self.
* Sun 14 Apr 2013 08:56:59 PM JST
self.
* Sun 14 Apr 2013 08:57:28 PM JST
http://ja.wikipedia.org/wiki/%E4%B8%89%E5%AE%85%E5%8D%9A_(%E6%94%BF%E6%B2%BB%E5%AE%B6)
* Sun 14 Apr 2013 08:57:50 PM JST
_(政治家)
* Sun 14 Apr 2013 08:58:34 PM JST
            name = self.name.replace(' ', '')
            for query in [name, name + u'_(政治家)']:

* Sun 14 Apr 2013 09:01:11 PM JST

* Sun 14 Apr 2013 09:01:11 PM JST

* Sun 14 Apr 2013 09:01:11 PM JST
            # self._set_additional_info()

* Sun 14 Apr 2013 09:03:44 PM JST
http://www.sensenfukoku.net/
* Sun 14 Apr 2013 09:17:14 PM JST

* Sun 14 Apr 2013 09:17:14 PM JST

* Sun 14 Apr 2013 09:17:14 PM JST
    def __init__(self, ):

* Sun 14 Apr 2013 09:17:14 PM JST
    def __init__(self, ):

* Sun 14 Apr 2013 09:17:14 PM JST
    def __init__(self, ):
        """

* Sun 14 Apr 2013 09:17:14 PM JST
    def __init__(self, ):
        """

* Sun 14 Apr 2013 09:17:14 PM JST
    def __init__(self, ):
        """
        """

* Sun 14 Apr 2013 09:17:33 PM JST
http://www.jcp.or.jp/
* Sun 14 Apr 2013 09:17:37 PM JST
http://
* Sun 14 Apr 2013 09:20:47 PM JST
query = ' '.join(['site:' + self.url, self.name.replace(u' ', '')])
* Sun 14 Apr 2013 09:21:06 PM JST
query = ' '.join(['site:' + self.url, self.name.replace(u' ', '')])
* Sun 14 Apr 2013 09:25:28 PM JST
doc = lxml_soup(url, verbose=self._verbose)
* Sun 14 Apr 2013 09:26:43 PM JST
'www.jcp.or.jp'
* Sun 14 Apr 2013 09:26:45 PM JST
url = 'www.jcp.or.jp'
* Sun 14 Apr 2013 09:27:05 PM JST
world
* Sun 14 Apr 2013 09:27:36 PM JST
http://www.jcp.or.jp/web_member/
* Sun 14 Apr 2013 10:38:57 PM JST
name
* Sun 14 Apr 2013 10:39:06 PM JST
柿沢 未途
* Sun 14 Apr 2013 10:39:31 PM JST
_(政治家)'
* Sun 14 Apr 2013 10:40:23 PM JST
_(政治家)
* Sun 14 Apr 2013 10:40:38 PM JST
亀井 亜紀子
* Sun 14 Apr 2013 10:40:41 PM JST
亀井 亜紀子_(政治家)
* Mon 15 Apr 2013 11:36:31 AM JST
else
* Mon 15 Apr 2013 11:36:36 AM JST
else
* Mon 15 Apr 2013 11:54:33 AM JST
HTTPError
* Mon 15 Apr 2013 12:00:16 PM JST
HTT
* Mon 15 Apr 2013 12:01:54 PM JST
else
* Mon 15 Apr 2013 12:26:11 PM JST
soup = wikisoup(query, verbose=self._verbose)
* Mon 15 Apr 2013 12:28:54 PM JST
table = soup.xpath('//*[@class="infobox"]')[0]
* Mon 15 Apr 2013 12:29:54 PM JST
for tr in table:
                    if (tr[0].text and
                        self.site_str == tr[0].text or
                        self.site_str2 == tr[0].text):
                        self._homepage = tr[1].xpath('a')[0].attrib['href']
                        if self._verbose:
                            print('Homepage: ' + self._homepage)
* Mon 15 Apr 2013 12:30:07 PM JST
_
* Mon 15 Apr 2013 12:30:08 PM JST
self._
* Mon 15 Apr 2013 12:30:12 PM JST
_
* Mon 15 Apr 2013 12:30:17 PM JST
_
* Mon 15 Apr 2013 12:31:53 PM JST
IndexErr
* Mon 15 Apr 2013 12:35:35 PM JST
parse
* Mon 15 Apr 2013 12:39:59 PM JST

* Mon 15 Apr 2013 12:39:59 PM JST

* Mon 15 Apr 2013 12:39:59 PM JST
            try:

* Mon 15 Apr 2013 12:43:27 PM JST
wikisoup(query, verbose=verbose)
* Mon 15 Apr 2013 12:43:54 PM JST
lxml_soup
* Mon 15 Apr 2013 12:46:01 PM JST
亀井亜紀子
* Mon 15 Apr 2013 12:47:22 PM JST
http://ja.wikipedia.org/wiki/%E4%BA%80%E4%BA%95%E4%BA%9C%E7%B4%80%E5%AD%90
* Mon 15 Apr 2013 12:48:27 PM JST
亀井亜紀子
* Mon 15 Apr 2013 12:49:47 PM JST
soup.xpath('//*[@class="infobox"]')
* Mon 15 Apr 2013 01:03:31 PM JST

* Mon 15 Apr 2013 01:03:31 PM JST

* Mon 15 Apr 2013 01:03:31 PM JST
                if not table:

* Mon 15 Apr 2013 01:03:31 PM JST
                if not table:

* Mon 15 Apr 2013 01:03:31 PM JST
                if not table:
                    return False

* Mon 15 Apr 2013 01:04:17 PM JST
table = table[0]
* Mon 15 Apr 2013 01:04:23 PM JST
            try:
                table = table[0]
            except IndexError:
                return False

* Mon 15 Apr 2013 01:04:35 PM JST

* Mon 15 Apr 2013 01:04:35 PM JST

* Mon 15 Apr 2013 01:04:35 PM JST
            except (KeyError, IndexError):

* Mon 15 Apr 2013 01:04:35 PM JST
            except (KeyError, IndexError):

* Mon 15 Apr 2013 01:04:35 PM JST
            except (KeyError, IndexError):
                return False

* Mon 15 Apr 2013 01:06:45 PM JST
tr[0].text
* Mon 15 Apr 2013 01:07:21 PM JST
tr[0].text
* Mon 15 Apr 2013 01:20:57 PM JST
    # '公式サイト'
    site_str = u'\xe5\x85\xac\xe5\xbc\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'
    # 'ウェブサイト'
    site_str2 = u'\xe3\x82\xa6\xe3\x82\xa7\xe3\x83\x96\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'

* Mon 15 Apr 2013 01:21:00 PM JST
    # '公式サイト'
    site_str = u'\xe5\x85\xac\xe5\xbc\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'
    # 'ウェブサイト'
    site_str2 = u'\xe3\x82\xa6\xe3\x82\xa7\xe3\x83\x96\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88'

* Mon 15 Apr 2013 01:21:30 PM JST
self.
* Mon 15 Apr 2013 01:21:33 PM JST
self.
* Mon 15 Apr 2013 01:22:01 PM JST
site_str2 = 
* Mon 15 Apr 2013 01:22:16 PM JST

* Mon 15 Apr 2013 01:22:16 PM JST

* Mon 15 Apr 2013 01:22:16 PM JST
            # '公式サイト'

* Mon 15 Apr 2013 01:22:42 PM JST

* Mon 15 Apr 2013 01:22:42 PM JST

* Mon 15 Apr 2013 01:22:42 PM JST
                    site_str == tr[0].text or

* Mon 15 Apr 2013 01:22:44 PM JST
site_str2 == tr[0].text
* Mon 15 Apr 2013 01:22:44 PM JST
                    site_str2 == tr[0].text
* Mon 15 Apr 2013 01:22:50 PM JST
                    
* Mon 15 Apr 2013 01:22:52 PM JST
                    
* Mon 15 Apr 2013 01:28:35 PM JST
大久保 三代
* Mon 15 Apr 2013 01:31:14 PM JST
                    if verbose:
                        print('Homepage: ' + homepage)

* Mon 15 Apr 2013 01:32:06 PM JST
                    if verbose:
                        print('Homepage: ' + homepage)

* Mon 15 Apr 2013 01:32:18 PM JST
homepage
* Mon 15 Apr 2013 01:32:30 PM JST
                if verbose:
                    print('Homepage: ' + result)

* Mon 15 Apr 2013 01:33:34 PM JST
井上貴博
* Mon 15 Apr 2013 01:42:53 PM JST
name
* Mon 15 Apr 2013 01:43:08 PM JST
name + u'_(政治家)'
* Mon 15 Apr 2013 02:18:39 PM JST
e
* Mon 15 Apr 2013 02:19:28 PM JST
__sizeof__
* Mon 15 Apr 2013 02:20:17 PM JST
IOError
* Mon 15 Apr 2013 02:20:20 PM JST

* Mon 15 Apr 2013 02:20:20 PM JST

* Mon 15 Apr 2013 02:20:20 PM JST
                    print(':')

* Mon 15 Apr 2013 02:39:59 PM JST
            site_str = [
                # '公式サイト'
                u'\xe5\x85\xac\xe5\xbc\x8f\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88',
                # 'ウェブサイト'
                u'\xe3\x82\xa6\xe3\x82\xa7\xe3\x83\x96\xe3\x82\xb5\xe3\x82\xa4\xe3\x83\x88']

* Mon 15 Apr 2013 03:32:41 PM JST

* Mon 15 Apr 2013 03:32:41 PM JST

* Mon 15 Apr 2013 03:32:41 PM JST
__init__

* Mon 15 Apr 2013 03:33:14 PM JST

* Mon 15 Apr 2013 03:33:14 PM JST

* Mon 15 Apr 2013 03:33:14 PM JST
# for debug

* Mon 15 Apr 2013 03:33:14 PM JST
# for debug

* Mon 15 Apr 2013 03:33:14 PM JST
# for debug
import cgitb as _cgitb

* Mon 15 Apr 2013 03:33:14 PM JST
# for debug
import cgitb as _cgitb

* Mon 15 Apr 2013 03:33:14 PM JST
# for debug
import cgitb as _cgitb
_cgitb.enable(format='text')

* Mon 15 Apr 2013 03:33:39 PM JST
class _Verbose(object):
    """Abstract for verbose mode."""

    def __init__(self, verbose=False):
        self._verbose = verbose

    def verbose_on(self, verbose=False):
        """Turn on verbose mode."""
        self._verbose = True
        if verbose:
            print('Truned On verbose mode')

    def verbose_off(self, verbose=False):
        """Turn off verbose mode."""
        self._verbose = False
        if verbose:
            print('Truned Off verbose mode')

* Mon 15 Apr 2013 03:34:27 PM JST
abstract
* Mon 15 Apr 2013 03:34:39 PM JST

* Mon 15 Apr 2013 03:34:40 PM JST

* Mon 15 Apr 2013 03:34:40 PM JST
from mytmp.abstract import Verbose as _Verbose

* Mon 15 Apr 2013 03:34:44 PM JST

* Mon 15 Apr 2013 03:34:44 PM JST

* Mon 15 Apr 2013 03:34:44 PM JST
from mytmp.abstract import Verbose as _Verbose

* Mon 15 Apr 2013 03:57:03 PM JST

* Mon 15 Apr 2013 03:57:03 PM JST
** TODO Chrome R
* Mon 15 Apr 2013 03:57:03 PM JST
** TODO Chrome RSS

* Mon 15 Apr 2013 03:59:59 PM JST
std
* Mon 15 Apr 2013 04:01:43 PM JST
t 
* Mon 15 Apr 2013 04:03:44 PM JST
t
* Mon 15 Apr 2013 04:05:30 PM JST
Error in timer: (args-out-of-range 2312 2396)
* Mon 15 Apr 2013 08:00:29 PM JST
    print 'MessageName:',event.MessageName
    print 'Ascii:', repr(event.Ascii), repr(chr(event.Ascii))
    print 'Key:', repr(event.Key)
    print 'KeyID:', repr(event.KeyID)
    print 'ScanCode:', repr(event.ScanCode)
    print 'Time:',event.Time
* Mon 15 Apr 2013 08:00:32 PM JST

* Mon 15 Apr 2013 08:00:32 PM JST

* Mon 15 Apr 2013 08:00:32 PM JST
    print(event.Ascii)

* Mon 15 Apr 2013 08:15:01 PM JST

* Mon 15 Apr 2013 08:15:02 PM JST

* Mon 15 Apr 2013 08:15:02 PM JST
import pyHook

* Mon 15 Apr 2013 08:15:13 PM JST
if os.name == 'posix':
    import pyxhook as hooklib
elif os.name == 'nt':
    import pyHook as hooklib
    import pythoncom

* Mon 15 Apr 2013 08:15:19 PM JST
if os.name == 'posix':
    import pyxhook as hooklib
elif os.name == 'nt':
    import pyHook as hooklib
    import pythoncom
else:
    print "OS is not recognised as windows or linux."
    exit()

* Mon 15 Apr 2013 08:15:28 PM JST

* Mon 15 Apr 2013 08:15:28 PM JST

* Mon 15 Apr 2013 08:15:28 PM JST
import pyHook

* Mon 15 Apr 2013 08:16:27 PM JST

* Mon 15 Apr 2013 08:16:27 PM JST

* Mon 15 Apr 2013 08:16:27 PM JST
import pythoncom

* Mon 15 Apr 2013 08:16:58 PM JST
hooklib
* Mon 15 Apr 2013 08:17:03 PM JST
 as hooklib
* Mon 15 Apr 2013 08:24:07 PM JST
hooklib.HookManager()
* Mon 15 Apr 2013 08:24:51 PM JST
.start()
* Mon 15 Apr 2013 08:53:27 PM JST

* Mon 15 Apr 2013 08:53:27 PM JST

* Mon 15 Apr 2013 08:53:27 PM JST
    import pythoncom

* Mon 15 Apr 2013 09:15:00 PM JST
http://pykeylogger.sourceforge.net/ 
* Mon 15 Apr 2013 09:24:27 PM JST
# FIXME: (Atami) [2013/04/13]
# can not grab this 'http://www.shugiin.go.jp/index.nsf/html/index_kousei2.htm' page
# and define expand abbrev dictionary
PARTY_ABBREV = {u'自民':     u'自由民主',
                u'民主':     u'民主',
                u'維新':     u'日本維新の会',
                u'公明':     u'公明',
                u'みん':     u'みんなの',
                u'みんなの': u'みんなの',
                u'生活':     u'生活の',
                u'共産':     u'日本共産',
                u'み風':     u'みどりの風',
                u'社民':     u'社会民主',
                u'改革':     u'新党改革',
                u'無':       u'無所属',
                u'無所属':   u'無所属'}

* Mon 15 Apr 2013 09:25:10 PM JST
page
* Mon 15 Apr 2013 09:30:03 PM JST

* Mon 15 Apr 2013 09:30:03 PM JST

* Mon 15 Apr 2013 09:30:03 PM JST
    giin = u'(衆)'

* Mon 15 Apr 2013 09:34:48 PM JST

* Mon 15 Apr 2013 09:34:48 PM JST

* Mon 15 Apr 2013 09:34:48 PM JST
                    # |----------------------------------------|

* Mon 15 Apr 2013 09:34:49 PM JST
                    # |----------------------------------------|

* Mon 15 Apr 2013 09:34:49 PM JST
                    # |----------------------------------------|
                    # | 0 name | 1 kana | 2 party | 3 location |

* Mon 15 Apr 2013 09:34:49 PM JST
                    # |----------------------------------------|
                    # | 0 name | 1 kana | 2 party | 3 location |

* Mon 15 Apr 2013 09:34:50 PM JST
                    # |----------------------------------------|
                    # | 0 name | 1 kana | 2 party | 3 location |
                    # |----------------------------------------|

* Mon 15 Apr 2013 09:34:54 PM JST
# 
* Mon 15 Apr 2013 09:34:55 PM JST
                    # 
* Mon 15 Apr 2013 09:35:00 PM JST
                    
* Mon 15 Apr 2013 09:35:06 PM JST
                    
* Mon 15 Apr 2013 09:36:49 PM JST
def multi2one_space(str_):
    """Multiple space to just one space.

    'hello   world' to 'hello world'
    'hello　　world' to 'hello world'
    @Arguments:
    - `str_`:

    @Return:
    """
    new = ' '.join(filter(None, str_.split(' ')))
    return ' '.join(filter(None, new.split(u'　')))

* Mon 15 Apr 2013 09:37:34 PM JST
multi2one_space
* Mon 15 Apr 2013 09:38:44 PM JST
str_.replace('\n', '')
* Mon 15 Apr 2013 09:39:05 PM JST
' '.join(filter(None, new.split(u'　')))
* Mon 15 Apr 2013 09:39:08 PM JST
return
* Mon 15 Apr 2013 09:40:14 PM JST

* Mon 15 Apr 2013 09:40:14 PM JST

* Mon 15 Apr 2013 09:40:14 PM JST
                        str_ = str_.replace('\n', '')

* Mon 15 Apr 2013 09:40:58 PM JST
multi2one_space
* Mon 15 Apr 2013 09:41:46 PM JST
    def _trim_name(self, str_):
        """Multiple space to just one space.

        'hello   world' to 'hello world'
        'hello　　world' to 'hello world'
        @Arguments:
        - `str_`:

        @Return:
        """
        new = str_.replace('\n', '')
        new = ' '.join(filter(None, str_.split(' ')))
        new = ' '.join(filter(None, new.split(u'　')))
        return new

* Mon 15 Apr 2013 09:42:34 PM JST
str_.endswith(u'君')
* Mon 15 Apr 2013 09:42:41 PM JST

* Mon 15 Apr 2013 09:42:41 PM JST

* Mon 15 Apr 2013 09:42:41 PM JST
                            # trim "君"

* Mon 15 Apr 2013 09:42:49 PM JST

* Mon 15 Apr 2013 09:42:49 PM JST

* Mon 15 Apr 2013 09:42:49 PM JST
                            if str_.endswith(u'君'):

* Mon 15 Apr 2013 09:59:00 PM JST
td[0].text_content()
* Mon 15 Apr 2013 10:01:14 PM JST
info.append
* Tue 16 Apr 2013 12:48:15 AM JST
newline-and-indent
* Tue 16 Apr 2013 01:32:18 AM JST

* Tue 16 Apr 2013 01:32:18 AM JST

* Tue 16 Apr 2013 01:32:18 AM JST
Y<<<<<<< .mine

* Tue 16 Apr 2013 01:32:29 AM JST

* Tue 16 Apr 2013 01:32:29 AM JST

* Tue 16 Apr 2013 01:32:29 AM JST
>>>>>>> .r802

* Tue 16 Apr 2013 01:35:44 AM JST

* Tue 16 Apr 2013 01:35:45 AM JST

* Tue 16 Apr 2013 01:35:45 AM JST
<<<<<<< .mine

* Tue 16 Apr 2013 01:35:45 AM JST

* Tue 16 Apr 2013 01:35:45 AM JST

* Tue 16 Apr 2013 01:35:45 AM JST
=======

* Tue 16 Apr 2013 01:35:46 AM JST

* Tue 16 Apr 2013 01:35:46 AM JST

* Tue 16 Apr 2013 01:35:46 AM JST
>>>>>>> .r802

* Tue 16 Apr 2013 01:36:02 AM JST

* Tue 16 Apr 2013 01:36:02 AM JST

* Tue 16 Apr 2013 01:36:02 AM JST
<<<<<<< .mine

* Tue 16 Apr 2013 01:36:03 AM JST

* Tue 16 Apr 2013 01:36:03 AM JST

* Tue 16 Apr 2013 01:36:03 AM JST
=======

* Tue 16 Apr 2013 01:36:04 AM JST

* Tue 16 Apr 2013 01:36:04 AM JST

* Tue 16 Apr 2013 01:36:04 AM JST
>>>>>>> .r802

* Tue 16 Apr 2013 01:36:39 AM JST

* Tue 16 Apr 2013 01:36:39 AM JST
<<<
* Tue 16 Apr 2013 01:36:39 AM JST
<<<<<<< .mine
**** sound
- # nano /etc/modprobe.d/alsa-base.conf

# autoloader aliases
install sound-slot-0 /sbin/modprobe snd-card-0
install sound-slot-1 /sbin/modprobe snd-card-1
install sound-slot-2 /sbin/modprobe snd-card-2
install sound-slot-3 /sbin/modprobe snd-card-3
install sound-slot-4 /sbin/modprobe snd-card-4
install sound-slot-5 /sbin/modprobe snd-card-5
install sound-slot-6 /sbin/modprobe snd-card-6
install sound-slot-7 /sbin/modprobe snd-card-7
# Cause optional modules to be loaded above generic modules
install snd /sbin/modprobe --ignore-install snd && { /sbin/modprobe --quiet snd-ioctl32 ; /sbin/modprobe --quiet snd-seq ; : ; }
install snd-rawmidi /sbin/modprobe --ignore-install snd-rawmidi && { /sbin/modprobe --quiet snd-seq-midi ; : ; }
install snd-emu10k1 /sbin/modprobe --ignore-install snd-emu10k1 && { /sbin/modprobe --quiet snd-emu10k1-synth ; : ; }
# Keep snd-pcsp from beeing loaded as first soundcard
options snd-pcsp index=-2
# Keep snd-usb-audio from beeing loaded as first soundcard
#options snd-usb-audio index=-2

# Prevent abnormal drivers from grabbing index 0
options bt87x index=-2
options cx88_alsa index=-2
options snd-atiixp-modem index=-2
options snd-intel8x0m index=-2
options snd-via82xx-modem index=-2

options snd-usb-audio index=-1

=======
**** xinit
- # apt-get install xinit
  # ~/.config/menus ~/work/

- CPU 暴走阻止
  (cf. http://benzaiten.dyndns.org/roller/ugya/entry/tracker_store%E3%81%8C%E6%9A%B4%E8%B5%B0)
  # cd /etc/xdg/autostart
  # nano tracker-*.desktop
  Hidden=true を追加
>>>>>>> .r802
**** console keymap
	 [[http://www.geocities.co.jp/SiliconValley-PaloAlto/3626/ubuntu/20101226_keycapsctrl.htm][CapLock を CTRL にする]]
	 - # loadkeys ~/.zsh/jp106.kmap.gz
	   # /usr/bin/dumkey > boottime.kmap
	   # gzip boottime.kmap
	   # cp boottime.kmap.gz /etc/console-setup/cached.kmap.gz
**** /etc/network/if-post-down.d/
	 - # rm avahi-daemon bridge
**** /etc/network/if-pre-up.d/
	 - # rm bridge
**** /etc/network/if-up.d/
***** upstart
#!/bin/sh

	  set -e

	  if [ "$IFACE" = lo ]; then
	  exit 0 # emission handled by /etc/init/network-interface.conf
	  fi

	  initctl emit -n net-device-up \
	  "IFACE=$IFACE" \
	  "LOGICAL=$LOGICAL" \
	  "ADDRFAM=$ADDRFAM" \
	  "METHOD=$METHOD"

	  initctl emit anony
**** disable ipv6
***** /etc/sysctl.conf
	  net.ipv6.conf.all.disable_ipv6 = 1
	  net.ipv6.conf.default.disable_ipv6 = 1
	  net.ipv6.conf.lo.disable_ipv6 = 1

***** /etc/ssh/sshd_config
	  - # nano /etc/ssh/sshd_config
		AddressFamily inet  # disable ipv6

**** /etc/Hosts
	 219.62.120.21     ki
	 192.168.1.122     home

**** ~/.ssh/config
	 Host ki
     HostName 219.62.120.21
     Port 12316
     IdentityFile ~/.ssh/kagi

	 Host ro
     HostName 192.168.1.1
     Port 12317
     IdentityFile ~/.ssh/kagi

	 Host home
     HostName 192.168.1.122
     Port 12316
     User home
     IdentityFile ~/.ssh/kagi

	 Host *
     Controlmaster auto
     ControlPath /tmp/%r@%h:%p
     ServerAliveInterval 60#
**** screen saver off
	 - # xset s off
	 - # setterm -powersave off

**** auto login as root
	 (cf. http://nixgeek.com/category/backtrack/)

	 - # apt-get install rungetty
	   # nano /etc/init/tty1.conf
# comment out
#exec /sbin/getty -8 38400 tty1

# add this
	   exec /sbin/rungetty tty1 --autologin root

**** remove motd message
	 - # rm /etc/update-motd.d/*
	 - # nano /etc/motd
**** /etc/apt/apt.conf
	 APT
	 {
	 Install-Recommends "false";
	 }
**** apt-get install
	 - xinit emacs23 sdic-gene95 sdic-edict sshfs python-doc python-ropemacs pyflakes
	   httrack webhttrack httrack-doc hwinfo preload
**** apt-get install localepurge
# select en en_US en_US.UTF-8

**** aptitude purge
	 - ttf-unfonts-core apparmor backtrack-wallpapers backtrack-bootsplash unetbootin-bt
	   apport python-apport apport-symptoms portmap
**** /etc/init/
	 - # rm tty4.conf .tty4.conf
	   # rm tty5.conf .tty5.conf
	   # rm tty6.conf .tty6.conf

	 - # rm plymouth*

	 - # rm hwclock-save.conf  # shutdown 時に CMOS に時間を保存しない

	 - # rm bridge-network-interface.conf
	 - # rm network-interface-security.conf

***** networking.conf
# networking - configure virtual network devices
#
# This task causes virtual network devices that do not have an associated
# kernel object to be started on boot.

	  description	"configure virtual network devices"

	  start on (local-filesystems
	  and runlevel [!0126]
	  and stopped udevtrigger)

	  task

	  pre-start exec mkdir -p /var/run/network

	  exec ifup -a

***** network-interface.conf
# network-interface - configure network device
#
# This service causes network devices to be brought up or down as a result
# of hardware being added or removed, including that which isn't ordinarily
# removable.

	  description	"configure network device"

	  start on net-device-added
	  stop on net-device-removed INTERFACE=$INTERFACE

	  instance $INTERFACE
	  export INTERFACE

	  pre-start script
      if [ "$INTERFACE" = lo ]; then
	  # bring this up even if /etc/network/interfaces is broken
	  ifconfig lo 127.0.0.1 up || true
	  initctl emit -n net-device-up \
	  IFACE=lo LOGICAL=lo ADDRFAM=inet METHOD=loopback || true
      fi
      mkdir -p /var/run/network
#    exec ifup --allow auto $INTERFACE
	  end script

#post-stop exec ifdown --allow auto $INTERFACE
	  post-stop exec ifconfig $INTERFACE down
***** anony.conf
#
#
#
#

	  description "anonymity mode"

	  start on runlevel [345] or anonymity
	  stop on runlevel [016]

	  script
	  /etc/init.d/tor start
	  /etc/init.d/privoxy start
	  end script

	  pre-stop script
	  /etc/init.d/tor stop
	  /etc/init.d/privoxy stop
	  end script

**** /etc/init/macchanger.conf
# macchanger - set MAC addresses
#
# Set the MAC addresses for the network interfaces.

	 description "change mac addresses"

	 start on net-device-added
	 stop on net-device-removed INTERFACE=$INTERFACE


	 instance $INTERFACE
	 export INTERFACE

	 task

	 pre-start script
#	for IFACE in $(ifconfig -a -s | egrep -v "^(lo|Iface)" | cut -f1 -d" ")
#	do
#	    /usr/local/bin/macchanger $IFACE -m 00:05:69:ff:ff:ff
#	    /usr/local/bin/macchanger $IFACE -e
#	done
	 /usr/local/bin/macchanger $INTERFACE -m 00:05:69:ff:ff:ff
	 /usr/local/bin/macchanger $INTERFACE -e




	 end script

**** 起動時、/etc/init.d/ の並列処理化
# read /usr/share/doc/insserv/README.debian
	 - # nano /etc/default/rcS
	   CONCURRENCY=startpar # add

**** /etc/default/rcS    UTC
	 - # nano /etc/default/rcS
	   UTC=no

**** remove plymouth
	 - # rm /etc/initramfs-tools/conf.d/splash
	   # cd /usr/share/initramfs-tools/
	   # rm hooks/plymouth
	   # cd scripts/
	   # rm init-bottom/plymouth init-top/plymouth panic/plymouth

	 - # update-initramfs -u
	   # update-grub

**** ln -s
	 - # cd /usr/local/bin
	   # ln -s /pentest/forensics/ddrescue/dd_rescue

**** sources.list
     deb http://http.kali.org/kali kali main contrib non-free
     deb-src http://http.kali.org/kali kali main contrib non-free
     deb http://security.kali.org/kali-security kali/updates main contrib non-free
     deb-src http://security.kali.org/kali-security kali/updates main contrib non-free

**** tor
	 - # nano /etc/apt/sources.list
	   deb http://deb.torproject.org/torproject.org lucid main

	 - # gpg --keyserver keys.gnupg.net --recv 886DDD89
	 - # gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | sudo apt-key add -
	 - # apt-get update
	 - # apt-get install tor tor-geoipdb
	 - # apt-get install privoxy

# After installing Privoxy, Open /etc/privoxy/config and append
# follwing line

	   forward-socks4a / 127.0.0.1:9050 .

	   /etc/init.d/privoxy start
# Configure your clients with Ip address 127.0.0.1 and port 8118


	   (cf. [[http://www.binbert.com/blog/2011/06/how-to-install-tor-on-backtrack-5/][How to install Tor on Backtrack 5]])

**** chromium-browser on root
	 - # cd /usr/lib/chromium-browser
	   # hexedit --color Chromium-Browser
	   [ TAB ] toggle ASCII mode
	   [ CTRL + s ] search 'geteuid'
	   'geteuid' string to become 'getppid'
	   [ CTRL + x ]

**** wine
	 - # cd /bin
	   # wget http://kegel.com/wine/winetricks
	   # chmod +x winetricks
	   # cd /bin
	   # sh winetricks fontfix dotnet20 gdiplus
	   # sh winetricks corefonts

***** FOCA
	  - http://www.informatica64.com/DownloadFOCA/
	  - http://www.megaupload.com/?d=VX5FSDUI


	  - # unzip FOCA_Free_2.6.1.zip
		# chmod +x Setup.msi
		# click Setup.msi
		# tar zxfv dll_foca.tar.gz
		# cp dll_foca/* ~/.wine/drive_c/Program Files/Informatica64/FOCA Free/

***** networkminer
	  (cf. http://toastresearch.com/2011/09/11/networkminer-on-backtrack-5-r1/)
	  - # cd /opt
		# wget http://sourceforge.net/projects/networkminer/files/networkminer/NetworkMiner-1.1/NetworkMiner_1-1.zip/download

**** wireless (buffarlo WLI-U2-KG54L)
	 - # modprobe zd1211rw
# つながらなければ"tail -f /var/log/syslog" で
# 確認しながら子機を接続。
**** WPA wireless
	 (cf.. [[http://www.linuxmania.jp/wireless_lan.html][LinuxMania: Linux で無線 LAN を使おう (Fedora)]])
	 (cf.. [[http://www.bird-soft.net/mt/2009/06/ubuntu_lan.html][Bird-Soft Weblog: Ubuntu 無線 LAN 設定メモ]])
***** Interface の確認
# wlan の確認
	  - # ifconfig -a
***** パスフレーズの生成
	  - # wpa_passphrase <ssid> <暗号化キー (パスワード)> /etc/wpa_supplicant/wpa_supplicant.conf
		(ex.. # wpa_passphrase "dd-wrt" "takahiropassword" > /etc/wpa_supplicant/wpa_supplicant.conf)
***** /etc/wpa_supplicant/wpa_supplicant.conf の編集
	  - # nano /etc/wpa_supplicant/wpa_supplicant.conf
		network={
		ssid="dd-wrt"
		key_mgmt=WPA-PSK
		proto=WPA WPA2
		pairwise=CCMP TKIP
		group=CCMP TKIP WEP104 WEP40
		psk=<数十文字の数字>
		}

***** WPA2 による接続の確認
	  - # wpa_supplicant -c /etc/wpa_supplicant/wpa_supplicant.conf -i wlan0 -Dwext
		# iwconfig
# ESSID と Access Point が正しく表示されていれば成功

	  - # dhclient -d wlan0
		# ping 192.168.1.1

***** /etc/network/interfaces を編集
	  - # nano /etc/network/interfaces
		auto wlan0
		iface wlan0 inet static
		address 192.168.1.102
		netmask 255.255.255.0
		gateway 192.168.1.1

		wpa-driver wext
		wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
***** 接続
	  - # /etc/init.d/networking restart
# つながらない時は子機を抜き差しして再度コマンド
**** font ricty
	 (cf.. http://linux.ikoinoba.net/index.php?UID=1307858150)
	 (cf.. [[http://save.sys.t.u-tokyo.ac.jp/~yusa/fonts/ricty.html][プログラミング用フォント Ricty]])

	 - # apt-get install fontforge
	   download migu-1m-????????.zip
	   # wget http://save.sys.t.u-tokyo.ac.jp/~yusa/fonts/ricty/Ricty-3.1.2.tar.gz
	   # unzip unzip migu-1m-20111002.zip
	   # tar xvfz Ricty-3.1.2.tar.gz
	   # cp migu-1m-20111002/migu-*.ttf Ricty/
	   # cd Ricty/
	   # sh ricty-generator.sh auto
	   # cp Ricty-{Regular,Bold}.ttf /usr/share/fonts/truetype/
	   # fc-cache -vf
**** /etc/fstab
# noatime アクセスタイム禁止
# no check fsck on boot
# 6 番目の値を 0 にする。
# 0 = fsck しない。 1 = 優先的に fsck (/ root dir) 2 = 1 の後に fsck
	 - # nano /etc/fstab
	   /dev/mapper/btcrypt /               ext4    errors=remount-ro,noatime 0  0
	   /dev/disk/by-uuid/fac6e8bd-9476-48a5-bc0e-e49d3169b93e  /boot  ext3 defaults  0  0

**** blindcrawl.pl
	 - # mkdir /pentest/enumeration/dns/blindcrawl
	   # cd /pentest/enumeration/dns/blindcrawl
	   # wget http://sec.angrypacket.com/code/blindcrawl.pl
	   # chmod +x blindcrawl.pl
**** /etc/proxychains.conf
#socks4         127.0.0.1 9050
	 socks5  127.0.0.1 9050
**** nessus
	 - # apt-get install nessus
	   # /opt/nessus/bin/nessus-adduser
	   # /opt/nessus/bin/nessus-fetch --register XXXX-XXXX-XXXX-XXXX-XXXX
**** xfce
	 - apt-get install xubuntu-desktop
	 - apt-get purge gdm
- # echo gtk-menu-popup-delay = 0 >> ~/.gtkrc-2.0

**** cli login
- # echo "" > /etc/X11/default-display-manager
  # update-rc.d lightdm remove

**** japanese enviroment
	 - # apt-get install tegaki-zinnia-japanese libprotobuf5 libzinnia0 software-center language-selector
	 - # dpkg -i ibus-mozc_1.2.855.102-1\~ppa1_i386.deb\
	   mozc-server+dict_1.2.855.102-1+20111120\~ppa1_i386.deb\
	   mozc-utils-gui_1.2.855.102-1\~ppa1_all.deb
**** Dradis
	 - [[http://guides.dradisframework.org/install_on_backtrack.html][Dradis]]
	 - # bash -s stable < <(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
	   # source /etc/profile.d/rvm.sh
	   # rvm -v
	   # for package in zlib openssl libxslt libxml2; do rvm pkg install $package; done
	   # rvm install 1.9.3
	   # rvm 1.9.3 --default
	   # ruby -v
	   # echo "gem: --no-rdoc --no-ri" > ~/.gemrc
	   # gem install bundler
	   # bundle -v

	   #  mkdir /pentest/misc/dradis-git && cd /pentest/misc/dradis-git/
	   # git clone https://github.com/dradis/dradisframework.git server
	   # for file in verify reset start; do curl -O https://raw.github.com/dradis/meta/master/$file.sh; done
	   # chmod +x *.sh
	   # cd server/
	   answer yes

	   # em reset.sh
	   [ [-s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"
	   to
	   [ [s /etc/profile.d/rvm.sh ]] && . /etc/profile.d/rvm.sh

	   # ./reset.sh
	   # ./reset.sh

	   # cd server/
	   # RAILS_ENV=production bundle exec rake assets:precompile
	   # cd ../
	   # ./start.sh

	   # cd /pentest/misc/dradis-git/server
	   # /pentest/misc/dradis-git/server# git pull
**** Google Earth
(cf. http://trollmaker.com/article13/how-to-install-google-earth-on-debian-wheezy)

- # apt-get install googleearth-package
  # apt-get install alien  libfreeimage3 lsb-core pax rpm ttf-dejavu ttf-bitstream-vera
  # make-googleearth-package --force
  # dpkg -i googleearth_6.0.3.2197+0.7.0-1_i386.deb

**** fstab
/dev/mapper/sdf5_crypt /               ext4    errors=remount-ro,noatime 0       1
**** rsyslog.conf
#  /etc/rsyslog.conf	Configuration file for rsyslog.
#
#			For more information see
#			/usr/share/doc/rsyslog-doc/html/rsyslog_conf.html


#################
#### MODULES ####
#################

$ModLoad imuxsock # provides support for local system logging
$ModLoad imklog   # provides kernel logging support
#$ModLoad immark  # provides --MARK-- message capability

# provides UDP syslog reception
#$ModLoad imudp
#$UDPServerRun 514

# provides TCP syslog reception
#$ModLoad imtcp
#$InputTCPServerRun 514


###########################
#### GLOBAL DIRECTIVES ####
###########################

#
# Use traditional timestamp format.
# To enable high precision timestamps, comment out the following line.
#
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

#
# Set the default permissions for all log files.
#
$FileOwner root
$FileGroup adm
$FileCreateMode 0640
$DirCreateMode 0755
$Umask 0022

#
# Where to place spool and state files
#
$WorkDirectory /var/spool/rsyslog

#
# Include all config files in /etc/rsyslog.d/
#
$IncludeConfig /etc/rsyslog.d/*.conf


###############
#### RULES ####
###############

#
# First some standard log files.  Log by facility.
#
auth,authpriv.*			/var/log/auth.log
*.*;auth,authpriv.none		-/var/log/syslog
#cron.*				/var/log/cron.log
daemon.*			-/var/log/daemon.log
kern.*				-/var/log/kern.log
# lpr.*				-/var/log/lpr.log
# mail.*				-/var/log/mail.log
user.*				-/var/log/user.log

#
# Logging for the mail system.  Split it up so that
# it is easy to write scripts to parse these files.
#
# mail.info			-/var/log/mail.info
# mail.warn			-/var/log/mail.warn
# mail.err			/var/log/mail.err

#
# Logging for INN news system.
#
# news.crit			/var/log/news/news.crit
# news.err			/var/log/news/news.err
# news.notice			-/var/log/news/news.notice

#
# Some "catch-all" log files.
#
# *.=debug;\
	# auth,authpriv.none;\
	# news.none;mail.none	-/var/log/debug
*.=info;*.=notice;*.=warn;\
	auth,authpriv.none;\
	cron,daemon.none;\
	mail,news.none		-/var/log/messages

#
# Emergencies are sent to everybody logged in.
#
*.emerg				:omusrmsg:*

#
# I like to have messages displayed on the console, but only on a virtual
# console I usually leave idle.
#
#daemon,mail.*;\
#	news.=crit;news.=err;news.=notice;\
#	*.=debug;*.=info;\
#	*.=notice;*.=warn	/dev/tty8

# The named pipe /dev/xconsole is for the `xconsole' utility.  To use it,
# you must invoke `xconsole' with the `-file' option:
#
#    $ xconsole -file /dev/xconsole [...]
#
# NOTE: adjust the list below, or you'll go crazy if you have a reasonably
#      busy site..
#
daemon.*;mail.*;\
	news.err;\
	*.=debug;*.=info;\
	*.=notice;*.=warn	|/dev/xconsole

**** install intel compiler
- download https://registrationcenter.intel.com/regcenter/DownloadNow.aspx?ID=18105&DLM=0&EmailID=zhronxic%40sharklasers.com&Sequence=1366633
- # tar zxvf l_ccompxe_2013.3.163.tgz
  # cd l_ccompxe_2013.3.163/
  # ./install.sh
  # source /opt/intel/bin/iccvars.sh
  # echo /opt/intel/composerxe/lib/ia32 > /etc/ld.so.conf.d/icc.conf
  # ldconfig
  # icc -v

* Tue 16 Apr 2013 01:36:53 AM JST

* Tue 16 Apr 2013 01:36:53 AM JST
>>>
* Tue 16 Apr 2013 01:36:53 AM JST
>>>>>>> .r802

* Tue 16 Apr 2013 01:37:09 AM JST

* Tue 16 Apr 2013 01:37:09 AM JST
======
* Tue 16 Apr 2013 01:37:09 AM JST
=======

* Tue 16 Apr 2013 01:39:26 AM JST

* Tue 16 Apr 2013 01:39:26 AM JST

* Tue 16 Apr 2013 01:39:26 AM JST
=======

* Tue 16 Apr 2013 01:41:29 AM JST
;;;; Emacs Bookmark Format Version 1 ;;;;
;;; This format is meant to be slightly human-readable;
;;; nevertheless, you probably don't want to edit it.
;;; -*- End Of Bookmark File Format Version Stamp -*-
(("page-0240.png"
 (filename . "/media/Data/MYTEMP/CPRIMER2/page-0240.png")
 (position . 0)
 (image-type . png)
 (handler . image-bookmark-jump))
("page-0236.png"
 (filename . "/media/Data/MYTEMP/CPRIMER2/page-0236.png")
 (position . 0)
 (image-type . png)
 (handler . image-bookmark-jump))
("page-0194.png"
 (filename . "/media/Data/MYTEMP/CPRIMER2/page-0194.png")
 (position . 0)
 (image-type . png)
 (handler . image-bookmark-jump))
("page-0154.png"
 (filename . "/media/Data/MYTEMP/CPRIMER/page-0154.png")
 (position . 0)
 (image-type . png)
 (handler . image-bookmark-jump))
("page-0122.png"
 (filename . "/media/Data/MYTEMP/CPRIMER/page-0122.png")
 (position . 0)
 (image-type . png)
 (handler . image-bookmark-jump))
("snippets"
 (filename . "p:/Office/emacs/.emacs.d/data_e/snippets/")
 (front-context-string . "django\n  drwxrwx")
 (rear-context-string . "  0 12-15 22:45 ")
 (position . 291))
("org-remember-last-stored"
 (filename . "~/.emacs.d/allinone.org")
 (front-context-string . "** TODO [#C] lin")
 (rear-context-string . "thly quarter 統合\n")
 (position . 344191))
("var_e"
 (filename . "~/.emacs.d/var_e/")
 (front-context-string . "auto-save-list\n ")
 (rear-context-string . "012-11-29 17:58 ")
 (position . 190))
("mylisp"
 (filename . "~/.emacs.d/elisp/mylisp/")
 (front-context-string . ".svn\n  -rw-r--r-")
 (rear-context-string . "012-11-29 14:30 ")
 (position . 196))
("plugin"
 (filename . "~/.emacs.d/elisp/plugin/")
 (front-context-string . "archives\n  drwxr")
 (rear-context-string . "012-11-27 16:27 ")
 (position . 200))
("start.d"
 (filename . "~/.emacs.d/elisp/start.d/")
 (front-context-string . ".svn\n  -rw-r--r-")
 (rear-context-string . "012-11-29 14:32 ")
 (position . 199))
("elisp"
 (filename . "~/.emacs.d/elisp/")
 (front-context-string . "mylisp\n  drwxr-x")
 (rear-context-string . "012-11-29 14:30 ")
 (position . 192))
("code"
 (filename . "p:/Office/emacs/.emacs.d/data_e/code/")
 (front-context-string . "python\n  drwxrwx")
 (rear-context-string . "x 0 02-07 01:19 ")
 (position . 302))
("data_e"
 (filename . "~/.emacs.d/data_e/")
 (front-context-string . "ac-dict\n  drwxr-")
 (rear-context-string . "012-11-27 16:27 ")
 (position . 194))
("backup_e"
 (filename . "~/.emacs.d/backup_e/")
 (front-context-string . "!root!.emacs.d!v")
 (rear-context-string . "012-11-29 17:53 ")
 (position . 4158))
("work"
 (filename . "~/work/")
 (front-context-string . "09_python_mode_i")
 (rear-context-string . "012-09-26 19:53 ")
 (position . 251))
("init.el"
 (filename . "~/.emacs.d/init.el")
 (front-context-string . "; -*- coding: ut")
 (rear-context-string)
 (position . 1))
("junk"
 (filename . "/tmp/junk/")
 (front-context-string . "2012-09-25-21212")
 (rear-context-string . "012-09-25 21:22 ")
 (position . 209))
("memo.org"
 (filename . "~/mydoc/memo/memo.org")
 (front-context-string)
 (rear-context-string . "on.pdf\n\n\n\n\n\n\n\n\n\n")
 (position . 17880))
("~"
 (filename . "~/")
 (front-context-string . ".emacs.d\n  -rw--")
 (rear-context-string . "96 Sep 23 16:49 ")
 (position . 474))
("mydoc"
 (filename . "/data/mydoc/")
 (front-context-string . "etc\n  drwx--x--x")
 (rear-context-string . "96 Sep 17 12:36 ")
 (position . 296))
(".emacs.d"
 (filename . "~/.emacs.d/")
 (front-context-string . "init\n  -rwx-----")
 (rear-context-string . "96 Sep 20 15:20 ")
 (position . 388))
("ni"
 (filename . "/data/mydoc/architecture/ni/ni")
 (front-context-string . "-*- mode: org; c")
 (rear-context-string)
 (position . 1))
("ki"
 (filename . "/data/mydoc/architecture/ki/ki")
 (front-context-string . "-*- mode: org; c")
 (rear-context-string)
 (position . 1))

* Tue 16 Apr 2013 01:43:22 AM JST
;;;; Emacs Bookmark Format Version 1 ;;;;
;;; This format is meant to be slightly human-readable;
;;; nevertheless, you probably don't want to edit it.
;;; -*- End Of Bookmark File Format Version Stamp -*-
(("page-0240.png"
 (filename . "/media/Data/MYTEMP/CPRIMER2/page-0240.png")
 (position . 0)
 (image-type . png)
 (handler . image-bookmark-jump))
("page-0236.png"
 (filename . "/media/Data/MYTEMP/CPRIMER2/page-0236.png")
 (position . 0)
 (image-type . png)
 (handler . image-bookmark-jump))
("page-0194.png"
 (filename . "/media/Data/MYTEMP/CPRIMER2/page-0194.png")
 (position . 0)
 (image-type . png)
 (handler . image-bookmark-jump))
("page-0154.png"
 (filename . "/media/Data/MYTEMP/CPRIMER/page-0154.png")
 (position . 0)
 (image-type . png)
 (handler . image-bookmark-jump))
("page-0122.png"
 (filename . "/media/Data/MYTEMP/CPRIMER/page-0122.png")
 (position . 0)
 (image-type . png)
 (handler . image-bookmark-jump))
("snippets"
 (filename . "p:/Office/emacs/.emacs.d/data_e/snippets/")
 (front-context-string . "django\n  drwxrwx")
 (rear-context-string . "  0 12-15 22:45 ")
 (position . 291))
("org-remember-last-stored"
 (filename . "~/.emacs.d/allinone.org")
 (front-context-string . "** TODO [#C] lin")
 (rear-context-string . "thly quarter 統合\n")
 (position . 344191))
("var_e"
 (filename . "~/.emacs.d/var_e/")
 (front-context-string . "auto-save-list\n ")
 (rear-context-string . "012-11-29 17:58 ")
 (position . 190))
("mylisp"
 (filename . "~/.emacs.d/elisp/mylisp/")
 (front-context-string . ".svn\n  -rw-r--r-")
 (rear-context-string . "012-11-29 14:30 ")
 (position . 196))
("plugin"
 (filename . "~/.emacs.d/elisp/plugin/")
 (front-context-string . "archives\n  drwxr")
 (rear-context-string . "012-11-27 16:27 ")
 (position . 200))
("start.d"
 (filename . "~/.emacs.d/elisp/start.d/")
 (front-context-string . ".svn\n  -rw-r--r-")
 (rear-context-string . "012-11-29 14:32 ")
 (position . 199))
("elisp"
 (filename . "~/.emacs.d/elisp/")
 (front-context-string . "mylisp\n  drwxr-x")
 (rear-context-string . "012-11-29 14:30 ")
 (position . 192))
("code"
 (filename . "p:/Office/emacs/.emacs.d/data_e/code/")
 (front-context-string . "python\n  drwxrwx")
 (rear-context-string . "x 0 02-07 01:19 ")
 (position . 302))
("data_e"
 (filename . "~/.emacs.d/data_e/")
 (front-context-string . "ac-dict\n  drwxr-")
 (rear-context-string . "012-11-27 16:27 ")
 (position . 194))
("backup_e"
 (filename . "~/.emacs.d/backup_e/")
 (front-context-string . "!root!.emacs.d!v")
 (rear-context-string . "012-11-29 17:53 ")
 (position . 4158))
("work"
 (filename . "~/work/")
 (front-context-string . "09_python_mode_i")
 (rear-context-string . "012-09-26 19:53 ")
 (position . 251))
("init.el"
 (filename . "~/.emacs.d/init.el")
 (front-context-string . "; -*- coding: ut")
 (rear-context-string)
 (position . 1))
("junk"
 (filename . "/tmp/junk/")
 (front-context-string . "2012-09-25-21212")
 (rear-context-string . "012-09-25 21:22 ")
 (position . 209))
("memo.org"
 (filename . "~/mydoc/memo/memo.org")
 (front-context-string)
 (rear-context-string . "on.pdf\n\n\n\n\n\n\n\n\n\n")
 (position . 17880))
("~"
 (filename . "~/")
 (front-context-string . ".emacs.d\n  -rw--")
 (rear-context-string . "96 Sep 23 16:49 ")
 (position . 474))
("mydoc"
 (filename . "/data/mydoc/")
 (front-context-string . "etc\n  drwx--x--x")
 (rear-context-string . "96 Sep 17 12:36 ")
 (position . 296))
(".emacs.d"
 (filename . "~/.emacs.d/")
 (front-context-string . "init\n  -rwx-----")
 (rear-context-string . "96 Sep 20 15:20 ")
 (position . 388))
("ni"
 (filename . "/data/mydoc/architecture/ni/ni")
 (front-context-string . "-*- mode: org; c")
 (rear-context-string)
 (position . 1))
("ki"
 (filename . "/data/mydoc/architecture/ki/ki")
 (front-context-string . "-*- mode: org; c")
 (rear-context-string)
 (position . 1))

* Tue 16 Apr 2013 11:24:18 AM JST
http://status.calibre-ebook.com/linux_installer
* Tue 16 Apr 2013 11:33:13 AM JST
defsubst
* Tue 16 Apr 2013 01:28:38 PM JST

* Tue 16 Apr 2013 01:28:38 PM JST

* Tue 16 Apr 2013 01:28:38 PM JST
def _options_maker():

* Tue 16 Apr 2013 01:28:38 PM JST
def _options_maker():

* Tue 16 Apr 2013 01:28:39 PM JST
def _options_maker():
    parser = argparse.ArgumentParser(description=""" """)

* Tue 16 Apr 2013 01:28:39 PM JST
def _options_maker():
    parser = argparse.ArgumentParser(description=""" """)

* Tue 16 Apr 2013 01:28:39 PM JST
def _options_maker():
    parser = argparse.ArgumentParser(description=""" """)
    parser.add_argument('--version',

* Tue 16 Apr 2013 01:28:39 PM JST
def _options_maker():
    parser = argparse.ArgumentParser(description=""" """)
    parser.add_argument('--version',

* Tue 16 Apr 2013 01:28:39 PM JST
def _options_maker():
    parser = argparse.ArgumentParser(description=""" """)
    parser.add_argument('--version',
                        dest='version',

* Tue 16 Apr 2013 01:28:39 PM JST
def _options_maker():
    parser = argparse.ArgumentParser(description=""" """)
    parser.add_argument('--version',
                        dest='version',

* Tue 16 Apr 2013 01:28:39 PM JST
def _options_maker():
    parser = argparse.ArgumentParser(description=""" """)
    parser.add_argument('--version',
                        dest='version',
                        action='version',

* Tue 16 Apr 2013 01:28:39 PM JST
def _options_maker():
    parser = argparse.ArgumentParser(description=""" """)
    parser.add_argument('--version',
                        dest='version',
                        action='version',

* Tue 16 Apr 2013 01:28:39 PM JST
def _options_maker():
    parser = argparse.ArgumentParser(description=""" """)
    parser.add_argument('--version',
                        dest='version',
                        action='version',
                        version=__version__,

* Tue 16 Apr 2013 01:28:39 PM JST
def _options_maker():
    parser = argparse.ArgumentParser(description=""" """)
    parser.add_argument('--version',
                        dest='version',
                        action='version',
                        version=__version__,

* Tue 16 Apr 2013 01:28:39 PM JST
def _options_maker():
    parser = argparse.ArgumentParser(description=""" """)
    parser.add_argument('--version',
                        dest='version',
                        action='version',
                        version=__version__,
                        help='Version Strings.')

* Tue 16 Apr 2013 01:28:39 PM JST
def _options_maker():
    parser = argparse.ArgumentParser(description=""" """)
    parser.add_argument('--version',
                        dest='version',
                        action='version',
                        version=__version__,
                        help='Version Strings.')

* Tue 16 Apr 2013 01:28:39 PM JST
def _options_maker():
    parser = argparse.ArgumentParser(description=""" """)
    parser.add_argument('--version',
                        dest='version',
                        action='version',
                        version=__version__,
                        help='Version Strings.')
    # (yas/expand-link "argparse_add_argument" t)

* Tue 16 Apr 2013 01:28:40 PM JST
def _options_maker():
    parser = argparse.ArgumentParser(description=""" """)
    parser.add_argument('--version',
                        dest='version',
                        action='version',
                        version=__version__,
                        help='Version Strings.')
    # (yas/expand-link "argparse_add_argument" t)

* Tue 16 Apr 2013 01:28:40 PM JST
def _options_maker():
    parser = argparse.ArgumentParser(description=""" """)
    parser.add_argument('--version',
                        dest='version',
                        action='version',
                        version=__version__,
                        help='Version Strings.')
    # (yas/expand-link "argparse_add_argument" t)
    return parser.parse_args()

* Tue 16 Apr 2013 01:28:42 PM JST
_options_maker()
* Tue 16 Apr 2013 01:28:43 PM JST
args = _options_maker()
* Tue 16 Apr 2013 01:29:02 PM JST

* Tue 16 Apr 2013 01:29:02 PM JST

* Tue 16 Apr 2013 01:29:02 PM JST
import argparse

* Tue 16 Apr 2013 01:29:03 PM JST
import argparse

* Tue 16 Apr 2013 01:29:03 PM JST
import argparse
import

* Tue 16 Apr 2013 01:29:04 PM JST

* Tue 16 Apr 2013 01:29:04 PM JST

* Tue 16 Apr 2013 01:29:04 PM JST
import cgitb

* Tue 16 Apr 2013 01:29:04 PM JST
import cgitb

* Tue 16 Apr 2013 01:29:04 PM JST
import cgitb
cgitb.enable(format='text')

* Tue 16 Apr 2013 01:29:05 PM JST

* Tue 16 Apr 2013 01:29:05 PM JST

* Tue 16 Apr 2013 01:29:05 PM JST
# for debug

* Tue 16 Apr 2013 01:29:19 PM JST
False
* Tue 16 Apr 2013 01:29:26 PM JST
True
* Tue 16 Apr 2013 01:51:29 PM JST
type(str_)
* Tue 16 Apr 2013 01:57:00 PM JST

* Tue 16 Apr 2013 01:57:00 PM JST

* Tue 16 Apr 2013 01:57:00 PM JST
        print(type(str_))

* Tue 16 Apr 2013 01:57:03 PM JST
        print(type(str_))

* Tue 16 Apr 2013 01:57:03 PM JST
        print(type(str_))
        assert type(str_) is types.StringType, "'str_' is must be a string"

* Tue 16 Apr 2013 02:01:00 PM JST
assert type(url) is types.StringType, ''
* Wed 17 Apr 2013 09:16:57 AM JST
##############################################################################
* Wed 17 Apr 2013 09:16:58 AM JST
Exceptions
* Wed 17 Apr 2013 09:17:54 AM JST
## 
#

* Wed 17 Apr 2013 09:21:30 AM JST
define
* Wed 17 Apr 2013 09:21:37 AM JST
expand
* Wed 17 Apr 2013 09:22:00 AM JST
and 
* Wed 17 Apr 2013 09:22:22 AM JST
because 
* Wed 17 Apr 2013 09:22:45 AM JST
this
* Wed 17 Apr 2013 09:57:57 AM JST

* Wed 17 Apr 2013 09:57:57 AM JST

* Wed 17 Apr 2013 09:57:57 AM JST
import argparse

* Wed 17 Apr 2013 09:58:00 AM JST

* Wed 17 Apr 2013 09:58:00 AM JST

* Wed 17 Apr 2013 09:58:00 AM JST
import types

* Wed 17 Apr 2013 10:24:35 AM JST
source
* Wed 17 Apr 2013 10:24:36 AM JST
source
* Wed 17 Apr 2013 10:24:36 AM JST
source
* Wed 17 Apr 2013 10:24:36 AM JST
source
* Wed 17 Apr 2013 10:24:36 AM JST
source
* Wed 17 Apr 2013 10:24:36 AM JST
source
* Wed 17 Apr 2013 10:24:36 AM JST
source
* Wed 17 Apr 2013 10:24:36 AM JST
source
* Wed 17 Apr 2013 10:24:36 AM JST
source
* Wed 17 Apr 2013 10:24:36 AM JST
source
* Wed 17 Apr 2013 10:24:37 AM JST
source
* Wed 17 Apr 2013 10:24:37 AM JST
source
* Wed 17 Apr 2013 10:24:37 AM JST
source
* Wed 17 Apr 2013 10:24:37 AM JST
source
* Wed 17 Apr 2013 10:24:37 AM JST
source
* Wed 17 Apr 2013 10:24:37 AM JST
source
* Wed 17 Apr 2013 10:24:37 AM JST
source
* Wed 17 Apr 2013 10:24:37 AM JST
source
* Wed 17 Apr 2013 10:24:37 AM JST
source
* Wed 17 Apr 2013 10:24:37 AM JST
source
* Wed 17 Apr 2013 10:24:37 AM JST
source
* Wed 17 Apr 2013 10:24:37 AM JST
source
* Wed 17 Apr 2013 10:24:37 AM JST
source
* Wed 17 Apr 2013 10:24:37 AM JST
source
* Wed 17 Apr 2013 10:24:38 AM JST
source
* Wed 17 Apr 2013 10:24:38 AM JST
source
* Wed 17 Apr 2013 10:24:38 AM JST
source
* Wed 17 Apr 2013 10:24:38 AM JST
source
* Wed 17 Apr 2013 10:24:38 AM JST
source
* Wed 17 Apr 2013 10:24:38 AM JST
source
* Wed 17 Apr 2013 10:24:38 AM JST
source
* Wed 17 Apr 2013 10:24:38 AM JST
source
* Wed 17 Apr 2013 10:24:38 AM JST
source
* Wed 17 Apr 2013 10:24:38 AM JST
source
* Wed 17 Apr 2013 10:24:38 AM JST
source
* Wed 17 Apr 2013 10:24:38 AM JST
source
* Wed 17 Apr 2013 10:24:38 AM JST
source
* Wed 17 Apr 2013 10:24:38 AM JST
source
* Wed 17 Apr 2013 10:24:39 AM JST
source
* Wed 17 Apr 2013 10:24:39 AM JST
source
* Wed 17 Apr 2013 10:24:39 AM JST
source
* Wed 17 Apr 2013 10:24:39 AM JST
source
* Wed 17 Apr 2013 10:24:39 AM JST
source
* Wed 17 Apr 2013 10:24:39 AM JST
source
* Wed 17 Apr 2013 10:24:39 AM JST
source
* Wed 17 Apr 2013 10:24:39 AM JST
source
* Wed 17 Apr 2013 10:24:39 AM JST
source
* Wed 17 Apr 2013 10:24:39 AM JST
source
* Wed 17 Apr 2013 10:24:39 AM JST
source
* Wed 17 Apr 2013 10:24:39 AM JST
source
* Wed 17 Apr 2013 10:24:40 AM JST
source
* Wed 17 Apr 2013 10:24:40 AM JST
source
* Wed 17 Apr 2013 10:24:40 AM JST
source
* Wed 17 Apr 2013 10:24:40 AM JST
source
* Wed 17 Apr 2013 10:24:40 AM JST
source
* Wed 17 Apr 2013 10:24:40 AM JST
source
* Wed 17 Apr 2013 10:24:40 AM JST
source
* Wed 17 Apr 2013 10:24:40 AM JST
source
* Wed 17 Apr 2013 10:24:40 AM JST
source
* Wed 17 Apr 2013 10:24:40 AM JST
source
* Wed 17 Apr 2013 10:24:40 AM JST
source
* Wed 17 Apr 2013 10:24:40 AM JST
source
* Wed 17 Apr 2013 10:24:40 AM JST
source
* Wed 17 Apr 2013 10:24:40 AM JST
source
* Wed 17 Apr 2013 10:24:40 AM JST
source
* Wed 17 Apr 2013 10:24:41 AM JST
source
* Wed 17 Apr 2013 10:24:41 AM JST
source
* Wed 17 Apr 2013 10:24:41 AM JST
source
* Wed 17 Apr 2013 10:24:41 AM JST
source
* Wed 17 Apr 2013 10:24:41 AM JST
source
* Wed 17 Apr 2013 10:24:41 AM JST
source
* Wed 17 Apr 2013 10:24:41 AM JST
source
* Wed 17 Apr 2013 10:24:41 AM JST
source
* Wed 17 Apr 2013 10:24:41 AM JST
source
* Wed 17 Apr 2013 10:24:41 AM JST
source
* Wed 17 Apr 2013 10:24:41 AM JST
source
* Wed 17 Apr 2013 10:24:41 AM JST
source
* Wed 17 Apr 2013 10:24:41 AM JST
source
* Wed 17 Apr 2013 10:24:41 AM JST
source
* Wed 17 Apr 2013 10:24:41 AM JST
source
* Wed 17 Apr 2013 10:24:42 AM JST
source
* Wed 17 Apr 2013 10:24:42 AM JST
source
* Wed 17 Apr 2013 10:24:42 AM JST
source
* Wed 17 Apr 2013 10:24:42 AM JST
source
* Wed 17 Apr 2013 10:24:42 AM JST
source
* Wed 17 Apr 2013 10:24:42 AM JST
source
* Wed 17 Apr 2013 10:24:42 AM JST
source
* Wed 17 Apr 2013 10:24:42 AM JST
source
* Wed 17 Apr 2013 10:24:42 AM JST
source
* Wed 17 Apr 2013 10:24:42 AM JST
source
* Wed 17 Apr 2013 10:24:42 AM JST
source
* Wed 17 Apr 2013 10:24:42 AM JST
source
* Wed 17 Apr 2013 10:24:43 AM JST
source
* Wed 17 Apr 2013 10:24:43 AM JST
source
* Wed 17 Apr 2013 10:24:43 AM JST
source
* Wed 17 Apr 2013 10:24:43 AM JST
source
* Wed 17 Apr 2013 10:24:43 AM JST
source
* Wed 17 Apr 2013 10:24:43 AM JST
source
* Wed 17 Apr 2013 10:24:43 AM JST
source
* Wed 17 Apr 2013 10:24:43 AM JST
source
* Wed 17 Apr 2013 10:24:43 AM JST
source
* Wed 17 Apr 2013 10:24:43 AM JST
source
* Wed 17 Apr 2013 10:24:43 AM JST
source
* Wed 17 Apr 2013 10:24:43 AM JST
source
* Wed 17 Apr 2013 10:24:43 AM JST
source
* Wed 17 Apr 2013 10:24:43 AM JST
source
* Wed 17 Apr 2013 10:24:43 AM JST
source
* Wed 17 Apr 2013 10:24:44 AM JST
source
* Wed 17 Apr 2013 10:24:44 AM JST
source
* Wed 17 Apr 2013 10:24:44 AM JST
source
* Wed 17 Apr 2013 10:24:44 AM JST
source
* Wed 17 Apr 2013 10:24:44 AM JST
source
* Wed 17 Apr 2013 10:24:44 AM JST
source
* Wed 17 Apr 2013 10:24:44 AM JST
source
* Wed 17 Apr 2013 10:24:44 AM JST
source
* Wed 17 Apr 2013 10:24:44 AM JST
source
* Wed 17 Apr 2013 10:24:44 AM JST
source
* Wed 17 Apr 2013 10:24:44 AM JST
source
* Wed 17 Apr 2013 10:24:44 AM JST
source
* Wed 17 Apr 2013 10:24:44 AM JST
source
* Wed 17 Apr 2013 10:24:45 AM JST
source
* Wed 17 Apr 2013 10:24:45 AM JST
source
* Wed 17 Apr 2013 10:24:45 AM JST
source
* Wed 17 Apr 2013 10:24:45 AM JST
source
* Wed 17 Apr 2013 10:24:45 AM JST
source
* Wed 17 Apr 2013 10:24:45 AM JST
source
* Wed 17 Apr 2013 10:24:45 AM JST
source
* Wed 17 Apr 2013 10:24:45 AM JST
source
* Wed 17 Apr 2013 10:24:45 AM JST
source
* Wed 17 Apr 2013 10:24:45 AM JST
source
* Wed 17 Apr 2013 10:24:45 AM JST
source
* Wed 17 Apr 2013 10:24:45 AM JST
source
* Wed 17 Apr 2013 10:24:45 AM JST
source
* Wed 17 Apr 2013 10:24:46 AM JST
source
* Wed 17 Apr 2013 10:24:46 AM JST
source
* Wed 17 Apr 2013 10:24:46 AM JST
source
* Wed 17 Apr 2013 10:24:46 AM JST
source
* Wed 17 Apr 2013 10:24:46 AM JST
source
* Wed 17 Apr 2013 10:24:46 AM JST
source
* Wed 17 Apr 2013 10:24:46 AM JST
source
* Wed 17 Apr 2013 10:24:46 AM JST
source
* Wed 17 Apr 2013 10:24:46 AM JST
source
* Wed 17 Apr 2013 10:24:46 AM JST
source
* Wed 17 Apr 2013 10:24:46 AM JST
source
* Wed 17 Apr 2013 10:24:46 AM JST
source
* Wed 17 Apr 2013 10:24:46 AM JST
source
* Wed 17 Apr 2013 10:24:46 AM JST
source
* Wed 17 Apr 2013 10:24:46 AM JST
source
* Wed 17 Apr 2013 10:24:47 AM JST
source
* Wed 17 Apr 2013 10:24:47 AM JST
source
* Wed 17 Apr 2013 10:24:47 AM JST
source
* Wed 17 Apr 2013 10:24:47 AM JST
source
* Wed 17 Apr 2013 10:24:47 AM JST
source
* Wed 17 Apr 2013 10:24:47 AM JST
source
* Wed 17 Apr 2013 10:24:47 AM JST
source
* Wed 17 Apr 2013 10:24:47 AM JST
source
* Wed 17 Apr 2013 10:24:47 AM JST
source
* Wed 17 Apr 2013 10:24:47 AM JST
source
* Wed 17 Apr 2013 10:24:47 AM JST
source
* Wed 17 Apr 2013 10:24:47 AM JST
source
* Wed 17 Apr 2013 10:24:48 AM JST
source
* Wed 17 Apr 2013 10:24:48 AM JST
source
* Wed 17 Apr 2013 10:24:48 AM JST
source
* Wed 17 Apr 2013 10:24:48 AM JST
source
* Wed 17 Apr 2013 10:24:48 AM JST
source
* Wed 17 Apr 2013 10:24:48 AM JST
source
* Wed 17 Apr 2013 10:24:48 AM JST
source
* Wed 17 Apr 2013 10:24:48 AM JST
source
* Wed 17 Apr 2013 10:24:48 AM JST
source
* Wed 17 Apr 2013 10:24:48 AM JST
source
* Wed 17 Apr 2013 10:24:48 AM JST
source
* Wed 17 Apr 2013 10:24:48 AM JST
source
* Wed 17 Apr 2013 10:24:48 AM JST
source
* Wed 17 Apr 2013 10:24:48 AM JST
source
* Wed 17 Apr 2013 10:24:49 AM JST
source
* Wed 17 Apr 2013 10:24:49 AM JST
source
* Wed 17 Apr 2013 10:24:49 AM JST
source
* Wed 17 Apr 2013 10:24:49 AM JST
source
* Wed 17 Apr 2013 10:24:49 AM JST
source
* Wed 17 Apr 2013 10:24:49 AM JST
source
* Wed 17 Apr 2013 10:24:49 AM JST
source
* Wed 17 Apr 2013 10:24:49 AM JST
source
* Wed 17 Apr 2013 10:24:49 AM JST
source
* Wed 17 Apr 2013 10:24:49 AM JST
source
* Wed 17 Apr 2013 10:24:49 AM JST
source
* Wed 17 Apr 2013 10:24:49 AM JST
source
* Wed 17 Apr 2013 10:24:49 AM JST
source
* Wed 17 Apr 2013 10:24:49 AM JST
source
* Wed 17 Apr 2013 10:24:49 AM JST
source
* Wed 17 Apr 2013 10:24:50 AM JST
source
* Wed 17 Apr 2013 10:24:50 AM JST
source
* Wed 17 Apr 2013 10:24:50 AM JST
source
* Wed 17 Apr 2013 10:24:50 AM JST
source
* Wed 17 Apr 2013 10:24:50 AM JST
source
* Wed 17 Apr 2013 10:24:50 AM JST
source
* Wed 17 Apr 2013 10:24:50 AM JST
source
* Wed 17 Apr 2013 10:24:50 AM JST
source
* Wed 17 Apr 2013 10:24:50 AM JST
source
* Wed 17 Apr 2013 10:24:50 AM JST
source
* Wed 17 Apr 2013 10:24:50 AM JST
source
* Wed 17 Apr 2013 10:24:50 AM JST
source
* Wed 17 Apr 2013 10:24:51 AM JST
source
* Wed 17 Apr 2013 10:24:51 AM JST
source
* Wed 17 Apr 2013 10:24:51 AM JST
source
* Wed 17 Apr 2013 10:24:51 AM JST
source
* Wed 17 Apr 2013 10:24:51 AM JST
source
* Wed 17 Apr 2013 10:24:51 AM JST
source
* Wed 17 Apr 2013 10:24:51 AM JST
source
* Wed 17 Apr 2013 10:24:51 AM JST
source
* Wed 17 Apr 2013 10:24:51 AM JST
source
* Wed 17 Apr 2013 10:24:51 AM JST
source
* Wed 17 Apr 2013 10:24:51 AM JST
source
* Wed 17 Apr 2013 10:24:51 AM JST
source
* Wed 17 Apr 2013 10:24:51 AM JST
source
* Wed 17 Apr 2013 10:24:51 AM JST
source
* Wed 17 Apr 2013 10:24:51 AM JST
source
* Wed 17 Apr 2013 10:24:52 AM JST
source
* Wed 17 Apr 2013 10:24:52 AM JST
source
* Wed 17 Apr 2013 10:24:52 AM JST
source
* Wed 17 Apr 2013 10:24:52 AM JST
source
* Wed 17 Apr 2013 10:24:52 AM JST
source
* Wed 17 Apr 2013 10:24:52 AM JST
source
* Wed 17 Apr 2013 10:24:52 AM JST
source
* Wed 17 Apr 2013 10:48:10 AM JST
Error in timer: (search-failed "^*Rescan*$")
* Wed 17 Apr 2013 10:58:06 AM JST
(setq ipython-command "/opt/local/bin/ipython2.5")
* Wed 17 Apr 2013 10:58:09 AM JST
setq 
* Wed 17 Apr 2013 10:58:17 AM JST
local
* Wed 17 Apr 2013 10:58:17 AM JST
opt/local
* Wed 17 Apr 2013 11:01:18 AM JST
py-shell-name "python"
* Wed 17 Apr 2013 11:02:44 AM JST
py-shell-name "ipython"
* Wed 17 Apr 2013 11:04:05 AM JST
py-shell-name "ipython"
* Wed 17 Apr 2013 11:23:57 AM JST
(compilation "pydoc -k test")
* Wed 17 Apr 2013 11:32:34 AM JST
(princ1 keyword)
* Wed 17 Apr 2013 11:33:38 AM JST
(defun py-apropos (keyword)
  "KEYWORD"
  (interactive (list (read-string "keyword: ")))
  (compilation-start (concat "pydoc -k " keyword))
  )
* Wed 17 Apr 2013 11:34:32 AM JST
py-apropos
* Wed 17 Apr 2013 11:34:46 AM JST
    
* Wed 17 Apr 2013 11:34:52 AM JST
doc
* Wed 17 Apr 2013 11:34:52 AM JST
show-doc
* Wed 17 Apr 2013 11:34:52 AM JST
jedi:show-doc
* Wed 17 Apr 2013 11:34:57 AM JST
    
* Wed 17 Apr 2013 11:47:54 AM JST
/usr/lib/python2.7/
* Wed 17 Apr 2013 11:52:27 AM JST

* Wed 17 Apr 2013 11:52:27 AM JST

* Wed 17 Apr 2013 11:52:27 AM JST
        print(modname[-9:])

* Wed 17 Apr 2013 12:10:41 PM JST

* Wed 17 Apr 2013 12:10:41 PM JST

* Wed 17 Apr 2013 12:10:41 PM JST
        print('__pydoc.py [38]: grey') # Debug

* Wed 17 Apr 2013 12:11:16 PM JST

* Wed 17 Apr 2013 12:11:16 PM JST

* Wed 17 Apr 2013 12:11:16 PM JST
"""

* Wed 17 Apr 2013 12:12:10 PM JST

* Wed 17 Apr 2013 12:12:10 PM JST

* Wed 17 Apr 2013 12:12:10 PM JST
print('__pydoc.py [120]: log_message') # Debug

* Wed 17 Apr 2013 12:12:11 PM JST

* Wed 17 Apr 2013 12:12:12 PM JST

* Wed 17 Apr 2013 12:12:12 PM JST
print('__pydoc.py [120]: log_message') # Debug

* Wed 17 Apr 2013 12:16:53 PM JST
--graph all --html --output
* Wed 17 Apr 2013 12:29:00 PM JST
if os.name == 'nt':
* Wed 17 Apr 2013 12:29:39 PM JST
    dox_bin = 'doxygen.exe'
    doxygen_conf = os.path.join(DRIVE_DIR, 'Dos/graphviz/doxygen.conf')

* Wed 17 Apr 2013 12:30:04 PM JST
doxygen_conf = os.path.join(DRIVE_DIR, 'Dos/graphviz/doxygen.conf')
* Wed 17 Apr 2013 12:30:07 PM JST
conf
* Wed 17 Apr 2013 12:30:07 PM JST
doxygen.conf
* Wed 17 Apr 2013 12:30:10 PM JST
graphviz
* Wed 17 Apr 2013 12:30:10 PM JST
Dos/graphviz
* Wed 17 Apr 2013 12:31:04 PM JST

* Wed 17 Apr 2013 12:31:04 PM JST

* Wed 17 Apr 2013 12:31:04 PM JST
import os

* Wed 17 Apr 2013 12:35:50 PM JST
(when windows-p
  (defcustom python-overview-command (concat usb-drive-letter
                                             "Lib/.pylib/overview.py")
    "Document"
    :type 'string
    :group 'python-overview))
* Wed 17 Apr 2013 12:35:56 PM JST
when
* Wed 17 Apr 2013 12:36:00 PM JST
(defcustom python-overview-command (concat usb-drive-letter
                                             "Lib/.pylib/overview.py")
    "Document"
    :type 'string
    :group 'python-overview)
* Wed 17 Apr 2013 12:36:26 PM JST
concat usb-drive-letter
* Wed 17 Apr 2013 12:36:28 PM JST
                                      
* Wed 17 Apr 2013 12:40:10 PM JST
python-overview-command
* Wed 17 Apr 2013 12:40:14 PM JST
python-overview-command (expand-file-name "~/.pylib/overview.py")
* Wed 17 Apr 2013 12:43:06 PM JST
DRIVE_DIR
* Wed 17 Apr 2013 12:43:09 PM JST
DRIVE_DIR
* Wed 17 Apr 2013 12:43:21 PM JST
join
* Wed 17 Apr 2013 01:29:24 PM JST
py-end-of-def-or-class
* Wed 17 Apr 2013 01:30:18 PM JST
backward-sentence
* Wed 17 Apr 2013 01:30:31 PM JST
    
* Wed 17 Apr 2013 01:30:39 PM JST
back
* Wed 17 Apr 2013 01:35:15 PM JST
split(__import__(modname).__doc__ or '', '\n')[0]
* Wed 17 Apr 2013 01:35:36 PM JST
modname
* Wed 17 Apr 2013 01:35:45 PM JST
os
* Wed 17 Apr 2013 02:03:09 PM JST
(setq-default line-spacing 0.1)
* Wed 17 Apr 2013 02:09:05 PM JST
                      
* Wed 17 Apr 2013 02:09:09 PM JST
Discord
* Wed 17 Apr 2013 02:26:10 PM JST
(add-)
* Wed 17 Apr 2013 02:50:24 PM JST
BadUsage
* Wed 17 Apr 2013 02:51:16 PM JST
pass
* Wed 17 Apr 2013 02:52:18 PM JST
        
* Wed 17 Apr 2013 02:53:07 PM JST

* Wed 17 Apr 2013 02:53:07 PM JST

* Wed 17 Apr 2013 02:53:07 PM JST
    args = _options_maker()

* Wed 17 Apr 2013 02:53:42 PM JST
parser.parse_args()
* Wed 17 Apr 2013 02:53:52 PM JST

* Wed 17 Apr 2013 02:53:53 PM JST

* Wed 17 Apr 2013 02:53:53 PM JST
        return parser.parse_args()

* Wed 17 Apr 2013 02:53:55 PM JST

* Wed 17 Apr 2013 02:53:55 PM JST

* Wed 17 Apr 2013 02:53:55 PM JST
    def _options_maker():

* Wed 17 Apr 2013 02:59:51 PM JST

* Wed 17 Apr 2013 02:59:51 PM JST

* Wed 17 Apr 2013 02:59:51 PM JST
def _options_maker():

* Wed 17 Apr 2013 02:59:53 PM JST
    parser = argparse.ArgumentParser(description="""${1: }""")
    parser.add_argument('--version',
                        dest='version',
                        action='version',
                        version=__version__,
                        help='Version Strings.')
    # (yas/expand-link "argparse_add_argument" t)

* Wed 17 Apr 2013 03:00:02 PM JST
parser.parse_args()
* Wed 17 Apr 2013 03:00:07 PM JST

* Wed 17 Apr 2013 03:00:07 PM JST

* Wed 17 Apr 2013 03:00:07 PM JST
    return 

* Wed 17 Apr 2013 03:00:27 PM JST
class BadUsage: pass
* Wed 17 Apr 2013 03:04:21 PM JST

* Wed 17 Apr 2013 03:04:21 PM JST

* Wed 17 Apr 2013 03:04:21 PM JST
                        default=None,

* Wed 17 Apr 2013 03:04:23 PM JST

* Wed 17 Apr 2013 03:04:23 PM JST

* Wed 17 Apr 2013 03:04:23 PM JST
                        choices=None,

* Wed 17 Apr 2013 03:06:41 PM JST

* Wed 17 Apr 2013 03:06:41 PM JST

* Wed 17 Apr 2013 03:06:41 PM JST
    else:

* Wed 17 Apr 2013 03:06:41 PM JST
    else:

* Wed 17 Apr 2013 03:06:41 PM JST
    else:
        print('world')

* Wed 17 Apr 2013 03:10:19 PM JST

* Wed 17 Apr 2013 03:10:20 PM JST

* Wed 17 Apr 2013 03:10:20 PM JST
    if not args:

* Wed 17 Apr 2013 03:10:20 PM JST
    if not args:

* Wed 17 Apr 2013 03:10:20 PM JST
    if not args:
        print('hello')

* Wed 17 Apr 2013 03:11:30 PM JST
args
* Wed 17 Apr 2013 03:17:55 PM JST

* Wed 17 Apr 2013 03:17:55 PM JST

* Wed 17 Apr 2013 03:17:55 PM JST
            import pdb; pdb.set_trace()

* Wed 17 Apr 2013 03:27:19 PM JST
:
* Wed 17 Apr 2013 03:27:20 PM JST

* Wed 17 Apr 2013 03:27:20 PM JST

* Wed 17 Apr 2013 03:27:20 PM JST
    import pdb; pdb.set_trace()

* Wed 17 Apr 2013 03:28:02 PM JST
print(
* Wed 17 Apr 2013 03:28:12 PM JST
argv
* Wed 17 Apr 2013 03:29:11 PM JST
csv)
* Wed 17 Apr 2013 03:29:12 PM JST
print(args.csv)
* Wed 17 Apr 2013 03:31:16 PM JST
    parser.add_argument('-v', '--verbose', 
                        dest='verbose',
                        action='store_true',
                        default=False,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)
                        help='A lot of messages.')

* Wed 17 Apr 2013 03:45:26 PM JST
smart-operator--
* Wed 17 Apr 2013 03:46:34 PM JST
read-only
* Wed 17 Apr 2013 03:46:41 PM JST
only
* Wed 17 Apr 2013 03:46:41 PM JST
read-only
* Wed 17 Apr 2013 03:46:49 PM JST
(defadvice smart-operator--
  (around view-mode-smart-operator-- activate)
  (if )
  ad-do-it
  )
;; (progn (ad-disable-advice 'smart-operator-- 'around 'view-mode-smart-operator--) (ad-update 'smart-operator--))
)
* Wed 17 Apr 2013 03:47:23 PM JST
my-forward-seq
* Wed 17 Apr 2013 03:47:41 PM JST

* Wed 17 Apr 2013 03:47:41 PM JST

* Wed 17 Apr 2013 03:47:41 PM JST
  ad-do-it

* Wed 17 Apr 2013 03:47:53 PM JST
  
* Wed 17 Apr 2013 03:48:08 PM JST
(defadvice smart-operator--
  (around view-mode-smart-operator-- activate)
  (if buffer-read-only
      (my-forward-seq)
    ad-do-it
      ))
;; (progn (ad-disable-advice 'smart-operator-- 'around 'view-mode-smart-operator--) (ad-update 'smart-operator--))

* Wed 17 Apr 2013 03:50:59 PM JST

* Wed 17 Apr 2013 03:51:49 PM JST
- 
* Wed 17 Apr 2013 04:14:58 PM JST
/usr/lib/python2.7/
* Wed 17 Apr 2013 06:16:59 PM JST
search 
* Wed 17 Apr 2013 06:16:59 PM JST
pip search 
* Wed 17 Apr 2013 06:18:48 PM JST
QU /media/Data/MYTEMP/src/Python-2.0.1/Include# file
* Wed 17 Apr 2013 06:29:25 PM JST

* Wed 17 Apr 2013 06:29:25 PM JST

* Wed 17 Apr 2013 06:29:25 PM JST
    def _options_maker():

* Wed 17 Apr 2013 06:29:40 PM JST
return 
* Wed 17 Apr 2013 06:30:20 PM JST
USER = 'user'
PASS = 'pass'

* Wed 17 Apr 2013 06:33:04 PM JST

* Wed 17 Apr 2013 06:33:04 PM JST

* Wed 17 Apr 2013 06:33:04 PM JST
    # (yas/expand-link "argparse_other_options" t)

* Wed 17 Apr 2013 06:33:30 PM JST

* Wed 17 Apr 2013 06:33:30 PM JST

* Wed 17 Apr 2013 06:33:30 PM JST
    args = _options_maker()

* Wed 17 Apr 2013 06:36:20 PM JST
None
* Wed 17 Apr 2013 06:38:17 PM JST
    parser.add_argument('-c', '--csv',
                        dest='csv',
                        action='store',
                        nargs=1,
                        const=None,
                        type=str,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)
                        help='Write to csv')

* Wed 17 Apr 2013 06:38:56 PM JST

* Wed 17 Apr 2013 06:38:56 PM JST

* Wed 17 Apr 2013 06:38:56 PM JST
                        # nargs=1,

* Wed 17 Apr 2013 06:39:14 PM JST
0]
* Wed 17 Apr 2013 06:39:42 PM JST
user'
* Wed 17 Apr 2013 06:39:48 PM JST
    USER = 'user'
    PASS = 'pass'


* Wed 17 Apr 2013 06:39:53 PM JST
user'
* Wed 17 Apr 2013 06:41:43 PM JST
pass'
* Wed 17 Apr 2013 06:44:15 PM JST

* Wed 17 Apr 2013 06:44:15 PM JST

* Wed 17 Apr 2013 06:44:15 PM JST
                        nargs=1,

* Wed 17 Apr 2013 06:44:17 PM JST

* Wed 17 Apr 2013 06:44:17 PM JST

* Wed 17 Apr 2013 06:44:17 PM JST
                        nargs=None,

* Wed 17 Apr 2013 07:36:09 PM JST
~/.pylib/
* Wed 17 Apr 2013 07:39:54 PM JST
:: Called file
* Wed 17 Apr 2013 07:39:59 PM JST
Called
* Wed 17 Apr 2013 07:40:07 PM JST
Execute 
* Wed 17 Apr 2013 07:41:15 PM JST
user
* Wed 17 Apr 2013 07:44:51 PM JST

* Wed 17 Apr 2013 07:44:51 PM JST

* Wed 17 Apr 2013 07:44:51 PM JST
echo 

* Wed 17 Apr 2013 07:47:31 PM JST
# write 
* Wed 17 Apr 2013 07:47:31 PM JST
    # write 
* Wed 17 Apr 2013 07:48:12 PM JST

* Wed 17 Apr 2013 07:48:13 PM JST

* Wed 17 Apr 2013 07:48:14 PM JST
with tempfile. as:
* Wed 17 Apr 2013 07:54:37 PM JST

* Wed 17 Apr 2013 07:54:37 PM JST

* Wed 17 Apr 2013 07:54:37 PM JST
import template

* Wed 17 Apr 2013 07:55:34 PM JST
bat = 
* Wed 17 Apr 2013 07:55:48 PM JST
access_
* Wed 17 Apr 2013 07:59:35 PM JST
join(
* Wed 17 Apr 2013 07:59:36 PM JST
path.join(
* Wed 17 Apr 2013 07:59:36 PM JST
os.path.join(
* Wed 17 Apr 2013 08:01:12 PM JST
TEMPLATE % info
* Wed 17 Apr 2013 08:03:09 PM JST

* Wed 17 Apr 2013 08:03:09 PM JST

* Wed 17 Apr 2013 08:03:09 PM JST
    print('')

* Wed 17 Apr 2013 08:04:55 PM JST

* Wed 17 Apr 2013 08:04:55 PM JST

* Wed 17 Apr 2013 08:04:55 PM JST
    else:

* Wed 17 Apr 2013 08:05:06 PM JST
if
* Wed 17 Apr 2013 08:06:45 PM JST
QU /# rm tmpftp_myserver.batî
* Wed 17 Apr 2013 08:09:13 PM JST
USER
* Wed 17 Apr 2013 08:09:39 PM JST

* Wed 17 Apr 2013 08:09:39 PM JST

* Wed 17 Apr 2013 08:09:39 PM JST
    USER = opt.user

* Wed 17 Apr 2013 08:09:39 PM JST
    USER = opt.user

* Wed 17 Apr 2013 08:09:39 PM JST
    USER = opt.user
    PASS = opt.password

* Wed 17 Apr 2013 11:37:46 PM JST
google-chrome --password-store=basic --disable-logging --disable-java --disable-application-cache --media-cache-size=10000000 --disk-cache-size=1000000000 --disable-ipv6
* Wed 17 Apr 2013 11:45:16 PM JST
google-chrome --password-store=basic --disable-logging --disable-java --disable-application-cache --media-cache-size=100000000 --disk-cache-size=100000000 --disable-ipv6 --disk-cache-dir="/tmp/chrome"
* Wed 17 Apr 2013 11:46:53 PM JST

* Wed 17 Apr 2013 11:46:53 PM JST

* Wed 17 Apr 2013 11:46:53 PM JST
echo "エンターを押すとウィンドウを閉じます。"

* Wed 17 Apr 2013 11:47:50 PM JST
~/
* Wed 17 Apr 2013 11:48:10 PM JST
@echo off
* Wed 17 Apr 2013 11:58:57 PM JST
use '
* Wed 17 Apr 2013 11:58:58 PM JST
not use '
* Wed 17 Apr 2013 11:58:58 PM JST
Do not use '
* Wed 17 Apr 2013 11:58:58 PM JST
WARNING!! Do not use '
* Wed 17 Apr 2013 11:58:58 PM JST
pause # WARNING!! Do not use '
* Thu 18 Apr 2013 12:02:15 AM JST
e/
* Thu 18 Apr 2013 12:02:16 AM JST
backup_e/
* Thu 18 Apr 2013 12:02:16 AM JST
d/backup_e/
* Thu 18 Apr 2013 12:02:16 AM JST
emacs.d/backup_e/
* Thu 18 Apr 2013 12:02:16 AM JST
~/.emacs.d/backup_e/
* Thu 18 Apr 2013 12:20:42 AM JST
~/
* Thu 18 Apr 2013 03:15:17 PM JST
interrogat
* Thu 18 Apr 2013 03:16:27 PM JST
** 
* Thu 18 Apr 2013 03:18:05 PM JST
15:17:43
* Thu 18 Apr 2013 03:18:42 PM JST
大地
* Thu 18 Apr 2013 03:21:54 PM JST
18 
* Thu 18 Apr 2013 03:21:54 PM JST
15:18 
* Thu 18 Apr 2013 03:21:55 PM JST
18
- 15:18 
* Thu 18 Apr 2013 06:11:36 PM JST
std::
* Thu 18 Apr 2013 06:11:39 PM JST
string
* Thu 18 Apr 2013 06:11:59 PM JST
  
* Thu 18 Apr 2013 08:33:56 PM JST
令状によると
* Thu 18 Apr 2013 08:34:53 PM JST
令状
* Thu 18 Apr 2013 10:26:41 PM JST
洗堰 
* Fri 19 Apr 2013 05:15:23 PM JST
string s5 = s.substr(
* Fri 19 Apr 2013 05:15:41 PM JST
std::
* Fri 19 Apr 2013 05:16:07 PM JST
std::
* Fri 19 Apr 2013 10:10:49 PM JST
- 
* Fri 19 Apr 2013 10:19:12 PM JST
LANG=ja_JP.UTF-8 wine start /unix /opt//portable-sleipnir-299/PortableSleipnir/PortableSleipnir.exe > /dev/null 2>&1 &
* Sat 20 Apr 2013 11:49:19 AM JST
/media/Data/MYTEMP/CPRIMER2/
* Sat 20 Apr 2013 11:50:42 AM JST
xset -dpms s off s noblank s 00 s noexpose
* Sat 20 Apr 2013 12:17:46 PM JST
/media/Data/MYTEMP/CPRIMER2/
* Sat 20 Apr 2013 12:19:42 PM JST
/media/Data/MYTEMP/CPRIMER2/
* Sun 21 Apr 2013 02:39:35 PM JST
class PasswordError(Exception):
    pass


* Sun 21 Apr 2013 02:54:07 PM JST
False
* Sun 21 Apr 2013 02:54:15 PM JST
verbose=
* Sun 21 Apr 2013 03:04:57 PM JST
verbose
* Sun 21 Apr 2013 03:09:26 PM JST
True
* Sun 21 Apr 2013 03:09:27 PM JST
verbose=True
* Sun 21 Apr 2013 03:29:52 PM JST
store_true
* Mon 22 Apr 2013 07:36:59 PM JST
0ny30747785506g@ezweb.ne.jp
daichih05006@yahoo.co.jp
3218
* Tue 23 Apr 2013 11:24:08 AM JST
0ny30747785506g@ezweb.ne.jp
* Tue 23 Apr 2013 11:25:29 AM JST
0ny30747785506g@ezweb.ne.jp
* Tue 23 Apr 2013 12:38:21 PM JST

Chapter 1 -
    - _The CIA Triad

In this guide I am going to reference a well-known security policy that was developed to identify problem areas and the recommended solutions when dealing with information security.  This policy is known as the CIA and stands for: Confidentiality, Integrity, and Availability.  This triad was developed so people will think about these important aspects of security when implementing security controls.  There should be a balance between these three aspects of security to ensure the proper use and control of your security solutions.

Confidentiality is, as the word implies, having something be confidential or secure.  In essence, privacy is security and confidentiality means that third party individuals cannot read information if they do not have access to it.  Data to think about keeping confidential is data stored on a computer (temporary data, data saved, etc.), data stored for backup, data in transit, and data intended for another person.  Confidentiality will be the main focus point of this article as it is most often referred to as the most important aspect of security.

The I in CIA stands for Integrity and is specifically referring to data integrity.  Integrity is the act of ensuring that data was not modified or deleted by parties that are not authorized to do so.  It also ensures that if the data was changed, that the authorized person can make changes that should not have been made in the first place.  Simply, if you send a message to someone, you want to make sure that the person does not receive a message that was altered during transit.  Integrity also confirms that you are in fact speaking to who you think you are speaking to (for example: we download an add-on from the website, you want to make sure that you are downloading from that website and not an unscrupulous third-party).

Finally, the A stands for Availability and ensures that when you need the data it is available to you.  Not only does data have to be available to you, but it has to be reasonably accessible.  There's no point in security controls if you cannot access the data! This component is a concern, but for the average end user, there is not much that can be done to ensure availability when dealing with webpages, or IRC servers or anything else managed by a third party host.  For this reason we will not be discussing Availability except for backing up your data in this guide.
* Tue 23 Apr 2013 12:41:08 PM JST

Chapter 2 -
    - _Recommendations

Windows was not built with security in mind, therefor should not be used.  Tails is recommended as it is a live DVD or USB that was created to preserve your anonymity and privacy.  It allows you to browse the internet anonymously and safely as all applications are preconfigured to run through Tor.  Other uses includes encrypting your files,  sending and receiving emails and instant messaging, photo editing, document editing and more.  Tails also operates completely in RAM so it does not leave a trace on your computer.  RAM is Random Access Memory and is wiped when the machine shuts down.  Everything that you want saved is done so in secure, encrypted persistent storage.  Tails link:  Here.  A step-by-step for installing Tails can be found here.  If you cannot use Tails – or better yet – do not want to use Tails, you should make sure that Windows is secure.

Windows: 

 

    Truecrypt – I would download TrueCrypt and enable FDE (Full Disk Encryption) to make sure that all evidence is encrypted thus allowing you to skip Chapter 4. If you do not want to enable FDE, I would create a container and have a Virtual Machine inside the container. Otherwise, EVIDENCE CAN BE EASILY GATHERED BY INVESTIGATORS. (Section 3.2)
    Tor Browser Bundle– This allows you to browse the internet anonymously.  Using TBB will also allow you to visit .onion sites as well as to join the .onion IRC servers with TBB’s instance or Tor. (Section 9.1)
    Anti-Virus (AV) and a Firewall – This will keep your computer protected from viruses as well as remote intruders (most all-in-one anti-virus software has these features). (Section  7)
    I have decided to move a recommendation from later on in this guide to up here. One good recommendation is to create and use a standard account with no Administrative privileges. This way, if a virus is executed, it only has the privileges of the account that you are in. Also, I would make sure your username does not contain your full name as many applications such as Pidgin can share this information. Furthermore, make sure that you create a Windows password that is difficult to guess/attack, as your computer can be explored using that password, over the network.
    (Optional) TorChat – TC is a chat application that runs over Tor to provide an anonymous way to chat. (Section 2)
    (Optional) IRC Client – An IRC client allows you to enter Tor chat rooms to talk to many individuals at one time.  You will need one with proxy settings so you can run the client through Tor.  Make sure to NOT use DCC as it can expose your IP address.  There are several IRC servers that run over Tor (.onion addresses) that you can use.  They are all logically connected, so connecting to one will connect you to all. (Section 2)
    (Optional) GPG – for sharing messages and files back and forth over a common medium, GPG ensures confidentiality and integrity. Section 3.3
    (Optional) Tormail email address – Tormail is an email service that runs through Tor, so it provides anonymity.  I recommend using Tormail with GPG when communicating via email.  The link to tormail is http://tormail.net/.  Once loaded you will be prompted to visit http://jhiwjjlqpyawmpjx.onion/ via tor.

 

 
Try it out – Set up IRC client for Tor

 

1.       Download your IRC client.  Personally, I use Pidgin.  The link is provided for you:  http://pidgin.im/. There is a portable version of Pidgin available if you plan on using the client on several machines (which is not recommended as the computer can contain spyware).  Also, Pidgin allows you to connect to several servers at once in the chance you get disconnected from a server or a netsplit occurs.

2.       To create an account, Click Accounts followed by Manage Accounts.  You can add as many accounts as you want; I created a few accounts to connect to the different IRC servers for the reason described above.

3.       Select Add.  Under Basic, your settings should look like this:  Protocol – IRC, Username – your username, Server – IRC server, Local alias – your username.  Again, you can use any of the several Tor IRC servers as they are all connected.  Alternatively, you can use one of the several IRC relays instead of connecting to the Tor servers directly.

4.       Under Advanced, your settings should look like this:  Port  – 6667, Username – your username.  In Pidgin, if you do not specify a username under the Advanced settings, your username will be exposed.  When you enter or leave the chat room the username will appear before the hostname.  For example, if your ID is TheBest and your username is Bob, then it will appear as TheBest [Bob@OnionNet]. 

5.       Under Proxy, your settings should look like this:  Proxy type – SOCKS 5, Host – 127.0.0.1, Port -9050 (Tor Port).  If you are using Privoxy, the port will be 8118.

6.       Click Buddies and Join a Chat to join a channel.  Add Chat will permanently add the channels to the Chats list so you don’t have to remember the channel name every time.  Right-clicking the chat under Chats will give you a host of options.  I selected Persistent to receive the messages in the chat-room even though they are not currently open.  You can use /list to get a list of all the channels or you can use /join #room to join a specific room.  #security and #public are two good channels when asking general questions or questions related to privacy or security.

7.       You can use the /msg “username” command to send a private message to someone or use the /query “username” command which will open a new window in both clients for private messaging.  I would advise looking up the IRC client commands for full functionality.  Also, even though I recommended disabling DCC, the servers disable the functionality altogether.

8.       Lastly, you should know that most -if not all- IRC clients cache your username for functionality.  Pidgin, takes this further by creating logs for specific channels and individual users that you chat with using private messaging by default.  Under Preferences > Logging, you should disable Log all instant messages and Log all chats.

 

 
IRC Servers

Here is a list of the Tor IRC servers (note that all servers are linked):

·         Mixie: 4eiruntyxxbgfv7o.onion (not working)

·         FTW: ftwircdwyhghzw4i.onion (working)

·         Renko: renko743grixe7ob.onion (blocked)

·         PB: jkpos24pl2r3urlw.onion (not working)

·         Nissehult: nissehqau52b5kuo.onion (working)
IRC Channels

Here is a list of some of the popular Tor IRC channels (ordered by user count at the moment of writing):

·         #boys!
	

·         #knaben

·         #pedo
	

·         #torchan

·         #cams
	

·         #public

·         #mjb
	

·         #security

·         #girls
	

·         #hackbb

 

 
Try it out – TorChat:

 

1.       Download TorChat from github as it is now the official source for the TorChat project.  At of the time writing the article, the direct link is https://github.com/prof7bit/TorChat.  Once the page is loaded, click the Downloads button over on the right.  Select the latest build as denoted by the version number.  Make sure to download the Windows executable version for Windows, Debian / Ubuntu package for Debian/Ubuntu, or the Pidgin plugin if that is what you want to do.  If the build is in Alpha, then it is not recommended.

2.       The file will be downloaded as a .zip file.  Once the file is fully downloaded, open the file and extract the contents with your favorite archive file manager.  I extracted the file to the default location in Windows which is the Downloads folder.  You can move the folder at any time as TorChat is portable.

3.       Open the TorChat folder, expand the bin folder, and run torchat.exe to start TorChat for the first time.  Once loaded, you will be provided your TorChat ID (16 characters that are comprised of letters and numbers).

4.       To add a contact, just right-click in the white space of the program and click Add Contact…  Alternatively, you can edit the buddy-list file in the bin directory.  Double-clicking a contact will initiate a chat (right-clicking and selecting Chat…, will accomplish the same thing).  You can also edit and delete a contact by Right-Clicking the user and selecting the appropriate function.  Sending a file is as simple as dragging the file into the chat window or right-clicking the username and selecting Send file…  (Windows can only send one file at a time whereas Debian/Ubuntu can send many at one time).

5.       If you are upgrading your version of TorChat than make sure to backup and copy over bin\buddy-list.txt, bin\Tor\hidden_service\hostname, and bin\Tor\hidden_service\private_key.  If you do not copy over the latter two files, you will be provided a new TorChat ID.

 

 

 
Try it out – Installing Tails:

 

1.       Download Tails from the official Tails website.  You can either download Tails via the direct link or the Torrent; which might be faster.  However, the direct link is recommended as is downloading and verifying the Tails Signature.  The link to the Tails download page is here:  Here.  Under option 2, select the latest release to start downloading.  To verify the download, use GPG to verify the Tails signature to ensure that your image has not been modified in any way

2.       Once downloaded you have a couple of options: you can burn the image to a DVD or a USB (the image is too big to fit on a CD).  If you burn the image on a DVD-R, an attacker cannot modify the contents as the disk is read only.  This also means that you cannot save anything or make any permanent changes on the disk.  DVD-RW and the USB can be written to and re-written to, meaning files and settings can be saved in persistent storage.  But, this comes at a risk as an attacker can maliciously modify Tails

3.       Installing an image to a DVD is easy, all you need is the right software.  ISO Image Burner is a good software for Windows that can do this for you.  Mac’s and computers running Ubuntu can burn the image natively.  Once your ISO burning program is open, insert the blank DVD into the disk drive and burn the Tails ISO image to the blank disk (or a DVD-RW disk)

4.       When installing the Tails ISO image onto a USB, it is recommended that you download and install Oracle VM VirtualBox, and use that virtualization program to boot into Tails.  Otherwise, you cannot create persistent storage for saving files and settings. Once you successfully boot into Tails, you can use the built in Tails USB installer to install Tails on the USB device

5.       I downloaded and installed VirtualBox from here.  Once installed, start VirtualBox and Click New to create a new VM.  Fill out the Name textbox, select Linux for the Type, and select Other Linux for the version.  Proceed past the next page and select Do not add a virtual hard drive and click Create.  At the top of the Oracle VM VirtualBox Manager click on Settings to modify the settings of the VM you just created.  Select Storage and next to Controller: IDE click on the little disk icon to add a CD/DVD device.  Click Choose disk and select the Tails ISO you just downloaded.  Under Controller: IDE you should see the image you just selected.  Selected that image and check Live CD/DVD over on the right under Attributes.  Click OK.  Start the VM to boot into Tails. 

6.       At this point you should be asked if you would like to view more options.  I am going to kill two birds with one stone and cover how to install Tails on a USB as well as what I recommend after you install the ISO on the USB.  Select Yes on this screen and create an Administrator password on the next screen.  Under Applications > Tails you can create a persistent volume as well as use the Tails USB Installer.  When creating a persistent volume, I would select all the applications you will use as well as if you are going to save any materials. 
* Tue 23 Apr 2013 12:45:02 PM JST

* Tue 23 Apr 2013 12:45:02 PM JST

* Tue 23 Apr 2013 12:45:02 PM JST
 

* Tue 23 Apr 2013 12:45:03 PM JST

* Tue 23 Apr 2013 12:45:03 PM JST

* Tue 23 Apr 2013 12:45:03 PM JST
 

* Tue 23 Apr 2013 12:45:28 PM JST

* Tue 23 Apr 2013 12:45:28 PM JST
 
* Tue 23 Apr 2013 12:45:28 PM JST
 

* Tue 23 Apr 2013 12:45:29 PM JST
 

* Tue 23 Apr 2013 12:45:29 PM JST
 


* Tue 23 Apr 2013 12:45:31 PM JST

* Tue 23 Apr 2013 12:45:31 PM JST

* Tue 23 Apr 2013 12:45:31 PM JST
 

* Tue 23 Apr 2013 12:45:31 PM JST
 

* Tue 23 Apr 2013 12:45:31 PM JST
 


* Tue 23 Apr 2013 12:45:32 PM JST
 


* Tue 23 Apr 2013 12:45:32 PM JST
 

 

* Tue 23 Apr 2013 12:45:33 PM JST
 

 

* Tue 23 Apr 2013 12:45:33 PM JST
 

 


* Tue 23 Apr 2013 12:45:34 PM JST
 

 


* Tue 23 Apr 2013 12:45:34 PM JST
 

 

 

* Tue 23 Apr 2013 12:45:35 PM JST

* Tue 23 Apr 2013 12:45:35 PM JST

* Tue 23 Apr 2013 12:45:35 PM JST


* Tue 23 Apr 2013 12:45:35 PM JST


* Tue 23 Apr 2013 12:45:35 PM JST

 

* Tue 23 Apr 2013 12:46:44 PM JST

Chapter 3 -
    - _Encryption

Encryption is the process of encoding messages (or information) in such a way that eavesdroppers or hackers cannot read it, but that authorized parties can. Using cryptography three purposes are fulfilled:  confidentiality, integrity, and non-repudiation.  Encryption has long been used by militaries and governments to facilitate secret communication. It is now commonly used in protecting information within many kinds of civilian systems.  Also, many compliance laws require encryption to be used in businesses to ensure that confidential client data be secured if the device or data is stolen.  In this section I will be talking about using encryption for confidentiality and integrity.  Non-repudiation is used, but is not normally implemented for our purposes.

Topics: 

    Encryption Dealing with Confidentiality
    Encrypting Files or the Hard Drive
    Securely Exchanging Messages or Data
    Steganography
    Authentication Factors
    Password Attacks and Account Recovery Attacks
    Creating Secure Passwords
    Hashing, Hashing Collisions, and Birthday Attacks
    Cold Boot Attacks




3.1.          Encryption Dealing with Confidentiality


Computer encryption is based on the science of cryptography, which has been used as long as humans have wanted to keep information secret.  The earliest forms of encryption where the scytale’s and the creation of cipher texts.  These forms of cryptography would rely on both parties knowing the key used or the correct cipher before the message could be delivered.  Here's an example of a typical cipher, with a grid of letters and their corresponding numbers:

	

1
	

2
	

3
	

4
	

5

1
	

A
	

B
	

C
	

D
	

E

2
	

F
	

G
	

H
	

I/J
	

K

3
	

L
	

M
	

N
	

O
	

P

4
	

Q
	

R
	

S
	

T
	

U

5
	

V
	

W
	

X
	

Y
	

Z

 

 
	

 
	

 
	

 
	

 
	

 

If a general wanted to send the message “I love ponies” he would write the series of corresponding numbers: 42 13 43 15 51 53 43 33 42 51 34.  Only the person with this cipher text would be able to reach the message.  Now obviously, to make the message more difficult to decipher, the letters inside the table would be arranged differently. Computer encryption uses algorithms to alter plain text information into a form that is unreadable.  Most people believe that AES will be a sufficient encryption standard for a long time coming: A 128-bit key, for instance, can have more than 300,000,000,000,000,000,000,000,000,000,000,000 key combinations.  Today’s AES standard is AES 256bit encryption which has 256 ^ 2 possible combinations.

As we said before, there are many reasons for encryption.  One purpose of encryption is the act of transforming data from a state that is readable to a state that cannot be read by a third party that does not have permission.  The result of the process is encrypted information (in cryptography, referred to as ciphertext).  The reverse process, i.e., to make the encrypted information readable again, is referred to as decryption (i.e., to make it unencrypted).  It is also important to know that the word encryption can implicitly refer to the decryption process.   For example, if you get an encryption program, it encrypts information as well as decrypts it.

There are two types of encryption that should be used for two different purposes:  symmetric (private key encryption) and asymmetric (public key encryption).  Symmetric encryption is used the most because it is fast, easy to use, and is the most widely needed.  You will use this form of encryption when there is only one password being used (such as TrueCrypt or another simple file encryption utility).  Asymmetric encryption on the other hand uses two keys, one to encrypt information and the other to decrypt the information.
 

3.2.          Encrypting Files or the Hard Drive


You will most commonly want to encrypt files for storage or if you want to upload them to several people securely.  There are a couple of programs that support this type of encryption and most of you probably already heard of them.  These programs I am referring to are TrueCrypt and WinRAR and they both provide symmetric file encryption.  TrueCrypt is a program that allows you to encrypt your entire hard drive or to create an encrypted container.  WinRAR on the other hand is a program that allows you to create an encrypted archive.  Remember that symmetric file encryption has only one key for the encryption and decryption process.  So you will need to share the key if you plan on sharing the files.  Note:  WinRAR can be cracked and there might exist a backdoor to your encrypted files.  This program is only meant to exchange material in the public without any individual to see what is contained.  DO NOT STORE SENSITIVE DATA ENCRYPTED WITH WINRAR ON YOUR COMPUTER.  USE TRUECRYPT.
 
Below is an example of a very simple encryption process known as the Caesar’s Cipher:



In this example, as with the fundamentals of the Caesar Cipher, all the characters are shifted, usually by 3 characters.  If he wanted to say "You will never guess this," for instance, he'd write down "BRXZLOO HYHU JXHVV WKLV" instead. As you can see, the text is also broken up into even groups in order to make the size of each word less obvious.  You can change the orders of the letters and change the number of shifts per letter to complicate the process for the attacker even further.

Creating an encrypted container with TrueCrypt will allow you to store data within the encrypted container.  When mounted, it will look as another drive on your computer.  TrueCrypt containers are secure but using them still comes with the risks of leaving your recent files lists, thumb files, and other temporary and cache data exposed.  It is recommended that you use TrueCrypt and encrypt the entire disk for maximum security.  Investigators cannot determine whether or not you have a hidden volume in your TrueCrypt container unless you tell them.  You can also use TrueCrypt to encrypt portable drives using the Traveler Disk Setup.  For information about using TrueCrypt on SSD’s, please reference SSD – Solid State Drives (section 4.10).

 
Try it out – Create TrueCrypt Container

 

1.       Start TrueCrypt

2.       Click on Volumes (menu item) in TrueCrypt

3.       Click on Create New Volume... (menu item)

4.       Select Create an encrypted file container (radio button) and click Next > (button)

5.       Select Hidden TrueCrypt volume (radio button) and click Next > (button)

6.       Select Normal mode (radio button) followed by Next > (button)

7.       Click Select File... (button)

8.       In this step you will specify the name and location of your TrueCrypt container.  If you try to save the file and get an “access denied” error, try creating the container in your Documents folder or elsewhere.   Choose the location in the Explorer window and specify the File name: (edit) in Specify Path and File Name [...].  Click Save (button) in the Specify Path and File Name dialog box

9.       Click Next > (button) followed by Next > (button) on the next page

10.   In the dropdown, I selected AES (list item) for the Encryption Algorithm.  This is the most secure and provides 256bit encryption which is a 32 character password.  You can read up on the other encryption algorithms for further explanation.  SHA-512 (list item) was my choice for the Hash Algorithm.  You can also read further on the hashing algorithms.  Click Next > (button)

11.   In this step you want to specify the size of the TrueCrypt container.  Most likely you will want to select GB (radio button) to specify you want to size to be in Gigabytes.  This is recommended if you are going to store pictures or videos.  In the textbox, enter the total size that you want to container to be and not just the size of your Outer Volume.   So, if you want your Outer Volume to be 50GB and your Inner Volume to be 25GB, you will need to enter 75 here.  Click Next > (button)

12.   Enter and re-enter your password for the Outer Volume Password.  This is the password that you will be able to reveal if you are forced to do so.  You are allowed to enter a password up to 64 characters

13.   For the Large Files step, I selected Yes, so it would format as NTFS; it is up to you though.  Click Next > (button)

14.   Once all the settings are set, move your mouse around to add security.  Click Format (button) to start formatting the volume.  Depending on the size and your hard drive speed and other factors, this process could take several hours.  Once complete click Next > (button)

15.   You will now create your Hidden Volume, or the volume that you do not want others to find.  Select Next > (button) to start the process

16.   I used the same settings as before.  Click Next > (button) until you are prompted to create the Hidden Volume Size.  This size is less than the Outer Volume Size and should leave ample room so you can store enough non-private data in your Outer Volume whilst allowing plenty of room for private material in this Hidden Volume.  Click Next > (button)

17.   Create a Hidden Volume Password. This password should be as secure as this container will hold your private data.  The maximum possible length for a password in this step is also 64 characters.  This is the password that you do not want to give out under any circumstances.  The government cannot determine if a hidden container exists therefore they will not know that this password even exists.  Do not fall victim to social engineering attacks whereas someone tricks you into giving them the password.

18.   Select Next > (button), choose whether Large Files are going to be used in the next window, and click Format (button) to finalize the process (again, make sure to move your mouse around on that step for better security)

19.   Open TrueCrypt again and mount the Outer container.  To start, I would mount the Outer Container so we can add some decoy data in there in case you are forced to give the password.  To do this, just select the drive letter, click Select File… (button), select the TrueCrypt file you created in Step 8, and press Mount.  Simply, you will enter the Outer Volume password or the Hidden Volume password depending on which volume you want to mount.  Make sure when moving decoy data over that it is completely legal and that it CANNOT be confused for something illegal.  Also, make sure it would be something you would truly want hidden.  Porn, data backups, and etc. are good ideas.  To move the files over to either of these volumes you will simply open Windows Explorer and navigate to the drive letter.

 

 
Try it out – WinRAR:

 

1.       If you are in the WinRAR program window, select the file(s) and click the Add button.  This is denoted as an icon of a stack of books with binding around them.  Alternatively, you can right-click the file(s) in the explorer window and click Add to archive…

2.       The Archive name and parameters page will open.  Please note the size of the file you are about to upload and the size limit that you are allowed to upload on each site.

3.       In the Split to volumes, bytes input field under the General tab, enter the appropriate size of each archive.  For example:  If you have a file that is 200MB (or 204800KB) and the file upload size limit is 50MB, for the Split to volumes, bytes input field, you will enter 50MB.  In this case four files will be created, each 50MB a piece.

4.       Select the Advanced tab and hit the Set Password… button.  Enter the password in the first field and re-enter the password for verification.  Remember this password; if it is lost the file is NOT recoverable.  Most people also select Encrypt file names for extra security.

 

 

 
3.3.          Securely Exchanging Messages or Data


The problem with symmetric encryption is that it only uses one password to encrypt and decrypt data.  But what if you wanted to send a message to somebody?  Somehow, you will need to share the key while reducing the risk of anyone being able to intercept the password and use it to decrypt the data.  Asymmetric encryption tackles this problem by implementing a secure key exchange.  With this form of encryption there are two keys used, a public key and a private key.  The public key is given to the world and is used to encrypt data whereas the private key is used to decrypt the data and to verify the data being received is legitimate.  A popular program to securely share data and messages between two people (using asymmetric encryption) is PGP or GPG (GPG being a free replacement for PGP).

Try it out - GPG:

 

For Windows (since this is a Windows guide), I recommend downloading and installing Gpg4win.  If you are using Linux you can simply use gpg and stick with command line. Here is a guide from their website on how to install the program: http://gpg4win.de/handbuecher/novices_5.html.  When Gpg4win is installed, follow these steps to create your key pair for encryption/decryption (note:  the following instructions are for creating a key size of 4096 which I recommend.  You can create a 2048bit encryption key using the program Kleopatra):

 

1.       Start the command prompt:  Start > Run > cmd > OK *Windows Vista/7, type cmd in Search Programs and Features.  A black box should pop up

2.       Type in gpg --gen-key

3.       Enter 1 and press Enter

4.       The default key is 2048, I recommend 4096

5.       Set the value to 0 here.  If you set the key to expire, you will need to go through this same process of creating and redistributing your public keys.  When is asks for a confirmation, enter y

6.       Your real name will most likely be your screenname.  I will enter missionman here

7.       For this step, input an email address.  For this I entered my tormail email address.

8.       Enter a comment if you wish, this step is optional

9.       If you wish to change something, now is the time to do it.  Everything is correct and I am done so I will enter o

10.   At this point you should see a popup prompting you to create a ‘secret key.’  This is also referred to as a ‘private key’.  Make sure when creating this password that it conforms to strong password guidelines

11.   Re-enter the password to confirm you entered it correctly

12.   You will now want to type a lot of random data in a text program of your choice or move your mouse around the screen so the key can be generated until the key generation is complete

13.   If there are no errors, then you have successfully created your public and private key!

14.   Now, to give people your Public key (which they use to encrypt data they want to send to you) you will type in gpg --export -a ‘username’ > c:\public.key.  For example I typed in gpg --export -a missionman > c:\missionman.key 
Encrypting and decrypting a message/file:

1.       First, find the location of your file or save a message to a text document

2.       The command to encrypt a file is gpg -e --output "output file" --local-user "your username" -r "recipient" --armor --sign "filename".  For example, I typed in gpg -e --output C:\encrypted.txt --local-user missionman -r testuser --armor --sign clear.txt.  --detach-sig will create a separate signature file

3.       To decrypt a file you will simply enter gpg-d --local-user “username” -o “output file” “input file”.  For example, I entered gpg-d --local-user missionman –o  C:\decrypted.txt  C:\encrypted.txt. 

 

Here is an example of a GPG encrypted message:

 

-----BEGIN PGP PUBLIC KEY BLOCK-----

Version: GnuPG v2.0.17 (MingW32)

 

mQINBFAisdkBEADQeOmbSJ5acqwBAxAEKicWg50sPSR0oO0roRsrSziDpnJf+nxC

Y5uUDPOCs/KDHeSv1XIvK0yv5rpesh7lZeIESpJSyBG9IlEl8vQhmt+Bohy53xWs

r5NJIktmeU+whCil8X9SYndc63UrdOoEVlKLApLDrskR91NDbx/YAv/YeNYQO4iB

jP38E0bRliO5yxHENZLdP0PAhksBnC/rYXOiilBHqUFMKZJzaH1flTBjpiawojb1

9jOQPcIQ8eNC3EKl0LkaZs9dzlmF69ore8A3swck+bHnII9dhzmJS09iMc1KQDHb

xjeF3XzvaQzwq6TtZcRyzEpcHtnIBe2w6LNgSEzuEIPKHVLKqDWfzbuAL6/+DPGf

 

-----END PGP PUBLIC KEY BLOCK-----


When you give someone the message – or key or signature – you want to copy all the text including everything you see in the example above.
 

Note:  --armor specifies the output is easily copied when you copy the text versus sending the file and   --sign attaches a digital signature so the receiver knows it is coming from you.  

 

Note:  If you want people to send you messages or files, you will give out your PUBLIC key.  NEVER GIVE OUT YOUR PRIVATE KEY, EVER!  Also, make sure that nobody steals your private key; keep it on an encrypted drive.  You can exchange public keys or data either via in a file, or plain text in a forum.  Here is a good site with some of the common commands: http://irtfweb.ifa.hawaii.edu/~lockhart/gpg/gpg-cs.html

 

 
3.4.          Steganography


Another good form of encryption is steganography which is the act of hiding data within text, graphic files, or audio files.  The purpose of this method is so that nobody will know that there is a private message inside the medium (photo, document, etc.) because it is hidden.  Let’s say Bob wants to send private messages to Steve over a public forum read by numerous people.    Bob grabs a picture, puts a hidden message inside and uploads it to the website.  Nobody knows the message is there except for Steve, which is able to save the picture to his computer and read the message hidden inside.  Forensic examiners will need to be looking at each individual file to determine if steganography was used.  So for example if you have 1000 pictures, they will need to go through each and every one to determine which ones have steganography and which ones do not.

Using steganography is as easy as downloading the right software from the internet. I started out by downloading one of the more popular freeware tools out now: F5, then moved to a tool called SecurEngine, which hides text files within larger text files, and lastly a tool that hides files in MP3s called MP3Stego. I also tested one commercial steganography product, Steganos Suite.  These tools may contain backdoors as with all encryption programs therefor should not be used with data you are trying to hide from any party that may hold the decryption key.

 
3.5.          Authentication Factors


There are three common authentication factors in the security field that people refer to often.  This is something you know, something you have, and something you are.  A username and password falls into the something you know category.  This is because you know in your mind what your username and password is.  Something you have is a physical device such as a smart card or token.  Finally, something you are refers to a fingerprint, an iris scan, or another physical feature.

When setting up TrueCrypt most people only use a password, which is adequate for most scenarios.  Another feature of TrueCrypt allows for multifactor authentication, which is as it implies, when the user uses two or more authentication factors.  Multifactor authentication relies on both factors when trying to decrypt the file or get into your system and is recommended to provide the best security.  The link provided will elaborate more on key files, security tokens, and smart cards when using TrueCrypt:  Click here

 
3.6.          Password Attacks and Account Recovery Attacks


There are several types of password attacks that people perform when trying to decrypt information.  These are known as dictionary attacks, brute force attacks, and random guess attacks.  Creating complex passwords will help prevent against dictionary attacks.  Creating long passwords will help prevent against brute force attacks.  And creating passwords that do not include your username or any other identifiable information will help against random guess attacks.  This is why your password should be long, complex, and should not include any identifiable information.

Another common attack that people do not usually think of is account recovery attacks.  This is when someone is trying to login into your account by attempting to reset your password by using your account recovery questions.  For this reason you should make sure when creating security questions and answers that they are not easily guessed (or found).  A good recommendation is to make the answers as complicated as the passwords, but still can be easily remembered.


The Sarah Palin email hack occurred on September 16, 2008, during the 2008 United States presidential election campaign when the Yahoo! personal email account of vice presidential candidate Sarah Palin was subjected to unauthorized access. The hacker, David Kernell, had obtained access to Palin's account by looking up biographical details such as her high school and birthdate and using Yahoo!'s account recovery for forgotten passwords.

 
3.7.          Creating Secure Passwords


The problem with passwords is they are usually too easy to crack or they are too hard for the users to remember.  Therefore, both of these problems should be considered when creating a new password. Start by creating a password that is at least 16 characters. Use as many different types of characters as possible, including: lowercase letters, uppercase letters, numbers, and symbols. Never reuse a previous password and never use the same password for more than one account. Don’t use password-storage tools, whether software or hardware. Make sure that your password does not include anything identifiable such as: names, usernames, pet names, or words in a dictionary.  Lastly, make sure that the password is not too hard for you to remember so you don’t forget the password or have to write it down or save it.  Here is an example of a site that can create a secure password:  click here.

 
3.8.          Hashing, Hashing Collisions, and Birthday Attacks


When people refer to hashing, they are referring to a type of encryption.  Hashing is the process of creating an encrypted output that cannot be decrypted (it performs a one-way encryption) and is used to ensure that a message or file was not modified from the original copy.  Hashing is also commonly used to help authenticate somebody.  For example, many websites store a hashed copy of your password instead of the password in the clear. There are several types of hashing algorithms and the newer versions are better than the outdated versions for security purposes.  SHA256 is the newest version and is recommended as of right now when you are checking file or message hashes.

Using asymmetric encryption provides integrity as well as the already explained confidentiality.  When you successfully decrypt a message that another user sent you, you have verified its integrity.  Another way to ensure integrity is to create the hash of a file or a message and allow people to check the hash they generate against the hash you gave them.  For example:  let’s say Bob uploads a file for Steve.  Bob uploads a file and generates a hash (let’s say a value of 456) so Steve can make sure that when he downloads the file, it was not changed along the way.  After downloading and saving the file, Steve also generates a hash of the saved file.  If Steve generates the same hash, the file was not altered.  But if Steve generates a different value (let’s say 334), than the file has been changed.  Personally, I use HashMyFiles because it is easy to use and is a standalone program.

 
Try it out – Hashing

 

1.       Downloading and save this file: http://ocrlwkklxt3ud64u.onion/files/1343933815.txt.  If the file opens up in your browser, then save everything to a text file and save as ‘hash.txt’

2.       Download the program HashMyFiles and start it when that is complete

3.       Click File > Add Files and select ‘hash.txt’

4.       Record the hash of the file (press F7 on your keyboard) * I used MD5 for this test

5.      Compare your hash to the hash I generated before uploading the file (83a814a08b5edfa57c003415224f8b46)

 

 

Another good method of ensuring that a file is actually sent from someone who claims they sent it is if they digitally sign a message using their private key.  What you need to know is that you can digitally sign a message or file without actually sending the message or file.  This is helpful if you want to share a file in which everybody knows what the password is whilst allowing them to confirm that it came from you.

 
Try it out – Digital Signatures

 

1.       I am assuming that have already setup GPG and have created your Private/Public key pair

2.       Start the command prompt:  Start > Run > cmd > OK *Windows Vista/7, type cmd in Search Programs and Features.  A black box should pop up

3.       The command to create a digital signature is gpg --output “output file” --local-user “user name” --detach-sign “input file”.  For example, I typed in gpg --output final.sig --local-user missionman --detach-sign test.txt 

4.       To verify the digital signature, type gpg --verify “signature” “file name”.  For example, I typed in gpg --verify final.sig c:\test.txt

 


While talking about hashing, I should mention Hashing Collisions.  Hashing Collisions occur when two distinctly different messages produce the same hash result.  Birthday attacks attempt to exploit this vulnerability by relying on the likelihood of the collisions occurred between the random attack attempts and the number of permutations.  “As an example, consider the scenario in which a teacher with a class of 30 students asks for everybody's birthday, to determine whether any two students have the same birthday. Intuitively, this chance may seem small. If the teacher picked a specific day (say September 16), then the chance that at least one student was born on that specific day is 1 - (364/365)^{30}, about 7.9%. However, the probability that at least one student has the same birthday as any other student is around 70.”

 

 
3.9.          Cold Boot Attacks


In cryptography, a cold boot attack (or to a lesser extent, a platform reset attack) is a type of side channel attack in which an attacker with physical access to a computer is able to retrieve encryption keys from a running operating system after using a cold reboot to restart the machine.  The attack relies on the data remanence property of DRAM and SRAM to retrieve memory contents which remain readable in the seconds to minutes after power has been removed.  Basically, when a computer is restarted, the encryption keys (passwords) might still exist in RAM and may be recoverable to the extent that they can be used to decrypt your device.

There are a few ways to mitigate this risk.  The best method is to make sure to dismount the drive before ending the program or shutting the computer down.  Most software programs will erase the key from memory after you perform this action.  This method is the best way to prevent cold boot attacks.  Shutting the computer down cleanly should also ensure that the key is erased from memory.  Another mitigation technique is with using a security token or smart card.  This can be fooled though if the attacker grabs the key and has the token/smart card in hand. 

Note: Many forensic investigators carry a can of compressed air with them to a crime scene to freeze the RAM stick for further analysis.
* Tue 23 Apr 2013 12:47:13 PM JST

* Tue 23 Apr 2013 12:47:13 PM JST

* Tue 23 Apr 2013 12:47:13 PM JST
 

* Tue 23 Apr 2013 12:47:47 PM JST

* Tue 23 Apr 2013 12:47:47 PM JST

* Tue 23 Apr 2013 12:47:47 PM JST
 

* Tue 23 Apr 2013 12:47:47 PM JST
 

* Tue 23 Apr 2013 12:47:47 PM JST
 


* Tue 23 Apr 2013 12:47:48 PM JST
 


* Tue 23 Apr 2013 12:47:48 PM JST
 

 

* Tue 23 Apr 2013 12:47:49 PM JST

* Tue 23 Apr 2013 12:47:49 PM JST

* Tue 23 Apr 2013 12:47:49 PM JST


* Tue 23 Apr 2013 12:47:50 PM JST


* Tue 23 Apr 2013 12:47:50 PM JST

 

* Tue 23 Apr 2013 12:48:01 PM JST

* Tue 23 Apr 2013 12:48:01 PM JST

* Tue 23 Apr 2013 12:48:01 PM JST


* Tue 23 Apr 2013 12:48:01 PM JST


* Tue 23 Apr 2013 12:48:01 PM JST



* Tue 23 Apr 2013 12:48:01 PM JST



* Tue 23 Apr 2013 12:48:01 PM JST


 

* Tue 23 Apr 2013 12:48:02 PM JST


 

* Tue 23 Apr 2013 12:48:02 PM JST


 


* Tue 23 Apr 2013 12:48:02 PM JST


 


* Tue 23 Apr 2013 12:48:02 PM JST


 

 

* Tue 23 Apr 2013 12:48:02 PM JST


 

 

* Tue 23 Apr 2013 12:48:02 PM JST


 

 


* Tue 23 Apr 2013 12:48:11 PM JST

* Tue 23 Apr 2013 12:48:11 PM JST

* Tue 23 Apr 2013 12:48:12 PM JST


* Tue 23 Apr 2013 12:48:12 PM JST


* Tue 23 Apr 2013 12:48:12 PM JST

 

* Tue 23 Apr 2013 12:48:15 PM JST

* Tue 23 Apr 2013 12:48:15 PM JST

* Tue 23 Apr 2013 12:48:15 PM JST


* Tue 23 Apr 2013 12:48:39 PM JST

* Tue 23 Apr 2013 12:48:39 PM JST

* Tue 23 Apr 2013 12:48:39 PM JST


* Tue 23 Apr 2013 12:48:40 PM JST


* Tue 23 Apr 2013 12:48:40 PM JST



* Tue 23 Apr 2013 12:48:41 PM JST

* Tue 23 Apr 2013 12:48:42 PM JST

* Tue 23 Apr 2013 12:48:42 PM JST


* Tue 23 Apr 2013 12:48:53 PM JST

* Tue 23 Apr 2013 12:48:53 PM JST

* Tue 23 Apr 2013 12:48:53 PM JST


* Tue 23 Apr 2013 12:48:53 PM JST


* Tue 23 Apr 2013 12:48:53 PM JST

 

* Tue 23 Apr 2013 12:49:05 PM JST

* Tue 23 Apr 2013 12:49:05 PM JST

* Tue 23 Apr 2013 12:49:05 PM JST


* Tue 23 Apr 2013 12:49:28 PM JST

* Tue 23 Apr 2013 12:49:28 PM JST

* Tue 23 Apr 2013 12:49:28 PM JST


* Tue 23 Apr 2013 12:49:29 PM JST


* Tue 23 Apr 2013 12:49:29 PM JST

 

* Tue 23 Apr 2013 12:49:29 PM JST

 

* Tue 23 Apr 2013 12:49:29 PM JST

 


* Tue 23 Apr 2013 12:49:30 PM JST

 


* Tue 23 Apr 2013 12:49:30 PM JST

 

 

* Tue 23 Apr 2013 12:49:43 PM JST

* Tue 23 Apr 2013 12:49:44 PM JST

* Tue 23 Apr 2013 12:49:44 PM JST


* Tue 23 Apr 2013 12:49:44 PM JST


* Tue 23 Apr 2013 12:49:44 PM JST

 

* Tue 23 Apr 2013 12:49:44 PM JST

 

* Tue 23 Apr 2013 12:49:44 PM JST

 


* Tue 23 Apr 2013 12:49:47 PM JST

* Tue 23 Apr 2013 12:49:47 PM JST

* Tue 23 Apr 2013 12:49:48 PM JST


* Tue 23 Apr 2013 12:49:48 PM JST

* Tue 23 Apr 2013 12:49:49 PM JST

* Tue 23 Apr 2013 12:49:49 PM JST
 

* Tue 23 Apr 2013 12:49:49 PM JST
 

* Tue 23 Apr 2013 12:49:49 PM JST
 


* Tue 23 Apr 2013 12:50:24 PM JST

Chapter 4 -
    - _Data

This section will talk about data in general:  how it gets stored and what happens when it is deleted.  Furthermore, we will take about recent file lists and data caching.  Knowing how Windows and other applications handle these files will help eliminate the risks associated with evidence left over after your session.  You will learn how to find and remove this data completely and securely from your computer.  In some instances, you will also learn how to prevent these risks from happening altogether.


Topics: 

    Deleted Data
    Deleting Data Securely
    File Slack
    Windows Swap Files, ReadyBoost, Temporary Internet Files and Browser Cache
    Temporary Application Files and Recent Files Lists
    Event Logs
    Printers, Print Jobs, and Copiers
    Cameras, Pictures, and Metadata
    USB Information
    SSD – Solid State Drive
    Where to Hide Your Data



4.1            Deleted Data

A common misconception that computer users have is, when you delete a file, it is completely removed from the hard disk.  However, you should know that highly sensitive files such as pictures, passwords, chat logs, and so forth still remain on the hard disk.  Even after they are deleted from your recycle bin, they are still located on the hard drive and can be retrieved with the right software. Take for example when you use WinRAR to extract the file that someone sent you.  The program extracts the data to a temporary file before it reaches its destination on your hard disk; this may lead to a data leak.

Any time that a file is deleted from a hard drive, it is not erased. What are erased are the bits of information that points to the location of the file on the hard drive. The operating system uses these pointers to build the directory tree structure (the file allocation table), which consists of the pointers for every other file on the hard drive. When the pointers are erased, the file essentially becomes invisible to the operating system. The file still exists; the operating system just doesn't know how to find it.

Note:  You can change the location where WinRAR extracts the temporary data to.  Navigate to Options > Settings > Paths.  You can change the path under Folder for temporary files.

Shadow data is the fringe data that remains on the physical track of storage media after it is deleted, sweeped, or scrubbed.  A mechanical device called a head is used to write the data, and it is stored electronically in magnetic patterns of ones and zeros. The patterns are in the form of sectors which are written consecutively in concentric rings called tracks. However, head alignment is just a little bit different each time an attempt is made to erase data, and data remnants sometimes bleed over the tracks. This is the reason why government agencies require multiple scrubs or burning, because there is no guarantee of complete elimination of fringe, or shadow, data.
The only way that you can permanently delete this data is to override it with special software or wait for the operating system to overwrite the data.  There are files on the hard disk that do not have any pointers in the file allocation table so it will eventually be overridden with something new.  Even files that are fragmented or are partially written over are recoverable and can be used against you. Special software will overwrite these files securely and immediately.  One such recommended software that securely cleans the white space is CCleaner.  As a word of note, people suggest that's simply defragging a hard drive will overwrite these pointers; this is not true.  Drives formatted using NTFS are especially not affected using this method.  This is because of the way NTFS stores data; it essentially makes defragging the hard drive useless.


Try it out – CCleaner

 

1.       Download and install CCleaner to your machine. Make sure when you download CCleaner from the internet, as with all programs, you download from the manufacturer’s website only. The link has been provided for you: http://www.piriform.com/ccleaner/download/standard

2.       Open CCleaner press Tools on the left

3.       Select Drive Wiper/p>

4.       Select Free Space Only in the drop-down box next to Wipe

 

 

 
4.2            Deleting Data Securely


As mentioned before, when you delete data, it is not actually deleted and can be easily recovered.  To prevent data from being recovered you must secure erase (or shred) the data.  What special programs do to securely erase contents from a computer is they enumerate through each bit of data and replace it with a random bit.  The shredding method I recommend is 7 passes.  This process makes the bits unknown as recovery of this data difficult, if not impossible.  This can be done with file eraser programs, or it can be done to the entire drive with bootable software.  DBAN is recommended if you are trying to erase your entire drive.  Note however, DBAN does not erase bad sectors or HPA/DCO areas.  Some programs such as Blancco implement HPA/DCO wiping by default, other tools could allow the user to choose whether or not to wipe HPA/DCO while other tools are not able to wipe HPA/DCO at all.

HPA stands for Host Protected Area and is a section of the hard drive that is hidden for the operating system and the user.  The HPA is often used by manufacturers to hide a maintenance and recovery system for the computer.  For this reason, the HPA is not a big concern, but you can securely remove data here nonetheless.  A DCO is a Device Configuration Overlay and is another hidden area of today’s hard drives.  Similar to the HPA, the DCOs can be securely erased in such the same way.

While recovery of information wiped out in this manner is far more difficult, and in many cases impossible, some recovery techniques exist that specialists can employ to retrieve some of the data. Factors such as the size of the hard drive, the accuracy of the mechanical system in the drive, the power with which the information was recorded, and even the length of time the information was left on the drive prior to wiping all will have an effect on the probabilities for recovery.

Another method is to physically destroy the hard drive to a state that is irreparable.  The best method for this is to open the hard disk and grind the platters to obliterate all data.  Another method for hard drives that use disks is to use an industrial strength magnet to remove the data.  Optical disks (CD’s, DVD’s, etc.) can be shredded if they are not writable.  Also, optical disks can be destroyed be cooking them and is the best method for destroying data on optical media.  Cooking them however is not recommended for practicing or everyday use as they release a toxic fume.


4.3            File Slack


To understand file slack, one first needs to understand how disks are organized at the lowest level. As can be seen in the diagram below, disks are subdivided into a set of tracks. These tracks are further subdivided into a set of sectors and collection of sectors form together to make a cluster.  If you write a 1 KB file that has a cluster size of 4 KB, the last 3 KB is wasted.  This unused space between the logical end-of-file and the physical end-of-file is known as slack space.

The perhaps somewhat unexpected consequence from this is that the file slack contains whatever data was on the disk before the cluster was allocated, such as data from previously deleted files. Using file slack, it would be possible not only to recover previously discarded (and potentially sensitive information) information, but also to effectively hide data. The ability to hide data arises because the operating system does not modify data within a cluster once it has been allocated. This means that any data that is stored in the slack is safe (provided the files size does not change).


 
4.4            Where to Hide Your Data

 

Location
	

Information

HPA
	

Host Protected Area is an area of a hard drive that is not normally visible to an operating system and is protected from user activity.  To hide data there, you will need to write a program, or find a program, to write information there.

MBR
	

The Master Boot Record only requires a single sector thereby leaving 62 open sectors for hiding data

Partition slack
	

File systems store data in block, which are made of sectors.  If the total number of sectors in a partition is not a multiple of the block size, there will be some sectors at the end of the partition that cannot be accessed by the operating system using any typical means.

Volume slack
	

If the partitions on a hard drive do not use up all of the available space, the remaining area cannot be accessed by the operating system by conventional means (e.g., through Windows Explorer). This wasted space is called volume. It is possible to create two or more partitions, put some data into them, and then delete one of the partitions. Since deleting the partition does not actually delete the data, that data is now hidden.

File slack
	

This is the unused space between the end-of-file marker and the end of the hard drive cluster in which the file is stored.

Unallocated space
	

Any space in a partition not currently allocated to a particular cannot be accessed by the operating system. Until that space has been allocated to a file, it could contain hidden data.

Boot Sector in non-bootable partitions
	

Every partition contains a boot sector, even if that partition is not bootable. The boot sectors in non-bootable partitions are available to hide data.

Good blocks marked as bad
	

It is possible to manipulate the file system metadata that identifies bad blocks (e.g. the File Allocation Table in a FAT file system or $BadClus in NTFS) so that usable blocks are marked as bad and therefore will no longer be accessed by the operating system. Such metadata will produce blocks that can store hidden data.


4.5            Windows Swap Files, ReadyBoost, Temporary Internet Files and Browser Cache


A swap file allows an operating system to use hard disk space to simulate extra memory. When the system runs low on memory, it swaps a section of RAM that an idle program is using onto the hard disk to free up memory for other programs. Then when you go back to the swapped out program, it changes places with another program in RAM. This feature ensures that Windows is usable when memory runs out.  Even though this feature is helpful, sensitive information might be contained within the swap space that could incriminate you.

Let’s say you download sensitive material and after you were done with it, you delete it securely.  If you ran out of memory (RAM) the temporary data might have been saved to swap space thereby rendering your method of removing the file useless.   The best way to attack this problem is to disable paging altogether while viewing sensitive information.  If you are using applications that use large amounts of memory, you can turn paging back on during your session.

Try it out – Disable paging

 

1.       Open the Start Menu and go to Control Panel

2.       Click on the System icon

3.       Select the Advanced tab

4.       Under Performance, click Settings

5.       Go to Advanced

6.       Under Virtual Memory, click Change

7.       Select No Paging File and then click Set

8.       Click OK in all the menus

9.       Restart

10.       To enable paging again, simply select Automatically manage paging file size for all drives

 


ReadyBoost is another caching feature introduced in Windows Vista and was continued with Windows 7.  It works by using flash memory, a USB flash drive, SD card, CompactFlash or any kind of portable flash mass storage system as a cache.  Data that is written to the removable drive is encrypted using AES-128bit encryption before written to the drive.  This means that an examiner who recovers the drive with the ReadyBoost information will find it difficult to decipher this data.

Another way that Windows operates under the surface is when creating temporary internet files.  Temporary Internet Files is a folder on Microsoft Windows which holds browser caches. The directory is used by Internet Explorer and other web browsers to cache pages and other multimedia content, such as video and audio files, from websites visited by the user. This allows such websites to load more quickly the next time they are visited. Not only web browsers access the directory to read or write, but also Windows Explorer and Windows Desktop Search.

You can see how this is a problem if you ever want to download (or view) pictures or files that contain sensitive material.  Furthermore, other applications might use temporary files when handling content.  For example, when I talked about WinRAR earlier, I explained that when you unpack data from an archive, the program creates a temporary file on your file system before it is moved to its destination.  The only way around this (excluding internet cache) is to periodically wipe slack data as stated before.  When dealing with internet data, you should be concerned with deleting internet cache and cookies. 

Try it out – Delete internet cache

 

1.       Start Firefox

2.       Click Tools (if you do not see the menu-bar press the Alt key on your keyboard. The menu-bar should appear.)

3.       Click Options

4.       Click Privacy

5.       Select TorBrowser will: Use custom settings for history and check Clear history when TorBrowser closes

 

 

 
4.6            Temporary Application Files and Recent Files Lists


Every time you open up a file from Windows Explorer or the Open/Save dialog box, the name of the file is recorded by Windows.   This feature was introduced into Windows and other applications to make those applications more user friendly by allowing easy access to those recently used files.  Such the same, some applications create cache that is stored on your computer so the application can run faster the next time it is loaded or a specific project is being worked on.

Recent file lists and application caching does make the experience more friendly, but it also added security risks.  If for example, someone took a video and loaded it into a video editing software.  The software might take pieces of the video and save it to your hard drive for fast access.  The same goes for viewing videos/images that are sensitive by nature.  Whoever is looking at the recent files list for your computer, will know what the names of files are as well as possibly knowing the location of those files.

First we are going to talk about what is known as thumbnail caching.  Thumbnails are the little pictures that are loaded for every file in Windows Explorer as a little “preview” of sorts.  A thumbnail cache is used to store thumbnail images for Windows Explorer's thumbnail view. This speeds up the display of thumbnails as these smaller images do not need to be recalculated every time the user views the folder.  You can see where this is a problem when you open a folder containing sensitive pictures or videos.  Thumbnail caches are stored in thumbs.db files and the locations will vary depending on the Operating System.  In Windows XP, the thumbs.db files will be stored in every folder. 

Windows 7 and Vista saves all the thumbnails in a central location.  The cache is stored at  %userprofile%\AppData\Local\Microsoft\Windows\Explorer as a number of files with the label thumbcache_xxx.db (numbered by size); as well as an index used to find thumbnails in each database.  This makes it easier for us to locate and remove the caches of these thumbnails.  You can use CCleaner to remove the existing cache.  I recommend using this page to enable/disable thumbnail caching.  Click here

Note: Jump Lists appear on the Start menu as well as on the Taskbar when you right-click on an icon.  You can use it to perform specific actions, but for security purposes, it can record files that were recently opened.

 


Another feature of Windows and several applications is recent files lists.  There are several locations where these lists can appear, yet there are only two ways they are saved:  the registry or as a file.   Windows XP saves file names in the registry and a centralized location in Windows Explorer whereas Windows 7 introduces yet another list known as a “jump list” which can also be cleaned by using CCleaner.


Try it out – Disable jump lists

 

1.       Right-click the Start Menu and click Properties

2.       Expand the Start Menu tab

3.       Uncheck Store and display recently opened items in the Start menu and the taskbar

4.       Click OK

 

CCleaner erases most all (if not all) of the recent file lists for Windows as well as for a few other applications.  Listed below are common locations where these recent file lists and application caches can be found at (I would look into winapp2.ini for more locations which is an add-on for CCleaner):

 

Registry (all are in HKEY_CURRENT_USER):

    (Windows) Software\Microsoft\ Windows\CurrentVersion\Explorer\RecentDocs
    (Windows) Software\Microsoft\ Windows\CurrentVersion\Explorer\ComDlg32\OpenSaveMRU
    (Windows) Software\Microsoft\ Windows\CurrentVersion\Explorer\RunMRU
    (Windows) Software\Microsoft\MediaPlayer\Player
    (Windows) Software\Microsoft\ Internet Explorer\TypedURLs
    (Media Player Classic) Software\Gabest\Media PlayerClassic\Recent File List
    (Media Player Classic) Software\Gabest\Media Player Classic\Settingser Classic\Settings

Files:

    (Recent file list) %appdata%\Microsoft\Windows\Recent
    (Jump list) C:\Users\<user name>\AppData\Roaming\Microsoft\Windows\Recent\AutomaticDestinations
    (Temp data – Vista/7) C:\Users\<user name>\AppData\Local\Temp
    (Temp data – XP) C:\Documents and Settings\<user name>\Local Settings\temp

 

Note: Other applications include PrivaZer for Windows and Bleachbit for Linux.

 
Try it out – Setting up CCleaner

 

1.       Download and install CCleaner to your machine. Make sure when you download CCleaner from the internet, as with all programs, you download from the manufacturer’s website only. The link has been provided for you: http://www.piriform.com/ccleaner/download/standard

2.       Once the program is open click the Options button on the left hand side of the window

3.       Next, click on Settings

4.       Make sure that Secure file deletion (Slower) is checked, Complex Overwrite (7 passes) is selected in the dropdown box and Wipe MFT Free Space is checked. Very Complex Overwrite can be selected instead of Complex Overwrite. The Complex Overwrite is the minimum you should choose

5.       Click Cleaner on the left

6.       Make sure they all the items are checked under Windows Explorer



Another thing I do is set CCleaner to perform a clean whenever I log into the machine and every hour thereafter.  Cleaning your computer automatically will help with managing this program as you will not have to remember to manually run the program every so often.  One drawback with this method however is if an application is using temporary data that is erased by CCleaner, the application might perform incorrectly or stop working altogether. 

Try it out – Setting up CCleaner to automatically run (Windows Vista/7)

 

1.       Start CCleaner and select Options on the left

2.       Check Save all settings to INI file under the Advanced tab

3.       Open the Start Menu and enter Task Scheduler into the search box

4.       Click on the Action header in the menu bar and select Create Basic Task

5.       Follow the steps of the wizard to create the task. In the first window, name the task and give it a description to help you remember what it is later

6.       On the next page, select how often you want this to run. I checked the When I log on check box

7.       Select the option labeled Start a program on the next page

8.       Hit Browse and navigate to the directory you installed CCleaner to. Add /AUTO to the text field labeled Add arguments

9.       Click Finish

 


Finally, for those of you who switched to Windows 8 should know about the app data.  Windows 8 for starters has made significant strides over Windows 7 in respects to the interface.  They have added the Metro interface which hosts a plethora of apps that can possibly leak important data.  Two such apps are the Windows Photos and Windows Video.  When viewing a photo or video, you can immediately see that the photo or video cap is cached as they are still apparent even after the material is deleted.  Obviously, you can see the glaring issue with this when it concerns security.

 

I have not too much research on the matter, so I am going to be brief.  For starters, all your apps are located in your appdata folder.  Specifically, the folder paths are as follows (per user settings):

·         Location of all your apps: C:\Users\”Username”\AppData\Local\Packages.

·         Windows Photos: C:\Users\”Username”\AppData\Local\Packages\microsoft.windowsphotos_8wekyb3d8bbwe\ LocalState

When the app is closed the cached images no longer appear on the Metro interface.  Furthermore, the cached images don’t appear when you open the app again.  I did some more investigating into Windows Photos and notice that several files get increasingly larger after I view images in the Windows Photos app – even after the app is closed.  Specifically, those files are the Microsoft.WindowsLive.ModernPhotos.etl, Microsoft.WindowsLive.ModernPhotosLast.etl, and ModernPhoto.edb.  Other files exist that show the last 5 images that were cycled through on the Windows Photos Metro app.  These files are LargeTile1(through 5) and SmallTile1(through 5).  The latter files should not be an issue unless they contained sensitive images.

 

I cannot read what is actually contained within the files themselves, but I can be reasonably sure that with everything Windows, image previews are being cached and stored to limit I/O usage and speed up the loading process.  Saying this, it is recommended that you delete these files securely if you accidently – or purposely – open pictures using the
Windows Pictures app (and it is going to happen, trust me). To do this you should close the Pictures app (from the gesture on the left side or the task manager) and securely erase those files using a program of choice. Windows Pictures app (and it is going to happen, trust me).  To do this you should close the Pictures app (from the gesture on the left side or the task manager) and securely erase those files using a program of choice.

To do this you should close the Pictures app (from the gesture on the left side or the task manager) and securely erase those files using a program of choice. When setting up a user profile in Windows 8, if you gave your actual name when creating the Hotmail profile you used when logging into Windows 8, that name will be automatically embedded as metadata in a variety of documents.  So make sure that you have a metadata cleaner if you plan on uploading anything sensitive.  If you use Bing which is the default search provider and included pre-installed as an app, you should know that Bing creates a separate web history of its own and stored the data over the internet.  So make sure that anything sensitive gets purged.  People also expressed concerns with ReFS, which is not used on Windows 8 devices moreso is it used with Windows Server 2012 (Windows Server 8).  Also, with the advent of Office 2013, the default location that the documents will be saved is Windows Skydrive; so you can see how that might be a security concern if you save something sensitive without looking.  Concerning content saved to Windows Skydrive, here is part of Microsoft’s TOA:

 

You will not upload, post, transmit, transfer, distribute, or facilitate distribution of any content (including text, images, sound, video, data, information or software) or otherwise use the service in a way that:

 

1.       depicts nudity of any sort, including full or partial human nudity, or nudity in nonhuman forms such as cartoons, fantasy art or manga.

2.       incites, advocates, or expresses pornography, obscenity, vulgarity, profanity, hatred, bigotry, racism, or gratuitous violence.

So, they scan your documents (and pictures) for anything that violates its TOA, and if they find anything, you are banned and possibly facing criminal charges.  Hotmail accounts and Windows 8 account will have to be re-created, your XBOX live and Skydrive account will be disabled as well.  They also actively scan for child pornography so make sure you don't accidentally save to a Skydrive account either.  This seems like a huge invasion of privacy digging deep within all your documents and pictures (even if it is automatic) and the repercussions can be immense.

4.7            Prefetching and Timestamps


To start, there is a feature that began with Windows XP that is known as Windows Prefetching.  Windows Prefetch files are designed to speed up the application startup process. Prefetch files contain the name of the executable (the program you are running), a Unicode list of DLLs (Dynamic Link Libraries;  files that supports the program in order to run) used by that executable, a count of how many times the executable has been run, and a timestamp indicating the last time the program was run.  This means that if you are trying to use programs such as TrueCrypt or secure deletion programs or other file encryption programs, a Prefetch file will be created thus alerting the forensic investigators.  This is not usually an issue unless you are trying to counter forensic techniques without letting the investigator know. 

 

 

An example where Prefetching is troublesome is when you are trying to change the Windows Timestamps for files.  Every time a file is created, accessed, or modified a Timestamp is created.  Changing the timestamps are a good idea to throw the investigators off.  Also, it is easy to change as there are programs that can do that for you.  A popular program is TimeStop; but an investigator can investigate the Prefetch file and determine that the program was run.  When this happens they can be reasonably certain that the timestamps were changed maliciously.  So, before you download the file I would pack the file using a program such as UPX (Ultimate Packer for eXecutables).  This will change the hash of the file so the investigator does not know TimeStop was used when examining the Prefetch files.

4.8            Event Logs


Event logs are special files that record significant events on your computer, such as when a user logs on to the computer or when a program encounters an error. Whenever these types of events occur, Windows records the event in an event log that you can read by using Event Viewer.  An investigator can determine security related information (These events are called audits and are described as successful or failed depending on the event, such as whether a user trying to log on to Windows was successful), application and service information, and more.  As security information is not incriminating, investigators can tell when you attempted to log in and out of the computer, which can correspond to suspected times.  Also, application data might not be incriminating, but depending on what the application actually logs, file names and other incriminating evidence might be recorded.

 
Try it out – Erase event logs

 

1.       Open the Start Menu and go to Control Panel

2.       Click on Administrative Tools and open Event Viewer

3.       Expand Windows Logs on the left

4.       Right-click Application, Security, and System and click Clear Log…

 

 

 
4.9            Printers, Print Jobs, and Copiers


There are several things that you should be concerned about when printing sensitive documents.  Print data might be left on your computer, on the printer’s hard drive, or through transit.  Before you can know where to look, you must first know how Windows prints a document.  When you send something to a printer the document is first spooled and two files are created in the c:\windows\system32\spool\printers folder.  These two files are the shadow file and a spool file.  The files are named as complimentary pairs;  for example, one job sent to the printer results in the creation of one FP00001.SDH file and one FP00001.SPL file for the same job, while the next job will create FP00002.SDH and FP00002.SPL.

The shadow file (.SHD) can contain information about the job itself, such as the printer name, computer name, files accessed to enable printing, user account that created the print job, the selected print processor and format, the application used to print the file, and the name of the printed file (which can be the URL if a file is printed from the web).  All of this data can be seen in Unicode using a hex editor or forensic software.

Spool files (.SPL) on the other hand contain the actual data to be printed.  This means that if you print a picture for example, a copy of the picture is created and temporarily stored in the spool folder.  Next, the print job is finally sent to the printer and both the .SHD file and the .SPL file are deleted.  If there is an error whereas the document waits in the queue list, these files can easily be read and the contents of the file revealed.  It is also important to note that these two files were deleted insecurely, so there is the possibility of recovery.

Since 2002, every copier has the capacity to store copies of the documents that are copied or printed.  Furthermore, copiers mark the documents they copy with a hidden code to provide an identifier for the copier.  This means that printed documents and copies might be stored on the printer’s hard drive, or they might be recoverable if they were already deleted.  There is also a security concern whereas printed documents can be tied to specific printers.  Lastly, print documents can be captured if you are sending them to a printer that is located over the network.  Currently, it is up to the manufacturer to provide security when sending jobs to a printer.

 
Try it out – Read spool data

 

1.       I am going to assume that you already have a printer installed on your machine

2.       Disconnect the printer’s power source.  This will allow us to view the .SHD file and the .SPL file

3.       Send a print job to that printer that you just disconnected

4.       Open Windows Explorer and in the address bar, type in ‘%windir%\ System32\spool\PRINTERS

5.       You should notice the two files I mentioned:  a .SHD file and a .SPL file.  If you have more than two files, then you might have additional print jobs in the queue

6.       Select the file with the extension .SPL, right-click and select Copy.  Paste the file in the location of your choice.

7.       Download and install the program SPLView from the manufacturer’s website:  click here.

8.       Either open the file from within SPLView, or if you associate the .SPL extension with the program, you can simply double-click the file

9.       To view SHD file, I recommend downloading a using SPLViewer: click here.  If the file is locked, you can follow Try it out – removing services in section 5.2, and disable the Print Spooler service

10.       Turn the printer back on to finish printing the document or delete the files when the Print Spooler service is stopped (Try it out – removing services in section 5.2)
 

 
4.10       Cameras, Pictures, and Metadata


Metadata may be written into a digital photo file that will identify who owns it, copyright & contact information, what camera created the file, along with exposure information and descriptive information such as keywords about the photo, making the file searchable on the computer and/or the Internet. Some metadata is written by the camera and some is input by the photographer and/or software after downloading to a computer.

EXIF information, the Exchangeable Image File format, describes a format for a block of data that can be embedded into JPEG and TIFF image files, as well as RIFF WAVE audio files. Information includes date and time information, camera settings, location information, textual descriptions, and copyright information.  In some instances, especially with the use of cameras in cell phones, the location where the picture was taken might also be embedded with the use of geocaching. This information should be removed before the photo is shared with someone else or stored unprotected.

To remove EXIF information from an image, or a batch of images, you will need to get a special program that strips this data.  I recommend the program BatchPurifier that can remove this information from batch of files or a single file.  A good program to read EXIF information from PEG, TIFF and EEIX template files is Opanda IEXIF.  If you want to remove metadata from a RAW image, you will need to get a separate program such as Exiv2.  Opanda IEXIF can’t remove the data, but it can show you what data is contained within each picture that you take (unless you purchase the professional version).

You cannot stop cameras from recording metadata and embedding them in pictures, so the above steps are the only way to ensure the pictures are clean.  To further clean the image that you took, you will want to crop and remove identifiable information contained within the actual pictures itself.  The best program that can do this is Adobe Photoshop, but a good, free program is Gimp.  Identifiable information should include names, faces, logos, labels, prescriptions, anything that includes handwriting, toys specific to a particular regions or store, etc.

It is also important to know that digital cameras leave a telltale fingerprint buried in the pixels of every image they capture.  Now forensic scientists can use this fingerprint to tell what camera model was used to take a shot.  Furthermore, these scientists can tell the specific camera that took a specific picture if they had the camera in hand.  I would either use a separate camera for on-topic material or change the photo by either resizing or re-rendering the image after making global changes (blurring, filtering, etc.).  Photoshop, Paint.Net, or GIMP are all good program that enable you to edit a photo without making changes to the original.  This allows you to go back and make further changes (or undo changes) in the future if needed.

You should also know that pictures are not the only material that can contain sensitive information.  Documents can include Microsoft Office® documents (Word, Excel, PowerPoint), OpenOffice.org documents, PDF documents, and popular image and media file types such as JPEG, JPEG 2000, PNG, SVG, AVI, WAVE, AIFF, MP3, MP4, and F4V.  It is best to either remove the data from these files before sharing them or it is best not to share them all together.  You should know that changing the file extension does not trick the investigators.  They use file header information to gather pictures/videos.

As we are talking about pictures, you should also be concerned what is in the pictures themselves.  Law Enforcement Agencies have teams of analysts that pick apart background data to determine names, addresses, geographic data, demographics, and etc.  As the case provided, detectives were able to determine where the suspect lived based on a toy bunny and an orange sweatshirt as seen in one of the photos.  You should attempt to remove all information that includes names, dates, addresses, paraphernalia or anything in nature that is region specific, or anything else that can be identifiable.  Tattoos, and other body parts (not specific to the face) are identifiable too.  For example, veins on the penis can be linked to a specific person.  Recently, somebody was taking photos of his underage daughter and posting them online.  The problem is he posted one with a clear view of a prescription bottle in the background and got busted.  Not smart; don’t make the jobs of the LEA easier.

Case:  During an investigation into an internal child porn ring, detectives tracked down a toy bunny, seen in a photo, was used to trace the suspect to Amsterdam.  Investigators have discovered that the bunny was a character in a children's book popular in the Netherlands.  The detective also traced the boy's orange sweater to a small Amsterdam store that had sold only 20 others like it.  That led to the capture and arrest of 43 other individuals.

When editing a photo for the first time, I usually crop the sides of the image, add blurring (even though some investigators have recently been able to reverse the blurring process and render this useless) and the halo effect, smooth physical features of adults, remove items that are identifiable, and sometimes replace the background altogether.  If you really want to get involved, you can change physical features such as eye or hair color.  Doing this will not trick an investigator, but it will obscure the features of a photo making it harder for someone to identify you.  Also, if done correctly, it will enhance the photo visually and the presentation will be much better.

4.11       USB Information

Whenever a device is plugged into the system, information about that device is stored in the registry and the setupapi.log file (Windows XP and earlier).  The registry key can be found here: HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Enum\USBSTOR and the setupapi.log file can be found here: %windir%\setupapi.log.  All of the subkeys under USBSTOR will contain information about every device that was plugged into your computer via the USB.  The setupapi.log file contains information about device changes, driver changes, and major system changes, such as service pack installations and hotfix installations.

To delete this registry key and or subkeys you must first right-click the key and choose permissions. You can then set the “everyone” group with full permission to the key or subkeys so that they can then be deleted. I’m sure it isn’t too difficult to whip up a script or piece of software to automate this.  Also, if you have system restore enabled, the information might be contained in there as well.  The setupapi.log file should be securely deleted as you would with anything sensitive.  As pointed out to me by a forum that I frequent, here is a program that will do this for you:  https://code.google.com/p/usboblivion/.

 
4.12       SSD – Solid State Drives

Unlike HDDs, SSDs have a feature known as a garbage collector wherein cells that are marked to be deleted are permanently erased in the background, usually within several minutes of being deleted. It is important to know that this process happens on the SSD hardware level, so simply leaving the SSD powered on regardless if it is attached to anything will result in the destruction of the data (also known as self-corrosion).  Even though SSD’s implement garbage collecting, encrypting or securely deleting the device is hard.

SSD's use load balancing, which is a feature that evenly balances I/O operations between allocation pools. This means that when you attempt to encrypt or delete a bit of data, it will move past the actual to the next bit. Also, SSDs should not be encrypted using programs that are meant to encrypt HDs because of another feature called "wear leveling". TrueCrypt for example recommends that "TrueCrypt volumes are not created/stored on devices (or in file systems) that utilize a wear-leveling mechanism (and that TrueCrypt is not used to encrypt any portions of such devices or filesystems)”.  You should know however, that was referring to existing data already stored on the hard drive.  New data that has not been written to the disk will be secured because it is encrypted before physical storage on the hard drive.  This still can allow for data leaks, so it is still not recommended.

On the SSDs you cannot save to a specific sector on the drive therefor if it theoretically possible that there are multiple instances of the same data stored on the drive. Let’s say for example that you change the TrueCrypt volume header; the old header might still be accessible on the drive as you cannot write over it individually.  An attacker, knowing this information can attack the container using the old header information.

4.13       Forensic Software Tools

 

 

Category of Tools
	

Examples

Chat recovery tools
	

Chat Examiner

Computer activity tracking tools
	

Visual TimeAnalyser

Disk imaging software
	

SnapBack DataArrest, SafeBack, Helix

E-mail recovery tools
	

Email Examiner, Network and Email Examiner

File deletion tools
	

PDWipe, Darik’s Boot and Nuke, Blancco

File integrity checkers
	

FileMon, File Date Time Extractor, Decode-Forensic Date/Time Decoder

Forensic work environments
	

X-Ways Forensics

Internet history viewers
	

Cookie Decoder, Cookie View, Cache View, FavURLView, NetAnalysis, Internet Evidence Finder

Linux/UNIX tools
	

Ltools, Mtools

Multipurpose tools and tool kits
	

Maresware, LC Technologies Software, WinHEX Specialist Edition, ProDiscover DFT, NTI Tools, Access Data, FTK, EnCase

Partition managers
	

Partimage

Password recovery tools
	

@Stake, Decryption Collection Enterprise, AIM Password Decoder, Microsoft Access Database Password Decoder, Cain and Able, Ophcrack

Slack space and data recovery tools
	

Ontrack Easy Recovery, Paraben Device Seizure 1.0, Forensic Sorter, Directory Snoop

Specialized software for analyzing registries, finding open ports, patching file bytes, simplifying log file analysis, removing plug-ins, examining P2Psoftware, and examining SIM cards and various brands of phones
	

Registry Analyzer, Regmon, DiamondCS OpenPorts, Port Explorer, Vision, Autoruns, Autostart Viewer, Patchit, PyFlag, Pasco Belkasoft RemovEx, KaZAlyser, Oxygen Phone Manager for Nokia phone, SIM Card Seizure

Text search tools
	

Evidor
* Tue 23 Apr 2013 12:50:51 PM JST

* Tue 23 Apr 2013 12:50:51 PM JST

* Tue 23 Apr 2013 12:50:52 PM JST


* Tue 23 Apr 2013 12:50:53 PM JST

* Tue 23 Apr 2013 12:50:53 PM JST

* Tue 23 Apr 2013 12:50:53 PM JST


* Tue 23 Apr 2013 12:51:07 PM JST

* Tue 23 Apr 2013 12:51:07 PM JST

* Tue 23 Apr 2013 12:51:07 PM JST


* Tue 23 Apr 2013 12:51:34 PM JST

* Tue 23 Apr 2013 12:51:34 PM JST

* Tue 23 Apr 2013 12:51:34 PM JST


* Tue 23 Apr 2013 12:52:34 PM JST

* Tue 23 Apr 2013 12:52:34 PM JST

* Tue 23 Apr 2013 12:52:34 PM JST


* Tue 23 Apr 2013 12:52:36 PM JST

* Tue 23 Apr 2013 12:52:36 PM JST

* Tue 23 Apr 2013 12:52:36 PM JST


* Tue 23 Apr 2013 12:52:37 PM JST

* Tue 23 Apr 2013 12:52:37 PM JST

* Tue 23 Apr 2013 12:52:37 PM JST


* Tue 23 Apr 2013 12:52:41 PM JST

* Tue 23 Apr 2013 12:52:41 PM JST

* Tue 23 Apr 2013 12:52:41 PM JST


* Tue 23 Apr 2013 12:52:42 PM JST

* Tue 23 Apr 2013 12:52:42 PM JST

* Tue 23 Apr 2013 12:52:42 PM JST


* Tue 23 Apr 2013 12:52:46 PM JST

* Tue 23 Apr 2013 12:52:46 PM JST

* Tue 23 Apr 2013 12:52:46 PM JST


* Tue 23 Apr 2013 12:52:46 PM JST


* Tue 23 Apr 2013 12:52:47 PM JST

 

* Tue 23 Apr 2013 12:53:02 PM JST

* Tue 23 Apr 2013 12:53:02 PM JST

* Tue 23 Apr 2013 12:53:02 PM JST


* Tue 23 Apr 2013 12:53:03 PM JST

* Tue 23 Apr 2013 12:53:03 PM JST

* Tue 23 Apr 2013 12:53:03 PM JST
 

* Tue 23 Apr 2013 12:53:04 PM JST
 

* Tue 23 Apr 2013 12:53:04 PM JST
 


* Tue 23 Apr 2013 12:53:07 PM JST

* Tue 23 Apr 2013 12:53:07 PM JST

* Tue 23 Apr 2013 12:53:07 PM JST


* Tue 23 Apr 2013 12:53:08 PM JST


* Tue 23 Apr 2013 12:53:08 PM JST

 

* Tue 23 Apr 2013 12:53:08 PM JST

 

* Tue 23 Apr 2013 12:53:08 PM JST

 


* Tue 23 Apr 2013 12:53:15 PM JST

* Tue 23 Apr 2013 12:53:15 PM JST

* Tue 23 Apr 2013 12:53:15 PM JST


* Tue 23 Apr 2013 12:53:15 PM JST


* Tue 23 Apr 2013 12:53:15 PM JST



* Tue 23 Apr 2013 12:53:16 PM JST



* Tue 23 Apr 2013 12:53:16 PM JST


 

* Tue 23 Apr 2013 12:54:35 PM JST

* Tue 23 Apr 2013 12:54:35 PM JST

* Tue 23 Apr 2013 12:54:35 PM JST


* Tue 23 Apr 2013 12:54:36 PM JST


* Tue 23 Apr 2013 12:54:36 PM JST

 

* Tue 23 Apr 2013 12:54:36 PM JST

 

* Tue 23 Apr 2013 12:54:36 PM JST

 


* Tue 23 Apr 2013 12:54:53 PM JST

* Tue 23 Apr 2013 12:54:54 PM JST

* Tue 23 Apr 2013 12:54:54 PM JST
	

* Tue 23 Apr 2013 12:54:56 PM JST

* Tue 23 Apr 2013 12:54:56 PM JST

* Tue 23 Apr 2013 12:54:56 PM JST


* Tue 23 Apr 2013 12:54:57 PM JST

* Tue 23 Apr 2013 12:54:57 PM JST

* Tue 23 Apr 2013 12:54:57 PM JST


* Tue 23 Apr 2013 12:54:58 PM JST

* Tue 23 Apr 2013 12:54:58 PM JST

* Tue 23 Apr 2013 12:54:58 PM JST


* Tue 23 Apr 2013 12:55:00 PM JST

* Tue 23 Apr 2013 12:55:00 PM JST

* Tue 23 Apr 2013 12:55:00 PM JST


* Tue 23 Apr 2013 12:55:01 PM JST

* Tue 23 Apr 2013 12:55:01 PM JST

* Tue 23 Apr 2013 12:55:01 PM JST


* Tue 23 Apr 2013 12:55:03 PM JST

* Tue 23 Apr 2013 12:55:03 PM JST

* Tue 23 Apr 2013 12:55:03 PM JST


* Tue 23 Apr 2013 12:55:14 PM JST

* Tue 23 Apr 2013 12:55:14 PM JST

* Tue 23 Apr 2013 12:55:14 PM JST


* Tue 23 Apr 2013 12:55:14 PM JST


* Tue 23 Apr 2013 12:55:14 PM JST

 

* Tue 23 Apr 2013 12:55:15 PM JST

* Tue 23 Apr 2013 12:55:15 PM JST

* Tue 23 Apr 2013 12:55:15 PM JST
 

* Tue 23 Apr 2013 12:55:16 PM JST
 

* Tue 23 Apr 2013 12:55:16 PM JST
 


* Tue 23 Apr 2013 12:55:19 PM JST

* Tue 23 Apr 2013 12:55:19 PM JST

* Tue 23 Apr 2013 12:55:20 PM JST
 

* Tue 23 Apr 2013 12:55:20 PM JST
 

* Tue 23 Apr 2013 12:55:20 PM JST
 


* Tue 23 Apr 2013 12:55:30 PM JST

* Tue 23 Apr 2013 12:55:30 PM JST

* Tue 23 Apr 2013 12:55:30 PM JST


* Tue 23 Apr 2013 12:55:32 PM JST

* Tue 23 Apr 2013 12:55:32 PM JST

* Tue 23 Apr 2013 12:55:32 PM JST
 

* Tue 23 Apr 2013 12:55:33 PM JST

* Tue 23 Apr 2013 12:55:33 PM JST

* Tue 23 Apr 2013 12:55:33 PM JST


* Tue 23 Apr 2013 12:55:37 PM JST

* Tue 23 Apr 2013 12:55:37 PM JST

* Tue 23 Apr 2013 12:55:37 PM JST


* Tue 23 Apr 2013 12:55:38 PM JST


* Tue 23 Apr 2013 12:55:38 PM JST



* Tue 23 Apr 2013 12:55:40 PM JST

* Tue 23 Apr 2013 12:55:40 PM JST

* Tue 23 Apr 2013 12:55:40 PM JST
 

* Tue 23 Apr 2013 12:55:40 PM JST
 

* Tue 23 Apr 2013 12:55:40 PM JST
 


* Tue 23 Apr 2013 12:55:44 PM JST

* Tue 23 Apr 2013 12:55:44 PM JST

* Tue 23 Apr 2013 12:55:44 PM JST


* Tue 23 Apr 2013 12:55:46 PM JST

* Tue 23 Apr 2013 12:55:46 PM JST

* Tue 23 Apr 2013 12:55:46 PM JST


* Tue 23 Apr 2013 12:55:47 PM JST

* Tue 23 Apr 2013 12:55:47 PM JST

* Tue 23 Apr 2013 12:55:47 PM JST
 

* Tue 23 Apr 2013 12:55:48 PM JST

* Tue 23 Apr 2013 12:55:48 PM JST

* Tue 23 Apr 2013 12:55:49 PM JST


* Tue 23 Apr 2013 12:55:49 PM JST


* Tue 23 Apr 2013 12:55:49 PM JST



* Tue 23 Apr 2013 12:55:52 PM JST

* Tue 23 Apr 2013 12:55:52 PM JST

* Tue 23 Apr 2013 12:55:52 PM JST


* Tue 23 Apr 2013 12:55:52 PM JST


* Tue 23 Apr 2013 12:55:52 PM JST

 

* Tue 23 Apr 2013 12:55:53 PM JST

 

* Tue 23 Apr 2013 12:55:53 PM JST

 


* Tue 23 Apr 2013 12:56:01 PM JST

* Tue 23 Apr 2013 12:56:01 PM JST

* Tue 23 Apr 2013 12:56:01 PM JST


* Tue 23 Apr 2013 12:56:02 PM JST


* Tue 23 Apr 2013 12:56:02 PM JST

 

* Tue 23 Apr 2013 12:56:02 PM JST

 

* Tue 23 Apr 2013 12:56:02 PM JST

 


* Tue 23 Apr 2013 12:56:02 PM JST

 


* Tue 23 Apr 2013 12:56:02 PM JST

 

 

* Tue 23 Apr 2013 12:56:03 PM JST

 

 

* Tue 23 Apr 2013 12:56:03 PM JST

 

 


* Tue 23 Apr 2013 12:56:05 PM JST

* Tue 23 Apr 2013 12:56:05 PM JST

* Tue 23 Apr 2013 12:56:05 PM JST


* Tue 23 Apr 2013 12:56:07 PM JST

* Tue 23 Apr 2013 12:56:07 PM JST

* Tue 23 Apr 2013 12:56:07 PM JST
 

* Tue 23 Apr 2013 12:56:08 PM JST
 

* Tue 23 Apr 2013 12:56:08 PM JST
 


* Tue 23 Apr 2013 12:56:12 PM JST

* Tue 23 Apr 2013 12:56:13 PM JST

* Tue 23 Apr 2013 12:56:13 PM JST


* Tue 23 Apr 2013 12:56:13 PM JST


* Tue 23 Apr 2013 12:56:13 PM JST

 

* Tue 23 Apr 2013 12:56:13 PM JST

 

* Tue 23 Apr 2013 12:56:13 PM JST

 


* Tue 23 Apr 2013 12:56:16 PM JST

* Tue 23 Apr 2013 12:56:16 PM JST

* Tue 23 Apr 2013 12:56:16 PM JST


* Tue 23 Apr 2013 12:56:17 PM JST


* Tue 23 Apr 2013 12:56:17 PM JST

 

* Tue 23 Apr 2013 12:56:20 PM JST

* Tue 23 Apr 2013 12:56:20 PM JST

* Tue 23 Apr 2013 12:56:20 PM JST


* Tue 23 Apr 2013 12:56:25 PM JST

* Tue 23 Apr 2013 12:56:25 PM JST

* Tue 23 Apr 2013 12:56:25 PM JST
	

* Tue 23 Apr 2013 12:56:26 PM JST

* Tue 23 Apr 2013 12:56:26 PM JST

* Tue 23 Apr 2013 12:56:26 PM JST


* Tue 23 Apr 2013 12:56:27 PM JST

* Tue 23 Apr 2013 12:56:27 PM JST

* Tue 23 Apr 2013 12:56:27 PM JST


* Tue 23 Apr 2013 12:56:28 PM JST

* Tue 23 Apr 2013 12:56:28 PM JST

* Tue 23 Apr 2013 12:56:28 PM JST


* Tue 23 Apr 2013 12:56:30 PM JST

* Tue 23 Apr 2013 12:56:30 PM JST

* Tue 23 Apr 2013 12:56:30 PM JST


* Tue 23 Apr 2013 12:56:31 PM JST

* Tue 23 Apr 2013 12:56:31 PM JST

* Tue 23 Apr 2013 12:56:31 PM JST


* Tue 23 Apr 2013 12:56:32 PM JST

* Tue 23 Apr 2013 12:56:32 PM JST

* Tue 23 Apr 2013 12:56:32 PM JST


* Tue 23 Apr 2013 12:56:35 PM JST

* Tue 23 Apr 2013 12:56:35 PM JST

* Tue 23 Apr 2013 12:56:35 PM JST


* Tue 23 Apr 2013 12:56:36 PM JST

* Tue 23 Apr 2013 12:56:36 PM JST

* Tue 23 Apr 2013 12:56:36 PM JST


* Tue 23 Apr 2013 12:56:38 PM JST

* Tue 23 Apr 2013 12:56:38 PM JST

* Tue 23 Apr 2013 12:56:38 PM JST


* Tue 23 Apr 2013 12:56:39 PM JST

* Tue 23 Apr 2013 12:56:39 PM JST

* Tue 23 Apr 2013 12:56:39 PM JST


* Tue 23 Apr 2013 12:56:40 PM JST

* Tue 23 Apr 2013 12:56:40 PM JST

* Tue 23 Apr 2013 12:56:41 PM JST


* Tue 23 Apr 2013 12:56:42 PM JST

* Tue 23 Apr 2013 12:56:42 PM JST

* Tue 23 Apr 2013 12:56:42 PM JST


* Tue 23 Apr 2013 12:56:44 PM JST

* Tue 23 Apr 2013 12:56:44 PM JST

* Tue 23 Apr 2013 12:56:44 PM JST


* Tue 23 Apr 2013 12:56:46 PM JST

* Tue 23 Apr 2013 12:56:46 PM JST

* Tue 23 Apr 2013 12:56:46 PM JST


* Tue 23 Apr 2013 12:56:47 PM JST

* Tue 23 Apr 2013 12:56:47 PM JST

* Tue 23 Apr 2013 12:56:47 PM JST


* Tue 23 Apr 2013 12:56:47 PM JST

* Tue 23 Apr 2013 12:56:47 PM JST

* Tue 23 Apr 2013 12:56:48 PM JST
 

* Tue 23 Apr 2013 12:56:49 PM JST

* Tue 23 Apr 2013 12:56:49 PM JST

* Tue 23 Apr 2013 12:56:49 PM JST


* Tue 23 Apr 2013 12:56:50 PM JST


* Tue 23 Apr 2013 12:56:50 PM JST



* Tue 23 Apr 2013 12:56:54 PM JST

* Tue 23 Apr 2013 12:56:54 PM JST

* Tue 23 Apr 2013 12:56:54 PM JST


* Tue 23 Apr 2013 12:56:55 PM JST

* Tue 23 Apr 2013 12:56:55 PM JST

* Tue 23 Apr 2013 12:56:55 PM JST


* Tue 23 Apr 2013 12:56:56 PM JST

* Tue 23 Apr 2013 12:56:56 PM JST

* Tue 23 Apr 2013 12:56:56 PM JST


* Tue 23 Apr 2013 12:57:02 PM JST

* Tue 23 Apr 2013 12:57:02 PM JST

* Tue 23 Apr 2013 12:57:02 PM JST


* Tue 23 Apr 2013 12:57:03 PM JST

* Tue 23 Apr 2013 12:57:03 PM JST

* Tue 23 Apr 2013 12:57:04 PM JST


* Tue 23 Apr 2013 12:57:05 PM JST

* Tue 23 Apr 2013 12:57:05 PM JST

* Tue 23 Apr 2013 12:57:05 PM JST


* Tue 23 Apr 2013 12:57:07 PM JST

* Tue 23 Apr 2013 12:57:07 PM JST

* Tue 23 Apr 2013 12:57:07 PM JST


* Tue 23 Apr 2013 12:57:09 PM JST

* Tue 23 Apr 2013 12:57:09 PM JST

* Tue 23 Apr 2013 12:57:09 PM JST
 

* Tue 23 Apr 2013 12:57:09 PM JST
 

* Tue 23 Apr 2013 12:57:09 PM JST
 


* Tue 23 Apr 2013 12:57:09 PM JST
 


* Tue 23 Apr 2013 12:57:09 PM JST
 

 

* Tue 23 Apr 2013 12:57:10 PM JST
 

 

* Tue 23 Apr 2013 12:57:10 PM JST
 

 


* Tue 23 Apr 2013 12:57:12 PM JST

* Tue 23 Apr 2013 12:57:12 PM JST

* Tue 23 Apr 2013 12:57:12 PM JST


* Tue 23 Apr 2013 12:57:14 PM JST

* Tue 23 Apr 2013 12:57:14 PM JST

* Tue 23 Apr 2013 12:57:14 PM JST


* Tue 23 Apr 2013 12:57:15 PM JST

* Tue 23 Apr 2013 12:57:15 PM JST

* Tue 23 Apr 2013 12:57:15 PM JST


* Tue 23 Apr 2013 12:57:18 PM JST

* Tue 23 Apr 2013 12:57:18 PM JST

* Tue 23 Apr 2013 12:57:18 PM JST


* Tue 23 Apr 2013 12:57:19 PM JST

* Tue 23 Apr 2013 12:57:19 PM JST

* Tue 23 Apr 2013 12:57:19 PM JST


* Tue 23 Apr 2013 12:57:21 PM JST

* Tue 23 Apr 2013 12:57:21 PM JST

* Tue 23 Apr 2013 12:57:21 PM JST


* Tue 23 Apr 2013 12:57:24 PM JST

* Tue 23 Apr 2013 12:57:24 PM JST

* Tue 23 Apr 2013 12:57:24 PM JST


* Tue 23 Apr 2013 12:57:26 PM JST

* Tue 23 Apr 2013 12:57:26 PM JST

* Tue 23 Apr 2013 12:57:27 PM JST


* Tue 23 Apr 2013 01:35:54 PM JST

Chapter 5 -
    - _Continuity

Service and data continuity is the activity performed by you to ensure that files and services will be available to yourself and others for the applicable lifetime.  There are several methods to provide continued support including: backing up data, using controls and techniques to restrict access, and implementing controls on servers, networks, and other devices.  None of these controls should be skipped as they are all equally important.  This step is often overlooked when securing your information but assures availability is met.

Topics: 

    Security Concerns with Backups
    Security Concerns with Sleep and Hibernation
    Ensuring Information and Service Continuity
    DoS and DDoS attacks



5.1            Security Concerns with Backups

 

o start, Windows backup and restore is a feature of Windows and does exactly as it implies; it backs up your data.  Without much explanation, there are three types of Windows backups: full, differential, and incremental.  A full backup provides a backup regardless of previous backups.  A Differential backup only backs up data that was changed since the last full backup and an incremental backup backs up data that was changed from the last full backup, or the last incremental backup.

 

I know I am stating the obvious, but make sure that you do not backup anything that is confidential.  Whether by accident or on purpose, once you backup sensitive data, it does not matter if you remove the file from your computer because a copy is already made.  Personally, I keep all my sensitive information in an encrypted container by itself so I don’t confuse it with my other stuff.  After I move all of my sensitive information into a container by itself I have ensured two things, 1) my information is secured and 2) nothing is being backed up that is not supposed to.

5.2            Security Concerns with Sleep and Hibernation


There are two other features with Windows that you should know of:  sleep and hibernation.  If you need to walk away from your laptop for a small –or extended – period of time but want your Windows session to resume quickly, you will use either of these two features.  The difference is that with sleep mode, your computer stores everything in memory and with hibernation mode, everything in RAM is saved to your hard drive.  Sleep is for short-term storage and hibernation is for long term storage.

Note: Windows 8, the latest Operation System Microsoft is coming out with hibernates the system kernel, but does not put memory in storage

If you use sleep or hibernation, the encryption keys and everything else that is open at that time is saved, allowing a third party to bypass the security measures you have in place.  For example, everything that you have opened at this moment, including mounted containers and open documents, will be viewable by forensic investigators.  The best mitigation technique is not to use them or to disable both hibernation and sleep altogether.

5.3            Ensuring Information and Service Continuity

Keeping a backup of all your private/sensitive materials is a good idea for the continuity of such data, as long as that data is secure.  Securely storing data has been discussed in another section, so I will only make a recommendation.  I would create a container with TrueCrypt and store all sensitive data within that container before saving the backup somewhere else.  Doing this will achieve two goals in the CIA triad, confidentiality and availability.

There are two locations that need to be considered when backing up data:  locally and remotely.  A local copy is a good idea when data loss occurs and you want an immediate, speedy recovery of the backed up data.  But what if a natural disaster or a fire occurs and it destroys both your computer and your local backup device?  This is where a remote backup solution comes in; it prevents data loss in off-chance that this happens.  Common methods of remote backups are remote backup services, tapes, external drives, or hosted services.  Another common method is finding someone else in another location (another state preferably) and you each keep a backup for one another.

For example:  let’s say that I have a friend (okay, I did say as an example) and that friend lives in another state.  One good way that I can back up my data at his place and his at mine, is we setup a VPN to connect our networks together.  This way, we can send the files securely over the internet without much complication.  Make sure however, that you trust the other party as they will have your Public IP Address.  Another device that allows for storage redundancy is a RAID device.  RAID (redundant array of independent disks) is a storage technology that combines multiple disk drive components into a logical unit.  Basically, it is a device that is comprised of several disks for the purpose that if one (or more) drive(s) fail, data is not lost.  This can come in the form of a RAID controller (or software controller) on your computer, or a network device (such as a NAS box).

Note: NAS stands for Network Attached Storage and is intended to store information over the network.

There are a few more solutions if you are going to set up a service that you host and are concerned with continuity and service availability.  All these methods are assuming that you have multiple servers available and can configure them and the network they reside in.  Firstly, you can configure the site for mirroring which is the act is creating an exact copy of one server to another server.  Clustering (or failover clustering) is another method of ensuring availability as it is a group of devices that act as a single device.  When one device fails in a cluster, another device starts providing the service (a process known as a failover).  And finally, you can implement load balancing on your network which distributes the traffic load between several devices in your network.

5.4            DoS and DDoS attacks


DoS (Denial of Service) attacks are the acts of making resources for legitimate users unavailable.  DDoS (Distributed Denial of Service) attacks are the same thing as DoS attacks, but they use hundreds (even thousands) of machines to disrupt access to resources.  Usually this is performed by flooding the service with ICMP packets forcing the router (or server) to respond to the attackers request (by replying to the ICMP packet).  Other attacks including sending malformed ICMP packets, flooding the site with resource requests, or SYN flood attacks.

Even though ICMP traffic uses the TCP protocol, it is not supported via Tor.  This attack will be best accomplished with Clearnet sites.  Ping of Death attacks can be accomplished in two ways:  the attacker can send too many packets or they can send malformed packets.  For example, Windows has a packet size limit of 65500.  So anything received that is higher, might crash the machine or enable the attacker to successfully perform a privilege escalation attack.  Flooding the site with requests for resources (videos, pictures, login requests, etc.) is an example of a DoS attack that is more commonly used with Tor sites.

These attacks are mostly an issue that has to be prevented with hardware controls versus implementations within the website itself.  Assuming that you are hosting and managing the website and the server the website resides on, you can implement ingress filtering on your network to help block some of the attack.  The backscatter traceback method is a good strategy for that.  Also, I would block ICMP packets on your external interface (WAN interface).  You should also make sure that all "unallocated source address'" are blocked.  This means that you should block all packets with private IP address that are coming into your network.  You cannot stop DDoS attacks, only mitigate the effect.

Tools for DDoS attacks


To initiate DDoS attacks, you will need to right tools based on your preferences and other factors such as your platform of attack.  The following are samples of DDoS attack tools:

·         Low Orbit Ion Cannon – LOIC attacks a server by flooding the server with TCP or UPD traffic.  Specifically, it mostly floods the server with ICMP traffic which is ping traffic
·         Trinoo – Trinoo is easy to use and has the ability to command and control many systems to launch an attack
·         Tribal Flood Network – TFN can launch ICMP, ICMP Smurf, UDP, and SYN Flood attacks against a victim.  This tool was the first publically available DDoS tool
 ·         Stacheldraht - This tool features that are seen in both Trinoo and TFN and sends commands via ICMP and TCP packets to coordinate an attack.  Another feature of Stacheldraht is that it can encrypt the communication between the client to the handlers
 ·         TFN2K – An upgrade to TFN, this program offers some more advanced features including spoofing of packets and port configuration options
 ·         Shaft -  This works much the same way as Trinoo except it includes the ability for the client to configure the size of the flooding packets and the duration of the attack
 ·         MStream – This program utilizes spoofed TCP packets to attack a designated victim
·         Trinity – This performs several DDoS functions including: fraggle, fragment, SYN, RST, ACK, and others

 
What do they mean?

Let me take a second to define some of the attack turns as presented above:

·         ICMP DOS – An attacker can use either the ICMP "Time exceeded" or "Destination unreachable" messages. Both of these ICMP messages can cause a host to immediately drop a connection
·         ICMP packet magnification - An attacker sends forged ICMP packets to bring down a host.  As an example (as presented above), Windows has a packet size limit of 65500.  So anything received that is higher will be fragmented.  Since the machine cannot reassemble the packet, it might crash or reboot
·         ICMP Smurf attack - An attacker sends forged ICMP echo packets to vulnerable networks' broadcast addresses.  Doing this will tell all the systems on the network (inside the broadcast domain) to send ICMP echo replies to the victim, consuming the targets available bandwidth
 ·         SYN flood attacks – A SYN flood attack takes advantage of the TCP three-way handshake.  A SYN flood attacks spoofs the IP address thereby forcing the server to keep open the connection while waiting for the ACK message (which is never sent) from the client and uses resources in the process
·         RST attacks – This attack works by injecting RST packets into TCP packets tricking the server to close the connection.  RST attacks are performed against other users trying to use a particular resource
·         Fraggle attacks – Fraggle attacks are similar to Smurf attacks except that Fraggle attacks uses UDP packets instead of TCP packets  
	


* Tue 23 Apr 2013 01:38:14 PM JST

Chapter 6 -
    - _System Hardening

System hardening is the process of securing a system by reducing its surface of vulnerability (attack surface which is the components of a system that an attacker can use to break into the system.). A system has a larger vulnerability surface the more that it does; in principle a single-function system is more secure than a multipurpose one.  We will also go over several other risk mitigating methods when dealing with Windows. This will include the removal of unnecessary software, unnecessary usernames or logins and the disabling or removal of unnecessary services.


Topics: 

    Uninstall Unnecessary Software
    Disable Unnecessary Services
    Disable Unnecessary Accounts
    Update and Patch Windows and Other Applications
    Password Protection



6.1.          Uninstall Unnecessary Software


The first step in hardening a system is to remove unnecessary programs.  Start by removing unnecessary third party programs that are installed on the machine.  You also want to look at programs that were installed when downloading or installing other products, whether intentional or not.   For example, when you purchase a machine there is a bunch of software that comes preinstalled that you probably never use.  I would recommend reviewing everything that is installed and remove all software that you do not need.

Try it out – Uninstalling software

 

1.       Open the Start Menu and go to Control Panel

2.       Select Uninstall a program or Add/Remove Program

3.       Right-click the unnecessary programs from the list and click Uninstall

 

 
6.2.          Disable Unnecessary Services


Once all of the software has been uninstalled from the machine, you should then start by disabling all of the unnecessary services that are running in the background.  Each service will provide support for the application that they support; many of them providing functionality for Windows.  You should get a listing of all the system services running on the system and evaluate whether each service is needed.    Also know that I am more referring to third-party services versus Windows services.  Make sure to do your research on each service before disabling anything.

Try it out – Removing services

 

1.       Open the Start Menu and go to Control Panel

2.       Select Administrative Tools and open Services

3.       Review and identify each unnecessary service

4.       Right-click the unnecessary service and select Disabled in the dropdown box next to Startup type.  Stop the service and press OK

 

 

 
6.3.          Disable Unnecessary Accounts


An aspect that is overlooked often is disabling accounts that are not currently being used.  You will need to determine if you need information from that account (if you remove account data) or to use services that can only be used from within that account.  Windows XP has the administrative account enabled with a blank password be default whereas Windows Vista and 7 disable the account by default.  Also, a quick word from the real world, make sure when creating a user account to not use anything that can possibly identity you as doing something illegal.  A real world example, someone actually created a separate account name “childporn”, so he can hide all his illegal materials in that account.  Better yet, he hid all materials in a folder on his desktop named “childporn”!  (NOT smart)  Not only can forensic investigators see all the accounts that are currently on the machine, but they can see previously deleted accounts as well.

Try it out – Removing user accounts

 

1.       Open the Start Menu and go to Control Panel

2.       Expand User Accounts and select the account you wish to delete

3.       Click Delete the account

 
 

Note:  One good recommendation is to create and use a standard account with no Administrative privileges.  This way, if a virus is executed, it only has the privileges of the account that you are in.  Also, I would make sure your username does not contain your full name as many applications such as Pidgin can share this information.

6.4.          Update and Patch Windows and Other Applications


Another step in hardening the system is updating the Operation System and all software installed on the machine.  When you patch the system, you are applying security fixes to known vulnerabilities to the software that is running on the system.  These vulnerabilities are what remote attackers use to gain access to the system.  Without patching the system, you are opening up your machine to attack by these malicious hackers. 


Note:  A program that I would recommend looking into is Microsoft Baseline Security Analyzer (MBSA) which is a free security and vulnerability assessment (VA) scan tool to improve security management process and assess or determine security state in accordance with Microsoft security recommendations and offers specific remediation guidance.


Windows updates should be enabled as they provide many fixes concerning Windows security.  Individual software and applications should also be updated as soon as a known stable version of the update is available.  Usually, when vendors release an update, they are stable unless stated otherwise.  I recommend the use of a tool that checks the programs installed on the machine and reports the ones that are out-of-date.   A good program for this purpose is Secunia PSI.  This program will constantly check the programs installed on your machine and report which ones are out-of-date, which ones are scheduled for an update, and which ones can be updated manually.

6.5.          Password Protection


A final practice you should incorporate in system hardening is password protecting your devices. On your computer, you should make sure that all of the user accounts that are enabled are password protected. This is especially true when folder shares are involved. Make sure that the passwords on your machine are all strong so an attacker cannot use that account to gain access to your machine. For example, when you mount a TrueCrypt container, it can be explored though another computer in the network using an account on the local machine if they have the correct permission. This means that even if you have the world’s strongest password for TC, an attacker can still gain access to its contents using your Windows password over the network.   Also, by default Windows XP has the administrative account enabled without a password by default.  Windows 7 and 8 has this administrative account disabled by default.

Try it out – Password protect computer accounts

 

1.       Open the Start Menu and go to Control Panel

2.       Expand User Accounts and select the account which you want to create a password for

3.       Click Change Password

 
Try it out – Explore your computer from another machine

 

1.       Find your IP address on your computer.  Start the command prompt:  Start > Run > cmd > OK *Windows Vista/7, type cmd in Search Programs and Features.  A black box should pop up

2.       Type in ipconfig and under the adapter you are using, record the IP address next to IPv4 (example: 192.168.1.5) *rarely will people use IPv6

3.       Hop onto the other computer and open up Windows Explorer

4.       In the address are, type in ‘\\’ followed by your computers IP address finished with a ‘\’, your drive letter and a ‘$’ (usually C).  For example, I type in \\192.168.1.5\C$

5.       You will be prompted to enter the username and password for your machine
* Tue 23 Apr 2013 01:39:06 PM JST

* Tue 23 Apr 2013 01:39:06 PM JST

* Tue 23 Apr 2013 01:39:06 PM JST


* Tue 23 Apr 2013 01:39:08 PM JST

* Tue 23 Apr 2013 01:39:08 PM JST

* Tue 23 Apr 2013 01:39:08 PM JST


* Tue 23 Apr 2013 01:39:09 PM JST

* Tue 23 Apr 2013 01:39:09 PM JST

* Tue 23 Apr 2013 01:39:09 PM JST


* Tue 23 Apr 2013 01:39:11 PM JST

* Tue 23 Apr 2013 01:39:11 PM JST

* Tue 23 Apr 2013 01:39:11 PM JST


* Tue 23 Apr 2013 01:39:12 PM JST

* Tue 23 Apr 2013 01:39:12 PM JST

* Tue 23 Apr 2013 01:39:12 PM JST
 

* Tue 23 Apr 2013 01:39:15 PM JST

* Tue 23 Apr 2013 01:39:15 PM JST

* Tue 23 Apr 2013 01:39:15 PM JST


* Tue 23 Apr 2013 01:39:15 PM JST


* Tue 23 Apr 2013 01:39:15 PM JST

 

* Tue 23 Apr 2013 01:39:16 PM JST

* Tue 23 Apr 2013 01:39:17 PM JST

* Tue 23 Apr 2013 01:39:17 PM JST


* Tue 23 Apr 2013 01:39:20 PM JST

* Tue 23 Apr 2013 01:39:20 PM JST

* Tue 23 Apr 2013 01:39:20 PM JST


* Tue 23 Apr 2013 01:39:22 PM JST

* Tue 23 Apr 2013 01:39:22 PM JST

* Tue 23 Apr 2013 01:39:22 PM JST


* Tue 23 Apr 2013 01:39:22 PM JST


* Tue 23 Apr 2013 01:39:22 PM JST



* Tue 23 Apr 2013 01:39:24 PM JST

* Tue 23 Apr 2013 01:39:24 PM JST

* Tue 23 Apr 2013 01:39:24 PM JST


* Tue 23 Apr 2013 01:39:24 PM JST


* Tue 23 Apr 2013 01:39:25 PM JST



* Tue 23 Apr 2013 01:39:26 PM JST

* Tue 23 Apr 2013 01:39:26 PM JST

* Tue 23 Apr 2013 01:39:26 PM JST


* Tue 23 Apr 2013 01:39:29 PM JST

* Tue 23 Apr 2013 01:39:29 PM JST

* Tue 23 Apr 2013 01:39:29 PM JST
 

* Tue 23 Apr 2013 01:39:30 PM JST
 

* Tue 23 Apr 2013 01:39:30 PM JST
 
 

* Tue 23 Apr 2013 01:39:31 PM JST
 
 

* Tue 23 Apr 2013 01:39:31 PM JST
 
 


* Tue 23 Apr 2013 01:39:34 PM JST

* Tue 23 Apr 2013 01:39:35 PM JST

* Tue 23 Apr 2013 01:39:35 PM JST
 

* Tue 23 Apr 2013 01:39:35 PM JST
 

* Tue 23 Apr 2013 01:39:35 PM JST
 


* Tue 23 Apr 2013 01:39:38 PM JST

* Tue 23 Apr 2013 01:39:38 PM JST

* Tue 23 Apr 2013 01:39:38 PM JST


* Tue 23 Apr 2013 01:39:41 PM JST

* Tue 23 Apr 2013 01:39:41 PM JST

* Tue 23 Apr 2013 01:39:42 PM JST


* Tue 23 Apr 2013 01:39:42 PM JST


* Tue 23 Apr 2013 01:39:42 PM JST



* Tue 23 Apr 2013 01:39:42 PM JST



* Tue 23 Apr 2013 01:39:42 PM JST


 

* Tue 23 Apr 2013 01:39:42 PM JST


 

* Tue 23 Apr 2013 01:39:42 PM JST


 


* Tue 23 Apr 2013 01:39:42 PM JST


 


* Tue 23 Apr 2013 01:39:42 PM JST


 

 

* Tue 23 Apr 2013 01:39:43 PM JST


 

 

* Tue 23 Apr 2013 01:39:43 PM JST


 

 


* Tue 23 Apr 2013 01:39:45 PM JST

* Tue 23 Apr 2013 01:39:45 PM JST

* Tue 23 Apr 2013 01:39:45 PM JST
 

* Tue 23 Apr 2013 01:39:46 PM JST
 

* Tue 23 Apr 2013 01:39:46 PM JST
 


* Tue 23 Apr 2013 01:39:48 PM JST

* Tue 23 Apr 2013 01:39:48 PM JST

* Tue 23 Apr 2013 01:39:48 PM JST


* Tue 23 Apr 2013 01:39:49 PM JST


* Tue 23 Apr 2013 01:39:49 PM JST

 

* Tue 23 Apr 2013 01:39:51 PM JST

* Tue 23 Apr 2013 01:39:51 PM JST

* Tue 23 Apr 2013 01:39:51 PM JST


* Tue 23 Apr 2013 01:39:53 PM JST

* Tue 23 Apr 2013 01:39:54 PM JST

* Tue 23 Apr 2013 01:39:54 PM JST


* Tue 23 Apr 2013 01:39:55 PM JST

* Tue 23 Apr 2013 01:39:55 PM JST

* Tue 23 Apr 2013 01:39:55 PM JST


* Tue 23 Apr 2013 01:40:01 PM JST

* Tue 23 Apr 2013 01:40:01 PM JST

* Tue 23 Apr 2013 01:40:01 PM JST


* Tue 23 Apr 2013 01:40:02 PM JST


* Tue 23 Apr 2013 01:40:02 PM JST



* Tue 23 Apr 2013 01:40:04 PM JST

* Tue 23 Apr 2013 01:40:04 PM JST

* Tue 23 Apr 2013 01:40:04 PM JST


* Tue 23 Apr 2013 01:40:57 PM JST

Chapter 7 -
    - _Antivirus, Keyloggers, Firewalls, DLP’s, and HID’s

Malware, short for malicious software, is software used or created to disrupt computer operation, gather sensitive information, or gain access to private computer systems. It can appear in the form of code, scripts, active content, and other software.  This is not only annoying, but if malware is running on your machine, your security is at risk.  Notice that all these solutions can be either hardware or software.  Hardware solutions are usually on the perimeter as in the form of an all in one device (SonicWall or Fortigate for example).

Topics: 

    Antivirus
    Hardware Keyloggers
    Firewalls
    DLP’s
    HIDS’s
    Other Considerations

 

 
7.1.          Antivirus


'Malware' is a general term used to refer to a variety of forms of hostile, intrusive, or annoying software.  This software comes in several different flavors, but we will only be talking about Spyware and Trojan Horses.  Trojan horses are often delivered through an email message where it masquerades as an image or joke, or by a malicious website, which installs the Trojan horse on a computer through vulnerabilities in web browser software such as Microsoft Internet Explorer.  Spyware on the other hand covertly monitors your activity on your computer, gathering personal information, such as usernames, passwords, account numbers, files, and even driver’s license or social security numbers.

Antivirus software can protect you from viruses, worms, Trojan horse and other types of malicious programs. More recent versions of antivirus programs can also protect from spyware and potentially unwanted programs such as adware. Having security software gives you control over software you may not want and protects you from online threats is essential to staying safe on the Internet. Your antivirus and antispyware software should be configured to update itself, and it should do so every time you connect to the Internet.

Case: The Computer and Internet Protocol Address Verifier (CIPAV) is an illegal data gathering tool that the Federal Bureau of Investigation (FBI) uses to track and gather location data on suspects under electronic surveillance. The software operates on the target computer much like other forms of illegal spyware, whereas it is unknown to the operator that the software has been installed and is monitoring and reporting on their activities. 

Location-related information, such as: IP address, MAC address, open ports, running programs, operating system and installed application registration and version information, default web browser, and last visited URL was captured.  Once that initial inventory is conducted, the CIPAV slips into the background and silently monitors all outbound communication, logging every IP address to which the computer connects, and time and date stamping each.

7.2.          Hardware Keyloggers

Hardware keyloggers are used for keystroke logging, a method of capturing and recording computer users' keystrokes, including sensitive passwords. They can be implemented via BIOS-level firmware, or alternatively, via a device plugged inline between a computer keyboard and a computer. They log all keyboard activity to their internal memory.  Hardware keyloggers have an advantage over software keyloggers as they can begin logging from the moment a computer is turned on (and are therefore able to intercept passwords for the BIOS or disk encryption software).

You might think that physical inspections are one way to defend against hardware keyloggers, but it is not.  Nor is using a wireless keyboard, as that sort of keylogger, doesn't necessarily have to be hidden outside of the keyboard. A dedicated attacker may just as well place an extra chip inside of the keyboard or replace it all together by a manipulated keyboard of the same model to record keystrokes without any obvious visual cues.  So, the best way may to the use different keyboard layouts before entering the password.  Furthermore, you can also enter random data within the password and going back to remove them later.  And finally, you can use tokens as well as a password when logging into your computer.

7.3.          Firewalls


A firewall is usually your computer's first line of defense-it controls who and what can communicate with your computer online. You could think of a firewall as a sort of "policeman" that watches all the data attempting to flow in and out of your computer, allowing communications that it knows are safe and blocking "bad" traffic such as attacks from ever reaching your computer.  Configuring your firewall can prevent Spyware or other confidential data from leaving your network entirely.  It can also prevent remote attackers from “hacking” into your computer.  Most AIO (all-in-one) security solutions such as Norton or McAfee or BitDefender have a firewall built in.  For a free firewall, Comodo firewall is a good alternative:  https://personalfirewall.comodo.com/.

Note: In most Linux distros including Redhat / CentOS / Fedora Linux installs iptables by default. It has become a standard option in all distros.  If it is not installed, you can use the command yum install iptables or apt-get install iptables if you are using Ubuntu.

 
7.4.          DLP’s


Data leakage prevention solution is a system that is designed to detect potential data breach incidents in timely manner and prevent them by monitoring data while in-use (endpoint actions), in-motion (network traffic), and at-rest (data storage).  Importantly, personal DLP software can protect you from accidently disclosing confidential or sensitive data.  Some AIO security software does this as well as free software.

7.5.          HIDS’s and NID’s


The principle operation of a HIDS (Host Intrusion Detection System) depends on the fact that successful intruders (hackers) will generally leave a trace of their activities. In fact, such intruders often want to own the computer they have attacked, and will establish their "ownership" by installing software that will grant the intruders future access to carry out whatever activity (keystroke logging, identity theft, spamming, botnet activity, spyware-usage etc.) they envisage.

In theory, a computer user has the ability to detect any such modifications, and the HIDS attempts to do just that and reports its findings.  Intrusion attempts can be keylogger attempts (spyware), Internet Explorer leaks, DLL injections, malware drivers, etc.  HIDS’s are installed on your machine and a baseline must be performed before HIDS’s can detect any anomalies.  Many anti-virus programs have a basic HIDS built into the software as an added feature.

Network IDS’s on the other hand sit on your network to monitor all traffic coming into your network to alert you to any attacks.  There are several methods of detecting an attack including anomaly based detection and signature based detection.  Also, there is either a passive or active based detection depending on if you want the IDS to actually take action or not.  You should know when setting up an IDS, that there will be false positives as it takes a while for the IDS to learn and for you to teach.  Also, you will need to be there to monitor the alerts. Snort is a good, free NIDS and is widely used in businesses.

7.6.          Other Considerations


What you download can affect security.  Make sure that what you download is safe; it should go without saying, but is good to hear nonetheless.  PDF, word documents, executables, broken pictures, and binders are all security issues.  Make sure that you protect yourself by downloading alternative PDF viewers (or block your PDF application from connecting to the internet), disable Macros if you use Microsoft Office programs, disable JavaScript in Adobe Acrobat/Reader if you use it, etc.  Lastly, make sure that you are updating your web browser, and if you are using the Tor Bundle, you update that as well.  These releases are extremely important for security and often include patcheswhat for found vulnerabilities.
* Tue 23 Apr 2013 01:41:09 PM JST

* Tue 23 Apr 2013 01:41:09 PM JST

* Tue 23 Apr 2013 01:41:10 PM JST
 

* Tue 23 Apr 2013 01:41:10 PM JST
 

* Tue 23 Apr 2013 01:41:10 PM JST
 


* Tue 23 Apr 2013 01:41:25 PM JST

* Tue 23 Apr 2013 01:41:25 PM JST

* Tue 23 Apr 2013 01:41:25 PM JST


* Tue 23 Apr 2013 01:41:47 PM JST

* Tue 23 Apr 2013 01:41:47 PM JST

* Tue 23 Apr 2013 01:41:47 PM JST


* Tue 23 Apr 2013 01:41:49 PM JST

* Tue 23 Apr 2013 01:41:49 PM JST

* Tue 23 Apr 2013 01:41:49 PM JST


* Tue 23 Apr 2013 01:41:53 PM JST

* Tue 23 Apr 2013 01:41:53 PM JST

* Tue 23 Apr 2013 01:41:53 PM JST


* Tue 23 Apr 2013 01:41:57 PM JST

* Tue 23 Apr 2013 01:41:57 PM JST

* Tue 23 Apr 2013 01:41:57 PM JST


* Tue 23 Apr 2013 01:41:59 PM JST

* Tue 23 Apr 2013 01:41:59 PM JST

* Tue 23 Apr 2013 01:41:59 PM JST


* Tue 23 Apr 2013 01:42:01 PM JST

* Tue 23 Apr 2013 01:42:01 PM JST

* Tue 23 Apr 2013 01:42:01 PM JST


* Tue 23 Apr 2013 01:42:03 PM JST

* Tue 23 Apr 2013 01:42:03 PM JST

* Tue 23 Apr 2013 01:42:03 PM JST


* Tue 23 Apr 2013 01:42:05 PM JST

* Tue 23 Apr 2013 01:42:05 PM JST

* Tue 23 Apr 2013 01:42:05 PM JST


* Tue 23 Apr 2013 01:42:09 PM JST

* Tue 23 Apr 2013 01:42:09 PM JST

* Tue 23 Apr 2013 01:42:09 PM JST


* Tue 23 Apr 2013 01:42:11 PM JST

* Tue 23 Apr 2013 01:42:11 PM JST

* Tue 23 Apr 2013 01:42:11 PM JST


* Tue 23 Apr 2013 01:42:12 PM JST

* Tue 23 Apr 2013 01:42:13 PM JST

* Tue 23 Apr 2013 01:42:13 PM JST


* Tue 23 Apr 2013 01:42:14 PM JST

* Tue 23 Apr 2013 01:42:14 PM JST

* Tue 23 Apr 2013 01:42:14 PM JST


* Tue 23 Apr 2013 01:42:55 PM JST

Chapter 8 -
    - _Networks

Keeping your network secure is a must to ensure to keep intruders out and your information from getting into the wrong hands.  Furthermore, it protects you from other people hopping on your network, doing something illegal, and having the evidence point to you.  Network security covers a variety of computer networks, both public and private, and you should concern yourself with both.  This chapter will explain some of the common methods of security and a brief introduction on a few networking terms as well as security concerns when hopping on another person’s network.  This will include both hardware and software methods to ensure this security


Topics: 

    Private vs. Public IP Address
    MAC Address
    Public Wireless
    Security Protocols
    Chat Sites - How Attackers Attack
    Other Considerations



8.1.          Private vs. Public IP Address


A private IP address (assigned by the owner’s wireless device) is assigned per device in the network from a DHCP pool.  DHCP pulls a list of available IP addresses and assigns it when a device is attached to the network.  A certain IP address is not assigned to a specific device (there is no static mapping) therefor people cannot use IP addresses to located your specify device.  Static IP addressing can be used, but typically is not used in a home environment.  When you connect to a wireless device, it is possible that it changes each and every time you connect, depending on what else is connected to the network.  Also, unless the IP address is currently leased out, nobody will be able to look in a log (typically) to determine what IP address what connected when.

The other IP address is known as a Public IP address.  This type of address is what your ISP (Internet Search Provider) uses to identify you.  When you log into a website, this is the IP address that is logged.  When you use proxy or VPN services, the Public IP address that is hidden and the VPN/proxy IP address is exposed.  If somebody has your IP address, they can get the geographical location of where you live whereas your ISP has your name, telephone number, home address, and whatever else you have given them.  Lastly, when you are connected to a person directly (DCC, video chat, P2P, etc.); they can also log your Public IP address.

8.2.          MAC Address


Think of a MAC address like a bank account number; we are each given a bank account number so when we make a purchase, at a grocery store for example, the grocery store knows how to send the payment to your bank and vice-versa.  Similarly, a MAC address, which is unique to your wireless card, allows the router to know where to send the data.  And if you really care, the MAC address is held in an ARP table, but we won’t get into that.

When you connect to a network, the router logs the computers MAC address and temporary saves the computers IP address.  People can also sniff the network to see what you are doing and record your MAC address that way.  And yet another way people can get your MAC address is if they use software that monitors the network and records all the devices automatically.  All these methods have one this in common (besides the obvious), they can only record the addresses that are broadcasted, meaning if you change your MAC address, these methods are useless.

People use MAC address changers for many reasons; mostly for getting free WiFi by bypassing MAC address filtering or performing MAC flood attacks.  If you connect to a public network, or your neighbor’s network, I would use a MAC address changer to make it hard to locate you.  Earlier, we said that a MAC address is unique to your computer; so if they were to look at all of the devices in your house, they won’t find the device with the MAC address that was logged because it has been changed.  The easiest way to change the MAC address is to download a program to do it for you; otherwise you can change it in your network settings.  Win7 MAC Address Changer Portable is a good program to do this for you.

Note:  To change the MAC address in Linux, you can use the hw ether command.  ifconfig eth0 down > ifconfig eth0 hw ether 00:00:00:00:00:00 > ifconfig eth0 up > ifconfig eth0 |grep HWaddr.  Notice, you will use a custom MAC address instead of 00:00:00:00:00:00 and run each command separately (as defined by the ‘>’ character).  Also, you will want to replace eth0 with the adapter that you are using. 

As a quick note, another recent discovery that can identify individual computers that cannot be spoofed (as of yet) is with using the computers graphics card.  The PUFFIN Project (physically unclonable functions found in standard PC components) has brought forward research suggesting that GPU manufacturing processes leave each product with a unique "fingerprint."  The PUFFIN team has created software that can detect these physical differences between GPUs.  This is another way that someone can determine whether your device was used in a crime if your GPU “fingerprint” was obtained.  PUFFIN’s research will run until 2015.

8.3.          Public Wireless


It is up to you whether or not to stop using the neighbors wireless.  But know they can see Tor traffic if they:  use a packet sniffer and perform a MiTM attack if their wireless network is not protected, if they were using a network hub which broadcasts information out of all ports, if they have a managed switch and enable port mirroring, or if they change the MAC address of their computer to that of the AP (Access Point).  Even though they can see Tor traffic, they cannot see what you are doing inside of Tor and they still will have no clue that it was you.  If they could, the purpose of Tor would be defeated.  They are other risks with using public networks (or your neighbor’s network) therefore it is not recommended (unless you are absolutely sure that you are safe).

These risks includes attackers remotely logging into your computer via a known backdoor or an exploit.  The best known Operating System to attack a machine is Backtrack.  BackTrack is a Linux-based penetration testing arsenal that aids security professionals in the ability to perform assessments in a purely native environment dedicated to hacking.  The methods of attack in BackTrack are against operating systems, applications, phones, networks, internet protocols, websites, and etc.  The best part about BackTrack is that it is free!  I would start with getting a good firewall and anti-virus for your computer.  Also, make sure you follow System Hardening (Section 6) section to help correctly configure your machine.

As always, I would use Tor for all sensitive information in which you do not want anyone to learn your location or monitor your browsing habits.  To protect all other sensitive data that does not require such autonymity, I would recommend the use of a VPN.  A VPN reroutes all computer traffic through a secure tunnel to a trusted third-party (or a designated network) before the information reaches its destination.  This provides security against anyone sniffing your computer traffic as all information is encrypted.  Common reasons for a VPN is when: checking emails, checking your bank account, application data security, or transmitting insecure data over a secure data stream.  The difference between Tor and a  VPN is that when using Tor, nobody knows who you are whereas in a VPN somebody always does.

 
Network Sniffing Tools


There are several sniffing tools available.  Listed below are some of the common tools:

 

    Wireshark – One of the most popular packet sniffing programs available and is a successor to Etheral offering a tremendous number of features to assist dissecting and analyzing traffic
    Omnipeek – Created and manufactured by Wildpackets, Omnipeek is a commercial product that is the evolution of Etherpeek
    Dsniff – A suite of tools designed to perform sniffing as well as other tools to reveal passwords. Dsniff is designed for UNIX and Linux platforms and does not have a complete equivalent for Windows
    Cain and Able –and Able provides much of the same tools as Dsniff but also provides features such ARP Poisoning (MiTM attack can be performed inside a network), enumeration of Windows systems, and password cracking
    Etherape – A UNIX/Linux tools that was designed to show the connection going in and out of the system graphically
    Netwitness Investigator – A free tool that allows a user to perform network analysis tools as well as packet reassemble and dissection

 
8.4.          Security Protocols


Securing your network should be as important as securing your computer.  Allowing people access to your network opens you up to attack and as previously stated, legal issues, because they can got caught doing something they weren’t supposed to on your network.  If you are doing everything secure on your network computer but someone gets caught downloading child porn, the government is coming after you.  There are several ways to protect your network depending on your equipment and if you use custom firmware or not.  If you get a router, plug it in, and start using it; you are NOT protected!

The first thing that anybody needs to do is change the default password for the device so nobody can log in and change the security settings.  Followed by changing the device password, you should create a wireless password to limit the people who can get on the device in the first place.  There are several types of protocols that limit access:  WEP, WPA, WPA2, MAC Address Filtering, etc.  WEP, WPA, and WPA2 are protocols that rely on password authentication to accept users who are trying to connect to your wireless device.  MAC Address Filtering on the other hand only allows specific wireless devices access to the network depending on the MAC addresses.

WEP has been demonstrated to have numerous flaws and has been deprecated in favor of newer standards such as WPA and WPA2.  WPA is also deprecated making the recommended security protocol WPA2.  WPA2 is the strongest protocol as it has not been cracked, yet it might not be supported by all devices.  MAC address filtering filters wireless devices allowing only those that are allowed into the network.  The problem is however, it can be easily defeated if someone changes their MAC address to one that is allowed.

Wireless Hacking Tools


I recommend obtaining a copy of Backtrack as there are many wireless hacking tools already installed.

    Kismet - Using Kismet one can see all the open wireless networks, as well as those Wireless Networks which don’t broadcast their SSID’s. It’s a matter of minutes to use this tool and identify networks around you
    Netstumbler - NetStumbler is a freeware Wi-Fi hacking tool that’s compatible with Windows only. It can be used to search open wireless networks and establish unauthorized connections with them
    Medieval Bluetooth Scanner - This program can analyze and scan your Bluetooth network finding Bluetooth devices that can be attacked (see bluejacking or bluesnarfing or bluebugging)
    Coreimpact - This it is widely considered to be the most powerful exploitation tool available.  However, CoreImpact is not cheap and will set anybody back at least $30,000
    Wireshark - Wireshark Wi-Fi hacking tool not only allows hackers to find out all available wireless networks, but also keeps the connection active and helps the hacker to sniff the data flowing through the network
    AirSnort - Most Wi-Fi hacking tools work only when there is no encrypted security settings. While NetStumblr and Kismet fail to work if there is a wireless encryption security being used, AirSnort works to break the network key to get you inside the network
    CowPatty - CowPatty is an another Wi-Fi network hacking tool that has crack got a WPA-PSK protection feature and using this hackers can even break into more secure Wi-Fi environments
    Reaver – This program takes advantage of the weakness inherent with WPS (WiFi Protected Setup)



8.5.          Chat Sites - How Attackers Attack


Some people where asking me about the risks involved in Omegle and downloading pictures to your computer.  So, briefly, I am going to describe here what I told them.  Firstly and most obviously, Tor does not support cam sites for the reason listed in section 9.11.  Quite simply, Tor does not support UDP traffic in which video streaming operates.  So, if you wondering how people actually captures this traffic and obtains your IP address, this is how:

Capture IP Address from Omegle

 

1.       First, you will need to download a packet sniffer.  I would either use Wireshark, Ethereal, or NetWitness Investigator.  The first two will simply capture the packets whereas the latter will captures the packets and has the ability to put them back together.  This is useful if you want to rebuild the video that was streaming.

2.       Start Omegle (or an alternative chat site) and get connected to somebody on the other end.  Capturing the IP address can also be done via text, but for this method, you must use your camera.

3.       Start the packet sniffer of choice; for this example I will be using “Wireshark.”

4.       To select the interface you will need to select “Capture” than “Interfaces.”

5.       Determine the interface that you are using (usually the one with the most packets) and press “Start” to start capturing the packets.

6.       All you need is a few packets, even though you will get a few hundred to a few thousand.  Once you have enough packets press “Stop the running live capture”.  This is denoted by the forth icon at the top with the “X” or you can select “Stop” under “Capture.”  FAILURE TO STOP THE CAPTURE WILL CRASH YOUR MACHINE!  THE AMOUNT OF PACKETS YOU CAN CAPTURE IS DEPENDENT ON THE AMOUNT OF MEMORY YOUR MACHINE HAS!

7.       You are only concerned with UDP traffic, so in the “Filter” field, enter “udp”

8.       Now, you will notice that there is more UDP traffic from two specific IP addresses than anything else; these IP addresses will be your IP address and the individual on the other end of the webcam.  Your IP address will either start with a 192.x.x.x or a 10.x.x.x or possibly a 172.x.x.x.    Most likely, a 192.x.x.x.  There are restrictions, so if you have any questions, ask or refer to a Private IP address list.  The other IP address will be theirs.

9.       Copy their IP address.  This can be denoted via four octets separated by decimals or with dashes.  It can also contain words or letters.  93.53.23.231, pd-93-53-23-231, or 93-52-23-231.abc.dgf.net will all be the same thing.  In either case, you want to copy it down as 93.53.23.231.  Notice that the words might be different; only concern yourself with the numbers.

10.       That is it; you can use a reverse IP address lookup to find basic information.

 



That described simply how to capture the IP address via a packet sniffer.  When connected, this connection can also be seen in your netstat list; you should not worry yourself about this.  The reason being is UDP traffic connects directly to your machine.  TCP traffic connects to a third party site such as Omelge.   Another method is getting the person to go to a honeypot that captures the users IP address when they click on a link and navigate to that site.  They are a few out there, and it is easy for people to be baited into navigating to these sites.

If you are really interested there are two things that happen when you are connected via webcam.  The first thing is the handshake - or the initial connection - and is facilitated by the chat website (Omegle, ChatRoulette, etc).  This connection is the first step that is performed to connect you to the other person whom you are trying to connect with.  After this initial process is complete, you are now directly connected to the person you are chatting with.  At this point, the stream is no longer being passed through the chat website.  The webcam traffic is UDP traffic, which is not supported by Tor.

Another popular method of getting IP addresses and other computer information such as usernames, passwords, keystrokes, screenshots and etc., if with the use of spyware.  I am not going to go into detail about spyware (or a keylogger or malware), but I will go over a popular delivery method.  When people send pictures – or videos – via TorChat or an alternative medium, they can use a binder program to attach a picture file to an executable.  When the file is opened, the picture appears as normal along with the spyware in the background.

To protect yourself when dealing with UDP information (audio or video chat), you can use a UDP proxy, a VPN, or configure a VPN over Tor.  I usually just use a VPN that claims to not log any traffic; but who knows if that claim holds merit.  Simple text chat uses TCP packets which Tor can protect.  Obviously, do not use shortlinks as they can link to a honeypot or another rouge site.   And if you do decided to open links you are unsure about, make sure you do via Tor with JS disabled.

8.6.          Other Considerations


Most people have home routers with stock firmware, so most of this does not apply.  For those of you interested in having more granular control of your router, you can search the internet for custom firmware; for example, DD-WRT is a good Linux-based firmware.  Also, you can purchase managed ports and wireless access points specifically for this purpose.  Most commercial equipment can manage what I am about to talk about, but they usually run in the several thousands, if not hundreds of thousands.

One of the basic hardening techniques for wireless security is the use of VLAN’s.  If the attacker passes your security controls and into your network, VLAN’s will ensure that they cannot read your network traffic.  Let’s say some ports on switch A are in VLAN 10 and other ports on switch B can are in VLAN 10. Broadcasts between these devices will not be seen on any other port in any other VLAN, other than 10. However, these devices can all communicate because they are on the same VLAN. You should also know that VLAN’s can be set up on the same switch.

WPS, or WiFi Protected Setup, is a way for individuals to easily connect devices to the wireless router.  In this method, the standard requires a PIN to be used during the setup phase.  As it is not a technique to add security to the network, you should know that WPS should be disabled at all times.  The vulnerability discovered in WPS makes that PIN highly susceptible to brute force attempts.  It takes approximately 4-10 hours to break WPS pins (passwords) with Reaver.

You should also know about rouge AP’s; specifically when an attacker impersonates an SSID.  Rouge Access Points are a security concern because an attacker can set up a device such as a router or computer to have a similar or the same SSID as the wireless Access Point you connect to.  Unscrupulous parties can connect to this rouge device and all traffic can be logged and MiTM attacks can be performed.  This threat is of low concern because it is not very likely to happen.

One final security configuration I am going to mention is a DMZ.  The purpose of a Demilitarized Zone is to add an additional layer of security to your local area network (LAN – Private network); an external attacker only has access to equipment in the DMZ, rather than the entire network.    This would be if you were setting up anything that you want people from outside your network to have access to whilst protecting your internal network.  Examples of such services would be Websites, IRC servers and relay servers. 
* Tue 23 Apr 2013 01:44:43 PM JST

* Tue 23 Apr 2013 01:44:43 PM JST

* Tue 23 Apr 2013 01:44:43 PM JST


* Tue 23 Apr 2013 01:44:43 PM JST


* Tue 23 Apr 2013 01:44:43 PM JST



* Tue 23 Apr 2013 01:44:44 PM JST

* Tue 23 Apr 2013 01:44:44 PM JST

* Tue 23 Apr 2013 01:44:44 PM JST


* Tue 23 Apr 2013 01:44:44 PM JST


* Tue 23 Apr 2013 01:44:44 PM JST

 

* Tue 23 Apr 2013 01:45:11 PM JST

* Tue 23 Apr 2013 01:45:11 PM JST

* Tue 23 Apr 2013 01:45:12 PM JST


* Tue 23 Apr 2013 01:45:12 PM JST


* Tue 23 Apr 2013 01:45:12 PM JST



* Tue 23 Apr 2013 01:45:16 PM JST

* Tue 23 Apr 2013 01:45:16 PM JST

* Tue 23 Apr 2013 01:45:16 PM JST


* Tue 23 Apr 2013 01:45:19 PM JST

* Tue 23 Apr 2013 01:45:19 PM JST

* Tue 23 Apr 2013 01:45:19 PM JST


* Tue 23 Apr 2013 01:45:20 PM JST

* Tue 23 Apr 2013 01:45:20 PM JST

* Tue 23 Apr 2013 01:45:20 PM JST


* Tue 23 Apr 2013 01:45:23 PM JST

* Tue 23 Apr 2013 01:45:23 PM JST

* Tue 23 Apr 2013 01:45:23 PM JST


* Tue 23 Apr 2013 01:45:25 PM JST

* Tue 23 Apr 2013 01:45:25 PM JST

* Tue 23 Apr 2013 01:45:25 PM JST


* Tue 23 Apr 2013 01:45:25 PM JST


* Tue 23 Apr 2013 01:45:25 PM JST



* Tue 23 Apr 2013 01:45:29 PM JST

* Tue 23 Apr 2013 01:45:29 PM JST

* Tue 23 Apr 2013 01:45:29 PM JST


* Tue 23 Apr 2013 01:45:29 PM JST


* Tue 23 Apr 2013 01:45:29 PM JST

 

* Tue 23 Apr 2013 01:45:30 PM JST

* Tue 23 Apr 2013 01:45:31 PM JST

* Tue 23 Apr 2013 01:45:31 PM JST


* Tue 23 Apr 2013 01:45:32 PM JST

* Tue 23 Apr 2013 01:45:32 PM JST

* Tue 23 Apr 2013 01:45:32 PM JST
 

* Tue 23 Apr 2013 01:45:34 PM JST

* Tue 23 Apr 2013 01:45:34 PM JST

* Tue 23 Apr 2013 01:45:34 PM JST


* Tue 23 Apr 2013 01:45:36 PM JST

* Tue 23 Apr 2013 01:45:36 PM JST

* Tue 23 Apr 2013 01:45:36 PM JST


* Tue 23 Apr 2013 01:45:39 PM JST

* Tue 23 Apr 2013 01:45:39 PM JST

* Tue 23 Apr 2013 01:45:39 PM JST


* Tue 23 Apr 2013 01:45:40 PM JST

* Tue 23 Apr 2013 01:45:40 PM JST

* Tue 23 Apr 2013 01:45:40 PM JST


* Tue 23 Apr 2013 01:45:43 PM JST

* Tue 23 Apr 2013 01:45:43 PM JST

* Tue 23 Apr 2013 01:45:43 PM JST


* Tue 23 Apr 2013 01:45:45 PM JST

* Tue 23 Apr 2013 01:45:45 PM JST

* Tue 23 Apr 2013 01:45:45 PM JST


* Tue 23 Apr 2013 01:45:47 PM JST

* Tue 23 Apr 2013 01:45:47 PM JST

* Tue 23 Apr 2013 01:45:47 PM JST


* Tue 23 Apr 2013 01:45:49 PM JST

* Tue 23 Apr 2013 01:45:49 PM JST

* Tue 23 Apr 2013 01:45:49 PM JST


* Tue 23 Apr 2013 01:45:50 PM JST

* Tue 23 Apr 2013 01:45:50 PM JST

* Tue 23 Apr 2013 01:45:51 PM JST


* Tue 23 Apr 2013 01:45:53 PM JST

* Tue 23 Apr 2013 01:45:53 PM JST

* Tue 23 Apr 2013 01:45:53 PM JST


* Tue 23 Apr 2013 01:45:55 PM JST

* Tue 23 Apr 2013 01:45:55 PM JST

* Tue 23 Apr 2013 01:45:55 PM JST


* Tue 23 Apr 2013 01:45:57 PM JST

* Tue 23 Apr 2013 01:45:57 PM JST

* Tue 23 Apr 2013 01:45:57 PM JST


* Tue 23 Apr 2013 01:45:57 PM JST


* Tue 23 Apr 2013 01:45:57 PM JST



* Tue 23 Apr 2013 01:45:59 PM JST

* Tue 23 Apr 2013 01:46:00 PM JST

* Tue 23 Apr 2013 01:46:00 PM JST


* Tue 23 Apr 2013 01:47:24 PM JST

Chapter 9 -
    - _Web Browser Security

In this section, I will talk about several vulnerabilities, what they accomplish, and the mitigation techniques.  Because web browsers are used so frequently, it is vital to configure them securely. Often, the web browser that comes with an operating system is not set up in a secure default configuration. Not securing your web browser can lead quickly to a variety of computer problems caused by anything from spyware being installed without your knowledge to intruders taking control of your computer to websites obtaining your IP address and running malicious scripts when you navigate to their webpage.  I will briefly go over some other security considerations, dealing primarily with web browsers.  This section does not encompass everything, so further research is necessarily!

Topics: 

    Downloading and Using the Tor Browser Bundle
    What is Sandboxing and What is JIT Hardening, and Why Do I Care?
    JavaScript
    Cookie Protection and Session Hijacking attacks
    Caching
    Referers
    CSRF/CSRF Attacks (XSS Attack)
    Protect Browser Settings
    DNS Leaks
    User Awareness, Accidents and System Updates
    Configuring Web-Browsers and Applications to Use Tor




Let’s start by talking about the browser itself.  Personally, I use the Tor Bundle with Firefox, as do most.  Moreso, using Tails is recommended because of way it was designed; all traffic will run through Tor regardless of the source and if is not running through Tor, it is dropped.  A study was done though and it was concluded that Google Chrome is the most secure browser largely because of Chrome’s sandboxing and plug-in security.  Comparatively,   Internet Explorer implemented (lacking industry standard) sandboxing and JIT Hardening whereas Firefox falls behind on sandboxing and does not implement JIT hardening.

9.1.          Downloading and Using the Tor Browser Bundle


The Tor Project describes Tor as “Tor protects you by bouncing your communications around a distributed network of relays run by volunteers all around the world: it prevents somebody watching your Internet connection from learning what sites you visit, and it prevents the sites you visit from learning your physical location. Tor works with many of your existing applications, including web browsers, instant messaging clients, remote login, and other applications based on the TCP protocol.”

I recommend downloading and using the Tor Browser Bundle even though I provided a step-by-step exercise on how to configure your existing browsers to run through Tor (Section 9.11).  Many people in the past have used the Tor Button for Firefox which is no longer supported due to its fairly new rapid release cycle of Firefox.  Also, the use of a web proxy is not needed if you are just browsing the internet using the Tor Browser Bundle.  I would recommend using the hardening techniques as described below.  You should know that even though you are using Tor, you data is compromised at the Tor Exit Node if you are browsing the internet (non-onion websites).

 



Download and Start the Tor Browser Bundle

 

1.       Navigate to the Tor website.

2.       Under Tor Browser Bundle for Windows/Mac/Linux, select the appropriate version (32-bit vs. 64-bit).  For Windows, just select the appropriate language.

3.       Click “Save File”

4.       Once the file is downloaded, open it.  An example file I just downloaded was, tor-browser-2.2.39-1_en-US.exe.  Your version will probably be different than mine.

5.       It is a self-extracting archive.  Select your preferred location and press Extract.

6.       Navigate to and open the folder and run Start Tor Browser.

7.       Once Tor establishes a connection, a Firefox browser will open.

8.       You can now browse the internet as you would normally without your ISP or another party from seeing what you are doing within Tor itself.  There are other vulnerabilities that should be addressed, so I recommend reading on.

 

 
Tor Links


When you download and use Tor you can go to many .onion sites that are hidden from the clear internet.  Using these sites are completely anonymous as nobody knows you specifically are navigating there; not even your exit node.  Here is a list of a few Tor sites:

·         Main Page - http:/kpvz7ki2v5agwt35.onion/wiki/index.php/Main_Page.  This link is to the main Hidden Wiki that hosts links to other hidden Tor websites.  View this site for the full listing.

·         Silk Road - http://silkroadvb5piz3r.onion/. Silk Road - Private marketplace with escrow (Bitcoin).  You can purchase anything from illegal pictures and video, to drugs and drug paraphernalia, to arms and ammunition.

·         HackBB - http://clsvtzwzdgzkjda7.onion/. Forums for hacking, carding, cracking, programming, anti-forensics, and other tech topics. Also a marketplace with escrow.

·         TorMail - http://jhiwjjlqpyawmpjx.onion/.  Can send/receive mail from inside and outside Tor with a you@tormail.net address.

·         FreedomHosting - http://xqz3u5drneuzhaeo.onion/.  Hosting Service with PHP/MySQL. As of 2011-06-04, it hosts about 50% of the live OnionWeb by onion.

·         HardCandy – http://kpvz7ki2v5agwt35.onion/wiki/index.php/Hard_Candy.  HiddenWiki link to sites containing material that is intended for people who are attracted to children.

·         Lolita City - http://m3hjrfh4hlqc67gb.onion/.  Described as the biggest CP site in the Onionland. Light, moderately fast collection, with a (often invaluable) tag, search and comment system. As of November 2012 it hosts over 1 000 000 images.

·         OPVA2 (OnionPedo Video Archive) - http://opva2pilsncvtwmh.onion/.  Video archive with comments, tags and search system.  Mostly contains CP.

·         Pedo Support Community - http://f3wjuyqroxyz2z3w.onion/.  Support and resource community for people who love children.  This site does not contain any pictures/videos of CP and only allows for individuals to join if they love children and do not seek to hurt them.

 
9.2.          Configuring Web-Browsers and Applications to Use Tor


Here, I am going to be talking about using Tor to encrypt HTTP traffic as well as FTP and SSL. To accomplish this we will be using Tor as well as Polipo, a web caching web proxy.    Basically, we are going to send all the traffic to the port that Polipo is listening on and forwarding that traffic through Tor.  Doing this will encrypt all HTTP, FTP and SSL traffic.  This is a substitute to using the Tor Browser Bundle.  As stated above, you should know that even though you are using Tor, you data is compromised at the Tor Exit Node if you are browsing the internet (non-onion websites).
	

The first thing we need to do is download the Vidalia Bundle. This bundle includes Tor, Vidalia, and Polipo.   We are going to be configuring Firefox for this article.  You should know however that all other browsers and applications that allow for proxy settings will use the same configurations.  However there are limitations which we will discuss further down.
Starting the services

 

1.       Start Polipo.

2.       Start Vidalia.

3.       Once you are connected to Tor (“Connected to the Tor network” – in the Vidalia Control Panel) we will begin setting the proxy settings for Firefox.

                                          
Firefox

 

1.       Start Firefox.

2.       Click ‘Tools’  (if you do not see the menu-bar press the ‘Alt’ key on your keyboard. The menu-bar should appear.).

3.       Click ‘Options’ followed by ‘Advanced’.  Select the ‘Network’ tab.

4.       Under the ‘Connection’ group select ‘Settings…’

5.       Check the ‘Manual proxy configuration”’ check box.

6.       For HTTP, SSL, SOCKS and FTP you will use (127.0.0.1 with Port 8118).

 
 

 
9.3.          What is Sandboxing and What is JIT Hardening, and Why Do I Care?


Wikipedia defines a sandbox as a “security mechanism for separating running programs. It is often used to execute untested code, or untrusted programs from unverified third-parties, suppliers, untrusted users and untrusted websites.”  Basically, think of it as, well… a sandbox.  If you put a whole bunch of kids in a sandbox and want them to stay there, they can’t leave.  Sandboxes restrict system information, which is extremely important for our purposes.  Furthermore, as an additional layer of security, I use The Tor Bundle in a virtual environment (a virtual application but a virtual machine is also recommended).

JIT hardening “keeps the browser from compiling JavaScript that cannot be run on the user’s computer.”  Basically, it is code that is compiled (compiling is like writing a book; you write several pages before you bind the book together) on-the-fly to improve the runtime performance of the JS.  “Attackers have long relied on JIT techniques to convert JavaScript into malicious machine code that bypasses exploit mitigations such as ASLR.”

9.4.            JavaScript


Javascript is just as it implies; a script that is executed in the browser or where it is run from.  JavaScript is a programming language that allows access to system resources of the system running the script.  It runs when the webpage is loaded or an event is triggered and is denoted by <script> and </script> alike.  These scripts can interface with all aspects of an OS just like programming languages, such as the C language.  This means that JScript, when executed, can potentiality damage the system or be used to send information to unauthorized persons.  Obviously, this is not all-inclusive and further vulnerabilities/exploits can be managed by using JavaScript. 

What should be pulled out of this is Javascript only runs scripts that are on the webpage; it cannot magically get your IP address without it being explicitly written in the script.  Thus, enabling JS on sites that are known to be trusted, such as this site, you can be relatively safe in knowing that system information (or your Public IP address) is not being leaked.  But, however, as you may have guessed, this is assuming that the scripts are not compromised which is a possibility at any time (though unlikely).  In any other scenario, you should disable JS for the site completely.

NoScript is recommended when dealing with JavaScript as it blocked all scripts unless explicitly defined (as per script or site).  Make sure when using NoScript, that “Disable Scripts Globally” is checked, because if it enabled globally, you would defeat the purpose of the add-on.  By default, it is already turned on.  When using The Tor Bundle or the outdated Tor Button, it is also good to know that dangerous JavaScript is already hooked.  “Javascript is injected into pages to hook the Date object to mask your timezone, and to hook the navigator object to mask OS and user agent properties not handled by the standard Firefox user agent override settings.”  You can also disable JavaScript directly from the browser.

9.5.          Cookie Protection and Session Hijacking Attacks


Wikipedia defines a cookie as a “small piece of data sent from a website and stored in a user's web browser while a user is browsing a website. When the user browses the same website in the future, the data stored in the cookie can be retrieved by the website to notify the website of the user's previous activity.”  When you log into a webpage, that session is also stored on your computer as a cookie.  More onion websites are using cookies for several reasons, including DoS attacks and session hijacking attacks.

A session hijacking attack basically allows a third party attacker to connect to a website and access their session.  For example, when you log into a website, you have just created a session.  There are two main ways they perform a session hijacking attack:  session ID guessing and stolen session cookies.  Session is usually not as big of an issue because of the length of the session ID (mostly).  And the other way someone could steal a session cookie, is at the Tor Endpoint when they are performing a MiTM attack.  Sadly, MiTM attacks cannot be mitigated and cookie hijacking is a real threat.

Cookies, in general are not dangerous, however all third party cookies should be blocked in the browser settings to stop tracking from a third party.  A third party cookie places a cookie from one site for another site.  For example, if you visit www.widgets.com and the cookie placed on your computer says www.stats-for-free.com, then this is a third-party cookie.

 
Firefox (version 10.0.5)

 

1.       Start Firefox

2.       Click ‘Tools’  (if you do not see the menu-bar press the ‘Alt’ key on your keyboard. The menu-bar should appear.)

3.       Click ‘Options’

4.       Click ‘Privacy’

5.       Check, ‘Tell websites I do not want to be tracked’ and either ‘TorBrowser will: never remember my history’ OR uncheck ‘Accept third-party cookies.’  Note, this does not stop all trackers websites do NOT have to abide by the ‘Tell websites I do not want to be tracked’ feature and this is not the only method.

 

 
9.6.          Caching


Internet cache is “is a component that transparently stores data so that future requests for that data can be served faster.”  Whenever you go to a website, internet cached is created and saved on your computer for faster viewing.  This means that when you go to a picture site, all the pictures that are loaded on the screen are saved on your computer for future viewing.  Obviously, this is a huge security risk and if someone were to gain access to your system and view the cache, they would know what you have been looking at.

As a real quick side note, in the USA at least, it is not illegal to view the images, just download them.  Now, if you have adequate knowledge, they can claim that you knew the cached images were there and you kept them there as an attempt to download the images.  You can configure the browser settings or have a program erase the cache securely.  CCleaner is a good, recommended (and free!) program that does that.

 
Firefox (version 10.0.5)

 

1.       Start Firefox

2.       Click ‘Tools’  (if you do not see the menu-bar press the ‘Alt’ key on your keyboard. The menu-bar should appear.)

3.       Click ‘Options’

4.       Click ‘Privacy’

5.       Select ‘TorBrowser will: Use custom settings for history’ Note, this is not the only method

 

 
9.7.          Referers


Wikipedia defines referers as “occurs as an HTTP header field – identifies, from the point of view of an Internet webpage or resource, the address of the webpage (commonly the Uniform Resource Locator (URL).” Basically, when you click on a picture for example (or when a picture loads in a webpage), the website that hosts the information is sent a request that contains the last page you were in.  Most recently, on one of the sites that I frequent, there was an attack done whereas somebody performed session hijacking attacks using referrer information

This was possible because the session ID was in the URL (again, the address of the webpage) and with the use of referers, when a user loaded a page with live previews (or when a link was pressed), the session was given to the attacker which allowed them to do whatever they wanted to the users account.  Disabling referers on the browser is recommended.  This type of attack is another reason some sites are not requiring cookies.

Disabling referers in the browsers setting or downloading an add-on is recommended.  RefControl, https://addons.mozilla.org/en-US/firefox/addon/refcontrol/ is a good add-on that accomplishes this.  You can also disable referers in the browser settings as such:

 
Firefox

 

1.       In the address bar, type ‘about:config’ press ‘Enter

2.       Accept the prompt

3.       Type ‘network.http.sendRefererHeader’ into the ‘Filter’ field

4.       Double-click ‘network.http.sendRefererHeader’ under ‘Preference Name’

5.       In the white box, enter ‘1’.  The default value is two

6.       Next, type ‘network.http.sendSecureXSiteReferrer’ into the ‘Filter’ field

7.       Double-click ‘network.http.sendSecureXSiteReferrer’ under ‘Preference Name.’  The value should change to ‘False’

8.       Click "OK" and close the ‘about:config’ window

 

9.8.          CSRF/CSRF Attacks (XSS Attack)


Wikipedia defines this attack as a “type of malicious exploit of a website whereby unauthorized commands are transmitted from a user that the website trusts.”  I won’t go into much detail about XSS attacks because there are so many.  Basically, this is another way that an attacker might be able to gain control of your session.  I recommend the add-on RequestPolicy:  https://addons.mozilla.org/en-US/firefox/addon/requestpolicy/

9.9.          Protect Browser Settings


No amount of configurations will help if maleware on your machine is able to change your browser settings.  One popular attack is changing the proxy settings of the browser which will transmit anything to a third party location versus through Tor.  Another example is if software or maleware changes your search settings.  You might unknowing type something in that you did not want searched with a particular search engine. For this, I would recommend BrowserProtect: https://addons.mozilla.org/en-US/firefox/addon/browserprotect/ which protects your browser’s settings and preference from being changed.

 
9.10.     DNS Leaks


Basically, a DNS leak is when your Public IP is leaked versus it going through Tor.  If any traffic leaks, a third party monitoring your connection will be able to log your webtraffic.  There is a great how-to for Linux found here: https://trac.torproject.org/projects/tor/wiki/doc/Preventing_Tor_DNS_Leaks. For Windows users, I would block TCP port 53 on your firewall.  Note that blocking port 53 will block ALL attempts from any web browser whether in Tor or otherwise. Also, I would change your DNS settings to localhost (taken from Microsoft and “Mintywhite”, whatever that is):

 
Vista/7

1.       Open Network Connections by clicking the Start button, clicking Control Panel, clicking Network and Internet, clicking Network and Sharing Center, and then clicking Manage network connections.

2.       Right-click the connection that you want to change, and then click Properties.  If you are prompted for an administrator password or confirmation, type the password or provide confirmation.  Local Area Connection is usually the wired connection and Wireless is wireless.  For other adapters (dongles, etc.), you will have to right-click those or use the software provided with the device.

3.       Click the Networking tab. Under This connection uses the following items, click either Internet Protocol Version 4 (TCP/IPv4).

4.       To specify DNS server address settings, do one of the following:

5.       To specify a DNS server address, click Use the following DNS server addresses, and then, in the Preferred DNS server and Alternate DNS server boxes, type the addresses of the primary and secondary DNS servers (127.0.0.1).
XP

1.       Locate and open Network Connections.

2.       Double-Click your default Network Connection from the available list.

3.       Click Properties.

4.       Highlight Internet Protocol (TCP/IP) and click on Properties again.

5.       To specify a DNS server address, click Use the following DNS server addresses, and then, in the Preferred DNS server and Alternate DNS server boxes, type the addresses of the primary and secondary DNS servers (127.0.0.1).

 

Furthermore, I would configure your browser to disable DNS prefetching:
Firefox

 

1.       In the address bar, type ‘about:config’ press ‘Enter’.

2.       Accept the prompt.

3.       Type ‘network.dns.disablePrefetch’ into the ‘Filter’ field.

4.       Double-click ‘network.dns.disablePrefetch’ under ‘Preference Name’.

5.       In the white box, enter ‘True’.

6.       Click "OK" and close the ‘about:config’ window.

 
9.11.     User Awareness, Accidents and System Updates


We are all human and therefor make mistakes; it is a simple fact of life.  One the most common mistake is accidently searching for something in a web browser when it contains sensitive information.  Unfortunately, common user errors are not preventable and cannot be completely solved.  You can change the search provider to ensure it does not log your IP address in the first place, which should be done regardless.  For this I recommend DuckDuckGo: https://duckduckgo.com/privacy.html. 

9.12.       Limitations


When using Tor people believe that all traffic is encrypted; this is not the case.  It is a good idea that people know when traffic will be sent in clear-text. As I said before, Tor works with many applications including your instant messaging applications, remote logins and many other applications based on the TCP protocol, but not the UDP protocol.  Voice and video traffic are examples of data that will likely be using UDP traffic; this means they are generally not safe to use.  This includes programs such as Skype, Google Voice, ChatRoulette, or Omegle.  Those programs/websites (when using webcam) will not be encrypted therefor they have no anonymity.

Even though I would not recommend it, you can send all traffic through a VPN and run the VPN through Tor.  Make sure to configure the VPN to use TCP traffic instead of the default UDP traffic though first.  Also know that there will be extreme performance degradation when doing this, so you might not even consider this feasible.

 


 
9.13.       Extra


There are also more advanced features of Polipo that you could look into that offer additional security.

Polipo offers the option to censor given HTTP headers in both client requests and server replies. The main application of this feature is to very slightly improve the user's privacy by eliminating cookies and some content-negotiation headers.   This can also be done using the FireFox windows (about:config) by configuring the Header and Referrer information.

As a number of HTTP servers and CGI scripts serve incorrect HTTP headers, Polipo uses a lax parser, meaning that incorrect HTTP headers will be ignored (a warning will be logged by default). If the variable laxHttpParser is not set (it is set by default), Polipo will use a strict parser, and refuse to serve an instance unless it could parse all the headers.  Recently, as per a new vulnerability, you should set network.websocket.enabled to False.

If you are using Linux you can create rules in the firewall (iptables) to only allow traffic through Tor and block everything else.  Doing so ensures that nothing is accidently leaked (traffic wise).  When using the Tor Browser Bundle, or a computer that is multipurpose, I would recommend blocking UDP port 53.  Port 53 is used for DNS, or Domain Name Service, and will ensure that your computer will not resolve websites without going through Tor.
* Tue 23 Apr 2013 01:47:34 PM JST

* Tue 23 Apr 2013 01:47:34 PM JST

* Tue 23 Apr 2013 01:47:34 PM JST


* Tue 23 Apr 2013 01:47:35 PM JST


* Tue 23 Apr 2013 01:47:35 PM JST



* Tue 23 Apr 2013 01:47:40 PM JST

* Tue 23 Apr 2013 01:47:40 PM JST

* Tue 23 Apr 2013 01:47:41 PM JST


* Tue 23 Apr 2013 01:47:41 PM JST


* Tue 23 Apr 2013 01:47:41 PM JST



* Tue 23 Apr 2013 01:48:05 PM JST

* Tue 23 Apr 2013 01:48:05 PM JST

* Tue 23 Apr 2013 01:48:05 PM JST


* Tue 23 Apr 2013 01:48:07 PM JST

* Tue 23 Apr 2013 01:48:07 PM JST

* Tue 23 Apr 2013 01:48:07 PM JST


* Tue 23 Apr 2013 01:48:07 PM JST


* Tue 23 Apr 2013 01:48:07 PM JST



* Tue 23 Apr 2013 01:48:07 PM JST



* Tue 23 Apr 2013 01:48:07 PM JST


 

* Tue 23 Apr 2013 01:48:07 PM JST


 

* Tue 23 Apr 2013 01:48:07 PM JST


 


* Tue 23 Apr 2013 01:48:10 PM JST

* Tue 23 Apr 2013 01:48:10 PM JST

* Tue 23 Apr 2013 01:48:11 PM JST


* Tue 23 Apr 2013 01:48:11 PM JST


* Tue 23 Apr 2013 01:48:11 PM JST

 

* Tue 23 Apr 2013 01:48:14 PM JST

* Tue 23 Apr 2013 01:48:14 PM JST

* Tue 23 Apr 2013 01:48:14 PM JST


* Tue 23 Apr 2013 01:48:17 PM JST

* Tue 23 Apr 2013 01:48:17 PM JST

* Tue 23 Apr 2013 01:48:17 PM JST


* Tue 23 Apr 2013 01:48:20 PM JST

* Tue 23 Apr 2013 01:48:20 PM JST

* Tue 23 Apr 2013 01:48:20 PM JST


* Tue 23 Apr 2013 01:48:23 PM JST

* Tue 23 Apr 2013 01:48:23 PM JST

* Tue 23 Apr 2013 01:48:23 PM JST


* Tue 23 Apr 2013 01:48:24 PM JST


* Tue 23 Apr 2013 01:48:24 PM JST

 

* Tue 23 Apr 2013 01:48:24 PM JST

 

* Tue 23 Apr 2013 01:48:24 PM JST

 


* Tue 23 Apr 2013 01:48:26 PM JST

* Tue 23 Apr 2013 01:48:26 PM JST

* Tue 23 Apr 2013 01:48:26 PM JST


* Tue 23 Apr 2013 01:49:10 PM JST

* Tue 23 Apr 2013 01:49:10 PM JST

* Tue 23 Apr 2013 01:49:10 PM JST


* Tue 23 Apr 2013 01:49:11 PM JST

* Tue 23 Apr 2013 01:49:11 PM JST

* Tue 23 Apr 2013 01:49:11 PM JST
 

* Tue 23 Apr 2013 01:49:13 PM JST

* Tue 23 Apr 2013 01:49:13 PM JST

* Tue 23 Apr 2013 01:49:13 PM JST
	

* Tue 23 Apr 2013 01:49:14 PM JST
	

* Tue 23 Apr 2013 01:49:14 PM JST
	


* Tue 23 Apr 2013 01:49:16 PM JST

* Tue 23 Apr 2013 01:49:16 PM JST

* Tue 23 Apr 2013 01:49:16 PM JST


* Tue 23 Apr 2013 01:49:21 PM JST

* Tue 23 Apr 2013 01:49:21 PM JST

* Tue 23 Apr 2013 01:49:21 PM JST
 

* Tue 23 Apr 2013 01:49:22 PM JST

* Tue 23 Apr 2013 01:49:22 PM JST

* Tue 23 Apr 2013 01:49:22 PM JST
                                          

* Tue 23 Apr 2013 01:49:28 PM JST

* Tue 23 Apr 2013 01:49:28 PM JST

* Tue 23 Apr 2013 01:49:28 PM JST
 

* Tue 23 Apr 2013 01:49:28 PM JST
 

* Tue 23 Apr 2013 01:49:28 PM JST
 
 

* Tue 23 Apr 2013 01:49:29 PM JST
 
 

* Tue 23 Apr 2013 01:49:29 PM JST
 
 


* Tue 23 Apr 2013 01:49:39 PM JST

* Tue 23 Apr 2013 01:49:39 PM JST

* Tue 23 Apr 2013 01:49:39 PM JST


* Tue 23 Apr 2013 01:49:42 PM JST

* Tue 23 Apr 2013 01:49:42 PM JST

* Tue 23 Apr 2013 01:49:42 PM JST


* Tue 23 Apr 2013 01:49:51 PM JST

* Tue 23 Apr 2013 01:49:51 PM JST

* Tue 23 Apr 2013 01:49:51 PM JST


* Tue 23 Apr 2013 01:49:57 PM JST

* Tue 23 Apr 2013 01:49:57 PM JST

* Tue 23 Apr 2013 01:49:57 PM JST


* Tue 23 Apr 2013 01:50:02 PM JST

* Tue 23 Apr 2013 01:50:02 PM JST
 
* Tue 23 Apr 2013 01:50:02 PM JST
 

* Tue 23 Apr 2013 01:50:02 PM JST
 

* Tue 23 Apr 2013 01:50:02 PM JST
 


* Tue 23 Apr 2013 01:50:05 PM JST

* Tue 23 Apr 2013 01:50:05 PM JST

* Tue 23 Apr 2013 01:50:05 PM JST


* Tue 23 Apr 2013 01:50:08 PM JST

* Tue 23 Apr 2013 01:50:08 PM JST

* Tue 23 Apr 2013 01:50:08 PM JST


* Tue 23 Apr 2013 01:50:08 PM JST


* Tue 23 Apr 2013 01:50:09 PM JST



* Tue 23 Apr 2013 01:50:09 PM JST



* Tue 23 Apr 2013 01:50:09 PM JST


 

* Tue 23 Apr 2013 01:50:11 PM JST

* Tue 23 Apr 2013 01:50:11 PM JST

* Tue 23 Apr 2013 01:50:11 PM JST


* Tue 23 Apr 2013 01:50:14 PM JST

* Tue 23 Apr 2013 01:50:14 PM JST

* Tue 23 Apr 2013 01:50:14 PM JST


* Tue 23 Apr 2013 01:50:17 PM JST

* Tue 23 Apr 2013 01:50:17 PM JST

* Tue 23 Apr 2013 01:50:17 PM JST


* Tue 23 Apr 2013 01:50:17 PM JST


* Tue 23 Apr 2013 01:50:17 PM JST

 

* Tue 23 Apr 2013 01:50:18 PM JST

* Tue 23 Apr 2013 01:50:18 PM JST

* Tue 23 Apr 2013 01:50:18 PM JST
 

* Tue 23 Apr 2013 01:50:19 PM JST
 

* Tue 23 Apr 2013 01:50:19 PM JST
 


* Tue 23 Apr 2013 01:50:21 PM JST

* Tue 23 Apr 2013 01:50:21 PM JST

* Tue 23 Apr 2013 01:50:22 PM JST


* Tue 23 Apr 2013 01:50:24 PM JST

* Tue 23 Apr 2013 01:50:24 PM JST

* Tue 23 Apr 2013 01:50:24 PM JST


* Tue 23 Apr 2013 01:50:24 PM JST


* Tue 23 Apr 2013 01:50:24 PM JST

 

* Tue 23 Apr 2013 01:50:27 PM JST

* Tue 23 Apr 2013 01:50:27 PM JST

* Tue 23 Apr 2013 01:50:27 PM JST


* Tue 23 Apr 2013 01:50:30 PM JST

* Tue 23 Apr 2013 01:50:30 PM JST

* Tue 23 Apr 2013 01:50:30 PM JST


* Tue 23 Apr 2013 01:50:33 PM JST

* Tue 23 Apr 2013 01:50:33 PM JST

* Tue 23 Apr 2013 01:50:33 PM JST


* Tue 23 Apr 2013 01:50:35 PM JST

* Tue 23 Apr 2013 01:50:35 PM JST

* Tue 23 Apr 2013 01:50:35 PM JST


* Tue 23 Apr 2013 01:50:38 PM JST

* Tue 23 Apr 2013 01:50:38 PM JST

* Tue 23 Apr 2013 01:50:38 PM JST


* Tue 23 Apr 2013 01:50:38 PM JST


* Tue 23 Apr 2013 01:50:38 PM JST

 

* Tue 23 Apr 2013 01:50:44 PM JST

* Tue 23 Apr 2013 01:50:44 PM JST

* Tue 23 Apr 2013 01:50:44 PM JST


* Tue 23 Apr 2013 01:50:47 PM JST

* Tue 23 Apr 2013 01:50:47 PM JST

* Tue 23 Apr 2013 01:50:47 PM JST


* Tue 23 Apr 2013 01:50:50 PM JST

* Tue 23 Apr 2013 01:50:50 PM JST

* Tue 23 Apr 2013 01:50:50 PM JST


* Tue 23 Apr 2013 01:50:51 PM JST


* Tue 23 Apr 2013 01:50:51 PM JST

 

* Tue 23 Apr 2013 01:50:52 PM JST

* Tue 23 Apr 2013 01:50:52 PM JST

* Tue 23 Apr 2013 01:50:52 PM JST


* Tue 23 Apr 2013 01:50:54 PM JST

* Tue 23 Apr 2013 01:50:54 PM JST

* Tue 23 Apr 2013 01:50:54 PM JST


* Tue 23 Apr 2013 01:50:55 PM JST


* Tue 23 Apr 2013 01:50:55 PM JST



* Tue 23 Apr 2013 01:51:05 PM JST

* Tue 23 Apr 2013 01:51:05 PM JST

* Tue 23 Apr 2013 01:51:05 PM JST


* Tue 23 Apr 2013 01:51:07 PM JST

* Tue 23 Apr 2013 01:51:07 PM JST

* Tue 23 Apr 2013 01:51:07 PM JST


* Tue 23 Apr 2013 01:51:09 PM JST

* Tue 23 Apr 2013 01:51:09 PM JST

* Tue 23 Apr 2013 01:51:09 PM JST


* Tue 23 Apr 2013 01:51:19 PM JST

* Tue 23 Apr 2013 01:51:19 PM JST

* Tue 23 Apr 2013 01:51:19 PM JST


* Tue 23 Apr 2013 01:51:19 PM JST


* Tue 23 Apr 2013 01:51:19 PM JST



* Tue 23 Apr 2013 01:51:20 PM JST



* Tue 23 Apr 2013 01:51:20 PM JST


 

* Tue 23 Apr 2013 01:51:21 PM JST

* Tue 23 Apr 2013 01:51:21 PM JST

* Tue 23 Apr 2013 01:51:21 PM JST


* Tue 23 Apr 2013 01:51:29 PM JST

* Tue 23 Apr 2013 01:51:29 PM JST

* Tue 23 Apr 2013 01:51:29 PM JST
 

* Tue 23 Apr 2013 01:51:29 PM JST
 

* Tue 23 Apr 2013 01:51:29 PM JST
 


* Tue 23 Apr 2013 01:51:29 PM JST
 


* Tue 23 Apr 2013 01:51:29 PM JST
 



* Tue 23 Apr 2013 01:51:31 PM JST

* Tue 23 Apr 2013 01:51:32 PM JST

* Tue 23 Apr 2013 01:51:32 PM JST


* Tue 23 Apr 2013 01:51:32 PM JST

* Tue 23 Apr 2013 01:51:33 PM JST

* Tue 23 Apr 2013 01:51:33 PM JST


* Tue 23 Apr 2013 01:51:35 PM JST

* Tue 23 Apr 2013 01:51:36 PM JST

* Tue 23 Apr 2013 01:51:36 PM JST


* Tue 23 Apr 2013 01:51:37 PM JST

* Tue 23 Apr 2013 01:51:37 PM JST

* Tue 23 Apr 2013 01:51:37 PM JST


* Tue 23 Apr 2013 01:51:39 PM JST

* Tue 23 Apr 2013 01:51:40 PM JST

* Tue 23 Apr 2013 01:51:40 PM JST


* Tue 23 Apr 2013 02:47:27 PM JST

* Tue 23 Apr 2013 02:47:27 PM JST

* Tue 23 Apr 2013 02:47:27 PM JST


* Tue 23 Apr 2013 02:47:27 PM JST


* Tue 23 Apr 2013 02:47:27 PM JST



* Tue 23 Apr 2013 02:51:04 PM JST

* Tue 23 Apr 2013 02:51:04 PM JST

* Tue 23 Apr 2013 02:51:04 PM JST


* Tue 23 Apr 2013 02:51:04 PM JST


* Tue 23 Apr 2013 02:51:04 PM JST



* Tue 23 Apr 2013 02:51:04 PM JST



* Tue 23 Apr 2013 02:51:04 PM JST




* Tue 23 Apr 2013 02:51:04 PM JST




* Tue 23 Apr 2013 02:51:04 PM JST





* Tue 23 Apr 2013 02:51:04 PM JST





* Tue 23 Apr 2013 02:51:04 PM JST






* Tue 23 Apr 2013 02:51:04 PM JST






* Tue 23 Apr 2013 02:51:04 PM JST







* Tue 23 Apr 2013 02:51:05 PM JST







* Tue 23 Apr 2013 02:51:05 PM JST








* Tue 23 Apr 2013 02:51:05 PM JST








* Tue 23 Apr 2013 02:51:05 PM JST









* Tue 23 Apr 2013 02:51:05 PM JST









* Tue 23 Apr 2013 02:51:05 PM JST










* Tue 23 Apr 2013 02:51:05 PM JST










* Tue 23 Apr 2013 02:51:05 PM JST











* Tue 23 Apr 2013 02:51:05 PM JST











* Tue 23 Apr 2013 02:51:06 PM JST












* Tue 23 Apr 2013 02:51:07 PM JST

* Tue 23 Apr 2013 02:51:07 PM JST

* Tue 23 Apr 2013 02:51:07 PM JST


* Tue 23 Apr 2013 02:51:07 PM JST


* Tue 23 Apr 2013 02:51:07 PM JST



* Tue 23 Apr 2013 02:51:08 PM JST



* Tue 23 Apr 2013 02:51:08 PM JST




* Tue 23 Apr 2013 02:51:08 PM JST




* Tue 23 Apr 2013 02:51:08 PM JST





* Tue 23 Apr 2013 02:51:09 PM JST





* Tue 23 Apr 2013 02:51:09 PM JST






* Tue 23 Apr 2013 02:51:09 PM JST






* Tue 23 Apr 2013 02:51:09 PM JST







* Tue 23 Apr 2013 02:51:10 PM JST







* Tue 23 Apr 2013 02:51:10 PM JST








* Tue 23 Apr 2013 02:54:38 PM JST
_Recommendations
* Tue 23 Apr 2013 02:54:41 PM JST
- 
* Tue 23 Apr 2013 02:54:42 PM JST
    - 
* Tue 23 Apr 2013 02:54:42 PM JST
    - 

* Tue 23 Apr 2013 02:54:49 PM JST
_Encryption
* Tue 23 Apr 2013 02:54:52 PM JST
- _Encryption
* Tue 23 Apr 2013 02:54:56 PM JST

* Tue 23 Apr 2013 02:54:56 PM JST

* Tue 23 Apr 2013 02:54:56 PM JST


* Tue 23 Apr 2013 02:54:57 PM JST


* Tue 23 Apr 2013 02:54:57 PM JST

    

* Tue 23 Apr 2013 02:55:01 PM JST
- _Data
* Tue 23 Apr 2013 02:55:03 PM JST

* Tue 23 Apr 2013 02:55:03 PM JST
    
* Tue 23 Apr 2013 02:55:03 PM JST
    

* Tue 23 Apr 2013 02:55:08 PM JST
 - _Continuity
* Tue 23 Apr 2013 02:55:10 PM JST

* Tue 23 Apr 2013 02:55:10 PM JST
   
* Tue 23 Apr 2013 02:55:10 PM JST
   

* Tue 23 Apr 2013 02:55:16 PM JST
 - _System Hardening
* Tue 23 Apr 2013 02:55:18 PM JST

* Tue 23 Apr 2013 02:55:18 PM JST
   
* Tue 23 Apr 2013 02:55:18 PM JST
   

* Tue 23 Apr 2013 02:55:22 PM JST
 - _Antivirus, Keyloggers, Firewalls, DLP ’ s, and HID ’ s
* Tue 23 Apr 2013 02:55:24 PM JST

* Tue 23 Apr 2013 02:55:25 PM JST
   
* Tue 23 Apr 2013 02:55:25 PM JST
   

* Tue 23 Apr 2013 02:55:29 PM JST
 - _Networks
* Tue 23 Apr 2013 02:55:31 PM JST

* Tue 23 Apr 2013 02:55:31 PM JST
   
* Tue 23 Apr 2013 02:55:31 PM JST
   

* Tue 23 Apr 2013 02:55:35 PM JST
 - _Web Browser Security
* Tue 23 Apr 2013 02:55:43 PM JST
 - _The CIA Triad
* Tue 23 Apr 2013 02:55:45 PM JST

* Tue 23 Apr 2013 02:55:45 PM JST
   
* Tue 23 Apr 2013 02:55:45 PM JST
   

* Tue 23 Apr 2013 03:34:26 PM JST

* Tue 23 Apr 2013 03:34:26 PM JST

* Tue 23 Apr 2013 03:34:26 PM JST


* Tue 23 Apr 2013 03:42:14 PM JST

* Tue 23 Apr 2013 03:42:14 PM JST

* Tue 23 Apr 2013 03:42:14 PM JST


* Tue 23 Apr 2013 03:42:14 PM JST


* Tue 23 Apr 2013 03:42:14 PM JST



* Tue 23 Apr 2013 03:42:15 PM JST



* Tue 23 Apr 2013 03:42:15 PM JST




* Tue 23 Apr 2013 03:42:16 PM JST

* Tue 23 Apr 2013 03:42:16 PM JST

* Tue 23 Apr 2013 03:42:17 PM JST


* Tue 23 Apr 2013 03:42:17 PM JST


* Tue 23 Apr 2013 03:42:17 PM JST



* Tue 23 Apr 2013 03:42:18 PM JST

* Tue 23 Apr 2013 03:42:18 PM JST

* Tue 23 Apr 2013 03:42:18 PM JST


* Tue 23 Apr 2013 03:42:18 PM JST


* Tue 23 Apr 2013 03:42:18 PM JST



* Tue 23 Apr 2013 03:42:19 PM JST

* Tue 23 Apr 2013 03:42:19 PM JST

* Tue 23 Apr 2013 03:42:19 PM JST


* Tue 23 Apr 2013 03:42:19 PM JST


* Tue 23 Apr 2013 03:42:19 PM JST



* Tue 23 Apr 2013 03:42:20 PM JST

* Tue 23 Apr 2013 03:42:20 PM JST

* Tue 23 Apr 2013 03:42:20 PM JST


* Tue 23 Apr 2013 03:42:20 PM JST


* Tue 23 Apr 2013 03:42:20 PM JST



* Tue 23 Apr 2013 03:42:21 PM JST

* Tue 23 Apr 2013 03:42:21 PM JST

* Tue 23 Apr 2013 03:42:21 PM JST


* Tue 23 Apr 2013 03:42:21 PM JST


* Tue 23 Apr 2013 03:42:21 PM JST

1

* Tue 23 Apr 2013 03:42:23 PM JST

* Tue 23 Apr 2013 03:42:23 PM JST

* Tue 23 Apr 2013 03:42:23 PM JST


* Tue 23 Apr 2013 03:42:23 PM JST


* Tue 23 Apr 2013 03:42:23 PM JST



* Tue 23 Apr 2013 03:42:24 PM JST

* Tue 23 Apr 2013 03:42:24 PM JST

* Tue 23 Apr 2013 03:42:24 PM JST


* Tue 23 Apr 2013 03:42:24 PM JST


* Tue 23 Apr 2013 03:42:24 PM JST



* Tue 23 Apr 2013 03:42:25 PM JST

* Tue 23 Apr 2013 03:42:25 PM JST

* Tue 23 Apr 2013 03:42:25 PM JST


* Tue 23 Apr 2013 03:42:25 PM JST


* Tue 23 Apr 2013 03:42:25 PM JST



* Tue 23 Apr 2013 03:42:25 PM JST

* Tue 23 Apr 2013 03:42:25 PM JST

* Tue 23 Apr 2013 03:42:26 PM JST


* Tue 23 Apr 2013 03:42:26 PM JST


* Tue 23 Apr 2013 03:42:26 PM JST



* Tue 23 Apr 2013 03:42:26 PM JST

* Tue 23 Apr 2013 03:42:26 PM JST

* Tue 23 Apr 2013 03:42:26 PM JST


* Tue 23 Apr 2013 03:42:26 PM JST


* Tue 23 Apr 2013 03:42:27 PM JST



* Tue 23 Apr 2013 03:42:27 PM JST

* Tue 23 Apr 2013 03:42:27 PM JST

* Tue 23 Apr 2013 03:42:27 PM JST


* Tue 23 Apr 2013 03:42:28 PM JST

* Tue 23 Apr 2013 03:42:28 PM JST

* Tue 23 Apr 2013 03:42:28 PM JST


* Tue 23 Apr 2013 03:42:29 PM JST


* Tue 23 Apr 2013 03:42:29 PM JST



* Tue 23 Apr 2013 03:42:29 PM JST

* Tue 23 Apr 2013 03:42:30 PM JST

* Tue 23 Apr 2013 03:42:30 PM JST


* Tue 23 Apr 2013 03:42:30 PM JST


* Tue 23 Apr 2013 03:42:30 PM JST



* Tue 23 Apr 2013 03:42:30 PM JST

* Tue 23 Apr 2013 03:42:31 PM JST

* Tue 23 Apr 2013 03:42:31 PM JST


* Tue 23 Apr 2013 03:42:31 PM JST


* Tue 23 Apr 2013 03:42:31 PM JST



* Tue 23 Apr 2013 03:42:32 PM JST

* Tue 23 Apr 2013 03:42:32 PM JST

* Tue 23 Apr 2013 03:42:32 PM JST


* Tue 23 Apr 2013 03:42:32 PM JST


* Tue 23 Apr 2013 03:42:32 PM JST



* Tue 23 Apr 2013 03:42:33 PM JST

* Tue 23 Apr 2013 03:42:33 PM JST

* Tue 23 Apr 2013 03:42:33 PM JST


* Tue 23 Apr 2013 03:42:33 PM JST


* Tue 23 Apr 2013 03:42:33 PM JST



* Tue 23 Apr 2013 03:42:34 PM JST

* Tue 23 Apr 2013 03:42:34 PM JST

* Tue 23 Apr 2013 03:42:34 PM JST


* Tue 23 Apr 2013 03:42:35 PM JST

* Tue 23 Apr 2013 03:42:35 PM JST

* Tue 23 Apr 2013 03:42:35 PM JST


* Tue 23 Apr 2013 03:42:35 PM JST


* Tue 23 Apr 2013 03:42:35 PM JST



* Tue 23 Apr 2013 03:42:36 PM JST

* Tue 23 Apr 2013 03:42:36 PM JST

* Tue 23 Apr 2013 03:42:36 PM JST


* Tue 23 Apr 2013 03:42:37 PM JST


* Tue 23 Apr 2013 03:42:37 PM JST



* Tue 23 Apr 2013 03:42:38 PM JST

* Tue 23 Apr 2013 03:42:38 PM JST

* Tue 23 Apr 2013 03:42:38 PM JST


* Tue 23 Apr 2013 03:42:38 PM JST


* Tue 23 Apr 2013 03:42:38 PM JST



* Tue 23 Apr 2013 03:42:39 PM JST

* Tue 23 Apr 2013 03:42:39 PM JST

* Tue 23 Apr 2013 03:42:39 PM JST


* Tue 23 Apr 2013 03:42:39 PM JST


* Tue 23 Apr 2013 03:42:39 PM JST



* Tue 23 Apr 2013 03:42:40 PM JST

* Tue 23 Apr 2013 03:42:40 PM JST

* Tue 23 Apr 2013 03:42:40 PM JST


* Tue 23 Apr 2013 03:42:40 PM JST


* Tue 23 Apr 2013 03:42:40 PM JST



* Tue 23 Apr 2013 03:42:41 PM JST

* Tue 23 Apr 2013 03:42:41 PM JST

* Tue 23 Apr 2013 03:42:41 PM JST


* Tue 23 Apr 2013 03:42:41 PM JST

* Tue 23 Apr 2013 03:42:42 PM JST

* Tue 23 Apr 2013 03:42:42 PM JST


* Tue 23 Apr 2013 03:42:44 PM JST

* Tue 23 Apr 2013 03:42:44 PM JST

* Tue 23 Apr 2013 03:42:44 PM JST


* Tue 23 Apr 2013 03:42:45 PM JST

* Tue 23 Apr 2013 03:42:45 PM JST

* Tue 23 Apr 2013 03:42:45 PM JST


* Tue 23 Apr 2013 03:42:45 PM JST


* Tue 23 Apr 2013 03:42:45 PM JST



* Tue 23 Apr 2013 03:42:46 PM JST

* Tue 23 Apr 2013 03:42:46 PM JST

* Tue 23 Apr 2013 03:42:46 PM JST


* Tue 23 Apr 2013 03:42:46 PM JST


* Tue 23 Apr 2013 03:42:46 PM JST



* Tue 23 Apr 2013 03:42:47 PM JST

* Tue 23 Apr 2013 03:42:47 PM JST

* Tue 23 Apr 2013 03:42:47 PM JST


* Tue 23 Apr 2013 03:42:47 PM JST


* Tue 23 Apr 2013 03:42:47 PM JST



* Tue 23 Apr 2013 03:42:48 PM JST

* Tue 23 Apr 2013 03:42:48 PM JST

* Tue 23 Apr 2013 03:42:48 PM JST


* Tue 23 Apr 2013 03:42:49 PM JST


* Tue 23 Apr 2013 03:42:49 PM JST



* Tue 23 Apr 2013 03:42:50 PM JST

* Tue 23 Apr 2013 03:42:50 PM JST

* Tue 23 Apr 2013 03:42:50 PM JST


* Tue 23 Apr 2013 03:42:52 PM JST

* Tue 23 Apr 2013 03:42:52 PM JST

* Tue 23 Apr 2013 03:42:52 PM JST


* Tue 23 Apr 2013 03:42:53 PM JST


* Tue 23 Apr 2013 03:42:53 PM JST



* Tue 23 Apr 2013 03:42:54 PM JST

* Tue 23 Apr 2013 03:42:54 PM JST

* Tue 23 Apr 2013 03:42:55 PM JST


* Tue 23 Apr 2013 03:42:55 PM JST


* Tue 23 Apr 2013 03:42:55 PM JST



* Tue 23 Apr 2013 03:42:59 PM JST

* Tue 23 Apr 2013 03:42:59 PM JST

* Tue 23 Apr 2013 03:42:59 PM JST


* Tue 23 Apr 2013 03:43:00 PM JST


* Tue 23 Apr 2013 03:43:00 PM JST



* Tue 23 Apr 2013 03:43:02 PM JST

* Tue 23 Apr 2013 03:43:03 PM JST

* Tue 23 Apr 2013 03:43:03 PM JST


* Tue 23 Apr 2013 03:43:03 PM JST


* Tue 23 Apr 2013 03:43:03 PM JST



* Tue 23 Apr 2013 03:43:04 PM JST

* Tue 23 Apr 2013 03:43:04 PM JST

* Tue 23 Apr 2013 03:43:04 PM JST


* Tue 23 Apr 2013 03:43:04 PM JST


* Tue 23 Apr 2013 03:43:04 PM JST



* Tue 23 Apr 2013 03:44:00 PM JST

* Tue 23 Apr 2013 03:44:00 PM JST

* Tue 23 Apr 2013 03:44:00 PM JST


* Wed 24 Apr 2013 03:13:47 PM JST
''
* Wed 24 Apr 2013 03:13:47 PM JST
         ''
* Wed 24 Apr 2013 03:19:56 PM JST
digital
* Wed 24 Apr 2013 03:33:55 PM JST
dinamick
* Wed 24 Apr 2013 03:53:44 PM JST
           'check_up': 'CHUP?', 
* Wed 24 Apr 2013 03:53:47 PM JST
           
* Wed 24 Apr 2013 03:54:43 PM JST
    
* Wed 24 Apr 2013 04:13:31 PM JST
SOUND
* Wed 24 Apr 2013 06:15:03 PM JST
class
* Wed 24 Apr 2013 06:32:55 PM JST
read()
* Wed 24 Apr 2013 06:55:31 PM JST

* Wed 24 Apr 2013 06:55:31 PM JST

* Wed 24 Apr 2013 06:55:31 PM JST
        if user is None:

* Wed 24 Apr 2013 06:55:32 PM JST
        if user is None:

* Wed 24 Apr 2013 06:55:32 PM JST
        if user is None:
            user = raw_input('user: ')

* Wed 24 Apr 2013 07:06:21 PM JST
pass
* Wed 24 Apr 2013 07:09:47 PM JST
pass
* Wed 24 Apr 2013 07:09:59 PM JST
pass
* Wed 24 Apr 2013 07:11:50 PM JST
10000
* Wed 24 Apr 2013 07:23:47 PM JST

* Wed 24 Apr 2013 07:23:47 PM JST

* Wed 24 Apr 2013 07:23:47 PM JST
        if passwd is None:

* Wed 24 Apr 2013 07:23:47 PM JST
        if passwd is None:

* Wed 24 Apr 2013 07:23:47 PM JST
        if passwd is None:
            passwd = raw_input('password: ')

* Wed 24 Apr 2013 07:29:16 PM JST
ITVD'
* Wed 24 Apr 2013 07:31:56 PM JST
POWER = {'check': 'POWR?',
         'power_on': 'POWR1',
         'power_off': 'POWR0'}

INPUT_TOGGLE = {'check': 'ITGD?',
                'toggle': 'ITGD',
                'check2': 'ITVD?',
                'tv': 'ITVD',
                '1': 'IAVD1',
                '2': 'IAVD2',
                '3': 'IAVD3',
                '4': 'IAVD4',
                '5': 'IAVD5',
                'check3': 'IDEG?',
                'digital': 'IDEG'}

CHANNEL = {'bs': 'CBSD',
           'cs': 'CCSD',
           'terrestrial': 'CTBD', # 地デジ
           'check_up': 'CHUP?',
           'check_down': 'CHDW?',
           'channel_up': 'CHUP',
           'channel_down': 'CHDW'}

INPUT_CHOICE = {'auto': 'INP40',
                'd': 'INP41',
                'video': 'INP44'}

AV_POSSITION = {'toggle': 'AVMD0',
                'normal': 'AVMD1',
                'movie': 'AVMD2',
                'game': 'AVMD3',
                'avmemory': 'AVMD4',
                'dynamic_hold': 'AVMD5',
                'dynamic': 'AVMD6',
                'pc': 'AVMD7',
                'photo': 'AVMD11'}

VOLUME = {'volume': 'VOLM'}

REGION = {}

SIZE = {'toggle': 'WIDE0',
        'normal': 'WIDE1',
        'smart': 'WIDE2',
        'wide43': 'WIDE3',
        'cinema': 'WIDE4',
        'full': 'WIDE5',
        'full2': 'WIDE6',
        'full3': 'WIDE7',
        'under_scan': 'WIDE8',
        'dotbydot': 'WIDE9',
        'wide169': 'WIDE10'}

MUTE = {'toggle': 'MUTE0',
        'mute': 'MUTE1',
        'mute_off': 'MUTE2'}

SROUND = {'toggle': 'ACSU0',
          'on': 'ACSU1',
          'off': 'ACSU2',
          'auto': 'ACSU3'}

SOUND_TOGGLE = {'check': 'ACHA?',
                'toggle': 'ACHA'}

OFF_TIMER = {'check': 'OFTM?',
             'off': 'OFTM0',
             '30': 'OFTM1',
             '60': 'OFTM2',
             '90': 'OFTM3',
             '120': 'OFTM4',
             '150': 'OFTM5'}

* Wed 24 Apr 2013 07:32:10 PM JST

* Wed 24 Apr 2013 07:32:10 PM JST

* Wed 24 Apr 2013 07:32:10 PM JST
REGION = {}

* Wed 24 Apr 2013 07:33:07 PM JST
'150'             : 
* Wed 24 Apr 2013 07:33:07 PM JST
'120'             : 
* Wed 24 Apr 2013 07:33:07 PM JST
'90'              : 
* Wed 24 Apr 2013 07:33:07 PM JST
'60'              : 
* Wed 24 Apr 2013 07:33:07 PM JST
'30'              : 
* Wed 24 Apr 2013 07:33:07 PM JST
'off'             : 
* Wed 24 Apr 2013 07:33:08 PM JST
OFF_TIMER = {'check'           : 
* Wed 24 Apr 2013 07:33:08 PM JST
'toggle'       : 
* Wed 24 Apr 2013 07:33:08 PM JST
SOUND_TOGGLE = {'check'        : 
* Wed 24 Apr 2013 07:33:08 PM JST
'auto'               : 
* Wed 24 Apr 2013 07:33:08 PM JST
'off'                : 
* Wed 24 Apr 2013 07:33:08 PM JST
'on'                 : 
* Wed 24 Apr 2013 07:33:08 PM JST
SROUND = {'toggle'             : 
* Wed 24 Apr 2013 07:33:08 PM JST
'mute_off'             : 
* Wed 24 Apr 2013 07:33:08 PM JST
'mute'                 : 
* Wed 24 Apr 2013 07:33:08 PM JST
MUTE = {'toggle'               : 
* Wed 24 Apr 2013 07:33:08 PM JST
'wide169'              : 
* Wed 24 Apr 2013 07:33:08 PM JST
'dotbydot'             : 
* Wed 24 Apr 2013 07:33:08 PM JST
'under_scan'           : 
* Wed 24 Apr 2013 07:33:08 PM JST
'full3'                : 
* Wed 24 Apr 2013 07:33:08 PM JST
'full2'                : 
* Wed 24 Apr 2013 07:33:08 PM JST
'full'                 : 
* Wed 24 Apr 2013 07:33:09 PM JST
'cinema'               : 
* Wed 24 Apr 2013 07:33:09 PM JST
'wide43'               : 
* Wed 24 Apr 2013 07:33:09 PM JST
'smart'                : 
* Wed 24 Apr 2013 07:33:09 PM JST
'normal'               : 
* Wed 24 Apr 2013 07:33:09 PM JST
SIZE = {'toggle'               : 
* Wed 24 Apr 2013 07:33:09 PM JST
VOLUME = {'volume'             : 
* Wed 24 Apr 2013 07:33:09 PM JST
'photo'        : 
* Wed 24 Apr 2013 07:33:09 PM JST
'pc'           : 
* Wed 24 Apr 2013 07:33:09 PM JST
'dynamic'      : 
* Wed 24 Apr 2013 07:33:09 PM JST
'dynamic_hold' : 
* Wed 24 Apr 2013 07:33:09 PM JST
'avmemory'     : 
* Wed 24 Apr 2013 07:33:09 PM JST
'game'         : 
* Wed 24 Apr 2013 07:33:09 PM JST
'movie'        : 
* Wed 24 Apr 2013 07:33:09 PM JST
'normal'       : 
* Wed 24 Apr 2013 07:33:09 PM JST
AV_POSSITION = {'toggle'       : 
* Wed 24 Apr 2013 07:33:10 PM JST
'video'        : 
* Wed 24 Apr 2013 07:33:10 PM JST
'd'            : 
* Wed 24 Apr 2013 07:33:10 PM JST
INPUT_CHOICE = {'auto'         : 
* Wed 24 Apr 2013 07:33:10 PM JST
'channel_down'      : 
* Wed 24 Apr 2013 07:33:10 PM JST
'channel_up'        : 
* Wed 24 Apr 2013 07:33:10 PM JST
'check_down'        : 
* Wed 24 Apr 2013 07:33:10 PM JST
'check_up'          : 
* Wed 24 Apr 2013 07:33:10 PM JST
'terrestrial'       : 
* Wed 24 Apr 2013 07:33:10 PM JST
'cs'                : 
* Wed 24 Apr 2013 07:33:10 PM JST
CHANNEL = {'bs'                : 
* Wed 24 Apr 2013 07:33:10 PM JST
'digital'      : 
* Wed 24 Apr 2013 07:33:10 PM JST
'check3'       : 
* Wed 24 Apr 2013 07:33:10 PM JST
'5'            : 
* Wed 24 Apr 2013 07:33:10 PM JST
'4'            : 
* Wed 24 Apr 2013 07:33:11 PM JST
'3'            : 
* Wed 24 Apr 2013 07:33:11 PM JST
'2'            : 
* Wed 24 Apr 2013 07:33:11 PM JST
'1'            : 
* Wed 24 Apr 2013 07:33:11 PM JST
'tv'           : 
* Wed 24 Apr 2013 07:33:11 PM JST
'check2'       : 
* Wed 24 Apr 2013 07:33:11 PM JST
'toggle'       : 
* Wed 24 Apr 2013 07:33:11 PM JST
INPUT_TOGGLE = {'check'        : 
* Wed 24 Apr 2013 07:33:11 PM JST
'power_off'           : 
* Wed 24 Apr 2013 07:33:11 PM JST
'power_on'            : 
* Wed 24 Apr 2013 07:33:11 PM JST
POWER = {'check'               : 
* Wed 24 Apr 2013 07:33:40 PM JST
# 地デジ
* Wed 24 Apr 2013 07:36:10 PM JST

* Wed 24 Apr 2013 07:36:10 PM JST

* Wed 24 Apr 2013 07:36:10 PM JST
import os

* Wed 24 Apr 2013 07:36:10 PM JST
import os

* Wed 24 Apr 2013 07:36:10 PM JST
import os
import sys

* Wed 24 Apr 2013 07:36:11 PM JST
import os
import sys

* Wed 24 Apr 2013 07:36:11 PM JST
import os
import sys
import re

* Wed 24 Apr 2013 07:36:57 PM JST
'POWR'
'ITGD'
'ITVD'
'IAVD'
'IDEG'
'CBSD'
'CCSD'
'CTBD'
'CHUP'
'CHDW'
'CHUP'
'CHDW'
'INP4'
'AVMD'
'VOLM'
'WIDE'
'MUTE'
'ACSU'
'ACHA'
'OFTM'

* Wed 24 Apr 2013 07:37:38 PM JST
    
* Wed 24 Apr 2013 07:38:28 PM JST
           
* Wed 24 Apr 2013 07:38:29 PM JST
           
* Wed 24 Apr 2013 07:38:30 PM JST
           
* Wed 24 Apr 2013 07:38:32 PM JST
           
* Wed 24 Apr 2013 07:38:33 PM JST
           
* Wed 24 Apr 2013 07:38:35 PM JST
           
* Wed 24 Apr 2013 07:38:36 PM JST
           
* Wed 24 Apr 2013 07:38:39 PM JST
           
* Wed 24 Apr 2013 07:38:40 PM JST
           
* Wed 24 Apr 2013 07:38:41 PM JST
           
* Wed 24 Apr 2013 07:38:42 PM JST
           
* Wed 24 Apr 2013 07:38:44 PM JST
           
* Wed 24 Apr 2013 07:38:46 PM JST
           
* Wed 24 Apr 2013 07:38:47 PM JST
           
* Wed 24 Apr 2013 07:38:48 PM JST
           
* Wed 24 Apr 2013 07:38:53 PM JST
           
* Wed 24 Apr 2013 07:38:55 PM JST
           
* Wed 24 Apr 2013 07:38:56 PM JST
           
* Wed 24 Apr 2013 07:42:34 PM JST
pass
* Wed 24 Apr 2013 07:48:01 PM JST
    def close(self):
        """SUMMARY

        @Return:
        """
        self.sock.close()


* Wed 24 Apr 2013 07:49:24 PM JST
n'
* Wed 24 Apr 2013 07:49:24 PM JST
cmd + '\n'
* Wed 24 Apr 2013 07:54:32 PM JST
pass
* Wed 24 Apr 2013 08:02:55 PM JST
POWER = {'check': 'POWR?',
         'power_on': 'POWR1',
         'power_off': 'POWR0'}

* Wed 24 Apr 2013 08:14:08 PM JST
8 - len(cmd) * ' '
* Wed 24 Apr 2013 08:15:57 PM JST
num = 8 - len(cmd)
* Wed 24 Apr 2013 08:16:01 PM JST
num * ' '
* Wed 24 Apr 2013 08:27:27 PM JST
cmd = 
* Wed 24 Apr 2013 08:28:34 PM JST

* Wed 24 Apr 2013 08:28:34 PM JST

* Wed 24 Apr 2013 08:28:34 PM JST
    def __init__(self, ):

* Wed 24 Apr 2013 08:28:35 PM JST
    def __init__(self, ):

* Wed 24 Apr 2013 08:28:35 PM JST
    def __init__(self, ):
        """

* Wed 24 Apr 2013 08:28:35 PM JST
    def __init__(self, ):
        """

* Wed 24 Apr 2013 08:28:35 PM JST
    def __init__(self, ):
        """
        """

* Wed 24 Apr 2013 08:30:06 PM JST
object
* Wed 24 Apr 2013 08:31:27 PM JST

* Wed 24 Apr 2013 08:31:27 PM JST

* Wed 24 Apr 2013 08:31:27 PM JST
        cmd 

* Wed 24 Apr 2013 08:33:07 PM JST
recv
* Wed 24 Apr 2013 08:33:21 PM JST
not 
* Wed 24 Apr 2013 08:34:16 PM JST
self._concat('?')
* Wed 24 Apr 2013 08:36:53 PM JST
recv = 
* Wed 24 Apr 2013 08:36:59 PM JST

* Wed 24 Apr 2013 08:36:59 PM JST

* Wed 24 Apr 2013 08:36:59 PM JST
        return 'ERR' != recv

* Wed 24 Apr 2013 08:37:14 PM JST
return 'ERR' != self._connect.send(cmd).strip()
* Wed 24 Apr 2013 08:37:21 PM JST

* Wed 24 Apr 2013 08:37:21 PM JST

* Wed 24 Apr 2013 08:37:21 PM JST
        return 'ERR' != recv

* Wed 24 Apr 2013 08:43:52 PM JST
_concat
* Wed 24 Apr 2013 08:44:46 PM JST
cmd = self._concat(
* Wed 24 Apr 2013 08:44:49 PM JST

* Wed 24 Apr 2013 08:44:49 PM JST

* Wed 24 Apr 2013 08:44:49 PM JST
        recv = self._connect.send(cmd).strip()

* Wed 24 Apr 2013 08:45:09 PM JST

* Wed 24 Apr 2013 08:45:09 PM JST

* Wed 24 Apr 2013 08:45:09 PM JST
        self._send('?')

* Wed 24 Apr 2013 08:46:15 PM JST

* Wed 24 Apr 2013 08:46:15 PM JST

* Wed 24 Apr 2013 08:46:15 PM JST
        cmd = self._concat('1')

* Wed 24 Apr 2013 08:46:34 PM JST

* Wed 24 Apr 2013 08:46:34 PM JST

* Wed 24 Apr 2013 08:46:34 PM JST
        cmd = self._concat('0')

* Wed 24 Apr 2013 08:49:56 PM JST
INPUT_TOGGLE = {'check': 'ITGD?',
                'toggle': 'ITGD',
                'check2': 'ITVD?',
                'tv': 'ITVD',
                '1': 'IAVD1',
                '2': 'IAVD2',
                '3': 'IAVD3',
                '4': 'IAVD4',
                '5': 'IAVD5',
                'check3': 'IDEG?',
                'digital': 'IDEG'}

* Wed 24 Apr 2013 08:57:32 PM JST
A_part = ''
* Wed 24 Apr 2013 09:05:36 PM JST
ERR' != 
* Wed 24 Apr 2013 09:08:09 PM JST
return 'ERR' != self._send('')
* Wed 24 Apr 2013 09:18:18 PM JST
CHANNEL = {'bs': 'CBSD',
           'cs': 'CCSD',
           'terrestrial': 'CTBD', # 地デジ
           'check_up': 'CHUP?',
           'check_down': 'CHDW?',
           'channel_up': 'CHUP',
           'channel_down': 'CHDW'}

* Wed 24 Apr 2013 09:26:45 PM JST
    def bs(self, num):
        """SUMMARY
        
        @Return:
        """
        assert 0 <= int(num) <= 999
        self.A_part = 'CBSD'
        return 'ERR' != self._send(str(num))

* Wed 24 Apr 2013 09:27:28 PM JST
    def cs(self, num):
        """SUMMARY
        
        @Return:
        """
        assert 0 <= int(num) <= 999
        self.A_part = 'CCSD'
        return 'ERR' != self._send(str(num))

* Wed 24 Apr 2013 09:31:46 PM JST
    def up(self):
        """SUMMARY
        
        @Return:
        """
        self.A_part = 'CHUP'
        return 'ERR' != self._send('')

* Wed 24 Apr 2013 09:35:24 PM JST
        self.A_part = 'CTBD'
        return 'ERR' != self._send(str(num))

* Wed 24 Apr 2013 09:35:34 PM JST
ERR' != 
* Wed 24 Apr 2013 09:35:34 PM JST
return 'ERR' != 
* Wed 24 Apr 2013 09:35:58 PM JST
    def get_ts_stat(self):
        """SUMMARY
        
        @Return:
        """
        self.A_part = 'CTBD'
        return self._send('?')

* Wed 24 Apr 2013 09:37:42 PM JST
INPUT_CHOICE = {'auto': 'INP40',
                'd': 'INP41',
                'video': 'INP44'}

* Wed 24 Apr 2013 09:42:10 PM JST
self.
* Wed 24 Apr 2013 09:49:04 PM JST
AV_POSSITION = {'toggle': 'AVMD0',
                'normal': 'AVMD1',
                'movie': 'AVMD2',
                'game': 'AVMD3',
                'avmemory': 'AVMD4',
                'dynamic_hold': 'AVMD5',
                'dynamic': 'AVMD6',
                'pc': 'AVMD7',
                'photo': 'AVMD11'}

* Wed 24 Apr 2013 09:51:36 PM JST
return 'ERR' != self._send('4')
* Wed 24 Apr 2013 09:55:08 PM JST
yas/minor-mode-on
* Wed 24 Apr 2013 10:04:54 PM JST
'ERR' != self._send('0')
* Wed 24 Apr 2013 10:05:08 PM JST
    def normal(self):
        """SUMMARY
        
        @Return:
        """
        return 'ERR' != self._send('1')

* Wed 24 Apr 2013 10:05:11 PM JST
normal
* Wed 24 Apr 2013 10:05:34 PM JST
    def movie(self):
        """SUMMARY
        
        @Return:
        """
        return 'ERR' != self._send('2')

* Wed 24 Apr 2013 10:05:40 PM JST
movie
* Wed 24 Apr 2013 10:05:59 PM JST
    def game(self):
        """SUMMARY
        
        @Return:
        """
        return 'ERR' != self._send('3')

* Wed 24 Apr 2013 10:09:41 PM JST
VOLUME = {'volume': 'VOLM'}
* Wed 24 Apr 2013 10:20:07 PM JST
SIZE = {'toggle': 'WIDE0',
        'normal': 'WIDE1',
        'smart': 'WIDE2',
        'wide43': 'WIDE3',
        'cinema': 'WIDE4',
        'full': 'WIDE5',
        'full2': 'WIDE6',
        'full3': 'WIDE7',
        'under_scan': 'WIDE8',
        'dotbydot': 'WIDE9',
        'wide169': 'WIDE10'}

* Wed 24 Apr 2013 10:22:04 PM JST
return self._send('????')
* Wed 24 Apr 2013 10:22:35 PM JST
return 'ERR' != self._send('6')
* Wed 24 Apr 2013 10:22:48 PM JST
    def toggle(self):
        """SUMMARY
        
        @Return:
        """
        return 'ERR' != self._send('0')

* Wed 24 Apr 2013 10:22:58 PM JST
    def toggle(self):
        """SUMMARY
        
        @Return:
        """
        return 'ERR' != self._send('0')


* Wed 24 Apr 2013 10:23:19 PM JST
toggle
* Wed 24 Apr 2013 10:23:34 PM JST
toggle
* Wed 24 Apr 2013 10:23:55 PM JST
toggle
* Wed 24 Apr 2013 10:24:13 PM JST
toggle
* Wed 24 Apr 2013 10:24:31 PM JST
toggle
* Wed 24 Apr 2013 10:24:40 PM JST
toggle
* Wed 24 Apr 2013 10:25:06 PM JST
toggle
* Wed 24 Apr 2013 10:25:21 PM JST
toggle
* Wed 24 Apr 2013 10:25:39 PM JST
toggle
* Wed 24 Apr 2013 10:25:57 PM JST
toggle
* Wed 24 Apr 2013 10:27:07 PM JST
MUTE = {'toggle': 'MUTE0',
        'mute': 'MUTE1',
        'mute_off': 'MUTE2'}

* Wed 24 Apr 2013 10:28:34 PM JST
return 'ERR' != self._send('10')
* Wed 24 Apr 2013 10:28:46 PM JST
ERR' != 
* Wed 24 Apr 2013 10:29:07 PM JST
return self._
* Wed 24 Apr 2013 10:29:11 PM JST
        return 'ERR' != self._send('10')
* Wed 24 Apr 2013 10:30:13 PM JST
    def toggle(self):
        """SUMMARY
        
        @Return:
        """
        return 'ERR' != self._send('0')

* Wed 24 Apr 2013 10:30:17 PM JST
toggle
* Wed 24 Apr 2013 10:30:36 PM JST
    def mute(self):
        """SUMMARY
        
        @Return:
        """
        return 'ERR' != self._send('1')

* Wed 24 Apr 2013 10:30:41 PM JST
mute
* Wed 24 Apr 2013 10:30:45 PM JST
mute
* Wed 24 Apr 2013 10:34:59 PM JST
    def toggle(self):
        """SUMMARY
        
        @Return:
        """
        return 'ERR' != self._send('0')

* Wed 24 Apr 2013 10:35:14 PM JST
    def toggle(self):
        """SUMMARY
        
        @Return:
        """
        return 'ERR' != self._send('0')

    def on(self):
        """SUMMARY
        
        @Return:
        """
        return 'ERR' != self._send('1')
    
    def off(self):
        """SUMMARY
        
        @Return:
        """
        return 'ERR' != self._send('2')

* Wed 24 Apr 2013 10:37:49 PM JST
    def toggle(self):
        """SUMMARY
        
        @Return:
        """
        return 'ERR' != self._send('0')

* Wed 24 Apr 2013 10:43:40 PM JST
return 'ERR' != self._send('')
* Wed 24 Apr 2013 10:43:53 PM JST
    def off30(self):
        """SUMMARY
        
        @Return:
        """
        return 'ERR' != self._send('1')

* Wed 24 Apr 2013 10:44:10 PM JST
    def off60(self):
        """SUMMARY
        
        @Return:
        """
        return 'ERR' != self._send('2')

* Wed 24 Apr 2013 10:44:54 PM JST
    def off120(self):
        """SUMMARY
        
        @Return:
        """
        return 'ERR' != self._send('4')

* Wed 24 Apr 2013 10:46:30 PM JST
return 'ERR' != self._send('1')
* Wed 24 Apr 2013 10:49:20 PM JST
self._send('0')
* Wed 24 Apr 2013 10:57:16 PM JST
class Connect / __del__
class _RCMD / class _RCMD
class _RCMD / _concat
class _RCMD / _send
class _Power / class _Power
class _Power / __init__
class _Power / isactive
class _Power / on
class _Power / off
class _InputToggle / class _InputToggle
class _InputToggle / __init__
class _InputToggle / get_status
class _InputToggle / toggle
class _InputToggle / tv
class _InputToggle / switch
class _InputToggle / digital
class _Channel / class _Channel
class _Channel / __init__
class _Channel / bs
class _Channel / cs
class _Channel / ts
class _Channel / get_bs_stat
class _Channel / get_cs_stat
class _Channel / get_ts_stat
class _Channel / up
class _Channel / down
class _InputDevice / class _InputDevice
class _InputDevice / __init__
class _InputDevice / auto
class _InputDevice / d
class _InputDevice / video
class _AvPossition / class _AvPossition
class _AvPossition / __init__
class _AvPossition / get_stat
class _AvPossition / toggle
class _AvPossition / normal
class _AvPossition / movie
class _AvPossition / game
class _AvPossition / avmemory
class _AvPossition / dynamic_hold
class _AvPossition / dynamic
class _AvPossition / pc
class _AvPossition / photo
class _Volume / class _Volume
class _Volume / __init__
class _Volume / get_volume
class _Volume / set_volume
class _Region / class _Region
class _Region / __init__
class _Size / class _Size
class _Size / __init__
class _Size / get_stat
class _Size / toggle
class _Size / normal
class _Size / smartzoom
class _Size / wide43
class _Size / cinema
class _Size / full
class _Size / full1
class _Size / full2
class _Size / underscan
class _Size / dot_by_dot
class _Size / wide169
class _Mute / class _Mute
class _Mute / __init__
class _Mute / get_stat
class _Mute / toggle
class _Mute / on
class _Mute / off
class _Surround / class _Surround
class _Surround / __init__
class _Surround / toggle
class _Surround / on
class _Surround / off
class _Surround / auto
class _Actoggle / class _Actoggle
class _Actoggle / __init__
class _Actoggle / toggle
class _OffTimer / class _OffTimer
class _OffTimer / __init__
class _OffTimer / get_stat
class _OffTimer / reset
class _OffTimer / off30
class _OffTimer / off60
class _OffTimer / off90
class _OffTimer / off120
class _OffTimer / off150
test

* Wed 24 Apr 2013 11:00:55 PM JST
self.connect
* Thu 25 Apr 2013 02:16:02 AM JST
off
* Thu 25 Apr 2013 02:16:08 AM JST
off
* Thu 25 Apr 2013 02:16:14 AM JST
off
* Thu 25 Apr 2013 02:16:22 AM JST
off
* Thu 25 Apr 2013 02:16:28 AM JST
off
* Thu 25 Apr 2013 02:26:20 AM JST
Aquos
* Thu 25 Apr 2013 02:41:35 AM JST
class _RCMD(object):
    """Remote Command.
    """

    def _concat(self, B_part):
        """SUMMARY

        @Return:
        """
        return self.A_part + B_part

    def _send(self, B_part):
        """SUMMARY

        @Arguments:

        - `B_part`:

        @Return:
        """
        cmd = self._concat(B_part)
        return self._connect.send(cmd).strip()


class _Power(_RCMD):
    """
    """
    A_part = 'POWR'

    def __init__(self, connect):
        """

        Arguments:
        - `connect`:
        """
        self._connect = connect

* Thu 25 Apr 2013 02:42:01 AM JST
    def __init__(self, connect):
        """

        Arguments:
        - `connect`:
        """
        self._connect = connect

* Thu 25 Apr 2013 02:42:09 AM JST
connect
* Thu 25 Apr 2013 02:42:26 AM JST

* Thu 25 Apr 2013 02:42:26 AM JST

* Thu 25 Apr 2013 02:42:26 AM JST
        self._connect = connect

* Thu 25 Apr 2013 02:42:59 AM JST
A_part = 'POWR'
* Thu 25 Apr 2013 02:45:15 AM JST
    def __init__(self, connect):
        """

        Arguments:
        - `connect`:
        """
        self._connect = connect


* Thu 25 Apr 2013 02:48:49 AM JST
CMDLIST = ['POWR', 'ITGD', 'ITVD', 'IAVD', 'IDEG', 'CBSD', 'CCSD', 'CTBD',
           'CHUP', 'CHDW', 'CHUP', 'CHDW', 'INP4', 'AVMD', 'VOLM', 'WIDE',
           'MUTE', 'ACSU', 'ACHA', 'OFTM']

* Thu 25 Apr 2013 02:52:16 AM JST
SUMMARY
* Thu 25 Apr 2013 02:52:43 AM JST
@Return:
* Thu 25 Apr 2013 02:52:44 AM JST
        @Return:
* Thu 25 Apr 2013 02:52:46 AM JST
        
* Thu 25 Apr 2013 02:52:55 AM JST

* Thu 25 Apr 2013 02:52:55 AM JST

* Thu 25 Apr 2013 02:52:55 AM JST
        """SUMMARY

* Thu 25 Apr 2013 02:52:56 AM JST

* Thu 25 Apr 2013 02:52:56 AM JST

* Thu 25 Apr 2013 02:52:56 AM JST
        @Return:

* Thu 25 Apr 2013 02:52:57 AM JST
        @Return:

* Thu 25 Apr 2013 02:52:57 AM JST
        @Return:
        """

* Thu 25 Apr 2013 02:55:08 AM JST
        self._host = host
        self._port = port

* Thu 25 Apr 2013 02:55:53 AM JST
host=
* Thu 25 Apr 2013 02:55:55 AM JST
port=
* Thu 25 Apr 2013 02:55:57 AM JST
user=
* Thu 25 Apr 2013 02:55:59 AM JST
passwd=
* Thu 25 Apr 2013 03:00:14 AM JST
assert 0 <= int(port) <= 65535, '%d port number invalid range!!' % int(port)
* Thu 25 Apr 2013 03:03:10 AM JST
assert 0 <= int(port) <= 65535, ('port number %d invalid range!!'
                                         'Set 0 to 65535.' % int(port))
* Thu 25 Apr 2013 03:03:54 AM JST
assert 0 <= int(port) <= 65535, ('port number %d invalid range!!\n'
                                         'Set 0 to 65535.' % int(port))
* Thu 25 Apr 2013 03:04:13 AM JST
assert 0 <= int(port) <= 65535, ('port number %d invalid range!! '
                                         'Set 0 to 65535.' % int(port))
* Thu 25 Apr 2013 03:12:01 AM JST

* Thu 25 Apr 2013 03:12:02 AM JST

* Thu 25 Apr 2013 03:12:02 AM JST
        if self._user is None:

* Thu 25 Apr 2013 03:12:02 AM JST
        if self._user is None:

* Thu 25 Apr 2013 03:12:02 AM JST
        if self._user is None:
            self._user = raw_input('user: ')

* Thu 25 Apr 2013 03:12:04 AM JST

* Thu 25 Apr 2013 03:12:04 AM JST

* Thu 25 Apr 2013 03:12:04 AM JST
        if self._passwd is None:

* Thu 25 Apr 2013 03:12:04 AM JST
        if self._passwd is None:

* Thu 25 Apr 2013 03:12:04 AM JST
        if self._passwd is None:
            self._passwd = raw_input('password: ')

* Thu 25 Apr 2013 03:18:49 AM JST
        if not self._user.endswith('\n'):
            self._user += '\n' 

* Thu 25 Apr 2013 03:34:21 AM JST
~/.pylib/
* Thu 25 Apr 2013 04:54:24 AM JST
/opt/tor/
* Thu 25 Apr 2013 05:46:21 AM JST
mwindows
* Thu 25 Apr 2013 05:46:26 AM JST
mwindows
* Thu 25 Apr 2013 04:10:41 PM JST
SUMMARY
* Thu 25 Apr 2013 04:11:15 PM JST
for
* Thu 25 Apr 2013 04:11:27 PM JST
tv
* Thu 25 Apr 2013 04:11:47 PM JST
SUMMARY
* Thu 25 Apr 2013 04:12:20 PM JST
SUMMARY
* Thu 25 Apr 2013 04:12:52 PM JST
SUMMARY
* Thu 25 Apr 2013 04:12:54 PM JST
SUMMARY
* Thu 25 Apr 2013 04:12:54 PM JST
SUMMARY        """

* Thu 25 Apr 2013 04:12:55 PM JST

* Thu 25 Apr 2013 04:12:55 PM JST

* Thu 25 Apr 2013 04:12:55 PM JST
        @Return:

* Thu 25 Apr 2013 04:12:56 PM JST
        @Return:

* Thu 25 Apr 2013 04:12:56 PM JST
        @Return:
        """

* Thu 25 Apr 2013 04:13:03 PM JST
    
* Thu 25 Apr 2013 04:14:12 PM JST
    def __repr__(self):
        type_name = type(self).__name__
        attr_strings = []
        for name, value in self._get_attr():
            attr_strings.append('%s=%r' % (name, value))
        return '%s(%s)' % (type_name, ', '.join(attr_strings))

* Thu 25 Apr 2013 04:15:02 PM JST

* Thu 25 Apr 2013 04:15:02 PM JST

* Thu 25 Apr 2013 04:15:02 PM JST
        type_name = type(self).__name__

* Thu 25 Apr 2013 04:15:03 PM JST
        type_name = type(self).__name__

* Thu 25 Apr 2013 04:15:03 PM JST
        type_name = type(self).__name__
        attr_strings = []

* Thu 25 Apr 2013 04:15:03 PM JST
        type_name = type(self).__name__
        attr_strings = []

* Thu 25 Apr 2013 04:15:03 PM JST
        type_name = type(self).__name__
        attr_strings = []
        for name, value in self._get_attr():

* Thu 25 Apr 2013 04:15:04 PM JST
        type_name = type(self).__name__
        attr_strings = []
        for name, value in self._get_attr():

* Thu 25 Apr 2013 04:15:04 PM JST
        type_name = type(self).__name__
        attr_strings = []
        for name, value in self._get_attr():
            attr_strings.append('%s=%r' % (name, value))

* Thu 25 Apr 2013 04:15:04 PM JST
        type_name = type(self).__name__
        attr_strings = []
        for name, value in self._get_attr():
            attr_strings.append('%s=%r' % (name, value))

* Thu 25 Apr 2013 04:15:05 PM JST
        type_name = type(self).__name__
        attr_strings = []
        for name, value in self._get_attr():
            attr_strings.append('%s=%r' % (name, value))
        return '%s(%s)' % (type_name, ', '.join(attr_strings))

* Thu 25 Apr 2013 04:16:31 PM JST
return
* Thu 25 Apr 2013 04:17:35 PM JST

* Thu 25 Apr 2013 04:17:35 PM JST

* Thu 25 Apr 2013 04:17:35 PM JST
        print('hello')

* Thu 25 Apr 2013 04:18:14 PM JST
print(
* Thu 25 Apr 2013 04:47:34 PM JST
class _RCMD(object):
    """Remote Command."""

    def __init__(self, connect):
        """

        Arguments:
        - `connect`:
        """
        self._connect = connect

    def __repr__(self):
        return self.__doc__

    def _concat(self, B_part):
        """SUMMARY

        @Return:
        """
        return self.A_part + B_part

    def _send(self, B_part):
        """SUMMARY

        @Arguments:

        - `B_part`:

        @Return:
        """
        cmd = self._concat(B_part)
        return self._connect.send(cmd).strip()


class _Power(_RCMD):
    """
    """
    A_part = 'POWR'

    def isactive(self):
        """SUMMARY
        1 = ACTIVE
        0 = NOT ACTIVE

        @Return:
        """
        return '1' == self._send('?')

    def on(self):
        """SUMMARY

        @Return:
        """
        return 'ERR' != self._send('1')

    def off(self):
        """SUMMARY

        @Return:
        """
        return 'ERR' != self._send('0')

* Thu 25 Apr 2013 04:48:32 PM JST

* Thu 25 Apr 2013 04:48:32 PM JST

* Thu 25 Apr 2013 04:48:32 PM JST
import

* Thu 25 Apr 2013 04:52:42 PM JST
class Aquos(object):
    """Remote controller for Aquos TV.

    - `power`: On or Off Power
    - `input_toggle`:
    - `channel`:
    - `input_device`:
    - `av_possition`:
    - `volume`:
    - `region`:
    - `size`:
    - `mute`:
    - `surround`:
    - `ac_toggle`:
    - `off_timer`:
    """

    def __init__(self, host, port, user, passwd):
        """
        """
        self._connect = _Connect(host, port, user, passwd)
        self._connect.connect()

        self.power = _Power(self._connect)
        self.input_toggle = _InputToggle(self._connect)
        self.channel = _Channel(self._connect)
        self.input_device = _InputDevice(self._connect)
        self.av_possition = _AVPossition(self._connect)
        self.volume = _Volume(self._connect)
        self.region = _Region(self._connect)
        self.size = _Size(self._connect)
        self.mute = _Mute(self._connect)
        self.surround = _Surround(self._connect)
        self.ac_toggle = _ACToggle(self._connect)
        self.off_timer = _OffTimer(self._connect)

    def close(self):
        """Close connection."""
        self._connect.close()

    def __del__(self):
        self.close()

* Thu 25 Apr 2013 04:53:07 PM JST

* Thu 25 Apr 2013 04:53:07 PM JST

* Thu 25 Apr 2013 04:53:07 PM JST
        self._connect = _Connect(host, port, user, passwd)

* Thu 25 Apr 2013 04:53:10 PM JST
passwd
* Thu 25 Apr 2013 04:53:11 PM JST
user, passwd
* Thu 25 Apr 2013 04:53:11 PM JST
port, user, passwd
* Thu 25 Apr 2013 04:53:14 PM JST

* Thu 25 Apr 2013 04:53:14 PM JST

* Thu 25 Apr 2013 04:53:14 PM JST
        self._connect.connect()

* Thu 25 Apr 2013 04:53:16 PM JST
_connect
* Thu 25 Apr 2013 04:55:32 PM JST
this is power
* Thu 25 Apr 2013 04:56:52 PM JST
    """Management Power for Aquos.

    - `isactive`:
    - `on`:
    - `off`:
    
    """

* Thu 25 Apr 2013 05:01:07 PM JST
class _InputDevice / class _InputDevice
class _InputDevice / auto
class _InputDevice / d
class _InputDevice / video

* Thu 25 Apr 2013 05:01:15 PM JST

* Thu 25 Apr 2013 05:01:15 PM JST

* Thu 25 Apr 2013 05:01:15 PM JST
class _InputDevice / class _InputDevice

* Thu 25 Apr 2013 05:01:22 PM JST
class _InputDevice /
* Thu 25 Apr 2013 05:01:22 PM JST
class _InputDevice /
* Thu 25 Apr 2013 05:01:22 PM JST
class _InputDevice /
* Thu 25 Apr 2013 05:01:32 PM JST
`auto`:
`d`:
`video`:

* Thu 25 Apr 2013 05:02:13 PM JST

* Thu 25 Apr 2013 05:02:14 PM JST

* Thu 25 Apr 2013 05:02:14 PM JST
class _AvPossition / class _AvPossition

* Thu 25 Apr 2013 05:02:18 PM JST
class _AvPossition / 
* Thu 25 Apr 2013 05:02:19 PM JST
class _AvPossition / 
* Thu 25 Apr 2013 05:02:19 PM JST
class _AvPossition / 
* Thu 25 Apr 2013 05:02:19 PM JST
class _AvPossition / 
* Thu 25 Apr 2013 05:02:19 PM JST
class _AvPossition / 
* Thu 25 Apr 2013 05:02:19 PM JST
class _AvPossition / 
* Thu 25 Apr 2013 05:02:19 PM JST
class _AvPossition / 
* Thu 25 Apr 2013 05:02:19 PM JST
class _AvPossition / 
* Thu 25 Apr 2013 05:02:19 PM JST
class _AvPossition / 
* Thu 25 Apr 2013 05:02:19 PM JST
class _AvPossition / 
* Thu 25 Apr 2013 05:02:19 PM JST
class _AvPossition / 
* Thu 25 Apr 2013 05:02:28 PM JST
- `__init__`
- `get_stat`
- `toggle`
- `normal`
- `movie`
- `game`
- `avmemory`
- `dynamic_hold`
- `dynamic`
- `pc`
- `photo`

* Thu 25 Apr 2013 05:03:05 PM JST

* Thu 25 Apr 2013 05:03:05 PM JST

* Thu 25 Apr 2013 05:03:05 PM JST
class _Volume / class _Volume

* Thu 25 Apr 2013 05:03:10 PM JST
class _Volume / class _Volume

* Thu 25 Apr 2013 05:03:10 PM JST
class _Volume / class _Volume
class _Volume / __init__

* Thu 25 Apr 2013 05:03:21 PM JST

* Thu 25 Apr 2013 05:03:21 PM JST

* Thu 25 Apr 2013 05:03:21 PM JST
class _Region / class _Region

* Thu 25 Apr 2013 05:03:22 PM JST
class _Region / class _Region

* Thu 25 Apr 2013 05:03:22 PM JST
class _Region / class _Region
class _Region / __init__

* Thu 25 Apr 2013 05:03:25 PM JST
class _Region / class _Region
class _Region / __init__

* Thu 25 Apr 2013 05:03:25 PM JST
class _Region / class _Region
class _Region / __init__
class _Size / class _Size

* Thu 25 Apr 2013 05:03:26 PM JST
class _Region / class _Region
class _Region / __init__
class _Size / class _Size

* Thu 25 Apr 2013 05:03:27 PM JST
class _Region / class _Region
class _Region / __init__
class _Size / class _Size
class _Size / __init__

* Thu 25 Apr 2013 05:03:43 PM JST
class _Volume / 
* Thu 25 Apr 2013 05:03:43 PM JST
class _Volume / 
* Thu 25 Apr 2013 05:03:52 PM JST
- `get_volume`:
- `set_volume`:

* Thu 25 Apr 2013 05:04:31 PM JST
class _Size / 
* Thu 25 Apr 2013 05:04:31 PM JST
class _Size / 
* Thu 25 Apr 2013 05:04:31 PM JST
class _Size / 
* Thu 25 Apr 2013 05:04:31 PM JST
class _Size / 
* Thu 25 Apr 2013 05:04:31 PM JST
class _Size / 
* Thu 25 Apr 2013 05:04:31 PM JST
class _Size / 
* Thu 25 Apr 2013 05:04:31 PM JST
class _Size / 
* Thu 25 Apr 2013 05:04:31 PM JST
class _Size / 
* Thu 25 Apr 2013 05:04:31 PM JST
class _Size / 
* Thu 25 Apr 2013 05:04:31 PM JST
class _Size / 
* Thu 25 Apr 2013 05:04:31 PM JST
class _Size / 
* Thu 25 Apr 2013 05:04:31 PM JST
class _Size / 
* Thu 25 Apr 2013 05:04:43 PM JST
- `get_stat`:
- `toggle`:
- `normal`:
- `smartzoom`:
- `wide43`:
- `cinema`:
- `full`:
- `full1`:
- `full2`:
- `underscan`:
- `dot_by_dot`:
- `wide169`:

* Thu 25 Apr 2013 05:05:14 PM JST

* Thu 25 Apr 2013 05:05:14 PM JST

* Thu 25 Apr 2013 05:05:15 PM JST
class _Mute / class _Mute

* Thu 25 Apr 2013 05:05:15 PM JST
class _Mute / class _Mute

* Thu 25 Apr 2013 05:05:15 PM JST
class _Mute / class _Mute
class _Mute / __init__

* Thu 25 Apr 2013 05:05:19 PM JST
class _Mute / 
* Thu 25 Apr 2013 05:05:19 PM JST
class _Mute / 
* Thu 25 Apr 2013 05:05:19 PM JST
class _Mute / 
* Thu 25 Apr 2013 05:05:19 PM JST
class _Mute / 
* Thu 25 Apr 2013 05:05:28 PM JST
- `get_stat`:
- `toggle`:
- `on`:
- `off`:

* Thu 25 Apr 2013 05:05:58 PM JST

* Thu 25 Apr 2013 05:05:59 PM JST

* Thu 25 Apr 2013 05:05:59 PM JST
class _Surround / class _Surround

* Thu 25 Apr 2013 05:05:59 PM JST
class _Surround / class _Surround

* Thu 25 Apr 2013 05:05:59 PM JST
class _Surround / class _Surround
class _Surround / __init__

* Thu 25 Apr 2013 05:06:10 PM JST
class _Surround / 
* Thu 25 Apr 2013 05:06:10 PM JST
class _Surround / 
* Thu 25 Apr 2013 05:06:10 PM JST
class _Surround / 
* Thu 25 Apr 2013 05:06:10 PM JST
class _Surround / 
* Thu 25 Apr 2013 05:06:20 PM JST
- `toggle`:
- `on`:
- `off`:
- `auto`:

* Thu 25 Apr 2013 05:06:48 PM JST

* Thu 25 Apr 2013 05:06:48 PM JST

* Thu 25 Apr 2013 05:06:48 PM JST
class _Actoggle / class _Actoggle

* Thu 25 Apr 2013 05:06:48 PM JST
class _Actoggle / class _Actoggle

* Thu 25 Apr 2013 05:06:48 PM JST
class _Actoggle / class _Actoggle
class _Actoggle / __init__

* Thu 25 Apr 2013 05:07:23 PM JST
toggle
* Thu 25 Apr 2013 05:07:35 PM JST

* Thu 25 Apr 2013 05:07:35 PM JST

* Thu 25 Apr 2013 05:07:35 PM JST
class _OffTimer / class _OffTimer

* Thu 25 Apr 2013 05:07:35 PM JST
class _OffTimer / class _OffTimer

* Thu 25 Apr 2013 05:07:35 PM JST
class _OffTimer / class _OffTimer
class _OffTimer / __init__

* Thu 25 Apr 2013 05:07:40 PM JST
class _OffTimer / 
* Thu 25 Apr 2013 05:07:40 PM JST
class _OffTimer / 
* Thu 25 Apr 2013 05:07:40 PM JST
class _OffTimer / 
* Thu 25 Apr 2013 05:07:40 PM JST
class _OffTimer / 
* Thu 25 Apr 2013 05:07:40 PM JST
class _OffTimer / 
* Thu 25 Apr 2013 05:07:40 PM JST
class _OffTimer / 
* Thu 25 Apr 2013 05:07:40 PM JST
class _OffTimer / 
* Thu 25 Apr 2013 05:07:49 PM JST
- `get_stat`:
- `reset`:
- `off30`:
- `off60`:
- `off90`:
- `off120`:
- `off150`:

* Thu 25 Apr 2013 05:19:56 PM JST
SUMMARY
* Thu 25 Apr 2013 05:21:11 PM JST

* Thu 25 Apr 2013 05:21:11 PM JST

* Thu 25 Apr 2013 05:21:11 PM JST
        1 = ACTIVE

* Thu 25 Apr 2013 05:21:11 PM JST
        1 = ACTIVE

* Thu 25 Apr 2013 05:21:11 PM JST
        1 = ACTIVE
        0 = NOT ACTIVE

* Thu 25 Apr 2013 05:21:25 PM JST
SUMMARY
* Thu 25 Apr 2013 05:21:55 PM JST
SUMMARY
* Thu 25 Apr 2013 05:25:30 PM JST
SUMMARY
* Thu 25 Apr 2013 05:33:35 PM JST

* Thu 25 Apr 2013 05:33:35 PM JST

* Thu 25 Apr 2013 05:33:35 PM JST
        """

* Thu 25 Apr 2013 05:33:35 PM JST
        """

* Thu 25 Apr 2013 05:33:35 PM JST
        """
        """

* Thu 25 Apr 2013 05:57:29 PM JST
@Return:
* Thu 25 Apr 2013 05:57:30 PM JST
        @Return:
* Thu 25 Apr 2013 05:57:32 PM JST
        
* Thu 25 Apr 2013 06:03:51 PM JST

* Thu 25 Apr 2013 06:03:51 PM JST

* Thu 25 Apr 2013 06:03:51 PM JST
        if len(cmd) < 9:

* Thu 25 Apr 2013 06:03:51 PM JST
        if len(cmd) < 9:

* Thu 25 Apr 2013 06:03:51 PM JST
        if len(cmd) < 9:
            num = 8 - len(cmd)

* Thu 25 Apr 2013 06:03:57 PM JST
+= num * ' '
* Thu 25 Apr 2013 06:04:34 PM JST
+= num * ' '
* Thu 25 Apr 2013 06:11:39 PM JST
connect 
* Thu 25 Apr 2013 06:11:57 PM JST
SUMMARY
* Thu 25 Apr 2013 06:12:30 PM JST
ret
* Thu 25 Apr 2013 06:12:42 PM JST
SUMMARY
* Thu 25 Apr 2013 06:14:58 PM JST
SUMMARY
* Thu 25 Apr 2013 06:15:03 PM JST
SUMMARY
* Thu 25 Apr 2013 06:15:06 PM JST
SUMMARY
* Thu 25 Apr 2013 06:15:10 PM JST
SUMMARY
* Thu 25 Apr 2013 06:15:57 PM JST
result
* Thu 25 Apr 2013 06:19:48 PM JST
bool for success/failure
* Thu 25 Apr 2013 06:21:06 PM JST
bool for success/failure
* Thu 25 Apr 2013 06:26:15 PM JST

* Thu 25 Apr 2013 06:26:16 PM JST

* Thu 25 Apr 2013 06:26:16 PM JST
    """

* Thu 25 Apr 2013 06:26:16 PM JST
    """

* Thu 25 Apr 2013 06:26:16 PM JST
    """
    """

* Thu 25 Apr 2013 06:27:26 PM JST
    
* Thu 25 Apr 2013 06:55:52 PM JST
pass
* Thu 25 Apr 2013 07:00:05 PM JST

* Thu 25 Apr 2013 07:00:05 PM JST

* Thu 25 Apr 2013 07:00:05 PM JST
        """SUMMARY

* Thu 25 Apr 2013 07:00:05 PM JST

* Thu 25 Apr 2013 07:00:05 PM JST

* Thu 25 Apr 2013 07:00:05 PM JST
        @Return:

* Thu 25 Apr 2013 07:00:05 PM JST
        @Return:

* Thu 25 Apr 2013 07:00:05 PM JST
        @Return:
        """

* Thu 25 Apr 2013 07:00:33 PM JST
    def is_standby(self):
        """SUMMARY

        @Return:
        """
        return portscan.scan(self._host, self._port)

* Thu 25 Apr 2013 07:01:56 PM JST
self)
* Thu 25 Apr 2013 07:01:57 PM JST
print(self)
* Thu 25 Apr 2013 07:18:49 PM JST
setdefaulttimeout
* Thu 25 Apr 2013 09:24:22 PM JST

* Thu 25 Apr 2013 09:24:22 PM JST

* Thu 25 Apr 2013 09:24:22 PM JST
        self.sock.setdefaulttimeout(1)

* Thu 25 Apr 2013 09:24:46 PM JST

* Thu 25 Apr 2013 09:24:46 PM JST

* Thu 25 Apr 2013 09:24:46 PM JST
        @Return:

* Thu 25 Apr 2013 09:24:48 PM JST
        
* Fri 26 Apr 2013 02:23:07 PM JST
SUMMARY
* Fri 26 Apr 2013 02:23:16 PM JST
Set
* Fri 26 Apr 2013 02:23:30 PM JST
SUMMARY
* Fri 26 Apr 2013 02:23:54 PM JST
SUMMARY
* Fri 26 Apr 2013 02:24:10 PM JST
SUMMARY
* Fri 26 Apr 2013 02:24:46 PM JST
SUMMARY
* Fri 26 Apr 2013 02:25:01 PM JST
SUMMARY
* Fri 26 Apr 2013 02:25:30 PM JST
SUMMARY
* Fri 26 Apr 2013 02:33:03 PM JST
SUMMARY
* Fri 26 Apr 2013 02:33:21 PM JST
SUMMARY
* Fri 26 Apr 2013 02:33:43 PM JST
SUMMARY
* Fri 26 Apr 2013 02:34:09 PM JST
SUMMARY
* Fri 26 Apr 2013 02:34:21 PM JST
SUMMARY
* Fri 26 Apr 2013 02:34:29 PM JST
SUMMARY
* Fri 26 Apr 2013 02:34:34 PM JST
Set 
* Fri 26 Apr 2013 02:34:46 PM JST
SUMMARY
* Fri 26 Apr 2013 02:36:07 PM JST
Minute
* Fri 26 Apr 2013 02:36:33 PM JST
minute
* Fri 26 Apr 2013 02:37:00 PM JST
SUMMARY
* Fri 26 Apr 2013 02:37:15 PM JST
Get off timer status.
* Fri 26 Apr 2013 02:37:29 PM JST
Reset off timer
* Fri 26 Apr 2013 02:37:40 PM JST
Set off timer 30 minute
* Fri 26 Apr 2013 02:37:53 PM JST
Set off timer 60 minute
* Fri 26 Apr 2013 02:37:56 PM JST
minute
* Fri 26 Apr 2013 02:38:10 PM JST
Set off timer 1 hour 30 minute
* Fri 26 Apr 2013 02:38:33 PM JST
30 minute
* Fri 26 Apr 2013 02:39:23 PM JST
Set off timer 2 hour
* Fri 26 Apr 2013 02:39:35 PM JST
Set off timer 2 hour 30 minute
* Fri 26 Apr 2013 02:39:51 PM JST
2 hour
* Fri 26 Apr 2013 02:40:33 PM JST
1 hour
* Fri 26 Apr 2013 02:41:06 PM JST
one
* Fri 26 Apr 2013 02:41:09 PM JST
one
* Fri 26 Apr 2013 02:51:58 PM JST
SUMMARY
* Fri 26 Apr 2013 02:52:10 PM JST
SUMMARY
* Fri 26 Apr 2013 02:52:31 PM JST
SUMMARY
* Fri 26 Apr 2013 02:52:39 PM JST
SUMMARY
* Fri 26 Apr 2013 02:53:32 PM JST
SUMMARY
* Fri 26 Apr 2013 02:53:42 PM JST
SUMMARY
* Fri 26 Apr 2013 02:53:53 PM JST
SUMMARY
* Fri 26 Apr 2013 02:54:06 PM JST
SUMMARY
* Fri 26 Apr 2013 02:54:23 PM JST
SUMMARY
* Fri 26 Apr 2013 02:54:34 PM JST
SUMMARY
* Fri 26 Apr 2013 02:54:59 PM JST
SUMMARY
* Fri 26 Apr 2013 02:55:13 PM JST
SUMMARY
* Fri 26 Apr 2013 02:55:23 PM JST
SUMMARY
* Fri 26 Apr 2013 02:55:34 PM JST
SUMMARY
* Fri 26 Apr 2013 02:55:46 PM JST
SUMMARY
* Sat 27 Apr 2013 05:28:13 PM JST

* Sat 27 Apr 2013 05:28:13 PM JST

* Sat 27 Apr 2013 05:28:13 PM JST
/boot/*

* Mon 29 Apr 2013 01:03:33 AM JST
ppp-58-9-146-105.revip2.asianet.co.th:80
202.171.253.108:80
199.30.136.116:7808
199.30.136.117:7808
www8331ui.sakura.ne.jp:3128
static-host119-73-40-167.link.net.pk:8118
220-132-19-136.hinet-ip.hinet.net:8080
static-host119-73-67-155.link.net.pk:8118
ks3096436.kimsufi.com:3128
181.225.41.228:8080
181.225.41.176:8080
195.70.37.190:3128
181.225.59.134:8080
mllnc3e40ed2.fixip.t-online.hu:8080
extranet.digicelgroup.com:8080
cust172-41.netcabo.co.mz:8080
94.107.236.107:80
elisa.tatais.ru:80
94.107.236.108:80
catv-80-98-237-66.catv.broadband.hu:80
119.233.255.50:81
cpe-24-59-82-193.twcny.res.rr.com:8080
199.193.248.133:110
208.92.223.68:8118
server.komatsus.com:8080
208.68.37.137:8089
125.216.144.199:8080
202.171.253.105:80
202.171.253.105:85
208.68.37.137:7808
211.195.207.62:8080
199.231.93.102:7808
123.129.214.155:80
adhistory.mernik.kz:3128
115.25.216.6:80
www8351ui.sakura.ne.jp:3128
202.171.253.105:81
218.188.13.237:8888
186.89.101.240:8080
c-75-70-56-128.hsd1.co.comcast.net:8000
201-25-100-210.cbace300.ipd.brasiltelecom.net.br:8080
202.171.253.98:80
1.9.75.8:8080
186.91.69.200:8080
bzq-82-80-224-25.cablep.bezeqint.net:80
121.58.193.116:8080
186.94.26.156:8080
* Tue 30 Apr 2013 05:45:57 PM JST
my-code-dir
* Tue 30 Apr 2013 05:48:07 PM JST
setq
* Tue 30 Apr 2013 05:50:30 PM JST

* Tue 30 Apr 2013 05:50:30 PM JST

* Tue 30 Apr 2013 05:50:30 PM JST
(defvar my-code-dir (expand-file-name "code" my-data-dir))

* Tue 30 Apr 2013 05:55:18 PM JST

* Tue 30 Apr 2013 05:55:18 PM JST

* Tue 30 Apr 2013 05:55:18 PM JST
;; (require 'doctest-mode)

* Tue 30 Apr 2013 05:59:13 PM JST
(defun py-= (arg)
  "Python operater = .
ARG is prefix argument."
  (interactive "p")
  (cond ((python-in-string/comment) (self-insert-command arg))
        ((progn (delete-horizontal-space)
                (or (equal (char-before (point)) ?>)
                    (equal (char-before (point)) ?<)
                    (equal (char-before (point)) ?!))) (smart-operator-=))
        ((py--in-condition-p)
         (insert " == "))
        (t (smart-operator-=))))
* Tue 30 Apr 2013 05:59:17 PM JST
(defun py-= (arg)
  "Python operater = .
ARG is prefix argument."
  (interactive "p")
  (cond ((python-in-string/comment) (self-insert-command arg))
        ((progn (delete-horizontal-space)
                (or (equal (char-before (point)) ?>)
                    (equal (char-before (point)) ?<)
                    (equal (char-before (point)) ?!))) (smart-operator-=))
        ((py--in-condition-p)
         (insert " == "))
        (t (smart-operator-=))))
* Tue 30 Apr 2013 05:59:42 PM JST
(defun py--in-condition-p ()
  "If in condition return t.
Else nil."
  (let ((orig_point (point)))
    (save-excursion
      (re-search-backward "^[ \t]*\\_<\\(?:if\\|elif\\|while\\)\\_>[ \t]+"
                          nil 'noerror)
      (and (looking-at
            "^[ \t]*\\(\\_<\\(?:if\\|elif\\|while\\)\\_>[ \t]+[^:]*.*:\\).*$")
           (<= (match-beginning 1) orig_point)
           (>= (match-end 1) orig_point))
      )))
* Tue 30 Apr 2013 05:59:51 PM JST

* Tue 30 Apr 2013 05:59:51 PM JST

* Tue 30 Apr 2013 05:59:51 PM JST
;;;; python

* Tue 30 Apr 2013 05:59:51 PM JST
;;;; python

* Tue 30 Apr 2013 05:59:51 PM JST
;;;; python
;;

* Tue 30 Apr 2013 06:01:21 PM JST
(defun quote-doublequote-toggle ()
  "Toggle quote <=> double quotes."
  (interactive)
  (unless (eq (what-face-at-point) 'font-lock-string-face)
    (error "Not in string."))
  (when (save-excursion
          (backward-skip-string-regexp) (looking-at "\"\"\""))
    (error "Not support triple qoutes."))
  ;; tail first
  ;; if replace head quote at first, will fontify end of buffer.
  (save-excursion
    (forward-skip-string-regexp)
    (cond ((eq ?\' (char-before (point))) (delete-char -1) (insert "\""))
          ((eq ?\" (char-before (point))) (delete-char -1) (insert "\'"))))
  ;; do not remove this. escape error match.
  ;; head quoute
  (sit-for 0)
  (save-excursion
    (backward-skip-string-regexp)
    (cond ((eq ?\' (char-after (+ (point) 1))) (forward-char) (delete-char 1) (insert "\""))
          ((eq ?\" (char-after (+ (point) 1))) (forward-char) (delete-char 1) (insert "'"))))
  )
* Tue 30 Apr 2013 06:02:24 PM JST
(defun quote-doublequote-toggle ()
  "Toggle quote <=> double quotes."
  (interactive)
  (unless (eq (what-face-at-point) 'font-lock-string-face)
    (error "Not in string."))
  (when (save-excursion
          (backward-skip-string-regexp) (looking-at "\"\"\""))
    (error "Not support triple qoutes."))
  ;; tail first
  ;; if replace head quote at first, will fontify end of buffer.
  (save-excursion
    (forward-skip-string-regexp)
    (cond ((eq ?\' (char-before (point))) (delete-char -1) (insert "\""))
          ((eq ?\" (char-before (point))) (delete-char -1) (insert "\'"))))
  ;; do not remove this. escape error match.
  ;; head quoute
  (sit-for 0)
  (save-excursion
    (backward-skip-string-regexp)
    (cond ((eq ?\' (char-after (+ (point) 1))) (forward-char) (delete-char 1) (insert "\""))
          ((eq ?\" (char-after (+ (point) 1))) (forward-char) (delete-char 1) (insert "'"))))
  )
* Tue 30 Apr 2013 06:03:11 PM JST

* Tue 30 Apr 2013 06:03:11 PM JST

* Tue 30 Apr 2013 06:03:11 PM JST
;;;; python

* Tue 30 Apr 2013 06:03:22 PM JST
(defun py-quote (args)
  "conma"
  ;;TODO: self-insert-command with args
  (interactive "p")
  (cond ((looking-at "'")
         (if (eq this-command last-command)
             (save-excursion (replace-match " " nil nil))
           (self-insert-command args)))
        ((eq ?\' (char-after (+ (point) 1)))
         (self-insert-command args) (forward-char 1))
        ((eq ?\' (char-before))
         (self-insert-command args) (backward-char 1))
        ((looking-at "[ \t\n]")
         (self-insert-command 2) (backward-char 1))
        (t (self-insert-command args))
        ))
* Tue 30 Apr 2013 06:03:34 PM JST

* Tue 30 Apr 2013 06:03:35 PM JST

* Tue 30 Apr 2013 06:03:35 PM JST
;;;;;;

* Tue 30 Apr 2013 06:20:47 PM JST
(defun t1-py-insert-debug-print ()
  "debug-print"
  (interactive)
  (save-excursion
    (goto-char (point-min))
  (let ((n 0))
    (while (re-search-forward "\\(^[ \t]*\\(:?def[ \t]+\\([a-zA-Z0-9_]+\\)[ \t]*(\\(:?[^:#]*\\))\\)[ \t]*:\\)" nil 'noerror)
      (forward-line)
      (beginning-of-line)
      (setq n (1+ n))
      (insert (make-string (current-indentation) 32)
              "print('"
              (file-name-nondirectory buffer-file-name)
              " [" (number-to-string n) "]" ; increment number
              ": "
              (match-string 3)
              "') # Debug\n")))))
* Tue 30 Apr 2013 06:21:19 PM JST
(defun t1-py-delete-debug-print ()
  "delete-debug-print"
  (interactive)
  (save-excursion
    (goto-char (point-min))
  (while (re-search-forward "print('.*\\[[[:digit:]]*\\].*#.*Debug" nil 'noerror)
    (kill-whole-line)
    )))

* Tue 30 Apr 2013 06:21:33 PM JST
;;;###autoload