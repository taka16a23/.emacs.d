
* Thu 01 May 2014 05:56:39 AM JST
deb     http://ftp.jp.debian.org/debian/ sid main contrib non-free
deb-src http://ftp.jp.debian.org/debian/ sid main contrib non-free
* Thu 01 May 2014 06:01:13 AM JST
Package: *
Pin: release a=stable
Pin-Priority: 700

Package: *
Pin: release a=testing
Pin-Priority: 80

Package: *
Pin: release a=unstable
Pin-Priority: 90
* Thu 01 May 2014 06:03:34 AM JST

* Thu 01 May 2014 06:03:42 AM JST
Package: *
Pin: release a=stable
Pin-Priority: 700

Package: *
Pin: release a=testing
Pin-Priority: 80

Package: *
Pin: release a=unstable
Pin-Priority: 90

* Thu 01 May 2014 06:05:27 AM JST
sources.list.d
* Thu 01 May 2014 06:13:42 AM JST
list_client_list
* Thu 01 May 2014 06:16:25 AM JST
list_
* Thu 01 May 2014 06:16:32 AM JST
list_
* Thu 01 May 2014 06:17:02 AM JST
list_client_list_stacking
* Thu 01 May 2014 06:18:30 AM JST
'_NET_WM_WINDOW_TYPE_DESKTOP'
* Thu 01 May 2014 06:19:22 AM JST
list_cli
* Thu 01 May 2014 06:19:38 AM JST
'_NET_WM_WINDOW_TYPE_DESKTOP'
* Thu 01 May 2014 06:19:46 AM JST
'_NET_WM_WINDOW_TYPE_DESKTOP'
* Thu 01 May 2014 06:23:35 AM JST

* Thu 01 May 2014 06:23:35 AM JST

* Thu 01 May 2014 06:23:35 AM JST
from xcb.xcb import Request, VoidCookie

* Thu 01 May 2014 06:24:11 AM JST

* Thu 01 May 2014 06:24:11 AM JST

* Thu 01 May 2014 06:24:11 AM JST
        # for win in self.window.get_full_property('_NET_CLIENT_LIST'):

* Thu 01 May 2014 06:24:11 AM JST
        # for win in self.window.get_full_property('_NET_CLIENT_LIST'):

* Thu 01 May 2014 06:24:11 AM JST
        # for win in self.window.get_full_property('_NET_CLIENT_LIST'):
            # yield self.connection.extensions.window_type_dispatch(win)

* Thu 01 May 2014 06:25:07 AM JST

* Thu 01 May 2014 06:25:07 AM JST

* Thu 01 May 2014 06:25:07 AM JST
from xcb2.xconnection.windowlist import WindowList

* Thu 01 May 2014 06:25:15 AM JST
WindowList
* Thu 01 May 2014 06:25:24 AM JST

* Thu 01 May 2014 06:25:24 AM JST

* Thu 01 May 2014 06:25:24 AM JST
        # for win in self.window.get_full_property('_NET_CLIENT_LIST_STACKING'):

* Thu 01 May 2014 06:25:24 AM JST
        # for win in self.window.get_full_property('_NET_CLIENT_LIST_STACKING'):

* Thu 01 May 2014 06:25:24 AM JST
        # for win in self.window.get_full_property('_NET_CLIENT_LIST_STACKING'):
            # yield self.connection.extensions.window_type_dispatch(win)

* Thu 01 May 2014 06:25:30 AM JST
from xcb2.xconnection.windowlist import WindowList
* Thu 01 May 2014 06:25:34 AM JST
WindowList
* Thu 01 May 2014 06:28:07 AM JST
class WindowBaseAbstract(ConnectionAbstract):
    r"""SUMMARY
    """

    def __init__(self, connection, id):
        r"""

        @Arguments:
        - `display`:
        """
        ConnectionAbstract.__init__(self, connection)
        self.id = id

    def __int__(self, ):
        return self.id

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.id, other.id)
        return cmp(self.id, other)

    def __repr__(self, ):
        return '{0.__class__.__name__}(id={0.id})'.format(self)


class Window(WindowBaseAbstract):
    r"""SUMMARY
    """

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return _pack('I', self.id)

    def get_types(self, ):
        r"""SUMMARY

        get_types()

        @Return:
        """
        root = self.connection.windows.get_root()
        if self.id == root:
            return root
        types = self.connection.properties.get_NET_WM_WINDOW_TYPE(self.id)
        return WINDOW_TYPES.get(str(types), FundamentalWindow)(self)

    def get_attributes(self, ):
        r"""SUMMARY

        get_attributes()

        @Return:
        """
        # TODO: (Atami) [2014/03/28]
        return self.connection.core.GetWindowAttributes(self.id).reply()

    def set_attributes(self, value_list):
        r"""SUMMARY

        set_attributes(value_mask, value_list)

        @Arguments:
        - `value_mask`:
        - `value_list`:

        @Return:
        """
        return self.connection.core2.ChangeWindowAttributes(
            self.id, value_list)

    def destroy(self, ):
        r"""SUMMARY

        destroy()

        @Return:
        """
        return self.connection.core.DestroyWindow(self.id)

    def destroy_subwindows(self, ):
        r"""SUMMARY

        destroy_sub_windows()

        @Return:
        """
        return self.connection.core.DestroySubwindows(self.id)

    def change_save_set(self, ):
        r"""SUMMARY

        change_save_set()

        @Return:
        """

    def reparent(self, ):
        r"""SUMMARY

        reparent()

        @Return:
        """

    def get_geometry(self, ):
        r"""SUMMARY

        get_geometry()

        @Return:
        """
        return self.connection.core2.GetGeometry(self.id)

    def map(self, ):
        r"""SUMMARY

        map()

        @Return:
        """
        return self.connection.core.MapWindow(self.id)

    def unmap(self, ):
        r"""SUMMARY

        unmap()

        @Return:
        """
        return self.connection.core.UnmapWindow(self.id)

    def configure(self, mask, values):
        r"""SUMMARY

        configure()

        @Return:
        """
        return self.connection.core.ConfigureWindow(self.id, mask, values)

    def query_tree(self, ):
        r"""SUMMARY

        query_tree()

        @Return:
        """
        return self.connection.core2.QueryTrue(self.id)

    def query_recursive_tree(self, ):
        r"""SUMMARY

        query_recursive_tree()

        @Return:
        """
        return self.connection.core2.QueryRecursiveTree(self.id)

    def get_property(self, property_, delete=False, offset=0, length=10):
        r"""SUMMARY

        get_property()

        @Return:
        """
        return self.connection.core2.GetProperty(delete,
            self.id, property_, offset, length)

    def get_full_property(self, property_, delete=False, offset=0, length=10):
        r"""SUMMARY

        get_full_property(property_, offset=0, length)

        @Arguments:
        - `property_`:
        - `offset`:
        - `length`:

        @Return:
        """
        return self.connection.core2.GetFullProperty(delete,
            self.id, property_, offset, length)

    def change_proeprty(self, mode, property_, type_, format_, data_len, data):
        r"""SUMMARY

        change_proeprty()

        @Return:
        """
        return self.connection.core2.ChangeProperty(
            mode, self.id, property_, type_, format_, data_len, data)

    def delete_property(self, property_):
        r"""SUMMARY

        delete_property()

        @Return:
        """
        return self.connection.core2.DeleteProperty(self.id, property_)

    def list_properties(self, ):
        r"""SUMMARY

        list_properties()

        @Return:
        """
        return self.connection.core2.ListProperties(self.id)

    def send_event(self, event_mask, event):
        r"""SUMMARY

        send_event()

        @Return:
        """
        return self.connection.core2.SendEvent(0, self.id, event_mask, event)

    def grab_key(self, key, modifiers, owner_events=True):
        r"""SUMMARY

        grab_key(key, modifiers)

        @Arguments:
        - `key`:
        - `modifiers`:

        @Return:
        """
        self.connection.core2.GrabKey(owner_events, self.id, key, modifiers)
        self.connection.flush()

    def ungrab_key(self, key, modifiers):
        r"""SUMMARY

        ungrab_key()

        @Return:
        """
        self.connection.core2.UngrabKey(key, self.id, modifiers)
        self.connection.flush()

    def set_input_focus(self, ):
        r"""SUMMARY

        set_input_focus()

        @Return:
        """
        return self.connection.core2.SetInputFocus(self.id)

    def raise_window(self, ):
        r"""SUMMARY

        raise_window()

        @Return:
        """

    def create_window(self, ):
        r"""SUMMARY

        create_window()

        @Return:
        """

    def grab_pointer(self, ):
        r"""SUMMARY

        grab_pointer()

        @Return:
        """

    def grab_keyboard(self, ):
        r"""SUMMARY

        grab_keyboard()

        @Return:
        """

    def query_pointer(self, ):
        r"""SUMMARY

        query_pointer()

        @Return:
        """

    def get_motion_events(self, ):
        r"""SUMMARY

        get_motion_events()

        @Return:
        """

    def translate_coords(self, ):
        r"""SUMMARY

        translate_coords()

        @Return:
        """

    def warp_pointer(self, ):
        r"""SUMMARY

        warp_pointer()

        @Return:
        """

    def clear_area(self, ):
        r"""SUMMARY

        clear_area()

        @Return:
        """

    def create_colormap(self, ):
        r"""SUMMARY

        create_colormap()

        @Return:
        """

    def list_installed_colormaps(self, ):
        r"""SUMMARY

        list_installed_colormaps()

        @Return:
        """

    def rotate_properties(self, atom_len, delta, atoms):
        r"""SUMMARY

        rotate_properties()

        @Return:
        """
        return self.connection.core2.RotateProperties(
            self.id, atom_len, delta, atoms)



* Thu 01 May 2014 06:28:19 AM JST

* Thu 01 May 2014 06:28:19 AM JST

* Thu 01 May 2014 06:28:19 AM JST
from xcb2.xconnection.abstract import ConnectionAbstract

* Thu 01 May 2014 06:28:25 AM JST

* Thu 01 May 2014 06:28:25 AM JST

* Thu 01 May 2014 06:28:25 AM JST
from struct import pack as _pack

* Thu 01 May 2014 06:29:53 AM JST
class WindowTypesAbstract(object):
    r"""Summery
    """

    def __init__(self, window):
        r"""SUMMARY

        __init__(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        if not isinstance(window, Window):
            raise StandardError()
        self.window = window

    @property
    def connection(self, ):
        r"""SUMMARY

        connection()

        @Return:
        """
        return self.window.connection

    def __int__(self, ):
        return int(self.window)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.window, other.window)
        return cmp(int(self), other)

    def __repr__(self, ):
        return '{0.__class__.__name__}(window={0.window})'.format(self)

* Thu 01 May 2014 06:29:55 AM JST
class WindowTypesAbstract(object):
    r"""Summery
    """

    def __init__(self, window):
        r"""SUMMARY

        __init__(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        if not isinstance(window, Window):
            raise StandardError()
        self.window = window

    @property
    def connection(self, ):
        r"""SUMMARY

        connection()

        @Return:
        """
        return self.window.connection

    def __int__(self, ):
        return int(self.window)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.window, other.window)
        return cmp(int(self), other)

    def __repr__(self, ):
        return '{0.__class__.__name__}(window={0.window})'.format(self)

* Thu 01 May 2014 06:30:04 AM JST
x
* Thu 01 May 2014 06:30:04 AM JST
form x
* Thu 01 May 2014 06:31:18 AM JST
class FundamentalWindow(WindowTypesAbstract):
    r"""
    """
    name = ''
    wmclass = ('', )
    pid = None

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return self.window.pack()

    def list_properties(self, ):
        r"""SUMMARY

        list_properties()

        @Return:
        """
        return self.window.list_properties()

    def query_tree(self, ):
        r"""SUMMARY

        query_tree()

        @Return:
        """
        return self.window.query_tree()

    def query_subwindows(self, ):
        r"""SUMMARY

        query_subwindows()

        @Return:
        """
        for win in self.window.query_recursive_tree():
            yield self.connection.windows(win)

    @property
    def types(self, ):
        r"""SUMMARY

        get_window_type()

        @Return:
        """
        return self.connection.properties.get_NET_WM_WINDOW_TYPE(int(self))

    def get_geometry(self, ):
        r"""SUMMARY

        get_geometry()

        @Return:
        """
        return self.window.get_geometry()

    @property
    def x(self, ):
        r"""SUMMARY

        get_x()

        @Return:
        """
        return self.get_geometry().x

    @property
    def y(self, ):
        r"""SUMMARY

        get_y()

        @Return:
        """
        return self.get_geometry().y

    @property
    def height(self, ):
        r"""SUMMARY

        get_height()

        @Return:
        """
        return self.get_geometry().height

    @property
    def width(self, ):
        r"""SUMMARY

        get_width()

        @Return:
        """
        return self.get_geometry().width


class WindowBase(FundamentalWindow):
    r"""
    """

    def grab(self, key, modifiers):
        r"""SUMMARY

        grab()

        @Return:
        """
        self.window.grab_key(key, modifiers)

    def ungrab(self, key, modifiers):
        r"""SUMMARY

        ungrab(key, modifiers)

        @Arguments:
        - `key`:
        - `modifiers`:

        @Return:
        """
        self.window.ungrab_key(key, modifiers)

    def make_subwindow(self, ):
        r"""SUMMARY

        make_subwindow()

        @Return:
        """
        pass

    def destroy_subwindows(self, ):
        r"""SUMMARY

        destroy_subwindows()

        @Return:
        """
        return self.window.destroy_subwindows()


class StandardWindow(WindowBase):
    r"""SUMMARY
    """

    @property
    def properties(self, ):
        r"""SUMMARY

        properties()

        @Return:
        """
        return self.connection.properties

    @property
    def windowstate(self, ):
        r"""SUMMARY

        windowstate()

        @Return:
        """
        return self.connection.windowstate

    @property
    def checkstate(self, ):
        r"""SUMMARY

        checkstate()

        @Return:
        """
        return self.connection.checkstate

    @property
    def name(self, ):
        r"""SUMMARY

        get_name()

        @Return:
        """
        return self.properties.get_NET_WM_NAME(int(self))

    @property
    def wmclass(self, ):
        r"""SUMMARY

        get_class()

        @Return:
        """
        return self.properties.getWM_CLASS(int(self))

    @property
    def pid(self, ):
        r"""SUMMARY

        get_pid()

        @Return:
        """
        return self.properties.get_NET_WM_PID(int(self))

    def focus(self, ):
        r"""SUMMARY

        focus()

        @Return:
        """
        self.window.set_input_focus()

    def list_states(self, ):
        r"""SUMMARY

        get_states()

        @Return:
        """
        return self.properties.get_NET_WM_STATE(int(self))

    def get_desktop_number(self, ):
        r"""SUMMARY

        get_desktop_num()

        @Return:
        """
        return self.properties.get_NET_WM_DESKTOP(int(self))

    def get_frame_extents(self, ):
        r"""SUMMARY

        get_frame_extents()

        @Return:
        """
        return self.properties.get_NET_FRAME_EXTENTS(int(self))

    def get_icon_name(self, ):
        r"""SUMMARY

        get_icon()

        @Return:
        """
        return self.properties.get_NET_WM_ICON_NAME(int(self))

    def get_user_window_time(self, ):
        r"""SUMMARY

        get_user_window_time()

        @Return:
        """
        return self.properties.get_NET_WM_USER_TIME_WINDOW(int(self))

    def list_allowed_actions(self, ):
        r"""SUMMARY

        get_allowed_actions()

        @Return:
        """
        return self.properties.get_NET_WM_ALLOWED_ACTIONS(int(self))

    def setabove(self, ):
        r"""SUMMARY

        set_above()

        @Return:
        """
        self.windowstate.setabove(int(self))

    def unsetabove(self, ):
        r"""SUMMARY

        unset_above()

        @Return:
        """
        self.windowstate.unsetabove(int(self))

    def toggleabove(self, ):
        r"""SUMMARY

        toggle_above()

        @Return:
        """
        self.windowstate.toggleabove(int(self))

    def isabove(self, ):
        r"""SUMMARY

        isabove()

        @Return:
        """
        return self.checkstate.isabove(int(self))

    def isbelow(self, ):
        r"""SUMMARY

        isbelow()

        @Return:
        """
        return self.checkstate.isbelow(int(self))

    def isfullscreen(self, ):
        r"""SUMMARY

        isfullscreen()

        @Return:
        """
        return self.checkstate.isfullscreen(int(self))

    def isshade(self, ):
        r"""SUMMARY

        isshade()

        @Return:
        """
        return self.checkstate.isshade(int(self))


class StaticWindow(StandardWindow):
    r"""
    """

class DynamicWindow(StandardWindow):
    r"""
    """

    def __setattr__(self, name, value):
        if isinstance(value, int) and name in ('x', 'y', 'width', 'height'):
            if 'x' == name:
                self.move(x=value)
            elif 'y' == name:
                self.move(y=value)
            elif 'width' == name:
                self.move(width=value)
            elif 'height' == name:
                self.move(height=value)
        else:
            super(DynamicWindow, self).__setattr__(name, value)

    def move(self, **changes):
        r"""SUMMARY

        move(**kwargs)

        @Arguments:
        - `**kwargs`:

        @Return:
        """
        mask = 0
        values = []
        for key in ('x', 'y', 'width', 'height'):
            if key not in changes:
                continue
            mask |= getattr(define.ConfigWindow, key.capitalize())
            values.append(changes[key])
        if mask:
            self.connection.core.ConfigureWindow(self.window.id, mask, values)

    def stack(self, above=True):
        r"""SUMMARY

        stack(above)

        @Arguments:
        - `above`:

        @Return:
        """
        self.connection.core.ConfigureWindow(
            int(self), define.ConfigWindow.StackMode,
            [define.StackMode.Above if above else define.StackMode.Below])

    def close(self, ):
        r"""SUMMARY

        close()

        @Return:
        """
        return self.connection.destroywindow.close(int(self))

    def kill(self, ):
        r"""SUMMARY

        kill()

        @Return:
        """
        return self.connection.destroywindow.delete(int(self))

    def setmaximize(self, ):
        r"""SUMMARY

        set_maximize()

        @Return:
        """
        self.windowstate.setmaximize(int(self))

    def unsetmaximize(self, ):
        r"""SUMMARY

        unset_maximize()

        @Return:
        """
        self.windowstate.unsetmaximize(int(self))

    def togglemaximize(self, ):
        r"""SUMMARY

        toggle_maximize()

        @Return:
        """
        self.windowstate.togglemaximize(int(self))

    def setfullscreen(self, ):
        r"""SUMMARY

        set_fullscreen()

        @Return:
        """
        self.windowstate.setfullscreen(int(self))

    def unsetfullscreen(self, ):
        r"""SUMMARY

        unset_fullscreen()

        @Return:
        """
        self.windowstate.unsetfullscreen(int(self))

    def togglefullscreen(self, ):
        r"""SUMMARY

        toggle_fullscreen()

        @Return:
        """
        self.windowstate.togglefullscreen(int(self))

    def setbelow(self, ):
        r"""SUMMARY

        set_below()

        @Return:
        """
        self.windowstate.setbelow(int(self))

    def unsetbelow(self, ):
        r"""SUMMARY

        unset_below()

        @Return:
        """
        self.windowstate.unsetbelow(int(self))

    def togglebelow(self, ):
        r"""SUMMARY

        toggle_below()

        @Return:
        """
        self.windowstate.togglebelow(int(self))

    def setshade(self, ):
        r"""SUMMARY

        set_shade()

        @Return:
        """
        self.windowstate.setshade(int(self))

    def unsetshade(self, ):
        r"""SUMMARY

        unset_shade()

        @Return:
        """
        self.windowstate.unsetshade(int(self))

    def toggleshade(self, ):
        r"""SUMMARY

        toggle_shade()

        @Return:
        """
        self.windowstate.toggleshade(int(self))


class WindowSplashType(FundamentalWindow):
    r"""
    """
    type_name = '_NET_WM_WINDOW_TYPE_SPLASH'


class WindowNormalType(DynamicWindow):
    r"""
    """
    type_name = '_NET_WM_WINDOW_TYPE_NORMAL'


class WindowRootType(StaticWindow):
    r"""SUMMARY
    """

    def grab_press_button(self, button, modifiers):
        r"""SUMMARY

        grab_button()

        @Return:
        """
        self.connection.core2.GrabPressButton(
            True, # owner_events
            int(self), # window
            0, # confine_to
            0, # cursor
            button,
            modifiers
        )

    def grab_release_button(self, button, modifiers):
        r"""SUMMARY

        grab_button()


        @Return:
        """
        self.connection.core2.GrabReleaseButton(
            True, # owner_events
            int(self), # window
            0, # confine_to
            0, # cursor
            button,
            modifiers
        )

    def ungrab_button(self, button, modifiers):
        r"""SUMMARY

        ungrab_button()

        @Return:
        """
        self.connection.core2.UngrabButton(button, int(self), modifiers)

    def get_supported(self, ):
        r"""SUMMARY

        get_supported()

        @Return:
        """
        return self.properties.get_NET_SUPPORTED(int(self))

    def get_number_of_desktops(self, ):
        r"""SUMMARY

        get_number_of_desktops()

        @Return:
        """
        return self.properties.get_NET_NUMBER_OF_DESKTOPS(int(self))

    def get_desktop_geometry(self, ):
        r"""SUMMARY

        get_desktop_geometry()

        @Return:
        """
        return self.properties.get_NET_DESKTOP_GEOMETRY(int(self))

    def get_desktop_viewport(self, ):
        r"""SUMMARY

        get_desktop_viewport()

        @Return:
        """
        return self.properties.get_NET_DESKTOP_VIEWPORT(int(self))

    def get_current_desktop(self, ):
        r"""SUMMARY

        get_current_desktop()

        @Return:
        """
        return self.properties.get_NET_CURRENT_DESKTOP(int(self))

    def get_desktop_name(self, ):
        r"""SUMMARY

        get_desktop_name()

        @Return:
        """
        return self.properties.get_NET_DESKTOP_NAMES(int(self))

    def get_active_window(self, ):
        r"""SUMMARY

        get_active_window()

        @Return:
        """
        alist = self.window.get_full_property('_NET_ACTIVE_WINDOW')
        if alist:
            alist.remove(0)
        if not alist:
            return None
        return self.connection.windows(alist[0])

    def get_workarea(self, ):
        r"""SUMMARY

        get_workarea()

        @Return:
        """
        return self.properties.get_NET_WORKAREA(int(self))

    def get_virtual_roots(self, ):
        r"""SUMMARY

        get_virtual_roots()

        @Return:
        """
        return self.properties.get_NET_VIRTUAL_ROOTS(int(self))

    def get_supporting_wm_check(self, ):
        r"""SUMMARY

        get_supporting_wm_check()

        @Return:
        """
        return self.properties.get_NET_SUPPORTING_WM_CHECK(int(self))

    def get_desktop_layout(self, ):
        r"""SUMMARY

        get_desktop_layout()

        @Return:
        """
        return self.properties.get_NET_DESKTOP_LAYOUT(int(self))

    def get_showing_desktop(self, ):
        r"""SUMMARY

        get_showing_desktop()

        @Return:
        """
        return self.properties.get_NET_DESKTOP_LAYOUT(int(self))

    def get_user_time(self, ):
        r"""SUMMARY

        get_user_time()

        @Return:
        """
        return self.properties.get_NET_WM_USER_TIME(int(self))

    def client_list(self, ):
        r"""SUMMARY

        get_client_list()

        @Return:
        """
        # TODO: (Atami) [2014/05/01]
        from xcb2.xconnection.windowlist import WindowList
        return WindowList(self.properties.get_NET_CLIENT_LIST(int(self)))

    def client_list_stacking(self, ):
        r"""SUMMARY

        get_client_list_stacking()

        @Return:
        """
        # TODO: (Atami) [2014/05/01]
        from xcb2.xconnection.windowlist import WindowList
        return WindowList(
            self.properties.get_NET_CLIENT_LIST_STACKING(int(self)))


class WindowDesktopType(StaticWindow):
    r"""
    """
    type_name = '_NET_WM_WINDOW_TYPE_DESKTOP'


class WindowDockType(StaticWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]

    type_name = '_NET_WM_WINDOW_TYPE_DOCK'


class WindowToolbarType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_TOOLBAR'


class WindowMenuType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_MENU'


class WindowUtilityType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_UTILITY'


class WindowDialogType(StandardWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_DIALOG'


class WindowDropdownMenuType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU'


class WindowPopupMenuType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_POPUP_MENU'


class WindowTooltipType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_TOOLTIP'


class WindowNotificationType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_NOTIFICATION'


class WindowComboType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_COMBO'


class WindowDNDType(FundamentalWindow):
    r"""
    """
    # TODO: (Atami) [2014/03/02]
    type_name = '_NET_WM_WINDOW_TYPE_DND'


WINDOW_TYPES = {
    '_NET_WM_WINDOW_TYPE_NORMAL'        : WindowNormalType,
    '_NET_WM_WINDOW_TYPE_SPLASH'        : WindowSplashType,
    '_NET_WM_WINDOW_TYPE_DESKTOP'       : WindowDesktopType,
    '_NET_WM_WINDOW_TYPE_DOCK'          : WindowDockType,
    '_NET_WM_WINDOW_TYPE_TOOLBAR'       : WindowToolbarType,
    '_NET_WM_WINDOW_TYPE_MENU'          : WindowMenuType,
    '_NET_WM_WINDOW_TYPE_UTILITY'       : WindowUtilityType,
    '_NET_WM_WINDOW_TYPE_DIALOG'        : WindowDialogType,
    '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU' : WindowDropdownMenuType,
    '_NET_WM_WINDOW_TYPE_POPUP_MENU'    : WindowPopupMenuType,
    '_NET_WM_WINDOW_TYPE_TOOLTIP'       : WindowTooltipType,
    '_NET_WM_WINDOW_TYPE_NOTIFICATION'  : WindowNotificationType,
    '_NET_WM_WINDOW_TYPE_COMBO'         : WindowComboType,
    '_NET_WM_WINDOW_TYPE_DND'           : WindowDNDType,
    }


* Thu 01 May 2014 06:31:43 AM JST
form 
* Thu 01 May 2014 06:32:23 AM JST

* Thu 01 May 2014 06:32:23 AM JST

* Thu 01 May 2014 06:32:23 AM JST
from xcb2.xproto import define

* Thu 01 May 2014 06:33:17 AM JST

* Thu 01 May 2014 06:33:19 AM JST
abstract
* Thu 01 May 2014 06:33:24 AM JST
ConnectionAbstract
* Thu 01 May 2014 06:33:51 AM JST
FundamentalWindow
* Thu 01 May 2014 06:34:23 AM JST
WINDOW_TYPES
* Thu 01 May 2014 06:38:29 AM JST
class Windows(ConnectionAbstract):
    r"""SUMMARY
    """

    # def __init__(self, connection):
    #     r"""
    #     """
    #     ConnectionAbstract.__init__(self, connection)

    def get_root(self, ):
        r"""SUMMARY

        get_root()

        @Return:
        """
        root = self.connection.get_setup().roots[0].root
        return WindowRootType(Window(self.connection, root))

    def __call__(self, winid):
        return Window(self.connection, winid).get_types()


* Thu 01 May 2014 06:38:49 AM JST
from xcb2.xconnection.abstract import ConnectionAbstract
* Thu 01 May 2014 06:39:31 AM JST

* Thu 01 May 2014 06:39:33 AM JST
windowtypes
* Thu 01 May 2014 06:39:37 AM JST
WindowRootType
* Thu 01 May 2014 06:39:55 AM JST
form 
* Thu 01 May 2014 06:40:04 AM JST
from xcb2.xconnection.window.corewindow import Window
* Thu 01 May 2014 06:40:08 AM JST

* Thu 01 May 2014 06:40:10 AM JST
corewindow
* Thu 01 May 2014 06:40:19 AM JST
Window
* Thu 01 May 2014 06:40:21 AM JST

* Thu 01 May 2014 06:40:23 AM JST
windowtypes
* Thu 01 May 2014 06:40:25 AM JST
import *
* Thu 01 May 2014 06:46:31 AM JST

* Thu 01 May 2014 06:46:31 AM JST

* Thu 01 May 2014 06:46:31 AM JST
from xcb2.xconnection.window.corewindow import Window

* Thu 01 May 2014 06:48:24 AM JST
window
* Thu 01 May 2014 06:50:07 AM JST

* Thu 01 May 2014 06:50:07 AM JST

* Thu 01 May 2014 06:50:07 AM JST
        from xcb2.xconnection.window.windowlist import WindowList

* Thu 01 May 2014 06:50:24 AM JST

* Thu 01 May 2014 06:50:24 AM JST

* Thu 01 May 2014 06:50:24 AM JST
        from xcb2.xconnection.windowlist import WindowList

* Thu 01 May 2014 06:50:25 AM JST

* Thu 01 May 2014 06:50:25 AM JST

* Thu 01 May 2014 06:50:25 AM JST
        # TODO: (Atami) [2014/05/01]

* Thu 01 May 2014 06:50:27 AM JST

* Thu 01 May 2014 06:50:27 AM JST

* Thu 01 May 2014 06:50:27 AM JST
        # TODO: (Atami) [2014/05/01]

* Thu 01 May 2014 06:52:14 AM JST
int(
* Thu 01 May 2014 06:52:21 AM JST
int(
* Thu 01 May 2014 06:52:25 AM JST
int
* Thu 01 May 2014 06:52:30 AM JST
int(
* Thu 01 May 2014 06:52:33 AM JST
int(
* Thu 01 May 2014 06:52:37 AM JST
int
* Thu 01 May 2014 06:52:42 AM JST
int(
* Thu 01 May 2014 06:53:00 AM JST
int(
* Thu 01 May 2014 06:53:05 AM JST
int(
* Thu 01 May 2014 06:53:08 AM JST
int(
* Thu 01 May 2014 06:53:12 AM JST
int(
* Thu 01 May 2014 06:53:16 AM JST
int(
* Thu 01 May 2014 06:53:21 AM JST
int(
* Thu 01 May 2014 06:53:24 AM JST
int(
* Thu 01 May 2014 06:53:27 AM JST
int(
* Thu 01 May 2014 06:53:40 AM JST
int(
* Thu 01 May 2014 06:53:43 AM JST
int(
* Thu 01 May 2014 06:53:45 AM JST
int(
* Thu 01 May 2014 06:53:45 AM JST
int(
* Thu 01 May 2014 06:53:46 AM JST
int(
* Thu 01 May 2014 06:53:47 AM JST
int(
* Thu 01 May 2014 06:53:47 AM JST
int(
* Thu 01 May 2014 06:53:48 AM JST
int(
* Thu 01 May 2014 06:53:48 AM JST
int(
* Thu 01 May 2014 06:53:49 AM JST
int(
* Thu 01 May 2014 06:53:49 AM JST
int(
* Thu 01 May 2014 06:53:50 AM JST
int(
* Thu 01 May 2014 06:53:51 AM JST
int(
* Thu 01 May 2014 06:53:51 AM JST
int(
* Thu 01 May 2014 06:53:52 AM JST
int(
* Thu 01 May 2014 06:53:53 AM JST
int(
* Thu 01 May 2014 06:53:54 AM JST
int(
* Thu 01 May 2014 06:54:09 AM JST
int(
* Thu 01 May 2014 06:54:14 AM JST
int(
* Thu 01 May 2014 06:54:14 AM JST
int(
* Thu 01 May 2014 06:54:15 AM JST
int(
* Thu 01 May 2014 06:54:15 AM JST
int(
* Thu 01 May 2014 06:54:16 AM JST
int(
* Thu 01 May 2014 06:54:17 AM JST
int(
* Thu 01 May 2014 06:54:18 AM JST
int(
* Thu 01 May 2014 06:54:18 AM JST
int(
* Thu 01 May 2014 06:54:19 AM JST
int(
* Thu 01 May 2014 06:54:19 AM JST
int(
* Thu 01 May 2014 06:54:20 AM JST
int(
* Thu 01 May 2014 06:54:20 AM JST
int(
* Thu 01 May 2014 06:54:21 AM JST
int(
* Thu 01 May 2014 06:54:22 AM JST
int(
* Thu 01 May 2014 06:54:28 AM JST
int(
* Thu 01 May 2014 06:57:26 AM JST
windowp
* Thu 01 May 2014 06:58:57 AM JST
from
* Thu 01 May 2014 07:01:09 AM JST
import xcb2
c=xcb2.connect()
c.root.client_list()

* Thu 01 May 2014 07:19:32 AM JST
    def __typecheck(self, item):
        r"""SUMMARY

        _typecheck(item)

        @Arguments:
        - `item`:

        @Return:
        """
        if not isinstance(item, WindowTypesAbstract):
            # TODO: (Atami) [2014/04/30]
            raise TypeError()

* Thu 01 May 2014 07:20:27 AM JST
self.__typecheck(window)
* Thu 01 May 2014 07:20:33 AM JST
window
* Thu 01 May 2014 07:20:36 AM JST
window
* Thu 01 May 2014 07:22:30 AM JST
        if not isinstance(object, self.__class__):
            for item in other:
                self.__typecheck(item)

* Thu 01 May 2014 07:23:00 AM JST
self.__typelistcheck(other)
* Thu 01 May 2014 07:23:09 AM JST
other
* Thu 01 May 2014 07:23:12 AM JST
object
* Thu 01 May 2014 07:26:49 AM JST
class OneTypeList(list):
    r"""SUMMARY
    """
    types = object

    def __typecheck(self, item):
        r"""SUMMARY

        _typecheck(item)

        @Arguments:
        - `item`:

        @Return:
        """
        if not isinstance(item, self.types):
            # TODO: (Atami) [2014/04/30]
            raise TypeError(item)

    def __typelistcheck(self, list_):
        r"""SUMMARY
        
        __typelistcheck(list)
        
        @Arguments:
        - `list`:
        
        @Return:
        """
        if not isinstance(list_, self.__class__):
            for item in list_:
                self.__typecheck(item)
        
    def __setitem__(self, i, item):
        r"""SUMMARY
        
        __setitem__(i, window)
        
        @Arguments:
        - `i`:
        - `window`:
        
        @Return:
        """
        self.__typecheck(item)
        super(OneTypeList, self).__setitem__(i, item)
    
    def __setslice__(self, i, j, other):
        r"""SUMMARY
        
        __setslice__(i, j, other)
        
        @Arguments:
        - `i`:
        - `j`:
        - `other`:
        
        @Return:
        """
        self.__typelistcheck(other)
        super(OneTypeList, self).__setslice__(i, j, other)

    def __add__(self, other):
        r"""SUMMARY
        
        __add__(other)
        
        @Arguments:
        - `other`:
        
        @Return:
        """
        self.__typelistcheck(other)
        return super(OneTypeList, self).__add__(other)

    def __radd__(self, other):
        r"""SUMMARY
        
        __radd__(other)
        
        @Arguments:
        - `other`:
        
        @Return:
        """
        self.__typelistcheck(other)
        return super(OneTypeList, self).__radd__(other)

    def append(self, item):
        r"""SUMMARY
        
        append(item)
        
        @Arguments:
        - `item`:
        
        @Return:
        """
        self.__typecheck(item)
        super(OneTypeList, self).append(item)

    def insert(self, i, item):
        r"""SUMMARY
        
        insert(i, item)
        
        @Arguments:
        - `i`:
        - `item`:
        
        @Return:
        """
        self.__typecheck(item)
        super(OneTypeList, self).insert(i, item)

    def extend(self, other):
        r"""SUMMARY
        
        extend(other)
        
        @Arguments:
        - `other`:
        
        @Return:
        """
        self.__typelistcheck(other)
        super(OneTypeList, self).extend(other)



* Thu 01 May 2014 07:27:09 AM JST

* Thu 01 May 2014 07:27:11 AM JST
sortlist
* Thu 01 May 2014 07:27:14 AM JST
SortedList
* Thu 01 May 2014 07:27:34 AM JST
OneTypeList
* Thu 01 May 2014 07:27:54 AM JST
WindowTypesAbstract
* Thu 01 May 2014 07:28:47 AM JST
import xcb2
c=xcb2.connect()
c.root.client_list()

* Thu 01 May 2014 07:28:56 AM JST
c.root.client_list()
* Thu 01 May 2014 07:47:38 AM JST
getWM_CLASS
* Thu 01 May 2014 07:49:18 AM JST
he, wo=
* Thu 01 May 2014 07:51:41 AM JST
Properties
* Thu 01 May 2014 07:56:53 AM JST

* Thu 01 May 2014 07:56:55 AM JST
WMCLASS
* Thu 01 May 2014 07:57:52 AM JST

* Thu 01 May 2014 07:57:52 AM JST

* Thu 01 May 2014 07:57:53 AM JST
        # if '' in lis:

* Thu 01 May 2014 07:57:53 AM JST
        # if '' in lis:

* Thu 01 May 2014 07:57:53 AM JST
        # if '' in lis:
            # lis.remove('')

* Thu 01 May 2014 07:58:43 AM JST
he.split('\0')
* Thu 01 May 2014 07:59:35 AM JST
string.split('\0')
* Thu 01 May 2014 07:59:38 AM JST

* Thu 01 May 2014 07:59:38 AM JST

* Thu 01 May 2014 07:59:39 AM JST
        lis = 

* Thu 01 May 2014 07:59:58 AM JST
self.core2.GetFullProperty(delete, window, 'WM_CLASS')
* Thu 01 May 2014 08:00:02 AM JST

* Thu 01 May 2014 08:00:02 AM JST

* Thu 01 May 2014 08:00:02 AM JST
        string = 

* Thu 01 May 2014 08:04:01 AM JST
getfullproperty
* Thu 01 May 2014 08:04:54 AM JST
            
* Thu 01 May 2014 08:04:56 AM JST
            
* Thu 01 May 2014 08:04:59 AM JST
            
* Thu 01 May 2014 08:05:01 AM JST
            
* Thu 01 May 2014 08:05:08 AM JST
            
* Thu 01 May 2014 08:05:10 AM JST
            
* Thu 01 May 2014 08:05:14 AM JST
            
* Thu 01 May 2014 08:05:49 AM JST
            
* Thu 01 May 2014 08:05:52 AM JST
            
* Thu 01 May 2014 08:05:56 AM JST
            
* Thu 01 May 2014 08:05:58 AM JST
            
* Thu 01 May 2014 08:06:00 AM JST
            
* Thu 01 May 2014 08:06:03 AM JST
            
* Thu 01 May 2014 08:06:08 AM JST
            
* Thu 01 May 2014 08:06:10 AM JST
            
* Thu 01 May 2014 08:06:12 AM JST
            
* Thu 01 May 2014 08:06:14 AM JST
            
* Thu 01 May 2014 08:06:18 AM JST
            
* Thu 01 May 2014 08:06:29 AM JST
            
* Thu 01 May 2014 08:06:33 AM JST
            
* Thu 01 May 2014 08:06:35 AM JST
            
* Thu 01 May 2014 08:06:39 AM JST
            
* Thu 01 May 2014 08:06:41 AM JST
            
* Thu 01 May 2014 08:06:44 AM JST
            
* Thu 01 May 2014 08:06:56 AM JST
            
* Thu 01 May 2014 08:07:01 AM JST
                
* Thu 01 May 2014 08:08:15 AM JST
import xcb2
c=xcb2.connect()
c.root.client_list()

* Thu 01 May 2014 08:08:21 AM JST
c.root.client_list()
* Thu 01 May 2014 08:09:48 AM JST
WMCLASS('', ''
* Thu 01 May 2014 08:10:04 AM JST
27262979
* Thu 01 May 2014 08:11:43 AM JST
c.properties.getfullproperty(False, 27262979, 'WM_CLASS').split('\0')[:-]
* Thu 01 May 2014 08:13:18 AM JST
self.getfullproperty(delete, window, 'WM_CLASS').split('\0')))[:2]
* Thu 01 May 2014 08:13:32 AM JST
.split('\0')))[:2]
* Thu 01 May 2014 08:13:47 AM JST

* Thu 01 May 2014 08:13:47 AM JST

* Thu 01 May 2014 08:13:47 AM JST
                *

* Thu 01 May 2014 08:14:16 AM JST
'xfdesktop\x00Xfdesktop\x00'
* Thu 01 May 2014 08:14:41 AM JST
['xfdesktop', 'Xfdesktop']
* Thu 01 May 2014 08:15:00 AM JST
'xfdesktop\x00Xfdesktop\x00' => ['xfdesktop', 'Xfdesktop']
* Thu 01 May 2014 08:15:25 AM JST
import xcb2
c=xcb2.connect()
c.root.client_list()

* Thu 01 May 2014 08:15:31 AM JST
c.root.client_list()
* Thu 01 May 2014 08:15:54 AM JST
[:2]
* Thu 01 May 2014 08:16:35 AM JST
'Xfdesktop'
* Thu 01 May 2014 08:18:38 AM JST
                
* Thu 01 May 2014 08:18:44 AM JST
'{0.__class__.__name__}(res_name="{0.res_name}", res_class="{0.res_class}")'
* Thu 01 May 2014 08:19:10 AM JST
format
* Thu 01 May 2014 08:22:20 AM JST

* Thu 01 May 2014 08:22:20 AM JST

* Thu 01 May 2014 08:22:20 AM JST
from xcb2.xconnection.window.windowlist import WindowList

* Thu 01 May 2014 08:22:39 AM JST
WindowList(
* Thu 01 May 2014 08:22:42 AM JST
WindowList(
* Thu 01 May 2014 08:22:44 AM JST
            
* Thu 01 May 2014 08:23:50 AM JST
WindowList
* Thu 01 May 2014 08:26:13 AM JST
import xcb2
c=xcb2.connect()
c.root.client_list()

* Thu 01 May 2014 08:26:18 AM JST

* Thu 01 May 2014 08:26:18 AM JST

* Thu 01 May 2014 08:26:18 AM JST
c=xcb2.connect()

* Thu 01 May 2014 08:26:19 AM JST
xcb2
* Thu 01 May 2014 08:26:20 AM JST
import xcb2
* Thu 01 May 2014 08:26:37 AM JST
wmclass
* Thu 01 May 2014 08:55:41 AM JST
import xcb2
c=xcb2.connect()

* Thu 01 May 2014 08:55:43 AM JST
c.root.client_list()
* Thu 01 May 2014 08:58:37 AM JST
    def __repr__(self, ):
        return '{0.__class__.__name__}({1})'.format(
            self, super(WindowList, self).__repr__())


* Thu 01 May 2014 09:09:48 AM JST
2.get_windows()
* Thu 01 May 2014 09:10:01 AM JST
get_c
* Thu 01 May 2014 09:13:00 AM JST
filter_wmclass
* Thu 01 May 2014 09:13:22 AM JST
xcb2.connect().root.client_list()
* Thu 01 May 2014 09:14:14 AM JST
stack()
* Thu 01 May 2014 09:14:31 AM JST

* Thu 01 May 2014 09:14:31 AM JST

* Thu 01 May 2014 09:14:31 AM JST
import xcb.xproto

* Thu 01 May 2014 09:14:34 AM JST

* Thu 01 May 2014 09:14:34 AM JST

* Thu 01 May 2014 09:14:35 AM JST
import xahk

* Thu 01 May 2014 09:17:15 AM JST
match
* Thu 01 May 2014 09:22:19 AM JST
match
* Thu 01 May 2014 09:25:00 AM JST
nullprint
* Thu 01 May 2014 09:25:10 AM JST

* Thu 01 May 2014 09:28:10 AM JST

* Thu 01 May 2014 09:28:10 AM JST

* Thu 01 May 2014 09:28:10 AM JST
import xcb.xproto

* Thu 01 May 2014 09:28:16 AM JST
xahk
* Thu 01 May 2014 09:32:37 AM JST
search
* Thu 01 May 2014 09:32:42 AM JST

* Thu 01 May 2014 09:32:42 AM JST

* Thu 01 May 2014 09:32:42 AM JST
from re import compile

* Thu 01 May 2014 09:34:16 AM JST
hello
* Thu 01 May 2014 09:35:16 AM JST
filter_
* Thu 01 May 2014 09:35:34 AM JST

* Thu 01 May 2014 09:35:34 AM JST

* Thu 01 May 2014 09:35:34 AM JST
            # winlis = windowlist.match_name(RealtimeYahoo.name)

* Thu 01 May 2014 09:36:00 AM JST

* Thu 01 May 2014 09:36:00 AM JST

* Thu 01 May 2014 09:36:00 AM JST
import xahk

* Thu 01 May 2014 09:38:24 AM JST

* Thu 01 May 2014 09:38:25 AM JST

* Thu 01 May 2014 09:38:25 AM JST
            print('DEBUG-1-emergency.py')

* Thu 01 May 2014 09:40:10 AM JST

* Thu 01 May 2014 09:40:10 AM JST

* Thu 01 May 2014 09:40:12 AM JST

* Thu 01 May 2014 09:40:12 AM JST

* Thu 01 May 2014 09:40:12 AM JST
    from subprocess import 

* Thu 01 May 2014 09:41:29 AM JST
import subprocess as sbp
* Thu 01 May 2014 09:41:32 AM JST
sbp.Popen('/root/.zsh/scripts/eme')
* Thu 01 May 2014 09:42:30 AM JST
eme
* Thu 01 May 2014 10:13:08 AM JST
search = re.compile(regexp).search
* Thu 01 May 2014 10:19:39 AM JST
return self.__class__([x for x in self if search(x.name) is not None])
* Thu 01 May 2014 10:19:47 AM JST
name
* Thu 01 May 2014 10:21:45 AM JST
             
* Thu 01 May 2014 10:22:26 AM JST
from
* Thu 01 May 2014 11:06:11 AM JST
types_abstract
* Thu 01 May 2014 11:06:17 AM JST
WindowTypesAbstract
* Thu 01 May 2014 11:06:22 AM JST
FundamentalWindow
* Thu 01 May 2014 11:11:57 AM JST
'WM_CLASS'
* Thu 01 May 2014 11:12:56 AM JST
WMCLASS
* Thu 01 May 2014 11:47:16 AM JST
get_active_window
* Thu 01 May 2014 12:40:23 PM JST
SUMMARY
* Thu 01 May 2014 12:45:34 PM JST
Use
* Thu 01 May 2014 12:46:12 PM JST
SUMMARY
* Thu 01 May 2014 12:47:07 PM JST
name
* Thu 01 May 2014 12:48:01 PM JST
SUMMARY
* Thu 01 May 2014 12:49:50 PM JST
SUMMARY
* Thu 01 May 2014 12:49:58 PM JST
window
* Thu 01 May 2014 12:50:37 PM JST
filter
* Thu 01 May 2014 01:04:50 PM JST
root
* Thu 01 May 2014 01:05:01 PM JST
self.connection.root
* Thu 01 May 2014 01:10:01 PM JST

* Thu 01 May 2014 01:10:01 PM JST

* Thu 01 May 2014 01:10:01 PM JST
        # root = self.connection.windows.get_root()

* Thu 01 May 2014 01:14:01 PM JST

* Thu 01 May 2014 01:14:03 PM JST
AtomIdentifier
* Thu 01 May 2014 01:14:06 PM JST
atom
* Thu 01 May 2014 01:14:06 PM JST
wrapcore.atom
* Thu 01 May 2014 01:14:35 PM JST
Window
* Thu 01 May 2014 01:16:35 PM JST
display
* Thu 01 May 2014 01:16:44 PM JST
Window(winid, self.connection)
* Thu 01 May 2014 01:16:59 PM JST
win
* Thu 01 May 2014 01:17:20 PM JST
Window
* Thu 01 May 2014 01:17:26 PM JST
windowself.
* Thu 01 May 2014 01:20:11 PM JST

* Thu 01 May 2014 01:20:11 PM JST

* Thu 01 May 2014 01:20:11 PM JST
            # TODO: (Atami) [2014/03/29]

* Thu 01 May 2014 01:20:11 PM JST
            # TODO: (Atami) [2014/03/29]

* Thu 01 May 2014 01:20:12 PM JST
            # TODO: (Atami) [2014/03/29]
            # window_type_dispatch()

* Thu 01 May 2014 01:20:13 PM JST

* Thu 01 May 2014 01:20:13 PM JST

* Thu 01 May 2014 01:20:13 PM JST
        # TODO: (Atami) [2014/03/29]

* Thu 01 May 2014 01:20:13 PM JST
        # TODO: (Atami) [2014/03/29]

* Thu 01 May 2014 01:20:14 PM JST
        # TODO: (Atami) [2014/03/29]
        # window_type_dispatch()

* Thu 01 May 2014 01:43:54 PM JST
id
* Thu 01 May 2014 01:44:31 PM JST
id
* Thu 01 May 2014 01:44:34 PM JST
id
* Thu 01 May 2014 01:44:37 PM JST
id
* Thu 01 May 2014 01:44:41 PM JST
id
* Thu 01 May 2014 01:44:46 PM JST
id
* Thu 01 May 2014 01:44:50 PM JST
id
* Thu 01 May 2014 01:44:53 PM JST
id
* Thu 01 May 2014 01:44:57 PM JST
id
* Thu 01 May 2014 01:45:01 PM JST
id
* Thu 01 May 2014 01:45:03 PM JST
id
* Thu 01 May 2014 01:45:06 PM JST
id
* Thu 01 May 2014 01:45:09 PM JST
id
* Thu 01 May 2014 01:49:52 PM JST
win, 
* Thu 01 May 2014 01:50:01 PM JST
yield Window(self.connection, win)
* Thu 01 May 2014 01:50:06 PM JST
self.connection
* Thu 01 May 2014 01:50:13 PM JST
self.connection
* Thu 01 May 2014 01:52:46 PM JST
types
* Thu 01 May 2014 02:05:14 PM JST
int
* Thu 01 May 2014 02:05:20 PM JST
10
* Thu 01 May 2014 02:26:54 PM JST
int(
* Thu 01 May 2014 02:29:07 PM JST
int(
* Thu 01 May 2014 02:29:09 PM JST
int(
* Thu 01 May 2014 02:30:17 PM JST
int(
* Thu 01 May 2014 02:30:19 PM JST
int(
* Thu 01 May 2014 02:33:42 PM JST

* Thu 01 May 2014 02:33:42 PM JST

* Thu 01 May 2014 02:33:42 PM JST
        print(id)

* Thu 01 May 2014 02:33:56 PM JST
int(
* Thu 01 May 2014 02:33:57 PM JST
int(
* Thu 01 May 2014 02:34:00 PM JST
int(
* Thu 01 May 2014 02:34:03 PM JST
int(
* Thu 01 May 2014 02:34:06 PM JST
int(
* Thu 01 May 2014 03:34:39 PM JST
'+{Escape}': quit,
* Thu 01 May 2014 03:36:11 PM JST
         '^{F1}': setdebuglevel,
         '+{F1}': setinfolevel,

* Thu 01 May 2014 04:25:44 PM JST
logging.log(10, MSG.get('start'))
* Thu 01 May 2014 04:25:54 PM JST
'Not support WindowsNT.'
* Thu 01 May 2014 05:00:28 PM JST
# define backup directory name
###############################################################################
backup_name = 'knight_local'
backup_base_dir = '/data/.backup'
backup_path = os.path.join(backup_base_dir, backup_name)

# define Max incremental backup
MAX = 30
###############################################################################

* Thu 01 May 2014 05:00:46 PM JST

* Thu 01 May 2014 05:00:46 PM JST

* Thu 01 May 2014 05:00:47 PM JST
from logging.handlers import RotatingFileHandler

* Thu 01 May 2014 05:00:54 PM JST

* Thu 01 May 2014 05:00:54 PM JST

* Thu 01 May 2014 05:00:54 PM JST
# define log file name

* Thu 01 May 2014 05:01:08 PM JST

* Thu 01 May 2014 05:01:08 PM JST

* Thu 01 May 2014 05:01:08 PM JST
#

* Thu 01 May 2014 05:02:04 PM JST

* Thu 01 May 2014 05:02:04 PM JST

* Thu 01 May 2014 05:02:04 PM JST
print(MSG.get('start'))

* Thu 01 May 2014 05:02:10 PM JST

* Thu 01 May 2014 05:02:10 PM JST

* Thu 01 May 2014 05:02:11 PM JST
logging.log(10, MSG.get('start'))

* Thu 01 May 2014 05:02:16 PM JST
## Start Backup message
#

* Thu 01 May 2014 05:03:05 PM JST

* Thu 01 May 2014 05:03:05 PM JST

* Thu 01 May 2014 05:03:05 PM JST
logging.log(10, MSG.get('start'))

* Thu 01 May 2014 05:03:05 PM JST
logging.log(10, MSG.get('start'))

* Thu 01 May 2014 05:03:05 PM JST
logging.log(10, MSG.get('start'))
print(MSG.get('start'))

* Thu 01 May 2014 05:03:20 PM JST
ERROR
* Thu 01 May 2014 05:03:42 PM JST
logging
* Thu 01 May 2014 05:04:40 PM JST
LOG.error('Not support WindowsNT.')
* Thu 01 May 2014 05:04:46 PM JST
'Script must be run as root.'
* Thu 01 May 2014 05:05:08 PM JST
LOG.error('Script must be run as root.')
* Thu 01 May 2014 05:05:14 PM JST
'NOT Allow This Runlevel.'
* Thu 01 May 2014 05:06:10 PM JST
getrunlevel
* Thu 01 May 2014 05:07:38 PM JST
'Failed: Not decrypted /dev/mapper/data. Will Exit.'
* Thu 01 May 2014 05:08:13 PM JST
Exit.
* Thu 01 May 2014 05:08:13 PM JST
Will Exit.
* Thu 01 May 2014 05:08:22 PM JST

* Thu 01 May 2014 05:08:22 PM JST

* Thu 01 May 2014 05:08:22 PM JST
    logging.log(10, MSG.get('nodecrypt'))

* Thu 01 May 2014 05:08:50 PM JST
LOGPATH
* Thu 01 May 2014 05:09:50 PM JST
'Failed: sshfs mounting /data'
* Thu 01 May 2014 05:09:57 PM JST

* Thu 01 May 2014 05:09:57 PM JST

* Thu 01 May 2014 05:09:57 PM JST
        logging.log(10, MSG.get('sshfs_mounting'))

* Thu 01 May 2014 05:10:33 PM JST
'Warnings: Not exists {0}. Will create'.format(backup_path)
* Thu 01 May 2014 05:10:45 PM JST

* Thu 01 May 2014 05:10:45 PM JST

* Thu 01 May 2014 05:10:45 PM JST
    logging.log(10, MSG.get('nobkuppath'))

* Thu 01 May 2014 05:10:46 PM JST
    logging.log(10, MSG.get('nobkuppath'))

* Thu 01 May 2014 05:10:46 PM JST
    logging.log(10, MSG.get('nobkuppath'))
    print(MSG.get('nobkuppath'))

* Thu 01 May 2014 05:10:58 PM JST
error
* Thu 01 May 2014 05:12:38 PM JST
                         
* Thu 01 May 2014 05:13:31 PM JST

* Thu 01 May 2014 05:13:31 PM JST

* Thu 01 May 2014 05:13:31 PM JST
import subprocess as sbp

* Thu 01 May 2014 05:13:33 PM JST

* Thu 01 May 2014 05:13:33 PM JST

* Thu 01 May 2014 05:13:33 PM JST
import argparse

* Thu 01 May 2014 05:16:17 PM JST
DEBUG
* Thu 01 May 2014 05:16:36 PM JST
DEBUG
* Thu 01 May 2014 05:24:15 PM JST
LOGNAME
* Thu 01 May 2014 05:43:29 PM JST

* Thu 01 May 2014 05:43:29 PM JST

* Thu 01 May 2014 05:43:29 PM JST
        for _ in xrange(0, 1):

* Thu 01 May 2014 05:46:28 PM JST
remove
* Thu 01 May 2014 06:27:42 PM JST
~/
* Fri 02 May 2014 07:21:56 AM JST
GeometryInfo
* Fri 02 May 2014 07:48:44 AM JST
ConnectionAbstract
* Fri 02 May 2014 07:48:55 AM JST
ConnectionAbstract.__init__(self, connection)
* Fri 02 May 2014 07:49:37 AM JST
root,
* Fri 02 May 2014 07:50:01 AM JST
window, 
* Fri 02 May 2014 07:54:03 AM JST

* Fri 02 May 2014 07:54:03 AM JST

* Fri 02 May 2014 07:54:03 AM JST
        cookie = self.connection.core.Tran

* Fri 02 May 2014 07:54:45 AM JST
translate_coords
* Fri 02 May 2014 07:56:04 AM JST
x, y, width, height, window, root=None
* Fri 02 May 2014 07:56:15 AM JST
x, 
* Fri 02 May 2014 07:56:16 AM JST
self.x, 
* Fri 02 May 2014 07:56:51 AM JST
        
* Fri 02 May 2014 07:57:42 AM JST

* Fri 02 May 2014 07:57:42 AM JST

* Fri 02 May 2014 07:57:42 AM JST
        x, y, width, height, window, root=None

* Fri 02 May 2014 07:59:11 AM JST
reply.dst_y - (2 * self.y)
* Fri 02 May 2014 07:59:26 AM JST
.reply()
* Fri 02 May 2014 07:59:29 AM JST

* Fri 02 May 2014 07:59:29 AM JST

* Fri 02 May 2014 07:59:29 AM JST
        reply = cookie

* Fri 02 May 2014 07:59:31 AM JST
cookie
* Fri 02 May 2014 08:00:13 AM JST
GeometryInfo
* Fri 02 May 2014 08:06:29 AM JST
ConnectionAbstract
* Fri 02 May 2014 08:06:38 AM JST

* Fri 02 May 2014 08:06:39 AM JST

* Fri 02 May 2014 08:06:39 AM JST
        self.connection = connection

* Fri 02 May 2014 08:07:14 AM JST
    def translate_coords(self, ):
        r"""SUMMARY

        translate_coords()

        @Return:
        """
        reply = self.core.TranslateCoordinates(
            self.window, self.root, self.x, self.y).reply()
        posx, posy = reply.dst_x - (2 * self.x), reply.dst_y - (2 * self.y)
        return self.__class__(self.connection, posx, posy,
                              self.width, self.height, self.window, self.root)


* Fri 02 May 2014 08:07:42 AM JST
height, 
* Fri 02 May 2014 08:07:43 AM JST
self.height, 
* Fri 02 May 2014 08:07:44 AM JST
width, self.height, 
* Fri 02 May 2014 08:07:44 AM JST
self.width, self.height, 
* Fri 02 May 2014 08:07:45 AM JST
                              self.width, self.height, 
* Fri 02 May 2014 08:35:04 AM JST
length', 
* Fri 02 May 2014 08:35:04 AM JST
name', 'length', 
* Fri 02 May 2014 08:52:31 AM JST
prop
* Fri 02 May 2014 09:42:48 AM JST
 or CacheAtom()
* Fri 02 May 2014 12:08:30 PM JST
GetFullProperty
* Fri 02 May 2014 12:11:36 PM JST
delete, 
* Fri 02 May 2014 12:11:40 PM JST
delete
* Fri 02 May 2014 12:11:50 PM JST
0, 
* Fri 02 May 2014 12:11:51 PM JST
offset=0, 
* Fri 02 May 2014 12:11:54 PM JST
offset
* Fri 02 May 2014 12:12:07 PM JST
            
* Fri 02 May 2014 12:12:20 PM JST
False
* Fri 02 May 2014 12:12:20 PM JST
delete=False
* Fri 02 May 2014 12:12:25 PM JST
delete, 
* Fri 02 May 2014 12:12:32 PM JST
delete, 
* Fri 02 May 2014 12:13:04 PM JST
delete, 
* Fri 02 May 2014 12:13:14 PM JST
delete, 
* Fri 02 May 2014 12:13:23 PM JST
delete, 
* Fri 02 May 2014 12:13:29 PM JST
delete, 
* Fri 02 May 2014 12:13:36 PM JST
delete, 
* Fri 02 May 2014 12:13:45 PM JST
delete, 
* Fri 02 May 2014 12:13:53 PM JST
delete, 
* Fri 02 May 2014 12:14:01 PM JST
delete, 
* Fri 02 May 2014 12:14:08 PM JST
delete, 
* Fri 02 May 2014 12:14:14 PM JST
delete, 
* Fri 02 May 2014 12:14:27 PM JST
delete, 
* Fri 02 May 2014 12:14:28 PM JST
                                       
* Fri 02 May 2014 12:14:40 PM JST
delete, 
* Fri 02 May 2014 12:14:44 PM JST
delete, 
* Fri 02 May 2014 12:14:52 PM JST
delete, 
* Fri 02 May 2014 12:14:57 PM JST
delete, 
* Fri 02 May 2014 12:15:03 PM JST
delete, 
* Fri 02 May 2014 12:15:11 PM JST
delete, 
* Fri 02 May 2014 12:15:14 PM JST
            
* Fri 02 May 2014 12:15:23 PM JST
delete, 
* Fri 02 May 2014 12:15:37 PM JST
delete, 
* Fri 02 May 2014 12:15:42 PM JST
delete, 
* Fri 02 May 2014 12:15:50 PM JST
delete, 
* Fri 02 May 2014 12:15:55 PM JST
delete, 
* Fri 02 May 2014 12:16:01 PM JST
delete, 
* Fri 02 May 2014 12:16:07 PM JST
delete, 
* Fri 02 May 2014 12:16:15 PM JST
delete, 
* Fri 02 May 2014 12:16:18 PM JST
delete, 
* Fri 02 May 2014 12:16:23 PM JST
delete, 
* Fri 02 May 2014 12:16:29 PM JST
delete, 
* Fri 02 May 2014 12:16:34 PM JST
delete, 
* Fri 02 May 2014 12:16:44 PM JST
delete, 
* Fri 02 May 2014 12:16:50 PM JST
delete, 
* Fri 02 May 2014 12:16:57 PM JST
delete, 
* Fri 02 May 2014 12:17:05 PM JST
delete, 
* Fri 02 May 2014 12:17:15 PM JST
delete, 
* Fri 02 May 2014 12:17:23 PM JST
delete, 
* Fri 02 May 2014 12:17:30 PM JST
delete, 
* Fri 02 May 2014 12:17:35 PM JST
delete, 
* Fri 02 May 2014 12:17:41 PM JST
delete, 
* Fri 02 May 2014 12:17:46 PM JST
delete, 
* Fri 02 May 2014 12:17:52 PM JST
delete, 
* Fri 02 May 2014 12:17:58 PM JST
delete, 
* Fri 02 May 2014 12:18:03 PM JST
delete, 
* Fri 02 May 2014 12:20:16 PM JST
self.core.GetPropertyUnchecked(delete, window,
                                                prop,
                                                self.atomidentify(prop.types.name),
                                                offset, length)
* Fri 02 May 2014 12:20:31 PM JST
                                        
* Fri 02 May 2014 12:20:33 PM JST
                                
* Fri 02 May 2014 12:20:36 PM JST
    
* Fri 02 May 2014 12:20:37 PM JST
                                       
* Fri 02 May 2014 12:20:48 PM JST
prop = self.atomidentify(property_)
* Fri 02 May 2014 12:23:47 PM JST
delete,
* Fri 02 May 2014 12:23:49 PM JST
offset, 
* Fri 02 May 2014 12:23:50 PM JST
            
* Fri 02 May 2014 12:23:56 PM JST
0, 
* Fri 02 May 2014 12:23:57 PM JST
offset=0, 
* Fri 02 May 2014 12:24:00 PM JST
False,
* Fri 02 May 2014 12:24:00 PM JST
delete=False,
* Fri 02 May 2014 12:24:39 PM JST
50331694
* Fri 02 May 2014 12:25:31 PM JST
'WM_NAME'
* Fri 02 May 2014 12:26:54 PM JST
/list 
* Fri 02 May 2014 12:41:09 PM JST

* Fri 02 May 2014 12:41:09 PM JST

* Fri 02 May 2014 12:41:09 PM JST
        self.delete = delete

* Fri 02 May 2014 12:41:12 PM JST
delete, 
* Fri 02 May 2014 12:41:26 PM JST
delete
* Fri 02 May 2014 12:41:26 PM JST
self.delete
* Fri 02 May 2014 12:42:44 PM JST
delete', 
* Fri 02 May 2014 12:42:44 PM JST
reply', 'delete', 
* Fri 02 May 2014 12:42:57 PM JST
delete, 
* Fri 02 May 2014 12:43:40 PM JST
delete, 
* Fri 02 May 2014 12:44:46 PM JST

* Fri 02 May 2014 12:44:46 PM JST

* Fri 02 May 2014 12:44:46 PM JST
        self.length = length

* Fri 02 May 2014 12:44:50 PM JST
length
* Fri 02 May 2014 12:45:01 PM JST
length
* Fri 02 May 2014 12:45:01 PM JST
self.length
* Fri 02 May 2014 12:53:35 PM JST
a
* Fri 02 May 2014 12:53:36 PM JST
core2.a
* Fri 02 May 2014 12:55:27 PM JST
atomidentify()
* Fri 02 May 2014 12:55:28 PM JST
parent.atomidentify()
* Fri 02 May 2014 12:59:51 PM JST
_WIN_WORKSPACE
* Fri 02 May 2014 01:00:07 PM JST
_WIN_STATE
* Fri 02 May 2014 01:00:22 PM JST
_NET_SUPPORTED
* Fri 02 May 2014 01:00:44 PM JST
'_NET_WORKAREA'
* Fri 02 May 2014 01:01:00 PM JST
'_NET_WM_WINDOW_TYPE_DESKTOP'
* Fri 02 May 2014 01:20:50 PM JST
rep.value.buf() 
* Fri 02 May 2014 01:21:37 PM JST
balue_
* Fri 02 May 2014 01:22:19 PM JST
rep=c.core2.TesGetProperty(False, 50331694, 'WM_NAME', )
* Fri 02 May 2014 01:22:36 PM JST
rep2=c.core2.TesGetProperty(False, 50331694, 'WM_NAME', rep.bytes_after / 4 + 1, 10)
* Fri 02 May 2014 01:23:13 PM JST
rep.bytes_after / 4
* Fri 02 May 2014 01:23:20 PM JST
bytes_after
* Fri 02 May 2014 01:30:25 PM JST
bytes_after
* Fri 02 May 2014 01:31:37 PM JST
bytes_after
* Fri 02 May 2014 01:32:22 PM JST
value
* Fri 02 May 2014 01:34:22 PM JST
name
* Fri 02 May 2014 01:40:22 PM JST
return 
* Fri 02 May 2014 01:41:57 PM JST
            
* Fri 02 May 2014 01:46:58 PM JST
WrapPropertyReply
* Fri 02 May 2014 01:47:06 PM JST
WrapPropertyReply
* Fri 02 May 2014 01:48:55 PM JST
c.core2.TesGetProperty(False, 50331694, 'WM_NAME', )
* Fri 02 May 2014 01:49:09 PM JST
import xcb2
c=xcb2.connect()

* Fri 02 May 2014 01:49:20 PM JST
import xcb2
c=xcb2.connect()

* Fri 02 May 2014 01:49:25 PM JST
c.core2.TesGetProperty(False, 50331694, 'WM_NAME', )
* Fri 02 May 2014 01:50:29 PM JST
connecti
* Fri 02 May 2014 01:51:50 PM JST
, self.type,
* Fri 02 May 2014 01:54:17 PM JST
'_NET_CLIENT_LIST'
* Fri 02 May 2014 01:55:22 PM JST
w.get_full_value()
* Fri 02 May 2014 01:56:47 PM JST
w.get_full_value()
* Fri 02 May 2014 01:57:00 PM JST
value_len
* Fri 02 May 2014 02:14:29 PM JST
/str 
* Fri 02 May 2014 02:14:43 PM JST
w._reply
* Fri 02 May 2014 02:16:22 PM JST
'\x03\x00\xa0\x01\x04\x00\x80\x01\x19\x00\x80\x01\x04\x00@\x02\x16\x00@\x03\x12\x00\xa0\x03.\x00\x00\x03\x04\x00\x00\x04\xcf\xb6\x01\x03\x19\x00\x80\x01'
* Fri 02 May 2014 02:16:32 PM JST
'\x03\x00\xa0\x01\x04\x00\x80\x01\x19\x00\x80\x01\x04\x00@\x02\x16\x00@\x03\x12\x00\xa0\x03.\x00\x00\x03\x04\x00\x00\x04\xcf\xb6\x01\x03'
* Fri 02 May 2014 02:20:21 PM JST
.value_buf
* Fri 02 May 2014 02:20:33 PM JST
bytes_after
* Fri 02 May 2014 04:27:58 PM JST
return 
* Fri 02 May 2014 04:28:39 PM JST
value_buf
* Fri 02 May 2014 04:28:54 PM JST
valu
* Fri 02 May 2014 04:31:18 PM JST
self.get_value()
* Fri 02 May 2014 04:36:19 PM JST
Property
* Fri 02 May 2014 04:39:34 PM JST
get_bytes_af
* Fri 02 May 2014 04:42:10 PM JST
Atom
* Fri 02 May 2014 04:44:27 PM JST
PropertyAtom8Type
* Fri 02 May 2014 04:44:50 PM JST
'UTF8_STRING'
* Fri 02 May 2014 04:44:58 PM JST
PropertyAtom8Type
* Fri 02 May 2014 04:45:32 PM JST
    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        result, append = make_list_append()
        chr_ = ''
        for ord_ in self.reply.value:
            if not ord_:
                append(chr_)
                chr_ = ''
            else:
                chr_ += chr(ord_)
        return result

* Fri 02 May 2014 04:45:40 PM JST
reply.
* Fri 02 May 2014 04:46:32 PM JST
'UTF8_STRING[]'
* Fri 02 May 2014 04:47:00 PM JST
PropertyAtomTypeUTF8STRINGLIST
* Fri 02 May 2014 04:47:27 PM JST
'WINDOW'
* Fri 02 May 2014 04:47:58 PM JST
PropertyAtom32Type
* Fri 02 May 2014 04:48:52 PM JST
    def get_value(self, ):
        r"""SUMMARY
        
        get_value()
        
        @Return:
        """
        return list(_unpack('I' * self.value_len, self.value_buf))

* Fri 02 May 2014 04:54:19 PM JST
PropertyAtomTypeWINDOW
* Fri 02 May 2014 04:56:09 PM JST
AtomTypesATOM
* Fri 02 May 2014 04:58:01 PM JST
    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        values = list(
            _unpack('I' * self.reply.value_len, self.reply.value.buf()))
        return [self.parent.atomidentify(x) for x in values]


* Fri 02 May 2014 04:58:07 PM JST
reply.
* Fri 02 May 2014 04:58:11 PM JST
reply.
* Fri 02 May 2014 04:58:22 PM JST
parent
* Fri 02 May 2014 04:58:45 PM JST
PropertyAtomTypeATOM
* Fri 02 May 2014 05:07:55 PM JST
TYPES
* Fri 02 May 2014 05:08:48 PM JST
self.atomidentify(property_)
* Fri 02 May 2014 05:08:52 PM JST
reply.type
* Fri 02 May 2014 05:09:37 PM JST
(self.connection, reply, window, prop)
* Fri 02 May 2014 05:10:01 PM JST
import xcb2
c=xcb2.connect()

* Fri 02 May 2014 05:10:16 PM JST
TYPES = {'STRING': PropertyAtom8Type,
         'UTF8_STRING': PropertyAtom8Type,
         'UTF8_STRING[]': PropertyAtomTypeUTF8STRINGLIST,
         'WINDOW': PropertyAtomTypeWINDOW,
         'ATOM': PropertyAtomTypeATOM,
         'CARDINAL': PropertyAtom32Type,
         'ANY': PropertyAtom32Type,
         }



* Fri 02 May 2014 05:11:46 PM JST
import xcb2
c=xcb2.connect()

* Fri 02 May 2014 05:11:48 PM JST
import xcb2
* Fri 02 May 2014 05:11:51 PM JST
c=xcb2.connect()
* Fri 02 May 2014 05:11:55 PM JST
c.core2.TesGetProperty(False, 50331694, 'WM_NAME', )
* Fri 02 May 2014 05:12:11 PM JST
get_value()
* Fri 02 May 2014 05:15:41 PM JST
Window
* Fri 02 May 2014 05:15:45 PM JST

* Fri 02 May 2014 05:17:16 PM JST
WINDOW_TYPES.get(str(types), FundamentalWindow)
* Fri 02 May 2014 05:20:11 PM JST
    def __typecheck(self, item):
        r"""SUMMARY

        _typecheck(item)

        @Arguments:
        - `item`:

        @Return:
        """
        if not isinstance(item, self.types):
            # TODO: (Atami) [2014/04/30]
            raise TypeError(item)

* Fri 02 May 2014 05:20:50 PM JST
    def __setitem__(self, i, item):
        r"""SUMMARY

        __setitem__(i, window)

        @Arguments:
        - `i`:
        - `window`:

        @Return:
        """
        self.__typecheck(item)
        super(OneTypeList, self).__setitem__(i, item)

* Fri 02 May 2014 05:21:00 PM JST
WindowListAbstract
* Fri 02 May 2014 05:22:37 PM JST
list(_unpack('I' * self.value_len, self.value_buf))
* Fri 02 May 2014 05:23:18 PM JST
from xcb2.xconnection.window.corewindow import Window
* Fri 02 May 2014 05:24:57 PM JST
import xcb2
c=xcb2.connect()

* Fri 02 May 2014 05:25:00 PM JST
c.core2.TesGetProperty(False, 50331694, 'WM_NAME', )
* Fri 02 May 2014 05:25:04 PM JST
c.core2.TesGetProperty(False, 50331694, 'WM_NAME', )
* Fri 02 May 2014 05:25:07 PM JST
WM_NAME
* Fri 02 May 2014 05:25:16 PM JST
'_NET_CLIENT_LIST'
* Fri 02 May 2014 05:25:19 PM JST
c.core2.TesGetProperty(False, 50331694, '
* Fri 02 May 2014 05:25:23 PM JST
'_NET_CLIENT_LIST'
* Fri 02 May 2014 05:25:26 PM JST
50331694
* Fri 02 May 2014 05:26:25 PM JST

* Fri 02 May 2014 05:26:25 PM JST

* Fri 02 May 2014 05:26:26 PM JST
        # return WrapPropertyReply(self.connection, reply, window, prop)

* Fri 02 May 2014 05:27:18 PM JST
GetProperty
* Fri 02 May 2014 05:29:35 PM JST
PropertyAtomTypeNone
* Fri 02 May 2014 05:31:12 PM JST
AropertyTypes
* Fri 02 May 2014 05:31:26 PM JST
ATOMTYPES
* Fri 02 May 2014 05:31:32 PM JST

* Fri 02 May 2014 05:31:32 PM JST

* Fri 02 May 2014 05:31:32 PM JST
    atoms = ATOMTYPES

* Fri 02 May 2014 05:31:38 PM JST
ATOMTYPES
* Fri 02 May 2014 05:32:25 PM JST
AtomTypes
* Fri 02 May 2014 05:33:14 PM JST
AtomTypes
* Fri 02 May 2014 05:33:37 PM JST
AtomTypes
* Fri 02 May 2014 05:34:16 PM JST
cookie
* Fri 02 May 2014 05:34:21 PM JST

* Fri 02 May 2014 05:34:21 PM JST

* Fri 02 May 2014 05:34:22 PM JST
        reply = cookie.reply()

* Fri 02 May 2014 05:34:50 PM JST
cls = TYPES.get(str(self.atomidentify(reply.type)))
* Fri 02 May 2014 05:35:03 PM JST
TYPES
* Fri 02 May 2014 05:35:12 PM JST
AtomTypes
* Fri 02 May 2014 05:35:34 PM JST
get_types
* Fri 02 May 2014 05:35:49 PM JST

* Fri 02 May 2014 05:35:49 PM JST

* Fri 02 May 2014 05:35:49 PM JST
        return 

* Fri 02 May 2014 05:35:55 PM JST
cls(self.connection, reply, window, prop)
* Fri 02 May 2014 05:39:30 PM JST
import xcb2
c=xcb2.connect()

* Fri 02 May 2014 05:40:07 PM JST
import xcb2
c=xcb2.connect()

* Fri 02 May 2014 05:40:12 PM JST
c.core2.TesGetProperty(False, 50331694, 'WM_NAME', )
* Fri 02 May 2014 05:40:21 PM JST
Tes
* Fri 02 May 2014 05:41:35 PM JST
Tes
* Fri 02 May 2014 05:42:37 PM JST
'_NET_CLIENT_LIST'
* Fri 02 May 2014 05:42:46 PM JST
50331694
* Fri 02 May 2014 05:43:31 PM JST

* Fri 02 May 2014 05:43:31 PM JST

* Fri 02 May 2014 05:43:31 PM JST
                                       # self.atomidentify(prop.types.name),

* Fri 02 May 2014 05:43:57 PM JST
                                       
* Fri 02 May 2014 05:43:58 PM JST
                                       
* Fri 02 May 2014 05:44:01 PM JST
                                       
* Fri 02 May 2014 05:44:26 PM JST
        prop = self.atomidentify(property_)
        reply = self.core.GetProperty(delete, window, prop, xproto.Atom.Any,
                                      offset, length).reply()
        cls = AtomTypes.get_types(str(self.atomidentify(reply.type)))
        return cls(self.connection, reply, window, prop)

* Fri 02 May 2014 05:44:40 PM JST
                                      
* Fri 02 May 2014 05:46:06 PM JST
        return (self.GetProperty(False, window, property_, 0, length)
                .get_full_value())

* Fri 02 May 2014 05:46:27 PM JST
w.
* Fri 02 May 2014 05:47:29 PM JST
c.core2.GetFullProperty(False, 482, '_NET_CLIENT_LIST', )
* Fri 02 May 2014 05:47:38 PM JST
import xcb2
c=xcb2.connect()

* Fri 02 May 2014 05:47:41 PM JST
c.core2.GetProperty(False, 50331694, 'WM_NAME', )
* Fri 02 May 2014 05:47:45 PM JST
c.core2.GetFullProperty(False, 482, '_NET_CLIENT_LIST', )
* Fri 02 May 2014 05:48:04 PM JST
False, 
* Fri 02 May 2014 05:48:08 PM JST
c.core2.GetFullProperty(482, '_NET_CLIENT_LIST', )
* Fri 02 May 2014 05:48:31 PM JST
Tes
* Fri 02 May 2014 05:50:36 PM JST
PropertyAtom8Type
* Fri 02 May 2014 05:51:05 PM JST
PropertyAtom32Type
* Fri 02 May 2014 05:51:44 PM JST
PropertyAtomTypeUTF8STRINGLIST
* Fri 02 May 2014 05:51:50 PM JST
Property
* Fri 02 May 2014 05:52:01 PM JST
PropertyAtomTypeWINDOW
* Fri 02 May 2014 05:52:12 PM JST
Property
* Fri 02 May 2014 05:52:27 PM JST
PropertyAtomTypeATOM
* Fri 02 May 2014 05:52:32 PM JST
Property
* Fri 02 May 2014 05:52:43 PM JST
Property
* Fri 02 May 2014 05:56:01 PM JST
AtomTypeATOM(AtomType32):
    r"""SUMMARY
    """

    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        values = list(
            _unpack('I' * self.value_len, self.value_buf()))
        return [self.connection.core2.atomidentify(x) for x in values]


class AtomTypeNONE(AtomType32):
    r"""SUMMARY
    """

    def get_value(self, ):
        r"""SUMMARY

        get_value()

        @Return:
        """
        raise NotImplementedError()


ATOMTYPES = {'STRING': AtomType8,
             'UTF8_STRING': AtomType8,
             'UTF8_STRING[]': AtomTypeUTF8STRINGLIST,
             'WINDOW': AtomTypeWINDOW,
             'ATOM': AtomTypeA
* Fri 02 May 2014 06:06:03 PM JST
list(
* Fri 02 May 2014 06:06:11 PM JST
list(
* Fri 02 May 2014 06:07:08 PM JST
atom
* Fri 02 May 2014 06:12:17 PM JST

* Fri 02 May 2014 06:12:17 PM JST

* Fri 02 May 2014 06:12:17 PM JST
        print(atom)

* Fri 02 May 2014 06:15:24 PM JST

* Fri 02 May 2014 06:15:24 PM JST

* Fri 02 May 2014 06:15:24 PM JST
        print(name)

* Fri 02 May 2014 06:15:33 PM JST
reply.type
* Fri 02 May 2014 06:18:32 PM JST
for i in struct.unpack('I', '\00\00\00\01'):
* Fri 02 May 2014 06:19:05 PM JST
atomidentity
* Fri 02 May 2014 06:22:49 PM JST
reply.type
* Fri 02 May 2014 06:23:38 PM JST
reply
* Fri 02 May 2014 06:26:11 PM JST
BUILTIN_ATOMS = {
    'WM_NAME'             : AtomTypesSTRING,
    'WM_LOCALE_NAME'      : AtomTypesSTRING,
    # 'WM_HINTS'            : ('', ),
    'WM_ICON_NAME'        : AtomTypesSTRING,
    'WM_CLASS'            : AtomTypesSTRING,
    'WM_TRANSIENT_FOR'    : AtomTypesWINDOW,
    'WM_PROTOCOLS'        : AtomTypesATOM,
    'WM_COLORMAP_WINDOWS' : AtomTypesWINDOW,
    'WM_CLIENT_MACHINE'   : AtomTypesSTRING,
    # 'WM_NORMAL_HINTS': ('WM_SIZE_HINTS', ),
    }

BASE_ATOMS = {
    'WM_STATE'                   : AtomTypesCARDINAL,

    '_WIN_WORKSPACE'             : AtomTypesCARDINAL,
    '_WIN_STATE'                 : AtomTypesCARDINAL,
    '_NET_SUPPORTED'             : AtomTypesATOM,
    '_NET_CLIENT_LIST'           : AtomTypesWINDOW,
    '_NET_CLIENT_LIST_STACKING'  : AtomTypesWINDOW,
    '_NET_NUMBER_OF_DESKTOPS'    : AtomTypesCARDINAL,
    '_NET_DESKTOP_GEOMETRY'      : AtomTypesCARDINAL,
    '_NET_DESKTOP_VIEWPORT'      : AtomTypesCARDINAL,
    '_NET_CURRENT_DESKTOP'       : AtomTypesCARDINAL,
    '_NET_DESKTOP_NAMES'         : AtomTypesUTF8STRINGLIST,
    '_NET_ACTIVE_WINDOW'         : AtomTypesWINDOW,
    '_NET_WORKAREA'              : AtomTypesCARDINAL,
    '_NET_SUPPORTING_WM_CHECK'   : AtomTypesWINDOW,
    '_NET_VIRTUAL_ROOTS'         : AtomTypesWINDOW,
    '_NET_DESKTOP_LAYOUT'        : AtomTypesCARDINAL,
    '_NET_SHOWING_DESKTOP'       : AtomTypesCARDINAL,

    '_NET_CLOSE_WINDOW'          : AtomTypesNone,
    '_NET_MOVERESIZE_WINDOW'     : AtomTypesNone,
    '_NET_WM_MORERESIZE'         : AtomTypesNone,
    '_NET_RESTACK_WINDOW'        : AtomTypesNone,
    '_NET_REQUEST_FRAME_EXTENTS' : AtomTypesCARDINAL,

    '_NET_WM_NAME'               : AtomTypesUTF8STRING,
    '_NET_WM_VISIBLE_NAME'       : AtomTypesUTF8STRING,
    '_NET_WM_ICON_NAME'          : AtomTypesUTF8STRING,
    '_NET_WM_VISIBLE_ICON_NAME'  : AtomTypesUTF8STRING,
    '_NET_WM_DESKTOP'            : AtomTypesCARDINAL,
    '_NET_WM_WINDOW_TYPE'        : AtomTypesATOM,
    '_NET_WM_STATE'              : AtomTypesATOM,
    '_NET_WM_ALLOWED_ACTIONS'    : AtomTypesATOM,
    '_NET_WM_STRUT'              : AtomTypesCARDINAL,
    '_NET_WM_STRUT_PARTIAL'      : AtomTypesCARDINAL,
    '_NET_WM_ICON_GEOMETRY'      : AtomTypesCARDINAL,
    '_NET_WM_ICON'               : AtomTypesCARDINAL,
    '_NET_WM_PID'                : AtomTypesCARDINAL,
    '_NET_WM_HANDLED_ICONS'      : AtomTypesCARDINAL,
    '_NET_WM_USER_TIME'          : AtomTypesCARDINAL,
    '_NET_WM_USER_TIME_WINDOW'   : AtomTypesCARDINAL,
    '_NET_FRAME_EXTENTS'         : AtomTypesCARDINAL,

    '_OB_APP_TYPE'               : AtomTypesUTF8STRING,
    }

WINDOW_TYPES = {
    '_NET_WM_WINDOW_TYPE_DESKTOP'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DOCK'          : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_TOOLBAR'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_MENU'          : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_UTILITY'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_SPLASH'        : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DIALOG'        : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU' : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_POPUP_MENU'    : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_TOOLTIP'       : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_NOTIFICATION'  : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_COMBO'         : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_DND'           : AtomTypesATOM,
    '_NET_WM_WINDOW_TYPE_NORMAL'        : AtomTypesATOM,
    }

WINDOW_STATES = {
    '_NET_WM_STATE_MODAL'             : AtomTypesATOM,
    '_NET_WM_STATE_STICKY'            : AtomTypesATOM,
    '_NET_WM_STATE_MAXIMIZED_VERT'    : AtomTypesATOM,
    '_NET_WM_STATE_MAXIMIZED_HORZ'    : AtomTypesATOM,
    '_NET_WM_STATE_SHADED'            : AtomTypesATOM,
    '_NET_WM_STATE_SKIP_TASKBAR'      : AtomTypesATOM,
    '_NET_WM_STATE_SKIP_PAGER'        : AtomTypesATOM,
    '_NET_WM_STATE_HIDDEN'            : AtomTypesATOM,
    '_NET_WM_STATE_FULLSCREEN'        : AtomTypesATOM,
    '_NET_WM_STATE_ABOVE'             : AtomTypesATOM,
    '_NET_WM_STATE_BELOW'             : AtomTypesATOM,
    '_NET_WM_STATE_DEMANDS_ATTENTION' : AtomTypesATOM,
    }

WINDOW_ALLOWED_ACTIONS = {
    '_NET_WM_ACTION_MOVE'           : AtomTypesATOM,
    '_NET_WM_ACTION_RESIZE'         : AtomTypesATOM,
    '_NET_WM_ACTION_MINIMIZE'       : AtomTypesATOM,
    '_NET_WM_ACTION_SHADE'          : AtomTypesATOM,
    '_NET_WM_ACTION_STICK'          : AtomTypesATOM,
    '_NET_WM_ACTION_MAXIMIZE_HORZ'  : AtomTypesATOM,
    '_NET_WM_ACTION_MAXIMIZE_VERT'  : AtomTypesATOM,
    '_NET_WM_ACTION_FULLSCREEN'     : AtomTypesATOM,
    '_NET_WM_ACTION_CHANGE_DESKTOP' : AtomTypesATOM,
    '_NET_WM_ACTION_CLOSE'          : AtomTypesATOM,
    '_NET_WM_ACTION_ABOVE'          : AtomTypesATOM,
    '_NET_WM_ACTION_BELOW'          : AtomTypesATOM,
    }


PROPERTIY_ATOM_MAP = {}
PROPERTIY_ATOM_MAP.update(BUILTIN_ATOMS)
PROPERTIY_ATOM_MAP.update(BASE_ATOMS)
PROPERTIY_ATOM_MAP.update(WINDOW_TYPES)
PROPERTIY_ATOM_MAP.update(WINDOW_STATES)
PROPERTIY_ATOM_MAP.update(WINDOW_ALLOWED_ACTIONS)

* Fri 02 May 2014 06:26:33 PM JST
AtomType8
* Fri 02 May 2014 06:27:12 PM JST
AtomType8
* Fri 02 May 2014 06:27:49 PM JST
AtomTypeUTF8STRINGLIST
* Fri 02 May 2014 06:28:02 PM JST
AtomTypeWINDOW
* Fri 02 May 2014 06:28:22 PM JST
AtomTypeATOM
* Fri 02 May 2014 06:29:09 PM JST
AtomType32
* Fri 02 May 2014 06:29:37 PM JST
AtomType32
* Fri 02 May 2014 06:30:00 PM JST
AtomTypeWINDOW
* Fri 02 May 2014 06:30:07 PM JST
AtomTypeATOM
* Fri 02 May 2014 06:30:30 PM JST
ATOMTYPES
* Fri 02 May 2014 06:31:11 PM JST
type
* Fri 02 May 2014 06:31:12 PM JST
reply.type
* Fri 02 May 2014 06:31:28 PM JST
cls = AtomTypes.get_types(str(prop))
* Fri 02 May 2014 06:35:31 PM JST
GetFullProperty
* Fri 02 May 2014 06:40:31 PM JST
.get_full_property()
* Fri 02 May 2014 06:45:40 PM JST
get_full_value
* Fri 02 May 2014 06:46:08 PM JST
            
* Fri 02 May 2014 06:46:11 PM JST
            
* Fri 02 May 2014 06:46:15 PM JST
            
* Fri 02 May 2014 06:46:17 PM JST
            
* Fri 02 May 2014 06:46:24 PM JST
            
* Fri 02 May 2014 06:46:46 PM JST
            
* Fri 02 May 2014 06:46:50 PM JST
            
* Fri 02 May 2014 06:46:55 PM JST
            
* Fri 02 May 2014 06:46:57 PM JST
            
* Fri 02 May 2014 06:46:59 PM JST
            
* Fri 02 May 2014 06:47:03 PM JST
            
* Fri 02 May 2014 06:47:05 PM JST
            
* Fri 02 May 2014 06:47:07 PM JST
            
* Fri 02 May 2014 06:47:09 PM JST
            
* Fri 02 May 2014 06:47:18 PM JST
            
* Fri 02 May 2014 06:47:21 PM JST
            
* Fri 02 May 2014 06:47:24 PM JST
            
* Fri 02 May 2014 06:47:26 PM JST
            
* Fri 02 May 2014 06:47:28 PM JST
            
* Fri 02 May 2014 06:47:35 PM JST
            
* Fri 02 May 2014 06:47:43 PM JST
            
* Fri 02 May 2014 06:55:42 PM JST
50331694
* Fri 02 May 2014 06:56:07 PM JST
'WM_CLASS'
* Fri 02 May 2014 06:58:32 PM JST
# 'xfdesktop\x00Xfdesktop\x00' => ['xfdesktop', 'Xfdesktop']
* Fri 02 May 2014 07:06:30 PM JST
- [yas] elisp error!:
* Fri 02 May 2014 07:09:24 PM JST
wmclass.split('\0')[:2]
* Fri 02 May 2014 07:09:35 PM JST

* Fri 02 May 2014 07:09:35 PM JST

* Fri 02 May 2014 07:09:35 PM JST
            res_name, res_class = wmclass.split('\0')[:2]

* Fri 02 May 2014 07:11:36 PM JST
self.getfullproperty(window, '_NET_WM_PID')
* Fri 02 May 2014 07:11:39 PM JST

* Fri 02 May 2014 07:11:39 PM JST

* Fri 02 May 2014 07:11:39 PM JST
        pid = 

* Fri 02 May 2014 07:14:48 PM JST
self.getfullproperty(window, '_NET_CLIENT_LIST')
* Fri 02 May 2014 07:14:52 PM JST

* Fri 02 May 2014 07:14:52 PM JST

* Fri 02 May 2014 07:14:52 PM JST
        clients = 

* Fri 02 May 2014 07:14:57 PM JST
self.getfullproperty(window, '_NET_CLIENT_LIST_STACKING')
* Fri 02 May 2014 07:15:00 PM JST

* Fri 02 May 2014 07:15:00 PM JST

* Fri 02 May 2014 07:15:00 PM JST
        clients = 

* Fri 02 May 2014 07:16:15 PM JST
WindowList([x.get_types() for x in clients])
* Fri 02 May 2014 07:16:23 PM JST
return WindowList([x.get_types() for x in clients])
* Fri 02 May 2014 08:44:00 PM JST
xcb2.connect().root.client_list()
* Fri 02 May 2014 08:45:17 PM JST
convert_types()
* Fri 02 May 2014 08:48:01 PM JST
self.connection
* Fri 02 May 2014 08:49:00 PM JST
convert_types()
* Fri 02 May 2014 08:51:50 PM JST
WindowTypesList
* Fri 02 May 2014 08:54:31 PM JST
wthers
* Fri 02 May 2014 08:54:38 PM JST
winlis
* Fri 02 May 2014 08:58:08 PM JST
xcb2.connect().root.client_list().
* Fri 02 May 2014 08:58:56 PM JST
weathermap
* Fri 02 May 2014 08:59:35 PM JST
'regobj 0.2.2 : Python Package Index - Google Chrome'
* Fri 02 May 2014 09:00:26 PM JST

* Fri 02 May 2014 09:00:26 PM JST

* Fri 02 May 2014 09:00:26 PM JST
        print(wthers)

* Fri 02 May 2014 09:00:41 PM JST
weather.name
* Fri 02 May 2014 09:00:53 PM JST
windowlist
* Fri 02 May 2014 09:02:45 PM JST
xcb2.connect().root.client_list()
* Fri 02 May 2014 09:03:37 PM JST
xcb2.connect().root.client_list()
* Fri 02 May 2014 09:04:34 PM JST
xcb2.connect().root.client_list()
* Fri 02 May 2014 09:08:24 PM JST
properties
* Fri 02 May 2014 09:08:24 PM JST
c.properties
* Fri 02 May 2014 09:08:28 PM JST
import xcb2
c=xcb2.connect()

* Fri 02 May 2014 09:08:45 PM JST
get_NET_CLIENT_LIST
* Fri 02 May 2014 09:09:31 PM JST
c.properties.get_NET_CLIENT_LIST(482)
* Fri 02 May 2014 09:15:16 PM JST
'_NET_CLIENT_LIST'
* Fri 02 May 2014 09:17:50 PM JST
get_value()
* Fri 02 May 2014 09:18:18 PM JST
type
* Fri 02 May 2014 09:19:40 PM JST
'_NET_CLIENT_LIST'
* Fri 02 May 2014 09:20:42 PM JST
value_buf
* Fri 02 May 2014 09:21:28 PM JST
get_value()
* Fri 02 May 2014 09:21:29 PM JST
/list ll.get_value()
* Fri 02 May 2014 09:21:40 PM JST
c.core2.GetProperty(False, 482, '_NET_CLIENT_LIST').get_full_value()
* Fri 02 May 2014 09:23:57 PM JST
weathermap.get_chrome_windows()
* Fri 02 May 2014 09:27:41 PM JST
self.value_len
* Fri 02 May 2014 09:41:10 PM JST
AtomTypesUTF8STRING
* Fri 02 May 2014 09:42:48 PM JST
class AtomTypesUTF8STRING(Atom8Types):
    r"""SUMMARY
    """
    name = 'UTF8_STRING'


* Fri 02 May 2014 09:43:30 PM JST
name = 'UTF8_STRING[]'
* Fri 02 May 2014 09:43:48 PM JST
name = 'WINDOW'
* Fri 02 May 2014 09:43:56 PM JST
name = 'ATOM'
* Fri 02 May 2014 09:44:04 PM JST
name = 'CARDINAL'
* Fri 02 May 2014 09:44:11 PM JST
class AtomTypesCARDINAL(Atom32Types):
    r"""SUMMARY
    """
    name = 'CARDINAL'



* Fri 02 May 2014 09:44:25 PM JST
class AtomTypesANY(Atom32Types):
    r"""SUMMARY
    """
    name = 'ANY'


* Fri 02 May 2014 09:45:59 PM JST
AtomTypeSTRING
* Fri 02 May 2014 09:47:07 PM JST
AtomTypeCARDINAL
* Fri 02 May 2014 09:48:25 PM JST
AtomTypeNONE
* Fri 02 May 2014 09:48:43 PM JST
AtomTypeCARDINAL
* Fri 02 May 2014 09:49:32 PM JST
AtomTypeUTF8STRING
* Fri 02 May 2014 09:50:47 PM JST
cls
* Fri 02 May 2014 09:50:53 PM JST
self.atomidentify(property_)
* Fri 02 May 2014 09:51:00 PM JST
property_
* Fri 02 May 2014 09:51:28 PM JST
self.atomidentify(cls.name),
* Fri 02 May 2014 09:52:01 PM JST
weathermap.get_chrome_windows()[0].name
* Fri 02 May 2014 09:54:03 PM JST
import xcb2
c=xcb2.connect()

* Fri 02 May 2014 09:54:11 PM JST
from
* Fri 02 May 2014 09:56:05 PM JST
self.atomidentify(cls.name)
* Fri 02 May 2014 09:56:41 PM JST

* Fri 02 May 2014 09:56:41 PM JST

* Fri 02 May 2014 09:56:41 PM JST
        print(self.atomidentify(cls.name))

* Fri 02 May 2014 10:00:11 PM JST
_NET_WM_NAME
* Fri 02 May 2014 10:00:20 PM JST
c.core2.atomidentify('_NET_WM_NAME')
* Fri 02 May 2014 10:00:28 PM JST
import xcb2
c=xcb2.connect()

* Fri 02 May 2014 10:02:54 PM JST
_NET_WM_NAME
* Fri 02 May 2014 10:03:04 PM JST
STRING
* Fri 02 May 2014 10:35:22 PM JST
value_len
* Fri 02 May 2014 10:35:35 PM JST
self._reply.value_len
* Fri 02 May 2014 10:37:39 PM JST
weathermap.get_chrome_windows()
* Fri 02 May 2014 10:38:45 PM JST
map(   
* Fri 02 May 2014 10:39:44 PM JST
self._reply.value_len / 4
* Fri 02 May 2014 10:40:12 PM JST
    def get_offset(self, ):
        r"""SUMMARY

        get_offset()

        @Return:
        """
        return self._reply.value_len / 4


* Fri 02 May 2014 10:42:14 PM JST
# offset
* Fri 02 May 2014 10:51:46 PM JST

* Fri 02 May 2014 10:51:46 PM JST

* Fri 02 May 2014 10:51:46 PM JST
        print(self._reply.value_len)

* Fri 02 May 2014 10:51:58 PM JST

* Fri 02 May 2014 10:51:58 PM JST

* Fri 02 May 2014 10:51:58 PM JST
        print(repr(self.atomidentify(cls.name)))

* Fri 02 May 2014 10:52:19 PM JST

* Fri 02 May 2014 10:52:19 PM JST

* Fri 02 May 2014 10:52:19 PM JST
        print(windowlist)

* Fri 02 May 2014 10:52:21 PM JST

* Fri 02 May 2014 10:52:22 PM JST

* Fri 02 May 2014 10:52:22 PM JST
                print(weather.name)

* Fri 02 May 2014 10:52:22 PM JST

* Fri 02 May 2014 10:52:22 PM JST

* Fri 02 May 2014 10:52:22 PM JST
                print(winlis)

* Sat 03 May 2014 06:32:28 AM JST
Windo
* Sat 03 May 2014 06:32:42 AM JST
WindowTypesList
* Sat 03 May 2014 06:33:18 AM JST
WindowTypesList([ x.get_typesself.properties.get_NET_CLIENT_LIST(self)])
* Sat 03 May 2014 06:35:21 AM JST
.to_types()
* Sat 03 May 2014 06:35:46 AM JST
self.getfullproperty(window, '_NET_CLIENT_LIST')
* Sat 03 May 2014 06:35:48 AM JST

* Sat 03 May 2014 06:35:48 AM JST

* Sat 03 May 2014 06:35:48 AM JST
        clients = 

* Sat 03 May 2014 06:35:52 AM JST
self.getfullproperty(window, '_NET_CLIENT_LIST_STACKING')
* Sat 03 May 2014 06:35:55 AM JST

* Sat 03 May 2014 06:35:55 AM JST

* Sat 03 May 2014 06:35:55 AM JST
        clients = 

* Sat 03 May 2014 06:38:28 AM JST

* Sat 03 May 2014 06:38:28 AM JST

* Sat 03 May 2014 06:38:28 AM JST
from xcb2.xconnection.properties.windowlist import WindowTypesList

* Sat 03 May 2014 06:40:14 AM JST

* Sat 03 May 2014 06:40:14 AM JST

* Sat 03 May 2014 06:40:14 AM JST
from xcb2.xconnection.properties.windowlist import WindowTypesList

* Sat 03 May 2014 06:43:08 AM JST
properties
* Sat 03 May 2014 07:16:12 AM JST
from xcb2 import Display
* Sat 03 May 2014 07:17:18 AM JST

* Sat 03 May 2014 07:17:18 AM JST

* Sat 03 May 2014 07:17:18 AM JST
        self.display = display or 

* Sat 03 May 2014 07:22:50 AM JST
from sendkeys.keymap import KeyboardMapping
* Sat 03 May 2014 07:22:55 AM JST
KeyboardMapping
* Sat 03 May 2014 07:24:23 AM JST
KeyboardMapping
* Sat 03 May 2014 07:24:53 AM JST
connect()
* Sat 03 May 2014 07:26:04 AM JST
KeymapDisplay()
* Sat 03 May 2014 07:26:27 AM JST
KeymapDisplay
* Sat 03 May 2014 07:29:21 AM JST
KeyboardMapping(self.connection)
* Sat 03 May 2014 07:29:24 AM JST

* Sat 03 May 2014 07:29:24 AM JST

* Sat 03 May 2014 07:29:24 AM JST
        self.connection.keymap = 

* Sat 03 May 2014 07:31:37 AM JST
else
* Sat 03 May 2014 07:35:59 AM JST
keyma
* Sat 03 May 2014 07:36:04 AM JST
KeymapDisplay
* Sat 03 May 2014 07:37:02 AM JST
KeymapDisplay
* Sat 03 May 2014 07:38:14 AM JST
return 
* Sat 03 May 2014 07:38:51 AM JST
keymap
* Sat 03 May 2014 07:38:57 AM JST
self.attr)
* Sat 03 May 2014 07:38:59 AM JST
self.attr
* Sat 03 May 2014 07:39:45 AM JST
KeymapDisplay
* Sat 03 May 2014 07:40:24 AM JST
KeymapDisplay
* Sat 03 May 2014 07:40:54 AM JST

* Sat 03 May 2014 07:40:54 AM JST

* Sat 03 May 2014 07:40:54 AM JST
from xcb2 import Display

* Sat 03 May 2014 07:40:57 AM JST
from sendkeys.display import KeymapDisplay
* Sat 03 May 2014 07:41:34 AM JST
KeymapDisplay
* Sat 03 May 2014 07:42:05 AM JST
from sendkeys.display import KeymapDisplay
* Sat 03 May 2014 07:42:09 AM JST

* Sat 03 May 2014 07:42:09 AM JST

* Sat 03 May 2014 07:42:10 AM JST
from xcb2 import Display

* Sat 03 May 2014 07:42:14 AM JST
KeymapDisplay
* Sat 03 May 2014 07:42:39 AM JST
from sendkeys.display import KeymapDisplay
* Sat 03 May 2014 07:42:49 AM JST
KeymapDisplay
* Sat 03 May 2014 07:43:22 AM JST
from sendkeys.display import KeymapDisplay
* Sat 03 May 2014 07:43:29 AM JST
KeymapDisplay
* Sat 03 May 2014 07:44:11 AM JST
from sendkeys.display import KeymapDisplay
* Sat 03 May 2014 07:44:16 AM JST
KeymapDisplay
* Sat 03 May 2014 07:47:43 AM JST

* Sat 03 May 2014 07:47:43 AM JST

* Sat 03 May 2014 07:47:43 AM JST
        # self.keymap = KeyboardMapping(self)

* Sat 03 May 2014 07:47:45 AM JST

* Sat 03 May 2014 07:47:45 AM JST

* Sat 03 May 2014 07:47:46 AM JST
# from sendkeys.keymap import KeyboardMapping

* Sat 03 May 2014 07:49:19 AM JST
class WindowTypesAbstract(object):
    r"""Summery
    """

    def __init__(self, window):
        r"""SUMMARY

        __init__(window, display=None)

        @Arguments:
        - `window`:
        - `display`:

        @Return:
        """
        self.window = window

    @property
    def connection(self, ):
        r"""SUMMARY

        connection()

        @Return:
        """
        return self.window.connection

    def __int__(self, ):
        return int(self.window)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.window, other.window)
        return cmp(int(self), other)

    def __repr__(self, ):
        return '{0.__class__.__name__}(window={0.window})'.format(self)

* Sat 03 May 2014 07:49:36 AM JST

* Sat 03 May 2014 07:49:36 AM JST

* Sat 03 May 2014 07:49:36 AM JST
from xcb2.xconnection.window.types_abstract import WindowTypesAbstract

* Sat 03 May 2014 07:50:38 AM JST
WindowTypesAbstract
* Sat 03 May 2014 08:24:21 AM JST
raw, 
* Sat 03 May 2014 08:27:01 AM JST
from xcb2.xconnection.window.corewindow import Window
from xcb2.xconnection.window.windowtypes import WindowRootType

* Sat 03 May 2014 08:36:01 AM JST
default_colormap
* Sat 03 May 2014 08:36:28 AM JST
default_colormap
* Sat 03 May 2014 08:36:30 AM JST
c.get_setup().roots[0].
* Sat 03 May 2014 08:36:39 AM JST
white
* Sat 03 May 2014 08:40:13 AM JST
connection
* Sat 03 May 2014 08:40:47 AM JST
__slots__ = ('_raw', 'connection')
* Sat 03 May 2014 08:43:14 AM JST
tes', 
* Sat 03 May 2014 08:45:58 AM JST

* Sat 03 May 2014 08:45:58 AM JST

* Sat 03 May 2014 08:45:58 AM JST
    __slots__ = ('_raw', 'connection')

* Sat 03 May 2014 08:46:00 AM JST

* Sat 03 May 2014 08:46:00 AM JST

* Sat 03 May 2014 08:46:00 AM JST
    # __slots__ = ('_raw', 'connection')

* Sat 03 May 2014 08:53:43 AM JST
    @property
    def white_pixel(self, ):
        r"""SUMMARY
        
        white_pixel()
        
        @Return:
        """
        return self._raw.white_pixel

* Sat 03 May 2014 08:53:47 AM JST
white_pixel
* Sat 03 May 2014 08:53:50 AM JST
$1
* Sat 03 May 2014 09:05:07 AM JST
WrapSetup
* Sat 03 May 2014 09:05:16 AM JST
c.get_setup()
* Sat 03 May 2014 09:25:22 AM JST
WrapSetup
* Sat 03 May 2014 09:25:55 AM JST
self.connection
* Sat 03 May 2014 09:27:00 AM JST

* Sat 03 May 2014 09:27:00 AM JST

* Sat 03 May 2014 09:27:00 AM JST
        root = self.connection.get_setup().roots[0].root

* Sat 03 May 2014 09:27:00 AM JST
        root = self.connection.get_setup().roots[0].root

* Sat 03 May 2014 09:27:00 AM JST
        root = self.connection.get_setup().roots[0].root
        return WindowRootType(Window(self.connection, root))

* Sat 03 May 2014 09:28:50 AM JST
from xcb2.xconnection.window.windows import Windows
* Sat 03 May 2014 09:30:30 AM JST

* Sat 03 May 2014 09:30:30 AM JST

* Sat 03 May 2014 09:30:30 AM JST
from xcb2.xconnection.wrapreply import WrapSetup

* Sat 03 May 2014 09:35:00 AM JST

* Sat 03 May 2014 09:35:00 AM JST

* Sat 03 May 2014 09:35:00 AM JST
from xcb2.xconnection.window.windows import Windows

* Sat 03 May 2014 09:35:12 AM JST
WindowList
* Sat 03 May 2014 09:35:31 AM JST
WindowTypesList
* Sat 03 May 2014 09:36:37 AM JST

* Sat 03 May 2014 09:36:37 AM JST

* Sat 03 May 2014 09:36:38 AM JST
        from xcb2.xconnection.wrapreply import WrapSetup

* Sat 03 May 2014 09:38:26 AM JST

* Sat 03 May 2014 09:38:30 AM JST
windows(
* Sat 03 May 2014 09:38:30 AM JST
connection.windows(
* Sat 03 May 2014 09:38:31 AM JST
self.connection.windows(
* Sat 03 May 2014 09:39:58 AM JST
class ConnectionAbstract(object):
    r"""SUMMARY
    """

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        self.connection = connection
        self.display = connection.display

    @property
    def base_connection(self, ):
        r"""SUMMARY

        base_connection()

        @Return:
        """
        return self.connection.connection

    @property
    def core(self, ):
        r"""SUMMARY

        core()

        @Return:
        """
        return self.base_connection.core


* Sat 03 May 2014 09:41:05 AM JST
connection
* Sat 03 May 2014 09:42:02 AM JST

* Sat 03 May 2014 09:42:02 AM JST

* Sat 03 May 2014 09:42:02 AM JST
        print(connection)

* Sat 03 May 2014 09:42:18 AM JST
connection
* Sat 03 May 2014 09:42:20 AM JST
connection
* Sat 03 May 2014 09:42:48 AM JST
get_setup().
* Sat 03 May 2014 09:42:56 AM JST

* Sat 03 May 2014 09:42:56 AM JST

* Sat 03 May 2014 09:42:56 AM JST
# from xcb2.xconnection.windows import Windows

* Sat 03 May 2014 09:43:07 AM JST

* Sat 03 May 2014 09:43:07 AM JST

* Sat 03 May 2014 09:43:07 AM JST
        # self.windows = Windows(self)

* Sat 03 May 2014 09:43:07 AM JST
        # self.windows = Windows(self)

* Sat 03 May 2014 09:43:07 AM JST
        # self.windows = Windows(self)
        # self.root = self.windows.get_root()

* Sat 03 May 2014 09:44:32 AM JST
windows(
* Sat 03 May 2014 09:44:33 AM JST
connection.windows(
* Sat 03 May 2014 09:44:33 AM JST
self.connection.windows(
* Sat 03 May 2014 09:49:39 AM JST
connection.
* Sat 03 May 2014 09:53:29 AM JST

* Sat 03 May 2014 09:53:31 AM JST
corewindow
* Sat 03 May 2014 09:53:48 AM JST

* Sat 03 May 2014 09:53:48 AM JST

* Sat 03 May 2014 09:53:48 AM JST
from xcb2.xconnection.window.windowtypes import 

* Sat 03 May 2014 09:53:51 AM JST
Window
* Sat 03 May 2014 09:54:56 AM JST
windows
* Sat 03 May 2014 09:55:03 AM JST
get_windowtype
* Sat 03 May 2014 10:00:45 AM JST

* Sat 03 May 2014 10:00:45 AM JST

* Sat 03 May 2014 10:00:45 AM JST
        # return self.connection.windows(winid)

* Sat 03 May 2014 10:10:17 AM JST
get_first_index(self.getfullproperty(window, '_NET_ACTIVE_WINDOW'))
* Sat 03 May 2014 10:10:21 AM JST

* Sat 03 May 2014 10:10:21 AM JST

* Sat 03 May 2014 10:10:21 AM JST
        winid = 

* Sat 03 May 2014 10:29:31 AM JST

* Sat 03 May 2014 10:29:31 AM JST

* Sat 03 May 2014 10:29:31 AM JST
        # return self.connection.get_setup().roots[0].root

* Sat 03 May 2014 10:49:04 AM JST

* Sat 03 May 2014 10:49:04 AM JST

* Sat 03 May 2014 10:49:04 AM JST
        self._x = x

* Sat 03 May 2014 10:49:04 AM JST
        self._x = x

* Sat 03 May 2014 10:49:04 AM JST
        self._x = x
        self._y = y

* Sat 03 May 2014 10:49:07 AM JST
self
* Sat 03 May 2014 10:52:16 AM JST

* Sat 03 May 2014 10:52:16 AM JST

* Sat 03 May 2014 10:52:16 AM JST
        self._x = x

* Sat 03 May 2014 10:52:16 AM JST
        self._x = x

* Sat 03 May 2014 10:52:16 AM JST
        self._x = x
        self._y = y

* Sat 03 May 2014 10:52:16 AM JST
        self._x = x
        self._y = y

* Sat 03 May 2014 10:52:16 AM JST
        self._x = x
        self._y = y
        self._width = width

* Sat 03 May 2014 10:52:17 AM JST
        self._x = x
        self._y = y
        self._width = width

* Sat 03 May 2014 10:52:17 AM JST
        self._x = x
        self._y = y
        self._width = width
        self._height = height

* Sat 03 May 2014 11:20:08 AM JST
_xycordinate
* Sat 03 May 2014 11:20:15 AM JST
_xycordinate
* Sat 03 May 2014 11:34:10 AM JST
self, )
* Sat 03 May 2014 02:39:48 PM JST
50331704
* Sat 03 May 2014 02:40:10 PM JST
border_width
* Sat 03 May 2014 02:40:13 PM JST
depth
* Sat 03 May 2014 02:40:17 PM JST
height
* Sat 03 May 2014 02:40:21 PM JST
root
* Sat 03 May 2014 02:40:24 PM JST
width
* Sat 03 May 2014 02:42:55 PM JST
WindowRootType(Window(self.connection, self._raw.root))
* Sat 03 May 2014 02:43:14 PM JST
WindowRootType(
* Sat 03 May 2014 03:09:01 PM JST
=None
* Sat 03 May 2014 03:21:28 PM JST
depth
* Sat 03 May 2014 03:21:40 PM JST
root
* Sat 03 May 2014 03:22:11 PM JST
border_width
* Sat 03 May 2014 03:23:51 PM JST
Trans
* Sat 03 May 2014 03:23:51 PM JST
core.Trans
* Sat 03 May 2014 03:25:43 PM JST
self.
* Sat 03 May 2014 03:26:08 PM JST
GeometryInfo
* Sat 03 May 2014 03:26:57 PM JST
self
* Sat 03 May 2014 03:26:58 PM JST
x, self
* Sat 03 May 2014 03:26:58 PM JST
self.x, self
* Sat 03 May 2014 03:38:54 PM JST
from xcb2.xproto.define import ConfigWindow
* Sat 03 May 2014 03:39:01 PM JST
define
* Sat 03 May 2014 03:41:48 PM JST
xcb2.xproto.ConfigWindow
* Sat 03 May 2014 03:42:10 PM JST
xcb2.xproto.ConfigWindow.X
* Sat 03 May 2014 03:45:30 PM JST
mask, 
* Sat 03 May 2014 03:45:58 PM JST
not 
* Sat 03 May 2014 03:47:38 PM JST
configure
* Sat 03 May 2014 03:47:56 PM JST
valu
* Sat 03 May 2014 03:47:57 PM JST
mask, valu
* Sat 03 May 2014 04:00:51 PM JST
height,
* Sat 03 May 2014 04:00:52 PM JST
width, height,
* Sat 03 May 2014 04:00:52 PM JST
y, width, height,
* Sat 03 May 2014 04:00:52 PM JST
x, y, width, height,
* Sat 03 May 2014 04:00:53 PM JST
connection, x, y, width, height,
* Sat 03 May 2014 04:01:05 PM JST

* Sat 03 May 2014 04:01:05 PM JST

* Sat 03 May 2014 04:01:05 PM JST
        self.connection = connection

* Sat 03 May 2014 04:12:04 PM JST
GeometryInfo
* Sat 03 May 2014 04:14:08 PM JST
_geo
* Sat 03 May 2014 04:14:08 PM JST
self._geo
* Sat 03 May 2014 04:20:55 PM JST
from xcb2.xconnection.geometry import Geometry
* Sat 03 May 2014 04:21:02 PM JST
from xcb2.xconnection.geometry import Geometry
* Sat 03 May 2014 04:21:05 PM JST
from xcb2.xconnection.geometry import Geometry
* Sat 03 May 2014 04:22:00 PM JST
setattr(
* Sat 03 May 2014 04:24:47 PM JST
50331704
* Sat 03 May 2014 11:44:54 PM JST
Geometry
* Sun 04 May 2014 07:13:35 AM JST
        cookie = self.connection.core.GetGeometry(window)
        reply = cookie.reply()

* Sun 04 May 2014 07:14:20 AM JST
WindowGeometry
* Sun 04 May 2014 07:14:47 AM JST
self.connection
* Sun 04 May 2014 07:15:59 AM JST
50331701
* Sun 04 May 2014 07:16:50 AM JST
('depth', 'root', 'x', 'y', 'width', 'height', 'border_width')
* Sun 04 May 2014 07:17:30 AM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 07:17:35 AM JST
c.core2.TesGetGeometry(50331701)
* Sun 04 May 2014 07:17:42 AM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 07:17:44 AM JST
c.core2.TesGetGeometry(50331701)
* Sun 04 May 2014 07:18:10 AM JST
translate_coordinates
* Sun 04 May 2014 07:19:07 AM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 07:19:09 AM JST
c.core2.TesGetGeometry(50331701)
* Sun 04 May 2014 07:21:58 AM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 07:22:01 AM JST
c.core2.TesGetGeometry(50331701)
* Sun 04 May 2014 07:23:12 AM JST
super(WindowGeometry, self).translate_coordinates(self.window)
* Sun 04 May 2014 07:23:57 AM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 07:24:01 AM JST
c.core2.TesGetGeometry(50331701)
* Sun 04 May 2014 07:24:05 AM JST
w=c.core2.TesGetGeometry(50331701)
* Sun 04 May 2014 07:26:08 AM JST
GeometryInfo
* Sun 04 May 2014 11:14:46 AM JST
        cookie = self.connection.core.GetGeometry(window)
        reply = cookie.reply()
        return WindowGeometry(self.connection, reply, window)

* Sun 04 May 2014 11:15:05 AM JST
        cookie = self.connection.core.GetGeometry(window)
        reply = cookie.reply()

* Sun 04 May 2014 11:15:07 AM JST
        cookie = self.connection.core.GetGeometry(window)
        reply = cookie.reply()
        return WindowGeometry(self.connection, reply, window)

* Sun 04 May 2014 11:15:56 AM JST
translate_coordinates
* Sun 04 May 2014 11:18:45 AM JST
50331701
* Sun 04 May 2014 11:20:37 AM JST
self._geo.root
* Sun 04 May 2014 11:21:47 AM JST
Window(self.connection, self._geo.root)
* Sun 04 May 2014 11:22:02 AM JST
self.connection.root
* Sun 04 May 2014 11:22:03 AM JST

* Sun 04 May 2014 11:22:03 AM JST

* Sun 04 May 2014 11:22:03 AM JST
        return  or 

* Sun 04 May 2014 11:24:02 AM JST
root
* Sun 04 May 2014 11:24:24 AM JST
get_geometry()
* Sun 04 May 2014 11:24:34 AM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 11:24:58 AM JST
50331701
* Sun 04 May 2014 11:25:34 AM JST
width
* Sun 04 May 2014 11:25:37 AM JST
root
* Sun 04 May 2014 11:27:00 AM JST
window
* Sun 04 May 2014 11:33:06 AM JST
depth
* Sun 04 May 2014 11:33:27 AM JST
border_width
* Sun 04 May 2014 11:34:05 AM JST

* Sun 04 May 2014 11:34:05 AM JST

* Sun 04 May 2014 11:34:05 AM JST
        return 

* Sun 04 May 2014 11:35:43 AM JST
c.get_window(50331701).get_types()
* Sun 04 May 2014 11:36:00 AM JST
geo=c.get_window(50331701).get_types().get_geometry()
* Sun 04 May 2014 11:36:17 AM JST
import xcb2
c=xcb2.connect()
geo=c.get_window(50331701).get_types().get_geometry()

* Sun 04 May 2014 12:50:36 PM JST
WindowGeometry
* Sun 04 May 2014 12:51:00 PM JST
WindowGeometry
* Sun 04 May 2014 12:53:11 PM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 12:54:37 PM JST

* Sun 04 May 2014 12:54:37 PM JST

* Sun 04 May 2014 12:54:37 PM JST
from xcb2.xconnection.window import Window

* Sun 04 May 2014 12:55:00 PM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 12:55:13 PM JST
50331701
* Sun 04 May 2014 12:58:13 PM JST
{name: value,}
* Sun 04 May 2014 12:58:27 PM JST
{name: value,}
* Sun 04 May 2014 12:58:34 PM JST

* Sun 04 May 2014 12:58:34 PM JST

* Sun 04 May 2014 12:58:34 PM JST
            dic = 

* Sun 04 May 2014 12:58:43 PM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 12:58:52 PM JST
geo=c.get_window(50331701)
* Sun 04 May 2014 01:03:46 PM JST
connection
* Sun 04 May 2014 01:06:23 PM JST
73400323
* Sun 04 May 2014 01:06:33 PM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 01:06:40 PM JST
c.get_window(50331701).get_types()
* Sun 04 May 2014 01:06:44 PM JST
50331701
* Sun 04 May 2014 01:08:31 PM JST
c.get_window(50331701).get_types()
* Sun 04 May 2014 01:09:20 PM JST
73400323
* Sun 04 May 2014 01:19:57 PM JST
WrapGetGeometryReply
* Sun 04 May 2014 01:21:03 PM JST
WrapGetGeometryReply
* Sun 04 May 2014 01:23:20 PM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 01:23:28 PM JST
geo=c.get_window(50331701).get_types()
* Sun 04 May 2014 01:24:19 PM JST
self.connection, 
* Sun 04 May 2014 01:24:29 PM JST
geo=c.get_window(50331701).get_types()
* Sun 04 May 2014 01:24:35 PM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 01:24:40 PM JST
geo=c.get_window(50331701)
* Sun 04 May 2014 01:40:32 PM JST

* Sun 04 May 2014 01:40:32 PM JST

* Sun 04 May 2014 01:40:32 PM JST
        # from xcb2.xconnection.window import Window

* Sun 04 May 2014 01:40:32 PM JST
        # from xcb2.xconnection.window import Window

* Sun 04 May 2014 01:40:32 PM JST
        # from xcb2.xconnection.window import Window
        # if self._geo.root:

* Sun 04 May 2014 01:40:32 PM JST
        # from xcb2.xconnection.window import Window
        # if self._geo.root:

* Sun 04 May 2014 01:40:32 PM JST
        # from xcb2.xconnection.window import Window
        # if self._geo.root:
            # return Window(self.connection, self._geo.root).get_types()

* Sun 04 May 2014 01:40:32 PM JST
        # from xcb2.xconnection.window import Window
        # if self._geo.root:
            # return Window(self.connection, self._geo.root).get_types()

* Sun 04 May 2014 01:40:32 PM JST
        # from xcb2.xconnection.window import Window
        # if self._geo.root:
            # return Window(self.connection, self._geo.root).get_types()
        # return self.connection.root

* Sun 04 May 2014 03:54:59 PM JST
GeometryInfo
* Sun 04 May 2014 03:55:52 PM JST
kwargs
* Sun 04 May 2014 03:55:55 PM JST

* Sun 04 May 2014 03:55:55 PM JST

* Sun 04 May 2014 03:55:55 PM JST
        kwargs

* Sun 04 May 2014 03:56:05 PM JST
{self.key: self._data,}
* Sun 04 May 2014 03:56:12 PM JST

* Sun 04 May 2014 03:56:12 PM JST

* Sun 04 May 2014 03:56:12 PM JST
        kwargs = 

* Sun 04 May 2014 03:56:46 PM JST
WindowGeometry(Geometry)
* Sun 04 May 2014 03:56:47 PM JST
WindowGeometry
* Sun 04 May 2014 03:57:04 PM JST
self.connection
* Sun 04 May 2014 03:57:33 PM JST
win
* Sun 04 May 2014 04:03:21 PM JST
http://rgruet.free.fr/PQR26/PQR2.6.html#SpecialMethods
* Sun 04 May 2014 04:10:33 PM JST
raise NotImplementedError()
* Sun 04 May 2014 04:10:59 PM JST
        # TODO: (Atami) [2014/05/04]
        raise NotImplementedError()

* Sun 04 May 2014 04:11:09 PM JST
    def __and__(self, other):
        # TODO: (Atami) [2014/05/04]
        raise NotImplementedError()

* Sun 04 May 2014 04:12:35 PM JST

* Sun 04 May 2014 04:12:41 PM JST
    def __add__(self, other):
        self._data = self._data + other
        self.move()


* Sun 04 May 2014 04:14:28 PM JST
    def __idiv__(self, other):
        self._data /= other
        self.move()


* Sun 04 May 2014 04:15:21 PM JST
    def __mod__(self, other):
        # TODO: (Atami) [2014/05/04]
        raise NotImplementedError()

    def __divmod__(self, other):
        # TODO: (Atami) [2014/05/04]
        raise NotImplementedError()

    def __and__(self, other):
        # TODO: (Atami) [2014/05/04]
        raise NotImplementedError()
        
    def __xor__(self, other):
        # TODO: (Atami) [2014/05/04]
        raise NotImplementedError()
        
    def __or__(self, other):
        # TODO: (Atami) [2014/05/04]
        raise NotImplementedError()
        
    def __lshift__(self, other):
        # TODO: (Atami) [2014/05/04]
        raise NotImplementedError()
        
    def __rshift__(self, other):
        # TODO: (Atami) [2014/05/04]
        raise NotImplementedError()

* Sun 04 May 2014 04:23:59 PM JST
XGeometry
* Sun 04 May 2014 04:24:43 PM JST
    @property
    def x(self, ):
        r"""SUMMARY

        x()

        @Return:
        """
        return self._geo.x

    @property
    def y(self, ):
        r"""SUMMARY

        y()

        @Return:
        """
        return self._geo.y

    @property
    def width(self, ):
        r"""SUMMARY

        width()

        @Return:
        """
        return self._geo.width

    @property
    def height(self, ):
        r"""SUMMARY

        height()

        @Return:
        """
        return self._geo.height


* Sun 04 May 2014 04:25:20 PM JST
return XGeometry(self.connection, self._geo.x, self.window)
* Sun 04 May 2014 04:25:32 PM JST
return XGeometry(self.connection, self._geo.y, self.window)
* Sun 04 May 2014 04:25:36 PM JST
return XGeometry(self.connection, self._geo.y,
* Sun 04 May 2014 04:25:42 PM JST
        return XGeometry(self.connection, self._geo.width, self.window)
* Sun 04 May 2014 04:25:49 PM JST
width
* Sun 04 May 2014 04:25:59 PM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 04:26:07 PM JST
c.get_window(50331701).get_types()
* Sun 04 May 2014 04:28:17 PM JST
reply.dst_y - (2 * int(self.y))
* Sun 04 May 2014 04:28:25 PM JST
posy = 
* Sun 04 May 2014 04:28:42 PM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 04:28:52 PM JST
geo=c.get_window(50331701).get_types()
* Sun 04 May 2014 04:29:03 PM JST
geo
* Sun 04 May 2014 04:29:22 PM JST
win=c.get_window(50331701).get_types().get_geometry()
* Sun 04 May 2014 04:29:25 PM JST
50331701
* Sun 04 May 2014 04:29:26 PM JST
73400323
* Sun 04 May 2014 04:29:30 PM JST
win=c.get_window(73400323).get_types().get_geometry()
* Sun 04 May 2014 04:30:44 PM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 04:30:46 PM JST
win=c.get_window(73400323).get_types().get_geometry()
* Sun 04 May 2014 04:31:44 PM JST
import xcb2
c=xcb2.connect()

* Sun 04 May 2014 04:31:47 PM JST
win=c.get_window(73400323).get_types().get_geometry()
* Sun 04 May 2014 04:33:23 PM JST
GeometryInfo(**{self.key: self._data,})
* Sun 04 May 2014 04:33:55 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types().get_geometry()

* Sun 04 May 2014 04:36:53 PM JST
XGeometry
* Sun 04 May 2014 04:37:20 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types().get_geometry()

* Sun 04 May 2014 04:39:28 PM JST
None
* Sun 04 May 2014 04:39:29 PM JST
is None
* Sun 04 May 2014 04:39:29 PM JST
value is None
* Sun 04 May 2014 04:39:56 PM JST
GeometryAbstract
* Sun 04 May 2014 04:40:35 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types().get_geometry()

* Sun 04 May 2014 04:41:21 PM JST

* Sun 04 May 2014 04:41:21 PM JST

* Sun 04 May 2014 04:41:21 PM JST
        print(self._data)

* Sun 04 May 2014 04:41:25 PM JST

* Sun 04 May 2014 04:41:25 PM JST

* Sun 04 May 2014 04:41:25 PM JST
        print(GeometryInfo(**{self.key: self._data,}).y)

* Sun 04 May 2014 04:42:12 PM JST
result_value
* Sun 04 May 2014 04:42:26 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types().get_geometry()

* Sun 04 May 2014 04:43:46 PM JST
isinstance(value, GeometryAbstract)
* Sun 04 May 2014 04:44:38 PM JST
__nonzero__
* Sun 04 May 2014 04:45:19 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types().get_geometry()

* Sun 04 May 2014 04:47:11 PM JST

* Sun 04 May 2014 04:47:11 PM JST

* Sun 04 May 2014 04:47:11 PM JST
        # return self._geo.y

* Sun 04 May 2014 04:47:17 PM JST
win=c.get_window(73400323).get_types().get_geometry()
* Sun 04 May 2014 04:48:28 PM JST
win=c.get_window(73400323).get_types()
* Sun 04 May 2014 04:49:18 PM JST
get_geometry
* Sun 04 May 2014 04:49:29 PM JST
get_geometry().
* Sun 04 May 2014 04:51:43 PM JST

* Sun 04 May 2014 04:51:43 PM JST

* Sun 04 May 2014 04:51:43 PM JST
        # return self._geo.y

* Sun 04 May 2014 04:51:45 PM JST

* Sun 04 May 2014 04:51:45 PM JST

* Sun 04 May 2014 04:51:45 PM JST
        # return self._geo.width

* Sun 04 May 2014 04:51:47 PM JST

* Sun 04 May 2014 04:51:48 PM JST

* Sun 04 May 2014 04:51:48 PM JST
        # return self._geo.height

* Sun 04 May 2014 04:51:59 PM JST

* Sun 04 May 2014 04:51:59 PM JST

* Sun 04 May 2014 04:52:00 PM JST
        print(result_value)

* Sun 04 May 2014 04:54:02 PM JST
return
* Sun 04 May 2014 04:54:21 PM JST
width
* Sun 04 May 2014 04:54:25 PM JST
height
* Sun 04 May 2014 04:54:28 PM JST
depth
* Sun 04 May 2014 04:54:32 PM JST
border_width
* Sun 04 May 2014 04:54:55 PM JST
.format(self)
* Sun 04 May 2014 04:54:59 PM JST
        
* Sun 04 May 2014 04:55:07 PM JST
(self)
* Sun 04 May 2014 04:56:48 PM JST
win=c.get_window(73400323).get_types().get_geometry()
* Sun 04 May 2014 04:56:50 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types().get_geometry()

* Sun 04 May 2014 04:58:06 PM JST
.get_geometry()
* Sun 04 May 2014 04:58:08 PM JST
win=c.get_window(73400323).get_types()
* Sun 04 May 2014 04:59:13 PM JST
win.width * 2
* Sun 04 May 2014 04:59:24 PM JST
win.height * 2
* Sun 04 May 2014 04:59:50 PM JST
height
* Sun 04 May 2014 05:09:59 PM JST
self.connection.core.ConfigureWindow(window, result_mask, result_value)
* Sun 04 May 2014 05:10:35 PM JST
None
* Sun 04 May 2014 05:10:50 PM JST
result_mask
* Sun 04 May 2014 05:11:40 PM JST
mask = ConfigWindow.X
* Sun 04 May 2014 05:12:08 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types()

* Sun 04 May 2014 05:12:54 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types()

* Sun 04 May 2014 05:14:42 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types()

* Sun 04 May 2014 05:15:17 PM JST
            
* Sun 04 May 2014 05:15:45 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types()

* Sun 04 May 2014 05:17:33 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types()

* Sun 04 May 2014 05:18:00 PM JST
(self._data, )
* Sun 04 May 2014 05:18:12 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types()

* Sun 04 May 2014 05:19:41 PM JST
self
* Sun 04 May 2014 05:20:47 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types()

* Sun 04 May 2014 05:22:10 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types()

* Sun 04 May 2014 05:37:20 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types()

* Sun 04 May 2014 05:40:07 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types()

* Sun 04 May 2014 05:40:53 PM JST

* Sun 04 May 2014 05:40:53 PM JST

* Sun 04 May 2014 05:40:53 PM JST
        import pdb; pdb.set_trace()

* Sun 04 May 2014 05:41:13 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types()

* Sun 04 May 2014 05:43:05 PM JST
self._geo.x,
* Sun 04 May 2014 05:43:09 PM JST
self._geo.x
* Sun 04 May 2014 05:43:40 PM JST
self._geo.y
* Sun 04 May 2014 05:43:50 PM JST
reutrn
* Sun 04 May 2014 05:43:58 PM JST
self._geo.width
* Sun 04 May 2014 05:44:16 PM JST
self._geo.height
* Sun 04 May 2014 05:44:50 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types()

* Sun 04 May 2014 05:47:06 PM JST
int(
* Sun 04 May 2014 05:47:13 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types()

* Sun 04 May 2014 05:47:29 PM JST
flush()
* Sun 04 May 2014 06:17:44 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types()

* Sun 04 May 2014 06:24:32 PM JST
y=weather.y
* Sun 04 May 2014 06:24:54 PM JST
y=
* Sun 04 May 2014 06:32:34 PM JST
            
* Sun 04 May 2014 06:32:41 PM JST
            
* Sun 04 May 2014 06:36:10 PM JST
    LOG.info('After weather mapping')
    _wait_close_moon()

* Sun 04 May 2014 06:36:44 PM JST

* Sun 04 May 2014 06:36:44 PM JST

* Sun 04 May 2014 06:36:44 PM JST
    LOG.info('After weather mapping')

* Sun 04 May 2014 06:38:39 PM JST

* Sun 04 May 2014 06:38:39 PM JST

* Sun 04 May 2014 06:38:39 PM JST
            print(weather.y)

* Sun 04 May 2014 06:43:26 PM JST

* Sun 04 May 2014 06:43:26 PM JST

* Sun 04 May 2014 06:43:27 PM JST
        # self.move = Move(self)

* Sun 04 May 2014 06:43:30 PM JST

* Sun 04 May 2014 06:43:30 PM JST

* Sun 04 May 2014 06:43:30 PM JST
# from xcb2.xconnection.move import Move

* Sun 04 May 2014 06:46:20 PM JST

* Sun 04 May 2014 06:46:20 PM JST

* Sun 04 May 2014 06:46:20 PM JST
        self.focus = Focus(self)

* Sun 04 May 2014 06:46:24 PM JST

* Sun 04 May 2014 06:46:24 PM JST

* Sun 04 May 2014 06:46:24 PM JST
from xcb2.xconnection.focus import Focus

* Sun 04 May 2014 06:48:04 PM JST
import xcb2
c=xcb2.connect()
win=c.get_window(73400323).get_types()

* Sun 04 May 2014 10:05:46 PM JST
self.maplist.get_matches(window)
* Sun 04 May 2014 10:08:16 PM JST

* Sun 04 May 2014 10:08:16 PM JST

* Sun 04 May 2014 10:08:16 PM JST
        print(self.maplist.get_matches(window))

* Sun 04 May 2014 10:18:08 PM JST
DISPATCHER
* Sun 04 May 2014 10:24:46 PM JST

* Sun 04 May 2014 10:24:46 PM JST

* Sun 04 May 2014 10:24:46 PM JST
        print('DEBUG-1-setattribute.py')

* Sun 04 May 2014 10:24:49 PM JST

* Sun 04 May 2014 10:24:49 PM JST

* Sun 04 May 2014 10:24:49 PM JST
        print('DEBUG-2-setattribute.py')

* Sun 04 May 2014 10:27:35 PM JST
return 
* Sun 04 May 2014 10:27:39 PM JST
self.window.query_tree()
* Sun 04 May 2014 10:29:12 PM JST

* Sun 04 May 2014 10:29:12 PM JST

* Sun 04 May 2014 10:29:12 PM JST
print(DISPATCHER.mapnotify)

* Sun 04 May 2014 10:29:14 PM JST

* Sun 04 May 2014 10:29:14 PM JST

* Sun 04 May 2014 10:29:14 PM JST
print(DISPATCHER.mapnotify)

* Sun 04 May 2014 10:56:33 PM JST

* Sun 04 May 2014 10:56:33 PM JST

* Sun 04 May 2014 10:56:33 PM JST
        # if not hasattr(self.connection, 'atom'):

* Sun 04 May 2014 10:56:33 PM JST
        # if not hasattr(self.connection, 'atom'):

* Sun 04 May 2014 10:56:33 PM JST
        # if not hasattr(self.connection, 'atom'):
        #     self.connection.atom = AtomIdentifier(self.connection)

* Sun 04 May 2014 10:57:16 PM JST

* Sun 04 May 2014 10:57:16 PM JST

* Sun 04 May 2014 10:57:16 PM JST
from xcb2.xproto.define import EventMask

* Mon 05 May 2014 06:32:33 AM JST
delete, 
* Mon 05 May 2014 06:32:38 AM JST
0, 
* Mon 05 May 2014 06:32:40 AM JST
offset=0, 
* Mon 05 May 2014 06:32:40 AM JST
                                 offset=0, 
* Mon 05 May 2014 06:49:46 AM JST
    def GetProperty(self, delete, window, property_, offset=0, length=10):
        r"""SUMMARY

        GetProperty()

        @Return:
        """
        prop = self.atomidentify(property_)
        cls = AtomReplyTypes.get_types(str(prop))
        reply = self.core.GetProperty(delete, window, prop,
                                      self.atomidentify(cls.name),
                                      offset, length).reply()
        return cls(self.connection, reply, window, prop)

    def GetPropertyUnchecked(self, delete, window, property_,
                             offset=0, length=10):
        r"""SUMMARY

        GetPropertyUnchecked()

        @Return:
        """
        prop = self.atomidentify(property_)
        cls = AtomReplyTypes.get_types(str(prop))
        reply = self.core.GetPropertyUnchecked(delete, window, prop,
                                               self.atomidentify(cls.name),
                                               offset, length).reply()
        return cls(self.connection, reply, window, prop)

    def GetFullProperty(self, window, property_, length=10):
        r"""SUMMARY

        GetProperty()

        @Return:
        """
        return (self.GetProperty(False, window, property_, 0, length)
                .get_full_value())

    def GetFullPropertyUnchecked(self, window, property_, length=10):
        r"""SUMMARY

        GetProperty()

        @Return:
        """
        return (self.GetPropertyUnchecked(False, window, property_, 0, length)
                .get_full_value())


* Mon 05 May 2014 06:50:06 AM JST
Window
* Mon 05 May 2014 06:50:52 AM JST
    def getWM_NAME(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        getWM_NAME(window, delete=False)
        """
        return self.getfullproperty(window, 'WM_NAME')

    def getWM_LOCALE_NAME(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        getWM_LOCALE_NAME(window, delete=False)
        """
        return self.getfullproperty(window, 'WM_LOCALE_NAME')

    def getWM_ICON_NAME(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        getWM_ICON_NAME(window, delete=False)
        """
        return self.getfullproperty(window, 'WM_ICON_NAME')

    def getWM_CLASS(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        GetWM_CLASS(window, delete=False)

        'xfdesktop\x00Xfdesktop\x00' => ['xfdesktop', 'Xfdesktop']
        """
        wmclass = self.getfullproperty(window, 'WM_CLASS')
        try: # 'xfdesktop\x00Xfdesktop\x00' => ['xfdesktop', 'Xfdesktop']
            return WMCLASS(*wmclass.split('\0')[:2])
        except TypeError as err:
            LOG.warning('Catched Error but skip: {}'.format(err))
            return WMCLASS()

    def getWM_TRANSIENT_FOR(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        getWM_TRANSIENT_FOR(window, delete=False)
        """
        return self.getfullproperty(window, 'WM_TRANSIENT_FOR')

    def getWM_PROTOCOLS(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        getWM_PROTOCOLS(window, delete=False)
        """
        return self.getfullproperty(window, 'WM_PROTOCOLS')

    def getWM_COLORMAP_WINDOWS(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        getWM_COLORMAP_WINDOWS(window, delete=False)
        """
        return self.getfullproperty(window, 'WM_COLORMAP_WINDOWS')

    def getWM_CLIENT_MACHINE(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        getWM_CLIENT_MACHINE(window, delete=False)
        """
        return self.getfullproperty(window, 'WM_CLIENT_MACHINE')

    def getWM_STATE(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        getWM_STATE(window, delete=False)
        """
        return self.getfullproperty(window, 'WM_STATE')

    def get_WIN_WORKSPACE(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_WIN_WORKSPACE(window, delete=False)
        """
        return self.getfullproperty(window, '_WIN_WORKSPACE')

    def get_WIN_STATE(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_WIN_STATE(window, delete=False)
        """
        return self.getfullproperty(window, '_WIN_STATE')

    def get_NET_SUPPORTED(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_SUPPORTED(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_SUPPORTED')

    def get_NET_CLIENT_LIST(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_CLIENT_LIST(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_CLIENT_LIST')

    def get_NET_CLIENT_LIST_STACKING(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_CLIENT_LIST_STACKING(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_CLIENT_LIST_STACKING')

    def get_NET_NUMBER_OF_DESKTOPS(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_NUMBER_OF_DESKTOPS(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_NUMBER_OF_DESKTOPS')

    def get_NET_DESKTOP_GEOMETRY(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_DESKTOP_GEOMETRY(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_DESKTOP_GEOMETRY')

    def get_NET_DESKTOP_VIEWPORT(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_DESKTOP_VIEWPORT(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_DESKTOP_VIEWPORT')

    def get_NET_CURRENT_DESKTOP(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_CURRENT_DESKTOP(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_CURRENT_DESKTOP')

    def get_NET_DESKTOP_NAMES(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_DESKTOP_NAMES(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_DESKTOP_NAMES')

    def get_NET_ACTIVE_WINDOW(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_ACTIVE_WINDOW(window, delete=False)
        """
        return get_first_index(
            self.getfullproperty(window, '_NET_ACTIVE_WINDOW'))

    def get_NET_WORKAREA(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_WORKAREA(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_WORKAREA')

    def get_NET_SUPPORTING_WM_CHECK(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_SUPPORTING_WM_CHECK(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_SUPPORTING_WM_CHECK')

    def get_NET_VIRTUAL_ROOTS(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_VIRTUAL_ROOTS(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_VIRTUAL_ROOTS')

    def get_NET_DESKTOP_LAYOUT(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_DESKTOP_LAYOUT(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_DESKTOP_LAYOUT')

    def get_NET_SHOWING_DESKTOP(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_SHOWING_DESKTOP(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_SHOWING_DESKTOP')

    def get_NET_CLOSE_WINDOW(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_CLOSE_WINDOW(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_CLOSE_WINDOW')

    def get_NET_MOVERESIZE_WINDOW(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_MOVERESIZE_WINDOW(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_MOVERESIZE_WINDOW')

    def get_NET_WM_MORERESIZE(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_WM_MORERESIZE(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_WM_MORERESIZE')

    def get_NET_RESTACK_WINDOW(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_RESTACK_WINDOW(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_RESTACK_WINDOW')

    def get_NET_REQUEST_FRAME_EXTENTS(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_REQUEST_FRAME_EXTENTS(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_REQUEST_FRAME_EXTENTS')

    def get_NET_WM_NAME(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_WM_NAME(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_WM_NAME')

    def get_NET_WM_VISIBLE_NAME(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_WM_VISIBLE_NAME(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_WM_VISIBLE_NAME')

    def get_NET_WM_ICON_NAME(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_WM_ICON_NAME(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_WM_ICON_NAME')

    def get_NET_WM_VISIBLE_ICON_NAME(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_WM_VISIBLE_ICON_NAME(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_WM_VISIBLE_ICON_NAME')

    def get_NET_WM_DESKTOP(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_WM_DESKTOP(window, delete=False)
        """
        return self.getfullproperty(window, '_NET_WM_DESKTOP')

    def get_NET_WM_WINDOW_TYPE(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_WM_WINDOW_TYPE(window, delete=False)
        """
        try:
            return get_first_index(self.getfullproperty(
                window, '_NET_WM_WINDOW_TYPE'))
        except xproto.BadWindow as err:
            # TODO: (Atami) [2014/03/27]
            LOG.warning('Warning: {}{}'.format(window, err))
            return None

    def get_NET_WM_STATE(self, window):
        r"""SUMMARY

        @Arguments:
        - `window`:

        @Return:

        get_NET_WM_STATE(window, delete=False)
        """
        states = self.getfullproperty(window, '_NET_WM_STATE')
        return [self.connection.atom(x) for x in states]

    def get_NET_WM_ALLOWED_ACTIONS(self, window):
        r"""SUMMARY

        get_NET_WM_ALLOWED_ACTIONS(window, delete=False)

        @Arguments:

        @Return:
        """
        return self.getfullproperty(window, '_NET_WM_ALLOWED_ACTIONS')

    def get_NET_WM_STRUT(self, window):
        r"""SUMMARY

        get_NET_WM_STRUT(window, delete=False)

        @Arguments:

        @Return:
        """
        return self.getfullproperty(window, '_NET_WM_STRUT')

    def get_NET_WM_STRUT_PARTIAL(self, window):
        r"""SUMMARY

        get_NET_WM_STRUT_PARTIAL(window, delete=False)

        @Arguments:

        @Return:
        """
        return self.getfullproperty(window, '_NET_WM_STRUT_PARTIAL')

    def get_NET_WM_ICON_GEOMETRY(self, window):
        r"""SUMMARY

        get_NET_WM_ICON_GEOMETRY(window, delete=False)

        @Arguments:

        @Return:
        """
        return self.getfullproperty(window, '_NET_WM_ICON_GEOMETRY')

    def get_NET_WM_ICON(self, window):
        r"""SUMMARY

        get_NET_WM_ICON(window, delete=False)

        @Arguments:

        @Return:
        """
        return self.getfullproperty(window, '_NET_WM_ICON')

    def get_NET_WM_PID(self, window):
        r"""SUMMARY

        get_NET_WM_PID(window, delete=False)

        @Arguments:

        @Return:
        """
        return get_first_index(self.getfullproperty(window, '_NET_WM_PID'))

    def get_NET_WM_HANDLED_ICONS(self, window):
        r"""SUMMARY

        get_NET_WM_HANDLED_ICONS(window, delete=False)

        @Arguments:

        @Return:
        """
        return self.getfullproperty(window, '_NET_WM_HANDLED_ICONS')

    def get_NET_WM_USER_TIME(self, window):
        r"""SUMMARY

        get_NET_WM_USER_TIME(window, delete=False)

        @Arguments:

        @Return:
        """
        result = self.getfullproperty(window, '_NET_WM_USER_TIME')
        return get_first_index(result)

    def get_NET_WM_USER_TIME_WINDOW(self, window):
        r"""SUMMARY

        get_NET_WM_USER_TIME_WINDOW(window)

        @Arguments:

        @Return:
        """
        return self.getfullproperty(window, '_NET_WM_USER_TIME_WINDOW')

    def get_NET_FRAME_EXTENTS(self, window):
        r"""SUMMARY

        get_NET_FRAME_EXTENTS(window)

        @Arguments:

        @Return:
        """
        return self.getfullproperty(window, '_NET_FRAME_EXTENTS')

    def get_OB_APP_TYPE(self, window):
        r"""SUMMARY

        get_OB_APP_TYPE(window)

        @Arguments:

        @Return:
        """
        return self.getfullproperty(window, '_OB_APP_TYPE')

* Mon 05 May 2014 06:51:02 AM JST
GetFullProperty
* Mon 05 May 2014 06:51:31 AM JST
from t1.listutil import get_first_index
* Mon 05 May 2014 06:51:51 AM JST
gfi
* Mon 05 May 2014 06:52:11 AM JST
from xcb2.logger import LOG
* Mon 05 May 2014 06:52:37 AM JST
class WMCLASS(object):
    r"""SUMMARY
    """
    atomname = 'WM_CLASS'

    __slots__ = ('res_name', 'res_class')

    def __init__(self, res_name=None, res_class=None):
        r"""

        @Arguments:
        - `res_name`:
        - `res_class`:
        """
        self.res_name = res_name or ''
        self.res_class = res_class or ''

    def __contains__(self, other):
        return other in (self.res_name, self.res_class)

    def __iter__(self, ):
        return iter((self.res_name, self.res_class))

    def __repr__(self, ):
        fmt = ('{0.__class__.__name__}'
               '(res_name="{0.res_name}", res_class="{0.res_class}")').format
        return (fmt(self))



* Mon 05 May 2014 06:53:46 AM JST
self.GetFullProperty(window, '_NET_WM_USER_TIME')
* Mon 05 May 2014 06:53:50 AM JST

* Mon 05 May 2014 06:53:50 AM JST

* Mon 05 May 2014 06:53:50 AM JST
        result = 

* Mon 05 May 2014 08:56:51 AM JST

* Mon 05 May 2014 08:56:51 AM JST

* Mon 05 May 2014 08:56:51 AM JST
        return True

* Mon 05 May 2014 09:02:24 AM JST
from xcb2.xconnection.abstract import ConnectionAbstract
* Mon 05 May 2014 09:06:23 AM JST
delete, window, property_, offset=0, length=10
* Mon 05 May 2014 09:07:49 AM JST
from xcb2.xconnection.wrapcore.atom import AtomIdentifier
* Mon 05 May 2014 09:08:14 AM JST
from xcb2.xconnection.wrapcore.atomtype import AtomReplyTypes
* Mon 05 May 2014 09:09:00 AM JST
self.
* Mon 05 May 2014 09:09:26 AM JST
AtomIdentifier(self.connection)
* Mon 05 May 2014 09:09:41 AM JST
prop = self.atomidentify(property_)
* Mon 05 May 2014 09:09:50 AM JST
atomidentify
* Mon 05 May 2014 09:09:55 AM JST
cls = AtomReplyTypes.get_types(str(prop))
* Mon 05 May 2014 09:10:32 AM JST
    
* Mon 05 May 2014 09:10:47 AM JST
return 
* Mon 05 May 2014 09:10:55 AM JST
return cls(self.connection, reply, window, prop)
* Mon 05 May 2014 09:12:18 AM JST
    def _getproperty(self, delete, window, property_, offset=0, length=10):
        r"""SUMMARY

        _getproperty()

        @Return:
        """
        prop = self.getatom(property_)
        cls = AtomReplyTypes.get_types(str(prop))
        reply = self.connection.core.GetProperty(delete, window, prop,
                                                 self.getatom(cls.name),
                                                 offset, length).reply()
        return cls(self.connection, reply, window, prop)

    def __call__(self, delete, window, property_, offset=0, length=10):
        r"""SUMMARY

        __call__(delete, window, property_, offset=0, length=10)

        @Arguments:
        - `delete`:
        - `window`:
        - `property_`:
        - `offset`:
        - `length`:

        @Return:
        """
        return self._getproperty(delete, window, property_, offset, length)

* Mon 05 May 2014 09:15:41 AM JST
self.getatom()
* Mon 05 May 2014 09:15:50 AM JST
'WM_NAME'
* Mon 05 May 2014 09:28:41 AM JST
get
* Mon 05 May 2014 09:29:41 AM JST
        if self.atomname is None:
            # TODO: (Atami) [2014/05/05]
            raise StandardError('imprement error')

* Mon 05 May 2014 09:30:38 AM JST
window, delete=False, offset=0, length=10
* Mon 05 May 2014 09:30:57 AM JST

* Mon 05 May 2014 09:30:57 AM JST

* Mon 05 May 2014 09:30:57 AM JST
        # TODO: (Atami) [2014/05/05]

* Mon 05 May 2014 09:31:13 AM JST
@abstractmethod
* Mon 05 May 2014 10:09:56 AM JST
'WM_NAME'
* Mon 05 May 2014 10:10:57 AM JST
window
* Mon 05 May 2014 10:12:08 AM JST
class GetWM_NAME(PropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_NAME'

    def __call__(self, window, delete=False, offset=0, length=10):
        r"""SUMMARY
        
        __call__(window, delete=False, offset=0, length=10)
        
        @Arguments:
        - `window`:
        - `delete`:
        - `offset`:
        - `length`:
        
        @Return:
        """
        return self._getproperty(delete, window, self.atom, offset, length)



* Mon 05 May 2014 10:12:45 AM JST
WM_LOCALE_NAME
* Mon 05 May 2014 10:13:15 AM JST
WM_ICON_NAME
* Mon 05 May 2014 10:13:29 AM JST
WM_CLASS
* Mon 05 May 2014 10:15:54 AM JST
    def __call__(self, window, delete=False, offset=0, length=10):
        r"""SUMMARY
        
        __call__(window, delete=False, offset=0, length=10)
        
        @Arguments:
        - `window`:
        - `delete`:
        - `offset`:
        - `length`:
        
        @Return:
        """
        return self._getproperty(delete, window, self.atom, offset, length)



* Mon 05 May 2014 10:16:01 AM JST

* Mon 05 May 2014 10:16:01 AM JST

* Mon 05 May 2014 10:16:01 AM JST
    @abstractmethod

* Mon 05 May 2014 10:16:03 AM JST

* Mon 05 May 2014 10:16:03 AM JST

* Mon 05 May 2014 10:16:03 AM JST
    __metaclass__ = ABCMeta

* Mon 05 May 2014 10:17:44 AM JST
WM_TRANSIENT_FOR
* Mon 05 May 2014 10:17:48 AM JST
class GetWM_CLASS(PropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_CLASS'



* Mon 05 May 2014 10:19:04 AM JST
WM_TRANSIENT_FOR
* Mon 05 May 2014 10:19:11 AM JST
WM_PROTOCOLS
* Mon 05 May 2014 10:19:18 AM JST
WM_COLORMAP_WINDOWS
* Mon 05 May 2014 10:19:26 AM JST
WM_CLIENT_MACHINE
* Mon 05 May 2014 10:19:30 AM JST
WM_STATE
* Mon 05 May 2014 10:19:37 AM JST
_WIN_WORKSPACE
* Mon 05 May 2014 10:19:43 AM JST
_WIN_STATE
* Mon 05 May 2014 10:19:48 AM JST
_NET_SUPPORTED
* Mon 05 May 2014 10:19:54 AM JST
_NET_CLIENT_LIST
* Mon 05 May 2014 10:19:59 AM JST
_NET_CLIENT_LIST_STACKING
* Mon 05 May 2014 10:20:04 AM JST
_NET_NUMBER_OF_DESKTOPS
* Mon 05 May 2014 10:20:11 AM JST
_NET_DESKTOP_GEOMETRY
* Mon 05 May 2014 10:20:15 AM JST
_NET_DESKTOP_VIEWPORT
* Mon 05 May 2014 10:20:20 AM JST
_NET_CURRENT_DESKTOP
* Mon 05 May 2014 10:20:26 AM JST
_NET_DESKTOP_NAMES
* Mon 05 May 2014 10:20:33 AM JST
_NET_ACTIVE_WINDOW
* Mon 05 May 2014 10:20:39 AM JST
_NET_WORKAREA
* Mon 05 May 2014 10:20:47 AM JST
_NET_SUPPORTING_WM_CHECK
* Mon 05 May 2014 10:20:52 AM JST
_NET_VIRTUAL_ROOTS
* Mon 05 May 2014 10:21:17 AM JST
WM_COLORMAP_WINDOWS
* Mon 05 May 2014 10:22:34 AM JST
_NET_DESKTOP_LAYOUT
* Mon 05 May 2014 10:22:41 AM JST
_NET_SHOWING_DESKTOP
* Mon 05 May 2014 10:22:47 AM JST
_NET_CLOSE_WINDOW
* Mon 05 May 2014 10:22:53 AM JST
_NET_MOVERESIZE_WINDOW
* Mon 05 May 2014 10:23:01 AM JST
_NET_WM_MORERESIZE
* Mon 05 May 2014 10:23:06 AM JST
_NET_RESTACK_WINDOW
* Mon 05 May 2014 10:23:12 AM JST
_NET_REQUEST_FRAME_EXTENTS
* Mon 05 May 2014 10:23:20 AM JST
_NET_WM_NAME
* Mon 05 May 2014 10:23:25 AM JST
_NET_WM_VISIBLE_NAME
* Mon 05 May 2014 10:23:32 AM JST
_NET_WM_ICON_NAME
* Mon 05 May 2014 10:23:38 AM JST
_NET_WM_VISIBLE_ICON_NAME
* Mon 05 May 2014 10:23:45 AM JST
_NET_WM_DESKTOP
* Mon 05 May 2014 10:23:51 AM JST
_NET_WM_WINDOW_TYPE
* Mon 05 May 2014 10:23:58 AM JST
_NET_WM_STATE
* Mon 05 May 2014 10:24:05 AM JST
_NET_WM_ALLOWED_ACTIONS
* Mon 05 May 2014 10:24:11 AM JST
_NET_WM_STRUT
* Mon 05 May 2014 10:24:18 AM JST
_NET_WM_STRUT_PARTIAL
* Mon 05 May 2014 10:24:23 AM JST
_NET_WM_ICON_GEOMETRY
* Mon 05 May 2014 10:24:28 AM JST
_NET_WM_ICON
* Mon 05 May 2014 10:24:34 AM JST
_NET_WM_PID
* Mon 05 May 2014 10:24:40 AM JST
_NET_WM_HANDLED_ICONS
* Mon 05 May 2014 10:24:46 AM JST
_NET_WM_USER_TIME
* Mon 05 May 2014 10:24:52 AM JST
_NET_WM_USER_TIME_WINDOW
* Mon 05 May 2014 10:24:57 AM JST
_NET_FRAME_EXTENTS
* Mon 05 May 2014 10:25:02 AM JST
_OB_APP_TYPE
* Mon 05 May 2014 10:43:35 AM JST
GetWM_NAME
* Mon 05 May 2014 10:44:05 AM JST
GetWM_LOCALE_NAME
* Mon 05 May 2014 10:44:10 AM JST
Get
* Mon 05 May 2014 10:44:16 AM JST
GetWM_LOCALE_NAME
* Mon 05 May 2014 10:45:07 AM JST
self.getWM_LOCALE_NAME = GetWM_LOCALE_NAME(self)
* Mon 05 May 2014 10:45:10 AM JST
GetWM_LOCALE_NAME
* Mon 05 May 2014 10:45:13 AM JST
getWM_LOCALE_NAME
* Mon 05 May 2014 10:45:20 AM JST
GetWM_ICON_NAME
* Mon 05 May 2014 10:45:28 AM JST
GetWM_CLASS
* Mon 05 May 2014 10:45:32 AM JST
GetWM_TRANSIENT_FOR
* Mon 05 May 2014 10:45:37 AM JST
GetWM_PROTOCOLS
* Mon 05 May 2014 10:45:43 AM JST
GetWM_COLORMAP_WINDOWS
* Mon 05 May 2014 10:45:47 AM JST
GetWM_CLIENT_MACHINE
* Mon 05 May 2014 10:45:54 AM JST
GetWM_STATE
* Mon 05 May 2014 10:46:05 AM JST
Get_WIN_WORKSPACE
* Mon 05 May 2014 10:46:10 AM JST
Get_WIN_STATE
* Mon 05 May 2014 10:46:16 AM JST
Get_NET_SUPPORTED
* Mon 05 May 2014 10:46:22 AM JST
Get_NET_CLIENT_LIST
* Mon 05 May 2014 10:46:27 AM JST
Get_NET_CLIENT_LIST_STACKING
* Mon 05 May 2014 10:46:32 AM JST
Get_NET_NUMBER_OF_DESKTOPS
* Mon 05 May 2014 10:46:37 AM JST
Get_NET_DESKTOP_GEOMETRY
* Mon 05 May 2014 10:46:45 AM JST
Get_NET_DESKTOP_VIEWPORT
* Mon 05 May 2014 10:46:50 AM JST
Get_NET_CURRENT_DESKTOP
* Mon 05 May 2014 10:46:57 AM JST
Get_NET_DESKTOP_NAMES
* Mon 05 May 2014 10:47:02 AM JST
Get_NET_ACTIVE_WINDOW
* Mon 05 May 2014 10:47:08 AM JST
Get_NET_WORKAREA
* Mon 05 May 2014 10:47:13 AM JST
Get_NET_SUPPORTING_WM_CHECK
* Mon 05 May 2014 10:47:21 AM JST
Get_NET_VIRTUAL_ROOTS
* Mon 05 May 2014 10:47:25 AM JST
Get_NET_DESKTOP_LAYOUT
* Mon 05 May 2014 10:47:31 AM JST
Get_NET_SHOWING_DESKTOP
* Mon 05 May 2014 10:47:36 AM JST
Get_NET_CLOSE_WINDOW
* Mon 05 May 2014 10:47:41 AM JST
Get_NET_MOVERESIZE_WINDOW
* Mon 05 May 2014 10:47:46 AM JST
Get_NET_WM_MORERESIZE
* Mon 05 May 2014 10:47:50 AM JST
Get_NET_RESTACK_WINDOW
* Mon 05 May 2014 10:47:56 AM JST
Get_NET_REQUEST_FRAME_EXTENTS
* Mon 05 May 2014 10:48:01 AM JST
Get_NET_WM_NAME
* Mon 05 May 2014 10:48:06 AM JST
Get_NET_WM_VISIBLE_NAME
* Mon 05 May 2014 10:48:10 AM JST
Get_NET_WM_ICON_NAME
* Mon 05 May 2014 10:48:15 AM JST
Get_NET_WM_VISIBLE_ICON_NAME
* Mon 05 May 2014 10:48:19 AM JST
Get_NET_WM_DESKTOP
* Mon 05 May 2014 10:48:24 AM JST
Get_NET_WM_WINDOW_TYPE
* Mon 05 May 2014 10:48:30 AM JST
Get_NET_WM_ALLOWED_ACTIONS
* Mon 05 May 2014 10:48:35 AM JST
Get_NET_WM_STRUT
* Mon 05 May 2014 10:48:47 AM JST
Get_NET_WM_STRUT_PARTIAL
* Mon 05 May 2014 10:48:52 AM JST
Get_NET_WM_ICON_GEOMETRY
* Mon 05 May 2014 10:48:56 AM JST
Get_NET_WM_ICON
* Mon 05 May 2014 10:49:01 AM JST
Get_NET_WM_PID
* Mon 05 May 2014 10:49:09 AM JST
Get_NET_WM_HANDLED_ICONS
* Mon 05 May 2014 10:49:17 AM JST
Get_NET_WM_USER_TIME
* Mon 05 May 2014 10:49:23 AM JST
Get_NET_WM_USER_TIME_WINDOW
* Mon 05 May 2014 10:49:29 AM JST
Get_NET_FRAME_EXTENTS
* Mon 05 May 2014 10:49:35 AM JST
Get_OB_APP_TYPE
* Mon 05 May 2014 11:05:58 AM JST
48234500
* Mon 05 May 2014 11:07:53 AM JST
getargspec(
* Mon 05 May 2014 11:13:37 AM JST
from xcb2.xconnection.wrapcore.atomtype import AtomReplyTypes
* Mon 05 May 2014 11:13:43 AM JST
AtomReplyTypes
* Mon 05 May 2014 11:16:02 AM JST
            
* Mon 05 May 2014 11:16:03 AM JST
                                 
* Mon 05 May 2014 11:16:13 AM JST
.reply()
* Mon 05 May 2014 11:16:17 AM JST
reply
* Mon 05 May 2014 11:16:25 AM JST
prop.types
* Mon 05 May 2014 11:16:44 AM JST

* Mon 05 May 2014 11:16:44 AM JST

* Mon 05 May 2014 11:16:44 AM JST
        cls = prop.types

* Mon 05 May 2014 11:17:41 AM JST
prop
* Mon 05 May 2014 11:17:42 AM JST
window, prop
* Mon 05 May 2014 11:18:14 AM JST
reply
* Mon 05 May 2014 11:18:27 AM JST
WrapGetPropertyCookie
* Mon 05 May 2014 11:18:43 AM JST
            
* Mon 05 May 2014 11:20:45 AM JST
        prop = self.getatom(property_)
        cookie = self.connection.core.GetPropertyUnchecked(
            delete, window, prop, self.getatom(prop.types.name), offset, length)
        cookie.window, cookie.property = window, prop
        return WrapGetPropertyCookie(self.connection, cookie)

* Mon 05 May 2014 11:21:05 AM JST
GetProperty
* Mon 05 May 2014 11:24:10 AM JST
cookie
* Mon 05 May 2014 11:24:12 AM JST
cookie
* Mon 05 May 2014 11:33:20 AM JST
        reply.window, reply.property = window, prop
        return cls(self.connection, reply)

* Mon 05 May 2014 11:33:24 AM JST

* Mon 05 May 2014 11:33:24 AM JST

* Mon 05 May 2014 11:33:24 AM JST
        return cls(self.connection, reply, window, prop)

* Mon 05 May 2014 11:34:41 AM JST
= self._cookie.window
* Mon 05 May 2014 11:36:29 AM JST
GetProperty
* Mon 05 May 2014 11:37:29 AM JST
GetPropertyUnchecked
* Mon 05 May 2014 11:39:17 AM JST
        
* Mon 05 May 2014 11:40:12 AM JST
TesGetProperty
* Mon 05 May 2014 11:40:42 AM JST
58720312
* Mon 05 May 2014 11:45:38 AM JST
coo=
* Mon 05 May 2014 11:45:39 AM JST
coo=
* Mon 05 May 2014 11:46:20 AM JST
58720312
* Mon 05 May 2014 11:48:01 AM JST
class WrapCore(ConnectionAbstract):
    r"""SUMMARY
    """

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)
        self.atomidentify = AtomIdentifier(self.connection)
        self.SendEvent = SendEvent(self.connection)
        self.TesGetProperty = GetProperty(self.connection)
        self.TesGetPropertyUnchecked = GetPropertyUnchecked(self.connection)


* Mon 05 May 2014 11:48:13 AM JST
Tes
* Mon 05 May 2014 11:48:15 AM JST
Tes
* Mon 05 May 2014 12:03:58 PM JST
class WrapGetPropertyCookie(object):
    r"""SUMMARY
    """

    def __init__(self, connection, cookie):
        r"""

        @Arguments:
        - `connection`:
        - `cookie`:
        - `window`:
        - `prop`:
        """
        self._connection = connection
        self._cookie = cookie

    def check(self, ):
        r"""SUMMARY

        check()

        @Return:
        """
        return self._cookie.check()

    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:
        """
        reply = self._cookie.reply()
        reply.window = self._cookie.window
        reply.property = self._cookie.property
        return self._cookie.property.types(self._connection, reply)



* Mon 05 May 2014 12:12:33 PM JST
keystring
* Mon 05 May 2014 12:14:18 PM JST
hankaku
* Mon 05 May 2014 12:15:56 PM JST
+{Zenkaku_Hankaku}
* Mon 05 May 2014 12:16:01 PM JST
.sendkeys(window=kwargs[EventDispatcher.event].event)
* Mon 05 May 2014 12:19:01 PM JST

* Mon 05 May 2014 12:19:01 PM JST

* Mon 05 May 2014 12:19:01 PM JST
    print('DEBUG-2-handler5.py')

* Mon 05 May 2014 12:20:01 PM JST

* Mon 05 May 2014 12:20:01 PM JST

* Mon 05 May 2014 12:20:01 PM JST
    print('DEBUG-2-handler5.py')

* Mon 05 May 2014 01:17:51 PM JST

* Mon 05 May 2014 01:17:51 PM JST

* Mon 05 May 2014 01:17:51 PM JST
from xcb2.xconnection.wrapcore.atomtype import AtomReplyTypes

* Mon 05 May 2014 01:36:08 PM JST
rena
* Mon 05 May 2014 01:36:08 PM JST
rope-rena
* Mon 05 May 2014 01:39:19 PM JST
self._sendevent
* Mon 05 May 2014 01:39:29 PM JST
propagate, destination, event_mask, event
* Mon 05 May 2014 02:04:08 PM JST
class SendEventAbstract2(object):
    r"""SUMMARY
    """

    def __init__(self, sendevent):
        r"""

        @Arguments:
        - `sendevent`:
        """
        self._sendevent = sendevent

    def __call__(self, propagate, destination, event_mask, event):
        r"""SUMMARY
        
        __call__(propagate, destination, event_mask, event)
        
        @Arguments:
        - `propagate`:
        - `destination`:
        - `event_mask`:
        - `event`:
        
        @Return:
        """
        return self._sendevent(propagate, destination, event_mask, event)


* Mon 05 May 2014 02:21:35 PM JST
from xcb2.xconnection.abstract import ConnectionAbstract
* Mon 05 May 2014 02:21:42 PM JST
from struct import pack as _pack
from cStringIO import StringIO as _StringIO

* Mon 05 May 2014 02:21:55 PM JST
ConnectionAbstract
* Mon 05 May 2014 02:22:12 PM JST

* Mon 05 May 2014 02:22:12 PM JST

* Mon 05 May 2014 02:22:12 PM JST
        self._connection = connection

* Mon 05 May 2014 02:24:34 PM JST
class EventCode(_IntEnum):
    r"""SUMMARY
    """
    KeyPress         = 2
    KeyRelease       = 3
    ButtonPress      = 4
    ButtonRelease    = 5
    MotionNotify     = 6
    EnterNotify      = 7
    LeaveNotify      = 8
    FocusIn          = 9
    FocusOut         = 10
    KeymapNotify     = 11
    Expose           = 12
    GraphicsExposure = 13
    NoExposure       = 14
    VisibilityNotify = 15
    CreateNotify     = 16
    DestroyNotify    = 17
    UnmapNotify      = 18
    MapNotify        = 19
    MapRequest       = 20
    ReparentNotify   = 21
    ConfigureNotify  = 22
    ConfigureRequest = 23
    GravityNotify    = 24
    ResizeRequest    = 25
    CirculateNotify  = 26
    CirculateRequest = 27
    PropertyNotify   = 28
    SelectionClear   = 29
    SelectionRequest = 30
    SelectionNotify  = 31
    ColormapNotify   = 32
    ClientMessage    = 33
    MappingNotify    = 34



* Mon 05 May 2014 02:24:42 PM JST
from enum import IntEnum as _IntEnum
* Mon 05 May 2014 02:25:32 PM JST
buf.write(str(buffer(_array('b', data))))
* Mon 05 May 2014 02:25:41 PM JST
from array import array as _array
* Mon 05 May 2014 02:26:59 PM JST
from xcb2.xproto.define import Propagate, EventMask
* Mon 05 May 2014 02:27:36 PM JST
 Propagate.FALSE,
* Mon 05 May 2014 02:27:52 PM JST
window, 0xffffff,
* Mon 05 May 2014 02:28:00 PM JST
buf.getvalue()
* Mon 05 May 2014 02:28:53 PM JST
format, sequence_number, window, atom, data
* Mon 05 May 2014 02:29:53 PM JST
class SendEventMethodAbstract(object):
    r"""SUMMARY
    """

    def __init__(self, sendevent):
        r"""

        @Arguments:
        - `sendevent`:
        """
        self._sendevent = sendevent


* Mon 05 May 2014 02:30:03 PM JST
SendEventMethodAbstract
* Mon 05 May 2014 02:30:21 PM JST
SendEvent
* Mon 05 May 2014 02:30:22 PM JST
core.SendEvent
* Mon 05 May 2014 02:30:22 PM JST
connection.core.SendEvent
* Mon 05 May 2014 02:30:28 PM JST
            
* Mon 05 May 2014 02:38:46 PM JST
from abc import ABCMeta, abstractmethod
* Mon 05 May 2014 02:42:13 PM JST
propagate, destination, event_mask, event
* Mon 05 May 2014 02:42:48 PM JST
SendEventChecked               
* Mon 05 May 2014 02:43:53 PM JST
_sendeve
* Mon 05 May 2014 02:44:34 PM JST
propagate, destination, event_mask, event
* Mon 05 May 2014 02:45:14 PM JST
class SendEventMethodAbstract(object):
    r"""SUMMARY
    """

    def __init__(self, sendevent):
        r"""

        @Arguments:
        - `sendevent`:
        """
        self._sendevent = sendevent

    def __call__(self, propagate, destination, event_mask, event):
        r"""SUMMARY

        __call__(propagate, destination, event_mask, event)

        @Arguments:
        - `propagate`:
        - `destination`:
        - `event_mask`:
        - `event`:

        @Return:
        """
        return self._sendevent(propagate, destination, event_mask, event)




* Mon 05 May 2014 03:05:20 PM JST
class EventCode(_IntEnum):
    r"""SUMMARY
    """
    KeyPress         = 2
    KeyRelease       = 3
    ButtonPress      = 4
    ButtonRelease    = 5
    MotionNotify     = 6
    EnterNotify      = 7
    LeaveNotify      = 8
    FocusIn          = 9
    FocusOut         = 10
    KeymapNotify     = 11
    Expose           = 12
    GraphicsExposure = 13
    NoExposure       = 14
    VisibilityNotify = 15
    CreateNotify     = 16
    DestroyNotify    = 17
    UnmapNotify      = 18
    MapNotify        = 19
    MapRequest       = 20
    ReparentNotify   = 21
    ConfigureNotify  = 22
    ConfigureRequest = 23
    GravityNotify    = 24
    ResizeRequest    = 25
    CirculateNotify  = 26
    CirculateRequest = 27
    PropertyNotify   = 28
    SelectionClear   = 29
    SelectionRequest = 30
    SelectionNotify  = 31
    ColormapNotify   = 32
    ClientMessage    = 33
    MappingNotify    = 34



* Mon 05 May 2014 03:05:29 PM JST

* Mon 05 May 2014 03:05:29 PM JST

* Mon 05 May 2014 03:05:29 PM JST
from enum import IntEnum as _IntEnum

* Mon 05 May 2014 03:06:21 PM JST
class SendEventMethodAbstract(object):
    r"""SUMMARY
    """

    def __init__(self, sendevent):
        r"""

        @Arguments:
        - `sendevent`:
        """
        self._sendevent = sendevent



* Mon 05 May 2014 03:07:23 PM JST
class ClientMessage(SendEventMethodAbstract):
    r"""SUMMARY
    """

    def _clientmessage(self, format, sequence_number, window, atom, data):
        r"""SUMMARY

        _clientmessage(format, sequence_number, window, atom, data)

        @Arguments:
        - `format`:
        - `sequence_number`:
        - `window`:
        - `atom`:
        - `data`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('BBH2I', EventCode.ClientMessage, format,
                        sequence_number, window, atom))
        buf.write(str(buffer(_array('b', data))))
        return self._sendevent(
            Propagate.FALSE, window, 0xffffff, buf.getvalue())

    def __call__(self, format, sequence_number, window, atom, data):
        r"""SUMMARY

        __call__(format, sequence_number, window, atom, data)

        @Arguments:
        - `format`:
        - `sequence_number`:
        - `window`:
        - `atom`:
        - `data`:

        @Return:
        """
        return self._clientmessage(format, sequence_number, window, atom, data)



* Mon 05 May 2014 03:07:39 PM JST
from cStringIO import StringIO as _StringIO
from array import array as _array
from struct import pack as _pack


* Mon 05 May 2014 03:08:18 PM JST
SendEventMethodAbstract
* Mon 05 May 2014 03:08:25 PM JST

* Mon 05 May 2014 03:08:26 PM JST
abstract
* Mon 05 May 2014 03:08:29 PM JST
SendEventMethodAbstract
* Mon 05 May 2014 03:08:44 PM JST
from xcb2.xproto.define import Propagate
* Mon 05 May 2014 03:09:03 PM JST

* Mon 05 May 2014 03:09:03 PM JST

* Mon 05 May 2014 03:09:03 PM JST
from xcb2.xproto.define import Propagate, EventMask

* Mon 05 May 2014 03:53:25 PM JST
_SendEvent
* Mon 05 May 2014 03:55:07 PM JST
TesSendEvent
* Mon 05 May 2014 04:38:17 PM JST
data
* Mon 05 May 2014 04:38:38 PM JST
from xcb2.xconnection.clientmessage import EventData5
* Mon 05 May 2014 04:38:45 PM JST
EventData5
* Mon 05 May 2014 04:43:58 PM JST
class WindowStateMode(_IntEnum):
    r"""SUMMARY
    """
    Unset  = 0
    Set    = 1
    Toggle = 2



* Mon 05 May 2014 04:45:12 PM JST
from cStringIO import StringIO as _StringIO
from array import array as _array
from struct import pack as _pack

from xcb2.xproto.define import Propagate
from xcb2.xconnection.wrapcore.sendevent.abstract import SendEventMethodAbstract
from xcb2.xconnection.wrapcore.sendevent.eventcode import EventCode


class ClientMessage(SendEventMethodAbstract):
    r"""SUMMARY
    """

    def _clientmessage(self, format, sequence_number, window, atom, data):
        r"""SUMMARY

        _clientmessage(format, sequence_number, window, atom, data)

        @Arguments:
        - `format`:
        - `sequence_number`:
        - `window`:
        - `atom`:
        - `data`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('BBH2I', EventCode.ClientMessage, format,
                        sequence_number, window, atom))
        buf.write(str(buffer(_array('b', data))))
        return self._sendevent(
            Propagate.FALSE, window, 0xffffff, buf.getvalue())

    def __call__(self, format, sequence_number, window, atom, data):
        r"""SUMMARY

        __call__(format, sequence_number, window, atom, data)

        @Arguments:
        - `format`:
        - `sequence_number`:
        - `window`:
        - `atom`:
        - `data`:

        @Return:
        """
        return self._clientmessage(format, sequence_number, window, atom, data)



* Mon 05 May 2014 04:46:48 PM JST
ClientMessage
* Mon 05 May 2014 04:48:10 PM JST
from enum import IntEnum as _IntEnum
* Mon 05 May 2014 04:48:16 PM JST
class WindowStateMode(_IntEnum):
    r"""SUMMARY
    """
    Unset  = 0
    Set    = 1
    Toggle = 2

* Mon 05 May 2014 04:48:41 PM JST
class EventData5(object):
    r"""
    """

    def __init__(self, *args):
        r"""SUMMARY

        __init__(display=None)

        @Arguments:
        - `display`:

        @Return:
        """
        self.data = ListFill(args, length=5, fill=0)

    def setdata0(self, num):
        r"""SUMMARY

        setdata1(num)

        @Arguments:
        - `num`:

        @Return:
        """
        self.data[0] = num

    def setdata1(self, num):
        r"""SUMMARY

        setdata2()

        @Return:
        """
        self.data[1] = num

    def setdata2(self, num):
        r"""SUMMARY

        setdata3(num)

        @Arguments:
        - `num`:

        @Return:
        """
        self.data[2] = num

    def setdata3(self, num):
        r"""SUMMARY

        setdata3(num)

        @Arguments:
        - `num`:

        @Return:
        """
        self.data[3] = num

    def setdata4(self, num):
        r"""SUMMARY

        setdata3(num)

        @Arguments:
        - `num`:

        @Return:
        """
        self.data[4] = num

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:
        """
        self.data.clear()

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return _pack('5I', *self.data)

    def copy(self, ):
        r"""SUMMARY

        copy()

        @Return:
        """
        return self.__class__(*self.data[:])

    def __repr__(self, ):
        return '{0.__class__.__name__}({1})'.format(self, list(self.data))

    def __getitem__(self, num):
        return self.data[num]

    def __setitem__(self, num, item):
        self.data[num] = item

    def __delitem__(self, num):
        del self.data[num]

* Mon 05 May 2014 04:48:55 PM JST
from struct import pack as _pack
* Mon 05 May 2014 04:49:02 PM JST
from t1.listutil.limitlist import ListFill
* Mon 05 May 2014 05:10:24 PM JST
    def __init__(self, sender, data):
        r"""

        @Arguments:
        - `data`:
        """
        self._sender = sender
        self.data = data
        self.data.setdata0(WindowStateMode.Set)

    def __call__(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        __call__(window, propergate=False, sequence_number=0)

        @Arguments:
        - `window`:
        - `propergate`:
        - `sequence_number`:

        @Return:
        """
        return self._sender(
            propergate, window, sequence_number, self.data.pack())

* Mon 05 May 2014 05:10:37 PM JST
WindowStateMode.Set
* Mon 05 May 2014 05:10:59 PM JST
StateModeAbstract
* Mon 05 May 2014 05:11:15 PM JST
WindowStateMode
* Mon 05 May 2014 05:11:58 PM JST
class SetState(StateModeAbstract):
    r"""SUMMARY
    """
    mode = WindowStateMode.Set

* Mon 05 May 2014 05:12:07 PM JST
Set
* Mon 05 May 2014 05:23:17 PM JST
Net_WM_StateMessate
* Mon 05 May 2014 05:26:47 PM JST
data
* Mon 05 May 2014 05:26:51 PM JST

* Mon 05 May 2014 05:26:51 PM JST

* Mon 05 May 2014 05:26:51 PM JST
        self._data = data

* Mon 05 May 2014 05:27:21 PM JST
Message_NET_WM_STATE
* Mon 05 May 2014 05:28:11 PM JST
Message_NET_WM_STATE
* Mon 05 May 2014 05:33:00 PM JST
from xcb2.xconnection.wrapcore.atom import AtomIdentifier
* Mon 05 May 2014 05:33:11 PM JST
AtomIdentifier
* Mon 05 May 2014 05:35:24 PM JST
self._NET_WM_STATE = self.atom('_NET_WM_STATE')
* Mon 05 May 2014 05:36:04 PM JST
self._NET_WM_STATE
* Mon 05 May 2014 05:37:53 PM JST
ClientMessage
* Mon 05 May 2014 05:40:04 PM JST
propagate
* Mon 05 May 2014 05:40:09 PM JST
            
* Mon 05 May 2014 05:40:23 PM JST
propagate
* Mon 05 May 2014 05:41:21 PM JST
ClientMessage
* Mon 05 May 2014 05:47:09 PM JST
'_NET_WM_STATE_FULLSCREEN'
* Mon 05 May 2014 05:48:43 PM JST
t
* Mon 05 May 2014 05:52:16 PM JST
eventdata
* Mon 05 May 2014 05:52:23 PM JST
eventdata
* Mon 05 May 2014 05:53:12 PM JST

* Mon 05 May 2014 05:53:12 PM JST
eventdata
* Mon 05 May 2014 05:53:33 PM JST
eventdata
* Mon 05 May 2014 05:53:57 PM JST
        
* Mon 05 May 2014 05:53:59 PM JST
Set
* Mon 05 May 2014 05:54:12 PM JST
        
* Mon 05 May 2014 05:54:14 PM JST
Set
* Mon 05 May 2014 05:55:15 PM JST
self._sender
* Mon 05 May 2014 05:56:05 PM JST
'_NET_WM_STATE_FULLSCREEN'
* Mon 05 May 2014 05:57:16 PM JST
from xcb2.xconnection.wrapcore.sendevent.clientmessage import eventdata
from xcb2.xconnection.wrapcore.sendevent.clientmessage import statemode


class FullScreen(object):
    r"""SUMMARY
    """
    _atomname = '_NET_WM_STATE_FULLSCREEN'

    def __init__(self, sender):
        r"""

        @Arguments:
        - `sender`:
        """
        self._sender = sender
        self._atom = self._sender.getatom(self._atomname)
        self._basedata = eventdata.EventData5()
        self._basedata.setdata1(self._atom)
        self.set = statemode.UnsetState(self._sender, self._basedata.copy())
        self.unset = statemode.SetState(self._sender, self._basedata.copy())
        self.toggle = statemode.ToggleState(self._sender, self._basedata.copy())

* Mon 05 May 2014 05:58:18 PM JST
from xcb2.xconnection.wrapcore.atom import AtomIdentifier


class Message_NET_WM_STATE(object):
    r"""SUMMARY
    """

    def __init__(self, sender):
        r"""

        @Arguments:
        - `sender`:
        - `data`:
        """
        self._sender = sender # ClientMessage
        self.getatom = AtomIdentifier(self._sender.connection)
        self._NET_WM_STATE = self.getatom('_NET_WM_STATE')
        self._format = self._NET_WM_STATE.format

    def __call__(self, propagate, sequence_number, window, data):
        r"""SUMMARY

        __call__(propagate, sequence_number, window, data)

        @Arguments:
        - `propagate`:
        - `sequence_number`:
        - `window`:
        - `data`:

        @Return:
        """
        return self._sender(propagate, self._format, sequence_number,
                            window, data)

* Mon 05 May 2014 05:58:33 PM JST

* Mon 05 May 2014 05:58:33 PM JST

* Mon 05 May 2014 05:58:33 PM JST
from xcb2.xconnection.wrapcore.atom import AtomIdentifier

* Mon 05 May 2014 05:59:00 PM JST
_NET_WM_STAT
* Mon 05 May 2014 05:59:03 PM JST
_NET_WM_STATE
* Mon 05 May 2014 05:59:25 PM JST
    _atomname = '_NET_WM_STATE_FULLSCREEN'

    def __init__(self, sender):
        r"""

        @Arguments:
        - `sender`:
        """
        self._sender = sender
        self._atom = self._sender.getatom(self._atomname)
        self._basedata = eventdata.EventData5()
        self._basedata.setdata1(self._atom)
        self.set = statemode.UnsetState(self._sender, self._basedata.copy())
        self.unset = statemode.SetState(self._sender, self._basedata.copy())
        self.toggle = statemode.ToggleState(self._sender, self._basedata.copy())

* Mon 05 May 2014 05:59:31 PM JST
_NET_WM_STATE_FULLSCREEN
* Mon 05 May 2014 05:59:48 PM JST
_NET_WM_STATEAbstract
* Mon 05 May 2014 06:00:07 PM JST
'_NET_WM_STATE_SHADED'
* Mon 05 May 2014 06:01:04 PM JST
class Shade(_NET_WM_STATEAbstract):
    r"""SUMMARY
    """
    _atomname = '_NET_WM_STATE_SHADED'
    


* Mon 05 May 2014 06:01:08 PM JST
Shade
* Mon 05 May 2014 06:01:23 PM JST
_NET_WM_STATE_ABOVE
* Mon 05 May 2014 06:01:43 PM JST
_NET_WM_STATE_BELOW
* Mon 05 May 2014 06:02:09 PM JST
_NET_WM_STATE_HIDDEN
* Mon 05 May 2014 06:02:25 PM JST
_NET_WM_ACTION_MINIMIZE
* Mon 05 May 2014 06:02:51 PM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Mon 05 May 2014 06:03:16 PM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Mon 05 May 2014 06:04:54 PM JST

* Mon 05 May 2014 06:04:54 PM JST

* Mon 05 May 2014 06:04:54 PM JST
        self._basedata.setdata1(self._atom)

* Mon 05 May 2014 06:05:53 PM JST
self._sender.getatom(self._atomname)
* Mon 05 May 2014 06:06:00 PM JST

* Mon 05 May 2014 06:06:00 PM JST

* Mon 05 May 2014 06:06:00 PM JST
        self._atom = 

* Mon 05 May 2014 06:06:14 PM JST
    def _makedata(self, ):
        r"""SUMMARY

        _makedata()

        @Return:
        """
        self._basedata.setdata1(self._sender.getatom(self._atomname))

* Mon 05 May 2014 06:06:26 PM JST

* Mon 05 May 2014 06:09:11 PM JST
efl
* Mon 05 May 2014 06:10:00 PM JST
from xcb2.xconnection.wrapcore.sendevent.clientmessage import eventdata
from xcb2.xconnection.wrapcore.sendevent.clientmessage import statemode
from xcb2.xconnection.wrapcore.atom import AtomIdentifier


class _NET_WM_STATEAbstract(object):
    r"""SUMMARY
    """
    _atomname = ''

    def __init__(self, sender):
        r"""

        @Arguments:
        - `sender`:
        """
        self._sender = sender
        self._basedata = eventdata.EventData5()
        self._makedata()
        self.set = statemode.UnsetState(self._sender, self._basedata.copy())
        self.unset = statemode.SetState(self._sender, self._basedata.copy())
        self.toggle = statemode.ToggleState(self._sender, self._basedata.copy())

    def _makedata(self, ):
        r"""SUMMARY

        _makedata()

        @Return:
        """
        self._basedata.setdata1(self._sender.getatom(self._atomname))


class FullScreen(_NET_WM_STATEAbstract):
    r"""SUMMARY
    """
    _atomname = '_NET_WM_STATE_FULLSCREEN'


class Shade(_NET_WM_STATEAbstract):
    r"""SUMMARY
    """
    _atomname = '_NET_WM_STATE_SHADED'


class Above(_NET_WM_STATEAbstract):
    r"""SUMMARY
    """
    _atomname = '_NET_WM_STATE_ABOVE'


class Below(_NET_WM_STATEAbstract):
    r"""SUMMARY
    """
    _atomname = '_NET_WM_STATE_BELOW'


class Hidden(_NET_WM_STATEAbstract):
    r"""SUMMARY
    """
    _atomname = '_NET_WM_STATE_HIDDEN'


class Minimize(_NET_WM_STATEAbstract):
    r"""SUMMARY
    """
    _atomname = '_NET_WM_ACTION_MINIMIZE'


class Maximize(_NET_WM_STATEAbstract):
    r"""SUMMARY
    """
    _atomname = '_NET_WM_STATE_MAXIMIZED_VERT'
    _atomname2 = '_NET_WM_STATE_MAXIMIZED_HORZ'

    def _makedata(self, ):
        r"""SUMMARY

        _makedata()

        @Return:
        """
        self._basedata.setdata1(self._sender.getatom(self._atomname))
        self._basedata.setdata2(self._sender.getatom(self._atomname2))


class Message_NET_WM_STATE(object):
    r"""SUMMARY
    """

    def __init__(self, sender):
        r"""

        @Arguments:
        - `sender`:
        - `data`:
        """
        self._sender = sender # ClientMessage
        self.getatom = AtomIdentifier(self._sender.connection)
        self._NET_WM_STATE = self.getatom('_NET_WM_STATE')
        self._format = self._NET_WM_STATE.format
        self.fullscreen = FullScreen(self)
        self.shade = Shade(self)
        self.above = Above(self)
        self.below = Below(self)
        self.hidden = Hidden(self)
        self.maximize = Maximize(self)

    def __call__(self, propagate, sequence_number, window, data):
        r"""SUMMARY

        __call__(propagate, sequence_number, window, data)

        @Arguments:
        - `propagate`:
        - `sequence_number`:
        - `window`:
        - `data`:

        @Return:
        """
        return self._sender(propagate, self._format, sequence_number,
                            window, data)



* Mon 05 May 2014 06:14:36 PM JST
SendEventMethodAbstract
* Mon 05 May 2014 06:15:26 PM JST

* Mon 05 May 2014 06:15:26 PM JST

* Mon 05 May 2014 06:15:26 PM JST
# from xcb2.xproto.define import Propagate

* Mon 05 May 2014 06:16:14 PM JST
Message_NET_WM_STATE
* Mon 05 May 2014 06:24:49 PM JST
    @staticmethod
    def get_name(name):
        r"""SUMMARY

        get_types(default=0)

        @Arguments:
        - `default`:

        @Return:
        """
        return PropertyAtom.get_types(name).name

    @staticmethod
    def get_length(name):
        r"""SUMMARY

        get_length()

        @Return:
        """
        return PropertyAtom.get_types(name).length


* Mon 05 May 2014 06:25:12 PM JST
AtomReplyTypes
* Mon 05 May 2014 06:25:18 PM JST
get_
* Mon 05 May 2014 06:25:29 PM JST
name
* Mon 05 May 2014 06:25:40 PM JST
AtomReplyTypes
* Mon 05 May 2014 06:25:59 PM JST
atomtypes.get(str(name))
* Mon 05 May 2014 06:30:03 PM JST
48234500
* Mon 05 May 2014 06:31:21 PM JST
ClientMessage
* Mon 05 May 2014 06:32:22 PM JST
ClientMessage
* Mon 05 May 2014 06:32:47 PM JST
48234500
* Mon 05 May 2014 06:33:40 PM JST
_sender
* Mon 05 May 2014 06:33:41 PM JST
self._sender
* Mon 05 May 2014 06:35:24 PM JST
self._NET_WM_STATE
* Mon 05 May 2014 06:35:50 PM JST
q = 48234500
* Mon 05 May 2014 06:36:15 PM JST

* Mon 05 May 2014 06:36:15 PM JST

* Mon 05 May 2014 06:36:16 PM JST
        print(sender)

* Mon 05 May 2014 06:37:11 PM JST
SendE
* Mon 05 May 2014 06:38:56 PM JST
48234500
* Mon 05 May 2014 06:39:59 PM JST
format
* Mon 05 May 2014 06:40:09 PM JST
EventCode.ClientMessage
* Mon 05 May 2014 06:40:17 PM JST
sequence_number
* Mon 05 May 2014 06:40:28 PM JST

* Mon 05 May 2014 06:40:28 PM JST

* Mon 05 May 2014 06:40:30 PM JST

* Mon 05 May 2014 06:40:30 PM JST

* Mon 05 May 2014 06:40:30 PM JST
        print(window)

* Mon 05 May 2014 06:42:03 PM JST
window,
* Mon 05 May 2014 06:42:27 PM JST
c.core2.TesSendEvent.ClientMessage.net_wm_state.above.set(48234500)
* Mon 05 May 2014 06:42:34 PM JST
import xcb2
c=xcb2.connect()

* Mon 05 May 2014 06:42:42 PM JST
import xcb2
c=xcb2.connect()

* Mon 05 May 2014 06:42:45 PM JST
c.core2.TesSendEvent.ClientMessage.net_wm_state.above.set(48234500)
* Mon 05 May 2014 06:43:43 PM JST
39845892
* Mon 05 May 2014 06:44:46 PM JST
'! \x00\x00\x04\x00`\x02(\x01\x00\x00\x00\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Mon 05 May 2014 06:45:03 PM JST
SendEvent?
* Mon 05 May 2014 06:45:33 PM JST
48234500
* Mon 05 May 2014 06:48:06 PM JST
'! \x00\x00\x04\x00\xe0\x02(\x01\x00\x00\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Mon 05 May 2014 06:49:07 PM JST
sequence_number
* Mon 05 May 2014 06:50:08 PM JST
48234500
* Mon 05 May 2014 06:50:14 PM JST
'! \x00\x00\x04\x00\xe0\x02(\x01\x00\x00\x00\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Mon 05 May 2014 06:54:51 PM JST
Propagate.FALSE
* Mon 05 May 2014 06:55:16 PM JST
propagate
* Mon 05 May 2014 06:57:09 PM JST
0xffffff
* Mon 05 May 2014 10:13:34 PM JST
48234499
* Mon 05 May 2014 10:13:45 PM JST
import xcb2
c=xcb2.connect()

* Mon 05 May 2014 10:13:50 PM JST
c.core2.TesSendEvent.ClientMessage.net_wm_state.above.set(48234499)
* Mon 05 May 2014 10:14:53 PM JST
'! \x00\x00\x03\x00\xe0\x02(\x01\x00\x00\x00\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Mon 05 May 2014 10:15:46 PM JST
core
* Mon 05 May 2014 10:15:59 PM JST
48234499
* Mon 05 May 2014 10:16:05 PM JST
'! \x00\x00\x03\x00\xe0\x02(\x01\x00\x00\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Mon 05 May 2014 10:20:19 PM JST
un
* Mon 05 May 2014 10:20:31 PM JST
import xcb2
c=xcb2.connect()

* Mon 05 May 2014 10:20:35 PM JST
c.core2.TesSendEvent.ClientMessage.net_wm_state.above.set(48234499)
* Mon 05 May 2014 10:21:28 PM JST

* Mon 05 May 2014 10:21:28 PM JST

* Mon 05 May 2014 10:21:28 PM JST
        print(sequence_number)

* Mon 05 May 2014 10:21:28 PM JST
        print(sequence_number)

* Mon 05 May 2014 10:21:28 PM JST
        print(sequence_number)
        print(repr(buf.getvalue()))

* Mon 05 May 2014 10:21:51 PM JST
            
* Mon 05 May 2014 10:28:09 PM JST

* Mon 05 May 2014 10:28:09 PM JST

* Mon 05 May 2014 10:28:09 PM JST
        print(propagate)

* Mon 05 May 2014 10:28:09 PM JST
        print(propagate)

* Mon 05 May 2014 10:28:09 PM JST
        print(propagate)
        print(destination)

* Mon 05 May 2014 10:28:09 PM JST
        print(propagate)
        print(destination)

* Mon 05 May 2014 10:28:09 PM JST
        print(propagate)
        print(destination)
        print(event_mask)

* Mon 05 May 2014 10:28:10 PM JST
        print(propagate)
        print(destination)
        print(event_mask)

* Mon 05 May 2014 10:28:10 PM JST
        print(propagate)
        print(destination)
        print(event_mask)
        print(repr(event))

* Mon 05 May 2014 10:28:46 PM JST
SendEvent
* Mon 05 May 2014 10:32:24 PM JST
SendEventChecked
* Mon 05 May 2014 10:40:37 PM JST
from xcb2.xconnection.wrapcore.sendevent.clientmessage import eventdata
from xcb2.xconnection.wrapcore.sendevent.clientmessage import statemode
from xcb2.xconnection.wrapcore.atom import AtomIdentifier


class _NET_WM_STATEAbstract(object):
    r"""SUMMARY
    """
    _atomname = ''

    def __init__(self, sender):
        r"""

        @Arguments:
        - `sender`:
        """
        self._sender = sender
        self._basedata = eventdata.EventData5()
        self._makedata()
        self.unset = statemode.UnsetState(self._sender, self._basedata.copy())
        self.set = statemode.SetState(self._sender, self._basedata.copy())
        self.toggle = statemode.ToggleState(self._sender, self._basedata.copy())

    def _makedata(self, ):
        r"""SUMMARY

        _makedata()

        @Return:
        """
        self._basedata.setdata1(self._sender.getatom(self._atomname))


class FullScreen(_NET_WM_STATEAbstract):
    r"""SUMMARY
    """
    _atomname = '_NET_WM_STATE_FULLSCREEN'

* Mon 05 May 2014 10:41:00 PM JST
_NET_WM_STATE
* Mon 05 May 2014 10:45:36 PM JST
class StateModeAbstract(object):
    r"""SUMMARY
    """
    mode = None

    def __init__(self, sender, data):
        r"""

        @Arguments:
        - `data`:
        """
        self._sender = sender
        self.data = data
        self.data.setdata0(self.mode)

    def __call__(self, window, propergate=False, sequence_number=0):
        r"""SUMMARY

        __call__(window, propergate=False, sequence_number=0)

        @Arguments:
        - `window`:
        - `propergate`:
        - `sequence_number`:

        @Return:
        """
        return self._sender(
            propergate, sequence_number, window, self.data.pack())


class UnsetState(StateModeAbstract):
    r"""SUMMARY
    """
    mode = WindowStateMode.Unset



* Mon 05 May 2014 10:46:03 PM JST
StateMode
* Mon 05 May 2014 10:46:08 PM JST
mode
* Mon 05 May 2014 10:46:19 PM JST
mode
* Mon 05 May 2014 10:46:35 PM JST
StateMode
* Mon 05 May 2014 10:46:41 PM JST
UnsetState
* Mon 05 May 2014 10:46:49 PM JST
mode
* Mon 05 May 2014 10:47:07 PM JST
from xcb2.xproto.define import Time
* Mon 05 May 2014 10:47:14 PM JST
Time
* Mon 05 May 2014 10:47:16 PM JST
define
* Mon 05 May 2014 10:48:11 PM JST
Close
* Mon 05 May 2014 10:48:18 PM JST
Close
* Mon 05 May 2014 10:48:21 PM JST
Close
* Mon 05 May 2014 10:48:49 PM JST

* Mon 05 May 2014 10:48:49 PM JST

* Mon 05 May 2014 10:48:49 PM JST
        self.unset = statemode.UnsetState(self._sender, self._basedata.copy())

* Mon 05 May 2014 10:48:49 PM JST
        self.unset = statemode.UnsetState(self._sender, self._basedata.copy())

* Mon 05 May 2014 10:48:49 PM JST
        self.unset = statemode.UnsetState(self._sender, self._basedata.copy())
        self.set = statemode.SetState(self._sender, self._basedata.copy())

* Mon 05 May 2014 10:48:51 PM JST
toggle
* Mon 05 May 2014 10:48:56 PM JST
ToggleState
* Mon 05 May 2014 10:48:57 PM JST
statemode.ToggleState
* Mon 05 May 2014 10:49:36 PM JST
WM_PROTOCOLSAbstract
* Mon 05 May 2014 10:51:00 PM JST
'WM_DELETE_WINDOW'
* Mon 05 May 2014 10:56:49 PM JST

* Mon 05 May 2014 10:56:49 PM JST

* Mon 05 May 2014 10:56:49 PM JST
    time = define.Time.CurrentTime

* Mon 05 May 2014 10:59:54 PM JST

* Mon 05 May 2014 10:59:54 PM JST

* Mon 05 May 2014 10:59:54 PM JST
        self._ma

* Mon 05 May 2014 11:00:52 PM JST
window, propergate=False, sequence_number=0
* Mon 05 May 2014 11:01:34 PM JST
propergate
* Mon 05 May 2014 11:03:29 PM JST
'WM_DELETE_WINDOW'
* Mon 05 May 2014 11:05:16 PM JST
'WM_DELETE_WINDOW'
* Mon 05 May 2014 11:05:29 PM JST
define.Time.CurrentTime
* Mon 05 May 2014 11:05:44 PM JST
time
* Mon 05 May 2014 11:05:51 PM JST
time
* Mon 05 May 2014 11:06:44 PM JST
_atomname
* Mon 05 May 2014 11:07:11 PM JST
_atomname
* Mon 05 May 2014 11:07:29 PM JST

* Mon 05 May 2014 11:07:29 PM JST

* Mon 05 May 2014 11:07:29 PM JST
from xcb2.xconnection.wrapcore.sendevent.clientmessage import statemode

* Mon 05 May 2014 11:07:29 PM JST
from xcb2.xconnection.wrapcore.sendevent.clientmessage import statemode

* Mon 05 May 2014 11:07:29 PM JST
from xcb2.xconnection.wrapcore.sendevent.clientmessage import statemode
from xcb2.xconnection.wrapcore.atom import AtomIdentifier

* Mon 05 May 2014 11:07:42 PM JST
WM_PROTOCOLS
* Mon 05 May 2014 11:08:22 PM JST
from xcb2.xconnection.wrapcore.sendevent.clientmessage.net_wm_state import (
    Message_NET_WM_STATE)

* Mon 05 May 2014 11:08:24 PM JST
Message_NET_WM_STATE
* Mon 05 May 2014 11:08:35 PM JST
net_wm_state
* Mon 05 May 2014 11:08:49 PM JST
delete
* Mon 05 May 2014 11:09:07 PM JST
import xcb2
c=xcb2.connect()

* Mon 05 May 2014 11:09:48 PM JST
import xcb2
c=xcb2.connect()

* Mon 05 May 2014 11:12:12 PM JST
self.getatom = AtomIdentifier(self._sender.connection)
* Mon 05 May 2014 11:12:32 PM JST
from xcb2.xconnection.wrapcore.atom import AtomIdentifier
* Mon 05 May 2014 11:13:56 PM JST
import xcb2
c=xcb2.connect()

* Mon 05 May 2014 11:30:03 PM JST
self.
* Mon 05 May 2014 11:30:08 PM JST
self.getatom = AtomIdentifier(self._sender.connection)
* Mon 05 May 2014 11:30:33 PM JST
    def __call__(self, propagate, sequence_number, window, data):
        r"""SUMMARY

        __call__(propagate, sequence_number, window, data)

        @Arguments:
        - `propagate`:
        - `sequence_number`:
        - `window`:
        - `data`:

        @Return:
        """
        return self._sender(propagate, self._format, sequence_number,
                            window, self._NET_WM_STATE, data)

* Mon 05 May 2014 11:31:48 PM JST
WM_PROTOCOLS
* Mon 05 May 2014 11:36:43 PM JST
DeleteWindow
* Mon 05 May 2014 11:36:54 PM JST
WM_PROTOCOLS
* Mon 05 May 2014 11:37:56 PM JST
import xcb2
c=xcb2.connect()

* Mon 05 May 2014 11:38:19 PM JST
Message_WM_PROTOCOLS
* Mon 05 May 2014 11:38:54 PM JST
import xcb2
c=xcb2.connect()

* Mon 05 May 2014 11:40:06 PM JST
self.getatom
* Mon 05 May 2014 11:40:29 PM JST
self.
* Mon 05 May 2014 11:40:41 PM JST
import xcb2
* Mon 05 May 2014 11:40:44 PM JST
c=xcb2.connect()
* Mon 05 May 2014 11:41:27 PM JST
time
* Mon 05 May 2014 11:41:35 PM JST
import xcb2
c=xcb2.connect()

* Mon 05 May 2014 11:41:53 PM JST
D 
* Mon 05 May 2014 11:54:53 PM JST
_NET_CLOSE_WINDOW
* Mon 05 May 2014 11:55:11 PM JST
Delete
* Mon 05 May 2014 11:55:21 PM JST
_NET_CLOSE_WINDOW
* Mon 05 May 2014 11:55:28 PM JST
Delete
* Mon 05 May 2014 11:55:32 PM JST
Delete
* Mon 05 May 2014 11:56:32 PM JST
atom
* Mon 05 May 2014 11:56:36 PM JST
atom
* Mon 05 May 2014 11:56:39 PM JST
= '_NET_CLOSE_WINDOW'
* Mon 05 May 2014 11:57:30 PM JST
Delete
* Mon 05 May 2014 11:57:40 PM JST

* Mon 05 May 2014 11:57:40 PM JST

* Mon 05 May 2014 11:57:40 PM JST
    _time = ''

* Mon 05 May 2014 11:57:50 PM JST

* Mon 05 May 2014 11:57:50 PM JST

* Mon 05 May 2014 11:57:51 PM JST
        self._makedata()

* Mon 05 May 2014 11:57:57 PM JST
Delete
* Mon 05 May 2014 11:58:02 PM JST

* Mon 05 May 2014 11:58:02 PM JST

* Mon 05 May 2014 11:58:02 PM JST
        self.getatom = sender.getatom

* Mon 05 May 2014 11:58:10 PM JST
Delete
* Mon 05 May 2014 11:58:23 PM JST
Delete
* Mon 05 May 2014 11:58:32 PM JST

* Mon 05 May 2014 11:58:33 PM JST

* Mon 05 May 2014 11:58:33 PM JST
    _time = define.Time.CurrentTime

* Tue 06 May 2014 12:00:14 AM JST
Delete
* Tue 06 May 2014 12:00:21 AM JST
delete
* Tue 06 May 2014 12:00:38 AM JST
'_NET_CLOSE_WINDOW'
* Tue 06 May 2014 12:00:49 AM JST
_NET_CLOSE_WINDOW
* Tue 06 May 2014 12:01:23 AM JST

* Tue 06 May 2014 12:01:23 AM JST

* Tue 06 May 2014 12:01:23 AM JST
        self.getatom = AtomIdentifier(self._sender.connection)

* Tue 06 May 2014 12:01:42 AM JST
Message_NET_CLOSE_WINDOW
* Tue 06 May 2014 12:02:40 AM JST
from xcb2.xconnection.wrapcore.sendevent.clientmessage.wm_protocols import (
    Message_WM_PROTOCOLS)

* Tue 06 May 2014 12:02:42 AM JST
Message_NET_CLOSE_WINDOW
* Tue 06 May 2014 12:02:48 AM JST
wm_protocols
* Tue 06 May 2014 12:03:00 AM JST
Message_NET_CLOSE_WINDOW
* Tue 06 May 2014 12:05:52 AM JST
import xcb2
c=xcb2.connect()

* Tue 06 May 2014 12:10:37 AM JST
48234499
* Tue 06 May 2014 09:49:23 AM JST
from cStringIO import StringIO as _StringIO
from array import array as _array
from struct import pack as _pack

* Tue 06 May 2014 09:49:42 AM JST
class ClientMessage(SendEventMethodAbstract):
    r"""SUMMARY
    """
    def __init__(self, sendevent):
        r"""SUMMARY

        __init__(sendevent)

        @Arguments:
        - `sendevent`:

        @Return:
        """
        SendEventMethodAbstract.__init__(self, sendevent)
        self.connection = self._sendevent.connection
        self.net_wm_state = Message_NET_WM_STATE(self)
        self.wm_protocols = Message_WM_PROTOCOLS(self)
        self.net_close_window = Message_NET_CLOSE_WINDOW(self)

    def _clientmessage(self, propagate, format,
                       sequence_number, window, atom, data):
        r"""SUMMARY

        _clientmessage(format, sequence_number, window, atom, data)

        @Arguments:
        - `format`:
        - `sequence_number`:
        - `window`:
        - `atom`:
        - `data`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('BBH2I', EventCode.ClientMessage, format,
                        sequence_number, window, atom))
        buf.write(str(buffer(_array('b', data))))
        return self._sendevent(propagate, window, 0xffffff, buf.getvalue())

    def __call__(self, propagate, format, sequence_number, window, atom, data):
        r"""SUMMARY

        __call__(format, sequence_number, window, atom, data)

        @Arguments:
        - `format`:
        - `sequence_number`:
        - `window`:
        - `atom`:
        - `data`:

        @Return:
        """
        return self._clientmessage(
            propagate, format, sequence_number, window, atom, data)

* Tue 06 May 2014 09:50:14 AM JST
from xcb2.xconnection.wrapcore.sendevent.abstract import SendEventMethodAbstract
* Tue 06 May 2014 09:50:33 AM JST
from xcb2.xconnection.wrapcore.sendevent.eventcode import EventCode
* Tue 06 May 2014 09:51:15 AM JST
ClientMessage
* Tue 06 May 2014 09:52:01 AM JST
_clientmessage
* Tue 06 May 2014 09:52:16 AM JST
format,
* Tue 06 May 2014 09:52:38 AM JST
window
* Tue 06 May 2014 09:52:48 AM JST
atom
* Tue 06 May 2014 09:52:55 AM JST
data
* Tue 06 May 2014 09:53:40 AM JST
ClientMessage
* Tue 06 May 2014 09:53:57 AM JST
'2BH4I5HBx'
* Tue 06 May 2014 09:54:12 AM JST
format
* Tue 06 May 2014 09:54:21 AM JST
                        
* Tue 06 May 2014 09:54:27 AM JST
window
* Tue 06 May 2014 09:54:30 AM JST
atom
* Tue 06 May 2014 09:54:33 AM JST
time
* Tue 06 May 2014 09:55:26 AM JST

* Tue 06 May 2014 09:55:26 AM JST

* Tue 06 May 2014 09:55:26 AM JST
        buf.write(str(buffer(_array('b', data))))

* Tue 06 May 2014 09:56:07 AM JST
propagate, destination, detail,
                       sequence_number, time, root, window, child,
                       root_x, root_y, event_x, event_y, state, samescreen
* Tue 06 May 2014 09:56:12 AM JST
            
* Tue 06 May 2014 09:57:23 AM JST
EventMask.KeyPress
* Tue 06 May 2014 09:58:09 AM JST
            
* Tue 06 May 2014 09:58:23 AM JST
from xcb2.xproto.define import Propagate, EventMask
* Tue 06 May 2014 09:58:34 AM JST
Propagate, 
* Tue 06 May 2014 09:58:37 AM JST

* Tue 06 May 2014 09:58:37 AM JST

* Tue 06 May 2014 09:58:38 AM JST
from array import array as _array

* Tue 06 May 2014 09:58:40 AM JST
EventMask
* Tue 06 May 2014 09:58:50 AM JST
            
* Tue 06 May 2014 09:58:55 AM JST
            
* Tue 06 May 2014 09:59:14 AM JST
propagate, destination, detail, sequence_number, time,
            root, window, child, root_x, root_y, event_x, event_y, state,
            samescreen
* Tue 06 May 2014 09:59:24 AM JST
propagate, destination, detail,
                       sequence_number, time, root, window, child,
                       root_x, root_y, event_x, event_y, state, samescreen
* Tue 06 May 2014 10:00:51 AM JST

* Tue 06 May 2014 10:00:52 AM JST
ClientMessage
* Tue 06 May 2014 10:00:56 AM JST
clientmessage
* Tue 06 May 2014 10:01:10 AM JST
from xcb2.xconnection.wrapcore.sendevent.keypress import KeyPress
* Tue 06 May 2014 10:04:06 AM JST
37748740
* Tue 06 May 2014 10:14:54 AM JST
from cStringIO import StringIO as _StringIO
from struct import pack as _pack

from xcb2.xproto.define import EventMask
from xcb2.xconnection.wrapcore.sendevent.eventcode import EventCode
from xcb2.xconnection.wrapcore.sendevent.abstract import SendEventMethodAbstract


class KeyPress(SendEventMethodAbstract):
    r"""SUMMARY
    """
    def __init__(self, sendevent):
        r"""SUMMARY

        __init__(sendevent)

        @Arguments:
        - `sendevent`:

        @Return:
        """
        SendEventMethodAbstract.__init__(self, sendevent)

    def _keypress(self, propagate, destination, detail,
                       sequence_number, time, root, window, child,
                       root_x, root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY

        _clientmessage(format, sequence_number, window, atom, data)

        @Arguments:
        - `format`:
        - `sequence_number`:
        - `window`:
        - `atom`:
        - `data`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('2BH4I5HBx', EventCode.KeyPress, detail,
                        sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen))
        return self._sendevent(
            propagate, window, EventMask.KeyPress, buf.getvalue())

    def __call__(self, propagate, destination, detail,
                       sequence_number, time, root, window, child,
                       root_x, root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY

        __call__(format, sequence_number, window, atom, data)

        @Arguments:
        - `format`:
        - `sequence_number`:
        - `window`:
        - `atom`:
        - `data`:

        @Return:
        """
        return self._keypress(
            propagate, destination, detail, sequence_number, time,
            root, window, child, root_x, root_y, event_x, event_y, state,
            samescreen)

* Tue 06 May 2014 10:15:18 AM JST
              
* Tue 06 May 2014 10:15:19 AM JST
           
* Tue 06 May 2014 10:15:41 AM JST
_keypress
* Tue 06 May 2014 10:18:46 AM JST
from xcb2.xconnection.wrapcore.sendevent.keypress.keypress import KeyPress
* Tue 06 May 2014 10:18:56 AM JST
keypress
* Tue 06 May 2014 10:19:00 AM JST
keypress
* Tue 06 May 2014 10:19:04 AM JST
KeyPress
* Tue 06 May 2014 10:19:12 AM JST
KeyRelease
* Tue 06 May 2014 10:19:42 AM JST

* Tue 06 May 2014 10:19:42 AM JST
KeyPress
* Tue 06 May 2014 10:19:46 AM JST
keypress
* Tue 06 May 2014 10:19:53 AM JST
KeyRelease
* Tue 06 May 2014 10:21:54 AM JST

* Tue 06 May 2014 10:21:54 AM JST

* Tue 06 May 2014 10:21:54 AM JST
        print('DEBUG-1-clientmessage.py')

* Tue 06 May 2014 10:22:00 AM JST

* Tue 06 May 2014 10:22:00 AM JST

* Tue 06 May 2014 10:22:00 AM JST
        # TODO: (Atami) [2014/05/06]

* Tue 06 May 2014 10:22:03 AM JST
        
* Tue 06 May 2014 10:22:06 AM JST

* Tue 06 May 2014 10:22:06 AM JST

* Tue 06 May 2014 10:22:06 AM JST
        # TODO: (Atami) [2014/05/06]

* Tue 06 May 2014 10:22:09 AM JST

* Tue 06 May 2014 10:22:09 AM JST

* Tue 06 May 2014 10:22:09 AM JST
        # TODO: (Atami) [2014/05/06]

* Tue 06 May 2014 10:22:10 AM JST

* Tue 06 May 2014 10:22:10 AM JST

* Tue 06 May 2014 10:22:10 AM JST
        # TODO: (Atami) [2014/05/06]

* Tue 06 May 2014 10:22:18 AM JST

* Tue 06 May 2014 10:22:18 AM JST

* Tue 06 May 2014 10:22:18 AM JST
# KLUDGE: (Atami) [2014/05/06]

* Tue 06 May 2014 10:27:03 AM JST
from cStringIO import StringIO as _StringIO
from struct import pack as _pack

from xcb2.xproto.define import EventMask
from xcb2.xconnection.wrapcore.sendevent.eventcode import EventCode
from xcb2.xconnection.wrapcore.sendevent.abstract import SendEventMethodAbstract


class KeyPress(SendEventMethodAbstract):
    r"""SUMMARY
    """
    def __init__(self, sendevent):
        r"""SUMMARY

        __init__(sendevent)

        @Arguments:
        - `sendevent`:

        @Return:
        """
        SendEventMethodAbstract.__init__(self, sendevent)

    def _send(self, propagate, destination, detail,
                       sequence_number, time, root, window, child,
                       root_x, root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY

        _clientmessage(format, sequence_number, window, atom, data)

        @Arguments:
        - `format`:
        - `sequence_number`:
        - `window`:
        - `atom`:
        - `data`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('2BH4I5HBx', EventCode.KeyPress, detail,
                        sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen))
        return self._sendevent(
            propagate, window, EventMask.KeyPress, buf.getvalue())

    def __call__(self, propagate, destination, detail,
                       sequence_number, time, root, window, child,
                       root_x, root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY

        __call__(format, sequence_number, window, atom, data)

        @Arguments:
        - `format`:
        - `sequence_number`:
        - `window`:
        - `atom`:
        - `data`:

        @Return:
        """
        return self._send(
            propagate, destination, detail, sequence_number, time,
            root, window, child, root_x, root_y, event_x, event_y, state,
            samescreen)

* Tue 06 May 2014 10:27:11 AM JST
Key
* Tue 06 May 2014 10:27:23 AM JST
Key
* Tue 06 May 2014 10:27:37 AM JST
Key
* Tue 06 May 2014 10:28:05 AM JST
from xcb2.xconnection.wrapcore.sendevent.keypress.keypress import KeyPress
* Tue 06 May 2014 10:28:13 AM JST
KeyPress
* Tue 06 May 2014 10:28:18 AM JST
keypress
* Tue 06 May 2014 10:28:18 AM JST
keypress.keypress
* Tue 06 May 2014 10:28:27 AM JST
ButtonPress
* Tue 06 May 2014 10:28:33 AM JST
KeyPress
* Tue 06 May 2014 10:29:07 AM JST

* Tue 06 May 2014 10:29:07 AM JST
KeyRelease
* Tue 06 May 2014 10:29:12 AM JST
keyrelease
* Tue 06 May 2014 10:30:34 AM JST

* Tue 06 May 2014 10:30:34 AM JST

* Tue 06 May 2014 10:30:34 AM JST
$0

* Tue 06 May 2014 10:31:35 AM JST
from cStringIO import StringIO as _StringIO
from struct import pack as _pack

from xcb2.xproto.define import EventMask
from xcb2.xconnection.wrapcore.sendevent.eventcode import EventCode
from xcb2.xconnection.wrapcore.sendevent.abstract import SendEventMethodAbstract


class ButtonPress(SendEventMethodAbstract):
    r"""SUMMARY
    """
    def __init__(self, sendevent):
        r"""SUMMARY

        __init__(sendevent)

        @Arguments:
        - `sendevent`:

        @Return:
        """
        SendEventMethodAbstract.__init__(self, sendevent)

    def _send(self, propagate, destination, detail,
                       sequence_number, time, root, window, child,
                       root_x, root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY

        _clientmessage(format, sequence_number, window, atom, data)

        @Arguments:
        - `format`:
        - `sequence_number`:
        - `window`:
        - `atom`:
        - `data`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('2BH4I5HBx', EventCode.ButtonPress, detail,
                        sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen))
        return self._sendevent(
            propagate, window, EventMask.ButtonPress, buf.getvalue())

    def __call__(self, propagate, destination, detail,
                       sequence_number, time, root, window, child,
                       root_x, root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY

        __call__(format, sequence_number, window, atom, data)

        @Arguments:
        - `format`:
        - `sequence_number`:
        - `window`:
        - `atom`:
        - `data`:

        @Return:
        """
        return self._send(
            propagate, destination, detail, sequence_number, time,
            root, window, child, root_x, root_y, event_x, event_y, state,
            samescreen)

* Tue 06 May 2014 10:31:49 AM JST
                   
* Tue 06 May 2014 10:31:51 AM JST
          
* Tue 06 May 2014 10:32:47 AM JST
ButtonRelease
* Tue 06 May 2014 10:32:57 AM JST
from xcb2.xconnection.wrapcore.sendevent.buttonpress.buttonpress import ButtonPress
* Tue 06 May 2014 10:33:03 AM JST
buttonpress
* Tue 06 May 2014 10:33:07 AM JST
buttonpress
* Tue 06 May 2014 10:33:10 AM JST
ButtonPress
* Tue 06 May 2014 10:33:18 AM JST
ButtonRelease
* Tue 06 May 2014 10:33:46 AM JST

* Tue 06 May 2014 10:33:57 AM JST

* Tue 06 May 2014 10:33:58 AM JST
ButtonPress
* Tue 06 May 2014 10:52:29 AM JST
0, 37748740, 10, 0, 0, 482, 37748740, 0,0,0,0,0,0,1
* Tue 06 May 2014 10:52:52 AM JST
c.core2.TesSendEvent.KeyPress(0, 37748740, 10, 0, 0, 482, 37748740, 0,0,0,0,0,0,1)
* Tue 06 May 2014 10:53:22 AM JST
c.core2.TesSendEvent.KeyPress(0, 37748740, 10, 0, 0, 482, 37748740, 0,0,0,0,0,0,1)
* Tue 06 May 2014 10:57:12 AM JST
from cStringIO import StringIO as _StringIO
from struct import pack as _pack

from xcb2.xproto.define import EventMask
from xcb2.xconnection.wrapcore.sendevent.eventcode import EventCode
from xcb2.xconnection.wrapcore.sendevent.abstract import SendEventMethodAbstract


class KeyPress(SendEventMethodAbstract):
    r"""SUMMARY
    """
    def __init__(self, sendevent):
        r"""SUMMARY

        __init__(sendevent)

        @Arguments:
        - `sendevent`:

        @Return:
        """
        SendEventMethodAbstract.__init__(self, sendevent)

    def _send(self, propagate, destination, detail,
                       sequence_number, time, root, window, child,
                       root_x, root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY

        _clientmessage(format, sequence_number, window, atom, data)

        @Arguments:
        - `format`:
        - `sequence_number`:
        - `window`:
        - `atom`:
        - `data`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('2BH4I5HBx', EventCode.KeyPress, detail,
                        sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen))
        return self._sendevent(
            propagate, window, EventMask.KeyPress, buf.getvalue())

    def __call__(self, propagate, destination, detail,
                       sequence_number, time, root, window, child,
                       root_x, root_y, event_x, event_y, state, samescreen):
        r"""SUMMARY

        __call__(format, sequence_number, window, atom, data)

        @Arguments:
        - `format`:
        - `sequence_number`:
        - `window`:
        - `atom`:
        - `data`:

        @Return:
        """
        return self._send(
            propagate, destination, detail, sequence_number, time,
            root, window, child, root_x, root_y, event_x, event_y, state,
            samescreen)



* Tue 06 May 2014 10:57:18 AM JST
KeyPress
* Tue 06 May 2014 10:57:23 AM JST
Motion
* Tue 06 May 2014 10:57:34 AM JST
                   
* Tue 06 May 2014 10:57:35 AM JST
          
* Tue 06 May 2014 10:57:46 AM JST
EventCode.MotionNotify
* Tue 06 May 2014 10:58:12 AM JST
KeyPress
* Tue 06 May 2014 10:59:13 AM JST
event_mask
* Tue 06 May 2014 10:59:44 AM JST

* Tue 06 May 2014 10:59:44 AM JST

* Tue 06 May 2014 10:59:44 AM JST
from xcb2.xproto.define import EventMask

* Tue 06 May 2014 11:14:01 AM JST
from xcb2.xconnection.wrapcore.sendevent.eventcode import EventCode
* Tue 06 May 2014 11:14:26 AM JST
Button
* Tue 06 May 2014 11:14:36 AM JST
from xcb2.xproto.define import EventMask
* Tue 06 May 2014 11:17:09 AM JST
MotionNotify
* Tue 06 May 2014 11:19:08 AM JST
detail,
              sequence_number, time, root, window, child,
              root_x, root_y, event_x, event_y, state, samescreen
* Tue 06 May 2014 11:19:13 AM JST
              
* Tue 06 May 2014 11:19:41 AM JST
              
* Tue 06 May 2014 11:21:47 AM JST
            
* Tue 06 May 2014 11:21:50 AM JST
            
* Tue 06 May 2014 11:21:52 AM JST
                        
* Tue 06 May 2014 11:22:14 AM JST
 propagate, destination, detail, sequence_number, time,
              root, window, child, root_x, root_y, event_x, event_y, state,
              samescreen
* Tue 06 May 2014 11:22:38 AM JST
propagate, destination, detail, sequence_number, time,
              root, window, child, root_x, root_y, event_x, event_y, state,
              samescreen
* Tue 06 May 2014 11:22:47 AM JST
              
* Tue 06 May 2014 11:22:54 AM JST
            
* Tue 06 May 2014 11:22:57 AM JST
            
* Tue 06 May 2014 11:24:09 AM JST
ButtonMotion
* Tue 06 May 2014 11:27:09 AM JST
class ButtonMotion(SendEventMethodAbstract):
    r"""SUMMARY
    """

    def _send(self, propagate, destination, detail, sequence_number, time,
              root, window, child, root_x, root_y, event_x, event_y, state,
              samescreen):
        r"""SUMMARY

        _send(propagate, destination, )

        @Arguments:
        - `propagate`:
        - `destination`:


        @Return:
        """
        return self._sendevent(
            propagate, destination, EventMask.ButtonMotion, detail,
            sequence_number, time, root, window, child, root_x, root_y,
            event_x, event_y, state, samescreen)

    def __call__(self,  propagate, destination, detail, sequence_number, time,
                 root, window, child, root_x, root_y, event_x, event_y, state,
                 samescreen):
        r"""SUMMARY

        __call__()

        @Return:
        """
        return self._send(
            propagate, destination, detail, sequence_number, time, root,
            window, child, root_x, root_y, event_x, event_y, state, samescreen)



* Tue 06 May 2014 11:28:12 AM JST
EventMask.ButtonMotion
* Tue 06 May 2014 11:29:54 AM JST
class Button2Motion(ButtonMotionAbstract):
    r"""SUMMARY
    """
    mask = EventMask.Button2Motion
    


* Tue 06 May 2014 11:30:40 AM JST

* Tue 06 May 2014 11:30:45 AM JST
        
* Tue 06 May 2014 11:30:52 AM JST
        
* Tue 06 May 2014 11:30:57 AM JST
        
* Tue 06 May 2014 11:36:25 AM JST

* Tue 06 May 2014 11:36:27 AM JST
Tes
* Tue 06 May 2014 11:37:56 AM JST
 as _SendEvent
* Tue 06 May 2014 11:38:09 AM JST

* Tue 06 May 2014 11:38:09 AM JST

* Tue 06 May 2014 11:38:09 AM JST
        # self.SendEvent = SendEvent(self.connection)

* Tue 06 May 2014 11:38:10 AM JST

* Tue 06 May 2014 11:38:10 AM JST

* Tue 06 May 2014 11:38:10 AM JST
        self.SendEvent = SendEvent(self.connection)

* Tue 06 May 2014 11:38:11 AM JST

* Tue 06 May 2014 11:38:11 AM JST

* Tue 06 May 2014 11:38:11 AM JST
        # self.TesSendEvent = _SendEvent(self.connection)

* Tue 06 May 2014 11:38:53 AM JST

* Tue 06 May 2014 11:38:53 AM JST

* Tue 06 May 2014 11:38:53 AM JST
# from xcb2.xconnection.wrapcore._sendevent import SendEvent

* Tue 06 May 2014 11:45:30 AM JST
SendEventChecked
* Tue 06 May 2014 11:46:02 AM JST
SendEventChecked
* Tue 06 May 2014 12:06:53 PM JST
37748740
* Tue 06 May 2014 12:35:47 PM JST
c.core2.TesGetProperty.WM_CLASS(37748740).reply().get_value()
* Tue 06 May 2014 12:36:16 PM JST
c.core2.TesGetProperty.WM
* Tue 06 May 2014 12:36:18 PM JST
c.core2.TesGetProperty.WM_CLASS(37748740).reply().get_value()
* Tue 06 May 2014 12:36:36 PM JST
get_value()
* Tue 06 May 2014 12:36:37 PM JST
reply().get_value()
* Tue 06 May 2014 12:36:37 PM JST
37748740).reply().get_value()
* Tue 06 May 2014 12:36:37 PM JST
WM_CLASS(37748740).reply().get_value()
* Tue 06 May 2014 12:43:21 PM JST
properties
* Tue 06 May 2014 12:43:31 PM JST
get
* Tue 06 May 2014 12:44:59 PM JST
self.connection.core2.TesGetProperty._NET_WM_NAME(self)
* Tue 06 May 2014 01:11:04 PM JST

* Tue 06 May 2014 01:11:04 PM JST

* Tue 06 May 2014 01:11:04 PM JST
    ## Get Properties #########################################################

* Tue 06 May 2014 01:11:04 PM JST
    ## Get Properties #########################################################

* Tue 06 May 2014 01:11:04 PM JST
    ## Get Properties #########################################################
    #

* Tue 06 May 2014 01:11:35 PM JST
Tes
* Tue 06 May 2014 01:11:36 PM JST
Tes
* Tue 06 May 2014 01:11:53 PM JST
Tes
* Tue 06 May 2014 01:12:36 PM JST
class WMCLASS(object):
    r"""SUMMARY
    """
    atomname = 'WM_CLASS'

    __slots__ = ('res_name', 'res_class')

    def __init__(self, res_name=None, res_class=None):
        r"""

        @Arguments:
        - `res_name`:
        - `res_class`:
        """
        self.res_name = res_name or ''
        self.res_class = res_class or ''

    def __contains__(self, other):
        return other in (self.res_name, self.res_class)

    def __iter__(self, ):
        return iter((self.res_name, self.res_class))

    def __repr__(self, ):
        fmt = ('{0.__class__.__name__}'
               '(res_name="{0.res_name}", res_class="{0.res_class}")').format
        return (fmt(self))



* Tue 06 May 2014 01:13:10 PM JST
        wmclass = self.getfullproperty(window, 'WM_CLASS')
        try: # 'xfdesktop\x00Xfdesktop\x00' => ['xfdesktop', 'Xfdesktop']
            return WMCLASS(*wmclass.split('\0')[:2])
        except TypeError as err:
            LOG.warning('Catched Error but skip: {}'.format(err))
            return WMCLASS()

* Tue 06 May 2014 01:13:41 PM JST
getfullproperty
* Tue 06 May 2014 01:13:45 PM JST
self.
* Tue 06 May 2014 01:14:15 PM JST
from xcb2.logger import LOG
* Tue 06 May 2014 01:14:26 PM JST
WMCLASS()
* Tue 06 May 2014 01:16:56 PM JST
properties
* Tue 06 May 2014 01:17:03 PM JST
get
* Tue 06 May 2014 01:18:51 PM JST
self.connection.core2.GetProperty._NET_WM_PID(self)
* Tue 06 May 2014 01:20:55 PM JST
.get_full_value()
* Tue 06 May 2014 01:23:24 PM JST
_NET_SHOWING_DESKTOP
* Tue 06 May 2014 01:23:41 PM JST
.get_full_value()
* Tue 06 May 2014 01:25:22 PM JST
.reply()
* Tue 06 May 2014 01:26:06 PM JST
.reply()
* Tue 06 May 2014 01:27:43 PM JST
from t1.listutil import get_first_index
* Tue 06 May 2014 01:27:56 PM JST
gfi
* Tue 06 May 2014 01:28:30 PM JST
.reply()
* Tue 06 May 2014 01:33:10 PM JST
GetFull
* Tue 06 May 2014 01:33:18 PM JST
self.connection.core2.GetProperty(self, property_, length)
* Tue 06 May 2014 01:33:50 PM JST
properties
* Tue 06 May 2014 01:34:27 PM JST
get
* Tue 06 May 2014 01:35:27 PM JST
gettypes()
* Tue 06 May 2014 01:39:16 PM JST

* Tue 06 May 2014 01:39:16 PM JST

* Tue 06 May 2014 01:39:18 PM JST

* Tue 06 May 2014 01:39:18 PM JST

* Tue 06 May 2014 01:39:18 PM JST
        print(types)

* Tue 06 May 2014 01:39:28 PM JST
from t1.listutil import get_first_index
* Tue 06 May 2014 01:39:38 PM JST
gfi
* Tue 06 May 2014 01:59:40 PM JST
c.core2.SendEvent.ClientMessage.net_wm_state.
* Tue 06 May 2014 01:59:42 PM JST
.core2.SendEvent.ClientMessage.net_wm_state.
* Tue 06 May 2014 02:00:00 PM JST

* Tue 06 May 2014 02:00:00 PM JST

* Tue 06 May 2014 02:00:00 PM JST
        self.connection.core2.SendEvent.ClientMessage.net_wm_state.maximize.

* Tue 06 May 2014 02:00:31 PM JST
        return (self.connection.core2.SendEvent
                .ClientMessage.net_wm_state.maximize.set(self))

* Tue 06 May 2014 02:00:45 PM JST
        return (self.connection.core2.SendEvent
                .ClientMessage.net_wm_state.maximize.unset(self))

* Tue 06 May 2014 02:00:48 PM JST
unset
* Tue 06 May 2014 02:00:56 PM JST
        return (self.connection.core2.SendEvent
                .ClientMessage.net_wm_state.maximize.toggle(self))

* Tue 06 May 2014 02:01:01 PM JST
maximize
* Tue 06 May 2014 02:01:07 PM JST
toggle
* Tue 06 May 2014 02:01:12 PM JST
        return (self.connection.core2.SendEvent
                .ClientMessage.net_wm_state.fullscreen.set(self))

* Tue 06 May 2014 02:01:21 PM JST
set
* Tue 06 May 2014 02:01:29 PM JST
        return (self.connection.core2.SendEvent
                .ClientMessage.net_wm_state.fullscreen.toggle(self))

* Tue 06 May 2014 02:01:34 PM JST
fullscreen
* Tue 06 May 2014 02:01:38 PM JST
toggle
* Tue 06 May 2014 02:01:41 PM JST
        return (self.connection.core2.SendEvent
                .ClientMessage.net_wm_state.below.set(self))

* Tue 06 May 2014 02:01:54 PM JST
set
* Tue 06 May 2014 02:02:03 PM JST
        return (self.connection.core2.SendEvent
                .ClientMessage.net_wm_state.below.toggle(self))

* Tue 06 May 2014 02:02:10 PM JST
below
* Tue 06 May 2014 02:02:13 PM JST
toggle
* Tue 06 May 2014 02:02:16 PM JST
        return (self.connection.core2.SendEvent
                .ClientMessage.net_wm_state.shade.set(self))

* Tue 06 May 2014 02:02:23 PM JST
        return (self.connection.core2.SendEvent
                .ClientMessage.net_wm_state.shade.unset(self))

* Tue 06 May 2014 02:02:27 PM JST
unset
* Tue 06 May 2014 02:02:45 PM JST
            
* Tue 06 May 2014 02:03:24 PM JST
core2.SendEvent.ClientMessage.net_close_window
* Tue 06 May 2014 02:04:38 PM JST
net_wm_state
* Tue 06 May 2014 02:04:52 PM JST
c.core2.SendEvent.ClientMessage.wm_protocols
* Tue 06 May 2014 02:05:19 PM JST
c.
* Tue 06 May 2014 02:08:05 PM JST
ConfigWindow(
* Tue 06 May 2014 02:14:32 PM JST

* Tue 06 May 2014 02:14:32 PM JST

* Tue 06 May 2014 02:14:32 PM JST
_revision__ = "$Revision$"

* Tue 06 May 2014 02:16:40 PM JST
from xcb2.xconnection.abstract import ConnectionAbstract
* Tue 06 May 2014 02:16:58 PM JST
from abc import ABCMeta, abstractmethod
* Tue 06 May 2014 02:17:12 PM JST
ConnectionAbstract.__init__(self, connection)
* Tue 06 May 2014 02:18:07 PM JST
ConfigureWindow
* Tue 06 May 2014 02:18:11 PM JST
KeyPress
* Tue 06 May 2014 02:20:17 PM JST
SendEvent?
* Tue 06 May 2014 02:20:25 PM JST
ConfigureWindowChecked
* Tue 06 May 2014 02:21:10 PM JST
    def _send(self, window, value_mask, value_list):
        r"""SUMMARY
        
        _send(window, value_mask, value_list)
        
        @Arguments:
        - `window`:
        - `value_mask`:
        - `value_list`:
        
        @Return:
        """
        return self.connection.core.ConfigureWindow(
            window, value_mask, value_list)

    def __call__(self, window, value_mask, value_list):
        r"""SUMMARY
        
        __call__(window, value_mask, value_list)
        
        @Arguments:
        - `window`:
        - `value_mask`:
        - `value_list`:
        
        @Return:
        """
        return self._send(window, value_mask, value_list)

* Tue 06 May 2014 02:21:18 PM JST
Checked
* Tue 06 May 2014 02:26:30 PM JST
xproto
* Tue 06 May 2014 02:26:32 PM JST
xproto
* Tue 06 May 2014 02:26:44 PM JST
ConfigWindow
* Tue 06 May 2014 02:26:48 PM JST
ConfigWindow
* Tue 06 May 2014 02:26:59 PM JST
ConfigWindow
* Tue 06 May 2014 02:28:11 PM JST
self.
* Tue 06 May 2014 02:28:33 PM JST
Stack
* Tue 06 May 2014 02:28:36 PM JST
ConfigWindow
* Tue 06 May 2014 02:28:39 PM JST
xproto
* Tue 06 May 2014 02:29:44 PM JST
class StackAbove(object):
    r"""SUMMARY
    """

    def __init__(self, sender):
        r"""

        @Arguments:
        - `sender`:
        """
        self._sender = sender

    def _send(self, window):
        r"""SUMMARY

        _send(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._sender(window, [xproto.StackMode.Above])

    def __call__(self, window):
        r"""SUMMARY

        __call__(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._send(window)



* Tue 06 May 2014 02:29:49 PM JST
Above
* Tue 06 May 2014 02:30:04 PM JST
StackAbove
* Tue 06 May 2014 02:32:00 PM JST
StackMode
* Tue 06 May 2014 02:32:54 PM JST
ConfigureWindow
* Tue 06 May 2014 02:32:59 PM JST
ConfigureWindowChecked
* Tue 06 May 2014 02:33:06 PM JST
ConfigureWindow, ConfigureWindowChecked
* Tue 06 May 2014 02:33:46 PM JST

* Tue 06 May 2014 02:33:48 PM JST
sendevent
* Tue 06 May 2014 02:33:54 PM JST
SendEvent, SendEventChecked
* Tue 06 May 2014 02:34:14 PM JST

* Tue 06 May 2014 02:34:14 PM JST

* Tue 06 May 2014 02:34:14 PM JST
from xcb2.xconnection.wrapcore.atomtype import AtomReplyTypes

* Tue 06 May 2014 02:36:35 PM JST
        
* Tue 06 May 2014 02:38:01 PM JST
50344153
* Tue 06 May 2014 02:38:42 PM JST
above
* Tue 06 May 2014 02:39:54 PM JST
    def stackabove(self, ):
        r"""SUMMARY
        
        stackabove()
        
        @Return:
        """
        return self.connection.core2.ConfigureWindow.stackmode.above(self)

* Tue 06 May 2014 02:40:03 PM JST
above
* Tue 06 May 2014 02:40:16 PM JST

* Tue 06 May 2014 02:40:16 PM JST

* Tue 06 May 2014 02:40:16 PM JST
        # return self.connection.destroywindow.close(self)

* Tue 06 May 2014 02:40:17 PM JST

* Tue 06 May 2014 02:40:18 PM JST

* Tue 06 May 2014 02:40:18 PM JST
        # return self.connection.destroywindow.delete(self)

* Tue 06 May 2014 02:40:19 PM JST

* Tue 06 May 2014 02:40:19 PM JST

* Tue 06 May 2014 02:40:19 PM JST
        # self.windowstate.setmaximize(self)

* Tue 06 May 2014 02:40:21 PM JST

* Tue 06 May 2014 02:40:21 PM JST

* Tue 06 May 2014 02:40:21 PM JST
        # self.windowstate.unsetmaximize(self)

* Tue 06 May 2014 02:40:24 PM JST

* Tue 06 May 2014 02:40:24 PM JST

* Tue 06 May 2014 02:40:24 PM JST
        # self.windowstate.togglemaximize(self)

* Tue 06 May 2014 02:40:25 PM JST

* Tue 06 May 2014 02:40:25 PM JST

* Tue 06 May 2014 02:40:25 PM JST
        # self.windowstate.setfullscreen(self)

* Tue 06 May 2014 02:40:27 PM JST

* Tue 06 May 2014 02:40:27 PM JST

* Tue 06 May 2014 02:40:27 PM JST
        # self.windowstate.unsetfullscreen(self)

* Tue 06 May 2014 02:40:29 PM JST

* Tue 06 May 2014 02:40:29 PM JST

* Tue 06 May 2014 02:40:29 PM JST
        # self.windowstate.togglefullscreen(self)

* Tue 06 May 2014 02:40:31 PM JST

* Tue 06 May 2014 02:40:31 PM JST

* Tue 06 May 2014 02:40:31 PM JST
        # self.windowstate.setbelow(self)

* Tue 06 May 2014 02:40:33 PM JST

* Tue 06 May 2014 02:40:33 PM JST

* Tue 06 May 2014 02:40:33 PM JST
        # self.windowstate.unsetbelow(self)

* Tue 06 May 2014 02:40:34 PM JST

* Tue 06 May 2014 02:40:35 PM JST

* Tue 06 May 2014 02:40:35 PM JST
        # self.windowstate.togglebelow(self)

* Tue 06 May 2014 02:40:36 PM JST

* Tue 06 May 2014 02:40:36 PM JST

* Tue 06 May 2014 02:40:36 PM JST
        # self.windowstate.setshade(self)

* Tue 06 May 2014 02:40:39 PM JST

* Tue 06 May 2014 02:40:39 PM JST

* Tue 06 May 2014 02:40:39 PM JST
        # self.windowstate.unsetshade(self)

* Tue 06 May 2014 02:40:41 PM JST

* Tue 06 May 2014 02:40:41 PM JST

* Tue 06 May 2014 02:40:41 PM JST
        # self.windowstate.toggleshade(self)

* Tue 06 May 2014 02:48:50 PM JST
50344153
* Tue 06 May 2014 02:50:02 PM JST
50344153
* Tue 06 May 2014 02:50:42 PM JST
read(
* Tue 06 May 2014 02:52:20 PM JST
'\xd90\x00\x03'
* Tue 06 May 2014 03:22:16 PM JST
73400323
* Tue 06 May 2014 03:26:45 PM JST
ConfigureWindowChecked
* Tue 06 May 2014 03:32:42 PM JST
    def EnterNotify(self, ):
        r"""SUMMARY

        EnterNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def EnterNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def LeaveNotify(self, ):
        r"""SUMMARY

        LeaveNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def LeaveNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def FocusIn(self, ):
        r"""SUMMARY

        FocusIn()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def FocusInChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def FocusOut(self, ):
        r"""SUMMARY

        FocusOut()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def FocusOutChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def KeymapNotify(self, ):
        r"""SUMMARY

        KeymapNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def KeymapNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def Expose(self, ):
        r"""SUMMARY

        Expose()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def ExposeChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def GraphicsExposure(self, ):
        r"""SUMMARY

        GraphicsExposure()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def GraphicsExposureChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def NoExposure(self, ):
        r"""SUMMARY

        NoExposure()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def NoExposureChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def VisibilityNotify(self, ):
        r"""SUMMARY

        VisibilityNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def VisibilityNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def CreateNotify(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def CreateNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def DestroyNotify(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def DestroyNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def UnmapNotify(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def UnmapNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def MapNotify(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def MapNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def MapRequest(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def MapRequestChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def ReparentNotify(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def ReparentNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def ConfigureNotify(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def ConfigureNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def ConfigureRequest(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def ConfigureRequestChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def GravityNotify(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def GravityNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def ResizeRequest(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def ResizeRequestChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def CirculateNotify(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def CirculateNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def CirculateRequest(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def CirculateRequestChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def PropertyNotify(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def PropertyNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def SelectionClear(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def SelectionClearChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def SelectionRequest(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def SelectionRequestChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def SelectionNotify(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def SelectionNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def ColormapNotify(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def ColormapNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def ClientMessage(self, format_, sequence_number, window, atom, data):
        r"""SUMMARY

        code 33
        CreateNotify()

        @Return:
        """
        buf = _StringIO()
        # TODO: (Atami) [2014/03/28] LOG
        # print(repr(data))
        buf.write(_pack('BBH2I', EventCode.ClientMessage, format_,
                        sequence_number, window, atom))
        buf.write(str(buffer(_array('b', data))))
        # TODO: (Atami) [2014/03/28] LOG
        return self.SendEvent(
            Propagate.FALSE, window, 0xffffff,
            # EventMask.NoEvent,
            buf.getvalue())

    def ClientMessageChecked(self, format_, sequence_number, window, atom, data):
        r"""SUMMARY

        ()

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('BBH2I', EventCode.ClientMessage, format_,
                        sequence_number, window, atom))
        buf.write(str(buffer(_array('b', data))))
        return self.SendEventChecked(
            Propagate.FALSE, window, 0xffffff,
            # EventMask.NoEvent,
            buf.getvalue())

    def MappingNotify(self, ):
        r"""SUMMARY

        CreateNotify()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

    def MappingNotifyChecked(self, ):
        r"""SUMMARY

        ()

        @Return:
        """
        # TODO: (Atami) [2014/03/27]
        raise NotImplementedError()

* Tue 06 May 2014 03:39:29 PM JST
73400323
* Tue 06 May 2014 03:41:28 PM JST
Window
* Tue 06 May 2014 03:42:16 PM JST
ClientMessage
* Tue 06 May 2014 03:44:53 PM JST
        return (self.connection.core2
                .SendEvent.ClientMessage.net_wm_state.above.set(self))

* Tue 06 May 2014 03:45:14 PM JST
set
* Tue 06 May 2014 03:45:57 PM JST
        return (self.connection.core2
                .SendEvent.ClientMessage.net_wm_state.above.toggle(self))

* Tue 06 May 2014 03:47:10 PM JST
list_states
* Tue 06 May 2014 03:47:38 PM JST
D 
* Tue 06 May 2014 03:47:55 PM JST
_atomname
* Tue 06 May 2014 03:49:42 PM JST
self._sender.getatom(self._atomname)
* Tue 06 May 2014 03:51:23 PM JST

* Tue 06 May 2014 03:51:24 PM JST

* Tue 06 May 2014 03:51:24 PM JST
        self.atom = self._sender.getatom(self._atomname)

* Tue 06 May 2014 03:52:43 PM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Tue 06 May 2014 03:52:47 PM JST

* Tue 06 May 2014 03:52:47 PM JST

* Tue 06 May 2014 03:52:47 PM JST
    _atomname2 = 

* Tue 06 May 2014 03:53:53 PM JST
self._atomname
* Tue 06 May 2014 03:54:39 PM JST

* Tue 06 May 2014 03:54:39 PM JST

* Tue 06 May 2014 03:54:39 PM JST
        self.atoms = [self._sender.getatom(x) for x in self._atomnames]

* Tue 06 May 2014 03:54:57 PM JST
self._basedata.setdata1(self.atoms[0])
* Tue 06 May 2014 03:55:07 PM JST
        
* Tue 06 May 2014 03:57:49 PM JST
eventdata.EventData5()
* Tue 06 May 2014 03:58:03 PM JST
eventdata.EventData5()
* Tue 06 May 2014 04:02:11 PM JST
73400323
* Tue 06 May 2014 04:03:29 PM JST
eventdata.EventData5(0, *self.atoms)
* Tue 06 May 2014 04:04:34 PM JST
abov
* Tue 06 May 2014 04:04:44 PM JST
73400323
* Tue 06 May 2014 04:05:34 PM JST

* Tue 06 May 2014 04:05:34 PM JST

* Tue 06 May 2014 04:05:34 PM JST
        # self._makedata()

* Tue 06 May 2014 04:07:03 PM JST
73400323)
* Tue 06 May 2014 04:09:00 PM JST
        states = self.list_states()
        atoms = self.connection.core2.SendEvent.ClientMessage.net_wm_state.above.atoms
        for atom in atoms:
            if atom in states:
                return True
        return False

* Tue 06 May 2014 04:09:03 PM JST

* Tue 06 May 2014 04:09:03 PM JST

* Tue 06 May 2014 04:09:03 PM JST
        return self.checkstate.isbelow(self)

* Tue 06 May 2014 04:09:10 PM JST
atoms
* Tue 06 May 2014 04:09:10 PM JST
above.atoms
* Tue 06 May 2014 04:09:24 PM JST
atoms
* Tue 06 May 2014 04:09:26 PM JST
above
* Tue 06 May 2014 04:10:29 PM JST
        states = self.list_states()
        atoms = self.connection.core2.SendEvent.ClientMessage.net_wm_state.isbelow.atoms
        for atom in atoms:
            if atom in states:
                return True
        return False

* Tue 06 May 2014 04:10:32 PM JST

* Tue 06 May 2014 04:10:32 PM JST

* Tue 06 May 2014 04:10:32 PM JST
        return self.checkstate.isfullscreen(self)

* Tue 06 May 2014 04:10:40 PM JST
isbelow
* Tue 06 May 2014 04:10:53 PM JST
        states = self.list_states()
        atoms = self.connection.core2.SendEvent.ClientMessage.net_wm_state.fullscreen.atoms
        for atom in atoms:
            if atom in states:
                return True
        return False

* Tue 06 May 2014 04:10:58 PM JST
fullscreen
* Tue 06 May 2014 04:11:08 PM JST
net_wm_state.
* Tue 06 May 2014 04:11:12 PM JST
net_close
* Tue 06 May 2014 04:11:14 PM JST
D c.core2.SendEvent.ClientMessage.net_close
* Tue 06 May 2014 04:23:17 PM JST

* Tue 06 May 2014 04:23:17 PM JST

* Tue 06 May 2014 04:23:17 PM JST
        # return (self.connection.core2

* Tue 06 May 2014 04:23:17 PM JST
        # return (self.connection.core2

* Tue 06 May 2014 04:23:17 PM JST
        # return (self.connection.core2
                # .SendEvent.ClientMessage.net_wm_state.above.toggle(self))

* Tue 06 May 2014 04:23:20 PM JST

* Tue 06 May 2014 04:23:20 PM JST

* Tue 06 May 2014 04:23:20 PM JST
        return self.checkstate.isabove(self)

* Tue 06 May 2014 04:23:22 PM JST

* Tue 06 May 2014 04:23:22 PM JST

* Tue 06 May 2014 04:23:23 PM JST
        # self.windowstate.toggleabove(self)

* Tue 06 May 2014 04:23:25 PM JST

* Tue 06 May 2014 04:23:25 PM JST

* Tue 06 May 2014 04:23:25 PM JST
        # self.windowstate.unsetabove(self)

* Tue 06 May 2014 04:23:27 PM JST

* Tue 06 May 2014 04:23:27 PM JST

* Tue 06 May 2014 04:23:27 PM JST
        # self.windowstate.setabove(self)

* Tue 06 May 2014 04:38:30 PM JST
Get_NET_WM_STATE
* Tue 06 May 2014 04:39:43 PM JST
SendE
* Tue 06 May 2014 04:39:43 PM JST
core2.SendE
* Tue 06 May 2014 04:40:00 PM JST
isabove()
* Tue 06 May 2014 04:41:00 PM JST
    def isshade(self, ):
        r"""SUMMARY

        isshade()

        @Return:
        """
        states = self.list_states()
        atoms = self.connection.core2.SendEvent.ClientMessage.net_wm_state.shade.atoms
        for atom in atoms:
            if atom in states:
                return True
        return False

* Tue 06 May 2014 04:41:22 PM JST
shade
* Tue 06 May 2014 05:04:12 PM JST

* Tue 06 May 2014 05:04:13 PM JST

* Tue 06 May 2014 05:04:13 PM JST
from xcb2.xproto import define

* Tue 06 May 2014 05:04:20 PM JST

* Tue 06 May 2014 05:04:20 PM JST

* Tue 06 May 2014 05:04:20 PM JST
import sys

* Tue 06 May 2014 05:06:09 PM JST

* Tue 06 May 2014 05:06:09 PM JST

* Tue 06 May 2014 05:06:09 PM JST
from xcb2.xconnection.properties import Properties

* Tue 06 May 2014 05:06:09 PM JST
from xcb2.xconnection.properties import Properties

* Tue 06 May 2014 05:06:09 PM JST
from xcb2.xconnection.properties import Properties
from xcb2.xconnection.clientmessage import WindowState, CheckState, DestroyWindow

* Tue 06 May 2014 05:07:35 PM JST
connection
* Tue 06 May 2014 05:07:38 PM JST
connection.
* Tue 06 May 2014 05:07:49 PM JST
connection.
* Tue 06 May 2014 05:08:44 PM JST
                
* Tue 06 May 2014 05:08:49 PM JST
                
* Tue 06 May 2014 05:08:55 PM JST
                
* Tue 06 May 2014 05:09:01 PM JST
                
* Tue 06 May 2014 05:09:10 PM JST
                
* Tue 06 May 2014 05:09:17 PM JST
               
* Tue 06 May 2014 05:09:35 PM JST
                
* Tue 06 May 2014 05:09:39 PM JST
                
* Tue 06 May 2014 05:09:44 PM JST
                
* Tue 06 May 2014 05:10:21 PM JST
        
* Tue 06 May 2014 05:10:28 PM JST
                
* Tue 06 May 2014 05:59:00 PM JST
core
* Tue 06 May 2014 05:59:00 PM JST
c.core
* Tue 06 May 2014 06:12:29 PM JST
from xcb2.xconnection.abstract import ConnectionAbstract
* Tue 06 May 2014 06:12:51 PM JST
ConnectionAbstract.__init__(self, connection)
* Tue 06 May 2014 06:14:20 PM JST
from abc import ABCMeta, abstractmethod
* Tue 06 May 2014 06:14:27 PM JST
from xcb2.xconnection.wrapcore.atom import AtomIdentifier
* Tue 06 May 2014 06:14:50 PM JST
self.getatom = AtomIdentifier(self.connection)
* Tue 06 May 2014 06:15:11 PM JST
    @abstractmethod
    def __call__(self, delete, window, property_, offset=0, length=10):
        raise StandardError()

* Tue 06 May 2014 06:16:09 PM JST
class
* Tue 06 May 2014 06:18:01 PM JST
ListPropertiesUnchecked
* Tue 06 May 2014 06:30:48 PM JST
73400323
* Tue 06 May 2014 06:40:58 PM JST
reply = 
* Tue 06 May 2014 06:41:18 PM JST

* Tue 06 May 2014 06:41:19 PM JST
AtomIdentifier
* Tue 06 May 2014 06:41:36 PM JST
WrapListPropertyReply
* Tue 06 May 2014 06:42:27 PM JST
WrapListPropertyCookie
* Tue 06 May 2014 06:44:41 PM JST
class WrapListPropertyCookie(object):
    r"""SUMMARY
    """

    def __init__(self, connection, cookie):
        r"""

        @Arguments:
        - `connection`:
        - `cookie`:
        """
        self._connection = connection
        self._cookie = cookie

    def check(self, ):
        r"""SUMMARY

        check()

        @Return:
        """
        return self._cookie.check()

    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:
        """
        return WrapListPropertyReply(self._connection, self._cookie.reply())



* Tue 06 May 2014 06:44:50 PM JST
from xcb2.xconnection.wrapcore.wrapreply import WrapListPropertyReply
* Tue 06 May 2014 06:44:58 PM JST
WrapListPropertyReply
* Tue 06 May 2014 06:45:00 PM JST
wrapreply import 
* Tue 06 May 2014 06:45:04 PM JST
wrapreply
* Tue 06 May 2014 06:45:08 PM JST
wrapreply
* Tue 06 May 2014 06:47:57 PM JST
coo=c.core.ListProperties(73400323)
* Tue 06 May 2014 06:49:24 PM JST
import xcb2
c=xcb2.connect()
coo=c.core.ListProperties(73400323)

* Tue 06 May 2014 06:51:33 PM JST
ListProperties
* Tue 06 May 2014 06:52:04 PM JST

* Tue 06 May 2014 06:52:26 PM JST
import xcb2
c=xcb2.connect()
coo=c.core.ListProperties(73400323)

* Tue 06 May 2014 06:53:12 PM JST
c=xcb2.connect()
* Tue 06 May 2014 06:53:49 PM JST
            
* Tue 06 May 2014 06:53:52 PM JST
            
* Tue 06 May 2014 06:54:27 PM JST
        return WrapListPropertyCookie(
            self._sender.connection,
            self._sender.connection.ListProperties(window))

* Tue 06 May 2014 06:54:36 PM JST
ListPropertiesUnchecked
* Tue 06 May 2014 06:54:40 PM JST

* Tue 06 May 2014 06:54:40 PM JST

* Tue 06 May 2014 06:54:40 PM JST
        return self.connection.ListPropertiesUnchecked(window)

* Tue 06 May 2014 06:55:28 PM JST
connection
* Tue 06 May 2014 06:55:58 PM JST
_sender.
* Tue 06 May 2014 06:56:01 PM JST
_sender.
* Tue 06 May 2014 06:56:08 PM JST
connection
* Tue 06 May 2014 06:56:11 PM JST
_sender.
* Tue 06 May 2014 06:56:17 PM JST
_sender
* Tue 06 May 2014 06:56:19 PM JST
            
* Tue 06 May 2014 06:56:25 PM JST
            
* Tue 06 May 2014 06:56:28 PM JST
            
* Tue 06 May 2014 06:56:49 PM JST
import xcb2
c=xcb2.connect()
coo=c.core.ListProperties(73400323)

* Tue 06 May 2014 06:57:01 PM JST
coo=c.core2.ListProperties(73400323)
* Tue 06 May 2014 06:59:44 PM JST
AtomIdentifier(self.connection)
* Tue 06 May 2014 07:00:06 PM JST
from xcb2.xconnection.wrapcore.atom import AtomIdentifier
* Tue 06 May 2014 07:00:23 PM JST
getatom
* Tue 06 May 2014 07:01:02 PM JST
import xcb2
c=xcb2.connect()
coo=c.core2.ListProperties(73400323)

* Tue 06 May 2014 10:20:31 PM JST

* Tue 06 May 2014 10:20:31 PM JST

* Tue 06 May 2014 10:20:31 PM JST
from t1.listutil import get_first_index as gfi

* Tue 06 May 2014 10:21:02 PM JST
coo=c.core2.ListProperties(73400323)
* Tue 06 May 2014 11:37:19 PM JST
from ref.CMD import sikuli
* Wed 07 May 2014 12:23:30 AM JST
from abc import ABCMeta, abstractmethod

from xcb2.xconnection.wrapcore.atom import AtomIdentifier
from xcb2.xconnection.wrapcore.wrapcookie import WrapListPropertyCookie
from xcb2.xconnection.abstract import ConnectionAbstract

* Wed 07 May 2014 12:23:40 AM JST
class ListPropertiesAbstract(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)
        self.getatom = AtomIdentifier(self.connection)

    @abstractmethod
    def __call__(self, window):
        raise StandardError()

* Wed 07 May 2014 12:23:48 AM JST

* Wed 07 May 2014 12:23:49 AM JST

* Wed 07 May 2014 12:23:49 AM JST
        self.getatom = AtomIdentifier(self.connection)

* Wed 07 May 2014 12:23:56 AM JST
ListProperties
* Wed 07 May 2014 12:24:11 AM JST
class ListProperties(ListPropertiesAbstract):
    r"""SUMMARY
    """

    def _send(self, window):
        r"""SUMMARY

        _send(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return WrapListPropertyCookie(
            self.connection, self.connection.core.ListProperties(window))

    def __call__(self, window):
        r"""SUMMARY

        __call__(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._send(window)


class ListPropertiesUnchecked(ListPropertiesAbstract):
    r"""SUMMARY
    """

    def _send(self, window):
        r"""SUMMARY

        _send(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return WrapListPropertyCookie(
            self.connection, self.connection.core.ListPropertiesUnchecked(window))

    def __call__(self, window):
        r"""SUMMARY

        __call__(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._send(window)

* Wed 07 May 2014 12:24:18 AM JST
List
* Wed 07 May 2014 12:24:26 AM JST
ListProperties
* Wed 07 May 2014 12:24:41 AM JST
mode, window, property, type, format, data_len, data
* Wed 07 May 2014 12:25:15 AM JST
ListProperties
* Wed 07 May 2014 12:25:24 AM JST
WrapListPropertyCookie(
* Wed 07 May 2014 12:25:26 AM JST
            
* Wed 07 May 2014 12:25:30 AM JST
connection, 
* Wed 07 May 2014 12:25:31 AM JST
self.connection, 
* Wed 07 May 2014 12:26:05 AM JST
class ChangeProperty(ChangePropertyAbstract):
    r"""SUMMARY
    """

    def _send(self, mode, window, property, type, format, data_len, data):
        r"""SUMMARY

        _send(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.ChangeProperty(
            mode, window, property, type, format, data_len, data)

    def __call__(self, mode, window, property, type, format, data_len, data):
        r"""SUMMARY

        __call__(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._send(mode, window, property, type, format, data_len, data)

* Wed 07 May 2014 12:26:32 AM JST
Checked
* Wed 07 May 2014 12:27:00 AM JST
mode, window, property, type, format, data_len, data
* Wed 07 May 2014 12:27:30 AM JST
    def __call__(self, mode, window, property, type, format, data_len, data):
        r"""SUMMARY

        __call__(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._send(mode, window, property, type, format, data_len, data)

* Wed 07 May 2014 12:29:27 AM JST

* Wed 07 May 2014 12:29:27 AM JST

* Wed 07 May 2014 12:29:27 AM JST
from xcb2.xconnection.wrapcore.atom import AtomIdentifier

* Wed 07 May 2014 12:29:27 AM JST
from xcb2.xconnection.wrapcore.atom import AtomIdentifier

* Wed 07 May 2014 12:29:27 AM JST
from xcb2.xconnection.wrapcore.atom import AtomIdentifier
from xcb2.xconnection.wrapcore.wrapcookie import WrapListPropertyCookie

* Wed 07 May 2014 12:30:27 AM JST
ChangeProperty
* Wed 07 May 2014 12:35:56 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract

* Wed 07 May 2014 12:36:05 AM JST
class ChangePropertyAbstract(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _send(self, mode, window, property, type, format, data_len, data):
        raise StandardError()

    def __call__(self, mode, window, property, type, format, data_len, data):
        r"""SUMMARY

        __call__(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._send(mode, window, property, type, format, data_len, data)


class ChangePropertyChecked(ChangePropertyAbstract):
    r"""SUMMARY
    """

    def _send(self, mode, window, property, type, format, data_len, data):
        r"""SUMMARY

        _send(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.ChangeProperty(
            mode, window, property, type, format, data_len, data)


class ChangeProperty(ChangePropertyAbstract):
    r"""SUMMARY
    """

    def _send(self, mode, window, property, type, format, data_len, data):
        r"""SUMMARY

        _send(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.ChangePropertyChecked(
            mode, window, property, type, format, data_len, data)

* Wed 07 May 2014 12:36:15 AM JST
ChangeProperty
* Wed 07 May 2014 12:36:44 AM JST
window, property
* Wed 07 May 2014 12:37:37 AM JST
            
* Wed 07 May 2014 12:37:43 AM JST
Change
* Wed 07 May 2014 12:37:50 AM JST
            
* Wed 07 May 2014 12:38:07 AM JST
Change
* Wed 07 May 2014 12:38:10 AM JST
Change
* Wed 07 May 2014 12:38:17 AM JST
Change
* Wed 07 May 2014 12:38:32 AM JST
Checked
* Wed 07 May 2014 12:38:34 AM JST
Checked
* Wed 07 May 2014 12:38:46 AM JST
Checked
* Wed 07 May 2014 12:40:28 AM JST
from xcb2.xconnection.wrapcore.changeproperty import (ChangeProperty,
                                                      ChangePropertyChecked)

* Wed 07 May 2014 12:40:32 AM JST
change
* Wed 07 May 2014 12:40:35 AM JST
Change
* Wed 07 May 2014 12:40:39 AM JST
Change
* Wed 07 May 2014 12:47:00 AM JST
_send
* Wed 07 May 2014 12:47:35 AM JST
_getcookie
* Wed 07 May 2014 12:55:46 AM JST
from abc import ABCMeta, abstractmethod
* Wed 07 May 2014 12:57:05 AM JST
world
* Wed 07 May 2014 01:02:03 AM JST
connection
* Wed 07 May 2014 01:02:03 AM JST
self.connection
* Wed 07 May 2014 09:29:15 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class ChangePropertyAbstract(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, mode, window, property, type, format, data_len, data):
        raise StandardError()

    def __call__(self, mode, window, property, type, format, data_len, data):
        r"""SUMMARY

        __call__(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie(
            mode, window, property, type, format, data_len, data)


class ChangeProperty(ChangePropertyAbstract):
    r"""SUMMARY
    """

    def _getcookie(self, mode, window, property, type, format, data_len, data):
        r"""SUMMARY

        _getcookie(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.ChangeProperty(
            mode, window, property, type, format, data_len, data)


class ChangePropertyChecked(ChangePropertyAbstract):
    r"""SUMMARY
    """

    def _getcookie(self, mode, window, property, type, format, data_len, data):
        r"""SUMMARY

        _getcookie(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.ChangePropertyChecked(
            mode, window, property, type, format, data_len, data)

* Wed 07 May 2014 09:29:30 AM JST
ChangeProperty
* Wed 07 May 2014 09:29:46 AM JST
            
* Wed 07 May 2014 09:29:53 AM JST
ChangeProperty
* Wed 07 May 2014 09:29:55 AM JST
ChangeProperty
* Wed 07 May 2014 09:30:06 AM JST
            
* Wed 07 May 2014 09:30:09 AM JST
ChangeProperty
* Wed 07 May 2014 09:30:13 AM JST
ChangeProperty
* Wed 07 May 2014 09:30:39 AM JST
ChangeProperty
* Wed 07 May 2014 09:30:41 AM JST
Checked
* Wed 07 May 2014 09:30:43 AM JST
            
* Wed 07 May 2014 09:30:47 AM JST
Checked
* Wed 07 May 2014 09:30:53 AM JST
window
* Wed 07 May 2014 09:31:11 AM JST
$2
* Wed 07 May 2014 09:31:52 AM JST
$3
* Wed 07 May 2014 09:33:42 AM JST
$1
* Wed 07 May 2014 09:33:44 AM JST

* Wed 07 May 2014 09:33:45 AM JST

* Wed 07 May 2014 09:33:45 AM JST
class $1$2($1Abstract):

* Wed 07 May 2014 09:39:25 AM JST
yas/indent-line
* Wed 07 May 2014 09:39:41 AM JST
(setq yas/indent-line 'fixed)
* Wed 07 May 2014 09:43:41 AM JST
${1:}
* Wed 07 May 2014 09:46:57 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class ${1:name}Abstract(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, ${3:args}):
        raise StandardError()

    def __call__(self, $3):
        r"""SUMMARY

        __call__(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($3)


class $1($1Abstract):
    r"""SUMMARY
    """

    def _getcookie(self, $3):
        r"""SUMMARY

        _getcookie(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.$1($3)


class $1$2($1Abstract):
    r"""SUMMARY
    """

    def _getcookie(self, $3):
        r"""SUMMARY

        _getcookie($3)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.$1$2($3)

* Wed 07 May 2014 09:48:46 AM JST
name}
* Wed 07 May 2014 09:50:32 AM JST
args}
* Wed 07 May 2014 09:51:31 AM JST
string
* Wed 07 May 2014 09:52:13 AM JST
(replace-string "Abstract" "")
* Wed 07 May 2014 09:56:08 AM JST
s-replace
* Wed 07 May 2014 09:57:22 AM JST
Abstract
* Wed 07 May 2014 09:59:04 AM JST
${1:$(s-replace "Abstract" "" text)
* Wed 07 May 2014 10:00:05 AM JST
$5
* Wed 07 May 2014 10:02:41 AM JST
}
* Wed 07 May 2014 10:04:31 AM JST
1
* Wed 07 May 2014 10:04:34 AM JST
$1
* Wed 07 May 2014 10:08:56 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)



* Wed 07 May 2014 10:10:51 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)



* Wed 07 May 2014 10:12:03 AM JST
SetInputFocus?
* Wed 07 May 2014 10:19:47 AM JST
QueryTree                      
* Wed 07 May 2014 10:20:17 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)



* Wed 07 May 2014 10:23:06 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class ${1:name}Abstract(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, ${3:args}):
        raise StandardError()

    def __call__(self, $3):
        r"""SUMMARY

        __call__(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($3)


class $1($1Abstract):
    r"""SUMMARY
    """

    def _getcookie(self, $3):
        r"""SUMMARY

        _getcookie(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.$1($3)


class $1$2($1Abstract):
    r"""SUMMARY
    """

    def _getcookie(self, $3):
        r"""SUMMARY

        _getcookie($3)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.$1$2($3)

* Wed 07 May 2014 10:23:24 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)



* Wed 07 May 2014 10:25:57 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)



* Wed 07 May 2014 10:27:13 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class ${1:name}Abstract(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, ${3:args}):
        raise StandardError()

    def __call__(self, $3):
        r"""SUMMARY

        __call__(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($3)


class $1($1Abstract):
    r"""SUMMARY
    """

    def _getcookie(self, $3):
        r"""SUMMARY

        _getcookie(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.$1($3)


class $1$2($1Abstract):
    r"""SUMMARY
    """

    def _getcookie(self, $3):
        r"""SUMMARY

        _getcookie($3)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.$1$2($3)

* Wed 07 May 2014 10:27:28 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)



* Wed 07 May 2014 10:27:37 AM JST
UngrabKey?
* Wed 07 May 2014 10:27:44 AM JST
owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers
* Wed 07 May 2014 10:55:06 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)



* Wed 07 May 2014 10:55:43 AM JST
button, grab_window, modifiers
* Wed 07 May 2014 10:56:57 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)



* Wed 07 May 2014 10:57:08 AM JST
UngrabButton?
* Wed 07 May 2014 10:58:09 AM JST
GetGeometry?
* Wed 07 May 2014 10:58:40 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)



* Wed 07 May 2014 10:58:55 AM JST
window, value_mask, value_list
* Wed 07 May 2014 11:00:13 AM JST
from xcb2.xconnection.wrapcore.deleteproperty import (DeleteProperty,
                                                      DeletePropertyChecked)

* Wed 07 May 2014 11:00:17 AM JST
deleteproperty
* Wed 07 May 2014 11:00:24 AM JST
DeleteProperty
* Wed 07 May 2014 11:00:35 AM JST
    
* Wed 07 May 2014 11:00:48 AM JST
ChangeWindowAttributes
* Wed 07 May 2014 11:01:15 AM JST
        
* Wed 07 May 2014 11:01:43 AM JST
from xcb2.xconnection.wrapcore.changewindowattributes import (
    ChangeWindowAttributes, ChangeWindowAttributesChecked)

* Wed 07 May 2014 11:01:46 AM JST
changewindowattributes
* Wed 07 May 2014 11:01:54 AM JST
ChangeWindowAttributes
* Wed 07 May 2014 11:02:05 AM JST
    
* Wed 07 May 2014 11:02:30 AM JST
        
* Wed 07 May 2014 11:09:43 AM JST
from xcb2.xconnection.wrapcore.getgeometry import (GetGeometry,
                                                   GetGeometryUnchecked)

* Wed 07 May 2014 11:09:46 AM JST
getgeometry
* Wed 07 May 2014 11:09:58 AM JST
GetGeometry
* Wed 07 May 2014 11:10:10 AM JST
UngrabButton
* Wed 07 May 2014 11:10:24 AM JST
        
* Wed 07 May 2014 11:35:27 AM JST
from xcb2.xconnection.wrapcore.ungrabbutton import (UngrabButton,
                                                    UngrabButtonChecked)

* Wed 07 May 2014 11:35:33 AM JST
Ung
* Wed 07 May 2014 11:35:36 AM JST
Ung
* Wed 07 May 2014 11:35:40 AM JST
        
* Wed 07 May 2014 11:35:43 AM JST
GrabButton
* Wed 07 May 2014 11:36:00 AM JST
        
* Wed 07 May 2014 11:36:35 AM JST
from xcb2.xconnection.wrapcore.grabbutton import (GrabButton,
                                                  GrabButtonChecked)

* Wed 07 May 2014 11:36:52 AM JST
                                                  
* Wed 07 May 2014 11:36:54 AM JST
GrabKey
* Wed 07 May 2014 11:37:08 AM JST
        
* Wed 07 May 2014 11:37:27 AM JST
from xcb2.xconnection.wrapcore.grabkey import (GrabKey, GrabKeyChecked)
* Wed 07 May 2014 11:38:00 AM JST
        
* Wed 07 May 2014 11:38:30 AM JST

* Wed 07 May 2014 11:38:33 AM JST
ungrabkey
* Wed 07 May 2014 11:38:39 AM JST
(UngrabKey, UngrabKeyChecked)
* Wed 07 May 2014 11:39:29 AM JST
QueryTreeUnchecked
* Wed 07 May 2014 11:40:25 AM JST

* Wed 07 May 2014 11:40:27 AM JST
querytree
* Wed 07 May 2014 11:40:34 AM JST
QueryTree
* Wed 07 May 2014 11:40:38 AM JST
QueryTreeUnchecked
* Wed 07 May 2014 11:40:47 AM JST

* Wed 07 May 2014 11:41:05 AM JST
        
* Wed 07 May 2014 11:41:30 AM JST
from xcb2.xconnection.wrapcore.setinputfocus import SetInputFocus, SetInputFocusChecked

* Wed 07 May 2014 11:41:34 AM JST
setinputfocus
* Wed 07 May 2014 11:42:05 AM JST
        
* Wed 07 May 2014 11:57:28 AM JST
WrapCookieAbstract
* Wed 07 May 2014 11:58:14 AM JST
73400323
* Wed 07 May 2014 12:00:27 PM JST
WrapGetGeometryReply
* Wed 07 May 2014 12:07:21 PM JST
WrapGetGeometry
* Wed 07 May 2014 12:10:24 PM JST
from xcb2.xconnection.geometry import WindowGeometry
* Wed 07 May 2014 12:12:44 PM JST
core2.
* Wed 07 May 2014 12:14:29 PM JST
self.connection.core2.GetGeometry(self)
* Wed 07 May 2014 12:14:42 PM JST
self.connection.core2.GetGeometry(self)
* Wed 07 May 2014 12:15:14 PM JST
from xcb2.xconnection.geometry import WindowGeometry
* Wed 07 May 2014 12:16:12 PM JST
core
* Wed 07 May 2014 12:16:18 PM JST
active_win
* Wed 07 May 2014 12:16:47 PM JST

* Wed 07 May 2014 12:16:47 PM JST

* Wed 07 May 2014 12:16:47 PM JST
# from xcb2.xconnection.wrapcore.wrapreply import WrapGetGeometryReply

* Wed 07 May 2014 12:16:47 PM JST
# from xcb2.xconnection.wrapcore.wrapreply import WrapGetGeometryReply

* Wed 07 May 2014 12:16:47 PM JST
# from xcb2.xconnection.wrapcore.wrapreply import WrapGetGeometryReply
# from xcb2.xconnection.geometry import WindowGeometry

* Wed 07 May 2014 12:28:36 PM JST
Focus
* Wed 07 May 2014 12:32:03 PM JST
InputFocusPointerRoot
* Wed 07 May 2014 12:33:05 PM JST
sender
* Wed 07 May 2014 12:33:12 PM JST

* Wed 07 May 2014 12:33:14 PM JST
cookier
* Wed 07 May 2014 12:38:07 PM JST
73400323
* Wed 07 May 2014 12:38:49 PM JST
SetInputFocusPointerRoot
* Wed 07 May 2014 12:44:28 PM JST
73400323
* Wed 07 May 2014 01:07:39 PM JST
self.connection, 
* Wed 07 May 2014 01:07:39 PM JST
            self.connection, 
* Wed 07 May 2014 01:07:40 PM JST
WindowGeometry(
* Wed 07 May 2014 01:07:41 PM JST
id)
* Wed 07 May 2014 01:07:42 PM JST
window.id)
* Wed 07 May 2014 01:08:32 PM JST
73400323
* Wed 07 May 2014 01:19:19 PM JST
renam
* Wed 07 May 2014 01:19:20 PM JST
rope-renam
* Wed 07 May 2014 01:19:57 PM JST
WrapGetGeometryCookie
* Wed 07 May 2014 01:20:16 PM JST
    def check(self, ):
        r"""SUMMARY

        check()

        @Return:
        """
        return self._cookie.check()

    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:
        """
        return wrapreply.WrapGetGeometryReply(
            self._connection, self._cookie.reply())

* Wed 07 May 2014 01:20:42 PM JST
73400323
* Wed 07 May 2014 01:20:49 PM JST
reply()
* Wed 07 May 2014 01:22:24 PM JST
return WindowRootType(Window(self.connection, self._raw.root))
* Wed 07 May 2014 01:22:51 PM JST
Window(self.connection, self._raw.root).get_types()
* Wed 07 May 2014 01:23:10 PM JST
root
* Wed 07 May 2014 01:23:17 PM JST
parent
* Wed 07 May 2014 01:26:44 PM JST
WrapQueryTreeReply
* Wed 07 May 2014 01:27:09 PM JST
            
* Wed 07 May 2014 01:34:12 PM JST
from xcb2.xconnection.wrapcore.wrapcookie import WrapGetGeometryCookie
* Wed 07 May 2014 01:34:15 PM JST
WrapGetGeometryCookie
* Wed 07 May 2014 01:34:29 PM JST
WrapQueryTreeCookie
* Wed 07 May 2014 04:23:13 PM JST
/usr/local/bin/pythoscope
* Wed 07 May 2014 05:14:56 PM JST
73400323
* Wed 07 May 2014 05:16:23 PM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)



* Wed 07 May 2014 05:22:09 PM JST
window
* Wed 07 May 2014 05:22:10 PM JST
xconnection.window
* Wed 07 May 2014 05:22:10 PM JST
xcb2.xconnection.window
* Wed 07 May 2014 05:22:26 PM JST
wrapcore
* Wed 07 May 2014 05:22:27 PM JST
xconnection.wrapcore
* Wed 07 May 2014 05:22:27 PM JST
xcb2.xconnection.wrapcore
* Wed 07 May 2014 05:22:30 PM JST
wrapcore
* Wed 07 May 2014 05:22:31 PM JST
xconnection.wrapcore
* Wed 07 May 2014 05:22:31 PM JST
xcb2.xconnection.wrapcore
* Wed 07 May 2014 05:22:34 PM JST
wrapcore
* Wed 07 May 2014 05:22:34 PM JST
xconnection.wrapcore
* Wed 07 May 2014 05:22:34 PM JST
xcb2.xconnection.wrapcore
* Wed 07 May 2014 05:22:38 PM JST
wrapcore
* Wed 07 May 2014 05:22:38 PM JST
xconnection.wrapcore
* Wed 07 May 2014 05:22:38 PM JST
xcb2.xconnection.wrapcore
* Wed 07 May 2014 05:23:22 PM JST
     
* Wed 07 May 2014 05:23:45 PM JST
getproperty
* Wed 07 May 2014 05:23:59 PM JST
getproperty
* Wed 07 May 2014 05:24:39 PM JST
sendevent
* Wed 07 May 2014 05:24:58 PM JST
configurewindow
* Wed 07 May 2014 05:25:04 PM JST
                          ConfigureWindowChecked)
* Wed 07 May 2014 05:25:07 PM JST
configurewindow
* Wed 07 May 2014 05:25:24 PM JST
listproperties
* Wed 07 May 2014 05:25:29 PM JST
                          ListPropertiesUnchecked)
* Wed 07 May 2014 05:25:32 PM JST
listproperties
* Wed 07 May 2014 05:25:45 PM JST
changeproperty
* Wed 07 May 2014 05:25:54 PM JST
wrapcore
* Wed 07 May 2014 05:25:54 PM JST
xconnection.wrapcore
* Wed 07 May 2014 05:25:54 PM JST
xcb2.xconnection.wrapcore
* Wed 07 May 2014 05:25:58 PM JST

* Wed 07 May 2014 05:25:58 PM JST

* Wed 07 May 2014 05:25:58 PM JST
                                                      ChangePropertyChecked)

* Wed 07 May 2014 05:26:02 PM JST
wrapcore.
* Wed 07 May 2014 05:26:03 PM JST
xconnection.wrapcore.
* Wed 07 May 2014 05:26:03 PM JST
xcb2.xconnection.wrapcore.
* Wed 07 May 2014 05:26:04 PM JST
deleteproperty
* Wed 07 May 2014 05:26:11 PM JST

* Wed 07 May 2014 05:26:11 PM JST

* Wed 07 May 2014 05:26:11 PM JST
                                                      DeletePropertyChecked)

* Wed 07 May 2014 05:26:22 PM JST
changewindowattributes
* Wed 07 May 2014 05:26:27 PM JST
wrapcore
* Wed 07 May 2014 05:26:27 PM JST
xconnection.wrapcore
* Wed 07 May 2014 05:26:27 PM JST
xcb2.xconnection.wrapcore
* Wed 07 May 2014 05:26:34 PM JST
getgeometry
* Wed 07 May 2014 05:26:42 PM JST
wrapcore
* Wed 07 May 2014 05:26:42 PM JST
xconnection.wrapcore
* Wed 07 May 2014 05:26:42 PM JST
xcb2.xconnection.wrapcore
* Wed 07 May 2014 05:26:44 PM JST
ungrabbutton
* Wed 07 May 2014 05:26:48 PM JST

* Wed 07 May 2014 05:26:48 PM JST

* Wed 07 May 2014 05:26:48 PM JST
                                                    UngrabButtonChecked)

* Wed 07 May 2014 05:26:51 PM JST
wrapcore
* Wed 07 May 2014 05:26:51 PM JST
xconnection.wrapcore
* Wed 07 May 2014 05:26:52 PM JST
xcb2.xconnection.wrapcore
* Wed 07 May 2014 05:26:54 PM JST
grabbutton
* Wed 07 May 2014 05:27:02 PM JST

* Wed 07 May 2014 05:27:03 PM JST

* Wed 07 May 2014 05:27:03 PM JST
                                                  GrabButtonChecked)

* Wed 07 May 2014 05:27:05 PM JST
wrapcore
* Wed 07 May 2014 05:27:05 PM JST
xconnection.wrapcore
* Wed 07 May 2014 05:27:06 PM JST
xcb2.xconnection.wrapcore
* Wed 07 May 2014 05:27:08 PM JST
grabkey
* Wed 07 May 2014 05:27:14 PM JST
wrapcore
* Wed 07 May 2014 05:27:16 PM JST
wrapcore
* Wed 07 May 2014 05:27:16 PM JST
wrapcore
* Wed 07 May 2014 05:27:17 PM JST
xconnection.wrapcore
* Wed 07 May 2014 05:27:17 PM JST
xconnection.wrapcore
* Wed 07 May 2014 05:27:17 PM JST
xconnection.wrapcore
* Wed 07 May 2014 05:27:18 PM JST
xcb2.xconnection.wrapcore
* Wed 07 May 2014 05:27:18 PM JST
xcb2.xconnection.wrapcore
* Wed 07 May 2014 05:27:18 PM JST
xcb2.xconnection.wrapcore
* Wed 07 May 2014 05:27:30 PM JST
ungrabkey
* Wed 07 May 2014 05:27:35 PM JST
querytree
* Wed 07 May 2014 05:27:43 PM JST
setinputfocus
* Wed 07 May 2014 05:27:51 PM JST
changeproperty
* Wed 07 May 2014 05:27:55 PM JST
deleteproperty
* Wed 07 May 2014 05:28:01 PM JST
changeproperty
* Wed 07 May 2014 05:28:05 PM JST

* Wed 07 May 2014 05:28:05 PM JST

* Wed 07 May 2014 05:28:05 PM JST
                                                     SetInputFocusChecked)

* Wed 07 May 2014 05:28:08 PM JST
wrapcore
* Wed 07 May 2014 05:28:08 PM JST
xconnection.wrapcore
* Wed 07 May 2014 05:28:09 PM JST
xcb2.xconnection.wrapcore
* Wed 07 May 2014 05:28:11 PM JST
rotateproperties
* Wed 07 May 2014 05:28:19 PM JST
deleteproperty
* Wed 07 May 2014 05:28:28 PM JST
changewindowattributes
* Wed 07 May 2014 05:28:36 PM JST
getgeometry
* Wed 07 May 2014 05:28:42 PM JST
ungrabbutton
* Wed 07 May 2014 05:28:45 PM JST
getgeometry
* Wed 07 May 2014 05:28:49 PM JST
ungrabbutton
* Wed 07 May 2014 05:28:58 PM JST
grabbutton
* Wed 07 May 2014 05:29:05 PM JST
grabkey
* Wed 07 May 2014 05:29:15 PM JST
ungrabkey
* Wed 07 May 2014 05:29:21 PM JST
querytree
* Wed 07 May 2014 05:29:32 PM JST
setinputfocus
* Wed 07 May 2014 05:29:41 PM JST
rotateproperties
* Wed 07 May 2014 05:30:20 PM JST
        
* Wed 07 May 2014 05:31:46 PM JST
            
* Wed 07 May 2014 05:35:44 PM JST
AllocColor
* Wed 07 May 2014 06:25:31 PM JST
class
* Wed 07 May 2014 06:25:36 PM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)


* Wed 07 May 2014 06:27:04 PM JST
            
* Wed 07 May 2014 06:31:30 PM JST
createwindow
* Wed 07 May 2014 06:32:28 PM JST
CreateWindow
* Wed 07 May 2014 06:32:33 PM JST
CreateWindowChecked
* Wed 07 May 2014 06:35:08 PM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)


        
* Wed 07 May 2014 06:35:15 PM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)



* Wed 07 May 2014 06:36:41 PM JST
from xcb2.xconnection.wrapcore.createwindow.createwindow import (
    CreateWindow, CreateWindowChecked)

* Wed 07 May 2014 06:36:46 PM JST
createwindow
* Wed 07 May 2014 06:36:55 PM JST
CreateWindow
* Wed 07 May 2014 06:36:59 PM JST
CreateWindowChecked
* Wed 07 May 2014 06:37:14 PM JST
getwindowattributes
* Wed 07 May 2014 06:37:15 PM JST
createwindow
* Wed 07 May 2014 06:37:18 PM JST
getwindowattributes
* Wed 07 May 2014 06:42:06 PM JST
GetWindowAttributes
* Wed 07 May 2014 06:42:12 PM JST
GetWindowAttributesUnchecked
* Wed 07 May 2014 06:46:14 PM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)



* Wed 07 May 2014 06:48:22 PM JST
DestroyWindow, DestroyWindowChecked
* Wed 07 May 2014 06:50:03 PM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)



* Wed 07 May 2014 06:51:15 PM JST
$$(yas/choose-value '("r" "w" "a" "r+" "rb" "wb" "r+b"))
* Wed 07 May 2014 06:51:49 PM JST
Checked
* Wed 07 May 2014 06:51:57 PM JST
Unchecked
* Wed 07 May 2014 06:52:45 PM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}${2:$$(yas/choose-value '("Checked" "Unchecked"))}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)

* Wed 07 May 2014 06:53:50 PM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}${2:$(yas/choose-value '("Checked" "Unchecked"))}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)

* Wed 07 May 2014 06:55:32 PM JST
from xcb2.xconnection.wrapcore.destroywindow.destroywindow import (
    DestroyWindow, DestroyWindowChecked)

* Wed 07 May 2014 06:55:36 PM JST
DestroyWindow
* Wed 07 May 2014 06:55:56 PM JST
DestroySubwindows
* Wed 07 May 2014 06:56:01 PM JST
DestroySubwindows
* Wed 07 May 2014 06:56:08 PM JST
DestroySubwindowsChecked
* Wed 07 May 2014 06:57:15 PM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)

* Wed 07 May 2014 06:58:18 PM JST
from xcb2.xconnection.wrapcore.destroywindow.destroysubwindows import (
    DestroySubwindows, DestroySubwindowsChecked)

* Wed 07 May 2014 10:19:01 PM JST
destroywindow
* Wed 07 May 2014 10:19:15 PM JST
DestroySubwindows
* Wed 07 May 2014 10:19:34 PM JST
ChangeSaveSet, ChangeSaveSetChecked
* Wed 07 May 2014 10:22:45 PM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)

* Wed 07 May 2014 10:23:54 PM JST
from xcb2.xconnection.wrapcore.changesaveset.changesaveset import (
    ChangeSaveSet, ChangeSaveSetChecked)

* Wed 07 May 2014 10:24:03 PM JST
changesaveset
* Wed 07 May 2014 10:24:04 PM JST
changesaveset.changesaveset
* Wed 07 May 2014 10:24:14 PM JST
ChangeSaveSetChecked
* Wed 07 May 2014 10:24:15 PM JST
ChangeSaveSet, ChangeSaveSetChecked
* Wed 07 May 2014 10:24:27 PM JST
ReparentWindow, ReparentWindowChecked
* Wed 07 May 2014 10:25:15 PM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)

* Wed 07 May 2014 10:26:16 PM JST
from xcb2.xconnection.wrapcore.reparentwindow.reparentwindow import (
    ReparentWindow, ReparentWindowChecked)

* Wed 07 May 2014 10:26:26 PM JST
reparentwindow
* Wed 07 May 2014 10:26:26 PM JST
reparentwindow.reparentwindow
* Wed 07 May 2014 10:26:35 PM JST
ReparentWindowChecked
* Wed 07 May 2014 10:26:36 PM JST
ReparentWindow, ReparentWindowChecked
* Wed 07 May 2014 10:26:46 PM JST
MapWindow, MapWindowChecked)
* Wed 07 May 2014 10:26:47 PM JST
MapWindow, MapWindowChecked
* Wed 07 May 2014 10:29:49 PM JST
    def MapSubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, True),
                                 xcb.VoidCookie())

    def MapSubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, False),
                                 xcb.VoidCookie())

    def UnmapWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, True),
                                 xcb.VoidCookie())

    def UnmapWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, False),
                                 xcb.VoidCookie())

    def UnmapSubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, True),
                                 xcb.VoidCookie())

    def UnmapSubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, False),
                                 xcb.VoidCookie())

    def ConfigureWindowChecked(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, True),
                                 xcb.VoidCookie())

    def ConfigureWindow(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, False),
                                 xcb.VoidCookie())

    def CirculateWindowChecked(self, direction, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, True),
                                 xcb.VoidCookie())

    def CirculateWindow(self, direction, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, False),
                                 xcb.VoidCookie())

    def GetGeometry(self, drawable):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, True),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def GetGeometryUnchecked(self, drawable):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, False),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def QueryTree(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, True),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def QueryTreeUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, False),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def InternAtom(self, only_if_exists, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, True),
                                 InternAtomCookie(),
                                 InternAtomReply)

    def InternAtomUnchecked(self, only_if_exists, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, False),
                                 InternAtomCookie(),
                                 InternAtomReply)

    def GetAtomName(self, atom):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, True),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)

    def GetAtomNameUnchecked(self, atom):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, False),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)

    def ChangePropertyChecked(self, mode, window, property, type, format, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, True),
                                 xcb.VoidCookie())

    def ChangeProperty(self, mode, window, property, type, format, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, False),
                                 xcb.VoidCookie())

    def DeletePropertyChecked(self, window, property):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, True),
                                 xcb.VoidCookie())

    def DeleteProperty(self, window, property):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, False),
                                 xcb.VoidCookie())

    def GetProperty(self, delete, window, property, type, long_offset, long_length):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, True),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def GetPropertyUnchecked(self, delete, window, property, type, long_offset, long_length):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, False),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def ListProperties(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, True),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def ListPropertiesUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, False),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def SetSelectionOwnerChecked(self, owner, selection, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, True),
                                 xcb.VoidCookie())

    def SetSelectionOwner(self, owner, selection, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, False),
                                 xcb.VoidCookie())

    def GetSelectionOwner(self, selection):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, True),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def GetSelectionOwnerUnchecked(self, selection):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, False),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def ConvertSelectionChecked(self, requestor, selection, target, property, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, True),
                                 xcb.VoidCookie())

    def ConvertSelection(self, requestor, selection, target, property, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, False),
                                 xcb.VoidCookie())

    def SendEventChecked(self, propagate, destination, event_mask, event):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(_array('b', event))))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, True),
                                 xcb.VoidCookie())

    def SendEvent(self, propagate, destination, event_mask, event):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(_array('b', event))))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, False),
                                 xcb.VoidCookie())

    def GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, True),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def GrabPointerUnchecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, False),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def UngrabPointerChecked(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, True),
                                 xcb.VoidCookie())

    def UngrabPointer(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, False),
                                 xcb.VoidCookie())

    def GrabButtonChecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, True),
                                 xcb.VoidCookie())

    def GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, False),
                                 xcb.VoidCookie())

    def UngrabButtonChecked(self, button, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, True),
                                 xcb.VoidCookie())

    def UngrabButton(self, button, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, False),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrabChecked(self, cursor, time, event_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, True),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrab(self, cursor, time, event_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, False),
                                 xcb.VoidCookie())

    def GrabKeyboard(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, True),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def GrabKeyboardUnchecked(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, False),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def UngrabKeyboardChecked(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, True),
                                 xcb.VoidCookie())

    def UngrabKeyboard(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, False),
                                 xcb.VoidCookie())

    def GrabKeyChecked(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, True),
                                 xcb.VoidCookie())

    def GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, False),
                                 xcb.VoidCookie())

    def UngrabKeyChecked(self, key, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, True),
                                 xcb.VoidCookie())

    def UngrabKey(self, key, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, False),
                                 xcb.VoidCookie())

    def AllowEventsChecked(self, mode, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, True),
                                 xcb.VoidCookie())

    def AllowEvents(self, mode, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, False),
                                 xcb.VoidCookie())

    def GrabServerChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, True),
                                 xcb.VoidCookie())

    def GrabServer(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, False),
                                 xcb.VoidCookie())

    def UngrabServerChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, True),
                                 xcb.VoidCookie())

    def UngrabServer(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, False),
                                 xcb.VoidCookie())

    def QueryPointer(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, True),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def QueryPointerUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, False),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def GetMotionEvents(self, window, start, stop):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, True),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def GetMotionEventsUnchecked(self, window, start, stop):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, False),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def TranslateCoordinates(self, src_window, dst_window, src_x, src_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, True),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def TranslateCoordinatesUnchecked(self, src_window, dst_window, src_x, src_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, False),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def WarpPointerChecked(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, True),
                                 xcb.VoidCookie())

    def WarpPointer(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, False),
                                 xcb.VoidCookie())

    def SetInputFocusChecked(self, revert_to, focus, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, True),
                                 xcb.VoidCookie())

    def SetInputFocus(self, revert_to, focus, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, False),
                                 xcb.VoidCookie())

    def GetInputFocus(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, True),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def GetInputFocusUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, False),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def QueryKeymap(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, True),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def QueryKeymapUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, False),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def OpenFontChecked(self, fid, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, True),
                                 xcb.VoidCookie())

    def OpenFont(self, fid, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, False),
                                 xcb.VoidCookie())

    def CloseFontChecked(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, True),
                                 xcb.VoidCookie())

    def CloseFont(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, False),
                                 xcb.VoidCookie())

    def QueryFont(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, True),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryFontUnchecked(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, False),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryTextExtents(self, font, string_len, string):
        buf = _StringIO()
        buf.write(_pack('=x', ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, True),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def QueryTextExtentsUnchecked(self, font, string_len, string):
        buf = _StringIO()
        buf.write(_pack('=x', ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, False),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def ListFonts(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, True),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsUnchecked(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, False),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsWithInfo(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, True),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def ListFontsWithInfoUnchecked(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, False),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def SetFontPathChecked(self, font_qty, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, True),
                                 xcb.VoidCookie())

    def SetFontPath(self, font_qty, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, False),
                                 xcb.VoidCookie())

    def GetFontPath(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, True),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def GetFontPathUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, False),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def CreatePixmapChecked(self, depth, pid, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, True),
                                 xcb.VoidCookie())

    def CreatePixmap(self, depth, pid, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, False),
                                 xcb.VoidCookie())

    def FreePixmapChecked(self, pixmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, True),
                                 xcb.VoidCookie())

    def FreePixmap(self, pixmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, False),
                                 xcb.VoidCookie())

    def CreateGCChecked(self, cid, drawable, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, True),
                                 xcb.VoidCookie())

    def CreateGC(self, cid, drawable, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, False),
                                 xcb.VoidCookie())

    def ChangeGCChecked(self, gc, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, True),
                                 xcb.VoidCookie())

    def ChangeGC(self, gc, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, False),
                                 xcb.VoidCookie())

    def CopyGCChecked(self, src_gc, dst_gc, value_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, True),
                                 xcb.VoidCookie())

    def CopyGC(self, src_gc, dst_gc, value_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, False),
                                 xcb.VoidCookie())

    def SetDashesChecked(self, gc, dash_offset, dashes_len, dashes):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(_array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, True),
                                 xcb.VoidCookie())

    def SetDashes(self, gc, dash_offset, dashes_len, dashes):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(_array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, False),
                                 xcb.VoidCookie())

    def SetClipRectanglesChecked(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, True),
                                 xcb.VoidCookie())

    def SetClipRectangles(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, False),
                                 xcb.VoidCookie())

    def FreeGCChecked(self, gc):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, True),
                                 xcb.VoidCookie())

    def FreeGC(self, gc):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, False),
                                 xcb.VoidCookie())

    def ClearAreaChecked(self, exposures, window, x, y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, True),
                                 xcb.VoidCookie())

    def ClearArea(self, exposures, window, x, y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, False),
                                 xcb.VoidCookie())

    def CopyAreaChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, True),
                                 xcb.VoidCookie())

    def CopyArea(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, False),
                                 xcb.VoidCookie())

    def CopyPlaneChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, True),
                                 xcb.VoidCookie())

    def CopyPlane(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, False),
                                 xcb.VoidCookie())

    def PolyPointChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, True),
                                 xcb.VoidCookie())

    def PolyPoint(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, False),
                                 xcb.VoidCookie())

    def PolyLineChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, True),
                                 xcb.VoidCookie())

    def PolyLine(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, False),
                                 xcb.VoidCookie())

    def PolySegmentChecked(self, drawable, gc, segments_len, segments):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, True),
                                 xcb.VoidCookie())

    def PolySegment(self, drawable, gc, segments_len, segments):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, False),
                                 xcb.VoidCookie())

    def PolyRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, True),
                                 xcb.VoidCookie())

    def PolyRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, False),
                                 xcb.VoidCookie())

    def PolyArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, True),
                                 xcb.VoidCookie())

    def PolyArc(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, False),
                                 xcb.VoidCookie())

    def FillPolyChecked(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, True),
                                 xcb.VoidCookie())

    def FillPoly(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, False),
                                 xcb.VoidCookie())

    def PolyFillRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, True),
                                 xcb.VoidCookie())

    def PolyFillRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, False),
                                 xcb.VoidCookie())

    def PolyFillArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, True),
                                 xcb.VoidCookie())

    def PolyFillArc(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, False),
                                 xcb.VoidCookie())

    def PutImageChecked(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, True),
                                 xcb.VoidCookie())

    def PutImage(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, False),
                                 xcb.VoidCookie())

    def GetImage(self, format, drawable, x, y, width, height, plane_mask):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, True),
                                 GetImageCookie(),
                                 GetImageReply)

    def GetImageUnchecked(self, format, drawable, x, y, width, height, plane_mask):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, False),
                                 GetImageCookie(),
                                 GetImageReply)

    def PolyText8Checked(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, True),
                                 xcb.VoidCookie())

    def PolyText8(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, False),
                                 xcb.VoidCookie())

    def PolyText16Checked(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, True),
                                 xcb.VoidCookie())

    def PolyText16(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, False),
                                 xcb.VoidCookie())

    def ImageText8Checked(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(_array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, True),
                                 xcb.VoidCookie())

    def ImageText8(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(_array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, False),
                                 xcb.VoidCookie())

    def ImageText16Checked(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, True),
                                 xcb.VoidCookie())

    def ImageText16(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, False),
                                 xcb.VoidCookie())

    def CreateColormapChecked(self, alloc, mid, window, visual):
        buf = _StringIO()
        buf.write(_pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, True),
                                 xcb.VoidCookie())

    def CreateColormap(self, alloc, mid, window, visual):
        buf = _StringIO()
        buf.write(_pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, False),
                                 xcb.VoidCookie())

    def FreeColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, True),
                                 xcb.VoidCookie())

    def FreeColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, False),
                                 xcb.VoidCookie())

    def CopyColormapAndFreeChecked(self, mid, src_cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, True),
                                 xcb.VoidCookie())

    def CopyColormapAndFree(self, mid, src_cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, False),
                                 xcb.VoidCookie())

    def InstallColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, True),
                                 xcb.VoidCookie())

    def InstallColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, False),
                                 xcb.VoidCookie())

    def UninstallColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, True),
                                 xcb.VoidCookie())

    def UninstallColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, False),
                                 xcb.VoidCookie())

    def ListInstalledColormaps(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, True),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def ListInstalledColormapsUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, False),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def AllocColor(self, cmap, red, green, blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, True),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocColorUnchecked(self, cmap, red, green, blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, False),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocNamedColor(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, True),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocNamedColorUnchecked(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, False),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocColorCells(self, contiguous, cmap, colors, planes):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, True),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorCellsUnchecked(self, contiguous, cmap, colors, planes):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, False),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorPlanes(self, contiguous, cmap, colors, reds, greens, blues):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, True),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def AllocColorPlanesUnchecked(self, contiguous, cmap, colors, reds, greens, blues):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, False),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def FreeColorsChecked(self, cmap, plane_mask, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, True),
                                 xcb.VoidCookie())

    def FreeColors(self, cmap, plane_mask, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, False),
                                 xcb.VoidCookie())

    def StoreColorsChecked(self, cmap, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, True),
                                 xcb.VoidCookie())

    def StoreColors(self, cmap, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, False),
                                 xcb.VoidCookie())

    def StoreNamedColorChecked(self, flags, cmap, pixel, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, True),
                                 xcb.VoidCookie())

    def StoreNamedColor(self, flags, cmap, pixel, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, False),
                                 xcb.VoidCookie())

    def QueryColors(self, cmap, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, True),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def QueryColorsUnchecked(self, cmap, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, False),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def LookupColor(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, True),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def LookupColorUnchecked(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, False),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def CreateCursorChecked(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, True),
                                 xcb.VoidCookie())

    def CreateCursor(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, False),
                                 xcb.VoidCookie())

    def CreateGlyphCursorChecked(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, True),
                                 xcb.VoidCookie())

    def CreateGlyphCursor(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, False),
                                 xcb.VoidCookie())

    def FreeCursorChecked(self, cursor):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, True),
                                 xcb.VoidCookie())

    def FreeCursor(self, cursor):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, False),
                                 xcb.VoidCookie())

    def RecolorCursorChecked(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, True),
                                 xcb.VoidCookie())

    def RecolorCursor(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, False),
                                 xcb.VoidCookie())

    def QueryBestSize(self, _class, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, True),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryBestSizeUnchecked(self, _class, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, False),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryExtension(self, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, True),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def QueryExtensionUnchecked(self, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, False),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def ListExtensions(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, True),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ListExtensionsUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, False),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ChangeKeyboardMappingChecked(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = _StringIO()
        buf.write(_pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(_array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardMapping(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = _StringIO()
        buf.write(_pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(_array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardMapping(self, first_keycode, count):
        buf = _StringIO()
        buf.write(_pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, True),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def GetKeyboardMappingUnchecked(self, first_keycode, count):
        buf = _StringIO()
        buf.write(_pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, False),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def ChangeKeyboardControlChecked(self, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardControl(self, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardControl(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, True),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def GetKeyboardControlUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, False),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def BellChecked(self, percent):
        buf = _StringIO()
        buf.write(_pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, True),
                                 xcb.VoidCookie())

    def Bell(self, percent):
        buf = _StringIO()
        buf.write(_pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, False),
                                 xcb.VoidCookie())

    def ChangePointerControlChecked(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, True),
                                 xcb.VoidCookie())

    def ChangePointerControl(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, False),
                                 xcb.VoidCookie())

    def GetPointerControl(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, True),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def GetPointerControlUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, False),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def SetScreenSaverChecked(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, True),
                                 xcb.VoidCookie())

    def SetScreenSaver(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, False),
                                 xcb.VoidCookie())

    def GetScreenSaver(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, True),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def GetScreenSaverUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, False),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def ChangeHostsChecked(self, mode, family, address_len, address):
        buf = _StringIO()
        buf.write(_pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(_array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, True),
                                 xcb.VoidCookie())

    def ChangeHosts(self, mode, family, address_len, address):
        buf = _StringIO()
        buf.write(_pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(_array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, False),
                                 xcb.VoidCookie())

    def ListHosts(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, True),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def ListHostsUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, False),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def SetAccessControlChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, True),
                                 xcb.VoidCookie())

    def SetAccessControl(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, False),
                                 xcb.VoidCookie())

    def SetCloseDownModeChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, True),
                                 xcb.VoidCookie())

    def SetCloseDownMode(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, False),
                                 xcb.VoidCookie())

    def KillClientChecked(self, resource):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, True),
                                 xcb.VoidCookie())

    def KillClient(self, resource):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, False),
                                 xcb.VoidCookie())

    def RotatePropertiesChecked(self, window, atoms_len, delta, atoms):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(_array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, True),
                                 xcb.VoidCookie())

    def RotateProperties(self, window, atoms_len, delta, atoms):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(_array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, False),
                                 xcb.VoidCookie())

    def ForceScreenSaverChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, True),
                                 xcb.VoidCookie())

    def ForceScreenSaver(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, False),
                                 xcb.VoidCookie())

    def SetPointerMapping(self, map_len, map):
        buf = _StringIO()
        buf.write(_pack('=xB2x', map_len))
        buf.write(str(buffer(_array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, True),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def SetPointerMappingUnchecked(self, map_len, map):
        buf = _StringIO()
        buf.write(_pack('=xB2x', map_len))
        buf.write(str(buffer(_array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, False),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def GetPointerMapping(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, True),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def GetPointerMappingUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, False),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def SetModifierMapping(self, keycodes_per_modifier, keycodes):
        buf = _StringIO()
        buf.write(_pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(_array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, True),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def SetModifierMappingUnchecked(self, keycodes_per_modifier, keycodes):
        buf = _StringIO()
        buf.write(_pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(_array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, False),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def GetModifierMapping(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, True),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def GetModifierMappingUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, False),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def NoOperationChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, True),
                                 xcb.VoidCookie())

    def NoOperation(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, False),
                                 xcb.VoidCookie())

* Wed 07 May 2014 10:30:25 PM JST

* Wed 07 May 2014 10:30:25 PM JST

* Wed 07 May 2014 10:30:25 PM JST
        buf = _StringIO()

* Wed 07 May 2014 10:30:27 PM JST
        buf = _StringIO()

* Wed 07 May 2014 10:30:27 PM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))

* Wed 07 May 2014 10:30:27 PM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))

* Wed 07 May 2014 10:30:27 PM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, True),

* Wed 07 May 2014 10:30:28 PM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, True),

* Wed 07 May 2014 10:30:28 PM JST
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, True),
                                 xcb.VoidCookie())

* Wed 07 May 2014 10:31:46 PM JST
       
* Wed 07 May 2014 10:31:49 PM JST
    
* Wed 07 May 2014 10:32:52 PM JST
       
* Wed 07 May 2014 10:38:16 PM JST
    
* Wed 07 May 2014 10:39:58 PM JST
def 
* Wed 07 May 2014 10:39:59 PM JST
def 
* Wed 07 May 2014 10:39:59 PM JST
def 
* Wed 07 May 2014 10:39:59 PM JST
def 
* Wed 07 May 2014 10:39:59 PM JST
def 
* Wed 07 May 2014 10:39:59 PM JST
def 
* Wed 07 May 2014 10:39:59 PM JST
def 
* Wed 07 May 2014 10:39:59 PM JST
def 
* Wed 07 May 2014 10:39:59 PM JST
def 
* Wed 07 May 2014 10:40:00 PM JST
def 
* Wed 07 May 2014 10:40:00 PM JST
def 
* Wed 07 May 2014 10:40:00 PM JST
def 
* Wed 07 May 2014 10:40:00 PM JST
def 
* Wed 07 May 2014 10:40:00 PM JST
def 
* Wed 07 May 2014 10:40:00 PM JST
def 
* Wed 07 May 2014 10:40:00 PM JST
def 
* Wed 07 May 2014 10:40:00 PM JST
def 
* Wed 07 May 2014 10:40:00 PM JST
def 
* Wed 07 May 2014 10:40:00 PM JST
def 
* Wed 07 May 2014 10:40:00 PM JST
def 
* Wed 07 May 2014 10:40:00 PM JST
def 
* Wed 07 May 2014 10:40:01 PM JST
def 
* Wed 07 May 2014 10:40:01 PM JST
def 
* Wed 07 May 2014 10:40:01 PM JST
def 
* Wed 07 May 2014 10:40:01 PM JST
def 
* Wed 07 May 2014 10:40:01 PM JST
def 
* Wed 07 May 2014 10:40:01 PM JST
def 
* Wed 07 May 2014 10:40:01 PM JST
def 
* Wed 07 May 2014 10:40:01 PM JST
def 
* Wed 07 May 2014 10:40:01 PM JST
def 
* Wed 07 May 2014 10:40:02 PM JST
def 
* Wed 07 May 2014 10:40:02 PM JST
def 
* Wed 07 May 2014 10:40:02 PM JST
def 
* Wed 07 May 2014 10:40:02 PM JST
def 
* Wed 07 May 2014 10:40:02 PM JST
def 
* Wed 07 May 2014 10:40:02 PM JST
def 
* Wed 07 May 2014 10:40:02 PM JST
def 
* Wed 07 May 2014 10:40:02 PM JST
def 
* Wed 07 May 2014 10:40:02 PM JST
def 
* Wed 07 May 2014 10:40:03 PM JST
def 
* Wed 07 May 2014 10:40:03 PM JST
def 
* Wed 07 May 2014 10:40:03 PM JST
def 
* Wed 07 May 2014 10:40:03 PM JST
def 
* Wed 07 May 2014 10:40:03 PM JST
def 
* Wed 07 May 2014 10:40:03 PM JST
def 
* Wed 07 May 2014 10:40:03 PM JST
def 
* Wed 07 May 2014 10:40:03 PM JST
def 
* Wed 07 May 2014 10:40:03 PM JST
def 
* Wed 07 May 2014 10:40:04 PM JST
def 
* Wed 07 May 2014 10:40:04 PM JST
def 
* Wed 07 May 2014 10:40:04 PM JST
def 
* Wed 07 May 2014 10:40:04 PM JST
def 
* Wed 07 May 2014 10:40:04 PM JST
def 
* Wed 07 May 2014 10:40:04 PM JST
def 
* Wed 07 May 2014 10:40:04 PM JST
def 
* Wed 07 May 2014 10:40:04 PM JST
def 
* Wed 07 May 2014 10:40:04 PM JST
def 
* Wed 07 May 2014 10:40:04 PM JST
def 
* Wed 07 May 2014 10:40:05 PM JST
def 
* Wed 07 May 2014 10:40:05 PM JST
def 
* Wed 07 May 2014 10:40:05 PM JST
def 
* Wed 07 May 2014 10:40:05 PM JST
def 
* Wed 07 May 2014 10:40:05 PM JST
def 
* Wed 07 May 2014 10:40:05 PM JST
def 
* Wed 07 May 2014 10:40:05 PM JST
def 
* Wed 07 May 2014 10:40:05 PM JST
def 
* Wed 07 May 2014 10:40:05 PM JST
def 
* Wed 07 May 2014 10:40:05 PM JST
def 
* Wed 07 May 2014 10:40:05 PM JST
def 
* Wed 07 May 2014 10:40:06 PM JST
def 
* Wed 07 May 2014 10:40:06 PM JST
def 
* Wed 07 May 2014 10:40:06 PM JST
def 
* Wed 07 May 2014 10:40:06 PM JST
def 
* Wed 07 May 2014 10:40:06 PM JST
def 
* Wed 07 May 2014 10:40:06 PM JST
def 
* Wed 07 May 2014 10:40:06 PM JST
def 
* Wed 07 May 2014 10:40:06 PM JST
def 
* Wed 07 May 2014 10:40:06 PM JST
def 
* Wed 07 May 2014 10:40:06 PM JST
def 
* Wed 07 May 2014 10:40:06 PM JST
def 
* Wed 07 May 2014 10:40:06 PM JST
def 
* Wed 07 May 2014 10:40:07 PM JST
def 
* Wed 07 May 2014 10:40:07 PM JST
def 
* Wed 07 May 2014 10:40:07 PM JST
def 
* Wed 07 May 2014 10:40:07 PM JST
def 
* Wed 07 May 2014 10:40:07 PM JST
def 
* Wed 07 May 2014 10:40:07 PM JST
def 
* Wed 07 May 2014 10:40:07 PM JST
def 
* Wed 07 May 2014 10:40:07 PM JST
def 
* Wed 07 May 2014 10:40:07 PM JST
def 
* Wed 07 May 2014 10:40:08 PM JST
def 
* Wed 07 May 2014 10:40:08 PM JST
def 
* Wed 07 May 2014 10:40:08 PM JST
def 
* Wed 07 May 2014 10:40:08 PM JST
def 
* Wed 07 May 2014 10:40:08 PM JST
def 
* Wed 07 May 2014 10:40:08 PM JST
def 
* Wed 07 May 2014 10:40:08 PM JST
def 
* Wed 07 May 2014 10:40:08 PM JST
def 
* Wed 07 May 2014 10:40:08 PM JST
def 
* Wed 07 May 2014 10:40:08 PM JST
def 
* Wed 07 May 2014 10:40:09 PM JST
def 
* Wed 07 May 2014 10:40:09 PM JST
def 
* Wed 07 May 2014 10:40:09 PM JST
def 
* Wed 07 May 2014 10:40:09 PM JST
def 
* Wed 07 May 2014 10:40:09 PM JST
def 
* Wed 07 May 2014 10:40:09 PM JST
def 
* Wed 07 May 2014 10:40:09 PM JST
def 
* Wed 07 May 2014 10:40:09 PM JST
def 
* Wed 07 May 2014 10:40:09 PM JST
def 
* Wed 07 May 2014 10:40:10 PM JST
def 
* Wed 07 May 2014 10:40:10 PM JST
def 
* Wed 07 May 2014 10:40:10 PM JST
def 
* Wed 07 May 2014 10:40:10 PM JST
def 
* Wed 07 May 2014 10:40:10 PM JST
def 
* Wed 07 May 2014 10:40:10 PM JST
def 
* Wed 07 May 2014 10:40:10 PM JST
def 
* Wed 07 May 2014 10:40:10 PM JST
def 
* Wed 07 May 2014 10:40:10 PM JST
def 
* Wed 07 May 2014 10:40:10 PM JST
def 
* Wed 07 May 2014 10:40:11 PM JST
def 
* Wed 07 May 2014 10:40:11 PM JST
def 
* Wed 07 May 2014 10:40:11 PM JST
def 
* Wed 07 May 2014 10:40:11 PM JST
def 
* Wed 07 May 2014 10:40:11 PM JST
def 
* Wed 07 May 2014 10:40:11 PM JST
def 
* Wed 07 May 2014 10:40:11 PM JST
def 
* Wed 07 May 2014 10:40:11 PM JST
def 
* Wed 07 May 2014 10:40:11 PM JST
def 
* Wed 07 May 2014 10:40:11 PM JST
def 
* Wed 07 May 2014 10:40:12 PM JST
def 
* Wed 07 May 2014 10:40:12 PM JST
def 
* Wed 07 May 2014 10:40:12 PM JST
def 
* Wed 07 May 2014 10:40:12 PM JST
def 
* Wed 07 May 2014 10:40:12 PM JST
def 
* Wed 07 May 2014 10:40:12 PM JST
def 
* Wed 07 May 2014 10:40:12 PM JST
def 
* Wed 07 May 2014 10:40:12 PM JST
def 
* Wed 07 May 2014 10:40:12 PM JST
def 
* Wed 07 May 2014 10:40:12 PM JST
def 
* Wed 07 May 2014 10:40:12 PM JST
def 
* Wed 07 May 2014 10:40:12 PM JST
def 
* Wed 07 May 2014 10:40:13 PM JST
def 
* Wed 07 May 2014 10:40:13 PM JST
def 
* Wed 07 May 2014 10:40:13 PM JST
def 
* Wed 07 May 2014 10:40:13 PM JST
def 
* Wed 07 May 2014 10:40:13 PM JST
def 
* Wed 07 May 2014 10:40:13 PM JST
def 
* Wed 07 May 2014 10:40:13 PM JST
def 
* Wed 07 May 2014 10:40:13 PM JST
def 
* Wed 07 May 2014 10:40:13 PM JST
def 
* Wed 07 May 2014 10:40:13 PM JST
def 
* Wed 07 May 2014 10:40:14 PM JST
def 
* Wed 07 May 2014 10:40:14 PM JST
def 
* Wed 07 May 2014 10:40:14 PM JST
def 
* Wed 07 May 2014 10:40:14 PM JST
def 
* Wed 07 May 2014 10:40:14 PM JST
def 
* Wed 07 May 2014 10:40:14 PM JST
def 
* Wed 07 May 2014 10:40:14 PM JST
def 
* Wed 07 May 2014 10:40:14 PM JST
def 
* Wed 07 May 2014 10:40:14 PM JST
def 
* Wed 07 May 2014 10:40:15 PM JST
def 
* Wed 07 May 2014 10:40:15 PM JST
def 
* Wed 07 May 2014 10:40:15 PM JST
def 
* Wed 07 May 2014 10:40:15 PM JST
def 
* Wed 07 May 2014 10:40:15 PM JST
def 
* Wed 07 May 2014 10:40:15 PM JST
def 
* Wed 07 May 2014 10:40:15 PM JST
def 
* Wed 07 May 2014 10:40:15 PM JST
def 
* Wed 07 May 2014 10:40:15 PM JST
def 
* Wed 07 May 2014 10:40:16 PM JST
def 
* Wed 07 May 2014 10:40:16 PM JST
def 
* Wed 07 May 2014 10:40:16 PM JST
def 
* Wed 07 May 2014 10:40:16 PM JST
def 
* Wed 07 May 2014 10:40:16 PM JST
def 
* Wed 07 May 2014 10:40:16 PM JST
def 
* Wed 07 May 2014 10:40:16 PM JST
def 
* Wed 07 May 2014 10:40:16 PM JST
def 
* Wed 07 May 2014 10:40:16 PM JST
def 
* Wed 07 May 2014 10:40:16 PM JST
def 
* Wed 07 May 2014 10:40:17 PM JST
def 
* Wed 07 May 2014 10:40:17 PM JST
def 
* Wed 07 May 2014 10:40:17 PM JST
def 
* Wed 07 May 2014 10:40:17 PM JST
def 
* Wed 07 May 2014 10:40:17 PM JST
def 
* Wed 07 May 2014 10:40:17 PM JST
def 
* Wed 07 May 2014 10:40:17 PM JST
def 
* Wed 07 May 2014 10:40:17 PM JST
def 
* Wed 07 May 2014 10:40:17 PM JST
def 
* Wed 07 May 2014 10:40:17 PM JST
def 
* Wed 07 May 2014 10:40:18 PM JST
def 
* Wed 07 May 2014 10:40:18 PM JST
def 
* Wed 07 May 2014 10:40:18 PM JST
def 
* Wed 07 May 2014 10:40:18 PM JST
def 
* Wed 07 May 2014 10:40:18 PM JST
def 
* Wed 07 May 2014 10:40:18 PM JST
def 
* Wed 07 May 2014 10:40:18 PM JST
def 
* Wed 07 May 2014 10:40:18 PM JST
def 
* Wed 07 May 2014 10:40:18 PM JST
def 
* Wed 07 May 2014 10:40:18 PM JST
def 
* Wed 07 May 2014 10:40:18 PM JST
def 
* Wed 07 May 2014 10:40:18 PM JST
def 
* Wed 07 May 2014 10:40:19 PM JST
def 
* Wed 07 May 2014 10:40:19 PM JST
def 
* Wed 07 May 2014 10:40:19 PM JST
def 
* Wed 07 May 2014 10:40:19 PM JST
def 
* Wed 07 May 2014 10:40:19 PM JST
def 
* Wed 07 May 2014 10:40:19 PM JST
def 
* Wed 07 May 2014 10:40:19 PM JST
def 
* Wed 07 May 2014 10:40:19 PM JST
def 
* Wed 07 May 2014 10:40:19 PM JST
def 
* Wed 07 May 2014 10:40:19 PM JST
def 
* Wed 07 May 2014 10:40:20 PM JST
def 
* Wed 07 May 2014 10:40:20 PM JST
def 
* Wed 07 May 2014 10:40:20 PM JST
def 
* Wed 07 May 2014 10:40:20 PM JST
def 
* Wed 07 May 2014 10:40:20 PM JST
def 
* Wed 07 May 2014 10:40:20 PM JST
def 
* Wed 07 May 2014 10:40:24 PM JST
    def 
* Wed 07 May 2014 10:40:24 PM JST
    def 
* Wed 07 May 2014 10:40:24 PM JST
    def 
* Wed 07 May 2014 10:40:24 PM JST
    def 
* Wed 07 May 2014 10:40:24 PM JST
    def 
* Wed 07 May 2014 10:40:24 PM JST
    def 
* Wed 07 May 2014 10:40:24 PM JST
    def 
* Wed 07 May 2014 10:40:24 PM JST
    def 
* Wed 07 May 2014 10:40:25 PM JST
    def 
* Wed 07 May 2014 10:40:25 PM JST
    def 
* Wed 07 May 2014 10:40:25 PM JST
    def 
* Wed 07 May 2014 10:40:25 PM JST
    def 
* Wed 07 May 2014 10:40:25 PM JST
    def 
* Wed 07 May 2014 10:40:25 PM JST
    def 
* Wed 07 May 2014 10:40:25 PM JST
    def 
* Wed 07 May 2014 10:40:25 PM JST
    def 
* Wed 07 May 2014 10:40:25 PM JST
    def 
* Wed 07 May 2014 10:40:26 PM JST
    def 
* Wed 07 May 2014 10:40:26 PM JST
    def 
* Wed 07 May 2014 10:40:26 PM JST
    def 
* Wed 07 May 2014 10:40:26 PM JST
    def 
* Wed 07 May 2014 10:40:26 PM JST
    def 
* Wed 07 May 2014 10:40:26 PM JST
    def 
* Wed 07 May 2014 10:40:26 PM JST
    def 
* Wed 07 May 2014 10:40:26 PM JST
    def 
* Wed 07 May 2014 10:40:26 PM JST
    def 
* Wed 07 May 2014 10:40:27 PM JST
    def 
* Wed 07 May 2014 10:40:27 PM JST
    def 
* Wed 07 May 2014 10:40:27 PM JST
    def 
* Wed 07 May 2014 10:40:27 PM JST
    def 
* Wed 07 May 2014 10:40:27 PM JST
    def 
* Wed 07 May 2014 10:40:27 PM JST
    def 
* Wed 07 May 2014 10:40:27 PM JST
    def 
* Wed 07 May 2014 10:40:27 PM JST
    def 
* Wed 07 May 2014 10:40:27 PM JST
    def 
* Wed 07 May 2014 10:40:28 PM JST
    def 
* Wed 07 May 2014 10:40:28 PM JST
    def 
* Wed 07 May 2014 10:40:28 PM JST
    def 
* Wed 07 May 2014 10:40:28 PM JST
    def 
* Wed 07 May 2014 10:40:28 PM JST
    def 
* Wed 07 May 2014 10:40:28 PM JST
    def 
* Wed 07 May 2014 10:40:28 PM JST
    def 
* Wed 07 May 2014 10:40:28 PM JST
    def 
* Wed 07 May 2014 10:40:28 PM JST
    def 
* Wed 07 May 2014 10:40:28 PM JST
    def 
* Wed 07 May 2014 10:40:29 PM JST
    def 
* Wed 07 May 2014 10:40:29 PM JST
    def 
* Wed 07 May 2014 10:40:29 PM JST
    def 
* Wed 07 May 2014 10:40:29 PM JST
    def 
* Wed 07 May 2014 10:40:29 PM JST
    def 
* Wed 07 May 2014 10:40:29 PM JST
    def 
* Wed 07 May 2014 10:40:29 PM JST
    def 
* Wed 07 May 2014 10:40:29 PM JST
    def 
* Wed 07 May 2014 10:40:29 PM JST
    def 
* Wed 07 May 2014 10:40:29 PM JST
    def 
* Wed 07 May 2014 10:40:29 PM JST
    def 
* Wed 07 May 2014 10:40:30 PM JST
    def 
* Wed 07 May 2014 10:40:30 PM JST
    def 
* Wed 07 May 2014 10:40:30 PM JST
    def 
* Wed 07 May 2014 10:40:30 PM JST
    def 
* Wed 07 May 2014 10:40:30 PM JST
    def 
* Wed 07 May 2014 10:40:30 PM JST
    def 
* Wed 07 May 2014 10:40:30 PM JST
    def 
* Wed 07 May 2014 10:40:30 PM JST
    def 
* Wed 07 May 2014 10:40:30 PM JST
    def 
* Wed 07 May 2014 10:40:30 PM JST
    def 
* Wed 07 May 2014 10:40:30 PM JST
    def 
* Wed 07 May 2014 10:40:30 PM JST
    def 
* Wed 07 May 2014 10:40:31 PM JST
    def 
* Wed 07 May 2014 10:40:31 PM JST
    def 
* Wed 07 May 2014 10:40:31 PM JST
    def 
* Wed 07 May 2014 10:40:31 PM JST
    def 
* Wed 07 May 2014 10:40:31 PM JST
    def 
* Wed 07 May 2014 10:40:31 PM JST
    def 
* Wed 07 May 2014 10:40:31 PM JST
    def 
* Wed 07 May 2014 10:40:31 PM JST
    def 
* Wed 07 May 2014 10:40:31 PM JST
    def 
* Wed 07 May 2014 10:40:31 PM JST
    def 
* Wed 07 May 2014 10:40:32 PM JST
    def 
* Wed 07 May 2014 10:40:32 PM JST
    def 
* Wed 07 May 2014 10:40:32 PM JST
    def 
* Wed 07 May 2014 10:40:32 PM JST
    def 
* Wed 07 May 2014 10:40:32 PM JST
    def 
* Wed 07 May 2014 10:40:32 PM JST
    def 
* Wed 07 May 2014 10:40:32 PM JST
    def 
* Wed 07 May 2014 10:40:32 PM JST
    def 
* Wed 07 May 2014 10:40:32 PM JST
    def 
* Wed 07 May 2014 10:40:33 PM JST
    def 
* Wed 07 May 2014 10:40:33 PM JST
    def 
* Wed 07 May 2014 10:40:33 PM JST
    def 
* Wed 07 May 2014 10:40:33 PM JST
    def 
* Wed 07 May 2014 10:40:33 PM JST
    def 
* Wed 07 May 2014 10:40:33 PM JST
    def 
* Wed 07 May 2014 10:40:33 PM JST
    def 
* Wed 07 May 2014 10:40:33 PM JST
    def 
* Wed 07 May 2014 10:40:33 PM JST
    def 
* Wed 07 May 2014 10:40:33 PM JST
    def 
* Wed 07 May 2014 10:40:34 PM JST
    def 
* Wed 07 May 2014 10:40:34 PM JST
    def 
* Wed 07 May 2014 10:40:34 PM JST
    def 
* Wed 07 May 2014 10:40:34 PM JST
    def 
* Wed 07 May 2014 10:40:34 PM JST
    def 
* Wed 07 May 2014 10:40:34 PM JST
    def 
* Wed 07 May 2014 10:40:34 PM JST
    def 
* Wed 07 May 2014 10:40:34 PM JST
    def 
* Wed 07 May 2014 10:40:34 PM JST
    def 
* Wed 07 May 2014 10:40:35 PM JST
    def 
* Wed 07 May 2014 10:40:35 PM JST
    def 
* Wed 07 May 2014 10:40:35 PM JST
    def 
* Wed 07 May 2014 10:40:35 PM JST
    def 
* Wed 07 May 2014 10:40:35 PM JST
    def 
* Wed 07 May 2014 10:40:35 PM JST
    def 
* Wed 07 May 2014 10:40:35 PM JST
    def 
* Wed 07 May 2014 10:40:35 PM JST
    def 
* Wed 07 May 2014 10:40:35 PM JST
    def 
* Wed 07 May 2014 10:40:35 PM JST
    def 
* Wed 07 May 2014 10:40:36 PM JST
    def 
* Wed 07 May 2014 10:40:36 PM JST
    def 
* Wed 07 May 2014 10:40:36 PM JST
    def 
* Wed 07 May 2014 10:40:36 PM JST
    def 
* Wed 07 May 2014 10:40:36 PM JST
    def 
* Wed 07 May 2014 10:40:36 PM JST
    def 
* Wed 07 May 2014 10:40:36 PM JST
    def 
* Wed 07 May 2014 10:40:36 PM JST
    def 
* Wed 07 May 2014 10:40:36 PM JST
    def 
* Wed 07 May 2014 10:40:36 PM JST
    def 
* Wed 07 May 2014 10:40:36 PM JST
    def 
* Wed 07 May 2014 10:40:36 PM JST
    def 
* Wed 07 May 2014 10:40:37 PM JST
    def 
* Wed 07 May 2014 10:40:37 PM JST
    def 
* Wed 07 May 2014 10:40:37 PM JST
    def 
* Wed 07 May 2014 10:40:37 PM JST
    def 
* Wed 07 May 2014 10:40:37 PM JST
    def 
* Wed 07 May 2014 10:40:37 PM JST
    def 
* Wed 07 May 2014 10:40:37 PM JST
    def 
* Wed 07 May 2014 10:40:37 PM JST
    def 
* Wed 07 May 2014 10:40:37 PM JST
    def 
* Wed 07 May 2014 10:40:37 PM JST
    def 
* Wed 07 May 2014 10:40:38 PM JST
    def 
* Wed 07 May 2014 10:40:38 PM JST
    def 
* Wed 07 May 2014 10:40:38 PM JST
    def 
* Wed 07 May 2014 10:40:38 PM JST
    def 
* Wed 07 May 2014 10:40:38 PM JST
    def 
* Wed 07 May 2014 10:40:38 PM JST
    def 
* Wed 07 May 2014 10:40:38 PM JST
    def 
* Wed 07 May 2014 10:40:38 PM JST
    def 
* Wed 07 May 2014 10:40:38 PM JST
    def 
* Wed 07 May 2014 10:40:38 PM JST
    def 
* Wed 07 May 2014 10:40:39 PM JST
    def 
* Wed 07 May 2014 10:40:39 PM JST
    def 
* Wed 07 May 2014 10:40:39 PM JST
    def 
* Wed 07 May 2014 10:40:39 PM JST
    def 
* Wed 07 May 2014 10:40:39 PM JST
    def 
* Wed 07 May 2014 10:40:39 PM JST
    def 
* Wed 07 May 2014 10:40:39 PM JST
    def 
* Wed 07 May 2014 10:40:39 PM JST
    def 
* Wed 07 May 2014 10:40:39 PM JST
    def 
* Wed 07 May 2014 10:40:40 PM JST
    def 
* Wed 07 May 2014 10:40:40 PM JST
    def 
* Wed 07 May 2014 10:40:40 PM JST
    def 
* Wed 07 May 2014 10:40:40 PM JST
    def 
* Wed 07 May 2014 10:40:40 PM JST
    def 
* Wed 07 May 2014 10:40:40 PM JST
    def 
* Wed 07 May 2014 10:40:40 PM JST
    def 
* Wed 07 May 2014 10:40:40 PM JST
    def 
* Wed 07 May 2014 10:40:40 PM JST
    def 
* Wed 07 May 2014 10:40:41 PM JST
    def 
* Wed 07 May 2014 10:40:41 PM JST
    def 
* Wed 07 May 2014 10:40:41 PM JST
    def 
* Wed 07 May 2014 10:40:41 PM JST
    def 
* Wed 07 May 2014 10:40:41 PM JST
    def 
* Wed 07 May 2014 10:40:41 PM JST
    def 
* Wed 07 May 2014 10:40:41 PM JST
    def 
* Wed 07 May 2014 10:40:41 PM JST
    def 
* Wed 07 May 2014 10:40:41 PM JST
    def 
* Wed 07 May 2014 10:40:41 PM JST
    def 
* Wed 07 May 2014 10:40:42 PM JST
    def 
* Wed 07 May 2014 10:40:42 PM JST
    def 
* Wed 07 May 2014 10:40:42 PM JST
    def 
* Wed 07 May 2014 10:40:42 PM JST
    def 
* Wed 07 May 2014 10:40:42 PM JST
    def 
* Wed 07 May 2014 10:40:42 PM JST
    def 
* Wed 07 May 2014 10:40:42 PM JST
    def 
* Wed 07 May 2014 10:40:42 PM JST
    def 
* Wed 07 May 2014 10:40:42 PM JST
    def 
* Wed 07 May 2014 10:40:42 PM JST
    def 
* Wed 07 May 2014 10:40:42 PM JST
    def 
* Wed 07 May 2014 10:40:42 PM JST
    def 
* Wed 07 May 2014 10:40:43 PM JST
    def 
* Wed 07 May 2014 10:40:43 PM JST
    def 
* Wed 07 May 2014 10:40:43 PM JST
    def 
* Wed 07 May 2014 10:40:43 PM JST
    def 
* Wed 07 May 2014 10:40:43 PM JST
    def 
* Wed 07 May 2014 10:40:43 PM JST
    def 
* Wed 07 May 2014 10:40:43 PM JST
    def 
* Wed 07 May 2014 10:40:43 PM JST
    def 
* Wed 07 May 2014 10:40:43 PM JST
    def 
* Wed 07 May 2014 10:40:43 PM JST
    def 
* Wed 07 May 2014 10:40:44 PM JST
    def 
* Wed 07 May 2014 10:40:44 PM JST
    def 
* Wed 07 May 2014 10:40:44 PM JST
    def 
* Wed 07 May 2014 10:40:44 PM JST
    def 
* Wed 07 May 2014 10:40:44 PM JST
    def 
* Wed 07 May 2014 10:40:44 PM JST
    def 
* Wed 07 May 2014 10:40:44 PM JST
    def 
* Wed 07 May 2014 10:40:44 PM JST
    def 
* Wed 07 May 2014 10:40:44 PM JST
    def 
* Wed 07 May 2014 10:40:44 PM JST
    def 
* Wed 07 May 2014 10:40:45 PM JST
    def 
* Wed 07 May 2014 10:40:45 PM JST
    def 
* Wed 07 May 2014 10:40:45 PM JST
    def 
* Wed 07 May 2014 10:40:45 PM JST
    def 
* Wed 07 May 2014 10:40:45 PM JST
    def 
* Wed 07 May 2014 10:40:45 PM JST
    def 
* Wed 07 May 2014 10:40:45 PM JST
    def 
* Wed 07 May 2014 10:40:45 PM JST
    def 
* Wed 07 May 2014 10:40:45 PM JST
    def 
* Wed 07 May 2014 10:43:05 PM JST

* Wed 07 May 2014 10:43:05 PM JST

* Wed 07 May 2014 10:43:06 PM JST
 window

* Wed 07 May 2014 10:43:13 PM JST

* Wed 07 May 2014 10:43:13 PM JST

* Wed 07 May 2014 10:43:14 PM JST
 window

* Wed 07 May 2014 10:43:17 PM JST

* Wed 07 May 2014 10:43:17 PM JST

* Wed 07 May 2014 10:43:17 PM JST
 window

* Wed 07 May 2014 10:43:34 PM JST

* Wed 07 May 2014 10:43:34 PM JST

* Wed 07 May 2014 10:43:34 PM JST
 window

* Wed 07 May 2014 10:43:41 PM JST

* Wed 07 May 2014 10:43:41 PM JST

* Wed 07 May 2014 10:43:41 PM JST
 window

* Wed 07 May 2014 10:43:52 PM JST

* Wed 07 May 2014 10:43:52 PM JST

* Wed 07 May 2014 10:43:53 PM JST
 window

* Wed 07 May 2014 10:43:58 PM JST

* Wed 07 May 2014 10:43:58 PM JST

* Wed 07 May 2014 10:43:58 PM JST
 window, value_mask, value_list

* Wed 07 May 2014 10:44:00 PM JST

* Wed 07 May 2014 10:44:00 PM JST

* Wed 07 May 2014 10:44:00 PM JST
 direction, window

* Wed 07 May 2014 10:44:01 PM JST

* Wed 07 May 2014 10:44:01 PM JST

* Wed 07 May 2014 10:44:01 PM JST
 drawable

* Wed 07 May 2014 10:44:01 PM JST

* Wed 07 May 2014 10:44:01 PM JST

* Wed 07 May 2014 10:44:01 PM JST
 window

* Wed 07 May 2014 10:44:02 PM JST

* Wed 07 May 2014 10:44:02 PM JST

* Wed 07 May 2014 10:44:02 PM JST
 only_if_exists, name_len, name

* Wed 07 May 2014 10:44:02 PM JST

* Wed 07 May 2014 10:44:02 PM JST

* Wed 07 May 2014 10:44:02 PM JST
 mode, window, property, type, format, data_len, data

* Wed 07 May 2014 10:44:04 PM JST

* Wed 07 May 2014 10:44:04 PM JST

* Wed 07 May 2014 10:44:04 PM JST
 window, property

* Wed 07 May 2014 10:44:39 PM JST

* Wed 07 May 2014 10:44:39 PM JST

* Wed 07 May 2014 10:44:39 PM JST
 window

* Wed 07 May 2014 10:44:41 PM JST

* Wed 07 May 2014 10:44:41 PM JST

* Wed 07 May 2014 10:44:41 PM JST
 only_if_exists, name_len, name

* Wed 07 May 2014 10:44:43 PM JST

* Wed 07 May 2014 10:44:43 PM JST

* Wed 07 May 2014 10:44:43 PM JST
 atom

* Wed 07 May 2014 10:45:08 PM JST

* Wed 07 May 2014 10:45:08 PM JST

* Wed 07 May 2014 10:45:08 PM JST
 mode, window, property, type, format, data_len, data

* Wed 07 May 2014 10:45:19 PM JST

* Wed 07 May 2014 10:45:19 PM JST

* Wed 07 May 2014 10:45:20 PM JST
 delete, window, property, type, long_offset, long_length

* Wed 07 May 2014 10:45:25 PM JST

* Wed 07 May 2014 10:45:25 PM JST

* Wed 07 May 2014 10:45:25 PM JST
 owner, selection, time

* Wed 07 May 2014 10:45:27 PM JST

* Wed 07 May 2014 10:45:27 PM JST

* Wed 07 May 2014 10:45:27 PM JST
 selection

* Wed 07 May 2014 10:45:31 PM JST
n       
* Wed 07 May 2014 10:45:36 PM JST

* Wed 07 May 2014 10:45:36 PM JST

* Wed 07 May 2014 10:45:36 PM JST
 requestor, selection, target, property, time

* Wed 07 May 2014 10:45:38 PM JST

* Wed 07 May 2014 10:45:38 PM JST

* Wed 07 May 2014 10:45:39 PM JST
 propagate, destination, event_mask, event

* Wed 07 May 2014 10:45:41 PM JST

* Wed 07 May 2014 10:45:41 PM JST

* Wed 07 May 2014 10:45:41 PM JST
 owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time

* Wed 07 May 2014 10:45:44 PM JST

* Wed 07 May 2014 10:45:44 PM JST

* Wed 07 May 2014 10:45:44 PM JST
 time

* Wed 07 May 2014 10:45:45 PM JST

* Wed 07 May 2014 10:45:45 PM JST

* Wed 07 May 2014 10:45:46 PM JST
 owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers

* Wed 07 May 2014 10:45:48 PM JST

* Wed 07 May 2014 10:45:48 PM JST

* Wed 07 May 2014 10:45:48 PM JST
 button, grab_window, modifiers

* Wed 07 May 2014 10:45:50 PM JST

* Wed 07 May 2014 10:45:50 PM JST

* Wed 07 May 2014 10:45:50 PM JST
 cursor, time, event_mask

* Wed 07 May 2014 10:45:52 PM JST

* Wed 07 May 2014 10:45:52 PM JST

* Wed 07 May 2014 10:45:52 PM JST
 owner_events, grab_window, time, pointer_mode, keyboard_mode

* Wed 07 May 2014 10:45:54 PM JST

* Wed 07 May 2014 10:45:54 PM JST

* Wed 07 May 2014 10:45:54 PM JST
 time

* Wed 07 May 2014 10:45:56 PM JST

* Wed 07 May 2014 10:45:56 PM JST

* Wed 07 May 2014 10:45:56 PM JST
 owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode

* Wed 07 May 2014 10:45:57 PM JST

* Wed 07 May 2014 10:45:57 PM JST

* Wed 07 May 2014 10:45:57 PM JST
 key, grab_window, modifiers

* Wed 07 May 2014 10:45:59 PM JST

* Wed 07 May 2014 10:45:59 PM JST

* Wed 07 May 2014 10:45:59 PM JST
 mode, time

* Wed 07 May 2014 10:46:05 PM JST

* Wed 07 May 2014 10:46:05 PM JST

* Wed 07 May 2014 10:46:05 PM JST
 window

* Wed 07 May 2014 10:46:06 PM JST

* Wed 07 May 2014 10:46:06 PM JST

* Wed 07 May 2014 10:46:06 PM JST
 window, start, stop

* Wed 07 May 2014 10:46:07 PM JST

* Wed 07 May 2014 10:46:07 PM JST

* Wed 07 May 2014 10:46:07 PM JST
 src_window, dst_window, src_x, src_y

* Wed 07 May 2014 10:46:08 PM JST

* Wed 07 May 2014 10:46:08 PM JST

* Wed 07 May 2014 10:46:08 PM JST
 src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y

* Wed 07 May 2014 10:46:09 PM JST

* Wed 07 May 2014 10:46:09 PM JST

* Wed 07 May 2014 10:46:09 PM JST
 revert_to, focus, time

* Wed 07 May 2014 10:46:16 PM JST

* Wed 07 May 2014 10:46:16 PM JST

* Wed 07 May 2014 10:46:16 PM JST
 font

* Wed 07 May 2014 10:46:16 PM JST

* Wed 07 May 2014 10:46:17 PM JST

* Wed 07 May 2014 10:46:17 PM JST
 font

* Wed 07 May 2014 10:46:18 PM JST

* Wed 07 May 2014 10:46:18 PM JST

* Wed 07 May 2014 10:46:18 PM JST
 font, string_len, string

* Wed 07 May 2014 10:46:19 PM JST

* Wed 07 May 2014 10:46:19 PM JST

* Wed 07 May 2014 10:46:19 PM JST
 max_names, pattern_len, pattern

* Wed 07 May 2014 10:46:20 PM JST

* Wed 07 May 2014 10:46:20 PM JST

* Wed 07 May 2014 10:46:20 PM JST
 max_names, pattern_len, pattern

* Wed 07 May 2014 10:46:21 PM JST

* Wed 07 May 2014 10:46:21 PM JST

* Wed 07 May 2014 10:46:21 PM JST
 font_qty, font

* Wed 07 May 2014 10:46:23 PM JST

* Wed 07 May 2014 10:46:24 PM JST

* Wed 07 May 2014 10:46:24 PM JST
 depth, pid, drawable, width, height

* Wed 07 May 2014 10:46:25 PM JST

* Wed 07 May 2014 10:46:25 PM JST

* Wed 07 May 2014 10:46:25 PM JST
 pixmap

* Wed 07 May 2014 10:46:26 PM JST

* Wed 07 May 2014 10:46:26 PM JST

* Wed 07 May 2014 10:46:27 PM JST
 cid, drawable, value_mask, value_list

* Wed 07 May 2014 10:46:28 PM JST

* Wed 07 May 2014 10:46:28 PM JST

* Wed 07 May 2014 10:46:28 PM JST
 gc, value_mask, value_list

* Wed 07 May 2014 10:46:42 PM JST

* Wed 07 May 2014 10:46:43 PM JST

* Wed 07 May 2014 10:46:43 PM JST
 src_gc, dst_gc, value_mask

* Wed 07 May 2014 10:46:45 PM JST

* Wed 07 May 2014 10:46:45 PM JST

* Wed 07 May 2014 10:46:45 PM JST
 gc, dash_offset, dashes_len, dashes

* Wed 07 May 2014 10:46:46 PM JST

* Wed 07 May 2014 10:46:47 PM JST

* Wed 07 May 2014 10:46:47 PM JST
 ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles

* Wed 07 May 2014 10:46:48 PM JST

* Wed 07 May 2014 10:46:48 PM JST

* Wed 07 May 2014 10:46:48 PM JST
 gc

* Wed 07 May 2014 10:46:50 PM JST

* Wed 07 May 2014 10:46:50 PM JST

* Wed 07 May 2014 10:46:50 PM JST
 exposures, window, x, y, width, height

* Wed 07 May 2014 10:46:51 PM JST

* Wed 07 May 2014 10:46:51 PM JST

* Wed 07 May 2014 10:46:51 PM JST
 src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height

* Wed 07 May 2014 10:46:52 PM JST

* Wed 07 May 2014 10:46:52 PM JST

* Wed 07 May 2014 10:46:52 PM JST
 src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane

* Wed 07 May 2014 10:46:53 PM JST

* Wed 07 May 2014 10:46:53 PM JST

* Wed 07 May 2014 10:46:53 PM JST
 coordinate_mode, drawable, gc, points_len, points

* Wed 07 May 2014 10:46:55 PM JST

* Wed 07 May 2014 10:46:55 PM JST

* Wed 07 May 2014 10:46:55 PM JST
 coordinate_mode, drawable, gc, points_len, points

* Wed 07 May 2014 10:46:56 PM JST

* Wed 07 May 2014 10:46:56 PM JST

* Wed 07 May 2014 10:46:56 PM JST
 drawable, gc, segments_len, segments

* Wed 07 May 2014 10:46:57 PM JST

* Wed 07 May 2014 10:46:57 PM JST

* Wed 07 May 2014 10:46:57 PM JST
 drawable, gc, rectangles_len, rectangles

* Wed 07 May 2014 10:46:57 PM JST

* Wed 07 May 2014 10:46:57 PM JST

* Wed 07 May 2014 10:46:57 PM JST
 drawable, gc, arcs_len, arcs

* Wed 07 May 2014 10:46:58 PM JST

* Wed 07 May 2014 10:46:58 PM JST

* Wed 07 May 2014 10:46:58 PM JST
 drawable, gc, shape, coordinate_mode, points_len, points

* Wed 07 May 2014 10:46:59 PM JST

* Wed 07 May 2014 10:46:59 PM JST

* Wed 07 May 2014 10:46:59 PM JST
 drawable, gc, rectangles_len, rectangles

* Wed 07 May 2014 10:47:01 PM JST

* Wed 07 May 2014 10:47:01 PM JST

* Wed 07 May 2014 10:47:01 PM JST
 drawable, gc, arcs_len, arcs

* Wed 07 May 2014 10:47:02 PM JST

* Wed 07 May 2014 10:47:02 PM JST

* Wed 07 May 2014 10:47:02 PM JST
 format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data

* Wed 07 May 2014 10:47:03 PM JST

* Wed 07 May 2014 10:47:03 PM JST

* Wed 07 May 2014 10:47:03 PM JST
 format, drawable, x, y, width, height, plane_mask

* Wed 07 May 2014 10:47:09 PM JST

* Wed 07 May 2014 10:47:09 PM JST

* Wed 07 May 2014 10:47:09 PM JST
 drawable, gc, x, y, items_len, items

* Wed 07 May 2014 10:47:14 PM JST

* Wed 07 May 2014 10:47:14 PM JST

* Wed 07 May 2014 10:47:14 PM JST
 drawable, gc, x, y, items_len, items

* Wed 07 May 2014 10:47:15 PM JST

* Wed 07 May 2014 10:47:15 PM JST

* Wed 07 May 2014 10:47:16 PM JST
 string_len, drawable, gc, x, y, string

* Wed 07 May 2014 10:47:17 PM JST

* Wed 07 May 2014 10:47:17 PM JST

* Wed 07 May 2014 10:47:17 PM JST
 string_len, drawable, gc, x, y, string

* Wed 07 May 2014 10:47:18 PM JST

* Wed 07 May 2014 10:47:18 PM JST

* Wed 07 May 2014 10:47:18 PM JST
 alloc, mid, window, visual

* Wed 07 May 2014 10:47:19 PM JST

* Wed 07 May 2014 10:47:19 PM JST

* Wed 07 May 2014 10:47:19 PM JST
 cmap

* Wed 07 May 2014 10:47:21 PM JST

* Wed 07 May 2014 10:47:21 PM JST

* Wed 07 May 2014 10:47:21 PM JST
 mid, src_cmap

* Wed 07 May 2014 10:47:24 PM JST

* Wed 07 May 2014 10:47:24 PM JST

* Wed 07 May 2014 10:47:24 PM JST
 cmap

* Wed 07 May 2014 10:47:28 PM JST

* Wed 07 May 2014 10:47:28 PM JST

* Wed 07 May 2014 10:47:28 PM JST
 cmap

* Wed 07 May 2014 10:47:29 PM JST

* Wed 07 May 2014 10:47:29 PM JST

* Wed 07 May 2014 10:47:29 PM JST
 window

* Wed 07 May 2014 10:47:31 PM JST

* Wed 07 May 2014 10:47:31 PM JST

* Wed 07 May 2014 10:47:31 PM JST
 cmap, red, green, blue

* Wed 07 May 2014 10:47:32 PM JST

* Wed 07 May 2014 10:47:32 PM JST

* Wed 07 May 2014 10:47:32 PM JST
 cmap, name_len, name

* Wed 07 May 2014 10:47:33 PM JST

* Wed 07 May 2014 10:47:34 PM JST

* Wed 07 May 2014 10:47:34 PM JST
 contiguous, cmap, colors, planes

* Wed 07 May 2014 10:47:35 PM JST

* Wed 07 May 2014 10:47:35 PM JST

* Wed 07 May 2014 10:47:35 PM JST
 contiguous, cmap, colors, reds, greens, blues

* Wed 07 May 2014 10:47:35 PM JST

* Wed 07 May 2014 10:47:35 PM JST

* Wed 07 May 2014 10:47:36 PM JST
 cmap, plane_mask, pixels_len, pixels

* Wed 07 May 2014 10:47:36 PM JST

* Wed 07 May 2014 10:47:37 PM JST

* Wed 07 May 2014 10:47:37 PM JST
 cmap, items_len, items

* Wed 07 May 2014 10:47:38 PM JST

* Wed 07 May 2014 10:47:38 PM JST

* Wed 07 May 2014 10:47:38 PM JST
 flags, cmap, pixel, name_len, name

* Wed 07 May 2014 10:47:40 PM JST

* Wed 07 May 2014 10:47:40 PM JST

* Wed 07 May 2014 10:47:40 PM JST
 cmap, pixels_len, pixels

* Wed 07 May 2014 10:47:41 PM JST

* Wed 07 May 2014 10:47:41 PM JST

* Wed 07 May 2014 10:47:41 PM JST
 cmap, name_len, name

* Wed 07 May 2014 10:47:43 PM JST

* Wed 07 May 2014 10:47:43 PM JST

* Wed 07 May 2014 10:47:43 PM JST
 cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y

* Wed 07 May 2014 10:47:44 PM JST

* Wed 07 May 2014 10:47:44 PM JST

* Wed 07 May 2014 10:47:44 PM JST
 cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue

* Wed 07 May 2014 10:47:45 PM JST

* Wed 07 May 2014 10:47:45 PM JST

* Wed 07 May 2014 10:47:45 PM JST
 cursor

* Wed 07 May 2014 10:47:46 PM JST

* Wed 07 May 2014 10:47:46 PM JST

* Wed 07 May 2014 10:47:46 PM JST
 cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue

* Wed 07 May 2014 10:47:47 PM JST

* Wed 07 May 2014 10:47:47 PM JST

* Wed 07 May 2014 10:47:47 PM JST
 _class, drawable, width, height

* Wed 07 May 2014 10:47:48 PM JST

* Wed 07 May 2014 10:47:48 PM JST

* Wed 07 May 2014 10:47:48 PM JST
 name_len, name

* Wed 07 May 2014 10:47:51 PM JST

* Wed 07 May 2014 10:47:51 PM JST

* Wed 07 May 2014 10:47:51 PM JST
 keycode_count, first_keycode, keysyms_per_keycode, keysyms

* Wed 07 May 2014 10:47:53 PM JST

* Wed 07 May 2014 10:47:53 PM JST

* Wed 07 May 2014 10:47:53 PM JST
 first_keycode, count

* Wed 07 May 2014 10:47:54 PM JST

* Wed 07 May 2014 10:47:54 PM JST

* Wed 07 May 2014 10:47:54 PM JST
 value_mask, value_list

* Wed 07 May 2014 10:47:57 PM JST

* Wed 07 May 2014 10:47:58 PM JST

* Wed 07 May 2014 10:47:58 PM JST
 percent

* Wed 07 May 2014 10:48:05 PM JST

* Wed 07 May 2014 10:48:05 PM JST

* Wed 07 May 2014 10:48:05 PM JST
 acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold

* Wed 07 May 2014 10:48:08 PM JST

* Wed 07 May 2014 10:48:08 PM JST

* Wed 07 May 2014 10:48:08 PM JST
 timeout, interval, prefer_blanking, allow_exposures

* Wed 07 May 2014 10:48:11 PM JST

* Wed 07 May 2014 10:48:11 PM JST

* Wed 07 May 2014 10:48:11 PM JST
 mode, family, address_len, address

* Wed 07 May 2014 10:48:14 PM JST

* Wed 07 May 2014 10:48:14 PM JST

* Wed 07 May 2014 10:48:14 PM JST
 mode

* Wed 07 May 2014 10:48:15 PM JST

* Wed 07 May 2014 10:48:15 PM JST

* Wed 07 May 2014 10:48:15 PM JST
 mode

* Wed 07 May 2014 10:48:17 PM JST

* Wed 07 May 2014 10:48:17 PM JST

* Wed 07 May 2014 10:48:17 PM JST
 resource

* Wed 07 May 2014 10:48:18 PM JST

* Wed 07 May 2014 10:48:18 PM JST

* Wed 07 May 2014 10:48:18 PM JST
 window, atoms_len, delta, atoms

* Wed 07 May 2014 10:48:20 PM JST

* Wed 07 May 2014 10:48:20 PM JST

* Wed 07 May 2014 10:48:20 PM JST
 mode

* Wed 07 May 2014 10:48:22 PM JST

* Wed 07 May 2014 10:48:22 PM JST

* Wed 07 May 2014 10:48:22 PM JST
 map_len, map

* Wed 07 May 2014 10:48:25 PM JST

* Wed 07 May 2014 10:48:25 PM JST

* Wed 07 May 2014 10:48:25 PM JST
 keycodes_per_modifier, keycodes

* Wed 07 May 2014 10:50:44 PM JST
(s-replace "Abstract" "" text)
* Wed 07 May 2014 10:55:13 PM JST
${1:$(s-replace-all '(("Abstract" "") ("Checked" "") ("Unchecked" "")) text)}
* Wed 07 May 2014 10:55:44 PM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class ${1:$(s-replace-all '(("Checked" "") ("Unchecked" "")) text)}(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace-all '(("Abstract" "") ("Checked" "") ("Unchecked" "")) text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)

* Wed 07 May 2014 11:43:28 PM JST
MapSubwindows
* Wed 07 May 2014 11:44:37 PM JST
GetAtomNameUnchecked
atom

* Wed 07 May 2014 11:48:43 PM JST
UnmapWindow
* Wed 07 May 2014 11:48:50 PM JST
UnmapSubwindows
* Wed 07 May 2014 11:48:54 PM JST
CirculateWindow
* Wed 07 May 2014 11:48:56 PM JST
InternAtom
* Wed 07 May 2014 11:48:57 PM JST
SetSelectionOwner
* Wed 07 May 2014 11:48:58 PM JST
GetSelectionOwner
* Wed 07 May 2014 11:49:00 PM JST
ConvertSelection
* Wed 07 May 2014 11:49:02 PM JST
GrabPointer
* Wed 07 May 2014 11:49:13 PM JST
UngrabPointer
* Wed 07 May 2014 11:49:19 PM JST
GrabButton
* Wed 07 May 2014 11:49:20 PM JST
UngrabButton
* Wed 07 May 2014 11:49:22 PM JST
ChangeActivePointerGrab
* Wed 07 May 2014 11:49:23 PM JST
GrabKeyboard
* Wed 07 May 2014 11:49:24 PM JST
UngrabKeyboard
* Wed 07 May 2014 11:49:32 PM JST
GrabKey
* Wed 07 May 2014 11:49:34 PM JST
UngrabKey
* Wed 07 May 2014 11:49:36 PM JST
AllowEvents
* Wed 07 May 2014 11:49:38 PM JST
GrabServer
* Wed 07 May 2014 11:49:39 PM JST
UngrabServer
* Wed 07 May 2014 11:49:46 PM JST
QueryPointer
* Wed 07 May 2014 11:49:47 PM JST
GetMotionEvents
* Wed 07 May 2014 11:49:48 PM JST
TranslateCoordinates
* Wed 07 May 2014 11:49:50 PM JST
max_names, pattern
* Wed 07 May 2014 11:49:51 PM JST
max_names, pattern_len, pa
* Wed 07 May 2014 11:50:08 PM JST
TranslateCoordinates
* Wed 07 May 2014 11:50:10 PM JST
WarpPointer
* Wed 07 May 2014 11:50:12 PM JST
SetInputFocus
* Wed 07 May 2014 11:50:13 PM JST
GetInputFocus
* Wed 07 May 2014 11:50:20 PM JST
CloseFont
* Wed 07 May 2014 11:50:21 PM JST
QueryFont
* Wed 07 May 2014 11:50:23 PM JST
QueryTextExtents
* Wed 07 May 2014 11:50:24 PM JST
ListFonts
* Wed 07 May 2014 11:50:25 PM JST
ListFontsWithInfo
* Wed 07 May 2014 11:50:27 PM JST
SetFontPath
* Wed 07 May 2014 11:50:30 PM JST
GetFontPath
* Wed 07 May 2014 11:50:32 PM JST
CreatePixmap
* Wed 07 May 2014 11:50:33 PM JST
FreePixmap
* Wed 07 May 2014 11:50:35 PM JST
CreateGC
* Wed 07 May 2014 11:50:36 PM JST
ChangeGC
* Wed 07 May 2014 11:50:49 PM JST
PolyPoint
* Wed 07 May 2014 11:50:53 PM JST
PutImage
* Wed 07 May 2014 11:51:06 PM JST
ChangeGC
* Wed 07 May 2014 11:51:07 PM JST
CopyGC
* Wed 07 May 2014 11:51:08 PM JST
SetDashes
* Wed 07 May 2014 11:51:09 PM JST
SetClipRectangles
* Wed 07 May 2014 11:51:14 PM JST
FreeGC
* Wed 07 May 2014 11:51:16 PM JST
ClearArea
* Wed 07 May 2014 11:51:18 PM JST
CopyArea
* Wed 07 May 2014 11:51:20 PM JST
CopyPlane
* Wed 07 May 2014 11:51:21 PM JST
PolyPoint
* Wed 07 May 2014 11:51:22 PM JST
PolyLine
* Wed 07 May 2014 11:51:23 PM JST
PolySegment
* Wed 07 May 2014 11:51:24 PM JST
PolyRectangle
* Wed 07 May 2014 11:51:25 PM JST
PolyArc
* Wed 07 May 2014 11:51:26 PM JST
FillPoly
* Wed 07 May 2014 11:51:27 PM JST
PolyFillRectangle
* Wed 07 May 2014 11:51:29 PM JST
PolyFillArc
* Wed 07 May 2014 11:51:33 PM JST
PutImage
* Wed 07 May 2014 11:51:34 PM JST
GetImage
* Wed 07 May 2014 11:51:34 PM JST
PolyText8
* Wed 07 May 2014 11:51:35 PM JST
PolyText16
* Wed 07 May 2014 11:51:35 PM JST
ImageText8
* Wed 07 May 2014 11:51:36 PM JST
ImageText16
* Wed 07 May 2014 11:51:37 PM JST
CreateColormap
* Wed 07 May 2014 11:51:40 PM JST
FreeColormap
* Wed 07 May 2014 11:51:41 PM JST
CopyColormapAndFree
* Wed 07 May 2014 11:51:43 PM JST
InstallColormap
* Wed 07 May 2014 11:51:44 PM JST
UninstallColormap
* Wed 07 May 2014 11:51:44 PM JST
ListInstalledColormaps
* Wed 07 May 2014 11:51:46 PM JST
AllocColor
* Wed 07 May 2014 11:51:46 PM JST
AllocNamedColor
* Wed 07 May 2014 11:51:49 PM JST
AllocColorCells
* Wed 07 May 2014 11:51:50 PM JST
AllocColorPlanes
* Wed 07 May 2014 11:51:51 PM JST
FreeColors
* Wed 07 May 2014 11:51:52 PM JST
StoreColors
* Wed 07 May 2014 11:51:52 PM JST
StoreNamedColor
* Wed 07 May 2014 11:51:53 PM JST
QueryColors
* Wed 07 May 2014 11:51:54 PM JST
LookupColor
* Wed 07 May 2014 11:51:55 PM JST
CreateCursor
* Wed 07 May 2014 11:51:59 PM JST
CreateGlyphCursor
* Wed 07 May 2014 11:52:00 PM JST
FreeCursor
* Wed 07 May 2014 11:52:01 PM JST
RecolorCursor
* Wed 07 May 2014 11:52:02 PM JST
QueryBestSize
* Wed 07 May 2014 11:52:02 PM JST
QueryExtension
* Wed 07 May 2014 11:52:03 PM JST
ListExtensions
* Wed 07 May 2014 11:52:04 PM JST
ChangeKeyboardMapping
* Wed 07 May 2014 11:52:06 PM JST
GetKeyboardMapping
* Wed 07 May 2014 11:52:07 PM JST
ChangeKeyboardControl
* Wed 07 May 2014 11:52:08 PM JST
GetKeyboardControl
* Wed 07 May 2014 11:52:10 PM JST
Bell
* Wed 07 May 2014 11:52:11 PM JST
ChangePointerControl
* Wed 07 May 2014 11:52:13 PM JST
GetPointerControl
* Wed 07 May 2014 11:52:15 PM JST
SetScreenSaver
* Wed 07 May 2014 11:52:17 PM JST
GetScreenSaver
* Wed 07 May 2014 11:52:20 PM JST
ChangeHosts
* Wed 07 May 2014 11:52:21 PM JST
ListHosts
* Wed 07 May 2014 11:52:21 PM JST
SetAccessControl
* Wed 07 May 2014 11:52:22 PM JST
SetCloseDownMode
* Wed 07 May 2014 11:52:23 PM JST
KillClient
* Wed 07 May 2014 11:52:26 PM JST
RotateProperties
* Wed 07 May 2014 11:52:27 PM JST
ForceScreenSaver
* Wed 07 May 2014 11:52:28 PM JST
SetPointerMapping
* Wed 07 May 2014 11:52:29 PM JST
GetPointerMapping
* Wed 07 May 2014 11:52:29 PM JST
SetModifierMapping
* Wed 07 May 2014 11:52:30 PM JST
GetModifierMapping
* Wed 07 May 2014 11:52:32 PM JST
NoOperation
* Wed 07 May 2014 11:53:12 PM JST
MapSubwindows
* Wed 07 May 2014 11:53:19 PM JST
MapSubwindows
* Wed 07 May 2014 11:54:29 PM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)

* Wed 07 May 2014 11:54:55 PM JST
MapSubwindows
* Wed 07 May 2014 11:55:16 PM JST
window
* Wed 07 May 2014 11:55:26 PM JST
Checked

* Wed 07 May 2014 11:55:48 PM JST
UnmapWindow
* Wed 07 May 2014 11:55:48 PM JST

* Wed 07 May 2014 11:55:48 PM JST
UnmapWindow
* Wed 07 May 2014 11:55:49 PM JST
window
* Wed 07 May 2014 11:55:49 PM JST
Checked

* Wed 07 May 2014 11:59:13 PM JST
from abc import ABCMeta, abstractmethod
from xcb2.xconnection.abstract import ConnectionAbstract


class $1(ConnectionAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, $5):
        raise StandardError()

    def __call__(self, $5):
        r"""SUMMARY

        __call__($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._getcookie($5)


class ${1:$(s-replace "Abstract" "" text)}($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}($5)


class ${1:$(s-replace "Abstract" "" text)}$2($1):
    r"""SUMMARY
    """

    def _getcookie(self, $5):
        r"""SUMMARY

        _getcookie($5)

        @Arguments:
        - `window`:

        @Return:
        """
        return self.connection.core.${1:$(s-replace "Abstract" "" text)}$2($5)

* Thu 08 May 2014 12:00:24 AM JST
# expand-env: ((yas/indent-line 'fixed) (yas/wrap-around-region 'nil))
* Thu 08 May 2014 12:02:57 AM JST
UnmapSubwindows
* Thu 08 May 2014 12:03:01 AM JST
UnmapSubwindows
* Thu 08 May 2014 12:03:44 AM JST
Checked
* Thu 08 May 2014 12:03:51 AM JST
window
* Thu 08 May 2014 12:04:13 AM JST
CirculateWindow
* Thu 08 May 2014 12:04:14 AM JST
Checked
* Thu 08 May 2014 12:04:14 AM JST
direction, window
* Thu 08 May 2014 12:12:49 AM JST
InternAtom
* Thu 08 May 2014 12:13:42 AM JST
Unchecked
* Thu 08 May 2014 12:13:57 AM JST
only_if_exists, name_len, name
* Thu 08 May 2014 12:14:20 AM JST
SetSelectionOwner
* Thu 08 May 2014 12:14:33 AM JST
SetSelectionOwner
* Thu 08 May 2014 12:14:34 AM JST
Checked
* Thu 08 May 2014 12:14:34 AM JST
owner, selection, time
* Thu 08 May 2014 12:14:34 AM JST

* Thu 08 May 2014 12:14:34 AM JST

* Thu 08 May 2014 12:15:01 AM JST
Checked
* Thu 08 May 2014 12:15:07 AM JST
owner, selection, time
* Thu 08 May 2014 12:17:09 AM JST
GetSelectionOwner
* Thu 08 May 2014 12:17:10 AM JST
Unchecked
* Thu 08 May 2014 12:17:10 AM JST
selection
* Thu 08 May 2014 12:17:40 AM JST
GetSelectionOwner
* Thu 08 May 2014 12:17:46 AM JST
GetSelectionOwner
* Thu 08 May 2014 12:18:26 AM JST
GetSelectionOwner
* Thu 08 May 2014 12:19:18 AM JST
Unchecked
* Thu 08 May 2014 12:19:29 AM JST
selection
* Thu 08 May 2014 12:20:00 AM JST
ConvertSelection
* Thu 08 May 2014 12:20:37 AM JST
Checked
* Thu 08 May 2014 12:21:01 AM JST
requestor, selection, target, property, time
* Thu 08 May 2014 12:21:33 AM JST
GrabPointer
* Thu 08 May 2014 12:21:34 AM JST
Unchecked
* Thu 08 May 2014 12:21:34 AM JST
owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time
* Thu 08 May 2014 12:22:08 AM JST
owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time
* Thu 08 May 2014 12:23:32 AM JST
UngrabPointer
* Thu 08 May 2014 12:23:33 AM JST
Checked
* Thu 08 May 2014 12:23:33 AM JST
time
* Thu 08 May 2014 12:25:28 AM JST
GrabButton
* Thu 08 May 2014 12:26:10 AM JST
Checked
* Thu 08 May 2014 12:26:29 AM JST
owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers
* Thu 08 May 2014 12:27:25 AM JST
UngrabButton
* Thu 08 May 2014 12:27:26 AM JST
Checked
* Thu 08 May 2014 12:27:26 AM JST
button, grab_window, modifiers
* Thu 08 May 2014 12:27:56 AM JST
ChangeActivePointerGrab
* Thu 08 May 2014 12:27:57 AM JST
Checked
* Thu 08 May 2014 12:27:57 AM JST
cursor, time, event_mask
* Thu 08 May 2014 12:28:19 AM JST
GrabKeyboard
* Thu 08 May 2014 12:28:20 AM JST
Unchecked
* Thu 08 May 2014 12:28:20 AM JST
owner_events, grab_window, time, pointer_mode, keyboard_mode
* Thu 08 May 2014 12:28:47 AM JST
UngrabKeyboard
* Thu 08 May 2014 12:28:47 AM JST
Checked
* Thu 08 May 2014 12:28:48 AM JST
time
* Thu 08 May 2014 12:28:58 AM JST
GrabKey
* Thu 08 May 2014 12:28:59 AM JST
Checked
* Thu 08 May 2014 12:28:59 AM JST
owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode
* Thu 08 May 2014 12:29:08 AM JST
UngrabKey
* Thu 08 May 2014 12:29:08 AM JST
Checked
* Thu 08 May 2014 12:29:08 AM JST
key, grab_window, modifiers
* Thu 08 May 2014 12:29:17 AM JST
AllowEvents
* Thu 08 May 2014 12:29:18 AM JST
Checked
* Thu 08 May 2014 12:29:18 AM JST
mode, time
* Thu 08 May 2014 12:29:25 AM JST
GrabServer
* Thu 08 May 2014 12:29:26 AM JST
Checked
* Thu 08 May 2014 12:29:26 AM JST


UngrabServer
Checked


QueryPointer
Unchecked
window

GetMotionEvents
Unchecked
* Thu 08 May 2014 12:30:08 AM JST
UngrabServer
* Thu 08 May 2014 12:30:09 AM JST
Checked
* Thu 08 May 2014 12:30:09 AM JST


QueryPointer
Unchecked
window

GetMotionEvents
Unchecked
* Thu 08 May 2014 12:30:28 AM JST
QueryPointer
* Thu 08 May 2014 12:30:29 AM JST
Unchecked
* Thu 08 May 2014 12:30:29 AM JST
window
* Thu 08 May 2014 12:30:47 AM JST
GetMotionEvents
* Thu 08 May 2014 12:30:48 AM JST
Unchecked
* Thu 08 May 2014 12:30:48 AM JST
window, start, stop
* Thu 08 May 2014 12:31:04 AM JST
TranslateCoordinates
* Thu 08 May 2014 12:31:04 AM JST
Unchecked
* Thu 08 May 2014 12:31:05 AM JST
src_window, dst_window, src_x, src_y
* Thu 08 May 2014 12:31:23 AM JST
WarpPointer
* Thu 08 May 2014 12:31:24 AM JST
Checked
* Thu 08 May 2014 12:31:24 AM JST
src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y
* Thu 08 May 2014 12:31:45 AM JST
SetInputFocus
* Thu 08 May 2014 12:31:46 AM JST
Checked
* Thu 08 May 2014 12:31:46 AM JST
revert_to, focus, time
* Thu 08 May 2014 12:31:56 AM JST
GetInputFocus
* Thu 08 May 2014 12:31:57 AM JST
Unchecked
* Thu 08 May 2014 12:31:57 AM JST


OpenFont
fid, name_len, name

CloseFont
Checked
font

QueryFont
Unchecked
font

* Thu 08 May 2014 12:32:17 AM JST
OpenFont
* Thu 08 May 2014 12:32:17 AM JST
nam
* Thu 08 May 2014 12:32:18 AM JST

CloseFont
Checked
font

QueryFont
Unchecked
font

* Thu 08 May 2014 12:32:45 AM JST
CloseFont
* Thu 08 May 2014 12:32:46 AM JST
Checked
* Thu 08 May 2014 12:32:46 AM JST
font
* Thu 08 May 2014 12:33:00 AM JST
QueryFont
* Thu 08 May 2014 12:33:01 AM JST
Unchecked
* Thu 08 May 2014 12:33:01 AM JST
font
* Thu 08 May 2014 12:33:11 AM JST
QueryTextExtents
* Thu 08 May 2014 12:33:11 AM JST
Unchecked
* Thu 08 May 2014 12:33:12 AM JST
font, string_len, string
* Thu 08 May 2014 12:33:17 AM JST
ListFonts
* Thu 08 May 2014 12:33:18 AM JST
Unchecked
* Thu 08 May 2014 12:33:18 AM JST
max_names, pattern_len, pattern
* Thu 08 May 2014 12:33:25 AM JST
ListFontsWithInfo
* Thu 08 May 2014 12:33:26 AM JST
Unchecked
* Thu 08 May 2014 12:33:26 AM JST
max_names, pattern_len, pattern
* Thu 08 May 2014 12:33:32 AM JST
SetFontPath
* Thu 08 May 2014 12:33:33 AM JST
Checked
* Thu 08 May 2014 12:33:33 AM JST
font_qty, font
* Thu 08 May 2014 12:33:38 AM JST
GetFontPath
* Thu 08 May 2014 12:33:39 AM JST
Unchecked
* Thu 08 May 2014 12:33:39 AM JST


CreatePixmap
Checked
depth, pid, drawable, width, height

FreePixmap
Checked
pixmap

CreateGC
* Thu 08 May 2014 12:33:59 AM JST
CreatePixmap
* Thu 08 May 2014 12:34:00 AM JST
Checked
* Thu 08 May 2014 12:34:00 AM JST
depth, pid, drawable, width, height
* Thu 08 May 2014 12:34:11 AM JST
FreePixmap
* Thu 08 May 2014 12:34:11 AM JST
Checked
* Thu 08 May 2014 12:34:12 AM JST
pixmap
* Thu 08 May 2014 12:34:20 AM JST
CreateGC
* Thu 08 May 2014 12:34:20 AM JST
Checked
* Thu 08 May 2014 12:34:20 AM JST
cid, drawable, value_mask, value_list
* Thu 08 May 2014 12:34:27 AM JST
ChangeGC
* Thu 08 May 2014 12:34:28 AM JST
Checked
* Thu 08 May 2014 12:34:28 AM JST
gc, value_mask, value_list
* Thu 08 May 2014 12:34:33 AM JST
CopyGC
* Thu 08 May 2014 12:34:34 AM JST
Checke
* Thu 08 May 2014 12:34:34 AM JST
src_gc, dst_gc, value_mask
* Thu 08 May 2014 12:34:39 AM JST
SetDashes
* Thu 08 May 2014 12:34:40 AM JST
Checked
* Thu 08 May 2014 12:34:40 AM JST
gc, dash_offset, dashes_len, dashes
* Thu 08 May 2014 12:34:47 AM JST
SetClipRectangles
* Thu 08 May 2014 12:34:47 AM JST
Checked
* Thu 08 May 2014 12:34:48 AM JST
ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles
* Thu 08 May 2014 12:34:53 AM JST
FreeGC
* Thu 08 May 2014 12:34:54 AM JST
Checke
* Thu 08 May 2014 12:34:54 AM JST
gc
* Thu 08 May 2014 12:35:00 AM JST
ClearArea
* Thu 08 May 2014 12:35:01 AM JST
Checked
* Thu 08 May 2014 12:35:01 AM JST
exposures, window, x, y, width, height
* Thu 08 May 2014 12:35:15 AM JST
CopyArea
* Thu 08 May 2014 12:35:16 AM JST
Checked
* Thu 08 May 2014 12:35:16 AM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height
* Thu 08 May 2014 12:35:29 AM JST
CopyPlane
* Thu 08 May 2014 12:35:29 AM JST
Checked
* Thu 08 May 2014 12:35:29 AM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane
* Thu 08 May 2014 12:35:37 AM JST
PolyPoint
* Thu 08 May 2014 12:35:38 AM JST
Checked
* Thu 08 May 2014 12:35:38 AM JST
coordinate_mode, drawable, gc, points_len, points
* Thu 08 May 2014 12:35:43 AM JST
PolyLine
* Thu 08 May 2014 12:35:44 AM JST
Checked
* Thu 08 May 2014 12:35:44 AM JST
coordinate_mode, drawable, gc, points_len, points
* Thu 08 May 2014 12:35:51 AM JST
PolySegment
* Thu 08 May 2014 12:35:52 AM JST
Checked
* Thu 08 May 2014 12:35:52 AM JST
drawable, gc, segments_len, segments
* Thu 08 May 2014 12:36:11 AM JST
PolyRectangle
* Thu 08 May 2014 12:36:12 AM JST
Checked
* Thu 08 May 2014 12:36:12 AM JST
drawable, gc, rectangles_len, rectangles
* Thu 08 May 2014 12:36:18 AM JST
PolyArc
* Thu 08 May 2014 12:36:19 AM JST
Checked
* Thu 08 May 2014 12:36:19 AM JST
drawable, gc, arcs_len, arcs
* Thu 08 May 2014 12:36:25 AM JST
FillPoly
* Thu 08 May 2014 12:36:26 AM JST
Checked
* Thu 08 May 2014 12:36:26 AM JST
drawable, gc, shape, coordinate_mode, points_len, points
* Thu 08 May 2014 12:36:33 AM JST
PolyFillRectangle
* Thu 08 May 2014 12:36:34 AM JST
Checked
* Thu 08 May 2014 12:36:34 AM JST
drawable, gc, rectangles_len, rectangles
* Thu 08 May 2014 12:36:38 AM JST
PolyFillArc
* Thu 08 May 2014 12:36:39 AM JST
Checked
* Thu 08 May 2014 12:36:39 AM JST
drawable, gc, arcs_len, arcs
* Thu 08 May 2014 12:36:44 AM JST
PutImage
* Thu 08 May 2014 12:36:45 AM JST
Checked
* Thu 08 May 2014 12:36:45 AM JST
format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data
* Thu 08 May 2014 12:36:56 AM JST
GetImage
* Thu 08 May 2014 12:36:57 AM JST
Unchecke
* Thu 08 May 2014 12:36:57 AM JST
format, drawable, x, y, width, height, plane_mask
* Thu 08 May 2014 12:37:02 AM JST
PolyText8
* Thu 08 May 2014 12:37:03 AM JST
Checked
* Thu 08 May 2014 12:37:03 AM JST
drawable, gc, x, y, items_len, items
* Thu 08 May 2014 12:37:09 AM JST
PolyText16
* Thu 08 May 2014 12:37:10 AM JST
Checked
* Thu 08 May 2014 12:37:10 AM JST
drawable, gc, x, y, items_len, items
* Thu 08 May 2014 12:37:15 AM JST
ImageText8
* Thu 08 May 2014 12:37:16 AM JST
Checked
* Thu 08 May 2014 12:37:16 AM JST
string_len, drawable, gc, x, y, string
* Thu 08 May 2014 12:37:21 AM JST
ImageText16
* Thu 08 May 2014 12:37:22 AM JST
Checked
* Thu 08 May 2014 12:37:22 AM JST
string_len, drawable, gc, x, y, string
* Thu 08 May 2014 12:37:27 AM JST
CreateColormap
* Thu 08 May 2014 12:37:28 AM JST
Checked
* Thu 08 May 2014 12:37:29 AM JST
alloc, mid, window, visual
* Thu 08 May 2014 12:37:37 AM JST
FreeColormap
* Thu 08 May 2014 12:37:38 AM JST
Checked
* Thu 08 May 2014 12:37:38 AM JST
cmap
* Thu 08 May 2014 12:37:43 AM JST
CopyColormapAndFree
* Thu 08 May 2014 12:37:43 AM JST
Checked
* Thu 08 May 2014 12:37:44 AM JST
mid, src_cmap
* Thu 08 May 2014 12:37:48 AM JST
InstallColormap
* Thu 08 May 2014 12:37:49 AM JST
Checked
* Thu 08 May 2014 12:37:49 AM JST
cmap
* Thu 08 May 2014 12:37:53 AM JST
UninstallColormap
* Thu 08 May 2014 12:37:54 AM JST
Checked
* Thu 08 May 2014 12:37:54 AM JST
cmap
* Thu 08 May 2014 12:37:58 AM JST
ListInstalledColormaps
* Thu 08 May 2014 12:37:59 AM JST
Unchecked
* Thu 08 May 2014 12:37:59 AM JST
window
* Thu 08 May 2014 12:38:05 AM JST
AllocColor
* Thu 08 May 2014 12:38:06 AM JST
Unchecked
* Thu 08 May 2014 12:38:06 AM JST
 green, blue
* Thu 08 May 2014 12:38:11 AM JST
AllocNamedColor
* Thu 08 May 2014 12:38:12 AM JST
Unchecked
* Thu 08 May 2014 12:38:12 AM JST
cmap, name_len, name
* Thu 08 May 2014 12:38:16 AM JST
AllocColorCells
* Thu 08 May 2014 12:38:17 AM JST
Unchecked
* Thu 08 May 2014 12:38:17 AM JST
contiguous, cmap, colors, planes
* Thu 08 May 2014 12:38:22 AM JST
AllocColorPlanes
* Thu 08 May 2014 12:38:22 AM JST
Unchecked
* Thu 08 May 2014 12:38:23 AM JST
contiguous, cmap, colors, reds, greens, blues
* Thu 08 May 2014 12:38:28 AM JST
FreeColors
* Thu 08 May 2014 12:38:28 AM JST
Checked
* Thu 08 May 2014 12:38:28 AM JST
cmap, plane_mask, pixels_len, pixels
* Thu 08 May 2014 12:38:33 AM JST
StoreColors
* Thu 08 May 2014 12:38:34 AM JST
Checked
* Thu 08 May 2014 12:38:34 AM JST
cmap, items_len, items
* Thu 08 May 2014 12:38:38 AM JST
StoreNamedColor
* Thu 08 May 2014 12:38:39 AM JST
Checked
* Thu 08 May 2014 12:38:39 AM JST
flags, cmap, pixel, name_len, name
* Thu 08 May 2014 12:38:44 AM JST
QueryColors
* Thu 08 May 2014 12:38:45 AM JST
Unchecked
* Thu 08 May 2014 12:38:45 AM JST
cmap, pixels_len, pixels
* Thu 08 May 2014 12:38:50 AM JST
LookupColor
* Thu 08 May 2014 12:38:50 AM JST
Unchecked
* Thu 08 May 2014 12:38:50 AM JST
cmap, name_len, name
* Thu 08 May 2014 12:38:55 AM JST
CreateCursor
* Thu 08 May 2014 12:38:56 AM JST
Checked
* Thu 08 May 2014 12:38:56 AM JST
cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y
* Thu 08 May 2014 12:39:01 AM JST
CreateGlyphCursor
* Thu 08 May 2014 12:39:01 AM JST
Checked
* Thu 08 May 2014 12:39:02 AM JST
cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue
* Thu 08 May 2014 12:39:06 AM JST
FreeCursor
* Thu 08 May 2014 12:39:07 AM JST
Checked
* Thu 08 May 2014 12:39:07 AM JST
cursor
* Thu 08 May 2014 12:39:11 AM JST
RecolorCursor
* Thu 08 May 2014 12:39:12 AM JST
Checked
* Thu 08 May 2014 12:39:12 AM JST
cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue
* Thu 08 May 2014 12:39:20 AM JST
QueryBestSize
* Thu 08 May 2014 12:39:21 AM JST
Unchecked
* Thu 08 May 2014 12:39:22 AM JST
_class, drawable, width, height
* Thu 08 May 2014 12:39:26 AM JST
QueryExtension
* Thu 08 May 2014 12:39:27 AM JST
Unchecked
* Thu 08 May 2014 12:39:27 AM JST
name_len, name
* Thu 08 May 2014 12:39:32 AM JST
ListExtensions
* Thu 08 May 2014 12:39:33 AM JST
Unchecked
* Thu 08 May 2014 12:39:33 AM JST


ChangeKeyboardMapping
Checked
keycode_count, first_keycode, keysyms_per_keycode, keysyms

GetKeyboardMapping
Unchecked
first_keycode, count

ChangeKeyboardControl
Checked
value_mask, value_list

GetKeyboardControl
Unchecked


Bell
Checked
percent

ChangePointerControl
Checked
acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold

* Thu 08 May 2014 12:39:57 AM JST
ChangeKeyboardMapping
* Thu 08 May 2014 12:39:57 AM JST
Checked
* Thu 08 May 2014 12:39:57 AM JST
keycode_count, first_keycode, keysyms_per_keycode, keysyms
* Thu 08 May 2014 12:40:02 AM JST
GetKeyboardMapping
* Thu 08 May 2014 12:40:03 AM JST
Unchecked
* Thu 08 May 2014 12:40:03 AM JST
first_keycode, count
* Thu 08 May 2014 12:40:08 AM JST
ChangeKeyboardControl
* Thu 08 May 2014 12:40:09 AM JST
Checked
* Thu 08 May 2014 12:40:09 AM JST
value_mask, value_list
* Thu 08 May 2014 12:40:15 AM JST
GetKeyboardControl
* Thu 08 May 2014 12:40:16 AM JST
Unchecked
* Thu 08 May 2014 12:40:16 AM JST


Bell
Checked
percent

ChangePointerControl
Checked
acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold

* Thu 08 May 2014 12:40:44 AM JST
Bell
* Thu 08 May 2014 12:40:45 AM JST
Chec
* Thu 08 May 2014 12:40:45 AM JST
percent
* Thu 08 May 2014 12:41:12 AM JST
ChangePointerControl
* Thu 08 May 2014 12:41:13 AM JST
Checked
* Thu 08 May 2014 12:41:13 AM JST
acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold
* Thu 08 May 2014 12:41:20 AM JST
GetPointerControl
* Thu 08 May 2014 12:41:20 AM JST
Unchecked
* Thu 08 May 2014 12:41:21 AM JST


SetScreenSaver
Checked
timeout, interval, prefer_blanking, allow_exposures

GetScreenSaver
Unchecked


ChangeHosts
Checked
mode, family, address_len, address

ListHosts
Unchecked


SetAccessControl
Checked
mode

SetCloseDownMode
Checked
mode

KillClient
* Thu 08 May 2014 12:41:39 AM JST
SetAccessControl
* Thu 08 May 2014 12:41:40 AM JST
Checked
* Thu 08 May 2014 12:41:41 AM JST
mode
* Thu 08 May 2014 12:41:49 AM JST
SetCloseDownMode
* Thu 08 May 2014 12:41:49 AM JST
Checked
* Thu 08 May 2014 12:41:49 AM JST
mode
* Thu 08 May 2014 12:41:55 AM JST
KillClient
* Thu 08 May 2014 12:41:56 AM JST
Checked
* Thu 08 May 2014 12:41:56 AM JST

Checked
resource
* Thu 08 May 2014 12:42:30 AM JST
resource
* Thu 08 May 2014 12:42:45 AM JST
RotateProperties
* Thu 08 May 2014 12:42:46 AM JST
Checked
* Thu 08 May 2014 12:42:46 AM JST
window, atoms_len, delta, atoms
* Thu 08 May 2014 12:42:51 AM JST
ForceScreenSaver
* Thu 08 May 2014 12:42:52 AM JST
Checked
* Thu 08 May 2014 12:42:52 AM JST
mode
* Thu 08 May 2014 12:43:00 AM JST
SetPointerMapping
* Thu 08 May 2014 12:43:01 AM JST
Unchecked
* Thu 08 May 2014 12:43:01 AM JST
map_len, map
* Thu 08 May 2014 12:43:07 AM JST
GetPointerMapping
* Thu 08 May 2014 12:43:08 AM JST
Unchecked
* Thu 08 May 2014 12:43:08 AM JST


SetModifierMapping
Unchecked
keycodes_per_modifier, keycodes

GetModifierMapping
Unchecked


NoOperation
Checked
* Thu 08 May 2014 12:43:28 AM JST
SetModifierMapping
* Thu 08 May 2014 12:43:29 AM JST
Unchecked
* Thu 08 May 2014 12:43:29 AM JST
keycodes_per_modifier, keycodes
* Thu 08 May 2014 12:44:09 AM JST
GetModifierMapping
* Thu 08 May 2014 12:44:10 AM JST
Unchecked
* Thu 08 May 2014 12:44:10 AM JST


NoOperation
Checked
* Thu 08 May 2014 12:44:41 AM JST
NoOperation
* Thu 08 May 2014 12:44:42 AM JST
Checked
* Thu 08 May 2014 12:44:42 AM JST


GetAtomNameUnchecked
atom

* Thu 08 May 2014 12:44:56 AM JST
GetAtomNameUnchecked
* Thu 08 May 2014 12:44:57 AM JST
atom
* Thu 08 May 2014 12:44:57 AM JST

* Thu 08 May 2014 12:47:01 AM JST
atom
* Thu 08 May 2014 01:04:53 AM JST
from xcb2.xconnection.wrapcore.changesaveset.changesaveset import (
    ChangeSaveSet, ChangeSaveSetChecked)

* Thu 08 May 2014 01:05:04 AM JST
changesaveset
* Thu 08 May 2014 01:05:25 AM JST
ChangeSaveSet
* Thu 08 May 2014 01:05:33 AM JST
   
* Thu 08 May 2014 01:07:23 AM JST
${1:$(s-lower-camel-case text)}
* Thu 08 May 2014 01:07:57 AM JST
AllocColor
* Thu 08 May 2014 01:08:42 AM JST
$1
* Thu 08 May 2014 01:08:51 AM JST
$1$2
* Thu 08 May 2014 01:08:59 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-lower-camel-case text)}.${1:$(s-lower-camel-case text)} import $1, $1$2

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:09:16 AM JST
AllocColor
* Thu 08 May 2014 01:10:42 AM JST
downcase-word
* Thu 08 May 2014 01:11:26 AM JST
from xcb2.xconnection.wrapcore.${1:$(downcase-word text)}.${1:$(downcase-word text)} import $1, $1$2

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:11:59 AM JST
AllocColorCells
* Thu 08 May 2014 01:12:16 AM JST
downcase-word
* Thu 08 May 2014 01:13:14 AM JST
s-downcasetext
* Thu 08 May 2014 01:13:23 AM JST
AllocColorCells
* Thu 08 May 2014 01:13:51 AM JST
AllocColorCells
* Thu 08 May 2014 01:14:50 AM JST
word
* Thu 08 May 2014 01:14:57 AM JST
s-downcase
* Thu 08 May 2014 01:15:06 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1$2

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:15:24 AM JST
AllocColorPlanes
* Thu 08 May 2014 01:16:17 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:16:45 AM JST
AllocNamedColor
* Thu 08 May 2014 01:17:14 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:17:31 AM JST
AllowEvents
* Thu 08 May 2014 01:18:11 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:18:19 AM JST
Bell
* Thu 08 May 2014 01:19:21 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:19:23 AM JST
ChangeActivePointerGrab
* Thu 08 May 2014 01:19:50 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:19:56 AM JST
ChangeGC
* Thu 08 May 2014 01:20:36 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:20:44 AM JST
ChangeKeyboardControl
* Thu 08 May 2014 01:21:27 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:21:31 AM JST
ChangeKeyboardMapping
* Thu 08 May 2014 01:22:04 AM JST
ChangePointerControl
* Thu 08 May 2014 01:22:11 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:22:50 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:23:02 AM JST
CirculateWindow
* Thu 08 May 2014 01:23:27 AM JST
ClearArea
* Thu 08 May 2014 01:23:38 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:23:42 AM JST
ClearArea
* Thu 08 May 2014 01:24:20 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:24:22 AM JST
CloseFont
* Thu 08 May 2014 01:24:53 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:25:14 AM JST
ConvertSelection
* Thu 08 May 2014 01:25:39 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:25:47 AM JST
CopyArea
* Thu 08 May 2014 01:26:35 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:26:44 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:26:55 AM JST
CopyColormapAndFree
* Thu 08 May 2014 01:27:13 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:27:19 AM JST
CopyGC
* Thu 08 May 2014 01:28:13 AM JST
CopyPlane
* Thu 08 May 2014 01:28:20 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:28:25 AM JST
CopyPlane
* Thu 08 May 2014 01:28:45 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:28:52 AM JST
CreateColormap
* Thu 08 May 2014 01:29:12 AM JST
CreateCursor
* Thu 08 May 2014 01:29:16 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:29:20 AM JST
CreateCursor
* Thu 08 May 2014 01:29:42 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:30:38 AM JST
CreateGC
* Thu 08 May 2014 01:31:48 AM JST
CreateGC
* Thu 08 May 2014 01:32:00 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:32:13 AM JST
CreateGlyphCursor
* Thu 08 May 2014 01:32:25 AM JST
CreateGlyphCursor
* Thu 08 May 2014 01:32:33 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:32:42 AM JST
CreatePixmap
* Thu 08 May 2014 01:33:39 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:33:47 AM JST
FillPoly
* Thu 08 May 2014 01:34:02 AM JST
CreatePixmap
* Thu 08 May 2014 01:34:08 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:34:18 AM JST
ForceScreenSaver
* Thu 08 May 2014 01:34:37 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:34:50 AM JST
FreeColormap
* Thu 08 May 2014 01:35:01 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:35:11 AM JST
FreeColors
* Thu 08 May 2014 01:35:28 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:35:35 AM JST
FreeCursor
* Thu 08 May 2014 01:35:55 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:36:04 AM JST
FreeGC
* Thu 08 May 2014 01:36:12 AM JST
FreeCursor
* Thu 08 May 2014 01:36:22 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:36:30 AM JST
FreePixmap
* Thu 08 May 2014 01:36:41 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:36:50 AM JST
GetAtomNameUnchecked
* Thu 08 May 2014 01:36:57 AM JST
GetAtomName
* Thu 08 May 2014 01:38:16 AM JST
GetAtomNameUnchecked
* Thu 08 May 2014 01:38:23 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:38:31 AM JST
GetFontPath
* Thu 08 May 2014 01:38:46 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:38:53 AM JST
GetImage
* Thu 08 May 2014 01:39:47 AM JST
GetFontPath
* Thu 08 May 2014 01:39:53 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:39:59 AM JST
GetInputFocus
* Thu 08 May 2014 01:40:28 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:40:37 AM JST
GetKeyboardControl
* Thu 08 May 2014 01:40:51 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:40:56 AM JST
GetKeyboardMapping
* Thu 08 May 2014 01:41:10 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:41:20 AM JST
GetModifierMapping
* Thu 08 May 2014 01:41:33 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:41:44 AM JST
GetMotionEvents
* Thu 08 May 2014 01:41:55 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:42:05 AM JST
ChangePointerControl
* Thu 08 May 2014 01:42:09 AM JST
GetPointerControl
* Thu 08 May 2014 01:42:24 AM JST
ChangePointerControl
* Thu 08 May 2014 01:42:35 AM JST
GetPointerMapping
* Thu 08 May 2014 01:42:55 AM JST
ChangePointerControl
* Thu 08 May 2014 01:43:14 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:43:23 AM JST
GetSelectionOwner
* Thu 08 May 2014 01:43:41 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:43:48 AM JST
GrabButton
* Thu 08 May 2014 01:43:58 AM JST
UngrabButton
* Thu 08 May 2014 01:44:02 AM JST
GrabButton
* Thu 08 May 2014 01:44:08 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:44:16 AM JST
GrabKey
* Thu 08 May 2014 01:44:24 AM JST
GrabButton
* Thu 08 May 2014 01:44:36 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:44:39 AM JST
GrabKeyboard
* Thu 08 May 2014 01:44:49 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:45:00 AM JST
GrabPointer
* Thu 08 May 2014 01:45:16 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:45:23 AM JST
GrabServer
* Thu 08 May 2014 01:45:36 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:45:50 AM JST
ImageText16
* Thu 08 May 2014 01:45:57 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:46:01 AM JST
ImageText8
* Thu 08 May 2014 01:46:09 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:46:31 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]


* Thu 08 May 2014 01:46:41 AM JST
InstallColormap
* Thu 08 May 2014 01:47:26 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:47:45 AM JST
InternAtom
* Thu 08 May 2014 01:48:20 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:48:40 AM JST
KillClient
* Thu 08 May 2014 01:49:52 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:50:05 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:50:13 AM JST
ListExtensions
* Thu 08 May 2014 01:50:25 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:50:43 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:50:51 AM JST
ListFonts
* Thu 08 May 2014 01:51:26 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:51:41 AM JST
ListFontsWithInfo
* Thu 08 May 2014 01:51:52 AM JST
ListFontsWithInfo
* Thu 08 May 2014 01:52:02 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 01:52:12 AM JST
ListInstalledColormaps
* Thu 08 May 2014 02:05:23 AM JST
ListInstalledColormaps
* Thu 08 May 2014 02:05:29 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:05:40 AM JST
LookupColor
* Thu 08 May 2014 02:06:31 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:06:40 AM JST
MapSubwindows
* Thu 08 May 2014 02:07:11 AM JST
LookupColor
* Thu 08 May 2014 02:07:24 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:07:37 AM JST
NoOperation
* Thu 08 May 2014 02:07:47 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:07:57 AM JST
OpenFont
* Thu 08 May 2014 02:08:39 AM JST
fid, name_len, name
* Thu 08 May 2014 02:09:23 AM JST
OpenFont
* Thu 08 May 2014 02:09:41 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:09:50 AM JST
PolyArc
* Thu 08 May 2014 02:10:08 AM JST
fid, name_len, name
* Thu 08 May 2014 02:10:11 AM JST
fid, name_len, name
* Thu 08 May 2014 02:10:15 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:10:19 AM JST
FillPoly
* Thu 08 May 2014 02:10:29 AM JST
fid, name_len, name
* Thu 08 May 2014 02:10:31 AM JST

* Thu 08 May 2014 02:10:31 AM JST

* Thu 08 May 2014 02:10:31 AM JST
fid, name_len, name

* Thu 08 May 2014 02:10:36 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:10:44 AM JST
PolyFillRectangle
* Thu 08 May 2014 02:11:04 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:11:13 AM JST
PolyLine
* Thu 08 May 2014 02:11:37 AM JST
PolyFillRectangle
* Thu 08 May 2014 02:11:41 AM JST

* Thu 08 May 2014 02:11:41 AM JST

* Thu 08 May 2014 02:11:41 AM JST
PolyFillRectangle

* Thu 08 May 2014 02:11:47 AM JST
PolyPoint
* Thu 08 May 2014 02:11:49 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:11:52 AM JST
PolyPoint
* Thu 08 May 2014 02:12:07 AM JST
PolyFillRectangle

* Thu 08 May 2014 02:12:30 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:12:56 AM JST
PolyRectangle
* Thu 08 May 2014 02:13:09 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:13:15 AM JST
PolySegment
* Thu 08 May 2014 02:13:29 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:13:39 AM JST
PolyText16
* Thu 08 May 2014 02:13:54 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Unchecked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:13:58 AM JST
PolyText8
* Thu 08 May 2014 02:15:52 AM JST
Unch
* Thu 08 May 2014 02:16:01 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:16:25 AM JST
putimage
* Thu 08 May 2014 02:16:56 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:17:46 AM JST
putimage
* Thu 08 May 2014 02:18:23 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:18:35 AM JST
putimage
* Thu 08 May 2014 02:19:42 AM JST
(search-forward "putimage")
* Thu 08 May 2014 02:20:04 AM JST
putimage
* Thu 08 May 2014 02:21:00 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:21:29 AM JST
putimage
* Thu 08 May 2014 02:22:12 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:22:31 AM JST
putimage
* Thu 08 May 2014 02:22:51 AM JST
putimage
* Thu 08 May 2014 02:23:04 AM JST
putimage
* Thu 08 May 2014 02:23:37 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:23:45 AM JST
putimage
* Thu 08 May 2014 02:24:26 AM JST
PutImage
* Thu 08 May 2014 02:25:01 AM JST


# For Emacs
# Local Variables:
# coding: utf-8
# End:
# __init__.py ends here

* Thu 08 May 2014 02:25:01 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:25:03 AM JST



# For Emacs
# Local Variables:
# coding: utf-8
# End:
# __init__.py ends here


* Thu 08 May 2014 02:25:35 AM JST
querybestsize
* Thu 08 May 2014 02:25:35 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:25:36 AM JST
querybestsize
* Thu 08 May 2014 02:25:36 AM JST
QueryBestSize
* Thu 08 May 2014 02:26:00 AM JST
querycolors
* Thu 08 May 2014 02:26:01 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:26:01 AM JST
querycolors
* Thu 08 May 2014 02:26:01 AM JST
QueryColors
* Thu 08 May 2014 02:26:20 AM JST
queryextension
* Thu 08 May 2014 02:26:20 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:26:20 AM JST
queryextension
* Thu 08 May 2014 02:26:20 AM JST
QueryExtension
* Thu 08 May 2014 02:26:31 AM JST
queryfont
* Thu 08 May 2014 02:26:32 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:26:32 AM JST
queryfont
* Thu 08 May 2014 02:26:32 AM JST
QueryFont
* Thu 08 May 2014 02:26:43 AM JST
querypointer
* Thu 08 May 2014 02:26:43 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:26:43 AM JST
querypointer
* Thu 08 May 2014 02:26:43 AM JST
QueryPointer
* Thu 08 May 2014 02:27:03 AM JST
querytextextents
* Thu 08 May 2014 02:27:03 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:27:04 AM JST
querytextextents
* Thu 08 May 2014 02:27:04 AM JST
QueryTextExtents
* Thu 08 May 2014 02:27:22 AM JST
recolorcursor
* Thu 08 May 2014 02:27:23 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:27:23 AM JST
recolorcursor
* Thu 08 May 2014 02:27:23 AM JST
RecolorCursor
* Thu 08 May 2014 02:27:30 AM JST
reparentwindow
* Thu 08 May 2014 02:27:35 AM JST
rotateproperties
* Thu 08 May 2014 02:27:35 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:27:36 AM JST
rotateproperties
* Thu 08 May 2014 02:27:36 AM JST
RotateProperties
* Thu 08 May 2014 02:27:48 AM JST
sendevent
* Thu 08 May 2014 02:28:01 AM JST
setaccesscontrol
* Thu 08 May 2014 02:28:02 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:28:02 AM JST
setaccesscontrol
* Thu 08 May 2014 02:28:02 AM JST
SetAccessControl
* Thu 08 May 2014 02:28:22 AM JST
setcliprectangles
* Thu 08 May 2014 02:28:22 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:28:22 AM JST
setcliprectangles
* Thu 08 May 2014 02:28:22 AM JST
SetClipRectangles
* Thu 08 May 2014 02:28:42 AM JST
setclosedownmode
* Thu 08 May 2014 02:28:42 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:28:42 AM JST
setclosedownmode
* Thu 08 May 2014 02:28:42 AM JST
SetCloseDownMode
* Thu 08 May 2014 02:28:53 AM JST
setdashes
* Thu 08 May 2014 02:28:53 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:28:53 AM JST
setdashes
* Thu 08 May 2014 02:28:53 AM JST
SetDashes
* Thu 08 May 2014 02:29:03 AM JST
setfontpath
* Thu 08 May 2014 02:29:03 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:29:03 AM JST
setfontpath
* Thu 08 May 2014 02:29:04 AM JST
SetFontPath
* Thu 08 May 2014 02:29:11 AM JST
setinputfocus
* Thu 08 May 2014 02:29:12 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:29:12 AM JST
setinputfocus
* Thu 08 May 2014 02:29:12 AM JST
SetInputFocus
* Thu 08 May 2014 02:29:20 AM JST
setmodifiermapping
* Thu 08 May 2014 02:29:20 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:29:21 AM JST
setmodifiermapping
* Thu 08 May 2014 02:29:21 AM JST
SetModifierMapping
* Thu 08 May 2014 02:29:32 AM JST
setpointermapping
* Thu 08 May 2014 02:29:32 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:29:32 AM JST
setpointermapping
* Thu 08 May 2014 02:29:33 AM JST
SetPointerMapping
* Thu 08 May 2014 02:29:45 AM JST
setselectionowner
* Thu 08 May 2014 02:29:45 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:29:45 AM JST
setselectionowner
* Thu 08 May 2014 02:29:45 AM JST
SetSelectionOwner
* Thu 08 May 2014 02:29:51 AM JST
storecolors
* Thu 08 May 2014 02:29:51 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:29:51 AM JST
storecolors
* Thu 08 May 2014 02:29:51 AM JST
StoreColors
* Thu 08 May 2014 02:29:59 AM JST
storenamedcolor
* Thu 08 May 2014 02:29:59 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:30:00 AM JST
storenamedcolor
* Thu 08 May 2014 02:30:00 AM JST
StoreNamedColor
* Thu 08 May 2014 02:30:14 AM JST
.svn
* Thu 08 May 2014 02:30:21 AM JST
translatecoordinates
* Thu 08 May 2014 02:30:21 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:30:21 AM JST
translatecoordinates
* Thu 08 May 2014 02:30:21 AM JST
TranslateCoordinates
* Thu 08 May 2014 02:30:35 AM JST
ungrabbutton
* Thu 08 May 2014 02:30:35 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:30:35 AM JST
ungrabbutton
* Thu 08 May 2014 02:30:35 AM JST
UngrabButton
* Thu 08 May 2014 02:30:44 AM JST
ungrabkey
* Thu 08 May 2014 02:30:44 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:30:44 AM JST
ungrabkey
* Thu 08 May 2014 02:30:44 AM JST
UngrabKey
* Thu 08 May 2014 02:30:50 AM JST
ungrabkeyboard
* Thu 08 May 2014 02:30:51 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:30:51 AM JST
ungrabkeyboard
* Thu 08 May 2014 02:30:51 AM JST
UngrabKeyboard
* Thu 08 May 2014 02:30:58 AM JST
ungrabpointer
* Thu 08 May 2014 02:30:58 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:30:58 AM JST
ungrabpointer
* Thu 08 May 2014 02:30:58 AM JST
UngrabPointer
* Thu 08 May 2014 02:31:08 AM JST
ungrabserver
* Thu 08 May 2014 02:31:09 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:31:09 AM JST
ungrabserver
* Thu 08 May 2014 02:31:09 AM JST
UngrabServer
* Thu 08 May 2014 02:31:15 AM JST
uninstallcolormap
* Thu 08 May 2014 02:31:16 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:31:16 AM JST
uninstallcolormap
* Thu 08 May 2014 02:31:16 AM JST
UninstallColormap
* Thu 08 May 2014 02:31:23 AM JST
unmapsubwindows
* Thu 08 May 2014 02:31:24 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:31:24 AM JST
unmapsubwindows
* Thu 08 May 2014 02:31:24 AM JST
UnmapSubwindows
* Thu 08 May 2014 02:31:33 AM JST
unmapwindow
* Thu 08 May 2014 02:31:33 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:31:33 AM JST
unmapwindow
* Thu 08 May 2014 02:31:34 AM JST
UnmapWindow
* Thu 08 May 2014 02:31:41 AM JST
warppointer
* Thu 08 May 2014 02:31:42 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 02:31:42 AM JST
warppointer
* Thu 08 May 2014 02:31:42 AM JST
WarpPointer
* Thu 08 May 2014 02:31:48 AM JST
atom.py
* Thu 08 May 2014 03:17:32 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 03:18:16 AM JST
changewindowattributes
* Thu 08 May 2014 03:18:26 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 03:19:18 AM JST
ChangeWindowAttributes
* Thu 08 May 2014 03:19:37 AM JST
deleteproperty
* Thu 08 May 2014 03:19:47 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 03:20:11 AM JST
DeleteProperty
* Thu 08 May 2014 03:20:30 AM JST
getgeometry
* Thu 08 May 2014 03:20:44 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 03:21:08 AM JST
GetGeometry
* Thu 08 May 2014 03:21:58 AM JST
getproperty
* Thu 08 May 2014 03:22:09 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 03:22:48 AM JST
GetProperty
* Thu 08 May 2014 03:23:40 AM JST
listproperties
* Thu 08 May 2014 03:24:02 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 03:24:28 AM JST
ListProperties
* Thu 08 May 2014 03:24:45 AM JST
querytree
* Thu 08 May 2014 03:24:57 AM JST
from xcb2.xconnection.wrapcore.${1:$(s-downcase text)}.${1:$(s-downcase text)} import $1, $1${2:Checked}

__all__ = [ '$1', '$1$2', ]

* Thu 08 May 2014 03:25:20 AM JST
QueryTree
* Thu 08 May 2014 03:34:05 AM JST
getproperty.GetProperty
* Thu 08 May 2014 03:34:31 AM JST
Uncheck
* Thu 08 May 2014 03:35:15 AM JST
SendEvent
* Thu 08 May 2014 03:35:41 AM JST
SendEventChecked
* Thu 08 May 2014 03:36:00 AM JST
ConfigureWindow
* Thu 08 May 2014 03:36:17 AM JST
ConfigureWindowChecked
* Thu 08 May 2014 03:36:35 AM JST
ListProperties
* Thu 08 May 2014 03:37:00 AM JST
ListPropertiesUnchecked
* Thu 08 May 2014 03:37:19 AM JST
ChangeProperty
* Thu 08 May 2014 03:37:33 AM JST
ChangePropertyChecked
* Thu 08 May 2014 03:37:54 AM JST
DeleteProperty
* Thu 08 May 2014 03:38:09 AM JST
DeletePropertyChecked
* Thu 08 May 2014 03:39:45 AM JST
ChangeWindowAttributes
* Thu 08 May 2014 03:40:11 AM JST
ChangeWindowAttributesChecked
* Thu 08 May 2014 03:40:25 AM JST
changewindowattributes
* Thu 08 May 2014 03:40:38 AM JST
GetGeometry
* Thu 08 May 2014 03:41:01 AM JST
GetGeometryUnchecked
* Thu 08 May 2014 03:41:19 AM JST
getgeometry
* Thu 08 May 2014 03:41:31 AM JST
UngrabButton
* Thu 08 May 2014 03:42:00 AM JST
UngrabButtonChecked
* Thu 08 May 2014 03:42:12 AM JST
ungrabbutton
* Thu 08 May 2014 03:42:25 AM JST
GrabButton
* Thu 08 May 2014 03:42:51 AM JST
GrabButtonChecked
* Thu 08 May 2014 03:43:05 AM JST
grabbutton
* Thu 08 May 2014 03:43:15 AM JST
GrabKey
* Thu 08 May 2014 03:43:32 AM JST
GrabKeyChecked
* Thu 08 May 2014 03:43:46 AM JST
UngrabKey
* Thu 08 May 2014 03:43:58 AM JST
UngrabKeyChecked
* Thu 08 May 2014 03:44:06 AM JST
ungrabkey
* Thu 08 May 2014 03:44:25 AM JST
QueryTree
* Thu 08 May 2014 03:44:46 AM JST
QueryTreeUnchecked
* Thu 08 May 2014 03:45:01 AM JST
querytree
* Thu 08 May 2014 03:45:12 AM JST
SetInputFocus
* Thu 08 May 2014 03:45:28 AM JST
SetInputFocusChecked
* Thu 08 May 2014 03:45:36 AM JST
setinputfocus
* Thu 08 May 2014 03:45:45 AM JST
RotateProperties
* Thu 08 May 2014 03:46:05 AM JST
RotatePropertiesChecked
* Thu 08 May 2014 03:46:12 AM JST
rotateproperties
* Thu 08 May 2014 03:49:25 AM JST
GetPropertyUnchecked
* Thu 08 May 2014 10:37:54 AM JST
xproto'
* Thu 08 May 2014 10:46:05 AM JST
xconnection.
* Thu 08 May 2014 10:46:08 AM JST
wrapcore
* Thu 08 May 2014 10:47:02 AM JST
xconnection.
* Thu 08 May 2014 10:47:09 AM JST
WrapCore
* Thu 08 May 2014 10:50:04 AM JST
class ConnectionAbstract(object):
    r"""SUMMARY
    """

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        self.connection = connection
        self.display = connection.display

    @property
    def base_connection(self, ):
        r"""SUMMARY

        base_connection()

        @Return:
        """
        return self.connection.connection

    @property
    def core(self, ):
        r"""SUMMARY

        core()

        @Return:
        """
        return self.base_connection.core

* Thu 08 May 2014 10:50:57 AM JST
xconnection.
* Thu 08 May 2014 10:51:00 AM JST
xconnection.
* Thu 08 May 2014 10:51:21 AM JST
corewindow
* Thu 08 May 2014 10:54:04 AM JST
connection
* Thu 08 May 2014 10:54:25 AM JST
def connect(*args, **kwargs):
    r"""SUMMARY

    connection(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    return XConnection.get_instance(*args, **kwargs)

* Thu 08 May 2014 11:58:20 AM JST
alloccolor
* Thu 08 May 2014 12:07:14 PM JST
wrapcore.
* Thu 08 May 2014 12:07:14 PM JST
xconnection.wrapcore.
* Thu 08 May 2014 12:07:51 PM JST
xconnection.wrapcore
* Thu 08 May 2014 12:11:16 PM JST
xproto
* Thu 08 May 2014 12:11:34 PM JST
xproto
* Thu 08 May 2014 12:11:42 PM JST
define.
* Thu 08 May 2014 12:17:35 PM JST
alloccolor
* Thu 08 May 2014 12:17:54 PM JST

* Thu 08 May 2014 12:17:55 PM JST
alloccolor
* Thu 08 May 2014 12:19:29 PM JST
alloccolorcells
* Thu 08 May 2014 12:19:51 PM JST
alloccolorplanes
* Thu 08 May 2014 12:20:02 PM JST
allocnamedcolor
* Thu 08 May 2014 12:20:03 PM JST
allowevents
* Thu 08 May 2014 12:20:03 PM JST
bell
* Thu 08 May 2014 12:20:04 PM JST
changeactivepointergrab
* Thu 08 May 2014 12:20:05 PM JST
changegc
* Thu 08 May 2014 12:20:06 PM JST
changekeyboardcontrol
* Thu 08 May 2014 12:20:07 PM JST
changekeyboardmapping
* Thu 08 May 2014 12:20:07 PM JST
changepointercontrol
* Thu 08 May 2014 12:20:08 PM JST
changeproperty
* Thu 08 May 2014 12:20:08 PM JST
changesaveset
* Thu 08 May 2014 12:20:09 PM JST
changewindowattributes
* Thu 08 May 2014 12:20:10 PM JST
circulatewindow
* Thu 08 May 2014 12:20:10 PM JST
cleararea
* Thu 08 May 2014 12:20:11 PM JST
closefont
* Thu 08 May 2014 12:20:11 PM JST
configurewindow
* Thu 08 May 2014 12:20:12 PM JST
convertselection
* Thu 08 May 2014 12:20:12 PM JST
copyarea
* Thu 08 May 2014 12:20:12 PM JST
copycolormapandfree
* Thu 08 May 2014 12:20:13 PM JST
copygc
* Thu 08 May 2014 12:20:13 PM JST
copyplane
* Thu 08 May 2014 12:20:14 PM JST
createcolormap
* Thu 08 May 2014 12:20:14 PM JST
createcursor
* Thu 08 May 2014 12:20:15 PM JST
creategc
* Thu 08 May 2014 12:20:15 PM JST
createglyphcursor
* Thu 08 May 2014 12:20:16 PM JST
createpixmap
* Thu 08 May 2014 12:20:16 PM JST
createwindow
* Thu 08 May 2014 12:20:17 PM JST
deleteproperty
* Thu 08 May 2014 12:20:17 PM JST
destroysubwindows
* Thu 08 May 2014 12:20:18 PM JST
destroywindow
* Thu 08 May 2014 12:20:18 PM JST
fillpoly
* Thu 08 May 2014 12:20:20 PM JST
forcescreensaver
* Thu 08 May 2014 12:20:21 PM JST
freecolormap
* Thu 08 May 2014 12:20:21 PM JST
freecolors
* Thu 08 May 2014 12:20:22 PM JST
freecursor
* Thu 08 May 2014 12:20:22 PM JST
freegc
* Thu 08 May 2014 12:20:23 PM JST
freepixmap
* Thu 08 May 2014 12:20:23 PM JST
getatomname
* Thu 08 May 2014 12:20:24 PM JST
getfontpath
* Thu 08 May 2014 12:20:24 PM JST
getgeometry
* Thu 08 May 2014 12:20:24 PM JST
getimage
* Thu 08 May 2014 12:20:25 PM JST
getinputfocus
* Thu 08 May 2014 12:20:25 PM JST
getkeyboardcontrol
* Thu 08 May 2014 12:20:26 PM JST
getkeyboardmapping
* Thu 08 May 2014 12:20:26 PM JST
getmodifiermapping
* Thu 08 May 2014 12:20:26 PM JST
getmotionevents
* Thu 08 May 2014 12:20:26 PM JST
getpointercontrol
* Thu 08 May 2014 12:20:27 PM JST
getpointermapping
* Thu 08 May 2014 12:20:27 PM JST
getproperty
* Thu 08 May 2014 12:20:28 PM JST
getselectionowner
* Thu 08 May 2014 12:20:28 PM JST
getwindowattributes
* Thu 08 May 2014 12:20:28 PM JST
grabbutton
* Thu 08 May 2014 12:20:28 PM JST
grabkey
* Thu 08 May 2014 12:20:29 PM JST
grabkeyboard
* Thu 08 May 2014 12:20:29 PM JST
grabpointer
* Thu 08 May 2014 12:20:29 PM JST
grabserver
* Thu 08 May 2014 12:20:29 PM JST
imagetext16
* Thu 08 May 2014 12:20:30 PM JST
imagetext8
* Thu 08 May 2014 12:20:30 PM JST
installcolormap
* Thu 08 May 2014 12:20:30 PM JST
internatom
* Thu 08 May 2014 12:20:30 PM JST
killclient
* Thu 08 May 2014 12:20:30 PM JST
listextensions
* Thu 08 May 2014 12:20:31 PM JST
listfonts
* Thu 08 May 2014 12:20:31 PM JST
listfontswithinfo
* Thu 08 May 2014 12:20:31 PM JST
listinstalledcolormaps
* Thu 08 May 2014 12:20:32 PM JST
listproperties
* Thu 08 May 2014 12:20:32 PM JST
lookupcolor
* Thu 08 May 2014 12:20:33 PM JST
mapsubwindows
* Thu 08 May 2014 12:20:33 PM JST
mapwindow
* Thu 08 May 2014 12:20:33 PM JST
nooperation
* Thu 08 May 2014 12:20:33 PM JST
openfont
* Thu 08 May 2014 12:20:33 PM JST
polyarc
* Thu 08 May 2014 12:20:34 PM JST
polyfillarc
* Thu 08 May 2014 12:20:34 PM JST
polyfillrectangle
* Thu 08 May 2014 12:20:34 PM JST
polyline
* Thu 08 May 2014 12:20:35 PM JST
polypoint
* Thu 08 May 2014 12:20:35 PM JST
polyrectangle
* Thu 08 May 2014 12:20:35 PM JST
polysegment
* Thu 08 May 2014 12:20:35 PM JST
polytext16
* Thu 08 May 2014 12:20:35 PM JST
polytext8
* Thu 08 May 2014 12:20:36 PM JST
putimage
* Thu 08 May 2014 12:20:36 PM JST
querybestsize
* Thu 08 May 2014 12:20:36 PM JST
querycolors
* Thu 08 May 2014 12:20:37 PM JST
queryextension
* Thu 08 May 2014 12:20:37 PM JST
queryfont
* Thu 08 May 2014 12:20:38 PM JST
querypointer
* Thu 08 May 2014 12:20:38 PM JST
querytextextents
* Thu 08 May 2014 12:20:38 PM JST
querytree
* Thu 08 May 2014 12:20:38 PM JST
recolorcursor
* Thu 08 May 2014 12:20:39 PM JST
reparentwindow
* Thu 08 May 2014 12:20:39 PM JST
rotateproperties
* Thu 08 May 2014 12:20:39 PM JST
sendevent
* Thu 08 May 2014 12:20:39 PM JST
setaccesscontrol
* Thu 08 May 2014 12:20:40 PM JST
setcliprectangles
* Thu 08 May 2014 12:20:40 PM JST
setclosedownmode
* Thu 08 May 2014 12:20:40 PM JST
setdashes
* Thu 08 May 2014 12:20:41 PM JST
setfontpath
* Thu 08 May 2014 12:20:41 PM JST
setinputfocus
* Thu 08 May 2014 12:20:41 PM JST
setmodifiermapping
* Thu 08 May 2014 12:20:41 PM JST
setpointermapping
* Thu 08 May 2014 12:20:42 PM JST
setselectionowner
* Thu 08 May 2014 12:20:42 PM JST
storecolors
* Thu 08 May 2014 12:20:42 PM JST
storenamedcolor
* Thu 08 May 2014 12:20:43 PM JST
translatecoordinates
* Thu 08 May 2014 12:20:43 PM JST
ungrabbutton
* Thu 08 May 2014 12:20:44 PM JST
ungrabkey
* Thu 08 May 2014 12:20:44 PM JST
ungrabkeyboard
* Thu 08 May 2014 12:20:44 PM JST
ungrabpointer
* Thu 08 May 2014 12:20:44 PM JST
ungrabserver
* Thu 08 May 2014 12:20:45 PM JST
uninstallcolormap
* Thu 08 May 2014 12:20:46 PM JST
unmapsubwindows
* Thu 08 May 2014 12:20:46 PM JST
unmapwindow
* Thu 08 May 2014 12:20:47 PM JST
warppointer
* Thu 08 May 2014 12:20:48 PM JST
__init__.py
* Thu 08 May 2014 12:20:50 PM JST

* Thu 08 May 2014 12:20:50 PM JST

* Thu 08 May 2014 12:20:50 PM JST
from xcb2.xproto.ext.__init__.py import *

* Thu 08 May 2014 12:21:56 PM JST
wrapcore.
* Thu 08 May 2014 12:22:05 PM JST
wrap
* Thu 08 May 2014 12:24:02 PM JST
wrapcore
* Thu 08 May 2014 12:25:40 PM JST
xconnection
* Thu 08 May 2014 12:25:45 PM JST
wrapcore
* Thu 08 May 2014 12:25:49 PM JST
xconnection
* Thu 08 May 2014 12:26:12 PM JST
abstract
* Thu 08 May 2014 12:26:13 PM JST
xproto.abstract
* Thu 08 May 2014 12:26:22 PM JST
xconnection
* Thu 08 May 2014 12:26:27 PM JST
xproto
* Thu 08 May 2014 12:26:31 PM JST
corewindow
* Thu 08 May 2014 12:28:15 PM JST
class ConnectionAbstract(object):
    r"""SUMMARY
    """

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        self.connection = connection
        self.display = connection.display

    @property
    def base_connection(self, ):
        r"""SUMMARY

        base_connection()

        @Return:
        """
        return self.connection.connection

    @property
    def core(self, ):
        r"""SUMMARY

        core()

        @Return:
        """
        return self.base_connection.core


def connect(*args, **kwargs):
    r"""SUMMARY

    connection(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    return Connection.get_instance(*args, **kwargs)

* Thu 08 May 2014 12:28:22 PM JST
def connect(*args, **kwargs):
    r"""SUMMARY

    connection(*args, **kwargs)

    @Arguments:
    - `*args`:
    - `**kwargs`:

    @Return:
    """
    return Connection.get_instance(*args, **kwargs)

* Thu 08 May 2014 12:28:50 PM JST
xconnection
* Thu 08 May 2014 12:29:21 PM JST
xconnection.
* Thu 08 May 2014 12:29:28 PM JST
xconnection.
* Thu 08 May 2014 12:29:34 PM JST
wrapcore.
* Thu 08 May 2014 12:29:59 PM JST
import xcb2
* Thu 08 May 2014 12:30:27 PM JST
xconnection.
* Thu 08 May 2014 12:30:31 PM JST
xconnection.
* Thu 08 May 2014 12:30:34 PM JST
xconnection.
* Thu 08 May 2014 12:30:50 PM JST
xconnection.
* Thu 08 May 2014 12:30:50 PM JST
xconnection.
* Thu 08 May 2014 12:30:50 PM JST
xconnection.
* Thu 08 May 2014 12:31:07 PM JST
xconnection.
* Thu 08 May 2014 12:31:07 PM JST
xconnection.
* Thu 08 May 2014 12:31:16 PM JST
import xcb2
* Thu 08 May 2014 12:31:32 PM JST
xconnection.
* Thu 08 May 2014 12:31:32 PM JST
xconnection.
* Thu 08 May 2014 12:31:38 PM JST
corewindow 
* Thu 08 May 2014 12:31:42 PM JST
WindowList
* Thu 08 May 2014 12:31:43 PM JST

* Thu 08 May 2014 12:31:44 PM JST

* Thu 08 May 2014 12:31:44 PM JST
from xcb2.window.windowlist import 

* Thu 08 May 2014 12:31:57 PM JST
import xcb2
* Thu 08 May 2014 12:32:12 PM JST
xconnection.
* Thu 08 May 2014 12:32:23 PM JST
import xcb2
* Thu 08 May 2014 12:33:22 PM JST
ext
* Thu 08 May 2014 12:33:53 PM JST
deleteproperty
* Thu 08 May 2014 12:33:53 PM JST
deleteproperty
* Thu 08 May 2014 12:33:53 PM JST
changeproperty
* Thu 08 May 2014 12:33:53 PM JST
changeproperty
* Thu 08 May 2014 12:33:53 PM JST
listproperties
* Thu 08 May 2014 12:33:53 PM JST
listproperties
* Thu 08 May 2014 12:33:59 PM JST
changewindowattributes
* Thu 08 May 2014 12:34:02 PM JST
changewindowattributes
* Thu 08 May 2014 12:34:05 PM JST
        
* Thu 08 May 2014 12:34:06 PM JST
        
* Thu 08 May 2014 12:34:22 PM JST
rotateproperties
* Thu 08 May 2014 12:34:22 PM JST
rotateproperties
* Thu 08 May 2014 12:34:22 PM JST
setinputfocus
* Thu 08 May 2014 12:34:23 PM JST
setinputfocus
* Thu 08 May 2014 12:34:23 PM JST
querytree
* Thu 08 May 2014 12:34:23 PM JST
querytree
* Thu 08 May 2014 12:34:23 PM JST
ungrabkey
* Thu 08 May 2014 12:34:23 PM JST
ungrabkey
* Thu 08 May 2014 12:34:23 PM JST
grabkey
* Thu 08 May 2014 12:34:23 PM JST
grabkey
* Thu 08 May 2014 12:34:23 PM JST
grabbutton
* Thu 08 May 2014 12:34:23 PM JST
grabbutton
* Thu 08 May 2014 12:34:23 PM JST
ungrabbutton
* Thu 08 May 2014 12:34:23 PM JST
ungrabbutton
* Thu 08 May 2014 12:34:23 PM JST
getgeometry
* Thu 08 May 2014 12:34:23 PM JST
getgeometry
* Thu 08 May 2014 12:34:34 PM JST
import xcb2
* Thu 08 May 2014 12:41:14 PM JST
wrap
* Thu 08 May 2014 12:41:15 PM JST
ext.wrap
* Thu 08 May 2014 12:41:15 PM JST
xproto.ext.wrap
* Thu 08 May 2014 12:42:04 PM JST
xconnection.
* Thu 08 May 2014 12:42:18 PM JST
wrapcore
* Thu 08 May 2014 12:42:29 PM JST
wrap
* Thu 08 May 2014 12:42:36 PM JST
wrap
* Thu 08 May 2014 12:43:32 PM JST
xconnection.
* Thu 08 May 2014 12:43:32 PM JST
xconnection.
* Thu 08 May 2014 12:43:32 PM JST
xconnection.
* Thu 08 May 2014 12:43:42 PM JST
WindowRootType
* Thu 08 May 2014 12:43:46 PM JST

* Thu 08 May 2014 12:43:46 PM JST

* Thu 08 May 2014 12:43:46 PM JST
from xcb2.window.windowtypes import WindowRootType

* Thu 08 May 2014 12:43:48 PM JST
corewindow
* Thu 08 May 2014 12:43:51 PM JST
wrapcore.
* Thu 08 May 2014 12:44:36 PM JST
ext
* Thu 08 May 2014 12:44:54 PM JST
ext.
* Thu 08 May 2014 12:44:57 PM JST
wrap
* Thu 08 May 2014 12:44:58 PM JST
ext.wrap
* Thu 08 May 2014 12:45:24 PM JST
wrap
* Thu 08 May 2014 12:45:25 PM JST
ext.wrap
* Thu 08 May 2014 12:46:13 PM JST

* Thu 08 May 2014 12:46:13 PM JST

* Thu 08 May 2014 12:46:13 PM JST
# from xcb2.xproto.define import EventMask

* Thu 08 May 2014 12:47:01 PM JST
from xcb.xproto import EventMask
* Thu 08 May 2014 12:47:20 PM JST
from xcb.xproto import EventMask
* Thu 08 May 2014 12:47:31 PM JST
from xcb.xproto import EventMask
* Thu 08 May 2014 12:47:57 PM JST
ext
* Thu 08 May 2014 12:49:56 PM JST

* Thu 08 May 2014 12:49:56 PM JST

* Thu 08 May 2014 12:49:56 PM JST
from xcb2.xproto import define

* Thu 08 May 2014 12:49:59 PM JST
ext.
* Thu 08 May 2014 12:50:12 PM JST
define
* Thu 08 May 2014 12:51:25 PM JST
xconnection.
* Thu 08 May 2014 01:34:49 PM JST
AllocColor                       QueryFontUnchecked             ungrabbutton     
AllocColorCells                  QueryPointer                   ungrabkey        
AllocColorCellsUnchecked         QueryPointerUnchecked          ungrabkeyboard   
AllocColorPlanes                 QueryTextExtents               ungrabpointer    
AllocColorPlanesUnchecked        QueryTextExtentsUnchecked      ungrabserver     
AllocNamedColor                  QueryTree                      uninstallcolormap
AllocNamedColorUnchecked         QueryTreeUnchecked             unmapsubwindows  
AllowEvents                      RecolorCursor                  unmapwindow      
AllowEventsChecked               RecolorCursorChecked           warppointer      
Bell                             ReparentWindow               
BellChecked                      ReparentWindowChecked        
ChangeActivePointerGrab          RotateProperties             
ChangeActivePointerGrabChecked   RotatePropertiesChecked      
ChangeGC                         SendEvent                    
ChangeGCChecked                  SendEventChecked             
ChangeKeyboardControl            SetAccessControl             
ChangeKeyboardControlChecked     SetAccessControlChecked      
ChangeKeyboardMapping            SetClipRectangles            
ChangeKeyboardMappingChecked     SetClipRectanglesChecked     
ChangePointerControl             SetCloseDownMode             
ChangePointerControlChecked      SetCloseDownModeChecked      
ChangeProperty                   SetDashes                    
ChangePropertyChecked            SetDashesChecked             
ChangeSaveSet                    SetFontPath                  
ChangeSaveSetChecked             SetFontPathChecked           
ChangeWindowAttributes           SetInputFocus                
ChangeWindowAttributesChecked    SetInputFocusChecked         
CirculateWindow                  SetModifierMapping           
CirculateWindowChecked           SetModifierMappingUnchecked  
ClearArea                        SetPointerMapping            
ClearAreaChecked                 SetPointerMappingUnchecked   
CloseFont                        SetSelectionOwner            
CloseFontChecked                 SetSelectionOwnerChecked     
ConfigureWindow                  StoreColors                  
ConfigureWindowChecked           StoreColorsChecked           
ConvertSelection                 StoreNamedColor              
ConvertSelectionChecked          StoreNamedColorChecked       
CopyArea                         TranslateCoordinates         
CopyAreaChecked                  TranslateCoordinatesUnchecked
CopyColormapAndFree              UngrabButton                 
CopyColormapAndFreeChecked       UngrabButtonChecked          
CopyGC                           UngrabKey                    
CopyGCChecked                    UngrabKeyChecked             
CopyPlane                        UngrabKeyboard               
CopyPlaneChecked                 UngrabKeyboardChecked        
CreateColormap                   UngrabPointer                
CreateColormapChecked            UngrabPointerChecked         
CreateCursor                     UngrabServer                 
CreateCursorChecked              UngrabServerChecked          
CreateGC                         UninstallColormap            
CreateGCChecked                  UninstallColormapChecked     
CreateGlyphCursor                UnmapSubwindows              
CreateGlyphCursorChecked         UnmapSubwindowsChecked       
CreatePixmap                     UnmapWindow                  
CreatePixmapChecked              UnmapWindowChecked           
CreateWindow                     WarpPointer                  
CreateWindowChecked              WarpPointerChecked           
DeleteProperty                   __all__                      
DeletePropertyChecked            __builtins__                 
DestroySubwindows                __doc__                      
DestroySubwindowsChecked         __file__                     
DestroyWindow                    __name__                     
DestroyWindowChecked             __package__                  
FillPoly                         __path__                     
FillPolyChecked                  alloccolor                   
ForceScreenSaver                 alloccolorcells              
ForceScreenSaverChecked          alloccolorplanes             
FreeColormap                     allocnamedcolor              
FreeColormapChecked              allowevents                  
FreeColors                       bell                         
FreeColorsChecked                changeactivepointergrab      
FreeCursor                       changegc                     
FreeCursorChecked                changekeyboardcontrol        
FreeGC                           changekeyboardmapping        
FreeGCChecked                    changepointercontrol         
FreePixmap                       changeproperty               
FreePixmapChecked                changesaveset                
GetAtomName                      changewindowattributes       
GetAtomNameUnchecked             circulatewindow              
GetFontPath                      cleararea                    
GetFontPathUnchecked             closefont                    
GetGeometry                      configurewindow              
GetGeometryUnchecked             convertselection             
GetImage                         copyarea                     
GetImageUnchecked                copycolormapandfree          
GetInputFocus                    copygc                       
GetInputFocusUnchecked           copyplane                    
GetKeyboardControl               createcolormap               
GetKeyboardControlUnchecked      createcursor                 
GetKeyboardMapping               creategc                     
GetKeyboardMappingUnchecked      createglyphcursor            
GetModifierMapping               createpixmap                 
GetModifierMappingUnchecked      createwindow                 
GetMotionEvents                  deleteproperty               
GetMotionEventsUnchecked         destroysubwindows            
GetPointerControl                destroywindow                
GetPointerControlUnchecked       fillpoly                     
GetPointerMapping                forcescreensaver             
GetPointerMappingUnchecked       freecolormap                 
GetProperty                      freecolors                   
GetPropertyUnchecked             freecursor                   
GetSelectionOwner                freegc                       
GetSelectionOwnerUnchecked       freepixmap                   
GetWindowAttributes              getatomname                  
GetWindowAttributesUnchecked     getfontpath                  
GrabButton                       getgeometry                  
GrabButtonChecked                getimage                     
GrabKey                          getinputfocus                
GrabKeyChecked                   getkeyboardcontrol           
GrabKeyboard                     getkeyboardmapping           
GrabKeyboardUnchecked            getmodifiermapping           
GrabPointer                      getmotionevents              
GrabPointerUnchecked             getpointercontrol            
GrabServer                       getpointermapping            
GrabServerChecked                getproperty                  
ImageText16                      getselectionowner            
ImageText16Checked               getwindowattributes          
ImageText8                       grabbutton                   
ImageText8Checked                grabkey                      
InstallColormap                  grabkeyboard                 
InstallColormapChecked           grabpointer                  
InternAtom                       grabserver                   
InternAtomUnchecked              imagetext16                  
KillClient                       imagetext8                   
KillClientChecked                installcolormap              
ListExtensions                   internatom                   
ListExtensionsUnchecked          killclient                   
ListFonts                        listextensions               
ListFontsUnchecked               listfonts                    
ListFontsWithInfo                listfontswithinfo            
ListFontsWithInfoUnchecked       listinstalledcolormaps       
ListInstalledColormaps           listproperties               
ListInstalledColormapsUnchecked  lookupcolor                  
ListProperties                   mapsubwindows                
ListPropertiesUnchecked          mapwindow                    
LookupColor                      nooperation                  
LookupColorUnchecked             openfont                     
MapSubwindows                    polyarc                      
MapSubwindowsChecked             polyfillarc                  
MapWindow                        polyfillrectangle            
MapWindowChecked                 polyline                     
NoOperation                      polypoint                    
NoOperationChecked               polyrectangle                
OpenFont                         polysegment                  
OpenFontChecked                  polytext16                   
PolyArc                          polytext8                    
PolyArcChecked                   putimage                     
PolyFillRectangle                querybestsize                
PolyFillRectangleChecked         querycolors                  
PolyLine                         queryextension               
PolyLineChecked                  queryfont                    
PolyPoint                        querypointer                 
PolyPointChecked                 querytextextents             
PolyRectangle                    querytree                    
PolyRectangleChecked             recolorcursor                
PolySegment                      reparentwindow               
PolySegmentChecked               rotateproperties             
PolyText16                       sendevent                    
PolyText16Checked                setaccesscontrol             
PolyText8                        setcliprectangles            
PolyText8Checked                 setclosedownmode             
PutImage                         setdashes                    
PutImageChecked                  setfontpath                  
QueryBestSize                    setinputfocus                
QueryBestSizeUnchecked           setmodifiermapping           
QueryColors                      setpointermapping            
QueryColorsUnchecked             setselectionowner            
QueryExtension                   storecolors                  
QueryExtensionUnchecked          storenamedcolor              
QueryFont                        translatecoordinates        

* Thu 08 May 2014 01:35:18 PM JST
ungrabbutton       
ungrabkey          
ungrabkeyboard     
ungrabpointer      
ungrabserver       
uninstallcolormap  
unmapsubwindows    
unmapwindow        
warppointer        
                   

* Thu 08 May 2014 01:38:17 PM JST
AllocColor
AllocColorCells
AllocColorCellsUnchecked
AllocColorPlanes
AllocColorPlanesUnchecked
AllocNamedColor
AllocNamedColorUnchecked
AllowEvents
AllowEventsChecked
Bell
BellChecked
ChangeActivePointerGrab
ChangeActivePointerGrabChecked
ChangeGC
ChangeGCChecked
ChangeKeyboardControl
ChangeKeyboardControlChecked
ChangeKeyboardMapping
ChangeKeyboardMappingChecked
ChangePointerControl
ChangePointerControlChecked
ChangeProperty
ChangePropertyChecked
ChangeSaveSet
ChangeSaveSetChecked
ChangeWindowAttributes
ChangeWindowAttributesChecked
CirculateWindow
CirculateWindowChecked
ClearArea
ClearAreaChecked
CloseFont
CloseFontChecked
ConfigureWindow
ConfigureWindowChecked
ConvertSelection
ConvertSelectionChecked
CopyArea
CopyAreaChecked
CopyColormapAndFree
CopyColormapAndFreeChecked
CopyGC
CopyGCChecked
CopyPlane
CopyPlaneChecked
CreateColormap
CreateColormapChecked
CreateCursor
CreateCursorChecked
CreateGC
CreateGCChecked
CreateGlyphCursor
CreateGlyphCursorChecked
CreatePixmap
CreatePixmapChecked
CreateWindow
CreateWindowChecked
DeleteProperty
DeletePropertyChecked
DestroySubwindows
DestroySubwindowsChecked
DestroyWindow
DestroyWindowChecked
FillPoly
FillPolyChecked
ForceScreenSaver
ForceScreenSaverChecked
FreeColormap
FreeColormapChecked
FreeColors
FreeColorsChecked
FreeCursor
FreeCursorChecked
FreeGC
FreeGCChecked
FreePixmap
FreePixmapChecked
GetAtomName
GetAtomNameUnchecked
GetFontPath
GetFontPathUnchecked
GetGeometry
GetGeometryUnchecked
GetImage
GetImageUnchecked
GetInputFocus
GetInputFocusUnchecked
GetKeyboardControl
GetKeyboardControlUnchecked
GetKeyboardMapping
GetKeyboardMappingUnchecked
GetModifierMapping
GetModifierMappingUnchecked
GetMotionEvents
GetMotionEventsUnchecked
GetPointerControl
GetPointerControlUnchecked
GetPointerMapping
GetPointerMappingUnchecked
GetProperty
GetPropertyUnchecked
GetSelectionOwner
GetSelectionOwnerUnchecked
GetWindowAttributes
GetWindowAttributesUnchecked
GrabButton
GrabButtonChecked
GrabKey
GrabKeyChecked
GrabKeyboard
GrabKeyboardUnchecked
GrabPointer
GrabPointerUnchecked
GrabServer
GrabServerChecked
ImageText16
ImageText16Checked
ImageText8
ImageText8Checked
InstallColormap
InstallColormapChecked
InternAtom
InternAtomUnchecked
KillClient
KillClientChecked
ListExtensions
ListExtensionsUnchecked
ListFonts
ListFontsUnchecked
ListFontsWithInfo
ListFontsWithInfoUnchecked
ListInstalledColormaps
ListInstalledColormapsUnchecked
ListProperties
ListPropertiesUnchecked
LookupColor
LookupColorUnchecked
MapSubwindows
MapSubwindowsChecked
MapWindow
MapWindowChecked
NoOperation
NoOperationChecked
OpenFont
OpenFontChecked
PolyArc
PolyArcChecked
PolyFillRectangle
PolyFillRectangleChecked
PolyLine
PolyLineChecked
PolyPoint
PolyPointChecked
PolyRectangle
PolyRectangleChecked
PolySegment
PolySegmentChecked
PolyText16
PolyText16Checked
PolyText8
PolyText8Checked
PutImage
PutImageChecked
QueryBestSize
QueryBestSizeUnchecked
QueryColors
QueryColorsUnchecked
QueryExtension
QueryExtensionUnchecked
QueryFont
QueryFontUnchecked
QueryPointer
QueryPointerUnchecked
QueryTextExtents
QueryTextExtentsUnchecked
QueryTree
QueryTreeUnchecked
RecolorCursor
RecolorCursorChecked
ReparentWindow
ReparentWindowChecked
RotateProperties
RotatePropertiesChecked
SendEvent
SendEventChecked 
SetAccessControl 
SetAccessControlChecked 
SetClipRectangles 
SetClipRectanglesChecked 
SetCloseDownMode 
SetCloseDownModeChecked 
SetDashes 
SetDashesChecked 
SetFontPath 
SetFontPathChecked 
SetInputFocus 
SetInputFocusChecked 
SetModifierMapping 
SetModifierMappingUnchecked 
SetPointerMapping 
SetPointerMappingUnchecked 
SetSelectionOwner 
SetSelectionOwnerChecked 
StoreColors 
StoreColorsChecked 
StoreNamedColor 
StoreNamedColorChecked 
TranslateCoordinates 
TranslateCoordinatesUnchecked 
UngrabButton 
UngrabButtonChecked 
UngrabKey 
UngrabKeyChecked 
UngrabKeyboard 
UngrabKeyboardChecked 
UngrabPointer 
UngrabPointerChecked 
UngrabServer 
UngrabServerChecked 
UninstallColormap 
UninstallColormapChecked
UnmapSubwindows
UnmapSubwindowsChecked
UnmapWindow
UnmapWindowChecked
WarpPointer
WarpPointerChecked

* Thu 08 May 2014 01:38:42 PM JST
AllocColor
AllocColorCells
AllocColorCellsUnchecked
AllocColorPlanes
AllocColorPlanesUnchecked
AllocNamedColor
AllocNamedColorUnchecked
AllowEvents
AllowEventsChecked
Bell
BellChecked
ChangeActivePointerGrab
ChangeActivePointerGrabChecked
ChangeGC
ChangeGCChecked
ChangeKeyboardControl
ChangeKeyboardControlChecked
ChangeKeyboardMapping
ChangeKeyboardMappingChecked
ChangePointerControl
ChangePointerControlChecked
ChangeProperty
ChangePropertyChecked
ChangeSaveSet
ChangeSaveSetChecked
ChangeWindowAttributes
ChangeWindowAttributesChecked
CirculateWindow
CirculateWindowChecked
ClearArea
ClearAreaChecked
CloseFont
CloseFontChecked
ConfigureWindow
ConfigureWindowChecked
ConvertSelection
ConvertSelectionChecked
CopyArea
CopyAreaChecked
CopyColormapAndFree
CopyColormapAndFreeChecked
CopyGC
CopyGCChecked
CopyPlane
CopyPlaneChecked
CreateColormap
CreateColormapChecked
CreateCursor
CreateCursorChecked
CreateGC
CreateGCChecked
CreateGlyphCursor
CreateGlyphCursorChecked
CreatePixmap
CreatePixmapChecked
CreateWindow
CreateWindowChecked
DeleteProperty
DeletePropertyChecked
DestroySubwindows
DestroySubwindowsChecked
DestroyWindow
DestroyWindowChecked
FillPoly
FillPolyChecked
ForceScreenSaver
ForceScreenSaverChecked
FreeColormap
FreeColormapChecked
FreeColors
FreeColorsChecked
FreeCursor
FreeCursorChecked
FreeGC
FreeGCChecked
FreePixmap
FreePixmapChecked
GetAtomName
GetAtomNameUnchecked
GetFontPath
GetFontPathUnchecked
GetGeometry
GetGeometryUnchecked
GetImage
GetImageUnchecked
GetInputFocus
GetInputFocusUnchecked
GetKeyboardControl
GetKeyboardControlUnchecked
GetKeyboardMapping
GetKeyboardMappingUnchecked
GetModifierMapping
GetModifierMappingUnchecked
GetMotionEvents
GetMotionEventsUnchecked
GetPointerControl
GetPointerControlUnchecked
GetPointerMapping
GetPointerMappingUnchecked
GetProperty
GetPropertyUnchecked
GetSelectionOwner
GetSelectionOwnerUnchecked
GetWindowAttributes
GetWindowAttributesUnchecked
GrabButton
GrabButtonChecked
GrabKey
GrabKeyChecked
GrabKeyboard
GrabKeyboardUnchecked
GrabPointer
GrabPointerUnchecked
GrabServer
GrabServerChecked
ImageText16
ImageText16Checked
ImageText8
ImageText8Checked
InstallColormap
InstallColormapChecked
InternAtom
InternAtomUnchecked
KillClient
KillClientChecked
ListExtensions
ListExtensionsUnchecked
ListFonts
ListFontsUnchecked
ListFontsWithInfo
ListFontsWithInfoUnchecked
ListInstalledColormaps
ListInstalledColormapsUnchecked
ListProperties
ListPropertiesUnchecked
LookupColor
LookupColorUnchecked
MapSubwindows
MapSubwindowsChecked
MapWindow
MapWindowChecked
NoOperation
NoOperationChecked
OpenFont
OpenFontChecked
PolyArc
PolyArcChecked
PolyFillRectangle
PolyFillRectangleChecked
PolyLine
PolyLineChecked
PolyPoint
PolyPointChecked
PolyRectangle
PolyRectangleChecked
PolySegment
PolySegmentChecked
PolyText16
PolyText16Checked
PolyText8
PolyText8Checked
PutImage
PutImageChecked
QueryBestSize
QueryBestSizeUnchecked
QueryColors
QueryColorsUnchecked
QueryExtension
QueryExtensionUnchecked
QueryFont
QueryFontUnchecked
QueryPointer
QueryPointerUnchecked
QueryTextExtents
QueryTextExtentsUnchecked
QueryTree
QueryTreeUnchecked
RecolorCursor
RecolorCursorChecked
ReparentWindow
ReparentWindowChecked
RotateProperties
RotatePropertiesChecked
SendEvent
SendEventChecked 
SetAccessControl 
SetAccessControlChecked 
SetClipRectangles 
SetClipRectanglesChecked 
SetCloseDownMode 
SetCloseDownModeChecked 
SetDashes 
SetDashesChecked 
SetFontPath 
SetFontPathChecked 
SetInputFocus 
SetInputFocusChecked 
SetModifierMapping 
SetModifierMappingUnchecked 
SetPointerMapping 
SetPointerMappingUnchecked 
SetSelectionOwner 
SetSelectionOwnerChecked 
StoreColors 
StoreColorsChecked 
StoreNamedColor 
StoreNamedColorChecked 
TranslateCoordinates 
TranslateCoordinatesUnchecked 
UngrabButton 
UngrabButtonChecked 
UngrabKey 
UngrabKeyChecked 
UngrabKeyboard 
UngrabKeyboardChecked 
UngrabPointer 
UngrabPointerChecked 
UngrabServer 
UngrabServerChecked 
UninstallColormap 
UninstallColormapChecked
UnmapSubwindows
UnmapSubwindowsChecked
UnmapWindow
UnmapWindowChecked
WarpPointer
WarpPointerChecked

* Thu 08 May 2014 01:38:52 PM JST
AllocColor
AllocColorCells
AllocColorCellsUnchecked
AllocColorPlanes
AllocColorPlanesUnchecked
AllocNamedColor
AllocNamedColorUnchecked
AllowEvents
AllowEventsChecked
Bell
BellChecked
ChangeActivePointerGrab
ChangeActivePointerGrabChecked
ChangeGC
ChangeGCChecked
ChangeKeyboardControl
ChangeKeyboardControlChecked
ChangeKeyboardMapping
ChangeKeyboardMappingChecked
ChangePointerControl
ChangePointerControlChecked
ChangeProperty
ChangePropertyChecked
ChangeSaveSet
ChangeSaveSetChecked
ChangeWindowAttributes
ChangeWindowAttributesChecked
CirculateWindow
CirculateWindowChecked
ClearArea
ClearAreaChecked
CloseFont
CloseFontChecked
ConfigureWindow
ConfigureWindowChecked
ConvertSelection
ConvertSelectionChecked
CopyArea
CopyAreaChecked
CopyColormapAndFree
CopyColormapAndFreeChecked
CopyGC
CopyGCChecked
CopyPlane
CopyPlaneChecked
CreateColormap
CreateColormapChecked
CreateCursor
CreateCursorChecked
CreateGC
CreateGCChecked
CreateGlyphCursor
CreateGlyphCursorChecked
CreatePixmap
CreatePixmapChecked
CreateWindow
CreateWindowChecked
DeleteProperty
DeletePropertyChecked
DestroySubwindows
DestroySubwindowsChecked
DestroyWindow
DestroyWindowChecked
FillPoly
FillPolyChecked
ForceScreenSaver
ForceScreenSaverChecked
FreeColormap
FreeColormapChecked
FreeColors
FreeColorsChecked
FreeCursor
FreeCursorChecked
FreeGC
FreeGCChecked
FreePixmap
FreePixmapChecked
GetAtomName
GetAtomNameUnchecked
GetFontPath
GetFontPathUnchecked
GetGeometry
GetGeometryUnchecked
GetImage
GetImageUnchecked
GetInputFocus
GetInputFocusUnchecked
GetKeyboardControl
GetKeyboardControlUnchecked
GetKeyboardMapping
GetKeyboardMappingUnchecked
GetModifierMapping
GetModifierMappingUnchecked
GetMotionEvents
GetMotionEventsUnchecked
GetPointerControl
GetPointerControlUnchecked
GetPointerMapping
GetPointerMappingUnchecked
GetProperty
GetPropertyUnchecked
GetSelectionOwner
GetSelectionOwnerUnchecked
GetWindowAttributes
GetWindowAttributesUnchecked
GrabButton
GrabButtonChecked
GrabKey
GrabKeyChecked
GrabKeyboard
GrabKeyboardUnchecked
GrabPointer
GrabPointerUnchecked
GrabServer
GrabServerChecked
ImageText16
ImageText16Checked
ImageText8
ImageText8Checked
InstallColormap
InstallColormapChecked
InternAtom
InternAtomUnchecked
KillClient
KillClientChecked
ListExtensions
ListExtensionsUnchecked
ListFonts
ListFontsUnchecked
ListFontsWithInfo
ListFontsWithInfoUnchecked
ListInstalledColormaps
ListInstalledColormapsUnchecked
ListProperties
ListPropertiesUnchecked
LookupColor
LookupColorUnchecked
MapSubwindows
MapSubwindowsChecked
MapWindow
MapWindowChecked
NoOperation
NoOperationChecked
OpenFont
OpenFontChecked
PolyArc
PolyArcChecked
PolyFillRectangle
PolyFillRectangleChecked
PolyLine
PolyLineChecked
PolyPoint
PolyPointChecked
PolyRectangle
PolyRectangleChecked
PolySegment
PolySegmentChecked
PolyText16
PolyText16Checked
PolyText8
PolyText8Checked
PutImage
PutImageChecked
QueryBestSize
QueryBestSizeUnchecked
QueryColors
QueryColorsUnchecked
QueryExtension
QueryExtensionUnchecked
QueryFont
QueryFontUnchecked
QueryPointer
QueryPointerUnchecked
QueryTextExtents
QueryTextExtentsUnchecked
QueryTree
QueryTreeUnchecked
RecolorCursor
RecolorCursorChecked
ReparentWindow
ReparentWindowChecked
RotateProperties
RotatePropertiesChecked
SendEvent
SendEventChecked
SetAccessControl
SetAccessControlChecked
SetClipRectangles
SetClipRectanglesChecked
SetCloseDownMode
SetCloseDownModeChecked
SetDashes
SetDashesChecked
SetFontPath
SetFontPathChecked
SetInputFocus
SetInputFocusChecked
SetModifierMapping
SetModifierMappingUnchecked
SetPointerMapping
SetPointerMappingUnchecked
SetSelectionOwner
SetSelectionOwnerChecked
StoreColors
StoreColorsChecked
StoreNamedColor
StoreNamedColorChecked
TranslateCoordinates
TranslateCoordinatesUnchecked
UngrabButton
UngrabButtonChecked
UngrabKey
UngrabKeyChecked
UngrabKeyboard
UngrabKeyboardChecked
UngrabPointer
UngrabPointerChecked
UngrabServer
UngrabServerChecked
UninstallColormap
UninstallColormapChecked
UnmapSubwindows
UnmapSubwindowsChecked
UnmapWindow
UnmapWindowChecked
WarpPointer
WarpPointerChecked

* Thu 08 May 2014 01:39:11 PM JST
AllocColor
* Thu 08 May 2014 01:39:36 PM JST
AllocColorCells
* Thu 08 May 2014 01:39:37 PM JST
AllocColorCellsUnchecked
* Thu 08 May 2014 01:39:38 PM JST
AllocColorPlanes
* Thu 08 May 2014 01:39:38 PM JST
AllocColorPlanesUnchecked
* Thu 08 May 2014 01:39:39 PM JST
AllocNamedColor
* Thu 08 May 2014 01:39:39 PM JST
AllocNamedColorUnchecked
* Thu 08 May 2014 01:39:39 PM JST
AllowEvents
* Thu 08 May 2014 01:39:40 PM JST
AllowEventsChecked
* Thu 08 May 2014 01:39:40 PM JST
Bell
* Thu 08 May 2014 01:39:40 PM JST
BellChecked
* Thu 08 May 2014 01:39:40 PM JST
ChangeActivePointerGrab
* Thu 08 May 2014 01:39:40 PM JST
ChangeActivePointerGrabChecked
* Thu 08 May 2014 01:39:41 PM JST
ChangeGC
* Thu 08 May 2014 01:39:41 PM JST
ChangeGCChecked
* Thu 08 May 2014 01:39:41 PM JST
ChangeKeyboardControl
* Thu 08 May 2014 01:39:41 PM JST
ChangeKeyboardControlChecked
* Thu 08 May 2014 01:39:41 PM JST
ChangeKeyboardMapping
* Thu 08 May 2014 01:39:42 PM JST
ChangeKeyboardMappingChecked
* Thu 08 May 2014 01:39:42 PM JST
ChangePointerControl
* Thu 08 May 2014 01:39:44 PM JST
ChangePointerControlChecked
* Thu 08 May 2014 01:39:45 PM JST
ChangeProperty
* Thu 08 May 2014 01:39:45 PM JST
ChangePropertyChecked
* Thu 08 May 2014 01:39:45 PM JST
ChangeSaveSet
* Thu 08 May 2014 01:39:45 PM JST
ChangeSaveSetChecked
* Thu 08 May 2014 01:39:46 PM JST
ChangeWindowAttributes
* Thu 08 May 2014 01:39:46 PM JST
ChangeWindowAttributesChecked
* Thu 08 May 2014 01:39:46 PM JST
CirculateWindow
* Thu 08 May 2014 01:39:46 PM JST
CirculateWindowChecked
* Thu 08 May 2014 01:39:47 PM JST
ClearArea
* Thu 08 May 2014 01:39:47 PM JST
ClearAreaChecked
* Thu 08 May 2014 01:39:47 PM JST
CloseFont
* Thu 08 May 2014 01:39:47 PM JST
CloseFontChecked
* Thu 08 May 2014 01:39:47 PM JST
ConfigureWindow
* Thu 08 May 2014 01:39:48 PM JST
ConfigureWindowChecked
* Thu 08 May 2014 01:39:48 PM JST
ConvertSelection
* Thu 08 May 2014 01:39:48 PM JST
ConvertSelectionChecked
* Thu 08 May 2014 01:39:48 PM JST
CopyArea
* Thu 08 May 2014 01:39:48 PM JST
CopyAreaChecked
* Thu 08 May 2014 01:39:49 PM JST
CopyColormapAndFree
* Thu 08 May 2014 01:39:49 PM JST
CopyColormapAndFreeChecked
* Thu 08 May 2014 01:39:49 PM JST
CopyGC
* Thu 08 May 2014 01:39:49 PM JST
CopyGCChecked
* Thu 08 May 2014 01:39:49 PM JST
CopyPlane
* Thu 08 May 2014 01:39:50 PM JST
CopyPlaneChecked
* Thu 08 May 2014 01:39:50 PM JST
CreateColormap
* Thu 08 May 2014 01:39:50 PM JST
CreateColormapChecked
* Thu 08 May 2014 01:39:50 PM JST
CreateCursor
* Thu 08 May 2014 01:39:50 PM JST
CreateCursorChecked
* Thu 08 May 2014 01:39:51 PM JST
CreateGC
* Thu 08 May 2014 01:39:51 PM JST
CreateGCChecked
* Thu 08 May 2014 01:39:51 PM JST
CreateGlyphCursor
* Thu 08 May 2014 01:39:51 PM JST
CreateGlyphCursorChecked
* Thu 08 May 2014 01:39:51 PM JST
CreatePixmap
* Thu 08 May 2014 01:39:52 PM JST
CreatePixmapChecked
* Thu 08 May 2014 01:39:52 PM JST
CreateWindow
* Thu 08 May 2014 01:39:52 PM JST
CreateWindowChecked
* Thu 08 May 2014 01:39:52 PM JST
DeleteProperty
* Thu 08 May 2014 01:39:52 PM JST
DeletePropertyChecked
* Thu 08 May 2014 01:39:53 PM JST
DestroySubwindows
* Thu 08 May 2014 01:39:53 PM JST
DestroySubwindowsChecked
* Thu 08 May 2014 01:39:53 PM JST
DestroyWindow
* Thu 08 May 2014 01:39:53 PM JST
DestroyWindowChecked
* Thu 08 May 2014 01:39:54 PM JST
FillPoly
* Thu 08 May 2014 01:39:54 PM JST
FillPolyChecked
* Thu 08 May 2014 01:39:54 PM JST
ForceScreenSaver
* Thu 08 May 2014 01:39:55 PM JST
ForceScreenSaverChecked
* Thu 08 May 2014 01:39:55 PM JST
FreeColormap
* Thu 08 May 2014 01:39:55 PM JST
FreeColormapChecked
* Thu 08 May 2014 01:39:55 PM JST
FreeColors
* Thu 08 May 2014 01:39:55 PM JST
FreeColorsChecked
* Thu 08 May 2014 01:39:55 PM JST
FreeCursor
* Thu 08 May 2014 01:39:55 PM JST
FreeCursorChecked
* Thu 08 May 2014 01:39:56 PM JST
FreeGC
* Thu 08 May 2014 01:39:56 PM JST
FreeGCChecked
* Thu 08 May 2014 01:39:56 PM JST
FreePixmap
* Thu 08 May 2014 01:39:56 PM JST
FreePixmapChecked
* Thu 08 May 2014 01:39:56 PM JST
GetAtomName
* Thu 08 May 2014 01:39:56 PM JST
GetAtomNameUnchecked
* Thu 08 May 2014 01:39:57 PM JST
GetFontPath
* Thu 08 May 2014 01:39:57 PM JST
GetFontPathUnchecked
* Thu 08 May 2014 01:39:57 PM JST
GetGeometry
* Thu 08 May 2014 01:39:57 PM JST
GetGeometryUnchecked
* Thu 08 May 2014 01:39:57 PM JST
GetImage
* Thu 08 May 2014 01:39:58 PM JST
GetImageUnchecked
* Thu 08 May 2014 01:39:58 PM JST
GetInputFocus
* Thu 08 May 2014 01:39:58 PM JST
GetInputFocusUnchecked
* Thu 08 May 2014 01:39:58 PM JST
GetKeyboardControl
* Thu 08 May 2014 01:39:59 PM JST
GetKeyboardControlUnchecked
* Thu 08 May 2014 01:39:59 PM JST
GetKeyboardMapping
* Thu 08 May 2014 01:39:59 PM JST
GetKeyboardMappingUnchecked
* Thu 08 May 2014 01:39:59 PM JST
GetModifierMapping
* Thu 08 May 2014 01:39:59 PM JST
GetModifierMappingUnchecked
* Thu 08 May 2014 01:39:59 PM JST
GetMotionEvents
* Thu 08 May 2014 01:40:00 PM JST
GetMotionEventsUnchecked
* Thu 08 May 2014 01:40:00 PM JST
GetPointerControl
* Thu 08 May 2014 01:40:00 PM JST
GetPointerControlUnchecked
* Thu 08 May 2014 01:40:00 PM JST
GetPointerMapping
* Thu 08 May 2014 01:40:00 PM JST
GetPointerMappingUnchecked
* Thu 08 May 2014 01:40:00 PM JST
GetProperty
* Thu 08 May 2014 01:40:01 PM JST
GetPropertyUnchecked
* Thu 08 May 2014 01:40:01 PM JST
GetSelectionOwner
* Thu 08 May 2014 01:40:01 PM JST
GetSelectionOwnerUnchecked
* Thu 08 May 2014 01:40:01 PM JST
GetWindowAttributes
* Thu 08 May 2014 01:40:01 PM JST
GetWindowAttributesUnchecked
* Thu 08 May 2014 01:40:01 PM JST
GrabButton
* Thu 08 May 2014 01:40:02 PM JST
GrabButtonChecked
* Thu 08 May 2014 01:40:02 PM JST
GrabKey
* Thu 08 May 2014 01:40:02 PM JST
GrabKeyChecked
* Thu 08 May 2014 01:40:02 PM JST
GrabKeyboard
* Thu 08 May 2014 01:40:02 PM JST
GrabKeyboardUnchecked
* Thu 08 May 2014 01:40:02 PM JST
GrabPointer
* Thu 08 May 2014 01:40:03 PM JST
GrabPointerUnchecked
* Thu 08 May 2014 01:40:03 PM JST
GrabServer
* Thu 08 May 2014 01:40:03 PM JST
GrabServerChecked
* Thu 08 May 2014 01:40:03 PM JST
ImageText16
* Thu 08 May 2014 01:40:03 PM JST
ImageText16Checked
* Thu 08 May 2014 01:40:03 PM JST
ImageText8
* Thu 08 May 2014 01:40:04 PM JST
ImageText8Checked
* Thu 08 May 2014 01:40:04 PM JST
InstallColormap
* Thu 08 May 2014 01:40:04 PM JST
InstallColormapChecked
* Thu 08 May 2014 01:40:04 PM JST
InternAtom
* Thu 08 May 2014 01:40:04 PM JST
InternAtomUnchecked
* Thu 08 May 2014 01:40:05 PM JST
KillClient
* Thu 08 May 2014 01:40:05 PM JST
KillClientChecked
* Thu 08 May 2014 01:40:05 PM JST
ListExtensions
* Thu 08 May 2014 01:40:05 PM JST
ListExtensionsUnchecked
* Thu 08 May 2014 01:40:05 PM JST
ListFonts
* Thu 08 May 2014 01:40:05 PM JST
ListFontsUnchecked
* Thu 08 May 2014 01:40:05 PM JST
ListFontsWithInfo
* Thu 08 May 2014 01:40:05 PM JST
ListFontsWithInfoUnchecked
* Thu 08 May 2014 01:40:05 PM JST
ListInstalledColormaps
* Thu 08 May 2014 01:40:05 PM JST
ListInstalledColormapsUnchecked
* Thu 08 May 2014 01:40:05 PM JST
ListProperties
* Thu 08 May 2014 01:40:06 PM JST
ListPropertiesUnchecked
* Thu 08 May 2014 01:40:06 PM JST
LookupColor
* Thu 08 May 2014 01:40:06 PM JST
LookupColorUnchecked
* Thu 08 May 2014 01:40:06 PM JST
MapSubwindows
* Thu 08 May 2014 01:40:06 PM JST
MapSubwindowsChecked
* Thu 08 May 2014 01:40:06 PM JST
MapWindow
* Thu 08 May 2014 01:40:06 PM JST
MapWindowChecked
* Thu 08 May 2014 01:40:06 PM JST
NoOperation
* Thu 08 May 2014 01:40:07 PM JST
NoOperationChecked
* Thu 08 May 2014 01:40:07 PM JST
OpenFont
* Thu 08 May 2014 01:40:07 PM JST
OpenFontChecked
* Thu 08 May 2014 01:40:07 PM JST
PolyArc
* Thu 08 May 2014 01:40:07 PM JST
PolyArcChecked
* Thu 08 May 2014 01:40:07 PM JST
PolyFillRectangle
* Thu 08 May 2014 01:40:08 PM JST
PolyFillRectangleChecked
* Thu 08 May 2014 01:40:08 PM JST
PolyLine
* Thu 08 May 2014 01:40:08 PM JST
PolyLineChecked
* Thu 08 May 2014 01:40:08 PM JST
PolyPoint
* Thu 08 May 2014 01:40:08 PM JST
PolyPointChecked
* Thu 08 May 2014 01:40:08 PM JST
PolyRectangle
* Thu 08 May 2014 01:40:09 PM JST
PolyRectangleChecked
* Thu 08 May 2014 01:40:09 PM JST
PolySegment
* Thu 08 May 2014 01:40:09 PM JST
PolySegmentChecked
* Thu 08 May 2014 01:40:09 PM JST
PolyText16
* Thu 08 May 2014 01:40:09 PM JST
PolyText16Checked
* Thu 08 May 2014 01:40:09 PM JST
PolyText8
* Thu 08 May 2014 01:40:10 PM JST
PolyText8Checked
* Thu 08 May 2014 01:40:10 PM JST
PutImage
* Thu 08 May 2014 01:40:10 PM JST
PutImageChecked
* Thu 08 May 2014 01:40:10 PM JST
QueryBestSize
* Thu 08 May 2014 01:40:10 PM JST
QueryBestSizeUnchecked
* Thu 08 May 2014 01:40:11 PM JST
QueryColors
* Thu 08 May 2014 01:40:11 PM JST
QueryColorsUnchecked
* Thu 08 May 2014 01:40:11 PM JST
QueryExtension
* Thu 08 May 2014 01:40:11 PM JST
QueryExtensionUnchecked
* Thu 08 May 2014 01:40:11 PM JST
QueryFont
* Thu 08 May 2014 01:40:11 PM JST
QueryFontUnchecked
* Thu 08 May 2014 01:40:12 PM JST
QueryPointer
* Thu 08 May 2014 01:40:12 PM JST
QueryPointerUnchecked
* Thu 08 May 2014 01:40:12 PM JST
QueryTextExtents
* Thu 08 May 2014 01:40:12 PM JST
QueryTextExtentsUnchecked
* Thu 08 May 2014 01:40:12 PM JST
QueryTree
* Thu 08 May 2014 01:40:13 PM JST
QueryTreeUnchecked
* Thu 08 May 2014 01:40:13 PM JST
RecolorCursor
* Thu 08 May 2014 01:40:13 PM JST
RecolorCursorChecked
* Thu 08 May 2014 01:40:13 PM JST
ReparentWindow
* Thu 08 May 2014 01:40:13 PM JST
ReparentWindowChecked
* Thu 08 May 2014 01:40:14 PM JST
RotateProperties
* Thu 08 May 2014 01:40:14 PM JST
RotatePropertiesChecked
* Thu 08 May 2014 01:40:14 PM JST
SendEvent
* Thu 08 May 2014 01:40:14 PM JST
SendEventChecked
* Thu 08 May 2014 01:40:14 PM JST
SetAccessControl
* Thu 08 May 2014 01:40:14 PM JST
SetAccessControlChecked
* Thu 08 May 2014 01:40:15 PM JST
SetClipRectangles
* Thu 08 May 2014 01:40:15 PM JST
SetClipRectanglesChecked
* Thu 08 May 2014 01:40:15 PM JST
SetCloseDownMode
* Thu 08 May 2014 01:40:15 PM JST
SetCloseDownModeChecked
* Thu 08 May 2014 01:40:15 PM JST
SetDashes
* Thu 08 May 2014 01:40:16 PM JST
SetDashesChecked
* Thu 08 May 2014 01:40:16 PM JST
SetFontPath
* Thu 08 May 2014 01:40:16 PM JST
SetFontPathChecked
* Thu 08 May 2014 01:40:16 PM JST
SetInputFocus
* Thu 08 May 2014 01:40:16 PM JST
SetInputFocusChecked
* Thu 08 May 2014 01:40:16 PM JST
SetModifierMapping
* Thu 08 May 2014 01:40:17 PM JST
SetModifierMappingUnchecked
* Thu 08 May 2014 01:40:17 PM JST
SetPointerMapping
* Thu 08 May 2014 01:40:17 PM JST
SetPointerMappingUnchecked
* Thu 08 May 2014 01:40:17 PM JST
SetSelectionOwner
* Thu 08 May 2014 01:40:17 PM JST
SetSelectionOwnerChecked
* Thu 08 May 2014 01:40:18 PM JST
StoreColors
* Thu 08 May 2014 01:40:18 PM JST
StoreColorsChecked
* Thu 08 May 2014 01:40:18 PM JST
StoreNamedColor
* Thu 08 May 2014 01:40:18 PM JST
StoreNamedColorChecked
* Thu 08 May 2014 01:40:18 PM JST
TranslateCoordinates
* Thu 08 May 2014 01:40:19 PM JST
TranslateCoordinatesUnchecked
* Thu 08 May 2014 01:40:19 PM JST
UngrabButton
* Thu 08 May 2014 01:40:19 PM JST
UngrabButtonChecked
* Thu 08 May 2014 01:40:19 PM JST
UngrabKey
* Thu 08 May 2014 01:40:19 PM JST
UngrabKeyChecked
* Thu 08 May 2014 01:40:20 PM JST
UngrabKeyboard
* Thu 08 May 2014 01:40:20 PM JST
UngrabKeyboardChecked
* Thu 08 May 2014 01:40:20 PM JST
UngrabPointer
* Thu 08 May 2014 01:40:20 PM JST
UngrabPointerChecked
* Thu 08 May 2014 01:40:20 PM JST
UngrabServer
* Thu 08 May 2014 01:40:20 PM JST
UngrabServerChecked
* Thu 08 May 2014 01:40:21 PM JST
UninstallColormap
* Thu 08 May 2014 01:40:21 PM JST
UninstallColormapChecked
* Thu 08 May 2014 01:40:21 PM JST
UnmapSubwindows
* Thu 08 May 2014 01:40:21 PM JST
UnmapSubwindowsChecked
* Thu 08 May 2014 01:40:22 PM JST
UnmapWindow
* Thu 08 May 2014 01:40:22 PM JST
UnmapWindowChecked
* Thu 08 May 2014 01:40:22 PM JST
WarpPointer
* Thu 08 May 2014 01:40:23 PM JST
WarpPointerChecked
* Thu 08 May 2014 01:40:26 PM JST
'AllocColor': ext.AllocColor,
'AllocColorCells': ext.AllocColorCells,
'AllocColorCellsUnchecked': ext.AllocColorCellsUnchecked,
'AllocColorPlanes': ext.AllocColorPlanes,
'AllocColorPlanesUnchecked': ext.AllocColorPlanesUnchecked,
'AllocNamedColor': ext.AllocNamedColor,
'AllocNamedColorUnchecked': ext.AllocNamedColorUnchecked,
'AllowEvents': ext.AllowEvents,
'AllowEventsChecked': ext.AllowEventsChecked,
'Bell': ext.Bell,
'BellChecked': ext.BellChecked,
'ChangeActivePointerGrab': ext.ChangeActivePointerGrab,
'ChangeActivePointerGrabChecked': ext.ChangeActivePointerGrabChecked,
'ChangeGC': ext.ChangeGC,
'ChangeGCChecked': ext.ChangeGCChecked,
'ChangeKeyboardControl': ext.ChangeKeyboardControl,
'ChangeKeyboardControlChecked': ext.ChangeKeyboardControlChecked,
'ChangeKeyboardMapping': ext.ChangeKeyboardMapping,
'ChangeKeyboardMappingChecked': ext.ChangeKeyboardMappingChecked,
'ChangePointerControl': ext.ChangePointerControl,
'ChangePointerControlChecked': ext.ChangePointerControlChecked,
'ChangeProperty': ext.ChangeProperty,
'ChangePropertyChecked': ext.ChangePropertyChecked,
'ChangeSaveSet': ext.ChangeSaveSet,
'ChangeSaveSetChecked': ext.ChangeSaveSetChecked,
'ChangeWindowAttributes': ext.ChangeWindowAttributes,
'ChangeWindowAttributesChecked': ext.ChangeWindowAttributesChecked,
'CirculateWindow': ext.CirculateWindow,
'CirculateWindowChecked': ext.CirculateWindowChecked,
'ClearArea': ext.ClearArea,
'ClearAreaChecked': ext.ClearAreaChecked,
'CloseFont': ext.CloseFont,
'CloseFontChecked': ext.CloseFontChecked,
'ConfigureWindow': ext.ConfigureWindow,
'ConfigureWindowChecked': ext.ConfigureWindowChecked,
'ConvertSelection': ext.ConvertSelection,
'ConvertSelectionChecked': ext.ConvertSelectionChecked,
'CopyArea': ext.CopyArea,
'CopyAreaChecked': ext.CopyAreaChecked,
'CopyColormapAndFree': ext.CopyColormapAndFree,
'CopyColormapAndFreeChecked': ext.CopyColormapAndFreeChecked,
'CopyGC': ext.CopyGC,
'CopyGCChecked': ext.CopyGCChecked,
'CopyPlane': ext.CopyPlane,
'CopyPlaneChecked': ext.CopyPlaneChecked,
'CreateColormap': ext.CreateColormap,
'CreateColormapChecked': ext.CreateColormapChecked,
'CreateCursor': ext.CreateCursor,
'CreateCursorChecked': ext.CreateCursorChecked,
'CreateGC': ext.CreateGC,
'CreateGCChecked': ext.CreateGCChecked,
'CreateGlyphCursor': ext.CreateGlyphCursor,
'CreateGlyphCursorChecked': ext.CreateGlyphCursorChecked,
'CreatePixmap': ext.CreatePixmap,
'CreatePixmapChecked': ext.CreatePixmapChecked,
'CreateWindow': ext.CreateWindow,
'CreateWindowChecked': ext.CreateWindowChecked,
'DeleteProperty': ext.DeleteProperty,
'DeletePropertyChecked': ext.DeletePropertyChecked,
'DestroySubwindows': ext.DestroySubwindows,
'DestroySubwindowsChecked': ext.DestroySubwindowsChecked,
'DestroyWindow': ext.DestroyWindow,
'DestroyWindowChecked': ext.DestroyWindowChecked,
'FillPoly': ext.FillPoly,
'FillPolyChecked': ext.FillPolyChecked,
'ForceScreenSaver': ext.ForceScreenSaver,
'ForceScreenSaverChecked': ext.ForceScreenSaverChecked,
'FreeColormap': ext.FreeColormap,
'FreeColormapChecked': ext.FreeColormapChecked,
'FreeColors': ext.FreeColors,
'FreeColorsChecked': ext.FreeColorsChecked,
'FreeCursor': ext.FreeCursor,
'FreeCursorChecked': ext.FreeCursorChecked,
'FreeGC': ext.FreeGC,
'FreeGCChecked': ext.FreeGCChecked,
'FreePixmap': ext.FreePixmap,
'FreePixmapChecked': ext.FreePixmapChecked,
'GetAtomName': ext.GetAtomName,
'GetAtomNameUnchecked': ext.GetAtomNameUnchecked,
'GetFontPath': ext.GetFontPath,
'GetFontPathUnchecked': ext.GetFontPathUnchecked,
'GetGeometry': ext.GetGeometry,
'GetGeometryUnchecked': ext.GetGeometryUnchecked,
'GetImage': ext.GetImage,
'GetImageUnchecked': ext.GetImageUnchecked,
'GetInputFocus': ext.GetInputFocus,
'GetInputFocusUnchecked': ext.GetInputFocusUnchecked,
'GetKeyboardControl': ext.GetKeyboardControl,
'GetKeyboardControlUnchecked': ext.GetKeyboardControlUnchecked,
'GetKeyboardMapping': ext.GetKeyboardMapping,
'GetKeyboardMappingUnchecked': ext.GetKeyboardMappingUnchecked,
'GetModifierMapping': ext.GetModifierMapping,
'GetModifierMappingUnchecked': ext.GetModifierMappingUnchecked,
'GetMotionEvents': ext.GetMotionEvents,
'GetMotionEventsUnchecked': ext.GetMotionEventsUnchecked,
'GetPointerControl': ext.GetPointerControl,
'GetPointerControlUnchecked': ext.GetPointerControlUnchecked,
'GetPointerMapping': ext.GetPointerMapping,
'GetPointerMappingUnchecked': ext.GetPointerMappingUnchecked,
'GetProperty': ext.GetProperty,
'GetPropertyUnchecked': ext.GetPropertyUnchecked,
'GetSelectionOwner': ext.GetSelectionOwner,
'GetSelectionOwnerUnchecked': ext.GetSelectionOwnerUnchecked,
'GetWindowAttributes': ext.GetWindowAttributes,
'GetWindowAttributesUnchecked': ext.GetWindowAttributesUnchecked,
'GrabButton': ext.GrabButton,
'GrabButtonChecked': ext.GrabButtonChecked,
'GrabKey': ext.GrabKey,
'GrabKeyChecked': ext.GrabKeyChecked,
'GrabKeyboard': ext.GrabKeyboard,
'GrabKeyboardUnchecked': ext.GrabKeyboardUnchecked,
'GrabPointer': ext.GrabPointer,
'GrabPointerUnchecked': ext.GrabPointerUnchecked,
'GrabServer': ext.GrabServer,
'GrabServerChecked': ext.GrabServerChecked,
'ImageText16': ext.ImageText16,
'ImageText16Checked': ext.ImageText16Checked,
'ImageText8': ext.ImageText8,
'ImageText8Checked': ext.ImageText8Checked,
'InstallColormap': ext.InstallColormap,
'InstallColormapChecked': ext.InstallColormapChecked,
'InternAtom': ext.InternAtom,
'InternAtomUnchecked': ext.InternAtomUnchecked,
'KillClient': ext.KillClient,
'KillClientChecked': ext.KillClientChecked,
'ListExtensions': ext.ListExtensions,
'ListExtensionsUnchecked': ext.ListExtensionsUnchecked,
'ListFonts': ext.ListFonts,
'ListFontsUnchecked': ext.ListFontsUnchecked,
'ListFontsWithInfo': ext.ListFontsWithInfo,
'ListFontsWithInfoUnchecked': ext.ListFontsWithInfoUnchecked,
'ListInstalledColormaps': ext.ListInstalledColormaps,
'ListInstalledColormapsUnchecked': ext.ListInstalledColormapsUnchecked,
'ListProperties': ext.ListProperties,
'ListPropertiesUnchecked': ext.ListPropertiesUnchecked,
'LookupColor': ext.LookupColor,
'LookupColorUnchecked': ext.LookupColorUnchecked,
'MapSubwindows': ext.MapSubwindows,
'MapSubwindowsChecked': ext.MapSubwindowsChecked,
'MapWindow': ext.MapWindow,
'MapWindowChecked': ext.MapWindowChecked,
'NoOperation': ext.NoOperation,
'NoOperationChecked': ext.NoOperationChecked,
'OpenFont': ext.OpenFont,
'OpenFontChecked': ext.OpenFontChecked,
'PolyArc': ext.PolyArc,
'PolyArcChecked': ext.PolyArcChecked,
'PolyFillRectangle': ext.PolyFillRectangle,
'PolyFillRectangleChecked': ext.PolyFillRectangleChecked,
'PolyLine': ext.PolyLine,
'PolyLineChecked': ext.PolyLineChecked,
'PolyPoint': ext.PolyPoint,
'PolyPointChecked': ext.PolyPointChecked,
'PolyRectangle': ext.PolyRectangle,
'PolyRectangleChecked': ext.PolyRectangleChecked,
'PolySegment': ext.PolySegment,
'PolySegmentChecked': ext.PolySegmentChecked,
'PolyText16': ext.PolyText16,
'PolyText16Checked': ext.PolyText16Checked,
'PolyText8': ext.PolyText8,
'PolyText8Checked': ext.PolyText8Checked,
'PutImage': ext.PutImage,
'PutImageChecked': ext.PutImageChecked,
'QueryBestSize': ext.QueryBestSize,
'QueryBestSizeUnchecked': ext.QueryBestSizeUnchecked,
'QueryColors': ext.QueryColors,
'QueryColorsUnchecked': ext.QueryColorsUnchecked,
'QueryExtension': ext.QueryExtension,
'QueryExtensionUnchecked': ext.QueryExtensionUnchecked,
'QueryFont': ext.QueryFont,
'QueryFontUnchecked': ext.QueryFontUnchecked,
'QueryPointer': ext.QueryPointer,
'QueryPointerUnchecked': ext.QueryPointerUnchecked,
'QueryTextExtents': ext.QueryTextExtents,
'QueryTextExtentsUnchecked': ext.QueryTextExtentsUnchecked,
'QueryTree': ext.QueryTree,
'QueryTreeUnchecked': ext.QueryTreeUnchecked,
'RecolorCursor': ext.RecolorCursor,
'RecolorCursorChecked': ext.RecolorCursorChecked,
'ReparentWindow': ext.ReparentWindow,
'ReparentWindowChecked': ext.ReparentWindowChecked,
'RotateProperties': ext.RotateProperties,
'RotatePropertiesChecked': ext.RotatePropertiesChecked,
'SendEvent': ext.SendEvent,
'SendEventChecked': ext.SendEventChecked,
'SetAccessControl': ext.SetAccessControl,
'SetAccessControlChecked': ext.SetAccessControlChecked,
'SetClipRectangles': ext.SetClipRectangles,
'SetClipRectanglesChecked': ext.SetClipRectanglesChecked,
'SetCloseDownMode': ext.SetCloseDownMode,
'SetCloseDownModeChecked': ext.SetCloseDownModeChecked,
'SetDashes': ext.SetDashes,
'SetDashesChecked': ext.SetDashesChecked,
'SetFontPath': ext.SetFontPath,
'SetFontPathChecked': ext.SetFontPathChecked,
'SetInputFocus': ext.SetInputFocus,
'SetInputFocusChecked': ext.SetInputFocusChecked,
'SetModifierMapping': ext.SetModifierMapping,
'SetModifierMappingUnchecked': ext.SetModifierMappingUnchecked,
'SetPointerMapping': ext.SetPointerMapping,
'SetPointerMappingUnchecked': ext.SetPointerMappingUnchecked,
'SetSelectionOwner': ext.SetSelectionOwner,
'SetSelectionOwnerChecked': ext.SetSelectionOwnerChecked,
'StoreColors': ext.StoreColors,
'StoreColorsChecked': ext.StoreColorsChecked,
'StoreNamedColor': ext.StoreNamedColor,
'StoreNamedColorChecked': ext.StoreNamedColorChecked,
'TranslateCoordinates': ext.TranslateCoordinates,
'TranslateCoordinatesUnchecked': ext.TranslateCoordinatesUnchecked,
'UngrabButton': ext.UngrabButton,
'UngrabButtonChecked': ext.UngrabButtonChecked,
'UngrabKey': ext.UngrabKey,
'UngrabKeyChecked': ext.UngrabKeyChecked,
'UngrabKeyboard': ext.UngrabKeyboard,
'UngrabKeyboardChecked': ext.UngrabKeyboardChecked,
'UngrabPointer': ext.UngrabPointer,
'UngrabPointerChecked': ext.UngrabPointerChecked,
'UngrabServer': ext.UngrabServer,
'UngrabServerChecked': ext.UngrabServerChecked,
'UninstallColormap': ext.UninstallColormap,
'UninstallColormapChecked': ext.UninstallColormapChecked,
'UnmapSubwindows': ext.UnmapSubwindows,
'UnmapSubwindowsChecked': ext.UnmapSubwindowsChecked,
'UnmapWindow': ext.UnmapWindow,
'UnmapWindowChecked': ext.UnmapWindowChecked,
'WarpPointer': ext.WarpPointer,
'WarpPointerChecked': ext.WarpPointerChecked,

* Thu 08 May 2014 01:49:54 PM JST
WMCLASS
* Thu 08 May 2014 01:51:25 PM JST
        'AllocColor':                       ext.AllocColor,
        'AllocColorCells':                  ext.AllocColorCells,
        'AllocColorCellsUnchecked':         ext.AllocColorCellsUnchecked,
        'AllocColorPlanes':                 ext.AllocColorPlanes,
        'AllocColorPlanesUnchecked':        ext.AllocColorPlanesUnchecked,
        'AllocNamedColor':                  ext.AllocNamedColor,
        'AllocNamedColorUnchecked':         ext.AllocNamedColorUnchecked,
        'AllowEvents':                      ext.AllowEvents,
        'AllowEventsChecked':               ext.AllowEventsChecked,
        'Bell':                             ext.Bell,
        'BellChecked':                      ext.BellChecked,
        'ChangeActivePointerGrab':          ext.ChangeActivePointerGrab,
        'ChangeActivePointerGrabChecked':   ext.ChangeActivePointerGrabChecked,
        'ChangeGC':                         ext.ChangeGC,
        'ChangeGCChecked':                  ext.ChangeGCChecked,
        'ChangeKeyboardControl':            ext.ChangeKeyboardControl,
        'ChangeKeyboardControlChecked':     ext.ChangeKeyboardControlChecked,
        'ChangeKeyboardMapping':            ext.ChangeKeyboardMapping,
        'ChangeKeyboardMappingChecked':     ext.ChangeKeyboardMappingChecked,
        'ChangePointerControl':             ext.ChangePointerControl,
        'ChangePointerControlChecked':      ext.ChangePointerControlChecked,
        'ChangeProperty':                   ext.ChangeProperty,
        'ChangePropertyChecked':            ext.ChangePropertyChecked,
        'ChangeSaveSet':                    ext.ChangeSaveSet,
        'ChangeSaveSetChecked':             ext.ChangeSaveSetChecked,
        'ChangeWindowAttributes':           ext.ChangeWindowAttributes,
        'ChangeWindowAttributesChecked':    ext.ChangeWindowAttributesChecked,
        'CirculateWindow':                  ext.CirculateWindow,
        'CirculateWindowChecked':           ext.CirculateWindowChecked,
        'ClearArea':                        ext.ClearArea,
        'ClearAreaChecked':                 ext.ClearAreaChecked,
        'CloseFont':                        ext.CloseFont,
        'CloseFontChecked':                 ext.CloseFontChecked,
        'ConfigureWindow':                  ext.ConfigureWindow,
        'ConfigureWindowChecked':           ext.ConfigureWindowChecked,
        'ConvertSelection':                 ext.ConvertSelection,
        'ConvertSelectionChecked':          ext.ConvertSelectionChecked,
        'CopyArea':                         ext.CopyArea,
        'CopyAreaChecked':                  ext.CopyAreaChecked,
        'CopyColormapAndFree':              ext.CopyColormapAndFree,
        'CopyColormapAndFreeChecked':       ext.CopyColormapAndFreeChecked,
        'CopyGC':                           ext.CopyGC,
        'CopyGCChecked':                    ext.CopyGCChecked,
        'CopyPlane':                        ext.CopyPlane,
        'CopyPlaneChecked':                 ext.CopyPlaneChecked,
        'CreateColormap':                   ext.CreateColormap,
        'CreateColormapChecked':            ext.CreateColormapChecked,
        'CreateCursor':                     ext.CreateCursor,
        'CreateCursorChecked':              ext.CreateCursorChecked,
        'CreateGC':                         ext.CreateGC,
        'CreateGCChecked':                  ext.CreateGCChecked,
        'CreateGlyphCursor':                ext.CreateGlyphCursor,
        'CreateGlyphCursorChecked':         ext.CreateGlyphCursorChecked,
        'CreatePixmap':                     ext.CreatePixmap,
        'CreatePixmapChecked':              ext.CreatePixmapChecked,
        'CreateWindow':                     ext.CreateWindow,
        'CreateWindowChecked':              ext.CreateWindowChecked,
        'DeleteProperty':                   ext.DeleteProperty,
        'DeletePropertyChecked':            ext.DeletePropertyChecked,
        'DestroySubwindows':                ext.DestroySubwindows,
        'DestroySubwindowsChecked':         ext.DestroySubwindowsChecked,
        'DestroyWindow':                    ext.DestroyWindow,
        'DestroyWindowChecked':             ext.DestroyWindowChecked,
        'FillPoly':                         ext.FillPoly,
        'FillPolyChecked':                  ext.FillPolyChecked,
        'ForceScreenSaver':                 ext.ForceScreenSaver,
        'ForceScreenSaverChecked':          ext.ForceScreenSaverChecked,
        'FreeColormap':                     ext.FreeColormap,
        'FreeColormapChecked':              ext.FreeColormapChecked,
        'FreeColors':                       ext.FreeColors,
        'FreeColorsChecked':                ext.FreeColorsChecked,
        'FreeCursor':                       ext.FreeCursor,
        'FreeCursorChecked':                ext.FreeCursorChecked,
        'FreeGC':                           ext.FreeGC,
        'FreeGCChecked':                    ext.FreeGCChecked,
        'FreePixmap':                       ext.FreePixmap,
        'FreePixmapChecked':                ext.FreePixmapChecked,
        'GetAtomName':                      ext.GetAtomName,
        'GetAtomNameUnchecked':             ext.GetAtomNameUnchecked,
        'GetFontPath':                      ext.GetFontPath,
        'GetFontPathUnchecked':             ext.GetFontPathUnchecked,
        'GetGeometry':                      ext.GetGeometry,
        'GetGeometryUnchecked':             ext.GetGeometryUnchecked,
        'GetImage':                         ext.GetImage,
        'GetImageUnchecked':                ext.GetImageUnchecked,
        'GetInputFocus':                    ext.GetInputFocus,
        'GetInputFocusUnchecked':           ext.GetInputFocusUnchecked,
        'GetKeyboardControl':               ext.GetKeyboardControl,
        'GetKeyboardControlUnchecked':      ext.GetKeyboardControlUnchecked,
        'GetKeyboardMapping':               ext.GetKeyboardMapping,
        'GetKeyboardMappingUnchecked':      ext.GetKeyboardMappingUnchecked,
        'GetModifierMapping':               ext.GetModifierMapping,
        'GetModifierMappingUnchecked':      ext.GetModifierMappingUnchecked,
        'GetMotionEvents':                  ext.GetMotionEvents,
        'GetMotionEventsUnchecked':         ext.GetMotionEventsUnchecked,
        'GetPointerControl':                ext.GetPointerControl,
        'GetPointerControlUnchecked':       ext.GetPointerControlUnchecked,
        'GetPointerMapping':                ext.GetPointerMapping,
        'GetPointerMappingUnchecked':       ext.GetPointerMappingUnchecked,
        'GetProperty':                      ext.GetProperty,
        'GetPropertyUnchecked':             ext.GetPropertyUnchecked,
        'GetSelectionOwner':                ext.GetSelectionOwner,
        'GetSelectionOwnerUnchecked':       ext.GetSelectionOwnerUnchecked,
        'GetWindowAttributes':              ext.GetWindowAttributes,
        'GetWindowAttributesUnchecked':     ext.GetWindowAttributesUnchecked,
        'GrabButton':                       ext.GrabButton,
        'GrabButtonChecked':                ext.GrabButtonChecked,
        'GrabKey':                          ext.GrabKey,
        'GrabKeyChecked':                   ext.GrabKeyChecked,
        'GrabKeyboard':                     ext.GrabKeyboard,
        'GrabKeyboardUnchecked':            ext.GrabKeyboardUnchecked,
        'GrabPointer':                      ext.GrabPointer,
        'GrabPointerUnchecked':             ext.GrabPointerUnchecked,
        'GrabServer':                       ext.GrabServer,
        'GrabServerChecked':                ext.GrabServerChecked,
        'ImageText16':                      ext.ImageText16,
        'ImageText16Checked':               ext.ImageText16Checked,
        'ImageText8':                       ext.ImageText8,
        'ImageText8Checked':                ext.ImageText8Checked,
        'InstallColormap':                  ext.InstallColormap,
        'InstallColormapChecked':           ext.InstallColormapChecked,
        'InternAtom':                       ext.InternAtom,
        'InternAtomUnchecked':              ext.InternAtomUnchecked,
        'KillClient':                       ext.KillClient,
        'KillClientChecked':                ext.KillClientChecked,
        'ListExtensions':                   ext.ListExtensions,
        'ListExtensionsUnchecked':          ext.ListExtensionsUnchecked,
        'ListFonts':                        ext.ListFonts,
        'ListFontsUnchecked':               ext.ListFontsUnchecked,
        'ListFontsWithInfo':                ext.ListFontsWithInfo,
        'ListFontsWithInfoUnchecked':       ext.ListFontsWithInfoUnchecked,
        'ListInstalledColormaps':           ext.ListInstalledColormaps,
        'ListInstalledColormapsUnchecked':  ext.ListInstalledColormapsUnchecked,
        'ListProperties':                   ext.ListProperties,
        'ListPropertiesUnchecked':          ext.ListPropertiesUnchecked,
        'LookupColor':                      ext.LookupColor,
        'LookupColorUnchecked':             ext.LookupColorUnchecked,
        'MapSubwindows':                    ext.MapSubwindows,
        'MapSubwindowsChecked':             ext.MapSubwindowsChecked,
        'MapWindow':                        ext.MapWindow,
        'MapWindowChecked':                 ext.MapWindowChecked,
        'NoOperation':                      ext.NoOperation,
        'NoOperationChecked':               ext.NoOperationChecked,
        'OpenFont':                         ext.OpenFont,
        'OpenFontChecked':                  ext.OpenFontChecked,
        'PolyArc':                          ext.PolyArc,
        'PolyArcChecked':                   ext.PolyArcChecked,
        'PolyFillRectangle':                ext.PolyFillRectangle,
        'PolyFillRectangleChecked':         ext.PolyFillRectangleChecked,
        'PolyLine':                         ext.PolyLine,
        'PolyLineChecked':                  ext.PolyLineChecked,
        'PolyPoint':                        ext.PolyPoint,
        'PolyPointChecked':                 ext.PolyPointChecked,
        'PolyRectangle':                    ext.PolyRectangle,
        'PolyRectangleChecked':             ext.PolyRectangleChecked,
        'PolySegment':                      ext.PolySegment,
        'PolySegmentChecked':               ext.PolySegmentChecked,
        'PolyText16':                       ext.PolyText16,
        'PolyText16Checked':                ext.PolyText16Checked,
        'PolyText8':                        ext.PolyText8,
        'PolyText8Checked':                 ext.PolyText8Checked,
        'PutImage':                         ext.PutImage,
        'PutImageChecked':                  ext.PutImageChecked,
        'QueryBestSize':                    ext.QueryBestSize,
        'QueryBestSizeUnchecked':           ext.QueryBestSizeUnchecked,
        'QueryColors':                      ext.QueryColors,
        'QueryColorsUnchecked':             ext.QueryColorsUnchecked,
        'QueryExtension':                   ext.QueryExtension,
        'QueryExtensionUnchecked':          ext.QueryExtensionUnchecked,
        'QueryFont':                        ext.QueryFont,
        'QueryFontUnchecked':               ext.QueryFontUnchecked,
        'QueryPointer':                     ext.QueryPointer,
        'QueryPointerUnchecked':            ext.QueryPointerUnchecked,
        'QueryTextExtents':                 ext.QueryTextExtents,
        'QueryTextExtentsUnchecked':        ext.QueryTextExtentsUnchecked,
        'QueryTree':                        ext.QueryTree,
        'QueryTreeUnchecked':               ext.QueryTreeUnchecked,
        'RecolorCursor':                    ext.RecolorCursor,
        'RecolorCursorChecked':             ext.RecolorCursorChecked,
        'ReparentWindow':                   ext.ReparentWindow,
        'ReparentWindowChecked':            ext.ReparentWindowChecked,
        'RotateProperties':                 ext.RotateProperties,
        'RotatePropertiesChecked':          ext.RotatePropertiesChecked,
        'SendEvent':                        ext.SendEvent,
        'SendEventChecked':                 ext.SendEventChecked,
        'SetAccessControl':                 ext.SetAccessControl,
        'SetAccessControlChecked':          ext.SetAccessControlChecked,
        'SetClipRectangles':                ext.SetClipRectangles,
        'SetClipRectanglesChecked':         ext.SetClipRectanglesChecked,
        'SetCloseDownMode':                 ext.SetCloseDownMode,
        'SetCloseDownModeChecked':          ext.SetCloseDownModeChecked,
        'SetDashes':                        ext.SetDashes,
        'SetDashesChecked':                 ext.SetDashesChecked,
        'SetFontPath':                      ext.SetFontPath,
        'SetFontPathChecked':               ext.SetFontPathChecked,
        'SetInputFocus':                    ext.SetInputFocus,
        'SetInputFocusChecked':             ext.SetInputFocusChecked,
        'SetModifierMapping':               ext.SetModifierMapping,
        'SetModifierMappingUnchecked':      ext.SetModifierMappingUnchecked,
        'SetPointerMapping':                ext.SetPointerMapping,
        'SetPointerMappingUnchecked':       ext.SetPointerMappingUnchecked,
        'SetSelectionOwner':                ext.SetSelectionOwner,
        'SetSelectionOwnerChecked':         ext.SetSelectionOwnerChecked,
        'StoreColors':                      ext.StoreColors,
        'StoreColorsChecked':               ext.StoreColorsChecked,
        'StoreNamedColor':                  ext.StoreNamedColor,
        'StoreNamedColorChecked':           ext.StoreNamedColorChecked,
        'TranslateCoordinates':             ext.TranslateCoordinates,
        'TranslateCoordinatesUnchecked':    ext.TranslateCoordinatesUnchecked,
        'UngrabButton':                     ext.UngrabButton,
        'UngrabButtonChecked':              ext.UngrabButtonChecked,
        'UngrabKey':                        ext.UngrabKey,
        'UngrabKeyChecked':                 ext.UngrabKeyChecked,
        'UngrabKeyboard':                   ext.UngrabKeyboard,
        'UngrabKeyboardChecked':            ext.UngrabKeyboardChecked,
        'UngrabPointer':                    ext.UngrabPointer,
        'UngrabPointerChecked':             ext.UngrabPointerChecked,
        'UngrabServer':                     ext.UngrabServer,
        'UngrabServerChecked':              ext.UngrabServerChecked,
        'UninstallColormap':                ext.UninstallColormap,
        'UninstallColormapChecked':         ext.UninstallColormapChecked,
        'UnmapSubwindows':                  ext.UnmapSubwindows,
        'UnmapSubwindowsChecked':           ext.UnmapSubwindowsChecked,
        'UnmapWindow':                      ext.UnmapWindow,
        'UnmapWindowChecked':               ext.UnmapWindowChecked,
        'WarpPointer':                      ext.WarpPointer,
        'WarpPointerChecked':               ext.WarpPointerChecked,

* Thu 08 May 2014 01:51:35 PM JST
COREMETHODS
* Thu 08 May 2014 03:36:16 PM JST
from
* Thu 08 May 2014 03:37:18 PM JST
dictionary
* Thu 08 May 2014 03:46:41 PM JST
dict
* Thu 08 May 2014 03:47:55 PM JST
object
* Thu 08 May 2014 04:43:37 PM JST
_atomsdict
* Thu 08 May 2014 04:45:51 PM JST
GlobalCacheAtoms
* Thu 08 May 2014 04:45:56 PM JST
GlobalCacheAtoms.
* Thu 08 May 2014 04:46:59 PM JST
return 
* Thu 08 May 2014 04:49:25 PM JST
caches
* Thu 08 May 2014 04:56:53 PM JST
getatom
* Thu 08 May 2014 04:57:30 PM JST
GlobalCacheAtoms.displaymap
* Thu 08 May 2014 04:57:59 PM JST
GlobalCacheAtoms.getcaches(display)
* Thu 08 May 2014 04:59:31 PM JST
return 
* Thu 08 May 2014 05:10:08 PM JST
class DataHolder(object):
    r"""
    """

    def __init__(self, data):
        r"""

        @Arguments:
        - `data`:
        """
        self._data = data

    def __repr__(self, ):
        return repr(self._data)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self._data, other._data)
        return cmp(self._data, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._data == other._data
        return self._data == other

    def __ne__(self, other):
        return not (self == other)

* Thu 08 May 2014 05:10:23 PM JST
class AtomNumber(DataHolder):
    r"""Internal use.
    """

    def __init__(self, cacheatom, num):
        r"""

        @Arguments:
        - `num`:
        - `name`:
        """
        DataHolder.__init__(self, num)
        self._cacheatom = cacheatom

    def get_atom_name(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return self._cacheatom.GetAtomName(self._data)

    def get_atom_name_unchecked(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return self._cacheatom.GetAtomNameUnchecked(self._data)

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return _pack('I', self._data)

    def __int__(self, ):
        return self._data

    def __long__(self, ):
        return self._data.__long__()

    def __hash__(self, ):
        return hash(self._data)

* Thu 08 May 2014 05:10:39 PM JST
cacheatom
* Thu 08 May 2014 05:10:48 PM JST
_cacheatom
* Thu 08 May 2014 05:10:54 PM JST
cacheatom
* Thu 08 May 2014 05:11:14 PM JST
ConnectionAbstract
* Thu 08 May 2014 05:11:19 PM JST
ConnectionAbstract
* Thu 08 May 2014 05:11:33 PM JST

* Thu 08 May 2014 05:11:33 PM JST

* Thu 08 May 2014 05:11:33 PM JST
        self.connection = connection

* Thu 08 May 2014 05:12:04 PM JST
from struct import pack as _pack
* Thu 08 May 2014 05:14:08 PM JST
class AtomName(DataHolder):
    r"""Internal use.
    """

    def __init__(self, cacheatom, name):
        r"""

        @Arguments:
        - `connection`:
        - `name`:
        """
        DataHolder.__init__(self, name)
        self._cacheatom = cacheatom

    def intern_atom(self, ):
        r"""SUMMARY

        intern_atom()

        @Return:
        """
        return self._cacheatom.InternAtom(True, len(self), self._data)

    def intern_atom_unchecked(self, ):
        r"""SUMMARY

        intern_atom_unchecked()

        @Return:
        """
        return self._cacheatom.InternAtomUnchecked(True, len(self), self._data)

    @property
    def name_length(self, ):
        r"""SUMMARY

        name_length()

        @Return:
        """
        return len(self)

    @property
    def types(self, ):
        r"""SUMMARY

        types()

        @Return:
        """
        return AtomReplyTypes.get_types(self._data)

    @property
    def format(self, ):
        r"""SUMMARY

        format()

        @Return:
        """
        return self.types.length

    def __iter__(self):
        for i in range(0, len(self)):
            yield self._data[i]
        raise StopIteration()

    def __str__(self, ):
        return self._data

    def __hash__(self, ):
        return hash(self._data)

    def __len__(self, ):
        return len(self._data)

* Thu 08 May 2014 05:14:24 PM JST
from xcb2.wxproto.atomtype import AtomReplyTypes
* Thu 08 May 2014 05:14:56 PM JST
ConnectionAbstract
* Thu 08 May 2014 05:15:06 PM JST

* Thu 08 May 2014 05:15:06 PM JST

* Thu 08 May 2014 05:15:06 PM JST
        self._cacheatom = cacheatom

* Thu 08 May 2014 05:15:09 PM JST
cacheatom
* Thu 08 May 2014 05:15:16 PM JST
_cacheatom
* Thu 08 May 2014 05:15:40 PM JST
            
* Thu 08 May 2014 05:16:20 PM JST
only_if_exists
* Thu 08 May 2014 05:16:31 PM JST
only_if_exists=True
* Thu 08 May 2014 05:16:35 PM JST
only_if_exists
* Thu 08 May 2014 05:17:28 PM JST
class AtomPair(object):
    r"""Information holder.
    """
    __slots__ = ('name', 'atom')

    def __init__(self, name, atom):
        r"""

        @Arguments:
        - `name`:
        - `atom`:
        """
        self.name = name
        self.atom = atom

    def name_length(self, ):
        r"""SUMMARY

        name_length()

        @Return:
        """
        return self.name.name_length

    @property
    def types(self, ):
        r"""SUMMARY

        types()

        @Return:
        """
        return self.name.types

    @property
    def format(self, ):
        r"""SUMMARY

        format()

        @Return:
        """
        return self.name.format

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return self.atom.pack()

    def __repr__(self, ):
        fmt = "{0.__class__.__name__}(name='{0.name}', atom={0.atom})".format
        return fmt(self)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.atom, other.atom)
        if predicate.isstring(other):
            return cmp(self.name, other)
        if predicate.isint(other):
            return cmp(self.atom, other)
        return False

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.atom == other.atom
        if predicate.isint(other):
            return self.atom == other
        if predicate.isstring(other):
            return self.name == other
        return False

    def __ne__(self, other):
        return not (self == other)

    def __getitem__(self, key):
        return str(self)[key]

    def __str__(self, ):
        return str(self.name)

    def __int__(self, ):
        return int(self.atom)

    def __long__(self, ):
        return long(self.atom)

    def __len__(self, ):
        return len(str(self))

    def __hash__(self, ):
        return hash(self.atom)

* Thu 08 May 2014 05:17:39 PM JST
import predicate
* Thu 08 May 2014 05:30:29 PM JST
WM_NAME')
* Thu 08 May 2014 05:30:41 PM JST
False, 
* Thu 08 May 2014 05:31:47 PM JST
class WrapInternAtomCookie(object):
    r"""SUMMARY
    """
    
    def __init__(self, connection, cookie):
        r"""
        
        @Arguments:
        - `connection`:
        - `cookie`:
        """
        self._connection = connection
        self._cookie = cookie
        
    def check(self, ):
        r"""SUMMARY
        
        check()
        
        @Return:
        """
        return self._cookie.check()

    def reply(self, cache=True):
        r"""SUMMARY
        
        reply(cache=True)
        
        @Arguments:
        - `cache`:
        
        @Return:
        """
        

* Thu 08 May 2014 05:36:19 PM JST
self._getcookie(only_if_exists, name_len, name)
* Thu 08 May 2014 05:44:31 PM JST
class WrapInternAtomCookie(object):
    r"""SUMMARY
    """

    def __init__(self, connection, cookie):
        r"""

        @Arguments:
        - `connection`:
        - `cookie`:
        """
        self._connection = connection
        self._cookie = cookie

    def check(self, ):
        r"""SUMMARY

        check()

        @Return:
        """
        return self._cookie.check()

    def reply(self, cache=True):
        r"""SUMMARY

        reply(cache=True)

        @Arguments:
        - `cache`:

        @Return:
        """
        if not cache:
            return self._cookie.reply()


* Thu 08 May 2014 05:44:48 PM JST
WrapInternAtomCookie
* Thu 08 May 2014 05:50:05 PM JST
WrapAbstract
* Thu 08 May 2014 05:52:33 PM JST
InternAtom
* Thu 08 May 2014 05:52:41 PM JST
WrapAbstract
* Thu 08 May 2014 05:52:50 PM JST
WrapAbstract
* Thu 08 May 2014 05:58:41 PM JST
GlobalCacheAtoms
* Thu 08 May 2014 06:00:06 PM JST
self
* Thu 08 May 2014 06:03:05 PM JST
return 
* Thu 08 May 2014 06:04:13 PM JST
cookir
* Thu 08 May 2014 06:05:13 PM JST
AtomPair
* Thu 08 May 2014 06:05:52 PM JST
GlobalCacheAtoms
* Thu 08 May 2014 06:06:21 PM JST
self, 
* Thu 08 May 2014 06:06:23 PM JST
self, 
* Thu 08 May 2014 06:06:27 PM JST
self, 
* Thu 08 May 2014 06:06:30 PM JST
self, 
* Thu 08 May 2014 06:06:33 PM JST
self, 
* Thu 08 May 2014 06:06:36 PM JST
self, 
* Thu 08 May 2014 06:06:38 PM JST
self, 
* Thu 08 May 2014 06:07:05 PM JST
self._sender.connection.display
* Thu 08 May 2014 06:09:00 PM JST

* Thu 08 May 2014 06:09:00 PM JST

* Thu 08 May 2014 06:09:00 PM JST
from xcb2.wxproto.wreply import WrapAbstract

* Thu 08 May 2014 06:09:18 PM JST
cookie = 
* Thu 08 May 2014 06:09:21 PM JST

* Thu 08 May 2014 06:09:21 PM JST

* Thu 08 May 2014 06:09:21 PM JST
        cookie.name = name

* Thu 08 May 2014 06:09:22 PM JST
        cookie.name = name

* Thu 08 May 2014 06:09:22 PM JST
        cookie.name = name
        return WrapInternAtomCookie(self.connection, cookie)

* Thu 08 May 2014 06:28:07 PM JST
key]
* Thu 08 May 2014 06:28:08 PM JST
self[key]
* Thu 08 May 2014 06:30:09 PM JST
GlobalCacheAtoms
* Thu 08 May 2014 06:35:26 PM JST
return self._cookie.check()
* Thu 08 May 2014 06:35:36 PM JST
    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:
        """
        return wreply.WrapQueryTreeReply(
            self._connection, self._cookie.reply())

* Thu 08 May 2014 06:38:07 PM JST
atom
* Thu 08 May 2014 06:40:07 PM JST
WrapInternAtomReply
* Thu 08 May 2014 06:40:26 PM JST
self._cookie.reply()
* Thu 08 May 2014 06:40:55 PM JST
            
* Thu 08 May 2014 06:41:16 PM JST
self._getcookie(only_if_exists, name_len, name)
* Thu 08 May 2014 06:42:47 PM JST
WrapInternAtomCookie
* Thu 08 May 2014 06:43:54 PM JST
.__init__
* Thu 08 May 2014 06:45:20 PM JST
name
* Thu 08 May 2014 06:46:10 PM JST

* Thu 08 May 2014 06:46:10 PM JST

* Thu 08 May 2014 06:46:10 PM JST
        atompair = AtomPair(name, reply.atom)

* Thu 08 May 2014 06:46:12 PM JST
atompair
* Thu 08 May 2014 06:46:39 PM JST
atompair
* Thu 08 May 2014 06:49:33 PM JST

* Thu 08 May 2014 06:49:33 PM JST

* Thu 08 May 2014 06:49:33 PM JST
            print('DEBUG-1-internatom.py')

* Thu 08 May 2014 06:52:12 PM JST
AtomPair
* Thu 08 May 2014 11:49:50 PM JST
WM_NAME')
* Thu 08 May 2014 11:49:50 PM JST
usecache('WM_NAME')
* Thu 08 May 2014 11:49:50 PM JST
InternAtom.usecache('WM_NAME')
* Thu 08 May 2014 11:50:29 PM JST
self._getcookie(atom)
* Thu 08 May 2014 11:51:29 PM JST
WrapGetAtomNameCookie
* Thu 08 May 2014 11:51:51 PM JST
return self._cookie.check()
* Thu 08 May 2014 11:53:54 PM JST
self._raw.name
* Thu 08 May 2014 11:54:39 PM JST
return atom.AtomPair(name, num)
* Thu 08 May 2014 11:54:53 PM JST
WrapGetAtomNameReply
* Thu 08 May 2014 11:55:56 PM JST
WrapGetAtomNameCookie
* Thu 08 May 2014 11:56:19 PM JST
WrapGetAtomNameCookie
* Thu 08 May 2014 11:58:49 PM JST
class UseCache(object):
    r"""SUMMARY
    """

    def __init__(self, sender):
        r"""

        @Arguments:
        - `sender`:
        """
        self._sender = sender

    def __call__(self, name, only_if_exists=True):
        r"""SUMMARY

        __call__(name, only_if_exists=True)

        @Arguments:
        - `name`:
        - `only_if_exists`:

        @Return:
        """
        cache = GlobalCacheAtoms.getatom(name, self._sender.connection.display)
        if not cache is None:
            return cache
        atompair = self._sender(only_if_exists, len(name), name).reply().atom
        GlobalCacheAtoms.add(atompair, self._sender.connection.display)
        return atompair

* Thu 08 May 2014 11:58:58 PM JST
from xcb2.wxproto.ext.atom import GlobalCacheAtoms
* Thu 08 May 2014 11:59:34 PM JST
name
* Thu 08 May 2014 11:59:56 PM JST
atom
* Fri 09 May 2014 12:16:11 AM JST
wxproto.
* Fri 09 May 2014 12:16:16 AM JST
Window
* Fri 09 May 2014 12:17:46 AM JST
self._sender.connection, window
* Fri 09 May 2014 12:17:48 AM JST
window
* Fri 09 May 2014 12:18:00 AM JST
QueryRecursiveTree
* Fri 09 May 2014 12:20:28 AM JST
    #     yield Window(self.connection, window)
* Fri 09 May 2014 12:20:33 AM JST
再帰的
* Fri 09 May 2014 12:22:44 AM JST
QueryRecursive
* Fri 09 May 2014 12:25:20 AM JST
ConfigWindow.X
* Fri 09 May 2014 12:27:08 AM JST
.xproto import ConfigWindow
* Fri 09 May 2014 12:27:58 AM JST
    
* Fri 09 May 2014 12:28:05 AM JST
    
* Fri 09 May 2014 12:28:13 AM JST
    
* Fri 09 May 2014 12:28:14 AM JST
Width
* Fri 09 May 2014 12:28:19 AM JST
Width
* Fri 09 May 2014 12:28:23 AM JST
    
* Fri 09 May 2014 12:28:24 AM JST
Height
* Fri 09 May 2014 12:28:30 AM JST
Height
* Fri 09 May 2014 12:28:36 AM JST

* Fri 09 May 2014 12:28:36 AM JST
BorderWidth
* Fri 09 May 2014 12:28:42 AM JST
BorderWidth
* Fri 09 May 2014 12:28:46 AM JST

* Fri 09 May 2014 12:28:46 AM JST
Sibling
* Fri 09 May 2014 12:28:53 AM JST
Sibling
* Fri 09 May 2014 01:26:18 AM JST
D 
* Fri 09 May 2014 01:26:41 AM JST
D xcb2.wxproto
* Fri 09 May 2014 01:26:48 AM JST
wxproto
* Fri 09 May 2014 01:30:07 AM JST
ChangeWindow
* Fri 09 May 2014 01:31:32 AM JST
EventMask
* Fri 09 May 2014 01:32:42 AM JST
ChangeWindowAttributes
* Fri 09 May 2014 01:34:47 AM JST
reply()
* Fri 09 May 2014 01:53:45 AM JST
GrabMode
* Fri 09 May 2014 01:54:35 AM JST
GrabKeyAsync
* Fri 09 May 2014 02:09:45 AM JST
import 
* Fri 09 May 2014 02:10:29 AM JST
class NamedButtonMask(_IntEnum):
    r"""SUMMARY
    """
    Left      = 256
    Middle    = 512
    Right     = 1024
    WheelUp   = 2048
    WheelDown = 4096
    Any       = 32768


* Fri 09 May 2014 02:10:54 AM JST
NamedButtonMask
* Fri 09 May 2014 02:12:05 AM JST
class GrabButtonLeft(object):
    r"""SUMMARY
    """

    def __init__(self, sender):
        r"""

        @Arguments:
        - `sender`:
        """
        self._sender = sender

    def __call__(self, owner_events, window, pointer_mode, keyboard_mode,
                 confine_to, cursor, modifier):
        r"""SUMMARY

        __call__(owner_events, window, pointer_mode, keyboard_mode, confine_to, cursor, modifier)

        @Arguments:
        - `owner_events`:
        - `window`:
        - `pointer_mode`:
        - `keyboard_mode`:
        - `confine_to`:
        - `cursor`:
        - `modifier`:

        @Return:
        """
        return self._sender(owner_events, window, pointer_mode, keyboard_mode,
                            confine_to, cursor, NamedButtonMask.Left, modifier)

* Fri 09 May 2014 02:12:21 AM JST
Left
* Fri 09 May 2014 02:12:42 AM JST
class GrabButtonMiddle(object):
    r"""SUMMARY
    """

    def __init__(self, sender):
        r"""

        @Arguments:
        - `sender`:
        """
        self._sender = sender

    def __call__(self, owner_events, window, pointer_mode, keyboard_mode,
                 confine_to, cursor, modifier):
        r"""SUMMARY

        __call__(owner_events, window, pointer_mode, keyboard_mode, confine_to, cursor, modifier)

        @Arguments:
        - `owner_events`:
        - `window`:
        - `pointer_mode`:
        - `keyboard_mode`:
        - `confine_to`:
        - `cursor`:
        - `modifier`:

        @Return:
        """
        return self._sender(owner_events, window, pointer_mode, keyboard_mode,
                            confine_to, cursor, NamedButtonMask.Middle, modifier)

* Fri 09 May 2014 02:12:53 AM JST
Right
* Fri 09 May 2014 02:13:19 AM JST
class GrabButtonRight(object):
    r"""SUMMARY
    """

    def __init__(self, sender):
        r"""

        @Arguments:
        - `sender`:
        """
        self._sender = sender

    def __call__(self, owner_events, window, pointer_mode, keyboard_mode,
                 confine_to, cursor, modifier):
        r"""SUMMARY

        __call__(owner_events, window, pointer_mode, keyboard_mode, confine_to, cursor, modifier)

        @Arguments:
        - `owner_events`:
        - `window`:
        - `pointer_mode`:
        - `keyboard_mode`:
        - `confine_to`:
        - `cursor`:
        - `modifier`:

        @Return:
        """
        return self._sender(owner_events, window, pointer_mode, keyboard_mode,
                            confine_to, cursor, NamedButtonMask.Right, modifier)

* Fri 09 May 2014 02:13:28 AM JST
$1
* Fri 09 May 2014 02:14:29 AM JST
        
* Fri 09 May 2014 02:14:31 AM JST
Left
* Fri 09 May 2014 02:14:40 AM JST
        
* Fri 09 May 2014 02:14:42 AM JST
Right
* Fri 09 May 2014 02:14:52 AM JST
        
* Fri 09 May 2014 02:14:55 AM JST
Middle
* Fri 09 May 2014 02:15:05 AM JST

* Fri 09 May 2014 02:15:56 AM JST
ButtonAbstract
* Fri 09 May 2014 02:23:50 AM JST
grab_window, event_mask,
* Fri 09 May 2014 02:24:09 AM JST
                 
* Fri 09 May 2014 02:24:26 AM JST
grab_window, event_mask,
* Fri 09 May 2014 02:24:51 AM JST
    def __call__(self, owner_events, grab_window, event_mask, pointer_mode,
                 keyboard_mode, confine_to, cursor, modifier):

* Fri 09 May 2014 02:25:08 AM JST
grab_window, event_mask,
* Fri 09 May 2014 02:28:56 AM JST
keyboard_mode, 
* Fri 09 May 2014 02:29:20 AM JST
owner_events, grab_window, pointer_mask, keyboard_mode,
                 confine_to, cursor, modifier
* Fri 09 May 2014 02:29:58 AM JST
xproto
* Fri 09 May 2014 02:30:19 AM JST
EventMask
* Fri 09 May 2014 02:30:39 AM JST
                            
* Fri 09 May 2014 02:30:51 AM JST
class ButtonPress(ButtonEventAbstract):
    r"""SUMMARY
    """

    def __call__(self, owner_events, grab_window, pointer_mask, keyboard_mode,
                 confine_to, cursor, modifier):
        r"""SUMMARY

        __call__()

        @Return:
        """
        return self._sender(owner_events, grab_window, EventMask.ButtonPress,
                            pointer_mask, keyboard_mode, confine_to, cursor,
                            modifier)


* Fri 09 May 2014 02:31:14 AM JST
ButtonPress
* Fri 09 May 2014 02:32:41 AM JST
owner_events, grab_window, pointer_mask, keyboard_mode,
                 confine_to, cursor, modifier
* Fri 09 May 2014 02:32:47 AM JST
keyboard_mode,
* Fri 09 May 2014 02:32:47 AM JST
pointer_mask, keyboard_mode,
* Fri 09 May 2014 02:32:49 AM JST
                 
* Fri 09 May 2014 02:33:45 AM JST
ButtonAsyncMode
* Fri 09 May 2014 02:34:23 AM JST
core.
* Fri 09 May 2014 02:46:45 AM JST
modifier
* Fri 09 May 2014 02:47:05 AM JST
owner_events, 
* Fri 09 May 2014 02:47:16 AM JST
False
* Fri 09 May 2014 02:47:37 AM JST
modifier
* Fri 09 May 2014 02:47:45 AM JST
                 
* Fri 09 May 2014 02:47:52 AM JST
owner_events, 
* Fri 09 May 2014 02:48:15 AM JST
owner_events=True, 
* Fri 09 May 2014 02:48:17 AM JST
                 
* Fri 09 May 2014 02:48:50 AM JST
owner_events, 
* Fri 09 May 2014 02:49:30 AM JST
modifier
* Fri 09 May 2014 02:49:43 AM JST
            
* Fri 09 May 2014 02:55:42 AM JST
NamedButtonMask
* Fri 09 May 2014 09:48:50 AM JST
NamedButtonMask
* Fri 09 May 2014 09:51:19 AM JST
xcb2.xproto.NamedButtonMask(1)
* Fri 09 May 2014 09:51:30 AM JST
xcb2.
* Fri 09 May 2014 09:52:38 AM JST
256
* Fri 09 May 2014 09:54:11 AM JST
GrabButton
* Fri 09 May 2014 09:54:24 AM JST
GrabButton
* Fri 09 May 2014 09:55:06 AM JST
NamedButtonMask(self._data).name
* Fri 09 May 2014 09:57:01 AM JST
NamedButtonMask(self._data).name
* Fri 09 May 2014 10:00:07 AM JST
        button = getattr(NamedButtonMask(self._data), 'name')
        grab = getattr(self.core2.GrabButton, button)
        grab.press.async(window, self.state)

* Fri 09 May 2014 10:00:15 AM JST

* Fri 09 May 2014 10:00:15 AM JST

* Fri 09 May 2014 10:00:15 AM JST
        # state = self.state | self._release_mod.get(self._data)

* Fri 09 May 2014 10:00:23 AM JST
press
* Fri 09 May 2014 10:02:10 AM JST
'{0.name}'.format(xproto.NamedButtonMask(256))
* Fri 09 May 2014 10:02:17 AM JST
256
* Fri 09 May 2014 10:02:25 AM JST
xproto.
* Fri 09 May 2014 10:02:42 AM JST
buttonname
* Fri 09 May 2014 10:03:43 AM JST

* Fri 09 May 2014 10:03:43 AM JST

* Fri 09 May 2014 10:03:43 AM JST
        # button = getattr(NamedButtonMask(self._data), 'name')

* Fri 09 May 2014 10:04:00 AM JST
buttonname = '{0.name}'.format(NamedButtonMask(self._data))
* Fri 09 May 2014 10:06:16 AM JST
        buttonname = '{0.name}'.format(NamedButtonMask(self._data))
        grab = getattr(self.core2.GrabButton, buttonname)

* Fri 09 May 2014 10:06:21 AM JST
grab = 
* Fri 09 May 2014 10:06:32 AM JST
grab
* Fri 09 May 2014 10:06:55 AM JST
self._getgrabber()
* Fri 09 May 2014 10:07:00 AM JST

* Fri 09 May 2014 10:07:01 AM JST

* Fri 09 May 2014 10:07:01 AM JST
        buttonname = '{0.name}'.format(NamedButtonMask(self._data))

* Fri 09 May 2014 10:07:01 AM JST
        buttonname = '{0.name}'.format(NamedButtonMask(self._data))

* Fri 09 May 2014 10:07:01 AM JST
        buttonname = '{0.name}'.format(NamedButtonMask(self._data))
        grab = getattr(self.core2.GrabButton, buttonname)

* Fri 09 May 2014 10:09:13 AM JST
D 
* Fri 09 May 2014 10:10:18 AM JST
owner_events, 
* Fri 09 May 2014 10:10:43 AM JST
TRUE, 
* Fri 09 May 2014 10:10:43 AM JST
OwnerEvents.TRUE, 
* Fri 09 May 2014 10:13:32 AM JST
OwnerEvents, 
* Fri 09 May 2014 10:13:33 AM JST
                         
* Fri 09 May 2014 10:17:57 AM JST
xconnection.
* Fri 09 May 2014 10:21:02 AM JST
xconnection.
* Fri 09 May 2014 10:21:32 AM JST
xconnection.
* Fri 09 May 2014 10:24:56 AM JST
key,
* Fri 09 May 2014 10:25:02 AM JST
modifier,
* Fri 09 May 2014 10:25:22 AM JST
        
* Fri 09 May 2014 10:25:53 AM JST

* Fri 09 May 2014 10:25:53 AM JST

* Fri 09 May 2014 10:25:53 AM JST
        # self.core2.GrabKey.async(window, self.state, self._data)

* Fri 09 May 2014 10:26:25 AM JST
grab_window
* Fri 09 May 2014 10:28:02 AM JST
NamedButtonIndex
* Fri 09 May 2014 10:37:31 AM JST
NamedButtonIndex
* Fri 09 May 2014 10:52:13 AM JST
event_mask, 
* Fri 09 May 2014 10:52:41 AM JST
                 
* Fri 09 May 2014 10:52:51 AM JST
event_mask,
* Fri 09 May 2014 11:03:05 AM JST
True
* Fri 09 May 2014 11:06:12 AM JST
events
* Fri 09 May 2014 11:19:25 AM JST
grab_window, modifier, pointer_mode, keyboard_mode,
                 owner_events=1, confine_to=0, cursor=0
* Fri 09 May 2014 11:48:41 AM JST
event
* Fri 09 May 2014 11:50:13 AM JST

* Fri 09 May 2014 11:50:13 AM JST

* Fri 09 May 2014 11:50:13 AM JST
        print(self[event])

* Fri 09 May 2014 11:51:18 AM JST

* Fri 09 May 2014 11:51:18 AM JST

* Fri 09 May 2014 11:51:18 AM JST
            print('DEBUG-1-eventdispatcher.py')

* Fri 09 May 2014 12:10:55 PM JST

* Fri 09 May 2014 12:10:55 PM JST

* Fri 09 May 2014 12:10:55 PM JST
        # for InternAtom

* Fri 09 May 2014 12:12:22 PM JST
xproto,
* Fri 09 May 2014 12:12:39 PM JST

* Fri 09 May 2014 12:12:44 PM JST
Display
* Fri 09 May 2014 12:12:53 PM JST
xproto.
* Fri 09 May 2014 12:13:21 PM JST

* Fri 09 May 2014 12:13:21 PM JST

* Fri 09 May 2014 12:13:22 PM JST
from

* Fri 09 May 2014 12:13:32 PM JST
type(event)
* Fri 09 May 2014 12:14:46 PM JST

* Fri 09 May 2014 12:14:46 PM JST

* Fri 09 May 2014 12:14:46 PM JST
        print(type(event))

* Fri 09 May 2014 12:14:47 PM JST

* Fri 09 May 2014 12:14:47 PM JST

* Fri 09 May 2014 12:14:47 PM JST
        print(type(event))

* Fri 09 May 2014 12:15:51 PM JST

* Fri 09 May 2014 12:15:51 PM JST

* Fri 09 May 2014 12:15:51 PM JST
            print('DEBUG-1-eventdispatcher.py')

* Fri 09 May 2014 12:15:53 PM JST

* Fri 09 May 2014 12:15:53 PM JST

* Fri 09 May 2014 12:15:53 PM JST
            print('DEBUG-1-eventdispatcher.py')

* Fri 09 May 2014 12:16:26 PM JST
_missing_func = lambda *args, **kwargs: None
* Fri 09 May 2014 12:16:46 PM JST
    
* Fri 09 May 2014 12:17:09 PM JST
print('')
* Fri 09 May 2014 12:17:26 PM JST

* Fri 09 May 2014 12:17:26 PM JST

* Fri 09 May 2014 12:17:26 PM JST
    _missing_func = lambda *args, **kwargs: None

* Fri 09 May 2014 12:17:41 PM JST
self[event]
* Fri 09 May 2014 12:18:58 PM JST

* Fri 09 May 2014 12:18:58 PM JST

* Fri 09 May 2014 12:18:58 PM JST
        print(self[event])

* Fri 09 May 2014 12:22:49 PM JST

* Fri 09 May 2014 12:22:49 PM JST

* Fri 09 May 2014 12:22:49 PM JST
                    print(event)

* Fri 09 May 2014 12:26:35 PM JST
xproto
* Fri 09 May 2014 01:01:50 PM JST
connection
* Fri 09 May 2014 01:47:52 PM JST
ConnectionAbstract
* Fri 09 May 2014 01:51:01 PM JST
WrapCoreAbstract
* Fri 09 May 2014 01:51:20 PM JST
connection
* Fri 09 May 2014 01:51:31 PM JST
connection
* Fri 09 May 2014 01:53:32 PM JST
class WrapCoreAbstract(object):
    r"""SUMMARY
    """

    def __init__(self, core):
        r"""

        @Arguments:
        - `core`:
        """
        self.core = core


* Fri 09 May 2014 01:54:19 PM JST
WrapCoreAbstract
* Fri 09 May 2014 01:54:24 PM JST
connection
* Fri 09 May 2014 01:54:31 PM JST
WrapCoreAbstract
* Fri 09 May 2014 01:54:36 PM JST
connection
* Fri 09 May 2014 01:54:48 PM JST
connection.
* Fri 09 May 2014 01:54:52 PM JST
connection.
* Fri 09 May 2014 01:55:02 PM JST
ConnectionAbstract, 
* Fri 09 May 2014 01:55:59 PM JST
ConnectionAbstract
* Fri 09 May 2014 01:56:12 PM JST
WrapCoreAbstract
* Fri 09 May 2014 01:56:32 PM JST
connection
* Fri 09 May 2014 01:56:37 PM JST
connection.
* Fri 09 May 2014 01:56:39 PM JST
connection.
* Fri 09 May 2014 01:56:51 PM JST
connection
* Fri 09 May 2014 01:57:16 PM JST
connection
* Fri 09 May 2014 01:57:19 PM JST
connection
* Fri 09 May 2014 01:57:23 PM JST
connection.
* Fri 09 May 2014 01:57:33 PM JST
connection.
* Fri 09 May 2014 01:58:16 PM JST
ConnectionAbstract
* Fri 09 May 2014 02:03:29 PM JST
                   
* Fri 09 May 2014 02:03:46 PM JST
            
* Fri 09 May 2014 02:04:52 PM JST
            
* Fri 09 May 2014 02:07:11 PM JST
xproto
* Fri 09 May 2014 02:07:16 PM JST
xproto.
* Fri 09 May 2014 02:09:49 PM JST
xproto
* Fri 09 May 2014 02:09:56 PM JST
xproto.
* Fri 09 May 2014 02:10:00 PM JST
xproto.
* Fri 09 May 2014 02:13:57 PM JST
            
* Fri 09 May 2014 03:34:20 PM JST
core
* Fri 09 May 2014 03:43:21 PM JST
core
* Fri 09 May 2014 03:43:26 PM JST
core
* Fri 09 May 2014 03:43:28 PM JST
core
* Fri 09 May 2014 03:44:11 PM JST
WrapCoreAbstract
* Fri 09 May 2014 03:44:15 PM JST

* Fri 09 May 2014 03:44:16 PM JST

* Fri 09 May 2014 03:44:16 PM JST
        WrapCoreAbstract.__init__(self, parent)

* Fri 09 May 2014 03:44:18 PM JST
parent
* Fri 09 May 2014 03:45:33 PM JST
connection
* Fri 09 May 2014 03:45:37 PM JST
connection
* Fri 09 May 2014 03:47:19 PM JST
core
* Fri 09 May 2014 03:47:24 PM JST
connection
* Fri 09 May 2014 03:47:45 PM JST
    'InternAtom':                       ext.InternAtom,
    'InternAtomUnchecked':              ext.InternAtomUnchecked,

* Fri 09 May 2014 03:48:32 PM JST
core
* Fri 09 May 2014 03:48:48 PM JST
rawcore
* Fri 09 May 2014 04:01:41 PM JST
core
* Fri 09 May 2014 04:01:45 PM JST
core
* Fri 09 May 2014 04:01:50 PM JST

* Fri 09 May 2014 04:01:50 PM JST

* Fri 09 May 2014 04:01:50 PM JST
        self.getatom = AtomIdentifier(self)

* Fri 09 May 2014 04:07:43 PM JST
prop
* Fri 09 May 2014 04:08:42 PM JST
name)
* Fri 09 May 2014 04:08:43 PM JST
types.name)
* Fri 09 May 2014 04:08:43 PM JST
prop.types.name)
* Fri 09 May 2014 04:08:44 PM JST
getatom(prop.types.name)
* Fri 09 May 2014 04:08:44 PM JST
self.getatom(prop.types.name)
* Fri 09 May 2014 04:12:31 PM JST
core
* Fri 09 May 2014 04:12:36 PM JST
core
* Fri 09 May 2014 04:42:39 PM JST
self._reply.property
* Fri 09 May 2014 04:42:57 PM JST
            
* Fri 09 May 2014 04:48:01 PM JST
connection
* Fri 09 May 2014 04:48:03 PM JST
connection
* Fri 09 May 2014 04:48:06 PM JST
connection
* Fri 09 May 2014 04:48:13 PM JST
core2
* Fri 09 May 2014 04:48:13 PM JST
connection.core2
* Fri 09 May 2014 04:48:44 PM JST
core2
* Fri 09 May 2014 04:48:44 PM JST
connection.core2
* Fri 09 May 2014 05:00:25 PM JST
_rawconnection
* Fri 09 May 2014 05:02:37 PM JST
connection
* Fri 09 May 2014 05:08:01 PM JST
core
* Fri 09 May 2014 05:08:11 PM JST
parent
* Fri 09 May 2014 05:08:14 PM JST
_parent
* Fri 09 May 2014 05:08:21 PM JST
_parent
* Fri 09 May 2014 05:08:52 PM JST
parent
* Fri 09 May 2014 05:09:26 PM JST
getproperty
* Fri 09 May 2014 05:09:45 PM JST
_getproperty
* Fri 09 May 2014 05:09:50 PM JST
getproperty
* Fri 09 May 2014 05:11:35 PM JST
_getproperty
* Fri 09 May 2014 05:12:24 PM JST
self.atom
* Fri 09 May 2014 05:12:50 PM JST
            
* Fri 09 May 2014 05:13:01 PM JST

* Fri 09 May 2014 05:13:01 PM JST

* Fri 09 May 2014 05:13:01 PM JST
from xcb2.wxproto.atom import AtomIdentifier

* Fri 09 May 2014 06:19:53 PM JST

* Fri 09 May 2014 06:19:54 PM JST

* Fri 09 May 2014 06:19:54 PM JST
        # self.atomidentify = AtomIdentifier(self.connection)

* Fri 09 May 2014 06:20:05 PM JST
connecti
* Fri 09 May 2014 06:20:07 PM JST
self
* Fri 09 May 2014 06:21:27 PM JST

* Fri 09 May 2014 06:21:27 PM JST

* Fri 09 May 2014 06:21:27 PM JST
        self._parent = parent

* Fri 09 May 2014 06:21:32 PM JST

* Fri 09 May 2014 06:21:32 PM JST

* Fri 09 May 2014 06:21:32 PM JST
        self.rawcore = parent._rawconnection.core

* Fri 09 May 2014 06:21:32 PM JST
        self.rawcore = parent._rawconnection.core

* Fri 09 May 2014 06:21:32 PM JST
        self.rawcore = parent._rawconnection.core
        self.core = parent.core

* Fri 09 May 2014 06:21:55 PM JST
parent
* Fri 09 May 2014 06:22:00 PM JST
parent
* Fri 09 May 2014 06:22:10 PM JST
parent
* Fri 09 May 2014 06:22:15 PM JST
parent
* Fri 09 May 2014 06:22:26 PM JST
rawcore
* Fri 09 May 2014 06:24:34 PM JST
self.connection.rawconnection.core
* Fri 09 May 2014 06:25:58 PM JST
rawcore
* Fri 09 May 2014 06:26:02 PM JST
connection
* Fri 09 May 2014 06:39:50 PM JST
            
* Fri 09 May 2014 06:44:08 PM JST
core
* Fri 09 May 2014 06:45:07 PM JST
connection
* Fri 09 May 2014 06:45:35 PM JST
connection
* Fri 09 May 2014 06:45:39 PM JST
connection
* Fri 09 May 2014 06:46:53 PM JST
rawconnection
* Fri 09 May 2014 06:51:19 PM JST
EventMask, GrabMode
* Fri 09 May 2014 06:51:51 PM JST

* Fri 09 May 2014 06:51:51 PM JST

* Fri 09 May 2014 06:51:51 PM JST
# from enum import IntEnum as _IntEnum

* Fri 09 May 2014 06:51:52 PM JST

* Fri 09 May 2014 06:51:52 PM JST

* Fri 09 May 2014 06:51:52 PM JST
# from xcb.xproto import EventMask, GrabMode

* Fri 09 May 2014 06:52:00 PM JST
NamedButtonMask
* Fri 09 May 2014 10:29:36 PM JST
rawconnection
* Fri 09 May 2014 10:34:38 PM JST
rawconnection
* Fri 09 May 2014 10:34:38 PM JST
rawconnection.rawconnection
* Fri 09 May 2014 10:36:51 PM JST
rawconnection.
* Fri 09 May 2014 10:37:42 PM JST
rawconnection
* Fri 09 May 2014 10:40:13 PM JST
rawconnection
* Fri 09 May 2014 10:46:38 PM JST
            
* Fri 09 May 2014 10:47:37 PM JST
rawconnection.
* Fri 09 May 2014 11:29:05 PM JST
    @abstractmethod
    def _getcookie(self, string_len, drawable, gc, x, y, string):
        raise StandardError()

* Fri 09 May 2014 11:29:12 PM JST
propagate, destination, event_mask, event)
* Fri 09 May 2014 11:29:15 PM JST
propagate, destination, event_mask, event
* Fri 09 May 2014 11:29:31 PM JST

* Fri 09 May 2014 11:29:31 PM JST

* Fri 09 May 2014 11:29:31 PM JST
    @abstractmethod

* Fri 09 May 2014 11:29:33 PM JST

* Fri 09 May 2014 11:29:33 PM JST

* Fri 09 May 2014 11:29:33 PM JST
        raise StandardError()

* Fri 09 May 2014 11:29:43 PM JST
propagate, destination, event_mask, event
* Fri 09 May 2014 11:29:58 PM JST
_getcookie
* Fri 09 May 2014 11:30:12 PM JST
_getcookie
* Fri 09 May 2014 11:33:12 PM JST
WrapCoreAbstract
* Fri 09 May 2014 11:38:44 PM JST
        
* Fri 09 May 2014 11:38:46 PM JST
              
* Fri 09 May 2014 11:38:49 PM JST
     
* Fri 09 May 2014 11:38:51 PM JST
                 
* Fri 09 May 2014 11:41:39 PM JST
rawconnection
* Fri 09 May 2014 11:43:36 PM JST
            
* Fri 09 May 2014 11:50:23 PM JST
            
* Fri 09 May 2014 11:51:28 PM JST
ConnectionAbstract
* Fri 09 May 2014 11:55:25 PM JST
MotionNotify
* Fri 09 May 2014 11:55:30 PM JST

* Fri 09 May 2014 11:55:40 PM JST

* Fri 09 May 2014 11:55:41 PM JST

* Fri 09 May 2014 11:55:41 PM JST
from xcb2.wxproto.ext.sendevent.clientmessage import ClientMessage

* Fri 09 May 2014 11:59:27 PM JST
connection
* Sat 10 May 2014 12:00:54 AM JST
            
* Sat 10 May 2014 12:03:05 AM JST
rawconnection
* Sat 10 May 2014 12:03:08 AM JST
                     
* Sat 10 May 2014 12:32:07 AM JST
parent
* Sat 10 May 2014 12:33:56 AM JST
    'InternAtom':                       ext.InternAtom,
    'InternAtomUnchecked':              ext.InternAtomUnchecked,

* Sat 10 May 2014 12:34:14 AM JST
self
* Sat 10 May 2014 12:34:21 AM JST
'InternAtom'
* Sat 10 May 2014 12:34:28 AM JST
ext.InternAtom
* Sat 10 May 2014 12:34:35 AM JST

* Sat 10 May 2014 12:34:35 AM JST

* Sat 10 May 2014 12:34:35 AM JST
        'InternAtom':                       ext.InternAtom,

* Sat 10 May 2014 12:34:40 AM JST
'InternAtomUnchecked'
* Sat 10 May 2014 12:34:52 AM JST
ext.InternAtomUnchecked
* Sat 10 May 2014 12:35:04 AM JST

* Sat 10 May 2014 12:35:04 AM JST

* Sat 10 May 2014 12:35:04 AM JST
        'InternAtomUnchecked':              ext.InternAtomUnchecked,

* Sat 10 May 2014 12:35:21 AM JST
    'GetAtomName':                      ext.GetAtomName,
    'GetAtomNameUnchecked':             ext.GetAtomNameUnchecked,

* Sat 10 May 2014 12:36:32 AM JST

* Sat 10 May 2014 12:36:32 AM JST

* Sat 10 May 2014 12:36:33 AM JST

* Sat 10 May 2014 12:36:34 AM JST

* Sat 10 May 2014 12:36:34 AM JST

* Sat 10 May 2014 12:36:34 AM JST
        for name, cls in xrange(0, 1):

* Sat 10 May 2014 12:36:41 AM JST
'InternAtom', ext.InternAtom
* Sat 10 May 2014 12:36:53 AM JST
'InternAtom', ext.InternAtom
* Sat 10 May 2014 12:36:56 AM JST

* Sat 10 May 2014 12:36:56 AM JST

* Sat 10 May 2014 12:36:56 AM JST
        setattr(self, 'InternAtom', ext.InternAtom(self.connection))

* Sat 10 May 2014 12:37:05 AM JST
'InternAtomUnchecked'
* Sat 10 May 2014 12:37:14 AM JST
ext.InternAtomUnchecked
* Sat 10 May 2014 12:37:19 AM JST

* Sat 10 May 2014 12:37:19 AM JST

* Sat 10 May 2014 12:37:20 AM JST
        setattr(self, 'InternAtomUnchecked',

* Sat 10 May 2014 12:37:20 AM JST
        setattr(self, 'InternAtomUnchecked',

* Sat 10 May 2014 12:37:20 AM JST
        setattr(self, 'InternAtomUnchecked',
                ext.InternAtomUnchecked(self.connection))

* Sat 10 May 2014 12:37:22 AM JST
        setattr(self, 'InternAtomUnchecked',
                ext.InternAtomUnchecked(self.connection))

* Sat 10 May 2014 12:37:22 AM JST
        setattr(self, 'InternAtomUnchecked',
                ext.InternAtomUnchecked(self.connection))
        setattr(self, '')

* Sat 10 May 2014 12:37:24 AM JST

* Sat 10 May 2014 12:37:33 AM JST
'GetAtomName'
* Sat 10 May 2014 12:37:39 AM JST
ext.GetAtomName
* Sat 10 May 2014 12:37:42 AM JST

* Sat 10 May 2014 12:37:42 AM JST

* Sat 10 May 2014 12:37:42 AM JST
    :                      ,

* Sat 10 May 2014 12:37:46 AM JST
'GetAtomNameUnchecked'
* Sat 10 May 2014 12:37:47 AM JST

* Sat 10 May 2014 12:37:54 AM JST
ext.GetAtomNameUnchecked
* Sat 10 May 2014 12:37:58 AM JST

* Sat 10 May 2014 12:37:58 AM JST

* Sat 10 May 2014 12:37:58 AM JST
    :             ,

* Sat 10 May 2014 12:38:34 AM JST

* Sat 10 May 2014 12:38:34 AM JST

* Sat 10 May 2014 12:38:34 AM JST
            # TODO: (Atami) [2014/05/10]

* Sat 10 May 2014 12:38:34 AM JST
            # TODO: (Atami) [2014/05/10]

* Sat 10 May 2014 12:38:34 AM JST
            # TODO: (Atami) [2014/05/10]
            # TODO: (Atami) [2014/05/10]

* Sat 10 May 2014 12:38:34 AM JST
            # TODO: (Atami) [2014/05/10]
            # TODO: (Atami) [2014/05/10]

* Sat 10 May 2014 12:38:34 AM JST
            # TODO: (Atami) [2014/05/10]
            # TODO: (Atami) [2014/05/10]
            # TODO: (Atami) [2014/05/10]

* Sat 10 May 2014 12:38:44 AM JST

* Sat 10 May 2014 12:38:44 AM JST

* Sat 10 May 2014 12:38:44 AM JST
        # TODO: (Atami) [2014/05/10]

* Sat 10 May 2014 12:38:45 AM JST
        # KLUDGE: (Atami) [2014/05/10]
* Sat 10 May 2014 12:40:06 AM JST
50331670
* Sat 10 May 2014 12:41:20 AM JST
type
* Sat 10 May 2014 12:41:43 AM JST

* Sat 10 May 2014 12:41:43 AM JST

* Sat 10 May 2014 12:41:43 AM JST
        print(type)

* Sat 10 May 2014 12:42:17 AM JST

* Sat 10 May 2014 12:42:17 AM JST

* Sat 10 May 2014 12:42:19 AM JST

* Sat 10 May 2014 12:42:19 AM JST

* Sat 10 May 2014 12:42:19 AM JST
        print(dir(type))

* Sat 10 May 2014 12:45:23 AM JST
        
* Sat 10 May 2014 12:48:47 AM JST
get_full_value()
* Sat 10 May 2014 12:48:55 AM JST
self._parent.connection.core.InternAtom.usecache(
            self.atomname)
* Sat 10 May 2014 12:49:08 AM JST
self.atom.types.name
* Sat 10 May 2014 12:49:13 AM JST

* Sat 10 May 2014 12:49:14 AM JST

* Sat 10 May 2014 12:49:14 AM JST
        self.types = self.atom.types.name

* Sat 10 May 2014 12:49:14 AM JST

* Sat 10 May 2014 12:49:15 AM JST

* Sat 10 May 2014 12:49:15 AM JST
        print(type(self.atom))

* Sat 10 May 2014 12:49:52 AM JST
50331670
* Sat 10 May 2014 12:52:04 AM JST
core
* Sat 10 May 2014 12:52:08 AM JST
core
* Sat 10 May 2014 12:52:13 AM JST
core
* Sat 10 May 2014 01:03:18 AM JST
        return self._parent(
            delete, window, self.atom, self.types, offset,
            length or self.length)

* Sat 10 May 2014 01:04:34 AM JST
length
* Sat 10 May 2014 01:04:34 AM JST
self.length
* Sat 10 May 2014 01:04:36 AM JST
            
* Sat 10 May 2014 01:04:48 AM JST
self.
* Sat 10 May 2014 01:04:50 AM JST
self.
* Sat 10 May 2014 01:04:54 AM JST
            
* Sat 10 May 2014 01:05:45 AM JST
self._parent.connection.core.InternAtom.usecache(atom)
* Sat 10 May 2014 01:06:15 AM JST

* Sat 10 May 2014 01:06:15 AM JST

* Sat 10 May 2014 01:06:15 AM JST
        # prop = self.getatom(property_)

* Sat 10 May 2014 01:06:26 AM JST
GetPropertyMethod
* Sat 10 May 2014 01:07:11 AM JST
types,
* Sat 10 May 2014 01:07:11 AM JST
property.types,
* Sat 10 May 2014 01:07:11 AM JST
_reply.property.types,
* Sat 10 May 2014 01:07:12 AM JST
self._reply.property.types,
* Sat 10 May 2014 01:07:22 AM JST
False, 
* Sat 10 May 2014 01:07:31 AM JST
self._reply.window, 
* Sat 10 May 2014 01:09:15 AM JST
50331670
* Sat 10 May 2014 01:09:58 AM JST
67108910
* Sat 10 May 2014 01:11:38 AM JST
get_full_value()
* Sat 10 May 2014 01:11:38 AM JST
reply().get_full_value()
* Sat 10 May 2014 01:11:39 AM JST
67108910).reply().get_full_value()
* Sat 10 May 2014 01:11:39 AM JST
WM_NAME(67108910).reply().get_full_value()
* Sat 10 May 2014 01:11:40 AM JST
GetProperty.WM_NAME(67108910).reply().get_full_value()
* Sat 10 May 2014 01:12:02 AM JST
50331670
* Sat 10 May 2014 01:13:13 AM JST

* Sat 10 May 2014 01:13:13 AM JST

* Sat 10 May 2014 01:13:14 AM JST
        self.getatom = AtomIdentifier(self.connection)

* Sat 10 May 2014 01:13:19 AM JST

* Sat 10 May 2014 01:13:19 AM JST

* Sat 10 May 2014 01:13:19 AM JST
from xcb2.wxproto.atom import AtomIdentifier

* Sat 10 May 2014 01:14:09 AM JST
get_value()
* Sat 10 May 2014 01:16:30 AM JST
class AtomIdentifier(ConnectionAbstract):
    r"""
    """

    # TODO: (Atami) [2014/02/17]
    # behave atom on 0

    def __init__(self, connection):
        r"""
        """
        ConnectionAbstract.__init__(self, connection)
        self.coreatom = CacheAtom(connection)

    @dispatch.generic()
    def identify(self, atom):
        r"""Base generic method of 'identify_atom'"""

    @identify.when('isinstance(atom, AtomPair)')
    def _identify_AtomPair(self, atom):
        r"""SUMMARY

        identify_atom_AtomPair(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        return atom

    @identify.when('isinstance(atom, str)')
    def _identify_str(self, atom):
        r"""SUMMARY

        identify_atom_str(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        num = self.coreatom.InternAtom(True, len(atom), atom)
        name = num.get_atom_name() # AtomNumber.get_atom_name()
        return AtomPair(name, num)

    @identify.when('isinstance(atom, int)')
    def _identify_int(self, atom):
        r"""SUMMARY

        identify_atom_int(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        name = self.coreatom.GetAtomName(atom)
        num = name.intern_atom() # AtomName.intern_atom()
        return AtomPair(name, num)

    def __call__(self, atom):
        return self.identify(atom)

* Sat 10 May 2014 01:16:38 AM JST

* Sat 10 May 2014 01:16:38 AM JST

* Sat 10 May 2014 01:16:38 AM JST
        self.coreatom = CacheAtom(connection)

* Sat 10 May 2014 01:16:42 AM JST
from peak.rules import dispatch
* Sat 10 May 2014 01:17:36 AM JST
coreatom
* Sat 10 May 2014 01:18:42 AM JST
atom), 
* Sat 10 May 2014 01:18:42 AM JST
len(atom), 
* Sat 10 May 2014 01:18:43 AM JST
True, len(atom), 
* Sat 10 May 2014 01:18:50 AM JST
num = 
* Sat 10 May 2014 01:18:53 AM JST

* Sat 10 May 2014 01:18:54 AM JST

* Sat 10 May 2014 01:18:54 AM JST
        name = num.get_atom_name() # AtomNumber.get_atom_name()

* Sat 10 May 2014 01:18:54 AM JST
        name = num.get_atom_name() # AtomNumber.get_atom_name()

* Sat 10 May 2014 01:18:54 AM JST
        name = num.get_atom_name() # AtomNumber.get_atom_name()
        return AtomPair(name, num)

* Sat 10 May 2014 01:19:01 AM JST
coreatom
* Sat 10 May 2014 01:19:19 AM JST
name = 
* Sat 10 May 2014 01:19:21 AM JST

* Sat 10 May 2014 01:19:21 AM JST

* Sat 10 May 2014 01:19:21 AM JST
        num = name.intern_atom() # AtomName.intern_atom()

* Sat 10 May 2014 01:19:21 AM JST
        num = name.intern_atom() # AtomName.intern_atom()

* Sat 10 May 2014 01:19:21 AM JST
        num = name.intern_atom() # AtomName.intern_atom()
        return AtomPair(name, num)

* Sat 10 May 2014 01:21:15 AM JST

* Sat 10 May 2014 01:21:15 AM JST

* Sat 10 May 2014 01:21:15 AM JST
        self.atomidentify =AtomIdentifier(self)

* Sat 10 May 2014 01:21:49 AM JST
# KLUDGE: (Atami) [2014/05/10]
* Sat 10 May 2014 01:21:56 AM JST
AtomIdentifier(self)
* Sat 10 May 2014 01:22:25 AM JST

* Sat 10 May 2014 01:22:25 AM JST

* Sat 10 May 2014 01:22:25 AM JST
            self._setattr(name, cls)

* Sat 10 May 2014 01:22:26 AM JST

* Sat 10 May 2014 01:22:26 AM JST

* Sat 10 May 2014 01:22:26 AM JST
            # setattr(self, name, cls(self.connection))

* Sat 10 May 2014 01:24:47 AM JST
self.connection
* Sat 10 May 2014 01:28:18 AM JST
50331670
* Sat 10 May 2014 01:28:24 AM JST
atom
* Sat 10 May 2014 01:29:18 AM JST
.connection
* Sat 10 May 2014 01:29:44 AM JST
core.
* Sat 10 May 2014 01:29:48 AM JST
core.
* Sat 10 May 2014 01:38:56 AM JST

* Sat 10 May 2014 01:38:56 AM JST

* Sat 10 May 2014 01:38:56 AM JST
        print(type(atompair))

* Sat 10 May 2014 02:00:26 AM JST
connection.core2
* Sat 10 May 2014 02:32:33 AM JST

* Sat 10 May 2014 02:32:33 AM JST

* Sat 10 May 2014 02:32:33 AM JST
from xcb2.wxproto.atom import AtomIdentifier

* Sat 10 May 2014 02:32:37 AM JST

* Sat 10 May 2014 02:32:37 AM JST

* Sat 10 May 2014 02:32:37 AM JST
        # getatom = AtomIdentifier(self.connection)

* Sat 10 May 2014 02:33:38 AM JST

* Sat 10 May 2014 02:33:38 AM JST

* Sat 10 May 2014 02:33:38 AM JST
from xcb2.wxproto.atom import AtomIdentifier

* Sat 10 May 2014 02:33:56 AM JST

* Sat 10 May 2014 02:33:56 AM JST

* Sat 10 May 2014 02:33:56 AM JST
        self.getatom = AtomIdentifier(self._sender.connection)

* Sat 10 May 2014 02:34:09 AM JST
        
* Sat 10 May 2014 02:34:13 AM JST
getatom
* Sat 10 May 2014 02:36:05 AM JST
_sender
* Sat 10 May 2014 02:36:36 AM JST
_sender
* Sat 10 May 2014 02:36:51 AM JST
getatom
* Sat 10 May 2014 02:37:46 AM JST
sender
* Sat 10 May 2014 02:38:29 AM JST
getatom
* Sat 10 May 2014 02:40:51 AM JST

* Sat 10 May 2014 02:40:51 AM JST

* Sat 10 May 2014 02:40:51 AM JST
        # self.getatom = AtomIdentifier(self._sender.connection)

* Sat 10 May 2014 02:40:55 AM JST
getatom
* Sat 10 May 2014 02:41:34 AM JST

* Sat 10 May 2014 02:41:34 AM JST

* Sat 10 May 2014 02:41:34 AM JST
# from xcb2.wxproto.atom import AtomIdentifier

* Sat 10 May 2014 02:41:40 AM JST

* Sat 10 May 2014 02:41:40 AM JST

* Sat 10 May 2014 02:41:40 AM JST
        # self.getatom = sender.getatom

* Sat 10 May 2014 02:41:43 AM JST

* Sat 10 May 2014 02:41:43 AM JST

* Sat 10 May 2014 02:41:43 AM JST
        # self.getatom = AtomIdentifier(self._sender.connection)

* Sat 10 May 2014 02:41:49 AM JST

* Sat 10 May 2014 02:41:49 AM JST

* Sat 10 May 2014 02:41:50 AM JST
# from xcb2.wxproto.atom import AtomIdentifier

* Sat 10 May 2014 02:42:11 AM JST

* Sat 10 May 2014 02:42:11 AM JST

* Sat 10 May 2014 02:42:11 AM JST
        # self._NET_WM_STATE = self.getatom('_NET_WM_STATE')

* Sat 10 May 2014 02:45:10 AM JST

* Sat 10 May 2014 02:45:10 AM JST

* Sat 10 May 2014 02:45:10 AM JST
        # self.rawconnection.display = self.display # for InternAtom

* Sat 10 May 2014 11:50:08 AM JST

* Sat 10 May 2014 11:50:08 AM JST

* Sat 10 May 2014 11:50:08 AM JST
# from xcb2.abstract import ConnectionAbstract, WrapCoreAbstract

* Sat 10 May 2014 11:50:08 AM JST
# from xcb2.abstract import ConnectionAbstract, WrapCoreAbstract

* Sat 10 May 2014 11:50:08 AM JST
# from xcb2.abstract import ConnectionAbstract, WrapCoreAbstract
# from xcb2.wxproto.atom import AtomIdentifier

* Sat 10 May 2014 12:01:58 PM JST
from xcb2.xproto.xconnection import connect
* Sat 10 May 2014 12:02:46 PM JST
xconnection
* Sat 10 May 2014 12:12:56 PM JST
xproto
* Sat 10 May 2014 12:13:02 PM JST
xproto.
* Sat 10 May 2014 12:13:05 PM JST
xproto.
* Sat 10 May 2014 12:13:46 PM JST
xproto.
* Sat 10 May 2014 12:14:02 PM JST
StackModeMethod
* Sat 10 May 2014 12:15:51 PM JST
xproto.
* Sat 10 May 2014 12:16:00 PM JST
xproto
* Sat 10 May 2014 12:18:10 PM JST
xproto
* Sat 10 May 2014 12:18:30 PM JST
xproto.
* Sat 10 May 2014 12:18:38 PM JST
xproto.
* Sat 10 May 2014 12:21:46 PM JST
ext.
* Sat 10 May 2014 12:27:19 PM JST
ext.
* Sat 10 May 2014 12:27:41 PM JST
ext
* Sat 10 May 2014 12:28:20 PM JST
ext.
* Sat 10 May 2014 12:30:05 PM JST
biteventmask
* Sat 10 May 2014 12:40:49 PM JST
xproto.
* Sat 10 May 2014 12:41:51 PM JST

* Sat 10 May 2014 12:41:52 PM JST

* Sat 10 May 2014 12:41:52 PM JST
from xcb2.xproto.xconnection import connect

* Sat 10 May 2014 12:42:29 PM JST
xproto.
* Sat 10 May 2014 04:21:12 PM JST
WrapCoreAbstract
* Sat 10 May 2014 04:21:20 PM JST
CoreMethodAbstract
* Sat 10 May 2014 04:26:13 PM JST
WrapCoreAbstract
* Sat 10 May 2014 04:40:04 PM JST
WrapCoreAbstract
* Sat 10 May 2014 04:40:13 PM JST
CoreMethodAbstract
* Sat 10 May 2014 04:42:22 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 04:43:32 PM JST
cookier
* Sat 10 May 2014 04:43:37 PM JST

* Sat 10 May 2014 04:43:37 PM JST

* Sat 10 May 2014 04:43:37 PM JST
        self._cookier = cookier

* Sat 10 May 2014 04:43:59 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 04:48:43 PM JST
self._parent(InputFocus.PointerRoot, window, time)
* Sat 10 May 2014 04:49:28 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 04:50:12 PM JST
sender
* Sat 10 May 2014 04:50:34 PM JST
self._sender(window, [StackMode.Above])
* Sat 10 May 2014 04:50:58 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 04:51:03 PM JST
sender
* Sat 10 May 2014 04:51:10 PM JST
    def __init__(self, parent):
        r"""

        @Arguments:
        - `sender`:
        """
        SubCoreMethodAbstract.__init__(self, parent)


* Sat 10 May 2014 04:51:24 PM JST
self._sender(window, [StackMode.Below])
* Sat 10 May 2014 04:51:59 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 04:52:07 PM JST
sender
* Sat 10 May 2014 04:52:10 PM JST
sender
* Sat 10 May 2014 04:52:11 PM JST
self._sender = 
* Sat 10 May 2014 04:52:33 PM JST
window, ConfigWindow.StackMode, value_list
* Sat 10 May 2014 04:52:41 PM JST
_send
* Sat 10 May 2014 04:53:38 PM JST
    def __call__(self, window, value_mask, value_list):
        r"""SUMMARY

        __call__(window, value_mask, value_list)

        @Arguments:
        - `window`:
        - `value_mask`:
        - `value_list`:

        @Return:
        """
        return self._send(window, value_mask, value_list)

* Sat 10 May 2014 04:53:50 PM JST
__call__
* Sat 10 May 2014 04:56:46 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 04:58:16 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 04:58:21 PM JST
sender
* Sat 10 May 2014 04:59:31 PM JST
object
* Sat 10 May 2014 04:59:35 PM JST
sender
* Sat 10 May 2014 05:00:08 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 05:00:26 PM JST
sender
* Sat 10 May 2014 05:00:50 PM JST
object
* Sat 10 May 2014 05:01:06 PM JST
sender
* Sat 10 May 2014 05:03:14 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 05:03:22 PM JST
sender
* Sat 10 May 2014 05:04:07 PM JST
_parent
* Sat 10 May 2014 05:04:25 PM JST
_sender.
* Sat 10 May 2014 05:05:07 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 05:05:11 PM JST
sender
* Sat 10 May 2014 05:05:47 PM JST
_parent.
* Sat 10 May 2014 05:05:51 PM JST
_parent
* Sat 10 May 2014 05:06:49 PM JST
object
* Sat 10 May 2014 05:06:53 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 05:07:04 PM JST
sender
* Sat 10 May 2014 05:07:09 PM JST

* Sat 10 May 2014 05:07:10 PM JST

* Sat 10 May 2014 05:07:10 PM JST
        self.connection = self._sender.connection

* Sat 10 May 2014 05:10:05 PM JST
from xcb2.xproto.ext.abstract import SubCoreMethodAbstract
* Sat 10 May 2014 05:10:15 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 05:10:33 PM JST
sender
* Sat 10 May 2014 05:10:36 PM JST

* Sat 10 May 2014 05:10:36 PM JST

* Sat 10 May 2014 05:10:36 PM JST
        self._sender = sender

* Sat 10 May 2014 05:12:31 PM JST
_
* Sat 10 May 2014 05:12:31 PM JST
self._
* Sat 10 May 2014 05:12:35 PM JST
_
* Sat 10 May 2014 05:12:35 PM JST
self._
* Sat 10 May 2014 05:12:37 PM JST
_
* Sat 10 May 2014 05:12:37 PM JST
self._
* Sat 10 May 2014 05:12:39 PM JST
_
* Sat 10 May 2014 05:12:39 PM JST
self._
* Sat 10 May 2014 05:13:15 PM JST

* Sat 10 May 2014 05:13:15 PM JST

* Sat 10 May 2014 05:13:15 PM JST
    # _basedata = eventdata.EventData5()

* Sat 10 May 2014 05:13:26 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 05:13:32 PM JST
sender)
* Sat 10 May 2014 05:13:33 PM JST
sender
* Sat 10 May 2014 05:13:51 PM JST

* Sat 10 May 2014 05:13:51 PM JST

* Sat 10 May 2014 05:13:52 PM JST
        self.connection = self._sender.connection

* Sat 10 May 2014 05:15:30 PM JST
from xcb2.xproto.ext.abstract import SubCoreMethodAbstract
* Sat 10 May 2014 05:15:38 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 05:15:52 PM JST
sender
* Sat 10 May 2014 05:15:57 PM JST

* Sat 10 May 2014 05:15:57 PM JST

* Sat 10 May 2014 05:15:57 PM JST
        self.connection = self._sender.connection

* Sat 10 May 2014 05:16:47 PM JST
object
* Sat 10 May 2014 05:17:00 PM JST

* Sat 10 May 2014 05:17:00 PM JST

* Sat 10 May 2014 05:17:00 PM JST
        self._sender = sender # ClientMessage

* Sat 10 May 2014 05:17:00 PM JST
        self._sender = sender # ClientMessage

* Sat 10 May 2014 05:17:00 PM JST
        self._sender = sender # ClientMessage
        self.connection = self._sender.connection

* Sat 10 May 2014 05:17:12 PM JST
sender
* Sat 10 May 2014 05:17:19 PM JST
_
* Sat 10 May 2014 05:17:20 PM JST
self.
* Sat 10 May 2014 05:17:23 PM JST
_
* Sat 10 May 2014 05:17:23 PM JST
self._
* Sat 10 May 2014 05:17:55 PM JST
object
* Sat 10 May 2014 05:17:59 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 05:18:10 PM JST

* Sat 10 May 2014 05:18:10 PM JST

* Sat 10 May 2014 05:18:10 PM JST
        self._sender = sender # ClientMessage

* Sat 10 May 2014 05:18:10 PM JST
        self._sender = sender # ClientMessage

* Sat 10 May 2014 05:18:10 PM JST
        self._sender = sender # ClientMessage
        self.connection = self._sender.connection

* Sat 10 May 2014 05:18:12 PM JST
sender
* Sat 10 May 2014 05:19:09 PM JST
from xcb2.xproto.ext.abstract import SubCoreMethodAbstract
* Sat 10 May 2014 05:19:15 PM JST
object
* Sat 10 May 2014 05:19:20 PM JST
sender
* Sat 10 May 2014 05:19:50 PM JST
object
* Sat 10 May 2014 05:19:54 PM JST
sender
* Sat 10 May 2014 05:20:04 PM JST

* Sat 10 May 2014 05:20:04 PM JST

* Sat 10 May 2014 05:20:04 PM JST
        self._sender = sender # ClientMessage

* Sat 10 May 2014 05:20:47 PM JST
object
* Sat 10 May 2014 05:20:51 PM JST
sender
* Sat 10 May 2014 05:21:02 PM JST

* Sat 10 May 2014 05:21:02 PM JST

* Sat 10 May 2014 05:21:02 PM JST
        self._sender = sender # ClientMessage

* Sat 10 May 2014 05:21:02 PM JST
        self._sender = sender # ClientMessage

* Sat 10 May 2014 05:21:02 PM JST
        self._sender = sender # ClientMessage
        self.connection = self._sender.connection

* Sat 10 May 2014 05:23:16 PM JST
from xcb2.xproto.ext.abstract import SubCoreMethodAbstract
* Sat 10 May 2014 05:23:24 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 05:23:34 PM JST
sender
* Sat 10 May 2014 05:23:37 PM JST

* Sat 10 May 2014 05:23:38 PM JST

* Sat 10 May 2014 05:23:38 PM JST
        self._sender = sender

* Sat 10 May 2014 05:23:55 PM JST
_pa.
* Sat 10 May 2014 05:23:59 PM JST
            
* Sat 10 May 2014 05:24:06 PM JST
_sender.
* Sat 10 May 2014 05:48:55 PM JST
sendevent
* Sat 10 May 2014 05:48:56 PM JST
SendEventMethodAbstract
* Sat 10 May 2014 05:49:02 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 05:49:08 PM JST
sendevent
* Sat 10 May 2014 05:49:12 PM JST
sendevent
* Sat 10 May 2014 05:49:19 PM JST

* Sat 10 May 2014 05:49:19 PM JST

* Sat 10 May 2014 05:49:19 PM JST
        self.connection = self._sendevent.connection

* Sat 10 May 2014 05:49:38 PM JST
        buf = _StringIO()
        buf.write(_pack('BBH2I', EventCode.ClientMessage, format,
                        sequence_number, window, atom))
        buf.write(str(buffer(_array('b', data))))
        # KLUDGE: (Atami) [2014/05/06]
        # 0xffffff EventMask

* Sat 10 May 2014 05:50:04 PM JST
0xffffff
* Sat 10 May 2014 05:51:26 PM JST
sendevent.
* Sat 10 May 2014 05:51:28 PM JST
SendEventMethodAbstrac
* Sat 10 May 2014 05:51:32 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 05:51:37 PM JST
sendevent
* Sat 10 May 2014 05:51:41 PM JST
sendevent
* Sat 10 May 2014 05:51:52 PM JST
        buf = _StringIO()
        buf.write(_pack('2BH4I5HBx', EventCode.KeyPress, detail,
                        sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen))

* Sat 10 May 2014 05:52:14 PM JST
propagate, window, EventMask.KeyPress, buf.getvalue()
* Sat 10 May 2014 05:52:55 PM JST
sendevent
* Sat 10 May 2014 05:52:56 PM JST
SendEventMethodAbstract
* Sat 10 May 2014 05:53:00 PM JST
SendEventMethodAbstract
* Sat 10 May 2014 05:53:04 PM JST
sendevent
* Sat 10 May 2014 05:53:07 PM JST
sendevent
* Sat 10 May 2014 05:53:20 PM JST
        buf = _StringIO()
        buf.write(_pack('2BH4I5HBx', EventCode.KeyRelease, detail,
                        sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen))

* Sat 10 May 2014 05:53:30 PM JST
propagate, window, EventMask.KeyRelease, buf.getvalue()
* Sat 10 May 2014 05:54:00 PM JST
sendevent.
* Sat 10 May 2014 05:54:02 PM JST
SendEventMethodAbstract
* Sat 10 May 2014 05:54:05 PM JST
SendEventMethodAbstract
* Sat 10 May 2014 05:54:08 PM JST
sendevent
* Sat 10 May 2014 05:54:12 PM JST
SendEventMethodAbstract
* Sat 10 May 2014 05:54:15 PM JST
sendevent
* Sat 10 May 2014 05:54:23 PM JST
        buf = _StringIO()
        buf.write(_pack('2BH4I5HBx', EventCode.ButtonPress, detail,
                        sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen))

* Sat 10 May 2014 05:54:31 PM JST
propagate, window, EventMask.ButtonPress, buf.getvalue()
* Sat 10 May 2014 05:55:05 PM JST
sendevent.
* Sat 10 May 2014 05:55:07 PM JST
sendevent
* Sat 10 May 2014 05:55:09 PM JST
SendEventMethodAbstract
* Sat 10 May 2014 05:55:14 PM JST
SendEventMethodAbstract
* Sat 10 May 2014 05:55:18 PM JST
SendEventMethodAbstrac
* Sat 10 May 2014 05:55:20 PM JST
sendevent
* Sat 10 May 2014 05:55:25 PM JST
sendevent
* Sat 10 May 2014 05:55:32 PM JST
        buf = _StringIO()
        buf.write(_pack('2BH4I5HBx', EventCode.ButtonRelease, detail,
                        sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen))

* Sat 10 May 2014 05:55:38 PM JST
propagate, window, EventMask.ButtonRelease, buf.getvalue()
* Sat 10 May 2014 05:56:25 PM JST
sendevent
* Sat 10 May 2014 05:56:27 PM JST
SendEventMethodAbstract
* Sat 10 May 2014 05:57:05 PM JST
propagate, destination, self.mask, detail,
            sequence_number, time, root, window, child, root_x, root_y,
            event_x, event_y, state, samescreen
* Sat 10 May 2014 05:57:23 PM JST
SendEventMethodAbstract
* Sat 10 May 2014 05:57:28 PM JST
sendevent
* Sat 10 May 2014 05:57:31 PM JST
SendEventMethodAbstract
* Sat 10 May 2014 05:57:35 PM JST
sendevent
* Sat 10 May 2014 05:57:43 PM JST
        buf = _StringIO()
        buf.write(_pack('2BH4I5HBx', EventCode.MotionNotify, detail,
                        sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen))

* Sat 10 May 2014 05:57:53 PM JST
propagate, window, event_mask, buf.getvalue()
* Sat 10 May 2014 05:57:58 PM JST
            
* Sat 10 May 2014 05:58:56 PM JST
CoreMethodAbstract
* Sat 10 May 2014 05:59:00 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 05:59:29 PM JST

* Sat 10 May 2014 05:59:29 PM JST

* Sat 10 May 2014 05:59:30 PM JST
        self._parent = parent

* Sat 10 May 2014 05:59:34 PM JST
_parent.
* Sat 10 May 2014 05:59:37 PM JST
_parent.
* Sat 10 May 2014 05:59:40 PM JST
            
* Sat 10 May 2014 06:00:03 PM JST
object
* Sat 10 May 2014 06:00:20 PM JST
_parent.
* Sat 10 May 2014 06:00:23 PM JST
_parent.
* Sat 10 May 2014 06:00:28 PM JST
            
* Sat 10 May 2014 06:00:39 PM JST
CoreMethodAbstract
* Sat 10 May 2014 06:00:43 PM JST
SubCoreMethodAbstract
* Sat 10 May 2014 06:01:03 PM JST
CoreMethodAbstract
* Sat 10 May 2014 06:02:14 PM JST
    def __call__(self, delete, window, property, type, offset=0, length=10):
        r"""SUMMARY

        __call__(delete, window, property_, offset=0, length=10)

        @Arguments:
        - `delete`:
        - `window`:
        - `property_`:
        - `offset`:
        - `length`:

        @Return:
        """
        return self._getproperty(delete, window, property, type, offset, length)



* Sat 10 May 2014 06:02:32 PM JST
_getproperty
* Sat 10 May 2014 06:02:43 PM JST
_getproperty
* Sat 10 May 2014 06:02:50 PM JST
_getpropertyuncheckd
* Sat 10 May 2014 06:07:43 PM JST

* Sat 10 May 2014 06:07:43 PM JST

* Sat 10 May 2014 06:07:43 PM JST
        # prop = self.getatom(property_)

* Sat 10 May 2014 06:13:38 PM JST

* Sat 10 May 2014 06:13:38 PM JST

* Sat 10 May 2014 06:13:39 PM JST
        # self._window = window

* Sat 10 May 2014 06:13:39 PM JST
        # self._window = window

* Sat 10 May 2014 06:13:39 PM JST
        # self._window = window
        # self._property = property_

* Sat 10 May 2014 06:19:24 PM JST
WrapCoreAbstract
* Sat 10 May 2014 06:20:34 PM JST
ConnectionAbstract
* Sat 10 May 2014 11:23:31 PM JST
base_connection
* Sat 10 May 2014 11:23:51 PM JST
base_
* Sat 10 May 2014 11:26:28 PM JST
import
* Sat 10 May 2014 11:26:41 PM JST
xcb2.
* Sat 10 May 2014 11:28:24 PM JST

* Sat 10 May 2014 11:28:24 PM JST

* Sat 10 May 2014 11:28:25 PM JST
from xcb.xcb import connect as baseconnect

* Sat 10 May 2014 11:28:26 PM JST

* Sat 10 May 2014 11:28:26 PM JST

* Sat 10 May 2014 11:28:26 PM JST
from xcb.xcb import connect as baseconnect

* Sat 10 May 2014 11:33:22 PM JST
xconnection
* Sat 10 May 2014 11:37:23 PM JST

* Sat 10 May 2014 11:37:23 PM JST

* Sat 10 May 2014 11:37:23 PM JST
from xcb2 import xproto

* Sat 10 May 2014 11:47:32 PM JST

* Sat 10 May 2014 11:47:32 PM JST

* Sat 10 May 2014 11:47:32 PM JST
            print(self.connection.core)

* Sat 10 May 2014 11:47:33 PM JST

* Sat 10 May 2014 11:47:33 PM JST

* Sat 10 May 2014 11:47:33 PM JST
            print(self.connection.core)

* Sat 10 May 2014 11:47:47 PM JST
xconnection
* Sat 10 May 2014 11:47:56 PM JST
xproto
* Sat 10 May 2014 11:48:36 PM JST
xproto.
* Sat 10 May 2014 11:49:03 PM JST

* Sat 10 May 2014 11:49:03 PM JST

* Sat 10 May 2014 11:49:03 PM JST
from xcb2.xproto.xconnection import connect

* Sat 10 May 2014 11:53:05 PM JST
xconnection
* Sat 10 May 2014 11:54:32 PM JST
xconnection
* Sat 10 May 2014 11:55:20 PM JST

* Sat 10 May 2014 11:55:20 PM JST

* Sat 10 May 2014 11:55:20 PM JST
from xcb2 import xproto

* Sat 10 May 2014 11:56:32 PM JST

* Sat 10 May 2014 11:56:32 PM JST

* Sat 10 May 2014 11:56:33 PM JST
# from xcb2 import baseconnect

* Sun 11 May 2014 12:17:42 AM JST
class Display(object):
    r"""
    """

    def __init__(self, display=None):
        r"""

        @Arguments:
        - `display`:
        """
        self.display = display or ''

    @property
    def connection(self, ):
        r"""SUMMARY

        connection()

        @Return:
        """
        return Connection.get_instance(display=self.display)

* Sun 11 May 2014 12:17:49 AM JST
from xcb2.xproto.xconnection import Connection
* Sun 11 May 2014 12:18:00 AM JST
display
* Sun 11 May 2014 12:19:15 AM JST
xconnection
* Sun 11 May 2014 12:21:52 AM JST

* Sun 11 May 2014 12:21:52 AM JST

* Sun 11 May 2014 12:21:52 AM JST
"""

* Sun 11 May 2014 12:21:54 AM JST

* Sun 11 May 2014 12:21:54 AM JST

* Sun 11 May 2014 12:21:54 AM JST
from xcb2.xproto import Connection

* Sun 11 May 2014 12:22:21 AM JST
abstract
* Sun 11 May 2014 12:23:07 AM JST
Geometry
* Sun 11 May 2014 02:19:01 AM JST
  root = setup.roots[0].root
  depth = setup.roots[0].root_depth
  visual = setup.roots[0].root_visual
  white = setup.roots[0].white_pixel
 
  window = conn.generate_id()
* Sun 11 May 2014 11:12:36 AM JST
import xcb
from xcb.xproto import *
import xcb.render

def find_format(screen):
    for d in screen.depths:
        if d.depth == depth:
            for v in d.visuals:
                if v.visual == visual:
                    return v.format

    raise Exception("Failed to find an appropriate Render pictformat!")


def startup():
    white = setup.roots[0].white_pixel

    conn.core.CreateWindow(depth, window, root,
                           0, 0, 640, 480, 0,
                           WindowClass.InputOutput,
                           visual,
                           CW.BackPixel | CW.EventMask,
                           [ white, EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure ])

    cookie = conn.render.QueryPictFormats()
    reply = cookie.reply()
    format = find_format(reply.screens[0])

    name = 'X Python Binding Demo'
    conn.core.ChangeProperty(PropMode.Replace, window, xcb.XA_WM_NAME, xcb.XA_STRING, 8, len(name), name)
    conn.render.CreatePicture(pid, window, format, 0, [])
    conn.core.MapWindow(window)
    conn.flush()


def paint():
    conn.core.ClearArea(False, window, 0, 0, 0, 0)

    for x in xrange(0, 7):
        for y in xrange(0, 5):
            rectangle = ((x + 1) * 24 + x * 64, (y + 1) * 24 + y * 64, 64, 64)
            color = (x * 65535 / 7, y * 65535 / 5, (x * y) * 65535 / 35, 65535)
            conn.render.FillRectangles(xcb.render.PictOp.Src, pid, color, 1, rectangle)

    conn.flush()


def run():
    startup()
    print 'Click in window to exit.'

    while True:
        try:
            event = conn.wait_for_event()
        except xcb.ProtocolException, error:
            print "Protocol error %s received!" % error.__class__.__name__
            break
        except:
            print "Unexpected error received: %s" % error.message
            break

        if isinstance(event, ExposeEvent):
            paint()
        elif isinstance(event, EnterNotifyEvent):
            print 'Enter (%d, %d)' % (event.event_x, event.event_y)
        elif isinstance(event, LeaveNotifyEvent):
            print 'Leave (%d, %d)' % (event.event_x, event.event_y)
        elif isinstance(event, ButtonPressEvent):
            print 'Button %d down' % event.detail
            break

    conn.disconnect()



conn = xcb.connect()
conn.render = conn(xcb.render.key)

setup = conn.get_setup()
root = setup.roots[0].root
depth = setup.roots[0].root_depth
visual = setup.roots[0].root_visual

window = conn.generate_id()
pid = conn.generate_id()

run()
* Sun 11 May 2014 11:13:45 AM JST
WM_NAME
* Sun 11 May 2014 11:15:14 AM JST
'test name'
* Sun 11 May 2014 11:30:33 AM JST
class Picture:
    _None = 0


* Sun 11 May 2014 11:30:45 AM JST
class PictOp:
    Clear = 0
    Src = 1
    Dst = 2
    Over = 3
    OverReverse = 4
    In = 5
    InReverse = 6
    Out = 7
    OutReverse = 8
    Atop = 9
    AtopReverse = 10
    Xor = 11
    Add = 12
    Saturate = 13
    DisjointClear = 16
    DisjointSrc = 17
    DisjointDst = 18
    DisjointOver = 19
    DisjointOverReverse = 20
    DisjointIn = 21
    DisjointInReverse = 22
    DisjointOut = 23
    DisjointOutReverse = 24
    DisjointAtop = 25
    DisjointAtopReverse = 26
    DisjointXor = 27
    ConjointClear = 32
    ConjointSrc = 33
    ConjointDst = 34
    ConjointOver = 35
    ConjointOverReverse = 36
    ConjointIn = 37
    ConjointInReverse = 38
    ConjointOut = 39
    ConjointOutReverse = 40
    ConjointAtop = 41
    ConjointAtopReverse = 42
    ConjointXor = 43
    Multiply = 48
    Screen = 49
    Overlay = 50
    Darken = 51
    Lighten = 52
    ColorDodge = 53
    ColorBurn = 54
    HardLight = 55
    SoftLight = 56
    Difference = 57
    Exclusion = 58
    HSLHue = 59
    HSLSaturation = 60
    HSLColor = 61
    HSLLuminosity = 62

* Sun 11 May 2014 11:31:01 AM JST
class PolyEdge:
    Sharp = 0
    Smooth = 1

class PolyMode:
    Precise = 0
    Imprecise = 1

class CP:
    Repeat = 1
    AlphaMap = 2
    AlphaXOrigin = 4
    AlphaYOrigin = 8
    ClipXOrigin = 16
    ClipYOrigin = 32
    ClipMask = 64
    GraphicsExposure = 128
    SubwindowMode = 256
    PolyEdge = 512
    PolyMode = 1024
    Dither = 2048
    ComponentAlpha = 4096

class SubPixel:
    Unknown = 0
    HorizontalRGB = 1
    HorizontalBGR = 2
    VerticalRGB = 3
    VerticalBGR = 4
    _None = 5

class Repeat:
    _None = 0
    Normal = 1
    Pad = 2
    Reflect = 3


* Sun 11 May 2014 11:31:12 AM JST
(IntEnum)
* Sun 11 May 2014 11:33:16 AM JST
class PictFormatError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)

class BadPictFormat(xcb.ProtocolException):
    pass

class PictureError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)

class BadPicture(xcb.ProtocolException):
    pass

class PictOpError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)

class BadPictOp(xcb.ProtocolException):
    pass

class GlyphSetError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)

class BadGlyphSet(xcb.ProtocolException):
    pass

class GlyphError(xcb.Error):
    def __init__(self, parent, offset=0):
        xcb.Error.__init__(self, parent, offset)

class BadGlyph(xcb.ProtocolException):
    pass


* Sun 11 May 2014 11:34:33 AM JST
from xcb import xcb
* Sun 11 May 2014 11:35:19 AM JST
_errors = {
    0 : (PictFormatError, BadPictFormat),
    1 : (PictureError, BadPicture),
    2 : (PictOpError, BadPictOp),
    3 : (GlyphSetError, BadGlyphSet),
    4 : (GlyphError, BadGlyph),
}

* Sun 11 May 2014 11:36:40 AM JST
_ERRORS
* Sun 11 May 2014 11:39:36 AM JST
class QueryVersionCookie(xcb.Cookie):
    pass


* Sun 11 May 2014 11:39:41 AM JST
class QueryPictFormatsCookie(xcb.Cookie):
    pass


* Sun 11 May 2014 11:39:46 AM JST
class QueryPictIndexValuesCookie(xcb.Cookie):
    pass


* Sun 11 May 2014 11:39:54 AM JST
class QueryFiltersCookie(xcb.Cookie):
    pass


* Sun 11 May 2014 11:49:21 AM JST
class DIRECTFORMAT(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.red_shift, self.red_mask, self.green_shift, self.green_mask, self.blue_shift, self.blue_mask, self.alpha_shift, self.alpha_mask,) = unpack_from('HHHHHHHH', parent, offset)

class PICTFORMINFO(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.id, self.type, self.depth,) = unpack_from('IBB2x', parent, offset)
        offset += 8
        self.direct = DIRECTFORMAT(parent, offset, 16)
        offset += 16
        offset += xcb.type_pad(4, offset)
        (self.colormap,) = unpack_from('I', parent, offset)

class PICTVISUAL(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.visual, self.format,) = unpack_from('II', parent, offset)

class PICTDEPTH(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.depth, self.num_visuals,) = unpack_from('BxH4x', parent, offset)
        offset += 8
        self.visuals = xcb.List(parent, offset, self.num_visuals, PICTVISUAL, 8)
        offset += len(self.visuals.buf())
        xcb._resize_obj(self, offset - base)

class PICTSCREEN(xcb.Struct):
    def __init__(self, parent, offset):
        xcb.Struct.__init__(self, parent, offset)
        base = offset
        (self.num_depths, self.fallback,) = unpack_from('II', parent, offset)
        offset += 8
        self.depths = xcb.List(parent, offset, self.num_depths, PICTDEPTH, -1)
        offset += len(self.depths.buf())
        xcb._resize_obj(self, offset - base)

class INDEXVALUE(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.pixel, self.red, self.green, self.blue, self.alpha,) = unpack_from('IHHHH', parent, offset)

class COLOR(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.red, self.green, self.blue, self.alpha,) = unpack_from('HHHH', parent, offset)

class POINTFIX(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.x, self.y,) = unpack_from('ii', parent, offset)

class LINEFIX(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        self.p1 = POINTFIX(parent, offset, 8)
        offset += 8
        offset += xcb.type_pad(8, offset)
        self.p2 = POINTFIX(parent, offset, 8)

class TRIANGLE(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        self.p1 = POINTFIX(parent, offset, 8)
        offset += 8
        offset += xcb.type_pad(8, offset)
        self.p2 = POINTFIX(parent, offset, 8)
        offset += 8
        offset += xcb.type_pad(8, offset)
        self.p3 = POINTFIX(parent, offset, 8)

class TRAPEZOID(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.top, self.bottom,) = unpack_from('ii', parent, offset)
        offset += 8
        self.left = LINEFIX(parent, offset, 16)
        offset += 16
        offset += xcb.type_pad(16, offset)
        self.right = LINEFIX(parent, offset, 16)

class GLYPHINFO(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.width, self.height, self.x, self.y, self.x_off, self.y_off,) = unpack_from('HHhhhh', parent, offset)

class QueryVersionCookie(xcb.Cookie):
    pass

class QueryVersionReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.major_version, self.minor_version,) = unpack_from('xx2x4xII16x', parent, offset)

* Sun 11 May 2014 11:49:30 AM JST
class QueryPictFormatsReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.num_formats, self.num_screens, self.num_depths, self.num_visuals, self.num_subpixel,) = unpack_from('xx2x4xIIIII4x', parent, offset)
        offset += 32
        self.formats = xcb.List(parent, offset, self.num_formats, PICTFORMINFO, 28)
        offset += len(self.formats.buf())
        offset += xcb.type_pad(4, offset)
        self.screens = xcb.List(parent, offset, self.num_screens, PICTSCREEN, -1)
        offset += len(self.screens.buf())
        offset += xcb.type_pad(4, offset)
        self.subpixels = xcb.List(parent, offset, self.num_subpixel, 'I', 4)


* Sun 11 May 2014 11:49:37 AM JST
class QueryPictIndexValuesReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.num_values,) = unpack_from('xx2x4xI20x', parent, offset)
        offset += 32
        self.values = xcb.List(parent, offset, self.num_values, INDEXVALUE, 12)

class TRANSFORM(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.matrix11, self.matrix12, self.matrix13, self.matrix21, self.matrix22, self.matrix23, self.matrix31, self.matrix32, self.matrix33,) = unpack_from('iiiiiiiii', parent, offset)


* Sun 11 May 2014 11:49:43 AM JST
class QueryFiltersReply(xcb.Reply):
    def __init__(self, parent, offset=0):
        xcb.Reply.__init__(self, parent, offset)
        (self.num_aliases, self.num_filters,) = unpack_from('xx2x4xII16x', parent, offset)
        offset += 32
        self.aliases = xcb.List(parent, offset, self.num_aliases, 'H', 2)
        offset += len(self.aliases.buf())
        offset += xcb.type_pad(4, offset)
        self.filters = xcb.List(parent, offset, self.num_filters, STR, -1)


* Sun 11 May 2014 11:50:00 AM JST
class ANIMCURSORELT(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.cursor, self.delay,) = unpack_from('II', parent, offset)

class SPANFIX(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        (self.l, self.r, self.y,) = unpack_from('iii', parent, offset)

class TRAP(xcb.Struct):
    def __init__(self, parent, offset, size):
        xcb.Struct.__init__(self, parent, offset, size)
        self.top = SPANFIX(parent, offset, 12)
        offset += 12
        offset += xcb.type_pad(12, offset)
        self.bot = SPANFIX(parent, offset, 12)


* Sun 11 May 2014 11:50:22 AM JST
from struct import pack, unpack_from
* Sun 11 May 2014 11:50:28 AM JST
from array import array
* Sun 11 May 2014 11:50:30 AM JST
import cStringIO
* Sun 11 May 2014 11:56:31 AM JST
class renderExtension(xcb.Extension):

    def QueryVersion(self, client_major_version, client_minor_version):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', client_major_version, client_minor_version))
        return self.send_request(xcb.Request(buf.getvalue(), 0, False, True),
                                 QueryVersionCookie(),
                                 QueryVersionReply)

    def QueryVersionUnchecked(self, client_major_version, client_minor_version):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', client_major_version, client_minor_version))
        return self.send_request(xcb.Request(buf.getvalue(), 0, False, False),
                                 QueryVersionCookie(),
                                 QueryVersionReply)

    def QueryPictFormats(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 1, False, True),
                                 QueryPictFormatsCookie(),
                                 QueryPictFormatsReply)

    def QueryPictFormatsUnchecked(self, ):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 1, False, False),
                                 QueryPictFormatsCookie(),
                                 QueryPictFormatsReply)

    def QueryPictIndexValues(self, format):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', format))
        return self.send_request(xcb.Request(buf.getvalue(), 2, False, True),
                                 QueryPictIndexValuesCookie(),
                                 QueryPictIndexValuesReply)

    def QueryPictIndexValuesUnchecked(self, format):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', format))
        return self.send_request(xcb.Request(buf.getvalue(), 2, False, False),
                                 QueryPictIndexValuesCookie(),
                                 QueryPictIndexValuesReply)

    def CreatePictureChecked(self, pid, drawable, format, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIII', pid, drawable, format, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, True),
                                 xcb.VoidCookie())

    def CreatePicture(self, pid, drawable, format, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIII', pid, drawable, format, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, False),
                                 xcb.VoidCookie())

    def ChangePictureChecked(self, picture, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', picture, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, True),
                                 xcb.VoidCookie())

    def ChangePicture(self, picture, value_mask, value_list):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', picture, value_mask))
        buf.write(str(buffer(array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, False),
                                 xcb.VoidCookie())

    def SetPictureClipRectanglesChecked(self, picture, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIhh', picture, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, True),
                                 xcb.VoidCookie())

    def SetPictureClipRectangles(self, picture, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIhh', picture, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, False),
                                 xcb.VoidCookie())

    def FreePictureChecked(self, picture):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, True),
                                 xcb.VoidCookie())

    def FreePicture(self, picture):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, False),
                                 xcb.VoidCookie())

    def CompositeChecked(self, op, src, mask, dst, src_x, src_y, mask_x, mask_y, dst_x, dst_y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhhhhhhHH', op, src, mask, dst, src_x, src_y, mask_x, mask_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, True),
                                 xcb.VoidCookie())

    def Composite(self, op, src, mask, dst, src_x, src_y, mask_x, mask_y, dst_x, dst_y, width, height):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhhhhhhHH', op, src, mask, dst, src_x, src_y, mask_x, mask_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, False),
                                 xcb.VoidCookie())

    def TrapezoidsChecked(self, op, src, dst, mask_format, src_x, src_y, traps_len, traps):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(traps, 10, 'traps', True):
            buf.write(pack('=iiiiiiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, True),
                                 xcb.VoidCookie())

    def Trapezoids(self, op, src, dst, mask_format, src_x, src_y, traps_len, traps):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(traps, 10, 'traps', True):
            buf.write(pack('=iiiiiiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, False),
                                 xcb.VoidCookie())

    def TrianglesChecked(self, op, src, dst, mask_format, src_x, src_y, triangles_len, triangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(triangles, 6, 'triangles', True):
            buf.write(pack('=iiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, True),
                                 xcb.VoidCookie())

    def Triangles(self, op, src, dst, mask_format, src_x, src_y, triangles_len, triangles):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(triangles, 6, 'triangles', True):
            buf.write(pack('=iiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, False),
                                 xcb.VoidCookie())

    def TriStripChecked(self, op, src, dst, mask_format, src_x, src_y, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=ii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, True),
                                 xcb.VoidCookie())

    def TriStrip(self, op, src, dst, mask_format, src_x, src_y, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=ii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, False),
                                 xcb.VoidCookie())

    def TriFanChecked(self, op, src, dst, mask_format, src_x, src_y, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=ii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, True),
                                 xcb.VoidCookie())

    def TriFan(self, op, src, dst, mask_format, src_x, src_y, points_len, points):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIhh', op, src, dst, mask_format, src_x, src_y))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(pack('=ii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, False),
                                 xcb.VoidCookie())

    def CreateGlyphSetChecked(self, gsid, format):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', gsid, format))
        return self.send_request(xcb.Request(buf.getvalue(), 17, True, True),
                                 xcb.VoidCookie())

    def CreateGlyphSet(self, gsid, format):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', gsid, format))
        return self.send_request(xcb.Request(buf.getvalue(), 17, True, False),
                                 xcb.VoidCookie())

    def ReferenceGlyphSetChecked(self, gsid, existing):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', gsid, existing))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, True),
                                 xcb.VoidCookie())

    def ReferenceGlyphSet(self, gsid, existing):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', gsid, existing))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, False),
                                 xcb.VoidCookie())

    def FreeGlyphSetChecked(self, glyphset):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', glyphset))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, True),
                                 xcb.VoidCookie())

    def FreeGlyphSet(self, glyphset):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', glyphset))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, False),
                                 xcb.VoidCookie())

    def AddGlyphsChecked(self, glyphset, glyphs_len, glyphids, glyphs, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', glyphset, glyphs_len))
        buf.write(str(buffer(array('I', glyphids))))
        for elt in xcb.Iterator(glyphs, 6, 'glyphs', True):
            buf.write(pack('=HHhhhh', *elt))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 20, True, True),
                                 xcb.VoidCookie())

    def AddGlyphs(self, glyphset, glyphs_len, glyphids, glyphs, data_len, data):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xII', glyphset, glyphs_len))
        buf.write(str(buffer(array('I', glyphids))))
        for elt in xcb.Iterator(glyphs, 6, 'glyphs', True):
            buf.write(pack('=HHhhhh', *elt))
        buf.write(str(buffer(array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 20, True, False),
                                 xcb.VoidCookie())

    def FreeGlyphsChecked(self, glyphset, glyphs_len, glyphs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', glyphset))
        buf.write(str(buffer(array('I', glyphs))))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, True),
                                 xcb.VoidCookie())

    def FreeGlyphs(self, glyphset, glyphs_len, glyphs):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', glyphset))
        buf.write(str(buffer(array('I', glyphs))))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, False),
                                 xcb.VoidCookie())

    def CompositeGlyphs8Checked(self, op, src, dst, mask_format, glyphset, src_x, src_y, glyphcmds_len, glyphcmds):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIIhh', op, src, dst, mask_format, glyphset, src_x, src_y))
        buf.write(str(buffer(array('B', glyphcmds))))
        return self.send_request(xcb.Request(buf.getvalue(), 23, True, True),
                                 xcb.VoidCookie())

    def CompositeGlyphs8(self, op, src, dst, mask_format, glyphset, src_x, src_y, glyphcmds_len, glyphcmds):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIIhh', op, src, dst, mask_format, glyphset, src_x, src_y))
        buf.write(str(buffer(array('B', glyphcmds))))
        return self.send_request(xcb.Request(buf.getvalue(), 23, True, False),
                                 xcb.VoidCookie())

    def CompositeGlyphs16Checked(self, op, src, dst, mask_format, glyphset, src_x, src_y, glyphcmds_len, glyphcmds):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIIhh', op, src, dst, mask_format, glyphset, src_x, src_y))
        buf.write(str(buffer(array('B', glyphcmds))))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, True),
                                 xcb.VoidCookie())

    def CompositeGlyphs16(self, op, src, dst, mask_format, glyphset, src_x, src_y, glyphcmds_len, glyphcmds):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIIhh', op, src, dst, mask_format, glyphset, src_x, src_y))
        buf.write(str(buffer(array('B', glyphcmds))))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, False),
                                 xcb.VoidCookie())

    def CompositeGlyphs32Checked(self, op, src, dst, mask_format, glyphset, src_x, src_y, glyphcmds_len, glyphcmds):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIIhh', op, src, dst, mask_format, glyphset, src_x, src_y))
        buf.write(str(buffer(array('B', glyphcmds))))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, True),
                                 xcb.VoidCookie())

    def CompositeGlyphs32(self, op, src, dst, mask_format, glyphset, src_x, src_y, glyphcmds_len, glyphcmds):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xIIIIhh', op, src, dst, mask_format, glyphset, src_x, src_y))
        buf.write(str(buffer(array('B', glyphcmds))))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, False),
                                 xcb.VoidCookie())

    def FillRectanglesChecked(self, op, dst, color, rects_len, rects):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xI', op, dst))
        for elt in xcb.Iterator(color, 4, 'color', False):
            buf.write(pack('=HHHH', *elt))
        for elt in xcb.Iterator(rects, 4, 'rects', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 26, True, True),
                                 xcb.VoidCookie())

    def FillRectangles(self, op, dst, color, rects_len, rects):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xB3xI', op, dst))
        for elt in xcb.Iterator(color, 4, 'color', False):
            buf.write(pack('=HHHH', *elt))
        for elt in xcb.Iterator(rects, 4, 'rects', True):
            buf.write(pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 26, True, False),
                                 xcb.VoidCookie())

    def CreateCursorChecked(self, cid, source, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIHH', cid, source, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, True),
                                 xcb.VoidCookie())

    def CreateCursor(self, cid, source, x, y):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIIHH', cid, source, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, False),
                                 xcb.VoidCookie())

    def SetPictureTransformChecked(self, picture, transform):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(transform, 9, 'transform', False):
            buf.write(pack('=iiiiiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, True),
                                 xcb.VoidCookie())

    def SetPictureTransform(self, picture, transform):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(transform, 9, 'transform', False):
            buf.write(pack('=iiiiiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, False),
                                 xcb.VoidCookie())

    def QueryFilters(self, drawable):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 29, False, True),
                                 QueryFiltersCookie(),
                                 QueryFiltersReply)

    def QueryFiltersUnchecked(self, drawable):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 29, False, False),
                                 QueryFiltersCookie(),
                                 QueryFiltersReply)

    def SetPictureFilterChecked(self, picture, filter_len, filter, values_len, values):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', picture, filter_len))
        buf.write(str(buffer(array('b', filter))))
        buf.write(str(buffer(array('i', values))))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, True),
                                 xcb.VoidCookie())

    def SetPictureFilter(self, picture, filter_len, filter, values_len, values):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIH2x', picture, filter_len))
        buf.write(str(buffer(array('b', filter))))
        buf.write(str(buffer(array('i', values))))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, False),
                                 xcb.VoidCookie())

    def CreateAnimCursorChecked(self, cid, cursors_len, cursors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cid))
        for elt in xcb.Iterator(cursors, 2, 'cursors', True):
            buf.write(pack('=II', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 31, True, True),
                                 xcb.VoidCookie())

    def CreateAnimCursor(self, cid, cursors_len, cursors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', cid))
        for elt in xcb.Iterator(cursors, 2, 'cursors', True):
            buf.write(pack('=II', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 31, True, False),
                                 xcb.VoidCookie())

    def AddTrapsChecked(self, picture, x_off, y_off, traps_len, traps):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIhh', picture, x_off, y_off))
        for elt in xcb.Iterator(traps, 6, 'traps', True):
            buf.write(pack('=iiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, True),
                                 xcb.VoidCookie())

    def AddTraps(self, picture, x_off, y_off, traps_len, traps):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xIhh', picture, x_off, y_off))
        for elt in xcb.Iterator(traps, 6, 'traps', True):
            buf.write(pack('=iiiiii', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, False),
                                 xcb.VoidCookie())

    def CreateSolidFillChecked(self, picture, color):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(color, 4, 'color', False):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, True),
                                 xcb.VoidCookie())

    def CreateSolidFill(self, picture, color):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(color, 4, 'color', False):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, False),
                                 xcb.VoidCookie())

    def CreateLinearGradientChecked(self, picture, p1, p2, num_stops, stops, colors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(p1, 2, 'p1', False):
            buf.write(pack('=ii', *elt))
        for elt in xcb.Iterator(p2, 2, 'p2', False):
            buf.write(pack('=ii', *elt))
        buf.write(pack('=I', num_stops))
        buf.write(str(buffer(array('i', stops))))
        for elt in xcb.Iterator(colors, 4, 'colors', True):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, True),
                                 xcb.VoidCookie())

    def CreateLinearGradient(self, picture, p1, p2, num_stops, stops, colors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(p1, 2, 'p1', False):
            buf.write(pack('=ii', *elt))
        for elt in xcb.Iterator(p2, 2, 'p2', False):
            buf.write(pack('=ii', *elt))
        buf.write(pack('=I', num_stops))
        buf.write(str(buffer(array('i', stops))))
        for elt in xcb.Iterator(colors, 4, 'colors', True):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, False),
                                 xcb.VoidCookie())

    def CreateRadialGradientChecked(self, picture, inner, outer, inner_radius, outer_radius, num_stops, stops, colors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(inner, 2, 'inner', False):
            buf.write(pack('=ii', *elt))
        for elt in xcb.Iterator(outer, 2, 'outer', False):
            buf.write(pack('=ii', *elt))
        buf.write(pack('=iiI', inner_radius, outer_radius, num_stops))
        buf.write(str(buffer(array('i', stops))))
        for elt in xcb.Iterator(colors, 4, 'colors', True):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, True),
                                 xcb.VoidCookie())

    def CreateRadialGradient(self, picture, inner, outer, inner_radius, outer_radius, num_stops, stops, colors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(inner, 2, 'inner', False):
            buf.write(pack('=ii', *elt))
        for elt in xcb.Iterator(outer, 2, 'outer', False):
            buf.write(pack('=ii', *elt))
        buf.write(pack('=iiI', inner_radius, outer_radius, num_stops))
        buf.write(str(buffer(array('i', stops))))
        for elt in xcb.Iterator(colors, 4, 'colors', True):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, False),
                                 xcb.VoidCookie())

    def CreateConicalGradientChecked(self, picture, center, angle, num_stops, stops, colors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(center, 2, 'center', False):
            buf.write(pack('=ii', *elt))
        buf.write(pack('=iI', angle, num_stops))
        buf.write(str(buffer(array('i', stops))))
        for elt in xcb.Iterator(colors, 4, 'colors', True):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, True),
                                 xcb.VoidCookie())

    def CreateConicalGradient(self, picture, center, angle, num_stops, stops, colors):
        buf = cStringIO.StringIO()
        buf.write(pack('=xx2xI', picture))
        for elt in xcb.Iterator(center, 2, 'center', False):
            buf.write(pack('=ii', *elt))
        buf.write(pack('=iI', angle, num_stops))
        buf.write(str(buffer(array('i', stops))))
        for elt in xcb.Iterator(colors, 4, 'colors', True):
            buf.write(pack('=HHHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, False),
                                 xcb.VoidCookie())

* Sun 11 May 2014 11:56:57 AM JST
import cStringIO
* Sun 11 May 2014 11:57:07 AM JST
from struct import pack, unpack_from
* Sun 11 May 2014 11:57:13 AM JST
from array import array
* Sun 11 May 2014 11:57:44 AM JST

* Sun 11 May 2014 11:57:46 AM JST
define
* Sun 11 May 2014 11:58:15 AM JST
MAJOR_VERSION = 0
MINOR_VERSION = 11

* Sun 11 May 2014 11:58:30 AM JST
key = xcb.ExtensionKey('RENDER')
* Sun 11 May 2014 11:58:47 AM JST
_events = {
}

* Sun 11 May 2014 11:59:00 AM JST
xcb._add_ext(key, renderExtension, _events, _errors)
* Sun 11 May 2014 11:59:53 AM JST

* Sun 11 May 2014 11:59:54 AM JST
reply
* Sun 11 May 2014 12:00:27 PM JST
cc.core.atomidentify('STRING')
* Sun 11 May 2014 12:02:16 PM JST

* Sun 11 May 2014 12:02:16 PM JST

* Sun 11 May 2014 12:02:16 PM JST
Unused import GetKeyboardMappingReply from wildcard import (W0614)

* Sun 11 May 2014 12:02:18 PM JST

* Sun 11 May 2014 12:02:18 PM JST

* Sun 11 May 2014 12:02:18 PM JST
from xcb.xproto import *

* Sun 11 May 2014 12:02:39 PM JST
xcb2.xproto.
* Sun 11 May 2014 12:11:21 PM JST
        self._setattr('InternAtom', ext.InternAtom)
        self._setattr('InternAtomUnchecked', ext.InternAtomUnchecked)
        self._setattr('GetAtomName', ext.GetAtomName)
        self._setattr('GetAtomNameUnchecked', ext.GetAtomNameUnchecked)
        self.atomidentify = AtomIdentifier(self.connection)
        for name, cls in self._methods.iteritems():
            self._setattr(name, cls)

* Sun 11 May 2014 12:14:45 PM JST
    'AllocColor':                       ext.AllocColor,
    'AllocColorCells':                  ext.AllocColorCells,
    'AllocColorCellsUnchecked':         ext.AllocColorCellsUnchecked,
    'AllocColorPlanes':                 ext.AllocColorPlanes,
    'AllocColorPlanesUnchecked':        ext.AllocColorPlanesUnchecked,
    'AllocNamedColor':                  ext.AllocNamedColor,
    'AllocNamedColorUnchecked':         ext.AllocNamedColorUnchecked,
    'AllowEvents':                      ext.AllowEvents,
    'AllowEventsChecked':               ext.AllowEventsChecked,
    'Bell':                             ext.Bell,
    'BellChecked':                      ext.BellChecked,
    'ChangeActivePointerGrab':          ext.ChangeActivePointerGrab,
    'ChangeActivePointerGrabChecked':   ext.ChangeActivePointerGrabChecked,
    'ChangeGC':                         ext.ChangeGC,
    'ChangeGCChecked':                  ext.ChangeGCChecked,
    'ChangeKeyboardControl':            ext.ChangeKeyboardControl,
    'ChangeKeyboardControlChecked':     ext.ChangeKeyboardControlChecked,
    'ChangeKeyboardMapping':            ext.ChangeKeyboardMapping,
    'ChangeKeyboardMappingChecked':     ext.ChangeKeyboardMappingChecked,
    'ChangePointerControl':             ext.ChangePointerControl,
    'ChangePointerControlChecked':      ext.ChangePointerControlChecked,
    'ChangeProperty':                   ext.ChangeProperty,
    'ChangePropertyChecked':            ext.ChangePropertyChecked,
    'ChangeSaveSet':                    ext.ChangeSaveSet,
    'ChangeSaveSetChecked':             ext.ChangeSaveSetChecked,
    'ChangeWindowAttributes':           ext.ChangeWindowAttributes,
    'ChangeWindowAttributesChecked':    ext.ChangeWindowAttributesChecked,
    'CirculateWindow':                  ext.CirculateWindow,
    'CirculateWindowChecked':           ext.CirculateWindowChecked,
    'ClearArea':                        ext.ClearArea,
    'ClearAreaChecked':                 ext.ClearAreaChecked,
    'CloseFont':                        ext.CloseFont,
    'CloseFontChecked':                 ext.CloseFontChecked,
    'ConfigureWindow':                  ext.ConfigureWindow,
    'ConfigureWindowChecked':           ext.ConfigureWindowChecked,
    'ConvertSelection':                 ext.ConvertSelection,
    'ConvertSelectionChecked':          ext.ConvertSelectionChecked,
    'CopyArea':                         ext.CopyArea,
    'CopyAreaChecked':                  ext.CopyAreaChecked,
    'CopyColormapAndFree':              ext.CopyColormapAndFree,
    'CopyColormapAndFreeChecked':       ext.CopyColormapAndFreeChecked,
    'CopyGC':                           ext.CopyGC,
    'CopyGCChecked':                    ext.CopyGCChecked,
    'CopyPlane':                        ext.CopyPlane,
    'CopyPlaneChecked':                 ext.CopyPlaneChecked,
    'CreateColormap':                   ext.CreateColormap,
    'CreateColormapChecked':            ext.CreateColormapChecked,
    'CreateCursor':                     ext.CreateCursor,
    'CreateCursorChecked':              ext.CreateCursorChecked,
    'CreateGC':                         ext.CreateGC,
    'CreateGCChecked':                  ext.CreateGCChecked,
    'CreateGlyphCursor':                ext.CreateGlyphCursor,
    'CreateGlyphCursorChecked':         ext.CreateGlyphCursorChecked,
    'CreatePixmap':                     ext.CreatePixmap,
    'CreatePixmapChecked':              ext.CreatePixmapChecked,
    'CreateWindow':                     ext.CreateWindow,
    'CreateWindowChecked':              ext.CreateWindowChecked,
    'DeleteProperty':                   ext.DeleteProperty,
    'DeletePropertyChecked':            ext.DeletePropertyChecked,
    'DestroySubwindows':                ext.DestroySubwindows,
    'DestroySubwindowsChecked':         ext.DestroySubwindowsChecked,
    'DestroyWindow':                    ext.DestroyWindow,
    'DestroyWindowChecked':             ext.DestroyWindowChecked,
    'FillPoly':                         ext.FillPoly,
    'FillPolyChecked':                  ext.FillPolyChecked,
    'ForceScreenSaver':                 ext.ForceScreenSaver,
    'ForceScreenSaverChecked':          ext.ForceScreenSaverChecked,
    'FreeColormap':                     ext.FreeColormap,
    'FreeColormapChecked':              ext.FreeColormapChecked,
    'FreeColors':                       ext.FreeColors,
    'FreeColorsChecked':                ext.FreeColorsChecked,
    'FreeCursor':                       ext.FreeCursor,
    'FreeCursorChecked':                ext.FreeCursorChecked,
    'FreeGC':                           ext.FreeGC,
    'FreeGCChecked':                    ext.FreeGCChecked,
    'FreePixmap':                       ext.FreePixmap,
    'FreePixmapChecked':                ext.FreePixmapChecked,
    'GetFontPath':                      ext.GetFontPath,
    'GetFontPathUnchecked':             ext.GetFontPathUnchecked,
    'GetGeometry':                      ext.GetGeometry,
    'GetGeometryUnchecked':             ext.GetGeometryUnchecked,
    'GetImage':                         ext.GetImage,
    'GetImageUnchecked':                ext.GetImageUnchecked,
    'GetInputFocus':                    ext.GetInputFocus,
    'GetInputFocusUnchecked':           ext.GetInputFocusUnchecked,
    'GetKeyboardControl':               ext.GetKeyboardControl,
    'GetKeyboardControlUnchecked':      ext.GetKeyboardControlUnchecked,
    'GetKeyboardMapping':               ext.GetKeyboardMapping,
    'GetKeyboardMappingUnchecked':      ext.GetKeyboardMappingUnchecked,
    'GetModifierMapping':               ext.GetModifierMapping,
    'GetModifierMappingUnchecked':      ext.GetModifierMappingUnchecked,
    'GetMotionEvents':                  ext.GetMotionEvents,
    'GetMotionEventsUnchecked':         ext.GetMotionEventsUnchecked,
    'GetPointerControl':                ext.GetPointerControl,
    'GetPointerControlUnchecked':       ext.GetPointerControlUnchecked,
    'GetPointerMapping':                ext.GetPointerMapping,
    'GetPointerMappingUnchecked':       ext.GetPointerMappingUnchecked,
    'GetProperty':                      ext.GetProperty,
    'GetPropertyUnchecked':             ext.GetPropertyUnchecked,
    'GetSelectionOwner':                ext.GetSelectionOwner,
    'GetSelectionOwnerUnchecked':       ext.GetSelectionOwnerUnchecked,
    'GetWindowAttributes':              ext.GetWindowAttributes,
    'GetWindowAttributesUnchecked':     ext.GetWindowAttributesUnchecked,
    'GrabButton':                       ext.GrabButton,
    'GrabButtonChecked':                ext.GrabButtonChecked,
    'GrabKey':                          ext.GrabKey,
    'GrabKeyChecked':                   ext.GrabKeyChecked,
    'GrabKeyboard':                     ext.GrabKeyboard,
    'GrabKeyboardUnchecked':            ext.GrabKeyboardUnchecked,
    'GrabPointer':                      ext.GrabPointer,
    'GrabPointerUnchecked':             ext.GrabPointerUnchecked,
    'GrabServer':                       ext.GrabServer,
    'GrabServerChecked':                ext.GrabServerChecked,
    'ImageText16':                      ext.ImageText16,
    'ImageText16Checked':               ext.ImageText16Checked,
    'ImageText8':                       ext.ImageText8,
    'ImageText8Checked':                ext.ImageText8Checked,
    'InstallColormap':                  ext.InstallColormap,
    'InstallColormapChecked':           ext.InstallColormapChecked,
    'KillClient':                       ext.KillClient,
    'KillClientChecked':                ext.KillClientChecked,
    'ListExtensions':                   ext.ListExtensions,
    'ListExtensionsUnchecked':          ext.ListExtensionsUnchecked,
    'ListFonts':                        ext.ListFonts,
    'ListFontsUnchecked':               ext.ListFontsUnchecked,
    'ListFontsWithInfo':                ext.ListFontsWithInfo,
    'ListFontsWithInfoUnchecked':       ext.ListFontsWithInfoUnchecked,
    'ListInstalledColormaps':           ext.ListInstalledColormaps,
    'ListInstalledColormapsUnchecked':  ext.ListInstalledColormapsUnchecked,
    'ListProperties':                   ext.ListProperties,
    'ListPropertiesUnchecked':          ext.ListPropertiesUnchecked,
    'LookupColor':                      ext.LookupColor,
    'LookupColorUnchecked':             ext.LookupColorUnchecked,
    'MapSubwindows':                    ext.MapSubwindows,
    'MapSubwindowsChecked':             ext.MapSubwindowsChecked,
    'MapWindow':                        ext.MapWindow,
    'MapWindowChecked':                 ext.MapWindowChecked,
    'NoOperation':                      ext.NoOperation,
    'NoOperationChecked':               ext.NoOperationChecked,
    'OpenFont':                         ext.OpenFont,
    'OpenFontChecked':                  ext.OpenFontChecked,
    'PolyArc':                          ext.PolyArc,
    'PolyArcChecked':                   ext.PolyArcChecked,
    'PolyFillRectangle':                ext.PolyFillRectangle,
    'PolyFillRectangleChecked':         ext.PolyFillRectangleChecked,
    'PolyLine':                         ext.PolyLine,
    'PolyLineChecked':                  ext.PolyLineChecked,
    'PolyPoint':                        ext.PolyPoint,
    'PolyPointChecked':                 ext.PolyPointChecked,
    'PolyRectangle':                    ext.PolyRectangle,
    'PolyRectangleChecked':             ext.PolyRectangleChecked,
    'PolySegment':                      ext.PolySegment,
    'PolySegmentChecked':               ext.PolySegmentChecked,
    'PolyText16':                       ext.PolyText16,
    'PolyText16Checked':                ext.PolyText16Checked,
    'PolyText8':                        ext.PolyText8,
    'PolyText8Checked':                 ext.PolyText8Checked,
    'PutImage':                         ext.PutImage,
    'PutImageChecked':                  ext.PutImageChecked,
    'QueryBestSize':                    ext.QueryBestSize,
    'QueryBestSizeUnchecked':           ext.QueryBestSizeUnchecked,
    'QueryColors':                      ext.QueryColors,
    'QueryColorsUnchecked':             ext.QueryColorsUnchecked,
    'QueryExtension':                   ext.QueryExtension,
    'QueryExtensionUnchecked':          ext.QueryExtensionUnchecked,
    'QueryFont':                        ext.QueryFont,
    'QueryFontUnchecked':               ext.QueryFontUnchecked,
    'QueryPointer':                     ext.QueryPointer,
    'QueryPointerUnchecked':            ext.QueryPointerUnchecked,
    'QueryTextExtents':                 ext.QueryTextExtents,
    'QueryTextExtentsUnchecked':        ext.QueryTextExtentsUnchecked,
    'QueryTree':                        ext.QueryTree,
    'QueryTreeUnchecked':               ext.QueryTreeUnchecked,
    'RecolorCursor':                    ext.RecolorCursor,
    'RecolorCursorChecked':             ext.RecolorCursorChecked,
    'ReparentWindow':                   ext.ReparentWindow,
    'ReparentWindowChecked':            ext.ReparentWindowChecked,
    'RotateProperties':                 ext.RotateProperties,
    'RotatePropertiesChecked':          ext.RotatePropertiesChecked,
    'SendEvent':                        ext.SendEvent,
    'SendEventChecked':                 ext.SendEventChecked,
    'SetAccessControl':                 ext.SetAccessControl,
    'SetAccessControlChecked':          ext.SetAccessControlChecked,
    'SetClipRectangles':                ext.SetClipRectangles,
    'SetClipRectanglesChecked':         ext.SetClipRectanglesChecked,
    'SetCloseDownMode':                 ext.SetCloseDownMode,
    'SetCloseDownModeChecked':          ext.SetCloseDownModeChecked,
    'SetDashes':                        ext.SetDashes,
    'SetDashesChecked':                 ext.SetDashesChecked,
    'SetFontPath':                      ext.SetFontPath,
    'SetFontPathChecked':               ext.SetFontPathChecked,
    'SetInputFocus':                    ext.SetInputFocus,
    'SetInputFocusChecked':             ext.SetInputFocusChecked,
    'SetModifierMapping':               ext.SetModifierMapping,
    'SetModifierMappingUnchecked':      ext.SetModifierMappingUnchecked,
    'SetPointerMapping':                ext.SetPointerMapping,
    'SetPointerMappingUnchecked':       ext.SetPointerMappingUnchecked,
    'SetSelectionOwner':                ext.SetSelectionOwner,
    'SetSelectionOwnerChecked':         ext.SetSelectionOwnerChecked,
    'StoreColors':                      ext.StoreColors,
    'StoreColorsChecked':               ext.StoreColorsChecked,
    'StoreNamedColor':                  ext.StoreNamedColor,
    'StoreNamedColorChecked':           ext.StoreNamedColorChecked,
    'TranslateCoordinates':             ext.TranslateCoordinates,
    'TranslateCoordinatesUnchecked':    ext.TranslateCoordinatesUnchecked,
    'UngrabButton':                     ext.UngrabButton,
    'UngrabButtonChecked':              ext.UngrabButtonChecked,
    'UngrabKey':                        ext.UngrabKey,
    'UngrabKeyChecked':                 ext.UngrabKeyChecked,
    'UngrabKeyboard':                   ext.UngrabKeyboard,
    'UngrabKeyboardChecked':            ext.UngrabKeyboardChecked,
    'UngrabPointer':                    ext.UngrabPointer,
    'UngrabPointerChecked':             ext.UngrabPointerChecked,
    'UngrabServer':                     ext.UngrabServer,
    'UngrabServerChecked':              ext.UngrabServerChecked,
    'UninstallColormap':                ext.UninstallColormap,
    'UninstallColormapChecked':         ext.UninstallColormapChecked,
    'UnmapSubwindows':                  ext.UnmapSubwindows,
    'UnmapSubwindowsChecked':           ext.UnmapSubwindowsChecked,
    'UnmapWindow':                      ext.UnmapWindow,
    'UnmapWindowChecked':               ext.UnmapWindowChecked,
    'WarpPointer':                      ext.WarpPointer,
    'WarpPointerChecked':               ext.WarpPointerChecked,

* Sun 11 May 2014 12:15:15 PM JST
WarpPointerChecked
* Sun 11 May 2014 12:15:16 PM JST
WarpPointer
* Sun 11 May 2014 12:15:16 PM JST
UnmapWindowChecked
* Sun 11 May 2014 12:15:16 PM JST
UnmapWindow
* Sun 11 May 2014 12:15:16 PM JST
UnmapSubwindowsChecked
* Sun 11 May 2014 12:15:16 PM JST
UnmapSubwindows
* Sun 11 May 2014 12:15:17 PM JST
UninstallColormapChecked
* Sun 11 May 2014 12:15:17 PM JST
UninstallColormap
* Sun 11 May 2014 12:15:17 PM JST
UngrabServerChecked
* Sun 11 May 2014 12:15:17 PM JST
UngrabServer
* Sun 11 May 2014 12:15:17 PM JST
UngrabPointerChecked
* Sun 11 May 2014 12:15:17 PM JST
UngrabPointer
* Sun 11 May 2014 12:15:17 PM JST
UngrabKeyboardChecked
* Sun 11 May 2014 12:15:17 PM JST
UngrabKeyboard
* Sun 11 May 2014 12:15:17 PM JST
UngrabKeyChecked
* Sun 11 May 2014 12:15:17 PM JST
UngrabKey
* Sun 11 May 2014 12:15:17 PM JST
UngrabButtonChecked
* Sun 11 May 2014 12:15:17 PM JST
UngrabButton
* Sun 11 May 2014 12:15:18 PM JST
TranslateCoordinatesUnchecked
* Sun 11 May 2014 12:15:18 PM JST
TranslateCoordinates
* Sun 11 May 2014 12:15:18 PM JST
StoreNamedColorChecked
* Sun 11 May 2014 12:15:18 PM JST
StoreNamedColor
* Sun 11 May 2014 12:15:18 PM JST
StoreColorsChecked
* Sun 11 May 2014 12:15:18 PM JST
StoreColors
* Sun 11 May 2014 12:15:18 PM JST
SetSelectionOwnerChecked
* Sun 11 May 2014 12:15:18 PM JST
SetSelectionOwner
* Sun 11 May 2014 12:15:18 PM JST
SetPointerMappingUnchecked
* Sun 11 May 2014 12:15:18 PM JST
SetPointerMapping
* Sun 11 May 2014 12:15:18 PM JST
SetModifierMappingUnchecked
* Sun 11 May 2014 12:15:18 PM JST
SetModifierMapping
* Sun 11 May 2014 12:15:19 PM JST
SetInputFocusChecked
* Sun 11 May 2014 12:15:19 PM JST
SetInputFocus
* Sun 11 May 2014 12:15:19 PM JST
SetFontPathChecked
* Sun 11 May 2014 12:15:19 PM JST
SetFontPath
* Sun 11 May 2014 12:15:19 PM JST
SetDashesChecked
* Sun 11 May 2014 12:15:19 PM JST
SetDashes
* Sun 11 May 2014 12:15:19 PM JST
SetCloseDownModeChecked
* Sun 11 May 2014 12:15:19 PM JST
SetCloseDownMode
* Sun 11 May 2014 12:15:19 PM JST
SetClipRectanglesChecked
* Sun 11 May 2014 12:15:19 PM JST
SetClipRectangles
* Sun 11 May 2014 12:15:19 PM JST
SetAccessControlChecked
* Sun 11 May 2014 12:15:19 PM JST
SetAccessControl
* Sun 11 May 2014 12:15:19 PM JST
SendEventChecked
* Sun 11 May 2014 12:15:19 PM JST
SendEvent
* Sun 11 May 2014 12:15:20 PM JST
RotatePropertiesChecked
* Sun 11 May 2014 12:15:20 PM JST
RotateProperties
* Sun 11 May 2014 12:15:20 PM JST
ReparentWindowChecked
* Sun 11 May 2014 12:15:20 PM JST
ReparentWindow
* Sun 11 May 2014 12:15:20 PM JST
RecolorCursorChecked
* Sun 11 May 2014 12:15:20 PM JST
RecolorCursor
* Sun 11 May 2014 12:15:20 PM JST
QueryTreeUnchecked
* Sun 11 May 2014 12:15:20 PM JST
QueryTree
* Sun 11 May 2014 12:15:20 PM JST
QueryTextExtentsUnchecked
* Sun 11 May 2014 12:15:20 PM JST
QueryTextExtents
* Sun 11 May 2014 12:15:20 PM JST
QueryPointerUnchecked
* Sun 11 May 2014 12:15:20 PM JST
QueryPointer
* Sun 11 May 2014 12:15:21 PM JST
QueryFontUnchecked
* Sun 11 May 2014 12:15:21 PM JST
QueryFont
* Sun 11 May 2014 12:15:21 PM JST
QueryExtensionUnchecked
* Sun 11 May 2014 12:15:21 PM JST
QueryExtension
* Sun 11 May 2014 12:15:21 PM JST
QueryColorsUnchecked
* Sun 11 May 2014 12:15:21 PM JST
QueryColors
* Sun 11 May 2014 12:15:21 PM JST
QueryBestSizeUnchecked
* Sun 11 May 2014 12:15:21 PM JST
QueryBestSize
* Sun 11 May 2014 12:15:21 PM JST
PutImageChecked
* Sun 11 May 2014 12:15:21 PM JST
PutImage
* Sun 11 May 2014 12:15:21 PM JST
PolyText8Checked
* Sun 11 May 2014 12:15:22 PM JST
PolyText8
* Sun 11 May 2014 12:15:22 PM JST
PolyText16Checked
* Sun 11 May 2014 12:15:22 PM JST
PolyText16
* Sun 11 May 2014 12:15:22 PM JST
PolySegmentChecked
* Sun 11 May 2014 12:15:22 PM JST
PolySegment
* Sun 11 May 2014 12:15:22 PM JST
PolyRectangleChecked
* Sun 11 May 2014 12:15:22 PM JST
PolyRectangle
* Sun 11 May 2014 12:15:22 PM JST
PolyPointChecked
* Sun 11 May 2014 12:15:22 PM JST
PolyPoint
* Sun 11 May 2014 12:15:22 PM JST
PolyLineChecked
* Sun 11 May 2014 12:15:22 PM JST
PolyLine
* Sun 11 May 2014 12:15:22 PM JST
PolyFillRectangleChecked
* Sun 11 May 2014 12:15:22 PM JST
PolyFillRectangle
* Sun 11 May 2014 12:15:22 PM JST
PolyArcChecked
* Sun 11 May 2014 12:15:23 PM JST
PolyArc
* Sun 11 May 2014 12:15:23 PM JST
OpenFontChecked
* Sun 11 May 2014 12:15:23 PM JST
OpenFont
* Sun 11 May 2014 12:15:23 PM JST
NoOperationChecked
* Sun 11 May 2014 12:15:23 PM JST
NoOperation
* Sun 11 May 2014 12:15:23 PM JST
MapWindowChecked
* Sun 11 May 2014 12:15:23 PM JST
MapWindow
* Sun 11 May 2014 12:15:23 PM JST
MapSubwindowsChecked
* Sun 11 May 2014 12:15:23 PM JST
MapSubwindows
* Sun 11 May 2014 12:15:23 PM JST
LookupColorUnchecked
* Sun 11 May 2014 12:15:23 PM JST
LookupColor
* Sun 11 May 2014 12:15:23 PM JST
ListPropertiesUnchecked
* Sun 11 May 2014 12:15:24 PM JST
ListProperties
* Sun 11 May 2014 12:15:24 PM JST
ListInstalledColormapsUnchecked
* Sun 11 May 2014 12:15:24 PM JST
ListInstalledColormaps
* Sun 11 May 2014 12:15:24 PM JST
ListFontsWithInfoUnchecked
* Sun 11 May 2014 12:15:24 PM JST
ListFontsWithInfo
* Sun 11 May 2014 12:15:24 PM JST
ListFontsUnchecked
* Sun 11 May 2014 12:15:24 PM JST
ListFonts
* Sun 11 May 2014 12:15:24 PM JST
ListExtensionsUnchecked
* Sun 11 May 2014 12:15:24 PM JST
ListExtensions
* Sun 11 May 2014 12:15:24 PM JST
KillClientChecked
* Sun 11 May 2014 12:15:24 PM JST
KillClient
* Sun 11 May 2014 12:15:24 PM JST
InstallColormapChecked
* Sun 11 May 2014 12:15:25 PM JST
InstallColormap
* Sun 11 May 2014 12:15:25 PM JST
ImageText8Checked
* Sun 11 May 2014 12:15:25 PM JST
ImageText8
* Sun 11 May 2014 12:15:25 PM JST
ImageText16Checked
* Sun 11 May 2014 12:15:25 PM JST
ImageText16
* Sun 11 May 2014 12:15:25 PM JST
GrabServerChecked
* Sun 11 May 2014 12:15:25 PM JST
GrabServer
* Sun 11 May 2014 12:15:25 PM JST
GrabPointerUnchecked
* Sun 11 May 2014 12:15:25 PM JST
GrabPointer
* Sun 11 May 2014 12:15:25 PM JST
GrabKeyboardUnchecked
* Sun 11 May 2014 12:15:25 PM JST
GrabKeyboard
* Sun 11 May 2014 12:15:25 PM JST
GrabKeyChecked
* Sun 11 May 2014 12:15:25 PM JST
GrabKey
* Sun 11 May 2014 12:15:25 PM JST
GrabButtonChecked
* Sun 11 May 2014 12:15:26 PM JST
GrabButton
* Sun 11 May 2014 12:15:26 PM JST
GetWindowAttributesUnchecked
* Sun 11 May 2014 12:15:26 PM JST
GetWindowAttributes
* Sun 11 May 2014 12:15:26 PM JST
GetSelectionOwnerUnchecked
* Sun 11 May 2014 12:15:26 PM JST
GetSelectionOwner
* Sun 11 May 2014 12:15:26 PM JST
GetPropertyUnchecked
* Sun 11 May 2014 12:15:26 PM JST
GetProperty
* Sun 11 May 2014 12:15:26 PM JST
GetPointerMappingUnchecked
* Sun 11 May 2014 12:15:26 PM JST
GetPointerMapping
* Sun 11 May 2014 12:15:26 PM JST
GetPointerControlUnchecked
* Sun 11 May 2014 12:15:26 PM JST
GetPointerControl
* Sun 11 May 2014 12:15:26 PM JST
GetMotionEventsUnchecked
* Sun 11 May 2014 12:15:27 PM JST
GetMotionEvents
* Sun 11 May 2014 12:15:27 PM JST
GetModifierMappingUnchecked
* Sun 11 May 2014 12:15:27 PM JST
GetModifierMapping
* Sun 11 May 2014 12:15:27 PM JST
GetKeyboardMappingUnchecked
* Sun 11 May 2014 12:15:27 PM JST
GetKeyboardMapping
* Sun 11 May 2014 12:15:27 PM JST
GetKeyboardControlUnchecked
* Sun 11 May 2014 12:15:27 PM JST
GetKeyboardControl
* Sun 11 May 2014 12:15:27 PM JST
GetInputFocusUnchecked
* Sun 11 May 2014 12:15:27 PM JST
GetInputFocus
* Sun 11 May 2014 12:15:27 PM JST
GetImageUnchecked
* Sun 11 May 2014 12:15:27 PM JST
GetImage
* Sun 11 May 2014 12:15:27 PM JST
GetGeometryUnchecked
* Sun 11 May 2014 12:15:28 PM JST
GetGeometry
* Sun 11 May 2014 12:15:28 PM JST
GetFontPathUnchecked
* Sun 11 May 2014 12:15:28 PM JST
GetFontPath
* Sun 11 May 2014 12:15:28 PM JST
FreePixmapChecked
* Sun 11 May 2014 12:15:28 PM JST
FreePixmap
* Sun 11 May 2014 12:15:28 PM JST
FreeGCChecked
* Sun 11 May 2014 12:15:28 PM JST
FreeGC
* Sun 11 May 2014 12:15:28 PM JST
FreeCursorChecked
* Sun 11 May 2014 12:15:28 PM JST
FreeCursor
* Sun 11 May 2014 12:15:28 PM JST
FreeColorsChecked
* Sun 11 May 2014 12:15:28 PM JST
FreeColors
* Sun 11 May 2014 12:15:28 PM JST
FreeColormapChecked
* Sun 11 May 2014 12:15:28 PM JST
FreeColormap
* Sun 11 May 2014 12:15:28 PM JST
ForceScreenSaverChecked
* Sun 11 May 2014 12:15:29 PM JST
ForceScreenSaver
* Sun 11 May 2014 12:15:29 PM JST
FillPolyChecked
* Sun 11 May 2014 12:15:29 PM JST
FillPoly
* Sun 11 May 2014 12:15:29 PM JST
DestroyWindowChecked
* Sun 11 May 2014 12:15:29 PM JST
DestroyWindow
* Sun 11 May 2014 12:15:29 PM JST
DestroySubwindowsChecked
* Sun 11 May 2014 12:15:29 PM JST
DestroySubwindows
* Sun 11 May 2014 12:15:29 PM JST
DeletePropertyChecked
* Sun 11 May 2014 12:15:29 PM JST
DeleteProperty
* Sun 11 May 2014 12:15:29 PM JST
CreateWindowChecked
* Sun 11 May 2014 12:15:29 PM JST
CreateWindow
* Sun 11 May 2014 12:15:29 PM JST
CreatePixmapChecked
* Sun 11 May 2014 12:15:30 PM JST
CreatePixmap
* Sun 11 May 2014 12:15:30 PM JST
CreateGlyphCursorChecked
* Sun 11 May 2014 12:15:30 PM JST
CreateGlyphCursor
* Sun 11 May 2014 12:15:30 PM JST
CreateGCChecked
* Sun 11 May 2014 12:15:30 PM JST
CreateGC
* Sun 11 May 2014 12:15:30 PM JST
CreateCursorChecked
* Sun 11 May 2014 12:15:30 PM JST
CreateCursor
* Sun 11 May 2014 12:15:30 PM JST
CreateColormapChecked
* Sun 11 May 2014 12:15:30 PM JST
CreateColormap
* Sun 11 May 2014 12:15:30 PM JST
CopyPlaneChecked
* Sun 11 May 2014 12:15:30 PM JST
CopyPlane
* Sun 11 May 2014 12:15:30 PM JST
CopyGCChecked
* Sun 11 May 2014 12:15:31 PM JST
CopyGC
* Sun 11 May 2014 12:15:31 PM JST
CopyColormapAndFreeChecked
* Sun 11 May 2014 12:15:31 PM JST
CopyColormapAndFree
* Sun 11 May 2014 12:15:31 PM JST
CopyAreaChecked
* Sun 11 May 2014 12:15:31 PM JST
CopyArea
* Sun 11 May 2014 12:15:31 PM JST
ConvertSelectionChecked
* Sun 11 May 2014 12:15:31 PM JST
ConvertSelection
* Sun 11 May 2014 12:15:31 PM JST
ConfigureWindowChecked
* Sun 11 May 2014 12:15:31 PM JST
ConfigureWindow
* Sun 11 May 2014 12:15:31 PM JST
CloseFontChecked
* Sun 11 May 2014 12:15:31 PM JST
CloseFont
* Sun 11 May 2014 12:15:31 PM JST
ClearAreaChecked
* Sun 11 May 2014 12:15:31 PM JST
ClearArea
* Sun 11 May 2014 12:15:31 PM JST
CirculateWindowChecked
* Sun 11 May 2014 12:15:32 PM JST
CirculateWindow
* Sun 11 May 2014 12:15:32 PM JST
ChangeWindowAttributesChecked
* Sun 11 May 2014 12:15:32 PM JST
ChangeWindowAttributes
* Sun 11 May 2014 12:15:32 PM JST
ChangeSaveSetChecked
* Sun 11 May 2014 12:15:32 PM JST
ChangeSaveSet
* Sun 11 May 2014 12:15:32 PM JST
ChangePropertyChecked
* Sun 11 May 2014 12:15:32 PM JST
ChangeProperty
* Sun 11 May 2014 12:15:32 PM JST
ChangePointerControlChecked
* Sun 11 May 2014 12:15:32 PM JST
ChangePointerControl
* Sun 11 May 2014 12:15:32 PM JST
ChangeKeyboardMappingChecked
* Sun 11 May 2014 12:15:32 PM JST
ChangeKeyboardMapping
* Sun 11 May 2014 12:15:32 PM JST
ChangeKeyboardControlChecked
* Sun 11 May 2014 12:15:33 PM JST
ChangeKeyboardControl
* Sun 11 May 2014 12:15:33 PM JST
ChangeGCChecked
* Sun 11 May 2014 12:15:33 PM JST
ChangeGC
* Sun 11 May 2014 12:15:33 PM JST
ChangeActivePointerGrabChecked
* Sun 11 May 2014 12:15:33 PM JST
ChangeActivePointerGrab
* Sun 11 May 2014 12:15:33 PM JST
BellChecked
* Sun 11 May 2014 12:15:33 PM JST
Bell
* Sun 11 May 2014 12:15:33 PM JST
AllowEventsChecked
* Sun 11 May 2014 12:15:33 PM JST
AllowEvents
* Sun 11 May 2014 12:15:33 PM JST
AllocNamedColorUnchecked
* Sun 11 May 2014 12:15:33 PM JST
AllocNamedColor
* Sun 11 May 2014 12:15:33 PM JST
AllocColorPlanesUnchecked
* Sun 11 May 2014 12:15:34 PM JST
AllocColorPlanes
* Sun 11 May 2014 12:15:34 PM JST
AllocColorCellsUnchecked
* Sun 11 May 2014 12:15:34 PM JST
AllocColorCells
* Sun 11 May 2014 12:15:34 PM JST
AllocColor
* Sun 11 May 2014 12:15:35 PM JST
ext.WarpPointerChecked
* Sun 11 May 2014 12:15:36 PM JST
ext.WarpPointer
* Sun 11 May 2014 12:15:36 PM JST
ext.UnmapWindowChecked
* Sun 11 May 2014 12:15:36 PM JST
ext.UnmapWindow
* Sun 11 May 2014 12:15:36 PM JST
ext.UnmapSubwindowsChecked
* Sun 11 May 2014 12:15:36 PM JST
ext.UnmapSubwindows
* Sun 11 May 2014 12:15:36 PM JST
ext.UninstallColormapChecked
* Sun 11 May 2014 12:15:36 PM JST
ext.UninstallColormap
* Sun 11 May 2014 12:15:36 PM JST
ext.UngrabServerChecked
* Sun 11 May 2014 12:15:36 PM JST
ext.UngrabServer
* Sun 11 May 2014 12:15:36 PM JST
ext.UngrabPointerChecked
* Sun 11 May 2014 12:15:36 PM JST
ext.UngrabPointer
* Sun 11 May 2014 12:15:36 PM JST
ext.UngrabKeyboardChecked
* Sun 11 May 2014 12:15:37 PM JST
ext.UngrabKeyboard
* Sun 11 May 2014 12:15:37 PM JST
ext.UngrabKeyChecked
* Sun 11 May 2014 12:15:37 PM JST
ext.UngrabKey
* Sun 11 May 2014 12:15:37 PM JST
ext.UngrabButtonChecked
* Sun 11 May 2014 12:15:37 PM JST
ext.UngrabButton
* Sun 11 May 2014 12:15:37 PM JST
ext.TranslateCoordinatesUnchecked
* Sun 11 May 2014 12:15:37 PM JST
ext.TranslateCoordinates
* Sun 11 May 2014 12:15:37 PM JST
ext.StoreNamedColorChecked
* Sun 11 May 2014 12:15:37 PM JST
ext.StoreNamedColor
* Sun 11 May 2014 12:15:37 PM JST
ext.StoreColorsChecked
* Sun 11 May 2014 12:15:37 PM JST
ext.StoreColors
* Sun 11 May 2014 12:15:37 PM JST
ext.SetSelectionOwnerChecked
* Sun 11 May 2014 12:15:37 PM JST
ext.SetSelectionOwner
* Sun 11 May 2014 12:15:37 PM JST
ext.SetPointerMappingUnchecked
* Sun 11 May 2014 12:15:38 PM JST
ext.SetPointerMapping
* Sun 11 May 2014 12:15:38 PM JST
ext.SetModifierMappingUnchecked
* Sun 11 May 2014 12:15:38 PM JST
ext.SetModifierMapping
* Sun 11 May 2014 12:15:38 PM JST
ext.SetInputFocusChecked
* Sun 11 May 2014 12:15:38 PM JST
ext.SetInputFocus
* Sun 11 May 2014 12:15:38 PM JST
ext.SetFontPathChecked
* Sun 11 May 2014 12:15:38 PM JST
ext.SetFontPath
* Sun 11 May 2014 12:15:38 PM JST
ext.SetDashesChecked
* Sun 11 May 2014 12:15:38 PM JST
ext.SetDashes
* Sun 11 May 2014 12:15:38 PM JST
ext.SetCloseDownModeChecked
* Sun 11 May 2014 12:15:38 PM JST
ext.SetCloseDownMode
* Sun 11 May 2014 12:15:38 PM JST
ext.SetClipRectanglesChecked
* Sun 11 May 2014 12:15:39 PM JST
ext.SetClipRectangles
* Sun 11 May 2014 12:15:39 PM JST
ext.SetAccessControlChecked
* Sun 11 May 2014 12:15:39 PM JST
ext.SetAccessControl
* Sun 11 May 2014 12:15:39 PM JST
ext.SendEventChecked
* Sun 11 May 2014 12:15:39 PM JST
ext.SendEvent
* Sun 11 May 2014 12:15:39 PM JST
ext.RotatePropertiesChecked
* Sun 11 May 2014 12:15:39 PM JST
ext.RotateProperties
* Sun 11 May 2014 12:15:39 PM JST
ext.ReparentWindowChecked
* Sun 11 May 2014 12:15:39 PM JST
ext.ReparentWindow
* Sun 11 May 2014 12:15:39 PM JST
ext.RecolorCursorChecked
* Sun 11 May 2014 12:15:39 PM JST
ext.RecolorCursor
* Sun 11 May 2014 12:15:39 PM JST
ext.QueryTreeUnchecked
* Sun 11 May 2014 12:15:40 PM JST
ext.QueryTree
* Sun 11 May 2014 12:15:40 PM JST
ext.QueryTextExtentsUnchecked
* Sun 11 May 2014 12:15:40 PM JST
ext.QueryTextExtents
* Sun 11 May 2014 12:15:40 PM JST
ext.QueryPointerUnchecked
* Sun 11 May 2014 12:15:40 PM JST
ext.QueryPointer
* Sun 11 May 2014 12:15:40 PM JST
ext.QueryFontUnchecked
* Sun 11 May 2014 12:15:40 PM JST
ext.QueryFont
* Sun 11 May 2014 12:15:40 PM JST
ext.QueryExtensionUnchecked
* Sun 11 May 2014 12:15:40 PM JST
ext.QueryExtension
* Sun 11 May 2014 12:15:40 PM JST
ext.QueryColorsUnchecked
* Sun 11 May 2014 12:15:40 PM JST
ext.QueryColors
* Sun 11 May 2014 12:15:40 PM JST
ext.QueryBestSizeUnchecked
* Sun 11 May 2014 12:15:40 PM JST
ext.QueryBestSize
* Sun 11 May 2014 12:15:40 PM JST
ext.PutImageChecked
* Sun 11 May 2014 12:15:41 PM JST
ext.PutImage
* Sun 11 May 2014 12:15:41 PM JST
ext.PolyText8Checked
* Sun 11 May 2014 12:15:41 PM JST
ext.PolyText8
* Sun 11 May 2014 12:15:41 PM JST
ext.PolyText16Checked
* Sun 11 May 2014 12:15:41 PM JST
ext.PolyText16
* Sun 11 May 2014 12:15:41 PM JST
ext.PolySegmentChecked
* Sun 11 May 2014 12:15:41 PM JST
ext.PolySegment
* Sun 11 May 2014 12:15:41 PM JST
ext.PolyRectangleChecked
* Sun 11 May 2014 12:15:41 PM JST
ext.PolyRectangle
* Sun 11 May 2014 12:15:41 PM JST
ext.PolyPointChecked
* Sun 11 May 2014 12:15:41 PM JST
ext.PolyPoint
* Sun 11 May 2014 12:15:41 PM JST
ext.PolyLineChecked
* Sun 11 May 2014 12:15:42 PM JST
ext.PolyLine
* Sun 11 May 2014 12:15:42 PM JST
ext.PolyFillRectangleChecked
* Sun 11 May 2014 12:15:42 PM JST
ext.PolyFillRectangle
* Sun 11 May 2014 12:15:42 PM JST
ext.PolyArcChecked
* Sun 11 May 2014 12:15:42 PM JST
ext.PolyArc
* Sun 11 May 2014 12:15:42 PM JST
ext.OpenFontChecked
* Sun 11 May 2014 12:15:42 PM JST
ext.OpenFont
* Sun 11 May 2014 12:15:42 PM JST
ext.NoOperationChecked
* Sun 11 May 2014 12:15:42 PM JST
ext.NoOperation
* Sun 11 May 2014 12:15:42 PM JST
ext.MapWindowChecked
* Sun 11 May 2014 12:15:42 PM JST
ext.MapWindow
* Sun 11 May 2014 12:15:42 PM JST
ext.MapSubwindowsChecked
* Sun 11 May 2014 12:15:43 PM JST
ext.MapSubwindows
* Sun 11 May 2014 12:15:43 PM JST
ext.LookupColorUnchecked
* Sun 11 May 2014 12:15:43 PM JST
ext.LookupColor
* Sun 11 May 2014 12:15:43 PM JST
ext.ListPropertiesUnchecked
* Sun 11 May 2014 12:15:43 PM JST
ext.ListProperties
* Sun 11 May 2014 12:15:43 PM JST
ext.ListInstalledColormapsUnchecked
* Sun 11 May 2014 12:15:43 PM JST
ext.ListInstalledColormaps
* Sun 11 May 2014 12:15:43 PM JST
ext.ListFontsWithInfoUnchecked
* Sun 11 May 2014 12:15:43 PM JST
ext.ListFontsWithInfo
* Sun 11 May 2014 12:15:43 PM JST
ext.ListFontsUnchecked
* Sun 11 May 2014 12:15:43 PM JST
ext.ListFonts
* Sun 11 May 2014 12:15:43 PM JST
ext.ListExtensionsUnchecked
* Sun 11 May 2014 12:15:43 PM JST
ext.ListExtensions
* Sun 11 May 2014 12:15:43 PM JST
ext.KillClientChecked
* Sun 11 May 2014 12:15:44 PM JST
ext.KillClient
* Sun 11 May 2014 12:15:44 PM JST
ext.InstallColormapChecked
* Sun 11 May 2014 12:15:44 PM JST
ext.InstallColormap
* Sun 11 May 2014 12:15:44 PM JST
ext.ImageText8Checked
* Sun 11 May 2014 12:15:44 PM JST
ext.ImageText8
* Sun 11 May 2014 12:15:44 PM JST
ext.ImageText16Checked
* Sun 11 May 2014 12:15:44 PM JST
ext.ImageText16
* Sun 11 May 2014 12:15:44 PM JST
ext.GrabServerChecked
* Sun 11 May 2014 12:15:44 PM JST
ext.GrabServer
* Sun 11 May 2014 12:15:44 PM JST
ext.GrabPointerUnchecked
* Sun 11 May 2014 12:15:45 PM JST
ext.GrabPointer
* Sun 11 May 2014 12:15:45 PM JST
ext.GrabKeyboardUnchecked
* Sun 11 May 2014 12:15:45 PM JST
ext.GrabKeyboard
* Sun 11 May 2014 12:15:45 PM JST
ext.GrabKeyChecked
* Sun 11 May 2014 12:15:45 PM JST
ext.GrabKey
* Sun 11 May 2014 12:15:45 PM JST
ext.GrabButtonChecked
* Sun 11 May 2014 12:15:45 PM JST
ext.GrabButton
* Sun 11 May 2014 12:15:45 PM JST
ext.GetWindowAttributesUnchecked
* Sun 11 May 2014 12:15:45 PM JST
ext.GetWindowAttributes
* Sun 11 May 2014 12:15:45 PM JST
ext.GetSelectionOwnerUnchecked
* Sun 11 May 2014 12:15:45 PM JST
ext.GetSelectionOwner
* Sun 11 May 2014 12:15:45 PM JST
ext.GetPropertyUnchecked
* Sun 11 May 2014 12:15:46 PM JST
ext.GetProperty
* Sun 11 May 2014 12:15:46 PM JST
ext.GetPointerMappingUnchecked
* Sun 11 May 2014 12:15:46 PM JST
ext.GetPointerMapping
* Sun 11 May 2014 12:15:46 PM JST
ext.GetPointerControlUnchecked
* Sun 11 May 2014 12:15:46 PM JST
ext.GetPointerControl
* Sun 11 May 2014 12:15:46 PM JST
ext.GetMotionEventsUnchecked
* Sun 11 May 2014 12:15:46 PM JST
ext.GetMotionEvents
* Sun 11 May 2014 12:15:46 PM JST
ext.GetModifierMappingUnchecked
* Sun 11 May 2014 12:15:46 PM JST
ext.GetModifierMapping
* Sun 11 May 2014 12:15:46 PM JST
ext.GetKeyboardMappingUnchecked
* Sun 11 May 2014 12:15:46 PM JST
ext.GetKeyboardMapping
* Sun 11 May 2014 12:15:46 PM JST
ext.GetKeyboardControlUnchecked
* Sun 11 May 2014 12:15:46 PM JST
ext.GetKeyboardControl
* Sun 11 May 2014 12:15:46 PM JST
ext.GetInputFocusUnchecked
* Sun 11 May 2014 12:15:47 PM JST
ext.GetInputFocus
* Sun 11 May 2014 12:15:47 PM JST
ext.GetImageUnchecked
* Sun 11 May 2014 12:15:47 PM JST
ext.GetImage
* Sun 11 May 2014 12:15:47 PM JST
ext.GetGeometryUnchecked
* Sun 11 May 2014 12:15:47 PM JST
ext.GetGeometry
* Sun 11 May 2014 12:15:47 PM JST
ext.GetFontPathUnchecked
* Sun 11 May 2014 12:15:47 PM JST
ext.GetFontPath
* Sun 11 May 2014 12:15:47 PM JST
ext.FreePixmapChecked
* Sun 11 May 2014 12:15:47 PM JST
ext.FreePixmap
* Sun 11 May 2014 12:15:47 PM JST
ext.FreeGCChecked
* Sun 11 May 2014 12:15:47 PM JST
ext.FreeGC
* Sun 11 May 2014 12:15:47 PM JST
ext.FreeCursorChecked
* Sun 11 May 2014 12:15:48 PM JST
ext.FreeCursor
* Sun 11 May 2014 12:15:48 PM JST
ext.FreeColorsChecked
* Sun 11 May 2014 12:15:48 PM JST
ext.FreeColors
* Sun 11 May 2014 12:15:48 PM JST
ext.FreeColormapChecked
* Sun 11 May 2014 12:15:48 PM JST
ext.FreeColormap
* Sun 11 May 2014 12:15:48 PM JST
ext.ForceScreenSaverChecked
* Sun 11 May 2014 12:15:48 PM JST
ext.ForceScreenSaver
* Sun 11 May 2014 12:15:48 PM JST
ext.FillPolyChecked
* Sun 11 May 2014 12:15:48 PM JST
ext.FillPoly
* Sun 11 May 2014 12:15:48 PM JST
ext.DestroyWindowChecked
* Sun 11 May 2014 12:15:48 PM JST
ext.DestroyWindow
* Sun 11 May 2014 12:15:48 PM JST
ext.DestroySubwindowsChecked
* Sun 11 May 2014 12:15:48 PM JST
ext.DestroySubwindows
* Sun 11 May 2014 12:15:49 PM JST
ext.DeletePropertyChecked
* Sun 11 May 2014 12:15:49 PM JST
ext.DeleteProperty
* Sun 11 May 2014 12:15:49 PM JST
ext.CreateWindowChecked
* Sun 11 May 2014 12:15:49 PM JST
ext.CreateWindow
* Sun 11 May 2014 12:15:49 PM JST
ext.CreatePixmapChecked
* Sun 11 May 2014 12:15:49 PM JST
ext.CreatePixmap
* Sun 11 May 2014 12:15:49 PM JST
ext.CreateGlyphCursorChecked
* Sun 11 May 2014 12:15:49 PM JST
ext.CreateGlyphCursor
* Sun 11 May 2014 12:15:49 PM JST
ext.CreateGCChecked
* Sun 11 May 2014 12:15:49 PM JST
ext.CreateGC
* Sun 11 May 2014 12:15:49 PM JST
ext.CreateCursorChecked
* Sun 11 May 2014 12:15:49 PM JST
ext.CreateCursor
* Sun 11 May 2014 12:15:49 PM JST
ext.CreateColormapChecked
* Sun 11 May 2014 12:15:49 PM JST
ext.CreateColormap
* Sun 11 May 2014 12:15:50 PM JST
ext.CopyPlaneChecked
* Sun 11 May 2014 12:15:50 PM JST
ext.CopyPlane
* Sun 11 May 2014 12:15:50 PM JST
ext.CopyGCChecked
* Sun 11 May 2014 12:15:50 PM JST
ext.CopyGC
* Sun 11 May 2014 12:15:50 PM JST
ext.CopyColormapAndFreeChecked
* Sun 11 May 2014 12:15:50 PM JST
ext.CopyColormapAndFree
* Sun 11 May 2014 12:15:50 PM JST
ext.CopyAreaChecked
* Sun 11 May 2014 12:15:50 PM JST
ext.CopyArea
* Sun 11 May 2014 12:15:50 PM JST
ext.ConvertSelectionChecked
* Sun 11 May 2014 12:15:50 PM JST
ext.ConvertSelection
* Sun 11 May 2014 12:15:50 PM JST
ext.ConfigureWindowChecked
* Sun 11 May 2014 12:15:50 PM JST
ext.ConfigureWindow
* Sun 11 May 2014 12:15:51 PM JST
ext.CloseFontChecked
* Sun 11 May 2014 12:15:51 PM JST
ext.CloseFont
* Sun 11 May 2014 12:15:51 PM JST
ext.ClearAreaChecked
* Sun 11 May 2014 12:15:51 PM JST
ext.ClearArea
* Sun 11 May 2014 12:15:51 PM JST
ext.CirculateWindowChecked
* Sun 11 May 2014 12:15:51 PM JST
ext.CirculateWindow
* Sun 11 May 2014 12:15:51 PM JST
ext.ChangeWindowAttributesChecked
* Sun 11 May 2014 12:15:51 PM JST
ext.ChangeWindowAttributes
* Sun 11 May 2014 12:15:51 PM JST
ext.ChangeSaveSetChecked
* Sun 11 May 2014 12:15:51 PM JST
ext.ChangeSaveSet
* Sun 11 May 2014 12:15:51 PM JST
ext.ChangePropertyChecked
* Sun 11 May 2014 12:15:52 PM JST
ext.ChangeProperty
* Sun 11 May 2014 12:15:52 PM JST
ext.ChangePointerControlChecked
* Sun 11 May 2014 12:15:52 PM JST
ext.ChangePointerControl
* Sun 11 May 2014 12:15:52 PM JST
ext.ChangeKeyboardMappingChecked
* Sun 11 May 2014 12:15:52 PM JST
ext.ChangeKeyboardMapping
* Sun 11 May 2014 12:15:52 PM JST
ext.ChangeKeyboardControlChecked
* Sun 11 May 2014 12:15:52 PM JST
ext.ChangeKeyboardControl
* Sun 11 May 2014 12:15:52 PM JST
ext.ChangeGCChecked
* Sun 11 May 2014 12:15:52 PM JST
ext.ChangeGC
* Sun 11 May 2014 12:15:52 PM JST
ext.ChangeActivePointerGrabChecked
* Sun 11 May 2014 12:15:52 PM JST
ext.ChangeActivePointerGrab
* Sun 11 May 2014 12:15:52 PM JST
ext.BellChecked
* Sun 11 May 2014 12:15:52 PM JST
ext.Bell
* Sun 11 May 2014 12:15:52 PM JST
ext.AllowEventsChecked
* Sun 11 May 2014 12:15:52 PM JST
ext.AllowEvents
* Sun 11 May 2014 12:15:53 PM JST
ext.AllocNamedColorUnchecked
* Sun 11 May 2014 12:15:53 PM JST
ext.AllocNamedColor
* Sun 11 May 2014 12:15:53 PM JST
ext.AllocColorPlanesUnchecked
* Sun 11 May 2014 12:15:53 PM JST
ext.AllocColorPlanes
* Sun 11 May 2014 12:15:53 PM JST
ext.AllocColorCellsUnchecked
* Sun 11 May 2014 12:15:53 PM JST
ext.AllocColorCells
* Sun 11 May 2014 12:15:53 PM JST
ext.AllocColor
* Sun 11 May 2014 12:18:19 PM JST

* Sun 11 May 2014 12:18:19 PM JST

* Sun 11 May 2014 12:18:19 PM JST
        self.

* Sun 11 May 2014 12:18:20 PM JST
        self.

* Sun 11 May 2014 12:18:20 PM JST
        self.
        self.

* Sun 11 May 2014 12:19:57 PM JST
DummyMethod
* Sun 11 May 2014 12:20:48 PM JST
InternAtom
* Sun 11 May 2014 12:28:21 PM JST
        for name, cls in self._methods.iteritems():
            self._setattr(name, cls)

* Sun 11 May 2014 12:29:18 PM JST
DummyMethod
* Sun 11 May 2014 12:29:27 PM JST
_
* Sun 11 May 2014 12:29:28 PM JST
self._
* Sun 11 May 2014 12:29:49 PM JST
        self._setattr('InternAtom', ext.InternAtom)
        self._setattr('InternAtomUnchecked', ext.InternAtomUnchecked)
        self._setattr('GetAtomName', ext.GetAtomName)
        self._setattr('GetAtomNameUnchecked', ext.GetAtomNameUnchecked)

* Sun 11 May 2014 12:30:03 PM JST
_
* Sun 11 May 2014 12:30:03 PM JST
_
* Sun 11 May 2014 12:30:03 PM JST
_
* Sun 11 May 2014 12:30:03 PM JST
_
* Sun 11 May 2014 12:30:04 PM JST
self._
* Sun 11 May 2014 12:30:04 PM JST
self._
* Sun 11 May 2014 12:30:04 PM JST
self._
* Sun 11 May 2014 12:30:04 PM JST
self._
* Sun 11 May 2014 12:30:25 PM JST
lambda *args, **kwargs: None
* Sun 11 May 2014 12:31:52 PM JST
lambda *args, **kwargs: None
* Sun 11 May 2014 12:33:06 PM JST
c.render=c(xcb2.render.key)
* Sun 11 May 2014 12:53:23 PM JST
test 
* Sun 11 May 2014 12:54:43 PM JST
54525974
* Sun 11 May 2014 12:57:17 PM JST
TestClass
* Sun 11 May 2014 12:57:33 PM JST

* Sun 11 May 2014 12:57:33 PM JST

* Sun 11 May 2014 12:57:34 PM JST
WMCLASS = 'test\x00Test\x00'

* Sun 11 May 2014 12:59:53 PM JST
window)
* Sun 11 May 2014 01:02:39 PM JST
'_NET_WM_DESKTOP'
* Sun 11 May 2014 01:16:56 PM JST
Tes
* Sun 11 May 2014 01:17:01 PM JST
self.
* Sun 11 May 2014 01:17:58 PM JST
tes
* Sun 11 May 2014 01:17:58 PM JST
core.tes
* Sun 11 May 2014 01:18:03 PM JST
rawconnect
* Sun 11 May 2014 01:21:33 PM JST

* Sun 11 May 2014 01:21:33 PM JST

* Sun 11 May 2014 01:21:33 PM JST
    tes = Tes()

* Sun 11 May 2014 01:29:29 PM JST
/root/work/xlibcpp/pyx/xcb/ooxcb-1.2/
* Sun 11 May 2014 01:34:41 PM JST
read()
* Sun 11 May 2014 01:52:26 PM JST
_add_core
* Sun 11 May 2014 01:58:06 PM JST
_add_ext
* Sun 11 May 2014 02:00:27 PM JST
atoms
* Sun 11 May 2014 02:19:00 PM JST
        
* Sun 11 May 2014 02:20:10 PM JST
import 
* Sun 11 May 2014 02:20:41 PM JST
ATOMTYPES
* Sun 11 May 2014 02:21:13 PM JST
['_NET_WM_STATE',
 '_NET_WM_WINDOW_TYPE_NOTIFICATION',
 '_NET_WM_USER_TIME_WINDOW',
 '_NET_VIRTUAL_ROOTS',
 '_NET_WM_ACTION_SHADE',
 '_NET_WM_STATE_SHADED',
 '_NET_WM_HANDLED_ICONS',
 '_NET_DESKTOP_VIEWPORT',
 '_NET_WM_STATE_MODAL',
 '_NET_WM_STATE_MAXIMIZED_HORZ',
 '_NET_WM_ACTION_MOVE',
 '_NET_CLOSE_WINDOW',
 '_NET_WM_DESKTOP',
 '_NET_WM_VISIBLE_NAME',
 '_NET_REQUEST_FRAME_EXTENTS',
 '_NET_WM_ACTION_STICK',
 'WM_TRANSIENT_FOR',
 '_NET_WM_ICON_NAME',
 '_NET_CLIENT_LIST',
 'WM_STATE',
 '_NET_WM_STATE_FULLSCREEN',
 '_NET_ACTIVE_WINDOW',
 '_NET_WM_STATE_HIDDEN',
 '_NET_DESKTOP_GEOMETRY',
 '_NET_WM_ALLOWED_ACTIONS',
 '_OB_APP_TYPE',
 '_NET_WM_STATE_MAXIMIZED_VERT',
 '_NET_FRAME_EXTENTS',
 '_NET_WM_ACTION_MINIMIZE',
 'WM_CLIENT_MACHINE',
 '_NET_WORKAREA',
 '_NET_WM_STRUT',
 'WM_PROTOCOLS',
 '_NET_WM_ACTION_CLOSE',
 '_NET_WM_ACTION_CHANGE_DESKTOP',
 '_NET_WM_ACTION_RESIZE',
 '_NET_WM_STATE_ABOVE',
 '_NET_WM_WINDOW_TYPE_MENU',
 '_NET_WM_ACTION_MAXIMIZE_HORZ',
 '_NET_MOVERESIZE_WINDOW',
 '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU',
 '_NET_WM_WINDOW_TYPE_UTILITY',
 'WM_COLORMAP_WINDOWS',
 '_NET_WM_STATE_STICKY',
 'WM_LOCALE_NAME',
 '_WIN_WORKSPACE',
 '_NET_WM_WINDOW_TYPE_TOOLBAR',
 '_NET_WM_WINDOW_TYPE_DESKTOP',
 '_NET_WM_WINDOW_TYPE_TOOLTIP',
 '_NET_WM_STRUT_PARTIAL',
 '_NET_SHOWING_DESKTOP',
 '_NET_WM_WINDOW_TYPE_POPUP_MENU',
 '_WIN_STATE',
 '_NET_WM_ACTION_ABOVE',
 '_NET_RESTACK_WINDOW',
 '_NET_WM_ICON_GEOMETRY',
 '_NET_SUPPORTING_WM_CHECK',
 '_NET_WM_STATE_BELOW',
 '_NET_WM_WINDOW_TYPE_DND',
 '_NET_WM_MORERESIZE',
 '_NET_NUMBER_OF_DESKTOPS',
 '_NET_WM_WINDOW_TYPE',
 '_NET_WM_WINDOW_TYPE_DIALOG',
 '_NET_WM_WINDOW_TYPE_SPLASH',
 '_NET_DESKTOP_LAYOUT',
 '_NET_WM_ACTION_FULLSCREEN',
 '_NET_WM_STATE_DEMANDS_ATTENTION',
 '_NET_CLIENT_LIST_STACKING',
 '_NET_WM_VISIBLE_ICON_NAME',
 '_NET_SUPPORTED',
 '_NET_WM_USER_TIME',
 '_NET_WM_NAME',
 '_NET_WM_WINDOW_TYPE_DOCK',
 '_NET_WM_PID',
 '_NET_WM_ACTION_MAXIMIZE_VERT',
 '_NET_DESKTOP_NAMES',
 '_NET_WM_STATE_SKIP_PAGER',
 '_NET_CURRENT_DESKTOP',
 'WM_CLASS',
 '_NET_WM_STATE_SKIP_TASKBAR',
 'WM_NAME',
 'WM_ICON_NAME',
 '_NET_WM_ICON',
 '_NET_WM_WINDOW_TYPE_NORMAL',
 '_NET_WM_ACTION_BELOW',
 '_NET_WM_WINDOW_TYPE_COMBO']

* Sun 11 May 2014 02:21:54 PM JST
ATOMNAMES
* Sun 11 May 2014 02:22:09 PM JST
'_NET_WM_STATE'
* Sun 11 May 2014 02:25:03 PM JST
xcb2atom, 
* Sun 11 May 2014 02:25:56 PM JST
name=
* Sun 11 May 2014 02:28:54 PM JST
    def test_internatom_xcb_xcb2(self):
        r"""internatom
        """
        for name in ATOMNAMES:
            xcbatom = self.xcbcon.core.InternAtom(
                False, len(name), name).reply().atom
            xcb2atom = self.xcb2con.core.InternAtom(
                False, len(name), name).reply().atom
            self.assertEqual(
                xcbatom, xcb2atom,
                msg='Failed not Equal: name={}, xcb={}, xcb2={}'
                .format(name, xcbatom, xcb2atom))

* Sun 11 May 2014 02:29:20 PM JST
Unchecked
* Sun 11 May 2014 02:30:37 PM JST
InternAtomUnchecked
* Sun 11 May 2014 02:32:50 PM JST
samevalue
* Sun 11 May 2014 02:33:31 PM JST
        
* Sun 11 May 2014 02:33:35 PM JST
r"""Check same value xcb.core.InternAtom and xcb2.core.InternAtom."""
* Sun 11 May 2014 02:34:50 PM JST
        
* Sun 11 May 2014 02:37:37 PM JST
ATOMTYPES
* Sun 11 May 2014 02:40:41 PM JST
            self.assertEqual(
                xcbatom, xcb2atom,
                msg='Failed not Equal: name={}, xcb={}, xcb2={}'
                .format(name, xcbatom, xcb2atom))


* Sun 11 May 2014 03:16:13 PM JST
    def test_samevalue_internatom_usecache_xcb_xcb2(self, ):
        r"""samevalue_internatom_usecache_xcb_xcb2."""
        for name in ATOMTYPES.keys():
            xcbatom = self.xcbcon.core.InternAtom(
                False, len(name), name).reply().atom
            xcb2atom = self.xcb2con.core.InternAtom.usecache(name)
            self.assertEqual(
                xcbatom, xcb2atom,
                msg='Failed not Equal: name={}, xcb={}, xcb2={}'
                .format(name, xcbatom, xcb2atom))


* Sun 11 May 2014 03:16:27 PM JST
unchecked
* Sun 11 May 2014 03:17:44 PM JST
        self.xcbcon = xcb.connect()
        self.xcb2con = xcb2.connect()

* Sun 11 May 2014 03:17:52 PM JST

* Sun 11 May 2014 03:17:53 PM JST

* Sun 11 May 2014 03:17:53 PM JST
        pass

* Sun 11 May 2014 03:18:31 PM JST
 = xcb.connect()
* Sun 11 May 2014 03:18:38 PM JST
 = xcb2.connect()
* Sun 11 May 2014 03:31:54 PM JST
InternAtomAbstract
* Sun 11 May 2014 03:32:43 PM JST
InternAtomAbstract
* Sun 11 May 2014 03:33:58 PM JST
from xcb2.xproto.ext.internatom.internatom import InternAtomAbstract
* Sun 11 May 2014 03:34:04 PM JST
InternAtomAbstract
* Sun 11 May 2014 03:35:20 PM JST
self.with 
* Sun 11 May 2014 03:36:07 PM JST
self.
* Sun 11 May 2014 03:36:16 PM JST

* Sun 11 May 2014 03:36:16 PM JST

* Sun 11 May 2014 03:36:16 PM JST
        self.assertRaises(TypeError, InternAtomAbstract(self.xcb2con))

* Sun 11 May 2014 03:36:44 PM JST
assertRaises
* Sun 11 May 2014 03:37:43 PM JST
InternAtomAbstract
* Sun 11 May 2014 04:04:57 PM JST
self.xcb2con = xcb2.connect()
* Sun 11 May 2014 04:05:07 PM JST
        for name in ATOMTYPES.keys():
            xcbatom = self.xcbcon.core.InternAtomUnchecked(
                False, len(name), name).reply().atom
            xcb2atom = self.xcb2con.core.InternAtomUnchecked(
                False, len(name), name).reply().atom

* Sun 11 May 2014 04:05:30 PM JST
        for name in ATOMTYPES.keys():
            xcb2atom = self.xcb2con.core.InternAtom(
                False, len(name), name).reply().atom

* Sun 11 May 2014 04:05:41 PM JST
xcb2atom = 
* Sun 11 May 2014 04:05:42 PM JST
             
* Sun 11 May 2014 04:05:52 PM JST
from xcb2.xproto.atom import GlobalCacheAtoms
* Sun 11 May 2014 04:05:59 PM JST
GlobalCacheAtoms
* Sun 11 May 2014 04:06:04 PM JST
from xcb2.xproto.atom import GlobalCacheAtoms
* Sun 11 May 2014 04:08:19 PM JST
WM_NAME
* Sun 11 May 2014 04:09:02 PM JST
GlobalCacheAtoms
* Sun 11 May 2014 04:10:32 PM JST

* Sun 11 May 2014 04:10:32 PM JST

* Sun 11 May 2014 04:10:32 PM JST
        from xcb2.xproto.atom import GlobalCacheAtoms

* Sun 11 May 2014 04:11:54 PM JST
            self.assertNotEqual(
                GlobalCacheAtoms.getatom(str(atom)),
                None,
                msg='Failed InternAtom.usecache: name:{}'.format(str(atom)))

* Sun 11 May 2014 04:11:58 PM JST
str
* Sun 11 May 2014 04:12:01 PM JST
str
* Sun 11 May 2014 04:12:07 PM JST
name
* Sun 11 May 2014 04:12:54 PM JST
_NET_WM_WINDOW_TYPE_NOTIFICATION
* Sun 11 May 2014 04:14:56 PM JST
self.xcb2con.display
* Sun 11 May 2014 04:16:01 PM JST
None
* Sun 11 May 2014 04:16:12 PM JST
None
* Sun 11 May 2014 04:17:09 PM JST
GlobalCacheAtoms
* Sun 11 May 2014 04:17:23 PM JST
GlobalCacheAtoms.displaymap
* Sun 11 May 2014 04:19:34 PM JST
_NET_WM_WINDOW_TYPE_NOTIFICATION
* Sun 11 May 2014 04:21:01 PM JST
from xcb2.xproto.atom import GlobalCacheAtoms
* Sun 11 May 2014 04:21:07 PM JST
GlobalCacheAtoms
* Sun 11 May 2014 04:22:03 PM JST
'_NET_WM_WINDOW_TYPE_NOTIFICATION'
* Sun 11 May 2014 04:22:26 PM JST
GlobalCacheAtoms
* Sun 11 May 2014 04:22:48 PM JST
GlobalCacheAtoms.clearall()
* Sun 11 May 2014 04:25:26 PM JST
name
* Sun 11 May 2014 04:25:26 PM JST
name), name
* Sun 11 May 2014 04:25:27 PM JST
len(name), name
* Sun 11 May 2014 04:25:27 PM JST
False, len(name), name
* Sun 11 May 2014 04:25:59 PM JST
atom
* Sun 11 May 2014 04:25:59 PM JST
reply().atom
* Sun 11 May 2014 04:26:53 PM JST
        from xcb2.xproto.atom import GlobalCacheAtoms
        GlobalCacheAtoms.clearall()

* Sun 11 May 2014 04:27:09 PM JST
GlobalCacheAtoms
* Sun 11 May 2014 04:27:17 PM JST
self.globalcacheatoms
* Sun 11 May 2014 04:27:23 PM JST
self.globalcacheatoms
* Sun 11 May 2014 04:29:06 PM JST
        for name in ATOMTYPES.keys():
            atom = self.xcb2con.core.InternAtom.usecache(name)
            self.assertEqual(
                self.globalcacheatoms.getatom(str(atom), self.xcb2con.display),
                atom,
                msg='Failed InternAtom.usecache: name: {} {}'.format(
                    str(atom), self.globalcacheatoms.displaymap))
            self.assertEqual(
                self.globalcacheatoms.getatom(int(atom), self.xcb2con.display),
                atom,
                msg='Failed InternAtom.usecache: atom: {} {}'.format(
                    int(atom), self.globalcacheatoms.displaymap))

* Sun 11 May 2014 04:29:31 PM JST
self.globalcacheatoms
* Sun 11 May 2014 04:30:53 PM JST
self.xcb2con
* Sun 11 May 2014 04:54:23 PM JST
GlobalCacheAtoms.getatom(name, self._connection.display)
* Sun 11 May 2014 04:54:46 PM JST
cache = GlobalCacheAtoms.getatom
* Sun 11 May 2014 04:54:51 PM JST
getatom
* Sun 11 May 2014 04:54:51 PM JST
GlobalCacheAtoms.getatom
* Sun 11 May 2014 04:56:09 PM JST
GlobalCacheAtoms.add(atompair, self._connection.display)
* Sun 11 May 2014 05:13:14 PM JST
        for name in ATOMTYPES.keys():
            atom = self.xcb2con.core.InternAtomUnchecked.usecache(name)

* Sun 11 May 2014 05:13:28 PM JST
atom = 
* Sun 11 May 2014 05:14:07 PM JST
self.xcb2con.core.InternAtomUnchecked.usecache(name)
* Sun 11 May 2014 05:17:58 PM JST

* Sun 11 May 2014 05:17:58 PM JST

* Sun 11 May 2014 05:17:58 PM JST
            print('DEBUG-1-internatom.py')

* Sun 11 May 2014 05:17:59 PM JST

* Sun 11 May 2014 05:17:59 PM JST

* Sun 11 May 2014 05:17:59 PM JST
        print('DEBUG-2-internatom.py')

* Sun 11 May 2014 05:24:25 PM JST
Search
* Sun 11 May 2014 05:30:05 PM JST
groupsmo
* Sun 11 May 2014 05:32:19 PM JST
.coveragerc
* Sun 11 May 2014 05:46:01 PM JST
--cover-package=
* Sun 11 May 2014 11:31:35 PM JST

* Sun 11 May 2014 11:32:00 PM JST
nosetests
* Sun 11 May 2014 11:32:01 PM JST
nosetests-cover-package
* Sun 11 May 2014 11:34:14 PM JST
(progn 
* Sun 11 May 2014 11:34:15 PM JST
                (progn 
* Sun 11 May 2014 11:34:18 PM JST
                
* Sun 11 May 2014 11:47:52 PM JST
args
* Sun 11 May 2014 11:53:46 PM JST
    
* Sun 11 May 2014 11:53:47 PM JST
  
* Sun 11 May 2014 11:57:02 PM JST
name
* Sun 11 May 2014 11:58:07 PM JST
(defun nosetests-run-it-cover-package (args package) ;[2014/05/11]
  "ARGS
PACKAGE"
  (interactive "p\ns--cover-package=: ")
  (let ((nosetests-cover-package package))
    (nosetests-run-it args)))

* Sun 11 May 2014 11:58:29 PM JST
(defun nosetests-run-dir-cover-package (args package) ;[2014/05/11]
  "ARGS
PACKAGE"
  (interactive "p\ns--cover-package=: ")
  (let ((nosetests-cover-package package))
    (nosetests-run-dir args)))
* Sun 11 May 2014 11:59:04 PM JST
(defun nosetests-run-all-cover-package (args package) ;[2014/05/11]
  "ARGS
PACKAGE"
  (interactive "p\ns--cover-package=: ")
  (let ((nosetests-cover-package package))
    (nosetests-run-all args)))

* Sun 11 May 2014 11:59:27 PM JST
;;;###autoload
* Mon 12 May 2014 12:02:01 AM JST
nosetests
* Mon 12 May 2014 12:02:04 AM JST
nosetests-pdb-run-all
* Mon 12 May 2014 12:02:23 AM JST
nosetests-pdb-run-buffer
* Mon 12 May 2014 12:02:37 AM JST
nosetests-pdb-run-dir
* Mon 12 May 2014 12:02:44 AM JST
nosetests-pdb-run-it
* Mon 12 May 2014 12:04:20 AM JST
nosetests-run-all-cover-package
* Mon 12 May 2014 12:04:30 AM JST
nosetests-run-dir-cover-package
* Mon 12 May 2014 12:04:37 AM JST
nosetests-run-it-cover-package
* Mon 12 May 2014 12:04:42 AM JST

* Mon 12 May 2014 12:04:42 AM JST

* Mon 12 May 2014 12:04:42 AM JST
;;

* Mon 12 May 2014 12:06:07 AM JST
    
* Mon 12 May 2014 12:10:24 AM JST
internatom
* Mon 12 May 2014 12:10:25 AM JST
ext
* Mon 12 May 2014 12:10:25 AM JST
xproto.ext
* Mon 12 May 2014 12:10:25 AM JST
xcb2.xproto.ext
* Mon 12 May 2014 12:28:13 AM JST
pass
* Mon 12 May 2014 12:32:24 AM JST
isupper()
* Mon 12 May 2014 12:32:42 AM JST
D 
* Mon 12 May 2014 12:37:40 AM JST
self.xcb2con.core
* Mon 12 May 2014 12:39:32 AM JST
AllocColorUnchecked
* Mon 12 May 2014 12:39:46 AM JST
alloccolor
* Mon 12 May 2014 12:39:46 AM JST
ext
* Mon 12 May 2014 12:39:47 AM JST
xproto.ext
* Mon 12 May 2014 12:39:47 AM JST
xcb2.xproto.ext
* Mon 12 May 2014 12:39:52 AM JST
AllocColorUnchecked
* Mon 12 May 2014 12:41:59 AM JST
AllocColorUnchecked
* Mon 12 May 2014 12:42:05 AM JST

* Mon 12 May 2014 12:43:41 AM JST
core
* Mon 12 May 2014 12:43:42 AM JST
xcb2.core
* Mon 12 May 2014 12:44:50 AM JST
ChangeHosts
* Mon 12 May 2014 12:58:30 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xproto.ext.abstract import CoreMethodAbstract

* Mon 12 May 2014 12:58:37 AM JST
class AllocColorAbstract(CoreMethodAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - [yas] elisp error!:
        """
        CoreMethodAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, green, blue):
        raise StandardError()

    def __call__(self, green, blue):
        r"""SUMMARY

        __call__( green, blue)

        @Arguments:
        - [yas] elisp error!:

        @Return:
        """
        return self._getcookie(green, blue)

* Mon 12 May 2014 12:58:43 AM JST
AllocColor
* Mon 12 May 2014 12:58:59 AM JST
mode, family, address_len, address
* Mon 12 May 2014 01:00:57 AM JST
ChangeHostsChecked
* Mon 12 May 2014 01:01:12 AM JST
ChangeHosts
* Mon 12 May 2014 01:01:24 AM JST
    def _getcookie(self, mode, family, address_len, address):
        r"""SUMMARY
        
        _getcookie(mode, family, address_len, address)
        
        @Arguments:
        - `mode`:
        - `family`:
        - `address_len`:
        - `address`:
        
        @Return:
        """
        return self._connection.rawconnection.core.ChangeHosts(
            mode, family, address_len, address)

* Mon 12 May 2014 01:02:09 AM JST
ChangeHosts
* Mon 12 May 2014 01:02:22 AM JST
ChangeHosts
* Mon 12 May 2014 01:02:31 AM JST
ChangeHostsChecked
* Mon 12 May 2014 01:03:21 AM JST

* Mon 12 May 2014 01:03:23 AM JST
changegc
* Mon 12 May 2014 01:04:19 AM JST
    
* Mon 12 May 2014 01:05:05 AM JST
        self
* Mon 12 May 2014 01:05:10 AM JST
ChangeGCChecked
* Mon 12 May 2014 01:05:17 AM JST
        
* Mon 12 May 2014 01:08:00 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xproto.ext.abstract import CoreMethodAbstract

* Mon 12 May 2014 01:08:06 AM JST
class ChangeHostsAbstract(CoreMethodAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - [yas] elisp error!:
        """
        CoreMethodAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, mode, family, address_len, address):
        raise StandardError()

    def __call__(self, mode, family, address_len, address):
        r"""SUMMARY

        __call__( green, blue)

        @Arguments:
        - [yas] elisp error!:

        @Return:
        """
        return self._getcookie(mode, family, address_len, address)

* Mon 12 May 2014 01:08:11 AM JST
ChangeHosts
* Mon 12 May 2014 01:09:18 AM JST
class GetScreenSaver(GetScreenSaverAbstract):
    r"""SUMMARY
    """
    
    def _getcookie(self, ):
        r"""SUMMARY
        
        _getcookie()
        
        @Return:
        """
        return self._connection.rawconnection.core.GetScreenSaver()

* Mon 12 May 2014 01:09:37 AM JST
GetScreenSaver
* Mon 12 May 2014 01:10:16 AM JST
GetScreenSaver
* Mon 12 May 2014 01:10:24 AM JST
GetScreenSaverUnchecked
* Mon 12 May 2014 01:10:57 AM JST

* Mon 12 May 2014 01:10:59 AM JST
getproperty
* Mon 12 May 2014 01:11:32 AM JST
= lambda *args, **kwargs: None
* Mon 12 May 2014 01:11:37 AM JST
        
* Mon 12 May 2014 01:14:46 AM JST

* Mon 12 May 2014 01:15:28 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xproto.ext.abstract import CoreMethodAbstract


class ChangeHostsAbstract(CoreMethodAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - [yas] elisp error!:
        """
        CoreMethodAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, mode, family, address_len, address):
        raise StandardError()

    def __call__(self, mode, family, address_len, address):
        r"""SUMMARY

        __call__( green, blue)

        @Arguments:
        - [yas] elisp error!:

        @Return:
        """
        return self._getcookie(mode, family, address_len, address)


class ChangeHosts(ChangeHostsAbstract):
    r"""SUMMARY
    """

    def _getcookie(self, mode, family, address_len, address):
        r"""SUMMARY

        _getcookie(mode, family, address_len, address)

        @Arguments:
        - `mode`:
        - `family`:
        - `address_len`:
        - `address`:

        @Return:
        """
        return self._connection.rawconnection.core.ChangeHosts(
            mode, family, address_len, address)


class ChangeHostsChecked(ChangeHostsAbstract):
    r"""SUMMARY
    """

    def _getcookie(self, mode, family, address_len, address):
        r"""SUMMARY

        _getcookie(mode, family, address_len, address)

        @Arguments:
        - `mode`:
        - `family`:
        - `address_len`:
        - `address`:

        @Return:
        """
        return self._connection.rawconnection.core.ChangeHostsChecked(
            mode, family, address_len, address)

* Mon 12 May 2014 01:15:50 AM JST
ChangeHosts
* Mon 12 May 2014 01:16:10 AM JST
Change
* Mon 12 May 2014 01:16:15 AM JST
Change
* Mon 12 May 2014 01:16:28 AM JST
Change
* Mon 12 May 2014 01:16:34 AM JST
ChangeHosts
* Mon 12 May 2014 01:17:05 AM JST
ChangeHosts
* Mon 12 May 2014 01:18:13 AM JST
            
* Mon 12 May 2014 01:18:16 AM JST
mode, family, address_len, address
* Mon 12 May 2014 01:18:16 AM JST
            mode, family, address_len, address
* Mon 12 May 2014 01:18:20 AM JST
address
* Mon 12 May 2014 01:18:20 AM JST
address_len, address
* Mon 12 May 2014 01:18:20 AM JST
family, address_len, address
* Mon 12 May 2014 01:18:20 AM JST
mode, family, address_len, address
* Mon 12 May 2014 01:19:15 AM JST
ListHosts
* Mon 12 May 2014 01:19:24 AM JST
ListHostsUnchecked
* Mon 12 May 2014 01:19:55 AM JST

* Mon 12 May 2014 01:19:56 AM JST
listfontswithinfo
* Mon 12 May 2014 01:20:15 AM JST
        
* Mon 12 May 2014 01:20:18 AM JST
ListFontsWithInfoUnchecked
* Mon 12 May 2014 01:20:27 AM JST
        
* Mon 12 May 2014 01:21:05 AM JST
c
* Mon 12 May 2014 01:23:03 AM JST
fill
* Mon 12 May 2014 01:23:06 AM JST
fill
* Mon 12 May 2014 01:23:09 AM JST
Fill
* Mon 12 May 2014 01:23:22 AM JST
Fill
* Mon 12 May 2014 01:23:32 AM JST
polyfillarc
* Mon 12 May 2014 01:23:33 AM JST
ext.polyfillarc
* Mon 12 May 2014 01:23:33 AM JST
xproto.ext.polyfillarc
* Mon 12 May 2014 01:23:34 AM JST
xcb2.xproto.ext.polyfillarc
* Mon 12 May 2014 01:25:00 AM JST
        
* Mon 12 May 2014 01:25:11 AM JST
        
* Mon 12 May 2014 01:26:17 AM JST
    
* Mon 12 May 2014 01:26:27 AM JST
PolyFillArcChecked
* Mon 12 May 2014 01:28:39 AM JST
PolyFillArc
* Mon 12 May 2014 01:28:48 AM JST
PolyFillArcChecked
* Mon 12 May 2014 01:28:56 AM JST
PolyFillArc
* Mon 12 May 2014 02:28:31 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xproto.ext.abstract import CoreMethodAbstract


class PolyFillArcAbstract(CoreMethodAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - [yas] elisp error!:
        """
        CoreMethodAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, drawable, gc, arcs_len, arcs):
        raise StandardError()

    def __call__(self, drawable, gc, arcs_len, arcs):
        r"""SUMMARY

        __call__(drawable, gc, arcs_len, arcs)

        @Arguments:
        - [yas] elisp error!:

        @Return:
        """
        return self._getcookie(drawable, gc, arcs_len, arcs)


class PolyFillArc(PolyFillArcAbstract):
    r"""SUMMARY
    """

    def _getcookie(self, drawable, gc, arcs_len, arcs):
        r"""SUMMARY

        _getcookie(drawable, gc, arcs_len, arcs)

        @Arguments:
        - [yas] elisp error!:

        @Return:
        """
        return self._connection.rawconnection.core.PolyFillArc(
            drawable, gc, arcs_len, arcs)


class PolyFillArcChecked(PolyFillArcAbstract):
    r"""SUMMARY
    """

    def _getcookie(self, drawable, gc, arcs_len, arcs):
        r"""SUMMARY

        _getcookie(drawable, gc, arcs_len, arcs)

        @Arguments:
        - [yas] elisp error!:

        @Return:
        """
        return self._connection.rawconnection.core.PolyFillArcChecked(
            drawable, gc, arcs_len, arcs)

* Mon 12 May 2014 02:28:41 AM JST
PolyFillArc
* Mon 12 May 2014 02:28:49 AM JST
QueryKeymap
* Mon 12 May 2014 02:29:38 AM JST
ListHosts?
* Mon 12 May 2014 02:29:48 AM JST
drawable, gc, arcs_len, arcs
* Mon 12 May 2014 02:29:48 AM JST
            drawable, gc, arcs_len, arcs
* Mon 12 May 2014 02:29:51 AM JST
drawable, gc, arcs_len, arcs
* Mon 12 May 2014 02:29:52 AM JST
            drawable, gc, arcs_len, arcs
* Mon 12 May 2014 02:29:55 AM JST
arcs
* Mon 12 May 2014 02:29:56 AM JST
arcs_len, arcs
* Mon 12 May 2014 02:29:56 AM JST
gc, arcs_len, arcs
* Mon 12 May 2014 02:29:56 AM JST
drawable, gc, arcs_len, arcs
* Mon 12 May 2014 02:30:02 AM JST
arcs
* Mon 12 May 2014 02:30:02 AM JST
arcs_len, arcs
* Mon 12 May 2014 02:30:02 AM JST
gc, arcs_len, arcs
* Mon 12 May 2014 02:30:02 AM JST
drawable, gc, arcs_len, arcs
* Mon 12 May 2014 02:30:23 AM JST
arcs
* Mon 12 May 2014 02:30:23 AM JST
arcs_len, arcs
* Mon 12 May 2014 02:30:24 AM JST
gc, arcs_len, arcs
* Mon 12 May 2014 02:30:24 AM JST
drawable, gc, arcs_len, arcs
* Mon 12 May 2014 02:30:28 AM JST
arcs
* Mon 12 May 2014 02:30:28 AM JST
arcs_len, arcs
* Mon 12 May 2014 02:30:29 AM JST
gc, arcs_len, arcs
* Mon 12 May 2014 02:30:29 AM JST
drawable, gc, arcs_len, arcs
* Mon 12 May 2014 02:30:37 AM JST
arcs
* Mon 12 May 2014 02:30:38 AM JST
arcs_len, arcs
* Mon 12 May 2014 02:30:38 AM JST
gc, arcs_len, arcs
* Mon 12 May 2014 02:30:39 AM JST
drawable, gc, arcs_len, arcs
* Mon 12 May 2014 02:33:13 AM JST
Unchecked
* Mon 12 May 2014 02:33:39 AM JST
QueryKeymap
* Mon 12 May 2014 02:33:47 AM JST
QueryKeymapUnchecked
* Mon 12 May 2014 02:34:20 AM JST

* Mon 12 May 2014 02:34:46 AM JST
    
* Mon 12 May 2014 02:34:48 AM JST
QueryFontUnchecked
* Mon 12 May 2014 02:35:06 AM JST
    
* Mon 12 May 2014 02:38:47 AM JST
from abc import ABCMeta, abstractmethod
from xcb2.xproto.ext.abstract import CoreMethodAbstract


class PolyFillArcAbstract(CoreMethodAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection):
        r"""

        @Arguments:
        - [yas] elisp error!:
        """
        CoreMethodAbstract.__init__(self, connection)

    @abstractmethod
    def _getcookie(self, drawable, gc, arcs_len, arcs):
        raise StandardError()

    def __call__(self, drawable, gc, arcs_len, arcs):
        r"""SUMMARY

        __call__(drawable, gc, arcs_len, arcs)

        @Arguments:
        - [yas] elisp error!:

        @Return:
        """
        return self._getcookie(drawable, gc, arcs_len, arcs)


class PolyFillArc(PolyFillArcAbstract):
    r"""SUMMARY
    """

    def _getcookie(self, drawable, gc, arcs_len, arcs):
        r"""SUMMARY

        _getcookie(drawable, gc, arcs_len, arcs)

        @Arguments:
        - [yas] elisp error!:

        @Return:
        """
        return self._connection.rawconnection.core.PolyFillArc(
            drawable, gc, arcs_len, arcs)


class PolyFillArcChecked(PolyFillArcAbstract):
    r"""SUMMARY
    """

    def _getcookie(self, drawable, gc, arcs_len, arcs):
        r"""SUMMARY

        _getcookie(drawable, gc, arcs_len, arcs)

        @Arguments:
        - [yas] elisp error!:

        @Return:
        """
        return self._connection.rawconnection.core.PolyFillArcChecked(
            drawable, gc, arcs_len, arcs)

* Mon 12 May 2014 02:38:56 AM JST
PolyFillArcAbstract
* Mon 12 May 2014 02:38:59 AM JST
PolyFillArc
* Mon 12 May 2014 02:39:30 AM JST
SetScreenSaver
* Mon 12 May 2014 02:39:43 AM JST
timeout, interval, prefer_blanking, allow_exposures
* Mon 12 May 2014 02:41:04 AM JST
SetScreenSaver
* Mon 12 May 2014 02:41:28 AM JST
SetScreenSaverChecked
* Mon 12 May 2014 02:41:54 AM JST

* Mon 12 May 2014 02:41:56 AM JST
setpointermapping
* Mon 12 May 2014 02:42:17 AM JST
    
* Mon 12 May 2014 02:42:20 AM JST
SetPointerMappingUnchecked
* Mon 12 May 2014 02:42:40 AM JST
    
* Mon 12 May 2014 02:47:07 AM JST
repr(
* Mon 12 May 2014 02:49:17 AM JST
GetProperty
* Mon 12 May 2014 02:54:55 AM JST
SUMMARY
* Mon 12 May 2014 03:04:39 AM JST
        for name in dir(self.xcbcon.core):
            if name.startswith('_') or not name[0].isupper():
                continue

* Mon 12 May 2014 03:09:36 AM JST
getargspec(xcbmethod)
* Mon 12 May 2014 03:10:07 AM JST
            
* Mon 12 May 2014 03:10:15 AM JST

* Mon 12 May 2014 03:10:17 AM JST
xcbspec
* Mon 12 May 2014 03:11:44 AM JST
args.remove('self')
* Mon 12 May 2014 03:13:35 AM JST
xcb2spec
* Mon 12 May 2014 03:14:58 AM JST
cmap, red, green, blue
* Mon 12 May 2014 03:15:41 AM JST
cc.core.AllocColor?
* Mon 12 May 2014 03:17:49 AM JST
depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list
* Mon 12 May 2014 03:20:55 AM JST
                     
* Mon 12 May 2014 03:21:04 AM JST
                             
* Mon 12 May 2014 03:29:03 AM JST
    
* Mon 12 May 2014 03:29:05 AM JST
GetPropertyUnchecked
* Mon 12 May 2014 03:29:11 AM JST
GetPropertyUnchecked
* Mon 12 May 2014 03:29:26 AM JST
    
* Mon 12 May 2014 02:49:41 PM JST
BellChecked
* Mon 12 May 2014 03:05:19 PM JST
my-var-dir
* Mon 12 May 2014 03:05:29 PM JST

* Mon 12 May 2014 03:08:30 PM JST
(defun cleanup-autosave (&optional force)
  "Clean up auto save file.
If auto save file is old, then will delete it."
  (interactive "p")
  (let ((files (directory-files my-bk-autosave-dir))
        (find-file-hook nil)
        f-location
        source-file
        deleted)
    (dolist (f files)
      (setq f-location (expand-file-name f my-bk-autosave-dir))
      (when (auto-save-file-name-p f)
        (setq source-file (file-name-from-auto-save f))
        (when (or (not (file-newer-than-file-p f-location source-file))
                  force)
          (setq deleted (append deleted (list (format "Deleted %s" f))))
          (delete-file f-location))))
    (message "%s" (mapconcat 'identity deleted "\n"))))
* Mon 12 May 2014 03:08:41 PM JST
(directory-files my-bk-autosave-dir)
* Mon 12 May 2014 03:08:44 PM JST
dir
* Mon 12 May 2014 03:08:44 PM JST
autosave
* Mon 12 May 2014 03:08:45 PM JST
bk-autosave
* Mon 12 May 2014 03:08:45 PM JST
my-bk-autosave
* Mon 12 May 2014 03:08:51 PM JST
open-junk-file-format
* Mon 12 May 2014 03:11:42 PM JST
open-junk-file-directory
* Mon 12 May 2014 03:15:27 PM JST
my-var-dir
* Mon 12 May 2014 03:16:32 PM JST
open-junk-file-dir-path
* Mon 12 May 2014 03:20:44 PM JST
%Y-%m-%d-%H%M%S.junk.
* Mon 12 May 2014 03:22:32 PM JST
open-junk-file-format
* Mon 12 May 2014 03:23:00 PM JST

* Mon 12 May 2014 03:23:00 PM JST

* Mon 12 May 2014 03:23:00 PM JST
        ;; (concat temporary-file-directory "junk/%Y-%m-%d-%H%M%S.junk.")

* Mon 12 May 2014 03:23:01 PM JST
        ;; (concat temporary-file-directory "junk/%Y-%m-%d-%H%M%S.junk.")

* Mon 12 May 2014 03:23:01 PM JST
        ;; (concat temporary-file-directory "junk/%Y-%m-%d-%H%M%S.junk.")
        ;; (concat my-var-dir "junk/%Y-%m-%d-%H%M%S.junk.")

* Mon 12 May 2014 03:25:14 PM JST
(directory-files my-bk-autosave-dir)
* Mon 12 May 2014 03:25:20 PM JST
dir
* Mon 12 May 2014 03:25:20 PM JST
autosave-dir
* Mon 12 May 2014 03:25:21 PM JST
bk-autosave-dir
* Mon 12 May 2014 03:25:21 PM JST
my-bk-autosave-dir
* Mon 12 May 2014 03:27:43 PM JST
)
* Mon 12 May 2014 03:31:12 PM JST
string-
* Mon 12 May 2014 03:31:21 PM JST
string 
* Mon 12 May 2014 03:31:21 PM JST
match-string 
* Mon 12 May 2014 03:32:00 PM JST
(string-equal "." f)
* Mon 12 May 2014 03:32:43 PM JST
    
* Mon 12 May 2014 03:33:11 PM JST
deleted
* Mon 12 May 2014 03:33:24 PM JST
(setq deleted (append deleted (list (format "Deleted %s" f))))
* Mon 12 May 2014 03:36:03 PM JST
delete-directory
* Mon 12 May 2014 03:37:46 PM JST
(defun cleanup-open-junk-files () ;[2014/05/12]
  ""
  (interactive)
  (delete-directory open-junk-file-dir-path 'recursive 'trash))
* Mon 12 May 2014 03:37:52 PM JST
;;;###autoload
* Mon 12 May 2014 03:39:07 PM JST
(defvar open-junk-file-dir-path (concat my-var-dir "junk"))
(defvar open-junk-file-my-format "%Y-%m-%d-%H%M%S.junk.")

* Mon 12 May 2014 04:45:15 PM JST
rootsdepth =
* Mon 12 May 2014 04:49:11 PM JST
tmp
* Mon 12 May 2014 05:28:24 PM JST
def debug(*args, **kwargs):
    r"""SUMMARY

    debug(*args, **kwargs)

    @Arguments:
    - `args`:
    - `kwargs`:

    @Return:
    """
    if kwargs[EventDispatcher.event].detail == xproto.NotifyDetail.Inferior:
        return
    LOG.info('** FocusIn >> name:"{0.name}", wmclass:{0.wmclass}, pid:{0.pid}, '
             'id:"{0.window.id}"'
             .format(kwargs[EventDispatcher.event].event))



* Mon 12 May 2014 05:32:28 PM JST
from xahk import exceptions
* Mon 12 May 2014 05:34:21 PM JST
exceptions.XAHKStopWaitForEvent
* Mon 12 May 2014 05:34:24 PM JST
LOG.info('XAHK2StopWaitForEvent!!')
* Mon 12 May 2014 05:34:30 PM JST
debug
* Mon 12 May 2014 05:34:38 PM JST
XAHKReload
* Mon 12 May 2014 05:34:55 PM JST
LOG.info('KeyboardInterrupted!!')
* Mon 12 May 2014 05:36:27 PM JST

* Mon 12 May 2014 05:36:27 PM JST

* Mon 12 May 2014 05:36:27 PM JST
        try:

* Mon 12 May 2014 05:37:33 PM JST

* Mon 12 May 2014 05:37:34 PM JST

* Mon 12 May 2014 05:37:34 PM JST
    print('DEBUG-2-handler6.py')

* Mon 12 May 2014 05:44:49 PM JST

* Mon 12 May 2014 05:44:49 PM JST

* Mon 12 May 2014 05:44:49 PM JST
         '#R': reload,

* Mon 12 May 2014 05:44:51 PM JST

* Mon 12 May 2014 05:44:51 PM JST

* Mon 12 May 2014 05:44:51 PM JST
         '#R': reload,

* Mon 12 May 2014 05:45:00 PM JST
            
* Mon 12 May 2014 05:58:45 PM JST
change
* Mon 12 May 2014 06:00:03 PM JST
'WM_NAME'
* Mon 12 May 2014 06:21:45 PM JST
list_clients
* Mon 12 May 2014 06:22:04 PM JST
client_list
* Mon 12 May 2014 06:25:34 PM JST
atoms
* Mon 12 May 2014 06:25:34 PM JST
reply().atoms
* Mon 12 May 2014 06:25:34 PM JST
list_properties().reply().atoms
* Mon 12 May 2014 06:25:34 PM JST
1].list_properties().reply().atoms
* Mon 12 May 2014 06:28:49 PM JST
67108864
* Mon 12 May 2014 06:29:06 PM JST
_NET_WM_WINDOW_TYPE
* Mon 12 May 2014 06:30:46 PM JST
67108864
* Mon 12 May 2014 06:31:47 PM JST
50331670
* Mon 12 May 2014 06:32:35 PM JST
_NET_WM_WINDOW_TYPE
* Mon 12 May 2014 06:32:42 PM JST
50331670
* Mon 12 May 2014 06:56:38 PM JST
InternAtom
* Mon 12 May 2014 06:57:01 PM JST
con.core.atomidentify('_NET_WM_WINDOW_TYPE')
* Mon 12 May 2014 06:58:10 PM JST

* Mon 12 May 2014 06:58:16 PM JST
_NET_WM_WINDOW_TYPE
* Mon 12 May 2014 06:58:53 PM JST
'_NET_WM_WINDOW_TYPE_NORMAL'
* Mon 12 May 2014 06:59:13 PM JST
XA_NORMAL
* Mon 12 May 2014 06:59:46 PM JST
InternAtom
* Mon 12 May 2014 06:59:52 PM JST
False,
* Mon 12 May 2014 07:00:06 PM JST
'_NET_WM_WINDOW_TYPE'
* Mon 12 May 2014 07:00:30 PM JST
'_NET_WM_WINDOW_TYPE_NORMAL'
* Mon 12 May 2014 07:01:18 PM JST
'ATOM'
* Mon 12 May 2014 07:06:08 PM JST
XA_NORMAL
* Mon 12 May 2014 07:08:14 PM JST
'_NET_WM_NAME
* Mon 12 May 2014 07:08:18 PM JST
'_NET_WM_NAME'
* Mon 12 May 2014 07:09:08 PM JST
XA_NET_WM_NAME
* Mon 12 May 2014 07:09:47 PM JST
con.core.ChangeProperty(
    PropMode.Replace, window, XA_WM_NAME, XA_STRING, 8, len(NAME), NAME)

* Mon 12 May 2014 07:12:10 PM JST
67108864
* Mon 12 May 2014 07:13:36 PM JST
c.core.atomidentify('_NET_WM_NAME').types.format
* Mon 12 May 2014 07:14:09 PM JST
'UTF8_STRING'
* Mon 12 May 2014 07:14:38 PM JST
XA_UTF8_STRING
* Mon 12 May 2014 10:30:09 PM JST
get_full_value()
* Mon 12 May 2014 10:30:27 PM JST
reply
* Mon 12 May 2014 10:31:11 PM JST
WM_NAME
* Mon 12 May 2014 10:31:38 PM JST
50331670
* Mon 12 May 2014 10:32:04 PM JST
get_full_property()
* Mon 12 May 2014 10:32:14 PM JST
get_full_value
* Mon 12 May 2014 10:34:49 PM JST
self.core.GetProperty.WM_NAME(self).reply().get_full_value()
* Mon 12 May 2014 10:36:46 PM JST
            
* Mon 12 May 2014 10:40:14 PM JST
67108864
* Mon 12 May 2014 10:43:25 PM JST
ListProperty
* Mon 12 May 2014 10:43:36 PM JST
ListProperties
* Mon 12 May 2014 10:43:55 PM JST
67108864
* Mon 12 May 2014 11:00:49 PM JST

* Mon 12 May 2014 11:00:49 PM JST

* Mon 12 May 2014 11:00:50 PM JST
__all__ = [ ]

* Mon 12 May 2014 11:02:58 PM JST
import struct
import xcb

* Mon 12 May 2014 11:03:04 PM JST

* Mon 12 May 2014 11:03:04 PM JST

* Mon 12 May 2014 11:03:04 PM JST
import xcb

* Mon 12 May 2014 11:03:53 PM JST
'testclass\x00TestClass\x00'
* Mon 12 May 2014 11:04:28 PM JST
con = xcb.connect()
con.render = con(xcb.render.key)

setup = con.get_setup()
root = setup.roots[0].root
depth = setup.roots[0].root_depth
visual = setup.roots[0].root_visual
white = setup.roots[0].white_pixel

window = con.generate_id()

* Mon 12 May 2014 11:04:42 PM JST
con.core.CreateWindow(depth, window, root,
                      0, 0, 640, 480, 0,
                      WindowClass.InputOutput,
                      visual,
                      CW.BackPixel | CW.EventMask,
                      [white, EventMask.Exposure | EventMask.KeyPress])

* Mon 12 May 2014 11:05:01 PM JST
xcb.xproto.
* Mon 12 May 2014 11:05:38 PM JST
XA_WM_NAME = con.core.InternAtom(False, len('WM_NAME'), 'WM_NAME').reply().atom
* Mon 12 May 2014 11:05:53 PM JST
XA_NET_WM_NAME = con.core.InternAtom(
    False, len('_NET_WM_NAME'), '_NET_WM_NAME').reply().atom

* Mon 12 May 2014 11:06:04 PM JST
XA_WMCLASS = con.core.InternAtom(False, len('WM_CLASS'), 'WM_CLASS').reply().atom
* Mon 12 May 2014 11:06:15 PM JST
XA_NET_WM_WINDOW_TYPE = con.core.InternAtom(
    False, len('_NET_WM_WINDOW_TYPE'), '_NET_WM_WINDOW_TYPE').reply().atom

* Mon 12 May 2014 11:06:30 PM JST
XA_NORMAL = con.core.InternAtom(
    False, len('_NET_WM_WINDOW_TYPE_NORMAL'),
    '_NET_WM_WINDOW_TYPE_NORMAL').reply().atom

* Mon 12 May 2014 11:06:43 PM JST
XA_ATOM = con.core.InternAtom(False, len('ATOM'), 'ATOM').reply().atom
* Mon 12 May 2014 11:07:04 PM JST
XA_STRING = con.core.InternAtom(False, len('STRING'), 'STRING').reply().atom
* Mon 12 May 2014 11:07:44 PM JST
con.core.ChangeProperty(
    PropMode.Replace, window, XA_NET_WM_NAME, XA_UTF8_STRING, 8, len(NAME), NAME)

con.core.ChangeProperty(
    PropMode.Replace, window, XA_WMCLASS, XA_STRING, 8, len(WMCLASS), WMCLASS)

data = struct.pack('I', XA_NORMAL)

con.core.ChangeProperty(
    PropMode.Replace, window, XA_NET_WM_WINDOW_TYPE, XA_ATOM, 32, 1, data)

* Mon 12 May 2014 11:08:04 PM JST
        
* Mon 12 May 2014 11:08:52 PM JST
XA_UTF8_STRING = con.core.InternAtom(
    False, len('UTF8_STRING'), 'UTF8_STRING').reply().atom

* Mon 12 May 2014 11:09:45 PM JST
con.core.MapWindow(window)
con.flush()

* Tue 13 May 2014 12:08:00 AM JST
simple_teswindow
* Tue 13 May 2014 12:09:15 AM JST

* Tue 13 May 2014 12:09:15 AM JST

* Tue 13 May 2014 12:09:15 AM JST
        self.con = xcb2.connect()

* Tue 13 May 2014 12:09:22 AM JST
self.
* Tue 13 May 2014 12:09:36 AM JST
xc
* Tue 13 May 2014 12:09:36 AM JST
import xc
* Tue 13 May 2014 12:10:26 AM JST

* Tue 13 May 2014 12:10:26 AM JST

* Tue 13 May 2014 12:10:26 AM JST
        mask = 

* Tue 13 May 2014 12:11:11 AM JST
xproto
* Tue 13 May 2014 12:11:19 AM JST
Configure
* Tue 13 May 2014 12:11:26 AM JST
xproto.
* Tue 13 May 2014 12:12:45 AM JST
ConfigWindow
* Tue 13 May 2014 12:15:09 AM JST

* Tue 13 May 2014 12:15:09 AM JST

* Tue 13 May 2014 12:15:09 AM JST
        sleep(10)

* Tue 13 May 2014 12:15:13 AM JST
pass
* Tue 13 May 2014 12:16:16 AM JST
self.
* Tue 13 May 2014 12:16:24 AM JST
destroy
* Tue 13 May 2014 12:17:32 AM JST
50331670
* Tue 13 May 2014 12:17:49 AM JST
height
* Tue 13 May 2014 12:18:26 AM JST
320
* Tue 13 May 2014 12:18:30 AM JST
240
* Tue 13 May 2014 12:19:20 AM JST
50331670
* Tue 13 May 2014 12:20:48 AM JST
self.assertEqual(geo.width, width,
                         msg='Failed: configure window width {}'.format(width))

* Tue 13 May 2014 12:20:53 AM JST
width
* Tue 13 May 2014 12:20:56 AM JST
width
* Tue 13 May 2014 12:21:01 AM JST
width
* Tue 13 May 2014 12:21:04 AM JST
width
* Tue 13 May 2014 12:21:46 AM JST
CON.GetGeometry(self.window).reply()
* Tue 13 May 2014 12:25:50 AM JST
c.root.client_list()
* Tue 13 May 2014 12:26:01 AM JST
c.core.GetProperty._NET_WM_NAME(67108864).reply().get_value()
* Tue 13 May 2014 12:26:36 AM JST
73400320
* Tue 13 May 2014 12:26:58 AM JST
width
* Tue 13 May 2014 12:28:25 AM JST
        width = 320
        height = 240
        CON2.core.ConfigureWindow(
            self.window, ConfigWindow.Width | ConfigWindow.Height,
            [width, height])
        CON2.flush()

* Tue 13 May 2014 12:28:27 AM JST
        width = 320
        height = 240
        CON2.core.ConfigureWindow(
            self.window, ConfigWindow.Width | ConfigWindow.Height,
            [width, height])
        CON2.flush()

* Tue 13 May 2014 12:32:30 AM JST
_height
* Tue 13 May 2014 12:32:45 AM JST

* Tue 13 May 2014 12:32:45 AM JST

* Tue 13 May 2014 12:32:45 AM JST
        height = 240

* Tue 13 May 2014 12:32:52 AM JST
height
* Tue 13 May 2014 12:33:00 AM JST
 | ConfigWindow.Height
* Tue 13 May 2014 12:33:15 AM JST
            
* Tue 13 May 2014 12:33:22 AM JST
        CON2.core.ConfigureWindow(
            self.window, ConfigWindow.Width, [width])

* Tue 13 May 2014 12:33:27 AM JST
width
* Tue 13 May 2014 12:33:33 AM JST
ConfigWindow.Height
* Tue 13 May 2014 12:33:37 AM JST

* Tue 13 May 2014 12:33:37 AM JST

* Tue 13 May 2014 12:33:37 AM JST
         | ConfigWindow.Height

* Tue 13 May 2014 12:33:41 AM JST
CON2.core.ConfigureWindow(
* Tue 13 May 2014 12:33:44 AM JST
CON2.flush()
* Tue 13 May 2014 12:33:54 AM JST
        sleep(1) # wait move
        geo = CON.core.GetGeometry(self.window).reply()

* Tue 13 May 2014 12:34:01 AM JST
        self.assertEqual(geo.height, height,
                         msg='Failed: configure window height:{} got:{}'
                         .format(height, geo.height))


* Tue 13 May 2014 12:35:02 AM JST
        
* Tue 13 May 2014 12:35:03 AM JST
SUMMARY
* Tue 13 May 2014 12:35:05 AM JST

* Tue 13 May 2014 12:35:05 AM JST

* Tue 13 May 2014 12:35:05 AM JST
        @Return:

* Tue 13 May 2014 12:38:16 AM JST

* Tue 13 May 2014 12:38:16 AM JST

* Tue 13 May 2014 12:38:16 AM JST
        x = 

* Tue 13 May 2014 12:38:31 AM JST
        CON2.core.ConfigureWindow(self.window, ConfigWindow.Width, [width])
        CON2.flush()
        sleep(1) # wait move
        geo = CON.core.GetGeometry(self.window).reply()
        self.assertEqual(geo.width, width,
                         msg='Failed: configure window width:{} got:{}'
                         .format(width, geo.width))

* Tue 13 May 2014 12:38:38 AM JST
Width
* Tue 13 May 2014 12:38:40 AM JST
width
* Tue 13 May 2014 12:38:46 AM JST
width
* Tue 13 May 2014 12:38:48 AM JST
width
* Tue 13 May 2014 12:38:51 AM JST
width
* Tue 13 May 2014 12:38:55 AM JST
geo
* Tue 13 May 2014 12:38:58 AM JST
width
* Tue 13 May 2014 12:38:59 AM JST
width
* Tue 13 May 2014 12:39:06 AM JST
    def test_move_x(self, ):
        r"""move_x."""
        x = 20
        CON2.core.ConfigureWindow(self.window, ConfigWindow.X, [x])
        CON2.flush()
        sleep(1) # wait move
        geo = CON.core.GetGeometry(self.window).reply()
        self.assertEqual(geo.x, x,
                         msg='Failed: configure window x:{} got:{}'
                         .format(x, geo.x))
        

* Tue 13 May 2014 12:39:56 AM JST
mov
* Tue 13 May 2014 12:39:59 AM JST
move
* Tue 13 May 2014 12:55:02 AM JST
core
* Tue 13 May 2014 12:57:09 AM JST

* Tue 13 May 2014 12:57:09 AM JST

* Tue 13 May 2014 12:57:09 AM JST
        print(dir(self.connection))

* Tue 13 May 2014 12:59:07 AM JST
ConnectionA
* Tue 13 May 2014 12:59:12 AM JST
ConnectionAbstract
* Tue 13 May 2014 01:00:15 AM JST

* Tue 13 May 2014 01:00:15 AM JST

* Tue 13 May 2014 01:00:15 AM JST
        self.connection = connection

* Tue 13 May 2014 01:05:19 AM JST
self.
* Tue 13 May 2014 01:06:40 AM JST
pos
* Tue 13 May 2014 01:07:59 AM JST
        geo = CON2.core.GetGeometry(self.window).reply()
        reply = CON.core.TranslateCoordinates(
            self.window, CON.get_setup().roots[0].root, x, 0).reply()
        x = reply.dst_x - (2 * x)

* Tue 13 May 2014 01:08:05 AM JST

* Tue 13 May 2014 01:08:05 AM JST

* Tue 13 May 2014 01:08:06 AM JST
        geo = CON2.core.GetGeometry(self.window).reply()

* Tue 13 May 2014 01:18:13 AM JST
xproto.
* Tue 13 May 2014 01:18:13 AM JST
xcb2.xproto.
* Tue 13 May 2014 01:25:29 AM JST
format()
* Tue 13 May 2014 01:25:29 AM JST
TEXT'.format()
* Tue 13 May 2014 01:25:41 AM JST
LOG.debug(err)
* Tue 13 May 2014 01:27:45 AM JST
debug
* Tue 13 May 2014 01:28:26 AM JST
debug
* Tue 13 May 2014 01:29:50 AM JST
LOG.warn('Warning {}'.format(err))
* Tue 13 May 2014 01:31:53 AM JST
LOG.warn('Warning {}'.format(err))
* Tue 13 May 2014 01:32:00 AM JST
return WMCLASS()
* Tue 13 May 2014 02:47:50 AM JST
50331670
* Tue 13 May 2014 02:49:23 AM JST
WM_STATE
* Tue 13 May 2014 02:49:32 AM JST
c.core.GetProperty.WM_STATE(50331670).reply().get_valu
* Tue 13 May 2014 02:59:25 AM JST
class StackAbove(SubCoreMethodAbstract):
    r"""SUMMARY
    """

    def __init__(self, parent):
        r"""

        @Arguments:
        - `sender`:
        """
        SubCoreMethodAbstract.__init__(self, parent)

    def __call__(self, window):
        r"""SUMMARY

        __call__(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._parent(window, [StackMode.Above])

* Tue 13 May 2014 02:59:49 AM JST
Above
* Tue 13 May 2014 03:00:06 AM JST
class StackTopIf(SubCoreMethodAbstract):
    r"""SUMMARY
    """

    def __init__(self, parent):
        r"""

        @Arguments:
        - `sender`:
        """
        SubCoreMethodAbstract.__init__(self, parent)

    def __call__(self, window):
        r"""SUMMARY

        __call__(window)

        @Arguments:
        - `window`:

        @Return:
        """
        return self._parent(window, [StackMode.TopIf])

* Tue 13 May 2014 03:00:11 AM JST
TopIf
* Tue 13 May 2014 03:03:13 AM JST
    def test_resize_height(self, ):
        r""" test_resize_height
        """
        height = 240
        CON2.core.ConfigureWindow(
            self.window, ConfigWindow.Height, [height])
        CON2.flush()
        sleep(1) # wait resize
        geo = CON.core.GetGeometry(self.window).reply()
        self.assertEqual(geo.height, height,
                         msg='Failed: configure window height:{} got:{}'
                         .format(height, geo.height))

* Tue 13 May 2014 03:04:34 AM JST
Height
* Tue 13 May 2014 03:04:40 AM JST
height
* Tue 13 May 2014 03:05:38 AM JST
resize
* Tue 13 May 2014 03:05:42 AM JST
above
* Tue 13 May 2014 03:05:53 AM JST
GetGeometry
* Tue 13 May 2014 03:07:05 AM JST
c.core.GetProperty._NET_WM_STATE(50331670).reply().get_value()
* Tue 13 May 2014 03:07:20 AM JST
geo
* Tue 13 May 2014 03:07:48 AM JST

* Tue 13 May 2014 03:07:48 AM JST

* Tue 13 May 2014 03:07:48 AM JST
        atoms = 

* Tue 13 May 2014 03:08:27 AM JST
50331670
* Tue 13 May 2014 03:08:57 AM JST
'_NET_WM_STATE'
* Tue 13 May 2014 03:09:38 AM JST
wmstate
* Tue 13 May 2014 03:10:11 AM JST
50331670
* Tue 13 May 2014 03:11:34 AM JST
296
* Tue 13 May 2014 03:11:47 AM JST
atom
* Tue 13 May 2014 03:12:56 AM JST
50331670
* Tue 13 May 2014 03:13:04 AM JST
list(
* Tue 13 May 2014 03:13:37 AM JST
'_NET_WM_STATE'
* Tue 13 May 2014 03:16:09 AM JST
list(
* Tue 13 May 2014 03:18:50 AM JST
struct
* Tue 13 May 2014 03:18:50 AM JST
import struct
* Tue 13 May 2014 03:20:31 AM JST
_NET_WM_STATE
* Tue 13 May 2014 03:20:39 AM JST
False, 
* Tue 13 May 2014 03:21:07 AM JST
'_NET_WM_STATE'
* Tue 13 May 2014 03:21:24 AM JST


* Tue 13 May 2014 03:21:36 AM JST
CON.core.InternAtom(False, len('_NET_WM_STATE'),
                                              '_NET_WM_STATE')
* Tue 13 May 2014 03:21:49 AM JST
                                              
* Tue 13 May 2014 03:21:57 AM JST
XA_NET_WM_STATE
* Tue 13 May 2014 03:22:42 AM JST
struct.unpack('I', rep.value_len, rep.value.buf())
* Tue 13 May 2014 03:22:54 AM JST
struct.
* Tue 13 May 2014 03:23:49 AM JST
'_NET_WM_STATE_ABOVE'
* Tue 13 May 2014 03:24:30 AM JST
        XA_NET_WM_STATE_ABOVE = CON.core.InternAtom(
            False, len('_NET_WM_STATE_ABOVE'), '_NET_WM_STATE_ABOVE')

* Tue 13 May 2014 03:24:35 AM JST
        XA_NET_WM_STATE_ABOVE = CON.core.InternAtom(
            False, len('_NET_WM_STATE_ABOVE'), '_NET_WM_STATE_ABOVE')

* Tue 13 May 2014 03:28:20 AM JST
len('_NET_WM_STATE')
* Tue 13 May 2014 03:28:26 AM JST
'_NET_WM_STATE'
* Tue 13 May 2014 03:33:14 AM JST
list_properties
* Tue 13 May 2014 03:34:59 AM JST
73400320
* Tue 13 May 2014 03:35:50 AM JST

* Tue 13 May 2014 03:35:50 AM JST

* Tue 13 May 2014 03:35:50 AM JST
        height = 240

* Tue 13 May 2014 03:35:51 AM JST

* Tue 13 May 2014 03:35:51 AM JST

* Tue 13 May 2014 03:35:51 AM JST
        height = 240

* Tue 13 May 2014 03:38:19 AM JST
list_states
* Tue 13 May 2014 03:38:33 AM JST
c.root.client_list()[-1].list_states()
* Tue 13 May 2014 03:40:58 AM JST
_NET_ACTIVE_WINDOW
* Tue 13 May 2014 03:42:59 AM JST
CON.core.InternAtom(
            False, len('_NET_ACTIVE_WINDOW'), '_NET_ACTIVE_WINDOW').reply().atom
* Tue 13 May 2014 03:43:07 AM JST
_NET_ACTIVE_
* Tue 13 May 2014 03:43:08 AM JST
_NET_ACTIVE_
* Tue 13 May 2014 03:43:10 AM JST
            
* Tue 13 May 2014 03:48:04 AM JST
        # XA_NET_WM_STATE = CON.core.InternAtom(False, len('_NET_WM_STATE'),
        #                                       '_NET_WM_STATE').reply().atom
        # XA_ATOM = CON.core.InternAtom(False, len('ATOM'), 'ATOM').reply().atom
        # reply = CON.core.GetProperty(
        #     False, self.window, XA_NET_WM_STATE, XA_ATOM, 0, 100).reply()
        # atoms = unpack('I' * reply.value_len, reply.value.buf())
        # XA_NET_WM_STATE_ABOVE = CON.core.InternAtom(
        #     False, len('_NET_WM_STATE_ABOVE'), '_NET_WM_STATE_ABOVE').reply().atom
        # self.assertIn(XA_NET_WM_STATE_ABOVE, atoms,
        #               msg='Failed: stack above {} in {}'
        #               .format(XA_NET_WM_STATE_ABOVE, atoms))

* Tue 13 May 2014 03:48:45 AM JST
FocusIn
* Tue 13 May 2014 03:49:03 AM JST
SetInputFocus
* Tue 13 May 2014 11:42:31 AM JST
import 
* Tue 13 May 2014 11:42:55 AM JST
62914560
* Tue 13 May 2014 11:43:15 AM JST
11]: 
* Tue 13 May 2014 11:43:56 AM JST
62914560
* Tue 13 May 2014 11:44:08 AM JST
below
* Tue 13 May 2014 11:44:26 AM JST
buttom
* Tue 13 May 2014 11:44:40 AM JST
topif
* Tue 13 May 2014 11:49:00 AM JST
This request changes the conﬁguration of the window.
* Tue 13 May 2014 11:49:21 AM JST
62914560)
* Tue 13 May 2014 11:49:21 AM JST
above(62914560)
* Tue 13 May 2014 11:49:21 AM JST
stackmode.above(62914560)
* Tue 13 May 2014 12:21:08 PM JST
62914560
* Tue 13 May 2014 12:21:14 PM JST
xcb2.xproto.ConfigWindow.BorderWidth
* Tue 13 May 2014 12:50:41 PM JST
class ConfigWindow(_IntEnum):
    X           = 1
    Y           = 2
    Width       = 4
    Height      = 8
    BorderWidth = 16
    Sibling     = 32
    StackMode   = 64

* Tue 13 May 2014 12:51:03 PM JST
from struct import pack as _pack

from bitflag import BitFlagAbstract, BitFlag32

* Tue 13 May 2014 12:51:45 PM JST

* Tue 13 May 2014 12:51:45 PM JST

* Tue 13 May 2014 12:51:45 PM JST
        self._mask = mask

* Tue 13 May 2014 12:51:58 PM JST
return _pack('I', self.flags)
* Tue 13 May 2014 12:52:17 PM JST
self.flags.set1()
* Tue 13 May 2014 12:53:24 PM JST
    def set_x(self, ):
        r"""SUMMARY
        
        set_x()
        
        @Return:
        """
        self.flags.set1()

    def reset_x(self, ):
        r"""SUMMARY
        
        reset_x()
        
        @Return:
        """
        self.flags.reset1()

    def isx(self, ):
        r"""SUMMARY
        
        isx()
        
        @Return:
        """
        return self.flags.isflaged1()

* Tue 13 May 2014 12:54:55 PM JST
    def set_width(self, ):
        r"""SUMMARY
        
        set_x()
        
        @Return:
        """
        self.flags.set3()

    def reset_width(self, ):
        r"""SUMMARY
        
        reset_x()
        
        @Return:
        """
        self.flags.reset2()

    def iswidth(self, ):
        r"""SUMMARY
        
        isx()
        
        @Return:
        """
        return self.flags.isflaged3()

* Tue 13 May 2014 12:55:06 PM JST
height
* Tue 13 May 2014 12:55:39 PM JST
    def set_height(self, ):
        r"""SUMMARY
        
        set_x()
        
        @Return:
        """
        self.flags.set4()

    def reset_height(self, ):
        r"""SUMMARY
        
        reset_x()
        
        @Return:
        """
        self.flags.reset4()

    def isheight(self, ):
        r"""SUMMARY
        
        isx()
        
        @Return:
        """
        return self.flags.isflaged4()

* Tue 13 May 2014 12:55:49 PM JST
borderwidth
* Tue 13 May 2014 12:56:11 PM JST
    def set_borderwidth(self, ):
        r"""SUMMARY
        
        set_x()
        
        @Return:
        """
        self.flags.set5()

    def reset_borderwidth(self, ):
        r"""SUMMARY
        
        reset_x()
        
        @Return:
        """
        self.flags.reset5()

    def isborderwidth(self, ):
        r"""SUMMARY
        
        isx()
        
        @Return:
        """
        return self.flags.isflaged5()

* Tue 13 May 2014 12:56:22 PM JST
sibling
* Tue 13 May 2014 12:56:53 PM JST
    def set_sibling(self, ):
        r"""SUMMARY
        
        set_x()
        
        @Return:
        """
        self.flags.set6()

    def reset_sibling(self, ):
        r"""SUMMARY
        
        reset_x()
        
        @Return:
        """
        self.flags.reset6()

    def issibling(self, ):
        r"""SUMMARY
        
        isx()
        
        @Return:
        """
        return self.flags.isflaged6()

* Tue 13 May 2014 12:57:07 PM JST
stackmode
* Tue 13 May 2014 12:59:28 PM JST
BitConfigWindow
* Tue 13 May 2014 01:03:58 PM JST
BitConfigWindow
* Tue 13 May 2014 01:04:17 PM JST
result_
* Tue 13 May 2014 01:04:26 PM JST
mask
* Tue 13 May 2014 01:04:44 PM JST
result_
* Tue 13 May 2014 01:05:07 PM JST
ConfigWindow
* Tue 13 May 2014 01:05:53 PM JST
 # X, Y, Width, Height
* Tue 13 May 2014 01:07:26 PM JST
print 
* Tue 13 May 2014 01:07:38 PM JST
D 
* Tue 13 May 2014 01:09:15 PM JST

* Tue 13 May 2014 01:09:15 PM JST

* Tue 13 May 2014 01:09:15 PM JST
            # mask |= method

* Tue 13 May 2014 01:28:15 PM JST
ConfigWindow, 
* Tue 13 May 2014 01:58:12 PM JST
62914560
* Tue 13 May 2014 01:58:41 PM JST
y
* Tue 13 May 2014 01:58:45 PM JST
width
* Tue 13 May 2014 02:00:15 PM JST
import xcb2, xcb2.tests
c=xcb2.connect
* Tue 13 May 2014 02:00:21 PM JST
xcb2.tests
* Tue 13 May 2014 02:00:34 PM JST
39845888
* Tue 13 May 2014 03:11:42 PM JST
Super
* Tue 13 May 2014 03:12:58 PM JST
kwargs[EventDispatcher.event].event)
* Tue 13 May 2014 03:13:40 PM JST
import 
* Tue 13 May 2014 03:17:55 PM JST
ClickL
* Tue 13 May 2014 04:02:59 PM JST
FundamentalWindow
* Tue 13 May 2014 04:03:51 PM JST
core.
* Tue 13 May 2014 04:04:44 PM JST
DynamicWindow
* Tue 13 May 2014 04:12:52 PM JST
NamedButtonIndex.Left
* Tue 13 May 2014 04:13:39 PM JST
b.press()
* Tue 13 May 2014 04:13:39 PM JST
b.press()
* Tue 13 May 2014 04:13:39 PM JST
b.press()
* Tue 13 May 2014 04:13:39 PM JST
b.press()
* Tue 13 May 2014 04:13:39 PM JST
b.press()
* Tue 13 May 2014 04:16:01 PM JST
50331670
* Tue 13 May 2014 04:57:11 PM JST
False
* Tue 13 May 2014 05:00:44 PM JST
1500
* Tue 13 May 2014 05:01:01 PM JST
50331670
* Tue 13 May 2014 05:01:05 PM JST
50331670
* Tue 13 May 2014 05:01:42 PM JST
True
* Tue 13 May 2014 05:02:02 PM JST
50331670
* Tue 13 May 2014 05:02:17 PM JST
c.core.SendEvent.ButtonPress(False, 50331670, 1, 0, 0, 482, 482, 0, 0, 0, 200, 100, 0, 1)
* Tue 13 May 2014 05:02:49 PM JST
sendkeys.core.SendKeys2('{LButton}').sendkeys(50331670)
* Tue 13 May 2014 05:02:53 PM JST
50331670
* Tue 13 May 2014 05:03:18 PM JST
50331670
* Tue 13 May 2014 05:32:26 PM JST
50331670
* Tue 13 May 2014 05:32:32 PM JST
emacs=50331670
* Tue 13 May 2014 05:32:39 PM JST
482
* Tue 13 May 2014 05:33:43 PM JST
emacs, 0, 200,100
* Tue 13 May 2014 05:34:06 PM JST
emacs
* Tue 13 May 2014 05:36:11 PM JST
press
* Tue 13 May 2014 05:36:33 PM JST
release
* Tue 13 May 2014 05:37:16 PM JST
D 
* Tue 13 May 2014 05:39:11 PM JST
ButtonPress
* Tue 13 May 2014 05:41:11 PM JST
Key
* Tue 13 May 2014 05:47:15 PM JST
1 << 8
* Tue 13 May 2014 05:48:45 PM JST
50
* Tue 13 May 2014 05:49:59 PM JST
press
* Tue 13 May 2014 05:55:13 PM JST
get_analyze()
* Tue 13 May 2014 05:55:41 PM JST
t=
* Tue 13 May 2014 06:02:35 PM JST
emacs=50331670
* Tue 13 May 2014 06:02:47 PM JST
press
* Tue 13 May 2014 06:07:15 PM JST
press
* Tue 13 May 2014 06:29:56 PM JST

* Tue 13 May 2014 06:29:56 PM JST

* Tue 13 May 2014 06:29:58 PM JST
while :
* Tue 13 May 2014 06:31:43 PM JST
break
* Tue 13 May 2014 06:36:14 PM JST
Sle')
* Tue 13 May 2014 06:36:14 PM JST
filter_wmclass('Sle')
* Tue 13 May 2014 06:36:33 PM JST
Sleipnir.exe
* Tue 13 May 2014 06:37:20 PM JST
exe
* Tue 13 May 2014 06:37:21 PM JST
Sleipnir.exe
* Tue 13 May 2014 06:37:40 PM JST
c.root.client_list().filter_wmclass('aaaaaa')
* Tue 13 May 2014 06:37:47 PM JST
aaaaaa
* Tue 13 May 2014 06:39:33 PM JST
root.client_list().filter_wmclass('Sleipnir.exe')
* Tue 13 May 2014 06:40:07 PM JST
wait_sleipnir_window
* Tue 13 May 2014 06:40:43 PM JST
window
* Tue 13 May 2014 06:45:44 PM JST
c.root.client_list()
* Tue 13 May 2014 06:46:12 PM JST
FeedbackAgent.exe
* Tue 13 May 2014 06:47:30 PM JST
CON.root.client_list().filter_name('FeedbackAgent.exe')
* Tue 13 May 2014 06:47:47 PM JST
wmclass
* Tue 13 May 2014 06:47:48 PM JST
1].wmclass
* Tue 13 May 2014 06:47:50 PM JST
print 
* Tue 13 May 2014 06:47:57 PM JST
"FeedbackAgent.exe"
* Tue 13 May 2014 06:50:39 PM JST
81788931
* Tue 13 May 2014 06:52:06 PM JST
sendkeys.core.SendKeys2('!b').sendkeys(81788931)
* Tue 13 May 2014 06:52:11 PM JST
81788931
* Tue 13 May 2014 06:52:14 PM JST
79691779
* Tue 13 May 2014 06:53:22 PM JST
c.root.client_list().filter_wmclass("FeedbackAgent.exe")[0].focus();sleep(1);
* Tue 13 May 2014 06:54:20 PM JST
sendkeys.core.SendKeys2('!B').sendkeys()
* Tue 13 May 2014 06:56:09 PM JST
c.root.client_list().filter_wmclass("FeedbackAgent.exe")[0].focus();sleep(1);sendkeys.core.SendKeys2('!b').sendkeys()
* Tue 13 May 2014 06:56:38 PM JST
b.press(win, x, 
* Tue 13 May 2014 06:56:38 PM JST
    b.press(win, x, 
* Tue 13 May 2014 06:56:39 PM JST
    b.press(win, x, 
* Tue 13 May 2014 06:57:11 PM JST
79691779
* Tue 13 May 2014 06:59:08 PM JST
BUTTON
* Tue 13 May 2014 07:00:01 PM JST
79691779
* Tue 13 May 2014 07:01:11 PM JST
BUTTON
* Tue 13 May 2014 07:01:36 PM JST
            
* Tue 13 May 2014 07:01:38 PM JST
press
* Tue 13 May 2014 10:25:25 PM JST
        win = CON.root.client_list().filter_wmclass('FeedbackAgent.exe')[0]
            BUTTON.press(win, 10, 10)
            BUTTON.release(win, 10, 10)
            CON.flush()
            sendkeys.core.SendKeys2('!b').sendkeys(win)
    
* Tue 13 May 2014 10:25:30 PM JST
            win = CON.root.client_list().filter_wmclass('FeedbackAgent.exe')[0]
            BUTTON.press(win, 10, 10)
            BUTTON.release(win, 10, 10)
            CON.flush()
            sendkeys.core.SendKeys2('!b').sendkeys(win)

* Tue 13 May 2014 10:26:46 PM JST
from ref.CMD import icedove, sleipnir, thunar, sikuli
* Tue 13 May 2014 10:26:53 PM JST
sikuli
* Tue 13 May 2014 10:26:53 PM JST
thunar, sikuli
* Tue 13 May 2014 10:26:55 PM JST
icedove, 
* Tue 13 May 2014 10:27:04 PM JST
sleipnir.runmove()
* Tue 13 May 2014 10:31:20 PM JST
CON.root.client_list()
* Tue 13 May 2014 10:31:28 PM JST
winlis
* Tue 13 May 2014 10:41:16 PM JST
kill_feedback
* Tue 13 May 2014 10:41:25 PM JST

* Tue 13 May 2014 10:41:25 PM JST

* Tue 13 May 2014 10:41:25 PM JST
    print('Wait for sleipnir window')

* Tue 13 May 2014 10:42:56 PM JST
winlis = CON.root.client_list()
* Tue 13 May 2014 10:44:21 PM JST
.filter_wmclass('Sleipnir.exe')
* Tue 13 May 2014 10:44:22 PM JST

* Tue 13 May 2014 10:44:22 PM JST

* Tue 13 May 2014 10:44:22 PM JST
    winlis = winlis

* Tue 13 May 2014 10:44:53 PM JST
WindowDialogType
* Tue 13 May 2014 10:45:36 PM JST
wait_sleipnir_kill_feedback()
sleep(25)

* Tue 13 May 2014 10:48:31 PM JST
FeedBack
* Tue 13 May 2014 10:53:21 PM JST
winlis = CON.root.client_list()
* Tue 13 May 2014 10:53:31 PM JST
winlis = CON.root.client_list().filter_wmclass('Sleipnir.exe')
* Tue 13 May 2014 10:59:12 PM JST

* Tue 13 May 2014 10:59:12 PM JST

* Tue 13 May 2014 10:59:12 PM JST
    w.x = 

* Tue 13 May 2014 11:05:51 PM JST
format, 
* Tue 13 May 2014 11:05:54 PM JST
sequence_number, 
* Tue 13 May 2014 11:05:57 PM JST
            
* Tue 13 May 2014 11:08:22 PM JST
data
* Tue 13 May 2014 11:09:16 PM JST
getvalue
* Tue 13 May 2014 11:09:37 PM JST
import xcb2, xcb2.tests
c=xcb2.connect()

* Tue 13 May 2014 11:14:49 PM JST
center
* Tue 13 May 2014 11:16:08 PM JST
move_sleipnir
* Wed 14 May 2014 12:07:18 AM JST
self.data.pack()
* Wed 14 May 2014 12:08:51 AM JST
window, 
* Wed 14 May 2014 12:14:21 AM JST
time = Time.CurrentTime
* Wed 14 May 2014 12:17:57 AM JST
self.data.setdata0(self.time)
* Wed 14 May 2014 12:18:38 AM JST

* Wed 14 May 2014 12:18:38 AM JST

* Wed 14 May 2014 12:18:38 AM JST
        self.delete = Close(self._parent, self.data.copy())

* Wed 14 May 2014 12:21:19 AM JST
71303168
* Wed 14 May 2014 12:22:20 AM JST
import xcb2, xcb2.tests
c=xcb2.connect()

* Wed 14 May 2014 12:22:47 AM JST
71303168
* Wed 14 May 2014 12:27:41 AM JST
self.
* Wed 14 May 2014 12:35:28 AM JST
emacs=50331670
* Wed 14 May 2014 12:35:36 AM JST
emacs=
* Wed 14 May 2014 12:35:45 AM JST
D 
* Wed 14 May 2014 12:35:51 AM JST
root_x
* Wed 14 May 2014 12:37:50 AM JST
83886085
* Wed 14 May 2014 12:38:38 AM JST
83886083
* Wed 14 May 2014 12:38:57 AM JST
83886083
* Wed 14 May 2014 12:43:38 AM JST
winlis = CON.root.client_list().filter_wmclass('Sleipnir.exe')
* Wed 14 May 2014 12:43:45 AM JST
    if not winlis:
        raise StandardError()
    win = winlis[0]

* Wed 14 May 2014 12:43:50 AM JST
window
* Wed 14 May 2014 12:44:25 AM JST
win, 0, 75, 130
* Wed 14 May 2014 12:44:43 AM JST
click_sleipnir_refresh
* Wed 14 May 2014 12:48:35 AM JST
# wait dialog
* Wed 14 May 2014 12:52:41 AM JST

* Wed 14 May 2014 12:52:41 AM JST

* Wed 14 May 2014 12:52:41 AM JST
            print('window exists')

* Wed 14 May 2014 12:54:04 AM JST
    print('Wait Dialog Window.')
    for _ in range(10):
        sleep(1)
        winlis = CON.root.client_list().filter_wmclass('Sleipnir.exe')
        if winlis <= 1:
            continue
        for win in winlis:
            if isinstance(win, WindowDialogType):
                win.close()
                return

* Wed 14 May 2014 01:24:24 AM JST
from time import sleep
* Wed 14 May 2014 01:24:35 AM JST

* Wed 14 May 2014 01:24:35 AM JST

* Wed 14 May 2014 01:24:35 AM JST
import psutil

* Wed 14 May 2014 01:24:36 AM JST

* Wed 14 May 2014 01:24:36 AM JST

* Wed 14 May 2014 01:24:36 AM JST
import psutil

* Wed 14 May 2014 01:24:44 AM JST
import xcb2
import sendkeys

* Wed 14 May 2014 01:24:57 AM JST
from xcb2.window.windowtypes import WindowDialogType
* Wed 14 May 2014 01:25:15 AM JST
from xcb2.window.windowtypes import WindowDialogType
* Wed 14 May 2014 01:25:24 AM JST
windowtypes
* Wed 14 May 2014 01:25:38 AM JST
CON = xcb2.connect()
* Wed 14 May 2014 01:29:04 AM JST
con = xcb2.connect()
* Wed 14 May 2014 01:30:02 AM JST
BUTTON = sendkeys.ButtonCode(1)
* Wed 14 May 2014 01:30:26 AM JST
def destroy_sleipnir_feedback_dialog():
    r"""SUMMARY

    destroy_sleipnir_feedback_dialog()

    @Return:
    """
    print('try close feedback dialog')
    con = xcb2.connect()
    win = con.root.client_list().filter_wmclass('FeedbackAgent.exe')[0]
    button = sendkeys.ButtonCode(1)
    button.press(win, 10, 10) # focus into button
    button.release(win, 10, 10)
    con.flush()
    sendkeys.core.SendKeys2('!b').sendkeys(win)


def wait_kill_sleipnir_feedback():
    r"""SUMMARY

    wait_sleipnir_window()

    @Return:
    """
    print('** wait sleipnir window or destroy feedback dialog')
    con = xcb2.connect()
    for _ in range(60):
        sleep(1)
        winlis = con.root.client_list()
        if winlis.filter_wmclass('Sleipnir.exe'):
            return
        if winlis.filter_wmclass('FeedbackAgent.exe'):
            destroy_sleipnir_feedback_dialog()
    raise StandardError()


def wait_close_sleipnir_update_dialog():
    r"""SUMMARY

    wait_sleipnir_update_dialog()

    @Return:
    """
    print('Wait Dialog Window.')
    con = xcb2.connect()
    for _ in range(10):
        sleep(1)
        winlis = con.root.client_list().filter_wmclass('Sleipnir.exe')
        if winlis <= 1:
            continue
        for win in winlis:
            if isinstance(win, WindowDialogType):
                win.close()
                return


def wait_sleipnir_window():
    r"""SUMMARY

    wait_sleipnir_window()

    @Return:
    """
    print('* Wait for sleipnir window')
    wait_kill_sleipnir_feedback()
    wait_close_sleipnir_update_dialog()


def move_sleipnir():
    r"""SUMMARY

    move_sleipnir()

    @Return:
    """
    print('Move Sleipnir window.')
    con = xcb2.connect()
    winlis = con.root.client_list().filter_wmclass('Sleipnir.exe')
    if not winlis:
        raise StandardError()
    win = winlis[0]
    win.x, win.y = 1400, 100 # for my right windows
    win.move()
    win.setmaximize()
    con.flush()


def click_sleipnir_refresh():
    r"""SUMMARY

    click_sleipnir_refresh()

    @Return:
    """
    print('try click refresh button')
    con = xcb2.connect()
    winlis = con.root.client_list().filter_wmclass('Sleipnir.exe')
    if not winlis:
        raise StandardError()
    win = winlis[0]
    button = sendkeys.ButtonCode(xcb2.xproto.NamedButtonIndex.Left)
    button.press(win, 0, 75, 130)
    button.release(win, 0, 75, 130)
    con.flush()


* Wed 14 May 2014 01:31:11 AM JST
destroy_sleipnir_feedback_dialog
wait_kill_sleipnir_feedback
wait_close_sleipnir_update_dialog
wait_sleipnir_window
move_sleipnir
click_sleipnir_refresh

* Wed 14 May 2014 01:32:43 AM JST
        
* Wed 14 May 2014 01:32:49 AM JST
        
* Wed 14 May 2014 01:32:50 AM JST
                
* Wed 14 May 2014 01:54:07 AM JST
/usr/bin/beep -f 100 -l 700
* Wed 14 May 2014 01:58:02 AM JST

* Wed 14 May 2014 01:58:02 AM JST

* Wed 14 May 2014 01:58:02 AM JST
raise StandardError()

* Wed 14 May 2014 01:58:19 AM JST
def logging_handle_exceptions(excls, value, trcbck):
    r"""Handling exception hook.

    sys.excepthook = logging_handle_exceptions
    """
    import traceback
    if issubclass(excls, KeyboardInterrupt):
        _sys.__excepthook__(excls, value, trcbck)
        return
    errortype = 'Error type: {}'.format(excls)
    valuetxt = 'Uncaught exception: {0}'.format(str(value))
    trcbcktxt = ''.join(traceback.format_tb(trcbck))
    LOG.exception('\n'.join([errortype, valuetxt, trcbcktxt]))
    # for debug
    _os.system('modprobe pcspkr')
    _os.system('/usr/bin/beep-f 100 -l 700')
    _os.system('rmmod pcspkr')

_sys.excepthook = logging_handle_exceptions

* Wed 14 May 2014 01:59:01 AM JST
def logging_handle_exceptions(excls, value, trcbck):
    r"""Handling exception hook.

    sys.excepthook = logging_handle_exceptions
    """
    import traceback
    if issubclass(excls, KeyboardInterrupt):
        sys.__excepthook__(excls, value, trcbck)
        return
    errortype = 'Error type: {}'.format(excls)
    valuetxt = 'Uncaught exception: {0}'.format(str(value))
    trcbcktxt = ''.join(traceback.format_tb(trcbck))
    LOG.exception('\n'.join([errortype, valuetxt, trcbcktxt]))
    # for debug
    os.system('modprobe pcspkr')
    os.system('/usr/bin/beep-f 100 -l 700')
    os.system('rmmod pcspkr')
sys.excepthook = logging_handle_exceptions

* Wed 14 May 2014 02:00:07 AM JST

* Wed 14 May 2014 02:00:07 AM JST

* Wed 14 May 2014 02:00:07 AM JST
raise StandardError()

* Wed 14 May 2014 02:05:10 AM JST
resend
* Wed 14 May 2014 02:13:13 AM JST
from xahk.logger import LOG
* Wed 14 May 2014 02:13:15 AM JST
import 
* Wed 14 May 2014 02:14:07 AM JST
logging.INFO
* Wed 14 May 2014 02:15:22 AM JST
LOG.setLevel(logging.INFO)
* Wed 14 May 2014 02:16:19 AM JST
LOG.info('Set Log Level debug to info')
* Wed 14 May 2014 02:16:21 AM JST
debug
* Wed 14 May 2014 02:16:23 AM JST
info
* Wed 14 May 2014 02:16:30 AM JST
LOG.
* Wed 14 May 2014 02:16:32 AM JST
LOG.setLevel(logging.INFO)
* Wed 14 May 2014 02:16:34 AM JST
INFO
* Wed 14 May 2014 02:16:42 AM JST
toggle_loglevel
* Wed 14 May 2014 02:17:22 AM JST

* Wed 14 May 2014 02:17:23 AM JST

* Wed 14 May 2014 02:17:23 AM JST
         '^{F1}': setdebuglevel,

* Wed 14 May 2014 02:17:58 AM JST

* Wed 14 May 2014 02:17:58 AM JST

* Wed 14 May 2014 02:17:58 AM JST
         # '^{F1}': setdebuglevel,

* Wed 14 May 2014 02:17:58 AM JST
         # '^{F1}': setdebuglevel,

* Wed 14 May 2014 02:17:58 AM JST
         # '^{F1}': setdebuglevel,
         # '+{F1}': setinfolevel,

* Wed 14 May 2014 02:20:30 AM JST
(py:at-string|comment-p)
* Wed 14 May 2014 02:22:23 AM JST
((py:at-string|comment-p) (self-insert-command n))
* Wed 14 May 2014 02:22:34 AM JST
((py:at-string|comment-p) (self-insert-command n))
* Wed 14 May 2014 02:25:20 AM JST
(defun py:* (n) ;[2014/02/25]
  "N"
  (interactive "p")
  (cond ((py:at-string|comment-p) (self-insert-command n))
        ((py:in-parameter-p) (self-insert-command n))
        (t (smart-operator-*)))
  )


* Wed 14 May 2014 02:26:15 AM JST
Do `self-insert-command' if at string or comment.
* Wed 14 May 2014 02:26:39 AM JST
    
* Wed 14 May 2014 02:29:07 AM JST
(kbd "C-7")
* Wed 14 May 2014 02:30:30 AM JST
py:*
* Wed 14 May 2014 02:30:57 AM JST
py-*
* Wed 14 May 2014 02:31:52 AM JST
  
* Wed 14 May 2014 02:33:07 AM JST
Wrap smart-operator.
* Wed 14 May 2014 02:34:16 AM JST
smart
* Wed 14 May 2014 02:34:19 AM JST
smart-operator_plugin_start.el
* Wed 14 May 2014 02:34:25 AM JST
;must bind in smart-operator_plugin_start.el
* Wed 14 May 2014 02:35:32 AM JST
;must bind in smart-operator_plugin_start.el
* Wed 14 May 2014 02:35:48 AM JST
;must bind in smart-operator_plugin_start.el
* Wed 14 May 2014 02:37:01 AM JST
buffer-read-only
* Wed 14 May 2014 02:37:19 AM JST
(my-forward-seq)
* Wed 14 May 2014 02:37:33 AM JST
print('Run   
* Wed 14 May 2014 02:38:38 AM JST
smart-operator--
* Wed 14 May 2014 02:41:41 AM JST
'+{Escape}': quit,
* Wed 14 May 2014 02:41:42 AM JST
         
* Wed 14 May 2014 02:44:57 AM JST
__init__?
* Wed 14 May 2014 02:47:29 AM JST
    def __init__(self, reason=None):
        self.reson = reason or ''

    def __str__(self, ):
        return '{0.__class__.__name__}!! {0.reason}'.format(self)


* Wed 14 May 2014 02:47:37 AM JST
XAHKException
* Wed 14 May 2014 02:48:23 AM JST
KeyPress
* Wed 14 May 2014 02:49:17 AM JST

* Wed 14 May 2014 02:49:27 AM JST

* Wed 14 May 2014 02:50:01 AM JST

* Wed 14 May 2014 02:51:44 AM JST

* Wed 14 May 2014 02:51:44 AM JST

* Wed 14 May 2014 02:51:44 AM JST
    LOG.info(err)

* Wed 14 May 2014 02:51:51 AM JST

* Wed 14 May 2014 02:51:51 AM JST

* Wed 14 May 2014 02:51:51 AM JST
    # LOG.info('XAHK2StopWaitForEvent!!')

* Wed 14 May 2014 02:51:52 AM JST

* Wed 14 May 2014 02:51:52 AM JST

* Wed 14 May 2014 02:51:52 AM JST
            # LOG.info('XAHKReloading!!')

* Wed 14 May 2014 03:02:28 AM JST
TokenType
* Wed 14 May 2014 03:03:21 AM JST

* Wed 14 May 2014 03:07:35 AM JST
button
* Wed 14 May 2014 03:07:45 AM JST
self._buttonflag
* Wed 14 May 2014 03:08:27 AM JST
Token
* Wed 14 May 2014 03:09:06 AM JST
TokenAbstract
* Wed 14 May 2014 03:10:28 AM JST
class TokenGeoX(TokenAbstract):
    r"""SUMMARY
    """
    types = TokenType.GEOX
    
    def get(self, ):
        r"""SUMMARY
        
        get()
        
        @Return:
        """
        return int(self.token)


* Wed 14 May 2014 03:12:03 AM JST
False
* Wed 14 May 2014 03:12:06 AM JST
True
* Wed 14 May 2014 03:13:37 AM JST
return stoken.TokenGeoX(token, self.display)
* Wed 14 May 2014 03:13:43 AM JST

* Wed 14 May 2014 03:13:43 AM JST

* Wed 14 May 2014 03:13:43 AM JST
                # TODO: (Atami) [2014/05/14]

* Wed 14 May 2014 03:13:48 AM JST
self._buttonflag == 1
* Wed 14 May 2014 03:36:17 AM JST
tes(**d, 'hello')
* Wed 14 May 2014 03:40:02 AM JST
_Int
* Wed 14 May 2014 03:40:05 AM JST
Int
* Wed 14 May 2014 03:40:07 AM JST
 as _IntEnum
* Wed 14 May 2014 03:40:54 AM JST
GeoFlag.X
* Wed 14 May 2014 03:41:18 AM JST
self._buttonflag = GeoFlag.NONE
* Wed 14 May 2014 03:45:39 AM JST
            elif TokenType.GEOX == token.types:
                self._kwargs['event_x'] = token.get()

* Wed 14 May 2014 03:46:28 AM JST
{'event_x': int(self.token),}
* Wed 14 May 2014 03:46:50 AM JST
TokenType.GEOX
* Wed 14 May 2014 03:46:57 AM JST

* Wed 14 May 2014 03:46:57 AM JST

* Wed 14 May 2014 03:46:58 AM JST
            elif TokenType.GEOX == token.types:

* Wed 14 May 2014 03:46:59 AM JST

* Wed 14 May 2014 03:46:59 AM JST

* Wed 14 May 2014 03:46:59 AM JST
            elif TokenType.GEOY == token.types:

* Wed 14 May 2014 03:47:16 AM JST

* Wed 14 May 2014 03:47:16 AM JST

* Wed 14 May 2014 03:47:16 AM JST
                self._kwargs['event_x'] = token.get()

* Wed 14 May 2014 03:47:16 AM JST
                self._kwargs['event_x'] = token.get()

* Wed 14 May 2014 03:47:16 AM JST
                self._kwargs['event_x'] = token.get()
                self._kwargs['event_y'] = token.get()

* Wed 14 May 2014 03:50:33 AM JST
import sendkeys
sendkeys.core.SendKeys2('{LClick 10 20}')
sendkeys.core.SendKeys2('{LClick 10 20}').get_analyze()

* Wed 14 May 2014 03:50:36 AM JST
sendkeys.core.SendKeys2('{LClick 10 20}')
sendkeys.core.SendKeys2('{LClick 10 20}').get_analyze()
list(sendkeys.core.SendKeys2('{LClick 10 20}').get_analyze())

* Wed 14 May 2014 03:51:53 AM JST
exp
* Wed 14 May 2014 03:52:09 AM JST
**exp.kwargs
* Wed 14 May 2014 03:52:29 AM JST
import sendkeys
* Wed 14 May 2014 03:52:34 AM JST
list(sendkeys.core.SendKeys2('{LClick 10 20}').get_analyze())
* Wed 14 May 2014 03:52:44 AM JST
import sendkeys
list(sendkeys.core.SendKeys2('{LClick 10 20}').get_analyze())

* Wed 14 May 2014 03:53:48 AM JST
import sendkeys
* Wed 14 May 2014 03:55:29 AM JST
list(sendkeys.core.SendKeys2('{LClick 10}').get_analyze())
* Wed 14 May 2014 03:55:48 AM JST
LClick
* Wed 14 May 2014 03:59:58 AM JST
import sendkeys
list(sendkeys.core.SendKeys2('{LClick 10 20}').get_analyze())

* Wed 14 May 2014 04:00:16 AM JST

* Wed 14 May 2014 04:00:16 AM JST

* Wed 14 May 2014 04:00:21 AM JST

* Wed 14 May 2014 04:00:21 AM JST

* Wed 14 May 2014 04:00:21 AM JST
                print(string)

* Wed 14 May 2014 04:00:27 AM JST

* Wed 14 May 2014 04:00:27 AM JST

* Wed 14 May 2014 04:00:27 AM JST
                print('DEBUG-1-tokenize.py')

* Wed 14 May 2014 04:00:31 AM JST

* Wed 14 May 2014 04:00:31 AM JST

* Wed 14 May 2014 04:00:32 AM JST
                print('DEBUG-2-tokenize.py')

* Wed 14 May 2014 04:01:25 AM JST
list(sendkeys.core.SendKeys2('{LClick 10 20}').get_analyze())
* Wed 14 May 2014 04:01:33 AM JST
list(
* Wed 14 May 2014 04:03:40 AM JST
token.get()
* Wed 14 May 2014 04:03:55 AM JST
import sendkeys
* Wed 14 May 2014 04:03:58 AM JST
list(sendkeys.core.SendKeys2('{LClick 10 20}').get_analyze())
* Wed 14 May 2014 04:06:35 AM JST
kwargs = {}
* Wed 14 May 2014 04:06:46 AM JST
_
* Wed 14 May 2014 04:06:46 AM JST
self._
* Wed 14 May 2014 04:06:51 AM JST
_
* Wed 14 May 2014 04:06:51 AM JST
self._
* Wed 14 May 2014 04:06:53 AM JST

* Wed 14 May 2014 04:06:53 AM JST

* Wed 14 May 2014 04:06:53 AM JST
        self._kwargs.clear()

* Wed 14 May 2014 04:07:05 AM JST
import sendkeys
* Wed 14 May 2014 04:07:11 AM JST
list(sendkeys.core.SendKeys2('{LClick 10 20}').get_analyze())
* Wed 14 May 2014 04:07:27 AM JST

* Wed 14 May 2014 04:07:27 AM JST

* Wed 14 May 2014 04:07:27 AM JST
                print(token.get())

* Wed 14 May 2014 04:09:46 AM JST
import sendkeys
* Wed 14 May 2014 04:09:50 AM JST
list(sendkeys.core.SendKeys2('{LClick 10 20}').get_analyze())
* Wed 14 May 2014 04:10:01 AM JST
sendkeys.core.SendKeys2('{LClick 10 20}')
* Wed 14 May 2014 04:12:11 AM JST
50331670
* Wed 14 May 2014 04:27:24 AM JST
sendkeys.core.SendKeys2('!b').sendkeys(win)
* Wed 14 May 2014 04:28:17 AM JST
75, 130
* Wed 14 May 2014 04:44:25 AM JST
**exp.kwargs
* Wed 14 May 2014 04:45:24 AM JST

* Wed 14 May 2014 04:45:25 AM JST

* Wed 14 May 2014 04:45:25 AM JST
    sleep(3)

* Wed 14 May 2014 04:46:26 AM JST

* Wed 14 May 2014 04:46:26 AM JST

* Wed 14 May 2014 04:46:26 AM JST
    # button = sendkeys.ButtonCode(xcb2.xproto.NamedButtonIndex.Left)

* Wed 14 May 2014 04:46:26 AM JST
    # button = sendkeys.ButtonCode(xcb2.xproto.NamedButtonIndex.Left)

* Wed 14 May 2014 04:46:26 AM JST
    # button = sendkeys.ButtonCode(xcb2.xproto.NamedButtonIndex.Left)
    # button.press(win, 0, 75, 130)

* Wed 14 May 2014 04:46:26 AM JST
    # button = sendkeys.ButtonCode(xcb2.xproto.NamedButtonIndex.Left)
    # button.press(win, 0, 75, 130)

* Wed 14 May 2014 04:46:26 AM JST
    # button = sendkeys.ButtonCode(xcb2.xproto.NamedButtonIndex.Left)
    # button.press(win, 0, 75, 130)
    # button.release(win, 0, 75, 130)

* Wed 14 May 2014 04:46:27 AM JST

* Wed 14 May 2014 04:46:27 AM JST

* Wed 14 May 2014 04:46:28 AM JST
    con.flush()

* Wed 14 May 2014 04:46:38 AM JST

* Wed 14 May 2014 04:46:38 AM JST

* Wed 14 May 2014 04:46:38 AM JST
    # button = sendkeys.ButtonCode(1)

* Wed 14 May 2014 04:46:39 AM JST
    # button = sendkeys.ButtonCode(1)

* Wed 14 May 2014 04:46:39 AM JST
    # button = sendkeys.ButtonCode(1)
    # button.press(win, 10, 10) # focus into button

* Wed 14 May 2014 04:46:39 AM JST
    # button = sendkeys.ButtonCode(1)
    # button.press(win, 10, 10) # focus into button

* Wed 14 May 2014 04:46:39 AM JST
    # button = sendkeys.ButtonCode(1)
    # button.press(win, 10, 10) # focus into button
    # button.release(win, 10, 10)

* Wed 14 May 2014 02:42:58 PM JST

* Wed 14 May 2014 02:42:58 PM JST

* Wed 14 May 2014 02:42:58 PM JST


* Wed 14 May 2014 02:42:59 PM JST

* Wed 14 May 2014 02:42:59 PM JST

* Wed 14 May 2014 02:42:59 PM JST
__all__ = [ 'FORMATS', 'CMDS', 'APART_NAMES', 'Aquos']

* Wed 14 May 2014 02:44:00 PM JST

* Wed 14 May 2014 02:44:00 PM JST

* Wed 14 May 2014 02:44:00 PM JST


* Wed 14 May 2014 02:44:07 PM JST

* Wed 14 May 2014 02:44:07 PM JST

* Wed 14 May 2014 02:44:07 PM JST
import sys as _sys

* Wed 14 May 2014 02:44:10 PM JST

* Wed 14 May 2014 02:44:10 PM JST

* Wed 14 May 2014 02:44:10 PM JST
import abc

* Wed 14 May 2014 02:44:31 PM JST

* Wed 14 May 2014 02:44:31 PM JST

* Wed 14 May 2014 02:44:31 PM JST


* Wed 14 May 2014 02:44:52 PM JST

* Wed 14 May 2014 02:44:52 PM JST

* Wed 14 May 2014 02:44:53 PM JST
$Revision: 87 $

* Wed 14 May 2014 02:45:08 PM JST

* Wed 14 May 2014 02:45:08 PM JST

* Wed 14 May 2014 02:45:08 PM JST


* Wed 14 May 2014 02:54:38 PM JST
~/.pylib/aquos/
* Wed 14 May 2014 02:57:11 PM JST
from ref.CMD import thunar
* Wed 14 May 2014 02:57:33 PM JST
from ref import recipe
* Wed 14 May 2014 02:57:41 PM JST
recipe.Recipe()
* Wed 14 May 2014 02:58:06 PM JST
next_recipedir
* Wed 14 May 2014 03:00:31 PM JST
recipe_latest_path
* Wed 14 May 2014 03:04:09 PM JST

* Wed 14 May 2014 03:04:09 PM JST

* Wed 14 May 2014 03:04:09 PM JST
        # env = os.environ.copy()

* Wed 14 May 2014 03:04:09 PM JST
        # env = os.environ.copy()

* Wed 14 May 2014 03:04:09 PM JST
        # env = os.environ.copy()
        # env['DISPLAY'] = ':0'

* Wed 14 May 2014 03:04:34 PM JST

* Wed 14 May 2014 03:04:34 PM JST

* Wed 14 May 2014 03:04:34 PM JST
        # subprocess.call((thunar.BINPATH, recipe_latest_path))

* Wed 14 May 2014 03:04:36 PM JST

* Wed 14 May 2014 03:04:36 PM JST

* Wed 14 May 2014 03:04:36 PM JST
    # parser.print_usage()

* Wed 14 May 2014 03:06:51 PM JST
/usr/bin/python /root/.zsh/scripts/recipe.py
* Wed 14 May 2014 03:07:42 PM JST
/usr/bin/python /root/.zsh/scripts/recipe.py
* Wed 14 May 2014 03:07:50 PM JST

* Wed 14 May 2014 03:07:50 PM JST

* Wed 14 May 2014 03:07:50 PM JST
return 0

* Wed 14 May 2014 03:12:46 PM JST
/root/.pylib
* Wed 14 May 2014 03:13:14 PM JST

* Wed 14 May 2014 03:13:14 PM JST

* Wed 14 May 2014 03:13:14 PM JST
    # sleep(30)

* Wed 14 May 2014 03:13:30 PM JST

* Wed 14 May 2014 03:13:30 PM JST

* Wed 14 May 2014 03:13:30 PM JST
from time import sleep

* Wed 14 May 2014 03:13:40 PM JST
import logging
from logging.handlers import RotatingFileHandler

* Wed 14 May 2014 03:13:48 PM JST
from ref import recipe
from ref.CMD import thunar

* Wed 14 May 2014 03:14:46 PM JST
recipe.Recipe().todaydir
* Wed 14 May 2014 03:14:52 PM JST
todaydir
* Wed 14 May 2014 03:15:06 PM JST
thunar.openthunar(recipe_latest_path)
* Wed 14 May 2014 03:15:08 PM JST
recipe_latest_path
* Wed 14 May 2014 06:00:55 PM JST
50331670
* Wed 14 May 2014 06:01:02 PM JST
50331670)
* Wed 14 May 2014 06:02:20 PM JST
sendkeys
* Wed 14 May 2014 06:06:01 PM JST
50331670
* Wed 14 May 2014 06:06:24 PM JST
50331670
* Wed 14 May 2014 06:07:30 PM JST
core.
* Wed 14 May 2014 06:08:31 PM JST
core.
* Wed 14 May 2014 06:08:33 PM JST
core.
* Wed 14 May 2014 06:09:11 PM JST
50331670
* Wed 14 May 2014 06:10:56 PM JST
sendkeys.SendKeys('{LClick 10 10}').sendkeys(win)
* Wed 14 May 2014 06:11:04 PM JST
50331670
* Wed 14 May 2014 06:15:20 PM JST
sendkeys.SendKeys('{LClick 20 20}').sendkeys(50331670)
* Wed 14 May 2014 06:16:04 PM JST
print 
* Wed 14 May 2014 06:16:08 PM JST
56623150
* Wed 14 May 2014 06:17:49 PM JST
56623150
* Wed 14 May 2014 06:20:41 PM JST
win=
* Wed 14 May 2014 06:21:08 PM JST
50331670
* Wed 14 May 2014 06:21:55 PM JST
sendkeys.SendKeys('{LClick 10 20}').sendkeys(50331670)
* Wed 14 May 2014 06:26:24 PM JST
50331670
* Wed 14 May 2014 06:28:50 PM JST
50331670
* Wed 14 May 2014 06:33:53 PM JST
(50331670)
* Wed 14 May 2014 06:34:18 PM JST
50331670
* Wed 14 May 2014 06:43:28 PM JST
(50331670)
* Wed 14 May 2014 06:43:59 PM JST
press
* Wed 14 May 2014 06:44:15 PM JST
release
* Wed 14 May 2014 06:58:28 PM JST
sendkeys.SendKeys('a')
* Wed 14 May 2014 11:49:05 PM JST

* Wed 14 May 2014 11:49:05 PM JST

* Wed 14 May 2014 11:49:05 PM JST
# from sendkeys.core import SendKeys2

* Wed 14 May 2014 11:49:16 PM JST
Display
* Wed 14 May 2014 11:49:18 PM JST

* Wed 14 May 2014 11:49:18 PM JST

* Wed 14 May 2014 11:49:18 PM JST
from xcb2 import Display

* Wed 14 May 2014 11:49:34 PM JST
remap
* Wed 14 May 2014 11:49:37 PM JST

* Wed 14 May 2014 11:49:37 PM JST

* Wed 14 May 2014 11:49:37 PM JST
from xahk import 

* Thu 15 May 2014 12:02:20 AM JST
from t1.listutil.limitlist import ListFill
* Thu 15 May 2014 12:06:42 AM JST
List
* Thu 15 May 2014 12:06:58 AM JST
Lis
* Thu 15 May 2014 12:09:10 AM JST
LimitList._fill to LimitList.fill,
* Thu 15 May 2014 12:09:17 AM JST
_fill
* Thu 15 May 2014 12:09:21 AM JST
fill
* Thu 15 May 2014 12:11:30 AM JST
from t1.listutil.limitlist import ListFill
* Thu 15 May 2014 12:11:34 AM JST
l= ListFill(length=4, fill=' ')
* Thu 15 May 2014 12:11:43 AM JST
from t1.listutil.limitlist import ListFill
l= ListFill(length=4, fill=' ')
* Thu 15 May 2014 12:38:46 AM JST
ListFill(length=4, fill=' ')
* Thu 15 May 2014 12:47:02 AM JST
kwargs[EventDispatcher.event].event
* Thu 15 May 2014 12:47:35 AM JST
open_as_secret
* Thu 15 May 2014 12:49:17 AM JST
SendKeys('^e^c^+t^v{Enter}')
* Thu 15 May 2014 12:50:24 AM JST
enter
* Thu 15 May 2014 12:55:09 AM JST
self.delay
* Thu 15 May 2014 12:56:00 AM JST
self.connection.flush()
* Thu 15 May 2014 12:57:21 AM JST
delay=0, 
* Thu 15 May 2014 12:59:54 AM JST
SendKeys('^{Tab}')
* Thu 15 May 2014 01:00:20 AM JST
.sendkeys(
        window=kwargs[EventDispatcher.this].connection.root.get_active_window())
* Thu 15 May 2014 01:00:32 AM JST
        
* Thu 15 May 2014 01:01:07 AM JST
class SendControlTab(object):
    r"""SUMMARY
    """

    def __init__(self, ):
        r"""
        """
        self.sendkeys = SendKeys('^{Tab}')

    def __call__(self, *args, **kwargs):
        r"""SUMMARY

        __call__(*args, **kwargs)

        @Arguments:
        - `args`:
        - `kwargs`:

        @Return:
        """
        self.sendkeys(window=kwargs[EventDispatcher.this]
                      .connection.root.get_active_window())

* Thu 15 May 2014 01:01:35 AM JST
SendControlTab
* Thu 15 May 2014 01:02:01 AM JST
    
* Thu 15 May 2014 01:02:19 AM JST

* Thu 15 May 2014 01:06:43 AM JST
^v{Return}
* Thu 15 May 2014 01:07:59 AM JST
kwargs[EventDispatcher.event]
* Thu 15 May 2014 01:08:01 AM JST
event
* Thu 15 May 2014 01:08:46 AM JST
'Google-chrome'
* Thu 15 May 2014 01:09:21 AM JST
(kwargs[EventDispatcher.this].connection
              .root.client_list().filter_wmclass('Google-chrome'))
* Thu 15 May 2014 01:11:55 AM JST
.connect()
* Thu 15 May 2014 01:26:17 AM JST
            
* Thu 15 May 2014 01:30:43 AM JST
    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.id == other.id
        return self.id == other

* Thu 15 May 2014 01:30:51 AM JST
id
* Thu 15 May 2014 01:30:53 AM JST
id
* Thu 15 May 2014 01:31:02 AM JST
id
* Thu 15 May 2014 01:31:03 AM JST
self.id
* Thu 15 May 2014 01:31:35 AM JST

* Thu 15 May 2014 01:31:35 AM JST

* Thu 15 May 2014 01:31:35 AM JST
            print('DEBUG-1-corewindow.py')

* Thu 15 May 2014 01:31:36 AM JST

* Thu 15 May 2014 01:31:36 AM JST

* Thu 15 May 2014 01:31:36 AM JST
        return cmp(self.id, other)

* Thu 15 May 2014 01:31:37 AM JST

* Thu 15 May 2014 01:31:37 AM JST

* Thu 15 May 2014 01:31:37 AM JST
        print('DEBUG-2-corewindow.py')

* Thu 15 May 2014 01:33:41 AM JST

* Thu 15 May 2014 01:33:41 AM JST

* Thu 15 May 2014 01:33:41 AM JST
    def

* Thu 15 May 2014 01:37:25 AM JST
len(w2)
* Thu 15 May 2014 01:38:07 AM JST

* Thu 15 May 2014 01:38:07 AM JST

* Thu 15 May 2014 01:38:07 AM JST
    # TODO: (Atami) [2014/05/15]

* Thu 15 May 2014 01:39:17 AM JST
other
* Thu 15 May 2014 01:41:08 AM JST
winlis < 
* Thu 15 May 2014 01:44:04 AM JST
if winlis2 - winlis:
* Thu 15 May 2014 01:44:30 AM JST
winlis2 - winlis
* Thu 15 May 2014 01:45:31 AM JST

* Thu 15 May 2014 01:45:31 AM JST

* Thu 15 May 2014 01:45:31 AM JST
    sleep(0.3)

* Thu 15 May 2014 02:39:42 AM JST
c.root.client_list()
* Thu 15 May 2014 02:40:59 AM JST
return 
* Thu 15 May 2014 03:09:15 AM JST
Display
* Thu 15 May 2014 03:09:28 AM JST
display
* Thu 15 May 2014 03:14:22 AM JST
    def __add__(self, other):
        return self.__class__(set(list(self) + list(other)))

* Thu 15 May 2014 03:23:28 AM JST

* Thu 15 May 2014 03:23:28 AM JST

* Thu 15 May 2014 03:23:28 AM JST
from xcb2.xproto.xconnection import Connection

* Thu 15 May 2014 03:23:41 AM JST

* Thu 15 May 2014 03:23:41 AM JST

* Thu 15 May 2014 03:23:41 AM JST
        from xcb2.xproto.xconnection import Connection

* Thu 15 May 2014 03:23:55 AM JST

* Thu 15 May 2014 03:23:55 AM JST

* Thu 15 May 2014 03:23:55 AM JST
# TODO: (Atami) [2014/05/15]

* Thu 15 May 2014 03:23:59 AM JST

* Thu 15 May 2014 03:23:59 AM JST

* Thu 15 May 2014 03:23:59 AM JST
# KLUDGE: (Atami) [2014/05/15]

* Thu 15 May 2014 03:24:14 AM JST
        # KLUDGE: (Atami) [2014/05/15]
        from xcb2.xproto.xconnection import Connection

* Thu 15 May 2014 03:27:01 AM JST
display=self.connection.display
* Thu 15 May 2014 03:27:12 AM JST
display=self.connection.display
* Thu 15 May 2014 03:28:13 AM JST
Type
* Thu 15 May 2014 03:28:23 AM JST
xcb2
* Thu 15 May 2014 03:28:28 AM JST

* Thu 15 May 2014 03:28:28 AM JST

* Thu 15 May 2014 03:28:28 AM JST


* Thu 15 May 2014 03:48:19 AM JST
* wmclass
type: string


* Thu 15 May 2014 03:48:46 AM JST
wm
* Thu 15 May 2014 04:06:06 AM JST
* geometry
type: dict

** geometry coordinate
type: dict
- translate coordinate

*** geometry x
type: int 
- pack
          
*** geometry y
type: int
- pack

** geometry square
type: dict

*** geometry width
type: int
- pack

*** geometry height
type: int
- pack


* Thu 15 May 2014 04:07:31 AM JST
_NET_WM_NAME
* Thu 15 May 2014 04:09:37 AM JST

* Thu 15 May 2014 04:09:37 AM JST
# 
* Thu 15 May 2014 04:09:38 AM JST
# 

* Thu 15 May 2014 03:10:37 PM JST
- translate coodinate      
* Thu 15 May 2014 03:23:14 PM JST
xproto
* Thu 15 May 2014 03:23:59 PM JST
ChangeWindowAttributes
* Thu 15 May 2014 03:27:45 PM JST
67108864
* Thu 15 May 2014 03:28:04 PM JST
c.core.ChangeWindowAttributes(67108864, xcb2.xproto.CW)
* Thu 15 May 2014 03:37:56 PM JST
int, list
* Thu 15 May 2014 03:38:20 PM JST
int
* Thu 15 May 2014 03:38:22 PM JST
int
* Thu 15 May 2014 03:38:28 PM JST
list
* Thu 15 May 2014 03:40:42 PM JST
Contifure
* Thu 15 May 2014 03:42:11 PM JST
Change
* Thu 15 May 2014 04:52:34 PM JST
xcb2.xproto.GrabMode.Async
* Thu 15 May 2014 04:55:31 PM JST
kwargs[EventDispatcher.this].connection
* Thu 15 May 2014 04:56:06 PM JST
xproto.GrabMode.Async
* Thu 15 May 2014 04:56:45 PM JST

* Thu 15 May 2014 04:56:46 PM JST

* Thu 15 May 2014 04:56:46 PM JST
    con = 

* Thu 15 May 2014 04:56:49 PM JST
con = kwargs[EventDispatcher.this].connection
* Thu 15 May 2014 04:57:24 PM JST
childlock
* Thu 15 May 2014 05:00:59 PM JST
xcb2.xproto.GrabMode
* Thu 15 May 2014 05:06:54 PM JST
change
* Thu 15 May 2014 05:13:52 PM JST
0
* Thu 15 May 2014 05:16:05 PM JST
_sbp.Popen(['xfrun4'])
* Thu 15 May 2014 05:19:27 PM JST
LASTTIME - current
* Thu 15 May 2014 05:20:03 PM JST
current
* Thu 15 May 2014 05:20:06 PM JST
current
* Thu 15 May 2014 05:20:07 PM JST
LASTTIME - current
* Thu 15 May 2014 05:20:14 PM JST

* Thu 15 May 2014 05:20:14 PM JST

* Thu 15 May 2014 05:20:14 PM JST
        print(LASTTIME - current)

* Thu 15 May 2014 05:22:32 PM JST
kwargs[EventDispatcher.this].connection.root
* Thu 15 May 2014 05:23:44 PM JST
(kwargs[EventDispatcher.this].connection
            .root.client_list().filter_wmclass('Xfrun4'))
* Thu 15 May 2014 05:24:00 PM JST
xfrun4s
* Thu 15 May 2014 05:24:15 PM JST
xfrun4s
* Thu 15 May 2014 05:38:51 PM JST

* Thu 15 May 2014 05:38:51 PM JST

* Thu 15 May 2014 05:38:51 PM JST
    # send_shift_control_tab,

* Thu 15 May 2014 05:38:52 PM JST

* Thu 15 May 2014 05:38:52 PM JST

* Thu 15 May 2014 05:38:52 PM JST
    # send_control_tab,

* Thu 15 May 2014 05:44:58 PM JST
segments
* Thu 15 May 2014 05:45:20 PM JST
PolyRectangle
* Thu 15 May 2014 05:49:09 PM JST
'Window(id={0.window.id}, name="{0.name}", wmclass={0.wmclass})'
* Thu 15 May 2014 05:49:32 PM JST
viewformat
* Thu 15 May 2014 05:49:48 PM JST
viewfmt
* Thu 15 May 2014 05:50:36 PM JST
return 
* Thu 15 May 2014 05:51:53 PM JST
Cl
* Thu 15 May 2014 05:51:53 PM JST
core.Cl
* Thu 15 May 2014 05:55:49 PM JST
{0.window.id}
* Thu 15 May 2014 05:55:56 PM JST
wmclass=
* Thu 15 May 2014 05:56:55 PM JST
{0.window.id}
* Thu 15 May 2014 05:57:45 PM JST
{0.window.id}, 
* Thu 15 May 2014 06:02:43 PM JST
impor
* Thu 15 May 2014 06:03:03 PM JST
join(
* Thu 15 May 2014 06:03:04 PM JST
n'.join(
* Thu 15 May 2014 06:03:04 PM JST
format(',\n'.join(
* Thu 15 May 2014 06:03:04 PM JST
n{}]'.format(',\n'.join(
* Thu 15 May 2014 06:03:05 PM JST
print('[\n{}]'.format(',\n'.join(
* Thu 15 May 2014 06:06:25 PM JST
         import pprint                                                                      
                                                                                            
         class MyPrettyPrinter(pprint.PrettyPrinter):                                       
             def format(self, object, context, maxlevels, level):                           
                 if isinstance(object, unicode):                                            
up vote              return (object.encode('utf8'), True, False)                            
13 down          return pprint.PrettyPrinter.format(self, object, context, maxlevels, level)

* Thu 15 May 2014 06:06:40 PM JST
up vote
* Thu 15 May 2014 06:06:42 PM JST
13 down
* Thu 15 May 2014 06:06:57 PM JST
    
* Thu 15 May 2014 06:07:00 PM JST

* Thu 15 May 2014 06:07:00 PM JST

* Thu 15 May 2014 06:07:00 PM JST
     def format(self, object, context, maxlevels, level):                           

* Thu 15 May 2014 06:07:22 PM JST
            
* Thu 15 May 2014 06:08:20 PM JST
MyPrettyPrinter
* Thu 15 May 2014 06:08:43 PM JST
[self.viewfmt.format(x) for x in self]
* Thu 15 May 2014 06:26:32 PM JST
view()
* Thu 15 May 2014 06:34:00 PM JST
FreeColormap
* Thu 15 May 2014 11:21:16 PM JST
ChangeKeyboardMapping
* Thu 15 May 2014 11:37:04 PM JST
SubCoreMethodAbstract
* Thu 15 May 2014 11:38:00 PM JST
self.
* Thu 15 May 2014 11:38:27 PM JST
ScreenSaver
* Thu 15 May 2014 11:38:33 PM JST
ScreenSaver
* Thu 15 May 2014 11:38:48 PM JST
ActiveForceScreenSaver
* Thu 15 May 2014 11:39:08 PM JST
class ActiveForceScreenSaver(SubCoreMethodAbstract):
    r"""SUMMARY
    """
    
    def __init__(self, parent):
        r"""
        """
        SubCoreMethodAbstract.__init__(self, parent)
        
    def __call__(self, ):
        r"""SUMMARY
        
        __call__()
        
        @Return:
        """
        return self._parent(ScreenSaver.Active)

* Thu 15 May 2014 11:39:13 PM JST
Active
* Thu 15 May 2014 11:39:20 PM JST
Active
* Thu 15 May 2014 11:39:50 PM JST
ResetForceScreenSaver
* Fri 16 May 2014 12:13:45 AM JST
core
* Fri 16 May 2014 12:18:49 AM JST
ScreenSaver
* Fri 16 May 2014 12:20:19 AM JST
import
* Fri 16 May 2014 12:23:14 AM JST
ActiveForceScreenSaver
* Fri 16 May 2014 12:23:50 AM JST
1);
* Fri 16 May 2014 12:23:50 AM JST
sleep(1);
* Fri 16 May 2014 12:29:38 AM JST
StringIO()
* Fri 16 May 2014 12:29:42 AM JST

* Fri 16 May 2014 12:29:42 AM JST

* Fri 16 May 2014 12:29:42 AM JST
        self.buf = StringIO()

* Fri 16 May 2014 12:30:04 AM JST
.write(pack('=xB2x', self.mode))
* Fri 16 May 2014 12:30:13 AM JST
ActiveForceScreenSaver
* Fri 16 May 2014 12:30:22 AM JST

* Fri 16 May 2014 12:30:22 AM JST

* Fri 16 May 2014 12:30:22 AM JST
        self.buf.write(pack('=xB2x', self.mode))

* Fri 16 May 2014 12:32:43 AM JST
ActiveForceScreenSaver
* Fri 16 May 2014 12:34:03 AM JST
pack('=xB2x', ActiveForceScreenSaver.mode)
* Fri 16 May 2014 12:36:09 AM JST
pack('=xB2x', ActiveForceScreenSaver.mode)
* Fri 16 May 2014 12:36:20 AM JST
()
* Fri 16 May 2014 12:37:06 AM JST

* Fri 16 May 2014 12:37:06 AM JST

* Fri 16 May 2014 12:37:06 AM JST
    buf = StringIO()

* Fri 16 May 2014 02:43:26 AM JST
  
* Fri 16 May 2014 02:43:33 AM JST

* Fri 16 May 2014 02:43:33 AM JST
* at
* Fri 16 May 2014 02:43:33 AM JST
* atom

* Fri 16 May 2014 02:44:30 AM JST
[ ] 
* Fri 16 May 2014 05:22:10 AM JST
num
* Fri 16 May 2014 05:22:14 AM JST
num
* Fri 16 May 2014 05:22:30 AM JST
    def __repr__(self, ):
        return repr(self._data)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self._data, other._data)
        return cmp(self._data, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._data == other._data
        return self._data == other

    def __ne__(self, other):
        return not (self == other)

* Fri 16 May 2014 05:24:51 AM JST

* Fri 16 May 2014 05:24:52 AM JST

* Fri 16 May 2014 05:24:52 AM JST
        DataHolder.__init__(self, atom)

* Fri 16 May 2014 05:24:58 AM JST
DataHolder, 
* Fri 16 May 2014 05:27:02 AM JST
_
* Fri 16 May 2014 05:34:13 AM JST
I'
* Fri 16 May 2014 05:49:17 AM JST
    def __repr__(self, ):
        return repr(self._data)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self._data, other._data)
        return cmp(self._data, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._data == other._data
        return self._data == other

    def __ne__(self, other):
        return not (self == other)

* Fri 16 May 2014 05:49:55 AM JST

* Fri 16 May 2014 05:49:55 AM JST

* Fri 16 May 2014 05:49:55 AM JST
        @Arguments:

* Fri 16 May 2014 05:49:57 AM JST

* Fri 16 May 2014 05:49:57 AM JST

* Fri 16 May 2014 05:49:57 AM JST
        DataHolder.__init__(self, name)

* Fri 16 May 2014 05:50:26 AM JST
DataHolder, 
* Fri 16 May 2014 03:07:26 PM JST
from xcb2.abstract import ConnectionAbstract
* Fri 16 May 2014 03:07:33 PM JST
from struct import pack as _pack
* Fri 16 May 2014 03:07:46 PM JST
class Atom(ConnectionAbstract):
    r"""Internal use.
    """
    fmt = 'I'

    def __init__(self, connection, atom):
        r"""

        @Arguments:
        - `num`:
        - `name`:
        """
        ConnectionAbstract.__init__(self, connection)
        self.atom = atom

    def getname(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return self.connection.core.GetAtomName(self.atom)

    def getname_unchecked(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return self.connection.core.GetAtomNameUnchecked(self.atom)

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return _pack(self.fmt, self.atom)

    def __int__(self, ):
        return self.atom

    def __long__(self, ):
        return self.atom.__long__()

    def __hash__(self, ):
        return hash(self.atom)

    def __repr__(self, ):
        return repr(self.atom)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.atom, other.atom)
        return cmp(self.atom, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.atom == other.atom
        return self.atom == other

    def __ne__(self, other):
        return not (self == other)

* Fri 16 May 2014 03:09:01 PM JST
class AtomName(ConnectionAbstract):
    r"""Internal use.
    """

    def __init__(self, connection, name):
        r"""

        @Arguments:
        - `connection`:
        - `name`:
        """
        ConnectionAbstract.__init__(self, connection)
        self.name = name

    def intern_atom(self, only_if_exists=True):
        r"""SUMMARY

        intern_atom()

        @Return:
        """
        return self.connection.core.InternAtom(
            only_if_exists, len(self), self.name)

    def intern_atom_unchecked(self, only_if_exists=True):
        r"""SUMMARY

        intern_atom_unchecked()

        @Return:
        """
        return self.connection.core.InternAtomUnchecked(
            only_if_exists, len(self), self.name)

    @property
    def length(self, ):
        r"""SUMMARY

        name_length()

        @Return:
        """
        return len(self)

    @property
    def types(self, ):
        r"""SUMMARY

        types()

        @Return:
        """
        return AtomReplyTypes.get_types(self.name)

    @property
    def format(self, ):
        r"""SUMMARY

        format()

        @Return:
        """
        return self.types.length

    def __iter__(self):
        for i in range(0, len(self)):
            yield self.name[i]
        raise StopIteration()

    def __str__(self, ):
        return self.name

    def __hash__(self, ):
        return hash(self.name)

    def __len__(self, ):
        return len(self.name)

    def __repr__(self, ):
        return repr(self.name)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.name, other.name)
        return cmp(self.name, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.name == other.name
        return self.name == other

    def __ne__(self, other):
        return not (self == other)



* Fri 16 May 2014 03:09:20 PM JST
from xcb2.abstract import ConnectionAbstract
* Fri 16 May 2014 03:09:37 PM JST
from xcb2.xproto.atomtype import AtomReplyTypes
* Fri 16 May 2014 03:55:38 PM JST
class AtomPair(object):
    r"""Information holder.
    """
    __slots__ = ('name', 'atom')

    def __init__(self, name, atom):
        r"""

        @Arguments:
        - `name`:
        - `atom`:
        """
        self.name = name
        self.atom = atom

    def name_length(self, ):
        r"""SUMMARY

        name_length()

        @Return:
        """
        return self.name.length

    @property
    def types(self, ):
        r"""SUMMARY

        types()

        @Return:
        """
        return self.name.types

    @property
    def format(self, ):
        r"""SUMMARY

        format()

        @Return:
        """
        return self.name.format

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return self.atom.pack()

    def __repr__(self, ):
        fmt = "{0.__class__.__name__}(name='{0.name}', atom={0.atom})".format
        return fmt(self)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.atom, other.atom)
        if predicate.isstring(other):
            return cmp(self.name, other)
        if predicate.isint(other):
            return cmp(self.atom, other)
        return False

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.atom == other.atom
        if predicate.isint(other):
            return self.atom == other
        if predicate.isstring(other):
            return self.name == other
        return False

    def __ne__(self, other):
        return not (self == other)

    def __getitem__(self, key):
        return str(self)[key]

    def __str__(self, ):
        return str(self.name)

    def __int__(self, ):
        return int(self.atom)

    def __long__(self, ):
        return long(self.atom)

    def __len__(self, ):
        return len(str(self))

    def __hash__(self, ):
        return hash(self.atom)

* Fri 16 May 2014 03:55:46 PM JST
import predicate
* Fri 16 May 2014 10:06:53 PM JST
WrapCookieAbstract
* Fri 16 May 2014 10:07:15 PM JST
    def check(self, ):
        r"""SUMMARY

        check()

        @Return:
        """
        return self._cookie.check()

    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:
        """
        reply = self._cookie.reply()
        reply.name = self._cookie.name
        return wreply.WrapInternAtomReply(self._connection, reply)

* Fri 16 May 2014 10:08:13 PM JST
class WrapInternAtomReply(WrapAbstract):
    r"""SUMMARY
    """

    @property
    def atom(self, ):
        r"""SUMMARY

        atom()

        @Return:
        """
        name = atom.AtomName(self.connection, self._raw.name)
        num = atom.Atom(self.connection, self._raw.atom)
        return atom.AtomPair(name, num)

* Fri 16 May 2014 10:08:23 PM JST
Wrap
* Fri 16 May 2014 10:09:49 PM JST
class Atom(ConnectionAbstract):
    r"""Internal use.
    """
    fmt = 'I'

    def __init__(self, connection, atom):
        r"""

        @Arguments:
        - `num`:
        - `name`:
        """
        ConnectionAbstract.__init__(self, connection)
        self.atom = atom

    def getname(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return self.connection.core.GetAtomName(self.atom)

    def getname_unchecked(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return self.connection.core.GetAtomNameUnchecked(self.atom)

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return _pack(self.fmt, self.atom)

    def __int__(self, ):
        return self.atom

    def __long__(self, ):
        return self.atom.__long__()

    def __hash__(self, ):
        return hash(self.atom)

    def __repr__(self, ):
        return repr(self.atom)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.atom, other.atom)
        return cmp(self.atom, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.atom == other.atom
        return self.atom == other

    def __ne__(self, other):
        return not (self == other)


* Fri 16 May 2014 10:10:00 PM JST
from xcb2.abstract import ConnectionAbstract
* Fri 16 May 2014 10:10:06 PM JST
from struct import pack as _pack
* Fri 16 May 2014 10:10:26 PM JST
Atom(self.connection, self._raw.atom)
* Fri 16 May 2014 10:10:29 PM JST

* Fri 16 May 2014 10:10:29 PM JST

* Fri 16 May 2014 10:10:29 PM JST
        name = atom.AtomName(self.connection, self._raw.name)

* Fri 16 May 2014 10:10:29 PM JST
        name = atom.AtomName(self.connection, self._raw.name)

* Fri 16 May 2014 10:10:29 PM JST
        name = atom.AtomName(self.connection, self._raw.name)
        num = atom.Atom(self.connection, self._raw.atom)

* Fri 16 May 2014 10:11:24 PM JST
wreply.
* Fri 16 May 2014 10:12:42 PM JST
def
* Fri 16 May 2014 10:15:08 PM JST
InternAtomCookie
* Fri 16 May 2014 10:19:23 PM JST
xproto.
* Fri 16 May 2014 10:21:36 PM JST
xproto
* Fri 16 May 2014 10:21:48 PM JST
InternAtom
* Fri 16 May 2014 10:23:56 PM JST
xcb.Cookie
* Fri 16 May 2014 10:26:09 PM JST
Request
* Fri 16 May 2014 10:26:13 PM JST
xcb2.
* Fri 16 May 2014 10:27:55 PM JST
from array import array as _array
* Fri 16 May 2014 10:28:53 PM JST
            
* Fri 16 May 2014 10:36:13 PM JST
WrapInternAtomCookie
* Fri 16 May 2014 10:36:27 PM JST
self.connection
* Fri 16 May 2014 10:36:34 PM JST
            
* Fri 16 May 2014 10:43:43 PM JST
from xcb2.abstract import ConnectionAbstract
from xcb2.xproto.atomtype import AtomReplyTypes


class AtomName(ConnectionAbstract):
    r"""Internal use.
    """

    def __init__(self, connection, name):
        r"""

        @Arguments:
        - `connection`:
        - `name`:
        """
        ConnectionAbstract.__init__(self, connection)
        self.name = name

    def internatom(self, only_if_exists=True):
        r"""SUMMARY

        intern_atom()

        @Return:
        """
        return self.connection.core.InternAtom(
            only_if_exists, len(self), self.name)

    def internatom_unchecked(self, only_if_exists=True):
        r"""SUMMARY

        intern_atom_unchecked()

        @Return:
        """
        return self.connection.core.InternAtomUnchecked(
            only_if_exists, len(self), self.name)

    @property
    def length(self, ):
        r"""SUMMARY

        name_length()

        @Return:
        """
        return len(self)

    @property
    def types(self, ):
        r"""SUMMARY

        types()

        @Return:
        """
        return AtomReplyTypes.get_types(self.name)

    @property
    def format(self, ):
        r"""SUMMARY

        format()

        @Return:
        """
        return self.types.length

    def __iter__(self):
        for i in range(0, len(self)):
            yield self.name[i]
        raise StopIteration()

    def __str__(self, ):
        return self.name

    def __hash__(self, ):
        return hash(self.name)

    def __getitem__(self, index):
        return self.name[index]

    def __len__(self, ):
        return len(self.name)

    def __repr__(self, ):
        return repr(self.name)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.name, other.name)
        return cmp(self.name, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.name == other.name
        return self.name == other

    def __ne__(self, other):
        return not (self == other)

* Fri 16 May 2014 10:44:45 PM JST
class WrapGetAtomNameReply(WrapReplyAbstract):
    r"""SUMMARY
    """

    @property
    def name(self, ):
        r"""SUMMARY

        name()

        @Return:
        """
        name = atom.AtomName(self.connection, str(self._raw.name.buf()))
        num = atom.Atom(self.connection, int(self._raw.atom))
        return atom.AtomPair(name, num)

    @property
    def name_len(self, ):
        r"""SUMMARY

        name_len()

        @Return:
        """
        return self._raw.name_len

* Fri 16 May 2014 10:45:21 PM JST
AtomName(self.connection, str(self._raw.name.buf()))
* Fri 16 May 2014 10:45:27 PM JST

* Fri 16 May 2014 10:45:27 PM JST

* Fri 16 May 2014 10:45:27 PM JST
        name = atom.AtomName(self.connection, str(self._raw.name.buf()))

* Fri 16 May 2014 10:45:28 PM JST
        name = atom.AtomName(self.connection, str(self._raw.name.buf()))

* Fri 16 May 2014 10:45:28 PM JST
        name = atom.AtomName(self.connection, str(self._raw.name.buf()))
        num = atom.Atom(self.connection, int(self._raw.atom))

* Fri 16 May 2014 10:45:42 PM JST
from cStringIO import StringIO as _StringIO
from struct import pack as _pack
from array import array as _array

* Fri 16 May 2014 10:45:49 PM JST
from xcb2.xproto.wcookie import WrapCookieAbstract
from xcb2.xproto.wreply import WrapReplyAbstract

* Fri 16 May 2014 10:46:27 PM JST
class WrapGetAtomNameCookie(WrapCookieAbstract):
    r"""SUMMARY
    """

    def check(self, ):
        r"""SUMMARY

        check()

        @Return:
        """
        return self._cookie.check()

    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:
        """
        reply = self._cookie.reply()
        reply.atom = self._cookie.atom
        return wreply.WrapGetAtomNameReply(self._connection, reply)



* Fri 16 May 2014 10:46:32 PM JST
wreply.
* Fri 16 May 2014 10:48:23 PM JST

* Fri 16 May 2014 10:48:23 PM JST

* Fri 16 May 2014 10:48:23 PM JST
        reply.name = self._cookie.name

* Fri 16 May 2014 10:48:26 PM JST
self._cookie.reply()
* Fri 16 May 2014 10:48:29 PM JST

* Fri 16 May 2014 10:48:29 PM JST

* Fri 16 May 2014 10:48:29 PM JST
        reply = 

* Fri 16 May 2014 10:48:39 PM JST
self._cookie.reply()
* Fri 16 May 2014 10:48:43 PM JST

* Fri 16 May 2014 10:48:43 PM JST

* Fri 16 May 2014 10:48:43 PM JST
        reply = self._cookie.reply()

* Fri 16 May 2014 10:48:43 PM JST
        reply = self._cookie.reply()

* Fri 16 May 2014 10:48:43 PM JST
        reply = self._cookie.reply()
        reply.atom = self._cookie.atom

* Fri 16 May 2014 10:50:55 PM JST
=xx2xI
* Fri 16 May 2014 10:51:37 PM JST
send_requ
* Fri 16 May 2014 10:52:35 PM JST

* Fri 16 May 2014 10:52:35 PM JST

* Fri 16 May 2014 10:52:35 PM JST
from array import array as _array

* Fri 16 May 2014 10:52:51 PM JST
GetAtomNameCookie
* Fri 16 May 2014 10:53:20 PM JST
GetAtomNameCookie
* Fri 16 May 2014 10:53:32 PM JST
            
* Fri 16 May 2014 10:53:48 PM JST
from xcb2 import Request
* Fri 16 May 2014 10:55:19 PM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, atom))
        return self.connection.core.send_request(
            Request(buf.getvalue(), 17, False, True),
            GetAtomNameCookie(),
            GetAtomNameReply)

* Fri 16 May 2014 10:55:23 PM JST
True
* Fri 16 May 2014 11:09:29 PM JST
    def request(self, only_if_exists, name_len, name):
        r"""SUMMARY

        request(only_if_exists, name_len, name)

        @Arguments:
        - `only_if_exists`:
        - `name_len`:
        - `name`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack(self.fmt, only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))
        return WrapInternAtomCookie(
            self.connection, self.connection.core.send_request(
                Request(buf.getvalue(), 16, False, True),
                InternAtomCookie(),
                InternAtomReply))


* Fri 16 May 2014 11:09:50 PM JST
True
* Fri 16 May 2014 11:09:53 PM JST
                
* Fri 16 May 2014 11:10:17 PM JST
            
* Fri 16 May 2014 11:13:38 PM JST
InternAtom
* Fri 16 May 2014 11:21:45 PM JST

* Fri 16 May 2014 11:21:46 PM JST

* Fri 16 May 2014 11:21:46 PM JST
from xcb2.abstract import ConnectionAbstract

* Fri 16 May 2014 11:21:46 PM JST
from xcb2.abstract import ConnectionAbstract

* Fri 16 May 2014 11:21:46 PM JST
from xcb2.abstract import ConnectionAbstract
from xcb2.xproto.atomtype import AtomReplyTypes

* Fri 16 May 2014 11:30:53 PM JST
from xcb2.xproto.extensions.internatom import InternAtom, InternAtomUnchecked
* Fri 16 May 2014 11:31:59 PM JST
WrapGetAtomNameCookie
* Fri 16 May 2014 11:32:28 PM JST
WrapGetAtomNameCookie
* Fri 16 May 2014 11:32:49 PM JST
            
* Fri 16 May 2014 11:34:57 PM JST

* Fri 16 May 2014 11:34:57 PM JST

* Fri 16 May 2014 11:34:57 PM JST
from xcb2.xproto.extensions.internatom import InternAtom, InternAtomUnchecked

* Fri 16 May 2014 11:35:12 PM JST
WrapInternAtomCookie
* Fri 16 May 2014 11:35:28 PM JST
            
* Fri 16 May 2014 11:35:36 PM JST
WrapInternAtomCookie
* Fri 16 May 2014 11:35:59 PM JST
WrapInternAtomCookie
* Fri 16 May 2014 11:36:06 PM JST
            
* Sat 17 May 2014 02:38:36 AM JST
    def InternAtom(self, only_if_exists, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, True),
                                 InternAtomCookie(),
                                 InternAtomReply)


* Sat 17 May 2014 02:39:12 AM JST
xproto
* Sat 17 May 2014 02:39:56 AM JST
Tes
* Sat 17 May 2014 02:40:05 AM JST

* Sat 17 May 2014 02:45:54 AM JST

* Sat 17 May 2014 02:45:54 AM JST

* Sat 17 May 2014 02:45:54 AM JST
xcb._add_core(Tes, Setup, _EVENTS, _ERRORS)

* Sat 17 May 2014 04:12:22 AM JST
object
* Sat 17 May 2014 04:12:31 AM JST
InternAtomAbstract
* Sat 17 May 2014 04:13:11 AM JST
InternAtomAbstract
* Sat 17 May 2014 04:13:24 AM JST

* Sat 17 May 2014 04:13:24 AM JST

* Sat 17 May 2014 04:13:24 AM JST
    fmt = '=xB2x'

* Sat 17 May 2014 04:14:39 AM JST
connection
* Sat 17 May 2014 04:14:49 AM JST
self._connection
* Sat 17 May 2014 04:18:10 AM JST
from xcb2.xproto.extensions.abstract import CoreMethodAbstract
* Sat 17 May 2014 04:18:30 AM JST
    __metaclass__ = ABCMeta

    fmt = '=xB2x'

* Sat 17 May 2014 04:18:34 AM JST
__metaclass__ = ABCMeta
* Sat 17 May 2014 04:18:47 AM JST
CoreMethodAbstract
* Sat 17 May 2014 04:19:01 AM JST
from abc import ABCMeta, abstractmethod
* Sat 17 May 2014 04:19:23 AM JST
@abstractmethod
* Sat 17 May 2014 04:19:50 AM JST

* Sat 17 May 2014 04:19:50 AM JST

* Sat 17 May 2014 04:19:51 AM JST
    @abstractmethod

* Sat 17 May 2014 04:19:52 AM JST

* Sat 17 May 2014 04:19:52 AM JST

* Sat 17 May 2014 04:19:52 AM JST
    __metaclass__ = ABCMeta

* Sat 17 May 2014 04:19:57 AM JST

* Sat 17 May 2014 04:19:57 AM JST

* Sat 17 May 2014 04:19:57 AM JST
    fmt = '=xx2xI'

* Sat 17 May 2014 04:21:01 AM JST
GetAtomNameAbstract
* Sat 17 May 2014 04:21:21 AM JST
GetAtomNameAbstract
* Sat 17 May 2014 04:59:08 PM JST
from abc import ABCMeta, abstractmethod
from cStringIO import StringIO as _StringIO
from struct import pack as _pack

* Sat 17 May 2014 04:59:18 PM JST
from xcb2 import Request
from xcb2.abstract import ConnectionAbstract

* Sat 17 May 2014 05:00:07 PM JST
from xcb2.xproto.extensions.abstract import CoreMethodAbstract
* Sat 17 May 2014 05:00:42 PM JST
__metaclass__ = ABCMeta
* Sat 17 May 2014 05:04:36 PM JST
'=xx2xIHHH2x'
* Sat 17 May 2014 05:05:07 PM JST
cmap, red, green, blue
* Sat 17 May 2014 05:06:44 PM JST
)
* Sat 17 May 2014 05:06:46 PM JST
            
* Sat 17 May 2014 05:07:03 PM JST
class AllocColor(AllocColorAbstract):
    r"""SUMMARY
    """
    def request(self, cmap, red, green, blue):
        r"""SUMMARY

        request(cmap, red, green, blue)

        @Arguments:
        - `cmap`:
        - `red`:
        - `green`:
        - `blue`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap, red, green, blue))
        return self._connection.core.send_request(
            Request(buf.getvalue(), 84, False, True),
            AllocColorCookie(), AllocColorReply)

* Sat 17 May 2014 05:07:11 PM JST
True
* Sat 17 May 2014 05:07:40 PM JST

* Sat 17 May 2014 05:07:40 PM JST

* Sat 17 May 2014 05:07:40 PM JST
from xcb2.abstract import ConnectionAbstract

* Sat 17 May 2014 05:11:00 PM JST
AllocColorAbstract', 
* Sat 17 May 2014 05:11:48 PM JST
from abc import ABCMeta, abstractmethod
from cStringIO import StringIO as _StringIO
from struct import pack as _pack

from xcb2 import Request
from xcb2.xproto.extensions.abstract import CoreMethodAbstract

* Sat 17 May 2014 05:12:47 PM JST
__metaclass__ = ABCMeta
* Sat 17 May 2014 05:14:28 PM JST
'=xB2xIHH'
* Sat 17 May 2014 05:17:08 PM JST
xcb
* Sat 17 May 2014 05:17:08 PM JST
form xcb
* Sat 17 May 2014 05:18:51 PM JST
            
* Sat 17 May 2014 05:19:03 PM JST
class AllocColorCells(AllocColorCellsAbstract):
    r"""SUMMARY
    """

    def request(self, contiguous, cmap, colors, planes):
        r"""SUMMARY

        request(contiguous, cmap, colors, planes)

        @Arguments:
        - `contiguous`:
        - `cmap`:
        - `colors`:
        - `planes`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack(self.fmt, contiguous, cmap, colors, planes))
        return self._connection.core.send_request(
            Request(buf.getvalue(), 86, False, True),
            AllocColorCellsCookie(), AllocColorCellsReply)

* Sat 17 May 2014 05:19:18 PM JST
True
* Sat 17 May 2014 05:20:13 PM JST
from abc import ABCMeta, abstractmethod
from cStringIO import StringIO as _StringIO
from struct import pack as _pack

from xcb2 import Request
from xcb2.xproto.extensions.abstract import CoreMethodAbstract
from xcb2.xproto import AllocColorCellsCookie, AllocColorCellsReply


class AllocColorCellsAbstract(CoreMethodAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    fmt = '=xB2xIHH'

    @abstractmethod
    def request(self, contiguous, cmap, colors, planes):
        raise NotImplementedError()

    def __call__(self, contiguous, cmap, colors, planes):
        return self.request(contiguous, cmap, colors, planes)


class AllocColorCells(AllocColorCellsAbstract):
    r"""SUMMARY
    """

    def request(self, contiguous, cmap, colors, planes):
        r"""SUMMARY

        request(contiguous, cmap, colors, planes)

        @Arguments:
        - `contiguous`:
        - `cmap`:
        - `colors`:
        - `planes`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack(self.fmt, contiguous, cmap, colors, planes))
        return self._connection.core.send_request(
            Request(buf.getvalue(), 86, False, True),
            AllocColorCellsCookie(), AllocColorCellsReply)


class AllocColorCellsUnchecked(AllocColorCellsAbstract):
    r"""SUMMARY
    """

    def request(self, contiguous, cmap, colors, planes):
        r"""SUMMARY

        request(contiguous, cmap, colors, planes)

        @Arguments:
        - `contiguous`:
        - `cmap`:
        - `colors`:
        - `planes`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack(self.fmt, contiguous, cmap, colors, planes))
        return self._connection.core.send_request(
            Request(buf.getvalue(), 86, False, False),
            AllocColorCellsCookie(), AllocColorCellsReply)



* Sat 17 May 2014 05:21:06 PM JST
AllocColorCells
* Sat 17 May 2014 05:21:14 PM JST
AllocColorCells
* Sat 17 May 2014 05:22:41 PM JST
AllocColorCells
* Sat 17 May 2014 05:23:12 PM JST
$6
* Sat 17 May 2014 05:24:54 PM JST
AllocColorCells
* Sat 17 May 2014 05:25:22 PM JST
$6
* Sat 17 May 2014 05:25:37 PM JST
False
* Sat 17 May 2014 05:25:45 PM JST
AllocColorCells
* Sat 17 May 2014 05:27:11 PM JST
from abc import ABCMeta, abstractmethod
from cStringIO import StringIO as _StringIO
from struct import pack as _pack

from xcb2 import Request
from xcb2.xproto.extensions.abstract import CoreMethodAbstract
from xcb2.xproto import $1Cookie${2:, ${3:Reply}}


class $4Abstract(CoreMethodAbstract):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    fmt = $5

    @abstractmethod
    def request(self, $6):
        raise NotImplementedError()

    def __call__(self, $6):
        return self.request($6)


class AllocColorCells(AllocColorCellsAbstract):
    r"""SUMMARY
    """

    def request(self, $6):
        r"""SUMMARY

        request($6)

        @Arguments:
        - `contiguous`:
        - `cmap`:
        - `colors`:
        - `planes`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack(self.fmt, $6))
        return self._connection.core.send_request(
            Request(buf.getvalue(), $7, False, $8),
            $1Cookie()$2)


class $4$9($4Abstract):
    r"""SUMMARY
    """

    def request(self, $6):
        r"""SUMMARY

        request($6)

        @Arguments:
        - `contiguous`:
        - `cmap`:
        - `colors`:
        - `planes`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack(self.fmt, $6))
        return self._connection.core.send_request(
            Request(buf.getvalue(), $7, False, $8),
            $1Cookie()$2)



* Sat 17 May 2014 05:27:51 PM JST
onetime
* Sat 17 May 2014 05:28:07 PM JST
# expand-env: ((yas/indent-line 'fixed) (yas/wrap-around-region 'nil))
* Sat 17 May 2014 05:29:17 PM JST
'=xB2xIHHHH'
* Sat 17 May 2014 05:29:26 PM JST
contiguous, cmap, colors, reds, greens, blues
* Sat 17 May 2014 05:29:57 PM JST
True
* Sat 17 May 2014 05:30:25 PM JST
$4
* Sat 17 May 2014 05:30:32 PM JST
AllocColorCells
* Sat 17 May 2014 05:32:19 PM JST
'=xB2xIHHHH'
* Sat 17 May 2014 05:32:28 PM JST
contiguous, cmap, colors, reds, greens, blues
* Sat 17 May 2014 05:34:02 PM JST
$$(yas/choose-value '("DEBUG" "INFO" "WARN" "ERROR" "FATAL"))}
* Sat 17 May 2014 05:34:18 PM JST
FATAL"
* Sat 17 May 2014 05:34:19 PM JST
ERROR" 
* Sat 17 May 2014 05:34:20 PM JST
WARN" "ERROR" 
* Sat 17 May 2014 05:34:21 PM JST
INFO" 
* Sat 17 May 2014 05:34:25 PM JST
DEBUG
* Sat 17 May 2014 05:35:35 PM JST
'=xB2xIHHHH'
* Sat 17 May 2014 05:35:41 PM JST
contiguous, cmap, colors, reds, greens, blues
* Sat 17 May 2014 05:36:01 PM JST
False
* Sat 17 May 2014 05:36:38 PM JST
$$(yas/choose-value '("Unchecked" "Checked"))
* Sat 17 May 2014 05:36:47 PM JST
Unchecked
* Sat 17 May 2014 05:36:54 PM JST
Checked
* Sat 17 May 2014 05:37:10 PM JST
$$(yas/choose-value '("Unchecked" "Checked"))
* Sat 17 May 2014 05:37:11 PM JST
Checked
* Sat 17 May 2014 05:37:14 PM JST
Unchecked
* Sat 17 May 2014 05:39:19 PM JST
'=xx2xIH2x'
* Sat 17 May 2014 05:39:25 PM JST
cmap, name_len
* Sat 17 May 2014 05:53:01 PM JST
Allow
* Sat 17 May 2014 05:53:31 PM JST
'=xB2xI'
* Sat 17 May 2014 05:53:35 PM JST
mode, time
* Sat 17 May 2014 05:54:16 PM JST
False
* Sat 17 May 2014 05:54:20 PM JST
False
* Sat 17 May 2014 05:54:29 PM JST
            
* Sat 17 May 2014 05:54:31 PM JST
            
* Sat 17 May 2014 05:54:38 PM JST
xproto
* Sat 17 May 2014 05:54:45 PM JST
VoidCookie
* Sat 17 May 2014 05:54:47 PM JST

* Sat 17 May 2014 05:54:47 PM JST

* Sat 17 May 2014 05:54:48 PM JST
from xcb2 import 

* Sat 17 May 2014 05:55:52 PM JST
'=xb2x'
* Sat 17 May 2014 05:55:55 PM JST
percent
* Sat 17 May 2014 05:56:24 PM JST
False
* Sat 17 May 2014 05:56:27 PM JST
False
* Sat 17 May 2014 05:56:30 PM JST
            
* Sat 17 May 2014 05:56:32 PM JST
            
* Sat 17 May 2014 05:56:42 PM JST
VoidCookie
* Sat 17 May 2014 05:56:44 PM JST

* Sat 17 May 2014 05:56:44 PM JST

* Sat 17 May 2014 05:56:44 PM JST
from xcb2.xproto import VoidCookie

* Sat 17 May 2014 05:57:35 PM JST
changeactivepointergrab
* Sat 17 May 2014 05:57:54 PM JST
ChangeActivePointerGrabChecked
* Sat 17 May 2014 05:57:56 PM JST
ChangeActivePointerGrab
* Sat 17 May 2014 05:58:17 PM JST
'=xx2xIIH2x'
* Sat 17 May 2014 05:58:21 PM JST
cursor, time, event_mask
* Sat 17 May 2014 05:58:55 PM JST
False
* Sat 17 May 2014 05:58:58 PM JST
False
* Sat 17 May 2014 05:59:03 PM JST
            
* Sat 17 May 2014 05:59:13 PM JST
VoidCookie
* Sat 17 May 2014 05:59:15 PM JST

* Sat 17 May 2014 05:59:15 PM JST

* Sat 17 May 2014 05:59:15 PM JST
from xcb2.xproto import VoidCookie

* Sat 17 May 2014 06:27:03 PM JST
'=xx2xII'
* Sat 17 May 2014 06:27:07 PM JST
gc, value_mask
* Sat 17 May 2014 06:27:12 PM JST
gc, value_mask, value_list
* Sat 17 May 2014 06:27:52 PM JST
ChangeGC
* Sat 17 May 2014 06:27:56 PM JST
ChangeG
* Sat 17 May 2014 06:28:01 PM JST
            
* Sat 17 May 2014 06:28:04 PM JST
            
* Sat 17 May 2014 06:28:07 PM JST
False
* Sat 17 May 2014 06:28:12 PM JST
False
* Sat 17 May 2014 06:28:20 PM JST

* Sat 17 May 2014 06:28:20 PM JST

* Sat 17 May 2014 06:28:20 PM JST
from xcb2.xproto import ChangeGCCookie

* Sat 17 May 2014 06:28:33 PM JST
buf.write(str(buffer(_array('I', value_list))))
* Sat 17 May 2014 06:30:18 PM JST
'=xB2xBxH'
* Sat 17 May 2014 06:30:26 PM JST
mode, family, address_len, address
* Sat 17 May 2014 06:31:15 PM JST
False
* Sat 17 May 2014 06:31:19 PM JST
False
* Sat 17 May 2014 06:31:22 PM JST
            
* Sat 17 May 2014 06:31:34 PM JST
buf.write(str(buffer(_array('B', address))))
* Sat 17 May 2014 06:31:45 PM JST
address
* Sat 17 May 2014 06:31:57 PM JST

* Sat 17 May 2014 06:31:57 PM JST

* Sat 17 May 2014 06:31:57 PM JST
from xcb2.xproto import VoidCookie

* Sat 17 May 2014 06:33:47 PM JST
changekeyboardcontrol
* Sat 17 May 2014 06:34:52 PM JST
'=xx2xI'
* Sat 17 May 2014 06:34:57 PM JST
value_mask
* Sat 17 May 2014 06:35:03 PM JST
value_mask, value_list
* Sat 17 May 2014 06:35:43 PM JST
False
* Sat 17 May 2014 06:35:45 PM JST
            
* Sat 17 May 2014 06:35:54 PM JST
False
* Sat 17 May 2014 06:36:00 PM JST
True
* Sat 17 May 2014 06:36:03 PM JST
            
* Sat 17 May 2014 06:36:13 PM JST
buf.write(str(buffer(_array('I', value_list))))
* Sat 17 May 2014 06:36:39 PM JST
form 
* Sat 17 May 2014 11:48:39 PM JST
changekeyboardmapping
* Sat 17 May 2014 11:49:07 PM JST
ChangeKeyboardMapping
* Sat 17 May 2014 11:49:33 PM JST
'=xB2xBB2x'
* Sat 17 May 2014 11:49:39 PM JST
keycode_count, first_keycode, keysyms_per_keycode, keysyms
* Sat 17 May 2014 11:50:08 PM JST
False
* Sat 17 May 2014 11:50:13 PM JST
False
* Sat 17 May 2014 11:50:15 PM JST
            
* Sat 17 May 2014 11:50:31 PM JST
            
* Sat 17 May 2014 11:51:04 PM JST
VoidCookie
* Sat 17 May 2014 11:51:08 PM JST

* Sat 17 May 2014 11:51:08 PM JST

* Sat 17 May 2014 11:51:08 PM JST
from xcb2.xproto import VoidCookie

* Sat 17 May 2014 11:51:30 PM JST
changepointercontrol
* Sat 17 May 2014 11:51:48 PM JST
ChangePointerControl
* Sat 17 May 2014 11:52:09 PM JST
'=xx2xhhhBB'
* Sat 17 May 2014 11:52:18 PM JST
acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold
* Sat 17 May 2014 11:52:44 PM JST
False
* Sat 17 May 2014 11:52:50 PM JST
False
* Sat 17 May 2014 11:53:21 PM JST
            
* Sat 17 May 2014 11:53:31 PM JST
False
* Sat 17 May 2014 11:54:21 PM JST
VoidCookie
* Sat 17 May 2014 11:54:23 PM JST

* Sat 17 May 2014 11:54:23 PM JST

* Sat 17 May 2014 11:54:23 PM JST
from xcb2.xproto import VoidCookie

* Sat 17 May 2014 11:55:07 PM JST
changeproperty
* Sat 17 May 2014 11:55:31 PM JST
ChangeProperty
* Sat 17 May 2014 11:55:49 PM JST
'=xB2xIIIB3xI'
* Sat 17 May 2014 11:55:58 PM JST
mode, window, property, type, format, data_len, data
* Sat 17 May 2014 11:56:44 PM JST
VoidCookie
* Sat 17 May 2014 11:56:47 PM JST

* Sat 17 May 2014 11:56:47 PM JST

* Sat 17 May 2014 11:56:47 PM JST
from xcb2.xproto import 

* Sat 17 May 2014 11:57:48 PM JST
core.
* Sat 17 May 2014 11:57:49 PM JST
rawconnection.core.
* Sat 17 May 2014 11:57:49 PM JST
c.rawconnection.core.
* Sat 17 May 2014 11:58:19 PM JST
xcb2.Request('', 18, True, True)
* Sat 17 May 2014 11:58:56 PM JST
'=xb2x'
* Sun 18 May 2014 12:09:11 AM JST
_EVENTS
* Sun 18 May 2014 12:09:48 AM JST
changesaveset
* Sun 18 May 2014 12:10:08 AM JST
ChangeSaveSet
* Sun 18 May 2014 12:10:25 AM JST
'=xB2xI'
* Sun 18 May 2014 12:10:32 AM JST
mode, window
* Sun 18 May 2014 12:11:08 AM JST
            
* Sun 18 May 2014 12:11:34 AM JST
VoidCookie
* Sun 18 May 2014 12:11:36 AM JST

* Sun 18 May 2014 12:11:36 AM JST

* Sun 18 May 2014 12:11:36 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 12:12:26 AM JST
False
* Sun 18 May 2014 12:12:38 AM JST
$$(yas/choose-value '("True" "False"))
* Sun 18 May 2014 12:12:50 AM JST
False
* Sun 18 May 2014 12:13:55 AM JST
changewindowattributes
* Sun 18 May 2014 12:14:20 AM JST
ChangeWindowAttributes
* Sun 18 May 2014 12:14:32 AM JST
'=xx2xII'
* Sun 18 May 2014 12:14:40 AM JST
window, value_mask, value_list
* Sun 18 May 2014 12:15:37 AM JST
True
* Sun 18 May 2014 12:15:41 AM JST
True
* Sun 18 May 2014 12:15:43 AM JST
            
* Sun 18 May 2014 12:15:54 AM JST
buf.write(str(buffer(_array('I', value_list))))
* Sun 18 May 2014 12:16:03 AM JST
buf.write(str(buffer(_array('I', value_list))))
* Sun 18 May 2014 12:16:42 AM JST
VoidCookie
* Sun 18 May 2014 12:16:43 AM JST

* Sun 18 May 2014 12:16:43 AM JST

* Sun 18 May 2014 12:16:43 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 12:27:52 AM JST
circulatewindow
* Sun 18 May 2014 12:28:11 AM JST
CirculateWindow
* Sun 18 May 2014 12:28:31 AM JST
'=xB2xI'
* Sun 18 May 2014 12:28:36 AM JST
direction, window
* Sun 18 May 2014 12:29:09 AM JST
            
* Sun 18 May 2014 12:29:16 AM JST
VoidCookie
* Sun 18 May 2014 12:29:18 AM JST

* Sun 18 May 2014 12:29:18 AM JST

* Sun 18 May 2014 12:29:18 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 12:30:13 AM JST
cleararea
* Sun 18 May 2014 12:30:30 AM JST
ClearArea
* Sun 18 May 2014 12:30:39 AM JST
'=xB2xIhhHH'
* Sun 18 May 2014 12:30:45 AM JST
exposures, window, x, y, width, height
* Sun 18 May 2014 12:31:26 AM JST
VoidCookie
* Sun 18 May 2014 12:31:27 AM JST

* Sun 18 May 2014 12:31:27 AM JST

* Sun 18 May 2014 12:31:27 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 12:35:57 AM JST
closefont
* Sun 18 May 2014 12:36:13 AM JST
CloseFont
* Sun 18 May 2014 12:36:29 AM JST
'=xx2xI'
* Sun 18 May 2014 12:36:33 AM JST
font
* Sun 18 May 2014 12:36:57 AM JST
VoidCookie
* Sun 18 May 2014 12:37:00 AM JST

* Sun 18 May 2014 12:37:00 AM JST

* Sun 18 May 2014 12:37:00 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 12:37:57 AM JST
configurewindow
* Sun 18 May 2014 12:38:10 AM JST
ConfigureWindow
* Sun 18 May 2014 12:38:25 AM JST
'=xx2xIH2x'
* Sun 18 May 2014 12:38:30 AM JST
window, value_mask, value_list
* Sun 18 May 2014 12:39:08 AM JST
VoidCookie
* Sun 18 May 2014 12:39:10 AM JST

* Sun 18 May 2014 12:39:10 AM JST

* Sun 18 May 2014 12:39:10 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 12:39:24 AM JST
convertselection
* Sun 18 May 2014 12:39:37 AM JST
ConvertSelection
* Sun 18 May 2014 12:39:55 AM JST
'=xx2xIIIII'
* Sun 18 May 2014 12:40:01 AM JST
requestor, selection, target, property, time
* Sun 18 May 2014 12:40:26 AM JST
            
* Sun 18 May 2014 12:40:32 AM JST
VoidCookie
* Sun 18 May 2014 12:40:34 AM JST

* Sun 18 May 2014 12:40:34 AM JST

* Sun 18 May 2014 12:40:34 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 12:41:17 AM JST
buf.write(str(buffer(_array('I', value_list))))
* Sun 18 May 2014 12:42:31 AM JST
copyarea
* Sun 18 May 2014 12:42:50 AM JST
CopyArea
* Sun 18 May 2014 12:43:04 AM JST
'=xx2xIIIhhhhHH'
* Sun 18 May 2014 12:43:09 AM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height
* Sun 18 May 2014 12:44:12 AM JST
VoidCookie
* Sun 18 May 2014 12:44:14 AM JST

* Sun 18 May 2014 12:44:14 AM JST

* Sun 18 May 2014 12:44:14 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 12:44:32 AM JST
copycolormapandfree
* Sun 18 May 2014 12:44:49 AM JST
CopyColormapAndFree
* Sun 18 May 2014 12:45:04 AM JST
'=xx2xII'
* Sun 18 May 2014 12:45:12 AM JST
mid, src_cmap
* Sun 18 May 2014 12:45:38 AM JST
VoidCookie
* Sun 18 May 2014 12:45:40 AM JST

* Sun 18 May 2014 12:45:40 AM JST

* Sun 18 May 2014 12:45:40 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 12:45:49 AM JST
copygc
* Sun 18 May 2014 12:46:06 AM JST
CopyGC
* Sun 18 May 2014 12:46:21 AM JST
'=xx2xIII'
* Sun 18 May 2014 12:46:25 AM JST
src_gc, dst_gc, value_mask
* Sun 18 May 2014 12:46:49 AM JST
            
* Sun 18 May 2014 12:46:56 AM JST
VoidCookie
* Sun 18 May 2014 12:46:57 AM JST

* Sun 18 May 2014 12:46:57 AM JST

* Sun 18 May 2014 12:46:57 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 12:47:15 AM JST
copyplane
* Sun 18 May 2014 12:47:30 AM JST
CopyPlane
* Sun 18 May 2014 12:47:47 AM JST
'=xx2xIIIhhhhHHI'
* Sun 18 May 2014 12:47:54 AM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane
* Sun 18 May 2014 12:48:41 AM JST
                        
* Sun 18 May 2014 12:48:58 AM JST
                            
* Sun 18 May 2014 12:49:15 AM JST
VoidCookie
* Sun 18 May 2014 12:49:17 AM JST

* Sun 18 May 2014 12:49:17 AM JST

* Sun 18 May 2014 12:49:17 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 12:50:26 AM JST
createcolormap
* Sun 18 May 2014 12:50:42 AM JST
CreateColormap
* Sun 18 May 2014 12:50:55 AM JST
'=xB2xIII'
* Sun 18 May 2014 12:51:01 AM JST
alloc, mid, window, visual
* Sun 18 May 2014 12:51:28 AM JST
VoidCookie
* Sun 18 May 2014 12:51:30 AM JST

* Sun 18 May 2014 12:51:30 AM JST

* Sun 18 May 2014 12:51:30 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 12:52:06 AM JST
createcursor
* Sun 18 May 2014 12:52:20 AM JST
CreateCursor
* Sun 18 May 2014 12:52:34 AM JST
'=xx2xIIIHHHHHHHH'
* Sun 18 May 2014 12:52:41 AM JST
cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y
* Sun 18 May 2014 12:53:38 AM JST
VoidCookie
* Sun 18 May 2014 12:53:40 AM JST

* Sun 18 May 2014 12:53:40 AM JST

* Sun 18 May 2014 12:53:40 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 12:54:08 AM JST
creategc
* Sun 18 May 2014 12:54:21 AM JST
CreateGC
* Sun 18 May 2014 12:54:33 AM JST
'=xx2xIII'
* Sun 18 May 2014 12:54:39 AM JST
cid, drawable, value_mask, value_list
* Sun 18 May 2014 12:55:03 AM JST
            
* Sun 18 May 2014 12:55:12 AM JST
VoidCookie
* Sun 18 May 2014 12:55:14 AM JST

* Sun 18 May 2014 12:55:14 AM JST

* Sun 18 May 2014 12:55:14 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 12:55:54 AM JST
buf.write(str(buffer(_array('I', value_list))))
* Sun 18 May 2014 12:56:39 AM JST
createglyphcursor
* Sun 18 May 2014 12:56:55 AM JST
CreateGlyphCursor
* Sun 18 May 2014 12:57:17 AM JST
'=xx2xIIIHHHHHHHH'
* Sun 18 May 2014 12:57:24 AM JST
cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue
* Sun 18 May 2014 12:59:00 AM JST
VoidCookie
* Sun 18 May 2014 12:59:01 AM JST

* Sun 18 May 2014 12:59:01 AM JST

* Sun 18 May 2014 12:59:02 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 01:02:42 AM JST
createpixmap
* Sun 18 May 2014 01:02:58 AM JST
CreatePixmap
* Sun 18 May 2014 01:03:13 AM JST
'=xB2xIIHH'
* Sun 18 May 2014 01:03:20 AM JST
depth, pid, drawable, width, height
* Sun 18 May 2014 01:03:44 AM JST
            
* Sun 18 May 2014 01:03:51 AM JST
VoidCookie
* Sun 18 May 2014 01:03:53 AM JST

* Sun 18 May 2014 01:03:53 AM JST

* Sun 18 May 2014 01:03:53 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 01:04:55 AM JST
createwindow
* Sun 18 May 2014 01:05:14 AM JST
CreateWindow
* Sun 18 May 2014 01:05:29 AM JST
'=xB2xIIhhHHHHII'
* Sun 18 May 2014 01:05:35 AM JST
depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list
* Sun 18 May 2014 01:06:07 AM JST
buf.write(str(buffer(_array('I', value_list))))
* Sun 18 May 2014 01:06:11 AM JST
value_list
* Sun 18 May 2014 01:06:35 AM JST
            
* Sun 18 May 2014 01:06:38 AM JST
value_list
* Sun 18 May 2014 01:06:45 AM JST
buf.write(str(buffer(_array('I', value_list))))
* Sun 18 May 2014 01:07:22 AM JST
VoidCookie
* Sun 18 May 2014 01:07:23 AM JST

* Sun 18 May 2014 01:07:24 AM JST

* Sun 18 May 2014 01:07:24 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 01:08:23 AM JST
deleteproperty
* Sun 18 May 2014 01:08:38 AM JST
DeleteProperty
* Sun 18 May 2014 01:08:50 AM JST
'=xx2xII'
* Sun 18 May 2014 01:08:55 AM JST
window, property
* Sun 18 May 2014 01:09:22 AM JST
VoidCookie
* Sun 18 May 2014 01:09:24 AM JST

* Sun 18 May 2014 01:09:24 AM JST

* Sun 18 May 2014 01:09:24 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 01:09:47 AM JST
destroysubwindows
* Sun 18 May 2014 01:10:08 AM JST
DestroySubwindows
* Sun 18 May 2014 01:10:21 AM JST
'=xx2xI'
* Sun 18 May 2014 01:10:25 AM JST
window
* Sun 18 May 2014 01:10:53 AM JST
VoidCookie
* Sun 18 May 2014 01:10:55 AM JST

* Sun 18 May 2014 01:10:55 AM JST

* Sun 18 May 2014 01:10:55 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 01:11:03 AM JST
destroywindow
* Sun 18 May 2014 01:11:16 AM JST
DestroyWindow
* Sun 18 May 2014 01:11:30 AM JST
'=xx2xI'
* Sun 18 May 2014 01:11:34 AM JST
window
* Sun 18 May 2014 01:11:59 AM JST
VoidCookie
* Sun 18 May 2014 01:12:02 AM JST

* Sun 18 May 2014 01:12:02 AM JST

* Sun 18 May 2014 01:12:02 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 01:12:22 AM JST
fillpoly
* Sun 18 May 2014 01:12:39 AM JST
FillPoly
* Sun 18 May 2014 01:12:51 AM JST
'=xx2xIIBB2x'
* Sun 18 May 2014 01:13:00 AM JST
drawable, gc, shape, coordinate_mode, points_len, points
* Sun 18 May 2014 01:13:54 AM JST
VoidCookie
* Sun 18 May 2014 01:13:56 AM JST

* Sun 18 May 2014 01:13:56 AM JST

* Sun 18 May 2014 01:13:57 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 01:15:15 AM JST
forcescreensaver
* Sun 18 May 2014 01:15:33 AM JST
ForceScreenSaver
* Sun 18 May 2014 01:15:48 AM JST
'=xB2x'
* Sun 18 May 2014 01:15:53 AM JST
mode
* Sun 18 May 2014 01:16:18 AM JST
            
* Sun 18 May 2014 01:16:25 AM JST
VoidCookie
* Sun 18 May 2014 01:16:26 AM JST

* Sun 18 May 2014 01:16:26 AM JST

* Sun 18 May 2014 01:16:27 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 01:17:26 AM JST
freecolormap
* Sun 18 May 2014 01:17:57 AM JST
FreeColormap
* Sun 18 May 2014 01:18:08 AM JST
'=xx2xI'
* Sun 18 May 2014 01:18:14 AM JST
cmap
* Sun 18 May 2014 01:18:34 AM JST
            
* Sun 18 May 2014 01:18:39 AM JST
VoidCookie
* Sun 18 May 2014 01:18:42 AM JST

* Sun 18 May 2014 01:18:42 AM JST

* Sun 18 May 2014 01:18:42 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 01:18:55 AM JST
freecolors
* Sun 18 May 2014 01:19:15 AM JST
FreeColors
* Sun 18 May 2014 01:19:29 AM JST
'=xx2xII'
* Sun 18 May 2014 01:19:36 AM JST
cmap, plane_mask, pixels_len, pixels
* Sun 18 May 2014 01:19:57 AM JST
            
* Sun 18 May 2014 01:20:02 AM JST
VoidCookie
* Sun 18 May 2014 01:20:04 AM JST

* Sun 18 May 2014 01:20:04 AM JST

* Sun 18 May 2014 01:20:04 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 01:20:26 AM JST
buf.write(str(buffer(_array('I', pixels))))
* Sun 18 May 2014 01:21:46 AM JST
freecursor
* Sun 18 May 2014 01:22:03 AM JST
FreeCursor
* Sun 18 May 2014 01:22:18 AM JST
'=xx2xI'
* Sun 18 May 2014 01:22:22 AM JST
cursor
* Sun 18 May 2014 01:22:49 AM JST
            
* Sun 18 May 2014 01:22:53 AM JST
VoidCookie
* Sun 18 May 2014 01:22:55 AM JST

* Sun 18 May 2014 01:22:55 AM JST

* Sun 18 May 2014 01:22:55 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 01:23:21 AM JST
freegc
* Sun 18 May 2014 01:23:44 AM JST
FreeGC
* Sun 18 May 2014 01:23:54 AM JST
'=xx2xI'
* Sun 18 May 2014 01:24:22 AM JST
            
* Sun 18 May 2014 01:24:26 AM JST
VoidCookie
* Sun 18 May 2014 01:24:28 AM JST

* Sun 18 May 2014 01:24:28 AM JST

* Sun 18 May 2014 01:24:28 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 01:24:36 AM JST
freepixmap
* Sun 18 May 2014 01:24:54 AM JST
FreePixmap
* Sun 18 May 2014 01:25:08 AM JST
'=xx2xI'
* Sun 18 May 2014 01:25:18 AM JST
pixmap
* Sun 18 May 2014 01:25:36 AM JST
            
* Sun 18 May 2014 01:25:40 AM JST
VoidCookie
* Sun 18 May 2014 01:25:42 AM JST

* Sun 18 May 2014 01:25:42 AM JST

* Sun 18 May 2014 01:25:42 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 01:27:32 AM JST
getatomname
* Sun 18 May 2014 01:27:44 AM JST
getfontpath
* Sun 18 May 2014 01:28:03 AM JST
GetFontPath
* Sun 18 May 2014 01:29:07 AM JST
'=xx2x'
* Sun 18 May 2014 01:30:03 AM JST
getgeometry
* Sun 18 May 2014 01:30:19 AM JST
GetGeometry
* Sun 18 May 2014 01:30:37 AM JST
'=xx2xI'
* Sun 18 May 2014 01:30:42 AM JST
drawable
* Sun 18 May 2014 01:31:17 AM JST
getimage
* Sun 18 May 2014 01:31:38 AM JST
GetImage
* Sun 18 May 2014 01:31:58 AM JST
'=xB2xIhhHHI'
* Sun 18 May 2014 01:32:04 AM JST
format, drawable, x, y, width, height, plane_mask
* Sun 18 May 2014 01:32:59 AM JST
getinputfocus
* Sun 18 May 2014 01:33:13 AM JST
GetInputFocus
* Sun 18 May 2014 01:33:32 AM JST
'=xx2x'
* Sun 18 May 2014 01:34:47 AM JST
    def CreateWindowChecked(self, depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, True),
                                 xcb.VoidCookie())

    def CreateWindow(self, depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhhHHHHII', depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 1, True, False),
                                 xcb.VoidCookie())

    def ChangeWindowAttributesChecked(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, True),
                                 xcb.VoidCookie())

    def ChangeWindowAttributes(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 2, True, False),
                                 xcb.VoidCookie())

    def GetWindowAttributes(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, True),
                                 GetWindowAttributesCookie(),
                                 GetWindowAttributesReply)

    def GetWindowAttributesUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 3, False, False),
                                 GetWindowAttributesCookie(),
                                 GetWindowAttributesReply)

    def DestroyWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, True),
                                 xcb.VoidCookie())

    def DestroyWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 4, True, False),
                                 xcb.VoidCookie())

    def DestroySubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, True),
                                 xcb.VoidCookie())

    def DestroySubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 5, True, False),
                                 xcb.VoidCookie())

    def ChangeSaveSetChecked(self, mode, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, True),
                                 xcb.VoidCookie())

    def ChangeSaveSet(self, mode, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, window))
        return self.send_request(xcb.Request(buf.getvalue(), 6, True, False),
                                 xcb.VoidCookie())

    def ReparentWindowChecked(self, window, parent, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, True),
                                 xcb.VoidCookie())

    def ReparentWindow(self, window, parent, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', window, parent, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 7, True, False),
                                 xcb.VoidCookie())

    def MapWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, True),
                                 xcb.VoidCookie())

    def MapWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 8, True, False),
                                 xcb.VoidCookie())

    def MapSubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, True),
                                 xcb.VoidCookie())

    def MapSubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 9, True, False),
                                 xcb.VoidCookie())

    def UnmapWindowChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, True),
                                 xcb.VoidCookie())

    def UnmapWindow(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 10, True, False),
                                 xcb.VoidCookie())

    def UnmapSubwindowsChecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, True),
                                 xcb.VoidCookie())

    def UnmapSubwindows(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 11, True, False),
                                 xcb.VoidCookie())

    def ConfigureWindowChecked(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, True),
                                 xcb.VoidCookie())

    def ConfigureWindow(self, window, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 12, True, False),
                                 xcb.VoidCookie())

    def CirculateWindowChecked(self, direction, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, True),
                                 xcb.VoidCookie())

    def CirculateWindow(self, direction, window):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', direction, window))
        return self.send_request(xcb.Request(buf.getvalue(), 13, True, False),
                                 xcb.VoidCookie())

    def GetGeometry(self, drawable):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, True),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def GetGeometryUnchecked(self, drawable):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', drawable))
        return self.send_request(xcb.Request(buf.getvalue(), 14, False, False),
                                 GetGeometryCookie(),
                                 GetGeometryReply)

    def QueryTree(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, True),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def QueryTreeUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 15, False, False),
                                 QueryTreeCookie(),
                                 QueryTreeReply)

    def InternAtom(self, only_if_exists, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, True),
                                 InternAtomCookie(),
                                 InternAtomReply)

    def InternAtomUnchecked(self, only_if_exists, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xH2x', only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 16, False, False),
                                 InternAtomCookie(),
                                 InternAtomReply)

    def GetAtomName(self, atom):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, True),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)

    def GetAtomNameUnchecked(self, atom):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', atom))
        return self.send_request(xcb.Request(buf.getvalue(), 17, False, False),
                                 GetAtomNameCookie(),
                                 GetAtomNameReply)

    def ChangePropertyChecked(self, mode, window, property, type, format, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, True),
                                 xcb.VoidCookie())

    def ChangeProperty(self, mode, window, property, type, format, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIB3xI', mode, window, property, type, format, data_len))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 18, True, False),
                                 xcb.VoidCookie())

    def DeletePropertyChecked(self, window, property):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, True),
                                 xcb.VoidCookie())

    def DeleteProperty(self, window, property):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', window, property))
        return self.send_request(xcb.Request(buf.getvalue(), 19, True, False),
                                 xcb.VoidCookie())

    def GetProperty(self, delete, window, property, type, long_offset, long_length):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, True),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def GetPropertyUnchecked(self, delete, window, property, type, long_offset, long_length):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIIII', delete, window, property, type, long_offset, long_length))
        return self.send_request(xcb.Request(buf.getvalue(), 20, False, False),
                                 GetPropertyCookie(),
                                 GetPropertyReply)

    def ListProperties(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, True),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def ListPropertiesUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 21, False, False),
                                 ListPropertiesCookie(),
                                 ListPropertiesReply)

    def SetSelectionOwnerChecked(self, owner, selection, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, True),
                                 xcb.VoidCookie())

    def SetSelectionOwner(self, owner, selection, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', owner, selection, time))
        return self.send_request(xcb.Request(buf.getvalue(), 22, True, False),
                                 xcb.VoidCookie())

    def GetSelectionOwner(self, selection):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, True),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def GetSelectionOwnerUnchecked(self, selection):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', selection))
        return self.send_request(xcb.Request(buf.getvalue(), 23, False, False),
                                 GetSelectionOwnerCookie(),
                                 GetSelectionOwnerReply)

    def ConvertSelectionChecked(self, requestor, selection, target, property, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, True),
                                 xcb.VoidCookie())

    def ConvertSelection(self, requestor, selection, target, property, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIII', requestor, selection, target, property, time))
        return self.send_request(xcb.Request(buf.getvalue(), 24, True, False),
                                 xcb.VoidCookie())

    def SendEventChecked(self, propagate, destination, event_mask, event):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(_array('b', event))))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, True),
                                 xcb.VoidCookie())

    def SendEvent(self, propagate, destination, event_mask, event):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', propagate, destination, event_mask))
        buf.write(str(buffer(_array('b', event))))
        return self.send_request(xcb.Request(buf.getvalue(), 25, True, False),
                                 xcb.VoidCookie())

    def GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, True),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def GrabPointerUnchecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIII', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time))
        return self.send_request(xcb.Request(buf.getvalue(), 26, False, False),
                                 GrabPointerCookie(),
                                 GrabPointerReply)

    def UngrabPointerChecked(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, True),
                                 xcb.VoidCookie())

    def UngrabPointer(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 27, True, False),
                                 xcb.VoidCookie())

    def GrabButtonChecked(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, True),
                                 xcb.VoidCookie())

    def GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBIIBxH', owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 28, True, False),
                                 xcb.VoidCookie())

    def UngrabButtonChecked(self, button, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, True),
                                 xcb.VoidCookie())

    def UngrabButton(self, button, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', button, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 29, True, False),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrabChecked(self, cursor, time, event_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, True),
                                 xcb.VoidCookie())

    def ChangeActivePointerGrab(self, cursor, time, event_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIH2x', cursor, time, event_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 30, True, False),
                                 xcb.VoidCookie())

    def GrabKeyboard(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, True),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def GrabKeyboardUnchecked(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIBB2x', owner_events, grab_window, time, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 31, False, False),
                                 GrabKeyboardCookie(),
                                 GrabKeyboardReply)

    def UngrabKeyboardChecked(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, True),
                                 xcb.VoidCookie())

    def UngrabKeyboard(self, time):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', time))
        return self.send_request(xcb.Request(buf.getvalue(), 32, True, False),
                                 xcb.VoidCookie())

    def GrabKeyChecked(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, True),
                                 xcb.VoidCookie())

    def GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHBBB3x', owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode))
        return self.send_request(xcb.Request(buf.getvalue(), 33, True, False),
                                 xcb.VoidCookie())

    def UngrabKeyChecked(self, key, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, True),
                                 xcb.VoidCookie())

    def UngrabKey(self, key, grab_window, modifiers):
        buf = _StringIO()
        buf.write(_pack('=xB2xIH2x', key, grab_window, modifiers))
        return self.send_request(xcb.Request(buf.getvalue(), 34, True, False),
                                 xcb.VoidCookie())

    def AllowEventsChecked(self, mode, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, True),
                                 xcb.VoidCookie())

    def AllowEvents(self, mode, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', mode, time))
        return self.send_request(xcb.Request(buf.getvalue(), 35, True, False),
                                 xcb.VoidCookie())

    def GrabServerChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, True),
                                 xcb.VoidCookie())

    def GrabServer(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 36, True, False),
                                 xcb.VoidCookie())

    def UngrabServerChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, True),
                                 xcb.VoidCookie())

    def UngrabServer(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 37, True, False),
                                 xcb.VoidCookie())

    def QueryPointer(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, True),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def QueryPointerUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 38, False, False),
                                 QueryPointerCookie(),
                                 QueryPointerReply)

    def GetMotionEvents(self, window, start, stop):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, True),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def GetMotionEventsUnchecked(self, window, start, stop):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', window, start, stop))
        return self.send_request(xcb.Request(buf.getvalue(), 39, False, False),
                                 GetMotionEventsCookie(),
                                 GetMotionEventsReply)

    def TranslateCoordinates(self, src_window, dst_window, src_x, src_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, True),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def TranslateCoordinatesUnchecked(self, src_window, dst_window, src_x, src_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', src_window, dst_window, src_x, src_y))
        return self.send_request(xcb.Request(buf.getvalue(), 40, False, False),
                                 TranslateCoordinatesCookie(),
                                 TranslateCoordinatesReply)

    def WarpPointerChecked(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, True),
                                 xcb.VoidCookie())

    def WarpPointer(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhhHHhh', src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y))
        return self.send_request(xcb.Request(buf.getvalue(), 41, True, False),
                                 xcb.VoidCookie())

    def SetInputFocusChecked(self, revert_to, focus, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, True),
                                 xcb.VoidCookie())

    def SetInputFocus(self, revert_to, focus, time):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', revert_to, focus, time))
        return self.send_request(xcb.Request(buf.getvalue(), 42, True, False),
                                 xcb.VoidCookie())

    def GetInputFocus(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, True),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def GetInputFocusUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 43, False, False),
                                 GetInputFocusCookie(),
                                 GetInputFocusReply)

    def QueryKeymap(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, True),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def QueryKeymapUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 44, False, False),
                                 QueryKeymapCookie(),
                                 QueryKeymapReply)

    def OpenFontChecked(self, fid, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, True),
                                 xcb.VoidCookie())

    def OpenFont(self, fid, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', fid, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 45, True, False),
                                 xcb.VoidCookie())

    def CloseFontChecked(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, True),
                                 xcb.VoidCookie())

    def CloseFont(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 46, True, False),
                                 xcb.VoidCookie())

    def QueryFont(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, True),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryFontUnchecked(self, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', font))
        return self.send_request(xcb.Request(buf.getvalue(), 47, False, False),
                                 QueryFontCookie(),
                                 QueryFontReply)

    def QueryTextExtents(self, font, string_len, string):
        buf = _StringIO()
        buf.write(_pack('=x', ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, True),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def QueryTextExtentsUnchecked(self, font, string_len, string):
        buf = _StringIO()
        buf.write(_pack('=x', ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 48, False, False),
                                 QueryTextExtentsCookie(),
                                 QueryTextExtentsReply)

    def ListFonts(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, True),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsUnchecked(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 49, False, False),
                                 ListFontsCookie(),
                                 ListFontsReply)

    def ListFontsWithInfo(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, True),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def ListFontsWithInfoUnchecked(self, max_names, pattern_len, pattern):
        buf = _StringIO()
        buf.write(_pack('=xx2xHH', max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))
        return self.send_request(xcb.Request(buf.getvalue(), 50, False, False),
                                 ListFontsWithInfoCookie(),
                                 ListFontsWithInfoReply)

    def SetFontPathChecked(self, font_qty, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, True),
                                 xcb.VoidCookie())

    def SetFontPath(self, font_qty, font):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', font_qty))
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 51, True, False),
                                 xcb.VoidCookie())

    def GetFontPath(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, True),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def GetFontPathUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 52, False, False),
                                 GetFontPathCookie(),
                                 GetFontPathReply)

    def CreatePixmapChecked(self, depth, pid, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, True),
                                 xcb.VoidCookie())

    def CreatePixmap(self, depth, pid, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHH', depth, pid, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 53, True, False),
                                 xcb.VoidCookie())

    def FreePixmapChecked(self, pixmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, True),
                                 xcb.VoidCookie())

    def FreePixmap(self, pixmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', pixmap))
        return self.send_request(xcb.Request(buf.getvalue(), 54, True, False),
                                 xcb.VoidCookie())

    def CreateGCChecked(self, cid, drawable, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, True),
                                 xcb.VoidCookie())

    def CreateGC(self, cid, drawable, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', cid, drawable, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 55, True, False),
                                 xcb.VoidCookie())

    def ChangeGCChecked(self, gc, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, True),
                                 xcb.VoidCookie())

    def ChangeGC(self, gc, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', gc, value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 56, True, False),
                                 xcb.VoidCookie())

    def CopyGCChecked(self, src_gc, dst_gc, value_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, True),
                                 xcb.VoidCookie())

    def CopyGC(self, src_gc, dst_gc, value_mask):
        buf = _StringIO()
        buf.write(_pack('=xx2xIII', src_gc, dst_gc, value_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 57, True, False),
                                 xcb.VoidCookie())

    def SetDashesChecked(self, gc, dash_offset, dashes_len, dashes):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(_array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, True),
                                 xcb.VoidCookie())

    def SetDashes(self, gc, dash_offset, dashes_len, dashes):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHH', gc, dash_offset, dashes_len))
        buf.write(str(buffer(_array('B', dashes))))
        return self.send_request(xcb.Request(buf.getvalue(), 58, True, False),
                                 xcb.VoidCookie())

    def SetClipRectanglesChecked(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, True),
                                 xcb.VoidCookie())

    def SetClipRectangles(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhh', ordering, gc, clip_x_origin, clip_y_origin))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 59, True, False),
                                 xcb.VoidCookie())

    def FreeGCChecked(self, gc):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, True),
                                 xcb.VoidCookie())

    def FreeGC(self, gc):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', gc))
        return self.send_request(xcb.Request(buf.getvalue(), 60, True, False),
                                 xcb.VoidCookie())

    def ClearAreaChecked(self, exposures, window, x, y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, True),
                                 xcb.VoidCookie())

    def ClearArea(self, exposures, window, x, y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHH', exposures, window, x, y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 61, True, False),
                                 xcb.VoidCookie())

    def CopyAreaChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, True),
                                 xcb.VoidCookie())

    def CopyArea(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHH', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 62, True, False),
                                 xcb.VoidCookie())

    def CopyPlaneChecked(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, True),
                                 xcb.VoidCookie())

    def CopyPlane(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIhhhhHHI', src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane))
        return self.send_request(xcb.Request(buf.getvalue(), 63, True, False),
                                 xcb.VoidCookie())

    def PolyPointChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, True),
                                 xcb.VoidCookie())

    def PolyPoint(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 64, True, False),
                                 xcb.VoidCookie())

    def PolyLineChecked(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, True),
                                 xcb.VoidCookie())

    def PolyLine(self, coordinate_mode, drawable, gc, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xB2xII', coordinate_mode, drawable, gc))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 65, True, False),
                                 xcb.VoidCookie())

    def PolySegmentChecked(self, drawable, gc, segments_len, segments):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, True),
                                 xcb.VoidCookie())

    def PolySegment(self, drawable, gc, segments_len, segments):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 66, True, False),
                                 xcb.VoidCookie())

    def PolyRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, True),
                                 xcb.VoidCookie())

    def PolyRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 67, True, False),
                                 xcb.VoidCookie())

    def PolyArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, True),
                                 xcb.VoidCookie())

    def PolyArc(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 68, True, False),
                                 xcb.VoidCookie())

    def FillPolyChecked(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, True),
                                 xcb.VoidCookie())

    def FillPoly(self, drawable, gc, shape, coordinate_mode, points_len, points):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIBB2x', drawable, gc, shape, coordinate_mode))
        for elt in xcb.Iterator(points, 2, 'points', True):
            buf.write(_pack('=hh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 69, True, False),
                                 xcb.VoidCookie())

    def PolyFillRectangleChecked(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, True),
                                 xcb.VoidCookie())

    def PolyFillRectangle(self, drawable, gc, rectangles_len, rectangles):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 70, True, False),
                                 xcb.VoidCookie())

    def PolyFillArcChecked(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, True),
                                 xcb.VoidCookie())

    def PolyFillArc(self, drawable, gc, arcs_len, arcs):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', drawable, gc))
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 71, True, False),
                                 xcb.VoidCookie())

    def PutImageChecked(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, True),
                                 xcb.VoidCookie())

    def PutImage(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIHHhhBB2x', format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth))
        buf.write(str(buffer(_array('B', data))))
        return self.send_request(xcb.Request(buf.getvalue(), 72, True, False),
                                 xcb.VoidCookie())

    def GetImage(self, format, drawable, x, y, width, height, plane_mask):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, True),
                                 GetImageCookie(),
                                 GetImageReply)

    def GetImageUnchecked(self, format, drawable, x, y, width, height, plane_mask):
        buf = _StringIO()
        buf.write(_pack('=xB2xIhhHHI', format, drawable, x, y, width, height, plane_mask))
        return self.send_request(xcb.Request(buf.getvalue(), 73, False, False),
                                 GetImageCookie(),
                                 GetImageReply)

    def PolyText8Checked(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, True),
                                 xcb.VoidCookie())

    def PolyText8(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 74, True, False),
                                 xcb.VoidCookie())

    def PolyText16Checked(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, True),
                                 xcb.VoidCookie())

    def PolyText16(self, drawable, gc, x, y, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIhh', drawable, gc, x, y))
        buf.write(str(buffer(_array('B', items))))
        return self.send_request(xcb.Request(buf.getvalue(), 75, True, False),
                                 xcb.VoidCookie())

    def ImageText8Checked(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(_array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, True),
                                 xcb.VoidCookie())

    def ImageText8(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        buf.write(str(buffer(_array('b', string))))
        return self.send_request(xcb.Request(buf.getvalue(), 76, True, False),
                                 xcb.VoidCookie())

    def ImageText16Checked(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, True),
                                 xcb.VoidCookie())

    def ImageText16(self, string_len, drawable, gc, x, y, string):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIhh', string_len, drawable, gc, x, y))
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 77, True, False),
                                 xcb.VoidCookie())

    def CreateColormapChecked(self, alloc, mid, window, visual):
        buf = _StringIO()
        buf.write(_pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, True),
                                 xcb.VoidCookie())

    def CreateColormap(self, alloc, mid, window, visual):
        buf = _StringIO()
        buf.write(_pack('=xB2xIII', alloc, mid, window, visual))
        return self.send_request(xcb.Request(buf.getvalue(), 78, True, False),
                                 xcb.VoidCookie())

    def FreeColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, True),
                                 xcb.VoidCookie())

    def FreeColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 79, True, False),
                                 xcb.VoidCookie())

    def CopyColormapAndFreeChecked(self, mid, src_cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, True),
                                 xcb.VoidCookie())

    def CopyColormapAndFree(self, mid, src_cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', mid, src_cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 80, True, False),
                                 xcb.VoidCookie())

    def InstallColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, True),
                                 xcb.VoidCookie())

    def InstallColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 81, True, False),
                                 xcb.VoidCookie())

    def UninstallColormapChecked(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, True),
                                 xcb.VoidCookie())

    def UninstallColormap(self, cmap):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        return self.send_request(xcb.Request(buf.getvalue(), 82, True, False),
                                 xcb.VoidCookie())

    def ListInstalledColormaps(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, True),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def ListInstalledColormapsUnchecked(self, window):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', window))
        return self.send_request(xcb.Request(buf.getvalue(), 83, False, False),
                                 ListInstalledColormapsCookie(),
                                 ListInstalledColormapsReply)

    def AllocColor(self, cmap, red, green, blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, True),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocColorUnchecked(self, cmap, red, green, blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHH2x', cmap, red, green, blue))
        return self.send_request(xcb.Request(buf.getvalue(), 84, False, False),
                                 AllocColorCookie(),
                                 AllocColorReply)

    def AllocNamedColor(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, True),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocNamedColorUnchecked(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 85, False, False),
                                 AllocNamedColorCookie(),
                                 AllocNamedColorReply)

    def AllocColorCells(self, contiguous, cmap, colors, planes):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, True),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorCellsUnchecked(self, contiguous, cmap, colors, planes):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', contiguous, cmap, colors, planes))
        return self.send_request(xcb.Request(buf.getvalue(), 86, False, False),
                                 AllocColorCellsCookie(),
                                 AllocColorCellsReply)

    def AllocColorPlanes(self, contiguous, cmap, colors, reds, greens, blues):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, True),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def AllocColorPlanesUnchecked(self, contiguous, cmap, colors, reds, greens, blues):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHHHH', contiguous, cmap, colors, reds, greens, blues))
        return self.send_request(xcb.Request(buf.getvalue(), 87, False, False),
                                 AllocColorPlanesCookie(),
                                 AllocColorPlanesReply)

    def FreeColorsChecked(self, cmap, plane_mask, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, True),
                                 xcb.VoidCookie())

    def FreeColors(self, cmap, plane_mask, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xII', cmap, plane_mask))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 88, True, False),
                                 xcb.VoidCookie())

    def StoreColorsChecked(self, cmap, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, True),
                                 xcb.VoidCookie())

    def StoreColors(self, cmap, items_len, items):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))
        return self.send_request(xcb.Request(buf.getvalue(), 89, True, False),
                                 xcb.VoidCookie())

    def StoreNamedColorChecked(self, flags, cmap, pixel, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, True),
                                 xcb.VoidCookie())

    def StoreNamedColor(self, flags, cmap, pixel, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xB2xIIH2x', flags, cmap, pixel, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 90, True, False),
                                 xcb.VoidCookie())

    def QueryColors(self, cmap, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, True),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def QueryColorsUnchecked(self, cmap, pixels_len, pixels):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cmap))
        buf.write(str(buffer(_array('I', pixels))))
        return self.send_request(xcb.Request(buf.getvalue(), 91, False, False),
                                 QueryColorsCookie(),
                                 QueryColorsReply)

    def LookupColor(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, True),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def LookupColorUnchecked(self, cmap, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xIH2x', cmap, name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 92, False, False),
                                 LookupColorCookie(),
                                 LookupColorReply)

    def CreateCursorChecked(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, True),
                                 xcb.VoidCookie())

    def CreateCursor(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y))
        return self.send_request(xcb.Request(buf.getvalue(), 93, True, False),
                                 xcb.VoidCookie())

    def CreateGlyphCursorChecked(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, True),
                                 xcb.VoidCookie())

    def CreateGlyphCursor(self, cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIIIHHHHHHHH', cid, source_font, mask_font, source_char, mask_char, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 94, True, False),
                                 xcb.VoidCookie())

    def FreeCursorChecked(self, cursor):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, True),
                                 xcb.VoidCookie())

    def FreeCursor(self, cursor):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', cursor))
        return self.send_request(xcb.Request(buf.getvalue(), 95, True, False),
                                 xcb.VoidCookie())

    def RecolorCursorChecked(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, True),
                                 xcb.VoidCookie())

    def RecolorCursor(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHHHHHH', cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue))
        return self.send_request(xcb.Request(buf.getvalue(), 96, True, False),
                                 xcb.VoidCookie())

    def QueryBestSize(self, _class, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, True),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryBestSizeUnchecked(self, _class, drawable, width, height):
        buf = _StringIO()
        buf.write(_pack('=xB2xIHH', _class, drawable, width, height))
        return self.send_request(xcb.Request(buf.getvalue(), 97, False, False),
                                 QueryBestSizeCookie(),
                                 QueryBestSizeReply)

    def QueryExtension(self, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, True),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def QueryExtensionUnchecked(self, name_len, name):
        buf = _StringIO()
        buf.write(_pack('=xx2xH2x', name_len))
        buf.write(str(buffer(_array('b', name))))
        return self.send_request(xcb.Request(buf.getvalue(), 98, False, False),
                                 QueryExtensionCookie(),
                                 QueryExtensionReply)

    def ListExtensions(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, True),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ListExtensionsUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 99, False, False),
                                 ListExtensionsCookie(),
                                 ListExtensionsReply)

    def ChangeKeyboardMappingChecked(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = _StringIO()
        buf.write(_pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(_array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardMapping(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        buf = _StringIO()
        buf.write(_pack('=xB2xBB2x', keycode_count, first_keycode, keysyms_per_keycode))
        buf.write(str(buffer(_array('I', keysyms))))
        return self.send_request(xcb.Request(buf.getvalue(), 100, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardMapping(self, first_keycode, count):
        buf = _StringIO()
        buf.write(_pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, True),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def GetKeyboardMappingUnchecked(self, first_keycode, count):
        buf = _StringIO()
        buf.write(_pack('=xx2xBB', first_keycode, count))
        return self.send_request(xcb.Request(buf.getvalue(), 101, False, False),
                                 GetKeyboardMappingCookie(),
                                 GetKeyboardMappingReply)

    def ChangeKeyboardControlChecked(self, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, True),
                                 xcb.VoidCookie())

    def ChangeKeyboardControl(self, value_mask, value_list):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', value_mask))
        buf.write(str(buffer(_array('I', value_list))))
        return self.send_request(xcb.Request(buf.getvalue(), 102, True, False),
                                 xcb.VoidCookie())

    def GetKeyboardControl(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, True),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def GetKeyboardControlUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 103, False, False),
                                 GetKeyboardControlCookie(),
                                 GetKeyboardControlReply)

    def BellChecked(self, percent):
        buf = _StringIO()
        buf.write(_pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, True),
                                 xcb.VoidCookie())

    def Bell(self, percent):
        buf = _StringIO()
        buf.write(_pack('=xb2x', percent))
        return self.send_request(xcb.Request(buf.getvalue(), 104, True, False),
                                 xcb.VoidCookie())

    def ChangePointerControlChecked(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, True),
                                 xcb.VoidCookie())

    def ChangePointerControl(self, acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhhBB', acceleration_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold))
        return self.send_request(xcb.Request(buf.getvalue(), 105, True, False),
                                 xcb.VoidCookie())

    def GetPointerControl(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, True),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def GetPointerControlUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 106, False, False),
                                 GetPointerControlCookie(),
                                 GetPointerControlReply)

    def SetScreenSaverChecked(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, True),
                                 xcb.VoidCookie())

    def SetScreenSaver(self, timeout, interval, prefer_blanking, allow_exposures):
        buf = _StringIO()
        buf.write(_pack('=xx2xhhBB', timeout, interval, prefer_blanking, allow_exposures))
        return self.send_request(xcb.Request(buf.getvalue(), 107, True, False),
                                 xcb.VoidCookie())

    def GetScreenSaver(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, True),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def GetScreenSaverUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 108, False, False),
                                 GetScreenSaverCookie(),
                                 GetScreenSaverReply)

    def ChangeHostsChecked(self, mode, family, address_len, address):
        buf = _StringIO()
        buf.write(_pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(_array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, True),
                                 xcb.VoidCookie())

    def ChangeHosts(self, mode, family, address_len, address):
        buf = _StringIO()
        buf.write(_pack('=xB2xBxH', mode, family, address_len))
        buf.write(str(buffer(_array('B', address))))
        return self.send_request(xcb.Request(buf.getvalue(), 109, True, False),
                                 xcb.VoidCookie())

    def ListHosts(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, True),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def ListHostsUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 110, False, False),
                                 ListHostsCookie(),
                                 ListHostsReply)

    def SetAccessControlChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, True),
                                 xcb.VoidCookie())

    def SetAccessControl(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 111, True, False),
                                 xcb.VoidCookie())

    def SetCloseDownModeChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, True),
                                 xcb.VoidCookie())

    def SetCloseDownMode(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 112, True, False),
                                 xcb.VoidCookie())

    def KillClientChecked(self, resource):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, True),
                                 xcb.VoidCookie())

    def KillClient(self, resource):
        buf = _StringIO()
        buf.write(_pack('=xx2xI', resource))
        return self.send_request(xcb.Request(buf.getvalue(), 113, True, False),
                                 xcb.VoidCookie())

    def RotatePropertiesChecked(self, window, atoms_len, delta, atoms):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(_array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, True),
                                 xcb.VoidCookie())

    def RotateProperties(self, window, atoms_len, delta, atoms):
        buf = _StringIO()
        buf.write(_pack('=xx2xIHh', window, atoms_len, delta))
        buf.write(str(buffer(_array('I', atoms))))
        return self.send_request(xcb.Request(buf.getvalue(), 114, True, False),
                                 xcb.VoidCookie())

    def ForceScreenSaverChecked(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, True),
                                 xcb.VoidCookie())

    def ForceScreenSaver(self, mode):
        buf = _StringIO()
        buf.write(_pack('=xB2x', mode))
        return self.send_request(xcb.Request(buf.getvalue(), 115, True, False),
                                 xcb.VoidCookie())

    def SetPointerMapping(self, map_len, map):
        buf = _StringIO()
        buf.write(_pack('=xB2x', map_len))
        buf.write(str(buffer(_array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, True),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def SetPointerMappingUnchecked(self, map_len, map):
        buf = _StringIO()
        buf.write(_pack('=xB2x', map_len))
        buf.write(str(buffer(_array('B', map))))
        return self.send_request(xcb.Request(buf.getvalue(), 116, False, False),
                                 SetPointerMappingCookie(),
                                 SetPointerMappingReply)

    def GetPointerMapping(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, True),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def GetPointerMappingUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 117, False, False),
                                 GetPointerMappingCookie(),
                                 GetPointerMappingReply)

    def SetModifierMapping(self, keycodes_per_modifier, keycodes):
        buf = _StringIO()
        buf.write(_pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(_array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, True),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def SetModifierMappingUnchecked(self, keycodes_per_modifier, keycodes):
        buf = _StringIO()
        buf.write(_pack('=xB2x', keycodes_per_modifier))
        buf.write(str(buffer(_array('B', keycodes))))
        return self.send_request(xcb.Request(buf.getvalue(), 118, False, False),
                                 SetModifierMappingCookie(),
                                 SetModifierMappingReply)

    def GetModifierMapping(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, True),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def GetModifierMappingUnchecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 119, False, False),
                                 GetModifierMappingCookie(),
                                 GetModifierMappingReply)

    def NoOperationChecked(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, True),
                                 xcb.VoidCookie())

    def NoOperation(self, ):
        buf = _StringIO()
        buf.write(_pack('=xx2x', ))
        return self.send_request(xcb.Request(buf.getvalue(), 127, True, False),
                                 xcb.VoidCookie())

* Sun 18 May 2014 01:36:48 AM JST
buf = _StringIO()
* Sun 18 May 2014 01:37:20 AM JST
buf.write(_pack(
* Sun 18 May 2014 01:39:32 AM JST
getkeyboardcontrol
* Sun 18 May 2014 01:39:59 AM JST
GetKeyboardControl
* Sun 18 May 2014 01:40:20 AM JST
'=xx2x'
* Sun 18 May 2014 01:41:04 AM JST
getkeyboardmapping
* Sun 18 May 2014 01:41:24 AM JST
GetKeyboardMapping
* Sun 18 May 2014 01:41:48 AM JST
'=xx2xBB'
* Sun 18 May 2014 01:41:53 AM JST
first_keycode, count
* Sun 18 May 2014 01:43:27 AM JST
getmodifiermapping
* Sun 18 May 2014 01:43:56 AM JST
GetModifierMapping
* Sun 18 May 2014 01:44:13 AM JST
'=xx2x'
* Sun 18 May 2014 01:45:18 AM JST
getmotionevents
* Sun 18 May 2014 01:45:35 AM JST
GetMotionEvents
* Sun 18 May 2014 01:45:52 AM JST
'=xx2xIII'
* Sun 18 May 2014 01:45:58 AM JST
window, start, stop
* Sun 18 May 2014 01:47:17 AM JST
getpointercontrol
* Sun 18 May 2014 01:47:34 AM JST
GetPointerControl
* Sun 18 May 2014 01:47:52 AM JST
'=xx2x'
* Sun 18 May 2014 01:48:25 AM JST
getpointermapping
* Sun 18 May 2014 01:48:41 AM JST
GetPointerMapping
* Sun 18 May 2014 01:48:58 AM JST
'=xx2x'
* Sun 18 May 2014 01:52:35 AM JST
getproperty
* Sun 18 May 2014 01:53:17 AM JST
GetProperty
* Sun 18 May 2014 01:53:35 AM JST
'=xB2xIIIII'
* Sun 18 May 2014 01:53:43 AM JST
delete, window, property, type, long_offset, long_length
* Sun 18 May 2014 01:54:33 AM JST
getscreensaver
* Sun 18 May 2014 01:54:56 AM JST
GetScreenSaver
* Sun 18 May 2014 01:55:12 AM JST
'=xx2x'
* Sun 18 May 2014 01:55:54 AM JST
getselectionowner
* Sun 18 May 2014 01:56:08 AM JST
GetSelectionOwner
* Sun 18 May 2014 01:56:22 AM JST
'=xx2xI'
* Sun 18 May 2014 01:56:28 AM JST
selection
* Sun 18 May 2014 01:56:58 AM JST
getwindowattributes
* Sun 18 May 2014 01:57:12 AM JST
GetWindowAttributes
* Sun 18 May 2014 01:57:26 AM JST
'=xx2xI'
* Sun 18 May 2014 01:59:46 AM JST
grabbutton
* Sun 18 May 2014 02:00:03 AM JST
GrabButton
* Sun 18 May 2014 02:00:24 AM JST
'=xB2xIHBBIIBxH'
* Sun 18 May 2014 02:00:32 AM JST
owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers
* Sun 18 May 2014 02:01:17 AM JST
VoidCookie
* Sun 18 May 2014 02:01:19 AM JST

* Sun 18 May 2014 02:01:19 AM JST

* Sun 18 May 2014 02:01:19 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 02:01:27 AM JST
grabkey
* Sun 18 May 2014 02:01:50 AM JST
GrabKey
* Sun 18 May 2014 02:02:11 AM JST
'=xB2xIHBBB3x'
* Sun 18 May 2014 02:02:18 AM JST
owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode
* Sun 18 May 2014 02:03:04 AM JST
VoidCookie
* Sun 18 May 2014 02:03:06 AM JST

* Sun 18 May 2014 02:03:06 AM JST

* Sun 18 May 2014 02:03:07 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 02:03:24 AM JST
grabkeyboard
* Sun 18 May 2014 02:03:40 AM JST
GrabKeyboard
* Sun 18 May 2014 02:04:02 AM JST
'=xB2xIIBB2x'
* Sun 18 May 2014 02:04:08 AM JST
owner_events, grab_window, time, pointer_mode, keyboard_mode
* Sun 18 May 2014 02:14:41 AM JST
grabpointer
* Sun 18 May 2014 02:14:56 AM JST
GrabPointer
* Sun 18 May 2014 02:15:15 AM JST
'=xB2xIHBBIII'
* Sun 18 May 2014 02:15:20 AM JST
owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time
* Sun 18 May 2014 02:15:53 AM JST
                
* Sun 18 May 2014 02:15:58 AM JST
                
* Sun 18 May 2014 02:16:13 AM JST
grabserver
* Sun 18 May 2014 02:16:27 AM JST
GrabServer
* Sun 18 May 2014 02:16:43 AM JST
'=xx2x'
* Sun 18 May 2014 02:17:09 AM JST
            
* Sun 18 May 2014 02:17:15 AM JST
VoidCookie
* Sun 18 May 2014 02:17:17 AM JST

* Sun 18 May 2014 02:17:17 AM JST

* Sun 18 May 2014 02:17:17 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 02:17:30 AM JST
imagetext16
* Sun 18 May 2014 02:17:47 AM JST
ImageText16
* Sun 18 May 2014 02:18:05 AM JST
'=BB'
* Sun 18 May 2014 02:18:17 AM JST
string_len, drawable, gc, x, y, string
* Sun 18 May 2014 02:18:57 AM JST
'=xB2xIIhh'
* Sun 18 May 2014 02:19:07 AM JST
VoidCookie
* Sun 18 May 2014 02:19:10 AM JST

* Sun 18 May 2014 02:19:10 AM JST

* Sun 18 May 2014 02:19:10 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 02:19:19 AM JST
            
* Sun 18 May 2014 02:19:33 AM JST
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))

* Sun 18 May 2014 02:20:01 AM JST
xcb.
* Sun 18 May 2014 02:20:10 AM JST
        for elt in Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))

* Sun 18 May 2014 02:21:05 AM JST
imagetext8
* Sun 18 May 2014 02:21:21 AM JST
ImageText8
* Sun 18 May 2014 02:21:36 AM JST
'=xB2xIIhh'
* Sun 18 May 2014 02:21:41 AM JST
string_len, drawable, gc, x, y
* Sun 18 May 2014 02:22:14 AM JST
buf.write(str(buffer(_array('b', string))))
* Sun 18 May 2014 02:22:36 AM JST
, string
* Sun 18 May 2014 02:23:10 AM JST
buf.write(str(buffer(_array('b', string))))
* Sun 18 May 2014 02:24:05 AM JST
installcolormap
* Sun 18 May 2014 02:24:20 AM JST
InstallColormap
* Sun 18 May 2014 02:24:33 AM JST
'=xx2xI'
* Sun 18 May 2014 02:25:02 AM JST
            
* Sun 18 May 2014 02:25:06 AM JST
VoidCookie
* Sun 18 May 2014 02:25:09 AM JST

* Sun 18 May 2014 02:25:09 AM JST

* Sun 18 May 2014 02:25:09 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 02:27:45 AM JST
internatom
* Sun 18 May 2014 02:27:51 AM JST
killclient
* Sun 18 May 2014 02:28:05 AM JST
KillClient
* Sun 18 May 2014 02:28:23 AM JST
'=xx2xI'
* Sun 18 May 2014 02:28:32 AM JST
resource
* Sun 18 May 2014 02:28:57 AM JST
            
* Sun 18 May 2014 02:29:03 AM JST
VoidCookie
* Sun 18 May 2014 02:29:05 AM JST

* Sun 18 May 2014 02:29:05 AM JST

* Sun 18 May 2014 02:29:05 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 02:29:24 AM JST
listextensions
* Sun 18 May 2014 02:29:37 AM JST
ListExtensions
* Sun 18 May 2014 02:29:51 AM JST
'=xx2x'
* Sun 18 May 2014 02:30:49 AM JST
listfonts
* Sun 18 May 2014 02:31:02 AM JST
ListFonts
* Sun 18 May 2014 02:31:21 AM JST
'=xx2xHH'
* Sun 18 May 2014 02:31:31 AM JST
max_names, pattern_len, pattern
* Sun 18 May 2014 02:32:27 AM JST
buf.write(str(buffer(_array('b', pattern))))
* Sun 18 May 2014 02:33:27 AM JST
listfontswithinfo
* Sun 18 May 2014 02:33:44 AM JST
ListFontsWithInfo
* Sun 18 May 2014 02:34:01 AM JST
'=xx2xHH'
* Sun 18 May 2014 02:34:05 AM JST
max_names, pattern_len
* Sun 18 May 2014 02:34:10 AM JST
max_names, pattern_len, pattern
* Sun 18 May 2014 02:35:11 AM JST
buf.write(str(buffer(_array('b', pattern))))
* Sun 18 May 2014 02:35:22 AM JST
pattern
* Sun 18 May 2014 02:35:31 AM JST
buf.write(str(buffer(_array('b', pattern))))
* Sun 18 May 2014 02:36:03 AM JST
listhosts
* Sun 18 May 2014 02:36:32 AM JST
ListHosts
* Sun 18 May 2014 02:36:51 AM JST
'=xx2x'
* Sun 18 May 2014 02:37:25 AM JST
listinstalledcolormaps
* Sun 18 May 2014 02:38:36 AM JST
ListInstalledColormaps
* Sun 18 May 2014 02:38:55 AM JST
'=xx2xI'
* Sun 18 May 2014 02:40:29 AM JST
listproperties
* Sun 18 May 2014 02:40:41 AM JST
ListProperties
* Sun 18 May 2014 02:40:56 AM JST
'=xx2xI'
* Sun 18 May 2014 02:41:52 AM JST
lookupcolor
* Sun 18 May 2014 02:42:06 AM JST
LookupColor
* Sun 18 May 2014 02:42:23 AM JST
'=xx2xIH2x'
* Sun 18 May 2014 02:42:30 AM JST
cmap, name_len, name
* Sun 18 May 2014 02:43:13 AM JST
mapsubwindows
* Sun 18 May 2014 02:44:05 AM JST
mapsubwindows
* Sun 18 May 2014 02:44:37 AM JST
MapSubwindows
* Sun 18 May 2014 02:45:06 AM JST
'=xx2xI'
* Sun 18 May 2014 02:45:59 AM JST
VoidCookie
* Sun 18 May 2014 02:46:01 AM JST

* Sun 18 May 2014 02:46:01 AM JST

* Sun 18 May 2014 02:46:01 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 02:46:11 AM JST
mapwindow
* Sun 18 May 2014 02:46:27 AM JST
MapWindow
* Sun 18 May 2014 02:46:39 AM JST
'=xx2xI'
* Sun 18 May 2014 02:47:01 AM JST
    
* Sun 18 May 2014 02:47:16 AM JST
VoidCookie
* Sun 18 May 2014 02:47:18 AM JST

* Sun 18 May 2014 02:47:18 AM JST

* Sun 18 May 2014 02:47:18 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 02:47:48 AM JST
nooperation
* Sun 18 May 2014 02:48:02 AM JST
NoOperation
* Sun 18 May 2014 02:48:11 AM JST
'=xx2x'
* Sun 18 May 2014 02:48:43 AM JST
            
* Sun 18 May 2014 02:48:58 AM JST
VoidCookie
* Sun 18 May 2014 02:49:00 AM JST

* Sun 18 May 2014 02:49:00 AM JST

* Sun 18 May 2014 02:49:00 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 02:49:33 AM JST
openfont
* Sun 18 May 2014 02:49:48 AM JST
OpenFont
* Sun 18 May 2014 02:49:57 AM JST
'=xx2xIH2x'
* Sun 18 May 2014 02:50:07 AM JST
fid, name_len, name
* Sun 18 May 2014 02:50:34 AM JST
            
* Sun 18 May 2014 02:50:42 AM JST
buf.write(str(buffer(_array('b', name))))
* Sun 18 May 2014 02:51:20 AM JST
VoidCookie
* Sun 18 May 2014 02:51:21 AM JST

* Sun 18 May 2014 02:51:21 AM JST

* Sun 18 May 2014 02:51:22 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 02:51:33 AM JST
polyarc
* Sun 18 May 2014 02:51:46 AM JST
PolyArc
* Sun 18 May 2014 02:51:59 AM JST
'=xx2xII'
* Sun 18 May 2014 02:52:06 AM JST
drawable, gc, arcs_len, arcs
* Sun 18 May 2014 02:52:35 AM JST
            
* Sun 18 May 2014 02:52:45 AM JST
VoidCookie
* Sun 18 May 2014 02:52:47 AM JST

* Sun 18 May 2014 02:52:47 AM JST

* Sun 18 May 2014 02:52:47 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 02:53:07 AM JST
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))

* Sun 18 May 2014 02:54:31 AM JST
arcs
* Sun 18 May 2014 02:54:32 AM JST
arcs_len, arcs
* Sun 18 May 2014 02:54:38 AM JST
xcb.
* Sun 18 May 2014 02:54:50 AM JST
        for elt in Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))

* Sun 18 May 2014 02:54:55 AM JST
arcs
* Sun 18 May 2014 02:54:56 AM JST
arcs_len, arcs
* Sun 18 May 2014 02:55:09 AM JST
polyfillarc
* Sun 18 May 2014 02:55:17 AM JST
polyfillarc
* Sun 18 May 2014 02:55:43 AM JST
PolyFillArc
* Sun 18 May 2014 02:55:53 AM JST
'=xx2xII'
* Sun 18 May 2014 02:55:59 AM JST
drawable, gc, arcs_len, arcs
* Sun 18 May 2014 02:56:34 AM JST
            
* Sun 18 May 2014 02:56:38 AM JST
arcs
* Sun 18 May 2014 02:56:39 AM JST
arcs_len, arcs
* Sun 18 May 2014 02:56:47 AM JST
        for elt in xcb.Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))

* Sun 18 May 2014 02:56:58 AM JST
xcb.
* Sun 18 May 2014 02:57:09 AM JST
        for elt in Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))

* Sun 18 May 2014 02:57:18 AM JST
VoidCookie
* Sun 18 May 2014 02:57:22 AM JST

* Sun 18 May 2014 02:57:22 AM JST

* Sun 18 May 2014 02:57:22 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 02:57:39 AM JST
polyfillrectangle
* Sun 18 May 2014 02:57:55 AM JST
PolyFillRectangle
* Sun 18 May 2014 02:58:25 AM JST
'=xx2xII'
* Sun 18 May 2014 02:58:31 AM JST
drawable, gc, rectangles_len, rectangles
* Sun 18 May 2014 02:59:06 AM JST
            
* Sun 18 May 2014 02:59:11 AM JST
VoidCookie
* Sun 18 May 2014 02:59:12 AM JST

* Sun 18 May 2014 02:59:12 AM JST

* Sun 18 May 2014 02:59:13 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 02:59:29 AM JST
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))

* Sun 18 May 2014 02:59:37 AM JST
xcb.
* Sun 18 May 2014 02:59:49 AM JST
        for elt in Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))

* Sun 18 May 2014 02:59:55 AM JST
rectangles
* Sun 18 May 2014 02:59:56 AM JST
rectangles_len, rectangles
* Sun 18 May 2014 03:01:52 AM JST
polyline
* Sun 18 May 2014 03:02:14 AM JST
PolyLine
* Sun 18 May 2014 03:02:42 AM JST
'=xB2xII'
* Sun 18 May 2014 03:02:48 AM JST
coordinate_mode, drawable, gc, points_len, points
* Sun 18 May 2014 03:03:26 AM JST
            
* Sun 18 May 2014 03:03:41 AM JST
VoidCookie
* Sun 18 May 2014 03:03:44 AM JST

* Sun 18 May 2014 03:03:44 AM JST

* Sun 18 May 2014 03:03:44 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 03:04:06 AM JST
polypoint
* Sun 18 May 2014 03:04:27 AM JST
PolyPoint
* Sun 18 May 2014 03:04:36 AM JST
'=xB2xII'
* Sun 18 May 2014 03:04:44 AM JST
coordinate_mode, drawable, gc, points_len, points
* Sun 18 May 2014 03:05:25 AM JST
VoidCookie
* Sun 18 May 2014 03:05:27 AM JST

* Sun 18 May 2014 03:05:27 AM JST

* Sun 18 May 2014 03:05:28 AM JST
from xcb2.xproto import VoidCookie

* Sun 18 May 2014 03:05:36 AM JST
polyrectangle
* Sun 18 May 2014 03:05:58 AM JST
PolyRectangle
* Sun 18 May 2014 03:06:08 AM JST
'=xx2xII'
* Sun 18 May 2014 03:06:14 AM JST
drawable, gc, rectangles_len, rectangles
* Sun 18 May 2014 03:07:10 AM JST
            
* Sun 18 May 2014 03:07:17 AM JST
VoidCookie
* Sun 18 May 2014 03:07:19 AM JST

* Sun 18 May 2014 03:07:19 AM JST

* Sun 18 May 2014 03:07:19 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 03:07:31 AM JST
        for elt in xcb.Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))

* Sun 18 May 2014 03:07:44 AM JST
xcb.
* Sun 18 May 2014 03:07:53 AM JST
        for elt in Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))

* Sun 18 May 2014 03:07:59 AM JST
rectangles
* Sun 18 May 2014 03:07:59 AM JST
rectangles_len, rectangles
* Sun 18 May 2014 03:08:18 AM JST
polysegment
* Sun 18 May 2014 03:08:38 AM JST
PolySegment
* Sun 18 May 2014 03:08:51 AM JST
'=xx2xII'
* Sun 18 May 2014 03:08:59 AM JST
drawable, gc, segments_len, segments
* Sun 18 May 2014 03:09:34 AM JST
            
* Sun 18 May 2014 03:09:55 AM JST
        for elt in xcb.Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))

* Sun 18 May 2014 03:10:04 AM JST
xcb.
* Sun 18 May 2014 03:10:14 AM JST
        for elt in Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))

* Sun 18 May 2014 03:10:28 AM JST
VoidCookie
* Sun 18 May 2014 03:10:32 AM JST

* Sun 18 May 2014 03:10:32 AM JST

* Sun 18 May 2014 03:10:32 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 03:10:42 AM JST
polytext16
* Sun 18 May 2014 03:11:04 AM JST
PolyText16
* Sun 18 May 2014 03:11:49 AM JST
'=xx2xIIhh'
* Sun 18 May 2014 03:11:55 AM JST
drawable, gc, x, y, items_len, items
* Sun 18 May 2014 03:12:28 AM JST
            
* Sun 18 May 2014 03:12:31 AM JST
buf.write(str(buffer(_array('B', items))))
* Sun 18 May 2014 03:12:45 AM JST
buf.write(str(buffer(_array('B', items))))
* Sun 18 May 2014 03:12:50 AM JST
items
* Sun 18 May 2014 03:13:29 AM JST
VoidCookie
* Sun 18 May 2014 03:13:31 AM JST

* Sun 18 May 2014 03:13:31 AM JST

* Sun 18 May 2014 03:13:31 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 03:13:38 AM JST
polytext8
* Sun 18 May 2014 03:13:52 AM JST
PolyText8
* Sun 18 May 2014 03:14:09 AM JST
'=xx2xIIhh'
* Sun 18 May 2014 03:14:14 AM JST
drawable, gc, x, y, items_len, items
* Sun 18 May 2014 03:14:48 AM JST
buf.write(str(buffer(_array('B', items))))
* Sun 18 May 2014 03:15:01 AM JST
items
* Sun 18 May 2014 03:15:05 AM JST
VoidCookie
* Sun 18 May 2014 03:15:08 AM JST

* Sun 18 May 2014 03:15:09 AM JST

* Sun 18 May 2014 03:15:09 AM JST
from xcb2.xproto import k

* Sun 18 May 2014 03:16:01 AM JST
putimage
* Sun 18 May 2014 03:16:21 AM JST
PutImage
* Sun 18 May 2014 03:16:38 AM JST
'=xB2xIIHHhhBB2x'
* Sun 18 May 2014 03:16:51 AM JST
format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data
* Sun 18 May 2014 03:17:34 AM JST
buf.write(str(buffer(_array('B', data))))
* Sun 18 May 2014 03:17:56 AM JST
VoidCookie
* Sun 18 May 2014 03:17:58 AM JST

* Sun 18 May 2014 03:17:58 AM JST

* Sun 18 May 2014 03:17:58 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 03:18:17 AM JST
querybestsize
* Sun 18 May 2014 03:18:29 AM JST
QueryBestSize
* Sun 18 May 2014 03:18:43 AM JST
'=xB2xIHH'
* Sun 18 May 2014 03:18:49 AM JST
_class, drawable, width, height
* Sun 18 May 2014 03:19:22 AM JST
querycolors
* Sun 18 May 2014 03:19:36 AM JST
QueryColors
* Sun 18 May 2014 03:19:55 AM JST
'=xx2xI'
* Sun 18 May 2014 03:20:01 AM JST
cmap, pixels_len, pixels
* Sun 18 May 2014 03:21:24 AM JST
buf.write(str(buffer(_array('I', pixels))))
* Sun 18 May 2014 03:22:03 AM JST
queryextension
* Sun 18 May 2014 03:22:14 AM JST
QueryExtension
* Sun 18 May 2014 03:22:30 AM JST
'=xx2xH2x'
* Sun 18 May 2014 03:22:35 AM JST
name_len, name
* Sun 18 May 2014 03:23:00 AM JST
buf.write(str(buffer(_array('b', name))))
* Sun 18 May 2014 03:23:05 AM JST
name
* Sun 18 May 2014 03:23:10 AM JST
buf.write(str(buffer(_array('b', name))))
* Sun 18 May 2014 03:23:17 AM JST
name
* Sun 18 May 2014 03:23:39 AM JST
queryfont
* Sun 18 May 2014 03:23:52 AM JST
QueryFont
* Sun 18 May 2014 03:24:10 AM JST
'=xx2xI'
* Sun 18 May 2014 03:24:55 AM JST
querykeymap
* Sun 18 May 2014 03:25:10 AM JST
QueryKeymap
* Sun 18 May 2014 03:25:24 AM JST
'=xx2x'
* Sun 18 May 2014 03:26:08 AM JST
querypointer
* Sun 18 May 2014 03:26:20 AM JST
QueryPointer
* Sun 18 May 2014 03:26:36 AM JST
'=xx2xI'
* Sun 18 May 2014 03:27:24 AM JST
querytextextents
* Sun 18 May 2014 03:27:41 AM JST
QueryTextExtents
* Sun 18 May 2014 03:28:08 AM JST
'=x'
* Sun 18 May 2014 03:28:15 AM JST
font, string_len, string
* Sun 18 May 2014 03:29:05 AM JST
buf.write(_pack('=B', (string_len & 1)))
* Sun 18 May 2014 03:29:10 AM JST
buf.write(_pack('=2xI', font))
* Sun 18 May 2014 03:29:17 AM JST
        for elt in xcb.Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))

* Sun 18 May 2014 03:29:21 AM JST
xcb.
* Sun 18 May 2014 03:29:27 AM JST
        buf.write(_pack(self.fmt, ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))

* Sun 18 May 2014 03:30:09 AM JST
querytree
* Sun 18 May 2014 03:30:23 AM JST
QueryTree
* Sun 18 May 2014 03:30:39 AM JST
'=xx2xI'
* Sun 18 May 2014 03:30:42 AM JST
window
* Sun 18 May 2014 03:37:09 AM JST
recolorcursor
* Sun 18 May 2014 03:37:23 AM JST
RecolorCursor
* Sun 18 May 2014 03:37:41 AM JST
'=xx2xIHHHHHH'
* Sun 18 May 2014 03:37:48 AM JST
cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue
* Sun 18 May 2014 03:38:20 AM JST
                
* Sun 18 May 2014 03:38:28 AM JST
                
* Sun 18 May 2014 03:38:31 AM JST
            
* Sun 18 May 2014 03:38:35 AM JST
VoidCookie
* Sun 18 May 2014 03:38:37 AM JST

* Sun 18 May 2014 03:38:37 AM JST

* Sun 18 May 2014 03:38:37 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 03:38:56 AM JST
reparentwindow
* Sun 18 May 2014 03:39:09 AM JST
ReparentWindow
* Sun 18 May 2014 03:39:22 AM JST
'=xx2xIIhh'
* Sun 18 May 2014 03:39:29 AM JST
window, parent, x, y
* Sun 18 May 2014 03:39:51 AM JST
            
* Sun 18 May 2014 03:39:55 AM JST
VoidCookie
* Sun 18 May 2014 03:39:57 AM JST

* Sun 18 May 2014 03:39:57 AM JST

* Sun 18 May 2014 03:39:57 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 03:40:09 AM JST
rotateproperties
* Sun 18 May 2014 03:40:23 AM JST
RotateProperties
* Sun 18 May 2014 03:40:37 AM JST
'=xx2xIHh'
* Sun 18 May 2014 03:40:42 AM JST
window, atoms_len, delta, atoms
* Sun 18 May 2014 03:41:07 AM JST
            
* Sun 18 May 2014 03:41:11 AM JST
VoidCookie
* Sun 18 May 2014 03:41:13 AM JST

* Sun 18 May 2014 03:41:13 AM JST

* Sun 18 May 2014 03:41:13 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 03:41:48 AM JST
sendevent
* Sun 18 May 2014 03:42:01 AM JST
SendEvent
* Sun 18 May 2014 03:42:16 AM JST
'=xB2xII'
* Sun 18 May 2014 03:42:23 AM JST
propagate, destination, event_mask, event
* Sun 18 May 2014 03:42:42 AM JST
            
* Sun 18 May 2014 03:42:47 AM JST
VoidCookie
* Sun 18 May 2014 03:42:49 AM JST

* Sun 18 May 2014 03:42:49 AM JST

* Sun 18 May 2014 03:42:49 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 03:43:00 AM JST
buf.write(str(buffer(_array('b', event))))
* Sun 18 May 2014 03:43:06 AM JST
buf.write(str(buffer(_array('b', event))))
* Sun 18 May 2014 03:43:35 AM JST
setaccesscontrol
* Sun 18 May 2014 03:43:49 AM JST
SetAccessControl
* Sun 18 May 2014 03:44:01 AM JST
'=xB2x'
* Sun 18 May 2014 03:44:24 AM JST
            
* Sun 18 May 2014 03:44:32 AM JST
VoidCookie
* Sun 18 May 2014 03:44:33 AM JST

* Sun 18 May 2014 03:44:33 AM JST

* Sun 18 May 2014 03:44:33 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 03:44:54 AM JST
setcliprectangles
* Sun 18 May 2014 03:45:11 AM JST
SetClipRectangles
* Sun 18 May 2014 03:45:24 AM JST
'=xB2xIhh'
* Sun 18 May 2014 03:45:29 AM JST
ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles
* Sun 18 May 2014 03:45:54 AM JST
            
* Sun 18 May 2014 03:46:01 AM JST
VoidCookie
* Sun 18 May 2014 03:46:02 AM JST

* Sun 18 May 2014 03:46:02 AM JST

* Sun 18 May 2014 03:46:02 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 03:46:14 AM JST
setclosedownmode
* Sun 18 May 2014 03:46:29 AM JST
SetCloseDownMode
* Sun 18 May 2014 03:46:43 AM JST
'=xB2x'
* Sun 18 May 2014 03:47:10 AM JST
            
* Sun 18 May 2014 03:47:14 AM JST
VoidCookie
* Sun 18 May 2014 03:47:17 AM JST

* Sun 18 May 2014 03:47:17 AM JST

* Sun 18 May 2014 03:47:17 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 03:48:18 AM JST
setdashes
* Sun 18 May 2014 03:48:31 AM JST
SetDashes
* Sun 18 May 2014 03:48:46 AM JST
'=xx2xIHH'
* Sun 18 May 2014 03:48:51 AM JST
gc, dash_offset, dashes_len, dashes
* Sun 18 May 2014 03:49:13 AM JST
            
* Sun 18 May 2014 03:50:15 AM JST
buf.write(str(buffer(_array('B', dashes))))
* Sun 18 May 2014 03:50:29 AM JST
VoidCookie
* Sun 18 May 2014 03:50:31 AM JST

* Sun 18 May 2014 03:50:31 AM JST

* Sun 18 May 2014 03:50:31 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 03:58:36 AM JST
setfontpath
* Sun 18 May 2014 03:58:53 AM JST
SetFontPath
* Sun 18 May 2014 03:59:06 AM JST
'=xx2xH2x'
* Sun 18 May 2014 03:59:16 AM JST
font_qty, font
* Sun 18 May 2014 03:59:38 AM JST
            
* Sun 18 May 2014 03:59:42 AM JST
        for elt in xcb.Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))

* Sun 18 May 2014 03:59:49 AM JST
xcb.
* Sun 18 May 2014 03:59:51 AM JST
font
* Sun 18 May 2014 03:59:58 AM JST
        for elt in Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))

* Sun 18 May 2014 04:00:03 AM JST
font
* Sun 18 May 2014 04:00:10 AM JST
VoidCookie
* Sun 18 May 2014 04:00:12 AM JST

* Sun 18 May 2014 04:00:12 AM JST

* Sun 18 May 2014 04:00:12 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 04:00:35 AM JST
setinputfocus
* Sun 18 May 2014 04:00:51 AM JST
SetInputFocus
* Sun 18 May 2014 04:01:01 AM JST
'=xB2xII'
* Sun 18 May 2014 04:01:07 AM JST
revert_to, focus, time
* Sun 18 May 2014 04:01:36 AM JST
            
* Sun 18 May 2014 04:01:41 AM JST
VoidCookie
* Sun 18 May 2014 04:01:43 AM JST

* Sun 18 May 2014 04:01:43 AM JST

* Sun 18 May 2014 04:01:43 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 04:02:04 AM JST
setmodifiermapping
* Sun 18 May 2014 04:02:14 AM JST
SetModifierMapping
* Sun 18 May 2014 04:02:31 AM JST
'=xB2x'
* Sun 18 May 2014 04:02:37 AM JST
keycodes_per_modifier, keycodes
* Sun 18 May 2014 04:03:04 AM JST
buf.write(str(buffer(_array('B', keycodes))))
* Sun 18 May 2014 04:03:45 AM JST
setpointermapping
* Sun 18 May 2014 04:03:56 AM JST
SetPointerMapping
* Sun 18 May 2014 04:04:15 AM JST
'=xB2x'
* Sun 18 May 2014 04:04:21 AM JST
map_len, map
* Sun 18 May 2014 04:04:49 AM JST
buf.write(str(buffer(_array('B', map))))
* Sun 18 May 2014 04:04:53 AM JST
map
* Sun 18 May 2014 04:04:56 AM JST
buf.write(str(buffer(_array('B', map))))
* Sun 18 May 2014 04:05:01 AM JST
map
* Sun 18 May 2014 04:05:20 AM JST
setscreensaver
* Sun 18 May 2014 04:05:32 AM JST
SetScreenSaver
* Sun 18 May 2014 04:05:49 AM JST
'=xx2xhhBB'
* Sun 18 May 2014 04:05:56 AM JST
timeout, interval, prefer_blanking, allow_exposures
* Sun 18 May 2014 04:06:25 AM JST
True
* Sun 18 May 2014 04:06:40 AM JST
VoidCookie
* Sun 18 May 2014 04:06:41 AM JST

* Sun 18 May 2014 04:06:41 AM JST

* Sun 18 May 2014 04:06:41 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 04:06:57 AM JST
setselectionowner
* Sun 18 May 2014 04:07:12 AM JST
SetSelectionOwner
* Sun 18 May 2014 04:07:24 AM JST
'=xx2xIII'
* Sun 18 May 2014 04:07:28 AM JST
owner, selection, time
* Sun 18 May 2014 04:07:52 AM JST
VoidCookie
* Sun 18 May 2014 04:07:54 AM JST

* Sun 18 May 2014 04:07:54 AM JST

* Sun 18 May 2014 04:07:54 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 04:08:01 AM JST
storecolors
* Sun 18 May 2014 04:08:13 AM JST
StoreColors
* Sun 18 May 2014 04:08:25 AM JST
'=xx2xI'
* Sun 18 May 2014 04:08:31 AM JST
cmap, items_len, items
* Sun 18 May 2014 04:08:51 AM JST
            
* Sun 18 May 2014 04:09:06 AM JST
        for elt in xcb.Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))

* Sun 18 May 2014 04:09:12 AM JST
xcb.
* Sun 18 May 2014 04:09:14 AM JST
items
* Sun 18 May 2014 04:09:15 AM JST
items_len
* Sun 18 May 2014 04:09:24 AM JST
        for elt in Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))

* Sun 18 May 2014 04:09:31 AM JST
VoidCookie
* Sun 18 May 2014 04:09:33 AM JST

* Sun 18 May 2014 04:09:33 AM JST

* Sun 18 May 2014 04:09:33 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 04:09:46 AM JST
storenamedcolor
* Sun 18 May 2014 04:10:06 AM JST
StoreNamedColor
* Sun 18 May 2014 04:10:29 AM JST
'=xB2xIIH2x'
* Sun 18 May 2014 04:10:35 AM JST
flags, cmap, pixel, name_len, name
* Sun 18 May 2014 04:11:00 AM JST
            
* Sun 18 May 2014 04:11:05 AM JST
buf.write(str(buffer(_array('b', name))))
* Sun 18 May 2014 04:11:23 AM JST
buf.write(str(buffer(_array('b', name))))
* Sun 18 May 2014 04:11:34 AM JST
VoidCookie
* Sun 18 May 2014 04:11:36 AM JST

* Sun 18 May 2014 04:11:36 AM JST

* Sun 18 May 2014 04:11:36 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 04:14:06 AM JST
translatecoordinates
* Sun 18 May 2014 04:14:24 AM JST
TranslateCoordinates
* Sun 18 May 2014 04:14:41 AM JST
'=xx2xIIhh'
* Sun 18 May 2014 04:14:46 AM JST
src_window, dst_window, src_x, src_y
* Sun 18 May 2014 04:15:42 AM JST
ungrabbutton
* Sun 18 May 2014 04:15:58 AM JST
UngrabButton
* Sun 18 May 2014 04:16:09 AM JST
'=xB2xIH2x'
* Sun 18 May 2014 04:16:14 AM JST
button, grab_window, modifiers
* Sun 18 May 2014 04:16:34 AM JST
            
* Sun 18 May 2014 04:16:37 AM JST
VoidCookie
* Sun 18 May 2014 04:16:39 AM JST

* Sun 18 May 2014 04:16:39 AM JST

* Sun 18 May 2014 04:16:39 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 04:16:44 AM JST
ungrabkey
* Sun 18 May 2014 04:17:00 AM JST
UngrabKey
* Sun 18 May 2014 04:17:13 AM JST
'=xB2xIH2x'
* Sun 18 May 2014 04:17:18 AM JST
key, grab_window, modifiers
* Sun 18 May 2014 04:17:48 AM JST
            
* Sun 18 May 2014 04:17:51 AM JST
VoidCookie
* Sun 18 May 2014 04:17:53 AM JST

* Sun 18 May 2014 04:17:53 AM JST

* Sun 18 May 2014 04:17:53 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 04:17:59 AM JST
ungrabkeyboard
* Sun 18 May 2014 04:18:15 AM JST
UngrabKeyboard
* Sun 18 May 2014 04:18:28 AM JST
'=xx2xI'
* Sun 18 May 2014 04:18:47 AM JST
            
* Sun 18 May 2014 04:18:54 AM JST
VoidCookie
* Sun 18 May 2014 04:18:56 AM JST

* Sun 18 May 2014 04:18:56 AM JST

* Sun 18 May 2014 04:18:56 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 04:19:07 AM JST
ungrabpointer
* Sun 18 May 2014 04:19:20 AM JST
UngrabPointer
* Sun 18 May 2014 04:19:30 AM JST
'=xx2xI'
* Sun 18 May 2014 04:19:51 AM JST
            
* Sun 18 May 2014 04:19:54 AM JST
VoidCookie
* Sun 18 May 2014 04:19:56 AM JST

* Sun 18 May 2014 04:19:56 AM JST

* Sun 18 May 2014 04:19:56 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 04:20:04 AM JST
ungrabserver
* Sun 18 May 2014 04:20:16 AM JST
UngrabServer
* Sun 18 May 2014 04:20:29 AM JST
'=xx2x'
* Sun 18 May 2014 04:20:45 AM JST
            
* Sun 18 May 2014 04:20:49 AM JST
VoidCookie
* Sun 18 May 2014 04:20:51 AM JST

* Sun 18 May 2014 04:20:51 AM JST

* Sun 18 May 2014 04:20:51 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 04:21:00 AM JST
uninstallcolormap
* Sun 18 May 2014 04:21:10 AM JST
UninstallColormap
* Sun 18 May 2014 04:21:25 AM JST
'=xx2xI'
* Sun 18 May 2014 04:21:42 AM JST
            
* Sun 18 May 2014 04:21:45 AM JST
VoidCookie
* Sun 18 May 2014 04:21:47 AM JST

* Sun 18 May 2014 04:21:47 AM JST

* Sun 18 May 2014 04:21:47 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 04:21:54 AM JST
unmapsubwindows
* Sun 18 May 2014 04:22:07 AM JST
UnmapSubwindows
* Sun 18 May 2014 04:22:34 AM JST
'=xx2xI'
* Sun 18 May 2014 04:22:55 AM JST
            
* Sun 18 May 2014 04:22:58 AM JST
VoidCookie
* Sun 18 May 2014 04:23:00 AM JST

* Sun 18 May 2014 04:23:00 AM JST

* Sun 18 May 2014 04:23:00 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 04:23:06 AM JST
unmapwindow
* Sun 18 May 2014 04:23:18 AM JST
UnmapWindow
* Sun 18 May 2014 04:23:29 AM JST
'=xx2xI'
* Sun 18 May 2014 04:23:45 AM JST
            
* Sun 18 May 2014 04:23:49 AM JST
VoidCookie
* Sun 18 May 2014 04:23:50 AM JST

* Sun 18 May 2014 04:23:50 AM JST

* Sun 18 May 2014 04:23:50 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 04:23:59 AM JST
warppointer
* Sun 18 May 2014 04:24:48 AM JST
WarpPointer
* Sun 18 May 2014 04:25:03 AM JST
'=xx2xIIhhHHhh',
* Sun 18 May 2014 04:25:10 AM JST
src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y
* Sun 18 May 2014 04:25:33 AM JST
            
* Sun 18 May 2014 04:25:38 AM JST
VoidCookie
* Sun 18 May 2014 04:25:39 AM JST

* Sun 18 May 2014 04:25:39 AM JST

* Sun 18 May 2014 04:25:39 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 04:51:32 AM JST
alloccolorcelles
* Sun 18 May 2014 04:51:47 AM JST
AllocColorCells
* Sun 18 May 2014 04:52:22 AM JST
AllocColorCellsAbstract', 
* Sun 18 May 2014 04:52:24 AM JST
           
* Sun 18 May 2014 04:52:45 AM JST
AllocColorPlanesAbstract',
* Sun 18 May 2014 04:52:47 AM JST
           
* Sun 18 May 2014 04:54:17 AM JST
AllocNamedColorAbstract', 
* Sun 18 May 2014 04:54:19 AM JST
           
* Sun 18 May 2014 04:57:46 AM JST
AllowEventsAbstract', 
* Sun 18 May 2014 04:58:27 AM JST
BellAbstract', 
* Sun 18 May 2014 04:58:44 AM JST
ChangeActivePointerGrabAbstract', 
* Sun 18 May 2014 04:58:58 AM JST
           
* Sun 18 May 2014 05:02:07 AM JST
ChangeGCAbstract', 
* Sun 18 May 2014 05:02:13 AM JST
ChangeHostsAbstract', 
* Sun 18 May 2014 05:02:18 AM JST
ChangeKeyBoardControlAbstract', 
* Sun 18 May 2014 05:02:23 AM JST
           
* Sun 18 May 2014 05:02:25 AM JST
VoidCookie
* Sun 18 May 2014 05:02:27 AM JST

* Sun 18 May 2014 05:02:27 AM JST

* Sun 18 May 2014 05:02:28 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 05:02:39 AM JST
ChangeKeyboardMappingAbstract', 
* Sun 18 May 2014 05:02:43 AM JST
           
* Sun 18 May 2014 05:03:00 AM JST
ChangePointerControlAbstract', 
* Sun 18 May 2014 05:03:05 AM JST
           
* Sun 18 May 2014 05:03:12 AM JST
ChangePropertyAbstract', 
* Sun 18 May 2014 05:03:17 AM JST
ChangeSaveSetAbstract', 
* Sun 18 May 2014 05:03:22 AM JST
ChangeWindowAttributesAbstract', 
* Sun 18 May 2014 05:03:26 AM JST
           
* Sun 18 May 2014 05:03:57 AM JST
CirculateWindowAbstract', 
* Sun 18 May 2014 05:04:52 AM JST
ClearAreaAbstract', 
* Sun 18 May 2014 05:05:11 AM JST
CloseFontAbstract', 
* Sun 18 May 2014 05:05:28 AM JST
ConfigureWindowAbstract', 
* Sun 18 May 2014 05:05:33 AM JST
ConvertSelectionAbstract', 
* Sun 18 May 2014 05:05:38 AM JST
CopyAreaAbstract', 
* Sun 18 May 2014 05:05:42 AM JST
CopyColormapAndFreeAbstract', 
* Sun 18 May 2014 05:05:46 AM JST
CopyGCAbstract', 
* Sun 18 May 2014 05:05:50 AM JST
CopyPlaneAbstract', 
* Sun 18 May 2014 05:05:55 AM JST
CreateColormapAbstract', 
* Sun 18 May 2014 05:05:59 AM JST
CreateCursorAbstract', 
* Sun 18 May 2014 05:06:03 AM JST
CreateGCAbstract', 
* Sun 18 May 2014 05:06:07 AM JST
CreateGlyphCursorAbstract', 
* Sun 18 May 2014 05:06:11 AM JST
CreatePixmapAbstract', 
* Sun 18 May 2014 05:06:14 AM JST
CreateWindowAbstract', 
* Sun 18 May 2014 05:06:19 AM JST
DeletePropertyAbstract', 
* Sun 18 May 2014 05:06:23 AM JST
DestroySubwindowsAbstract', 
* Sun 18 May 2014 05:06:27 AM JST
DestroyWindowAbstract', 
* Sun 18 May 2014 05:06:31 AM JST
FillPolyAbstract', 
* Sun 18 May 2014 05:06:34 AM JST
ForceScreenSaverAbstract', 
* Sun 18 May 2014 05:06:38 AM JST
FreeColormapAbstract', 
* Sun 18 May 2014 05:06:42 AM JST
FreeColorsAbstract', 
* Sun 18 May 2014 05:06:45 AM JST
FreeCursorAbstract', 
* Sun 18 May 2014 05:06:49 AM JST
FreeGCAbstract', 
* Sun 18 May 2014 05:06:52 AM JST
FreePixmapAbstract', 
* Sun 18 May 2014 05:06:56 AM JST
GetAtomNameAbstract', 
* Sun 18 May 2014 05:07:29 AM JST
GetFontPathAbstract', 
* Sun 18 May 2014 05:07:34 AM JST
GetGeometryAbstract', 
* Sun 18 May 2014 05:07:38 AM JST
GetImageAbstract', 
* Sun 18 May 2014 05:07:42 AM JST
GetInputFocusAbstract', 
* Sun 18 May 2014 05:07:47 AM JST
GetKeyboardControlAbstract', 
* Sun 18 May 2014 05:07:51 AM JST
GetKeyboardMappingAbstract', 
* Sun 18 May 2014 05:07:55 AM JST
GetModifierMappingAbstract', 
* Sun 18 May 2014 05:07:59 AM JST
GetMotionEventsAbstract', 
* Sun 18 May 2014 05:08:04 AM JST
GetPointerControlAbstract', 
* Sun 18 May 2014 05:08:07 AM JST
GetPointerMappingAbstract', 
* Sun 18 May 2014 05:08:11 AM JST
GetPropertyAbstract', 
* Sun 18 May 2014 05:08:14 AM JST
GetScreenSaverAbstract', 
* Sun 18 May 2014 05:08:18 AM JST
GetSelectionOwnerAbstract', 
* Sun 18 May 2014 05:08:23 AM JST
GetWindowAttributesAbstract', 
* Sun 18 May 2014 05:08:26 AM JST
GrabButtonAbstract', 
* Sun 18 May 2014 05:08:30 AM JST
GrabKeyboardAbstract', 
* Sun 18 May 2014 05:08:34 AM JST
GrabKeyAbstract', 
* Sun 18 May 2014 05:08:37 AM JST
GrabPointerAbstract', 
* Sun 18 May 2014 05:08:41 AM JST
GrabServerAbstract', 
* Sun 18 May 2014 05:08:45 AM JST
ImageText16Abstract', 
* Sun 18 May 2014 05:08:49 AM JST
ImageText8Abstract', 
* Sun 18 May 2014 05:08:54 AM JST
VoidCookie
* Sun 18 May 2014 05:08:55 AM JST

* Sun 18 May 2014 05:08:55 AM JST

* Sun 18 May 2014 05:08:56 AM JST
from xcb2.xproto import 

* Sun 18 May 2014 05:09:02 AM JST
InstallColormapAbstract', 
* Sun 18 May 2014 05:09:07 AM JST
InternAtomAbstract', 
* Sun 18 May 2014 05:09:23 AM JST
KillClientAbstract', 
* Sun 18 May 2014 05:09:27 AM JST
ListExtensionsAbstract', 
* Sun 18 May 2014 05:09:34 AM JST
ListFontsAbstract', 
* Sun 18 May 2014 05:09:38 AM JST
ListFontsWithInfoAbstract', 
* Sun 18 May 2014 05:09:42 AM JST
ListHostsAbstract', 
* Sun 18 May 2014 05:09:45 AM JST
ListInstalledColormapsAbstract', 
* Sun 18 May 2014 05:09:49 AM JST
ListPropertiesAbstract', 
* Sun 18 May 2014 05:09:54 AM JST
LookupColorAbstract', 
* Sun 18 May 2014 05:09:58 AM JST
MapSubwindowsAbstract', 
* Sun 18 May 2014 05:10:03 AM JST
MapWindowAbstract', 
* Sun 18 May 2014 05:10:07 AM JST
NoOperationAbstract', 
* Sun 18 May 2014 05:10:11 AM JST
OpenFontAbstract', 
* Sun 18 May 2014 05:10:16 AM JST
PolyArcAbstract', 
* Sun 18 May 2014 05:10:19 AM JST
PolyFillArcAbstract', 
* Sun 18 May 2014 05:10:23 AM JST
PolyFillRectangleAbstract', 
* Sun 18 May 2014 05:10:27 AM JST
PolyLineAbstract', 
* Sun 18 May 2014 05:10:31 AM JST
PolyPointAbstract', 
* Sun 18 May 2014 05:10:35 AM JST
PolyRectangleAbstract', 
* Sun 18 May 2014 05:10:39 AM JST
PolySegmentAbstract', 
* Sun 18 May 2014 05:10:43 AM JST
PolyText16Abstract', 
* Sun 18 May 2014 05:10:47 AM JST
PolyText8Abstract', 
* Sun 18 May 2014 05:11:01 AM JST
PutImageAbstract', 
* Sun 18 May 2014 05:11:04 AM JST
QueryBestSizeAbstract', 
* Sun 18 May 2014 05:11:09 AM JST
QueryColorsAbstract', 
* Sun 18 May 2014 05:11:13 AM JST
QueryExtensionAbstract', 
* Sun 18 May 2014 05:11:19 AM JST
QueryFontAbstract', 
* Sun 18 May 2014 05:11:23 AM JST
QueryKeymapAbstract', 
* Sun 18 May 2014 05:11:27 AM JST
QueryPointerAbstract', 
* Sun 18 May 2014 05:11:31 AM JST
QueryTextExtentsAbstract', 
* Sun 18 May 2014 05:11:36 AM JST
QueryTreeAbstract', 
* Sun 18 May 2014 05:11:41 AM JST
RecolorCursorAbstract', 
* Sun 18 May 2014 05:11:46 AM JST
ReparentWindowAbstract', 
* Sun 18 May 2014 05:11:50 AM JST
RotatePropertiesAbstract', 
* Sun 18 May 2014 05:11:53 AM JST
SendEventAbstract', 
* Sun 18 May 2014 05:11:58 AM JST
SetAccessControlAbstract', 
* Sun 18 May 2014 05:12:02 AM JST
SetClipRectanglesAbstract', 
* Sun 18 May 2014 05:12:05 AM JST
SetCloseDownModeAbstract', 
* Sun 18 May 2014 05:12:31 AM JST
SetDashesAbstract', 
* Sun 18 May 2014 05:12:36 AM JST
SetFontPathAbstract', 
* Sun 18 May 2014 05:12:40 AM JST
SetInputFocusAbstract', 
* Sun 18 May 2014 05:12:45 AM JST
SetModifierMappingAbstract', 
* Sun 18 May 2014 05:12:49 AM JST
SetPointerMappingAbstract', 
* Sun 18 May 2014 05:12:53 AM JST
SetScreenSaverAbstract', 
* Sun 18 May 2014 05:12:58 AM JST
SetSelectionOwnerAbstract', 
* Sun 18 May 2014 05:13:03 AM JST
StoreColorsAbstract', 
* Sun 18 May 2014 05:13:08 AM JST
StoreNamedColorAbstract', 
* Sun 18 May 2014 05:13:12 AM JST
TranslateCoordinatesAbstract', 
* Sun 18 May 2014 05:13:17 AM JST
UngrabButtonAbstract', 
* Sun 18 May 2014 05:13:21 AM JST
UngrabKeyboardAbstract', 
* Sun 18 May 2014 05:13:25 AM JST
UngrabKeyAbstract', 
* Sun 18 May 2014 05:13:30 AM JST
UngrabPointerAbstract', 
* Sun 18 May 2014 05:13:34 AM JST
UngrabServerAbstract', 
* Sun 18 May 2014 05:13:37 AM JST
UninstallColormapAbstract', 
* Sun 18 May 2014 05:13:43 AM JST
UnmapSubwindowsAbstract', 
* Sun 18 May 2014 05:13:47 AM JST
UnmapWindowAbstract', 
* Sun 18 May 2014 05:13:52 AM JST
WarpPointerAbstract', 
* Sun 18 May 2014 03:36:44 PM JST
alloccolorcelles.py
  -rwx------ 1 2.4K May 18 04:52 alloccolorplanes.py
  -rwx------ 1 2.0K May 17 17:11 alloccolor.py
  -rwx------ 1 2.1K May 18 04:54 allocnamedcolor.py
  -rwx------ 1 1.8K May 18 04:57 allowevents.py
  -rwx------ 1 1.8K May 18 04:58 bell.py
  -rwx------ 1 2.1K May 18 04:59 changeactivepointergrab.py
  -rwx------ 1 2.1K May 18 05:02 changegc.py
  -rwx------ 1 2.2K May 18 05:02 changehost.py
  -rwx------ 1 2.2K May 18 05:02 changekeyboardcontrol.py
  -rwx------ 1 2.4K May 18 05:02 changekeyboardmapping.py
  -rwx------ 1 2.8K May 18 05:03 changepointercontrol.py
  -rwx------ 1 2.3K May 18 05:03 changeproperty.py
  -rwx------ 1 1.9K May 18 05:03 changesaveset.py
  -rwx------ 1 2.2K May 18 05:03 changewindowattributes.py
  -rwx------ 1 1.9K May 18 05:04 circulatewindow.py
  -rwx------ 1 2.1K May 18 05:05 cleararea.py
  -rwx------ 1 1.8K May 18 05:05 closefont.py
  -rwx------ 1 2.2K May 18 05:05 configurewindow.py
  -rwx------ 1 2.2K May 18 05:05 convertselection.py
  -rwx------ 1 2.5K May 18 05:05 copyarea.py
  -rwx------ 1 1.9K May 18 05:05 copycolormapandfree.py
  -rwx------ 1 1.9K May 18 05:05 copygc.py
  -rwx------ 1 2.6K May 18 05:05 copyplane.py
  -rwx------ 1 2.0K May 18 05:05 createcolormap.py
  -rwx------ 1 2.7K May 18 05:05 createcursor.py
  -rwx------ 1 2.2K May 18 05:06 creategc.py
  -rwx------ 1 3.1K May 18 05:06 createglyphcursor.py
  -rwx------ 1 2.1K May 18 05:06 createpixmap.py
  -rwx------ 1 2.9K May 18 05:06 createwindow.py
  -rwx------ 1 1.9K May 18 05:06 deleteproperty.py
  -rwx------ 1 1.9K May 18 05:06 destroysubwindows.py
  -rwx------ 1 1.8K May 18 05:06 destroywindow.py
  -rwx------ 1 2.3K May 18 05:06 fillpoly.py
  -rwx------ 1 1.8K May 18 05:06 forcescreensaver.py
  -rwx------ 1 1.8K May 18 05:06 freecolormap.py
  -rwx------ 1 2.2K May 18 05:06 freecolors.py
  -rwx------ 1 1.8K May 18 05:06 freecursor.py
  -rwx------ 1 1.7K May 18 05:06 freegc.py
  -rwx------ 1 1.8K May 18 05:06 freepixmap.py
  -rwx------ 1 4.7K May 18 05:07 getatomname.py
  -rwx------ 1 1.9K May 18 05:07 getfontpath.py
  -rwx------ 1 2.0K May 18 05:07 getgeometry.py
  -rwx------ 1 2.3K May 18 05:07 getimage.py
  -rwx------ 1 1.9K May 18 05:07 getinputfocus.py
  -rwx------ 1 2.0K May 18 05:07 getkeyboardcontrol.py
  -rwx------ 1 2.2K May 18 05:07 getkeyboardmapping.py
  -rwx------ 1 2.0K May 18 05:07 getmodifiermapping.py
  -rwx------ 1 2.1K May 18 05:07 getmotionevents.py
  -rwx------ 1 2.0K May 18 05:08 getpointercontrol.py
  -rwx------ 1 2.0K May 18 05:08 getpointermapping.py
  -rwx------ 1 2.5K May 18 05:08 getproperty.py
  -rwx------ 1 1.9K May 18 05:08 getscreensaver.py
  -rwx------ 1 2.1K May 18 05:08 getselectionowner.py
  -rwx------ 1 2.1K May 18 05:08 getwindowattributes.py
  -rwx------ 1 2.8K May 18 05:08 grabbutton.py
  -rwx------ 1 2.6K May 18 05:08 grabkeyboard.py
  -rwx------ 1 2.5K May 18 05:08 grabkey.py
  -rwx------ 1 2.9K May 18 05:08 grabpointer.py
  -rwx------ 1 1.8K May 18 05:08 grabserver.py
  -rwx------ 1 2.3K May 18 05:08 imagetext16.py
  -rwx------ 1 2.2K May 18 05:08 imagetext8.py
  -rwx------ 1  307 May 18 04:51 __init__.py
  -rwx------ 1 1.8K May 18 05:09 installcolormap.py
  -rwx------ 1 4.4K May 18 05:09 internatom.py
  -rwx------ 1 1.8K May 18 05:09 killclient.py
  -rwx------ 1 1.9K May 18 05:09 listextensions.py
  -rwx------ 1 2.2K May 18 05:09 listfonts.py
  -rwx------ 1 2.4K May 18 05:09 listfontswithinfo.py
  -rwx------ 1 1.9K May 18 05:09 listhosts.py
  -rwx------ 1 2.1K May 18 05:09 listinstalledcolormaps.py
  -rwx------ 1 2.0K May 18 05:09 listproperties.py
  -rwx------ 1 2.1K May 18 05:09 lookupcolor.py
  -rwx------ 1 1.8K May 18 05:09 mapsubwindows.py
  -rwx------ 1 1.8K May 18 05:10 mapwindow.py
  -rwx------ 1 1.8K May 18 05:10 nooperation.py
  -rwx------ 1 2.0K May 18 05:10 openfont.py
  -rwx------ 1 2.1K May 18 05:10 polyarc.py
  -rwx------ 1 2.2K May 18 05:10 polyfillarc.py
  -rwx------ 1 2.3K May 18 05:10 polyfillrectangle.py
  -rwx------ 1 2.2K May 18 05:10 polyline.py
  -rwx------ 1 2.2K May 18 05:10 polypoint.py
  -rwx------ 1 2.3K May 18 05:10 polyrectangle.py
  -rwx------ 1 2.2K May 18 05:10 polysegment.py
  -rwx------ 1 2.2K May 18 05:10 polytext16.py
  -rwx------ 1 2.2K May 18 05:10 polytext8.py
  -rwx------ 1 2.7K May 18 05:11 putimage.py
  -rwx------ 1 2.2K May 18 05:11 querybestsize.py
  -rwx------ 1 2.2K May 18 05:11 querycolors.py
  -rwx------ 1 2.2K May 18 05:11 queryextension.py
  -rwx------ 1 1.9K May 18 05:11 queryfont.py
  -rwx------ 1 1.9K May 18 05:11 querykeymap.py
  -rwx------ 1 2.0K May 18 05:11 querypointer.py
  -rwx------ 1 2.5K May 18 05:11 querytextextents.py
  -rwx------ 1 1.9K May 18 05:11 querytree.py
  -rwx------ 1 2.6K May 18 05:11 recolorcursor.py
  -rwx------ 1 2.0K May 18 05:11 reparentwindow.py
  -rwx------ 1 2.1K May 18 05:11 rotateproperties.py
  -rwx------ 1 2.2K May 18 05:11 sendevent.py
  -rwx------ 1 1.8K May 18 05:11 setaccesscontrol.py
  -rwx------ 1 2.6K May 18 05:12 setcliprectangles.py
  -rwx------ 1 1.8K May 18 05:12 setclosedownmode.py
  -rwx------ 1 2.2K May 18 05:12 setdashes.py
  -rwx------ 1 2.1K May 18 05:12 setfontpath.py
  -rwx------ 1 2.0K May 18 05:12 setinputfocus.py
  -rwx------ 1 2.4K May 18 05:12 setmodifiermapping.py
  -rwx------ 1 2.2K May 18 05:12 setpointermapping.py
  -rwx------ 1 2.3K May 18 05:12 setscreensaver.py
  -rwx------ 1 2.0K May 18 05:12 setselectionowner.py
  -rwx------ 1 2.1K May 18 05:13 storecolors.py
  -rwx------ 1 2.2K May 18 05:13 storenamedcolor.py
  -rwx------ 1 2.3K May 18 05:13 translatecoordinates.py
  -rwx------ 1 2.0K May 18 05:13 ungrabbutton.py
  -rwx------ 1 1.8K May 18 05:13 ungrabkeyboard.py
  -rwx------ 1 2.0K May 18 05:13 ungrabkey.py
  -rwx------ 1 1.8K May 18 05:13 ungrabpointer.py
  -rwx------ 1 1.8K May 18 05:13 ungrabserver.py
  -rwx------ 1 1.8K May 18 05:13 uninstallcolormap.py
  -rwx------ 1 1.8K May 18 05:13 unmapsubwindows.py
  -rwx------ 1 1.8K May 18 05:13 unmapwindow.py
  -rwx------ 1 2.5K May 18 05:13 warppointer.py

* Sun 18 May 2014 03:37:09 PM JST
-rwx------ 1 2.5K May 18 05:13 
* Sun 18 May 2014 03:37:10 PM JST
-rwx------ 1 1.8K May 18 05:13 
* Sun 18 May 2014 03:37:10 PM JST
-rwx------ 1 1.8K May 18 05:13 
* Sun 18 May 2014 03:37:10 PM JST
-rwx------ 1 1.8K May 18 05:13 
* Sun 18 May 2014 03:37:10 PM JST
-rwx------ 1 1.8K May 18 05:13 
* Sun 18 May 2014 03:37:10 PM JST
-rwx------ 1 1.8K May 18 05:13 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 2.0K May 18 05:13 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 1.8K May 18 05:13 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 2.0K May 18 05:13 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 2.3K May 18 05:13 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 2.2K May 18 05:13 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 2.1K May 18 05:13 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 2.0K May 18 05:12 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 2.3K May 18 05:12 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 2.2K May 18 05:12 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 2.4K May 18 05:12 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 2.0K May 18 05:12 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 2.1K May 18 05:12 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 2.2K May 18 05:12 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 1.8K May 18 05:12 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 2.6K May 18 05:12 
* Sun 18 May 2014 03:37:11 PM JST
-rwx------ 1 1.8K May 18 05:11 
* Sun 18 May 2014 03:37:12 PM JST
-rwx------ 1 2.2K May 18 05:11 
* Sun 18 May 2014 03:37:12 PM JST
-rwx------ 1 2.1K May 18 05:11 
* Sun 18 May 2014 03:37:12 PM JST
-rwx------ 1 2.0K May 18 05:11 
* Sun 18 May 2014 03:37:12 PM JST
-rwx------ 1 2.6K May 18 05:11 
* Sun 18 May 2014 03:37:12 PM JST
-rwx------ 1 1.9K May 18 05:11 
* Sun 18 May 2014 03:37:12 PM JST
-rwx------ 1 2.5K May 18 05:11 
* Sun 18 May 2014 03:37:12 PM JST
-rwx------ 1 2.0K May 18 05:11 
* Sun 18 May 2014 03:37:12 PM JST
-rwx------ 1 1.9K May 18 05:11 
* Sun 18 May 2014 03:37:12 PM JST
-rwx------ 1 1.9K May 18 05:11 
* Sun 18 May 2014 03:37:12 PM JST
-rwx------ 1 2.2K May 18 05:11 
* Sun 18 May 2014 03:37:12 PM JST
-rwx------ 1 2.2K May 18 05:11 
* Sun 18 May 2014 03:37:12 PM JST
-rwx------ 1 2.2K May 18 05:11 
* Sun 18 May 2014 03:37:12 PM JST
-rwx------ 1 2.7K May 18 05:11 
* Sun 18 May 2014 03:37:12 PM JST
-rwx------ 1 2.2K May 18 05:10 
* Sun 18 May 2014 03:37:12 PM JST
-rwx------ 1 2.2K May 18 05:10 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 2.2K May 18 05:10 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 2.3K May 18 05:10 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 2.2K May 18 05:10 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 2.2K May 18 05:10 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 2.3K May 18 05:10 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 2.2K May 18 05:10 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 2.1K May 18 05:10 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 2.0K May 18 05:10 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 1.8K May 18 05:10 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 1.8K May 18 05:10 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 1.8K May 18 05:09 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 2.1K May 18 05:09 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 2.0K May 18 05:09 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 2.1K May 18 05:09 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 1.9K May 18 05:09 
* Sun 18 May 2014 03:37:13 PM JST
-rwx------ 1 2.4K May 18 05:09 
* Sun 18 May 2014 03:37:14 PM JST
-rwx------ 1 2.2K May 18 05:09 
* Sun 18 May 2014 03:37:14 PM JST
-rwx------ 1 1.9K May 18 05:09 
* Sun 18 May 2014 03:37:14 PM JST
-rwx------ 1 1.8K May 18 05:09 
* Sun 18 May 2014 03:37:14 PM JST
-rwx------ 1 4.4K May 18 05:09 
* Sun 18 May 2014 03:37:14 PM JST
-rwx------ 1 1.8K May 18 05:09 
* Sun 18 May 2014 03:37:14 PM JST
-rwx------ 1  307 May 18 04:51 
* Sun 18 May 2014 03:37:14 PM JST
-rwx------ 1 2.2K May 18 05:08 
* Sun 18 May 2014 03:37:14 PM JST
-rwx------ 1 2.3K May 18 05:08 
* Sun 18 May 2014 03:37:14 PM JST
-rwx------ 1 1.8K May 18 05:08 
* Sun 18 May 2014 03:37:14 PM JST
-rwx------ 1 2.9K May 18 05:08 
* Sun 18 May 2014 03:37:14 PM JST
-rwx------ 1 2.5K May 18 05:08 
* Sun 18 May 2014 03:37:14 PM JST
-rwx------ 1 2.6K May 18 05:08 
* Sun 18 May 2014 03:37:15 PM JST
-rwx------ 1 2.8K May 18 05:08 
* Sun 18 May 2014 03:37:15 PM JST
-rwx------ 1 2.1K May 18 05:08 
* Sun 18 May 2014 03:37:15 PM JST
-rwx------ 1 2.1K May 18 05:08 
* Sun 18 May 2014 03:37:15 PM JST
-rwx------ 1 1.9K May 18 05:08 
* Sun 18 May 2014 03:37:15 PM JST
-rwx------ 1 2.5K May 18 05:08 
* Sun 18 May 2014 03:37:15 PM JST
-rwx------ 1 2.0K May 18 05:08 
* Sun 18 May 2014 03:37:15 PM JST
-rwx------ 1 2.0K May 18 05:08 
* Sun 18 May 2014 03:37:15 PM JST
-rwx------ 1 2.1K May 18 05:07 
* Sun 18 May 2014 03:37:15 PM JST
-rwx------ 1 2.0K May 18 05:07 
* Sun 18 May 2014 03:37:15 PM JST
-rwx------ 1 2.2K May 18 05:07 
* Sun 18 May 2014 03:37:15 PM JST
-rwx------ 1 2.0K May 18 05:07 
* Sun 18 May 2014 03:37:15 PM JST
-rwx------ 1 1.9K May 18 05:07 
* Sun 18 May 2014 03:37:15 PM JST
-rwx------ 1 2.3K May 18 05:07 
* Sun 18 May 2014 03:37:15 PM JST
-rwx------ 1 2.0K May 18 05:07 
* Sun 18 May 2014 03:37:15 PM JST
-rwx------ 1 1.9K May 18 05:07 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 4.7K May 18 05:07 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 1.8K May 18 05:06 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 1.7K May 18 05:06 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 1.8K May 18 05:06 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 2.2K May 18 05:06 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 1.8K May 18 05:06 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 1.8K May 18 05:06 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 2.3K May 18 05:06 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 1.8K May 18 05:06 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 1.9K May 18 05:06 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 1.9K May 18 05:06 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 2.9K May 18 05:06 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 2.1K May 18 05:06 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 3.1K May 18 05:06 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 2.2K May 18 05:06 
* Sun 18 May 2014 03:37:16 PM JST
-rwx------ 1 2.7K May 18 05:05 
* Sun 18 May 2014 03:37:17 PM JST
-rwx------ 1 2.0K May 18 05:05 
* Sun 18 May 2014 03:37:17 PM JST
-rwx------ 1 2.6K May 18 05:05 
* Sun 18 May 2014 03:37:17 PM JST
-rwx------ 1 1.9K May 18 05:05 
* Sun 18 May 2014 03:37:17 PM JST
-rwx------ 1 1.9K May 18 05:05 
* Sun 18 May 2014 03:37:17 PM JST
-rwx------ 1 2.5K May 18 05:05 
* Sun 18 May 2014 03:37:17 PM JST
-rwx------ 1 2.2K May 18 05:05 
* Sun 18 May 2014 03:37:17 PM JST
-rwx------ 1 2.2K May 18 05:05 
* Sun 18 May 2014 03:37:17 PM JST
-rwx------ 1 1.8K May 18 05:05 
* Sun 18 May 2014 03:37:17 PM JST
-rwx------ 1 2.1K May 18 05:05 
* Sun 18 May 2014 03:37:17 PM JST
-rwx------ 1 1.9K May 18 05:04 
* Sun 18 May 2014 03:37:17 PM JST
-rwx------ 1 2.2K May 18 05:03 
* Sun 18 May 2014 03:37:17 PM JST
-rwx------ 1 1.9K May 18 05:03 
* Sun 18 May 2014 03:37:17 PM JST
-rwx------ 1 2.3K May 18 05:03 
* Sun 18 May 2014 03:37:17 PM JST
-rwx------ 1 2.8K May 18 05:03 
* Sun 18 May 2014 03:37:18 PM JST
-rwx------ 1 2.4K May 18 05:02 
* Sun 18 May 2014 03:37:18 PM JST
-rwx------ 1 2.2K May 18 05:02 
* Sun 18 May 2014 03:37:18 PM JST
-rwx------ 1 2.2K May 18 05:02 
* Sun 18 May 2014 03:37:18 PM JST
-rwx------ 1 2.1K May 18 05:02 
* Sun 18 May 2014 03:37:18 PM JST
-rwx------ 1 2.1K May 18 04:59 
* Sun 18 May 2014 03:37:18 PM JST
-rwx------ 1 1.8K May 18 04:58 
* Sun 18 May 2014 03:37:18 PM JST
-rwx------ 1 1.8K May 18 04:57 
* Sun 18 May 2014 03:37:18 PM JST
-rwx------ 1 2.1K May 18 04:54 
* Sun 18 May 2014 03:37:18 PM JST
-rwx------ 1 2.0K May 17 17:11 
* Sun 18 May 2014 03:37:18 PM JST
-rwx------ 1 2.4K May 18 04:52 
* Sun 18 May 2014 03:37:24 PM JST
  
* Sun 18 May 2014 03:37:24 PM JST
  
* Sun 18 May 2014 03:37:24 PM JST
  
* Sun 18 May 2014 03:37:24 PM JST
  
* Sun 18 May 2014 03:37:24 PM JST
  
* Sun 18 May 2014 03:37:24 PM JST
  
* Sun 18 May 2014 03:37:24 PM JST
  
* Sun 18 May 2014 03:37:24 PM JST
  
* Sun 18 May 2014 03:37:24 PM JST
  
* Sun 18 May 2014 03:37:24 PM JST
  
* Sun 18 May 2014 03:37:24 PM JST
  
* Sun 18 May 2014 03:37:24 PM JST
  
* Sun 18 May 2014 03:37:25 PM JST
  
* Sun 18 May 2014 03:37:25 PM JST
  
* Sun 18 May 2014 03:37:25 PM JST
  
* Sun 18 May 2014 03:37:25 PM JST
  
* Sun 18 May 2014 03:37:25 PM JST
  
* Sun 18 May 2014 03:37:25 PM JST
  
* Sun 18 May 2014 03:37:25 PM JST
  
* Sun 18 May 2014 03:37:25 PM JST
  
* Sun 18 May 2014 03:37:25 PM JST
  
* Sun 18 May 2014 03:37:25 PM JST
  
* Sun 18 May 2014 03:37:25 PM JST
  
* Sun 18 May 2014 03:37:25 PM JST
  
* Sun 18 May 2014 03:37:25 PM JST
  
* Sun 18 May 2014 03:37:25 PM JST
  
* Sun 18 May 2014 03:37:25 PM JST
  
* Sun 18 May 2014 03:37:26 PM JST
  
* Sun 18 May 2014 03:37:26 PM JST
  
* Sun 18 May 2014 03:37:26 PM JST
  
* Sun 18 May 2014 03:37:26 PM JST
  
* Sun 18 May 2014 03:37:26 PM JST
  
* Sun 18 May 2014 03:37:26 PM JST
  
* Sun 18 May 2014 03:37:26 PM JST
  
* Sun 18 May 2014 03:37:26 PM JST
  
* Sun 18 May 2014 03:37:26 PM JST
  
* Sun 18 May 2014 03:37:26 PM JST
  
* Sun 18 May 2014 03:37:26 PM JST
  
* Sun 18 May 2014 03:37:26 PM JST
  
* Sun 18 May 2014 03:37:26 PM JST
  
* Sun 18 May 2014 03:37:26 PM JST
  
* Sun 18 May 2014 03:37:26 PM JST
  
* Sun 18 May 2014 03:37:27 PM JST
  
* Sun 18 May 2014 03:37:27 PM JST
  
* Sun 18 May 2014 03:37:27 PM JST
  
* Sun 18 May 2014 03:37:27 PM JST
  
* Sun 18 May 2014 03:37:27 PM JST
  
* Sun 18 May 2014 03:37:27 PM JST
  
* Sun 18 May 2014 03:37:27 PM JST
  
* Sun 18 May 2014 03:37:27 PM JST
  
* Sun 18 May 2014 03:37:27 PM JST
  
* Sun 18 May 2014 03:37:27 PM JST
  
* Sun 18 May 2014 03:37:27 PM JST
  
* Sun 18 May 2014 03:37:27 PM JST
  
* Sun 18 May 2014 03:37:27 PM JST
  
* Sun 18 May 2014 03:37:27 PM JST
  
* Sun 18 May 2014 03:37:28 PM JST
  
* Sun 18 May 2014 03:37:28 PM JST
  
* Sun 18 May 2014 03:37:28 PM JST
  
* Sun 18 May 2014 03:37:28 PM JST
  
* Sun 18 May 2014 03:37:28 PM JST
  
* Sun 18 May 2014 03:37:28 PM JST
  
* Sun 18 May 2014 03:37:28 PM JST
  
* Sun 18 May 2014 03:37:28 PM JST
  
* Sun 18 May 2014 03:37:28 PM JST
  
* Sun 18 May 2014 03:37:28 PM JST
  
* Sun 18 May 2014 03:37:28 PM JST
  
* Sun 18 May 2014 03:37:28 PM JST
  
* Sun 18 May 2014 03:37:28 PM JST
  
* Sun 18 May 2014 03:37:28 PM JST
  
* Sun 18 May 2014 03:37:28 PM JST
  
* Sun 18 May 2014 03:37:29 PM JST
  
* Sun 18 May 2014 03:37:29 PM JST
  
* Sun 18 May 2014 03:37:29 PM JST
  
* Sun 18 May 2014 03:37:29 PM JST
  
* Sun 18 May 2014 03:37:29 PM JST
  
* Sun 18 May 2014 03:37:29 PM JST
  
* Sun 18 May 2014 03:37:29 PM JST
  
* Sun 18 May 2014 03:37:29 PM JST
  
* Sun 18 May 2014 03:37:29 PM JST
  
* Sun 18 May 2014 03:37:29 PM JST
  
* Sun 18 May 2014 03:37:29 PM JST
  
* Sun 18 May 2014 03:37:29 PM JST
  
* Sun 18 May 2014 03:37:29 PM JST
  
* Sun 18 May 2014 03:37:29 PM JST
  
* Sun 18 May 2014 03:37:30 PM JST
  
* Sun 18 May 2014 03:37:30 PM JST
  
* Sun 18 May 2014 03:37:30 PM JST
  
* Sun 18 May 2014 03:37:30 PM JST
  
* Sun 18 May 2014 03:37:30 PM JST
  
* Sun 18 May 2014 03:37:30 PM JST
  
* Sun 18 May 2014 03:37:30 PM JST
  
* Sun 18 May 2014 03:37:30 PM JST
  
* Sun 18 May 2014 03:37:30 PM JST
  
* Sun 18 May 2014 03:37:30 PM JST
  
* Sun 18 May 2014 03:37:30 PM JST
  
* Sun 18 May 2014 03:37:30 PM JST
  
* Sun 18 May 2014 03:37:30 PM JST
  
* Sun 18 May 2014 03:37:30 PM JST
  
* Sun 18 May 2014 03:37:30 PM JST
  
* Sun 18 May 2014 03:37:31 PM JST
  
* Sun 18 May 2014 03:37:31 PM JST
  
* Sun 18 May 2014 03:37:31 PM JST
  
* Sun 18 May 2014 03:37:31 PM JST
  
* Sun 18 May 2014 03:37:31 PM JST
  
* Sun 18 May 2014 03:37:31 PM JST
  
* Sun 18 May 2014 03:37:31 PM JST
  
* Sun 18 May 2014 03:37:31 PM JST
  
* Sun 18 May 2014 03:37:31 PM JST
  
* Sun 18 May 2014 03:37:31 PM JST
  
* Sun 18 May 2014 03:37:31 PM JST
  
* Sun 18 May 2014 03:37:31 PM JST
  
* Sun 18 May 2014 03:37:32 PM JST
  
* Sun 18 May 2014 03:37:32 PM JST
  
* Sun 18 May 2014 03:37:32 PM JST
  
* Sun 18 May 2014 03:37:32 PM JST
  
* Sun 18 May 2014 03:37:32 PM JST
  
* Sun 18 May 2014 03:37:32 PM JST
  
* Sun 18 May 2014 03:37:32 PM JST
  
* Sun 18 May 2014 03:37:32 PM JST
  
* Sun 18 May 2014 03:37:38 PM JST
py
* Sun 18 May 2014 03:40:55 PM JST

* Sun 18 May 2014 03:40:55 PM JST

* Sun 18 May 2014 03:40:55 PM JST
from xcb2.xproto.extensions.__init__

* Sun 18 May 2014 03:41:03 PM JST

* Sun 18 May 2014 03:41:03 PM JST

* Sun 18 May 2014 03:41:03 PM JST
alloccolorcelles.py

* Sun 18 May 2014 05:10:53 PM JST
ato
* Sun 18 May 2014 05:11:32 PM JST
InternAtom
* Sun 18 May 2014 05:13:32 PM JST

* Sun 18 May 2014 05:13:33 PM JST
internatom
* Sun 18 May 2014 05:13:41 PM JST
InternAtom
* Sun 18 May 2014 05:13:47 PM JST
AtomName
* Sun 18 May 2014 05:14:31 PM JST
delete, 
* Sun 18 May 2014 05:15:22 PM JST
_StringIO
* Sun 18 May 2014 05:16:27 PM JST
        self._atom = _StringIO()
        self._types = _StringIO()

* Sun 18 May 2014 05:16:34 PM JST
        self._atom = _StringIO()
        self._types = _StringIO()

* Sun 18 May 2014 05:17:44 PM JST
        
* Sun 18 May 2014 05:19:11 PM JST
__call__
* Sun 18 May 2014 05:21:32 PM JST
GetPropertyCookie(), GetPropertyReply
* Sun 18 May 2014 05:21:39 PM JST
            
* Sun 18 May 2014 10:53:31 PM JST
import 
* Sun 18 May 2014 11:44:15 PM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, delete, window, property, type,
                        long_offset, long_length))

* Sun 18 May 2014 11:44:31 PM JST
getvalue
* Sun 18 May 2014 11:44:32 PM JST
buf.getvalue
* Sun 18 May 2014 11:45:05 PM JST
delete, window, property, type, long_offset, long_length
* Sun 18 May 2014 11:46:17 PM JST
timeit
* Sun 18 May 2014 11:57:33 PM JST
_StringIO
* Sun 18 May 2014 11:58:32 PM JST

* Sun 18 May 2014 11:58:32 PM JST

* Sun 18 May 2014 11:58:32 PM JST
        return buf.getvalue()

* Sun 18 May 2014 11:59:00 PM JST
                            
* Sun 18 May 2014 11:59:28 PM JST
                
* Sun 18 May 2014 11:59:54 PM JST
delete, window, property, type, long_offset, long_length
* Mon 19 May 2014 12:00:22 AM JST
        self._makebinary(delete, window, property, type,
                         long_offset, long_length)

* Mon 19 May 2014 12:00:31 AM JST
buf
* Mon 19 May 2014 12:00:59 AM JST
20
* Mon 19 May 2014 12:01:20 AM JST
20
* Mon 19 May 2014 12:24:08 AM JST
            
* Mon 19 May 2014 01:03:13 AM JST
        self._makebinary(delete, window, property, type,
                         long_offset, long_length)

* Mon 19 May 2014 01:05:31 AM JST
class GetPropertyMethodAbstract(CoreMethodAbstract):
    r"""SUMMARY
    """
    atomname = None

    def __init__(self, connection):
        r"""

        @Arguments:
        - `connection`:
        """
        CoreMethodAbstract.__init__(self, connection)

        self.atom = InternAtom(self._connection).request(self.atomname).reply()
        self.types = AtomName(self._connection, self.atomname).types

        self._atom = _StringIO()
        self._types = _StringIO()

        self._atom.write(_pack('I', self.atom))
        self._types.write(_pack('I', self.types))

    def request(self, window, delete=False, long_offset=0, long_length=10):
        buf = _StringIO()
        buf.write('=B2xI', delete, window)
        buf.write(self._atom.getvalue())
        buf.write(self._types.getvalue())
        buf.write('II', long_offset, long_length)
        return self._connection.core.send_request(
            Request(buf.getvalue(), 20, False, True),
            GetPropertyCookie(), GetPropertyReply)

    def __call__(self, window, delete=False, long_offset=0, long_length=10):
        return self.request(window, delete, long_offset, long_length)


* Mon 19 May 2014 01:05:43 AM JST
GetPropertyAbstract
* Mon 19 May 2014 01:08:25 AM JST
GetProperty
* Mon 19 May 2014 01:11:06 AM JST
_request
* Mon 19 May 2014 01:30:57 AM JST
buflist
* Mon 19 May 2014 01:31:33 AM JST
len
* Mon 19 May 2014 01:31:33 AM JST
io.len
* Mon 19 May 2014 01:34:25 AM JST
readline()
* Mon 19 May 2014 10:18:41 AM JST

* Mon 19 May 2014 10:18:42 AM JST

* Mon 19 May 2014 10:18:42 AM JST
        self._

* Mon 19 May 2014 10:18:52 AM JST
CoreSubMethodAbstract
* Mon 19 May 2014 10:19:36 AM JST
connection
* Mon 19 May 2014 10:19:51 AM JST

* Mon 19 May 2014 10:19:51 AM JST

* Mon 19 May 2014 10:19:52 AM JST
        GetProperty.__init__(self, connection)

* Mon 19 May 2014 10:20:28 AM JST
buf
* Mon 19 May 2014 10:22:01 AM JST
self._getbinary(delete, window, property, type,
                         long_offset, long_length)
* Mon 19 May 2014 10:22:07 AM JST
            
* Mon 19 May 2014 10:22:42 AM JST
_
* Mon 19 May 2014 10:22:42 AM JST
self._
* Mon 19 May 2014 10:22:44 AM JST
_
* Mon 19 May 2014 10:22:45 AM JST
self._
* Mon 19 May 2014 10:23:07 AM JST
            
* Mon 19 May 2014 10:23:12 AM JST
            
* Mon 19 May 2014 10:25:07 AM JST
_
* Mon 19 May 2014 10:25:08 AM JST
self._
* Mon 19 May 2014 10:25:12 AM JST
_
* Mon 19 May 2014 10:25:13 AM JST
self._
* Mon 19 May 2014 10:25:17 AM JST
self._
* Mon 19 May 2014 10:25:19 AM JST
self._
* Mon 19 May 2014 10:25:21 AM JST
self._
* Mon 19 May 2014 10:28:49 AM JST
self._connection
* Mon 19 May 2014 10:29:04 AM JST
self.
* Mon 19 May 2014 10:30:55 AM JST
        self._atom = _StringIO()
        self._types = _StringIO()


* Mon 19 May 2014 10:36:36 AM JST
class GetWM_NAME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_NAME'


class GetWM_LOCALE_NAME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_LOCALE_NAME'


class GetWM_ICON_NAME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_ICON_NAME'


class GetWM_CLASS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_CLASS'


class GetWM_TRANSIENT_FOR(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_TRANSIENT_FOR'


class GetWM_PROTOCOLS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_PROTOCOLS'


class GetWM_COLORMAP_WINDOWS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_COLORMAP_WINDOWS'


class GetWM_CLIENT_MACHINE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_CLIENT_MACHINE'


class GetWM_STATE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_STATE'


class Get_WIN_WORKSPACE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_WIN_WORKSPACE'


class Get_WIN_STATE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_WIN_STATE'


class Get_NET_SUPPORTED(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_SUPPORTED'


class Get_NET_CLIENT_LIST(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_CLIENT_LIST'


class Get_NET_CLIENT_LIST_STACKING(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_CLIENT_LIST_STACKING'


class Get_NET_NUMBER_OF_DESKTOPS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_NUMBER_OF_DESKTOPS'


class Get_NET_DESKTOP_GEOMETRY(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_DESKTOP_GEOMETRY'


class Get_NET_DESKTOP_VIEWPORT(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_DESKTOP_VIEWPORT'


class Get_NET_CURRENT_DESKTOP(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_CURRENT_DESKTOP'


class Get_NET_DESKTOP_NAMES(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_DESKTOP_NAMES'


class Get_NET_ACTIVE_WINDOW(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_ACTIVE_WINDOW'


class Get_NET_WORKAREA(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WORKAREA'


class Get_NET_SUPPORTING_WM_CHECK(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_SUPPORTING_WM_CHECK'


class Get_NET_VIRTUAL_ROOTS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_VIRTUAL_ROOTS'


class Get_NET_DESKTOP_LAYOUT(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_DESKTOP_LAYOUT'


class Get_NET_SHOWING_DESKTOP(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_SHOWING_DESKTOP'


class Get_NET_CLOSE_WINDOW(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_CLOSE_WINDOW'


class Get_NET_MOVERESIZE_WINDOW(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_MOVERESIZE_WINDOW'


class Get_NET_WM_MORERESIZE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_MORERESIZE'


class Get_NET_RESTACK_WINDOW(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_RESTACK_WINDOW'


class Get_NET_REQUEST_FRAME_EXTENTS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_REQUEST_FRAME_EXTENTS'


class Get_NET_WM_NAME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_NAME'


class Get_NET_WM_VISIBLE_NAME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_VISIBLE_NAME'


class Get_NET_WM_ICON_NAME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_ICON_NAME'


class Get_NET_WM_VISIBLE_ICON_NAME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_VISIBLE_ICON_NAME'


class Get_NET_WM_DESKTOP(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_DESKTOP'


class Get_NET_WM_WINDOW_TYPE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_WINDOW_TYPE'


class Get_NET_WM_STATE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_STATE'


class Get_NET_WM_ALLOWED_ACTIONS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_ALLOWED_ACTIONS'


class Get_NET_WM_STRUT(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_STRUT'


class Get_NET_WM_STRUT_PARTIAL(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_STRUT_PARTIAL'


class Get_NET_WM_ICON_GEOMETRY(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_ICON_GEOMETRY'


class Get_NET_WM_ICON(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_ICON'


class Get_NET_WM_PID(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_PID'


class Get_NET_WM_HANDLED_ICONS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_HANDLED_ICONS'


class Get_NET_WM_USER_TIME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_USER_TIME'


class Get_NET_WM_USER_TIME_WINDOW(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_USER_TIME_WINDOW'


class Get_NET_FRAME_EXTENTS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_FRAME_EXTENTS'


class Get_OB_APP_TYPE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_OB_APP_TYPE'



* Mon 19 May 2014 10:37:49 AM JST
        self.WM_NAME                    = GetWM_NAME(self)
        self.WM_LOCALE_NAME             = GetWM_LOCALE_NAME(self)
        self.WM_ICON_NAME               = GetWM_ICON_NAME(self)
        self.WM_CLASS                   = GetWM_CLASS(self)
        self.WM_TRANSIENT_FOR           = GetWM_TRANSIENT_FOR(self)
        self.WM_PROTOCOLS               = GetWM_PROTOCOLS(self)
        self.WM_COLORMAP_WINDOWS        = GetWM_COLORMAP_WINDOWS(self)
        self.WM_CLIENT_MACHINE          = GetWM_CLIENT_MACHINE(self)
        self.WM_STATE                   = GetWM_STATE(self)
        self._WIN_WORKSPACE             = Get_WIN_WORKSPACE(self)
        self._WIN_STATE                 = Get_WIN_STATE(self)
        self._NET_SUPPORTED             = Get_NET_SUPPORTED(self)
        self._NET_CLIENT_LIST           = Get_NET_CLIENT_LIST(self)
        self._NET_CLIENT_LIST_STACKING  = Get_NET_CLIENT_LIST_STACKING(self)
        self._NET_NUMBER_OF_DESKTOPS    = Get_NET_NUMBER_OF_DESKTOPS(self)
        self._NET_DESKTOP_GEOMETRY      = Get_NET_DESKTOP_GEOMETRY(self)
        self._NET_DESKTOP_VIEWPORT      = Get_NET_DESKTOP_VIEWPORT(self)
        self._NET_CURRENT_DESKTOP       = Get_NET_CURRENT_DESKTOP(self)
        self._NET_DESKTOP_NAMES         = Get_NET_DESKTOP_NAMES(self)
        self._NET_ACTIVE_WINDOW         = Get_NET_ACTIVE_WINDOW(self)
        self._NET_WORKAREA              = Get_NET_WORKAREA(self)
        self._NET_SUPPORTING_WM_CHECK   = Get_NET_SUPPORTING_WM_CHECK(self)
        self._NET_VIRTUAL_ROOTS         = Get_NET_VIRTUAL_ROOTS(self)
        self._NET_DESKTOP_LAYOUT        = Get_NET_DESKTOP_LAYOUT(self)
        self._NET_SHOWING_DESKTOP       = Get_NET_SHOWING_DESKTOP(self)
        self._NET_CLOSE_WINDOW          = Get_NET_CLOSE_WINDOW(self)
        self._NET_MOVERESIZE_WINDOW     = Get_NET_MOVERESIZE_WINDOW(self)
        self._NET_WM_MORERESIZE         = Get_NET_WM_MORERESIZE(self)
        self._NET_RESTACK_WINDOW        = Get_NET_RESTACK_WINDOW(self)
        self._NET_REQUEST_FRAME_EXTENTS = Get_NET_REQUEST_FRAME_EXTENTS(self)
        self._NET_WM_NAME               = Get_NET_WM_NAME(self)
        self._NET_WM_STATE              = Get_NET_WM_STATE(self)
        self._NET_WM_VISIBLE_NAME       = Get_NET_WM_VISIBLE_NAME(self)
        self._NET_WM_ICON_NAME          = Get_NET_WM_ICON_NAME(self)
        self._NET_WM_VISIBLE_ICON_NAME  = Get_NET_WM_VISIBLE_ICON_NAME(self)
        self._NET_WM_DESKTOP            = Get_NET_WM_DESKTOP(self)
        self._NET_WM_WINDOW_TYPE        = Get_NET_WM_WINDOW_TYPE(self)
        self._NET_WM_ALLOWED_ACTIONS    = Get_NET_WM_ALLOWED_ACTIONS(self)
        self._NET_WM_STRUT              = Get_NET_WM_STRUT(self)
        self._NET_WM_STRUT_PARTIAL      = Get_NET_WM_STRUT_PARTIAL(self)
        self._NET_WM_ICON_GEOMETRY      = Get_NET_WM_ICON_GEOMETRY(self)
        self._NET_WM_ICON               = Get_NET_WM_ICON(self)
        self._NET_WM_PID                = Get_NET_WM_PID(self)
        self._NET_WM_HANDLED_ICONS      = Get_NET_WM_HANDLED_ICONS(self)
        self._NET_WM_USER_TIME          = Get_NET_WM_USER_TIME(self)
        self._NET_WM_USER_TIME_WINDOW   = Get_NET_WM_USER_TIME_WINDOW(self)
        self._NET_FRAME_EXTENTS         = Get_NET_FRAME_EXTENTS(self)
        self._OB_APP_TYPE               = Get_OB_APP_TYPE(self)

* Mon 19 May 2014 10:42:01 AM JST
from xcb2.xproto import extensions
* Mon 19 May 2014 10:42:05 AM JST
extensions
* Mon 19 May 2014 10:46:53 AM JST
H
* Mon 19 May 2014 10:48:14 AM JST
self.rawconnection
* Mon 19 May 2014 10:51:13 AM JST
class WrapReplyAbstract(ConnectionAbstract):
    r"""SUMMARY
    """

    def __init__(self, connection, raw):
        r"""

        @Arguments:
        - `raw`:
        - `connection`:
        """
        ConnectionAbstract.__init__(self, connection)
        self._raw = raw

* Mon 19 May 2014 10:53:38 AM JST
ConnectionAbstract
* Mon 19 May 2014 10:53:43 AM JST
ConnectionAbstract
* Mon 19 May 2014 10:56:12 AM JST
self.
* Mon 19 May 2014 10:56:27 AM JST
InternAtom(
            self._connection).request(
                True, len(self.atomname), self.atomname)
* Mon 19 May 2014 10:56:30 AM JST
atomname
* Mon 19 May 2014 10:56:31 AM JST
self.atomname
* Mon 19 May 2014 10:56:34 AM JST
atomname
* Mon 19 May 2014 10:56:34 AM JST
self.atomname
* Mon 19 May 2014 10:56:36 AM JST
                
* Mon 19 May 2014 11:01:53 AM JST

* Mon 19 May 2014 11:01:53 AM JST

* Mon 19 May 2014 11:01:53 AM JST
        print(type(self.atom))

* Mon 19 May 2014 11:02:53 AM JST
get_full_value()
* Mon 19 May 2014 11:03:10 AM JST

* Mon 19 May 2014 11:03:10 AM JST

* Mon 19 May 2014 11:03:10 AM JST
        print(types)

* Mon 19 May 2014 11:03:12 AM JST

* Mon 19 May 2014 11:03:13 AM JST

* Mon 19 May 2014 11:03:13 AM JST
        print(types)

* Mon 19 May 2014 11:03:29 AM JST
tesgetproperty
* Mon 19 May 2014 11:03:50 AM JST
WM_CLASS
* Mon 19 May 2014 11:04:28 AM JST
54525974
* Mon 19 May 2014 11:06:03 AM JST
reply()
* Mon 19 May 2014 11:07:23 AM JST
buf.getvalue()
* Mon 19 May 2014 11:09:25 AM JST
buf.getvalue()
* Mon 19 May 2014 11:09:37 AM JST
repr(buf.getvalue())
* Mon 19 May 2014 11:12:49 AM JST
buf.getvalue()
* Mon 19 May 2014 11:13:09 AM JST
tesgetproperty
* Mon 19 May 2014 11:13:36 AM JST
'\x00\x00\x00\x00\x16\x00@\x03C\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00'
* Mon 19 May 2014 11:13:41 AM JST
'\x00\x00\x00\x16\x00@\x03C\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00'
* Mon 19 May 2014 11:13:58 AM JST
=xB2xI
* Mon 19 May 2014 11:15:24 AM JST

* Mon 19 May 2014 11:15:24 AM JST

* Mon 19 May 2014 11:15:24 AM JST
        print(repr(buf.getvalue()))

* Mon 19 May 2014 11:15:39 AM JST

* Mon 19 May 2014 11:15:39 AM JST

* Mon 19 May 2014 11:15:39 AM JST
        print(repr(buf.getvalue()))

* Tue 20 May 2014 02:31:29 AM JST
class GetPropertyMethodAbstract(CoreSubMethodAbstract):
    r"""SUMMARY
    """
    atomname = None

    def __init__(self, parent):
        r"""

        @Arguments:
        - `connection`:
        """
        CoreSubMethodAbstract.__init__(self, parent)

        self._atom = _StringIO()
        self._types = _StringIO()

        self.atom = InternAtom(
            self._connection).request(
                True, len(self.atomname), self.atomname).reply().atom
        types = AtomName(self._connection, self.atomname).types.name
        self.types = InternAtom(
            self._connection).request(True, len(types), types).reply().atom

        self._atom.write(_pack('I', self.atom))
        self._types.write(_pack('I', self.types))

    def _getbinary(self, window, delete=False, long_offset=0, long_length=10):
        buf = _StringIO()
        buf.write(_pack('=xB2xI', delete, window))
        buf.write(self._atom.getvalue())
        buf.write(self._types.getvalue())
        buf.write(_pack('II', long_offset, long_length))
        return buf.getvalue()

    def __call__(self, window, delete=False, long_offset=0, long_length=10):
        r"""SUMMARY

        __call__(window, delete=False, long_offset=0, long_length=10)

        @Arguments:
        - `window`:
        - `delete`:
        - `long_offset`:
        - `long_length`:

        @Return:
        """
        return self._parent.request(
            self._getbinary(window, delete, long_offset, long_length))


class GetWM_NAME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_NAME'


class GetWM_LOCALE_NAME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_LOCALE_NAME'


class GetWM_ICON_NAME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_ICON_NAME'


class GetWM_CLASS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_CLASS'


class GetWM_TRANSIENT_FOR(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_TRANSIENT_FOR'


class GetWM_PROTOCOLS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_PROTOCOLS'


class GetWM_COLORMAP_WINDOWS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_COLORMAP_WINDOWS'


class GetWM_CLIENT_MACHINE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_CLIENT_MACHINE'


class GetWM_STATE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = 'WM_STATE'


class Get_WIN_WORKSPACE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_WIN_WORKSPACE'


class Get_WIN_STATE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_WIN_STATE'


class Get_NET_SUPPORTED(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_SUPPORTED'


class Get_NET_CLIENT_LIST(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_CLIENT_LIST'


class Get_NET_CLIENT_LIST_STACKING(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_CLIENT_LIST_STACKING'


class Get_NET_NUMBER_OF_DESKTOPS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_NUMBER_OF_DESKTOPS'


class Get_NET_DESKTOP_GEOMETRY(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_DESKTOP_GEOMETRY'


class Get_NET_DESKTOP_VIEWPORT(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_DESKTOP_VIEWPORT'


class Get_NET_CURRENT_DESKTOP(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_CURRENT_DESKTOP'


class Get_NET_DESKTOP_NAMES(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_DESKTOP_NAMES'


class Get_NET_ACTIVE_WINDOW(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_ACTIVE_WINDOW'


class Get_NET_WORKAREA(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WORKAREA'


class Get_NET_SUPPORTING_WM_CHECK(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_SUPPORTING_WM_CHECK'


class Get_NET_VIRTUAL_ROOTS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_VIRTUAL_ROOTS'


class Get_NET_DESKTOP_LAYOUT(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_DESKTOP_LAYOUT'


class Get_NET_SHOWING_DESKTOP(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_SHOWING_DESKTOP'


class Get_NET_CLOSE_WINDOW(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_CLOSE_WINDOW'


class Get_NET_MOVERESIZE_WINDOW(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_MOVERESIZE_WINDOW'


class Get_NET_WM_MORERESIZE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_MORERESIZE'


class Get_NET_RESTACK_WINDOW(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_RESTACK_WINDOW'


class Get_NET_REQUEST_FRAME_EXTENTS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_REQUEST_FRAME_EXTENTS'


class Get_NET_WM_NAME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_NAME'


class Get_NET_WM_VISIBLE_NAME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_VISIBLE_NAME'


class Get_NET_WM_ICON_NAME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_ICON_NAME'


class Get_NET_WM_VISIBLE_ICON_NAME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_VISIBLE_ICON_NAME'


class Get_NET_WM_DESKTOP(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_DESKTOP'


class Get_NET_WM_WINDOW_TYPE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_WINDOW_TYPE'


class Get_NET_WM_STATE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_STATE'


class Get_NET_WM_ALLOWED_ACTIONS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_ALLOWED_ACTIONS'


class Get_NET_WM_STRUT(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_STRUT'


class Get_NET_WM_STRUT_PARTIAL(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_STRUT_PARTIAL'


class Get_NET_WM_ICON_GEOMETRY(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_ICON_GEOMETRY'


class Get_NET_WM_ICON(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_ICON'


class Get_NET_WM_PID(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_PID'


class Get_NET_WM_HANDLED_ICONS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_HANDLED_ICONS'


class Get_NET_WM_USER_TIME(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_USER_TIME'


class Get_NET_WM_USER_TIME_WINDOW(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_WM_USER_TIME_WINDOW'


class Get_NET_FRAME_EXTENTS(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_NET_FRAME_EXTENTS'


class Get_OB_APP_TYPE(GetPropertyMethodAbstract):
    r"""SUMMARY
    """
    atomname = '_OB_APP_TYPE'



* Tue 20 May 2014 02:32:10 AM JST

* Tue 20 May 2014 02:32:10 AM JST

* Tue 20 May 2014 02:32:10 AM JST
        print(repr(buf.getvalue()))

* Tue 20 May 2014 02:38:57 AM JST
from abc import ABCMeta, abstractmethod
* Tue 20 May 2014 02:39:14 AM JST
__metaclass__ = ABCMeta
* Tue 20 May 2014 02:39:45 AM JST
    @abstractmethod
    def request(self, binary):
        raise NotImplementedError()

* Tue 20 May 2014 02:41:11 AM JST

* Tue 20 May 2014 02:41:11 AM JST

* Tue 20 May 2014 02:41:11 AM JST
from abc import ABCMeta, abstractmethod

* Tue 20 May 2014 02:41:16 AM JST

* Tue 20 May 2014 02:41:16 AM JST

* Tue 20 May 2014 02:41:16 AM JST
    __metaclass__ = ABCMeta

* Tue 20 May 2014 02:42:04 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, contiguous, cmap, colors, planes))

* Tue 20 May 2014 02:42:10 AM JST
rturn 
* Tue 20 May 2014 02:42:15 AM JST
getvalue
* Tue 20 May 2014 02:42:16 AM JST
self.getvalue
* Tue 20 May 2014 02:42:56 AM JST

* Tue 20 May 2014 02:42:56 AM JST

* Tue 20 May 2014 02:42:56 AM JST
        buf = _StringIO()

* Tue 20 May 2014 02:42:57 AM JST
        buf = _StringIO()

* Tue 20 May 2014 02:42:57 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, contiguous, cmap, colors, planes))

* Tue 20 May 2014 02:43:27 AM JST

* Tue 20 May 2014 02:43:27 AM JST

* Tue 20 May 2014 02:43:27 AM JST
    __metaclass__ = ABCMeta

* Tue 20 May 2014 02:43:28 AM JST

* Tue 20 May 2014 02:43:28 AM JST

* Tue 20 May 2014 02:43:29 AM JST
    __metaclass__ = ABCMeta

* Tue 20 May 2014 02:44:00 AM JST

* Tue 20 May 2014 02:44:00 AM JST

* Tue 20 May 2014 02:44:00 AM JST
        buf = _StringIO()

* Tue 20 May 2014 02:44:00 AM JST
        buf = _StringIO()

* Tue 20 May 2014 02:44:00 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, contiguous, cmap, colors, planes))

* Tue 20 May 2014 02:44:03 AM JST
86
* Tue 20 May 2014 02:44:07 AM JST
getvalue()
* Tue 20 May 2014 02:44:07 AM JST
buf.getvalue()
* Tue 20 May 2014 02:46:57 AM JST

* Tue 20 May 2014 02:46:57 AM JST

* Tue 20 May 2014 02:46:57 AM JST
from abc import ABCMeta, abstractmethod

* Tue 20 May 2014 02:47:01 AM JST

* Tue 20 May 2014 02:47:02 AM JST

* Tue 20 May 2014 02:47:02 AM JST
    __metaclass__ = ABCMeta

* Tue 20 May 2014 02:47:13 AM JST
self.
* Tue 20 May 2014 02:47:41 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, contiguous, cmap, colors, reds, greens, blues))

* Tue 20 May 2014 02:47:51 AM JST
self
* Tue 20 May 2014 02:48:36 AM JST
getvalue()
* Tue 20 May 2014 02:48:36 AM JST
buf.getvalue()
* Tue 20 May 2014 02:48:46 AM JST
87
* Tue 20 May 2014 02:49:15 AM JST

* Tue 20 May 2014 02:49:15 AM JST

* Tue 20 May 2014 02:49:16 AM JST
        - [yas] elisp error!:

* Tue 20 May 2014 02:49:16 AM JST
        - [yas] elisp error!:

* Tue 20 May 2014 02:49:16 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 02:49:16 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 02:49:16 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 02:49:17 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 02:49:17 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 02:49:19 AM JST

* Tue 20 May 2014 02:49:19 AM JST

* Tue 20 May 2014 02:49:19 AM JST
        buf = _StringIO()

* Tue 20 May 2014 02:49:19 AM JST
        buf = _StringIO()

* Tue 20 May 2014 02:49:19 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, contiguous, cmap, colors, reds, greens, blues))

* Tue 20 May 2014 02:51:16 AM JST

* Tue 20 May 2014 02:51:16 AM JST

* Tue 20 May 2014 02:51:16 AM JST
from abc import ABCMeta, abstractmethod

* Tue 20 May 2014 02:51:19 AM JST

* Tue 20 May 2014 02:51:19 AM JST

* Tue 20 May 2014 02:51:19 AM JST
    __metaclass__ = ABCMeta

* Tue 20 May 2014 02:51:57 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap, red, green, blue))

* Tue 20 May 2014 02:52:53 AM JST

* Tue 20 May 2014 02:52:53 AM JST

* Tue 20 May 2014 02:52:53 AM JST
        buf = _StringIO()

* Tue 20 May 2014 02:52:54 AM JST
        buf = _StringIO()

* Tue 20 May 2014 02:52:54 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap, red, green, blue))

* Tue 20 May 2014 02:53:07 AM JST
84
* Tue 20 May 2014 02:54:21 AM JST

* Tue 20 May 2014 02:54:21 AM JST

* Tue 20 May 2014 02:54:21 AM JST
from abc import ABCMeta, abstractmethod

* Tue 20 May 2014 02:54:23 AM JST

* Tue 20 May 2014 02:54:23 AM JST

* Tue 20 May 2014 02:54:23 AM JST
    __metaclass__ = ABCMeta

* Tue 20 May 2014 02:54:45 AM JST
_binary
* Tue 20 May 2014 02:55:00 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap, name_len))

* Tue 20 May 2014 02:55:53 AM JST
85
* Tue 20 May 2014 02:55:59 AM JST

* Tue 20 May 2014 02:55:59 AM JST

* Tue 20 May 2014 02:55:59 AM JST
        buf = _StringIO()

* Tue 20 May 2014 02:55:59 AM JST
        buf = _StringIO()

* Tue 20 May 2014 02:55:59 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap, name_len))

* Tue 20 May 2014 02:56:28 AM JST

* Tue 20 May 2014 02:56:28 AM JST

* Tue 20 May 2014 02:56:28 AM JST
        - [yas] elisp error!:

* Tue 20 May 2014 02:56:28 AM JST
        - [yas] elisp error!:

* Tue 20 May 2014 02:56:28 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 02:56:28 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 02:56:29 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 02:56:29 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 02:56:29 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 02:56:31 AM JST

* Tue 20 May 2014 02:56:31 AM JST

* Tue 20 May 2014 02:56:31 AM JST
        - [yas] elisp error!:

* Tue 20 May 2014 02:56:32 AM JST
        - [yas] elisp error!:

* Tue 20 May 2014 02:56:32 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 02:56:32 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 02:56:32 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 02:56:32 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 02:56:32 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 03:00:11 AM JST
def 
* Tue 20 May 2014 03:00:23 AM JST

* Tue 20 May 2014 03:00:23 AM JST

* Tue 20 May 2014 03:00:23 AM JST
    __metaclass__ = ABCMeta

* Tue 20 May 2014 03:00:46 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, mode, time))

* Tue 20 May 2014 03:00:53 AM JST
sel
* Tue 20 May 2014 03:01:17 AM JST
binary
* Tue 20 May 2014 03:01:44 AM JST
35
* Tue 20 May 2014 03:01:52 AM JST

* Tue 20 May 2014 03:01:52 AM JST

* Tue 20 May 2014 03:01:52 AM JST
        buf = _StringIO()

* Tue 20 May 2014 03:01:52 AM JST
        buf = _StringIO()

* Tue 20 May 2014 03:01:52 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, mode, time))

* Tue 20 May 2014 03:02:04 AM JST
getvalue()
* Tue 20 May 2014 03:02:05 AM JST
buf.getvalue()
* Tue 20 May 2014 03:02:07 AM JST
35
* Tue 20 May 2014 03:02:14 AM JST

* Tue 20 May 2014 03:02:14 AM JST

* Tue 20 May 2014 03:02:14 AM JST
        - [yas] elisp error!:

* Tue 20 May 2014 03:02:14 AM JST
        - [yas] elisp error!:

* Tue 20 May 2014 03:02:14 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 03:02:14 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 03:02:14 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 03:02:15 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 03:02:15 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 03:02:18 AM JST

* Tue 20 May 2014 03:02:18 AM JST

* Tue 20 May 2014 03:02:18 AM JST
        - [yas] elisp error!:

* Tue 20 May 2014 03:02:18 AM JST
        - [yas] elisp error!:

* Tue 20 May 2014 03:02:18 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 03:02:18 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 03:02:18 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 03:02:19 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 03:02:19 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Tue 20 May 2014 03:06:28 AM JST
from abc import ABCMeta, abstractmethod
* Tue 20 May 2014 03:06:46 AM JST
(replace-string "from abc import ABCMeta, abstractmethod
* Tue 20 May 2014 03:06:47 AM JST
(replace-string "from abc import ABCMeta, abstractmethod
" "")
* Tue 20 May 2014 03:07:29 AM JST
    __metaclass__ = ABCMeta
* Tue 20 May 2014 03:08:10 AM JST
    @abstractmethod
* Tue 20 May 2014 03:08:37 AM JST
(progn 
(goto-char 0)
(replace-string "from abc import ABCMeta, abstractmethod
" "")
(goto-char 0)
(replace-string "    __metaclass__ = ABCMeta
" "")
(goto-char 0)
(replace-string "    @abstractmethod
" "")
)
* Tue 20 May 2014 03:10:57 AM JST
(re-search-forward "    def request" nil 'noerror)
* Tue 20 May 2014 03:11:12 AM JST
(kill-line 2)
* Tue 20 May 2014 03:11:14 AM JST
(self, percent):
        raise NotImplementedError()

* Tue 20 May 2014 03:11:52 AM JST
(re-search-forward "    def request" nil 'noerror)
(beginning-of-line)
(kill-line 2)

* Tue 20 May 2014 03:12:08 AM JST
(goto-char 0)
(re-search-forward "    def request" nil 'noerror)
(beginning-of-line)
(kill-line 2)

* Tue 20 May 2014 03:12:18 AM JST
(progn
  (goto-char 0)
  (re-search-forward "    def request" nil 'noerror)
  (beginning-of-line)
  (kill-line 2)

  )
* Tue 20 May 2014 03:12:21 AM JST
    def request(self, percent):
        raise NotImplementedError()

* Tue 20 May 2014 03:12:49 AM JST
(progn 
(goto-char 0)
(replace-string "from abc import ABCMeta, abstractmethod
" "")
(goto-char 0)
(replace-string "    __metaclass__ = ABCMeta
" "")
(goto-char 0)
(replace-string "    @abstractmethod
" "")
(goto-char 0)
(re-search-forward "    def request" nil 'noerror)
(beginning-of-line)
(kill-line 2)
)
* Tue 20 May 2014 03:12:52 AM JST
    def request(self, percent):
        raise NotImplementedError()

* Tue 20 May 2014 03:14:35 AM JST
self.request(
* Tue 20 May 2014 03:14:56 AM JST
(re-search-forward "self.request(" nil 'noerror)
* Tue 20 May 2014 03:15:32 AM JST
(py:usable-next N)
* Tue 20 May 2014 03:18:16 AM JST
buffer-substring
* Tue 20 May 2014 03:19:43 AM JST
(let ((start (point)))
  )
* Tue 20 May 2014 03:20:18 AM JST
progn 
* Tue 20 May 2014 03:20:56 AM JST
(py:usable-next 10)
* Tue 20 May 2014 03:21:23 AM JST
(buffer-substring )
* Tue 20 May 2014 03:21:49 AM JST
(let* ((start (point))
       (end (save-excursion (py:usable-next 10) (point)))
       (string (buffer-substring start end))
      )
  (message string )
  )
* Tue 20 May 2014 03:22:05 AM JST
string
* Tue 20 May 2014 03:22:09 AM JST

* Tue 20 May 2014 03:22:09 AM JST

* Tue 20 May 2014 03:22:09 AM JST
(buffer-substring )

* Tue 20 May 2014 03:22:24 AM JST

* Tue 20 May 2014 03:22:24 AM JST

* Tue 20 May 2014 03:22:24 AM JST
(py:usable-next 10)

* Tue 20 May 2014 03:23:09 AM JST
(py:usable-next 10)
* Tue 20 May 2014 03:23:20 AM JST
(let* ((start (point))
       (end (save-excursion (py:usable-next 10) (point)))
       (args (buffer-substring start end))
      )
  (insert "self._getbinary(")
  (py:usable-next 10)
  (insert ")")
  )
* Tue 20 May 2014 03:25:40 AM JST
(goto-char 0)
(re-search-forward "fmt =" nil 'noerror)
(return-on-line)

* Tue 20 May 2014 03:25:58 AM JST
(progn 
(goto-char 0)
(re-search-forward "fmt =" nil 'noerror)
(return-on-line)
)
* Tue 20 May 2014 03:26:13 AM JST
(py:newline)
* Tue 20 May 2014 03:28:16 AM JST
(goto-char 0)
(re-search-forward "fmt =" nil 'noerror)
(return-on-line)
(py:newline)

* Tue 20 May 2014 03:28:59 AM JST
    def _getbinary(self, percent):
        return buf.getvalue()

* Tue 20 May 2014 03:29:09 AM JST
    def _getbinary(self, percent):
        buf = _StringIO()
        return buf.getvalue()
* Tue 20 May 2014 03:29:27 AM JST
percent
* Tue 20 May 2014 03:29:45 AM JST
(let* ((start (point))
       (end (save-excursion (py:usable-next 10) (point)))
       (args (buffer-substring start end))
      )
  (insert "self._getbinary(")
  (py:usable-next 10)
  (insert ")")
  (goto-char 0)
  (re-search-forward "fmt =" nil 'noerror)
  (return-on-line)
  (py:newline)
  (insert "    def _getbinary(self, " args "):
        buf = _StringIO()
        return buf.getvalue()")
  )
* Tue 20 May 2014 03:30:10 AM JST
(let* ((start (point))
       (end (save-excursion (py:usable-next 10) (point)))
       (args (buffer-substring start end))
      )
  (insert "self._getbinary(")
  (py:usable-next 10)
  (insert ")")
  (goto-char 0)
  (re-search-forward "fmt =" nil 'noerror)
  (return-on-line)
  (py:newline)
  (insert "def _getbinary(self, " args "):
        buf = _StringIO()
        return buf.getvalue()")
  )
* Tue 20 May 2014 03:31:35 AM JST
(progn 
  (goto-char 0)
  (replace-string "from abc import ABCMeta, abstractmethod
" "")
  (goto-char 0)
  (replace-string "    __metaclass__ = ABCMeta
" "")
  (goto-char 0)
  (replace-string "    @abstractmethod
" "")
  (goto-char 0)
  (re-search-forward "    def request" nil 'noerror)
  (beginning-of-line)
  (kill-line 2)
  (goto-char 0)
  
  (re-search-forward "self.request(" nil 'noerror)
  
  (let* ((start (point))
         (end (save-excursion (py:usable-next 10) (point)))
         (args (buffer-substring start end))
         )
    (insert "self._getbinary(")
    (py:usable-next 10)
    (insert ")")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (return-on-line)
    (py:newline)
    (insert "def _getbinary(self, " args "):
        buf = _StringIO()
        return buf.getvalue()")
    ))
* Tue 20 May 2014 03:31:39 AM JST
    def request(self, percent):
        raise NotImplementedError()

* Tue 20 May 2014 03:32:42 AM JST
(replace-string "buf.getvalue()" "binary")
* Tue 20 May 2014 03:57:28 AM JST
(re-search-forward "request(self, " nil 'noerror)
* Tue 20 May 2014 03:57:53 AM JST
(py:usable-next 10)
* Tue 20 May 2014 03:58:34 AM JST
(progn
  (goto-char 0)
  (replace-string "buf.getvalue()" "binary")
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point)))))
)
* Tue 20 May 2014 03:59:21 AM JST
(progn
  (goto-char 0)
  (replace-string "buf.getvalue()" "binary")
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
)
* Tue 20 May 2014 03:59:44 AM JST
(let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
* Tue 20 May 2014 03:59:48 AM JST
(progn
  (goto-char 0)
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  )
* Tue 20 May 2014 04:00:33 AM JST
(progn
  (goto-char 0)
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  )
* Tue 20 May 2014 04:00:39 AM JST
(re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
* Tue 20 May 2014 04:00:43 AM JST
(progn
  (goto-char 0)
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  )
* Tue 20 May 2014 04:01:32 AM JST
  (goto-char 0)
  (replace-string "buf.getvalue()" "binary")

* Tue 20 May 2014 04:01:49 AM JST
  (goto-char 0)
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")

* Tue 20 May 2014 04:01:56 AM JST
(progn 
  (goto-char 0)
  (replace-string "from abc import ABCMeta, abstractmethod
" "")
  (goto-char 0)
  (replace-string "    __metaclass__ = ABCMeta
" "")
  (goto-char 0)
  (replace-string "    @abstractmethod
" "")
  (goto-char 0)
  (re-search-forward "    def request" nil 'noerror)
  (beginning-of-line)
  (kill-line 2)
  (goto-char 0)
  
  (re-search-forward "self.request(" nil 'noerror)
  
  (let* ((start (point))
         (end (save-excursion (py:usable-next 10) (point)))
         (args (buffer-substring start end))
         )
    (insert "self._getbinary(")
    (py:usable-next 10)
    (insert ")")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (return-on-line)
    (py:newline)
    (insert "def _getbinary(self, " args "):
        buf = _StringIO()
        return buf.getvalue()")
    )
  (goto-char 0)
  (replace-string "buf.getvalue()" "binary")
  (goto-char 0)
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")

  )
* Tue 20 May 2014 04:02:01 AM JST
    def request(self, percent):
        raise NotImplementedError()

* Tue 20 May 2014 04:03:21 AM JST
(progn 
  (goto-char 0)
  (re-search-forward "Request(" nil 'noerror)
)
* Tue 20 May 2014 04:04:53 AM JST
(search-forward "Request(" nil 'noerr)
* Tue 20 May 2014 04:06:22 AM JST

* Tue 20 May 2014 04:06:22 AM JST

* Tue 20 May 2014 04:06:22 AM JST
  (search-forward "Request(" nil 'noerr)

* Tue 20 May 2014 04:06:24 AM JST
(re-search-forward "Request(binary" nil 'noerror)
* Tue 20 May 2014 04:07:18 AM JST
(py:usable-next 10)
* Tue 20 May 2014 04:07:28 AM JST
(py:usable-next 2)
* Tue 20 May 2014 04:07:43 AM JST
(py:usable-prev 1)
* Tue 20 May 2014 04:08:54 AM JST
(my-backward-delete-word ARG)
* Tue 20 May 2014 04:09:22 AM JST
(forward-word 1)
* Tue 20 May 2014 04:09:34 AM JST
(backward-word 1)
* Tue 20 May 2014 04:10:05 AM JST
(buffer-substring start end)
* Tue 20 May 2014 04:10:15 AM JST
(let* ((end (point))
         (start (backward-word 1) (point))
         (string (buffer-substring start end))
         ))
* Tue 20 May 2014 04:10:40 AM JST
(let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         ))
* Tue 20 May 2014 04:10:56 AM JST
(delete-region start end))
* Tue 20 May 2014 04:10:58 AM JST
(delete-region start end)
* Tue 20 May 2014 04:11:17 AM JST
(let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    )
* Tue 20 May 2014 04:11:52 AM JST
(let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    )
* Tue 20 May 2014 04:12:24 AM JST
(re-search-forward "fmt =" nil 'noerror)
* Tue 20 May 2014 04:12:52 AM JST
(next-line 1)
* Tue 20 May 2014 04:14:17 AM JST
  (goto-char 0)
  (re-search-forward "Request(binary" nil 'noerror)
  (py:usable-next 2)
  (py:usable-prev 1)
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    )
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (next-line 1)
    (insert "    code = " string)
    )
* Tue 20 May 2014 04:14:26 AM JST
(progn 
  (goto-char 0)
  (replace-string "from abc import ABCMeta, abstractmethod
" "")
  (goto-char 0)
  (replace-string "    __metaclass__ = ABCMeta
" "")
  (goto-char 0)
  (replace-string "    @abstractmethod
" "")
  (goto-char 0)
  (re-search-forward "    def request" nil 'noerror)
  (beginning-of-line)
  (kill-line 2)
  (goto-char 0)
  
  (re-search-forward "self.request(" nil 'noerror)
  
  (let* ((start (point))
         (end (save-excursion (py:usable-next 10) (point)))
         (args (buffer-substring start end))
         )
    (insert "self._getbinary(")
    (py:usable-next 10)
    (insert ")")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (return-on-line)
    (py:newline)
    (insert "def _getbinary(self, " args "):
        buf = _StringIO()
        return buf.getvalue()")
    )
  (goto-char 0)
  (replace-string "buf.getvalue()" "binary")
  (goto-char 0)
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  (goto-char 0)
  (re-search-forward "Request(binary" nil 'noerror)
  (py:usable-next 2)
  (py:usable-prev 1)
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    )
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (next-line 1)
    (insert "    code = " string)
    )
  )
* Tue 20 May 2014 04:14:29 AM JST
    def request(self, percent):
        raise NotImplementedError()

* Tue 20 May 2014 04:16:19 AM JST
(progn 
  (goto-char 0)
  (replace-string "from abc import ABCMeta, abstractmethod
" "")
  (goto-char 0)
  (replace-string "    __metaclass__ = ABCMeta
" "")
  (goto-char 0)
  (replace-string "    @abstractmethod
" "")
  (goto-char 0)
  (re-search-forward "    def request" nil 'noerror)
  (beginning-of-line)
  (kill-line 2)
  (goto-char 0)
  
  (re-search-forward "self.request(" nil 'noerror)
  
  (let* ((start (point))
         (end (save-excursion (py:usable-next 10) (point)))
         (args (buffer-substring start end))
         )
    (insert "self._getbinary(")
    (py:usable-next 10)
    (insert ")")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (return-on-line)
    (py:newline)
    (insert "def _getbinary(self, " args "):
        buf = _StringIO()
        return buf.getvalue()")
    )
  (goto-char 0)
  (replace-string "buf.getvalue()" "binary")
  (goto-char 0)
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  (goto-char 0)
  (re-search-forward "Request(binary" nil 'noerror)
  (py:usable-next 2)
  (py:usable-prev 1)
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    )
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (next-line 1)
    (insert "    code = " string "
")
    )
  )
* Tue 20 May 2014 04:16:21 AM JST
    def request(self, percent):
        raise NotImplementedError()

* Tue 20 May 2014 04:17:03 AM JST
  (goto-char 0)
  (replace-string "buf.getvalue()" "binary")


* Tue 20 May 2014 04:17:14 AM JST
(progn 
  (goto-char 0)
  (replace-string "from abc import ABCMeta, abstractmethod
" "")
  (goto-char 0)
  (replace-string "    __metaclass__ = ABCMeta
" "")
  (goto-char 0)
  (replace-string "    @abstractmethod
" "")
  (goto-char 0)
  (re-search-forward "    def request" nil 'noerror)
  (beginning-of-line)
  (kill-line 2)
  (goto-char 0)
  
  (re-search-forward "self.request(" nil 'noerror)
  
  (let* ((start (point))
         (end (save-excursion (py:usable-next 10) (point)))
         (args (buffer-substring start end))
         )
    (insert "self._getbinary(")
    (py:usable-next 10)
    (insert ")")
    (goto-char 0)
    (replace-string "buf.getvalue()" "binary")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (return-on-line)
    (py:newline)
    (insert "def _getbinary(self, " args "):
        buf = _StringIO()

        return buf.getvalue()")
    )
  (goto-char 0)
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  (goto-char 0)
  (re-search-forward "Request(binary" nil 'noerror)
  (py:usable-next 2)
  (py:usable-prev 1)
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    )
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (next-line 1)
    (insert "    code = " string "
")
    )
  )
* Tue 20 May 2014 04:17:17 AM JST
    def request(self, percent):
        raise NotImplementedError()

* Tue 20 May 2014 04:19:54 AM JST
(progn 
  (goto-char 0)
  (replace-string "from abc import ABCMeta, abstractmethod
" "")
  (goto-char 0)
  (replace-string "    __metaclass__ = ABCMeta
" "")
  (goto-char 0)
  (replace-string "    @abstractmethod
" "")
  (goto-char 0)
  (re-search-forward "    def request" nil 'noerror)
  (beginning-of-line)
  (kill-line 2)
  (goto-char 0)
  
  (re-search-forward "self.request(" nil 'noerror)
  
  (let* ((start (point))
         (end (save-excursion (py:usable-next 10) (point)))
         (args (buffer-substring start end))
         )
    (insert "self._getbinary(")
    (py:usable-next 10)
    (insert ")")
    (goto-char 0)
    (replace-string "buf.getvalue()" "binary")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (return-on-line)
    (py:newline)
    (insert "def _getbinary(self, " args "):
        buf = _StringIO()

        return buf.getvalue()")
    )
  (goto-char 0)
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  (goto-char 0)
  (re-search-forward "Request(binary" nil 'noerror)
  (py:usable-next 2)
  (py:usable-prev 1)
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    )
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (next-line 1)
    (insert "    code = " string "
")
    )
  )
* Tue 20 May 2014 04:19:55 AM JST
    def request(self, percent):
        raise NotImplementedError()

* Tue 20 May 2014 04:20:24 AM JST
  (re-search-forward "Request(binary" nil 'noerror)
  (py:usable-next 2)
  (py:usable-prev 1)

* Tue 20 May 2014 04:20:31 AM JST
(progn 
  (goto-char 0)
  (replace-string "from abc import ABCMeta, abstractmethod
" "")
  (goto-char 0)
  (replace-string "    __metaclass__ = ABCMeta
" "")
  (goto-char 0)
  (replace-string "    @abstractmethod
" "")
  (goto-char 0)
  (re-search-forward "    def request" nil 'noerror)
  (beginning-of-line)
  (kill-line 2)
  (goto-char 0)
  
  (re-search-forward "self.request(" nil 'noerror)
  
  (let* ((start (point))
         (end (save-excursion (py:usable-next 10) (point)))
         (args (buffer-substring start end))
         )
    (insert "self._getbinary(")
    (py:usable-next 10)
    (insert ")")
    (goto-char 0)
    (replace-string "buf.getvalue()" "binary")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (return-on-line)
    (py:newline)
    (insert "def _getbinary(self, " args "):
        buf = _StringIO()

        return buf.getvalue()")
    )
  (goto-char 0)
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  (re-search-forward "request(self, " nil 'noerror)
  (let ((start (point))
        (end (save-excursion (py:usable-next 10) (point))))
    (delete-region start end))
  (insert "binary")
  (goto-char 0)
  (re-search-forward "Request(binary" nil 'noerror)
  (py:usable-next 2)
  (py:usable-prev 1)
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    )
  (re-search-forward "Request(binary" nil 'noerror)
  (py:usable-next 2)
  (py:usable-prev 1)
  (let* ((end (point))
         (start (progn (backward-word 1) (point)))
         (string (buffer-substring start end))
         )
    (delete-region start end)
    (insert "self.code")
    (goto-char 0)
    (re-search-forward "fmt =" nil 'noerror)
    (next-line 1)
    (insert "    code = " string "
")
    )
  )
* Tue 20 May 2014 04:20:33 AM JST
    def request(self, percent):
        raise NotImplementedError()

* Tue 20 May 2014 04:21:05 AM JST

* Tue 20 May 2014 04:21:05 AM JST

* Tue 20 May 2014 04:21:05 AM JST
        buf = _StringIO()

* Tue 20 May 2014 04:21:41 AM JST

* Tue 20 May 2014 04:21:41 AM JST

* Tue 20 May 2014 04:21:41 AM JST
(progn 

* Tue 20 May 2014 04:21:58 AM JST
    def request(self, percent):
        raise NotImplementedError()

* Tue 20 May 2014 04:22:15 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, percent))

* Tue 20 May 2014 04:23:40 AM JST
    def request(self, cursor, time, event_mask):
        raise NotImplementedError()

* Tue 20 May 2014 04:23:46 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cursor, time, event_mask))

* Tue 20 May 2014 04:24:29 AM JST
    def request(self, gc, value_mask, value_list):
        raise NotImplementedError()

* Tue 20 May 2014 04:24:35 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, gc, value_mask))
        buf.write(str(buffer(_array('I', value_list))))

* Tue 20 May 2014 04:25:00 AM JST
    def request(self, mode, family, address_len, address):
        raise NotImplementedError()

* Tue 20 May 2014 04:25:07 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, mode, family, address_len))
        buf.write(str(buffer(_array('B', address))))

* Tue 20 May 2014 04:25:51 AM JST
(view-mode -1)
* Tue 20 May 2014 04:26:14 AM JST
    def request(self, value_mask, value_list):
        raise NotImplementedError()

* Tue 20 May 2014 04:26:19 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, value_mask))
        buf.write(str(buffer(_array('I', value_list))))

* Tue 20 May 2014 04:26:56 AM JST
    def request(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        raise NotImplementedError()

* Tue 20 May 2014 04:27:12 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, keycode_count, first_keycode,
                        keysyms_per_keycode, keysyms))

* Tue 20 May 2014 04:27:58 AM JST
    def request(self, acceleration_numerator, acceleration_denominator,
                threshold, do_acceleration, do_threshold):

* Tue 20 May 2014 04:28:06 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, acceleration_numerator,
                        acceleration_denominator, threshold,
                        do_acceleration, do_threshold))

* Tue 20 May 2014 04:30:33 AM JST
    def request(self, mode, window, property, type, format, data_len, data):
        raise NotImplementedError()

* Tue 20 May 2014 04:30:39 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, mode, window, property, type, format,
                        data_len, data))

* Tue 20 May 2014 04:31:04 AM JST
    def request(self, mode, window):
        raise NotImplementedError()

* Tue 20 May 2014 04:31:11 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, mode, window))

* Tue 20 May 2014 04:32:12 AM JST
    def request(self, window, value_mask, value_list):
        raise NotImplementedError()

* Tue 20 May 2014 04:32:17 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))

* Tue 20 May 2014 04:32:19 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))

* Tue 20 May 2014 04:32:43 AM JST
    def request(self, direction, window):
        raise NotImplementedError()

* Tue 20 May 2014 04:32:50 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, direction, window))

* Tue 20 May 2014 04:32:52 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, direction, window))

* Tue 20 May 2014 04:33:01 AM JST
    def request(self, exposures, window, x, y, width, height):
        raise NotImplementedError()

* Tue 20 May 2014 04:33:04 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, exposures, window, x, y, width, height))

* Tue 20 May 2014 04:33:18 AM JST
    def request(self, font):
        raise NotImplementedError()

* Tue 20 May 2014 04:33:23 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, font))

* Tue 20 May 2014 04:33:25 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, font))

* Tue 20 May 2014 04:33:36 AM JST
    def request(self, window, value_mask, value_list):
        raise NotImplementedError()

* Tue 20 May 2014 04:33:40 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))

* Tue 20 May 2014 04:33:43 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window, value_mask))
        buf.write(str(buffer(_array('I', value_list))))

* Tue 20 May 2014 04:33:54 AM JST
    def request(self, requestor, selection, target, property, time):
        raise NotImplementedError()

* Tue 20 May 2014 04:33:57 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, requestor, selection, target, property, time))

* Tue 20 May 2014 04:33:59 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, requestor, selection, target, property, time))

* Tue 20 May 2014 04:34:08 AM JST
    def request(self, src_drawable, dst_drawable, gc,
                src_x, src_y, dst_x, dst_y, width, height):

* Tue 20 May 2014 04:34:11 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, src_drawable, dst_drawable, gc,
                        src_x, src_y, dst_x, dst_y, width, height))

* Tue 20 May 2014 04:34:14 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, src_drawable, dst_drawable, gc,
                        src_x, src_y, dst_x, dst_y, width, height))

* Tue 20 May 2014 04:34:27 AM JST

* Tue 20 May 2014 04:34:27 AM JST

* Tue 20 May 2014 04:34:27 AM JST
        raise NotImplementedError()

* Tue 20 May 2014 04:35:00 AM JST
    def request(self, mid, src_cmap):
        raise NotImplementedError()

* Tue 20 May 2014 04:35:06 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, mid, src_cmap))

* Tue 20 May 2014 04:35:08 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, mid, src_cmap))

* Tue 20 May 2014 04:35:24 AM JST
    def request(self, src_gc, dst_gc, value_mask):
        raise NotImplementedError()

* Tue 20 May 2014 04:35:28 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, src_gc, dst_gc, value_mask))

* Tue 20 May 2014 04:35:31 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, src_gc, dst_gc, value_mask))

* Tue 20 May 2014 04:35:45 AM JST
    def request(self, src_drawable, dst_drawable, gc,
                src_x, src_y, dst_x, dst_y, width, height, bit_plane):

* Tue 20 May 2014 04:35:48 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, src_drawable, dst_drawable, gc,
                        src_x, src_y, dst_x, dst_y, width, height, bit_plane))

* Tue 20 May 2014 04:35:51 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, src_drawable, dst_drawable, gc,
                        src_x, src_y, dst_x, dst_y, width, height, bit_plane))

* Tue 20 May 2014 04:36:03 AM JST
    def request(self, alloc, mid, window, visual):
        raise NotImplementedError()

* Tue 20 May 2014 04:36:10 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, alloc, mid, window, visual))

* Tue 20 May 2014 04:36:24 AM JST
    def request(self, cid, source, mask, fore_red, fore_green, fore_blue,
                back_red, back_green, back_blue, x, y):

* Tue 20 May 2014 04:36:27 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cid, source, mask, fore_red, fore_green,
                        fore_blue, back_red, back_green, back_blue, x, y))

* Tue 20 May 2014 04:37:25 AM JST
            
* Tue 20 May 2014 04:37:33 AM JST

* Tue 20 May 2014 04:37:33 AM JST

* Tue 20 May 2014 04:37:33 AM JST
        raise NotImplementedError()

* Tue 20 May 2014 04:39:30 AM JST
    def request(self, cid, drawable, value_mask, value_list):
        raise NotImplementedError()

* Tue 20 May 2014 04:39:34 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cid, drawable, value_mask))
        buf.write(str(buffer(_array('I', value_list))))

* Tue 20 May 2014 04:39:55 AM JST
    def request(self, cid, source_font, mask_font, source_char, mask_char,
                fore_red, fore_green, fore_blue, back_red, back_green,

* Tue 20 May 2014 04:39:59 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cid, source_font, mask_font, source_char,
                        mask_char, fore_red, fore_green, fore_blue, back_red,
                        back_green, back_blue))

* Tue 20 May 2014 04:40:04 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cid, source_font, mask_font, source_char,
                        mask_char, fore_red, fore_green, fore_blue, back_red,
                        back_green, back_blue))

* Tue 20 May 2014 04:41:26 AM JST
    def request(self, depth, pid, drawable, width, height):
        raise NotImplementedError()

* Tue 20 May 2014 04:41:33 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, depth, pid, drawable, width, height))

* Tue 20 May 2014 04:41:36 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, depth, pid, drawable, width, height))

* Tue 20 May 2014 04:42:03 AM JST
    def request(self, depth, wid, parent, x, y, width, height, border_width,
                _class, visual, value_mask, value_list):

* Tue 20 May 2014 04:42:07 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, depth, wid, parent, x, y, width, height,
                        border_width, _class, visual, value_mask))
        buf.write(str(buffer(_array('I', value_list))))

* Tue 20 May 2014 04:42:13 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, depth, wid, parent, x, y, width, height,
                        border_width, _class, visual, value_mask))
        buf.write(str(buffer(_array('I', value_list))))

* Tue 20 May 2014 04:42:28 AM JST
            
* Tue 20 May 2014 04:42:33 AM JST
            
* Tue 20 May 2014 04:42:36 AM JST
                            
* Tue 20 May 2014 04:42:41 AM JST

* Tue 20 May 2014 04:42:41 AM JST

* Tue 20 May 2014 04:42:41 AM JST
        raise NotImplementedError()

* Tue 20 May 2014 04:43:25 AM JST
    def request(self, window, property):
        raise NotImplementedError()

* Tue 20 May 2014 04:43:30 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window, property))

* Tue 20 May 2014 04:43:32 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window, property))

* Tue 20 May 2014 04:43:48 AM JST
    def request(self, window):
        raise NotImplementedError()

* Tue 20 May 2014 04:43:52 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 04:43:54 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 04:44:06 AM JST
    def request(self, window):
        raise NotImplementedError()

* Tue 20 May 2014 04:44:11 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 04:44:13 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 04:44:24 AM JST
    def request(self, drawable, gc, shape, coordinate_mode, points_len, points):
        raise NotImplementedError()

* Tue 20 May 2014 04:44:27 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable, gc, shape, coordinate_mode,
                        points_len, points))

* Tue 20 May 2014 04:44:31 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable, gc, shape, coordinate_mode,
                        points_len, points))

* Tue 20 May 2014 04:45:07 AM JST
    def request(self, mode):
        raise NotImplementedError()

* Tue 20 May 2014 04:45:27 AM JST
    def request(self, mode):
        raise NotImplementedError()

* Tue 20 May 2014 04:45:33 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, mode))

* Tue 20 May 2014 04:45:35 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, mode))

* Tue 20 May 2014 04:45:46 AM JST
    def request(self, cmap):
        raise NotImplementedError()

* Tue 20 May 2014 04:45:51 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap))

* Tue 20 May 2014 04:45:54 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap))

* Tue 20 May 2014 04:46:13 AM JST
    def request(self, cmap, plane_mask, pixels_len, pixels):
        raise NotImplementedError()

* Tue 20 May 2014 04:46:16 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap, plane_mask, pixels_len))
        buf.write(str(buffer(_array('I', pixels))))

* Tue 20 May 2014 04:46:19 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap, plane_mask, pixels_len))
        buf.write(str(buffer(_array('I', pixels))))

* Tue 20 May 2014 04:46:31 AM JST
    def request(self, cursor):
        raise NotImplementedError()

* Tue 20 May 2014 04:46:35 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cursor))

* Tue 20 May 2014 04:46:38 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cursor))

* Tue 20 May 2014 04:46:56 AM JST
(py-kill-line ARG)
* Tue 20 May 2014 04:47:44 AM JST
    def request(self, gc):
        raise NotImplementedError()

* Tue 20 May 2014 04:47:50 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, gc))

* Tue 20 May 2014 04:47:53 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, gc))

* Tue 20 May 2014 04:48:02 AM JST
    def request(self, pixmap):
        raise NotImplementedError()

* Tue 20 May 2014 04:48:05 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, pixmap))

* Tue 20 May 2014 04:48:08 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, pixmap))

* Tue 20 May 2014 04:48:21 AM JST
    def request(self, atom):
        raise NotImplementedError()

* Tue 20 May 2014 04:48:24 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, atom))

* Tue 20 May 2014 04:48:26 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, atom))

* Tue 20 May 2014 04:48:55 AM JST
    def request(self, ):
        raise NotImplementedError()

* Tue 20 May 2014 04:49:03 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 04:49:05 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 04:49:22 AM JST
    def request(self, drawable):
        raise NotImplementedError()

* Tue 20 May 2014 04:49:25 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable))

* Tue 20 May 2014 04:49:27 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable))

* Tue 20 May 2014 04:49:35 AM JST
    def request(self, format, drawable, x, y, width, height, plane_mask):
        raise NotImplementedError()

* Tue 20 May 2014 04:49:38 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, format, drawable, x, y, width, height,
                        plane_mask))

* Tue 20 May 2014 04:49:41 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, format, drawable, x, y, width, height,
                        plane_mask))

* Tue 20 May 2014 04:50:03 AM JST
    def request(self, ):
        raise NotImplementedError()

* Tue 20 May 2014 04:50:07 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 04:50:09 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 04:50:35 AM JST
    def request(self, ):
        raise NotImplementedError()

* Tue 20 May 2014 04:50:40 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 04:50:42 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 04:50:53 AM JST
    def request(self, first_keycode, count):
        raise NotImplementedError()

* Tue 20 May 2014 04:50:56 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, first_keycode, count))

* Tue 20 May 2014 04:50:59 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, first_keycode, count))

* Tue 20 May 2014 04:51:11 AM JST
    def request(self, ):
        raise NotImplementedError()

* Tue 20 May 2014 04:51:14 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 04:51:16 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 04:51:23 AM JST
    def request(self, window, start, stop):
        raise NotImplementedError()

* Tue 20 May 2014 04:51:26 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window, start, stop))

* Tue 20 May 2014 04:51:28 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window, start, stop))

* Tue 20 May 2014 04:51:37 AM JST
    def request(self, ):
        raise NotImplementedError()

* Tue 20 May 2014 04:51:40 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 04:51:43 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 04:51:53 AM JST
    def request(self, ):
        raise NotImplementedError()

* Tue 20 May 2014 04:51:57 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 04:52:00 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 04:52:06 AM JST
    def request(self, binary):
        r"""SUMMARY

* Tue 20 May 2014 04:52:07 AM JST

* Tue 20 May 2014 04:52:07 AM JST

* Tue 20 May 2014 04:52:07 AM JST
    code = 20

* Tue 20 May 2014 04:52:10 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, delete, window, property, type,
                              long_offset, long_length))

* Tue 20 May 2014 04:53:05 AM JST
    def request(self, ):
        raise NotImplementedError()

* Tue 20 May 2014 04:53:11 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 04:55:26 AM JST
    def request(self, selection):
        raise NotImplementedError()

* Tue 20 May 2014 04:55:29 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, selection))

* Tue 20 May 2014 04:55:32 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, selection))

* Tue 20 May 2014 04:55:41 AM JST
    def request(self, window):
        raise NotImplementedError()

* Tue 20 May 2014 04:55:44 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 04:55:47 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 04:55:52 AM JST
    def request(self, owner_events, grab_window, event_mask, pointer_mode,
                keyboard_mode, confine_to, cursor, button, modifiers):

* Tue 20 May 2014 04:55:58 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, owner_events, grab_window, event_mask, pointer_mode,
                keyboard_mode, confine_to, cursor, button, modifiers))

* Tue 20 May 2014 04:56:02 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, owner_events, grab_window, event_mask, pointer_mode,
                keyboard_mode, confine_to, cursor, button, modifiers))

* Tue 20 May 2014 04:56:21 AM JST

* Tue 20 May 2014 04:56:21 AM JST

* Tue 20 May 2014 04:56:21 AM JST
        raise NotImplementedError()

* Tue 20 May 2014 04:56:35 AM JST
            
* Tue 20 May 2014 04:56:38 AM JST
            
* Tue 20 May 2014 04:56:48 AM JST
    def request(self, owner_events, grab_window, time, pointer_mode,
                keyboard_mode):

* Tue 20 May 2014 04:56:51 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, owner_events, grab_window, time, pointer_mode,
                keyboard_mode))

* Tue 20 May 2014 04:56:54 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, owner_events, grab_window, time, pointer_mode,
                keyboard_mode))

* Tue 20 May 2014 04:56:59 AM JST

* Tue 20 May 2014 04:56:59 AM JST

* Tue 20 May 2014 04:56:59 AM JST
        raise NotImplementedError()

* Tue 20 May 2014 04:57:10 AM JST
                
* Tue 20 May 2014 04:57:17 AM JST
    def request(self, owner_events, grab_window, modifiers, key,
                pointer_mode, keyboard_mode):

* Tue 20 May 2014 04:57:23 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, owner_events, grab_window, modifiers, key,
                pointer_mode, keyboard_mode))

* Tue 20 May 2014 04:57:26 AM JST

* Tue 20 May 2014 04:57:26 AM JST

* Tue 20 May 2014 04:57:26 AM JST
        raise NotImplementedError()

* Tue 20 May 2014 04:57:35 AM JST
                
* Tue 20 May 2014 04:57:49 AM JST
            
* Tue 20 May 2014 04:57:56 AM JST
    def request(self, owner_events, grab_window, event_mask, pointer_mode,
                keyboard_mode, confine_to, cursor, time):

* Tue 20 May 2014 04:57:59 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, owner_events, grab_window, event_mask,
                        pointer_mode, keyboard_mode, confine_to, cursor, time))

* Tue 20 May 2014 04:58:02 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, owner_events, grab_window, event_mask,
                        pointer_mode, keyboard_mode, confine_to, cursor, time))

* Tue 20 May 2014 04:58:06 AM JST

* Tue 20 May 2014 04:58:06 AM JST

* Tue 20 May 2014 04:58:06 AM JST
        raise NotImplementedError()

* Tue 20 May 2014 04:58:24 AM JST
    def request(self, ):
        raise NotImplementedError()

* Tue 20 May 2014 04:58:32 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 04:58:41 AM JST
    def request(self, string_len, drawable, gc, x, y, string):
        raise NotImplementedError()

* Tue 20 May 2014 04:58:47 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, string_len, drawable, gc, x, y, string))
        for elt in Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))

* Tue 20 May 2014 04:58:51 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, string_len, drawable, gc, x, y, string))
        for elt in Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))

* Tue 20 May 2014 04:59:20 AM JST
    def request(self, string_len, drawable, gc, x, y, string):
        raise NotImplementedError()

* Tue 20 May 2014 04:59:25 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, string_len, drawable, gc, x, y))
        buf.write(str(buffer(_array('b', string))))

* Tue 20 May 2014 04:59:28 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, string_len, drawable, gc, x, y))
        buf.write(str(buffer(_array('b', string))))

* Tue 20 May 2014 04:59:43 AM JST

* Tue 20 May 2014 05:00:03 AM JST
    def request(self, cmap):
        raise NotImplementedError()

* Tue 20 May 2014 05:00:06 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap))

* Tue 20 May 2014 05:00:09 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap))

* Tue 20 May 2014 05:00:20 AM JST
    def request(self, only_if_exists, name_len, name):
        raise NotImplementedError()

* Tue 20 May 2014 05:00:23 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))

* Tue 20 May 2014 05:00:26 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))

* Tue 20 May 2014 05:00:52 AM JST
    def _getbinary(self, only_if_exists, name_len, name):
        return buf.getvalue()

* Tue 20 May 2014 05:01:02 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, only_if_exists, name_len))
        buf.write(str(buffer(_array('b', name))))

* Tue 20 May 2014 05:01:18 AM JST

* Tue 20 May 2014 05:01:18 AM JST

* Tue 20 May 2014 05:01:18 AM JST
    code = 16

* Tue 20 May 2014 05:01:57 AM JST
    def request(self, resource):
        raise NotImplementedError()

* Tue 20 May 2014 05:02:00 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, resource))

* Tue 20 May 2014 05:02:04 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, resource))

* Tue 20 May 2014 05:02:12 AM JST
    def request(self, ):
        raise NotImplementedError()

* Tue 20 May 2014 05:02:16 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 05:02:18 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 05:02:27 AM JST
    def request(self, max_names, pattern_len, pattern):
        raise NotImplementedError()

* Tue 20 May 2014 05:02:33 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))

* Tue 20 May 2014 05:02:37 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))

* Tue 20 May 2014 05:02:49 AM JST
    
* Tue 20 May 2014 05:03:09 AM JST
    def request(self, max_names, pattern_len, pattern):
        raise NotImplementedError()

* Tue 20 May 2014 05:03:13 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, max_names, pattern_len))
        buf.write(str(buffer(_array('b', pattern))))

* Tue 20 May 2014 05:03:15 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, max_names, pattern_len, pattern))
        buf.write(str(buffer(_array('b', pattern))))

* Tue 20 May 2014 05:03:30 AM JST
    def request(self, ):
        raise NotImplementedError()

* Tue 20 May 2014 05:03:38 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 05:03:44 AM JST
    def request(self, window):
        raise NotImplementedError()

* Tue 20 May 2014 05:03:47 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 05:03:50 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 05:03:57 AM JST
    def request(self, window):
        raise NotImplementedError()

* Tue 20 May 2014 05:04:00 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 05:04:02 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 05:04:10 AM JST
    def request(self, cmap, name_len, name):
        raise NotImplementedError()

* Tue 20 May 2014 05:04:13 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap, name_len, name))

* Tue 20 May 2014 05:04:18 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap, name_len, name))

* Tue 20 May 2014 05:04:26 AM JST
    def request(self, window):
        raise NotImplementedError()

* Tue 20 May 2014 05:04:29 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 05:04:32 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 05:04:39 AM JST
    def request(self, window):
        raise NotImplementedError()

* Tue 20 May 2014 05:04:41 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 05:04:44 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 05:04:52 AM JST
    def request(self, ):
        raise NotImplementedError()

* Tue 20 May 2014 05:04:54 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 05:04:58 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 05:05:03 AM JST
    def request(self, fid, name_len, name):
        raise NotImplementedError()

* Tue 20 May 2014 05:05:05 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, fid, name_len))

* Tue 20 May 2014 05:05:08 AM JST

* Tue 20 May 2014 05:05:08 AM JST

* Tue 20 May 2014 05:05:08 AM JST
        buf.write(str(buffer(_array('b', name))))

* Tue 20 May 2014 05:05:10 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, fid, name_len))
        buf.write(str(buffer(_array('b', name))))

* Tue 20 May 2014 05:05:18 AM JST
    def request(self, drawable, gc, arcs_len, arcs):
        raise NotImplementedError()

* Tue 20 May 2014 05:05:26 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable, gc))
        for elt in Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))

* Tue 20 May 2014 05:05:41 AM JST
    def request(self, drawable, gc, arcs_len, arcs):
        raise NotImplementedError()

* Tue 20 May 2014 05:05:45 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable, gc))
        for elt in Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))

* Tue 20 May 2014 05:05:48 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable, gc))
        for elt in Iterator(arcs, 6, 'arcs', True):
            buf.write(_pack('=hhHHhh', *elt))

* Tue 20 May 2014 05:05:57 AM JST
    def request(self, drawable, gc, rectangles_len, rectangles):
        raise NotImplementedError()

* Tue 20 May 2014 05:06:00 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable, gc))
        for elt in Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))

* Tue 20 May 2014 05:06:03 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable, gc))
        for elt in Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))

* Tue 20 May 2014 05:06:15 AM JST
    def request(self, coordinate_mode, drawable, gc, points_len, points):
        raise NotImplementedError()

* Tue 20 May 2014 05:06:22 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, coordinate_mode, drawable, gc,
                        points_len, points))

* Tue 20 May 2014 05:06:40 AM JST
    def request(self, coordinate_mode, drawable, gc, points_len, points):
        raise NotImplementedError()

* Tue 20 May 2014 05:06:47 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, coordinate_mode, drawable, gc,
                        points_len, points))

* Tue 20 May 2014 05:06:50 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, coordinate_mode, drawable, gc,
                        points_len, points))

* Tue 20 May 2014 05:07:00 AM JST
            
* Tue 20 May 2014 05:07:06 AM JST
    def request(self, drawable, gc, rectangles_len, rectangles):
        raise NotImplementedError()

* Tue 20 May 2014 05:07:12 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable, gc))
        for elt in Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))

* Tue 20 May 2014 05:07:14 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable, gc))
        for elt in Iterator(rectangles, 4, 'rectangles', True):
            buf.write(_pack('=hhHH', *elt))

* Tue 20 May 2014 05:07:26 AM JST
    def request(self, drawable, gc, segments_len, segments):
        raise NotImplementedError()

* Tue 20 May 2014 05:07:29 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable, gc))
        for elt in Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))

* Tue 20 May 2014 05:07:32 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable, gc))
        for elt in Iterator(segments, 4, 'segments', True):
            buf.write(_pack('=hhhh', *elt))

* Tue 20 May 2014 05:07:45 AM JST
    def request(self, drawable, gc, x, y, items_len, items):
        raise NotImplementedError()

* Tue 20 May 2014 05:07:48 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable, gc, x, y, items_len))
        buf.write(str(buffer(_array('B', items))))

* Tue 20 May 2014 05:07:51 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable, gc, x, y, items_len))
        buf.write(str(buffer(_array('B', items))))

* Tue 20 May 2014 05:07:59 AM JST
    def request(self, drawable, gc, x, y, items_len, items):
        raise NotImplementedError()

* Tue 20 May 2014 05:08:02 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable, gc, x, y, items_len))
        buf.write(str(buffer(_array('B', items))))

* Tue 20 May 2014 05:08:05 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, drawable, gc, x, y, items_len))
        buf.write(str(buffer(_array('B', items))))

* Tue 20 May 2014 05:08:10 AM JST
    def request(self, format, drawable, gc, width, height,
                dst_x, dst_y, left_pad, depth, data_len, data):

* Tue 20 May 2014 05:08:13 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, format, drawable, gc, width, height,
                dst_x, dst_y, left_pad, depth, data_len))
        buf.write(str(buffer(_array('B', data))))

* Tue 20 May 2014 05:08:16 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, format, drawable, gc, width, height,
                dst_x, dst_y, left_pad, depth, data_len))
        buf.write(str(buffer(_array('B', data))))

* Tue 20 May 2014 05:08:21 AM JST

* Tue 20 May 2014 05:08:21 AM JST

* Tue 20 May 2014 05:08:21 AM JST
        raise NotImplementedError()

* Tue 20 May 2014 05:08:29 AM JST
    def request(self, _class, drawable, width, height):
        raise NotImplementedError()

* Tue 20 May 2014 05:08:33 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, _class, drawable, width, height))

* Tue 20 May 2014 05:08:36 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, _class, drawable, width, height))

* Tue 20 May 2014 05:08:43 AM JST
    def request(self, cmap, pixels_len, pixels):
        raise NotImplementedError()

* Tue 20 May 2014 05:08:47 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap))
        buf.write(str(buffer(_array('I', pixels))))

* Tue 20 May 2014 05:08:50 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap))
        buf.write(str(buffer(_array('I', pixels))))

* Tue 20 May 2014 05:09:00 AM JST
    def request(self, name_len, name):
        raise NotImplementedError()

* Tue 20 May 2014 05:09:04 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, name_len))
        buf.write(str(buffer(_array('b', name))))

* Tue 20 May 2014 05:09:07 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, name_len))
        buf.write(str(buffer(_array('b', name))))

* Tue 20 May 2014 05:09:13 AM JST
    def request(self, font):
        raise NotImplementedError()

* Tue 20 May 2014 05:09:16 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, font))

* Tue 20 May 2014 05:09:19 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, font))

* Tue 20 May 2014 05:09:25 AM JST
    def request(self, ):
        raise NotImplementedError()

* Tue 20 May 2014 05:09:28 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 05:09:31 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 05:09:37 AM JST
    def request(self, window):
        raise NotImplementedError()

* Tue 20 May 2014 05:09:46 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 05:09:48 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 05:09:54 AM JST
    def request(self, font, string_len, string):
        raise NotImplementedError()

* Tue 20 May 2014 05:10:04 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))

* Tue 20 May 2014 05:10:10 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))
        buf.write(_pack('=B', (string_len & 1)))
        buf.write(_pack('=2xI', font))
        for elt in Iterator(string, 2, 'string', True):
            buf.write(_pack('=BB', *elt))

* Tue 20 May 2014 05:10:21 AM JST
    def request(self, window):
        raise NotImplementedError()

* Tue 20 May 2014 05:10:25 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 05:10:28 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 05:10:35 AM JST
    def request(self, cursor, fore_red, fore_green, fore_blue, back_red,
                back_green, back_blue):

* Tue 20 May 2014 05:10:38 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cursor, fore_red, fore_green, fore_blue,
                        back_red, back_green, back_blue))

* Tue 20 May 2014 05:10:42 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cursor, fore_red, fore_green, fore_blue,
                        back_red, back_green, back_blue))

* Tue 20 May 2014 05:10:48 AM JST

* Tue 20 May 2014 05:10:48 AM JST

* Tue 20 May 2014 05:10:48 AM JST
        raise NotImplementedError()

* Tue 20 May 2014 05:11:02 AM JST
    def request(self, window, parent, x, y):
        raise NotImplementedError()

* Tue 20 May 2014 05:11:05 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window, parent, x, y))

* Tue 20 May 2014 05:11:08 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window, parent, x, y))

* Tue 20 May 2014 05:11:14 AM JST
    def request(self, window, atoms_len, delta, atoms):
        raise NotImplementedError()

* Tue 20 May 2014 05:11:16 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window, atoms_len, delta, atoms))

* Tue 20 May 2014 05:11:19 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window, atoms_len, delta, atoms))

* Tue 20 May 2014 05:11:25 AM JST
    def request(self, propagate, destination, event_mask, event):
        raise NotImplementedError()

* Tue 20 May 2014 05:11:28 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, propagate, destination, event_mask))
        buf.write(str(buffer(_array('b', event))))

* Tue 20 May 2014 05:11:33 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, propagate, destination, event_mask))
        buf.write(str(buffer(_array('b', event))))

* Tue 20 May 2014 05:11:49 AM JST
    def request(self, mode):
        raise NotImplementedError()

* Tue 20 May 2014 05:11:52 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, mode))

* Tue 20 May 2014 05:11:55 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, mode))

* Tue 20 May 2014 05:12:02 AM JST
    def request(self, ordering, gc, clip_x_origin, clip_y_origin,
                rectangles_len, rectangles):

* Tue 20 May 2014 05:12:05 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ordering, gc, clip_x_origin, clip_y_origin,
                rectangles_len, rectangles))

* Tue 20 May 2014 05:12:10 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ordering, gc, clip_x_origin, clip_y_origin,
                rectangles_len, rectangles))

* Tue 20 May 2014 05:12:15 AM JST

* Tue 20 May 2014 05:12:15 AM JST

* Tue 20 May 2014 05:12:15 AM JST
        raise NotImplementedError()

* Tue 20 May 2014 05:12:32 AM JST
    def request(self, mode):
        raise NotImplementedError()

* Tue 20 May 2014 05:12:35 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, mode))

* Tue 20 May 2014 05:12:38 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, mode))

* Tue 20 May 2014 05:12:44 AM JST
    def request(self, gc, dash_offset, dashes_len, dashes):
        raise NotImplementedError()

* Tue 20 May 2014 05:12:47 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, gc, dash_offset, dashes_len))
        buf.write(str(buffer(_array('B', dashes))))

* Tue 20 May 2014 05:12:50 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, gc, dash_offset, dashes_len))
        buf.write(str(buffer(_array('B', dashes))))

* Tue 20 May 2014 05:12:55 AM JST
    def request(self, font_qty, font):
        raise NotImplementedError()

* Tue 20 May 2014 05:13:00 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, font_qty))
        for elt in Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))

* Tue 20 May 2014 05:13:03 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, font_qty))
        for elt in Iterator(font, -1, 'font', True):
            buf.write(_pack('=None', *elt))

* Tue 20 May 2014 05:13:10 AM JST
    def request(self, revert_to, focus, time):
        raise NotImplementedError()

* Tue 20 May 2014 05:13:13 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, revert_to, focus, time))

* Tue 20 May 2014 05:13:16 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, revert_to, focus, time))

* Tue 20 May 2014 05:13:22 AM JST
    def request(self, keycodes_per_modifier, keycodes):
        raise NotImplementedError()

* Tue 20 May 2014 05:13:25 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, keycodes_per_modifier))
        buf.write(str(buffer(_array('B', keycodes))))

* Tue 20 May 2014 05:13:30 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, keycodes_per_modifier))
        buf.write(str(buffer(_array('B', keycodes))))

* Tue 20 May 2014 05:13:35 AM JST
    def request(self, map_len, map):
        raise NotImplementedError()

* Tue 20 May 2014 05:13:39 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, map_len))
        buf.write(str(buffer(_array('B', map))))

* Tue 20 May 2014 05:13:42 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, map_len))
        buf.write(str(buffer(_array('B', map))))

* Tue 20 May 2014 05:13:48 AM JST
    def request(self, timeout, interval, prefer_blanking, allow_exposures):
        raise NotImplementedError()

* Tue 20 May 2014 05:13:53 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, timeout, interval, prefer_blanking,
                        allow_exposures))

* Tue 20 May 2014 05:13:55 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, timeout, interval, prefer_blanking,
                        allow_exposures))

* Tue 20 May 2014 05:14:08 AM JST
    def request(self, owner, selection, time):
        raise NotImplementedError()

* Tue 20 May 2014 05:14:10 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, owner, selection, time))

* Tue 20 May 2014 05:14:14 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, owner, selection, time))

* Tue 20 May 2014 05:14:22 AM JST
    def request(self, cmap, items_len, items):
        raise NotImplementedError()

* Tue 20 May 2014 05:14:26 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap))
        for elt in Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))

* Tue 20 May 2014 05:14:30 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap))
        for elt in Iterator(items, 5, 'items', True):
            buf.write(_pack('=IHHHBx', *elt))

* Tue 20 May 2014 05:14:36 AM JST
    def request(self, flags, cmap, pixel, name_len, name):
        raise NotImplementedError()

* Tue 20 May 2014 05:14:38 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, flags, cmap, pixel, name_len))
        buf.write(str(buffer(_array('b', name))))

* Tue 20 May 2014 05:14:42 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, flags, cmap, pixel, name_len))
        buf.write(str(buffer(_array('b', name))))

* Tue 20 May 2014 05:14:48 AM JST
    def request(self, src_window, dst_window, src_x, src_y):
        raise NotImplementedError()

* Tue 20 May 2014 05:14:52 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, src_window, dst_window, src_x, src_y))

* Tue 20 May 2014 05:14:54 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, src_window, dst_window, src_x, src_y))

* Tue 20 May 2014 05:15:02 AM JST
    def request(self, button, grab_window, modifiers):
        raise NotImplementedError()

* Tue 20 May 2014 05:15:04 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, button, grab_window, modifiers))

* Tue 20 May 2014 05:15:07 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, button, grab_window, modifiers))

* Tue 20 May 2014 05:15:13 AM JST
    def request(self, time):
        raise NotImplementedError()

* Tue 20 May 2014 05:15:15 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, time))

* Tue 20 May 2014 05:15:20 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, time))

* Tue 20 May 2014 05:15:28 AM JST
    def request(self, key, grab_window, modifiers):
        raise NotImplementedError()

* Tue 20 May 2014 05:15:31 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, key, grab_window, modifiers))

* Tue 20 May 2014 05:15:34 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, key, grab_window, modifiers))

* Tue 20 May 2014 05:15:40 AM JST
    def request(self, time):
        raise NotImplementedError()

* Tue 20 May 2014 05:15:43 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, time))

* Tue 20 May 2014 05:15:46 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, time))

* Tue 20 May 2014 05:15:52 AM JST
    def request(self, ):
        raise NotImplementedError()

* Tue 20 May 2014 05:15:54 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 05:15:57 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, ))

* Tue 20 May 2014 05:16:08 AM JST
    def request(self, cmap):
        raise NotImplementedError()

* Tue 20 May 2014 05:16:10 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap))

* Tue 20 May 2014 05:16:13 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, cmap))

* Tue 20 May 2014 05:16:19 AM JST
    def request(self, window):
        raise NotImplementedError()

* Tue 20 May 2014 05:16:20 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 05:16:23 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 05:16:29 AM JST
    def request(self, window):
        raise NotImplementedError()

* Tue 20 May 2014 05:16:36 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, window))

* Tue 20 May 2014 05:16:41 AM JST
    def request(self, src_window, dst_window, src_x, src_y,
                src_width, src_height, dst_x, dst_y):

* Tue 20 May 2014 05:16:44 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, src_window, dst_window, src_x, src_y,
                src_width, src_height, dst_x, dst_y))

* Tue 20 May 2014 05:16:47 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, src_window, dst_window, src_x, src_y,
                src_width, src_height, dst_x, dst_y))

* Tue 20 May 2014 05:16:51 AM JST

* Tue 20 May 2014 05:16:51 AM JST

* Tue 20 May 2014 05:16:52 AM JST
        raise NotImplementedError()

* Wed 21 May 2014 02:14:22 AM JST
from collections import OrderedDict
* Wed 21 May 2014 05:50:43 PM JST
class MaskValuesAbstract(object):
    r"""SUMMARY
    """
    static_keys = ()

    
    def __init__(self, ):
        r"""
        """
        self.data = dict()

    def __setitem__(self, key, item):
        if not key in self.static_keys:
            # TODO: (Atami) [2014/05/21]
            raise StandardError()
        self.data.__setitem__(key, item)

* Wed 21 May 2014 05:50:51 PM JST
object
* Wed 21 May 2014 05:51:05 PM JST

* Wed 21 May 2014 05:51:05 PM JST

* Wed 21 May 2014 05:51:05 PM JST
        self.data.__setitem__(key, item)

* Wed 21 May 2014 05:55:57 PM JST
val
* Wed 21 May 2014 05:55:57 PM JST
msk, val
* Wed 21 May 2014 05:56:13 PM JST
MaskValues
* Wed 21 May 2014 05:57:36 PM JST
ConfigWindow
* Wed 21 May 2014 05:57:51 PM JST
ConfigWindow
* Wed 21 May 2014 05:57:56 PM JST
from xcb2.xproto.define import ConfigWindow
* Wed 21 May 2014 05:58:03 PM JST
tuple(ConfigWindow)
* Wed 21 May 2014 05:58:57 PM JST
ConfigWindowMaskValues
* Wed 21 May 2014 06:02:51 PM JST
extend
* Wed 21 May 2014 06:05:01 PM JST
33554436
* Wed 21 May 2014 06:05:45 PM JST
StackMode
* Wed 21 May 2014 06:05:50 PM JST
0
* Wed 21 May 2014 06:06:24 PM JST
check()
* Wed 21 May 2014 06:06:49 PM JST
reply()
* Wed 21 May 2014 06:07:51 PM JST
c.core.ConfigureWindow
* Wed 21 May 2014 06:08:01 PM JST
(33554436, ConfigWindow.StackMode, [0, 1])
* Wed 21 May 2014 06:08:57 PM JST
item
* Wed 21 May 2014 06:12:16 PM JST
from ref import recipe
* Wed 21 May 2014 06:12:28 PM JST
recipe.Recipe()
* Wed 21 May 2014 06:25:35 PM JST

* Wed 21 May 2014 06:25:35 PM JST

* Wed 21 May 2014 06:25:35 PM JST
        self._dic = dic

* Wed 21 May 2014 06:25:44 PM JST

* Wed 21 May 2014 06:25:45 PM JST

* Wed 21 May 2014 06:25:45 PM JST
        self._kwargs = kwargs

* Wed 21 May 2014 06:27:31 PM JST
[ConfigWindow.X]
* Wed 21 May 2014 06:28:12 PM JST
_
* Wed 21 May 2014 06:28:12 PM JST
self._
* Wed 21 May 2014 06:28:13 PM JST
return self._
* Wed 21 May 2014 06:28:48 PM JST
ConfigWindow.X
* Wed 21 May 2014 06:31:03 PM JST
    def get_x(self, ):
        r"""SUMMARY
        
        get_x()
        
        @Return:
        """
        if not ConfigWindow.X in self._data:
            return None
        return self._data[ConfigWindow.X]

    def set_x(self, value):
        r"""SUMMARY
        
        set_x(value)
        
        @Arguments:
        - `value`:
        
        @Return:
        """
        self._data[ConfigWindow.X] = value

    def reset_x(self, ):
        r"""SUMMARY
        
        reset_x()
        
        @Return:
        """
        del self._data[ConfigWindow.X]

* Wed 21 May 2014 06:31:15 PM JST
$1
* Wed 21 May 2014 06:32:08 PM JST
$2
* Wed 21 May 2014 06:36:37 PM JST
ConfigWindowMaskValues
* Wed 21 May 2014 06:37:18 PM JST
ConfigWindowMaskValues
* Wed 21 May 2014 06:37:43 PM JST
_data
* Wed 21 May 2014 06:50:33 PM JST
iter
* Wed 21 May 2014 06:59:52 PM JST

* Wed 21 May 2014 06:59:52 PM JST
ConfigWindow
* Wed 21 May 2014 07:00:02 PM JST
StackMode
* Wed 21 May 2014 10:55:22 PM JST
send_request
* Wed 21 May 2014 10:56:58 PM JST
rawconnection
* Wed 21 May 2014 10:57:13 PM JST
*args, **kwargs
* Wed 21 May 2014 10:57:51 PM JST
        self.InternAtom                      = lambda *args, **kwargs: None
        self.InternAtomUnchecked             = lambda *args, **kwargs: None
        self.GetAtomName                     = lambda *args, **kwargs: None
        self.GetAtomNameUnchecked            = lambda *args, **kwargs: None
        self.AllocColor                      = lambda *args, **kwargs: None
        self.AllocColorUnchecked             = lambda *args, **kwargs: None
        self.AllocColorCells                 = lambda *args, **kwargs: None
        self.AllocColorCellsUnchecked        = lambda *args, **kwargs: None
        self.AllocColorPlanes                = lambda *args, **kwargs: None
        self.AllocColorPlanesUnchecked       = lambda *args, **kwargs: None
        self.AllocNamedColor                 = lambda *args, **kwargs: None
        self.AllocNamedColorUnchecked        = lambda *args, **kwargs: None
        self.AllowEvents                     = lambda *args, **kwargs: None
        self.AllowEventsChecked              = lambda *args, **kwargs: None
        self.Bell                            = lambda *args, **kwargs: None
        self.BellChecked                     = lambda *args, **kwargs: None
        self.ChangeActivePointerGrab         = lambda *args, **kwargs: None
        self.ChangeActivePointerGrabChecked  = lambda *args, **kwargs: None
        self.ChangeGC                        = lambda *args, **kwargs: None
        self.ChangeGCChecked                 = lambda *args, **kwargs: None
        self.ChageHosts                      = lambda *args, **kwargs: None
        self.ChageHostsChecked               = lambda *args, **kwargs: None
        self.ChangeKeyboardControl           = lambda *args, **kwargs: None
        self.ChangeKeyboardControlChecked    = lambda *args, **kwargs: None
        self.ChangeKeyboardMapping           = lambda *args, **kwargs: None
        self.ChangeKeyboardMappingChecked    = lambda *args, **kwargs: None
        self.ChangePointerControl            = lambda *args, **kwargs: None
        self.ChangePointerControlChecked     = lambda *args, **kwargs: None
        self.ChangeProperty                  = lambda *args, **kwargs: None
        self.ChangePropertyChecked           = lambda *args, **kwargs: None
        self.ChangeSaveSet                   = lambda *args, **kwargs: None
        self.ChangeSaveSetChecked            = lambda *args, **kwargs: None
        self.ChangeWindowAttributes          = lambda *args, **kwargs: None
        self.ChangeWindowAttributesChecked   = lambda *args, **kwargs: None
        self.CirculateWindow                 = lambda *args, **kwargs: None
        self.CirculateWindowChecked          = lambda *args, **kwargs: None
        self.ClearArea                       = lambda *args, **kwargs: None
        self.ClearAreaChecked                = lambda *args, **kwargs: None
        self.CloseFont                       = lambda *args, **kwargs: None
        self.CloseFontChecked                = lambda *args, **kwargs: None
        self.ConfigureWindow                 = lambda *args, **kwargs: None
        self.ConfigureWindowChecked          = lambda *args, **kwargs: None
        self.ConvertSelection                = lambda *args, **kwargs: None
        self.ConvertSelectionChecked         = lambda *args, **kwargs: None
        self.CopyArea                        = lambda *args, **kwargs: None
        self.CopyAreaChecked                 = lambda *args, **kwargs: None
        self.CopyColormapAndFree             = lambda *args, **kwargs: None
        self.CopyColormapAndFreeChecked      = lambda *args, **kwargs: None
        self.CopyGC                          = lambda *args, **kwargs: None
        self.CopyGCChecked                   = lambda *args, **kwargs: None
        self.CopyPlane                       = lambda *args, **kwargs: None
        self.CopyPlaneChecked                = lambda *args, **kwargs: None
        self.CreateColormap                  = lambda *args, **kwargs: None
        self.CreateColormapChecked           = lambda *args, **kwargs: None
        self.CreateCursor                    = lambda *args, **kwargs: None
        self.CreateCursorChecked             = lambda *args, **kwargs: None
        self.CreateGC                        = lambda *args, **kwargs: None
        self.CreateGCChecked                 = lambda *args, **kwargs: None
        self.CreateGlyphCursor               = lambda *args, **kwargs: None
        self.CreateGlyphCursorChecked        = lambda *args, **kwargs: None
        self.CreatePixmap                    = lambda *args, **kwargs: None
        self.CreatePixmapChecked             = lambda *args, **kwargs: None
        self.CreateWindow                    = lambda *args, **kwargs: None
        self.CreateWindowChecked             = lambda *args, **kwargs: None
        self.DeleteProperty                  = lambda *args, **kwargs: None
        self.DeletePropertyChecked           = lambda *args, **kwargs: None
        self.DestroySubwindows               = lambda *args, **kwargs: None
        self.DestroySubwindowsChecked        = lambda *args, **kwargs: None
        self.DestroyWindow                   = lambda *args, **kwargs: None
        self.DestroyWindowChecked            = lambda *args, **kwargs: None
        self.FillPoly                        = lambda *args, **kwargs: None
        self.FillPolyChecked                 = lambda *args, **kwargs: None
        self.ForceScreenSaver                = lambda *args, **kwargs: None
        self.ForceScreenSaverChecked         = lambda *args, **kwargs: None
        self.FreeColormap                    = lambda *args, **kwargs: None
        self.FreeColormapChecked             = lambda *args, **kwargs: None
        self.FreeColors                      = lambda *args, **kwargs: None
        self.FreeColorsChecked               = lambda *args, **kwargs: None
        self.FreeCursor                      = lambda *args, **kwargs: None
        self.FreeCursorChecked               = lambda *args, **kwargs: None
        self.FreeGC                          = lambda *args, **kwargs: None
        self.FreeGCChecked                   = lambda *args, **kwargs: None
        self.FreePixmap                      = lambda *args, **kwargs: None
        self.FreePixmapChecked               = lambda *args, **kwargs: None
        self.GetFontPath                     = lambda *args, **kwargs: None
        self.GetFontPathUnchecked            = lambda *args, **kwargs: None
        self.GetGeometry                     = lambda *args, **kwargs: None
        self.GetGeometryUnchecked            = lambda *args, **kwargs: None
        self.GetImage                        = lambda *args, **kwargs: None
        self.GetImageUnchecked               = lambda *args, **kwargs: None
        self.GetInputFocus                   = lambda *args, **kwargs: None
        self.GetInputFocusUnchecked          = lambda *args, **kwargs: None
        self.GetKeyboardControl              = lambda *args, **kwargs: None
        self.GetKeyboardControlUnchecked     = lambda *args, **kwargs: None
        self.GetKeyboardMapping              = lambda *args, **kwargs: None
        self.GetKeyboardMappingUnchecked     = lambda *args, **kwargs: None
        self.GetModifierMapping              = lambda *args, **kwargs: None
        self.GetModifierMappingUnchecked     = lambda *args, **kwargs: None
        self.GetMotionEvents                 = lambda *args, **kwargs: None
        self.GetMotionEventsUnchecked        = lambda *args, **kwargs: None
        self.GetPointerControl               = lambda *args, **kwargs: None
        self.GetPointerControlUnchecked      = lambda *args, **kwargs: None
        self.GetPointerMapping               = lambda *args, **kwargs: None
        self.GetPointerMappingUnchecked      = lambda *args, **kwargs: None
        self.GetProperty                     = lambda *args, **kwargs: None
        self.GetPropertyUnchecked            = lambda *args, **kwargs: None
        self.GetScreenSaver                  = lambda *args, **kwargs: None
        self.GetScreenSaverUnchecked         = lambda *args, **kwargs: None
        self.GetSelectionOwner               = lambda *args, **kwargs: None
        self.GetSelectionOwnerUnchecked      = lambda *args, **kwargs: None
        self.GetWindowAttributes             = lambda *args, **kwargs: None
        self.GetWindowAttributesUnchecked    = lambda *args, **kwargs: None
        self.GrabButton                      = lambda *args, **kwargs: None
        self.GrabButtonChecked               = lambda *args, **kwargs: None
        self.GrabKey                         = lambda *args, **kwargs: None
        self.GrabKeyChecked                  = lambda *args, **kwargs: None
        self.GrabKeyboard                    = lambda *args, **kwargs: None
        self.GrabKeyboardUnchecked           = lambda *args, **kwargs: None
        self.GrabPointer                     = lambda *args, **kwargs: None
        self.GrabPointerUnchecked            = lambda *args, **kwargs: None
        self.GrabServer                      = lambda *args, **kwargs: None
        self.GrabServerChecked               = lambda *args, **kwargs: None
        self.ImageText16                     = lambda *args, **kwargs: None
        self.ImageText16Checked              = lambda *args, **kwargs: None
        self.ImageText8                      = lambda *args, **kwargs: None
        self.ImageText8Checked               = lambda *args, **kwargs: None
        self.InstallColormap                 = lambda *args, **kwargs: None
        self.InstallColormapChecked          = lambda *args, **kwargs: None
        self.KillClient                      = lambda *args, **kwargs: None
        self.KillClientChecked               = lambda *args, **kwargs: None
        self.ListExtensions                  = lambda *args, **kwargs: None
        self.ListExtensionsUnchecked         = lambda *args, **kwargs: None
        self.ListFonts                       = lambda *args, **kwargs: None
        self.ListFontsUnchecked              = lambda *args, **kwargs: None
        self.ListFontsWithInfo               = lambda *args, **kwargs: None
        self.ListFontsWithInfoUnchecked      = lambda *args, **kwargs: None
        self.ListHosts                       = lambda *args, **kwargs: None
        self.ListHostsUnchecked              = lambda *args, **kwargs: None
        self.ListInstalledColormaps          = lambda *args, **kwargs: None
        self.ListInstalledColormapsUnchecked = lambda *args, **kwargs: None
        self.ListProperties                  = lambda *args, **kwargs: None
        self.ListPropertiesUnchecked         = lambda *args, **kwargs: None
        self.LookupColor                     = lambda *args, **kwargs: None
        self.LookupColorUnchecked            = lambda *args, **kwargs: None
        self.MapSubwindows                   = lambda *args, **kwargs: None
        self.MapSubwindowsChecked            = lambda *args, **kwargs: None
        self.MapWindow                       = lambda *args, **kwargs: None
        self.MapWindowChecked                = lambda *args, **kwargs: None
        self.NoOperation                     = lambda *args, **kwargs: None
        self.NoOperationChecked              = lambda *args, **kwargs: None
        self.OpenFont                        = lambda *args, **kwargs: None
        self.OpenFontChecked                 = lambda *args, **kwargs: None
        self.PolyArc                         = lambda *args, **kwargs: None
        self.PolyArcChecked                  = lambda *args, **kwargs: None
        self.PolyFillArc                     = lambda *args, **kwargs: None
        self.PolyFillArcChecked              = lambda *args, **kwargs: None
        self.PolyFillRectangle               = lambda *args, **kwargs: None
        self.PolyFillRectangleChecked        = lambda *args, **kwargs: None
        self.PolyLine                        = lambda *args, **kwargs: None
        self.PolyLineChecked                 = lambda *args, **kwargs: None
        self.PolyPoint                       = lambda *args, **kwargs: None
        self.PolyPointChecked                = lambda *args, **kwargs: None
        self.PolyRectangle                   = lambda *args, **kwargs: None
        self.PolyRectangleChecked            = lambda *args, **kwargs: None
        self.PolySegment                     = lambda *args, **kwargs: None
        self.PolySegmentChecked              = lambda *args, **kwargs: None
        self.PolyText16                      = lambda *args, **kwargs: None
        self.PolyText16Checked               = lambda *args, **kwargs: None
        self.PolyText8                       = lambda *args, **kwargs: None
        self.PolyText8Checked                = lambda *args, **kwargs: None
        self.PutImage                        = lambda *args, **kwargs: None
        self.PutImageChecked                 = lambda *args, **kwargs: None
        self.QueryBestSize                   = lambda *args, **kwargs: None
        self.QueryBestSizeUnchecked          = lambda *args, **kwargs: None
        self.QueryColors                     = lambda *args, **kwargs: None
        self.QueryColorsUnchecked            = lambda *args, **kwargs: None
        self.QueryExtension                  = lambda *args, **kwargs: None
        self.QueryExtensionUnchecked         = lambda *args, **kwargs: None
        self.QueryFont                       = lambda *args, **kwargs: None
        self.QueryFontUnchecked              = lambda *args, **kwargs: None
        self.QueryPointer                    = lambda *args, **kwargs: None
        self.QueryPointerUnchecked           = lambda *args, **kwargs: None
        self.QueryTextExtents                = lambda *args, **kwargs: None
        self.QueryTextExtentsUnchecked       = lambda *args, **kwargs: None
        self.QueryTree                       = lambda *args, **kwargs: None
        self.QueryTreeUnchecked              = lambda *args, **kwargs: None
        self.RecolorCursor                   = lambda *args, **kwargs: None
        self.RecolorCursorChecked            = lambda *args, **kwargs: None
        self.ReparentWindow                  = lambda *args, **kwargs: None
        self.ReparentWindowChecked           = lambda *args, **kwargs: None
        self.RotateProperties                = lambda *args, **kwargs: None
        self.RotatePropertiesChecked         = lambda *args, **kwargs: None
        self.SendEvent                       = lambda *args, **kwargs: None
        self.SendEventChecked                = lambda *args, **kwargs: None
        self.SetAccessControl                = lambda *args, **kwargs: None
        self.SetAccessControlChecked         = lambda *args, **kwargs: None
        self.SetClipRectangles               = lambda *args, **kwargs: None
        self.SetClipRectanglesChecked        = lambda *args, **kwargs: None
        self.SetCloseDownMode                = lambda *args, **kwargs: None
        self.SetCloseDownModeChecked         = lambda *args, **kwargs: None
        self.SetDashes                       = lambda *args, **kwargs: None
        self.SetDashesChecked                = lambda *args, **kwargs: None
        self.SetFontPath                     = lambda *args, **kwargs: None
        self.SetFontPathChecked              = lambda *args, **kwargs: None
        self.SetInputFocus                   = lambda *args, **kwargs: None
        self.SetInputFocusChecked            = lambda *args, **kwargs: None
        self.SetModifierMapping              = lambda *args, **kwargs: None
        self.SetModifierMappingUnchecked     = lambda *args, **kwargs: None
        self.SetPointerMapping               = lambda *args, **kwargs: None
        self.SetPointerMappingUnchecked      = lambda *args, **kwargs: None
        self.SetSelectionOwner               = lambda *args, **kwargs: None
        self.SetSelectionOwnerChecked        = lambda *args, **kwargs: None
        self.StoreColors                     = lambda *args, **kwargs: None
        self.StoreColorsChecked              = lambda *args, **kwargs: None
        self.StoreNamedColor                 = lambda *args, **kwargs: None
        self.StoreNamedColorChecked          = lambda *args, **kwargs: None
        self.TranslateCoordinates            = lambda *args, **kwargs: None
        self.TranslateCoordinatesUnchecked   = lambda *args, **kwargs: None
        self.UngrabButton                    = lambda *args, **kwargs: None
        self.UngrabButtonChecked             = lambda *args, **kwargs: None
        self.UngrabKey                       = lambda *args, **kwargs: None
        self.UngrabKeyChecked                = lambda *args, **kwargs: None
        self.UngrabKeyboard                  = lambda *args, **kwargs: None
        self.UngrabKeyboardChecked           = lambda *args, **kwargs: None
        self.UngrabPointer                   = lambda *args, **kwargs: None
        self.UngrabPointerChecked            = lambda *args, **kwargs: None
        self.UngrabServer                    = lambda *args, **kwargs: None
        self.UngrabServerChecked             = lambda *args, **kwargs: None
        self.UninstallColormap               = lambda *args, **kwargs: None
        self.UninstallColormapChecked        = lambda *args, **kwargs: None
        self.UnmapSubwindows                 = lambda *args, **kwargs: None
        self.UnmapSubwindowsChecked          = lambda *args, **kwargs: None
        self.UnmapWindow                     = lambda *args, **kwargs: None
        self.UnmapWindowChecked              = lambda *args, **kwargs: None
        self.WarpPointer                     = lambda *args, **kwargs: None
        self.WarpPointerChecked              = lambda *args, **kwargs: None

* Wed 21 May 2014 10:58:48 PM JST
InternAtom
* Wed 21 May 2014 10:59:58 PM JST
InternAtomUnchecked
* Wed 21 May 2014 11:00:36 PM JST
GetAtomName
* Wed 21 May 2014 11:00:38 PM JST
_setattr
* Wed 21 May 2014 11:00:53 PM JST
GetAtomNameUnchecked
* Wed 21 May 2014 11:01:22 PM JST
AllocColor
* Wed 21 May 2014 11:01:55 PM JST
AllocColorUnchecked
* Wed 21 May 2014 11:02:19 PM JST
AllocColorCells
* Wed 21 May 2014 11:02:25 PM JST
AllocColorCellsUnchecked
* Wed 21 May 2014 11:02:28 PM JST
AllocColorPlanes
* Wed 21 May 2014 11:02:30 PM JST
AllocColorPlanesUnchecked
* Wed 21 May 2014 11:02:32 PM JST
AllocNamedColor
* Wed 21 May 2014 11:02:34 PM JST
AllocNamedColorUnchecked
* Wed 21 May 2014 11:02:37 PM JST
AllowEvents
* Wed 21 May 2014 11:02:40 PM JST
AllowEventsChecked
* Wed 21 May 2014 11:03:31 PM JST
Bell
* Wed 21 May 2014 11:03:57 PM JST
BellChecked
* Wed 21 May 2014 11:03:58 PM JST
ChangeActivePointerGrab
* Wed 21 May 2014 11:03:59 PM JST
ChangeActivePointerGrabChecked
* Wed 21 May 2014 11:04:00 PM JST
ChangeGC
* Wed 21 May 2014 11:04:00 PM JST
ChangeGCChecked
* Wed 21 May 2014 11:04:01 PM JST
ChageHosts
* Wed 21 May 2014 11:04:02 PM JST
ChageHostsChecked
* Wed 21 May 2014 11:04:02 PM JST
ChangeKeyboardControl
* Wed 21 May 2014 11:04:03 PM JST
ChangeKeyboardControlChecked
* Wed 21 May 2014 11:04:03 PM JST
ChangeKeyboardMapping
* Wed 21 May 2014 11:04:03 PM JST
ChangeKeyboardMappingChecked
* Wed 21 May 2014 11:04:04 PM JST
ChangePointerControl
* Wed 21 May 2014 11:04:04 PM JST
ChangePointerControlChecked
* Wed 21 May 2014 11:04:05 PM JST
ChangeProperty
* Wed 21 May 2014 11:04:05 PM JST
ChangePropertyChecked
* Wed 21 May 2014 11:04:06 PM JST
ChangeSaveSet
* Wed 21 May 2014 11:04:06 PM JST
ChangeSaveSetChecked
* Wed 21 May 2014 11:04:07 PM JST
ChangeWindowAttributes
* Wed 21 May 2014 11:04:07 PM JST
ChangeWindowAttributesChecked
* Wed 21 May 2014 11:04:14 PM JST
CirculateWindow
* Wed 21 May 2014 11:04:19 PM JST
CirculateWindowChecked
* Wed 21 May 2014 11:04:22 PM JST
ClearArea
* Wed 21 May 2014 11:04:27 PM JST
ClearAreaChecked
* Wed 21 May 2014 11:04:32 PM JST
CloseFont
* Wed 21 May 2014 11:04:40 PM JST
CloseFontChecked
* Wed 21 May 2014 11:04:44 PM JST
ConfigureWindow
* Wed 21 May 2014 11:04:50 PM JST
ConfigureWindowChecked
* Wed 21 May 2014 11:04:56 PM JST
ConvertSelection
* Wed 21 May 2014 11:04:59 PM JST
ConvertSelectionChecked
* Wed 21 May 2014 11:05:06 PM JST
CopyArea
* Wed 21 May 2014 11:05:11 PM JST
CopyAreaChecked
* Wed 21 May 2014 11:05:17 PM JST
CopyColormapAndFree
* Wed 21 May 2014 11:05:21 PM JST
CopyColormapAndFreeChecked
* Wed 21 May 2014 11:05:26 PM JST
CopyGC
* Wed 21 May 2014 11:05:31 PM JST
CopyGCChecked
* Wed 21 May 2014 11:05:38 PM JST
CopyPlane
* Wed 21 May 2014 11:05:41 PM JST
CopyPlaneChecked
* Wed 21 May 2014 11:05:47 PM JST
CreateColormap
* Wed 21 May 2014 11:05:51 PM JST
CreateColormapChecked
* Wed 21 May 2014 11:05:57 PM JST
CreateCursor
* Wed 21 May 2014 11:06:00 PM JST
CreateCursorChecked
* Wed 21 May 2014 11:06:07 PM JST
CreateGC
* Wed 21 May 2014 11:06:12 PM JST
CreateGCChecked
* Wed 21 May 2014 11:06:18 PM JST
CreateGlyphCursor
* Wed 21 May 2014 11:06:22 PM JST
CreateGlyphCursorChecked
* Wed 21 May 2014 11:06:28 PM JST
CreatePixmap
* Wed 21 May 2014 11:06:34 PM JST
CreatePixmapChecked
* Wed 21 May 2014 11:06:39 PM JST
CreateWindow
* Wed 21 May 2014 11:06:43 PM JST
CreateWindowChecked
* Wed 21 May 2014 11:06:49 PM JST
DeleteProperty
* Wed 21 May 2014 11:06:54 PM JST
DeletePropertyChecked
* Wed 21 May 2014 11:07:01 PM JST
DestroySubwindows
* Wed 21 May 2014 11:07:04 PM JST
DestroySubwindowsChecked
* Wed 21 May 2014 11:07:09 PM JST
DestroyWindow
* Wed 21 May 2014 11:07:16 PM JST
DestroyWindowChecked
* Wed 21 May 2014 11:07:20 PM JST
FillPoly
* Wed 21 May 2014 11:07:28 PM JST
FillPolyChecked
* Wed 21 May 2014 11:07:30 PM JST
ForceScreenSaver
* Wed 21 May 2014 11:07:37 PM JST
ForceScreenSaverChecked
* Wed 21 May 2014 11:07:40 PM JST
FreeColormap
* Wed 21 May 2014 11:07:48 PM JST
FreeColormapChecked
* Wed 21 May 2014 11:07:51 PM JST
FreeColors
* Wed 21 May 2014 11:07:56 PM JST
FreeColorsChecked
* Wed 21 May 2014 11:08:00 PM JST
FreeCursor
* Wed 21 May 2014 11:08:06 PM JST
FreeCursorChecked
* Wed 21 May 2014 11:08:10 PM JST
FreeGC
* Wed 21 May 2014 11:08:17 PM JST
FreeGCChecked
* Wed 21 May 2014 11:08:23 PM JST
FreePixmap
* Wed 21 May 2014 11:08:29 PM JST
FreePixmapChecked
* Wed 21 May 2014 11:08:34 PM JST
GetFontPath
* Wed 21 May 2014 11:08:38 PM JST
GetFontPathUnchecked
* Wed 21 May 2014 11:08:43 PM JST
GetGeometry
* Wed 21 May 2014 11:08:49 PM JST
GetGeometryUnchecked
* Wed 21 May 2014 11:08:53 PM JST
GetImage
* Wed 21 May 2014 11:09:00 PM JST
GetImageUnchecked
* Wed 21 May 2014 11:09:05 PM JST
GetInputFocus
* Wed 21 May 2014 11:09:12 PM JST
GetInputFocusUnchecked
* Wed 21 May 2014 11:09:15 PM JST
GetKeyboardControl
* Wed 21 May 2014 11:09:20 PM JST
GetKeyboardControlUnchecked
* Wed 21 May 2014 11:09:25 PM JST
GetKeyboardMapping
* Wed 21 May 2014 11:09:31 PM JST
GetKeyboardMappingUnchecked
* Wed 21 May 2014 11:09:34 PM JST
GetModifierMapping
* Wed 21 May 2014 11:09:39 PM JST
GetModifierMappingUnchecked
* Wed 21 May 2014 11:09:45 PM JST
GetMotionEvents
* Wed 21 May 2014 11:10:46 PM JST
GetMotionEventsUnchecked
* Wed 21 May 2014 11:10:47 PM JST
GetPointerControl
* Wed 21 May 2014 11:10:48 PM JST
GetPointerControlUnchecked
* Wed 21 May 2014 11:10:48 PM JST
GetPointerMapping
* Wed 21 May 2014 11:10:48 PM JST
GetPointerMappingUnchecked
* Wed 21 May 2014 11:10:49 PM JST
GetProperty
* Wed 21 May 2014 11:10:49 PM JST
GetPropertyUnchecked
* Wed 21 May 2014 11:10:50 PM JST
GetScreenSaver
* Wed 21 May 2014 11:10:50 PM JST
GetScreenSaverUnchecked
* Wed 21 May 2014 11:10:50 PM JST
GetSelectionOwner
* Wed 21 May 2014 11:10:51 PM JST
GetSelectionOwnerUnchecked
* Wed 21 May 2014 11:10:51 PM JST
GetWindowAttributes
* Wed 21 May 2014 11:10:52 PM JST
GetWindowAttributesUnchecked
* Wed 21 May 2014 11:10:52 PM JST
GrabButton
* Wed 21 May 2014 11:10:56 PM JST
GrabButtonChecked
* Wed 21 May 2014 11:10:58 PM JST
GrabKey
* Wed 21 May 2014 11:11:01 PM JST
GrabKeyChecked
* Wed 21 May 2014 11:11:05 PM JST
GrabKeyboard
* Wed 21 May 2014 11:11:11 PM JST
GrabKeyboardUnchecked
* Wed 21 May 2014 11:11:13 PM JST
GrabPointer
* Wed 21 May 2014 11:11:18 PM JST
GrabPointerUnchecked
* Wed 21 May 2014 11:11:21 PM JST
GrabServer
* Wed 21 May 2014 11:11:25 PM JST
GrabServerChecked
* Wed 21 May 2014 11:11:30 PM JST
ImageText16
* Wed 21 May 2014 11:11:35 PM JST
ImageText16Checked
* Wed 21 May 2014 11:11:39 PM JST
ImageText8
* Wed 21 May 2014 11:11:44 PM JST
ImageText8Checked
* Wed 21 May 2014 11:11:49 PM JST
InstallColormap
* Wed 21 May 2014 11:11:52 PM JST
InstallColormapChecked
* Wed 21 May 2014 11:11:56 PM JST
KillClient
* Wed 21 May 2014 11:12:00 PM JST
KillClientChecked
* Wed 21 May 2014 11:12:04 PM JST
ListExtensions
* Wed 21 May 2014 11:12:08 PM JST
ListExtensionsUnchecked
* Wed 21 May 2014 11:12:11 PM JST
ListFonts
* Wed 21 May 2014 11:12:16 PM JST
ListFontsUnchecked
* Wed 21 May 2014 11:12:19 PM JST
ListFontsWithInfo
* Wed 21 May 2014 11:12:23 PM JST
ListFontsWithInfoUnchecked
* Wed 21 May 2014 11:12:27 PM JST
ListHosts
* Wed 21 May 2014 11:12:31 PM JST
ListHostsUnchecked
* Wed 21 May 2014 11:12:35 PM JST
ListInstalledColormaps
* Wed 21 May 2014 11:12:39 PM JST
ListInstalledColormapsUnchecked
* Wed 21 May 2014 11:12:42 PM JST
ListProperties
* Wed 21 May 2014 11:12:48 PM JST
ListPropertiesUnchecked
* Wed 21 May 2014 11:12:50 PM JST
LookupColor
* Wed 21 May 2014 11:12:55 PM JST
LookupColorUnchecked
* Wed 21 May 2014 11:13:00 PM JST
MapSubwindows
* Wed 21 May 2014 11:13:04 PM JST
MapSubwindowsChecked
* Wed 21 May 2014 11:13:08 PM JST
MapWindow
* Wed 21 May 2014 11:13:12 PM JST
MapWindowChecked
* Wed 21 May 2014 11:13:14 PM JST
NoOperation
* Wed 21 May 2014 11:13:19 PM JST
NoOperationChecked
* Wed 21 May 2014 11:13:22 PM JST
OpenFont
* Wed 21 May 2014 11:13:26 PM JST
OpenFontChecked
* Wed 21 May 2014 11:13:31 PM JST
PolyArc
* Wed 21 May 2014 11:13:44 PM JST
PolyArcChecked
* Wed 21 May 2014 11:13:45 PM JST
PolyFillArc
* Wed 21 May 2014 11:13:45 PM JST
PolyFillArcChecked
* Wed 21 May 2014 11:13:47 PM JST
PolyFillRectangle
* Wed 21 May 2014 11:13:51 PM JST
PolyFillRectangleChecked
* Wed 21 May 2014 11:13:56 PM JST
PolyLine
* Wed 21 May 2014 11:14:00 PM JST
PolyLineChecked
* Wed 21 May 2014 11:14:03 PM JST
PolyPoint
* Wed 21 May 2014 11:14:06 PM JST
PolyPointChecked
* Wed 21 May 2014 11:14:10 PM JST
PolyRectangle
* Wed 21 May 2014 11:14:14 PM JST
PolyRectangleChecked
* Wed 21 May 2014 11:14:17 PM JST
PolySegment
* Wed 21 May 2014 11:14:22 PM JST
PolySegmentChecked
* Wed 21 May 2014 11:14:25 PM JST
PolyText16
* Wed 21 May 2014 11:14:28 PM JST
PolyText16Checked
* Wed 21 May 2014 11:14:32 PM JST
PolyText8
* Wed 21 May 2014 11:14:58 PM JST
PolyText8Checked
* Wed 21 May 2014 11:15:02 PM JST
PutImage
* Wed 21 May 2014 11:15:02 PM JST
PutImageChecked
* Wed 21 May 2014 11:15:03 PM JST
QueryBestSize
* Wed 21 May 2014 11:15:03 PM JST
QueryBestSizeUnchecked
* Wed 21 May 2014 11:15:03 PM JST
QueryColors
* Wed 21 May 2014 11:15:04 PM JST
QueryColorsUnchecked
* Wed 21 May 2014 11:15:04 PM JST
QueryExtension
* Wed 21 May 2014 11:15:07 PM JST
QueryExtensionUnchecked
* Wed 21 May 2014 11:15:10 PM JST
QueryFont
* Wed 21 May 2014 11:15:13 PM JST
QueryFontUnchecked
* Wed 21 May 2014 11:15:17 PM JST
QueryPointer
* Wed 21 May 2014 11:15:20 PM JST
QueryPointerUnchecked
* Wed 21 May 2014 11:15:25 PM JST
QueryTextExtents
* Wed 21 May 2014 11:15:29 PM JST
QueryTextExtentsUnchecked
* Wed 21 May 2014 11:15:31 PM JST
QueryTree
* Wed 21 May 2014 11:15:36 PM JST
QueryTreeUnchecked
* Wed 21 May 2014 11:15:40 PM JST
RecolorCursor
* Wed 21 May 2014 11:15:43 PM JST
RecolorCursorChecked
* Wed 21 May 2014 11:15:49 PM JST
ReparentWindow
* Wed 21 May 2014 11:15:51 PM JST
ReparentWindowChecked
* Wed 21 May 2014 11:15:55 PM JST
RotateProperties
* Wed 21 May 2014 11:16:00 PM JST
RotatePropertiesChecked
* Wed 21 May 2014 11:16:04 PM JST
SendEvent
* Wed 21 May 2014 11:16:08 PM JST
SendEventChecked
* Wed 21 May 2014 11:16:11 PM JST
SetAccessControl
* Wed 21 May 2014 11:16:16 PM JST
SetAccessControlChecked
* Wed 21 May 2014 11:16:20 PM JST
SetClipRectangles
* Wed 21 May 2014 11:16:22 PM JST
SetClipRectanglesChecked
* Wed 21 May 2014 11:16:27 PM JST
SetCloseDownMode
* Wed 21 May 2014 11:16:30 PM JST
SetCloseDownModeChecked
* Wed 21 May 2014 11:16:35 PM JST
SetDashes
* Wed 21 May 2014 11:16:40 PM JST
SetDashesChecked
* Wed 21 May 2014 11:16:42 PM JST
SetFontPath
* Wed 21 May 2014 11:16:46 PM JST
SetFontPathChecked
* Wed 21 May 2014 11:16:51 PM JST
SetInputFocus
* Wed 21 May 2014 11:16:54 PM JST
SetInputFocusChecked
* Wed 21 May 2014 11:16:57 PM JST
SetModifierMapping
* Wed 21 May 2014 11:17:02 PM JST
SetModifierMappingUnchecked
* Wed 21 May 2014 11:17:07 PM JST
SetPointerMapping
* Wed 21 May 2014 11:17:11 PM JST
SetPointerMappingUnchecked
* Wed 21 May 2014 11:17:15 PM JST
SetSelectionOwner
* Wed 21 May 2014 11:17:18 PM JST
SetSelectionOwnerChecked
* Wed 21 May 2014 11:17:22 PM JST
StoreColors
* Wed 21 May 2014 11:17:27 PM JST
StoreColorsChecked
* Wed 21 May 2014 11:17:30 PM JST
StoreNamedColor
* Wed 21 May 2014 11:17:33 PM JST
StoreNamedColorChecked
* Wed 21 May 2014 11:17:39 PM JST
TranslateCoordinates
* Wed 21 May 2014 11:17:42 PM JST
TranslateCoordinatesUnchecked
* Wed 21 May 2014 11:17:47 PM JST
UngrabButton
* Wed 21 May 2014 11:17:50 PM JST
UngrabButtonChecked
* Wed 21 May 2014 11:17:54 PM JST
UngrabKey
* Wed 21 May 2014 11:17:57 PM JST
UngrabKeyChecked
* Wed 21 May 2014 11:18:01 PM JST
UngrabKeyboard
* Wed 21 May 2014 11:18:04 PM JST
UngrabKeyboardChecked
* Wed 21 May 2014 11:18:09 PM JST
UngrabPointer
* Wed 21 May 2014 11:18:13 PM JST
UngrabPointerChecked
* Wed 21 May 2014 11:18:17 PM JST
UngrabServer
* Wed 21 May 2014 11:18:22 PM JST
UngrabServerChecked
* Wed 21 May 2014 11:18:27 PM JST
UninstallColormap
* Wed 21 May 2014 11:18:30 PM JST
UninstallColormapChecked
* Wed 21 May 2014 11:18:32 PM JST
UnmapSubwindows
* Wed 21 May 2014 11:18:36 PM JST
UnmapSubwindowsChecked
* Wed 21 May 2014 11:18:41 PM JST
UnmapWindow
* Wed 21 May 2014 11:18:44 PM JST
UnmapWindowChecked
* Wed 21 May 2014 11:18:48 PM JST
WarpPointer
* Wed 21 May 2014 11:18:54 PM JST
WarpPointerChecked
* Wed 21 May 2014 11:18:57 PM JST
SendEvent
* Wed 21 May 2014 11:19:01 PM JST
SendEventChecked
* Wed 21 May 2014 11:22:33 PM JST
xcb2.xproto.extensions
* Wed 21 May 2014 11:22:37 PM JST
extensions
* Wed 21 May 2014 11:22:43 PM JST
extensions
* Wed 21 May 2014 11:23:06 PM JST
ChangeHosts
* Wed 21 May 2014 11:24:18 PM JST
ChangeKeyBoardControl
* Wed 21 May 2014 11:26:22 PM JST
WrapCore2
* Wed 21 May 2014 11:27:20 PM JST
from 
* Wed 21 May 2014 11:29:02 PM JST
request
* Wed 21 May 2014 11:29:42 PM JST
request
* Wed 21 May 2014 11:29:45 PM JST
            
* Wed 21 May 2014 11:30:52 PM JST
core2.GetProperty.WM_NAME
* Wed 21 May 2014 11:31:05 PM JST
54525974
* Thu 22 May 2014 03:07:18 AM JST
class WrapGetPropertyCookie(object):
    r"""SUMMARY
    """

    def __init__(self, connection, cookie):
        r"""

        @Arguments:
        - `core`:
        - `cookie`:
        - `window`:
        - `prop`:
        """
        self._connection = connection
        self._cookie = cookie

    def check(self, ):
        r"""SUMMARY

        check()

        @Return:
        """
        return self._cookie.check()

    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:
        """
        reply = self._cookie.reply()
        reply.window = self._cookie.window
        reply.property = self._cookie.property
        return self._cookie.property.types(self._connection, reply)

* Thu 22 May 2014 03:08:41 AM JST
return 
* Thu 22 May 2014 03:10:26 AM JST
AtomName(self._connection, self.atomname).types
* Thu 22 May 2014 03:11:46 AM JST
property.
* Thu 22 May 2014 03:11:47 AM JST
_cookie.property.
* Thu 22 May 2014 03:11:47 AM JST
self._cookie.property.
* Thu 22 May 2014 03:13:54 AM JST
54525974
* Thu 22 May 2014 03:14:08 AM JST
name
* Thu 22 May 2014 03:24:05 AM JST
value_len
* Thu 22 May 2014 03:27:15 AM JST
types = AtomName(self._connection, self.atomname).types
* Thu 22 May 2014 03:27:36 AM JST
self._cookie
* Thu 22 May 2014 03:27:40 AM JST

* Thu 22 May 2014 03:27:40 AM JST

* Thu 22 May 2014 03:27:40 AM JST
        types = AtomName(self._connection, self._cookie.property).types

* Thu 22 May 2014 03:27:42 AM JST

* Thu 22 May 2014 03:27:42 AM JST

* Thu 22 May 2014 03:27:42 AM JST
        print(types)

* Thu 22 May 2014 03:28:59 AM JST
Inter
* Thu 22 May 2014 03:36:59 AM JST
class SubCoreMethodAbstract(object):
    r"""SUMMARY
    """

    def __init__(self, parent):
        r"""

        @Arguments:
        - `parent`:
        """
        self._parent = parent
        self._connection = self._parent._connection

* Thu 22 May 2014 03:37:48 AM JST
SubCoreMethodAbstract
* Thu 22 May 2014 03:40:38 AM JST
Event
* Thu 22 May 2014 03:40:46 AM JST
EventCode
* Thu 22 May 2014 03:41:39 AM JST
class EventCode(_IntEnum):
    r"""SUMMARY
    """
    KeyPress         = 2
    KeyRelease       = 3
    ButtonPress      = 4
    ButtonRelease    = 5
    MotionNotify     = 6
    EnterNotify      = 7
    LeaveNotify      = 8
    FocusIn          = 9
    FocusOut         = 10
    KeymapNotify     = 11
    Expose           = 12
    GraphicsExposure = 13
    NoExposure       = 14
    VisibilityNotify = 15
    CreateNotify     = 16
    DestroyNotify    = 17
    UnmapNotify      = 18
    MapNotify        = 19
    MapRequest       = 20
    ReparentNotify   = 21
    ConfigureNotify  = 22
    ConfigureRequest = 23
    GravityNotify    = 24
    ResizeRequest    = 25
    CirculateNotify  = 26
    CirculateRequest = 27
    PropertyNotify   = 28
    SelectionClear   = 29
    SelectionRequest = 30
    SelectionNotify  = 31
    ColormapNotify   = 32
    ClientMessage    = 33
    MappingNotify    = 34

* Thu 22 May 2014 03:41:52 AM JST
from enum import IntEnum as _IntEnum
* Thu 22 May 2014 03:42:04 AM JST

* Thu 22 May 2014 03:42:04 AM JST

* Thu 22 May 2014 03:42:04 AM JST
from xcb2.xproto import EventCode

* Thu 22 May 2014 03:43:42 AM JST
from enum import IntEnum as _IntEnum


class EventCode(_IntEnum):
    r"""SUMMARY
    """
    KeyPress         = 2
    KeyRelease       = 3
    ButtonPress      = 4
    ButtonRelease    = 5
    MotionNotify     = 6
    EnterNotify      = 7
    LeaveNotify      = 8
    FocusIn          = 9
    FocusOut         = 10
    KeymapNotify     = 11
    Expose           = 12
    GraphicsExposure = 13
    NoExposure       = 14
    VisibilityNotify = 15
    CreateNotify     = 16
    DestroyNotify    = 17
    UnmapNotify      = 18
    MapNotify        = 19
    MapRequest       = 20
    ReparentNotify   = 21
    ConfigureNotify  = 22
    ConfigureRequest = 23
    GravityNotify    = 24
    ResizeRequest    = 25
    CirculateNotify  = 26
    CirculateRequest = 27
    PropertyNotify   = 28
    SelectionClear   = 29
    SelectionRequest = 30
    SelectionNotify  = 31
    ColormapNotify   = 32
    ClientMessage    = 33
    MappingNotify    = 34

* Thu 22 May 2014 03:44:02 AM JST

* Thu 22 May 2014 03:44:02 AM JST

* Thu 22 May 2014 03:44:02 AM JST
from enum import IntEnum as _IntEnum

* Thu 22 May 2014 03:45:22 AM JST

* Thu 22 May 2014 03:45:22 AM JST

* Thu 22 May 2014 03:45:22 AM JST
from xcb2.xproto.extensions.sendevent.eventcode import EventCode

* Thu 22 May 2014 03:45:40 AM JST
, SubCoreMethodAbstract)
* Thu 22 May 2014 03:46:13 AM JST
class EventAbstract(SubCoreMethodAbstract):
    r"""SUMMARY
    """
    code = _pack('B', EventCode.KeyPress)

    def __init__(self, parent):
        r"""SUMMARY

        __init__(parent)

        @Arguments:
        - `parent`:

        @Return:
        """
        SubCoreMethodAbstract.__init__(self, parent)


* Thu 22 May 2014 03:46:28 AM JST
from struct import pack as _pack
* Thu 22 May 2014 03:48:19 AM JST
CoreSubMethodAbstract
* Thu 22 May 2014 03:50:48 AM JST
B', 
* Thu 22 May 2014 03:50:48 AM JST
_pack('B', 
* Thu 22 May 2014 03:51:04 AM JST
CoreSubMethodAbstract.__init__(self, parent)
* Thu 22 May 2014 03:53:27 AM JST
self._parent.request(
            self._getbinary(window, delete, long_offset, long_length))
* Thu 22 May 2014 03:53:57 AM JST
class EventAbstract(CoreSubMethodAbstract):
    r"""SUMMARY
    """
    code = EventCode.KeyPress

    def __init__(self, parent):
        r"""SUMMARY

        __init__(parent)

        @Arguments:
        - `parent`:

        @Return:
        """
        CoreSubMethodAbstract.__init__(self, parent)
        self._code = _StringIO()
        self._code.write(_pack('B', self.code))

* Thu 22 May 2014 03:54:04 AM JST
from cStringIO import StringIO as _StringIO
from struct import pack as _pack

from xcb2.xproto.extensions.sendevent.eventcode import EventCode
from xcb2.xproto.extensions.abstract import CoreSubMethodAbstract


class EventAbstract(CoreSubMethodAbstract):
    r"""SUMMARY
    """
    code = EventCode.KeyPress

    def __init__(self, parent):
        r"""SUMMARY

        __init__(parent)

        @Arguments:
        - `parent`:

        @Return:
        """
        CoreSubMethodAbstract.__init__(self, parent)
        self._code = _StringIO()
        self._code.write(_pack('B', self.code))

* Thu 22 May 2014 05:18:06 AM JST
propagate, destination, detail,
                       sequence_number, time, root, window, child,
                       root_x, root_y, event_x, event_y, state, samescreen
* Thu 22 May 2014 05:18:56 AM JST
                       
* Thu 22 May 2014 05:18:57 AM JST
                       
* Thu 22 May 2014 05:21:10 AM JST
from xcb2.xproto.extensions.abstract import (CoreMethodAbstract, SubCoreMethodAbstract)
* Thu 22 May 2014 05:21:15 AM JST
CoreMethodAbstract, 
* Thu 22 May 2014 05:21:20 AM JST
SubCoreMethodAbstract
* Thu 22 May 2014 05:21:49 AM JST
Sub
* Thu 22 May 2014 05:22:02 AM JST
Sub
* Thu 22 May 2014 05:22:07 AM JST
Sub
* Thu 22 May 2014 05:22:22 AM JST
Sub
* Thu 22 May 2014 05:22:25 AM JST
Sub
* Thu 22 May 2014 05:22:31 AM JST
Sub
* Thu 22 May 2014 05:22:39 AM JST
Sub
* Thu 22 May 2014 05:22:43 AM JST
Sub
* Thu 22 May 2014 05:24:54 AM JST
from xcb.xproto import EventMask
* Thu 22 May 2014 05:25:38 AM JST
from xcb2.xproto.ext.sendevent.eventcode import EventCode
* Thu 22 May 2014 05:29:38 AM JST
propagate, destination, detail, sequence_number,
                 time, root, window, child, root_x, root_y, event_x, event_y,
                 state, samescreen
* Thu 22 May 2014 05:29:54 AM JST
                 
* Thu 22 May 2014 05:29:56 AM JST
                 
* Thu 22 May 2014 05:30:58 AM JST
_StringIO
* Thu 22 May 2014 05:31:34 AM JST
propagate, destination
* Thu 22 May 2014 05:31:45 AM JST
_pack
* Thu 22 May 2014 05:33:28 AM JST
BH4I5HBx
* Thu 22 May 2014 05:33:46 AM JST
detail,
                        sequence_number, time, root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen
* Thu 22 May 2014 05:33:48 AM JST
                        
* Thu 22 May 2014 05:33:52 AM JST
                        
* Thu 22 May 2014 05:35:32 AM JST
propagate, destination, detail, sequence_number,
                 time, root, window, child, root_x, root_y, event_x, event_y,
                 state, samescreen
* Thu 22 May 2014 05:35:51 AM JST
KeyPress
* Thu 22 May 2014 05:37:39 AM JST
KeyPress
* Thu 22 May 2014 05:39:23 AM JST
__all__ = ['SendEvent', 'SendEventChecked', ]
* Thu 22 May 2014 05:41:04 AM JST
54525974
* Thu 22 May 2014 05:42:54 AM JST
False
* Thu 22 May 2014 05:44:02 AM JST
SendEventChecked
* Thu 22 May 2014 05:44:57 AM JST
buf.getvalue()
* Thu 22 May 2014 05:45:10 AM JST
'\x00\x00\x00\x00\x16\x00@\x03\x01\x00\x00\x00\x02\n\x00\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Thu 22 May 2014 05:46:27 AM JST
buf
* Thu 22 May 2014 05:47:04 AM JST
0, 54525974, 10, 0, 0, 482, 54525974, 0, 0, 0, 0, 0, 0, 1
* Thu 22 May 2014 05:47:38 AM JST
GetProperty
* Thu 22 May 2014 05:48:04 AM JST
54525974
* Thu 22 May 2014 05:48:48 AM JST
'\x00\x00\x00\x00\x16\x00@\x03\x01\x00\x00\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Thu 22 May 2014 05:49:18 AM JST

* Thu 22 May 2014 05:49:18 AM JST

* Thu 22 May 2014 05:49:18 AM JST
        print(repr(buf.getvalue()))

* Thu 22 May 2014 05:54:02 AM JST
54525974
* Thu 22 May 2014 05:54:37 AM JST
54525974
* Thu 22 May 2014 06:03:15 AM JST
print(repr(buf.getvalue()))
* Thu 22 May 2014 06:03:53 AM JST
BH
* Thu 22 May 2014 06:04:02 AM JST
detail, sequence_number
* Thu 22 May 2014 06:04:13 AM JST
sequence_number, 
* Thu 22 May 2014 06:04:13 AM JST
detail, sequence_number, 
* Thu 22 May 2014 06:05:13 AM JST
print(repr(buf.getvalue()))
* Thu 22 May 2014 06:05:32 AM JST
time, 
* Thu 22 May 2014 06:05:33 AM JST
                        
* Thu 22 May 2014 06:05:39 AM JST
                        
* Thu 22 May 2014 06:05:47 AM JST
print(repr(buf.getvalue()))
* Thu 22 May 2014 06:06:04 AM JST
0, 54525974, 10, 0, 0, 482, 54525974, 0, 0, 0, 0, 0, 0, 1
* Thu 22 May 2014 06:06:35 AM JST
\n\x00\x00\x00\x00\x00\x00\x00'
* Thu 22 May 2014 06:06:55 AM JST

* Thu 22 May 2014 06:06:55 AM JST

* Thu 22 May 2014 06:06:55 AM JST
        print(repr(buf.getvalue()))

* Thu 22 May 2014 06:06:57 AM JST
time
* Thu 22 May 2014 06:07:01 AM JST

* Thu 22 May 2014 06:07:01 AM JST

* Thu 22 May 2014 06:07:01 AM JST
        buf.write(_pack('I', ))

* Thu 22 May 2014 06:07:03 AM JST

* Thu 22 May 2014 06:07:03 AM JST

* Thu 22 May 2014 06:07:03 AM JST
        print(repr(buf.getvalue()))

* Thu 22 May 2014 06:07:07 AM JST
BH
* Thu 22 May 2014 06:07:13 AM JST
detail, sequence_number
* Thu 22 May 2014 06:07:22 AM JST

* Thu 22 May 2014 06:07:22 AM JST

* Thu 22 May 2014 06:07:22 AM JST
        buf.write(_pack('BH', ))

* Thu 22 May 2014 06:07:42 AM JST
\n\x00\x00\x00\x00\x00\x00\x00\xe2
* Thu 22 May 2014 06:08:33 AM JST
'\x00\x00\x00\x00\x16\x00@\x03\x01\x00\x00\x00\x02\n\x00\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Thu 22 May 2014 06:08:42 AM JST
'\x00\x00\x00\x00\x16\x00@\x03\x01\x00\x00\x00\x02
* Thu 22 May 2014 06:09:26 AM JST
0, 54525974, 10, 0, 0, 482, 54525974, 0, 0, 0, 0, 0, 0, 1
* Thu 22 May 2014 06:09:31 AM JST
'\x00\x00\x00\x00\x16\x00@\x03\x01\x00\x00\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Thu 22 May 2014 06:09:44 AM JST
'\x00\x00\x00\x00\x16\x00@\x03\x01\x00\x00\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Thu 22 May 2014 06:10:06 AM JST

* Thu 22 May 2014 06:10:06 AM JST

* Thu 22 May 2014 06:10:06 AM JST
        print(repr(buf.getvalue()))

* Thu 22 May 2014 06:10:07 AM JST

* Thu 22 May 2014 06:10:07 AM JST

* Thu 22 May 2014 06:10:07 AM JST
        print(repr(buf.getvalue()))

* Thu 22 May 2014 06:13:48 AM JST
                        
* Thu 22 May 2014 06:13:52 AM JST
                        
* Thu 22 May 2014 06:13:59 AM JST
time, 
* Thu 22 May 2014 06:14:24 AM JST
'\x00\x00\x00\x00\x16\x00@\x03\x01\x00\x00\x00\x02\n\x00\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Thu 22 May 2014 06:15:19 AM JST
print(repr(buf.getvalue()))
* Thu 22 May 2014 06:16:05 AM JST
detail
* Thu 22 May 2014 06:16:07 AM JST
detail,
* Thu 22 May 2014 06:16:30 AM JST
print(repr(buf.getvalue()))
* Thu 22 May 2014 06:17:17 AM JST
'\x00\x00\x00\x00\x16\x00@\x03\x01\x00\x00\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Thu 22 May 2014 06:17:53 AM JST

* Thu 22 May 2014 06:17:53 AM JST

* Thu 22 May 2014 06:17:53 AM JST
        print(repr(buf.getvalue()))

* Thu 22 May 2014 06:17:54 AM JST

* Thu 22 May 2014 06:17:54 AM JST

* Thu 22 May 2014 06:17:54 AM JST
        print(repr(buf.getvalue()))

* Thu 22 May 2014 06:17:55 AM JST

* Thu 22 May 2014 06:17:55 AM JST

* Thu 22 May 2014 06:17:55 AM JST
        print(repr(buf.getvalue()))

* Thu 22 May 2014 06:17:56 AM JST

* Thu 22 May 2014 06:17:56 AM JST

* Thu 22 May 2014 06:17:56 AM JST
        print(repr(buf.getvalue()))

* Thu 22 May 2014 06:17:58 AM JST

* Thu 22 May 2014 06:17:58 AM JST

* Thu 22 May 2014 06:17:58 AM JST
        print(repr(buf.getvalue()))

* Thu 22 May 2014 06:28:19 AM JST
tes()
* Thu 22 May 2014 06:28:19 AM JST
def tes()
* Thu 22 May 2014 06:31:20 AM JST
'\x00\x00\x00\x00\x16\x00@\x03\x01\x00\x00\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Thu 22 May 2014 06:31:32 AM JST
H
* Thu 22 May 2014 06:31:36 AM JST
sequence_number
* Thu 22 May 2014 06:32:44 AM JST
H
* Thu 22 May 2014 06:32:47 AM JST
sequence_number
* Thu 22 May 2014 06:33:09 AM JST
sequence_number,
* Thu 22 May 2014 06:33:21 AM JST
'\x00\x00\x00\x00\x16\x00@\x03\x01\x00\x00\x00\x02\n\x00\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00@\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Thu 22 May 2014 06:33:37 AM JST
sequence_number
* Thu 22 May 2014 06:33:42 AM JST

* Thu 22 May 2014 06:33:42 AM JST

* Thu 22 May 2014 06:33:42 AM JST
        # buf.write(_pack('I', time))

* Thu 22 May 2014 06:36:45 AM JST
h
* Thu 22 May 2014 06:36:48 AM JST
sequence_number
* Thu 22 May 2014 06:38:08 AM JST
4I5HBx
* Thu 22 May 2014 06:38:26 AM JST
joined 
* Thu 22 May 2014 06:38:50 AM JST

* Thu 22 May 2014 06:38:50 AM JST

* Thu 22 May 2014 06:38:50 AM JST
        print(repr(buf.getvalue()))

* Thu 22 May 2014 06:41:34 AM JST
a.write(pack('I', 0))
* Fri 23 May 2014 02:43:41 AM JST
EventMask.KeyPress
* Fri 23 May 2014 02:43:57 AM JST
EventCode.KeyPress
* Fri 23 May 2014 02:44:03 AM JST

* Fri 23 May 2014 02:44:03 AM JST

* Fri 23 May 2014 02:44:03 AM JST
        self._mask = _pack('I', self.mask)

* Fri 23 May 2014 02:44:03 AM JST
        self._mask = _pack('I', self.mask)

* Fri 23 May 2014 02:44:03 AM JST
        self._mask = _pack('I', self.mask)
        self._code = _pack('B', self.code)

* Fri 23 May 2014 02:53:26 AM JST
from struct import pack as _pack
from cStringIO import StringIO as _StringIO

from xcb.xproto import EventMask
from xcb2.xproto.extensions.sendevent.eventcode import EventCode
from xcb2.xproto.extensions.abstract import CoreSubMethodAbstract


class KeyPress(CoreSubMethodAbstract):
    r"""SUMMARY
    """
    mask = EventMask.KeyPress
    code = EventCode.KeyPress
    _mask = _pack('I', EventMask.KeyPress)
    _code = _pack('B', EventCode.KeyPress)

    def __init__(self, parent):
        r"""SUMMARY

        __init__(parent)

        @Arguments:
        - `parent`:

        @Return:
        """
        CoreSubMethodAbstract.__init__(self, parent)

    def _getbinary(self, propagate, destination, detail, sequence_number,
                   time, root, window, child, root_x, root_y, event_x, event_y,
                   state, samescreen):
        r"""SUMMARY

        _getbinary(propagate, destination, detail, sequence_number,
        time, root, window, child, root_x, root_y, event_x, event_y,
        state, samescreen)

        @Arguments:
        - `propagate`:
        - `destination`:
        - `detail`:
        - `sequence_number`:
        - `time`:
        - `root`:
        - `window`:
        - `child`:
        - `root_x`:
        - `root_y`:
        - `event_x`:
        - `event_y`:
        - `state`:
        - `samescreen`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('=xB2xI', propagate, destination))
        buf.write(self._mask)
        buf.write(self._code)
        buf.write(_pack('B', detail))
        buf.write(_pack('H', sequence_number)) # why 'BH4I5HBx' fmt LengthError
        buf.write(_pack('4I5HBx', time, root, window, child,
                        root_x, root_y,
                        event_x, event_y, state, samescreen))
        return buf.getvalue()

    def __call__(self, propagate, destination, detail, sequence_number,
                 time, root, window, child, root_x, root_y, event_x, event_y,
                 state, samescreen):
        r"""SUMMARY

        __call__(propagate, destination, detail, sequence_number,
        time, root, window, child, root_x, root_y, event_x, event_y, state,
        samescreen)

        @Arguments:
        - `propagate`:
        - `destination`:
        - `detail`:
        - `sequence_number`:
        - `time`:
        - `root`:
        - `window`:
        - `child`:
        - `root_x`:
        - `root_y`:
        - `event_x`:
        - `event_y`:
        - `state`:
        - `samescreen`:

        @Return:
        """
        return self._parent.request(
            self._getbinary(propagate, destination, detail, sequence_number,
                 time, root, window, child, root_x, root_y, event_x, event_y,
                 state, samescreen))

* Fri 23 May 2014 02:53:50 AM JST
KeyPress
* Fri 23 May 2014 02:53:54 AM JST
KeyPress
* Fri 23 May 2014 02:54:01 AM JST
KeyRelease
* Fri 23 May 2014 02:58:53 AM JST
Key
* Fri 23 May 2014 02:59:08 AM JST
ButtonPress
* Fri 23 May 2014 03:05:06 AM JST
EventAbstract
* Fri 23 May 2014 03:05:44 AM JST
    def __init__(self, parent):
        r"""SUMMARY

        __init__(parent)

        @Arguments:
        - `parent`:

        @Return:
        """
        CoreSubMethodAbstract.__init__(self, parent)

    def _getbinary(self, propagate, destination, detail, sequence_number,
                   time, root, window, child, root_x, root_y, event_x, event_y,
                   state, samescreen):
        r"""SUMMARY

        _getbinary(propagate, destination, detail, sequence_number,
        time, root, window, child, root_x, root_y, event_x, event_y,
        state, samescreen)

        @Arguments:
        - `propagate`:
        - `destination`:
        - `detail`:
        - `sequence_number`:
        - `time`:
        - `root`:
        - `window`:
        - `child`:
        - `root_x`:
        - `root_y`:
        - `event_x`:
        - `event_y`:
        - `state`:
        - `samescreen`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('=xB2xI', propagate, destination))
        buf.write(self._mask)
        buf.write(self._code)
        buf.write(_pack('B', detail))
        buf.write(_pack('H', sequence_number)) # why 'BH4I5HBx' fmt LengthError
        buf.write(_pack('4I5HBx', time, root, window, child,
                        root_x, root_y,
                        event_x, event_y, state, samescreen))
        return buf.getvalue()

    def __call__(self, propagate, destination, detail, sequence_number,
                 time, root, window, child, root_x, root_y, event_x, event_y,
                 state, samescreen):
        r"""SUMMARY

        __call__(propagate, destination, detail, sequence_number,
        time, root, window, child, root_x, root_y, event_x, event_y, state,
        samescreen)

        @Arguments:
        - `propagate`:
        - `destination`:
        - `detail`:
        - `sequence_number`:
        - `time`:
        - `root`:
        - `window`:
        - `child`:
        - `root_x`:
        - `root_y`:
        - `event_x`:
        - `event_y`:
        - `state`:
        - `samescreen`:

        @Return:
        """
        return self._parent.request(
            self._getbinary(propagate, destination, detail, sequence_number,
                 time, root, window, child, root_x, root_y, event_x, event_y,
                 state, samescreen))

* Fri 23 May 2014 03:06:28 AM JST

* Fri 23 May 2014 03:06:28 AM JST

* Fri 23 May 2014 03:06:28 AM JST
    code = EventCode.KeyPress

* Fri 23 May 2014 03:06:39 AM JST

* Fri 23 May 2014 03:06:39 AM JST

* Fri 23 May 2014 03:06:39 AM JST
from xcb2.xproto.extensions.sendevent.eventcode import EventCode

* Fri 23 May 2014 03:07:15 AM JST

* Fri 23 May 2014 03:07:17 AM JST
eventcode
* Fri 23 May 2014 03:07:21 AM JST
EventCode
* Fri 23 May 2014 03:07:25 AM JST

* Fri 23 May 2014 03:07:25 AM JST

* Fri 23 May 2014 03:07:25 AM JST
from xcb2.xproto.extensions.abstract import CoreSubMethodAbstract

* Fri 23 May 2014 03:07:28 AM JST
EventAbstract
* Fri 23 May 2014 03:07:55 AM JST

* Fri 23 May 2014 03:07:55 AM JST

* Fri 23 May 2014 03:07:55 AM JST
from cStringIO import StringIO as _StringIO

* Fri 23 May 2014 03:08:13 AM JST
from xcb2.xproto.extensions.sendevent.abstract import EventAbstract
* Fri 23 May 2014 03:08:18 AM JST
EventAbstract
* Fri 23 May 2014 03:08:36 AM JST

* Fri 23 May 2014 03:08:36 AM JST

* Fri 23 May 2014 03:08:36 AM JST
from cStringIO import StringIO as _StringIO

* Fri 23 May 2014 03:09:02 AM JST
from xcb2.xproto.extensions.sendevent.abstract import EventAbstract
* Fri 23 May 2014 03:09:15 AM JST
EventAbstract
* Fri 23 May 2014 03:09:24 AM JST

* Fri 23 May 2014 03:09:24 AM JST

* Fri 23 May 2014 03:09:24 AM JST
from cStringIO import StringIO as _StringIO

* Fri 23 May 2014 03:10:00 AM JST
Release
* Fri 23 May 2014 03:10:31 AM JST

* Fri 23 May 2014 03:10:41 AM JST

* Fri 23 May 2014 03:10:42 AM JST
keyrelease
* Fri 23 May 2014 03:10:46 AM JST
KeyRelease
* Fri 23 May 2014 03:10:50 AM JST

* Fri 23 May 2014 03:10:51 AM JST
ButtonPress
* Fri 23 May 2014 03:10:53 AM JST
buttonpress
* Fri 23 May 2014 03:11:04 AM JST
KeyRelease
* Fri 23 May 2014 03:11:21 AM JST
ButtonPress
* Fri 23 May 2014 03:11:31 AM JST
ButtonRelease
* Fri 23 May 2014 03:11:39 AM JST

* Fri 23 May 2014 03:11:39 AM JST

* Fri 23 May 2014 03:11:39 AM JST
####

* Fri 23 May 2014 03:11:39 AM JST
####

* Fri 23 May 2014 03:11:39 AM JST
####
##

* Fri 23 May 2014 03:14:02 AM JST
KeyPress
* Fri 23 May 2014 03:14:17 AM JST
c.core2.SendEvent.KeyPress(0, 54525974, 10, 0, 0, 482, 54525974, 0, 0, 0, 0, 0, 0, 1)
* Fri 23 May 2014 03:14:50 AM JST
56623126
* Fri 23 May 2014 03:15:06 AM JST
54525974
* Fri 23 May 2014 03:15:09 AM JST
54525974
* Fri 23 May 2014 04:12:24 AM JST
from xcb2.xproto.extensions.abstract import CoreSubMethodAbstract
* Fri 23 May 2014 04:12:31 AM JST
from cStringIO import StringIO as _StringIO
from struct import pack as _pack

* Fri 23 May 2014 04:12:55 AM JST

* Fri 23 May 2014 04:12:55 AM JST

* Fri 23 May 2014 04:12:55 AM JST
        self._parent = parent

* Fri 23 May 2014 04:13:42 AM JST
from xcb.xproto import EventMask
* Fri 23 May 2014 04:14:06 AM JST
from xcb.xproto import EventMask
* Fri 23 May 2014 04:14:10 AM JST
EventMask
* Fri 23 May 2014 04:15:18 AM JST

* Fri 23 May 2014 04:15:18 AM JST

* Fri 23 May 2014 04:15:18 AM JST
from xcb.xproto import EventMask

* Fri 23 May 2014 04:15:28 AM JST
from xcb2.xproto.extensions.sendevent.eventcode import EventCode
* Fri 23 May 2014 04:15:48 AM JST
EventCode.ClientMessage
* Fri 23 May 2014 04:16:58 AM JST
_pack('I', EventMask.ButtonRelease)
* Fri 23 May 2014 04:17:05 AM JST
ClientMessage
* Fri 23 May 2014 04:17:26 AM JST
ClientMessage
* Fri 23 May 2014 04:18:11 AM JST
propagate, format, sequence_number, window, atom, data
* Fri 23 May 2014 04:18:42 AM JST
buf = _StringIO()
* Fri 23 May 2014 04:19:05 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xI', propagate, destination))
        buf.write(self._mask)
        buf.write(self._code)

* Fri 23 May 2014 04:19:09 AM JST

* Fri 23 May 2014 04:19:09 AM JST

* Fri 23 May 2014 04:19:09 AM JST
        buf = _StringIO()

* Fri 23 May 2014 04:20:26 AM JST
buf.write(str(buffer(_array('b', data))))
* Fri 23 May 2014 04:21:42 AM JST
# 0xffffff EventMask
* Fri 23 May 2014 04:24:07 AM JST
propagate, destination, format, sequence_number,
                 window, atom, data
* Fri 23 May 2014 04:24:10 AM JST
        
* Sat 24 May 2014 01:57:41 AM JST
EventCode.ClientMessage
* Sat 24 May 2014 01:57:47 AM JST
    _mask = _pack('I', ClientMessage.mask)
    _code = _pack('B', ClientMessage.code)

* Sat 24 May 2014 02:02:29 AM JST
'_NET_WM_STATE_FULLSCREEN', 
* Sat 24 May 2014 02:02:51 AM JST
from enum import IntEnum as _IntEnum
* Sat 24 May 2014 02:03:00 AM JST
class WindowStateMode(_IntEnum):
    r"""SUMMARY
    """
    Unset  = 0
    Set    = 1
    Toggle = 2

* Sat 24 May 2014 02:03:10 AM JST
WindowStateMode
* Sat 24 May 2014 02:04:24 AM JST
WindowStateMode.Set
* Sat 24 May 2014 02:17:23 AM JST

* Sat 24 May 2014 02:17:25 AM JST
abstract
* Sat 24 May 2014 02:17:28 AM JST
CoreSubMethodAbstract
* Sat 24 May 2014 02:19:05 AM JST
InternAtom(self._connection)
* Sat 24 May 2014 02:22:20 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xI', propagate, destination))
        buf.write(self._mask)
        buf.write(self._code)
        buf.write('BH2I', format, sequence_number, window, atom)

* Sat 24 May 2014 02:25:15 AM JST
WindowStateMode.Unset
* Sat 24 May 2014 02:25:17 AM JST
Unset
* Sat 24 May 2014 02:25:53 AM JST
'_NET_WM_STATE'
* Sat 24 May 2014 02:26:27 AM JST

* Sat 24 May 2014 02:26:27 AM JST

* Sat 24 May 2014 02:26:27 AM JST
    _format = 

* Sat 24 May 2014 02:26:44 AM JST
_net_wm_state
* Sat 24 May 2014 02:28:26 AM JST
self.
* Sat 24 May 2014 02:28:28 AM JST
I', 
* Sat 24 May 2014 02:28:28 AM JST
_pack('I', 
* Sat 24 May 2014 03:02:01 AM JST
AtomName(self._connection, self.atomname).types.name
* Sat 24 May 2014 03:02:13 AM JST
self._net_wm_state
* Sat 24 May 2014 03:02:29 AM JST
from xcb2.xproto.extensions.getatomname import AtomName
* Sat 24 May 2014 03:03:14 AM JST
        self.types = InternAtom(self._connection)(True, len(types),
                                                  types).reply().atom

* Sat 24 May 2014 03:03:24 AM JST
_connection)
* Sat 24 May 2014 03:03:25 AM JST
self._connection)
* Sat 24 May 2014 03:03:25 AM JST
InternAtom(self._connection)
* Sat 24 May 2014 03:03:30 AM JST
                                  
* Sat 24 May 2014 03:06:02 AM JST
name
* Sat 24 May 2014 03:06:06 AM JST
types
* Sat 24 May 2014 03:06:14 AM JST

* Sat 24 May 2014 03:06:14 AM JST

* Sat 24 May 2014 03:06:14 AM JST
        self.types = internatom(True, len(types), types).reply().atom

* Sat 24 May 2014 03:07:36 AM JST
sequence_number
* Sat 24 May 2014 03:10:42 AM JST
propagate
* Sat 24 May 2014 03:10:52 AM JST
propergate=False,
* Sat 24 May 2014 03:14:07 AM JST
self.
* Sat 24 May 2014 03:16:27 AM JST
return self._parent.request
* Sat 24 May 2014 03:17:29 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xI', propergate, window))
        buf.write(self._mask)
        buf.write(self._code)
        buf.write('BH2I', self.format, sequence_number, window, self.stateatom)
        buf.write(self._set)
        buf.write(self.atoms)
        return self._parent.request(buf.getvalue())

* Sat 24 May 2014 03:17:41 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xI', propergate, window))
        buf.write(self._mask)
        buf.write(self._code)
        buf.write('BH2I', self.format, sequence_number, window, self.stateatom)
        buf.write(self._unset)
        buf.write(self.atoms)
        return self._parent.request(buf.getvalue())

* Sat 24 May 2014 03:17:47 AM JST
window, propergate=False, sequence_number=0
* Sat 24 May 2014 03:18:00 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xI', propergate, window))
        buf.write(self._mask)
        buf.write(self._code)
        buf.write('BH2I', self.format, sequence_number, window, self.stateatom)
        buf.write(self._unset)
        buf.write(self.atoms)
        return self._parent.request(buf.getvalue())

* Sat 24 May 2014 03:20:39 AM JST
FullScreen
* Sat 24 May 2014 03:21:45 AM JST
ClientMessage
* Sat 24 May 2014 03:23:16 AM JST

* Sat 24 May 2014 03:23:19 AM JST
buttonrelease
* Sat 24 May 2014 03:23:24 AM JST
clientmessage
* Sat 24 May 2014 03:23:27 AM JST
ButtonRelease
* Sat 24 May 2014 03:24:00 AM JST
c.core2.SendEvent.ClientMessage
* Sat 24 May 2014 03:24:46 AM JST
0xffffff
* Sat 24 May 2014 03:24:53 AM JST
EventCode.ClientMessage
* Sat 24 May 2014 03:26:01 AM JST
0xffffff
* Sat 24 May 2014 03:26:11 AM JST
EventCode.ClientMessage
* Sat 24 May 2014 03:33:09 AM JST
from array import array as _array
* Sat 24 May 2014 03:36:12 AM JST
49840649
* Sat 24 May 2014 03:36:49 AM JST
_pack
* Sat 24 May 2014 03:37:06 AM JST
        buf.write(
            _pack('BH2I', self.format, sequence_number, window, self.stateatom))

* Sat 24 May 2014 03:37:59 AM JST
, self.stateatom
* Sat 24 May 2014 03:42:47 AM JST
        buf.write(_pack('BHI', self.format, sequence_number, window))
        buf.write(self.stateatom)

* Sat 24 May 2014 03:47:09 AM JST
AtomName(self._connection,
                               self._net_wm_state).types.format
* Sat 24 May 2014 03:47:15 AM JST
                               
* Sat 24 May 2014 03:47:52 AM JST
format, 
* Sat 24 May 2014 03:47:53 AM JST
self.format, 
* Sat 24 May 2014 03:47:56 AM JST
        buf.write(self.format)
        buf.write(_pack('HI', sequence_number, window))

* Sat 24 May 2014 03:49:59 AM JST
self.format
* Sat 24 May 2014 03:51:58 AM JST
types.
* Sat 24 May 2014 03:52:10 AM JST

* Sat 24 May 2014 03:52:10 AM JST

* Sat 24 May 2014 03:52:10 AM JST
        print(_format)

* Sat 24 May 2014 03:52:22 AM JST

* Sat 24 May 2014 03:52:22 AM JST

* Sat 24 May 2014 03:52:22 AM JST
        print(self.format)

* Sat 24 May 2014 03:54:06 AM JST
49840649
* Sat 24 May 2014 03:57:54 AM JST
Fals
* Sat 24 May 2014 03:57:58 AM JST
False
* Sat 24 May 2014 03:58:09 AM JST
False
* Sat 24 May 2014 04:06:17 AM JST
buf.write(_pack('3I', 0, 0, 0))
* Sat 24 May 2014 04:09:21 AM JST
49840649
* Sat 24 May 2014 04:10:01 AM JST
buf.getvalue()
* Sat 24 May 2014 04:10:33 AM JST
'\x00\x00\x00\x00\t\x82\xf8\x02\xff\xff\xff\x00! \x00\x00\x00\x00\t\x82\xf8\x02(\x01\x00\x00\x01\x00\x00\x00+\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sat 24 May 2014 04:11:37 AM JST
buf.getvalue()
* Sat 24 May 2014 04:12:35 AM JST
49840649
* Sat 24 May 2014 04:12:40 AM JST
'\x00\x00\x00\x00\t\x82\xf8\x02\xff\xff\xff\x00! \x00\x00\t\x82\xf8\x02(\x01\x00\x00\x01\x00\x00\x00+\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sat 24 May 2014 04:17:28 AM JST
print(repr(buf.getvalue()))
* Sat 24 May 2014 04:18:56 AM JST
sequence_number
* Sat 24 May 2014 04:19:02 AM JST
sequence_number, 
* Sat 24 May 2014 04:19:05 AM JST

* Sat 24 May 2014 04:19:05 AM JST

* Sat 24 May 2014 04:19:05 AM JST
        print(repr(buf.getvalue()))

* Sat 24 May 2014 04:19:20 AM JST
'\x00\x00\x00\x00\t\x82\xf8\x02\xff\xff\xff\x00! \x00\x00\t\x82\xf8\x02(\x01\x00\x00\x01\x00\x00\x00+\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sat 24 May 2014 04:19:47 AM JST

* Sat 24 May 2014 04:19:47 AM JST

* Sat 24 May 2014 04:19:47 AM JST
        print(repr(buf.getvalue()))

* Sat 24 May 2014 04:19:54 AM JST
        buf.write(_pack('H', sequence_number))
        buf.write(_pack('I', window))

* Sat 24 May 2014 04:20:15 AM JST
set
* Sat 24 May 2014 04:26:41 AM JST
0
* Sat 24 May 2014 04:26:44 AM JST
False
* Sat 24 May 2014 05:57:34 AM JST
self.zerofill = _pack('I' * zerolen,* 
* Sat 24 May 2014 05:58:01 AM JST
pack('I' * zerolen, (0, ) * zerolen)
* Sat 24 May 2014 05:58:10 AM JST
zerolen
* Sat 24 May 2014 05:59:05 AM JST
        zerolen = 4 - len(atoms)
        self.zerofill = _pack('I' * zerolen, *((0, ) * zerolen))

* Sat 24 May 2014 05:59:24 AM JST
buf.write(self.zerofill)
* Sat 24 May 2014 06:02:20 AM JST
48234543
* Sat 24 May 2014 06:03:55 AM JST
'\x00\x00\x00\x00/\x00\xe0\x02\xff\xff\xff\x00! \x00\x00/\x00\xe0\x02(\x01\x00\x00\x01\x00\x00\x00+\x01\x00\x00'
* Sat 24 May 2014 06:05:37 AM JST
self.atoms
* Sat 24 May 2014 06:08:45 AM JST
48234543
* Sat 24 May 2014 06:09:11 AM JST
            
* Sat 24 May 2014 06:09:20 AM JST
internatom(True, len(self._net_wm_state), self._net_wm_state).reply().atom
* Sat 24 May 2014 06:09:24 AM JST

* Sat 24 May 2014 06:09:24 AM JST

* Sat 24 May 2014 06:09:24 AM JST
        stateatom = 

* Sat 24 May 2014 06:10:01 AM JST
AtomName(self._connection, self._net_wm_state).format
* Sat 24 May 2014 06:10:05 AM JST

* Sat 24 May 2014 06:10:05 AM JST

* Sat 24 May 2014 06:10:05 AM JST
        _format = 

* Sat 24 May 2014 06:11:20 AM JST
atoms
* Sat 24 May 2014 06:12:43 AM JST

* Sat 24 May 2014 06:12:43 AM JST

* Sat 24 May 2014 06:12:45 AM JST

* Sat 24 May 2014 06:12:48 AM JST

* Sat 24 May 2014 06:12:48 AM JST

* Sat 24 May 2014 06:12:48 AM JST
        print(atoms)

* Sat 24 May 2014 06:13:33 AM JST

* Sat 24 May 2014 06:13:33 AM JST

* Sat 24 May 2014 06:13:33 AM JST
        while atoms <= 4:

* Sat 24 May 2014 06:13:33 AM JST
        while atoms <= 4:

* Sat 24 May 2014 06:13:33 AM JST
        while atoms <= 4:
            atoms.append(0)

* Sat 24 May 2014 06:14:28 AM JST
48234543
* Sat 24 May 2014 06:14:35 AM JST
'\x00\x00\x00\x00/\x00\xe0\x02\xff\xff\xff\x00! \x00\x00/\x00\xe0\x02(\x01\x00\x00\x01\x00\x00\x00+\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sat 24 May 2014 06:15:14 AM JST

* Sat 24 May 2014 06:15:14 AM JST

* Sat 24 May 2014 06:15:15 AM JST
        print(atoms)

* Sat 24 May 2014 06:16:12 AM JST

* Sat 24 May 2014 06:16:12 AM JST

* Sat 24 May 2014 06:16:12 AM JST
        buf.

* Sat 24 May 2014 06:16:51 AM JST
atoms 
* Sat 24 May 2014 06:16:59 AM JST
atoms
* Sat 24 May 2014 06:17:01 AM JST

* Sat 24 May 2014 06:17:01 AM JST

* Sat 24 May 2014 06:17:02 AM JST
        print(repr(self.atoms))

* Sat 24 May 2014 06:17:02 AM JST
        print(repr(self.atoms))

* Sat 24 May 2014 06:17:02 AM JST
        print(repr(self.atoms))
        print(repr(buf.getvalue()))

* Sat 24 May 2014 06:17:05 AM JST
atoms
* Sat 24 May 2014 06:17:07 AM JST

* Sat 24 May 2014 06:17:07 AM JST

* Sat 24 May 2014 06:17:07 AM JST
        # buf.write(self.zerofill)

* Sat 24 May 2014 06:17:08 AM JST

* Sat 24 May 2014 06:17:08 AM JST

* Sat 24 May 2014 06:17:08 AM JST
        # buf.write(self.zerofill)

* Sat 24 May 2014 06:17:12 AM JST

* Sat 24 May 2014 06:17:12 AM JST

* Sat 24 May 2014 06:17:12 AM JST
        # buf.write(self.zerofill)

* Sat 24 May 2014 06:17:13 AM JST
atoms
* Sat 24 May 2014 06:17:24 AM JST
        self.format = _pack(
            'B', AtomName(self._connection, self._net_wm_state).format)

* Sat 24 May 2014 06:17:47 AM JST
        self.stateatom = _pack(
            'I', internatom(True, len(self._net_wm_state),
                            self._net_wm_state).reply().atom)

* Sat 24 May 2014 06:18:02 AM JST
state
* Sat 24 May 2014 06:18:09 AM JST
state
* Sat 24 May 2014 06:18:14 AM JST
state
* Sat 24 May 2014 06:18:18 AM JST
state
* Sat 24 May 2014 06:38:54 AM JST
_NET_WM_STATEAbstract
* Sat 24 May 2014 06:39:57 AM JST
_atomnames = ('_NET_WM_STATE_FULLSCREEN', )
* Sat 24 May 2014 06:40:18 AM JST
class Shade(_NET_WM_STATEAbstract):
    r"""SUMMARY
    """
    _atomnames = ('_NET_WM_STATE_SHADED', )


class Above(_NET_WM_STATEAbstract):
    r"""SUMMARY
    """
    _atomnames = ('_NET_WM_STATE_ABOVE', )


class Below(_NET_WM_STATEAbstract):
    r"""SUMMARY
    """
    _atomnames = ('_NET_WM_STATE_BELOW', )


class Hidden(_NET_WM_STATEAbstract):
    r"""SUMMARY
    """
    _atomnames = ('_NET_WM_STATE_HIDDEN', )


class Minimize(_NET_WM_STATEAbstract):
    r"""SUMMARY
    """
    _atomnames = ('_NET_WM_ACTION_MINIMIZE', )


class Maximize(_NET_WM_STATEAbstract):
    r"""SUMMARY
    """
    _atomnames = ('_NET_WM_STATE_MAXIMIZED_VERT', '_NET_WM_STATE_MAXIMIZED_HORZ')

* Sat 24 May 2014 06:58:10 AM JST
48234543
* Sat 24 May 2014 12:00:45 PM JST
    def __init__(self, parent):
        r"""SUMMARY

        __init__(parent)

        @Arguments:
        - `parent`:

        @Return:
        """
        CoreSubMethodAbstract.__init__(self, parent)
        internatom = InternAtom(self._connection)

* Sat 24 May 2014 12:01:07 PM JST
_net_wm_state = '_NET_WM_STATE'
* Sat 24 May 2014 12:01:17 PM JST
_net_wm_state
* Sat 24 May 2014 12:01:34 PM JST
'_NET_CLOSE_WINDOW'
* Sat 24 May 2014 12:01:42 PM JST
        self.format = _pack(
            'B', AtomName(self._connection, self._net_wm_state).format)

* Sat 24 May 2014 12:01:58 PM JST
_net_close_window
* Sat 24 May 2014 12:02:11 PM JST
        self.atom = _pack(
            'I', internatom(True, len(self._net_wm_state),
                            self._net_wm_state).reply().atom)

* Sat 24 May 2014 12:02:22 PM JST
_net_close_window
* Sat 24 May 2014 12:03:58 PM JST
from xcb.xproto import Time
* Sat 24 May 2014 12:04:43 PM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xI', propergate, window))
        buf.write(self._mask)
        buf.write(self._code)
        buf.write(self.format)
        buf.write(_pack('H', sequence_number))
        buf.write(_pack('I', window))
        buf.write(self.atom)
        buf.write(self._set)
        buf.write(self.data)
        return self._parent.request(buf.getvalue())

* Sat 24 May 2014 12:05:49 PM JST
    mask = 0xffffff
    code = EventCode.ClientMessage
    _mask = _pack('I', 0xffffff)
    _code = _pack('B', EventCode.ClientMessage)

* Sat 24 May 2014 12:06:07 PM JST

* Sat 24 May 2014 12:06:07 PM JST

* Sat 24 May 2014 12:06:07 PM JST
        buf.write(self._set)

* Sat 24 May 2014 12:06:08 PM JST
        buf.write(self._set)

* Sat 24 May 2014 12:06:08 PM JST
        buf.write(self._set)
        buf.write(self.data)

* Sat 24 May 2014 12:06:41 PM JST
_pack()
* Sat 24 May 2014 12:07:18 PM JST
CloseWindow
* Sat 24 May 2014 12:11:08 PM JST
71303171
* Sat 24 May 2014 12:11:17 PM JST
                                                                      
* Sat 24 May 2014 12:13:41 PM JST
internatom = InternAtom(self._connection)
* Sat 24 May 2014 12:14:14 PM JST
'WM_PROTOCOLS'
* Sat 24 May 2014 12:14:35 PM JST
    mask = 0xffffff
    code = EventCode.ClientMessage
    _mask = _pack('I', 0xffffff)
    _code = _pack('B', EventCode.ClientMessage)

* Sat 24 May 2014 12:14:57 PM JST
        self.format = _pack(
            'B', AtomName(self._connection, self._net_close_window).format)

        self.atom = _pack(
            'I', internatom(True, len(self._net_close_window),
                            self._net_close_window).reply().atom)

* Sat 24 May 2014 12:15:06 PM JST
wm_protocols
* Sat 24 May 2014 12:15:55 PM JST
atom = 'WM_DELETE_WINDOW'
* Sat 24 May 2014 12:16:06 PM JST
_atomname
* Sat 24 May 2014 12:16:19 PM JST
dataatom
* Sat 24 May 2014 12:16:29 PM JST
_pack(
            'I', internatom(True, len(self.wm_protocols),
                            self.wm_protocols).reply().atom)
* Sat 24 May 2014 12:16:33 PM JST
wm_protocols
* Sat 24 May 2014 12:16:38 PM JST
wm_protocols
* Sat 24 May 2014 12:17:02 PM JST
self.
* Sat 24 May 2014 12:17:40 PM JST
_currenttime = _pack('I', Time.CurrentTime)
* Sat 24 May 2014 12:17:50 PM JST
_zerofill = _pack('4I', 0, 0, 0, 0)
* Sat 24 May 2014 12:19:04 PM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xI', propergate, window))
        buf.write(self._mask)
        buf.write(self._code)
        buf.write(self.format)
        buf.write(_pack('H', sequence_number))
        buf.write(_pack('I', window))
        buf.write(self.atom)
        if time:
            buf.write(_pack('I', time))
        else:
            buf.write(self._currenttime)
        buf.write(self._zerofill)
        return self._parent.request(buf.getvalue())

* Sat 24 May 2014 12:21:18 PM JST
DeleteWindow
* Sat 24 May 2014 12:22:19 PM JST
71303171
* Sat 24 May 2014 12:22:39 PM JST
close
* Sat 24 May 2014 12:44:28 PM JST
CoreSubMethodAbstract.__init__(self, parent)
* Sat 24 May 2014 12:44:33 PM JST
    mask = 0xffffff
    code = EventCode.ClientMessage
    _mask = _pack('I', 0xffffff)
    _code = _pack('B', EventCode.ClientMessage)

* Sat 24 May 2014 12:45:32 PM JST
ClientMessageAbstract
* Sat 24 May 2014 12:46:31 PM JST
    # KLUDGE: (Atami) [2014/05/23]
    # 0xffffff EventMask

* Sat 24 May 2014 12:46:44 PM JST
ClientMessageAbstract
* Sat 24 May 2014 12:47:17 PM JST
wm_protocols
* Sat 24 May 2014 12:47:47 PM JST
_net_close_window
* Sat 24 May 2014 12:47:57 PM JST
_net_wm_state
* Sat 24 May 2014 12:50:17 PM JST
AtomReplyTypes.get_types(self.name)
* Sat 24 May 2014 12:50:48 PM JST
from xcb2.xproto.atomtype import AtomReplyTypes
* Sat 24 May 2014 12:51:31 PM JST
AtomReplyTypes
* Sat 24 May 2014 12:51:39 PM JST
'WM_PROTOCOLS'
* Sat 24 May 2014 12:53:15 PM JST
self._atom = _pack(
* Sat 24 May 2014 12:53:22 PM JST
            
* Sat 24 May 2014 12:55:56 PM JST
_format = _pack('B', AtomReplyTypes.get_types('WM_PROTOCOLS').length)
* Sat 24 May 2014 12:56:08 PM JST
'_NET_CLOSE_WINDOW'
* Sat 24 May 2014 12:56:38 PM JST
            
* Sat 24 May 2014 12:57:37 PM JST
_format = _pack('B', AtomReplyTypes.get_types('_NET_CLOSE_WINDOW').length)
* Sat 24 May 2014 12:57:47 PM JST
'_NET_WM_STATE'
* Sat 24 May 2014 12:57:54 PM JST

* Sat 24 May 2014 12:57:54 PM JST

* Sat 24 May 2014 12:57:54 PM JST
    _atomnames = ('', )

* Sat 24 May 2014 12:58:32 PM JST
            
* Sat 24 May 2014 01:03:22 PM JST

* Sat 24 May 2014 01:03:22 PM JST

* Sat 24 May 2014 01:03:22 PM JST
from xcb2.xproto.extensions.getatomname import AtomName

* Sat 24 May 2014 01:03:34 PM JST
class WindowStateMode(_IntEnum):
    r"""SUMMARY
    """
    Unset  = 0
    Set    = 1
    Toggle = 2



* Sat 24 May 2014 01:13:41 PM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xI', propagate, window))
        buf.write(self._mask)
        buf.write(self._code)
        buf.write(self._format)
        buf.write(_pack('H', sequence_number))
        buf.write(_pack('I', window))
        buf.write(self._atom)

* Sat 24 May 2014 01:21:35 PM JST
        internatom = InternAtom(self._connection)

        self._atom = _pack('I', internatom(True, len(self.atomname),
                                           self.atomname).reply().atom)


* Sat 24 May 2014 01:26:39 PM JST
            
* Sat 24 May 2014 01:26:41 PM JST
                 
* Sat 24 May 2014 01:34:15 PM JST
buf = self._get_head_buf(window, propagate, sequence_number)
* Sat 24 May 2014 01:35:03 PM JST
CoreSubMethodAbstract
* Sat 24 May 2014 01:44:15 PM JST
    # KLUDGE: (Atami) [2014/05/23]
    # 0xffffff EventMask
    mask = 0xffffff
    code = EventCode.ClientMessage
    _mask = _pack('I', 0xffffff)
    _code = _pack('B', EventCode.ClientMessage)

* Sat 24 May 2014 01:45:22 PM JST
c.core2.SendEvent.ClientMessage.fullscreen
* Sat 24 May 2014 01:45:52 PM JST
48321483
* Sat 24 May 2014 01:48:58 PM JST
48321483
* Sat 24 May 2014 01:49:40 PM JST
'\x00\x00\x00\x00\xcbS\xe1\x02\xff\xff\xff\x00! \x00\x00\xcbS\xe1\x02(\x01\x00\x00\x01\x00\x00\x00\\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sat 24 May 2014 01:54:34 PM JST

* Sat 24 May 2014 01:54:35 PM JST

* Sat 24 May 2014 01:54:35 PM JST
        print(repr(buf.getvalue()))

* Sat 24 May 2014 02:01:30 PM JST
fullscreen
* Sat 24 May 2014 02:02:02 PM JST
self._data
* Sat 24 May 2014 02:03:16 PM JST
atoms
* Sat 24 May 2014 02:04:17 PM JST
_dataatomnames = ('', )
* Sat 24 May 2014 02:04:27 PM JST
_dataatomnames
* Sat 24 May 2014 02:04:49 PM JST
    
* Sat 24 May 2014 02:05:07 PM JST

* Sat 24 May 2014 02:05:07 PM JST

* Sat 24 May 2014 02:05:07 PM JST
        print(repr(self._data))

* Sat 24 May 2014 02:05:07 PM JST
        print(repr(self._data))

* Sat 24 May 2014 02:05:07 PM JST
        print(repr(self._data))
        print(repr(buf.getvalue()))

* Sat 24 May 2014 02:05:12 PM JST

* Sat 24 May 2014 02:05:12 PM JST

* Sat 24 May 2014 02:05:12 PM JST
        print(atoms)

* Sat 24 May 2014 02:05:43 PM JST
c.core.ClientMessage.fullscreen.set()
* Sat 24 May 2014 02:06:06 PM JST
48321483
* Sat 24 May 2014 02:08:19 PM JST

* Sat 24 May 2014 02:08:19 PM JST

* Sat 24 May 2014 02:08:19 PM JST
        buf.write(self._atom)

* Sat 24 May 2014 04:09:54 PM JST
from SimpleHTTPServer import SimpleHTTPRequestHandler
* Sat 24 May 2014 04:10:00 PM JST
import BaseHTTPServer
* Sat 24 May 2014 04:13:41 PM JST
def reciped():
    r"""SUMMARY

    reciped()

    @Return:
    """
    from SimpleHTTPServer import SimpleHTTPRequestHandler
    import BaseHTTPServer
    from ref import recipe
    os.chdir(Recipe().basedir)
    server_class = BaseHTTPServer.HTTPServer
    httpd = server_class(('', 8000), SimpleHTTPRequestHandler)
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass


* Sat 24 May 2014 04:13:46 PM JST

* Sat 24 May 2014 04:13:46 PM JST

* Sat 24 May 2014 04:13:46 PM JST
    from SimpleHTTPServer import SimpleHTTPRequestHandler

* Sat 24 May 2014 04:13:48 PM JST

* Sat 24 May 2014 04:13:48 PM JST

* Sat 24 May 2014 04:13:48 PM JST
    import BaseHTTPServer

* Sat 24 May 2014 04:13:57 PM JST

* Sat 24 May 2014 04:13:57 PM JST

* Sat 24 May 2014 04:13:57 PM JST
    from ref import recipe

* Sat 24 May 2014 04:14:28 PM JST

* Sat 24 May 2014 04:14:28 PM JST

* Sat 24 May 2014 04:14:28 PM JST
import os

* Sat 24 May 2014 04:14:28 PM JST
import os

* Sat 24 May 2014 04:14:28 PM JST
import os
import sys

* Sat 24 May 2014 04:14:32 PM JST
import logging
from logging.handlers import RotatingFileHandler

* Sat 24 May 2014 04:14:39 PM JST
 as _os
* Sat 24 May 2014 04:14:40 PM JST
 as _sys
* Sat 24 May 2014 04:15:22 PM JST

* Sat 24 May 2014 04:15:22 PM JST

* Sat 24 May 2014 04:15:22 PM JST
from ref import recipe

* Sat 24 May 2014 04:15:42 PM JST
ServerHandler
* Sat 24 May 2014 04:18:42 PM JST
http://georgik.sinusgear.com/2011/01/07/how-to-dump-post-request-with-python/
* Sat 24 May 2014 04:20:07 PM JST
import sys
import os
from SimpleHTTPServer import SimpleHTTPRequestHandler
import BaseHTTPServer
from ref.recipe import Recipe

import logging
from logging.handlers import RotatingFileHandler


# for debug
import cgitb as _cgitb
_cgitb.enable(format='text')


__revision__ = '$Revision$'
__version__ = '0.1.0'


###############################################################################
# output log file
LOGNAME = 'reciped.log'
LOGDIR = '/var/log'
LOGPATH = os.path.join(LOGDIR, LOGNAME)
_RH = RotatingFileHandler(LOGPATH, 'a', 1024*50, 3)
_RH.setLevel(logging.INFO)
_RH.setFormatter(logging.Formatter(
    '%(asctime)s;%(name)s;%(module)s %(funcName)s(%(lineno)d);%(levelname)s;'
    '\n   %(message)s'))

# console
_CH = logging.StreamHandler()
_CH.setLevel(logging.ERROR)

LOG = logging.getLogger('reciped')
LOG.setLevel(logging.INFO)
LOG.addHandler(_RH)
LOG.addHandler(_CH)

# exception
def logging_handle_exceptions(excls, value, trcbck):
    r"""Handling exception hook.

    sys.excepthook = logging_handle_exceptions
    """
    import traceback
    if issubclass(excls, KeyboardInterrupt):
        sys.__excepthook__(excls, value, trcbck)
        return
    errortype = 'Error type: {}'.format(excls)
    valuetxt = 'Uncaught exception: {0}'.format(str(value))
    trcbcktxt = ''.join(traceback.format_tb(trcbck))
    LOG.exception('\n'.join([errortype, valuetxt, trcbcktxt]))

sys.excepthook = logging_handle_exceptions
###############################################################################


class ServerHandler(SimpleHTTPRequestHandler):
    r"""SUMMARY
    """

    def do_GET(self, ):
        r"""SUMMARY

        do_GET()

        @Return:
        """
        LOG.info(self.headers)
        SimpleHTTPRequestHandler.do_GET(self)


def reciped():
    r"""SUMMARY

    reciped()

    @Return:
    """
    os.chdir(Recipe().basedir)
    server_class = BaseHTTPServer.HTTPServer
    httpd = server_class(('', 8001), ServerHandler)
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass

* Sat 24 May 2014 04:20:54 PM JST

* Sat 24 May 2014 04:20:54 PM JST

* Sat 24 May 2014 04:20:54 PM JST
iargmport os

* Sat 24 May 2014 04:23:31 PM JST
if __name__ == '__main__':
    _sys.exit(reciped())

* Sun 25 May 2014 12:13:22 AM JST
from xcb2.xproto.extensions.sendevent.abstract import EventAbstract
* Sun 25 May 2014 12:13:39 AM JST
from xcb.xproto import EventMask
from xcb2.xproto.extensions.sendevent.eventcode import EventCode

* Sun 25 May 2014 12:13:49 AM JST
from struct import pack as _pack
* Sun 25 May 2014 12:15:41 AM JST
ButtonMotion
* Sun 25 May 2014 12:17:22 AM JST
ButtonMotion
* Sun 25 May 2014 12:21:26 AM JST
EventCode.MotionNotify
* Sun 25 May 2014 12:21:58 AM JST
class ButtonMotion(EventAbstract):
    r"""SUMMARY
    """
    mask = EventMask.ButtonMotion
    code = EventCode.MotionNotify

    _mask = _pack('I', EventMask.ButtonMotion)
    _code = _pack('B', EventCode.MotionNotify)

* Sun 25 May 2014 12:22:40 AM JST
class Button1Motion(EventAbstract):
    r"""SUMMARY
    """
    mask = EventMask.Button1Motion
    code = EventCode.MotionNotify

    _mask = _pack('I', EventMask.Button1Motion)
    _code = _pack('B', EventCode.MotionNotify)

* Sun 25 May 2014 12:22:49 AM JST
$1
* Sun 25 May 2014 12:33:27 AM JST
from xcb2.xproto.extensions.abstract import CoreSubMethodAbstract
* Sun 25 May 2014 12:36:04 AM JST
'=xB2xII'
* Sun 25 May 2014 12:37:08 AM JST
'2BH4I5HBx'
* Sun 25 May 2014 12:37:35 AM JST
code = EventCode.MotionNotify
* Sun 25 May 2014 12:37:40 AM JST
_code = _pack('B', EventCode.MotionNotify)
* Sun 25 May 2014 12:37:59 AM JST
code
* Sun 25 May 2014 12:37:59 AM JST
self.code
* Sun 25 May 2014 12:38:17 AM JST
root, window, child,
                        root_x, root_y, event_x, event_y, state, samescreen
* Sun 25 May 2014 12:38:21 AM JST
     
* Sun 25 May 2014 12:38:41 AM JST
self.
* Sun 25 May 2014 12:47:09 AM JST
        
* Sun 25 May 2014 12:47:22 AM JST

* Sun 25 May 2014 12:47:29 AM JST

* Sun 25 May 2014 12:47:35 AM JST

* Sun 25 May 2014 12:47:55 AM JST
MotionNotify
* Sun 25 May 2014 12:48:26 AM JST
from xcb2.x import 
* Sun 25 May 2014 12:48:32 AM JST
clientmessage
* Sun 25 May 2014 12:48:42 AM JST

* Sun 25 May 2014 12:48:43 AM JST
MotionNotify
* Sun 25 May 2014 12:50:36 AM JST
propagate, destination, event_mask, detail,
                   sequence_number, time, root, window, child, root_x, root_y,
                   event_x, event_y, state, samescreen
* Sun 25 May 2014 12:51:21 AM JST
propagate, destination, event_mask, detail,
                   sequence_number, time, root, window, child, root_x, root_y,
                   event_x, event_y, state, samescreen
* Sun 25 May 2014 12:51:25 AM JST
                   
* Sun 25 May 2014 12:51:26 AM JST
             
* Sun 25 May 2014 12:51:38 AM JST
            
* Sun 25 May 2014 12:53:14 AM JST
MotionNotify
* Sun 25 May 2014 02:06:34 AM JST
from xcb2.xproto.wcookie import WrapGetGeometryCookie
* Sun 25 May 2014 02:06:41 AM JST
WrapGetGeometryCookie
* Sun 25 May 2014 06:04:43 AM JST
from xcb2.xproto import NamedButtonIndex, EventMask, GrabMode
* Sun 25 May 2014 06:05:33 AM JST
EventMask.ButtonPress
* Sun 25 May 2014 06:07:40 AM JST
GrabMode.Async
* Sun 25 May 2014 06:11:04 AM JST
CoreSubMethodAbstract
* Sun 25 May 2014 06:21:59 AM JST
Button
* Sun 25 May 2014 06:23:07 AM JST
window
* Sun 25 May 2014 06:23:34 AM JST
pointer_mode
* Sun 25 May 2014 06:29:19 AM JST
buf = _StringIO()
* Sun 25 May 2014 06:31:49 AM JST
NamedButtonIndex.Left
* Sun 25 May 2014 06:34:09 AM JST
from xcb2.xproto import NamedButtonIndex, EventMask, GrabMode
* Sun 25 May 2014 06:34:14 AM JST
GrabMode
* Sun 25 May 2014 06:44:18 AM JST
    def press(self, owner_events, grab_window, confine_to, cursor, modifiers,
              pointer_mode=None, keyboard_mode=None):
        r"""SUMMARY

        press(owner_events, grab_window, confine_to, cursor, modifier,
        pointer_mode=None, keyboard_mode)

        @Arguments:
        - `owner_events`:
        - `grab_window`:
        - `confine_to`:
        - `cursor`:
        - `modifier`:
        - `pointer_mode`:
        - `keyboard_mode`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('=xB2xI', owner_events, grab_window))
        buf.write(self._press)
        if pointer_mode:
            buf.write(_pack('B', pointer_mode))
        else:
            buf.write(self._async)
        if keyboard_mode:
            buf.write(_pack('B', keyboard_mode))
        else:
            buf.write(self._async)
        buf.write(_pack('I', confine_to))
        buf.write(_pack('I', cursor))
        buf.write(self._button)
        buf.write(_pack('xH', modifiers))
        return self._parent.request(buf.getvalue())

* Sun 25 May 2014 06:44:35 AM JST
    def press(self, owner_events, grab_window, confine_to, cursor, modifiers,
              pointer_mode=None, keyboard_mode=None):
        r"""SUMMARY

        press(owner_events, grab_window, confine_to, cursor, modifier,
        pointer_mode=None, keyboard_mode)

        @Arguments:
        - `owner_events`:
        - `grab_window`:
        - `confine_to`:
        - `cursor`:
        - `modifier`:
        - `pointer_mode`:
        - `keyboard_mode`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('=xB2xI', owner_events, grab_window))
        buf.write(self._press)
        if pointer_mode:
            buf.write(_pack('B', pointer_mode))
        else:
            buf.write(self._async)
        if keyboard_mode:
            buf.write(_pack('B', keyboard_mode))
        else:
            buf.write(self._async)
        buf.write(_pack('I', confine_to))
        buf.write(_pack('I', cursor))
        buf.write(self._button)
        buf.write(_pack('xH', modifiers))
        return self._parent.request(buf.getvalue())

* Sun 25 May 2014 06:44:41 AM JST
press
* Sun 25 May 2014 07:03:33 AM JST
    def release(self, owner_events, grab_window, confine_to, cursor, modifiers,
                pointer_mode=None, keyboard_mode=None):
        r"""SUMMARY

        press(owner_events, grab_window, confine_to, cursor, modifier,
        pointer_mode=None, keyboard_mode)

        @Arguments:
        - `owner_events`:
        - `grab_window`:
        - `confine_to`:
        - `cursor`:
        - `modifier`:
        - `pointer_mode`:
        - `keyboard_mode`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack('=xB2xI', owner_events, grab_window))
        buf.write(self._release)
        if pointer_mode:
            buf.write(_pack('B', pointer_mode))
        else:
            buf.write(self._async)
        if keyboard_mode:
            buf.write(_pack('B', keyboard_mode))
        else:
            buf.write(self._async)
        buf.write(_pack('I', confine_to))
        buf.write(_pack('I', cursor))
        buf.write(self._button)
        buf.write(_pack('xH', modifiers))
        return self._parent.request(buf.getvalue())

* Sun 25 May 2014 07:03:41 AM JST
release
* Sun 25 May 2014 07:03:58 AM JST
                
* Sun 25 May 2014 07:04:44 AM JST
event_mask
* Sun 25 May 2014 07:04:47 AM JST

* Sun 25 May 2014 07:04:47 AM JST

* Sun 25 May 2014 07:04:47 AM JST
        buf.write(_pack('H', event_mask))

* Sun 25 May 2014 07:05:00 AM JST
cursor
* Sun 25 May 2014 07:05:02 AM JST

* Sun 25 May 2014 07:05:02 AM JST

* Sun 25 May 2014 07:05:02 AM JST
        buf.write(_pack('I', cursor))

* Sun 25 May 2014 07:05:07 AM JST
buf.write(_pack('II', confine_to, cursor))
* Sun 25 May 2014 07:06:18 AM JST
class GrabButtonRight(ButtonAbstract):
    r"""SUMMARY
    """
    
    _button = _pack('H', NamedButtonIndex.Right)



* Sun 25 May 2014 07:06:29 AM JST
Right
* Sun 25 May 2014 07:06:43 AM JST
class GrabButtonMiddle(ButtonAbstract):
    r"""SUMMARY
    """
    
    _button = _pack('H', NamedButtonIndex.Middle)



* Sun 25 May 2014 07:06:53 AM JST
Middle
* Sun 25 May 2014 07:07:15 AM JST
class GrabButtonWheelUp(ButtonAbstract):
    r"""SUMMARY
    """
    
    _button = _pack('H', NamedButtonIndex.WheelUp)



* Sun 25 May 2014 07:08:41 AM JST

* Sun 25 May 2014 07:08:43 AM JST
Left
* Sun 25 May 2014 07:08:51 AM JST
        
* Sun 25 May 2014 07:08:52 AM JST
Right
* Sun 25 May 2014 07:09:00 AM JST

* Sun 25 May 2014 07:09:02 AM JST
Middle
* Sun 25 May 2014 07:09:13 AM JST
        
* Sun 25 May 2014 07:16:55 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, owner_events, grab_window, time, pointer_mode,
                keyboard_mode))
        return buf.getvalue()

* Sun 25 May 2014 07:17:25 AM JST
    _async = _pack('B', GrabMode.Async)
    _sync = _pack('B', GrabMode.Sync)

* Sun 25 May 2014 07:17:35 AM JST
from xcb2.xproto import NamedButtonIndex, EventMask, GrabMode
* Sun 25 May 2014 07:17:40 AM JST
EventMask, 
* Sun 25 May 2014 07:17:40 AM JST
NamedButtonIndex, EventMask, 
* Sun 25 May 2014 07:17:40 AM JST
import NamedButtonIndex, EventMask, 
* Sun 25 May 2014 07:17:53 AM JST
'=xB2xIIBB2x'
* Sun 25 May 2014 07:18:04 AM JST
fmt
* Sun 25 May 2014 07:18:04 AM JST
self.fmt
* Sun 25 May 2014 07:18:22 AM JST
keyboard_mode
* Sun 25 May 2014 07:18:24 AM JST
pointer_mode,
* Sun 25 May 2014 07:18:41 AM JST
        
* Sun 25 May 2014 07:19:05 AM JST
        return self.request(
            self._getbinary(
                owner_events, grab_window, time, pointer_mode, keyboard_mode))

* Sun 25 May 2014 07:19:44 AM JST

* Sun 25 May 2014 07:19:44 AM JST

* Sun 25 May 2014 07:19:44 AM JST
        '=xB2xIIBB2x'

* Sun 25 May 2014 07:20:54 AM JST
from xcb2.xproto import GrabMode
* Sun 25 May 2014 07:21:32 AM JST
'=xB2xIHBBB3x'
* Sun 25 May 2014 07:22:02 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xII', owner_events, grab_window, time))

* Sun 25 May 2014 07:22:11 AM JST
    _async = _pack('B', GrabMode.Async)
    _sync = _pack('B', GrabMode.Sync)

* Sun 25 May 2014 07:22:22 AM JST
time
* Sun 25 May 2014 07:23:27 AM JST
        
* Sun 25 May 2014 07:23:36 AM JST
pointer
* Sun 25 May 2014 07:23:43 AM JST
buf.
* Sun 25 May 2014 07:24:06 AM JST
        return self.request(buf.getvalue())
* Sun 25 May 2014 07:25:43 AM JST
from xcb2.xproto.wcookie import WrapListPropertyCookie
* Sun 25 May 2014 07:25:51 AM JST
WrapListPropertyCookie
* Sun 25 May 2014 07:28:06 AM JST
from xcb2.xproto.wcookie import WrapQueryTreeCookie
* Sun 25 May 2014 07:28:24 AM JST
QueryTreeCookie
* Sun 25 May 2014 07:44:04 AM JST
from xcb2.window import Window
* Sun 25 May 2014 07:45:56 AM JST
WrapQueryTreeCookie
* Sun 25 May 2014 07:45:59 AM JST
from xcb2.xproto.wcookie import WrapQueryTreeCookie
* Sun 25 May 2014 07:46:07 AM JST
WrapQueryTreeCookie
* Sun 25 May 2014 08:16:19 AM JST

* Sun 25 May 2014 08:32:16 AM JST
        
* Sun 25 May 2014 08:32:18 AM JST
QueryFontUnchecked
* Sun 25 May 2014 08:32:28 AM JST
QueryFontUnchecked
* Sun 25 May 2014 08:32:33 AM JST
        
* Sun 25 May 2014 08:33:04 AM JST
QueryKeymapUnchecked
* Sun 25 May 2014 08:33:07 AM JST
        
* Sun 25 May 2014 08:34:37 AM JST
        
* Sun 25 May 2014 08:34:47 AM JST
SetScreenSaverChecked
* Sun 25 May 2014 08:38:35 AM JST
buf.write(str(buffer(_array('b', name))))
* Sun 25 May 2014 09:13:26 AM JST
QueryTrue
* Sun 25 May 2014 09:15:36 AM JST
eventmask
* Sun 25 May 2014 09:18:46 AM JST
net_wm_state
* Sun 25 May 2014 09:18:49 AM JST
net_wm_state
* Sun 25 May 2014 09:18:55 AM JST
net_wm_state
* Sun 25 May 2014 09:19:00 AM JST
net_wm_state
* Sun 25 May 2014 09:20:50 AM JST
atoms
* Sun 25 May 2014 09:20:51 AM JST
self.atoms
* Sun 25 May 2014 09:21:00 AM JST
atoms
* Sun 25 May 2014 09:21:00 AM JST
self.atoms
* Sun 25 May 2014 09:21:15 AM JST
net_wm_state
* Sun 25 May 2014 09:21:45 AM JST
net_wm_state
* Sun 25 May 2014 09:21:50 AM JST
net_wm_state
* Sun 25 May 2014 09:21:55 AM JST
net_wm_state
* Sun 25 May 2014 09:22:30 AM JST
stackmode
* Sun 25 May 2014 09:24:27 AM JST
ConfigWindowMaskValues
* Sun 25 May 2014 09:25:03 AM JST
ConfigWindowMaskValues
* Sun 25 May 2014 09:25:08 AM JST
ConfigWindowMaskValues
* Sun 25 May 2014 09:26:28 AM JST
set_stackmode
* Sun 25 May 2014 09:26:47 AM JST
StackMode.Above
* Sun 25 May 2014 09:26:55 AM JST
from xcb2.xproto.define import StackMode
* Sun 25 May 2014 09:28:24 AM JST
get_maskvalues
* Sun 25 May 2014 06:12:10 PM JST
from xcb2.xproto.define import StackMode
* Sun 25 May 2014 06:12:46 PM JST
set_stackmode
* Sun 25 May 2014 06:13:49 PM JST
        mvalues = ConfigWindowMaskValues()
        mvalues.set_stackmode(StackMode.Above)
        return self.core.ConfigureWindow(self, *mvalues.get_maskvalues())

* Sun 25 May 2014 06:13:54 PM JST
Above
* Sun 25 May 2014 06:14:04 PM JST
net_close_window
* Sun 25 May 2014 06:14:06 PM JST
                
* Sun 25 May 2014 06:14:24 PM JST
                
* Sun 25 May 2014 06:14:39 PM JST
net_wm_state
* Sun 25 May 2014 06:14:49 PM JST
                
* Sun 25 May 2014 06:14:54 PM JST
net_wm_state.
* Sun 25 May 2014 06:15:03 PM JST
net_wm_state
* Sun 25 May 2014 06:15:05 PM JST
                
* Sun 25 May 2014 06:15:12 PM JST
net_wm_state.
* Sun 25 May 2014 06:15:13 PM JST
                
* Sun 25 May 2014 06:15:19 PM JST
                
* Sun 25 May 2014 06:15:25 PM JST
net_wm_state.
* Sun 25 May 2014 06:15:31 PM JST
net_wm_state.
* Sun 25 May 2014 06:15:32 PM JST
                
* Sun 25 May 2014 06:15:41 PM JST
net_wm_state
* Sun 25 May 2014 06:15:47 PM JST
net_wm_state
* Sun 25 May 2014 06:15:51 PM JST
net_wm_state
* Sun 25 May 2014 06:15:55 PM JST
net_wm_state.
* Sun 25 May 2014 06:16:00 PM JST
net_wm_state.
* Sun 25 May 2014 06:16:03 PM JST
net_wm_state.
* Mon 26 May 2014 01:24:54 AM JST
wm_protocols.
* Mon 26 May 2014 01:26:33 AM JST
maximize
* Mon 26 May 2014 01:27:16 AM JST
import xcb2
c=xcb2.connect()

* Mon 26 May 2014 01:28:03 AM JST
import xcb2
c=xcb2.connect()

* Mon 26 May 2014 01:33:16 AM JST
self.core.SendEvent.ClientMessage.maximize.atoms
* Mon 26 May 2014 01:33:19 AM JST

* Mon 26 May 2014 01:33:19 AM JST

* Mon 26 May 2014 01:33:19 AM JST
        atoms = 

* Mon 26 May 2014 01:33:23 AM JST
self.core.SendEvent.ClientMessage.shade.atoms
* Mon 26 May 2014 01:33:27 AM JST

* Mon 26 May 2014 01:33:27 AM JST

* Mon 26 May 2014 01:33:27 AM JST
        atoms = 

* Mon 26 May 2014 01:33:30 AM JST
self.core.SendEvent.ClientMessage.fullscreen.atoms
* Mon 26 May 2014 01:33:34 AM JST

* Mon 26 May 2014 01:33:34 AM JST

* Mon 26 May 2014 01:33:34 AM JST
        atoms = 

* Mon 26 May 2014 01:33:39 AM JST
self.core.SendEvent.ClientMessage.below.atoms
* Mon 26 May 2014 01:33:41 AM JST

* Mon 26 May 2014 01:33:42 AM JST

* Mon 26 May 2014 01:33:42 AM JST
        atoms = 

* Mon 26 May 2014 01:33:46 AM JST
self.core.SendEvent.ClientMessage.above.atoms
* Mon 26 May 2014 01:33:50 AM JST

* Mon 26 May 2014 01:33:51 AM JST

* Mon 26 May 2014 01:33:51 AM JST
        atoms = 

* Mon 26 May 2014 01:42:07 AM JST

* Mon 26 May 2014 01:42:07 AM JST

* Mon 26 May 2014 01:42:07 AM JST
            cls = WINDOW_TYPES.get(str(gfi(types)), FundamentalWindow)

* Mon 26 May 2014 01:43:00 AM JST
str(gfi(types))
* Mon 26 May 2014 01:43:09 AM JST
WINDOW_TYPES
* Mon 26 May 2014 01:43:28 AM JST
str(gfi(types))
* Mon 26 May 2014 01:43:37 AM JST
typename
* Mon 26 May 2014 01:45:01 AM JST
core.
* Mon 26 May 2014 01:45:20 AM JST
c.get_setup().roots[0].root
* Mon 26 May 2014 01:45:56 AM JST
self.connection.get_setup().roots[0].root
* Mon 26 May 2014 01:46:42 AM JST

* Mon 26 May 2014 01:46:42 AM JST

* Mon 26 May 2014 01:46:42 AM JST
        cls = FundamentalWindow

* Mon 26 May 2014 01:53:27 AM JST
.core.GetProperty
* Mon 26 May 2014 01:53:41 AM JST
_NET_WM_WINDOW_TYPE
* Mon 26 May 2014 01:58:25 AM JST
self.connection
* Mon 26 May 2014 02:05:24 AM JST
import xcb2
c=xcb2.connect()

* Mon 26 May 2014 02:05:43 AM JST
self.
* Mon 26 May 2014 02:08:11 AM JST
value
* Mon 26 May 2014 02:56:11 AM JST

* Mon 26 May 2014 02:56:11 AM JST

* Mon 26 May 2014 02:56:11 AM JST
        # return reply

* Mon 26 May 2014 02:56:41 AM JST
core
* Mon 26 May 2014 04:28:29 AM JST
connection
* Mon 26 May 2014 04:28:35 AM JST
connection
* Mon 26 May 2014 04:29:16 AM JST
Connection
* Mon 26 May 2014 04:30:57 AM JST
class WrapGetPropertyCookie(object):
    r"""SUMMARY
    """

    def __init__(self, display, cookie):
        r"""

        @Arguments:
        - `core`:
        - `cookie`:
        - `window`:
        - `prop`:
        """
        self._display = display
        self._cookie = cookie

    @property
    def _connection(self, ):
        r"""SUMMARY

        _connection()

        @Return:
        """
        return Connection.get_instance(self._display)

    def check(self, ):
        r"""SUMMARY

        check()

        @Return:
        """
        return self._cookie.check()

    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:
        """
        types = AtomName(self._connection, self._cookie.atomname).types
        reply = self._cookie.reply()
        reply.window = self._cookie.window
        reply.property = self._cookie.property
        return types(self._connection, reply)



* Mon 26 May 2014 04:31:16 AM JST
connection
* Mon 26 May 2014 04:31:26 AM JST
    def __init__(self, display, cookie):
        r"""

        @Arguments:
        - `core`:
        - `cookie`:
        - `window`:
        - `prop`:
        """
        self._display = display
        self._cookie = cookie

    @property
    def _connection(self, ):
        r"""SUMMARY

        _connection()

        @Return:
        """
        return Connection.get_instance(self._display)


* Mon 26 May 2014 04:31:37 AM JST
from xcb2.xproto.xconnection import Connection
* Mon 26 May 2014 04:31:51 AM JST
WrapCookieAbstract
* Mon 26 May 2014 04:32:04 AM JST

* Mon 26 May 2014 04:32:04 AM JST

* Mon 26 May 2014 04:32:04 AM JST
from xcb2.xproto.xconnection import Connection

* Mon 26 May 2014 04:32:05 AM JST

* Mon 26 May 2014 04:32:05 AM JST

* Mon 26 May 2014 04:32:05 AM JST
from xcb2.xproto.xconnection import Connection

* Mon 26 May 2014 04:32:08 AM JST
from xcb2.xproto.extensions.getatomname import AtomName
* Mon 26 May 2014 04:34:49 AM JST
WrapInternAtomCookie
* Mon 26 May 2014 04:35:23 AM JST
WrapInternAtomCookie(
* Mon 26 May 2014 04:35:26 AM JST
display, 
* Mon 26 May 2014 04:35:27 AM JST
_connection.display, 
* Mon 26 May 2014 04:35:27 AM JST
self._connection.display, 
* Mon 26 May 2014 04:35:28 AM JST
            
* Mon 26 May 2014 04:35:52 AM JST
WrapInternAtomCookie(
* Mon 26 May 2014 04:35:53 AM JST
            
* Mon 26 May 2014 04:35:55 AM JST
display, 
* Mon 26 May 2014 04:35:56 AM JST
_connection.display, 
* Mon 26 May 2014 04:35:56 AM JST
self._connection.display, 
* Mon 26 May 2014 04:36:04 AM JST
                
* Mon 26 May 2014 04:36:21 AM JST
            
* Mon 26 May 2014 04:36:36 AM JST

* Mon 26 May 2014 04:36:36 AM JST

* Mon 26 May 2014 04:36:36 AM JST
from xcb2.abstract import ConnectionAbstract

* Mon 26 May 2014 04:36:45 AM JST

* Mon 26 May 2014 04:36:45 AM JST

* Mon 26 May 2014 04:36:45 AM JST
# from xcb2.xproto.wreply import WrapReplyAbstract

* Mon 26 May 2014 04:37:02 AM JST
class WrapInternAtomCookie(WrapCookieAbstract):
    r"""SUMMARY
    """

    def check(self, ):
        r"""SUMMARY

        check()

        @Return:
        """
        return self._cookie.check()

    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:
        """
        return WrapInternAtomReply(self._connection, self._cookie.reply())



* Mon 26 May 2014 04:37:31 AM JST
wreply
* Mon 26 May 2014 04:38:23 AM JST
class WrapInternAtomCookie(WrapCookieAbstract):
    r"""SUMMARY
    """

    def check(self, ):
        r"""SUMMARY

        check()

        @Return:
        """
        return self._cookie.check()

    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:
        """
        return wreply.WrapInternAtomReply(self._connection, self._cookie.reply())



* Mon 26 May 2014 04:38:52 AM JST
class WrapInternAtomReply(WrapReplyAbstract):
    r"""SUMMARY
    """

    @property
    def atom(self, ):
        r"""SUMMARY

        atom()

        @Return:
        """
        return Atom(self.connection, self._raw.atom)



* Mon 26 May 2014 04:39:01 AM JST
wreply.
* Mon 26 May 2014 04:45:35 AM JST

* Mon 26 May 2014 04:45:35 AM JST

* Mon 26 May 2014 04:45:35 AM JST
from xcb2.xproto.xconnection import Connection

* Mon 26 May 2014 04:45:52 AM JST

* Mon 26 May 2014 04:45:52 AM JST

* Mon 26 May 2014 04:45:53 AM JST
from xcb2.xproto import wreply

* Mon 26 May 2014 07:29:15 AM JST
DummyMethod
* Mon 26 May 2014 07:31:08 AM JST

* Mon 26 May 2014 07:31:08 AM JST

* Mon 26 May 2014 07:31:08 AM JST
        self.rawconnection.display = self.display

* Mon 26 May 2014 07:31:24 AM JST
rawconnection
* Mon 26 May 2014 07:36:37 AM JST

* Mon 26 May 2014 07:36:37 AM JST

* Mon 26 May 2014 07:36:37 AM JST
from xcb2.abstract import ConnectionAbstract

* Mon 26 May 2014 07:45:41 AM JST

* Mon 26 May 2014 07:45:41 AM JST

* Mon 26 May 2014 07:45:41 AM JST
        self.root = self.get_setup().roots[0].root

* Mon 26 May 2014 07:46:00 AM JST
import xcb2
c=xcb2.connect()

* Mon 26 May 2014 07:46:45 AM JST

* Mon 26 May 2014 07:46:45 AM JST

* Mon 26 May 2014 07:46:45 AM JST
        print(connection)

* Mon 26 May 2014 07:46:49 AM JST

* Mon 26 May 2014 07:46:49 AM JST

* Mon 26 May 2014 07:46:49 AM JST
        # self.display = connection.display

* Mon 26 May 2014 07:46:58 AM JST
import xcb2
c=xcb2.connect()

* Mon 26 May 2014 07:47:21 AM JST
core.
* Mon 26 May 2014 10:33:51 AM JST
self.request(
                self._getbinary(only_if_exists, name_len, name))
* Mon 26 May 2014 10:33:56 AM JST
                
* Mon 26 May 2014 10:34:11 AM JST
            
* Mon 26 May 2014 10:34:48 AM JST
from xcb2.xproto.wcookie import WrapInternAtomCookie
* Tue 27 May 2014 03:47:28 AM JST
from xcb2.xproto.atom import GlobalCacheAtoms
from xcb2.xproto.wcookie import WrapInternAtomCookie

* Tue 27 May 2014 03:47:34 AM JST

* Tue 27 May 2014 03:47:34 AM JST

* Tue 27 May 2014 03:47:34 AM JST
from xcb2.xproto.wcookie import WrapCookieAbstract

* Tue 27 May 2014 03:49:03 AM JST
CoreSubMethodAbstract
* Tue 27 May 2014 03:50:21 AM JST
xproto
* Tue 27 May 2014 03:52:13 AM JST
    def _addcache(self, atom):
        r"""SUMMARY

        _addcache(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        GlobalCacheAtoms.add(atom, self._connection.display)

* Tue 27 May 2014 03:57:41 AM JST
only_
* Tue 27 May 2014 04:00:18 AM JST
atompair
* Tue 27 May 2014 04:00:51 AM JST
buf = _StringIO()
* Tue 27 May 2014 04:01:01 AM JST
_pack
* Tue 27 May 2014 04:01:39 AM JST
buf.write(str(buffer(_array('b', name))))
* Tue 27 May 2014 04:01:45 AM JST
return buf.getvalue()
* Tue 27 May 2014 05:06:23 AM JST
CoreMethodAbstract
* Tue 27 May 2014 05:07:43 AM JST
Atom', 
* Tue 27 May 2014 05:08:32 AM JST
'WM_NAME'
* Tue 27 May 2014 05:08:57 AM JST

* Tue 27 May 2014 05:08:57 AM JST

* Tue 27 May 2014 05:08:57 AM JST
        self._only_if_exists = _pack('=xB2x', True)

* Tue 27 May 2014 05:10:27 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 05:10:41 AM JST
'WM_NAME'
* Tue 27 May 2014 05:12:23 AM JST
usecache
* Tue 27 May 2014 05:12:33 AM JST
'WM_NAME'
* Tue 27 May 2014 05:13:22 AM JST
WrapInternAtomCookie(self._connection.display, cookie)
* Tue 27 May 2014 05:14:05 AM JST
self._parent.request(self._getbinary(name))
* Tue 27 May 2014 05:15:00 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 05:15:18 AM JST
'WM_NAME'
* Tue 27 May 2014 05:16:15 AM JST
binary
* Tue 27 May 2014 05:16:21 AM JST
self._getbinary(name)
* Tue 27 May 2014 05:17:27 AM JST
c.core.InternAtom.usecache('WM_NAME')
* Tue 27 May 2014 05:17:37 AM JST
import xcb2
c=xcb2.connect()
c.core.InternAtom.usecache('WM_NAME')
* Tue 27 May 2014 05:33:26 AM JST
AtomName', 
* Tue 27 May 2014 05:33:46 AM JST
from xcb2.xproto.wcookie import WrapGetAtomNameCookie
* Tue 27 May 2014 05:33:52 AM JST
from xcb2.xproto.atom import GlobalCacheAtoms
* Tue 27 May 2014 05:40:03 AM JST
WrapGetAtomNameCookie
* Tue 27 May 2014 05:41:42 AM JST
display
* Tue 27 May 2014 05:52:13 AM JST
from xcb2.xproto.atom import GlobalCacheAtoms
* Tue 27 May 2014 05:52:20 AM JST
GlobalCacheAtoms
* Tue 27 May 2014 05:52:26 AM JST

* Tue 27 May 2014 05:52:26 AM JST

* Tue 27 May 2014 05:52:26 AM JST
from xcb2.xproto.extensions.getatomname import AtomName

* Tue 27 May 2014 05:53:13 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 05:53:22 AM JST
usec
* Tue 27 May 2014 05:53:22 AM JST
InternAtom.usec
* Tue 27 May 2014 05:54:02 AM JST
    def _getcache(self, name):
        r"""SUMMARY

        _getcache(name)

        @Arguments:
        - `name`:

        @Return:
        """
        return GlobalCacheAtoms.getatom(name, self._connection.display)

* Tue 27 May 2014 05:54:09 AM JST
name
* Tue 27 May 2014 05:54:14 AM JST
name
* Tue 27 May 2014 05:54:39 AM JST
    def _addcache(self, atom):
        r"""SUMMARY

        _addcache(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        GlobalCacheAtoms.add(atom, self._connection.display)


* Tue 27 May 2014 05:56:25 AM JST
        buf = _StringIO()
        buf.write(_pack(self.fmt, atom))
        return buf.getvalue()

* Tue 27 May 2014 05:56:32 AM JST
'=xx2xI'
* Tue 27 May 2014 05:58:13 AM JST
    def _addcache(self, atom):
        r"""SUMMARY

        _addcache(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        GlobalCacheAtoms.add(atom, self._connection.display)

* Tue 27 May 2014 05:58:58 AM JST
atom
* Tue 27 May 2014 05:59:24 AM JST
atom
* Tue 27 May 2014 05:59:25 AM JST
atom
* Tue 27 May 2014 05:59:27 AM JST
atom
* Tue 27 May 2014 06:02:50 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 06:36:52 AM JST
get_full_value()
* Tue 27 May 2014 06:37:02 AM JST
name
* Tue 27 May 2014 06:37:15 AM JST
type
* Tue 27 May 2014 06:37:24 AM JST
typ
* Tue 27 May 2014 06:37:24 AM JST
types.typ
* Tue 27 May 2014 06:38:08 AM JST
name
* Tue 27 May 2014 06:38:09 AM JST
types.name
* Tue 27 May 2014 06:38:21 AM JST
type(
* Tue 27 May 2014 07:02:26 AM JST
a=c.core.GetAtomName.usecache(5)
* Tue 27 May 2014 07:02:48 AM JST
GetAtomName
* Tue 27 May 2014 07:19:12 AM JST

* Tue 27 May 2014 07:19:12 AM JST

* Tue 27 May 2014 07:19:12 AM JST
        self._atom = _StringIO()

* Tue 27 May 2014 07:19:13 AM JST
        self._atom = _StringIO()

* Tue 27 May 2014 07:19:13 AM JST
        self._atom = _StringIO()
        self._types = _StringIO()

* Tue 27 May 2014 07:19:19 AM JST
write(
* Tue 27 May 2014 07:19:24 AM JST
write(
* Tue 27 May 2014 07:19:29 AM JST
getvalue()
* Tue 27 May 2014 07:19:31 AM JST
getvalue()
* Tue 27 May 2014 07:19:49 AM JST
Inter
* Tue 27 May 2014 07:20:18 AM JST
self._connection.core.InternAtom.usecache(self.atomname)
* Tue 27 May 2014 07:20:38 AM JST
self.atom
* Tue 27 May 2014 07:20:51 AM JST
self._connection.core.InternAtom.usecache(self.atomname)
* Tue 27 May 2014 07:21:02 AM JST
self.atom.types.name
* Tue 27 May 2014 07:21:07 AM JST

* Tue 27 May 2014 07:21:07 AM JST

* Tue 27 May 2014 07:21:07 AM JST
        types = 

* Tue 27 May 2014 07:21:51 AM JST
atomname
* Tue 27 May 2014 07:22:12 AM JST
c.core.GetProperty.WM_NAME()
* Tue 27 May 2014 07:22:41 AM JST
AtomIdentifier
* Tue 27 May 2014 07:23:57 AM JST
core.
* Tue 27 May 2014 07:23:59 AM JST
connection
* Tue 27 May 2014 07:24:00 AM JST
c.connection
* Tue 27 May 2014 07:24:32 AM JST

* Tue 27 May 2014 07:24:33 AM JST

* Tue 27 May 2014 07:24:33 AM JST
        print(self.connection)

* Tue 27 May 2014 07:26:49 AM JST
atom
* Tue 27 May 2014 07:27:48 AM JST
get_typesatom
* Tue 27 May 2014 07:28:31 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 07:29:16 AM JST
c.core.GetProperty.WM_NAME()
* Tue 27 May 2014 07:29:19 AM JST
c.core.GetProperty.WM_NAME()
* Tue 27 May 2014 07:29:32 AM JST
c.core.GetProperty.WM_NAME()
* Tue 27 May 2014 07:30:20 AM JST

* Tue 27 May 2014 07:30:20 AM JST

* Tue 27 May 2014 07:30:21 AM JST
        # self.types = self._connection.core.InternAtom.usecache(

* Tue 27 May 2014 07:30:21 AM JST
        # self.types = self._connection.core.InternAtom.usecache(

* Tue 27 May 2014 07:30:21 AM JST
        # self.types = self._connection.core.InternAtom.usecache(
            # self.atom.types.name)

* Tue 27 May 2014 07:32:45 AM JST
str(buffer(_array('b', name)))
* Tue 27 May 2014 07:34:05 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 07:34:23 AM JST
c.core.GetProperty.WM_NAME()
* Tue 27 May 2014 07:37:27 AM JST
import xcb2
c=xcb2.connect()
c.core.InternAtom.usecache('WM_NAME')

* Tue 27 May 2014 07:37:29 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 07:38:17 AM JST
atom
* Tue 27 May 2014 07:38:37 AM JST
atom
* Tue 27 May 2014 07:38:56 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 07:38:59 AM JST
c.core.GetProperty.WM_NAME()
* Tue 27 May 2014 07:39:46 AM JST

* Tue 27 May 2014 07:39:46 AM JST

* Tue 27 May 2014 07:39:46 AM JST
from xcb2.xproto.extensions.internatom import InternAtom

* Tue 27 May 2014 07:42:52 AM JST
atomname
* Tue 27 May 2014 07:43:05 AM JST

* Tue 27 May 2014 07:43:05 AM JST

* Tue 27 May 2014 07:43:05 AM JST
        cookie.atomname = self.atomname

* Tue 27 May 2014 07:43:14 AM JST

* Tue 27 May 2014 07:43:14 AM JST

* Tue 27 May 2014 07:43:14 AM JST
        types = AtomName(self._connection, self._cookie.atomname).types

* Tue 27 May 2014 07:43:18 AM JST
self._cookie.property
* Tue 27 May 2014 07:44:50 AM JST
reply.property
* Tue 27 May 2014 07:44:55 AM JST
self._cookie.property
* Tue 27 May 2014 07:44:58 AM JST

* Tue 27 May 2014 07:44:58 AM JST

* Tue 27 May 2014 07:44:58 AM JST
         = 

* Tue 27 May 2014 07:46:31 AM JST
WindowNormalType(window=Window(id=56623126))
* Tue 27 May 2014 07:47:49 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 07:48:00 AM JST
WindowNormalType(window=56623126)
* Tue 27 May 2014 07:48:25 AM JST
usecach
* Tue 27 May 2014 07:58:04 AM JST

* Tue 27 May 2014 07:58:04 AM JST

* Tue 27 May 2014 07:58:04 AM JST
        self._internatom = InternAtom(self._connection)

* Tue 27 May 2014 07:59:34 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 08:01:10 AM JST
self._dataatom
* Tue 27 May 2014 08:02:30 AM JST
self._connection.core.InternAtom.usecache(x)
* Tue 27 May 2014 08:03:59 AM JST

* Tue 27 May 2014 08:03:59 AM JST

* Tue 27 May 2014 08:04:00 AM JST
        # self._atom = _pack('I', self._internatom(True, len(self.atomname),

* Tue 27 May 2014 08:04:00 AM JST
        # self._atom = _pack('I', self._internatom(True, len(self.atomname),

* Tue 27 May 2014 08:04:00 AM JST
        # self._atom = _pack('I', self._internatom(True, len(self.atomname),
                                                 # self.atomname).reply().atom)

* Tue 27 May 2014 08:04:02 AM JST

* Tue 27 May 2014 08:04:02 AM JST

* Tue 27 May 2014 08:04:02 AM JST
from xcb2.xproto.extensions.internatom import InternAtom

* Tue 27 May 2014 08:04:07 AM JST

* Tue 27 May 2014 08:04:07 AM JST

* Tue 27 May 2014 08:04:07 AM JST
        # self._dataatom = _pack('I', self._internatom(

* Tue 27 May 2014 08:04:07 AM JST
        # self._dataatom = _pack('I', self._internatom(

* Tue 27 May 2014 08:04:07 AM JST
        # self._dataatom = _pack('I', self._internatom(
            # True, len(self._dataatomname), self._dataatomname).reply().atom)

* Tue 27 May 2014 08:29:47 AM JST
name
* Tue 27 May 2014 08:31:16 AM JST
client_list
* Tue 27 May 2014 08:33:34 AM JST
self.connection
* Tue 27 May 2014 08:33:59 AM JST

* Tue 27 May 2014 08:33:59 AM JST

* Tue 27 May 2014 08:33:59 AM JST
        print(self.connection)

* Tue 27 May 2014 08:36:22 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 08:39:57 AM JST
connection
* Tue 27 May 2014 08:40:29 AM JST
get_geometry()
* Tue 27 May 2014 08:43:40 AM JST
self.connection
* Tue 27 May 2014 08:45:03 AM JST

* Tue 27 May 2014 08:45:03 AM JST

* Tue 27 May 2014 08:45:03 AM JST
        print(self.connection)

* Tue 27 May 2014 08:47:15 AM JST
display
* Tue 27 May 2014 08:47:41 AM JST
display
* Tue 27 May 2014 08:47:55 AM JST
display
* Tue 27 May 2014 08:48:17 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 09:01:10 AM JST
self.bytes_after / 4 + 1
* Tue 27 May 2014 09:02:09 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 09:04:32 AM JST
WrapGetPropertyCookie(self._connection, cookie)
* Tue 27 May 2014 09:07:56 AM JST
atom = self._connection.core.InternAtom.usecache(atom)
* Tue 27 May 2014 09:09:53 AM JST
=xB2x
* Tue 27 May 2014 09:10:12 AM JST
buf = _StringIO()
* Tue 27 May 2014 09:12:09 AM JST
atom, 
* Tue 27 May 2014 09:12:18 AM JST
type
* Tue 27 May 2014 09:12:24 AM JST
atom
* Tue 27 May 2014 09:15:05 AM JST
usecache
* Tue 27 May 2014 09:15:06 AM JST
InternAtom.usecache
* Tue 27 May 2014 09:15:42 AM JST
GetPropertyMethod
* Tue 27 May 2014 09:16:21 AM JST
False,
* Tue 27 May 2014 09:16:40 AM JST
delete
* Tue 27 May 2014 09:18:10 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 09:20:18 AM JST
cookie.window, cookie.property = window, self.atom
* Tue 27 May 2014 09:20:41 AM JST
self.
* Tue 27 May 2014 09:25:09 AM JST
WEATHER_LIST
* Tue 27 May 2014 09:25:49 AM JST
print 
* Tue 27 May 2014 09:26:02 AM JST
weathermap.WEATHER_LIST[0].name
* Tue 27 May 2014 09:26:14 AM JST
chrome=
* Tue 27 May 2014 09:26:28 AM JST
weathermap.WEATHER_LIST[0].name
* Tue 27 May 2014 09:30:09 AM JST
name
* Tue 27 May 2014 09:31:34 AM JST
50137438
* Tue 27 May 2014 09:34:10 AM JST
False, 
* Tue 27 May 2014 09:34:11 AM JST
delete=False, 
* Tue 27 May 2014 09:34:50 AM JST
WEATHER_LIST
* Tue 27 May 2014 10:32:45 AM JST
anything-candidate-number-limit
* Tue 27 May 2014 10:35:49 AM JST
anything-candidate-number-limit
* Tue 27 May 2014 10:36:44 AM JST
default 
* Tue 27 May 2014 10:37:17 AM JST
set
* Tue 27 May 2014 10:41:13 AM JST

* Tue 27 May 2014 10:41:13 AM JST

* Tue 27 May 2014 10:41:13 AM JST
from xcb2.xproto import ext

* Tue 27 May 2014 10:42:16 AM JST

* Tue 27 May 2014 10:42:16 AM JST

* Tue 27 May 2014 10:42:16 AM JST
        # self.core = WrapCore(self)

* Tue 27 May 2014 10:42:16 AM JST
        # self.core = WrapCore(self)

* Tue 27 May 2014 10:42:16 AM JST
        # self.core = WrapCore(self)
        # self.core2 = WrapCore2(self.rawconnection)

* Tue 27 May 2014 10:42:26 AM JST
WrapCore2
* Tue 27 May 2014 10:44:01 AM JST
name
* Tue 27 May 2014 11:32:45 AM JST
class Atom(ConnectionAbstract):
    r"""Internal use.
    """
    fmt = 'I'

    def __init__(self, connection, atom):
        r"""

        @Arguments:
        - `num`:
        - `name`:
        """
        ConnectionAbstract.__init__(self, connection)
        self.atom = atom

    def getname(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return self.connection.core.GetAtomName(self.atom)

    def getname_unchecked(self, ):
        r"""SUMMARY

        get_atom_name()

        @Return:
        """
        return self.connection.core.GetAtomNameUnchecked(self.atom)

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return _pack(self.fmt, self.atom)

    def __int__(self, ):
        return self.atom

    def __long__(self, ):
        return self.atom.__long__()

    def __hash__(self, ):
        return hash(self.atom)

    def __repr__(self, ):
        return repr(self.atom)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.atom, other.atom)
        return cmp(self.atom, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.atom == other.atom
        return self.atom == other

    def __ne__(self, other):
        return not (self == other)



* Tue 27 May 2014 11:32:53 AM JST
from xcb2.abstract import ConnectionAbstract
* Tue 27 May 2014 11:33:18 AM JST
from struct import pack as _pack
* Tue 27 May 2014 11:34:13 AM JST
class AtomName(ConnectionAbstract):
    r"""Internal use.
    """
    fmt = 'b'

    def __init__(self, connection, name):
        r"""

        @Arguments:
        - `connection`:
        - `name`:
        """
        ConnectionAbstract.__init__(self, connection)
        self.name = name

    def intern_atom(self, only_if_exists=True):
        r"""SUMMARY

        intern_atom()

        @Return:
        """
        return self.connection.core.InternAtom(
            only_if_exists, len(self), self.name)

    def intern_atom_unchecked(self, only_if_exists=True):
        r"""SUMMARY

        intern_atom_unchecked()

        @Return:
        """
        return self.connection.core.InternAtomUnchecked(
            only_if_exists, len(self), self.name)

    def get_typesatom(self, ):
        r"""SUMMARY

        get_typesatom()

        @Return:
        """
        return self.connection.core.InternAtom.usecache(self.types.name)

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return str(buffer(_array('b', self.name)))

    @property
    def length(self, ):
        r"""SUMMARY

        name_length()

        @Return:
        """
        return len(self)

    @property
    def types(self, ):
        r"""SUMMARY

        types()

        @Return:
        """
        return AtomReplyTypes.get_types(self.name)

    @property
    def format(self, ):
        r"""SUMMARY

        format()

        @Return:
        """
        return self.types.length

    def __iter__(self):
        for i in range(0, len(self)):
            yield self.name[i]
        raise StopIteration()

    def __str__(self, ):
        return self.name

    def __hash__(self, ):
        return hash(self.name)

    def __len__(self, ):
        return len(self.name)

    def __repr__(self, ):
        return repr(self.name)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.name, other.name)
        return cmp(self.name, other)

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.name == other.name
        return self.name == other

    def __ne__(self, other):
        return not (self == other)



* Tue 27 May 2014 11:34:23 AM JST
from xcb2.abstract import ConnectionAbstract
* Tue 27 May 2014 11:34:38 AM JST
from array import array as _array
* Tue 27 May 2014 11:34:47 AM JST
from xcb2.xproto.atomtype import AtomReplyTypes
* Tue 27 May 2014 11:35:39 AM JST
from struct import unpack as _unpack
from abc import ABCMeta, abstractmethod

from t1.listutil import make_list_append
from xcb2.window import Window, WindowList


class WrapGetPropertyReply(object):
    r"""SUMMARY
    """
    __metaclass__ = ABCMeta

    def __init__(self, connection, reply):
        r"""

        @Arguments:
        - `connection`:
        - `reply`:
        - `window`:
        - `property_`:
        """
        self.connection = connection
        self._reply = reply

    @abstractmethod
    def get_value(self, ):
        r"""SUMMARY

        get_value()

        @Return:
        """
        raise StandardError()

    @property
    def bytes_after(self, ):
        r"""SUMMARY

        bytes_after()

        @Return:
        """
        return self._reply.bytes_after

    @property
    def format(self, ):
        r"""SUMMARY

        format()

        @Return:
        """
        return self._reply.format

    @property
    def type(self, ):
        r"""SUMMARY

        type()

        @Return:
        """
        return self.connection.core.InternAtom.usecache(
            self._reply.type).reply()

    @property
    def value(self, ):
        r"""SUMMARY

        value()

        @Return:
        """
        return list(self._reply.value)

    @property
    def value_buf(self, ):
        r"""SUMMARY

        value_buf()

        @Return:
        """
        return self._reply.value.buf()

    @property
    def value_len(self, ):
        r"""SUMMARY

        value_len()

        @Return:
        """
        return self._reply.value_len

    def get_offset(self, ):
        r"""SUMMARY

        get_offset()

        @Return:
        """
        return self._reply.value_len / 4

    def get_bytes_after(self, ):
        r"""SUMMARY

        get_after_value()

        @Return:
        """
        if self.bytes_after == 0:
            return None
        return self.connection.core.GetProperty.getproperty(
            self._reply.property, self._reply.window, self.get_offset(),
            self.bytes_after / 4 + 1 # length
            ).reply()

    def get_full_value(self, ):
        r"""SUMMARY

        get_full_value()

        @Return:
        """
        value = self.get_value()
        after = self.get_bytes_after()
        if after is not None:
            value += after.get_value()
        return value


class AtomType0Reply(WrapGetPropertyReply):
    r"""SUMMARY
    """
    length = 0

    def get_value(self, ):
        r"""SUMMARY

        get_value()

        @Return:
        """
        return self.value_buf


class AtomType8Reply(WrapGetPropertyReply):
    r"""SUMMARY
    """
    length = 8

    def get_value(self, ):
        r"""SUMMARY

        get_value()

        @Return:
        """
        return str(self.value_buf)


class AtomType32Reply(WrapGetPropertyReply):
    r"""SUMMARY
    """
    length = 32

    def get_offset(self, ):
        r"""SUMMARY

        get_offset()

        @Return:
        """
        return self._reply.value_len

    def get_value(self, ):
        r"""SUMMARY

        get_value()

        @Return:
        """
        return list(_unpack('I' * self.value_len, self.value_buf))


class AtomTypeSTRINGReply(AtomType8Reply):
    r"""SUMMARY
    """
    name = 'STRING'


class AtomTypeUTF8STRINGReply(AtomType8Reply):
    r"""SUMMARY
    """
    name = 'UTF8_STRING'


class AtomTypeUTF8STRINGLISTReply(AtomType8Reply):
    r"""SUMMARY
    """
    name = 'UTF8_STRING[]'

    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        result, append = make_list_append()
        chr_ = ''
        for ord_ in self.value:
            if not ord_:
                append(chr_)
                chr_ = ''
            else:
                chr_ += chr(ord_)
        return result


class AtomTypeWINDOWReply(AtomType32Reply):
    r"""SUMMARY
    """
    name = 'WINDOW'

    def get_value(self, ):
        r"""SUMMARY

        get_value()

        @Return:
        """
        values = _unpack('I' * self.value_len, self.value_buf)
        return WindowList([Window(self.connection, x) for x in values])


class AtomTypeATOMReply(AtomType32Reply):
    r"""SUMMARY
    """
    name = 'ATOM'

    def get_value(self, ):
        r"""SUMMARY

        get_result()

        @Return:
        """
        values = _unpack('I' * self.value_len, self.value_buf)
        return [self.connection.core.atomidentify(x) for x in values]


class AtomTypeCARDINALReply(AtomType32Reply):
    r"""SUMMARY
    """
    name = 'CARDINAL'


class AtomTypeANYReply(AtomType32Reply):
    r"""SUMMARY
    """
    name = 'ANY'


class AtomTypeNONEReply(AtomType32Reply):
    r"""SUMMARY
    """
    name = ''

    def get_value(self, ):
        r"""SUMMARY

        get_value()

        @Return:
        """
        raise NotImplementedError()


BUILTIN_ATOMS = {
    'WM_NAME'             : AtomTypeSTRINGReply,
    'WM_LOCALE_NAME'      : AtomTypeSTRINGReply,
    # 'WM_HINTS'            : ('', ),
    'WM_ICON_NAME'        : AtomTypeSTRINGReply,
    'WM_CLASS'            : AtomTypeSTRINGReply,
    'WM_TRANSIENT_FOR'    : AtomTypeWINDOWReply,
    'WM_PROTOCOLS'        : AtomTypeATOMReply,
    'WM_COLORMAP_WINDOWS' : AtomTypeWINDOWReply,
    'WM_CLIENT_MACHINE'   : AtomTypeSTRINGReply,
    # 'WM_NORMAL_HINTS': ('WM_SIZE_HINTS', ),
    }

BASE_ATOMS = {
    'WM_STATE'                   : AtomTypeCARDINALReply,

    '_WIN_WORKSPACE'             : AtomTypeCARDINALReply,
    '_WIN_STATE'                 : AtomTypeCARDINALReply,
    '_NET_SUPPORTED'             : AtomTypeATOMReply,
    '_NET_CLIENT_LIST'           : AtomTypeWINDOWReply,
    '_NET_CLIENT_LIST_STACKING'  : AtomTypeWINDOWReply,
    '_NET_NUMBER_OF_DESKTOPS'    : AtomTypeCARDINALReply,
    '_NET_DESKTOP_GEOMETRY'      : AtomTypeCARDINALReply,
    '_NET_DESKTOP_VIEWPORT'      : AtomTypeCARDINALReply,
    '_NET_CURRENT_DESKTOP'       : AtomTypeCARDINALReply,
    '_NET_DESKTOP_NAMES'         : AtomTypeUTF8STRINGLISTReply,
    '_NET_ACTIVE_WINDOW'         : AtomTypeWINDOWReply,
    '_NET_WORKAREA'              : AtomTypeCARDINALReply,
    '_NET_SUPPORTING_WM_CHECK'   : AtomTypeWINDOWReply,
    '_NET_VIRTUAL_ROOTS'         : AtomTypeWINDOWReply,
    '_NET_DESKTOP_LAYOUT'        : AtomTypeCARDINALReply,
    '_NET_SHOWING_DESKTOP'       : AtomTypeCARDINALReply,

    '_NET_CLOSE_WINDOW'          : AtomTypeNONEReply,
    '_NET_MOVERESIZE_WINDOW'     : AtomTypeNONEReply,
    '_NET_WM_MORERESIZE'         : AtomTypeNONEReply,
    '_NET_RESTACK_WINDOW'        : AtomTypeNONEReply,
    '_NET_REQUEST_FRAME_EXTENTS' : AtomTypeCARDINALReply,

    '_NET_WM_NAME'               : AtomTypeUTF8STRINGReply,
    '_NET_WM_VISIBLE_NAME'       : AtomTypeUTF8STRINGReply,
    '_NET_WM_ICON_NAME'          : AtomTypeUTF8STRINGReply,
    '_NET_WM_VISIBLE_ICON_NAME'  : AtomTypeUTF8STRINGReply,
    '_NET_WM_DESKTOP'            : AtomTypeCARDINALReply,
    '_NET_WM_WINDOW_TYPE'        : AtomTypeATOMReply,
    '_NET_WM_STATE'              : AtomTypeATOMReply,
    '_NET_WM_ALLOWED_ACTIONS'    : AtomTypeATOMReply,
    '_NET_WM_STRUT'              : AtomTypeCARDINALReply,
    '_NET_WM_STRUT_PARTIAL'      : AtomTypeCARDINALReply,
    '_NET_WM_ICON_GEOMETRY'      : AtomTypeCARDINALReply,
    '_NET_WM_ICON'               : AtomTypeCARDINALReply,
    '_NET_WM_PID'                : AtomTypeCARDINALReply,
    '_NET_WM_HANDLED_ICONS'      : AtomTypeCARDINALReply,
    '_NET_WM_USER_TIME'          : AtomTypeCARDINALReply,
    '_NET_WM_USER_TIME_WINDOW'   : AtomTypeCARDINALReply,
    '_NET_FRAME_EXTENTS'         : AtomTypeCARDINALReply,

    '_OB_APP_TYPE'               : AtomTypeUTF8STRINGReply,
    }

WINDOW_TYPES = {
    '_NET_WM_WINDOW_TYPE_DESKTOP'       : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_DOCK'          : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_TOOLBAR'       : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_MENU'          : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_UTILITY'       : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_SPLASH'        : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_DIALOG'        : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_DROPDOWN_MENU' : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_POPUP_MENU'    : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_TOOLTIP'       : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_NOTIFICATION'  : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_COMBO'         : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_DND'           : AtomTypeATOMReply,
    '_NET_WM_WINDOW_TYPE_NORMAL'        : AtomTypeATOMReply,
    }

WINDOW_STATES = {
    '_NET_WM_STATE_MODAL'             : AtomTypeATOMReply,
    '_NET_WM_STATE_STICKY'            : AtomTypeATOMReply,
    '_NET_WM_STATE_MAXIMIZED_VERT'    : AtomTypeATOMReply,
    '_NET_WM_STATE_MAXIMIZED_HORZ'    : AtomTypeATOMReply,
    '_NET_WM_STATE_SHADED'            : AtomTypeATOMReply,
    '_NET_WM_STATE_SKIP_TASKBAR'      : AtomTypeATOMReply,
    '_NET_WM_STATE_SKIP_PAGER'        : AtomTypeATOMReply,
    '_NET_WM_STATE_HIDDEN'            : AtomTypeATOMReply,
    '_NET_WM_STATE_FULLSCREEN'        : AtomTypeATOMReply,
    '_NET_WM_STATE_ABOVE'             : AtomTypeATOMReply,
    '_NET_WM_STATE_BELOW'             : AtomTypeATOMReply,
    '_NET_WM_STATE_DEMANDS_ATTENTION' : AtomTypeATOMReply,
    }

WINDOW_ALLOWED_ACTIONS = {
    '_NET_WM_ACTION_MOVE'           : AtomTypeATOMReply,
    '_NET_WM_ACTION_RESIZE'         : AtomTypeATOMReply,
    '_NET_WM_ACTION_MINIMIZE'       : AtomTypeATOMReply,
    '_NET_WM_ACTION_SHADE'          : AtomTypeATOMReply,
    '_NET_WM_ACTION_STICK'          : AtomTypeATOMReply,
    '_NET_WM_ACTION_MAXIMIZE_HORZ'  : AtomTypeATOMReply,
    '_NET_WM_ACTION_MAXIMIZE_VERT'  : AtomTypeATOMReply,
    '_NET_WM_ACTION_FULLSCREEN'     : AtomTypeATOMReply,
    '_NET_WM_ACTION_CHANGE_DESKTOP' : AtomTypeATOMReply,
    '_NET_WM_ACTION_CLOSE'          : AtomTypeATOMReply,
    '_NET_WM_ACTION_ABOVE'          : AtomTypeATOMReply,
    '_NET_WM_ACTION_BELOW'          : AtomTypeATOMReply,
    }


ATOMTYPES = {}
ATOMTYPES.update(BUILTIN_ATOMS)
ATOMTYPES.update(BASE_ATOMS)
ATOMTYPES.update(WINDOW_TYPES)
ATOMTYPES.update(WINDOW_STATES)
ATOMTYPES.update(WINDOW_ALLOWED_ACTIONS)


class AtomReplyTypes(object):
    r"""
    """
    atomtypes = ATOMTYPES

    @staticmethod
    def get_types(name):
        r"""SUMMARY

        get_types_length()

        @Return:
        """
        return AtomReplyTypes.atomtypes.get(str(name), AtomType32Reply)

    @staticmethod
    def get_name(name):
        r"""SUMMARY

        get_types(default=0)

        @Arguments:
        - `default`:

        @Return:
        """
        return AtomReplyTypes.atomtypes.get(str(name)).name

    @staticmethod
    def get_length(name):
        r"""SUMMARY

        get_length()

        @Return:
        """
        return AtomReplyTypes.atomtypes.get(str(name)).length



* Tue 27 May 2014 11:36:23 AM JST
xproto
* Tue 27 May 2014 11:37:07 AM JST
class AtomPair(object):
    r"""Information holder.
    """
    __slots__ = ('name', 'atom')

    def __init__(self, name, atom):
        r"""

        @Arguments:
        - `name`:
        - `atom`:
        """
        self.name = name
        self.atom = atom

    def name_length(self, ):
        r"""SUMMARY

        name_length()

        @Return:
        """
        return self.name.length

    @property
    def types(self, ):
        r"""SUMMARY

        types()

        @Return:
        """
        return self.name.types

    @property
    def format(self, ):
        r"""SUMMARY

        format()

        @Return:
        """
        return self.name.format

    def pack(self, ):
        r"""SUMMARY

        pack()

        @Return:
        """
        return self.atom.pack()

    def __repr__(self, ):
        fmt = "{0.__class__.__name__}(name='{0.name}', atom={0.atom})".format
        return fmt(self)

    def __cmp__(self, other):
        if isinstance(other, self.__class__):
            return cmp(self.atom, other.atom)
        if predicate.isstring(other):
            return cmp(self.name, other)
        if predicate.isint(other):
            return cmp(self.atom, other)
        return False

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.atom == other.atom
        if predicate.isint(other):
            return self.atom == other
        if predicate.isstring(other):
            return self.name == other
        return False

    def __ne__(self, other):
        return not (self == other)

    def __getitem__(self, key):
        return str(self)[key]

    def __str__(self, ):
        return str(self.name)

    def __int__(self, ):
        return int(self.atom)

    def __long__(self, ):
        return long(self.atom)

    def __len__(self, ):
        return len(str(self))

    def __hash__(self, ):
        return hash(self.atom)



* Tue 27 May 2014 11:37:17 AM JST
import predicate
* Tue 27 May 2014 11:38:31 AM JST
class CacheAtomPair(dict):
    r"""SUMMARY
    """

    def dual_add(self, atompair):
        r"""SUMMARY

        _dual_add(atompair)

        @Arguments:
        - `atompair`:

        @Return:
        """
        self[str(atompair)] = atompair
        self[int(atompair)] = atompair

    def __setitem__(self, key, value):
        r"""SUMMARY

        __setitem__(key, value)

        @Arguments:
        - `key`:
        - `value`:

        @Return:
        """
        if not isinstance(value, AtomPair):
            # TODO: (Atami) [2014/05/08]
            raise StandardError('type error')
        super(CacheAtomPair, self).__setitem__(key, value)


class DisplayCacheAtomPair(dict):
    r"""SUMMARY
    """
    _class = CacheAtomPair

    def get(self, display):
        r"""SUMMARY

        get(display)

        @Arguments:
        - `display`:

        @Return:
        """
        return self[display]

    def __getitem__(self, key):
        r"""SUMMARY

        __getitem__(key)()

        @Return:
        """
        if not key in self:
            self[key] = self._class()
        return super(DisplayCacheAtomPair, self).__getitem__(key)


class GlobalCacheAtoms(object):
    r"""SUMMARY
    """
    displaymap = DisplayCacheAtomPair()

    @staticmethod
    def getcaches(display=''):
        r"""SUMMARY

        get(display='')

        @Arguments:
        - `display`:

        @Return:
        """
        return GlobalCacheAtoms.displaymap.get(display)

    @staticmethod
    def getatom(cachekey, display=''):
        r"""SUMMARY

        getatom(cachekey)

        @Arguments:
        - `cachekey`:

        @Return:
        """
        return GlobalCacheAtoms.getcaches(display).get(cachekey, None)

    @staticmethod
    def add(atompair, display=''):
        r"""SUMMARY

        add(atompair, display='')

        @Arguments:
        - `atompair`:
        - `display`:

        @Return:
        """
        GlobalCacheAtoms.getcaches(display).dual_add(atompair)

    @staticmethod
    def iscached(cachekey, display=''):
        r"""SUMMARY

        iscached(cachekey)

        @Arguments:
        - `cachekey`:

        @Return:
        """
        if isinstance(cachekey, AtomPair):
            cachekey = int(cachekey)
        return cachekey in GlobalCacheAtoms.getcaches(display)

    @staticmethod
    def clearall():
        r"""SUMMARY

        clearall()

        @Return:
        """
        GlobalCacheAtoms.displaymap.clear()

    @staticmethod
    def clear(display=''):
        r"""SUMMARY

        clear(display='')

        @Arguments:
        - `display`:

        @Return:
        """
        GlobalCacheAtoms.getcaches(display).clear()


* Tue 27 May 2014 11:39:50 AM JST
class AtomIdentifier(ConnectionAbstract):
    r"""
    """

    # TODO: (Atami) [2014/02/17]
    # behave atom on 0

    def __init__(self, connection):
        r"""
        """
        ConnectionAbstract.__init__(self, connection)

    @dispatch.generic()
    def identify(self, atom):
        r"""Base generic method of 'identify_atom'"""

    @identify.when('isinstance(atom, AtomPair)')
    def _identify_AtomPair(self, atom):
        r"""SUMMARY

        identify_atom_AtomPair(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        return atom

    @identify.when('isinstance(atom, str)')
    def _identify_str(self, atom):
        r"""SUMMARY

        identify_atom_str(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        return self.connection.core.InternAtom.usecache(atom)

    @identify.when('isinstance(atom, int)')
    def _identify_int(self, atom):
        r"""SUMMARY

        identify_atom_int(atom)

        @Arguments:
        - `atom`:

        @Return:
        """
        return self.connection.core.GetAtomName.usecache(atom)

    def __call__(self, atom):
        return self.identify(atom)

* Tue 27 May 2014 11:40:13 AM JST
from xcb2.abstract import ConnectionAbstract
* Tue 27 May 2014 11:40:25 AM JST
from peak.rules import dispatch
* Tue 27 May 2014 11:42:29 AM JST
atomidentify
* Tue 27 May 2014 11:42:49 AM JST

* Tue 27 May 2014 11:42:51 AM JST
atomidentify
* Tue 27 May 2014 11:43:03 AM JST

* Tue 27 May 2014 11:43:04 AM JST
atomidentify
* Tue 27 May 2014 11:43:15 AM JST

* Tue 27 May 2014 11:43:17 AM JST
atomname
* Tue 27 May 2014 11:43:25 AM JST

* Tue 27 May 2014 11:43:27 AM JST
atomtypes
* Tue 27 May 2014 11:46:11 AM JST
import
* Tue 27 May 2014 11:47:03 AM JST
xproto.
* Tue 27 May 2014 11:47:23 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 11:47:27 AM JST
core.
* Tue 27 May 2014 11:48:56 AM JST
atomtype
* Tue 27 May 2014 11:48:56 AM JST
xproto.atomtype
* Tue 27 May 2014 11:50:39 AM JST
xproto
* Tue 27 May 2014 11:52:17 AM JST
from xcb2.atom.atompair import *
* Tue 27 May 2014 11:53:19 AM JST
xproto.
* Tue 27 May 2014 11:53:33 AM JST
                                        
* Tue 27 May 2014 11:54:18 AM JST
xproto.
* Tue 27 May 2014 11:54:28 AM JST
    
* Tue 27 May 2014 11:54:51 AM JST

* Tue 27 May 2014 11:54:51 AM JST

* Tue 27 May 2014 11:54:51 AM JST
from xcb2.atom import AtomName

* Tue 27 May 2014 11:55:16 AM JST
xproto.
* Tue 27 May 2014 11:55:23 AM JST
           
* Tue 27 May 2014 11:56:02 AM JST
CoreSubMethodAbstract
* Tue 27 May 2014 11:57:04 AM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 11:57:08 AM JST
core.
* Tue 27 May 2014 12:03:17 PM JST
aotm
* Tue 27 May 2014 12:03:27 PM JST
pack()
* Tue 27 May 2014 12:05:02 PM JST
self.request(self._getbinary(atom))
* Tue 27 May 2014 12:06:29 PM JST
.reply().name.name
* Tue 27 May 2014 12:08:14 PM JST
- [ ] test
* Tue 27 May 2014 12:08:49 PM JST

* Tue 27 May 2014 12:08:49 PM JST
  + 
* Tue 27 May 2014 12:08:49 PM JST
  + test

* Tue 27 May 2014 12:08:50 PM JST

* Tue 27 May 2014 12:08:50 PM JST

* Tue 27 May 2014 12:08:50 PM JST
  + [ ] test

* Tue 27 May 2014 12:09:07 PM JST
name
* Tue 27 May 2014 12:09:07 PM JST
name.name
* Tue 27 May 2014 12:09:08 PM JST
reply().name.name
* Tue 27 May 2014 12:09:08 PM JST
getname().reply().name.name
* Tue 27 May 2014 12:09:09 PM JST
atom.getname().reply().name.name
* Tue 27 May 2014 12:09:43 PM JST
.reply().atom.atom
* Tue 27 May 2014 12:10:50 PM JST
.reply().atom.atom
* Tue 27 May 2014 12:10:53 PM JST
.reply().atom.atom
* Tue 27 May 2014 12:11:11 PM JST
.reply().name.name
* Tue 27 May 2014 12:11:14 PM JST
.reply().name.name
* Tue 27 May 2014 12:13:42 PM JST
get_pid_list
* Tue 27 May 2014 12:14:21 PM JST
get_process_list
* Tue 27 May 2014 12:15:28 PM JST
3927
* Tue 27 May 2014 12:17:01 PM JST
3927
* Tue 27 May 2014 12:17:39 PM JST
gfi(reply.get_full_value())
* Tue 27 May 2014 12:18:53 PM JST
from t1.listutil import get_first_index as gfi
* Tue 27 May 2014 12:29:11 PM JST
D 
* Tue 27 May 2014 11:09:53 PM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 11:13:40 PM JST
width
* Tue 27 May 2014 11:14:16 PM JST
depth
* Tue 27 May 2014 11:14:32 PM JST
border_width
* Tue 27 May 2014 11:14:46 PM JST
    
* Tue 27 May 2014 11:15:12 PM JST
                
* Tue 27 May 2014 11:15:17 PM JST
                
* Tue 27 May 2014 11:15:35 PM JST
                
* Tue 27 May 2014 11:16:35 PM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 11:17:28 PM JST
import xcb2
c=xcb2.connect()

* Tue 27 May 2014 11:17:44 PM JST
w=c.root.get_active_window()
* Tue 27 May 2014 11:18:50 PM JST
import xcb2
c=xcb2.connect()
w=c.root.get_active_window()

* Tue 27 May 2014 11:19:02 PM JST
import xcb2
* Tue 27 May 2014 11:19:17 PM JST
c=xcb2.connect()
w=c.root.get_active_window()

* Tue 27 May 2014 11:33:14 PM JST
Width
* Tue 27 May 2014 11:33:44 PM JST
Height
* Wed 28 May 2014 12:17:58 AM JST
window
* Wed 28 May 2014 12:18:13 AM JST
window.
* Wed 28 May 2014 12:22:21 AM JST

* Wed 28 May 2014 12:22:21 AM JST

* Wed 28 May 2014 12:22:21 AM JST
        - [yas] elisp error!:

* Wed 28 May 2014 12:22:21 AM JST
        - [yas] elisp error!:

* Wed 28 May 2014 12:22:21 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 12:22:21 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 12:22:21 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 12:22:21 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 12:22:21 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 12:22:26 AM JST

* Wed 28 May 2014 12:22:26 AM JST

* Wed 28 May 2014 12:22:26 AM JST
        - [yas] elisp error!:

* Wed 28 May 2014 12:22:26 AM JST
        - [yas] elisp error!:

* Wed 28 May 2014 12:22:26 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 12:22:26 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 12:22:26 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 12:22:26 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 12:22:26 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 12:22:38 AM JST

* Wed 28 May 2014 12:22:38 AM JST

* Wed 28 May 2014 12:22:38 AM JST
        request(percent)

* Wed 28 May 2014 12:22:47 AM JST

* Wed 28 May 2014 12:22:47 AM JST

* Wed 28 May 2014 12:22:47 AM JST
        request(percent)

* Wed 28 May 2014 12:33:13 AM JST
This request rings the bell on the keyboard at a volume relative to the base volume for the
keyboard, if possible. Percent can range from −100 to 100 inclusive (or a Value error results).
The volume at which the bell is rung when percent is nonnegative is:
base − [(base * percent) / 100] + percent
When percent is negative, it is:
base + [(base * percent) / 100]
* Wed 28 May 2014 12:38:05 AM JST
This request rings the bell on the keyboard at
    a volume relative to the base volume for the keyboard, if possible.
    Percent can range from −100 to 100 inclusive (or a Value error results).
    The volume at which the bell is rung when percent is nonnegative is:
        base − [(base * percent) / 100] + percent
    When percent is negative, it is:
        base + [(base * percent) / 100]
* Wed 28 May 2014 12:39:35 AM JST
VoidCookie
* Wed 28 May 2014 12:44:10 AM JST
    
* Wed 28 May 2014 12:44:33 AM JST
import xcb2
c=xcb2.connect()

* Wed 28 May 2014 12:48:28 AM JST

* Wed 28 May 2014 12:48:28 AM JST

* Wed 28 May 2014 12:48:28 AM JST
    fmt = '=xb2b'

* Wed 28 May 2014 12:58:27 AM JST
import xcb2
c=xcb2.connect()

* Wed 28 May 2014 01:09:32 AM JST
        buf = _StringIO()
        buf.write(self._head)
        buf.write(_pack(self.fmt, percent))
        buf.write(self._tail)
        return buf.getvalue()

* Wed 28 May 2014 01:09:38 AM JST

* Wed 28 May 2014 01:09:38 AM JST

* Wed 28 May 2014 01:09:38 AM JST
        return buf.getvalue()

* Wed 28 May 2014 01:09:47 AM JST

* Wed 28 May 2014 01:09:47 AM JST

* Wed 28 May 2014 01:09:47 AM JST
        buf.write(self._head)

* Wed 28 May 2014 01:09:47 AM JST

* Wed 28 May 2014 01:09:47 AM JST

* Wed 28 May 2014 01:09:47 AM JST
        buf.write(self._tail)

* Wed 28 May 2014 01:10:19 AM JST
import xcb2
c=xcb2.connect()

* Wed 28 May 2014 01:11:47 AM JST
timeit c.core.Bell(2)
10000 loops, best of 3: 233 µs per loop

In [7]: timeit c.core.Bell.test(2)
1000 loops, best of 3: 873 µs per loop
* Wed 28 May 2014 01:12:04 AM JST
import xcb2
c=xcb2.connect()

* Wed 28 May 2014 01:12:14 AM JST
>
* Wed 28 May 2014 01:12:40 AM JST
    def test(self, percent):
        r"""SUMMARY

        test(parcent)

        @Arguments:
        - `parcent`:

        @Return:
        """
        buf = _StringIO()
        buf.write(_pack(self.formt, percent))
        return self.request(buf.getvalue())



* Wed 28 May 2014 01:13:42 AM JST

* Wed 28 May 2014 01:13:42 AM JST

* Wed 28 May 2014 01:13:42 AM JST
    formt = '=xb2x'

* Wed 28 May 2014 01:14:38 AM JST
parcen
* Wed 28 May 2014 01:15:39 AM JST
_getbi
* Wed 28 May 2014 01:15:39 AM JST
self._getbi
* Wed 28 May 2014 01:15:51 AM JST
import xcb2
c=xcb2.connect()

* Wed 28 May 2014 01:17:11 AM JST
from cStringIO import StringIO
* Wed 28 May 2014 01:18:36 AM JST
    def test2(self, percent):
        buf = ''
        buf += self._head
        buf += _pack(self.fmt, percent)
        buf += self._tail
        return self.request(buf)


* Wed 28 May 2014 01:18:48 AM JST
timeit c.core.Bell.test2(2)
10000 loops, best of 3: 240 µs per loop
* Wed 28 May 2014 01:18:55 AM JST
>>> 
* Wed 28 May 2014 01:53:37 AM JST

* Wed 28 May 2014 01:53:37 AM JST

* Wed 28 May 2014 01:53:37 AM JST
__all__ = [ ]

* Wed 28 May 2014 01:54:31 AM JST
from
* Wed 28 May 2014 01:55:25 AM JST
buf.getvalue()
* Wed 28 May 2014 01:56:23 AM JST
'\x00d\x00\x00'
* Wed 28 May 2014 01:57:23 AM JST
'\x00d\x00\x00'
* Wed 28 May 2014 01:58:06 AM JST
'\x00d\x00\x00'
* Wed 28 May 2014 01:58:11 AM JST
100
* Wed 28 May 2014 02:03:36 AM JST

* Wed 28 May 2014 02:03:36 AM JST

* Wed 28 May 2014 02:03:36 AM JST
        value = 100

* Wed 28 May 2014 02:06:06 AM JST
type(
* Wed 28 May 2014 02:06:49 AM JST
        self.assertIsInstance(self.connection.core.Bell(self.value),
                              VoidCookie,
                              msg='Failed: Bell({0}) not return {1}'
                              .format(self.value, VoidCookie.__class__.__name__))

* Wed 28 May 2014 02:06:58 AM JST
result = '\x00d\x00\x00'
* Wed 28 May 2014 02:07:41 AM JST
value
* Wed 28 May 2014 02:07:45 AM JST
re
* Wed 28 May 2014 02:07:46 AM JST
self.re
* Wed 28 May 2014 02:07:54 AM JST
result
* Wed 28 May 2014 02:07:57 AM JST
result
* Wed 28 May 2014 02:08:01 AM JST
result
* Wed 28 May 2014 02:08:05 AM JST
result
* Wed 28 May 2014 02:08:13 AM JST
value
* Wed 28 May 2014 02:08:34 AM JST
    def test_request(self, ):
        r"""SUMMARY
        
        test_request()
        
        @Return:
        """
        self.assertIsInstance(self.connection.core.Bell.request(self.binary),
                              VoidCookie,
                              msg='Failed: Bell("{0}") not return {1}'
                              .format(self.binary, VoidCookie.__class__.__name__))
        

* Wed 28 May 2014 02:09:00 AM JST
            
* Wed 28 May 2014 02:09:02 AM JST
    
* Wed 28 May 2014 02:09:05 AM JST
                              
* Wed 28 May 2014 02:10:06 AM JST
SUMMARY
* Wed 28 May 2014 02:10:36 AM JST
Test BellChecked.request is VoidCookie.
* Wed 28 May 2014 02:10:42 AM JST
        
* Wed 28 May 2014 02:11:06 AM JST
        
* Wed 28 May 2014 02:46:59 AM JST
self.connection = xcb2.connect()
* Wed 28 May 2014 02:47:15 AM JST
assertIsNone
* Wed 28 May 2014 02:59:41 AM JST
checkraise_BadValue
* Wed 28 May 2014 03:00:05 AM JST
assertRaises
* Wed 28 May 2014 03:02:35 AM JST
as
* Wed 28 May 2014 03:02:37 AM JST
self.
* Wed 28 May 2014 03:02:40 AM JST
with 
* Wed 28 May 2014 03:03:20 AM JST
cookie = self.connection.core.BellChecked(100)
* Wed 28 May 2014 03:04:40 AM JST
BadValue
* Wed 28 May 2014 03:07:02 AM JST
        with self.assertRaises(BadValue):
            cookie = self.connection.core.BellChecked(-110)
            cookie.check()

* Wed 28 May 2014 03:11:16 AM JST
self.
* Wed 28 May 2014 03:11:26 AM JST
self.connection.core.BellChecked(-110)
* Wed 28 May 2014 03:11:46 AM JST
        with self.assertRaises(BadValue):
            cookie = self.connection.core.BellChecked(-101)
            cookie.check()

* Wed 28 May 2014 03:11:53 AM JST
        with self.assertRaises(BadValue):
            cookie = self.connection.core.BellChecked(101)
            cookie.check()

* Wed 28 May 2014 03:12:50 AM JST
            
* Wed 28 May 2014 03:12:59 AM JST
        self.assertIsNone(self.connection.core.BellChecked(100).check(),
                          msg='Failed: value 100.')

* Wed 28 May 2014 03:28:53 AM JST

* Wed 28 May 2014 03:28:53 AM JST

* Wed 28 May 2014 03:28:53 AM JST
        - [yas] elisp error!:

* Wed 28 May 2014 03:28:54 AM JST
        - [yas] elisp error!:

* Wed 28 May 2014 03:28:54 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:28:54 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:28:54 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:28:54 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:28:54 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:28:58 AM JST

* Wed 28 May 2014 03:28:58 AM JST

* Wed 28 May 2014 03:28:58 AM JST
        - [yas] elisp error!:

* Wed 28 May 2014 03:28:58 AM JST
        - [yas] elisp error!:

* Wed 28 May 2014 03:28:58 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:28:58 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:28:58 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:28:59 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:28:59 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:32:26 AM JST
changewindowattributes
* Wed 28 May 2014 03:35:23 AM JST
import xcb2
* Wed 28 May 2014 03:39:23 AM JST
ChangeWindowAttributes
* Wed 28 May 2014 03:40:25 AM JST
=xx2x
* Wed 28 May 2014 03:42:53 AM JST

* Wed 28 May 2014 03:42:53 AM JST

* Wed 28 May 2014 03:42:54 AM JST
        - [yas] elisp error!:

* Wed 28 May 2014 03:42:54 AM JST
        - [yas] elisp error!:

* Wed 28 May 2014 03:42:54 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:42:54 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:42:54 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:42:54 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:42:54 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:42:56 AM JST

* Wed 28 May 2014 03:42:56 AM JST

* Wed 28 May 2014 03:42:56 AM JST
        - [yas] elisp error!:

* Wed 28 May 2014 03:42:56 AM JST
        - [yas] elisp error!:

* Wed 28 May 2014 03:42:56 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:42:56 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:42:56 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:42:57 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:42:57 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Wed 28 May 2014 03:45:38 AM JST

* Wed 28 May 2014 03:45:38 AM JST

* Wed 28 May 2014 03:45:38 AM JST
        print(repr(buf.getvalue()))

* Wed 28 May 2014 03:47:16 AM JST
56623126
* Wed 28 May 2014 03:49:23 AM JST
c.rawconnection.core.ConfigureWindow(56623126, )
* Wed 28 May 2014 03:49:27 AM JST
c.rawconnection.core.ConfigureWindow(56623126, )
* Wed 28 May 2014 03:49:42 AM JST
c.rawconnection.core.ConfigureWindow(56623126, )
* Wed 28 May 2014 03:50:23 AM JST
81788931
* Wed 28 May 2014 03:51:18 AM JST
'\x00\x00\x00\x00\x03\x00\xe0\x04\x01\x00\x00\x00d\x00\x00\x00'
* Wed 28 May 2014 03:51:35 AM JST
configurewindow
* Wed 28 May 2014 03:52:54 AM JST
import xcb2
* Wed 28 May 2014 03:53:21 AM JST
self.connection = xcb2.connect()
* Wed 28 May 2014 03:53:39 AM JST
'\x00\x00\x00\x00\x03\x00\xe0\x04\x01\x00\x00\x00d\x00\x00\x00'
* Wed 28 May 2014 03:54:30 AM JST
81788931
* Wed 28 May 2014 03:56:39 AM JST
self.connection.core.ConfigureWindow._getbinary(
                81788931, ConfigWindow.X, [100])
* Wed 28 May 2014 03:57:37 AM JST
            
* Wed 28 May 2014 03:58:00 AM JST
tes
* Wed 28 May 2014 04:11:23 AM JST
This event is reported to clients selecting StructureNotify on the window and to clients selecting
SubstructureNotify on the parent. It is generated when a ConﬁgureWindow request actually
changes the state of the window. The event is the window on which the event was generated, and
the window is the window that is changed.
* Wed 28 May 2014 04:11:41 AM JST
The x and y coordinates are relative to the new
* Wed 28 May 2014 04:12:17 AM JST
s origin and specify the position of the upper-left outer corner of the window.
* Wed 28 May 2014 04:12:28 AM JST
The width and
height specify the inside size, not including the border.
* Wed 28 May 2014 04:12:37 AM JST
If above-sibling is None, then the
* Wed 28 May 2014 04:12:54 AM JST
 is on the bottom of the stack with respect to siblings. Otherwise, the window is immediately
on top of the speciﬁed sibling. The override-redirect ﬂag is from the window’s attribute.
* Wed 28 May 2014 04:15:16 AM JST
        on the window and to clients selecting SubstructureNotify on the parent.
        It is generated when a ConﬁgureWindow request actually changes
        the state of the window.
        The event is the window on which the event was generated, and the window
        is the window that is changed.
        The x and y coordinates are relative to the new parent's s origin and
        specify the position of the upper-left outer corner of the window.
        The width and height specify the inside size, not including the border.
        If above-sibling is None, then the window  is on the bottom of the stack
        with respect to siblings. Otherwise, the window is immediately on top of
        the speciﬁed sibling.
        The override-redirect ﬂag is from the window’s attribute.

* Wed 28 May 2014 04:16:14 AM JST
simple_teswindow
* Wed 28 May 2014 04:17:24 AM JST
from xcb2 import VoidCookie
* Wed 28 May 2014 04:18:45 AM JST
msg='Failed: Bell({0}) not return {1}'
                              .format(self.value, VoidCookie.__class__.__name__)
* Wed 28 May 2014 04:18:51 AM JST
Bell
* Wed 28 May 2014 04:19:41 AM JST
simple_teswindow()
* Wed 28 May 2014 04:19:50 AM JST

* Wed 28 May 2014 04:19:50 AM JST

* Wed 28 May 2014 04:19:50 AM JST
        window = simple_teswindow()

* Wed 28 May 2014 04:19:58 AM JST
                 
* Wed 28 May 2014 04:20:29 AM JST
value
* Wed 28 May 2014 04:20:30 AM JST
self.value
* Wed 28 May 2014 04:22:19 AM JST
self.window
* Wed 28 May 2014 04:22:55 AM JST
SUMMARY
* Wed 28 May 2014 04:23:29 AM JST

* Wed 28 May 2014 04:23:29 AM JST

* Wed 28 May 2014 04:23:29 AM JST
        test_call()

* Wed 28 May 2014 04:23:29 AM JST

* Wed 28 May 2014 04:23:29 AM JST

* Wed 28 May 2014 04:23:29 AM JST
        @Return:

* Wed 28 May 2014 06:46:07 AM JST
        
* Wed 28 May 2014 06:48:12 AM JST
StringIO
* Wed 28 May 2014 06:49:27 AM JST
ConfigWindow.X
* Wed 28 May 2014 06:52:56 AM JST
        self.assertIsInstance(
            self.connection.core.ConfigureWindow.request(buf.getvalue()),
            VoidCookie,
            msg='Failed: ConfigureWindow("{0}") not return {1}'
            .format(buf.getvalue(), VoidCookie.__class__.__name__))

* Wed 28 May 2014 06:53:34 AM JST
        buf = StringIO()
        buf.write(pack('=xx2xIH2x', self.window, ConfigWindow.X))
        buf.write(str(buffer(array('I', [100]))))

* Wed 28 May 2014 07:30:22 AM JST
self.connection = xcb2.connect()
* Wed 28 May 2014 07:30:30 AM JST
    def test_binary(self):
        r"""Test binary."""
        tesbinary = '\x00\x00\x00\x00\x03\x00\xe0\x04\x01\x00\x00\x00d\x00\x00\x00'
        binary = self.connection.core.ConfigureWindow._getbinary(
            81788931, ConfigWindow.X, [100])
        self.assertEqual(tesbinary, binary, msg='Failed: predefine:{}, got:{}'
                         .format(tesbinary, binary))


* Wed 28 May 2014 07:31:50 AM JST
from
* Wed 28 May 2014 07:32:09 AM JST
from cStringIO import StringIO
from struct import pack
from array import array

* Wed 28 May 2014 07:32:44 AM JST
ConfigureWindow
* Wed 28 May 2014 07:33:03 AM JST
from xcb2.xproto.ext import ConfigureWindow, ConfigureWindowChecked
* Wed 28 May 2014 07:33:53 AM JST
from xcb2.xproto.ext import ConfigureWindow, ConfigureWindowChecked
* Wed 28 May 2014 07:33:55 AM JST
ConfigureWindowChecked
* Wed 28 May 2014 07:33:55 AM JST
ConfigureWindow, ConfigureWindowChecked
* Wed 28 May 2014 07:34:01 AM JST
ConfigureWindow
* Wed 28 May 2014 07:34:27 AM JST
xcb.connect()
* Wed 28 May 2014 07:34:54 AM JST
_connection
* Wed 28 May 2014 07:35:01 AM JST
request?
* Wed 28 May 2014 07:35:41 AM JST
'\x00d\x00\x00'
* Wed 28 May 2014 07:36:36 AM JST
from xcb2.xproto.ext import ConfigureWindow, ConfigureWindowChecked
* Wed 28 May 2014 07:36:38 AM JST
ConfigureWindowChecked
* Wed 28 May 2014 07:36:38 AM JST
ConfigureWindow, ConfigureWindowChecked
* Wed 28 May 2014 07:36:45 AM JST
import xcb, xcb.xproto
* Wed 28 May 2014 07:38:19 AM JST
self.binary = '\x00d\x00\x00'
* Wed 28 May 2014 07:38:25 AM JST
self.value = 100
* Wed 28 May 2014 07:38:37 AM JST
    def test_binary(self):
        r"""Test binary."""
        self.assertEqual(self.connection.core.Bell._getbinary(self.value),
                         self.binary,
                         msg='Failed: Bell._getbinary({0}) == "{1}"'
                         .format(self.value,  self.binary))


* Wed 28 May 2014 07:39:53 AM JST
import xcb, xcb.xproto
* Wed 28 May 2014 07:40:01 AM JST
from xcb2.xproto.ext import ConfigureWindow, ConfigureWindowChecked
* Wed 28 May 2014 07:40:02 AM JST
ConfigureWindowChecked
* Wed 28 May 2014 07:40:02 AM JST
ConfigureWindow, ConfigureWindowChecked
* Wed 28 May 2014 07:40:23 AM JST
'\x00d\x00\x00'
* Wed 28 May 2014 07:40:28 AM JST
EXPECT_BINARY
* Wed 28 May 2014 07:42:05 AM JST
sender
* Wed 28 May 2014 07:42:36 AM JST
xcb.connect()
* Wed 28 May 2014 07:42:48 AM JST
        self.conn = xcb.connect()
        self.protocol = Bell(self.conn)

* Wed 28 May 2014 07:43:01 AM JST
        
* Wed 28 May 2014 07:43:31 AM JST
connection.core
* Wed 28 May 2014 07:43:40 AM JST
Bell
* Wed 28 May 2014 07:46:16 AM JST
_getbinary(
* Wed 28 May 2014 07:46:16 AM JST
Bell._getbinary(
* Wed 28 May 2014 07:46:46 AM JST
self.protocol._getbinary(self.value)
* Wed 28 May 2014 07:46:55 AM JST
                         
* Wed 28 May 2014 07:49:44 AM JST
value
* Wed 28 May 2014 07:49:55 AM JST
self.protocol
* Wed 28 May 2014 07:54:47 AM JST
value
* Wed 28 May 2014 07:54:57 AM JST
value
* Wed 28 May 2014 07:55:30 AM JST
            
* Wed 28 May 2014 09:18:46 AM JST

* Wed 28 May 2014 09:18:46 AM JST

* Wed 28 May 2014 09:18:46 AM JST
        print(repr(buf.getvalue()))

* Wed 28 May 2014 09:19:48 AM JST
ar
* Wed 28 May 2014 09:19:49 AM JST
self.ar
* Wed 28 May 2014 09:23:17 AM JST
'\x00\x00\x00\x00'
* Wed 28 May 2014 09:24:17 AM JST
'\x00\xce\x00\x00'
* Wed 28 May 2014 09:24:20 AM JST

* Wed 28 May 2014 09:24:34 AM JST

* Wed 28 May 2014 09:24:39 AM JST
        
* Wed 28 May 2014 09:24:53 AM JST
        binary = self.protocol._getbinary(*self.args)
        self.assertEqual(binary, self.binary1,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args).replace('(', '').replace(')', ''),
                                 repr(self.binary1), repr(binary)))

* Wed 28 May 2014 09:25:28 AM JST
        binary2 = self.protocol._getbinary(*self.args)
        self.assertEqual(binary2, self.binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args).replace('(', '').replace(')', ''),
                                 repr(self.binary2), repr(binary2)))

* Wed 28 May 2014 09:27:10 AM JST
                                 
* Wed 28 May 2014 09:27:16 AM JST
            
* Wed 28 May 2014 09:27:18 AM JST
                                 
* Wed 28 May 2014 09:27:34 AM JST
        
* Wed 28 May 2014 09:28:08 AM JST
        
* Wed 28 May 2014 09:30:01 AM JST
        self.conn = xcb.connect()
        self.protocol = Bell(self.conn)
        self.protocol_check = BellChecked(self.conn)

* Wed 28 May 2014 09:30:40 AM JST
value
* Wed 28 May 2014 09:31:06 AM JST
self.args
* Wed 28 May 2014 09:31:13 AM JST
                                
* Wed 28 May 2014 09:32:04 AM JST
Bell
* Wed 28 May 2014 09:33:34 AM JST

* Wed 28 May 2014 09:33:34 AM JST

* Wed 28 May 2014 09:33:34 AM JST
        self.connection = xcb2.connect()

* Wed 28 May 2014 09:33:38 AM JST
Bell
* Wed 28 May 2014 09:33:38 AM JST
core.Bell
* Wed 28 May 2014 09:33:39 AM JST
connection.core.Bell
* Wed 28 May 2014 09:34:11 AM JST
Bell
* Wed 28 May 2014 09:34:12 AM JST
core.Bell
* Wed 28 May 2014 09:34:12 AM JST
connection.core.Bell
* Wed 28 May 2014 09:34:27 AM JST
EXPECT_BINARY1
* Wed 28 May 2014 09:34:48 AM JST
Bell
* Wed 28 May 2014 09:34:56 AM JST
self.protocol.__class__.__name__,
* Wed 28 May 2014 09:35:36 AM JST
BellChecked
* Wed 28 May 2014 09:35:37 AM JST
core.BellChecked
* Wed 28 May 2014 09:35:37 AM JST
connection.core.BellChecked
* Wed 28 May 2014 09:35:56 AM JST
msg='Failed: {0}.request("{0}") not return {1}'
                              .format(self.protocol.__class__.__name__,
                                      self.binary, VoidCookie.__class__.__name__)
* Wed 28 May 2014 09:36:04 AM JST
            
* Wed 28 May 2014 09:36:51 AM JST
self.cookie
* Wed 28 May 2014 09:39:19 AM JST
__class__.
* Wed 28 May 2014 09:43:47 AM JST
Bell
* Wed 28 May 2014 09:43:50 AM JST

* Wed 28 May 2014 09:43:51 AM JST
PROTOCOL_NAME
* Wed 28 May 2014 09:44:49 AM JST

* Wed 28 May 2014 09:44:57 AM JST
PROTOCOL_NAME_CHECK
* Wed 28 May 2014 09:45:32 AM JST
.format(PROTOCOL_NAME_CHECK)
* Wed 28 May 2014 09:47:34 AM JST
VoidCookie
* Wed 28 May 2014 09:47:43 AM JST
return
* Wed 28 May 2014 09:55:22 AM JST
        self.conn = xcb.connect()
        self.protocol = Bell(self.conn)
        self.protocol_check = BellChecked(self.conn)

* Wed 28 May 2014 09:55:34 AM JST
self.protocol_check
* Wed 28 May 2014 09:58:28 AM JST
    def test_binary1(self):
        r"""Test binary1."""

* Wed 28 May 2014 09:58:40 AM JST
    def test_binary2(self):
        r"""Test binary2."""

* Wed 28 May 2014 10:03:55 AM JST
'\x00d\x00\x00'
* Wed 28 May 2014 10:05:22 AM JST
'\x00d\x00\x00'
* Wed 28 May 2014 10:05:58 AM JST
'\x00d\x00\x00'
* Wed 28 May 2014 10:06:28 AM JST

* Wed 28 May 2014 10:06:28 AM JST

* Wed 28 May 2014 10:06:28 AM JST
        self.binary1 = EXPECT_BINARY1

* Wed 28 May 2014 10:06:32 AM JST
'\x00\x00\x00\x00'
* Wed 28 May 2014 10:06:50 AM JST
expect
* Wed 28 May 2014 10:07:04 AM JST
expect
* Wed 28 May 2014 10:07:12 AM JST
expect
* Wed 28 May 2014 10:07:24 AM JST
'\x00\xce\x00\x00'
* Wed 28 May 2014 10:07:34 AM JST
expect
* Wed 28 May 2014 10:07:41 AM JST
expect,
* Wed 28 May 2014 10:07:59 AM JST

* Wed 28 May 2014 10:07:59 AM JST

* Wed 28 May 2014 10:07:59 AM JST
        self.binary2 = EXPECT_BINARY2

* Wed 28 May 2014 10:07:59 AM JST
        self.binary2 = EXPECT_BINARY2

* Wed 28 May 2014 10:07:59 AM JST
        self.binary2 = EXPECT_BINARY2
        self.binary3 = EXPECT_BINARY3

* Wed 28 May 2014 10:08:18 AM JST
'\x00d\x00\x00'
* Wed 28 May 2014 10:09:24 AM JST
'\x00d\x00\x00'
* Wed 28 May 2014 10:11:55 AM JST
'\x00d\x00\x00'
* Wed 28 May 2014 10:12:04 AM JST

* Wed 28 May 2014 10:12:04 AM JST

* Wed 28 May 2014 10:12:04 AM JST
        expect = 

* Wed 28 May 2014 10:12:14 AM JST
'\x00d\x00\x00'
* Wed 28 May 2014 10:15:35 AM JST
'\x00\x1e\x00\x00'
* Wed 28 May 2014 10:15:46 AM JST
'\x00\x1e\x00\x00'
* Wed 28 May 2014 10:17:57 AM JST
binary
* Wed 28 May 2014 10:17:58 AM JST
self.binary
* Wed 28 May 2014 10:18:19 AM JST
'\x00\x1e\x00\x00'
* Wed 28 May 2014 10:18:38 AM JST
[0]
* Wed 28 May 2014 10:19:09 AM JST
self.arg1[1]
* Wed 28 May 2014 10:19:31 AM JST
'\x00\x00\x00\x00'
* Wed 28 May 2014 10:19:38 AM JST
[0]
* Wed 28 May 2014 10:20:01 AM JST
expect
* Wed 28 May 2014 10:20:12 AM JST
self.args[1]
* Wed 28 May 2014 10:20:27 AM JST
self.args2[1]
* Wed 28 May 2014 10:20:31 AM JST

* Wed 28 May 2014 10:20:31 AM JST

* Wed 28 May 2014 10:20:31 AM JST
        expect = '\x00\x00\x00\x00'

* Wed 28 May 2014 10:20:46 AM JST
'\x00\xce\x00\x00'
* Wed 28 May 2014 10:20:57 AM JST

* Wed 28 May 2014 10:20:57 AM JST

* Wed 28 May 2014 10:20:57 AM JST
        expect = '\x00\xce\x00\x00'

* Wed 28 May 2014 10:21:00 AM JST
expect
* Wed 28 May 2014 10:21:07 AM JST
self.args3[1]
* Wed 28 May 2014 10:23:14 AM JST
class TestBellBinary(MockerTestCase):
    def setUp(self):
        self.args1 = [(30, ), '\x00\x1e\x00\x00']
        self.args2 = [(0, ), '\x00\x00\x00\x00']
        self.args3 = [(-50, ), '\x00\xce\x00\x00']
        self.conn = xcb.connect()
        self.protocol = Bell(self.conn)
        self.protocol_check = BellChecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))
    def test_binary3(self):
        r"""Test binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass

* Wed 28 May 2014 10:23:23 AM JST
from mocker import *
* Wed 28 May 2014 10:23:28 AM JST
import xcb, xcb.xproto
* Wed 28 May 2014 10:24:01 AM JST
[(30, ), '\x00\x1e\x00\x00']
* Wed 28 May 2014 10:24:02 AM JST
[(0, ), '\x00\x00\x00\x00']
* Wed 28 May 2014 10:24:03 AM JST
[(-50, ), '\x00\xce\x00\x00']
* Wed 28 May 2014 10:25:04 AM JST
TestBinaryAbstract
* Wed 28 May 2014 10:28:04 AM JST
class TestBellBinary(MockerTestCase):
    def setUp(self):
        self.args1 = [(30, ), '\x00\x1e\x00\x00']
        self.args2 = [(0, ), '\x00\x00\x00\x00']
        self.args3 = [(-50, ), '\x00\xce\x00\x00']
        self.conn = xcb.connect()
        self.protocol = Bell(self.conn)
        self.protocol_check = BellChecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))
    def test_binary3(self):
        r"""Test binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass

* Wed 28 May 2014 10:28:35 AM JST

* Wed 28 May 2014 10:28:35 AM JST

* Wed 28 May 2014 10:28:35 AM JST
from xcb2.xproto.ext.tests import TesBinaryAbstract

* Wed 28 May 2014 10:29:29 AM JST

* Wed 28 May 2014 10:29:29 AM JST

* Wed 28 May 2014 10:29:29 AM JST
        print(repr(buf.getvalue()))

* Wed 28 May 2014 10:31:55 AM JST
class TestBellBinary(MockerTestCase):
    def setUp(self):
        self.args1 = [(30, ), '\x00\x1e\x00\x00']
        self.args2 = [(0, ), '\x00\x00\x00\x00']
        self.args3 = [(-50, ), '\x00\xce\x00\x00']
        self.conn = xcb.connect()
        self.protocol = Bell(self.conn)
        self.protocol_check = BellChecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))
    def test_binary3(self):
        r"""Test binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass


* Wed 28 May 2014 10:32:27 AM JST
ConfigureWindow
* Wed 28 May 2014 10:32:34 AM JST
ConfigureWindowChecked
* Wed 28 May 2014 10:32:51 AM JST
81788931
* Wed 28 May 2014 10:33:00 AM JST
ConfigWindow.X
* Wed 28 May 2014 10:33:08 AM JST
[100]
* Wed 28 May 2014 10:33:18 AM JST
'\x00\x00\x00\x00\x03\x00\xe0\x04\x01\x00\x00\x00d\x00\x00\x00'
* Wed 28 May 2014 10:34:40 AM JST
56623107
* Wed 28 May 2014 10:34:50 AM JST
ConfigWindow.X
* Wed 28 May 2014 10:34:57 AM JST
[100])
* Wed 28 May 2014 10:34:59 AM JST
[100]
* Wed 28 May 2014 10:35:33 AM JST
56623107
* Wed 28 May 2014 10:35:43 AM JST
ConfigureWindow.
* Wed 28 May 2014 10:37:00 AM JST

* Wed 28 May 2014 10:37:00 AM JST

* Wed 28 May 2014 10:37:00 AM JST
        print(repr(buf.getvalue()))

* Wed 28 May 2014 10:37:16 AM JST
'\x00\x00\x00\x00\x03\x00`\x03\x02\x00\x00\x00\xc8\x00\x00\x00'
* Wed 28 May 2014 10:38:24 AM JST
75497475
* Wed 28 May 2014 10:38:31 AM JST
ConfigWindow
* Wed 28 May 2014 10:39:17 AM JST
75497475
* Wed 28 May 2014 10:39:40 AM JST
200
* Wed 28 May 2014 10:39:50 AM JST
'\x00\x00\x00\x00\x03\x00\x80\x04\x0c\x00\x00\x00\x90\x01\x00\x00\xf4\x01\x00\x00'
* Wed 28 May 2014 10:41:13 AM JST
ConfigureWindow
* Wed 28 May 2014 10:42:02 AM JST
Bell
* Wed 28 May 2014 10:43:08 AM JST
        self.conn = xcb.connect()
        self.protocol = ConfigureWindow(self.conn)
        self.protocol_check = ConfigureWindowChecked(self.conn)

* Wed 28 May 2014 10:44:00 AM JST
            
* Wed 28 May 2014 10:44:02 AM JST
            
* Wed 28 May 2014 10:44:58 AM JST
[(30, ), '\x00\x1e\x00\x00']
* Wed 28 May 2014 10:45:18 AM JST

* Wed 28 May 2014 10:45:18 AM JST

* Wed 28 May 2014 10:45:18 AM JST
        self.binary = '\x00d\x00\x00'

* Wed 28 May 2014 10:45:45 AM JST
binary
* Wed 28 May 2014 10:45:51 AM JST
binary
* Wed 28 May 2014 10:46:00 AM JST
            
* Wed 28 May 2014 10:46:07 AM JST
                              
* Wed 28 May 2014 10:46:14 AM JST
self.argsbin[1])
* Wed 28 May 2014 10:46:20 AM JST
self.
* Wed 28 May 2014 10:54:21 AM JST
class TestBellRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(30, ), '\x00\x1e\x00\x00']
        self.conn = xcb.connect()
        self.protocol = Bell(self.conn)
        self.protocol_check = BellChecked(self.conn)
        self.cookie = VoidCookie
        self.mocker.replay()

    def test_call(self, ):
        r"""Test Bell.__call__() expect return VoidCookie."""
        self.assertIsInstance(self.protocol(*self.argsbin[0]), self.cookie,
                              msg='Failed: {0}({1}) not returned {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      VoidCookie.__class__.__name__))

    def test_request(self, ):
        r"""Test Bell.request() expect return VoidCookie."""
        self.assertIsInstance(self.protocol.request(self.argsbin[1]),
                              self.cookie,
                              msg='Failed: {0}.request("{0}") not return {1}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1],
                                      self.cookie.__class__.__name__))

    def test_checkedrequest(self, ):
        r"""Test BellChecked.request() expect return VoidCookie."""
        self.assertIsInstance(
            self.protocol_check.request(self.argsbin[1]), self.cookie,
            msg='Failed: {0}.request("{0}") not return {1}'
            .format(self.protocol_check.__class__.__name__,
            self.argsbin[1], self.cookie.__class__.__name__))

    def tearDown(self):
        pass

* Wed 28 May 2014 10:54:35 AM JST
TestBell
* Wed 28 May 2014 10:54:44 AM JST
Bell
* Wed 28 May 2014 10:54:49 AM JST
Bell
* Wed 28 May 2014 10:55:20 AM JST
self.window = simple_teswindow()
* Wed 28 May 2014 10:55:33 AM JST
self.window, ConfigWindow.X, [100]
* Wed 28 May 2014 10:56:17 AM JST
'\x00\x1e\x00\x00']
* Wed 28 May 2014 10:57:17 AM JST
#         buf = StringIO()
#         buf.write(pack('=xx2xIH2x', self.window, ConfigWindow.X))
#         buf.write(str(buffer(array('I', [100]))))

* Wed 28 May 2014 10:58:26 AM JST
ConfigureWindow
* Wed 28 May 2014 10:59:39 AM JST
self.args[0]
* Wed 28 May 2014 10:59:59 AM JST
        buf = StringIO()
        buf.write(pack('=xx2xIH2x', self.args[0], self.args[1]))
        buf.write(str(buffer(array('I', self.args[2]))))

* Wed 28 May 2014 11:00:05 AM JST
args
* Wed 28 May 2014 11:00:05 AM JST
self.args
* Wed 28 May 2014 11:00:31 AM JST
ConfigureWindow
* Wed 28 May 2014 11:06:36 AM JST
class TestBellChecked(MockerTestCase):
    def setUp(self):
        self.conn = xcb.connect()
        self.protocol = Bell(self.conn)
        self.protocol_check = BellChecked(self.conn)
        self.mocker.replay()

    def test_check_nonraise(self):
        r"""Test check() nonraise."""
        cookie = self.protocol_check(100)
        self.assertIsNone(cookie.check(), msg='Failed: BellChecked(100).check()')

    def test_checkraise_BadValue(self, ):
        r"""checkraise_BadValue."""
        with self.assertRaises(BadValue):
            cookie = self.protocol_check(-110)
            cookie.check()

    def test_value_range(self, ):
        r"""value range."""
        with self.assertRaises(BadValue):
            cookie = self.protocol_check(-101)
            cookie.check()
        with self.assertRaises(BadValue):
            cookie = self.protocol_check(101)
            cookie.check()
        self.assertIsNone(self.protocol_check(100).check(),
                          msg='Failed: value 100.')
        self.assertIsNone(self.protocol_check(-100).check(),
                          msg='Failed: value -100.')

    def tearDown(self):
        pass

* Wed 28 May 2014 11:06:47 AM JST
ConfigureWindow
* Wed 28 May 2014 11:07:17 AM JST
ConfigureWindowChecked
* Wed 28 May 2014 11:07:33 AM JST
        self.window = simple_teswindow()
        self.args = (self.window, ConfigWindow.X, [100] )

* Wed 28 May 2014 11:08:50 AM JST
56623107
* Wed 28 May 2014 11:09:46 AM JST
100
* Wed 28 May 2014 11:10:07 AM JST
from xcb2.xproto import BadValue
* Wed 28 May 2014 11:10:14 AM JST

* Wed 28 May 2014 11:10:14 AM JST

* Wed 28 May 2014 11:10:15 AM JST
import xcb2

* Wed 28 May 2014 11:11:16 AM JST
BadLength
* Wed 28 May 2014 11:12:07 AM JST
        with self.assertRaises(BadValue):
            cookie = self.protocol_check(self.window, 1 << 7, [100])
            cookie.check()

* Wed 28 May 2014 11:12:16 AM JST
ConfigWindow.X
* Wed 28 May 2014 11:12:51 AM JST
BadValue
* Wed 28 May 2014 11:15:18 AM JST
*self.args
* Wed 28 May 2014 11:17:06 AM JST
    def test_check_nonraise(self):
        r"""Test check() nonraise."""
        cookie = self.protocol_check(*self.args)
        self.assertIsNone(cookie.check(),
                          msg='Failed: {}({}).check()'
                          .format(self.protocol_check.__class__.__name__,
                                  str(self.args)
                                  .replace('(', '').replace(')', '')))

* Wed 28 May 2014 11:17:18 AM JST
        
* Wed 28 May 2014 11:17:28 AM JST
ConfigWindow.X
* Wed 28 May 2014 11:18:11 AM JST
        
* Wed 28 May 2014 11:18:19 AM JST
ConfigWindow.Y
* Wed 28 May 2014 11:18:43 AM JST
                      
* Wed 28 May 2014 11:19:09 AM JST
    def test_check_nonraise2(self):
        r"""Test check() nonraise."""
        cookie = self.protocol_check(*self.args2)
        self.assertIsNone(cookie.check(),
                          msg='Failed: {}({}).check()'
                          .format(self.protocol_check.__class__.__name__,
                                  str(self.args2)
                                  .replace('(', '').replace(')', '')))


* Wed 28 May 2014 11:20:19 AM JST
ConfigureWindowChecked
* Wed 28 May 2014 11:21:11 AM JST
ConfigureWindowChecked
* Wed 28 May 2014 11:22:07 AM JST
BellChecked
* Wed 28 May 2014 11:23:26 AM JST
Test 
* Wed 28 May 2014 11:24:34 AM JST
()
* Wed 28 May 2014 11:25:14 AM JST

* Wed 28 May 2014 11:25:14 AM JST

* Wed 28 May 2014 11:25:14 AM JST
import xcb2

* Wed 28 May 2014 11:29:19 AM JST
self.window
* Wed 28 May 2014 11:30:16 AM JST
self.conn.core.DestroyWindow(self.window)
* Wed 28 May 2014 07:01:03 PM JST
    def setUp(self):
        self.args1 = [(30, ), '\x00\x1e\x00\x00']
        self.args2 = [(0, ), '\x00\x00\x00\x00']
        self.args3 = [(-50, ), '\x00\xce\x00\x00']
        self.conn = xcb.connect()
        self.protocol = Bell(self.conn)
        self.protocol_check = BellChecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test Bell binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test Bell binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))
    def test_binary3(self):
        r"""Test Bell binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass

* Wed 28 May 2014 07:01:21 PM JST
import xcb, xcb.xproto
from xcb2 import VoidCookie
from xcb2.xproto import BadValue
from xcb2.xproto.ext import Bell, BellChecked

* Wed 28 May 2014 07:01:28 PM JST
Bell,
* Wed 28 May 2014 07:01:35 PM JST
BellChecked
* Wed 28 May 2014 07:02:08 PM JST
GetAtomName
* Wed 28 May 2014 07:02:18 PM JST
GetAtomNameUnchecked
* Wed 28 May 2014 07:02:55 PM JST

* Wed 28 May 2014 07:02:55 PM JST

* Wed 28 May 2014 07:02:56 PM JST
        print(repr(buf.getvalue()))

* Wed 28 May 2014 07:04:09 PM JST
'\x00\x00\x00\x00\x05\x00\x00\x00'
* Wed 28 May 2014 07:05:40 PM JST
_head = _pack('-xx2x')
* Wed 28 May 2014 07:06:10 PM JST
        buf.write(self._head)
        buf.write(_pack(self.fmt, atom))

* Wed 28 May 2014 07:06:18 PM JST

* Wed 28 May 2014 07:06:18 PM JST

* Wed 28 May 2014 07:06:18 PM JST
        buf.write(_pack('=xx2xI', atom))

* Wed 28 May 2014 07:06:40 PM JST
usecache
* Wed 28 May 2014 07:07:49 PM JST
39
* Wed 28 May 2014 07:08:07 PM JST
"\x00\x00\x00\x00'\x00\x00\x00"
* Wed 28 May 2014 07:08:39 PM JST
293
* Wed 28 May 2014 07:08:45 PM JST
'\x00\x00\x00\x00%\x01\x00\x00'
* Wed 28 May 2014 07:10:21 PM JST
GetAtomName
* Wed 28 May 2014 10:43:16 PM JST
from xcb2.xproto import GetAtomNameCookie
* Wed 28 May 2014 10:44:00 PM JST
self.cookie = VoidCookie
* Wed 28 May 2014 10:44:03 PM JST
VoidCookie
* Wed 28 May 2014 10:44:27 PM JST
        self.conn = xcb.connect()
        self.protocol = GetAtomName(self.conn)
        self.protocol_check = GetAtomNameUnchecked(self.conn)

* Wed 28 May 2014 10:44:33 PM JST

* Wed 28 May 2014 10:44:34 PM JST

* Wed 28 May 2014 10:44:34 PM JST
        self.cookie = GetAtomNameCookie

* Wed 28 May 2014 10:44:52 PM JST
WrapGetAtomNameCookie
* Wed 28 May 2014 10:44:59 PM JST
from xcb2.xproto.wcookie import WrapGetAtomNameCookie
* Wed 28 May 2014 10:45:07 PM JST
WrapGetAtomNameCookie
* Wed 28 May 2014 10:46:35 PM JST
self.args1 = [(5, ), '\x00\x00\x00\x00\x05\x00\x00\x00']
* Wed 28 May 2014 10:46:53 PM JST

* Wed 28 May 2014 10:46:53 PM JST

* Wed 28 May 2014 10:46:53 PM JST
        self.cookie = WrapGetAtomNameCookie

* Wed 28 May 2014 10:47:04 PM JST
        self.assertIsInstance(self.protocol(*self.argsbin[0]), self.cookie,
                              msg='Failed: {0}({1}) not returned {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      VoidCookie.__class__.__name__))

* Wed 28 May 2014 10:47:30 PM JST
VoidCookie
* Wed 28 May 2014 10:47:37 PM JST
VoidCookie
* Wed 28 May 2014 10:47:40 PM JST
VoidCookie
* Wed 28 May 2014 10:48:41 PM JST
WrapGetAtomNameCookie
* Wed 28 May 2014 10:48:47 PM JST
        
* Wed 28 May 2014 10:54:37 PM JST
    def test_request(self, ):
        r"""Test Bell.request() expect return VoidCookie."""
        self.assertIsInstance(self.protocol.request(self.argsbin[1]),
                              self.cookie,
                              msg='Failed: {0}.request("{0}") not return {1}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1],
                                      self.cookie.__class__.__name__))

* Wed 28 May 2014 10:54:46 PM JST
GetAtomName
* Wed 28 May 2014 10:54:52 PM JST
WrapGetAtomNameCookie
* Wed 28 May 2014 10:55:23 PM JST
    def test_checkedrequest(self, ):
        r"""Test BellChecked.request() expect return VoidCookie."""
        self.assertIsInstance(
            self.protocol_check.request(self.argsbin[1]), self.cookie,
            msg='Failed: {0}.request("{0}") not return {1}'
            .format(self.protocol_check.__class__.__name__,
            self.argsbin[1], self.cookie.__class__.__name__))

* Wed 28 May 2014 10:55:31 PM JST
BellChecked
* Wed 28 May 2014 10:55:41 PM JST
WrapGetAtomNameCookie
* Wed 28 May 2014 11:00:48 PM JST
self.protocol_check.request(self.argsbin[1])
* Wed 28 May 2014 11:00:57 PM JST
            
* Wed 28 May 2014 11:01:18 PM JST
                              
* Wed 28 May 2014 11:07:08 PM JST
cookie
* Wed 28 May 2014 11:08:14 PM JST
wcookie
* Wed 28 May 2014 11:08:16 PM JST
Wrap
* Wed 28 May 2014 11:08:18 PM JST
GetAtomNameCookie
* Wed 28 May 2014 11:09:54 PM JST
from xcb2.xproto import GetAtomNameCookie
* Wed 28 May 2014 11:10:02 PM JST
from xcb2.xproto import 
* Wed 28 May 2014 11:14:23 PM JST
GetAtomName
* Wed 28 May 2014 11:15:24 PM JST
WrapGetAtomNameCookie
* Wed 28 May 2014 11:18:59 PM JST
GetAtomNameCookie
* Wed 28 May 2014 11:19:28 PM JST
'got: {3}'
* Wed 28 May 2014 11:20:01 PM JST
GetAtomNameCookie
* Wed 28 May 2014 11:20:15 PM JST
GetAtomNameCookie
* Wed 28 May 2014 11:20:37 PM JST
__name__
* Wed 28 May 2014 11:20:37 PM JST
__class__.__name__
* Wed 28 May 2014 11:20:38 PM JST
GetAtomNameCookie.__class__.__name__
* Wed 28 May 2014 11:20:42 PM JST
                                      
* Wed 28 May 2014 11:20:50 PM JST
GetAtomNameCookie, 
* Wed 28 May 2014 11:20:51 PM JST
                                      GetAtomNameCookie, 
* Wed 28 May 2014 11:20:55 PM JST
                              
* Wed 28 May 2014 11:21:01 PM JST
                              
* Wed 28 May 2014 11:21:12 PM JST
WrapGetAtomNameCookie
* Wed 28 May 2014 11:21:59 PM JST
Wrap
* Wed 28 May 2014 11:22:04 PM JST
Wrap
* Wed 28 May 2014 11:50:40 PM JST
        self.conn = xcb.connect()
        self.protocol = GetAtomName(self.conn)
        self.protocol_check = GetAtomNameUnchecked(self.conn)

* Wed 28 May 2014 11:51:21 PM JST

* Wed 28 May 2014 11:51:21 PM JST

* Wed 28 May 2014 11:51:21 PM JST
        self.protocol = Bell(self.conn)

* Wed 28 May 2014 11:51:24 PM JST

* Wed 28 May 2014 11:51:24 PM JST

* Wed 28 May 2014 11:51:24 PM JST
        self.protocol = GetAtomName(self.conn)

* Wed 28 May 2014 11:51:33 PM JST
self.assertIsNone(cookie.check(), msg='Failed: BellChecked(100).check()')
* Wed 28 May 2014 11:51:36 PM JST
BellChecked
* Thu 29 May 2014 05:50:56 AM JST
check()
* Thu 29 May 2014 05:55:46 AM JST
This request returns the name for the given atom.

* Thu 29 May 2014 05:59:00 AM JST
check()
* Thu 29 May 2014 05:59:26 AM JST
reply()
* Thu 29 May 2014 06:05:32 AM JST
reply()
* Thu 29 May 2014 06:05:58 AM JST

* Thu 29 May 2014 06:05:58 AM JST

* Thu 29 May 2014 06:05:58 AM JST
from xcb2.xproto import BadValue

* Thu 29 May 2014 06:10:49 AM JST
        self.args1 = [(5, ), '\x00\x00\x00\x00\x05\x00\x00\x00']
        self.args2 = [(39, ), "\x00\x00\x00\x00'\x00\x00\x00"]
        self.args3 = [(293, ), '\x00\x00\x00\x00%\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GetAtomName(self.conn)
        self.protocol_check = GetAtomNameUnchecked(self.conn)

* Thu 29 May 2014 06:11:02 AM JST

* Thu 29 May 2014 06:11:12 AM JST
GetAtomNameUnchecked
* Thu 29 May 2014 06:11:13 AM JST
GetAtomName, GetAtomNameUnchecked
* Thu 29 May 2014 06:11:24 AM JST
UseCache
* Thu 29 May 2014 06:11:30 AM JST

* Thu 29 May 2014 06:11:30 AM JST

* Thu 29 May 2014 06:11:30 AM JST
        self.protocol_check = GetAtomNameUnchecked(self.conn)

* Thu 29 May 2014 06:11:43 AM JST
    def test_binary1(self):
        r"""Test GetAtomName binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test GetAtomName binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))
    def test_binary3(self):
        r"""Test GetAtomName binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))


* Thu 29 May 2014 06:11:56 AM JST
GetAtomName
* Thu 29 May 2014 06:12:02 AM JST
UseCache
* Thu 29 May 2014 06:13:31 AM JST
GetAtomName
* Thu 29 May 2014 06:20:17 AM JST
'\x00\x00\x00\x00\x05\x00\x00\x00'
* Thu 29 May 2014 06:20:59 AM JST
5
* Thu 29 May 2014 06:21:18 AM JST
.replace('(', '').replace(')', '')
* Thu 29 May 2014 06:21:18 AM JST
                                 .replace('(', '').replace(')', '')
* Thu 29 May 2014 06:34:32 AM JST
pas
* Thu 29 May 2014 06:34:38 AM JST
        self.args1 = [(6, ), '\x00\x00\x00\x00\x06\x00\x00\x00']
        self.args2 = [(39, ), "\x00\x00\x00\x00'\x00\x00\x00"]
        self.args3 = [(293, ), '\x00\x00\x00\x00%\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UseCache(GetAtomName(self.conn))

* Thu 29 May 2014 06:34:43 AM JST

* Thu 29 May 2014 06:34:43 AM JST

* Thu 29 May 2014 06:34:43 AM JST
        self.args2 = [(39, ), "\x00\x00\x00\x00'\x00\x00\x00"]

* Thu 29 May 2014 06:34:43 AM JST
        self.args2 = [(39, ), "\x00\x00\x00\x00'\x00\x00\x00"]

* Thu 29 May 2014 06:34:43 AM JST
        self.args2 = [(39, ), "\x00\x00\x00\x00'\x00\x00\x00"]
        self.args3 = [(293, ), '\x00\x00\x00\x00%\x01\x00\x00']

* Thu 29 May 2014 06:34:51 AM JST
binary = self.protocol._getbinary(*self.args1[0])
* Thu 29 May 2014 06:37:12 AM JST
*self.args1[0]
* Thu 29 May 2014 06:39:41 AM JST
GlobalCacheAtoms.getatom
* Thu 29 May 2014 06:43:13 AM JST
        
* Thu 29 May 2014 06:43:56 AM JST
UseCache(GetAtomName(self.conn))
* Thu 29 May 2014 06:43:59 AM JST
GetAtomName(self.conn)
* Thu 29 May 2014 06:44:10 AM JST
protocol
* Thu 29 May 2014 06:44:16 AM JST
protocol
* Thu 29 May 2014 06:45:29 AM JST
core.
* Thu 29 May 2014 06:45:30 AM JST
c
* Thu 29 May 2014 06:46:06 AM JST
*self.args1[0]
* Thu 29 May 2014 06:46:32 AM JST
name
* Thu 29 May 2014 06:46:32 AM JST
reply().name
* Thu 29 May 2014 06:46:51 AM JST
self.usecache._getcache(*self.args1[0])
* Thu 29 May 2014 06:49:12 AM JST
cache = self.usecache._getcache(*self.args1[0])
* Thu 29 May 2014 06:49:19 AM JST
        self.assertEqual(atom, cache,
                         msg='Failed: Expect: {}, Got: {}'.format(atom, cache))

* Thu 29 May 2014 06:52:20 AM JST
pref_screen
* Thu 29 May 2014 06:52:42 AM JST
conn
* Thu 29 May 2014 06:52:42 AM JST
core.conn
* Thu 29 May 2014 06:52:42 AM JST
c.core.conn
* Thu 29 May 2014 06:52:42 AM JST
D c.core.conn
* Thu 29 May 2014 06:53:09 AM JST
status
* Thu 29 May 2014 06:53:37 AM JST
roots
* Thu 29 May 2014 06:53:49 AM JST
/list 
* Thu 29 May 2014 06:53:55 AM JST
/list 
* Thu 29 May 2014 06:59:44 AM JST
        # dummyholiday = self.mocker.replace('holiday_japan.Holiday')
        # dummyholiday(mocker.ANY)
        # self.mocker.result(core.Holiday(2000, 1, 1))
        # self.mocker.count(0, None)

* Thu 29 May 2014 07:00:26 AM JST
holiday_japan
* Thu 29 May 2014 07:00:41 AM JST
Holiday
* Thu 29 May 2014 07:00:51 AM JST
dummyholiday
* Thu 29 May 2014 07:01:02 AM JST
mocker.
* Thu 29 May 2014 07:02:48 AM JST
self.conn = xcb.connect()
* Thu 29 May 2014 07:02:55 AM JST
        self.protocol = GetAtomName(self.conn)
        self.usecache = UseCache(self.protocol)

* Thu 29 May 2014 07:04:01 AM JST
self.usecache(6)
* Thu 29 May 2014 07:05:00 AM JST
UseCache(self.protocol)
* Thu 29 May 2014 07:05:09 AM JST

* Thu 29 May 2014 07:05:09 AM JST

* Thu 29 May 2014 07:05:09 AM JST
        self.usecache = UseCache(self.protocol)

* Thu 29 May 2014 07:05:15 AM JST

* Thu 29 May 2014 07:05:15 AM JST

* Thu 29 May 2014 07:05:15 AM JST
        self.usecache = UseCache(self.protocol)

* Thu 29 May 2014 07:05:16 AM JST
protocol
* Thu 29 May 2014 07:05:17 AM JST
self.protocol
* Thu 29 May 2014 07:05:35 AM JST
self.
* Thu 29 May 2014 07:08:16 AM JST
mocker.replace
* Thu 29 May 2014 07:09:08 AM JST
xcb2.xproto.ext.getatomname
* Thu 29 May 2014 07:09:46 AM JST
self.usecache = UseCache(self.protocol)
* Thu 29 May 2014 07:09:56 AM JST

* Thu 29 May 2014 07:09:56 AM JST

* Thu 29 May 2014 07:09:56 AM JST
        usecache = UseCache(self.protocol)

* Thu 29 May 2014 07:14:40 AM JST
atom = self.usecache(*self.args1[0])
* Thu 29 May 2014 07:14:43 AM JST
atom
* Thu 29 May 2014 07:14:52 AM JST
        self.assertEqual(atom, cache,
                         msg='Failed: Expect: {}, Got: {}'.format(atom, cache))

* Thu 29 May 2014 07:21:29 AM JST
self.conn
* Thu 29 May 2014 07:23:48 AM JST
U
* Thu 29 May 2014 07:23:49 AM JST
GetAtomName.U
* Thu 29 May 2014 07:23:56 AM JST
        
* Thu 29 May 2014 07:27:42 AM JST
self.
* Thu 29 May 2014 07:28:11 AM JST
raise 
* Thu 29 May 2014 07:29:15 AM JST

* Thu 29 May 2014 07:29:15 AM JST

* Thu 29 May 2014 07:29:15 AM JST
        - [yas] elisp error!:

* Thu 29 May 2014 07:29:15 AM JST
        - [yas] elisp error!:

* Thu 29 May 2014 07:29:16 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 07:29:16 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 07:29:16 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 07:29:16 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 07:29:16 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 07:45:15 AM JST
core.
* Thu 29 May 2014 07:45:15 AM JST
c.core.
* Thu 29 May 2014 07:46:22 AM JST
This request returns the root and current geometry of the drawable. The depth is the number of
bits per pixel for the object. The x, y, and border-width will always be zero for pixmaps. For a
window, the x and y coordinates specify the upper-left outer corner of the window relative to its
parent’s origin, and the width and height specify the inside size, not including the border.
It is legal to pass an InputOnly window asadrawable to this request.
* Thu 29 May 2014 07:48:17 AM JST
rawconnection
* Thu 29 May 2014 07:50:12 AM JST
name
* Thu 29 May 2014 07:50:15 AM JST
reply()
* Thu 29 May 2014 07:50:28 AM JST
check()
* Thu 29 May 2014 07:51:09 AM JST
self.
* Thu 29 May 2014 07:51:11 AM JST
         
* Thu 29 May 2014 07:51:13 AM JST
         
* Thu 29 May 2014 07:53:13 AM JST

* Thu 29 May 2014 07:53:13 AM JST

* Thu 29 May 2014 07:53:13 AM JST
        with self.assertRaises(ExcClass):

* Thu 29 May 2014 07:54:02 AM JST
1)
* Thu 29 May 2014 07:54:03 AM JST
I', -1)
* Thu 29 May 2014 07:54:03 AM JST
pack('I', -1)
* Thu 29 May 2014 07:55:53 AM JST
GetAtomName
atom: ATOM
Æ
name: STRING8
Errors: Atom
This request returns the name for the given atom.
* Thu 29 May 2014 07:56:31 AM JST
ConﬁgureNotify
event, window: WINDOW
x, y: INT16
width, height, border-width: CARD16
above-sibling: WINDOW or None
override-redirect: BOOL
* Thu 29 May 2014 07:57:16 AM JST
ConﬁgureWindow
window: WINDOW
value-mask: BITMASK
value-list: LISTofVALUE
Errors: Match, Value, Window
This request changes the conﬁguration of the window. The value-mask and value-list specify
which values are to be given. The possible values are:
Attribute Type
x INT16
y INT16
width CARD16
height CARD16
border-width CARD16
sibling WINDOW
stack-mode {Above, Below, TopIf, BottomIf, Opposite}
* Thu 29 May 2014 07:58:30 AM JST
This request changes the conﬁguration of the window.
The value-mask and value-list specify which values are to be given.

* Thu 29 May 2014 08:01:41 AM JST
# TODO: (Atami) [2014/05/29]
# BadMatch, BadValue, BadWindow

* Thu 29 May 2014 08:08:46 AM JST
import xcb, xcb.xproto
from xcb2.xproto import GetAtomNameCookie, BadAtom
from xcb2.xproto.wcookie import WrapGetAtomNameCookie
from xcb2.xproto.ext import GetAtomName, GetAtomNameUnchecked
from xcb2.xproto.ext.getatomname import UseCache

* Thu 29 May 2014 08:08:54 AM JST
GetAtomName
* Thu 29 May 2014 08:09:01 AM JST
, BadAtom
* Thu 29 May 2014 08:09:15 AM JST
GetGeometryCookie
* Thu 29 May 2014 08:09:21 AM JST
GetAtomName, GetAtomNameUnchecked
* Thu 29 May 2014 08:09:32 AM JST

* Thu 29 May 2014 08:09:32 AM JST

* Thu 29 May 2014 08:09:32 AM JST
from xcb2.xproto.ext.getatomname import UseCache

* Thu 29 May 2014 08:10:04 AM JST

* Thu 29 May 2014 08:10:04 AM JST

* Thu 29 May 2014 08:10:04 AM JST
        print(repr(buf.getvalue()))

* Thu 29 May 2014 08:11:21 AM JST
52428822
* Thu 29 May 2014 08:11:28 AM JST
'\x00\x00\x00\x00\x16\x00 \x03'
* Thu 29 May 2014 08:12:02 AM JST
52428822
* Thu 29 May 2014 08:12:26 AM JST
    def setUp(self):
        self.args1 = [(5, ), '\x00\x00\x00\x00\x05\x00\x00\x00']
        self.args2 = [(39, ), "\x00\x00\x00\x00'\x00\x00\x00"]
        self.args3 = [(293, ), '\x00\x00\x00\x00%\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GetAtomName(self.conn)
        self.protocol_check = GetAtomNameUnchecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test GetAtomName binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test GetAtomName binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))
    def test_binary3(self):
        r"""Test GetAtomName binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass

* Thu 29 May 2014 08:12:40 AM JST
GetGeometry
* Thu 29 May 2014 08:12:54 AM JST
'\x00\x00\x00\x00\x16\x00 \x03'
* Thu 29 May 2014 08:13:00 AM JST
52428822
* Thu 29 May 2014 08:13:28 AM JST
75497475
* Thu 29 May 2014 08:13:38 AM JST
'\x00\x00\x00\x00\x03\x00\x80\x04'
* Thu 29 May 2014 08:13:50 AM JST
75497475
* Thu 29 May 2014 08:14:23 AM JST
77594627
* Thu 29 May 2014 08:14:33 AM JST
'\x00\x00\x00\x00\x03\x00\xa0\x04'
* Thu 29 May 2014 08:14:40 AM JST
77594627
* Thu 29 May 2014 08:16:08 AM JST
        self.argsbin = [(5, ), '\x00\x00\x00\x00\x05\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GetAtomName(self.conn)
        self.protocol_check = GetAtomNameUnchecked(self.conn)
        self.cookie = GetAtomNameCookie
        self.mocker.replay()

* Thu 29 May 2014 08:16:16 AM JST
[(52428822, ), '\x00\x00\x00\x00\x16\x00 \x03']
* Thu 29 May 2014 08:16:26 AM JST
        self.conn = xcb.connect()
        self.protocol = GetGeometry(self.conn)
        self.protocol_check = GetGeometryUnchecked(self.conn)

* Thu 29 May 2014 08:16:31 AM JST

* Thu 29 May 2014 08:16:32 AM JST

* Thu 29 May 2014 08:16:32 AM JST
        self.conn = xcb.connect()

* Thu 29 May 2014 08:16:35 AM JST
GetAtomName
* Thu 29 May 2014 08:16:45 AM JST
Cookie
* Thu 29 May 2014 08:16:55 AM JST
    def test_call(self):
        r"""Test GetAtomName.__call__() expect return WrapGetAtomNameCookie."""
        cookie = self.protocol(*self.argsbin[0])
        self.assertIsInstance(cookie, WrapGetAtomNameCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' WrapGetAtomNameCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

* Thu 29 May 2014 08:17:05 AM JST
GetAtomName
* Thu 29 May 2014 08:17:22 AM JST
Cookie
* Thu 29 May 2014 08:17:35 AM JST
WrapGetGeometryCookie
* Thu 29 May 2014 08:18:07 AM JST
    def test_request(self, ):
        r"""Test GetAtomName.request() expect return GetAtomNameCookie."""
        cookie = self.protocol.request(self.argsbin[1])
        self.assertIsInstance(cookie, GetAtomNameCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' GetAtomNameCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1], cookie))

    def test_checkedrequest(self, ):
        r"""Test GetAtomName.request() expect return GetAtomNameCookie."""
        cookie = self.protocol_check.request(self.argsbin[1])
        self.assertIsInstance(cookie, GetAtomNameCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' GetAtomNameCookie\ngot: {2}'
                              .format(self.protocol_check.__class__.__name__,
                                      self.argsbin[1], cookie))

* Thu 29 May 2014 08:18:46 AM JST
self.cookie
* Thu 29 May 2014 08:20:34 AM JST
    def test_badatom(self, ):
        r"""Test BadAtom."""
        with self.assertRaises(BadAtom):
            self.protocol(0).reply()


* Thu 29 May 2014 08:20:48 AM JST
        self.conn = xcb.connect()
        self.protocol = GetAtomName(self.conn)
        self.protocol_check = GetAtomNameUnchecked(self.conn)

* Thu 29 May 2014 08:20:53 AM JST

* Thu 29 May 2014 08:20:53 AM JST

* Thu 29 May 2014 08:20:53 AM JST
        self.protocol_check = GetAtomNameUnchecked(self.conn)

* Thu 29 May 2014 08:23:03 AM JST
GetGeometry
drawable: DRAWABLE
Æ
root: WINDOW
depth: CARD8
x, y: INT16
width, height, border-width: CARD16
Errors: Drawable
This request returns the root and current geometry of the drawable. The depth is the number of
bits per pixel for the object. The x, y, and border-width will always be zero for pixmaps. For a
window, the x and y coordinates specify the upper-left outer corner of the window relative to its
parent’s origin, and the width and height specify the inside size, not including the border.
It is legal to pass an InputOnly window asadrawable to this request.
* Thu 29 May 2014 08:29:36 AM JST
.reply()
* Thu 29 May 2014 08:29:37 AM JST
77594629).reply()
* Thu 29 May 2014 08:29:37 AM JST
GetGeometry(77594629).reply()
* Thu 29 May 2014 08:30:20 AM JST
window
* Thu 29 May 2014 08:30:35 AM JST

* Thu 29 May 2014 08:30:35 AM JST

* Thu 29 May 2014 08:30:35 AM JST
        - [yas] elisp error!:

* Thu 29 May 2014 08:30:35 AM JST
        - [yas] elisp error!:

* Thu 29 May 2014 08:30:35 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 08:30:35 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 08:30:35 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 08:30:35 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 08:30:35 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 08:30:37 AM JST

* Thu 29 May 2014 08:30:37 AM JST

* Thu 29 May 2014 08:30:37 AM JST
        - [yas] elisp error!:

* Thu 29 May 2014 08:30:37 AM JST
        - [yas] elisp error!:

* Thu 29 May 2014 08:30:37 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 08:30:37 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 08:30:37 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 08:30:37 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 08:30:37 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 08:33:44 AM JST
focus
* Thu 29 May 2014 08:33:44 AM JST
reply().focus
* Thu 29 May 2014 08:34:19 AM JST
    def check(self, ):
        r"""SUMMARY

        check()

        @Return:
        """
        return self._cookie.check()


* Thu 29 May 2014 08:34:46 AM JST
    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:
        """
        reply = self._cookie.reply()
        reply.atom = self._cookie.atom
        return wreply.WrapGetAtomNameReply(self._connection, reply)

* Thu 29 May 2014 08:34:54 AM JST

* Thu 29 May 2014 08:34:54 AM JST

* Thu 29 May 2014 08:34:54 AM JST
        reply.atom = self._cookie.atom

* Thu 29 May 2014 08:34:58 AM JST
self._cookie.reply()
* Thu 29 May 2014 08:35:04 AM JST

* Thu 29 May 2014 08:35:04 AM JST

* Thu 29 May 2014 08:35:04 AM JST
        reply = 

* Thu 29 May 2014 08:36:05 AM JST
self.
* Thu 29 May 2014 08:36:17 AM JST
Window(self.connection, self._raw.root)
* Thu 29 May 2014 08:36:21 AM JST
root
* Thu 29 May 2014 08:36:33 AM JST
revert_to
* Thu 29 May 2014 08:37:18 AM JST
.get_types()
* Thu 29 May 2014 08:37:28 AM JST
WrapGetInputFocusReply
* Thu 29 May 2014 08:37:35 AM JST
WrapGetInputFocusCookie
* Thu 29 May 2014 08:38:01 AM JST
WrapGetInputFocusCookie
* Thu 29 May 2014 08:38:26 AM JST
            
* Thu 29 May 2014 08:38:47 AM JST

* Thu 29 May 2014 08:38:47 AM JST

* Thu 29 May 2014 08:38:47 AM JST
    _head = _pack('')

* Thu 29 May 2014 08:39:09 AM JST
'=xx2x'
* Thu 29 May 2014 08:39:30 AM JST
self._binary
* Thu 29 May 2014 08:39:33 AM JST

* Thu 29 May 2014 08:39:33 AM JST

* Thu 29 May 2014 08:39:33 AM JST
        buf = _StringIO()

* Thu 29 May 2014 08:39:33 AM JST
        buf = _StringIO()

* Thu 29 May 2014 08:39:33 AM JST
        buf = _StringIO()
        buf.write(self._binary)

* Thu 29 May 2014 08:40:08 AM JST

* Thu 29 May 2014 08:40:08 AM JST

* Thu 29 May 2014 08:40:08 AM JST
from cStringIO import StringIO as _StringIO

* Thu 29 May 2014 08:40:33 AM JST
import xcb2
c=xcb2.connect()

* Thu 29 May 2014 08:41:41 AM JST
/list 
* Thu 29 May 2014 08:43:09 AM JST
windo
* Thu 29 May 2014 08:43:13 AM JST
/list 
* Thu 29 May 2014 08:44:01 AM JST
.get_types()
* Thu 29 May 2014 09:00:23 AM JST
GetProperty
window: WINDOW
property: ATOM
type: ATOM or AnyPropertyType
long-offset, long-length: CARD32
delete: BOOL
Æ
type: ATOM or None
format: {0, 8, 16, 32}
bytes-after: CARD32
value: LISTofINT8 or LISTofINT16 or LISTofINT32
Errors: Atom, Value, Window
If the speciﬁed property does not exist for the speciﬁed window, then the return type is None, the
format and bytes-after are zero, and the value is empty. The delete argument is ignored in this
case. If the speciﬁed property exists but its type does not match the speciﬁed type, then the return
type is the actual type of the property, the format is the actual format of the property (never zero),
the bytes-after is the length of the property in bytes (even if the format is 16 or 32), and the value
is empty. The delete argument is ignored in this case. If the speciﬁed property exists and either
AnyPropertyType is speciﬁed or the speciﬁed type matches the actual type of the property, then
the return type is the actual type of the property, the format is the actual format of the property
(never zero), and the bytes-after and value are as follows, given:
* Thu 29 May 2014 09:01:28 AM JST
N=actual length of the stored property in bytes
(even if the format is 16 or 32)
I=4*long-offset
T=N−I
L=MINIMUM(T,4*long-length)
A=N−(I+L)
The returned value starts at byte indexIin the property (indexing from 0), and its length in bytes
is L. However, it is a Value error if long-offset is given such that L is negative. The value of
bytes-after is A, giving the number of trailing unread bytes in the stored property. If delete is
True and the bytes-after is zero, the property is also deleted from the window, and a
* Thu 29 May 2014 09:02:23 AM JST
ev ent is generated on the window.

* Thu 29 May 2014 09:07:31 AM JST
    def setUp(self):
        self.args1 = [(5, ), '\x00\x00\x00\x00\x05\x00\x00\x00']
        self.args2 = [(39, ), "\x00\x00\x00\x00'\x00\x00\x00"]
        self.args3 = [(293, ), '\x00\x00\x00\x00%\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GetAtomName(self.conn)
        self.protocol_check = GetAtomNameUnchecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test GetAtomName binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test GetAtomName binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))
    def test_binary3(self):
        r"""Test GetAtomName binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass

* Thu 29 May 2014 09:07:44 AM JST
import xcb, xcb.xproto
from xcb2.xproto import GetAtomNameCookie, BadAtom
from xcb2.xproto.wcookie import WrapGetAtomNameCookie
from xcb2.xproto.ext import GetAtomName, GetAtomNameUnchecked

* Thu 29 May 2014 09:08:11 AM JST
GetAtomName, GetAtomNameUnchecked
* Thu 29 May 2014 09:08:18 AM JST
GetAtomName
* Thu 29 May 2014 09:08:22 AM JST
GetAtomName
* Thu 29 May 2014 09:08:28 AM JST
GetProperty
* Thu 29 May 2014 09:09:03 AM JST

* Thu 29 May 2014 09:09:03 AM JST

* Thu 29 May 2014 09:09:03 AM JST
        print(repr(buf.getvalue()))

* Thu 29 May 2014 09:09:43 AM JST
GetProperty
* Thu 29 May 2014 09:11:05 AM JST
'WM_NAME'
* Thu 29 May 2014 09:11:25 AM JST
D 
* Thu 29 May 2014 09:11:31 AM JST
D 
* Thu 29 May 2014 09:12:17 AM JST
"\x00\x00\x00\x00\x07\xb2\x01\x00'\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
* Thu 29 May 2014 09:13:04 AM JST
"\x00\x00\x00\x00\xe2\x01\x00\x00'\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
* Thu 29 May 2014 09:13:45 AM JST
False, 482, 39, 31, 0, 0
* Thu 29 May 2014 09:22:46 AM JST

* Thu 29 May 2014 09:22:48 AM JST
getproperty
* Thu 29 May 2014 09:24:37 AM JST
UseCache
* Thu 29 May 2014 09:25:47 AM JST

* Thu 29 May 2014 09:25:47 AM JST

* Thu 29 May 2014 09:25:47 AM JST
from xcb2.xproto.ext.internatom import InternAtom, InternAtomUnchecked, UseCache

* Thu 29 May 2014 09:25:50 AM JST

* Thu 29 May 2014 09:25:51 AM JST

* Thu 29 May 2014 09:25:51 AM JST
import xcb, xcb.xproto

* Thu 29 May 2014 09:25:58 AM JST

* Thu 29 May 2014 09:25:58 AM JST

* Thu 29 May 2014 09:25:58 AM JST
        self.conn.core.InternAtom.usecache = UseCache(InternAtom(self.conn))

* Thu 29 May 2014 09:28:04 AM JST
'_NET_CLIENT_LIST'
* Thu 29 May 2014 09:29:20 AM JST
77594627
* Thu 29 May 2014 09:29:30 AM JST
print 
* Thu 29 May 2014 09:29:33 AM JST
'\x00\x00\x00\x00\x03\x00\xa0\x04_\x01\x00\x00!\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 09:30:00 AM JST
                      
* Thu 29 May 2014 09:30:15 AM JST
(False, 77594627, 351, 33, 0, 0)
* Thu 29 May 2014 09:30:46 AM JST
'_NET_ACTIVE_WINDOW'
* Thu 29 May 2014 09:31:25 AM JST
'\x00\x00\x00\x00\x03\x00\xa0\x04\x1d\x01\x00\x00!\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 09:31:46 AM JST
(False, 77594627, 285, 33, 0, 0)
* Thu 29 May 2014 09:33:02 AM JST
        r"""Test ConfigureWindow.__call__() expect return VoidCookie."""
        self.assertIsInstance(self.protocol(*self.args), self.cookie,
                              msg='Failed: {0}({1}) not returned {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.args)
                                      .replace('(', '').replace(')', ''),
                                      VoidCookie.__class__.__name__))

* Thu 29 May 2014 09:33:08 AM JST
ConfigureWindow
* Thu 29 May 2014 09:33:52 AM JST
GetPropertyCookie(), GetPropertyReply
* Thu 29 May 2014 09:35:08 AM JST
GetPropertyCookie
* Thu 29 May 2014 09:35:22 AM JST
self.window = simple_teswindow()
* Thu 29 May 2014 09:35:31 AM JST
        self.conn = xcb2.connect()
        self.protocol = GetProperty(self.conn)
        self.protocol_check = GetPropertyUnchecked(self.conn)

* Thu 29 May 2014 09:35:42 AM JST
        self.args1 = [(False, 482, 39, 31, 0, 0),
                     "\x00\x00\x00\x00\xe2\x01\x00\x00'\x00\x00\x00\x1f"
                      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"]

* Thu 29 May 2014 09:35:56 AM JST

* Thu 29 May 2014 09:35:56 AM JST

* Thu 29 May 2014 09:35:56 AM JST
                     "\x00\x00\x00\x00\xe2\x01\x00\x00'\x00\x00\x00\x1f"

* Thu 29 May 2014 09:35:56 AM JST
                     "\x00\x00\x00\x00\xe2\x01\x00\x00'\x00\x00\x00\x1f"

* Thu 29 May 2014 09:35:57 AM JST
                     "\x00\x00\x00\x00\xe2\x01\x00\x00'\x00\x00\x00\x1f"
                      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"]

* Thu 29 May 2014 09:35:57 AM JST
                     "\x00\x00\x00\x00\xe2\x01\x00\x00'\x00\x00\x00\x1f"
                      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"]

* Thu 29 May 2014 09:35:57 AM JST
                     "\x00\x00\x00\x00\xe2\x01\x00\x00'\x00\x00\x00\x1f"
                      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"]
        self.conn = xcb2.connect()

* Thu 29 May 2014 09:36:05 AM JST
from xcb2.tests import simple_teswindow
* Thu 29 May 2014 09:36:48 AM JST
VoidCookie
* Thu 29 May 2014 09:37:12 AM JST
GetPropertyCookie
* Thu 29 May 2014 09:37:25 AM JST
GetPropertyCookie.""
* Thu 29 May 2014 09:37:26 AM JST
GetPropertyCookie
* Thu 29 May 2014 09:37:43 AM JST
        self.conn.core.DestroyWindow(self.window)
        self.conn.flush()

* Thu 29 May 2014 09:39:47 AM JST
[(False, 482, 39, 31, 0, 0),
                     "\x00\x00\x00\x00\xe2\x01\x00\x00'\x00\x00\x00\x1f"
                      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"]
* Thu 29 May 2014 09:40:21 AM JST
    def test_request(self, ):
        r"""Test ConfigureWindow.request() expect return VoidCookie."""
        buf = StringIO()
        buf.write(pack('=xx2xIH2x', self.args[0], self.args[1]))
        buf.write(str(buffer(array('I', self.args[2]))))
        self.assertIsInstance(self.protocol.request(buf.getvalue()),
                              self.cookie,
                              msg='Failed: {0}.request("{0}") not return {1}'
                              .format(self.protocol.__class__.__name__,
                                      self.args,
                                      self.cookie.__class__.__name__))


* Thu 29 May 2014 09:40:29 AM JST
GetProperty
* Thu 29 May 2014 09:40:38 AM JST
'GetPropertyCookie'
* Thu 29 May 2014 09:42:14 AM JST
    def test_request(self, ):
        r"""Test GetProperty.request() expect return GetPropertyCookie."""
        self.assertIsInstance(self.protocol.request(self.argsbin[1]),
                              self.cookie,
                              msg='Failed: {0}.request("{0}") not return {1}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1],
                                      'GetPropertyCookie'))

* Thu 29 May 2014 10:36:15 AM JST
GetPropertyMethod
* Thu 29 May 2014 10:37:10 AM JST
    def setUp(self):
        self.args1 = [(False, 482, 39, 31, 0, 0),
                     "\x00\x00\x00\x00\xe2\x01\x00\x00'\x00\x00\x00\x1f"
                      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"]
        self.args2 = [(False, 77594627, 351, 33, 0, 0),
                      '\x00\x00\x00\x00\x03\x00\xa0\x04_\x01\x00\x00!\x00'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00']
        self.args3 = [(False, 77594627, 285, 33, 0, 0),
                      '\x00\x00\x00\x00\x03\x00\xa0\x04\x1d\x01\x00\x00!\x00'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00']
        self.conn = xcb2.connect()
        self.protocol = GetProperty(self.conn)
        self.protocol_check = GetPropertyUnchecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test GetProperty binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test GetProperty binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))
    def test_binary3(self):
        r"""Test GetProperty binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass

* Thu 29 May 2014 10:37:21 AM JST
MethodBinary
* Thu 29 May 2014 10:37:23 AM JST
Method
* Thu 29 May 2014 10:38:27 AM JST
GetPropertyMethod
* Thu 29 May 2014 10:38:33 AM JST

* Thu 29 May 2014 10:38:34 AM JST

* Thu 29 May 2014 10:38:34 AM JST
        self.protocol_check = GetPropertyUnchecked(self.conn)

* Thu 29 May 2014 10:38:42 AM JST
False, 
* Thu 29 May 2014 10:38:55 AM JST
482, 
* Thu 29 May 2014 10:39:12 AM JST
False, 
* Thu 29 May 2014 10:39:15 AM JST
351,
* Thu 29 May 2014 10:39:23 AM JST
False, 
* Thu 29 May 2014 10:39:26 AM JST
285,
* Thu 29 May 2014 10:40:42 AM JST
, 0, 0
* Thu 29 May 2014 10:41:49 AM JST
        self.conn = xcb2.connect()
        self.protocol = GetPropertyMethod(GetProperty(self.conn))

* Thu 29 May 2014 10:41:58 AM JST
self.conn
* Thu 29 May 2014 10:42:27 AM JST
self.conn.core.InternAtom.usecache
* Thu 29 May 2014 10:43:30 AM JST
482,
* Thu 29 May 2014 10:43:32 AM JST
482,
* Thu 29 May 2014 10:43:39 AM JST
77594627,
* Thu 29 May 2014 10:43:47 AM JST
77594627,
* Thu 29 May 2014 10:46:34 AM JST
        self.conn = xcb2.connect()
        self.protocol = GetPropertyMethod(GetProperty(self.conn))
        self.args1 = [(482, self.conn.core.InternAtom.usecache(39), 0, 0),
                     "\x00\x00\x00\x00\xe2\x01\x00\x00'\x00\x00\x00\x1f"
                      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"]
        self.args2 = [(77594627, self.conn.core.InternAtom.usecache(351), 0, 0),
                      '\x00\x00\x00\x00\x03\x00\xa0\x04_\x01\x00\x00!\x00'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00']
        self.args3 = [(77594627, self.conn.core.InternAtom.usecache(285), 0, 0),
                      '\x00\x00\x00\x00\x03\x00\xa0\x04\x1d\x01\x00\x00!\x00'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00']

* Thu 29 May 2014 10:47:47 AM JST
77594627
* Thu 29 May 2014 10:48:10 AM JST
False
* Thu 29 May 2014 10:48:27 AM JST
"\x00\x01\x00\x00\x03\x00\xa0\x04'\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
* Thu 29 May 2014 10:50:34 AM JST
Test GetPropertyMethod
* Thu 29 May 2014 10:51:54 AM JST
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

* Thu 29 May 2014 10:54:00 AM JST
Test GetPropertyMethod
* Thu 29 May 2014 10:59:00 AM JST
class WrapGetPropertyCookie(object):
    r"""SUMMARY
    """

    def __init__(self, connection, cookie):
        r"""

        @Arguments:
        - `core`:
        - `cookie`:
        - `window`:
        - `prop`:
        """
        self._connection = connection
        self._cookie = cookie

    def check(self, ):
        r"""SUMMARY

        check()

        @Return:
        """
        return self._cookie.check()

    def reply(self, ):
        r"""SUMMARY

        reply()

        @Return:
        """
        rep = self._cookie.reply()
        rep.window, rep.property = self._cookie.window, self._cookie.property
        return self._cookie.property.types(self._connection, rep)

* Thu 29 May 2014 10:59:11 AM JST
WrapCookieAbstract
* Thu 29 May 2014 11:05:39 AM JST
WrapGetAtomNameCookie
* Thu 29 May 2014 11:07:07 AM JST
binary = self.protocol._getbinary(*self.args1[0])
* Thu 29 May 2014 11:07:32 AM JST
        self.assertIsInstance(self.protocol.request(self.argsbin[1]),
                              self.cookie,
                              msg='Failed: {0}.request("{0}") not return {1}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1],
                                      'GetPropertyCookie'))

* Thu 29 May 2014 11:07:41 AM JST
WrapGetAtomNameCookie
* Thu 29 May 2014 11:08:21 AM JST
request
* Thu 29 May 2014 11:09:02 AM JST
binary
* Thu 29 May 2014 11:09:09 AM JST
WrapGetAtomNameCookie
* Thu 29 May 2014 11:09:13 AM JST
                              
* Thu 29 May 2014 11:09:51 AM JST
                                      
* Thu 29 May 2014 11:12:51 AM JST
77594627, 
* Thu 29 May 2014 11:14:15 AM JST
WrapGetAtomName
* Thu 29 May 2014 11:14:25 AM JST
Cookie
* Thu 29 May 2014 11:14:43 AM JST
Cookie
* Thu 29 May 2014 11:14:45 AM JST
GetAtomNameCookie, 
* Thu 29 May 2014 11:14:54 AM JST
WrapGetPropertyCookie
* Thu 29 May 2014 11:15:12 AM JST
BadAtom, 
* Thu 29 May 2014 11:23:22 AM JST
GetWM_NAME
* Thu 29 May 2014 11:26:49 AM JST
        self.conn = xcb2.connect()
        self.protocol = GetPropertyMethod(GetProperty(self.conn))

* Thu 29 May 2014 11:26:59 AM JST
GetPropertyMethod(
* Thu 29 May 2014 11:27:02 AM JST
protocol
* Thu 29 May 2014 11:28:13 AM JST
"\x00\x00\x00\x00\xe2\x01\x00\x00'\x00\x00\x00\x1f"
                      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
* Thu 29 May 2014 11:29:39 AM JST
"\x00\x00\x00\x00\xe2\x01\x00\x00'\x00\x00\x00\x1f"
                      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
* Thu 29 May 2014 11:31:37 AM JST
        expectbin = ("\x00\x00\x00\x00\xe2\x01\x00\x00'\x00\x00\x00\x1f"
                      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")

* Thu 29 May 2014 11:31:44 AM JST
binary, 
* Thu 29 May 2014 11:32:01 AM JST
protocol
* Thu 29 May 2014 11:32:17 AM JST
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary))
* Thu 29 May 2014 11:32:30 AM JST
    
* Thu 29 May 2014 11:32:38 AM JST
self.
* Thu 29 May 2014 11:32:45 AM JST
self.
* Thu 29 May 2014 11:33:38 AM JST
1]
* Thu 29 May 2014 11:33:38 AM JST
args1[1]
* Thu 29 May 2014 11:33:38 AM JST
self.args1[1]
* Thu 29 May 2014 11:33:48 AM JST
binary
* Thu 29 May 2014 12:24:26 PM JST
rawconnection.core.GetProperty(True, 77594627, 39, 31, 0, 0)
* Thu 29 May 2014 12:24:29 PM JST
77594627
* Thu 29 May 2014 12:24:33 PM JST
True
* Thu 29 May 2014 12:24:54 PM JST
c.core.atomidentify(name)
* Thu 29 May 2014 12:25:43 PM JST
'WM_LOCALE_NAME'
* Thu 29 May 2014 12:25:58 PM JST
'WM_ICON_NAME'
* Thu 29 May 2014 12:26:03 PM JST
'WM_CLASS'
* Thu 29 May 2014 12:26:08 PM JST
'WM_TRANSIENT_FOR'
* Thu 29 May 2014 12:26:14 PM JST
'WM_PROTOCOLS'
* Thu 29 May 2014 12:26:19 PM JST
'WM_COLORMAP_WINDOWS'
* Thu 29 May 2014 12:26:26 PM JST
'WM_CLIENT_MACHINE'
* Thu 29 May 2014 12:26:31 PM JST
'WM_STATE'
* Thu 29 May 2014 12:26:36 PM JST
'_WIN_WORKSPACE'
* Thu 29 May 2014 12:26:42 PM JST
'_WIN_STATE'
* Thu 29 May 2014 12:26:47 PM JST
'_NET_SUPPORTED'
* Thu 29 May 2014 12:26:52 PM JST
'_NET_CLIENT_LIST'
* Thu 29 May 2014 12:26:57 PM JST
'_NET_CLIENT_LIST_STACKING'
* Thu 29 May 2014 12:27:03 PM JST
'_NET_NUMBER_OF_DESKTOPS'
* Thu 29 May 2014 12:27:10 PM JST
'_NET_DESKTOP_GEOMETRY'
* Thu 29 May 2014 12:27:17 PM JST
'_NET_DESKTOP_VIEWPORT'
* Thu 29 May 2014 12:27:22 PM JST
'_NET_CURRENT_DESKTOP'
* Thu 29 May 2014 12:27:28 PM JST
'_NET_DESKTOP_NAMES'
* Thu 29 May 2014 12:27:33 PM JST
'_NET_ACTIVE_WINDOW'
* Thu 29 May 2014 12:27:39 PM JST
'_NET_WORKAREA'
* Thu 29 May 2014 12:27:44 PM JST
'_NET_SUPPORTING_WM_CHECK'
* Thu 29 May 2014 12:27:49 PM JST
'_NET_VIRTUAL_ROOTS'
* Thu 29 May 2014 12:27:55 PM JST
'_NET_DESKTOP_LAYOUT'
* Thu 29 May 2014 12:28:00 PM JST
'_NET_SHOWING_DESKTOP'
* Thu 29 May 2014 12:28:05 PM JST
'_NET_CLOSE_WINDOW'
* Thu 29 May 2014 12:28:11 PM JST
'_NET_MOVERESIZE_WINDOW'
* Thu 29 May 2014 12:28:17 PM JST
'_NET_WM_MORERESIZE'
* Thu 29 May 2014 12:28:22 PM JST
'_NET_RESTACK_WINDOW'
* Thu 29 May 2014 12:28:29 PM JST
'_NET_REQUEST_FRAME_EXTENTS'
* Thu 29 May 2014 12:28:35 PM JST
'_NET_WM_NAME'
* Thu 29 May 2014 12:28:41 PM JST
'_NET_WM_VISIBLE_NAME'
* Thu 29 May 2014 12:28:47 PM JST
'_NET_WM_ICON_NAME'
* Thu 29 May 2014 12:28:58 PM JST
'_NET_WM_VISIBLE_ICON_NAME'
* Thu 29 May 2014 12:29:02 PM JST
'_NET_WM_DESKTOP'
* Thu 29 May 2014 12:29:09 PM JST
'_NET_WM_WINDOW_TYPE'
* Thu 29 May 2014 12:29:14 PM JST
'_NET_WM_STATE'
* Thu 29 May 2014 12:29:21 PM JST
'_NET_WM_ALLOWED_ACTIONS'
* Thu 29 May 2014 12:29:27 PM JST
'_NET_WM_STRUT'
* Thu 29 May 2014 12:29:31 PM JST
'_NET_WM_STRUT_PARTIAL'
* Thu 29 May 2014 12:29:37 PM JST
'_NET_WM_ICON_GEOMETRY'
* Thu 29 May 2014 12:29:44 PM JST
'_NET_WM_ICON'
* Thu 29 May 2014 12:29:52 PM JST
'_NET_WM_PID'
* Thu 29 May 2014 12:29:58 PM JST
'_NET_WM_HANDLED_ICONS'
* Thu 29 May 2014 12:30:04 PM JST
'_NET_WM_USER_TIME'
* Thu 29 May 2014 12:30:09 PM JST
'_NET_WM_USER_TIME_WINDOW'
* Thu 29 May 2014 12:30:14 PM JST
'_NET_FRAME_EXTENTS'
* Thu 29 May 2014 12:30:19 PM JST
'_OB_APP_TYPE'
* Thu 29 May 2014 12:31:06 PM JST
    def test_WM_NAME_binary(self):
        r"""WM_NAME_binary
        """
        protocol = GetWM_NAME(self.getproperty)
        expectbin = ("\x00\x00\x00\x00\xe2\x01\x00\x00'\x00\x00\x00\x1f"
                      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
        binary = protocol._getbinary(482, long_length=0)
        self.assertEqual(expectbin, binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}():\n'
                         'Expected: "{2}"\nReturned: "{3}"'
                         .format(protocol, protocol._getbinary,
                                 repr(expectbin), repr(binary)))


* Thu 29 May 2014 12:31:22 PM JST
        
* Thu 29 May 2014 12:31:30 PM JST

* Thu 29 May 2014 12:31:30 PM JST

* Thu 29 May 2014 12:31:30 PM JST
        r"""WM_NAME_binary

* Thu 29 May 2014 12:31:30 PM JST
        r"""WM_NAME_binary

* Thu 29 May 2014 12:31:30 PM JST
        r"""WM_NAME_binary
        """

* Thu 29 May 2014 12:31:32 PM JST
        r"""Test GetWM_NAME binary."""
* Thu 29 May 2014 12:31:51 PM JST
$1
* Thu 29 May 2014 12:32:39 PM JST
WM_LOCALE_NAME
* Thu 29 May 2014 12:32:51 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x19\x01\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:32:58 PM JST
WM_ICON_NAME
* Thu 29 May 2014 12:33:04 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00%\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:33:10 PM JST
WM_CLASS
* Thu 29 May 2014 12:33:16 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00C\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:33:20 PM JST
WM_TRANSIENT_FOR
* Thu 29 May 2014 12:33:25 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00D\x00\x00\x00!\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:33:29 PM JST
WM_PROTOCOLS
* Thu 29 May 2014 12:33:34 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x1a\x01\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:33:39 PM JST
WM_COLORMAP_WINDOWS
* Thu 29 May 2014 12:33:45 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x96\x01\x00\x00!\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:33:49 PM JST
WM_CLIENT_MACHINE
* Thu 29 May 2014 12:33:52 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00$\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:33:57 PM JST
WM_STATE
* Thu 29 May 2014 12:34:01 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x97\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:34:06 PM JST
_WIN_WORKSPACE
* Thu 29 May 2014 12:34:11 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x93\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:34:16 PM JST
_WIN_STATE
* Thu 29 May 2014 12:34:20 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x91\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:34:26 PM JST
_NET_SUPPORTED
* Thu 29 May 2014 12:34:30 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00j\x01\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:34:35 PM JST
_NET_CLIENT_LIST
* Thu 29 May 2014 12:34:40 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00_\x01\x00\x00!\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:34:44 PM JST
_NET_CLIENT_LIST_STACKING
* Thu 29 May 2014 12:34:49 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00`\x01\x00\x00!\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:34:53 PM JST
_NET_NUMBER_OF_DESKTOPS
* Thu 29 May 2014 12:34:56 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00g\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:35:02 PM JST
_NET_DESKTOP_GEOMETRY
* Thu 29 May 2014 12:35:07 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00b\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:35:11 PM JST
_NET_DESKTOP_VIEWPORT
* Thu 29 May 2014 12:35:16 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00e\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:35:19 PM JST
_NET_CURRENT_DESKTOP
* Thu 29 May 2014 12:35:24 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x1e\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:35:28 PM JST
_NET_DESKTOP_NAMES
* Thu 29 May 2014 12:35:35 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00d\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:35:40 PM JST
_NET_ACTIVE_WINDOW
* Thu 29 May 2014 12:35:46 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x1d\x01\x00\x00!\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:35:49 PM JST
_NET_WORKAREA
* Thu 29 May 2014 12:35:54 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x8b\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:35:58 PM JST
_NET_SUPPORTING_WM_CHECK
* Thu 29 May 2014 12:36:03 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00k\x01\x00\x00!\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:36:07 PM JST
_NET_VIRTUAL_ROOTS
* Thu 29 May 2014 12:36:11 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x007\x01\x00\x00!\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:36:15 PM JST
_NET_DESKTOP_LAYOUT
* Thu 29 May 2014 12:36:19 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00c\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:36:23 PM JST
_NET_SHOWING_DESKTOP
* Thu 29 May 2014 12:36:27 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00i\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:36:31 PM JST
_NET_CLOSE_WINDOW
* Thu 29 May 2014 12:36:35 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00a\x01\x00\x00\\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:36:39 PM JST
_NET_MOVERESIZE_WINDOW
* Thu 29 May 2014 12:36:42 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00f\x01\x00\x00\\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:36:47 PM JST
_NET_WM_MORERESIZE
* Thu 29 May 2014 12:36:52 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:36:55 PM JST
_NET_RESTACK_WINDOW
* Thu 29 May 2014 12:36:58 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\\\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:37:01 PM JST
_NET_REQUEST_FRAME_EXTENTS
* Thu 29 May 2014 12:37:05 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00h\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:37:09 PM JST
_NET_WM_NAME
* Thu 29 May 2014 12:37:14 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00%\x01\x00\x00\x16\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:37:17 PM JST
_NET_WM_VISIBLE_NAME
* Thu 29 May 2014 12:37:22 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\xba\x01\x00\x00\x16\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:37:25 PM JST
_NET_WM_ICON_NAME
* Thu 29 May 2014 12:37:29 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00$\x01\x00\x00\x16\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:37:34 PM JST
_NET_WM_VISIBLE_ICON_NAME
* Thu 29 May 2014 12:37:38 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\xbb\x01\x00\x00\x16\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:37:42 PM JST
_NET_WM_DESKTOP
* Thu 29 May 2014 12:37:46 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00"\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:37:49 PM JST
_NET_WM_WINDOW_TYPE
* Thu 29 May 2014 12:37:52 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x004\x01\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:37:57 PM JST
_NET_WM_STATE
* Thu 29 May 2014 12:38:02 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00(\x01\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:38:05 PM JST
_NET_WM_ALLOWED_ACTIONS
* Thu 29 May 2014 12:38:09 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00x\x01\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:38:13 PM JST
_NET_WM_STRUT
* Thu 29 May 2014 12:38:17 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x82\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:38:21 PM JST
_NET_WM_STRUT_PARTIAL
* Thu 29 May 2014 12:38:25 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x83\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:38:29 PM JST
_NET_WM_ICON_GEOMETRY
* Thu 29 May 2014 12:38:32 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00{\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:38:36 PM JST
_NET_WM_ICON
* Thu 29 May 2014 12:38:39 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00#\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:38:44 PM JST
_NET_WM_PID
* Thu 29 May 2014 12:38:48 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00&\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:38:53 PM JST
_NET_WM_HANDLED_ICONS
* Thu 29 May 2014 12:38:58 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:39:02 PM JST
_NET_WM_USER_TIME
* Thu 29 May 2014 12:39:05 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x006\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:39:11 PM JST
_NET_WM_USER_TIME_WINDOW
* Thu 29 May 2014 12:39:20 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00C\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:39:26 PM JST
_NET_FRAME_EXTENTS
* Thu 29 May 2014 12:39:31 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x1f\x01\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:39:37 PM JST
_OB_APP_TYPE
* Thu 29 May 2014 12:39:41 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x16\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Thu 29 May 2014 12:40:17 PM JST
GetWM_LOCALE_NAME
* Thu 29 May 2014 12:40:22 PM JST
GetWM_ICON_NAME
* Thu 29 May 2014 12:40:26 PM JST
GetWM_CLASS
* Thu 29 May 2014 12:40:30 PM JST
GetWM_TRANSIENT_FOR
* Thu 29 May 2014 12:40:36 PM JST
GetWM_PROTOCOLS
* Thu 29 May 2014 12:40:41 PM JST
GetWM_COLORMAP_WINDOWS
* Thu 29 May 2014 12:40:45 PM JST
GetWM_CLIENT_MACHINE
* Thu 29 May 2014 12:40:49 PM JST
GetWM_STATE
* Thu 29 May 2014 12:40:53 PM JST
Get_WIN_WORKSPACE
* Thu 29 May 2014 12:40:56 PM JST
Get_WIN_STATE
* Thu 29 May 2014 12:41:02 PM JST
Get_NET_SUPPORTED
* Thu 29 May 2014 12:41:06 PM JST
Get_NET_CLIENT_LIST
* Thu 29 May 2014 12:41:10 PM JST
Get_NET_CLIENT_LIST_STACKING
* Thu 29 May 2014 12:41:14 PM JST
Get_NET_NUMBER_OF_DESKTOPS
* Thu 29 May 2014 12:41:19 PM JST
Get_NET_DESKTOP_GEOMETRY
* Thu 29 May 2014 12:41:24 PM JST
Get_NET_DESKTOP_VIEWPORT
* Thu 29 May 2014 12:41:29 PM JST
Get_NET_CURRENT_DESKTOP
* Thu 29 May 2014 12:41:33 PM JST
Get_NET_DESKTOP_NAMES
* Thu 29 May 2014 12:41:37 PM JST
Get_NET_ACTIVE_WINDOW
* Thu 29 May 2014 12:41:42 PM JST
Get_NET_WORKAREA
* Thu 29 May 2014 12:41:46 PM JST
Get_NET_SUPPORTING_WM_CHECK
* Thu 29 May 2014 12:42:08 PM JST
Get_NET_VIRTUAL_ROOTS
* Thu 29 May 2014 12:42:13 PM JST
Get_NET_DESKTOP_LAYOUT
* Thu 29 May 2014 12:42:17 PM JST
Get_NET_SHOWING_DESKTOP
* Thu 29 May 2014 12:42:21 PM JST

* Thu 29 May 2014 12:42:23 PM JST
Get_NET_CLOSE_WINDOW
* Thu 29 May 2014 12:42:30 PM JST
Get_NET_MOVERESIZE_WINDOW
* Thu 29 May 2014 12:42:36 PM JST
Get_NET_WM_MORERESIZE
* Thu 29 May 2014 12:42:41 PM JST
Get_NET_RESTACK_WINDOW
* Thu 29 May 2014 12:42:46 PM JST
Get_NET_REQUEST_FRAME_EXTENTS
* Thu 29 May 2014 12:42:50 PM JST
Get_NET_WM_NAME
* Thu 29 May 2014 12:42:55 PM JST
Get_NET_WM_VISIBLE_NAME
* Thu 29 May 2014 12:42:59 PM JST
Get_NET_WM_ICON_NAME
* Thu 29 May 2014 12:43:04 PM JST
Get_NET_WM_VISIBLE_ICON_NAME
* Thu 29 May 2014 12:43:08 PM JST
Get_NET_WM_DESKTOP
* Thu 29 May 2014 12:43:13 PM JST
Get_NET_WM_WINDOW_TYPE
* Thu 29 May 2014 12:43:17 PM JST
Get_NET_WM_STATE
* Thu 29 May 2014 12:43:21 PM JST
Get_NET_WM_ALLOWED_ACTIONS
* Thu 29 May 2014 12:43:24 PM JST
Get_NET_WM_STRUT
* Thu 29 May 2014 12:43:29 PM JST
Get_NET_WM_STRUT_PARTIAL
* Thu 29 May 2014 12:43:33 PM JST
Get_NET_WM_ICON_GEOMETRY
* Thu 29 May 2014 12:43:37 PM JST
Get_NET_WM_ICON
* Thu 29 May 2014 12:43:41 PM JST
Get_NET_WM_PID
* Thu 29 May 2014 12:43:45 PM JST
Get_NET_WM_HANDLED_ICONS
* Thu 29 May 2014 12:43:57 PM JST
Get_NET_WM_USER_TIME
* Thu 29 May 2014 12:44:01 PM JST
Get_NET_WM_USER_TIME_WINDOW
* Thu 29 May 2014 12:44:05 PM JST
Get_NET_FRAME_EXTENTS
* Thu 29 May 2014 12:44:10 PM JST
Get_OB_APP_TYPE
* Thu 29 May 2014 12:44:38 PM JST
    
* Thu 29 May 2014 12:47:03 PM JST
77594627)
* Thu 29 May 2014 12:47:05 PM JST
77594627
* Thu 29 May 2014 12:47:20 PM JST
self.conn.core.InternAtom.usecache(39)
* Thu 29 May 2014 12:51:13 PM JST

* Thu 29 May 2014 12:51:13 PM JST

* Thu 29 May 2014 12:51:13 PM JST
        - [yas] elisp error!:

* Thu 29 May 2014 12:51:13 PM JST
        - [yas] elisp error!:

* Thu 29 May 2014 12:51:13 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 12:51:13 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 12:51:13 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 12:51:14 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 12:51:14 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Thu 29 May 2014 12:57:47 PM JST

* Thu 29 May 2014 12:57:47 PM JST

* Thu 29 May 2014 12:57:47 PM JST
        print(repr(buf.getvalue()))

* Thu 29 May 2014 01:00:32 PM JST
NamedButtonIndex.Left
* Thu 29 May 2014 01:01:30 PM JST
xcb2.xproto.GrabMode.Async
* Thu 29 May 2014 01:02:49 PM JST
EventMask.ButtonPress
* Thu 29 May 2014 01:03:07 PM JST
c.rawconnection.core.GrabButton(False, 482, xcb2.xproto.EventMask.ButtonPress, 0, 0, 0, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:09 PM JST
Async)
* Thu 29 May 2014 01:03:10 PM JST
GrabMode.Async)
* Thu 29 May 2014 01:03:10 PM JST
xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:10 PM JST
xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:10 PM JST
Async, xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:10 PM JST
GrabMode.Async, xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:10 PM JST
xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:10 PM JST
xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:10 PM JST
0, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:11 PM JST
0, 0, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:11 PM JST
0, 0, 0, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:11 PM JST
ButtonPress, 0, 0, 0, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:11 PM JST
EventMask.ButtonPress, 0, 0, 0, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:11 PM JST
xproto.EventMask.ButtonPress, 0, 0, 0, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:11 PM JST
xcb2.xproto.EventMask.ButtonPress, 0, 0, 0, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:12 PM JST
482, xcb2.xproto.EventMask.ButtonPress, 0, 0, 0, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:12 PM JST
False, 482, xcb2.xproto.EventMask.ButtonPress, 0, 0, 0, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:03:26 PM JST
c.rawconnection.core.GrabButton(False, 482, xcb2.xproto.EventMask.ButtonPress, 0, 0, 0, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async)
* Thu 29 May 2014 01:04:30 PM JST
xcb2.xproto.
* Thu 29 May 2014 01:04:44 PM JST
NamedButtonIndex.Left
* Thu 29 May 2014 01:05:06 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
* Thu 29 May 2014 01:06:08 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
* Thu 29 May 2014 01:06:14 PM JST
False, 482, xcb2.xproto.EventMask.ButtonPress, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async, 0, 0, xcb2.xproto.NamedButtonIndex.Left, 0
* Thu 29 May 2014 01:06:39 PM JST
xcb2.xproto.NamedButtonIndex.Left
* Thu 29 May 2014 01:08:26 PM JST
    def setUp(self):
        self.args1 = [(False, 482, 39, 31, 0, 0),
                     "\x00\x00\x00\x00\xe2\x01\x00\x00'\x00\x00\x00\x1f"
                      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"]
        self.args2 = [(False, 77594627, 351, 33, 0, 0),
                      '\x00\x00\x00\x00\x03\x00\xa0\x04_\x01\x00\x00!\x00'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00']
        self.args3 = [(False, 77594627, 285, 33, 0, 0),
                      '\x00\x00\x00\x00\x03\x00\xa0\x04\x1d\x01\x00\x00!\x00'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00']
        self.conn = xcb2.connect()
        self.protocol = GetProperty(self.conn)
        self.protocol_check = GetPropertyUnchecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test GetProperty binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test GetProperty binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))
    def test_binary3(self):
        r"""Test GetProperty binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass

* Thu 29 May 2014 01:08:46 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00'
* Thu 29 May 2014 01:09:16 PM JST
False, 482, xcb2.xproto.EventMask.ButtonPress, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async, 0, 0, xcb2.xproto.NamedButtonIndex.Left, 0
* Thu 29 May 2014 01:09:50 PM JST
from xcb2.tests import simple_teswindow
import xcb2

* Thu 29 May 2014 01:13:17 PM JST
GrabButton
* Thu 29 May 2014 01:13:25 PM JST
GrabButtonChecked
* Thu 29 May 2014 01:14:38 PM JST
pass
* Thu 29 May 2014 01:15:56 PM JST
self.args1[7]
* Thu 29 May 2014 01:16:55 PM JST
self.args1[1]
* Thu 29 May 2014 01:17:01 PM JST

* Thu 29 May 2014 01:17:16 PM JST

* Thu 29 May 2014 01:18:08 PM JST
GrabButton
* Thu 29 May 2014 01:19:08 PM JST
[0]
* Thu 29 May 2014 01:22:42 PM JST
Left
* Thu 29 May 2014 01:23:21 PM JST
NamedKeyButMask
* Thu 29 May 2014 01:23:40 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x02\x00'
* Thu 29 May 2014 01:24:01 PM JST
77594627
* Thu 29 May 2014 01:25:48 PM JST
False, 482, xcb2.xproto.EventMask.ButtonRelease, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async, 0, 0, xcb2.xproto.NamedButtonIndex.Right, xcb2.xproto.NamedKeyButMask.Lock
* Thu 29 May 2014 01:26:43 PM JST
Left
* Thu 29 May 2014 01:26:54 PM JST
xcb2.xproto.NamedKeyButMask.Lock
* Thu 29 May 2014 01:29:04 PM JST
ButtonRelease
* Thu 29 May 2014 01:29:16 PM JST
Right
* Thu 29 May 2014 01:29:25 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02\x00'
* Thu 29 May 2014 01:29:38 PM JST
False, 482, xcb2.xproto.EventMask.ButtonPress, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async, 0, 0, xcb2.xproto.NamedButtonIndex.Middle, xcb2.xproto.NamedKeyButMask.Lock
* Thu 29 May 2014 01:30:09 PM JST
Right
* Thu 29 May 2014 01:45:46 PM JST
        self.args1 = [(False, 482, xcb2.xproto.EventMask.ButtonPress,
                       xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async,
                       0, 0, xcb2.xproto.NamedButtonIndex.Left, 0),
                     '\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00']
        self.args2 = [(False, 482, xcb2.xproto.EventMask.ButtonRelease,
                       xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async,
                       0, 0, xcb2.xproto.NamedButtonIndex.Right,
                       xcb2.xproto.NamedKeyButMask.Lock),
                      '\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x02\x00']
        self.args3 = [(False, 482, xcb2.xproto.EventMask.ButtonPress,
                       xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async,
                       0, 0, xcb2.xproto.NamedButtonIndex.Middle,
                       xcb2.xproto.NamedKeyButMask.Lock),
                      '\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                      '\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02\x00']
        self.conn = xcb.connect()
        self.protocol = GrabButton(self.conn)
        self.protocol_check = GrabButtonChecked(self.conn)
        self.mocker.replay()

* Thu 29 May 2014 01:46:10 PM JST
        r"""Test GetProperty.__call__() expect return GetPropertyCookie."""
        self.assertIsInstance(self.protocol(*self.argsbin[0]), self.cookie,
                              msg='Failed: {0}({1}) not returned {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      'GetPropertyCookie'))

* Thu 29 May 2014 01:46:21 PM JST
GetProperty.
* Thu 29 May 2014 01:46:54 PM JST
VoidCookie
* Thu 29 May 2014 01:47:44 PM JST
        self.conn.core.UngrabButton(
            self.args1[0][7], self.args1[0][1], self.args1[0][-1])

* Thu 29 May 2014 01:48:04 PM JST
self.conn.flush()
* Thu 29 May 2014 01:48:33 PM JST
    def test_request(self, ):
        r"""Test GetProperty.request() expect return GetPropertyCookie."""
        self.assertIsInstance(self.protocol.request(self.argsbin[1]),
                              self.cookie,
                              msg='Failed: {0}.request("{1}") not return {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1],
                                      'GetPropertyCookie'))

* Thu 29 May 2014 01:48:44 PM JST

* Thu 29 May 2014 01:48:46 PM JST
GrabButton
* Thu 29 May 2014 01:48:52 PM JST
VoidCookie
* Thu 29 May 2014 01:49:31 PM JST
    def test_checkrequest(self, ):
        r"""Test GetPropertyUnchecked.request() expect return GetPropertyCookie."""
        self.assertIsInstance(self.protocol_check.request(self.argsbin[1]),
                              self.cookie,
                              msg='Failed: {0}.request("{1}") not return {2}'
                              .format(self.protocol_check.__class__.__name__,
                                      self.argsbin[1],
                                      'GetPropertyCookie'))


* Thu 29 May 2014 01:49:42 PM JST
GrabButton
* Thu 29 May 2014 01:49:55 PM JST
VoidCookie
* Thu 29 May 2014 01:50:08 PM JST
VoidCookie
* Thu 29 May 2014 01:50:38 PM JST
                                      
* Thu 29 May 2014 02:05:15 PM JST
GrabButton
modiﬁers: SETofKEYMASK or AnyModiﬁer
button: BUTTON or AnyButton
grab-window: WINDOW
owner-events: BOOL
event-mask: SETofPOINTEREVENT
pointer-mode, keyboard-mode: {Synchronous, Asynchronous}
conﬁne-to: WINDOW or None
cursor: CURSOR or None
Errors: Access, Cursor, Value, Window
This request establishes a passive grab. In the future, the pointer is actively grabbed as described
in GrabPointer, the last-pointer-grab time is set to the time at which the button was pressed (as
transmitted in the ButtonPress ev ent), and the ButtonPress ev ent is reported if all of the
* Thu 29 May 2014 02:06:03 PM JST
conditions are true:
• The pointer is not grabbed and the speciﬁed button is logically pressed when the speciﬁed
modiﬁer keys are logically down, and no other buttons or modiﬁer keys are logically down.
• The grab-window contains the pointer.
• The conﬁne-to window (if any) is viewable.
• A passive grab on the same button/key combination does not exist on any ancestor of
* Thu 29 May 2014 02:06:47 PM JST
The interpretation of the remaining arguments is the same as for GrabPointer. The active grab
is terminated automatically when the logical state of the pointer has all buttons released,
* Thu 29 May 2014 02:07:07 PM JST
of the logical state of modiﬁer keys. Note that the logical state of a device (as seen by means
of the protocol) may lag the physical state if device event processing is frozen.
This request overrides all previous passive grabs by the same client on the same button/key
* Thu 29 May 2014 02:07:24 PM JST
on the same window. A modiﬁer of AnyModiﬁer is equivalent to issuing the request
for all possible modiﬁer combinations (including the combination of no modiﬁers). It is not
required that all speciﬁed modiﬁers have currently assigned keycodes. A button of AnyButton is
equivalent to issuing the request for all possible buttons. Otherwise, it is not required that the 
* Thu 29 May 2014 02:07:41 PM JST
speciﬁed currently be assigned to a physical button.
An Access error is generated if some other client has already issued a GrabButton request with
the same button/key combination on the same window. When using AnyModiﬁer or
* Thu 29 May 2014 02:08:01 PM JST
the request fails completely (no grabs are established), and an Access error is generated if
there is a conﬂicting grab for any combination. The request has no effect on an active grab.
* Thu 29 May 2014 02:35:27 PM JST
owner_events, grab_window, confine_to, cursor, modifiers,
              pointer_mode=None, keyboard_mode=None
* Thu 29 May 2014 02:35:31 PM JST
              
* Thu 29 May 2014 02:35:59 PM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xI', owner_events, grab_window))
        buf.write(self._press)
        if pointer_mode:
            buf.write(_pack('B', pointer_mode))
        else:
            buf.write(self._async)
        if keyboard_mode:
            buf.write(_pack('B', keyboard_mode))
        else:
            buf.write(self._async)
        buf.write(_pack('II', confine_to, cursor))
        buf.write(self._button)
        buf.write(_pack('xH', modifiers))

* Thu 29 May 2014 02:36:20 PM JST
_get_pressbuf
* Thu 29 May 2014 02:36:36 PM JST
owner_events, grab_window, confine_to, cursor, modifiers,
              pointer_mode=None, keyboard_mode
* Thu 29 May 2014 02:36:40 PM JST
              
* Thu 29 May 2014 02:38:03 PM JST
owner_events, grab_window, confine_to, cursor,
                      modifiers, pointer_mode, keyboard_mode
* Thu 29 May 2014 02:38:30 PM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xI', owner_events, grab_window))
        buf.write(self._release)
        if pointer_mode:
            buf.write(_pack('B', pointer_mode))
        else:
            buf.write(self._async)
        if keyboard_mode:
            buf.write(_pack('B', keyboard_mode))
        else:
            buf.write(self._async)
        buf.write(_pack('II', confine_to, cursor))
        buf.write(self._button)
        buf.write(_pack('xH', modifiers))

* Thu 29 May 2014 02:38:33 PM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xI', owner_events, grab_window))
        buf.write(self._release)
        if pointer_mode:
            buf.write(_pack('B', pointer_mode))
        else:
            buf.write(self._async)
        if keyboard_mode:
            buf.write(_pack('B', keyboard_mode))
        else:
            buf.write(self._async)
        buf.write(_pack('II', confine_to, cursor))
        buf.write(self._button)
        buf.write(_pack('xH', modifiers))

* Thu 29 May 2014 02:38:42 PM JST
buf.
* Thu 29 May 2014 02:39:16 PM JST
owner_events, grab_window, confine_to, cursor, modifiers,
                pointer_mode=None, keyboard_mode
* Thu 29 May 2014 02:39:20 PM JST
None, 
* Thu 29 May 2014 02:39:23 PM JST
                
* Thu 29 May 2014 02:44:34 PM JST
owner_events, grab_window, event_mask, confine_to,
                 cursor, modifiers, pointer_mode=None, keyboard_mode
* Thu 29 May 2014 02:44:40 PM JST
None, 
* Thu 29 May 2014 02:44:52 PM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xIH', owner_events, grab_window, event_mask))
        if pointer_mode:
            buf.write(_pack('B', pointer_mode))
        else:
            buf.write(self._async)
        if keyboard_mode:
            buf.write(_pack('B', keyboard_mode))
        else:
            buf.write(self._async)
        buf.write(_pack('II', confine_to, cursor))
        buf.write(self._button)
        buf.write(_pack('xH', modifiers))

* Thu 29 May 2014 02:45:24 PM JST
owner_events, grab_window, event_mask, confine_to,
                 cursor, modifiers, pointer_mode=None, keyboard_mode
* Thu 29 May 2014 02:45:33 PM JST
                 
* Thu 29 May 2014 03:41:33 PM JST
c.rawconnection.core.GrabButton(False, 482, xcb2.xproto.EventMask.ButtonPress, xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async, 0, 0, xcb2.xproto.NamedButtonIndex.Middle, xcb2.xproto.NamedKeyButMask.Lock)
* Thu 29 May 2014 03:42:19 PM JST
    c.rawconnection.core.GrabButton(
        False, 482, xcb2.xproto.EventMask.ButtonPress,
        xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async,
        0, 0, code,
        xcb2.xproto.NamedKeyButMask.Lock)

* Thu 29 May 2014 03:42:52 PM JST
xcb2.xproto.NamedKeyButMask.Lock
* Thu 29 May 2014 03:45:13 PM JST

* Thu 29 May 2014 03:45:13 PM JST

* Thu 29 May 2014 03:45:13 PM JST
    c.rawconnection.core.UngrabButton(code, 482, xcb2.xproto.NamedKeyButMask.Lock)

* Thu 29 May 2014 03:45:39 PM JST
def grab(code):
    print('press')
    c.rawconnection.core.GrabButton(
        False, 482, xcb2.xproto.EventMask.ButtonPress,
        xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async,
        0, 0, code,
        xcb2.xproto.NamedKeyButMask.Lock)
    print('release')
    c.rawconnection.core.GrabButton(
        False, 482, xcb2.xproto.EventMask.ButtonRelease,
        xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async,
        0, 0, code,
        xcb2.xproto.NamedKeyButMask.Lock)
    c.rawconnection.core.UngrabButton(code, 482, xcb2.xproto.NamedKeyButMask.Lock)

* Thu 29 May 2014 03:45:57 PM JST
xcb2.xproto.NamedButtonIndex.Middle
* Thu 29 May 2014 03:46:37 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00'
* Thu 29 May 2014 03:46:44 PM JST
press
'\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00'
release
'\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00'

* Thu 29 May 2014 03:48:15 PM JST
        self.conn = xcb.connect()
        self.protocol = GrabButton(self.conn)

* Thu 29 May 2014 03:49:45 PM JST
GrabButtonLeft
* Thu 29 May 2014 03:51:58 PM JST
xcb2.xproto.NamedKeyButMask.Lock
* Thu 29 May 2014 03:52:04 PM JST
NamedKeyButMask
* Thu 29 May 2014 03:52:26 PM JST
xproto.
* Thu 29 May 2014 03:52:26 PM JST
xcb2.xproto.
* Thu 29 May 2014 03:54:09 PM JST
            
* Thu 29 May 2014 03:54:10 PM JST
                             
* Thu 29 May 2014 03:54:20 PM JST
            
* Thu 29 May 2014 03:54:21 PM JST
            
* Thu 29 May 2014 03:54:58 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00'
* Thu 29 May 2014 03:57:06 PM JST
pass
* Thu 29 May 2014 03:58:53 PM JST
NamedButtonIndex.Left
* Thu 29 May 2014 03:59:08 PM JST
NamedKeyButMask.Lock
* Thu 29 May 2014 03:59:15 PM JST
NamedButtonIndex
* Thu 29 May 2014 04:00:21 PM JST
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00')
        protocol = GrabButtonLeft(self.grabbutton)
        binary = protocol._get_press_binary(
            False, 482, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getpress_binary()'
                         ' expect: {1}\nGot: {2}'
                         .format(protocol, expectbin, binary))

* Thu 29 May 2014 04:00:40 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00'
* Thu 29 May 2014 04:01:43 PM JST
        self.conn.core.UngrabButton(
            NamedButtonIndex.Left, 482, NamedKeyButMask.Lock)

* Thu 29 May 2014 04:03:32 PM JST
'\nExpected: {1}\nReturned: {2}'
* Thu 29 May 2014 04:04:18 PM JST
binary
* Thu 29 May 2014 04:04:24 PM JST
expectbin
* Thu 29 May 2014 04:04:28 PM JST
binary
* Thu 29 May 2014 04:05:41 PM JST
buf.write(_pack('x'))
* Thu 29 May 2014 04:07:40 PM JST
(False, 482, )
* Thu 29 May 2014 04:07:59 PM JST
482, )
* Thu 29 May 2014 04:08:32 PM JST
NamedKeyButMask.Lock
* Thu 29 May 2014 04:08:53 PM JST
c.core.GrabButton.Left.press(False, 482, 0, 0, xcb2.xproto.NamedKeyButMask.Lock)
* Thu 29 May 2014 04:09:18 PM JST
c.core.GrabButton.Left.press(False, 482, 0, 0, xcb2.xproto.NamedKeyButMask.Lock)
* Thu 29 May 2014 04:10:13 PM JST
press
* Thu 29 May 2014 04:10:22 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00'
* Thu 29 May 2014 04:11:22 PM JST
print(repr(buf.getvalue()))
* Thu 29 May 2014 04:11:30 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x02\x00'
* Thu 29 May 2014 04:11:53 PM JST
print(repr(buf.getvalue()))
* Thu 29 May 2014 04:13:31 PM JST

* Thu 29 May 2014 04:13:31 PM JST

* Thu 29 May 2014 04:13:31 PM JST
        print(repr(buf.getvalue()))

* Thu 29 May 2014 04:13:32 PM JST

* Thu 29 May 2014 04:13:32 PM JST

* Thu 29 May 2014 04:13:32 PM JST
        print(repr(buf.getvalue()))

* Thu 29 May 2014 04:13:32 PM JST

* Thu 29 May 2014 04:13:32 PM JST

* Thu 29 May 2014 04:13:32 PM JST
        print(repr(buf.getvalue()))

* Thu 29 May 2014 04:13:45 PM JST

* Thu 29 May 2014 04:13:45 PM JST

* Thu 29 May 2014 04:13:45 PM JST
        buf.write(_pack('x'))

* Thu 29 May 2014 04:13:46 PM JST
        buf.write(_pack('x'))

* Thu 29 May 2014 04:13:46 PM JST
        buf.write(_pack('x'))
        print(repr(buf.getvalue()))

* Thu 29 May 2014 04:13:52 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x02\x00'
* Thu 29 May 2014 04:14:52 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00'
* Thu 29 May 2014 04:15:31 PM JST

* Thu 29 May 2014 04:15:31 PM JST

* Thu 29 May 2014 04:15:32 PM JST
        print(repr(buf.getvalue()))

* Thu 29 May 2014 04:15:32 PM JST

* Thu 29 May 2014 04:15:32 PM JST

* Thu 29 May 2014 04:15:32 PM JST
        print(repr(buf.getvalue()))

* Thu 29 May 2014 04:16:48 PM JST
self._button
* Thu 29 May 2014 04:19:00 PM JST
Bx
* Thu 29 May 2014 04:19:14 PM JST

* Thu 29 May 2014 04:19:14 PM JST

* Thu 29 May 2014 04:19:14 PM JST
        print(repr(self._button))

* Thu 29 May 2014 04:19:39 PM JST

* Thu 29 May 2014 04:19:39 PM JST

* Thu 29 May 2014 04:19:39 PM JST
        buf.write(_pack('x'))

* Thu 29 May 2014 04:19:40 PM JST

* Thu 29 May 2014 04:19:40 PM JST

* Thu 29 May 2014 04:19:40 PM JST
        buf.write(_pack('x'))

* Thu 29 May 2014 04:26:28 PM JST
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00')

* Thu 29 May 2014 04:26:34 PM JST
protocol = GrabButtonLeft(self.grabbutton)
* Thu 29 May 2014 04:26:48 PM JST
        binary = protocol._get_press_binary(
            False, 482, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)

* Thu 29 May 2014 04:27:17 PM JST
EventMask.ButtonPress
* Thu 29 May 2014 04:28:40 PM JST
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getpress_binary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

* Thu 29 May 2014 04:29:57 PM JST
    def test_left_getbinary(self, ):
        r"""getbinary."""
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00')
        protocol = GrabButtonLeft(self.grabbutton)
        binary = protocol._getbinary(
            False, 482, EventMask.ButtonPress, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getbinary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

    def test_left_press(self):
        r"""left
        """
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00')
        protocol = GrabButtonLeft(self.grabbutton)
        binary = protocol._get_press_binary(
            False, 482, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getpress_binary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

    def test_left_release(self, ):
        r"""left        """
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00')
        protocol = GrabButtonLeft(self.grabbutton)
        binary = protocol._get_release_binary(
            False, 482, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getrelease_binary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

* Thu 29 May 2014 04:30:19 PM JST
def grab(code):
    print('press')
    c.rawconnection.core.GrabButton(
        False, 482, xcb2.xproto.EventMask.ButtonPress,
        xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async,
        0, 0, code,
        xcb2.xproto.NamedKeyButMask.Lock)
    print('release')
    c.rawconnection.core.GrabButton(
        False, 482, xcb2.xproto.EventMask.ButtonRelease,
        xcb2.xproto.GrabMode.Async, xcb2.xproto.GrabMode.Async,
        0, 0, code,
        xcb2.xproto.NamedKeyButMask.Lock)
    c.rawconnection.core.UngrabButton(code, 482, xcb2.xproto.NamedKeyButMask.Lock)

* Thu 29 May 2014 04:30:54 PM JST
NamedButtonIndex.Right
* Thu 29 May 2014 04:31:11 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x02\x00'
* Thu 29 May 2014 04:31:53 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x02\x00'
* Thu 29 May 2014 04:32:08 PM JST
        self.conn.core.UngrabButton(
            NamedButtonIndex.Left, 482, NamedKeyButMask.Lock)

* Thu 29 May 2014 04:32:11 PM JST
Left
* Thu 29 May 2014 04:33:01 PM JST
Right
* Thu 29 May 2014 04:33:46 PM JST
    def test_right_getbinary(self, ):
        r"""getbinary."""
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x02\x00')
        protocol = GrabButtonRight(self.grabbutton)
        binary = protocol._getbinary(
            False, 482, EventMask.ButtonPress, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getbinary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

    def test_right_press(self):
        r"""right
        """
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x02\x00')
        protocol = GrabButtonRight(self.grabbutton)
        binary = protocol._get_press_binary(
            False, 482, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getpress_binary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

    def test_right_release(self, ):
        r"""left        """
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x02\x00')
        protocol = GrabButtonRight(self.grabbutton)
        binary = protocol._get_release_binary(
            False, 482, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getrelease_binary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

* Thu 29 May 2014 04:34:01 PM JST
middle
* Thu 29 May 2014 04:35:16 PM JST
Right
* Thu 29 May 2014 04:35:21 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02\x00'
* Thu 29 May 2014 04:35:38 PM JST
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02\x00')

* Thu 29 May 2014 04:35:54 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02\x00'
* Thu 29 May 2014 04:36:34 PM JST
        self.conn.core.UngrabButton(
            NamedButtonIndex.Right, 482, NamedKeyButMask.Lock)

* Thu 29 May 2014 04:36:37 PM JST
Right
* Thu 29 May 2014 04:37:29 PM JST
    def test_middle_getbinary(self, ):
        r"""getbinary."""
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02\x00')
        protocol = GrabButtonMiddle(self.grabbutton)
        binary = protocol._getbinary(
            False, 482, EventMask.ButtonPress, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getbinary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

    def test_middle_press(self):
        r"""middle
        """
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02\x00')
        protocol = GrabButtonMiddle(self.grabbutton)
        binary = protocol._get_press_binary(
            False, 482, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getpress_binary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

    def test_middle_release(self, ):
        r"""middle        """
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02\x00')
        protocol = GrabButtonMiddle(self.grabbutton)
        binary = protocol._get_release_binary(
            False, 482, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getrelease_binary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))


* Thu 29 May 2014 04:37:42 PM JST
middle
* Thu 29 May 2014 04:38:26 PM JST
middle
* Thu 29 May 2014 04:39:13 PM JST
Middle
* Thu 29 May 2014 04:39:18 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x02\x00'
* Thu 29 May 2014 04:39:32 PM JST
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x02\x00')

* Thu 29 May 2014 04:39:42 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x02\x00'
* Thu 29 May 2014 04:40:36 PM JST
    def test_wheelup_getbinary(self, ):
        r"""getbinary."""
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x02\x00')
        protocol = GrabButtonWheelUp(self.grabbutton)
        binary = protocol._getbinary(
            False, 482, EventMask.ButtonPress, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getbinary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

    def test_wheelup_press(self):
        r"""wheelup
        """
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x02\x00')
        protocol = GrabButtonWheelUp(self.grabbutton)
        binary = protocol._get_press_binary(
            False, 482, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getpress_binary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

    def test_wheelup_release(self, ):
        r"""middle        """
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x02\x00')
        protocol = GrabButtonWheelUp(self.grabbutton)
        binary = protocol._get_release_binary(
            False, 482, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getrelease_binary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

* Thu 29 May 2014 04:40:41 PM JST
        self.conn.core.UngrabButton(
            NamedButtonIndex.Middle, 482, NamedKeyButMask.Lock)

* Thu 29 May 2014 04:40:45 PM JST
Middle
* Thu 29 May 2014 04:40:51 PM JST
        self.conn.core.UngrabButton(
            NamedButtonIndex.WheelUp, 482, NamedKeyButMask.Lock)

* Thu 29 May 2014 04:41:03 PM JST
    def test_wheelup_getbinary(self, ):
        r"""getbinary."""
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x02\x00')
        protocol = GrabButtonWheelUp(self.grabbutton)
        binary = protocol._getbinary(
            False, 482, EventMask.ButtonPress, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getbinary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

    def test_wheelup_press(self):
        r"""wheelup
        """
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x02\x00')
        protocol = GrabButtonWheelUp(self.grabbutton)
        binary = protocol._get_press_binary(
            False, 482, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getpress_binary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

    def test_wheelup_release(self, ):
        r"""middle        """
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x02\x00')
        protocol = GrabButtonWheelUp(self.grabbutton)
        binary = protocol._get_release_binary(
            False, 482, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getrelease_binary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

* Thu 29 May 2014 04:42:44 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x02\x00'
* Thu 29 May 2014 04:43:02 PM JST
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x02\x00')

* Thu 29 May 2014 04:43:07 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x02\x00'
* Thu 29 May 2014 04:44:46 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x02\x00'
* Thu 29 May 2014 04:45:01 PM JST
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x02\x00')
* Thu 29 May 2014 04:45:07 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x02\x00'
* Thu 29 May 2014 04:46:51 PM JST
    def test_left_getbinary(self, ):
        r"""getbinary."""
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00')
        protocol = GrabButtonLeft(self.grabbutton)
        binary = protocol._getbinary(
            False, 482, EventMask.ButtonPress, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getbinary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))


* Thu 29 May 2014 04:47:24 PM JST
Async
* Thu 29 May 2014 04:47:24 PM JST
GrabMode.Async
* Thu 29 May 2014 04:48:17 PM JST
    def test_left_press(self):
        r"""left
        """
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00')
        protocol = GrabButtonLeft(self.grabbutton)
        binary = protocol._get_press_binary(
            False, 482, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getpress_binary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))


* Thu 29 May 2014 04:48:21 PM JST
    def test_left_press(self):
        r"""left
        """
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x04\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00')
        protocol = GrabButtonLeft(self.grabbutton)
        binary = protocol._get_press_binary(
            False, 482, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getpress_binary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

    def test_left_release(self, ):
        r"""left        """
        expectbin = ('\x00\x00\x00\x00\xe2\x01\x00\x00\x08\x00\x01\x01'
                     '\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00')
        protocol = GrabButtonLeft(self.grabbutton)
        binary = protocol._get_release_binary(
            False, 482, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async)
        self.assertEqual(expectbin, binary,
                         msg='Failed: {0.__class__.__name__}._getrelease_binary()'
                         '\nExpected: {1}\nReturned: {2}'
                         .format(protocol, repr(expectbin), repr(binary)))

* Thu 29 May 2014 04:48:32 PM JST
_auto_async
* Thu 29 May 2014 04:51:04 PM JST
    def test_request(self, ):
        r"""Test GrabButton.request() expect return VoidCookie."""
        self.assertIsInstance(self.protocol.request(self.argsbin[1]),
                              self.cookie,
                              msg='Failed: {0}.request("{1}") not return {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1], 'VoidCookie'))

* Thu 29 May 2014 04:51:43 PM JST
protocol = GrabButtonLeft(self.grabbutton)
* Thu 29 May 2014 04:51:48 PM JST
self.
* Thu 29 May 2014 04:51:51 PM JST
request
* Thu 29 May 2014 04:52:12 PM JST
False, 482, EventMask.ButtonPress, 0, 0, NamedKeyButMask.Lock,
            GrabMode.Async, GrabMode.Async
* Thu 29 May 2014 04:52:19 PM JST
ButtonPress,
* Thu 29 May 2014 04:52:19 PM JST
EventMask.ButtonPress,
* Thu 29 May 2014 04:52:26 PM JST
            
* Thu 29 May 2014 04:52:34 PM JST
            
* Thu 29 May 2014 04:52:36 PM JST
    
* Thu 29 May 2014 04:52:49 PM JST
        
* Thu 29 May 2014 04:52:51 PM JST
            
* Thu 29 May 2014 04:52:53 PM JST
                  
* Thu 29 May 2014 04:52:56 PM JST
                              
* Thu 29 May 2014 04:52:58 PM JST
self.
* Thu 29 May 2014 04:53:02 PM JST
                                      
* Thu 29 May 2014 04:53:10 PM JST
1], 
* Thu 29 May 2014 04:53:11 PM JST
argsbin[1], 
* Thu 29 May 2014 04:53:11 PM JST
self.argsbin[1], 
* Thu 29 May 2014 04:53:14 PM JST
                    
* Fri 30 May 2014 12:04:35 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xII', owner_events, grab_window, time))
        buf.write(self._async) # pointer_mode
        buf.write(self._async) # keyboard_mode
        buf.write(_pack('2x'))

* Fri 30 May 2014 12:04:45 AM JST
self.
* Fri 30 May 2014 12:05:00 AM JST
_async_
* Fri 30 May 2014 12:06:40 AM JST

* Fri 30 May 2014 12:06:40 AM JST

* Fri 30 May 2014 12:06:40 AM JST
        - [yas] elisp error!:

* Fri 30 May 2014 12:06:41 AM JST
        - [yas] elisp error!:

* Fri 30 May 2014 12:06:41 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 12:06:41 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 12:06:41 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 12:06:41 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 12:06:41 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 12:06:43 AM JST

* Fri 30 May 2014 12:06:43 AM JST

* Fri 30 May 2014 12:06:43 AM JST
        - [yas] elisp error!:

* Fri 30 May 2014 12:06:43 AM JST
        - [yas] elisp error!:

* Fri 30 May 2014 12:06:43 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 12:06:44 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 12:06:44 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 12:06:44 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 12:06:44 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 12:07:32 AM JST
GrabKeyboard
grab-window: WINDOW
owner-events: BOOL
pointer-mode, keyboard-mode: {Synchronous, Asynchronous}
time: TIMESTAMP or CurrentTime
Æ
status: {Success, AlreadyGrabbed, Frozen, InvalidTime, NotViewable}
Errors: Value, Window
This request actively grabs control of the keyboard. Further key events are reported only to the
grabbing client. This request overrides any active keyboard grab by this client.
If owner-events is False, all generated key events are reported with respect to grab-window. If
owner-events is True and if a generated key event would normally be reported to this client, it is
reported normally. Otherwise, the event is reported with respect to the grab-window.
* Fri 30 May 2014 12:08:13 AM JST
Both
* Fri 30 May 2014 12:08:44 AM JST
and KeyRelease ev ents are always reported, independent of any event selection made by
the client.
If keyboard-mode is Asynchronous, keyboard event processing continues normally. If the
keyboard is currently frozen by this client, then processing of keyboard events is resumed. If
keyboard-mode is Synchronous, the state of the keyboard (as seen by means of the protocol)
appears to freeze. No further keyboard events are generated by the server until the grabbing client
issues a releasing AllowEvents request or until the keyboard grab is released. Actual keyboard
changes are not lost while the keyboard is frozen. They are simply queued for later processing.
If pointer-mode is Asynchronous, pointer event processing is unaffected by activation of the
grab. If pointer-mode is Synchronous, the state of the pointer (as seen by means of the protocol)
* Fri 30 May 2014 12:08:55 AM JST
appears to freeze. No further pointer events are generated by the server until the grabbing client
issues a releasing AllowEvents request or until the keyboard grab is released. Actual pointer
changes are not lost while the pointer is frozen. They are simply queued for later processing.
This request generates FocusIn and FocusOut ev ents.
The request fails with status AlreadyGrabbed if the keyboard is actively grabbed by some other
client. The request fails with status Frozen if the keyboard is frozen by an active grab of another
client. The request fails with status NotViewable if grab-window is not viewable. The request
fails with status InvalidTime if the speciﬁed time is earlier than the last-keyboard-grab time or
later than the current server time. Otherwise, the last-keyboard-grab time is set to the speciﬁed
time with CurrentTime replaced by the current server time.
* Fri 30 May 2014 12:38:01 AM JST
52428822
* Fri 30 May 2014 12:39:28 AM JST
c.flush()
* Fri 30 May 2014 12:45:58 AM JST

* Fri 30 May 2014 12:45:58 AM JST

* Fri 30 May 2014 12:45:58 AM JST
        print(repr(buf.getvalue()))

* Fri 30 May 2014 12:49:37 AM JST
52428822
* Fri 30 May 2014 12:49:57 AM JST
'\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00'
* Fri 30 May 2014 12:50:58 AM JST
    def test_binary1(self):
        r"""Test GetGeometry binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test GetGeometry binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))
    def test_binary3(self):
        r"""Test GetGeometry binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))


* Fri 30 May 2014 12:51:10 AM JST
import xcb, xcb.xproto
from xcb2.xproto import GetGeometryCookie
from xcb2.xproto.wcookie import WrapGetGeometryCookie
from xcb2.xproto.ext import GetGeometry, GetGeometryUnchecked

* Fri 30 May 2014 12:51:18 AM JST
GetGeometry
* Fri 30 May 2014 12:51:27 AM JST
GetGeometryUnchecked
* Fri 30 May 2014 12:51:44 AM JST
        self.args1 = [(52428822, ), '\x00\x00\x00\x00\x16\x00 \x03']
        self.args2 = [(75497475, ), '\x00\x00\x00\x00\x03\x00\x80\x04']
        self.args3 = [(77594627, ), '\x00\x00\x00\x00\x03\x00\xa0\x04']
        self.conn = xcb.connect()
        self.protocol = GetGeometry(self.conn)
        self.protocol_check = GetGeometryUnchecked(self.conn)

* Fri 30 May 2014 12:51:54 AM JST
GrabKeyboard
* Fri 30 May 2014 12:53:09 AM JST
'\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00'
* Fri 30 May 2014 12:53:25 AM JST
52428822
* Fri 30 May 2014 12:53:30 AM JST
False
* Fri 30 May 2014 12:55:38 AM JST
'\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 30 May 2014 12:55:54 AM JST
True, 482, 0, 0, 0
* Fri 30 May 2014 12:56:16 AM JST
True
* Fri 30 May 2014 12:56:34 AM JST
'\x00\x00\x00\x00\xff\xe0\xf5\x05\x00\x00\x00\x00\x01\x01\x00\x00'
* Fri 30 May 2014 12:56:53 AM JST
False, 99999999, 0, 1, 1
* Fri 30 May 2014 12:57:31 AM JST
pass
* Fri 30 May 2014 01:04:00 AM JST
    def test_call(self):
        r"""Test GetGeometry.__call__() expect return WrapGetGeometryCookie."""
        cookie = self.protocol(*self.argsbin[0])
        self.assertIsInstance(cookie, WrapGetGeometryCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' WrapGetGeometryCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def test_request(self, ):
        r"""Test GetGeometry.request() expect return GetGeometryCookie."""
        cookie = self.protocol.request(self.argsbin[1])
        self.assertIsInstance(cookie, self.cookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' GetGeometryCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1], cookie))

    def test_checkedrequest(self, ):
        r"""Test GetGeometry.request() expect return GetGeometryCookie."""
        cookie = self.protocol_check.request(self.argsbin[1])
        self.assertIsInstance(cookie, self.cookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' GetGeometryCookie\ngot: {2}'
                              .format(self.protocol_check.__class__.__name__,
                                      self.argsbin[1], cookie))

* Fri 30 May 2014 01:04:18 AM JST
        self.argsbin = [(52428822, ), '\x00\x00\x00\x00\x16\x00 \x03']
        self.conn = xcb.connect()
        self.protocol = GetGeometry(self.conn)
        self.protocol_check = GetGeometryUnchecked(self.conn)
        self.cookie = GetGeometryCookie

* Fri 30 May 2014 01:04:25 AM JST
GetGeometry
* Fri 30 May 2014 01:04:30 AM JST
VoidCookie
* Fri 30 May 2014 01:04:39 AM JST

* Fri 30 May 2014 01:04:39 AM JST

* Fri 30 May 2014 01:04:39 AM JST
from xcb2.xproto.wcookie import WrapGetGeometryCookie

* Fri 30 May 2014 01:04:52 AM JST
GrabKeyboardCookie
* Fri 30 May 2014 01:05:12 AM JST
GrabKeyboard
* Fri 30 May 2014 01:05:17 AM JST
        self.protocol = GrabKeyboard(self.conn)
        self.protocol_check = GrabKeyboardUnchecked(self.conn)

* Fri 30 May 2014 01:05:31 AM JST
[(True, 482, 0, 1, 1),
            '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00']
* Fri 30 May 2014 01:05:50 AM JST
GrabKeyboardCookie
* Fri 30 May 2014 01:08:16 AM JST
        self.conn.core.UngrabKeyboard(0)
        self.conn.flush()

* Fri 30 May 2014 01:10:45 AM JST
GrabKeyboard
* Fri 30 May 2014 01:13:28 AM JST
GrabKeyboard
* Fri 30 May 2014 01:14:13 AM JST
True, 482, 0
* Fri 30 May 2014 01:14:27 AM JST
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

* Fri 30 May 2014 01:16:07 AM JST
    def test_call(self):
        r"""Test GrabKeyboard.__call__() expect return GrabKeyboardCookie."""
        cookie = self.protocol(*self.argsbin[0])
        self.assertIsInstance(cookie, GrabKeyboardCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' GrabKeyboardCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

* Fri 30 May 2014 01:16:19 AM JST
__call__()
* Fri 30 May 2014 06:10:26 AM JST

* Fri 30 May 2014 06:10:26 AM JST

* Fri 30 May 2014 06:10:26 AM JST
        '=xB2xIHBBB3x'

* Fri 30 May 2014 06:11:03 AM JST
buf.write(self._tail)
* Fri 30 May 2014 09:55:37 AM JST
xproto.CW.EventMask
* Fri 30 May 2014 09:56:16 AM JST
xproto.
* Fri 30 May 2014 10:00:48 AM JST
async
* Fri 30 May 2014 10:01:32 AM JST
async
* Fri 30 May 2014 10:04:44 AM JST
window
* Fri 30 May 2014 10:05:30 AM JST
self._data,
* Fri 30 May 2014 10:20:14 AM JST
    def setUp(self):
        self.args1 = [(True, 482, 0, 1, 1),
            '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00']
        self.args2 = [(True, 482, 0, 0, 0),
            '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00']
        self.args3 = [(False, 99999999, 0, 1, 1),
            '\x00\x00\x00\x00\xff\xe0\xf5\x05\x00\x00\x00\x00\x01\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GrabKeyboard(self.conn)
        self.protocol_check = GrabKeyboardUnchecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test GrabKeyboard binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test GrabKeyboard binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))
    def test_binary3(self):
        r"""Test GrabKeyboard binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

* Fri 30 May 2014 10:20:26 AM JST
import xcb, xcb.xproto
from xcb2.xproto import GrabKeyboardCookie
from xcb2.xproto.ext import GrabKeyboard, GrabKeyboardUnchecked

* Fri 30 May 2014 10:20:33 AM JST
GrabKeyboard
* Fri 30 May 2014 10:20:39 AM JST
GrabKeyboardUnchecked
* Fri 30 May 2014 10:20:50 AM JST
GrabKey
* Fri 30 May 2014 10:21:35 AM JST

* Fri 30 May 2014 10:21:35 AM JST

* Fri 30 May 2014 10:21:35 AM JST
        print(repr(buf.getvalue()))

* Fri 30 May 2014 10:23:58 AM JST
False
* Fri 30 May 2014 10:24:17 AM JST
'\x00\x00\x00\x00\xff\xe0\xf5\x05\x00\x00\n\x01\x01\x00\x00\x00'
* Fri 30 May 2014 10:24:32 AM JST
False, 99999999, 0, 10, 1, 1
* Fri 30 May 2014 10:24:44 AM JST
pass
* Fri 30 May 2014 10:28:00 AM JST
False
* Fri 30 May 2014 10:28:11 AM JST
'\x00\x01\x00\x00\xff\xe0\xf5\x05\x00\x00\x0b\x01\x01\x00\x00\x00'
* Fri 30 May 2014 10:28:21 AM JST
'\x00\x01\x00\x00\xff\xe0\xf5\x05\x00\x00\x0b\x01\x01\x00\x00\x00'
* Fri 30 May 2014 10:29:16 AM JST
True, 99999999, 0, 11, 1, 1
* Fri 30 May 2014 10:29:29 AM JST
True
* Fri 30 May 2014 10:29:46 AM JST
'\x00\x00\x00\x00\xff\xe0\xf5\x05\x00\x00\x0c\x01\x01\x00\x00\x00'
* Fri 30 May 2014 10:29:58 AM JST
False, 99999999, 0, 12, 1, 1
* Fri 30 May 2014 10:31:07 AM JST

* Fri 30 May 2014 10:31:07 AM JST

* Fri 30 May 2014 10:31:07 AM JST
        - [yas] elisp error!:

* Fri 30 May 2014 10:31:07 AM JST
        - [yas] elisp error!:

* Fri 30 May 2014 10:31:07 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 10:31:07 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 10:31:07 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 10:31:07 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 10:31:07 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 10:31:10 AM JST

* Fri 30 May 2014 10:31:10 AM JST

* Fri 30 May 2014 10:31:10 AM JST
        - [yas] elisp error!:

* Fri 30 May 2014 10:31:10 AM JST
        - [yas] elisp error!:

* Fri 30 May 2014 10:31:10 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 10:31:10 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 10:31:11 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 10:31:11 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 10:31:11 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 10:32:05 AM JST
class TestGrabKeyboardRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(True, 482, 0, 1, 1),
            '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GrabKeyboard(self.conn)
        self.protocol_check = GrabKeyboardUnchecked(self.conn)
        self.cookie = GrabKeyboardCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test GrabKeyboard.__call__() expect return GrabKeyboardCookie."""
        cookie = self.protocol(*self.argsbin[0])
        self.assertIsInstance(cookie, GrabKeyboardCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' GrabKeyboardCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def test_async(self):
        r"""Test GrabKeyboard.async() expect return GrabKeyboardCookie."""
        cookie = self.protocol.async(*self.argsbin[0][0:3])
        self.assertIsInstance(cookie, GrabKeyboardCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' GrabKeyboardCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def test_request(self, ):
        r"""Test GrabKeyboard.request() expect return GrabKeyboardCookie."""
        cookie = self.protocol.request(self.argsbin[1])
        self.assertIsInstance(cookie, self.cookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' GrabKeyboardCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1], cookie))

    def test_checkedrequest(self, ):
        r"""Test GrabKeyboard.request() expect return GrabKeyboardCookie."""
        cookie = self.protocol_check.request(self.argsbin[1])
        self.assertIsInstance(cookie, self.cookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' GrabKeyboardCookie\ngot: {2}'
                              .format(self.protocol_check.__class__.__name__,
                                      self.argsbin[1], cookie))

    def tearDown(self):
        self.conn.core.UngrabKeyboard(0)
        self.conn.flush()

* Fri 30 May 2014 10:32:58 AM JST
VoidCookie
* Fri 30 May 2014 10:34:27 AM JST
xproto
* Fri 30 May 2014 10:34:34 AM JST
(False, 99999999, 0, 10, 1, 1)
* Fri 30 May 2014 10:34:46 AM JST
'\x00\x00\x00\x00\xff\xe0\xf5\x05\x00\x00\n\x01\x01\x00\x00\x00'
* Fri 30 May 2014 10:36:04 AM JST
VoidCookie
* Fri 30 May 2014 10:36:31 AM JST
self.conn.core.UngrabKeyboard(0)
* Fri 30 May 2014 10:36:47 AM JST
UngrabKeyboard
* Fri 30 May 2014 10:37:03 AM JST
self.conn.core.UngrabKeyboard(0)
* Fri 30 May 2014 10:39:42 AM JST
    def setUp(self):
        self.args1 = [(True, 482, 0, 1, 1),
            '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x01\x01\x00\x00']
        self.args2 = [(True, 482, 0, 0, 0),
            '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00']
        self.args3 = [(False, 99999999, 0, 1, 1),
            '\x00\x00\x00\x00\xff\xe0\xf5\x05\x00\x00\x00\x00\x01\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GrabKeyboard(self.conn)
        self.protocol_check = GrabKeyboardUnchecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test GrabKeyboard binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test GrabKeyboard binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))
    def test_binary3(self):
        r"""Test GrabKeyboard binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def test_get_async_binary(self, ):
        r"""Test GrabKeyboard._get_async_binary."""
        binary = self.protocol._get_async_binary(True, 482, 0)
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}():\n'
                         'Expected: "{2}"\nReturned: "{3}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 repr(self.args1[1]), repr(binary)))

    def tearDown(self):
        self.conn.core.UngrabKeyboard(0)
        self.conn.flush()

* Fri 30 May 2014 10:39:59 AM JST
import xcb, xcb.xproto
* Fri 30 May 2014 10:40:06 AM JST
from xcb2.xproto.ext import GrabKeyboard, GrabKeyboardUnchecked
* Fri 30 May 2014 10:40:09 AM JST
GrabKeyboard
* Fri 30 May 2014 10:40:22 AM JST
GrabKeyboardUnchecked
* Fri 30 May 2014 10:40:33 AM JST
InternAtom
* Fri 30 May 2014 10:40:41 AM JST
InternAtomUnchecked
* Fri 30 May 2014 10:41:03 AM JST
InternAtom
* Fri 30 May 2014 10:42:14 AM JST
        buf = _StringIO()
        buf.write(_pack('=xB2xIHB', owner_events, grab_window, modifiers, key))
        buf.write(self._async) # pointer_mode
        buf.write(self._async) # keyboard_mode
        buf.write(self._tail)

* Fri 30 May 2014 10:43:37 AM JST
    def test_get_async_binary(self, ):
        r"""Test GrabKeyboard._get_async_binary."""
        binary = self.protocol._get_async_binary(True, 482, 0)
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}():\n'
                         'Expected: "{2}"\nReturned: "{3}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 repr(self.args1[1]), repr(binary)))


* Fri 30 May 2014 10:44:29 AM JST
False, 99999999, 0, 10
* Fri 30 May 2014 10:46:33 AM JST

* Fri 30 May 2014 10:46:34 AM JST

* Fri 30 May 2014 10:46:34 AM JST
        print(repr(buf.getvalue()))

* Fri 30 May 2014 10:47:01 AM JST
UngrabKey
* Fri 30 May 2014 10:48:24 AM JST
'\x00\x01\x00\x00\x07\x00\x00\x00WM_NAME'
* Fri 30 May 2014 10:48:34 AM JST
True, len('WM_NAME'), 'WM_NAME'
* Fri 30 May 2014 10:48:44 AM JST
True
* Fri 30 May 2014 10:48:50 AM JST
len('WM_NAME'), 'WM_NAME'
* Fri 30 May 2014 10:48:59 AM JST
True
* Fri 30 May 2014 10:49:03 AM JST
'\x00\x00\x00\x00\x07\x00\x00\x00WM_NAME'
* Fri 30 May 2014 11:23:07 AM JST
'_NET_WM_NAME'
* Fri 30 May 2014 11:23:19 AM JST
'\x00\x00\x00\x00\x0c\x00\x00\x00_NET_WM_NAME'
* Fri 30 May 2014 11:23:33 AM JST
False, len('_NET_WM_NAME'), '_NET_WM_NAME'
* Fri 30 May 2014 11:27:10 AM JST
class TestGrabKeyRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(False, 99999999, 0, 10, 1, 1),
            '\x00\x00\x00\x00\xff\xe0\xf5\x05\x00\x00\n\x01\x01\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GrabKey(self.conn)
        self.protocol_check = GrabKeyChecked(self.conn)
        self.cookie = VoidCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test GrabKey.__call__() expect return VoidCookie."""
        cookie = self.protocol(*self.argsbin[0])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def test_async(self):
        r"""Test GrabKey.async() expect return VoidCookie."""
        cookie = self.protocol.async(*self.argsbin[0][0:4])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def test_request(self, ):
        r"""Test GrabKey.request() expect return VoidCookie."""
        cookie = self.protocol.request(self.argsbin[1])
        self.assertIsInstance(cookie, self.cookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1], cookie))

    def test_checkedrequest(self, ):
        r"""Test GrabKey.request() expect return VoidCookie."""
        cookie = self.protocol_check.request(self.argsbin[1])
        self.assertIsInstance(cookie, self.cookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol_check.__class__.__name__,
                                      self.argsbin[1], cookie))

    def tearDown(self):
        self.conn.core.UngrabKeyboard(0)
        self.conn.flush()

* Fri 30 May 2014 11:27:52 AM JST
(self.conn)
* Fri 30 May 2014 11:27:54 AM JST
GrabKey
* Fri 30 May 2014 11:28:07 AM JST
self.protocol_check = InternAtomUnchecked(self.conn)
* Fri 30 May 2014 11:28:47 AM JST
InternAtomCookie
* Fri 30 May 2014 11:29:29 AM JST

* Fri 30 May 2014 11:29:38 AM JST
WrapInternAtomCookie
* Fri 30 May 2014 11:29:49 AM JST
VoidCookie
* Fri 30 May 2014 11:30:06 AM JST
WrapInternAtomCookie
* Fri 30 May 2014 11:30:20 AM JST
GrabKey
* Fri 30 May 2014 11:30:37 AM JST
GrabKey
* Fri 30 May 2014 11:30:42 AM JST
VoidCookie
* Fri 30 May 2014 11:30:51 AM JST
InternAtomCookie
* Fri 30 May 2014 11:31:20 AM JST
        self.args1 = [(True, len('WM_NAME'), 'WM_NAME'),
            '\x00\x01\x00\x00\x07\x00\x00\x00WM_NAME']

* Fri 30 May 2014 11:31:30 AM JST
(True, len('WM_NAME'), 'WM_NAME')
* Fri 30 May 2014 11:31:37 AM JST
'\x00\x01\x00\x00\x07\x00\x00\x00WM_NAME'
* Fri 30 May 2014 11:47:26 AM JST
class TestGetAtomNameUseCache(MockerTestCase):
    def setUp(self):
        self.args1 = [(6, ), '\x00\x00\x00\x00\x06\x00\x00\x00']
        self.conn = xcb.connect()
        self.conn.display = ''
        self.protocol = GetAtomName(self.conn)
        self.usecache = UseCache(self.protocol)
        self.mocker.replay()

    def test_getcache(self):
        r"""Test UseCahce.getcache()"""
        atom = self.usecache(*self.args1[0])
        cache = self.usecache._getcache(*self.args1[0])
        self.assertEqual(atom, cache,
                         msg='Failed: Expect: {}, Got: {}'.format(atom, cache))
        # for if branch in UseCache__call__
        cache2 = self.usecache(*self.args1[0])
        self.assertEqual(atom, cache2,
                         msg='Failed: Expect: {}, Got: {}'.format(atom, cache2))

    def test_addcache(self, ):
        r"""Test UseCahce.addcache()."""
        self.assertIsNone(self.usecache._getcache(*self.args1[0]),
                          msg='Failed: UseCache._getcache({}) expect None'
                          .format(6))
        atom = self.protocol(*self.args1[0]).reply().name
        self.usecache._addcache(atom)
        cache = self.usecache._getcache(*self.args1[0])
        self.assertEqual(atom, cache,
                         msg='Failed: Expect: {}, Got: {}'.format(atom, cache))

    def tearDown(self):
        pass


class TestGetAtomNameUseCache2(MockerTestCase):
    def setUp(self):
        self.conn = xcb.connect()
        self.protocol = GetAtomName(self.conn)
        self.usecache = UseCache(self.protocol)
        dummy = self.mocker.replace(
            'xcb2.xproto.ext.getatomname.UseCache.__call__')
        dummy(ANY)
        self.mocker.result('dummy')
        self.mocker.count(0, None)
        self.mocker.replay()

    def test_cachecheck(self):
        r"""Test UseCache cachecheck."""
        self.assertEqual('dummy', self.usecache.__call__(6), msg='Failed: ')

    def tearDown(self):
        pass

* Fri 30 May 2014 11:48:14 AM JST
(True, len('WM_NAME'), 'WM_NAME'),
            '\x00\x01\x00\x00\x07\x00\x00\x00WM_NAME'
* Fri 30 May 2014 11:48:55 AM JST
UseCache
* Fri 30 May 2014 11:50:39 AM JST
name
* Fri 30 May 2014 11:51:22 AM JST
getatomname
* Fri 30 May 2014 11:51:37 AM JST
True, len('WM_NAME'), 'WM_NAME')
* Fri 30 May 2014 11:51:47 AM JST
            
* Fri 30 May 2014 11:52:24 AM JST
WM_NAME'), 
* Fri 30 May 2014 11:52:24 AM JST
len('WM_NAME'), 
* Fri 30 May 2014 11:52:25 AM JST
True, len('WM_NAME'), 
* Fri 30 May 2014 11:52:49 AM JST
WM_NAME'), 
* Fri 30 May 2014 11:52:50 AM JST
len('WM_NAME'), 
* Fri 30 May 2014 11:52:51 AM JST
True, len('WM_NAME'), 
* Fri 30 May 2014 11:53:35 AM JST
True, len('WM_NAME'), 'WM_NAME'
* Fri 30 May 2014 11:54:49 AM JST
'WM_NAME')
* Fri 30 May 2014 11:55:34 AM JST

* Fri 30 May 2014 11:55:34 AM JST

* Fri 30 May 2014 11:55:34 AM JST
        self.args1 = [('WM_NAME'),

* Fri 30 May 2014 11:55:34 AM JST
        self.args1 = [('WM_NAME'),

* Fri 30 May 2014 11:55:34 AM JST
        self.args1 = [('WM_NAME'),
            '\x00\x01\x00\x00\x07\x00\x00\x00WM_NAME']

* Fri 30 May 2014 11:56:57 AM JST
class TestGetAtomNameUseCacheBinary(MockerTestCase):
    def setUp(self):
        self.args1 = [(6, ), '\x00\x00\x00\x00\x06\x00\x00\x00']
        self.args2 = [(39, ), "\x00\x00\x00\x00'\x00\x00\x00"]
        self.args3 = [(293, ), '\x00\x00\x00\x00%\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UseCache(GetAtomName(self.conn))
        self.mocker.replay()

    def test_binary1(self):
        r"""Test UseCache binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test UseCache binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))

    def test_binary3(self):
        r"""Test UseCache binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass


* Fri 30 May 2014 11:57:11 AM JST
GetAtomName
* Fri 30 May 2014 11:57:29 AM JST
        self.args1 = [(True, len('WM_NAME'), 'WM_NAME'),
            '\x00\x01\x00\x00\x07\x00\x00\x00WM_NAME']
        self.args2 = [(False, len('WM_NAME'), 'WM_NAME'),
            '\x00\x00\x00\x00\x07\x00\x00\x00WM_NAME']
        self.args3 = [(False, len('_NET_WM_NAME'), '_NET_WM_NAME'),
            '\x00\x00\x00\x00\x0c\x00\x00\x00_NET_WM_NAME']

* Fri 30 May 2014 11:58:46 AM JST
'WM_NAME'
* Fri 30 May 2014 11:59:23 AM JST
'_NET_WM_NAME'
* Fri 30 May 2014 12:00:54 PM JST
set_only_if_exists
* Fri 30 May 2014 12:01:12 PM JST
self.protocol.set_only_if_exists(False)
* Fri 30 May 2014 12:03:15 PM JST
'WM_NAME'
* Fri 30 May 2014 12:05:38 PM JST
'BITMAP'
* Fri 30 May 2014 12:06:44 PM JST
set_only_if_exists
* Fri 30 May 2014 12:07:41 PM JST
self.usecache
* Fri 30 May 2014 03:56:45 PM JST
'=xx2x'
* Fri 30 May 2014 03:57:06 PM JST

* Fri 30 May 2014 03:57:06 PM JST

* Fri 30 May 2014 03:57:06 PM JST
        - [yas] elisp error!:

* Fri 30 May 2014 03:57:06 PM JST
        - [yas] elisp error!:

* Fri 30 May 2014 03:57:06 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 03:57:06 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 03:57:06 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 03:57:06 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 03:57:06 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 03:57:09 PM JST

* Fri 30 May 2014 03:57:09 PM JST

* Fri 30 May 2014 03:57:09 PM JST
        - [yas] elisp error!:

* Fri 30 May 2014 03:57:09 PM JST
        - [yas] elisp error!:

* Fri 30 May 2014 03:57:09 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 03:57:09 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 03:57:09 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 03:57:10 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 03:57:10 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 03:58:03 PM JST
    def setUp(self):
        self.args1 = [(6, ), '\x00\x00\x00\x00\x06\x00\x00\x00']
        self.args2 = [(39, ), "\x00\x00\x00\x00'\x00\x00\x00"]
        self.args3 = [(293, ), '\x00\x00\x00\x00%\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UseCache(GetAtomName(self.conn))
        self.mocker.replay()

    def test_binary1(self):
        r"""Test UseCache binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test UseCache binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))

    def test_binary3(self):
        r"""Test UseCache binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))


* Fri 30 May 2014 03:58:11 PM JST
    def tearDown(self):
        pass

* Fri 30 May 2014 03:58:30 PM JST
from xcb2.xproto.ext import GetAtomName, GetAtomNameUnchecked
* Fri 30 May 2014 03:58:36 PM JST
GetAtomNameUnchecked
* Fri 30 May 2014 03:58:37 PM JST
GetAtomName, GetAtomNameUnchecked
* Fri 30 May 2014 03:58:49 PM JST
MapWindow
* Fri 30 May 2014 03:59:02 PM JST
GetAtomName(
* Fri 30 May 2014 03:59:09 PM JST
import xcb, xcb.xproto
* Fri 30 May 2014 03:59:37 PM JST

* Fri 30 May 2014 03:59:38 PM JST

* Fri 30 May 2014 03:59:38 PM JST
        print(repr(buf.getvalue()))

* Fri 30 May 2014 04:00:11 PM JST

* Fri 30 May 2014 04:00:11 PM JST

* Fri 30 May 2014 04:00:11 PM JST
        print(repr(buf.getvalue()))

* Fri 30 May 2014 04:00:53 PM JST
'\x00\x00\x00\x00\xff\xe0\xf5\x05'
* Fri 30 May 2014 04:02:04 PM JST
'\x00\x00\x00\x00\xac\x01\x00\x00'
* Fri 30 May 2014 04:02:43 PM JST
'\x00\x00\x00\x008VL\x05'
* Fri 30 May 2014 04:02:56 PM JST
MapWindow
* Fri 30 May 2014 04:05:04 PM JST
    def setUp(self):
        self.argsbin = [(5, ), '\x00\x00\x00\x00\x05\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GetAtomName(self.conn)
        self.protocol_check = GetAtomNameUnchecked(self.conn)
        self.cookie = GetAtomNameCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test GetAtomName.__call__() expect return WrapGetAtomNameCookie."""
        cookie = self.protocol(*self.argsbin[0])
        self.assertIsInstance(cookie, WrapGetAtomNameCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' WrapGetAtomNameCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def test_request(self, ):
        r"""Test GetAtomName.request() expect return GetAtomNameCookie."""
        cookie = self.protocol.request(self.argsbin[1])
        self.assertIsInstance(cookie, GetAtomNameCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' GetAtomNameCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1], cookie))

    def test_checkedrequest(self, ):
        r"""Test GetAtomName.request() expect return GetAtomNameCookie."""
        cookie = self.protocol_check.request(self.argsbin[1])
        self.assertIsInstance(cookie, GetAtomNameCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' GetAtomNameCookie\ngot: {2}'
                              .format(self.protocol_check.__class__.__name__,
                                      self.argsbin[1], cookie))

    def tearDown(self):
        pass

* Fri 30 May 2014 04:05:47 PM JST
GetAtomNameCookie
* Fri 30 May 2014 04:06:02 PM JST
MapWindow
* Fri 30 May 2014 04:06:42 PM JST
VoidCookie
* Fri 30 May 2014 04:28:53 PM JST
88888888
* Fri 30 May 2014 04:29:04 PM JST
'\x00\x00\x00\x008VL\x05'
* Fri 30 May 2014 04:29:30 PM JST
xproto
* Fri 30 May 2014 04:31:15 PM JST
=xx2x
* Fri 30 May 2014 04:31:34 PM JST

* Fri 30 May 2014 04:31:34 PM JST

* Fri 30 May 2014 04:31:34 PM JST
        - [yas] elisp error!:

* Fri 30 May 2014 04:31:34 PM JST
        - [yas] elisp error!:

* Fri 30 May 2014 04:31:34 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 04:31:34 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 04:31:34 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 04:31:34 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 04:31:34 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 04:31:36 PM JST

* Fri 30 May 2014 04:31:36 PM JST

* Fri 30 May 2014 04:31:37 PM JST
        - [yas] elisp error!:

* Fri 30 May 2014 04:31:37 PM JST
        - [yas] elisp error!:

* Fri 30 May 2014 04:31:37 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 04:31:37 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 04:31:37 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 04:31:37 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 04:31:37 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 04:33:47 PM JST
    def setUp(self):
        self.args1 = [(5, ), '\x00\x00\x00\x00\x05\x00\x00\x00']
        self.args2 = [(39, ), "\x00\x00\x00\x00'\x00\x00\x00"]
        self.args3 = [(293, ), '\x00\x00\x00\x00%\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GetAtomName(self.conn)
        self.protocol_check = GetAtomNameUnchecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test GetAtomName binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test GetAtomName binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))
    def test_binary3(self):
        r"""Test GetAtomName binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass

* Fri 30 May 2014 04:34:03 PM JST
import xcb, xcb.xproto
from xcb2.xproto import GetAtomNameCookie, BadAtom
from xcb2.xproto.wcookie import WrapGetAtomNameCookie
from xcb2.xproto.ext import GetAtomName, GetAtomNameUnchecked

* Fri 30 May 2014 04:34:18 PM JST
GetAtomName
* Fri 30 May 2014 04:34:27 PM JST
GetAtomNameUnchecked
* Fri 30 May 2014 04:34:45 PM JST

* Fri 30 May 2014 04:34:45 PM JST

* Fri 30 May 2014 04:34:45 PM JST
        print(repr(buf.getvalue()))

* Fri 30 May 2014 04:36:15 PM JST
c.core.InternAtom.usecache._getcache('WM_NAME')
* Fri 30 May 2014 04:36:17 PM JST
MapWindow
* Fri 30 May 2014 04:36:27 PM JST
'\x00\x00\x00\x008VL\x05'
* Fri 30 May 2014 04:37:31 PM JST
88888888
* Fri 30 May 2014 04:37:38 PM JST
'\x00\x00\x00\x00\xff\xe0\xf5\x05'
* Fri 30 May 2014 04:37:51 PM JST
99999999
* Fri 30 May 2014 04:37:56 PM JST
'\x00\x00\x00\x00\xe2\x01\x00\x00'
* Fri 30 May 2014 04:38:57 PM JST
QueryTree
* Fri 30 May 2014 04:41:20 PM JST
=xx2x
* Fri 30 May 2014 04:41:23 PM JST

* Fri 30 May 2014 04:41:23 PM JST

* Fri 30 May 2014 04:41:23 PM JST
    _head = _pack('=xx2x')

* Fri 30 May 2014 04:41:25 PM JST

* Fri 30 May 2014 04:41:25 PM JST

* Fri 30 May 2014 04:41:25 PM JST
        buf.write(self._head)

* Fri 30 May 2014 04:43:52 PM JST
'\x00\x00\x00\x00q\xcb\xa2\x04'
* Fri 30 May 2014 04:44:03 PM JST
88888888
* Fri 30 May 2014 04:46:07 PM JST
class TestGetAtomNameRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(5, ), '\x00\x00\x00\x00\x05\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = GetAtomName(self.conn)
        self.protocol_check = GetAtomNameUnchecked(self.conn)
        self.cookie = GetAtomNameCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test GetAtomName.__call__() expect return WrapGetAtomNameCookie."""
        cookie = self.protocol(*self.argsbin[0])
        self.assertIsInstance(cookie, WrapGetAtomNameCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' WrapGetAtomNameCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def test_request(self, ):
        r"""Test GetAtomName.request() expect return GetAtomNameCookie."""
        cookie = self.protocol.request(self.argsbin[1])
        self.assertIsInstance(cookie, GetAtomNameCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' GetAtomNameCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1], cookie))

    def test_checkedrequest(self, ):
        r"""Test GetAtomName.request() expect return GetAtomNameCookie."""
        cookie = self.protocol_check.request(self.argsbin[1])
        self.assertIsInstance(cookie, GetAtomNameCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' GetAtomNameCookie\ngot: {2}'
                              .format(self.protocol_check.__class__.__name__,
                                      self.argsbin[1], cookie))

    def tearDown(self):
        pass

* Fri 30 May 2014 04:47:00 PM JST
QueryTreeCookie
* Fri 30 May 2014 04:47:07 PM JST

* Fri 30 May 2014 04:47:07 PM JST

* Fri 30 May 2014 04:47:08 PM JST
from xcb2.xproto.wcookie import WrapGetAtomNameCookie

* Fri 30 May 2014 04:47:16 PM JST
QueryTreeCookie
* Fri 30 May 2014 04:50:31 PM JST
(99999999, ), '\x00\x00\x00\x00\xff\xe0\xf5\x05'
* Fri 30 May 2014 04:51:43 PM JST
from xcb2.xproto.wcookie import WrapQueryTreeCookie
* Fri 30 May 2014 04:51:51 PM JST
WrapQueryTreeCookie
* Fri 30 May 2014 10:16:46 PM JST
        self.conn = xcb.connect()
        self.protocol = QueryTree(self.conn)

* Fri 30 May 2014 10:17:51 PM JST
self.protocol.recursive(root)
* Fri 30 May 2014 10:19:40 PM JST
    
* Fri 30 May 2014 10:29:11 PM JST

* Fri 30 May 2014 10:29:11 PM JST

* Fri 30 May 2014 10:29:11 PM JST
        - [yas] elisp error!:

* Fri 30 May 2014 10:29:11 PM JST
        - [yas] elisp error!:

* Fri 30 May 2014 10:29:12 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 10:29:12 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 10:29:12 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 10:29:12 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 10:29:13 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 10:44:42 PM JST

* Fri 30 May 2014 10:44:42 PM JST

* Fri 30 May 2014 10:44:42 PM JST
        print(repr(buf.getvalue()))

* Fri 30 May 2014 10:47:58 PM JST
60817459
* Fri 30 May 2014 10:50:29 PM JST
    def setUp(self):
        self.args1 = [(77777777, ), '\x00\x00\x00\x00q\xcb\xa2\x04']
        self.args2 = [(99999999, ), '\x00\x00\x00\x00\xff\xe0\xf5\x05']
        self.args3 = [(482, ), '\x00\x00\x00\x00\xe2\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = QueryTree(self.conn)
        self.protocol_check = QueryTreeUnchecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test QueryTree binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test QueryTree binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))

    def test_binary3(self):
        r"""Test QueryTree binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass

* Fri 30 May 2014 10:50:50 PM JST
from xcb2.xproto.ext import QueryTree, QueryTreeUnchecked
* Fri 30 May 2014 10:50:52 PM JST
QueryTreeUnchecked
* Fri 30 May 2014 10:50:52 PM JST
QueryTree, QueryTreeUnchecked
* Fri 30 May 2014 10:51:03 PM JST
SetInputFocus
* Fri 30 May 2014 10:51:22 PM JST
SetInputFocusChecked
* Fri 30 May 2014 10:51:47 PM JST
import xcb, xcb.xproto
* Fri 30 May 2014 10:52:04 PM JST
'\x00\x02\x00\x003\x00\xa0\x03\x00\x00\x00\x00'
* Fri 30 May 2014 10:52:22 PM JST
2, 60817459, 0
* Fri 30 May 2014 10:53:22 PM JST
60817459
* Fri 30 May 2014 10:53:32 PM JST
'\x00\x01\x00\x00\xff\xe0\xf5\x05\x00\x00\x00\x00'
* Fri 30 May 2014 10:53:41 PM JST
1, 99999999, 0
* Fri 30 May 2014 10:53:50 PM JST
99999999
* Fri 30 May 2014 10:53:59 PM JST
'\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00'
* Fri 30 May 2014 10:54:15 PM JST
1, 482, 0
* Fri 30 May 2014 10:55:24 PM JST
    def setUp(self):
        self.argsbin = [(99999999, ), '\x00\x00\x00\x00\xff\xe0\xf5\x05']
        self.conn = xcb.connect()
        self.protocol = QueryTree(self.conn)
        self.protocol_check = QueryTreeUnchecked(self.conn)
        self.cookie = QueryTreeCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test QueryTree.__call__() expect return WrapQueryTreeCookie."""
        cookie = self.protocol(*self.argsbin[0])
        self.assertIsInstance(cookie, WrapQueryTreeCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' WrapQueryTreeCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def test_request(self, ):
        r"""Test QueryTree.request() expect return QueryTreeCookie."""
        cookie = self.protocol.request(self.argsbin[1])
        self.assertIsInstance(cookie, QueryTreeCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' QueryTreeCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1], cookie))

    def test_checkedrequest(self, ):
        r"""Test QueryTree.request() expect return QueryTreeCookie."""
        cookie = self.protocol_check.request(self.argsbin[1])
        self.assertIsInstance(cookie, QueryTreeCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' QueryTreeCookie\ngot: {2}'
                              .format(self.protocol_check.__class__.__name__,
                                      self.argsbin[1], cookie))

    def tearDown(self):
        pass

* Fri 30 May 2014 10:56:16 PM JST
VoidCookie
* Fri 30 May 2014 10:58:20 PM JST
2, 60817459, 0
* Fri 30 May 2014 10:58:35 PM JST
'\x00\x02\x00\x003\x00\xa0\x03\x00\x00\x00\x00'
* Fri 30 May 2014 11:03:46 PM JST

* Fri 30 May 2014 11:03:46 PM JST

* Fri 30 May 2014 11:03:46 PM JST
        - [yas] elisp error!:

* Fri 30 May 2014 11:03:46 PM JST
        - [yas] elisp error!:

* Fri 30 May 2014 11:03:46 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 11:03:46 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 11:03:46 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 11:03:47 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 11:03:47 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 11:03:50 PM JST

* Fri 30 May 2014 11:03:50 PM JST

* Fri 30 May 2014 11:03:50 PM JST
        - [yas] elisp error!:

* Fri 30 May 2014 11:03:50 PM JST
        - [yas] elisp error!:

* Fri 30 May 2014 11:03:50 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 11:03:50 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 11:03:50 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 11:03:51 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 11:03:51 PM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Fri 30 May 2014 11:16:53 PM JST
Translate
* Fri 30 May 2014 11:17:44 PM JST
TranslateCoordinates
* Fri 30 May 2014 11:36:34 PM JST
src-window, dst-window: WINDOW
src-x, src-y: INT16
Æ
same-screen: BOOL
child: WINDOW or None
dst-x, dst-y: INT16
Errors: Window
32X Protocol X11, Release 6.7
The src-x and src-y coordinates are taken relative to src-window’s origin and are returned as dst-x
and dst-y coordinates relative to dst-window’s origin. If same-screen is False, then src-window
and dst-window are on different screens, and dst-x and dst-y are zero. If the coordinates are
* Fri 30 May 2014 11:36:46 PM JST

* Fri 30 May 2014 11:36:47 PM JST

* Fri 30 May 2014 11:36:47 PM JST
32X Protocol X11, Release 6.7

* Fri 30 May 2014 11:37:48 PM JST
in a mapped child of dst-window, then that child is returned.
* Sat 31 May 2014 12:00:46 AM JST

* Sat 31 May 2014 12:00:46 AM JST

* Sat 31 May 2014 12:00:46 AM JST
        print(repr(buf.getvalue()))

* Sat 31 May 2014 12:02:41 AM JST
0)
* Sat 31 May 2014 12:02:42 AM JST
482, 0)
* Sat 31 May 2014 12:02:42 AM JST
1, 482, 0)
* Sat 31 May 2014 12:02:43 AM JST
SetInputFocus(1, 482, 0)
* Sat 31 May 2014 12:05:15 AM JST
67108867
* Sat 31 May 2014 12:05:37 AM JST
'\x00\x00\x00\x00\x03\x00\x00\x04\xe2\x01\x00\x00\x00\x00\x00\x00'
* Sat 31 May 2014 12:05:47 AM JST
67108867, 482, 0, 0
* Sat 31 May 2014 12:06:27 AM JST
dst_x
* Sat 31 May 2014 03:32:54 AM JST
    def setUp(self):
        self.args1 = [(77777777, ), '\x00\x00\x00\x00q\xcb\xa2\x04']
        self.args2 = [(99999999, ), '\x00\x00\x00\x00\xff\xe0\xf5\x05']
        self.args3 = [(482, ), '\x00\x00\x00\x00\xe2\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = QueryTree(self.conn)
        self.protocol_check = QueryTreeUnchecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test QueryTree binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test QueryTree binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))

    def test_binary3(self):
        r"""Test QueryTree binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass

* Sat 31 May 2014 03:33:06 AM JST
from xcb2.xproto.ext import QueryTree, QueryTreeUnchecked
* Sat 31 May 2014 03:33:08 AM JST
QueryTreeUnchecked
* Sat 31 May 2014 03:33:09 AM JST
QueryTree, QueryTreeUnchecked
* Sat 31 May 2014 03:33:25 AM JST
import xcb, xcb.xproto
import xcb2

* Sat 31 May 2014 03:33:36 AM JST
TranslateCoordinates
* Sat 31 May 2014 03:33:53 AM JST
'\x00\x00\x00\x00\x03\x00\x00\x04\xe2\x01\x00\x00\x00\x00\x00\x00'
* Sat 31 May 2014 03:34:16 AM JST
67108867, 482, 0, 0
* Sat 31 May 2014 03:34:27 AM JST
'\x00\x00\x00\x00\x03\x00\x00\x04\xe2\x01\x00\x00\n\x00\n\x00'
* Sat 31 May 2014 03:34:47 AM JST
67108867, 482, 10, 10
* Sat 31 May 2014 03:35:02 AM JST
67108867
* Sat 31 May 2014 03:35:11 AM JST
'\x00\x00\x00\x00\xff\xe0\xf5\x05\xe2\x01\x00\x00\x00\x00\x00\x00'
* Sat 31 May 2014 03:35:43 AM JST
99999999, 482, 0, 0
* Sat 31 May 2014 03:55:00 AM JST
class TestQueryTreeRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(99999999, ), '\x00\x00\x00\x00\xff\xe0\xf5\x05']
        self.conn = xcb.connect()
        self.protocol = QueryTree(self.conn)
        self.protocol_check = QueryTreeUnchecked(self.conn)
        self.cookie = QueryTreeCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test QueryTree.__call__() expect return WrapQueryTreeCookie."""
        cookie = self.protocol(*self.argsbin[0])
        self.assertIsInstance(cookie, WrapQueryTreeCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' WrapQueryTreeCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def test_request(self, ):
        r"""Test QueryTree.request() expect return QueryTreeCookie."""
        cookie = self.protocol.request(self.argsbin[1])
        self.assertIsInstance(cookie, QueryTreeCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' QueryTreeCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1], cookie))

    def test_checkedrequest(self, ):
        r"""Test QueryTree.request() expect return QueryTreeCookie."""
        cookie = self.protocol_check.request(self.argsbin[1])
        self.assertIsInstance(cookie, QueryTreeCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' QueryTreeCookie\ngot: {2}'
                              .format(self.protocol_check.__class__.__name__,
                                      self.argsbin[1], cookie))

    def tearDown(self):
        pass

* Sat 31 May 2014 03:55:56 AM JST
TranslateCoordinatesCookie
* Sat 31 May 2014 03:56:12 AM JST

* Sat 31 May 2014 03:56:12 AM JST

* Sat 31 May 2014 03:56:12 AM JST
import xcb2

* Sat 31 May 2014 03:56:25 AM JST
(67108867, 482, 0, 0),
                      '\x00\x00\x00\x00\x03\x00\x00\x04'
                      '\xe2\x01\x00\x00\x00\x00\x00\x00'
* Sat 31 May 2014 03:56:40 AM JST
Wrap
* Sat 31 May 2014 03:56:53 AM JST
Wrap
* Sat 31 May 2014 03:56:55 AM JST
Wrap
* Sat 31 May 2014 03:59:56 AM JST

* Sat 31 May 2014 03:59:56 AM JST

* Sat 31 May 2014 03:59:56 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 03:59:56 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 03:59:57 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 03:59:57 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 03:59:57 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 03:59:57 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 03:59:57 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:00:00 AM JST

* Sat 31 May 2014 04:00:00 AM JST

* Sat 31 May 2014 04:00:00 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 04:00:00 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 04:00:00 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:00:00 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:00:00 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:00:01 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:00:01 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:00:31 AM JST

* Sat 31 May 2014 04:00:31 AM JST

* Sat 31 May 2014 04:00:31 AM JST
        print(repr(buf.getvalue()))

* Sat 31 May 2014 04:03:02 AM JST
    def setUp(self):
        self.args1 = [(77777777, ), '\x00\x00\x00\x00q\xcb\xa2\x04']
        self.args2 = [(99999999, ), '\x00\x00\x00\x00\xff\xe0\xf5\x05']
        self.args3 = [(482, ), '\x00\x00\x00\x00\xe2\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = QueryTree(self.conn)
        self.protocol_check = QueryTreeUnchecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test QueryTree binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test QueryTree binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))

    def test_binary3(self):
        r"""Test QueryTree binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass

* Sat 31 May 2014 04:03:17 AM JST
import xcb, xcb.xproto
import xcb2

* Sat 31 May 2014 04:03:22 AM JST
from xcb2.xproto.ext import QueryTree, QueryTreeUnchecked
* Sat 31 May 2014 04:03:24 AM JST
QueryTreeUnchecked
* Sat 31 May 2014 04:03:25 AM JST
QueryTree, QueryTreeUnchecked
* Sat 31 May 2014 04:03:44 AM JST
UngrabButton
* Sat 31 May 2014 04:04:21 AM JST
'\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00'
* Sat 31 May 2014 04:04:35 AM JST
1, 482, 0
* Sat 31 May 2014 04:04:46 AM JST
'\x00\x02\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00'
* Sat 31 May 2014 04:04:54 AM JST
2, 482, 0
* Sat 31 May 2014 04:05:07 AM JST
'\x00\x03\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00'
* Sat 31 May 2014 04:05:14 AM JST
3, 482, 0
* Sat 31 May 2014 04:06:03 AM JST
class TestQueryTreeRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(99999999, ), '\x00\x00\x00\x00\xff\xe0\xf5\x05']
        self.conn = xcb.connect()
        self.protocol = QueryTree(self.conn)
        self.protocol_check = QueryTreeUnchecked(self.conn)
        self.cookie = QueryTreeCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test QueryTree.__call__() expect return WrapQueryTreeCookie."""
        cookie = self.protocol(*self.argsbin[0])
        self.assertIsInstance(cookie, WrapQueryTreeCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' WrapQueryTreeCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def test_request(self, ):
        r"""Test QueryTree.request() expect return QueryTreeCookie."""
        cookie = self.protocol.request(self.argsbin[1])
        self.assertIsInstance(cookie, QueryTreeCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' QueryTreeCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1], cookie))

    def test_checkedrequest(self, ):
        r"""Test QueryTree.request() expect return QueryTreeCookie."""
        cookie = self.protocol_check.request(self.argsbin[1])
        self.assertIsInstance(cookie, QueryTreeCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' QueryTreeCookie\ngot: {2}'
                              .format(self.protocol_check.__class__.__name__,
                                      self.argsbin[1], cookie))

    def tearDown(self):
        pass

* Sat 31 May 2014 04:06:50 AM JST
xproto
* Sat 31 May 2014 04:06:58 AM JST
VoidCookie
* Sat 31 May 2014 04:08:27 AM JST
[(1, 482, 0),
                      '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
* Sat 31 May 2014 04:10:33 AM JST

* Sat 31 May 2014 04:10:34 AM JST

* Sat 31 May 2014 04:10:34 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 04:10:34 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 04:10:34 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:10:34 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:10:34 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:10:34 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:10:34 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:10:36 AM JST

* Sat 31 May 2014 04:10:36 AM JST

* Sat 31 May 2014 04:10:36 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 04:10:37 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 04:10:37 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:10:37 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:10:37 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:10:37 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:10:37 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:15:11 AM JST
    def setUp(self):
        self.args1 = [(77777777, ), '\x00\x00\x00\x00q\xcb\xa2\x04']
        self.args2 = [(99999999, ), '\x00\x00\x00\x00\xff\xe0\xf5\x05']
        self.args3 = [(482, ), '\x00\x00\x00\x00\xe2\x01\x00\x00']
        self.conn = xcb.connect()
        self.protocol = QueryTree(self.conn)
        self.protocol_check = QueryTreeUnchecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test QueryTree binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test QueryTree binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))

    def test_binary3(self):
        r"""Test QueryTree binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass

* Sat 31 May 2014 04:15:27 AM JST
from xcb2.xproto.ext import QueryTree, QueryTreeUnchecked
* Sat 31 May 2014 04:15:32 AM JST
import xcb, xcb.xproto
* Sat 31 May 2014 04:16:19 AM JST
Unchecked
* Sat 31 May 2014 04:16:24 AM JST
Checked
* Sat 31 May 2014 04:16:42 AM JST
(3, 482, 0)
* Sat 31 May 2014 04:17:22 AM JST

* Sat 31 May 2014 04:17:22 AM JST

* Sat 31 May 2014 04:17:22 AM JST
        print(repr(buf.getvalue()))

* Sat 31 May 2014 04:18:10 AM JST
'\x00\x00\x00\x00\x00\x00\x00\x00'
* Sat 31 May 2014 04:18:18 AM JST
77777777
* Sat 31 May 2014 04:18:30 AM JST
'\x00\x00\x00\x00\x01\x00\x00\x00'
* Sat 31 May 2014 04:18:43 AM JST
'\x00\x00\x00\x00\x02\x00\x00\x00'
* Sat 31 May 2014 04:18:51 AM JST
482
* Sat 31 May 2014 04:20:02 AM JST
class TestQueryTreeRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(99999999, ), '\x00\x00\x00\x00\xff\xe0\xf5\x05']
        self.conn = xcb.connect()
        self.protocol = QueryTree(self.conn)
        self.protocol_check = QueryTreeUnchecked(self.conn)
        self.cookie = QueryTreeCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test QueryTree.__call__() expect return WrapQueryTreeCookie."""
        cookie = self.protocol(*self.argsbin[0])
        self.assertIsInstance(cookie, WrapQueryTreeCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' WrapQueryTreeCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def test_request(self, ):
        r"""Test QueryTree.request() expect return QueryTreeCookie."""
        cookie = self.protocol.request(self.argsbin[1])
        self.assertIsInstance(cookie, QueryTreeCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' QueryTreeCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1], cookie))

    def test_checkedrequest(self, ):
        r"""Test QueryTree.request() expect return QueryTreeCookie."""
        cookie = self.protocol_check.request(self.argsbin[1])
        self.assertIsInstance(cookie, QueryTreeCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' QueryTreeCookie\ngot: {2}'
                              .format(self.protocol_check.__class__.__name__,
                                      self.argsbin[1], cookie))

    def tearDown(self):
        pass

* Sat 31 May 2014 04:20:24 AM JST
class TestUngrabButtonRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(1, 482, 0),
                        '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UngrabButton(self.conn)
        self.protocol_check = UngrabButtonChecked(self.conn)
        self.cookie = VoidCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test UngrabButton.__call__() expect return VoidCookie."""
        cookie = self.protocol(*self.argsbin[0])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def test_request(self, ):
        r"""Test UngrabButton.request() expect return VoidCookie."""
        cookie = self.protocol.request(self.argsbin[1])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1], cookie))

    def test_checkedrequest(self, ):
        r"""Test UngrabButton.request() expect return VoidCookie."""
        cookie = self.protocol_check.request(self.argsbin[1])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol_check.__class__.__name__,
                                      self.argsbin[1], cookie))

    def tearDown(self):
        pass

* Sat 31 May 2014 04:21:20 AM JST
from xcb2 import VoidCookie
* Sat 31 May 2014 04:22:11 AM JST
[(0, ), '\x00\x00\x00\x00\x00\x00\x00\x00']
* Sat 31 May 2014 04:23:35 AM JST

* Sat 31 May 2014 04:23:35 AM JST

* Sat 31 May 2014 04:23:35 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 04:23:35 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 04:23:35 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:23:35 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:23:35 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:23:35 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:23:36 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:23:39 AM JST

* Sat 31 May 2014 04:23:39 AM JST

* Sat 31 May 2014 04:23:39 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 04:23:39 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 04:23:39 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:23:39 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:23:39 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:23:39 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:23:39 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:25:30 AM JST
    def setUp(self):
        self.args1 = [(1, 482, 0),
                      '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.args2 = [(2, 482, 0),
                      '\x00\x02\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.args3 = [(3, 482, 0),
                      '\x00\x03\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UngrabButton(self.conn)
        self.protocol_check = UngrabButtonChecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test UngrabButton binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test UngrabButton binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))

    def test_binary3(self):
        r"""Test UngrabButton binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass

* Sat 31 May 2014 04:25:46 AM JST
import xcb, xcb.xproto
import xcb2
from xcb2 import VoidCookie
from xcb2.xproto.ext import UngrabButton, UngrabButtonChecked


* Sat 31 May 2014 04:26:43 AM JST

* Sat 31 May 2014 04:26:43 AM JST

* Sat 31 May 2014 04:26:44 AM JST
        print(repr(buf.getvalue()))

* Sat 31 May 2014 04:27:55 AM JST
'\x00\n\x00\x00\xff\xe0\xf5\x05\x00\x00\x00\x00'
* Sat 31 May 2014 04:28:03 AM JST
10, 99999999, 0
* Sat 31 May 2014 04:28:59 AM JST
99999999
* Sat 31 May 2014 04:29:11 AM JST
'\x00\x0b\x00\x008VL\x05\x00\x00\x00\x00'
* Sat 31 May 2014 04:29:19 AM JST
11, 88888888, 0
* Sat 31 May 2014 04:29:41 AM JST
88888888
* Sat 31 May 2014 04:29:46 AM JST
'\x00\x0c\x00\x00\xff\xe0\xf5\x05\x01\x00\x00\x00'
* Sat 31 May 2014 04:29:54 AM JST
12, 99999999, 1
* Sat 31 May 2014 04:31:05 AM JST
class TestUngrabButtonRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(1, 482, 0),
                        '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UngrabButton(self.conn)
        self.protocol_check = UngrabButtonChecked(self.conn)
        self.cookie = VoidCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test UngrabButton.__call__() expect return VoidCookie."""
        cookie = self.protocol(*self.argsbin[0])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def test_request(self, ):
        r"""Test UngrabButton.request() expect return VoidCookie."""
        cookie = self.protocol.request(self.argsbin[1])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1], cookie))

    def test_checkedrequest(self, ):
        r"""Test UngrabButton.request() expect return VoidCookie."""
        cookie = self.protocol_check.request(self.argsbin[1])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol_check.__class__.__name__,
                                      self.argsbin[1], cookie))

    def tearDown(self):
        pass

* Sat 31 May 2014 04:31:37 AM JST
[(10, 99999999, 0),
                      '\x00\n\x00\x00\xff\xe0\xf5\x05\x00\x00\x00\x00']
* Sat 31 May 2014 04:33:51 AM JST
unmapsubwindows
* Sat 31 May 2014 04:35:15 AM JST

* Sat 31 May 2014 04:35:16 AM JST

* Sat 31 May 2014 04:35:16 AM JST
__all__ = [ ]

* Sat 31 May 2014 04:35:39 AM JST

* Sat 31 May 2014 04:35:39 AM JST

* Sat 31 May 2014 04:35:39 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 04:35:39 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 04:35:40 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:35:40 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:35:40 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:35:40 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:35:40 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:35:42 AM JST

* Sat 31 May 2014 04:35:43 AM JST

* Sat 31 May 2014 04:35:43 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 04:35:43 AM JST
        - [yas] elisp error!:

* Sat 31 May 2014 04:35:43 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:35:43 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:35:43 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:35:43 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 04:35:43 AM JST
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:
        - [yas] elisp error!:

* Sat 31 May 2014 12:09:40 PM JST
44040214
* Sat 31 May 2014 12:10:03 PM JST
EventMask.KeyPress
* Sat 31 May 2014 12:10:10 PM JST
pack('=xB2xI', False, 44040214)
* Sat 31 May 2014 12:10:56 PM JST
pack('I',EventMask.KeyPress)
* Sat 31 May 2014 12:11:11 PM JST
code = _pack('B', EventCode.KeyPress)
* Sat 31 May 2014 12:11:34 PM JST
2
* Sat 31 May 2014 12:12:47 PM JST
pack('B', detail)
* Sat 31 May 2014 12:13:03 PM JST
detail
* Sat 31 May 2014 12:13:15 PM JST
pack('H', sequence_number)
* Sat 31 May 2014 12:13:21 PM JST
sequence_number
* Sat 31 May 2014 12:13:35 PM JST
pack('4I5HBx', time, root, window, child,
                        root_x, root_y,
                        event_x, event_y, state, samescreen)
* Sat 31 May 2014 12:13:41 PM JST
                        
* Sat 31 May 2014 12:13:42 PM JST
                        
* Sat 31 May 2014 12:13:44 PM JST
time
* Sat 31 May 2014 12:13:46 PM JST
root
* Sat 31 May 2014 12:13:50 PM JST
window
* Sat 31 May 2014 12:13:56 PM JST
44040214
* Sat 31 May 2014 12:14:01 PM JST
child
* Sat 31 May 2014 12:14:03 PM JST
root_x
* Sat 31 May 2014 12:14:05 PM JST
root_y
* Sat 31 May 2014 12:14:06 PM JST
event_x
* Sat 31 May 2014 12:14:08 PM JST
event_y
* Sat 31 May 2014 12:14:10 PM JST
state
* Sat 31 May 2014 12:14:32 PM JST
samescreen
* Sat 31 May 2014 12:17:44 PM JST

* Sat 31 May 2014 12:17:44 PM JST

* Sat 31 May 2014 12:17:44 PM JST
        print(repr(buf.getvalue()))

* Sat 31 May 2014 12:18:42 PM JST
print(repr(buf.getvalue()))
* Sat 31 May 2014 12:19:15 PM JST
44040214
* Sat 31 May 2014 12:20:15 PM JST
'\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 12:21:31 PM JST
    def setUp(self):
        self.args1 = [(1, 482, 0),
                      '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.args2 = [(2, 482, 0),
                      '\x00\x02\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.args3 = [(3, 482, 0),
                      '\x00\x03\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UngrabButton(self.conn)
        self.protocol_check = UngrabButtonChecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test UngrabButton binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test UngrabButton binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))

    def test_binary3(self):
        r"""Test UngrabButton binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass

* Sat 31 May 2014 12:22:04 PM JST
import xcb, xcb.xproto
import xcb2
from xcb2 import VoidCookie
from xcb2.xproto.ext import UngrabButton, UngrabButtonChecked

* Sat 31 May 2014 12:22:08 PM JST
UngrabButtonChecked
* Sat 31 May 2014 12:22:08 PM JST
UngrabButton, UngrabButtonChecked
* Sat 31 May 2014 12:23:06 PM JST
SendEvent
* Sat 31 May 2014 12:23:36 PM JST
False, 44040214, EventMask.KeyPress
* Sat 31 May 2014 12:23:47 PM JST
'\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 12:24:07 PM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\x01\x00\x00\x00\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 12:28:43 PM JST
class TestUngrabButtonRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(1, 482, 0),
                        '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UngrabButton(self.conn)
        self.protocol_check = UngrabButtonChecked(self.conn)
        self.cookie = VoidCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test UngrabButton.__call__() expect return VoidCookie."""
        cookie = self.protocol(*self.argsbin[0])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def test_request(self, ):
        r"""Test UngrabButton.request() expect return VoidCookie."""
        cookie = self.protocol.request(self.argsbin[1])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1], cookie))

    def test_checkedrequest(self, ):
        r"""Test UngrabButton.request() expect return VoidCookie."""
        cookie = self.protocol_check.request(self.argsbin[1])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol_check.__class__.__name__,
                                      self.argsbin[1], cookie))

    def tearDown(self):
        pass

* Sat 31 May 2014 12:29:01 PM JST
[(False, 44040214, EventMask.KeyPress,
                       '\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00'
                       '\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00'
                       '\x00\x00\x00\x00\x00\x00\x01\x00'),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
* Sat 31 May 2014 12:33:44 PM JST
    def setUp(self):
        self.args1 = [(1, 482, 0),
                      '\x00\x01\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.args2 = [(2, 482, 0),
                      '\x00\x02\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.args3 = [(3, 482, 0),
                      '\x00\x03\x00\x00\xe2\x01\x00\x00\x00\x00\x00\x00']
        self.conn = xcb.connect()
        self.protocol = UngrabButton(self.conn)
        self.protocol_check = UngrabButtonChecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test UngrabButton binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def test_binary2(self):
        r"""Test UngrabButton binary2."""
        binary2 = self.protocol._getbinary(*self.args2[0])
        self.assertEqual(self.args2[1], binary2,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args2[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args2[1]), repr(binary2)))

    def test_binary3(self):
        r"""Test UngrabButton binary3."""
        binary3 = self.protocol._getbinary(*self.args3[0])
        self.assertEqual(self.args3[1], binary3,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args3[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args3[1]), repr(binary3)))

    def tearDown(self):
        pass

* Sat 31 May 2014 12:34:30 PM JST
import xcb, xcb.xproto
import xcb2
from xcb2 import VoidCookie
from xcb2.xproto.ext import UngrabButton, UngrabButtonChecked

* Sat 31 May 2014 12:34:39 PM JST
UngrabButton
* Sat 31 May 2014 12:34:45 PM JST
, UngrabButtonChecked
* Sat 31 May 2014 12:37:53 PM JST
class TestSendEventBinary(MockerTestCase):
    def setUp(self):
        self.args1 = [(False, 44040214, EventMask.KeyPress,
                       '\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00'
                       '\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00'
                       '\x00\x00\x00\x00\x00\x00\x01\x00'),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test SendEvent binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def tearDown(self):
        pass

* Sat 31 May 2014 12:38:01 PM JST
    def setUp(self):
        self.args1 = [(False, 44040214, EventMask.KeyPress,
                       '\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00'
                       '\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00'
                       '\x00\x00\x00\x00\x00\x00\x01\x00'),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test SendEvent binary1."""
        binary = self.protocol._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def tearDown(self):
        pass

* Sat 31 May 2014 12:38:25 PM JST
from xcb2.xproto import EventMask
from xcb2.xproto.ext import SendEvent, SendEventChecked

* Sat 31 May 2014 12:40:59 PM JST
44040214
* Sat 31 May 2014 12:43:05 PM JST
 EventMask.KeyPress,
* Sat 31 May 2014 12:45:21 PM JST
class TestSendEventRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(False, 44040214, EventMask.KeyPress,
                       '\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00'
                       '\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00'
                       '\x00\x00\x00\x00\x00\x00\x01\x00'),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.cookie = VoidCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test SendEvent.__call__() expect return VoidCookie."""
        cookie = self.protocol(*self.argsbin[0])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def test_request(self, ):
        r"""Test SendEvent.request() expect return VoidCookie."""
        cookie = self.protocol.request(self.argsbin[1])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.__class__.__name__,
                                      self.argsbin[1], cookie))

    def test_checkedrequest(self, ):
        r"""Test SendEvent.request() expect return VoidCookie."""
        cookie = self.protocol_check.request(self.argsbin[1])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}.request("{1}") not return'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol_check.__class__.__name__,
                                      self.argsbin[1], cookie))

    def tearDown(self):
        pass

* Sat 31 May 2014 12:45:37 PM JST
    def setUp(self):
        self.args1 = [(False, 44040214,
                       10, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.mocker.replay()

* Sat 31 May 2014 12:45:47 PM JST
        self.args1 = [(False, 44040214,
                       10, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)

* Sat 31 May 2014 12:48:25 PM JST
request
* Sat 31 May 2014 12:48:29 PM JST
request
* Sat 31 May 2014 01:10:57 PM JST
detail=pack('B', 10)
* Sat 31 May 2014 01:22:30 PM JST
detail=pack('B', detail)
* Sat 31 May 2014 01:22:35 PM JST
detail=pack('B', 10)
* Sat 31 May 2014 01:23:00 PM JST
code = pack('B', EventCode.KeyPress)
* Sat 31 May 2014 01:23:03 PM JST
code = pack('B', 2)
* Sat 31 May 2014 01:23:21 PM JST
code = pack('B', 2)
* Sat 31 May 2014 01:24:01 PM JST
event=code + detail + seq + tail
* Sat 31 May 2014 01:25:32 PM JST
c.rawconnection.core.SendEvent(False, 44040214, EventMask.KeyPress, '\x02\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00')
* Sat 31 May 2014 01:25:39 PM JST
'\x06\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 01:25:49 PM JST
KeyPress
* Sat 31 May 2014 01:25:59 PM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\x00\x01\x00\x00\x06\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 01:27:56 PM JST
import xcb, xcb.xproto
import xcb2
from xcb2 import VoidCookie
from xcb2.xproto import EventMask
from xcb2.xproto.ext import SendEvent, SendEventChecked

* Sat 31 May 2014 01:28:05 PM JST
class TestKeyPressBinary(MockerTestCase):
    def setUp(self):
        self.args1 = [(False, 44040214,
                       10, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test SendEvent.KeyPress binary1."""
        binary = self.protocol.KeyPress._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def tearDown(self):
        pass

* Sat 31 May 2014 01:28:12 PM JST

* Sat 31 May 2014 01:28:12 PM JST

* Sat 31 May 2014 01:28:13 PM JST
class TestKeyPressBinary(MockerTestCase):

* Sat 31 May 2014 01:28:34 PM JST
'\x06\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 01:29:11 PM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\x00\x01\x00\x00\x06\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 01:30:43 PM JST
KeyPress
* Sat 31 May 2014 01:31:51 PM JST
MotionNotify.Button1Motion
* Sat 31 May 2014 01:33:18 PM JST
MotionNotify.Button1Motion
* Sat 31 May 2014 01:34:53 PM JST
Button1Motion
* Sat 31 May 2014 01:35:04 PM JST
        self.args1 = [(False, 44040214,
                       1, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x00\x01\x00\x00\x06'
                      '\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']

* Sat 31 May 2014 01:35:44 PM JST
EventMask.Button1Motion
* Sat 31 May 2014 01:36:25 PM JST
    def test_binary1(self):
        r"""Test MotionNotify.Button1Motion binary1."""
        binary = self.protocol.MotionNotify.Button1Motion._getbinary(
            *self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))


* Sat 31 May 2014 01:36:31 PM JST
Button1Motion
* Sat 31 May 2014 01:36:41 PM JST
Button1Motion
* Sat 31 May 2014 01:44:19 PM JST
False, 44040214, EventMask.Button1Motion,
                       1, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1
* Sat 31 May 2014 01:44:25 PM JST
                       
* Sat 31 May 2014 01:44:30 PM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\x00\x01\x00\x00\x06\x01\x00\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 01:47:48 PM JST
pack('=xB2xII', propagate, destination, event_mask)
* Sat 31 May 2014 01:47:56 PM JST
propagate
* Sat 31 May 2014 01:48:02 PM JST
44040214
* Sat 31 May 2014 01:48:11 PM JST
EventMask.Button1Motion
* Sat 31 May 2014 01:48:23 PM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\x00\x01\x00\x00'
* Sat 31 May 2014 01:51:30 PM JST
EventCode.MotionNotify
* Sat 31 May 2014 01:53:22 PM JST
detail, 
* Sat 31 May 2014 01:53:37 PM JST
sequence_number, 
* Sat 31 May 2014 01:53:41 PM JST
                        
* Sat 31 May 2014 01:53:46 PM JST
                        
* Sat 31 May 2014 01:54:09 PM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\x00\x01\x00\x00\x06\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 01:56:11 PM JST
class TestSendEventRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(False, 44040214,
                       10, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.cookie = VoidCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test SendEvent.KeyPress.__call__() expect return VoidCookie."""
        cookie = self.protocol.KeyPress(*self.argsbin[0])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.KeyPress.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def tearDown(self):
        pass

* Sat 31 May 2014 01:56:45 PM JST
KeyPress
* Sat 31 May 2014 01:57:08 PM JST
[(False, 44040214, EventMask.Button1Motion,
                       1, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x00\x01\x00\x00\x06'
                      '\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
* Sat 31 May 2014 01:57:45 PM JST
KeyPress
* Sat 31 May 2014 05:24:35 PM JST
code = pack('B', EventCode.KeyPress)
* Sat 31 May 2014 05:25:30 PM JST
KeyRelease
* Sat 31 May 2014 05:25:31 PM JST
EventCode.KeyRelease
* Sat 31 May 2014 05:25:43 PM JST
event=code + detail + seq + tail
* Sat 31 May 2014 05:26:34 PM JST
Button1Motion
* Sat 31 May 2014 05:26:50 PM JST
coo=
* Sat 31 May 2014 05:27:02 PM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\x02\x00\x00\x00\x03\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 05:27:29 PM JST
import xcb, xcb.xproto
import xcb2
from xcb2 import VoidCookie
from xcb2.xproto import EventMask
from xcb2.xproto.ext import SendEvent, SendEventChecked


class TestKeyPressBinary(MockerTestCase):
    def setUp(self):
        self.args1 = [(False, 44040214,
                       10, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test SendEvent.KeyPress binary1."""
        binary = self.protocol.KeyPress._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def tearDown(self):
        pass

* Sat 31 May 2014 05:27:44 PM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\x02\x00\x00\x00\x03\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 05:28:43 PM JST
pack('B', 10)
* Sat 31 May 2014 05:28:58 PM JST
pack('B', 10
* Sat 31 May 2014 05:29:34 PM JST
'\x03\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 05:29:56 PM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\x02\x00\x00\x00\x03\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 05:30:25 PM JST
KeyPress
* Sat 31 May 2014 05:31:07 PM JST
class TestSendEventRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(False, 44040214,
                       10, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.cookie = VoidCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test SendEvent.KeyPress.__call__() expect return VoidCookie."""
        cookie = self.protocol.KeyPress(*self.argsbin[0])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.KeyPress.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def tearDown(self):
        pass

* Sat 31 May 2014 05:31:19 PM JST
[(False, 44040214,
                       10, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x02\x00\x00\x00\x03'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
* Sat 31 May 2014 05:31:29 PM JST
KeyPress
* Sat 31 May 2014 05:31:34 PM JST
KeyPress
* Sat 31 May 2014 05:31:44 PM JST
KeyPress
* Sat 31 May 2014 05:46:21 PM JST
KeyRelease
* Sat 31 May 2014 05:46:28 PM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\x04\x00\x00\x00\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 05:46:57 PM JST
import xcb, xcb.xproto
import xcb2
from xcb2 import VoidCookie
from xcb2.xproto import EventMask
from xcb2.xproto.ext import SendEvent, SendEventChecked


class TestKeyPressBinary(MockerTestCase):
    def setUp(self):
        self.args1 = [(False, 44040214,
                       10, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test SendEvent.KeyPress binary1."""
        binary = self.protocol.KeyPress._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def tearDown(self):
        pass


* Sat 31 May 2014 05:47:09 PM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\x04\x00\x00\x00\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 05:48:55 PM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\x04\x00\x00\x00\x04\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 05:49:58 PM JST
class TestSendEventRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(False, 44040214,
                       10, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x01\x00\x00\x00\x02'
                      '\n\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.cookie = VoidCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test SendEvent.KeyPress.__call__() expect return VoidCookie."""
        cookie = self.protocol.KeyPress(*self.argsbin[0])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.KeyPress.__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def tearDown(self):
        pass

* Sat 31 May 2014 05:50:15 PM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\x04\x00\x00\x00\x04'
                      '\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00'
* Sat 31 May 2014 05:50:23 PM JST
Key
* Sat 31 May 2014 05:50:27 PM JST
Key
* Sat 31 May 2014 05:50:41 PM JST
KeyPress
* Sat 31 May 2014 05:56:53 PM JST
5
* Sat 31 May 2014 05:57:46 PM JST
import xcb, xcb.xproto
import xcb2
from xcb2 import VoidCookie
from xcb2.xproto import EventMask
from xcb2.xproto.ext import SendEvent, SendEventChecked


class TestButtonPressBinary(MockerTestCase):
    def setUp(self):
        self.args1 = [(False, 44040214,
                       1, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x04\x00\x00\x00\x04'
                      '\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.mocker.replay()

    def test_binary1(self):
        r"""Test SendEvent.ButtonPress binary1."""
        binary = self.protocol.ButtonPress._getbinary(*self.args1[0])
        self.assertEqual(self.args1[1], binary,
                         msg='Failed {0.__class__.__name__}.{1.__name__}({2}):\n'
                         'Expected: "{3}"\nReturned: "{4}"'
                         .format(self.protocol, self.protocol._getbinary,
                                 str(self.args1[0])
                                 .replace('(', '').replace(')', ''),
                                 repr(self.args1[1]), repr(binary)))

    def tearDown(self):
        pass

* Sat 31 May 2014 05:57:57 PM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\x08\x00\x00\x00\x05\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00'
* Sat 31 May 2014 05:58:21 PM JST
Release
* Sat 31 May 2014 05:58:58 PM JST
class TestSendEventRequest(MockerTestCase):
    def setUp(self):
        self.argsbin = [(False, 44040214,
                       1, 0, 0, 482, 44040214, 0, 0, 0, 0, 0, 0, 1),
                      '\x00\x00\x00\x00\x16\x00\xa0\x02\x04\x00\x00\x00\x04'
                      '\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00']
        self.conn = xcb2.connect()
        self.protocol = SendEvent(self.conn)
        self.protocol_check = SendEventChecked(self.conn)
        self.cookie = VoidCookie
        self.mocker.replay()

    def test_call(self):
        r"""Test SendEvent.ButtonPress.__call__() expect return VoidCookie."""
        cookie = self.protocol.ButtonPress(*self.argsbin[0])
        self.assertIsInstance(cookie, VoidCookie,
                              msg='Failed: {0}({1}) not returned'
                              ' VoidCookie\ngot: {2}'
                              .format(self.protocol.ButtonPress
                                      .__class__.__name__,
                                      str(self.argsbin[0])
                                      .replace('(', '').replace(')', ''),
                                      cookie))

    def tearDown(self):
        pass

* Sat 31 May 2014 05:59:09 PM JST
'\x00\x00\x00\x00\x16\x00\xa0\x02\x08\x00\x00\x00\x05'
                      '\x01\x00\x00\x00\x00\x00\x00\xe2\x01\x00\x00\x16\x00'
                      '\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                      '\x00\x00\x00\x01\x00'
* Sat 31 May 2014 05:59:27 PM JST
Press
* Sat 31 May 2014 11:31:46 PM JST
'_NET_WM_STATE_ABOVE'
* Sat 31 May 2014 11:35:46 PM JST
atomidentify
* Sat 31 May 2014 11:35:52 PM JST
'_NET_WM_STATE_ABOVE'
* Sat 31 May 2014 11:36:54 PM JST
'_NET_WM_STATE_ABOVE'
* Sat 31 May 2014 11:37:19 PM JST
297
* Sat 31 May 2014 11:41:12 PM JST
Set
* Sat 31 May 2014 11:42:00 PM JST
1, 297, 0, 0, 0
* Sat 31 May 2014 11:44:13 PM JST
c.core.atomidentify('_NET_WM_STATE_ABOVE')
* Sat 31 May 2014 11:45:38 PM JST
c.core.atomidentify('_NET_WM_STATE').name.format
* Sat 31 May 2014 11:51:11 PM JST
0xffffff
* Sat 31 May 2014 11:51:24 PM JST
pack('B', EventCode.ClientMessage
* Sat 31 May 2014 11:51:43 PM JST
ClientMessage
* Sat 31 May 2014 11:51:43 PM JST
EventCode.ClientMessage
* Sat 31 May 2014 11:53:22 PM JST
44040214
* Sat 31 May 2014 11:56:45 PM JST
'_NET_WM_STATE'