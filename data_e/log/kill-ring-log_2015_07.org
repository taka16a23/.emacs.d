
* Sat 04 Jul 2015 02:55:55 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:55 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:55 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:55 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:56 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:57 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:58 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:55:59 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:00 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:01 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:02 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:03 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:03 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:03 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:03 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:03 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:03 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:03 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:03 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:03 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:03 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:03 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:03 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:03 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:03 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:03 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:04 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:04 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:04 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:04 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:04 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:04 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:04 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:04 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:04 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:05 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:05 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:05 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:05 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:05 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:05 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:05 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:05 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:05 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:05 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:05 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:06 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:06 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:06 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:06 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:06 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:06 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:06 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:06 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:06 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:06 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:06 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:06 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:06 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:06 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:07 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:07 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:07 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:07 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:07 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:07 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:07 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:07 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:07 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:07 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:07 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:07 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:08 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:08 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:08 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:08 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:08 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:08 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:08 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:08 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:08 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:08 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:08 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:09 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:10 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:10 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:10 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:10 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:10 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:10 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:10 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:10 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:10 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:10 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:10 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:10 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:10 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:10 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:11 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:12 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:12 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:12 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:12 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:12 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:12 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:12 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:12 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:12 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:12 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:12 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:12 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:12 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:12 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:12 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:13 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:14 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:14 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:14 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:14 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:14 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:14 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:14 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:14 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:14 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:14 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:14 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:14 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:14 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:14 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:15 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:16 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:17 PM JST
111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
* Sat 04 Jul 2015 02:56:17 PM JST

* Sat 04 Jul 2015 02:56:17 PM JST

* Sat 04 Jul 2015 02:56:17 PM JST

* Sat 04 Jul 2015 02:56:17 PM JST

* Sat 04 Jul 2015 02:56:17 PM JST

* Sat 04 Jul 2015 02:56:17 PM JST

* Sat 04 Jul 2015 02:56:17 PM JST

* Sat 04 Jul 2015 02:56:17 PM JST

* Sat 04 Jul 2015 02:56:17 PM JST

* Sat 04 Jul 2015 02:56:17 PM JST

* Sat 04 Jul 2015 02:56:18 PM JST

* Sat 04 Jul 2015 02:56:18 PM JST

* Sat 04 Jul 2015 02:56:18 PM JST

* Sat 04 Jul 2015 02:56:18 PM JST

* Sat 04 Jul 2015 02:56:18 PM JST

* Sat 04 Jul 2015 02:56:18 PM JST

* Sat 04 Jul 2015 02:56:18 PM JST

* Sat 04 Jul 2015 02:56:18 PM JST

* Sat 04 Jul 2015 02:56:18 PM JST

* Sat 04 Jul 2015 02:56:18 PM JST

* Sat 04 Jul 2015 02:56:18 PM JST

* Sat 04 Jul 2015 02:56:18 PM JST

* Sat 04 Jul 2015 02:56:18 PM JST

* Sat 04 Jul 2015 02:56:18 PM JST

* Sat 04 Jul 2015 02:56:18 PM JST

* Sat 04 Jul 2015 02:56:19 PM JST

* Sat 04 Jul 2015 02:56:19 PM JST

* Sat 04 Jul 2015 02:56:19 PM JST

* Sat 04 Jul 2015 02:56:19 PM JST

* Sat 04 Jul 2015 02:56:19 PM JST

* Sat 04 Jul 2015 02:56:19 PM JST

* Sat 04 Jul 2015 02:56:19 PM JST

* Sat 04 Jul 2015 02:56:19 PM JST

* Sat 04 Jul 2015 02:56:19 PM JST

* Sat 04 Jul 2015 02:56:19 PM JST

* Sat 04 Jul 2015 02:56:19 PM JST

* Sat 04 Jul 2015 02:56:19 PM JST

* Sat 04 Jul 2015 02:56:19 PM JST

* Sat 04 Jul 2015 02:56:19 PM JST

* Sat 04 Jul 2015 02:56:19 PM JST

* Sat 04 Jul 2015 02:56:20 PM JST

* Sat 04 Jul 2015 02:56:20 PM JST

* Sat 04 Jul 2015 02:56:20 PM JST

* Sat 04 Jul 2015 02:56:20 PM JST

* Sat 04 Jul 2015 02:56:20 PM JST

* Sat 04 Jul 2015 02:56:20 PM JST

* Sat 04 Jul 2015 02:56:20 PM JST

* Sat 04 Jul 2015 02:56:20 PM JST

* Sat 04 Jul 2015 02:56:20 PM JST

* Sat 04 Jul 2015 02:56:20 PM JST

* Sat 04 Jul 2015 02:56:20 PM JST

* Sat 04 Jul 2015 02:56:20 PM JST

* Sat 04 Jul 2015 02:56:20 PM JST

* Sat 04 Jul 2015 02:56:20 PM JST

* Sat 04 Jul 2015 02:56:20 PM JST

* Sat 04 Jul 2015 02:56:21 PM JST

* Sat 04 Jul 2015 02:56:21 PM JST

* Sat 04 Jul 2015 02:56:21 PM JST

* Sat 04 Jul 2015 02:56:21 PM JST

* Sat 04 Jul 2015 02:56:21 PM JST

* Sat 04 Jul 2015 02:56:21 PM JST

* Sat 04 Jul 2015 02:56:21 PM JST

* Sat 04 Jul 2015 02:56:21 PM JST

* Sat 04 Jul 2015 02:56:21 PM JST

* Sat 04 Jul 2015 02:56:21 PM JST

* Sat 04 Jul 2015 02:56:21 PM JST

* Sat 04 Jul 2015 02:56:21 PM JST

* Sat 04 Jul 2015 02:56:21 PM JST

* Sat 04 Jul 2015 02:56:21 PM JST

* Sat 04 Jul 2015 02:56:21 PM JST

* Sat 04 Jul 2015 02:56:22 PM JST

* Sat 04 Jul 2015 02:56:22 PM JST

* Sat 04 Jul 2015 02:56:22 PM JST

* Sat 04 Jul 2015 02:56:22 PM JST

* Sat 04 Jul 2015 02:56:22 PM JST

* Sat 04 Jul 2015 02:56:22 PM JST

* Sat 04 Jul 2015 02:56:22 PM JST

* Sat 04 Jul 2015 02:56:22 PM JST

* Sat 04 Jul 2015 02:56:22 PM JST

* Sat 04 Jul 2015 02:56:22 PM JST

* Sat 04 Jul 2015 02:56:22 PM JST

* Sat 04 Jul 2015 02:56:22 PM JST

* Sat 04 Jul 2015 02:56:22 PM JST

* Sat 04 Jul 2015 02:56:22 PM JST

* Sat 04 Jul 2015 02:56:22 PM JST

* Sat 04 Jul 2015 02:56:23 PM JST

* Sat 04 Jul 2015 02:56:23 PM JST

* Sat 04 Jul 2015 02:56:23 PM JST

* Sat 04 Jul 2015 02:56:23 PM JST

* Sat 04 Jul 2015 02:56:23 PM JST

* Sat 04 Jul 2015 02:56:23 PM JST

* Sat 04 Jul 2015 02:56:23 PM JST

* Sat 04 Jul 2015 02:56:23 PM JST

* Sat 04 Jul 2015 02:56:23 PM JST

* Sat 04 Jul 2015 02:56:23 PM JST

* Sat 04 Jul 2015 02:56:23 PM JST

* Sat 04 Jul 2015 02:56:23 PM JST

* Sat 04 Jul 2015 02:56:23 PM JST

* Sat 04 Jul 2015 02:56:23 PM JST

* Sat 04 Jul 2015 02:56:24 PM JST

* Sat 04 Jul 2015 02:56:24 PM JST

* Sat 04 Jul 2015 02:56:24 PM JST

* Sat 04 Jul 2015 02:56:24 PM JST

* Sat 04 Jul 2015 02:56:24 PM JST

* Sat 04 Jul 2015 02:56:24 PM JST

* Sat 04 Jul 2015 02:56:24 PM JST

* Sat 04 Jul 2015 02:56:24 PM JST

* Sat 04 Jul 2015 02:56:24 PM JST

* Sat 04 Jul 2015 02:56:24 PM JST

* Sat 04 Jul 2015 02:56:24 PM JST

* Sat 04 Jul 2015 02:56:24 PM JST

* Sat 04 Jul 2015 02:56:24 PM JST

* Sat 04 Jul 2015 02:56:24 PM JST

* Sat 04 Jul 2015 02:56:24 PM JST

* Sat 04 Jul 2015 02:56:25 PM JST

* Sat 04 Jul 2015 02:56:25 PM JST

* Sat 04 Jul 2015 02:56:25 PM JST

* Sat 04 Jul 2015 02:56:25 PM JST

* Sat 04 Jul 2015 02:56:25 PM JST

* Sat 04 Jul 2015 02:56:25 PM JST

* Sat 04 Jul 2015 02:56:25 PM JST

* Sat 04 Jul 2015 03:19:48 PM JST
class CandidateProxyObserver:
    """Class CandidateProxyObserver
    """
    # Attributes:
    
    # Operations
    def on_changed_candidate(self):
        """function on_changed_candidate
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sat 04 Jul 2015 03:22:40 PM JST
class Candidate:
    """Class Candidate
    """
    # Attributes:
    spec = None  # (WindowSpec) 
    __accelerator_map = None  # () 
    
    # Operations
    def is_satisfied(self, window):
        """function is_satisfied
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def build_listener(self, listener):
        """function build_listener
        
        listener: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def register_candidate_accelerator(self, accelerator, handler):
        """function register_candidate_accelerator
        
        accelerator: 
        handler: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unregister_candidate_accelerator(self, accelerator):
        """function unregister_candidate_accelerator
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_registered_candidate_accelerator(self, accelerator):
        """function is_registered_candidate_accelerator
        
        accelerator: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    


* Sat 04 Jul 2015 03:23:35 PM JST

* Sat 04 Jul 2015 03:23:35 PM JST

* Sat 04 Jul 2015 03:23:35 PM JST
    spec = None  # (WindowSpec)

* Sat 04 Jul 2015 03:23:49 PM JST
None  # ()
* Sat 04 Jul 2015 03:24:00 PM JST
None # should raise NotImplementedError()
* Sat 04 Jul 2015 03:25:17 PM JST
return None # should raise NotImplementedError()
* Sat 04 Jul 2015 03:26:40 PM JST
return None # should raise NotImplementedError()
* Sat 04 Jul 2015 03:26:48 PM JST
acc
* Sat 04 Jul 2015 03:26:57 PM JST
None # should raise NotImplementedError()
* Sat 04 Jul 2015 03:27:24 PM JST
return None # should raise NotImplementedError()
* Sat 04 Jul 2015 03:27:46 PM JST
acc
* Sat 04 Jul 2015 03:31:01 PM JST
candidate
* Sat 04 Jul 2015 03:31:22 PM JST
class CandidateProxy(Observable):
    """Class CandidateProxy
    """
    # Attributes:
    __candidates = None  # ([(num, candidate),]) 
    
    # Operations
    def build_listener(self, window, listener):
        """function build_listener
        
        window: 
        listener: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def entry_candidate(self, candidate, priority = 5):
        """function entry_candidate
        
        candidate: 
        priority: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def withdraw_candidate(self, candidate):
        """function withdraw_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def has_candidate(self, candidate):
        """function has_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def count_candidates(self):
        """function count_candidates
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def elect_candidates(self, window):
        """function elect_candidates
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_priority(self, candidate):
        """function get_priority
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_candidates(self):
        """function list_candidates
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_changed_candidate_member(self):
        """function on_changed_candidate_member
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_changed_candidate(self):
        """function notify_changed_candidate
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sat 04 Jul 2015 03:31:38 PM JST
o
* Sat 04 Jul 2015 03:31:39 PM JST
form o
* Sat 04 Jul 2015 03:32:16 PM JST
# ([(num, candidate),]) 
* Sat 04 Jul 2015 03:33:21 PM JST
return None # should raise NotImplementedError()
* Sat 04 Jul 2015 03:35:32 PM JST
candidate == 
* Sat 04 Jul 2015 03:36:23 PM JST
return None # should raise NotImplementedError()
* Sat 04 Jul 2015 03:36:36 PM JST
        for pri, cand in self._candidates[:]:
            if cand == candidate:
                self._candidates.remove((pri, cand))

* Sat 04 Jul 2015 03:36:44 PM JST
self._candidates.remove((pri, cand))
* Sat 04 Jul 2015 03:37:31 PM JST
pri
* Sat 04 Jul 2015 03:37:40 PM JST
None # should raise NotImplementedError()
* Sat 04 Jul 2015 03:37:42 PM JST
f_
* Sat 04 Jul 2015 03:37:42 PM JST
sle.f_
* Sat 04 Jul 2015 03:38:03 PM JST
None # should raise NotImplementedError()
* Sat 04 Jul 2015 03:39:02 PM JST
get_window_spe
* Sat 04 Jul 2015 03:39:57 PM JST
None # should raise NotImplementedError()
* Sat 04 Jul 2015 03:41:02 PM JST
        for _, cand in self._candidates[:]:
            if cand == candidate:

* Sat 04 Jul 2015 03:41:04 PM JST
        for _, cand in self._candidates[:]:
            if cand == candidate:
                return True

* Sat 04 Jul 2015 03:41:38 PM JST
return None # should raise NotImplementedError()
* Sat 04 Jul 2015 03:41:39 PM JST
f
* Sat 04 Jul 2015 03:41:39 PM JST
sle.f
* Sat 04 Jul 2015 03:41:51 PM JST
self.on_changed_candidate_member()
* Sat 04 Jul 2015 03:44:23 PM JST
Observable
* Sat 04 Jul 2015 03:46:22 PM JST
Observable
* Sat 04 Jul 2015 03:47:02 PM JST
_notify_changed_accelerator
* Sat 04 Jul 2015 03:47:09 PM JST
self._notify_changed_accelerator()
* Sat 04 Jul 2015 04:18:12 PM JST
class CandidateObserver(object):
    """Class CandidateObserver
    """
    # Attributes:
    
    # Operations
    def on_changed_candidate_member(self, candidate):
        """function on_changed_candidate_member
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sat 04 Jul 2015 04:18:54 PM JST
CandidateObserver
* Sat 04 Jul 2015 04:19:40 PM JST
candidate.add_observer(self)
* Sat 04 Jul 2015 04:20:04 PM JST
candidate.
* Sat 04 Jul 2015 04:20:06 PM JST
add
* Sat 04 Jul 2015 04:23:32 PM JST
return None # should raise NotImplementedError()
* Sat 04 Jul 2015 04:24:43 PM JST
return None # should raise NotImplementedError()
* Sat 04 Jul 2015 04:25:14 PM JST
self.elect_candidates(window)
* Sat 04 Jul 2015 04:25:16 PM JST

* Sat 04 Jul 2015 04:25:17 PM JST

* Sat 04 Jul 2015 04:25:17 PM JST
        candidates = 

* Sat 04 Jul 2015 04:57:01 PM JST
class ListenerObserver(object):
    """Class ListenerObserver
    """
    # Attributes:
    
    # Operations
    def on_registered_accelerator(self, accelerator, cmd):
        """function on_registered_accelerator
        
        accelerator: 
        cmd: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_unregistered_accelerator(self, accelerator):
        """function on_unregistered_accelerator
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sat 04 Jul 2015 04:57:22 PM JST
cmd
* Sat 04 Jul 2015 04:57:45 PM JST
class InputListener(Observable):
    """Class InputListener
    """
    # Attributes:
    __binding = None  # (<Accelerator, handler>) 
    
    # Operations
    def register_accelerator(self, accelerator, handler):
        """function register_accelerator
        
        accelerator: 
        handler: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def register_accelerators(self, accelerator_map):
        """function register_accelerators
        
        accelerator_map: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def unregister_accelerator(self, accelerator):
        """function unregister_accelerator
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def clear_accelerators(self):
        """function clear_accelerators
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_accelerators(self):
        """function list_accelerators
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_handlers(self):
        """function list_handlers
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def iteritems(self):
        """function iteritems
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def items(self):
        """function items
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __register_accelerator_impl(self, accelerator):
        """function register_accelerator_impl
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __unregister_accelerator_impl(self, accelerator):
        """function unregister_accelerator_impl
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sat 04 Jul 2015 04:58:47 PM JST
None  # (<Accelerator, handler>) 
* Sat 04 Jul 2015 04:58:51 PM JST
None
* Sat 04 Jul 2015 04:59:00 PM JST
return None # should raise NotImplementedError()
* Sat 04 Jul 2015 05:00:46 PM JST
return None # should raise NotImplementedError()
* Sat 04 Jul 2015 05:04:02 PM JST
return None # should raise NotImplementedError()
* Sat 04 Jul 2015 05:04:56 PM JST
return None # should raise NotImplementedError()
* Sat 04 Jul 2015 05:10:14 PM JST
self._notify_regisetered_accelerator(accelerator, handler)
* Sat 04 Jul 2015 05:10:30 PM JST
None # should raise NotImplementedError()
* Sat 04 Jul 2015 05:10:39 PM JST
None # should raise NotImplementedError()
* Sat 04 Jul 2015 05:10:40 PM JST
_
* Sat 04 Jul 2015 05:10:41 PM JST
lsef._
* Sat 04 Jul 2015 05:10:51 PM JST
None # should raise NotImplementedError()
* Sat 04 Jul 2015 05:11:00 PM JST
None # should raise NotImplementedError()
* Sat 04 Jul 2015 05:12:50 PM JST
return None # should raise NotImplementedError()
* Sat 04 Jul 2015 05:13:49 PM JST
list_accelerators()
* Sat 04 Jul 2015 05:13:50 PM JST
self.list_accelerators()
* Sat 04 Jul 2015 05:14:21 PM JST

* Sat 04 Jul 2015 05:14:21 PM JST

* Sat 04 Jul 2015 05:14:21 PM JST
        self._binding.clear()

* Sat 04 Jul 2015 05:31:42 PM JST
        for observer in self._observers:
            observer.on_unregistered_accelerator(accelerator)

* Sat 04 Jul 2015 05:32:03 PM JST
self._notify_unregistered_accelerator(accelerator)
* Sun 05 Jul 2015 02:02:40 PM JST
class KeyListener(EventTarget, InputListener):
    """Class KeyListener
    """
    # Attributes:
    window = None  # () 
    __is_listening = None  # () 
    
    # Operations
    def can_accept_event(self, event):
        """function can_accept_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_key_event(self, event):
        """function on_key_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_window(self):
        """function get_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_listening(self):
        """function start_listening
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def stop_listening(self):
        """function stop_listening
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_listening(self):
        """function is_listening
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 05 Jul 2015 02:03:05 PM JST

* Sun 05 Jul 2015 02:03:05 PM JST
InputListener
* Sun 05 Jul 2015 02:03:07 PM JST
input_listener
* Sun 05 Jul 2015 02:03:07 PM JST
binder.input_listener
* Sun 05 Jul 2015 02:03:53 PM JST
None  # () 
* Sun 05 Jul 2015 02:04:57 PM JST

* Sun 05 Jul 2015 02:04:57 PM JST

* Sun 05 Jul 2015 02:04:57 PM JST
        window = None  # ()

* Sun 05 Jul 2015 02:05:34 PM JST
None # should raise NotImplementedError()
* Sun 05 Jul 2015 02:06:12 PM JST
return None # should raise NotImplementedError()
* Sun 05 Jul 2015 02:06:26 PM JST
False
* Sun 05 Jul 2015 02:06:35 PM JST
        if self.is_listening():
            return
        self._window.remove_posttarget_handler(self)
        self._is_listening = False

* Sun 05 Jul 2015 02:06:41 PM JST
None # should raise NotImplementedError()
* Sun 05 Jul 2015 02:06:52 PM JST
        if self.is_listening():
            return
        self._window.add_posttarget_handler(self)
        self._is_listening = True

* Sun 05 Jul 2015 02:07:29 PM JST
return event.is_key_event()
* Sun 05 Jul 2015 02:07:47 PM JST
        return None # should raise NotImplementedError()

* Sun 05 Jul 2015 02:08:18 PM JST
cmd
* Sun 05 Jul 2015 02:08:20 PM JST
cmd
* Sun 05 Jul 2015 02:08:37 PM JST
_accelerator_map
* Sun 05 Jul 2015 02:55:52 PM JST
class KeyListenerX11(KeyListener):
    """Class KeyListenerX11
    """
    # Attributes:
    
    # Operations
    def __register_accelerator_impl(self, accelerator):
        """function register_accelerator_impl
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __unregister_accelerator_impl(self, accelerator):
        """function unregister_accelerator_impl
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 05 Jul 2015 02:57:22 PM JST
extend()
* Sun 05 Jul 2015 02:58:03 PM JST
return None # should raise NotImplementedError()
* Sun 05 Jul 2015 02:58:56 PM JST
        accelerators = []
        if not isinstance(accelerator, (list, )):
            accelerators.append(accelerator)
        else:
            accelerators.extend(accelerator)

* Sun 05 Jul 2015 02:59:02 PM JST
f_
* Sun 05 Jul 2015 02:59:02 PM JST
sle.f_
* Sun 05 Jul 2015 03:08:33 PM JST
accelerator
* Sun 05 Jul 2015 03:09:00 PM JST
accelerator
* Sun 05 Jul 2015 03:09:55 PM JST
class MouseListenerX11(InputListener):
    """Class MouseListenerX11
    """
    # Attributes:
    __display = None  # () 
    __root = None  # () 
    
    # Operations
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_listening(self):
        """function start_listening
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def stop_listening(self):
        """function stop_listening
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_listening(self):
        """function is_listening
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __register_accelerator_impl(self, accelerator):
        """function register_accelerator_impl
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __unregister_accelerator_impl(self, accelerator):
        """function unregister_accelerator_impl
        
        accelerator: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Sun 05 Jul 2015 05:34:48 PM JST
EventDispatcher
* Sun 05 Jul 2015 05:58:03 PM JST
ButtonPressEvent, ButtonReleaseEvent
* Mon 06 Jul 2015 01:04:05 PM JST
None # should raise NotImplementedError()
* Mon 06 Jul 2015 01:20:52 PM JST
display.get_setup().roots[0].root
* Mon 06 Jul 2015 01:21:24 PM JST
f_
* Mon 06 Jul 2015 01:21:24 PM JST
sle.f_
* Mon 06 Jul 2015 01:21:38 PM JST
return None # should raise NotImplementedError()
* Mon 06 Jul 2015 01:21:55 PM JST
return None # should raise NotImplementedError()
* Mon 06 Jul 2015 01:22:39 PM JST
return None # should raise NotImplementedError()
* Mon 06 Jul 2015 01:25:47 PM JST
MouseEvent
* Tue 07 Jul 2015 09:30:58 AM JST
ButtonPressEvent, ButtonReleaseEvent
* Tue 07 Jul 2015 09:31:22 AM JST
ButtonPressEvent, ButtonReleaseEvent
* Tue 07 Jul 2015 09:31:40 AM JST
MouseEvent
* Tue 07 Jul 2015 02:05:51 PM JST

* Tue 07 Jul 2015 02:05:51 PM JST

* Tue 07 Jul 2015 02:05:51 PM JST
                                  # ButtonPressEvent,

* Tue 07 Jul 2015 02:05:51 PM JST
                                  # ButtonPressEvent,

* Tue 07 Jul 2015 02:05:51 PM JST
                                  # ButtonPressEvent,
                                  # ButtonReleaseEvent,

* Tue 07 Jul 2015 02:12:18 PM JST
class Event:
    """Class Event
    """
    # Attributes:
    __handled = None  # (bool) 
    
    # Operations
    def is_mouse_event(self):
        """function is_mouse_event
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_key_event(self):
        """function is_key_event
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_handled(self):
        """function is_handled
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_handled(self):
        """function set_handled
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_accelerator(self):
        """function get_accelerator
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_modifiers(self):
        """function get_modifiers
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_time(self):
        """function get_time
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_down(self):
        """function is_down
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_up(self):
        """function is_up
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_code(self):
        """function get_code
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 07 Jul 2015 02:12:52 PM JST
        return isinstance(
            self._event, (xproto.ButtonPressEvent, xproto.ButtonReleaseEvent))

* Tue 07 Jul 2015 02:12:58 PM JST
from xcb import xproto
* Tue 07 Jul 2015 02:13:13 PM JST
        return isinstance(
            self._event, (xproto.KeyPressEvent, xproto.KeyReleaseEvent))

* Tue 07 Jul 2015 02:13:22 PM JST
None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:13:23 PM JST
f
* Tue 07 Jul 2015 02:13:23 PM JST
lse.f
* Tue 07 Jul 2015 02:13:37 PM JST
return None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:13:47 PM JST
xproto
* Tue 07 Jul 2015 02:14:15 PM JST
xproto.
* Tue 07 Jul 2015 02:14:18 PM JST
xproto.
* Tue 07 Jul 2015 02:14:20 PM JST
            
* Tue 07 Jul 2015 02:14:23 PM JST
xproto.
* Tue 07 Jul 2015 02:14:25 PM JST
xproto.
* Tue 07 Jul 2015 02:14:27 PM JST
            
* Tue 07 Jul 2015 02:14:38 PM JST
ButtonPressEvent
* Tue 07 Jul 2015 02:15:00 PM JST
la
* Tue 07 Jul 2015 02:15:01 PM JST
formf
* Tue 07 Jul 2015 02:15:17 PM JST
None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:15:31 PM JST
self._accelerator_cache
* Tue 07 Jul 2015 02:16:11 PM JST
self_ac
* Tue 07 Jul 2015 02:16:12 PM JST
return self_ac
* Tue 07 Jul 2015 02:16:26 PM JST
None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:17:02 PM JST
None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:17:20 PM JST
None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:17:21 PM JST
_
* Tue 07 Jul 2015 02:17:22 PM JST
self._
* Tue 07 Jul 2015 02:17:38 PM JST
ButtonReleaseE
* Tue 07 Jul 2015 02:17:46 PM JST
None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:18:01 PM JST
None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:18:02 PM JST
lsef.
* Tue 07 Jul 2015 02:18:10 PM JST
    def get_code(self):
        """function get_code
        
        returns 
        """
        return self._event.code

* Tue 07 Jul 2015 02:18:28 PM JST
class KeyEvent(Event):
    """Class KeyEvent
    """
    # Attributes:
    
    # Operations
    def get_window(self):
        """function get_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 07 Jul 2015 02:18:51 PM JST

* Tue 07 Jul 2015 02:18:51 PM JST

* Tue 07 Jul 2015 02:18:51 PM JST
        self._event = event

* Tue 07 Jul 2015 02:19:00 PM JST
None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:19:03 PM JST
_einvow
* Tue 07 Jul 2015 02:19:26 PM JST
class MouseEvent(Event):
    """Class MouseEvent
    """
    # Attributes:
    
    # Operations
    def get_point(self):
        """function get_point
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_x(self):
        """function get_x
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_y(self):
        """function get_y
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 07 Jul 2015 02:20:57 PM JST
from rectangle import Rectangle, Point
* Tue 07 Jul 2015 02:21:01 PM JST
Rectangle, 
* Tue 07 Jul 2015 02:21:18 PM JST
        if self._cache_point is None:
            self._cache_point = Point(self._event.event_x, self._event.event_y)
        return self._cache_point

* Tue 07 Jul 2015 02:21:23 PM JST
_cache_
* Tue 07 Jul 2015 02:21:27 PM JST
_cache_point
* Tue 07 Jul 2015 02:21:34 PM JST
_cache
* Tue 07 Jul 2015 02:21:44 PM JST
return self.get_point().get_x()
* Tue 07 Jul 2015 02:21:48 PM JST

* Tue 07 Jul 2015 02:21:51 PM JST
return self.get_point().get_y()
* Tue 07 Jul 2015 02:22:44 PM JST
from xcb.xproto import (ButtonPressEvent, ButtonReleaseEvent,
                        KeyPressEvent, KeyReleaseEvent)

* Tue 07 Jul 2015 02:31:00 PM JST
return None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:41:34 PM JST
class BindService(CandidateProxyObserver):
    """Class BindService
    """
    # Attributes:
    __candidate_proxy = None  # () 
    __is_serving = None  # () 
    
    # Operations
    def get_candidate_proxy(self):
        """function get_candidate_proxy
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def set_candidate_proxy(self, proxy):
        """function set_candidate_proxy
        
        proxy: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def entry_candidate(self, candidate):
        """function entry_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def withdraw_candidate(self, candidate):
        """function withdraw_candidate
        
        candidate: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def has_candidate(self, candidate):
        """function has_candidate
        
        candidate: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def counts_candidates(self):
        """function counts_candidates
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def elect_candidate(self, window):
        """function elect_candidate
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_changed_candidate(self):
        """function on_changed_candidate
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def update_listener(self):
        """function update_listener
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_service(self):
        """function start_service
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def stop_service(self):
        """function stop_service
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 07 Jul 2015 02:42:30 PM JST
fromk 
* Tue 07 Jul 2015 02:42:54 PM JST
CandidateProxy
* Tue 07 Jul 2015 02:43:18 PM JST
None  # () 
* Tue 07 Jul 2015 02:43:19 PM JST
self.
* Tue 07 Jul 2015 02:43:24 PM JST
None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:43:31 PM JST
return None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:43:32 PM JST
f_
* Tue 07 Jul 2015 02:43:33 PM JST
lse.f_
* Tue 07 Jul 2015 02:44:03 PM JST
f
* Tue 07 Jul 2015 02:44:03 PM JST
sle.f
* Tue 07 Jul 2015 02:44:15 PM JST
return None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:45:29 PM JST
_candi
* Tue 07 Jul 2015 02:45:29 PM JST
self._candi
* Tue 07 Jul 2015 02:45:29 PM JST
if self._candi
* Tue 07 Jul 2015 02:46:11 PM JST
return None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:46:25 PM JST
None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:46:44 PM JST
None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:47:35 PM JST
return None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:47:56 PM JST
candidates = 
* Tue 07 Jul 2015 02:48:17 PM JST
return None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:48:38 PM JST
return None # should raise NotImplementedError()
* Tue 07 Jul 2015 02:48:46 PM JST
raise NotImplementedError()
* Tue 07 Jul 2015 03:18:21 PM JST
class KeyBindServiceObserver(object):
    """Class KeyBindServiceObserver
    """
    # Attributes:
    
    # Operations
    def on_created_listener(self, listener):
        """function on_created_listener
        
        listener: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_destroyed_listener(self, listener):
        """function on_destroyed_listener
        
        listener: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 07 Jul 2015 03:18:53 PM JST
class KeyBindService(Observable, BindService):
    """Class KeyBindService
    """
    # Attributes:
    __listeners = None  # () 
    
    # Operations
    def update_listener(self):
        """function update_listener
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_service(self):
        """function start_service
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def stop_service(self):
        """function stop_service
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_serving(self):
        """function is_serving
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 07 Jul 2015 03:20:31 PM JST
None  # () 
* Tue 07 Jul 2015 03:20:55 PM JST
from lab.xahk.desktop_manager import DesktopManager
* Tue 07 Jul 2015 03:21:07 PM JST
from lab.xahk.desktop_manager_observer import DesktopManagerObserver
* Tue 07 Jul 2015 03:21:11 PM JST
DesktopManagerObserver
* Tue 07 Jul 2015 03:21:23 PM JST
DesktopManager.get_instance().add_observer(self)
* Tue 07 Jul 2015 03:21:29 PM JST
        for window in DesktopManager.get_instance().list_windows():
            self.on_created_window(window)

* Tue 07 Jul 2015 03:21:35 PM JST
self.start_binding()
* Tue 07 Jul 2015 03:21:52 PM JST
    @classmethod
    def get_instance(cls):
        """function get_instance

        returns
        """
        if cls._instance is None:
            cls._instance = cls(CandidateProxy())
        return cls._instance

* Tue 07 Jul 2015 03:22:25 PM JST
None # should raise NotImplementedError()
* Tue 07 Jul 2015 03:22:51 PM JST
    def is_serving(self):
        """function is_serving

        returns
        """
        return self._is_serving

* Tue 07 Jul 2015 03:23:53 PM JST
listener.start_listening()
* Tue 07 Jul 2015 03:24:07 PM JST
return None # should raise NotImplementedError()
* Tue 07 Jul 2015 03:25:44 PM JST
        self._clear_listeners_accelerators()
        for listener in self._listeners:
            listener.stop_listening()

* Tue 07 Jul 2015 03:26:24 PM JST
la
* Tue 07 Jul 2015 03:26:25 PM JST
form la
* Tue 07 Jul 2015 03:26:39 PM JST
KeyListenerX11
* Tue 07 Jul 2015 03:27:20 PM JST
_proxy
* Tue 07 Jul 2015 03:27:24 PM JST
is_binding
* Tue 07 Jul 2015 03:31:48 PM JST
dfe 
* Tue 07 Jul 2015 03:33:30 PM JST
_notify_destroyed_listener
* Tue 07 Jul 2015 03:34:49 PM JST
        for listener in self._listeners:
            listener.clear_accelerators()

* Tue 07 Jul 2015 03:35:06 PM JST
self._clear_listeners_accelerators()
* Tue 07 Jul 2015 05:02:44 PM JST
class MouseBindService(DesktopCursorObserver, BindService):
    """Class MouseBindService
    """
    # Attributes:
    __listener = None  # () 
    
    # Operations
    def update_listener(self):
        """function update_listener
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def start_service(self):
        """function start_service
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def stop_service(self):
        """function stop_service
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_serving(self):
        """function is_serving
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_changed_under_window(self, desktop_cursor):
        """function on_changed_under_window
        
        desktop_cursor: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 07 Jul 2015 05:03:23 PM JST
BindService
* Tue 07 Jul 2015 05:03:45 PM JST
None  # () 
* Tue 07 Jul 2015 05:04:08 PM JST
MouseListenerX11
* Tue 07 Jul 2015 05:04:49 PM JST
get_display
* Tue 07 Jul 2015 05:05:34 PM JST
self.
* Tue 07 Jul 2015 05:05:58 PM JST
    @classmethod
    def get_instance(cls, ):
        r"""SUMMARY

        get_instance()

        @Return:

        @Error:
        """
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance

* Tue 07 Jul 2015 05:07:51 PM JST
# expand-env: ((yas/indent-line 'fixed) (yas/wrap-around-region 'nil))
* Tue 07 Jul 2015 05:24:10 PM JST
return None # should raise NotImplementedError()
* Tue 07 Jul 2015 05:24:26 PM JST
return None # should raise NotImplementedError()
* Tue 07 Jul 2015 05:25:11 PM JST
self.
* Tue 07 Jul 2015 05:25:22 PM JST
return None # should raise NotImplementedError()
* Tue 07 Jul 2015 05:25:39 PM JST
stop_service
* Tue 07 Jul 2015 05:26:17 PM JST
return None # should raise NotImplementedError()
* Tue 07 Jul 2015 05:26:18 PM JST
self.
* Tue 07 Jul 2015 05:27:35 PM JST
self._window = DesktopCursor.get_instance().get_under_window()
* Tue 07 Jul 2015 05:27:56 PM JST
self.
* Tue 07 Jul 2015 05:28:08 PM JST
DesktopCursor.get_instance().get_under_window()
* Tue 07 Jul 2015 05:29:30 PM JST

* Tue 07 Jul 2015 05:29:30 PM JST

* Tue 07 Jul 2015 05:29:30 PM JST
        self._window = desktop_cursor.get_under_window()

* Tue 07 Jul 2015 05:31:29 PM JST

* Tue 07 Jul 2015 05:31:29 PM JST

* Tue 07 Jul 2015 05:31:29 PM JST
        self._listener.stop_listening()

* Tue 07 Jul 2015 10:05:26 PM JST
    
* Tue 07 Jul 2015 10:05:35 PM JST
    
* Tue 07 Jul 2015 10:06:18 PM JST
input_
* Tue 07 Jul 2015 10:06:20 PM JST
Input
* Tue 07 Jul 2015 10:06:27 PM JST
Input
* Tue 07 Jul 2015 10:08:59 PM JST
on_registered_accelerator
* Tue 07 Jul 2015 10:09:32 PM JST
proxy = 
* Tue 07 Jul 2015 10:09:43 PM JST
get_candidate_proxy()
* Tue 07 Jul 2015 10:09:53 PM JST

* Tue 07 Jul 2015 10:09:53 PM JST

* Tue 07 Jul 2015 10:09:53 PM JST
proxy.add_candidate(emacs_candidate)

* Tue 07 Jul 2015 10:14:46 PM JST
self._notify_changed_candidate()
* Tue 07 Jul 2015 10:15:52 PM JST
code
* Tue 07 Jul 2015 10:15:59 PM JST
code
* Wed 08 Jul 2015 08:29:35 AM JST
DebugListenerObserver
* Wed 08 Jul 2015 08:29:47 AM JST

* Wed 08 Jul 2015 08:29:47 AM JST

* Wed 08 Jul 2015 08:29:47 AM JST
        self._observer = DebugListenerObserver()

* Wed 08 Jul 2015 08:29:49 AM JST
_observer
* Wed 08 Jul 2015 08:31:13 AM JST
DebugKeyBindServiceObserver
* Wed 08 Jul 2015 08:31:46 AM JST
KeyBindService.get_instance()
* Wed 08 Jul 2015 08:33:53 AM JST
MIDDLE
* Wed 08 Jul 2015 08:33:57 AM JST
Middle
* Wed 08 Jul 2015 08:34:23 AM JST
Middle
* Wed 08 Jul 2015 08:35:01 AM JST
add
* Wed 08 Jul 2015 08:35:07 AM JST
MouseBindService.get_instance()
* Wed 08 Jul 2015 08:40:56 AM JST
class NamedModifierMask(_IntEnum):
    r"""SUMMARY
    """
    Null      = 0
    Shift     = 1
    Lock      = 1 << 1
    Control   = 1 << 2
    Alt       = 1 << 3
    Numlock   = 1 << 4
    Hiper     = 1 << 5
    Super     = 1 << 6
    Mod5      = 1 << 7
    Left      = 1 << 8
    Middle    = 1 << 9
    Right     = 1 << 10
    WheelUp   = 1 << 11
    WheelDown = 1 << 12
    Any       = 1 << 15 # 32768

* Wed 08 Jul 2015 08:41:06 AM JST
NamedModifierMask
* Wed 08 Jul 2015 08:41:14 AM JST
global_button_candidate.register(
    Accelerator(ButtonIndex.Left, ), DebugInputEventHandler())

* Wed 08 Jul 2015 08:45:29 AM JST
4|8
* Wed 08 Jul 2015 08:50:29 AM JST
c.core.GrabButton(False, )
* Wed 08 Jul 2015 08:50:47 AM JST
4|8, 1, 1, 0, 0, 1, 256
* Wed 08 Jul 2015 08:53:44 AM JST
            
* Wed 08 Jul 2015 09:21:00 AM JST
DebugInputEventHandler()
* Wed 08 Jul 2015 09:40:37 AM JST
DebugInputE
* Wed 08 Jul 2015 09:40:49 AM JST
KeyboardLock(get_display())
* Wed 08 Jul 2015 09:40:58 AM JST
emacs_candidate.register(Accelerator(38), DebugInputEventHandler())
* Wed 08 Jul 2015 09:41:08 AM JST
DebugInputEvent
* Wed 08 Jul 2015 09:44:13 AM JST

* Wed 08 Jul 2015 09:44:13 AM JST

* Wed 08 Jul 2015 09:44:13 AM JST
            print

* Wed 08 Jul 2015 09:47:51 AM JST
        print(Accelerator(event.detail, event.state))
        if Accelerator(event.detail, event.state) in self._stop_keys:
            self.stop_locking()
* Wed 08 Jul 2015 09:47:51 AM JST
        print(Accelerator(event.detail, event.state))
        if Accelerator(event.detail, event.state) in self._stop_keys:
            self.stop_locking()
* Wed 08 Jul 2015 09:48:16 AM JST

* Wed 08 Jul 2015 09:48:16 AM JST

* Wed 08 Jul 2015 09:48:17 AM JST

        @Error:
        """
        print(Accelerator(event.detail, event.state))
        if Accelerator(event.detail, event.state) in self._stop_keys:
            self.stop_locking()

    def start_locking(self, ):
        r"""SUMMARY

        start_locking()

        @Return:

        @Error:
* Wed 08 Jul 2015 09:48:17 AM JST

        @Error:
        """
        print(Accelerator(event.detail, event.state))
        if Accelerator(event.detail, event.state) in self._stop_keys:
            self.stop_locking()

    def start_locking(self, ):
        r"""SUMMARY

        start_locking()

        @Return:

        @Error:
* Wed 08 Jul 2015 09:48:21 AM JST
 on_up
DEBUG on_down
DEBUG-1-mouse_listener_x11.py
3
256
DEBUG-1-mouse_listener_x11.py
3
1280
DEBUG on_up

* Wed 08 Jul 2015 09:48:23 AM JST

* Wed 08 Jul 2015 09:48:29 AM JST


        dispatch_event(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        print(Accelerator(event.detail, event.state))
        if Accelerator(event.detail, event.state) in self._stop_keys:
            self.stop_locking()

    def start_locking(self, ):
        r"""SUMMARY

        start_locking()

        @Return:

        @Error:
        """
        if self.is_locking():
            return
        self._display.core.GrabKeyboard(
* Wed 08 Jul 2015 09:48:29 AM JST


        dispatch_event(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        print(Accelerator(event.detail, event.state))
        if Accelerator(event.detail, event.state) in self._stop_keys:
            self.stop_locking()

    def start_locking(self, ):
        r"""SUMMARY

        start_locking()

        @Return:

        @Error:
        """
        if self.is_locking():
            return
        self._display.core.GrabKeyboard(
* Wed 08 Jul 2015 09:48:31 AM JST
< 10
    WheelUp   = 1 << 11
    WheelDown = 1 << 12
    Any       = 1 << 15 # 3
* Wed 08 Jul 2015 10:07:31 AM JST

* Wed 08 Jul 2015 10:07:31 AM JST

* Wed 08 Jul 2015 10:07:31 AM JST
        self.start_service()

* Wed 08 Jul 2015 10:07:41 AM JST

* Wed 08 Jul 2015 10:07:41 AM JST

* Wed 08 Jul 2015 10:07:41 AM JST
        self.start_service()

* Wed 08 Jul 2015 10:08:02 AM JST
MouseBindService.get_instance()
* Wed 08 Jul 2015 10:08:13 AM JST
KeyBindService.get_instance()
* Wed 08 Jul 2015 10:12:25 AM JST
from enum import IntEnum as _IntEnum
* Wed 08 Jul 2015 10:13:53 AM JST
Butot
* Wed 08 Jul 2015 10:13:53 AM JST
import Butot
* Wed 08 Jul 2015 10:14:03 AM JST
class ButtonIndex(_IntEnum):
    r"""ButtonIndex

    ButtonIndex is a _IntEnum.
    Responsibility:
    """
    Left = 1
    Middle = 2
    Right = 3
    WheelUp = 4
    WheelDown = 5

* Wed 08 Jul 2015 10:14:07 AM JST
1
* Wed 08 Jul 2015 10:14:18 AM JST
xproto.ButtonIndex._1
* Wed 08 Jul 2015 10:14:25 AM JST
xproto.ButtonIndex._
* Wed 08 Jul 2015 10:14:32 AM JST
class NamedModifierMask(_IntEnum):
    r"""SUMMARY
    """
    Null      = 0
    Shift     = 1
    Lock      = 1 << 1
    Control   = 1 << 2
    Alt       = 1 << 3
    Numlock   = 1 << 4
    Hiper     = 1 << 5
    Super     = 1 << 6
    Mod5      = 1 << 7
    Left      = 1 << 8
    Middle    = 1 << 9
    Right     = 1 << 10
    WheelUp   = 1 << 11
    WheelDown = 1 << 12
    Any       = 1 << 15 # 32768

* Wed 08 Jul 2015 10:15:08 AM JST
xproto.ModMask.
* Wed 08 Jul 2015 10:15:52 AM JST
 # alt
* Wed 08 Jul 2015 10:16:04 AM JST
xproto.ModMask.
* Wed 08 Jul 2015 10:16:36 AM JST
KeyButMask
* Wed 08 Jul 2015 10:16:52 AM JST
ModMask
* Wed 08 Jul 2015 10:17:38 AM JST


* Wed 08 Jul 2015 10:18:32 AM JST
xproto.KeyButMask.
* Wed 08 Jul 2015 10:18:41 AM JST
xproto.KeyButMask.Mod
* Wed 08 Jul 2015 10:18:47 AM JST
Mod
* Wed 08 Jul 2015 10:18:52 AM JST
xproto.KeyButMask.Button1
* Wed 08 Jul 2015 10:19:36 AM JST
Named
* Wed 08 Jul 2015 10:20:20 AM JST
Named
* Wed 08 Jul 2015 10:39:21 AM JST
LOG = logging.getLogger('xahk_handle')
LOG.setLevel(logging.INFO)

# output log file
LOGPATH = Path('/var/log/xahk_handle')
_RH = RotatingFileHandler(unicode(LOGPATH), 'w', 1024*50, 1)
_RH.setLevel(logging.DEBUG)
_RH.setFormatter(logging.Formatter(
    '%(asctime)s;%(name)s;%(module)s %(funcName)s(%(lineno)d);%(levelname)s;'
    '\n   %(message)s'))
LOG.addHandler(_RH)

# console
if sys.stdout.isatty():
    _CH = logging.StreamHandler()
    _CH.setLevel(logging.DEBUG)
    LOG.addHandler(_CH)

* Wed 08 Jul 2015 10:39:33 AM JST
import logging
* Wed 08 Jul 2015 10:39:39 AM JST
from logging.handlers import RotatingFileHandler
* Wed 08 Jul 2015 10:39:45 AM JST
from path import Path
* Wed 08 Jul 2015 10:41:16 AM JST
from excepthook._beep import BeepExceptionHook
* Wed 08 Jul 2015 10:41:24 AM JST
BeepExceptionHook(100, 700)
* Wed 08 Jul 2015 10:42:26 AM JST
import atexit
* Wed 08 Jul 2015 10:42:37 AM JST
@atexit.register
def on_exit():
    r"""SUMMARY

    on_exit()

    @Return:

    @Error:
    """
    get_display().disconnect()
    LOG.info('exiting...')

* Wed 08 Jul 2015 10:43:06 AM JST
class ExcludeWindowSpec(WindowSpec):
    r"""ExcludeWindowSpec

    ExcludeWindowSpec is a WindowSpec.
    Responsibility:
    """
    def is_satisfied(self, window):
        r"""SUMMARY

        is_satisfied(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """

        return ('emacs' not in window.get_wmclass() and
                'xfce4-terminal' != window.get_title())

* Wed 08 Jul 2015 10:47:37 AM JST
lab.
* Wed 08 Jul 2015 10:47:38 AM JST

* Wed 08 Jul 2015 10:47:38 AM JST

* Wed 08 Jul 2015 10:47:38 AM JST
from  import 

* Wed 08 Jul 2015 10:47:48 AM JST
ButtonIndex
* Wed 08 Jul 2015 10:48:22 AM JST

* Wed 08 Jul 2015 10:48:22 AM JST

* Wed 08 Jul 2015 10:48:22 AM JST
from enum import IntEnum as _IntEnum

* Wed 08 Jul 2015 10:48:47 AM JST
from lab.xahk.wm.eventcode import EventCode
* Wed 08 Jul 2015 10:48:51 AM JST

* Wed 08 Jul 2015 10:48:51 AM JST

* Wed 08 Jul 2015 10:48:51 AM JST
from _xahk.piece.modifier import Modifier

* Wed 08 Jul 2015 10:48:54 AM JST

* Wed 08 Jul 2015 10:48:54 AM JST

* Wed 08 Jul 2015 10:48:54 AM JST
from _xahk.eventcode import EventCode

* Wed 08 Jul 2015 10:49:58 AM JST
class ButtonCommand(InputCommand):
    r"""KeyCommand

    KeyCommand is a ImputCommand.
    Responsibility:
    """
    __slots__ = ('button', )

    def __init__(self, accelerator):
        r"""

        @Arguments:
        - `accelerator`:
        """
        super(ButtonCommand, self).__init__()
        self.button = X11Button(
            accelerator.get_code(), accelerator.get_modifiers())

    def on_down(self, event):
        r"""SUMMARY

        on_down(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        pass

    def on_up(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        window = CursorHandler.get_instance().get_under_window()
        rep = self.button.display.core.TranslateCoordinates(
            window, event.window, event.x, event.y).reply()
        newx = -(rep.dst_x - (2 * event.x))
        newy = -(rep.dst_y - (2 * event.y))
        self.button.press(window, newx, newy)
        self.button.release(window, newx, newy)
        self.button.display.flush()

    def __str__(self):
        return ('{0}({1.code}, {1.modifiers})'
                .format(super(ButtonCommand, self).__str__(), self.button))

* Wed 08 Jul 2015 10:50:19 AM JST
la
* Wed 08 Jul 2015 10:50:19 AM JST
form la
* Wed 08 Jul 2015 10:50:41 AM JST
DesktopCursor
* Wed 08 Jul 2015 10:51:46 AM JST
InputEventHandler
* Wed 08 Jul 2015 10:51:57 AM JST

* Wed 08 Jul 2015 10:51:57 AM JST

* Wed 08 Jul 2015 10:51:57 AM JST
    __slots__ = ('button', )

* Wed 08 Jul 2015 10:52:18 AM JST
class KeyCommand(InputCommand):
    r"""KeyCommand

    KeyCommand is a ImputCommand.
    Responsibility:
    """
    __slots__ = ('key', )

    def __init__(self, accelerator):
        r"""

        @Arguments:
        - `accelerator`:
        """
        super(KeyCommand, self).__init__()
        self.key = X11Key(accelerator.get_code(), accelerator.get_modifiers())

    def on_down(self, event):
        r"""SUMMARY

        on_down(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        self.key.press(event.window.get_id())
        self.key.display.flush()

    def on_up(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        self.key.release(event.window.get_id())
        self.key.display.flush()

    def __str__(self):
        return ('{0}({1.code}, {1.modifiers})'
                .format(super(KeyCommand, self).__str__(), self.key))

* Wed 08 Jul 2015 10:52:26 AM JST
InputEventHandler
* Wed 08 Jul 2015 10:55:52 AM JST

* Wed 08 Jul 2015 10:55:52 AM JST

* Wed 08 Jul 2015 10:55:52 AM JST
    __slots__ = ('key', )

* Wed 08 Jul 2015 10:57:17 AM JST
class RestartCommand(InputCommand):
    r"""KeyCommand

    KeyCommand is a ImputCommand.
    Responsibility:
    """

    def on_down(self, event):
        r"""SUMMARY

        on_down(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        print('Warning')
        print('Restarting!!')
        import sys, os
        python = sys.executable
        os.execl(python, python, *sys.argv)

    def on_up(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:

* Wed 08 Jul 2015 10:57:42 AM JST
InputEventHandler
* Wed 08 Jul 2015 10:58:43 AM JST
class ChromeOpenSecret(InputCommand, WindowManagerObserver):
    r"""ChromeOpenSecret

    ChromeOpenSecret is a InputCommand.
    Responsibility:
    """
    def __init__(self, ):
        r"""
        """
        self.ctrl_l = X11Key(46, Modifier.Control)
        self.ctrl_c = X11Key(54, Modifier.Control)
        self.shift_ctrl_n = X11Key(57, Modifier.Shift | Modifier.Control)
        self.ctrl_v = X11Key(55, Modifier.Control)
        self.ret = X11Key(36)

    def on_up(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        self.ctrl_l.tap(event.window.get_id())
        self.ctrl_l.display.flush()
        sleep(0.1)
        self.ctrl_c.tap(event.window.get_id())
        self.ctrl_c.display.flush()
        WindowManager.get_instance().add_observer(self)
        sleep(0.1)
        self.shift_ctrl_n.tap(event.window.get_id())
        self.shift_ctrl_n.display.flush()

    def on_created_window(self, window):
        r"""SUMMARY

        on_created_window(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        if 'Google-chrome' not in window.get_wmclass():
            return
        self.ctrl_v.tap(window.get_id())
        self.ctrl_v.display.flush()
        self.ret.tap(window.get_id())
        self.ret.display.flush()
        WindowManager.get_instance().remove_observer(self)

* Wed 08 Jul 2015 10:58:49 AM JST
InputCommand
* Wed 08 Jul 2015 10:58:52 AM JST
InputEventHandler
* Wed 08 Jul 2015 10:59:17 AM JST
Window
* Wed 08 Jul 2015 10:59:24 AM JST
la
* Wed 08 Jul 2015 10:59:25 AM JST
form la
* Wed 08 Jul 2015 10:59:45 AM JST

* Wed 08 Jul 2015 11:00:19 AM JST
Window
* Wed 08 Jul 2015 11:00:30 AM JST

* Wed 08 Jul 2015 11:00:30 AM JST

* Wed 08 Jul 2015 11:00:30 AM JST
sleep(SEC)

* Wed 08 Jul 2015 11:00:43 AM JST
Window
* Wed 08 Jul 2015 11:01:02 AM JST
class KeyCommandForMouse(InputCommand):
    r"""KeyCommand

    KeyCommand is a ImputCommand.
    Responsibility:
    """
    __slots__ = ('key', )

    def __init__(self, accelerator):
        r"""

        @Arguments:
        - `accelerator`:
        """
        super(KeyCommandForMouse, self).__init__()
        self.key = X11Key(accelerator.get_code(), accelerator.get_modifiers())

    def on_up(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        window = CursorHandler.get_instance().get_under_window()
        self.key.press(window)
        self.key.display.flush()

    def on_down(self, event):
        r"""SUMMARY

        on_down(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        window = CursorHandler.get_instance().get_under_window()
        self.key.release(window)
        self.key.display.flush()

* Wed 08 Jul 2015 11:01:10 AM JST
InputCommand
* Wed 08 Jul 2015 11:01:15 AM JST
InputEventHandler
* Wed 08 Jul 2015 11:01:17 AM JST

* Wed 08 Jul 2015 11:01:17 AM JST

* Wed 08 Jul 2015 11:01:17 AM JST
    __slots__ = ('key', )

* Wed 08 Jul 2015 11:02:15 AM JST
class KeyCommandForMouseChrome(KeyCommandForMouse):
    r"""KeyCommandForMouseChrome

    KeyCommandForMouseChrome is a KeyCommandForMouse.
    Responsibility:
    """
    def on_up(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        super(KeyCommandForMouseChrome, self).on_up(event)
        sleep(0.1)

* Wed 08 Jul 2015 11:02:33 AM JST
class KeyCommandForMouseChromeMiddleButton(KeyCommandForMouse):
    r"""KeyCommandForMouseChromeMiddleButton

    KeyCommandForMouseChromeMiddleButton is a KeyCommandForMouse.
    Responsibility:
    """
    def __init__(self, ):
        r"""
        """
        super(KeyCommandForMouseChromeMiddleButton, self).__init__(
            Accelerator(25, Modifier.Control)) # ^w
        self.shift_a = X11Key(38, Modifier.Shift)

    def on_down(self, event):
        r"""SUMMARY

        on_down(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        window = CursorHandler.get_instance().get_under_window()
        try:
            if 'All - Google Chrome' == window.title:
                self.shift_a.press(window)
                self.shift_a.display.flush()
        except (WindowError, BadWindow) as err:
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 100 -l 350')
            os.system('rmmod pcspkr')
            print(err)

    def on_up(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        window = CursorHandler.get_instance().get_under_window()
        need_sleep = False
        try:
            if 'All - Google Chrome' == window.title:
                self.shift_a.release(window)
                self.shift_a.display.flush()
                need_sleep = True
        except (WindowError, BadWindow) as err:
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 100 -l 350')
            os.system('rmmod pcspkr')
            print(err)
        self.key.press(window)
        self.key.release(window)
        if need_sleep:
            sleep(1)
        self.key.display.flush()
        # super(KeyCommandForMouseChromeMiddleButton, self).on_up(event)
        # super(KeyCommandForMouseChromeMiddleButton, self).on_down(event)

* Wed 08 Jul 2015 11:03:14 AM JST
WindowError, BadWindow
* Wed 08 Jul 2015 11:05:50 AM JST
class ToggleAlwaysTop(InputCommand):
    r"""ToggleAlwaysTop

    ToggleAlwaysTop is a InputCommand.
    Responsibility:
    """

    def on_down(self, event):
        r"""SUMMARY

        on_down(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        window = CursorHandler.get_instance().get_under_window()
        window.set_always_on_top(2)

* Wed 08 Jul 2015 11:06:16 AM JST
InputEventHandler
* Wed 08 Jul 2015 11:06:29 AM JST
class XAHKStopRunning(Exception):
    r"""XAHKStopRunning

    XAHKStopRunning is a Exception.
    Responsibility:
    """

* Wed 08 Jul 2015 11:06:36 AM JST
class QuitCommand(InputCommand):
    r"""QuitCommand

    QuitCommand is a InputCommand.
    Responsibility:
    """
    def on_down(self, event):
        r"""SUMMARY

        on_down(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        raise XAHKStopRunning()

* Wed 08 Jul 2015 11:06:48 AM JST
InputEventHandler
* Wed 08 Jul 2015 11:31:51 AM JST
class Debug(InputCommand, CursorHandlerObserver, KeyBindListenerObserver,
            MouseBindListenerObserver):
    r"""Debug

    Debug is a InputCommand.
    Responsibility:
    """
    def __init__(self, ):
        r"""
        """
        self._debugging = False
        self.start_debugging()
        self._under_window = None
        under_window = CursorHandler.get_instance().get_under_window()
        self._set_under_window(under_window)

    def start_debugging(self, ):
        r"""SUMMARY

        start_debugging()

        @Return:

        @Error:
        """
        if self._debugging:
            return self._debugging
        print('Starting Debug')
        CursorHandler.get_instance().add_observer(self)
        KeyBindListener.get_instance().add_observer(self)
        MouseBindListener.get_instance().add_observer(self)
        self._debugging = True

    def stop_debugging(self, ):
        r"""SUMMARY

        stop_debugging()

        @Return:

        @Error:
        """
        if not self._debugging:
            return
        print('Stopping Debug')
        CursorHandler.get_instance().remove_observer(self)
        KeyBindListener.get_instance().remove_observer(self)
        MouseBindListener.get_instance().remove_observer(self)
        self._debugging = False

    def on_down(self, event):
        r"""SUMMARY

        on_down(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        if self._debugging:
            self.stop_debugging()
        else:
            self.start_debugging()

    def _set_under_window(self, window):
        r"""SUMMARY

        _set_under_window(window)

        @Arguments:
        - `window`:

        @Return:

        @Error:
        """
        self._under_window = (window.id, window.wmclass[0])

    def on_changed_under_window(self, under_window):
        r"""SUMMARY

        on_changed_under_window(under_window)

        @Arguments:
        - `under_window`:

        @Return:

        @Error:
        """
        old_window = self._under_window
        self._set_under_window(under_window)
        print('\n** Changed Under the Window {} to {}'
              .format(old_window, self._under_window))

    def on_binded_key(self, target, cmd):
        r"""SUMMARY

        on_binded_key(target, cmd)

        @Arguments:
        - `target`:
        - `cmd`:

        @Return:

        @Error:
        """
        try:
            print('BindKey (id={0}, wmclass="{1:17}" code={2:3} modifiers={3:5}) '
                  'to {4}'.format(
                      target[0].id, target[0].wmclass[0] + ',', target[1],
                      target[2], cmd))
        except IndexError as _IndexError:
            print(_IndexError)
            print(target[0].wmclass)
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 100 -l 350')
            os.system('rmmod pcspkr')

    def on_unbinded_key(self, target):
        r"""SUMMARY

        on_unbinded_key(target)

        @Arguments:
        - `target`:

        @Return:

        @Error:
        """
        print('UnbindKey (id={0} {1:3} {2})'.format(
            target[0].id, target[1], target[2]))

    def on_binded_button(self, target, cmd):
        r"""SUMMARY

        on_binded_button(target, cmd)

        @Arguments:
        - `target`:
        - `cmd`:

        @Return:

        @Error:
        """
        print('BindMouse ({0} {1:3} {2:5}) to {3}'.format(
            target[0].id, target[1], target[2], cmd))

    def on_unbinded_button(self, target):
        r"""SUMMARY

        on_unbinded_key(target)

        @Arguments:
        - `target`:

        @Return:

        @Error:
        """
        print('UnbindMouse ({0} {1:3} {2})'
              .format(target[0], target[1], target[2]))

* Wed 08 Jul 2015 11:32:20 AM JST
InputEventHandler
* Wed 08 Jul 2015 11:33:05 AM JST
MouseBind
* Wed 08 Jul 2015 11:33:10 AM JST
            
* Wed 08 Jul 2015 11:34:08 AM JST

* Wed 08 Jul 2015 11:34:56 AM JST

* Wed 08 Jul 2015 11:34:57 AM JST
listener_observer
* Wed 08 Jul 2015 11:35:03 AM JST
ListenerObserver
* Wed 08 Jul 2015 11:35:57 AM JST
KeyBindServiceObserver
* Wed 08 Jul 2015 11:36:17 AM JST
desktop
* Wed 08 Jul 2015 11:36:30 AM JST
DesktopCursor.get_instance().get_under_window()
* Wed 08 Jul 2015 11:36:34 AM JST

* Wed 08 Jul 2015 11:36:34 AM JST

* Wed 08 Jul 2015 11:36:34 AM JST
        under_window = 

* Wed 08 Jul 2015 11:39:06 AM JST
        DesktopCursor.get_instance().add_observer(self)
        KeyBindService.get_instance().add_observer(self)
        MouseBindService.get_instance()._listener.add_observer(self)

* Wed 08 Jul 2015 11:39:13 AM JST
add
* Wed 08 Jul 2015 11:39:15 AM JST
add
* Wed 08 Jul 2015 11:39:18 AM JST
remove
* Wed 08 Jul 2015 11:39:24 AM JST
add
* Wed 08 Jul 2015 11:40:04 AM JST
under_window
* Wed 08 Jul 2015 11:40:54 AM JST
on_binded
* Wed 08 Jul 2015 11:41:01 AM JST
target
* Wed 08 Jul 2015 11:41:09 AM JST
cmd
* Wed 08 Jul 2015 11:58:04 AM JST
    def on_created_listener(self, listener):
        """function on_created_listener

        listener:

        returns
        """
        return None # should raise NotImplementedError()

    def on_destroyed_listener(self, listener):
        """function on_destroyed_listener

        listener:

        returns
        """
        return None # should raise NotImplementedError()

* Wed 08 Jul 2015 11:58:21 AM JST
return None # should raise NotImplementedError()
* Wed 08 Jul 2015 11:58:31 AM JST
return None # should raise NotImplementedError()
* Wed 08 Jul 2015 11:58:33 AM JST
self.
* Wed 08 Jul 2015 12:00:47 PM JST
DOWN_ACCE = Accelerator(116)
UP_ACCE = Accelerator(111)
LEFT_ACCE = Accelerator(113)
RIGHT_ACCE = Accelerator(114)
L_KEY_ACCE = Accelerator(46)
N_CTRL_KEY_ACCE = Accelerator(57, Modifier.Control)
K_CTRL_KEY_ACCE = Accelerator(45, Modifier.Control)
L_CTRL_KEY_ACCE = Accelerator(46, Modifier.Control)
J_CTRL_KEY_ACCE = Accelerator(44, Modifier.Control)
E_CTRL_KEY_ACCE = Accelerator(26, Modifier.Control)
Q_CTRL_KEY_ACCE = Accelerator(24, Modifier.Control)
W_CTRL_KEY_ACCE = Accelerator(25, Modifier.Control)
T_SHIFT_CTRL_KEY_ACCE = Accelerator(28, Modifier.Shift | Modifier.Control)
N_SUPER_KEY_ACCE = Accelerator(57, Modifier.Super)
T_SUPER_KEY_ACCE = Accelerator(28, Modifier.Super)
ESC_SHIFT_KEY_ACCE = Accelerator(9, Modifier.Shift)
F1_SHIFT_KEY_ACCE = Accelerator(67, Modifier.Shift)
F1_ALT_KEY_ACCE = Accelerator(67, Modifier.Alt)
F4_ALT_KEY_ACCE = Accelerator(70, Modifier.Alt)
TAB_CTRL_SHIFT_ACCE = Accelerator(23, Modifier.Shift | Modifier.Control)
TAB_CTRL_ACCE = Accelerator(23, Modifier.Control)

* Wed 08 Jul 2015 12:03:22 PM JST
global_key_candidate
* Wed 08 Jul 2015 12:04:05 PM JST
global_key_candidate.register_bind(ESC_SHIFT_KEY_ACCE, QuitCommand())
global_key_candidate.register_bind(F1_SHIFT_KEY_ACCE, Debug())
global_key_candidate.register_bind(F1_ALT_KEY_ACCE, RestartCommand())

* Wed 08 Jul 2015 12:04:26 PM JST
exclue_emacs_key_candidate = BindCandidate(ExcludeWindowSpec())
exclue_emacs_key_candidate.register_bind(N_CTRL_KEY_ACCE, KeyCommand(DOWN_ACCE))
exclue_emacs_key_candidate.register_bind(K_CTRL_KEY_ACCE, KeyCommand(UP_ACCE))
exclue_emacs_key_candidate.register_bind(J_CTRL_KEY_ACCE, KeyCommand(LEFT_ACCE))
exclue_emacs_key_candidate.register_bind(L_CTRL_KEY_ACCE, KeyCommand(RIGHT_ACCE))

* Wed 08 Jul 2015 12:05:29 PM JST
chrome_candidate.register_bind(E_CTRL_KEY_ACCE, KeyCommand(L_CTRL_KEY_ACCE))
chrome_candidate.register_bind(Q_CTRL_KEY_ACCE, KeyCommand(T_SHIFT_CTRL_KEY_ACCE))
chrome_candidate.register_bind(N_SUPER_KEY_ACCE, ChromeOpenSecret())
chrome_candidate.register_bind(T_SUPER_KEY_ACCE, ChromeOpenSecret())

* Wed 08 Jul 2015 12:06:06 PM JST
chrome_candidate = BindCandidate(WindowWMClassSpec('Google-chrome'))
* Wed 08 Jul 2015 12:06:39 PM JST

* Wed 08 Jul 2015 12:06:40 PM JST
emacs_candidate
* Wed 08 Jul 2015 12:06:45 PM JST

* Wed 08 Jul 2015 12:06:46 PM JST

* Wed 08 Jul 2015 12:06:47 PM JST
emacs_candidate
* Wed 08 Jul 2015 12:06:58 PM JST
Bind
* Wed 08 Jul 2015 12:07:13 PM JST
exclue_emacs_key_candidate
* Wed 08 Jul 2015 12:08:45 PM JST
MIDDLE_BUTTON_ACCE = Accelerator(ButtonIndex.Middle, )
RIGHT_BUTTON_ACCE = Accelerator(ButtonIndex.Right)
SHIFT_LEFT_BUTTON_ACCE = Accelerator(ButtonIndex.Left, Modifier.Shift)
WHEELUP_RIGHT_BUTTON_ACCE = Accelerator(ButtonIndex.WheelUp, Modifier.Right)
WHEELDOWN_RIGHT_BUTTON_ACCE = Accelerator(ButtonIndex.WheelDown, Modifier.Right)

* Wed 08 Jul 2015 12:12:06 PM JST
global_button_candidate.register_bind(SHIFT_LEFT_BUTTON_ACCE, ToggleAlwaysTop())
* Wed 08 Jul 2015 12:12:34 PM JST
global_button_candidate.register_bind(
    MIDDLE_BUTTON_ACCE, KeyCommand(F4_ALT_KEY_ACCE))

* Wed 08 Jul 2015 12:12:38 PM JST
    
* Wed 08 Jul 2015 12:12:56 PM JST
chrome_mouse_candidate = BindCandidate(WindowWMClassSpec('Google-chrome'))
* Wed 08 Jul 2015 12:13:01 PM JST
Bind
* Wed 08 Jul 2015 12:13:06 PM JST
chrome_mouse_candidate.register_bind(
    MIDDLE_BUTTON_ACCE, KeyCommandForMouseChromeMiddleButton())

chrome_mouse_candidate.register_bind(
    WHEELUP_RIGHT_BUTTON_ACCE, KeyCommandForMouseChrome(TAB_CTRL_SHIFT_ACCE))
chrome_mouse_candidate.register_bind(
    WHEELDOWN_RIGHT_BUTTON_ACCE, KeyCommandForMouseChrome(TAB_CTRL_ACCE))
chrome_mouse_candidate.register_bind(
    RIGHT_BUTTON_ACCE, ButtonCommand(RIGHT_BUTTON_ACCE))

* Wed 08 Jul 2015 12:15:01 PM JST
global_button_candidate
* Wed 08 Jul 2015 12:15:05 PM JST

* Wed 08 Jul 2015 12:46:32 PM JST
MouseBindService.get_instance().start_service()
* Wed 08 Jul 2015 12:50:09 PM JST
    _release_modifier = {ButtonIndex.Left: Modifier.Left,
                         ButtonIndex.Middle: Modifier.Middle,
                         ButtonIndex.Right: Modifier.Right,
                         ButtonIndex.WheelUp: Modifier.WheelUp,
                         ButtonIndex.WheelDown: Modifier.WheelDown,
                         }

* Wed 08 Jul 2015 01:49:31 PM JST

* Wed 08 Jul 2015 01:49:31 PM JST

* Wed 08 Jul 2015 01:49:31 PM JST
# ButtonPressEvent, ButtonReleaseEvent

* Wed 08 Jul 2015 01:56:28 PM JST
self.shift_a.press(window)
* Thu 09 Jul 2015 12:58:05 PM JST
xproto.KeyButMask.Button1
* Thu 09 Jul 2015 01:08:59 PM JST
check()
* Thu 09 Jul 2015 01:13:35 PM JST
c.core.GrabButton(False, 482, 4|8, 1,1,0,0, 1, 256)
* Thu 09 Jul 2015 01:13:59 PM JST
c.core.GrabButton(False, 482, 4|8, 1,1,0,0, 1, 256)
* Thu 09 Jul 2015 01:14:09 PM JST
256
* Thu 09 Jul 2015 01:17:07 PM JST
xproto.KeyButMask.Button3
* Thu 09 Jul 2015 01:27:50 PM JST
2048
* Thu 09 Jul 2015 04:59:08 PM JST

* Thu 09 Jul 2015 04:59:21 PM JST
ModifierMask
* Thu 09 Jul 2015 04:59:45 PM JST
SHIFT_LEFT_BUTTON_ACCE_
* Thu 09 Jul 2015 05:00:07 PM JST
chrome_mouse_candidate.register(
    WHEELUP_RIGHT_BUTTON_ACCE, chrome_tab_move_left)

* Thu 09 Jul 2015 05:00:20 PM JST
    
* Thu 09 Jul 2015 05:01:00 PM JST
WHEELUP_RIGHT_BUTTON_ACCE = Accelerator(
    ButtonIndex.WheelUp, ModifierMask.Right)

* Thu 09 Jul 2015 05:01:07 PM JST
ModifierMask
* Thu 09 Jul 2015 05:09:15 PM JST
event
* Thu 09 Jul 2015 05:10:34 PM JST
self._display
* Thu 09 Jul 2015 05:10:51 PM JST
self._display.flush()
* Thu 09 Jul 2015 05:11:30 PM JST

* Thu 09 Jul 2015 05:11:30 PM JST

* Thu 09 Jul 2015 05:11:30 PM JST
        self._display.flush()

* Thu 09 Jul 2015 05:11:32 PM JST

* Thu 09 Jul 2015 05:11:32 PM JST

* Thu 09 Jul 2015 05:11:33 PM JST
        self._display.flush()

* Fri 10 Jul 2015 01:11:47 PM JST
KeyButMask
* Fri 10 Jul 2015 02:06:03 PM JST
c.core.GrabButton(False, 482, 4|8, 1,1,0,0, 4, )
* Fri 10 Jul 2015 02:06:22 PM JST
    Shift     = xproto.KeyButMask.Shift
    Lock      = xproto.KeyButMask.Lock
    Control   = xproto.KeyButMask.Control
    Alt       = xproto.KeyButMask.Mod1
    Numlock   = xproto.KeyButMask.Mod2
    Hiper     = xproto.KeyButMask.Mod3
    Super     = xproto.KeyButMask.Mod4
    Mod5      = xproto.KeyButMask.Mod5
    Left      = xproto.KeyButMask.Button1
    Middle    = xproto.KeyButMask.Button2
    Right     = xproto.KeyButMask.Button3
    WheelUp   = xproto.KeyButMask.Button4
    WheelDown = xproto.KeyButMask.Button5

* Fri 10 Jul 2015 02:07:25 PM JST
xproto.KeyButMask.Button3
* Fri 10 Jul 2015 02:08:12 PM JST
xproto.KeyButMask.Button4
* Fri 10 Jul 2015 02:11:32 PM JST
        self._display.core.GrabButton(
* Fri 10 Jul 2015 02:11:32 PM JST
        self._display.core.GrabButton(
* Fri 10 Jul 2015 02:11:35 PM JST
        self._display.core.GrabButton(
* Fri 10 Jul 2015 02:11:36 PM JST
        self._display.core.GrabButton(
* Fri 10 Jul 2015 02:11:44 PM JST
f._root

    def _grab(self, window, code, modifiers):
        """function grab

        window:
* Fri 10 Jul 2015 02:14:10 PM JST
check()
* Fri 10 Jul 2015 02:14:14 PM JST
Button4
* Fri 10 Jul 2015 02:14:15 PM JST
KeyButMask.Button4
* Fri 10 Jul 2015 02:14:15 PM JST
xproto.KeyButMask.Button4
* Fri 10 Jul 2015 02:25:39 PM JST
xproto.KeyButMask.Button4
* Fri 10 Jul 2015 02:25:59 PM JST
check()
* Fri 10 Jul 2015 02:26:45 PM JST
WheelUp   = xproto.KeyButMask.Button4
* Fri 10 Jul 2015 02:26:49 PM JST
Right     = xproto.KeyButMask.Button3
* Fri 10 Jul 2015 02:44:46 PM JST
c.core.GrabButton(False, 482, 4|8, 1,1,0,0, 4, Right)
c.core.GrabButton(False, 482, 4|8, 1,1,0,0, 4, Right|WheelUp)

* Fri 10 Jul 2015 02:46:42 PM JST

* Fri 10 Jul 2015 02:46:43 PM JST

* Fri 10 Jul 2015 02:47:20 PM JST
WheelUp   = xproto.KeyButMask.Button4
Right     = xproto.KeyButMask.Button3

* Fri 10 Jul 2015 02:47:35 PM JST
c.core.GrabButton(False, 482, 4|8, 1,1,0,0, 4, Right)
c.core.GrabButton(False, 482, 4|8, 1,1,0,0, 4, Right|WheelUp)

* Fri 10 Jul 2015 02:48:39 PM JST
Shift     = xproto.KeyButMask.Shift
Lock      = xproto.KeyButMask.Lock
Control   = xproto.KeyButMask.Control
Alt       = xproto.KeyButMask.Mod1
Numlock   = xproto.KeyButMask.Mod2
Hiper     = xproto.KeyButMask.Mod3
Super     = xproto.KeyButMask.Mod4
Mod5      = xproto.KeyButMask.Mod5
Left      = xproto.KeyButMask.Button1
Middle    = xproto.KeyButMask.Button2
Right     = xproto.KeyButMask.Button3
WheelUp   = xproto.KeyButMask.Button4
WheelDown = xproto.KeyButMask.Button5

* Fri 10 Jul 2015 02:48:45 PM JST
c.core.GrabButton(False, 482, 4|8, 1,1,0,0, 4, Right)

* Fri 10 Jul 2015 02:48:49 PM JST
c.core.GrabButton(False, 482, 4|8, 1,1,0,0, 4, Right|WheelUp)

* Fri 10 Jul 2015 02:49:29 PM JST
Shift     = xproto.KeyButMask.Shift
Lock      = xproto.KeyButMask.Lock
Control   = xproto.KeyButMask.Control
Alt       = xproto.KeyButMask.Mod1
Numlock   = xproto.KeyButMask.Mod2
Hiper     = xproto.KeyButMask.Mod3
Super     = xproto.KeyButMask.Mod4
Mod5      = xproto.KeyButMask.Mod5
Left      = xproto.KeyButMask.Button1
Middle    = xproto.KeyButMask.Button2
Right     = xproto.KeyButMask.Button3
WheelUp   = xproto.KeyButMask.Button4
WheelDown = xproto.KeyButMask.Button5

* Fri 10 Jul 2015 02:52:53 PM JST
c.core.GrabButton(False, 482, 4|8, 1,1,0,0, 4, Right)
* Fri 10 Jul 2015 02:53:46 PM JST
print('{0.detail} {0.state}'.format(c.wait_for_event()))
* Fri 10 Jul 2015 02:54:10 PM JST
Shift     = xproto.KeyButMask.Shift
Lock      = xproto.KeyButMask.Lock
Control   = xproto.KeyButMask.Control
Alt       = xproto.KeyButMask.Mod1
Numlock   = xproto.KeyButMask.Mod2
Hiper     = xproto.KeyButMask.Mod3
Super     = xproto.KeyButMask.Mod4
Mod5      = xproto.KeyButMask.Mod5
Left      = xproto.KeyButMask.Button1
Middle    = xproto.KeyButMask.Button2
Right     = xproto.KeyButMask.Button3
WheelUp   = xproto.KeyButMask.Button4
WheelDown = xproto.KeyButMask.Button5

* Fri 10 Jul 2015 02:54:16 PM JST
c.core.GrabButton(False, 482, 4|8, 1,1,0,0, 4, Right)
c.core.GrabButton(False, 482, 4|8, 1,1,0,0, 4, Right|WheelUp)

* Fri 10 Jul 2015 02:54:19 PM JST
c.core.GrabButton(False, 482, 4|8, 1,1,0,0, 4, Right)
* Fri 10 Jul 2015 02:54:22 PM JST
Right
* Fri 10 Jul 2015 02:55:50 PM JST
print('{0.detail} {0.state}'.format(c.wait_for_event()))
* Fri 10 Jul 2015 02:56:03 PM JST
print('{0.detail} {0.state}'.format(c.wait_for_event()))
* Fri 10 Jul 2015 03:54:18 PM JST
xproto.KeyButMask.Button1
* Fri 10 Jul 2015 03:57:19 PM JST
self._root.display.flush()
* Fri 10 Jul 2015 03:59:01 PM JST
event
* Fri 10 Jul 2015 04:00:01 PM JST

* Fri 10 Jul 2015 04:00:01 PM JST

* Fri 10 Jul 2015 04:00:01 PM JST
            print(event.detail)

* Fri 10 Jul 2015 04:00:01 PM JST
            print(event.detail)

* Fri 10 Jul 2015 04:00:02 PM JST
            print(event.detail)
            print(event.state)

* Fri 10 Jul 2015 04:03:27 PM JST
l
* Fri 10 Jul 2015 04:03:28 PM JST
form l
* Fri 10 Jul 2015 04:03:50 PM JST
accelerator
* Fri 10 Jul 2015 04:20:35 PM JST
state
* Fri 10 Jul 2015 04:20:35 PM JST
not state
* Fri 10 Jul 2015 04:21:12 PM JST
self._release_modifier.get(
                event.detail, 0)
* Fri 10 Jul 2015 04:21:14 PM JST
                
* Fri 10 Jul 2015 04:21:33 PM JST
            
* Fri 10 Jul 2015 04:23:18 PM JST
 MouseEvent(event)
* Fri 10 Jul 2015 04:23:27 PM JST

* Fri 10 Jul 2015 04:23:27 PM JST

* Fri 10 Jul 2015 04:23:27 PM JST
        mevent =

* Fri 10 Jul 2015 04:33:49 PM JST
return cookies
* Fri 10 Jul 2015 04:34:35 PM JST
cookies, append = ListDotAvoider().append
* Fri 10 Jul 2015 04:34:54 PM JST
from dotavoider import ListDotAvoider
* Fri 10 Jul 2015 04:35:07 PM JST
cookies
* Fri 10 Jul 2015 04:35:22 PM JST

* Fri 10 Jul 2015 04:35:22 PM JST

* Fri 10 Jul 2015 04:35:22 PM JST
        accs, append = ListDotAvoider().append

* Fri 10 Jul 2015 04:35:27 PM JST
self.
* Fri 10 Jul 2015 04:36:58 PM JST
        cookie = self._root.grab_buttons(
            [acc for acc in accelerators if acc.get_modifiers() == 0])
        cookie.check()

* Fri 10 Jul 2015 04:38:11 PM JST

* Fri 10 Jul 2015 04:38:11 PM JST

* Fri 10 Jul 2015 04:38:11 PM JST
        cookies.check()

* Fri 10 Jul 2015 04:38:13 PM JST

* Fri 10 Jul 2015 04:38:13 PM JST

* Fri 10 Jul 2015 04:38:13 PM JST
        for _ in xrange(0, 1): 

* Fri 10 Jul 2015 04:38:40 PM JST
        for cookie in cookies:
            cookie.check()

* Fri 10 Jul 2015 04:51:12 PM JST
Shift     = xproto.KeyButMask.Shift
Lock      = xproto.KeyButMask.Lock
Control   = xproto.KeyButMask.Control
Alt       = xproto.KeyButMask.Mod1
Numlock   = xproto.KeyButMask.Mod2
Hiper     = xproto.KeyButMask.Mod3
Super     = xproto.KeyButMask.Mod4
Mod5      = xproto.KeyButMask.Mod5
Left      = xproto.KeyButMask.Button1
Middle    = xproto.KeyButMask.Button2
Right     = xproto.KeyButMask.Button3
WheelUp   = xproto.KeyButMask.Button4
WheelDown = xproto.KeyButMask.Button5

* Fri 10 Jul 2015 05:07:32 PM JST

* Fri 10 Jul 2015 05:07:32 PM JST

* Fri 10 Jul 2015 05:07:32 PM JST
        print

* Fri 10 Jul 2015 05:12:35 PM JST
self._release_modifier.get(event.detail, 0)
* Fri 10 Jul 2015 05:14:02 PM JST

* Fri 10 Jul 2015 05:14:02 PM JST

* Fri 10 Jul 2015 05:14:02 PM JST
        print(state)

* Fri 10 Jul 2015 05:41:27 PM JST
MouseEvent(event)
* Fri 10 Jul 2015 05:42:40 PM JST
state
* Fri 10 Jul 2015 05:42:43 PM JST
state
* Fri 10 Jul 2015 05:42:49 PM JST
state
* Fri 10 Jul 2015 05:44:00 PM JST
detail
* Fri 10 Jul 2015 05:44:01 PM JST
event.detail
* Fri 10 Jul 2015 05:44:09 PM JST
detail
* Fri 10 Jul 2015 05:44:10 PM JST
event.detail
* Fri 10 Jul 2015 05:44:16 PM JST
detail
* Fri 10 Jul 2015 05:44:16 PM JST
event.detail
* Fri 10 Jul 2015 05:50:01 PM JST

* Fri 10 Jul 2015 05:50:01 PM JST

* Fri 10 Jul 2015 05:50:01 PM JST
        # print('{0.detail} {0.state}'.format(event))

* Fri 10 Jul 2015 06:03:10 PM JST
KeyBindService.get_instance().list_listeners()
* Fri 10 Jul 2015 06:28:39 PM JST
Accelerator
* Fri 10 Jul 2015 06:29:13 PM JST
            
* Fri 10 Jul 2015 06:29:53 PM JST

* Fri 10 Jul 2015 06:29:53 PM JST

* Fri 10 Jul 2015 06:29:53 PM JST
from lab.xahk.accelerator import Accelerator

* Fri 10 Jul 2015 06:30:49 PM JST
detail
* Fri 10 Jul 2015 06:30:52 PM JST
state
* Sat 11 Jul 2015 10:14:15 AM JST

* Sat 11 Jul 2015 10:14:16 AM JST

* Sat 11 Jul 2015 10:14:16 AM JST
            print('DEBUG-1-key_bind_service.py')

* Sat 11 Jul 2015 10:18:16 AM JST

* Sat 11 Jul 2015 10:18:16 AM JST

* Sat 11 Jul 2015 10:18:16 AM JST
        print(listener)

* Sat 11 Jul 2015 10:18:17 AM JST
        print(listener)

* Sat 11 Jul 2015 10:18:17 AM JST
        print(listener)
        print(self._accelerator_map)

* Sat 11 Jul 2015 10:20:53 AM JST
return cookies
* Sat 11 Jul 2015 10:21:35 AM JST
        for cookie in cookies:
            cookie.check()

* Sat 11 Jul 2015 10:22:00 AM JST
accelerators
* Sat 11 Jul 2015 10:24:27 AM JST
return 
* Sat 11 Jul 2015 10:36:47 AM JST

* Sat 11 Jul 2015 10:36:47 AM JST

* Sat 11 Jul 2015 10:36:47 AM JST
            print('DEBUG-1-key_bind_service.py')

* Sat 11 Jul 2015 10:36:47 AM JST
            print('DEBUG-1-key_bind_service.py')

* Sat 11 Jul 2015 10:36:47 AM JST
            print('DEBUG-1-key_bind_service.py')
            print(window)

* Sat 11 Jul 2015 10:38:40 AM JST
        for observer in self._observers:
            observer.on_created_listener(listener)

* Sat 11 Jul 2015 10:38:57 AM JST
    def _notify_created_listener(self, listener):
        r"""SUMMARY
        
        _notify_created_listener(listener)
        
        @Arguments:
        - `listener`:
        
        @Return:

        @Error:
        """
        for observer in self._observers:
            observer.on_created_listener(listener)
        

* Sat 11 Jul 2015 11:14:52 AM JST
ModifierMask
* Sat 11 Jul 2015 11:58:08 AM JST
mevent.modifiers
* Sat 11 Jul 2015 11:58:11 AM JST

* Sat 11 Jul 2015 11:58:11 AM JST

* Sat 11 Jul 2015 11:58:11 AM JST
        print(modifiers)

* Sat 11 Jul 2015 11:58:24 AM JST
modifier
* Sat 11 Jul 2015 11:59:03 AM JST
ModifierMask.Shift
* Sat 11 Jul 2015 11:59:52 AM JST
        if mevent.modifiers & ModifierMask.Alt:
            modifiers |= ModifierMask.Alt

* Sat 11 Jul 2015 12:00:01 PM JST
Alt
* Sat 11 Jul 2015 12:00:12 PM JST
        if mevent.modifiers & ModifierMask.Control:
            modifiers |= ModifierMask.Control

* Sat 11 Jul 2015 12:00:14 PM JST
Control
* Sat 11 Jul 2015 12:00:19 PM JST
Control
* Sat 11 Jul 2015 12:00:25 PM JST
        if mevent.modifiers & ModifierMask.Control:
            modifiers |= ModifierMask.Control

* Sat 11 Jul 2015 12:00:36 PM JST
        if mevent.modifiers & ModifierMask.Hiper:
            modifiers |= ModifierMask.Hiper

* Sat 11 Jul 2015 12:00:38 PM JST
Hiper
* Sat 11 Jul 2015 12:00:42 PM JST
Hiper
* Sat 11 Jul 2015 02:39:06 PM JST
form 
* Sat 11 Jul 2015 02:41:04 PM JST
  0,                                
  Mod2Mask,                         
  LockMask,                         
  Mod5Mask,                         
  Mod2Mask | LockMask,
  Mod2Mask | Mod5Mask,
  LockMask | Mod5Mask,
  Mod2Mask | LockMask | Mod5Mask
* Sat 11 Jul 2015 02:41:28 PM JST
from lab.xahk.binder.define import ButtonIndex, ModifierMask
* Sat 11 Jul 2015 02:41:37 PM JST
ButtonIndex, 
* Sat 11 Jul 2015 02:41:38 PM JST
ModifierMask
* Sat 11 Jul 2015 02:41:53 PM JST
append(acc 
* Sat 11 Jul 2015 02:42:31 PM JST
ModifierMask.Numlock
* Sat 11 Jul 2015 02:42:32 PM JST
Numloc
* Sat 11 Jul 2015 02:42:50 PM JST
            
* Sat 11 Jul 2015 02:42:51 PM JST
Lock
* Sat 11 Jul 2015 02:42:55 PM JST
            
* Sat 11 Jul 2015 02:43:03 PM JST
Mod5
* Sat 11 Jul 2015 02:43:29 PM JST
ModifierMask.Numlock
* Sat 11 Jul 2015 02:43:32 PM JST
Numlock
* Sat 11 Jul 2015 02:43:37 PM JST
            
* Sat 11 Jul 2015 02:43:41 PM JST
Lock
* Sat 11 Jul 2015 02:43:45 PM JST
            
* Sat 11 Jul 2015 02:43:48 PM JST
Numlock
* Sat 11 Jul 2015 02:43:53 PM JST
            
* Sat 11 Jul 2015 02:44:09 PM JST
ModifierMask.Numlock
* Sat 11 Jul 2015 02:44:34 PM JST
        accs, append = ListDotAvoider().append
        for acc in accelerators:
            append(acc)
            append(acc|ModifierMask.Numlock)
            append(acc|ModifierMask.Lock)
            append(acc|ModifierMask.Mod5)
            append(acc|ModifierMask.Numlock|ModifierMask.Lock)
            append(acc|ModifierMask.Numlock|ModifierMask.Mod5)
            append(acc|ModifierMask.Lock|ModifierMask.Mod5)
            append(acc|ModifierMask.Numlock|ModifierMask.Lock|ModifierMask.Mod5)

* Sat 11 Jul 2015 02:46:03 PM JST
        modifiers = 0
        if mevent.modifiers & ModifierMask.Shift:
            modifiers |= ModifierMask.Shift
        if mevent.modifiers & ModifierMask.Control:
            modifiers |= ModifierMask.Control
        if mevent.modifiers & ModifierMask.Alt:
            modifiers |= ModifierMask.Alt
        if mevent.modifiers & ModifierMask.Hiper:
            modifiers |= ModifierMask.Hiper
        if mevent.modifiers & ModifierMask.Super:
            modifiers |= ModifierMask.Super

* Sat 11 Jul 2015 02:46:24 PM JST
from lab.xahk.binder.define import ModifierMask
* Sat 11 Jul 2015 02:56:41 PM JST

* Sat 11 Jul 2015 02:56:41 PM JST

* Sat 11 Jul 2015 02:56:41 PM JST
        print('DEBUG-1-mouse_bind_service.py')

* Sat 11 Jul 2015 02:56:42 PM JST

* Sat 11 Jul 2015 02:56:42 PM JST

* Sat 11 Jul 2015 02:56:42 PM JST
        print('DEBUG-2-mouse_bind_service.py')

* Sat 11 Jul 2015 03:17:58 PM JST
Numlock
* Sat 11 Jul 2015 03:18:47 PM JST
[acc for acc in accelerators if acc.get_modifiers() == 0]
* Sat 11 Jul 2015 03:18:56 PM JST
            
* Sat 11 Jul 2015 03:20:08 PM JST
from dotavoider import ListDotAvoider
* Sat 11 Jul 2015 03:20:16 PM JST
accs, append = ListDotAvoider().append
* Sat 11 Jul 2015 03:20:52 PM JST
get_modifeir
* Sat 11 Jul 2015 03:22:58 PM JST
        accs, append = ListDotAvoider().append
        for acc in accelerators:
            if acc.modifiers == 0:
                append(acc)
        for acc in accs[:]:
            append(Accelerator(acc.code, acc.modifiers|ModifierMask.Numlock))

* Sat 11 Jul 2015 03:23:09 PM JST
            
* Sat 11 Jul 2015 03:23:24 PM JST
Numlock
* Sat 11 Jul 2015 03:23:34 PM JST
Hiper
* Sat 11 Jul 2015 03:24:10 PM JST
modifiers
* Sat 11 Jul 2015 03:24:11 PM JST
code, 
* Sat 11 Jul 2015 03:24:12 PM JST
acc.code, 
* Sat 11 Jul 2015 03:24:12 PM JST
Accelerator(acc.code, 
* Sat 11 Jul 2015 03:24:18 PM JST
append(acc|ModifierMask.Lock)
* Sat 11 Jul 2015 03:24:21 PM JST
append(acc|ModifierMask.Mod5)
* Sat 11 Jul 2015 03:24:24 PM JST
append(acc|ModifierMask.Numlock|ModifierMask.Lock)
* Sat 11 Jul 2015 03:24:28 PM JST
append(acc|ModifierMask.Numlock|ModifierMask.Mod5)
* Sat 11 Jul 2015 03:24:31 PM JST
append(acc|ModifierMask.Lock|ModifierMask.Mod5)
* Sat 11 Jul 2015 03:24:37 PM JST
append(acc|ModifierMask.Numlock|ModifierMask.Lock|ModifierMask.Mod5)
* Sat 11 Jul 2015 03:24:43 PM JST
        for acc in accs[:]:
            append(acc|ModifierMask.Numlock)
            append(acc|ModifierMask.Lock)
            append(acc|ModifierMask.Mod5)
            append(acc|ModifierMask.Numlock|ModifierMask.Lock)
            append(acc|ModifierMask.Numlock|ModifierMask.Mod5)
            append(acc|ModifierMask.Lock|ModifierMask.Mod5)
            append(acc|ModifierMask.Numlock|ModifierMask.Lock|ModifierMask.Mod5)

* Sat 11 Jul 2015 03:24:59 PM JST
Hiper
* Sat 11 Jul 2015 03:25:08 PM JST
Mod5
* Sat 11 Jul 2015 03:27:32 PM JST
RIGHT_MIDLmiddle
* Sat 11 Jul 2015 03:27:56 PM JST
ModifierMask.Right
* Sat 11 Jul 2015 03:28:37 PM JST
KeyCommandForMouse
* Sat 11 Jul 2015 03:30:10 PM JST
KeyCommandForMinimize
* Sat 11 Jul 2015 03:30:54 PM JST
    
* Sat 11 Jul 2015 03:31:41 PM JST
InputEventHandler
* Sat 11 Jul 2015 03:33:37 PM JST
Shift     = xproto.KeyButMask.Shift
Lock      = xproto.KeyButMask.Lock
Control   = xproto.KeyButMask.Control
Alt       = xproto.KeyButMask.Mod1
Numlock   = xproto.KeyButMask.Mod2
Hiper     = xproto.KeyButMask.Mod3
Super     = xproto.KeyButMask.Mod4
Mod5      = xproto.KeyButMask.Mod5
Left      = xproto.KeyButMask.Button1
Middle    = xproto.KeyButMask.Button2
Right     = xproto.KeyButMask.Button3
WheelUp   = xproto.KeyButMask.Button4
WheelDown = xproto.KeyButMask.Button5

* Sat 11 Jul 2015 03:39:59 PM JST
5
* Sat 11 Jul 2015 03:52:25 PM JST

* Sat 11 Jul 2015 03:52:25 PM JST

* Sat 11 Jul 2015 03:52:25 PM JST
            if acc.:

* Sat 11 Jul 2015 03:52:26 PM JST
            if acc.get_modifiers()^ModifierMask.Left != 0:
                return

* Sat 11 Jul 2015 03:52:29 PM JST
Left
* Sat 11 Jul 2015 03:52:37 PM JST
            if acc.get_modifiers()^ModifierMask.Right != 0:
                return

* Sat 11 Jul 2015 03:52:41 PM JST
Right
* Sat 11 Jul 2015 03:52:50 PM JST
return
* Sat 11 Jul 2015 03:52:53 PM JST
return
* Sat 11 Jul 2015 03:52:56 PM JST
return
* Sat 11 Jul 2015 03:53:01 PM JST
            if acc.get_modifiers()^ModifierMask.Middle != 0:
                continue

* Sat 11 Jul 2015 03:53:05 PM JST
            if acc.get_modifiers()^ModifierMask.Right != 0:
                continue

* Sat 11 Jul 2015 03:53:09 PM JST
Righ
* Sat 11 Jul 2015 03:53:15 PM JST
            if acc.get_modifiers()^ModifierMask.WheelUp != 0:

* Sat 11 Jul 2015 03:53:17 PM JST
            if acc.get_modifiers()^ModifierMask.WheelUp != 0:
                continue

* Sat 11 Jul 2015 03:53:31 PM JST
        for acc in accelerators:
            if acc.get_modifiers()^ModifierMask.Left != 0:
                continue
            if acc.get_modifiers()^ModifierMask.Middle != 0:
                continue
            if acc.get_modifiers()^ModifierMask.Right != 0:
                continue
            if acc.get_modifiers()^ModifierMask.WheelUp != 0:
                continue
            if acc.get_modifiers()^ModifierMask.WheelDown != 0:
                continue
            append(acc)

* Sat 11 Jul 2015 03:56:04 PM JST
print(accs)
* Sat 11 Jul 2015 04:00:06 PM JST

* Sat 11 Jul 2015 04:00:06 PM JST

* Sat 11 Jul 2015 04:00:06 PM JST
        print(accelerators)

* Sat 11 Jul 2015 04:00:08 PM JST

* Sat 11 Jul 2015 04:00:08 PM JST

* Sat 11 Jul 2015 04:00:08 PM JST
        print(accs)

* Sat 11 Jul 2015 04:00:09 PM JST

* Sat 11 Jul 2015 04:00:10 PM JST

* Sat 11 Jul 2015 04:00:10 PM JST
        print(accs)

* Sat 11 Jul 2015 04:00:10 PM JST

* Sat 11 Jul 2015 04:00:10 PM JST

* Sat 11 Jul 2015 04:00:10 PM JST
        # accs = [acc for acc in accelerators if acc.get_modifiers() == 0]

* Sat 11 Jul 2015 04:01:12 PM JST
RIGHT_BUTTON_ACCE, ButtonCommand(RIGHT_BUTTON_ACCE)
* Sat 11 Jul 2015 04:03:43 PM JST
self._under_window = window
* Sat 11 Jul 2015 04:58:34 PM JST
chrome_mouse_candidate.register(
* Sat 11 Jul 2015 05:26:56 PM JST

* Sat 11 Jul 2015 05:26:56 PM JST

* Sat 11 Jul 2015 05:26:56 PM JST
        print(handler)

* Sat 11 Jul 2015 05:26:56 PM JST

* Sat 11 Jul 2015 05:26:56 PM JST

* Sat 11 Jul 2015 05:26:57 PM JST
        print(accelerator)

* Sat 11 Jul 2015 05:27:03 PM JST
missing call
* Sat 11 Jul 2015 05:27:06 PM JST

* Sat 11 Jul 2015 05:27:06 PM JST

* Sat 11 Jul 2015 05:27:06 PM JST
            # missing call

* Sat 11 Jul 2015 05:27:09 PM JST

* Sat 11 Jul 2015 05:27:09 PM JST

* Sat 11 Jul 2015 05:27:09 PM JST
        print('')

* Sat 11 Jul 2015 05:27:38 PM JST
code
* Sat 11 Jul 2015 05:28:24 PM JST
missing call
* Sat 11 Jul 2015 05:28:26 PM JST

* Sat 11 Jul 2015 05:28:26 PM JST

* Sat 11 Jul 2015 05:28:26 PM JST
            # missing call

* Sat 11 Jul 2015 05:34:45 PM JST
py:&
* Sat 11 Jul 2015 05:34:50 PM JST
py:&
* Sat 11 Jul 2015 05:37:07 PM JST
        
* Sat 11 Jul 2015 05:37:45 PM JST
2015/07/11
* Sat 11 Jul 2015 05:38:50 PM JST
(t (self-insert-command n))
* Sat 11 Jul 2015 05:40:44 PM JST
[2015/07/11]
* Sat 11 Jul 2015 06:10:27 PM JST

* Sat 11 Jul 2015 06:10:27 PM JST

* Sat 11 Jul 2015 06:10:27 PM JST
    __slots__ = ('button', )

* Sat 11 Jul 2015 06:12:01 PM JST
class TaskManagerQuit(ButtonCommand):
    r"""TaskManagerQuit
    
    TaskManagerQuit is a ButtonCommand.
    Responsibility: 
    """
    def on_up(self, ):
        r"""SUMMARY
        
        on_up()
        
        @Return:

        @Error:
        """

* Sat 11 Jul 2015 06:12:51 PM JST
DesktopManager.get_instance().list_windows()
* Sat 11 Jul 2015 06:14:42 PM JST
from lab.xahk.desktop_manager import DesktopManager
* Sat 11 Jul 2015 06:15:12 PM JST
'Task Manager'
* Sat 11 Jul 2015 06:17:36 PM JST
rect
* Sat 11 Jul 2015 06:17:54 PM JST
title
* Sat 11 Jul 2015 06:18:20 PM JST
core.
* Sat 11 Jul 2015 06:18:48 PM JST
get_point()
* Sat 11 Jul 2015 06:20:47 PM JST
        
* Sat 11 Jul 2015 06:20:48 PM JST
press
* Sat 11 Jul 2015 06:21:00 PM JST
self.button.display.flush()
* Sat 11 Jul 2015 06:21:23 PM JST
point
* Sat 11 Jul 2015 06:21:34 PM JST
0
* Sat 11 Jul 2015 06:21:36 PM JST
0
* Sat 11 Jul 2015 06:21:50 PM JST
TaskManagerQuit
* Sat 11 Jul 2015 06:22:35 PM JST
chrome_candidate = Candidate(WindowWMClassSpec('Google-chrome'))
* Sat 11 Jul 2015 06:22:59 PM JST
chrome_mouse_candidate = Candidate(WindowWMClassSpec('Google-chrome'))

* Sat 11 Jul 2015 06:23:03 PM JST
chrome
* Sat 11 Jul 2015 06:23:13 PM JST
TaskManagerQuit
* Sat 11 Jul 2015 06:23:16 PM JST
'Task Manager'
* Sat 11 Jul 2015 06:23:23 PM JST
taskmanager_mouse_candidate
* Sat 11 Jul 2015 06:23:34 PM JST
MIDDLE_BUTTON_ACCE
* Sat 11 Jul 2015 06:24:57 PM JST

* Sat 11 Jul 2015 06:24:59 PM JST
RIGHT
* Sat 11 Jul 2015 06:25:06 PM JST
Right
* Sat 11 Jul 2015 06:25:10 PM JST
LEFT_BUTTON_ACCE
* Sat 11 Jul 2015 06:26:24 PM JST
taskmanager_mouse_candidate
* Sat 11 Jul 2015 06:26:27 PM JST

* Sat 11 Jul 2015 09:41:43 PM JST
from lab.xahk.piece.x11_piece import X11Key, X11Button
* Sat 11 Jul 2015 10:24:06 PM JST
get_bounds()
* Sat 11 Jul 2015 10:24:25 PM JST

* Sat 11 Jul 2015 10:24:27 PM JST
69206040
* Sat 11 Jul 2015 10:25:23 PM JST
69206040, 10, 10
* Sat 11 Jul 2015 10:26:04 PM JST
release
* Sat 11 Jul 2015 10:26:58 PM JST
b=X11Button(1, 0)
* Sat 11 Jul 2015 10:27:21 PM JST
69206040
* Sat 11 Jul 2015 10:27:28 PM JST
press
* Sat 11 Jul 2015 10:28:32 PM JST
69206040
* Sat 11 Jul 2015 10:28:58 PM JST
69206040
* Sat 11 Jul 2015 10:29:03 PM JST
press
* Sat 11 Jul 2015 10:30:09 PM JST
69206040, 200, 200
* Sat 11 Jul 2015 10:30:14 PM JST
press
* Sat 11 Jul 2015 10:30:53 PM JST
release
* Sat 11 Jul 2015 10:30:58 PM JST
press
* Sat 11 Jul 2015 10:31:44 PM JST
b.press(win,x,y)
* Sat 11 Jul 2015 10:31:46 PM JST
press
* Sat 11 Jul 2015 10:32:03 PM JST
69206040, 1000, 20
* Sat 11 Jul 2015 10:33:55 PM JST
69206040
* Sat 11 Jul 2015 10:34:35 PM JST
69206040
* Sat 11 Jul 2015 10:38:48 PM JST
width
* Sat 11 Jul 2015 10:40:25 PM JST
window
* Sat 11 Jul 2015 10:41:06 PM JST
69206040
* Sat 11 Jul 2015 10:43:27 PM JST
click(69206040, 1200, 20)
* Sat 11 Jul 2015 10:43:34 PM JST
DesktopManager.get_instance().list_windows()[-5]
* Sat 11 Jul 2015 10:45:26 PM JST
KeyCommand(F4_ALT_KEY_ACCE)
* Sat 11 Jul 2015 10:47:08 PM JST
ButtonCommand
* Sat 11 Jul 2015 10:47:39 PM JST
get_pid()
* Sat 11 Jul 2015 10:48:51 PM JST
Process
* Sat 11 Jul 2015 10:49:08 PM JST
69206040
* Sat 11 Jul 2015 10:50:40 PM JST
DesktopManager
* Sat 11 Jul 2015 10:51:00 PM JST
69206040
* Sat 11 Jul 2015 10:51:13 PM JST
31219
* Sat 11 Jul 2015 11:23:10 PM JST
core.
* Sat 11 Jul 2015 11:23:10 PM JST
c.core.
* Sat 11 Jul 2015 11:23:37 PM JST
        
* Sat 11 Jul 2015 11:23:47 PM JST
EventMask
* Sat 11 Jul 2015 11:31:38 PM JST
PointerMotionHint
* Sat 11 Jul 2015 11:31:52 PM JST
EventMask
* Sat 11 Jul 2015 11:33:01 PM JST
MotionNotifyEvent
* Sat 11 Jul 2015 11:33:29 PM JST
MotionNotifyEvent
* Sat 11 Jul 2015 11:35:08 PM JST
MotionNotifyEvent
* Sat 11 Jul 2015 11:37:30 PM JST
event
* Sat 11 Jul 2015 11:37:55 PM JST
event
* Sat 11 Jul 2015 11:37:59 PM JST
{0.root_x}'
* Sat 11 Jul 2015 11:53:33 PM JST
WindowIDSpec
* Sat 11 Jul 2015 11:53:55 PM JST
DesktopManager.get_instance().list_windows(WindowIDSpec(underwin))
* Sat 11 Jul 2015 11:54:21 PM JST
self._under_window == window
* Sat 11 Jul 2015 11:55:25 PM JST
self._under_window == windows[0]
* Sat 11 Jul 2015 11:56:30 PM JST
self._under_window = window
* Sat 11 Jul 2015 11:56:40 PM JST
self._notify_changed_under_window()
* Sat 11 Jul 2015 11:56:58 PM JST
windows[0]
* Sat 11 Jul 2015 11:57:02 PM JST

* Sat 11 Jul 2015 11:57:02 PM JST

* Sat 11 Jul 2015 11:57:02 PM JST
        self._set_under_window(windows[0])

* Sun 12 Jul 2015 12:02:41 AM JST
WM_CLASS
* Sun 12 Jul 2015 12:05:13 AM JST
['', '']
* Sun 12 Jul 2015 12:06:03 AM JST
 or ['', '']
* Sun 12 Jul 2015 12:13:15 AM JST
PointerMotionHint
* Sun 12 Jul 2015 12:23:24 AM JST
PointerMotionHint|
* Sun 12 Jul 2015 12:23:24 AM JST
EventMask.PointerMotionHint|
* Sun 12 Jul 2015 12:29:03 AM JST
KeyboardLock
* Sun 12 Jul 2015 12:29:48 AM JST
KeyboardLockHandler
* Sun 12 Jul 2015 12:30:23 AM JST

* Sun 12 Jul 2015 12:31:00 AM JST
ModifierMask.Super
* Sun 12 Jul 2015 12:31:05 AM JST
L_SUPER_KEY_ACCE
* Sun 12 Jul 2015 12:39:58 AM JST

* Sun 12 Jul 2015 12:39:58 AM JST

* Sun 12 Jul 2015 12:39:58 AM JST
        print('DEBUG-1-xahk2.py')

* Sun 12 Jul 2015 12:40:11 AM JST

* Sun 12 Jul 2015 12:40:11 AM JST

* Sun 12 Jul 2015 12:40:11 AM JST
        print('DEBUG-1-xahk2.py')

* Sun 12 Jul 2015 12:40:38 AM JST
len(wmclasses)
* Sun 12 Jul 2015 12:44:35 AM JST
definnit 
* Sun 12 Jul 2015 12:46:03 AM JST
f_
* Sun 12 Jul 2015 12:46:03 AM JST
sle.f_
* Sun 12 Jul 2015 12:46:29 AM JST

* Sun 12 Jul 2015 12:46:29 AM JST

* Sun 12 Jul 2015 12:46:29 AM JST
        if self._locking is None or self._locking.:

* Sun 12 Jul 2015 12:48:43 AM JST

* Sun 12 Jul 2015 12:48:43 AM JST

* Sun 12 Jul 2015 12:48:43 AM JST
U_SUPER_KEY_ACCE = 

* Sun 12 Jul 2015 11:38:16 AM JST

* Sun 12 Jul 2015 11:38:16 AM JST

* Sun 12 Jul 2015 11:38:16 AM JST
        self._display = display

* Sun 12 Jul 2015 11:38:24 AM JST
_display
* Sun 12 Jul 2015 11:39:07 AM JST
_
* Sun 12 Jul 2015 11:39:07 AM JST
self._
* Sun 12 Jul 2015 11:44:36 AM JST
Cursor
* Sun 12 Jul 2015 11:52:45 AM JST
accelerator.
* Sun 12 Jul 2015 12:46:06 PM JST
commons.
* Sun 12 Jul 2015 12:46:13 PM JST
get_display
* Sun 12 Jul 2015 12:46:24 PM JST
commons
* Sun 12 Jul 2015 12:46:36 PM JST
commons
* Sun 12 Jul 2015 12:46:45 PM JST
commons
* Sun 12 Jul 2015 12:47:04 PM JST
commons
* Sun 12 Jul 2015 12:48:15 PM JST
commons
* Sun 12 Jul 2015 12:48:18 PM JST
commons
* Sun 12 Jul 2015 12:50:27 PM JST
commons
* Sun 12 Jul 2015 12:50:38 PM JST
commons
* Sun 12 Jul 2015 12:50:49 PM JST
commons
* Sun 12 Jul 2015 12:53:00 PM JST

* Sun 12 Jul 2015 12:53:00 PM JST

* Sun 12 Jul 2015 12:53:00 PM JST
from xcb import xproto

* Sun 12 Jul 2015 12:53:07 PM JST
xproto.
* Sun 12 Jul 2015 12:53:11 PM JST
xproto.
* Sun 12 Jul 2015 12:53:12 PM JST
xproto.
* Sun 12 Jul 2015 12:53:14 PM JST
xproto.
* Sun 12 Jul 2015 12:53:33 PM JST
xproto.
* Sun 12 Jul 2015 12:53:34 PM JST
BadDrawable
* Sun 12 Jul 2015 12:53:49 PM JST
xproto.
* Sun 12 Jul 2015 12:53:52 PM JST
xproto.
* Sun 12 Jul 2015 12:53:54 PM JST
xproto.
* Sun 12 Jul 2015 12:53:56 PM JST
xproto.
* Sun 12 Jul 2015 12:53:59 PM JST
xproto.
* Sun 12 Jul 2015 12:54:02 PM JST
xproto.
* Sun 12 Jul 2015 12:54:06 PM JST
xproto.
* Sun 12 Jul 2015 12:54:09 PM JST
xproto.
* Sun 12 Jul 2015 12:57:42 PM JST
MotionNotifyEvent
* Sun 12 Jul 2015 12:57:47 PM JST
    
* Sun 12 Jul 2015 12:58:29 PM JST
MotionNotifyEvent, 
* Sun 12 Jul 2015 12:58:40 PM JST
from lab.xahk.wm.cursor_handler import CursorHandler
from lab.xahk.wm.display import get_display

* Sun 12 Jul 2015 12:59:07 PM JST
from lab.xahk.eventloop import EventLoop
from lab.xahk.event_dispatcher import EventDispatcher

* Sun 12 Jul 2015 12:59:10 PM JST
from lab.xahk.eventloop import EventLoop
from lab.xahk.event_dispatcher import EventDispatcher

* Sun 12 Jul 2015 01:00:21 PM JST
from lab.xahk.wm.cursor_handler import CursorHandler
from lab.xahk.wm.display import get_display

* Sun 12 Jul 2015 01:04:33 PM JST
Observable
* Sun 12 Jul 2015 04:37:32 PM JST
DesktopCursor
* Sun 12 Jul 2015 04:38:15 PM JST
get_under_window
* Sun 12 Jul 2015 05:05:03 PM JST
print(event.event)
* Sun 12 Jul 2015 05:05:09 PM JST
event
* Sun 12 Jul 2015 06:04:07 PM JST
self.cursor_handler.get_under_window()
* Sun 12 Jul 2015 06:04:11 PM JST

* Sun 12 Jul 2015 06:04:11 PM JST

* Sun 12 Jul 2015 06:04:11 PM JST
        underwin = 

* Mon 13 Jul 2015 11:07:51 AM JST
event.
* Mon 13 Jul 2015 11:11:24 AM JST
GetWindowAttributesUnchecked
* Mon 13 Jul 2015 11:11:24 AM JST
core.GetWindowAttributesUnchecked
* Mon 13 Jul 2015 11:11:25 AM JST
c.core.GetWindowAttributesUnchecked
* Mon 13 Jul 2015 11:15:11 AM JST
self._wm.list_windows()
* Mon 13 Jul 2015 11:15:13 AM JST

* Mon 13 Jul 2015 11:15:13 AM JST

* Mon 13 Jul 2015 11:15:13 AM JST
        windows = 

* Mon 13 Jul 2015 11:16:37 AM JST
self.cursor_handler.get_under_window())
* Mon 13 Jul 2015 11:41:56 AM JST
MapNotifyEvent, 
* Mon 13 Jul 2015 11:42:00 AM JST
DestroyNotifyEvent
* Mon 13 Jul 2015 11:42:01 AM JST
                        DestroyNotifyEvent
* Mon 13 Jul 2015 11:42:04 AM JST
MapNotifyEvent, 
* Mon 13 Jul 2015 12:45:40 PM JST
on_minimized_window
* Mon 13 Jul 2015 12:47:22 PM JST
DesktopWindowObserver
* Mon 13 Jul 2015 12:51:34 PM JST
UnmapNotifyEvent
* Mon 13 Jul 2015 12:51:58 PM JST
        if not window.is_minimized():
            window.minimize()

* Mon 13 Jul 2015 12:52:11 PM JST
minimize
* Mon 13 Jul 2015 12:52:24 PM JST
shade
* Mon 13 Jul 2015 02:00:55 PM JST
WarpPointer
* Mon 13 Jul 2015 02:03:56 PM JST
bounds = 
* Mon 13 Jul 2015 02:21:43 PM JST
point
* Mon 13 Jul 2015 02:21:49 PM JST
x
* Mon 13 Jul 2015 02:21:50 PM JST
point.x
* Mon 13 Jul 2015 02:21:52 PM JST
y
* Mon 13 Jul 2015 02:21:52 PM JST
point.y
* Mon 13 Jul 2015 02:22:06 PM JST

* Mon 13 Jul 2015 02:22:06 PM JST

* Mon 13 Jul 2015 02:22:06 PM JST
        # TODO: (Atami) [2015/06/02]

* Mon 13 Jul 2015 02:22:22 PM JST
point
* Mon 13 Jul 2015 02:22:27 PM JST
point
* Mon 13 Jul 2015 02:22:44 PM JST
point
* Mon 13 Jul 2015 02:22:49 PM JST
point
* Mon 13 Jul 2015 02:24:08 PM JST
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 1000 -l 100 -r 2 -d 0.5')
            os.system('rmmod pcspkr')

* Mon 13 Jul 2015 02:24:37 PM JST
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 1000 -l 100 -r 2 -d 0.5')

* Mon 13 Jul 2015 02:24:50 PM JST
os.system('rmmod pcspkr')
* Mon 13 Jul 2015 02:39:42 PM JST
la
* Mon 13 Jul 2015 02:39:43 PM JST
form la
* Mon 13 Jul 2015 02:40:26 PM JST
EventLoop.get_instance().dispatch_event()
* Mon 13 Jul 2015 02:40:50 PM JST
EventLoop.get_instance().dispatch_event()
* Mon 13 Jul 2015 02:41:55 PM JST
self
* Mon 13 Jul 2015 02:41:57 PM JST

* Mon 13 Jul 2015 02:41:57 PM JST

* Mon 13 Jul 2015 02:41:57 PM JST
        pass        

* Mon 13 Jul 2015 02:44:23 PM JST
def simple_teswindow2():
    r"""SUMMARY

    simple_teswindow()

    @Return:
    """
    CON = xcb2.connect()
    CON.render = CON(xcb2.render.key)
    setup = CON.get_setup()
    root = setup.roots[0].root
    depth = setup.roots[0].root_depth
    visual = setup.roots[0].root_visual
    white = setup.roots[0].white_pixel

    window = CON.generate_id()

    CON.core.CreateWindow(depth, window, root,
                          0, 0, 640, 480, 0,
                          xcb2.xproto.WindowClass.InputOutput,
                          visual,
                          xcb2.xproto.CW.BackPixel, [white])
    CON.flush()
    return window

* Mon 13 Jul 2015 02:45:03 PM JST

* Mon 13 Jul 2015 02:45:03 PM JST

* Mon 13 Jul 2015 02:45:03 PM JST
    CON = xcb2.connect()

* Mon 13 Jul 2015 02:45:10 PM JST
xcb2
* Mon 13 Jul 2015 02:45:18 PM JST
CON
* Mon 13 Jul 2015 02:45:22 PM JST
CON
* Mon 13 Jul 2015 02:45:25 PM JST
CON
* Mon 13 Jul 2015 02:45:53 PM JST
640
* Mon 13 Jul 2015 02:45:57 PM JST
480
* Mon 13 Jul 2015 02:46:13 PM JST

* Mon 13 Jul 2015 02:46:13 PM JST

* Mon 13 Jul 2015 02:46:13 PM JST
from xcb.xproto import 

* Mon 13 Jul 2015 02:46:22 PM JST
xcb.
* Mon 13 Jul 2015 02:46:26 PM JST
xcb2.
* Mon 13 Jul 2015 02:47:54 PM JST
simple_teswindow
* Mon 13 Jul 2015 02:48:31 PM JST
display.
* Mon 13 Jul 2015 02:48:59 PM JST
def simple_teswindow(display, x, y, width, height):
    r"""SUMMARY

    simple_teswindow()

    @Return:
    """
    # display.render = display(render.key)
    setup = display.get_setup()
    root = setup.roots[0].root
    depth = setup.roots[0].root_depth
    visual = setup.roots[0].root_visual
    white = setup.roots[0].white_pixel

    window = display.generate_id()

    display.core.CreateWindow(depth, window, root,
                              x, y, width, height, 0,
                              xproto.WindowClass.InputOutput,
                              visual,
                              xproto.CW.BackPixel, [white])
    display.flush()
    return window

* Mon 13 Jul 2015 02:50:36 PM JST
MapWindow?
* Mon 13 Jul 2015 03:14:57 PM JST
DesktopManager
* Mon 13 Jul 2015 03:17:45 PM JST
WindowClient
* Mon 13 Jul 2015 03:18:01 PM JST

* Mon 13 Jul 2015 03:18:01 PM JST

* Mon 13 Jul 2015 03:18:01 PM JST
    sleep(0.2)

* Mon 13 Jul 2015 03:18:19 PM JST
WindowClient.from_id(display, window)
* Mon 13 Jul 2015 03:35:22 PM JST
id
* Mon 13 Jul 2015 03:35:22 PM JST
self.id
* Mon 13 Jul 2015 03:35:39 PM JST
parent
* Mon 13 Jul 2015 03:35:48 PM JST
wid
* Mon 13 Jul 2015 03:36:01 PM JST
            
* Mon 13 Jul 2015 03:36:12 PM JST
depth, self.display.generate_id(),
                                              self.id, x, y, width, height,
                                              border_width, _class, visual,
                                              value_mask, value_list
* Mon 13 Jul 2015 03:36:20 PM JST
            
* Mon 13 Jul 2015 03:36:22 PM JST
                                              
* Mon 13 Jul 2015 03:36:23 PM JST
            
* Mon 13 Jul 2015 03:39:51 PM JST
WindowClient
* Mon 13 Jul 2015 03:40:08 PM JST
from_id
* Mon 13 Jul 2015 03:40:09 PM JST
WindowClient.from_id
* Mon 13 Jul 2015 03:47:55 PM JST
    client = WindowClient.from_id(display, window)
    client.set_bounds(Rectangle(x, y, width, height))

* Mon 13 Jul 2015 03:48:09 PM JST
y
* Mon 13 Jul 2015 03:49:56 PM JST
simple_teswindow(c, 100,100,500,500)
* Mon 13 Jul 2015 03:50:31 PM JST
simple_teswindow(c, 100,100,500,500)
* Mon 13 Jul 2015 03:52:12 PM JST
    client = WindowClient.from_id(display, window)
    client.set_bounds(Rectangle(x, y, width, height))

* Mon 13 Jul 2015 03:58:25 PM JST
simple_teswindow(c, 100,100,1000,1000)
* Mon 13 Jul 2015 03:58:48 PM JST
simple_teswindow(c, 100,100,1000,1000)
* Mon 13 Jul 2015 04:02:09 PM JST
pass
* Mon 13 Jul 2015 04:02:15 PM JST
close
* Mon 13 Jul 2015 04:08:31 PM JST
simple_teswindow(c, 100,100,1000,1000)
* Mon 13 Jul 2015 04:08:43 PM JST
w=simple_teswindow(c, 100,100,1000,1000)
* Mon 13 Jul 2015 04:09:24 PM JST
self.window.destroy_checked()
* Mon 13 Jul 2015 04:09:27 PM JST

* Mon 13 Jul 2015 04:09:27 PM JST

* Mon 13 Jul 2015 04:09:27 PM JST
        cookie = 

* Mon 13 Jul 2015 04:10:08 PM JST
simple_teswindow(c, 100,100,1000,1000)
* Mon 13 Jul 2015 04:11:26 PM JST
close()
* Mon 13 Jul 2015 04:11:27 PM JST
close()
* Mon 13 Jul 2015 04:12:10 PM JST
TestUpdateUnderWindowBase
* Mon 13 Jul 2015 04:15:28 PM JST
simple_teswindow(
            self.display, 250, 250, 500, 500, 'subwindow')
* Mon 13 Jul 2015 04:15:38 PM JST
display
* Mon 13 Jul 2015 04:15:39 PM JST
self.display
* Mon 13 Jul 2015 04:44:38 PM JST
_
* Mon 13 Jul 2015 04:44:38 PM JST
self._
* Mon 13 Jul 2015 04:44:54 PM JST
not 
* Mon 13 Jul 2015 04:45:01 PM JST
_
* Mon 13 Jul 2015 04:45:01 PM JST
lsef._
* Mon 13 Jul 2015 04:45:18 PM JST
pass
* Mon 13 Jul 2015 05:07:47 PM JST
poll_for_event
* Mon 13 Jul 2015 05:15:28 PM JST
dispatch_event
* Mon 13 Jul 2015 06:17:58 PM JST
~/.pylib/lab/xahk/
* Mon 13 Jul 2015 06:18:19 PM JST
/root/.pylib/cronrecipe.py
* Mon 13 Jul 2015 06:19:19 PM JST
from mygoogle import chrome
* Mon 13 Jul 2015 06:20:26 PM JST
http://taka16.no-ip.info:8000/
* Mon 13 Jul 2015 06:20:43 PM JST
from mygoogle import chrome
* Mon 13 Jul 2015 06:20:53 PM JST
chrome.run('http://taka16.no-ip.info:8000/')
* Mon 13 Jul 2015 06:22:54 PM JST
chrome.run('http://taka16.no-ip.info:8000/')
* Mon 13 Jul 2015 06:23:01 PM JST
def show_recipe_schedule():
    r"""SUMMARY
    
    show_recipe_schedule()
    
    @Return:

    @Error:
    """
    chrome.run('http://taka16.no-ip.info:8000/')


* Mon 13 Jul 2015 06:23:11 PM JST

* Mon 13 Jul 2015 06:23:11 PM JST

* Mon 13 Jul 2015 06:23:11 PM JST
from ref.CMD import thunar

* Mon 13 Jul 2015 06:23:22 PM JST
timedelta
* Mon 13 Jul 2015 06:23:33 PM JST
chrome
* Mon 13 Jul 2015 06:26:04 PM JST

* Mon 13 Jul 2015 06:26:04 PM JST

* Mon 13 Jul 2015 06:26:04 PM JST
from time import sleep

* Mon 13 Jul 2015 06:33:02 PM JST
def show_recipe_schedule():
    r"""SUMMARY

    show_recipe_schedule()

    @Return:

    @Error:
    """
    chrome.run('http://taka16.no-ip.info:8000/')

* Mon 13 Jul 2015 09:39:07 PM JST
simple_teswindow
* Mon 13 Jul 2015 09:42:55 PM JST
w=simple_teswindow(c, 100,100,1000,1000)
* Mon 13 Jul 2015 09:49:32 PM JST
from rectangle import Rectangle
from lab.xahk.wm.window_client import WindowClient

* Mon 13 Jul 2015 09:49:54 PM JST
render
* Mon 13 Jul 2015 09:50:20 PM JST
w=simple_teswindow(c, 0,0,1000,1000, 'tesroot')
* Mon 13 Jul 2015 09:50:26 PM JST
w2=simple_teswindow(
            c, 250, 250, 500, 500, 'subwindow')

* Mon 13 Jul 2015 11:00:13 PM JST
# "while 1:" faster than "while True:" on python2
* Mon 13 Jul 2015 11:16:27 PM JST
get_instance
* Mon 13 Jul 2015 11:17:44 PM JST
returns
* Mon 13 Jul 2015 11:29:21 PM JST
get_instance
* Mon 13 Jul 2015 11:29:23 PM JST
get_instance
* Mon 13 Jul 2015 11:29:25 PM JST
        
* Mon 13 Jul 2015 11:29:29 PM JST
        
* Mon 13 Jul 2015 11:50:45 PM JST
use
* Mon 13 Jul 2015 11:50:46 PM JST
like use
* Tue 14 Jul 2015 12:06:49 AM JST
xcb.Connection
* Tue 14 Jul 2015 01:50:41 AM JST

* Tue 14 Jul 2015 01:50:41 AM JST

* Tue 14 Jul 2015 01:50:41 AM JST
__revision__ = "$Revision$"

* Tue 14 Jul 2015 01:50:41 AM JST
__revision__ = "$Revision$"

* Tue 14 Jul 2015 01:50:41 AM JST
__revision__ = "$Revision$"
__version__ = "0.0.1"

* Tue 14 Jul 2015 01:52:30 AM JST
object
* Tue 14 Jul 2015 01:52:53 AM JST
cls, 
* Tue 14 Jul 2015 01:53:04 AM JST
type.__new__(cls, display, *args, **kwargs)
* Tue 14 Jul 2015 01:59:27 AM JST
type
* Tue 14 Jul 2015 02:02:43 AM JST
object
* Tue 14 Jul 2015 02:05:45 AM JST
cls, 
* Tue 14 Jul 2015 02:07:34 AM JST
type
* Tue 14 Jul 2015 02:09:29 AM JST
display, 
* Tue 14 Jul 2015 02:09:32 AM JST
object
* Tue 14 Jul 2015 02:09:36 AM JST
display
* Tue 14 Jul 2015 02:09:39 AM JST
display
* Tue 14 Jul 2015 02:09:50 AM JST
display, 
* Tue 14 Jul 2015 02:09:50 AM JST
cls, display, 
* Tue 14 Jul 2015 02:09:52 AM JST
display
* Tue 14 Jul 2015 02:10:15 AM JST
descriptor '__call__' requires a 'type' object but received a 'str'
* Tue 14 Jul 2015 02:19:56 AM JST
type
* Tue 14 Jul 2015 02:20:04 AM JST
uper(DisplayMultitonMeta, cls).__call__(*args, **kwargs)
* Tue 14 Jul 2015 02:20:23 AM JST
display, 
* Tue 14 Jul 2015 02:21:58 AM JST
DispatchSingletonMeta
* Tue 14 Jul 2015 02:22:51 AM JST
object
* Tue 14 Jul 2015 02:23:01 AM JST
cls
* Tue 14 Jul 2015 02:23:03 AM JST
cls
* Tue 14 Jul 2015 02:23:08 AM JST
object.__new__(cls)
* Tue 14 Jul 2015 02:23:18 AM JST
cls, 
* Tue 14 Jul 2015 02:24:05 AM JST
DisplayMultitonMeta
* Tue 14 Jul 2015 02:24:37 AM JST
cls
* Tue 14 Jul 2015 02:25:16 AM JST
from lab.xahk.commons.display_multiton import DisplayMultitonMeta
* Tue 14 Jul 2015 02:25:19 AM JST
DisplayMultitonMeta
* Tue 14 Jul 2015 02:26:05 AM JST
object
* Tue 14 Jul 2015 02:28:13 AM JST
http://www.snip2code.com/Snippet/953/Multiton
* Tue 14 Jul 2015 02:28:24 AM JST
def multiton(cls):
    instances = {}
    def get_instance(name):
        if name not in instances:
            instances[name] = cls()
        return instances[name]
    return get_instance
 
@multiton
class MyClass:
	pass

a=MyClass("type0")
b=MyClass("type0")
c=MyClass("type1")

assert a is b 
assert not(a is c)
* Tue 14 Jul 2015 02:28:43 AM JST
class DisplayMultitonMeta(type):
    r"""DisplayMultitonMeta

    DisplayMultitonMeta is a type.
    Responsibility:
    """
    _instances = {}

    def __call__(cls, display, *args, **kwargs):
        if display not in cls._instances:
            cls._instances[display] = super(
                DisplayMultitonMeta, cls).__call__(display, *args, **kwargs)
        return cls._instances[display]

* Tue 14 Jul 2015 02:28:50 AM JST
Display
* Tue 14 Jul 2015 02:28:52 AM JST
Display
* Tue 14 Jul 2015 02:28:53 AM JST
Display
* Tue 14 Jul 2015 02:29:00 AM JST
display
* Tue 14 Jul 2015 02:29:03 AM JST
display
* Tue 14 Jul 2015 02:29:08 AM JST
Display
* Tue 14 Jul 2015 02:29:11 AM JST
display, 
* Tue 14 Jul 2015 02:33:02 AM JST
display, 
* Tue 14 Jul 2015 02:33:08 AM JST
display
* Tue 14 Jul 2015 02:33:22 AM JST
cls
* Tue 14 Jul 2015 02:33:25 AM JST
cls
* Tue 14 Jul 2015 02:33:29 AM JST
cls
* Tue 14 Jul 2015 02:50:02 AM JST
52428822
* Tue 14 Jul 2015 02:52:24 AM JST
58720259
* Tue 14 Jul 2015 02:53:00 AM JST
58720259
* Tue 14 Jul 2015 02:53:36 AM JST
0x3800004
* Tue 14 Jul 2015 02:53:42 AM JST
58720260
* Tue 14 Jul 2015 12:44:38 PM JST
_NET_SUPPORTING_WM_CHECK
* Tue 14 Jul 2015 12:54:10 PM JST
'_NET_SUPPORTING_WM_CHECK'
* Tue 14 Jul 2015 12:54:35 PM JST
wm.root.change_property(xproto.PropMode.Replace, '_NET_SUPPORTING_WM_CHECK', 'WINDOW', 32, )
* Tue 14 Jul 2015 12:55:31 PM JST
62914561
* Tue 14 Jul 2015 12:58:22 PM JST
'_NET_SUPPORTING_WM_CHECK'
* Tue 14 Jul 2015 12:58:56 PM JST
WINDOW')
* Tue 14 Jul 2015 12:58:57 PM JST
get_atom('WINDOW')
* Tue 14 Jul 2015 12:58:57 PM JST
_atom_cache.get_atom('WINDOW')
* Tue 14 Jul 2015 01:00:15 PM JST
62914561
* Tue 14 Jul 2015 01:01:25 PM JST
_NET_ACTIVE_WINDOW
* Tue 14 Jul 2015 01:49:12 PM JST
# recursive call
* Tue 14 Jul 2015 01:51:53 PM JST
'_NET_SUPPORTING_WM_CHECK'
* Tue 14 Jul 2015 01:52:10 PM JST
'_NET_CLIENT_LIST_STACKING'
* Tue 14 Jul 2015 01:52:20 PM JST
    
* Tue 14 Jul 2015 01:52:29 PM JST
'_NET_CURRENT_DESKTOP'
* Tue 14 Jul 2015 01:53:52 PM JST
'_NET_DESKTOP_GEOMETRY'
* Tue 14 Jul 2015 01:54:00 PM JST
'_NET_WORKAREA'
* Tue 14 Jul 2015 01:54:07 PM JST
'_NET_DESKTOP_VIEWPORT'
* Tue 14 Jul 2015 02:01:48 PM JST
class RootWindow:
    """Class RootWindow
    """
    # Attributes:
    __root = None  # () 
    __atom_cache = None  # (AtomCache) 
    
    # Operations
    def get_id(self):
        """function get_id
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_display(self):
        """function get_display
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_supporting_wm_id(self):
        """function get_supporting_wm_id
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def get_active_window(self):
        """function get_active_window
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def client_list(self):
        """function client_list
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def get_current_desktop(self):
        """function get_current_desktop
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def get_desktop_size(self):
        """function get_desktop_size
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_workarea(self):
        """function get_workarea
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def get_viewport(self):
        """function get_viewport
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def list_desktop_names(self):
        """function list_desktop_names
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def get_desktop_geometry(self):
        """function get_desktop_geometry
        
        returns size
        """
        return None # should raise NotImplementedError()
    
    def get_number_of_desktop(self):
        """function get_number_of_desktop
        
        returns int
        """
        return None # should raise NotImplementedError()
    


* Tue 14 Jul 2015 02:02:24 PM JST
form 
* Tue 14 Jul 2015 02:02:45 PM JST

* Tue 14 Jul 2015 02:02:45 PM JST

* Tue 14 Jul 2015 02:02:45 PM JST
        self._display = display

* Tue 14 Jul 2015 02:02:46 PM JST
_
* Tue 14 Jul 2015 02:02:50 PM JST
None  # () 
* Tue 14 Jul 2015 02:03:24 PM JST

* Tue 14 Jul 2015 02:03:24 PM JST

* Tue 14 Jul 2015 02:03:24 PM JST
        __atom_cache = None  # (AtomCache) 

* Tue 14 Jul 2015 02:04:19 PM JST
The window ID of the currently active window or None if no window has the focus.
* Tue 14 Jul 2015 02:05:08 PM JST
Return the window ID of the currently active window or None
        if no window has the focus.
* Tue 14 Jul 2015 02:05:56 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 02:06:20 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 02:09:11 PM JST
get_
* Tue 14 Jul 2015 02:09:28 PM JST
        reply = self._root.get_property(
            False, '_NET_SUPPORTING_WM_CHECK', 'WINDOW')
        if reply is None:
            return None

* Tue 14 Jul 2015 02:09:36 PM JST
            
* Tue 14 Jul 2015 02:09:47 PM JST
nums
* Tue 14 Jul 2015 02:11:46 PM JST
_unpack('I' * rep.value_len, _array('B', rep.value).tostring())
* Tue 14 Jul 2015 02:11:49 PM JST

* Tue 14 Jul 2015 02:11:49 PM JST

* Tue 14 Jul 2015 02:11:49 PM JST
        wins = 

* Tue 14 Jul 2015 02:12:15 PM JST
_NET_SUPPORTING_WM_CHECK
* Tue 14 Jul 2015 02:12:30 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 02:13:12 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 02:13:55 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 02:13:57 PM JST
f
* Tue 14 Jul 2015 02:13:57 PM JST
lse.f
* Tue 14 Jul 2015 02:15:25 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 02:16:01 PM JST
size
* Tue 14 Jul 2015 02:18:03 PM JST
Dimension()
* Tue 14 Jul 2015 02:18:10 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 02:19:46 PM JST
Rectangle()
* Tue 14 Jul 2015 02:20:38 PM JST
N
* Tue 14 Jul 2015 02:20:39 PM JST
reutn N
* Tue 14 Jul 2015 02:21:24 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 02:22:25 PM JST
_NET_DESKTOP_NAMES
* Tue 14 Jul 2015 02:24:03 PM JST
_NET_NUMBER_OF_DESKTOPS
* Tue 14 Jul 2015 02:25:39 PM JST
client_window
* Tue 14 Jul 2015 02:28:00 PM JST
'_NET_DESKTOP_NAMES'
* Tue 14 Jul 2015 02:28:19 PM JST
'UTF8_STRING'
* Tue 14 Jul 2015 02:34:26 PM JST
list(
* Tue 14 Jul 2015 02:34:43 PM JST
unicode
* Tue 14 Jul 2015 02:34:55 PM JST
unicode(
* Tue 14 Jul 2015 02:36:04 PM JST
print(str(
* Tue 14 Jul 2015 02:39:12 PM JST
rep.value.buf()
* Tue 14 Jul 2015 02:39:19 PM JST
return
* Tue 14 Jul 2015 02:40:19 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 02:42:09 PM JST
_NET_NUMBER_OF_DESKTOPS
* Tue 14 Jul 2015 02:43:16 PM JST
return 
* Tue 14 Jul 2015 02:43:18 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 03:16:51 PM JST
from Observable import Observable
from EventDispatcher import EventDispatcher

class DesktopRootWindow(EventDispatcher, Observable):
    """Class DesktopRootWindow
    """
    # Attributes:
    __metaclass__ = DisplayMultitonMeta  # () 
    __root = None  # (RootWindow) 
    __atom_cache = None  # () 
    __prop_cache = {}  # (dict) 
    
    # Operations
    def get_display(self):
        """function get_display
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_id(self):
        """function get_id
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_supporting_wm_id(self):
        """function get_supporting_wm_id
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_active_window(self):
        """function get_active_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_current_desktop(self):
        """function get_current_desktop
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def client_list(self):
        """function client_list
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_workarea(self):
        """function get_workarea
        
        returns Rectangle
        """
        return None # should raise NotImplementedError()
    
    def get_viewport(self):
        """function get_viewport
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def list_desktop_names(self):
        """function list_desktop_names
        
        returns list
        """
        return None # should raise NotImplementedError()
    
    def get_desktop_geometry(self):
        """function get_desktop_geometry
        
        returns Dimension
        """
        return None # should raise NotImplementedError()
    
    def get_number_of_desktop(self):
        """function get_number_of_desktop
        
        returns int
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_evnet(self, event):
        """function can_dispatch_evnet
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_changed_active_window(self):
        """function notify_changed_active_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_changed_client_list(self):
        """function notify_changed_client_list
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_changed_current_desktop(self):
        """function notify_changed_current_desktop
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __notify_changed_desktop_names(self):
        """function notify_changed_desktop_names
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 14 Jul 2015 03:17:16 PM JST
Observable
* Tue 14 Jul 2015 03:17:20 PM JST
EventDispatche
* Tue 14 Jul 2015 03:17:39 PM JST
lab
* Tue 14 Jul 2015 03:17:39 PM JST
form lab
* Tue 14 Jul 2015 03:17:57 PM JST
  # () 
* Tue 14 Jul 2015 03:18:22 PM JST
l
* Tue 14 Jul 2015 03:18:22 PM JST
form l
* Tue 14 Jul 2015 03:18:33 PM JST
RootWindow
* Tue 14 Jul 2015 03:18:45 PM JST

* Tue 14 Jul 2015 03:18:45 PM JST

* Tue 14 Jul 2015 03:18:45 PM JST
        self._display = display

* Tue 14 Jul 2015 03:18:49 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 03:19:17 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 03:20:12 PM JST
'_NET_CLIENT_LIST_STACKING'
* Tue 14 Jul 2015 03:20:22 PM JST
'_NET_ACTIVE_WINDOW'
* Tue 14 Jul 2015 03:20:30 PM JST
_
* Tue 14 Jul 2015 03:20:32 PM JST
None  # () 
* Tue 14 Jul 2015 03:20:34 PM JST
self.
* Tue 14 Jul 2015 03:20:47 PM JST
_
* Tue 14 Jul 2015 03:20:48 PM JST
lsef.
* Tue 14 Jul 2015 03:20:52 PM JST
  # (dict) 
* Tue 14 Jul 2015 03:22:48 PM JST
        mask = self._wm.root.window.get_attributes(
            ).reply().your_event_mask
        cookie = self._wm.root.window.change_attributes_checked(
            CW.EventMask, [EventMask.PropertyChange|mask])
        cookie.check()

* Tue 14 Jul 2015 03:22:53 PM JST
_wm.
* Tue 14 Jul 2015 03:23:19 PM JST
_root
* Tue 14 Jul 2015 03:23:28 PM JST
_root
* Tue 14 Jul 2015 03:23:33 PM JST
_root
* Tue 14 Jul 2015 03:23:36 PM JST
_root
* Tue 14 Jul 2015 03:23:39 PM JST
_root
* Tue 14 Jul 2015 03:23:42 PM JST
_root
* Tue 14 Jul 2015 03:23:46 PM JST
_root
* Tue 14 Jul 2015 03:23:49 PM JST
_root
* Tue 14 Jul 2015 03:23:54 PM JST
_root
* Tue 14 Jul 2015 03:23:59 PM JST
_wm.
* Tue 14 Jul 2015 03:26:02 PM JST
EventLoop.get_instance().add_event_dispatcher(self)
* Tue 14 Jul 2015 03:26:48 PM JST
'_NET_ACTIVE_WINDOW'
* Tue 14 Jul 2015 03:29:06 PM JST
        
* Tue 14 Jul 2015 03:29:45 PM JST
self._atom_cache.get_atom('_NET_ACTIVE_WINDOW')
* Tue 14 Jul 2015 03:29:51 PM JST
self._root.get_active_window()
* Tue 14 Jul 2015 03:29:58 PM JST

* Tue 14 Jul 2015 03:29:58 PM JST

* Tue 14 Jul 2015 03:29:58 PM JST
        self._prop_cache[] = 

* Tue 14 Jul 2015 03:30:01 PM JST
f_
* Tue 14 Jul 2015 03:30:01 PM JST
sle.f_
* Tue 14 Jul 2015 03:30:44 PM JST
list_clients()
* Tue 14 Jul 2015 03:30:55 PM JST
            
* Tue 14 Jul 2015 03:30:58 PM JST
            
* Tue 14 Jul 2015 03:31:02 PM JST
            
* Tue 14 Jul 2015 03:31:05 PM JST
    
* Tue 14 Jul 2015 03:31:59 PM JST
'_NET_CURRENT_DESKTOP'
* Tue 14 Jul 2015 03:33:00 PM JST
'_NET_DESKTOP_NAMES',
* Tue 14 Jul 2015 03:33:12 PM JST
get_list_
* Tue 14 Jul 2015 03:33:23 PM JST
                            
* Tue 14 Jul 2015 03:33:50 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 03:34:00 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 03:34:39 PM JST
self._prop_cache[self._atom_cache.get_atom('_NET_ACTIVE_WINDOW')]
* Tue 14 Jul 2015 03:34:48 PM JST
'_NET_CURRENT_DESKTOP'
* Tue 14 Jul 2015 03:35:00 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 03:35:01 PM JST
lsef.
* Tue 14 Jul 2015 03:35:11 PM JST
_aotm_
* Tue 14 Jul 2015 03:35:31 PM JST
'_NET_CLIENT_LIST_STACKING'
* Tue 14 Jul 2015 03:35:43 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 03:35:54 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 03:36:09 PM JST
'_NET_DESKTOP_NAMES'
* Tue 14 Jul 2015 03:36:32 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 03:36:45 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 03:36:57 PM JST
get_desktop_geometry
* Tue 14 Jul 2015 03:36:58 PM JST
get_desktop_geometry()
* Tue 14 Jul 2015 03:37:39 PM JST
None # should raise NotImplementedError()
* Tue 14 Jul 2015 03:38:30 PM JST
                
* Tue 14 Jul 2015 03:54:41 PM JST
D wm
* Tue 14 Jul 2015 03:54:41 PM JST
D wm
* Tue 14 Jul 2015 03:54:41 PM JST
D wm
* Tue 14 Jul 2015 03:54:41 PM JST
D wm
* Tue 14 Jul 2015 03:54:42 PM JST
D wm
* Tue 14 Jul 2015 03:54:42 PM JST
D wm
* Tue 14 Jul 2015 03:54:42 PM JST
D wm
* Tue 14 Jul 2015 03:56:48 PM JST
'_NET_DESKTOP_VIEWPORT'
* Tue 14 Jul 2015 03:57:35 PM JST
'_NET_DESKTOP_VIEWPORT'
* Tue 14 Jul 2015 03:57:51 PM JST
prop_cache[get_atom('_NET_DESKTOP_VIEWPORT')]
* Tue 14 Jul 2015 03:57:58 PM JST
prop_cache[get_atom('_NET_DESKTOP_VIEWPORT')]
* Tue 14 Jul 2015 03:58:52 PM JST
timeit wm.get_viewport()
* Tue 14 Jul 2015 03:59:08 PM JST
get_atom=wm.root._atom_cache.get_atom
prop_cache={}
prop_cache[get_atom('_NET_DESKTOP_VIEWPORT')]=0

* Tue 14 Jul 2015 03:59:13 PM JST
timeit prop_cache[get_atom('_NET_DESKTOP_VIEWPORT')]
* Tue 14 Jul 2015 03:59:21 PM JST
1000000 loops, best of 3: 1.04 µs per loop
* Tue 14 Jul 2015 03:59:29 PM JST
10000 loops, best of 3: 116 µs per loop
* Tue 14 Jul 2015 04:17:13 PM JST
'_NET_DESKTOP_VIEWPORT'
* Tue 14 Jul 2015 04:17:35 PM JST
'_NET_CURRENT_DESKTOP'
* Tue 14 Jul 2015 04:17:44 PM JST
'_NET_DESKTOP_VIEWPORT'
* Tue 14 Jul 2015 04:17:52 PM JST

* Tue 14 Jul 2015 04:17:52 PM JST

* Tue 14 Jul 2015 04:17:52 PM JST
    '_NET_DESKTOP_VIEWPORT', 

* Tue 14 Jul 2015 04:18:13 PM JST
'_NET_DESKTOP_NAMES'
* Tue 14 Jul 2015 04:18:36 PM JST
f_
* Tue 14 Jul 2015 04:18:37 PM JST
sle.f_
* Tue 14 Jul 2015 04:19:08 PM JST
'_NET_SUPPORTING_WM_CHECK'
* Tue 14 Jul 2015 04:19:39 PM JST
'_NET_WORKAREA'
* Tue 14 Jul 2015 04:20:58 PM JST
'_NET_DESKTOP_GEOMETRY'
* Tue 14 Jul 2015 04:21:16 PM JST
self._atom_cache.get_atom('
* Tue 14 Jul 2015 04:21:22 PM JST
'_NET_DESKTOP_GEOMETRY'
* Tue 14 Jul 2015 04:21:48 PM JST
'_NET_NUMBER_OF_DESKTOPS'
* Tue 14 Jul 2015 04:23:03 PM JST
self._prop_cache[self._atom_cache.get_atom('_NET_ACTIVE_WINDOW')]
* Tue 14 Jul 2015 04:23:15 PM JST
'_NET_SUPPORTING_WM_CHECK'
* Tue 14 Jul 2015 04:23:31 PM JST
self._prop_cache[self._atom_cache.get_atom(
* Tue 14 Jul 2015 04:23:44 PM JST
'_NET_WORKAREA'
* Tue 14 Jul 2015 04:24:10 PM JST
self._prop_cache[self._atom_cache.get_atom('_NET_ACTIVE_WINDOW')]
* Tue 14 Jul 2015 04:24:16 PM JST
'_NET_DESKTOP_VIEWPORT'
* Tue 14 Jul 2015 04:24:55 PM JST
'_NET_DESKTOP_GEOMETRY'
* Tue 14 Jul 2015 04:25:03 PM JST
self._prop_cache[self._atom_cache.get_atom('_NET_ACTIVE_WINDOW')]
* Tue 14 Jul 2015 04:25:08 PM JST
'_NET_DESKTOP_GEOMETRY'
* Tue 14 Jul 2015 04:25:21 PM JST
self._prop_cache[self._atom_cache.get_atom('_NET_ACTIVE_WINDOW')]
* Tue 14 Jul 2015 04:25:29 PM JST
'_NET_NUMBER_OF_DESKTOPS',
* Tue 14 Jul 2015 04:28:01 PM JST
        return (isinstance(event, (PropertyNotifyEvent, ))
                and event.window == self.id)

* Tue 14 Jul 2015 04:35:33 PM JST
return None # should raise NotImplementedError()
* Tue 14 Jul 2015 04:36:05 PM JST
        if event.atom == self._atom_cache.get_atom('_NET_CLIENT_LIST_STACKING'):
            self._notify_changed_client_list()

* Tue 14 Jul 2015 04:36:16 PM JST
_notify_changed_client_list
* Tue 14 Jul 2015 04:37:57 PM JST
        for observer in self._observers:
            observer.on_changed_current_desktop(self)

* Tue 14 Jul 2015 04:38:14 PM JST
        for observer in self._observers:
            observer.on_changed_desktop_names(self)

* Tue 14 Jul 2015 04:39:45 PM JST
_atom_cache.get_atom
* Tue 14 Jul 2015 04:40:18 PM JST
            
* Tue 14 Jul 2015 04:40:25 PM JST
return self._prop_cache[self._get_atom(
* Tue 14 Jul 2015 04:40:30 PM JST
            
* Tue 14 Jul 2015 04:40:33 PM JST
            
* Tue 14 Jul 2015 04:41:03 PM JST
self._prop_cache[self._get_atom('_NET_CURRENT_DESKTOP')]
* Tue 14 Jul 2015 04:42:32 PM JST
            
* Tue 14 Jul 2015 04:42:42 PM JST
            
* Tue 14 Jul 2015 04:42:46 PM JST
            
* Tue 14 Jul 2015 04:43:20 PM JST
'_NET_SUPPORTING_WM_CHECK'
* Tue 14 Jul 2015 04:43:22 PM JST

* Tue 14 Jul 2015 04:43:23 PM JST

* Tue 14 Jul 2015 04:43:23 PM JST
        return self._prop_cache[self._get_atom('_NET_SUPPORTING_WM_CHECK')]

* Tue 14 Jul 2015 04:44:14 PM JST
            
* Tue 14 Jul 2015 04:44:48 PM JST
'_NET_CLIENT_LIST_STACKING'
* Tue 14 Jul 2015 04:45:15 PM JST
None
* Tue 14 Jul 2015 04:46:26 PM JST
'_NET_ACTIVE_WINDOW'
* Tue 14 Jul 2015 04:46:31 PM JST
self._root.get_active_window()
* Tue 14 Jul 2015 04:46:40 PM JST

* Tue 14 Jul 2015 04:46:40 PM JST

* Tue 14 Jul 2015 04:46:40 PM JST
            self._get_atom('_NET_ACTIVE_WINDOW'): self._root.get_active_window(),

* Tue 14 Jul 2015 04:46:43 PM JST
'_NET_CLIENT_LIST_STACKING'
* Tue 14 Jul 2015 04:46:54 PM JST
_root
* Tue 14 Jul 2015 04:46:55 PM JST
self._root
* Tue 14 Jul 2015 04:46:58 PM JST
self._root.client_list()
* Tue 14 Jul 2015 04:47:06 PM JST

* Tue 14 Jul 2015 04:47:06 PM JST

* Tue 14 Jul 2015 04:47:06 PM JST
            self._get_atom('_NET_CLIENT_LIST_STACKING'): self._root.client_list(),

* Tue 14 Jul 2015 04:47:09 PM JST
'_NET_CURRENT_DESKTOP'
* Tue 14 Jul 2015 04:47:18 PM JST
self._root.get_current_desktop()
* Tue 14 Jul 2015 04:47:29 PM JST
'_NET_DESKTOP_NAMES'
* Tue 14 Jul 2015 04:47:38 PM JST
self._root.list_desktop_names()
* Tue 14 Jul 2015 04:47:50 PM JST
'_NET_DESKTOP_VIEWPORT'
* Tue 14 Jul 2015 04:47:52 PM JST
        
* Tue 14 Jul 2015 04:47:59 PM JST
self._root.get_viewport()
* Tue 14 Jul 2015 04:48:10 PM JST

* Tue 14 Jul 2015 04:48:11 PM JST

* Tue 14 Jul 2015 04:48:11 PM JST
            self._get_atom('_NET_DESKTOP_VIEWPORT'): self._root.get_viewport(),

* Tue 14 Jul 2015 04:48:14 PM JST
'_NET_SUPPORTING_WM_CHECK'
* Tue 14 Jul 2015 04:48:16 PM JST
        
* Tue 14 Jul 2015 04:48:22 PM JST
self._root.get_supporting_wm_id()
* Tue 14 Jul 2015 04:48:33 PM JST
'_NET_WORKAREA'
* Tue 14 Jul 2015 04:48:41 PM JST
self._root.get_workarea()
* Tue 14 Jul 2015 04:48:46 PM JST

* Tue 14 Jul 2015 04:48:46 PM JST

* Tue 14 Jul 2015 04:48:46 PM JST
            self._get_atom('_NET_WORKAREA'): self._root.get_workarea(),

* Tue 14 Jul 2015 04:48:48 PM JST
'_NET_DESKTOP_GEOMETRY'
* Tue 14 Jul 2015 04:48:58 PM JST
self._root.get_desktop_geometry()
* Tue 14 Jul 2015 04:49:12 PM JST
'_NET_NUMBER_OF_DESKTOPS')
* Tue 14 Jul 2015 04:49:14 PM JST
'_NET_NUMBER_OF_DESKTOPS'
* Tue 14 Jul 2015 04:49:24 PM JST
self._root.get_number_of_desktop()
* Tue 14 Jul 2015 04:49:51 PM JST
self._set_cache('_NET_ACTIVE_WINDOW', self._root.get_active_window())
* Tue 14 Jul 2015 04:50:40 PM JST

* Tue 14 Jul 2015 04:50:40 PM JST

* Tue 14 Jul 2015 04:50:40 PM JST
            self._set_cache('_NET_ACTIVE_WINDOW', self._root.get_active_window())

* Tue 14 Jul 2015 04:50:47 PM JST

* Tue 14 Jul 2015 04:50:47 PM JST

* Tue 14 Jul 2015 04:50:48 PM JST
            self._prop_cache[self._get_atom('_NET_CLIENT_LIST_STACKING')]

* Tue 14 Jul 2015 04:51:04 PM JST
self._set_cache('_NET_CLIENT_LIST_STACKING', self._root.client_list())
* Tue 14 Jul 2015 04:53:05 PM JST
'_NET_CURRENT_DESKTOP'
* Tue 14 Jul 2015 04:53:12 PM JST
self.
* Tue 14 Jul 2015 04:53:16 PM JST
self._set_cache('_NET_CURRENT_DESKTOP', self._root.get_current_desktop())
* Tue 14 Jul 2015 04:55:41 PM JST
_set_
* Tue 14 Jul 2015 04:55:41 PM JST
self._set_
* Tue 14 Jul 2015 04:55:44 PM JST
self._set_cache('_NET_DESKTOP_VIEWPORT', self._root.get_viewport())
* Tue 14 Jul 2015 04:57:15 PM JST
'_NET_DESKTOP_NAMES'
* Tue 14 Jul 2015 04:57:21 PM JST
self._set_cache('_NET_DESKTOP_NAMES', self._root.list_desktop_names())
* Tue 14 Jul 2015 04:59:06 PM JST
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 100 -l 350')
            os.system('rmmod pcspkr')

* Tue 14 Jul 2015 05:07:29 PM JST
class DesktopRootWindowObserver:
    """Class DesktopRootWindowObserver
    """
    # Attributes:
    
    # Operations
    def on_changed_active_window(self, root_window):
        """function on_changed_active_window
        
        root_window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_changed_client_list(self, root_window):
        """function on_changed_client_list
        
        root_window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_changed_current_desktop(self, root_window):
        """function on_changed_current_desktop
        
        root_window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_changed_desktop_names(self, root_window):
        """function on_changed_desktop_names
        
        root_window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_changed_viewport(self, root_window):
        """function on_changed_viewport
        
        root_window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Tue 14 Jul 2015 05:10:40 PM JST

* Tue 14 Jul 2015 05:10:40 PM JST

* Tue 14 Jul 2015 05:10:40 PM JST
from lab.xahk.event_dispatcher import EventDispatcher

* Tue 14 Jul 2015 05:15:09 PM JST
from 
* Tue 14 Jul 2015 05:16:28 PM JST
metaclass conflict
* Tue 14 Jul 2015 05:21:59 PM JST
DesktopRootWindowMeta
* Tue 14 Jul 2015 05:22:06 PM JST
EventDispatcher, 
* Tue 14 Jul 2015 05:22:16 PM JST
from lab.xahk.desktop_root_window import DesktopRootWindow
* Tue 14 Jul 2015 05:23:16 PM JST

* Tue 14 Jul 2015 05:23:16 PM JST

* Tue 14 Jul 2015 05:23:16 PM JST
        print(rect)

* Tue 14 Jul 2015 05:24:02 PM JST
d2=DesktopRootWindow(c)
* Tue 14 Jul 2015 05:28:39 PM JST
DesktopRootWindow
* Tue 14 Jul 2015 05:29:41 PM JST
prop
* Tue 14 Jul 2015 05:30:12 PM JST
from lab.xahk.desktop_root_window import DesktopRootWindow
d=DesktopRootWindow(c)

* Tue 14 Jul 2015 05:30:33 PM JST
25165828
* Tue 14 Jul 2015 05:33:38 PM JST
from lab.xahk.desktop_root_window import DesktopRootWindow
d=DesktopRootWindow(c)

* Tue 14 Jul 2015 05:36:41 PM JST

* Tue 14 Jul 2015 05:37:48 PM JST
DesktopRootWindowObserver
* Tue 14 Jul 2015 05:38:13 PM JST
    def on_changed_active_window(self, root_window):
        """function on_changed_active_window

        root_window:

        returns
        """
        return None # should raise NotImplementedError()

    def on_changed_client_list(self, root_window):
        """function on_changed_client_list

        root_window:

        returns
        """
        return None # should raise NotImplementedError()

    def on_changed_current_desktop(self, root_window):
        """function on_changed_current_desktop

        root_window:

        returns
        """
        return None # should raise NotImplementedError()

    def on_changed_desktop_names(self, root_window):
        """function on_changed_desktop_names

        root_window:

        returns
        """
        return None # should raise NotImplementedError()

    def on_changed_viewport(self, root_window):
        """function on_changed_viewport

        root_window:

        returns
        """
        return None # should raise NotImplementedError()

* Tue 14 Jul 2015 05:38:19 PM JST
return None # should raise NotImplementedError()
* Tue 14 Jul 2015 05:38:42 PM JST
return None # should raise NotImplementedError()
* Tue 14 Jul 2015 05:38:54 PM JST
return None # should raise NotImplementedError()
* Tue 14 Jul 2015 05:39:27 PM JST
return None # should raise NotImplementedError()
* Tue 14 Jul 2015 05:39:45 PM JST
list_desktop_names
* Tue 14 Jul 2015 05:39:54 PM JST
return None # should raise NotImplementedError()
* Tue 14 Jul 2015 05:40:20 PM JST
DesktopRootWindow
* Tue 14 Jul 2015 05:40:24 PM JST
import xcb, xcb.xproto as xproto
c=xcb.connect()

* Tue 14 Jul 2015 05:42:17 PM JST
EventLoop.get_instance().start_loop()
* Tue 14 Jul 2015 05:44:14 PM JST
EventLoop.get_instance().start_loop()
* Tue 14 Jul 2015 05:46:45 PM JST
EventLoop.get_instance().start_loop()
* Tue 14 Jul 2015 05:49:53 PM JST
DesktopManager
* Tue 14 Jul 2015 05:50:05 PM JST
from lab.xahk.eventloop import EventLoop
* Tue 14 Jul 2015 05:51:00 PM JST

* Tue 14 Jul 2015 05:51:00 PM JST

* Tue 14 Jul 2015 05:51:00 PM JST
        print(event)

* Tue 14 Jul 2015 05:51:19 PM JST
import xcb, xcb.xproto as xproto
c=xcb.connect()

from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_root_window import DesktopRootWindow
from lab.xahk.desktop_root_window_observer import DesktopRootWindowObserver


class DebugDesktopRootWindowObserver(DesktopRootWindowObserver):
    r"""DesktopRootWindowObs

    DesktopRootWindowObs is a object.
    Responsibility:
    """
    def on_changed_active_window(self, root_window):
        """function on_changed_active_window

        root_window:

        returns
        """
        print(root_window.get_active_window())

    def on_changed_client_list(self, root_window):
        """function on_changed_client_list

        root_window:

        returns
        """
        print(root_window.client_list())

    def on_changed_current_desktop(self, root_window):
        """function on_changed_current_desktop

        root_window:

        returns
        """
        print(root_window.get_current_desktop())

    def on_changed_desktop_names(self, root_window):
        """function on_changed_desktop_names

        root_window:

        returns
        """
        print(root_window.list_desktop_names())

    def on_changed_viewport(self, root_window):
        """function on_changed_viewport

        root_window:

        returns
        """
        print(root_window.get_viewport())


d = DesktopRootWindow(c)
d.add_observer(DebugDesktopRootWindowObserver())

* Tue 14 Jul 2015 05:51:47 PM JST
EventLoop.get_instance().start_loop()
* Tue 14 Jul 2015 05:51:52 PM JST
WindowObserver(DesktopRootWindowObserver):
    def on_changed_active_window(self, root_window):
        print(root_window.get_active_window())

    def on_changed_client_list(self, root_window):
        print(root_window.client_list())

    def on_changed_current_desktop(self, root_window):
        print(root_window.get_current_desktop())

    def on_changed_desktop_names(self, root_window):
        print(root_window.list_desktop_names())

    def on_changed_viewport(self, root_window):
        print(root_window.get_viewport())


d = DesktopRootWindow(c)
d.add_observer(DebugDesktopRootWindowObserver())

* Tue 14 Jul 2015 05:52:57 PM JST
EventLoop.get_instance().start_loop()
* Tue 14 Jul 2015 05:53:17 PM JST

* Tue 14 Jul 2015 05:53:17 PM JST

* Tue 14 Jul 2015 05:53:17 PM JST
            print('DEBUG-2-eventloop.py')

* Tue 14 Jul 2015 05:53:20 PM JST

* Tue 14 Jul 2015 05:53:20 PM JST

* Tue 14 Jul 2015 05:53:20 PM JST
                print('DEBUG-1-eventloop.py')

* Tue 14 Jul 2015 05:57:02 PM JST
EventLoop.get_instance().start_loop()

* Tue 14 Jul 2015 05:57:26 PM JST

* Tue 14 Jul 2015 05:57:26 PM JST

* Tue 14 Jul 2015 05:57:26 PM JST
            print(event)

* Tue 14 Jul 2015 05:58:10 PM JST
EventLoop.get_instance().start_loop()
* Tue 14 Jul 2015 06:01:24 PM JST
EventLoop.get_instance().start_loop()

* Tue 14 Jul 2015 06:03:07 PM JST
348
* Tue 14 Jul 2015 06:03:11 PM JST
393
* Tue 14 Jul 2015 06:03:32 PM JST
348
* Tue 14 Jul 2015 06:03:51 PM JST
393
* Tue 14 Jul 2015 06:04:38 PM JST
self._get_atom('_NET_CLIENT_LIST')
* Tue 14 Jul 2015 06:05:21 PM JST
EventLoop.get_instance().start_loop()
* Tue 14 Jul 2015 06:06:55 PM JST

* Tue 14 Jul 2015 06:06:55 PM JST

* Tue 14 Jul 2015 06:06:55 PM JST
        print(event)

* Tue 14 Jul 2015 06:07:03 PM JST

* Tue 14 Jul 2015 06:07:03 PM JST

* Tue 14 Jul 2015 06:07:03 PM JST
        print(event.state)

* Tue 14 Jul 2015 06:08:42 PM JST
'_NET_ACTIVE_WINDOW'
* Tue 14 Jul 2015 06:09:03 PM JST
self._root.get_active_window()
* Tue 14 Jul 2015 06:09:50 PM JST
EventLoop.get_instance().start_loop()
* Tue 14 Jul 2015 06:11:40 PM JST
EventLoop.get_instance().start_loop()
* Tue 14 Jul 2015 06:23:04 PM JST
'_NET_CLIENT_LIST'
* Tue 14 Jul 2015 06:24:20 PM JST
EventLoop.get_instance().start_loop()
* Tue 14 Jul 2015 06:26:09 PM JST
'_NET_CLIENT_LIST_STACKING'
* Tue 14 Jul 2015 06:27:41 PM JST
EventLoop.get_instance().start_loop()

* Tue 14 Jul 2015 06:29:22 PM JST
'_NET_CLIENT_LIST_STACKING'
* Tue 14 Jul 2015 06:29:53 PM JST

* Tue 14 Jul 2015 06:29:53 PM JST

* Tue 14 Jul 2015 06:29:53 PM JST
            print('DEBUG-1-desktop_root_window.py')

* Tue 14 Jul 2015 06:30:17 PM JST
'_NET_CLIENT_LIST_STACKING'
* Tue 14 Jul 2015 06:30:56 PM JST
                            
* Tue 14 Jul 2015 06:31:14 PM JST
    def _notify_changed_client_list(self):
        """function notify_changed_client_list

        returns
        """
        for observer in self._observers:
            observer.on_changed_client_list(self)

* Tue 14 Jul 2015 06:32:05 PM JST
    def on_changed_client_list(self, root_window):
        """function on_changed_client_list

        root_window:

        returns
        """
        return None # should raise NotImplementedError()

* Tue 14 Jul 2015 06:32:56 PM JST
    def on_changed_client_list(self, root_window):
        print('DEBUG-2-2015-07-14-173547.junk.py')
        print(root_window.client_list())

* Tue 14 Jul 2015 06:33:08 PM JST

* Tue 14 Jul 2015 06:33:08 PM JST

* Tue 14 Jul 2015 06:33:08 PM JST
        print('DEBUG-2-2015-07-14-173547.junk.py')

* Tue 14 Jul 2015 06:33:22 PM JST
EventLoop.get_instance().start_loop()

* Tue 14 Jul 2015 06:34:17 PM JST
    def client_list(self):
        """function client_list

        returns
        """
        return self._get_cache('_NET_CLIENT_LIST_STACKING')

* Tue 14 Jul 2015 06:34:38 PM JST
'_NET_CLIENT_LIST_STACKING',
* Tue 14 Jul 2015 06:34:50 PM JST
self._set_cache('_NET_CLIENT_LIST_STACKING', self._root.client_list())
* Tue 14 Jul 2015 06:35:23 PM JST
EventLoop.get_instance().start_loop()
* Tue 14 Jul 2015 10:26:08 PM JST
form 
* Tue 14 Jul 2015 10:27:18 PM JST
= xcb.connect()
* Tue 14 Jul 2015 10:27:34 PM JST
d1 = 
* Tue 14 Jul 2015 10:27:43 PM JST
DesktopRootWindow(self.display1)
* Tue 14 Jul 2015 10:27:47 PM JST
DesktopRootWindow(self.display1)
* Tue 14 Jul 2015 10:27:55 PM JST
DesktopRootWindow(self.display1)
* Tue 14 Jul 2015 10:28:00 PM JST
DesktopRootWindow(self.display1)
* Tue 14 Jul 2015 10:28:19 PM JST
id(DesktopRootWindow(self.display1)),
                         id(DesktopRootWindow(self.display1))
* Tue 14 Jul 2015 10:28:40 PM JST
        self.assertNotEqual(id(DesktopRootWindow(self.display1)),
                            id(DesktopRootWindow(self.display2)))

* Tue 14 Jul 2015 10:33:14 PM JST
DisplayMultitonMeta
* Tue 14 Jul 2015 10:34:09 PM JST
from lab.xahk.desktop_root_window import DesktopRootWindow
* Tue 14 Jul 2015 10:34:22 PM JST
DesktopRootWindow
* Tue 14 Jul 2015 10:42:23 PM JST
    @abstractmethod
    def can_dispatch_event(self, event):
        """function can_dispatch_event

        event:

        returns bool
        """
        raise NotImplementedError()

    @abstractmethod
    def dispatch_event(self, event):
        """function dispatch_event

        event:

        returns
        """
        raise NotImplementedError()

* Tue 14 Jul 2015 10:43:29 PM JST
import xcb, xcb.xproto as xproto
c=xcb.connect()
DesktopRootWindow(c)

* Tue 14 Jul 2015 10:43:44 PM JST
from lab.xahk.desktop_root_window import DesktopRootWindow
* Tue 14 Jul 2015 10:43:48 PM JST
DesktopRootWindow(c)
* Tue 14 Jul 2015 10:44:27 PM JST
DesktopRootWindowMeta
* Tue 14 Jul 2015 10:45:08 PM JST
DesktopRootWindowMeta
* Tue 14 Jul 2015 11:00:08 PM JST
    _instances = {}

    def __call__(cls, display, *args, **kwargs):
        if display not in cls._instances:
            cls._instances[display] = super(
                DisplayMultitonMeta, cls).__call__(display, *args, **kwargs)
        return cls._instances[display]

* Tue 14 Jul 2015 11:00:45 PM JST
DesktopRootWindow
* Tue 14 Jul 2015 11:04:54 PM JST
EventDispatcher
* Tue 14 Jul 2015 11:06:25 PM JST

* Tue 14 Jul 2015 11:06:25 PM JST

* Tue 14 Jul 2015 11:06:25 PM JST
    # multi

* Tue 14 Jul 2015 11:06:37 PM JST
display
* Tue 14 Jul 2015 11:06:43 PM JST

* Tue 14 Jul 2015 11:06:43 PM JST

* Tue 14 Jul 2015 11:06:43 PM JST
    # __metaclass__ = DesktopRootWindowMeta

* Tue 14 Jul 2015 11:07:28 PM JST

* Tue 14 Jul 2015 11:07:28 PM JST

* Tue 14 Jul 2015 11:07:29 PM JST
from lab.xahk.commons.display_multiton import DisplayMultitonMeta

* Tue 14 Jul 2015 11:08:00 PM JST
disallow_uncached_atoms
* Tue 14 Jul 2015 11:08:51 PM JST
EventLoop.get_instance().start_loop()
* Tue 14 Jul 2015 11:09:33 PM JST
EventLoop.get_instance().start_loop()
* Tue 14 Jul 2015 11:10:11 PM JST
'_WIN_CLIENT_LIST'
* Tue 14 Jul 2015 11:10:30 PM JST
EventLoop.get_instance().start_loop()
* Tue 14 Jul 2015 11:10:43 PM JST
EventLoop.get_instance().start_loop()
* Tue 14 Jul 2015 11:34:28 PM JST
NotAtomExistsError
* Tue 14 Jul 2015 11:34:42 PM JST

* Tue 14 Jul 2015 11:34:42 PM JST

* Tue 14 Jul 2015 11:34:42 PM JST
        # TODO: (Atami) [2015/05/09]

* Tue 14 Jul 2015 11:35:52 PM JST
NotAtomCachedError
* Tue 14 Jul 2015 11:37:31 PM JST
disallow_uncached_atoms
* Tue 14 Jul 2015 11:39:29 PM JST
cookies.
* Tue 14 Jul 2015 11:45:49 PM JST
disallow_uncached_atoms
* Tue 14 Jul 2015 11:46:30 PM JST
AtomName
* Tue 14 Jul 2015 11:47:06 PM JST
NotAtomCachedError
* Tue 14 Jul 2015 11:48:00 PM JST
Class 
* Tue 14 Jul 2015 11:48:11 PM JST
NotAtomCachedError is a StandardError.
* Tue 14 Jul 2015 11:48:18 PM JST
StandardError
* Tue 14 Jul 2015 11:48:25 PM JST
AtomCache
* Tue 14 Jul 2015 11:50:12 PM JST
XServer
* Tue 14 Jul 2015 11:50:56 PM JST
InternAtom 
* Tue 14 Jul 2015 11:52:23 PM JST
        r"""SUMMARY
        
        get_atom(name)
        
        @Arguments:
        - `name`:
        
        @Return:

        @Error:
        """

* Tue 14 Jul 2015 11:52:31 PM JST
SUMMARY
* Tue 14 Jul 2015 11:55:29 PM JST
atom identifier
* Tue 14 Jul 2015 11:56:09 PM JST
NotAtomCachedError
* Tue 14 Jul 2015 11:56:50 PM JST
uncach
* Tue 14 Jul 2015 11:56:53 PM JST
_uncached_atoms_allowed
* Tue 14 Jul 2015 11:58:25 PM JST

* Tue 14 Jul 2015 11:58:25 PM JST

* Tue 14 Jul 2015 11:58:25 PM JST
        if not cached atom 

* Wed 15 Jul 2015 12:03:26 AM JST
SUMMARY
* Wed 15 Jul 2015 12:03:31 AM JST
aotm 
* Wed 15 Jul 2015 12:04:40 AM JST
NotAtomCachedError
* Wed 15 Jul 2015 12:05:03 AM JST
disallow_uncached_atoms
* Wed 15 Jul 2015 12:05:15 AM JST
r"""SUMMARY
        
        disallow_uncached_atoms()
        
        @Return:

        @Error:
        """
        
* Wed 15 Jul 2015 12:05:58 AM JST
SUMMARY
* Wed 15 Jul 2015 12:16:57 AM JST

* Wed 15 Jul 2015 12:16:57 AM JST

* Wed 15 Jul 2015 12:16:57 AM JST
        # TODO: (Atami) [2015/07/15]

* Wed 15 Jul 2015 12:49:27 AM JST
EventTarget
* Wed 15 Jul 2015 12:49:33 AM JST
Observable, 
* Wed 15 Jul 2015 01:02:27 AM JST
DesktopWindow
* Wed 15 Jul 2015 01:05:11 AM JST
window
* Wed 15 Jul 2015 01:05:36 AM JST

* Wed 15 Jul 2015 01:05:36 AM JST

* Wed 15 Jul 2015 01:05:44 AM JST
window
* Wed 15 Jul 2015 01:08:26 AM JST
DesktopWindow(self.display, client)
* Wed 15 Jul 2015 01:08:32 AM JST
client
* Wed 15 Jul 2015 01:08:45 AM JST
DesktopWindow(self.display, window)
* Wed 15 Jul 2015 01:14:06 AM JST
get_id()
* Wed 15 Jul 2015 01:14:09 AM JST
self.window
* Wed 15 Jul 2015 01:18:43 AM JST
from lab.xahk.desktop_manager import DesktopManager
* Wed 15 Jul 2015 01:18:45 AM JST
from lab.xahk.desktop_manager import DesktopManager
DesktopManager.get_instance().list_windows()

* Wed 15 Jul 2015 01:21:28 AM JST
client
* Wed 15 Jul 2015 01:22:03 AM JST
from lab.xahk.desktop_manager import DesktopManager
DesktopManager.get_instance().list_windows()

* Wed 15 Jul 2015 01:22:13 AM JST
DesktopManager.get_instance().list_windows()
* Wed 15 Jul 2015 01:24:44 AM JST
from DesktopRootWindowObserver import DesktopRootWindowObserver
from Observable import Observable

class DesktopWindowFactory(Observable, DesktopRootWindowObserver):
    """Class DesktopWindowFactory
    """
    # Attributes:
    display = None  # () 
    __instances = {}  # (dict) 
    __windows = []  # (list) 
    
    # Operations
    def __new__(self, cls, display):
        """function __new__
        
        cls: 
        display: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_changed_client_list(self, root_window):
        """function on_changed_client_list
        
        root_window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_windows(self, filter = bool):
        """function list_windows
        
        filter: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __create_desktop_window(self, window_id):
        """function create_desktop_window
        
        window_id: int
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __destroy_window(self, window_id):
        """function destroy_window
        
        window_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()

* Wed 15 Jul 2015 01:29:08 AM JST
    _instances = {} # multition by xcb.Connection

    def __new__(cls, display, *args, **kwargs):
        if display not in cls._instances:
            cls._instances[display] = object.__new__(
                cls, display, *args, **kwargs)
        return cls._instances[display]

* Wed 15 Jul 2015 01:29:18 AM JST

* Wed 15 Jul 2015 01:29:18 AM JST

* Wed 15 Jul 2015 01:29:18 AM JST
    __instances = {}  # (dict)

* Wed 15 Jul 2015 01:29:31 AM JST

* Wed 15 Jul 2015 01:29:31 AM JST

* Wed 15 Jul 2015 01:29:31 AM JST
        display = None  # ()

* Wed 15 Jul 2015 01:29:38 AM JST
  # (list)
* Wed 15 Jul 2015 01:32:18 AM JST
display
* Wed 15 Jul 2015 01:32:18 AM JST
_display = display
* Wed 15 Jul 2015 01:34:35 AM JST
None # should raise NotImplementedError()
* Wed 15 Jul 2015 01:35:52 AM JST
self.
* Wed 15 Jul 2015 01:37:48 AM JST
            import os
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 1000 -l 100 -r 2 -d 0.5')
            os.system('rmmod pcspkr')

* Wed 15 Jul 2015 01:38:02 AM JST
xc
* Wed 15 Jul 2015 01:38:03 AM JST
form xc
* Wed 15 Jul 2015 01:47:53 AM JST
return None # should raise NotImplementedError()
* Wed 15 Jul 2015 01:48:12 AM JST
self.
* Wed 15 Jul 2015 01:49:17 AM JST

* Wed 15 Jul 2015 01:49:17 AM JST

* Wed 15 Jul 2015 01:49:17 AM JST
        self._root.add_observer(self)

* Wed 15 Jul 2015 02:06:04 AM JST
class DesktopWindowFactoryObserver:
    """Class DesktopWindowFactoryObserver
    """
    # Attributes:
    
    # Operations
    def on_created_desktop_window(self, desktop_window):
        """function on_created_desktop_window
        
        desktop_window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_destroyed_desktop_window(self, window_id):
        """function on_destroyed_desktop_window
        
        window_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 15 Jul 2015 02:11:05 AM JST
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_root_window import DesktopRootWindow
from lab.xahk.desktop_root_window_observer import DesktopRootWindowObserver
from lab.xahk.wm.display import get_display


class DebugDesktopRootWindowObserver(DesktopRootWindowObserver):
    def on_changed_active_window(self, root_window):
        print('DEBUG-1-2015-07-14-173547.junk.py')
        print(root_window.get_active_window())

    def on_changed_client_list(self, root_window):
        print('DEBUG-2-2015-07-14-173547.junk.py')
        print(root_window.client_list())

    def on_changed_client_list_stacking(self, root_window):
        print('DEBUG-6-2015-07-14-173547.junk.py')
        print(root_window.client_list_stacking())

    def on_changed_current_desktop(self, root_window):
        print('DEBUG-3-2015-07-14-173547.junk.py')
        print(root_window.get_current_desktop())

    def on_changed_desktop_names(self, root_window):
        print('DEBUG-4-2015-07-14-173547.junk.py')
        print(root_window.list_desktop_names())

    def on_changed_viewport(self, root_window):
        print('DEBUG-5-2015-07-14-173547.junk.py')
        print(root_window.get_viewport())


d = DesktopRootWindow(get_display())
d.add_observer(DebugDesktopRootWindowObserver())

EventLoop.get_instance().start_loop()

* Wed 15 Jul 2015 02:11:54 AM JST
form 
* Wed 15 Jul 2015 02:13:02 AM JST
DesktopWindowFactoryObserver
* Wed 15 Jul 2015 02:15:31 AM JST
DebugDesktopWindowFactroyObserver
* Wed 15 Jul 2015 02:15:40 AM JST
EventLoop.get_instance().start_loop()
* Wed 15 Jul 2015 02:15:50 AM JST
from lab.xahk.eventloop import EventLoop
* Wed 15 Jul 2015 02:16:12 AM JST
from lab.xahk.wm.display import get_display
* Wed 15 Jul 2015 02:16:31 AM JST
EventLoop.get_instance().start_loop()

* Wed 15 Jul 2015 02:17:29 AM JST
WindowError
* Wed 15 Jul 2015 02:18:37 AM JST
            import os
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 1000 -l 100 -r 2 -d 0.5')

* Wed 15 Jul 2015 02:18:39 AM JST
            import os
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 1000 -l 100 -r 2 -d 0.5')
            os.system('rmmod pcspkr')

* Wed 15 Jul 2015 02:19:24 AM JST
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 1000 -l 100 -r 2 -d 0.5')
            os.system('rmmod pcspkr')

* Wed 15 Jul 2015 02:19:26 AM JST
            import os
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 1000 -l 100 -r 2 -d 0.5')
            os.system('rmmod pcspkr')

* Wed 15 Jul 2015 02:21:13 AM JST
EventLoop.get_instance().start_loop()
* Wed 15 Jul 2015 02:26:16 AM JST
EventLoop.get_instance().start_loop()
* Wed 15 Jul 2015 02:27:32 AM JST

* Wed 15 Jul 2015 02:27:32 AM JST

* Wed 15 Jul 2015 02:27:32 AM JST
        print('DEBUG-7-2015-07-14-173547.junk.py')

* Wed 15 Jul 2015 03:13:39 AM JST
from lab.xahk.desktop_window_factory import DesktopWindowFactory
from lab.xahk.desktop_window_factory_observer import DesktopWindowFactoryObserver
from lab.xahk.eventloop import EventLoop
from lab.xahk.wm.display import get_display

class DebugDesktopWindowFactroyObserver(DesktopWindowFactoryObserver):
    r"""DebugDesktopWindowFactroyObserver

    DebugDesktopWindowFactroyObserver is a object.
    Responsibility:
    """
    def on_created_desktop_window(self, desktop_window):
        r"""SUMMARY

        on_created_desktop_window(desktop_window)

        @Arguments:
        - `desktop_window`:

        @Return:

        @Error:
        """
        print('{} {}'.format(desktop_window.get_id(), desktop_window.get_title()))

    def on_destroyed_desktop_window(self, window_id):
        r"""SUMMARY

        on_destroyed_desktop_window(window_id)

        @Arguments:
        - `window_id`:

        @Return:

        @Error:
        """
        print(window_id)


df = DesktopWindowFactory(get_display())
df.add_observer(DebugDesktopWindowFactroyObserver())

EventLoop.get_instance().start_loop()

* Wed 15 Jul 2015 11:17:47 AM JST
DesktopManager
* Wed 15 Jul 2015 11:30:00 AM JST
            
* Wed 15 Jul 2015 11:30:04 AM JST
            
* Wed 15 Jul 2015 11:30:07 AM JST
            
* Wed 15 Jul 2015 12:30:10 PM JST
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_root_window import DesktopRootWindow
from lab.xahk.desktop_root_window_observer import DesktopRootWindowObserver
from lab.xahk.wm.display import get_display


class DebugDesktopRootWindowObserver(DesktopRootWindowObserver):
    def on_changed_active_window(self, root_window):
        print('DEBUG-1-2015-07-14-173547.junk.py')
        print(root_window.get_active_window())

    def on_changed_client_list(self, root_window):
        print('DEBUG-2-2015-07-14-173547.junk.py')
        print(root_window.client_list())

    def on_changed_client_list_stacking(self, root_window):
        print('DEBUG-6-2015-07-14-173547.junk.py')
        print(root_window.client_list_stacking())

    def on_changed_current_desktop(self, root_window):
        print('DEBUG-3-2015-07-14-173547.junk.py')
        print(root_window.get_current_desktop())

    def on_changed_desktop_names(self, root_window):
        print('DEBUG-4-2015-07-14-173547.junk.py')
        print(root_window.list_desktop_names())

    def on_changed_viewport(self, root_window):
        print('DEBUG-5-2015-07-14-173547.junk.py')
        print(root_window.get_viewport())


d = DesktopRootWindow(get_display())
d.add_observer(DebugDesktopRootWindowObserver())

* Wed 15 Jul 2015 12:30:18 PM JST
EventLoop.get_instance().start_loop()
* Wed 15 Jul 2015 12:38:39 PM JST
self._get_cache('_NET_ACTIVE_WINDOW')
* Wed 15 Jul 2015 12:42:11 PM JST
on_changed_active_window
* Wed 15 Jul 2015 02:09:12 PM JST
class WindowManager:
    """Class WindowManager
    """
    # Attributes:
    __root = None  # (DesktopRootWindow) 
    __window_factory = None  # () 
    
    # Operations
    def get_name(self):
        """function get_name
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_active_window(self):
        """function get_active_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_active_window(self, window):
        """function is_active_window
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def list_windows(self, filter = bool):
        """function list_windows
        
        filter: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def window_exists(self, window):
        """function window_exists
        
        window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def counts_desktops(self):
        """function counts_desktops
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_current_desktop(self):
        """function get_current_desktop
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_desktop_geometry(self):
        """function get_desktop_geometry
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_workarea(self):
        """function get_workarea
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_viewport(self):
        """function get_viewport
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 15 Jul 2015 02:10:50 PM JST
None  # (DesktopRootWindow) 
* Wed 15 Jul 2015 02:10:58 PM JST
None  # () 
* Wed 15 Jul 2015 02:11:40 PM JST
display
* Wed 15 Jul 2015 02:12:16 PM JST
client_
* Wed 15 Jul 2015 02:12:25 PM JST
WindowClient
* Wed 15 Jul 2015 02:12:37 PM JST
get_supporting_wm_id
* Wed 15 Jul 2015 02:12:45 PM JST
self._root.get_supporting_wm_id()
* Wed 15 Jul 2015 02:13:10 PM JST
None # should raise NotImplementedError()
* Wed 15 Jul 2015 02:15:10 PM JST
 # should raise NotImplementedError()
* Wed 15 Jul 2015 02:15:34 PM JST
None # should raise NotImplementedError()
* Wed 15 Jul 2015 02:20:00 PM JST
[[:blank:]]+
* Wed 15 Jul 2015 02:21:33 PM JST
^[[:blank:]]*\\_<\\(?:return\\)\\_>[[:blank:]]+
* Wed 15 Jul 2015 02:25:59 PM JST
(py:in-parameter-p)
* Wed 15 Jul 2015 02:26:47 PM JST
(smart-operator-=)
* Wed 15 Jul 2015 02:27:14 PM JST
None # should raise NotImplementedError()
* Wed 15 Jul 2015 02:27:18 PM JST
window = 
* Wed 15 Jul 2015 02:27:37 PM JST
py:in-brackets-p
* Wed 15 Jul 2015 02:28:14 PM JST
(insert " == ")
* Wed 15 Jul 2015 02:29:24 PM JST
(py:in-brackets-p)
* Wed 15 Jul 2015 02:29:40 PM JST
        ((or (py--in-condition-p) (py:in-brackets-p))
         (insert " == "))

* Wed 15 Jul 2015 02:29:54 PM JST
def list_windows(self, filter 
* Wed 15 Jul 2015 02:30:26 PM JST

* Wed 15 Jul 2015 02:30:26 PM JST

* Wed 15 Jul 2015 02:30:26 PM JST
        if:

* Wed 15 Jul 2015 02:31:26 PM JST
==
* Wed 15 Jul 2015 02:32:56 PM JST

* Wed 15 Jul 2015 02:32:56 PM JST

* Wed 15 Jul 2015 02:32:56 PM JST
  (let ((orig (point)))

* Wed 15 Jul 2015 02:33:47 PM JST
      
* Wed 15 Jul 2015 02:33:54 PM JST
py--in-return-line-p
* Wed 15 Jul 2015 02:36:03 PM JST
^[[:blank:]]*\\_<\\(?:return\\)\\_>[[:blank:]]+
* Wed 15 Jul 2015 02:36:12 PM JST
    
* Wed 15 Jul 2015 02:36:19 PM JST
py--in-return-line-p
* Wed 15 Jul 2015 02:37:38 PM JST
py--in-return-line-p
* Wed 15 Jul 2015 02:38:09 PM JST
py
* Wed 15 Jul 2015 02:38:10 PM JST
py--in-return-line-p
* Wed 15 Jul 2015 02:40:28 PM JST
None # should raise NotImplementedError()
* Wed 15 Jul 2015 02:40:42 PM JST
None # should raise NotImplementedError()
* Wed 15 Jul 2015 02:41:42 PM JST
None # should raise NotImplementedError()
* Wed 15 Jul 2015 02:42:02 PM JST
None # should raise NotImplementedError()
* Wed 15 Jul 2015 02:42:03 PM JST
f_
* Wed 15 Jul 2015 02:42:04 PM JST
sle.f_
* Wed 15 Jul 2015 02:42:24 PM JST
None # should raise NotImplementedError()
* Wed 15 Jul 2015 02:42:31 PM JST
None # should raise NotImplementedError()
* Wed 15 Jul 2015 03:50:30 PM JST
DesktopManager
* Wed 15 Jul 2015 04:05:30 PM JST
class DesktopCursor(DesktopWindowFactoryObserver, Ovservable, EventDispatcher):
    """Class DesktopCursor
    """
    # Attributes:
    cursor = None  # (CursorHandler) 
    __under_window = None  # () 
    __window_factory = None  # () 
    
    # Operations
    def __new__(self):
        """function __new__
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def can_dispatch_event(self, event):
        """function can_dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def dispatch_event(self, event):
        """function dispatch_event
        
        event: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def get_under_window(self):
        """function get_under_window
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_created_desktop_window(self, desktop_window):
        """function on_created_desktop_window
        
        desktop_window: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def on_destroyed_desktop_window(self, window_id):
        """function on_destroyed_desktop_window
        
        window_id: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def move(self, point):
        """function move
        
        point: 
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def is_under_window(self, window):
        """function is_under_window
        
        window: 
        
        returns bool
        """
        return None # should raise NotImplementedError()
    
    def __update_under_cursor(self):
        """function update_under_cursor
        
        returns 
        """
        return None # should raise NotImplementedError()
    
    def __change_window_attributes(self):
        """function change_window_attributes
        
        returns 
        """
        return None # should raise NotImplementedError()
    


* Wed 15 Jul 2015 04:07:00 PM JST
DesktopWindowFactory
* Wed 15 Jul 2015 04:07:12 PM JST

* Wed 15 Jul 2015 04:07:36 PM JST
Observable
* Wed 15 Jul 2015 04:08:10 PM JST
    _instances = {} # multition by xcb.Connection

    def __new__(cls, display, *args, **kwargs):
        if display not in cls._instances:
            cls._instances[display] = object.__new__(
                cls, display, *args, **kwargs)
        return cls._instances[display]

* Wed 15 Jul 2015 04:08:39 PM JST
None  # ()
* Wed 15 Jul 2015 04:08:43 PM JST
Window
* Wed 15 Jul 2015 04:09:03 PM JST
lsef.
* Wed 15 Jul 2015 04:09:17 PM JST
  # ()
* Wed 15 Jul 2015 04:09:25 PM JST
  # (CursorHandler)
* Wed 15 Jul 2015 04:09:27 PM JST
None
* Wed 15 Jul 2015 04:11:17 PM JST
self.
* Wed 15 Jul 2015 04:11:31 PM JST
DesktopWindowObserver
* Wed 15 Jul 2015 04:19:37 PM JST
EventLoop.get_instance().add_event_dispatcher(self)
* Wed 15 Jul 2015 04:44:34 PM JST
        if not isinstance(event, (EnterNotifyEvent, )):
            return False
        if event.detail in (NotifyDetail.Inferior, NotifyDetail.Ancestor):
            return False
        if event.mode == NotifyMode.Grab:
            return False
        return True

* Wed 15 Jul 2015 04:44:42 PM JST
self._update_under_window()
* Wed 15 Jul 2015 04:44:51 PM JST
self._update_under_window()
* Wed 15 Jul 2015 04:45:00 PM JST
self._update_under_window()
* Wed 15 Jul 2015 04:45:15 PM JST
return None # should raise NotImplementedError()
* Wed 15 Jul 2015 04:45:16 PM JST
self
* Wed 15 Jul 2015 04:45:42 PM JST
None # should raise NotImplementedError()
* Wed 15 Jul 2015 04:45:43 PM JST
_
* Wed 15 Jul 2015 04:45:44 PM JST
lsef._
* Wed 15 Jul 2015 04:45:54 PM JST
        try:
            self.cursor_handler.move(newx, newy).check()
        except BadWindow as err:
            print('DEBUG-1-desktop_cursor.py')
            import os
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 1000 -l 100 -r 2 -d 0.5')
            os.system('rmmod pcspkr')
            print(err)

* Wed 15 Jul 2015 04:46:29 PM JST
return None # should raise NotImplementedError()
* Wed 15 Jul 2015 04:46:44 PM JST
return None # should raise NotImplementedError()
* Wed 15 Jul 2015 04:47:24 PM JST
point
* Wed 15 Jul 2015 04:49:39 PM JST
reutrn
* Wed 15 Jul 2015 04:50:43 PM JST
return None # should raise NotImplementedError()
* Wed 15 Jul 2015 04:50:45 PM JST
mask
* Wed 15 Jul 2015 04:50:48 PM JST
        mask = self._display.core.GetWindowAttributes(
            window).reply().your_event_mask
        self._display.core.ChangeWindowAttributes(
            window, CW.EventMask, [EventMask.EnterWindow|mask])
        self._display.flush()

* Wed 15 Jul 2015 04:51:48 PM JST
self.display.flush()
* Wed 15 Jul 2015 04:52:14 PM JST
cookie = 
* Wed 15 Jul 2015 04:52:16 PM JST

* Wed 15 Jul 2015 04:52:16 PM JST

* Wed 15 Jul 2015 04:52:16 PM JST
        cookie.check()

* Wed 15 Jul 2015 04:52:29 PM JST
        for observer in self._observers:
            observer.on_changed_under_window(self)

* Wed 15 Jul 2015 04:55:25 PM JST
get_instance()
* Wed 15 Jul 2015 04:57:14 PM JST
DesktopCursor
* Wed 15 Jul 2015 05:00:57 PM JST
import
* Wed 15 Jul 2015 05:01:54 PM JST
'_NET_WM_USER_TIME'
* Wed 15 Jul 2015 05:02:38 PM JST

* Wed 15 Jul 2015 05:03:48 PM JST
        rep = self.window.get_property(
            False, '_NET_NUMBER_OF_DESKTOPS', 'CARDINAL')
        if rep is None:
            return None
        nums = _unpack('I' * rep.value_len, _array('B', rep.value).tostring())
        if not nums:
            return None
        return nums[0]

* Wed 15 Jul 2015 05:04:15 PM JST
'_NET_WM_USER_TIME'
* Wed 15 Jul 2015 05:05:06 PM JST
'_NET_WM_USER_TIME'
* Wed 15 Jul 2015 05:05:45 PM JST
        elif event.atom == self._get_atom('_NET_WM_USER_TIME'):
            self._set_cache('_NET_WM_USER_TIME', self._root.get_user_time())

* Wed 15 Jul 2015 05:06:07 PM JST
'_NET_WM_USER_TIME'
* Wed 15 Jul 2015 05:07:05 PM JST
from lab.xahk.eventloop import EventLoop
from lab.xahk.desktop_root_window import DesktopRootWindow
from lab.xahk.desktop_root_window_observer import DesktopRootWindowObserver
from lab.xahk.wm.display import get_display


class DebugDesktopRootWindowObserver(DesktopRootWindowObserver):
    def on_changed_active_window(self, root_window):
        print('DEBUG-1-2015-07-14-173547.junk.py')
        print(root_window.get_active_window())

    def on_changed_client_list(self, root_window):
        print('DEBUG-2-2015-07-14-173547.junk.py')
        print(root_window.client_list())

    def on_changed_client_list_stacking(self, root_window):
        print('DEBUG-6-2015-07-14-173547.junk.py')
        print(root_window.client_list_stacking())

    def on_changed_current_desktop(self, root_window):
        print('DEBUG-3-2015-07-14-173547.junk.py')
        print(root_window.get_current_desktop())

    def on_changed_desktop_names(self, root_window):
        print('DEBUG-4-2015-07-14-173547.junk.py')
        print(root_window.list_desktop_names())

    def on_changed_viewport(self, root_window):
        print('DEBUG-5-2015-07-14-173547.junk.py')
        print(root_window.get_viewport())


d = DesktopRootWindow(get_display())
d.add_observer(DebugDesktopRootWindowObserver())

* Wed 15 Jul 2015 05:07:09 PM JST
EventLoop.get_instance().start_loop()
* Wed 15 Jul 2015 05:08:21 PM JST
get_instance
* Wed 15 Jul 2015 05:10:51 PM JST

* Wed 15 Jul 2015 05:10:51 PM JST

* Wed 15 Jul 2015 05:10:51 PM JST
        print('DEBUG-2-desktop_cursor.py')

* Wed 15 Jul 2015 05:13:44 PM JST
on_changed_under_window
* Wed 15 Jul 2015 05:15:56 PM JST

* Wed 15 Jul 2015 05:15:56 PM JST

* Wed 15 Jul 2015 05:15:56 PM JST
            print(observer)

* Wed 15 Jul 2015 05:19:54 PM JST
connect()
* Wed 15 Jul 2015 05:19:54 PM JST
xcb.connect()
* Wed 15 Jul 2015 05:20:07 PM JST
d2=DesktopCursor(xcb.connect())
* Wed 15 Jul 2015 05:20:11 PM JST
connect()
* Wed 15 Jul 2015 05:20:12 PM JST
xcb.connect()
* Wed 15 Jul 2015 05:22:11 PM JST
self.display
* Wed 15 Jul 2015 05:24:50 PM JST
DesktopCursor(self.display)
* Wed 15 Jul 2015 05:24:55 PM JST
DesktopCursor(self.display)
* Wed 15 Jul 2015 05:24:58 PM JST
print(DesktopCursor(self.display))
* Wed 15 Jul 2015 05:25:15 PM JST
_observers
* Wed 15 Jul 2015 05:26:51 PM JST
DesktopCursor(self.display)
* Wed 15 Jul 2015 05:26:54 PM JST
DesktopCursor(self.display)
* Wed 15 Jul 2015 05:31:27 PM JST
DesktopWindowFactory
* Wed 15 Jul 2015 05:32:12 PM JST
self._window_factory
* Wed 15 Jul 2015 05:32:20 PM JST
self._window_factory._instances
* Wed 15 Jul 2015 05:32:41 PM JST

* Wed 15 Jul 2015 05:32:41 PM JST

* Wed 15 Jul 2015 05:32:41 PM JST
        print(self._window_factory._instances)

* Wed 15 Jul 2015 05:32:43 PM JST

* Wed 15 Jul 2015 05:32:43 PM JST

* Wed 15 Jul 2015 05:32:43 PM JST
        print(self._window_factory._instances)

* Wed 15 Jul 2015 05:32:59 PM JST
EventLoop.
* Wed 15 Jul 2015 05:33:04 PM JST

* Wed 15 Jul 2015 05:33:04 PM JST

* Wed 15 Jul 2015 05:33:04 PM JST
        print(Desktop)

* Wed 15 Jul 2015 05:34:00 PM JST

* Wed 15 Jul 2015 05:34:00 PM JST

* Wed 15 Jul 2015 05:34:01 PM JST
        print(DesktopCursor(self.display))

* Wed 15 Jul 2015 09:45:44 PM JST
DesktopManager
* Wed 15 Jul 2015 09:46:09 PM JST
from lab.xahk.desktop_window_factory import DesktopWindowFactory
from lab.xahk.desktop_window_factory_observer import DesktopWindowFactoryObserver

* Wed 15 Jul 2015 09:46:16 PM JST

* Wed 15 Jul 2015 09:46:16 PM JST

* Wed 15 Jul 2015 09:46:16 PM JST
from lab.xahk.binder.key_listener_x11 import KeyListenerX11

* Wed 15 Jul 2015 09:46:22 PM JST
DesktopWindowFactoryObserver
* Wed 15 Jul 2015 09:46:30 PM JST
DesktopWindowFactory
* Wed 15 Jul 2015 09:46:57 PM JST
form 
* Wed 15 Jul 2015 09:47:18 PM JST
DesktopWindowFactory(get_display())
* Wed 15 Jul 2015 09:50:11 PM JST
desktop
* Wed 15 Jul 2015 09:50:14 PM JST
Desktop
* Wed 15 Jul 2015 09:50:35 PM JST
Desktop
* Wed 15 Jul 2015 09:50:38 PM JST
get_instance
* Wed 15 Jul 2015 09:51:07 PM JST
Desktop
* Wed 15 Jul 2015 09:51:28 PM JST
desktop_manager_observer
* Wed 15 Jul 2015 09:51:32 PM JST
window_fa
* Wed 15 Jul 2015 09:51:42 PM JST
DesktopManagerObserver
* Wed 15 Jul 2015 09:51:52 PM JST
from lab.xahk.desktop_window_factory_observer import DesktopWindowFactoryObserver
* Wed 15 Jul 2015 09:52:10 PM JST
Window
* Wed 15 Jul 2015 09:52:26 PM JST
WindowFac
* Wed 15 Jul 2015 09:55:55 PM JST
DesktopCursor(self.display)
* Wed 15 Jul 2015 09:56:04 PM JST
add_obser
* Wed 15 Jul 2015 09:56:12 PM JST
DesktopCursor(self.display)._observers
* Wed 15 Jul 2015 10:00:22 PM JST

* Wed 15 Jul 2015 10:00:22 PM JST

* Wed 15 Jul 2015 10:00:22 PM JST
            print('DEBUG-2-desktop_cursor.py')

* Wed 15 Jul 2015 10:00:49 PM JST

* Wed 15 Jul 2015 10:00:49 PM JST

* Wed 15 Jul 2015 10:00:49 PM JST
        print(display)

* Wed 15 Jul 2015 10:09:50 PM JST
            cls._instances[display] = object.__new__(
                cls, display, *args, **kwargs)

* Wed 15 Jul 2015 10:09:55 PM JST
__new__
* Wed 15 Jul 2015 10:09:55 PM JST
object.__new__
* Wed 15 Jul 2015 10:09:59 PM JST
cls, 
* Wed 15 Jul 2015 10:09:59 PM JST
                cls, 
* Wed 15 Jul 2015 10:13:41 PM JST
        Observable.__init__(self)
        self.display = display
        self._cursor = CursorHandler(display)
        self._under_window = None
        self._window_factory = DesktopWindowFactory(display)
        self._window_factory.add_observer(self)
        cookies = []
        append = cookies.append
        for window in self._window_factory.list_windows():
            append(self._change_window_attributes(window))
            window.add_observer(self)
        for cookie in cookies:
            cookie.check()
        EventLoop.get_instance().add_event_dispatcher(self)
        self._update_under_window()

* Wed 15 Jul 2015 10:13:51 PM JST
self
* Wed 15 Jul 2015 10:14:04 PM JST
cls._instances[display]
* Wed 15 Jul 2015 10:14:29 PM JST
cls(display, *args, **kwargs)
* Wed 15 Jul 2015 10:14:40 PM JST
self
* Wed 15 Jul 2015 10:14:45 PM JST
self
* Wed 15 Jul 2015 10:14:48 PM JST
self
* Wed 15 Jul 2015 10:14:50 PM JST
self
* Wed 15 Jul 2015 10:15:32 PM JST
object.__new__(
                # cls, display, *args, **kwargs)
* Wed 15 Jul 2015 10:15:40 PM JST
object.__new__(cls, display, *args, **kwargs)
* Wed 15 Jul 2015 10:22:23 PM JST
print('')
* Wed 15 Jul 2015 10:27:56 PM JST
from lab.xahk.desktop_cursor import DesktopCursor
* Wed 15 Jul 2015 10:28:18 PM JST

* Wed 15 Jul 2015 10:28:18 PM JST

* Wed 15 Jul 2015 10:28:18 PM JST
            # obj = super(DesktopCursor, cls).__new__(cls, display, *args, **kwargs)

* Wed 15 Jul 2015 10:32:16 PM JST

* Wed 15 Jul 2015 10:32:17 PM JST

* Wed 15 Jul 2015 10:32:17 PM JST
        super(DesktopCursor, self).__init__(display)

* Wed 15 Jul 2015 10:32:17 PM JST

* Wed 15 Jul 2015 10:32:18 PM JST

* Wed 15 Jul 2015 10:32:18 PM JST
        super(DesktopCursor, self).__init__(display)

* Wed 15 Jul 2015 10:40:01 PM JST
from lab.xahk.desktop_cursor import DesktopCursor
* Wed 15 Jul 2015 10:52:24 PM JST

* Wed 15 Jul 2015 10:52:24 PM JST

* Wed 15 Jul 2015 10:52:24 PM JST
            obj = object.__new__(cls, display, *args, **kwargs)

* Wed 15 Jul 2015 10:54:58 PM JST
pass
* Wed 15 Jul 2015 10:55:19 PM JST

* Wed 15 Jul 2015 10:55:19 PM JST

* Wed 15 Jul 2015 10:55:19 PM JST
            cls._instances[display] = obj

* Wed 15 Jul 2015 11:00:15 PM JST
init__ = lambda *args, **kwargs: None
* Wed 15 Jul 2015 11:00:46 PM JST

* Wed 15 Jul 2015 11:00:46 PM JST

* Wed 15 Jul 2015 11:00:46 PM JST
            print('DEBUG-2-desktop_cursor.py')

* Wed 15 Jul 2015 11:00:56 PM JST
sle.
* Wed 15 Jul 2015 11:02:30 PM JST
_need_init
* Wed 15 Jul 2015 11:05:16 PM JST
def multiton(cls):
   instances = {}
   def getinstance(id):
      if id not in instances:
         instances[id] = cls(id)
      return instances[id]  
   return getinstance
* Thu 16 Jul 2015 12:27:18 PM JST
$1
* Thu 16 Jul 2015 12:29:20 PM JST
ugly 
* Thu 16 Jul 2015 12:29:21 PM JST

* Thu 16 Jul 2015 12:29:21 PM JST

* Thu 16 Jul 2015 12:29:21 PM JST
    # TODO: (Atami) [2015/07/15]

* Thu 16 Jul 2015 12:34:32 PM JST
display
* Thu 16 Jul 2015 12:34:43 PM JST
id
* Thu 16 Jul 2015 12:35:46 PM JST
@multition
* Thu 16 Jul 2015 12:39:07 PM JST
DesktopCursor
* Thu 16 Jul 2015 12:39:27 PM JST
multiton
* Thu 16 Jul 2015 12:39:29 PM JST
desktop_cursor
* Thu 16 Jul 2015 12:40:05 PM JST
def multiton(cls, *args, **kwargs):
    instances = {}
    def getinstance(display):
        if cls not in instances:
            print('DEBUG-4-desktop_cursor.py')
            instances[cls] = {}
        if display not in instances[cls]:
            print('DEBUG-5-desktop_cursor.py')
            instances[cls][display] = cls(display, *args, **kwargs)
        return instances[cls][display]
    return getinstance

* Thu 16 Jul 2015 12:42:40 PM JST
    # @classmethod
    # def get_instance(cls, display):
    #     if display not in cls._instances:
    #         cls._instances[display] = cls(display)
    #     return cls._instances[display]

* Thu 16 Jul 2015 12:44:43 PM JST
display_multiton
* Thu 16 Jul 2015 12:45:22 PM JST

* Thu 16 Jul 2015 12:45:22 PM JST

* Thu 16 Jul 2015 12:45:22 PM JST
# from lab.xahk.wm.display import get_display

* Thu 16 Jul 2015 12:46:17 PM JST

* Thu 16 Jul 2015 12:46:17 PM JST

* Thu 16 Jul 2015 12:46:18 PM JST
            print('DEBUG-4-desktop_cursor.py')

* Thu 16 Jul 2015 12:46:18 PM JST

* Thu 16 Jul 2015 12:46:18 PM JST

* Thu 16 Jul 2015 12:46:18 PM JST
            print('DEBUG-5-desktop_cursor.py')

* Thu 16 Jul 2015 12:47:34 PM JST

* Thu 16 Jul 2015 12:47:34 PM JST

* Thu 16 Jul 2015 12:47:34 PM JST
        print('DEBUG-3-desktop_cursor.py')

* Thu 16 Jul 2015 12:47:44 PM JST

* Thu 16 Jul 2015 12:47:44 PM JST

* Thu 16 Jul 2015 12:47:44 PM JST
        print(self._observers)

* Thu 16 Jul 2015 12:54:23 PM JST
display_multiton
* Thu 16 Jul 2015 12:55:08 PM JST
DesktopWindowFactory
* Thu 16 Jul 2015 12:56:46 PM JST
display_multiton
* Thu 16 Jul 2015 12:57:38 PM JST
DesktopRootWindow
* Thu 16 Jul 2015 01:00:34 PM JST
display_multiton
* Thu 16 Jul 2015 01:01:35 PM JST

* Thu 16 Jul 2015 01:01:35 PM JST

* Thu 16 Jul 2015 01:01:36 PM JST
from lab.xahk.wm.display import get_display

* Thu 16 Jul 2015 01:03:02 PM JST
get_display()
* Thu 16 Jul 2015 01:03:50 PM JST
f
* Thu 16 Jul 2015 01:03:51 PM JST
lse.f
* Thu 16 Jul 2015 01:05:26 PM JST
get_display()
* Thu 16 Jul 2015 01:06:39 PM JST
display_multiton
* Thu 16 Jul 2015 01:06:58 PM JST

* Thu 16 Jul 2015 01:06:58 PM JST

* Thu 16 Jul 2015 01:06:58 PM JST
        print(d._observers)

* Thu 16 Jul 2015 01:07:06 PM JST

* Thu 16 Jul 2015 01:07:06 PM JST

* Thu 16 Jul 2015 01:07:06 PM JST
        print('DEBUG-1-mouse_bind_service.py')

* Thu 16 Jul 2015 01:07:50 PM JST
get_instance
* Thu 16 Jul 2015 01:08:18 PM JST
la
* Thu 16 Jul 2015 01:08:18 PM JST
form la
* Thu 16 Jul 2015 01:09:39 PM JST
KeyBindService
* Thu 16 Jul 2015 01:10:34 PM JST
get_display()
* Thu 16 Jul 2015 01:12:22 PM JST

* Thu 16 Jul 2015 01:12:22 PM JST

* Thu 16 Jul 2015 01:12:23 PM JST
from lab.xahk.wm.display import get_display

* Thu 16 Jul 2015 01:14:03 PM JST

* Thu 16 Jul 2015 01:14:03 PM JST

* Thu 16 Jul 2015 01:14:03 PM JST
from lab.xahk.wm.display import get_display

* Thu 16 Jul 2015 01:14:27 PM JST
get_instance
* Thu 16 Jul 2015 01:14:28 PM JST
get_instance
* Thu 16 Jul 2015 01:14:28 PM JST
get_instance
* Thu 16 Jul 2015 01:14:28 PM JST
get_instance
* Thu 16 Jul 2015 01:15:55 PM JST
get_instance
* Thu 16 Jul 2015 01:16:09 PM JST
get_instance
* Thu 16 Jul 2015 01:18:18 PM JST
get_disp
* Thu 16 Jul 2015 01:19:21 PM JST
point
* Thu 16 Jul 2015 01:19:25 PM JST
point
* Thu 16 Jul 2015 01:21:45 PM JST
            
* Thu 16 Jul 2015 01:23:43 PM JST
EventLoopself.
* Thu 16 Jul 2015 01:24:41 PM JST
EventLoop(self.display).add_event_dispatcher(self)
* Thu 16 Jul 2015 01:24:44 PM JST
self)
* Thu 16 Jul 2015 01:24:45 PM JST
add_event_dispatcher(self)
* Thu 16 Jul 2015 01:24:54 PM JST
EventLoop(self.display)._dispatchers
* Thu 16 Jul 2015 01:31:27 PM JST

* Thu 16 Jul 2015 01:31:27 PM JST

* Thu 16 Jul 2015 01:31:27 PM JST
        print(EventLoop(self.display)._dispatchers)

* Thu 16 Jul 2015 01:45:57 PM JST
get
* Thu 16 Jul 2015 01:52:11 PM JST
get_
* Thu 16 Jul 2015 01:53:15 PM JST
    def get_display(self):
        """function get_display

        returns
        """
        return self._wm.get_display()

    display = property(get_display)


* Thu 16 Jul 2015 01:54:12 PM JST

* Thu 16 Jul 2015 01:54:13 PM JST

* Thu 16 Jul 2015 01:54:13 PM JST
        self.display = display

* Thu 16 Jul 2015 01:54:23 PM JST
self.
* Thu 16 Jul 2015 01:57:42 PM JST
    def get_display(self, ):
        r"""SUMMARY

        get_display()

        @Return:

        @Error:
        """
        return self.window.get_display()

    display = property(get_display)


* Thu 16 Jul 2015 01:59:01 PM JST
    def get_display(self):
        """function get_display

        returns
        """
        return self._display

    display = property(get_display)


* Thu 16 Jul 2015 02:01:14 PM JST
_display
* Thu 16 Jul 2015 02:01:25 PM JST

* Thu 16 Jul 2015 02:01:25 PM JST

* Thu 16 Jul 2015 02:01:25 PM JST
        self._display = window.get_display()

* Thu 16 Jul 2015 02:08:34 PM JST

* Thu 16 Jul 2015 02:08:34 PM JST

* Thu 16 Jul 2015 02:08:34 PM JST
        print(Accelerator(event.detail, event.state))

* Thu 16 Jul 2015 02:11:55 PM JST

* Thu 16 Jul 2015 02:11:55 PM JST

* Thu 16 Jul 2015 02:11:55 PM JST
        self._display = display

* Thu 16 Jul 2015 02:13:59 PM JST
_
* Thu 16 Jul 2015 02:14:00 PM JST
self._
* Thu 16 Jul 2015 02:15:18 PM JST

* Thu 16 Jul 2015 02:15:18 PM JST

* Thu 16 Jul 2015 02:15:18 PM JST
        self._display = display

* Thu 16 Jul 2015 02:58:49 PM JST

* Thu 16 Jul 2015 02:58:49 PM JST

* Thu 16 Jul 2015 02:58:49 PM JST
        self._hello = hello

* Thu 16 Jul 2015 02:58:51 PM JST
hello
* Thu 16 Jul 2015 03:00:43 PM JST
args
* Thu 16 Jul 2015 03:01:14 PM JST
if :
* Thu 16 Jul 2015 03:01:25 PM JST
    def getinstance(display, *args, **kwargs):
        if cls not in instances:
            instances[cls] = {}
        if display not in instances[cls]:
            instances[cls][display] = cls(display, *args, **kwargs)
        return instances[cls][display]

* Thu 16 Jul 2015 03:01:55 PM JST
multiton_display.__
* Thu 16 Jul 2015 03:03:21 PM JST
display_
* Thu 16 Jul 2015 03:03:25 PM JST
display_
* Thu 16 Jul 2015 03:04:43 PM JST
connect()
* Thu 16 Jul 2015 03:04:43 PM JST
xcb.connect()
* Thu 16 Jul 2015 03:05:13 PM JST
multiton_display
* Thu 16 Jul 2015 03:05:33 PM JST
_multiton_display__instance
* Thu 16 Jul 2015 03:05:37 PM JST
_multiton_display__instances
* Thu 16 Jul 2015 03:06:56 PM JST
self, 
* Thu 16 Jul 2015 03:07:49 PM JST
DesktopCursor(c)
* Thu 16 Jul 2015 03:07:53 PM JST
DesktopCursor(c)
* Thu 16 Jul 2015 03:07:57 PM JST
DesktopCursor(xcb.connect())
* Thu 16 Jul 2015 03:08:52 PM JST
display_multiton
* Thu 16 Jul 2015 03:09:11 PM JST
display_
* Thu 16 Jul 2015 03:09:16 PM JST
display_
* Thu 16 Jul 2015 03:09:23 PM JST
multiton_display
* Thu 16 Jul 2015 03:10:58 PM JST
multiton_display
* Thu 16 Jul 2015 03:13:02 PM JST
self, 
* Thu 16 Jul 2015 03:13:51 PM JST

* Thu 16 Jul 2015 03:13:51 PM JST

* Thu 16 Jul 2015 03:13:51 PM JST
        print(multiton_display.instances())

* Thu 16 Jul 2015 03:14:26 PM JST
cls
* Thu 16 Jul 2015 10:24:15 PM JST
            try:
                self._create_desktop_window(wid)
            except BadWindow as err:
                print('DEBUG-1-desktop_window_factory.py')
                import os
                os.system('modprobe pcspkr')
                os.system('/usr/bin/beep -f 1000 -l 100 -r 2 -d 0.5')
                os.system('rmmod pcspkr')
                print(err)

* Thu 16 Jul 2015 10:24:27 PM JST

* Thu 16 Jul 2015 10:24:27 PM JST

* Thu 16 Jul 2015 10:24:28 PM JST
        dwindow = DesktopWindow(self.display, window_id)

* Thu 16 Jul 2015 10:24:36 PM JST

* Thu 16 Jul 2015 10:24:36 PM JST

* Thu 16 Jul 2015 10:24:36 PM JST
            self._create_desktop_window(wid)

* Thu 16 Jul 2015 10:25:03 PM JST

* Thu 16 Jul 2015 10:25:03 PM JST

* Thu 16 Jul 2015 10:25:03 PM JST
            try:

* Thu 16 Jul 2015 11:16:21 PM JST
            import os
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 1000 -l 100 -r 2 -d 0.5')
            os.system('rmmod pcspkr')

* Thu 16 Jul 2015 11:30:48 PM JST
window
* Thu 16 Jul 2015 11:34:40 PM JST
class _CursorHandler(object):
    """Class CursorHandler
    """
    # Attributes:
    def __init__(self, display):
        r"""

        @Arguments:
        - `display`:
        """
        self._wm = WindowManager(display)
        self.root = self._wm.root

    # Operations
    def get_display(self):
        """function get_display

        returns
        """
        return self._wm.get_display()

    display = property(get_display)

    def query_pointer(self):
        """function query_pointer

        returns
        """
        return self.root.window.query_pointer()

    def get_under_window(self):
        """function get_under_window

        returns
        """
        child = self.query_pointer().reply().child
        try:
            children = self.display.core.QueryTree(child).reply().children
        except BadWindow as err:
            import os
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 1000 -l 100 -r 2 -d 0.5')
            os.system('rmmod pcspkr')
            print(err)
            return None
        for window in self._wm.list_windows():
            if window in children:
                return window
        return None

    def get_point(self):
        """function get_point

        returns Point
        """
        pointer = self.query_pointer().reply()
        return Point(pointer.root_x, pointer.root_y)

    def move(self, newx, newy):
        """function move

        point:

        returns
        """
        return self.root.move_cursor_to(newx, newy)

* Thu 16 Jul 2015 11:35:04 PM JST
WindowManager(display)
* Thu 16 Jul 2015 11:35:31 PM JST
root
* Thu 16 Jul 2015 11:36:46 PM JST
list_windows
* Thu 16 Jul 2015 11:37:40 PM JST
self._root_window.query_pointer()
* Thu 16 Jul 2015 11:40:51 PM JST
WindowManager
* Thu 16 Jul 2015 11:42:39 PM JST
r.window.window.query_pointer_unchecked().reply()
* Thu 16 Jul 2015 11:43:29 PM JST
win_x
* Thu 16 Jul 2015 11:43:38 PM JST
mask
* Thu 16 Jul 2015 11:48:35 PM JST

* Thu 16 Jul 2015 11:48:35 PM JST

* Thu 16 Jul 2015 11:48:36 PM JST
from lab.xahk.wm.window_manager import WindowManager

* Thu 16 Jul 2015 11:54:26 PM JST
window.
* Thu 16 Jul 2015 11:57:03 PM JST
window.
* Thu 16 Jul 2015 11:57:04 PM JST
reply()
* Thu 16 Jul 2015 11:57:15 PM JST
get_
* Thu 16 Jul 2015 11:57:19 PM JST
get_
* Thu 16 Jul 2015 11:58:04 PM JST
window
* Thu 16 Jul 2015 11:59:46 PM JST
query_pointer().reply()
* Thu 16 Jul 2015 11:59:58 PM JST
self._root_client.get_cursor_point()
* Fri 17 Jul 2015 12:00:00 AM JST

* Fri 17 Jul 2015 12:00:00 AM JST

* Fri 17 Jul 2015 12:00:00 AM JST
        pointer = 

* Fri 17 Jul 2015 12:00:07 AM JST

* Fri 17 Jul 2015 12:00:07 AM JST

* Fri 17 Jul 2015 12:00:07 AM JST
from rectangle import Point

* Fri 17 Jul 2015 12:02:14 AM JST
reply()
* Fri 17 Jul 2015 12:37:48 AM JST
-rwx------  1 3.3K Jun  5 14:49 desktop_
* Fri 17 Jul 2015 12:37:49 AM JST
-rwx------  1 3.5K Jul 16 22:25 desktop_
* Fri 17 Jul 2015 12:37:49 AM JST
-rwx------  1  842 Jul 15 02:06 desktop_
* Fri 17 Jul 2015 12:37:49 AM JST
-rwx------  1  11K Jul 16 15:39 desktop_
* Fri 17 Jul 2015 12:37:49 AM JST
-rwx------  1 1.7K Jul 14 18:32 desktop_
* Fri 17 Jul 2015 12:37:49 AM JST
-rwx------  1 5.0K Jul 16 16:25 desktop_
* Fri 17 Jul 2015 12:37:49 AM JST
-rwx------  1  641 Jul 16 13:50 desktop_
* Fri 17 Jul 2015 12:37:59 AM JST
desktop_
* Fri 17 Jul 2015 12:38:01 AM JST
desktop_
* Fri 17 Jul 2015 12:38:02 AM JST
desktop_
* Fri 17 Jul 2015 12:38:04 AM JST
desktop_
* Fri 17 Jul 2015 12:38:06 AM JST
desktop_
* Fri 17 Jul 2015 12:38:07 AM JST
desktop_
* Fri 17 Jul 2015 12:38:18 AM JST
_listener
* Fri 17 Jul 2015 12:38:53 AM JST
Desktop
* Fri 17 Jul 2015 12:38:59 AM JST
Listener
* Fri 17 Jul 2015 12:39:17 AM JST
cursor
* Fri 17 Jul 2015 12:39:19 AM JST
cursor_listener_observer
* Fri 17 Jul 2015 12:39:39 AM JST
cursor
* Fri 17 Jul 2015 12:39:40 AM JST
cursor_listener
* Fri 17 Jul 2015 12:39:53 AM JST
Desktop
* Fri 17 Jul 2015 12:40:01 AM JST
Desktop
* Fri 17 Jul 2015 12:42:01 AM JST
desktop_
* Fri 17 Jul 2015 12:42:16 AM JST
Desktop
* Fri 17 Jul 2015 12:42:23 AM JST
desktop_
* Fri 17 Jul 2015 12:42:28 AM JST
Desktop
* Fri 17 Jul 2015 12:42:38 AM JST
desktop_
* Fri 17 Jul 2015 12:42:45 AM JST
Desktop
* Fri 17 Jul 2015 12:42:55 AM JST
Desktop
* Fri 17 Jul 2015 12:43:02 AM JST
Listener
* Fri 17 Jul 2015 12:43:11 AM JST
Desktop
* Fri 17 Jul 2015 12:43:19 AM JST
Desktop
* Fri 17 Jul 2015 12:44:23 AM JST
root_window_listener_observer
* Fri 17 Jul 2015 12:44:34 AM JST
Desktop
* Fri 17 Jul 2015 12:44:40 AM JST
Desktop
* Fri 17 Jul 2015 12:44:50 AM JST
root_window_listener
* Fri 17 Jul 2015 12:45:01 AM JST
Desktop
* Fri 17 Jul 2015 12:45:04 AM JST
Desktop
* Fri 17 Jul 2015 12:45:43 AM JST
Desktop
* Fri 17 Jul 2015 12:45:53 AM JST
Desktop
* Fri 17 Jul 2015 12:45:58 AM JST
window_listener_factory_observer
* Fri 17 Jul 2015 12:46:14 AM JST
window_listener_factory
* Fri 17 Jul 2015 12:46:27 AM JST
desktop_
* Fri 17 Jul 2015 12:46:38 AM JST
Desktop
* Fri 17 Jul 2015 12:46:43 AM JST
desktop_
* Fri 17 Jul 2015 12:46:49 AM JST
Desktop
* Fri 17 Jul 2015 12:46:58 AM JST
_desktop_
* Fri 17 Jul 2015 12:47:03 AM JST
_window_li
* Fri 17 Jul 2015 12:47:17 AM JST
Desktop
* Fri 17 Jul 2015 12:47:41 AM JST
Desktop
* Fri 17 Jul 2015 12:47:50 AM JST
Desktop
* Fri 17 Jul 2015 12:47:56 AM JST
Deskto
* Fri 17 Jul 2015 12:48:04 AM JST
Desktop
* Fri 17 Jul 2015 12:48:33 AM JST
DebugDesktopWindowObserver
* Fri 17 Jul 2015 12:49:16 AM JST
window_listener_observer
* Fri 17 Jul 2015 12:49:29 AM JST
Desktop
* Fri 17 Jul 2015 12:49:34 AM JST
Desktop
* Fri 17 Jul 2015 12:49:48 AM JST
_window_listener
* Fri 17 Jul 2015 12:50:13 AM JST
Desktop
* Fri 17 Jul 2015 12:50:23 AM JST
Desktop
* Fri 17 Jul 2015 12:50:27 AM JST
Desktop
* Fri 17 Jul 2015 12:50:52 AM JST
Desktop
* Fri 17 Jul 2015 12:52:41 AM JST
Desktop
* Fri 17 Jul 2015 12:55:31 AM JST

* Fri 17 Jul 2015 12:55:55 AM JST

* Fri 17 Jul 2015 12:55:56 AM JST
CursorListener
* Fri 17 Jul 2015 12:55:58 AM JST
cursor_listener
* Fri 17 Jul 2015 12:56:32 AM JST

* Fri 17 Jul 2015 12:56:34 AM JST
RootWindowListener
* Fri 17 Jul 2015 12:56:36 AM JST
root_window_listener
* Fri 17 Jul 2015 12:56:57 AM JST
from lab.xahk.listener.window_listener_factory_observer import WindowListenerFactoryObserver

* Fri 17 Jul 2015 12:57:00 AM JST
window_listener_factory_observer
* Fri 17 Jul 2015 12:57:09 AM JST
Observer
* Fri 17 Jul 2015 12:57:37 AM JST

* Fri 17 Jul 2015 12:57:39 AM JST
WindowListenerFactory
* Fri 17 Jul 2015 12:57:41 AM JST
window_listener_factory
* Fri 17 Jul 2015 12:57:58 AM JST

* Fri 17 Jul 2015 12:58:00 AM JST
WindowListenerObserver
* Fri 17 Jul 2015 12:58:01 AM JST
window_listener_observer
* Fri 17 Jul 2015 12:58:03 AM JST
window_listener_observer
* Fri 17 Jul 2015 12:58:03 AM JST
window_listener_observerfrom lab.xahk.listener. import 

* Fri 17 Jul 2015 12:58:21 AM JST
CursorListenerObserver
* Fri 17 Jul 2015 12:58:31 AM JST
CursorListener
* Fri 17 Jul 2015 12:58:38 AM JST
RootWindowListenerObserver
* Fri 17 Jul 2015 12:58:46 AM JST
RootWindowListener
* Fri 17 Jul 2015 12:58:55 AM JST
WindowListenerFactoryObserver
* Fri 17 Jul 2015 12:59:03 AM JST
WindowListenerFactory
* Fri 17 Jul 2015 12:59:10 AM JST
WindowListenerObserver
* Fri 17 Jul 2015 12:59:56 AM JST
desktop_root_window import DesktopRootWindow
* Fri 17 Jul 2015 01:00:07 AM JST
Desktop
* Fri 17 Jul 2015 01:00:18 AM JST
Desktop
* Fri 17 Jul 2015 01:00:30 AM JST
Listener
* Fri 17 Jul 2015 01:00:33 AM JST
RootWindowListener
* Fri 17 Jul 2015 01:00:39 AM JST
WindowListenerFactory
* Fri 17 Jul 2015 01:02:44 AM JST
desktop_window_factory
* Fri 17 Jul 2015 01:02:51 AM JST
desktop_window_factory_observer
* Fri 17 Jul 2015 01:02:58 AM JST
Desktop
* Fri 17 Jul 2015 01:03:02 AM JST
Desktop
* Fri 17 Jul 2015 01:03:09 AM JST
Desktop
* Fri 17 Jul 2015 01:03:15 AM JST
Desktop
* Fri 17 Jul 2015 01:03:20 AM JST
Desktop
* Fri 17 Jul 2015 01:04:14 AM JST
desktop_cursor_observer
* Fri 17 Jul 2015 01:04:18 AM JST
Desktop
* Fri 17 Jul 2015 01:04:22 AM JST
Desktop
* Fri 17 Jul 2015 01:04:26 AM JST
desktop_
* Fri 17 Jul 2015 01:04:30 AM JST
cursor_
* Fri 17 Jul 2015 01:04:42 AM JST
Desktop
* Fri 17 Jul 2015 01:04:49 AM JST
Desktop
* Fri 17 Jul 2015 01:04:59 AM JST
Desktop
* Fri 17 Jul 2015 01:05:04 AM JST
Desktop
* Fri 17 Jul 2015 01:06:06 AM JST
desktop_
* Fri 17 Jul 2015 01:06:10 AM JST
desktop_
* Fri 17 Jul 2015 01:06:13 AM JST
desktop_
* Fri 17 Jul 2015 01:06:29 AM JST
cursor_listener
* Fri 17 Jul 2015 01:09:04 AM JST
desktop_
* Fri 17 Jul 2015 01:09:07 AM JST
desktop_
* Fri 17 Jul 2015 01:11:33 AM JST
desktop_
* Fri 17 Jul 2015 01:11:36 AM JST
desktop_
* Fri 17 Jul 2015 01:11:41 AM JST
desktop_
* Fri 17 Jul 2015 01:12:02 AM JST
desktop_
* Fri 17 Jul 2015 01:13:32 AM JST
destroy_
* Fri 17 Jul 2015 01:16:43 AM JST
desktop_
* Fri 17 Jul 2015 01:16:50 AM JST
Desktop
* Fri 17 Jul 2015 01:17:06 AM JST
Desktop
* Fri 17 Jul 2015 01:17:17 AM JST
Desktop
* Fri 17 Jul 2015 01:17:28 AM JST
Desktop
* Fri 17 Jul 2015 01:17:46 AM JST
Desktop
* Fri 17 Jul 2015 01:17:56 AM JST
Desktop
* Fri 17 Jul 2015 01:18:06 AM JST
Desktop
* Fri 17 Jul 2015 01:18:12 AM JST
Desktop
* Fri 17 Jul 2015 01:18:19 AM JST
Desktop
* Fri 17 Jul 2015 01:18:25 AM JST
Desktop
* Fri 17 Jul 2015 01:18:32 AM JST
Desktop
* Fri 17 Jul 2015 01:18:41 AM JST
Desktop
* Fri 17 Jul 2015 01:18:49 AM JST
Desktop
* Fri 17 Jul 2015 01:18:58 AM JST
Desktop
* Fri 17 Jul 2015 01:19:03 AM JST
Desktop
* Fri 17 Jul 2015 01:19:15 AM JST
Desktop
* Fri 17 Jul 2015 01:19:21 AM JST
Desktop
* Fri 17 Jul 2015 01:22:21 AM JST
WindowClient
* Fri 17 Jul 2015 01:41:49 AM JST
from lab.xahk.wm.window_client import WindowClient
* Fri 17 Jul 2015 01:41:58 AM JST
WindowClient
* Fri 17 Jul 2015 01:42:42 AM JST

* Fri 17 Jul 2015 01:42:42 AM JST

* Fri 17 Jul 2015 01:42:42 AM JST
from lab.xahk.wm.window_client import WindowClient

* Fri 17 Jul 2015 03:59:51 AM JST

* Fri 17 Jul 2015 03:59:51 AM JST

* Fri 17 Jul 2015 03:59:51 AM JST
        self._display = display

* Fri 17 Jul 2015 03:59:55 AM JST
_display
* Fri 17 Jul 2015 04:03:06 AM JST
self._get_property_window('_NET_SUPPORTING_WM_CHECK')
* Fri 17 Jul 2015 04:04:05 AM JST
self.root.get_active_window()
* Fri 17 Jul 2015 04:05:52 AM JST
self.root.client_list_stacking()
* Fri 17 Jul 2015 04:07:43 AM JST
get_
* Fri 17 Jul 2015 04:09:06 AM JST
list
* Fri 17 Jul 2015 05:30:23 AM JST
sleep(0.01)
* Fri 17 Jul 2015 05:30:29 AM JST
break
* Fri 17 Jul 2015 05:30:40 AM JST
self._continue_stream
* Fri 17 Jul 2015 05:31:00 AM JST
f
* Fri 17 Jul 2015 05:31:00 AM JST
sle.f
* Fri 17 Jul 2015 05:36:43 AM JST
dispatcher
* Fri 17 Jul 2015 05:36:46 AM JST
_overriden_
* Fri 17 Jul 2015 06:11:31 AM JST
[x for x in self._listeners if x.can_dispatch_event(event)]
* Fri 17 Jul 2015 06:14:31 AM JST
clear()
* Fri 17 Jul 2015 06:15:27 AM JST
from abc import ABCMeta, abstractmethod


class EventDispatcher(object):
    """Abstract class EventDispatcher
    """
    # Attributes:
    __metaclass__ = ABCMeta

    # Operations
    @abstractmethod
    def can_dispatch_event(self, event):
        """function can_dispatch_event

        event:

        returns bool
        """
        raise NotImplementedError()

    @abstractmethod
    def dispatch_event(self, event):
        """function dispatch_event

        event:

        returns
        """
        raise NotImplementedError()

* Fri 17 Jul 2015 06:15:37 AM JST
Dispatcher
* Fri 17 Jul 2015 06:28:29 AM JST
/media/Data/MYTEMP/pyphant-1.0b2/pyphant
* Fri 17 Jul 2015 06:31:20 AM JST
dispatch
* Fri 17 Jul 2015 06:31:24 AM JST
dispatch_event
* Fri 17 Jul 2015 06:41:42 AM JST
/usr/local/lib/python2.7/dist-packages/simpy/
* Fri 17 Jul 2015 01:50:27 PM JST
pyqt
* Fri 17 Jul 2015 01:50:46 PM JST
/usr/lib/python2.7/dist-packages/PyQt4/
* Fri 17 Jul 2015 01:53:28 PM JST
QtGui
* Fri 17 Jul 2015 02:14:01 PM JST
git clone git://code.qt.io/qt/qt.git
* Fri 17 Jul 2015 04:21:54 PM JST
QEventLoop
* Fri 17 Jul 2015 11:36:22 PM JST
trollius
* Fri 17 Jul 2015 11:37:03 PM JST
/usr/local/lib/python2.7/dist-packages/trollius/
* Fri 17 Jul 2015 11:39:01 PM JST
DefaultEventLoopPolicy
* Fri 17 Jul 2015 11:43:10 PM JST
Queue
* Fri 17 Jul 2015 11:48:22 PM JST
DefaultEventLoopPolicy
* Fri 17 Jul 2015 11:52:51 PM JST
run_forever
* Sat 18 Jul 2015 12:16:02 AM JST
/usr/local/lib/python2.7/dist-packages/pyglet/
* Sat 18 Jul 2015 12:31:32 AM JST
3rdparty
* Sat 18 Jul 2015 12:35:57 AM JST
sql
* Sat 18 Jul 2015 12:36:10 AM JST
testlib
* Sat 18 Jul 2015 12:40:59 AM JST
xmlpatterns
* Sat 18 Jul 2015 01:47:06 AM JST
multiton_display
* Sat 18 Jul 2015 01:47:29 AM JST
disp
* Sat 18 Jul 2015 01:47:31 AM JST
f_
* Sat 18 Jul 2015 01:47:31 AM JST
sle.f_
* Sat 18 Jul 2015 01:47:45 AM JST
def
* Sat 18 Jul 2015 01:48:18 AM JST
self._continue_stream = 0
* Sat 18 Jul 2015 01:49:08 AM JST

* Sat 18 Jul 2015 01:49:08 AM JST

* Sat 18 Jul 2015 01:49:08 AM JST
        self._listeners = []

* Sat 18 Jul 2015 01:49:08 AM JST
        self._listeners = []

* Sat 18 Jul 2015 01:49:08 AM JST
        self._listeners = []
        self._continue_stream = 0

* Sat 18 Jul 2015 02:05:41 AM JST
f
* Sat 18 Jul 2015 02:05:41 AM JST
sle.f
* Sat 18 Jul 2015 02:05:48 AM JST
_event_
* Sat 18 Jul 2015 02:05:57 AM JST
False
* Sat 18 Jul 2015 02:06:55 AM JST
self._continue_stream = True
* Sat 18 Jul 2015 02:28:30 AM JST
process_event
* Sat 18 Jul 2015 02:35:11 AM JST
for
* Sat 18 Jul 2015 02:35:33 AM JST
_dispat
* Sun 19 Jul 2015 03:10:21 PM JST
event_dispatcher
* Sun 19 Jul 2015 03:10:29 PM JST
event_dispatcher
* Sun 19 Jul 2015 03:10:32 PM JST
EventDispatcher
* Sun 19 Jul 2015 03:10:39 PM JST
EventListener
* Sun 19 Jul 2015 03:11:09 PM JST
dispatch
* Sun 19 Jul 2015 03:13:04 PM JST
event_dispatcher
* Sun 19 Jul 2015 03:13:09 PM JST
EventDispatcher
* Sun 19 Jul 2015 03:14:31 PM JST
dispatch
* Sun 19 Jul 2015 03:16:27 PM JST
from lab.xahk.events.eventloop import EventLoop
from lab.xahk.events.event_listener import EventListener

* Sun 19 Jul 2015 03:18:28 PM JST
EventDispatcher
* Sun 19 Jul 2015 03:18:42 PM JST
from lab.xahk.events.event import KeyEvent
from lab.xahk.events.event_target import EventTarget

* Sun 19 Jul 2015 03:19:19 PM JST
EventDispatcher
* Sun 19 Jul 2015 03:19:47 PM JST
dispatch_
* Sun 19 Jul 2015 03:21:11 PM JST
EventDispatcher
* Sun 19 Jul 2015 03:21:22 PM JST
EventDispatcher
* Sun 19 Jul 2015 03:21:32 PM JST
dispatch
* Sun 19 Jul 2015 03:22:02 PM JST
from lab.xahk.events.eventloop import EventLoop
from lab.xahk.events.event_listener import EventListener
from lab.xahk.events.event import MouseEvent

* Sun 19 Jul 2015 03:22:06 PM JST
from lab.xahk.binder.input_listener import InputListener
from lab.xahk.binder.define import ButtonIndex, ModifierMask
from lab.xahk.binder.accelerator import Accelerator

* Sun 19 Jul 2015 03:22:12 PM JST
from lab.xahk.binder.input_listener import InputListener
from lab.xahk.binder.define import ButtonIndex, ModifierMask
from lab.xahk.binder.accelerator import Accelerator

* Sun 19 Jul 2015 03:22:48 PM JST
dispatch
* Sun 19 Jul 2015 03:23:12 PM JST
dispatch
* Sun 19 Jul 2015 03:23:28 PM JST
dispatch
* Sun 19 Jul 2015 03:23:47 PM JST
Dispatcher
* Sun 19 Jul 2015 03:36:28 PM JST

* Sun 19 Jul 2015 03:36:28 PM JST

* Sun 19 Jul 2015 03:36:28 PM JST
            print('DEBUG-1-display_multiton.py')

* Sun 19 Jul 2015 03:36:29 PM JST

* Sun 19 Jul 2015 03:36:29 PM JST

* Sun 19 Jul 2015 03:36:29 PM JST
            print('DEBUG-2-display_multiton.py')

* Sun 19 Jul 2015 03:36:30 PM JST

* Sun 19 Jul 2015 03:36:30 PM JST

* Sun 19 Jul 2015 03:36:30 PM JST
    print('DEBUG-3-display_multiton.py')

* Sun 19 Jul 2015 03:37:12 PM JST
EventTarget
* Sun 19 Jul 2015 03:39:15 PM JST
dispatch
* Sun 19 Jul 2015 03:53:39 PM JST
third
* Sun 19 Jul 2015 05:25:38 PM JST
tests/
* Sun 19 Jul 2015 05:41:44 PM JST
+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                 <----------+------X    |
|           |                            |    Cursor |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           +----------------------------+           |
|                                                    |
|                                                    |
+----------------------------------------------------+

* Sun 19 Jul 2015 05:49:30 PM JST
|           |                 X
* Sun 19 Jul 2015 05:49:50 PM JST

* Sun 19 Jul 2015 05:49:50 PM JST

* Sun 19 Jul 2015 05:49:50 PM JST
                         ||

* Sun 19 Jul 2015 05:50:28 PM JST
"""
+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |               X            |           |
|           |             Cursor         |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           +----------------------------+           |
|                                                    |
|                                                    |
+----------------------------------------------------+

                         ||
                         \/

+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                           X                        |
|                         Cursor                     |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
+----------------------------------------------------+
"""

* Sun 19 Jul 2015 05:50:34 PM JST
+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                           X                        |
|                         Cursor                     |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
+----------------------------------------------------+

* Sun 19 Jul 2015 05:50:41 PM JST

                         ||
                         \/


* Sun 19 Jul 2015 06:00:15 PM JST
Window2 
* Sun 19 Jul 2015 06:12:19 PM JST

* Sun 19 Jul 2015 06:12:19 PM JST

* Sun 19 Jul 2015 06:12:19 PM JST
|           |                            |           |

* Sun 19 Jul 2015 06:12:22 PM JST

* Sun 19 Jul 2015 06:12:22 PM JST

* Sun 19 Jul 2015 06:12:22 PM JST
|                                                    |

* Sun 19 Jul 2015 06:12:30 PM JST

* Sun 19 Jul 2015 06:12:30 PM JST

* Sun 19 Jul 2015 06:12:30 PM JST
|                                                    |

* Sun 19 Jul 2015 06:12:33 PM JST

* Sun 19 Jul 2015 06:12:33 PM JST

* Sun 19 Jul 2015 06:12:33 PM JST
|           |                            |           |

* Sun 19 Jul 2015 06:12:36 PM JST

* Sun 19 Jul 2015 06:12:36 PM JST

* Sun 19 Jul 2015 06:12:36 PM JST
|           |                            |           |

* Sun 19 Jul 2015 06:12:40 PM JST

* Sun 19 Jul 2015 06:12:40 PM JST

* Sun 19 Jul 2015 06:12:40 PM JST
|                                                    |

* Sun 19 Jul 2015 06:12:48 PM JST

* Sun 19 Jul 2015 06:12:48 PM JST

* Sun 19 Jul 2015 06:12:48 PM JST
|           |                            |           |

* Sun 19 Jul 2015 06:12:49 PM JST

* Sun 19 Jul 2015 06:12:49 PM JST

* Sun 19 Jul 2015 06:12:49 PM JST
|           |                            |           |

* Sun 19 Jul 2015 06:12:51 PM JST

* Sun 19 Jul 2015 06:12:51 PM JST

* Sun 19 Jul 2015 06:12:51 PM JST
|           |                            |           |

* Sun 19 Jul 2015 06:15:12 PM JST
class TestUpdateUnderWindowSubWindow(TestUpdateUnderWindowBase):
    """2015/07/13"""
    def setUp(self):
        self._subwindow = simple_teswindow(
            self.display, 250, 250, 500, 500, 'subwindow')
        self._destroyed = False
        self.mocker.replay()

    def test_enter_in_subwindow(self, ):
        root = self.display.get_setup().roots[0].root
        self.display.core.WarpPointerChecked(
            0, root, 0, 0, 0, 0, 100, 500).check()


    def _destroy_subwindow(self, ):
        r"""SUMMARY

        _destroy_subwindow()

        @Return:

        @Error:
        """
        if self._destroyed:
            return
        self._subwindow.destroy()
        self._destroyed = True

    def tearDown(self):
        self._destroy_subwindow()

* Sun 19 Jul 2015 06:15:23 PM JST
"""
+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                 <----------+------X    |
|           |                            |    Cursor |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           +----------------------------+           |
|                                                    |
|                                                    |
+----------------------------------------------------+


"""

* Sun 19 Jul 2015 06:15:41 PM JST

* Sun 19 Jul 2015 06:15:42 PM JST

* Sun 19 Jul 2015 06:15:42 PM JST
"""

* Sun 19 Jul 2015 06:15:44 PM JST

* Sun 19 Jul 2015 06:15:44 PM JST

* Sun 19 Jul 2015 06:15:44 PM JST
"""

* Sun 19 Jul 2015 06:22:00 PM JST
+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |               X            |           |
|           |             Cursor         |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           +----------------------------+           |
|                                                    |
|                                                    |
+----------------------------------------------------+

* Sun 19 Jul 2015 06:22:36 PM JST
+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |               X            |           |
|           |             Cursor         |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           +----------------------------+   
* Sun 19 Jul 2015 06:24:50 PM JST
+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |                            |           |
|           |         +------------------+----+      |
|           |         |                  |    |      |
|           |         |                  |    |      |
|           |         |     X            |    |      |
|           |         |   Cursor         |    |      |
|           |         |                  |    |      |
|           |         |                  |    |      |
|           |         |                  |    |      |
|           +---------+------------------+    |      |
|                     +-----------------------+      |
|                                                    |
+----------------------------------------------------+


* Sun 19 Jul 2015 06:27:40 PM JST
"""
+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |                            |           |
|           |                            |----+      |
|           |                            |    |      |
|           |                            |    |      |
|           |               X            |    |      |
|           |             Cursor         |    |      |
|           |                            |    |      |
|           |                            |    |      |
|           |                            |    |      |
|           +----------------------------+    |      |
|                     +-----------------------+      |
|                                                    |
+----------------------------------------------------+

                         ||
                         \/

+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |                            |           |
|           |         +------------------+----+      |
|           |         |    Window 3      |    |      |
|           |         |                  |    |      |
|           |         |     X            |    |      |
|           |         |   Cursor         |    |      |
|           |         |                  |    |      |
|           |         |                  |    |      |
|           |         |                  |    |      |
|           +---------+------------------+    |      |
|                     +-----------------------+      |
|                                                    |
+----------------------------------------------------+

"""

* Sun 19 Jul 2015 06:27:49 PM JST
+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |                            |           |
|           |                            |----+      |
|           |                            |    |      |
|           |                            |    |      |
|           |               X            |    |      |
|           |             Cursor         |    |      |
|           |                            |    |      |
|           |                            |    |      |
|           |                            |    |      |
|           +----------------------------+    |      |
|                     +-----------------------+      |
|                                                    |
+----------------------------------------------------+

* Sun 19 Jul 2015 06:27:56 PM JST
+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |                            |           |
|           |         +------------------+----+      |
|           |         |    Window 3      |    |      |
|           |         |                  |    |      |
|           |         |     X            |    |      |
|           |         |   Cursor         |    |      |
|           |         |                  |    |      |
|           |         |                  |    |      |
|           |         |                  |    |      |
|           +---------+------------------+    |      |
|                     +-----------------------+      |
|                                                    |
+----------------------------------------------------+

* Sun 19 Jul 2015 06:33:12 PM JST
|                                                    |
* Sun 19 Jul 2015 06:35:02 PM JST
|                     |                       |      |
* Sun 19 Jul 2015 06:35:52 PM JST

* Sun 19 Jul 2015 06:35:52 PM JST

* Sun 19 Jul 2015 06:35:52 PM JST
|                                                    |

* Sun 19 Jul 2015 06:35:56 PM JST

* Sun 19 Jul 2015 06:35:56 PM JST

* Sun 19 Jul 2015 06:35:56 PM JST
|                                                    |

* Sun 19 Jul 2015 06:35:58 PM JST

* Sun 19 Jul 2015 06:35:58 PM JST

* Sun 19 Jul 2015 06:35:58 PM JST
|                                                    |

* Sun 19 Jul 2015 06:36:01 PM JST

* Sun 19 Jul 2015 06:36:01 PM JST

* Sun 19 Jul 2015 06:36:01 PM JST
|                                                    |

* Sun 19 Jul 2015 06:36:08 PM JST

* Sun 19 Jul 2015 06:36:08 PM JST

* Sun 19 Jul 2015 06:36:08 PM JST
|                                                    |

* Sun 19 Jul 2015 06:36:48 PM JST

* Sun 19 Jul 2015 06:36:48 PM JST

* Sun 19 Jul 2015 06:36:48 PM JST
|           |                            |           |

* Sun 19 Jul 2015 06:36:52 PM JST

* Sun 19 Jul 2015 06:36:52 PM JST

* Sun 19 Jul 2015 06:36:52 PM JST
|           |                            |           |

* Sun 19 Jul 2015 06:36:54 PM JST

* Sun 19 Jul 2015 06:36:54 PM JST

* Sun 19 Jul 2015 06:36:54 PM JST
|           |                            |           |

* Sun 19 Jul 2015 06:36:57 PM JST

* Sun 19 Jul 2015 06:36:57 PM JST

* Sun 19 Jul 2015 06:36:57 PM JST
|           |                            |           |

* Sun 19 Jul 2015 06:37:00 PM JST

* Sun 19 Jul 2015 06:37:01 PM JST

* Sun 19 Jul 2015 06:37:01 PM JST
|           |                            |           |

* Sun 19 Jul 2015 06:37:03 PM JST

* Sun 19 Jul 2015 06:37:03 PM JST

* Sun 19 Jul 2015 06:37:03 PM JST
|                                                    |

* Sun 19 Jul 2015 06:37:06 PM JST

* Sun 19 Jul 2015 06:37:06 PM JST

* Sun 19 Jul 2015 06:37:06 PM JST
|                                                    |

* Sun 19 Jul 2015 06:37:08 PM JST

* Sun 19 Jul 2015 06:37:09 PM JST

* Sun 19 Jul 2015 06:37:09 PM JST
|           |                            |           |

* Sun 19 Jul 2015 06:37:11 PM JST

* Sun 19 Jul 2015 06:37:11 PM JST

* Sun 19 Jul 2015 06:37:11 PM JST
|           |                            |           |

* Sun 19 Jul 2015 06:37:16 PM JST

* Sun 19 Jul 2015 06:37:16 PM JST

* Sun 19 Jul 2015 06:37:16 PM JST
    |           |                            |           |

* Sun 19 Jul 2015 06:38:39 PM JST
desktop_cursor
* Sun 19 Jul 2015 06:39:28 PM JST
DesktopCursor
* Sun 19 Jul 2015 06:39:45 PM JST
Desktop
* Sun 19 Jul 2015 06:40:09 PM JST
get_display
* Sun 19 Jul 2015 06:41:07 PM JST

* Sun 19 Jul 2015 06:41:07 PM JST

* Sun 19 Jul 2015 06:41:07 PM JST
from time import sleep

* Sun 19 Jul 2015 06:44:14 PM JST
+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                 X----------+------>    |
|           |               Cursor       |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           +----------------------------+           |
|                                                    |
|                                                    |
|                                                    |
+----------------------------------------------------+

* Sun 19 Jul 2015 06:45:32 PM JST
Window2 Destroyed
Window2 Minimized

+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |               X            |           |
|           |             Cursor         |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           +----------------------------+           |
|                                                    |
|                                                    |
|                                                    |
+----------------------------------------------------+

                         ||
                         \/

+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                           X                        |
|                         Cursor                     |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
+----------------------------------------------------+

* Sun 19 Jul 2015 06:46:33 PM JST
+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                           X                        |
|                         Cursor                     |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
|                                                    |
+----------------------------------------------------+

                         ||
                         \/

+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |               X            |           |
|           |             Cursor         |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           |                            |           |
|           +----------------------------+           |
|                                                    |
|                                                    |
|                                                    |
+----------------------------------------------------+

* Sun 19 Jul 2015 06:47:43 PM JST
+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |                            |----+      |
|           |                            |    |      |
|           |                            |    |      |
|           |               X            |    |      |
|           |             Cursor         |    |      |
|           |                            |    |      |
|           |                            |    |      |
|           |                            |    |      |
|           +----------------------------+    |      |
|                     |                       |      |
|                     +-----------------------+      |
|                                                    |
+----------------------------------------------------+

                         ||
                         \/

+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |         +-----------------------+      |
|           |         |    Window 3           |      |
|           |         |                       |      |
|           |         |     X                 |      |
|           |         |   Cursor              |      |
|           |         |                       |      |
|           |         |                       |      |
|           |         |                       |      |
|           +---------|                       |      |
|                     |                       |      |
|                     +-----------------------+      |
|                                                    |
+----------------------------------------------------+

* Sun 19 Jul 2015 06:48:39 PM JST
+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |         +-----------------------+      |
|           |         |    Window 3           |      |
|           |         |                       |      |
|           |         |     X                 |      |
|           |         |   Cursor              |      |
|           |         |                       |      |
|           |         |                       |      |
|           |         |                       |      |
|           +---------|                       |      |
|                     |                       |      |
|                     +-----------------------+      |
|                                                    |
+----------------------------------------------------+

                         ||
                         \/

+----------------------------------------------------+
|               Window 1                             |
|                                                    |
|                                                    |
|           +----------------------------+           |
|           |      Window 2              |           |
|           |                            |           |
|           |                            |----+      |
|           |                            |    |      |
|           |                            |    |      |
|           |               X            |    |      |
|           |             Cursor         |    |      |
|           |                            |    |      |
|           |                            |    |      |
|           |                            |    |      |
|           +----------------------------+    |      |
|                     |                       |      |
|                     +-----------------------+      |
|                                                    |
+----------------------------------------------------+

* Sun 19 Jul 2015 10:56:22 PM JST
def 
* Sun 19 Jul 2015 10:57:43 PM JST
250, 250, 500, 500, 'subwindow'
* Sun 19 Jul 2015 11:03:27 PM JST
500, 500, 350, 350
* Sun 19 Jul 2015 11:05:04 PM JST
root_win
* Sun 19 Jul 2015 11:05:11 PM JST
root_win
* Sun 19 Jul 2015 11:05:24 PM JST
self
* Sun 19 Jul 2015 11:05:44 PM JST
_window
* Sun 19 Jul 2015 11:06:06 PM JST
_subwindow
* Sun 19 Jul 2015 11:07:10 PM JST
        root = self.display.get_setup().roots[0].root
        self.display.core.WarpPointerChecked(
            0, root, 0, 0, 0, 0, 100, 500).check()

* Sun 19 Jul 2015 11:08:03 PM JST
self.window2.destroy()
* Sun 19 Jul 2015 11:39:44 PM JST
(load)
* Sun 19 Jul 2015 11:39:51 PM JST
(require 'll-debug nil 'noerror)
* Sun 19 Jul 2015 11:39:55 PM JST
debug
* Sun 19 Jul 2015 11:39:56 PM JST
ll-debug
* Sun 19 Jul 2015 11:41:03 PM JST
(buffer-file-name)
* Sun 19 Jul 2015 11:41:11 PM JST
buffer-file-name
* Sun 19 Jul 2015 11:41:31 PM JST
(setq a buffer-file-name)
* Sun 19 Jul 2015 11:42:42 PM JST
(s-ends-with? ".py" oldbuf)
* Sun 19 Jul 2015 11:43:21 PM JST
(s-concat )
* Sun 19 Jul 2015 11:43:49 PM JST
(y-or-n-p (format "Delete %s " oldbuf))
* Sun 19 Jul 2015 11:44:01 PM JST
(s-concat oldbuf "c")
* Sun 19 Jul 2015 11:44:05 PM JST
                                
* Sun 19 Jul 2015 11:44:07 PM JST
)
* Sun 19 Jul 2015 11:44:09 PM JST
                 
* Sun 19 Jul 2015 11:44:23 PM JST
(s-concat oldbuf "c")
* Sun 19 Jul 2015 11:45:30 PM JST
test_
* Sun 19 Jul 2015 11:47:19 PM JST
from lab.xahk.listener.tests.test_cursor_listener import *
* Sun 19 Jul 2015 11:48:25 PM JST
from lab.xahk.listener.tests.test_cursor_listener import *
* Sun 19 Jul 2015 11:52:03 PM JST
0, root, 0, 0, 0, 0, 100, 500
* Sun 19 Jul 2015 11:52:06 PM JST
root
* Sun 19 Jul 2015 11:53:59 PM JST

* Sun 19 Jul 2015 11:53:59 PM JST

* Sun 19 Jul 2015 11:54:00 PM JST
        sleep(0.5)

* Sun 19 Jul 2015 11:54:11 PM JST
f
* Sun 19 Jul 2015 11:54:12 PM JST
sle.f
* Sun 19 Jul 2015 11:56:00 PM JST
sel
* Sun 19 Jul 2015 11:57:32 PM JST
f
* Sun 19 Jul 2015 11:57:33 PM JST
sle.f
* Sun 19 Jul 2015 11:57:42 PM JST
start
* Sun 19 Jul 2015 11:58:18 PM JST
pass
* Sun 19 Jul 2015 11:58:32 PM JST
cursor
* Sun 19 Jul 2015 11:58:52 PM JST
got
* Sun 19 Jul 2015 11:59:13 PM JST
        self.display.core.WarpPointerChecked(
            0, root, 0, 0, 0, 0, 900, 500).check() # set X point

* Sun 19 Jul 2015 11:59:17 PM JST
point
* Sun 19 Jul 2015 11:59:17 PM JST
X point
* Sun 19 Jul 2015 11:59:18 PM JST
set X point
* Mon 20 Jul 2015 12:00:06 AM JST
        self.eventloop._load_events()
        self.eventloop.dispatch_events()

* Mon 20 Jul 2015 12:00:16 AM JST
        self.assertEqual(self._cursor.get_under_window().get_id(),
                         self.window1.get_id())

* Mon 20 Jul 2015 12:04:08 AM JST

* Mon 20 Jul 2015 12:04:08 AM JST

* Mon 20 Jul 2015 12:04:08 AM JST
        pass

* Mon 20 Jul 2015 12:05:00 AM JST

* Mon 20 Jul 2015 12:05:00 AM JST

* Mon 20 Jul 2015 12:05:00 AM JST
        # self._destroy_subwindow()

* Mon 20 Jul 2015 12:07:11 AM JST
        self.eventloop._load_events()
        self.eventloop.dispatch_events()

* Mon 20 Jul 2015 12:09:07 AM JST
cursor
* Mon 20 Jul 2015 12:12:05 AM JST
        self.window2 = window2(self.display)
        self._destroyed = False
        self.root = self.display.get_setup().roots[0].root
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 900, 500).check() # set X point
        self.display.flush()
        self._process_events()
        self.mocker.replay()

* Mon 20 Jul 2015 12:12:32 AM JST
TestUpdateUnderWindowBase
* Mon 20 Jul 2015 12:14:26 AM JST
500, 500
* Mon 20 Jul 2015 12:17:07 AM JST
900, 500
* Mon 20 Jul 2015 12:17:48 AM JST
pass
* Mon 20 Jul 2015 12:18:05 AM JST
        self.assertEqual(self._cursor.get_under_window().get_id(),
                         self.window2.get_id())

* Mon 20 Jul 2015 12:19:48 AM JST
    def setUp(self):
        self.window2 = window2(self.display)
        self._destroyed = False
        self.root = self.display.get_setup().roots[0].root
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 500, 500).check() # set X point
        self.display.flush()
        self._process_events()
        self.mocker.replay()

* Mon 20 Jul 2015 12:20:20 AM JST
TestUpdateUnderWindowBase
* Mon 20 Jul 2015 12:25:35 AM JST
self.
* Mon 20 Jul 2015 12:25:41 AM JST
self.
* Mon 20 Jul 2015 12:26:10 AM JST
        self.assertEqual(self._cursor.get_under_window().get_id(),
                         self.window2.get_id())

* Mon 20 Jul 2015 12:26:19 AM JST
        self.window2 = window2(self.display)
        self._destroyed = False
        self.root = self.display.get_setup().roots[0].root
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 500, 500).check() # set X point
        self.display.flush()
        self._process_events()
        self.mocker.replay()

* Mon 20 Jul 2015 12:28:12 AM JST
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 900, 500).check()

* Mon 20 Jul 2015 12:28:23 AM JST
pass
* Mon 20 Jul 2015 12:28:56 AM JST

* Mon 20 Jul 2015 12:28:56 AM JST

* Mon 20 Jul 2015 12:28:56 AM JST
        self.display.flush()

* Mon 20 Jul 2015 12:29:44 AM JST
get_display()
* Mon 20 Jul 2015 12:29:46 AM JST
get_display()
* Mon 20 Jul 2015 12:33:59 AM JST
        self.assertEqual(
            self._cursor.get_under_window().get_id(),
            self.window1.get_id())

* Mon 20 Jul 2015 12:34:14 AM JST
self.window2.destroy()
* Mon 20 Jul 2015 01:56:25 AM JST
    def setUp(self):
        self.window2 = window2(self.display)
        self._destroyed = False
        self.root = self.display.get_setup().roots[0].root
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 500, 500).check() # set X point
        self.display.flush()
        self._process_events()
        self.mocker.replay()

    def test_destroy_window2(self, ):
        self.window2.destroy()
        self._process_events()
        self.assertEqual(
            self._cursor.get_under_window().get_id(),
            self.window1.get_id())

* Mon 20 Jul 2015 01:56:44 AM JST
self.window2.destroy()
* Mon 20 Jul 2015 01:56:51 AM JST
self.window2.destroy()
* Mon 20 Jul 2015 01:57:05 AM JST

* Mon 20 Jul 2015 01:57:05 AM JST

* Mon 20 Jul 2015 01:57:05 AM JST
        self.window2 = window2(self.display)

* Mon 20 Jul 2015 01:57:09 AM JST
        self.window2 = window2(self.display)

* Mon 20 Jul 2015 01:57:09 AM JST
        self.window2 = window2(self.display)
        self._destroyed = False

* Mon 20 Jul 2015 01:57:25 AM JST

* Mon 20 Jul 2015 01:57:25 AM JST

* Mon 20 Jul 2015 01:57:25 AM JST
        self._destroyed = False

* Mon 20 Jul 2015 01:57:26 AM JST
        self._destroyed = False

* Mon 20 Jul 2015 01:57:27 AM JST
        self._destroyed = False
        self.window2.destroy()

* Mon 20 Jul 2015 01:57:51 AM JST
        self.assertEqual(self._cursor.get_under_window().get_id(),
                         self.window2.get_id())

* Mon 20 Jul 2015 02:00:06 AM JST
sleep(0.5)
* Mon 20 Jul 2015 02:19:37 AM JST

* Mon 20 Jul 2015 02:19:37 AM JST

* Mon 20 Jul 2015 02:19:37 AM JST
        self.root = self.display.get_setup().roots[0].root

* Mon 20 Jul 2015 02:19:42 AM JST

* Mon 20 Jul 2015 02:19:42 AM JST

* Mon 20 Jul 2015 02:19:42 AM JST
        self.root = self.display.get_setup().roots[0].root

* Mon 20 Jul 2015 02:19:50 AM JST

* Mon 20 Jul 2015 02:19:50 AM JST

* Mon 20 Jul 2015 02:19:51 AM JST
        self.root = self.display.get_setup().roots[0].root

* Mon 20 Jul 2015 02:19:59 AM JST

* Mon 20 Jul 2015 02:20:00 AM JST

* Mon 20 Jul 2015 02:20:00 AM JST
        self.root = self.display.get_setup().roots[0].root

* Mon 20 Jul 2015 02:20:33 AM JST
    def setUp(self):
        self.window2 = window2(self.display)
        self._destroyed = False
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 500, 500).check() # set X point
        self.display.flush()
        self._process_events()
        sleep(0.5)
        self.mocker.replay()

* Mon 20 Jul 2015 02:21:13 AM JST
from lab.xahk.listener.tests.test_cursor_listener import *
* Mon 20 Jul 2015 02:22:04 AM JST
.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 500, 500).check()
* Mon 20 Jul 2015 02:22:06 AM JST
            
* Mon 20 Jul 2015 02:22:12 AM JST
root
* Mon 20 Jul 2015 02:22:12 AM JST
self.root
* Mon 20 Jul 2015 02:25:16 AM JST

* Mon 20 Jul 2015 02:25:16 AM JST

* Mon 20 Jul 2015 02:25:16 AM JST
        self.assert

* Mon 20 Jul 2015 02:26:02 AM JST
        self.assertEqual(
            self._cursor.get_under_window().get_id(),
            self.window2.get_id())

* Mon 20 Jul 2015 02:26:20 AM JST
        self.assertEqual(
            self._cursor.get_under_window().get_id(),
            self.window1.get_id())
        self.window2 = window2(self.display)
        self._process_events()
        self.assertEqual(
            self._cursor.get_under_window().get_id(),
            self.window2.get_id())

* Mon 20 Jul 2015 02:26:53 AM JST
self.display.flush()
* Mon 20 Jul 2015 02:30:09 AM JST
from lab.xahk.listener.tests.test_cursor_listener import *
* Mon 20 Jul 2015 02:30:25 AM JST
2555/8: w1=window1(c)
2555/9: w3=window3(c)
2555/10: w2=window2(c)

* Mon 20 Jul 2015 02:30:30 AM JST
2555/10:
* Mon 20 Jul 2015 02:30:30 AM JST
2555/9: 
* Mon 20 Jul 2015 02:30:30 AM JST
2555/8: 
* Mon 20 Jul 2015 02:30:45 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.listener.tests.test_cursor_listener import *

* Mon 20 Jul 2015 02:30:50 AM JST
w1=window1(c)                                   
w3=window3(c)                                   
w2=window2(c)                                   

* Mon 20 Jul 2015 02:32:45 AM JST

* Mon 20 Jul 2015 02:32:45 AM JST

* Mon 20 Jul 2015 02:32:45 AM JST
        sleep(3)

* Mon 20 Jul 2015 02:33:02 AM JST
_
* Mon 20 Jul 2015 02:33:02 AM JST
self._
* Mon 20 Jul 2015 02:33:11 AM JST
pass
* Mon 20 Jul 2015 02:33:18 AM JST
self.window2.destroy()
* Mon 20 Jul 2015 02:50:01 AM JST
    def setUp(self):
        self.window3 = window3(self.display)
        self.window2 = window2(self.display)
        self._destroyed = False
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 600, 600).check() # set X point
        self.display.flush()
        self._process_events()
        sleep(0.5)
        self.mocker.replay()

    def test_flowup_window3(self, ):
        self.assertEqual(
            self._cursor.get_under_window().get_id(),
            self.window2.get_id())
        self.window3.raise_window()
        self.display.flush()
        self._process_events()
        sleep(0.5)
        self.assertEqual(
            self._cursor.get_under_window().get_id(),
            self.window3.get_id())


* Mon 20 Jul 2015 02:50:12 AM JST
    def tearDown(self):
        self.window2.destroy()
        self.window3.destroy()

* Mon 20 Jul 2015 02:51:24 AM JST
raise_window
* Mon 20 Jul 2015 02:51:27 AM JST
raise
* Mon 20 Jul 2015 02:56:12 AM JST

* Mon 20 Jul 2015 02:56:12 AM JST

* Mon 20 Jul 2015 02:56:12 AM JST
        self.assertEqual(expects, got)

* Mon 20 Jul 2015 02:58:29 AM JST
self.window1.id
* Mon 20 Jul 2015 02:59:22 AM JST
self._cursor.get_under_window().get_id()
* Mon 20 Jul 2015 02:59:36 AM JST
                        
* Mon 20 Jul 2015 02:59:46 AM JST
self._cursor.get_under_window().get_id()
* Mon 20 Jul 2015 03:00:33 AM JST
id
* Mon 20 Jul 2015 03:06:27 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.listener.tests.test_cursor_listener import *

* Mon 20 Jul 2015 03:06:35 AM JST
w1=window1(c)                                   
w3=window3(c)                                   
w2=window2(c)                                   

* Mon 20 Jul 2015 03:07:05 AM JST
raise
* Mon 20 Jul 2015 03:17:30 AM JST
1.123:12316 root@taka16.no-ip.info > /dev/null 
* Mon 20 Jul 2015 03:23:47 AM JST
conn = get_display()
root = conn.get_setup().roots[0].root

* Mon 20 Jul 2015 04:16:32 AM JST
display
* Mon 20 Jul 2015 04:17:00 AM JST
display
* Mon 20 Jul 2015 04:17:02 AM JST
display, 
* Mon 20 Jul 2015 04:17:04 AM JST
display
* Mon 20 Jul 2015 04:17:06 AM JST
display, 
* Mon 20 Jul 2015 04:17:08 AM JST
display, 
* Mon 20 Jul 2015 04:17:18 AM JST

* Mon 20 Jul 2015 04:17:18 AM JST

* Mon 20 Jul 2015 04:17:18 AM JST
        cls.display =   cls.eventloop.get_display()

* Mon 20 Jul 2015 04:17:21 AM JST
display
* Mon 20 Jul 2015 04:17:21 AM JST
cls.display
* Mon 20 Jul 2015 05:10:57 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.listener.tests.test_cursor_listener import *
w1=window1(c)                                   
w2=window2(c)                                   
w3=window3(c)                                   

* Mon 20 Jul 2015 05:25:27 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.listener.tests.test_cursor_listener import *
w1=window1(c)                                   
w2=window2(c)                                   
w3=window3(c)                                   

* Mon 20 Jul 2015 05:26:38 AM JST
raise
* Mon 20 Jul 2015 05:39:07 AM JST
sleep(0.3)
* Mon 20 Jul 2015 05:39:17 AM JST
sleep(0.5)
* Mon 20 Jul 2015 05:42:19 AM JST
as
* Mon 20 Jul 2015 05:42:20 AM JST
self.as
* Mon 20 Jul 2015 05:42:22 AM JST
        self.assertEqual(self._cursor.get_under_window().get_id(),
                         self.window2.get_id())

* Mon 20 Jul 2015 05:42:36 AM JST
        sleep(0.3)
        self._process_events()
        self.assertEqual(
            self._cursor.get_under_window().get_id(),
            self.window1.get_id())

* Mon 20 Jul 2015 05:44:43 AM JST
assertE
* Mon 20 Jul 2015 05:44:43 AM JST
self.assertE
* Mon 20 Jul 2015 05:44:54 AM JST
        self.assertEqual(
            self._cursor.get_under_window().get_id(),

* Mon 20 Jul 2015 05:44:57 AM JST
        self.assertEqual(
            self._cursor.get_under_window().get_id(),
            self.window1.get_id())

* Mon 20 Jul 2015 05:45:05 AM JST
self.window2 = window2(self.display)
* Mon 20 Jul 2015 05:46:55 AM JST
self._process_events()
* Mon 20 Jul 2015 05:47:45 AM JST
self._process_events()
* Mon 20 Jul 2015 05:48:08 AM JST
        self.assertEqual(
            self._cursor.get_under_window().get_id(),
            self.window2.get_id())

* Mon 20 Jul 2015 05:48:15 AM JST
sleep(0.3)
* Mon 20 Jul 2015 05:52:48 AM JST
c.core.GetProperty(False,482, c.core.InternAtom(False, len('_NET_ACTIVE_WINDOW'), '_NET_ACTIVE_WINDOW').reply().atom, c.core.InternAtom(False, len('WINDOW'), 'WINDOW').reply().atom, 0, 1).reply()
* Mon 20 Jul 2015 03:14:51 PM JST
.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 900, 500).check()
* Mon 20 Jul 2015 03:14:56 PM JST
root
* Mon 20 Jul 2015 03:14:56 PM JST
self.root
* Mon 20 Jul 2015 03:15:00 PM JST
            
* Mon 20 Jul 2015 03:15:29 PM JST
root
* Mon 20 Jul 2015 03:26:55 PM JST

* Mon 20 Jul 2015 03:26:55 PM JST

* Mon 20 Jul 2015 03:26:56 PM JST
        pass                           

* Mon 20 Jul 2015 03:26:57 PM JST
self
* Mon 20 Jul 2015 03:27:18 PM JST
cursor
* Mon 20 Jul 2015 03:27:18 PM JST
cls.cursor
* Mon 20 Jul 2015 03:27:44 PM JST
0, self.root, 0, 0, 0, 0, 600, 600
* Mon 20 Jul 2015 03:28:01 PM JST
get_set
* Mon 20 Jul 2015 03:28:02 PM JST
display.get_set
* Mon 20 Jul 2015 03:28:02 PM JST
cls.display.get_set
* Mon 20 Jul 2015 03:28:31 PM JST
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 0, 0).check()

* Mon 20 Jul 2015 03:30:11 PM JST
self.cursor.move_cursor(10, 10)
* Mon 20 Jul 2015 03:31:27 PM JST
pointer = self.display.core.QueryPointer(self.root).reply()
* Mon 20 Jul 2015 03:31:32 PM JST
self.assertEqual((0, 0), (pointer.root_x, pointer.root_y))
* Mon 20 Jul 2015 03:32:08 PM JST
expectx, expecty
* Mon 20 Jul 2015 03:42:32 PM JST
self.assertTrue(self.window2)
* Mon 20 Jul 2015 04:01:13 PM JST
from lab.xahk.listener.tests.test_cursor_listener import *
* Mon 20 Jul 2015 04:01:18 PM JST
w2=window2(c)                                   
* Mon 20 Jul 2015 04:26:12 PM JST

* Mon 20 Jul 2015 04:28:17 PM JST
CursorListenerObserverCalledCheck
* Mon 20 Jul 2015 04:29:22 PM JST
called
* Mon 20 Jul 2015 04:29:32 PM JST
is_called
* Mon 20 Jul 2015 04:29:33 PM JST
def is_called
* Mon 20 Jul 2015 04:30:12 PM JST
CursorListenerObserverCalledCheck
* Mon 20 Jul 2015 04:30:53 PM JST
CursorListenerObserverCalledCheck()
* Mon 20 Jul 2015 04:31:06 PM JST
        self.assertEqual(self._cursor.get_under_window().get_id(),
                         self.window2.get_id())

* Mon 20 Jul 2015 04:31:47 PM JST
        self.assertEqual(self.observer.under_window(),
                         self.window2.get_id())

* Mon 20 Jul 2015 04:32:16 PM JST
        self.assertEqual(
            self._cursor.get_under_window().get_id(),
            self.window1.get_id())
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 500, 500).check() # enter in window2
        self._process_events()
        self.assertEqual(self._cursor.get_under_window().get_id(),
                         self.window2.get_id())
        self.assertTrue(self.window2)

* Mon 20 Jul 2015 04:33:42 PM JST
self.window2
* Mon 20 Jul 2015 04:33:57 PM JST
self.assertTrue(self._cursor.is_under_window(self.window2))
* Mon 20 Jul 2015 04:57:35 PM JST
window_listener_factory
* Mon 20 Jul 2015 04:58:38 PM JST
def simple_teswindow(display, x, y, width, height, title=''):
    r"""SUMMARY
    simple_teswindow(c, 100,100,1000,1000)
    simple_teswindow()

    @Return:
    """
    # setup = display.get_setup()
    # root = setup.roots[0].root
    depth = stup.roots[0].root_depth
    visual = stup.roots[0].root_visual
    white = stup.roots[0].white_pixel

    window = display.generate_id()

    display.core.CreateWindow(depth, window, root,
                              0, 0, width, height, 0,
                              xproto.WindowClass.InputOutput,
                              visual,
                              xproto.CW.BackPixel, [white])
    display.core.MapWindow(window)
    display.flush()
    client = WindowClient.from_id(display, window)
    client.set_title(title)
    client.set_bounds(Rectangle(x, y, width, height))
    return client

* Mon 20 Jul 2015 04:59:01 PM JST
from lab.xahk.wm.display import get_display
* Mon 20 Jul 2015 04:59:39 PM JST
conn = get_display()
stup = conn.get_setup()
root = stup.roots[0].root

* Mon 20 Jul 2015 05:00:14 PM JST
from xcb import xproto
* Mon 20 Jul 2015 05:00:22 PM JST
from lab.xahk.wm.window_client import WindowClient
* Mon 20 Jul 2015 05:00:36 PM JST
from rectangle import Rectangle
* Mon 20 Jul 2015 05:01:37 PM JST
from lab.xahk.events.eventloop import EventLoop
* Mon 20 Jul 2015 05:01:42 PM JST

* Mon 20 Jul 2015 05:01:44 PM JST
EventLoop
* Mon 20 Jul 2015 05:01:45 PM JST
eventloop
* Mon 20 Jul 2015 05:01:46 PM JST
events.eventloop
* Mon 20 Jul 2015 05:02:22 PM JST
cls.eventloop = EventLoop(conn)
* Mon 20 Jul 2015 05:02:25 PM JST
conn
* Mon 20 Jul 2015 05:02:33 PM JST
cls
* Mon 20 Jul 2015 05:03:03 PM JST
    def _process_events(self, ):
        self.display.flush()
        self.eventloop._load_events()
        self.eventloop.dispatch_events()

* Mon 20 Jul 2015 05:05:02 PM JST
tes_
* Mon 20 Jul 2015 05:07:48 PM JST
self._process_events()
* Mon 20 Jul 2015 05:09:40 PM JST
sleep(0.2)
* Mon 20 Jul 2015 05:09:45 PM JST
self._process_events()
* Mon 20 Jul 2015 05:25:35 PM JST
from lab.xahk.wm.display import get_display

* Mon 20 Jul 2015 05:25:42 PM JST
from xcb import xproto
* Mon 20 Jul 2015 05:25:48 PM JST
from lab.xahk.events.eventloop import EventLoop
* Mon 20 Jul 2015 05:26:21 PM JST
from lab.xahk.listener import WindowListenerFactory
* Mon 20 Jul 2015 05:26:23 PM JST
Factory
* Mon 20 Jul 2015 05:26:35 PM JST
from rectangle import Rectangle
* Mon 20 Jul 2015 05:27:30 PM JST
def simple_teswindow(display, x, y, width, height, title=''):
    r"""SUMMARY
    simple_teswindow(c, 100,100,1000,1000)
    simple_teswindow()

    @Return:
    """
    stup = display.get_setup()
    root = stup.roots[0].root
    depth = stup.roots[0].root_depth
    visual = stup.roots[0].root_visual
    white = stup.roots[0].white_pixel

    window = display.generate_id()

    display.core.CreateWindow(depth, window, root,
                              0, 0, width, height, 0,
                              xproto.WindowClass.InputOutput,
                              visual,
                              xproto.CW.BackPixel, [white])
    display.core.MapWindow(window)
    display.flush()
    client = WindowClient.from_id(display, window)
    client.set_title(title)
    client.set_bounds(Rectangle(x, y, width, height))
    return client

* Mon 20 Jul 2015 05:27:43 PM JST
from lab.xahk.wm.window_client import WindowClient
* Mon 20 Jul 2015 05:27:59 PM JST
pass
* Mon 20 Jul 2015 05:28:29 PM JST
250, 250, 500, 500, 'window2'
* Mon 20 Jul 2015 05:28:47 PM JST
0, 
* Mon 20 Jul 2015 05:28:48 PM JST
0, 0, 
* Mon 20 Jul 2015 05:28:49 PM JST
25
* Mon 20 Jul 2015 05:28:51 PM JST
25
* Mon 20 Jul 2015 05:28:53 PM JST
            
* Mon 20 Jul 2015 05:29:46 PM JST
self
* Mon 20 Jul 2015 05:30:31 PM JST
cls.
* Mon 20 Jul 2015 05:31:01 PM JST
window
* Mon 20 Jul 2015 05:31:01 PM JST
cls.window
* Mon 20 Jul 2015 05:31:08 PM JST
WindowFactory
* Mon 20 Jul 2015 05:31:50 PM JST
from lab.xahk.listener._window_listener import WindowListener
* Mon 20 Jul 2015 05:31:55 PM JST
_window_listener
* Mon 20 Jul 2015 05:43:32 PM JST
    def _process_events(self, ):
        self.display.flush()
        self.eventloop._load_events()
        self.eventloop.dispatch_events()

* Mon 20 Jul 2015 05:43:44 PM JST
        cls.eventloop = EventLoop(get_display())
        cls.display = cls.eventloop.get_display()
        cls.factory = WindowListenerFactory(cls.display)

* Mon 20 Jul 2015 05:44:02 PM JST
        cls.windowbase = simple_teswindow(
            get_display(), 0, 0, 500, 500, 'window')
        windows = WindowListenerFactory(get_display()).list_windows()
        cls.window = None
        for window in windows:
            if window == cls.windowbase:
                cls.window = window
        if cls.window is None:
            raise StandardError()

* Mon 20 Jul 2015 05:44:07 PM JST
cls
* Mon 20 Jul 2015 05:44:11 PM JST
cls
* Mon 20 Jul 2015 05:44:15 PM JST
cls
* Mon 20 Jul 2015 05:44:19 PM JST
cls
* Mon 20 Jul 2015 05:44:23 PM JST
cls
* Mon 20 Jul 2015 05:44:42 PM JST
f_
* Mon 20 Jul 2015 05:44:43 PM JST
sle.f_
* Mon 20 Jul 2015 05:45:04 PM JST
pass
* Mon 20 Jul 2015 06:22:36 PM JST
self.assertNotIn('title', self.window._prop_cache)
* Mon 20 Jul 2015 06:27:25 PM JST
self.assertEqual(self.windowbase.get_title(), self.window.get_title())
* Mon 20 Jul 2015 06:29:01 PM JST
        self.assertEqual(
            self.windowbase.get_title(), self.window._prop_cache['title'])

* Mon 20 Jul 2015 06:29:42 PM JST
self.assertEqual(self.windowbase.get_title(), self.window.get_title())
* Mon 20 Jul 2015 06:29:53 PM JST
self._process_events()
* Mon 20 Jul 2015 06:29:56 PM JST
        sleep(0.2)
        self._process_events()

* Mon 20 Jul 2015 06:30:25 PM JST
self.assertEqual(self.windowbase.get_title(), self.window.get_title())
* Mon 20 Jul 2015 06:33:19 PM JST
self.assertNotIn('title', self.window._prop_cache)
* Mon 20 Jul 2015 06:34:06 PM JST
        self.assertEqual(
            self.windowbase.get_wmclass(), self.window.get_wmclass())

* Mon 20 Jul 2015 06:34:17 PM JST
self.assertIn('title', self.window._prop_cache)
* Mon 20 Jul 2015 06:34:34 PM JST
        self.assertEqual(
            self.windowbase.get_title(), self.window._prop_cache['title'])

* Mon 20 Jul 2015 06:38:54 PM JST
ChangeWindowProperty
* Mon 20 Jul 2015 06:39:08 PM JST
ChangePropertyChecked
* Mon 20 Jul 2015 06:49:22 PM JST
def
* Mon 20 Jul 2015 06:57:12 PM JST
_NET_WM_NAME
* Mon 20 Jul 2015 06:58:41 PM JST
'UTF8_STRING'
* Tue 21 Jul 2015 01:19:25 AM JST
        self.assertEqual(
            self.windowbase.get_wmclass(), self.window.get_wmclass())

* Tue 21 Jul 2015 01:19:31 AM JST
        self.assertEqual(
            self.windowbase.get_wmclass(), self.window._prop_cache['wmclass'])

* Tue 21 Jul 2015 01:20:11 AM JST
        sleep(0.2)
        self._process_events()

* Tue 21 Jul 2015 01:20:57 AM JST
expects
* Tue 21 Jul 2015 01:21:01 AM JST
            
* Tue 21 Jul 2015 01:21:09 AM JST
            
* Tue 21 Jul 2015 01:25:16 AM JST
self.assertIn('wmclass', self.window._prop_cache)
* Tue 21 Jul 2015 01:26:27 AM JST
        self.windowbase.change_property(
            PropMode.Replace, 'WM_CLASS', 'STRING', 8, 'test\x00test2\x00')

* Tue 21 Jul 2015 01:27:01 AM JST
'_NET_WM_PID'
* Tue 21 Jul 2015 01:29:33 AM JST
c.core.GetProperty(False, )
* Tue 21 Jul 2015 01:31:42 AM JST
_WindowManager
* Tue 21 Jul 2015 01:31:58 AM JST
54525974
* Tue 21 Jul 2015 01:32:57 AM JST
c.core.InternAtom
* Tue 21 Jul 2015 01:33:04 AM JST
c.core.GetProperty(False, 54525974, 
* Tue 21 Jul 2015 01:33:19 AM JST
'_NET_WM_PID'
* Tue 21 Jul 2015 01:33:24 AM JST
'CARDINAL'
* Tue 21 Jul 2015 01:33:34 AM JST
'_NET_WM_PID'
* Tue 21 Jul 2015 01:33:52 AM JST
(True, len('_NET_WM_PID'), '_NET_WM_PID').reply().atom
* Tue 21 Jul 2015 01:34:33 AM JST
c.core.InternAtom(True, len('_NET_WM_PID'), '_NET_WM_PID').reply().atom
* Tue 21 Jul 2015 01:36:12 AM JST
'\xea\x0c\x00\x00'
* Tue 21 Jul 2015 01:37:50 AM JST
        sleep(0.2)
        self._process_events()

* Tue 21 Jul 2015 01:37:59 AM JST
        self.assertEqual(expects, self.window.get_wmclass())
        self.assertEqual(expects, self.window._prop_cache['wmclass'])

* Tue 21 Jul 2015 01:39:57 AM JST
'W\x04\x00\x00'
* Tue 21 Jul 2015 01:43:28 AM JST
'\xea\x0c\x00\x00'
* Tue 21 Jul 2015 01:57:36 AM JST
'test\x00test2\x00'
* Tue 21 Jul 2015 01:58:30 AM JST
window.
* Tue 21 Jul 2015 02:17:03 AM JST

* Tue 21 Jul 2015 02:17:03 AM JST

* Tue 21 Jul 2015 02:17:03 AM JST
        from struct import pack

* Tue 21 Jul 2015 02:17:07 AM JST
        self.assertNotIn('pid', self.window._prop_cache)
        self.assertEqual(self.windowbase.get_pid(), self.window.get_pid())
        self.assertEqual(self.windowbase.get_pid(), self.window.pid)
        self.assertIn('pid', self.window._prop_cache)
        self.assertEqual(
            self.windowbase.get_pid(), self.window._prop_cache['pid'])
        self.windowbase.change_property(
            PropMode.Replace, '_NET_WM_PID', 'CARDINAL', 32,
            1, '\xea\x0c\x00\x00')
        expects = 3306
        sleep(0.2)
        self._process_events()
        self.assertEqual(expects, self.window.get_pid())
        self.assertEqual(expects, self.window._prop_cache['pid'])

* Tue 21 Jul 2015 02:17:25 AM JST
pid
* Tue 21 Jul 2015 02:18:24 AM JST
'_NET_WM_WINDOW_TYPE'
* Tue 21 Jul 2015 02:19:15 AM JST
'2\x01\x00\x00'
* Tue 21 Jul 2015 02:19:21 AM JST
3306
* Tue 21 Jul 2015 02:21:17 AM JST
self.assertNotIn('type', self.window._prop_cache)
* Tue 21 Jul 2015 02:21:50 AM JST
self.assertEqual(self.windowbase.get_type(), self.window.get_type())
* Tue 21 Jul 2015 02:23:53 AM JST
self.assertIn('type', self.window._prop_cache)
* Tue 21 Jul 2015 02:24:39 AM JST
        self.assertEqual(
            self.windowbase.get_type(), self.window._prop_cache['type'])

* Tue 21 Jul 2015 02:26:55 AM JST
self.windowbase.get_bounds()
* Tue 21 Jul 2015 02:27:18 AM JST
rectangle
* Tue 21 Jul 2015 02:29:11 AM JST
        sleep(0.2)
        self._process_events()

* Tue 21 Jul 2015 02:29:25 AM JST
self.assertEqual(self.windowbase.get_bounds(), self.window.get_bounds())
* Tue 21 Jul 2015 02:31:22 AM JST
        from rectangle import Rectangle
        expects = Rectangle(100, 100, 200, 200)
        self.assertNotEqual(self.windowbase.get_bounds(), expects)
        self.window.set_bounds(expects)
        sleep(0.2)
        self._process_events()
        self.assertEqual(self.windowbase.get_bounds(), expects)

* Tue 21 Jul 2015 02:32:46 AM JST
        self.assertEqual(
            self.windowbase.get_bounds(), self.window._prop_cache['bounds'])

* Tue 21 Jul 2015 02:32:55 AM JST
            
* Tue 21 Jul 2015 02:37:52 AM JST
self.windowbase.get_bounds()
* Tue 21 Jul 2015 02:46:28 AM JST

* Tue 21 Jul 2015 02:46:28 AM JST

* Tue 21 Jul 2015 02:46:28 AM JST
            print([event.x, event.y, event.width,

* Tue 21 Jul 2015 02:46:28 AM JST
            print([event.x, event.y, event.width,

* Tue 21 Jul 2015 02:46:28 AM JST
            print([event.x, event.y, event.width,
                   event.height, event.border_width])

* Tue 21 Jul 2015 02:49:07 AM JST
event.x - 4, event.y - 22, event.width, event.height
* Tue 21 Jul 2015 02:49:37 AM JST
self.window.get_bounds()
* Tue 21 Jul 2015 02:50:53 AM JST
self.window.get_bounds()
* Tue 21 Jul 2015 02:56:46 AM JST
size
* Tue 21 Jul 2015 02:56:53 AM JST
size.
* Tue 21 Jul 2015 02:56:54 AM JST
size.
* Tue 21 Jul 2015 02:56:59 AM JST
point
* Tue 21 Jul 2015 02:57:05 AM JST
point.
* Tue 21 Jul 2015 02:57:08 AM JST
point.
* Tue 21 Jul 2015 02:58:28 AM JST
point
* Tue 21 Jul 2015 02:58:34 AM JST
point
* Tue 21 Jul 2015 02:58:40 AM JST
size
* Tue 21 Jul 2015 02:58:45 AM JST
size
* Tue 21 Jul 2015 03:01:59 AM JST
point
* Tue 21 Jul 2015 03:02:45 AM JST
Rectangle
* Tue 21 Jul 2015 03:04:40 AM JST
bounds
* Tue 21 Jul 2015 03:06:02 AM JST
expects
* Tue 21 Jul 2015 03:06:21 AM JST
self._process_events()
* Tue 21 Jul 2015 03:06:24 AM JST
        sleep(0.2)
        self._process_events()

* Tue 21 Jul 2015 03:06:27 AM JST
point = self.window.get_bounds().get_location()
* Tue 21 Jul 2015 03:06:36 AM JST
self.assertNotEqual([expectx, expecty], [point.get_x(), point.get_y()])
* Tue 21 Jul 2015 03:07:16 AM JST
        expectx, expecty = 150, 150
        point = self.window.get_bounds().get_location()
        self.assertNotEqual([expectx, expecty], [point.get_x(), point.get_y()])
        self.window.move(expectx, expecty)
        sleep(0.2)
        self._process_events()
        point2 = self.window.get_bounds().get_location()
        self.assertEqual([expectx, expecty], [point2.get_x(), point2.get_y()])

* Tue 21 Jul 2015 03:07:41 AM JST
point
* Tue 21 Jul 2015 03:08:23 AM JST
point
* Tue 21 Jul 2015 03:08:25 AM JST
point
* Tue 21 Jul 2015 03:08:46 AM JST
move
* Tue 21 Jul 2015 03:08:59 AM JST
size = self.window.get_bounds().get_size()
* Tue 21 Jul 2015 03:09:11 AM JST
        self.assertNotEqual(
            [expectw, expecth], [size.get_width(), size.get_height()])

* Tue 21 Jul 2015 03:13:51 AM JST
assert
* Tue 21 Jul 2015 03:13:51 AM JST
self.assert
* Tue 21 Jul 2015 03:21:54 AM JST
def window2(display):
    return simple_teswindow(display, 250, 250, 500, 500, 'window2')

* Tue 21 Jul 2015 03:25:05 AM JST
self.
* Tue 21 Jul 2015 03:26:27 AM JST
sl
* Tue 21 Jul 2015 03:26:47 AM JST
        sleep(0.2)
        self.assertTrue(self.window.is_maximized())

* Tue 21 Jul 2015 03:26:51 AM JST
is_maximized
* Tue 21 Jul 2015 03:28:44 AM JST
self.window.is_always_on_top()
* Tue 21 Jul 2015 03:30:51 AM JST
        self.assertFalse(self.window.is_always_on_top())
        self.window.set_always_on_top()
        sleep(0.2)
        self.assertTrue(self.window.is_always_on_top())

* Tue 21 Jul 2015 03:35:52 AM JST
        self.assertFalse(self.window.is_always_on_bottom())
        self.window.set_always_on_bottom()
        sleep(0.2)
        self.assertTrue(self.window.is_always_on_bottom())

* Tue 21 Jul 2015 03:35:57 AM JST
is_always_on_bottom
* Tue 21 Jul 2015 03:37:18 AM JST
        self.assertFalse(self.window.set_fullscreen())
        self.window.set_always_on_bottom()
        sleep(0.2)
        self.assertTrue(self.window.is_fullscreened())

* Tue 21 Jul 2015 03:40:48 AM JST
WindowListenerFactory(get_display()).list_windows()
* Tue 21 Jul 2015 03:43:54 AM JST
self.assertNotIn(self.window.get_id(), windows)
* Tue 21 Jul 2015 03:44:01 AM JST
windows = WindowListenerFactory(self.display).list_windows()
* Tue 21 Jul 2015 03:49:36 AM JST
self._process_events()
* Tue 21 Jul 2015 03:51:53 AM JST
        windows = WindowListenerFactory(self.display).list_windows()
        self.assertIn(self.window.get_id(), windows)
        self.window.close()
        sleep(0.2)
        self._process_events()
        windows = WindowListenerFactory(self.display).list_windows()
        self.assertNotIn(self.window.get_id(), windows)

* Tue 21 Jul 2015 03:51:58 AM JST
close
* Tue 21 Jul 2015 03:54:26 AM JST
        windows = WindowListenerFactory(self.display).list_windows()
        self.assertIn(self.window.get_id(), windows)
        self.window.delete()
        sleep(0.2)
        self._process_events()
        windows = WindowListenerFactory(self.display).list_windows()
        self.assertNotIn(self.window.get_id(), windows)

* Tue 21 Jul 2015 03:54:33 AM JST
delete
* Tue 21 Jul 2015 03:55:12 AM JST

* Tue 21 Jul 2015 03:55:12 AM JST

* Tue 21 Jul 2015 03:55:12 AM JST
        try:

* Tue 21 Jul 2015 03:59:37 AM JST
    def get_cursor_point(self, ):
        r"""SUMMARY

        get_cursor_point()

        @Return:

        @Error:
        """
        return self.window.get_cursor_point()


* Tue 21 Jul 2015 04:07:15 AM JST
    def test_get_cursor_point(self, ):
        self.skipTest('Not Implemented')
        

* Tue 21 Jul 2015 04:23:17 AM JST
expectx, expecty
* Tue 21 Jul 2015 04:23:45 AM JST
assert
* Tue 21 Jul 2015 04:23:45 AM JST
self.assert
* Tue 21 Jul 2015 04:24:33 AM JST
sleep(0.2)
* Tue 21 Jul 2015 04:30:35 AM JST
from lab.xahk.wm.window_manager import _WindowManager
* Tue 21 Jul 2015 04:30:42 AM JST
wm=_WindowManager(c)
* Tue 21 Jul 2015 04:30:46 AM JST
wm.list_windows()
* Tue 21 Jul 2015 04:31:19 AM JST
from lab.xahk.wm.window_manager import _WindowManager
wm=_WindowManager(c)
wm.list_windows()

* Tue 21 Jul 2015 04:31:25 AM JST
wm.list_windows()
* Tue 21 Jul 2015 04:31:51 AM JST
wm.list_windows()
* Tue 21 Jul 2015 04:35:42 AM JST
wm.
* Tue 21 Jul 2015 04:35:56 AM JST
from lab.xahk.window_manager import WindowManager
wm=_WindowManager(c)
wm.list_windows()

* Tue 21 Jul 2015 04:36:05 AM JST
wm=WindowManager(c)
* Tue 21 Jul 2015 04:36:16 AM JST
wm.list_windows()
* Tue 21 Jul 2015 04:36:35 AM JST
from lab.xahk.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Tue 21 Jul 2015 04:36:42 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
* Tue 21 Jul 2015 04:36:49 AM JST
wm=WindowManager(c)
wm.list_windows()

* Tue 21 Jul 2015 04:36:58 AM JST
wm.list_windows()
* Tue 21 Jul 2015 04:39:48 AM JST

* Tue 21 Jul 2015 04:39:48 AM JST

* Tue 21 Jul 2015 04:39:48 AM JST
        # TODO: (Atami) [2015/07/21]

* Tue 21 Jul 2015 04:40:27 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Tue 21 Jul 2015 04:40:31 AM JST
wm.list_windows()
* Tue 21 Jul 2015 04:40:44 AM JST

* Tue 21 Jul 2015 04:40:44 AM JST

* Tue 21 Jul 2015 04:40:44 AM JST
        # TODO: (Atami) [2015/07/21]

* Tue 21 Jul 2015 04:42:26 AM JST
Intern
* Tue 21 Jul 2015 04:42:49 AM JST
buf()
* Tue 21 Jul 2015 04:42:50 AM JST
valu
* Tue 21 Jul 2015 04:42:53 AM JST
str
* Tue 21 Jul 2015 04:43:50 AM JST
'_WIN_WORKSPACE_COUNT'
* Tue 21 Jul 2015 04:45:02 AM JST
'_WIN_WORKSPACE_COUNT'
* Tue 21 Jul 2015 04:45:58 AM JST
_WIN_WORKSPACE_COUNT
* Tue 21 Jul 2015 04:48:35 AM JST
'_WIN_WORKSPACE_COUNT'
* Tue 21 Jul 2015 04:52:50 AM JST
392
* Tue 21 Jul 2015 04:52:56 AM JST
'_WIN_WORKSPACE'
* Tue 21 Jul 2015 04:55:16 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Tue 21 Jul 2015 04:55:27 AM JST
wm.list_windows()
* Tue 21 Jul 2015 04:58:35 AM JST
67108867
* Tue 21 Jul 2015 04:59:51 AM JST
_NET_WM_DESKTOP
* Tue 21 Jul 2015 05:01:48 AM JST
num
* Tue 21 Jul 2015 05:02:19 AM JST
wm.list_windows()[-1].change_workspace(2)
* Tue 21 Jul 2015 05:02:36 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Tue 21 Jul 2015 05:02:40 AM JST
wm.list_windows()
* Tue 21 Jul 2015 05:06:55 AM JST
str(c.core.GetAtomName(400).reply().name.buf())
* Tue 21 Jul 2015 05:07:06 AM JST
_WIN_CLIENT_LIST
* Tue 21 Jul 2015 05:15:53 AM JST
self.window.get_bounds()
* Tue 21 Jul 2015 05:21:20 AM JST
        return self._send_client_message(
            EventMask.SubstructureRedirect|EventMask.SubstructureNotify,
            self._atom_cache.get_atom('WM_CHANGE_STATE'),
            [ChangingWindowState.ICONIC_STATE, 0, 0, 0, 0])

* Tue 21 Jul 2015 05:21:55 AM JST
SubstructureNotifyMask | SubstructureRedirectMask
* Tue 21 Jul 2015 05:22:02 AM JST

* Tue 21 Jul 2015 05:22:02 AM JST

* Tue 21 Jul 2015 05:22:02 AM JST
        SubstructureNotifyMask | SubstructureRedirectMask

* Tue 21 Jul 2015 05:22:19 AM JST
'_NET_WM_DESKTOP'
* Tue 21 Jul 2015 05:23:23 AM JST
            
* Tue 21 Jul 2015 05:23:43 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Tue 21 Jul 2015 05:23:49 AM JST
wm.list_windows()
* Tue 21 Jul 2015 05:36:33 AM JST
~/.pylib/lab/xahk/wm/
* Tue 21 Jul 2015 05:41:36 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Tue 21 Jul 2015 05:41:39 AM JST
wm.list_windows()
* Tue 21 Jul 2015 05:42:05 AM JST

* Tue 21 Jul 2015 05:42:05 AM JST

* Tue 21 Jul 2015 05:42:05 AM JST
        # TODO: (Atami) [2015/07/21]

* Tue 21 Jul 2015 08:28:59 AM JST
TEST_ATOM
* Tue 21 Jul 2015 08:29:01 AM JST
pass
* Tue 21 Jul 2015 08:30:56 AM JST
pass
* Tue 21 Jul 2015 08:33:09 AM JST

* Tue 21 Jul 2015 08:33:09 AM JST

* Tue 21 Jul 2015 08:33:09 AM JST
        self.skipTest('Not Implemented')

* Tue 21 Jul 2015 08:33:35 AM JST

* Tue 21 Jul 2015 08:33:35 AM JST

* Tue 21 Jul 2015 08:33:35 AM JST
        self.assert

* Tue 21 Jul 2015 08:37:07 AM JST
self.display.core.InternAtom('_NET_WM_NAME').reply().atom
* Tue 21 Jul 2015 08:37:52 AM JST
False
* Tue 21 Jul 2015 08:38:27 AM JST
wm_name
* Tue 21 Jul 2015 08:38:47 AM JST
name
* Tue 21 Jul 2015 08:39:33 AM JST
self
* Tue 21 Jul 2015 08:40:59 AM JST
        atom = self.display.core.InternAtom(
            True, len(wm_name), wm_name).reply().atom

* Tue 21 Jul 2015 08:41:15 AM JST
wm_name
* Tue 21 Jul 2015 08:41:17 AM JST
wm_name
* Tue 21 Jul 2015 08:42:22 AM JST
        wm_name = '_NET_WM_NAME'
        self.assertIn(wm_name, self.cache._cached_atoms)
        atom = self.display.core.InternAtom(
            True, len(wm_name), wm_name).reply().atom
        self.assertEqual(atom, self.cache._cached_atoms[wm_name])
        self.assertEqual(atom, self.cache.get_atom(wm_name))

* Tue 21 Jul 2015 08:42:28 AM JST

* Tue 21 Jul 2015 08:42:28 AM JST

* Tue 21 Jul 2015 08:42:28 AM JST
        self.assertIn(wm_name, self.cache._cached_atoms)

* Tue 21 Jul 2015 08:42:31 AM JST

* Tue 21 Jul 2015 08:42:31 AM JST

* Tue 21 Jul 2015 08:42:31 AM JST
        self.assertEqual(atom, self.cache._cached_atoms[wm_name])

* Tue 21 Jul 2015 08:55:38 AM JST
LOG
* Tue 21 Jul 2015 08:56:18 AM JST

* Tue 21 Jul 2015 08:56:18 AM JST

* Tue 21 Jul 2015 08:56:18 AM JST
            print(err)

* Tue 21 Jul 2015 08:56:42 AM JST
except
* Tue 21 Jul 2015 08:57:33 AM JST

* Tue 21 Jul 2015 08:57:33 AM JST

* Tue 21 Jul 2015 08:57:33 AM JST
            print('DEBUG-1-cursor_listener.py')

* Tue 21 Jul 2015 08:57:36 AM JST

* Tue 21 Jul 2015 08:57:36 AM JST

* Tue 21 Jul 2015 08:57:36 AM JST
            print(err)

* Tue 21 Jul 2015 08:58:00 AM JST
la
* Tue 21 Jul 2015 08:58:00 AM JST
form la
* Tue 21 Jul 2015 08:58:26 AM JST

* Tue 21 Jul 2015 08:58:26 AM JST

* Tue 21 Jul 2015 08:58:26 AM JST
            print('DEBUG-1-window_listener_factory.py')

* Tue 21 Jul 2015 08:58:27 AM JST

* Tue 21 Jul 2015 08:58:27 AM JST

* Tue 21 Jul 2015 08:58:27 AM JST
            print(err)

* Tue 21 Jul 2015 08:59:13 AM JST

* Tue 21 Jul 2015 08:59:13 AM JST

* Tue 21 Jul 2015 08:59:13 AM JST
            print('DEBUG-1-window_client.py')

* Tue 21 Jul 2015 08:59:27 AM JST

* Tue 21 Jul 2015 08:59:27 AM JST

* Tue 21 Jul 2015 08:59:27 AM JST
            print(prop)

* Tue 21 Jul 2015 08:59:30 AM JST
            from lab.xahk.logger import LOG
            LOG.error('window_client.py: {}, {}'.format(err, prop))

* Tue 21 Jul 2015 08:59:43 AM JST
prop
* Tue 21 Jul 2015 08:59:47 AM JST

* Tue 21 Jul 2015 08:59:47 AM JST

* Tue 21 Jul 2015 08:59:47 AM JST
            print(err)

* Tue 21 Jul 2015 08:59:49 AM JST
            from lab.xahk.logger import LOG
            LOG.error('window_client.py: {}'.format(err))

* Tue 21 Jul 2015 09:08:56 AM JST
pass
* Tue 21 Jul 2015 09:09:39 AM JST
pass
* Tue 21 Jul 2015 09:10:18 AM JST
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 0, 0).check()

* Tue 21 Jul 2015 09:10:25 AM JST
        pointer = self.display.core.QueryPointer(self.root).reply()
* Tue 21 Jul 2015 09:10:52 AM JST
self.assertEqual((0, 0), (pointer.root_x, pointer.root_y))
* Tue 21 Jul 2015 09:11:01 AM JST
expectx, expecty = 10, 100
* Tue 21 Jul 2015 09:11:05 AM JST
self.cursor.move_cursor_to(expectx, expecty)
* Tue 21 Jul 2015 09:11:17 AM JST
pointer2 = self.display.core.QueryPointer(self.root).reply()
* Tue 21 Jul 2015 09:11:25 AM JST
self.assertEqual((expectx, expecty), (pointer2.root_x, pointer2.root_y))
* Tue 21 Jul 2015 09:12:17 AM JST
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 0, 0).check()

* Tue 21 Jul 2015 09:13:11 AM JST
WarpPointer
* Tue 21 Jul 2015 09:13:23 AM JST
expectx
* Tue 21 Jul 2015 09:13:25 AM JST
expecty
* Tue 21 Jul 2015 09:13:27 AM JST
0
* Tue 21 Jul 2015 09:13:31 AM JST
0
* Tue 21 Jul 2015 09:16:42 AM JST
        cls.display = get_display()
        cls.root = cls.display.get_setup().roots[0].root

* Tue 21 Jul 2015 09:16:49 AM JST
self.cursor = CursorHandler(self.display)
* Tue 21 Jul 2015 09:19:44 AM JST
    """2015/07/19
    +----------------------------------------------------+
    | Window 1                                           |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                           X                        |
    |                         Cursor                     |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    +----------------------------------------------------+

                             ||
                             \/

    +----------------------------------------------------+
    | Window 1                                           |
    |                                                    |
    |                                                    |
    |           +----------------------------+           |
    |           | Window 2                   |           |
    |           |                            |           |
    |           |                            |           |
    |           |                            |           |
    |           |                            |           |
    |           |               X            |           |
    |           |             Cursor         |           |
    |           |                            |           |
    |           |                            |           |
    |           |                            |           |
    |           |                            |           |
    |           +----------------------------+           |
    |                                                    |
    |                                                    |
    |                                                    |
    +----------------------------------------------------+
    """

* Tue 21 Jul 2015 09:20:05 AM JST

                             ||
                             \/

    +----------------------------------------------------+
    | Window 1                                           |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                           X                        |
    |                         Cursor                     |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    |                                                    |
    +----------------------------------------------------+

* Tue 21 Jul 2015 09:20:44 AM JST
def simple_teswindow(display, x, y, width, height, title=''):
    r"""SUMMARY
    simple_teswindow(c, 100,100,1000,1000)
    simple_teswindow()

    @Return:
    """
    # setup = display.get_setup()
    # root = setup.roots[0].root
    depth = stup.roots[0].root_depth
    visual = stup.roots[0].root_visual
    white = stup.roots[0].white_pixel

    window = display.generate_id()

    display.core.CreateWindow(depth, window, root,
                              0, 0, width, height, 0,
                              xproto.WindowClass.InputOutput,
                              visual,
                              xproto.CW.BackPixel, [white])
    display.core.MapWindow(window)
    display.flush()
    client = WindowClient.from_id(display, window)
    client.set_title(title)
    client.set_bounds(Rectangle(x, y, width, height))
    return client

* Tue 21 Jul 2015 09:22:17 AM JST
def window1(display):
    return simple_teswindow(display, 0, 0, 1000, 1000, 'window1')

def window2(display):
    return simple_teswindow(display, 250, 250, 500, 500, 'window2')

* Tue 21 Jul 2015 09:23:13 AM JST
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 500, 500).check() # enter in window2

* Tue 21 Jul 2015 09:23:22 AM JST
 # enter in window2
* Tue 21 Jul 2015 09:24:22 AM JST
pass
* Tue 21 Jul 2015 09:24:33 AM JST
close
* Tue 21 Jul 2015 09:24:54 AM JST
window
* Tue 21 Jul 2015 09:24:54 AM JST
self.window
* Tue 21 Jul 2015 09:25:46 AM JST
def window3(display):
    return simple_teswindow(display, 500, 500, 350, 350, 'window3')

* Tue 21 Jul 2015 09:26:04 AM JST
sleep(0.2)
* Tue 21 Jul 2015 09:26:06 AM JST
self.assertEqual(self.window1, self.cursor.get_under_window())
* Tue 21 Jul 2015 09:26:58 AM JST

* Tue 21 Jul 2015 09:26:58 AM JST

* Tue 21 Jul 2015 09:26:58 AM JST
        return None

* Tue 21 Jul 2015 10:00:35 AM JST
os.environ.get('DISPLAY', '')
* Tue 21 Jul 2015 10:06:20 AM JST
display
* Tue 21 Jul 2015 10:09:32 AM JST
name
* Tue 21 Jul 2015 10:10:51 AM JST
self._display_name
* Tue 21 Jul 2015 10:15:12 AM JST
# class DisplayMultitonMeta(type):
#     r"""DisplayMultitonMeta

#     DisplayMultitonMeta is a type.
#     Responsibility:
#     """
#     _instances = {}

#     def __call__(cls, display, *args, **kwargs):
#         if display not in cls._instances:
#             cls._instances[display] = super(
#                 DisplayMultitonMeta, cls).__call__(display, *args, **kwargs)
#         return cls._instances[display]

* Tue 21 Jul 2015 10:15:23 AM JST
DisplayMultitonMeta
* Tue 21 Jul 2015 10:16:09 AM JST
dispname = name or os.environ.get('DISPLAY', '')
* Tue 21 Jul 2015 10:16:18 AM JST
name
* Tue 21 Jul 2015 10:17:16 AM JST
from lab.xahk.wm.display import Display
d=Display(':0.0')

* Tue 21 Jul 2015 10:17:38 AM JST
d=Display(':0.0')
* Tue 21 Jul 2015 10:18:23 AM JST
d=Display(':0.0')

* Tue 21 Jul 2015 10:18:32 AM JST
d2=Display(':0.0')
* Tue 21 Jul 2015 10:18:36 AM JST
d3=Display('')
* Tue 21 Jul 2015 10:18:40 AM JST
d4=Display()
* Tue 21 Jul 2015 10:20:32 AM JST
from lab.xahk.wm.display import Display
d=Display(':0.0')

* Tue 21 Jul 2015 10:20:36 AM JST
    d2=Display(':0.0')
    d3=Display('')
    d4=Display()

* Tue 21 Jul 2015 10:22:06 AM JST
from lab.xahk.wm.display import Display
d=Display(':0.0')

* Tue 21 Jul 2015 10:22:12 AM JST
    d2=Display(':0.0')
    d3=Display('')
    d4=Display()

* Tue 21 Jul 2015 10:23:04 AM JST
DisplayMultitonMeta
* Tue 21 Jul 2015 10:24:10 AM JST
Disp
* Tue 21 Jul 2015 10:25:13 AM JST
from lab.xahk.wm.display import Display
d=Display(':0.0')
    d2=Display(':0.0')
    d3=Display('')
    d4=Display()

* Tue 21 Jul 2015 10:26:32 AM JST
object
* Tue 21 Jul 2015 10:27:13 AM JST
dispname = display or os.environ.get('DISPLAY', '')
* Tue 21 Jul 2015 10:27:26 AM JST
        if dispname not in cls._instances:
            cls._instances[dispname] = super(
                DisplayMultitonMeta, cls).__call__(dispname, *args, **kwargs)
        return cls._instances[dispname]

* Tue 21 Jul 2015 10:27:55 AM JST
DisplayMultitonMeta
* Tue 21 Jul 2015 10:28:31 AM JST
DisplayMultitonMeta
* Tue 21 Jul 2015 10:29:00 AM JST
from lab.xahk.wm.display import Display
d=Display(':0.0')
    d2=Display(':0.0')
    d3=Display('')
    d4=Display()

* Tue 21 Jul 2015 10:31:58 AM JST
type
* Tue 21 Jul 2015 10:32:23 AM JST
4dict
* Tue 21 Jul 2015 10:37:45 AM JST
class multiton_display(object):
    r"""multiton_display

    multiton_display is a object.
    Responsibility:
    """
    __instances = {}

    def __call__(self, cls):
        def getinstance(display, *args, **kwargs):
            if cls not in multiton_display.__instances:
                multiton_display.__instances[cls] = {}
            if display not in multiton_display.__instances[cls]:
                multiton_display.__instances[cls][display] = cls(
                    display, *args, **kwargs)
            return multiton_display.__instances[cls][display]
        return getinstance

    @staticmethod
    def instances():
        r"""SUMMARY

        instances()

        @Return:

        @Error:
        """
        return multiton_display.__instances

    @staticmethod
    def get_instances(klass):
        r"""SUMMARY

        get_instances(cls)

        @Arguments:
        - `cls`:

        @Return:

        @Error:
        """
        return multiton_display.instances().get(klass, None)

* Tue 21 Jul 2015 10:38:22 AM JST
multiton_
* Tue 21 Jul 2015 10:39:09 AM JST
disp
* Tue 21 Jul 2015 10:39:31 AM JST
dispname = display_name or os.environ.get('DISPLAY', '')
* Tue 21 Jul 2015 10:39:47 AM JST
multiton_
* Tue 21 Jul 2015 10:39:56 AM JST
multiton_
* Tue 21 Jul 2015 10:40:13 AM JST
multiton_
* Tue 21 Jul 2015 10:40:28 AM JST
multiton_
* Tue 21 Jul 2015 10:40:37 AM JST
multiton_
* Tue 21 Jul 2015 10:42:07 AM JST

* Tue 21 Jul 2015 10:42:07 AM JST

* Tue 21 Jul 2015 10:42:07 AM JST
from xcb.xproto import EventMask, CW

* Tue 21 Jul 2015 10:42:58 AM JST
display_name
* Tue 21 Jul 2015 10:43:33 AM JST
Display
* Tue 21 Jul 2015 10:43:41 AM JST
_instances
* Tue 21 Jul 2015 10:43:49 AM JST
del 
* Tue 21 Jul 2015 10:44:15 AM JST
from lab.xahk.wm.display import Display
d=Display(':0.0')
    d2=Display(':0.0')
    d3=Display('')
    d4=Display()

* Tue 21 Jul 2015 10:44:39 AM JST
from lab.xahk.wm.display import Display
* Tue 21 Jul 2015 10:46:04 AM JST
from lab.xahk.wm.display import Display
d=Display(':0.0')
    d2=Display(':0.0')
    d3=Display('')
    d4=Display()

* Tue 21 Jul 2015 10:46:16 AM JST
from lab.xahk.wm.display import display_multiton
display_multiton.instances()

* Tue 21 Jul 2015 10:46:34 AM JST
from lab.xahk.wm.display import Display
from lab.xahk.wm.display import display_multiton
d=Display(':0.0')
d2=Display(':0.0')
d3=Display('')
d4=Display()

* Tue 21 Jul 2015 10:46:40 AM JST
del d4
* Tue 21 Jul 2015 10:46:43 AM JST
display_multiton.instances()
* Tue 21 Jul 2015 10:51:09 AM JST
from lab.xahk.wm.display import Display
from lab.xahk.wm.display import display_multiton
d=Display(':0.0')
d2=Display(':0.0')
d3=Display('')
d4=Display()

* Tue 21 Jul 2015 10:51:21 AM JST
del d4
* Tue 21 Jul 2015 10:52:07 AM JST
from lab.xahk.wm.display import Display
from lab.xahk.wm.display import display_multiton
d=Display(':0.0')
d2=Display(':0.0')
d3=Display('')
d4=Display()

* Tue 21 Jul 2015 10:52:29 AM JST
display_multiton.instances()
* Tue 21 Jul 2015 10:52:40 AM JST

* Tue 21 Jul 2015 10:52:40 AM JST

* Tue 21 Jul 2015 10:52:40 AM JST
        print(display_multiton.__instances)

* Tue 21 Jul 2015 10:57:06 AM JST
    def __str__(self):
        return self._display


* Tue 21 Jul 2015 10:57:18 AM JST
display_name
* Tue 21 Jul 2015 10:57:27 AM JST
def
* Tue 21 Jul 2015 11:03:21 AM JST
from lab.xahk.wm.display import Display
from lab.xahk.wm.display import display_multiton
d=Display(':0.0')
d2=Display(':0.0')
d3=Display('')
d4=Display()

* Tue 21 Jul 2015 11:04:26 AM JST
display_multiton.instances()
* Tue 21 Jul 2015 11:04:40 AM JST
d=Display(':0.0')
d2=Display(':0.0')
d3=Display('')
d4=Display()

* Tue 21 Jul 2015 11:06:11 AM JST
get_display
* Tue 21 Jul 2015 11:08:01 AM JST
get_display
* Tue 21 Jul 2015 11:08:05 AM JST
get_display
* Tue 21 Jul 2015 11:08:20 AM JST
get_display
* Tue 21 Jul 2015 11:08:27 AM JST
get_display
* Tue 21 Jul 2015 11:08:34 AM JST
get_display
* Tue 21 Jul 2015 11:08:39 AM JST
get_display
* Tue 21 Jul 2015 11:12:01 AM JST
get_display
* Tue 21 Jul 2015 11:12:41 AM JST
get_display
* Tue 21 Jul 2015 11:12:46 AM JST
get_display
* Tue 21 Jul 2015 11:13:54 AM JST
get_display
* Tue 21 Jul 2015 11:14:15 AM JST
get_display
* Tue 21 Jul 2015 11:14:19 AM JST
get_display
* Tue 21 Jul 2015 11:15:23 AM JST
get_display
* Tue 21 Jul 2015 11:15:58 AM JST
get_display
* Tue 21 Jul 2015 11:16:01 AM JST
get_display
* Tue 21 Jul 2015 11:16:04 AM JST
get_display
* Tue 21 Jul 2015 11:16:08 AM JST
get_display
* Tue 21 Jul 2015 11:16:13 AM JST
get_display
* Tue 21 Jul 2015 11:16:16 AM JST
get_display
* Tue 21 Jul 2015 11:16:19 AM JST
get_display
* Tue 21 Jul 2015 11:16:23 AM JST
get_display
* Tue 21 Jul 2015 11:16:26 AM JST
get_display
* Tue 21 Jul 2015 11:16:29 AM JST
get_display
* Tue 21 Jul 2015 11:16:32 AM JST
get_display
* Tue 21 Jul 2015 11:16:37 AM JST
get_display
* Tue 21 Jul 2015 11:28:17 AM JST
la
* Tue 21 Jul 2015 11:28:17 AM JST
form la
* Tue 21 Jul 2015 11:28:27 AM JST
LOG
* Tue 21 Jul 2015 11:29:52 AM JST
            from lab.xahk.logger import LOG
            import os
            LOG.error('cursor_listener.py: {}'.format(err))
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 1000 -l 100 -r 2 -d 0.5')
            os.system('rmmod pcspkr')

* Tue 21 Jul 2015 11:30:03 AM JST

* Tue 21 Jul 2015 11:30:03 AM JST

* Tue 21 Jul 2015 11:30:03 AM JST
from lab.xahk.logger import LOG

* Tue 21 Jul 2015 11:30:13 AM JST

* Tue 21 Jul 2015 11:30:13 AM JST

* Tue 21 Jul 2015 11:30:14 AM JST
                LOG.error('cursor_listener.py: {}'.format(err))

* Tue 21 Jul 2015 11:30:17 AM JST
            try:
                cookie.check()
            except BadWindow as err:
                from lab.xahk.logger import LOG
                LOG.error('key_listener_x11.py: {}'.format(err))
                import os
                os.system('modprobe pcspkr')
                os.system('/usr/bin/beep -f 1000 -l 100 -r 2 -d 0.5')
                os.system('rmmod pcspkr')

* Tue 21 Jul 2015 05:58:55 PM JST
from lab.xahk.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Tue 21 Jul 2015 05:59:38 PM JST
xfce4-terminal
* Tue 21 Jul 2015 06:00:53 PM JST
ModifierMask.Control
* Tue 21 Jul 2015 06:01:21 PM JST
ModifierMask.Control
* Tue 21 Jul 2015 06:01:47 PM JST
ModifierMask.Shift
* Tue 21 Jul 2015 06:07:24 PM JST
history-beginning-search-backward-end
* Tue 21 Jul 2015 06:23:03 PM JST
xfce4_terminal
* Tue 21 Jul 2015 06:23:07 PM JST

* Tue 21 Jul 2015 06:23:49 PM JST
entry_candidate(
* Tue 21 Jul 2015 06:56:57 PM JST
str(c.core.GetAtomName(393).reply().name.buf())
* Tue 21 Jul 2015 06:57:16 PM JST
'_NET_WM_ICON'
* Tue 21 Jul 2015 06:58:08 PM JST
'WM_HINTS'
* Tue 21 Jul 2015 09:55:33 PM JST
Error in timer: (search-failed "^*Rescan*$")
* Tue 21 Jul 2015 09:57:12 PM JST
^*Rescan*$
* Tue 21 Jul 2015 09:58:01 PM JST
Rescan
* Tue 21 Jul 2015 09:58:39 PM JST
search-failed
* Tue 21 Jul 2015 09:59:41 PM JST
Error in timer
* Tue 21 Jul 2015 11:08:58 PM JST
_NET_SUPPORTED
* Tue 21 Jul 2015 11:09:34 PM JST
from lab.xahk.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Tue 21 Jul 2015 11:09:42 PM JST
54525974
* Tue 21 Jul 2015 11:10:23 PM JST
'_NET_SUPPORTED'
* Tue 21 Jul 2015 11:11:34 PM JST
value
* Tue 21 Jul 2015 11:11:57 PM JST
54525974
* Tue 21 Jul 2015 11:12:13 PM JST
54525974
* Tue 21 Jul 2015 11:26:21 PM JST
;; Local Variables:
;; coding: utf-8-emacs
;; backup-inhibited: t
;; version-control: 'never
;; End:

* Tue 21 Jul 2015 11:26:46 PM JST
-inhibited
* Tue 21 Jul 2015 11:32:16 PM JST
FLAGS
* Tue 21 Jul 2015 11:33:11 PM JST

* Tue 21 Jul 2015 11:33:11 PM JST

* Tue 21 Jul 2015 11:33:11 PM JST
    (org-do-log)

* Tue 21 Jul 2015 11:34:01 PM JST
inhibit-read-only
* Tue 21 Jul 2015 11:35:38 PM JST

* Tue 21 Jul 2015 11:35:38 PM JST

* Tue 21 Jul 2015 11:35:38 PM JST


* Tue 21 Jul 2015 11:39:48 PM JST
org-doing-file
* Tue 21 Jul 2015 11:44:14 PM JST

* Tue 21 Jul 2015 11:44:14 PM JST

* Tue 21 Jul 2015 11:44:14 PM JST
(load )

* Tue 21 Jul 2015 11:48:48 PM JST
Autoloading failed to define function
* Wed 22 Jul 2015 12:28:20 AM JST
beep -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 190 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 190 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 475 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 473 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 332 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 332 -n -f 130 -l 20 -D 0 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 332 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 189 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 189 -n -f 184 -l 20 -D 0 -n -f 277 -l 20 -D 0 -n -f 466 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 190 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 95 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 95 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 95 -n -f 349 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 880 -l 20 -D 190 -n -f 293 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 189 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 220 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 246 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 332 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 332 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 332 -n -f 130 -l 20 -D 0 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 332 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 189 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 189 -n -f 184 -l 20 -D 0 -n -f 277 -l 20 -D 0 -n -f 466 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 190 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 95 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 95 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 95 -n -f 349 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 880 -l 20 -D 190 -n -f 293 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 189 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 220 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 246 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 332 -n -f 130 -l 95 -D 190 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 622 -l 20 -D 0 -n -f 739 -l 20 -D 47 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 130 -l 95 -D 190 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 47 -n -f 164 -l 20 -D 0 -n -f 622 -l 20 -D 0 -n -f 739 -l 20 -D 47 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -D 47 -n -f 195 -l 95 -D 47 -n -f 261 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 698 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 1046 -l 20 -D 189 -n -f 698 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 1046 -l 20 -D 47 -n -f 698 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 1046 -l 20 -D 190 -n -f 195 -l 95 -D 190 -n -f 130 -l 95 -D 190 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 622 -l 20 -D 0 -n -f 739 -l 20 -D 47 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 130 -l 95 -D 190 -n -f 207 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 622 -l 20 -D 332 -n -f 233 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 332 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 332 -n -f 195 -l 94 -D 47 -n -f 195 -l 95 -D 190 -n -f 130 -l 95 -D 190 -n -f 130 -l 95 -D 190 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 622 -l 20 -D 0 -n -f 739 -l 20 -D 47 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 130 -l 95 -D 190 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 47 -n -f 164 -l 20 -D 0 -n -f 622 -l 20 -D 0 -n -f 739 -l 20 -D 47 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -D 47 -n -f 195 -l 95 -D 47 -n -f 261 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 698 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 1046 -l 20 -D 189 -n -f 698 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 1046 -l 20 -D 47 -n -f 698 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 1046 -l 20 -D 190 -n -f 195 -l 95 -D 190 -n -f 130 -l 95 -D 190 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 622 -l 20 -D 0 -n -f 739 -l 20 -D 47 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 130 -l 95 -D 190 -n -f 207 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 622 -l 20 -D 332 -n -f 233 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 332 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 332 -n -f 195 -l 94 -D 47 -n -f 195 -l 95 -D 190 -n -f 130 -l 95 -D 190 -n -f 103 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 189 -n -f 155 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 207 -l 20 -D 0 -n -f 466 -l 20 -D 0 -n -f 587 -l 20 -D 190 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 130 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 189 -n -f 97 -l 95 -D 189 -n -f 103 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 189 -n -f 155 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 207 -l 20 -D 0 -n -f 466 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 195 -l 95 -D 333 -n -f 130 -l 95 -D 332 -n -f 97 -l 95 -D 189 -n -f 103 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 189 -n -f 155 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 207 -l 20 -D 0 -n -f 466 -l 20 -D 0 -n -f 587 -l 20 -D 190 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 130 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 189 -n -f 97 -l 95 -D 189 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 190 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 190 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 475 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 473 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 332 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 332 -n -f 130 -l 20 -D 0 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 332 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 189 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 189 -n -f 184 -l 20 -D 0 -n -f 277 -l 20 -D 0 -n -f 466 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 190 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 95 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 95 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 95 -n -f 349 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 880 -l 20 -D 190 -n -f 293 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 189 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 220 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 246 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 332 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 332 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 332 -n -f 130 -l 20 -D 0 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 332 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 189 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 189 -n -f 184 -l 20 -D 0 -n -f 277 -l 20 -D 0 -n -f 466 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 190 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 95 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 95 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 95 -n -f 349 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 880 -l 20 -D 190 -n -f 293 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 189 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 220 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 246 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 332 -n -f 130 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 184 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 195 -l 95 -D 190 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 190 -n -f 174 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 174 -l 95 -D 190 -n -f 146 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 95 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 95 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 0 -n -f 174 -l 15 -D 0 -n -f 698 -l 15 -D 0 -n -f 880 -l 15 -D 0 -n -f 174 -l 47 -D 47 -n -f 195 -l 20 -D 0 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 95 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 246 -l 95 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 95 -n -f 195 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 195 -l 95 -D 47 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 195 -l 95 -D 190 -n -f 130 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 184 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 195 -l 95 -D 190 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 190 -n -f 174 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 174 -l 95 -D 190 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 190 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 95 -n -f 220 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 95 -n -f 246 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 587 -l 20 -D 95 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 329 -l 95 -D 47 -n -f 195 -l 95 -D 47 -n -f 329 -l 95 -D 47 -n -f 130 -l 20 -D 0 -n -f 261 -l 20 -n -f 130 -l 20 -D 0 -n -f 261 -l 20 -D 475 -n -f 130 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 184 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 195 -l 95 -D 190 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 190 -n -f 174 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 174 -l 95 -D 190 -n -f 146 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 95 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 95 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 0 -n -f 174 -l 15 -D 0 -n -f 698 -l 15 -D 0 -n -f 880 -l 15 -D 0 -n -f 174 -l 47 -D 47 -n -f 195 -l 20 -D 0 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 95 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 246 -l 95 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 95 -n -f 195 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 195 -l 95 -D 47 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 195 -l 95 -D 190 -n -f 130 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 184 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 195 -l 95 -D 190 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 190 -n -f 174 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 174 -l 95 -D 190 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 190 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 95 -n -f 220 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 95 -n -f 246 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 587 -l 20 -D 95 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 329 -l 95 -D 47 -n -f 195 -l 95 -D 47 -n -f 329 -l 95 -D 47 -n -f 130 -l 20 -D 0 -n -f 261 -l 20 -n -f 130 -l 20 -D 0 -n -f 261 -l 20 -D 475 -n -f 103 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 189 -n -f 155 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 207 -l 20 -D 0 -n -f 466 -l 20 -D 0 -n -f 587 -l 20 -D 190 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 130 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 189 -n -f 97 -l 95 -D 189 -n -f 103 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 189 -n -f 155 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 207 -l 20 -D 0 -n -f 466 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 195 -l 95 -D 333 -n -f 130 -l 95 -D 332 -n -f 97 -l 95 -D 189 -n -f 103 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 189 -n -f 155 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 207 -l 20 -D 0 -n -f 466 -l 20 -D 0 -n -f 587 -l 20 -D 190 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 130 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 189 -n -f 97 -l 95 -D 189 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 190 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 190 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 475 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 473 -n -f 130 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 184 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 195 -l 95 -D 190 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 190 -n -f 174 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 174 -l 95 -D 190 -n -f 146 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 95 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 95 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 0 -n -f 174 -l 15 -D 0 -n -f 698 -l 15 -D 0 -n -f 880 -l 15 -D 0 -n -f 174 -l 47 -D 47 -n -f 195 -l 20 -D 0 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 95 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 246 -l 95 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 95 -n -f 195 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 195 -l 95 -D 47 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 195 -l 95 -D 190 -n -f 130 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 184 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 195 -l 95 -D 190 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 190 -n -f 174 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 174 -l 95 -D 190 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 190 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 95 -n -f 220 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 95 -n -f 246 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 587 -l 20 -D 95 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 329 -l 95 -D 47 -n -f 195 -l 95 -D 47 -n -f 329 -l 95 -D 47 -n -f 130 -l 20 -D 0 -n -f 261 -l 20 -n -f 130 -l 20 -D 0 -n -f 261 -l 20
* Wed 22 Jul 2015 12:28:32 AM JST
"""/usr/bin/beep -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 190 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 190 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 475 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 473 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 332 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 332 -n -f 130 -l 20 -D 0 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 332 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 189 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 189 -n -f 184 -l 20 -D 0 -n -f 277 -l 20 -D 0 -n -f 466 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 190 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 95 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 95 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 95 -n -f 349 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 880 -l 20 -D 190 -n -f 293 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 189 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 220 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 246 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 332 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 332 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 332 -n -f 130 -l 20 -D 0 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 332 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 189 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 189 -n -f 184 -l 20 -D 0 -n -f 277 -l 20 -D 0 -n -f 466 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 190 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 95 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 95 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 95 -n -f 349 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 880 -l 20 -D 190 -n -f 293 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 189 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 220 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 246 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 332 -n -f 130 -l 95 -D 190 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 622 -l 20 -D 0 -n -f 739 -l 20 -D 47 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 130 -l 95 -D 190 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 47 -n -f 164 -l 20 -D 0 -n -f 622 -l 20 -D 0 -n -f 739 -l 20 -D 47 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -D 47 -n -f 195 -l 95 -D 47 -n -f 261 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 698 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 1046 -l 20 -D 189 -n -f 698 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 1046 -l 20 -D 47 -n -f 698 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 1046 -l 20 -D 190 -n -f 195 -l 95 -D 190 -n -f 130 -l 95 -D 190 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 622 -l 20 -D 0 -n -f 739 -l 20 -D 47 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 130 -l 95 -D 190 -n -f 207 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 622 -l 20 -D 332 -n -f 233 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 332 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 332 -n -f 195 -l 94 -D 47 -n -f 195 -l 95 -D 190 -n -f 130 -l 95 -D 190 -n -f 130 -l 95 -D 190 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 622 -l 20 -D 0 -n -f 739 -l 20 -D 47 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 130 -l 95 -D 190 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 47 -n -f 164 -l 20 -D 0 -n -f 622 -l 20 -D 0 -n -f 739 -l 20 -D 47 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -D 47 -n -f 195 -l 95 -D 47 -n -f 261 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 698 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 1046 -l 20 -D 189 -n -f 698 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 1046 -l 20 -D 47 -n -f 698 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 1046 -l 20 -D 190 -n -f 195 -l 95 -D 190 -n -f 130 -l 95 -D 190 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 622 -l 20 -D 0 -n -f 739 -l 20 -D 47 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -n -f 493 -l 20 -D 0 -n -f 622 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 261 -l 95 -D 47 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 130 -l 95 -D 190 -n -f 207 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 622 -l 20 -D 332 -n -f 233 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 332 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 332 -n -f 195 -l 94 -D 47 -n -f 195 -l 95 -D 190 -n -f 130 -l 95 -D 190 -n -f 103 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 189 -n -f 155 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 207 -l 20 -D 0 -n -f 466 -l 20 -D 0 -n -f 587 -l 20 -D 190 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 130 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 189 -n -f 97 -l 95 -D 189 -n -f 103 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 189 -n -f 155 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 207 -l 20 -D 0 -n -f 466 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 195 -l 95 -D 333 -n -f 130 -l 95 -D 332 -n -f 97 -l 95 -D 189 -n -f 103 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 189 -n -f 155 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 207 -l 20 -D 0 -n -f 466 -l 20 -D 0 -n -f 587 -l 20 -D 190 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 130 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 189 -n -f 97 -l 95 -D 189 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 190 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 190 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 475 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 473 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 332 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 332 -n -f 130 -l 20 -D 0 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 332 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 189 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 189 -n -f 184 -l 20 -D 0 -n -f 277 -l 20 -D 0 -n -f 466 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 190 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 95 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 95 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 95 -n -f 349 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 880 -l 20 -D 190 -n -f 293 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 189 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 220 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 246 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 332 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 332 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 332 -n -f 130 -l 20 -D 0 -n -f 195 -l 20 -D 0 -n -f 329 -l 20 -D 332 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 189 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 189 -n -f 184 -l 20 -D 0 -n -f 277 -l 20 -D 0 -n -f 466 -l 20 -D 47 -n -f 174 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 190 -n -f 164 -l 20 -D 0 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 95 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 95 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 95 -n -f 349 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 880 -l 20 -D 190 -n -f 293 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 189 -n -f 261 -l 20 -D 0 -n -f 440 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 220 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 246 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 293 -l 20 -D 0 -n -f 493 -l 20 -D 332 -n -f 130 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 184 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 195 -l 95 -D 190 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 190 -n -f 174 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 174 -l 95 -D 190 -n -f 146 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 95 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 95 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 0 -n -f 174 -l 15 -D 0 -n -f 698 -l 15 -D 0 -n -f 880 -l 15 -D 0 -n -f 174 -l 47 -D 47 -n -f 195 -l 20 -D 0 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 95 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 246 -l 95 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 95 -n -f 195 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 195 -l 95 -D 47 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 195 -l 95 -D 190 -n -f 130 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 184 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 195 -l 95 -D 190 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 190 -n -f 174 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 174 -l 95 -D 190 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 190 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 95 -n -f 220 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 95 -n -f 246 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 587 -l 20 -D 95 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 329 -l 95 -D 47 -n -f 195 -l 95 -D 47 -n -f 329 -l 95 -D 47 -n -f 130 -l 20 -D 0 -n -f 261 -l 20 -n -f 130 -l 20 -D 0 -n -f 261 -l 20 -D 475 -n -f 130 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 184 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 195 -l 95 -D 190 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 190 -n -f 174 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 174 -l 95 -D 190 -n -f 146 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 95 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 95 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 0 -n -f 174 -l 15 -D 0 -n -f 698 -l 15 -D 0 -n -f 880 -l 15 -D 0 -n -f 174 -l 47 -D 47 -n -f 195 -l 20 -D 0 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 95 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 246 -l 95 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 95 -n -f 195 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 195 -l 95 -D 47 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 195 -l 95 -D 190 -n -f 130 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 184 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 195 -l 95 -D 190 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 190 -n -f 174 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 174 -l 95 -D 190 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 190 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 95 -n -f 220 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 95 -n -f 246 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 587 -l 20 -D 95 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 329 -l 95 -D 47 -n -f 195 -l 95 -D 47 -n -f 329 -l 95 -D 47 -n -f 130 -l 20 -D 0 -n -f 261 -l 20 -n -f 130 -l 20 -D 0 -n -f 261 -l 20 -D 475 -n -f 103 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 189 -n -f 155 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 207 -l 20 -D 0 -n -f 466 -l 20 -D 0 -n -f 587 -l 20 -D 190 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 130 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 189 -n -f 97 -l 95 -D 189 -n -f 103 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 189 -n -f 155 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 207 -l 20 -D 0 -n -f 466 -l 20 -D 0 -n -f 587 -l 20 -D 47 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 195 -l 95 -D 333 -n -f 130 -l 95 -D 332 -n -f 97 -l 95 -D 189 -n -f 103 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 189 -n -f 155 -l 20 -D 0 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -n -f 415 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 207 -l 20 -D 0 -n -f 466 -l 20 -D 0 -n -f 587 -l 20 -D 190 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -n -f 329 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 130 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 189 -n -f 97 -l 95 -D 189 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 189 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 190 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 146 -l 20 -D 0 -n -f 369 -l 20 -D 0 -n -f 659 -l 20 -D 190 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 783 -l 20 -D 475 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 473 -n -f 130 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 184 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 195 -l 95 -D 190 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 190 -n -f 174 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 174 -l 95 -D 190 -n -f 146 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 95 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 95 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 0 -n -f 174 -l 15 -D 0 -n -f 698 -l 15 -D 0 -n -f 880 -l 15 -D 0 -n -f 174 -l 47 -D 47 -n -f 195 -l 20 -D 0 -n -f 698 -l 20 -D 0 -n -f 880 -l 20 -D 95 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -n -f 659 -l 20 -D 0 -n -f 783 -l 20 -D 0 -n -f 246 -l 95 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 95 -n -f 195 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 195 -l 95 -D 47 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 195 -l 95 -D 190 -n -f 130 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 47 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -n -f 440 -l 20 -D 0 -n -f 523 -l 20 -D 190 -n -f 184 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 391 -l 20 -D 47 -n -f 195 -l 95 -D 190 -n -f 261 -l 20 -D 0 -n -f 329 -l 20 -D 0 -n -f 415 -l 20 -D 190 -n -f 174 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 174 -l 95 -D 47 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -n -f 523 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 261 -l 20 -D 0 -n -f 349 -l 20 -D 0 -n -f 440 -l 20 -D 47 -n -f 261 -l 94 -D 47 -n -f 174 -l 95 -D 190 -n -f 195 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 493 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 190 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 47 -n -f 195 -l 20 -D 0 -n -f 587 -l 20 -D 0 -n -f 698 -l 20 -D 95 -n -f 220 -l 20 -D 0 -n -f 523 -l 20 -D 0 -n -f 659 -l 20 -D 95 -n -f 246 -l 20 -D 0 -n -f 493 -l 20 -D 0 -n -f 587 -l 20 -D 95 -n -f 261 -l 20 -D 0 -n -f 391 -l 20 -D 0 -n -f 523 -l 20 -D 47 -n -f 329 -l 95 -D 47 -n -f 195 -l 95 -D 47 -n -f 329 -l 95 -D 47 -n -f 130 -l 20 -D 0 -n -f 261 -l 20 -n -f 130 -l 20 -D 0 -n -f 261 -l 20
"""
* Wed 22 Jul 2015 12:50:40 AM JST
/usr/bin/beep -f250 -r2 -l50
* Wed 22 Jul 2015 12:53:25 AM JST
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f250 -r2 -l50')
            os.system('rmmod pcspkr')

* Wed 22 Jul 2015 12:56:45 AM JST
/usr/bin/beep -f1200 -r2 -d0.01 -l300 -n -f1000 -l300
* Wed 22 Jul 2015 03:11:08 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Wed 22 Jul 2015 03:11:28 AM JST
85983245
* Wed 22 Jul 2015 04:35:20 PM JST
py:list-method-in-class
* Wed 22 Jul 2015 04:36:54 PM JST
ELSE
* Wed 22 Jul 2015 04:37:18 PM JST
(py:list-method-in-class)
* Wed 22 Jul 2015 04:38:00 PM JST
(buffer-file-name)
* Wed 22 Jul 2015 04:38:40 PM JST
(buffer-file-truename)
* Wed 22 Jul 2015 04:38:47 PM JST
buffer-file-truename
* Wed 22 Jul 2015 04:39:12 PM JST
(buffer-name)
* Wed 22 Jul 2015 04:39:34 PM JST
(buffer-name)
* Wed 22 Jul 2015 04:39:47 PM JST
(buffer-name)
* Wed 22 Jul 2015 04:39:59 PM JST
(concat "test_" (buffer-name))
* Wed 22 Jul 2015 04:43:34 PM JST
py:end-of-class|def
* Wed 22 Jul 2015 04:43:42 PM JST
py:end-of-class
* Wed 22 Jul 2015 04:45:10 PM JST
(filename (concat "test_" (buffer-name)))
* Wed 22 Jul 2015 04:48:30 PM JST
    def test_%s(self, ):
        self.skipTest('Not Implemented')
* Wed 22 Jul 2015 04:51:40 PM JST
py:generate--test_method
* Wed 22 Jul 2015 04:51:55 PM JST
  
* Wed 22 Jul 2015 04:52:37 PM JST
(if (not (py:in-class-p))
    (error "Not in class")
  (let ((methods (py:list-method-in-class)))
    (py:generate--test_methods methods)
    ))
* Wed 22 Jul 2015 04:53:02 PM JST
(py:list-method-in-class)
* Wed 22 Jul 2015 04:54:27 PM JST
py:list-method-in-class
* Wed 22 Jul 2015 04:57:15 PM JST
testsmethod-template
* Wed 22 Jul 2015 04:58:04 PM JST
    def test_%s(self, ):
        self.skipTest('Not Implemented')
* Wed 22 Jul 2015 04:58:30 PM JST
    def test___init__(self, ):
        self.skipTest('Not Implemented')
    def test_from_id(self, ):
        self.skipTest('Not Implemented')
    def test_get_display(self, ):
        self.skipTest('Not Implemented')
    def test___int__(self, ):
        self.skipTest('Not Implemented')
    def test___eq__(self, ):
        self.skipTest('Not Implemented')
    def test___ne__(self, ):
        self.skipTest('Not Implemented')
    def test___hash__(self, ):
        self.skipTest('Not Implemented')
    def test___repr__(self, ):
        self.skipTest('Not Implemented')
    def test_get_root(self, ):
        self.skipTest('Not Implemented')
    def test_get_id(self, ):
        self.skipTest('Not Implemented')
    def test_get_property(self, ):
        self.skipTest('Not Implemented')
    def test_change_property(self, ):
        self.skipTest('Not Implemented')
    def test_get_title(self, ):
        self.skipTest('Not Implemented')
    def test_set_title(self, ):
        self.skipTest('Not Implemented')
    def test_get_wmclass(self, ):
        self.skipTest('Not Implemented')
    def test_get_pid(self, ):
        self.skipTest('Not Implemented')
    def test_get_type(self, ):
        self.skipTest('Not Implemented')
    def test_get_workspace(self, ):
        self.skipTest('Not Implemented')
    def test_change_workspace(self, ):
        self.skipTest('Not Implemented')
    def test_get_bounds(self, ):
        self.skipTest('Not Implemented')
    def test__configure(self, ):
        self.skipTest('Not Implemented')
    def test_set_bounds(self, ):
        self.skipTest('Not Implemented')
    def test_set_size(self, ):
        self.skipTest('Not Implemented')
    def test_move(self, ):
        self.skipTest('Not Implemented')
    def test_raise_window(self, ):
        self.skipTest('Not Implemented')
    def test_lower_window(self, ):
        self.skipTest('Not Implemented')
    def test__send_client_message(self, ):
        self.skipTest('Not Implemented')
    def test_minimize(self, ):
        self.skipTest('Not Implemented')
    def test_is_minimized(self, ):
        self.skipTest('Not Implemented')
    def test_show(self, ):
        self.skipTest('Not Implemented')
    def test_maximize(self, ):
        self.skipTest('Not Implemented')
    def test_is_maximized(self, ):
        self.skipTest('Not Implemented')
    def test_restore(self, ):
        self.skipTest('Not Implemented')
    def test_activate(self, ):
        self.skipTest('Not Implemented')
    def test_deactivate(self, ):
        self.skipTest('Not Implemented')
    def test_set_always_on_top(self, ):
        self.skipTest('Not Implemented')
    def test_is_always_on_top(self, ):
        self.skipTest('Not Implemented')
    def test_set_always_on_bottom(self, ):
        self.skipTest('Not Implemented')
    def test_is_always_on_bottom(self, ):
        self.skipTest('Not Implemented')
    def test_set_fullscreen(self, ):
        self.skipTest('Not Implemented')
    def test_is_fullscreened(self, ):
        self.skipTest('Not Implemented')
    def test_set_shade(self, ):
        self.skipTest('Not Implemented')
    def test_is_shaded(self, ):
        self.skipTest('Not Implemented')
    def test_hide(self, ):
        self.skipTest('Not Implemented')
    def test_close(self, ):
        self.skipTest('Not Implemented')
    def test_delete(self, ):
        self.skipTest('Not Implemented')
    def test_destroy(self, ):
        self.skipTest('Not Implemented')
    def test_move_cursor_to(self, ):
        self.skipTest('Not Implemented')
    def test_grab_key(self, ):
        self.skipTest('Not Implemented')
    def test_grab_keys(self, ):
        self.skipTest('Not Implemented')
    def test_ungrab_key(self, ):
        self.skipTest('Not Implemented')
    def test_ungrab_keys(self, ):
        self.skipTest('Not Implemented')
    def test_grab_button(self, ):
        self.skipTest('Not Implemented')
    def test_grab_buttons(self, ):
        self.skipTest('Not Implemented')
    def test_ungrab_button(self, ):
        self.skipTest('Not Implemented')
    def test_ungrab_buttons(self, ):
        self.skipTest('Not Implemented')
    def test_query_pointer(self, ):
        self.skipTest('Not Implemented')
    def test_get_cursor_point(self, ):
        self.skipTest('Not Implemented')
* Wed 22 Jul 2015 04:59:41 PM JST
    def test___init__(self, ):
        self.skipTest('Not Implemented')
    def test_from_id(self, ):
        self.skipTest('Not Implemented')
    def test_get_display(self, ):
        self.skipTest('Not Implemented')
    def test___int__(self, ):
        self.skipTest('Not Implemented')
    def test___eq__(self, ):
        self.skipTest('Not Implemented')
    def test___ne__(self, ):
        self.skipTest('Not Implemented')
    def test___hash__(self, ):
        self.skipTest('Not Implemented')
    def test___repr__(self, ):
        self.skipTest('Not Implemented')
    def test_get_root(self, ):
        self.skipTest('Not Implemented')
    def test_get_id(self, ):
        self.skipTest('Not Implemented')
    def test_get_property(self, ):
        self.skipTest('Not Implemented')
    def test_change_property(self, ):
        self.skipTest('Not Implemented')
    def test_get_title(self, ):
        self.skipTest('Not Implemented')
    def test_set_title(self, ):
        self.skipTest('Not Implemented')
    def test_get_wmclass(self, ):
        self.skipTest('Not Implemented')
    def test_get_pid(self, ):
        self.skipTest('Not Implemented')
    def test_get_type(self, ):
        self.skipTest('Not Implemented')
    def test_get_workspace(self, ):
        self.skipTest('Not Implemented')
    def test_change_workspace(self, ):
        self.skipTest('Not Implemented')
    def test_get_bounds(self, ):
        self.skipTest('Not Implemented')
    def test__configure(self, ):
        self.skipTest('Not Implemented')
    def test_set_bounds(self, ):
        self.skipTest('Not Implemented')
    def test_set_size(self, ):
        self.skipTest('Not Implemented')
    def test_move(self, ):
        self.skipTest('Not Implemented')
    def test_raise_window(self, ):
        self.skipTest('Not Implemented')
    def test_lower_window(self, ):
        self.skipTest('Not Implemented')
    def test__send_client_message(self, ):
        self.skipTest('Not Implemented')
    def test_minimize(self, ):
        self.skipTest('Not Implemented')
    def test_is_minimized(self, ):
        self.skipTest('Not Implemented')
    def test_show(self, ):
        self.skipTest('Not Implemented')
    def test_maximize(self, ):
        self.skipTest('Not Implemented')
    def test_is_maximized(self, ):
        self.skipTest('Not Implemented')
    def test_restore(self, ):
        self.skipTest('Not Implemented')
    def test_activate(self, ):
        self.skipTest('Not Implemented')
    def test_deactivate(self, ):
        self.skipTest('Not Implemented')
    def test_set_always_on_top(self, ):
        self.skipTest('Not Implemented')
    def test_is_always_on_top(self, ):
        self.skipTest('Not Implemented')
    def test_set_always_on_bottom(self, ):
        self.skipTest('Not Implemented')
    def test_is_always_on_bottom(self, ):
        self.skipTest('Not Implemented')
    def test_set_fullscreen(self, ):
        self.skipTest('Not Implemented')
    def test_is_fullscreened(self, ):
        self.skipTest('Not Implemented')
    def test_set_shade(self, ):
        self.skipTest('Not Implemented')
    def test_is_shaded(self, ):
        self.skipTest('Not Implemented')
    def test_hide(self, ):
        self.skipTest('Not Implemented')
    def test_close(self, ):
        self.skipTest('Not Implemented')
    def test_delete(self, ):
        self.skipTest('Not Implemented')
    def test_destroy(self, ):
        self.skipTest('Not Implemented')
    def test_move_cursor_to(self, ):
        self.skipTest('Not Implemented')
    def test_grab_key(self, ):
        self.skipTest('Not Implemented')
    def test_grab_keys(self, ):
        self.skipTest('Not Implemented')
    def test_ungrab_key(self, ):
        self.skipTest('Not Implemented')
    def test_ungrab_keys(self, ):
        self.skipTest('Not Implemented')
    def test_grab_button(self, ):
        self.skipTest('Not Implemented')
    def test_grab_buttons(self, ):
        self.skipTest('Not Implemented')
    def test_ungrab_button(self, ):
        self.skipTest('Not Implemented')
    def test_ungrab_buttons(self, ):
        self.skipTest('Not Implemented')
    def test_query_pointer(self, ):
        self.skipTest('Not Implemented')
    def test_get_cursor_point(self, ):
        self.skipTest('Not Implemented')
* Wed 22 Jul 2015 05:00:31 PM JST
    def test___init__(self, ):
        self.skipTest('Not Implemented')
    def test_from_id(self, ):
        self.skipTest('Not Implemented')
    def test_get_display(self, ):
        self.skipTest('Not Implemented')
    def test___int__(self, ):
        self.skipTest('Not Implemented')
    def test___eq__(self, ):
        self.skipTest('Not Implemented')
    def test___ne__(self, ):
        self.skipTest('Not Implemented')
    def test___hash__(self, ):
        self.skipTest('Not Implemented')
    def test___repr__(self, ):
        self.skipTest('Not Implemented')
    def test_get_root(self, ):
        self.skipTest('Not Implemented')
    def test_get_id(self, ):
        self.skipTest('Not Implemented')
    def test_get_property(self, ):
        self.skipTest('Not Implemented')
    def test_change_property(self, ):
        self.skipTest('Not Implemented')
    def test_get_title(self, ):
        self.skipTest('Not Implemented')
    def test_set_title(self, ):
        self.skipTest('Not Implemented')
    def test_get_wmclass(self, ):
        self.skipTest('Not Implemented')
    def test_get_pid(self, ):
        self.skipTest('Not Implemented')
    def test_get_type(self, ):
        self.skipTest('Not Implemented')
    def test_get_workspace(self, ):
        self.skipTest('Not Implemented')
    def test_change_workspace(self, ):
        self.skipTest('Not Implemented')
    def test_get_bounds(self, ):
        self.skipTest('Not Implemented')
    def test__configure(self, ):
        self.skipTest('Not Implemented')
    def test_set_bounds(self, ):
        self.skipTest('Not Implemented')
    def test_set_size(self, ):
        self.skipTest('Not Implemented')
    def test_move(self, ):
        self.skipTest('Not Implemented')
    def test_raise_window(self, ):
        self.skipTest('Not Implemented')
    def test_lower_window(self, ):
        self.skipTest('Not Implemented')
    def test__send_client_message(self, ):
        self.skipTest('Not Implemented')
    def test_minimize(self, ):
        self.skipTest('Not Implemented')
    def test_is_minimized(self, ):
        self.skipTest('Not Implemented')
    def test_show(self, ):
        self.skipTest('Not Implemented')
    def test_maximize(self, ):
        self.skipTest('Not Implemented')
    def test_is_maximized(self, ):
        self.skipTest('Not Implemented')
    def test_restore(self, ):
        self.skipTest('Not Implemented')
    def test_activate(self, ):
        self.skipTest('Not Implemented')
    def test_deactivate(self, ):
        self.skipTest('Not Implemented')
    def test_set_always_on_top(self, ):
        self.skipTest('Not Implemented')
    def test_is_always_on_top(self, ):
        self.skipTest('Not Implemented')
    def test_set_always_on_bottom(self, ):
        self.skipTest('Not Implemented')
    def test_is_always_on_bottom(self, ):
        self.skipTest('Not Implemented')
    def test_set_fullscreen(self, ):
        self.skipTest('Not Implemented')
    def test_is_fullscreened(self, ):
        self.skipTest('Not Implemented')
    def test_set_shade(self, ):
        self.skipTest('Not Implemented')
    def test_is_shaded(self, ):
        self.skipTest('Not Implemented')
    def test_hide(self, ):
        self.skipTest('Not Implemented')
    def test_close(self, ):
        self.skipTest('Not Implemented')
    def test_delete(self, ):
        self.skipTest('Not Implemented')
    def test_destroy(self, ):
        self.skipTest('Not Implemented')
    def test_move_cursor_to(self, ):
        self.skipTest('Not Implemented')
    def test_grab_key(self, ):
        self.skipTest('Not Implemented')
    def test_grab_keys(self, ):
        self.skipTest('Not Implemented')
    def test_ungrab_key(self, ):
        self.skipTest('Not Implemented')
    def test_ungrab_keys(self, ):
        self.skipTest('Not Implemented')
    def test_grab_button(self, ):
        self.skipTest('Not Implemented')
    def test_grab_buttons(self, ):
        self.skipTest('Not Implemented')
    def test_ungrab_button(self, ):
        self.skipTest('Not Implemented')
    def test_ungrab_buttons(self, ):
        self.skipTest('Not Implemented')
    def test_query_pointer(self, ):
        self.skipTest('Not Implemented')
    def test_get_cursor_point(self, ):
        self.skipTest('Not Implemented')

* Wed 22 Jul 2015 05:00:51 PM JST
defvar
* Wed 22 Jul 2015 05:01:05 PM JST
    def test___init__(self, ):
        self.skipTest('Not Implemented')

    def test_from_id(self, ):
        self.skipTest('Not Implemented')

    def test_get_display(self, ):
        self.skipTest('Not Implemented')

    def test___int__(self, ):
        self.skipTest('Not Implemented')

    def test___eq__(self, ):
        self.skipTest('Not Implemented')

    def test___ne__(self, ):
        self.skipTest('Not Implemented')

    def test___hash__(self, ):
        self.skipTest('Not Implemented')

    def test___repr__(self, ):
        self.skipTest('Not Implemented')

    def test_get_root(self, ):
        self.skipTest('Not Implemented')

    def test_get_id(self, ):
        self.skipTest('Not Implemented')

    def test_get_property(self, ):
        self.skipTest('Not Implemented')

    def test_change_property(self, ):
        self.skipTest('Not Implemented')

    def test_get_title(self, ):
        self.skipTest('Not Implemented')

    def test_set_title(self, ):
        self.skipTest('Not Implemented')

    def test_get_wmclass(self, ):
        self.skipTest('Not Implemented')

    def test_get_pid(self, ):
        self.skipTest('Not Implemented')

    def test_get_type(self, ):
        self.skipTest('Not Implemented')

    def test_get_workspace(self, ):
        self.skipTest('Not Implemented')

    def test_change_workspace(self, ):
        self.skipTest('Not Implemented')

    def test_get_bounds(self, ):
        self.skipTest('Not Implemented')

    def test__configure(self, ):
        self.skipTest('Not Implemented')

    def test_set_bounds(self, ):
        self.skipTest('Not Implemented')

    def test_set_size(self, ):
        self.skipTest('Not Implemented')

    def test_move(self, ):
        self.skipTest('Not Implemented')

    def test_raise_window(self, ):
        self.skipTest('Not Implemented')

    def test_lower_window(self, ):
        self.skipTest('Not Implemented')

    def test__send_client_message(self, ):
        self.skipTest('Not Implemented')

    def test_minimize(self, ):
        self.skipTest('Not Implemented')

    def test_is_minimized(self, ):
        self.skipTest('Not Implemented')

    def test_show(self, ):
        self.skipTest('Not Implemented')

    def test_maximize(self, ):
        self.skipTest('Not Implemented')

    def test_is_maximized(self, ):
        self.skipTest('Not Implemented')

    def test_restore(self, ):
        self.skipTest('Not Implemented')

    def test_activate(self, ):
        self.skipTest('Not Implemented')

    def test_deactivate(self, ):
        self.skipTest('Not Implemented')

    def test_set_always_on_top(self, ):
        self.skipTest('Not Implemented')

    def test_is_always_on_top(self, ):
        self.skipTest('Not Implemented')

    def test_set_always_on_bottom(self, ):
        self.skipTest('Not Implemented')

    def test_is_always_on_bottom(self, ):
        self.skipTest('Not Implemented')

    def test_set_fullscreen(self, ):
        self.skipTest('Not Implemented')

    def test_is_fullscreened(self, ):
        self.skipTest('Not Implemented')

    def test_set_shade(self, ):
        self.skipTest('Not Implemented')

    def test_is_shaded(self, ):
        self.skipTest('Not Implemented')

    def test_hide(self, ):
        self.skipTest('Not Implemented')

    def test_close(self, ):
        self.skipTest('Not Implemented')

    def test_delete(self, ):
        self.skipTest('Not Implemented')

    def test_destroy(self, ):
        self.skipTest('Not Implemented')

    def test_move_cursor_to(self, ):
        self.skipTest('Not Implemented')

    def test_grab_key(self, ):
        self.skipTest('Not Implemented')

    def test_grab_keys(self, ):
        self.skipTest('Not Implemented')

    def test_ungrab_key(self, ):
        self.skipTest('Not Implemented')

    def test_ungrab_keys(self, ):
        self.skipTest('Not Implemented')

    def test_grab_button(self, ):
        self.skipTest('Not Implemented')

    def test_grab_buttons(self, ):
        self.skipTest('Not Implemented')

    def test_ungrab_button(self, ):
        self.skipTest('Not Implemented')

    def test_ungrab_buttons(self, ):
        self.skipTest('Not Implemented')

    def test_query_pointer(self, ):
        self.skipTest('Not Implemented')

    def test_get_cursor_point(self, ):
        self.skipTest('Not Implemented')

* Wed 22 Jul 2015 05:08:50 PM JST
(kill-new (s-join "\n" (py:list--testsmethod-template cls)))
* Wed 22 Jul 2015 05:09:03 PM JST
(message "!tests method text saved to kill-ring.!")
* Wed 22 Jul 2015 05:11:20 PM JST
def simple_teswindow(display, x, y, width, height, title=''):
    r"""SUMMARY
    simple_teswindow(c, 100,100,1000,1000)
    simple_teswindow()

    @Return:
    """
    from xcb import xproto
    from rectangle import Rectangle
    from lab.xahk.wm.window_client import WindowClient
    stup = display.get_setup()
    root = stup.roots[0].root
    depth = stup.roots[0].root_depth
    visual = stup.roots[0].root_visual
    white = stup.roots[0].white_pixel

    window = display.generate_id()

    display.core.CreateWindow(depth, window, root,
                              0, 0, width, height, 0,
                              xproto.WindowClass.InputOutput,
                              visual,
                              xproto.CW.BackPixel, [white])
    display.core.MapWindow(window)
    display.flush()
    client = WindowClient.from_id(display, window)
    client.set_title(title)
    client.set_bounds(Rectangle(x, y, width, height))
    return client


def window1(display):
    return simple_teswindow(display, 0, 0, 1000, 1000, 'window1')

* Wed 22 Jul 2015 05:11:48 PM JST

* Wed 22 Jul 2015 05:11:49 PM JST

* Wed 22 Jul 2015 05:11:49 PM JST
    from lab.xahk.wm.window_client import WindowClient

* Wed 22 Jul 2015 05:12:05 PM JST
client
* Wed 22 Jul 2015 05:12:14 PM JST

* Wed 22 Jul 2015 05:12:14 PM JST

* Wed 22 Jul 2015 05:12:14 PM JST
    from rectangle import Rectangle

* Wed 22 Jul 2015 05:12:52 PM JST
simple_teswindow
* Wed 22 Jul 2015 05:15:36 PM JST
client = 
* Wed 22 Jul 2015 05:15:53 PM JST
pass
* Wed 22 Jul 2015 05:15:56 PM JST
self
* Wed 22 Jul 2015 05:16:13 PM JST
Display
* Wed 22 Jul 2015 05:16:40 PM JST
WindowClient
* Wed 22 Jul 2015 05:17:51 PM JST
from_id
* Wed 22 Jul 2015 05:20:36 PM JST
window
* Wed 22 Jul 2015 05:20:42 PM JST
window
* Wed 22 Jul 2015 05:21:07 PM JST
from_id
* Wed 22 Jul 2015 05:21:14 PM JST
from_id
* Wed 22 Jul 2015 05:21:21 PM JST
from_id
* Wed 22 Jul 2015 05:21:28 PM JST
from_id
* Wed 22 Jul 2015 05:21:36 PM JST
from_id
* Wed 22 Jul 2015 05:21:42 PM JST
from_id
* Wed 22 Jul 2015 05:21:43 PM JST
            
* Wed 22 Jul 2015 05:21:49 PM JST
from_id
* Wed 22 Jul 2015 05:21:54 PM JST
from_id
* Wed 22 Jul 2015 05:22:01 PM JST
from_id
* Wed 22 Jul 2015 05:22:07 PM JST
from_id
* Wed 22 Jul 2015 05:22:08 PM JST
            
* Wed 22 Jul 2015 05:22:24 PM JST
from_id
* Wed 22 Jul 2015 05:22:25 PM JST
            
* Wed 22 Jul 2015 05:22:40 PM JST
            
* Wed 22 Jul 2015 05:29:06 PM JST
is 
* Wed 22 Jul 2015 05:29:16 PM JST
not
* Wed 22 Jul 2015 05:31:14 PM JST
sleep(0.2)
* Wed 22 Jul 2015 05:51:01 PM JST
        
* Wed 22 Jul 2015 05:51:23 PM JST
window1(self.display)
* Wed 22 Jul 2015 05:51:25 PM JST
window
* Wed 22 Jul 2015 05:51:29 PM JST
window1(self.display)
* Wed 22 Jul 2015 05:52:18 PM JST
        
* Wed 22 Jul 2015 05:52:22 PM JST
window
* Wed 22 Jul 2015 05:52:22 PM JST
self.window
* Wed 22 Jul 2015 05:53:00 PM JST

* Wed 22 Jul 2015 05:53:01 PM JST

* Wed 22 Jul 2015 05:53:01 PM JST
        self.client = None

* Wed 22 Jul 2015 05:53:08 PM JST
pass
* Wed 22 Jul 2015 05:53:12 PM JST
window
* Wed 22 Jul 2015 05:53:19 PM JST
self
* Wed 22 Jul 2015 05:53:51 PM JST
self.
* Wed 22 Jul 2015 05:55:47 PM JST
        self.assertEqual(self.display.get_setup().roots[0].root,
                         self.client.get_root())

* Wed 22 Jul 2015 05:55:49 PM JST
get_root()
* Wed 22 Jul 2015 05:56:07 PM JST
self.assertEqual(self.window_id, int(self.client))
* Wed 22 Jul 2015 05:56:11 PM JST
int(
* Wed 22 Jul 2015 05:56:16 PM JST
self.assertEqual(self.window_id, self.client.get_id())
* Wed 22 Jul 2015 06:02:57 PM JST
self.client.get_title()
* Wed 22 Jul 2015 06:08:12 PM JST
from lab.xahk.logger import LOG
* Wed 22 Jul 2015 06:08:17 PM JST
LOG.error('{}, {}'.format(err, prop))
* Wed 22 Jul 2015 06:08:22 PM JST
prop
* Wed 22 Jul 2015 06:08:29 PM JST
            import os
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f250 -r2 -l50')
            os.system('rmmod pcspkr')
            return None

* Wed 22 Jul 2015 06:09:05 PM JST
self._change_window_attributes(window)
* Wed 22 Jul 2015 06:09:35 PM JST

* Wed 22 Jul 2015 06:09:35 PM JST

* Wed 22 Jul 2015 06:09:35 PM JST
        reply = 

* Wed 22 Jul 2015 06:15:15 PM JST
GetWindowAttributesUnchecked
* Wed 22 Jul 2015 06:16:08 PM JST
3333
* Wed 22 Jul 2015 06:17:18 PM JST
change
* Wed 22 Jul 2015 06:17:37 PM JST
        for window in self._window_factory.list_windows():
            reply = self._change_window_attributes(window)
            if not reply is None:
                append(reply)
            window.add_observer(self)
        for cookie in cookies:
            cookie.check()

* Wed 22 Jul 2015 06:18:00 PM JST
cookies, append = ListDotAvoider().append
* Wed 22 Jul 2015 06:29:16 PM JST
        except BadWindow as err:
            from lab.xahk.logger import LOG
            LOG.error('{}'.format(err))
            import os
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f250 -r2 -l50')
            os.system('rmmod pcspkr')
            return False

* Wed 22 Jul 2015 06:29:20 PM JST

* Wed 22 Jul 2015 06:29:20 PM JST

* Wed 22 Jul 2015 06:29:20 PM JST
        except BadWindow as err:

* Wed 22 Jul 2015 06:29:48 PM JST
False
* Wed 22 Jul 2015 06:30:06 PM JST

* Wed 22 Jul 2015 06:30:06 PM JST

* Wed 22 Jul 2015 06:30:06 PM JST
            return None

* Wed 22 Jul 2015 06:33:11 PM JST
CW.EventMask
* Wed 22 Jul 2015 06:35:04 PM JST
attr
* Wed 22 Jul 2015 06:38:20 PM JST
current_attr = self.get_attributes().your_event_mask
* Wed 22 Jul 2015 06:39:31 PM JST
value
* Wed 22 Jul 2015 06:50:47 PM JST

* Wed 22 Jul 2015 06:50:47 PM JST

* Wed 22 Jul 2015 06:50:47 PM JST
            print('DEBUG-1-_window_listener.py')

* Wed 22 Jul 2015 10:04:26 PM JST
        for window in self._window_factory.list_windows():
            reply = self._change_window_attributes(window)
            if not reply is None:
                append(reply)
            window.add_observer(self)

* Wed 22 Jul 2015 10:05:11 PM JST
Enter
* Wed 22 Jul 2015 10:12:25 PM JST
window.add_attributes(EventMask.EnterWindow)
* Wed 22 Jul 2015 10:12:48 PM JST
window.add_attributes(EventMask.EnterWindow)
* Wed 22 Jul 2015 10:22:43 PM JST
        
* Wed 22 Jul 2015 10:22:46 PM JST
get_
* Wed 22 Jul 2015 10:25:55 PM JST
self.get_property(False, 'WM_NAME', 'STRING')
* Wed 22 Jul 2015 10:32:42 PM JST

* Wed 22 Jul 2015 10:32:42 PM JST

* Wed 22 Jul 2015 10:32:42 PM JST
        print(self.client.get_pid())

* Wed 22 Jul 2015 10:48:20 PM JST
23068672
* Wed 22 Jul 2015 11:20:42 PM JST
from lab.xahk.wm.tests.test_window_client import *
* Wed 22 Jul 2015 11:22:17 PM JST
wc.change_property()
* Wed 22 Jul 2015 11:22:57 PM JST
'_NET_WM_NAME'
* Wed 22 Jul 2015 11:24:27 PM JST
wc.change_property(PropMode.Replace, '_NET_WM_NAME', 'STRING', 8, len('test'), 'test')
* Wed 22 Jul 2015 11:29:11 PM JST
reply.bytes_after
* Wed 22 Jul 2015 11:30:37 PM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
w=window1(c)

* Wed 22 Jul 2015 11:30:47 PM JST
from lab.xahk.wm.window_client import *
wc=WindowClient(c, w)

* Wed 22 Jul 2015 11:30:54 PM JST
wc.change_property(PropMode.Replace, '_NET_WM_NAME', 'STRING', 8, len('test'), 'test')

* Wed 22 Jul 2015 11:31:19 PM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
w=window1(c)
from lab.xahk.wm.window_client import *

* Wed 22 Jul 2015 11:31:31 PM JST
from lab.xahk.wm.tests.test_window_client import *
* Wed 22 Jul 2015 11:31:34 PM JST
from lab.xahk.wm.tests.test_window_client import *
* Wed 22 Jul 2015 11:31:47 PM JST
w=window1(c)                           
* Wed 22 Jul 2015 11:32:15 PM JST
wc.change_property(PropMode.Replace, '_NET_WM_NAME', 'UTF8-STRING', 8, len('test'), 'test')
* Wed 22 Jul 2015 11:32:20 PM JST
wc=WindowClient(c, w)
* Wed 22 Jul 2015 11:32:23 PM JST
wc.change_property(PropMode.Replace, '_NET_WM_NAME', 'UTF8-STRING', 8, len('test'), 'test')
* Wed 22 Jul 2015 11:34:51 PM JST
from lab.xahk.wm.tests.test_window_client import *
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.window_client import *
w=window1(c)                           
wc=WindowClient(c, w)

* Wed 22 Jul 2015 11:35:07 PM JST
wc.change_property(PropMode.Replace, '_NET_WM_NAME', 'UTF8-STRING', 8, len('test'), 'test')
* Wed 22 Jul 2015 11:35:39 PM JST
from lab.xahk.wm.tests.test_window_client import *
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.window_client import *
w=window1(c)                           
wc=WindowClient(c, w)

* Wed 22 Jul 2015 11:35:52 PM JST
wc.change_property(PropMode.Replace, '_NET_WM_NAME', 'UTF8_STRING', 8, len('test'), 'test')
* Wed 22 Jul 2015 11:36:19 PM JST

* Wed 22 Jul 2015 11:36:19 PM JST

* Wed 22 Jul 2015 11:36:19 PM JST
            print(reply.bytes_after)

* Wed 22 Jul 2015 11:39:40 PM JST
wc.change_property(PropMode.Replace, 'WM_CLASS', 'STRING', 8, 1, 'test\x00test\x00')
* Wed 22 Jul 2015 11:40:05 PM JST
'test\x00test\x00'
* Wed 22 Jul 2015 11:40:11 PM JST
wc.change_property(PropMode.Replace, 'WM_CLASS', 'STRING', 8, len('test\x00test\x00'), 'test\x00test\x00')
* Thu 23 Jul 2015 12:20:23 AM JST
'_NET_WM_PID'
* Thu 23 Jul 2015 12:21:21 AM JST
wc.change_property(PropMode.Replace, '_NET_WM_PID', 'CARDINAL', 32, 1, pack('I', 3333))
* Thu 23 Jul 2015 12:21:29 AM JST
from struct import pack
* Thu 23 Jul 2015 12:29:09 AM JST
'_NET_WM_WINDOW_TYPE'
* Thu 23 Jul 2015 12:29:46 AM JST
wc.change_property(PropMode.Replace, '_NET_WM_WINDOW_TYPE', 'ATOM', 32, 1, pack('I', c.core.InternAtom(False, )))
* Thu 23 Jul 2015 12:29:50 AM JST
wc.change_property(PropMode.Replace, '_NET_WM_WINDOW_TYPE', 'ATOM', 32, 1, pack('I', c.core.InternAtom(False, )))
* Thu 23 Jul 2015 12:30:01 AM JST
wc.change_property(PropMode.Replace, '_NET_WM_WINDOW_TYPE', 'ATOM', 32, 1, pack('I', c.core.InternAtom(False, )))
* Thu 23 Jul 2015 12:30:18 AM JST
'_NET_WM_WINDOW_TYPE_NORMAL'
* Thu 23 Jul 2015 12:30:37 AM JST
wc.change_property(PropMode.Replace, '_NET_WM_WINDOW_TYPE', 'ATOM', 32, 1, pack('I', c.core.InternAtom(False, len('_NET_WM_WINDOW_TYPE_NORMAL'), '_NET_WM_WINDOW_TYPE_NORMAL').reply().atom))
* Thu 23 Jul 2015 12:32:09 AM JST
'_NET_WORKAREA'
* Thu 23 Jul 2015 12:32:34 AM JST
'_NET_WM_DESKTOP'
* Thu 23 Jul 2015 12:32:51 AM JST
wc.change_property(PropMode.Replace, '_NET_WM_DESKTOP', 'CARDINAL', 32, 1, pack('I', 0))
* Thu 23 Jul 2015 12:37:58 AM JST
str(c.core.GetAtomName(392).reply().name.buf())
* Thu 23 Jul 2015 12:38:30 AM JST
'_NET_WORKAREA'
* Thu 23 Jul 2015 12:39:23 AM JST
self._get_atom('_NET_WORKAREA')
* Thu 23 Jul 2015 12:39:48 AM JST
'_NET_WORKAREA'
* Thu 23 Jul 2015 12:40:02 AM JST
self._root.get_workarea()
* Thu 23 Jul 2015 12:40:48 AM JST

* Thu 23 Jul 2015 12:40:48 AM JST

* Thu 23 Jul 2015 12:40:48 AM JST
        self._root.window

* Thu 23 Jul 2015 12:41:26 AM JST
    def get_attributes(self, ):
        r"""SUMMARY

        get_attributes()

        @Return:

        @Error:
        """
        return self.window.get_attributes()

    def add_attributes(self, value):
        r"""SUMMARY

        add_attributes(value)

        @Arguments:
        - `value`:

        @Return:

        @Error:
        """
        return self.window.add_attributes(value)

    def remove_attributes(self, value):
        r"""SUMMARY

        remove_attributes(value)

        @Arguments:
        - `value`:

        @Return:

        @Error:
        """
        return self.window.remove_attributes(value)


* Thu 23 Jul 2015 12:41:56 AM JST
EventMask.PropertyChange
* Thu 23 Jul 2015 12:43:09 AM JST

* Thu 23 Jul 2015 12:43:09 AM JST

* Thu 23 Jul 2015 12:43:09 AM JST
            print('DEBUG-10-root_window_listener.py')

* Thu 23 Jul 2015 12:44:36 AM JST
not 
* Thu 23 Jul 2015 12:46:15 AM JST
PropMode.Replace, '_NET_WM_NAME', 'UTF8_STRING', 8, len('test'), 'test'
* Thu 23 Jul 2015 12:46:23 AM JST
PropMode
* Thu 23 Jul 2015 12:47:05 AM JST
PropMode.Replace, 'WM_CLASS', 'STRING', 8, len('test\x00test\x00'), 'test\x00test\x00'
* Thu 23 Jul 2015 12:47:34 AM JST
'test\x00test\x00'
* Thu 23 Jul 2015 12:47:51 AM JST
            
* Thu 23 Jul 2015 12:48:06 AM JST
'test\x00test\x00'
* Thu 23 Jul 2015 12:50:11 AM JST
.your_event_mask
* Thu 23 Jul 2015 12:58:18 AM JST
                from lab.xahk.logger import LOG
                LOG.error('{}'.format(err))
                import os
                os.system('modprobe pcspkr')
                os.system('/usr/bin/beep -f250 -r2 -l50')
                os.system('rmmod pcspkr')

* Thu 23 Jul 2015 01:01:57 AM JST
EventMask.StructureNotify|EventMask.PropertyChange
* Thu 23 Jul 2015 01:04:35 AM JST
StandardError
* Thu 23 Jul 2015 01:04:53 AM JST
            from lab.xahk.logger import LOG
            LOG.error('{}'.format(err))
            import os
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f250 -r2 -l50')
            os.system('rmmod pcspkr')
            return

* Thu 23 Jul 2015 02:35:04 AM JST
wc.change_property(PropMode.Replace, '_NET_WM_PID', 'CARDINAL', 32, 1, pack('I', 3333))
* Thu 23 Jul 2015 02:35:18 AM JST
wc
* Thu 23 Jul 2015 02:35:51 AM JST
3333
* Thu 23 Jul 2015 02:36:20 AM JST

* Thu 23 Jul 2015 02:36:20 AM JST

* Thu 23 Jul 2015 02:36:20 AM JST
        self.assertIsNone(self.client.get_pid())

* Thu 23 Jul 2015 02:36:35 AM JST

* Thu 23 Jul 2015 02:36:35 AM JST

* Thu 23 Jul 2015 02:36:36 AM JST
        self.assertIsNone(self.client.get_pid())

* Thu 23 Jul 2015 02:36:38 AM JST
        
* Thu 23 Jul 2015 02:36:39 AM JST
get_
* Thu 23 Jul 2015 02:36:55 AM JST
.change_property(PropMode.Replace, '_NET_WM_WINDOW_TYPE', 'ATOM', 32, 1, pack('I', c.core.InternAtom(False, len('_NET_WM_WINDOW_TYPE_NORMAL'), '_NET_WM_WINDOW_TYPE_NORMAL').reply().atom))
* Thu 23 Jul 2015 02:37:33 AM JST
self.assertIsNone(
* Thu 23 Jul 2015 02:37:35 AM JST
self.client.get_type()
* Thu 23 Jul 2015 02:37:47 AM JST
        
* Thu 23 Jul 2015 02:37:49 AM JST
get_
* Thu 23 Jul 2015 02:38:04 AM JST
            expects = self.display.core.InternAtom(
                False, len('_NET_WM_WINDOW_TYPE_NORMAL'),
                '_NET_WM_WINDOW_TYPE_NORMAL').reply().atom

* Thu 23 Jul 2015 02:38:08 AM JST
        
* Thu 23 Jul 2015 02:38:10 AM JST
            
* Thu 23 Jul 2015 02:38:15 AM JST
            
* Thu 23 Jul 2015 02:38:34 AM JST
.change_property(PropMode.Replace, '_NET_WM_DESKTOP', 'CARDINAL', 32, 1, pack('I', 0))
* Thu 23 Jul 2015 02:39:17 AM JST
        
* Thu 23 Jul 2015 02:39:18 AM JST
get_
* Thu 23 Jul 2015 02:41:02 AM JST
from lab.xahk.wm.tests.test_window_client import *
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.window_client import *
from struct import pack
w=window1(c)                           
wc=WindowClient(c, w)

* Thu 23 Jul 2015 02:48:30 AM JST
get_number_of_desktop
* Thu 23 Jul 2015 02:50:23 AM JST
client
* Thu 23 Jul 2015 02:52:01 AM JST
'_NET_WORKAREA', 'CARDINAL'
* Thu 23 Jul 2015 02:53:39 AM JST
0, 0, 0, 0
* Thu 23 Jul 2015 02:54:13 AM JST
0]
* Thu 23 Jul 2015 02:54:14 AM JST
rect[0]
* Thu 23 Jul 2015 02:54:24 AM JST
Rectangle(x, y, w, h)
* Thu 23 Jul 2015 02:55:54 AM JST
(0, 0, 2960, 1050, 0, 0, 2960, 1050)
* Thu 23 Jul 2015 02:56:08 AM JST
[Rectangle(x, y, w, h) for x, y, w, h in rect]
* Thu 23 Jul 2015 02:56:13 AM JST
(0, 0, 2960, 1050, 0, 0, 2960, 1050)
* Thu 23 Jul 2015 02:56:38 AM JST
Rectangle(
* Thu 23 Jul 2015 02:57:58 AM JST
Rectan
* Thu 23 Jul 2015 02:58:01 AM JST
Rectangle(x, y, w, h)
* Thu 23 Jul 2015 02:58:05 AM JST
[Rectangle(x, y, w, h) for x, y, w, h in rects]
* Thu 23 Jul 2015 03:01:09 AM JST
zip(*[iter(rep.keysyms)] * rep.keysyms_per_keycode) # chunks
* Thu 23 Jul 2015 03:01:33 AM JST
keysyms_per_keycode
* Thu 23 Jul 2015 03:01:33 AM JST
rep.keysyms_per_keycode
* Thu 23 Jul 2015 03:01:39 AM JST
keysyms
* Thu 23 Jul 2015 03:01:39 AM JST
rep.keysyms
* Thu 23 Jul 2015 03:01:45 AM JST

* Thu 23 Jul 2015 03:01:45 AM JST

* Thu 23 Jul 2015 03:01:45 AM JST
        results, append = ListDotAvoider().append

* Thu 23 Jul 2015 03:01:49 AM JST
results
* Thu 23 Jul 2015 03:02:17 AM JST
zip(*[iter(rects)] * 4)
* Thu 23 Jul 2015 03:02:21 AM JST

* Thu 23 Jul 2015 03:02:21 AM JST

* Thu 23 Jul 2015 03:02:21 AM JST
        each_rects =  # chunks

* Thu 23 Jul 2015 03:02:48 AM JST
get
* Thu 23 Jul 2015 03:02:50 AM JST
get
* Thu 23 Jul 2015 03:02:52 AM JST
get
* Thu 23 Jul 2015 03:03:12 AM JST
get
* Thu 23 Jul 2015 03:03:16 AM JST
get
* Thu 23 Jul 2015 03:03:34 AM JST
CW, 
* Thu 23 Jul 2015 03:03:47 AM JST
get
* Thu 23 Jul 2015 03:05:49 AM JST
self.
* Thu 23 Jul 2015 03:06:41 AM JST
expectsx, expectsy, expectsw, expecth
* Thu 23 Jul 2015 03:07:18 AM JST
rectangle.
* Thu 23 Jul 2015 03:07:21 AM JST
rectangle.
* Thu 23 Jul 2015 03:07:24 AM JST
rectangle.
* Thu 23 Jul 2015 03:07:26 AM JST
rectangle.
* Thu 23 Jul 2015 03:07:50 AM JST
rectangle
* Thu 23 Jul 2015 03:07:52 AM JST
rectangle
* Thu 23 Jul 2015 03:08:03 AM JST
newx, newy, width, height
* Thu 23 Jul 2015 03:08:16 AM JST
expectsx, expectsy, expectsw, expecth
* Thu 23 Jul 2015 03:09:04 AM JST
        
* Thu 23 Jul 2015 03:09:08 AM JST
        
* Thu 23 Jul 2015 03:09:15 AM JST

* Thu 23 Jul 2015 03:09:17 AM JST
width
* Thu 23 Jul 2015 03:09:34 AM JST
client.
* Thu 23 Jul 2015 03:09:34 AM JST
self.client.
* Thu 23 Jul 2015 03:09:35 AM JST
bounds2 = self.client.
* Thu 23 Jul 2015 03:11:21 AM JST
bounds = self.client.get_bounds()
* Thu 23 Jul 2015 03:11:36 AM JST
        self.assertEqual(expectsw, bounds.width)
        self.assertEqual(expectsh, bounds.height)

* Thu 23 Jul 2015 03:12:22 AM JST
        sleep(0.3)
        bounds = self.client.get_bounds()

* Thu 23 Jul 2015 03:12:27 AM JST
        self.assertEqual(expectsx, bounds.x)
        self.assertEqual(expectsy, bounds.y)

* Thu 23 Jul 2015 03:22:59 AM JST
_NET_ACTIVE_WINDOW
* Thu 23 Jul 2015 03:28:47 AM JST
ACTIVE
* Thu 23 Jul 2015 03:33:11 AM JST
NET
* Thu 23 Jul 2015 03:33:12 AM JST
NET_ACTIVE_WINDOW
* Thu 23 Jul 2015 03:45:21 AM JST
_NET_CLIENT_LIST_STACKING
* Thu 23 Jul 2015 03:45:35 AM JST
STACKING
* Thu 23 Jul 2015 03:48:04 AM JST
clientAddToList
* Thu 23 Jul 2015 03:49:31 AM JST
clientFrame
* Thu 23 Jul 2015 03:51:33 AM JST
clientAddToList
* Thu 23 Jul 2015 03:52:42 AM JST
clientSetNetClientList
* Thu 23 Jul 2015 03:54:54 AM JST
g
* Thu 23 Jul 2015 03:54:56 AM JST
g_new
* Thu 23 Jul 2015 03:58:56 AM JST
ScreenInfo
* Thu 23 Jul 2015 04:00:15 AM JST
windows
* Thu 23 Jul 2015 04:00:59 AM JST
ScreenInfo
* Thu 23 Jul 2015 04:05:54 AM JST
screen_info->windows_stack
* Thu 23 Jul 2015 04:09:35 AM JST
clientAddToList
* Thu 23 Jul 2015 04:10:04 AM JST
clientFrame
* Thu 23 Jul 2015 04:11:54 AM JST
myDisplayGetClientFromWindow
* Thu 23 Jul 2015 04:24:26 AM JST
handleMapRequest
* Thu 23 Jul 2015 04:25:15 AM JST
handleEvent
* Thu 23 Jul 2015 04:26:01 AM JST
xfwm4
* Thu 23 Jul 2015 04:26:02 AM JST
xfwm4_event_filter
* Thu 23 Jul 2015 04:26:33 AM JST
eventFilterPush
* Thu 23 Jul 2015 04:39:42 AM JST
handleMapRequest
* Thu 23 Jul 2015 04:42:08 AM JST
MapNotifyEvent
* Thu 23 Jul 2015 04:43:21 AM JST
sel
* Thu 23 Jul 2015 04:43:43 AM JST
self._root.client_list()
* Thu 23 Jul 2015 04:43:47 AM JST
self._root.client_list()
* Thu 23 Jul 2015 04:49:06 AM JST
EventMask.StructureNotify
* Thu 23 Jul 2015 04:56:04 AM JST
handleMapNotify
* Thu 23 Jul 2015 04:57:34 AM JST
SubstructureRedirect
* Thu 23 Jul 2015 04:58:05 AM JST
MapNotifyEvent
* Thu 23 Jul 2015 04:59:53 AM JST
SubstructureRedirect
* Thu 23 Jul 2015 05:08:33 AM JST
            print(event.window)

* Thu 23 Jul 2015 05:08:34 AM JST
window
* Thu 23 Jul 2015 05:09:17 AM JST
MapRequestEvent
* Thu 23 Jul 2015 05:10:30 AM JST
TRACE
* Thu 23 Jul 2015 05:19:04 AM JST

* Thu 23 Jul 2015 05:19:04 AM JST

* Thu 23 Jul 2015 05:19:04 AM JST
        print(event)

* Thu 23 Jul 2015 05:19:18 AM JST
            
* Thu 23 Jul 2015 05:19:26 AM JST
, MapNotifyEvent
* Thu 23 Jul 2015 04:45:18 PM JST
+--------------------------+   
 |  +-----------------------+---+
 |  |                       |   |
 |  |                       |   |
 |  |                       |   |
 |  |                       |   |
 |  |                       |   |
 |  |                       |   |
 |  |                       |   |
 |  |                       |   |
 |  |                       |   |
 +--+-----------------------+   |
    |                           |
    +---------------------------+

* Thu 23 Jul 2015 04:47:21 PM JST

* Thu 23 Jul 2015 04:47:21 PM JST

* Thu 23 Jul 2015 04:47:21 PM JST
 |                          |   |

* Thu 23 Jul 2015 04:47:45 PM JST
"""
 +--------------------------+   
 |                          |---+
 |                          |   |
 |                          |   |
 |                          |   |
 |            X             |   |
 |                          |   |
 |                          |   |
 |                          |   |
 |                          |   |
 |                          |   |
 +--------------------------+   |
    |                           |
    +---------------------------+
               ||
               \/
 +--------------------------+   
 |  +---------------------------+
 |  |                           |
 |  |                           |
 |  |                           |
 |  |                           |
 |  |         X                 |
 |  |                           |
 |  |                           |
 |  |                           |
 |  |                           |
 +--|                           |
    |                           |
    +---------------------------+
"""

* Thu 23 Jul 2015 04:48:38 PM JST
        """
         +--------------------------+
         |                          |---+
         |                          |   |
         |                          |   |
         |                          |   |
         |            X             |   |
         |                          |   |
         |                          |   |
         |                          |   |
         |                          |   |
         |                          |   |
         +--------------------------+   |
            |                           |
            +---------------------------+

                       ||
                       \/

         +--------------------------+
         |  +---------------------------+
         |  |                           |
         |  |                           |
         |  |                           |
         |  |                           |
         |  |         X                 |
         |  |                           |
         |  |                           |
         |  |                           |
         |  |                           |
         +--|                           |
            |                           |
            +---------------------------+
        """

* Thu 23 Jul 2015 04:50:00 PM JST
 +------------------------------+
 |                              |
 |                              |
 |      +-----------------------+-----+
 |      |                       |     |
 |      |                       |     |
 |      |                       |     |
 |      |                       |     |
 |      |                       |     |
 |      |                       |     |
 |      |                       |     |
 |      |                       |     |
 +------+-----------------------+     |
        |                             |
        |                             |
        +-----------------------------+

* Thu 23 Jul 2015 04:52:22 PM JST
"""
 +------------------------------+
 |  Window1                     |
 |                              |
 |                              |-----+
 |                              |     |
 |                              |     |
 |                              |     |
 |                              |     |
 |                              |     |
 |                              |     |
 |                              |     |
 |                              |     |
 +------------------------------+     |
        |                             |
        |  Window2                    |
        +-----------------------------+

               ||                       
               \/   
                   
 +------------------------------+
 |  Window1                     |
 |                              |
 |      +-----------------------------+
 |      |  Window2                    |
 |      |                             |
 |      |                             |
 |      |                             |
 |      |                             |
 |      |                             |
 |      |                             |
 |      |                             |
 +------|                             |
        |                             |
        |                             |
        +-----------------------------+

"""

* Thu 23 Jul 2015 04:54:24 PM JST
(python-indent-guess-indent-offset)
* Thu 23 Jul 2015 04:54:42 PM JST
(python-skeleton-add-menu-items)
* Thu 23 Jul 2015 04:57:24 PM JST
def window2(display):
    return simple_teswindow(display, 250, 250, 500, 500, 'window2')

* Thu 23 Jul 2015 04:57:43 PM JST
500
* Thu 23 Jul 2015 04:57:45 PM JST
500
* Thu 23 Jul 2015 04:58:17 PM JST
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 500, 500).check()

* Thu 23 Jul 2015 04:58:44 PM JST
window
* Thu 23 Jul 2015 04:59:46 PM JST
from lab.xahk.wm.tests.test_window_client import *
w1=window1(c)
w2=window1(c)

* Thu 23 Jul 2015 05:01:43 PM JST
.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 500, 500).check()
* Thu 23 Jul 2015 05:01:47 PM JST
root
* Thu 23 Jul 2015 05:01:48 PM JST
self.root
* Thu 23 Jul 2015 05:01:51 PM JST
            
* Thu 23 Jul 2015 05:03:08 PM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.tests.test_window_client import *

* Thu 23 Jul 2015 05:03:22 PM JST
w1=window1(c)
w2=window1(c)

* Thu 23 Jul 2015 05:03:24 PM JST
wc1=WindowClient(c, w1)
wc2=WindowClient(c, w2)

* Thu 23 Jul 2015 05:03:29 PM JST
wc1.set_bounds(0,0,1000,1000)
wc2.set_bounds(250,250,1000,1000)

* Thu 23 Jul 2015 05:03:34 PM JST
c.core.WarpPointerChecked(0, 482, 0, 0, 0, 0, 500, 500).check()
* Thu 23 Jul 2015 05:03:50 PM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.tests.test_window_client import *
w1=window1(c)
w2=window1(c)
wc1=WindowClient(c, w1)
wc2=WindowClient(c, w2)
wc2.set_bounds(250,250,1000,1000)
wc1.set_bounds(0,0,1000,1000)    
c.core.WarpPointerChecked(0, 482, 0, 0, 0, 0, 500, 500).check()

* Thu 23 Jul 2015 05:04:06 PM JST
         +------------------------------+
         |  Window1                     |
         |                              |
         |      +-----------------------------+
         |      |  Window2                    |
         |      |                             |
         |      |                             |
         |      |                             |
         |      |                             |
         |      |                             |
         |      |                             |
         |      |                             |
         +------|                             |
                |                             |
                |                             |
                +-----------------------------+

* Thu 23 Jul 2015 05:04:12 PM JST
         +------------------------------+
         |  Window1                     |
         |                              |
         |                              |-----+
         |                              |     |
         |                              |     |
         |                              |     |
         |                              |     |
         |                              |     |
         |                              |     |
         |                              |     |
         |                              |     |
         +------------------------------+     |
                |                             |
                |  Window2                    |
                +-----------------------------+

* Thu 23 Jul 2015 05:04:58 PM JST
self.
* Thu 23 Jul 2015 05:05:37 PM JST
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 500, 500).check()

* Thu 23 Jul 2015 05:05:56 PM JST
.set_bounds(250, 250, 1000, 1000)
* Thu 23 Jul 2015 05:06:34 PM JST
self.
* Thu 23 Jul 2015 05:07:28 PM JST
23068673
* Thu 23 Jul 2015 05:10:20 PM JST
from lab.xahk.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Thu 23 Jul 2015 05:11:23 PM JST
c.core.QueryPointer(482).reply().child
* Thu 23 Jul 2015 05:11:47 PM JST
c.core.QueryTree(c.core.QueryPointer(482).reply().child).reply().children
* Thu 23 Jul 2015 05:12:19 PM JST
list(
* Thu 23 Jul 2015 05:12:32 PM JST
482
* Thu 23 Jul 2015 05:17:23 PM JST
self.
* Thu 23 Jul 2015 05:17:41 PM JST
self.assertEqual(window2, cursor.get_under_window())
* Thu 23 Jul 2015 05:17:44 PM JST
window2
* Thu 23 Jul 2015 05:20:07 PM JST
int(self.window)
* Thu 23 Jul 2015 05:20:37 PM JST
client2
* Thu 23 Jul 2015 05:20:54 PM JST
        """
         +------------------------------+
         |  Window1                     |
         |                              |
         |      +-----------------------------+
         |      |  Window2                    |
         |      |                             |
         |      |                             |
         |      |                             |
         |      |                             |
         |      |                             |
         |      |                             |
         |      |                             |
         +------|                             |
                |                             |
                |                             |
                +-----------------------------+

                       ||
                       \/

         +------------------------------+
         |  Window1                     |
         |                              |
         |                              |-----+
         |                              |     |
         |                              |     |
         |                              |     |
         |                              |     |
         |                              |     |
         |                              |     |
         |                              |     |
         |                              |     |
         +------------------------------+     |
                |                             |
                |  Window2                    |
                +-----------------------------+
        """
        self.client.set_bounds(0, 0, 1000, 1000)
        win2 = window2(self.display)
        client2 = WindowClient(
            self.display, win2)
        client2.set_bounds(250, 250, 1000, 1000)
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 500, 500).check()
        sleep(0.2)
        cursor = CursorHandler(self.display)
        self.assertEqual(win2, cursor.get_under_window())
        self.client.raise_window()
        sleep(0.2)
        self.assertEqual(self.client, cursor.get_under_window())
        client2.destroy()

* Thu 23 Jul 2015 05:28:53 PM JST
NET_WM_MOVERESIZE
* Thu 23 Jul 2015 05:32:58 PM JST
clientNetMoveResize
* Thu 23 Jul 2015 06:36:08 PM JST
'_NET_WM_STATE'
* Thu 23 Jul 2015 06:36:24 PM JST
atoms = 
* Thu 23 Jul 2015 06:36:39 PM JST

* Thu 23 Jul 2015 06:36:39 PM JST

* Thu 23 Jul 2015 06:36:39 PM JST
        atom = self.display.core.InternAtom(False)

* Thu 23 Jul 2015 06:36:49 PM JST
la
* Thu 23 Jul 2015 06:36:49 PM JST
form la
* Thu 23 Jul 2015 06:37:25 PM JST
'_NET_WM_STATE'
* Thu 23 Jul 2015 06:37:30 PM JST
'ATOM'
* Thu 23 Jul 2015 06:37:37 PM JST
'_NET_WM_STATE_HIDDEN'
* Thu 23 Jul 2015 06:38:59 PM JST
get_aotm
* Thu 23 Jul 2015 06:39:07 PM JST
'_NET_WM_STATE'
* Thu 23 Jul 2015 06:39:24 PM JST
'_NET_WM_STATE'
* Thu 23 Jul 2015 06:39:26 PM JST
_NET_WM_STATE
* Thu 23 Jul 2015 06:41:04 PM JST
value
* Thu 23 Jul 2015 06:41:06 PM JST
state
* Thu 23 Jul 2015 06:41:26 PM JST
atoms = 
* Thu 23 Jul 2015 06:42:31 PM JST
        reply = self.display.core.GetProperty(
            False, self.client, self.atom_cache.get_atom('_NET_WM_STATE'),
            self.atom_cache.get_atom('ATOM'), 0, 100).reply()
        atoms = unpack('I' * reply.value_len, array('B', reply.value).tostring())

* Thu 23 Jul 2015 06:42:35 PM JST
atoms = 
* Thu 23 Jul 2015 06:42:57 PM JST
self.skipTest('Not Implemented')
* Thu 23 Jul 2015 06:43:14 PM JST
'_NET_WM_STATE_HIDDEN'
* Thu 23 Jul 2015 06:43:30 PM JST

* Thu 23 Jul 2015 06:43:30 PM JST

* Thu 23 Jul 2015 06:43:31 PM JST
        state = self._get_state()

* Thu 23 Jul 2015 06:44:48 PM JST
a
* Thu 23 Jul 2015 06:44:49 PM JST
lsef.a
* Thu 23 Jul 2015 06:45:13 PM JST
self.
* Thu 23 Jul 2015 06:45:19 PM JST
self.atom_cache.get_atom('_NET_WM_STATE_HIDDEN'),
                         self._get_state()
* Thu 23 Jul 2015 06:45:31 PM JST
client.
* Thu 23 Jul 2015 06:45:31 PM JST
self.client.
* Thu 23 Jul 2015 06:46:30 PM JST
        self.assertNotIn(self.atom_cache.get_atom('_NET_WM_STATE_HIDDEN'),
                         self._get_state())
        self.assertFalse(self.client.is_minimized())
        self.client.minimize()
        sleep(0.2)
        self.assertIn(self.atom_cache.get_atom('_NET_WM_STATE_HIDDEN'),
                      self._get_state())
        self.assertTrue(self.client.is_minimized())

* Thu 23 Jul 2015 06:46:34 PM JST
minimize
* Thu 23 Jul 2015 06:46:57 PM JST
'_NET_WM_STATE_MAXIMIZED_VERT'
* Thu 23 Jul 2015 06:47:03 PM JST
        self.assertNotIn(self.atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT'),
                         self._get_state())

* Thu 23 Jul 2015 06:47:12 PM JST
'_NET_WM_STATE_MAXIMIZED_HORZ'
* Thu 23 Jul 2015 06:47:19 PM JST
        self.assertNotIn(self.atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT'),
                         self._get_state())
        self.assertNotIn(self.atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_HORZ'),
                         self._get_state())

* Thu 23 Jul 2015 06:48:20 PM JST
        self.assertNotIn(self.atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT'),
                         self._get_state())
        self.assertNotIn(self.atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_HORZ'),
                         self._get_state())
        self.assertFalse(self.client.is_minimized())
        self.client.maximize()
        sleep(0.2)
        self.assertIn(self.atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT'),
                         self._get_state())
        self.assertIn(self.atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_HORZ'),
                         self._get_state())
        self.assertTrue(self.client.is_maximized())

* Thu 23 Jul 2015 06:48:27 PM JST
self.skipTest('Not Implemented')
* Thu 23 Jul 2015 06:49:16 PM JST
c.core.GetProperty
* Thu 23 Jul 2015 06:49:27 PM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.tests.test_window_client import *
w1=window1(c)
w2=window1(c)
wc1=WindowClient(c, w1)
wc2=WindowClient(c, w2)

* Thu 23 Jul 2015 06:49:32 PM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.tests.test_window_client import *

* Thu 23 Jul 2015 06:49:36 PM JST
w1=window1(c)
* Thu 23 Jul 2015 06:49:48 PM JST
wc1=WindowClient(c, w1)
* Thu 23 Jul 2015 06:57:59 PM JST
67108864
* Thu 23 Jul 2015 10:09:36 PM JST
w1=window1(c)
* Thu 23 Jul 2015 10:09:56 PM JST
wc1=WindowClient(c, w1)
* Thu 23 Jul 2015 10:10:20 PM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.tests.test_window_client import *
w1=window1(c)
wc1=WindowClient(c, w1)

* Thu 23 Jul 2015 10:12:23 PM JST
        self.assertNotIn(self.atom_cache.get_atom('_NET_WM_STATE_HIDDEN'),
                         self._get_state())
        self.assertFalse(self.client.is_minimized())
        self.client.minimize()
        sleep(0.2)

* Thu 23 Jul 2015 10:12:50 PM JST
fcli
* Thu 23 Jul 2015 10:12:51 PM JST
sle.fcli
* Thu 23 Jul 2015 10:15:24 PM JST
client.
* Thu 23 Jul 2015 10:15:25 PM JST
self.client.
* Thu 23 Jul 2015 10:15:31 PM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.tests.test_window_client import *
w1=window1(c)
wc1=WindowClient(c, w1)

* Thu 23 Jul 2015 10:15:49 PM JST
maximize
* Thu 23 Jul 2015 10:16:15 PM JST
is_minimized
* Thu 23 Jul 2015 10:16:31 PM JST
is_
* Thu 23 Jul 2015 10:16:32 PM JST
client.is_
* Thu 23 Jul 2015 10:16:32 PM JST
self.client.is_
* Thu 23 Jul 2015 10:16:44 PM JST
        
* Thu 23 Jul 2015 10:16:45 PM JST
is_maximized
* Thu 23 Jul 2015 10:17:23 PM JST
        self.assertTrue(self.client.is_maximized())
        self.assertTrue(self.client.is_minimized())

* Thu 23 Jul 2015 10:18:17 PM JST
        win2 = window2(self.display)

* Thu 23 Jul 2015 10:19:26 PM JST
self.
* Thu 23 Jul 2015 10:19:41 PM JST
self.
* Thu 23 Jul 2015 10:19:42 PM JST
self.assertEqual(self.client, self.root.get_active_window())
* Thu 23 Jul 2015 10:20:28 PM JST
        client2 = WindowClient(
            self.display, win2)

* Thu 23 Jul 2015 10:20:47 PM JST
win2
* Thu 23 Jul 2015 10:32:07 PM JST
        self.client.set_bounds(0, 0, 1000, 1000)
        win2 = window2(self.display)
        client2 = WindowClient(self.display, win2)
        client2.set_bounds(250, 250, 1000, 1000)
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 500, 500).check()
        sleep(0.2)
        cursor = CursorHandler(self.display)
        self.assertEqual(win2, cursor.get_under_window())
        self.client.raise_window()
        sleep(0.2)
        self.assertEqual(self.client, cursor.get_under_window())
        client2.destroy()

* Thu 23 Jul 2015 10:32:32 PM JST
raise_window
* Thu 23 Jul 2015 10:33:19 PM JST
self
* Thu 23 Jul 2015 10:33:41 PM JST
self.assertEqual(self.client, cursor.get_under_window())
* Thu 23 Jul 2015 10:34:26 PM JST
self.assertTrue(self.client.is_always_on_top())
* Thu 23 Jul 2015 10:35:21 PM JST
        self.client.set_bounds(0, 0, 1000, 1000)
        win2 = window2(self.display)
        client2 = WindowClient(self.display, win2)
        client2.set_bounds(250, 250, 1000, 1000)
        self.display.core.WarpPointerChecked(
            0, self.root, 0, 0, 0, 0, 500, 500).check()
        sleep(0.2)
        cursor = CursorHandler(self.display)
        self.assertFalse(self.client.is_always_on_top())
        self.assertEqual(win2, cursor.get_under_window())
        self.client.set_always_on_top()
        sleep(0.2)
        self.assertEqual(self.client, cursor.get_under_window())
        self.assertTrue(self.client.is_always_on_top())
        client2.raise_window()
        sleep(0.2)
        self.assertEqual(self.client, cursor.get_under_window())
        client2.destroy()

* Thu 23 Jul 2015 10:38:11 PM JST
raise
* Thu 23 Jul 2015 10:38:21 PM JST
self.assertEqual(win2, cursor.get_under_window())
* Thu 23 Jul 2015 10:38:39 PM JST

* Thu 23 Jul 2015 10:38:39 PM JST

* Thu 23 Jul 2015 10:38:39 PM JST
        sleep(0.2)

* Thu 23 Jul 2015 10:39:03 PM JST
self.assertTrue(self.client.is_always_on_top())
* Thu 23 Jul 2015 10:43:51 PM JST
        self.assertNotIn(self.atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT'),
                         self._get_state())
        self.assertNotIn(self.atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_HORZ'),
                         self._get_state())
        self.assertFalse(self.client.is_minimized())
        self.client.maximize()
        sleep(0.2)
        self.assertIn(self.atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_VERT'),
                         self._get_state())
        self.assertIn(self.atom_cache.get_atom('_NET_WM_STATE_MAXIMIZED_HORZ'),
                         self._get_state())
        self.assertTrue(self.client.is_maximized())

* Thu 23 Jul 2015 10:44:10 PM JST
'_NET_WM_STATE_BELOW'
* Thu 23 Jul 2015 10:44:29 PM JST
'_NET_WM_STATE_BELOW'
* Thu 23 Jul 2015 10:44:39 PM JST

* Thu 23 Jul 2015 10:44:39 PM JST

* Thu 23 Jul 2015 10:44:39 PM JST
        self.assertTrue(self.client.is_maximized())

* Thu 23 Jul 2015 10:44:42 PM JST
        self.assertNotIn(self.atom_cache.get_atom('_NET_WM_STATE_BELOW'),
                         self._get_state())

* Thu 23 Jul 2015 10:44:49 PM JST
        self.assertIn(self.atom_cache.get_atom('_NET_WM_STATE_BELOW'),
                         self._get_state())

* Thu 23 Jul 2015 10:44:59 PM JST

* Thu 23 Jul 2015 10:44:59 PM JST

* Thu 23 Jul 2015 10:44:59 PM JST
        self.client.set_bounds(0, 0, 1000, 1000)

* Thu 23 Jul 2015 10:45:02 PM JST
        self.assertFalse(self.client.is_always_on_bottom())
        self.assertNotIn(self.atom_cache.get_atom('_NET_WM_STATE_BELOW'),
                         self._get_state())
        self.client.set_always_on_bottom()
        sleep(0.2)
        self.assertIn(self.atom_cache.get_atom('_NET_WM_STATE_BELOW'),
                         self._get_state())
        self.assertTrue(self.client.is_always_on_bottom())

* Thu 23 Jul 2015 10:45:20 PM JST
'_NET_WM_STATE_FULLSCREEN'
* Thu 23 Jul 2015 10:45:31 PM JST
set_fullscreen
* Thu 23 Jul 2015 10:45:44 PM JST
set
* Thu 23 Jul 2015 10:45:49 PM JST
self.client.is_fullscreened()
* Thu 23 Jul 2015 10:46:02 PM JST
                         
* Thu 23 Jul 2015 10:46:31 PM JST
        self.assertFalse(self.client.is_fullscreened())
        self.assertNotIn(self.atom_cache.get_atom('_NET_WM_STATE_FULLSCREEN'),
                         self._get_state())
        self.client.set_fullscreen()
        sleep(0.2)
        self.assertIn(self.atom_cache.get_atom('_NET_WM_STATE_FULLSCREEN'),
                      self._get_state())
        self.assertTrue(self.client.is_fullscreened())

* Thu 23 Jul 2015 10:46:37 PM JST
'_NET_WM_STATE_SHADED'
* Thu 23 Jul 2015 11:01:53 PM JST
SEC)
* Thu 23 Jul 2015 11:01:54 PM JST
sleep(SEC)
* Thu 23 Jul 2015 11:01:54 PM JST
self.sleep(SEC)
* Thu 23 Jul 2015 11:02:00 PM JST
self.assertIn(self.client, self.root.client_list())
* Thu 23 Jul 2015 11:04:54 PM JST
_NET_CLOSE_WINDOW
* Thu 23 Jul 2015 11:06:11 PM JST
SubstructureRedirectMask | SubstructureNotifyMask
* Thu 23 Jul 2015 11:06:19 PM JST
EventMask.
* Thu 23 Jul 2015 11:06:55 PM JST
EventMask.SubstructureRedirect|EventMask.SubstructureNotify
* Thu 23 Jul 2015 11:09:50 PM JST
f
* Thu 23 Jul 2015 11:09:50 PM JST
sle.f
* Thu 23 Jul 2015 11:10:01 PM JST
self.need_destroy
* Thu 23 Jul 2015 11:10:37 PM JST
client
* Thu 23 Jul 2015 11:10:43 PM JST
None
* Thu 23 Jul 2015 11:11:37 PM JST
        win2 = window2(self.display)
        client2 = WindowClient(self.display, win2)

* Thu 23 Jul 2015 11:11:42 PM JST

* Thu 23 Jul 2015 11:11:42 PM JST

* Thu 23 Jul 2015 11:11:42 PM JST
        self.assertIn(self.client, self.root.client_list())

* Thu 23 Jul 2015 11:11:46 PM JST
self.
* Thu 23 Jul 2015 11:11:52 PM JST
self.
* Thu 23 Jul 2015 11:12:00 PM JST
self.
* Thu 23 Jul 2015 11:12:03 PM JST

* Thu 23 Jul 2015 11:12:03 PM JST

* Thu 23 Jul 2015 11:12:03 PM JST
        self.need_destroy = False

* Thu 23 Jul 2015 11:12:14 PM JST
client2
* Thu 23 Jul 2015 11:13:06 PM JST
w1=window1(c)
wc1=WindowClient(c, w1)

* Thu 23 Jul 2015 11:41:44 PM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.tests.test_window_client import *
w1=window1(c)
wc1=WindowClient(c, w1)

* Thu 23 Jul 2015 11:43:20 PM JST
w1=window1(c)
* Thu 23 Jul 2015 11:47:05 PM JST
clientClose
* Thu 23 Jul 2015 11:54:59 PM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Thu 23 Jul 2015 11:55:08 PM JST
wm.list_windows()
* Thu 23 Jul 2015 11:56:33 PM JST
wm=WindowManager(c)
* Thu 23 Jul 2015 11:57:07 PM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Thu 23 Jul 2015 11:59:38 PM JST
54525974
* Thu 23 Jul 2015 11:59:55 PM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.tests.test_window_client import *
w1=window1(c)
wc1=WindowClient(c, w1)

* Fri 24 Jul 2015 12:00:04 AM JST
62914560
* Fri 24 Jul 2015 12:54:15 AM JST
self.skipTest('Connection error')
* Fri 24 Jul 2015 12:54:29 AM JST
    def test_query_pointer(self, ):
        self.skipTest('Not Implemented')

    def test_get_cursor_point(self, ):
        self.skipTest('Not Implemented')


* Fri 24 Jul 2015 01:54:13 AM JST
                         
* Fri 24 Jul 2015 01:54:25 AM JST
states = self._get_state()
* Fri 24 Jul 2015 01:55:35 AM JST
self._get_state()
* Fri 24 Jul 2015 01:55:40 AM JST
list(self._get_state())
* Fri 24 Jul 2015 01:56:39 AM JST
            
* Fri 24 Jul 2015 01:56:45 AM JST
            
* Fri 24 Jul 2015 01:56:51 AM JST
            
* Fri 24 Jul 2015 01:56:54 AM JST
            
* Fri 24 Jul 2015 01:58:51 AM JST
self.client.set_bounds(0, 0, 1000, 1000)
* Fri 24 Jul 2015 02:00:03 AM JST

* Fri 24 Jul 2015 02:00:03 AM JST

* Fri 24 Jul 2015 02:00:03 AM JST
        self.client.set_bounds(0, 0, 500, 500)

* Fri 24 Jul 2015 02:00:06 AM JST
list(
* Fri 24 Jul 2015 02:00:10 AM JST
list(
* Fri 24 Jul 2015 02:02:43 AM JST
self.client.set_bounds(0, 0, 1000, 1000)
* Fri 24 Jul 2015 02:03:18 AM JST
self.client.set_bounds(0, 0, 500, 500)
* Fri 24 Jul 2015 02:03:35 AM JST
# do not remove
* Fri 24 Jul 2015 02:15:43 AM JST
xa
* Fri 24 Jul 2015 02:15:43 AM JST
form xa
* Fri 24 Jul 2015 02:16:40 AM JST
Root
* Fri 24 Jul 2015 02:17:20 AM JST
WindowSpec
* Fri 24 Jul 2015 02:17:31 AM JST
WindowAnySpec
* Fri 24 Jul 2015 02:17:36 AM JST
WindowIDSpec
* Fri 24 Jul 2015 02:17:43 AM JST
WindowTitleSpec
* Fri 24 Jul 2015 02:17:49 AM JST
WindowWMClassSpec
* Fri 24 Jul 2015 02:19:15 AM JST

* Fri 24 Jul 2015 02:19:17 AM JST
eventloop 
* Fri 24 Jul 2015 02:19:21 AM JST
EventLoop
* Fri 24 Jul 2015 02:20:27 AM JST
MouseEvent
* Fri 24 Jul 2015 02:20:32 AM JST
Event
* Fri 24 Jul 2015 02:20:41 AM JST
KeyEvent
* Fri 24 Jul 2015 02:20:45 AM JST
MouseEvent
* Fri 24 Jul 2015 02:20:55 AM JST
EventLoop
* Fri 24 Jul 2015 02:21:02 AM JST
EventDispatcher
* Fri 24 Jul 2015 02:21:08 AM JST
EventListener
* Fri 24 Jul 2015 02:21:15 AM JST
Event, KeyEvent, MouseEvent
* Fri 24 Jul 2015 02:21:36 AM JST
EventTarget
* Fri 24 Jul 2015 02:21:44 AM JST
EventHandler
* Fri 24 Jul 2015 02:23:28 AM JST

* Fri 24 Jul 2015 02:23:28 AM JST
InputEventHandler
* Fri 24 Jul 2015 02:23:30 AM JST
input_event_handler
* Fri 24 Jul 2015 02:23:49 AM JST

* Fri 24 Jul 2015 02:23:54 AM JST
KeyBindServiceObserver
* Fri 24 Jul 2015 02:25:33 AM JST
from xahk.binder.mouse_bind_service import MouseBindService
* Fri 24 Jul 2015 02:27:30 AM JST
ButtonIndex, ModifierMask
* Fri 24 Jul 2015 02:27:56 AM JST
from xahk.binder.listener_observer import ListenerObserver
* Fri 24 Jul 2015 02:28:09 AM JST
Accelerator
* Fri 24 Jul 2015 02:28:44 AM JST
from xahk.binder.accelerator import Accelerator
from xahk.binder.candidate_observer import CandidateObserver
from xahk.binder.candidate import Candidate
from xahk.binder.input_event_handler import InputEventHandler
from xahk.binder.key_bind_service_observer import KeyBindServiceObserver
from xahk.binder.key_bind_service import KeyBindService
from xahk.binder.mouse_bind_service import MouseBindService
from xahk.binder.define import ButtonIndex, ModifierMask
from xahk.binder.listener_observer import ListenerObserver

* Fri 24 Jul 2015 02:29:22 AM JST
from xahk.binder.listener_observer import 
* Fri 24 Jul 2015 02:29:22 AM JST
from xahk.binder.define import 
* Fri 24 Jul 2015 02:29:23 AM JST
from xahk.binder.mouse_bind_service import 
* Fri 24 Jul 2015 02:29:23 AM JST
from xahk.binder.key_bind_service import 
* Fri 24 Jul 2015 02:29:23 AM JST
from xahk.binder.key_bind_service_observer import 
* Fri 24 Jul 2015 02:29:23 AM JST
from xahk.binder.input_event_handler import 
* Fri 24 Jul 2015 02:29:23 AM JST
from xahk.binder.candidate import 
* Fri 24 Jul 2015 02:29:23 AM JST
from xahk.binder.candidate_observer import 
* Fri 24 Jul 2015 02:29:23 AM JST
from xahk.binder.accelerator import 
* Fri 24 Jul 2015 02:29:55 AM JST

* Fri 24 Jul 2015 02:29:56 AM JST

* Fri 24 Jul 2015 02:29:56 AM JST
'Accelerator'

* Fri 24 Jul 2015 02:30:10 AM JST
'CandidateObserver', 
'Candidate', 
'InputEventHandler', 
'KeyBindServiceObserver', 
'KeyBindService', 
'MouseBindService', 
'ButtonIndex', 'ModifierMask', 
'ListenerObserver', 

* Fri 24 Jul 2015 02:32:46 AM JST
from xahk.keyboard_lock import KeyboardLock
* Fri 24 Jul 2015 02:32:52 AM JST
KeyboardLock
* Fri 24 Jul 2015 02:34:30 AM JST
from xahk.piece.x11_piece import X11Key, X11Button
* Fri 24 Jul 2015 02:34:38 AM JST
X11Key, X11Button
* Fri 24 Jul 2015 02:35:02 AM JST
x11_piece
* Fri 24 Jul 2015 02:35:07 AM JST
input_event_handler
* Fri 24 Jul 2015 02:35:18 AM JST
define
* Fri 24 Jul 2015 02:35:26 AM JST
listener_observer
* Fri 24 Jul 2015 02:35:28 AM JST
key_bind_service_observer
* Fri 24 Jul 2015 02:35:42 AM JST
keyboard_lock
* Fri 24 Jul 2015 02:36:13 AM JST
BadAccess, 
* Fri 24 Jul 2015 03:04:58 AM JST
${HOME}/.pylib
* Fri 24 Jul 2015 03:28:01 AM JST
:${HOME}/pylab
* Fri 24 Jul 2015 03:32:28 AM JST
Rectangle
* Fri 24 Jul 2015 03:34:15 AM JST
_spec
* Fri 24 Jul 2015 03:34:16 AM JST
self._spec
* Fri 24 Jul 2015 03:35:18 AM JST
fget
* Fri 24 Jul 2015 03:58:08 AM JST
_prop
* Fri 24 Jul 2015 03:58:08 AM JST
self._prop
* Fri 24 Jul 2015 03:58:51 AM JST
get_bounds()
* Fri 24 Jul 2015 04:01:30 AM JST
r
* Fri 24 Jul 2015 04:01:30 AM JST
form r
* Fri 24 Jul 2015 04:02:32 AM JST
new
* Fri 24 Jul 2015 04:02:34 AM JST
new
* Fri 24 Jul 2015 04:14:51 AM JST

* Fri 24 Jul 2015 04:14:51 AM JST

* Fri 24 Jul 2015 04:14:51 AM JST
from xahk.wm import WindowManager

* Fri 24 Jul 2015 04:16:35 AM JST
form 
* Fri 24 Jul 2015 04:16:46 AM JST
WindowManager
* Fri 24 Jul 2015 04:17:09 AM JST
WindowManager
* Fri 24 Jul 2015 04:17:35 AM JST
WindowClass
* Fri 24 Jul 2015 04:17:57 AM JST
WindowWMClassSpec
* Fri 24 Jul 2015 04:18:09 AM JST
'Thunar'
* Fri 24 Jul 2015 04:18:45 AM JST

* Fri 24 Jul 2015 04:18:45 AM JST

* Fri 24 Jul 2015 04:19:26 AM JST

* Fri 24 Jul 2015 04:19:26 AM JST

* Fri 24 Jul 2015 04:19:26 AM JST
from xahk import 

* Fri 24 Jul 2015 04:20:17 AM JST
CLASS
* Fri 24 Jul 2015 04:20:27 AM JST
WindowManager(Display()).list_windows(WindowWMClassSpec(CLASS))
* Fri 24 Jul 2015 04:29:20 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.window_manager import _WindowManager
wm=_WindowManager(c)
wm.list_windows()

* Fri 24 Jul 2015 04:29:35 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Fri 24 Jul 2015 04:29:42 AM JST
['Thunar', 'Thunar']
* Fri 24 Jul 2015 04:32:30 AM JST
WindowWMClassSpec
* Fri 24 Jul 2015 04:36:59 AM JST
MYENV = os.environ
MYENV['LANG'] = 'en_US.UTF-8'

* Fri 24 Jul 2015 04:37:10 AM JST
MYENV
* Fri 24 Jul 2015 04:37:13 AM JST
MYENV
* Fri 24 Jul 2015 04:37:43 AM JST
(BINPATH, self.dir), env=MYENV
* Fri 24 Jul 2015 04:37:54 AM JST
'/usr/bin/thunar'
* Fri 24 Jul 2015 04:38:14 AM JST
BINPATH
* Fri 24 Jul 2015 04:38:19 AM JST
dir
* Fri 24 Jul 2015 04:38:19 AM JST
self.dir
* Fri 24 Jul 2015 04:38:23 AM JST
MYENV
* Fri 24 Jul 2015 04:38:56 AM JST
In [6]: 
* Fri 24 Jul 2015 04:38:57 AM JST
from ref.CMD.thunar import *
* Fri 24 Jul 2015 04:39:58 AM JST
from ref.CMD.thunar import *
* Fri 24 Jul 2015 04:41:44 AM JST
ThunarManager
* Fri 24 Jul 2015 04:46:43 AM JST
bitmask
* Fri 24 Jul 2015 04:56:37 AM JST
on_created_window_listener
* Fri 24 Jul 2015 05:02:36 AM JST
'ピンポイント天気（大津） - ウェザーニュース - Google Chrome'
* Fri 24 Jul 2015 05:03:03 AM JST
1280
* Fri 24 Jul 2015 05:03:39 AM JST
575
* Fri 24 Jul 2015 05:03:49 AM JST
    
* Fri 24 Jul 2015 05:06:10 AM JST
'気象庁 | 天気予報 - Google Chrome'
* Fri 24 Jul 2015 05:06:17 AM JST
x=1280, y=0, width=560, height=575
* Fri 24 Jul 2015 05:06:27 AM JST
1840
* Fri 24 Jul 2015 05:07:37 AM JST
    
* Fri 24 Jul 2015 05:07:48 AM JST
    
* Fri 24 Jul 2015 05:08:35 AM JST
'雨雲レーダー - ウェザーニュース - Google Chrome'
* Fri 24 Jul 2015 05:08:40 AM JST
x=1840, y=0, width=560, height=575
* Fri 24 Jul 2015 05:09:16 AM JST
'気象庁 | 天気図 - Google Chrome'
* Fri 24 Jul 2015 05:09:22 AM JST
x=1840, y=0, width=560, height=575
* Fri 24 Jul 2015 05:09:41 AM JST
W_
* Fri 24 Jul 2015 05:09:59 AM JST
'気象庁 | 異常天候早期警戒情報 - Google Chrome'
* Fri 24 Jul 2015 05:10:13 AM JST
x=1840, y=0, width=560, height=575
* Fri 24 Jul 2015 05:10:56 AM JST
'衛星画像 - ウェザーニュース - Google Chrome'
* Fri 24 Jul 2015 05:11:01 AM JST
x=1840, y=0, width=560, height=575
* Fri 24 Jul 2015 05:11:14 AM JST
2400
* Fri 24 Jul 2015 05:11:25 AM JST
2400
* Fri 24 Jul 2015 05:11:35 AM JST
1280
* Fri 24 Jul 2015 05:11:56 AM JST
370
* Fri 24 Jul 2015 05:12:10 AM JST
675
* Fri 24 Jul 2015 05:12:31 AM JST
1840
* Fri 24 Jul 2015 05:12:40 AM JST
2400
* Fri 24 Jul 2015 05:14:09 AM JST
_INFO
* Fri 24 Jul 2015 06:00:24 AM JST
'The Moon Age Calendar 満月を月齢カレンダーで探そう - Google Chrome'
* Fri 24 Jul 2015 06:02:47 AM JST
eventloo
* Fri 24 Jul 2015 06:03:22 AM JST

* Fri 24 Jul 2015 06:03:23 AM JST
Observer
* Fri 24 Jul 2015 06:04:05 AM JST
from mygoogle import chrome
* Fri 24 Jul 2015 06:04:06 AM JST
from mygoogle import chrome
from mygoogle.chrome.variables import DEFAULT_OPTS as CHROME_OPTS

* Fri 24 Jul 2015 06:04:21 AM JST
urls = list(chrome.ChromeBMParse(WEATHER_FOLDER))
* Fri 24 Jul 2015 06:04:32 AM JST
    for url in urls:
        chrome.run(url, options=CHROME_OPTIONS)

* Fri 24 Jul 2015 06:04:50 AM JST
'【天気】'
* Fri 24 Jul 2015 06:05:00 AM JST
CHROME_OPTIONS = CHROME_OPTS + ['--new-window']
* Fri 24 Jul 2015 06:07:04 AM JST
W_PINPOINT_INFO
* Fri 24 Jul 2015 06:07:13 AM JST
W_ZENKOKU_INFO
* Fri 24 Jul 2015 06:07:23 AM JST
W_RAINRADAR_INFO
* Fri 24 Jul 2015 06:07:31 AM JST
    
* Fri 24 Jul 2015 06:07:35 AM JST
W_MAPPING_INFO
* Fri 24 Jul 2015 06:07:45 AM JST
W_SATELLITE_INFO
* Fri 24 Jul 2015 06:07:52 AM JST
W_WARNING_INFO
* Fri 24 Jul 2015 06:08:05 AM JST
W_MOON_INFO
* Fri 24 Jul 2015 06:10:46 AM JST
self.windows.remove(window_id)
* Fri 24 Jul 2015 06:12:52 AM JST
self.
* Fri 24 Jul 2015 02:03:35 PM JST
'\x00\x01\x00\x00\x03\x00 \x04\x00\x00\x18\x00! \x00\x00\x03\x00 \x04^\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Fri 24 Jul 2015 02:10:14 PM JST
import daily
* Fri 24 Jul 2015 04:35:46 PM JST
"""                                                    
                   intersects                          
              +----  Width   ----+                     
              |                  |                     
                                                       
+--------------------------------+                     
|                                |                     
|                                |                     
|                                |                         
|                                |                         
|             +------------------+-------------+  -- +      
|             |..................|             |     |     
|             |..................|             |     |     
|             |..................|             |     |     
|             |..................|             |  intersects
|             |..................|             |    height  
|             |..................|             |     |     
|             |..................|             |     | 
|             |..................|             |     | 
+-------------+------------------+             |  -- +  
              |                                |       
              |                                |       
              |                                |       
              |                                |       
              |                                |       
              +--------------------------------+       
                                                       
"""

* Fri 24 Jul 2015 04:36:24 PM JST
"""
* Fri 24 Jul 2015 04:36:31 PM JST
"""
* Fri 24 Jul 2015 04:44:42 PM JST
+--------------------- united.width ---------------------+         
|                                                        |         
|                                                        |         
                                                                   
+-------------------------------+------------------------+  --+    
|...............................|                        |    |    
|...............................|                        |    |    
|...............................|                        |    |    
|...............................|                        |    |    
|...............................|------------------------+    |    
|...............................|........................|    |    
|...............................|........................|    |    
|...............................|........................|    |    
|...............................|........................|    |    
|...............................|........................|  united 
|...............................|........................|  height 
+-------------------------------+........................|    |    
|             |..........................................|    |    
|             |..........................................|    |
|             |..........................................|    |
|             |..........................................|    |
|             |..........................................|    |
|             |..........................................|    |
|             |..........................................|    |
|             |..........................................|    |
|             |..........................................|    |
|             |..........................................|    |
+-------------+------------------------------------------+  --+ 

* Fri 24 Jul 2015 04:45:20 PM JST
+---------------------- union.width ---------------------+         
|                                                        |         
|                                                        |         
                                                                   
+-------------------------------+------------------------+  --+    
|...............................|                        |    |    
|...............................|                        |    |    
|...............................|                        |    |    
|...............................|                        |    |    
|...............................|------------------------+    |    
|...............................|........................|    |    
|...............................|........................|    |    
|...............................|........................|    |    
|...............................|........................|    |    
|...............................|........................|  union 
|...............................|........................|  height 
+-------------------------------+........................|    |    
|             |..........................................|    |    
|             |..........................................|    |
|             |..........................................|    |
|             |..........................................|    |
|             |..........................................|    |
|             |..........................................|    |
|             |..........................................|    |
|             |..........................................|    |
|             |..........................................|    |
|             |..........................................|    |
+-------------+------------------------------------------+  --+ 

* Fri 24 Jul 2015 05:14:03 PM JST
Rectangle
* Fri 24 Jul 2015 05:14:57 PM JST
r.height / 7
* Fri 24 Jul 2015 05:22:17 PM JST
rectangle/
* Fri 24 Jul 2015 05:22:18 PM JST
pylib/rectangle/
* Fri 24 Jul 2015 05:23:01 PM JST
                           intersects
                      +----  Width   ----+
                      |                  |

        +--------------------------------+
        |                                |
        |                                |
        |                                |
        |                                |
        |             +------------------+-------------+  -- +
        |             |..................|             |     |
        |             |..................|             |     |
        |             |..................|             |     |
        |             |..................|             |  intersects
        |             |..................|             |    height
        |             |..................|             |     |
        |             |..................|             |     |
        |             |..................|             |     |
        +-------------+------------------+             |  -- +
                      |                                |
                      |                                |
                      |                                |
                      |                                |
                      |                                |
                      +--------------------------------+

* Fri 24 Jul 2015 05:23:19 PM JST
        +---------------------- union.width ---------------------+
        |                                                        |
        |                                                        |

        +-------------------------------+------------------------+  --+
        |...............................|                        |    |
        |...............................|                        |    |
        |...............................|                        |    |
        |...............................|                        |    |
        |...............................|------------------------+    |
        |...............................|........................|    |
        |...............................|........................|    |
        |...............................|........................|    |
        |...............................|........................|    |
        |...............................|........................|  union
        |...............................|........................|  height
        +-------------------------------+........................|    |
        |             |..........................................|    |
        |             |..........................................|    |
        |             |..........................................|    |
        |             |..........................................|    |
        |             |..........................................|    |
        |             |..........................................|    |
        |             |..........................................|    |
        |             |..........................................|    |
        |             |..........................................|    |
        |             |..........................................|    |
        +-------------+------------------------------------------+  --+

* Fri 24 Jul 2015 05:23:34 PM JST
    def split_vertical(self, num):
        r"""SUMMARY

        split_vertical(num)

        @Arguments:
        - `num`:

        @Return:

        @Error:
        """
        if num <= 0:
            raise ValueError('num require integer than 0 (got {})'.format(num))

* Fri 24 Jul 2015 05:23:51 PM JST
rectangle/
* Fri 24 Jul 2015 05:23:51 PM JST
pylib/rectangle/
* Fri 24 Jul 2015 05:55:40 PM JST
hei
* Fri 24 Jul 2015 05:55:41 PM JST
self.hei
* Fri 24 Jul 2015 05:57:49 PM JST
from rectangle Rectangle
* Fri 24 Jul 2015 05:57:51 PM JST
from rectangle import *
* Fri 24 Jul 2015 05:58:02 PM JST
from rectangle import *
r=Rectangle(0,0,100, 1000)
r.split_vertical(2)

* Fri 24 Jul 2015 05:58:54 PM JST
r.split_vertical(2)
* Fri 24 Jul 2015 05:59:21 PM JST
y
* Fri 24 Jul 2015 05:59:22 PM JST
self.y
* Fri 24 Jul 2015 06:00:51 PM JST
self.y
* Fri 24 Jul 2015 06:02:13 PM JST
raise ValueError('num require integer than 0 (got {})'.format(num))
* Fri 24 Jul 2015 06:02:51 PM JST
self
* Fri 24 Jul 2015 06:03:19 PM JST
x
* Fri 24 Jul 2015 06:03:19 PM JST
self.x
* Fri 24 Jul 2015 06:03:46 PM JST
new
* Fri 24 Jul 2015 06:03:46 PM JST
x, new
* Fri 24 Jul 2015 06:03:47 PM JST
self.x, new
* Fri 24 Jul 2015 06:03:56 PM JST
self
* Fri 24 Jul 2015 06:03:56 PM JST
width, self
* Fri 24 Jul 2015 06:03:57 PM JST
self.width, self
* Fri 24 Jul 2015 06:04:05 PM JST
            
* Fri 24 Jul 2015 06:04:36 PM JST
from rectangle import *
r=Rectangle(0,0,100, 1000)

* Fri 24 Jul 2015 06:06:36 PM JST
rects.
* Fri 24 Jul 2015 06:06:38 PM JST
rects, append = ListDotAvoider().append
* Fri 24 Jul 2015 06:06:45 PM JST
rects.
* Fri 24 Jul 2015 06:13:13 PM JST
NET
* Fri 24 Jul 2015 06:13:14 PM JST
NET_WM_PING
* Fri 24 Jul 2015 06:16:15 PM JST
EventMask.SubstructureRedirect|EventMask.SubstructureNotify,
* Fri 24 Jul 2015 06:16:22 PM JST
self._atom_cache.get_atom('WM_PROTOCOLS'),
* Fri 24 Jul 2015 06:16:32 PM JST
self._atom_cache.get_atom('WM_DELETE_WINDOW'), 0, 0, 0, 0
* Fri 24 Jul 2015 06:16:36 PM JST
WM_DELETE_WINDOW
* Fri 24 Jul 2015 06:17:12 PM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.window_manager import WindowManager
wm=WindowManager(c)

* Fri 24 Jul 2015 06:17:24 PM JST
lab.
* Fri 24 Jul 2015 06:17:26 PM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from xahk.wm.window_manager import WindowManager
wm=WindowManager(c)

* Fri 24 Jul 2015 06:17:30 PM JST
wm.list_windows()
* Fri 24 Jul 2015 06:19:49 PM JST
ping()
* Fri 24 Jul 2015 11:38:34 PM JST
_layouts
* Fri 24 Jul 2015 11:39:36 PM JST
window
* Fri 24 Jul 2015 11:39:46 PM JST
window
* Fri 24 Jul 2015 11:39:48 PM JST
window
* Fri 24 Jul 2015 11:43:42 PM JST
self
* Fri 24 Jul 2015 11:43:52 PM JST
client
* Fri 24 Jul 2015 11:45:39 PM JST
title
* Fri 24 Jul 2015 11:46:07 PM JST
VerticalLayout
* Fri 24 Jul 2015 11:46:44 PM JST
.get_bounds()
* Fri 24 Jul 2015 11:46:53 PM JST
wm.list_windows()[-4]
* Fri 24 Jul 2015 11:48:05 PM JST
v.add_client(
* Fri 24 Jul 2015 11:50:05 PM JST
get_bounds()
* Fri 24 Jul 2015 11:50:22 PM JST
titl
* Sat 25 Jul 2015 12:06:35 AM JST
class VerticalLayout(object):
    r"""VerticalLayout

    VerticalLayout is a object.
    Responsibility:
    """
    def __init__(self, rectangle):
        r"""

        @Arguments:
        - `rectangle`:
        """
        self._rectangle = rectangle
        self._clients = []

    def add_client(self, client):
        r"""SUMMARY

        add_clientl(client)

        @Arguments:
        - `client`:

        @Return:

        @Error:
        """
        self._clients.append(client)

    def remove_client(self, client):
        r"""SUMMARY

        remove_client(client)

        @Arguments:
        - `client`:

        @Return:

        @Error:
        """
        self._clients.remove(client)

    def set_bounds(self, newx, newy, width, height):
        r"""SUMMARY

        set_bounds(newx, newy, width, height)

        @Arguments:
        - `newx`:
        - `newy`:
        - `width`:
        - `height`:

        @Return:

        @Error:
        """
        self._rectangle.set_bounds([newx, newy, width, height])
        self.layout()

    def layout(self, ):
        r"""SUMMARY

        layout()

        @Return:

        @Error:
        """
        rects = self._rectangle.split_vertical(len(self._clients))
        for rect, client in zip(rects, self._clients):
            client.set_bounds(rect.x, rect.y, rect.width, rect.height)

* Sat 25 Jul 2015 12:08:29 AM JST
Vertical
* Sat 25 Jul 2015 12:08:33 AM JST
Vertical
* Sat 25 Jul 2015 12:08:40 AM JST
Vertical
* Sat 25 Jul 2015 12:09:02 AM JST
get_bounds()
* Sat 25 Jul 2015 12:09:49 AM JST
title
* Sat 25 Jul 2015 12:10:21 AM JST
wm.list_windows()[-4]
* Sat 25 Jul 2015 12:10:29 AM JST
wm.list_windows()[-5]
* Sat 25 Jul 2015 12:10:45 AM JST
wm.list_windows()[-8]
* Sat 25 Jul 2015 12:13:01 AM JST
t3=
* Sat 25 Jul 2015 12:13:30 AM JST
title
* Sat 25 Jul 2015 12:13:40 AM JST
get_bounds()
* Sat 25 Jul 2015 12:18:13 AM JST
_
* Sat 25 Jul 2015 12:19:48 AM JST
co
* Sat 25 Jul 2015 12:19:48 AM JST
form co
* Sat 25 Jul 2015 12:23:21 AM JST
            
* Sat 25 Jul 2015 12:23:27 AM JST
_rectangle
* Sat 25 Jul 2015 12:23:27 AM JST
self._rectangle
* Sat 25 Jul 2015 12:23:52 AM JST
from xahk.layout.horizon import HorizonLayout
* Sat 25 Jul 2015 12:24:12 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from xahk.wm.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Sat 25 Jul 2015 12:24:28 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from xahk.wm.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Sat 25 Jul 2015 12:24:35 AM JST
from xahk.layout.horizon import HorizonLayout

* Sat 25 Jul 2015 12:24:40 AM JST
wm.list_windows()
* Sat 25 Jul 2015 12:24:57 AM JST
title
* Sat 25 Jul 2015 12:25:12 AM JST
.title
* Sat 25 Jul 2015 12:25:17 AM JST
t2=
* Sat 25 Jul 2015 12:25:23 AM JST
title
* Sat 25 Jul 2015 12:25:28 AM JST
t3=
* Sat 25 Jul 2015 12:25:34 AM JST
title
* Sat 25 Jul 2015 12:29:58 AM JST
self._border_width
* Sat 25 Jul 2015 12:30:17 AM JST
self._border_width
* Sat 25 Jul 2015 01:13:27 AM JST
rects[0]
* Sat 25 Jul 2015 01:15:01 AM JST
rects[0].get_width() - self.border_width
* Sat 25 Jul 2015 01:18:10 AM JST
                
* Sat 25 Jul 2015 01:28:41 AM JST

* Sat 25 Jul 2015 01:28:41 AM JST

* Sat 25 Jul 2015 01:28:41 AM JST
            # rects[-1].set_width(rects[-1].get_width() - self.border_width)

* Sat 25 Jul 2015 01:29:26 AM JST

* Sat 25 Jul 2015 01:29:26 AM JST

* Sat 25 Jul 2015 01:29:26 AM JST
        print(rect)

* Sat 25 Jul 2015 01:35:17 AM JST
vertical
* Sat 25 Jul 2015 01:35:26 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from lab.xahk.wm.tests.test_window_client import *
w1=window1(c)
wc1=WindowClient(c, w1)

* Sat 25 Jul 2015 01:35:28 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from xahk.wm.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Sat 25 Jul 2015 01:35:37 AM JST
wm.list_windows()
* Sat 25 Jul 2015 01:36:51 AM JST
wm.list_windows()
* Sat 25 Jul 2015 01:37:53 AM JST
h1=HorizonLayout()
* Sat 25 Jul 2015 01:39:17 AM JST
get_bounds()
* Sat 25 Jul 2015 01:39:28 AM JST
title
* Sat 25 Jul 2015 01:43:06 AM JST
wm.list_windows()
* Sat 25 Jul 2015 01:43:23 AM JST
title
* Sat 25 Jul 2015 01:51:37 AM JST
LayoutItem
* Sat 25 Jul 2015 01:51:48 AM JST
from xahk.layout.layout_item import LayoutItem
* Sat 25 Jul 2015 01:52:02 AM JST
object
* Sat 25 Jul 2015 02:15:08 AM JST

* Sat 25 Jul 2015 02:15:08 AM JST

* Sat 25 Jul 2015 02:15:08 AM JST
    |                  |                  |                    |

* Sat 25 Jul 2015 02:26:58 AM JST
x
* Sat 25 Jul 2015 02:26:59 AM JST
form x
* Sat 25 Jul 2015 02:27:04 AM JST
layout.
* Sat 25 Jul 2015 02:27:04 AM JST
xahk.layout.
* Sat 25 Jul 2015 02:27:41 AM JST
client
* Sat 25 Jul 2015 02:28:36 AM JST
_layout_items
* Sat 25 Jul 2015 02:29:00 AM JST
client
* Sat 25 Jul 2015 02:31:27 AM JST
client
* Sat 25 Jul 2015 02:31:35 AM JST
client
* Sat 25 Jul 2015 02:34:25 AM JST
http://github.com/mitsuo-saito/auto-highlight-symbol-mode/raw/master/auto-highlight-symbol.el
* Sat 25 Jul 2015 02:43:56 AM JST
current
* Sat 25 Jul 2015 02:43:57 AM JST
current-prefix-arg
* Sat 25 Jul 2015 02:56:33 AM JST
ahs-select-invisible
* Sat 25 Jul 2015 03:00:43 AM JST
ahs-edit-mode
* Sat 25 Jul 2015 03:01:56 AM JST
hello
* Sat 25 Jul 2015 03:02:11 AM JST
ahs-select-invisible
* Sat 25 Jul 2015 03:02:34 AM JST
hello
* Sat 25 Jul 2015 03:07:16 AM JST
def
* Sat 25 Jul 2015 03:07:22 AM JST
to-
* Sat 25 Jul 2015 03:07:22 AM JST
add-to-
* Sat 25 Jul 2015 03:07:23 AM JST
()
* Sat 25 Jul 2015 03:12:11 AM JST
ahs-edit-mode-off-hook-one-time-widen
* Sat 25 Jul 2015 03:15:07 AM JST
(py:narrow-to-def)
* Sat 25 Jul 2015 03:16:15 AM JST
(interactive
   (if ahs-edit-mode-enable
       (list nil)
     (list t current-prefix-arg)))
* Sat 25 Jul 2015 03:16:23 AM JST
arg &optional temporary
* Sat 25 Jul 2015 03:16:38 AM JST
(py:narrow-to-def)
* Sat 25 Jul 2015 03:17:50 AM JST

* Sat 25 Jul 2015 03:17:51 AM JST

* Sat 25 Jul 2015 03:17:51 AM JST
  ;; (remove-hook 'ahs-edit-mode-off-hook 'ahs-edit-mode-off-hook-one-time-widen)

* Sat 25 Jul 2015 03:20:08 AM JST
ahs-edit-mode
* Sat 25 Jul 2015 03:25:40 AM JST
(interactive
   (if ahs-edit-mode-enable
       (list nil)
     (list t current-prefix-arg)))
* Sat 25 Jul 2015 03:26:06 AM JST
ahs-default-range
* Sat 25 Jul 2015 03:26:16 AM JST
ahs-range-whole-buffer
* Sat 25 Jul 2015 03:26:36 AM JST
 
* Sat 25 Jul 2015 03:26:40 AM JST
ahs-edit-mode-tmp-whole-buffer
* Sat 25 Jul 2015 03:29:16 AM JST
hello
* Sat 25 Jul 2015 03:30:21 AM JST
hello
* Sat 25 Jul 2015 03:30:47 AM JST
ahs-default-range
* Sat 25 Jul 2015 03:31:32 AM JST
ahs-current-range
* Sat 25 Jul 2015 03:31:38 AM JST
'ahs-range-whole-buffer
* Sat 25 Jul 2015 03:32:46 AM JST
ahs-current-range
* Sat 25 Jul 2015 03:36:22 AM JST
ahs-regist-range-plugin
* Sat 25 Jul 2015 03:38:56 AM JST
(symbol :tag "Whole buffer" ahs-range-whole-buffer)
* Sat 25 Jul 2015 03:39:02 AM JST
buffer
* Sat 25 Jul 2015 03:39:02 AM JST
Whole buffer
* Sat 25 Jul 2015 03:39:06 AM JST
whole
* Sat 25 Jul 2015 03:40:56 AM JST
(ahs-regist-range-plugin
 display
 '((name    . "display area")
   (lighter . "HS")
   (face    . ahs-plugin-defalt-face)
   (start   . window-start)
   (end     . window-end))
  "Display area")
* Sat 25 Jul 2015 03:41:05 AM JST
display
* Sat 25 Jul 2015 03:41:19 AM JST
display
* Sat 25 Jul 2015 03:41:34 AM JST
Display
* Sat 25 Jul 2015 03:45:51 AM JST
py:region-def
* Sat 25 Jul 2015 03:46:36 AM JST
(py:region-def)
* Sat 25 Jul 2015 03:46:39 AM JST
  
* Sat 25 Jul 2015 03:46:47 AM JST
py:def-start-point
* Sat 25 Jul 2015 03:46:56 AM JST
py:def-start-point
* Sat 25 Jul 2015 03:47:40 AM JST
(car (py:region-def))
* Sat 25 Jul 2015 03:47:45 AM JST
(ca
* Sat 25 Jul 2015 03:48:01 AM JST
(car (py:region-def))
* Sat 25 Jul 2015 03:48:05 AM JST
  
* Sat 25 Jul 2015 03:48:16 AM JST
py:def-end-point
* Sat 25 Jul 2015 03:48:57 AM JST
-region
* Sat 25 Jul 2015 03:52:40 AM JST
(ahs-edit-mode arg t) ;; temporary whole-buffer
* Sat 25 Jul 2015 03:53:42 AM JST
from copy import deepcopy

from xahk.layout.layout_item import LayoutItem
from collections import deque


class HorizonLayout(LayoutItem):
    r"""HorizonLayout

    HorizonLayout is a LayoutItem.
    Responsibility:

    +--------------------------------------------------------+
    |                  |                  |                  |
    |                  |                  |                  |
    |        1         |        2         |        3         |
    |                  |                  |                  |
    |                  |                  |                  |
    +--------------------------------------------------------+
    """
    def __init__(self, rectangle, border_width=1):
        r"""

        @Arguments:
        - `rectangle`:
        """
        self._rectangle = rectangle
        self._layout_items = deque()
        self._border_width = border_width

    def appendleft(self, layout_item):
        r"""SUMMARY

        appendleft(layout_item)

        @Arguments:
        - `layout_item`:

        @Return:

        @Error:
        """
        self._layout_items.appendleft(layout_item)

    def append(self, layout_item):
        r"""SUMMARY

        append(layout_item)

        @Arguments:
        - `layout_item`:

        @Return:

        @Error:
        """
        self._layout_items.append(layout_item)

    def pop(self, ):
        r"""SUMMARY

        pop()

        @Return:

        @Error:
        """
        return self._layout_items.pop()

    def popleft(self, ):
        r"""SUMMARY

        popleft()

        @Return:

        @Error:
        """
        return self._layout_items.popleft()

    def remove(self, layout_item):
        r"""SUMMARY

        remove_client(layout_item)

        @Arguments:
        - `client`:

        @Return:

        @Error:
        """
        self._layout_items.remove(layout_item)

    def set_bounds(self, newx, newy, width, height):
        r"""SUMMARY

        set_bounds(newx, newy, width, height)

        @Arguments:
        - `newx`:
        - `newy`:
        - `width`:
        - `height`:

        @Return:

        @Error:
        """
        self._rectangle.set_bounds([newx, newy, width, height])
        self.layout()

    def get_border_width(self, ):
        r"""SUMMARY

        get_border_width()

        @Return:

        @Error:
        """
        return self._border_width


    def set_border_width(self, border_width):
        r"""SUMMARY

        set_border_width(border_width)

        @Arguments:
        - `border_width`:

        @Return:

        @Error:
        """
        self._border_width = border_width

    border_width = property(get_border_width, set_border_width)

    def layout(self, ):
        r"""SUMMARY

        layout()

        @Return:

        @Error:
        """
        rect = deepcopy(self._rectangle)
        rects = rect.split_horizontal(len(self._layout_items))
        if 2 <= len(rects):
            rects[0].set_width(rects[0].get_width() - self.border_width)
            rects[-1].set_x(rects[-1].get_x() + self.border_width)
        for rct in rects[1:-1]:
            rct.set_x(rct.get_x() + self._border_width)
            rct.set_width(rct.get_width() - self.border_width * 2)
        for rect, layout_item in zip(rects, self._layout_items):
            layout_item.set_bounds(rect.x, rect.y, rect.width, rect.height)

* Sat 25 Jul 2015 03:54:52 AM JST
import os
import sys
import re

class Hello(object):
    r"""Hello

    Hello is a object.
    Responsibility:
    """
    def __init__(self, ):
        r"""
        """
        self.hello = 'world'

    def tes(self, ):
        r"""SUMMARY

        tes()

        @Return:

        @Error:
        """
        self.hello = 'google'

    def tes3(self, ):
        r"""SUMMARY

        tes3()

        @Return:

        @Error:
        """
        self.hello = 'yahoo'


    def tes4(self, ):
        r"""SUMMARY

        tes4()

        @Return:

        @Error:
        """
        self.hello = 'google'

    def tes5(self, ):
        r"""SUMMARY

        tes5()

        @Return:

        @Error:
        """
        self.hello = ''

* Sat 25 Jul 2015 03:55:38 AM JST
import os
import sys
import re

class Hello(object):
    r"""Hello

    Hello is a object.
    Responsibility:
    """
    def __init__(self, ):
        r"""
        """
        self.hello = 'world'

    def tes(self, ):
        r"""SUMMARY

        tes()

        @Return:

        @Error:
        """
        self.hello = 'google'

    def tes3(self, ):
        r"""SUMMARY

        tes3()

        @Return:

        @Error:
        """
        self.hello = 'yahoo'


    def tes4(self, ):
        r"""SUMMARY

        tes4()

        @Return:

        @Error:
        """
        self.hello = 'google'

    def tes5(self, ):
        r"""SUMMARY

        tes5()

        @Return:

        @Error:
        """
        self.hello = ''

* Sat 25 Jul 2015 03:57:48 AM JST
(ahs-onekey-edit-function 'whole-buffer nil)
* Sat 25 Jul 2015 03:58:13 AM JST
   
* Sat 25 Jul 2015 03:58:17 AM JST
arg
* Sat 25 Jul 2015 03:58:40 AM JST
import os
import sys
import re

class helloo(object):
    r"""Hello

    Hello is a object.
    Responsibility:
    """
    def __init__(self, ):
        r"""
        """
        self.helloo = 'world'

    def tes(self, ):
        r"""SUMMARY

        tes()

        @Return:

        @Error:
        """
        self.helloo = 'google'

    def tes3(self, ):
        r"""SUMMARY

        tes3()

        @Return:

        @Error:
        """
        self.helloo = 'yahoo'


    def tes4(self, ):
        r"""SUMMARY

        tes4()

        @Return:

        @Error:
        """
        self.helloo = 'google'

    def tes5(self, ):
        r"""SUMMARY

        tes5()

        @Return:

        @Error:
        """
        self.helloo = ''

* Sat 25 Jul 2015 03:58:50 AM JST
import os
import sys
import re

class helloo(object):
    r"""Hello

    Hello is a object.
    Responsibility:
    """
    def __init__(self, ):
        r"""
        """
        self.helloo = 'world'

    def tes(self, ):
        r"""SUMMARY

        tes()

        @Return:

        @Error:
        """
        self.helloo = 'google'

    def tes3(self, ):
        r"""SUMMARY

        tes3()

        @Return:

        @Error:
        """
        self.helloo = 'yahoo'


    def tes4(self, ):
        r"""SUMMARY

        tes4()

        @Return:

        @Error:
        """
        self.helloo = 'google'

    def tes5(self, ):
        r"""SUMMARY

        tes5()

        @Return:

        @Error:
        """
        self.helloo = ''

* Sat 25 Jul 2015 03:59:25 AM JST
world
* Sat 25 Jul 2015 04:00:51 AM JST
(ahs-onekey-edit-function 'pythondef nil)
* Sat 25 Jul 2015 04:00:59 AM JST
  (interactive)
  (ahs-onekey-edit-function 'pythondef nil)

* Sat 25 Jul 2015 04:01:45 AM JST

* Sat 25 Jul 2015 04:01:46 AM JST

* Sat 25 Jul 2015 04:01:46 AM JST
  ;; (ahs-edit-mode arg t) ;; temporary whole-buffer

* Sat 25 Jul 2015 04:02:15 AM JST
import os
import sys
import re

import os
import sys
import re

class hello(object):
    r"""Hello

    Hello is a object.
    Responsibility:
    """
    def __init__(self, ):
        r"""
        """
        self.hello = 'world'

    def tes(self, ):
        r"""SUMMARY

        tes()

        @Return:

        @Error:
        """
        self.hello = 'google'

    def tes3(self, ):
        r"""SUMMARY

        tes3()

        @Return:

        @Error:
        """
        self.hello = 'yahoo'


    def tes4(self, ):
        r"""SUMMARY

        tes4()

        @Return:

        @Error:
        """
        self.hello = 'google'

    def tes5(self, ):
        r"""SUMMARY

        tes5()

        @Return:

        @Error:
        """
        self.hello = ''

* Sat 25 Jul 2015 04:02:17 AM JST
import os
import sys
import re

import os
import sys
import re

class hello(object):
    r"""Hello

    Hello is a object.
    Responsibility:
    """
    def __init__(self, ):
        r"""
        """
        self.hello = 'world'

    def tes(self, ):
        r"""SUMMARY

        tes()

        @Return:

        @Error:
        """
        self.hello = 'google'

    def tes3(self, ):
        r"""SUMMARY

        tes3()

        @Return:

        @Error:
        """
        self.hello = 'yahoo'


    def tes4(self, ):
        r"""SUMMARY

        tes4()

        @Return:

        @Error:
        """
        self.hello = 'google'

    def tes5(self, ):
        r"""SUMMARY

        tes5()

        @Return:

        @Error:
        """
        self.hello = ''

* Sat 25 Jul 2015 04:03:59 AM JST
(ahs-regist-range-plugin
    pythondef
  '((name    . "python def area")
    (lighter . "HS")
    (face    . ahs-plugin-defalt-face)
    (start   . py:def-start-point)
    (end     . py:def-end-point))
  "Python def area")

* Sat 25 Jul 2015 04:08:24 AM JST
py:region-class
* Sat 25 Jul 2015 04:09:14 AM JST
(car (py:region-class))
* Sat 25 Jul 2015 04:10:06 AM JST
rotate-text-rotations
* Sat 25 Jul 2015 04:11:09 AM JST
;; rotate-text
  (dolist (el '(("import"   "from")
                ("if" "elif" "else")
                ("try" "except" "else" "final")
                ("continue" "break")
                ("is"       "==")
                ("True"     "False")
                ("encode"   "decode")
                ("get"      "set")
                ("self"     "cls")
                ("str"      "unicode")
                ("debug" "error" "fatal" "info" "warn" "critical")
                ("globals" "locals")
                ("startswith" "endswith")
                ))
    (add-to-list 'rotate-text-rotations el))
* Sat 25 Jul 2015 04:11:53 AM JST
rotate-text-rotations
* Sat 25 Jul 2015 04:12:19 AM JST
rotate-text-rotations
* Sat 25 Jul 2015 04:14:14 AM JST
(ahs-regist-range-plugin
      pythondef
    '((name    . "python def area")
      (lighter . "HS")
      (face    . ahs-plugin-defalt-face)
      (start   . py:def-start-point)
      (end     . py:def-end-point))
    "Python def area")
* Sat 25 Jul 2015 04:14:38 AM JST
def
* Sat 25 Jul 2015 04:14:43 AM JST
def
* Sat 25 Jul 2015 04:14:45 AM JST
def
* Sat 25 Jul 2015 04:15:23 AM JST
ahs-regist-range-plugin
* Sat 25 Jul 2015 04:15:36 AM JST
;;    
* Sat 25 Jul 2015 04:15:38 AM JST
def
* Sat 25 Jul 2015 04:16:34 AM JST
    ("\C-eh"          'py:ahs-edit-mode-def-region)
* Sat 25 Jul 2015 04:16:35 AM JST
    
* Sat 25 Jul 2015 04:16:56 AM JST

* Sat 25 Jul 2015 04:19:12 AM JST
    ("\C-eh"          'py:ahs-edit-mode-def-region)
    ("\C-e\C-\M-h"    'py:ahs-edit-mode-class-region)
    ("\C-e\M-h"       'py:ahs-edit-mode-class-region)

* Sat 25 Jul 2015 04:19:56 AM JST
py:ahs-edit-mode-def-region
* Sat 25 Jul 2015 04:20:09 AM JST
"\C-e\C-\M-h"
* Sat 25 Jul 2015 04:20:16 AM JST
py:ahs-edit-mode-class-region
* Sat 25 Jul 2015 04:20:23 AM JST
"\C-e\M-h"
* Sat 25 Jul 2015 04:20:29 AM JST
py:ahs-edit-mode-class-region
* Sat 25 Jul 2015 04:20:42 AM JST
"\C-e\M-h"
* Sat 25 Jul 2015 04:20:48 AM JST

* Sat 25 Jul 2015 04:20:48 AM JST

* Sat 25 Jul 2015 04:20:48 AM JST
;;    "\C-e\M-h" `py:ahs-edit-mode-class-region'

* Sat 25 Jul 2015 04:20:48 AM JST
;;    "\C-e\M-h" `py:ahs-edit-mode-class-region'

* Sat 25 Jul 2015 04:20:48 AM JST
;;    "\C-e\M-h" `py:ahs-edit-mode-class-region'
("\C-e\C-\M-h"    'py:ahs-edit-mode-class-region)

* Sat 25 Jul 2015 04:20:48 AM JST
;;    "\C-e\M-h" `py:ahs-edit-mode-class-region'
("\C-e\C-\M-h"    'py:ahs-edit-mode-class-region)

* Sat 25 Jul 2015 04:20:48 AM JST
;;    "\C-e\M-h" `py:ahs-edit-mode-class-region'
("\C-e\C-\M-h"    'py:ahs-edit-mode-class-region)
("\C-e\M-h"       'py:ahs-edit-mode-class-region)

* Sat 25 Jul 2015 05:41:12 AM JST
1)
* Sat 25 Jul 2015 05:41:13 AM JST
append(1)
* Sat 25 Jul 2015 04:37:30 PM JST
append
* Sat 25 Jul 2015 04:37:35 PM JST
append
* Sat 25 Jul 2015 04:38:05 PM JST
acc|ModifierMask.Numlock
* Sat 25 Jul 2015 04:38:10 PM JST
acc|ModifierMask.Lock
* Sat 25 Jul 2015 04:38:16 PM JST
acc|ModifierMask.Mod5
* Sat 25 Jul 2015 04:38:21 PM JST
acc|ModifierMask.Numlock|ModifierMask.Lock
* Sat 25 Jul 2015 04:38:28 PM JST
acc|ModifierMask.Numlock|ModifierMask.Mod5
* Sat 25 Jul 2015 04:38:33 PM JST
acc|ModifierMask.Lock|ModifierMask.Mod5
* Sat 25 Jul 2015 04:38:43 PM JST
acc|ModifierMask.Numlock|ModifierMask.Lock|ModifierMask.Mod5
* Sat 25 Jul 2015 04:39:11 PM JST
                    
* Sat 25 Jul 2015 04:39:47 PM JST
                (acc,
                 acc|ModifierMask.Numlock,
                 acc|ModifierMask.Lock,
                 acc|ModifierMask.Mod5,
                 acc|ModifierMask.Numlock|ModifierMask.Lock,
                 acc|ModifierMask.Numlock|ModifierMask.Mod5,
                 acc|ModifierMask.Lock|ModifierMask.Mod5,
                 acc|ModifierMask.Numlock|ModifierMask.Lock|ModifierMask.Mod5
                 ))

* Sat 25 Jul 2015 04:39:56 PM JST
            extend(
                (acc,
                 acc|ModifierMask.Numlock,
                 acc|ModifierMask.Lock,
                 acc|ModifierMask.Mod5,
                 acc|ModifierMask.Numlock|ModifierMask.Lock,
                 acc|ModifierMask.Numlock|ModifierMask.Mod5,
                 acc|ModifierMask.Lock|ModifierMask.Mod5,
                 acc|ModifierMask.Numlock|ModifierMask.Lock|ModifierMask.Mod5
                 ))

* Sat 25 Jul 2015 04:40:06 PM JST
append
* Sat 25 Jul 2015 04:40:09 PM JST
append
* Sat 25 Jul 2015 04:41:37 PM JST
# extend firster than append
* Sat 25 Jul 2015 04:42:03 PM JST
# extend firster than multi append
* Sat 25 Jul 2015 04:42:07 PM JST
# extend firster than multi append
* Sat 25 Jul 2015 04:42:12 PM JST
 # extend firster than append
* Sat 25 Jul 2015 04:45:42 PM JST
ListDotAvoider
* Sat 25 Jul 2015 04:45:54 PM JST
dotavoider
* Sat 25 Jul 2015 04:47:35 PM JST
DotAvoider
* Sat 25 Jul 2015 04:47:42 PM JST
ListDotAvoider
* Sat 25 Jul 2015 04:47:50 PM JST
'dotavoider', 'DotAvoider', 'ListDotAvoider'
* Sat 25 Jul 2015 04:49:21 PM JST
dotavoider
* Sat 25 Jul 2015 04:49:48 PM JST
ListDotAvoider
* Sat 25 Jul 2015 04:51:05 PM JST
acc|ModifierMask.Numlock
* Sat 25 Jul 2015 04:51:20 PM JST
acc|ModifierMask.Numlock
* Sat 25 Jul 2015 04:51:25 PM JST
acc|ModifierMask.Lock
* Sat 25 Jul 2015 04:51:31 PM JST
acc|ModifierMask.Mod5
* Sat 25 Jul 2015 04:51:37 PM JST
acc|ModifierMask.Mod5
* Sat 25 Jul 2015 04:51:48 PM JST
acc|ModifierMask.Numlock|ModifierMask.Lock
* Sat 25 Jul 2015 04:51:56 PM JST
acc|ModifierMask.Numlock|ModifierMask.Mod5
* Sat 25 Jul 2015 04:52:02 PM JST
acc|ModifierMask.Numlock|ModifierMask.Lock|ModifierMask.Mod5
* Sat 25 Jul 2015 04:52:35 PM JST
acc|ModifierMask.Lock|ModifierMask.Mod5
* Sat 25 Jul 2015 04:53:02 PM JST
accs, append, extend = dotavoid([], 'append', 'extend')
* Sat 25 Jul 2015 04:53:33 PM JST
            extend((acc|ModifierMask.Numlock,
                    acc|ModifierMask.Lock,
                    acc|ModifierMask.Mod5,
                    acc|ModifierMask.Numlock|ModifierMask.Lock,
                    acc|ModifierMask.Numlock|ModifierMask.Mod5,
                    acc|ModifierMask.Lock|ModifierMask.Mod5, 
                    acc|ModifierMask.Numlock|ModifierMask.Lock|ModifierMask.Mod5
                    ))

* Sat 25 Jul 2015 04:54:22 PM JST

* Sat 25 Jul 2015 04:54:22 PM JST

* Sat 25 Jul 2015 04:54:22 PM JST
        # accs, append = ListDotAvoider().append

* Sat 25 Jul 2015 04:54:29 PM JST

* Sat 25 Jul 2015 04:54:29 PM JST

* Sat 25 Jul 2015 04:54:29 PM JST
        # accs, append = ListDotAvoider().append

* Sat 25 Jul 2015 04:54:42 PM JST
# extend firster than multi append
* Sat 25 Jul 2015 04:55:57 PM JST
# extend firster than multi append
* Sat 25 Jul 2015 11:17:16 PM JST
import image_scraper
* Sat 25 Jul 2015 11:19:36 PM JST
binder/
* Sat 25 Jul 2015 11:19:37 PM JST
xahk/binder/
* Sat 25 Jul 2015 11:19:37 PM JST
pylib/xahk/binder/
* Sat 25 Jul 2015 11:20:11 PM JST
from bs4 import BeautifulSoup
from urllib2 import urlopen
import urllib

# use this image scraper from the location that 
#you want to save scraped images to

def make_soup(url):
    html = urlopen(url).read()
    return BeautifulSoup(html)

def get_images(url):
    soup = make_soup(url)
    #this makes a list of bs4 element tags
    images = [img for img in soup.findAll('img')]
    print (str(len(images)) + "images found.")
    print 'Downloading images to current working directory.'
    #compile our unicode list of image links
    image_links = [each.get('src') for each in images]
    for each in image_links:
        filename=each.split('/')[-1]
        urllib.urlretrieve(each, filename)
    return image_links
* Sat 25 Jul 2015 11:20:41 PM JST
http://www.geocities.jp/seiryokuzu
* Sun 26 Jul 2015 12:00:19 AM JST
import 
* Sun 26 Jul 2015 12:00:43 AM JST
http://www.geocities.jp/seiryokuzu
* Sun 26 Jul 2015 12:05:06 AM JST
href')
* Sun 26 Jul 2015 12:05:06 AM JST
has_key('href')
* Sun 26 Jul 2015 12:05:31 AM JST
import BeautifulSoup

* Sun 26 Jul 2015 12:05:33 AM JST
from urllib2 import urlopen
* Sun 26 Jul 2015 12:05:36 AM JST
heml=urlopen('http://www.geocities.jp/seiryokuzu').read()
* Sun 26 Jul 2015 12:05:42 AM JST
soup=BeautifulSoup.BeautifulSoup(heml)
* Sun 26 Jul 2015 12:05:50 AM JST
soup.findAll('a')
* Sun 26 Jul 2015 12:06:25 AM JST
a
* Sun 26 Jul 2015 12:06:26 AM JST
in a
* Sun 26 Jul 2015 12:06:26 AM JST
href' in a
* Sun 26 Jul 2015 12:08:32 AM JST
filenames = []
for a in atags:
    if a['href'].endswith(('jpg', )):
        filenames.append(a['href'])

* Sun 26 Jul 2015 12:08:40 AM JST
atags = soup.findAll('a')
* Sun 26 Jul 2015 12:08:44 AM JST
filenames = []
for a in atags:
    if a['href'].endswith(('jpg', )):
        filenames.append(a['href'])

* Sun 26 Jul 2015 12:10:05 AM JST
pySmartDL
* Sun 26 Jul 2015 12:10:34 AM JST
SmartDL
* Sun 26 Jul 2015 12:12:16 AM JST
form 
* Sun 26 Jul 2015 12:13:23 AM JST
http://www.geocities.jp/seiryokuzu
* Sun 26 Jul 2015 12:13:26 AM JST
http://www.geocities.jp/seiryokuzu
* Sun 26 Jul 2015 12:13:39 AM JST
"http://www.geocities.jp/seiryokuzu/"
* Sun 26 Jul 2015 12:13:54 AM JST
u'c1600b.jpg'
* Sun 26 Jul 2015 12:14:38 AM JST
import BeautifulSoup
from urllib2 import urlopen
from pathhandler import PathHandler
from pySmartDL import SmartDL

url = "http://www.geocities.jp/seiryokuzu/"

dest = PathHandler('~/Downloads/seiryokuzu/').expanduser()

html=urlopen('http://www.geocities.jp/seiryokuzu').read()
soup=BeautifulSoup.BeautifulSoup(html)
atags = soup.findAll('a')

* Sun 26 Jul 2015 12:14:44 AM JST
filenames = []
for a in atags:
    if a['href'].endswith(('jpg', )):
        filenames.append(a['href'])

* Sun 26 Jul 2015 12:14:49 AM JST
for filename in filenames:
    obj = SmartDL(url + filename, str(dest))
    obj.start()

* Sun 26 Jul 2015 01:20:49 AM JST
Delegate
* Sun 26 Jul 2015 02:35:07 AM JST
import xcb, xcb.xproto as xproto;c=xcb.connect()
from xahk.wm.window_manager import WindowManager
wm=WindowManager(c)
wm.list_windows()

* Sun 26 Jul 2015 02:35:14 AM JST
wm.list_windows()
* Sun 26 Jul 2015 02:37:03 AM JST
Rectangle(x=1280, y=0, width=1680, height=1028)
* Sun 26 Jul 2015 02:40:23 AM JST
VerticalLayout
* Sun 26 Jul 2015 02:40:46 AM JST
VerticalLayout
* Sun 26 Jul 2015 02:40:55 AM JST
HorizonLayout
* Sun 26 Jul 2015 02:41:01 AM JST
LayoutItem
* Sun 26 Jul 2015 02:41:21 AM JST
layout_item
* Sun 26 Jul 2015 02:42:09 AM JST
Rectangle(x=1280, y=0, width=1680, height=1028)
* Sun 26 Jul 2015 02:42:17 AM JST
self.
* Sun 26 Jul 2015 02:42:30 AM JST
xahk.
* Sun 26 Jul 2015 02:42:57 AM JST
layout_item
* Sun 26 Jul 2015 02:44:45 AM JST
layout_item
* Sun 26 Jul 2015 02:44:47 AM JST
layout_item
* Sun 26 Jul 2015 02:44:57 AM JST
row1
* Sun 26 Jul 2015 02:45:46 AM JST
_clients
* Sun 26 Jul 2015 02:45:49 AM JST
_clients
* Sun 26 Jul 2015 02:45:54 AM JST
_layout_items = []
* Sun 26 Jul 2015 02:46:03 AM JST
form 
* Sun 26 Jul 2015 02:46:50 AM JST
_clients
* Sun 26 Jul 2015 02:46:58 AM JST
_clients
* Sun 26 Jul 2015 02:48:02 AM JST
returnslef.
* Sun 26 Jul 2015 02:48:30 AM JST
    def remove(self, layout_item):
        r"""SUMMARY

        remove_client(layout_item)

        @Arguments:
        - `client`:

        @Return:

        @Error:
        """
        self._layout_items.remove(layout_item)

    def clear(self, ):
        r"""SUMMARY

        clear()

        @Return:

        @Error:
        """
        self._layout_items.clear()

    def index_layout_item(self, layout_item):
        r"""SUMMARY

        index_layout_item(layout_item)

        @Arguments:
        - `layout_item`:

        @Return:

        @Error:
        """
        return list(self._layout_items).index(layout_item)


* Sun 26 Jul 2015 02:51:37 AM JST
    row1 = HorizonLayout(Rectangle(0, 0, 0, 0))
    row2 = HorizonLayout(Rectangle(0, 0, 0, 0))
    screen.append(row1)
    screen.append(row2)

* Sun 26 Jul 2015 02:51:56 AM JST
lsef
* Sun 26 Jul 2015 02:52:50 AM JST
    screen = VerticalLayout(
        Rectangle(x=1280, y=0, width=1680, height=1028))

* Sun 26 Jul 2015 02:54:28 AM JST
HorizonLayout(Rectangle(0, 0, 0, 0))
* Sun 26 Jul 2015 02:54:33 AM JST
HorizonLayout(Rectangle(0, 0, 0, 0))
* Sun 26 Jul 2015 02:55:13 AM JST
    def __getitem__(self, num):
        return self._layout_items[num]

    def __setitem__(self, num, layout_item):
        self._layout_items[num] = layout_item

    def __iter__(self):
        return iter(self._layout_items)

    def __len__(self):
        return len(self._layout_items)

* Sun 26 Jul 2015 03:01:18 AM JST
self.raw1
* Sun 26 Jul 2015 03:05:31 AM JST
visual
* Sun 26 Jul 2015 03:05:38 AM JST
win_gravity
* Sun 26 Jul 2015 03:05:50 AM JST
map_state
* Sun 26 Jul 2015 03:11:50 AM JST
root
* Sun 26 Jul 2015 03:11:56 AM JST
screen
* Sun 26 Jul 2015 03:13:09 AM JST
root
* Sun 26 Jul 2015 03:14:00 AM JST
1]
* Sun 26 Jul 2015 03:14:00 AM JST
roots[1]
* Sun 26 Jul 2015 03:14:00 AM JST
get_setup().roots[1]
* Sun 26 Jul 2015 03:14:01 AM JST
c.get_setup().roots[1]
* Sun 26 Jul 2015 03:14:02 AM JST
form 
* Sun 26 Jul 2015 03:15:47 AM JST
Ge
* Sun 26 Jul 2015 03:16:03 AM JST
number
* Sun 26 Jul 2015 03:16:25 AM JST
height
* Sun 26 Jul 2015 03:16:32 AM JST
width
* Sun 26 Jul 2015 03:17:39 AM JST
list(
* Sun 26 Jul 2015 03:17:57 AM JST
scren_info
* Sun 26 Jul 2015 04:00:21 AM JST
form 
* Sun 26 Jul 2015 04:05:24 AM JST

* Sun 26 Jul 2015 04:05:25 AM JST
HorizonLayout
* Sun 26 Jul 2015 04:05:26 AM JST
horizon
* Sun 26 Jul 2015 04:06:43 AM JST

* Sun 26 Jul 2015 04:06:43 AM JST

* Sun 26 Jul 2015 04:06:43 AM JST
        self._rectangle = rectangle

* Sun 26 Jul 2015 04:07:45 AM JST
self.
* Sun 26 Jul 2015 04:07:58 AM JST
Vertical
* Sun 26 Jul 2015 04:09:27 AM JST

* Sun 26 Jul 2015 04:09:27 AM JST

* Sun 26 Jul 2015 04:09:27 AM JST
        self._rows = rows

* Sun 26 Jul 2015 04:12:51 AM JST
HorizonLayout(Rectangle(0, 0, 0, 0))
* Sun 26 Jul 2015 04:13:58 AM JST

* Sun 26 Jul 2015 04:13:58 AM JST

* Sun 26 Jul 2015 04:13:58 AM JST
        self._cols = cols

* Sun 26 Jul 2015 04:27:35 AM JST
            horizon = HorizonLayout(Rectangle(0, 0, 0, 0))
            self._screen.append(horizon)
            for _ in xrange(cols):
                horizon.append(LayoutItem()) # dummy append

* Sun 26 Jul 2015 04:27:51 AM JST
cols
* Sun 26 Jul 2015 04:29:46 AM JST
int
* Sun 26 Jul 2015 04:34:51 AM JST
f
* Sun 26 Jul 2015 04:34:51 AM JST
sle.f
* Sun 26 Jul 2015 04:35:37 AM JST

* Sun 26 Jul 2015 04:35:37 AM JST

* Sun 26 Jul 2015 04:35:37 AM JST
    columns = property(get_columns, set_columns)

* Sun 26 Jul 2015 04:35:43 AM JST
len(self._screen[0]) # HorizonLayout length
* Sun 26 Jul 2015 04:35:52 AM JST
len(self._screen)
* Sun 26 Jul 2015 04:37:26 AM JST
rows
* Sun 26 Jul 2015 04:38:42 AM JST
self.get_rows()
* Sun 26 Jul 2015 04:38:45 AM JST
rows
* Sun 26 Jul 2015 04:40:15 AM JST
cols < 
* Sun 26 Jul 2015 04:41:04 AM JST
cols
* Sun 26 Jul 2015 04:41:10 AM JST
self.columns
* Sun 26 Jul 2015 04:41:33 AM JST
cols
* Sun 26 Jul 2015 04:42:57 AM JST
pop()
* Sun 26 Jul 2015 04:43:04 AM JST
LayoutItem()
* Sun 26 Jul 2015 04:44:43 AM JST
lsef.
* Sun 26 Jul 2015 04:45:23 AM JST
screen
* Mon 27 Jul 2015 05:30:08 AM JST
for
* Mon 27 Jul 2015 05:30:16 AM JST
split_
* Mon 27 Jul 2015 06:05:31 AM JST
num
* Mon 27 Jul 2015 06:05:40 AM JST
columns
* Mon 27 Jul 2015 06:07:57 AM JST
+--------------------+
|                    |
|                    |
|                    |
|                    |
|                    |
|                    |
|                    |
|                    |
|                    |
|                    |
|                    |
|                    |
+--------------------+

* Mon 27 Jul 2015 06:12:19 AM JST

* Mon 27 Jul 2015 06:12:19 AM JST

* Mon 27 Jul 2015 06:12:19 AM JST
|                    |         |                    |

* Mon 27 Jul 2015 06:14:03 AM JST
+--------------------+         +--------------------+
|                    |         |                    |
|                    |         |        row1        |
|                    |         |                    |
|                    |         +-------------------->
|                    |         |                    |
|                    |   ==>   |        row2        |
|                    |         |                    |
|                    |         +--------------------+
|                    |         |                    |
|                    |         |        row3        |
|                    |         |                    |
+--------------------+         +--------------------+

* Mon 27 Jul 2015 06:18:17 AM JST
|              |
* Mon 27 Jul 2015 06:20:21 AM JST
+---------------------------------------------+
|                                             |
|                                             |
|                                             |
|                                             |
|                                             |
+---------------------------------------------+
                                              
                     ||                      
                     \/                      
                                               
+--------------+--------------+---------------+
|              |              |               |
|              |              |               |
|     cols1    |     cols2    |     cols3     |
|              |              |               |
|              |              |               |
+--------------+--------------+---------------+

* Mon 27 Jul 2015 06:21:25 AM JST
+--------------+--------------+---------------+
|              |              |               |
|              |              |               |
|     cols1    |     cols2    |     cols3     |
|              |              |               |
|              |              |               |
+--------------+--------------+---------------+

* Mon 27 Jul 2015 06:21:32 AM JST

* Mon 27 Jul 2015 06:21:32 AM JST

* Mon 27 Jul 2015 06:21:32 AM JST
+---------------------------------------------+

* Mon 27 Jul 2015 06:21:53 AM JST
+--------------+--------------+---------------+
|              |              |               |
|              |              |               |
|     cols1    |     cols2    |     cols3     |
|              |              |               |
|              |              |               |
+--------------+--------------+---------------+

* Mon 27 Jul 2015 06:21:58 AM JST

* Mon 27 Jul 2015 06:21:58 AM JST

* Mon 27 Jul 2015 06:21:58 AM JST
+--------------+--------------+---------------+

* Mon 27 Jul 2015 06:22:02 AM JST
+--------------+--------------+---------------+
|              |              |               |
|              |              |               |
|     cols1    |     cols2    |     cols3     |
|              |              |               |
|              |              |               |
+--------------+--------------+---------------+
|              |              |               |
|              |              |               |
|     cols1    |     cols2    |     cols3     |
|              |              |               |
|              |              |               |
+--------------+--------------+---------------+

* Mon 27 Jul 2015 06:33:05 AM JST
+--------------------------------------------+
|                                            |
|                                            |
|                                            |
|                                            |
|                                            |
|                                            | 
|                                            |
|                                            |
|                                            |
|                                            |
|                                            |
+--------------------------------------------+
                                              
                     ||                      
                     \/                      

+--------------+--------------+--------------+ --+
|              |              |              |   |
|              |              |              |         
|    (0,0)     |     (0,1)    |     (0,2)    |  List[0] 
|              |              |              |    
|              |              |              |   |
+--------------+--------------+--------------+ --+
|              |              |              |   |
|              |              |              |    
|    (1,0)     |     (1,1)    |     (1,2)    |  List[1]
|              |              |              |         
|              |              |              |   |     
+--------------+--------------+--------------+ --+     
                                            
|              |              |              |
|              |              |              |
+--- index1 ---+--- index2 ---+--- index3 ---+

* Mon 27 Jul 2015 07:06:34 AM JST
None
* Mon 27 Jul 2015 07:08:48 AM JST
rectangle
* Mon 27 Jul 2015 07:19:07 AM JST
((None, ) * cols) * rows
* Mon 27 Jul 2015 07:19:29 AM JST
[[None, ] * cols] * rows
* Mon 27 Jul 2015 07:23:48 AM JST
Standard
* Mon 27 Jul 2015 07:23:52 AM JST
Standard
* Mon 27 Jul 2015 09:11:32 AM JST
cols
* Mon 27 Jul 2015 09:11:41 AM JST
rows
* Mon 27 Jul 2015 09:12:15 AM JST
cols
* Mon 27 Jul 2015 09:12:29 AM JST
rows
* Mon 27 Jul 2015 09:12:30 AM JST
self.rows
* Mon 27 Jul 2015 09:14:50 AM JST
self.
* Mon 27 Jul 2015 09:21:36 AM JST
columns
* Mon 27 Jul 2015 09:21:36 AM JST
self.columns
* Mon 27 Jul 2015 09:21:40 AM JST
self.
* Mon 27 Jul 2015 09:23:23 AM JST
[[None, ] * self.get_columns()] * (self.get_rows() - rows)
* Mon 27 Jul 2015 09:23:51 AM JST
self.get_columns()
* Mon 27 Jul 2015 09:24:26 AM JST
rows
* Mon 27 Jul 2015 09:24:30 AM JST
self.get_rows()
* Mon 27 Jul 2015 09:24:35 AM JST
self.get_rows()
* Mon 27 Jul 2015 09:24:39 AM JST
rows
* Mon 27 Jul 2015 09:27:20 AM JST
None
* Mon 27 Jul 2015 09:28:28 AM JST
len(
* Mon 27 Jul 2015 09:28:30 AM JST
len(
* Mon 27 Jul 2015 09:30:21 AM JST
get_columns() - 
* Mon 27 Jul 2015 09:30:21 AM JST
self.get_columns() - 
* Mon 27 Jul 2015 09:31:48 AM JST
self.get_columns()
* Mon 27 Jul 2015 09:32:01 AM JST
columns
* Mon 27 Jul 2015 09:35:21 AM JST
print(row)
* Mon 27 Jul 2015 09:36:22 AM JST
print(extend_num)
* Mon 27 Jul 2015 09:38:16 AM JST
from xahk.layout.grid import GridLayout
GridLayout(Rectangle(0,0,1000,1000), 3,4)

* Mon 27 Jul 2015 09:38:22 AM JST
from rectangle import Rectangle
* Mon 27 Jul 2015 09:38:31 AM JST
from rectangle import Rectangle
from xahk.layout.grid import GridLayout

* Mon 27 Jul 2015 09:38:35 AM JST
GridLayout(Rectangle(0,0,1000,1000), 3,4)

* Mon 27 Jul 2015 09:38:47 AM JST
_table
* Mon 27 Jul 2015 09:44:19 AM JST
from rectangle import Rectangle
from xahk.layout.grid import GridLayout
GridLayout(Rectangle(0,0,1000,1000), 3,4)

* Mon 27 Jul 2015 09:44:34 AM JST
rows
* Mon 27 Jul 2015 09:44:44 AM JST
GridLayout(Rectangle(0,0,1000,1000), 3,4)
* Mon 27 Jul 2015 09:45:36 AM JST

* Mon 27 Jul 2015 09:45:37 AM JST

* Mon 27 Jul 2015 09:45:37 AM JST
        # self._table = [[None, ] * cols] * rows

* Mon 27 Jul 2015 09:45:45 AM JST

* Mon 27 Jul 2015 09:45:45 AM JST

* Mon 27 Jul 2015 09:45:45 AM JST
            print(extend_num)

* Mon 27 Jul 2015 09:45:47 AM JST

* Mon 27 Jul 2015 09:45:47 AM JST

* Mon 27 Jul 2015 09:45:47 AM JST
                print(extend_num)

* Mon 27 Jul 2015 09:45:47 AM JST
                print(extend_num)

* Mon 27 Jul 2015 09:45:47 AM JST
                print(extend_num)
                print(row)

* Mon 27 Jul 2015 09:45:48 AM JST

* Mon 27 Jul 2015 09:45:48 AM JST

* Mon 27 Jul 2015 09:45:48 AM JST
                print(row)

* Mon 27 Jul 2015 09:46:47 AM JST
    def get_layout_item(self, rows, cols):
        r"""SUMMARY

        get_layout_item(rows, cols)

        @Arguments:
        - `rows`:
        - `cols`:

        @Return:

        @Error:
        """
        if len(self._table) < rows:
            # TODO: (Atami) [2015/07/27]
            raise ValueError()
        if len(self._table[rows]) < cols:
            # TODO: (Atami) [2015/07/27]
            raise ValueError()
        return self._table[rows][cols]

* Mon 27 Jul 2015 09:46:57 AM JST
len(self._table)
* Mon 27 Jul 2015 09:47:41 AM JST
from rectangle import Rectangle
from xahk.layout.grid import GridLayout
g=GridLayout(Rectangle(0,0,1000,1000), 3,4)

* Mon 27 Jul 2015 09:52:41 AM JST
row
* Mon 27 Jul 2015 09:54:16 AM JST
enumerate
* Mon 27 Jul 2015 09:54:18 AM JST
self._table
* Mon 27 Jul 2015 09:56:19 AM JST
col
* Mon 27 Jul 2015 09:58:02 AM JST
from rectangle import Rectangle
from xahk.layout.grid import GridLayout
g=GridLayout(Rectangle(0,0,1000,1000), 3,4)

* Mon 27 Jul 2015 10:06:06 AM JST
1,1
* Mon 27 Jul 2015 10:07:52 AM JST
3  | 3,1  
* Mon 27 Jul 2015 10:08:02 AM JST
        1     2     3     4 
     +-----+-----+-----+-----+
     |     |     |     |     |  
  1  | 1,1 | 1,2 | 1,3 | 1,4 |
     |     |     |     |     |  
     +-----+-----+-----+-----+  
     |     |     |     |     |  
  2  | 2,1 | 2,2 | 2,3 | 2,4 |
     |     |     |     |     |  
     +-----+-----+-----+-----+  
     |     |     |     |     |  
  3  | 3,1 | 3,2 | 3,3 | 3,4 |
     |     |     |     |     |
     +-----+-----+-----+-----+

* Mon 27 Jul 2015 10:36:06 AM JST
flatten
* Mon 27 Jul 2015 10:37:52 AM JST
self._screen.split_grid(self.rows, self.columns)
* Mon 27 Jul 2015 10:40:15 AM JST
zip(flatten(self._table),
                                 flatten(self._screen.split_grid(self.rows, self.columns)))
* Mon 27 Jul 2015 10:40:19 AM JST
            
* Mon 27 Jul 2015 10:40:23 AM JST
            
* Mon 27 Jul 2015 10:48:49 AM JST
self._screen.split_grid(self.rows, self.columns)
* Mon 27 Jul 2015 11:44:41 AM JST
        if 2 <= len(rects):
            rects[0].set_width(rects[0].get_width() - self.border_width)
            rects[-1].set_x(rects[-1].get_x() + self.border_width)
        for rct in rects[1:-1]:
            rct.set_x(rct.get_x() + self._border_width)
            rct.set_width(rct.get_width() - self.border_width * 2)
        for rect, layout_item in zip(rects, self._layout_items):
            layout_item.set_bounds(rect.x, rect.y, rect.width, rect.height)

* Mon 27 Jul 2015 11:44:52 AM JST
self.
* Mon 27 Jul 2015 11:44:54 AM JST
self.
* Mon 27 Jul 2015 11:44:56 AM JST
_
* Mon 27 Jul 2015 11:44:58 AM JST
self.
* Mon 27 Jul 2015 11:45:00 AM JST
self.
* Mon 27 Jul 2015 11:50:47 AM JST
Window
* Mon 27 Jul 2015 11:52:43 AM JST
expand
* Mon 27 Jul 2015 11:54:09 AM JST
def resize_horizon_by_borderwidth(rects, border_width):
    r"""SUMMARY

    resize_horizon_by_borderwidth(rects, border_width)

    @Arguments:
    - `rects`:
    - `border_width`:

    @Return:

    @Error:

    +---------------+-+----------------+-+----------------+
    | Rectangle1    | | Rectangle2     | | Rectangle3     |
    |               | |                | |                |
    |               | |                | |                |
    |           <---| |--->        <---| |--->            |
    |               | |                | |                |
    |               | |                | |                |
    |               | |                | |                |
    +---------------+-+----------------+-+----------------+
    """
    if 2 <= len(rects):
        rects[0].set_width(rects[0].get_width() - border_width)# shrink Rectangle1
        rects[-1].set_x(rects[-1].get_x() + border_width) # move right Rectangle 3
    for rct in rects[1:-1]:
        rct.set_x(rct.get_x() + border_width)
        rct.set_width(rct.get_width() - border_width * 2)
    return rects

* Mon 27 Jul 2015 11:54:38 AM JST
resize_horizon_by_borderwidth
* Mon 27 Jul 2015 03:15:26 PM JST
resize
* Mon 27 Jul 2015 03:15:36 PM JST
resize
* Mon 27 Jul 2015 03:15:57 PM JST
specing_horizon
* Mon 27 Jul 2015 03:25:36 PM JST
border_width
* Mon 27 Jul 2015 03:25:42 PM JST
border_width
* Mon 27 Jul 2015 03:31:37 PM JST
"[\\[:]"
* Mon 27 Jul 2015 03:32:01 PM JST
(self-insert-command n)
* Mon 27 Jul 2015 03:32:10 PM JST
(looking-at "[\\[:]")
* Mon 27 Jul 2015 03:34:59 PM JST
(looking-at "[\\[:]")
* Mon 27 Jul 2015 04:21:20 PM JST
window_manager
* Mon 27 Jul 2015 04:22:49 PM JST
Rectangle(x=0, y=0, width=1280, height=1002)
* Mon 27 Jul 2015 04:22:55 PM JST
from xahk.wm import WindowManager
import xcb,xcb.xproto as xproto;c=xcb.connect()
WindowManager(c).list_windows()

* Mon 27 Jul 2015 04:24:16 PM JST
height
* Mon 27 Jul 2015 04:24:35 PM JST
widt
* Mon 27 Jul 2015 04:25:54 PM JST
Rectangle(0, 0, 1280, 1024)
* Mon 27 Jul 2015 04:25:57 PM JST
from rectangle import Rectangle
* Mon 27 Jul 2015 04:26:05 PM JST
Rectangle(0, 0, 1280, 1024)
* Mon 27 Jul 2015 04:26:58 PM JST
WindowManager(c).list_windows()
* Mon 27 Jul 2015 04:31:51 PM JST
[2].get_bounds()
* Mon 27 Jul 2015 04:34:47 PM JST
rect.set_width(rect.get_width() - space * 2)
* Mon 27 Jul 2015 04:40:34 PM JST
    
* Mon 27 Jul 2015 04:42:30 PM JST

* Mon 27 Jul 2015 04:42:30 PM JST

* Mon 27 Jul 2015 04:42:30 PM JST
    rects[0].set_width(rects[0].get_x() - space)

* Mon 27 Jul 2015 04:44:54 PM JST
1024)
* Mon 27 Jul 2015 04:44:54 PM JST
1280,1024)
* Mon 27 Jul 2015 04:44:55 PM JST
0,1280,1024)
* Mon 27 Jul 2015 04:44:55 PM JST
0,0,1280,1024)
* Mon 27 Jul 2015 04:44:56 PM JST
set_bounds(0,0,1280,1024)
* Mon 27 Jul 2015 04:47:48 PM JST
0,0,1272,1000
* Mon 27 Jul 2015 04:49:07 PM JST
comixs[0].display.flush()
* Mon 27 Jul 2015 04:49:57 PM JST
rect.set_x(rect.get_x() + space)
* Mon 27 Jul 2015 05:20:06 PM JST
    if len(rects) <= 1:
        return
    rects[-1].set_x(rects[-1].get_x() + space * 2)
    for rect in rects:
        rect.set_width(rect.get_width() - space * 2)
    for rct in rects[1:-1]:
        rct.set_x(rct.get_x() + space)
    return rects

* Mon 27 Jul 2015 05:22:22 PM JST
    def get_border_width(self, ):
        r"""SUMMARY

        get_border_width()

        @Return:

        @Error:
        """
        return self._border_width


    def set_border_width(self, border_width):
        r"""SUMMARY

        set_border_width(border_width)

        @Arguments:
        - `border_width`:

        @Return:

        @Error:
        """
        self._border_width = border_width

    border_width = property(get_border_width, set_border_width)

* Mon 27 Jul 2015 05:22:54 PM JST
_
* Mon 27 Jul 2015 05:24:05 PM JST
0,0,1272, 1000
* Mon 27 Jul 2015 05:27:43 PM JST
sler
* Mon 27 Jul 2015 05:29:51 PM JST
grided = flatten(self._screen.split_grid(self.rows, self.columns))
* Mon 27 Jul 2015 05:29:57 PM JST
                    
* Mon 27 Jul 2015 05:30:26 PM JST
x
* Mon 27 Jul 2015 05:30:27 PM JST
form x
* Mon 27 Jul 2015 05:35:31 PM JST
[1,2,3]
* Mon 27 Jul 2015 05:38:10 PM JST

* Mon 27 Jul 2015 05:38:10 PM JST

* Mon 27 Jul 2015 05:38:10 PM JST
        zip( * grided)

* Mon 27 Jul 2015 05:38:53 PM JST
(looking-back "[\\[:\\(]")
* Mon 27 Jul 2015 05:39:12 PM JST
(or (py:at-string|comment-p)
             (looking-back "[\\[:\\(]"))
* Mon 27 Jul 2015 05:39:30 PM JST
(py:in-parameter-p)
* Mon 27 Jul 2015 05:39:56 PM JST
`self-insert-command'
* Mon 27 Jul 2015 05:42:49 PM JST
flatten(grided)
* Mon 27 Jul 2015 05:42:52 PM JST

* Mon 27 Jul 2015 05:42:52 PM JST

* Mon 27 Jul 2015 05:42:52 PM JST
        grided = 

* Mon 27 Jul 2015 05:43:02 PM JST
flatten(grided)
* Mon 27 Jul 2015 05:43:52 PM JST
Rectangle(0,0,1272, 1000)
* Mon 27 Jul 2015 05:44:07 PM JST
GridLayout(Rectangle(0,0,1272, 1000),3,3)
* Mon 27 Jul 2015 05:44:50 PM JST
add_
* Mon 27 Jul 2015 05:46:25 PM JST
g=GridLayout(Rectangle(0,0,1272, 1000),3,3)
* Mon 27 Jul 2015 05:50:35 PM JST
flatten(
* Mon 27 Jul 2015 05:53:41 PM JST
_table
* Mon 27 Jul 2015 05:54:03 PM JST
2]
* Mon 27 Jul 2015 05:54:04 PM JST
comixs[2]
* Mon 27 Jul 2015 06:37:21 PM JST
        for rects in grided:
            spacing_horizon(rects, self._wgap)
        for rects in zip(*grided):
            spacing_vertical(rects, self._hgap)

* Mon 27 Jul 2015 06:38:29 PM JST
grided
* Mon 27 Jul 2015 06:38:31 PM JST
f
* Mon 27 Jul 2015 06:38:31 PM JST
sle.f
* Tue 28 Jul 2015 03:29:26 AM JST
from PyQt4 import QtGui
* Tue 28 Jul 2015 03:30:07 AM JST
addWidget?
* Tue 28 Jul 2015 03:31:18 AM JST
addWidget
* Tue 28 Jul 2015 03:31:26 AM JST
QPushButton?
* Tue 28 Jul 2015 03:31:51 AM JST
addWidget?
* Tue 28 Jul 2015 03:31:51 AM JST
QHBoxLayout.addWidget?
* Tue 28 Jul 2015 03:32:16 AM JST
QGridLayout
* Tue 28 Jul 2015 03:35:31 AM JST
import sys
from PyQt4 import QtGui


class Example(QtGui.QWidget):
    
    def __init__(self):
        super(Example, self).__init__()
        
        self.initUI()
        
    def initUI(self):
        
        title = QtGui.QLabel('Title')
        author = QtGui.QLabel('Author')
        review = QtGui.QLabel('Review')

        titleEdit = QtGui.QLineEdit()
        authorEdit = QtGui.QLineEdit()
        reviewEdit = QtGui.QTextEdit()

        grid = QtGui.QGridLayout()
        grid.setSpacing(10)

        grid.addWidget(title, 1, 0)
        grid.addWidget(titleEdit, 1, 1)

        grid.addWidget(author, 2, 0)
        grid.addWidget(authorEdit, 2, 1)

        grid.addWidget(review, 3, 0)
        grid.addWidget(reviewEdit, 3, 1, 5, 1)
        
        self.setLayout(grid) 
        
        self.setGeometry(300, 300, 350, 300)
        self.setWindowTitle('Review')    
        self.show()
        
def main():
    
    app = QtGui.QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
* Tue 28 Jul 2015 03:35:42 AM JST

* Tue 28 Jul 2015 03:35:42 AM JST

* Tue 28 Jul 2015 03:35:42 AM JST
from PyQt4 import QtGui

* Tue 28 Jul 2015 03:36:20 AM JST
addWidget?
* Tue 28 Jul 2015 03:36:21 AM JST
QGridLayout.addWidget?
* Tue 28 Jul 2015 03:36:22 AM JST
QtGui.QGridLayout.addWidget?
* Tue 28 Jul 2015 03:38:16 AM JST
qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
* Tue 28 Jul 2015 05:24:59 AM JST
colspec
* Tue 28 Jul 2015 05:27:26 AM JST
f
* Tue 28 Jul 2015 05:27:26 AM JST
sle.f
* Tue 28 Jul 2015 05:27:34 AM JST
None
* Tue 28 Jul 2015 05:27:51 AM JST
soefl
* Tue 28 Jul 2015 10:36:18 AM JST

* Tue 28 Jul 2015 10:36:18 AM JST

* Tue 28 Jul 2015 10:36:18 AM JST
        self.gravity = 0

* Tue 28 Jul 2015 10:45:00 AM JST
f
* Tue 28 Jul 2015 10:45:01 AM JST
lse.f
* Tue 28 Jul 2015 12:04:56 PM JST

* Tue 28 Jul 2015 12:04:56 PM JST

* Tue 28 Jul 2015 12:04:56 PM JST
    rects[-1].set_x(rects[-1].get_x() + space * 2)

* Tue 28 Jul 2015 05:16:17 PM JST
cols, 
* Tue 28 Jul 2015 05:16:17 PM JST
rows, cols, 
* Tue 28 Jul 2015 05:16:20 PM JST
cols
* Tue 28 Jul 2015 05:16:22 PM JST
rows
* Tue 28 Jul 2015 05:16:50 PM JST
from rectangle import Rectangle
from xahk.layout.grid import GridLayout
g=GridLayout(Rectangle(0,0,1000,1000), 3,4)

* Tue 28 Jul 2015 09:37:35 PM JST

* Tue 28 Jul 2015 09:37:35 PM JST

* Tue 28 Jul 2015 09:37:35 PM JST
        print(event)

* Tue 28 Jul 2015 09:38:41 PM JST
CursorListener
* Tue 28 Jul 2015 09:42:59 PM JST
RootWindowListener
* Tue 28 Jul 2015 09:43:42 PM JST
window
* Tue 28 Jul 2015 09:43:47 PM JST
psutil.Process(window.get_pid()).kill()
* Tue 28 Jul 2015 09:44:05 PM JST
VlcKill
* Tue 28 Jul 2015 09:45:06 PM JST
vlc_mouse_candidate
* Tue 28 Jul 2015 09:45:09 PM JST

* Tue 28 Jul 2015 09:47:49 PM JST
from xahk.wm import WindowManager
import xcb,xcb.xproto as xproto;c=xcb.connect()
WindowManager(c).list_windows()

* Tue 28 Jul 2015 09:48:01 PM JST
WindowManager(c).list_windows()
* Tue 28 Jul 2015 09:48:46 PM JST
'Sleipnir.exe'
* Tue 28 Jul 2015 09:50:46 PM JST
KeyCommandForMouse
* Tue 28 Jul 2015 09:50:52 PM JST
    def __init__(self, ):
        r"""
        """
        super(KeyCommandForMouseChromeMiddleButton, self).__init__(
            Accelerator(25, ModifierMask.Control)) # ^w
        self.shift_a = X11Key(38, ModifierMask.Shift)

* Tue 28 Jul 2015 09:50:57 PM JST
    def __init__(self, ):
        r"""
        """
        super(KeyCommandForMouseChromeMiddleButton, self).__init__(
            Accelerator(25, ModifierMask.Control)) # ^w
        self.shift_a = X11Key(38, ModifierMask.Shift)

    def on_up(self, event):
        r"""SUMMARY

        on_up(event)

        @Arguments:
        - `event`:

        @Return:

        @Error:
        """
        pass


* Tue 28 Jul 2015 09:51:09 PM JST
        window = CursorListener(Display()).get_under_window()
        need_sleep = False
        try:
            if 'All - Google Chrome' == window.title:
                self.shift_a.press(window)
                self.shift_a.release(window)
                self.shift_a.display.flush()
                need_sleep = True
        except (WindowError, BadWindow) as err:
            os.system('modprobe pcspkr')
            os.system('/usr/bin/beep -f 100 -l 350')
            os.system('rmmod pcspkr')
            print(err)
        self.key.press(window)
        self.key.release(window)
        if need_sleep:
            sleep(1)
        self.key.display.flush()

* Tue 28 Jul 2015 09:51:22 PM JST
SleipnirMiddleClick
* Tue 28 Jul 2015 09:51:32 PM JST
KeyCommandForMouse
* Tue 28 Jul 2015 09:54:48 PM JST
        self.key.press(window)
            self.key.release(window)
    
* Tue 28 Jul 2015 09:55:20 PM JST
SleipnirMiddleClick
* Tue 28 Jul 2015 09:55:41 PM JST
sleipnir_mouse_candidate
* Tue 28 Jul 2015 09:55:43 PM JST

* Tue 28 Jul 2015 09:56:19 PM JST
need_
* Tue 28 Jul 2015 09:56:23 PM JST
False
* Tue 28 Jul 2015 09:56:29 PM JST
True
* Tue 28 Jul 2015 09:56:32 PM JST

* Tue 28 Jul 2015 09:56:32 PM JST

* Tue 28 Jul 2015 09:56:32 PM JST
        if sleep_time:

* Tue 28 Jul 2015 09:56:34 PM JST
1
* Tue 28 Jul 2015 09:57:33 PM JST

* Tue 28 Jul 2015 09:57:33 PM JST

* Tue 28 Jul 2015 09:57:33 PM JST
        self.shift_a = X11Key(38, ModifierMask.Shift)

* Tue 28 Jul 2015 09:57:51 PM JST

* Tue 28 Jul 2015 09:57:51 PM JST

* Tue 28 Jul 2015 09:57:52 PM JST
        self.shift_a = X11Key(38, ModifierMask.Shift)

* Tue 28 Jul 2015 09:57:58 PM JST

* Tue 28 Jul 2015 09:57:58 PM JST

* Tue 28 Jul 2015 09:57:58 PM JST
        pass

* Tue 28 Jul 2015 10:00:26 PM JST
        if not 'Sleipnir.exe' in window.wmclass:
            print('DEBUG-3-xahk3.py')
            return
        print('DEBUG-1-xahk3.py')
        if window.title == 'Sleipnir':
            window.close()
            return
        print('DEBUG-4-xahk3.py')
        self.key.press(window)

* Tue 28 Jul 2015 10:00:31 PM JST
        window = CursorListener(Display()).get_under_window()
        print('DEBUG-2-xahk3.py')
        if not 'Sleipnir.exe' in window.wmclass:
            print('DEBUG-3-xahk3.py')
            return
        print('DEBUG-1-xahk3.py')
        if window.title == 'Sleipnir':
            window.close()
            return
        print('DEBUG-4-xahk3.py')
        self.key.press(window)

* Tue 28 Jul 2015 10:00:59 PM JST
self.key.display.flush()
* Tue 28 Jul 2015 10:03:38 PM JST
from xahk.piece import X11Key, X11Button
* Tue 28 Jul 2015 10:04:28 PM JST
from xahk.binder import ButtonIndex, ModifierMask
* Tue 28 Jul 2015 10:04:42 PM JST
ModifierMask
* Wed 29 Jul 2015 12:00:01 AM JST
for
* Wed 29 Jul 2015 12:00:15 AM JST
splited 
* Wed 29 Jul 2015 12:00:16 AM JST
http://dl-xvideos.com/video9819692/na_gangrape_si_inday
* Wed 29 Jul 2015 12:00:25 AM JST
splited 
* Wed 29 Jul 2015 12:06:28 AM JST
0
* Wed 29 Jul 2015 12:06:29 AM JST
bottom=0
* Wed 29 Jul 2015 12:06:29 AM JST
0, bottom=0
* Wed 29 Jul 2015 12:06:29 AM JST
top=0, bottom=0
* Wed 29 Jul 2015 12:25:13 AM JST

* Wed 29 Jul 2015 12:25:14 AM JST

* Wed 29 Jul 2015 12:25:14 AM JST
    @classmethod

* Wed 29 Jul 2015 12:58:35 AM JST
"@classmethod\n[ ]+def[ ]+"
* Wed 29 Jul 2015 01:00:19 AM JST
(if (py-in-class-block-p) "self, " "")
* Wed 29 Jul 2015 01:00:23 AM JST
(cond ((py-in-class-block-p) "self")
       ((looking-back "@classmethod\n[ ]+def[ ]+") "cls")
       (t ""))
* Wed 29 Jul 2015 01:01:11 AM JST
((looking-back "@classmethod\n[ ]+def[ ]+") "cls")
* Wed 29 Jul 2015 01:01:18 AM JST
(cond ((looking-back "@classmethod\n[ ]+def[ ]+") "cls")
      ((py-in-class-block-p) "self")
      (t ""))
* Wed 29 Jul 2015 01:01:58 AM JST
(cond ((looking-back "@classmethod\n[ ]+def[ ]+") "cls")
      ((py-in-class-block-p) "self, ")
      (t ""))
* Wed 29 Jul 2015 01:02:30 AM JST
def
* Wed 29 Jul 2015 01:06:50 AM JST
(looking-at "^[ ]+@classmethod")
* Wed 29 Jul 2015 01:07:02 AM JST
(save-excursion
  (previous-line 1)
  (beginning-of-line)
  (looking-at "^[ ]+@classmethod")
  )
* Wed 29 Jul 2015 01:07:14 AM JST
(cond ((save-excursion
         (previous-line 1)
         (beginning-of-line)
         (looking-at "^[ ]+@classmethod")
         ) "cls, ")
      ((py-in-class-block-p) "self, ")
      (t ""))
* Wed 29 Jul 2015 01:10:27 AM JST
(save-excursion
         (previous-line 1)
         (beginning-of-line)
         (looking-at "^[ ]+@classmethod")
         )
* Wed 29 Jul 2015 01:12:29 AM JST
(message "%s" (point))
* Wed 29 Jul 2015 01:15:30 AM JST
(re-search-backward "^[ ]+def[ ]" nil 'noerr)
* Wed 29 Jul 2015 01:16:55 AM JST
(save-excursion
  (py:beginning-of-def)
  (previous-line 1)
  (beginning-of-line)
  (looking-at "^[ ]+@classmethod")
  )
* Wed 29 Jul 2015 01:17:13 AM JST
(message "%s" (point))
* Wed 29 Jul 2015 01:18:38 AM JST
(re-search-backward "^[ ]+def[ ]" nil 'noerr)
* Wed 29 Jul 2015 01:18:43 AM JST
(save-excursion
  (re-search-backward "^[ ]+def[ ]" nil 'noerr)
  (previous-line 1)
  (beginning-of-line)
  (looking-at "^[ ]+@classmethod")
  )
* Wed 29 Jul 2015 01:22:11 AM JST
self.span
* Wed 29 Jul 2015 01:24:36 AM JST
(not (looking-at "^[ ]@property"))
* Wed 29 Jul 2015 01:25:24 AM JST
(not (looking-at "^[ ]@property\\("))
* Wed 29 Jul 2015 01:26:12 AM JST

* Wed 29 Jul 2015 01:26:12 AM JST

* Wed 29 Jul 2015 01:26:12 AM JST
    @property

* Wed 29 Jul 2015 01:27:15 AM JST
return 
* Wed 29 Jul 2015 01:29:03 AM JST
            # TODO: (Atami) [2015/07/29]
            raise IndexError('index range 0 to 1 (got {})'.format(index))

* Wed 29 Jul 2015 01:32:14 AM JST

* Wed 29 Jul 2015 01:32:14 AM JST

* Wed 29 Jul 2015 01:32:14 AM JST
        self._span = [start, size]

* Wed 29 Jul 2015 01:33:10 AM JST
class Gravity(IntEnum):
    r"""Gravity

    Gravity is a IntEnum.
    Responsibility:
    """
    Center = 1
    Top = 2
    Bottom = 3
    Left = 4
    Right = 5



* Wed 29 Jul 2015 01:33:57 AM JST
None
* Wed 29 Jul 2015 01:34:00 AM JST
None
* Wed 29 Jul 2015 02:44:15 AM JST

* Wed 29 Jul 2015 02:44:15 AM JST

* Wed 29 Jul 2015 02:44:15 AM JST
        self.gravity = 0

* Wed 29 Jul 2015 03:12:21 AM JST
get_
* Wed 29 Jul 2015 03:13:54 AM JST
defget
* Wed 29 Jul 2015 03:14:13 AM JST
def ${1:name$(replace-regexp-in-string "[[:punct:][:blank:]]" "_" text)}(`(cond ((save-excursion
  (re-search-backward "^[ ]+def[ ]" nil 'noerr)
  (previous-line 1)
  (beginning-of-line)
  (looking-at "^[ ]+@classmethod")
  ) "cls, ")
      ((py-in-class-block-p) "self, ")
      (t ""))`${1:$(let*
    ((namemap '(("__add__"     . "other, ")
                ("__and__"     . "other, ")
                ("__cmp__"     . "other, ")
                ("__coerce__"     . "other, ")
                ("__contains__"     . "el, ")
                ("__delattr__"     . "name, ")
                ("__delete__"     . "instance, ")
                ("__delitem__"     . "key, ")
                ("__divmod__"     . "other, ")
                ("__div__"     . "other, ")
                ("__eq__"     . "other, ")
                ("__exit__"     . "type, value, traceback, ")
                ("__floordiv__"     . "other, ")
                ("__getattribute__"     . "name, ")
                ("__getattr__" . "name, ")
                ("__getitem__" . "key, ")
                ("__get__"     . "instance, owner, ")               
                ("__ge__"     . "other, ")
                ("__gt__"     . "other, ")
                ("__iadd__"     . "other, ")
                ("__iand__"     . "other, ")
                ("__idiv__"     . "other, ")
                ("__ifloordiv__"     . "other, ")
                ("__ilshift__"     . "other, ")
                ("__imod__"     . "other, ")
                ("__imul__"     . "other, ")
                ("__ior__"     . "other, ")
                ("__ipow__"     . "other, modulo")
                ("__irshift__"     . "other, ")
                ("__isub__"     . "other, ")
                ("__iturediv__"     . "other, ")
                ("__rxor__"     . "other, ")
                ("__le__"     . "other, ")
                ("__lshift__"     . "other, ")
                ("__lt__"     . "other, ")
                ("__mod__"     . "other, ")
                ("__mul__"     . "other, ")
                ("__new__"     . "cls, name, bases, dict, ")
                ("__ne__"     . "other, ")
                ("__or__"     . "other, ")
                ("__pow__"     . "other, modulo")
                ("__radd__"     . "other, ")
                ("__rand__"     . "other, ")
                ("__rdivmod__"     . "other, ")
                ("__rdiv__"     . "other, ")
                ("__rfloordiv__"     . "other, ")
                ("__rlshift__"     . "other, ")
                ("__rmod__"     . "other, ")
                ("__rmul__"     . "other, ")
                ("__ror__"     . "other, ")
                ("__rpow__"     . "other, modulo")
                ("__rrshift__"     . "other, ")
                ("__rshift__"     . "other, ")
                ("__rsub__"     . "other, ")
                ("__rtruediv__"     . "other, ")
                ("__rxor__"     . "other, ")
                ("__setattr__"     . "name, value, ")
                ("__setitem__"     . "key, value, ")
                ("__set__"     . "instance, value, ")
                ("__sub__"     . "other, ")
                ))
               (keys (maplist (lambda (lis) (caar lis)) namemap))
               (result "")
               done)
               (when (member text keys)
                   (while (and namemap (not done))
                         (if (string= text (caar namemap))
                                   (progn (setq done t)
                                          (setq result (cdr (car namemap))))
                           (setq namemap (cdr namemap)))))
                result)}$2):
    r"""SUMMARY

    $1($2)
    ${2:$
      (let*
        ((indent
            (concat "\n" (make-string (current-column) 32)))
           (args
            (mapconcat
             '(lambda (x)
                (if (not (string= (nth 0 x) ""))
                    (concat "- " (char-to-string 96) (nth 0 x)
                            (char-to-string 96) ":")))
             (mapcar
              '(lambda (x)
                 (mapcar
                  '(lambda (x)
                     (replace-regexp-in-string "*" ""
                      (replace-regexp-in-string "^[[:blank:]]*" "" x)))
                  x))
              (mapcar '(lambda (x) (split-string x "="))
                      (split-string text ",")))
             indent)))
      (if (string= args "")
          (concat indent "@Return:\n" indent "@Error:" indent (make-string 3 34))
        (mapconcat
         'identity
         (list "" "@Arguments:" args (concat indent "@Return:\n" indent "@Error:")
         (make-string 3 34))
         indent)))
    }
    ${1:$(let*
    ((namemap '(("__abs__"     . "return ")
                ("__add__"     . "return ")
                ("__and__"     . "return ")
                ("__cmp__"     . "return ")
                ("__coerce__"     . "return ")
                ("__complex__"     . "return, ")
                ("__contains__"     . "return, ")
                ("__delete__"     . "instance, ")
                ("__divmod__"     . "return ")
                ("__div__"     . "return ")
                ("__eq__"     . "return ")
                ("__float__"     . "return, ")  
                ("__floordiv__"     . "return ")
                ("__getattribute__"     . "return ")
                ("__getattr__" . "return ")
                ("__getitem__" . "return ")
                ("__ge__"     . "return ")
                ("__gt__"     . "return ")
                ("__hash__"     . "return ")
                ("__hex__"     . "return ")
                ("__iadd__"     . "return ")
                ("__iand__"     . "return ")
                ("__idiv__"     . "return ")
                ("__ifloordiv__"     . "return ")
                ("__ilshift__"     . "return ")
                ("__imod__"     . "return ")
                ("__imul__"     . "return ")
                ("__index__"     . "return ")
                ("__int__"     . "return ")
                ("__invert__"     . "return ")
                ("__ior__"     . "return ")
                ("__ipow__"     . "return ")
                ("__irshift__"     . "return ")
                ("__len__"     . "return ")
                ("__long__"     . "return ")   
                ("__isub__"     . "return ")
                ("__iturediv__"     . "return ")
                ("__rxor__"     . "return ")
                ("__le__"     . "return ")
                ("__lshift__"     . "return ")
                ("__lt__"     . "return ")
                ("__mod__"     . "return ")
                ("__mul__"     . "return ")
                ("__new__"     . "cls, name, bases, dict, ")
                ("__ne__"     . "return ")
                ("__neg__"     . "return ")
                ("__nonzero__"     . "return ")
                ("__oct__"     . "return ")
                ("__pos__"     . "return ")
                ("__or__"     . "return ")
                ("__pow__"     . "return ")
                ("__repr__"     . "return ")
                ("__radd__"     . "return ")
                ("__rand__"     . "return ")
                ("__rdivmod__"     . "return ")
                ("__rdiv__"     . "return ")
                ("__rfloordiv__"     . "return ")
                ("__rlshift__"     . "return ")
                ("__rmod__"     . "return ")
                ("__rmul__"     . "return ")
                ("__ror__"     . "return ")
                ("__rpow__"     . "return modulo")
                ("__rrshift__"     . "return ")
                ("__rshift__"     . "return ")
                ("__rsub__"     . "return ")
                ("__rtruediv__"     . "return ")
                ("__rxor__"     . "return ")
                ("__sub__"     . "return ")
                ("__str__"     . "return ")
                ("__unicode__"     . "return ")
                ))
               (keys (maplist (lambda (lis) (caar lis)) namemap))
               (result "")
               done)
               (when (member text keys)
                   (while (and namemap (not done))
                         (if (string= text (caar namemap))
                                   (progn (setq done t)
                                          (setq result (cdr (car namemap))))
                           (setq namemap (cdr namemap)))))
                result)}$0

* Wed 29 Jul 2015 03:15:04 AM JST
# condition: (not (py:at-string|comment-p))
* Wed 29 Jul 2015 03:19:02 AM JST
    r"""SUMMARY

    $1($2)
    ${2:$
      (let*
        ((indent
            (concat "\n" (make-string (current-column) 32)))
           (args
            (mapconcat
             '(lambda (x)
                (if (not (string= (nth 0 x) ""))
                    (concat "- " (char-to-string 96) (nth 0 x)
                            (char-to-string 96) ":")))
             (mapcar
              '(lambda (x)
                 (mapcar
                  '(lambda (x)
                     (replace-regexp-in-string "*" ""
                      (replace-regexp-in-string "^[[:blank:]]*" "" x)))
                  x))
              (mapcar '(lambda (x) (split-string x "="))
                      (split-string text ",")))
             indent)))
      (if (string= args "")
          (concat indent "@Return:\n" indent "@Error:" indent (make-string 3 34))
        (mapconcat
         'identity
         (list "" "@Arguments:" args (concat indent "@Return:\n" indent "@Error:")
         (make-string 3 34))
         indent)))
    }

* Wed 29 Jul 2015 03:19:12 AM JST

* Wed 29 Jul 2015 03:19:12 AM JST

* Wed 29 Jul 2015 03:19:12 AM JST
    $0

* Wed 29 Jul 2015 03:24:37 AM JST
# expand-env: ((yas/indent-line 'fixed) (yas/wrap-around-region 'nil))
* Wed 29 Jul 2015 03:25:45 AM JST
result)
* Wed 29 Jul 2015 03:26:58 AM JST
result
* Wed 29 Jul 2015 03:26:59 AM JST
                result
* Wed 29 Jul 2015 03:27:15 AM JST
    
* Wed 29 Jul 2015 03:28:49 AM JST
(make-string 3 34)
* Wed 29 Jul 2015 03:31:58 AM JST
"^[ ]+@classmethod"
* Wed 29 Jul 2015 03:32:00 AM JST
"
* Wed 29 Jul 2015 03:32:06 AM JST
"^[ ]+@classmethod"
* Wed 29 Jul 2015 03:32:54 AM JST
"^[ ]+@\\(classmethod\\|staticmethod\\)"
* Wed 29 Jul 2015 03:33:13 AM JST
`(cond ((save-excursion
  (re-search-backward "^[ ]+def[ ]" nil 'noerr)
  (previous-line 1)
  (beginning-of-line)
  (looking-at "^[ ]+@\\(classmethod\\|staticmethod\\)")
  ) "cls, ")
      ((py-in-class-block-p) "self, ")
      (t ""))`
* Wed 29 Jul 2015 03:33:31 AM JST
"^[ ]+@\\(classmethod\\|staticmethod\\)"
* Wed 29 Jul 2015 04:31:38 AM JST
wgap
* Wed 29 Jul 2015 04:31:55 AM JST
wgap
* Wed 29 Jul 2015 04:31:58 AM JST
hgap
* Wed 29 Jul 2015 04:43:32 AM JST
Grid
* Wed 29 Jul 2015 04:43:36 AM JST
__cla
* Wed 29 Jul 2015 04:43:36 AM JST
self.__cla
* Wed 29 Jul 2015 04:56:11 AM JST
[self.row_spec.span[0], self.column_spec.spec[0]]
* Wed 29 Jul 2015 04:56:16 AM JST
self
* Wed 29 Jul 2015 04:56:20 AM JST
self
* Wed 29 Jul 2015 04:56:55 AM JST
([self.row_spec.span[0], self.column_spec.spec[0]] <
                [other.row_spec.span[0], other.column_spec.spec[0]])
* Wed 29 Jul 2015 04:57:16 AM JST
        return ([self.row_spec.span[0], self.column_spec.spec[0]] <
                [other.row_spec.span[0], other.column_spec.spec[0]])

* Wed 29 Jul 2015 04:57:28 AM JST
    def __gt__(self, other):
        return ([self.row_spec.span[0], self.column_spec.spec[0]] > 
                [other.row_spec.span[0], other.column_spec.spec[0]])


* Wed 29 Jul 2015 04:58:07 AM JST

* Wed 29 Jul 2015 04:58:07 AM JST

* Wed 29 Jul 2015 04:58:17 AM JST
[self.row_spec.span[0], self.column_spec.spec[0]]
* Thu 30 Jul 2015 03:05:00 AM JST
len(self._table[0])
* Thu 30 Jul 2015 03:05:30 AM JST

* Thu 30 Jul 2015 03:05:30 AM JST

* Thu 30 Jul 2015 03:05:30 AM JST
        # self._table = [[None, ] * 1 for _ in range(1)]

* Thu 30 Jul 2015 03:06:20 AM JST
cols
* Thu 30 Jul 2015 03:06:20 AM JST
rows, cols
* Thu 30 Jul 2015 03:07:21 AM JST
layoutparams
* Thu 30 Jul 2015 03:07:32 AM JST
item, layoutparams
* Thu 30 Jul 2015 03:07:37 AM JST

* Thu 30 Jul 2015 03:07:37 AM JST

* Thu 30 Jul 2015 03:07:37 AM JST
        - `rows`:

* Thu 30 Jul 2015 03:07:37 AM JST
        - `rows`:

* Thu 30 Jul 2015 03:07:37 AM JST
        - `rows`:
        - `cols`:

* Thu 30 Jul 2015 03:07:37 AM JST
        - `rows`:
        - `cols`:

* Thu 30 Jul 2015 03:07:37 AM JST
        - `rows`:
        - `cols`:
        - `item`:

* Thu 30 Jul 2015 03:08:04 AM JST
self.set_layout_item(rows, cols, None)
* Thu 30 Jul 2015 03:08:10 AM JST
slf.
* Thu 30 Jul 2015 03:14:34 AM JST
        for rects in grided:
            spacing_horizon(rects, self._wspace)

* Thu 30 Jul 2015 03:14:39 AM JST
grided
* Thu 30 Jul 2015 03:14:49 AM JST

* Thu 30 Jul 2015 03:14:49 AM JST

* Thu 30 Jul 2015 03:14:49 AM JST
        for rects in grided:

* Thu 30 Jul 2015 03:29:16 AM JST
        for rects in grided:
            spacing_horizon(rects, self._wspace)
        for rects in zip(*grided):
            spacing_vertical(rects, self._hspace)

* Thu 30 Jul 2015 03:29:21 AM JST
grided
* Thu 30 Jul 2015 03:44:49 AM JST
 = rtable[row_span[0]][col_span[0]]
* Thu 30 Jul 2015 03:47:48 AM JST
            
* Thu 30 Jul 2015 03:48:01 AM JST
            
* Thu 30 Jul 2015 03:48:18 AM JST

* Thu 30 Jul 2015 03:50:59 AM JST
from xahk.wm import WindowManager
import xcb,xcb.xproto as xproto;c=xcb.connect()
WindowManager(c).list_windows()

* Thu 30 Jul 2015 03:51:20 AM JST
form 
* Thu 30 Jul 2015 03:52:52 AM JST
for _ in range(6):
    sbp.Popen('comix')

* Thu 30 Jul 2015 03:53:22 AM JST
x
* Thu 30 Jul 2015 03:53:23 AM JST
form x
* Thu 30 Jul 2015 03:54:06 AM JST
WindowWMClass
* Thu 30 Jul 2015 03:54:09 AM JST
from xahk.windowspec import WindowWMClass
* Thu 30 Jul 2015 03:54:23 AM JST
xahk.windowspec
* Thu 30 Jul 2015 03:54:29 AM JST
WindowWMClassSpec
* Thu 30 Jul 2015 03:54:33 AM JST
from xahk.windowspec import WindowWMClassSpec
* Thu 30 Jul 2015 03:54:42 AM JST
import xcb,xcb.xproto as xproto;c=xcb.connect()
WindowManager(c).list_windows()

* Thu 30 Jul 2015 03:54:49 AM JST
from xahk.wm import WindowManager

* Thu 30 Jul 2015 03:54:58 AM JST
WindowManager(c).list_windows()
* Thu 30 Jul 2015 03:55:17 AM JST
WindowWMClassSpec('comix')
* Thu 30 Jul 2015 03:55:29 AM JST
for _ in range(6):
    sbp.Popen('comix')
from xahk.layout.grid import GridLayout, LayoutParams, GridSpec
from xahk.wm import WindowManager
from xahk.windowspec import WindowWMClassSpec
import xcb,xcb.xproto as xproto;c=xcb.connect()
comixs=WindowManager(c).list_windows(WindowWMClassSpec('comix'))

* Thu 30 Jul 2015 03:56:21 AM JST
for _ in range(6):
    sbp.Popen('comix')

* Thu 30 Jul 2015 03:56:37 AM JST

* Thu 30 Jul 2015 03:56:37 AM JST

* Thu 30 Jul 2015 03:56:37 AM JST
c=xcb.connect()

* Thu 30 Jul 2015 03:57:02 AM JST
from xahk.layout.grid import GridLayout, LayoutParams, GridSpec
* Thu 30 Jul 2015 03:57:30 AM JST
layoutparams
* Thu 30 Jul 2015 03:57:42 AM JST
for _ in range(6):
    sbp.Popen('comix')

* Thu 30 Jul 2015 03:58:29 AM JST
WindowWMClassSpec('comix')
* Thu 30 Jul 2015 03:59:05 AM JST
com
* Thu 30 Jul 2015 04:01:54 AM JST
row0 = GridSpec.create(0)
row1 = GridSpec.create(1)
row2 = GridSpec.create(2)

* Thu 30 Jul 2015 04:02:00 AM JST
row
* Thu 30 Jul 2015 04:02:01 AM JST
row
* Thu 30 Jul 2015 04:02:01 AM JST
row
* Thu 30 Jul 2015 04:03:23 AM JST

* Thu 30 Jul 2015 04:03:28 AM JST

* Thu 30 Jul 2015 04:03:40 AM JST

* Thu 30 Jul 2015 04:03:50 AM JST

* Thu 30 Jul 2015 04:05:33 AM JST

* Thu 30 Jul 2015 04:05:38 AM JST

* Thu 30 Jul 2015 04:06:26 AM JST
Rectangle
* Thu 30 Jul 2015 04:07:09 AM JST
1280, 1024
* Thu 30 Jul 2015 04:08:04 AM JST

* Thu 30 Jul 2015 04:08:10 AM JST

* Thu 30 Jul 2015 04:08:17 AM JST

* Thu 30 Jul 2015 04:08:24 AM JST

* Thu 30 Jul 2015 04:08:30 AM JST

* Thu 30 Jul 2015 04:08:50 AM JST
layout.
* Thu 30 Jul 2015 04:09:03 AM JST
prompt
* Thu 30 Jul 2015 04:09:30 AM JST
prompt
* Thu 30 Jul 2015 04:10:28 AM JST
from time import sleep
import subprocess as sbp

from rectangle import Rectangle

import xcb,xcb.xproto as xproto
from xahk.layout.grid import GridLayout, LayoutParams, GridSpec
from xahk.wm import WindowManager
from xahk.windowspec import WindowWMClassSpec

for _ in range(6):
    sbp.Popen('comix')

* Thu 30 Jul 2015 04:10:55 AM JST
c=xcb.connect()

wm = WindowManager(c)
spec = WindowWMClassSpec('comix')

* Thu 30 Jul 2015 04:11:01 AM JST
comixs=WindowManager(c).list_windows(spec)
* Thu 30 Jul 2015 04:11:09 AM JST
row0 = GridSpec.create(0)
row1 = GridSpec.create(1)
# row2 = GridSpec.create(2)

col0 = GridSpec.create(0)
col1 = GridSpec.create(1)
col2 = GridSpec.create(2)

param00 = LayoutParams(row0, col0)
param01 = LayoutParams(row0, col1)
param02 = LayoutParams(row0, col2)
param10 = LayoutParams(row1, col0)
param11 = LayoutParams(row1, col1)
param12 = LayoutParams(row1, col2)

* Thu 30 Jul 2015 04:11:15 AM JST
glayout = GridLayout(Rectangle(0, 0, 1280, 1024))
glayout.set_layout_item(comixs[0], param00)
glayout.set_layout_item(comixs[1], param01)
glayout.set_layout_item(comixs[2], param02)
glayout.set_layout_item(comixs[3], param10)
glayout.set_layout_item(comixs[4], param11)
glayout.set_layout_item(comixs[5], param12)

* Thu 30 Jul 2015 04:12:23 AM JST
glayout = GridLayout(Rectangle(0, 0, 1280, 1024))
glayout.set_layout_item(comixs[0], param00)
glayout.set_layout_item(comixs[1], param01)
glayout.set_layout_item(comixs[2], param02)
glayout.set_layout_item(comixs[3], param10)
glayout.set_layout_item(comixs[4], param11)
glayout.set_layout_item(comixs[5], param12)

* Thu 30 Jul 2015 04:15:24 AM JST
glayout.set_layout_item(comixs[0], param00)
glayout.set_layout_item(comixs[1], param01)
glayout.set_layout_item(comixs[2], param02)
glayout.set_layout_item(comixs[3], param10)
glayout.set_layout_item(comixs[4], param11)
glayout.set_layout_item(comixs[5], param12)

* Thu 30 Jul 2015 04:15:28 AM JST
glayout.layout()
* Thu 30 Jul 2015 04:15:47 AM JST
self._screen.split_grid(self.rows, self.columns)
* Thu 30 Jul 2015 05:17:52 AM JST
leyoutparams.get_row_spec().span[1]
* Thu 30 Jul 2015 05:18:19 AM JST
        
* Thu 30 Jul 2015 05:24:28 AM JST
from time import sleep
import subprocess as sbp

from rectangle import Rectangle

import xcb,xcb.xproto as xproto
from xahk.layout.grid import GridLayout, LayoutParams, GridSpec
from xahk.wm import WindowManager
from xahk.windowspec import WindowWMClassSpec

for _ in range(6):
    sbp.Popen('comix')


* Thu 30 Jul 2015 05:24:42 AM JST
c=xcb.connect()

wm = WindowManager(c)
spec = WindowWMClassSpec('comix')
comixs = []
for _ in xrange(0, 10000000):
    comixs=WindowManager(c).list_windows(spec)
    if 6 <= len(comixs):
        break

* Thu 30 Jul 2015 05:24:49 AM JST
row0 = GridSpec.create(0)
row1 = GridSpec.create(1)
# row2 = GridSpec.create(2)

col0 = GridSpec.create(0)
col1 = GridSpec.create(1)
col2 = GridSpec.create(2)

param00 = LayoutParams(row0, col0)
param01 = LayoutParams(row0, col1)
param02 = LayoutParams(row0, col2)
param10 = LayoutParams(row1, col0)
param11 = LayoutParams(row1, col1)
param12 = LayoutParams(row1, col2)

* Thu 30 Jul 2015 05:24:56 AM JST
glayout = GridLayout(Rectangle(0, 0, 1280, 1024))
glayout.set_layout_item(comixs[0], param00)
glayout.set_layout_item(comixs[1], param01)
glayout.set_layout_item(comixs[2], param02)
glayout.set_layout_item(comixs[3], param10)
glayout.set_layout_item(comixs[4], param11)
glayout.set_layout_item(comixs[5], param12)

* Thu 30 Jul 2015 05:26:32 AM JST
glayout.layout()
* Thu 30 Jul 2015 05:27:49 AM JST
_margin
* Thu 30 Jul 2015 05:29:56 AM JST
from time import sleep
import subprocess as sbp

from rectangle import Rectangle

import xcb,xcb.xproto as xproto
from xahk.layout.grid import GridLayout, LayoutParams, GridSpec
from xahk.wm import WindowManager
from xahk.windowspec import WindowWMClassSpec

for _ in range(6):
    sbp.Popen('comix')

* Thu 30 Jul 2015 05:30:26 AM JST
_margin
* Thu 30 Jul 2015 05:31:14 AM JST
from time import sleep
import subprocess as sbp

from rectangle import Rectangle

import xcb,xcb.xproto as xproto
from xahk.layout.grid import GridLayout, LayoutParams, GridSpec
from xahk.wm import WindowManager
from xahk.windowspec import WindowWMClassSpec

for _ in range(6):
    sbp.Popen('comix')

* Thu 30 Jul 2015 05:31:54 AM JST
c=xcb.connect()

wm = WindowManager(c)
spec = WindowWMClassSpec('comix')
comixs = []
for _ in xrange(0, 10000000):
    comixs=WindowManager(c).list_windows(spec)
    if 6 <= len(comixs):
        break

row0 = GridSpec.create(0)
row1 = GridSpec.create(1)
# row2 = GridSpec.create(2)

col0 = GridSpec.create(0)
col1 = GridSpec.create(1)
col2 = GridSpec.create(2)

param00 = LayoutParams(row0, col0)
param01 = LayoutParams(row0, col1)
param02 = LayoutParams(row0, col2)
param10 = LayoutParams(row1, col0)
param11 = LayoutParams(row1, col1)
param12 = LayoutParams(row1, col2)
# param20 = LayoutParams(row2, col0)
# param22 = LayoutParams(row2, col2)

* Thu 30 Jul 2015 05:32:00 AM JST
glayout = GridLayout(Rectangle(0, 0, 1280, 1024))
glayout.set_layout_item(comixs[0], param00)
glayout.set_layout_item(comixs[1], param01)
glayout.set_layout_item(comixs[2], param02)
glayout.set_layout_item(comixs[3], param10)
glayout.set_layout_item(comixs[4], param11)
glayout.set_layout_item(comixs[5], param12)

* Thu 30 Jul 2015 05:32:04 AM JST
glayout.layout()

* Thu 30 Jul 2015 05:39:10 AM JST
row_span[1]
* Thu 30 Jul 2015 05:39:50 AM JST
        
* Thu 30 Jul 2015 05:39:51 AM JST
_rows
* Thu 30 Jul 2015 05:40:18 AM JST
from time import sleep
import subprocess as sbp

from rectangle import Rectangle

import xcb,xcb.xproto as xproto
from xahk.layout.grid import GridLayout, LayoutParams, GridSpec
from xahk.wm import WindowManager
from xahk.windowspec import WindowWMClassSpec

for _ in range(6):
    sbp.Popen('comix')

* Thu 30 Jul 2015 05:40:34 AM JST
c=xcb.connect()

wm = WindowManager(c)
spec = WindowWMClassSpec('comix')
comixs = []
for _ in xrange(0, 10000000):
    comixs=WindowManager(c).list_windows(spec)
    if 6 <= len(comixs):
        break

row0 = GridSpec.create(0)
row1 = GridSpec.create(1)
# row2 = GridSpec.create(2)

col0 = GridSpec.create(0)
col1 = GridSpec.create(1)
col2 = GridSpec.create(2)

param00 = LayoutParams(row0, col0)
param01 = LayoutParams(row0, col1)
param02 = LayoutParams(row0, col2)
param10 = LayoutParams(row1, col0)
param11 = LayoutParams(row1, col1)
param12 = LayoutParams(row1, col2)
# param20 = LayoutParams(row2, col0)
# param22 = LayoutParams(row2, col2)

* Thu 30 Jul 2015 05:40:44 AM JST
glayout = GridLayout(Rectangle(0, 0, 1280, 1024))
glayout.set_layout_item(comixs[0], param00)
glayout.set_layout_item(comixs[1], param01)
glayout.set_layout_item(comixs[2], param02)
glayout.set_layout_item(comixs[3], param10)
glayout.set_layout_item(comixs[4], param11)
glayout.set_layout_item(comixs[5], param12)

* Thu 30 Jul 2015 05:40:49 AM JST
glayout.layout()

* Thu 30 Jul 2015 05:54:06 AM JST
from time import sleep
import subprocess as sbp

from rectangle import Rectangle

import xcb,xcb.xproto as xproto
from xahk.layout.grid import GridLayout, LayoutParams, GridSpec
from xahk.wm import WindowManager
from xahk.windowspec import WindowWMClassSpec

for _ in range(6):
    sbp.Popen('comix')


* Thu 30 Jul 2015 05:54:24 AM JST
c=xcb.connect()

wm = WindowManager(c)
spec = WindowWMClassSpec('comix')
comixs = []
for _ in xrange(0, 10000000):
    comixs=WindowManager(c).list_windows(spec)
    if 6 <= len(comixs):
        break

row0 = GridSpec.create(0)
row1 = GridSpec.create(1)
# row2 = GridSpec.create(2)

col0 = GridSpec.create(0)
col1 = GridSpec.create(1)
col2 = GridSpec.create(2)

param00 = LayoutParams(row0, col0)
param01 = LayoutParams(row0, col1)
param02 = LayoutParams(row0, col2)
param10 = LayoutParams(row1, col0)
param11 = LayoutParams(row1, col1)
param12 = LayoutParams(row1, col2)
# param20 = LayoutParams(row2, col0)
# param22 = LayoutParams(row2, col2)

* Thu 30 Jul 2015 05:54:31 AM JST
glayout = GridLayout(Rectangle(0, 0, 1280, 1024))
glayout.set_layout_item(comixs[0], param00)
glayout.set_layout_item(comixs[1], param01)
glayout.set_layout_item(comixs[2], param02)
glayout.set_layout_item(comixs[3], param10)
glayout.set_layout_item(comixs[4], param11)
glayout.set_layout_item(comixs[5], param12)

* Thu 30 Jul 2015 05:54:36 AM JST
glayout.layout()

* Thu 30 Jul 2015 05:57:18 AM JST

* Thu 30 Jul 2015 05:57:18 AM JST

* Thu 30 Jul 2015 05:57:18 AM JST
sleep(10)

* Thu 30 Jul 2015 05:57:26 AM JST
from time import sleep
import subprocess as sbp

from rectangle import Rectangle

import xcb,xcb.xproto as xproto
from xahk.layout.grid import GridLayout, LayoutParams, GridSpec
from xahk.wm import WindowManager
from xahk.windowspec import WindowWMClassSpec

for _ in range(6):
    sbp.Popen('comix')



c=xcb.connect()

wm = WindowManager(c)
spec = WindowWMClassSpec('comix')
comixs = []
for _ in xrange(0, 10000000):
    comixs=WindowManager(c).list_windows(spec)
    if 6 <= len(comixs):
        break

* Thu 30 Jul 2015 05:57:44 AM JST
row0 = GridSpec.create(0)
row1 = GridSpec.create(1)
# row2 = GridSpec.create(2)

col0 = GridSpec.create(0)
col1 = GridSpec.create(1)
col2 = GridSpec.create(2)

param00 = LayoutParams(row0, col0)
param01 = LayoutParams(row0, col1)
param02 = LayoutParams(row0, col2)
param10 = LayoutParams(row1, col0)
param11 = LayoutParams(row1, col1)
param12 = LayoutParams(row1, col2)
# param20 = LayoutParams(row2, col0)
# param22 = LayoutParams(row2, col2)

* Thu 30 Jul 2015 05:57:50 AM JST
glayout = GridLayout(Rectangle(0, 0, 1280, 1024))
glayout.set_layout_item(comixs[0], param00)

* Thu 30 Jul 2015 05:58:01 AM JST
glayout.set_layout_item(comixs[1], param01)
* Thu 30 Jul 2015 05:58:04 AM JST
glayout.set_layout_item(comixs[2], param02)
* Thu 30 Jul 2015 05:58:08 AM JST
glayout.set_layout_item(comixs[3], param10)
* Thu 30 Jul 2015 05:59:04 AM JST
glayout.set_layout_item(comixs[4], param11)
* Thu 30 Jul 2015 05:59:10 AM JST
glayout.set_layout_item(comixs[5], param12)
* Thu 30 Jul 2015 05:59:28 AM JST

* Thu 30 Jul 2015 05:59:28 AM JST

* Thu 30 Jul 2015 05:59:28 AM JST
from time import sleep

* Thu 30 Jul 2015 05:59:36 AM JST
import subprocess as sbp

from rectangle import Rectangle

import xcb,xcb.xproto as xproto
from xahk.layout.grid import GridLayout, LayoutParams, GridSpec
from xahk.wm import WindowManager
from xahk.windowspec import WindowWMClassSpec

for _ in range(6):
    sbp.Popen('comix')



c=xcb.connect()

wm = WindowManager(c)
spec = WindowWMClassSpec('comix')
comixs = []
for _ in xrange(0, 10000000):
    comixs=WindowManager(c).list_windows(spec)
    if 6 <= len(comixs):
        break

row0 = GridSpec.create(0)
row1 = GridSpec.create(1)
# row2 = GridSpec.create(2)

col0 = GridSpec.create(0)
col1 = GridSpec.create(1)
col2 = GridSpec.create(2)

param00 = LayoutParams(row0, col0)
param01 = LayoutParams(row0, col1)
param02 = LayoutParams(row0, col2)
param10 = LayoutParams(row1, col0)
param11 = LayoutParams(row1, col1)
param12 = LayoutParams(row1, col2)
# param20 = LayoutParams(row2, col0)
# param22 = LayoutParams(row2, col2)

* Thu 30 Jul 2015 05:59:52 AM JST
glayout = GridLayout(Rectangle(0, 0, 1280, 1024))

* Thu 30 Jul 2015 05:59:56 AM JST
glayout.set_layout_item(comixs[0], param00)

* Thu 30 Jul 2015 06:00:00 AM JST
glayout.set_layout_item(comixs[1], param01)

* Thu 30 Jul 2015 06:00:03 AM JST
glayout.set_layout_item(comixs[2], param02)

* Thu 30 Jul 2015 06:00:07 AM JST
glayout.set_layout_item(comixs[3], param10)

* Thu 30 Jul 2015 06:00:13 AM JST
glayout.set_layout_item(comixs[4], param11)

* Thu 30 Jul 2015 06:00:22 AM JST
glayout.set_layout_item(comixs[5], param12)

* Thu 30 Jul 2015 06:01:00 AM JST
glayout.layout()
* Thu 30 Jul 2015 06:02:08 AM JST
_rows
* Thu 30 Jul 2015 06:02:35 AM JST
import subprocess as sbp

from rectangle import Rectangle

import xcb,xcb.xproto as xproto
from xahk.layout.grid import GridLayout, LayoutParams, GridSpec
from xahk.wm import WindowManager
from xahk.windowspec import WindowWMClassSpec

for _ in range(6):
    sbp.Popen('comix')



c=xcb.connect()

wm = WindowManager(c)
spec = WindowWMClassSpec('comix')
comixs = []
for _ in xrange(0, 10000000):
    comixs=WindowManager(c).list_windows(spec)
    if 6 <= len(comixs):
        break

row0 = GridSpec.create(0)
row1 = GridSpec.create(1)
# row2 = GridSpec.create(2)

col0 = GridSpec.create(0)
col1 = GridSpec.create(1)
col2 = GridSpec.create(2)

param00 = LayoutParams(row0, col0)
param01 = LayoutParams(row0, col1)
param02 = LayoutParams(row0, col2)
param10 = LayoutParams(row1, col0)
param11 = LayoutParams(row1, col1)
param12 = LayoutParams(row1, col2)
# param20 = LayoutParams(row2, col0)
# param22 = LayoutParams(row2, col2)

* Thu 30 Jul 2015 06:02:52 AM JST
glayout = GridLayout(Rectangle(0, 0, 1280, 1024))
glayout.set_layout_item(comixs[0], param00)
glayout.set_layout_item(comixs[1], param01)
glayout.set_layout_item(comixs[2], param02)
glayout.set_layout_item(comixs[3], param10)
glayout.set_layout_item(comixs[4], param11)
glayout.set_layout_item(comixs[5], param12)

* Thu 30 Jul 2015 06:03:02 AM JST
glayout.layout()
* Thu 30 Jul 2015 06:05:18 AM JST
0,0,1272, 1000
* Thu 30 Jul 2015 06:05:47 AM JST
import subprocess as sbp

from rectangle import Rectangle

import xcb,xcb.xproto as xproto
from xahk.layout.grid import GridLayout, LayoutParams, GridSpec
from xahk.wm import WindowManager
from xahk.windowspec import WindowWMClassSpec

for _ in range(6):
    sbp.Popen('comix')

* Thu 30 Jul 2015 06:06:07 AM JST
c=xcb.connect()

wm = WindowManager(c)
spec = WindowWMClassSpec('comix')
comixs = []
for _ in xrange(0, 10000000):
    comixs=WindowManager(c).list_windows(spec)
    if 6 <= len(comixs):
        break

row0 = GridSpec.create(0)
row1 = GridSpec.create(1)
# row2 = GridSpec.create(2)

col0 = GridSpec.create(0)
col1 = GridSpec.create(1)
col2 = GridSpec.create(2)

param00 = LayoutParams(row0, col0)
param01 = LayoutParams(row0, col1)
param02 = LayoutParams(row0, col2)
param10 = LayoutParams(row1, col0)
param11 = LayoutParams(row1, col1)
param12 = LayoutParams(row1, col2)
# param20 = LayoutParams(row2, col0)
# param22 = LayoutParams(row2, col2)

glayout = GridLayout(Rectangle(0,0,1272, 1000))
glayout.set_layout_item(comixs[0], param00)
glayout.set_layout_item(comixs[1], param01)
glayout.set_layout_item(comixs[2], param02)
glayout.set_layout_item(comixs[3], param10)
glayout.set_layout_item(comixs[4], param11)
glayout.set_layout_item(comixs[5], param12)

* Thu 30 Jul 2015 06:06:15 AM JST
glayout.layout()
* Thu 30 Jul 2015 06:06:58 AM JST

* Thu 30 Jul 2015 06:06:58 AM JST

* Thu 30 Jul 2015 06:06:59 AM JST
        print(cols)

* Thu 30 Jul 2015 06:07:01 AM JST

* Thu 30 Jul 2015 06:07:01 AM JST

* Thu 30 Jul 2015 06:07:01 AM JST
        print(rows)

* Thu 30 Jul 2015 06:08:29 AM JST
import subprocess as sbp

from rectangle import Rectangle

import xcb,xcb.xproto as xproto
from xahk.layout.grid import GridLayout, LayoutParams, GridSpec
from xahk.wm import WindowManager
from xahk.windowspec import WindowWMClassSpec

for _ in range(6):
    sbp.Popen('comix')



c=xcb.connect()

wm = WindowManager(c)
spec = WindowWMClassSpec('comix')
comixs = []
for _ in xrange(0, 10000000):
    comixs=WindowManager(c).list_windows(spec)
    if 6 <= len(comixs):
        break

row0 = GridSpec.create(0)
row1 = GridSpec.create(1)
# row2 = GridSpec.create(2)

col0 = GridSpec.create(0)
col1 = GridSpec.create(1)
col2 = GridSpec.create(2)

param00 = LayoutParams(row0, col0)
param01 = LayoutParams(row0, col1)
param02 = LayoutParams(row0, col2)
param10 = LayoutParams(row1, col0)
param11 = LayoutParams(row1, col1)
param12 = LayoutParams(row1, col2)
# param20 = LayoutParams(row2, col0)
# param22 = LayoutParams(row2, col2)

* Thu 30 Jul 2015 06:08:46 AM JST
glayout = GridLayout(Rectangle(0,0,1272, 1000), 3, 3)
glayout.set_layout_item(comixs[0], param00)
glayout.set_layout_item(comixs[1], param01)
glayout.set_layout_item(comixs[2], param02)
glayout.set_layout_item(comixs[3], param10)
glayout.set_layout_item(comixs[4], param11)
glayout.set_layout_item(comixs[5], param12)

* Thu 30 Jul 2015 06:08:52 AM JST
glayout.layout()

* Thu 30 Jul 2015 06:26:08 AM JST
rectangle, 
* Thu 30 Jul 2015 06:27:37 AM JST

* Thu 30 Jul 2015 06:27:37 AM JST

* Thu 30 Jul 2015 06:27:38 AM JST
        self._screen = rectangle

* Thu 30 Jul 2015 06:27:40 AM JST
rectangle, 
* Thu 30 Jul 2015 06:29:15 AM JST

* Thu 30 Jul 2015 06:29:15 AM JST

* Thu 30 Jul 2015 06:29:15 AM JST
        rect = deepcopy(rect)

* Thu 30 Jul 2015 06:31:24 AM JST

* Thu 30 Jul 2015 06:31:25 AM JST

* Thu 30 Jul 2015 06:31:25 AM JST
        self._rectangle = rectangle

* Thu 30 Jul 2015 06:31:27 AM JST
rectangle, 
* Thu 30 Jul 2015 06:32:14 AM JST
_rectangle
* Thu 30 Jul 2015 06:32:14 AM JST
self._rectangle
* Thu 30 Jul 2015 06:32:22 AM JST
set_bounds
* Thu 30 Jul 2015 06:34:19 AM JST
set_bounds
* Thu 30 Jul 2015 06:34:26 AM JST
                
* Thu 30 Jul 2015 06:36:08 AM JST
LayoutItem
* Thu 30 Jul 2015 06:36:18 AM JST
LayoutItem
* Thu 30 Jul 2015 06:37:08 AM JST
    def layout(self, rect):
        r"""SUMMARY

        layout(rect)

        @Arguments:
        - `rect`:

        @Return:

        @Error:
        """
        self.set_bounds(rect.x, rect.y, rect.width, rect.height)

* Thu 30 Jul 2015 06:37:40 AM JST
form 
* Thu 30 Jul 2015 06:37:55 AM JST
LayoutItem
* Thu 30 Jul 2015 06:38:04 AM JST
LayoutItem
* Thu 30 Jul 2015 06:38:20 AM JST
    def layout(self, rect):
        r"""SUMMARY

        layout(rect)

        @Arguments:
        - `rect`:

        @Return:

        @Error:
        """
        self.set_bounds(rect.x, rect.y, rect.width, rect.height)

* Thu 30 Jul 2015 06:39:23 AM JST
Rectangle(0,0,1272, 1000)
* Thu 30 Jul 2015 06:39:40 AM JST
import subprocess as sbp

from rectangle import Rectangle

import xcb,xcb.xproto as xproto
from xahk.layout.grid import GridLayout, LayoutParams, GridSpec
from xahk.wm import WindowManager
from xahk.windowspec import WindowWMClassSpec

for _ in range(6):
    sbp.Popen('comix')



c=xcb.connect()

wm = WindowManager(c)
spec = WindowWMClassSpec('comix')
comixs = []
for _ in xrange(0, 10000000):
    comixs=WindowManager(c).list_windows(spec)
    if 6 <= len(comixs):
        break

row0 = GridSpec.create(0)
row1 = GridSpec.create(1)
# row2 = GridSpec.create(2)

col0 = GridSpec.create(0)
col1 = GridSpec.create(1)
col2 = GridSpec.create(2)

param00 = LayoutParams(row0, col0)
param01 = LayoutParams(row0, col1)
param02 = LayoutParams(row0, col2)
param10 = LayoutParams(row1, col0)
param11 = LayoutParams(row1, col1)
param12 = LayoutParams(row1, col2)
# param20 = LayoutParams(row2, col0)
# param22 = LayoutParams(row2, col2)

* Thu 30 Jul 2015 06:39:57 AM JST
glayout = GridLayout(3, 3)
glayout.set_layout_item(comixs[0], param00)
glayout.set_layout_item(comixs[1], param01)
glayout.set_layout_item(comixs[2], param02)
glayout.set_layout_item(comixs[3], param10)
glayout.set_layout_item(comixs[4], param11)
glayout.set_layout_item(comixs[5], param12)

* Thu 30 Jul 2015 06:40:04 AM JST
glayout.layout(Rectangle(0,0,1272, 1000))

* Thu 30 Jul 2015 06:56:25 AM JST
WindowWMClassSpec
* Thu 30 Jul 2015 06:57:01 AM JST
from xahk.wm import WindowManager
import xcb,xcb.xproto as xproto;c=xcb.connect()
WindowManager(c).list_windows()

* Thu 30 Jul 2015 06:57:10 AM JST
WindowManager(c).list_windows()
* Thu 30 Jul 2015 06:57:27 AM JST
'New Tab - Google Chrome'
* Thu 30 Jul 2015 06:58:09 AM JST
from rectangle import Rectangle

import xcb,xcb.xproto as xproto
from xahk.layout.grid import GridLayout, LayoutParams, GridSpec
from xahk.wm import WindowManager
from xahk.windowspec import WindowTitleSpec


c=xcb.connect()

wm = WindowManager(c)
spec = WindowTitleSpec('New Tab - Google Chrome')
wins = []
for _ in xrange(0, 10000000):
    wins=WindowManager(c).list_windows(spec)
    if 6 <= len(wins):
        break

* Thu 30 Jul 2015 06:58:18 AM JST
row0 = GridSpec.create(0)
row1 = GridSpec.create(1)
# row2 = GridSpec.create(2)

col0 = GridSpec.create(0)
col1 = GridSpec.create(1)
col2 = GridSpec.create(2)

param00 = LayoutParams(row0, col0)
param01 = LayoutParams(row0, col1)
param02 = LayoutParams(row0, col2)
param10 = LayoutParams(row1, col0)
param11 = LayoutParams(row1, col1)
param12 = LayoutParams(row1, col2)
# param20 = LayoutParams(row2, col0)
# param22 = LayoutParams(row2, col2)

* Thu 30 Jul 2015 06:58:24 AM JST
glayout = GridLayout(2, 6)
glayout.set_layout_item(wins[0], param00)
glayout.set_layout_item(wins[1], param01)
glayout.set_layout_item(wins[2], param02)
glayout.set_layout_item(wins[3], param10)
glayout.set_layout_item(wins[4], param11)
glayout.set_layout_item(wins[5], param12)

* Thu 30 Jul 2015 06:58:29 AM JST
glayout.layout(Rectangle(0,0,1272, 1000))

* Thu 30 Jul 2015 07:02:09 AM JST

* Thu 30 Jul 2015 07:02:12 AM JST

* Thu 30 Jul 2015 07:02:23 AM JST
param10.set_top_margin(-10)
param11.set_top_margin(-10)
param12.set_top_margin(-10)

* Thu 30 Jul 2015 07:02:50 AM JST
param10.set_top_margin(-50)
param11.set_top_margin(-50)
param12.set_top_margin(-50)

* Thu 30 Jul 2015 07:03:05 AM JST
param10.set_top_margin(-50)
param11.set_top_margin(-50)
param12.set_top_margin(-50)

* Thu 30 Jul 2015 07:03:29 AM JST
param10.set_bottom_margin(50)
param11.set_bottom_margin(50)
param12.set_bottom_margin(50)

* Thu 30 Jul 2015 07:03:51 AM JST
param10.set_top_margin(-40)
param11.set_top_margin(-40)
param12.set_top_margin(-40)

* Thu 30 Jul 2015 07:28:09 AM JST
form 
* Thu 30 Jul 2015 07:28:10 AM JST
form 
* Thu 30 Jul 2015 07:28:13 AM JST
layout_item
* Thu 30 Jul 2015 07:28:18 AM JST
LayoutItem
* Thu 30 Jul 2015 07:28:24 AM JST
GridLayout
* Thu 30 Jul 2015 07:28:48 AM JST
LayoutParams
* Thu 30 Jul 2015 07:28:55 AM JST
GridSpec, LayoutParams
* Thu 30 Jul 2015 07:29:54 AM JST
LayoutItem, VerticalLayout, HorizonLayout
* Thu 30 Jul 2015 07:30:13 AM JST

* Thu 30 Jul 2015 07:30:13 AM JST

* Thu 30 Jul 2015 07:30:13 AM JST
from xahk.layout.layout_info import LayoutInfo

* Thu 30 Jul 2015 07:30:22 AM JST
LayoutItem
* Thu 30 Jul 2015 07:30:41 AM JST
VerticalLayout(
* Thu 30 Jul 2015 07:30:43 AM JST
            
* Thu 30 Jul 2015 07:31:04 AM JST
Rectangle(x=1280, y=0, width=1680, height=1028)
* Thu 30 Jul 2015 07:34:40 AM JST
    
* Thu 30 Jul 2015 07:34:57 AM JST
    
* Thu 30 Jul 2015 07:35:01 AM JST
    
* Thu 30 Jul 2015 07:36:17 AM JST
param00 = LayoutParams(row0, col0)
param01 = LayoutParams(row0, col1)
param02 = LayoutParams(row0, col2)
param10 = LayoutParams(row1, col0)
param11 = LayoutParams(row1, col1)
param12 = LayoutParams(row1, col2)

* Thu 30 Jul 2015 07:38:23 AM JST
    row0 = GridSpec.create(0)
    row1 = GridSpec.create(1)
    col0 = GridSpec.create(0)
    col1 = GridSpec.create(1)
    col2 = GridSpec.create(2)

* Thu 30 Jul 2015 07:43:30 AM JST

* Thu 30 Jul 2015 07:43:30 AM JST

* Thu 30 Jul 2015 07:43:30 AM JST
        self.screen = Rectangle(x=1280, y=0, width=1680, height=1028)

* Thu 30 Jul 2015 07:43:32 AM JST

* Thu 30 Jul 2015 07:43:32 AM JST

* Thu 30 Jul 2015 07:43:32 AM JST
        self.screen = Rectangle(x=1280, y=0, width=1680, height=1028)

* Thu 30 Jul 2015 07:50:09 AM JST
, top=-40, bottom=50
* Thu 30 Jul 2015 07:52:00 AM JST
candidate = 
* Thu 30 Jul 2015 07:52:10 AM JST
WindowTitleSpec('ピンポイント天気（大津）'
                    ' - ウェザーニュース - Google Chrome')
* Thu 30 Jul 2015 07:52:27 AM JST
LayoutParams(ROW0, COL0)
* Thu 30 Jul 2015 07:52:42 AM JST
WindowTitleSpec('気象庁 | 天気予報 - Google Chrome')
* Thu 30 Jul 2015 07:52:52 AM JST
LayoutParams(ROW0, COL1)
* Thu 30 Jul 2015 07:53:06 AM JST
WindowTitleSpec('雨雲レーダー - ウェザーニュース - Google Chrome')
* Thu 30 Jul 2015 07:53:13 AM JST
LayoutParams(ROW0, COL2)
* Thu 30 Jul 2015 07:53:40 AM JST
WindowTitleSpec('気象庁 | 天気図 - Google Chrome')
* Thu 30 Jul 2015 07:53:51 AM JST
LayoutParams(ROW1, COL0, top=-40, bottom=50)
* Thu 30 Jul 2015 07:54:01 AM JST
WindowTitleSpec('衛星画像 - ウェザーニュース - Google Chrome')
* Thu 30 Jul 2015 07:54:14 AM JST
LayoutParams(ROW1, COL1, top=-40, bottom=50)
* Thu 30 Jul 2015 07:54:23 AM JST
WindowTitleSpec('気象庁 | 異常天候早期警戒情報 - Google Chrome')
* Thu 30 Jul 2015 07:54:31 AM JST
LayoutParams(ROW1, COL2, top=-40, bottom=50)
* Thu 30 Jul 2015 07:55:38 AM JST
                
* Thu 30 Jul 2015 07:55:47 AM JST
                           
* Thu 30 Jul 2015 07:55:53 AM JST
                             
* Thu 30 Jul 2015 07:55:59 AM JST
        
* Thu 30 Jul 2015 07:56:06 AM JST
                             
* Thu 30 Jul 2015 07:56:10 AM JST
    
* Thu 30 Jul 2015 07:56:13 AM JST
        
* Thu 30 Jul 2015 01:32:53 PM JST
    specs = {WindowTitleSpec(
        'ピンポイント天気（大津） - ウェザーニュース - Google Chrome'):
        LayoutParams(ROW0, COL0),
        WindowTitleSpec('気象庁 | 天気予報 - Google Chrome'):
        LayoutParams(ROW0, COL1),
        WindowTitleSpec('雨雲レーダー - ウェザーニュース - Google Chrome'):
        LayoutParams(ROW0, COL2),
        WindowTitleSpec('気象庁 | 天気図 - Google Chrome'):
        LayoutParams(ROW1, COL0, top=-40, bottom=50),
        WindowTitleSpec('衛星画像 - ウェザーニュース - Google Chrome'):
        LayoutParams(ROW1, COL1, top=-40, bottom=50),
        WindowTitleSpec('気象庁 | 異常天候早期警戒情報 - Google Chrome'):
        LayoutParams(ROW1, COL2, top=-40, bottom=50),
        }

    screen = Rectangle(x=1280, y=0, width=1680, height=1028)

    def __init__(self, display):
        r"""
        """
        xinrm = display(xinerama.key)
        layout = GridLayout()

* Thu 30 Jul 2015 01:36:13 PM JST
        urls = list(chrome.ChromeBMParse('【天気】'))
        for url in urls:
            chrome.run(url, options=CHROME_OPTIONS)

* Thu 30 Jul 2015 01:37:12 PM JST

* Thu 30 Jul 2015 01:37:12 PM JST

* Thu 30 Jul 2015 01:37:12 PM JST
        WindowListenerFactory(Display()).add_observer(self)

* Thu 30 Jul 2015 01:40:38 PM JST
.close()
* Thu 30 Jul 2015 01:40:41 PM JST
self.windows
* Thu 30 Jul 2015 01:41:44 PM JST
WindowListenerFactory(Display()).add_observer(self)
* Thu 30 Jul 2015 01:43:40 PM JST
continue
* Thu 30 Jul 2015 01:43:41 PM JST
not
* Thu 30 Jul 2015 01:44:59 PM JST
specs
* Thu 30 Jul 2015 01:44:59 PM JST
self.specs
* Thu 30 Jul 2015 01:45:01 PM JST
keys
* Thu 30 Jul 2015 02:03:04 PM JST
Observable
* Thu 30 Jul 2015 02:03:55 PM JST
        for observer in self._observers:
            observer.started_weather(self)

* Thu 30 Jul 2015 02:04:02 PM JST
started
* Thu 30 Jul 2015 02:08:06 PM JST
class
* Thu 30 Jul 2015 02:17:41 PM JST

* Thu 30 Jul 2015 02:18:19 PM JST

* Thu 30 Jul 2015 02:21:50 PM JST
Popen
* Thu 30 Jul 2015 02:22:16 PM JST
/usr/bin/thunar
* Thu 30 Jul 2015 02:24:15 PM JST
/usr/bin/xdg-open
* Thu 30 Jul 2015 02:24:25 PM JST
LounchThunar
* Thu 30 Jul 2015 02:28:24 PM JST
/usr/bin/xdg-open
* Thu 30 Jul 2015 02:30:27 PM JST
'/usr/bin/xdg-open ~/'
* Thu 30 Jul 2015 02:31:31 PM JST
open', '.'])
* Thu 30 Jul 2015 02:31:31 PM JST
xdg-open', '.'])
* Thu 30 Jul 2015 02:31:32 PM JST
bin
* Thu 30 Jul 2015 02:31:33 PM JST
usr
* Thu 30 Jul 2015 02:36:05 PM JST
os.environ['HOME']
* Thu 30 Jul 2015 02:39:49 PM JST
/usr/bin/xfrun4
* Thu 30 Jul 2015 02:40:29 PM JST
Xfrun4
* Thu 30 Jul 2015 02:40:42 PM JST

* Thu 30 Jul 2015 02:41:12 PM JST

* Thu 30 Jul 2015 02:41:20 PM JST
R_CTRL_KEY_ACCE
* Thu 30 Jul 2015 02:41:24 PM JST

* Thu 30 Jul 2015 02:41:24 PM JST

* Thu 30 Jul 2015 02:41:24 PM JST
R_CTRL_KEY_ACCE = Accelerator(27, ModifierMask.Control)

* Thu 30 Jul 2015 02:41:28 PM JST
Control
* Thu 30 Jul 2015 02:59:19 PM JST
add
* Thu 30 Jul 2015 02:59:41 PM JST

* Thu 30 Jul 2015 02:59:41 PM JST

* Thu 30 Jul 2015 02:59:41 PM JST
        Observable.__init__(self)

* Thu 30 Jul 2015 02:59:45 PM JST
Observable
* Thu 30 Jul 2015 03:00:06 PM JST
EventLoop(self.display)
* Thu 30 Jul 2015 03:00:49 PM JST
wmap = 
* Thu 30 Jul 2015 03:02:22 PM JST
height=
* Thu 30 Jul 2015 03:06:59 PM JST
on_window_title_changed
* Thu 30 Jul 2015 03:07:16 PM JST
WindowListenerObserver
* Thu 30 Jul 2015 03:07:32 PM JST

* Thu 30 Jul 2015 03:07:38 PM JST
WindowListenerObserver
* Thu 30 Jul 2015 03:08:16 PM JST
if 
* Thu 30 Jul 2015 03:08:21 PM JST
        for spec, param in self.specs.items():
            if spec.is_satisfied(window):
                self.layout.set_layout_item(window, param)
                break
        if len(self.specs) == len(self.windows):
            self.layout.layout(self.screen)

* Thu 30 Jul 2015 03:09:42 PM JST
        for window in WindowListenerFactory(self.display).list_windows():
            window.add_observer(self)

* Thu 30 Jul 2015 03:10:07 PM JST
        for window in WindowListenerFactory(self.display).list_windows():
            window.add_observer(self)

* Thu 30 Jul 2015 03:10:17 PM JST
add
* Thu 30 Jul 2015 03:10:20 PM JST
self.is_starting = True
* Thu 30 Jul 2015 03:12:31 PM JST
self.
* Thu 30 Jul 2015 03:13:28 PM JST

* Thu 30 Jul 2015 03:13:28 PM JST

* Thu 30 Jul 2015 03:13:28 PM JST
        print(self._listeners)

* Thu 30 Jul 2015 03:17:01 PM JST
from xahk.wm import WindowManager
import xcb,xcb.xproto as xproto;c=xcb.connect()
WindowManager(c).list_windows()

* Thu 30 Jul 2015 03:17:20 PM JST
'ピンポイント天気（大津） - ウェザーニュース - Google Chrome')
* Thu 30 Jul 2015 03:17:22 PM JST
'ピンポイント天気（大津） - ウェザーニュース - Google Chrome'
* Thu 30 Jul 2015 03:17:29 PM JST
WindowManager(c).list_windows()
* Thu 30 Jul 2015 03:17:32 PM JST
WindowTitleSpec('ピンポイント天気（大津） - ウェザーニュース - Google Chrome')
* Thu 30 Jul 2015 03:19:19 PM JST
print
* Thu 30 Jul 2015 03:19:28 PM JST
print(window.title)
* Thu 30 Jul 2015 03:19:30 PM JST
title
* Thu 30 Jul 2015 03:20:08 PM JST
True
* Thu 30 Jul 2015 03:21:40 PM JST
self.layout
* Thu 30 Jul 2015 03:24:07 PM JST
print(self.layout._table)
* Thu 30 Jul 2015 03:24:26 PM JST
print(
* Thu 30 Jul 2015 05:03:36 PM JST
print(window)
* Thu 30 Jul 2015 05:07:15 PM JST
self._atom_cache.get_atom('_NET_WM_NAME')
* Thu 30 Jul 2015 05:07:57 PM JST
        elif event.atom == self._atom_cache.get_atom('_NET_WM_NAME'):
            return

* Thu 30 Jul 2015 05:08:02 PM JST
elif event.atom in (self._atom_cache.get_atom('WM_NAME'),
* Thu 30 Jul 2015 05:10:59 PM JST
www.jma.go.jp/jp/g3/ - Google Chrome
* Thu 30 Jul 2015 05:11:25 PM JST
weathernews.jp/satellite/
* Thu 30 Jul 2015 05:11:49 PM JST
www.jma.go.jp/jp/yoho/
* Thu 30 Jul 2015 05:12:38 PM JST
www.jma.go.jp/jp/soukei/ - Google Chrome
* Thu 30 Jul 2015 05:12:59 PM JST
weathernews.jp/radar/#//c=50 - Google Chrome
* Thu 30 Jul 2015 05:13:23 PM JST
weathernews.jp/pinpoint/cgi/search_result.fcgi?service=11&lat=35.0144938888889&lon=135.857546111111&ameno=60216&name=大津&pref=60 - Google Chrome
* Thu 30 Jul 2015 05:14:16 PM JST
    specs = {WindowTitleSpec(
        'weathernews.jp/pinpoint/cgi/search_result.fcgi?service=11&lat=35.0144938888889&lon=135.857546111111&ameno=60216&name=大津&pref=60 - Google Chrome'):
        LayoutParams(ROW0, COL0),
        WindowTitleSpec('www.jma.go.jp/jp/yoho/'):
        LayoutParams(ROW0, COL1),
        WindowTitleSpec('weathernews.jp/radar/#//c=50 - Google Chrome'):
        LayoutParams(ROW0, COL2),
        WindowTitleSpec('www.jma.go.jp/jp/g3/ - Google Chrome'):
        LayoutParams(ROW1, COL0, top=-40, bottom=50),
        WindowTitleSpec('weathernews.jp/satellite/'):
        LayoutParams(ROW1, COL1, top=-40, bottom=50),
        WindowTitleSpec('www.jma.go.jp/jp/soukei/ - Google Chrome'):
        LayoutParams(ROW1, COL2, top=-40, bottom=50),
        }

* Thu 30 Jul 2015 05:14:33 PM JST
specs = {WindowTitleSpec(
                         'weathernews.jp/pinpoint/cgi/search_result.fcgi?service=11&lat=35.0144938888889&lon=135.857546111111&ameno=60216&name=大津&pref=60 - Google Chrome'):
LayoutParams(ROW0, COL0),
WindowTitleSpec('www.jma.go.jp/jp/yoho/'):
LayoutParams(ROW0, COL1),
WindowTitleSpec('weathernews.jp/radar/#//c=50 - Google Chrome'):
LayoutParams(ROW0, COL2),
WindowTitleSpec('www.jma.go.jp/jp/g3/ - Google Chrome'):
LayoutParams(ROW1, COL0, top=-40, bottom=50),
WindowTitleSpec('weathernews.jp/satellite/'):
LayoutParams(ROW1, COL1, top=-40, bottom=50),
WindowTitleSpec('www.jma.go.jp/jp/soukei/ - Google Chrome'):
LayoutParams(ROW1, COL2, top=-40, bottom=50),
}

* Thu 30 Jul 2015 05:16:13 PM JST
        print(window)
        print(window.title)
        if window in self.windows:
            return
        for spec, param in self.specs.items():
            if spec.is_satisfied(window):
                print('DEBUG-1-weather2.py')
                print(window)
                self.layout.set_layout_item(window, param)
                self.windows.append(window)
                break
        print(self.windows)
        if len(self.specs) == len(self.windows):
            sleep(10)
            print(self.layout._table)
            print(len(self.layout._table))
            self.layout.layout(self.screen)

* Thu 30 Jul 2015 05:21:56 PM JST
        for window in self.windows:
            window.close()

* Thu 30 Jul 2015 05:47:48 PM JST
DOWN_ACCE = Accelerator(116)
* Thu 30 Jul 2015 05:57:27 PM JST
command
* Thu 30 Jul 2015 05:57:48 PM JST
self._command = command
* Thu 30 Jul 2015 05:59:49 PM JST
WindowTitleSpec(
        'ピンポイント天気（大津） - ウェザーニュース - Google Chrome')
* Thu 30 Jul 2015 06:00:04 PM JST
LayoutParams(ROW0, COL0)
* Thu 30 Jul 2015 06:00:42 PM JST
                
* Thu 30 Jul 2015 06:00:57 PM JST
WindowTitleSpec('気象庁 | 天気予報 - Google Chrome')
* Thu 30 Jul 2015 06:01:03 PM JST
LayoutParams(ROW0, COL1)
* Thu 30 Jul 2015 06:01:08 PM JST
                         
* Thu 30 Jul 2015 06:01:20 PM JST
        
* Thu 30 Jul 2015 06:01:38 PM JST
            
* Thu 30 Jul 2015 06:01:40 PM JST
    
* Thu 30 Jul 2015 06:01:42 PM JST
            
* Thu 30 Jul 2015 06:02:09 PM JST
                        
* Thu 30 Jul 2015 06:02:18 PM JST
WindowTitleSpec('雨雲レーダー - ウェザーニュース - Google Chrome')
* Thu 30 Jul 2015 06:02:23 PM JST
                        
* Thu 30 Jul 2015 06:03:05 PM JST
WindowTitleSpec('気象庁 | 天気図 - Google Chrome')
* Thu 30 Jul 2015 06:03:17 PM JST
LayoutParams(ROW1, COL0, top=-40, bottom=50)
* Thu 30 Jul 2015 06:03:34 PM JST
                            
* Thu 30 Jul 2015 06:03:46 PM JST
WindowT
* Thu 30 Jul 2015 06:03:50 PM JST
WindowTitleSpec('衛星画像 - ウェザーニュース - Google Chrome')
* Thu 30 Jul 2015 06:03:59 PM JST
LayoutParams(ROW1, COL1, top=-40, bottom=50)
* Thu 30 Jul 2015 06:05:07 PM JST
WindowTitleSpec('気象庁 | 異常天候早期警戒情報 - Google Chrome')
* Thu 30 Jul 2015 06:05:16 PM JST
LayoutParams(ROW1, COL2, top=-40, bottom=50)
* Thu 30 Jul 2015 06:05:47 PM JST
LayoutParams(ROW0, COL2)
* Thu 30 Jul 2015 06:05:50 PM JST
                        
* Thu 30 Jul 2015 06:05:53 PM JST
                            
* Thu 30 Jul 2015 06:06:11 PM JST
                
* Thu 30 Jul 2015 06:08:28 PM JST

* Thu 30 Jul 2015 06:08:28 PM JST

* Thu 30 Jul 2015 06:08:28 PM JST
            sleep(10)

* Thu 30 Jul 2015 06:11:10 PM JST
from xahk.piece import X11K
* Thu 30 Jul 2015 06:11:11 PM JST
from xahk.piece import X11Key
* Thu 30 Jul 2015 06:15:39 PM JST
               
* Thu 30 Jul 2015 06:15:41 PM JST
               
* Thu 30 Jul 2015 06:15:42 PM JST
                
* Thu 30 Jul 2015 06:15:45 PM JST
    
* Thu 30 Jul 2015 06:15:51 PM JST
               
* Thu 30 Jul 2015 06:16:30 PM JST
info
* Thu 30 Jul 2015 06:28:25 PM JST

* Thu 30 Jul 2015 06:28:25 PM JST

* Thu 30 Jul 2015 06:28:25 PM JST
                    sleep(0.5)

* Thu 30 Jul 2015 06:28:27 PM JST
                    window.set_always_on_top(0)

* Thu 30 Jul 2015 10:49:01 PM JST
from xahk.piece import X11Key
* Thu 30 Jul 2015 10:50:41 PM JST
from xahk.wm import WindowManager
import xcb,xcb.xproto as xproto;c=xcb.connect()
WindowManager(c).list_windows()

* Thu 30 Jul 2015 10:50:46 PM JST
WindowManager(c).list_windows()
* Thu 30 Jul 2015 10:51:01 PM JST
title
* Thu 30 Jul 2015 10:51:13 PM JST
from xahk.piece import X11Key
k=X11Key(116)

* Thu 30 Jul 2015 11:10:21 PM JST
from xahk.wm import WindowManager
import xcb,xcb.xproto as xproto;c=xcb.connect()
WindowManager(c).list_windows()

* Thu 30 Jul 2015 11:11:20 PM JST
from xahk.wm import WindowManager
import xcb,xcb.xproto as xproto;c=xcb.connect()
WindowManager(c).list_windows()

* Thu 30 Jul 2015 11:11:25 PM JST
WindowManager(c).list_windows()
* Thu 30 Jul 2015 11:11:39 PM JST
print 
* Thu 30 Jul 2015 11:11:40 PM JST
title
* Thu 30 Jul 2015 11:16:01 PM JST
from xahk.wm import WindowManager
import xcb,xcb.xproto as xproto;c=xcb.connect()
WindowManager(c).list_windows()

* Thu 30 Jul 2015 11:16:05 PM JST
WindowManager(c).list_windows()
* Thu 30 Jul 2015 11:16:16 PM JST
tilte
* Thu 30 Jul 2015 11:16:29 PM JST
title
* Thu 30 Jul 2015 11:16:31 PM JST
print 
* Thu 30 Jul 2015 11:28:53 PM JST
window.set_always_on_top()
* Thu 30 Jul 2015 11:33:30 PM JST

* Thu 30 Jul 2015 11:33:30 PM JST

* Thu 30 Jul 2015 11:33:30 PM JST
                    window.set_always_on_top()

* Thu 30 Jul 2015 11:35:12 PM JST

* Thu 30 Jul 2015 11:35:12 PM JST

* Thu 30 Jul 2015 11:35:12 PM JST
                    self.display.flush()

* Thu 30 Jul 2015 11:35:52 PM JST

* Thu 30 Jul 2015 11:35:52 PM JST

* Thu 30 Jul 2015 11:35:52 PM JST
                    # self.display.flush()

* Thu 30 Jul 2015 11:37:23 PM JST

* Thu 30 Jul 2015 11:37:23 PM JST

* Thu 30 Jul 2015 11:37:23 PM JST
            xkey = X11Key(DOWN_ACCE.get_code())

* Thu 30 Jul 2015 11:39:03 PM JST
from xahk.wm import WindowManager
import xcb,xcb.xproto as xproto;c=xcb.connect()
WindowManager(c).list_windows()

* Thu 30 Jul 2015 11:39:11 PM JST
WindowManager(c).list_windows()
* Thu 30 Jul 2015 11:39:35 PM JST
from xahk.piece import X11Key
k=X11Key(116)

* Thu 30 Jul 2015 11:39:49 PM JST
WindowManager(c).list_windows()[-1].title
* Thu 30 Jul 2015 11:39:52 PM JST
title
* Thu 30 Jul 2015 11:40:02 PM JST
WindowManager(c).list_windows()[-1].id
* Thu 30 Jul 2015 11:41:21 PM JST
WindowManager(c).list_windows()
* Thu 30 Jul 2015 11:41:54 PM JST
press
* Thu 30 Jul 2015 11:43:05 PM JST
                    
* Thu 30 Jul 2015 11:43:20 PM JST

* Thu 30 Jul 2015 11:43:20 PM JST

* Thu 30 Jul 2015 11:43:20 PM JST
                    windows[0].set_always_on_top(0)

* Thu 30 Jul 2015 11:44:03 PM JST

* Thu 30 Jul 2015 11:44:03 PM JST

* Thu 30 Jul 2015 11:44:03 PM JST
            sleep(10)

* Thu 30 Jul 2015 11:45:27 PM JST

* Thu 30 Jul 2015 11:45:27 PM JST

* Thu 30 Jul 2015 11:45:27 PM JST
                sleep(3)

* Thu 30 Jul 2015 11:45:30 PM JST

* Thu 30 Jul 2015 11:45:30 PM JST

* Thu 30 Jul 2015 11:45:30 PM JST
                    sleep(1)

* Thu 30 Jul 2015 11:45:57 PM JST

* Thu 30 Jul 2015 11:45:58 PM JST

* Thu 30 Jul 2015 11:45:58 PM JST
                print('DEBUG-1-weather2.py')

* Thu 30 Jul 2015 11:54:01 PM JST
number
* Thu 30 Jul 2015 11:54:19 PM JST
height
* Thu 30 Jul 2015 11:54:48 PM JST
width
* Thu 30 Jul 2015 11:56:03 PM JST
reply
* Thu 30 Jul 2015 11:58:08 PM JST
specs
* Thu 30 Jul 2015 11:59:27 PM JST

* Thu 30 Jul 2015 11:59:27 PM JST

* Thu 30 Jul 2015 11:59:27 PM JST
                    sleep(0.3)

* Fri 31 Jul 2015 12:01:14 AM JST
                for _ in xrange(info.key_count):
                    xkey.press(windows[0].id)
                    xkey.release(windows[0].id)
                    xkey.display.flush()

* Fri 31 Jul 2015 12:01:21 AM JST

* Fri 31 Jul 2015 12:01:21 AM JST

* Fri 31 Jul 2015 12:01:21 AM JST
                xkey = X11Key(DOWN_ACCE.get_code())

* Fri 31 Jul 2015 12:02:15 AM JST
windows = [w for w in self.windows if info.spec.is_satisfied(w)]
* Fri 31 Jul 2015 12:02:22 AM JST
                if not windows:
                    continue

* Fri 31 Jul 2015 12:06:46 AM JST
from xahk.piece import X11Key
* Fri 31 Jul 2015 12:07:09 AM JST
press
* Fri 31 Jul 2015 12:07:11 AM JST

* Fri 31 Jul 2015 12:07:11 AM JST

* Fri 31 Jul 2015 12:07:11 AM JST
                    xkey.release(windows[0].id)

* Fri 31 Jul 2015 12:08:16 AM JST

* Fri 31 Jul 2015 12:08:16 AM JST

* Fri 31 Jul 2015 12:08:16 AM JST
            xkey = X11Key(DOWN_ACCE.get_code())

* Fri 31 Jul 2015 12:10:39 AM JST

* Fri 31 Jul 2015 12:10:39 AM JST

* Fri 31 Jul 2015 12:10:39 AM JST
            sleep(5)

* Fri 31 Jul 2015 12:12:58 AM JST
print(windows[0].title)
* Fri 31 Jul 2015 12:13:02 AM JST
title
* Fri 31 Jul 2015 12:13:09 AM JST

* Fri 31 Jul 2015 12:13:10 AM JST

* Fri 31 Jul 2015 12:13:10 AM JST
                sleep(5)

* Fri 31 Jul 2015 12:15:41 AM JST
print(
* Fri 31 Jul 2015 12:16:34 AM JST

* Fri 31 Jul 2015 12:16:34 AM JST

* Fri 31 Jul 2015 12:16:34 AM JST
            sleep(1)

* Fri 31 Jul 2015 12:17:50 AM JST
sleep(0.3)
* Fri 31 Jul 2015 12:18:32 AM JST
3
* Fri 31 Jul 2015 12:18:32 AM JST
0.3
* Fri 31 Jul 2015 12:20:39 AM JST
5
* Fri 31 Jul 2015 01:45:58 AM JST
datetime.now().month in (2, 3, 4)
* Fri 31 Jul 2015 01:46:09 AM JST
chrome.open_folder('Winter')
* Fri 31 Jul 2015 01:46:20 AM JST
datetime.now().month in (7, 8, 9, 10)
* Fri 31 Jul 2015 01:46:29 AM JST
chrome.open_folder('Summer')
* Fri 31 Jul 2015 01:46:51 AM JST
form 
* Fri 31 Jul 2015 01:49:59 AM JST
line)
* Fri 31 Jul 2015 01:49:59 AM JST
indent-line)
* Fri 31 Jul 2015 01:51:40 AM JST
(current-column)
* Fri 31 Jul 2015 01:53:36 AM JST
(message "%d" (current-column))
* Fri 31 Jul 2015 01:54:24 AM JST
`(message "%d" (current-column))`
* Fri 31 Jul 2015 01:55:12 AM JST
`(message "%d" (current-column))`
* Fri 31 Jul 2015 01:57:29 AM JST

* Fri 31 Jul 2015 01:57:29 AM JST

* Fri 31 Jul 2015 01:57:29 AM JST
    parser.add_argument('-v', '--verbose',

* Fri 31 Jul 2015 01:57:30 AM JST
    parser.add_argument('-v', '--verbose',

* Fri 31 Jul 2015 01:57:30 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',

* Fri 31 Jul 2015 01:57:30 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',

* Fri 31 Jul 2015 01:57:30 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',

* Fri 31 Jul 2015 01:57:30 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',

* Fri 31 Jul 2015 01:57:30 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',

* Fri 31 Jul 2015 01:57:30 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',
                        const=None,

* Fri 31 Jul 2015 01:57:30 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',
                        const=None,

* Fri 31 Jul 2015 01:57:30 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',
                        const=None,
                        default=None,

* Fri 31 Jul 2015 01:57:31 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',
                        const=None,
                        default=None,

* Fri 31 Jul 2015 01:57:31 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',
                        const=None,
                        default=None,
                        type=None,

* Fri 31 Jul 2015 01:57:31 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',
                        const=None,
                        default=None,
                        type=None,

* Fri 31 Jul 2015 01:57:31 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',
                        const=None,
                        default=None,
                        type=None,
                        choises=None,

* Fri 31 Jul 2015 01:57:31 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',
                        const=None,
                        default=None,
                        type=None,
                        choises=None,

* Fri 31 Jul 2015 01:57:31 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',
                        const=None,
                        default=None,
                        type=None,
                        choises=None,
                        required=False,

* Fri 31 Jul 2015 01:57:31 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',
                        const=None,
                        default=None,
                        type=None,
                        choises=None,
                        required=False,

* Fri 31 Jul 2015 01:57:31 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',
                        const=None,
                        default=None,
                        type=None,
                        choises=None,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)

* Fri 31 Jul 2015 01:57:32 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',
                        const=None,
                        default=None,
                        type=None,
                        choises=None,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)

* Fri 31 Jul 2015 01:57:32 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',
                        const=None,
                        default=None,
                        type=None,
                        choises=None,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)
                        help='A lot of messages.',

* Fri 31 Jul 2015 01:57:32 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',
                        const=None,
                        default=None,
                        type=None,
                        choises=None,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)
                        help='A lot of messages.',

* Fri 31 Jul 2015 01:57:32 AM JST
    parser.add_argument('-v', '--verbose',
                        dest='verbose',
                        action='append',
                        const=None,
                        default=None,
                        type=None,
                        choises=None,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)
                        help='A lot of messages.',
                        metavar=None)

* Fri 31 Jul 2015 01:57:34 AM JST

* Fri 31 Jul 2015 01:57:34 AM JST

* Fri 31 Jul 2015 01:57:35 AM JST

* Fri 31 Jul 2015 01:57:35 AM JST

* Fri 31 Jul 2015 01:57:44 AM JST

* Fri 31 Jul 2015 01:57:44 AM JST

* Fri 31 Jul 2015 01:57:47 AM JST

* Fri 31 Jul 2015 01:57:47 AM JST

* Fri 31 Jul 2015 01:58:04 AM JST
                        nargs=,

* Fri 31 Jul 2015 01:58:52 AM JST

* Fri 31 Jul 2015 01:58:52 AM JST

* Fri 31 Jul 2015 01:58:52 AM JST
                        nargs=,

* Fri 31 Jul 2015 02:00:23 AM JST
argparse_add_argument
* Fri 31 Jul 2015 02:00:58 AM JST
# expand-env: ((yas/indent-line 'fixed) (yas/wrap-around-region 'nil))
* Fri 31 Jul 2015 02:03:52 AM JST
(yas/expand-link "argparse_add_argument" t)
* Fri 31 Jul 2015 02:04:43 AM JST
(point-at-bol)
* Fri 31 Jul 2015 02:05:30 AM JST
(skip-chars-forward " ")
* Fri 31 Jul 2015 02:08:03 AM JST
            dest='winter',
* Fri 31 Jul 2015 02:08:06 AM JST
            dest='winter',
* Fri 31 Jul 2015 02:08:08 AM JST
            dest='winter',
* Fri 31 Jul 2015 02:08:49 AM JST
    parser.add_argument('--winter',
                        dest='winter',
                        action='store_true',
                        default=False,
                        required=False,
                        # (yas/expand-link "argparse_other_options" t)
                        help='Open Winter weather')

* Fri 31 Jul 2015 02:08:56 AM JST
parser
* Fri 31 Jul 2015 02:08:59 AM JST
parser
* Fri 31 Jul 2015 02:09:03 AM JST

* Fri 31 Jul 2015 02:09:03 AM JST

* Fri 31 Jul 2015 02:09:04 AM JST
    parser.print_usage()

* Fri 31 Jul 2015 02:49:53 AM JST

* Fri 31 Jul 2015 02:49:53 AM JST

* Fri 31 Jul 2015 02:49:53 AM JST
                print(windows[0].title)

* Fri 31 Jul 2015 02:49:54 AM JST

* Fri 31 Jul 2015 02:49:54 AM JST

* Fri 31 Jul 2015 02:49:54 AM JST
                    print('DEBUG-2-weather2.py')

* Fri 31 Jul 2015 02:49:55 AM JST

* Fri 31 Jul 2015 02:49:55 AM JST

* Fri 31 Jul 2015 02:49:55 AM JST
            print('DEBUG-3-weather2.py')

* Fri 31 Jul 2015 02:51:10 AM JST

* Fri 31 Jul 2015 02:51:10 AM JST

* Fri 31 Jul 2015 02:51:10 AM JST
                print(windows[0].title)

* Fri 31 Jul 2015 02:51:25 AM JST

* Fri 31 Jul 2015 02:51:25 AM JST

* Fri 31 Jul 2015 02:51:25 AM JST
from observer import Observable

* Fri 31 Jul 2015 03:25:08 AM JST
FX
* Fri 31 Jul 2015 03:32:43 AM JST
tomorrow 
* Fri 31 Jul 2015 03:33:44 AM JST

* Fri 31 Jul 2015 03:33:44 AM JST

* Fri 31 Jul 2015 03:33:44 AM JST
    - 

* Fri 31 Jul 2015 03:34:09 AM JST
Archive 
* Fri 31 Jul 2015 03:47:35 AM JST
ARGS
* Fri 31 Jul 2015 03:47:36 AM JST
ARGS
* Fri 31 Jul 2015 03:47:49 AM JST
30_hotstring_plugin_start.el
* Fri 31 Jul 2015 03:48:27 AM JST
30_hotstring_plugin_start.el
* Fri 31 Jul 2015 03:48:35 AM JST
  
* Fri 31 Jul 2015 03:48:50 AM JST
30_hotstring_plugin_start.el
* Fri 31 Jul 2015 03:49:28 AM JST
find-file-conf
* Fri 31 Jul 2015 03:49:52 AM JST
switch-snippets
* Fri 31 Jul 2015 03:51:34 AM JST
  
* Fri 31 Jul 2015 03:52:03 AM JST
  
* Fri 31 Jul 2015 03:52:17 AM JST
switch-hotstring
* Fri 31 Jul 2015 04:06:16 AM JST
19'
* Fri 31 Jul 2015 04:14:14 AM JST
SENTON
* Fri 31 Jul 2015 04:15:15 AM JST
'(RFC822.HEADER)'
* Fri 31 Jul 2015 04:18:11 AM JST
print 
* Fri 31 Jul 2015 04:18:38 AM JST
print 
* Fri 31 Jul 2015 04:24:35 AM JST
print 
* Fri 31 Jul 2015 04:28:44 AM JST
quopri.decodestring(m.get_payload())
* Fri 31 Jul 2015 04:28:54 AM JST
m.get_content_charset()
* Fri 31 Jul 2015 04:37:03 AM JST
typ, data=g.fetch(b'315', 'RFC822')
* Fri 31 Jul 2015 04:37:49 AM JST
quopri.decodestring(m.get_payload()).decode(m.get_content_charset())
* Fri 31 Jul 2015 04:52:27 AM JST
8')
* Fri 31 Jul 2015 04:52:27 AM JST
utf-8')
* Fri 31 Jul 2015 04:52:28 AM JST
decode('utf-8')
* Fri 31 Jul 2015 04:52:31 AM JST
print 
* Fri 31 Jul 2015 05:06:35 AM JST
UmU6RmF4IOWxiuOBhOOBnw
* Fri 31 Jul 2015 05:18:36 AM JST
m.get_content_charset()
* Fri 31 Jul 2015 05:21:33 AM JST
http://google.com/search?num=50&hl=en&newwindow=1&safe=off&site=&source=hp&q=%s
* Fri 31 Jul 2015 05:22:18 AM JST
http://google.com/search?num=50&hl=en&safe=off&site=&source=hp&q=%s
* Fri 31 Jul 2015 05:38:33 AM JST
m.get_payload()
* Fri 31 Jul 2015 05:40:50 AM JST
m.get_payload()
* Fri 31 Jul 2015 05:41:11 AM JST
g=imaplib.IMAP4_SSL('imap.gmail.com')
* Fri 31 Jul 2015 05:41:13 AM JST
import imaplib
g=imaplib.IMAP4_SSL('imap.gmail.com')

* Fri 31 Jul 2015 05:41:21 AM JST
g.login('taka16a23@gmail.com', 'Taka83 a76.')
* Fri 31 Jul 2015 05:41:30 AM JST
g.select('inbox')
* Fri 31 Jul 2015 05:42:08 AM JST
g.search(None, 'SENTON', "25-May-2015")
* Fri 31 Jul 2015 05:42:22 AM JST
typ, data=g.fetch(b'315', 'RFC822.TEXT')
* Fri 31 Jul 2015 05:42:33 AM JST
import quopri
* Fri 31 Jul 2015 05:42:39 AM JST
import email
* Fri 31 Jul 2015 05:42:50 AM JST
m=email.message_from_string(maildata)
* Fri 31 Jul 2015 05:43:04 AM JST
maildata=data[0][1]
* Fri 31 Jul 2015 05:43:21 AM JST
quopri.decodestring(m.get_payload()).decode('utf-8')
* Fri 31 Jul 2015 05:43:34 AM JST
import imaplib
g=imaplib.IMAP4_SSL('imap.gmail.com')
g.login('taka16a23@gmail.com', 'Taka83 a76.')
g.select('inbox')
g.search(None, 'SENTON', "25-May-2015")

* Fri 31 Jul 2015 05:43:55 AM JST
g.search(None, 'SENTON', "25-May-2015")
* Fri 31 Jul 2015 05:44:02 AM JST
import quopri
import email
maildata=data[0][1]

* Fri 31 Jul 2015 05:44:11 AM JST
typ, data=g.fetch(b'315', 'RFC822.TEXT')

* Fri 31 Jul 2015 05:44:22 AM JST
import quopri
* Fri 31 Jul 2015 05:44:26 AM JST
import email
* Fri 31 Jul 2015 05:44:29 AM JST
maildata=data[0][1]
* Fri 31 Jul 2015 05:44:34 AM JST
m=email.message_from_string(maildata)
* Fri 31 Jul 2015 05:44:39 AM JST
quopri.decodestring(m.get_payload()).decode('utf-8')
* Fri 31 Jul 2015 05:45:17 AM JST
import imaplib
g=imaplib.IMAP4('imap.gmail.com')
g.login('taka16a23@gmail.com', 'Taka83 a76.')
g.select('inbox')
g.search(None, 'SENTON', "25-May-2015")
typ, data=g.fetch('315', 'RFC822.TEXT')
import quopri
import email

* Fri 31 Jul 2015 05:45:42 AM JST
import imaplib
g=imaplib.IMAP4('imap.gmail.com')

* Fri 31 Jul 2015 05:45:53 AM JST
g.login('taka16a23@gmail.com', 'Taka83 a76.')
g.select('inbox')
g.search(None, 'SENTON', "25-May-2015")
typ, data=g.fetch('315', 'RFC822.TEXT')

* Fri 31 Jul 2015 05:46:07 AM JST
import quopri
import email
maildata=data[0][1]
m=email.message_from_string(maildata)
quopri.decodestring(m.get_payload()).decode('utf-8')

* Fri 31 Jul 2015 05:46:41 AM JST
import quopri
import email

* Fri 31 Jul 2015 05:46:46 AM JST
import imaplib
import quopri
import email
g=imaplib.IMAP4('imap.gmail.com')
g.login('taka16a23@gmail.com', 'Taka83 a76.')
g.select('inbox')
g.search(None, 'SENTON', "25-May-2015")

* Fri 31 Jul 2015 05:46:58 AM JST
import imaplib
import quopri
import email
g=imaplib.IMAP4('imap.gmail.com')

* Fri 31 Jul 2015 05:47:02 AM JST
g.login('taka16a23@gmail.com', 'Taka83 a76.')

* Fri 31 Jul 2015 05:47:15 AM JST
g=imaplib.IMAP4_SSL('imap.gmail.com')
g.login('taka16a23@gmail.com', 'Taka83 a76.')

* Fri 31 Jul 2015 05:47:20 AM JST
g.select('inbox')
g.search(None, 'SENTON', "25-May-2015")

* Fri 31 Jul 2015 05:47:24 AM JST
typ, data=g.fetch('315', '(BODY[TEXT])')

* Fri 31 Jul 2015 05:47:29 AM JST
maildata=data[0][1]
m=email.message_from_string(maildata)
quopri.decodestring(m.get_payload()).decode('utf-8')

* Fri 31 Jul 2015 05:55:22 AM JST
'MumDqOOCs+ODlOODvOOBl+OBqOOBhOOBpu+8gQ0K\r\n'
* Fri 31 Jul 2015 06:19:57 PM JST
g.search(None, 'SENTON', "25-May-2015")
* Fri 31 Jul 2015 06:20:00 PM JST
2015"
* Fri 31 Jul 2015 06:20:00 PM JST
May-2015"
* Fri 31 Jul 2015 06:20:01 PM JST
25-May-2015"
* Fri 31 Jul 2015 06:20:01 PM JST
SENTON', "25-May-2015"
* Fri 31 Jul 2015 06:20:17 PM JST
abort: command: SEARCH => socket error: EOF
* Fri 31 Jul 2015 06:20:39 PM JST
g.login('taka16a23@gmail.com', 'Taka83 a76.')
* Fri 31 Jul 2015 06:20:59 PM JST
error: command LOGIN illegal in state SELECTED, only allowed in states NONAUTH
* Fri 31 Jul 2015 06:21:09 PM JST
g=imaplib.IMAP4_SSL('imap.gmail.com')
* Fri 31 Jul 2015 06:21:25 PM JST
g.login('taka16a23@gmail.com', 'Taka83 a76.')
* Fri 31 Jul 2015 06:22:00 PM JST
g.select('inbox')
* Fri 31 Jul 2015 06:22:17 PM JST
g.search(None, 'All')
* Fri 31 Jul 2015 10:26:58 PM JST
xwwrheownfdkbmao
* Fri 31 Jul 2015 10:27:15 PM JST
import imaplib
import quopri
import email

* Fri 31 Jul 2015 10:27:18 PM JST
g=imaplib.IMAP4_SSL('imap.gmail.com')
* Fri 31 Jul 2015 10:27:22 PM JST
g.login('taka16a23@gmail.com', 'Taka83 a76.')
* Fri 31 Jul 2015 10:27:26 PM JST
xwwrheownfdkbmao
* Fri 31 Jul 2015 10:27:39 PM JST
g.select('inbox')
* Fri 31 Jul 2015 10:28:00 PM JST
import base64
* Fri 31 Jul 2015 10:28:05 PM JST
base64.b64decode
* Fri 31 Jul 2015 10:28:17 PM JST
g.search(None, 'All')
* Fri 31 Jul 2015 10:28:28 PM JST
import imaplib
import quopri
import email
g=imaplib.IMAP4_SSL('imap.gmail.com')

* Fri 31 Jul 2015 10:28:33 PM JST
g.login('taka16daily@gmail.com', 'xwwrheownfdkbmao')

* Fri 31 Jul 2015 10:28:37 PM JST
g.select('inbox')

* Fri 31 Jul 2015 10:28:42 PM JST
g.search(None, 'All')

* Fri 31 Jul 2015 10:30:25 PM JST
'RFC822'
* Fri 31 Jul 2015 10:45:39 PM JST
Client
* Fri 31 Jul 2015 10:45:44 PM JST

* Fri 31 Jul 2015 10:45:44 PM JST

* Fri 31 Jul 2015 10:45:44 PM JST
        * Daily

* Fri 31 Jul 2015 10:58:50 PM JST
subject
* Fri 31 Jul 2015 10:59:09 PM JST
body
* Fri 31 Jul 2015 11:29:49 PM JST

* Fri 31 Jul 2015 11:29:50 PM JST

* Fri 31 Jul 2015 11:29:50 PM JST
           + delete notes

* Fri 31 Jul 2015 11:30:33 PM JST
DailyNote
* Fri 31 Jul 2015 11:36:02 PM JST
google
* Fri 31 Jul 2015 11:36:04 PM JST
world 
* Fri 31 Jul 2015 11:36:22 PM JST
match