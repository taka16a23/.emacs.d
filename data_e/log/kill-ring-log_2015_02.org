
* Sun 01 Feb 2015 04:07:28 AM JST
    @abstractmethod
    def get_uids(self):
        raise NotImplementedError()

    @abstractmethod
    def get_gids(self):
        raise NotImplementedError()

    @abstractmethod
    def get_terminal(self):
        raise NotImplementedError()

    @abstractmethod
    def num_fds(self):
        raise NotImplementedError()

* Sun 01 Feb 2015 04:08:14 AM JST
    @abstractmethod
    def get_num_handles(self):
        raise NotImplementedError()

    @abstractmethod
    def get_ionice(self):
        raise NotImplementedError()

    @abstractmethod
    def set_ionice(self):
        raise NotImplementedError()

    @abstractmethod
    def io_counters(self):
        raise NotImplementedError()

* Sun 01 Feb 2015 04:10:10 AM JST
    @abstractmethod
    def get_ionice(self):
        raise NotImplementedError()

    @abstractmethod
    def set_ionice(self):
        raise NotImplementedError()

    @abstractmethod
    def io_counters(self):
        raise NotImplementedError()

    @abstractmethod
    def rlimit(self):
        raise NotImplementedError()

    @abstractmethod
    def get_cpu_affinity(self):
        raise NotImplementedError()

    @abstractmethod
    def set_cpu_affinity(self):
        raise NotImplementedError()

* Sun 01 Feb 2015 04:10:30 AM JST
    @abstractmethod
    def io_counters(self):
        raise NotImplementedError()

* Sun 01 Feb 2015 04:15:44 AM JST
(defun remark ()
  "Revive marked region."
  (interactive)
  (let ((orig (point)))
    (push-mark (region-beginning) nil t)
    (goto-char orig)))

* Sun 01 Feb 2015 04:17:26 AM JST
[67108896]
* Sun 01 Feb 2015 04:19:02 AM JST
" "
* Sun 01 Feb 2015 04:33:20 AM JST
LinuxProcessAbstract
* Sun 01 Feb 2015 04:33:29 AM JST
Linux
* Sun 01 Feb 2015 04:33:31 AM JST
Linux
* Sun 01 Feb 2015 04:36:33 AM JST
    # windows
    if _os.name == 'nt':
        @abstractmethod
        def get_num_handles(self):
            raise NotImplementedError()

        @abstractmethod
        def get_ionice(self):
            raise NotImplementedError()

        @abstractmethod
        def set_ionice(self):
            raise NotImplementedError()

        @abstractmethod
        def io_counters(self):
            raise NotImplementedError()

    # posix
    if _os.name == 'posix':
        @abstractmethod
        def get_uids(self):
            raise NotImplementedError()

        @abstractmethod
        def get_gids(self):
            raise NotImplementedError()

        @abstractmethod
        def get_terminal(self):
            raise NotImplementedError()

        @abstractmethod
        def num_fds(self):
            raise NotImplementedError()

    # linux
    if _sys.platform.startswith(('linux')):
        @abstractmethod
        def get_ionice(self):
            raise NotImplementedError()

        @abstractmethod
        def set_ionice(self):
            raise NotImplementedError()

        @abstractmethod
        def io_counters(self):
            raise NotImplementedError()

        @abstractmethod
        def rlimit(self):
            raise NotImplementedError()

        @abstractmethod
        def get_cpu_affinity(self):
            raise NotImplementedError()

        @abstractmethod
        def set_cpu_affinity(self):
            raise NotImplementedError()

    # freebsd
    if _sys.platform.startswith(('freebsd')):
        @abstractmethod
        def io_counters(self):
            raise NotImplementedError()

* Sun 01 Feb 2015 04:37:44 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:37:50 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:37:55 AM JST
self.
* Sun 01 Feb 2015 04:38:38 AM JST
def
* Sun 01 Feb 2015 04:39:25 AM JST
def
* Sun 01 Feb 2015 04:39:41 AM JST
path
* Sun 01 Feb 2015 04:39:48 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:40:46 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:44:10 AM JST

* Sun 01 Feb 2015 04:44:10 AM JST

* Sun 01 Feb 2015 04:44:10 AM JST
        raise NotImplementedError()

* Sun 01 Feb 2015 04:45:48 AM JST

* Sun 01 Feb 2015 04:45:48 AM JST

* Sun 01 Feb 2015 04:45:48 AM JST
        raise NotImplementedError()

* Sun 01 Feb 2015 04:46:13 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:46:35 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:46:37 AM JST
return 
* Sun 01 Feb 2015 04:47:02 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:48:36 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:48:43 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:48:49 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:48:55 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:49:01 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:49:09 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:50:07 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:50:23 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:50:27 AM JST
sle.
* Sun 01 Feb 2015 04:50:55 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:50:57 AM JST
return
* Sun 01 Feb 2015 04:51:20 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:51:33 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:51:39 AM JST
get_
* Sun 01 Feb 2015 04:51:47 AM JST
get_
* Sun 01 Feb 2015 04:52:16 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:52:19 AM JST
return 
* Sun 01 Feb 2015 04:54:29 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:55:26 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:55:38 AM JST
send
* Sun 01 Feb 2015 04:56:35 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:56:39 AM JST
return 
* Sun 01 Feb 2015 04:57:28 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 04:58:01 AM JST

* Sun 01 Feb 2015 04:58:02 AM JST

* Sun 01 Feb 2015 04:58:02 AM JST
        ionice = property(get_ionice, set_ionice)

* Sun 01 Feb 2015 04:58:07 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 05:00:59 AM JST
    def set_nice(self, value):
        self._ps.nice(value)


* Sun 01 Feb 2015 05:03:59 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 05:04:33 AM JST
False
* Sun 01 Feb 2015 05:04:33 AM JST
perdisk=False
* Sun 01 Feb 2015 05:04:35 AM JST
perdisk
* Sun 01 Feb 2015 05:05:53 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 05:05:58 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 05:06:15 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 05:06:22 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 05:06:38 AM JST
proeprty
* Sun 01 Feb 2015 05:07:03 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 05:07:40 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 05:07:47 AM JST
return 
* Sun 01 Feb 2015 05:08:06 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 05:09:26 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 05:12:16 AM JST
        @abstractmethod
        def get_rlimit(self, resource):
            raise NotImplementedError()

* Sun 01 Feb 2015 05:12:45 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 05:12:48 AM JST
return 
* Sun 01 Feb 2015 05:14:54 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 05:15:39 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 05:16:31 AM JST
raise NotImplementedError()
* Sun 01 Feb 2015 05:21:14 AM JST
http://code.activestate.com/recipes/500261/
* Sun 01 Feb 2015 05:27:31 AM JST
23959
* Sun 01 Feb 2015 05:29:04 AM JST
# psutil.Process.io_counters()
pio = namedtuple('pio', ['read_count', 'write_count',
                         'read_bytes', 'write_bytes'])

* Sun 01 Feb 2015 05:29:11 AM JST
psutil
* Sun 01 Feb 2015 05:29:30 AM JST
         
* Sun 01 Feb 2015 05:30:26 AM JST
                       
* Sun 01 Feb 2015 05:31:20 AM JST
PSIO = namedtuple('PSIO', ['read_count', 'write_count',
                           'read_bytes', 'write_bytes'])

* Sun 01 Feb 2015 05:31:34 AM JST
e.io_counters()
* Sun 01 Feb 2015 05:31:50 AM JST
e.io_counters()
* Sun 01 Feb 2015 05:33:01 AM JST
_common
* Sun 01 Feb 2015 05:33:21 AM JST
__commo
* Sun 01 Feb 2015 05:34:01 AM JST

* Sun 01 Feb 2015 05:34:01 AM JST

* Sun 01 Feb 2015 05:34:01 AM JST
from process import _common

* Sun 01 Feb 2015 05:36:41 AM JST
return _common.PSIO(*self._ps.io_counters())
* Sun 01 Feb 2015 05:37:04 AM JST
return 
* Sun 01 Feb 2015 05:39:17 AM JST
# psutil.Process.memory_info()
pmem = namedtuple('pmem', ['rss', 'vms'])
# psutil.Process.cpu_times()
pcputimes = namedtuple('pcputimes', ['user', 'system'])
# psutil.Process.open_files()
popenfile = namedtuple('popenfile', ['path', 'fd'])
# psutil.Process.threads()
pthread = namedtuple('pthread', ['id', 'user_time', 'system_time'])
# psutil.Process.uids()
puids = namedtuple('puids', ['real', 'effective', 'saved'])
# psutil.Process.gids()
pgids = namedtuple('pgids', ['real', 'effective', 'saved'])
# psutil.Process.io_counters()
pio = namedtuple('pio', ['read_count', 'write_count',
                         'read_bytes', 'write_bytes'])
# psutil.Process.ionice()
pionice = namedtuple('pionice', ['ioclass', 'value'])
# psutil.Process.ctx_switches()
pctxsw = namedtuple('pctxsw', ['voluntary', 'involuntary'])

* Sun 01 Feb 2015 05:39:26 AM JST
# --- namedtuples for psutil.Process methods
* Sun 01 Feb 2015 05:39:30 AM JST
psutil
* Sun 01 Feb 2015 05:39:42 AM JST
PSMEM
* Sun 01 Feb 2015 05:40:10 AM JST
PSCpuTimes
* Sun 01 Feb 2015 05:40:28 AM JST
PSOpenFile
* Sun 01 Feb 2015 05:40:50 AM JST
PSThread
* Sun 01 Feb 2015 05:41:06 AM JST
PSUIDs
* Sun 01 Feb 2015 05:41:09 AM JST
puids
* Sun 01 Feb 2015 05:41:25 AM JST
PSGIDs
* Sun 01 Feb 2015 05:41:36 AM JST
PSIO
* Sun 01 Feb 2015 05:41:59 AM JST
PSIONice
* Sun 01 Feb 2015 05:42:15 AM JST
PSCTXSW
* Sun 01 Feb 2015 05:44:49 AM JST

* Sun 01 Feb 2015 05:46:57 AM JST
"C-e C-w"
* Sun 01 Feb 2015 05:47:18 AM JST
  
* Sun 01 Feb 2015 05:47:56 AM JST
ispell-complete-word
* Sun 01 Feb 2015 05:48:23 AM JST
"C-e C-w", "C-e w"
* Sun 01 Feb 2015 05:48:35 AM JST
;; 2015/02/01    Atami  
;;    Removed: remove keybind "C-e C-w", "C-e w" `ispell-complete-word'
;;    in `ctl-e-map'
;;

* Sun 01 Feb 2015 05:58:19 AM JST
children()
* Sun 01 Feb 2015 05:58:27 AM JST
cmdline()
* Sun 01 Feb 2015 06:00:00 AM JST
    namedtuple('pconn',
               ['fd', 'family', 'type', 'laddr', 'raddr', 'status'])):

* Sun 01 Feb 2015 06:00:30 AM JST
Process.connections()
* Sun 01 Feb 2015 06:01:29 AM JST
                    
* Sun 01 Feb 2015 06:02:08 AM JST
self._ps.connections(kind)
* Sun 01 Feb 2015 06:02:44 AM JST
cpu_affinity
* Sun 01 Feb 2015 06:03:04 AM JST
cpu_percent
* Sun 01 Feb 2015 06:03:30 AM JST
create_time
* Sun 01 Feb 2015 06:03:41 AM JST
cpu_percent
* Sun 01 Feb 2015 06:03:49 AM JST
create_time
* Sun 01 Feb 2015 06:04:04 AM JST
cwd
* Sun 01 Feb 2015 06:04:11 AM JST
__class__             _name                 get_num_fds       set_ionice
__delattr__           _pid                  get_num_threads   set_nice  
__dict__              _ppid                 get_open_files    set_rlimit
__doc__               _proc                 get_rlimit        status    
__eq__                _send_signal          get_threads       suspend   
__format__            as_dict               getcwd            terminal  
__getattribute__      children              gids              terminate 
__hash__              cmdline               io_counters       threads   
__init__              connections           ionice            uids      
__module__            cpu_affinity          is_running        username  
__ne__                cpu_percent           kill              wait      
__new__               cpu_times             memory_info     
__reduce__            create_time           memory_info_ex  
__reduce_ex__         cwd                   memory_maps     
__repr__              exe                   memory_percent  
__setattr__           get_children          name            
__sizeof__            get_connections       nice            
__str__               get_cpu_affinity      num_ctx_switches
__subclasshook__      get_cpu_percent       num_fds         
__weakref__           get_cpu_times         num_threads     
_create_time          get_ext_memory_info   open_files      
_exe                  get_io_counters       parent          
_gone                 get_ionice            pid             
_hash                 get_memory_info       ppid            
_ident                get_memory_maps       resume          
_init                 get_memory_percent    rlimit          
_last_proc_cpu_times  get_nice              send_signal     
_last_sys_cpu_times   get_num_ctx_switches  set_cpu_affinity[0

* Sun 01 Feb 2015 06:05:11 AM JST
get_connections
* Sun 01 Feb 2015 06:05:42 AM JST
self._ps.connections(kind)
* Sun 01 Feb 2015 06:06:17 AM JST
get_cpu_affinity
* Sun 01 Feb 2015 06:06:22 AM JST
get
* Sun 01 Feb 2015 06:06:24 AM JST
get_cpu_percent
* Sun 01 Feb 2015 06:06:28 AM JST
get_cpu_times
* Sun 01 Feb 2015 06:06:36 AM JST
pcputimes
* Sun 01 Feb 2015 06:07:17 AM JST
get_ext_memory_info
* Sun 01 Feb 2015 06:07:32 AM JST
pextmem
* Sun 01 Feb 2015 06:11:02 AM JST
if sys.platform.startswith("linux")
* Sun 01 Feb 2015 06:11:19 AM JST
pextmem = namedtuple('pextmem', 'rss vms shared text lib data dirty')
* Sun 01 Feb 2015 06:11:35 AM JST
'rss vms shared text lib data dirty'
* Sun 01 Feb 2015 06:11:40 AM JST

* Sun 01 Feb 2015 06:11:40 AM JST

* Sun 01 Feb 2015 06:11:40 AM JST
    pextmem = namedtuple('pextmem', 'rss vms shared text lib data dirty')

* Sun 01 Feb 2015 06:12:00 AM JST
elif sys.platform.startswith("win32"):
* Sun 01 Feb 2015 06:12:18 AM JST
'pextmem', ['num_page_faults', 'peak_wset', 'wset', 'peak_paged_pool'
* Sun 01 Feb 2015 06:12:25 AM JST
pextmem = namedtuple(
    'pextmem', ['num_page_faults', 'peak_wset', 'wset', 'peak_paged_pool',
                'paged_pool', 'peak_nonpaged_pool', 'nonpaged_pool',
                'pagefile', 'peak_pagefile', 'private'])

* Sun 01 Feb 2015 06:12:33 AM JST
pextmem 
* Sun 01 Feb 2015 06:12:54 AM JST
elif sys.platform.startswith("darwin"):
* Sun 01 Feb 2015 06:13:32 AM JST
pextmem = namedtuple('pextmem', ['rss', 'vms', 'pfaults', 'pageins'])
* Sun 01 Feb 2015 06:13:47 AM JST
                
* Sun 01 Feb 2015 06:13:49 AM JST
              
* Sun 01 Feb 2015 06:14:01 AM JST
elif sys.platform.startswith("freebsd"):
* Sun 01 Feb 2015 06:14:33 AM JST
pextmem = namedtuple('pextmem', ['rss', 'vms', 'text', 'data', 'stack'])
* Sun 01 Feb 2015 06:14:50 AM JST
elif sys.platform.startswith("sunos"):
* Sun 01 Feb 2015 06:15:08 AM JST
pextmem = namedtuple('pextmem', ['rss', 'vms'])
* Sun 01 Feb 2015 06:15:26 AM JST

* Sun 01 Feb 2015 06:15:26 AM JST

* Sun 01 Feb 2015 06:15:26 AM JST
import os as _os

* Sun 01 Feb 2015 06:15:33 AM JST
PSMEM
* Sun 01 Feb 2015 06:16:09 AM JST
get
* Sun 01 Feb 2015 06:16:10 AM JST
get_io_counters
* Sun 01 Feb 2015 06:16:24 AM JST
get
* Sun 01 Feb 2015 06:16:25 AM JST
get_ionice
* Sun 01 Feb 2015 06:16:45 AM JST
PSIONice
* Sun 01 Feb 2015 06:17:21 AM JST
PSIONice
* Sun 01 Feb 2015 06:17:42 AM JST
get
* Sun 01 Feb 2015 06:17:44 AM JST
get_memory_maps
* Sun 01 Feb 2015 06:17:50 AM JST
get
* Sun 01 Feb 2015 06:17:51 AM JST
get_memory_percent
* Sun 01 Feb 2015 06:17:56 AM JST
get_nice
* Sun 01 Feb 2015 06:18:07 AM JST
get_num_fds
* Sun 01 Feb 2015 06:18:12 AM JST
get_num_threads
* Sun 01 Feb 2015 06:18:18 AM JST
get_open_files
* Sun 01 Feb 2015 06:18:23 AM JST
get_rlimit
* Sun 01 Feb 2015 06:18:32 AM JST
get_threads
* Sun 01 Feb 2015 06:19:09 AM JST
getcwd
* Sun 01 Feb 2015 06:19:13 AM JST
gids
* Sun 01 Feb 2015 06:19:23 AM JST
pgids
* Sun 01 Feb 2015 06:20:16 AM JST
io_counters
* Sun 01 Feb 2015 06:20:23 AM JST
ionice
* Sun 01 Feb 2015 06:20:32 AM JST
is
* Sun 01 Feb 2015 06:20:33 AM JST
is_running
* Sun 01 Feb 2015 06:20:38 AM JST
memory
* Sun 01 Feb 2015 06:20:40 AM JST
memory_info
* Sun 01 Feb 2015 06:20:48 AM JST
name
* Sun 01 Feb 2015 06:20:52 AM JST
nice
* Sun 01 Feb 2015 06:20:58 AM JST
num_fds
* Sun 01 Feb 2015 06:21:03 AM JST
num_threads
* Sun 01 Feb 2015 06:21:08 AM JST
open_files
* Sun 01 Feb 2015 06:21:12 AM JST
parent
* Sun 01 Feb 2015 06:21:52 AM JST
self._ps.parent().pid
* Sun 01 Feb 2015 06:22:44 AM JST
status
* Sun 01 Feb 2015 06:22:50 AM JST
suspend
* Sun 01 Feb 2015 06:23:09 AM JST
terminal
* Sun 01 Feb 2015 06:23:17 AM JST
threads
* Sun 01 Feb 2015 06:23:22 AM JST
uids
* Sun 01 Feb 2015 06:24:46 AM JST
_common
* Sun 01 Feb 2015 06:25:46 AM JST
STATUS_RUNNING = "running"
STATUS_SLEEPING = "sleeping"
STATUS_DISK_SLEEP = "disk-sleep"
STATUS_STOPPED = "stopped"
STATUS_TRACING_STOP = "tracing-stop"
STATUS_ZOMBIE = "zombie"
STATUS_DEAD = "dead"
STATUS_WAKE_KILL = "wake-kill"
STATUS_WAKING = "waking"
STATUS_IDLE = "idle"  # BSD
STATUS_LOCKED = "locked"  # BSD
STATUS_WAITING = "waiting"  # BSD

* Sun 01 Feb 2015 06:25:53 AM JST
STATUS
* Sun 01 Feb 2015 06:25:53 AM JST
STATUS
* Sun 01 Feb 2015 06:25:53 AM JST
STATUS
* Sun 01 Feb 2015 06:25:53 AM JST
STATUS
* Sun 01 Feb 2015 06:25:53 AM JST
STATUS
* Sun 01 Feb 2015 06:25:53 AM JST
STATUS
* Sun 01 Feb 2015 06:25:54 AM JST
STATUS
* Sun 01 Feb 2015 06:25:54 AM JST
STATUS
* Sun 01 Feb 2015 06:25:54 AM JST
STATUS
* Sun 01 Feb 2015 06:25:54 AM JST
STATUS
* Sun 01 Feb 2015 06:25:54 AM JST
STATUS
* Sun 01 Feb 2015 06:25:54 AM JST
STATUS
* Sun 01 Feb 2015 06:26:35 AM JST
_status
* Sun 01 Feb 2015 06:28:04 AM JST
self._ps.children()
* Sun 01 Feb 2015 06:28:48 AM JST
self._ps.children(recursive=True)
* Sun 01 Feb 2015 06:31:29 AM JST
you 
* Sun 01 Feb 2015 06:31:29 AM JST
if you 
* Sun 01 Feb 2015 06:32:33 AM JST
_ps_psutil
* Sun 01 Feb 2015 06:37:55 AM JST
self
* Sun 01 Feb 2015 06:41:32 AM JST
pi
* Sun 01 Feb 2015 06:41:34 AM JST
self.pi
* Sun 01 Feb 2015 06:41:36 AM JST
pid = self.pi
* Sun 01 Feb 2015 06:42:21 AM JST
'(pid={0.pid}, name={1})'
* Sun 01 Feb 2015 06:44:15 AM JST
self.__class__.__name__
* Sun 01 Feb 2015 06:44:20 AM JST
self
* Sun 01 Feb 2015 06:45:52 AM JST
            
* Sun 01 Feb 2015 06:48:44 AM JST
import process
* Sun 01 Feb 2015 06:48:48 AM JST
p=process.Process(e.pid)
* Sun 01 Feb 2015 06:48:57 AM JST
import process
p=process.Process(e.pid)

* Sun 01 Feb 2015 06:49:30 AM JST
import psutil
e=[x for x in psutil.get_process_list() if x.name() == 'emacs'][0]

* Sun 01 Feb 2015 06:49:39 AM JST
import process
p=process.Process(e.pid)

* Sun 01 Feb 2015 07:05:39 AM JST
self. == other.
* Sun 01 Feb 2015 07:08:14 AM JST
__
* Sun 01 Feb 2015 07:08:14 AM JST
sef.__
* Sun 01 Feb 2015 07:09:09 AM JST
def
* Sun 01 Feb 2015 07:10:33 AM JST
(self.pid, self.create_time)
* Sun 01 Feb 2015 07:10:52 AM JST
(self.pid, self.create_time)
* Sun 01 Feb 2015 07:10:57 AM JST
                
* Sun 01 Feb 2015 07:11:11 AM JST
(self.pid, self.create_time)
* Sun 01 Feb 2015 07:11:24 AM JST
hash()
* Sun 01 Feb 2015 07:11:38 AM JST
_
* Sun 01 Feb 2015 07:11:38 AM JST
self._
* Sun 01 Feb 2015 08:06:56 AM JST
iter
* Sun 01 Feb 2015 08:07:23 AM JST
psutil.
* Sun 01 Feb 2015 08:09:57 AM JST
_ps_psutil
* Sun 01 Feb 2015 08:10:03 AM JST
# replace import "_ps_psutil" if you want use anather package
* Sun 01 Feb 2015 08:11:34 AM JST
psutil.get_process_list()
* Sun 01 Feb 2015 08:12:41 AM JST
list_process
* Sun 01 Feb 2015 08:25:14 AM JST
boot_time
* Sun 01 Feb 2015 08:28:26 AM JST
cached_phymem
* Sun 01 Feb 2015 08:28:44 AM JST
cached_phymem?
* Sun 01 Feb 2015 08:29:22 AM JST
virtual_memory
* Sun 01 Feb 2015 08:31:30 AM JST
users
* Sun 01 Feb 2015 08:33:19 AM JST
RLIMIT_STACK
* Sun 01 Feb 2015 08:33:38 AM JST
__files__
* Sun 01 Feb 2015 08:33:59 AM JST
RLIMIT_STACK
* Sun 01 Feb 2015 08:36:03 AM JST
conn
* Sun 01 Feb 2015 08:36:21 AM JST
CONN_ESTABLISHED = "ESTABLISHED"
CONN_SYN_SENT = "SYN_SENT"
CONN_SYN_RECV = "SYN_RECV"
CONN_FIN_WAIT1 = "FIN_WAIT1"
CONN_FIN_WAIT2 = "FIN_WAIT2"
CONN_TIME_WAIT = "TIME_WAIT"
CONN_CLOSE = "CLOSE"
CONN_CLOSE_WAIT = "CLOSE_WAIT"
CONN_LAST_ACK = "LAST_ACK"
CONN_LISTEN = "LISTEN"
CONN_CLOSING = "CLOSING"
CONN_NONE = "NONE"

* Sun 01 Feb 2015 08:36:28 AM JST
CONN_
* Sun 01 Feb 2015 08:36:28 AM JST
CONN_
* Sun 01 Feb 2015 08:36:28 AM JST
CONN_
* Sun 01 Feb 2015 08:36:28 AM JST
CONN_
* Sun 01 Feb 2015 08:36:29 AM JST
CONN_
* Sun 01 Feb 2015 08:36:29 AM JST
CONN_
* Sun 01 Feb 2015 08:36:29 AM JST
CONN_
* Sun 01 Feb 2015 08:36:29 AM JST
CONN_
* Sun 01 Feb 2015 08:36:29 AM JST
CONN_
* Sun 01 Feb 2015 08:36:29 AM JST
CONN_
* Sun 01 Feb 2015 08:36:29 AM JST
CONN_
* Sun 01 Feb 2015 08:36:29 AM JST
CONN_
* Sun 01 Feb 2015 08:36:51 AM JST

* Sun 01 Feb 2015 08:36:52 AM JST
status
* Sun 01 Feb 2015 08:36:52 AM JST
as status
* Sun 01 Feb 2015 08:36:53 AM JST
_status as status
* Sun 01 Feb 2015 09:00:35 AM JST
p
* Sun 01 Feb 2015 09:00:35 AM JST
sys.p
* Sun 01 Feb 2015 09:01:18 AM JST
(IOPRIO_CLASS_NONE,
                                 IOPRIO_CLASS_RT,
                                 IOPRIO_CLASS_BE,
                                 IOPRIO_CLASS_IDLE)
* Sun 01 Feb 2015 09:01:21 AM JST
                                 
* Sun 01 Feb 2015 09:01:27 AM JST
                        
* Sun 01 Feb 2015 09:02:22 AM JST
IOPRIO_CLASS_NONE = 0
IOPRIO_CLASS_RT = 1
IOPRIO_CLASS_BE = 2
IOPRIO_CLASS_IDLE = 3

* Sun 01 Feb 2015 09:02:47 AM JST
if _sys.platform.startswith(('linux')):
    IOPRIO_CLASS_NONE = 0
    IOPRIO_CLASS_RT = 1
    IOPRIO_CLASS_BE = 2
    IOPRIO_CLASS_IDLE = 3


* Sun 01 Feb 2015 09:04:16 AM JST
(ABOVE_NORMAL_PRIORITY_CLASS,
                                 BELOW_NORMAL_PRIORITY_CLASS,
                                 HIGH_PRIORITY_CLASS,
                                 IDLE_PRIORITY_CLASS,
                                 NORMAL_PRIORITY_CLASS,
                                 REALTIME_PRIORITY_CLASS)
* Sun 01 Feb 2015 09:04:20 AM JST
                                 
* Sun 01 Feb 2015 09:04:22 AM JST
                        
* Sun 01 Feb 2015 09:04:23 AM JST
               
* Sun 01 Feb 2015 09:04:24 AM JST
      
* Sun 01 Feb 2015 09:04:26 AM JST
    
* Sun 01 Feb 2015 09:04:27 AM JST
                        
* Sun 01 Feb 2015 09:04:40 AM JST
CONN_DELETE_TCB
* Sun 01 Feb 2015 09:05:23 AM JST
(CONN_IDLE,
                                 CONN_BOUND)
* Sun 01 Feb 2015 09:05:25 AM JST
                                 
* Sun 01 Feb 2015 09:06:42 AM JST
__revision__ = "$Revision$"
__version__ = "0.0.1"

__all__ = [ ]



* Sun 01 Feb 2015 09:06:56 AM JST
        from _psutil_linux import (RLIM_INFINITY,
                                   RLIMIT_AS,
                                   RLIMIT_CORE,
                                   RLIMIT_CPU,
                                   RLIMIT_DATA,
                                   RLIMIT_FSIZE,
                                   RLIMIT_LOCKS,
                                   RLIMIT_MEMLOCK,
                                   RLIMIT_NOFILE,
                                   RLIMIT_NPROC,
                                   RLIMIT_RSS,
                                   RLIMIT_STACK)

* Sun 01 Feb 2015 09:07:42 AM JST
import warnings
* Sun 01 Feb 2015 09:07:55 AM JST
# Linux >= 2.6.36
* Sun 01 Feb 2015 09:08:14 AM JST
RLIMIT_MSGQUEUE
* Sun 01 Feb 2015 09:08:30 AM JST
        try:
            RLIMIT_MSGQUEUE = _psutil_linux.RLIMIT_MSGQUEUE
        except AttributeError:
            pass
        try:
            RLIMIT_NICE = _psutil_linux.RLIMIT_NICE
        except AttributeError:
            pass
        try:
            RLIMIT_RTPRIO = _psutil_linux.RLIMIT_RTPRIO
        except AttributeError:
            pass
        try:
            RLIMIT_RTTIME = _psutil_linux.RLIMIT_RTTIME
        except AttributeError:
            pass
        try:
            RLIMIT_SIGPENDING = _psutil_linux.RLIMIT_SIGPENDING
        except AttributeError:
            pass

* Sun 01 Feb 2015 09:09:05 AM JST
        try:
            RLIMIT_MSGQUEUE = _psutil_linux.RLIMIT_MSGQUEUE
        except AttributeError:
            pass
        try:
            RLIMIT_NICE = _psutil_linux.RLIMIT_NICE
        except AttributeError:
            pass
        try:
            RLIMIT_RTPRIO = _psutil_linux.RLIMIT_RTPRIO
        except AttributeError:
            pass
        try:
            RLIMIT_RTTIME = _psutil_linux.RLIMIT_RTTIME
        except AttributeError:
            pass
        try:
            RLIMIT_SIGPENDING = _psutil_linux.RLIMIT_SIGPENDING
        except AttributeError:
            pass

* Sun 01 Feb 2015 09:09:24 AM JST
RLIMIT_MSGQUEUE
* Sun 01 Feb 2015 09:09:39 AM JST
    try:
        from psutil import RLIMIT_MSGQUEUE
    except ImportError:
        pass

* Sun 01 Feb 2015 09:09:42 AM JST
RLIMIT_MSGQUEUE
* Sun 01 Feb 2015 09:09:54 AM JST
RLIMIT_NICE
* Sun 01 Feb 2015 09:10:50 AM JST

* Sun 01 Feb 2015 09:10:50 AM JST

* Sun 01 Feb 2015 09:10:50 AM JST
    # TODO: (Atami) [2015/02/01]

* Sun 01 Feb 2015 09:22:34 AM JST
__revision__ = "$Revision$"
__version__ = "0.0.1"

__all__ = [ ]

* Sun 01 Feb 2015 09:22:49 AM JST
Giampaolo Rodola
* Sun 01 Feb 2015 09:25:06 AM JST
TimeoutExpired
* Sun 01 Feb 2015 09:26:49 AM JST
    def __init__(self, pid, name=None, msg=None):
        Error.__init__(self)
        self.pid = pid
        self.name = name
        self.msg = msg
        if msg is None:
            if name:
                details = "(pid=%s, name=%s)" % (self.pid, repr(self.name))
            else:
                details = "(pid=%s)" % self.pid
            self.msg = "process no longer exists " + details

    def __str__(self):
        return self.msg

* Sun 01 Feb 2015 09:26:59 AM JST
    def __init__(self, pid=None, name=None, msg=None):
        Error.__init__(self)
        self.pid = pid
        self.name = name
        self.msg = msg
        if msg is None:
            if (pid is not None) and (name is not None):
                self.msg = "(pid=%s, name=%s)" % (pid, repr(name))
            elif (pid is not None):
                self.msg = "(pid=%s)" % self.pid
            else:
                self.msg = ""

    def __str__(self):
        return self.msg

* Sun 01 Feb 2015 09:27:08 AM JST
    def __init__(self, seconds, pid=None, name=None):
        Error.__init__(self)
        self.seconds = seconds
        self.pid = pid
        self.name = name
        self.msg = "timeout after %s seconds" % seconds
        if (pid is not None) and (name is not None):
            self.msg += " (pid=%s, name=%s)" % (pid, repr(name))
        elif (pid is not None):
            self.msg += " (pid=%s)" % self.pid

    def __str__(self):
        return self.msg

* Sun 01 Feb 2015 09:27:33 AM JST

* Sun 01 Feb 2015 09:27:33 AM JST
Process
* Sun 01 Feb 2015 09:27:34 AM JST
import Process
* Sun 01 Feb 2015 09:27:34 AM JST
_process import Process
* Sun 01 Feb 2015 09:28:18 AM JST
AccessDenied
* Sun 01 Feb 2015 09:28:25 AM JST
TimeoutExpired
* Sun 01 Feb 2015 09:33:19 AM JST
from functools import wraps
* Sun 01 Feb 2015 09:33:43 AM JST
try:
    from functools import wraps
except ImportError:
    def wraps(original):
        def inner(fn):
            for attribute in ['__module__', '__name__', '__doc__']:
                setattr(fn, attribute, getattr(original, attribute))
            for attribute in ['__dict__']:
                if hasattr(fn, attribute):
                    getattr(fn, attribute).update(getattr(original, attribute))
                else:
                    setattr(fn, attribute,
                            getattr(original, attribute).copy())
            return fn
        return inner

* Sun 01 Feb 2015 09:35:31 AM JST
try
* Sun 01 Feb 2015 09:37:00 AM JST
import 
* Sun 01 Feb 2015 09:37:01 AM JST
_err import 
* Sun 01 Feb 2015 09:37:04 AM JST
_err 
* Sun 01 Feb 2015 09:39:36 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 09:39:55 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 09:40:19 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 09:40:31 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 09:40:47 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 09:40:52 AM JST
        
* Sun 01 Feb 2015 09:40:57 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 09:41:11 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 09:41:20 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 09:42:05 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 09:42:38 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 09:43:01 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 09:43:31 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 09:44:08 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 09:44:17 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 09:44:25 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 09:44:53 AM JST
@wrap_exceptions
* Sun 01 Feb 2015 10:21:43 AM JST
terminated
* Sun 01 Feb 2015 10:22:25 AM JST
{0.pid}
* Sun 01 Feb 2015 10:22:40 AM JST

* Sun 01 Feb 2015 10:22:40 AM JST

* Sun 01 Feb 2015 10:22:40 AM JST
        # TODO: (Atami) [2015/02/01]

* Sun 01 Feb 2015 10:33:24 AM JST
pid_exists
* Sun 01 Feb 2015 10:37:57 AM JST
list_pids
* Sun 01 Feb 2015 10:38:06 AM JST
get_boot_time
* Sun 01 Feb 2015 10:38:41 AM JST
psutil
* Sun 01 Feb 2015 10:42:37 AM JST
Ti
* Sun 01 Feb 2015 10:42:37 AM JST
_err.Ti
* Sun 01 Feb 2015 10:42:43 AM JST
_psu
* Sun 01 Feb 2015 10:45:52 AM JST
from subprocess import PIPE
* Sun 01 Feb 2015 10:45:55 AM JST
psutil.
* Sun 01 Feb 2015 10:46:04 AM JST
p = psutil.Popen(["python", "-c", "print 'hi'"], stdout=PIPE)
* Sun 01 Feb 2015 10:51:02 AM JST
    def __dir__(self):
        return sorted(set(dir(Popen) + dir(subprocess.Popen)))


* Sun 01 Feb 2015 10:51:23 AM JST
    def __getattribute__(self, name):
        try:
            return object.__getattribute__(self, name)
        except AttributeError:
            try:
                return object.__getattribute__(self.__subproc, name)
            except AttributeError:
                raise AttributeError("%s instance has no attribute '%s'"
                                     % (self.__class__.__name__, name))


* Sun 01 Feb 2015 10:51:33 AM JST
    def wait(self, timeout=None):
        if self.__subproc.returncode is not None:
            return self.__subproc.returncode
        ret = super(Popen, self).wait(timeout)
        self.__subproc.returncode = ret
        return ret

* Sun 01 Feb 2015 11:02:24 AM JST
(e2wm:def-plugin-files-update-buffer e2wm:def-plugin-files-dir)
* Sun 01 Feb 2015 11:06:54 AM JST
(e2wm:def-plugin-files-update-buffer dir)
* Sun 01 Feb 2015 11:07:24 AM JST
(e2wm:def-plugin-files-update-buffer dir)
* Sun 01 Feb 2015 11:08:31 AM JST
e2wm:def-plugin-files-update-by-command
* Sun 01 Feb 2015 11:14:21 AM JST
(get-buffer buf-name)
* Sun 01 Feb 2015 11:14:34 AM JST
name
* Sun 01 Feb 2015 11:14:35 AM JST
buf-name
* Sun 01 Feb 2015 11:14:39 AM JST
(get-buffer "*Messages*")
* Sun 01 Feb 2015 11:14:45 AM JST
(get-buffer "*Messages*")
* Sun 01 Feb 2015 11:14:52 AM JST
(set-buffer (get-buffer "*Messages*"))
* Sun 01 Feb 2015 11:19:00 AM JST
window-configuration-change-hook
* Sun 01 Feb 2015 11:19:28 AM JST
e2wm:override-window-cfg-change
* Sun 01 Feb 2015 11:30:12 AM JST
import psutil
* Sun 01 Feb 2015 11:30:20 AM JST
from subprocess import PIPE
* Sun 01 Feb 2015 11:30:24 AM JST
p = psutil.Popen(["python", "-c", "print 'hi'"], stdout=PIPE)
* Sun 01 Feb 2015 11:31:29 AM JST
list
* Sun 01 Feb 2015 11:33:13 AM JST
Popen(["python", "-c", "print 'hi'"], stdout=PIPE)
* Sun 01 Feb 2015 11:33:18 AM JST
import psutil
* Sun 01 Feb 2015 11:33:26 AM JST
from subprocess import PIPE
* Sun 01 Feb 2015 11:45:36 AM JST
pass
* Sun 01 Feb 2015 11:49:08 AM JST
    def test_get_username_type(self, ):
        self.skipTest('Not Implemented')


* Sun 01 Feb 2015 11:54:38 AM JST
if _sys.platform.startswith(('linux')):
* Sun 01 Feb 2015 11:55:38 AM JST
if _sys.platform.startswith(('freebsd')):
* Sun 01 Feb 2015 11:58:39 AM JST
_ntuple
* Sun 01 Feb 2015 11:58:45 AM JST

* Sun 01 Feb 2015 11:58:45 AM JST

* Sun 01 Feb 2015 11:58:45 AM JST
from process import _ntuple

* Sun 01 Feb 2015 12:02:19 PM JST
p in psutil.get_process_list()
* Sun 01 Feb 2015 12:06:12 PM JST
pass
* Sun 01 Feb 2015 12:06:20 PM JST
_s
* Sun 01 Feb 2015 12:06:20 PM JST
self._s
* Sun 01 Feb 2015 12:06:44 PM JST
_
* Sun 01 Feb 2015 12:06:44 PM JST
self._
* Sun 01 Feb 2015 12:07:49 PM JST

* Sun 01 Feb 2015 12:07:49 PM JST

* Sun 01 Feb 2015 12:07:50 PM JST
        self.skipTest('Not Implemented')

* Sun 01 Feb 2015 12:08:24 PM JST

* Sun 01 Feb 2015 12:08:24 PM JST

* Sun 01 Feb 2015 12:08:24 PM JST
        self.skipTest('Not Implemented')

* Sun 01 Feb 2015 12:12:43 PM JST
self.skipTest('Not Implemented')
* Sun 01 Feb 2015 12:13:09 PM JST
self.skipTest('Not Implemented')
* Sun 01 Feb 2015 12:13:34 PM JST
self.assertIsInstance(self.ps.get_path(), str)
* Sun 01 Feb 2015 12:13:52 PM JST
self.assertIsInstance($1, $2)
* Sun 01 Feb 2015 12:18:59 PM JST
list_chi
* Sun 01 Feb 2015 12:19:47 PM JST
assert
* Sun 01 Feb 2015 12:19:48 PM JST
self.assert
* Sun 01 Feb 2015 12:19:51 PM JST
self.
* Sun 01 Feb 2015 12:20:25 PM JST
        for child in children:
            self.assertIsInstance(child, Process)

* Sun 01 Feb 2015 12:21:30 PM JST
e=[x for x in psutil.get_process_list() if x.name() == 'emacs'][0]
* Sun 01 Feb 2015 12:22:43 PM JST
P
* Sun 01 Feb 2015 12:22:44 PM JST
_ntuple.P
* Sun 01 Feb 2015 12:23:03 PM JST
_ntuple.PSCpuTimes
* Sun 01 Feb 2015 12:23:29 PM JST
list_
* Sun 01 Feb 2015 12:29:50 PM JST
self.
* Sun 01 Feb 2015 12:29:59 PM JST
ps.
* Sun 01 Feb 2015 12:29:59 PM JST
self.ps.
* Sun 01 Feb 2015 12:37:13 PM JST
self.skipTest('Not Implemented')
* Sun 01 Feb 2015 12:37:59 PM JST
_ntuple.PSIO
* Sun 01 Feb 2015 12:39:18 PM JST
self.assertIsInstance(self.ps.get_io_counters(), _ntuple.PSIO)
* Sun 01 Feb 2015 12:42:07 PM JST
cmdline()
* Sun 01 Feb 2015 12:43:00 PM JST
int
* Sun 01 Feb 2015 12:43:33 PM JST
ionice()
* Sun 01 Feb 2015 12:46:32 PM JST
get
* Sun 01 Feb 2015 12:46:55 PM JST
_ntuple.PSThread(*self._ps.threads())
* Sun 01 Feb 2015 12:47:06 PM JST
self._ps.threads()
* Sun 01 Feb 2015 12:47:47 PM JST
_ntuple.PSThread
* Sun 01 Feb 2015 12:48:47 PM JST
import psutil
* Sun 01 Feb 2015 12:48:51 PM JST
from subprocess import PIPE
* Sun 01 Feb 2015 12:48:55 PM JST
p = psutil.Popen(["python", "-c", "print 'hi'"], stdout=PIPE)
* Sun 01 Feb 2015 12:49:44 PM JST
interval
* Sun 01 Feb 2015 12:52:25 PM JST
__class__
* Sun 01 Feb 2015 12:52:26 PM JST
self.__class__
* Sun 01 Feb 2015 12:54:28 PM JST
self._ps.open_files()
* Sun 01 Feb 2015 12:55:17 PM JST
_ntuple.PSOpenFile(*self._ps.open_files())
* Sun 01 Feb 2015 12:55:23 PM JST
self._ps.open_files()
* Sun 01 Feb 2015 01:09:02 PM JST
raise NotImplementedError()
* Sun 01 Feb 2015 01:11:30 PM JST
3460
* Sun 01 Feb 2015 01:12:43 PM JST
Process(pid=1, name="init")
* Sun 01 Feb 2015 01:15:51 PM JST
get
* Sun 01 Feb 2015 01:15:51 PM JST
ps.get
* Sun 01 Feb 2015 01:16:31 PM JST
1)
* Sun 01 Feb 2015 01:16:31 PM JST
Process(1)
* Sun 01 Feb 2015 01:16:34 PM JST

* Sun 01 Feb 2015 01:16:34 PM JST

* Sun 01 Feb 2015 01:16:34 PM JST
        parent = Y # Process(pid=1, name="init")

* Sun 01 Feb 2015 01:17:11 PM JST
assertIsInstance
* Sun 01 Feb 2015 01:18:39 PM JST
path
* Sun 01 Feb 2015 01:19:00 PM JST
from process._process import Process, Popen
* Sun 01 Feb 2015 01:19:07 PM JST
from subprocess import PIPE
* Sun 01 Feb 2015 01:19:16 PM JST
Popen(["python", "-c", "print 'hi'"], stdout=PIPE)
* Sun 01 Feb 2015 01:20:21 PM JST
got
* Sun 01 Feb 2015 01:23:22 PM JST
status
* Sun 01 Feb 2015 01:24:10 PM JST
Str
* Sun 01 Feb 2015 01:24:22 PM JST
import Str
* Sun 01 Feb 2015 01:24:22 PM JST
enum import Str
* Sun 01 Feb 2015 01:24:22 PM JST
from enum import Str
* Sun 01 Feb 2015 01:39:23 PM JST
break)
    ;;;;
;;;;
* Sun 01 Feb 2015 01:40:31 PM JST
py
* Sun 01 Feb 2015 01:40:32 PM JST
py-send-region-ipython
* Sun 01 Feb 2015 01:41:08 PM JST
`python-mode-map-predefine'
* Sun 01 Feb 2015 01:41:36 PM JST
import enum


class Tes(enum.Enum):
    r"""Tes

    Tes is a enum.Enum.
    Responsibility:
    """
    hello = 'hello'
    world = 'world'


* Sun 01 Feb 2015 01:44:55 PM JST
_status
* Sun 01 Feb 2015 01:46:14 PM JST
status
* Sun 01 Feb 2015 02:22:45 PM JST
self.ps.get_cmdline()
* Sun 01 Feb 2015 02:22:54 PM JST
self
* Sun 01 Feb 2015 02:23:08 PM JST
["python", "-c", "print 'hi'"]
* Sun 01 Feb 2015 02:23:50 PM JST
from subprocess import PIPE
from process._process import Process, Popen

* Sun 01 Feb 2015 02:25:49 PM JST
from subprocess import PIPE
from process._process import Process, Popen

* Sun 01 Feb 2015 02:25:57 PM JST
["python", "-c", "print 'hi'"]
* Sun 01 Feb 2015 02:26:03 PM JST
Popen(self.cmdlines, stdout=PIPE)
* Sun 01 Feb 2015 02:26:06 PM JST
["python", "-c", "print 'hi'"]
* Sun 01 Feb 2015 02:26:15 PM JST
p=Popen(["python", "-c", "print 'hi'"], stdout=PIPE)
* Sun 01 Feb 2015 02:29:53 PM JST
from getpass import getuser
* Sun 01 Feb 2015 02:31:58 PM JST
self.skipTest()
* Sun 01 Feb 2015 02:32:02 PM JST
from getpass import getuserp
* Sun 01 Feb 2015 02:37:24 PM JST
get_create_time()
* Sun 01 Feb 2015 02:37:42 PM JST
get_create_time()
* Sun 01 Feb 2015 02:38:21 PM JST
Popen(["python", "-c", "print 'hi'"], stdout=PIPE).cwd
* Sun 01 Feb 2015 02:39:10 PM JST
/usr/lib/python2.7/posixpath.pyc
* Sun 01 Feb 2015 02:39:46 PM JST
base
* Sun 01 Feb 2015 02:39:53 PM JST
os.path.dirname
* Sun 01 Feb 2015 02:40:07 PM JST
self.assertIsInstance(self.ps.get_cwd(), str)
* Sun 01 Feb 2015 02:40:37 PM JST
        cwd = os.path.dirname(__file__)
        self.assertEqual(cwd, self.ps.get_cwd())

* Sun 01 Feb 2015 02:42:33 PM JST
0 = 
* Sun 01 Feb 2015 02:43:51 PM JST
path
* Sun 01 Feb 2015 02:43:52 PM JST
os.path
* Sun 01 Feb 2015 02:54:32 PM JST
(0,0,0,0,0,0,0)
* Sun 01 Feb 2015 02:55:08 PM JST
self.ps.is_running()
* Sun 01 Feb 2015 02:55:11 PM JST

* Sun 01 Feb 2015 02:55:11 PM JST

* Sun 01 Feb 2015 02:55:11 PM JST
        result = 

* Sun 01 Feb 2015 02:55:37 PM JST

* Sun 01 Feb 2015 02:55:37 PM JST

* Sun 01 Feb 2015 02:55:37 PM JST
        sleep(2)

* Mon 02 Feb 2015 08:25:42 AM JST
["python", "-c", "print 'hi'"]
* Mon 02 Feb 2015 08:26:08 AM JST
import subprocess;subprocess.Popen(["python", "-c", "print 'hi'"], stdout=subprocess.PIPE)
* Mon 02 Feb 2015 08:27:24 AM JST
subprocess.Popen(["python", "-c", "print 'hi'"], stdout=subprocess.PIPE)
* Mon 02 Feb 2015 08:29:48 AM JST
'
* Mon 02 Feb 2015 08:29:49 AM JST
                   '
* Mon 02 Feb 2015 08:30:01 AM JST
['python', '-c', 'import', 'subprocess', ';',
                   '''subprocess.Popen(["python", "-c", "print 'hi'"], stdout=subprocess.PIPE)''']
* Mon 02 Feb 2015 08:30:21 AM JST
Popen(['python', '-c', 'import', 'subprocess', ';',
                   '''subprocess.Popen(["python", "-c", "print 'hi'"], stdout=subprocess.PIPE)'''], )
* Mon 02 Feb 2015 08:30:24 AM JST
'''subprocess.Popen(["python", "-c", "print 'hi'"], stdout=subprocess.PIPE)'''], )
* Mon 02 Feb 2015 08:30:24 AM JST
                   '''subprocess.Popen(["python", "-c", "print 'hi'"], stdout=subprocess.PIPE)'''], )
* Mon 02 Feb 2015 08:30:24 AM JST
Popen(['python', '-c', 'import', 'subprocess', ';',
* Mon 02 Feb 2015 08:30:25 AM JST
Popen(['python', '-c', 'import', 'subprocess', ';',
* Mon 02 Feb 2015 08:30:44 AM JST
['python', '-c', 'import', 'subprocess', ';',
                   '''subprocess.Popen(["python", "-c", "print 'hi'"], stdout=subprocess.PIPE)''']
* Mon 02 Feb 2015 08:31:19 AM JST
p=Popen(['python', '-c', 'import subprocess', ';',
   ...: 
                   '''subprocess.Popen(["python", "-c", "print 'hi'"], stdout=subprocess.PIPE)'''], stdout=PIPE)
* Mon 02 Feb 2015 08:31:25 AM JST
...: 
* Mon 02 Feb 2015 08:31:26 AM JST
   ...: 
* Mon 02 Feb 2015 08:31:27 AM JST
                   
* Mon 02 Feb 2015 08:31:46 AM JST
children
* Mon 02 Feb 2015 08:35:11 AM JST
import subprocess
* Mon 02 Feb 2015 08:35:31 AM JST
["python", "-c", "print 'hi'"]
* Mon 02 Feb 2015 08:35:47 AM JST
, stdout=subprocess.PIPE
* Mon 02 Feb 2015 08:37:33 AM JST
list_children()
* Mon 02 Feb 2015 08:37:49 AM JST
status
* Mon 02 Feb 2015 08:39:37 AM JST
p=Popen(['python', 'spawn_child.py'], stdout=PIPE)
* Mon 02 Feb 2015 08:39:43 AM JST
p.list_children()
* Mon 02 Feb 2015 08:39:47 AM JST
p=Popen(['python', 'spawn_child.py'], stdout=PIPE)
* Mon 02 Feb 2015 08:39:53 AM JST
p.list_children()
* Mon 02 Feb 2015 08:41:01 AM JST
__class__
* Mon 02 Feb 2015 08:41:03 AM JST
self.__class__
* Mon 02 Feb 2015 08:41:07 AM JST
__class__
* Mon 02 Feb 2015 08:41:08 AM JST
self.__class__
* Mon 02 Feb 2015 08:41:40 AM JST
from process import Popen
* Mon 02 Feb 2015 08:41:49 AM JST
p=Popen(['python', 'spawn_child.py'], stdout=PIPE)
p.list_children()

* Mon 02 Feb 2015 08:41:50 AM JST
p=Popen(['python', 'spawn_child.py'], stdout=PIPE)
* Mon 02 Feb 2015 08:41:58 AM JST
from process import Popen
* Mon 02 Feb 2015 08:42:11 AM JST
from subprocess import PIPE
* Mon 02 Feb 2015 08:42:16 AM JST
from subprocess import PIPE
from process import Popen  
p=Popen(['python', 'spawn_child.py'], stdout=PIPE)n
p.list_children()
* Mon 02 Feb 2015 08:42:23 AM JST
from subprocess import PIPE
from process import Popen  

* Mon 02 Feb 2015 08:42:27 AM JST
p=Popen(['python', 'spawn_child.py'], stdout=PIPE)n
* Mon 02 Feb 2015 08:42:34 AM JST
p.list_children()
* Mon 02 Feb 2015 08:42:46 AM JST
cd /root/.pylib/process/tests
* Mon 02 Feb 2015 08:42:52 AM JST
from subprocess import PIPE
from process import Popen  

* Mon 02 Feb 2015 08:42:55 AM JST
p=Popen(['python', 'spawn_child.py'], stdout=PIPE)n
* Mon 02 Feb 2015 08:42:57 AM JST
p=Popen(['python', 'spawn_child.py'], stdout=PIPE)
* Mon 02 Feb 2015 08:42:59 AM JST
p.list_children()
* Mon 02 Feb 2015 08:44:55 AM JST

* Mon 02 Feb 2015 08:44:56 AM JST

* Mon 02 Feb 2015 08:44:56 AM JST
        pass

* Mon 02 Feb 2015 08:45:03 AM JST
pass
* Mon 02 Feb 2015 08:45:04 AM JST
self.
* Mon 02 Feb 2015 08:45:24 AM JST
, stdout=PIPE
* Mon 02 Feb 2015 08:47:03 AM JST
assert
* Mon 02 Feb 2015 08:48:53 AM JST
        sleep(1) # wait launch
        children = self.subproc.list_children()

* Mon 02 Feb 2015 08:49:42 AM JST
from time import sleep
import subprocess

subprocess.Popen(["python", "-c", "print 'hi'"], stdout=subprocess.PIPE)

sleep(30)

* Mon 02 Feb 2015 08:50:30 AM JST

* Mon 02 Feb 2015 08:50:30 AM JST

* Mon 02 Feb 2015 08:50:30 AM JST
sleep(30)

* Mon 02 Feb 2015 08:50:34 AM JST

* Mon 02 Feb 2015 08:50:34 AM JST

* Mon 02 Feb 2015 08:50:34 AM JST
from time import sleep

* Mon 02 Feb 2015 08:51:36 AM JST
        self.failIfEqual(children, [])
        self.assertEqual(len(children), 1)

* Mon 02 Feb 2015 08:53:24 AM JST
p=Popen(['python', 'spawn_child.py'], stdout=PIPE)
* Mon 02 Feb 2015 08:53:47 AM JST
recursive
* Mon 02 Feb 2015 08:58:36 AM JST
open
* Mon 02 Feb 2015 08:58:56 AM JST
Popen(['python', 'spawn_child.py'], stdout=PIPE)
* Mon 02 Feb 2015 08:59:12 AM JST
ps
* Mon 02 Feb 2015 08:59:48 AM JST
self.failIfEqual(open_files, [])
* Mon 02 Feb 2015 09:00:23 AM JST
open_files
* Mon 02 Feb 2015 09:03:50 AM JST
Process.list_children
* Mon 02 Feb 2015 09:03:59 AM JST
try:
* Mon 02 Feb 2015 09:04:37 AM JST
import tempfile
* Mon 02 Feb 2015 09:04:46 AM JST
tempfile.TemporaryFile()
* Mon 02 Feb 2015 09:05:33 AM JST
self.failIfEqual(open_files, [])
* Mon 02 Feb 2015 09:05:39 AM JST
open_files
* Mon 02 Feb 2015 09:06:04 AM JST
Popen(['python', 'spawn_child.py'], stdout=PIPE).list_open_files()
* Mon 02 Feb 2015 09:06:06 AM JST
list_open_files()
* Mon 02 Feb 2015 09:10:42 AM JST
Simple
* Mon 02 Feb 2015 09:10:42 AM JST
import Simple
* Mon 02 Feb 2015 09:12:57 AM JST
# for Process.open_files
* Mon 02 Feb 2015 09:14:15 AM JST
import socket 

host = '' 
port = 50000 
backlog = 5 
size = 1024 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
s.bind((host,port)) 
s.listen(backlog) 
while 1: 
    client, address = s.accept() 
    data = client.recv(size) 
    if data: 
        client.send(data) 
    client.close()
* Mon 02 Feb 2015 09:15:07 AM JST
# for Process.list_connections
import socket 

host = '' 
port = 50000 
backlog = 5 
size = 1024 
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
s.bind((host,port)) 
s.listen(backlog) 
while 1: 
    client, address = s.accept() 
    data = client.recv(size) 
    if data: 
        client.send(data) 
    client.close()

* Mon 02 Feb 2015 09:17:29 AM JST
import socket
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect?
s.connect(('', 50000))

* Mon 02 Feb 2015 09:17:43 AM JST

* Mon 02 Feb 2015 09:17:43 AM JST

* Mon 02 Feb 2015 09:17:44 AM JST
s.connect?

* Mon 02 Feb 2015 09:18:00 AM JST

* Mon 02 Feb 2015 09:18:01 AM JST

* Mon 02 Feb 2015 09:18:01 AM JST
import socket

* Mon 02 Feb 2015 09:18:47 AM JST

* Mon 02 Feb 2015 09:20:24 AM JST

* Mon 02 Feb 2015 09:20:24 AM JST

* Mon 02 Feb 2015 09:20:24 AM JST
sleep(1)

* Mon 02 Feb 2015 09:21:15 AM JST

* Mon 02 Feb 2015 09:21:15 AM JST

* Mon 02 Feb 2015 09:21:15 AM JST
        self.skipTest('')

* Mon 02 Feb 2015 09:23:01 AM JST
assert
* Mon 02 Feb 2015 09:23:51 AM JST
self.ps.wait(timeout=5)
* Mon 02 Feb 2015 09:25:24 AM JST
pro
* Mon 02 Feb 2015 09:45:40 AM JST
/usr/bin/python
* Mon 02 Feb 2015 09:45:49 AM JST

* Mon 02 Feb 2015 09:45:49 AM JST

* Mon 02 Feb 2015 09:45:49 AM JST
        self.assertTrue

* Mon 02 Feb 2015 09:46:14 AM JST
from process import Popen  
* Mon 02 Feb 2015 09:46:15 AM JST
Popen  
* Mon 02 Feb 2015 09:48:30 AM JST
s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('', 50000))

* Mon 02 Feb 2015 09:48:37 AM JST

* Mon 02 Feb 2015 09:48:37 AM JST

* Mon 02 Feb 2015 09:48:38 AM JST
# for Process.list_connections

* Mon 02 Feb 2015 09:53:49 AM JST
self.ps.get_status()
* Mon 02 Feb 2015 09:54:06 AM JST

* Mon 02 Feb 2015 09:54:06 AM JST

* Mon 02 Feb 2015 09:54:06 AM JST
        sleep(1)

* Mon 02 Feb 2015 09:55:25 AM JST
resume
* Mon 02 Feb 2015 10:22:01 AM JST
__bytes__         __slots__             as_posix         name       
__class__         __str__               as_uri           open       
__delattr__       __subclasshook__      chmod            owner      
__div__           _accessor             cwd              parent     
__doc__           _cached_cparts        drive            parents    
__eq__            _cparts               exists           parts      
__format__        _drv                  glob             relative_to
__ge__            _format_parsed_parts  group            rename     
__getattribute__  _from_parsed_parts    is_absolute      replace    
__gt__            _from_parts           is_block_device  resolve    
__hash__          _hash                 is_char_device   rglob      
__init__          _init                 is_dir           rmdir      
__le__            _make_child           is_fifo          root       
__lt__            _make_child_relpath   is_file          stat       
__module__        _opener               is_reserved      stem       
__ne__            _parse_args           is_socket        suffix     
__new__           _parts                is_symlink       suffixes   
__rdiv__          _pparts               iterdir          symlink_to 
__reduce__        _raw_open             joinpath         touch      
__reduce_ex__     _root                 lchmod           unlink     
__repr__          _str                  lstat            with_name  
__setattr__       absolute              match            with_suffix
__sizeof__        anchor                mkdir         

* Mon 02 Feb 2015 10:22:25 AM JST
_Path__get_owner_not_implemented  access      isdecimal     rename      
_Path__get_owner_unix             atime       isdigit       renames     
_Path__get_owner_windows          basename    isdir         replace     
__add__                           bytes       isfile        rfind       
__class__                         capitalize  islink        rindex      
__contains__                      cd          islower       rjust       
__delattr__                       center      ismount       rmdir       
__dict__                          chdir       isnumeric     rmdir_p     
__div__                           chmod       isspace       rmtree      
__doc__                           chown       istitle       rmtree_p    
__enter__                         chroot      isupper       rpartition  
__eq__                            chunks      join          rsplit      
__exit__                          copy        joinpath      rstrip      
__format__                        copy2       lines         samefile    
__ge__                            copyfile    link          size        
__getattribute__                  copymode    listdir       split       
__getitem__                       copystat    ljust         splitall    
__getnewargs__                    copytree    lower         splitdrive  
__getslice__                      count       lstat         splitext    
__gt__                            ctime       lstrip        splitlines  
__hash__                          decode      makedirs      splitpath   
__init__                          dirname     makedirs_p    splitunc    
__le__                            dirs        mkdir         startswith  
__len__                           drive       mkdir_p       stat        
__lt__                            encode      module        statvfs     
__mod__                           endswith    move          strip       
__module__                        exists      mtime         stripext    
__mul__                           expand      name          swapcase    
__ne__                            expandtabs  namebase      symlink     
__new__                           expanduser  normcase      text        
__radd__                          expandvars  normpath      title       
__reduce__                        ext         open          touch       
__reduce_ex__                     files       owner         translate   
__repr__                          find        parent        uncshare    
__rmod__                          fnmatch     partition     unlink      
__rmul__                          format      pathconf      unlink_p    
__setattr__                       get_owner   read_hash     upper       
__sizeof__                        getatime    read_hexhash  using_module
__str__                           getctime    read_md5      utime       
__subclasshook__                  getcwd      readlink      walk        
__truediv__                       getmtime    readlinkabs   walkdirs    
__weakref__                       getsize     realpath      walkfiles   
_always_unicode                   glob        relpath       write_bytes 
_formatter_field_name_split       in_place    relpathto     write_lines 
_formatter_parser                 index       remove        write_text  
_hash                             isabs       remove_p      zfill       
_next_class                       isalnum     removedirs  
abspath                           isalpha     removedirs_p[0

* Mon 02 Feb 2015 10:22:54 AM JST
pathlib.Path
__bytes__         __slots__             as_posix         name       
__class__         __str__               as_uri           open       
__delattr__       __subclasshook__      chmod            owner      
__div__           _accessor             cwd              parent     
__doc__           _cached_cparts        drive            parents    
__eq__            _cparts               exists           parts      
__format__        _drv                  glob             relative_to
__ge__            _format_parsed_parts  group            rename     
__getattribute__  _from_parsed_parts    is_absolute      replace    
__gt__            _from_parts           is_block_device  resolve    
__hash__          _hash                 is_char_device   rglob      
__init__          _init                 is_dir           rmdir      
__le__            _make_child           is_fifo          root       
__lt__            _make_child_relpath   is_file          stat       
__module__        _opener               is_reserved      stem       
__ne__            _parse_args           is_socket        suffix     
__new__           _parts                is_symlink       suffixes   
__rdiv__          _pparts               iterdir          symlink_to 
__reduce__        _raw_open             joinpath         touch      
__reduce_ex__     _root                 lchmod           unlink     
__repr__          _str                  lstat            with_name  
__setattr__       absolute              match            with_suffix
__sizeof__        anchor                mkdir         


path.Path
_Path__get_owner_not_implemented  access      isdecimal     rename      
_Path__get_owner_unix             atime       isdigit       renames     
_Path__get_owner_windows          basename    isdir         replace     
__add__                           bytes       isfile        rfind       
__class__                         capitalize  islink        rindex      
__contains__                      cd          islower       rjust       
__delattr__                       center      ismount       rmdir       
__dict__                          chdir       isnumeric     rmdir_p     
__div__                           chmod       isspace       rmtree      
__doc__                           chown       istitle       rmtree_p    
__enter__                         chroot      isupper       rpartition  
__eq__                            chunks      join          rsplit      
__exit__                          copy        joinpath      rstrip      
__format__                        copy2       lines         samefile    
__ge__                            copyfile    link          size        
__getattribute__                  copymode    listdir       split       
__getitem__                       copystat    ljust         splitall    
__getnewargs__                    copytree    lower         splitdrive  
__getslice__                      count       lstat         splitext    
__gt__                            ctime       lstrip        splitlines  
__hash__                          decode      makedirs      splitpath   
__init__                          dirname     makedirs_p    splitunc    
__le__                            dirs        mkdir         startswith  
__len__                           drive       mkdir_p       stat        
__lt__                            encode      module        statvfs     
__mod__                           endswith    move          strip       
__module__                        exists      mtime         stripext    
__mul__                           expand      name          swapcase    
__ne__                            expandtabs  namebase      symlink     
__new__                           expanduser  normcase      text        
__radd__                          expandvars  normpath      title       
__reduce__                        ext         open          touch       
__reduce_ex__                     files       owner         translate   
__repr__                          find        parent        uncshare    
__rmod__                          fnmatch     partition     unlink      
__rmul__                          format      pathconf      unlink_p    
__setattr__                       get_owner   read_hash     upper       
__sizeof__                        getatime    read_hexhash  using_module
__str__                           getctime    read_md5      utime       
__subclasshook__                  getcwd      readlink      walk        
__truediv__                       getmtime    readlinkabs   walkdirs    
__weakref__                       getsize     realpath      walkfiles   
_always_unicode                   glob        relpath       write_bytes 
_formatter_field_name_split       in_place    relpathto     write_lines 
_formatter_parser                 index       remove        write_text  
_hash                             isabs       remove_p      zfill       
_next_class                       isalnum     removedirs  
abspath                           isalpha     removedirs_p[0

* Mon 02 Feb 2015 10:23:14 AM JST
__sizeof__        
* Mon 02 Feb 2015 10:23:15 AM JST
__setattr__       
* Mon 02 Feb 2015 10:23:15 AM JST
__repr__          
* Mon 02 Feb 2015 10:23:15 AM JST
__reduce_ex__     
* Mon 02 Feb 2015 10:23:15 AM JST
__reduce__        
* Mon 02 Feb 2015 10:23:15 AM JST
__rdiv__          
* Mon 02 Feb 2015 10:23:16 AM JST
__new__           
* Mon 02 Feb 2015 10:23:16 AM JST
__ne__            
* Mon 02 Feb 2015 10:23:16 AM JST
__module__        
* Mon 02 Feb 2015 10:23:16 AM JST
__lt__            
* Mon 02 Feb 2015 10:23:16 AM JST
__le__            
* Mon 02 Feb 2015 10:23:16 AM JST
__init__          
* Mon 02 Feb 2015 10:23:16 AM JST
__hash__          
* Mon 02 Feb 2015 10:23:16 AM JST
__gt__            
* Mon 02 Feb 2015 10:23:16 AM JST
__getattribute__  
* Mon 02 Feb 2015 10:23:16 AM JST
__ge__            
* Mon 02 Feb 2015 10:23:16 AM JST
__format__        
* Mon 02 Feb 2015 10:23:16 AM JST
__eq__            
* Mon 02 Feb 2015 10:23:16 AM JST
__doc__           
* Mon 02 Feb 2015 10:23:16 AM JST
__div__           
* Mon 02 Feb 2015 10:23:16 AM JST
__delattr__       
* Mon 02 Feb 2015 10:23:17 AM JST
__class__         
* Mon 02 Feb 2015 10:23:17 AM JST
__bytes__         
* Mon 02 Feb 2015 10:23:27 AM JST
_str                 
* Mon 02 Feb 2015 10:23:27 AM JST
_root                
* Mon 02 Feb 2015 10:23:27 AM JST
_raw_open            
* Mon 02 Feb 2015 10:23:28 AM JST
_pparts              
* Mon 02 Feb 2015 10:23:28 AM JST
_parts               
* Mon 02 Feb 2015 10:23:28 AM JST
_parse_args          
* Mon 02 Feb 2015 10:23:28 AM JST
_opener              
* Mon 02 Feb 2015 10:23:28 AM JST
_make_child_relpath  
* Mon 02 Feb 2015 10:23:28 AM JST
_make_child          
* Mon 02 Feb 2015 10:23:28 AM JST
_init                
* Mon 02 Feb 2015 10:23:28 AM JST
_hash                
* Mon 02 Feb 2015 10:23:28 AM JST
_from_parts          
* Mon 02 Feb 2015 10:23:28 AM JST
_from_parsed_parts   
* Mon 02 Feb 2015 10:23:28 AM JST
_format_parsed_parts 
* Mon 02 Feb 2015 10:23:28 AM JST
_drv                 
* Mon 02 Feb 2015 10:23:28 AM JST
_cparts              
* Mon 02 Feb 2015 10:23:28 AM JST
_cached_cparts       
* Mon 02 Feb 2015 10:23:28 AM JST
_accessor            
* Mon 02 Feb 2015 10:23:28 AM JST
__subclasshook__     
* Mon 02 Feb 2015 10:23:29 AM JST
__str__              
* Mon 02 Feb 2015 10:23:29 AM JST
__slots__            
* Mon 02 Feb 2015 10:24:59 AM JST
_next_class                       
* Mon 02 Feb 2015 10:24:59 AM JST
_hash                             
* Mon 02 Feb 2015 10:25:00 AM JST
_formatter_parser                 
* Mon 02 Feb 2015 10:25:00 AM JST
_formatter_field_name_split       
* Mon 02 Feb 2015 10:25:00 AM JST
_always_unicode                   
* Mon 02 Feb 2015 10:25:00 AM JST
__weakref__                       
* Mon 02 Feb 2015 10:25:00 AM JST
__truediv__                       
* Mon 02 Feb 2015 10:25:00 AM JST
__subclasshook__                  
* Mon 02 Feb 2015 10:25:00 AM JST
__str__                           
* Mon 02 Feb 2015 10:25:00 AM JST
__sizeof__                        
* Mon 02 Feb 2015 10:25:00 AM JST
__setattr__                       
* Mon 02 Feb 2015 10:25:00 AM JST
__rmul__                          
* Mon 02 Feb 2015 10:25:00 AM JST
__rmod__                          
* Mon 02 Feb 2015 10:25:00 AM JST
__repr__                          
* Mon 02 Feb 2015 10:25:00 AM JST
__reduce_ex__                     
* Mon 02 Feb 2015 10:25:00 AM JST
__reduce__                        
* Mon 02 Feb 2015 10:25:00 AM JST
__radd__                          
* Mon 02 Feb 2015 10:25:00 AM JST
__new__                           
* Mon 02 Feb 2015 10:25:01 AM JST
__ne__                            
* Mon 02 Feb 2015 10:25:01 AM JST
__mul__                           
* Mon 02 Feb 2015 10:25:01 AM JST
__module__                        
* Mon 02 Feb 2015 10:25:01 AM JST
__mod__                           
* Mon 02 Feb 2015 10:25:01 AM JST
__lt__                            
* Mon 02 Feb 2015 10:25:01 AM JST
__len__                           
* Mon 02 Feb 2015 10:25:01 AM JST
__le__                            
* Mon 02 Feb 2015 10:25:01 AM JST
__init__                          
* Mon 02 Feb 2015 10:25:01 AM JST
__hash__                          
* Mon 02 Feb 2015 10:25:01 AM JST
__gt__                            
* Mon 02 Feb 2015 10:25:01 AM JST
__getslice__                      
* Mon 02 Feb 2015 10:25:02 AM JST
__getnewargs__                    
* Mon 02 Feb 2015 10:25:02 AM JST
__getitem__                       
* Mon 02 Feb 2015 10:25:02 AM JST
__getattribute__                  
* Mon 02 Feb 2015 10:25:02 AM JST
__ge__                            
* Mon 02 Feb 2015 10:25:02 AM JST
__format__                        
* Mon 02 Feb 2015 10:25:02 AM JST
__exit__                          
* Mon 02 Feb 2015 10:25:02 AM JST
__eq__                            
* Mon 02 Feb 2015 10:25:02 AM JST
__enter__                         
* Mon 02 Feb 2015 10:25:02 AM JST
__doc__                           
* Mon 02 Feb 2015 10:25:02 AM JST
__div__                           
* Mon 02 Feb 2015 10:25:02 AM JST
__dict__                          
* Mon 02 Feb 2015 10:25:02 AM JST
__delattr__                       
* Mon 02 Feb 2015 10:25:02 AM JST
__contains__                      
* Mon 02 Feb 2015 10:25:03 AM JST
__class__                         
* Mon 02 Feb 2015 10:25:03 AM JST
__add__                           
* Mon 02 Feb 2015 10:25:03 AM JST
_Path__get_owner_windows          
* Mon 02 Feb 2015 10:25:03 AM JST
_Path__get_owner_unix             
* Mon 02 Feb 2015 10:25:03 AM JST
_Path__get_owner_not_implemented  
* Mon 02 Feb 2015 10:25:07 AM JST
abspath
* Mon 02 Feb 2015 10:27:24 AM JST
stat
* Mon 02 Feb 2015 10:27:58 AM JST
  
* Mon 02 Feb 2015 10:32:02 AM JST
process/
* Mon 02 Feb 2015 10:32:02 AM JST
process/_process/
* Mon 02 Feb 2015 10:37:48 AM JST
psutil
* Mon 02 Feb 2015 10:37:56 AM JST
psutil
* Mon 02 Feb 2015 10:38:00 AM JST
get_process_list
* Mon 02 Feb 2015 10:40:08 AM JST
process_iter
* Mon 02 Feb 2015 10:45:29 AM JST
abs
abspath
atime
basename
capitalize
center
count
ctime
decode
dir
dirname
dirs
drive
encode
endswith
exists
expandtabs
expanduser
expandvars
ext
files
find
format
index
isabs
isalnum
isalpha
isdigit
isdir
isfile
islink
islower
ismount
isspace
istitle
isupper
join
joinpath
lexists
list
ljust
lower
lstrip
mtime
name
norm
normcase
normpath
partition
parts
real
realpath
rel
relpath
replace
rfind
rindex
rjust
rpartition
rsplit
rstrip
size
split
splitdrive
splitext
splitlines
splitpath
startswith
strip
swapcase
title
translate
tree
upper
zfill

* Mon 02 Feb 2015 10:47:44 AM JST
expanduser
expandvars
ext
files
find
format
index
isabs
isalnum
isalpha
isdigit
isdir
isfile
islink
islower
ismount
isspace
istitle
isupper

* Mon 02 Feb 2015 10:54:49 AM JST
abs
abspath
atime
basename
capitalize
center
count
ctime
decode
dir
dirname
dirs
drive
encode
endswith
exists
expandtabs
expanduser
expandvars
ext
files
find
format
index
isabs
isalnum
isalpha
isdigit
isdir
isfile
islink
islower
ismount
isspace
istitle
isupper
join
joinpath
lexists
list
ljust
lower
lstrip
mtime
name
norm
normcase
normpath
partition
parts
real
realpath
rel
relpath
replace
rfind
rindex
rjust
rpartition
rsplit
rstrip
size
split
splitdrive
splitext
splitlines
splitpath
startswith
strip
swapcase
title
translate
tree
upper
zfill

* Mon 02 Feb 2015 10:55:17 AM JST
absolute                               
anchor                                 
as_posix                               
as_uri                                 
chmod                                  
cwd                                    
drive                                  
exists                                 
glob                                   
group                                  
is_absolute                            
is_block_device                        
is_char_device                         
is_dir                                 
is_fifo                                
is_file                                
is_reserved                            
is_socket                              
is_symlink                             
iterdir                                
joinpath                               
lchmod                                 
lstat                                 
match           
mkdir           
name        
open        
owner       
parent      
parents     
parts       
relative_to 
rename      
replace     
resolve     
rglob       
rmdir       
root        
stat        
stem        
suffix      
suffixes    
symlink_to  
touch       
unlink      
with_name   
with_suffix 

* Mon 02 Feb 2015 10:57:34 AM JST
__class__         __hash__       __repr__          copy   
__delattr__       __init__       __setattr__       dirpath
__dict__          __module__     __sizeof__        ensure 
__doc__           __ne__         __str__           join   
__eq__            __new__        __subclasshook__  listdir
__format__        __reduce__     __weakref__       read   
__getattribute__  __reduce_ex__  basename          write 

* Mon 02 Feb 2015 10:57:59 AM JST
basename
copy
dirpath
ensure
join
listdir
read
write

* Mon 02 Feb 2015 11:34:07 AM JST
abspath             
access              
atime               
basename            
bytes               
capitalize          
cd                  
center              
chdir               
chmod               
chown               
chroot              
chunks              
copy                
copy2               
copyfile            
copymode            
copystat            
copytree            
count               
ctime               
decode              
dirname             
dirs            
drive         
encode      
endswith    
exists      
expand      
expandtabs  
expanduser  
expandvars  
ext         
files       
find        
fnmatch     
format      
get_owner   
getatime    
getctime    
getcwd      
getmtime    
getsize     
glob        
in_place    
index       
isabs       
isalnum     
isalpha     
swapcase    
namebase     
normcase     
normpath     
open         
owner        
parent       
partition    
pathconf     
read_hash    
read_hexhash 
read_md5     
readlink     
readlinkabs  
realpath     
relpath      
relpathto    
remove       
remove_p     
removedirs   
removedirs_p 
module       
move         
mtime        
name         
symlink      
text         
title        
touch        
translate    
uncshare     
unlink       
unlink_p     
upper        
using_module 
utime        
walk         
walkdirs     
walkfiles    
write_bytes  
write_lines  
write_text   
zfill        
mkdir_p      
statvfs      
strip        
stripext     
stat         
isdecimal  
isdigit    
isdir      
isfile     
islink     
islower    
ismount    
isnumeric  
isspace    
istitle    
isupper    
join       
joinpath   
lines      
link       
listdir    
ljust      
lower      
lstat      
lstrip     
makedirs   
makedirs_p 
mkdir      
rename         
renames        
replace        
rfind          
rindex         
rjust          
rmdir          
rmdir_p        
rmtree         
rmtree_p       
rpartition     
rsplit         
rstrip         
samefile       
size           
split          
splitall       
splitdrive     
splitext       
splitlines     
splitpath      
splitunc       
startswith     

* Mon 02 Feb 2015 12:01:01 PM JST
dirname
* Mon 02 Feb 2015 12:25:24 PM JST
get
* Mon 02 Feb 2015 12:25:25 PM JST
get_owner
* Tue 03 Feb 2015 04:58:02 AM JST
swapcase?
* Tue 03 Feb 2015 04:58:02 AM JST
a.swapcase?
* Tue 03 Feb 2015 05:05:42 AM JST
parent
* Tue 03 Feb 2015 05:10:44 AM JST
_Path__get_owner_not_implemented  access      isdecimal     rename      
_Path__get_owner_unix             atime       isdigit       renames     
_Path__get_owner_windows          basename    isdir         replace     
__add__                           bytes       isfile        rfind       
__class__                         capitalize  islink        rindex      
__contains__                      cd          islower       rjust       
__delattr__                       center      ismount       rmdir       
__dict__                          chdir       isnumeric     rmdir_p     
__div__                           chmod       isspace       rmtree      
__doc__                           chown       istitle       rmtree_p    
__enter__                         chroot      isupper       rpartition  
__eq__                            chunks      join          rsplit      
__exit__                          copy        joinpath      rstrip      
__format__                        copy2       lines         samefile    
__ge__                            copyfile    link          size        
__getattribute__                  copymode    listdir       split       
__getitem__                       copystat    ljust         splitall    
__getnewargs__                    copytree    lower         splitdrive  
__getslice__                      count       lstat         splitext    
__gt__                            ctime       lstrip        splitlines  
__hash__                          decode      makedirs      splitpath   
__init__                          dirname     makedirs_p    splitunc    
__le__                            dirs        mkdir         startswith  
__len__                           drive       mkdir_p       stat        
__lt__                            encode      module        statvfs     
__mod__                           endswith    move          strip       
__module__                        exists      mtime         stripext    
__mul__                           expand      name          swapcase    
__ne__                            expandtabs  namebase      symlink     
__new__                           expanduser  normcase      text        
__radd__                          expandvars  normpath      title       
__reduce__                        ext         open          touch       
__reduce_ex__                     files       owner         translate   
__repr__                          find        parent        unlink      
__rmod__                          fnmatch     partition     unlink_p    
__rmul__                          format      pathconf      upper       
__setattr__                       get_owner   read_hash     using_module
__sizeof__                        getatime    read_hexhash  utime       
__str__                           getctime    read_md5      walk        
__subclasshook__                  getcwd      readlink      walkdirs    
__truediv__                       getmtime    readlinkabs   walkfiles   
__weakref__                       getsize     realpath      write_bytes 
_always_unicode                   glob        relpath       write_lines 
_formatter_field_name_split       in_place    relpathto     write_text  
_formatter_parser                 index       remove        zfill       
_hash                             isabs       remove_p    
_next_class                       isalnum     removedirs  
abspath                           isalpha     removedirs_p[0

* Tue 03 Feb 2015 05:11:13 AM JST
abspath
* Tue 03 Feb 2015 05:11:53 AM JST
isalpha
* Tue 03 Feb 2015 05:12:03 AM JST
p
* Tue 03 Feb 2015 05:12:06 AM JST
removedirs_p
* Tue 03 Feb 2015 05:12:10 AM JST

* Tue 03 Feb 2015 05:12:10 AM JST

* Tue 03 Feb 2015 05:12:10 AM JST
isalpha

* Tue 03 Feb 2015 05:12:21 AM JST

* Tue 03 Feb 2015 05:12:21 AM JST

* Tue 03 Feb 2015 05:12:21 AM JST
removedirs_p
* Tue 03 Feb 2015 05:12:36 AM JST
abspath
access        
atime         
basename      
bytes         
capitalize    
cd            
center        
chdir         
chmod         
chown         
chroot        
chunks        
copy          
copy2         
copyfile      
copymode      
copystat      
copytree      
count         
ctime         
decode        
dirname       
dirs          
drive         
encode        
endswith      
exists        
expand        
expandtabs    
expanduser    
expandvars    
ext           
files         
find          
fnmatch       
format        
get_owner     
getatime      
getctime      
getcwd        
getmtime      
getsize       
glob          
in_place      
index         
isabs       
isalnum     
isalpha
isdecimal                                   
isdigit     
isdir       
isfile      
islink      
islower     
ismount     
isnumeric   
isspace     
istitle     
isupper     
join        
joinpath    
lines       
link        
listdir     
ljust       
lower       
lstat       
lstrip      
makedirs    
makedirs_p  
mkdir       
mkdir_p     
module      
move        
mtime       
name        
namebase    
normcase    
normpath    
open        
owner       
parent      
partition   
pathconf    
read_hash   
read_hexhash
read_md5    
readlink    
readlinkabs 
realpath    
relpath     
relpathto   
remove      
remove_p    
removedirs
removedirs_p
rename       
renames      
replace      
rfind        
rindex       
rjust        
rmdir        
rmdir_p      
rmtree       
rmtree_p     
rpartition   
rsplit       
rstrip       
samefile     
size         
split        
splitall     
splitdrive   
splitext     
splitlines   
splitpath    
splitunc     
startswith   
stat         
statvfs      
strip        
stripext     
swapcase     
symlink      
text         
title        
touch        
translate    
unlink       
unlink_p     
upper        
using_module 
utime        
walk         
walkdirs     
walkfiles    
write_bytes  
write_lines  
write_text   
zfill

* Tue 03 Feb 2015 05:12:42 AM JST
abspath       access        atime         basename      
bytes         capitalize    cd            center        
chdir         chmod         chown         chroot        
chunks        copy          copy2         copyfile      
copymode      copystat      copytree      count         
ctime         decode        dirname       dirs          
drive         encode        endswith      exists        
expand        expandtabs    expanduser    expandvars    
ext           files         find          fnmatch       
format        get_owner     getatime      getctime      
getcwd        getmtime      getsize       glob          
in_place      index         isabs         isalnum       
isalpha       isdecimal     isdigit       isdir         
isfile        islink        islower       ismount       
isnumeric     isspace       istitle       isupper       
join          joinpath      lines         link          
listdir       ljust         lower         lstat         
lstrip        makedirs      makedirs_p    mkdir         
mkdir_p       module        move          mtime         
name          namebase      normcase      normpath      
open          owner         parent        partition     
pathconf      read_hash     read_hexhash  read_md5      
readlink      readlinkabs   realpath      relpath       
relpathto     remove        remove_p      removedirs    
removedirs_p  rename        renames       replace       
rfind         rindex        rjust         rmdir         
rmdir_p       rmtree        rmtree_p      rpartition    
rsplit        rstrip        samefile      size          
split         splitall      splitdrive    splitext      
splitlines    splitpath     splitunc      startswith    
stat          statvfs       strip         stripext      
swapcase      symlink       text          title         
touch         translate     unlink        unlink_p      
upper         using_module  utime         walk          
walkdirs      walkfiles     write_bytes   write_lines   
write_text    zfill

* Tue 03 Feb 2015 06:10:26 AM JST
splitdrive
* Tue 03 Feb 2015 01:14:25 PM JST
www.00jav.com-IPZ-171.avi.torrent
* Tue 03 Feb 2015 01:23:47 PM JST
stem
* Tue 03 Feb 2015 01:46:20 PM JST
anchor
* Tue 03 Feb 2015 01:52:34 PM JST
py')
* Tue 03 Feb 2015 01:52:35 PM JST
with_suffix('.py')
* Tue 03 Feb 2015 02:11:45 PM JST
suffixes
* Tue 03 Feb 2015 02:26:40 PM JST
rmdir?
* Tue 03 Feb 2015 04:18:54 PM JST
cwd
* Wed 04 Feb 2015 07:48:06 AM JST
move
* Wed 04 Feb 2015 07:48:06 AM JST
shutil.move
* Wed 04 Feb 2015 08:08:18 AM JST
type(
* Wed 04 Feb 2015 08:08:34 AM JST
posix.statvfs_result
* Wed 04 Feb 2015 10:26:50 AM JST
pshandler
* Wed 04 Feb 2015 10:27:02 AM JST
ProcessHandlerAbstract
* Wed 04 Feb 2015 10:29:36 AM JST
ProcessHandler
* Wed 04 Feb 2015 10:30:15 AM JST

* Wed 04 Feb 2015 10:30:16 AM JST

* Wed 04 Feb 2015 10:30:16 AM JST
import time

* Wed 04 Feb 2015 10:30:42 AM JST
pshandler
* Wed 04 Feb 2015 10:33:23 AM JST
process
* Wed 04 Feb 2015 10:33:24 AM JST
process
* Wed 04 Feb 2015 10:33:24 AM JST
process
* Wed 04 Feb 2015 10:33:24 AM JST
process
* Wed 04 Feb 2015 10:33:24 AM JST
process
* Wed 04 Feb 2015 10:34:35 AM JST
_process
* Wed 04 Feb 2015 10:35:35 AM JST
_process
* Wed 04 Feb 2015 10:36:25 AM JST

* Wed 04 Feb 2015 10:36:25 AM JST

* Wed 04 Feb 2015 10:36:25 AM JST
from pshandler._func import list_process

* Wed 04 Feb 2015 10:39:31 AM JST
process
* Wed 04 Feb 2015 10:39:37 AM JST
process
* Wed 04 Feb 2015 10:39:59 AM JST

* Wed 04 Feb 2015 10:39:59 AM JST

* Wed 04 Feb 2015 10:40:00 AM JST
# from psutil import process_iter

* Wed 04 Feb 2015 10:40:02 AM JST
process
* Wed 04 Feb 2015 10:41:23 AM JST
process
* Wed 04 Feb 2015 10:41:37 AM JST

* Wed 04 Feb 2015 10:41:37 AM JST

* Wed 04 Feb 2015 10:41:37 AM JST
# --- namedtuples for _pshandler.ProcessHandler methods

* Wed 04 Feb 2015 10:41:56 AM JST
_handler.ProcessHandler
* Wed 04 Feb 2015 01:11:17 PM JST
class PathHandler:
    """Abstract class PathHandler
    """
    # Attributes:
    
    # Operations
    def from_cwd(self):
        """function from_cwd
        
        returns Path
        """
        raise NotImplementedError()
    
    def chmod(self, mode):
        """function chmod
        
        mode: 
        
        returns None
        """
        raise NotImplementedError()
    
    def chown(self, uid, gid):
        """function chown
        
        uid: 
        gid: 
        
        returns None
        """
        raise NotImplementedError()
    
    def copy(self, dst, recusive = False, symlinks = False, ignore = None):
        """function copy
        
        dst: str
        recusive: bool
        symlinks: bool
        ignore: callable
        
        returns None
        """
        raise NotImplementedError()
    
    def copymode(self, dst):
        """function copymode
        
        dst: str
        
        returns None
        """
        raise NotImplementedError()
    
    def copystat(self, dst):
        """function copystat
        
        dst: str
        
        returns None
        """
        raise NotImplementedError()
    
    def exists(self):
        """function exists
        
        returns bool
        """
        raise NotImplementedError()
    
    def expanduser(self):
        """function expanduser
        
        returns Path
        """
        raise NotImplementedError()
    
    def expandvars(self):
        """function expandvars
        
        returns Path
        """
        raise NotImplementedError()
    
    def get_absolute(self):
        """function get_absolute
        
        returns Path
        """
        raise NotImplementedError()
    
    def get_atime(self):
        """function get_atime
        
        returns float
        """
        raise NotImplementedError()
    
    def get_basename(self):
        """function get_basename
        
        returns Path
        """
        raise NotImplementedError()
    
    def get_ctime(self):
        """function get_ctime
        
        returns float
        """
        raise NotImplementedError()
    
    def get_drive(self):
        """function get_drive
        
        returns Path
        """
        raise NotImplementedError()
    
    def get_dirname(self):
        """function get_dirname
        
        returns Path
        """
        raise NotImplementedError()
    
    def get_extension(self):
        """function get_extension
        
        returns str
        """
        raise NotImplementedError()
    
    def get_mtime(self):
        """function get_mtime
        
        returns float
        """
        raise NotImplementedError()
    
    def get_normal(self):
        """function get_normal
        
        returns Path
        """
        raise NotImplementedError()
    
    def get_owner(self):
        """function get_owner
        
        returns str
        """
        raise NotImplementedError()
    
    def get_size(self):
        """function get_size
        
        returns long
        """
        raise NotImplementedError()
    
    def get_stem(self):
        """function get_stem
        
        returns str
        """
        raise NotImplementedError()
    
    def get_real(self):
        """function get_real
        
        returns Path
        """
        raise NotImplementedError()
    
    def get_root(self):
        """function get_root
        
        returns Path
        """
        raise NotImplementedError()
    
    def get_relative(self, start = '.'):
        """function get_relative
        
        start: str
        
        returns Path
        """
        raise NotImplementedError()
    
    def isabsolute(self):
        """function isabsolute
        
        returns bool
        """
        raise NotImplementedError()
    
    def isdir(self):
        """function isdir
        
        returns bool
        """
        raise NotImplementedError()
    
    def isfifo(self):
        """function isfifo
        
        returns bool
        """
        raise NotImplementedError()
    
    def isfile(self):
        """function isfile
        
        returns bool
        """
        raise NotImplementedError()
    
    def ismount(self):
        """function ismount
        
        returns bool
        """
        raise NotImplementedError()
    
    def issymlink(self):
        """function issymlink
        
        returns bool
        """
        raise NotImplementedError()
    
    def join(self, path):
        """function join
        
        path: 
        
        returns Path
        """
        raise NotImplementedError()
    
    def listdir(self, pattern = None):
        """function listdir
        
        pattern: str
        
        returns list
        """
        raise NotImplementedError()
    
    def link(self, path):
        """function link
        
        path: 
        
        returns Path
        """
        raise NotImplementedError()
    
    def mkdir(self, mode, parents = False):
        """function mkdir
        
        mode: 
        parents: bool
        
        returns None
        """
        raise NotImplementedError()
    
    def move(self, dst):
        """function move
        
        dst: str
        
        returns Path
        """
        raise NotImplementedError()
    
    def open(self, mode, buffering):
        """function open
        
        mode: 
        buffering: 
        
        returns file
        """
        raise NotImplementedError()
    
    def conf(self, name):
        """function conf
        
        name: str
        
        returns int
        """
        raise NotImplementedError()
    
    def readlink(self):
        """function readlink
        
        returns Path
        """
        raise NotImplementedError()
    
    def remove(self):
        """function remove
        
        returns None
        """
        raise NotImplementedError()
    
    def rename(self, new, force = False):
        """function rename
        
        new: 
        force: bool
        
        returns 
        """
        raise NotImplementedError()
    
    def replace(self, target):
        """function replace
        
        target: str
        
        returns Path
        """
        raise NotImplementedError()
    
    def samefile(self, other):
        """function samefile
        
        other: str
        
        returns bool
        """
        raise NotImplementedError()
    
    def splitdrive(self):
        """function splitdrive
        
        returns tuple
        """
        raise NotImplementedError()
    
    def splitext(self):
        """function splitext
        
        returns tuple
        """
        raise NotImplementedError()
    
    def touch(self):
        """function touch
        
        returns None
        """
        raise NotImplementedError()
    
    def unlink(self):
        """function unlink
        
        returns None
        """
        raise NotImplementedError()
    
    def walk(self):
        """function walk
        
        returns iterator
        """
        raise NotImplementedError()
    
    def with_name(self, name):
        """function with_name
        
        name: str
        
        returns Path
        """
        raise NotImplementedError()
    
    def with_ext(self, suffix):
        """function with_ext
        
        suffix: 
        
        returns Path
        """
        raise NotImplementedError()
    


* Wed 04 Feb 2015 01:11:45 PM JST
abstractmethod
* Wed 04 Feb 2015 01:12:08 PM JST
@abstractmethod
* Wed 04 Feb 2015 01:12:19 PM JST
    @abstractmethod

* Wed 04 Feb 2015 01:16:18 PM JST
PathHandlerAbstract
* Wed 04 Feb 2015 01:17:21 PM JST
    # Operations
    @abstractmethod
    def from_cwd(self):
        raise NotImplementedError()

    @abstractmethod
    def chmod(self, mode):
        raise NotImplementedError()

    @abstractmethod
    def chown(self, uid, gid):
        raise NotImplementedError()

    @abstractmethod
    def copy(self, dst, recusive=False, symlinks=False, ignore=None):
        raise NotImplementedError()

    @abstractmethod
    def copymode(self, dst):
        raise NotImplementedError()

    @abstractmethod
    def copystat(self, dst):
        raise NotImplementedError()

    @abstractmethod
    def exists(self):
        raise NotImplementedError()

    @abstractmethod
    def expanduser(self):
        raise NotImplementedError()

    @abstractmethod
    def expandvars(self):
        raise NotImplementedError()

    @abstractmethod
    def get_absolute(self):
        raise NotImplementedError()

    @abstractmethod
    def get_atime(self):
        raise NotImplementedError()

    @abstractmethod
    def get_basename(self):
        raise NotImplementedError()

    @abstractmethod
    def get_ctime(self):
        raise NotImplementedError()

    @abstractmethod
    def get_drive(self):
        raise NotImplementedError()

    @abstractmethod
    def get_dirname(self):
        raise NotImplementedError()

    @abstractmethod
    def get_extension(self):
        raise NotImplementedError()

    @abstractmethod
    def get_mtime(self):
        raise NotImplementedError()

    @abstractmethod
    def get_normal(self):
        raise NotImplementedError()

    @abstractmethod
    def get_owner(self):
        raise NotImplementedError()

    @abstractmethod
    def get_size(self):
        raise NotImplementedError()

    @abstractmethod
    def get_stem(self):
        raise NotImplementedError()

    @abstractmethod
    def get_real(self):
        raise NotImplementedError()

    @abstractmethod
    def get_root(self):
        raise NotImplementedError()

    @abstractmethod
    def get_relative(self, start='.'):
        raise NotImplementedError()

    @abstractmethod
    def isabsolute(self):
        raise NotImplementedError()

    @abstractmethod
    def isdir(self):
        raise NotImplementedError()

    @abstractmethod
    def isfifo(self):
        raise NotImplementedError()

    @abstractmethod
    def isfile(self):
        raise NotImplementedError()

    @abstractmethod
    def ismount(self):
        raise NotImplementedError()

    @abstractmethod
    def issymlink(self):
        raise NotImplementedError()

    @abstractmethod
    def join(self, path):
        raise NotImplementedError()

    @abstractmethod
    def listdir(self, pattern=None):
        raise NotImplementedError()

    @abstractmethod
    def link(self, path):
        raise NotImplementedError()

    @abstractmethod
    def mkdir(self, mode, parents=False):
        raise NotImplementedError()

    @abstractmethod
    def move(self, dst):
        raise NotImplementedError()

    @abstractmethod
    def open(self, mode, buffering):
        raise NotImplementedError()

    @abstractmethod
    def conf(self, name):
        raise NotImplementedError()

    @abstractmethod
    def readlink(self):
        raise NotImplementedError()

    @abstractmethod
    def remove(self):
        raise NotImplementedError()

    @abstractmethod
    def rename(self, new, force=False):
        raise NotImplementedError()

    @abstractmethod
    def replace(self, target):
        raise NotImplementedError()

    @abstractmethod
    def samefile(self, other):
        raise NotImplementedError()

    @abstractmethod
    def splitdrive(self):
        raise NotImplementedError()

    @abstractmethod
    def splitext(self):
        raise NotImplementedError()

    @abstractmethod
    def touch(self):
        raise NotImplementedError()

    @abstractmethod
    def unlink(self):
        raise NotImplementedError()

    @abstractmethod
    def walk(self):
        raise NotImplementedError()

    @abstractmethod
    def with_name(self, name):
        raise NotImplementedError()

    @abstractmethod
    def with_ext(self, suffix):
        raise NotImplementedError()

* Wed 04 Feb 2015 01:18:12 PM JST
self
* Wed 04 Feb 2015 01:18:43 PM JST
PathHandler
* Wed 04 Feb 2015 01:28:14 PM JST
pass
* Wed 04 Feb 2015 01:29:21 PM JST
chmod
* Wed 04 Feb 2015 01:43:34 PM JST

* Wed 04 Feb 2015 01:43:34 PM JST

* Wed 04 Feb 2015 01:43:35 PM JST
        cls.testable['chmod'] = ((), {}), None

* Wed 04 Feb 2015 01:46:45 PM JST
self
* Wed 04 Feb 2015 01:49:43 PM JST
0
* Wed 04 Feb 2015 01:49:43 PM JST
0, 0
* Wed 04 Feb 2015 01:50:11 PM JST
cls
* Wed 04 Feb 2015 01:50:57 PM JST
tempfile.gettempdir()
* Wed 04 Feb 2015 01:52:58 PM JST
join
* Wed 04 Feb 2015 01:53:55 PM JST
gettempprefix
* Wed 04 Feb 2015 01:54:32 PM JST
NamedTemporaryFile
* Wed 04 Feb 2015 01:56:21 PM JST
tempfile.gettempdir()
* Wed 04 Feb 2015 01:56:26 PM JST
os.path.join(tempfile.gettempdir(), 'pathhandler_tes.tes')
* Wed 04 Feb 2015 01:58:57 PM JST
get_args
* Wed 04 Feb 2015 02:05:07 PM JST
tempfile.mktemp(suffix='.tes')
* Wed 04 Feb 2015 02:05:46 PM JST

* Wed 04 Feb 2015 02:05:46 PM JST

* Wed 04 Feb 2015 02:05:46 PM JST
        cls.obj.touch()

* Wed 04 Feb 2015 02:05:51 PM JST
tempfile.mktemp(suffix='.tes')
* Wed 04 Feb 2015 02:07:12 PM JST
tempfile.mktemp(suffix='.tes')
* Wed 04 Feb 2015 02:08:16 PM JST
os.O_WRONLY | os.O_CREAT
* Wed 04 Feb 2015 02:08:22 PM JST
0o666
* Wed 04 Feb 2015 02:09:13 PM JST
pass
* Wed 04 Feb 2015 02:10:19 PM JST
            
* Wed 04 Feb 2015 02:10:27 PM JST

* Wed 04 Feb 2015 02:10:27 PM JST

* Wed 04 Feb 2015 02:10:27 PM JST
        self.obj = PathHandler(cl)

* Wed 04 Feb 2015 02:12:09 PM JST
0
* Wed 04 Feb 2015 02:12:10 PM JST
gid=0
* Wed 04 Feb 2015 02:12:10 PM JST
0, gid=0
* Wed 04 Feb 2015 02:12:11 PM JST
uid=0, gid=0
* Wed 04 Feb 2015 02:12:50 PM JST
0o777
* Wed 04 Feb 2015 02:16:38 PM JST
pth
* Wed 04 Feb 2015 02:20:10 PM JST
print(
* Wed 04 Feb 2015 02:27:33 PM JST

* Wed 04 Feb 2015 02:27:49 PM JST
0o777
* Wed 04 Feb 2015 02:27:49 PM JST
mode=0o777
* Wed 04 Feb 2015 02:28:51 PM JST
        
* Wed 04 Feb 2015 02:28:56 PM JST
None
* Wed 04 Feb 2015 02:35:17 PM JST
        
* Wed 04 Feb 2015 02:35:55 PM JST
        
* Wed 04 Feb 2015 02:36:10 PM JST
        fd = os.open(cls.filename, os.O_WRONLY | os.O_CREAT, 0o666)
        os.close(fd)

* Wed 04 Feb 2015 02:36:31 PM JST
        if os.path.exists(cls.filename):
            os.remove(cls.filename)

* Wed 04 Feb 2015 02:36:42 PM JST
self
* Wed 04 Feb 2015 02:36:52 PM JST

* Wed 04 Feb 2015 02:37:12 PM JST

* Wed 04 Feb 2015 02:37:26 PM JST
PathHandler
* Wed 04 Feb 2015 02:37:29 PM JST
PathHandler
* Wed 04 Feb 2015 02:37:34 PM JST
PathHandler
* Wed 04 Feb 2015 02:39:14 PM JST

* Wed 04 Feb 2015 02:39:22 PM JST
bool
* Wed 04 Feb 2015 02:39:35 PM JST
cls.
* Wed 04 Feb 2015 02:39:35 PM JST
cls.        
* Wed 04 Feb 2015 02:39:48 PM JST

* Wed 04 Feb 2015 02:40:04 PM JST
        
* Wed 04 Feb 2015 02:40:11 PM JST
PathHandler
* Wed 04 Feb 2015 02:40:15 PM JST

* Wed 04 Feb 2015 02:40:26 PM JST
float
* Wed 04 Feb 2015 02:40:31 PM JST

* Wed 04 Feb 2015 02:40:41 PM JST
PathHandler
* Wed 04 Feb 2015 02:40:44 PM JST

* Wed 04 Feb 2015 02:40:50 PM JST
float
* Wed 04 Feb 2015 02:40:58 PM JST

* Wed 04 Feb 2015 02:41:02 PM JST
PathHandler
* Wed 04 Feb 2015 02:41:09 PM JST

* Wed 04 Feb 2015 02:41:17 PM JST
str
* Wed 04 Feb 2015 02:41:21 PM JST

* Wed 04 Feb 2015 02:41:22 PM JST
float
* Wed 04 Feb 2015 02:41:47 PM JST
        
* Wed 04 Feb 2015 02:41:52 PM JST
PathHandler
* Wed 04 Feb 2015 02:41:58 PM JST
        
* Wed 04 Feb 2015 02:42:03 PM JST
str
* Wed 04 Feb 2015 02:42:08 PM JST
        
* Wed 04 Feb 2015 02:42:12 PM JST
long
* Wed 04 Feb 2015 02:42:16 PM JST

* Wed 04 Feb 2015 02:42:22 PM JST
str
* Wed 04 Feb 2015 02:42:32 PM JST
        
* Wed 04 Feb 2015 02:42:47 PM JST
        
* Wed 04 Feb 2015 02:43:17 PM JST
        
* Wed 04 Feb 2015 02:51:25 PM JST
cls.filename
* Wed 04 Feb 2015 02:52:04 PM JST
tempfile.mktemp(suffix='.tes')
* Wed 04 Feb 2015 02:55:50 PM JST
file
* Wed 04 Feb 2015 02:56:27 PM JST
tempfile.mktemp()
* Wed 04 Feb 2015 02:56:47 PM JST
cls.tmpdir
* Wed 04 Feb 2015 02:57:47 PM JST
        
* Wed 04 Feb 2015 02:57:59 PM JST
PathHandler
* Wed 04 Feb 2015 02:58:47 PM JST
0o777
* Wed 04 Feb 2015 02:59:18 PM JST

* Wed 04 Feb 2015 02:59:42 PM JST
None
* Wed 04 Feb 2015 03:01:41 PM JST
tempfile.mktemp(suffix='.tes')
* Wed 04 Feb 2015 03:01:47 PM JST
cls.movename
* Wed 04 Feb 2015 03:03:40 PM JST
        
* Wed 04 Feb 2015 03:10:01 PM JST
        
* Wed 04 Feb 2015 03:10:04 PM JST
ocnf
* Wed 04 Feb 2015 03:11:01 PM JST
fil
* Wed 04 Feb 2015 03:13:37 PM JST
'PC_MAX_INPUT'
* Wed 04 Feb 2015 03:14:48 PM JST
    def get_conf(self, name):
        raise NotImplementedError()


* Wed 04 Feb 2015 03:15:59 PM JST

* Wed 04 Feb 2015 03:15:59 PM JST

* Wed 04 Feb 2015 03:15:59 PM JST
    @abstractmethod

* Wed 04 Feb 2015 03:16:07 PM JST
self
* Wed 04 Feb 2015 03:17:26 PM JST
    @classmethod
    def from_cwd(cls):
        return cls(_os.getcwd())


* Wed 04 Feb 2015 03:18:53 PM JST
Abstract class with abstract methods instantiated
* Wed 04 Feb 2015 03:21:31 PM JST
class abstractclassmethod(classmethod):

    __isabstractmethod__ = True

    def __init__(self, callable):
        callable.__isabstractmethod__ = True
        super(abstractclassmethod, self).__init__(callable)
* Wed 04 Feb 2015 03:21:39 PM JST
abstractclassmethod
* Wed 04 Feb 2015 03:27:32 PM JST
abstractclassmethod
* Wed 04 Feb 2015 03:28:04 PM JST

* Wed 04 Feb 2015 03:28:04 PM JST

* Wed 04 Feb 2015 03:28:04 PM JST
    @classmethod

* Wed 04 Feb 2015 03:28:10 PM JST
cls
* Wed 04 Feb 2015 03:29:07 PM JST
from_cwd()
* Wed 04 Feb 2015 03:29:32 PM JST
self
* Wed 04 Feb 2015 03:29:34 PM JST
super(PathHandler, self)(_os.getcwd())
* Wed 04 Feb 2015 03:30:45 PM JST

* Wed 04 Feb 2015 03:30:45 PM JST

* Wed 04 Feb 2015 03:30:45 PM JST
    @abstractmethod

* Wed 04 Feb 2015 03:31:05 PM JST
    @classmethod
    def from_cwd(cls):
        return cls(_os.getcwd())


* Wed 04 Feb 2015 03:31:41 PM JST
_os.getcwd()
* Wed 04 Feb 2015 03:33:26 PM JST
return 
* Wed 04 Feb 2015 03:36:15 PM JST
self
* Wed 04 Feb 2015 03:36:59 PM JST
self
* Wed 04 Feb 2015 03:37:01 PM JST
self
* Wed 04 Feb 2015 03:37:15 PM JST
_os.getcwd()
* Wed 04 Feb 2015 03:38:23 PM JST
    @abstractmethod
    def get_conf(self, name):
        raise NotImplementedError()


* Wed 04 Feb 2015 03:49:39 PM JST
'PC_MAX_INPUT'
* Wed 04 Feb 2015 03:51:19 PM JST
self.
* Wed 04 Feb 2015 03:53:43 PM JST
mktemp
* Wed 04 Feb 2015 03:56:09 PM JST

* Wed 04 Feb 2015 03:56:09 PM JST

* Wed 04 Feb 2015 03:56:09 PM JST
        cls.testable.set('readlink', PathHandler, )

* Wed 04 Feb 2015 04:05:45 PM JST
tempfile.NamedTemporaryFile()
* Wed 04 Feb 2015 04:05:57 PM JST
linkname = tempfile.mktemp()
* Wed 04 Feb 2015 04:06:11 PM JST
linkname = tempfile.mktemp()
* Wed 04 Feb 2015 04:07:02 PM JST

* Wed 04 Feb 2015 04:07:02 PM JST

* Wed 04 Feb 2015 04:07:02 PM JST
        cls.testable.set('remove', None, )

* Wed 04 Feb 2015 04:07:46 PM JST
tmp = tempfile.NamedTemporaryFile()
* Wed 04 Feb 2015 04:09:09 PM JST
self.assertIsNone(ret)
* Wed 04 Feb 2015 04:12:27 PM JST

* Wed 04 Feb 2015 04:12:38 PM JST
file
* Wed 04 Feb 2015 04:12:47 PM JST
mode=
* Wed 04 Feb 2015 04:14:01 PM JST
os.
* Wed 04 Feb 2015 04:14:01 PM JST
rename?os.
* Wed 04 Feb 2015 04:14:43 PM JST

* Wed 04 Feb 2015 04:14:43 PM JST

* Wed 04 Feb 2015 04:14:43 PM JST
        cls.testable.set('replace', PathHandler, new='')

* Wed 04 Feb 2015 04:18:52 PM JST

* Wed 04 Feb 2015 04:18:52 PM JST

* Wed 04 Feb 2015 04:18:52 PM JST
        cls.testable.set('touch', P, )

* Wed 04 Feb 2015 04:19:01 PM JST
self.skipTest()
* Wed 04 Feb 2015 04:19:13 PM JST
tempfile.mktemp()
* Wed 04 Feb 2015 04:22:45 PM JST
tmp = tempfile.mktemp()
* Wed 04 Feb 2015 04:23:00 PM JST
        tmp = tempfile.NamedTemporaryFile()
        linkname = tempfile.mktemp()
        srclink = PathHandler(tmp.name).link(linkname)

* Wed 04 Feb 2015 04:23:05 PM JST

* Wed 04 Feb 2015 04:23:05 PM JST

* Wed 04 Feb 2015 04:23:05 PM JST
        tmp = tempfile.mktemp()

* Wed 04 Feb 2015 04:59:27 PM JST
pass
* Wed 04 Feb 2015 05:00:55 PM JST

* Wed 04 Feb 2015 05:00:55 PM JST

* Wed 04 Feb 2015 05:00:55 PM JST
        cls.tmpdir = tempfile.mktemp()

* Wed 04 Feb 2015 05:01:26 PM JST
pass
* Wed 04 Feb 2015 05:01:36 PM JST
self.
* Wed 04 Feb 2015 05:02:02 PM JST
tempfile.mktemp(suffix='.tes')
* Wed 04 Feb 2015 05:02:12 PM JST
PathHandler(cls.filename1)
* Wed 04 Feb 2015 05:02:16 PM JST
cls
* Wed 04 Feb 2015 05:02:20 PM JST
cls
* Wed 04 Feb 2015 05:02:25 PM JST
pass
* Wed 04 Feb 2015 05:02:29 PM JST
        if os.path.exists(cls.filename1):
            os.remove(cls.filename1)

* Wed 04 Feb 2015 05:02:34 PM JST
cls
* Wed 04 Feb 2015 05:11:33 PM JST
0o777
* Wed 04 Feb 2015 05:11:41 PM JST
self.obj2.chown(mode=0o777)
* Wed 04 Feb 2015 05:12:02 PM JST
self.skipTest('Not Implemented')
* Wed 04 Feb 2015 05:13:12 PM JST
tempfile.mktemp(suffix='.tes')
* Wed 04 Feb 2015 05:13:22 PM JST
tempfile.mktemp(suffix='.tes')
* Wed 04 Feb 2015 05:13:44 PM JST
cls
* Wed 04 Feb 2015 05:15:38 PM JST
cls.filename2 = tempfile.mktemp(suffix='.tes')
* Wed 04 Feb 2015 05:15:46 PM JST
filename2
* Wed 04 Feb 2015 05:15:46 PM JST
cls.filename2
* Wed 04 Feb 2015 05:16:00 PM JST
        fd = os.open(cls.filename2, os.O_WRONLY | os.O_CREAT, 0o666)
        os.close(fd)

* Wed 04 Feb 2015 05:16:08 PM JST
filename2
* Wed 04 Feb 2015 05:16:09 PM JST
cls.filename2
* Wed 04 Feb 2015 05:17:36 PM JST
NamedTemporaryFile
* Wed 04 Feb 2015 05:19:16 PM JST
tempfile.NamedTemporaryFile(suffix='.tes')
* Wed 04 Feb 2015 05:19:54 PM JST
tempfile.NamedTemporaryFile(suffix='.tes')
* Wed 04 Feb 2015 05:20:08 PM JST
tempfile.NamedTemporaryFile(suffix='.tes')
* Wed 04 Feb 2015 05:22:29 PM JST
Y
* Wed 04 Feb 2015 05:22:29 PM JST
Y
* Wed 04 Feb 2015 05:22:29 PM JST
Y        self.skipTest('Not Implemented')

* Wed 04 Feb 2015 05:22:32 PM JST
self.obj1.copymode(self.filename2)
* Wed 04 Feb 2015 05:22:53 PM JST
self.assertIsNone(self.obj1.copymode(self.filename2))
* Wed 04 Feb 2015 05:23:49 PM JST

* Wed 04 Feb 2015 05:23:49 PM JST

* Wed 04 Feb 2015 05:23:49 PM JST
        self.skipTest('Not Implemented')

* Wed 04 Feb 2015 05:24:35 PM JST

* Wed 04 Feb 2015 05:24:35 PM JST

* Wed 04 Feb 2015 05:24:35 PM JST
        self.skipTest('Not Implemented')

* Wed 04 Feb 2015 05:25:31 PM JST

* Wed 04 Feb 2015 05:25:31 PM JST

* Wed 04 Feb 2015 05:25:31 PM JST
        self.skipTest('Not Implemented')

* Wed 04 Feb 2015 05:25:53 PM JST

* Wed 04 Feb 2015 05:25:54 PM JST

* Wed 04 Feb 2015 05:25:54 PM JST
        self.skipTest('Not Implemented')

* Wed 04 Feb 2015 05:26:21 PM JST

* Wed 04 Feb 2015 05:26:22 PM JST

* Wed 04 Feb 2015 05:26:22 PM JST
        self.skipTest('Not Implemented')

* Wed 04 Feb 2015 05:26:42 PM JST
PathHandler
* Wed 04 Feb 2015 05:27:06 PM JST

* Wed 04 Feb 2015 05:27:07 PM JST

* Wed 04 Feb 2015 05:27:07 PM JST
        self.skipTest('Not Implemented')

* Wed 04 Feb 2015 05:27:33 PM JST

* Wed 04 Feb 2015 05:27:33 PM JST

* Wed 04 Feb 2015 05:27:33 PM JST
        self.skipTest('Not Implemented')

* Wed 04 Feb 2015 05:29:20 PM JST
int
* Wed 04 Feb 2015 05:29:24 PM JST

* Wed 04 Feb 2015 05:29:24 PM JST

* Wed 04 Feb 2015 05:29:24 PM JST
        self.skipTest('Not Implemented')

* Wed 04 Feb 2015 05:30:09 PM JST

* Wed 04 Feb 2015 05:30:09 PM JST

* Wed 04 Feb 2015 05:30:09 PM JST
        self.skipTest('Not Implemented')

* Wed 04 Feb 2015 05:30:33 PM JST

* Wed 04 Feb 2015 05:30:33 PM JST

* Wed 04 Feb 2015 05:30:33 PM JST
        self.skipTest('Not Implemented')

* Wed 04 Feb 2015 05:30:39 PM JST
str
* Wed 04 Feb 2015 05:30:59 PM JST
name='PC_MAX_INPUT'
* Wed 04 Feb 2015 05:32:19 PM JST
self.skipTest('Not Implemented')
* Wed 04 Feb 2015 05:36:02 PM JST
bool
* Wed 04 Feb 2015 05:36:50 PM JST
tempfile
* Wed 04 Feb 2015 05:36:51 PM JST
D tempfile
* Wed 04 Feb 2015 05:37:49 PM JST
tempfile.gettempdir()
* Wed 04 Feb 2015 05:38:45 PM JST
obj2
* Wed 04 Feb 2015 05:38:45 PM JST
self.obj2
* Wed 04 Feb 2015 05:38:48 PM JST
bool
* Wed 04 Feb 2015 05:39:27 PM JST
tempfile.mktemp(suffix='.link')
* Wed 04 Feb 2015 05:40:05 PM JST
self.skipTest('Not Implemented')
* Wed 04 Feb 2015 05:40:21 PM JST
PathHandler()
* Wed 04 Feb 2015 05:40:22 PM JST
obj = PathHandler()
* Wed 04 Feb 2015 05:40:25 PM JST
self.
* Wed 04 Feb 2015 05:40:41 PM JST
bool
* Wed 04 Feb 2015 05:40:59 PM JST
self.obj2.link(linkname)
* Wed 04 Feb 2015 05:42:06 PM JST
tempfile.mktemp(suffix='.link')
* Wed 04 Feb 2015 05:42:39 PM JST
self.skipTest('Not Implemented')
* Wed 04 Feb 2015 05:43:10 PM JST
0o777
* Wed 04 Feb 2015 05:43:35 PM JST
dirname)
* Wed 04 Feb 2015 05:43:36 PM JST
PathHandler(dirname)
* Wed 04 Feb 2015 05:44:07 PM JST
tempfile.mkdtemp()
* Wed 04 Feb 2015 05:45:08 PM JST
tempfile.mktemp(suffix='.tes')
* Wed 04 Feb 2015 05:46:10 PM JST

* Wed 04 Feb 2015 05:46:11 PM JST

* Wed 04 Feb 2015 05:46:11 PM JST
        obj = PathHandler(mvname)

* Wed 04 Feb 2015 05:46:13 PM JST
mov
* Wed 04 Feb 2015 05:46:14 PM JST
obj.mov
* Wed 04 Feb 2015 05:46:37 PM JST
cls
* Wed 04 Feb 2015 05:46:42 PM JST

* Wed 04 Feb 2015 05:46:42 PM JST

* Wed 04 Feb 2015 05:46:42 PM JST
        self.skipTest('Not Implemented')

* Wed 04 Feb 2015 05:48:21 PM JST
cls
* Wed 04 Feb 2015 05:48:35 PM JST
PathHandler
* Wed 04 Feb 2015 05:48:50 PM JST
bool
* Wed 04 Feb 2015 05:50:04 PM JST
cls
* Wed 04 Feb 2015 05:50:41 PM JST
bool
* Wed 04 Feb 2015 06:22:13 PM JST
    @classmethod
    def setUpClass(cls):
        cls.tmpfile1 = tempfile.NamedTemporaryFile(suffix='.tes')
        cls.filename1 = cls.tmpfile1.name
        cls.obj1 = PathHandler(cls.filename1)

    def setUp(self):
        self.tmpfile2 = tempfile.NamedTemporaryFile(suffix='.tes')
        self.filename2 = self.tmpfile2.name
        self.obj2 = PathHandler(self.filename2)
        self.mocker.replay()

* Wed 04 Feb 2015 06:22:25 PM JST
    def tearDown(self):
        if os.path.exists(self.filename2):
            os.remove(self.filename2)

    @classmethod
    def tearDownClass(cls, ):
        if os.path.exists(cls.filename1):
            os.remove(cls.filename1)

* Wed 04 Feb 2015 06:22:34 PM JST
MockerTestCase
* Wed 04 Feb 2015 06:22:51 PM JST
MockerTestCase
* Wed 04 Feb 2015 06:32:58 PM JST
py--get-def
* Wed 04 Feb 2015 06:33:23 PM JST
py--get-def
* Wed 04 Feb 2015 06:36:52 PM JST
py:class|def-re
* Wed 04 Feb 2015 06:37:25 PM JST
py--regexp-list
* Wed 04 Feb 2015 06:37:28 PM JST
py:class|def-re
* Wed 04 Feb 2015 06:37:31 PM JST
(py--regexp-list py:class|def-re)
* Wed 04 Feb 2015 06:39:09 PM JST
py:list-method-in-class
* Wed 04 Feb 2015 06:39:26 PM JST
(py:list-method-in-class "PathHandler")
* Wed 04 Feb 2015 06:54:30 PM JST
    def test_from_cwd(self, ):
        self.skipTest('Not Implemented')


* Wed 04 Feb 2015 06:56:05 PM JST
testmethod
* Wed 04 Feb 2015 06:56:06 PM JST
testmethod_template
* Wed 04 Feb 2015 06:56:54 PM JST
(setq testmethod_template "    def test_%s(self, ):\n        self.skipTest('Not Implemented')\n")

* Wed 04 Feb 2015 09:16:03 PM JST
~/.pylib/pathhandler/tests/
* Wed 04 Feb 2015 10:52:11 PM JST
py:region-class--current
* Wed 04 Feb 2015 10:57:22 PM JST
(py:at-beginning-of-class-p)
* Wed 04 Feb 2015 10:57:31 PM JST
(py:in-class-p)
* Wed 04 Feb 2015 10:57:40 PM JST
(or (py:at-beginning-of-class-p) (py:in-class-p))
* Wed 04 Feb 2015 10:59:00 PM JST
py:class-name-re
* Wed 04 Feb 2015 11:03:18 PM JST
(re-search-forward py:class-name-re nil 'noerror)
* Wed 04 Feb 2015 11:03:33 PM JST
(match-beginning match-num)
* Wed 04 Feb 2015 11:03:37 PM JST
num
* Wed 04 Feb 2015 11:03:38 PM JST
match-num
* Wed 04 Feb 2015 11:03:39 PM JST
(match-beginning 0)
* Wed 04 Feb 2015 11:04:12 PM JST
(re-search-forward py:class-name-re nil 'noerror)
* Wed 04 Feb 2015 11:04:59 PM JST
(match-end 0)
* Wed 04 Feb 2015 11:05:05 PM JST
(re-search-forward py:class-name-re nil 'noerror)
* Wed 04 Feb 2015 11:05:14 PM JST
(match-end 0)
* Wed 04 Feb 2015 11:06:16 PM JST
(re-search-forward py:class-name-re nil 'noerror)
* Wed 04 Feb 2015 11:06:20 PM JST
(match-beginning 1)
* Wed 04 Feb 2015 11:06:32 PM JST
(match-end 1)
* Wed 04 Feb 2015 11:06:55 PM JST
(re-search-forward py:class-name-re nil 'noerror)
* Wed 04 Feb 2015 11:07:22 PM JST
(re-search-forward py:class-name-re nil 'noerror)
* Wed 04 Feb 2015 11:07:48 PM JST
(re-search-forward py:class-name-re nil 'noerror)
* Wed 04 Feb 2015 11:08:59 PM JST
(proc 
 (re-search-forward py:class-name-re nil 'noerror)
 (match-beginning 1))
* Wed 04 Feb 2015 11:09:12 PM JST
(progn 
 (re-search-forward py:class-name-re nil 'noerror)
 (match-beginning 1))
* Wed 04 Feb 2015 11:09:26 PM JST
(match-end 1)
* Wed 04 Feb 2015 11:09:31 PM JST
(progn 
 (re-search-forward py:class-name-re nil 'noerror)
 (match-end 1))
* Wed 04 Feb 2015 11:09:50 PM JST
(match-end 1)
* Wed 04 Feb 2015 11:13:22 PM JST
string-)
* Wed 04 Feb 2015 11:14:38 PM JST
(match-string-no-properties 1)
* Wed 04 Feb 2015 11:14:43 PM JST
 (match-beginning 1)
 (match-end 1)

* Wed 04 Feb 2015 11:14:45 PM JST
(progn 
 (re-search-forward py:class-name-re nil 'noerror)
 (match-string-no-properties 1)
 )
* Wed 04 Feb 2015 11:14:59 PM JST
(re-search-forward py:class-name-re nil 'noerror)
* Wed 04 Feb 2015 11:15:36 PM JST
(py:beginning-of-class 1)
* Wed 04 Feb 2015 11:15:52 PM JST
(match-string-no-properties 1)
* Wed 04 Feb 2015 11:16:21 PM JST
(py:in-class-p)
* Wed 04 Feb 2015 11:16:33 PM JST
(py:beginning-of-class 1)
* Wed 04 Feb 2015 11:16:37 PM JST
    
* Wed 04 Feb 2015 11:17:03 PM JST
(py:at-beginning-of-class-p)
* Wed 04 Feb 2015 11:17:36 PM JST
(re-search-forward py:class-name-re nil 'noerror)
    (match-string-no-properties 1)
* Wed 04 Feb 2015 11:17:49 PM JST
    
* Wed 04 Feb 2015 11:18:24 PM JST
py:current-classname
* Wed 04 Feb 2015 11:19:01 PM JST
  
* Wed 04 Feb 2015 11:19:05 PM JST
(defun py:current-classname () ;[2015/02/04]
  ""
  (when (py:in-class-p)
    (py:beginning-of-class 1))
  (when (py:at-beginning-of-class-p)
    (re-search-forward py:class-name-re nil 'noerror)
    (match-string-no-properties 1)))
* Wed 04 Feb 2015 11:22:08 PM JST
py:current-classname
* Wed 04 Feb 2015 11:25:01 PM JST
(dolist (method (py:list-method-in-class ))
  )
* Wed 04 Feb 2015 11:29:26 PM JST
(mapcar (lambda (x) (format testsmethod-template x)) (py:list-method-in-class cls))
* Wed 04 Feb 2015 11:29:36 PM JST
   
* Wed 04 Feb 2015 11:29:49 PM JST
py:list--testsmethod-template
* Wed 04 Feb 2015 11:30:35 PM JST
(defun py:list--testsmethod-template (cls) ;[2015/02/04]
  "CLS"
  (mapcar
   (lambda (x) (format testsmethod-template x))
   (py:list-method-in-class cls))  
  )
* Wed 04 Feb 2015 11:38:38 PM JST
py:text--testsmethod
* Wed 04 Feb 2015 11:42:55 PM JST
x-select-enable-clipboard
* Wed 04 Feb 2015 11:45:22 PM JST
hellox-select-enable-clipboard
* Wed 04 Feb 2015 11:45:38 PM JST
hellox-select-enable-clipboardhello
* Wed 04 Feb 2015 11:45:46 PM JST
kill
* Wed 04 Feb 2015 11:45:47 PM JST
kill-new
* Wed 04 Feb 2015 11:46:00 PM JST
hello
* Wed 04 Feb 2015 11:46:11 PM JST
world
* Wed 04 Feb 2015 11:46:31 PM JST
(s-join "\n" (py:list--testsmethod-template cls))
* Wed 04 Feb 2015 11:47:34 PM JST
py:text--testsmethod
* Wed 04 Feb 2015 11:47:49 PM JST
    def test___init__(self, ):
        self.skipTest('Not Implemented')

    def test_from_cwd(self, ):
        self.skipTest('Not Implemented')

    def test_chmod(self, ):
        self.skipTest('Not Implemented')

    def test_chown(self, ):
        self.skipTest('Not Implemented')

    def test_copy(self, ):
        self.skipTest('Not Implemented')

    def test_copymode(self, ):
        self.skipTest('Not Implemented')

    def test_copystat(self, ):
        self.skipTest('Not Implemented')

    def test_exists(self, ):
        self.skipTest('Not Implemented')

    def test_expanduser(self, ):
        self.skipTest('Not Implemented')

    def test_expandvars(self, ):
        self.skipTest('Not Implemented')

    def test_get_absolute(self, ):
        self.skipTest('Not Implemented')

    def test_get_atime(self, ):
        self.skipTest('Not Implemented')

    def test_get_basename(self, ):
        self.skipTest('Not Implemented')

    def test_get_conf(self, ):
        self.skipTest('Not Implemented')

    def test_get_ctime(self, ):
        self.skipTest('Not Implemented')

    def test_get_drive(self, ):
        self.skipTest('Not Implemented')

    def test_get_dirname(self, ):
        self.skipTest('Not Implemented')

    def test_get_extension(self, ):
        self.skipTest('Not Implemented')

    def test_get_mtime(self, ):
        self.skipTest('Not Implemented')

    def test_get_normal(self, ):
        self.skipTest('Not Implemented')

    def test_get_owner(self, ):
        self.skipTest('Not Implemented')

    def test_get_size(self, ):
        self.skipTest('Not Implemented')

    def test_get_stem(self, ):
        self.skipTest('Not Implemented')

    def test_get_real(self, ):
        self.skipTest('Not Implemented')

    def test_get_root(self, ):
        self.skipTest('Not Implemented')

    def test_get_relative(self, ):
        self.skipTest('Not Implemented')

    def test_isabsolute(self, ):
        self.skipTest('Not Implemented')

    def test_isdir(self, ):
        self.skipTest('Not Implemented')

    def test_isfifo(self, ):
        self.skipTest('Not Implemented')

    def test_isfile(self, ):
        self.skipTest('Not Implemented')

    def test_ismount(self, ):
        self.skipTest('Not Implemented')

    def test_issymlink(self, ):
        self.skipTest('Not Implemented')

    def test_join(self, ):
        self.skipTest('Not Implemented')

    def test_listdir(self, ):
        self.skipTest('Not Implemented')

    def test_link(self, ):
        self.skipTest('Not Implemented')

    def test_mkdir(self, ):
        self.skipTest('Not Implemented')

    def test_move(self, ):
        self.skipTest('Not Implemented')

    def test_open(self, ):
        self.skipTest('Not Implemented')

    def test_readlink(self, ):
        self.skipTest('Not Implemented')

    def test_remove(self, ):
        self.skipTest('Not Implemented')

    def test_rename(self, ):
        self.skipTest('Not Implemented')

    def test_samefile(self, ):
        self.skipTest('Not Implemented')

    def test_splitdrive(self, ):
        self.skipTest('Not Implemented')

    def test_splitext(self, ):
        self.skipTest('Not Implemented')

    def test_touch(self, ):
        self.skipTest('Not Implemented')

    def test_unlink(self, ):
        self.skipTest('Not Implemented')

    def test_walk(self, ):
        self.skipTest('Not Implemented')

    def test_with_name(self, ):
        self.skipTest('Not Implemented')

    def test_with_ext(self, ):
        self.skipTest('Not Implemented')

* Wed 04 Feb 2015 11:54:14 PM JST
py:current-classname
* Wed 04 Feb 2015 11:54:33 PM JST
clsname
* Wed 04 Feb 2015 11:56:56 PM JST
nil
* Thu 05 Feb 2015 12:01:04 AM JST
(read-input "Input class name: ")
* Thu 05 Feb 2015 12:02:03 AM JST
py:text--testsmethod
* Thu 05 Feb 2015 12:02:19 AM JST
py:testsmethod-insert-kill-ring
* Thu 05 Feb 2015 12:02:31 AM JST
    def test___init__(self, ):
        self.skipTest('Not Implemented')

    def test_from_cwd(self, ):
        self.skipTest('Not Implemented')

    def test_chmod(self, ):
        self.skipTest('Not Implemented')

    def test_chown(self, ):
        self.skipTest('Not Implemented')

    def test_copy(self, ):
        self.skipTest('Not Implemented')

    def test_copymode(self, ):
        self.skipTest('Not Implemented')

    def test_copystat(self, ):
        self.skipTest('Not Implemented')

    def test_exists(self, ):
        self.skipTest('Not Implemented')

    def test_expanduser(self, ):
        self.skipTest('Not Implemented')

    def test_expandvars(self, ):
        self.skipTest('Not Implemented')

    def test_get_absolute(self, ):
        self.skipTest('Not Implemented')

    def test_get_atime(self, ):
        self.skipTest('Not Implemented')

    def test_get_basename(self, ):
        self.skipTest('Not Implemented')

    def test_get_conf(self, ):
        self.skipTest('Not Implemented')

    def test_get_ctime(self, ):
        self.skipTest('Not Implemented')

    def test_get_drive(self, ):
        self.skipTest('Not Implemented')

    def test_get_dirname(self, ):
        self.skipTest('Not Implemented')

    def test_get_extension(self, ):
        self.skipTest('Not Implemented')

    def test_get_mtime(self, ):
        self.skipTest('Not Implemented')

    def test_get_normal(self, ):
        self.skipTest('Not Implemented')

    def test_get_owner(self, ):
        self.skipTest('Not Implemented')

    def test_get_size(self, ):
        self.skipTest('Not Implemented')

    def test_get_stem(self, ):
        self.skipTest('Not Implemented')

    def test_get_real(self, ):
        self.skipTest('Not Implemented')

    def test_get_root(self, ):
        self.skipTest('Not Implemented')

    def test_get_relative(self, ):
        self.skipTest('Not Implemented')

    def test_isabsolute(self, ):
        self.skipTest('Not Implemented')

    def test_isdir(self, ):
        self.skipTest('Not Implemented')

    def test_isfifo(self, ):
        self.skipTest('Not Implemented')

    def test_isfile(self, ):
        self.skipTest('Not Implemented')

    def test_ismount(self, ):
        self.skipTest('Not Implemented')

    def test_issymlink(self, ):
        self.skipTest('Not Implemented')

    def test_join(self, ):
        self.skipTest('Not Implemented')

    def test_listdir(self, ):
        self.skipTest('Not Implemented')

    def test_link(self, ):
        self.skipTest('Not Implemented')

    def test_mkdir(self, ):
        self.skipTest('Not Implemented')

    def test_move(self, ):
        self.skipTest('Not Implemented')

    def test_open(self, ):
        self.skipTest('Not Implemented')

    def test_readlink(self, ):
        self.skipTest('Not Implemented')

    def test_remove(self, ):
        self.skipTest('Not Implemented')

    def test_rename(self, ):
        self.skipTest('Not Implemented')

    def test_samefile(self, ):
        self.skipTest('Not Implemented')

    def test_splitdrive(self, ):
        self.skipTest('Not Implemented')

    def test_splitext(self, ):
        self.skipTest('Not Implemented')

    def test_touch(self, ):
        self.skipTest('Not Implemented')

    def test_unlink(self, ):
        self.skipTest('Not Implemented')

    def test_walk(self, ):
        self.skipTest('Not Implemented')

    def test_with_name(self, ):
        self.skipTest('Not Implemented')

    def test_with_ext(self, ):
        self.skipTest('Not Implemented')

* Thu 05 Feb 2015 12:03:04 AM JST
  
* Thu 05 Feb 2015 12:03:07 AM JST
  
* Thu 05 Feb 2015 12:03:09 AM JST
  
* Thu 05 Feb 2015 12:03:15 AM JST
    
* Thu 05 Feb 2015 12:04:36 AM JST
(def)
* Thu 05 Feb 2015 12:05:19 AM JST
    def test___init__(self, ):
        self.skipTest('Not Implemented')

    def test_from_cwd(self, ):
        self.skipTest('Not Implemented')

    def test_chmod(self, ):
        self.skipTest('Not Implemented')

    def test_chown(self, ):
        self.skipTest('Not Implemented')

    def test_copy(self, ):
        self.skipTest('Not Implemented')

    def test_copymode(self, ):
        self.skipTest('Not Implemented')

    def test_copystat(self, ):
        self.skipTest('Not Implemented')

    def test_exists(self, ):
        self.skipTest('Not Implemented')

    def test_expanduser(self, ):
        self.skipTest('Not Implemented')

    def test_expandvars(self, ):
        self.skipTest('Not Implemented')

    def test_get_absolute(self, ):
        self.skipTest('Not Implemented')

    def test_get_atime(self, ):
        self.skipTest('Not Implemented')

    def test_get_basename(self, ):
        self.skipTest('Not Implemented')

    def test_get_conf(self, ):
        self.skipTest('Not Implemented')

    def test_get_ctime(self, ):
        self.skipTest('Not Implemented')

    def test_get_drive(self, ):
        self.skipTest('Not Implemented')

    def test_get_dirname(self, ):
        self.skipTest('Not Implemented')

    def test_get_extension(self, ):
        self.skipTest('Not Implemented')

    def test_get_mtime(self, ):
        self.skipTest('Not Implemented')

    def test_get_normal(self, ):
        self.skipTest('Not Implemented')

    def test_get_owner(self, ):
        self.skipTest('Not Implemented')

    def test_get_size(self, ):
        self.skipTest('Not Implemented')

    def test_get_stem(self, ):
        self.skipTest('Not Implemented')

    def test_get_real(self, ):
        self.skipTest('Not Implemented')

    def test_get_root(self, ):
        self.skipTest('Not Implemented')

    def test_get_relative(self, ):
        self.skipTest('Not Implemented')

    def test_isabsolute(self, ):
        self.skipTest('Not Implemented')

    def test_isdir(self, ):
        self.skipTest('Not Implemented')

    def test_isfifo(self, ):
        self.skipTest('Not Implemented')

    def test_isfile(self, ):
        self.skipTest('Not Implemented')

    def test_ismount(self, ):
        self.skipTest('Not Implemented')

    def test_issymlink(self, ):
        self.skipTest('Not Implemented')

    def test_join(self, ):
        self.skipTest('Not Implemented')

    def test_listdir(self, ):
        self.skipTest('Not Implemented')

    def test_link(self, ):
        self.skipTest('Not Implemented')

    def test_mkdir(self, ):
        self.skipTest('Not Implemented')

    def test_move(self, ):
        self.skipTest('Not Implemented')

    def test_open(self, ):
        self.skipTest('Not Implemented')

    def test_readlink(self, ):
        self.skipTest('Not Implemented')

    def test_remove(self, ):
        self.skipTest('Not Implemented')

    def test_rename(self, ):
        self.skipTest('Not Implemented')

    def test_samefile(self, ):
        self.skipTest('Not Implemented')

    def test_splitdrive(self, ):
        self.skipTest('Not Implemented')

    def test_splitext(self, ):
        self.skipTest('Not Implemented')

    def test_touch(self, ):
        self.skipTest('Not Implemented')

    def test_unlink(self, ):
        self.skipTest('Not Implemented')

    def test_walk(self, ):
        self.skipTest('Not Implemented')

    def test_with_name(self, ):
        self.skipTest('Not Implemented')

    def test_with_ext(self, ):
        self.skipTest('Not Implemented')

* Thu 05 Feb 2015 01:03:40 AM JST
    def test___init__(self, ):
        self.skipTest('Not Implemented')


* Thu 05 Feb 2015 01:05:11 AM JST
assert
* Thu 05 Feb 2015 01:05:11 AM JST
self.assert
* Thu 05 Feb 2015 01:06:03 AM JST
PathHandler('/'
* Thu 05 Feb 2015 01:06:20 AM JST
path = 
* Thu 05 Feb 2015 01:06:21 AM JST
PathHandler(self.obj2)
* Thu 05 Feb 2015 01:17:00 AM JST
expe
* Thu 05 Feb 2015 01:18:29 AM JST
tempfile.TemporaryFile()
* Thu 05 Feb 2015 01:18:59 AM JST
tempfile.TemporaryFile().name
* Thu 05 Feb 2015 07:31:07 AM JST
NamedTemporaryFile
* Thu 05 Feb 2015 07:39:23 AM JST
self.
* Thu 05 Feb 2015 07:39:38 AM JST
chmod
* Thu 05 Feb 2015 07:39:39 AM JST
obj2.chmod
* Thu 05 Feb 2015 07:39:39 AM JST
self.obj2.chmod
* Thu 05 Feb 2015 07:41:04 AM JST
os.chmod(t.name, 
* Thu 05 Feb 2015 07:41:14 AM JST
511
* Thu 05 Feb 2015 07:43:54 AM JST
os.stat(self.filename2).st_mode & 0777
* Thu 05 Feb 2015 07:43:57 AM JST
0o777
* Thu 05 Feb 2015 07:43:59 AM JST

* Thu 05 Feb 2015 07:43:59 AM JST

* Thu 05 Feb 2015 07:43:59 AM JST
         == 

* Thu 05 Feb 2015 07:45:31 AM JST
self
* Thu 05 Feb 2015 07:46:03 AM JST
self.assertEqual(os.stat(self.filename2).st_mode & 0777, 0o777)
* Thu 05 Feb 2015 07:47:23 AM JST
raise NotImplementedError()
* Thu 05 Feb 2015 07:53:02 AM JST
    def get_stat(self, ):
        raise NotImplementedError()

* Thu 05 Feb 2015 07:58:01 AM JST
        
* Thu 05 Feb 2015 07:58:48 AM JST
self.obj2.chown(uid=uid, gid=gid)
* Thu 05 Feb 2015 07:59:02 AM JST
        self.assertEqual(os.stat(self.filename2).st_uid, uid)
        self.assertEqual(os.stat(self.filename2).st_gid, gid)

* Thu 05 Feb 2015 08:00:44 AM JST
    def test_chmod(self, ):
        mod = 0o777
        self.assertIsNone(self.obj2.chmod(mode=mod))
        self.assertEqual(os.stat(self.filename2).st_mode & 0777, mod)
        mod2 = 0o555
        self.obj2.chmod(mode=mod2)
        self.assertEqual(os.stat(self.filename2).st_mode & 0777, mod2)

    def test_chown(self, ):
        uid, gid = 1000, 1000
        self.assertIsNone(self.obj2.chown(uid=uid, gid=gid))
        self.assertEqual(os.stat(self.filename2).st_uid, uid)
        self.assertEqual(os.stat(self.filename2).st_gid, gid)
        uid2, gid2 = 2000, 2000
        self.obj2.chown(uid=uid2, gid=gid2)
        self.assertEqual(os.stat(self.filename2).st_uid, uid2)
        self.assertEqual(os.stat(self.filename2).st_gid, gid2)


* Thu 05 Feb 2015 08:06:43 AM JST
        dst = tempfile.mktemp(suffix='.tes')
        self.assertIsInstance(self.obj2.copy(dst=dst, ), PathHandler)
        if os.path.exists(dst):
            os.remove(dst)

* Thu 05 Feb 2015 08:07:06 AM JST
self.obj2.copy(dst=dst, )
* Thu 05 Feb 2015 08:08:20 AM JST
self.
* Thu 05 Feb 2015 08:09:55 AM JST
obj2.
* Thu 05 Feb 2015 08:09:56 AM JST
self
* Thu 05 Feb 2015 08:13:03 AM JST
sta
* Thu 05 Feb 2015 08:16:53 AM JST
os.stat(t.name)
* Thu 05 Feb 2015 08:17:45 AM JST
self.
* Thu 05 Feb 2015 08:19:13 AM JST

* Thu 05 Feb 2015 08:19:13 AM JST

* Thu 05 Feb 2015 08:19:13 AM JST
        self.skipTest('Not Implemented')

* Thu 05 Feb 2015 08:46:19 AM JST
os.path.expandvars('$HOME')
* Thu 05 Feb 2015 08:54:24 AM JST
path
* Thu 05 Feb 2015 08:56:46 AM JST
self.
* Thu 05 Feb 2015 08:56:52 AM JST
split
* Thu 05 Feb 2015 08:59:33 AM JST
expand
* Thu 05 Feb 2015 08:59:52 AM JST
abspath
* Thu 05 Feb 2015 09:00:07 AM JST
path.
* Thu 05 Feb 2015 09:00:08 AM JST
os.path.
* Thu 05 Feb 2015 09:02:32 AM JST
os.path.abspath(os.path.split(t.name)[1])
* Thu 05 Feb 2015 09:03:18 AM JST
t=tmp.NamedTemporaryFile()
* Thu 05 Feb 2015 09:04:23 AM JST
os.
* Thu 05 Feb 2015 09:04:32 AM JST

* Thu 05 Feb 2015 09:04:32 AM JST

* Thu 05 Feb 2015 09:04:32 AM JST
        self.skipTest('Not Implemented')

* Thu 05 Feb 2015 09:04:50 AM JST
        self.assertEqual(
            os.path.getatime(self.filename2), self.obj2.get_atime())

* Thu 05 Feb 2015 09:05:06 AM JST
        self.assertEqual(
            os.path.getctime(self.filename2), self.obj2.get_ctime())

* Thu 05 Feb 2015 09:07:09 AM JST
'PC_MAX_INPUT'
* Thu 05 Feb 2015 09:07:28 AM JST
path.
* Thu 05 Feb 2015 09:07:39 AM JST
'PC_MAX_INPUT'
* Thu 05 Feb 2015 09:08:01 AM JST

* Thu 05 Feb 2015 09:08:01 AM JST

* Thu 05 Feb 2015 09:08:01 AM JST
        self.skipTest('Not Implemented')

* Thu 05 Feb 2015 09:27:53 AM JST
self.skipTest('Not Implemented')
* Thu 05 Feb 2015 09:28:47 AM JST
self.
* Thu 05 Feb 2015 09:28:49 AM JST
self.assertEqual(expects, got)
* Thu 05 Feb 2015 09:33:39 AM JST
path
* Thu 05 Feb 2015 09:33:40 AM JST
os.path
* Thu 05 Feb 2015 09:33:59 AM JST
get_
* Thu 05 Feb 2015 09:34:29 AM JST
import pwd
* Thu 05 Feb 2015 09:34:56 AM JST
pw_name
* Thu 05 Feb 2015 09:34:56 AM JST
0).pw_name
* Thu 05 Feb 2015 09:34:56 AM JST
getpwuid(0).pw_name
* Thu 05 Feb 2015 09:34:57 AM JST
pwd.getpwuid(0).pw_name
* Thu 05 Feb 2015 09:37:21 AM JST
self.skipTest('Not Implemented')
* Thu 05 Feb 2015 09:37:59 AM JST
self.assertEqual(expects, got)
* Thu 05 Feb 2015 09:38:15 AM JST
owner
* Thu 05 Feb 2015 09:40:30 AM JST
owner
* Thu 05 Feb 2015 09:40:32 AM JST
get_base
* Thu 05 Feb 2015 09:41:06 AM JST
os.path.basename(self.filename2)
* Thu 05 Feb 2015 09:41:21 AM JST
self.skipTest('Not Implemented')
* Thu 05 Feb 2015 09:41:24 AM JST
o
* Thu 05 Feb 2015 09:41:24 AM JST
slfe.o
* Thu 05 Feb 2015 09:44:50 AM JST
gett
* Thu 05 Feb 2015 09:45:18 AM JST
path.
* Thu 05 Feb 2015 09:47:41 AM JST
imprement
* Thu 05 Feb 2015 09:48:30 AM JST
basename()
* Thu 05 Feb 2015 09:48:37 AM JST
stem
* Thu 05 Feb 2015 09:49:01 AM JST
self.skipTest('Not Implemented')
* Thu 05 Feb 2015 09:49:08 AM JST
self.
* Thu 05 Feb 2015 09:49:22 AM JST

* Thu 05 Feb 2015 09:49:22 AM JST

* Thu 05 Feb 2015 09:49:22 AM JST
        expects = '/'

* Thu 05 Feb 2015 09:53:05 AM JST
os.path.relpath(t.name, '.')
* Thu 05 Feb 2015 09:53:12 AM JST
name
* Thu 05 Feb 2015 09:53:12 AM JST
t.name
* Thu 05 Feb 2015 09:53:14 AM JST
slfe.
* Thu 05 Feb 2015 09:54:14 AM JST
self.skipTest('Not Implemented')
* Thu 05 Feb 2015 09:54:42 AM JST
self.skipTest('Not Implemented')
* Thu 05 Feb 2015 09:55:05 AM JST
isdir
* Thu 05 Feb 2015 09:55:06 AM JST
obj2.isdir
* Thu 05 Feb 2015 09:55:07 AM JST
self.obj2.isdir
* Thu 05 Feb 2015 09:55:39 AM JST
tempfile.gettempdir()
* Thu 05 Feb 2015 09:57:21 AM JST
PathHandler
* Thu 05 Feb 2015 09:58:57 AM JST
from stat import S_ISDIR, S_ISLNK, S_ISREG, S_ISSOCK, S_ISBLK, S_ISCHR, S_ISFIFO
* Thu 05 Feb 2015 09:59:01 AM JST
S_ISFIFO
* Thu 05 Feb 2015 10:03:00 AM JST
S_ISFIFO
* Thu 05 Feb 2015 10:07:26 AM JST
name
* Thu 05 Feb 2015 10:07:26 AM JST
t.name
* Thu 05 Feb 2015 10:08:39 AM JST
self.skipTest('Not Implemented')
* Thu 05 Feb 2015 10:08:51 AM JST


* Thu 05 Feb 2015 10:08:54 AM JST
self.skipTest('Not Implemented')
* Thu 05 Feb 2015 10:09:16 AM JST
PathHandler(self.tmpdir).isdir()
* Thu 05 Feb 2015 10:09:19 AM JST
self.assertFalse(PathHandler(self.tmpdir).isdir
* Thu 05 Feb 2015 10:10:12 AM JST
name
* Thu 05 Feb 2015 10:10:20 AM JST
self.skipTest('Not Implemented')
* Thu 05 Feb 2015 10:10:26 AM JST
self
* Thu 05 Feb 2015 10:11:03 AM JST
        tmp = tempfile.mktemp()
        os.link(tmp, self.filename2)
        got = PathHandler(tmp).get_real()
        self.assertEqual(self.obj2, got)
        if os.path.exists(tmp):
            os.unlink(tmp)

* Thu 05 Feb 2015 10:11:21 AM JST
get_real()
* Thu 05 Feb 2015 10:11:23 AM JST
got = 
* Thu 05 Feb 2015 10:11:24 AM JST
PathHandler(tmp)
* Thu 05 Feb 2015 10:14:15 AM JST

* Thu 05 Feb 2015 10:14:15 AM JST

* Thu 05 Feb 2015 10:14:15 AM JST
        self.skipTest('Not Implemented')

* Thu 05 Feb 2015 10:42:18 AM JST
        tmp = tempfile.mktemp()
        os.link(tmp, self.filename2)
        got = PathHandler(tmp).get_real()
        self.assertEqual(self.obj2, got)
        if os.path.exists(tmp):
            os.unlink(tmp)

* Thu 05 Feb 2015 10:42:25 AM JST

* Thu 05 Feb 2015 10:42:25 AM JST

* Thu 05 Feb 2015 10:42:25 AM JST
        self.skipTest('Not Implemented')

* Thu 05 Feb 2015 10:42:50 AM JST
os.link(tmp, self.filename2)
* Thu 05 Feb 2015 10:43:24 AM JST

* Thu 05 Feb 2015 10:43:24 AM JST

* Thu 05 Feb 2015 10:43:24 AM JST
        got = PathHandler(tmp).get_real()

* Thu 05 Feb 2015 10:43:25 AM JST
        got = PathHandler(tmp).get_real()

* Thu 05 Feb 2015 10:43:25 AM JST
        got = PathHandler(tmp).get_real()
        self.assertEqual(self.obj2, got)

* Thu 05 Feb 2015 10:43:57 AM JST
self.skipTest('Not Implemented')
* Thu 05 Feb 2015 10:44:01 AM JST
self.
* Thu 05 Feb 2015 10:44:13 AM JST
path
* Thu 05 Feb 2015 10:44:14 AM JST
os.path
* Thu 05 Feb 2015 10:44:22 AM JST
tmpdir
* Thu 05 Feb 2015 10:44:54 AM JST
        dst = tempfile.mktemp(suffix='.tes')
        self.obj2.copy(dst=dst)
        self.assertTrue(os.path.exists(dst))
        if os.path.exists(dst):
            os.remove(dst)

* Thu 05 Feb 2015 10:49:27 AM JST
self.skipTest('Not Implemented')
* Thu 05 Feb 2015 10:50:19 AM JST
read()
* Thu 05 Feb 2015 10:50:20 AM JST
fobj.read()
* Thu 05 Feb 2015 11:08:21 AM JST
        tmp = tempfile.mktemp()
        os.link(tmp, self.filename2)
        got = PathHandler(tmp).get_real()
        self.assertEqual(self.obj2, got)
        if os.path.exists(tmp):
            os.unlink(tmp)

* Thu 05 Feb 2015 11:08:29 AM JST
get_real
* Thu 05 Feb 2015 11:08:50 AM JST
self.skipTest('Not Implemented')
* Thu 05 Feb 2015 11:09:15 AM JST
apth.
* Thu 05 Feb 2015 11:09:43 AM JST
tmp = tempfile.mktemp()
* Thu 05 Feb 2015 11:09:55 AM JST
self.skipTest('Not Implemented')
* Thu 05 Feb 2015 11:10:10 AM JST
self.assertFalse(os.path.exists(self.filename2))
* Thu 05 Feb 2015 11:10:17 AM JST
self.assertTrue(os.path.exists(self.filename2))
* Thu 05 Feb 2015 11:11:08 AM JST
self.
* Thu 05 Feb 2015 11:11:13 AM JST

* Thu 05 Feb 2015 11:11:13 AM JST

* Thu 05 Feb 2015 11:11:13 AM JST
        self.skipTest('Not Implemented')

* Thu 05 Feb 2015 11:12:00 AM JST
apth.
* Thu 05 Feb 2015 11:12:23 AM JST

* Thu 05 Feb 2015 11:12:23 AM JST

* Thu 05 Feb 2015 11:12:23 AM JST
        self.skipTest('Not Implemented')

* Thu 05 Feb 2015 11:12:55 AM JST

* Thu 05 Feb 2015 11:12:55 AM JST

* Thu 05 Feb 2015 11:12:55 AM JST
        self.skipTest('Not Implemented')

* Thu 05 Feb 2015 11:13:04 AM JST
tmp = tempfile.mktemp()
* Thu 05 Feb 2015 11:13:57 AM JST
apth
* Thu 05 Feb 2015 11:14:08 AM JST
        if os.path.exists(dst):
            os.remove(dst)

* Thu 05 Feb 2015 11:14:13 AM JST
dst
* Thu 05 Feb 2015 11:14:16 AM JST
dst
* Thu 05 Feb 2015 11:14:29 AM JST
        if os.path.exists(rename):
            os.remove(rename)

* Thu 05 Feb 2015 11:14:32 AM JST
rename
* Thu 05 Feb 2015 11:14:34 AM JST
rename
* Thu 05 Feb 2015 11:14:46 AM JST
        tmp = tempfile.mktemp()
        self.obj2.link(tmp)
        self.assertTrue(os.path.islink(tmp))

* Thu 05 Feb 2015 11:14:48 AM JST
        tmp = tempfile.mktemp()
        self.obj2.link(tmp)
        self.assertTrue(os.path.islink(tmp))
        if os.path.exists(tmp):
            os.unlink(tmp)

* Thu 05 Feb 2015 11:15:02 AM JST
self.
* Thu 05 Feb 2015 11:15:36 AM JST
PathHandler(tmp)
* Thu 05 Feb 2015 11:21:02 AM JST
self.skipTest('Not Implemented')
* Thu 05 Feb 2015 11:22:22 AM JST
self.skipTest('Not Implemented')
* Thu 05 Feb 2015 11:23:07 AM JST
self.assertEqual(expects, got)
* Thu 05 Feb 2015 12:05:41 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:06:04 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:06:28 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:06:40 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:06:51 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:07:06 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:07:23 PM JST
self._path.join(path)
* Thu 05 Feb 2015 12:07:43 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:08:27 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:08:54 PM JST
path
* Thu 05 Feb 2015 12:09:11 PM JST
path
* Thu 05 Feb 2015 12:09:20 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:09:36 PM JST
return 
* Thu 05 Feb 2015 12:09:53 PM JST
fi 
* Thu 05 Feb 2015 12:10:26 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:11:02 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:11:38 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:12:07 PM JST
remove
* Thu 05 Feb 2015 12:12:32 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:12:36 PM JST
self.
* Thu 05 Feb 2015 12:13:01 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:13:04 PM JST
new
* Thu 05 Feb 2015 12:13:24 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:13:27 PM JST
_apth
* Thu 05 Feb 2015 12:13:37 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:13:38 PM JST
sel
* Thu 05 Feb 2015 12:13:44 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:13:52 PM JST
return 
* Thu 05 Feb 2015 12:13:54 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:14:25 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:14:50 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:16:44 PM JST
self._path.copy2(str(str))
* Thu 05 Feb 2015 12:17:35 PM JST
self
* Thu 05 Feb 2015 12:18:21 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:18:42 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:18:52 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:18:53 PM JST
self
* Thu 05 Feb 2015 12:19:02 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:19:24 PM JST
return PathHandler(str(self._path.expanduser()))
* Thu 05 Feb 2015 12:19:31 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:19:59 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:20:10 PM JST
return self._path.getatime()
* Thu 05 Feb 2015 12:20:16 PM JST
return self._path.getctime()
* Thu 05 Feb 2015 12:20:34 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:21:09 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:21:32 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:21:35 PM JST
self.
* Thu 05 Feb 2015 12:22:10 PM JST
basename()
* Thu 05 Feb 2015 12:22:19 PM JST
return PathHandler(str(self._path.drive))
* Thu 05 Feb 2015 12:22:22 PM JST
drive
* Thu 05 Feb 2015 12:22:41 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:22:45 PM JST
PathHandler(str(self._path.dirname()))
* Thu 05 Feb 2015 12:22:49 PM JST
dirname()
* Thu 05 Feb 2015 12:23:05 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:23:31 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:23:53 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:24:24 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:24:56 PM JST
self._path
* Thu 05 Feb 2015 12:25:14 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:25:47 PM JST
stem
* Thu 05 Feb 2015 12:25:50 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:26:33 PM JST
.root
* Thu 05 Feb 2015 12:26:37 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:27:18 PM JST
_pathlib.Path(str(self._path)).root
* Thu 05 Feb 2015 12:27:25 PM JST
root
* Thu 05 Feb 2015 12:27:36 PM JST
buffering
* Thu 05 Feb 2015 12:27:36 PM JST
mode, buffering
* Thu 05 Feb 2015 12:27:41 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:29:02 PM JST
PathHandler(str(_pathlib.Path(str(self._path)).root))
* Thu 05 Feb 2015 12:29:17 PM JST
root
* Thu 05 Feb 2015 12:29:29 PM JST
return PathHandler(str(_pathlib.Path(str(self._path)).with_name(name)))
* Thu 05 Feb 2015 12:29:37 PM JST
name
* Thu 05 Feb 2015 12:29:39 PM JST
fuss
* Thu 05 Feb 2015 12:30:04 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 12:30:20 PM JST
open?
* Thu 05 Feb 2015 01:28:35 PM JST
shutil.copy2
* Thu 05 Feb 2015 01:30:29 PM JST

* Thu 05 Feb 2015 01:30:29 PM JST

* Thu 05 Feb 2015 01:30:29 PM JST
        if self.isfile():

* Thu 05 Feb 2015 01:30:43 PM JST

* Thu 05 Feb 2015 01:30:43 PM JST

* Thu 05 Feb 2015 01:30:43 PM JST
        # TODO: (Atami) [2015/02/05]

* Thu 05 Feb 2015 01:30:51 PM JST
str
* Thu 05 Feb 2015 01:31:51 PM JST
raise NotImplementedError()
* Thu 05 Feb 2015 01:36:30 PM JST
dst
* Thu 05 Feb 2015 01:36:44 PM JST
PathHandler(self.tmpdir)copytree(dst)
* Thu 05 Feb 2015 01:37:00 PM JST
self.tmpdir
* Thu 05 Feb 2015 01:37:12 PM JST
PathHandler(src)copytree(self.tmpdir)
* Thu 05 Feb 2015 01:42:36 PM JST
cond = 
* Thu 05 Feb 2015 01:42:48 PM JST
proeprty
* Thu 05 Feb 2015 01:43:34 PM JST
proeprty
* Thu 05 Feb 2015 01:43:55 PM JST
proerpty
* Thu 05 Feb 2015 01:44:30 PM JST
proeprty
* Thu 05 Feb 2015 01:44:39 PM JST
proeprty
* Thu 05 Feb 2015 01:45:27 PM JST
name
* Thu 05 Feb 2015 01:45:28 PM JST
t.name
* Thu 05 Feb 2015 01:45:44 PM JST
p=PathHandler(tempfile.mk)
* Thu 05 Feb 2015 01:45:59 PM JST
t=tmp.NamedTemporaryFile()
* Thu 05 Feb 2015 01:46:12 PM JST
from pathhandler import PathHandler
* Thu 05 Feb 2015 01:46:27 PM JST
PathHandler(t.name)
* Thu 05 Feb 2015 01:46:28 PM JST
p=PathHandler(t.name)
* Thu 05 Feb 2015 01:46:36 PM JST
import tempfile as tmp
from pathhandler import PathHandler

* Thu 05 Feb 2015 01:46:40 PM JST
t=tmp.NamedTemporaryFile()
* Thu 05 Feb 2015 01:46:43 PM JST
p=PathHandler(t.name)
* Thu 05 Feb 2015 01:46:58 PM JST

* Thu 05 Feb 2015 01:46:58 PM JST

* Thu 05 Feb 2015 01:46:58 PM JST
    conf = property(get_conf)

* Thu 05 Feb 2015 01:47:14 PM JST
import tempfile as tmp
from pathhandler import PathHandler
t=tmp.NamedTemporaryFile()

* Thu 05 Feb 2015 01:47:17 PM JST
p=PathHandler(t.name)
* Thu 05 Feb 2015 01:51:47 PM JST
_path
* Thu 05 Feb 2015 01:52:21 PM JST
from pathhandler import PathHandler
* Thu 05 Feb 2015 01:52:42 PM JST
import tempfile as tmp
from pathhandler import PathHandler
t=tmp.NamedTemporaryFile()

* Thu 05 Feb 2015 01:52:44 PM JST
p=PathHandler(t.name)
* Thu 05 Feb 2015 02:23:54 PM JST
(defun e2wm:def-plugin-files (frame wm winfo)
  (let* ((buf (e2wm:history-get-main-buffer))
         (wname (wlf:window-name winfo))
         (opts (wlf:window-option-get winfo :plugin-args))
         (opt-sort-key (or (plist-get opts ':sort) 'name))
         (opt-hide-hidden (not (plist-get opts ':show-hidden)))
         (dir (with-current-buffer buf 
                (or default-directory ".")))
         (buf-name (format " *WM:Files-%s*" wname))
         (dbuf (get-buffer buf-name)) pos)
    (unless (and dbuf (buffer-live-p dbuf))
      (setq dbuf (get-buffer-create buf-name))
      (with-current-buffer dbuf
        (e2wm:def-plugin-files-mode)
        (set (make-local-variable 'e2wm:def-plugin-files-dir) dir)
        (set (make-local-variable 'e2wm:def-plugin-files-sort-key) opt-sort-key)
        (set (make-local-variable 'e2wm:def-plugin-files-hide-hidden-files) opt-hide-hidden)
        (setq buffer-read-only t)
        (buffer-disable-undo dbuf)
        (setq pos (point-min))
        (hl-line-mode 1)))
    (with-current-buffer dbuf
      (unwind-protect
          (progn
            (setq buffer-read-only nil)
            (setq pos 
                  (if (and e2wm:def-plugin-files-dir
                           (equal e2wm:def-plugin-files-dir dir))
                      (point) (point-min)))
            (setq e2wm:def-plugin-files-dir dir)
            (erase-buffer)
            (e2wm:def-plugin-files-update-buffer dir)
            (goto-char pos))
        (setq buffer-read-only t)))
    (wlf:set-buffer wm wname dbuf)))
* Thu 05 Feb 2015 02:26:20 PM JST
wlf:get-buffer
* Thu 05 Feb 2015 02:26:59 PM JST
(e2wm:pst-get-wm)
* Thu 05 Feb 2015 02:27:09 PM JST
(wlf:get-buffer (e2wm:pst-get-wm) 'main)
* Thu 05 Feb 2015 02:27:40 PM JST
(wlf:get-buffer (e2wm:pst-get-wm) 'main)
* Thu 05 Feb 2015 02:28:21 PM JST
(defun e2wm:def-plugin-files (frame wm winfo)
  (let* ((buf (wlf:get-buffer (e2wm:pst-get-wm) 'main))
         (wname (wlf:window-name winfo))
         (opts (wlf:window-option-get winfo :plugin-args))
         (opt-sort-key (or (plist-get opts ':sort) 'name))
         (opt-hide-hidden (not (plist-get opts ':show-hidden)))
         (dir (with-current-buffer buf 
                (or default-directory ".")))
         (buf-name (format " *WM:Files-%s*" wname))
         (dbuf (get-buffer buf-name)) pos)
    (unless (and dbuf (buffer-live-p dbuf))
      (setq dbuf (get-buffer-create buf-name))
      (with-current-buffer dbuf
        (e2wm:def-plugin-files-mode)
        (set (make-local-variable 'e2wm:def-plugin-files-dir) dir)
        (set (make-local-variable 'e2wm:def-plugin-files-sort-key) opt-sort-key)
        (set (make-local-variable 'e2wm:def-plugin-files-hide-hidden-files) opt-hide-hidden)
        (setq buffer-read-only t)
        (buffer-disable-undo dbuf)
        (setq pos (point-min))
        (hl-line-mode 1)))
    (with-current-buffer dbuf
      (unwind-protect
          (progn
            (setq buffer-read-only nil)
            (setq pos 
                  (if (and e2wm:def-plugin-files-dir
                           (equal e2wm:def-plugin-files-dir dir))
                      (point) (point-min)))
            (setq e2wm:def-plugin-files-dir dir)
            (erase-buffer)
            (e2wm:def-plugin-files-update-buffer dir)
            (goto-char pos))
        (setq buffer-read-only t)))
    (wlf:set-buffer wm wname dbuf)))
* Thu 05 Feb 2015 02:38:28 PM JST
other
* Thu 05 Feb 2015 02:38:40 PM JST
other) == 
* Thu 05 Feb 2015 02:38:40 PM JST
str(other) == 
* Thu 05 Feb 2015 02:38:52 PM JST
self)
* Thu 05 Feb 2015 02:38:52 PM JST
str(self)
* Thu 05 Feb 2015 02:38:59 PM JST
other
* Thu 05 Feb 2015 02:39:10 PM JST
_path
* Thu 05 Feb 2015 03:11:34 PM JST
_
* Thu 05 Feb 2015 03:11:35 PM JST
self
* Thu 05 Feb 2015 03:49:55 PM JST

* Thu 05 Feb 2015 03:49:55 PM JST

* Thu 05 Feb 2015 03:49:55 PM JST
        self.test_chmod() # change mod

* Thu 05 Feb 2015 03:53:09 PM JST
        self.assertEqual(
            os.stat(self.filename1).st_mode, os.stat(self.filename2).st_mode)

* Thu 05 Feb 2015 03:53:15 PM JST
st_mode
* Thu 05 Feb 2015 03:53:21 PM JST
st_mode
* Thu 05 Feb 2015 03:53:33 PM JST
        self.assertEqual(
            os.stat(self.filename1).st_dev, os.stat(self.filename2).st_dev)

* Thu 05 Feb 2015 03:53:51 PM JST
        self.assertEqual(
            os.stat(self.filename1).st_nlink, os.stat(self.filename2).st_nlink)

* Thu 05 Feb 2015 03:54:09 PM JST
        self.assertEqual(
            os.stat(self.filename1).st_uid, os.stat(self.filename2).st_uid)

* Thu 05 Feb 2015 03:54:19 PM JST
        self.assertEqual(
            os.stat(self.filename1).st_gid, os.stat(self.filename2).st_gid)

* Thu 05 Feb 2015 03:57:38 PM JST
self.filename2
* Thu 05 Feb 2015 03:57:41 PM JST
apth
* Thu 05 Feb 2015 03:57:52 PM JST
self.filename2
* Thu 05 Feb 2015 03:58:09 PM JST
splitext(
* Thu 05 Feb 2015 03:58:10 PM JST
path.splitext(
* Thu 05 Feb 2015 03:58:10 PM JST
os.path.splitext(
* Thu 05 Feb 2015 03:59:00 PM JST
self.filename2
* Thu 05 Feb 2015 03:59:31 PM JST
tmp, 
* Thu 05 Feb 2015 04:00:38 PM JST
tmpdir
* Thu 05 Feb 2015 04:03:09 PM JST
tmp, 
* Thu 05 Feb 2015 04:06:12 PM JST
        
* Thu 05 Feb 2015 04:06:14 PM JST
src
* Thu 05 Feb 2015 04:06:39 PM JST
src
* Thu 05 Feb 2015 04:06:58 PM JST
tmpdir
* Thu 05 Feb 2015 04:06:59 PM JST
self.tmpdir
* Thu 05 Feb 2015 04:08:45 PM JST
PathHandler(
* Thu 05 Feb 2015 04:11:01 PM JST
name
* Thu 05 Feb 2015 04:21:17 PM JST
os.path.join(str(self._path), str(path))
* Thu 05 Feb 2015 04:23:59 PM JST
str(self._path.readlink())
* Thu 05 Feb 2015 04:24:05 PM JST
path
* Thu 05 Feb 2015 04:24:11 PM JST
str(self._path.readlink())
* Thu 05 Feb 2015 04:24:13 PM JST
readlink()
* Thu 05 Feb 2015 04:27:14 PM JST
*args, **kwargs
* Thu 05 Feb 2015 04:29:25 PM JST
readlink
* Thu 05 Feb 2015 04:29:43 PM JST
path.
* Thu 05 Feb 2015 04:31:30 PM JST

* Thu 05 Feb 2015 04:31:30 PM JST

* Thu 05 Feb 2015 04:31:30 PM JST
        sleep(0.5)

* Thu 05 Feb 2015 04:34:33 PM JST
tmpdir = tempfile.mktemp()
* Thu 05 Feb 2015 04:34:53 PM JST
0o555
* Thu 05 Feb 2015 04:35:13 PM JST
0o555, parents=True
* Thu 05 Feb 2015 04:36:05 PM JST
self.assertTrue(os.path.isdir(tmpdir))
* Thu 05 Feb 2015 04:36:21 PM JST
        if os.path.exists(tmpdir):
            os.rmdir(tmpdir)

* Thu 05 Feb 2015 04:38:00 PM JST
mkdir_p
* Thu 05 Feb 2015 04:38:18 PM JST
makedirs
* Thu 05 Feb 2015 04:40:40 PM JST
tuple
* Thu 05 Feb 2015 04:42:17 PM JST
stat
* Thu 05 Feb 2015 04:42:18 PM JST
os.stat
* Thu 05 Feb 2015 04:42:36 PM JST
stat_result
* Thu 05 Feb 2015 04:47:03 PM JST

* Thu 05 Feb 2015 04:47:03 PM JST

* Thu 05 Feb 2015 04:47:03 PM JST
from time import sleep

* Thu 05 Feb 2015 05:05:50 PM JST
Change the access permissions of a file.
* Thu 05 Feb 2015 05:08:23 PM JST
@Return: PathHandler
* Thu 05 Feb 2015 05:12:35 PM JST
posix.stat_result
* Thu 05 Feb 2015 05:13:51 PM JST


        @Return: bool

* Thu 05 Feb 2015 09:07:53 PM JST
_process
* Thu 05 Feb 2015 11:52:56 PM JST

* Thu 05 Feb 2015 11:52:56 PM JST

* Thu 05 Feb 2015 11:52:56 PM JST
from path import Path

* Thu 05 Feb 2015 11:53:05 PM JST
expand
* Thu 05 Feb 2015 11:53:55 PM JST
PathHandler
* Thu 05 Feb 2015 11:55:29 PM JST

* Thu 05 Feb 2015 11:55:29 PM JST

* Thu 05 Feb 2015 11:55:29 PM JST
# from path import Path

* Thu 05 Feb 2015 11:56:10 PM JST
import tempfile as tmp
from pathhandler import PathHandler
t=tmp.NamedTemporaryFile(suffix='.ts')
p=PathHandler(t.name)

* Fri 06 Feb 2015 12:03:17 AM JST
PathHandler(filepath).open('rb')
* Fri 06 Feb 2015 12:05:15 AM JST
from pathhandler import PathHandler
* Fri 06 Feb 2015 12:06:31 AM JST
from pathhandler import PathHandler
* Fri 06 Feb 2015 12:07:03 AM JST
from pathhandler import PathHandler
* Fri 06 Feb 2015 12:08:11 AM JST
from pathhandler import PathHandler
* Fri 06 Feb 2015 12:09:01 AM JST
from pathhandler import PathHandler
* Fri 06 Feb 2015 12:10:04 AM JST
get_extension
* Fri 06 Feb 2015 12:10:32 AM JST
from pathhandler import PathHandler
* Fri 06 Feb 2015 12:15:05 AM JST
name
* Fri 06 Feb 2015 12:16:20 AM JST
name
* Fri 06 Feb 2015 12:16:22 AM JST
base
* Fri 06 Feb 2015 12:17:30 AM JST
from pathhandler import PathHandler
* Fri 06 Feb 2015 12:17:50 AM JST
namebase
* Fri 06 Feb 2015 12:18:13 AM JST
from pathhandler import PathHandler
* Fri 06 Feb 2015 12:19:56 AM JST
from pathhandler import PathHandler
* Fri 06 Feb 2015 12:21:04 AM JST
from pathhandler import PathHandler
* Fri 06 Feb 2015 12:21:24 AM JST
LOGPATH
* Fri 06 Feb 2015 12:26:42 AM JST
from pathhandler import PathHandler
* Fri 06 Feb 2015 12:27:23 AM JST
from pathhandler import PathHandler
* Fri 06 Feb 2015 12:27:42 AM JST
path
* Fri 06 Feb 2015 12:30:52 AM JST
from calendar import (MONDAY, TUESDAY, WEDNESDAY, THURSDAY,
                      FRIDAY, SATURDAY, SUNDAY)

* Fri 06 Feb 2015 12:31:36 AM JST
THURSDAY
* Fri 06 Feb 2015 12:31:46 AM JST
FRIDAY
* Fri 06 Feb 2015 12:31:57 AM JST
SATURDAY
* Fri 06 Feb 2015 12:32:09 AM JST
SUNDAY
* Fri 06 Feb 2015 12:34:34 AM JST
return '月火水木金土日'[self.value]
* Fri 06 Feb 2015 12:34:49 AM JST
    @property
    def shortname(self):
        return self.name[:3]

    @classmethod
    def from_date(cls, d):
        return cls(d.weekday())

* Fri 06 Feb 2015 12:34:59 AM JST
from datetime import date
* Fri 06 Feb 2015 12:35:42 AM JST
'月火水木金土日'[self.value]
* Fri 06 Feb 2015 12:35:46 AM JST
value
* Fri 06 Feb 2015 12:35:47 AM JST
self.value
* Fri 06 Feb 2015 12:37:00 AM JST

* Fri 06 Feb 2015 12:37:00 AM JST

* Fri 06 Feb 2015 12:37:00 AM JST
from datetime import date

* Fri 06 Feb 2015 12:37:08 AM JST
from calendar import (MONDAY, TUESDAY, WEDNESDAY, THURSDAY,
                      FRIDAY, SATURDAY, SUNDAY)


import enum


class WeekDay(enum.IntEnum):
    r"""WeekDay

    WeekDay is a enum.Enum.
    Responsibility:
    """
    Monday = MONDAY
    Tuesday = TUESDAY
    Wednesday = WEDNESDAY
    Thursday = THURSDAY
    Friday = FRIDAY
    Saturday = SATURDAY
    Sunday = SUNDAY

    def weekday(self, ):
        r"""SUMMARY

        weekday()

        @Return:

        @Error:
        """
        return self.value

    def iso_weekday(self, ):
        r"""SUMMARY

        iso_weekday()

        @Return:

        @Error:
        """
        return self.value + 1

    def to_japanese(self, ):
        r"""SUMMARY

        to_japanese()

        @Return:

        @Error:
        """
        return u'月火水木金土日'[self.value]

    @property
    def shortname(self):
        return self.name[:3]

    @classmethod
    def from_date(cls, d):
        return cls(d.weekday())

* Fri 06 Feb 2015 12:38:00 AM JST

* Fri 06 Feb 2015 12:38:00 AM JST

* Fri 06 Feb 2015 12:38:00 AM JST
import enum

* Fri 06 Feb 2015 12:38:25 AM JST
enum.
* Fri 06 Feb 2015 12:39:36 AM JST
D hashlib.new('md5')
* Fri 06 Feb 2015 12:47:26 AM JST
dateutil
* Fri 06 Feb 2015 12:55:23 AM JST
recipe
* Fri 06 Feb 2015 11:23:37 AM JST
title
* Fri 06 Feb 2015 11:23:39 AM JST
52428822
* Fri 06 Feb 2015 11:23:47 AM JST
emacs=52428822
* Fri 06 Feb 2015 11:24:07 AM JST
title
* Fri 06 Feb 2015 11:24:09 AM JST
41943044
* Fri 06 Feb 2015 03:19:47 PM JST
KeyPress()
* Fri 06 Feb 2015 03:20:10 PM JST
KeyPressMask
* Fri 06 Feb 2015 03:25:43 PM JST
from Xlib import X
* Fri 06 Feb 2015 03:26:21 PM JST
52428822
* Fri 06 Feb 2015 03:27:53 PM JST
KeyPress
* Fri 06 Feb 2015 03:27:58 PM JST
event
* Fri 06 Feb 2015 03:28:44 PM JST
X
* Fri 06 Feb 2015 03:30:07 PM JST
52428822
* Fri 06 Feb 2015 03:33:07 PM JST
SendEvent(display=d.display,onerror=None,propagate=0,destination=52428822,event_mask=X.KeyPressMask, event=k)
* Fri 06 Feb 2015 03:33:17 PM JST
d=display.Display()
* Fri 06 Feb 2015 03:33:22 PM JST
from Xlib import display
* Fri 06 Feb 2015 03:33:26 PM JST
from Xlib.protocol.request import SendEvent
* Fri 06 Feb 2015 03:33:43 PM JST
from Xlib.protocol.event import KeyPress
* Fri 06 Feb 2015 03:33:51 PM JST
from Xlib import X
* Fri 06 Feb 2015 03:34:11 PM JST
k=KeyPress(detail=38, sequence_number=0, time=0, root=482, window=52428822, child=0, root_x=0,root_y=0, event_x=0, event_y=0, state=0, same_screen=1)

* Fri 06 Feb 2015 06:10:20 PM JST
/usr/bin/python /root/.pylib/cronrecipe.py
* Fri 06 Feb 2015 06:13:51 PM JST
self.get_weekpath().get_basename()
* Fri 06 Feb 2015 06:18:23 PM JST
QU /# usr/bin/python /root/.pylib/cronrecipe.py
* Fri 06 Feb 2015 06:18:47 PM JST
/root/recipe/3/1fri
Error type: <type 'exceptions.UnicodeEncodeError'>
Uncaught exception: 'ascii' codec can't encode characters in position 20-23: ordinal n
ot in range(128)   
* Fri 06 Feb 2015 06:19:17 PM JST
/root/recipe/3/1fri
* Fri 06 Feb 2015 06:19:53 PM JST

* Fri 06 Feb 2015 06:19:53 PM JST

* Fri 06 Feb 2015 06:19:54 PM JST

* Fri 06 Feb 2015 06:19:55 PM JST

* Fri 06 Feb 2015 06:19:55 PM JST
        print(self._path)

* Fri 06 Feb 2015 06:22:22 PM JST
str(pth)
* Fri 06 Feb 2015 06:23:07 PM JST
from path import Path
* Fri 06 Feb 2015 06:23:49 PM JST
unicode(Path('/root/recipe/3/1fri').listdir()[0])
* Fri 06 Feb 2015 06:24:07 PM JST
'/root/recipe/3/1fri'
* Fri 06 Feb 2015 06:25:33 PM JST
_pathlib.Path(str(self._path)).iterdir()
* Fri 06 Feb 2015 06:25:39 PM JST

* Fri 06 Feb 2015 06:30:39 PM JST
self._path
* Fri 06 Feb 2015 06:32:58 PM JST
str(
* Fri 06 Feb 2015 06:33:04 PM JST
        
* Fri 06 Feb 2015 06:33:10 PM JST
str
* Fri 06 Feb 2015 09:48:43 PM JST
self.getpath().get_basename()
* Sat 07 Feb 2015 10:39:03 AM JST
from path import Path
* Sat 07 Feb 2015 12:46:34 PM JST
MyArchive().get_path()
* Sat 07 Feb 2015 12:56:25 PM JST

* Sat 07 Feb 2015 01:21:41 PM JST
realpath
* Sat 07 Feb 2015 01:22:37 PM JST
PathHandler(
* Sat 07 Feb 2015 01:23:03 PM JST
                
* Sat 07 Feb 2015 03:10:31 PM JST
rea
* Sat 07 Feb 2015 03:11:34 PM JST
.hexdigest()
* Sat 07 Feb 2015 04:48:43 PM JST
DestroyWindow / class DestroyWindow
class DestroyWindow / __init__
class DestroyWindow / get_window
class DestroyWindow / set_window
class DestroyWindow / request
class DestroyWindow / __call__
class DestroySubwindows / class DestroySubwindows
class DestroySubwindows / __init__
class DestroySubwindows / get_window
class DestroySubwindows / set_window
class DestroySubwindows / request
class DestroySubwindows / __call__
class ChangeSaveSet / class ChangeSaveSet
class ChangeSaveSet / __init__
class ChangeSaveSet / get_mode
class ChangeSaveSet / set_mode
class ChangeSaveSet / get_window
class ChangeSaveSet / set_window
class ChangeSaveSet / request
class ChangeSaveSet / __call__
class ReparentWindow / class ReparentWindow
class ReparentWindow / __init__
class ReparentWindow / get_window
class ReparentWindow / set_window
class ReparentWindow / get_parent
class ReparentWindow / set_parent
class ReparentWindow / get_x
class ReparentWindow / set_x
class ReparentWindow / get_y
class ReparentWindow / set_y
class ReparentWindow / request
class ReparentWindow / __call__
class MapWindow / class MapWindow
class MapWindow / __init__
class MapWindow / get_window
class MapWindow / set_window
class MapWindow / request
class MapWindow / __call__
class MapSubwindows / class MapSubwindows
class MapSubwindows / __init__
class MapSubwindows / get_window
class MapSubwindows / set_window
class MapSubwindows / request
class MapSubwindows / __call__
class UnmapWindow / class UnmapWindow
class UnmapWindow / __init__
class UnmapWindow / get_window
class UnmapWindow / set_window
class UnmapWindow / request
class UnmapWindow / __call__
class UnmapSubwindows / class UnmapSubwindows
class UnmapSubwindows / __init__
class UnmapSubwindows / get_window
class UnmapSubwindows / set_window
class UnmapSubwindows / request
class UnmapSubwindows / __call__
class ConfigureWindow / class ConfigureWindow
class ConfigureWindow / __init__
class ConfigureWindow / get_window
class ConfigureWindow / set_window
class ConfigureWindow / get_value_mask
class ConfigureWindow / set_value_mask
class ConfigureWindow / get_value_list
class ConfigureWindow / set_value_list
class ConfigureWindow / request
class ConfigureWindow / __call__
class CirculateWindow / class CirculateWindow
class CirculateWindow / __init__
class CirculateWindow / get_direction
class CirculateWindow / set_direction
class CirculateWindow / get_window
class CirculateWindow / set_window
class CirculateWindow / request
class CirculateWindow / __call__
class GetGeometry / class GetGeometry
class GetGeometry / __init__
class GetGeometry / get_drawable
class GetGeometry / set_drawable
class GetGeometry / request
class GetGeometry / __call__
class QueryTree / class QueryTree
class QueryTree / __init__
class QueryTree / get_window
class QueryTree / set_window
class QueryTree / request
class QueryTree / __call__
class InternAtom / class InternAtom
class InternAtom / __init__
class InternAtom / get_only_if_exists
class InternAtom / set_only_if_exists
class InternAtom / get_name_len
class InternAtom / set_name_len
class InternAtom / get_name
class InternAtom / set_name
class InternAtom / request
class InternAtom / __call__
class GetAtomName / class GetAtomName
class GetAtomName / __init__
class GetAtomName / get_atom
class GetAtomName / set_atom
class GetAtomName / request
class GetAtomName / __call__
class ChangeProperty / class ChangeProperty
class ChangeProperty / __init__
class ChangeProperty / get_mode
class ChangeProperty / set_mode
class ChangeProperty / get_window
class ChangeProperty / set_window
class ChangeProperty / get_property
class ChangeProperty / set_property
class ChangeProperty / get_type
class ChangeProperty / set_type
class ChangeProperty / get_format
class ChangeProperty / set_format
class ChangeProperty / get_data_len
class ChangeProperty / set_data_len
class ChangeProperty / get_data
class ChangeProperty / set_data
class ChangeProperty / request
class ChangeProperty / __call__
class DeleteProperty / class DeleteProperty
class DeleteProperty / __init__
class DeleteProperty / get_window
class DeleteProperty / set_window
class DeleteProperty / get_property
class DeleteProperty / set_property
class DeleteProperty / request
class DeleteProperty / __call__
class GetProperty / class GetProperty
class GetProperty / __init__
class GetProperty / get_delete
class GetProperty / set_delete
class GetProperty / get_window
class GetProperty / set_window
class GetProperty / get_property
class GetProperty / set_property
class GetProperty / get_type
class GetProperty / set_type
class GetProperty / get_long_offset
class GetProperty / set_long_offset
class GetProperty / get_long_length
class GetProperty / set_long_length
class GetProperty / request
class GetProperty / __call__
class ListProperties / class ListProperties
class ListProperties / __init__
class ListProperties / get_window
class ListProperties / set_window
class ListProperties / request
class ListProperties / __call__
class SetSelectionOwner / class SetSelectionOwner
class SetSelectionOwner / __init__
class SetSelectionOwner / get_owner
class SetSelectionOwner / set_owner
class SetSelectionOwner / get_selection
class SetSelectionOwner / set_selection
class SetSelectionOwner / get_time
class SetSelectionOwner / set_time
class SetSelectionOwner / request
class SetSelectionOwner / __call__
class GetSelectionOwner / class GetSelectionOwner
class GetSelectionOwner / __init__
class GetSelectionOwner / get_selection
class GetSelectionOwner / set_selection
class GetSelectionOwner / request
class GetSelectionOwner / __call__
class ConvertSelection / class ConvertSelection
class ConvertSelection / __init__
class ConvertSelection / get_requestor
class ConvertSelection / set_requestor
class ConvertSelection / get_selection
class ConvertSelection / set_selection
class ConvertSelection / get_target
class ConvertSelection / set_target
class ConvertSelection / get_property
class ConvertSelection / set_property
class ConvertSelection / get_time
class ConvertSelection / set_time
class ConvertSelection / request
class ConvertSelection / __call__
class SendEvent / class SendEvent
class SendEvent / __init__
class SendEvent / get_propagate
class SendEvent / set_propagate
class SendEvent / get_destination
class SendEvent / set_destination
class SendEvent / get_event_mask
class SendEvent / set_event_mask
class SendEvent / get_event
class SendEvent / set_event
class SendEvent / request
class SendEvent / __call__
class GrabPointer / class GrabPointer
class GrabPointer / __init__
class GrabPointer / get_owner_events
class GrabPointer / set_owner_events
class GrabPointer / get_grab_window
class GrabPointer / set_grab_window
class GrabPointer / get_event_mask
class GrabPointer / set_event_mask
class GrabPointer / get_pointer_mode
class GrabPointer / set_pointer_mode
class GrabPointer / get_keyboard_mode
class GrabPointer / set_keyboard_mode
class GrabPointer / get_confine_to
class GrabPointer / set_confine_to
class GrabPointer / get_cursor
class GrabPointer / set_cursor
class GrabPointer / get_time
class GrabPointer / set_time
class GrabPointer / request
class GrabPointer / __call__
class UngrabPointer / class UngrabPointer
class UngrabPointer / __init__
class UngrabPointer / get_time
class UngrabPointer / set_time
class UngrabPointer / request
class UngrabPointer / __call__
class GrabButton / class GrabButton
class GrabButton / __init__
class GrabButton / get_owner_events
class GrabButton / set_owner_events
class GrabButton / get_grab_window
class GrabButton / set_grab_window
class GrabButton / get_event_mask
class GrabButton / set_event_mask
class GrabButton / get_pointer_mode
class GrabButton / set_pointer_mode
class GrabButton / get_keyboard_mode
class GrabButton / set_keyboard_mode
class GrabButton / get_confine_to
class GrabButton / set_confine_to
class GrabButton / get_cursor
class GrabButton / set_cursor
class GrabButton / get_button
class GrabButton / set_button
class GrabButton / get_modifiers
class GrabButton / set_modifiers
class GrabButton / request
class GrabButton / __call__
class UngrabButton / class UngrabButton
class UngrabButton / __init__
class UngrabButton / get_button
class UngrabButton / set_button
class UngrabButton / get_grab_window
class UngrabButton / set_grab_window
class UngrabButton / get_modifiers
class UngrabButton / set_modifiers
class UngrabButton / request
class UngrabButton / __call__
class ChangeActivePointerGrab / class ChangeActivePointerGrab
class ChangeActivePointerGrab / __init__
class ChangeActivePointerGrab / get_cursor
class ChangeActivePointerGrab / set_cursor
class ChangeActivePointerGrab / get_time
class ChangeActivePointerGrab / set_time
class ChangeActivePointerGrab / get_event_mask
class ChangeActivePointerGrab / set_event_mask
class ChangeActivePointerGrab / request
class ChangeActivePointerGrab / __call__
class GrabKeyboard / class GrabKeyboard
class GrabKeyboard / __init__
class GrabKeyboard / get_owner_events
class GrabKeyboard / set_owner_events
class GrabKeyboard / get_grab_window
class GrabKeyboard / set_grab_window
class GrabKeyboard / get_time
class GrabKeyboard / set_time
class GrabKeyboard / get_pointer_mode
class GrabKeyboard / set_pointer_mode
class GrabKeyboard / get_keyboard_mode
class GrabKeyboard / set_keyboard_mode
class GrabKeyboard / request
class GrabKeyboard / __call__
class UngrabKeyboard / class UngrabKeyboard
class UngrabKeyboard / __init__
class UngrabKeyboard / get_time
class UngrabKeyboard / set_time
class UngrabKeyboard / request
class UngrabKeyboard / __call__
class GrabKey / class GrabKey
class GrabKey / __init__
class GrabKey / get_owner_events
class GrabKey / set_owner_events
class GrabKey / get_grab_window
class GrabKey / set_grab_window
class GrabKey / get_modifiers
class GrabKey / set_modifiers
class GrabKey / get_key
class GrabKey / set_key
class GrabKey / get_pointer_mode
class GrabKey / set_pointer_mode
class GrabKey / get_keyboard_mode
class GrabKey / set_keyboard_mode
class GrabKey / request
class GrabKey / __call__
class UngrabKey / class UngrabKey
class UngrabKey / __init__
class UngrabKey / get_key
class UngrabKey / set_key
class UngrabKey / get_grab_window
class UngrabKey / set_grab_window
class UngrabKey / get_modifiers
class UngrabKey / set_modifiers
class UngrabKey / request
class UngrabKey / __call__
class AllowEvents / class AllowEvents
class AllowEvents / __init__
class AllowEvents / get_mode
class AllowEvents / set_mode
class AllowEvents / get_time
class AllowEvents / set_time
class AllowEvents / request
class AllowEvents / __call__
class GrabServer / class GrabServer
class GrabServer / __init__
class GrabServer / request
class GrabServer / __call__
class UngrabServer / class UngrabServer
class UngrabServer / __init__
class UngrabServer / request
class UngrabServer / __call__
class QueryPointer / class QueryPointer
class QueryPointer / __init__
class QueryPointer / get_window
class QueryPointer / set_window
class QueryPointer / request
class QueryPointer / __call__
class GetMotionEvents / class GetMotionEvents
class GetMotionEvents / __init__
class GetMotionEvents / get_window
class GetMotionEvents / set_window
class GetMotionEvents / get_start
class GetMotionEvents / set_start
class GetMotionEvents / get_stop
class GetMotionEvents / set_stop
class GetMotionEvents / request
class GetMotionEvents / __call__
class TranslateCoordinates / class TranslateCoordinates
class TranslateCoordinates / __init__
class TranslateCoordinates / get_src_window
class TranslateCoordinates / set_src_window
class TranslateCoordinates / get_dst_window
class TranslateCoordinates / set_dst_window
class TranslateCoordinates / get_src_x
class TranslateCoordinates / set_src_x
class TranslateCoordinates / get_src_y
class TranslateCoordinates / set_src_y
class TranslateCoordinates / request
class TranslateCoordinates / __call__
class WarpPointer / class WarpPointer
class WarpPointer / __init__
class WarpPointer / get_src_window
class WarpPointer / set_src_window
class WarpPointer / get_dst_window
class WarpPointer / set_dst_window
class WarpPointer / get_src_x
class WarpPointer / set_src_x
class WarpPointer / get_src_y
class WarpPointer / set_src_y
class WarpPointer / get_src_width
class WarpPointer / set_src_width
class WarpPointer / get_src_width
class WarpPointer / set_src_width
class WarpPointer / get_dst_x
class WarpPointer / set_dst_x
class WarpPointer / get_dst_y
class WarpPointer / set_dst_y
class WarpPointer / request
class WarpPointer / __call__
class SetInputFocus / class SetInputFocus
class SetInputFocus / __init__
class SetInputFocus / get_revert_to
class SetInputFocus / set_revert_to
class SetInputFocus / get_focus
class SetInputFocus / set_focus
class SetInputFocus / get_time
class SetInputFocus / set_time
class SetInputFocus / request
class SetInputFocus / __call__
class GetInputFocus / class GetInputFocus
class GetInputFocus / __init__
class GetInputFocus / request
class GetInputFocus / __call__
class QueryKeymap / class QueryKeymap
class QueryKeymap / __init__
class QueryKeymap / request
class QueryKeymap / __call__
class OpenFont / class OpenFont
class OpenFont / __init__
class OpenFont / get_fid
class OpenFont / set_fid
class OpenFont / get_name
class OpenFont / set_name
class OpenFont / request
class OpenFont / __call__
class CloseFont / class CloseFont
class CloseFont / __init__
class CloseFont / get_font
class CloseFont / set_font
class CloseFont / request
class CloseFont / __call__
class QueryFont / class QueryFont
class QueryFont / __init__
class QueryFont / get_font
class QueryFont / set_font
class QueryFont / request
class QueryFont / __call__
class QueryTextExtents / class QueryTextExtents
class QueryTextExtents / __init__
class QueryTextExtents / get_font
class QueryTextExtents / set_font
class QueryTextExtents / get_string_len
class QueryTextExtents / set_string_len
class QueryTextExtents / get_string
class QueryTextExtents / set_string
class QueryTextExtents / request
class QueryTextExtents / __call__
class ListFonts / class ListFonts
class ListFonts / __init__
class ListFonts / get_max_names
class ListFonts / set_max_names
class ListFonts / get_pattern_len
class ListFonts / set_pattern_len
class ListFonts / get_pattern
class ListFonts / set_pattern
class ListFonts / request
class ListFonts / __call__
class ListFontsWithInfo / class ListFontsWithInfo
class ListFontsWithInfo / __init__
class ListFontsWithInfo / get_max_names
class ListFontsWithInfo / set_max_names
class ListFontsWithInfo / get_pattern_len
class ListFontsWithInfo / set_pattern_len
class ListFontsWithInfo / get_pattern
class ListFontsWithInfo / set_pattern
class ListFontsWithInfo / request
class ListFontsWithInfo / __call__
class SetFontPath / class SetFontPath
class SetFontPath / __init__
class SetFontPath / get_font_qty
class SetFontPath / set_font_qty
class SetFontPath / get_font
class SetFontPath / set_font
class SetFontPath / request
class SetFontPath / __call__
class GetFontPath / class GetFontPath
class GetFontPath / __init__
class GetFontPath / request
class GetFontPath / __call__
class CreatePixmap / class CreatePixmap
class CreatePixmap / __init__
class CreatePixmap / get_depth
class CreatePixmap / set_depth
class CreatePixmap / get_pid
class CreatePixmap / set_pid
class CreatePixmap / get_drawable
class CreatePixmap / set_drawable
class CreatePixmap / get_width
class CreatePixmap / set_width
class CreatePixmap / get_height
class CreatePixmap / set_height
class CreatePixmap / request
class CreatePixmap / __call__
class FreePixmap / class FreePixmap
class FreePixmap / __init__
class FreePixmap / get_pixmap
class FreePixmap / set_pixmap
class FreePixmap / request
class FreePixmap / __call__
class CreateGC / class CreateGC
class CreateGC / __init__
class CreateGC / get_cid
class CreateGC / set_cid
class CreateGC / get_drawable
class CreateGC / set_drawable
class CreateGC / get_value_mask
class CreateGC / set_value_mask
class CreateGC / get_value_list
class CreateGC / set_value_list
class CreateGC / request
class CreateGC / __call__
class ChangeGC / class ChangeGC
class ChangeGC / __init__
class ChangeGC / get_gc
class ChangeGC / set_gc
class ChangeGC / get_value_mask
class ChangeGC / set_value_mask
class ChangeGC / get_value_list
class ChangeGC / set_value_list
class ChangeGC / request
class ChangeGC / __call__
class CopyGC / class CopyGC
class CopyGC / __init__
class CopyGC / get_src_gc
class CopyGC / set_src_gc
class CopyGC / get_dst_gc
class CopyGC / set_dst_gc
class CopyGC / get_value_mask
class CopyGC / set_value_mask
class CopyGC / request
class CopyGC / __call__
class SetDashes / class SetDashes
class SetDashes / __init__
class SetDashes / get_gc
class SetDashes / set_gc
class SetDashes / get_dash_offset
class SetDashes / set_dash_offset
class SetDashes / get_dash_offset
class SetDashes / set_dash_offset
class SetDashes / get_dashes_len
class SetDashes / set_dashes_len
class SetDashes / get_dashes
class SetDashes / set_dashes
class SetDashes / request
class SetDashes / __call__
class SetClipRectangles / class SetClipRectangles
class SetClipRectangles / __init__
class SetClipRectangles / get_ordering
class SetClipRectangles / set_ordering
class SetClipRectangles / get_gc
class SetClipRectangles / set_gc
class SetClipRectangles / get_clip_x_origin
class SetClipRectangles / set_clip_x_origin
class SetClipRectangles / get_clip_y_origin
class SetClipRectangles / set_clip_y_origin
class SetClipRectangles / get_rectangles_len
class SetClipRectangles / set_rectangles_len
class SetClipRectangles / get_rectangles
class SetClipRectangles / set_rectangles
class SetClipRectangles / request
class SetClipRectangles / __call__
class FreeGC / class FreeGC
class FreeGC / __init__
class FreeGC / get_gc
class FreeGC / set_gc
class FreeGC / request
class FreeGC / __call__
class ClearArea / class ClearArea
class ClearArea / __init__
class ClearArea / get_exposures
class ClearArea / set_exposures
class ClearArea / get_window
class ClearArea / set_window
class ClearArea / get_x
class ClearArea / set_x
class ClearArea / get_y
class ClearArea / set_y
class ClearArea / get_width
class ClearArea / set_width
class ClearArea / get_height
class ClearArea / set_height
class ClearArea / request
class ClearArea / __call__
class CopyArea / class CopyArea
class CopyArea / __init__
class CopyArea / get_src_drawable
class CopyArea / set_src_drawable
class CopyArea / get_dst_drawable
class CopyArea / set_dst_drawable
class CopyArea / get_gc
class CopyArea / set_gc
class CopyArea / get_src_x
class CopyArea / set_src_x
class CopyArea / get_src_y
class CopyArea / set_src_y
class CopyArea / get_dst_x
class CopyArea / set_dst_x
class CopyArea / get_dst_y
class CopyArea / set_dst_y
class CopyArea / get_width
class CopyArea / set_width
class CopyArea / get_height
class CopyArea / set_height
class CopyArea / request
class CopyArea / __call__
class CopyPlane / class CopyPlane
class CopyPlane / __init__
class CopyPlane / get_src_drawable
class CopyPlane / set_src_drawable
class CopyPlane / get_dst_drawable
class CopyPlane / set_dst_drawable
class CopyPlane / get_gc
class CopyPlane / set_gc
class CopyPlane / get_src_x
class CopyPlane / set_src_x
class CopyPlane / get_src_y
class CopyPlane / set_src_y
class CopyPlane / get_dst_x
class CopyPlane / set_dst_x
class CopyPlane / get_dst_y
class CopyPlane / set_dst_y
class CopyPlane / get_width
class CopyPlane / set_width
class CopyPlane / get_height
class CopyPlane / set_height
class CopyPlane / get_bit_plane
class CopyPlane / set_bit_plane
class CopyPlane / request
class CopyPlane / __call__
class PolyPoint / class PolyPoint
class PolyPoint / __init__
class PolyPoint / get_coordinate_mode
class PolyPoint / set_coordinate_mode
class PolyPoint / get_drawable
class PolyPoint / set_drawable
class PolyPoint / get_gc
class PolyPoint / set_gc
class PolyPoint / get_points_len
class PolyPoint / set_points_len
class PolyPoint / get_points
class PolyPoint / set_points
class PolyPoint / request
class PolyPoint / __call__
class PolyLine / class PolyLine
class PolyLine / __init__
class PolyLine / get_coordinate_mode
class PolyLine / set_coordinate_mode
class PolyLine / get_drawable
class PolyLine / set_drawable
class PolyLine / get_gc
class PolyLine / set_gc
class PolyLine / get_points_len
class PolyLine / set_points_len
class PolyLine / get_points
class PolyLine / set_points
class PolyLine / request
class PolyLine / __call__
class PolySegment / class PolySegment
class PolySegment / __init__
class PolySegment / get_drawable
class PolySegment / set_drawable
class PolySegment / get_gc
class PolySegment / set_gc
class PolySegment / get_segments_len
class PolySegment / set_segments_len
class PolySegment / get_segments
class PolySegment / set_segments
class PolySegment / request
class PolySegment / __call__
class PolyRectangle / class PolyRectangle
class PolyRectangle / __init__
class PolyRectangle / get_drawable
class PolyRectangle / set_drawable
class PolyRectangle / get_gc
class PolyRectangle / set_gc
class PolyRectangle / get_rectangles_len
class PolyRectangle / set_rectangles_len
class PolyRectangle / get_rectangles
class PolyRectangle / set_rectangles
class PolyRectangle / request
class PolyRectangle / __call__
class PolyArc / class PolyArc
class PolyArc / __init__
class PolyArc / get_drawable
class PolyArc / set_drawable
class PolyArc / get_gc
class PolyArc / set_gc
class PolyArc / get_arcs_len
class PolyArc / set_arcs_len
class PolyArc / get_arcs
class PolyArc / set_arcs
class PolyArc / request
class PolyArc / __call__
class FillPoly / class FillPoly
class FillPoly / __init__
class FillPoly / get_drawable
class FillPoly / set_drawable
class FillPoly / get_gc
class FillPoly / set_gc
class FillPoly / get_shape
class FillPoly / set_shape
class FillPoly / get_coordinate_mode
class FillPoly / set_coordinate_mode
class FillPoly / get_points_len
class FillPoly / set_points_len
class FillPoly / get_points
class FillPoly / set_points
class FillPoly / request
class FillPoly / __call__
class PolyFillRectangle / class PolyFillRectangle
class PolyFillRectangle / __init__
class PolyFillRectangle / get_drawable
class PolyFillRectangle / set_drawable
class PolyFillRectangle / get_gc
class PolyFillRectangle / set_gc
class PolyFillRectangle / get_rectangles_len
class PolyFillRectangle / set_rectangles_len
class PolyFillRectangle / get_rectangles
class PolyFillRectangle / set_rectangles
class PolyFillRectangle / request
class PolyFillRectangle / __call__
class PolyFillArc / class PolyFillArc
class PolyFillArc / __init__
class PolyFillArc / get_drawable
class PolyFillArc / set_drawable
class PolyFillArc / get_gc
class PolyFillArc / set_gc
class PolyFillArc / get_arcs_len
class PolyFillArc / set_arcs_len
class PolyFillArc / get_arcs
class PolyFillArc / set_arcs
class PolyFillArc / request
class PolyFillArc / __call__
class PutImage / class PutImage
class PutImage / __init__
class PutImage / get_format
class PutImage / set_format
class PutImage / get_drawable
class PutImage / set_drawable
class PutImage / get_gc
class PutImage / set_gc
class PutImage / get_width
class PutImage / set_width
class PutImage / get_height
class PutImage / set_height
class PutImage / get_dst_x
class PutImage / set_dst_x
class PutImage / get_dst_y
class PutImage / set_dst_y
class PutImage / get_left_pad
class PutImage / set_left_pad
class PutImage / get_depth
class PutImage / set_depth
class PutImage / get_data_len
class PutImage / set_data_len
class PutImage / get_data
class PutImage / set_data
class PutImage / request
class PutImage / __call__
class GetImage / class GetImage
class GetImage / __init__
class GetImage / get_format
class GetImage / set_format
class GetImage / get_drawable
class GetImage / set_drawable
class GetImage / get_x
class GetImage / set_x
class GetImage / get_y
class GetImage / set_y
class GetImage / get_width
class GetImage / set_width
class GetImage / get_height
class GetImage / set_height
class GetImage / get_plane_mask
class GetImage / set_plane_mask
class GetImage / request
class GetImage / __call__
class PolyText8 / class PolyText8
class PolyText8 / __init__
class PolyText8 / get_drawable
class PolyText8 / set_drawable
class PolyText8 / get_gc
class PolyText8 / set_gc
class PolyText8 / get_x
class PolyText8 / set_x
class PolyText8 / get_y
class PolyText8 / set_y
class PolyText8 / get_items_len
class PolyText8 / set_items_len
class PolyText8 / get_items
class PolyText8 / set_items
class PolyText8 / request
class PolyText8 / __call__
class PolyText16 / class PolyText16
class PolyText16 / __init__
class PolyText16 / get_drawable
class PolyText16 / set_drawable
class PolyText16 / get_gc
class PolyText16 / set_gc
class PolyText16 / get_x
class PolyText16 / set_x
class PolyText16 / get_y
class PolyText16 / set_y
class PolyText16 / get_items_len
class PolyText16 / set_items_len
class PolyText16 / get_items
class PolyText16 / set_items
class PolyText16 / request
class PolyText16 / __call__
class ImageText8 / class ImageText8
class ImageText8 / __init__
class ImageText8 / get_string_len
class ImageText8 / set_string_len
class ImageText8 / get_drawable
class ImageText8 / set_drawable
class ImageText8 / get_gc
class ImageText8 / set_gc
class ImageText8 / get_x
class ImageText8 / set_x
class ImageText8 / get_y
class ImageText8 / set_y
class ImageText8 / get_string
class ImageText8 / set_string
class ImageText8 / request
class ImageText8 / __call__
class ImageText16 / class ImageText16
class ImageText16 / __init__
class ImageText16 / get_string_len
class ImageText16 / set_string_len
class ImageText16 / get_drawable
class ImageText16 / set_drawable
class ImageText16 / get_gc
class ImageText16 / set_gc
class ImageText16 / get_x
class ImageText16 / set_x
class ImageText16 / get_y
class ImageText16 / set_y
class ImageText16 / get_string
class ImageText16 / set_string
class ImageText16 / request
class ImageText16 / __call__
class CreateColormap / class CreateColormap
class CreateColormap / __init__
class CreateColormap / get_alloc
class CreateColormap / set_alloc
class CreateColormap / get_mid
class CreateColormap / set_mid
class CreateColormap / get_window
class CreateColormap / set_window
class CreateColormap / get_visual
class CreateColormap / set_visual
class CreateColormap / request
class CreateColormap / __call__
class FreeColormap / class FreeColormap
class FreeColormap / __init__
class FreeColormap / get_cmap
class FreeColormap / set_cmap
class FreeColormap / request
class FreeColormap / __call__
class CopyColormapAndFree / class CopyColormapAndFree
class CopyColormapAndFree / __init__
class CopyColormapAndFree / get_mid
class CopyColormapAndFree / set_mid
class CopyColormapAndFree / get_src_cmap
class CopyColormapAndFree / set_src_cmap
class CopyColormapAndFree / request
class CopyColormapAndFree / __call__
class InstallColormap / class InstallColormap
class InstallColormap / __init__
class InstallColormap / get_cmap
class InstallColormap / set_cmap
class InstallColormap / request
class InstallColormap / __call__
class UninstallColormap / class UninstallColormap
class UninstallColormap / __init__
class UninstallColormap / get_cmap
class UninstallColormap / set_cmap
class UninstallColormap / request
class UninstallColormap / __call__
class ListInstalledColormaps / class ListInstalledColormaps
class ListInstalledColormaps / __init__
class ListInstalledColormaps / get_window
class ListInstalledColormaps / set_window
class ListInstalledColormaps / request
class ListInstalledColormaps / __call__
class AllocColor / class AllocColor
class AllocColor / __init__
class AllocColor / get_cmap
class AllocColor / set_cmap
class AllocColor / get_red
class AllocColor / set_red
class AllocColor / get_green
class AllocColor / set_green
class AllocColor / get_blue
class AllocColor / set_blue
class AllocColor / request
class AllocColor / __call__
class AllocNamedColor / class AllocNamedColor
class AllocNamedColor / __init__
class AllocNamedColor / get_cmap
class AllocNamedColor / set_cmap
class AllocNamedColor / get_name_len
class AllocNamedColor / set_name_len
class AllocNamedColor / get_name
class AllocNamedColor / set_name
class AllocNamedColor / request
class AllocNamedColor / __call__
class AllocColorCells / class AllocColorCells
class AllocColorCells / __init__
class AllocColorCells / get_contiguous
class AllocColorCells / set_contiguous
class AllocColorCells / get_cmap
class AllocColorCells / set_cmap
class AllocColorCells / get_colors
class AllocColorCells / set_colors
class AllocColorCells / get_planes
class AllocColorCells / set_planes
class AllocColorCells / request
class AllocColorCells / __call__
class AllocColorPlanes / class AllocColorPlanes
class AllocColorPlanes / __init__
class AllocColorPlanes / get_contiguous
class AllocColorPlanes / set_contiguous
class AllocColorPlanes / get_cmap
class AllocColorPlanes / set_cmap
class AllocColorPlanes / get_colors
class AllocColorPlanes / set_colors
class AllocColorPlanes / get_reds
class AllocColorPlanes / set_reds
class AllocColorPlanes / get_greens
class AllocColorPlanes / set_greens
class AllocColorPlanes / get_blues
class AllocColorPlanes / set_blues
class AllocColorPlanes / request
class AllocColorPlanes / __call__
class FreeColors / class FreeColors
class FreeColors / __init__
class FreeColors / get_cmap
class FreeColors / set_cmap
class FreeColors / get_plane_mask
class FreeColors / set_plane_mask
class FreeColors / get_pixels_len
class FreeColors / set_pixels_len
class FreeColors / get_pixels
class FreeColors / set_pixels
class FreeColors / request
class FreeColors / __call__
class StoreColors / class StoreColors
class StoreColors / __init__
class StoreColors / get_cmap
class StoreColors / set_cmap
class StoreColors / get_items_len
class StoreColors / set_items_len
class StoreColors / get_items
class StoreColors / set_items
class StoreColors / request
class StoreColors / __call__
class StoreNamedColor / class StoreNamedColor
class StoreNamedColor / __init__
class StoreNamedColor / get_flags
class StoreNamedColor / set_flags
class StoreNamedColor / get_cmap
class StoreNamedColor / set_cmap
class StoreNamedColor / get_pixel
class StoreNamedColor / set_pixel
class StoreNamedColor / get_name_len
class StoreNamedColor / set_name_len
class StoreNamedColor / get_name
class StoreNamedColor / set_name
class StoreNamedColor / request
class StoreNamedColor / __call__
class QueryColors / class QueryColors
class QueryColors / __init__
class QueryColors / get_cmap
class QueryColors / set_cmap
class QueryColors / get_pixels_len
class QueryColors / set_pixels_len
class QueryColors / get_pixels
class QueryColors / set_pixels
class QueryColors / request
class QueryColors / __call__
class LookupColor / class LookupColor
class LookupColor / __init__
class LookupColor / get_cmap
class LookupColor / set_cmap
class LookupColor / get_name_len
class LookupColor / set_name_len
class LookupColor / get_name
class LookupColor / set_name
class LookupColor / request
class LookupColor / __call__
class CreateCursor / class CreateCursor
class CreateCursor / __init__
class CreateCursor / get_cid
class CreateCursor / set_cid
class CreateCursor / get_source
class CreateCursor / set_source
class CreateCursor / get_mask
class CreateCursor / set_mask
class CreateCursor / get_fore_red
class CreateCursor / set_fore_red
class CreateCursor / get_fore_green
class CreateCursor / set_fore_green
class CreateCursor / get_fore_blue
class CreateCursor / set_fore_blue
class CreateCursor / get_back_red
class CreateCursor / set_back_red
class CreateCursor / get_back_green
class CreateCursor / set_back_green
class CreateCursor / get_back_blue
class CreateCursor / set_back_blue
class CreateCursor / get_x
class CreateCursor / set_x
class CreateCursor / get_y
class CreateCursor / set_y
class CreateCursor / request
class CreateCursor / __call__
class CreateGlyphCursor / class CreateGlyphCursor
class CreateGlyphCursor / __init__
class CreateGlyphCursor / get_cid
class CreateGlyphCursor / set_cid
class CreateGlyphCursor / get_source_font
class CreateGlyphCursor / set_source_font
class CreateGlyphCursor / get_mask_font
class CreateGlyphCursor / set_mask_font
class CreateGlyphCursor / get_source_char
class CreateGlyphCursor / set_source_char
class CreateGlyphCursor / get_mask_char
class CreateGlyphCursor / set_mask_char
class CreateGlyphCursor / get_fore_red
class CreateGlyphCursor / set_fore_red
class CreateGlyphCursor / get_fore_green
class CreateGlyphCursor / set_fore_green
class CreateGlyphCursor / get_fore_blue
class CreateGlyphCursor / set_fore_blue
class CreateGlyphCursor / get_back_red
class CreateGlyphCursor / set_back_red
class CreateGlyphCursor / get_back_green
class CreateGlyphCursor / set_back_green
class CreateGlyphCursor / get_back_blue
class CreateGlyphCursor / set_back_blue
class CreateGlyphCursor / request
class CreateGlyphCursor / __call__
class FreeCursor / class FreeCursor
class FreeCursor / __init__
class FreeCursor / get_cursor
class FreeCursor / set_cursor
class FreeCursor / request
class FreeCursor / __call__
class RecolorCursor / class RecolorCursor
class RecolorCursor / __init__
class RecolorCursor / get_cursor
class RecolorCursor / set_cursor
class RecolorCursor / get_fore_red
class RecolorCursor / set_fore_red
class RecolorCursor / get_fore_green
class RecolorCursor / set_fore_green
class RecolorCursor / get_fore_blue
class RecolorCursor / set_fore_blue
class RecolorCursor / get_back_red
class RecolorCursor / set_back_red
class RecolorCursor / get_back_green
class RecolorCursor / set_back_green
class RecolorCursor / get_back_blue
class RecolorCursor / set_back_blue
class RecolorCursor / request
class RecolorCursor / __call__
class QueryBestSize / class QueryBestSize
class QueryBestSize / __init__
class QueryBestSize / get_class
class QueryBestSize / set_class
class QueryBestSize / get_drawable
class QueryBestSize / set_drawable
class QueryBestSize / get_width
class QueryBestSize / set_width
class QueryBestSize / get_height
class QueryBestSize / set_height
class QueryBestSize / request
class QueryBestSize / __call__
class QueryExtension / class QueryExtension
class QueryExtension / __init__
class QueryExtension / get_name_len
class QueryExtension / set_name_len
class QueryExtension / get_name
class QueryExtension / set_name
class QueryExtension / request
class QueryExtension / __call__
class ListExtensions / class ListExtensions
class ListExtensions / __init__
class ListExtensions / request
class ListExtensions / __call__
class ChangeKeyboardMapping / class ChangeKeyboardMapping
class ChangeKeyboardMapping / __init__
class ChangeKeyboardMapping / get_keycode_count
class ChangeKeyboardMapping / set_keycode_count
class ChangeKeyboardMapping / get_first_keycode
class ChangeKeyboardMapping / set_first_keycode
class ChangeKeyboardMapping / get_keysyms_per_keycode
class ChangeKeyboardMapping / set_keysyms_per_keycode
class ChangeKeyboardMapping / get_keysyms
class ChangeKeyboardMapping / set_keysyms
class ChangeKeyboardMapping / request
class ChangeKeyboardMapping / __call__
class GetKeyboardMapping / class GetKeyboardMapping
class GetKeyboardMapping / __init__
class GetKeyboardMapping / get_first_keycode
class GetKeyboardMapping / set_first_keycode
class GetKeyboardMapping / get_count
class GetKeyboardMapping / set_count
class GetKeyboardMapping / request
class GetKeyboardMapping / __call__
class ChangeKeyboardControl / class ChangeKeyboardControl
class ChangeKeyboardControl / __init__
class ChangeKeyboardControl / get_value_mask
class ChangeKeyboardControl / set_value_mask
class ChangeKeyboardControl / get_value_list
class ChangeKeyboardControl / set_value_list
class ChangeKeyboardControl / request
class ChangeKeyboardControl / __call__
class GetKeyboardControl / class GetKeyboardControl
class GetKeyboardControl / __init__
class GetKeyboardControl / request
class GetKeyboardControl / __call__
class Bell / class Bell
class Bell / __init__
class Bell / get_percent
class Bell / set_percent
class Bell / request
class Bell / __call__
class ChangePointerControl / class ChangePointerControl
class ChangePointerControl / __init__
class ChangePointerControl / get_acceleration_numerator
class ChangePointerControl / set_acceleration_numerator
class ChangePointerControl / get_acceleration_denominator
class ChangePointerControl / set_acceleration_denominator
class ChangePointerControl / get_threshold
class ChangePointerControl / set_threshold
class ChangePointerControl / get_do_acceleration
class ChangePointerControl / set_do_acceleration
class ChangePointerControl / get_do_threshold
class ChangePointerControl / set_do_threshold
class ChangePointerControl / request
class ChangePointerControl / __call__
class GetPointerControl / class GetPointerControl
class GetPointerControl / __init__
class GetPointerControl / request
class GetPointerControl / __call__
class SetScreenSaver / class SetScreenSaver
class SetScreenSaver / __init__
class SetScreenSaver / get_timeout
class SetScreenSaver / set_timeout
class SetScreenSaver / get_interval
class SetScreenSaver / set_interval
class SetScreenSaver / get_prefer_blanking
class SetScreenSaver / set_prefer_blanking
class SetScreenSaver / get_allow_exposures
class SetScreenSaver / set_allow_exposures
class SetScreenSaver / request
class SetScreenSaver / __call__
class GetScreenSaver / class GetScreenSaver
class GetScreenSaver / __init__
class GetScreenSaver / request
class GetScreenSaver / __call__
class ChangeHosts / class ChangeHosts
class ChangeHosts / __init__
class ChangeHosts / get_mode
class ChangeHosts / set_mode
class ChangeHosts / get_family
class ChangeHosts / set_family
class ChangeHosts / get_address_len
class ChangeHosts / set_address_len
class ChangeHosts / get_address
class ChangeHosts / set_address
class ChangeHosts / request
class ChangeHosts / __call__
class ListHosts / class ListHosts
class ListHosts / __init__
class ListHosts / request
class ListHosts / __call__
class SetAccessControl / class SetAccessControl
class SetAccessControl / __init__
class SetAccessControl / get_mode
class SetAccessControl / set_mode
class SetAccessControl / request
class SetAccessControl / __call__
class SetCloseDownMode / class SetCloseDownMode
class SetCloseDownMode / __init__
class SetCloseDownMode / get_mode
class SetCloseDownMode / set_mode
class SetCloseDownMode / request
class SetCloseDownMode / __call__
class KillClient / class KillClient
class KillClient / __init__
class KillClient / request
class KillClient / __call__
class RotateProperties / class RotateProperties
class RotateProperties / __init__
class RotateProperties / get_window
class RotateProperties / set_window
class RotateProperties / get_atoms_len
class RotateProperties / set_atoms_len
class RotateProperties / get_delta
class RotateProperties / set_delta
class RotateProperties / get_atoms
class RotateProperties / set_atoms
class RotateProperties / request
class RotateProperties / __call__
class ForceScreenSaver / class ForceScreenSaver
class ForceScreenSaver / __init__
class ForceScreenSaver / get_mode
class ForceScreenSaver / set_mode
class ForceScreenSaver / request
class ForceScreenSaver / __call__
class SetPointerMapping / class SetPointerMapping
class SetPointerMapping / __init__
class SetPointerMapping / get_map_len
class SetPointerMapping / set_map_len
class SetPointerMapping / get_map
class SetPointerMapping / set_map
class SetPointerMapping / request
class SetPointerMapping / __call__
class GetPointerMapping / class GetPointerMapping
class GetPointerMapping / __init__
class GetPointerMapping / request
class GetPointerMapping / __call__
class SetModifierMapping / class SetModifierMapping
class SetModifierMapping / __init__
class SetModifierMapping / get_keycodes_per_modifier
class SetModifierMapping / set_keycodes_per_modifier
class SetModifierMapping / get_keycodes
class SetModifierMapping / set_keycodes
class SetModifierMapping / request
class SetModifierMapping / __call__
class GetModifierMapping / class GetModifierMapping
class GetModifierMapping / __init__
class GetModifierMapping / request
class GetModifierMapping / __call__
class NoOperation / class NoOperation
class NoOperation / __init__
class NoOperation / request
class NoOperation / __call__

* Sat 07 Feb 2015 04:48:54 PM JST
DestroyWindow
* Sat 07 Feb 2015 04:49:14 PM JST
DestroySubwindows
* Sat 07 Feb 2015 04:50:18 PM JST
ChangeSaveSet
* Sat 07 Feb 2015 06:03:13 PM JST
CopyColormapAndFree
* Sat 07 Feb 2015 06:28:53 PM JST
FreeColormap
* Sat 07 Feb 2015 06:29:12 PM JST
CreateColormap
* Sat 07 Feb 2015 06:29:30 PM JST
ImageText16
* Sat 07 Feb 2015 06:29:50 PM JST
ImageText8
* Sat 07 Feb 2015 06:30:09 PM JST
PolyText16
* Sat 07 Feb 2015 06:30:30 PM JST
PolyText8
* Sat 07 Feb 2015 06:31:10 PM JST
GetImage
* Sat 07 Feb 2015 06:34:07 PM JST
PutImage
* Sat 07 Feb 2015 06:34:26 PM JST
PolyFillArc
* Sat 07 Feb 2015 06:34:45 PM JST
PolyFillRectangle
* Sat 07 Feb 2015 06:35:08 PM JST
FillPoly
* Sat 07 Feb 2015 06:36:13 PM JST
PolyArc
* Sat 07 Feb 2015 06:36:32 PM JST
PolyRectangle
* Sat 07 Feb 2015 06:37:37 PM JST
PolySegment
* Sat 07 Feb 2015 09:27:46 PM JST
request
* Sat 07 Feb 2015 09:28:03 PM JST
GetKeyboardMapping
* Sun 08 Feb 2015 08:23:27 AM JST
SetAccessControl
* Sun 08 Feb 2015 01:38:14 PM JST
None
* Sun 08 Feb 2015 01:41:05 PM JST
/usr/share/pyshared/Xlib/
* Sun 08 Feb 2015 06:05:11 PM JST
'root']
* Sun 08 Feb 2015 06:11:59 PM JST
D d.screen().root
* Sun 08 Feb 2015 09:55:40 PM JST
PathHandler
* Sun 08 Feb 2015 09:56:15 PM JST
'unicode
* Sun 08 Feb 2015 09:56:44 PM JST
exists()
* Sun 08 Feb 2015 09:57:00 PM JST
exists()
* Sun 08 Feb 2015 09:57:16 PM JST
listdir()
* Sun 08 Feb 2015 09:57:21 PM JST
D PathHandler('/root/recipe/4/0thu')
* Sun 08 Feb 2015 09:57:24 PM JST
D PathHandler('/root/recipe/4/0thu'
* Sun 08 Feb 2015 09:57:31 PM JST
from pathhandler import PathHandler
* Sun 08 Feb 2015 09:57:42 PM JST
PathHandler('/root/recipe/4/0thu').listdir()
* Sun 08 Feb 2015 09:57:51 PM JST
from pathhandler import PathHandler
* Sun 08 Feb 2015 09:57:55 PM JST
PathHandler('/root/recipe/4/0thu').listdir()
* Sun 08 Feb 2015 09:58:03 PM JST
listdir()
* Sun 08 Feb 2015 09:59:37 PM JST
unicode(
* Sun 08 Feb 2015 10:00:32 PM JST
unicode(
* Sun 08 Feb 2015 10:01:00 PM JST
self
* Sun 08 Feb 2015 10:01:37 PM JST
from pathhandler import PathHandler
PathHandler('/root/recipe/4/0thu').listdir()

* Sun 08 Feb 2015 10:01:51 PM JST
PathHandler('/root/recipe/4/0thu').listdir()
* Sun 08 Feb 2015 10:23:50 PM JST
unicode(
* Sun 08 Feb 2015 10:24:59 PM JST
unicode(l[0].get_basename())
* Sun 08 Feb 2015 10:25:12 PM JST
get_basename())
* Sun 08 Feb 2015 10:25:13 PM JST
0].get_basename())
* Sun 08 Feb 2015 10:25:13 PM JST
l[0].get_basename())
* Sun 08 Feb 2015 10:25:13 PM JST
unicode(l[0].get_basename())
* Sun 08 Feb 2015 10:27:10 PM JST
.decode('ascii')
* Sun 08 Feb 2015 10:31:31 PM JST
'あ'.encode('utf-8').decode('utf-8')
* Sun 08 Feb 2015 10:31:41 PM JST
8')
* Sun 08 Feb 2015 10:31:41 PM JST
'utf-8')
* Sun 08 Feb 2015 10:31:42 PM JST
encode('utf-8')
* Sun 08 Feb 2015 10:32:38 PM JST
self).
* Sun 08 Feb 2015 10:32:38 PM JST
unicode(self).
* Sun 08 Feb 2015 10:33:18 PM JST
os.path.basename('/tmp/hello.py')
* Sun 08 Feb 2015 10:33:31 PM JST
from pathhandler import PathHandler
PathHandler('/root/recipe/4/0thu').listdir()

* Sun 08 Feb 2015 10:33:50 PM JST
str(
* Sun 08 Feb 2015 10:34:21 PM JST
PathHandler('/root/recipe/4/0thu').listdir()
* Sun 08 Feb 2015 10:36:03 PM JST
listdir()
* Sun 08 Feb 2015 10:36:55 PM JST
get_basename()
* Sun 08 Feb 2015 10:36:57 PM JST
0]
* Sun 08 Feb 2015 10:37:37 PM JST
.encode('utf-8')
* Sun 08 Feb 2015 10:37:53 PM JST
8')
* Sun 08 Feb 2015 10:37:55 PM JST
self
* Sun 08 Feb 2015 10:37:55 PM JST
utf-self
* Sun 08 Feb 2015 10:37:56 PM JST
encode(')
* Sun 08 Feb 2015 10:38:00 PM JST
            
* Sun 08 Feb 2015 10:38:48 PM JST
unicode
* Sun 08 Feb 2015 10:38:55 PM JST
self._path
* Sun 08 Feb 2015 10:39:24 PM JST
from pathhandler import PathHandler
PathHandler('/root/recipe/4/0thu').listdir()

* Sun 08 Feb 2015 10:39:34 PM JST
PathHandler('/root/recipe/4/0thu').listdir()
* Sun 08 Feb 2015 10:41:04 PM JST
_path
* Sun 08 Feb 2015 10:41:16 PM JST
str(self)
* Sun 08 Feb 2015 10:41:19 PM JST

* Sun 08 Feb 2015 10:41:19 PM JST

* Sun 08 Feb 2015 10:41:19 PM JST
        pth = 

* Sun 08 Feb 2015 10:41:22 PM JST
unicode(_pathlib.Path(str(self)).root)
* Sun 08 Feb 2015 10:41:24 PM JST

* Sun 08 Feb 2015 10:41:24 PM JST

* Sun 08 Feb 2015 10:41:24 PM JST
        uni = 

* Sun 08 Feb 2015 10:41:38 PM JST
_path
* Sun 08 Feb 2015 10:43:25 PM JST
from menu import MenuManager
* Sun 08 Feb 2015 10:43:49 PM JST
MenuManager().get_today().iter_recipes()
* Sun 08 Feb 2015 10:45:21 PM JST
unicode(
* Sun 08 Feb 2015 10:48:39 PM JST
0])
* Sun 08 Feb 2015 10:48:40 PM JST
iter_recipes())[0])
* Sun 08 Feb 2015 10:48:42 PM JST
str(list(
* Sun 08 Feb 2015 10:50:30 PM JST
unicode(
* Sun 08 Feb 2015 11:39:34 PM JST
xobject
* Mon 09 Feb 2015 12:18:32 AM JST
sys.getdefaultencoding()
* Mon 09 Feb 2015 12:48:12 AM JST
from Xlib.protocol.event import KeyPress
* Mon 09 Feb 2015 12:48:18 AM JST
k=KeyPress(detail=38, sequence_number=0, time=0, root=482, window=52428822,
           child=0, root_x=0,root_y=0, event_x=0, event_y=0, state=0,
           same_screen=1)

* Mon 09 Feb 2015 09:14:48 AM JST
class XClient:
    """Abstract class XClient
    """
    # Attributes:
    
    # Operations
    def CreateWindow(self, depth, wid, parent, x, y, width, height, border_width, _class, visual, value_mask, value_list):
        """function CreateWindow
        
        depth: 
        wid: 
        parent: 
        x: 
        y: 
        width: 
        height: 
        border_width: 
        _class: 
        visual: 
        value_mask: 
        value_list: 
        
        returns None
        """
        raise NotImplementedError()
    
    def ChangeWindowAttributes(self, window, value_mask, value_list):
        """function ChangeWindowAttributes
        
        window: 
        value_mask: 
        value_list: 
        
        returns None
        """
        raise NotImplementedError()
    
    def GetWindowAttributes(self, window):
        """function GetWindowAttributes
        
        window: 
        
        returns 
        """
        raise NotImplementedError()
    
    def DestroyWindow(self, window):
        """function DestroyWindow
        
        window: 
        
        returns None
        """
        raise NotImplementedError()
    
    def DestroySubwindows(self, window):
        """function DestroySubwindows
        
        window: 
        
        returns None
        """
        raise NotImplementedError()
    
    def ChangeSaveSet(self, mode, window):
        """function ChangeSaveSet
        
        mode: 
        window: 
        
        returns None
        """
        raise NotImplementedError()
    
    def ReparentWindow(self, window, parent, x, y):
        """function ReparentWindow
        
        window: 
        parent: 
        x: 
        y: 
        
        returns None
        """
        raise NotImplementedError()
    
    def MapWindow(self, window):
        """function MapWindow
        
        window: 
        
        returns None
        """
        raise NotImplementedError()
    
    def MapSubwindows(self, window):
        """function MapSubwindows
        
        window: 
        
        returns None
        """
        raise NotImplementedError()
    
    def UnmapWindow(self, window):
        """function UnmapWindow
        
        window: 
        
        returns None
        """
        raise NotImplementedError()
    
    def UnmapSubwindows(self, window):
        """function UnmapSubwindows
        
        window: 
        
        returns None
        """
        raise NotImplementedError()
    
    def ConfigureWindow(self, window, value_mask, value_list):
        """function ConfigureWindow
        
        window: 
        value_mask: 
        value_list: 
        
        returns None
        """
        raise NotImplementedError()
    
    def CirculateWindow(self, direction, window):
        """function CirculateWindow
        
        direction: 
        window: 
        
        returns None
        """
        raise NotImplementedError()
    
    def GetGeometry(self, drawable):
        """function GetGeometry
        
        drawable: 
        
        returns 
        """
        raise NotImplementedError()
    
    def QueryTree(self, window):
        """function QueryTree
        
        window: 
        
        returns 
        """
        raise NotImplementedError()
    
    def InternAtom(self, only_if_exists, name):
        """function InternAtom
        
        only_if_exists: 
        name: 
        
        returns 
        """
        raise NotImplementedError()
    
    def GetAtomName(self, atom):
        """function GetAtomName
        
        atom: 
        
        returns 
        """
        raise NotImplementedError()
    
    def ChangeProperty(self, mode, window, property, type, format, data_len, data):
        """function ChangeProperty
        
        mode: 
        window: 
        property: 
        type: 
        format: 
        data_len: 
        data: 
        
        returns None
        """
        raise NotImplementedError()
    
    def DeleteProperty(self, window, property):
        """function DeleteProperty
        
        window: 
        property: 
        
        returns None
        """
        raise NotImplementedError()
    
    def GetProperty(self, delete, window, property, type, long_offset, long_length):
        """function GetProperty
        
        delete: 
        window: 
        property: 
        type: 
        long_offset: 
        long_length: 
        
        returns 
        """
        raise NotImplementedError()
    
    def ListProperties(self, window):
        """function ListProperties
        
        window: 
        
        returns 
        """
        raise NotImplementedError()
    
    def SetSelectionOwner(self, owner, selection, time):
        """function SetSelectionOwner
        
        owner: 
        selection: 
        time: 
        
        returns None
        """
        raise NotImplementedError()
    
    def GetSelectionOwner(self, selection):
        """function GetSelectionOwner
        
        selection: 
        
        returns 
        """
        raise NotImplementedError()
    
    def ConvertSelection(self, requestor, selection, target, property, time):
        """function ConvertSelection
        
        requestor: 
        selection: 
        target: 
        property: 
        time: 
        
        returns None
        """
        raise NotImplementedError()
    
    def SendEvent(self, propagate, destination, event_mask, event):
        """function SendEvent
        
        propagate: 
        destination: 
        event_mask: 
        event: 
        
        returns None
        """
        raise NotImplementedError()
    
    def GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, time):
        """function GrabPointer
        
        owner_events: 
        grab_window: 
        event_mask: 
        pointer_mode: 
        keyboard_mode: 
        confine_to: 
        cursor: 
        time: 
        
        returns 
        """
        raise NotImplementedError()
    
    def UngrabPointer(self, time):
        """function UngrabPointer
        
        time: 
        
        returns None
        """
        raise NotImplementedError()
    
    def GrabButton(self, owner_events, grab_window, event_mask, pointer_mode, keyboard_mode, confine_to, cursor, button, modifiers):
        """function GrabButton
        
        owner_events: 
        grab_window: 
        event_mask: 
        pointer_mode: 
        keyboard_mode: 
        confine_to: 
        cursor: 
        button: 
        modifiers: 
        
        returns None
        """
        raise NotImplementedError()
    
    def UngrabButton(self, button, grab_window, modifiers):
        """function UngrabButton
        
        button: 
        grab_window: 
        modifiers: 
        
        returns 
        """
        raise NotImplementedError()
    
    def ChangeActivePointerGrab(self, cursor, time, event_mask):
        """function ChangeActivePointerGrab
        
        cursor: 
        time: 
        event_mask: 
        
        returns None
        """
        raise NotImplementedError()
    
    def GrabKeyboard(self, owner_events, grab_window, time, pointer_mode, keyboard_mode):
        """function GrabKeyboard
        
        owner_events: 
        grab_window: 
        time: 
        pointer_mode: 
        keyboard_mode: 
        
        returns 
        """
        raise NotImplementedError()
    
    def UngrabKeyboard(self, time):
        """function UngrabKeyboard
        
        time: 
        
        returns None
        """
        raise NotImplementedError()
    
    def GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode, keyboard_mode):
        """function GrabKey
        
        owner_events: 
        grab_window: 
        modifiers: 
        key: 
        pointer_mode: 
        keyboard_mode: 
        
        returns None
        """
        raise NotImplementedError()
    
    def UngrabKey(self, key, grab_window, modifiers):
        """function UngrabKey
        
        key: 
        grab_window: 
        modifiers: 
        
        returns None
        """
        raise NotImplementedError()
    
    def AllowEvents(self, mode, time):
        """function AllowEvents
        
        mode: 
        time: 
        
        returns None
        """
        raise NotImplementedError()
    
    def GrabServer(self):
        """function GrabServer
        
        returns None
        """
        raise NotImplementedError()
    
    def UngrabServer(self):
        """function UngrabServer
        
        returns None
        """
        raise NotImplementedError()
    
    def QueryPointer(self, window):
        """function QueryPointer
        
        window: 
        
        returns 
        """
        raise NotImplementedError()
    
    def GetMotionEvents(self, window, start, stop):
        """function GetMotionEvents
        
        window: 
        start: 
        stop: 
        
        returns 
        """
        raise NotImplementedError()
    
    def TranslateCoordinates(self, src_window, dst_window, src_x, src_y):
        """function TranslateCoordinates
        
        src_window: 
        dst_window: 
        src_x: 
        src_y: 
        
        returns 
        """
        raise NotImplementedError()
    
    def WarpPointer(self, src_window, dst_window, src_x, src_y, src_width, src_height, dst_x, dst_y):
        """function WarpPointer
        
        src_window: 
        dst_window: 
        src_x: 
        src_y: 
        src_width: 
        src_height: 
        dst_x: 
        dst_y: 
        
        returns None
        """
        raise NotImplementedError()
    
    def SetInputFocus(self, revert_to, focus, time):
        """function SetInputFocus
        
        revert_to: 
        focus: 
        time: 
        
        returns None
        """
        raise NotImplementedError()
    
    def GetInputFocus(self):
        """function GetInputFocus
        
        returns 
        """
        raise NotImplementedError()
    
    def QueryKeymap(self):
        """function QueryKeymap
        
        returns 
        """
        raise NotImplementedError()
    
    def OpenFont(self, fid, name_len, name):
        """function OpenFont
        
        fid: 
        name_len: 
        name: 
        
        returns None
        """
        raise NotImplementedError()
    
    def CloseFont(self, font):
        """function CloseFont
        
        font: 
        
        returns 
        """
        raise NotImplementedError()
    
    def QueryFont(self, font):
        """function QueryFont
        
        font: 
        
        returns 
        """
        raise NotImplementedError()
    
    def QueryTextExtents(self, font, string_len, string):
        """function QueryTextExtents
        
        font: 
        string_len: 
        string: 
        
        returns 
        """
        raise NotImplementedError()
    
    def ListFonts(self, max_names, pattern_len, pattern):
        """function ListFonts
        
        max_names: 
        pattern_len: 
        pattern: 
        
        returns 
        """
        raise NotImplementedError()
    
    def ListFontsWithInfo(self, max_names, pattern_len, pattern):
        """function ListFontsWithInfo
        
        max_names: 
        pattern_len: 
        pattern: 
        
        returns 
        """
        raise NotImplementedError()
    
    def SetFontPath(self, font_qty, font):
        """function SetFontPath
        
        font_qty: 
        font: 
        
        returns None
        """
        raise NotImplementedError()
    
    def GetFontPath(self):
        """function GetFontPath
        
        returns 
        """
        raise NotImplementedError()
    
    def CreatePixmap(self, depth, pid, drawable, width, height):
        """function CreatePixmap
        
        depth: 
        pid: 
        drawable: 
        width: 
        height: 
        
        returns None
        """
        raise NotImplementedError()
    
    def FreePixmap(self, pixmap):
        """function FreePixmap
        
        pixmap: 
        
        returns None
        """
        raise NotImplementedError()
    
    def CreateGC(self, cid, drawable, value_mask, value_list):
        """function CreateGC
        
        cid: 
        drawable: 
        value_mask: 
        value_list: 
        
        returns None
        """
        raise NotImplementedError()
    
    def ChangeGC(self, gc, value_mask, value_list):
        """function ChangeGC
        
        gc: 
        value_mask: 
        value_list: 
        
        returns None
        """
        raise NotImplementedError()
    
    def CopyGC(self, src_gc, dst_gc, value_mask):
        """function CopyGC
        
        src_gc: 
        dst_gc: 
        value_mask: 
        
        returns None
        """
        raise NotImplementedError()
    
    def SetDashes(self, gc, dash_offset, dashes_len, dashes):
        """function SetDashes
        
        gc: 
        dash_offset: 
        dashes_len: 
        dashes: 
        
        returns None
        """
        raise NotImplementedError()
    
    def SetClipRectangles(self, ordering, gc, clip_x_origin, clip_y_origin, rectangles_len, rectangles):
        """function SetClipRectangles
        
        ordering: 
        gc: 
        clip_x_origin: 
        clip_y_origin: 
        rectangles_len: 
        rectangles: 
        
        returns None
        """
        raise NotImplementedError()
    
    def FreeGC(self, gc):
        """function FreeGC
        
        gc: 
        
        returns None
        """
        raise NotImplementedError()
    
    def ClearArea(self, exposures, window, x, y, width, height):
        """function ClearArea
        
        exposures: 
        window: 
        x: 
        y: 
        width: 
        height: 
        
        returns None
        """
        raise NotImplementedError()
    
    def CopyArea(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height):
        """function CopyArea
        
        src_drawable: 
        dst_drawable: 
        gc: 
        src_x: 
        src_y: 
        dst_x: 
        dst_y: 
        width: 
        height: 
        
        returns None
        """
        raise NotImplementedError()
    
    def CopyPlane(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x, dst_y, width, height, bit_plane):
        """function CopyPlane
        
        src_drawable: 
        dst_drawable: 
        gc: 
        src_x: 
        src_y: 
        dst_x: 
        dst_y: 
        width: 
        height: 
        bit_plane: 
        
        returns None
        """
        raise NotImplementedError()
    
    def PolyPoint(self, coordinate_mode, drawable, gc, points_len, points):
        """function PolyPoint
        
        coordinate_mode: 
        drawable: 
        gc: 
        points_len: 
        points: 
        
        returns None
        """
        raise NotImplementedError()
    
    def PolyLine(self, coordinate_mode, drawable, gc, points_len, points):
        """function PolyLine
        
        coordinate_mode: 
        drawable: 
        gc: 
        points_len: 
        points: 
        
        returns None
        """
        raise NotImplementedError()
    
    def PolySegment(self, drawable, gc, segments_len, segments):
        """function PolySegment
        
        drawable: 
        gc: 
        segments_len: 
        segments: 
        
        returns None
        """
        raise NotImplementedError()
    
    def PolyRectangle(self, drawable, gc, rectangles_len, rectangles):
        """function PolyRectangle
        
        drawable: 
        gc: 
        rectangles_len: 
        rectangles: 
        
        returns None
        """
        raise NotImplementedError()
    
    def PolyArc(self, drawable, gc, arcs_len, arcs):
        """function PolyArc
        
        drawable: 
        gc: 
        arcs_len: 
        arcs: 
        
        returns None
        """
        raise NotImplementedError()
    
    def FillPoly(self, drawable, gc, shape, coordinate_mode, points_len, points):
        """function FillPoly
        
        drawable: 
        gc: 
        shape: 
        coordinate_mode: 
        points_len: 
        points: 
        
        returns None
        """
        raise NotImplementedError()
    
    def PolyFillRectangle(self, drawable, gc, rectangles_len, rectangles):
        """function PolyFillRectangle
        
        drawable: 
        gc: 
        rectangles_len: 
        rectangles: 
        
        returns None
        """
        raise NotImplementedError()
    
    def PolyFillArc(self, drawable, gc, arcs_len, arcs):
        """function PolyFillArc
        
        drawable: 
        gc: 
        arcs_len: 
        arcs: 
        
        returns None
        """
        raise NotImplementedError()
    
    def PutImage(self, format, drawable, gc, width, height, dst_x, dst_y, left_pad, depth, data_len, data):
        """function PutImage
        
        format: 
        drawable: 
        gc: 
        width: 
        height: 
        dst_x: 
        dst_y: 
        left_pad: 
        depth: 
        data_len: 
        data: 
        
        returns None
        """
        raise NotImplementedError()
    
    def GetImage(self, format, drawable, x, y, width, height, plane_mask):
        """function GetImage
        
        format: 
        drawable: 
        x: 
        y: 
        width: 
        height: 
        plane_mask: 
        
        returns 
        """
        raise NotImplementedError()
    
    def PolyText8(self, drawable, gc, x, y, items_len, items):
        """function PolyText8
        
        drawable: 
        gc: 
        x: 
        y: 
        items_len: 
        items: 
        
        returns None
        """
        raise NotImplementedError()
    
    def PolyText16(self, drawable, gc, x, y, items_len, items):
        """function PolyText16
        
        drawable: 
        gc: 
        x: 
        y: 
        items_len: 
        items: 
        
        returns None
        """
        raise NotImplementedError()
    
    def ImageText8(self, string_len, drawable, gc, x, y, string):
        """function ImageText8
        
        string_len: 
        drawable: 
        gc: 
        x: 
        y: 
        string: 
        
        returns None
        """
        raise NotImplementedError()
    
    def ImageText16(self, string_len, drawable, gc, x, y, string):
        """function ImageText16
        
        string_len: 
        drawable: 
        gc: 
        x: 
        y: 
        string: 
        
        returns None
        """
        raise NotImplementedError()
    
    def CreateColormap(self, alloc, mid, window, visual):
        """function CreateColormap
        
        alloc: 
        mid: 
        window: 
        visual: 
        
        returns None
        """
        raise NotImplementedError()
    
    def FreeColormap(self, cmap):
        """function FreeColormap
        
        cmap: 
        
        returns None
        """
        raise NotImplementedError()
    
    def CopyColormapAndFree(self, mid, src_cmap):
        """function CopyColormapAndFree
        
        mid: 
        src_cmap: 
        
        returns None
        """
        raise NotImplementedError()
    
    def InstallColormap(self, cmap):
        """function InstallColormap
        
        cmap: 
        
        returns None
        """
        raise NotImplementedError()
    
    def UninstallColormap(self, cmap):
        """function UninstallColormap
        
        cmap: 
        
        returns None
        """
        raise NotImplementedError()
    
    def ListInstalledColormaps(self, window):
        """function ListInstalledColormaps
        
        window: 
        
        returns 
        """
        raise NotImplementedError()
    
    def AllocColor(self, cmap, red, green, blue):
        """function AllocColor
        
        cmap: 
        red: 
        green: 
        blue: 
        
        returns 
        """
        raise NotImplementedError()
    
    def AllocNamedColor(self, cmap, red, green, blue):
        """function AllocNamedColor
        
        cmap: 
        red: 
        green: 
        blue: 
        
        returns 
        """
        raise NotImplementedError()
    
    def AllocColorCells(self, cotiguous, cmap, colors, planes):
        """function AllocColorCells
        
        cotiguous: 
        cmap: 
        colors: 
        planes: 
        
        returns 
        """
        raise NotImplementedError()
    
    def AllocColorPlanes(self, contiguous, cmap, colors, reds, greens, blues):
        """function AllocColorPlanes
        
        contiguous: 
        cmap: 
        colors: 
        reds: 
        greens: 
        blues: 
        
        returns 
        """
        raise NotImplementedError()
    
    def FreeColors(self, cmap, plane_mask, pixels_len, pixels):
        """function FreeColors
        
        cmap: 
        plane_mask: 
        pixels_len: 
        pixels: 
        
        returns None
        """
        raise NotImplementedError()
    
    def SoreColors(self, cmap, items_len, items):
        """function SoreColors
        
        cmap: 
        items_len: 
        items: 
        
        returns None
        """
        raise NotImplementedError()
    
    def StoreNamedColor(self, flags, cmap, pixel, name_len, name):
        """function StoreNamedColor
        
        flags: 
        cmap: 
        pixel: 
        name_len: 
        name: 
        
        returns None
        """
        raise NotImplementedError()
    
    def QueryColors(self, cmap, pixels_len, pixels):
        """function QueryColors
        
        cmap: 
        pixels_len: 
        pixels: 
        
        returns 
        """
        raise NotImplementedError()
    
    def LookupColor(self, cmap, name_len, name):
        """function LookupColor
        
        cmap: 
        name_len: 
        name: 
        
        returns 
        """
        raise NotImplementedError()
    
    def CreateCursor(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        """function CreateCursor
        
        cid: 
        source: 
        mask: 
        fore_red: 
        fore_green: 
        fore_blue: 
        back_red: 
        back_green: 
        back_blue: 
        x: 
        y: 
        
        returns None
        """
        raise NotImplementedError()
    
    def CreateGlyphCursor(self, cid, source, mask, fore_red, fore_green, fore_blue, back_red, back_green, back_blue, x, y):
        """function CreateGlyphCursor
        
        cid: 
        source: 
        mask: 
        fore_red: 
        fore_green: 
        fore_blue: 
        back_red: 
        back_green: 
        back_blue: 
        x: 
        y: 
        
        returns None
        """
        raise NotImplementedError()
    
    def FreeCursor(self, cursor):
        """function FreeCursor
        
        cursor: 
        
        returns None
        """
        raise NotImplementedError()
    
    def RecolorCursor(self, cursor, fore_red, fore_green, fore_blue, back_red, back_green, back_blue):
        """function RecolorCursor
        
        cursor: 
        fore_red: 
        fore_green: 
        fore_blue: 
        back_red: 
        back_green: 
        back_blue: 
        
        returns None
        """
        raise NotImplementedError()
    
    def QueryBestSize(self, _class, drawable, width, height):
        """function QueryBestSize
        
        _class: 
        drawable: 
        width: 
        height: 
        
        returns 
        """
        raise NotImplementedError()
    
    def QueryExtension(self, name_len, name):
        """function QueryExtension
        
        name_len: 
        name: 
        
        returns 
        """
        raise NotImplementedError()
    
    def ListExtensions(self):
        """function ListExtensions
        
        returns 
        """
        raise NotImplementedError()
    
    def ChangeKeyboardMapping(self, keycode_count, first_keycode, keysyms_per_keycode, keysyms):
        """function ChangeKeyboardMapping
        
        keycode_count: 
        first_keycode: 
        keysyms_per_keycode: 
        keysyms: 
        
        returns None
        """
        raise NotImplementedError()
    
    def GetKeyboarMapping(self, first_keycode, count):
        """function GetKeyboarMapping
        
        first_keycode: 
        count: 
        
        returns 
        """
        raise NotImplementedError()
    
    def ChangeKeyboardControl(self, value_mask, value_list):
        """function ChangeKeyboardControl
        
        value_mask: 
        value_list: 
        
        returns 
        """
        raise NotImplementedError()
    
    def GetKeyboardControl(self, value_mask, value_list):
        """function GetKeyboardControl
        
        value_mask: 
        value_list: 
        
        returns None
        """
        raise NotImplementedError()
    
    def Bell(self, percent):
        """function Bell
        
        percent: 
        
        returns None
        """
        raise NotImplementedError()
    
    def ChangePointerControl(self, acceletation_numerator, acceleration_denominator, threshold, do_acceleration, do_threshold):
        """function ChangePointerControl
        
        acceletation_numerator: 
        acceleration_denominator: 
        threshold: 
        do_acceleration: 
        do_threshold: 
        
        returns None
        """
        raise NotImplementedError()
    
    def GetPointerControl(self):
        """function GetPointerControl
        
        returns 
        """
        raise NotImplementedError()
    
    def SetScreenSaver(self, timeout, interval, prefer_blanking, allow_exposures):
        """function SetScreenSaver
        
        timeout: 
        interval: 
        prefer_blanking: 
        allow_exposures: 
        
        returns None
        """
        raise NotImplementedError()
    
    def GetScreenSaver(self):
        """function GetScreenSaver
        
        returns 
        """
        raise NotImplementedError()
    
    def ChangeHosts(self, mode, family, address_len, address):
        """function ChangeHosts
        
        mode: 
        family: 
        address_len: 
        address: 
        
        returns None
        """
        raise NotImplementedError()
    
    def ListHosts(self):
        """function ListHosts
        
        returns 
        """
        raise NotImplementedError()
    
    def SetAccessControl(self, mode):
        """function SetAccessControl
        
        mode: 
        
        returns None
        """
        raise NotImplementedError()
    
    def SetCloseDownMode(self, mode):
        """function SetCloseDownMode
        
        mode: 
        
        returns None
        """
        raise NotImplementedError()
    
    def KillClient(self, resource):
        """function KillClient
        
        resource: 
        
        returns None
        """
        raise NotImplementedError()
    
    def RotateProperties(self, window, atoms_len, delta, atoms):
        """function RotateProperties
        
        window: 
        atoms_len: 
        delta: 
        atoms: 
        
        returns None
        """
        raise NotImplementedError()
    
    def ForceScreenSaver(self, mode):
        """function ForceScreenSaver
        
        mode: 
        
        returns None
        """
        raise NotImplementedError()
    
    def SetPointerMapping(self, map_len, map):
        """function SetPointerMapping
        
        map_len: 
        map: 
        
        returns 
        """
        raise NotImplementedError()
    
    def GetPointerMapping(self):
        """function GetPointerMapping
        
        returns 
        """
        raise NotImplementedError()
    
    def SetModifierMapping(self, keycodes_per_modifier, keycodes):
        """function SetModifierMapping
        
        keycodes_per_modifier: 
        keycodes: 
        
        returns 
        """
        raise NotImplementedError()
    
    def GetModifierMapping(self):
        """function GetModifierMapping
        
        returns 
        """
        raise NotImplementedError()
    
    def NoOperation(self):
        """function NoOperation
        
        returns 
        """
        raise NotImplementedError()
    
    def generate_id(self):
        """function generate_id
        
        returns int
        """
        raise NotImplementedError()
    
    def flush(self):
        """function flush
        
        returns None
        """
        raise NotImplementedError()
    
    def close(self):
        """function close
        
        returns None
        """
        raise NotImplementedError()
    
    def next_event(self):
        """function next_event
        
        returns 
        """
        raise NotImplementedError()
    
    def get_setup(self):
        """function get_setup
        
        returns Setup
        """
        raise NotImplementedError()
    


* Mon 09 Feb 2015 09:15:30 AM JST
@abstractmethod
* Mon 09 Feb 2015 09:15:41 AM JST
    @abstractmethod

* Mon 09 Feb 2015 09:15:56 AM JST
@abstractmethod

* Mon 09 Feb 2015 09:16:06 AM JST
@abstractmethod
    
* Mon 09 Feb 2015 09:17:03 AM JST
            
* Mon 09 Feb 2015 10:15:00 AM JST
GetAtomName
* Mon 09 Feb 2015 10:15:18 AM JST
raise NotImplementedError()
* Mon 09 Feb 2015 10:15:34 AM JST
InternAtom
* Mon 09 Feb 2015 10:15:48 AM JST
only_if_exists, name
* Mon 09 Feb 2015 10:16:20 AM JST
    def QueryTree(self, window):
        """function QueryTree
        
        window: 
        
        returns 
        """
        raise NotImplementedError()

* Mon 09 Feb 2015 10:16:31 AM JST
raise NotImplementedError()
* Mon 09 Feb 2015 10:16:56 AM JST
raise NotImplementedError()
* Mon 09 Feb 2015 10:17:31 AM JST
raise NotImplementedError()
* Mon 09 Feb 2015 10:33:52 AM JST
_abstract
* Mon 09 Feb 2015 10:35:05 AM JST
display
* Mon 09 Feb 2015 10:36:42 AM JST
    def CreateWindow(self, depth, wid, parent, x, y, width, height, border_width,
                     _class, visual, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod
    def DestroyWindow(self, window):
        raise NotImplementedError()

    @abstractmethod
    def ChangeSaveSet(self, mode, window):
        raise NotImplementedError()

    @abstractmethod
    def MapSubwindows(self, window):
        raise NotImplementedError()

    @abstractmethod
    def UnmapSubwindows(self, window):
        raise NotImplementedError()

    @abstractmethod
    def ConfigureWindow(self, window, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod
    def CirculateWindow(self, direction, window):
        raise NotImplementedError()

    @abstractmethod
    def GetGeometry(self, drawable):
        raise NotImplementedError()

    @abstractmethod
    def QueryTree(self, window):
        raise NotImplementedError()

    @abstractmethod
    def InternAtom(self, only_if_exists, name):
        raise NotImplementedError()

    @abstractmethod
    def GetAtomName(self, atom):
        raise NotImplementedError()

    @abstractmethod
    def ChangeProperty(self, mode, window, property, type, format, data_len,
                       data):
        raise NotImplementedError()

    @abstractmethod
    def DeleteProperty(self, window, property):
        raise NotImplementedError()

    @abstractmethod
    def GetProperty(self, delete, window, property, type, long_offset,
                    long_length):
        raise NotImplementedError()

    @abstractmethod
    def ListProperties(self, window):
        raise NotImplementedError()

    @abstractmethod
    def SetSelectionOwner(self, owner, selection, time):
        raise NotImplementedError()

    @abstractmethod
    def GetSelectionOwner(self, selection):
        raise NotImplementedError()

    @abstractmethod
    def ConvertSelection(self, requestor, selection, target, property, time):
        raise NotImplementedError()

    @abstractmethod
    def SendEvent(self, propagate, destination, event_mask, event):
        raise NotImplementedError()

    @abstractmethod
    def GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode,
                    keyboard_mode, confine_to, cursor, time):
        raise NotImplementedError()

    @abstractmethod
    def UngrabPointer(self, time):
        raise NotImplementedError()

    @abstractmethod
    def GrabButton(self, owner_events, grab_window, event_mask, pointer_mode,
                   keyboard_mode, confine_to, cursor, button, modifiers):
        raise NotImplementedError()

    @abstractmethod
    def UngrabButton(self, button, grab_window, modifiers):
        raise NotImplementedError()

    @abstractmethod
    def ChangeActivePointerGrab(self, cursor, time, event_mask):
        raise NotImplementedError()

    @abstractmethod
    def GrabKeyboard(self, owner_events, grab_window, time, pointer_mode,
                     keyboard_mode):
        raise NotImplementedError()

    @abstractmethod
    def UngrabKeyboard(self, time):
        raise NotImplementedError()

    @abstractmethod
    def GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode,
                keyboard_mode):
        raise NotImplementedError()

    @abstractmethod
    def UngrabKey(self, key, grab_window, modifiers):
        raise NotImplementedError()

    @abstractmethod
    def AllowEvents(self, mode, time):
        raise NotImplementedError()

    @abstractmethod
    def GrabServer(self):
        raise NotImplementedError()

    @abstractmethod
    def UngrabServer(self):
        raise NotImplementedError()

    @abstractmethod
    def QueryPointer(self, window):
        raise NotImplementedError()

    @abstractmethod
    def GetMotionEvents(self, window, start, stop):
        raise NotImplementedError()

    @abstractmethod
    def TranslateCoordinates(self, src_window, dst_window, src_x, src_y):
        raise NotImplementedError()

    @abstractmethod
    def WarpPointer(self, src_window, dst_window, src_x, src_y, src_width,
                    src_height, dst_x, dst_y):
        raise NotImplementedError()

    @abstractmethod
    def SetInputFocus(self, revert_to, focus, time):
        raise NotImplementedError()

    @abstractmethod
    def GetInputFocus(self):
        raise NotImplementedError()

    @abstractmethod
    def QueryKeymap(self):
        raise NotImplementedError()

    @abstractmethod
    def OpenFont(self, fid, name_len, name):
        raise NotImplementedError()

    @abstractmethod
    def CloseFont(self, font):
        raise NotImplementedError()

    @abstractmethod
    def QueryFont(self, font):
        raise NotImplementedError()

    @abstractmethod
    def QueryTextExtents(self, font, string_len, string):
        raise NotImplementedError()

    @abstractmethod
    def ListFonts(self, max_names, pattern_len, pattern):
        raise NotImplementedError()

    @abstractmethod
    def ListFontsWithInfo(self, max_names, pattern_len, pattern):
        raise NotImplementedError()

    @abstractmethod
    def SetFontPath(self, font_qty, font):
        raise NotImplementedError()

    @abstractmethod
    def GetFontPath(self):
        raise NotImplementedError()

    @abstractmethod
    def CreatePixmap(self, depth, pid, drawable, width, height):
        raise NotImplementedError()

    @abstractmethod
    def FreePixmap(self, pixmap):
        raise NotImplementedError()

    @abstractmethod
    def CreateGC(self, cid, drawable, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod
    def ChangeGC(self, gc, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod
    def CopyGC(self, src_gc, dst_gc, value_mask):
        raise NotImplementedError()

    @abstractmethod
    def SetDashes(self, gc, dash_offset, dashes_len, dashes):
        raise NotImplementedError()

    @abstractmethod
    def SetClipRectangles(self, ordering, gc, clip_x_origin, clip_y_origin,
                          rectangles_len, rectangles):
        raise NotImplementedError()

    @abstractmethod
    def FreeGC(self, gc):
        raise NotImplementedError()

    @abstractmethod
    def ClearArea(self, exposures, window, x, y, width, height):
        raise NotImplementedError()

    @abstractmethod
    def CopyArea(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x,
                 dst_y, width, height):
        raise NotImplementedError()

    @abstractmethod
    def CopyPlane(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x,
                  dst_y, width, height, bit_plane):
        raise NotImplementedError()

    @abstractmethod
    def PolyPoint(self, coordinate_mode, drawable, gc, points_len, points):
        raise NotImplementedError()

    @abstractmethod
    def PolyLine(self, coordinate_mode, drawable, gc, points_len, points):
        raise NotImplementedError()

    @abstractmethod
    def PolySegment(self, drawable, gc, segments_len, segments):
        raise NotImplementedError()

    @abstractmethod
    def PolyRectangle(self, drawable, gc, rectangles_len, rectangles):
        raise NotImplementedError()

    @abstractmethod
    def PolyArc(self, drawable, gc, arcs_len, arcs):
        raise NotImplementedError()

    @abstractmethod
    def FillPoly(self, drawable, gc, shape, coordinate_mode, points_len, points):
        raise NotImplementedError()

    @abstractmethod
    def PolyFillRectangle(self, drawable, gc, rectangles_len, rectangles):
        raise NotImplementedError()

    @abstractmethod
    def PolyFillArc(self, drawable, gc, arcs_len, arcs):
        raise NotImplementedError()

    @abstractmethod
    def PutImage(self, format, drawable, gc, width, height, dst_x, dst_y,
                 left_pad, depth, data_len, data):
        raise NotImplementedError()

    @abstractmethod
    def GetImage(self, format, drawable, x, y, width, height, plane_mask):
        raise NotImplementedError()

    @abstractmethod
    def PolyText8(self, drawable, gc, x, y, items_len, items):
        raise NotImplementedError()

    @abstractmethod
    def PolyText16(self, drawable, gc, x, y, items_len, items):
        raise NotImplementedError()

    @abstractmethod
    def ImageText8(self, string_len, drawable, gc, x, y, string):
        raise NotImplementedError()

    @abstractmethod
    def ImageText16(self, string_len, drawable, gc, x, y, string):
        raise NotImplementedError()

    @abstractmethod
    def CreateColormap(self, alloc, mid, window, visual):
        raise NotImplementedError()

    @abstractmethod
    def FreeColormap(self, cmap):
        raise NotImplementedError()

    @abstractmethod
    def CopyColormapAndFree(self, mid, src_cmap):
        raise NotImplementedError()

    @abstractmethod
    def InstallColormap(self, cmap):
        raise NotImplementedError()

    @abstractmethod
    def UninstallColormap(self, cmap):
        raise NotImplementedError()

    @abstractmethod
    def ListInstalledColormaps(self, window):
        raise NotImplementedError()

    @abstractmethod
    def AllocColor(self, cmap, red, green, blue):
        raise NotImplementedError()

    @abstractmethod
    def AllocNamedColor(self, cmap, red, green, blue):
        raise NotImplementedError()

    @abstractmethod
    def AllocColorCells(self, cotiguous, cmap, colors, planes):
        raise NotImplementedError()

    @abstractmethod
    def AllocColorPlanes(self, contiguous, cmap, colors, reds, greens, blues):
        raise NotImplementedError()

    @abstractmethod
    def FreeColors(self, cmap, plane_mask, pixels_len, pixels):
        raise NotImplementedError()

    @abstractmethod
    def SoreColors(self, cmap, items_len, items):
        raise NotImplementedError()

    @abstractmethod
    def StoreNamedColor(self, flags, cmap, pixel, name_len, name):
        raise NotImplementedError()

    @abstractmethod
    def QueryColors(self, cmap, pixels_len, pixels):
        raise NotImplementedError()

    @abstractmethod
    def LookupColor(self, cmap, name_len, name):
        raise NotImplementedError()

    @abstractmethod
    def CreateCursor(self, cid, source, mask, fore_red, fore_green, fore_blue,
                     back_red, back_green, back_blue, x, y):
        raise NotImplementedError()

    @abstractmethod
    def CreateGlyphCursor(self, cid, source, mask, fore_red, fore_green,
                          fore_blue, back_red, back_green, back_blue, x, y):
        raise NotImplementedError()

    @abstractmethod
    def FreeCursor(self, cursor):
        raise NotImplementedError()

    @abstractmethod
    def RecolorCursor(self, cursor, fore_red, fore_green, fore_blue,
                      back_red, back_green, back_blue):
        raise NotImplementedError()

    @abstractmethod
    def QueryBestSize(self, _class, drawable, width, height):
        raise NotImplementedError()

    @abstractmethod
    def QueryExtension(self, name_len, name):
        raise NotImplementedError()

    @abstractmethod
    def ListExtensions(self):
        raise NotImplementedError()

    @abstractmethod
    def ChangeKeyboardMapping(self, keycode_count, first_keycode,
                              keysyms_per_keycode, keysyms):
        raise NotImplementedError()

    @abstractmethod
    def GetKeyboarMapping(self, first_keycode, count):
        raise NotImplementedError()

    @abstractmethod
    def ChangeKeyboardControl(self, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod
    def GetKeyboardControl(self, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod
    def Bell(self, percent):
        raise NotImplementedError()

    @abstractmethod
    def ChangePointerControl(
            self, acceletation_numerator, acceleration_denominator,
            threshold, do_acceleration, do_threshold):
        raise NotImplementedError()

    @abstractmethod
    def GetPointerControl(self):
        raise NotImplementedError()

    @abstractmethod
    def SetScreenSaver(self, timeout, interval, prefer_blanking,
                       allow_exposures):
        raise NotImplementedError()

    @abstractmethod
    def GetScreenSaver(self):
        raise NotImplementedError()

    @abstractmethod
    def ChangeHosts(self, mode, family, address_len, address):
        raise NotImplementedError()

    @abstractmethod
    def ListHosts(self):
        raise NotImplementedError()

    @abstractmethod
    def SetAccessControl(self, mode):
        raise NotImplementedError()

    @abstractmethod
    def SetCloseDownMode(self, mode):
        raise NotImplementedError()

    @abstractmethod
    def KillClient(self, resource):
        raise NotImplementedError()

    @abstractmethod
    def RotateProperties(self, window, atoms_len, delta, atoms):
        raise NotImplementedError()

    @abstractmethod
    def ForceScreenSaver(self, mode):
        raise NotImplementedError()

    @abstractmethod
    def SetPointerMapping(self, map_len, map):
        raise NotImplementedError()

    @abstractmethod
    def GetPointerMapping(self):
        raise NotImplementedError()

    @abstractmethod
    def SetModifierMapping(self, keycodes_per_modifier, keycodes):
        raise NotImplementedError()

    @abstractmethod
    def GetModifierMapping(self):
        raise NotImplementedError()

    @abstractmethod
    def NoOperation(self):
        raise NotImplementedError()

    @abstractmethod
    def generate_id(self):
        raise NotImplementedError()

    @abstractmethod
    def flush(self):
        raise NotImplementedError()

    @abstractmethod
    def close(self):
        raise NotImplementedError()

    @abstractmethod
    def next_event(self):
        raise NotImplementedError()

    @abstractmethod
    def get_setup(self):
        raise NotImplementedError()

* Mon 09 Feb 2015 10:36:57 AM JST
    @abstractmethod

* Mon 09 Feb 2015 10:38:45 AM JST

* Mon 09 Feb 2015 10:38:45 AM JST

* Mon 09 Feb 2015 10:38:46 AM JST
        raise NotImplementedError()

* Mon 09 Feb 2015 10:38:51 AM JST
CreateWindow?
* Mon 09 Feb 2015 10:39:53 AM JST
_conn.
* Mon 09 Feb 2015 10:39:58 AM JST
_conn.
* Mon 09 Feb 2015 10:40:05 AM JST
CreateWindow
* Mon 09 Feb 2015 10:40:17 AM JST

* Mon 09 Feb 2015 10:40:17 AM JST

* Mon 09 Feb 2015 10:40:17 AM JST
        raise NotImplementedError()

* Mon 09 Feb 2015 10:40:42 AM JST

* Mon 09 Feb 2015 10:40:42 AM JST

* Mon 09 Feb 2015 10:40:43 AM JST
        raise NotImplementedError()

* Mon 09 Feb 2015 10:40:55 AM JST
None
* Mon 09 Feb 2015 10:41:18 AM JST
# None
* Mon 09 Feb 2015 10:42:01 AM JST
    def ReparentWindow(self, window, parent, x, y):
        """function ReparentWindow
        
        window: 
        parent: 
        x: 
        y: 
        
        returns None
        """
        raise NotImplementedError()
    
    def MapWindow(self, window):
        """function MapWindow
        
        window: 
        
        returns None
        """
        raise NotImplementedError()
    

* Mon 09 Feb 2015 10:42:10 AM JST
    @abstractmethod

* Mon 09 Feb 2015 10:42:26 AM JST
 # None
* Mon 09 Feb 2015 10:43:52 AM JST
# None
* Mon 09 Feb 2015 10:44:01 AM JST
# None
* Mon 09 Feb 2015 10:44:14 AM JST
 # None
* Mon 09 Feb 2015 10:44:18 AM JST
 # None
* Mon 09 Feb 2015 10:44:24 AM JST
 # None
* Mon 09 Feb 2015 10:44:28 AM JST
 # None
* Mon 09 Feb 2015 10:44:31 AM JST
 # None
* Mon 09 Feb 2015 10:44:34 AM JST
 # None
* Mon 09 Feb 2015 10:44:37 AM JST
 # None
* Mon 09 Feb 2015 10:44:40 AM JST
 # None
* Mon 09 Feb 2015 10:44:44 AM JST
 # None
* Mon 09 Feb 2015 10:44:47 AM JST
 # None
* Mon 09 Feb 2015 10:44:50 AM JST
 # None
* Mon 09 Feb 2015 11:01:08 AM JST
            
* Mon 09 Feb 2015 11:01:16 AM JST
raise NotImplementedError()
* Mon 09 Feb 2015 11:06:09 AM JST
raise NotImplementedError()
* Mon 09 Feb 2015 11:06:27 AM JST
ChangeSaveSet?
* Mon 09 Feb 2015 11:06:49 AM JST
CirculateWindow
* Mon 09 Feb 2015 11:07:22 AM JST
GetGeometry
* Mon 09 Feb 2015 11:07:35 AM JST
GetGeometry
* Mon 09 Feb 2015 11:07:45 AM JST
self
* Mon 09 Feb 2015 11:59:18 AM JST
raise NotImplementedError()
* Mon 09 Feb 2015 11:59:57 AM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:00:38 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:01:02 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:01:27 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:01:28 PM JST
self.
* Mon 09 Feb 2015 12:02:04 PM JST
GetProperty?
* Mon 09 Feb 2015 12:02:15 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:02:56 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:03:17 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:03:51 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:04:25 PM JST
cookie = 
* Mon 09 Feb 2015 12:04:26 PM JST
        
* Mon 09 Feb 2015 12:05:27 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:14:26 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:15:21 PM JST
rep
* Mon 09 Feb 2015 12:15:46 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:15:48 PM JST
sef.
* Mon 09 Feb 2015 12:16:23 PM JST
return rep
* Mon 09 Feb 2015 12:16:37 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:16:47 PM JST
owner_events, grab_window, event_mask, pointer_mode,
                   keyboard_mode, confine_to, cursor, button, modifiers
* Mon 09 Feb 2015 12:17:21 PM JST
            
* Mon 09 Feb 2015 12:17:24 PM JST
    
* Mon 09 Feb 2015 12:17:28 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:17:59 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:18:08 PM JST
cursor, time, event_mask
* Mon 09 Feb 2015 12:18:51 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:19:05 PM JST
owner_events, grab_window, time, pointer_mode,
                     keyboard_mode
* Mon 09 Feb 2015 12:19:40 PM JST
            
* Mon 09 Feb 2015 12:20:12 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:20:13 PM JST
cls.
* Mon 09 Feb 2015 12:20:37 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:20:46 PM JST
owner_events, grab_window, modifiers, key, pointer_mode,
                keyboard_mode
* Mon 09 Feb 2015 12:20:49 PM JST
            
* Mon 09 Feb 2015 12:20:53 PM JST
            
* Mon 09 Feb 2015 12:20:58 PM JST
                
* Mon 09 Feb 2015 12:21:04 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:21:45 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:22:00 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:22:16 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:22:37 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:24:48 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:25:16 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:25:26 PM JST
src_window, dst_window, src_x, src_y
* Mon 09 Feb 2015 12:25:56 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:25:57 PM JST
slc.
* Mon 09 Feb 2015 12:26:06 PM JST
src_window, dst_window, src_x, src_y, src_width,
                    src_height, dst_x, dst_y
* Mon 09 Feb 2015 12:26:09 PM JST
                    
* Mon 09 Feb 2015 12:26:29 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:26:36 PM JST
revert_to, focus, time
* Mon 09 Feb 2015 12:26:44 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:27:14 PM JST
self.
* Mon 09 Feb 2015 12:27:23 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:28:03 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:28:11 PM JST
fid, name_len, name
* Mon 09 Feb 2015 12:30:26 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:30:27 PM JST
sldfc.
* Mon 09 Feb 2015 12:30:56 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:47:13 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:47:29 PM JST
font, string_len, string
* Mon 09 Feb 2015 12:47:42 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:47:53 PM JST
max_names, pattern_len, pattern
* Mon 09 Feb 2015 12:49:59 PM JST
max_names, pattern_len, pattern
* Mon 09 Feb 2015 12:50:01 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:50:29 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:50:37 PM JST
font_qty, font
* Mon 09 Feb 2015 12:50:41 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:50:44 PM JST
co
* Mon 09 Feb 2015 12:50:44 PM JST
self.co
* Mon 09 Feb 2015 12:51:18 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:51:28 PM JST
depth, pid, drawable, width, height
* Mon 09 Feb 2015 12:51:31 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:51:33 PM JST
co
* Mon 09 Feb 2015 12:51:33 PM JST
selfc.co
* Mon 09 Feb 2015 12:51:57 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:52:05 PM JST
cid, drawable, value_mask, value_list
* Mon 09 Feb 2015 12:52:09 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:52:18 PM JST
gc, value_mask, value_list
* Mon 09 Feb 2015 12:52:20 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:52:29 PM JST
src_gc, dst_gc, value_mask
* Mon 09 Feb 2015 12:52:42 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:52:50 PM JST
gc, dash_offset, dashes_len, dashes
* Mon 09 Feb 2015 12:52:54 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:53:00 PM JST
slec.
* Mon 09 Feb 2015 12:53:13 PM JST
ordering, gc, clip_x_origin, clip_y_origin,
                          rectangles_len, rectangles
* Mon 09 Feb 2015 12:53:23 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:53:25 PM JST
slec.
* Mon 09 Feb 2015 12:53:41 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:53:51 PM JST
exposures, window, x, y, width, height
* Mon 09 Feb 2015 12:53:58 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:54:12 PM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x,
                 dst_y, width, height
* Mon 09 Feb 2015 12:54:19 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:54:25 PM JST
src_drawable, dst_drawable, gc, src_x, src_y, dst_x,
                  dst_y, width, height, bit_plane
* Mon 09 Feb 2015 12:54:39 PM JST
coordinate_mode, drawable, gc, points_len, points
* Mon 09 Feb 2015 12:54:54 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:55:01 PM JST
coordinate_mode, drawable, gc, points_len, points
* Mon 09 Feb 2015 12:55:08 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:55:16 PM JST
drawable, gc, segments_len, segments
* Mon 09 Feb 2015 12:55:24 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:55:32 PM JST
drawable, gc, rectangles_len, rectangles
* Mon 09 Feb 2015 12:55:36 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:55:42 PM JST
drawable, gc, arcs_len, arcs
* Mon 09 Feb 2015 12:56:06 PM JST
drawable, gc, shape, coordinate_mode, points_len, points
* Mon 09 Feb 2015 12:56:21 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:56:28 PM JST
drawable, gc, rectangles_len, rectangles
* Mon 09 Feb 2015 12:56:31 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:56:38 PM JST
drawable, gc, arcs_len, arcs
* Mon 09 Feb 2015 12:56:48 PM JST
format, drawable, gc, width, height, dst_x, dst_y,
                 left_pad, depth, data_len, data
* Mon 09 Feb 2015 12:56:59 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:57:12 PM JST
format, drawable, x, y, width, height, plane_mask
* Mon 09 Feb 2015 12:57:33 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:57:42 PM JST
drawable, gc, x, y, items_len, items
* Mon 09 Feb 2015 12:57:45 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:57:52 PM JST
drawable, gc, x, y, items_len, items
* Mon 09 Feb 2015 12:58:03 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:58:10 PM JST
PolyText
* Mon 09 Feb 2015 12:58:17 PM JST
string_len, drawable, gc, x, y, string
* Mon 09 Feb 2015 12:58:20 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:58:29 PM JST
string_len, drawable, gc, x, y, string
* Mon 09 Feb 2015 12:58:38 PM JST
alloc, mid, window, visual
* Mon 09 Feb 2015 12:58:51 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:59:02 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:59:14 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:59:22 PM JST
Intall
* Mon 09 Feb 2015 12:59:28 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:59:44 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 12:59:55 PM JST
L
* Mon 09 Feb 2015 12:59:55 PM JST
self.L
* Mon 09 Feb 2015 01:00:01 PM JST


* Mon 09 Feb 2015 01:00:27 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:00:39 PM JST
cmap, red, green, blue
* Mon 09 Feb 2015 01:03:18 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:03:21 PM JST
slc.
* Mon 09 Feb 2015 01:03:33 PM JST
cmap, red, green, blue
* Mon 09 Feb 2015 01:03:38 PM JST
rep
* Mon 09 Feb 2015 01:03:40 PM JST
        rep = cookie.reply()
        # TODO: (Atami) [2015/02/09]
        return rep

* Mon 09 Feb 2015 01:03:49 PM JST
        cookie = self.core.AllocNamedColor(cmap, red, green, blue)
        rep = cookie.reply()
        # TODO: (Atami) [2015/02/09]
        return rep

* Mon 09 Feb 2015 01:03:59 PM JST
AllocNamedColor
* Mon 09 Feb 2015 01:04:08 PM JST
cotiguous, cmap, colors, planes
* Mon 09 Feb 2015 01:04:17 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:04:21 PM JST
c
* Mon 09 Feb 2015 01:04:22 PM JST
slec.c
* Mon 09 Feb 2015 01:04:33 PM JST
contiguous, cmap, colors, reds, greens, blues
* Mon 09 Feb 2015 01:04:54 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:05:04 PM JST
cmap, plane_mask, pixels_len, pixels
* Mon 09 Feb 2015 01:05:12 PM JST
        rep = cookie.reply()
        # TODO: (Atami) [2015/02/09]
        return rep

* Mon 09 Feb 2015 01:05:54 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:05:56 PM JST
selc.
* Mon 09 Feb 2015 01:05:59 PM JST
co
* Mon 09 Feb 2015 01:05:59 PM JST
slef.co
* Mon 09 Feb 2015 01:06:11 PM JST
cmap, items_len, items
* Mon 09 Feb 2015 01:06:23 PM JST
SoreColors
* Mon 09 Feb 2015 01:07:16 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:07:27 PM JST
flags, cmap, pixel, name_len, name
* Mon 09 Feb 2015 01:07:30 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:07:41 PM JST
cmap, pixels_len, pixels
* Mon 09 Feb 2015 01:08:22 PM JST
        cookie = self.core.QueryColors(cmap, pixels_len, pixels)
        rep = cookie.reply()
        # TODO: (Atami) [2015/02/09]
        return rep

* Mon 09 Feb 2015 01:08:26 PM JST
QueryColors
* Mon 09 Feb 2015 01:08:33 PM JST
cmap, name_len, name
* Mon 09 Feb 2015 01:08:58 PM JST
NamedTuple
* Mon 09 Feb 2015 01:09:29 PM JST
from collections import namedtuple
* Mon 09 Feb 2015 01:09:33 PM JST
namedtuple
* Mon 09 Feb 2015 01:18:11 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:18:24 PM JST
cid, source, mask, fore_red, fore_green, fore_blue,
                     back_red, back_green, back_blue, x, y
* Mon 09 Feb 2015 01:18:27 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:18:38 PM JST
cid, source, mask, fore_red, fore_green,
                          fore_blue, back_red, back_green, back_blue, x, y
* Mon 09 Feb 2015 01:18:41 PM JST
            
* Mon 09 Feb 2015 01:18:47 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:18:59 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:19:08 PM JST
cursor, fore_red, fore_green, fore_blue,
                      back_red, back_green, back_blue
* Mon 09 Feb 2015 01:19:18 PM JST
_class, drawable, width, height
* Mon 09 Feb 2015 01:19:59 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:20:11 PM JST
name_len, name
* Mon 09 Feb 2015 01:20:25 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:21:08 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:21:18 PM JST
keycode_count, first_keycode,
                              keysyms_per_keycode, keysyms
* Mon 09 Feb 2015 01:21:23 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:21:33 PM JST
first_keycode, count
* Mon 09 Feb 2015 01:21:52 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:21:59 PM JST
value_mask, value_list
* Mon 09 Feb 2015 01:22:03 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:22:11 PM JST
GetKeyboar
* Mon 09 Feb 2015 01:22:21 PM JST
value_mask, value_list
* Mon 09 Feb 2015 01:22:23 PM JST
cookie = 
* Mon 09 Feb 2015 01:22:28 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:22:40 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:22:55 PM JST
acceletation_numerator, acceleration_denominator,
            threshold, do_acceleration, do_threshold
* Mon 09 Feb 2015 01:23:11 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:23:33 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:23:41 PM JST
timeout, interval, prefer_blanking,
                       allow_exposures
* Mon 09 Feb 2015 01:23:42 PM JST
                       
* Mon 09 Feb 2015 01:23:46 PM JST
            
* Mon 09 Feb 2015 01:23:49 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:24:09 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:24:19 PM JST
mode, family, address_len, address
* Mon 09 Feb 2015 01:24:24 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:24:36 PM JST
        rep = cookie.reply()
        return rep

* Mon 09 Feb 2015 01:24:43 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:24:57 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:25:10 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:25:19 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:25:27 PM JST
window, atoms_len, delta, atoms
* Mon 09 Feb 2015 01:25:31 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:25:43 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:25:59 PM JST


* Mon 09 Feb 2015 01:26:14 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:26:40 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:26:51 PM JST
keycodes_per_modifier, keycodes
* Mon 09 Feb 2015 01:27:06 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:27:20 PM JST
        rep = cookie.reply()
        # TODO: (Atami) [2015/02/09]
        return rep

* Mon 09 Feb 2015 01:27:25 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:27:34 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:27:53 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:27:58 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:28:29 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 01:28:56 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 02:00:07 PM JST

* Mon 09 Feb 2015 02:00:07 PM JST

* Mon 09 Feb 2015 02:00:07 PM JST
        # TODO: (Atami) [2015/02/09]

* Mon 09 Feb 2015 02:00:10 PM JST
cookie.reply()
* Mon 09 Feb 2015 02:00:15 PM JST

* Mon 09 Feb 2015 02:00:15 PM JST

* Mon 09 Feb 2015 02:00:15 PM JST
        rep = 

* Mon 09 Feb 2015 02:03:04 PM JST
request
* Mon 09 Feb 2015 02:03:48 PM JST
request.GetAtomName(atom=5)
* Mon 09 Feb 2015 02:06:11 PM JST
# TODO: (Atami) [2015/02/09]
* Mon 09 Feb 2015 02:06:20 PM JST
rep.name.buf()
* Mon 09 Feb 2015 02:17:05 PM JST
keysyms)
* Mon 09 Feb 2015 02:17:07 PM JST
list(
* Mon 09 Feb 2015 02:19:57 PM JST
rep.keysyms
* Mon 09 Feb 2015 02:21:45 PM JST

* Mon 09 Feb 2015 02:21:45 PM JST

* Mon 09 Feb 2015 02:21:45 PM JST
        # TODO: (Atami) [2015/02/09]

* Mon 09 Feb 2015 02:21:47 PM JST
rep
* Mon 09 Feb 2015 02:22:13 PM JST
zip(*[iter(keysyms)] * rep.keysyms_per_keycode
* Mon 09 Feb 2015 02:24:42 PM JST
[(0L, 0L, 0L, 0L, 0L, 0L, 0L),
 (65307L, 0L, 65307L, 0L, 0L, 0L, 0L),
 (49L, 33L, 49L, 33L, 0L, 0L, 0L),

* Mon 09 Feb 2015 02:29:04 PM JST
request.GetKeyboardMapping(display=d.display, first_keycode=8, count=248).keysyms
* Mon 09 Feb 2015 02:29:07 PM JST
[tuple(x) for x in request.GetKeyboardMapping(display=d.display, first_keycode=8, count=248).keysyms]
* Mon 09 Feb 2015 02:30:30 PM JST
[tuple(x) for x in request.GetKeyboardMapping(display=d.display, first_keycode=8, count=248).keysyms]
* Mon 09 Feb 2015 02:32:27 PM JST
52428822
* Mon 09 Feb 2015 02:32:54 PM JST
width
* Mon 09 Feb 2015 02:32:57 PM JST
height
* Mon 09 Feb 2015 02:33:13 PM JST
depth
* Mon 09 Feb 2015 02:33:29 PM JST
52428822
* Mon 09 Feb 2015 02:35:43 PM JST
GetGeometryReply = 
* Mon 09 Feb 2015 02:36:29 PM JST
'border_width'
* Mon 09 Feb 2015 02:36:54 PM JST
    
* Mon 09 Feb 2015 02:37:40 PM JST
# TODO: (Atami) [2015/02/09]
* Mon 09 Feb 2015 02:37:42 PM JST
rep
* Mon 09 Feb 2015 02:39:30 PM JST
border_width
* Mon 09 Feb 2015 02:39:32 PM JST
reply()
* Mon 09 Feb 2015 02:39:34 PM JST
GetGeometry
* Mon 09 Feb 2015 02:40:00 PM JST
list(
* Mon 09 Feb 2015 02:40:07 PM JST
children_len
* Mon 09 Feb 2015 02:40:11 PM JST
parent
* Mon 09 Feb 2015 02:40:43 PM JST
52428822
* Mon 09 Feb 2015 02:41:10 PM JST
request.QueryTree(display=d.display, window=52428822)
* Mon 09 Feb 2015 02:41:40 PM JST
request.GetGeometry(display=d.display,drawable=52428822)
* Mon 09 Feb 2015 02:46:24 PM JST
named
* Mon 09 Feb 2015 02:46:24 PM JST
QueryTreeReply = named
* Mon 09 Feb 2015 02:47:26 PM JST
        # TODO: (Atami) [2015/02/09]

* Mon 09 Feb 2015 02:47:29 PM JST
rep
* Mon 09 Feb 2015 02:47:40 PM JST
rep.
* Mon 09 Feb 2015 02:48:23 PM JST
rep.root
* Mon 09 Feb 2015 02:48:47 PM JST
rep
* Mon 09 Feb 2015 02:49:11 PM JST
rep.
* Mon 09 Feb 2015 02:57:55 PM JST
GetProperty
* Mon 09 Feb 2015 03:00:10 PM JST
'WM_NAME'
* Mon 09 Feb 2015 03:00:53 PM JST
52428822
* Mon 09 Feb 2015 03:01:39 PM JST
list(
* Mon 09 Feb 2015 03:01:55 PM JST
'WM_CLASS'
* Mon 09 Feb 2015 03:04:06 PM JST
'_NET_WM_NAME'
* Mon 09 Feb 2015 03:04:19 PM JST
290
* Mon 09 Feb 2015 03:08:49 PM JST
52428822
* Mon 09 Feb 2015 03:08:53 PM JST
52428822)
* Mon 09 Feb 2015 03:09:02 PM JST
cc=
* Mon 09 Feb 2015 03:09:04 PM JST
from 
* Mon 09 Feb 2015 03:09:34 PM JST
get_net_wm_name
* Mon 09 Feb 2015 03:10:05 PM JST
get_wm_class
* Mon 09 Feb 2015 03:12:19 PM JST
list(
* Mon 09 Feb 2015 03:12:45 PM JST
str(c.core.GetProperty(0,52428822, 67, 31, 0, 10).reply().value.buf())
* Mon 09 Feb 2015 03:12:47 PM JST
buf())
* Mon 09 Feb 2015 03:12:49 PM JST
str(
* Mon 09 Feb 2015 03:13:16 PM JST
52428822
* Mon 09 Feb 2015 03:15:03 PM JST
# TODO: (Atami) [2015/02/09]
* Mon 09 Feb 2015 03:15:05 PM JST
# TODO: (Atami) [2015/02/09]
* Mon 09 Feb 2015 03:15:09 PM JST
rep
* Mon 09 Feb 2015 03:15:12 PM JST
name
* Mon 09 Feb 2015 03:15:19 PM JST
rep.
* Mon 09 Feb 2015 03:15:49 PM JST
type
* Mon 09 Feb 2015 03:15:53 PM JST
D 
* Mon 09 Feb 2015 03:16:47 PM JST
QueryTreeReply
* Mon 09 Feb 2015 03:17:24 PM JST
request.GetProperty(display=d.display, delete=0, window=52428822,property=67, type=31, long_offset=0, long_length=10)
* Mon 09 Feb 2015 03:18:51 PM JST
type
* Mon 09 Feb 2015 03:31:11 PM JST
52428822
* Mon 09 Feb 2015 03:37:02 PM JST
@abstractmethod
* Mon 09 Feb 2015 03:37:20 PM JST
raise NotImplementedError()
* Mon 09 Feb 2015 03:38:12 PM JST
window, value_mask, value_list
* Mon 09 Feb 2015 03:39:53 PM JST
cookie.reply().atoms
* Mon 09 Feb 2015 03:40:00 PM JST

* Mon 09 Feb 2015 03:40:00 PM JST

* Mon 09 Feb 2015 03:40:00 PM JST
        rep = 

* Mon 09 Feb 2015 03:40:00 PM JST
        rep = 

* Mon 09 Feb 2015 03:40:00 PM JST
        rep = 
        # TODO: (Atami) [2015/02/09]

* Mon 09 Feb 2015 03:40:45 PM JST
52428822
* Mon 09 Feb 2015 03:41:38 PM JST
backing_store
* Mon 09 Feb 2015 03:41:46 PM JST
bit_gravity
* Mon 09 Feb 2015 03:41:50 PM JST
colormap
* Mon 09 Feb 2015 03:45:49 PM JST
all_event_masks
* Mon 09 Feb 2015 03:45:53 PM JST
GetWindowAttributesReply = namedtuple('Getwindowattributesreply', ['(
* Mon 09 Feb 2015 03:46:07 PM JST
all_event_masks
* Mon 09 Feb 2015 03:46:12 PM JST
backing_pixel
* Mon 09 Feb 2015 03:46:16 PM JST
backing_planes
* Mon 09 Feb 2015 03:46:20 PM JST
backing_store
* Mon 09 Feb 2015 03:46:31 PM JST
bit_gravity
* Mon 09 Feb 2015 03:46:38 PM JST
'do_not_propagate_mask', 
* Mon 09 Feb 2015 03:46:48 PM JST
colormap
* Mon 09 Feb 2015 03:46:58 PM JST
map_is_installed
* Mon 09 Feb 2015 03:47:02 PM JST
map_state
* Mon 09 Feb 2015 03:47:06 PM JST
override_redirect
* Mon 09 Feb 2015 03:47:10 PM JST
save_under
* Mon 09 Feb 2015 03:47:14 PM JST
visual
* Mon 09 Feb 2015 03:47:17 PM JST
win_gravity
* Mon 09 Feb 2015 03:47:21 PM JST
your_event_mask
* Mon 09 Feb 2015 03:47:33 PM JST
    
* Mon 09 Feb 2015 03:52:33 PM JST
rep
* Mon 09 Feb 2015 03:53:09 PM JST
backing_pixel
* Mon 09 Feb 2015 03:53:16 PM JST
backing_planes
* Mon 09 Feb 2015 03:53:21 PM JST
backing_store
* Mon 09 Feb 2015 03:53:26 PM JST
bit_gravity
* Mon 09 Feb 2015 03:53:31 PM JST
colormap
* Mon 09 Feb 2015 03:53:38 PM JST
do_not_propagate_mask
* Mon 09 Feb 2015 03:53:45 PM JST
map_is_installed
* Mon 09 Feb 2015 03:53:50 PM JST
map_state
* Mon 09 Feb 2015 03:53:56 PM JST
override_redirect
* Mon 09 Feb 2015 03:54:01 PM JST
save_under
* Mon 09 Feb 2015 03:54:07 PM JST
visual
* Mon 09 Feb 2015 03:54:14 PM JST
win_gravity
* Mon 09 Feb 2015 03:54:20 PM JST
your_event_mask
* Mon 09 Feb 2015 03:54:54 PM JST

* Mon 09 Feb 2015 03:54:54 PM JST

* Mon 09 Feb 2015 03:54:55 PM JST
        # TODO: (Atami) [2015/02/09]

* Mon 09 Feb 2015 03:55:09 PM JST
GetWindowAttributesReply
* Mon 09 Feb 2015 06:33:03 PM JST
GetSelectionOwner
* Mon 09 Feb 2015 06:46:26 PM JST

* Mon 09 Feb 2015 06:46:26 PM JST

* Mon 09 Feb 2015 06:46:26 PM JST
        # TODO: (Atami) [2015/02/09]

* Tue 10 Feb 2015 12:37:00 AM JST
rep.owner
* Tue 10 Feb 2015 12:39:14 AM JST
            
* Tue 10 Feb 2015 12:39:30 AM JST
GetWindowAttributesReply = namedtuple(
    'Getwindowattributesreply', ['all_event_masks', 'backing_pixel',
                                 'backing_planes', 'backing_store',
                                 'bit_gravity', 'colormap',
                                 'do_not_propagate_mask', 'map_is_installed',
                                 'map_state', 'override_redirect', 'save_under',
                                 'visual', 'win_gravity', 'your_event_mask'])

* Tue 10 Feb 2015 01:01:57 AM JST
list(cookie.reply().atoms)
* Tue 10 Feb 2015 12:30:59 PM JST
GrabPointerReply
* Tue 10 Feb 2015 12:32:11 PM JST
GrabKeyboard
* Tue 10 Feb 2015 12:33:05 PM JST
52428822
* Tue 10 Feb 2015 12:34:36 PM JST
'same_screen', 
* Tue 10 Feb 2015 12:34:45 PM JST
QueryPointer = namedtuple('Querypointer', ('child', 'mask', 'root', 'root_x', 'root_y', 'win_x', 'win_y', 'same_screen',
* Tue 10 Feb 2015 12:35:09 PM JST
'root', 
* Tue 10 Feb 2015 12:35:20 PM JST
'same_screen'
* Tue 10 Feb 2015 12:35:36 PM JST
'mask',
* Tue 10 Feb 2015 12:37:17 PM JST
root
* Tue 10 Feb 2015 12:37:24 PM JST
root_y
* Tue 10 Feb 2015 12:37:36 PM JST
win_x
* Tue 10 Feb 2015 12:37:41 PM JST

* Tue 10 Feb 2015 12:37:41 PM JST

* Tue 10 Feb 2015 12:37:41 PM JST
        # TODO: (Atami) [2015/02/09]

* Tue 10 Feb 2015 12:37:43 PM JST
rep
* Tue 10 Feb 2015 12:38:20 PM JST
    
* Tue 10 Feb 2015 12:38:22 PM JST
                                   
* Tue 10 Feb 2015 12:38:34 PM JST
    
* Tue 10 Feb 2015 12:51:53 PM JST
52428822
* Tue 10 Feb 2015 12:53:00 PM JST
raise NotImplementedError()
* Tue 10 Feb 2015 12:58:25 PM JST
cookie.reply().atom
* Tue 10 Feb 2015 12:59:19 PM JST
str(rep.name.buf())
* Tue 10 Feb 2015 01:02:15 PM JST
                                                     
* Tue 10 Feb 2015 02:05:24 PM JST
src_y'
* Tue 10 Feb 2015 02:05:25 PM JST
src_x', 'src_y'
* Tue 10 Feb 2015 02:05:25 PM JST
dst_window', 'src_x', 'src_y'
* Tue 10 Feb 2015 02:05:25 PM JST
src_window','dst_window', 'src_x', 'src_y'
* Tue 10 Feb 2015 02:06:00 PM JST
    
* Tue 10 Feb 2015 02:06:02 PM JST
                                
* Tue 10 Feb 2015 02:06:52 PM JST

* Tue 10 Feb 2015 02:06:52 PM JST

* Tue 10 Feb 2015 02:06:52 PM JST
        # TODO: (Atami) [2015/02/09]

* Tue 10 Feb 2015 02:06:53 PM JST
rep
* Tue 10 Feb 2015 02:09:14 PM JST

* Tue 10 Feb 2015 02:09:14 PM JST

* Tue 10 Feb 2015 02:09:14 PM JST
        # TODO: (Atami) [2015/02/09]

* Tue 10 Feb 2015 02:09:15 PM JST
rep
* Tue 10 Feb 2015 02:11:03 PM JST

* Tue 10 Feb 2015 02:11:03 PM JST

* Tue 10 Feb 2015 02:11:03 PM JST
        # TODO: (Atami) [2015/02/09]

* Tue 10 Feb 2015 02:11:04 PM JST
rep
* Tue 10 Feb 2015 02:11:21 PM JST
rep.keys
* Tue 10 Feb 2015 02:16:13 PM JST
cookie = 
* Tue 10 Feb 2015 02:16:16 PM JST
cookie = 
* Tue 10 Feb 2015 02:19:25 PM JST
char_in
* Tue 10 Feb 2015 02:30:09 PM JST
GetFontPathReply
* Tue 10 Feb 2015 02:30:36 PM JST
GetImageReply
* Tue 10 Feb 2015 02:31:06 PM JST
ListInstalledColormapsReply
* Tue 10 Feb 2015 02:31:33 PM JST
AllocColorReply
* Tue 10 Feb 2015 02:31:54 PM JST
AllocNamedColorReply
* Tue 10 Feb 2015 02:34:34 PM JST
AllocColorCellsReply
* Tue 10 Feb 2015 02:35:20 PM JST
AllocColorPlanesReply
* Tue 10 Feb 2015 02:36:12 PM JST
QueryColorsReply
* Tue 10 Feb 2015 02:36:55 PM JST
LookupColorReply
* Tue 10 Feb 2015 02:37:48 PM JST
QueryBestSizeReply
* Tue 10 Feb 2015 02:38:04 PM JST
QueryExtensionReply
* Tue 10 Feb 2015 03:33:10 PM JST
ListExtensionsReply
* Tue 10 Feb 2015 03:33:33 PM JST
GetKeyboardMappingReply
* Tue 10 Feb 2015 03:33:54 PM JST
GetKeyboardControlReply
* Tue 10 Feb 2015 03:34:56 PM JST
GetPointerControlReply
* Tue 10 Feb 2015 03:35:06 PM JST
acceleration_numerator
* Tue 10 Feb 2015 03:35:13 PM JST
acceleration_denominator
* Tue 10 Feb 2015 03:35:16 PM JST
threshold
* Tue 10 Feb 2015 03:35:32 PM JST
GetScreenSaverReply
* Tue 10 Feb 2015 03:35:39 PM JST
timeout
* Tue 10 Feb 2015 03:35:44 PM JST
interval
* Tue 10 Feb 2015 03:35:51 PM JST
prefer_blanking
* Tue 10 Feb 2015 03:35:55 PM JST
allow_exposures
* Tue 10 Feb 2015 03:36:07 PM JST
ListHostsReply
* Tue 10 Feb 2015 03:36:15 PM JST
mode
* Tue 10 Feb 2015 03:36:20 PM JST
hosts_len
* Tue 10 Feb 2015 03:36:24 PM JST
hosts
* Tue 10 Feb 2015 03:36:32 PM JST
SetPointerMappingReply
* Tue 10 Feb 2015 03:36:40 PM JST
status
* Tue 10 Feb 2015 03:36:47 PM JST
GetPointerMappingReply
* Tue 10 Feb 2015 03:36:55 PM JST
map_len
* Tue 10 Feb 2015 03:37:00 PM JST
map
* Tue 10 Feb 2015 03:37:06 PM JST
SetModifierMappingReply
* Tue 10 Feb 2015 03:37:13 PM JST
status
* Tue 10 Feb 2015 03:37:18 PM JST
GetModifierMappingReply
* Tue 10 Feb 2015 03:37:25 PM JST
keycodes_per_modifier
* Tue 10 Feb 2015 03:37:31 PM JST
keycodes
* Tue 10 Feb 2015 03:41:21 PM JST
QueryFontReply
* Tue 10 Feb 2015 03:41:49 PM JST
QueryFontReply
* Tue 10 Feb 2015 03:42:06 PM JST
max_bounds
* Tue 10 Feb 2015 03:42:16 PM JST
min_char_or_bytes2
* Tue 10 Feb 2015 03:42:26 PM JST
max_char_or_byte2
* Tue 10 Feb 2015 03:42:34 PM JST
default_char
* Tue 10 Feb 2015 03:42:42 PM JST
properties_len
* Tue 10 Feb 2015 03:42:52 PM JST
draw_direction
* Tue 10 Feb 2015 03:43:01 PM JST
min_byte1
* Tue 10 Feb 2015 03:43:11 PM JST
max_byte1
* Tue 10 Feb 2015 03:43:19 PM JST
all_chars_exist
* Tue 10 Feb 2015 03:43:29 PM JST
font_ascent
* Tue 10 Feb 2015 03:43:36 PM JST
char_infos_len
* Tue 10 Feb 2015 03:43:45 PM JST
properties
* Tue 10 Feb 2015 03:43:54 PM JST
char_infos
* Tue 10 Feb 2015 03:44:24 PM JST
QueryTextExtentsReply
* Tue 10 Feb 2015 03:44:41 PM JST
draw_direction
* Tue 10 Feb 2015 03:44:48 PM JST
font_ascent
* Tue 10 Feb 2015 03:45:00 PM JST
font_descent
* Tue 10 Feb 2015 03:45:09 PM JST
overall_ascent
* Tue 10 Feb 2015 03:45:16 PM JST
overall_descent
* Tue 10 Feb 2015 03:45:24 PM JST
overall_width
* Tue 10 Feb 2015 03:45:35 PM JST
overall_left
* Tue 10 Feb 2015 03:45:43 PM JST
overall_right
* Tue 10 Feb 2015 04:18:31 PM JST
ListFontsReply
* Tue 10 Feb 2015 04:19:08 PM JST

* Tue 10 Feb 2015 04:19:08 PM JST

* Tue 10 Feb 2015 04:19:08 PM JST
        # TODO: (Atami) [2015/02/09]

* Tue 10 Feb 2015 04:19:09 PM JST
rep
* Tue 10 Feb 2015 04:20:05 PM JST

* Tue 10 Feb 2015 04:20:05 PM JST

* Tue 10 Feb 2015 04:20:05 PM JST
        # TODO: (Atami) [2015/02/09]

* Tue 10 Feb 2015 04:20:06 PM JST
rep
* Tue 10 Feb 2015 04:20:27 PM JST
name_len
* Tue 10 Feb 2015 04:20:38 PM JST
min_bounds
* Tue 10 Feb 2015 04:20:48 PM JST
max_bounds
* Tue 10 Feb 2015 04:20:56 PM JST
min_char_or_byte2
* Tue 10 Feb 2015 04:21:11 PM JST
    
* Tue 10 Feb 2015 04:21:12 PM JST
            
* Tue 10 Feb 2015 04:21:20 PM JST
max_char_or_byte2
* Tue 10 Feb 2015 04:21:30 PM JST
default_char
* Tue 10 Feb 2015 04:21:39 PM JST
properties_len
* Tue 10 Feb 2015 04:21:47 PM JST
properties_len
* Tue 10 Feb 2015 04:21:57 PM JST
                               
* Tue 10 Feb 2015 04:22:06 PM JST
draw_direction
* Tue 10 Feb 2015 04:22:14 PM JST
min_byte1
* Tue 10 Feb 2015 04:22:22 PM JST
max_byte1
* Tue 10 Feb 2015 04:22:29 PM JST
all_chars_exist
* Tue 10 Feb 2015 04:22:39 PM JST
font_ascent
* Tue 10 Feb 2015 04:22:48 PM JST
font_descent
* Tue 10 Feb 2015 04:22:56 PM JST
replies_hint
* Tue 10 Feb 2015 04:23:03 PM JST
name
* Tue 10 Feb 2015 04:23:21 PM JST

* Tue 10 Feb 2015 04:23:21 PM JST

* Tue 10 Feb 2015 04:23:21 PM JST
        # TODO: (Atami) [2015/02/09]

* Tue 10 Feb 2015 04:23:22 PM JST
rep
* Tue 10 Feb 2015 04:23:42 PM JST
path_len
* Tue 10 Feb 2015 04:23:50 PM JST
path
* Tue 10 Feb 2015 04:24:26 PM JST
GetImageReply
* Tue 10 Feb 2015 04:24:35 PM JST

* Tue 10 Feb 2015 04:24:35 PM JST

* Tue 10 Feb 2015 04:24:35 PM JST
        # TODO: (Atami) [2015/02/09]

* Tue 10 Feb 2015 04:24:40 PM JST
depth
* Tue 10 Feb 2015 04:24:48 PM JST
visual
* Tue 10 Feb 2015 04:24:58 PM JST
length
* Tue 10 Feb 2015 04:25:06 PM JST
data
* Tue 10 Feb 2015 04:25:30 PM JST
ListInstalledColormapsReply
* Tue 10 Feb 2015 04:25:40 PM JST
cmaps_len
* Tue 10 Feb 2015 04:25:52 PM JST
cmaps
* Tue 10 Feb 2015 04:25:58 PM JST

* Tue 10 Feb 2015 04:25:58 PM JST

* Tue 10 Feb 2015 04:25:58 PM JST
        # TODO: (Atami) [2015/02/09]

* Tue 10 Feb 2015 04:26:06 PM JST
AllocColorReply
* Tue 10 Feb 2015 04:26:17 PM JST
red
* Tue 10 Feb 2015 04:26:51 PM JST

* Tue 10 Feb 2015 04:26:51 PM JST

* Tue 10 Feb 2015 04:26:51 PM JST
        # TODO: (Atami) [2015/02/09]

* Tue 10 Feb 2015 04:26:58 PM JST
AllocNamedColorReply
* Tue 10 Feb 2015 04:27:10 PM JST
pixel
* Tue 10 Feb 2015 04:27:16 PM JST
exact_red
* Tue 10 Feb 2015 04:27:25 PM JST
exact_green
* Tue 10 Feb 2015 04:27:33 PM JST
exact_blue
* Tue 10 Feb 2015 04:27:39 PM JST
visual_red
* Tue 10 Feb 2015 04:27:46 PM JST
visual_green
* Tue 10 Feb 2015 04:27:53 PM JST
visual_blue
* Tue 10 Feb 2015 04:28:57 PM JST

* Tue 10 Feb 2015 04:28:57 PM JST

* Tue 10 Feb 2015 04:28:57 PM JST
        # TODO: (Atami) [2015/02/09]

* Tue 10 Feb 2015 04:29:05 PM JST
AllocColorCellsReply
* Tue 10 Feb 2015 04:29:13 PM JST
pixels_len
* Tue 10 Feb 2015 04:29:24 PM JST
masks_len
* Tue 10 Feb 2015 04:29:33 PM JST
pixels
* Tue 10 Feb 2015 04:29:40 PM JST
masks
* Tue 10 Feb 2015 04:29:54 PM JST
AllocColorPlanesReply
* Tue 10 Feb 2015 04:30:05 PM JST
pixels_len
* Tue 10 Feb 2015 04:30:12 PM JST
red_mask
* Tue 10 Feb 2015 04:30:21 PM JST
green_mask
* Tue 10 Feb 2015 04:30:28 PM JST
blue_mask
* Tue 10 Feb 2015 04:30:35 PM JST
pixels
* Tue 10 Feb 2015 04:31:04 PM JST
QueryColorsReply
* Tue 10 Feb 2015 04:31:16 PM JST
colors_len
* Tue 10 Feb 2015 04:31:22 PM JST
colors
* Tue 10 Feb 2015 04:31:35 PM JST
LookupColorReply
* Tue 10 Feb 2015 04:31:48 PM JST
exact_red
* Tue 10 Feb 2015 04:31:56 PM JST
exact_green
* Tue 10 Feb 2015 04:32:04 PM JST
exact_blue
* Tue 10 Feb 2015 04:32:12 PM JST
visual_red
* Tue 10 Feb 2015 04:32:19 PM JST
visual_green
* Tue 10 Feb 2015 04:32:26 PM JST
visual_blue
* Tue 10 Feb 2015 04:33:10 PM JST
# TODO: (Atami) [2015/02/09]
* Tue 10 Feb 2015 04:33:11 PM JST
rep
* Tue 10 Feb 2015 04:33:17 PM JST
QueryBestSizeReply
* Tue 10 Feb 2015 04:33:26 PM JST
width
* Tue 10 Feb 2015 04:33:35 PM JST
height
* Tue 10 Feb 2015 04:33:48 PM JST
QueryExtensionReply
* Tue 10 Feb 2015 04:33:58 PM JST
present
* Tue 10 Feb 2015 04:34:04 PM JST
major_opcode
* Tue 10 Feb 2015 04:34:12 PM JST
first_event
* Tue 10 Feb 2015 04:34:18 PM JST
first_error
* Tue 10 Feb 2015 04:34:38 PM JST
ListExtensionsReply
* Tue 10 Feb 2015 04:34:47 PM JST
names_len
* Tue 10 Feb 2015 04:34:54 PM JST
names
* Tue 10 Feb 2015 04:35:28 PM JST
GetKeyboardMappingReply
* Tue 10 Feb 2015 04:36:16 PM JST
rep = cookie.reply()
* Tue 10 Feb 2015 04:36:37 PM JST
global_auto_repeat
* Tue 10 Feb 2015 04:36:47 PM JST
led_mask
* Tue 10 Feb 2015 04:36:55 PM JST
key_click_percent
* Tue 10 Feb 2015 04:37:01 PM JST
bell_percent
* Tue 10 Feb 2015 04:37:07 PM JST
bell_pitch
* Tue 10 Feb 2015 04:37:14 PM JST
bell_duration
* Tue 10 Feb 2015 04:37:22 PM JST
auto_repeats
* Tue 10 Feb 2015 04:37:56 PM JST
GetScreenSaverReply
* Tue 10 Feb 2015 04:38:06 PM JST
timeout
* Tue 10 Feb 2015 04:38:12 PM JST
interval
* Tue 10 Feb 2015 04:38:19 PM JST
prefer_blanking
* Tue 10 Feb 2015 04:38:25 PM JST
allow_exposures
* Tue 10 Feb 2015 04:39:02 PM JST
        return _reply.GetScreenSaverReply(timeout=rep.timeout,
                                          interval=rep.interval,
                                          prefer_blanking=rep.prefer_blanking,
                                          allow_exposures=rep.allow_exposures)

* Tue 10 Feb 2015 04:39:18 PM JST
acceleration_numerator
* Tue 10 Feb 2015 04:39:26 PM JST
acceleration_denominator
* Tue 10 Feb 2015 04:39:33 PM JST
threshold
* Tue 10 Feb 2015 04:39:47 PM JST
ListHostsReply
* Tue 10 Feb 2015 04:39:57 PM JST
mode
* Tue 10 Feb 2015 04:40:03 PM JST
hosts_len
* Tue 10 Feb 2015 04:40:11 PM JST
hosts
* Tue 10 Feb 2015 04:40:24 PM JST
GetPointerMappingReply
* Tue 10 Feb 2015 04:40:32 PM JST
SetPointerMappingReply
* Tue 10 Feb 2015 04:40:47 PM JST
rep
* Tue 10 Feb 2015 04:41:00 PM JST
map_len
* Tue 10 Feb 2015 04:41:06 PM JST
map
* Tue 10 Feb 2015 04:41:32 PM JST
SetModifierMappingReply
* Tue 10 Feb 2015 04:41:54 PM JST
GetModifierMappingReply
* Tue 10 Feb 2015 04:42:05 PM JST
keycodes_per_modifier
* Tue 10 Feb 2015 04:42:14 PM JST
keycodes
* Tue 10 Feb 2015 04:58:40 PM JST
keys()
* Tue 10 Feb 2015 04:59:40 PM JST
resource_id_base'
* Tue 10 Feb 2015 05:02:29 PM JST
'protocol_major', 'protocol_minor'
* Tue 10 Feb 2015 05:02:50 PM JST
'protocol_major'
* Tue 10 Feb 2015 05:14:34 PM JST
'protocol_minor
* Tue 10 Feb 2015 05:19:20 PM JST
keys()
* Tue 10 Feb 2015 05:21:59 PM JST
image_byte_order
* Tue 10 Feb 2015 05:22:36 PM JST
pixmap_formats_len
* Tue 10 Feb 2015 05:22:48 PM JST
pixmap_formats
* Tue 10 Feb 2015 05:24:11 PM JST
bitmap_format_scanline_unit
* Tue 10 Feb 2015 05:24:35 PM JST
bitmap_format_scanline_pad
* Tue 10 Feb 2015 05:25:21 PM JST
bitmap_format_scanline_unit
* Tue 10 Feb 2015 05:25:33 PM JST
bitmap_format_scanline_pad
* Tue 10 Feb 2015 05:25:53 PM JST
bitmap_format_bit_order
* Tue 10 Feb 2015 05:27:59 PM JST
motion_buffer_size
* Tue 10 Feb 2015 05:28:51 PM JST
maximum_request_length
* Tue 10 Feb 2015 05:29:04 PM JST
keys()
* Tue 10 Feb 2015 05:29:41 PM JST
len(
* Tue 10 Feb 2015 06:03:32 PM JST
black_pixel
* Tue 10 Feb 2015 06:07:53 PM JST

* Tue 10 Feb 2015 06:07:53 PM JST

* Tue 10 Feb 2015 06:07:53 PM JST
                             'bits_per_pixel',

* Tue 10 Feb 2015 06:08:07 PM JST
                             
* Tue 10 Feb 2015 09:59:27 PM JST
d.display.info._data
* Tue 10 Feb 2015 09:59:36 PM JST
keys()
* Tue 10 Feb 2015 10:06:40 PM JST
/usr/share/pyshared/Xlib/
* Tue 10 Feb 2015 10:10:16 PM JST

* Tue 10 Feb 2015 10:10:17 PM JST

* Tue 10 Feb 2015 10:10:17 PM JST
        # TODO: (Atami) [2015/02/09]

* Tue 10 Feb 2015 10:10:21 PM JST
return 
* Tue 10 Feb 2015 10:11:12 PM JST
Setup
* Tue 10 Feb 2015 10:12:34 PM JST
protocol_major_version
* Tue 10 Feb 2015 10:12:41 PM JST
    
* Tue 10 Feb 2015 10:12:53 PM JST
protocol_minor_version
* Tue 10 Feb 2015 10:14:17 PM JST
setup.status,
* Tue 10 Feb 2015 10:14:30 PM JST
reason=str(setup.reason.buf())
* Tue 10 Feb 2015 10:14:34 PM JST
                
* Tue 10 Feb 2015 10:14:36 PM JST
                
* Tue 10 Feb 2015 10:15:37 PM JST
protocol_major_version
* Tue 10 Feb 2015 10:15:44 PM JST
protocol_minor_version
* Tue 10 Feb 2015 10:15:52 PM JST
vendor
* Tue 10 Feb 2015 10:15:58 PM JST
release_number
* Tue 10 Feb 2015 10:16:04 PM JST
resource_id_base
* Tue 10 Feb 2015 10:16:10 PM JST
resource_id_mask
* Tue 10 Feb 2015 10:16:16 PM JST
image_byte_order
* Tue 10 Feb 2015 10:16:25 PM JST
bitmap_format_scanline_unit
* Tue 10 Feb 2015 10:16:33 PM JST
bitmap_format_scanline_pad
* Tue 10 Feb 2015 10:16:39 PM JST
bitmap_format_bit_order
* Tue 10 Feb 2015 10:16:45 PM JST
pixmap_formats
* Tue 10 Feb 2015 10:16:50 PM JST
roots
* Tue 10 Feb 2015 10:16:59 PM JST
motion_buffer_size
* Tue 10 Feb 2015 10:17:07 PM JST
maximum_request_length
* Tue 10 Feb 2015 10:17:13 PM JST
min_keycode
* Tue 10 Feb 2015 10:17:21 PM JST
max_keycode
* Tue 10 Feb 2015 10:32:42 PM JST
setup.vendor
* Tue 10 Feb 2015 10:34:23 PM JST
pixmaps
* Tue 10 Feb 2015 10:36:29 PM JST
bits_per_pixel
* Tue 10 Feb 2015 10:36:38 PM JST
scanline_pad
* Tue 10 Feb 2015 10:37:42 PM JST
pixmap_formats
* Tue 10 Feb 2015 10:37:56 PM JST
list(
* Tue 10 Feb 2015 10:38:22 PM JST
screen
* Tue 10 Feb 2015 10:39:40 PM JST
list(
* Tue 10 Feb 2015 10:40:13 PM JST
root
* Tue 10 Feb 2015 10:40:26 PM JST
width_in_pixels
* Tue 10 Feb 2015 10:40:39 PM JST
height_in_pixels
* Tue 10 Feb 2015 10:40:45 PM JST
width_in_millimeters
* Tue 10 Feb 2015 10:40:54 PM JST
                    
* Tue 10 Feb 2015 10:41:02 PM JST
height_in_millimeters
* Tue 10 Feb 2015 10:41:09 PM JST
allowed_depths
* Tue 10 Feb 2015 10:41:16 PM JST
root_depth
* Tue 10 Feb 2015 10:41:22 PM JST
root_visual
* Tue 10 Feb 2015 10:41:30 PM JST
default_colormap
* Tue 10 Feb 2015 10:41:39 PM JST
white_pixel
* Tue 10 Feb 2015 10:41:45 PM JST
black_pixel
* Tue 10 Feb 2015 10:41:52 PM JST
min_installed_maps
* Tue 10 Feb 2015 10:41:58 PM JST
backing_store
* Tue 10 Feb 2015 10:42:06 PM JST
save_unders
* Tue 10 Feb 2015 10:42:13 PM JST
current_input_masks
* Tue 10 Feb 2015 10:42:38 PM JST
setup.
* Tue 10 Feb 2015 10:42:55 PM JST
0]
* Tue 10 Feb 2015 10:44:48 PM JST
list(
* Tue 10 Feb 2015 10:49:11 PM JST
visual_id
* Tue 10 Feb 2015 10:49:41 PM JST
visual_id
* Tue 10 Feb 2015 10:49:47 PM JST
bits_per_rgb_value
* Tue 10 Feb 2015 10:49:58 PM JST
colormap_entries
* Tue 10 Feb 2015 10:50:07 PM JST
red_mask
* Tue 10 Feb 2015 10:50:15 PM JST
green_mask
* Tue 10 Feb 2015 10:51:50 PM JST
visuals
* Tue 10 Feb 2015 10:51:51 PM JST
0].visuals
* Tue 10 Feb 2015 10:51:52 PM JST
allowed_depths[0].visuals
* Tue 10 Feb 2015 10:52:43 PM JST
allowed_depths
* Wed 11 Feb 2015 09:34:52 AM JST
                               
* Wed 11 Feb 2015 09:44:14 AM JST
abstra
* Wed 11 Feb 2015 09:44:22 AM JST
object
* Wed 11 Feb 2015 09:44:51 AM JST
_abstract.XClient
* Wed 11 Feb 2015 09:46:12 AM JST
def
* Wed 11 Feb 2015 09:48:13 AM JST
xobj/
* Wed 11 Feb 2015 09:48:13 AM JST
wxcb/xobj/
* Wed 11 Feb 2015 09:48:50 AM JST

* Wed 11 Feb 2015 09:48:50 AM JST

* Wed 11 Feb 2015 09:48:51 AM JST
import wxcb.conn

* Wed 11 Feb 2015 09:49:04 AM JST

* Wed 11 Feb 2015 09:49:05 AM JST

* Wed 11 Feb 2015 09:49:05 AM JST
import wxcb.conn

* Wed 11 Feb 2015 10:12:05 AM JST
display_name
* Wed 11 Feb 2015 10:41:14 AM JST
_xcbclient
* Wed 11 Feb 2015 10:41:16 AM JST
セックス依存症
* Wed 11 Feb 2015 10:41:49 AM JST
self._display = display
* Wed 11 Feb 2015 10:45:20 AM JST
    @abstractmethod # None
    def CreateWindow(self, depth, wid, parent, x, y, width, height, border_width,
                     _class, visual, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangeWindowAttributes(self, window, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod
    def GetWindowAttributes(self, window):
        raise NotImplementedError()

    @abstractmethod # None
    def DestroyWindow(self, window):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangeSaveSet(self, mode, window):
        raise NotImplementedError()

    @abstractmethod # None
    def ReparentWindow(self, window, parent, x, y):
        raise NotImplementedError()

    @abstractmethod # None
    def MapWindow(self, window):
        raise NotImplementedError()

    @abstractmethod # None
    def MapSubwindows(self, window):
        raise NotImplementedError()

    @abstractmethod # None
    def UnmapSubwindows(self, window):
        raise NotImplementedError()

    @abstractmethod # None
    def ConfigureWindow(self, window, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod # None
    def CirculateWindow(self, direction, window):
        raise NotImplementedError()

    @abstractmethod # GetGeometryReply
    def GetGeometry(self, drawable):
        raise NotImplementedError()

    @abstractmethod # QueryTreeReply
    def QueryTree(self, window):
        raise NotImplementedError()

    @abstractmethod # int
    def InternAtom(self, only_if_exists, name):
        raise NotImplementedError()

    @abstractmethod # str
    def GetAtomName(self, atom):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangeProperty(self, mode, window, property, type, format, data_len,
                       data):
        raise NotImplementedError()

    @abstractmethod # None
    def DeleteProperty(self, window, property):
        raise NotImplementedError()

    @abstractmethod # GetPropertyReply
    def GetProperty(self, delete, window, property, type, long_offset,
                    long_length):
        raise NotImplementedError()

    @abstractmethod # list
    def ListProperties(self, window):
        raise NotImplementedError()

    @abstractmethod # None
    def SetSelectionOwner(self, owner, selection, time):
        raise NotImplementedError()

    @abstractmethod
    def GetSelectionOwner(self, selection):
        raise NotImplementedError()

    @abstractmethod # None
    def ConvertSelection(self, requestor, selection, target, property, time):
        raise NotImplementedError()

    @abstractmethod # None
    def SendEvent(self, propagate, destination, event_mask, event):
        raise NotImplementedError()

    @abstractmethod
    def GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode,
                    keyboard_mode, confine_to, cursor, time):
        raise NotImplementedError()

    @abstractmethod # None
    def UngrabPointer(self, time):
        raise NotImplementedError()

    @abstractmethod # None
    def GrabButton(self, owner_events, grab_window, event_mask, pointer_mode,
                   keyboard_mode, confine_to, cursor, button, modifiers):
        raise NotImplementedError()

    @abstractmethod # None
    def UngrabButton(self, button, grab_window, modifiers):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangeActivePointerGrab(self, cursor, time, event_mask):
        raise NotImplementedError()

    @abstractmethod
    def GrabKeyboard(self, owner_events, grab_window, time, pointer_mode,
                     keyboard_mode):
        raise NotImplementedError()

    @abstractmethod # None
    def UngrabKeyboard(self, time):
        raise NotImplementedError()

    @abstractmethod # None
    def GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode,
                keyboard_mode):
        raise NotImplementedError()

    @abstractmethod # None
    def UngrabKey(self, key, grab_window, modifiers):
        raise NotImplementedError()

    @abstractmethod # None
    def AllowEvents(self, mode, time):
        raise NotImplementedError()

    @abstractmethod # None
    def GrabServer(self):
        raise NotImplementedError()

    @abstractmethod # None
    def UngrabServer(self):
        raise NotImplementedError()

    @abstractmethod
    def QueryPointer(self, window):
        raise NotImplementedError()

    @abstractmethod
    def GetMotionEvents(self, window, start, stop):
        raise NotImplementedError()

    @abstractmethod
    def TranslateCoordinates(self, src_window, dst_window, src_x, src_y):
        raise NotImplementedError()

    @abstractmethod # None
    def WarpPointer(self, src_window, dst_window, src_x, src_y, src_width,
                    src_height, dst_x, dst_y):
        raise NotImplementedError()

    @abstractmethod # None
    def SetInputFocus(self, revert_to, focus, time):
        raise NotImplementedError()

    @abstractmethod
    def GetInputFocus(self):
        raise NotImplementedError()

    @abstractmethod
    def QueryKeymap(self):
        raise NotImplementedError()

    @abstractmethod # None
    def OpenFont(self, fid, name_len, name):
        raise NotImplementedError()

    @abstractmethod
    def CloseFont(self, font):
        raise NotImplementedError()

    @abstractmethod
    def QueryFont(self, font):
        raise NotImplementedError()

    @abstractmethod
    def QueryTextExtents(self, font, string_len, string):
        raise NotImplementedError()

    @abstractmethod
    def ListFonts(self, max_names, pattern_len, pattern):
        raise NotImplementedError()

    @abstractmethod
    def ListFontsWithInfo(self, max_names, pattern_len, pattern):
        raise NotImplementedError()

    @abstractmethod # None
    def SetFontPath(self, font_qty, font):
        raise NotImplementedError()

    @abstractmethod
    def GetFontPath(self):
        raise NotImplementedError()

    @abstractmethod # None
    def CreatePixmap(self, depth, pid, drawable, width, height):
        raise NotImplementedError()

    @abstractmethod # None
    def FreePixmap(self, pixmap):
        raise NotImplementedError()

    @abstractmethod # None
    def CreateGC(self, cid, drawable, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangeGC(self, gc, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod # None
    def CopyGC(self, src_gc, dst_gc, value_mask):
        raise NotImplementedError()

    @abstractmethod # None
    def SetDashes(self, gc, dash_offset, dashes_len, dashes):
        raise NotImplementedError()

    @abstractmethod # None
    def SetClipRectangles(self, ordering, gc, clip_x_origin, clip_y_origin,
                          rectangles_len, rectangles):
        raise NotImplementedError()

    @abstractmethod # None
    def FreeGC(self, gc):
        raise NotImplementedError()

    @abstractmethod # None
    def ClearArea(self, exposures, window, x, y, width, height):
        raise NotImplementedError()

    @abstractmethod # None
    def CopyArea(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x,
                 dst_y, width, height):
        raise NotImplementedError()

    @abstractmethod # None
    def CopyPlane(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x,
                  dst_y, width, height, bit_plane):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyPoint(self, coordinate_mode, drawable, gc, points_len, points):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyLine(self, coordinate_mode, drawable, gc, points_len, points):
        raise NotImplementedError()

    @abstractmethod # None
    def PolySegment(self, drawable, gc, segments_len, segments):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyRectangle(self, drawable, gc, rectangles_len, rectangles):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyArc(self, drawable, gc, arcs_len, arcs):
        raise NotImplementedError()

    @abstractmethod # None
    def FillPoly(self, drawable, gc, shape, coordinate_mode, points_len, points):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyFillRectangle(self, drawable, gc, rectangles_len, rectangles):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyFillArc(self, drawable, gc, arcs_len, arcs):
        raise NotImplementedError()

    @abstractmethod # None
    def PutImage(self, format, drawable, gc, width, height, dst_x, dst_y,
                 left_pad, depth, data_len, data):
        raise NotImplementedError()

    @abstractmethod
    def GetImage(self, format, drawable, x, y, width, height, plane_mask):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyText8(self, drawable, gc, x, y, items_len, items):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyText16(self, drawable, gc, x, y, items_len, items):
        raise NotImplementedError()

    @abstractmethod # None
    def ImageText8(self, string_len, drawable, gc, x, y, string):
        raise NotImplementedError()

    @abstractmethod # None
    def ImageText16(self, string_len, drawable, gc, x, y, string):
        raise NotImplementedError()

    @abstractmethod # None
    def CreateColormap(self, alloc, mid, window, visual):
        raise NotImplementedError()

    @abstractmethod # None
    def FreeColormap(self, cmap):
        raise NotImplementedError()

    @abstractmethod # None
    def CopyColormapAndFree(self, mid, src_cmap):
        raise NotImplementedError()

    @abstractmethod # None
    def InstallColormap(self, cmap):
        raise NotImplementedError()

    @abstractmethod # None
    def UninstallColormap(self, cmap):
        raise NotImplementedError()

    @abstractmethod
    def ListInstalledColormaps(self, window):
        raise NotImplementedError()

    @abstractmethod
    def AllocColor(self, cmap, red, green, blue):
        raise NotImplementedError()

    @abstractmethod
    def AllocNamedColor(self, cmap, red, green, blue):
        raise NotImplementedError()

    @abstractmethod
    def AllocColorCells(self, cotiguous, cmap, colors, planes):
        raise NotImplementedError()

    @abstractmethod
    def AllocColorPlanes(self, contiguous, cmap, colors, reds, greens, blues):
        raise NotImplementedError()

    @abstractmethod # None
    def FreeColors(self, cmap, plane_mask, pixels_len, pixels):
        raise NotImplementedError()

    @abstractmethod # None
    def StoreColors(self, cmap, items_len, items):
        raise NotImplementedError()

    @abstractmethod # None
    def StoreNamedColor(self, flags, cmap, pixel, name_len, name):
        raise NotImplementedError()

    @abstractmethod
    def QueryColors(self, cmap, pixels_len, pixels):
        raise NotImplementedError()

    @abstractmethod
    def LookupColor(self, cmap, name_len, name):
        raise NotImplementedError()

    @abstractmethod # None
    def CreateCursor(self, cid, source, mask, fore_red, fore_green, fore_blue,
                     back_red, back_green, back_blue, x, y):
        raise NotImplementedError()

    @abstractmethod # None
    def CreateGlyphCursor(self, cid, source, mask, fore_red, fore_green,
                          fore_blue, back_red, back_green, back_blue, x, y):
        raise NotImplementedError()

    @abstractmethod # None
    def FreeCursor(self, cursor):
        raise NotImplementedError()

    @abstractmethod # None
    def RecolorCursor(self, cursor, fore_red, fore_green, fore_blue,
                      back_red, back_green, back_blue):
        raise NotImplementedError()

    @abstractmethod
    def QueryBestSize(self, _class, drawable, width, height):
        raise NotImplementedError()

    @abstractmethod
    def QueryExtension(self, name_len, name):
        raise NotImplementedError()

    @abstractmethod
    def ListExtensions(self):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangeKeyboardMapping(self, keycode_count, first_keycode,
                              keysyms_per_keycode, keysyms):
        raise NotImplementedError()

    @abstractmethod # list
    def GetKeyboardMapping(self, first_keycode, count):
        raise NotImplementedError()

    @abstractmethod
    def ChangeKeyboardControl(self, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod # None
    def GetKeyboardControl(self, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod # None
    def Bell(self, percent):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangePointerControl(
            self, acceletation_numerator, acceleration_denominator,
            threshold, do_acceleration, do_threshold):
        raise NotImplementedError()

    @abstractmethod
    def GetPointerControl(self):
        raise NotImplementedError()

    @abstractmethod # None
    def SetScreenSaver(self, timeout, interval, prefer_blanking,
                       allow_exposures):
        raise NotImplementedError()

    @abstractmethod
    def GetScreenSaver(self):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangeHosts(self, mode, family, address_len, address):
        raise NotImplementedError()

    @abstractmethod
    def ListHosts(self):
        raise NotImplementedError()

    @abstractmethod # None
    def SetAccessControl(self, mode):
        raise NotImplementedError()

    @abstractmethod # None
    def SetCloseDownMode(self, mode):
        raise NotImplementedError()

    @abstractmethod # None
    def KillClient(self, resource):
        raise NotImplementedError()

    @abstractmethod # None
    def RotateProperties(self, window, atoms_len, delta, atoms):
        raise NotImplementedError()

    @abstractmethod # None
    def ForceScreenSaver(self, mode):
        raise NotImplementedError()

    @abstractmethod
    def SetPointerMapping(self, map_len, map):
        raise NotImplementedError()

    @abstractmethod
    def GetPointerMapping(self):
        raise NotImplementedError()

    @abstractmethod
    def SetModifierMapping(self, keycodes_per_modifier, keycodes):
        raise NotImplementedError()

    @abstractmethod
    def GetModifierMapping(self):
        raise NotImplementedError()

    @abstractmethod
    def NoOperation(self): # None
        raise NotImplementedError()

    @abstractmethod
    def generate_id(self):
        raise NotImplementedError()

    @abstractmethod # None
    def flush(self):
        raise NotImplementedError()

    @abstractmethod # None
    def close(self):
        raise NotImplementedError()

    @abstractmethod
    def next_event(self):
        raise NotImplementedError()

    @abstractmethod # int
    def get_setup(self):
        raise NotImplementedError()

* Wed 11 Feb 2015 10:45:29 AM JST

* Wed 11 Feb 2015 10:45:29 AM JST

* Wed 11 Feb 2015 10:45:29 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:45:30 AM JST

* Wed 11 Feb 2015 10:45:30 AM JST

* Wed 11 Feb 2015 10:45:30 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:45:31 AM JST

* Wed 11 Feb 2015 10:45:31 AM JST

* Wed 11 Feb 2015 10:45:31 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:45:33 AM JST

* Wed 11 Feb 2015 10:45:33 AM JST

* Wed 11 Feb 2015 10:45:33 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:45:34 AM JST

* Wed 11 Feb 2015 10:45:34 AM JST

* Wed 11 Feb 2015 10:45:34 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:45:35 AM JST

* Wed 11 Feb 2015 10:45:35 AM JST

* Wed 11 Feb 2015 10:45:35 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:45:48 AM JST

* Wed 11 Feb 2015 10:45:48 AM JST

* Wed 11 Feb 2015 10:45:49 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:45:58 AM JST

* Wed 11 Feb 2015 10:45:58 AM JST

* Wed 11 Feb 2015 10:45:58 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:01 AM JST

* Wed 11 Feb 2015 10:46:01 AM JST

* Wed 11 Feb 2015 10:46:01 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:02 AM JST

* Wed 11 Feb 2015 10:46:02 AM JST

* Wed 11 Feb 2015 10:46:02 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:03 AM JST

* Wed 11 Feb 2015 10:46:03 AM JST

* Wed 11 Feb 2015 10:46:03 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:03 AM JST

* Wed 11 Feb 2015 10:46:03 AM JST

* Wed 11 Feb 2015 10:46:03 AM JST
    @abstractmethod # GetGeometryReply

* Wed 11 Feb 2015 10:46:04 AM JST

* Wed 11 Feb 2015 10:46:04 AM JST

* Wed 11 Feb 2015 10:46:04 AM JST
    @abstractmethod # QueryTreeReply

* Wed 11 Feb 2015 10:46:04 AM JST

* Wed 11 Feb 2015 10:46:04 AM JST

* Wed 11 Feb 2015 10:46:04 AM JST
    @abstractmethod # int

* Wed 11 Feb 2015 10:46:05 AM JST

* Wed 11 Feb 2015 10:46:05 AM JST

* Wed 11 Feb 2015 10:46:05 AM JST
    @abstractmethod # str

* Wed 11 Feb 2015 10:46:05 AM JST

* Wed 11 Feb 2015 10:46:05 AM JST

* Wed 11 Feb 2015 10:46:05 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:06 AM JST

* Wed 11 Feb 2015 10:46:06 AM JST

* Wed 11 Feb 2015 10:46:06 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:07 AM JST

* Wed 11 Feb 2015 10:46:07 AM JST

* Wed 11 Feb 2015 10:46:07 AM JST
    @abstractmethod # GetPropertyReply

* Wed 11 Feb 2015 10:46:08 AM JST

* Wed 11 Feb 2015 10:46:08 AM JST

* Wed 11 Feb 2015 10:46:08 AM JST
    @abstractmethod # list

* Wed 11 Feb 2015 10:46:08 AM JST

* Wed 11 Feb 2015 10:46:08 AM JST

* Wed 11 Feb 2015 10:46:08 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:09 AM JST

* Wed 11 Feb 2015 10:46:09 AM JST

* Wed 11 Feb 2015 10:46:09 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:09 AM JST

* Wed 11 Feb 2015 10:46:09 AM JST

* Wed 11 Feb 2015 10:46:09 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:10 AM JST

* Wed 11 Feb 2015 10:46:10 AM JST

* Wed 11 Feb 2015 10:46:10 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:10 AM JST

* Wed 11 Feb 2015 10:46:10 AM JST

* Wed 11 Feb 2015 10:46:10 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:11 AM JST

* Wed 11 Feb 2015 10:46:11 AM JST

* Wed 11 Feb 2015 10:46:11 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:12 AM JST

* Wed 11 Feb 2015 10:46:12 AM JST

* Wed 11 Feb 2015 10:46:12 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:13 AM JST

* Wed 11 Feb 2015 10:46:13 AM JST

* Wed 11 Feb 2015 10:46:13 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:13 AM JST

* Wed 11 Feb 2015 10:46:13 AM JST

* Wed 11 Feb 2015 10:46:14 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:14 AM JST

* Wed 11 Feb 2015 10:46:14 AM JST

* Wed 11 Feb 2015 10:46:14 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:15 AM JST

* Wed 11 Feb 2015 10:46:15 AM JST

* Wed 11 Feb 2015 10:46:15 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:15 AM JST

* Wed 11 Feb 2015 10:46:15 AM JST

* Wed 11 Feb 2015 10:46:15 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:16 AM JST

* Wed 11 Feb 2015 10:46:16 AM JST

* Wed 11 Feb 2015 10:46:16 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:16 AM JST

* Wed 11 Feb 2015 10:46:16 AM JST

* Wed 11 Feb 2015 10:46:17 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:17 AM JST

* Wed 11 Feb 2015 10:46:17 AM JST

* Wed 11 Feb 2015 10:46:17 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:18 AM JST

* Wed 11 Feb 2015 10:46:18 AM JST

* Wed 11 Feb 2015 10:46:18 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:18 AM JST

* Wed 11 Feb 2015 10:46:18 AM JST

* Wed 11 Feb 2015 10:46:19 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:19 AM JST

* Wed 11 Feb 2015 10:46:19 AM JST

* Wed 11 Feb 2015 10:46:19 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:20 AM JST

* Wed 11 Feb 2015 10:46:20 AM JST

* Wed 11 Feb 2015 10:46:20 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:20 AM JST

* Wed 11 Feb 2015 10:46:20 AM JST

* Wed 11 Feb 2015 10:46:20 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:20 AM JST

* Wed 11 Feb 2015 10:46:20 AM JST

* Wed 11 Feb 2015 10:46:20 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:21 AM JST

* Wed 11 Feb 2015 10:46:21 AM JST

* Wed 11 Feb 2015 10:46:21 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:21 AM JST

* Wed 11 Feb 2015 10:46:21 AM JST

* Wed 11 Feb 2015 10:46:22 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:22 AM JST

* Wed 11 Feb 2015 10:46:22 AM JST

* Wed 11 Feb 2015 10:46:22 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:23 AM JST

* Wed 11 Feb 2015 10:46:23 AM JST

* Wed 11 Feb 2015 10:46:23 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:23 AM JST

* Wed 11 Feb 2015 10:46:23 AM JST

* Wed 11 Feb 2015 10:46:23 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:24 AM JST

* Wed 11 Feb 2015 10:46:24 AM JST

* Wed 11 Feb 2015 10:46:24 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:25 AM JST

* Wed 11 Feb 2015 10:46:25 AM JST

* Wed 11 Feb 2015 10:46:25 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:25 AM JST

* Wed 11 Feb 2015 10:46:25 AM JST

* Wed 11 Feb 2015 10:46:25 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:26 AM JST

* Wed 11 Feb 2015 10:46:26 AM JST

* Wed 11 Feb 2015 10:46:26 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:26 AM JST

* Wed 11 Feb 2015 10:46:27 AM JST

* Wed 11 Feb 2015 10:46:27 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:27 AM JST

* Wed 11 Feb 2015 10:46:27 AM JST

* Wed 11 Feb 2015 10:46:27 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:28 AM JST

* Wed 11 Feb 2015 10:46:28 AM JST

* Wed 11 Feb 2015 10:46:28 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:28 AM JST

* Wed 11 Feb 2015 10:46:28 AM JST

* Wed 11 Feb 2015 10:46:29 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:29 AM JST

* Wed 11 Feb 2015 10:46:30 AM JST

* Wed 11 Feb 2015 10:46:30 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:30 AM JST

* Wed 11 Feb 2015 10:46:30 AM JST

* Wed 11 Feb 2015 10:46:30 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:31 AM JST

* Wed 11 Feb 2015 10:46:31 AM JST

* Wed 11 Feb 2015 10:46:31 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:31 AM JST

* Wed 11 Feb 2015 10:46:31 AM JST

* Wed 11 Feb 2015 10:46:31 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:31 AM JST

* Wed 11 Feb 2015 10:46:32 AM JST

* Wed 11 Feb 2015 10:46:32 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:32 AM JST

* Wed 11 Feb 2015 10:46:32 AM JST

* Wed 11 Feb 2015 10:46:32 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:32 AM JST

* Wed 11 Feb 2015 10:46:32 AM JST

* Wed 11 Feb 2015 10:46:32 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:32 AM JST

* Wed 11 Feb 2015 10:46:33 AM JST

* Wed 11 Feb 2015 10:46:33 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:33 AM JST

* Wed 11 Feb 2015 10:46:33 AM JST

* Wed 11 Feb 2015 10:46:33 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:33 AM JST

* Wed 11 Feb 2015 10:46:33 AM JST

* Wed 11 Feb 2015 10:46:33 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:33 AM JST

* Wed 11 Feb 2015 10:46:34 AM JST

* Wed 11 Feb 2015 10:46:34 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:34 AM JST

* Wed 11 Feb 2015 10:46:34 AM JST

* Wed 11 Feb 2015 10:46:34 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:34 AM JST

* Wed 11 Feb 2015 10:46:34 AM JST

* Wed 11 Feb 2015 10:46:34 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:35 AM JST

* Wed 11 Feb 2015 10:46:35 AM JST

* Wed 11 Feb 2015 10:46:35 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:35 AM JST

* Wed 11 Feb 2015 10:46:35 AM JST

* Wed 11 Feb 2015 10:46:36 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:36 AM JST

* Wed 11 Feb 2015 10:46:36 AM JST

* Wed 11 Feb 2015 10:46:36 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:36 AM JST

* Wed 11 Feb 2015 10:46:36 AM JST

* Wed 11 Feb 2015 10:46:36 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:36 AM JST

* Wed 11 Feb 2015 10:46:36 AM JST

* Wed 11 Feb 2015 10:46:36 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:37 AM JST

* Wed 11 Feb 2015 10:46:37 AM JST

* Wed 11 Feb 2015 10:46:37 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:37 AM JST

* Wed 11 Feb 2015 10:46:37 AM JST

* Wed 11 Feb 2015 10:46:37 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:37 AM JST

* Wed 11 Feb 2015 10:46:37 AM JST

* Wed 11 Feb 2015 10:46:38 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:38 AM JST

* Wed 11 Feb 2015 10:46:38 AM JST

* Wed 11 Feb 2015 10:46:38 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:38 AM JST

* Wed 11 Feb 2015 10:46:38 AM JST

* Wed 11 Feb 2015 10:46:38 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:38 AM JST

* Wed 11 Feb 2015 10:46:38 AM JST

* Wed 11 Feb 2015 10:46:38 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:39 AM JST

* Wed 11 Feb 2015 10:46:39 AM JST

* Wed 11 Feb 2015 10:46:39 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:39 AM JST

* Wed 11 Feb 2015 10:46:39 AM JST

* Wed 11 Feb 2015 10:46:39 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:39 AM JST

* Wed 11 Feb 2015 10:46:39 AM JST

* Wed 11 Feb 2015 10:46:39 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:40 AM JST

* Wed 11 Feb 2015 10:46:40 AM JST

* Wed 11 Feb 2015 10:46:40 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:40 AM JST

* Wed 11 Feb 2015 10:46:40 AM JST

* Wed 11 Feb 2015 10:46:40 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:41 AM JST

* Wed 11 Feb 2015 10:46:41 AM JST

* Wed 11 Feb 2015 10:46:41 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:41 AM JST

* Wed 11 Feb 2015 10:46:41 AM JST

* Wed 11 Feb 2015 10:46:42 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:42 AM JST

* Wed 11 Feb 2015 10:46:42 AM JST

* Wed 11 Feb 2015 10:46:42 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:42 AM JST

* Wed 11 Feb 2015 10:46:42 AM JST

* Wed 11 Feb 2015 10:46:42 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:42 AM JST

* Wed 11 Feb 2015 10:46:42 AM JST

* Wed 11 Feb 2015 10:46:42 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:43 AM JST

* Wed 11 Feb 2015 10:46:43 AM JST

* Wed 11 Feb 2015 10:46:43 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:43 AM JST

* Wed 11 Feb 2015 10:46:43 AM JST

* Wed 11 Feb 2015 10:46:43 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:43 AM JST

* Wed 11 Feb 2015 10:46:43 AM JST

* Wed 11 Feb 2015 10:46:43 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:44 AM JST

* Wed 11 Feb 2015 10:46:44 AM JST

* Wed 11 Feb 2015 10:46:44 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:44 AM JST

* Wed 11 Feb 2015 10:46:44 AM JST

* Wed 11 Feb 2015 10:46:44 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:44 AM JST

* Wed 11 Feb 2015 10:46:44 AM JST

* Wed 11 Feb 2015 10:46:44 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:45 AM JST

* Wed 11 Feb 2015 10:46:45 AM JST

* Wed 11 Feb 2015 10:46:45 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:45 AM JST

* Wed 11 Feb 2015 10:46:45 AM JST

* Wed 11 Feb 2015 10:46:45 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:45 AM JST

* Wed 11 Feb 2015 10:46:45 AM JST

* Wed 11 Feb 2015 10:46:45 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:45 AM JST

* Wed 11 Feb 2015 10:46:45 AM JST

* Wed 11 Feb 2015 10:46:46 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:46 AM JST

* Wed 11 Feb 2015 10:46:46 AM JST

* Wed 11 Feb 2015 10:46:46 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:47 AM JST

* Wed 11 Feb 2015 10:46:47 AM JST

* Wed 11 Feb 2015 10:46:47 AM JST
    @abstractmethod # list

* Wed 11 Feb 2015 10:46:48 AM JST

* Wed 11 Feb 2015 10:46:48 AM JST

* Wed 11 Feb 2015 10:46:48 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:49 AM JST

* Wed 11 Feb 2015 10:46:49 AM JST

* Wed 11 Feb 2015 10:46:49 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:50 AM JST

* Wed 11 Feb 2015 10:46:50 AM JST

* Wed 11 Feb 2015 10:46:50 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:50 AM JST

* Wed 11 Feb 2015 10:46:50 AM JST

* Wed 11 Feb 2015 10:46:50 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:50 AM JST

* Wed 11 Feb 2015 10:46:50 AM JST

* Wed 11 Feb 2015 10:46:51 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:51 AM JST

* Wed 11 Feb 2015 10:46:51 AM JST

* Wed 11 Feb 2015 10:46:51 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:51 AM JST

* Wed 11 Feb 2015 10:46:51 AM JST

* Wed 11 Feb 2015 10:46:51 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:52 AM JST

* Wed 11 Feb 2015 10:46:52 AM JST

* Wed 11 Feb 2015 10:46:52 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:52 AM JST

* Wed 11 Feb 2015 10:46:52 AM JST

* Wed 11 Feb 2015 10:46:52 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:53 AM JST

* Wed 11 Feb 2015 10:46:53 AM JST

* Wed 11 Feb 2015 10:46:53 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:54 AM JST

* Wed 11 Feb 2015 10:46:54 AM JST

* Wed 11 Feb 2015 10:46:54 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:55 AM JST

* Wed 11 Feb 2015 10:46:55 AM JST

* Wed 11 Feb 2015 10:46:55 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:55 AM JST

* Wed 11 Feb 2015 10:46:55 AM JST

* Wed 11 Feb 2015 10:46:55 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:56 AM JST

* Wed 11 Feb 2015 10:46:56 AM JST

* Wed 11 Feb 2015 10:46:57 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:46:57 AM JST

* Wed 11 Feb 2015 10:46:57 AM JST

* Wed 11 Feb 2015 10:46:57 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:58 AM JST

* Wed 11 Feb 2015 10:46:58 AM JST

* Wed 11 Feb 2015 10:46:58 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:58 AM JST

* Wed 11 Feb 2015 10:46:58 AM JST

* Wed 11 Feb 2015 10:46:58 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:59 AM JST

* Wed 11 Feb 2015 10:46:59 AM JST

* Wed 11 Feb 2015 10:46:59 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:59 AM JST

* Wed 11 Feb 2015 10:46:59 AM JST

* Wed 11 Feb 2015 10:46:59 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:46:59 AM JST

* Wed 11 Feb 2015 10:47:00 AM JST

* Wed 11 Feb 2015 10:47:00 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:47:00 AM JST

* Wed 11 Feb 2015 10:47:00 AM JST

* Wed 11 Feb 2015 10:47:00 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:47:01 AM JST

* Wed 11 Feb 2015 10:47:01 AM JST

* Wed 11 Feb 2015 10:47:01 AM JST
    @abstractmethod # None

* Wed 11 Feb 2015 10:47:02 AM JST

* Wed 11 Feb 2015 10:47:02 AM JST

* Wed 11 Feb 2015 10:47:02 AM JST
    @abstractmethod

* Wed 11 Feb 2015 10:47:02 AM JST

* Wed 11 Feb 2015 10:47:02 AM JST

* Wed 11 Feb 2015 10:47:02 AM JST
    @abstractmethod # int

* Wed 11 Feb 2015 10:54:14 AM JST
raise NotImplementedError()
* Wed 11 Feb 2015 10:54:24 AM JST
depth, wid, parent, x, y, width, height, border_width,
                     _class, visual, value_mask, value_list
* Wed 11 Feb 2015 10:54:35 AM JST
raise NotImplementedError()
* Wed 11 Feb 2015 10:54:45 AM JST
window, value_mask, value_list
* Wed 11 Feb 2015 10:54:51 AM JST
raise NotImplementedError()
* Wed 11 Feb 2015 10:55:07 AM JST
raise NotImplementedError()
* Wed 11 Feb 2015 10:55:18 AM JST
raise NotImplementedError()
* Wed 11 Feb 2015 10:55:44 AM JST
raise NotImplementedError()
* Wed 11 Feb 2015 10:56:05 AM JST
ReparentWindow
* Wed 11 Feb 2015 10:56:11 AM JST
window, parent, x, y
* Wed 11 Feb 2015 10:56:17 AM JST
MapWindow
* Wed 11 Feb 2015 10:56:38 AM JST
MapWindow
* Wed 11 Feb 2015 10:56:49 AM JST
MapSubwindows
* Wed 11 Feb 2015 10:56:57 AM JST
UnmapSubwindows
* Wed 11 Feb 2015 10:57:04 AM JST
ConfigureWindow
* Wed 11 Feb 2015 10:57:11 AM JST
window, value_mask, value_list
* Wed 11 Feb 2015 10:57:23 AM JST
CirculateWindow
* Wed 11 Feb 2015 10:57:38 AM JST
GetGeometry
* Wed 11 Feb 2015 10:57:57 AM JST
QueryTree
* Wed 11 Feb 2015 10:58:11 AM JST
InternAtom
* Wed 11 Feb 2015 10:58:20 AM JST
only_if_exists, name
* Wed 11 Feb 2015 10:58:33 AM JST
GetAtomName
* Wed 11 Feb 2015 10:58:51 AM JST
ChangeProperty
* Wed 11 Feb 2015 10:58:59 AM JST
mode, window, property, type, format, data_len,
                       data
* Wed 11 Feb 2015 10:59:10 AM JST
DeleteProperty
* Wed 11 Feb 2015 10:59:17 AM JST
window, property
* Wed 11 Feb 2015 10:59:35 AM JST
GetProperty
* Wed 11 Feb 2015 10:59:41 AM JST
delete, window, property, type, long_offset,
                    long_length
* Wed 11 Feb 2015 10:59:52 AM JST
reutrn 
* Wed 11 Feb 2015 10:59:56 AM JST
ListProperties
* Wed 11 Feb 2015 11:00:08 AM JST
SetSelectionOwner
* Wed 11 Feb 2015 11:00:18 AM JST
owner, selection, time
* Wed 11 Feb 2015 11:00:27 AM JST
GetSelectionOwner
* Wed 11 Feb 2015 11:00:48 AM JST
raise NotImplementedError()
* Wed 11 Feb 2015 11:01:02 AM JST
requestor, selection, target, property, time
* Wed 11 Feb 2015 11:01:10 AM JST
propagate, destination, event_mask, event
* Wed 11 Feb 2015 11:01:15 AM JST
SendEvent
* Wed 11 Feb 2015 11:01:21 AM JST
propagate, destination, event_mask, event
* Wed 11 Feb 2015 11:01:35 AM JST
GrabPointer
* Wed 11 Feb 2015 11:01:47 AM JST
owner_events, grab_window, event_mask, pointer_mode,
                    keyboard_mode, confine_to, cursor, time
* Wed 11 Feb 2015 11:01:57 AM JST
UngrabPointer
* Wed 11 Feb 2015 11:02:11 AM JST
GrabButton
* Wed 11 Feb 2015 11:02:16 AM JST
owner_events, grab_window, event_mask, pointer_mode,
                   keyboard_mode, confine_to, cursor, button, modifiers
* Wed 11 Feb 2015 11:02:27 AM JST
UngrabButton
* Wed 11 Feb 2015 11:02:34 AM JST
button, grab_window, modifiers
* Wed 11 Feb 2015 11:02:39 AM JST
ChangeActivePointerGrab
* Wed 11 Feb 2015 11:02:45 AM JST
cursor, time, event_mask
* Wed 11 Feb 2015 11:02:52 AM JST
GrabKeyboard
* Wed 11 Feb 2015 11:03:00 AM JST
owner_events, grab_window, time, pointer_mode,
                     keyboard_mode
* Wed 11 Feb 2015 11:03:32 AM JST
GrabKey
* Wed 11 Feb 2015 11:03:37 AM JST
owner_events, grab_window, modifiers, key, pointer_mode,
                keyboard_mode
* Wed 11 Feb 2015 11:04:00 AM JST
UngrabKey
* Wed 11 Feb 2015 11:04:06 AM JST
key, grab_window, modifiers
* Wed 11 Feb 2015 11:04:15 AM JST
AllowEvents
* Wed 11 Feb 2015 11:04:23 AM JST
mode, time
* Wed 11 Feb 2015 11:04:30 AM JST
GrabServer
* Wed 11 Feb 2015 11:04:41 AM JST
UngrabServer
* Wed 11 Feb 2015 11:04:55 AM JST
QueryPointer
* Wed 11 Feb 2015 11:05:05 AM JST
GetMotionEvents
* Wed 11 Feb 2015 11:05:28 AM JST
TranslateCoordinates
* Wed 11 Feb 2015 11:05:36 AM JST
src_window, dst_window, src_x, src_y
* Wed 11 Feb 2015 11:05:46 AM JST
WarpPointer
* Wed 11 Feb 2015 11:05:56 AM JST
src_window, dst_window, src_x, src_y, src_width,
                    src_height, dst_x, dst_y
* Wed 11 Feb 2015 11:25:09 AM JST
SetInputFocus
* Wed 11 Feb 2015 11:25:15 AM JST
revert_to, focus, time
* Wed 11 Feb 2015 11:25:24 AM JST
GetInputFocus
* Wed 11 Feb 2015 11:25:40 AM JST
QueryKeymap
* Wed 11 Feb 2015 11:25:48 AM JST
OpenFont
* Wed 11 Feb 2015 11:25:54 AM JST
fid, name_len, name
* Wed 11 Feb 2015 11:26:01 AM JST
CloseFont
* Wed 11 Feb 2015 11:26:17 AM JST
QueryFont
* Wed 11 Feb 2015 11:27:04 AM JST
QueryTextExtents
* Wed 11 Feb 2015 11:27:12 AM JST
font, string_len, string
* Wed 11 Feb 2015 11:27:23 AM JST
ListFonts
* Wed 11 Feb 2015 11:27:33 AM JST
max_names, pattern_len, pattern
* Wed 11 Feb 2015 11:27:41 AM JST
ListFontsWithInfo
* Wed 11 Feb 2015 11:27:46 AM JST
max_names, pattern_len, pattern
* Wed 11 Feb 2015 11:27:59 AM JST
SetFontPath
* Wed 11 Feb 2015 11:28:04 AM JST
font_qty, font
* Wed 11 Feb 2015 11:28:13 AM JST
GetFontPath
* Wed 11 Feb 2015 11:28:19 AM JST
CreatePixmap
* Wed 11 Feb 2015 11:28:26 AM JST
depth, pid, drawable, width, height
* Wed 11 Feb 2015 11:28:31 AM JST
FreePixmap
* Wed 11 Feb 2015 11:28:46 AM JST
CreateGC
* Wed 11 Feb 2015 11:28:52 AM JST
cid, drawable, value_mask, value_list
* Wed 11 Feb 2015 11:31:00 AM JST
(delete "self" (progn
                                        (py:goto-def-parameter names)
                                        (py:refact-param--=
                                         (py:list-parameter))))
* Wed 11 Feb 2015 11:33:13 AM JST
names
* Wed 11 Feb 2015 11:33:21 AM JST
(delete "self" (progn
                 (py:goto-def-parameter)
                 (py:refact-param--=
                  (py:list-parameter))))
* Wed 11 Feb 2015 11:33:50 AM JST
(s-join " " (delete "self" (progn
                 (py:goto-def-parameter)
                 (py:refact-param--=
                  (py:list-parameter)))))
* Wed 11 Feb 2015 11:34:06 AM JST
(s-join ", " (delete "self" (progn
                 (py:goto-def-parameter)
                 (py:refact-param--=
                  (py:list-parameter)))))
* Wed 11 Feb 2015 11:34:43 AM JST
param
* Wed 11 Feb 2015 11:34:47 AM JST
(s-join ", " (delete "self" (progn
                 (py:goto-def-parameter)
                 (py:refact-param--=
                  (py:list-parameter)))))
* Wed 11 Feb 2015 11:35:30 AM JST
(let ((param (s-join ", " (delete "self" (progn
                                           (save-restriction 
                                             (py:goto-def-parameter)
                                             (py:refact-param--=
                                              (py:list-parameter))))))))
  )
* Wed 11 Feb 2015 11:35:49 AM JST
(let ((param (s-join ", " (delete "self" (progn
                                           (save-excursion 
                                           (save-restriction 
                                             (py:goto-def-parameter)
                                             (py:refact-param--=
                                              (py:list-parameter)))))))))
  )
* Wed 11 Feb 2015 11:36:02 AM JST
(let ((param (s-join ", " (delete "self" (progn
                                           (save-excursion 
                                           (save-restriction 
                                             (py:goto-def-parameter)
                                             (py:refact-param--=
                                              (py:list-parameter)))))))))
  param
  )
* Wed 11 Feb 2015 11:36:20 AM JST
param
* Wed 11 Feb 2015 11:36:28 AM JST
(let ((param (s-join ", " (delete "self" (progn
                                           (save-excursion 
                                           (save-restriction 
                                             (py:goto-def-parameter)
                                             (py:refact-param--=
                                              (py:list-parameter)))))))))
  (insert param)
  )
* Wed 11 Feb 2015 11:36:31 AM JST
(let ((param (s-join ", " (delete "self" (progn
                                           (save-excursion 
                                           (save-restriction 
                                             (py:goto-def-parameter)
                                             (py:refact-param--=
                                              (py:list-parameter)))))))))
  (insert param)
  )
* Wed 11 Feb 2015 11:37:17 AM JST
(let ((param (s-join ", " (delete "self" (progn
                                           (save-excursion 
                                           (save-restriction 
                                             (py:goto-def-parameter)
                                             (py:refact-param--=
                                              (py:list-parameter)))))))))
  (insert param)
  )
* Wed 11 Feb 2015 11:38:45 AM JST

* Wed 11 Feb 2015 11:38:45 AM JST

* Wed 11 Feb 2015 11:38:45 AM JST
  (insert param)

* Wed 11 Feb 2015 11:39:24 AM JST
CopyGC
* Wed 11 Feb 2015 11:39:50 AM JST
CopyGC
* Wed 11 Feb 2015 11:40:02 AM JST
SetDashes
* Wed 11 Feb 2015 11:40:13 AM JST
SetClipRectangles
* Wed 11 Feb 2015 11:40:37 AM JST
FreeGC
* Wed 11 Feb 2015 11:45:01 AM JST
ClearArea
* Wed 11 Feb 2015 11:45:30 AM JST
(s-join ", " (delete "self" (progn
                                           (save-excursion 
                                           (save-restriction 
                                             (py:goto-def-parameter)
                                             (py:refact-param--=
                                              (py:list-parameter)))))))
* Wed 11 Feb 2015 11:46:26 AM JST
(py:get-doc-str 'def names)
* Wed 11 Feb 2015 11:46:39 AM JST
names
* Wed 11 Feb 2015 12:28:01 PM JST
(re-search-forward py:class-name-re nil 'noerror)
* Wed 11 Feb 2015 12:28:47 PM JST
py:def-name-re
* Wed 11 Feb 2015 12:28:55 PM JST
(match-string-no-properties 1)
* Wed 11 Feb 2015 12:30:05 PM JST
(when (py:in-def-p)
  (py:beginning-of-def 1))
* Wed 11 Feb 2015 12:30:41 PM JST
(re-search-forward py:def-name-re nil 'noerror)
(match-string-no-properties 1)
* Wed 11 Feb 2015 12:31:10 PM JST
  
* Wed 11 Feb 2015 12:31:21 PM JST
py:current-defname
* Wed 11 Feb 2015 12:31:31 PM JST
(defun py:current-defname () ;[2015/02/11]
  ""
  (when (py:in-def-p)
    (py:beginning-of-def 1))
  (when (py:at-beginning-of-def-p)
    (re-search-forward py:def-name-re nil 'noerror)
    (match-string-no-properties 1)))
* Wed 11 Feb 2015 12:31:49 PM JST
py:current-defname
* Wed 11 Feb 2015 12:33:03 PM JST
(s-join ", " (delete "self" (progn
                              (save-excursion 
                                (save-restriction 
                                  (py:goto-def-parameter)
                                  (py:refact-param--=
                                   (py:list-parameter)))))))
* Wed 11 Feb 2015 12:33:23 PM JST
py
* Wed 11 Feb 2015 12:33:24 PM JST
py:current-defname
* Wed 11 Feb 2015 12:33:47 PM JST
(save-excursion
  (py:current-defname))
* Wed 11 Feb 2015 12:34:52 PM JST
${1:return }self._client.${2:$$(save-excursion
  (py:current-defname))}(${3:$$(s-join ", " (delete "self" (progn
                              (save-excursion 
                                (save-restriction 
                                  (py:goto-def-parameter)
                                  (py:refact-param--=
                                   (py:list-parameter)))))))})
* Wed 11 Feb 2015 12:35:50 PM JST
return 
* Wed 11 Feb 2015 12:36:21 PM JST
return 
* Wed 11 Feb 2015 12:36:24 PM JST
return 
* Wed 11 Feb 2015 12:37:24 PM JST
return 
* Wed 11 Feb 2015 12:38:03 PM JST
return 
* Wed 11 Feb 2015 12:42:12 PM JST
            
* Wed 11 Feb 2015 12:51:43 PM JST
XClient
* Wed 11 Feb 2015 12:52:15 PM JST
from _xclient import XClient
x=XClient(':0.0')

* Wed 11 Feb 2015 02:10:26 PM JST
from _xclient import _abstract
from _xclient import _reply
from _xclient import _define

* Wed 11 Feb 2015 02:10:59 PM JST
display
* Wed 11 Feb 2015 02:11:51 PM JST
    @abstractmethod # None
    def CreateWindow(self, depth, wid, parent, x, y, width, height, border_width,
                     _class, visual, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangeWindowAttributes(self, window, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod
    def GetWindowAttributes(self, window):
        raise NotImplementedError()

    @abstractmethod # None
    def DestroyWindow(self, window):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangeSaveSet(self, mode, window):
        raise NotImplementedError()

    @abstractmethod # None
    def ReparentWindow(self, window, parent, x, y):
        raise NotImplementedError()

    @abstractmethod # None
    def MapWindow(self, window):
        raise NotImplementedError()

    @abstractmethod # None
    def MapSubwindows(self, window):
        raise NotImplementedError()

    @abstractmethod # None
    def UnmapSubwindows(self, window):
        raise NotImplementedError()

    @abstractmethod # None
    def ConfigureWindow(self, window, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod # None
    def CirculateWindow(self, direction, window):
        raise NotImplementedError()

    @abstractmethod # GetGeometryReply
    def GetGeometry(self, drawable):
        raise NotImplementedError()

    @abstractmethod # QueryTreeReply
    def QueryTree(self, window):
        raise NotImplementedError()

    @abstractmethod # int
    def InternAtom(self, only_if_exists, name):
        raise NotImplementedError()

    @abstractmethod # str
    def GetAtomName(self, atom):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangeProperty(self, mode, window, property, type, format, data_len,
                       data):
        raise NotImplementedError()

    @abstractmethod # None
    def DeleteProperty(self, window, property):
        raise NotImplementedError()

    @abstractmethod # GetPropertyReply
    def GetProperty(self, delete, window, property, type, long_offset,
                    long_length):
        raise NotImplementedError()

    @abstractmethod # list
    def ListProperties(self, window):
        raise NotImplementedError()

    @abstractmethod # None
    def SetSelectionOwner(self, owner, selection, time):
        raise NotImplementedError()

    @abstractmethod
    def GetSelectionOwner(self, selection):
        raise NotImplementedError()

    @abstractmethod # None
    def ConvertSelection(self, requestor, selection, target, property, time):
        raise NotImplementedError()

    @abstractmethod # None
    def SendEvent(self, propagate, destination, event_mask, event):
        raise NotImplementedError()

    @abstractmethod
    def GrabPointer(self, owner_events, grab_window, event_mask, pointer_mode,
                    keyboard_mode, confine_to, cursor, time):
        raise NotImplementedError()

    @abstractmethod # None
    def UngrabPointer(self, time):
        raise NotImplementedError()

    @abstractmethod # None
    def GrabButton(self, owner_events, grab_window, event_mask, pointer_mode,
                   keyboard_mode, confine_to, cursor, button, modifiers):
        raise NotImplementedError()

    @abstractmethod # None
    def UngrabButton(self, button, grab_window, modifiers):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangeActivePointerGrab(self, cursor, time, event_mask):
        raise NotImplementedError()

    @abstractmethod
    def GrabKeyboard(self, owner_events, grab_window, time, pointer_mode,
                     keyboard_mode):
        raise NotImplementedError()

    @abstractmethod # None
    def UngrabKeyboard(self, time):
        raise NotImplementedError()

    @abstractmethod # None
    def GrabKey(self, owner_events, grab_window, modifiers, key, pointer_mode,
                keyboard_mode):
        raise NotImplementedError()

    @abstractmethod # None
    def UngrabKey(self, key, grab_window, modifiers):
        raise NotImplementedError()

    @abstractmethod # None
    def AllowEvents(self, mode, time):
        raise NotImplementedError()

    @abstractmethod # None
    def GrabServer(self):
        raise NotImplementedError()

    @abstractmethod # None
    def UngrabServer(self):
        raise NotImplementedError()

    @abstractmethod
    def QueryPointer(self, window):
        raise NotImplementedError()

    @abstractmethod
    def GetMotionEvents(self, window, start, stop):
        raise NotImplementedError()

    @abstractmethod
    def TranslateCoordinates(self, src_window, dst_window, src_x, src_y):
        raise NotImplementedError()

    @abstractmethod # None
    def WarpPointer(self, src_window, dst_window, src_x, src_y, src_width,
                    src_height, dst_x, dst_y):
        raise NotImplementedError()

    @abstractmethod # None
    def SetInputFocus(self, revert_to, focus, time):
        raise NotImplementedError()

    @abstractmethod
    def GetInputFocus(self):
        raise NotImplementedError()

    @abstractmethod
    def QueryKeymap(self):
        raise NotImplementedError()

    @abstractmethod # None
    def OpenFont(self, fid, name_len, name):
        raise NotImplementedError()

    @abstractmethod
    def CloseFont(self, font):
        raise NotImplementedError()

    @abstractmethod
    def QueryFont(self, font):
        raise NotImplementedError()

    @abstractmethod
    def QueryTextExtents(self, font, string_len, string):
        raise NotImplementedError()

    @abstractmethod
    def ListFonts(self, max_names, pattern_len, pattern):
        raise NotImplementedError()

    @abstractmethod
    def ListFontsWithInfo(self, max_names, pattern_len, pattern):
        raise NotImplementedError()

    @abstractmethod # None
    def SetFontPath(self, font_qty, font):
        raise NotImplementedError()

    @abstractmethod
    def GetFontPath(self):
        raise NotImplementedError()

    @abstractmethod # None
    def CreatePixmap(self, depth, pid, drawable, width, height):
        raise NotImplementedError()

    @abstractmethod # None
    def FreePixmap(self, pixmap):
        raise NotImplementedError()

    @abstractmethod # None
    def CreateGC(self, cid, drawable, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangeGC(self, gc, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod # None
    def CopyGC(self, src_gc, dst_gc, value_mask):
        raise NotImplementedError()

    @abstractmethod # None
    def SetDashes(self, gc, dash_offset, dashes_len, dashes):
        raise NotImplementedError()

    @abstractmethod # None
    def SetClipRectangles(self, ordering, gc, clip_x_origin, clip_y_origin,
                          rectangles_len, rectangles):
        raise NotImplementedError()

    @abstractmethod # None
    def FreeGC(self, gc):
        raise NotImplementedError()

    @abstractmethod # None
    def ClearArea(self, exposures, window, x, y, width, height):
        raise NotImplementedError()

    @abstractmethod # None
    def CopyArea(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x,
                 dst_y, width, height):
        raise NotImplementedError()

    @abstractmethod # None
    def CopyPlane(self, src_drawable, dst_drawable, gc, src_x, src_y, dst_x,
                  dst_y, width, height, bit_plane):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyPoint(self, coordinate_mode, drawable, gc, points_len, points):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyLine(self, coordinate_mode, drawable, gc, points_len, points):
        raise NotImplementedError()

    @abstractmethod # None
    def PolySegment(self, drawable, gc, segments_len, segments):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyRectangle(self, drawable, gc, rectangles_len, rectangles):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyArc(self, drawable, gc, arcs_len, arcs):
        raise NotImplementedError()

    @abstractmethod # None
    def FillPoly(self, drawable, gc, shape, coordinate_mode, points_len, points):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyFillRectangle(self, drawable, gc, rectangles_len, rectangles):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyFillArc(self, drawable, gc, arcs_len, arcs):
        raise NotImplementedError()

    @abstractmethod # None
    def PutImage(self, format, drawable, gc, width, height, dst_x, dst_y,
                 left_pad, depth, data_len, data):
        raise NotImplementedError()

    @abstractmethod
    def GetImage(self, format, drawable, x, y, width, height, plane_mask):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyText8(self, drawable, gc, x, y, items_len, items):
        raise NotImplementedError()

    @abstractmethod # None
    def PolyText16(self, drawable, gc, x, y, items_len, items):
        raise NotImplementedError()

    @abstractmethod # None
    def ImageText8(self, string_len, drawable, gc, x, y, string):
        raise NotImplementedError()

    @abstractmethod # None
    def ImageText16(self, string_len, drawable, gc, x, y, string):
        raise NotImplementedError()

    @abstractmethod # None
    def CreateColormap(self, alloc, mid, window, visual):
        raise NotImplementedError()

    @abstractmethod # None
    def FreeColormap(self, cmap):
        raise NotImplementedError()

    @abstractmethod # None
    def CopyColormapAndFree(self, mid, src_cmap):
        raise NotImplementedError()

    @abstractmethod # None
    def InstallColormap(self, cmap):
        raise NotImplementedError()

    @abstractmethod # None
    def UninstallColormap(self, cmap):
        raise NotImplementedError()

    @abstractmethod
    def ListInstalledColormaps(self, window):
        raise NotImplementedError()

    @abstractmethod
    def AllocColor(self, cmap, red, green, blue):
        raise NotImplementedError()

    @abstractmethod
    def AllocNamedColor(self, cmap, red, green, blue):
        raise NotImplementedError()

    @abstractmethod
    def AllocColorCells(self, cotiguous, cmap, colors, planes):
        raise NotImplementedError()

    @abstractmethod
    def AllocColorPlanes(self, contiguous, cmap, colors, reds, greens, blues):
        raise NotImplementedError()

    @abstractmethod # None
    def FreeColors(self, cmap, plane_mask, pixels_len, pixels):
        raise NotImplementedError()

    @abstractmethod # None
    def StoreColors(self, cmap, items_len, items):
        raise NotImplementedError()

    @abstractmethod # None
    def StoreNamedColor(self, flags, cmap, pixel, name_len, name):
        raise NotImplementedError()

    @abstractmethod
    def QueryColors(self, cmap, pixels_len, pixels):
        raise NotImplementedError()

    @abstractmethod
    def LookupColor(self, cmap, name_len, name):
        raise NotImplementedError()

    @abstractmethod # None
    def CreateCursor(self, cid, source, mask, fore_red, fore_green, fore_blue,
                     back_red, back_green, back_blue, x, y):
        raise NotImplementedError()

    @abstractmethod # None
    def CreateGlyphCursor(self, cid, source, mask, fore_red, fore_green,
                          fore_blue, back_red, back_green, back_blue, x, y):
        raise NotImplementedError()

    @abstractmethod # None
    def FreeCursor(self, cursor):
        raise NotImplementedError()

    @abstractmethod # None
    def RecolorCursor(self, cursor, fore_red, fore_green, fore_blue,
                      back_red, back_green, back_blue):
        raise NotImplementedError()

    @abstractmethod
    def QueryBestSize(self, _class, drawable, width, height):
        raise NotImplementedError()

    @abstractmethod
    def QueryExtension(self, name_len, name):
        raise NotImplementedError()

    @abstractmethod
    def ListExtensions(self):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangeKeyboardMapping(self, keycode_count, first_keycode,
                              keysyms_per_keycode, keysyms):
        raise NotImplementedError()

    @abstractmethod # list
    def GetKeyboardMapping(self, first_keycode, count):
        raise NotImplementedError()

    @abstractmethod
    def ChangeKeyboardControl(self, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod # None
    def GetKeyboardControl(self, value_mask, value_list):
        raise NotImplementedError()

    @abstractmethod # None
    def Bell(self, percent):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangePointerControl(
            self, acceletation_numerator, acceleration_denominator,
            threshold, do_acceleration, do_threshold):
        raise NotImplementedError()

    @abstractmethod
    def GetPointerControl(self):
        raise NotImplementedError()

    @abstractmethod # None
    def SetScreenSaver(self, timeout, interval, prefer_blanking,
                       allow_exposures):
        raise NotImplementedError()

    @abstractmethod
    def GetScreenSaver(self):
        raise NotImplementedError()

    @abstractmethod # None
    def ChangeHosts(self, mode, family, address_len, address):
        raise NotImplementedError()

    @abstractmethod
    def ListHosts(self):
        raise NotImplementedError()

    @abstractmethod # None
    def SetAccessControl(self, mode):
        raise NotImplementedError()

    @abstractmethod # None
    def SetCloseDownMode(self, mode):
        raise NotImplementedError()

    @abstractmethod # None
    def KillClient(self, resource):
        raise NotImplementedError()

    @abstractmethod # None
    def RotateProperties(self, window, atoms_len, delta, atoms):
        raise NotImplementedError()

    @abstractmethod # None
    def ForceScreenSaver(self, mode):
        raise NotImplementedError()

    @abstractmethod
    def SetPointerMapping(self, map_len, map):
        raise NotImplementedError()

    @abstractmethod
    def GetPointerMapping(self):
        raise NotImplementedError()

    @abstractmethod
    def SetModifierMapping(self, keycodes_per_modifier, keycodes):
        raise NotImplementedError()

    @abstractmethod
    def GetModifierMapping(self):
        raise NotImplementedError()

    @abstractmethod
    def NoOperation(self): # None
        raise NotImplementedError()

    @abstractmethod
    def generate_id(self):
        raise NotImplementedError()

    @abstractmethod # None
    def flush(self):
        raise NotImplementedError()

    @abstractmethod # None
    def close(self):
        raise NotImplementedError()

    @abstractmethod
    def next_event(self):
        raise NotImplementedError()

    @abstractmethod # int
    def get_setup(self):
        raise NotImplementedError()

* Wed 11 Feb 2015 02:13:16 PM JST

* Wed 11 Feb 2015 02:13:16 PM JST

* Wed 11 Feb 2015 02:13:16 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:27 PM JST

* Wed 11 Feb 2015 02:13:27 PM JST

* Wed 11 Feb 2015 02:13:27 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:30 PM JST

* Wed 11 Feb 2015 02:13:30 PM JST

* Wed 11 Feb 2015 02:13:30 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:30 PM JST

* Wed 11 Feb 2015 02:13:30 PM JST

* Wed 11 Feb 2015 02:13:30 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:30 PM JST

* Wed 11 Feb 2015 02:13:31 PM JST

* Wed 11 Feb 2015 02:13:31 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:31 PM JST

* Wed 11 Feb 2015 02:13:31 PM JST

* Wed 11 Feb 2015 02:13:31 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:31 PM JST

* Wed 11 Feb 2015 02:13:31 PM JST

* Wed 11 Feb 2015 02:13:31 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:32 PM JST

* Wed 11 Feb 2015 02:13:32 PM JST

* Wed 11 Feb 2015 02:13:32 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:32 PM JST

* Wed 11 Feb 2015 02:13:32 PM JST

* Wed 11 Feb 2015 02:13:33 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:33 PM JST

* Wed 11 Feb 2015 02:13:33 PM JST

* Wed 11 Feb 2015 02:13:33 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:33 PM JST

* Wed 11 Feb 2015 02:13:34 PM JST

* Wed 11 Feb 2015 02:13:34 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:34 PM JST

* Wed 11 Feb 2015 02:13:34 PM JST

* Wed 11 Feb 2015 02:13:34 PM JST
    @abstractmethod # GetGeometryReply

* Wed 11 Feb 2015 02:13:34 PM JST

* Wed 11 Feb 2015 02:13:34 PM JST

* Wed 11 Feb 2015 02:13:34 PM JST
    @abstractmethod # QueryTreeReply

* Wed 11 Feb 2015 02:13:35 PM JST

* Wed 11 Feb 2015 02:13:35 PM JST

* Wed 11 Feb 2015 02:13:35 PM JST
    @abstractmethod # int

* Wed 11 Feb 2015 02:13:35 PM JST

* Wed 11 Feb 2015 02:13:35 PM JST

* Wed 11 Feb 2015 02:13:35 PM JST
    @abstractmethod # str

* Wed 11 Feb 2015 02:13:36 PM JST

* Wed 11 Feb 2015 02:13:36 PM JST

* Wed 11 Feb 2015 02:13:36 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:36 PM JST

* Wed 11 Feb 2015 02:13:36 PM JST

* Wed 11 Feb 2015 02:13:36 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:36 PM JST

* Wed 11 Feb 2015 02:13:36 PM JST

* Wed 11 Feb 2015 02:13:36 PM JST
    @abstractmethod # GetPropertyReply

* Wed 11 Feb 2015 02:13:37 PM JST

* Wed 11 Feb 2015 02:13:37 PM JST

* Wed 11 Feb 2015 02:13:37 PM JST
    @abstractmethod # list

* Wed 11 Feb 2015 02:13:37 PM JST

* Wed 11 Feb 2015 02:13:37 PM JST

* Wed 11 Feb 2015 02:13:38 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:38 PM JST

* Wed 11 Feb 2015 02:13:38 PM JST

* Wed 11 Feb 2015 02:13:38 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:38 PM JST

* Wed 11 Feb 2015 02:13:38 PM JST

* Wed 11 Feb 2015 02:13:38 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:38 PM JST

* Wed 11 Feb 2015 02:13:38 PM JST

* Wed 11 Feb 2015 02:13:39 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:39 PM JST

* Wed 11 Feb 2015 02:13:39 PM JST

* Wed 11 Feb 2015 02:13:39 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:39 PM JST

* Wed 11 Feb 2015 02:13:39 PM JST

* Wed 11 Feb 2015 02:13:39 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:40 PM JST

* Wed 11 Feb 2015 02:13:40 PM JST

* Wed 11 Feb 2015 02:13:40 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:40 PM JST

* Wed 11 Feb 2015 02:13:40 PM JST

* Wed 11 Feb 2015 02:13:40 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:41 PM JST

* Wed 11 Feb 2015 02:13:41 PM JST

* Wed 11 Feb 2015 02:13:41 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:41 PM JST

* Wed 11 Feb 2015 02:13:41 PM JST

* Wed 11 Feb 2015 02:13:41 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:41 PM JST

* Wed 11 Feb 2015 02:13:41 PM JST

* Wed 11 Feb 2015 02:13:41 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:42 PM JST

* Wed 11 Feb 2015 02:13:42 PM JST

* Wed 11 Feb 2015 02:13:42 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:42 PM JST

* Wed 11 Feb 2015 02:13:42 PM JST

* Wed 11 Feb 2015 02:13:42 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:43 PM JST

* Wed 11 Feb 2015 02:13:43 PM JST

* Wed 11 Feb 2015 02:13:43 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:43 PM JST

* Wed 11 Feb 2015 02:13:43 PM JST

* Wed 11 Feb 2015 02:13:43 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:43 PM JST

* Wed 11 Feb 2015 02:13:43 PM JST

* Wed 11 Feb 2015 02:13:43 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:44 PM JST

* Wed 11 Feb 2015 02:13:44 PM JST

* Wed 11 Feb 2015 02:13:44 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:44 PM JST

* Wed 11 Feb 2015 02:13:44 PM JST

* Wed 11 Feb 2015 02:13:44 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:45 PM JST

* Wed 11 Feb 2015 02:13:45 PM JST

* Wed 11 Feb 2015 02:13:45 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:45 PM JST

* Wed 11 Feb 2015 02:13:45 PM JST

* Wed 11 Feb 2015 02:13:45 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:45 PM JST

* Wed 11 Feb 2015 02:13:45 PM JST

* Wed 11 Feb 2015 02:13:45 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:46 PM JST

* Wed 11 Feb 2015 02:13:46 PM JST

* Wed 11 Feb 2015 02:13:46 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:46 PM JST

* Wed 11 Feb 2015 02:13:46 PM JST

* Wed 11 Feb 2015 02:13:46 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:46 PM JST

* Wed 11 Feb 2015 02:13:46 PM JST

* Wed 11 Feb 2015 02:13:47 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:47 PM JST

* Wed 11 Feb 2015 02:13:47 PM JST

* Wed 11 Feb 2015 02:13:47 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:47 PM JST

* Wed 11 Feb 2015 02:13:47 PM JST

* Wed 11 Feb 2015 02:13:48 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:48 PM JST

* Wed 11 Feb 2015 02:13:48 PM JST

* Wed 11 Feb 2015 02:13:48 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:48 PM JST

* Wed 11 Feb 2015 02:13:48 PM JST

* Wed 11 Feb 2015 02:13:48 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:48 PM JST

* Wed 11 Feb 2015 02:13:48 PM JST

* Wed 11 Feb 2015 02:13:49 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:49 PM JST

* Wed 11 Feb 2015 02:13:49 PM JST

* Wed 11 Feb 2015 02:13:49 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:49 PM JST

* Wed 11 Feb 2015 02:13:49 PM JST

* Wed 11 Feb 2015 02:13:50 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:50 PM JST

* Wed 11 Feb 2015 02:13:50 PM JST

* Wed 11 Feb 2015 02:13:50 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:50 PM JST

* Wed 11 Feb 2015 02:13:50 PM JST

* Wed 11 Feb 2015 02:13:50 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:50 PM JST

* Wed 11 Feb 2015 02:13:50 PM JST

* Wed 11 Feb 2015 02:13:51 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:51 PM JST

* Wed 11 Feb 2015 02:13:51 PM JST

* Wed 11 Feb 2015 02:13:51 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:51 PM JST

* Wed 11 Feb 2015 02:13:51 PM JST

* Wed 11 Feb 2015 02:13:51 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:52 PM JST

* Wed 11 Feb 2015 02:13:52 PM JST

* Wed 11 Feb 2015 02:13:52 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:52 PM JST

* Wed 11 Feb 2015 02:13:52 PM JST

* Wed 11 Feb 2015 02:13:52 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:52 PM JST

* Wed 11 Feb 2015 02:13:53 PM JST

* Wed 11 Feb 2015 02:13:53 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:53 PM JST

* Wed 11 Feb 2015 02:13:53 PM JST

* Wed 11 Feb 2015 02:13:53 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:53 PM JST

* Wed 11 Feb 2015 02:13:53 PM JST

* Wed 11 Feb 2015 02:13:53 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:53 PM JST

* Wed 11 Feb 2015 02:13:53 PM JST

* Wed 11 Feb 2015 02:13:54 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:54 PM JST

* Wed 11 Feb 2015 02:13:54 PM JST

* Wed 11 Feb 2015 02:13:54 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:55 PM JST

* Wed 11 Feb 2015 02:13:55 PM JST

* Wed 11 Feb 2015 02:13:55 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:55 PM JST

* Wed 11 Feb 2015 02:13:55 PM JST

* Wed 11 Feb 2015 02:13:55 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:55 PM JST

* Wed 11 Feb 2015 02:13:55 PM JST

* Wed 11 Feb 2015 02:13:55 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:56 PM JST

* Wed 11 Feb 2015 02:13:56 PM JST

* Wed 11 Feb 2015 02:13:56 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:56 PM JST

* Wed 11 Feb 2015 02:13:56 PM JST

* Wed 11 Feb 2015 02:13:56 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:56 PM JST

* Wed 11 Feb 2015 02:13:56 PM JST

* Wed 11 Feb 2015 02:13:56 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:57 PM JST

* Wed 11 Feb 2015 02:13:57 PM JST

* Wed 11 Feb 2015 02:13:57 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:57 PM JST

* Wed 11 Feb 2015 02:13:57 PM JST

* Wed 11 Feb 2015 02:13:57 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:58 PM JST

* Wed 11 Feb 2015 02:13:58 PM JST

* Wed 11 Feb 2015 02:13:58 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:13:58 PM JST

* Wed 11 Feb 2015 02:13:58 PM JST

* Wed 11 Feb 2015 02:13:58 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:58 PM JST

* Wed 11 Feb 2015 02:13:58 PM JST

* Wed 11 Feb 2015 02:13:58 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:59 PM JST

* Wed 11 Feb 2015 02:13:59 PM JST

* Wed 11 Feb 2015 02:13:59 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:59 PM JST

* Wed 11 Feb 2015 02:13:59 PM JST

* Wed 11 Feb 2015 02:13:59 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:13:59 PM JST

* Wed 11 Feb 2015 02:13:59 PM JST

* Wed 11 Feb 2015 02:14:00 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:00 PM JST

* Wed 11 Feb 2015 02:14:00 PM JST

* Wed 11 Feb 2015 02:14:00 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:00 PM JST

* Wed 11 Feb 2015 02:14:00 PM JST

* Wed 11 Feb 2015 02:14:00 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:01 PM JST

* Wed 11 Feb 2015 02:14:01 PM JST

* Wed 11 Feb 2015 02:14:01 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:01 PM JST

* Wed 11 Feb 2015 02:14:01 PM JST

* Wed 11 Feb 2015 02:14:01 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:01 PM JST

* Wed 11 Feb 2015 02:14:01 PM JST

* Wed 11 Feb 2015 02:14:02 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:02 PM JST

* Wed 11 Feb 2015 02:14:02 PM JST

* Wed 11 Feb 2015 02:14:02 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:02 PM JST

* Wed 11 Feb 2015 02:14:02 PM JST

* Wed 11 Feb 2015 02:14:02 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:02 PM JST

* Wed 11 Feb 2015 02:14:02 PM JST

* Wed 11 Feb 2015 02:14:03 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:03 PM JST

* Wed 11 Feb 2015 02:14:03 PM JST

* Wed 11 Feb 2015 02:14:03 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:03 PM JST

* Wed 11 Feb 2015 02:14:03 PM JST

* Wed 11 Feb 2015 02:14:03 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:04 PM JST

* Wed 11 Feb 2015 02:14:04 PM JST

* Wed 11 Feb 2015 02:14:04 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:04 PM JST

* Wed 11 Feb 2015 02:14:04 PM JST

* Wed 11 Feb 2015 02:14:04 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:04 PM JST

* Wed 11 Feb 2015 02:14:04 PM JST

* Wed 11 Feb 2015 02:14:04 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:05 PM JST

* Wed 11 Feb 2015 02:14:05 PM JST

* Wed 11 Feb 2015 02:14:05 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:05 PM JST

* Wed 11 Feb 2015 02:14:05 PM JST

* Wed 11 Feb 2015 02:14:05 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:05 PM JST

* Wed 11 Feb 2015 02:14:05 PM JST

* Wed 11 Feb 2015 02:14:05 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:06 PM JST

* Wed 11 Feb 2015 02:14:06 PM JST

* Wed 11 Feb 2015 02:14:06 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:06 PM JST

* Wed 11 Feb 2015 02:14:06 PM JST

* Wed 11 Feb 2015 02:14:06 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:06 PM JST

* Wed 11 Feb 2015 02:14:07 PM JST

* Wed 11 Feb 2015 02:14:07 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:07 PM JST

* Wed 11 Feb 2015 02:14:07 PM JST

* Wed 11 Feb 2015 02:14:07 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:07 PM JST

* Wed 11 Feb 2015 02:14:07 PM JST

* Wed 11 Feb 2015 02:14:07 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:08 PM JST

* Wed 11 Feb 2015 02:14:08 PM JST

* Wed 11 Feb 2015 02:14:08 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:08 PM JST

* Wed 11 Feb 2015 02:14:08 PM JST

* Wed 11 Feb 2015 02:14:08 PM JST
    @abstractmethod # list

* Wed 11 Feb 2015 02:14:12 PM JST

* Wed 11 Feb 2015 02:14:12 PM JST

* Wed 11 Feb 2015 02:14:13 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:15 PM JST

* Wed 11 Feb 2015 02:14:15 PM JST

* Wed 11 Feb 2015 02:14:15 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:15 PM JST

* Wed 11 Feb 2015 02:14:15 PM JST

* Wed 11 Feb 2015 02:14:16 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:16 PM JST

* Wed 11 Feb 2015 02:14:16 PM JST

* Wed 11 Feb 2015 02:14:16 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:17 PM JST

* Wed 11 Feb 2015 02:14:17 PM JST

* Wed 11 Feb 2015 02:14:17 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:17 PM JST

* Wed 11 Feb 2015 02:14:17 PM JST

* Wed 11 Feb 2015 02:14:17 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:18 PM JST

* Wed 11 Feb 2015 02:14:18 PM JST

* Wed 11 Feb 2015 02:14:18 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:18 PM JST

* Wed 11 Feb 2015 02:14:18 PM JST

* Wed 11 Feb 2015 02:14:18 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:19 PM JST

* Wed 11 Feb 2015 02:14:19 PM JST

* Wed 11 Feb 2015 02:14:19 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:20 PM JST

* Wed 11 Feb 2015 02:14:20 PM JST

* Wed 11 Feb 2015 02:14:20 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:20 PM JST

* Wed 11 Feb 2015 02:14:20 PM JST

* Wed 11 Feb 2015 02:14:21 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:21 PM JST

* Wed 11 Feb 2015 02:14:21 PM JST

* Wed 11 Feb 2015 02:14:21 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:22 PM JST

* Wed 11 Feb 2015 02:14:22 PM JST

* Wed 11 Feb 2015 02:14:22 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:22 PM JST

* Wed 11 Feb 2015 02:14:22 PM JST

* Wed 11 Feb 2015 02:14:22 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:23 PM JST

* Wed 11 Feb 2015 02:14:23 PM JST

* Wed 11 Feb 2015 02:14:23 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:23 PM JST

* Wed 11 Feb 2015 02:14:23 PM JST

* Wed 11 Feb 2015 02:14:23 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:24 PM JST

* Wed 11 Feb 2015 02:14:24 PM JST

* Wed 11 Feb 2015 02:14:24 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:25 PM JST

* Wed 11 Feb 2015 02:14:25 PM JST

* Wed 11 Feb 2015 02:14:25 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:25 PM JST

* Wed 11 Feb 2015 02:14:25 PM JST

* Wed 11 Feb 2015 02:14:25 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:26 PM JST

* Wed 11 Feb 2015 02:14:26 PM JST

* Wed 11 Feb 2015 02:14:26 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:27 PM JST

* Wed 11 Feb 2015 02:14:27 PM JST

* Wed 11 Feb 2015 02:14:27 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:27 PM JST

* Wed 11 Feb 2015 02:14:28 PM JST

* Wed 11 Feb 2015 02:14:28 PM JST
    @abstractmethod # None

* Wed 11 Feb 2015 02:14:28 PM JST

* Wed 11 Feb 2015 02:14:28 PM JST

* Wed 11 Feb 2015 02:14:28 PM JST
    @abstractmethod

* Wed 11 Feb 2015 02:14:29 PM JST

* Wed 11 Feb 2015 02:14:29 PM JST

* Wed 11 Feb 2015 02:14:29 PM JST
    @abstractmethod # int

* Wed 11 Feb 2015 02:16:47 PM JST
value_
* Wed 11 Feb 2015 03:13:00 PM JST
                         rq.Pixmap('background_pixmap'),
                         rq.Card32('background_pixel'),
                         rq.Pixmap('border_pixmap'),
                         rq.Card32('border_pixel'),
                         rq.Gravity('bit_gravity'),
                         rq.Gravity('win_gravity'),
                         rq.Set('backing_store', 1,
                                (X.NotUseful, X.WhenMapped, X.Always)),
                         rq.Card32('backing_planes'),
                         rq.Card32('backing_pixel'),
                         rq.Bool('override_redirect'),
                         rq.Bool('save_under'),
                         rq.Card32('event_mask'),
                         rq.Card32('do_not_propagate_mask'),
                         rq.Colormap('colormap'),
                         rq.Cursor('cursor'),

* Wed 11 Feb 2015 03:13:09 PM JST
                              
* Wed 11 Feb 2015 03:13:30 PM JST
rq.Cursor(
* Wed 11 Feb 2015 03:13:31 PM JST
rq.Colormap(
* Wed 11 Feb 2015 03:13:31 PM JST
rq.Card32(
* Wed 11 Feb 2015 03:13:31 PM JST
rq.Card32(
* Wed 11 Feb 2015 03:13:31 PM JST
rq.Bool(
* Wed 11 Feb 2015 03:13:31 PM JST
rq.Bool(
* Wed 11 Feb 2015 03:13:31 PM JST
rq.Card32(
* Wed 11 Feb 2015 03:13:31 PM JST
rq.Card32(
* Wed 11 Feb 2015 03:13:31 PM JST
rq.Set(
* Wed 11 Feb 2015 03:13:31 PM JST
rq.Gravity(
* Wed 11 Feb 2015 03:13:31 PM JST
rq.Gravity(
* Wed 11 Feb 2015 03:13:31 PM JST
rq.Card32(
* Wed 11 Feb 2015 03:13:31 PM JST
rq.Pixmap(
* Wed 11 Feb 2015 03:13:31 PM JST
rq.Card32(
* Wed 11 Feb 2015 03:13:31 PM JST
rq.Pixmap(
* Wed 11 Feb 2015 03:13:51 PM JST
                         
* Wed 11 Feb 2015 03:14:28 PM JST
CWMASK = {'background_pixmap': ,
          'background_pixel': ,
          'border_pixmap': ,
          'border_pixel': ,
          'bit_gravity': ,
          'win_gravity': ,
          'backing_store': , 
          'backing_planes': ,
          'backing_pixel': ,
          'override_redirect': ,
          'save_under': ,
          'event_mask': ,
          'do_not_propagate_mask': ,
          'colormap': ,
          'cursor': ,
          }

* Wed 11 Feb 2015 03:15:05 PM JST
xcb.xproto.CW.
* Wed 11 Feb 2015 03:20:58 PM JST
values
* Wed 11 Feb 2015 03:24:12 PM JST
CWMASK.get(key)
* Wed 11 Feb 2015 03:25:35 PM JST
# TODO: raise error
* Wed 11 Feb 2015 03:26:05 PM JST
'background_pixmap': xcb.xproto.CW.BackPixel,
          'background_pixel': xcb.xproto.CW.BackPixmap,
          'border_pixmap': xcb.xproto.CW.BorderPixmap,
          'border_pixel': xcb.xproto.CW.BorderPixel,
          'bit_gravity': xcb.xproto.CW.BitGravity,
          'win_gravity': xcb.xproto.CW.WinGravity,
          'backing_store': xcb.xproto.CW.BackingStore,
          'backing_planes': xcb.xproto.CW.BackingPlanes,
          'backing_pixel': xcb.xproto.CW.BackingPixel,
          'override_redirect': xcb.xproto.CW.OverrideRedirect,
          'save_under': xcb.xproto.CW.SaveUnder,
          'event_mask': xcb.xproto.CW.EventMask,
          'do_not_propagate_mask': xcb.xproto.CW.DontPropagate,
          'colormap': xcb.xproto.CW.Colormap,
          'cursor': xcb.xproto.CW.Cursor,
* Wed 11 Feb 2015 03:26:56 PM JST
 xcb.xproto.CW.Cursor,
* Wed 11 Feb 2015 03:26:56 PM JST
 xcb.xproto.CW.Colormap,
* Wed 11 Feb 2015 03:26:56 PM JST
 xcb.xproto.CW.DontPropagate,
* Wed 11 Feb 2015 03:26:56 PM JST
 xcb.xproto.CW.EventMask,
* Wed 11 Feb 2015 03:26:56 PM JST
 xcb.xproto.CW.SaveUnder,
* Wed 11 Feb 2015 03:26:56 PM JST
 xcb.xproto.CW.OverrideRedirect,
* Wed 11 Feb 2015 03:26:56 PM JST
 xcb.xproto.CW.BackingPixel,
* Wed 11 Feb 2015 03:26:56 PM JST
 xcb.xproto.CW.BackingPlanes,
* Wed 11 Feb 2015 03:26:56 PM JST
 xcb.xproto.CW.BackingStore,
* Wed 11 Feb 2015 03:26:57 PM JST
 xcb.xproto.CW.WinGravity,
* Wed 11 Feb 2015 03:26:57 PM JST
 xcb.xproto.CW.BitGravity,
* Wed 11 Feb 2015 03:26:57 PM JST
 xcb.xproto.CW.BorderPixel,
* Wed 11 Feb 2015 03:26:57 PM JST
 xcb.xproto.CW.BorderPixmap,
* Wed 11 Feb 2015 03:26:57 PM JST
 xcb.xproto.CW.BackPixmap,
* Wed 11 Feb 2015 03:26:57 PM JST
 xcb.xproto.CW.BackPixel,
* Wed 11 Feb 2015 03:28:49 PM JST
**values
* Wed 11 Feb 2015 03:28:55 PM JST
                              
* Wed 11 Feb 2015 03:37:54 PM JST
white = 
* Wed 11 Feb 2015 03:38:30 PM JST
white_
* Wed 11 Feb 2015 03:39:49 PM JST
depth = setup.roots[0].root_depth
* Wed 11 Feb 2015 03:39:56 PM JST
visual = setup.roots[0].root_visual
* Wed 11 Feb 2015 03:41:11 PM JST
EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure 
* Wed 11 Feb 2015 03:41:33 PM JST
conn.core.MapWindow(window)
* Wed 11 Feb 2015 03:41:39 PM JST
conn.flush()
* Wed 11 Feb 2015 03:41:52 PM JST
import xcb
from xcb.xproto import * 
import xcb.render

conn = xcb.connect()
setup = conn.get_setup()
white = setup.roots[0].white_pixel
window = conn.generate_id()
root = setup.roots[0].root
depth = setup.roots[0].root_depth
visual = setup.roots[0].root_visual

* Wed 11 Feb 2015 03:41:59 PM JST
coo = conn.core.CreateWindowChecked(depth, window, root, 0, 0, 640, 480, 0,
                                    WindowClass.InputOutput, visual,
                                    CW.BackPixel | CW.EventMask,
                                    [white, EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure ])

* Wed 11 Feb 2015 03:42:04 PM JST
coo.check()
* Wed 11 Feb 2015 03:42:08 PM JST
conn.core.MapWindow(window)
* Wed 11 Feb 2015 03:42:12 PM JST
conn.flush()
* Wed 11 Feb 2015 03:43:21 PM JST
_
* Wed 11 Feb 2015 03:46:20 PM JST
EventMask
* Wed 11 Feb 2015 03:46:57 PM JST
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0, )
* Wed 11 Feb 2015 03:48:05 PM JST
EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure
* Wed 11 Feb 2015 03:51:34 PM JST
from _xclient import XClient
x=XClient(':0.0')
setup=x.get_setup()
root=setup.roots[0].root
white=setup.roots[0].white_pixel
depth=setup.roots[0].root_depth
visual=setup.roots[0].root_visual
window=x.generate_id()

* Wed 11 Feb 2015 03:51:48 PM JST
import xcb
import xcb.xproto
from xcb.xproto import EventMask
from xcb.xproto import CW
from xcb.xproto import WindowClass

* Wed 11 Feb 2015 03:51:59 PM JST
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0, WindowClass.InputOutput, visual, backing_pixel=white, event_mask=EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure)
x.MapWindow(window)
x.flush()

* Wed 11 Feb 2015 03:56:27 PM JST
import xcb
from xcb.xproto import *

* Wed 11 Feb 2015 03:56:41 PM JST
conn = xcb.connect()
setup = conn.get_setup()
white = setup.roots[0].white_pixel
window = conn.generate_id()
root = setup.roots[0].root
depth = setup.roots[0].root_depth
visual = setup.roots[0].root_visual
coo = conn.core.CreateWindowChecked(depth, window, root, 0, 0, 640, 480, 0,
                                    WindowClass.InputOutput, visual,
                                    CW.BackPixel | CW.EventMask,
                                    [white, EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure ])

* Wed 11 Feb 2015 03:56:47 PM JST
coo.check()
conn.core.MapWindow(window)

* Wed 11 Feb 2015 03:56:50 PM JST
conn.flush()
* Wed 11 Feb 2015 03:57:13 PM JST
from _xclient import XClient
x=XClient(':0.0')
setup=x.get_setup()
root=setup.roots[0].root
white=setup.roots[0].white_pixel
depth=setup.roots[0].root_depth
visual=setup.roots[0].root_visual
window=x.generate_id()
import xcb
import xcb.xproto
from xcb.xproto import EventMask
from xcb.xproto import CW
from xcb.xproto import WindowClass
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0, WindowClass.InputOutput, visual, backing_pixel=white, event_mask=EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure)

* Wed 11 Feb 2015 03:57:18 PM JST
x.MapWindow(window)
x.flush()

* Wed 11 Feb 2015 03:57:46 PM JST
setup = conn.get_setup()
white = setup.roots[0].white_pixel
window = conn.generate_id()
root = setup.roots[0].root
depth = setup.roots[0].root_depth
visual = setup.roots[0].root_visual

* Wed 11 Feb 2015 03:57:55 PM JST
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0, WindowClass.InputOutput, visual, backing_pixel=white, event_mask=EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure)
x.MapWindow(window)
x.flush()

* Wed 11 Feb 2015 03:58:29 PM JST
x=XClient(':0.0')
setup=x.get_setup()

* Wed 11 Feb 2015 03:58:38 PM JST
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0, WindowClass.InputOutput, visual, backing_pixel=white, event_mask=EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure)
x.MapWindow(window)
x.flush()

* Wed 11 Feb 2015 03:59:02 PM JST
setup.roots[0].white_pixel
* Wed 11 Feb 2015 03:59:38 PM JST
background_pixel
* Wed 11 Feb 2015 03:59:58 PM JST
from _xclient import XClient
x=XClient(':0.0')
setup=x.get_setup()
root=setup.roots[0].root
white=setup.roots[0].white_pixel
depth=setup.roots[0].root_depth
visual=setup.roots[0].root_visual
window=x.generate_id()
import xcb
import xcb.xproto
from xcb.xproto import EventMask
from xcb.xproto import CW
from xcb.xproto import WindowClass

* Wed 11 Feb 2015 04:00:06 PM JST
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0, WindowClass.InputOutput, visual, background_pixel=white, event_mask=EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure)
x.MapWindow(window)
x.flush()

* Wed 11 Feb 2015 04:00:34 PM JST
BackPixmap
* Wed 11 Feb 2015 04:00:36 PM JST
BackPixel
* Wed 11 Feb 2015 04:00:48 PM JST
from _xclient import XClient
x=XClient(':0.0')
setup=x.get_setup()
root=setup.roots[0].root
white=setup.roots[0].white_pixel
depth=setup.roots[0].root_depth
visual=setup.roots[0].root_visual
window=x.generate_id()
import xcb
import xcb.xproto
from xcb.xproto import EventMask
from xcb.xproto import CW
from xcb.xproto import WindowClass

* Wed 11 Feb 2015 04:00:53 PM JST
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0, WindowClass.InputOutput, visual, background_pixel=white, event_mask=EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure)
x.MapWindow(window)
x.flush()

* Wed 11 Feb 2015 04:03:00 PM JST
from _xclient import XClient
x=XClient(':0.0')
setup=x.get_setup()
root=setup.roots[0].root
white=setup.roots[0].white_pixel
depth=setup.roots[0].root_depth
visual=setup.roots[0].root_visual
window=x.generate_id()
import xcb
import xcb.xproto
from xcb.xproto import EventMask
from xcb.xproto import CW
from xcb.xproto import WindowClass

* Wed 11 Feb 2015 04:03:06 PM JST
import xcb
import xcb.xproto
from xcb.xproto import EventMask
from xcb.xproto import CW
from xcb.xproto import WindowClass

* Wed 11 Feb 2015 04:03:12 PM JST
x=XClient(':0.0')
setup=x.get_setup()
root=setup.roots[0].root
white=setup.roots[0].white_pixel
depth=setup.roots[0].root_depth
visual=setup.roots[0].root_visual
window=x.generate_id()

* Wed 11 Feb 2015 04:03:16 PM JST
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0, WindowClass.InputOutput, visual, background_pixel=white, event_mask=EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure)

* Wed 11 Feb 2015 04:03:34 PM JST
x.MapWindow(window)

* Wed 11 Feb 2015 04:03:37 PM JST
x.flush()
* Wed 11 Feb 2015 04:04:21 PM JST
CW.BackPixel | CW.EventMask
* Wed 11 Feb 2015 04:04:29 PM JST
[white, EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure ]
* Wed 11 Feb 2015 04:05:03 PM JST
xcb.xproto.CW.BackPixel
* Wed 11 Feb 2015 04:05:34 PM JST
conn = xcb.connect()
setup = conn.get_setup()
white = setup.roots[0].white_pixel
window = conn.generate_id()
root = setup.roots[0].root
depth = setup.roots[0].root_depth
visual = setup.roots[0].root_visual
coo = conn.core.CreateWindowChecked(depth, window, root, 0, 0, 640, 480, 0,
                                    WindowClass.InputOutput, visual,
                                    CW.BackPixel | CW.EventMask,
                                    [white, EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure ])
coo.check()
conn.core.MapWindow(window)
conn.flush()

* Wed 11 Feb 2015 04:06:40 PM JST
x=XClient(':0.0')
setup=x.get_setup()
root=setup.roots[0].root
white=setup.roots[0].white_pixel
depth=setup.roots[0].root_depth
visual=setup.roots[0].root_visual
window=x.generate_id()

* Wed 11 Feb 2015 04:06:46 PM JST
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0, WindowClass.InputOutput, visual, background_pixel=white, event_mask=EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure)
* Wed 11 Feb 2015 04:06:57 PM JST
x.MapWindow(window)
x.flush()

* Wed 11 Feb 2015 04:07:56 PM JST
([(key, value),])
* Wed 11 Feb 2015 04:07:59 PM JST
OrderedDict
* Wed 11 Feb 2015 04:09:35 PM JST
CWMASK = OrderedDict((('background_pixmap', xcb.xproto.CW.BackPixmap),
                      ('background_pixel', xcb.xproto.CW.BackPixel),
                      ('border_pixmap', xcb.xproto.CW.BorderPixmap),
                      ('border_pixel', xcb.xproto.CW.BorderPixel),
                      ('bit_gravity', xcb.xproto.CW.BitGravity),
                      ('win_gravity', xcb.xproto.CW.WinGravity),
                      ('backing_store', xcb.xproto.CW.BackingStore),
                      ('backing_planes', xcb.xproto.CW.BackingPlanes),
                      ('backing_pixel', xcb.xproto.CW.BackingPixel),
                      ('override_redirect', xcb.xproto.CW.OverrideRedirect),
                      ('save_under', xcb.xproto.CW.SaveUnder),
                      ('event_mask', xcb.xproto.CW.EventMask),
                      ('do_not_propagate_mask', xcb.xproto.CW.DontPropagate),
                      ('colormap', xcb.xproto.CW.Colormap),
                      ('cursor', xcb.xproto.CW.Cursor),
                  ))

* Wed 11 Feb 2015 04:09:38 PM JST
from collections import OrderedDict
* Wed 11 Feb 2015 04:09:43 PM JST
CWMASK = OrderedDict((('background_pixmap', xcb.xproto.CW.BackPixmap),
                      ('background_pixel', xcb.xproto.CW.BackPixel),
                      ('border_pixmap', xcb.xproto.CW.BorderPixmap),
                      ('border_pixel', xcb.xproto.CW.BorderPixel),
                      ('bit_gravity', xcb.xproto.CW.BitGravity),
                      ('win_gravity', xcb.xproto.CW.WinGravity),
                      ('backing_store', xcb.xproto.CW.BackingStore),
                      ('backing_planes', xcb.xproto.CW.BackingPlanes),
                      ('backing_pixel', xcb.xproto.CW.BackingPixel),
                      ('override_redirect', xcb.xproto.CW.OverrideRedirect),
                      ('save_under', xcb.xproto.CW.SaveUnder),
                      ('event_mask', xcb.xproto.CW.EventMask),
                      ('do_not_propagate_mask', xcb.xproto.CW.DontPropagate),
                      ('colormap', xcb.xproto.CW.Colormap),
                      ('cursor', xcb.xproto.CW.Cursor),
                  ))

* Wed 11 Feb 2015 04:10:44 PM JST
from _xclient import XClient
import xcb
import xcb.xproto
from xcb.xproto import EventMask
from xcb.xproto import CW
from xcb.xproto import WindowClass
x=XClient(':0.0')
setup=x.get_setup()
root=setup.roots[0].root
white=setup.roots[0].white_pixel
depth=setup.roots[0].root_depth
visual=setup.roots[0].root_visual

* Wed 11 Feb 2015 04:10:47 PM JST
from _xclient import XClient
import xcb
import xcb.xproto
from xcb.xproto import EventMask
from xcb.xproto import CW
from xcb.xproto import WindowClass
x=XClient(':0.0')
setup=x.get_setup()
root=setup.roots[0].root
white=setup.roots[0].white_pixel
depth=setup.roots[0].root_depth
visual=setup.roots[0].root_visual
window=x.generate_id()

* Wed 11 Feb 2015 04:10:54 PM JST
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0, WindowClass.InputOutput, visual, background_pixel=white, event_mask=EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure)

* Wed 11 Feb 2015 04:10:59 PM JST
x.MapWindow(window)
x.flush()

* Wed 11 Feb 2015 04:18:36 PM JST

* Wed 11 Feb 2015 04:18:36 PM JST

* Wed 11 Feb 2015 04:18:36 PM JST
        print(value_mask)

* Wed 11 Feb 2015 04:18:36 PM JST
        print(value_mask)

* Wed 11 Feb 2015 04:18:36 PM JST
        print(value_mask)
        print(value_list)

* Wed 11 Feb 2015 04:18:53 PM JST
coo = 
* Wed 11 Feb 2015 04:18:55 PM JST

* Wed 11 Feb 2015 04:18:55 PM JST

* Wed 11 Feb 2015 04:18:55 PM JST
        coo.check()

* Wed 11 Feb 2015 04:42:04 PM JST
from _xclient import _reply
* Wed 11 Feb 2015 04:43:35 PM JST
                protocol_major_version=setup.protocol_major_version,
                protocol_minor_version=setup.protocol_minor_version,

* Wed 11 Feb 2015 04:44:03 PM JST
keys()
* Wed 11 Feb 2015 04:44:04 PM JST
_data.keys()
* Wed 11 Feb 2015 04:44:23 PM JST
reason=str(setup.reason.buf())
* Wed 11 Feb 2015 04:44:28 PM JST
str(
* Wed 11 Feb 2015 04:44:34 PM JST
                
* Wed 11 Feb 2015 04:45:17 PM JST
status=setup.status, reason=str(setup.reason.buf())
* Wed 11 Feb 2015 04:45:21 PM JST
str(
* Wed 11 Feb 2015 04:45:27 PM JST
                
* Wed 11 Feb 2015 04:47:16 PM JST
protocol_major
* Wed 11 Feb 2015 04:47:44 PM JST
release_number
* Wed 11 Feb 2015 04:48:08 PM JST
resource_id_base=setup.resource_id_base
* Wed 11 Feb 2015 04:48:20 PM JST
resource_id_mask=setup.resource_id_mask,
* Wed 11 Feb 2015 04:48:36 PM JST
image_byte_order=setup.image_byte_order,
* Wed 11 Feb 2015 04:48:42 PM JST
bitmap_format_scanline_unit=setup.bitmap_format_scanline_unit,
* Wed 11 Feb 2015 04:48:46 PM JST
bitmap_format_scanline_pad=setup.bitmap_format_scanline_pad,
* Wed 11 Feb 2015 04:48:53 PM JST
bitmap_format_bit_order=setup.bitmap_format_bit_order,
* Wed 11 Feb 2015 04:48:57 PM JST
pixmap_formats=formats,
* Wed 11 Feb 2015 04:49:01 PM JST
roots=roots,
* Wed 11 Feb 2015 04:49:07 PM JST
release_number
* Wed 11 Feb 2015 04:49:51 PM JST
pixmap_formats'
* Wed 11 Feb 2015 04:50:00 PM JST
motion_buffer_size=setup.motion_buffer_size,
* Wed 11 Feb 2015 04:50:03 PM JST
maximum_request_length=setup.maximum_request_length,
* Wed 11 Feb 2015 04:50:09 PM JST
                min_keycode=setup.min_keycode,
                max_keycode=setup.max_keycode,

* Wed 11 Feb 2015 04:50:20 PM JST
        else:
            # TODO: (Atami) [2015/02/10]
            raise StandardError()

* Wed 11 Feb 2015 04:50:31 PM JST
keys()
* Wed 11 Feb 2015 04:50:38 PM JST
_data.
* Wed 11 Feb 2015 04:50:45 PM JST
keys()
* Wed 11 Feb 2015 04:50:54 PM JST
_data
* Wed 11 Feb 2015 04:51:10 PM JST
keys()
* Wed 11 Feb 2015 04:51:14 PM JST
_data.
* Wed 11 Feb 2015 04:55:46 PM JST
root
* Wed 11 Feb 2015 04:55:51 PM JST
depths
* Wed 11 Feb 2015 04:55:56 PM JST
keys()
* Wed 11 Feb 2015 04:57:54 PM JST
allowed_depths
* Wed 11 Feb 2015 04:59:52 PM JST
                        visuals.append(_reply.VisualType(
                            visual_id=vtyp.visual_id,
                            class_=vtyp._class,
                            bits_per_rgb_value=vtyp.bits_per_rgb_value,
                            colormap_entries=vtyp.colormap_entries,
                            red_mask=vtyp.red_mask,
                            green_mask=vtyp.green_mask,
                            blue_mask=vtyp.blue_mask))

* Wed 11 Feb 2015 05:00:22 PM JST
visual_
* Wed 11 Feb 2015 05:00:35 PM JST
                    depths.append(_reply.Depth(
                        depth=dpth.depth, visuals=visuals))

* Wed 11 Feb 2015 05:00:48 PM JST
                roots.append(_reply.Screen(
                    root=sc.root,
                    width_in_pixels=sc.width_in_pixels,
                    height_in_pixels=sc.height_in_pixels,
                    width_in_millimeters=sc.width_in_millimeters,
                    height_in_millimeters=sc.height_in_millimeters,
                    allowed_depths=depths,
                    root_depth=sc.root_depth,
                    root_visual=sc.root_visual,
                    default_colormap=sc.default_colormap,
                    white_pixel=sc.white_pixel,
                    black_pixel=sc.black_pixel,
                    min_installed_maps=sc.min_installed_maps,
                    backing_stores=sc.backing_stores,
                    save_unders=sc.save_unders,
                    current_input_masks=sc.current_input_masks))

* Wed 11 Feb 2015 05:01:11 PM JST
sc.root
* Wed 11 Feb 2015 05:01:21 PM JST
return
* Wed 11 Feb 2015 05:02:06 PM JST
setup.
* Wed 11 Feb 2015 05:02:25 PM JST
formats
* Wed 11 Feb 2015 05:03:15 PM JST
_Xlib
* Wed 11 Feb 2015 05:03:27 PM JST
from _xclient import XClient
* Wed 11 Feb 2015 05:05:05 PM JST
            # parse pixmap_formats
            formats = []
            for fmt in setup.pixmap_formats:
                formats.append(_reply.Format(depth=fmt.depth,
                                             bits_per_pixel=fmt.bits_per_pixel,
                                             scanline_pad=fmt.scanline_pad))

* Wed 11 Feb 2015 05:05:23 PM JST
int(
* Wed 11 Feb 2015 05:06:55 PM JST
width_in_mms'
* Wed 11 Feb 2015 05:07:08 PM JST
height_in_mms
* Wed 11 Feb 2015 05:07:30 PM JST
backing_store
* Wed 11 Feb 2015 05:08:21 PM JST
keys()
* Wed 11 Feb 2015 05:08:21 PM JST
_data.keys()
* Wed 11 Feb 2015 05:08:21 PM JST
0]._data.keys()
* Wed 11 Feb 2015 05:08:22 PM JST
roots[0]._data.keys()
* Wed 11 Feb 2015 05:08:40 PM JST
max_request_length
* Wed 11 Feb 2015 05:09:28 PM JST
int(
* Wed 11 Feb 2015 05:09:47 PM JST
setup.roots[0].default_colormap
* Wed 11 Feb 2015 05:09:55 PM JST
D setup.roots[0].default_colormap
* Wed 11 Feb 2015 05:48:44 PM JST
from _xclient import XClient
import xcb
import xcb.xproto
from xcb.xproto import EventMask
from xcb.xproto import CW
from xcb.xproto import WindowClass

* Wed 11 Feb 2015 05:48:49 PM JST
x=XClient(':0.0')
setup=x.get_setup()

* Wed 11 Feb 2015 05:48:53 PM JST
root=setup.roots[0].root
white=setup.roots[0].white_pixel
depth=setup.roots[0].root_depth
visual=setup.roots[0].root_visual
window=x.generate_id()

* Wed 11 Feb 2015 05:50:12 PM JST
display
* Wed 11 Feb 2015 05:51:23 PM JST
allocate_resource_id()
* Wed 11 Feb 2015 05:52:07 PM JST
from _xclient import XClient
import xcb
import xcb.xproto
from xcb.xproto import EventMask
from xcb.xproto import CW
from xcb.xproto import WindowClass

* Wed 11 Feb 2015 05:52:13 PM JST
x=XClient(':0.0')
setup=x.get_setup()
root=setup.roots[0].root
white=setup.roots[0].white_pixel
depth=setup.roots[0].root_depth
visual=setup.roots[0].root_visual
window=x.generate_id()

* Wed 11 Feb 2015 05:52:17 PM JST
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0, WindowClass.InputOutput, visual, background_pixel=white, event_mask=EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure)

* Wed 11 Feb 2015 05:52:22 PM JST
x.MapWindow(window)
* Wed 11 Feb 2015 05:53:22 PM JST
from _xclient import XClient
import xcb
import xcb.xproto
from xcb.xproto import EventMask
from xcb.xproto import CW
from xcb.xproto import WindowClass
x=XClient(':0.0')
setup=x.get_setup()
root=setup.roots[0].root
white=setup.roots[0].white_pixel
depth=setup.roots[0].root_depth
visual=setup.roots[0].root_visual
window=x.generate_id()

* Wed 11 Feb 2015 05:53:26 PM JST
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0, WindowClass.InputOutput, visual, background_pixel=white, event_mask=EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure)

* Wed 11 Feb 2015 05:53:30 PM JST
x.MapWindow(window)

* Wed 11 Feb 2015 05:53:47 PM JST
display
* Wed 11 Feb 2015 05:54:24 PM JST
from _xclient import XClient
import xcb
import xcb.xproto
from xcb.xproto import EventMask
from xcb.xproto import CW
from xcb.xproto import WindowClass
x=XClient(':0.0')
setup=x.get_setup()
root=setup.roots[0].root
white=setup.roots[0].white_pixel
depth=setup.roots[0].root_depth
visual=setup.roots[0].root_visual
window=x.generate_id()

* Wed 11 Feb 2015 05:54:29 PM JST
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0, WindowClass.InputOutput, visual, background_pixel=white, event_mask=EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure)

* Wed 11 Feb 2015 05:54:32 PM JST
x.MapWindow(window)

* Wed 11 Feb 2015 05:54:35 PM JST
x.flush()

* Wed 11 Feb 2015 06:08:53 PM JST
/usr/include/X11/X.h
* Wed 11 Feb 2015 06:38:52 PM JST
#define NoEventMask			0L
#define KeyPressMask			(1L<<0)  
#define KeyReleaseMask			(1L<<1)  
#define ButtonPressMask			(1L<<2)  
#define ButtonReleaseMask		(1L<<3)  
#define EnterWindowMask			(1L<<4)  
#define LeaveWindowMask			(1L<<5)  
#define PointerMotionMask		(1L<<6)  
#define PointerMotionHintMask		(1L<<7)  
#define Button1MotionMask		(1L<<8)  
#define Button2MotionMask		(1L<<9)  
#define Button3MotionMask		(1L<<10) 
#define Button4MotionMask		(1L<<11) 
#define Button5MotionMask		(1L<<12) 
#define ButtonMotionMask		(1L<<13) 
#define KeymapStateMask			(1L<<14)
#define ExposureMask			(1L<<15) 
#define VisibilityChangeMask		(1L<<16) 
#define StructureNotifyMask		(1L<<17) 
#define ResizeRedirectMask		(1L<<18) 
#define SubstructureNotifyMask		(1L<<19) 
#define SubstructureRedirectMask	(1L<<20) 
#define FocusChangeMask			(1L<<21) 
#define PropertyChangeMask		(1L<<22) 
#define ColormapChangeMask		(1L<<23) 
#define OwnerGrabButtonMask		(1L<<24) 

* Wed 11 Feb 2015 06:39:03 PM JST
#define 
* Wed 11 Feb 2015 06:39:03 PM JST
#define 
* Wed 11 Feb 2015 06:39:03 PM JST
#define 
* Wed 11 Feb 2015 06:39:03 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:04 PM JST
#define 
* Wed 11 Feb 2015 06:39:05 PM JST
#define 
* Wed 11 Feb 2015 06:39:05 PM JST
#define 
* Wed 11 Feb 2015 06:39:05 PM JST
#define 
* Wed 11 Feb 2015 06:39:05 PM JST
#define 
* Wed 11 Feb 2015 06:39:05 PM JST
#define 
* Wed 11 Feb 2015 06:39:05 PM JST
#define 
* Wed 11 Feb 2015 06:43:31 PM JST
class WindowClass(_IntEnum):
    CopyFromParent = 0
    InputOutput    = 1
    InputOnly      = 2

* Wed 11 Feb 2015 06:44:49 PM JST
class WindowClass(_IntEnum):
    CopyFromParent = 0
    InputOutput    = 1
    InputOnly      = 2

* Wed 11 Feb 2015 06:45:13 PM JST
Window classes used by CreateWindow
* Wed 11 Feb 2015 06:45:26 PM JST
class WindowClass(_IntEnum):
    CopyFromParent = 0
    InputOutput    = 1
    InputOnly      = 2

* Wed 11 Feb 2015 06:45:36 PM JST
SUMMARY
* Wed 11 Feb 2015 06:45:39 PM JST
Window classes used by CreateWindow
* Wed 11 Feb 2015 06:46:04 PM JST

* Wed 11 Feb 2015 06:46:04 PM JST

* Wed 11 Feb 2015 06:46:04 PM JST
# Window classes used by CreateWindow

* Wed 11 Feb 2015 06:46:33 PM JST
Input Event Masks. Used as event-mask window attribute and as arguments
   to Grab requests.  Not to be confused with event names.
* Wed 11 Feb 2015 06:51:00 PM JST
    
* Wed 11 Feb 2015 06:51:18 PM JST
Input Event Masks.
* Wed 11 Feb 2015 10:26:01 PM JST
        value_mask, value_list = 0, []
        for key, value in values.items():
            msk = CWMASK.get(key) # TODO: raise error
            value_mask |= msk
            value_list.append(value)

* Wed 11 Feb 2015 10:28:32 PM JST
display=self._disp.display,
* Wed 11 Feb 2015 10:28:39 PM JST
window=window
* Wed 11 Feb 2015 10:29:17 PM JST
return
* Wed 11 Feb 2015 10:29:20 PM JST
            
* Wed 11 Feb 2015 10:29:55 PM JST
rep.all_event_masks,
                                               rep.backing_pixel,
                                               rep.backing_planes,
                                               rep.backing_store,
                                               rep.bit_gravity, rep.colormap,
                                               rep.do_not_propagate_mask,
                                               rep.map_is_installed,
                                               rep.map_state,
                                               rep.override_redirect,
                                               rep.save_under, rep.visual,
                                               rep.win_gravity,
                                               rep.your_event_mask
* Wed 11 Feb 2015 10:30:46 PM JST
all_event_masks
* Wed 11 Feb 2015 10:30:50 PM JST
backing_pixel
* Wed 11 Feb 2015 10:30:56 PM JST
backing_planes
* Wed 11 Feb 2015 10:31:03 PM JST
backing_store
* Wed 11 Feb 2015 10:31:08 PM JST
bit_gravity
* Wed 11 Feb 2015 10:31:14 PM JST
colormap
* Wed 11 Feb 2015 10:31:21 PM JST
do_not_propagate_mask
* Wed 11 Feb 2015 10:31:27 PM JST
map_is_installed
* Wed 11 Feb 2015 10:31:31 PM JST
map_state
* Wed 11 Feb 2015 10:31:37 PM JST
override_redirect
* Wed 11 Feb 2015 10:31:43 PM JST
save_under
* Wed 11 Feb 2015 10:31:47 PM JST
visual
* Wed 11 Feb 2015 10:31:55 PM JST
win_gravity
* Wed 11 Feb 2015 10:32:00 PM JST
your_event_mask
* Wed 11 Feb 2015 10:32:08 PM JST
all_event_masks=rep.all_event_masks,
            backing_pixel=rep.backing_pixel,
            backing_planes=rep.backing_planes,
            backing_store=rep.backing_store,
            bit_gravity=rep.bit_gravity, colormap=rep.colormap,
            do_not_propagate_mask=rep.do_not_propagate_mask,
            map_is_installed=rep.map_is_installed,
            map_state=rep.map_state,
            override_redirect=rep.override_redirect,
            save_under=rep.save_under, visual=rep.visual,
            win_gravity=rep.win_gravity,
            your_event_mask=rep.your_event_mask
* Wed 11 Feb 2015 10:32:37 PM JST
x.MapWindow(window)
* Wed 11 Feb 2015 10:33:02 PM JST
c.core.GetWindowAttributes()
* Wed 11 Feb 2015 10:33:09 PM JST
emacs=52428822
* Wed 11 Feb 2015 10:33:22 PM JST
c.core.GetWindowAttributes()
* Wed 11 Feb 2015 10:35:58 PM JST
request.GetWindowAttributes(display=d.display,window=emacs)._data
* Wed 11 Feb 2015 10:36:13 PM JST
backing_bit_planes'
* Wed 11 Feb 2015 10:36:16 PM JST
backing_bit_planes
* Wed 11 Feb 2015 10:40:25 PM JST
emacs=52428822
xfterm=41943044

* Wed 11 Feb 2015 10:40:37 PM JST
from _xclient import XClient
* Wed 11 Feb 2015 10:40:47 PM JST
x=XClient(':0.0')
* Wed 11 Feb 2015 10:40:59 PM JST
emacs=52428822
* Wed 11 Feb 2015 10:41:02 PM JST
from _xclient import XClient
* Wed 11 Feb 2015 10:41:05 PM JST
x=XClient(':0.0')
* Wed 11 Feb 2015 10:44:09 PM JST
display=self._disp.display,
* Wed 11 Feb 2015 10:45:48 PM JST
    @abstractmethod # None
    def DestroyWindow(self, window):
        raise NotImplementedError()


* Wed 11 Feb 2015 10:46:30 PM JST
DestroySubWindows
* Wed 11 Feb 2015 10:46:39 PM JST
display=self._disp.display, window=window
* Wed 11 Feb 2015 10:47:01 PM JST
_conn
* Wed 11 Feb 2015 10:49:40 PM JST
raise NotImplementedError()
* Wed 11 Feb 2015 10:50:15 PM JST
_request.MapWindow(display=self._disp.display, window=window)
* Wed 11 Feb 2015 10:50:43 PM JST
_request.MapWindow(display=self._disp.display, window=window)
* Wed 11 Feb 2015 10:52:05 PM JST
    @abstractmethod # None
    def UnmapSubwindows(self, window):
        raise NotImplementedError()

* Wed 11 Feb 2015 10:55:23 PM JST
pass
* Wed 11 Feb 2015 10:55:40 PM JST
_request.UnmapWindow(display=self._disp.display, window=window)
* Wed 11 Feb 2015 11:06:33 PM JST
                      rq.Int16('x'),
                      rq.Int16('y'),
                      rq.Card16('width'),
                      rq.Card16('height'),
                      rq.Int16('border_width'),
                      rq.Window('sibling'),
                      rq.Set('stack_mode', 1,

* Wed 11 Feb 2015 11:07:44 PM JST
Int16(
* Wed 11 Feb 2015 11:07:45 PM JST
rq.Int16(
* Wed 11 Feb 2015 11:07:49 PM JST
rq.Int16(
* Wed 11 Feb 2015 11:07:52 PM JST
rq.Card16(
* Wed 11 Feb 2015 11:07:54 PM JST
rq.Card16(
* Wed 11 Feb 2015 11:07:56 PM JST
rq.Int16(
* Wed 11 Feb 2015 11:07:58 PM JST
rq.Window(
* Wed 11 Feb 2015 11:08:01 PM JST
rq.Set(
* Wed 11 Feb 2015 11:08:10 PM JST
                      
* Wed 11 Feb 2015 11:08:10 PM JST
                      
* Wed 11 Feb 2015 11:08:10 PM JST
                      
* Wed 11 Feb 2015 11:08:11 PM JST
                      
* Wed 11 Feb 2015 11:08:11 PM JST
                      
* Wed 11 Feb 2015 11:08:11 PM JST
                      
* Wed 11 Feb 2015 11:08:11 PM JST
                      
* Wed 11 Feb 2015 11:15:41 PM JST
                            
* Wed 11 Feb 2015 11:16:31 PM JST
border_width
* Wed 11 Feb 2015 11:16:40 PM JST
sibling
* Wed 11 Feb 2015 11:16:46 PM JST
stack_mode
* Wed 11 Feb 2015 11:16:58 PM JST
BorderWidth
* Wed 11 Feb 2015 11:17:18 PM JST
xcb.xproto.ConfigWindow.
* Wed 11 Feb 2015 11:17:21 PM JST
Sibling
* Wed 11 Feb 2015 11:17:30 PM JST
xcb.xproto.ConfigWindow.
* Wed 11 Feb 2015 11:17:32 PM JST
StackMode
* Wed 11 Feb 2015 11:18:51 PM JST
CONFIGWINDOW
* Wed 11 Feb 2015 11:19:08 PM JST
        value_mask, value_list = 0, []
        for key, value in values.items():
            msk = CWMASK.get(key) # TODO: raise error
            value_mask |= msk
            value_list.append(value)
        self.core.ChangeWindowAttributes(window, value_mask, value_list)


* Wed 11 Feb 2015 11:19:33 PM JST
CWMASK
* Thu 12 Feb 2015 12:01:59 AM JST
mode=
* Thu 12 Feb 2015 12:25:25 AM JST
forma
* Thu 12 Feb 2015 12:29:21 AM JST
data_len,
* Thu 12 Feb 2015 12:29:22 AM JST
                       
* Thu 12 Feb 2015 12:29:41 AM JST
data_len,
* Thu 12 Feb 2015 12:29:42 AM JST
                       
* Thu 12 Feb 2015 12:30:02 AM JST
data_len,
* Thu 12 Feb 2015 12:30:04 AM JST
    
* Thu 12 Feb 2015 12:30:08 AM JST
data_
* Thu 12 Feb 2015 12:39:39 AM JST
property_
* Thu 12 Feb 2015 12:48:28 AM JST
owner
* Thu 12 Feb 2015 12:48:37 AM JST
            
* Thu 12 Feb 2015 12:48:38 AM JST
            
* Thu 12 Feb 2015 12:48:44 AM JST
            
* Thu 12 Feb 2015 02:23:11 PM JST
raise NotImplementedError()
* Thu 12 Feb 2015 02:39:32 PM JST
raise NotImplementedError()
* Thu 12 Feb 2015 02:42:29 PM JST
owner
* Thu 12 Feb 2015 02:42:33 PM JST
owner_
* Thu 12 Feb 2015 02:42:47 PM JST
owner_events
* Thu 12 Feb 2015 02:43:24 PM JST
            
* Thu 12 Feb 2015 02:43:25 PM JST
            
* Thu 12 Feb 2015 02:46:14 PM JST
            
* Thu 12 Feb 2015 02:46:39 PM JST
            
* Thu 12 Feb 2015 02:48:18 PM JST
            
* Thu 12 Feb 2015 02:59:25 PM JST
rep
* Thu 12 Feb 2015 02:59:40 PM JST
revert_to
* Thu 12 Feb 2015 03:02:24 PM JST
raise NotImplementedError()
* Thu 12 Feb 2015 03:04:41 PM JST
        
* Thu 12 Feb 2015 03:04:42 PM JST
            
* Thu 12 Feb 2015 03:05:58 PM JST
draw_direction
* Thu 12 Feb 2015 03:06:03 PM JST
min_byte1
* Thu 12 Feb 2015 03:06:08 PM JST
max_byte1
* Thu 12 Feb 2015 03:06:14 PM JST
all_chars_exist
* Thu 12 Feb 2015 03:06:19 PM JST
font_ascent
* Thu 12 Feb 2015 03:06:23 PM JST
font_descent
* Thu 12 Feb 2015 03:06:29 PM JST
char_infos
* Thu 12 Feb 2015 03:06:34 PM JST
properties
* Thu 12 Feb 2015 03:06:39 PM JST
char_infos
* Thu 12 Feb 2015 03:07:00 PM JST

* Thu 12 Feb 2015 03:07:01 PM JST

* Thu 12 Feb 2015 03:07:01 PM JST
            properties=rep.properties,

* Thu 12 Feb 2015 03:07:09 PM JST

* Thu 12 Feb 2015 03:07:09 PM JST

* Thu 12 Feb 2015 03:07:09 PM JST
            char_infos=rep.char_infos, 

* Thu 12 Feb 2015 03:08:24 PM JST
draw_direction
* Thu 12 Feb 2015 03:08:30 PM JST
font_ascent
* Thu 12 Feb 2015 03:08:34 PM JST
font_descent
* Thu 12 Feb 2015 03:08:39 PM JST
overall_ascent
* Thu 12 Feb 2015 03:08:43 PM JST
overall_descent
* Thu 12 Feb 2015 03:08:47 PM JST
overall_width
* Thu 12 Feb 2015 03:08:52 PM JST
overall_left
* Thu 12 Feb 2015 03:08:57 PM JST
overall_right
* Thu 12 Feb 2015 03:09:23 PM JST
max_names
* Thu 12 Feb 2015 03:09:33 PM JST
pattern
* Thu 12 Feb 2015 03:10:01 PM JST
pattern_len, 
* Thu 12 Feb 2015 03:10:13 PM JST
pattern_len, 
* Thu 12 Feb 2015 03:10:28 PM JST
pattern_len, 
* Thu 12 Feb 2015 03:10:32 PM JST
pattern
* Thu 12 Feb 2015 03:12:12 PM JST
rep
* Thu 12 Feb 2015 03:12:13 PM JST
pattern=rep
* Thu 12 Feb 2015 03:12:37 PM JST
pattern_len, 
* Thu 12 Feb 2015 03:13:09 PM JST
max_names=max_names,
            pattern=pattern
* Thu 12 Feb 2015 03:13:35 PM JST
name
* Thu 12 Feb 2015 03:13:46 PM JST
min_bounds
* Thu 12 Feb 2015 03:13:53 PM JST
max_bounds
* Thu 12 Feb 2015 03:13:58 PM JST
min_char_or_byte2
* Thu 12 Feb 2015 03:14:03 PM JST
max_char_or_byte2
* Thu 12 Feb 2015 03:14:09 PM JST
default_char
* Thu 12 Feb 2015 03:14:16 PM JST
draw_direction
* Thu 12 Feb 2015 03:14:21 PM JST
min_byte1
* Thu 12 Feb 2015 03:14:26 PM JST
max_byte1
* Thu 12 Feb 2015 03:14:30 PM JST
all_chars_exist
* Thu 12 Feb 2015 03:14:35 PM JST
font_ascent
* Thu 12 Feb 2015 03:14:39 PM JST
font_descent
* Thu 12 Feb 2015 03:14:44 PM JST
replies_hint
* Thu 12 Feb 2015 03:14:50 PM JST
properties
* Thu 12 Feb 2015 03:16:19 PM JST
SetFontPath
* Thu 12 Feb 2015 03:25:24 PM JST
value_mask, value_list
* Thu 12 Feb 2015 03:26:18 PM JST
):
* Thu 12 Feb 2015 03:26:29 PM JST
value_list
* Thu 12 Feb 2015 03:26:29 PM JST
value_mask, value_list
* Thu 12 Feb 2015 03:26:52 PM JST
        # TODO: (Atami) [2015/02/12]
        value_mask, value_list = 0, []

* Thu 12 Feb 2015 03:27:54 PM JST
value_mask
* Thu 12 Feb 2015 03:28:52 PM JST
dashes_len, 
* Thu 12 Feb 2015 03:29:01 PM JST
dashes_len, 
* Thu 12 Feb 2015 03:29:10 PM JST
dashes_len, 
* Thu 12 Feb 2015 03:29:13 PM JST
dashes_len
* Thu 12 Feb 2015 03:29:59 PM JST
raise NotImplementedError()
* Thu 12 Feb 2015 03:31:05 PM JST
rectangles_len, 
* Thu 12 Feb 2015 03:31:20 PM JST
rectangles_len
* Thu 12 Feb 2015 03:31:31 PM JST
clip_
* Thu 12 Feb 2015 03:31:33 PM JST
clip_
* Thu 12 Feb 2015 03:31:34 PM JST
clip_
* Thu 12 Feb 2015 03:31:36 PM JST
clip_
* Thu 12 Feb 2015 03:31:43 PM JST
rectangles_len, 
* Thu 12 Feb 2015 03:31:43 PM JST
                          rectangles_len, 
* Thu 12 Feb 2015 03:31:50 PM JST
            
* Thu 12 Feb 2015 03:32:04 PM JST
clip_
* Thu 12 Feb 2015 03:32:05 PM JST
clip_
* Thu 12 Feb 2015 03:32:06 PM JST
                          
* Thu 12 Feb 2015 03:32:26 PM JST
clip_
* Thu 12 Feb 2015 03:32:31 PM JST
clip_
* Thu 12 Feb 2015 03:32:36 PM JST
rectangles_len, 
* Thu 12 Feb 2015 03:32:37 PM JST
                          rectangles_len, 
* Thu 12 Feb 2015 03:37:06 PM JST
raise NotImplementedError()
* Thu 12 Feb 2015 03:41:11 PM JST
        _request.CopyArea(
            display=self._disp.display,
            src_drawable=src_drawable,
            dst_drawable=dst_drawable,
            gc=gc,
            src_x=src_x,
            src_y=src_y,
            dst_x=dst_x,
            dst_y=dst_y,
            width=width,
            height=height)

* Thu 12 Feb 2015 03:42:32 PM JST
points_len, 
* Thu 12 Feb 2015 03:42:47 PM JST
points_len, 
* Thu 12 Feb 2015 03:42:50 PM JST
points_len, 
* Thu 12 Feb 2015 03:42:56 PM JST
segments_len, 
* Thu 12 Feb 2015 03:43:00 PM JST
rectangles_len, 
* Thu 12 Feb 2015 03:43:03 PM JST
arcs_len, 
* Thu 12 Feb 2015 03:43:06 PM JST
points_len, 
* Thu 12 Feb 2015 03:43:09 PM JST
rectangles_len, 
* Thu 12 Feb 2015 03:43:13 PM JST
arcs_len, 
* Thu 12 Feb 2015 03:43:18 PM JST
data_len, 
* Thu 12 Feb 2015 03:43:41 PM JST
points_len, 
* Thu 12 Feb 2015 03:43:51 PM JST
points_len, 
* Thu 12 Feb 2015 03:44:08 PM JST
rectangles_len,
* Thu 12 Feb 2015 03:44:20 PM JST
arcs_len, 
* Thu 12 Feb 2015 03:44:28 PM JST
points_len, 
* Thu 12 Feb 2015 03:44:30 PM JST
points_len, 
* Thu 12 Feb 2015 03:44:37 PM JST
rectangles_len, 
* Thu 12 Feb 2015 03:44:46 PM JST
arcs_len, 
* Thu 12 Feb 2015 03:44:48 PM JST
arcs_len
* Thu 12 Feb 2015 03:44:53 PM JST
data_len, 
* Thu 12 Feb 2015 03:44:56 PM JST
data_len
* Thu 12 Feb 2015 03:45:15 PM JST
items_len, 
* Thu 12 Feb 2015 03:45:22 PM JST
items_len
* Thu 12 Feb 2015 03:45:28 PM JST
items_len
* Thu 12 Feb 2015 03:45:43 PM JST
items_len, 
* Thu 12 Feb 2015 03:45:46 PM JST
items_len,
* Thu 12 Feb 2015 03:46:10 PM JST
points_len, 
* Thu 12 Feb 2015 03:46:11 PM JST
segments_len, 
* Thu 12 Feb 2015 03:46:14 PM JST
rectangles_len, 
* Thu 12 Feb 2015 03:46:17 PM JST
arcs_len, 
* Thu 12 Feb 2015 03:46:21 PM JST
points_len, 
* Thu 12 Feb 2015 03:46:23 PM JST
rectangles_len, 
* Thu 12 Feb 2015 03:46:26 PM JST
arcs_len, 
* Thu 12 Feb 2015 03:46:30 PM JST
data_len, 
* Thu 12 Feb 2015 03:46:34 PM JST
items_len, 
* Thu 12 Feb 2015 03:46:36 PM JST
items_len, 
* Thu 12 Feb 2015 03:50:32 PM JST
points
* Thu 12 Feb 2015 03:50:35 PM JST
points
* Thu 12 Feb 2015 03:57:29 PM JST

* Thu 12 Feb 2015 03:57:29 PM JST

* Thu 12 Feb 2015 03:57:29 PM JST
        )

* Thu 12 Feb 2015 03:57:48 PM JST
        _request.PolyText8(
            display=self._disp.display,
            drawable=drawable,
            gc=gc,
            x=x,
            y=y,
            items=items)

* Thu 12 Feb 2015 03:58:33 PM JST
string_len, 
* Thu 12 Feb 2015 03:58:36 PM JST
string_len,
* Thu 12 Feb 2015 03:58:46 PM JST
string_len, 
* Thu 12 Feb 2015 03:58:50 PM JST
string_len
* Thu 12 Feb 2015 03:58:54 PM JST
string_len, 
* Thu 12 Feb 2015 03:58:56 PM JST
string_len
* Thu 12 Feb 2015 03:59:12 PM JST
string_len, 
* Thu 12 Feb 2015 03:59:40 PM JST
        _request.ImageText8(
            display=self._disp.display,
            string=string,
            drawable=drawable,
            gc=gc,
            x=x,
            y=y)

* Thu 12 Feb 2015 04:00:49 PM JST
            
* Thu 12 Feb 2015 04:00:50 PM JST
            
* Thu 12 Feb 2015 04:04:44 PM JST
display=self._disp.display,
            cmap=cmap,
            red=red,
            green=green,
            blue=blue
* Thu 12 Feb 2015 04:08:54 PM JST
            
* Thu 12 Feb 2015 04:08:55 PM JST
            
* Thu 12 Feb 2015 04:12:33 PM JST
pixels_len, 
* Thu 12 Feb 2015 04:12:45 PM JST
pixels_len, 
* Thu 12 Feb 2015 04:12:47 PM JST
items_len, 
* Thu 12 Feb 2015 04:12:50 PM JST
name_len, 
* Thu 12 Feb 2015 04:12:52 PM JST
pixels_len, 
* Thu 12 Feb 2015 04:13:00 PM JST
pixels_len, 
* Thu 12 Feb 2015 04:13:03 PM JST
name_len, 
* Thu 12 Feb 2015 04:13:40 PM JST
pixels_len, 
* Thu 12 Feb 2015 04:13:41 PM JST
pixels_len, 
* Thu 12 Feb 2015 04:13:48 PM JST
pixels_len, 
* Thu 12 Feb 2015 04:13:50 PM JST
pixels_
* Thu 12 Feb 2015 04:13:59 PM JST
name_len,
* Thu 12 Feb 2015 04:14:02 PM JST
name_len
* Thu 12 Feb 2015 04:14:08 PM JST
pixels_len, 
* Thu 12 Feb 2015 04:14:10 PM JST
pixels_len
* Thu 12 Feb 2015 04:14:19 PM JST
name_len, 
* Thu 12 Feb 2015 04:14:22 PM JST
name_len
* Thu 12 Feb 2015 04:14:51 PM JST
items_len, 
* Thu 12 Feb 2015 04:14:53 PM JST
name_len, 
* Thu 12 Feb 2015 04:14:56 PM JST
pixels_len, 
* Thu 12 Feb 2015 04:14:59 PM JST
name_len, 
* Thu 12 Feb 2015 04:18:38 PM JST
            
* Thu 12 Feb 2015 04:20:10 PM JST
return 
* Thu 12 Feb 2015 04:21:54 PM JST
src_char
* Thu 12 Feb 2015 04:22:51 PM JST
                          
* Thu 12 Feb 2015 04:23:06 PM JST
                          
* Thu 12 Feb 2015 04:23:26 PM JST
                          
* Thu 12 Feb 2015 04:24:36 PM JST
            
* Thu 12 Feb 2015 04:28:23 PM JST
raise NotImplementedError()
* Thu 12 Feb 2015 04:31:05 PM JST
            
* Thu 12 Feb 2015 04:31:13 PM JST
name_len, 
* Thu 12 Feb 2015 04:31:27 PM JST
name_len, 
* Thu 12 Feb 2015 04:31:43 PM JST
name_len, 
* Thu 12 Feb 2015 04:32:09 PM JST
naem
* Thu 12 Feb 2015 04:32:09 PM JST
name=naem
* Thu 12 Feb 2015 04:33:45 PM JST
            
* Thu 12 Feb 2015 05:28:23 PM JST
keycode_cou
* Thu 12 Feb 2015 05:29:42 PM JST
keycode_count, 
* Thu 12 Feb 2015 05:29:45 PM JST
keysyms_per_keycode, 
* Thu 12 Feb 2015 05:29:45 PM JST
                              keysyms_per_keycode, 
* Thu 12 Feb 2015 05:30:01 PM JST
keycode_count, 
* Thu 12 Feb 2015 05:30:04 PM JST
keysyms_per_keycode,
* Thu 12 Feb 2015 05:30:05 PM JST
                              keysyms_per_keycode,
* Thu 12 Feb 2015 05:30:26 PM JST
keycode_count, 
* Thu 12 Feb 2015 05:30:29 PM JST
keysyms_per_keycode, 
* Thu 12 Feb 2015 05:30:29 PM JST
                              keysyms_per_keycode, 
* Thu 12 Feb 2015 05:31:11 PM JST
        [(0L, 0L, 0L, 0L, 0L, 0L, 0L),
        (65307L, 0L, 65307L, 0L, 0L, 0L, 0L),
        (49L, 33L, 49L, 33L, 0L, 0L, 0L), ...]

* Thu 12 Feb 2015 05:33:57 PM JST
value_list
* Thu 12 Feb 2015 05:33:58 PM JST
value_mask, value_list
* Thu 12 Feb 2015 05:34:51 PM JST
            
* Thu 12 Feb 2015 05:34:51 PM JST
            
* Thu 12 Feb 2015 05:35:46 PM JST

* Thu 12 Feb 2015 05:35:46 PM JST

* Thu 12 Feb 2015 05:35:47 PM JST
        value_mask = 

* Thu 12 Feb 2015 05:35:48 PM JST
        # TODO: (Atami) [2015/02/12]
        value_mask, value_list = 0, []

* Thu 12 Feb 2015 05:36:33 PM JST
**values
* Thu 12 Feb 2015 05:36:41 PM JST
**values
* Thu 12 Feb 2015 05:36:51 PM JST
**values
* Thu 12 Feb 2015 05:36:54 PM JST
value_list
* Thu 12 Feb 2015 05:36:54 PM JST
value_mask, value_list
* Thu 12 Feb 2015 05:37:39 PM JST
global_auto_repeat
* Thu 12 Feb 2015 05:37:48 PM JST
led_mask
* Thu 12 Feb 2015 05:37:52 PM JST
key_click_percent
* Thu 12 Feb 2015 05:37:56 PM JST
bell_percent
* Thu 12 Feb 2015 05:38:01 PM JST
bell_pitch
* Thu 12 Feb 2015 05:38:05 PM JST
bell_duration
* Thu 12 Feb 2015 05:38:11 PM JST
auto_repeats
* Thu 12 Feb 2015 05:38:12 PM JST

* Thu 12 Feb 2015 05:38:12 PM JST

* Thu 12 Feb 2015 05:38:12 PM JST
            )

* Thu 12 Feb 2015 05:38:18 PM JST
auto_repeats
* Thu 12 Feb 2015 05:38:45 PM JST
            
* Thu 12 Feb 2015 05:38:49 PM JST
            
* Thu 12 Feb 2015 05:39:28 PM JST
acceletation_numerator
* Thu 12 Feb 2015 05:39:41 PM JST
acceleration_denominator
* Thu 12 Feb 2015 05:39:47 PM JST
threshold
* Thu 12 Feb 2015 05:39:53 PM JST
do_accel
* Thu 12 Feb 2015 05:39:58 PM JST
do_acceleration
* Thu 12 Feb 2015 05:40:02 PM JST
do_thresh
* Thu 12 Feb 2015 05:40:07 PM JST
do_threshold
* Thu 12 Feb 2015 05:40:29 PM JST
_
* Thu 12 Feb 2015 05:40:30 PM JST
reutrn _
* Thu 12 Feb 2015 05:40:32 PM JST
self.
* Thu 12 Feb 2015 05:42:17 PM JST
            
* Thu 12 Feb 2015 05:42:19 PM JST
            
* Thu 12 Feb 2015 05:44:24 PM JST
family
* Thu 12 Feb 2015 05:44:47 PM JST
address_len, 
* Thu 12 Feb 2015 05:44:59 PM JST
address_len, 
* Thu 12 Feb 2015 05:45:16 PM JST
address_len, 
* Thu 12 Feb 2015 05:45:18 PM JST
address_len
* Thu 12 Feb 2015 05:45:47 PM JST
reutnr 
* Thu 12 Feb 2015 05:47:41 PM JST
atoms_len, 
* Thu 12 Feb 2015 05:48:04 PM JST
atoms_len, 
* Thu 12 Feb 2015 05:48:17 PM JST
atoms_len, 
* Thu 12 Feb 2015 05:48:19 PM JST
atoms_len
* Thu 12 Feb 2015 05:49:05 PM JST
            
* Thu 12 Feb 2015 05:49:06 PM JST
            
* Thu 12 Feb 2015 05:49:10 PM JST
map_len, 
* Thu 12 Feb 2015 05:49:18 PM JST
map_len, 
* Thu 12 Feb 2015 05:49:29 PM JST
map_len, 
* Thu 12 Feb 2015 05:49:31 PM JST
map_len
* Thu 12 Feb 2015 05:49:55 PM JST
            
* Thu 12 Feb 2015 05:53:53 PM JST
keycodes_per_modifier, 
* Thu 12 Feb 2015 05:54:04 PM JST
keycodes_per_modifier, 
* Thu 12 Feb 2015 05:54:55 PM JST
rep
* Thu 12 Feb 2015 05:55:59 PM JST
raise NotImplementedError()
* Thu 12 Feb 2015 06:08:58 PM JST
[tuple(x) for x in request.GetKeyboardMapping(display=d.display, first_keycode=8, count=248).keysyms]
* Thu 12 Feb 2015 06:09:38 PM JST
[tuple(x) for x in rep.keysyms]
* Thu 12 Feb 2015 06:15:51 PM JST
from _xclient 
* Thu 12 Feb 2015 06:20:52 PM JST
GetKeyboardMapping
* Thu 12 Feb 2015 06:21:21 PM JST
from _xclient import XClient
x=XClient(':0.0')

* Thu 12 Feb 2015 06:21:26 PM JST
x.GetKeyboardMapping(8, 248)
* Thu 12 Feb 2015 06:21:35 PM JST
from _xclient import XClient
x=XClient(':0.0')

* Thu 12 Feb 2015 06:21:39 PM JST
x.GetKeyboardMapping(8, 248)
* Thu 12 Feb 2015 06:22:29 PM JST
from _xclient import XClient
x=XClient(':0.0')

* Thu 12 Feb 2015 06:22:31 PM JST
x.GetKeyboardMapping(8, 248)
* Thu 12 Feb 2015 06:23:04 PM JST
from _xclient import XClient
x=XClient(':0.0')
x.GetKeyboardMapping(8, 248)

* Thu 12 Feb 2015 06:23:50 PM JST
# manually tested
* Thu 12 Feb 2015 06:27:10 PM JST
keycode_count, 
* Thu 12 Feb 2015 06:27:12 PM JST
keysyms_per_keycode, 
* Thu 12 Feb 2015 06:27:12 PM JST
                              keysyms_per_keycode, 
* Thu 12 Feb 2015 06:27:16 PM JST
keycode_count, 
* Thu 12 Feb 2015 06:27:19 PM JST
keysyms_per_keycode, 
* Thu 12 Feb 2015 06:27:48 PM JST
window, **values
* Thu 12 Feb 2015 06:28:37 PM JST
data_len,
* Thu 12 Feb 2015 06:28:39 PM JST
                       
* Thu 12 Feb 2015 06:28:42 PM JST
data_len, 
* Thu 12 Feb 2015 06:28:43 PM JST
                                    data_len, 
* Thu 12 Feb 2015 06:32:21 PM JST
string_len, 
* Thu 12 Feb 2015 06:32:36 PM JST
string_len, 
* Thu 12 Feb 2015 06:32:53 PM JST

* Thu 12 Feb 2015 06:32:54 PM JST

* Thu 12 Feb 2015 06:32:54 PM JST
            string_len=string_len,

* Thu 12 Feb 2015 06:32:57 PM JST
string_len, 
* Thu 12 Feb 2015 06:33:10 PM JST
string_len, 
* Thu 12 Feb 2015 06:33:13 PM JST
string_len, 
* Thu 12 Feb 2015 06:33:15 PM JST
string_len,
* Thu 12 Feb 2015 06:33:25 PM JST
pattern_len, 
* Thu 12 Feb 2015 06:33:28 PM JST
pattern_len, 
* Thu 12 Feb 2015 06:33:34 PM JST
pattern_len, 
* Thu 12 Feb 2015 06:33:37 PM JST
pattern_len, 
* Thu 12 Feb 2015 06:34:01 PM JST
value_mask, value_list
* Thu 12 Feb 2015 06:34:04 PM JST
value_list
* Thu 12 Feb 2015 06:34:05 PM JST
value_mask, value_list
* Thu 12 Feb 2015 06:34:15 PM JST
 **values
* Thu 12 Feb 2015 06:34:51 PM JST
dashes_len, 
* Thu 12 Feb 2015 06:34:53 PM JST
dashes_len, 
* Thu 12 Feb 2015 06:35:07 PM JST
clip_
* Thu 12 Feb 2015 06:35:09 PM JST
clip_
* Thu 12 Feb 2015 06:35:12 PM JST
rectangles_len, 
* Thu 12 Feb 2015 06:35:13 PM JST
                          rectangles_len, 
* Thu 12 Feb 2015 06:35:16 PM JST
clip_
* Thu 12 Feb 2015 06:35:19 PM JST
clip_
* Thu 12 Feb 2015 06:35:21 PM JST
rectangles_len, 
* Thu 12 Feb 2015 06:35:22 PM JST
                                       
* Thu 12 Feb 2015 06:35:50 PM JST
points_len,
* Thu 12 Feb 2015 06:35:51 PM JST
                               
* Thu 12 Feb 2015 06:35:54 PM JST
points_len, 
* Thu 12 Feb 2015 06:35:58 PM JST
points_len, 
* Thu 12 Feb 2015 06:35:59 PM JST
points_len,
* Thu 12 Feb 2015 06:36:00 PM JST
                              
* Thu 12 Feb 2015 06:36:02 PM JST
segments_len, 
* Thu 12 Feb 2015 06:36:04 PM JST
segments_len, 
* Thu 12 Feb 2015 06:36:07 PM JST
rectangles_len, 
* Thu 12 Feb 2015 06:36:08 PM JST
rectangles_len, 
* Thu 12 Feb 2015 06:36:11 PM JST
arcs_len, 
* Thu 12 Feb 2015 06:36:13 PM JST
arcs_len, 
* Thu 12 Feb 2015 06:36:16 PM JST
points_len, 
* Thu 12 Feb 2015 06:36:18 PM JST
points_len, 
* Thu 12 Feb 2015 06:36:21 PM JST
rectangles_len, 
* Thu 12 Feb 2015 06:36:23 PM JST
rectangles_len, 
* Thu 12 Feb 2015 06:36:25 PM JST
arcs_len, 
* Thu 12 Feb 2015 06:36:27 PM JST
arcs_len, 
* Thu 12 Feb 2015 06:36:30 PM JST
data_len, 
* Thu 12 Feb 2015 06:36:32 PM JST
data_len, 
* Thu 12 Feb 2015 06:36:39 PM JST
            
* Thu 12 Feb 2015 06:36:43 PM JST
items_len, 
* Thu 12 Feb 2015 06:36:44 PM JST
items_len, 
* Thu 12 Feb 2015 06:36:46 PM JST
items_len, 
* Thu 12 Feb 2015 06:36:48 PM JST
items_len, 
* Thu 12 Feb 2015 06:37:12 PM JST
pixels_len, 
* Thu 12 Feb 2015 06:37:14 PM JST
pixels_len, 
* Thu 12 Feb 2015 06:37:16 PM JST
items_len, 
* Thu 12 Feb 2015 06:37:18 PM JST
items_len, 
* Thu 12 Feb 2015 06:37:20 PM JST
name_len, 
* Thu 12 Feb 2015 06:37:22 PM JST
name_len, 
* Thu 12 Feb 2015 06:37:25 PM JST
pixels_len, 
* Thu 12 Feb 2015 06:37:28 PM JST
pixels_len, 
* Thu 12 Feb 2015 06:37:30 PM JST
name_len, 
* Thu 12 Feb 2015 06:37:32 PM JST
name_len, 
* Thu 12 Feb 2015 06:37:44 PM JST
name_len, 
* Thu 12 Feb 2015 06:37:47 PM JST
name_len, 
* Thu 12 Feb 2015 06:38:11 PM JST
**values)
* Thu 12 Feb 2015 09:44:24 PM JST
from menu import MenuManager
* Thu 12 Feb 2015 09:44:37 PM JST
weekdir = MenuManager().calc_weeklink(1)
* Thu 12 Feb 2015 09:45:32 PM JST
get_dirname()
* Thu 12 Feb 2015 09:45:45 PM JST
name
* Thu 12 Feb 2015 11:25:10 PM JST
is_wednesday
* Thu 12 Feb 2015 11:26:05 PM JST
        if not self.isdebug() and weekday.is_wednesday():
            self._tasks.append(LotateRecipeWeekLink())

* Thu 12 Feb 2015 11:27:40 PM JST
address_len, 
* Thu 12 Feb 2015 11:27:43 PM JST
address_len, 
* Thu 12 Feb 2015 11:27:45 PM JST
address_len, 
* Thu 12 Feb 2015 11:27:49 PM JST
atoms_len, 
* Thu 12 Feb 2015 11:27:51 PM JST
atoms_len, 
* Thu 12 Feb 2015 11:27:56 PM JST
map_len, 
* Thu 12 Feb 2015 11:27:57 PM JST
map_len, 
* Thu 12 Feb 2015 11:30:37 PM JST
inspect.getargspec
* Thu 12 Feb 2015 11:32:20 PM JST
inspect.getargspec(XClient.CreateWindow)
* Thu 12 Feb 2015 11:59:28 PM JST
data
* Thu 12 Feb 2015 11:59:29 PM JST
_abc_cache.data
* Fri 13 Feb 2015 12:05:31 AM JST
pass
* Fri 13 Feb 2015 12:05:48 AM JST
_xclient
* Fri 13 Feb 2015 12:06:35 AM JST
__init__
* Fri 13 Feb 2015 12:07:25 AM JST
class XClient / class XClient
class XClient / CreateWindow
class XClient / ChangeWindowAttributes
class XClient / GetWindowAttributes
class XClient / DestroyWindow
class XClient / DestroySubwindows
class XClient / ChangeSaveSet
class XClient / ReparentWindow
class XClient / MapWindow
class XClient / MapSubwindows
class XClient / UnmapWindow
class XClient / UnmapSubwindows
class XClient / ConfigureWindow
class XClient / CirculateWindow
class XClient / GetGeometry
class XClient / QueryTree
class XClient / InternAtom
class XClient / GetAtomName
class XClient / ChangeProperty
class XClient / DeleteProperty
class XClient / GetProperty
class XClient / ListProperties
class XClient / SetSelectionOwner
class XClient / GetSelectionOwner
class XClient / ConvertSelection
class XClient / SendEvent
class XClient / GrabPointer
class XClient / UngrabPointer
class XClient / GrabButton
class XClient / UngrabButton
class XClient / ChangeActivePointerGrab
class XClient / GrabKeyboard
class XClient / UngrabKeyboard
class XClient / GrabKey
class XClient / UngrabKey
class XClient / AllowEvents
class XClient / GrabServer
class XClient / UngrabServer
class XClient / QueryPointer
class XClient / GetMotionEvents
class XClient / TranslateCoordinates
class XClient / WarpPointer
class XClient / SetInputFocus
class XClient / GetInputFocus
class XClient / QueryKeymap
class XClient / OpenFont
class XClient / CloseFont
class XClient / QueryFont
class XClient / QueryTextExtents
class XClient / ListFonts
class XClient / ListFontsWithInfo
class XClient / SetFontPath
class XClient / GetFontPath
class XClient / CreatePixmap
class XClient / FreePixmap
class XClient / CreateGC
class XClient / ChangeGC
class XClient / CopyGC
class XClient / SetDashes
class XClient / SetClipRectangles
class XClient / FreeGC
class XClient / ClearArea
class XClient / CopyArea
class XClient / CopyPlane
class XClient / PolyPoint
class XClient / PolyLine
class XClient / PolySegment
class XClient / PolyRectangle
class XClient / PolyArc
class XClient / FillPoly
class XClient / PolyFillRectangle
class XClient / PolyFillArc
class XClient / PutImage
class XClient / GetImage
class XClient / PolyText8
class XClient / PolyText16
class XClient / ImageText8
class XClient / ImageText16
class XClient / CreateColormap
class XClient / FreeColormap
class XClient / CopyColormapAndFree
class XClient / InstallColormap
class XClient / UninstallColormap
class XClient / ListInstalledColormaps
class XClient / AllocColor
class XClient / AllocNamedColor
class XClient / AllocColorCells
class XClient / AllocColorPlanes
class XClient / FreeColors
class XClient / StoreColors
class XClient / StoreNamedColor
class XClient / QueryColors
class XClient / LookupColor
class XClient / CreateCursor
class XClient / CreateGlyphCursor
class XClient / FreeCursor
class XClient / RecolorCursor
class XClient / QueryBestSize
class XClient / QueryExtension
class XClient / ListExtensions
class XClient / ChangeKeyboardMapping
class XClient / GetKeyboardMapping
class XClient / ChangeKeyboardControl
class XClient / GetKeyboardControl
class XClient / Bell
class XClient / ChangePointerControl
class XClient / GetPointerControl
class XClient / SetScreenSaver
class XClient / GetScreenSaver
class XClient / ChangeHosts
class XClient / ListHosts
class XClient / SetAccessControl
class XClient / SetCloseDownMode
class XClient / KillClient
class XClient / RotateProperties
class XClient / ForceScreenSaver
class XClient / SetPointerMapping
class XClient / GetPointerMapping
class XClient / SetModifierMapping
class XClient / GetModifierMapping
class XClient / NoOperation
class XClient / generate_id
class XClient / flush
class XClient / close
class XClient / next_event
class XClient / get_setup

* Fri 13 Feb 2015 12:07:44 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:44 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:44 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:44 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:44 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:44 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:44 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:44 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:44 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:44 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:44 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:44 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:44 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:44 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:45 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:46 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:46 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:46 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:46 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:46 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:46 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:46 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:46 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:46 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:46 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:46 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:46 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:46 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:46 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:46 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:47 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:47 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:47 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:47 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:47 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:47 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:47 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:47 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:47 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:47 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:47 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:47 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:47 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:47 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:47 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:48 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:48 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:48 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:48 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:48 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:48 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:48 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:48 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:48 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:48 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:48 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:48 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:48 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:49 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:49 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:49 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:49 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:49 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:49 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:49 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:49 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:49 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:49 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:49 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:49 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:49 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:50 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:50 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:50 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:50 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:50 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:50 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:50 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:50 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:50 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:50 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:50 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:50 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:50 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:50 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:51 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:51 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:51 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:51 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:51 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:51 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:51 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:51 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:51 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:51 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:51 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:51 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:52 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:52 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:52 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:52 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:52 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:52 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:52 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:52 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:52 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:52 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:52 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:52 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:52 AM JST
class XClient / 
* Fri 13 Feb 2015 12:07:52 AM JST
class XClient / 
* Fri 13 Feb 2015 12:08:09 AM JST
'CreateWindow',
'ChangeWindowAttributes',
'GetWindowAttributes',
'DestroyWindow',
'DestroySubwindows',
'ChangeSaveSet',
'ReparentWindow',
'MapWindow',
'MapSubwindows',
'UnmapWindow',
'UnmapSubwindows',
'ConfigureWindow',
'CirculateWindow',
'GetGeometry',
'QueryTree',
'InternAtom',
'GetAtomName',
'ChangeProperty',
'DeleteProperty',
'GetProperty',
'ListProperties',
'SetSelectionOwner',
'GetSelectionOwner',
'ConvertSelection',
'SendEvent',
'GrabPointer',
'UngrabPointer',
'GrabButton',
'UngrabButton',
'ChangeActivePointerGrab',
'GrabKeyboard',
'UngrabKeyboard',
'GrabKey',
'UngrabKey',
'AllowEvents',
'GrabServer',
'UngrabServer',
'QueryPointer',
'GetMotionEvents',
'TranslateCoordinates',
'WarpPointer',
'SetInputFocus',
'GetInputFocus',
'QueryKeymap',
'OpenFont',
'CloseFont',
'QueryFont',
'QueryTextExtents',
'ListFonts',
'ListFontsWithInfo',
'SetFontPath',
'GetFontPath',
'CreatePixmap',
'FreePixmap',
'CreateGC',
'ChangeGC',
'CopyGC',
'SetDashes',
'SetClipRectangles',
'FreeGC',
'ClearArea',
'CopyArea',
'CopyPlane',
'PolyPoint',
'PolyLine',
'PolySegment',
'PolyRectangle',
'PolyArc',
'FillPoly',
'PolyFillRectangle',
'PolyFillArc',
'PutImage',
'GetImage',
'PolyText8',
'PolyText16',
'ImageText8',
'ImageText16',
'CreateColormap',
'FreeColormap',
'CopyColormapAndFree',
'InstallColormap',
'UninstallColormap',
'ListInstalledColormaps',
'AllocColor',
'AllocNamedColor',
'AllocColorCells',
'AllocColorPlanes',
'FreeColors',
'StoreColors',
'StoreNamedColor',
'QueryColors',
'LookupColor',
'CreateCursor',
'CreateGlyphCursor',
'FreeCursor',
'RecolorCursor',
'QueryBestSize',
'QueryExtension',
'ListExtensions',
'ChangeKeyboardMapping',
'GetKeyboardMapping',
'ChangeKeyboardControl',
'GetKeyboardControl',
'Bell',
'ChangePointerControl',
'GetPointerControl',
'SetScreenSaver',
'GetScreenSaver',
'ChangeHosts',
'ListHosts',
'SetAccessControl',
'SetCloseDownMode',
'KillClient',
'RotateProperties',
'ForceScreenSaver',
'SetPointerMapping',
'GetPointerMapping',
'SetModifierMapping',
'GetModifierMapping',
'NoOperation',
'generate_id',
'flush',
'close',
'next_event',
'get_setup',
* Fri 13 Feb 2015 12:09:17 AM JST

* Fri 13 Feb 2015 12:09:17 AM JST

* Fri 13 Feb 2015 12:09:17 AM JST
]

* Fri 13 Feb 2015 12:11:00 AM JST
inspect.getargspec(
* Fri 13 Feb 2015 12:11:24 AM JST
GetImage
* Fri 13 Feb 2015 12:14:13 AM JST
self.assertEqual(expects, got)
* Fri 13 Feb 2015 12:14:48 AM JST

* Fri 13 Feb 2015 12:14:48 AM JST

* Fri 13 Feb 2015 12:14:48 AM JST
            self.assertIn(target, in contains, msg='Failed: ')

* Fri 13 Feb 2015 12:17:16 AM JST
target
* Fri 13 Feb 2015 12:17:17 AM JST
self.target
* Fri 13 Feb 2015 12:18:03 AM JST
trgt
* Fri 13 Feb 2015 12:18:05 AM JST
base
* Fri 13 Feb 2015 12:19:57 AM JST
expect
* Fri 13 Feb 2015 12:20:43 AM JST
pathhandler
* Fri 13 Feb 2015 12:21:51 AM JST
string_len, 
* Fri 13 Feb 2015 12:21:54 AM JST
string_len, 
* Fri 13 Feb 2015 12:24:08 AM JST
src_char, mask_char,
* Fri 13 Feb 2015 12:24:22 AM JST
                    
* Fri 13 Feb 2015 12:24:25 AM JST
                          
* Fri 13 Feb 2015 12:24:38 AM JST
cid, source, mask, src_char, mask_char,
                          fore_red, fore_green, fore_blue, back_red, back_green,
                          back_blue, x, y
* Fri 13 Feb 2015 12:24:50 AM JST
            
* Fri 13 Feb 2015 12:26:17 AM JST
**values
* Fri 13 Feb 2015 12:26:19 AM JST
**values
* Fri 13 Feb 2015 12:26:22 AM JST
**values
* Fri 13 Feb 2015 12:27:00 AM JST
keycodes_per_modifier, 
* Fri 13 Feb 2015 12:27:02 AM JST
keycodes_per_modifier, 
* Fri 13 Feb 2015 12:28:11 AM JST
pass
* Fri 13 Feb 2015 12:28:29 AM JST
cls.target = XClient
* Fri 13 Feb 2015 12:29:12 AM JST
XClient
* Fri 13 Feb 2015 12:29:41 AM JST
XCBClient
* Fri 13 Feb 2015 12:30:41 AM JST
cls.target = XClient
* Fri 13 Feb 2015 12:30:56 AM JST
cls.target = 
* Fri 13 Feb 2015 12:31:05 AM JST
target
* Fri 13 Feb 2015 12:31:11 AM JST
target
* Fri 13 Feb 2015 12:32:40 AM JST
string_len, 
* Fri 13 Feb 2015 12:33:13 AM JST
keycodes_per_modifier, 
* Fri 13 Feb 2015 12:33:55 AM JST
    def get_target(self, ):
        r"""SUMMARY

        get_target()

        @Return:

        @Error:
        """
        return _xlibclient.XlibClient

* Fri 13 Feb 2015 12:34:03 AM JST
XlibClient
* Fri 13 Feb 2015 12:34:03 AM JST
_xlibclient.XlibClient
* Fri 13 Feb 2015 12:34:43 AM JST
segments_len, 
* Fri 13 Feb 2015 12:35:09 AM JST
items_len, 
* Fri 13 Feb 2015 12:35:11 AM JST
items_len
* Fri 13 Feb 2015 01:10:38 AM JST
 # TODO: raise error
* Fri 13 Feb 2015 01:10:46 AM JST
            if msk is None:
                raise TypeError(
                    'CreateWindow got an unexpected keyword argument "{}"'
                    .format(key))

* Fri 13 Feb 2015 01:10:54 AM JST
 # TODO: raise error
* Fri 13 Feb 2015 01:11:06 AM JST
                    
* Fri 13 Feb 2015 01:11:11 AM JST
                                
* Fri 13 Feb 2015 01:11:14 AM JST
                                
* Fri 13 Feb 2015 01:13:33 AM JST
SUMMARY
* Fri 13 Feb 2015 01:14:18 AM JST
'background_pixmap', xcb.xproto.CW.BackPixmap),
                      ('background_pixel', xcb.xproto.CW.BackPixel),
                      ('border_pixmap', xcb.xproto.CW.BorderPixmap),
                      ('border_pixel', xcb.xproto.CW.BorderPixel),
                      ('bit_gravity', xcb.xproto.CW.BitGravity),
                      ('win_gravity', xcb.xproto.CW.WinGravity),
                      ('backing_store', xcb.xproto.CW.BackingStore),
                      ('backing_planes', xcb.xproto.CW.BackingPlanes),
                      ('backing_pixel', xcb.xproto.CW.BackingPixel),
                      ('override_redirect', xcb.xproto.CW.OverrideRedirect),
                      ('save_under', xcb.xproto.CW.SaveUnder),
                      ('event_mask', xcb.xproto.CW.EventMask),
                      ('do_not_propagate_mask', xcb.xproto.CW.DontPropagate),
                      ('colormap', xcb.xproto.CW.Colormap),
                      ('cursor'
* Fri 13 Feb 2015 01:14:43 AM JST


* Fri 13 Feb 2015 01:14:43 AM JST
, xcb.xproto.CW.Colormap),
* Fri 13 Feb 2015 01:14:43 AM JST
, xcb.xproto.CW.DontPropagate),
* Fri 13 Feb 2015 01:14:43 AM JST
, xcb.xproto.CW.EventMask),
* Fri 13 Feb 2015 01:14:43 AM JST
, xcb.xproto.CW.SaveUnder),
* Fri 13 Feb 2015 01:14:43 AM JST
, xcb.xproto.CW.OverrideRedirect),
* Fri 13 Feb 2015 01:14:43 AM JST
, xcb.xproto.CW.BackingPixel),
* Fri 13 Feb 2015 01:14:43 AM JST
, xcb.xproto.CW.BackingPlanes),
* Fri 13 Feb 2015 01:14:43 AM JST
, xcb.xproto.CW.BackingStore),
* Fri 13 Feb 2015 01:14:43 AM JST
, xcb.xproto.CW.WinGravity),
* Fri 13 Feb 2015 01:14:43 AM JST
, xcb.xproto.CW.BitGravity),
* Fri 13 Feb 2015 01:14:43 AM JST
, xcb.xproto.CW.BorderPixel),
* Fri 13 Feb 2015 01:14:43 AM JST
, xcb.xproto.CW.BorderPixmap),
* Fri 13 Feb 2015 01:14:43 AM JST
, xcb.xproto.CW.BackPixel),
* Fri 13 Feb 2015 01:14:49 AM JST
, xcb.xproto.CW.BackPixmap),
* Fri 13 Feb 2015 01:15:01 AM JST
                      
* Fri 13 Feb 2015 01:15:01 AM JST
                      
* Fri 13 Feb 2015 01:15:02 AM JST
                      
* Fri 13 Feb 2015 01:15:02 AM JST
                      
* Fri 13 Feb 2015 01:15:02 AM JST
                      
* Fri 13 Feb 2015 01:15:02 AM JST
                      
* Fri 13 Feb 2015 01:15:02 AM JST
                      
* Fri 13 Feb 2015 01:15:02 AM JST
                      
* Fri 13 Feb 2015 01:15:02 AM JST
                      
* Fri 13 Feb 2015 01:15:02 AM JST
                      
* Fri 13 Feb 2015 01:15:02 AM JST
                      
* Fri 13 Feb 2015 01:15:02 AM JST
                      
* Fri 13 Feb 2015 01:15:02 AM JST
                      
* Fri 13 Feb 2015 01:15:02 AM JST
                      
* Fri 13 Feb 2015 01:20:54 AM JST
from _xclient
* Fri 13 Feb 2015 01:21:06 AM JST
from _xclient import XClient
* Fri 13 Feb 2015 01:21:19 AM JST
from _xclient import XClient
* Fri 13 Feb 2015 01:22:15 AM JST

* Fri 13 Feb 2015 01:22:16 AM JST
EventMask
* Fri 13 Feb 2015 01:22:28 AM JST

* Fri 13 Feb 2015 01:22:28 AM JST

* Fri 13 Feb 2015 01:22:28 AM JST
from xcb.xproto import CW

* Fri 13 Feb 2015 01:22:35 AM JST
x=XClient(':0.0')
* Fri 13 Feb 2015 01:22:41 AM JST
from _xclient._define import EventMask
from _xclient._define import WindowClass

* Fri 13 Feb 2015 01:22:49 AM JST
setup=x.get_setup()
root=setup.roots[0].root
white=setup.roots[0].white_pixel
depth=setup.roots[0].root_depth
visual=setup.roots[0].root_visual
window=x.generate_id()

* Fri 13 Feb 2015 01:22:57 AM JST
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0, WindowClass.InputOutput, visual, background_pixel=white, event_mask=EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure)

* Fri 13 Feb 2015 01:23:00 AM JST
x.MapWindow(window)
* Fri 13 Feb 2015 01:23:04 AM JST
x.flush()
* Fri 13 Feb 2015 01:23:17 AM JST
from _xclient import XClient
from _xclient._define import EventMask
from _xclient._define import WindowClass
x=XClient(':0.0')
setup=x.get_setup()
root=setup.roots[0].root
white=setup.roots[0].white_pixel
depth=setup.roots[0].root_depth
visual=setup.roots[0].root_visual
window=x.generate_id()
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0, WindowClass.InputOutput, visual, background_pixel=white, event_mask=EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure)
x.MapWindow(window)
x.flush()
* Fri 13 Feb 2015 01:25:15 AM JST
WindowClass.InputOutput, visual, background_pixel=white, event_mask=EventMask.ButtonPress | EventMask.EnterWindow | EventMask.LeaveWindow | EventMask.Exposure)
* Fri 13 Feb 2015 01:26:15 AM JST
            
* Fri 13 Feb 2015 01:27:39 AM JST
window)
        >>> 
* Fri 13 Feb 2015 01:27:53 AM JST
>>> 
* Fri 13 Feb 2015 01:27:53 AM JST
>>> 
* Fri 13 Feb 2015 01:27:53 AM JST
... 
* Fri 13 Feb 2015 01:27:53 AM JST
... 
* Fri 13 Feb 2015 01:27:53 AM JST
... 
* Fri 13 Feb 2015 01:27:53 AM JST
>>> 
* Fri 13 Feb 2015 01:27:54 AM JST
>>> 
* Fri 13 Feb 2015 01:27:54 AM JST
>>> 
* Fri 13 Feb 2015 01:27:54 AM JST
>>> 
* Fri 13 Feb 2015 01:27:54 AM JST
>>> 
* Fri 13 Feb 2015 01:27:54 AM JST
>>> 
* Fri 13 Feb 2015 01:27:54 AM JST
>>> 
* Fri 13 Feb 2015 01:27:54 AM JST
>>> 
* Fri 13 Feb 2015 01:27:54 AM JST
>>> 
* Fri 13 Feb 2015 01:27:54 AM JST
>>> 
* Fri 13 Feb 2015 01:27:54 AM JST
>>> 
* Fri 13 Feb 2015 01:28:13 AM JST
        from _xclient import XClient
        from _xclient._define import EventMask
        from _xclient._define import WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
            WindowClass.InputOutput, visual, background_pixel=white,
            event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
            EventMask.LeaveWindow | EventMask.Exposure)
        x.MapWindow(window)
        x.flush()

* Fri 13 Feb 2015 01:29:51 AM JST
        from _xclient import XClient
        from _xclient._define import EventMask
        from _xclient._define import WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()

* Fri 13 Feb 2015 01:30:05 AM JST
x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
* Fri 13 Feb 2015 01:30:13 AM JST
WindowClass.InputOutput, visual,
* Fri 13 Feb 2015 01:30:18 AM JST
event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
            EventMask.LeaveWindow | EventMask.Exposure)
* Fri 13 Feb 2015 01:30:24 AM JST
x.MapWindow(window)
* Fri 13 Feb 2015 01:30:27 AM JST
x.flush()
* Fri 13 Feb 2015 01:31:01 AM JST
background_pixel=white
* Fri 13 Feb 2015 01:32:02 AM JST
x.ChangeWindowAttributes(window, background_pixel=white)
* Fri 13 Feb 2015 01:33:39 AM JST
        from _xclient import XClient
        from _xclient._define import EventMask
        from _xclient._define import WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,

* Fri 13 Feb 2015 01:33:49 AM JST
WindowClass.InputOutput, visual, 
* Fri 13 Feb 2015 01:33:53 AM JST
event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
            EventMask.LeaveWindow | EventMask.Exposure)
* Fri 13 Feb 2015 01:34:14 AM JST
background_pixel=white
* Fri 13 Feb 2015 01:35:08 AM JST
        from _xclient import XClient
        from _xclient._define import EventMask
        from _xclient._define import WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,

* Fri 13 Feb 2015 01:35:32 AM JST
WindowClass.InputOutput, visual, 
* Fri 13 Feb 2015 01:35:47 AM JST
event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
            EventMask.LeaveWindow | EventMask.Exposure)
* Fri 13 Feb 2015 01:36:05 AM JST
        x.MapWindow(window)
        x.flush()

* Fri 13 Feb 2015 01:36:21 AM JST
# temporary doc, copy and paste to ipython
* Fri 13 Feb 2015 01:39:30 AM JST
        from _xclient import XClient
        from _xclient._define import EventMask
        from _xclient._define import WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                        WindowClass.InputOutput, visual,
                    event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
                    EventMask.LeaveWindow | EventMask.Exposure)
        x.ChangeWindowAttributes(window, background_pixel=white)
        x.MapWindow(window)
        x.flush()

* Fri 13 Feb 2015 01:39:42 AM JST
GetWindowAttributes
* Fri 13 Feb 2015 01:56:58 AM JST
SUMMARY
* Fri 13 Feb 2015 01:57:41 AM JST
        # temporary doc, copy and paste to ipython
        from _xclient import XClient
        from _xclient._define import EventMask
        from _xclient._define import WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                        WindowClass.InputOutput, visual,
                    event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
                    EventMask.LeaveWindow | EventMask.Exposure)
        x.ChangeWindowAttributes(window, background_pixel=white)
        x.MapWindow(window)
        x.flush()

* Fri 13 Feb 2015 01:57:52 AM JST
x.GetWindowAttributes(window)
* Fri 13 Feb 2015 01:58:09 AM JST
        # temporary doc, copy and paste to ipython
        from _xclient import XClient
        from _xclient._define import EventMask
        from _xclient._define import WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                        WindowClass.InputOutput, visual,
                    event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
                    EventMask.LeaveWindow | EventMask.Exposure)
        x.ChangeWindowAttributes(window, background_pixel=white)
        x.MapWindow(window)
        x.flush()

* Fri 13 Feb 2015 01:58:45 AM JST
        from _xclient import XClient
        from _xclient._define import EventMask
        from _xclient._define import WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                        WindowClass.InputOutput, visual,
                    event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
                    EventMask.LeaveWindow | EventMask.Exposure)
        x.ChangeWindowAttributes(window, background_pixel=white)
        x.MapWindow(window)
        x.flush()

* Fri 13 Feb 2015 01:58:57 AM JST
x.DestroyWindow(window)
* Fri 13 Feb 2015 01:59:01 AM JST
x.flush()
* Fri 13 Feb 2015 01:59:16 AM JST
        # temporary doc, copy and paste to ipython
        from _xclient import XClient
        from _xclient._define import EventMask
        from _xclient._define import WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                        WindowClass.InputOutput, visual,
                    event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
                    EventMask.LeaveWindow | EventMask.Exposure)
        x.ChangeWindowAttributes(window, background_pixel=white)
        x.MapWindow(window)
        x.flush()
        x.DestroyWindow(window)
        x.flush()

* Fri 13 Feb 2015 01:59:39 AM JST
        from _xclient import XClient
        from _xclient._define import EventMask
        from _xclient._define import WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                        WindowClass.InputOutput, visual,
                    event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
                    EventMask.LeaveWindow | EventMask.Exposure)
        x.ChangeWindowAttributes(window, background_pixel=white)
        x.MapWindow(window)
        x.flush()

* Fri 13 Feb 2015 01:59:52 AM JST
x.DestroySubwindow(window)
* Fri 13 Feb 2015 02:00:16 AM JST
x.flush()
* Fri 13 Feb 2015 02:00:40 AM JST
window=x.generate_id()
* Fri 13 Feb 2015 02:00:49 AM JST
window=
* Fri 13 Feb 2015 02:01:09 AM JST
WindowClass.InputOutput, visual,
* Fri 13 Feb 2015 02:01:23 AM JST
background_pixel=white
* Fri 13 Feb 2015 02:01:34 AM JST
event_mask=EventMask.ButtonPress | EventMask.EnterWindow
* Fri 13 Feb 2015 02:02:05 AM JST
root
* Fri 13 Feb 2015 02:02:10 AM JST
        x.MapWindow(window)
        x.flush()

* Fri 13 Feb 2015 02:02:26 AM JST
        from _xclient import XClient
        from _xclient._define import EventMask
        from _xclient._define import WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                        WindowClass.InputOutput, visual,
                    event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
                    EventMask.LeaveWindow | EventMask.Exposure)
        x.ChangeWindowAttributes(window, background_pixel=white)
        x.MapWindow(window)
        x.flush()

* Fri 13 Feb 2015 02:02:39 AM JST
        subwin=x.generate_id()
        x.CreateWindow(depth, subwin,window,0,0,100,100,0,
                       WindowClass.InputOutput, visual, background_pixel=white,
                       event_mask=EventMask.ButtonPress | EventMask.EnterWindow)

* Fri 13 Feb 2015 02:02:49 AM JST
x.MapWindow(wubwin)
* Fri 13 Feb 2015 02:03:00 AM JST
x.flush()
* Fri 13 Feb 2015 02:04:41 AM JST
EventMask.LeaveWindow | EventMask.Exposure
* Fri 13 Feb 2015 02:06:45 AM JST
resource_classes
* Fri 13 Feb 2015 02:08:10 AM JST
class_extension_dicts
* Fri 13 Feb 2015 02:08:38 AM JST
extension_add_method
* Fri 13 Feb 2015 02:11:54 AM JST
WindowClass
* Fri 13 Feb 2015 02:11:57 AM JST

* Fri 13 Feb 2015 02:11:57 AM JST

* Fri 13 Feb 2015 02:11:57 AM JST
        from _xclient._define import WindowClass

* Fri 13 Feb 2015 02:12:03 AM JST
        from _xclient._define import EventMask,WindowClass

* Fri 13 Feb 2015 02:12:35 AM JST
        from _xclient import XClient
        from _xclient._define import EventMask,WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                        WindowClass.InputOutput, visual,
                    event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
                    EventMask.LeaveWindow | EventMask.Exposure)
        x.ChangeWindowAttributes(window, background_pixel=white)
        x.MapWindow(window)
        x.flush()
        subwin=x.generate_id()

* Fri 13 Feb 2015 02:12:58 AM JST
        x.CreateWindow(depth, subwin,window,0,0,100,100,0,
                       WindowClass.InputOutput, visual, background_pixel=white,
                       event_mask=EventMask.ButtonPress | EventMask.EnterWindow|
                       EventMask.LeaveWindow | EventMask.Exposure)

* Fri 13 Feb 2015 02:13:03 AM JST
        x.MapWindow(subwin)

* Fri 13 Feb 2015 02:13:07 AM JST
        x.flush()

* Fri 13 Feb 2015 02:14:07 AM JST
100
* Fri 13 Feb 2015 02:14:42 AM JST
        from _xclient import XClient
        from _xclient._define import EventMask,WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                        WindowClass.InputOutput, visual,
                    event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
                    EventMask.LeaveWindow | EventMask.Exposure)
        x.ChangeWindowAttributes(window, background_pixel=white)
        x.MapWindow(window)
        x.flush()
        subwin=x.generate_id()

* Fri 13 Feb 2015 02:14:53 AM JST
        x.CreateWindow(depth, subwin,window,0,0,300,240,0,
                       WindowClass.InputOutput, visual, background_pixel=white,
                       event_mask=EventMask.ButtonPress | EventMask.EnterWindow|
                       EventMask.LeaveWindow | EventMask.Exposure)

* Fri 13 Feb 2015 02:14:57 AM JST
        x.MapWindow(subwin)
        x.flush()

* Fri 13 Feb 2015 02:15:40 AM JST
check
* Fri 13 Feb 2015 02:16:04 AM JST
        from _xclient import XClient
        from _xclient._define import EventMask,WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                        WindowClass.InputOutput, visual,
                    event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
                    EventMask.LeaveWindow | EventMask.Exposure)
        x.ChangeWindowAttributes(window, background_pixel=white)
        x.MapWindow(window)
        x.flush()
        subwin=x.generate_id()

* Fri 13 Feb 2015 02:16:18 AM JST
        x.CreateWindow(depth, subwin,window,0,0,300,240,0,
                       WindowClass.InputOutput, visual, background_pixel=white,
                       event_mask=EventMask.ButtonPress | EventMask.EnterWindow|
                       EventMask.LeaveWindow | EventMask.Exposure)

* Fri 13 Feb 2015 02:16:22 AM JST
        x.MapWindow(subwin)

* Fri 13 Feb 2015 02:16:25 AM JST
        x.flush()

* Fri 13 Feb 2015 02:16:30 AM JST
        x.DestroySubwindows(window)

* Fri 13 Feb 2015 02:16:33 AM JST
        x.flush()

* Fri 13 Feb 2015 03:14:34 AM JST
XChangeSaveSet
* Fri 13 Feb 2015 03:27:22 AM JST
git clone https://github.com/qtile/qtile.git
* Fri 13 Feb 2015 03:43:12 AM JST
ウィンドウの生存期間の制御
* Fri 13 Feb 2015 03:43:24 AM JST
http://xjman.dsl.gr.jp/X11R6/X11/CH09.html
* Fri 13 Feb 2015 03:49:37 AM JST
git://github.com/sduverger/fpwm.git
* Fri 13 Feb 2015 03:52:20 AM JST
git://github.com/linuxdeepin/deepin-translator.git
* Fri 13 Feb 2015 03:53:43 AM JST
git://github.com/milkypostman/caw.git
* Fri 13 Feb 2015 04:59:09 AM JST
        # temporary doc, copy and paste to ipython
        from _xclient import XClient
        from _xclient._define import EventMask,WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                        WindowClass.InputOutput, visual,
                    event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
                    EventMask.LeaveWindow | EventMask.Exposure)
        x.ChangeWindowAttributes(window, background_pixel=white)
        x.MapWindow(window)
        x.flush()
        subwin=x.generate_id()
        x.CreateWindow(depth, subwin,window,0,0,300,240,0,
                       WindowClass.InputOutput, visual, background_pixel=white,
                       event_mask=EventMask.ButtonPress | EventMask.EnterWindow|
                       EventMask.LeaveWindow | EventMask.Exposure)
        x.MapWindow(subwin)
        x.flush()

* Fri 13 Feb 2015 05:11:50 AM JST
http://xjman.dsl.gr.jp/X11R6/X11/CH09.html
* Fri 13 Feb 2015 05:18:27 AM JST
スタックの一番下のウィンドウを一番上に移動させる
* Fri 13 Feb 2015 05:18:48 AM JST
Circulate
* Fri 13 Feb 2015 05:19:13 AM JST
class Circulate(_IntEnum):
    RaiseLowest  = 0
    LowerHighest = 1

* Fri 13 Feb 2015 05:19:51 AM JST
class StackMode(_IntEnum):
    Above    = 0
    Below    = 1
    TopIf    = 2
    BottomIf = 3
    Opposite = 4

* Fri 13 Feb 2015 05:21:39 AM JST
class SetMode(_IntEnum):
    Insert = 0
    Delete = 1



* Fri 13 Feb 2015 05:22:59 AM JST
        from _xclient import XClient
        from _xclient._define import EventMask,WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                        WindowClass.InputOutput, visual,
                    event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
                    EventMask.LeaveWindow | EventMask.Exposure)
        x.ChangeWindowAttributes(window, background_pixel=white)
        x.MapWindow(window)
        x.flush()

* Fri 13 Feb 2015 05:23:51 AM JST
window
* Fri 13 Feb 2015 05:25:35 AM JST
        from _xclient import XClient
        from _xclient._define import EventMask,WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                        WindowClass.InputOutput, visual,
                    event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
                    EventMask.LeaveWindow | EventMask.Exposure)
        x.ChangeWindowAttributes(window, background_pixel=white)
        x.MapWindow(window)
        x.flush()

* Fri 13 Feb 2015 05:27:09 AM JST
window
* Fri 13 Feb 2015 05:29:22 AM JST
False
* Fri 13 Feb 2015 05:35:17 AM JST
        # TODO: (Atami) [2015/02/13]
        # not manually tested

* Fri 13 Feb 2015 05:42:09 AM JST
Replace
* Fri 13 Feb 2015 05:43:21 AM JST
class PropMode(_IntEnum):
    Replace = 0
    Prepend = 1
    Append  = 2

* Fri 13 Feb 2015 05:44:22 AM JST
ChangeProperty(0, window, 39, 31, 8, 'test')
* Fri 13 Feb 2015 05:46:48 AM JST
wm_name=InternAtom(True, 'WM_NAME')
* Fri 13 Feb 2015 05:50:25 AM JST
GetProperty()
* Fri 13 Feb 2015 05:50:28 AM JST
request
* Fri 13 Feb 2015 05:50:28 AM JST
protocol.request
* Fri 13 Feb 2015 05:50:31 AM JST
GetProperty
* Fri 13 Feb 2015 05:55:54 AM JST
value
* Fri 13 Feb 2015 05:55:54 AM JST
rep.value
* Fri 13 Feb 2015 05:56:42 AM JST
value, 
* Fri 13 Feb 2015 05:56:52 AM JST
value, 
* Fri 13 Feb 2015 05:56:57 AM JST
1]
* Fri 13 Feb 2015 05:56:57 AM JST
value[1]
* Fri 13 Feb 2015 05:56:58 AM JST
rep.value[1]
* Fri 13 Feb 2015 05:58:42 AM JST
x.GetProperty(False, window, 39, 31, 0, 10)
* Fri 13 Feb 2015 05:58:51 AM JST
wm_name=InternAtom(True, 'WM_NAME')
* Fri 13 Feb 2015 05:58:57 AM JST
        wm_name=InternAtom(True, 'WM_NAME')
        string=InternAtom(True, 'STRING')

* Fri 13 Feb 2015 05:59:20 AM JST
GetProperty(display=d.display, delete=1, window=window, property=39, type=31, long_offset=0, long_length=10)
* Fri 13 Feb 2015 05:59:50 AM JST
        from _xclient import XClient
        from _xclient._define import EventMask,WindowClass
        x=XClient(':0.0')
        setup=x.get_setup()
        root=setup.roots[0].root
        white=setup.roots[0].white_pixel
        depth=setup.roots[0].root_depth
        visual=setup.roots[0].root_visual
        window=x.generate_id()
        x.CreateWindow(depth, window, root, 0, 0, 640, 480, 0,
                        WindowClass.InputOutput, visual,
                    event_mask=EventMask.ButtonPress | EventMask.EnterWindow |
                    EventMask.LeaveWindow | EventMask.Exposure)
        x.ChangeWindowAttributes(window, background_pixel=white)
        x.MapWindow(window)
        x.flush()

* Fri 13 Feb 2015 06:00:02 AM JST
wm_name=InternAtom(True, 'WM_NAME')
* Fri 13 Feb 2015 06:00:08 AM JST
string=InternAtom(True, 'STRING')
* Fri 13 Feb 2015 06:00:15 AM JST
ChangeProperty(PropMode.Replace, window, wm_name, string, 8, 'test')
* Fri 13 Feb 2015 06:00:22 AM JST
x.GetProperty(False, window, wm_name, string, 0, 10)
* Fri 13 Feb 2015 06:01:27 AM JST
string=
* Fri 13 Feb 2015 06:02:08 AM JST
None
* Fri 13 Feb 2015 06:02:15 AM JST
None
* Fri 13 Feb 2015 06:05:35 AM JST
[x.GetAtomName(y).name for y in x.ListProperties(window).atoms]
* Fri 13 Feb 2015 06:08:20 AM JST
string_len, 
* Fri 13 Feb 2015 06:08:23 AM JST
string_len, 
* Fri 13 Feb 2015 03:22:55 PM JST
x.GetSelectionOwner
* Fri 13 Feb 2015 03:23:35 PM JST
title
* Fri 13 Feb 2015 03:23:38 PM JST
52428822
* Fri 13 Feb 2015 03:23:54 PM JST
emacs=52428822
* Fri 13 Feb 2015 03:24:53 PM JST
XSetSelectionOwner
* Fri 13 Feb 2015 03:27:52 PM JST
GetSelectionOwner()
* Fri 13 Feb 2015 03:30:59 PM JST
BadAtom and BadWindow
* Fri 13 Feb 2015 03:31:09 PM JST
        
* Fri 13 Feb 2015 03:31:12 PM JST
and
* Fri 13 Feb 2015 03:33:38 PM JST
BadAtom
* Fri 13 Feb 2015 03:34:30 PM JST
Atom の所有権者を確認
* Fri 13 Feb 2015 03:34:44 PM JST
Atom の所有権を XSetSelectionOwner(3) で自分自身に設定し
所有権の変更イベントを通知
* Fri 13 Feb 2015 03:34:48 PM JST
3)
* Fri 13 Feb 2015 03:34:49 PM JST
XSetSelectionOwner(3)
* Fri 13 Feb 2015 03:34:53 PM JST
        
* Fri 13 Feb 2015 03:58:42 PM JST
tuple(
* Fri 13 Feb 2015 05:00:48 PM JST
form 
* Fri 13 Feb 2015 05:01:13 PM JST
InputFocus
* Fri 13 Feb 2015 10:14:54 PM JST
    def __init__(self, world=None, hello=None, google=None, yahoo=None):
        r"""

        @Arguments:
        - `world`:
        """
        self.world = world
        self.hello = hello
        self.google = google
        self.yahoo = yahoo

* Fri 13 Feb 2015 10:16:34 PM JST
KeyButtonPointerBase
* Fri 13 Feb 2015 10:22:56 PM JST
EnterNotifyEvent
* Fri 13 Feb 2015 10:24:35 PM JST
KeymapNotifyEvent
* Fri 13 Feb 2015 10:27:58 PM JST
GraphicsExposureEvent
* Fri 13 Feb 2015 10:29:18 PM JST
NoExposureEvent
* Fri 13 Feb 2015 10:30:25 PM JST
y'
* Fri 13 Feb 2015 10:30:25 PM JST
x', 'y'
* Fri 13 Feb 2015 10:32:13 PM JST
CreateNotifyEvent
* Fri 13 Feb 2015 10:33:22 PM JST
'parent', 'window', 'x', 'y', 'width', 'height',
                 'borderwidth', 'override_redirect'
* Fri 13 Feb 2015 10:33:34 PM JST
                 
* Fri 13 Feb 2015 10:34:06 PM JST
DestroyNotifyEvent
* Fri 13 Feb 2015 10:35:42 PM JST
MapNotifyEvent
* Fri 13 Feb 2015 10:36:28 PM JST
MapRequestEvent
* Fri 13 Feb 2015 10:37:35 PM JST
ReparentNotifyEvent
* Fri 13 Feb 2015 10:38:08 PM JST
ConfigureNotifyEvent
* Fri 13 Feb 2015 10:38:19 PM JST
definit
* Fri 13 Feb 2015 10:39:47 PM JST
ConfigureRequestEvent
* Fri 13 Feb 2015 10:40:52 PM JST
'stack_mode', 'parent', 'window', 'sibling', 'x', 'y', 'width',
                 'height', 'border_width', 'value_mask'
* Fri 13 Feb 2015 10:41:36 PM JST
stack_mode, parent, window, sibling, x, y, width, height,
                 border_width, value_mask
* Fri 13 Feb 2015 10:41:52 PM JST
                 
* Fri 13 Feb 2015 10:42:17 PM JST
GravityNotifyEvent
* Fri 13 Feb 2015 10:42:55 PM JST
ResizeRequestEvent
* Fri 13 Feb 2015 10:43:30 PM JST
CirculateBase
* Fri 13 Feb 2015 10:45:10 PM JST
PropertyNotifyEvent
* Fri 13 Feb 2015 10:46:38 PM JST
SelectionRequestEvent
* Fri 13 Feb 2015 10:47:23 PM JST
time, owner, requestor, selection, target, property, 
* Fri 13 Feb 2015 10:47:53 PM JST
SelectionNotifyEvent
* Fri 13 Feb 2015 10:48:29 PM JST
time, requestor, selection, target, property
* Fri 13 Feb 2015 10:48:59 PM JST
ColormapNotifyEvent
* Fri 13 Feb 2015 10:49:47 PM JST
ClientMessageData
* Fri 13 Feb 2015 10:50:01 PM JST
data
* Fri 13 Feb 2015 10:50:33 PM JST
ClientMessageEvent
* Fri 13 Feb 2015 10:51:08 PM JST
Event
* Fri 13 Feb 2015 10:51:12 PM JST
Event
* Fri 13 Feb 2015 10:51:58 PM JST
ClientMessageEvent
* Fri 13 Feb 2015 10:52:10 PM JST
format, 
* Fri 13 Feb 2015 10:52:48 PM JST
MappingNotifyEvent
* Fri 13 Feb 2015 10:57:58 PM JST
    __slots__ = ('detail', 'time', 'root', 'event', 'child', 'root_x',
                 'root_y', 'event_x', 'event_y', 'state', 'same_screen')

    def __init__(self, detail, time, root, event, child, root_x, root_y,
                 event_x, event_y, state, same_screen):
        r"""

        @Arguments:
        - `detail`:
        - `time`:
        - `root`:
        - `event`:
        - `child`:
        - `root_x`:
        - `root_y`:
        - `event_x`:
        - `event_y`:
        - `state`:
        - `same_screen`:
        """
        self.detail = detail
        self.time = time
        self.root = root
        self.event = event
        self.child = child
        self.root_x = root_x
        self.root_y = root_y
        self.event_x = event_x
        self.event_y = event_y
        self.state = state
        self.same_screen = same_screen

* Fri 13 Feb 2015 10:58:23 PM JST
KeyButtonPointerEvent
* Fri 13 Feb 2015 10:58:29 PM JST
KeyButtonPointerEvent
* Fri 13 Feb 2015 11:01:07 PM JST
    __slots__ = ('detail', 'time', 'root', 'event', 'child', 'root_x', 'root_y',
                 'event_x', 'event_y', 'state', 'mode', 'same_screen', )

    def __init__(self, detail, time, root, event, child, root_x, root_y,
                 event_x, event_y, state, mode, same_screen):
        r"""

        @Arguments:
        - `detail`:
        - `time`:
        - `root`:
        - `event`:
        - `child`:
        - `root_x`:
        - `root_y`:
        - `event_x`:
        - `event_y`:
        - `state`:
        - `mode`:
        - `same_screen`:
        """
        self.detail = detail
        self.time = time
        self.root = root
        self.event = event
        self.child = child
        self.root_x = root_x
        self.root_y = root_y
        self.event_x = event_x
        self.event_y = event_y
        self.state = state
        self.mode = mode
        self.same_screen = same_screen

* Fri 13 Feb 2015 11:01:16 PM JST
    __slots__ = ('detail', 'event', 'mode')

    def __init__(self, detail, event, mode):
        r"""

        @Arguments:
        - `detail`:
        - `event`:
        - `mode`:
        """
        self.detail = detail
        self.event = event
        self.mode = mode

* Fri 13 Feb 2015 11:01:37 PM JST
    __slots__ = ('event', 'window', 'place')

    def __init__(self, event, window, place):
        r"""

        @Arguments:
        - `event`:
        - `window`:
        - `place`:
        """
        self.event = event
        self.window = window
        self.place = place

* Fri 13 Feb 2015 11:02:15 PM JST
EnterLeaveNotifyEvent
* Fri 13 Feb 2015 11:02:40 PM JST
Focus
* Fri 13 Feb 2015 11:02:51 PM JST
Focus
* Fri 13 Feb 2015 11:02:54 PM JST
Focus
* Fri 13 Feb 2015 11:02:58 PM JST
Focus
* Fri 13 Feb 2015 11:03:02 PM JST
Focus
* Fri 13 Feb 2015 11:03:31 PM JST
Circulate
* Fri 13 Feb 2015 11:03:34 PM JST
Circulate
* Fri 13 Feb 2015 11:03:39 PM JST
Circulate
* Fri 13 Feb 2015 11:05:36 PM JST
'code', 
* Fri 13 Feb 2015 11:06:04 PM JST
                 
* Fri 13 Feb 2015 11:06:39 PM JST
                 
* Fri 13 Feb 2015 11:07:54 PM JST
                 
* Fri 13 Feb 2015 11:11:02 PM JST
'code', 
* Fri 13 Feb 2015 11:14:59 PM JST

* Fri 13 Feb 2015 11:14:59 PM JST

* Fri 13 Feb 2015 11:14:59 PM JST
    code = 33

* Sat 14 Feb 2015 05:27:50 PM JST
class ButtonPressEvent(Event):
    r"""ButtonPressEvent

    ButtonPressEvent is a Event.
    Responsibility:
    """
    __slots__ = ('code', 'detail', 'time', 'root', 'event', 'child', 'root_x',
                 'root_y', 'event_x', 'event_y', 'state', 'same_screen')

    code = 4

    def __init__(self, detail, time, root, event, child, root_x, root_y,
                 event_x, event_y, state, same_screen):
        r"""

        @Arguments:
        - `detail`:
        - `time`:
        - `root`:
        - `event`:
        - `child`:
        - `root_x`:
        - `root_y`:
        - `event_x`:
        - `event_y`:
        - `state`:
        - `same_screen`:
        """
        self.detail = detail
        self.time = time
        self.root = root
        self.event = event
        self.child = child
        self.root_x = root_x
        self.root_y = root_y
        self.event_x = event_x
        self.event_y = event_y
        self.state = state
        self.same_screen = same_screen

* Sat 14 Feb 2015 05:28:03 PM JST
ButtonReleaseEvent
* Sat 14 Feb 2015 05:37:41 PM JST
        self._builders = {_event.KeyPressEvent: self._keypress,
                          _event.KeyReleaseEvent: self._keyrelease,
                          _event.ButtonPressEvent: self._buttonpress,
                          _event.ButtonReleaseEvent: self._buttonrelease,
                          _event.MotionNotifyEvent: self._motionnotify,
                          _event.EnterNotifyEvent: self._enternotify,
                          _event.LeaveNotifyEvent: self._leavenotify,
                          _event.FocusInEvent: self._focusin,
                          _event.FocusOutEvent: self._focusout,
                          _event.KeymapNotifyEvent: self._keymapnotify,
                          _event.ExposeEvent: self._expose,
                          _event.GraphicsExposureEvent: self._graphicsexposure,
                          _event.NoExposureEvent: self._noexposure,
                          _event.VisibilityNotifyEvent: self._visibilitynotify,
                          _event.CreateNotifyEvent: self._createnotify,
                          _event.DestroyNotifyEvent: self._destroynotify,
                          _event.UnmapNotifyEvent: self._unmapnotify,
                          _event.MapNotifyEvent: self._mapnotify,
                          _event.MapRequestEvent: self._maprequest,
                          _event.ReparentNotifyEvent: self._reparentnotify,
                          _event.ConfigureNotifyEvent: self._configurenotify,
                          _event.ConfigureRequestEvent: self._configurerequest,
                          _event.GravityNotifyEvent: self._gravitynotify,   
                          _event.ResizeRequestEvent: self._resizerequest,   
                          _event.CirculateNotifyEvent: self._circulatenotify, 
                          _event.CirculateRequestEvent: self._circulaterequest, 
                          _event.PropertyNotifyEvent: self._propertynotify, 
                          _event.SelectionClearEvent: self._selectionclear, 
                          _event.SelectionRequestEvent: self._selectionrequest, 
                          _event.SelectionNotifyEvent: ,self._selectionnotify, 
                          _event.ColormapNotifyEvent: self._colormapnotify, 
                          _event.ClientMessageEvent: self._clientmessage, 
                          _event.MappingNotifyEvent: self._mappingnotify, 
                          }

* Sat 14 Feb 2015 05:37:53 PM JST
self.
* Sat 14 Feb 2015 05:39:52 PM JST
pass
* Sat 14 Feb 2015 05:43:13 PM JST
pass
* Sat 14 Feb 2015 05:43:31 PM JST
detail=
* Sat 14 Feb 2015 05:46:13 PM JST
from _xclient._event import FocusInEvent
i=FocusInEvent(0,0,0)
from _xclient._xlibclient import EventBuilder

* Sat 14 Feb 2015 05:46:37 PM JST
    _builders = {_event.KeyPressEvent: _keypress,
                 _event.KeyReleaseEvent: _keyrelease,
                 _event.ButtonPressEvent: _buttonpress,
                 _event.ButtonReleaseEvent: _buttonrelease,
                 _event.MotionNotifyEvent: _motionnotify,
                 _event.EnterNotifyEvent: _enternotify,
                 _event.LeaveNotifyEvent: _leavenotify,
                 _event.FocusInEvent: _focusin,
                 _event.FocusOutEvent: _focusout,
                 _event.KeymapNotifyEvent: _keymapnotify,
                 _event.ExposeEvent: _expose,
                 _event.GraphicsExposureEvent: _graphicsexposure,
                 _event.NoExposureEvent: _noexposure,
                 _event.VisibilityNotifyEvent: _visibilitynotify,
                 _event.CreateNotifyEvent: _createnotify,
                 _event.DestroyNotifyEvent: _destroynotify,
                 _event.UnmapNotifyEvent: _unmapnotify,
                 _event.MapNotifyEvent: _mapnotify,
                 _event.MapRequestEvent: _maprequest,
                 _event.ReparentNotifyEvent: _reparentnotify,
                 _event.ConfigureNotifyEvent: _configurenotify,
                 _event.ConfigureRequestEvent: _configurerequest,
                 _event.GravityNotifyEvent: _gravitynotify,
                 _event.ResizeRequestEvent: _resizerequest,
                 _event.CirculateNotifyEvent: _circulatenotify,
                 _event.CirculateRequestEvent: _circulaterequest,
                 _event.PropertyNotifyEvent: _propertynotify,
                 _event.SelectionClearEvent: _selectionclear,
                 _event.SelectionRequestEvent: _selectionrequest,
                 _event.SelectionNotifyEvent: _selectionnotify,
                 _event.ColormapNotifyEvent: _colormapnotify,
                 _event.ClientMessageEvent: _clientmessage,
                 _event.MappingNotifyEvent: _mappingnotify,
                 }

* Sat 14 Feb 2015 05:47:42 PM JST
i=FocusInEvent(0,0,0)
* Sat 14 Feb 2015 05:51:07 PM JST
from _xclient._event import FocusInEvent
* Sat 14 Feb 2015 05:51:11 PM JST
FocusInEvent
* Sat 14 Feb 2015 06:00:21 PM JST
KeyPressEvent
* Sat 14 Feb 2015 06:01:04 PM JST
KeyPressEvent(0,0,482,0)
* Sat 14 Feb 2015 06:02:37 PM JST
                 
* Sat 14 Feb 2015 06:03:01 PM JST
sequence_number
* Sat 14 Feb 2015 06:04:03 PM JST
    __slots__ = ('code', 'detail', 'sequence_number', 'time', 'root', 'event',
                 'child', 'root_x', 'root_y', 'event_x', 'event_y', 'state',
                 'same_screen')

* Sat 14 Feb 2015 06:04:42 PM JST
    def __init__(self, detail, sequence_number, time, root, event, child,
                 root_x, root_y, event_x, event_y, state, same_screen):
        r"""

        @Arguments:
        - `detail`:
        - `time`:
        - `root`:
        - `event`:
        - `child`:
        - `root_x`:
        - `root_y`:
        - `event_x`:
        - `event_y`:
        - `state`:
        - `same_screen`:
        """
        self.detail = detail
        self.sequence_number = sequence_number
        self.time = time
        self.root = root
        self.event = event
        self.child = child
        self.root_x = root_x
        self.root_y = root_y
        self.event_x = event_x
        self.event_y = event_y
        self.state = state
        self.same_screen = same_screen

* Sat 14 Feb 2015 06:07:35 PM JST
from _xclient._event import KeyPressEvent
* Sat 14 Feb 2015 06:07:37 PM JST

* Sat 14 Feb 2015 06:07:37 PM JST

* Sat 14 Feb 2015 06:07:37 PM JST

* Sat 14 Feb 2015 06:07:37 PM JST

* Sat 14 Feb 2015 06:07:42 PM JST
from _xclient._event import KeyPressEvent
* Sat 14 Feb 2015 06:12:57 PM JST
EventBuilder
* Sat 14 Feb 2015 06:13:31 PM JST
event
* Sat 14 Feb 2015 06:16:07 PM JST
_keypress()
* Sat 14 Feb 2015 06:16:22 PM JST
from _xclient._xlibclient import EventBuilder
* Sat 14 Feb 2015 06:37:48 PM JST
        return xlibev.KeyPress(detail=self._event.detail,
                               time=self._event.time,
                               root=self._event.root,
                               window=self._event.event,
                               child=self._event.child,
                               root_x=self._event.root_x,
                               root_y=self._event.root_y,
                               event_x=self._event.event_x,
                               event_y=self._event.event_y,
                               state=self._event.state,
                               same_screen=self._event.same_screen,
                               )

* Sat 14 Feb 2015 06:38:05 PM JST
            
* Sat 14 Feb 2015 06:38:16 PM JST
        return xlibev.KeyRelease(detail=self._event.detail,
                                 time=self._event.time,
                                 root=self._event.root,
                                 window=self._event.event,
                                 child=self._event.child,
                                 root_x=self._event.root_x,
                                 root_y=self._event.root_y,
                                 event_x=self._event.event_x,
                                 event_y=self._event.event_y,
                                 state=self._event.state,
                                 same_screen=self._event.same_screen,
            )

* Sat 14 Feb 2015 06:38:44 PM JST
pass
* Sat 14 Feb 2015 06:38:51 PM JST
return 
* Sat 14 Feb 2015 06:38:54 PM JST
        return xlibev.ButtonPress(detail=self._event.detail,
                                  time=self._event.time,
                                  root=self._event.root,
                                  window=self._event.event,
                                  child=self._event.child,
                                  root_x=self._event.root_x,
                                  root_y=self._event.root_y,
                                  event_x=self._event.event_x,
                                  event_y=self._event.event_y,
                                  state=self._event.state,
                                  same_screen=self._event.same_screen,
            )

* Sat 14 Feb 2015 06:39:41 PM JST
        return xlibev.ButtonRelease(detail=self._event.detail,
                                    time=self._event.time,
                                    root=self._event.root,
                                    window=self._event.event,
                                    child=self._event.child,
                                    root_x=self._event.root_x,
                                    root_y=self._event.root_y,
                                    event_x=self._event.event_x,
                                    event_y=self._event.event_y,
                                    state=self._event.state,
                                    same_screen=self._event.same_screen,
            )

* Sat 14 Feb 2015 06:39:50 PM JST
ButtonRelease
* Sat 14 Feb 2015 06:53:33 PM JST
pass
* Sat 14 Feb 2015 06:54:35 PM JST
sequence_number=self._event.sequence_number,
* Sat 14 Feb 2015 06:55:32 PM JST
                 
* Sat 14 Feb 2015 06:55:45 PM JST
                 
* Sat 14 Feb 2015 06:56:39 PM JST

* Sat 14 Feb 2015 06:56:40 PM JST

* Sat 14 Feb 2015 06:56:40 PM JST
                                   sequence_number=self._event.sequence_number,

* Sat 14 Feb 2015 06:56:43 PM JST

* Sat 14 Feb 2015 06:56:43 PM JST

* Sat 14 Feb 2015 06:56:44 PM JST
                                    sequence_number=self._event.sequence_number,

* Sat 14 Feb 2015 06:56:45 PM JST

* Sat 14 Feb 2015 06:56:45 PM JST

* Sat 14 Feb 2015 06:56:45 PM JST
                                  time=self._event.time,

* Sat 14 Feb 2015 06:56:46 PM JST

* Sat 14 Feb 2015 06:56:46 PM JST

* Sat 14 Feb 2015 06:56:46 PM JST
                                  sequence_number=self._event.sequence_number,

* Sat 14 Feb 2015 06:56:49 PM JST

* Sat 14 Feb 2015 06:56:49 PM JST

* Sat 14 Feb 2015 06:56:49 PM JST
                                 sequence_number=self._event.sequence_number,

* Sat 14 Feb 2015 06:56:50 PM JST

* Sat 14 Feb 2015 06:56:50 PM JST

* Sat 14 Feb 2015 06:56:50 PM JST
                               sequence_number=self._event.sequence_number,

* Sat 14 Feb 2015 06:56:59 PM JST

* Sat 14 Feb 2015 06:56:59 PM JST

* Sat 14 Feb 2015 06:56:59 PM JST
                                  sequence_number=self._event.sequence_number,

* Sat 14 Feb 2015 06:57:14 PM JST

* Sat 14 Feb 2015 06:57:14 PM JST

* Sat 14 Feb 2015 06:57:14 PM JST
        self.sequence_number = sequence_number

* Sat 14 Feb 2015 06:57:19 PM JST
sequence_number, 
* Sat 14 Feb 2015 06:57:27 PM JST
sequence_number', 
* Sat 14 Feb 2015 06:57:41 PM JST

* Sat 14 Feb 2015 06:57:41 PM JST

* Sat 14 Feb 2015 06:57:41 PM JST
        self.sequence_number = sequence_number

* Sat 14 Feb 2015 06:57:45 PM JST
sequence_number, 
* Sat 14 Feb 2015 06:57:48 PM JST
                 
* Sat 14 Feb 2015 06:57:54 PM JST
sequence_number',
* Sat 14 Feb 2015 06:58:03 PM JST

* Sat 14 Feb 2015 06:58:03 PM JST

* Sat 14 Feb 2015 06:58:03 PM JST
        self.sequence_number = sequence_number

* Sat 14 Feb 2015 06:58:07 PM JST
sequence_number,
* Sat 14 Feb 2015 06:58:10 PM JST
                 
* Sat 14 Feb 2015 06:58:16 PM JST
sequence_number',
* Sat 14 Feb 2015 06:58:19 PM JST
                 
* Sat 14 Feb 2015 06:58:23 PM JST
                 
* Sat 14 Feb 2015 06:58:26 PM JST

* Sat 14 Feb 2015 06:58:26 PM JST

* Sat 14 Feb 2015 06:58:26 PM JST
        self.sequence_number = sequence_number

* Sat 14 Feb 2015 06:58:32 PM JST
sequence_number, 
* Sat 14 Feb 2015 06:58:34 PM JST
                 
* Sat 14 Feb 2015 06:58:40 PM JST
sequence_number', 
* Sat 14 Feb 2015 06:58:42 PM JST
                 
* Sat 14 Feb 2015 06:58:45 PM JST
                 
* Sat 14 Feb 2015 06:58:47 PM JST

* Sat 14 Feb 2015 06:58:48 PM JST

* Sat 14 Feb 2015 06:58:48 PM JST
        self.sequence_number = sequence_number

* Sat 14 Feb 2015 06:58:50 PM JST
sequence_number, 
* Sat 14 Feb 2015 06:58:52 PM JST
                 
* Sat 14 Feb 2015 06:58:57 PM JST
sequence_number',
* Sat 14 Feb 2015 06:58:59 PM JST
                 
* Sat 14 Feb 2015 06:59:02 PM JST
                 
* Sat 14 Feb 2015 06:59:05 PM JST

* Sat 14 Feb 2015 06:59:05 PM JST

* Sat 14 Feb 2015 06:59:05 PM JST
        self.sequence_number = sequence_number

* Sat 14 Feb 2015 06:59:10 PM JST
sequence_number, 
* Sat 14 Feb 2015 06:59:11 PM JST
                 
* Sat 14 Feb 2015 06:59:18 PM JST
sequence_number', 
* Sat 14 Feb 2015 06:59:21 PM JST
                 
* Sat 14 Feb 2015 06:59:25 PM JST
                 
* Sat 14 Feb 2015 07:00:39 PM JST
time=
* Sat 14 Feb 2015 07:00:49 PM JST
window
* Sat 14 Feb 2015 07:01:26 PM JST
                                  
* Sat 14 Feb 2015 07:01:39 PM JST
        return xlibev.EnterNotify(detail=self._event.detail,
                                  time=self._event.time,
                                  root=self._event.root,
                                  window=self._event.event,
                                  child=self._event.child,
                                  root_x=self._event.root_x,
                                  root_y=self._event.root_y,
                                  event_x=self._event.event_x,
                                  event_y=self._event.event_y,
                                  state=self._event.state,
                                  mode=self._event.mode,
                                  flags=self._event.flags,)

* Sat 14 Feb 2015 07:01:44 PM JST
Enter
* Sat 14 Feb 2015 07:02:01 PM JST
        return xlibev.FocusIn(detail=self._event.detail,
                              event=self._event.event,
                              mode=self._event.mode)

* Sat 14 Feb 2015 07:02:36 PM JST
pass
* Sat 14 Feb 2015 07:02:52 PM JST
s
* Sat 14 Feb 2015 07:02:52 PM JST
data=s
* Sat 14 Feb 2015 07:03:02 PM JST
window
* Sat 14 Feb 2015 07:03:18 PM JST
            
* Sat 14 Feb 2015 07:03:36 PM JST
            
* Sat 14 Feb 2015 07:04:12 PM JST
window
* Sat 14 Feb 2015 07:04:32 PM JST
                             
* Sat 14 Feb 2015 07:04:47 PM JST
pass
* Sat 14 Feb 2015 07:05:43 PM JST
pass
* Sat 14 Feb 2015 07:05:56 PM JST
window
* Sat 14 Feb 2015 07:06:26 PM JST
pass
* Sat 14 Feb 2015 07:06:47 PM JST
window
* Sat 14 Feb 2015 07:06:49 PM JST
                                       
* Sat 14 Feb 2015 07:07:04 PM JST
event
* Sat 14 Feb 2015 07:07:31 PM JST
window
* Sat 14 Feb 2015 07:07:54 PM JST
event
* Sat 14 Feb 2015 07:08:10 PM JST
data
* Sat 14 Feb 2015 07:08:55 PM JST
flags
* Sat 14 Feb 2015 07:09:01 PM JST
flags
* Sat 14 Feb 2015 09:47:41 PM JST
event
* Sat 14 Feb 2015 09:47:43 PM JST
event
* Sat 14 Feb 2015 09:47:47 PM JST
event
* Sat 14 Feb 2015 09:47:51 PM JST
event
* Sat 14 Feb 2015 09:47:54 PM JST
event
* Sat 14 Feb 2015 09:47:56 PM JST
event
* Sat 14 Feb 2015 09:48:04 PM JST
event
* Sat 14 Feb 2015 09:48:07 PM JST
window
* Sat 14 Feb 2015 09:48:13 PM JST
event
* Sat 14 Feb 2015 09:48:17 PM JST
event
* Sat 14 Feb 2015 09:48:19 PM JST
event
* Sat 14 Feb 2015 09:48:29 PM JST
event
* Sat 14 Feb 2015 09:48:33 PM JST
event
* Sat 14 Feb 2015 09:48:38 PM JST
event
* Sat 14 Feb 2015 09:48:41 PM JST
event
* Sat 14 Feb 2015 09:48:48 PM JST
event
* Sat 14 Feb 2015 09:48:52 PM JST
event
* Sat 14 Feb 2015 09:48:55 PM JST
event
* Sat 14 Feb 2015 09:49:02 PM JST
event
* Sat 14 Feb 2015 09:49:03 PM JST
event
* Sat 14 Feb 2015 09:49:08 PM JST
event
* Sat 14 Feb 2015 09:49:12 PM JST
event
* Sat 14 Feb 2015 09:49:16 PM JST
event
* Sat 14 Feb 2015 09:49:21 PM JST
event
* Sat 14 Feb 2015 09:49:22 PM JST
event
* Sat 14 Feb 2015 09:49:32 PM JST
event
* Sat 14 Feb 2015 09:49:36 PM JST
event
* Sat 14 Feb 2015 09:49:39 PM JST
event
* Sat 14 Feb 2015 09:49:42 PM JST
event
* Sat 14 Feb 2015 09:49:43 PM JST
event
* Sat 14 Feb 2015 09:49:50 PM JST
event
* Sat 14 Feb 2015 09:49:54 PM JST
event
* Sat 14 Feb 2015 09:49:59 PM JST
event
* Sat 14 Feb 2015 09:50:02 PM JST
event
* Sat 14 Feb 2015 09:50:04 PM JST
event
* Sat 14 Feb 2015 09:50:21 PM JST
event
* Sat 14 Feb 2015 09:50:25 PM JST
event
* Sat 14 Feb 2015 09:50:28 PM JST
event
* Sat 14 Feb 2015 09:50:30 PM JST
event
* Sat 14 Feb 2015 09:50:34 PM JST
event
* Sat 14 Feb 2015 09:50:39 PM JST
event
* Sat 14 Feb 2015 09:50:42 PM JST
event
* Sat 14 Feb 2015 09:51:25 PM JST
event
* Sat 14 Feb 2015 09:51:28 PM JST
event
* Sat 14 Feb 2015 09:51:32 PM JST
event
* Sat 14 Feb 2015 09:51:36 PM JST
event
* Sat 14 Feb 2015 09:51:43 PM JST
event
* Sat 14 Feb 2015 09:51:47 PM JST
event
* Sat 14 Feb 2015 09:51:51 PM JST
event
* Sat 14 Feb 2015 09:51:55 PM JST
event
* Sat 14 Feb 2015 09:51:58 PM JST
event
* Sat 14 Feb 2015 09:56:11 PM JST
pass
* Sat 14 Feb 2015 09:56:29 PM JST
parent
* Sat 14 Feb 2015 09:57:37 PM JST
pass
* Sat 14 Feb 2015 09:58:11 PM JST
pass
* Sat 14 Feb 2015 09:58:43 PM JST
    
* Sat 14 Feb 2015 09:58:48 PM JST
            
* Sat 14 Feb 2015 09:58:50 PM JST
            
* Sat 14 Feb 2015 09:59:28 PM JST
pass
* Sat 14 Feb 2015 10:00:22 PM JST
                                                                 
* Sat 14 Feb 2015 10:00:35 PM JST
            
* Sat 14 Feb 2015 10:00:37 PM JST
            
* Sat 14 Feb 2015 10:00:39 PM JST
            
* Sat 14 Feb 2015 10:00:41 PM JST
pass
* Sat 14 Feb 2015 10:01:35 PM JST
pass
* Sat 14 Feb 2015 10:02:42 PM JST
pass
* Sat 14 Feb 2015 10:03:27 PM JST
pass
* Sat 14 Feb 2015 10:03:30 PM JST
xlib
* Sat 14 Feb 2015 10:03:30 PM JST
retur xlib
* Sat 14 Feb 2015 10:03:49 PM JST
pass
* Sat 14 Feb 2015 10:04:31 PM JST
ResizeRequest
* Sat 14 Feb 2015 10:05:04 PM JST
pass
* Sat 14 Feb 2015 10:05:29 PM JST
        return xlibev.CirculateNotify(event=self._event.event,
                                      window=self._event.window,
                                      place=self._event.place,
                                      )

* Sat 14 Feb 2015 10:06:22 PM JST
pass
* Sat 14 Feb 2015 10:06:51 PM JST
pass
* Sat 14 Feb 2015 10:07:19 PM JST
pass
* Sat 14 Feb 2015 10:07:59 PM JST
pass
* Sat 14 Feb 2015 10:08:44 PM JST
pass
* Sat 14 Feb 2015 10:09:13 PM JST
pass
* Sat 14 Feb 2015 10:11:06 PM JST
pass
* Sat 14 Feb 2015 10:11:22 PM JST
request=
* Sat 14 Feb 2015 10:18:10 PM JST
Build
* Sat 14 Feb 2015 10:18:26 PM JST
event
* Sat 14 Feb 2015 10:28:23 PM JST
from xcb.xproto import EventMask
* Sat 14 Feb 2015 10:28:30 PM JST
EventMask.KeyPress
* Sat 14 Feb 2015 10:28:45 PM JST
EventMask.KeyPress
* Sat 14 Feb 2015 10:32:59 PM JST
XClient
* Sat 14 Feb 2015 10:33:34 PM JST
52428822
* Sat 14 Feb 2015 11:02:39 PM JST
    def _keypress(self, ):
        return xlibev.KeyPress(detail=self._event.detail,
                               time=self._event.time,
                               root=self._event.root,
                               window=self._event.window,
                               child=self._event.child,
                               root_x=self._event.root_x,
                               root_y=self._event.root_y,
                               event_x=self._event.event_x,
                               event_y=self._event.event_y,
                               state=self._event.state,
                               same_screen=self._event.same_screen,
                               )

    def _keyrelease(self, ):
        return xlibev.KeyRelease(detail=self._event.detail,
                                 time=self._event.time,
                                 root=self._event.root,
                                 window=self._event.window,
                                 child=self._event.child,
                                 root_x=self._event.root_x,
                                 root_y=self._event.root_y,
                                 event_x=self._event.event_x,
                                 event_y=self._event.event_y,
                                 state=self._event.state,
                                 same_screen=self._event.same_screen,
            )

    def _buttonpress(self, ):
        return xlibev.ButtonPress(detail=self._event.detail,
                                  time=self._event.time,
                                  root=self._event.root,
                                  window=self._event.window,
                                  child=self._event.child,
                                  root_x=self._event.root_x,
                                  root_y=self._event.root_y,
                                  event_x=self._event.event_x,
                                  event_y=self._event.event_y,
                                  state=self._event.state,
                                  same_screen=self._event.same_screen,
            )

    def _buttonrelease(self, ):
        return xlibev.ButtonRelease(detail=self._event.detail,
                                    time=self._event.time,
                                    root=self._event.root,
                                    window=self._event.window,
                                    child=self._event.child,
                                    root_x=self._event.root_x,
                                    root_y=self._event.root_y,
                                    event_x=self._event.event_x,
                                    event_y=self._event.event_y,
                                    state=self._event.state,
                                    same_screen=self._event.same_screen,
            )

    def _motionnotify(self, ):
        return xlibev.MotionNotify(detail=self._event.detail,
                                   time=self._event.time,
                                   root=self._event.root,
                                   window=self._event.window,
                                   child=self._event.child,
                                   root_x=self._event.root_x,
                                   root_y=self._event.root_y,
                                   event_x=self._event.event_x,
                                   event_y=self._event.event_y,
                                   state=self._event.state,
                                   same_screen=self._event.same_screen,
            )

    def _enternotify(self, ):
        return xlibev.EnterNotify(detail=self._event.detail,
                                  time=self._event.time,
                                  root=self._event.root,
                                  window=self._event.window,
                                  child=self._event.child,
                                  root_x=self._event.root_x,
                                  root_y=self._event.root_y,
                                  event_x=self._event.event_x,
                                  event_y=self._event.event_y,
                                  state=self._event.state,
                                  mode=self._event.mode,
                                  flags=self._event.same_screen,)

    def _leavenotify(self, ):
        return xlibev.LeaveNotify(detail=self._event.detail,
                                  time=self._event.time,
                                  root=self._event.root,
                                  window=self._event.window,
                                  child=self._event.child,
                                  root_x=self._event.root_x,
                                  root_y=self._event.root_y,
                                  event_x=self._event.event_x,
                                  event_y=self._event.event_y,
                                  state=self._event.state,
                                  mode=self._event.mode,
                                  flags=self._event.same_screen,)

    def _focusin(self, ):
        return xlibev.FocusIn(detail=self._event.detail,
                              event=self._event.window,
                              mode=self._event.mode)

    def _focusout(self, ):
        return xlibev.FocusOut(detail=self._event.detail,
                               event=self._event.window,
                               mode=self._event.mode)

    def _keymapnotify(self, ):
        return xlibev.KeymapNotify(data=self._event.keys,)

    def _expose(self, ):
        return xlibev.Expose(window=self._event.window,
                             x=self._event.x,
                             y=self._event.y,
                             width=self._event.width,
                             height=self._event.height,
                             count=self._event.count,)

    def _graphicsexposure(self, ):
        return xlibev.GraphicsExpose(drawable=self._event.drawable,
                                     x=self._event.x,
                                     y=self._event.y,
                                     width=self._event.width,
                                     height=self._event.height,
                                     minor_event=self._event.minor_event,
                                     count=self._event.count,
                                     major_event=self._event.major_event,
                                     )

    def _noexposure(self, ):
        return xlibev.NoExpose(window=self._event.drawable,
                               minor_event=self._event.minor_event,
                               major_event=self._event.major_event,
                               )

    def _visibilitynotify(self, ):
        return xlibev.VisibilityNotify(window=self._event.event,
                                       state=self._event.state,)

    def _createnotify(self, ):
        return xlibev.CreateNotify(parent=self._event.parent,
                                   window=self._event.window,
                                   x=self._event.x,
                                   y=self._event.y,
                                   width=self._event.width,
                                   height=self._event.height,
                                   border_width=self._event.border_width,
                                   override=self._event.override,
                                   )

    def _destroynotify(self, ):
        return xlibev.DestroyNotify(event=self._event.event,
                                    window=self._event.window,)

    def _unmapnotify(self, ):
        return xlibev.UnmapNotify(event=self._event.event,
                                  window=self._event.window,
                                  from_configure=self._event.from_configure,
                                  )

    def _mapnotify(self, ):
        return xlibev.MapNotify(event=self._event.event,
                                window=self._event.window,
                                override=self._event.override,
                                )

    def _maprequest(self, ):
        return xlibev.MapRequest(parent=self._event.parent,
                                 window=self._event.window,)

    def _reparentnotify(self, ):
        return xlibev.ReparentNotify(event=self._event.event,
                                     window=self._event.window,
                                     parent=self._event.parent,
                                     x=self._event.x,
                                     y=self._event.y,
                                     override=self._event.override,
                                     )

    def _configurenotify(self, ):
        return xlibev.ConfigureNotify(event=self._event.event,
                                      window=self._event.window,
                                      above_sibling=self._event.above_sibling,
                                      x=self._event.x,
                                      y=self._event.y,
                                      width=self._event.width,
                                      height=self._event.height,
                                      border_width=self._event.border_width,
                                      override=self._event.override,
                                      )

    def _configurerequest(self, ):
        return xlibev.ConfigureRequest(stack_mode=self._event.stack_mode,
                                       parent=self._event.parent,
                                       window=self._event.window,
                                       sibling=self._event.sibling,
                                       x=self._event.x,
                                       y=self._event.y,
                                       width=self._event.width,
                                       height=self._event.height,
                                       border_width=self._event.border_width,
                                       value_mask=self._event.value_mask,
                                       )

    def _gravitynotify(self, ):
        return xlibev.GravityNotify(event=self._event.event,
                                    window=self._event.window,
                                    x=self._event.x,
                                    y=self._event.y,
                                    )

    def _resizerequest(self, ):
        return xlibev.ResizeRequest(window=self._event.window,
                                    width=self._event.width,
                                    height=self._event.height,
                                    )

    def _circulatenotify(self, ):
        return xlibev.CirculateNotify(event=self._event.event,
                                      window=self._event.window,
                                      place=self._event.place,
                                      )

    def _circulaterequest(self, ):
        return xlibev.CirculateRequest(event=self._event.event,
                                       window=self._event.window,
                                       place=self._event.place,
                                       )

    def _propertynotify(self, ):
        return xlibev.PropertyNotify(window=self._event.window,
                                     atom=self._event.atom,
                                     time=self._event.time,
                                     state=self._event.state,
                                     )

    def _selectionclear(self, ):
        return xlibev.SelectionClear(time=self._event.time,
                                     window=self._event.window,
                                     atom=self._event.atom,
                                     )

    def _selectionrequest(self, ):
        return xlibev.SelectionRequest(time=self._event.time,
                                       owner=self._event.owner,
                                       requestor=self._event.requestor,
                                       selection=self._event.selection,
                                       target=self._event.target,
                                       property=self._event.property,
                                       )

    def _selectionnotify(self, ):
        return xlibev.SelectionNotify(time=self._event.time,
                                      requestor=self._event.requestor,
                                      selection=self._event.selection,
                                      target=self._event.target,
                                      property=self._event.property,
                                      )

    def _colormapnotify(self, ):
        return xlibev.ColormapNotify(window=self._event.window,
                                     colormap=self._event.colormap,
                                     new=self._event.new,
                                     state=self._event.state,
                                     )

    def _clientmessage(self, ):
        return xlibev.ClientMessage(data=self._event.data,
                                    window=self._event.window,
                                    client_type=self._event.client_type,
                                    )

    def _mappingnotify(self, ):
        return xlibev.MappingNotify(request=self._event.request,
                                    first_keycode=self._event.first_keycode,
                                    count=self._event.count,
                                    )

    _builders = {_event.KeyPressEvent: _keypress,
                 _event.KeyReleaseEvent: _keyrelease,
                 _event.ButtonPressEvent: _buttonpress,
                 _event.ButtonReleaseEvent: _buttonrelease,
                 _event.MotionNotifyEvent: _motionnotify,
                 _event.EnterNotifyEvent: _enternotify,
                 _event.LeaveNotifyEvent: _leavenotify,
                 _event.FocusInEvent: _focusin,
                 _event.FocusOutEvent: _focusout,
                 _event.KeymapNotifyEvent: _keymapnotify,
                 _event.ExposeEvent: _expose,
                 _event.GraphicsExposureEvent: _graphicsexposure,
                 _event.NoExposureEvent: _noexposure,
                 _event.VisibilityNotifyEvent: _visibilitynotify,
                 _event.CreateNotifyEvent: _createnotify,
                 _event.DestroyNotifyEvent: _destroynotify,
                 _event.UnmapNotifyEvent: _unmapnotify,
                 _event.MapNotifyEvent: _mapnotify,
                 _event.MapRequestEvent: _maprequest,
                 _event.ReparentNotifyEvent: _reparentnotify,
                 _event.ConfigureNotifyEvent: _configurenotify,
                 _event.ConfigureRequestEvent: _configurerequest,
                 _event.GravityNotifyEvent: _gravitynotify,
                 _event.ResizeRequestEvent: _resizerequest,
                 _event.CirculateNotifyEvent: _circulatenotify,
                 _event.CirculateRequestEvent: _circulaterequest,
                 _event.PropertyNotifyEvent: _propertynotify,
                 _event.SelectionClearEvent: _selectionclear,
                 _event.SelectionRequestEvent: _selectionrequest,
                 _event.SelectionNotifyEvent: _selectionnotify,
                 _event.ColormapNotifyEvent: _colormapnotify,
                 _event.ClientMessageEvent: _clientmessage,
                 _event.MappingNotifyEvent: _mappingnotify,
                 }

    def build_event(self, ):
        r"""SUMMARY

        build_event()

        @Return:

        @Error:
        """
        return self._builders.get(type(self._event))(self)

* Sat 14 Feb 2015 11:03:09 PM JST
_
* Sat 14 Feb 2015 11:03:09 PM JST
form _
* Sat 14 Feb 2015 11:38:21 PM JST
pass
* Sat 14 Feb 2015 11:38:50 PM JST
pass
* Sat 14 Feb 2015 11:40:10 PM JST
                    
* Sat 14 Feb 2015 11:40:38 PM JST
s
* Sat 14 Feb 2015 11:40:38 PM JST
_event.s
* Sat 14 Feb 2015 11:40:39 PM JST
self._event.s
* Sat 14 Feb 2015 11:40:54 PM JST
0
* Sat 14 Feb 2015 11:43:27 PM JST
e=ev.KeyPressEvent(38, 0, 482, 52428822, 0, 0, 0, 0, 0, 0, 1)
* Sat 14 Feb 2015 11:43:34 PM JST
x.SendEvent(1, 52428822, 1, e)
* Sat 14 Feb 2015 11:43:42 PM JST
x.flush()
* Sat 14 Feb 2015 11:43:49 PM JST
from _xclient import _event as ev
* Sat 14 Feb 2015 11:43:57 PM JST
from _xclient import XClient
x=XClient(':0.0')

* Sat 14 Feb 2015 11:44:26 PM JST
                     
* Sat 14 Feb 2015 11:45:17 PM JST
from _xclient import XClient
from _xclient import _event as ev
x=XClient(':0.0')

* Sat 14 Feb 2015 11:45:20 PM JST
e=ev.KeyPressEvent(38, 0, 482, 52428822, 0, 0, 0, 0, 0, 0, 1)
* Sat 14 Feb 2015 11:45:24 PM JST
x.SendEvent(1, 52428822, 1, e)
* Sat 14 Feb 2015 11:45:50 PM JST
ev =
* Sat 14 Feb 2015 11:46:20 PM JST
event
* Sat 14 Feb 2015 11:47:04 PM JST
from _xclient import XClient
from _xclient import _event as ev
x=XClient(':0.0')

* Sat 14 Feb 2015 11:47:10 PM JST
e=ev.KeyPressEvent(38, 0, 482, 52428822, 0, 0, 0, 0, 0, 0, 1)

* Sat 14 Feb 2015 11:47:13 PM JST
x.SendEvent(1, 52428822, 1, e)
* Sat 14 Feb 2015 11:47:34 PM JST
_event.
* Sat 14 Feb 2015 11:48:08 PM JST
from _xclient import XClient
from _xclient import _event as ev
x=XClient(':0.0')

* Sat 14 Feb 2015 11:48:15 PM JST
e=ev.KeyPressEvent(38, 0, 482, 52428822, 0, 0, 0, 0, 0, 0, 1)

* Sat 14 Feb 2015 11:48:18 PM JST
x.SendEvent(1, 52428822, 1, e)

* Sat 14 Feb 2015 11:48:28 PM JST
x.flush()
* Sat 14 Feb 2015 11:50:31 PM JST
        return pack('BBH4I5HBx', self._event.code, self._event.detail,
                    self.sequence_number, self._event.time, self._event.root,
                    self._event.window, self._event.child, self._event.root_x,
                    self._event.root_y, self._event.event_x,
                    self._event.event_y, self._event.state,
                    self._event.same_screen)

* Sun 15 Feb 2015 12:02:34 AM JST
pass
* Sun 15 Feb 2015 12:08:48 AM JST
return 
* Sun 15 Feb 2015 12:42:43 AM JST
from xcb2.xobj import AtomReplyTypes
* Sun 15 Feb 2015 12:42:58 AM JST
AtomReplyTypes
* Sun 15 Feb 2015 12:43:03 AM JST
'_NET_WM_STATE'
* Sun 15 Feb 2015 12:46:50 AM JST
'_NET_WM_STATE_SHADED'
* Sun 15 Feb 2015 12:47:10 AM JST
382
* Sun 15 Feb 2015 12:47:16 AM JST
x.InternAtom(0, '_NET_WM_STATE_SHADED')
Out[13]: InternAtomReply(atom=382)
* Sun 15 Feb 2015 12:47:18 AM JST
Out[13]: 
* Sun 15 Feb 2015 12:50:40 AM JST
[1, 382, 0, 0, 0]
* Sun 15 Feb 2015 12:52:29 AM JST
emacs=52428822

from _xclient import XClient
from _xclient import _event as ev
x=XClient(':0.0')

* Sun 15 Feb 2015 12:54:48 AM JST
type', 
* Sun 15 Feb 2015 12:54:52 AM JST

* Sun 15 Feb 2015 12:54:52 AM JST

* Sun 15 Feb 2015 12:54:53 AM JST
        self.type = type

* Sun 15 Feb 2015 12:54:56 AM JST
type, 
* Sun 15 Feb 2015 12:55:11 AM JST
[1, 382, 0, 0, 0]
* Sun 15 Feb 2015 12:55:51 AM JST
x.SendEvent(1, 52428822, 1, e)
* Sun 15 Feb 2015 12:56:55 AM JST
0xffffff
* Sun 15 Feb 2015 12:57:09 AM JST
x.SendEvent(1, 52428822, 1, e)
* Sun 15 Feb 2015 12:57:17 AM JST
52428822
* Sun 15 Feb 2015 12:57:29 AM JST
propagate=1
event_mask=0xffffff

* Sun 15 Feb 2015 12:57:34 AM JST
x.SendEvent(propagete, emacs, event_mask, e)

* Sun 15 Feb 2015 12:57:54 AM JST
x.SendEvent(propagate, emacs, event_mask, e)
* Sun 15 Feb 2015 01:00:24 AM JST
e)
* Sun 15 Feb 2015 01:01:39 AM JST
type(eb._event)
* Sun 15 Feb 2015 01:02:08 AM JST
emacs=52428822
propagate=1
event_mask=0xffffff

* Sun 15 Feb 2015 01:02:12 AM JST
from _xclient import XClient
from _xclient import _event as ev
x=XClient(':0.0')

* Sun 15 Feb 2015 01:02:58 AM JST
ClientMessage
* Sun 15 Feb 2015 01:03:06 AM JST
e=ev.ClientMessageEvent(32, emacs, [1, 382, 0, 0, 0])
* Sun 15 Feb 2015 01:03:16 AM JST

* Sun 15 Feb 2015 01:03:16 AM JST

* Sun 15 Feb 2015 01:03:16 AM JST
e=ev.ClientMessageEvent(32, emacs, [1, 382, 0, 0, 0])
* Sun 15 Feb 2015 01:03:20 AM JST
e=ev.ClientMessageEvent(32, emacs, [1, 382, 0, 0, 0])
* Sun 15 Feb 2015 01:03:54 AM JST
x.SendEvent(propagate, emacs, event_mask, e)
* Sun 15 Feb 2015 01:05:06 AM JST
title
* Sun 15 Feb 2015 01:05:09 AM JST
25165828
* Sun 15 Feb 2015 01:05:16 AM JST
xfce=25165828
* Sun 15 Feb 2015 01:05:28 AM JST
x.SendEvent(propagate, emacs, event_mask, e)
* Sun 15 Feb 2015 01:05:32 AM JST
emacs
* Sun 15 Feb 2015 01:11:34 AM JST
'_NET_WM_STATE'
* Sun 15 Feb 2015 01:11:46 AM JST
x.InternAtom(0, '_NET_WM_STATE')
Out[20]: InternAtomReply(atom=293)
* Sun 15 Feb 2015 01:11:53 AM JST
Out[20]: 
* Sun 15 Feb 2015 01:17:16 AM JST
293
* Sun 15 Feb 2015 01:20:15 AM JST
e=ev.ClientMessageEvent(32, emacs, 293, [1, 382, 0, 0, 0])
* Sun 15 Feb 2015 01:20:27 AM JST
xfce=25165828
* Sun 15 Feb 2015 01:20:32 AM JST
emacs
* Sun 15 Feb 2015 01:20:39 AM JST
e=ev.ClientMessageEvent(32, xfce, 293, [1, 382, 0, 0, 0])
* Sun 15 Feb 2015 01:20:43 AM JST
x.SendEvent(propagate, emacs, event_mask, e)
* Sun 15 Feb 2015 01:20:59 AM JST
emacs=52428822
propagate=1
event_mask=0xffffff
xfce=25165828

* Sun 15 Feb 2015 01:21:05 AM JST
from _xclient import XClient
from _xclient import _event as ev
x=XClient(':0.0')

* Sun 15 Feb 2015 01:21:15 AM JST
e=ev.ClientMessageEvent(32, xfce, 293, [1, 382, 0, 0, 0])

* Sun 15 Feb 2015 01:21:24 AM JST
x.SendEvent(propagate, emacs, event_mask, e)
* Sun 15 Feb 2015 01:21:29 AM JST
emacs
* Sun 15 Feb 2015 01:21:32 AM JST
x.SendEvent(propagate, xfce, event_mask, e)
* Sun 15 Feb 2015 01:36:22 AM JST
client_
* Sun 15 Feb 2015 01:37:55 AM JST
emacs=52428822
propagate=1
event_mask=0xffffff
xfce=25165828

from _xclient import XClient
from _xclient import _event as ev
x=XClient(':0.0')

* Sun 15 Feb 2015 01:38:02 AM JST
e=ev.ClientMessageEvent(32, xfce, 293, [1, 382, 0, 0, 0])
* Sun 15 Feb 2015 01:38:09 AM JST
x.SendEvent(propagate, xfce, event_mask, e)
* Sun 15 Feb 2015 01:44:22 AM JST
self._event.data
* Sun 15 Feb 2015 01:47:08 AM JST
(data + ([0] * (5 - len(data))))[:5]
* Sun 15 Feb 2015 01:47:24 AM JST
self._event.data
* Sun 15 Feb 2015 01:47:39 AM JST
            
* Sun 15 Feb 2015 01:47:41 AM JST
    
* Sun 15 Feb 2015 01:48:07 AM JST
emacs=52428822
propagate=1
event_mask=0xffffff
xfce=25165828

* Sun 15 Feb 2015 01:48:10 AM JST
emacs=52428822
propagate=1
event_mask=0xffffff
xfce=25165828

from _xclient import XClient
from _xclient import _event as ev
x=XClient(':0.0')

* Sun 15 Feb 2015 01:48:19 AM JST
e=ev.ClientMessageEvent(32, xfce, 293, [1, 382, 0, 0, 0])
* Sun 15 Feb 2015 01:48:28 AM JST
x.SendEvent(propagate, xfce, event_mask, e)
* Sun 15 Feb 2015 01:56:30 AM JST
'_NET_WM_STATE_ABOVE'
* Sun 15 Feb 2015 01:56:40 AM JST
x.InternAtom(0, '_NET_WM_STATE_ABOVE')
Out[14]: InternAtomReply(atom=294)
* Sun 15 Feb 2015 01:56:44 AM JST
Out[14]: 
* Sun 15 Feb 2015 01:56:48 AM JST
294
* Sun 15 Feb 2015 01:57:03 AM JST
_net
* Sun 15 Feb 2015 01:57:04 AM JST
_net_wm_state_above=294
* Sun 15 Feb 2015 01:57:08 AM JST
_net_wm_state_above
* Sun 15 Feb 2015 01:58:20 AM JST
_net_wm_state
* Sun 15 Feb 2015 01:58:47 AM JST
from _xclient import XClient
from _xclient import _event as ev
x=XClient(':0.0')

* Sun 15 Feb 2015 01:58:53 AM JST
emacs=52428822
propagate=1
event_mask=0xffffff
xfce=25165828

* Sun 15 Feb 2015 01:59:16 AM JST
x.flush()
* Sun 15 Feb 2015 01:59:42 AM JST
emacs=52428822
propagate=1
event_mask=0xffffff
xfce=25165828
_net_wm_state=293
_net_wm_state_above=294

* Sun 15 Feb 2015 01:59:52 AM JST
from _xclient import XClient
from _xclient import _event as ev

* Sun 15 Feb 2015 01:59:56 AM JST
x=XClient(':0.0')
e=ev.ClientMessageEvent(32, xfce, _net_wm_state, [1, _net_wm_state_above, 0, 0, 0])

* Sun 15 Feb 2015 02:00:01 AM JST
x.SendEvent(propagate, xfce, event_mask, e)
* Sun 15 Feb 2015 02:05:26 AM JST
buf.getvalue()
* Sun 15 Feb 2015 02:05:40 AM JST
buf.getvalue()
* Sun 15 Feb 2015 02:07:14 AM JST
emacs=52428822
propagate=1
event_mask=0xffffff
xfce=25165828
_net_wm_state=293
_net_wm_state_above=294
from _xclient import XClient
from _xclient import _event as ev

* Sun 15 Feb 2015 02:07:18 AM JST
x=XClient(':0.0')

* Sun 15 Feb 2015 02:07:24 AM JST
e=ev.ClientMessageEvent(32, xfce, _net_wm_state, [1, _net_wm_state_above, 0, 0, 0])
* Sun 15 Feb 2015 02:07:27 AM JST
x.SendEvent(propagate, xfce, event_mask, e)
* Sun 15 Feb 2015 02:07:51 AM JST
'\x00\x00\x00\x00' + winbin + '\xff\xff\xff\x00! \x00'
                  '\x00' + winbin + '(\x01\x00\x00\x01\x00\x00\x00)\x01'
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 15 Feb 2015 02:08:03 AM JST
'! \x00\x00\x04\x00\x80\x01%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 15 Feb 2015 02:08:42 AM JST
'\x04\x00\x80\x01'
* Sun 15 Feb 2015 02:09:18 AM JST
'(\x01\x00\x00\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 15 Feb 2015 02:24:01 AM JST
33
* Sun 15 Feb 2015 02:24:49 AM JST
\x04\x00\x80\x01
* Sun 15 Feb 2015 02:25:02 AM JST
! \x00
* Sun 15 Feb 2015 02:25:05 AM JST
'! \x00\x00\x04\x00\x80\x01(\x01\x00\x00\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 15 Feb 2015 02:30:02 AM JST
293
* Sun 15 Feb 2015 02:44:45 AM JST
'\x00\x00\x00\x00\x04\x00\x80\x01\xff\xff\xff\x00! \x01\x00\x04\x00\x80\x01%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 15 Feb 2015 02:44:56 AM JST
'\x00\x00\x00\x00\x04\x00\x80\x01\xff\xff\xff\x00
* Sun 15 Feb 2015 02:45:23 AM JST
'! \x00\x00\x04\x00\x80\x01(\x01\x00\x00\x01\x00\x00\x00)\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'


* Sun 15 Feb 2015 02:46:42 AM JST
'\x00\x00\x00\x00\x04\x00\x80\x01\xff\xff\xff\x00! \x00\x00\x04\x00\x80\x01%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 15 Feb 2015 02:49:52 AM JST
emacs=52428822
propagate=1
event_mask=0xffffff
xfce=25165828
_net_wm_state =293
_net_wm_state_above=294
from _xclient import XClient
from _xclient import _event as ev
x=XClient(':0.0')

* Sun 15 Feb 2015 02:49:58 AM JST
e=ev.ClientMessageEvent(32, xfce, _net_wm_state, [1, _net_wm_state_above, 0, 0, 0])

* Sun 15 Feb 2015 02:50:04 AM JST
x.SendEvent(propagate, xfce, event_mask, e)
* Sun 15 Feb 2015 02:50:13 AM JST
'! \x00\x00\x04\x00\x80\x01%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 15 Feb 2015 02:50:25 AM JST
x.flush()
* Sun 15 Feb 2015 02:52:05 AM JST
buf.getvalue()
* Sun 15 Feb 2015 02:52:40 AM JST
emacs=52428822
propagate=1
event_mask=0xffffff
xfce=25165828
_net_wm_state =293
_net_wm_state_above=294
from _xclient import XClient
from _xclient import _event as ev
x=XClient(':0.0')

* Sun 15 Feb 2015 02:52:51 AM JST
e=ev.ClientMessageEvent(32, xfce, _net_wm_state, [1, _net_wm_state_above, 0, 0, 0])

* Sun 15 Feb 2015 02:52:54 AM JST
x.SendEvent(propagate, xfce, event_mask, e)
* Sun 15 Feb 2015 02:53:10 AM JST
'\x00\x01\x00\x00\x04\x00\x80\x01\xff\xff\xff\x00! \x00\x00\x04\x00\x80\x01%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 15 Feb 2015 02:54:38 AM JST
'\x00\x00\x00\x00\x04\x00\x80\x01\xff\xff\xff\x00! \x00\x00\x04\x00\x80\x01%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 15 Feb 2015 02:55:02 AM JST
'\x00\x01\x00\x00\x04\x00\x80\x01\xff\xff\xff\x00! \x00\x00\x04\x00\x80\x01%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 15 Feb 2015 02:55:32 AM JST
'\x00\x01\x00\x00\x04\x00\x80\x01\xff\xff\xff\x00! \x00\x00\x04\x00\x80\x01%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 15 Feb 2015 02:55:37 AM JST
'\x00\x01\x00\x00\x04\x00\x80\x01\xff\xff\xff\x00! \x00\x00\x04\x00\x80\x01%\x01\x00\x00\x01\x00\x00\x00&\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
* Sun 15 Feb 2015 02:56:37 AM JST
_get_setbinary?
* Sun 15 Feb 2015 02:56:52 AM JST
above
* Sun 15 Feb 2015 02:58:10 AM JST
c.core.SendEvent.ClientMessage.above.set(xfce)
* Sun 15 Feb 2015 02:58:32 AM JST
title
* Sun 15 Feb 2015 02:58:35 AM JST
29360132
* Sun 15 Feb 2015 03:00:14 AM JST
emacs=52428822
propagate=0
event_mask=0xffffff
xfce=29360132
_net_wm_state =293
_net_wm_state_above=294
from _xclient import XClient
from _xclient import _event as ev
x=XClient(':0.0')

* Sun 15 Feb 2015 03:00:20 AM JST
e=ev.ClientMessageEvent(32, xfce, _net_wm_state, [1, _net_wm_state_above, 0, 0, 0])

* Sun 15 Feb 2015 03:00:28 AM JST
x.SendEvent(propagate, xfce, event_mask, e)

* Sun 15 Feb 2015 03:00:40 AM JST
x.flush()
* Sun 15 Feb 2015 03:01:15 AM JST

* Sun 15 Feb 2015 03:01:15 AM JST

* Sun 15 Feb 2015 03:01:15 AM JST
        print(repr(buf.getvalue()))

* Sun 15 Feb 2015 03:01:41 AM JST

* Sun 15 Feb 2015 03:01:41 AM JST

* Sun 15 Feb 2015 03:01:41 AM JST
        print(repr(buf.getvalue()))

* Sun 15 Feb 2015 03:02:04 AM JST
emacs=52428822
propagate=0
event_mask=0xffffff
xfce=29360132
_net_wm_state =293
_net_wm_state_above=294
from _xclient import XClient
from _xclient import _event as ev
x=XClient(':0.0')
e=ev.ClientMessageEvent(32, xfce, _net_wm_state, [1, _net_wm_state_above, 0, 0, 0])
x.SendEvent(propagate, xfce, event_mask, e)
x.flush()

* Sun 15 Feb 2015 03:26:46 AM JST
pass
* Sun 15 Feb 2015 03:26:57 AM JST
raise NotImplementedError()
* Sun 15 Feb 2015 03:29:57 AM JST

* Sun 15 Feb 2015 03:29:57 AM JST

* Sun 15 Feb 2015 03:29:57 AM JST
        # TODO: (Atami) [2015/02/09]

* Sun 15 Feb 2015 03:52:52 AM JST
check()
* Sun 15 Feb 2015 03:53:10 AM JST
check()
* Sun 15 Feb 2015 03:53:50 AM JST
check()
* Sun 15 Feb 2015 03:57:25 PM JST
git://github.com/akaihola/PyWO.git
* Sun 15 Feb 2015 03:58:35 PM JST
git://github.com/mackstann/whimsy.git
* Sun 15 Feb 2015 04:10:30 PM JST
rep
* Sun 15 Feb 2015 04:16:29 PM JST
Grab
* Sun 15 Feb 2015 04:19:18 PM JST
rep
* Sun 15 Feb 2015 04:29:22 PM JST
                         rq.Set('function', 1,
                                (X.GXclear, X.GXand, X.GXandReverse,
                                 X.GXcopy, X.GXandInverted, X.GXnoop,
                                 X.GXxor, X.GXor, X.GXnor, X.GXequiv,
                                 X.GXinvert, X.GXorReverse, X.GXcopyInverted,
                                 X.GXorInverted, X.GXnand, X.GXset)),
                         rq.Card32('plane_mask'),
                         rq.Card32('foreground'),
                         rq.Card32('background'),
                         rq.Card16('line_width'),
                         rq.Set('line_style', 1,
                                (X.LineSolid, X.LineOnOffDash, X.LineDoubleDash)),
                         rq.Set('cap_style', 1,
                                (X.CapNotLast, X.CapButt,
                                 X.CapRound, X.CapProjecting)),
                         rq.Set('join_style', 1,
                                (X.JoinMiter, X.JoinRound, X.JoinBevel)),
                         rq.Set('fill_style', 1,
                                (X.FillSolid, X.FillTiled,
                                 X.FillStippled, X.FillOpaqueStippled)),
                         rq.Set('fill_rule', 1,
                                (X.EvenOddRule, X.WindingRule)),
                         rq.Pixmap('tile'),
                         rq.Pixmap('stipple'),
                         rq.Int16('tile_stipple_x_origin'),
                         rq.Int16('tile_stipple_y_origin'),
                         rq.Font('font'),
                         rq.Set('subwindow_mode', 1,
                                (X.ClipByChildren, X.IncludeInferiors)),
                         rq.Bool('graphics_exposures'),
                         rq.Int16('clip_x_origin'),
                         rq.Int16('clip_y_origin'),
                         rq.Pixmap('clip_mask'),
                         rq.Card16('dash_offset'),
                         rq.Card8('dashes'),
                         rq.Set('arc_mode', 1, (X.ArcChord, X.ArcPieSlice))

* Sun 15 Feb 2015 04:29:45 PM JST
, 1,
* Sun 15 Feb 2015 04:29:47 PM JST
rq.Set(
* Sun 15 Feb 2015 04:29:51 PM JST
rq.Card16(
* Sun 15 Feb 2015 04:29:52 PM JST
rq.Card32(
* Sun 15 Feb 2015 04:29:52 PM JST
rq.Card32(
* Sun 15 Feb 2015 04:29:52 PM JST
rq.Card32(
* Sun 15 Feb 2015 04:30:01 PM JST

* Sun 15 Feb 2015 04:30:01 PM JST

* Sun 15 Feb 2015 04:30:01 PM JST
                     (X.LineSolid, X.LineOnOffDash, X.LineDoubleDash)),

* Sun 15 Feb 2015 04:30:22 PM JST
rq.Set(
* Sun 15 Feb 2015 04:30:22 PM JST
rq.Card8(
* Sun 15 Feb 2015 04:30:22 PM JST
rq.Card16(
* Sun 15 Feb 2015 04:30:22 PM JST
rq.Pixmap(
* Sun 15 Feb 2015 04:30:23 PM JST
rq.Int16(
* Sun 15 Feb 2015 04:30:23 PM JST
rq.Int16(
* Sun 15 Feb 2015 04:30:23 PM JST
rq.Bool(
* Sun 15 Feb 2015 04:30:23 PM JST
rq.Set(
* Sun 15 Feb 2015 04:30:23 PM JST
rq.Font(
* Sun 15 Feb 2015 04:30:23 PM JST
rq.Int16(
* Sun 15 Feb 2015 04:30:23 PM JST
rq.Int16(
* Sun 15 Feb 2015 04:30:23 PM JST
rq.Pixmap(
* Sun 15 Feb 2015 04:30:23 PM JST
rq.Pixmap(
* Sun 15 Feb 2015 04:30:23 PM JST
rq.Set(
* Sun 15 Feb 2015 04:30:23 PM JST
rq.Set(
* Sun 15 Feb 2015 04:30:23 PM JST
rq.Set(
* Sun 15 Feb 2015 04:30:23 PM JST
rq.Set(
* Sun 15 Feb 2015 04:30:23 PM JST
rq.Set(
* Sun 15 Feb 2015 04:30:33 PM JST
ArcPieSlice
* Sun 15 Feb 2015 04:30:33 PM JST
X.ArcPieSlice
* Sun 15 Feb 2015 04:30:34 PM JST
ArcChord, X.ArcPieSlice
* Sun 15 Feb 2015 04:30:34 PM JST
X.ArcChord, X.ArcPieSlice
* Sun 15 Feb 2015 04:30:35 PM JST
1, (X.ArcChord, X.ArcPieSlice
* Sun 15 Feb 2015 04:31:23 PM JST
function
plane_mask
foreground
background
line_width
line_style
cap_style
join_style
fill_style
fill_rule
tile
stipple
tile_stipple_x_origin
tile_stipple_y_origin
font
subwindow_mode
graphics_exposures
clip_x_origin
clip_y_origin
clip_mask
dash_offset
dashes
arc_mode

* Sun 15 Feb 2015 04:34:00 PM JST
('function', ),
 ('plane_mask', ),
 ('foreground', ),
 ('background', ),
 ('line_width', ),
 ('line_style', ),
 ('cap_style', ),
 ('join_style', ),
 ('fill_style', ),
 ('fill_rule', ),
 ('tile', ),
 ('stipple', ),
 ('tile_stipple_x_origin', ),
 ('tile_stipple_y_origin', ),
 ('font', ),
 ('subwindow_mode', ),
 ('graphics_exposures', ),
 ('clip_x_origin', ),
 ('clip_y_origin', ),
 ('clip_mask', ),
 ('dash_offset', ),
 ('dashes', ),
 ('arc_mode', ),
* Sun 15 Feb 2015 04:34:43 PM JST
xcb.
* Sun 15 Feb 2015 04:34:45 PM JST
xcb.
* Sun 15 Feb 2015 04:34:45 PM JST
xcb.
* Sun 15 Feb 2015 04:34:47 PM JST
xcb.
* Sun 15 Feb 2015 04:34:48 PM JST
xcb.
* Sun 15 Feb 2015 04:34:49 PM JST
xcb.
* Sun 15 Feb 2015 04:34:51 PM JST
xcb.
* Sun 15 Feb 2015 04:34:52 PM JST
xcb.
* Sun 15 Feb 2015 04:34:53 PM JST
xcb.
* Sun 15 Feb 2015 04:40:17 PM JST
GCMASK
* Sun 15 Feb 2015 04:42:52 PM JST
        value_mask, value_list = 0, []
        for key, value in values.items():
            msk = GCMASK.get(key, None)
            if msk is None:
                # TODO: (Atami) [2015/02/15]
                raise TypeError()
            value_mask |= msk
            value_list.append(value)

* Sun 15 Feb 2015 04:43:37 PM JST
'function'
'plane_mask'
'foreground'
'background'
'line_width'
'line_style'
'cap_style'
'join_style'
'fill_style'
'fill_rule'
'tile'
'stipple'
'tile_stipple_x_origin'
'tile_stipple_y_origin'
'font'
'subwindow_mode'
'graphics_exposures'
'clip_x_origin'
'clip_y_origin'
'clip_mask'
'dash_offset'
'dashes'
'arc_mode'

* Sun 15 Feb 2015 04:44:34 PM JST
                'function'
                'plane_mask'
                'foreground'
                'background'
                'line_width'
                'line_style'
                'cap_style'
                'join_style'
                'fill_style'
                'fill_rule'
                'tile'
                'stipple'
                'tile_stipple_x_origin'
                'tile_stipple_y_origin'
                'font'
                'subwindow_mode'
                'graphics_exposures'
                'clip_x_origin'
                'clip_y_origin'
                'clip_mask'
                'dash_offset'
                'dashes'
                'arc_mode'

* Sun 15 Feb 2015 04:51:22 PM JST
            
* Sun 15 Feb 2015 04:52:37 PM JST
key_click_percent
* Sun 15 Feb 2015 04:52:50 PM JST
rq.Int8('key_click_percent'),
                      rq.Int8('bell_percent'),
                      rq.Int16('bell_pitch'),
                      rq.Int16('bell_duration'),
                      rq.Card8('led'),
                      rq.Set('led_mode', 1, (X.LedModeOff, X.LedModeOn)),
                      rq.Card8('key'),
                      rq.Set('auto_repeat_mode'
* Sun 15 Feb 2015 04:54:19 PM JST
rq.Set(
* Sun 15 Feb 2015 04:54:19 PM JST
rq.Card8(
* Sun 15 Feb 2015 04:54:19 PM JST
rq.Set(
* Sun 15 Feb 2015 04:54:19 PM JST
rq.Card8(
* Sun 15 Feb 2015 04:54:19 PM JST
rq.Int16(
* Sun 15 Feb 2015 04:54:20 PM JST
rq.Int16(
* Sun 15 Feb 2015 04:54:20 PM JST
rq.Int8(
* Sun 15 Feb 2015 04:54:20 PM JST
rq.Int8(
* Sun 15 Feb 2015 04:54:36 PM JST
),
* Sun 15 Feb 2015 04:54:38 PM JST
n
* Sun 15 Feb 2015 04:54:39 PM JST
),
* Sun 15 Feb 2015 04:54:40 PM JST
),
* Sun 15 Feb 2015 04:54:42 PM JST
),
* Sun 15 Feb 2015 04:54:43 PM JST
),
* Sun 15 Feb 2015 04:54:45 PM JST
, 1, (X.LedModeOff, X.LedModeOn)),
* Sun 15 Feb 2015 04:54:46 PM JST
),
* Sun 15 Feb 2015 04:54:57 PM JST
'key_click_percent'
'bell_percent'
'bell_pitch'
'bell_duration'
'led'n
'led_mode'
'key'
'auto_repeat_mode'
* Sun 15 Feb 2015 04:55:28 PM JST
'key_click_percent'
'bell_percent'
'bell_pitch'
'bell_duration'
'led'n
'led_mode'
'key'
'auto_repeat_mode'
* Sun 15 Feb 2015 04:56:51 PM JST
('key_click_percent', xproto.KB.),
 ('bell_percent', xproto.KB.),
 ('bell_pitch', xproto.KB.),
 ('bell_duration', xproto.KB.),
 ('led'n, xproto.KB.),
 ('led_mode', xproto.KB.),
('key', xproto.KB.),
 ('auto_repeat_mode', xproto.KB.),
* Sun 15 Feb 2015 04:57:12 PM JST
KeyClickPercent
* Sun 15 Feb 2015 04:57:17 PM JST
BellPercent
* Sun 15 Feb 2015 04:57:20 PM JST
BellPitch
* Sun 15 Feb 2015 04:57:24 PM JST
BellDuration
* Sun 15 Feb 2015 04:57:28 PM JST
Led
* Sun 15 Feb 2015 04:57:31 PM JST
LedMode
* Sun 15 Feb 2015 04:57:35 PM JST
Key
* Sun 15 Feb 2015 04:57:40 PM JST
AutoRepeatMode
* Sun 15 Feb 2015 04:57:52 PM JST
KBMASK
* Sun 15 Feb 2015 05:34:25 PM JST
class LedMode:
    Off = 0
    On = 1

class AutoRepeatMode:
    Off = 0
    On = 1
    Default = 2

* Sun 15 Feb 2015 05:36:46 PM JST
class Blanking:
    NotPreferred = 0
    Preferred = 1
    Default = 2

class Exposures:
    NotAllowed = 0
    Allowed = 1
    Default = 2

* Sun 15 Feb 2015 05:36:56 PM JST
(_IntEnum)
* Sun 15 Feb 2015 05:37:11 PM JST
class HostMode:
    Insert = 0
    Delete = 1

class Family:
    Internet = 0
    DECnet = 1
    Chaos = 2
    ServerInterpreted = 5
    Internet6 = 6

* Sun 15 Feb 2015 05:37:30 PM JST
(_IntEnum)
* Sun 15 Feb 2015 05:37:42 PM JST
class AccessControl:
    Disable = 0
    Enable = 1

class CloseDown:
    DestroyAll = 0
    RetainPermanent = 1
    RetainTemporary = 2

class Kill:
    AllTemporary = 0

class ScreenSaver:
    Reset = 0
    Active = 1

class MappingStatus:
    Success = 0
    Busy = 1
    Failure = 2


* Sun 15 Feb 2015 05:37:58 PM JST
class MapIndex:
    Shift = 0
    Lock = 1
    Control = 2
    _1 = 3
    _2 = 4
    _3 = 5
    _4 = 6
    _5 = 7

* Sun 15 Feb 2015 05:38:19 PM JST
(_IntEnum)
* Sun 15 Feb 2015 05:40:23 PM JST
class VisualClass(_IntEnum):
    StaticGray  = 0
    GrayScale   = 1
    StaticColor = 2
    PseudoColor = 3
    TrueColor   = 4
    DirectColor = 5

* Sun 15 Feb 2015 05:40:40 PM JST
class BackingStore(_IntEnum):
    NotUseful  = 0
    WhenMapped = 1
    Always     = 2


class ImageOrder(_IntEnum):
    LSBFirst = 0
    MSBFirst = 1



* Sun 15 Feb 2015 05:41:00 PM JST
class Motion(_IntEnum):
    Normal = 0
    Hint   = 1



* Sun 15 Feb 2015 05:41:09 PM JST
class NotifyDetail(_IntEnum):
    Ancestor         = 0
    Virtual          = 1
    Inferior         = 2
    Nonlinear        = 3
    NonlinearVirtual = 4
    Pointer          = 5
    PointerRoot      = 6
    _None            = 7

* Sun 15 Feb 2015 05:41:20 PM JST
class NotifyMode(_IntEnum):
    Normal       = 0
    Grab         = 1
    Ungrab       = 2
    WhileGrabbed = 3



* Sun 15 Feb 2015 05:41:31 PM JST
class Visibility(_IntEnum):
    Unobscured        = 0
    PartiallyObscured = 1
    FullyObscured     = 2


class Place(_IntEnum):
    OnTop    = 0
    OnBottom = 1



* Sun 15 Feb 2015 05:41:39 PM JST
class Property(_IntEnum):
    NewValue = 0
    Delete   = 1


class Time(_IntEnum):
    CurrentTime = 0



* Sun 15 Feb 2015 05:42:28 PM JST
class Atom(_IntEnum):
    _None               = 0
    Any                 = 0
    PRIMARY             = 1
    SECONDARY           = 2
    ARC                 = 3
    ATOM                = 4
    BITMAP              = 5
    CARDINAL            = 6
    COLORMAP            = 7
    CURSOR              = 8
    CUT_BUFFER0         = 9
    CUT_BUFFER1         = 10
    CUT_BUFFER2         = 11
    CUT_BUFFER3         = 12
    CUT_BUFFER4         = 13
    CUT_BUFFER5         = 14
    CUT_BUFFER6         = 15
    CUT_BUFFER7         = 16
    DRAWABLE            = 17
    FONT                = 18
    INTEGER             = 19
    PIXMAP              = 20
    POINT               = 21
    RECTANGLE           = 22
    RESOURCE_MANAGER    = 23
    RGB_COLOR_MAP       = 24
    RGB_BEST_MAP        = 25
    RGB_BLUE_MAP        = 26
    RGB_DEFAULT_MAP     = 27
    RGB_GRAY_MAP        = 28
    RGB_GREEN_MAP       = 29
    RGB_RED_MAP         = 30
    STRING              = 31
    VISUALID            = 32
    WINDOW              = 33
    WM_COMMAND          = 34
    WM_HINTS            = 35
    WM_CLIENT_MACHINE   = 36
    WM_ICON_NAME        = 37
    WM_ICON_SIZE        = 38
    WM_NAME             = 39
    WM_NORMAL_HINTS     = 40
    WM_SIZE_HINTS       = 41
    WM_ZOOM_HINTS       = 42
    MIN_SPACE           = 43
    NORM_SPACE          = 44
    MAX_SPACE           = 45
    END_SPACE           = 46
    SUPERSCRIPT_X       = 47
    SUPERSCRIPT_Y       = 48
    SUBSCRIPT_X         = 49
    SUBSCRIPT_Y         = 50
    UNDERLINE_POSITION  = 51
    UNDERLINE_THICKNESS = 52
    STRIKEOUT_ASCENT    = 53
    STRIKEOUT_DESCENT   = 54
    ITALIC_ANGLE        = 55
    X_HEIGHT            = 56
    QUAD_WIDTH          = 57
    WEIGHT              = 58
    POINT_SIZE          = 59
    RESOLUTION          = 60
    COPYRIGHT           = 61
    NOTICE              = 62
    FONT_NAME           = 63
    FAMILY_NAME         = 64
    FULL_NAME           = 65
    CAP_HEIGHT          = 66
    WM_CLASS            = 67
    WM_TRANSIENT_FOR    = 68



* Sun 15 Feb 2015 05:42:47 PM JST
class Colormap(_IntEnum):
    _None = 0


class Mapping(_IntEnum):
    Modifier = 0
    Keyboard = 1
    Pointer  = 2



* Sun 15 Feb 2015 05:44:08 PM JST
class BackPixmap(_IntEnum):
    _None          = 0
    ParentRelative = 1



* Sun 15 Feb 2015 05:44:18 PM JST
class Gravity(_IntEnum):
    BitForget = 0
    WinUnmap  = 0
    NorthWest = 1
    North     = 2
    NorthEast = 3
    West      = 4
    Center    = 5
    East      = 6
    SouthWest = 7
    South     = 8
    SouthEast = 9
    Static    = 10



* Sun 15 Feb 2015 05:44:24 PM JST
class MapState(_IntEnum):
    Unmapped   = 0
    Unviewable = 1
    Viewable   = 2



* Sun 15 Feb 2015 05:44:38 PM JST
class StackMode(_IntEnum):
    Above    = 0
    Below    = 1
    TopIf    = 2
    BottomIf = 3
    Opposite = 4



* Sun 15 Feb 2015 05:45:23 PM JST
class GetPropertyType(_IntEnum):
    Any = 0


class SendEventDest(_IntEnum):
    PointerWindow = 0
    ItemFocus     = 1


class GrabMode(_IntEnum):
    Sync  = 0
    Async = 1


class GrabStatus(_IntEnum):
    Success        = 0
    AlreadyGrabbed = 1
    InvalidTime    = 2
    NotViewable    = 3
    Frozen         = 4

* Sun 15 Feb 2015 05:45:51 PM JST
class ButtonIndex(_IntEnum):
    Any = 0
    _1  = 1
    _2  = 2
    _3  = 3
    _4  = 4
    _5  = 5


class NamedButtonIndex(_IntEnum):
    r"""SUMMARY
    """
    Any       = 0
    Left      = 1
    Middle    = 2
    Right     = 3
    WheelUp   = 4
    WheelDown = 5

* Sun 15 Feb 2015 05:46:11 PM JST
class Cursor(_IntEnum):
    _None = 0


class ButtonIndex(_IntEnum):
    Any = 0
    _1  = 1
    _2  = 2
    _3  = 3
    _4  = 4
    _5  = 5


class NamedButtonIndex(_IntEnum):
    r"""SUMMARY
    """
    Any       = 0
    Left      = 1
    Middle    = 2
    Right     = 3
    WheelUp   = 4
    WheelDown = 5


class ModMask(_IntEnum):
    Shift   = 1
    Lock    = 2
    Control = 4
    _1      = 8
    _2      = 16
    _3      = 32
    _4      = 64
    _5      = 128
    Any     = 32768

* Sun 15 Feb 2015 05:46:24 PM JST
class KeyButMask(_IntEnum):
    Shift   = 1
    Lock    = 2
    Control = 4
    Mod1    = 8
    Mod2    = 16
    Mod3    = 32
    Mod4    = 64
    Mod5    = 128
    Button1 = 256
    Button2 = 512
    Button3 = 1024
    Button4 = 2048
    Button5 = 4096

* Sun 15 Feb 2015 05:47:14 PM JST
wheelup
* Sun 15 Feb 2015 05:48:59 PM JST
class ButtonMask(_IntEnum):
    _1  = 256
    _2  = 512
    _3  = 1024
    _4  = 2048
    _5  = 4096
    Any = 32768


class NamedButtonMask(_IntEnum):
    r"""SUMMARY
    """
    Left      = 256
    Middle    = 512
    Right     = 1024
    WheelUp   = 2048
    WheelDown = 4096
    Any       = 32768

* Sun 15 Feb 2015 05:49:11 PM JST
class NamedModifierMask(_IntEnum):
    r"""SUMMARY
    """
    Null      = 0
    Shift     = 1
    Lock      = 1 << 1
    Control   = 1 << 2
    Alt       = 1 << 3
    Numlock   = 1 << 4
    Hiper     = 1 << 5
    Super     = 1 << 6
    Mod5      = 1 << 7
    Left      = 1 << 8
    Middle    = 1 << 9
    Right     = 1 << 10
    WheelUp   = 1 << 11
    WheelDown = 1 << 12
    Any       = 1 << 15 # 32768

* Sun 15 Feb 2015 05:49:35 PM JST
class Grab(_IntEnum):
    Any = 0

* Sun 15 Feb 2015 05:49:47 PM JST
class Allow(_IntEnum):
    AsyncPointer   = 0
    SyncPointer    = 1
    ReplayPointer  = 2
    AsyncKeyboard  = 3
    SyncKeyboard   = 4
    ReplayKeyboard = 5
    AsyncBoth      = 6
    SyncBoth       = 7

* Sun 15 Feb 2015 05:50:02 PM JST
class InputFocus(_IntEnum):
    _None          = 0
    PointerRoot    = 1
    Parent         = 2
    FollowKeyboard = 3

* Sun 15 Feb 2015 05:50:08 PM JST
class FontDraw(_IntEnum):
    LeftToRight = 0
    RightToLeft = 1



* Sun 15 Feb 2015 05:53:26 PM JST
class GX(_IntEnum):
    clear        = 0
    _and         = 1
    andReverse   = 2
    copy         = 3
    andInverted  = 4
    noop         = 5
    xor          = 6
    _or          = 7
    nor          = 8
    equiv        = 9
    invert       = 10
    orReverse    = 11
    copyInverted = 12
    orInverted   = 13
    nand         = 14
    set          = 15


class LineStyle(_IntEnum):
    Solid      = 0
    OnOffDash  = 1
    DoubleDash = 2


class CapStyle(_IntEnum):
    NotLast    = 0
    Butt       = 1
    Round      = 2
    Projecting = 3


class JoinStyle(_IntEnum):
    Miter = 0
    Round = 1
    Bevel = 2


class FillStyle(_IntEnum):
    Solid          = 0
    Tiled          = 1
    Stippled       = 2
    OpaqueStippled = 3


class FillRule(_IntEnum):
    EvenOdd = 0
    Winding = 1


class SubwindowMode(_IntEnum):
    ClipByChildren   = 0
    IncludeInferiors = 1


class ArcMode(_IntEnum):
    Chord    = 0
    PieSlice = 1


class ClipOrdering(_IntEnum):
    Unsorted = 0
    YSorted  = 1
    YXSorted = 2
    YXBanded = 3


class CoordMode(_IntEnum):
    Origin   = 0
    Previous = 1


class PolyShape(_IntEnum):
    Complex   = 0
    Nonconvex = 1
    Convex    = 2


class ImageFormat(_IntEnum):
    XYBitmap = 0
    XYPixmap = 1
    ZPixmap  = 2


class ColormapAlloc(_IntEnum):
    _None = 0
    All   = 1


class ColorFlag(_IntEnum):
    Red   = 1
    Green = 2
    Blue  = 4


class Pixmap(_IntEnum):
    _None = 0


class Font(_IntEnum):
    _None = 0


class QueryShapeOf(_IntEnum):
    LargestCursor  = 0
    FastestTile    = 1
    FastestStipple = 2

* Sun 15 Feb 2015 06:34:15 PM JST
/* It's a good idea to paste this and other long code examples
   into a text editor for easier reading */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/time.h>
#include <xcb/xcb.h>
#include <X11/Xlib.h>
#define NUM_NAMES 500
/*
    NOTE: For concision, we're going to be cheesy and use arrays where real code
    would use points and memory allocation.s
*/
#ifndef __GNUC__
char* strdup(const char* s) {
    int n = strlen(s) + 1;

    char *dup = malloc(n);

    if(dup) 
        strcpy(dup, s);

    return dup;
}
#endif

/* 
    return interval of time (uses time.h) 
*/
double
get_time (void) {
    struct timeval timev;           
    gettimeofday(&timev, NULL);
    return (double)timev.tv_sec + (((double)timev.tv_usec) / 1000000);
}

/*

*/
void
useXlib (char **names,
         Display *display ) {

    Atom atoms[NUM_NAMES];
    for (int i = 0; i < NUM_NAMES; ++i) {
        atoms[i] = XInternAtom(display, names[i], 0);
    }
}

/*
Request all atoms at once.
*/
void
useXlibProperly (char **names,
         Display *display ) {

    Atom atoms[NUM_NAMES];
    if(!XInternAtoms(display, names, NUM_NAMES, 0, atoms))
        fprintf(stderr, "XInternAtoms failed\n");
}

/*

*/
void
useXCBPoorly (char **names,
             xcb_connection_t *connection ) {
    xcb_atom_t              atoms[NUM_NAMES];
    // in this bad use of xcb, we use the cookie immediately after posting the request with xcb_intern_atom 
    for (int i = 0; i < NUM_NAMES; ++i) {
        /* make request */
        xcb_intern_atom_cookie_t cookie = xcb_intern_atom (connection, 
                                                            0, 
                                                            strlen(names[i]),
                                                            names[i] );
        /* get response */
        xcb_intern_atom_reply_t *reply = xcb_intern_atom_reply (connection, 
                                                                cookie, 
                                                                NULL ); // normally a pointer to receive error, but we'll just ignore error handling 
        if (reply) {
            atoms[i] = reply->atom;
            free (reply);
        }
    }
    // now we have our atoms (replies), but this is just a demo, so we do nothing with them
}

/*
*/
void
useXCBProperly (char **names,
                xcb_connection_t *connection ) {
    xcb_atom_t               atoms[NUM_NAMES];
    xcb_intern_atom_cookie_t    cookies[NUM_NAMES];
    // in this good example, we make all our requests before checking for
    // replies because it's best to queue requests when we have many at once    
    /* make requests */
    for (int i = 0; i < NUM_NAMES; ++i) {
        cookies[i] = xcb_intern_atom (connection, 
                                     0, 
                                     strlen (names[i]), 
                                     names[i] );
    }
    /* get responses */
    for (int i = 0; i < NUM_NAMES; ++i) {
        xcb_intern_atom_reply_t *reply = xcb_intern_atom_reply (connection, 
                                                                cookies[i], 
                                                                NULL ); // normally a pointer to receive errors, but we'll just ignore error handling
        if (reply) {
            atoms[i] = reply->atom;
            free (reply);
        }
    }
    // now we have our atoms (replies), but this is just a demo, so we do nothing with them
}

int
main () {
    /* setup names for tests */
    char (**names) = malloc(NUM_NAMES*sizeof(*names));
    // init names to "NAME0", "NAME1", "NAME2" ... and so on
    for (int i = 0; i < NUM_NAMES; ++i) {
        char buf[100];
        sprintf (buf, "NAME%d", i);
        names[i] = strdup (buf);
    }

    /* do tests */
    double start, XlibTime, XlibGoodTime, XCBBadTime, XCBGoodTime;

    /* test Xlib */
    Display *display = XOpenDisplay (NULL);
    start = get_time ();
    useXlib (names, display);
    XlibTime = get_time () - start;
    start = get_time ();
    useXlibProperly (names, display);
    XlibGoodTime = get_time () - start;
    XCloseDisplay (display);

    /* test XCB */
    xcb_connection_t *connection = xcb_connect (NULL, NULL);
    start = get_time ();
    useXCBPoorly (names, connection);
    XCBBadTime = get_time () - start;   
    start = get_time ();
    useXCBProperly (names, connection);
    XCBGoodTime = get_time () - start;
    xcb_disconnect (connection);

    /* report times */
    printf ("Bad Xlib time : %f\n", XlibTime);
    printf ("Good Xlib time : %f\n", XlibGoodTime);
    printf ("Bad xcb time : %f\n", XCBBadTime);
    printf ("Good xcb time : %f\n", XCBGoodTime);
    printf ("ratio of good xcb time to bad xcb time: %f\n", XCBGoodTime / XCBBadTime);
    printf ("ratio of Xlib time to good xcb time: %f\n", XlibTime / XCBGoodTime);
    printf ("ratio of good Xlib time to bad Xlib time: %f\n", XlibGoodTime / XlibTime);

    return 0;
}    
* Sun 15 Feb 2015 06:36:34 PM JST
useXlib
* Sun 15 Feb 2015 06:39:58 PM JST
import 
* Sun 15 Feb 2015 06:39:59 PM JST
xcb import 
* Sun 15 Feb 2015 06:39:59 PM JST
from xcb import 
* Sun 15 Feb 2015 06:40:33 PM JST
'BITMAP' * 500
* Sun 15 Feb 2015 06:40:50 PM JST
('BITMAP', ) * 500
* Sun 15 Feb 2015 06:41:20 PM JST
cookies
* Sun 15 Feb 2015 06:41:30 PM JST
lis
* Sun 15 Feb 2015 06:42:16 PM JST
cooki
* Sun 15 Feb 2015 06:43:16 PM JST
aotm
* Sun 15 Feb 2015 06:46:26 PM JST
cookies = []
append = cookies.append

* Sun 15 Feb 2015 06:46:34 PM JST
atoms = []
append2 = atoms.append

* Sun 15 Feb 2015 06:48:01 PM JST
    cookies = []
    append = cookies.append
    atoms = []
    append2 = atoms.append

* Sun 15 Feb 2015 06:48:14 PM JST
    for atom in atomnames:
        append(conn.core.InternAtom(1, len(atom), atom))

    for cookie in cookies:
        rep = cookie.reply()
        append2(rep.atom)
    return atoms

* Sun 15 Feb 2015 06:48:37 PM JST
append(
* Sun 15 Feb 2015 06:48:52 PM JST
append2(rep.atom)
* Sun 15 Feb 2015 06:50:54 PM JST
from Xlib.display import Display
from Xlib.protocol.request import InternAtom

d = Display()

* Sun 15 Feb 2015 06:52:08 PM JST
    atoms = []
    append2 = atoms.append
    for atom in atomnames:
        cookie = conn.core.InternAtom(1, len(atom), atom)
        append2(cookie.reply().atom)
    return atoms

* Sun 15 Feb 2015 06:52:15 PM JST
core.
* Sun 15 Feb 2015 06:52:15 PM JST
conn.core.
* Sun 15 Feb 2015 06:52:30 PM JST
atom), 
* Sun 15 Feb 2015 06:52:31 PM JST
len(atom), 
* Sun 15 Feb 2015 06:52:37 PM JST
InternAtom(display, only_if_exists=1, name=atom)
* Sun 15 Feb 2015 06:52:40 PM JST

* Sun 15 Feb 2015 06:52:40 PM JST

* Sun 15 Feb 2015 06:52:40 PM JST
        cookie = 

* Sun 15 Feb 2015 06:53:15 PM JST
In [47]: timeit tes1()
100 loops, best of 3: 11.4 ms per loop

In [48]: timeit tes2()
10 loops, best of 3: 45.3 ms per loop

In [49]: from Xlib.display import Display
from Xlib.protocol.request import InternAtom

d = Display()


In [50]: 
In [51]: 
In [51]: 
In [52]: 
In [52]: InternAtom?
Type:       classobj
String Form:Xlib.protocol.request.InternAtom
File:       /usr/lib/pymodules/python2.7/Xlib/protocol/request.py
Docstring:  <no docstring>
Constructor information:
 Definition:InternAtom(self, display, defer=0, *args, **keys)

In [53]: InternAtom(d.display, only_if_exists=1, 'BITMAP')
  File "<ipython-input-53-6fd3894ea770>", line 1
    InternAtom(d.display, only_if_exists=1, 'BITMAP')
SyntaxError: non-keyword arg after keyword arg


In [54]: InternAtom(d.display, only_if_exists=1, name='BITMAP')
Out[54]: <Xlib.protocol.request.InternAtom serial = 8, data = {'sequence_number': 8, 'atom': 5}, error = None>

In [55]: InternAtom(d.display, only_if_exists=1, name='BITMAP').atom
Out[55]: 5

In [56]: 
In [57]: timeit tes3()
10 loops, best of 3: 85.2 ms per loop

In [58]: 
* Mon 16 Feb 2015 02:00:19 AM JST
.check()
* Mon 16 Feb 2015 02:02:53 AM JST
try:
   ....:     c.core.ConfigureWindowChecked(1111, 1, [10]).check()
   ....: except Exception as e:
   ....:     e
* Mon 16 Feb 2015 02:03:16 AM JST
try:
   ....:     c.core.ConfigureWindowChecked(1111, 1, [10]).check()
   ....: except Exception as e:
   ....:     e

* Mon 16 Feb 2015 02:03:22 AM JST
....:
* Mon 16 Feb 2015 02:03:23 AM JST
....: 
* Mon 16 Feb 2015 02:03:25 AM JST
....:
* Mon 16 Feb 2015 02:03:29 AM JST
try:
     c.core.ConfigureWindowChecked(1111, 1, [10]).check()
except Exception as e:
     e

* Mon 16 Feb 2015 02:22:21 AM JST
Checked
* Mon 16 Feb 2015 02:25:10 AM JST
c.core.ConfigureWindowChecked(1111, 1, [10]).check()
* Mon 16 Feb 2015 02:25:14 AM JST
check()
* Mon 16 Feb 2015 08:26:10 AM JST
import
* Mon 16 Feb 2015 08:26:23 AM JST
D 
* Mon 16 Feb 2015 08:28:47 AM JST
ooxcb.protocol.xproto.Window(c, )
* Mon 16 Feb 2015 08:30:34 AM JST
create
* Mon 16 Feb 2015 08:30:57 AM JST
create
* Mon 16 Feb 2015 08:31:10 AM JST
create
* Mon 16 Feb 2015 08:32:57 AM JST
root.create(c, root)
* Mon 16 Feb 2015 08:33:13 AM JST
wid
* Mon 16 Feb 2015 08:34:47 AM JST
background_pixel=white
* Mon 16 Feb 2015 08:34:50 AM JST
root.create(c, root.xid, 0, 0, 0, 0, )
* Mon 16 Feb 2015 08:36:58 AM JST
back_pixel
* Mon 16 Feb 2015 08:39:58 AM JST
w.configure_checked(x=100)
* Mon 16 Feb 2015 08:41:11 AM JST
def tes5():
   .....:     for _ in range(500):
   .....:         w.configure(x=100)
   .....:     c.flush()
* Mon 16 Feb 2015 08:41:21 AM JST
.....:     
* Mon 16 Feb 2015 08:41:21 AM JST
.....:     
* Mon 16 Feb 2015 08:41:22 AM JST
.....:     
* Mon 16 Feb 2015 08:41:48 AM JST
def tes5():
   for _ in range(500):
       w.configure(x=100)
   c.flush()
* Mon 16 Feb 2015 08:43:11 AM JST
def tes6():
    coo = []
    append = coo.append
    for _ in range(500): 
        append(w.configure_checked(x=100))
    for ck in coo:
        ck.check()
* Mon 16 Feb 2015 08:51:11 AM JST
get_property
* Mon 16 Feb 2015 08:52:33 AM JST
InternAtom
* Mon 16 Feb 2015 08:52:33 AM JST
core.InternAtom
* Mon 16 Feb 2015 08:52:34 AM JST
c.core.InternAtom
* Mon 16 Feb 2015 08:53:49 AM JST
_NET_CLIENT_LIST'
* Mon 16 Feb 2015 08:55:20 AM JST
atom
* Mon 16 Feb 2015 08:55:26 AM JST
atom
* Mon 16 Feb 2015 08:56:16 AM JST
InternAtom?
* Mon 16 Feb 2015 08:56:17 AM JST
core
* Mon 16 Feb 2015 08:57:46 AM JST
c.core.intern_atom('_NET_CLIENT_LIST').reply().atom
* Mon 16 Feb 2015 09:04:40 AM JST
atoms
* Mon 16 Feb 2015 09:04:40 AM JST
c.atoms
* Mon 16 Feb 2015 01:43:46 PM JST
wm/
* Mon 16 Feb 2015 02:02:03 PM JST
None
* Mon 16 Feb 2015 02:02:06 PM JST
None
* Mon 16 Feb 2015 02:07:12 PM JST
Rect
* Mon 16 Feb 2015 02:21:01 PM JST
 pywm-0.1-1-a4-1.tar.bz2 
* Mon 16 Feb 2015 02:47:33 PM JST
xcffib
* Mon 16 Feb 2015 04:45:05 PM JST
VerticalTile
* Mon 16 Feb 2015 05:13:48 PM JST
Rect
* Mon 16 Feb 2015 05:40:26 PM JST
xobj/
* Mon 16 Feb 2015 05:40:26 PM JST
wxcb/xobj/
* Mon 16 Feb 2015 05:41:10 PM JST
coordinate
* Mon 16 Feb 2015 05:41:12 PM JST
dimension
* Mon 16 Feb 2015 05:43:41 PM JST
coordinate.
* Mon 16 Feb 2015 05:43:43 PM JST
coordinate.
* Mon 16 Feb 2015 05:44:12 PM JST
side
* Mon 16 Feb 2015 05:44:12 PM JST
import side
* Mon 16 Feb 2015 05:44:13 PM JST
form 
* Mon 16 Feb 2015 05:44:27 PM JST
Side
* Mon 16 Feb 2015 05:44:36 PM JST
side.
* Mon 16 Feb 2015 05:44:38 PM JST
side.
* Mon 16 Feb 2015 05:45:21 PM JST
import point

* Mon 16 Feb 2015 05:46:01 PM JST
point.
* Mon 16 Feb 2015 05:46:07 PM JST
point.
* Mon 16 Feb 2015 05:46:11 PM JST
point.
* Mon 16 Feb 2015 05:46:15 PM JST
point.
* Mon 16 Feb 2015 05:46:20 PM JST
point.
* Mon 16 Feb 2015 05:46:25 PM JST
point.
* Mon 16 Feb 2015 05:46:32 PM JST
point.
* Mon 16 Feb 2015 05:46:37 PM JST
point.
* Mon 16 Feb 2015 05:46:43 PM JST
point.
* Mon 16 Feb 2015 05:46:47 PM JST
point.
* Mon 16 Feb 2015 05:47:01 PM JST
point.
* Mon 16 Feb 2015 05:48:37 PM JST
Dimension
* Mon 16 Feb 2015 05:58:28 PM JST
import rectangle
* Mon 16 Feb 2015 05:58:31 PM JST
rectangle.Rectangle(1,0,1,1)
* Mon 16 Feb 2015 05:58:40 PM JST
import rectangle
rectangle.Rectangle(1,0,1,1)

* Mon 16 Feb 2015 06:49:44 PM JST
rectangle.Rectangle(1,0,1,1)
* Mon 16 Feb 2015 06:52:42 PM JST
pygame
* Mon 16 Feb 2015 06:52:42 PM JST
from pygame
* Mon 16 Feb 2015 06:53:49 PM JST
pygame.Rect((0,0), (0,0))
* Mon 16 Feb 2015 06:54:13 PM JST
Rect
* Mon 16 Feb 2015 06:54:13 PM JST
wm.Rect
* Mon 16 Feb 2015 10:12:00 PM JST
0)
* Mon 16 Feb 2015 10:12:00 PM JST
0,0)
* Mon 16 Feb 2015 10:12:01 PM JST
Rect(0,0)
* Mon 16 Feb 2015 10:12:01 PM JST
wx.Rect(0,0)
* Mon 16 Feb 2015 10:19:44 PM JST
__init__
* Mon 16 Feb 2015 10:21:20 PM JST
def wrap_exceptions(fun):
    r"""SUMMARY
    
    wrap_exceptions(fun)
    
    @Arguments:
    - `fun`:
    
    @Return:

    @Error:
    """
    @wraps(fun)
    def wrapper(self, *args, **kwargs):
        r"""SUMMARY
        
        wrapper(self, *args, **kwargs)
        
        @Arguments:
        - `self`:
        - `args`:
        - `kwargs`:
        
        @Return:

        @Error:
        """
        try:
            return fun(self, *args, **kwargs)
        except psutil.NoSuchProcess:
            raise _err.NoSuchProcess(self.pid, self.name)
        except psutil.AccessDenied:
            raise _err.AccessDenied(self.pid, self.name)
        raise
    return wrapper

* Mon 16 Feb 2015 10:21:47 PM JST
NoApplicableMethods
* Mon 16 Feb 2015 10:23:05 PM JST
try:
    from functools import wraps
except ImportError:
    def wraps(original):
        def inner(fn):
            for attribute in ['__module__', '__name__', '__doc__']:
                setattr(fn, attribute, getattr(original, attribute))
            for attribute in ['__dict__']:
                if hasattr(fn, attribute):
                    getattr(fn, attribute).update(getattr(original, attribute))
                else:
                    setattr(fn, attribute,
                            getattr(original, attribute).copy())
            return fn
        return inner

* Mon 16 Feb 2015 10:23:13 PM JST
from functools import wraps
* Mon 16 Feb 2015 10:23:30 PM JST
wrap_exceptions
* Mon 16 Feb 2015 10:24:22 PM JST
        Rectangle(Rectangle)
        Rectangle(Point, Dimension)
        Rectangle(Point, int, int)
        Rectangle(int, int, Dimention)
        Rectangle(Dimension, x=10, y=10)
        Rectangle(int, int, int, int)

* Mon 16 Feb 2015 10:39:03 PM JST
kwargs
* Mon 16 Feb 2015 10:39:08 PM JST
kwargs
* Mon 16 Feb 2015 10:39:14 PM JST
kwargs
* Mon 16 Feb 2015 10:39:35 PM JST
kwargs
* Mon 16 Feb 2015 10:40:03 PM JST
10
* Mon 16 Feb 2015 10:40:45 PM JST
 => Rectangle(x=10, y=20)
* Mon 16 Feb 2015 10:42:13 PM JST
Dimension
* Mon 16 Feb 2015 10:42:37 PM JST
0, 
* Mon 16 Feb 2015 10:42:37 PM JST
0,0, 
* Mon 16 Feb 2015 10:43:48 PM JST
arg.get_x(), arg.get_y()
* Mon 16 Feb 2015 10:43:56 PM JST
arg.get_width(), arg.get_height()
* Mon 16 Feb 2015 10:44:07 PM JST

* Mon 16 Feb 2015 10:44:07 PM JST

* Mon 16 Feb 2015 10:44:07 PM JST
                width, height = arg.get_width(), arg.get_height()

* Mon 16 Feb 2015 10:44:08 PM JST

* Mon 16 Feb 2015 10:44:08 PM JST

* Mon 16 Feb 2015 10:44:09 PM JST
                x, y = arg.get_x(), arg.get_y()

* Mon 16 Feb 2015 10:44:21 PM JST
arg
* Mon 16 Feb 2015 10:44:24 PM JST
arg
* Mon 16 Feb 2015 10:44:27 PM JST
arg
* Mon 16 Feb 2015 10:44:33 PM JST
arg
* Mon 16 Feb 2015 10:46:35 PM JST
@__init__.when('len(args) == 3 and isinstance(args[0], Point)')
* Mon 16 Feb 2015 10:46:52 PM JST
arg
* Mon 16 Feb 2015 10:48:45 PM JST
0]
* Mon 16 Feb 2015 10:48:46 PM JST
po
* Mon 16 Feb 2015 10:48:47 PM JST
args[po
* Mon 16 Feb 2015 10:48:52 PM JST
0]
* Mon 16 Feb 2015 10:48:52 PM JST
args[0]
* Mon 16 Feb 2015 10:49:21 PM JST

* Mon 16 Feb 2015 10:49:21 PM JST

* Mon 16 Feb 2015 10:49:21 PM JST
        self.__init__()

* Mon 16 Feb 2015 10:52:14 PM JST
import rectangle
rectangle.Rectangle(0,0,0,0)

* Mon 16 Feb 2015 10:52:22 PM JST
rectangle.Rectangle(0,0,0,0)
* Mon 16 Feb 2015 10:52:36 PM JST
Dimension
* Mon 16 Feb 2015 10:52:39 PM JST
0,
* Mon 16 Feb 2015 10:52:40 PM JST
0,0,
* Mon 16 Feb 2015 10:54:52 PM JST
dimension
* Mon 16 Feb 2015 10:54:55 PM JST
dimension
* Mon 16 Feb 2015 10:54:58 PM JST
dimension
* Mon 16 Feb 2015 10:55:00 PM JST
                      
* Mon 16 Feb 2015 11:01:02 PM JST
rectangle.Rectangle(0,0,0,0)
* Mon 16 Feb 2015 11:01:12 PM JST
rectangle.Rectangle(-10,0
* Mon 16 Feb 2015 11:02:09 PM JST
return 
* Mon 16 Feb 2015 11:02:56 PM JST
dispatch
* Mon 16 Feb 2015 11:03:54 PM JST
new
* Mon 16 Feb 2015 11:04:54 PM JST
import rectangle
rectangle.Rectangle(0,0,0,0)

* Mon 16 Feb 2015 11:05:05 PM JST
rectangle.Rectangle(0,0,0,0)
* Mon 16 Feb 2015 11:05:53 PM JST
UserInt
* Mon 16 Feb 2015 11:08:14 PM JST
point
* Mon 16 Feb 2015 11:09:01 PM JST
height = 
* Mon 16 Feb 2015 11:09:05 PM JST
, self.height + other.get_height()
* Mon 16 Feb 2015 11:10:45 PM JST
__add__
* Mon 16 Feb 2015 11:10:52 PM JST
__class__(
* Mon 16 Feb 2015 11:10:52 PM JST
self.__class__(
* Mon 16 Feb 2015 11:11:01 PM JST
__add__
* Mon 16 Feb 2015 11:11:07 PM JST
__add__int
* Mon 16 Feb 2015 11:11:09 PM JST
__add__
* Mon 16 Feb 2015 11:11:19 PM JST
__add_
* Mon 16 Feb 2015 11:11:29 PM JST
__class__(
* Mon 16 Feb 2015 11:11:29 PM JST
self.__class__(
* Mon 16 Feb 2015 11:11:41 PM JST
__add__
* Mon 16 Feb 2015 11:11:48 PM JST
__add_
* Mon 16 Feb 2015 11:11:54 PM JST
__class__(
* Mon 16 Feb 2015 11:11:55 PM JST
self.__class__(
* Mon 16 Feb 2015 11:13:50 PM JST
            
* Mon 16 Feb 2015 11:15:09 PM JST

* Mon 16 Feb 2015 11:15:09 PM JST

* Mon 16 Feb 2015 11:15:09 PM JST
        newx, newy = self.x + other, self.y + other

* Mon 16 Feb 2015 11:15:09 PM JST
        newx, newy = self.x + other, self.y + other

* Mon 16 Feb 2015 11:15:09 PM JST
        newx, newy = self.x + other, self.y + other
        width, height = self.width + other, self.height + other

* Mon 16 Feb 2015 11:15:12 PM JST
newx, newy, width, height
* Mon 16 Feb 2015 11:15:54 PM JST
other.get_x()
* Mon 16 Feb 2015 11:16:02 PM JST
other.get_y()
* Mon 16 Feb 2015 11:16:08 PM JST
self.width, self.height
* Mon 16 Feb 2015 11:16:15 PM JST

* Mon 16 Feb 2015 11:16:15 PM JST

* Mon 16 Feb 2015 11:16:15 PM JST
        newx, newy = self.x + other.get_x(), self.y + other.get_y()

* Mon 16 Feb 2015 11:16:32 PM JST
x
* Mon 16 Feb 2015 11:16:35 PM JST
self
* Mon 16 Feb 2015 11:16:36 PM JST
y
* Mon 16 Feb 2015 11:16:36 PM JST
self.y
* Mon 16 Feb 2015 11:16:43 PM JST
other.get_width
* Mon 16 Feb 2015 11:16:48 PM JST
other.get_height()
* Mon 16 Feb 2015 11:16:52 PM JST

* Mon 16 Feb 2015 11:16:52 PM JST

* Mon 16 Feb 2015 11:16:52 PM JST
        width = self.width + other.get_width

* Mon 16 Feb 2015 11:16:52 PM JST
        width = self.width + other.get_width

* Mon 16 Feb 2015 11:16:52 PM JST
        width = self.width + other.get_width
        height = self.height + other.get_height()

* Mon 16 Feb 2015 11:29:03 PM JST
height
* Mon 16 Feb 2015 11:34:26 PM JST

* Mon 16 Feb 2015 11:34:26 PM JST

* Mon 16 Feb 2015 11:34:26 PM JST
    @dispatch.generic()

* Mon 16 Feb 2015 11:34:29 PM JST
pass
* Mon 16 Feb 2015 11:34:31 PM JST

* Mon 16 Feb 2015 11:34:32 PM JST

* Mon 16 Feb 2015 11:34:32 PM JST
    @_cast.when('isinstance(other, (int, ))')

* Mon 16 Feb 2015 11:34:48 PM JST
return (other, ) * 4
* Mon 16 Feb 2015 11:35:15 PM JST
return other.get_x(), other.get_y(), None, None
* Mon 16 Feb 2015 11:35:26 PM JST
isisntance(other, (Dimension, ))
* Mon 16 Feb 2015 11:35:38 PM JST
return None, None, other.get_width, other.get_height()
* Mon 16 Feb 2015 11:36:14 PM JST
isisntance(other, (self.__class__))
* Mon 16 Feb 2015 11:36:27 PM JST
        return (other.get_x(), other.get_y(),
                other.get_width(), other.get_height())

* Mon 16 Feb 2015 11:38:28 PM JST
return other, None, None,  None
* Mon 16 Feb 2015 11:38:47 PM JST
return 
* Mon 16 Feb 2015 11:38:49 PM JST
return None, other, None, None
* Mon 16 Feb 2015 11:39:04 PM JST
retur
* Mon 16 Feb 2015 11:39:06 PM JST
return None, None, other, None
* Mon 16 Feb 2015 11:39:25 PM JST
return None, None, None, other
* Mon 16 Feb 2015 11:44:45 PM JST
for va in xrange(0, 1): 
* Mon 16 Feb 2015 11:44:56 PM JST
self.
* Tue 17 Feb 2015 12:00:40 AM JST
rectangle.Point(0,0)
* Tue 17 Feb 2015 12:08:40 AM JST
self
* Tue 17 Feb 2015 12:10:54 AM JST
point
* Tue 17 Feb 2015 12:11:03 AM JST
self.location + other
* Tue 17 Feb 2015 12:12:06 AM JST
self.
* Tue 17 Feb 2015 12:13:44 AM JST
XCoordinate
* Tue 17 Feb 2015 12:15:10 AM JST
return self.__class__(self.x + other, self.y)
* Tue 17 Feb 2015 12:15:33 AM JST
        if isinstance(other, (XCoordinate, )):
            return self.__class__(self.x + other, self.y)
        if isinstance(other, (YCoordinate, )):
            return self.__class__(self.x, self.y + other)

* Tue 17 Feb 2015 12:17:16 AM JST
1]
* Tue 17 Feb 2015 12:17:17 AM JST
other[1]
* Tue 17 Feb 2015 12:17:38 AM JST
        point = self + other
        self.x = point.get_x()
        self.y = point.get_y()
        return self

* Tue 17 Feb 2015 12:18:19 AM JST
import rectangle

* Tue 17 Feb 2015 12:18:52 AM JST
rectangle.Point()
* Tue 17 Feb 2015 12:19:08 AM JST
rectangle.XCoordinate(1)
* Tue 17 Feb 2015 12:19:45 AM JST
        if isinstance(other, (XCoordinate, )):
            return self.__class__(self.x + other, self.y)
        if isinstance(other, (YCoordinate, )):
            return self.__class__(self.x, self.y + other)

* Tue 17 Feb 2015 12:19:57 AM JST
XCoordinate
* Tue 17 Feb 2015 12:20:12 AM JST
YCoordinate
* Tue 17 Feb 2015 12:20:29 AM JST
        if isinstance(other, (Width, )):
            return self.__class__(self.width + other, self.height)
        if isinstance(other, (Height, )):
            return self.__class__(self.width, self.height + other)
        return self.__class__(self.width + other[0], self.height + other[1])

* Tue 17 Feb 2015 12:20:32 AM JST

* Tue 17 Feb 2015 12:20:32 AM JST

* Tue 17 Feb 2015 12:20:32 AM JST
        return self.__class__(self.width - other[0], self.height - other[1])

* Tue 17 Feb 2015 12:20:59 AM JST
        point = self + other
        self.x = point.get_x()
        self.y = point.get_y()
        return self

* Tue 17 Feb 2015 12:21:04 AM JST
point
* Tue 17 Feb 2015 12:21:09 AM JST
point
* Tue 17 Feb 2015 12:21:20 AM JST
point
* Tue 17 Feb 2015 12:21:34 AM JST
        size = self + other
        self.width = size.get_width()
        self.height = size.get_height()
        return self

* Tue 17 Feb 2015 12:23:22 AM JST
return 
* Tue 17 Feb 2015 12:23:58 AM JST
        return ((self.x == other[0]) and
                (self.y == other[1]) and
                (self.width == other[2]) and
                (self.height == other[3]))

* Tue 17 Feb 2015 12:24:28 AM JST

* Tue 17 Feb 2015 12:24:28 AM JST

* Tue 17 Feb 2015 12:24:28 AM JST
    @dispatch.generic()

* Tue 17 Feb 2015 12:25:30 AM JST
XCoordinate, YCoordinate
* Tue 17 Feb 2015 12:25:39 AM JST
Width, Height
* Tue 17 Feb 2015 12:26:34 AM JST
import
* Tue 17 Feb 2015 12:27:00 AM JST
from rectangle import *
* Tue 17 Feb 2015 12:27:17 AM JST
XCoordinate, YCoordinate
* Tue 17 Feb 2015 12:27:23 AM JST
Height, Width
* Tue 17 Feb 2015 12:27:28 AM JST
Dimension
* Tue 17 Feb 2015 12:27:34 AM JST
Point
* Tue 17 Feb 2015 12:27:38 AM JST
Rectangle
* Tue 17 Feb 2015 12:28:12 AM JST
from rectangle import *
* Tue 17 Feb 2015 12:29:47 AM JST
Width
* Tue 17 Feb 2015 12:30:13 AM JST
        if isinstance(other, (tuple, list)) and len(other) == 4:
            return self.__class__(self.x + other[0], self.y + other[1],
                                  self.width + other[2], self.height + other[3])
        if isinstance(other, (self.__class__, )):
            return self + other.get_bounds()
        if isinstance(other, (Point, XCoordinate, YCoordinate)):
            return self.__class__(self.location + other, self.size)
        if isinstance(other, (Dimension, Width, Height)):
            return self.__class__(self.location, self.size + other)
        raise TypeError()

* Tue 17 Feb 2015 12:31:44 AM JST
        rect = self + other
        self.set_bounds(rect.get_bounds())
        return self

* Tue 17 Feb 2015 12:36:14 AM JST
        if isinstance(other, (XCoordinate, )):
            return self.__class__(self.x - other, self.y)
        if isinstance(other, (YCoordinate, )):
            return self.__class__(self.x, self.y - other)
        return self.__class__(self.x - other[0], self.y - other[1])

* Tue 17 Feb 2015 12:36:22 AM JST

* Tue 17 Feb 2015 12:36:22 AM JST

* Tue 17 Feb 2015 12:36:22 AM JST
        return 

* Tue 17 Feb 2015 12:36:45 AM JST
        point = self - other
        self.x = point.get_x()
        self.y = point.get_y()
        return self

* Tue 17 Feb 2015 12:37:10 AM JST
return 
* Tue 17 Feb 2015 12:38:06 AM JST
        if isinstance(other, (XCoordinate, )):
            return self.__class__(self.x * other, self.y)
        if isinstance(other, (YCoordinate, )):
            return self.__class__(self.x, self.y * other)
        return self.__class__(self.x * other[0], self.y * other[1])

* Tue 17 Feb 2015 12:38:46 AM JST
        point = self * other
        self.x = point.get_x()
        self.y = point.get_y()
        return self

* Tue 17 Feb 2015 12:39:18 AM JST
from  rectangle import *
* Tue 17 Feb 2015 12:40:13 AM JST
Rectangle()
* Tue 17 Feb 2015 12:40:47 AM JST
Point(2, 2)
* Tue 17 Feb 2015 12:40:53 AM JST
Point(2, 2)
* Tue 17 Feb 2015 12:45:17 AM JST
inde
* Tue 17 Feb 2015 12:46:07 AM JST
self.get()[index].set(0)
* Tue 17 Feb 2015 12:50:45 AM JST
get_
* Tue 17 Feb 2015 12:50:49 AM JST
get_
* Tue 17 Feb 2015 12:50:54 AM JST
get_
* Tue 17 Feb 2015 12:50:56 AM JST
get_
* Tue 17 Feb 2015 12:51:42 AM JST
int(
* Tue 17 Feb 2015 12:51:45 AM JST
int(
* Tue 17 Feb 2015 12:51:50 AM JST
int(
* Tue 17 Feb 2015 12:51:54 AM JST
int(
* Tue 17 Feb 2015 12:52:22 AM JST
get_
* Tue 17 Feb 2015 12:52:26 AM JST
get_
* Tue 17 Feb 2015 12:59:59 AM JST

* Tue 17 Feb 2015 01:00:00 AM JST

* Tue 17 Feb 2015 01:00:00 AM JST
    @dispatch.generic()

* Tue 17 Feb 2015 01:00:21 AM JST

* Tue 17 Feb 2015 01:00:21 AM JST

* Tue 17 Feb 2015 01:00:21 AM JST
from peak.rules import dispatch

* Tue 17 Feb 2015 01:03:44 AM JST

* Tue 17 Feb 2015 01:03:45 AM JST

* Tue 17 Feb 2015 01:03:45 AM JST
        self.set((x, y))

* Tue 17 Feb 2015 01:06:51 AM JST
    def get_width(self):
        """function get_width

        returns Width
        """
        return self.width

    def set_width(self, width):
        """function set_width

        width:

        returns
        """
        self.width.set(width)


* Tue 17 Feb 2015 01:07:27 AM JST
width
* Tue 17 Feb 2015 01:07:39 AM JST
del 
* Tue 17 Feb 2015 01:08:13 AM JST

* Tue 17 Feb 2015 01:08:13 AM JST

* Tue 17 Feb 2015 01:08:13 AM JST
        self.set(*args, **kwargs)

* Tue 17 Feb 2015 01:11:53 AM JST
    def get(self):
        """function get

        @return: tuple(Width, Height)
        """
        return (self.width, self.height)


* Tue 17 Feb 2015 01:12:05 AM JST
    def get(self):
        """function get

        @return: tuple(Width, Height)
        """
        return (self.width, self.height)

    def set(self, size):
        """function set

        @return: None

        set(Dimension())
        set(width=100, height=100)
        set(100, height=100)
        set(height=100)
        set(100)
        set(100, 100)
        """
        if isinstance(size, (tuple, list, Dimension)):
            self.set_width(size[0])
            self.set_height(size[1])
        elif isinstance(size, (Width, )):
            self.set_width(size)
        elif isinstance(size, (Height, )):
            self.set_height(size)
        else:
            # TODO: (Atami) [2015/02/17]
            raise TypeError()


* Tue 17 Feb 2015 01:14:23 AM JST
from rectangle import *
* Tue 17 Feb 2015 01:15:16 AM JST
                
* Tue 17 Feb 2015 01:16:34 AM JST
    def __getitem__(self, index):
        return self.get()[index]

    def __setitem__(self, index, val):
        self[index].set(val)


* Tue 17 Feb 2015 01:16:45 AM JST
self.
* Tue 17 Feb 2015 01:25:50 AM JST
                                  
* Tue 17 Feb 2015 01:26:15 AM JST
            return self.__class__(
                self.location - other[0:2], self.size - other[2:4])

* Tue 17 Feb 2015 01:26:53 AM JST
        if isinstance(other, (tuple, list)) and len(other) == 4:
            return self.__class__(
                self.location + other[0:2], self.size + other[2:4])
        if isinstance(other, (self.__class__, )):
            return self + other.get_bounds()
        if isinstance(other, (Point, XCoordinate, YCoordinate)):
            return self.__class__(self.location + other, self.size)
        if isinstance(other, (Dimension, Width, Height)):
            return self.__class__(self.location, self.size + other)
        raise TypeError()

* Tue 17 Feb 2015 01:27:26 AM JST
    def __isub__(self, other):
        rect = self - other
        self.set_bounds(rect.get_bounds())
        return self

* Tue 17 Feb 2015 01:27:56 AM JST
        if isinstance(other, (tuple, list)) and len(other) == 4:
            return self.__class__(
                self.location * other[0:2], self.size * other[2:4])
        if isinstance(other, (self.__class__, )):
            return self * other.get_bounds()
        if isinstance(other, (Point, XCoordinate, YCoordinate)):
            return self.__class__(self.location * other, self.size)
        if isinstance(other, (Dimension, Width, Height)):
            return self.__class__(self.location, self.size * other)
        raise TypeError()

* Tue 17 Feb 2015 01:28:29 AM JST
    def __imul__(self, other):
        rect = self * other
        self.set_bounds(rect.get_bounds())
        return self


* Tue 17 Feb 2015 01:34:32 AM JST
# recursive call
* Tue 17 Feb 2015 01:36:06 AM JST
        if isinstance(other, (Width, )):
            return self.__class__(self.width + other, self.height)
        if isinstance(other, (Height, )):
            return self.__class__(self.width, self.height + other)
        return self.__class__(self.width + other[0], self.height + other[1])

* Tue 17 Feb 2015 01:36:33 AM JST
        size = self - other
        self.width = size.get_width()
        self.height = size.get_height()
        return self

* Tue 17 Feb 2015 01:37:03 AM JST
        if isinstance(other, (Width, )):
            return self.__class__(self.width * other, self.height)
        if isinstance(other, (Height, )):
            return self.__class__(self.width, self.height * other)
        return self.__class__(self.width * other[0], self.height * other[1])

* Tue 17 Feb 2015 01:37:48 AM JST
        size = self * other
        self.width = size.get_width()
        self.height = size.get_height()
        return self


* Tue 17 Feb 2015 01:39:57 AM JST
int(
* Tue 17 Feb 2015 01:40:00 AM JST
int(
* Tue 17 Feb 2015 01:40:35 AM JST
from rectangle import *
* Tue 17 Feb 2015 01:47:40 AM JST
        if isinstance(other, (int, )):
            return self.__class__(self.width * other, self.height * other)

* Tue 17 Feb 2015 01:48:50 AM JST
    def __iadd__(self, other):
        size = self + other
        self.width = size.get_width()
        self.height = size.get_height()
        return self


* Tue 17 Feb 2015 01:49:12 AM JST
        if isinstance(other, (int, )):
            return self.__class__(self.width * other, self.height * other)

* Tue 17 Feb 2015 01:50:30 AM JST
        if isinstance(other, (int, )):
            return self.__class__(self.width + other, self.height + other)

* Tue 17 Feb 2015 01:50:36 AM JST
width
* Tue 17 Feb 2015 01:50:38 AM JST
height
* Tue 17 Feb 2015 01:50:45 AM JST
        if isinstance(other, (int, )):
            return self.__class__(self.x + other, self.y + other)

* Tue 17 Feb 2015 01:51:22 AM JST
    def __iadd__(self, other):
        point = self + other
        self.x = point.get_x()
        self.y = point.get_y()
        return self


* Tue 17 Feb 2015 01:51:31 AM JST
        if isinstance(other, (int, )):
            return self.__class__(self.x * other, self.y * other)

* Tue 17 Feb 2015 01:52:44 AM JST
        if isinstance(other, (Dimension, Width, Height)):
            return self.__class__(self.location, self.size + other)

* Tue 17 Feb 2015 01:53:21 AM JST
        if isinstance(other, (int, )):
            return self.__class__(self.location + other, self.size + other)

* Tue 17 Feb 2015 01:56:28 AM JST
2)
* Tue 17 Feb 2015 01:56:28 AM JST
2,2)
* Tue 17 Feb 2015 01:56:29 AM JST
Point(2,2)
* Tue 17 Feb 2015 02:03:01 AM JST

* Tue 17 Feb 2015 02:03:01 AM JST

* Tue 17 Feb 2015 02:03:01 AM JST
from userint import UserInt # use in dispatch

* Tue 17 Feb 2015 02:24:52 AM JST
VerticalTile
* Tue 17 Feb 2015 03:59:10 PM JST
xcffib
* Tue 17 Feb 2015 04:00:46 PM JST
xcffib 
* Tue 17 Feb 2015 04:11:43 PM JST
synthetic
* Wed 18 Feb 2015 12:38:08 AM JST
git://anongit.freedesktop.org/xdg/xdg-specs
* Wed 18 Feb 2015 12:40:21 AM JST
svn checkout http://samurai-x.googlecode.com/svn/trunk/ samurai-x-read-only
* Wed 18 Feb 2015 01:03:57 AM JST
ewmh 
* Wed 18 Feb 2015 05:49:13 PM JST
DownloadManager
* Wed 18 Feb 2015 05:51:41 PM JST
DownloadManager
* Wed 18 Feb 2015 05:57:59 PM JST
GetDownload
* Wed 18 Feb 2015 06:07:12 PM JST
GetDownload(
* Wed 18 Feb 2015 06:16:50 PM JST
ChromeDownloadManagerDelegate
* Wed 18 Feb 2015 06:41:33 PM JST
chrome/browser/download
* Wed 18 Feb 2015 06:53:33 PM JST
GetDownloadManagerDelegate
* Wed 18 Feb 2015 06:55:58 PM JST
ChromeDownloadManagerDelegate
* Wed 18 Feb 2015 09:34:19 PM JST
DownloadManager
* Wed 18 Feb 2015 09:43:15 PM JST
http://example.com/bar.pdf
* Wed 18 Feb 2015 10:27:34 PM JST
http://www.bouml.fr/download.html#Debian
* Wed 18 Feb 2015 10:27:57 PM JST
deb http://www.bouml.fr/apt/squeeze squeeze non-free
* Wed 18 Feb 2015 10:28:01 PM JST
squeeze
* Wed 18 Feb 2015 10:28:07 PM JST
squeeze
* Wed 18 Feb 2015 10:32:39 PM JST
squeeze
* Wed 18 Feb 2015 10:32:47 PM JST
deb http://deb.torproject.org/torproject.org wheezy main
* Fri 20 Feb 2015 02:14:01 AM JST
BookmarkBrowsertest	
oCBookmarkBubbleController	
oCBookmarkBubbleDelegate	
oCBookmarkBubbleSignInDelegate	
oCBookmarkBubbleSignInDelegateTest	
oCBookmarkBubbleView	
oCBookmarkBubbleViewObserver	
oCBookmarkBubbleViewTest	
oCBookmarkButton	
oCBookmarkButtonCell	
oC<BookmarkButtonControllerProtocol>	
oC<BookmarkButtonDelegate>	
oCBookmarkContextMenu	
oCBookmarkContextMenuCocoaController	
oCBookmarkContextMenuController	
oCBookmarkContextMenuControllerDelegate	
oCBookmarkContextMenuControllerTest	
oCBookmarkContextMenuDelegateBridge	
oCBookmarkContextMenuNotificationObserver	
oCBookmarkContextMenuObserver	
oCBookmarkContextMenuTest	
oCBookmarkEditor	
oCBookmarkEditorBaseController	
oCBookmarkEditorBaseControllerBridge	
oCBookmarkEditorController	
oCBookmarkEditorView	
oCBookmarkEditorViewTest	
oCBookmarkFaviconFetcher	
oCBookmarkFolderAppleScript	
oCBookmarkFolderInfo	
oCBookmarkFolderTarget	
oCBookmarkFolderTargetTest	
oCBookmarkHTMLWriterTest	
oCBookmarkInfo	
oCBookmarkInstantExtendedTest	
oCBookmarkItemAppleScript	
oCBookmarkMenuCocoaController	
oCBookmarkMenuCocoaControllerTest	
oCBookmarkMenuController	
oCBookmarkMenuControllerObserver	
oCBookmarkMenuDelegate	
oCBookmarkMenuDelegateTest	
oCBookmarkModelFactory	
oCBookmarkModelLoadedObserver	
oCBookmarkModelObserverForCocoa	
oCBookmarkModelObserverTask	
oCBookmarkModelTask	
oCBookmarkNameFolderController	
oCBookmarkNodeAppleScript	
oCBookmarkProvider	
oCBookmarkProviderTest	
oCBookmarkPulseObserver	
oCBookmarkRenumberObserver	
oCBookmarksBridge	
oCBookmarksExportObserver	
oCBookmarksObserver	
oCBookmarksSyncPerfTest	
oCBookmarksTest	
oCBookmarksTestInfo	
oCBookmarkSubMenuModel	
oCBookmarksUI	
oCBookmarksUIHTMLSource	
oCBookmarkSyncPromoController	
oCBookmarkSyncPromoView	
oCBookmarkSyncPromoViewTest	
oCBookmarkTabHelper	
oCBookmarkTabHelperDelegate	
oCBookmarkTreeBrowserCell	
oCBookmarkUndoService
* Fri 20 Feb 2015 02:14:25 AM JST

* Fri 20 Feb 2015 02:14:25 AM JST

* Fri 20 Feb 2015 02:14:25 AM JST
BookmarkBrowsertest	

* Fri 20 Feb 2015 02:14:28 AM JST

* Fri 20 Feb 2015 02:14:28 AM JST

* Fri 20 Feb 2015 02:14:28 AM JST
BookmarkBubbleSignInDelegateTest	

* Fri 20 Feb 2015 02:14:32 AM JST

* Fri 20 Feb 2015 02:14:32 AM JST

* Fri 20 Feb 2015 02:14:32 AM JST
BookmarkBubbleViewTest	

* Fri 20 Feb 2015 02:14:35 AM JST

* Fri 20 Feb 2015 02:14:35 AM JST

* Fri 20 Feb 2015 02:14:35 AM JST
BookmarkContextMenuControllerTest	

* Fri 20 Feb 2015 02:14:37 AM JST

* Fri 20 Feb 2015 02:14:37 AM JST

* Fri 20 Feb 2015 02:14:37 AM JST
BookmarkContextMenuTest	

* Fri 20 Feb 2015 02:14:42 AM JST

* Fri 20 Feb 2015 02:14:42 AM JST

* Fri 20 Feb 2015 02:14:42 AM JST
BookmarkEditorViewTest	

* Fri 20 Feb 2015 02:14:44 AM JST

* Fri 20 Feb 2015 02:14:44 AM JST

* Fri 20 Feb 2015 02:14:44 AM JST
BookmarkFolderTargetTest	

* Fri 20 Feb 2015 02:14:44 AM JST

* Fri 20 Feb 2015 02:14:44 AM JST

* Fri 20 Feb 2015 02:14:45 AM JST
BookmarkHTMLWriterTest	

* Fri 20 Feb 2015 02:14:45 AM JST

* Fri 20 Feb 2015 02:14:45 AM JST

* Fri 20 Feb 2015 02:14:45 AM JST
BookmarkInstantExtendedTest	

* Fri 20 Feb 2015 02:14:45 AM JST

* Fri 20 Feb 2015 02:14:45 AM JST

* Fri 20 Feb 2015 02:14:45 AM JST
BookmarkMenuCocoaControllerTest	

* Fri 20 Feb 2015 02:14:45 AM JST

* Fri 20 Feb 2015 02:14:45 AM JST

* Fri 20 Feb 2015 02:14:45 AM JST
BookmarkMenuDelegateTest	

* Fri 20 Feb 2015 02:14:46 AM JST

* Fri 20 Feb 2015 02:14:46 AM JST

* Fri 20 Feb 2015 02:14:46 AM JST
BookmarkProviderTest	

* Fri 20 Feb 2015 02:14:46 AM JST

* Fri 20 Feb 2015 02:14:46 AM JST

* Fri 20 Feb 2015 02:14:46 AM JST
BookmarksSyncPerfTest	

* Fri 20 Feb 2015 02:14:46 AM JST

* Fri 20 Feb 2015 02:14:46 AM JST

* Fri 20 Feb 2015 02:14:46 AM JST
BookmarksTest	

* Fri 20 Feb 2015 02:14:46 AM JST

* Fri 20 Feb 2015 02:14:46 AM JST

* Fri 20 Feb 2015 02:14:46 AM JST
BookmarksTestInfo	

* Fri 20 Feb 2015 02:14:46 AM JST

* Fri 20 Feb 2015 02:14:46 AM JST

* Fri 20 Feb 2015 02:14:46 AM JST
BookmarkSyncPromoViewTest	

* Fri 20 Feb 2015 02:49:03 AM JST
DownloadShelfController
* Fri 20 Feb 2015 04:19:45 AM JST
BookmarkNodeMoved
* Fri 20 Feb 2015 04:58:50 AM JST
UndoOperation
* Fri 20 Feb 2015 05:29:50 AM JST
GetBookmarkModel
* Fri 20 Feb 2015 05:41:21 AM JST
BookmarkModel
* Fri 20 Feb 2015 06:03:25 AM JST
components
* Fri 20 Feb 2015 06:07:25 AM JST
BookmarkModelObserver
* Fri 20 Feb 2015 06:07:40 AM JST
OnWillRemoveBookmarks
* Fri 20 Feb 2015 06:24:02 AM JST
undo_manager
* Fri 20 Feb 2015 10:22:02 PM JST
chrome/
* Fri 20 Feb 2015 10:22:45 PM JST
chrome/
* Fri 20 Feb 2015 10:23:00 PM JST
NO
* Fri 20 Feb 2015 10:40:57 PM JST
NO
* Fri 20 Feb 2015 10:41:31 PM JST
YES
* Fri 20 Feb 2015 10:41:46 PM JST
YES
* Fri 20 Feb 2015 10:42:48 PM JST
YES
* Mon 23 Feb 2015 05:15:48 AM JST
/media/Data/MYTEMP/src/src/chrome/common/common_message_generator.cc
* Mon 23 Feb 2015 05:25:55 AM JST
*Test
* Mon 23 Feb 2015 03:36:40 PM JST
e2wm:def-plugin-files-dir
* Mon 23 Feb 2015 03:37:59 PM JST
abstract
* Mon 23 Feb 2015 03:38:06 PM JST
abstrac
* Mon 23 Feb 2015 03:38:18 PM JST
Epoch
* Mon 23 Feb 2015 03:41:28 PM JST
elapse
* Mon 23 Feb 2015 03:53:14 PM JST
time elapse python
* Mon 23 Feb 2015 04:03:37 PM JST
self._start = 
* Mon 23 Feb 2015 04:03:55 PM JST

* Mon 23 Feb 2015 04:03:55 PM JST

* Mon 23 Feb 2015 04:03:55 PM JST
        self._start = start

* Mon 23 Feb 2015 04:05:16 PM JST
_start - 
* Mon 23 Feb 2015 04:05:16 PM JST
self._start - 
* Mon 23 Feb 2015 04:05:18 PM JST
self.
* Mon 23 Feb 2015 04:06:14 PM JST
Timer
* Mon 23 Feb 2015 04:09:08 PM JST
update
* Mon 23 Feb 2015 04:09:11 PM JST
update
* Mon 23 Feb 2015 04:09:16 PM JST
update
* Mon 23 Feb 2015 04:10:17 PM JST
start
* Mon 23 Feb 2015 04:16:19 PM JST
datetime
* Mon 23 Feb 2015 04:16:19 PM JST
import datetime
* Tue 24 Feb 2015 01:35:55 AM JST
messages.cc
* Tue 24 Feb 2015 01:53:53 AM JST
message_generator.cc
* Tue 24 Feb 2015 03:12:39 AM JST
/media/Data/MYTEMP/src/src/content/common/frame_param.cc
* Tue 24 Feb 2015 05:03:39 AM JST
traits.cc
* Tue 24 Feb 2015 04:44:49 PM JST
title
* Tue 24 Feb 2015 04:44:52 PM JST
65011734
* Tue 24 Feb 2015 04:47:02 PM JST
65011734
* Tue 24 Feb 2015 04:47:28 PM JST
ab
* Tue 24 Feb 2015 04:47:49 PM JST
65011734
* Tue 24 Feb 2015 04:48:10 PM JST
65011734
* Tue 24 Feb 2015 10:19:54 PM JST
~/
* Tue 24 Feb 2015 10:51:34 PM JST
65011734
* Tue 24 Feb 2015 10:55:10 PM JST
change_attributes_window
* Tue 24 Feb 2015 10:56:32 PM JST
MapNotifySetAttribute
* Tue 24 Feb 2015 11:08:54 PM JST
sendkeys?
* Tue 24 Feb 2015 11:09:03 PM JST
sendkeys?
* Tue 24 Feb 2015 11:22:52 PM JST
65011734
* Tue 24 Feb 2015 11:48:51 PM JST
globalconf.keys
* Tue 24 Feb 2015 11:51:06 PM JST
c.core.GrabKey.async(True, 482, 0, 24)
* Tue 24 Feb 2015 11:51:13 PM JST
65011734
* Tue 24 Feb 2015 11:52:05 PM JST
c.core.UngrabKey(24, 482, 0)